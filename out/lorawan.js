// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('Module[\'ENVIRONMENT\'] value is not valid. must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', function(reason, p) {
    Module['printErr']('node.js exiting due to unhandled promise rejection');
    process['exit'](1);
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  Module['setWindowTitle'] = function(title) { document.title = title };
}
else {
  // Unreachable because SHELL is dependent on the others
  throw new Error('unknown runtime environment');
}

// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
Module['print'] = typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null);
Module['printErr'] = typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || Module['print']);

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = setTempRet0 = getTempRet0 = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  assert(!staticSealed);
  var ret = STATICTOP;
  STATICTOP = (STATICTOP + size + 15) & -16;
  return ret;
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  if (end >= TOTAL_MEMORY) {
    var success = enlargeMemory();
    if (!success) {
      HEAP32[DYNAMICTOP_PTR>>2] = ret;
      return 0;
    }
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  var ret = size = Math.ceil(size / factor) * factor;
  return ret;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    Module.printErr(text);
  }
}



var jsCallStartIndex = 1;
var functionPointers = new Array(0);

// 'sig' parameter is only used on LLVM wasm backend
function addFunction(func, sig) {
  if (typeof sig === 'undefined') {
    Module.printErr('Warning: addFunction: Provide a wasm function signature ' +
                    'string as a second argument');
  }
  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
}

function removeFunction(index) {
  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}


function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // FIXME backwards compatibility layer for ports. Support some Runtime.*
  //       for now, fix it there, then remove it from here. That way we
  //       can minimize any period of breakage.
  dynCall: dynCall, // for SDL2 port
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

var JSfuncs = {
  // Helpers for cwrap -- it can't refer to Runtime directly because it might
  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
  // out what the minified function name is.
  'stackSave': function() {
    stackSave()
  },
  'stackRestore': function() {
    stackRestore()
  },
  // type conversion from js to c
  'arrayToC' : function(arr) {
    var ret = stackAlloc(arr.length);
    writeArrayToMemory(arr, ret);
    return ret;
  },
  'stringToC' : function(str) {
    var ret = 0;
    if (str !== null && str !== undefined && str !== 0) { // null string
      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
      var len = (str.length << 2) + 1;
      ret = stackAlloc(len);
      stringToUTF8(str, ret, len);
    }
    return ret;
  }
};
// For fast lookup of conversion functions
var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

// C calling interface.
function ccall (ident, returnType, argTypes, args, opts) {
  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  if (returnType === 'string') ret = Pointer_stringify(ret);
  if (stack !== 0) {
    stackRestore(stack);
  }
  return ret;
}

function cwrap (ident, returnType, argTypes) {
  argTypes = argTypes || [];
  var cfunc = getCFunc(ident);
  // When the function takes numbers and returns a number, we can just return
  // the original function
  var numericArgs = argTypes.every(function(type){ return type === 'number'});
  var numericRet = returnType !== 'string';
  if (numericRet && numericArgs) {
    return cfunc;
  }
  return function() {
    return ccall(ident, returnType, argTypes, arguments);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return staticAlloc(size);
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return UTF8ToString(ptr);
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

function demangle(func) {
  warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
  Module['buffer'] = buffer;
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

assert(Math['imul'] && Math['fround'] && Math['clz32'] && Math['trunc'], 'this is a legacy browser, build with LEGACY_VM_SUPPORT');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



var /* show errors on likely calls to FS when it was not included */ FS = {
  error: function() {
    abort('Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with  -s FORCE_FILESYSTEM=1');
  },
  init: function() { FS.error() },
  createDataFile: function() { FS.error() },
  createPreloadedFile: function() { FS.error() },
  createLazyFile: function() { FS.error() },
  open: function() { FS.error() },
  mkdev: function() { FS.error() },
  registerDevice: function() { FS.error() },
  analyzePath: function() { FS.error() },
  loadFilesFromDB: function() { FS.error() },

  ErrnoError: function ErrnoError() { FS.error() },
};
Module['FS_createDataFile'] = FS.createDataFile;
Module['FS_createPreloadedFile'] = FS.createPreloadedFile;



// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [function($0, $1, $2, $3, $4, $5) { window.MbedJSHal.lora.sendFsk($0, $1, $2, $3, $4, $5); },
 function($0, $1, $2, $3, $4, $5) { window.MbedJSHal.lora.sendLoRa($0, $1, $2, $3, $4, $5); },
 function() { console.log('receive', Date.now()); },
 function() { return Date.now(); },
 function() { return Math.random() * 0x8000000 | 0; },
 function($0, $1) { MbedJSHal.gpio.write($0, $1); },
 function() { console.log('rx_frame', Date.now()); },
 function($0) { window.MbedJSHal.lora.init($0); },
 function($0, $1) { MbedJSHal.gpio.init_in($0, $1, 3); },
 function($0, $1) { MbedJSHal.gpio.init_out($0, $1, 0); },
 function($0, $1, $2) { MbedJSHal.gpio.init_out($0, $1, $2); },
 function($0, $1, $2, $3, $4) { MbedJSHal.gpio.init_inout($0, $1, $2, $3, $4); },
 function($0, $1) { MbedJSHal.gpio.irq_init($0, $1); },
 function($0, $1) { MbedJSHal.gpio.irq_free($0); },
 function($0, $1, $2) { MbedJSHal.gpio.irq_set($0, $1, $2); },
 function($0) { window.MbedJSHal.timers.ticker_detach($0); },
 function($0, $1) { window.MbedJSHal.timers.ticker_setup($0, $1); },
 function($0, $1, $2) { window.MbedJSHal.sht31.init($0, $1, $2); },
 function($0) { return window.MbedJSHal.sht31.read_temperature($0); }];

function _emscripten_asm_const_iii(code, a0, a1) {
  return ASM_CONSTS[code](a0, a1);
}

function _emscripten_asm_const_iiiiii(code, a0, a1, a2, a3, a4) {
  return ASM_CONSTS[code](a0, a1, a2, a3, a4);
}

function _emscripten_asm_const_iiii(code, a0, a1, a2) {
  return ASM_CONSTS[code](a0, a1, a2);
}

function _emscripten_asm_const_i(code) {
  return ASM_CONSTS[code]();
}

function _emscripten_asm_const_ii(code, a0) {
  return ASM_CONSTS[code](a0);
}

function _emscripten_asm_const_iiiiiii(code, a0, a1, a2, a3, a4, a5) {
  return ASM_CONSTS[code](a0, a1, a2, a3, a4, a5);
}




STATIC_BASE = GLOBAL_BASE;

STATICTOP = STATIC_BASE + 25536;
/* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__sub_I_main_cpp() } });


memoryInitializer = "lorawan.js.mem";





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};function ___cxa_begin_catch(ptr) {
      var info = EXCEPTIONS.infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exception--;
      }
      if (info) info.rethrown = false;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  
  
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((setTempRet0(0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((setTempRet0(throwntype),thrown)|0);
    }function ___gxx_personality_v0() {
    }

  function ___lock() {}

  
    

  
  var SYSCALLS={varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function flush_NO_FILESYSTEM() {
      // flush anything remaining in the buffers during shutdown
      var fflush = Module["_fflush"];
      if (fflush) fflush(0);
      var printChar = ___syscall146.printChar;
      if (!printChar) return;
      var buffers = ___syscall146.buffers;
      if (buffers[1].length) printChar(1, 10);
      if (buffers[2].length) printChar(2, 10);
    }function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      // hack to support printf in NO_FILESYSTEM
      var stream = SYSCALLS.get(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      var ret = 0;
      if (!___syscall146.buffers) {
        ___syscall146.buffers = [null, [], []]; // 1 => stdout, 2 => stderr
        ___syscall146.printChar = function(stream, curr) {
          var buffer = ___syscall146.buffers[stream];
          assert(buffer);
          if (curr === 0 || curr === 10) {
            (stream === 1 ? Module['print'] : Module['printErr'])(UTF8ArrayToString(buffer, 0));
            buffer.length = 0;
          } else {
            buffer.push(curr);
          }
        };
      }
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAP32[(((iov)+(i*8))>>2)];
        var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
        for (var j = 0; j < len; j++) {
          ___syscall146.printChar(stream, HEAPU8[ptr+j]);
        }
        ret += len;
      }
      return ret;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC);   

  function ___unlock() {}

   

  function _abort() {
      Module['abort']();
    }

   

   

  
  var ___async_cur_frame=0; 

  var _emscripten_asm_const_int=true;

   

   

  
  
  var ___async=0;
  
  var ___async_unwind=1;
  
  var ___async_retval=STATICTOP; STATICTOP += 16;; 
  
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now())|0;
          setTimeout(Browser.mainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (typeof setImmediate === 'undefined') {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = 'setimmediate';
          function Browser_setImmediate_messageHandler(event) {
            // When called in current thread or Worker, the main loop ID is structured slightly different to accommodate for --proxy-to-worker runtime listening to Worker events,
            // so check for both cases.
            if (event.data === emscriptenMainLoopMessageId || event.data.target === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          addEventListener("message", Browser_setImmediate_messageHandler, true);
          setImmediate = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            if (ENVIRONMENT_IS_WORKER) {
              if (Module['setImmediates'] === undefined) Module['setImmediates'] = [];
              Module['setImmediates'].push(func);
              postMessage({target: emscriptenMainLoopMessageId}); // In --proxy-to-worker, route the message via proxyClient.js
            } else postMessage(emscriptenMainLoopMessageId, "*"); // On the main thread, can just send the message to itself.
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          setImmediate(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }
  
  function _emscripten_get_now() { abort() }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var browserIterationFunc;
      if (typeof arg !== 'undefined') {
        browserIterationFunc = function() {
          Module['dynCall_vi'](func, arg);
        };
      } else {
        browserIterationFunc = function() {
          Module['dynCall_v'](func);
        };
      }
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          
          // catches pause/resume main loop from blocker execution
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
          
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        } else if (Browser.mainLoop.timingMode == 0/*EM_TIMING_SETTIMEOUT*/) {
          Browser.mainLoop.tickStartTime = _emscripten_get_now();
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(browserIterationFunc);
  
        checkStackCookie();
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullscreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === Module['canvas'] ||
                                document['mozPointerLockElement'] === Module['canvas'] ||
                                document['webkitPointerLockElement'] === Module['canvas'] ||
                                document['msPointerLockElement'] === Module['canvas'];
        }
        var canvas = Module['canvas'];
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
                Module['canvas'].requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullscreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullscreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['fullscreenElement'] || document['mozFullScreenElement'] ||
               document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.exitFullscreen = document['exitFullscreen'] ||
                                    document['cancelFullScreen'] ||
                                    document['mozCancelFullScreen'] ||
                                    document['msExitFullscreen'] ||
                                    document['webkitCancelFullScreen'] ||
                                    function() {};
            canvas.exitFullscreen = canvas.exitFullscreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullscreen = true;
            if (Browser.resizeCanvas) Browser.setFullscreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullscreen);
          if (Module['onFullscreen']) Module['onFullscreen'](Browser.isFullscreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullscreenChange, false);
          document.addEventListener('mozfullscreenchange', fullscreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullscreenChange, false);
          document.addEventListener('MSFullscreenChange', fullscreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullscreen = canvasContainer['requestFullscreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullscreen'] ? function() { canvasContainer['webkitRequestFullscreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null) ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullscreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullscreen();
        }
      },requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
          Module.printErr('Browser.requestFullScreen() is deprecated. Please call Browser.requestFullscreen instead.');
          Browser.requestFullScreen = function(lockPointer, resizeCanvas, vrDevice) {
            return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
          }
          return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
            Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
            Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
            // just add the mouse delta to the current absolut mouse position
            // FIXME: ideally this should be clamped against the canvas size and zero
            Browser.mouseX += Browser.mouseMovementX;
            Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';
        Module['readAsync'](url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (dep) removeRunDependency(dep);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (dep) addRunDependency(dep);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullscreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['fullscreenElement'] || document['mozFullScreenElement'] ||
             document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};function _emscripten_sleep(ms) {
      Module['setAsync'](); // tell the scheduler that we have a callback on hold
      Browser.safeSetTimeout(_emscripten_async_resume, ms);
    }

  function _gettimeofday(ptr) {
      var now = Date.now();
      HEAP32[((ptr)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((ptr)+(4))>>2)]=((now % 1000)*1000)|0; // microseconds
      return 0;
    }



   

  var _llvm_ceil_f64=Math_ceil;

  var _llvm_floor_f64=Math_floor;

  function _llvm_trap() {
      abort('trap!');
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

   

  function _pthread_cond_init() { return 0; }

  function _pthread_cond_signal() { return 0; }

  function _pthread_cond_timedwait() { return 0; }

  function _pthread_cond_wait() { return 0; }

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function _pthread_mutex_init() {}

   

   

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Module['dynCall_v'](func);
      _pthread_once.seen[ptr] = 1;
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    } 

  function _sleep_manager_lock_deep_sleep_internal() {
  Module['printErr']('missing function: sleep_manager_lock_deep_sleep_internal'); abort(-1);
  }

  function _sleep_manager_unlock_deep_sleep_internal() {
  Module['printErr']('missing function: sleep_manager_unlock_deep_sleep_internal'); abort(-1);
  }
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Module.printErr("Module.requestFullScreen is deprecated. Please call Module.requestFullscreen instead."); Module["requestFullScreen"] = Module["requestFullscreen"]; Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) };
if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function _emscripten_get_now_actual() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
    _emscripten_get_now = function() { return self['performance']['now'](); };
  } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
    _emscripten_get_now = function() { return performance['now'](); };
  } else {
    _emscripten_get_now = Date.now;
  };
DYNAMICTOP_PTR = staticAlloc(4);

STACK_BASE = STACKTOP = alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

var ASSERTIONS = true;

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}



var debug_table_i = ["0", "_ccm_ctx_alloc", "_gcm_ctx_alloc", "_aes_ctx_alloc", "_us_ticker_read", "_us_ticker_get_info", "0", "0"];
var debug_table_ii = ["0", "__ZN16SX1276_LoRaRadio6randomEv", "__ZN16SX1276_LoRaRadio10get_statusEv", "__ZN16LoRaWANInterface7connectEv", "__ZN16LoRaWANInterface10disconnectEv", "__ZN16LoRaWANInterface22add_link_check_requestEv", "__ZN16LoRaWANInterface24enable_adaptive_datarateEv", "__ZN16LoRaWANInterface25disable_adaptive_datarateEv", "__ZN16LoRaWANInterface19remove_channel_planEv", "__ZN16LoRaWANInterface14cancel_sendingEv", "___stdio_close", "__ZN6events5EventIFvvEE10event_postIPS1_EEiPNS2_5eventE", "0", "0", "0", "0"];
var debug_table_iii = ["0", "__ZN16SX1276_LoRaRadio18check_rf_frequencyEj", "__ZN16LoRaWANInterface10initializeEPN6events10EventQueueE", "__ZN16LoRaWANInterface7connectERK15lorawan_connect", "__ZN16LoRaWANInterface12set_datarateEh", "__ZN16LoRaWANInterface25set_confirmed_msg_retriesEh", "__ZN16LoRaWANInterface16set_channel_planERK16lora_channelplan", "__ZN16LoRaWANInterface16get_channel_planER16lora_channelplan", "__ZN16LoRaWANInterface14remove_channelEh", "__ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t", "__ZN16LoRaWANInterface16set_device_classE14device_class_t", "__ZN16LoRaWANInterface15get_tx_metadataER19lorawan_tx_metadata", "__ZN16LoRaWANInterface15get_rx_metadataER19lorawan_rx_metadata", "__ZN16LoRaWANInterface20get_backoff_metadataERi", "__ZN7LoRaPHY9rx_configEP18rx_config_params_t", "__ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s", "__ZN7LoRaPHY16get_alternate_DREh", "__ZN7LoRaPHY14remove_channelEh", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_iiii = ["0", "__ZN16SX1276_LoRaRadio11time_on_airE10modem_typeh", "__ZN7LoRaPHY19request_new_channelEaP16channel_params_t", "__ZN7LoRaPHY25accept_tx_param_setup_reqEhh", "__ZN7LoRaPHY18dl_channel_requestEhj", "__ZN7LoRaPHY11add_channelEPK16channel_params_th", "__ZN7LoRaPHY15apply_DR_offsetEaa", "__ZNK7LoRaPHY25verify_frequency_for_bandEjh", "_ccm_aes_setkey_wrap", "_gcm_aes_setkey_wrap", "_aes_setkey_enc_wrap", "_aes_setkey_dec_wrap", "_memset", "___stdio_write", "___stdio_seek", "___stdout_write", "_sn_write", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv", "_get_pkcs_padding", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_iiiii = ["0", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj", "_aes_crypt_ecb_wrap", "0"];
var debug_table_iiiiii = ["0", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj", "__ZN16LoRaWANInterface4sendEhPKhti", "__ZN16LoRaWANInterface7receiveEhPhti", "__ZN16LoRaWANInterface7receiveEPhtRhRi", "__ZN7LoRaPHY16set_next_channelEP26channel_selection_params_sPhPjS3_", "0", "0"];
var debug_table_iiiiiii = ["0", "__ZN7LoRaPHY16link_ADR_requestEP16adr_req_params_tPaS2_PhS3_", "_aes_crypt_cbc_wrap", "0"];
var debug_table_iiiiiiii = ["0", "_aes_crypt_ctr_wrap"];
var debug_table_v = ["0", "___cxa_pure_virtual", "_us_ticker_init", "_us_ticker_disable_interrupt", "_us_ticker_clear_interrupt", "_us_ticker_fire_interrupt", "__ZL25default_terminate_handlerv", "__ZL12send_messagev", "__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_vi = ["0", "__ZN16SX1276_LoRaRadio11radio_resetEv", "__ZN16SX1276_LoRaRadio5sleepEv", "__ZN16SX1276_LoRaRadio7standbyEv", "__ZN16SX1276_LoRaRadio9start_cadEv", "__ZN16SX1276_LoRaRadio4lockEv", "__ZN16SX1276_LoRaRadio6unlockEv", "__ZN16SX1276_LoRaRadioD2Ev", "__ZN16SX1276_LoRaRadioD0Ev", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPv", "__ZN4mbed11InterruptInD2Ev", "__ZN4mbed11InterruptInD0Ev", "__ZN4mbed7TimeoutD2Ev", "__ZN4mbed7TimeoutD0Ev", "__ZN4mbed7Timeout7handlerEv", "__ZN4mbed10TimerEventD2Ev", "__ZN4mbed10TimerEventD0Ev", "_mbed_trace_default_print", "__ZN16LoRaWANInterface25remove_link_check_requestEv", "__ZN16LoRaWANInterfaceD2Ev", "__ZN16LoRaWANInterfaceD0Ev", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPv", "__ZN4mbed8CallbackIFvPKhtsaEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPv", "__ZN4mbed8CallbackIFvbEE13function_dtorINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPv", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPv", "__ZN7LoRaPHYD2Ev", "__ZN7LoRaPHYD0Ev", "__ZN7LoRaPHY24restore_default_channelsEv", "__ZN12LoRaPHYEU868D2Ev", "__ZN12LoRaPHYEU868D0Ev", "_ccm_ctx_free", "_gcm_ctx_free", "_aes_ctx_free", "_us_ticker_set_interrupt", "__ZN4mbed6TickerD2Ev", "__ZN4mbed6TickerD0Ev", "__ZN4mbed6Ticker7handlerEv", "__ZN4mbed8CallbackIFvvEE13function_callIN6events5EventIS1_EEEEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorIN6events5EventIS1_EEEEvPv", "__ZN4mbed8CallbackIFv11lora_eventsEE13function_dtorIPS2_EEvPv", "__ZN10__cxxabiv116__shim_type_infoD2Ev", "__ZN10__cxxabiv117__class_type_infoD0Ev", "__ZNK10__cxxabiv116__shim_type_info5noop1Ev", "__ZNK10__cxxabiv116__shim_type_info5noop2Ev", "__ZN10__cxxabiv120__si_class_type_infoD0Ev", "__ZN10__cxxabiv121__vmi_class_type_infoD0Ev", "__ZN16SX1276_LoRaRadio10init_radioEP12radio_events__async_cb", "__ZN16SX1276_LoRaRadio4sendEPhh__async_cb", "__ZN16SX1276_LoRaRadio11rx_done_irqEv", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_35", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_36", "__ZN16SX1276_LoRaRadio15timeout_irq_isrEv", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_37", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_38", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_39", "__ZN16SX1276_LoRaRadio6randomEv__async_cb", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_149", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_145", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_146", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_148", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_147", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_144", "__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb", "__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_227", "__ZN16SX1276_LoRaRadioD2Ev__async_cb", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_268", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_262", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_267", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_263", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_266", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_264", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_265", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_274", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_273", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_272", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_271", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_270", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_269", "__ZN16SX1276_LoRaRadioD0Ev__async_cb", "__ZN16SX1276_LoRaRadio11rx_done_irqEv__async_cb", "__ZN16SX1276_LoRaRadio15timeout_irq_isrEv__async_cb", "__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb", "__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_364", "__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_365", "__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_366", "__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_367", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv__async_cb", "__ZN16SX1276_LoRaRadio11tx_done_irqEv", "__ZN16SX1276_LoRaRadio8transmitEj__async_cb", "__ZN16SX1276_LoRaRadio8transmitEj__async_cb_121", "__ZN16SX1276_LoRaRadio8transmitEj__async_cb_122", "__ZN16SX1276_LoRaRadio11tx_done_irqEv__async_cb", "__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_59", "__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_58", "__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_57", "__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb", "__ZN4mbed11InterruptInD2Ev__async_cb", "__ZN4mbed11InterruptInD2Ev__async_cb_10", "__ZN4mbed11InterruptInD0Ev__async_cb", "__ZN4mbed11InterruptInD0Ev__async_cb_1", "__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb", "__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb_213", "__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb", "__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_204", "__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_205", "__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_206", "__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_207", "__ZN4mbed7TimeoutD2Ev__async_cb", "__ZN4mbed7TimeoutD2Ev__async_cb_347", "__ZN4mbed7TimeoutD0Ev__async_cb", "__ZN4mbed7TimeoutD0Ev__async_cb_349", "__ZN4mbed7Timeout7handlerEv__async_cb", "__ZN4mbed7Timeout7handlerEv__async_cb_356", "__ZN4mbed7Timeout7handlerEv__async_cb_354", "__ZN4mbed7Timeout7handlerEv__async_cb_355", "__ZN4mbed5TimerC2Ev__async_cb", "__ZN4mbed5Timer5startEv__async_cb", "__ZN4mbed5Timer7read_msEv__async_cb", "__ZN4mbed10TimerEventD2Ev__async_cb", "__ZN4mbed10TimerEvent3irqEj", "__ZN4mbed10TimerEventC2Ev__async_cb", "__ZN4mbed10TimerEvent3irqEj__async_cb", "__ZN6events10EventQueue8dispatchEi__async_cb", "__ZN6events10EventQueue6cancelEi__async_cb", "_equeue_alloc__async_cb", "_equeue_dealloc__async_cb", "_equeue_post__async_cb", "_equeue_enqueue__async_cb", "_equeue_cancel__async_cb", "_equeue_dispatch__async_cb", "_equeue_dispatch__async_cb_14", "_equeue_dispatch__async_cb_12", "_equeue_dispatch__async_cb_13", "_equeue_dispatch__async_cb_15", "_mbed_trace_default_print__async_cb", "_mbed_tracef__async_cb", "_mbed_vtracef__async_cb", "_mbed_vtracef__async_cb_170", "_mbed_vtracef__async_cb_160", "_mbed_vtracef__async_cb_161", "_mbed_vtracef__async_cb_162", "_mbed_vtracef__async_cb_169", "_mbed_vtracef__async_cb_163", "_mbed_vtracef__async_cb_168", "_mbed_vtracef__async_cb_164", "_mbed_vtracef__async_cb_165", "_mbed_vtracef__async_cb_166", "_mbed_vtracef__async_cb_167", "__ZN16LoRaWANInterface10initializeEPN6events10EventQueueE__async_cb", "__ZN16LoRaWANInterface7connectEv__async_cb", "__ZN16LoRaWANInterface7connectERK15lorawan_connect__async_cb", "__ZN16LoRaWANInterface10disconnectEv__async_cb", "__ZN16LoRaWANInterface16set_channel_planERK16lora_channelplan__async_cb", "__ZN16LoRaWANInterface19remove_channel_planEv__async_cb", "__ZN16LoRaWANInterface14remove_channelEh__async_cb", "__ZN16LoRaWANInterface4sendEhPKhti__async_cb", "__ZN16LoRaWANInterface7receiveEhPhti__async_cb", "__ZN16LoRaWANInterface7receiveEPhtRhRi__async_cb", "__ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t__async_cb", "__ZN16LoRaWANInterface16set_device_classE14device_class_t__async_cb", "__ZN16LoRaWANInterface14cancel_sendingEv__async_cb", "__ZN16LoRaWANInterfaceD2Ev__async_cb", "__ZN16LoRaWANInterfaceD0Ev__async_cb", "__ZN12LoRaWANStackD2Ev__async_cb", "__ZN12LoRaWANStackD2Ev__async_cb_258", "__ZN12LoRaWANStackD2Ev__async_cb_259", "__ZN12LoRaWANStackD2Ev__async_cb_261", "__ZN12LoRaWANStackD2Ev__async_cb_260", "__ZN12radio_eventsD2Ev__async_cb", "__ZN12radio_eventsD2Ev__async_cb_289", "__ZN12radio_eventsD2Ev__async_cb_290", "__ZN12radio_eventsD2Ev__async_cb_291", "__ZN12radio_eventsD2Ev__async_cb_292", "__ZN12radio_eventsD2Ev__async_cb_293", "__ZN12radio_eventsD2Ev__async_cb_294", "__ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb", "__ZN12LoRaWANStack20tx_interrupt_handlerEv", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_239", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_240", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_241", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_242", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_243", "__ZN12LoRaWANStack26rx_error_interrupt_handlerEv", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_244", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_245", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_246", "__ZN12LoRaWANStack28tx_timeout_interrupt_handlerEv", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_247", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_248", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_249", "__ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_250", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_251", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_252", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_253", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_254", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_255", "__ZN12LoRaWANStack20process_transmissionEv", "__ZN12LoRaWANStack20tx_interrupt_handlerEv__async_cb", "__ZN12LoRaWANStack20tx_interrupt_handlerEv__async_cb_339", "__ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa__async_cb_344", "__ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa__async_cb", "__ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa__async_cb_345", "__ZN12LoRaWANStack26rx_error_interrupt_handlerEv__async_cb_319", "__ZN12LoRaWANStack26rx_error_interrupt_handlerEv__async_cb", "__ZN12LoRaWANStack26rx_error_interrupt_handlerEv__async_cb_320", "__ZN12LoRaWANStack28process_transmission_timeoutEv", "__ZN12LoRaWANStack28tx_timeout_interrupt_handlerEv__async_cb", "__ZN12LoRaWANStack28tx_timeout_interrupt_handlerEv__async_cb_329", "__ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv__async_cb_171", "__ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv__async_cb", "__ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv__async_cb_172", "__ZN12LoRaWANStack25process_reception_timeoutEb__async_cb", "__ZN12LoRaWANStack25process_reception_timeoutEb__async_cb_192", "__ZN12LoRaWANStack25process_reception_timeoutEb__async_cb_191", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_138", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_143", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_139", "__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv", "__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_142", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_140", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_141", "__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv__async_cb", "__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv__async_cb_216", "__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv__async_cb", "__ZN4mbed8CallbackIFvbEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPKvb__async_cb", "__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_94", "__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_93", "__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb", "__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_95", "__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_92", "__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_96", "__ZN12LoRaWANStack26process_status_check_stateEv__async_cb_7", "__ZN12LoRaWANStack26process_status_check_stateEv__async_cb_6", "__ZN12LoRaWANStack26process_status_check_stateEv__async_cb", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_53", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_46", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_56", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_47", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_52", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_48", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_55", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_49", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_51", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_50", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_54", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_23", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_16", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_26", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_17", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_22", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_18", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_25", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_19", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_21", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_20", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_24", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_115", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_120", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_116", "__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv", "__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_119", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_117", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_118", "__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb", "__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb_114", "__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb", "__ZN12LoRaWANStack28process_transmission_timeoutEv__async_cb", "__ZN12LoRaWANStack28process_transmission_timeoutEv__async_cb_368", "__ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb_359", "__ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb", "__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv", "__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv", "__ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb_358", "__ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb_357", "__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv__async_cb", "__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb_348", "__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb", "__ZN4mbed8CallbackIFvPKhtsaEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPKvS2_tsa__async_cb", "__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb", "__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_296", "__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_300", "__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_299", "__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_298", "__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_297", "__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_295", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_302", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_307", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_303", "__ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv", "__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_306", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_304", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_305", "__ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv__async_cb", "__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv__async_cb_340", "__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv__async_cb", "__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb", "__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_334", "__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_330", "__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_338", "__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_333", "__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_331", "__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_335", "__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_332", "__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_337", "__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_336", "__ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb", "__ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb_322", "__ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb_321", "__ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb_323", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_313", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_318", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_314", "__ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv", "__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_317", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_315", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_316", "__ZN12LoRaWANStack23process_connected_stateEv__async_cb", "__ZN12LoRaWANStack23process_connected_stateEv__async_cb_199", "__ZN12LoRaWANStack23process_connected_stateEv__async_cb_198", "__ZN12LoRaWANStack23process_connected_stateEv__async_cb_200", "__ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb", "__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb_158", "__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPKv__async_cb", "__ZN12LoRaWANStack20process_transmissionEv__async_cb", "__ZN12LoRaWANStack20process_transmissionEv__async_cb_214", "__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb", "__ZN12LoRaWANStack24process_connecting_stateER14lorawan_status__async_cb_91", "__ZN12LoRaWANStack24process_connecting_stateER14lorawan_status__async_cb", "__ZN12LoRaWANStack24process_connecting_stateER14lorawan_status__async_cb_90", "__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_62", "__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_61", "__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb", "__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_63", "__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_60", "__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_64", "__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb", "__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_27", "__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_28", "__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_29", "__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_30", "__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_31", "__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_32", "__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_34", "__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_33", "__ZN12LoRaWANStack7connectEv__async_cb", "__ZN12LoRaWANStack7connectERK15lorawan_connect__async_cb", "__ZN12LoRaWANStack12add_channelsERK16lora_channelplan__async_cb", "__ZN12LoRaWANStack16remove_a_channelEh__async_cb", "__ZN12LoRaWANStack17drop_channel_listEv__async_cb", "__ZN12LoRaWANStack12stop_sendingEv__async_cb", "__ZN12LoRaWANStack9handle_txEhPKhthbb__async_cb_351", "__ZN12LoRaWANStack9handle_txEhPKhthbb__async_cb", "__ZN12LoRaWANStack9handle_rxEPhtRhRib__async_cb", "__ZN12LoRaWANStack8shutdownEv__async_cb", "__ZN12LoRaWANStack29handle_ack_expiry_for_class_cEv", "__ZN12LoRaWANStack16set_device_classERK14device_class_t__async_cb_327", "__ZN12LoRaWANStack16set_device_classERK14device_class_t__async_cb", "__ZN12LoRaWANStack29handle_ack_expiry_for_class_cEv__async_cb", "__ZN7LoRaMacD2Ev__async_cb", "__ZN7LoRaMacD2Ev__async_cb_284", "__ZN7LoRaMacD2Ev__async_cb_285", "__ZN7LoRaMacD2Ev__async_cb_286", "__ZN7LoRaMacD2Ev__async_cb_287", "__ZN7LoRaMacD2Ev__async_cb_288", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_196", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_195", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_194", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_193", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb", "__ZN7LoRaMac15open_rx2_windowEv__async_cb_102", "__ZN7LoRaMac15open_rx2_windowEv__async_cb_101", "__ZN7LoRaMac15open_rx2_windowEv__async_cb", "__ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb", "__ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb_107", "__ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb_109", "__ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb_106", "__ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb_108", "__ZN7LoRaMac23message_integrity_checkEPKhtPhjPjS1___async_cb", "__ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa__async_cb_133", "__ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa__async_cb_135", "__ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa__async_cb_134", "__ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa__async_cb", "__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_2", "__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_5", "__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb", "__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_3", "__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_4", "__ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb", "__ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb_43", "__ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb_42", "__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_69", "__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_68", "__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_66", "__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_67", "__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_65", "__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb", "__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_402", "__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_401", "__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_400", "__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb", "__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_399", "__ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb_376", "__ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb_377", "__ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb", "__ZN7LoRaMac24continue_joining_processEv__async_cb", "__ZN7LoRaMac21handle_retransmissionEv__async_cb", "__ZN7LoRaMac21handle_retransmissionEv__async_cb_429", "__ZN7LoRaMac21handle_retransmissionEv__async_cb_428", "__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_426", "__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_424", "__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_425", "__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb", "__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_423", "__ZN7LoRaMac11schedule_txEv__async_cb", "__ZN7LoRaMac11schedule_txEv__async_cb_353", "__ZN7LoRaMac11schedule_txEv__async_cb_352", "__ZN7LoRaMac23on_backoff_timer_expiryEv__async_cb", "__ZN7LoRaMac23on_backoff_timer_expiryEv__async_cb_369", "__ZN7LoRaMac15open_rx1_windowEv__async_cb_362", "__ZN7LoRaMac15open_rx1_windowEv__async_cb_360", "__ZN7LoRaMac15open_rx1_windowEv__async_cb_361", "__ZN7LoRaMac15open_rx1_windowEv__async_cb", "__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_312", "__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb", "__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_310", "__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_309", "__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_308", "__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_311", "__ZN7LoRaMac13clear_tx_pipeEv__async_cb_328", "__ZN7LoRaMac13clear_tx_pipeEv__async_cb", "__ZN7LoRaMac18prepare_ongoing_txEhPKhthh__async_cb", "__ZN7LoRaMac24get_max_possible_tx_sizeEh__async_cb", "__ZN7LoRaMac15send_ongoing_txEv__async_cb", "__ZN7LoRaMac15send_ongoing_txEv__async_cb_221", "__ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE__async_cb", "__ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE__async_cb_217", "__ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE__async_cb_220", "__ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE__async_cb_219", "__ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE__async_cb_218", "__ZN7LoRaMac4joinEb__async_cb", "__ZN7LoRaMac4joinEb__async_cb_202", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_187", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_189", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_190", "__ZN7LoRaMac23on_backoff_timer_expiryEv", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_186", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb", "__ZN7LoRaMac15open_rx1_windowEv", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_185", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_180", "__ZN7LoRaMac15open_rx2_windowEv", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_184", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_181", "__ZN7LoRaMac26on_ack_timeout_timer_eventEv", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_183", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_182", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_188", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv__async_cb", "__ZN7LoRaMac10disconnectEv__async_cb_129", "__ZN7LoRaMac10disconnectEv__async_cb_128", "__ZN7LoRaMac10disconnectEv__async_cb_127", "__ZN7LoRaMac10disconnectEv__async_cb_126", "__ZN7LoRaMac10disconnectEv__async_cb", "__ZN7LoRaMac16add_channel_planERK16lora_channelplan__async_cb", "__ZN7LoRaMac19remove_channel_planEv__async_cb", "__ZN7LoRaMac21remove_single_channelEh__async_cb", "__ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan__async_cb", "__ZN18LoRaMacChannelPlan11remove_planEv__async_cb", "__ZN18LoRaMacChannelPlan11remove_planEv__async_cb_346", "__ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb", "__ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb_350", "__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb", "__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_208", "__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_209", "__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_210", "__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_211", "__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_212", "__ZN14LoRaMacCommand25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb", "__ZN14LoRaMacCommand25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb_175", "__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_155", "__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb", "__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_154", "__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_153", "__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_152", "__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_156", "__ZN13LoRaMacCrypto15encrypt_payloadEPKhtS1_jjhjPh__async_cb", "__ZN13LoRaMacCrypto15decrypt_payloadEPKhtS1_jjhjPh__async_cb", "__ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_99", "__ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb", "__ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_98", "__ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_97", "__ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_100", "__ZN13LoRaMacCrypto18decrypt_join_frameEPKhtS1_jPh__async_cb", "__ZN13LoRaMacCrypto28compute_skeys_for_join_frameEPKhjS1_tPhS2___async_cb", "__ZN7LoRaPHY19request_new_channelEaP16channel_params_t__async_cb", "__ZN7LoRaPHY19request_new_channelEaP16channel_params_t__async_cb_44", "__ZN7LoRaPHY19request_new_channelEaP16channel_params_t__async_cb_45", "__ZN7LoRaPHY13apply_cf_listEPKhh__async_cb", "__ZN7LoRaPHY13apply_cf_listEPKhh__async_cb_403", "__ZN7LoRaPHY13apply_cf_listEPKhh__async_cb_404", "__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb", "__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_406", "__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_407", "__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_408", "__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_409", "__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_410", "__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_411", "__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_412", "__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_413", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_370", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_371", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_372", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_373", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_374", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_375", "__ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s__async_cb", "__ZN7LoRaPHY18dl_channel_requestEhj__async_cb", "__ZN7LoRaPHY18dl_channel_requestEhj__async_cb_342", "__ZN7LoRaPHY11add_channelEPK16channel_params_th__async_cb", "__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb", "__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_256", "__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_257", "__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb", "__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_173", "__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_174", "__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb", "__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_150", "__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_151", "__ZN7LoRaPHY25setup_public_network_modeEb__async_cb", "__ZN7LoRaPHY25setup_public_network_modeEb__async_cb_136", "__ZN7LoRaPHY25setup_public_network_modeEb__async_cb_137", "__ZN7LoRaPHY15setup_rx_windowEbj__async_cb", "__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_130", "__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_131", "__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_132", "__ZN7LoRaPHY13get_radio_rngEv__async_cb", "__ZN7LoRaPHY13get_radio_rngEv__async_cb_123", "__ZN7LoRaPHY13get_radio_rngEv__async_cb_124", "__ZN7LoRaPHY11handle_sendEPhh__async_cb", "__ZN7LoRaPHY11handle_sendEPhh__async_cb_104", "__ZN7LoRaPHY11handle_sendEPhh__async_cb_105", "__ZN7LoRaPHY12get_next_ADREbRaS0_Rj__async_cb", "__ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb", "__ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb_231", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_235", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_232", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_234", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_233", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_236", "__ZN18LoRaWANTimeHandler4stopER13timer_event_t__async_cb", "_mbedtls_aes_free__async_cb", "_mbedtls_aes_setkey_dec__async_cb", "_mbedtls_ccm_setkey__async_cb_392", "_mbedtls_ccm_setkey__async_cb_391", "_mbedtls_ccm_setkey__async_cb", "_mbedtls_ccm_free__async_cb_422", "_mbedtls_ccm_free__async_cb", "_mbedtls_cipher_free__async_cb_41", "_mbedtls_cipher_free__async_cb", "_mbedtls_cipher_free__async_cb_40", "_mbedtls_cipher_setup__async_cb", "_mbedtls_cipher_setkey__async_cb", "_mbedtls_cipher_setkey__async_cb_103", "_mbedtls_cipher_update__async_cb", "_mbedtls_cipher_update__async_cb_113", "_mbedtls_cipher_update__async_cb_110", "_mbedtls_cipher_update__async_cb_111", "_mbedtls_cipher_update__async_cb_112", "_ccm_aes_setkey_wrap__async_cb", "_ccm_ctx_free__async_cb", "_gcm_aes_setkey_wrap__async_cb", "_gcm_ctx_free__async_cb", "_aes_setkey_dec_wrap__async_cb", "_aes_ctx_free__async_cb", "_mbedtls_cipher_cmac_starts__async_cb_237", "_mbedtls_cipher_cmac_starts__async_cb", "_mbedtls_cipher_cmac_update__async_cb_229", "_mbedtls_cipher_cmac_update__async_cb_228", "_mbedtls_cipher_cmac_update__async_cb", "_mbedtls_cipher_cmac_finish__async_cb_281", "_mbedtls_cipher_cmac_finish__async_cb_280", "_mbedtls_cipher_cmac_finish__async_cb_279", "_mbedtls_cipher_cmac_finish__async_cb_283", "_mbedtls_cipher_cmac_finish__async_cb_278", "_mbedtls_cipher_cmac_finish__async_cb_282", "_mbedtls_cipher_cmac_finish__async_cb_277", "_mbedtls_cipher_cmac_finish__async_cb_276", "_mbedtls_cipher_cmac_finish__async_cb_275", "_mbedtls_cipher_cmac_finish__async_cb", "_mbedtls_gcm_setkey__async_cb_326", "_mbedtls_gcm_setkey__async_cb_325", "_mbedtls_gcm_setkey__async_cb_324", "_mbedtls_gcm_setkey__async_cb", "_mbedtls_gcm_update__async_cb", "_mbedtls_gcm_free__async_cb_343", "_mbedtls_gcm_free__async_cb", "_mbedtls_platform_zeroize__async_cb", "_ticker_set_handler__async_cb", "_initialize__async_cb", "_initialize__async_cb_414", "_initialize__async_cb_419", "_initialize__async_cb_418", "_initialize__async_cb_415", "_initialize__async_cb_416", "_initialize__async_cb_417", "_schedule_interrupt__async_cb", "_schedule_interrupt__async_cb_393", "_schedule_interrupt__async_cb_394", "_schedule_interrupt__async_cb_395", "_schedule_interrupt__async_cb_396", "_schedule_interrupt__async_cb_397", "_schedule_interrupt__async_cb_398", "_ticker_remove_event__async_cb", "_ticker_read_us__async_cb_427", "_ticker_read_us__async_cb", "_mbed_assert_internal__async_cb", "_mbed_die__async_cb_89", "_mbed_die__async_cb_88", "_mbed_die__async_cb_87", "_mbed_die__async_cb_86", "_mbed_die__async_cb_85", "_mbed_die__async_cb_84", "_mbed_die__async_cb_83", "_mbed_die__async_cb_82", "_mbed_die__async_cb_81", "_mbed_die__async_cb_80", "_mbed_die__async_cb_79", "_mbed_die__async_cb_78", "_mbed_die__async_cb_77", "_mbed_die__async_cb_76", "_mbed_die__async_cb_75", "_mbed_die__async_cb", "_mbed_error_printf__async_cb", "_mbed_error_vfprintf__async_cb", "_mbed_error_vfprintf__async_cb_9", "_mbed_error_vfprintf__async_cb_8", "_handle_interrupt_in__async_cb", "_serial_putc__async_cb_157", "_serial_putc__async_cb", "__ZN4mbed6TickerD2Ev__async_cb", "__ZN4mbed6TickerD2Ev__async_cb_301", "__ZN4mbed6TickerD0Ev__async_cb", "__ZN4mbed6TickerD0Ev__async_cb_230", "__ZN4mbed6Ticker7handlerEv__async_cb", "_invoke_ticker__async_cb_238", "_invoke_ticker__async_cb", "_wait_ms__async_cb", "__GLOBAL__sub_I_main_cpp__async_cb", "_main__async_cb_386", "_main__async_cb_385", "_main__async_cb_384", "_main__async_cb_390", "__ZN6events5EventIFvvEE10event_dtorIPS1_EEvPNS2_5eventE", "_main__async_cb_389", "_main__async_cb", "_main__async_cb_378", "_main__async_cb_388", "__ZL18lora_event_handler11lora_events", "_main__async_cb_379", "_main__async_cb_380", "_main__async_cb_381", "_main__async_cb_383", "_main__async_cb_382", "_main__async_cb_387", "__ZL12send_messagev__async_cb", "__ZN6events5EventIFvvEE10event_postIPS1_EEiPNS2_5eventE__async_cb_405", "__ZN6events10EventQueue13function_dtorINS0_9context00IPFvvEEEEEvPv", "__ZN6events10EventQueue13function_callINS0_9context00IPFvvEEEEEvPv", "__ZN6events5EventIFvvEE10event_postIPS1_EEiPNS2_5eventE__async_cb", "__ZL18lora_event_handler11lora_events__async_cb_74", "__ZL18lora_event_handler11lora_events__async_cb_73", "__ZL18lora_event_handler11lora_events__async_cb_72", "__ZL18lora_event_handler11lora_events__async_cb_71", "__ZL18lora_event_handler11lora_events__async_cb", "__ZL18lora_event_handler11lora_events__async_cb_70", "__ZN4mbed8CallbackIFv11lora_eventsEE13function_callIPS2_EEvPKvS1___async_cb", "__ZN4mbed8CallbackIFvvEE13function_callIN6events5EventIS1_EEEEvPKv__async_cb", "__ZN4mbed8CallbackIFvvEE13function_callIN6events5EventIS1_EEEEvPKv__async_cb_125", "__ZN4mbed8CallbackIFvvEE13function_dtorIN6events5EventIS1_EEEEvPv__async_cb", "__ZN4mbed8CallbackIFvvEE13function_dtorIN6events5EventIS1_EEEEvPv__async_cb_197", "__ZN6events10EventQueue13function_callINS0_9context00IPFvvEEEEEvPv__async_cb", "_putc__async_cb_421", "_putc__async_cb", "___overflow__async_cb", "_fflush__async_cb_223", "_fflush__async_cb_222", "_fflush__async_cb_224", "_fflush__async_cb", "___fflush_unlocked__async_cb", "___fflush_unlocked__async_cb_226", "_vfprintf__async_cb", "_snprintf__async_cb", "_vsnprintf__async_cb", "_sprintf__async_cb", "_vsprintf__async_cb", "_printf__async_cb", "_putchar__async_cb", "_fputc__async_cb_225", "_fputc__async_cb", "_puts__async_cb", "__ZL25default_terminate_handlerv__async_cb", "__ZL25default_terminate_handlerv__async_cb_159", "_abort_message__async_cb", "_abort_message__async_cb_203", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_341", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb", "___dynamic_cast__async_cb", "___dynamic_cast__async_cb_420", "__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_363", "__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv", "__ZSt11__terminatePFvvE__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_215", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_179", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_178", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_177", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_176", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_201", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "___cxa_can_catch__async_cb", "___cxa_is_pointer_type__async_cb
var debug_table_vii = ["0", "__ZN16SX1276_LoRaRadio10init_radioEP12radio_events", "__ZN16SX1276_LoRaRadio7receiveEj", "__ZN16SX1276_LoRaRadio11set_channelEj", "__ZN16SX1276_LoRaRadio18set_public_networkEb", "__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPvPKv", "__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPvPKv", "__ZN4mbed8CallbackIFvPKhtsaEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPvPKv", "__ZN4mbed8CallbackIFvbEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPKvb", "__ZN4mbed8CallbackIFvbEE13function_moveINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPvPKv", "__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPvPKv", "__ZN4mbed8CallbackIFvvEE13function_moveIN6events5EventIS1_EEEEvPvPKv", "__ZN4mbed8CallbackIFv11lora_eventsEE13function_callIPS2_EEvPKvS1_", "__ZN4mbed8CallbackIFv11lora_eventsEE13function_moveIPS2_EEvPvPKv", "__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event", "__ZN12LoRaWANStack25process_reception_timeoutEb"];
var debug_table_viii = ["0", "__ZN16SX1276_LoRaRadio4sendEPhh", "__ZN16SX1276_LoRaRadio22set_max_payload_lengthE10modem_typeh", "__ZN7LoRaPHY13apply_cf_listEPKhh", "__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj", "_add_pkcs_padding", "0", "0"];
var debug_table_viiii = ["0", "__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat", "__ZN7LoRaPHY16set_last_tx_doneEhbj", "__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "0", "0"];
var debug_table_viiiii = ["0", "__ZN4mbed8CallbackIFvPKhtsaEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPKvS2_tsa", "__ZN7LoRaPHY21compute_rx_win_paramsEahjP18rx_config_params_t", "__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "__ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa", "__ZN12LoRaWANStack17process_receptionEPKhtsa"];
var debug_table_viiiiii = ["0", "__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib", "__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"];
var debug_table_viiiiiiiiiiiiii = ["0", "__ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj"];
var debug_table_viiiiiiiiiiiiiii = ["0", "__ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb"];
function nullFunc_i(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: i: " + debug_table_i[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viii: " + debug_table_viii[x] + "  v: " + debug_table_v[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: ii: " + debug_table_ii[x] + "  iiii: " + debug_table_iiii[x] + "  i: " + debug_table_i[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  viii: " + debug_table_viii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  v: " + debug_table_v[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiii: " + debug_table_iiiii[x] + "  i: " + debug_table_i[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iii: " + debug_table_iii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  ii: " + debug_table_ii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vi: " + debug_table_vi[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  i: " + debug_table_i[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  "); abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: v: " + debug_table_v[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  i: " + debug_table_i[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  "); abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vi: " + debug_table_vi[x] + "  viii: " + debug_table_viii[x] + "  v: " + debug_table_v[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  i: " + debug_table_i[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  "); abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiii: " + debug_table_viiii[x] + "  v: " + debug_table_v[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  i: " + debug_table_i[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  "); abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  i: " + debug_table_i[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  "); abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  "); abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function nullFunc_viiiiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  v: " + debug_table_v[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iii: " + debug_table_iii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  ii: " + debug_table_ii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function nullFunc_viiiiiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiiiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  v: " + debug_table_v[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iii: " + debug_table_iii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  ii: " + debug_table_ii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14) {
  try {
    Module["dynCall_viiiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
  try {
    Module["dynCall_viiiiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_i": nullFunc_i, "nullFunc_ii": nullFunc_ii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_iiiiiiii": nullFunc_iiiiiiii, "nullFunc_v": nullFunc_v, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_viii": nullFunc_viii, "nullFunc_viiii": nullFunc_viiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_viiiiiiiiiiiiii": nullFunc_viiiiiiiiiiiiii, "nullFunc_viiiiiiiiiiiiiii": nullFunc_viiiiiiiiiiiiiii, "invoke_i": invoke_i, "invoke_ii": invoke_ii, "invoke_iii": invoke_iii, "invoke_iiii": invoke_iiii, "invoke_iiiii": invoke_iiiii, "invoke_iiiiii": invoke_iiiiii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_iiiiiiii": invoke_iiiiiiii, "invoke_v": invoke_v, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_viii": invoke_viii, "invoke_viiii": invoke_viiii, "invoke_viiiii": invoke_viiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_viiiiiiiiiiiiii": invoke_viiiiiiiiiiiiii, "invoke_viiiiiiiiiiiiiii": invoke_viiiiiiiiiiiiiii, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "___cxa_begin_catch": ___cxa_begin_catch, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___cxa_pure_virtual": ___cxa_pure_virtual, "___gxx_personality_v0": ___gxx_personality_v0, "___lock": ___lock, "___resumeException": ___resumeException, "___setErrNo": ___setErrNo, "___syscall140": ___syscall140, "___syscall146": ___syscall146, "___syscall54": ___syscall54, "___syscall6": ___syscall6, "___unlock": ___unlock, "_abort": _abort, "_emscripten_asm_const_i": _emscripten_asm_const_i, "_emscripten_asm_const_ii": _emscripten_asm_const_ii, "_emscripten_asm_const_iii": _emscripten_asm_const_iii, "_emscripten_asm_const_iiii": _emscripten_asm_const_iiii, "_emscripten_asm_const_iiiiii": _emscripten_asm_const_iiiiii, "_emscripten_asm_const_iiiiiii": _emscripten_asm_const_iiiiiii, "_emscripten_get_now": _emscripten_get_now, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_emscripten_sleep": _emscripten_sleep, "_gettimeofday": _gettimeofday, "_llvm_ceil_f64": _llvm_ceil_f64, "_llvm_floor_f64": _llvm_floor_f64, "_llvm_trap": _llvm_trap, "_pthread_cond_init": _pthread_cond_init, "_pthread_cond_signal": _pthread_cond_signal, "_pthread_cond_timedwait": _pthread_cond_timedwait, "_pthread_cond_wait": _pthread_cond_wait, "_pthread_getspecific": _pthread_getspecific, "_pthread_key_create": _pthread_key_create, "_pthread_mutex_init": _pthread_mutex_init, "_pthread_once": _pthread_once, "_pthread_setspecific": _pthread_setspecific, "_sleep_manager_lock_deep_sleep_internal": _sleep_manager_lock_deep_sleep_internal, "_sleep_manager_unlock_deep_sleep_internal": _sleep_manager_unlock_deep_sleep_internal, "flush_NO_FILESYSTEM": flush_NO_FILESYSTEM, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8, "___async": ___async, "___async_unwind": ___async_unwind, "___async_retval": ___async_retval, "___async_cur_frame": ___async_cur_frame };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'use asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;
  var ___async=env.___async|0;
  var ___async_unwind=env.___async_unwind|0;
  var ___async_retval=env.___async_retval|0;
  var ___async_cur_frame=env.___async_cur_frame|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_iiiiiii=env.nullFunc_iiiiiii;
  var nullFunc_iiiiiiii=env.nullFunc_iiiiiiii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_viiiiiiiiiiiiii=env.nullFunc_viiiiiiiiiiiiii;
  var nullFunc_viiiiiiiiiiiiiii=env.nullFunc_viiiiiiiiiiiiiii;
  var invoke_i=env.invoke_i;
  var invoke_ii=env.invoke_ii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_iiiiiiii=env.invoke_iiiiiiii;
  var invoke_v=env.invoke_v;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_viii=env.invoke_viii;
  var invoke_viiii=env.invoke_viiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_viiiiiiiiiiiiii=env.invoke_viiiiiiiiiiiiii;
  var invoke_viiiiiiiiiiiiiii=env.invoke_viiiiiiiiiiiiiii;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var ___lock=env.___lock;
  var ___resumeException=env.___resumeException;
  var ___setErrNo=env.___setErrNo;
  var ___syscall140=env.___syscall140;
  var ___syscall146=env.___syscall146;
  var ___syscall54=env.___syscall54;
  var ___syscall6=env.___syscall6;
  var ___unlock=env.___unlock;
  var _abort=env._abort;
  var _emscripten_asm_const_i=env._emscripten_asm_const_i;
  var _emscripten_asm_const_ii=env._emscripten_asm_const_ii;
  var _emscripten_asm_const_iii=env._emscripten_asm_const_iii;
  var _emscripten_asm_const_iiii=env._emscripten_asm_const_iiii;
  var _emscripten_asm_const_iiiiii=env._emscripten_asm_const_iiiiii;
  var _emscripten_asm_const_iiiiiii=env._emscripten_asm_const_iiiiiii;
  var _emscripten_get_now=env._emscripten_get_now;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _emscripten_sleep=env._emscripten_sleep;
  var _gettimeofday=env._gettimeofday;
  var _llvm_ceil_f64=env._llvm_ceil_f64;
  var _llvm_floor_f64=env._llvm_floor_f64;
  var _llvm_trap=env._llvm_trap;
  var _pthread_cond_init=env._pthread_cond_init;
  var _pthread_cond_signal=env._pthread_cond_signal;
  var _pthread_cond_timedwait=env._pthread_cond_timedwait;
  var _pthread_cond_wait=env._pthread_cond_wait;
  var _pthread_getspecific=env._pthread_getspecific;
  var _pthread_key_create=env._pthread_key_create;
  var _pthread_mutex_init=env._pthread_mutex_init;
  var _pthread_once=env._pthread_once;
  var _pthread_setspecific=env._pthread_setspecific;
  var _sleep_manager_lock_deep_sleep_internal=env._sleep_manager_lock_deep_sleep_internal;
  var _sleep_manager_unlock_deep_sleep_internal=env._sleep_manager_unlock_deep_sleep_internal;
  var flush_NO_FILESYSTEM=env.flush_NO_FILESYSTEM;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_212($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0107$be = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $119 = 0, $12 = 0, $130 = 0, $131 = 0, $14 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $204 = 0, $207 = 0, $214 = 0, $215 = 0, $22 = 0, $221 = 0, $24 = 0, $240 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $311 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $377 = 0, $378 = 0, $38 = 0, $392 = 0, $4 = 0, $40 = 0, $413 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $48 = 0, $481 = 0, $485 = 0, $489 = 0, $494 = 0, $495 = 0, $499 = 0, $50 = 0, $503 = 0, $505 = 0, $507 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $578 = 0, $58 = 0, $591 = 0, $598 = 0, $6 = 0, $60 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $665 = 0, $666 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10136
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10138
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10140
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10142
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10144
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 10146
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 10148
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 10150
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 10152
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 10154
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 10156
 $22 = HEAP8[$0 + 44 >> 0] | 0; //@line 10158
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 10160
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 10162
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 10164
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 10166
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 10168
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 10170
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 10172
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 10174
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 10176
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 10178
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 10180
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 10182
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 10184
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 10186
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 10188
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 10190
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 10192
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 10194
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 10196
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 10198
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 10200
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 10202
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 10204
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 10206
 $72 = HEAP8[$0 + 144 >> 0] | 0; //@line 10208
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 10210
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 10212
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 10214
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 10216
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 10218
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 10220
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 10222
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 10224
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 10226
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 10228
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 10230
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 10232
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 10234
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 10236
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 10238
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 10240
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 10242
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 10244
 $110 = HEAP8[$0 + 220 >> 0] | 0; //@line 10246
 $112 = HEAP8[$0 + 221 >> 0] | 0; //@line 10248
 $114 = HEAP32[$0 + 224 >> 2] | 0; //@line 10250
 $116 = HEAP32[$0 + 228 >> 2] | 0; //@line 10252
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 10254
 $665 = HEAP8[$78 >> 0] | 0; //@line 10258
 $666 = $665 & 255; //@line 10259
 if ((128 - (HEAPU8[$66 >> 0] | 0) | 0) > ($666 | 0)) {
  HEAP8[$102 + 4 + $666 >> 0] = 10; //@line 10264
  HEAP8[$78 >> 0] = $665 + 2 << 24 >> 24; //@line 10266
  HEAP8[($665 + 1 & 255) + ($102 + 4) >> 0] = $AsyncRetVal; //@line 10269
  HEAP8[$50 >> 0] = 1; //@line 10270
  HEAP8[$104 >> 0] = 1; //@line 10271
  $$0$be = $22; //@line 10272
  $$0107$be = 0; //@line 10272
 } else {
  $$0$be = $22; //@line 10274
  $$0107$be = -1010; //@line 10274
 }
 L4 : while (1) {
  if (($$0$be & 255) >= ($110 & 255)) {
   label = 32; //@line 10279
   break;
  }
  $119 = $$0$be + 1 << 24 >> 24; //@line 10283
  switch (HEAP8[$16 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 10288
    break L4;
    break;
   }
  case 5:
   {
    label = 9; //@line 10293
    break L4;
    break;
   }
  case 7:
   {
    label = 18; //@line 10298
    break L4;
    break;
   }
  case 9:
   {
    label = 24; //@line 10303
    break L4;
    break;
   }
  case 10:
   {
    label = 27; //@line 10308
    break L4;
    break;
   }
  case 2:
   {
    HEAP32[$68 >> 2] = 0; //@line 10313
    HEAP8[$70 >> 0] = HEAP8[$16 + ($119 & 255) >> 0] | 0; //@line 10318
    HEAP8[$84 >> 0] = HEAP8[$16 + ($$0$be + 2 & 255) >> 0] | 0; //@line 10323
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 10324
    continue L4;
    break;
   }
  case 4:
   {
    $204 = $$0$be + 2 << 24 >> 24; //@line 10329
    $207 = HEAP8[$16 + ($119 & 255) >> 0] | 0; //@line 10332
    HEAP8[$14 >> 0] = $207; //@line 10333
    HEAP16[$92 >> 1] = 1 << ($207 & 255); //@line 10337
    $214 = HEAP8[$78 >> 0] | 0; //@line 10341
    $215 = $214 & 255; //@line 10342
    if ((128 - (HEAPU8[$66 >> 0] | 0) | 0) <= ($215 | 0)) {
     $$0$be = $204; //@line 10345
     $$0107$be = -1010; //@line 10345
     continue L4;
    }
    HEAP8[$78 >> 0] = $214 + 1 << 24 >> 24; //@line 10350
    HEAP8[$102 + 4 + $215 >> 0] = 4; //@line 10351
    HEAP8[$104 >> 0] = 1; //@line 10352
    $$0$be = $204; //@line 10353
    $$0107$be = 0; //@line 10353
    continue L4;
    break;
   }
  case 6:
   {
    $311 = HEAP32[$86 >> 2] | 0; //@line 10358
    if ($311 | 0) {
     label = 13; //@line 10361
     break L4;
    }
    $377 = HEAP8[$78 >> 0] | 0; //@line 10367
    $378 = $377 & 255; //@line 10368
    if ((128 - (HEAPU8[$66 >> 0] | 0) - $378 | 0) <= 2) {
     $$0$be = $119; //@line 10372
     $$0107$be = -1010; //@line 10372
     continue L4;
    }
    HEAP8[$102 + 4 + $378 >> 0] = 6; //@line 10377
    HEAP8[($377 + 1 & 255) + ($102 + 4) >> 0] = -1; //@line 10381
    HEAP8[$78 >> 0] = $377 + 3 << 24 >> 24; //@line 10383
    HEAP8[($377 + 2 & 255) + ($102 + 4) >> 0] = $72; //@line 10386
    HEAP8[$104 >> 0] = 1; //@line 10387
    $$0$be = $119; //@line 10388
    $$0107$be = 0; //@line 10388
    continue L4;
    break;
   }
  case 8:
   {
    $481 = $$0$be + 2 << 24 >> 24; //@line 10393
    $485 = HEAP8[$16 + ($119 & 255) >> 0] & 15; //@line 10397
    $489 = ($485 + ($485 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 10402
    HEAP32[$34 >> 2] = $489; //@line 10403
    HEAP32[$2 >> 2] = $489 + 1e3; //@line 10405
    $494 = HEAP8[$78 >> 0] | 0; //@line 10409
    $495 = $494 & 255; //@line 10410
    if ((128 - (HEAPU8[$66 >> 0] | 0) | 0) <= ($495 | 0)) {
     $$0$be = $481; //@line 10413
     $$0107$be = -1010; //@line 10413
     continue L4;
    }
    HEAP8[$78 >> 0] = $494 + 1 << 24 >> 24; //@line 10418
    HEAP8[$102 + 4 + $495 >> 0] = 8; //@line 10419
    HEAP8[$50 >> 0] = 1; //@line 10420
    HEAP8[$104 >> 0] = 1; //@line 10421
    $$0$be = $481; //@line 10422
    $$0107$be = 0; //@line 10422
    continue L4;
    break;
   }
  default:
   {
    $$0$be = $119; //@line 10427
    $$0107$be = -1013; //@line 10427
    continue L4;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$44 >> 0] = 0; //@line 10433
  HEAP8[$46 >> 0] = 0; //@line 10434
  HEAP8[$4 >> 0] = 0; //@line 10435
  HEAP8[$42 >> 0] = 0; //@line 10436
  $130 = $119 & 255; //@line 10437
  $131 = $130 + -1 | 0; //@line 10438
  HEAP32[$98 >> 2] = $16 + $131; //@line 10440
  HEAP8[$94 >> 0] = $26 - $131; //@line 10443
  HEAP8[$106 >> 0] = HEAP8[$12 >> 0] | 0; //@line 10445
  HEAP8[$8 >> 0] = HEAP8[$18 >> 0] | 0; //@line 10447
  HEAP8[$24 >> 0] = HEAP8[$32 >> 0] | 0; //@line 10449
  HEAP8[$64 >> 0] = HEAP8[$52 >> 0] | 0; //@line 10451
  HEAP8[$80 >> 0] = HEAP8[$58 >> 0] | 0; //@line 10453
  $142 = HEAP32[(HEAP32[$82 >> 2] | 0) + 36 >> 2] | 0; //@line 10456
  $ReallocAsyncCtx = _emscripten_realloc_async_context(240) | 0; //@line 10457
  $143 = FUNCTION_TABLE_iiiiiii[$142 & 3]($88, $36, $44, $46, $4, $42) | 0; //@line 10458
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 489; //@line 10461
   $144 = $ReallocAsyncCtx + 4 | 0; //@line 10462
   HEAP8[$144 >> 0] = $112; //@line 10463
   $145 = $ReallocAsyncCtx + 8 | 0; //@line 10464
   HEAP32[$145 >> 2] = $4; //@line 10465
   $146 = $ReallocAsyncCtx + 12 | 0; //@line 10466
   HEAP32[$146 >> 2] = $6; //@line 10467
   $147 = $ReallocAsyncCtx + 16 | 0; //@line 10468
   HEAP32[$147 >> 2] = $8; //@line 10469
   $148 = $ReallocAsyncCtx + 20 | 0; //@line 10470
   HEAP32[$148 >> 2] = $10; //@line 10471
   $149 = $ReallocAsyncCtx + 24 | 0; //@line 10472
   HEAP32[$149 >> 2] = $116; //@line 10473
   $150 = $ReallocAsyncCtx + 28 | 0; //@line 10474
   HEAP32[$150 >> 2] = $2; //@line 10475
   $151 = $ReallocAsyncCtx + 32 | 0; //@line 10476
   HEAP32[$151 >> 2] = $114; //@line 10477
   $152 = $ReallocAsyncCtx + 36 | 0; //@line 10478
   HEAP32[$152 >> 2] = $18; //@line 10479
   $153 = $ReallocAsyncCtx + 40 | 0; //@line 10480
   HEAP32[$153 >> 2] = $20; //@line 10481
   $154 = $ReallocAsyncCtx + 44 | 0; //@line 10482
   HEAP32[$154 >> 2] = $24; //@line 10483
   $155 = $ReallocAsyncCtx + 48 | 0; //@line 10484
   HEAP32[$155 >> 2] = $26; //@line 10485
   $156 = $ReallocAsyncCtx + 52 | 0; //@line 10486
   HEAP32[$156 >> 2] = $28; //@line 10487
   $157 = $ReallocAsyncCtx + 56 | 0; //@line 10488
   HEAP32[$157 >> 2] = $30; //@line 10489
   $158 = $ReallocAsyncCtx + 60 | 0; //@line 10490
   HEAP32[$158 >> 2] = $32; //@line 10491
   $159 = $ReallocAsyncCtx + 64 | 0; //@line 10492
   HEAP32[$159 >> 2] = $34; //@line 10493
   $160 = $ReallocAsyncCtx + 68 | 0; //@line 10494
   HEAP32[$160 >> 2] = $36; //@line 10495
   $161 = $ReallocAsyncCtx + 72 | 0; //@line 10496
   HEAP32[$161 >> 2] = $38; //@line 10497
   $162 = $ReallocAsyncCtx + 76 | 0; //@line 10498
   HEAP32[$162 >> 2] = $40; //@line 10499
   $163 = $ReallocAsyncCtx + 80 | 0; //@line 10500
   HEAP32[$163 >> 2] = $42; //@line 10501
   $164 = $ReallocAsyncCtx + 84 | 0; //@line 10502
   HEAP32[$164 >> 2] = $44; //@line 10503
   $165 = $ReallocAsyncCtx + 88 | 0; //@line 10504
   HEAP32[$165 >> 2] = $46; //@line 10505
   $166 = $ReallocAsyncCtx + 92 | 0; //@line 10506
   HEAP32[$166 >> 2] = $48; //@line 10507
   $167 = $ReallocAsyncCtx + 96 | 0; //@line 10508
   HEAP32[$167 >> 2] = $50; //@line 10509
   $168 = $ReallocAsyncCtx + 100 | 0; //@line 10510
   HEAP32[$168 >> 2] = $52; //@line 10511
   $169 = $ReallocAsyncCtx + 104 | 0; //@line 10512
   HEAP32[$169 >> 2] = $54; //@line 10513
   $170 = $ReallocAsyncCtx + 108 | 0; //@line 10514
   HEAP32[$170 >> 2] = $56; //@line 10515
   $171 = $ReallocAsyncCtx + 112 | 0; //@line 10516
   HEAP32[$171 >> 2] = $58; //@line 10517
   $172 = $ReallocAsyncCtx + 116 | 0; //@line 10518
   HEAP32[$172 >> 2] = $60; //@line 10519
   $173 = $ReallocAsyncCtx + 120 | 0; //@line 10520
   HEAP32[$173 >> 2] = $62; //@line 10521
   $174 = $ReallocAsyncCtx + 124 | 0; //@line 10522
   HEAP32[$174 >> 2] = $64; //@line 10523
   $175 = $ReallocAsyncCtx + 128 | 0; //@line 10524
   HEAP32[$175 >> 2] = $66; //@line 10525
   $176 = $ReallocAsyncCtx + 132 | 0; //@line 10526
   HEAP32[$176 >> 2] = $68; //@line 10527
   $177 = $ReallocAsyncCtx + 136 | 0; //@line 10528
   HEAP32[$177 >> 2] = $70; //@line 10529
   $178 = $ReallocAsyncCtx + 140 | 0; //@line 10530
   HEAP8[$178 >> 0] = $72; //@line 10531
   $179 = $ReallocAsyncCtx + 144 | 0; //@line 10532
   HEAP32[$179 >> 2] = $74; //@line 10533
   $180 = $ReallocAsyncCtx + 148 | 0; //@line 10534
   HEAP32[$180 >> 2] = $76; //@line 10535
   $181 = $ReallocAsyncCtx + 152 | 0; //@line 10536
   HEAP32[$181 >> 2] = $78; //@line 10537
   $182 = $ReallocAsyncCtx + 156 | 0; //@line 10538
   HEAP32[$182 >> 2] = $80; //@line 10539
   $183 = $ReallocAsyncCtx + 160 | 0; //@line 10540
   HEAP32[$183 >> 2] = $82; //@line 10541
   $184 = $ReallocAsyncCtx + 164 | 0; //@line 10542
   HEAP32[$184 >> 2] = $130; //@line 10543
   $185 = $ReallocAsyncCtx + 168 | 0; //@line 10544
   HEAP32[$185 >> 2] = $84; //@line 10545
   $186 = $ReallocAsyncCtx + 172 | 0; //@line 10546
   HEAP32[$186 >> 2] = $86; //@line 10547
   $187 = $ReallocAsyncCtx + 176 | 0; //@line 10548
   HEAP32[$187 >> 2] = $$0107$be; //@line 10549
   $188 = $ReallocAsyncCtx + 180 | 0; //@line 10550
   HEAP32[$188 >> 2] = $88; //@line 10551
   $189 = $ReallocAsyncCtx + 184 | 0; //@line 10552
   HEAP32[$189 >> 2] = $90; //@line 10553
   $190 = $ReallocAsyncCtx + 188 | 0; //@line 10554
   HEAP32[$190 >> 2] = $92; //@line 10555
   $191 = $ReallocAsyncCtx + 192 | 0; //@line 10556
   HEAP32[$191 >> 2] = $94; //@line 10557
   $192 = $ReallocAsyncCtx + 196 | 0; //@line 10558
   HEAP32[$192 >> 2] = $96; //@line 10559
   $193 = $ReallocAsyncCtx + 200 | 0; //@line 10560
   HEAP32[$193 >> 2] = $98; //@line 10561
   $194 = $ReallocAsyncCtx + 204 | 0; //@line 10562
   HEAP32[$194 >> 2] = $100; //@line 10563
   $195 = $ReallocAsyncCtx + 208 | 0; //@line 10564
   HEAP32[$195 >> 2] = $102; //@line 10565
   $196 = $ReallocAsyncCtx + 212 | 0; //@line 10566
   HEAP32[$196 >> 2] = $104; //@line 10567
   $197 = $ReallocAsyncCtx + 216 | 0; //@line 10568
   HEAP32[$197 >> 2] = $106; //@line 10569
   $198 = $ReallocAsyncCtx + 220 | 0; //@line 10570
   HEAP32[$198 >> 2] = $108; //@line 10571
   $199 = $ReallocAsyncCtx + 224 | 0; //@line 10572
   HEAP8[$199 >> 0] = $110; //@line 10573
   $200 = $ReallocAsyncCtx + 228 | 0; //@line 10574
   HEAP32[$200 >> 2] = $14; //@line 10575
   $201 = $ReallocAsyncCtx + 232 | 0; //@line 10576
   HEAP32[$201 >> 2] = $16; //@line 10577
   $202 = $ReallocAsyncCtx + 236 | 0; //@line 10578
   HEAP32[$202 >> 2] = $12; //@line 10579
   sp = STACKTOP; //@line 10580
   return;
  }
  HEAP8[___async_retval >> 0] = $143; //@line 10584
  ___async_unwind = 0; //@line 10585
  HEAP32[$ReallocAsyncCtx >> 2] = 489; //@line 10586
  $144 = $ReallocAsyncCtx + 4 | 0; //@line 10587
  HEAP8[$144 >> 0] = $112; //@line 10588
  $145 = $ReallocAsyncCtx + 8 | 0; //@line 10589
  HEAP32[$145 >> 2] = $4; //@line 10590
  $146 = $ReallocAsyncCtx + 12 | 0; //@line 10591
  HEAP32[$146 >> 2] = $6; //@line 10592
  $147 = $ReallocAsyncCtx + 16 | 0; //@line 10593
  HEAP32[$147 >> 2] = $8; //@line 10594
  $148 = $ReallocAsyncCtx + 20 | 0; //@line 10595
  HEAP32[$148 >> 2] = $10; //@line 10596
  $149 = $ReallocAsyncCtx + 24 | 0; //@line 10597
  HEAP32[$149 >> 2] = $116; //@line 10598
  $150 = $ReallocAsyncCtx + 28 | 0; //@line 10599
  HEAP32[$150 >> 2] = $2; //@line 10600
  $151 = $ReallocAsyncCtx + 32 | 0; //@line 10601
  HEAP32[$151 >> 2] = $114; //@line 10602
  $152 = $ReallocAsyncCtx + 36 | 0; //@line 10603
  HEAP32[$152 >> 2] = $18; //@line 10604
  $153 = $ReallocAsyncCtx + 40 | 0; //@line 10605
  HEAP32[$153 >> 2] = $20; //@line 10606
  $154 = $ReallocAsyncCtx + 44 | 0; //@line 10607
  HEAP32[$154 >> 2] = $24; //@line 10608
  $155 = $ReallocAsyncCtx + 48 | 0; //@line 10609
  HEAP32[$155 >> 2] = $26; //@line 10610
  $156 = $ReallocAsyncCtx + 52 | 0; //@line 10611
  HEAP32[$156 >> 2] = $28; //@line 10612
  $157 = $ReallocAsyncCtx + 56 | 0; //@line 10613
  HEAP32[$157 >> 2] = $30; //@line 10614
  $158 = $ReallocAsyncCtx + 60 | 0; //@line 10615
  HEAP32[$158 >> 2] = $32; //@line 10616
  $159 = $ReallocAsyncCtx + 64 | 0; //@line 10617
  HEAP32[$159 >> 2] = $34; //@line 10618
  $160 = $ReallocAsyncCtx + 68 | 0; //@line 10619
  HEAP32[$160 >> 2] = $36; //@line 10620
  $161 = $ReallocAsyncCtx + 72 | 0; //@line 10621
  HEAP32[$161 >> 2] = $38; //@line 10622
  $162 = $ReallocAsyncCtx + 76 | 0; //@line 10623
  HEAP32[$162 >> 2] = $40; //@line 10624
  $163 = $ReallocAsyncCtx + 80 | 0; //@line 10625
  HEAP32[$163 >> 2] = $42; //@line 10626
  $164 = $ReallocAsyncCtx + 84 | 0; //@line 10627
  HEAP32[$164 >> 2] = $44; //@line 10628
  $165 = $ReallocAsyncCtx + 88 | 0; //@line 10629
  HEAP32[$165 >> 2] = $46; //@line 10630
  $166 = $ReallocAsyncCtx + 92 | 0; //@line 10631
  HEAP32[$166 >> 2] = $48; //@line 10632
  $167 = $ReallocAsyncCtx + 96 | 0; //@line 10633
  HEAP32[$167 >> 2] = $50; //@line 10634
  $168 = $ReallocAsyncCtx + 100 | 0; //@line 10635
  HEAP32[$168 >> 2] = $52; //@line 10636
  $169 = $ReallocAsyncCtx + 104 | 0; //@line 10637
  HEAP32[$169 >> 2] = $54; //@line 10638
  $170 = $ReallocAsyncCtx + 108 | 0; //@line 10639
  HEAP32[$170 >> 2] = $56; //@line 10640
  $171 = $ReallocAsyncCtx + 112 | 0; //@line 10641
  HEAP32[$171 >> 2] = $58; //@line 10642
  $172 = $ReallocAsyncCtx + 116 | 0; //@line 10643
  HEAP32[$172 >> 2] = $60; //@line 10644
  $173 = $ReallocAsyncCtx + 120 | 0; //@line 10645
  HEAP32[$173 >> 2] = $62; //@line 10646
  $174 = $ReallocAsyncCtx + 124 | 0; //@line 10647
  HEAP32[$174 >> 2] = $64; //@line 10648
  $175 = $ReallocAsyncCtx + 128 | 0; //@line 10649
  HEAP32[$175 >> 2] = $66; //@line 10650
  $176 = $ReallocAsyncCtx + 132 | 0; //@line 10651
  HEAP32[$176 >> 2] = $68; //@line 10652
  $177 = $ReallocAsyncCtx + 136 | 0; //@line 10653
  HEAP32[$177 >> 2] = $70; //@line 10654
  $178 = $ReallocAsyncCtx + 140 | 0; //@line 10655
  HEAP8[$178 >> 0] = $72; //@line 10656
  $179 = $ReallocAsyncCtx + 144 | 0; //@line 10657
  HEAP32[$179 >> 2] = $74; //@line 10658
  $180 = $ReallocAsyncCtx + 148 | 0; //@line 10659
  HEAP32[$180 >> 2] = $76; //@line 10660
  $181 = $ReallocAsyncCtx + 152 | 0; //@line 10661
  HEAP32[$181 >> 2] = $78; //@line 10662
  $182 = $ReallocAsyncCtx + 156 | 0; //@line 10663
  HEAP32[$182 >> 2] = $80; //@line 10664
  $183 = $ReallocAsyncCtx + 160 | 0; //@line 10665
  HEAP32[$183 >> 2] = $82; //@line 10666
  $184 = $ReallocAsyncCtx + 164 | 0; //@line 10667
  HEAP32[$184 >> 2] = $130; //@line 10668
  $185 = $ReallocAsyncCtx + 168 | 0; //@line 10669
  HEAP32[$185 >> 2] = $84; //@line 10670
  $186 = $ReallocAsyncCtx + 172 | 0; //@line 10671
  HEAP32[$186 >> 2] = $86; //@line 10672
  $187 = $ReallocAsyncCtx + 176 | 0; //@line 10673
  HEAP32[$187 >> 2] = $$0107$be; //@line 10674
  $188 = $ReallocAsyncCtx + 180 | 0; //@line 10675
  HEAP32[$188 >> 2] = $88; //@line 10676
  $189 = $ReallocAsyncCtx + 184 | 0; //@line 10677
  HEAP32[$189 >> 2] = $90; //@line 10678
  $190 = $ReallocAsyncCtx + 188 | 0; //@line 10679
  HEAP32[$190 >> 2] = $92; //@line 10680
  $191 = $ReallocAsyncCtx + 192 | 0; //@line 10681
  HEAP32[$191 >> 2] = $94; //@line 10682
  $192 = $ReallocAsyncCtx + 196 | 0; //@line 10683
  HEAP32[$192 >> 2] = $96; //@line 10684
  $193 = $ReallocAsyncCtx + 200 | 0; //@line 10685
  HEAP32[$193 >> 2] = $98; //@line 10686
  $194 = $ReallocAsyncCtx + 204 | 0; //@line 10687
  HEAP32[$194 >> 2] = $100; //@line 10688
  $195 = $ReallocAsyncCtx + 208 | 0; //@line 10689
  HEAP32[$195 >> 2] = $102; //@line 10690
  $196 = $ReallocAsyncCtx + 212 | 0; //@line 10691
  HEAP32[$196 >> 2] = $104; //@line 10692
  $197 = $ReallocAsyncCtx + 216 | 0; //@line 10693
  HEAP32[$197 >> 2] = $106; //@line 10694
  $198 = $ReallocAsyncCtx + 220 | 0; //@line 10695
  HEAP32[$198 >> 2] = $108; //@line 10696
  $199 = $ReallocAsyncCtx + 224 | 0; //@line 10697
  HEAP8[$199 >> 0] = $110; //@line 10698
  $200 = $ReallocAsyncCtx + 228 | 0; //@line 10699
  HEAP32[$200 >> 2] = $14; //@line 10700
  $201 = $ReallocAsyncCtx + 232 | 0; //@line 10701
  HEAP32[$201 >> 2] = $16; //@line 10702
  $202 = $ReallocAsyncCtx + 236 | 0; //@line 10703
  HEAP32[$202 >> 2] = $12; //@line 10704
  sp = STACKTOP; //@line 10705
  return;
 } else if ((label | 0) == 9) {
  $221 = HEAP8[$16 + ($119 & 255) >> 0] | 0; //@line 10711
  HEAP8[$30 >> 0] = ($221 & 255) >>> 4 & 7; //@line 10716
  HEAP8[$100 >> 0] = $221 & 15; //@line 10718
  $240 = $$0$be + 5 << 24 >> 24; //@line 10732
  HEAP32[$6 >> 2] = (HEAPU8[$16 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$16 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$16 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 10740
  $250 = HEAP32[(HEAP32[$10 >> 2] | 0) + 40 >> 2] | 0; //@line 10743
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(236) | 0; //@line 10744
  $251 = FUNCTION_TABLE_iii[$250 & 31]($88, $48) | 0; //@line 10745
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 490; //@line 10748
   $252 = $ReallocAsyncCtx2 + 4 | 0; //@line 10749
   HEAP8[$252 >> 0] = $112; //@line 10750
   $253 = $ReallocAsyncCtx2 + 8 | 0; //@line 10751
   HEAP32[$253 >> 2] = $4; //@line 10752
   $254 = $ReallocAsyncCtx2 + 12 | 0; //@line 10753
   HEAP32[$254 >> 2] = $6; //@line 10754
   $255 = $ReallocAsyncCtx2 + 16 | 0; //@line 10755
   HEAP32[$255 >> 2] = $8; //@line 10756
   $256 = $ReallocAsyncCtx2 + 20 | 0; //@line 10757
   HEAP32[$256 >> 2] = $10; //@line 10758
   $257 = $ReallocAsyncCtx2 + 24 | 0; //@line 10759
   HEAP8[$257 >> 0] = $240; //@line 10760
   $258 = $ReallocAsyncCtx2 + 28 | 0; //@line 10761
   HEAP32[$258 >> 2] = $2; //@line 10762
   $259 = $ReallocAsyncCtx2 + 32 | 0; //@line 10763
   HEAP32[$259 >> 2] = $114; //@line 10764
   $260 = $ReallocAsyncCtx2 + 36 | 0; //@line 10765
   HEAP32[$260 >> 2] = $116; //@line 10766
   $261 = $ReallocAsyncCtx2 + 40 | 0; //@line 10767
   HEAP32[$261 >> 2] = $18; //@line 10768
   $262 = $ReallocAsyncCtx2 + 44 | 0; //@line 10769
   HEAP32[$262 >> 2] = $20; //@line 10770
   $263 = $ReallocAsyncCtx2 + 48 | 0; //@line 10771
   HEAP32[$263 >> 2] = $24; //@line 10772
   $264 = $ReallocAsyncCtx2 + 52 | 0; //@line 10773
   HEAP32[$264 >> 2] = $26; //@line 10774
   $265 = $ReallocAsyncCtx2 + 56 | 0; //@line 10775
   HEAP32[$265 >> 2] = $28; //@line 10776
   $266 = $ReallocAsyncCtx2 + 60 | 0; //@line 10777
   HEAP32[$266 >> 2] = $30; //@line 10778
   $267 = $ReallocAsyncCtx2 + 64 | 0; //@line 10779
   HEAP32[$267 >> 2] = $32; //@line 10780
   $268 = $ReallocAsyncCtx2 + 68 | 0; //@line 10781
   HEAP32[$268 >> 2] = $34; //@line 10782
   $269 = $ReallocAsyncCtx2 + 72 | 0; //@line 10783
   HEAP32[$269 >> 2] = $36; //@line 10784
   $270 = $ReallocAsyncCtx2 + 76 | 0; //@line 10785
   HEAP32[$270 >> 2] = $38; //@line 10786
   $271 = $ReallocAsyncCtx2 + 80 | 0; //@line 10787
   HEAP32[$271 >> 2] = $40; //@line 10788
   $272 = $ReallocAsyncCtx2 + 84 | 0; //@line 10789
   HEAP32[$272 >> 2] = $42; //@line 10790
   $273 = $ReallocAsyncCtx2 + 88 | 0; //@line 10791
   HEAP32[$273 >> 2] = $44; //@line 10792
   $274 = $ReallocAsyncCtx2 + 92 | 0; //@line 10793
   HEAP32[$274 >> 2] = $46; //@line 10794
   $275 = $ReallocAsyncCtx2 + 96 | 0; //@line 10795
   HEAP32[$275 >> 2] = $48; //@line 10796
   $276 = $ReallocAsyncCtx2 + 100 | 0; //@line 10797
   HEAP32[$276 >> 2] = $50; //@line 10798
   $277 = $ReallocAsyncCtx2 + 104 | 0; //@line 10799
   HEAP32[$277 >> 2] = $52; //@line 10800
   $278 = $ReallocAsyncCtx2 + 108 | 0; //@line 10801
   HEAP32[$278 >> 2] = $54; //@line 10802
   $279 = $ReallocAsyncCtx2 + 112 | 0; //@line 10803
   HEAP32[$279 >> 2] = $56; //@line 10804
   $280 = $ReallocAsyncCtx2 + 116 | 0; //@line 10805
   HEAP32[$280 >> 2] = $58; //@line 10806
   $281 = $ReallocAsyncCtx2 + 120 | 0; //@line 10807
   HEAP32[$281 >> 2] = $60; //@line 10808
   $282 = $ReallocAsyncCtx2 + 124 | 0; //@line 10809
   HEAP32[$282 >> 2] = $62; //@line 10810
   $283 = $ReallocAsyncCtx2 + 128 | 0; //@line 10811
   HEAP32[$283 >> 2] = $64; //@line 10812
   $284 = $ReallocAsyncCtx2 + 132 | 0; //@line 10813
   HEAP32[$284 >> 2] = $66; //@line 10814
   $285 = $ReallocAsyncCtx2 + 136 | 0; //@line 10815
   HEAP32[$285 >> 2] = $68; //@line 10816
   $286 = $ReallocAsyncCtx2 + 140 | 0; //@line 10817
   HEAP32[$286 >> 2] = $70; //@line 10818
   $287 = $ReallocAsyncCtx2 + 144 | 0; //@line 10819
   HEAP8[$287 >> 0] = $72; //@line 10820
   $288 = $ReallocAsyncCtx2 + 148 | 0; //@line 10821
   HEAP32[$288 >> 2] = $74; //@line 10822
   $289 = $ReallocAsyncCtx2 + 152 | 0; //@line 10823
   HEAP32[$289 >> 2] = $76; //@line 10824
   $290 = $ReallocAsyncCtx2 + 156 | 0; //@line 10825
   HEAP32[$290 >> 2] = $78; //@line 10826
   $291 = $ReallocAsyncCtx2 + 160 | 0; //@line 10827
   HEAP32[$291 >> 2] = $80; //@line 10828
   $292 = $ReallocAsyncCtx2 + 164 | 0; //@line 10829
   HEAP32[$292 >> 2] = $82; //@line 10830
   $293 = $ReallocAsyncCtx2 + 168 | 0; //@line 10831
   HEAP32[$293 >> 2] = $84; //@line 10832
   $294 = $ReallocAsyncCtx2 + 172 | 0; //@line 10833
   HEAP32[$294 >> 2] = $86; //@line 10834
   $295 = $ReallocAsyncCtx2 + 176 | 0; //@line 10835
   HEAP32[$295 >> 2] = $88; //@line 10836
   $296 = $ReallocAsyncCtx2 + 180 | 0; //@line 10837
   HEAP32[$296 >> 2] = $90; //@line 10838
   $297 = $ReallocAsyncCtx2 + 184 | 0; //@line 10839
   HEAP32[$297 >> 2] = $92; //@line 10840
   $298 = $ReallocAsyncCtx2 + 188 | 0; //@line 10841
   HEAP32[$298 >> 2] = $94; //@line 10842
   $299 = $ReallocAsyncCtx2 + 192 | 0; //@line 10843
   HEAP32[$299 >> 2] = $96; //@line 10844
   $300 = $ReallocAsyncCtx2 + 196 | 0; //@line 10845
   HEAP32[$300 >> 2] = $98; //@line 10846
   $301 = $ReallocAsyncCtx2 + 200 | 0; //@line 10847
   HEAP32[$301 >> 2] = $100; //@line 10848
   $302 = $ReallocAsyncCtx2 + 204 | 0; //@line 10849
   HEAP32[$302 >> 2] = $102; //@line 10850
   $303 = $ReallocAsyncCtx2 + 208 | 0; //@line 10851
   HEAP32[$303 >> 2] = $104; //@line 10852
   $304 = $ReallocAsyncCtx2 + 212 | 0; //@line 10853
   HEAP32[$304 >> 2] = $106; //@line 10854
   $305 = $ReallocAsyncCtx2 + 216 | 0; //@line 10855
   HEAP32[$305 >> 2] = $108; //@line 10856
   $306 = $ReallocAsyncCtx2 + 220 | 0; //@line 10857
   HEAP8[$306 >> 0] = $110; //@line 10858
   $307 = $ReallocAsyncCtx2 + 224 | 0; //@line 10859
   HEAP32[$307 >> 2] = $14; //@line 10860
   $308 = $ReallocAsyncCtx2 + 228 | 0; //@line 10861
   HEAP32[$308 >> 2] = $16; //@line 10862
   $309 = $ReallocAsyncCtx2 + 232 | 0; //@line 10863
   HEAP32[$309 >> 2] = $12; //@line 10864
   sp = STACKTOP; //@line 10865
   return;
  }
  HEAP8[___async_retval >> 0] = $251; //@line 10869
  ___async_unwind = 0; //@line 10870
  HEAP32[$ReallocAsyncCtx2 >> 2] = 490; //@line 10871
  $252 = $ReallocAsyncCtx2 + 4 | 0; //@line 10872
  HEAP8[$252 >> 0] = $112; //@line 10873
  $253 = $ReallocAsyncCtx2 + 8 | 0; //@line 10874
  HEAP32[$253 >> 2] = $4; //@line 10875
  $254 = $ReallocAsyncCtx2 + 12 | 0; //@line 10876
  HEAP32[$254 >> 2] = $6; //@line 10877
  $255 = $ReallocAsyncCtx2 + 16 | 0; //@line 10878
  HEAP32[$255 >> 2] = $8; //@line 10879
  $256 = $ReallocAsyncCtx2 + 20 | 0; //@line 10880
  HEAP32[$256 >> 2] = $10; //@line 10881
  $257 = $ReallocAsyncCtx2 + 24 | 0; //@line 10882
  HEAP8[$257 >> 0] = $240; //@line 10883
  $258 = $ReallocAsyncCtx2 + 28 | 0; //@line 10884
  HEAP32[$258 >> 2] = $2; //@line 10885
  $259 = $ReallocAsyncCtx2 + 32 | 0; //@line 10886
  HEAP32[$259 >> 2] = $114; //@line 10887
  $260 = $ReallocAsyncCtx2 + 36 | 0; //@line 10888
  HEAP32[$260 >> 2] = $116; //@line 10889
  $261 = $ReallocAsyncCtx2 + 40 | 0; //@line 10890
  HEAP32[$261 >> 2] = $18; //@line 10891
  $262 = $ReallocAsyncCtx2 + 44 | 0; //@line 10892
  HEAP32[$262 >> 2] = $20; //@line 10893
  $263 = $ReallocAsyncCtx2 + 48 | 0; //@line 10894
  HEAP32[$263 >> 2] = $24; //@line 10895
  $264 = $ReallocAsyncCtx2 + 52 | 0; //@line 10896
  HEAP32[$264 >> 2] = $26; //@line 10897
  $265 = $ReallocAsyncCtx2 + 56 | 0; //@line 10898
  HEAP32[$265 >> 2] = $28; //@line 10899
  $266 = $ReallocAsyncCtx2 + 60 | 0; //@line 10900
  HEAP32[$266 >> 2] = $30; //@line 10901
  $267 = $ReallocAsyncCtx2 + 64 | 0; //@line 10902
  HEAP32[$267 >> 2] = $32; //@line 10903
  $268 = $ReallocAsyncCtx2 + 68 | 0; //@line 10904
  HEAP32[$268 >> 2] = $34; //@line 10905
  $269 = $ReallocAsyncCtx2 + 72 | 0; //@line 10906
  HEAP32[$269 >> 2] = $36; //@line 10907
  $270 = $ReallocAsyncCtx2 + 76 | 0; //@line 10908
  HEAP32[$270 >> 2] = $38; //@line 10909
  $271 = $ReallocAsyncCtx2 + 80 | 0; //@line 10910
  HEAP32[$271 >> 2] = $40; //@line 10911
  $272 = $ReallocAsyncCtx2 + 84 | 0; //@line 10912
  HEAP32[$272 >> 2] = $42; //@line 10913
  $273 = $ReallocAsyncCtx2 + 88 | 0; //@line 10914
  HEAP32[$273 >> 2] = $44; //@line 10915
  $274 = $ReallocAsyncCtx2 + 92 | 0; //@line 10916
  HEAP32[$274 >> 2] = $46; //@line 10917
  $275 = $ReallocAsyncCtx2 + 96 | 0; //@line 10918
  HEAP32[$275 >> 2] = $48; //@line 10919
  $276 = $ReallocAsyncCtx2 + 100 | 0; //@line 10920
  HEAP32[$276 >> 2] = $50; //@line 10921
  $277 = $ReallocAsyncCtx2 + 104 | 0; //@line 10922
  HEAP32[$277 >> 2] = $52; //@line 10923
  $278 = $ReallocAsyncCtx2 + 108 | 0; //@line 10924
  HEAP32[$278 >> 2] = $54; //@line 10925
  $279 = $ReallocAsyncCtx2 + 112 | 0; //@line 10926
  HEAP32[$279 >> 2] = $56; //@line 10927
  $280 = $ReallocAsyncCtx2 + 116 | 0; //@line 10928
  HEAP32[$280 >> 2] = $58; //@line 10929
  $281 = $ReallocAsyncCtx2 + 120 | 0; //@line 10930
  HEAP32[$281 >> 2] = $60; //@line 10931
  $282 = $ReallocAsyncCtx2 + 124 | 0; //@line 10932
  HEAP32[$282 >> 2] = $62; //@line 10933
  $283 = $ReallocAsyncCtx2 + 128 | 0; //@line 10934
  HEAP32[$283 >> 2] = $64; //@line 10935
  $284 = $ReallocAsyncCtx2 + 132 | 0; //@line 10936
  HEAP32[$284 >> 2] = $66; //@line 10937
  $285 = $ReallocAsyncCtx2 + 136 | 0; //@line 10938
  HEAP32[$285 >> 2] = $68; //@line 10939
  $286 = $ReallocAsyncCtx2 + 140 | 0; //@line 10940
  HEAP32[$286 >> 2] = $70; //@line 10941
  $287 = $ReallocAsyncCtx2 + 144 | 0; //@line 10942
  HEAP8[$287 >> 0] = $72; //@line 10943
  $288 = $ReallocAsyncCtx2 + 148 | 0; //@line 10944
  HEAP32[$288 >> 2] = $74; //@line 10945
  $289 = $ReallocAsyncCtx2 + 152 | 0; //@line 10946
  HEAP32[$289 >> 2] = $76; //@line 10947
  $290 = $ReallocAsyncCtx2 + 156 | 0; //@line 10948
  HEAP32[$290 >> 2] = $78; //@line 10949
  $291 = $ReallocAsyncCtx2 + 160 | 0; //@line 10950
  HEAP32[$291 >> 2] = $80; //@line 10951
  $292 = $ReallocAsyncCtx2 + 164 | 0; //@line 10952
  HEAP32[$292 >> 2] = $82; //@line 10953
  $293 = $ReallocAsyncCtx2 + 168 | 0; //@line 10954
  HEAP32[$293 >> 2] = $84; //@line 10955
  $294 = $ReallocAsyncCtx2 + 172 | 0; //@line 10956
  HEAP32[$294 >> 2] = $86; //@line 10957
  $295 = $ReallocAsyncCtx2 + 176 | 0; //@line 10958
  HEAP32[$295 >> 2] = $88; //@line 10959
  $296 = $ReallocAsyncCtx2 + 180 | 0; //@line 10960
  HEAP32[$296 >> 2] = $90; //@line 10961
  $297 = $ReallocAsyncCtx2 + 184 | 0; //@line 10962
  HEAP32[$297 >> 2] = $92; //@line 10963
  $298 = $ReallocAsyncCtx2 + 188 | 0; //@line 10964
  HEAP32[$298 >> 2] = $94; //@line 10965
  $299 = $ReallocAsyncCtx2 + 192 | 0; //@line 10966
  HEAP32[$299 >> 2] = $96; //@line 10967
  $300 = $ReallocAsyncCtx2 + 196 | 0; //@line 10968
  HEAP32[$300 >> 2] = $98; //@line 10969
  $301 = $ReallocAsyncCtx2 + 200 | 0; //@line 10970
  HEAP32[$301 >> 2] = $100; //@line 10971
  $302 = $ReallocAsyncCtx2 + 204 | 0; //@line 10972
  HEAP32[$302 >> 2] = $102; //@line 10973
  $303 = $ReallocAsyncCtx2 + 208 | 0; //@line 10974
  HEAP32[$303 >> 2] = $104; //@line 10975
  $304 = $ReallocAsyncCtx2 + 212 | 0; //@line 10976
  HEAP32[$304 >> 2] = $106; //@line 10977
  $305 = $ReallocAsyncCtx2 + 216 | 0; //@line 10978
  HEAP32[$305 >> 2] = $108; //@line 10979
  $306 = $ReallocAsyncCtx2 + 220 | 0; //@line 10980
  HEAP8[$306 >> 0] = $110; //@line 10981
  $307 = $ReallocAsyncCtx2 + 224 | 0; //@line 10982
  HEAP32[$307 >> 2] = $14; //@line 10983
  $308 = $ReallocAsyncCtx2 + 228 | 0; //@line 10984
  HEAP32[$308 >> 2] = $16; //@line 10985
  $309 = $ReallocAsyncCtx2 + 232 | 0; //@line 10986
  HEAP32[$309 >> 2] = $12; //@line 10987
  sp = STACKTOP; //@line 10988
  return;
 } else if ((label | 0) == 13) {
  $313 = HEAP32[$311 >> 2] | 0; //@line 10992
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(232) | 0; //@line 10993
  $314 = FUNCTION_TABLE_ii[$313 & 15]($76) | 0; //@line 10994
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 491; //@line 10997
   $315 = $ReallocAsyncCtx3 + 4 | 0; //@line 10998
   HEAP32[$315 >> 2] = $2; //@line 10999
   $316 = $ReallocAsyncCtx3 + 8 | 0; //@line 11000
   HEAP32[$316 >> 2] = $4; //@line 11001
   $317 = $ReallocAsyncCtx3 + 12 | 0; //@line 11002
   HEAP32[$317 >> 2] = $6; //@line 11003
   $318 = $ReallocAsyncCtx3 + 16 | 0; //@line 11004
   HEAP32[$318 >> 2] = $8; //@line 11005
   $319 = $ReallocAsyncCtx3 + 20 | 0; //@line 11006
   HEAP32[$319 >> 2] = $10; //@line 11007
   $320 = $ReallocAsyncCtx3 + 24 | 0; //@line 11008
   HEAP32[$320 >> 2] = $12; //@line 11009
   $321 = $ReallocAsyncCtx3 + 28 | 0; //@line 11010
   HEAP32[$321 >> 2] = $14; //@line 11011
   $322 = $ReallocAsyncCtx3 + 32 | 0; //@line 11012
   HEAP32[$322 >> 2] = $16; //@line 11013
   $323 = $ReallocAsyncCtx3 + 36 | 0; //@line 11014
   HEAP32[$323 >> 2] = $18; //@line 11015
   $324 = $ReallocAsyncCtx3 + 40 | 0; //@line 11016
   HEAP32[$324 >> 2] = $20; //@line 11017
   $325 = $ReallocAsyncCtx3 + 44 | 0; //@line 11018
   HEAP32[$325 >> 2] = $24; //@line 11019
   $326 = $ReallocAsyncCtx3 + 48 | 0; //@line 11020
   HEAP32[$326 >> 2] = $26; //@line 11021
   $327 = $ReallocAsyncCtx3 + 52 | 0; //@line 11022
   HEAP32[$327 >> 2] = $28; //@line 11023
   $328 = $ReallocAsyncCtx3 + 56 | 0; //@line 11024
   HEAP32[$328 >> 2] = $30; //@line 11025
   $329 = $ReallocAsyncCtx3 + 60 | 0; //@line 11026
   HEAP32[$329 >> 2] = $32; //@line 11027
   $330 = $ReallocAsyncCtx3 + 64 | 0; //@line 11028
   HEAP32[$330 >> 2] = $34; //@line 11029
   $331 = $ReallocAsyncCtx3 + 68 | 0; //@line 11030
   HEAP32[$331 >> 2] = $36; //@line 11031
   $332 = $ReallocAsyncCtx3 + 72 | 0; //@line 11032
   HEAP32[$332 >> 2] = $38; //@line 11033
   $333 = $ReallocAsyncCtx3 + 76 | 0; //@line 11034
   HEAP32[$333 >> 2] = $40; //@line 11035
   $334 = $ReallocAsyncCtx3 + 80 | 0; //@line 11036
   HEAP32[$334 >> 2] = $42; //@line 11037
   $335 = $ReallocAsyncCtx3 + 84 | 0; //@line 11038
   HEAP32[$335 >> 2] = $44; //@line 11039
   $336 = $ReallocAsyncCtx3 + 88 | 0; //@line 11040
   HEAP32[$336 >> 2] = $46; //@line 11041
   $337 = $ReallocAsyncCtx3 + 92 | 0; //@line 11042
   HEAP32[$337 >> 2] = $48; //@line 11043
   $338 = $ReallocAsyncCtx3 + 96 | 0; //@line 11044
   HEAP32[$338 >> 2] = $50; //@line 11045
   $339 = $ReallocAsyncCtx3 + 100 | 0; //@line 11046
   HEAP32[$339 >> 2] = $52; //@line 11047
   $340 = $ReallocAsyncCtx3 + 104 | 0; //@line 11048
   HEAP32[$340 >> 2] = $54; //@line 11049
   $341 = $ReallocAsyncCtx3 + 108 | 0; //@line 11050
   HEAP32[$341 >> 2] = $56; //@line 11051
   $342 = $ReallocAsyncCtx3 + 112 | 0; //@line 11052
   HEAP32[$342 >> 2] = $58; //@line 11053
   $343 = $ReallocAsyncCtx3 + 116 | 0; //@line 11054
   HEAP32[$343 >> 2] = $60; //@line 11055
   $344 = $ReallocAsyncCtx3 + 120 | 0; //@line 11056
   HEAP32[$344 >> 2] = $62; //@line 11057
   $345 = $ReallocAsyncCtx3 + 124 | 0; //@line 11058
   HEAP32[$345 >> 2] = $64; //@line 11059
   $346 = $ReallocAsyncCtx3 + 128 | 0; //@line 11060
   HEAP32[$346 >> 2] = $66; //@line 11061
   $347 = $ReallocAsyncCtx3 + 132 | 0; //@line 11062
   HEAP32[$347 >> 2] = $68; //@line 11063
   $348 = $ReallocAsyncCtx3 + 136 | 0; //@line 11064
   HEAP32[$348 >> 2] = $70; //@line 11065
   $349 = $ReallocAsyncCtx3 + 140 | 0; //@line 11066
   HEAP8[$349 >> 0] = $72; //@line 11067
   $350 = $ReallocAsyncCtx3 + 144 | 0; //@line 11068
   HEAP32[$350 >> 2] = $74; //@line 11069
   $351 = $ReallocAsyncCtx3 + 148 | 0; //@line 11070
   HEAP32[$351 >> 2] = $76; //@line 11071
   $352 = $ReallocAsyncCtx3 + 152 | 0; //@line 11072
   HEAP32[$352 >> 2] = $78; //@line 11073
   $353 = $ReallocAsyncCtx3 + 156 | 0; //@line 11074
   HEAP32[$353 >> 2] = $80; //@line 11075
   $354 = $ReallocAsyncCtx3 + 160 | 0; //@line 11076
   HEAP32[$354 >> 2] = $82; //@line 11077
   $355 = $ReallocAsyncCtx3 + 164 | 0; //@line 11078
   HEAP32[$355 >> 2] = $84; //@line 11079
   $356 = $ReallocAsyncCtx3 + 168 | 0; //@line 11080
   HEAP32[$356 >> 2] = $86; //@line 11081
   $357 = $ReallocAsyncCtx3 + 172 | 0; //@line 11082
   HEAP32[$357 >> 2] = $88; //@line 11083
   $358 = $ReallocAsyncCtx3 + 176 | 0; //@line 11084
   HEAP32[$358 >> 2] = $90; //@line 11085
   $359 = $ReallocAsyncCtx3 + 180 | 0; //@line 11086
   HEAP32[$359 >> 2] = $92; //@line 11087
   $360 = $ReallocAsyncCtx3 + 184 | 0; //@line 11088
   HEAP32[$360 >> 2] = $94; //@line 11089
   $361 = $ReallocAsyncCtx3 + 188 | 0; //@line 11090
   HEAP32[$361 >> 2] = $96; //@line 11091
   $362 = $ReallocAsyncCtx3 + 192 | 0; //@line 11092
   HEAP8[$362 >> 0] = $119; //@line 11093
   $363 = $ReallocAsyncCtx3 + 196 | 0; //@line 11094
   HEAP32[$363 >> 2] = $98; //@line 11095
   $364 = $ReallocAsyncCtx3 + 200 | 0; //@line 11096
   HEAP32[$364 >> 2] = $100; //@line 11097
   $365 = $ReallocAsyncCtx3 + 204 | 0; //@line 11098
   HEAP32[$365 >> 2] = $102; //@line 11099
   $366 = $ReallocAsyncCtx3 + 208 | 0; //@line 11100
   HEAP32[$366 >> 2] = $104; //@line 11101
   $367 = $ReallocAsyncCtx3 + 212 | 0; //@line 11102
   HEAP32[$367 >> 2] = $106; //@line 11103
   $368 = $ReallocAsyncCtx3 + 216 | 0; //@line 11104
   HEAP32[$368 >> 2] = $108; //@line 11105
   $369 = $ReallocAsyncCtx3 + 220 | 0; //@line 11106
   HEAP8[$369 >> 0] = $110; //@line 11107
   $370 = $ReallocAsyncCtx3 + 221 | 0; //@line 11108
   HEAP8[$370 >> 0] = $112; //@line 11109
   $371 = $ReallocAsyncCtx3 + 224 | 0; //@line 11110
   HEAP32[$371 >> 2] = $114; //@line 11111
   $372 = $ReallocAsyncCtx3 + 228 | 0; //@line 11112
   HEAP32[$372 >> 2] = $116; //@line 11113
   sp = STACKTOP; //@line 11114
   return;
  }
  HEAP8[___async_retval >> 0] = $314; //@line 11118
  ___async_unwind = 0; //@line 11119
  HEAP32[$ReallocAsyncCtx3 >> 2] = 491; //@line 11120
  $315 = $ReallocAsyncCtx3 + 4 | 0; //@line 11121
  HEAP32[$315 >> 2] = $2; //@line 11122
  $316 = $ReallocAsyncCtx3 + 8 | 0; //@line 11123
  HEAP32[$316 >> 2] = $4; //@line 11124
  $317 = $ReallocAsyncCtx3 + 12 | 0; //@line 11125
  HEAP32[$317 >> 2] = $6; //@line 11126
  $318 = $ReallocAsyncCtx3 + 16 | 0; //@line 11127
  HEAP32[$318 >> 2] = $8; //@line 11128
  $319 = $ReallocAsyncCtx3 + 20 | 0; //@line 11129
  HEAP32[$319 >> 2] = $10; //@line 11130
  $320 = $ReallocAsyncCtx3 + 24 | 0; //@line 11131
  HEAP32[$320 >> 2] = $12; //@line 11132
  $321 = $ReallocAsyncCtx3 + 28 | 0; //@line 11133
  HEAP32[$321 >> 2] = $14; //@line 11134
  $322 = $ReallocAsyncCtx3 + 32 | 0; //@line 11135
  HEAP32[$322 >> 2] = $16; //@line 11136
  $323 = $ReallocAsyncCtx3 + 36 | 0; //@line 11137
  HEAP32[$323 >> 2] = $18; //@line 11138
  $324 = $ReallocAsyncCtx3 + 40 | 0; //@line 11139
  HEAP32[$324 >> 2] = $20; //@line 11140
  $325 = $ReallocAsyncCtx3 + 44 | 0; //@line 11141
  HEAP32[$325 >> 2] = $24; //@line 11142
  $326 = $ReallocAsyncCtx3 + 48 | 0; //@line 11143
  HEAP32[$326 >> 2] = $26; //@line 11144
  $327 = $ReallocAsyncCtx3 + 52 | 0; //@line 11145
  HEAP32[$327 >> 2] = $28; //@line 11146
  $328 = $ReallocAsyncCtx3 + 56 | 0; //@line 11147
  HEAP32[$328 >> 2] = $30; //@line 11148
  $329 = $ReallocAsyncCtx3 + 60 | 0; //@line 11149
  HEAP32[$329 >> 2] = $32; //@line 11150
  $330 = $ReallocAsyncCtx3 + 64 | 0; //@line 11151
  HEAP32[$330 >> 2] = $34; //@line 11152
  $331 = $ReallocAsyncCtx3 + 68 | 0; //@line 11153
  HEAP32[$331 >> 2] = $36; //@line 11154
  $332 = $ReallocAsyncCtx3 + 72 | 0; //@line 11155
  HEAP32[$332 >> 2] = $38; //@line 11156
  $333 = $ReallocAsyncCtx3 + 76 | 0; //@line 11157
  HEAP32[$333 >> 2] = $40; //@line 11158
  $334 = $ReallocAsyncCtx3 + 80 | 0; //@line 11159
  HEAP32[$334 >> 2] = $42; //@line 11160
  $335 = $ReallocAsyncCtx3 + 84 | 0; //@line 11161
  HEAP32[$335 >> 2] = $44; //@line 11162
  $336 = $ReallocAsyncCtx3 + 88 | 0; //@line 11163
  HEAP32[$336 >> 2] = $46; //@line 11164
  $337 = $ReallocAsyncCtx3 + 92 | 0; //@line 11165
  HEAP32[$337 >> 2] = $48; //@line 11166
  $338 = $ReallocAsyncCtx3 + 96 | 0; //@line 11167
  HEAP32[$338 >> 2] = $50; //@line 11168
  $339 = $ReallocAsyncCtx3 + 100 | 0; //@line 11169
  HEAP32[$339 >> 2] = $52; //@line 11170
  $340 = $ReallocAsyncCtx3 + 104 | 0; //@line 11171
  HEAP32[$340 >> 2] = $54; //@line 11172
  $341 = $ReallocAsyncCtx3 + 108 | 0; //@line 11173
  HEAP32[$341 >> 2] = $56; //@line 11174
  $342 = $ReallocAsyncCtx3 + 112 | 0; //@line 11175
  HEAP32[$342 >> 2] = $58; //@line 11176
  $343 = $ReallocAsyncCtx3 + 116 | 0; //@line 11177
  HEAP32[$343 >> 2] = $60; //@line 11178
  $344 = $ReallocAsyncCtx3 + 120 | 0; //@line 11179
  HEAP32[$344 >> 2] = $62; //@line 11180
  $345 = $ReallocAsyncCtx3 + 124 | 0; //@line 11181
  HEAP32[$345 >> 2] = $64; //@line 11182
  $346 = $ReallocAsyncCtx3 + 128 | 0; //@line 11183
  HEAP32[$346 >> 2] = $66; //@line 11184
  $347 = $ReallocAsyncCtx3 + 132 | 0; //@line 11185
  HEAP32[$347 >> 2] = $68; //@line 11186
  $348 = $ReallocAsyncCtx3 + 136 | 0; //@line 11187
  HEAP32[$348 >> 2] = $70; //@line 11188
  $349 = $ReallocAsyncCtx3 + 140 | 0; //@line 11189
  HEAP8[$349 >> 0] = $72; //@line 11190
  $350 = $ReallocAsyncCtx3 + 144 | 0; //@line 11191
  HEAP32[$350 >> 2] = $74; //@line 11192
  $351 = $ReallocAsyncCtx3 + 148 | 0; //@line 11193
  HEAP32[$351 >> 2] = $76; //@line 11194
  $352 = $ReallocAsyncCtx3 + 152 | 0; //@line 11195
  HEAP32[$352 >> 2] = $78; //@line 11196
  $353 = $ReallocAsyncCtx3 + 156 | 0; //@line 11197
  HEAP32[$353 >> 2] = $80; //@line 11198
  $354 = $ReallocAsyncCtx3 + 160 | 0; //@line 11199
  HEAP32[$354 >> 2] = $82; //@line 11200
  $355 = $ReallocAsyncCtx3 + 164 | 0; //@line 11201
  HEAP32[$355 >> 2] = $84; //@line 11202
  $356 = $ReallocAsyncCtx3 + 168 | 0; //@line 11203
  HEAP32[$356 >> 2] = $86; //@line 11204
  $357 = $ReallocAsyncCtx3 + 172 | 0; //@line 11205
  HEAP32[$357 >> 2] = $88; //@line 11206
  $358 = $ReallocAsyncCtx3 + 176 | 0; //@line 11207
  HEAP32[$358 >> 2] = $90; //@line 11208
  $359 = $ReallocAsyncCtx3 + 180 | 0; //@line 11209
  HEAP32[$359 >> 2] = $92; //@line 11210
  $360 = $ReallocAsyncCtx3 + 184 | 0; //@line 11211
  HEAP32[$360 >> 2] = $94; //@line 11212
  $361 = $ReallocAsyncCtx3 + 188 | 0; //@line 11213
  HEAP32[$361 >> 2] = $96; //@line 11214
  $362 = $ReallocAsyncCtx3 + 192 | 0; //@line 11215
  HEAP8[$362 >> 0] = $119; //@line 11216
  $363 = $ReallocAsyncCtx3 + 196 | 0; //@line 11217
  HEAP32[$363 >> 2] = $98; //@line 11218
  $364 = $ReallocAsyncCtx3 + 200 | 0; //@line 11219
  HEAP32[$364 >> 2] = $100; //@line 11220
  $365 = $ReallocAsyncCtx3 + 204 | 0; //@line 11221
  HEAP32[$365 >> 2] = $102; //@line 11222
  $366 = $ReallocAsyncCtx3 + 208 | 0; //@line 11223
  HEAP32[$366 >> 2] = $104; //@line 11224
  $367 = $ReallocAsyncCtx3 + 212 | 0; //@line 11225
  HEAP32[$367 >> 2] = $106; //@line 11226
  $368 = $ReallocAsyncCtx3 + 216 | 0; //@line 11227
  HEAP32[$368 >> 2] = $108; //@line 11228
  $369 = $ReallocAsyncCtx3 + 220 | 0; //@line 11229
  HEAP8[$369 >> 0] = $110; //@line 11230
  $370 = $ReallocAsyncCtx3 + 221 | 0; //@line 11231
  HEAP8[$370 >> 0] = $112; //@line 11232
  $371 = $ReallocAsyncCtx3 + 224 | 0; //@line 11233
  HEAP32[$371 >> 2] = $114; //@line 11234
  $372 = $ReallocAsyncCtx3 + 228 | 0; //@line 11235
  HEAP32[$372 >> 2] = $116; //@line 11236
  sp = STACKTOP; //@line 11237
  return;
 } else if ((label | 0) == 18) {
  $392 = HEAP8[$16 + ($119 & 255) >> 0] | 0; //@line 11244
  HEAP32[$114 >> 2] = (HEAPU8[$16 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$16 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$16 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 11265
  HEAP32[$90 >> 2] = 0; //@line 11266
  $413 = $$0$be + 6 << 24 >> 24; //@line 11267
  HEAP8[$96 >> 0] = HEAP8[$16 + ($$0$be + 5 & 255) >> 0] | 0; //@line 11271
  $419 = HEAP32[(HEAP32[$28 >> 2] | 0) + 8 >> 2] | 0; //@line 11274
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(232) | 0; //@line 11275
  $420 = FUNCTION_TABLE_iiii[$419 & 31]($88, $392, $116) | 0; //@line 11276
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 492; //@line 11279
   $421 = $ReallocAsyncCtx4 + 4 | 0; //@line 11280
   HEAP32[$421 >> 2] = $2; //@line 11281
   $422 = $ReallocAsyncCtx4 + 8 | 0; //@line 11282
   HEAP32[$422 >> 2] = $4; //@line 11283
   $423 = $ReallocAsyncCtx4 + 12 | 0; //@line 11284
   HEAP32[$423 >> 2] = $6; //@line 11285
   $424 = $ReallocAsyncCtx4 + 16 | 0; //@line 11286
   HEAP32[$424 >> 2] = $8; //@line 11287
   $425 = $ReallocAsyncCtx4 + 20 | 0; //@line 11288
   HEAP32[$425 >> 2] = $10; //@line 11289
   $426 = $ReallocAsyncCtx4 + 24 | 0; //@line 11290
   HEAP32[$426 >> 2] = $12; //@line 11291
   $427 = $ReallocAsyncCtx4 + 28 | 0; //@line 11292
   HEAP32[$427 >> 2] = $14; //@line 11293
   $428 = $ReallocAsyncCtx4 + 32 | 0; //@line 11294
   HEAP32[$428 >> 2] = $16; //@line 11295
   $429 = $ReallocAsyncCtx4 + 36 | 0; //@line 11296
   HEAP32[$429 >> 2] = $18; //@line 11297
   $430 = $ReallocAsyncCtx4 + 40 | 0; //@line 11298
   HEAP32[$430 >> 2] = $20; //@line 11299
   $431 = $ReallocAsyncCtx4 + 44 | 0; //@line 11300
   HEAP32[$431 >> 2] = $24; //@line 11301
   $432 = $ReallocAsyncCtx4 + 48 | 0; //@line 11302
   HEAP32[$432 >> 2] = $26; //@line 11303
   $433 = $ReallocAsyncCtx4 + 52 | 0; //@line 11304
   HEAP32[$433 >> 2] = $28; //@line 11305
   $434 = $ReallocAsyncCtx4 + 56 | 0; //@line 11306
   HEAP32[$434 >> 2] = $30; //@line 11307
   $435 = $ReallocAsyncCtx4 + 60 | 0; //@line 11308
   HEAP32[$435 >> 2] = $32; //@line 11309
   $436 = $ReallocAsyncCtx4 + 64 | 0; //@line 11310
   HEAP32[$436 >> 2] = $34; //@line 11311
   $437 = $ReallocAsyncCtx4 + 68 | 0; //@line 11312
   HEAP32[$437 >> 2] = $36; //@line 11313
   $438 = $ReallocAsyncCtx4 + 72 | 0; //@line 11314
   HEAP32[$438 >> 2] = $38; //@line 11315
   $439 = $ReallocAsyncCtx4 + 76 | 0; //@line 11316
   HEAP32[$439 >> 2] = $40; //@line 11317
   $440 = $ReallocAsyncCtx4 + 80 | 0; //@line 11318
   HEAP32[$440 >> 2] = $42; //@line 11319
   $441 = $ReallocAsyncCtx4 + 84 | 0; //@line 11320
   HEAP32[$441 >> 2] = $44; //@line 11321
   $442 = $ReallocAsyncCtx4 + 88 | 0; //@line 11322
   HEAP8[$442 >> 0] = $413; //@line 11323
   $443 = $ReallocAsyncCtx4 + 92 | 0; //@line 11324
   HEAP32[$443 >> 2] = $46; //@line 11325
   $444 = $ReallocAsyncCtx4 + 96 | 0; //@line 11326
   HEAP32[$444 >> 2] = $48; //@line 11327
   $445 = $ReallocAsyncCtx4 + 100 | 0; //@line 11328
   HEAP32[$445 >> 2] = $50; //@line 11329
   $446 = $ReallocAsyncCtx4 + 104 | 0; //@line 11330
   HEAP32[$446 >> 2] = $52; //@line 11331
   $447 = $ReallocAsyncCtx4 + 108 | 0; //@line 11332
   HEAP32[$447 >> 2] = $54; //@line 11333
   $448 = $ReallocAsyncCtx4 + 112 | 0; //@line 11334
   HEAP32[$448 >> 2] = $56; //@line 11335
   $449 = $ReallocAsyncCtx4 + 116 | 0; //@line 11336
   HEAP32[$449 >> 2] = $58; //@line 11337
   $450 = $ReallocAsyncCtx4 + 120 | 0; //@line 11338
   HEAP32[$450 >> 2] = $60; //@line 11339
   $451 = $ReallocAsyncCtx4 + 124 | 0; //@line 11340
   HEAP32[$451 >> 2] = $62; //@line 11341
   $452 = $ReallocAsyncCtx4 + 128 | 0; //@line 11342
   HEAP32[$452 >> 2] = $64; //@line 11343
   $453 = $ReallocAsyncCtx4 + 132 | 0; //@line 11344
   HEAP32[$453 >> 2] = $66; //@line 11345
   $454 = $ReallocAsyncCtx4 + 136 | 0; //@line 11346
   HEAP32[$454 >> 2] = $68; //@line 11347
   $455 = $ReallocAsyncCtx4 + 140 | 0; //@line 11348
   HEAP32[$455 >> 2] = $70; //@line 11349
   $456 = $ReallocAsyncCtx4 + 144 | 0; //@line 11350
   HEAP8[$456 >> 0] = $72; //@line 11351
   $457 = $ReallocAsyncCtx4 + 148 | 0; //@line 11352
   HEAP32[$457 >> 2] = $74; //@line 11353
   $458 = $ReallocAsyncCtx4 + 152 | 0; //@line 11354
   HEAP32[$458 >> 2] = $76; //@line 11355
   $459 = $ReallocAsyncCtx4 + 156 | 0; //@line 11356
   HEAP32[$459 >> 2] = $78; //@line 11357
   $460 = $ReallocAsyncCtx4 + 160 | 0; //@line 11358
   HEAP32[$460 >> 2] = $80; //@line 11359
   $461 = $ReallocAsyncCtx4 + 164 | 0; //@line 11360
   HEAP32[$461 >> 2] = $82; //@line 11361
   $462 = $ReallocAsyncCtx4 + 168 | 0; //@line 11362
   HEAP32[$462 >> 2] = $84; //@line 11363
   $463 = $ReallocAsyncCtx4 + 172 | 0; //@line 11364
   HEAP32[$463 >> 2] = $86; //@line 11365
   $464 = $ReallocAsyncCtx4 + 176 | 0; //@line 11366
   HEAP32[$464 >> 2] = $88; //@line 11367
   $465 = $ReallocAsyncCtx4 + 180 | 0; //@line 11368
   HEAP32[$465 >> 2] = $90; //@line 11369
   $466 = $ReallocAsyncCtx4 + 184 | 0; //@line 11370
   HEAP32[$466 >> 2] = $92; //@line 11371
   $467 = $ReallocAsyncCtx4 + 188 | 0; //@line 11372
   HEAP32[$467 >> 2] = $94; //@line 11373
   $468 = $ReallocAsyncCtx4 + 192 | 0; //@line 11374
   HEAP32[$468 >> 2] = $96; //@line 11375
   $469 = $ReallocAsyncCtx4 + 196 | 0; //@line 11376
   HEAP32[$469 >> 2] = $98; //@line 11377
   $470 = $ReallocAsyncCtx4 + 200 | 0; //@line 11378
   HEAP32[$470 >> 2] = $100; //@line 11379
   $471 = $ReallocAsyncCtx4 + 204 | 0; //@line 11380
   HEAP32[$471 >> 2] = $102; //@line 11381
   $472 = $ReallocAsyncCtx4 + 208 | 0; //@line 11382
   HEAP32[$472 >> 2] = $104; //@line 11383
   $473 = $ReallocAsyncCtx4 + 212 | 0; //@line 11384
   HEAP32[$473 >> 2] = $106; //@line 11385
   $474 = $ReallocAsyncCtx4 + 216 | 0; //@line 11386
   HEAP32[$474 >> 2] = $108; //@line 11387
   $475 = $ReallocAsyncCtx4 + 220 | 0; //@line 11388
   HEAP8[$475 >> 0] = $110; //@line 11389
   $476 = $ReallocAsyncCtx4 + 221 | 0; //@line 11390
   HEAP8[$476 >> 0] = $112; //@line 11391
   $477 = $ReallocAsyncCtx4 + 224 | 0; //@line 11392
   HEAP32[$477 >> 2] = $114; //@line 11393
   $478 = $ReallocAsyncCtx4 + 228 | 0; //@line 11394
   HEAP32[$478 >> 2] = $116; //@line 11395
   sp = STACKTOP; //@line 11396
   return;
  }
  HEAP8[___async_retval >> 0] = $420; //@line 11400
  ___async_unwind = 0; //@line 11401
  HEAP32[$ReallocAsyncCtx4 >> 2] = 492; //@line 11402
  $421 = $ReallocAsyncCtx4 + 4 | 0; //@line 11403
  HEAP32[$421 >> 2] = $2; //@line 11404
  $422 = $ReallocAsyncCtx4 + 8 | 0; //@line 11405
  HEAP32[$422 >> 2] = $4; //@line 11406
  $423 = $ReallocAsyncCtx4 + 12 | 0; //@line 11407
  HEAP32[$423 >> 2] = $6; //@line 11408
  $424 = $ReallocAsyncCtx4 + 16 | 0; //@line 11409
  HEAP32[$424 >> 2] = $8; //@line 11410
  $425 = $ReallocAsyncCtx4 + 20 | 0; //@line 11411
  HEAP32[$425 >> 2] = $10; //@line 11412
  $426 = $ReallocAsyncCtx4 + 24 | 0; //@line 11413
  HEAP32[$426 >> 2] = $12; //@line 11414
  $427 = $ReallocAsyncCtx4 + 28 | 0; //@line 11415
  HEAP32[$427 >> 2] = $14; //@line 11416
  $428 = $ReallocAsyncCtx4 + 32 | 0; //@line 11417
  HEAP32[$428 >> 2] = $16; //@line 11418
  $429 = $ReallocAsyncCtx4 + 36 | 0; //@line 11419
  HEAP32[$429 >> 2] = $18; //@line 11420
  $430 = $ReallocAsyncCtx4 + 40 | 0; //@line 11421
  HEAP32[$430 >> 2] = $20; //@line 11422
  $431 = $ReallocAsyncCtx4 + 44 | 0; //@line 11423
  HEAP32[$431 >> 2] = $24; //@line 11424
  $432 = $ReallocAsyncCtx4 + 48 | 0; //@line 11425
  HEAP32[$432 >> 2] = $26; //@line 11426
  $433 = $ReallocAsyncCtx4 + 52 | 0; //@line 11427
  HEAP32[$433 >> 2] = $28; //@line 11428
  $434 = $ReallocAsyncCtx4 + 56 | 0; //@line 11429
  HEAP32[$434 >> 2] = $30; //@line 11430
  $435 = $ReallocAsyncCtx4 + 60 | 0; //@line 11431
  HEAP32[$435 >> 2] = $32; //@line 11432
  $436 = $ReallocAsyncCtx4 + 64 | 0; //@line 11433
  HEAP32[$436 >> 2] = $34; //@line 11434
  $437 = $ReallocAsyncCtx4 + 68 | 0; //@line 11435
  HEAP32[$437 >> 2] = $36; //@line 11436
  $438 = $ReallocAsyncCtx4 + 72 | 0; //@line 11437
  HEAP32[$438 >> 2] = $38; //@line 11438
  $439 = $ReallocAsyncCtx4 + 76 | 0; //@line 11439
  HEAP32[$439 >> 2] = $40; //@line 11440
  $440 = $ReallocAsyncCtx4 + 80 | 0; //@line 11441
  HEAP32[$440 >> 2] = $42; //@line 11442
  $441 = $ReallocAsyncCtx4 + 84 | 0; //@line 11443
  HEAP32[$441 >> 2] = $44; //@line 11444
  $442 = $ReallocAsyncCtx4 + 88 | 0; //@line 11445
  HEAP8[$442 >> 0] = $413; //@line 11446
  $443 = $ReallocAsyncCtx4 + 92 | 0; //@line 11447
  HEAP32[$443 >> 2] = $46; //@line 11448
  $444 = $ReallocAsyncCtx4 + 96 | 0; //@line 11449
  HEAP32[$444 >> 2] = $48; //@line 11450
  $445 = $ReallocAsyncCtx4 + 100 | 0; //@line 11451
  HEAP32[$445 >> 2] = $50; //@line 11452
  $446 = $ReallocAsyncCtx4 + 104 | 0; //@line 11453
  HEAP32[$446 >> 2] = $52; //@line 11454
  $447 = $ReallocAsyncCtx4 + 108 | 0; //@line 11455
  HEAP32[$447 >> 2] = $54; //@line 11456
  $448 = $ReallocAsyncCtx4 + 112 | 0; //@line 11457
  HEAP32[$448 >> 2] = $56; //@line 11458
  $449 = $ReallocAsyncCtx4 + 116 | 0; //@line 11459
  HEAP32[$449 >> 2] = $58; //@line 11460
  $450 = $ReallocAsyncCtx4 + 120 | 0; //@line 11461
  HEAP32[$450 >> 2] = $60; //@line 11462
  $451 = $ReallocAsyncCtx4 + 124 | 0; //@line 11463
  HEAP32[$451 >> 2] = $62; //@line 11464
  $452 = $ReallocAsyncCtx4 + 128 | 0; //@line 11465
  HEAP32[$452 >> 2] = $64; //@line 11466
  $453 = $ReallocAsyncCtx4 + 132 | 0; //@line 11467
  HEAP32[$453 >> 2] = $66; //@line 11468
  $454 = $ReallocAsyncCtx4 + 136 | 0; //@line 11469
  HEAP32[$454 >> 2] = $68; //@line 11470
  $455 = $ReallocAsyncCtx4 + 140 | 0; //@line 11471
  HEAP32[$455 >> 2] = $70; //@line 11472
  $456 = $ReallocAsyncCtx4 + 144 | 0; //@line 11473
  HEAP8[$456 >> 0] = $72; //@line 11474
  $457 = $ReallocAsyncCtx4 + 148 | 0; //@line 11475
  HEAP32[$457 >> 2] = $74; //@line 11476
  $458 = $ReallocAsyncCtx4 + 152 | 0; //@line 11477
  HEAP32[$458 >> 2] = $76; //@line 11478
  $459 = $ReallocAsyncCtx4 + 156 | 0; //@line 11479
  HEAP32[$459 >> 2] = $78; //@line 11480
  $460 = $ReallocAsyncCtx4 + 160 | 0; //@line 11481
  HEAP32[$460 >> 2] = $80; //@line 11482
  $461 = $ReallocAsyncCtx4 + 164 | 0; //@line 11483
  HEAP32[$461 >> 2] = $82; //@line 11484
  $462 = $ReallocAsyncCtx4 + 168 | 0; //@line 11485
  HEAP32[$462 >> 2] = $84; //@line 11486
  $463 = $ReallocAsyncCtx4 + 172 | 0; //@line 11487
  HEAP32[$463 >> 2] = $86; //@line 11488
  $464 = $ReallocAsyncCtx4 + 176 | 0; //@line 11489
  HEAP32[$464 >> 2] = $88; //@line 11490
  $465 = $ReallocAsyncCtx4 + 180 | 0; //@line 11491
  HEAP32[$465 >> 2] = $90; //@line 11492
  $466 = $ReallocAsyncCtx4 + 184 | 0; //@line 11493
  HEAP32[$466 >> 2] = $92; //@line 11494
  $467 = $ReallocAsyncCtx4 + 188 | 0; //@line 11495
  HEAP32[$467 >> 2] = $94; //@line 11496
  $468 = $ReallocAsyncCtx4 + 192 | 0; //@line 11497
  HEAP32[$468 >> 2] = $96; //@line 11498
  $469 = $ReallocAsyncCtx4 + 196 | 0; //@line 11499
  HEAP32[$469 >> 2] = $98; //@line 11500
  $470 = $ReallocAsyncCtx4 + 200 | 0; //@line 11501
  HEAP32[$470 >> 2] = $100; //@line 11502
  $471 = $ReallocAsyncCtx4 + 204 | 0; //@line 11503
  HEAP32[$471 >> 2] = $102; //@line 11504
  $472 = $ReallocAsyncCtx4 + 208 | 0; //@line 11505
  HEAP32[$472 >> 2] = $104; //@line 11506
  $473 = $ReallocAsyncCtx4 + 212 | 0; //@line 11507
  HEAP32[$473 >> 2] = $106; //@line 11508
  $474 = $ReallocAsyncCtx4 + 216 | 0; //@line 11509
  HEAP32[$474 >> 2] = $108; //@line 11510
  $475 = $ReallocAsyncCtx4 + 220 | 0; //@line 11511
  HEAP8[$475 >> 0] = $110; //@line 11512
  $476 = $ReallocAsyncCtx4 + 221 | 0; //@line 11513
  HEAP8[$476 >> 0] = $112; //@line 11514
  $477 = $ReallocAsyncCtx4 + 224 | 0; //@line 11515
  HEAP32[$477 >> 2] = $114; //@line 11516
  $478 = $ReallocAsyncCtx4 + 228 | 0; //@line 11517
  HEAP32[$478 >> 2] = $116; //@line 11518
  sp = STACKTOP; //@line 11519
  return;
 } else if ((label | 0) == 24) {
  $499 = $$0$be + 2 << 24 >> 24; //@line 11523
  $503 = HEAPU8[$16 + ($119 & 255) >> 0] | 0; //@line 11527
  $505 = $503 >>> 5 & 1; //@line 11530
  $507 = $503 >>> 4 & 1; //@line 11533
  $510 = HEAP32[(HEAP32[$20 >> 2] | 0) + 44 >> 2] | 0; //@line 11536
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(248) | 0; //@line 11537
  $511 = FUNCTION_TABLE_iiii[$510 & 31]($88, $507, $505) | 0; //@line 11538
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 493; //@line 11541
   $512 = $ReallocAsyncCtx5 + 4 | 0; //@line 11542
   HEAP32[$512 >> 2] = $2; //@line 11543
   $513 = $ReallocAsyncCtx5 + 8 | 0; //@line 11544
   HEAP32[$513 >> 2] = $4; //@line 11545
   $514 = $ReallocAsyncCtx5 + 12 | 0; //@line 11546
   HEAP32[$514 >> 2] = $6; //@line 11547
   $515 = $ReallocAsyncCtx5 + 16 | 0; //@line 11548
   HEAP32[$515 >> 2] = $8; //@line 11549
   $516 = $ReallocAsyncCtx5 + 20 | 0; //@line 11550
   HEAP32[$516 >> 2] = $10; //@line 11551
   $517 = $ReallocAsyncCtx5 + 24 | 0; //@line 11552
   HEAP32[$517 >> 2] = $12; //@line 11553
   $518 = $ReallocAsyncCtx5 + 28 | 0; //@line 11554
   HEAP32[$518 >> 2] = $14; //@line 11555
   $519 = $ReallocAsyncCtx5 + 32 | 0; //@line 11556
   HEAP32[$519 >> 2] = $16; //@line 11557
   $520 = $ReallocAsyncCtx5 + 36 | 0; //@line 11558
   HEAP32[$520 >> 2] = $18; //@line 11559
   $521 = $ReallocAsyncCtx5 + 40 | 0; //@line 11560
   HEAP32[$521 >> 2] = $20; //@line 11561
   $522 = $ReallocAsyncCtx5 + 44 | 0; //@line 11562
   HEAP32[$522 >> 2] = $503; //@line 11563
   $523 = $ReallocAsyncCtx5 + 48 | 0; //@line 11564
   HEAP32[$523 >> 2] = $24; //@line 11565
   $524 = $ReallocAsyncCtx5 + 52 | 0; //@line 11566
   HEAP32[$524 >> 2] = $26; //@line 11567
   $525 = $ReallocAsyncCtx5 + 56 | 0; //@line 11568
   HEAP32[$525 >> 2] = $28; //@line 11569
   $526 = $ReallocAsyncCtx5 + 60 | 0; //@line 11570
   HEAP32[$526 >> 2] = $30; //@line 11571
   $527 = $ReallocAsyncCtx5 + 64 | 0; //@line 11572
   HEAP32[$527 >> 2] = $32; //@line 11573
   $528 = $ReallocAsyncCtx5 + 68 | 0; //@line 11574
   HEAP32[$528 >> 2] = $34; //@line 11575
   $529 = $ReallocAsyncCtx5 + 72 | 0; //@line 11576
   HEAP32[$529 >> 2] = $36; //@line 11577
   $530 = $ReallocAsyncCtx5 + 76 | 0; //@line 11578
   HEAP32[$530 >> 2] = $38; //@line 11579
   $531 = $ReallocAsyncCtx5 + 80 | 0; //@line 11580
   HEAP32[$531 >> 2] = $40; //@line 11581
   $532 = $ReallocAsyncCtx5 + 84 | 0; //@line 11582
   HEAP32[$532 >> 2] = $42; //@line 11583
   $533 = $ReallocAsyncCtx5 + 88 | 0; //@line 11584
   HEAP32[$533 >> 2] = $44; //@line 11585
   $534 = $ReallocAsyncCtx5 + 92 | 0; //@line 11586
   HEAP32[$534 >> 2] = $46; //@line 11587
   $535 = $ReallocAsyncCtx5 + 96 | 0; //@line 11588
   HEAP32[$535 >> 2] = $48; //@line 11589
   $536 = $ReallocAsyncCtx5 + 100 | 0; //@line 11590
   HEAP32[$536 >> 2] = $50; //@line 11591
   $537 = $ReallocAsyncCtx5 + 104 | 0; //@line 11592
   HEAP8[$537 >> 0] = $499; //@line 11593
   $538 = $ReallocAsyncCtx5 + 108 | 0; //@line 11594
   HEAP32[$538 >> 2] = $52; //@line 11595
   $539 = $ReallocAsyncCtx5 + 112 | 0; //@line 11596
   HEAP32[$539 >> 2] = $54; //@line 11597
   $540 = $ReallocAsyncCtx5 + 116 | 0; //@line 11598
   HEAP32[$540 >> 2] = $56; //@line 11599
   $541 = $ReallocAsyncCtx5 + 120 | 0; //@line 11600
   HEAP32[$541 >> 2] = $58; //@line 11601
   $542 = $ReallocAsyncCtx5 + 124 | 0; //@line 11602
   HEAP8[$542 >> 0] = $505; //@line 11603
   $543 = $ReallocAsyncCtx5 + 128 | 0; //@line 11604
   HEAP32[$543 >> 2] = $60; //@line 11605
   $544 = $ReallocAsyncCtx5 + 132 | 0; //@line 11606
   HEAP32[$544 >> 2] = $62; //@line 11607
   $545 = $ReallocAsyncCtx5 + 136 | 0; //@line 11608
   HEAP32[$545 >> 2] = $64; //@line 11609
   $546 = $ReallocAsyncCtx5 + 140 | 0; //@line 11610
   HEAP32[$546 >> 2] = $66; //@line 11611
   $547 = $ReallocAsyncCtx5 + 144 | 0; //@line 11612
   HEAP32[$547 >> 2] = $68; //@line 11613
   $548 = $ReallocAsyncCtx5 + 148 | 0; //@line 11614
   HEAP32[$548 >> 2] = $70; //@line 11615
   $549 = $ReallocAsyncCtx5 + 152 | 0; //@line 11616
   HEAP8[$549 >> 0] = $72; //@line 11617
   $550 = $ReallocAsyncCtx5 + 156 | 0; //@line 11618
   HEAP32[$550 >> 2] = $74; //@line 11619
   $551 = $ReallocAsyncCtx5 + 160 | 0; //@line 11620
   HEAP8[$551 >> 0] = $507; //@line 11621
   $552 = $ReallocAsyncCtx5 + 164 | 0; //@line 11622
   HEAP32[$552 >> 2] = $76; //@line 11623
   $553 = $ReallocAsyncCtx5 + 168 | 0; //@line 11624
   HEAP32[$553 >> 2] = $78; //@line 11625
   $554 = $ReallocAsyncCtx5 + 172 | 0; //@line 11626
   HEAP32[$554 >> 2] = $80; //@line 11627
   $555 = $ReallocAsyncCtx5 + 176 | 0; //@line 11628
   HEAP32[$555 >> 2] = $82; //@line 11629
   $556 = $ReallocAsyncCtx5 + 180 | 0; //@line 11630
   HEAP32[$556 >> 2] = $84; //@line 11631
   $557 = $ReallocAsyncCtx5 + 184 | 0; //@line 11632
   HEAP32[$557 >> 2] = $86; //@line 11633
   $558 = $ReallocAsyncCtx5 + 188 | 0; //@line 11634
   HEAP32[$558 >> 2] = $$0107$be; //@line 11635
   $559 = $ReallocAsyncCtx5 + 192 | 0; //@line 11636
   HEAP32[$559 >> 2] = $88; //@line 11637
   $560 = $ReallocAsyncCtx5 + 196 | 0; //@line 11638
   HEAP32[$560 >> 2] = $90; //@line 11639
   $561 = $ReallocAsyncCtx5 + 200 | 0; //@line 11640
   HEAP32[$561 >> 2] = $92; //@line 11641
   $562 = $ReallocAsyncCtx5 + 204 | 0; //@line 11642
   HEAP32[$562 >> 2] = $94; //@line 11643
   $563 = $ReallocAsyncCtx5 + 208 | 0; //@line 11644
   HEAP32[$563 >> 2] = $96; //@line 11645
   $564 = $ReallocAsyncCtx5 + 212 | 0; //@line 11646
   HEAP32[$564 >> 2] = $98; //@line 11647
   $565 = $ReallocAsyncCtx5 + 216 | 0; //@line 11648
   HEAP32[$565 >> 2] = $100; //@line 11649
   $566 = $ReallocAsyncCtx5 + 220 | 0; //@line 11650
   HEAP32[$566 >> 2] = $102; //@line 11651
   $567 = $ReallocAsyncCtx5 + 224 | 0; //@line 11652
   HEAP32[$567 >> 2] = $104; //@line 11653
   $568 = $ReallocAsyncCtx5 + 228 | 0; //@line 11654
   HEAP32[$568 >> 2] = $106; //@line 11655
   $569 = $ReallocAsyncCtx5 + 232 | 0; //@line 11656
   HEAP32[$569 >> 2] = $108; //@line 11657
   $570 = $ReallocAsyncCtx5 + 236 | 0; //@line 11658
   HEAP8[$570 >> 0] = $110; //@line 11659
   $571 = $ReallocAsyncCtx5 + 237 | 0; //@line 11660
   HEAP8[$571 >> 0] = $112; //@line 11661
   $572 = $ReallocAsyncCtx5 + 240 | 0; //@line 11662
   HEAP32[$572 >> 2] = $114; //@line 11663
   $573 = $ReallocAsyncCtx5 + 244 | 0; //@line 11664
   HEAP32[$573 >> 2] = $116; //@line 11665
   sp = STACKTOP; //@line 11666
   return;
  }
  HEAP8[___async_retval >> 0] = $511 & 1; //@line 11671
  ___async_unwind = 0; //@line 11672
  HEAP32[$ReallocAsyncCtx5 >> 2] = 493; //@line 11673
  $512 = $ReallocAsyncCtx5 + 4 | 0; //@line 11674
  HEAP32[$512 >> 2] = $2; //@line 11675
  $513 = $ReallocAsyncCtx5 + 8 | 0; //@line 11676
  HEAP32[$513 >> 2] = $4; //@line 11677
  $514 = $ReallocAsyncCtx5 + 12 | 0; //@line 11678
  HEAP32[$514 >> 2] = $6; //@line 11679
  $515 = $ReallocAsyncCtx5 + 16 | 0; //@line 11680
  HEAP32[$515 >> 2] = $8; //@line 11681
  $516 = $ReallocAsyncCtx5 + 20 | 0; //@line 11682
  HEAP32[$516 >> 2] = $10; //@line 11683
  $517 = $ReallocAsyncCtx5 + 24 | 0; //@line 11684
  HEAP32[$517 >> 2] = $12; //@line 11685
  $518 = $ReallocAsyncCtx5 + 28 | 0; //@line 11686
  HEAP32[$518 >> 2] = $14; //@line 11687
  $519 = $ReallocAsyncCtx5 + 32 | 0; //@line 11688
  HEAP32[$519 >> 2] = $16; //@line 11689
  $520 = $ReallocAsyncCtx5 + 36 | 0; //@line 11690
  HEAP32[$520 >> 2] = $18; //@line 11691
  $521 = $ReallocAsyncCtx5 + 40 | 0; //@line 11692
  HEAP32[$521 >> 2] = $20; //@line 11693
  $522 = $ReallocAsyncCtx5 + 44 | 0; //@line 11694
  HEAP32[$522 >> 2] = $503; //@line 11695
  $523 = $ReallocAsyncCtx5 + 48 | 0; //@line 11696
  HEAP32[$523 >> 2] = $24; //@line 11697
  $524 = $ReallocAsyncCtx5 + 52 | 0; //@line 11698
  HEAP32[$524 >> 2] = $26; //@line 11699
  $525 = $ReallocAsyncCtx5 + 56 | 0; //@line 11700
  HEAP32[$525 >> 2] = $28; //@line 11701
  $526 = $ReallocAsyncCtx5 + 60 | 0; //@line 11702
  HEAP32[$526 >> 2] = $30; //@line 11703
  $527 = $ReallocAsyncCtx5 + 64 | 0; //@line 11704
  HEAP32[$527 >> 2] = $32; //@line 11705
  $528 = $ReallocAsyncCtx5 + 68 | 0; //@line 11706
  HEAP32[$528 >> 2] = $34; //@line 11707
  $529 = $ReallocAsyncCtx5 + 72 | 0; //@line 11708
  HEAP32[$529 >> 2] = $36; //@line 11709
  $530 = $ReallocAsyncCtx5 + 76 | 0; //@line 11710
  HEAP32[$530 >> 2] = $38; //@line 11711
  $531 = $ReallocAsyncCtx5 + 80 | 0; //@line 11712
  HEAP32[$531 >> 2] = $40; //@line 11713
  $532 = $ReallocAsyncCtx5 + 84 | 0; //@line 11714
  HEAP32[$532 >> 2] = $42; //@line 11715
  $533 = $ReallocAsyncCtx5 + 88 | 0; //@line 11716
  HEAP32[$533 >> 2] = $44; //@line 11717
  $534 = $ReallocAsyncCtx5 + 92 | 0; //@line 11718
  HEAP32[$534 >> 2] = $46; //@line 11719
  $535 = $ReallocAsyncCtx5 + 96 | 0; //@line 11720
  HEAP32[$535 >> 2] = $48; //@line 11721
  $536 = $ReallocAsyncCtx5 + 100 | 0; //@line 11722
  HEAP32[$536 >> 2] = $50; //@line 11723
  $537 = $ReallocAsyncCtx5 + 104 | 0; //@line 11724
  HEAP8[$537 >> 0] = $499; //@line 11725
  $538 = $ReallocAsyncCtx5 + 108 | 0; //@line 11726
  HEAP32[$538 >> 2] = $52; //@line 11727
  $539 = $ReallocAsyncCtx5 + 112 | 0; //@line 11728
  HEAP32[$539 >> 2] = $54; //@line 11729
  $540 = $ReallocAsyncCtx5 + 116 | 0; //@line 11730
  HEAP32[$540 >> 2] = $56; //@line 11731
  $541 = $ReallocAsyncCtx5 + 120 | 0; //@line 11732
  HEAP32[$541 >> 2] = $58; //@line 11733
  $542 = $ReallocAsyncCtx5 + 124 | 0; //@line 11734
  HEAP8[$542 >> 0] = $505; //@line 11735
  $543 = $ReallocAsyncCtx5 + 128 | 0; //@line 11736
  HEAP32[$543 >> 2] = $60; //@line 11737
  $544 = $ReallocAsyncCtx5 + 132 | 0; //@line 11738
  HEAP32[$544 >> 2] = $62; //@line 11739
  $545 = $ReallocAsyncCtx5 + 136 | 0; //@line 11740
  HEAP32[$545 >> 2] = $64; //@line 11741
  $546 = $ReallocAsyncCtx5 + 140 | 0; //@line 11742
  HEAP32[$546 >> 2] = $66; //@line 11743
  $547 = $ReallocAsyncCtx5 + 144 | 0; //@line 11744
  HEAP32[$547 >> 2] = $68; //@line 11745
  $548 = $ReallocAsyncCtx5 + 148 | 0; //@line 11746
  HEAP32[$548 >> 2] = $70; //@line 11747
  $549 = $ReallocAsyncCtx5 + 152 | 0; //@line 11748
  HEAP8[$549 >> 0] = $72; //@line 11749
  $550 = $ReallocAsyncCtx5 + 156 | 0; //@line 11750
  HEAP32[$550 >> 2] = $74; //@line 11751
  $551 = $ReallocAsyncCtx5 + 160 | 0; //@line 11752
  HEAP8[$551 >> 0] = $507; //@line 11753
  $552 = $ReallocAsyncCtx5 + 164 | 0; //@line 11754
  HEAP32[$552 >> 2] = $76; //@line 11755
  $553 = $ReallocAsyncCtx5 + 168 | 0; //@line 11756
  HEAP32[$553 >> 2] = $78; //@line 11757
  $554 = $ReallocAsyncCtx5 + 172 | 0; //@line 11758
  HEAP32[$554 >> 2] = $80; //@line 11759
  $555 = $ReallocAsyncCtx5 + 176 | 0; //@line 11760
  HEAP32[$555 >> 2] = $82; //@line 11761
  $556 = $ReallocAsyncCtx5 + 180 | 0; //@line 11762
  HEAP32[$556 >> 2] = $84; //@line 11763
  $557 = $ReallocAsyncCtx5 + 184 | 0; //@line 11764
  HEAP32[$557 >> 2] = $86; //@line 11765
  $558 = $ReallocAsyncCtx5 + 188 | 0; //@line 11766
  HEAP32[$558 >> 2] = $$0107$be; //@line 11767
  $559 = $ReallocAsyncCtx5 + 192 | 0; //@line 11768
  HEAP32[$559 >> 2] = $88; //@line 11769
  $560 = $ReallocAsyncCtx5 + 196 | 0; //@line 11770
  HEAP32[$560 >> 2] = $90; //@line 11771
  $561 = $ReallocAsyncCtx5 + 200 | 0; //@line 11772
  HEAP32[$561 >> 2] = $92; //@line 11773
  $562 = $ReallocAsyncCtx5 + 204 | 0; //@line 11774
  HEAP32[$562 >> 2] = $94; //@line 11775
  $563 = $ReallocAsyncCtx5 + 208 | 0; //@line 11776
  HEAP32[$563 >> 2] = $96; //@line 11777
  $564 = $ReallocAsyncCtx5 + 212 | 0; //@line 11778
  HEAP32[$564 >> 2] = $98; //@line 11779
  $565 = $ReallocAsyncCtx5 + 216 | 0; //@line 11780
  HEAP32[$565 >> 2] = $100; //@line 11781
  $566 = $ReallocAsyncCtx5 + 220 | 0; //@line 11782
  HEAP32[$566 >> 2] = $102; //@line 11783
  $567 = $ReallocAsyncCtx5 + 224 | 0; //@line 11784
  HEAP32[$567 >> 2] = $104; //@line 11785
  $568 = $ReallocAsyncCtx5 + 228 | 0; //@line 11786
  HEAP32[$568 >> 2] = $106; //@line 11787
  $569 = $ReallocAsyncCtx5 + 232 | 0; //@line 11788
  HEAP32[$569 >> 2] = $108; //@line 11789
  $570 = $ReallocAsyncCtx5 + 236 | 0; //@line 11790
  HEAP8[$570 >> 0] = $110; //@line 11791
  $571 = $ReallocAsyncCtx5 + 237 | 0; //@line 11792
  HEAP8[$571 >> 0] = $112; //@line 11793
  $572 = $ReallocAsyncCtx5 + 240 | 0; //@line 11794
  HEAP32[$572 >> 2] = $114; //@line 11795
  $573 = $ReallocAsyncCtx5 + 244 | 0; //@line 11796
  HEAP32[$573 >> 2] = $116; //@line 11797
  sp = STACKTOP; //@line 11798
  return;
 } else if ((label | 0) == 27) {
  $578 = HEAP8[$16 + ($119 & 255) >> 0] | 0; //@line 11805
  $591 = $$0$be + 5 << 24 >> 24; //@line 11818
  $598 = (HEAPU8[$16 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$16 + ($$0$be + 2 & 255) >> 0] | HEAPU8[$16 + ($$0$be + 4 & 255) >> 0] << 16) * 100 | 0; //@line 11825
  $601 = HEAP32[(HEAP32[$38 >> 2] | 0) + 48 >> 2] | 0; //@line 11828
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(232) | 0; //@line 11829
  $602 = FUNCTION_TABLE_iiii[$601 & 31]($88, $578, $598) | 0; //@line 11830
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 494; //@line 11833
   $603 = $ReallocAsyncCtx6 + 4 | 0; //@line 11834
   HEAP32[$603 >> 2] = $2; //@line 11835
   $604 = $ReallocAsyncCtx6 + 8 | 0; //@line 11836
   HEAP32[$604 >> 2] = $4; //@line 11837
   $605 = $ReallocAsyncCtx6 + 12 | 0; //@line 11838
   HEAP32[$605 >> 2] = $6; //@line 11839
   $606 = $ReallocAsyncCtx6 + 16 | 0; //@line 11840
   HEAP32[$606 >> 2] = $8; //@line 11841
   $607 = $ReallocAsyncCtx6 + 20 | 0; //@line 11842
   HEAP32[$607 >> 2] = $10; //@line 11843
   $608 = $ReallocAsyncCtx6 + 24 | 0; //@line 11844
   HEAP32[$608 >> 2] = $12; //@line 11845
   $609 = $ReallocAsyncCtx6 + 28 | 0; //@line 11846
   HEAP32[$609 >> 2] = $14; //@line 11847
   $610 = $ReallocAsyncCtx6 + 32 | 0; //@line 11848
   HEAP32[$610 >> 2] = $16; //@line 11849
   $611 = $ReallocAsyncCtx6 + 36 | 0; //@line 11850
   HEAP32[$611 >> 2] = $18; //@line 11851
   $612 = $ReallocAsyncCtx6 + 40 | 0; //@line 11852
   HEAP32[$612 >> 2] = $20; //@line 11853
   $613 = $ReallocAsyncCtx6 + 44 | 0; //@line 11854
   HEAP8[$613 >> 0] = $591; //@line 11855
   $614 = $ReallocAsyncCtx6 + 48 | 0; //@line 11856
   HEAP32[$614 >> 2] = $24; //@line 11857
   $615 = $ReallocAsyncCtx6 + 52 | 0; //@line 11858
   HEAP32[$615 >> 2] = $26; //@line 11859
   $616 = $ReallocAsyncCtx6 + 56 | 0; //@line 11860
   HEAP32[$616 >> 2] = $28; //@line 11861
   $617 = $ReallocAsyncCtx6 + 60 | 0; //@line 11862
   HEAP32[$617 >> 2] = $30; //@line 11863
   $618 = $ReallocAsyncCtx6 + 64 | 0; //@line 11864
   HEAP32[$618 >> 2] = $32; //@line 11865
   $619 = $ReallocAsyncCtx6 + 68 | 0; //@line 11866
   HEAP32[$619 >> 2] = $34; //@line 11867
   $620 = $ReallocAsyncCtx6 + 72 | 0; //@line 11868
   HEAP32[$620 >> 2] = $36; //@line 11869
   $621 = $ReallocAsyncCtx6 + 76 | 0; //@line 11870
   HEAP32[$621 >> 2] = $38; //@line 11871
   $622 = $ReallocAsyncCtx6 + 80 | 0; //@line 11872
   HEAP32[$622 >> 2] = $40; //@line 11873
   $623 = $ReallocAsyncCtx6 + 84 | 0; //@line 11874
   HEAP32[$623 >> 2] = $42; //@line 11875
   $624 = $ReallocAsyncCtx6 + 88 | 0; //@line 11876
   HEAP32[$624 >> 2] = $44; //@line 11877
   $625 = $ReallocAsyncCtx6 + 92 | 0; //@line 11878
   HEAP32[$625 >> 2] = $46; //@line 11879
   $626 = $ReallocAsyncCtx6 + 96 | 0; //@line 11880
   HEAP32[$626 >> 2] = $48; //@line 11881
   $627 = $ReallocAsyncCtx6 + 100 | 0; //@line 11882
   HEAP32[$627 >> 2] = $50; //@line 11883
   $628 = $ReallocAsyncCtx6 + 104 | 0; //@line 11884
   HEAP32[$628 >> 2] = $52; //@line 11885
   $629 = $ReallocAsyncCtx6 + 108 | 0; //@line 11886
   HEAP32[$629 >> 2] = $54; //@line 11887
   $630 = $ReallocAsyncCtx6 + 112 | 0; //@line 11888
   HEAP32[$630 >> 2] = $56; //@line 11889
   $631 = $ReallocAsyncCtx6 + 116 | 0; //@line 11890
   HEAP32[$631 >> 2] = $58; //@line 11891
   $632 = $ReallocAsyncCtx6 + 120 | 0; //@line 11892
   HEAP32[$632 >> 2] = $60; //@line 11893
   $633 = $ReallocAsyncCtx6 + 124 | 0; //@line 11894
   HEAP32[$633 >> 2] = $62; //@line 11895
   $634 = $ReallocAsyncCtx6 + 128 | 0; //@line 11896
   HEAP32[$634 >> 2] = $64; //@line 11897
   $635 = $ReallocAsyncCtx6 + 132 | 0; //@line 11898
   HEAP32[$635 >> 2] = $66; //@line 11899
   $636 = $ReallocAsyncCtx6 + 136 | 0; //@line 11900
   HEAP32[$636 >> 2] = $68; //@line 11901
   $637 = $ReallocAsyncCtx6 + 140 | 0; //@line 11902
   HEAP32[$637 >> 2] = $70; //@line 11903
   $638 = $ReallocAsyncCtx6 + 144 | 0; //@line 11904
   HEAP8[$638 >> 0] = $72; //@line 11905
   $639 = $ReallocAsyncCtx6 + 148 | 0; //@line 11906
   HEAP32[$639 >> 2] = $74; //@line 11907
   $640 = $ReallocAsyncCtx6 + 152 | 0; //@line 11908
   HEAP32[$640 >> 2] = $76; //@line 11909
   $641 = $ReallocAsyncCtx6 + 156 | 0; //@line 11910
   HEAP32[$641 >> 2] = $78; //@line 11911
   $642 = $ReallocAsyncCtx6 + 160 | 0; //@line 11912
   HEAP32[$642 >> 2] = $80; //@line 11913
   $643 = $ReallocAsyncCtx6 + 164 | 0; //@line 11914
   HEAP32[$643 >> 2] = $82; //@line 11915
   $644 = $ReallocAsyncCtx6 + 168 | 0; //@line 11916
   HEAP32[$644 >> 2] = $84; //@line 11917
   $645 = $ReallocAsyncCtx6 + 172 | 0; //@line 11918
   HEAP32[$645 >> 2] = $86; //@line 11919
   $646 = $ReallocAsyncCtx6 + 176 | 0; //@line 11920
   HEAP32[$646 >> 2] = $88; //@line 11921
   $647 = $ReallocAsyncCtx6 + 180 | 0; //@line 11922
   HEAP32[$647 >> 2] = $90; //@line 11923
   $648 = $ReallocAsyncCtx6 + 184 | 0; //@line 11924
   HEAP32[$648 >> 2] = $92; //@line 11925
   $649 = $ReallocAsyncCtx6 + 188 | 0; //@line 11926
   HEAP32[$649 >> 2] = $94; //@line 11927
   $650 = $ReallocAsyncCtx6 + 192 | 0; //@line 11928
   HEAP32[$650 >> 2] = $96; //@line 11929
   $651 = $ReallocAsyncCtx6 + 196 | 0; //@line 11930
   HEAP32[$651 >> 2] = $98; //@line 11931
   $652 = $ReallocAsyncCtx6 + 200 | 0; //@line 11932
   HEAP32[$652 >> 2] = $100; //@line 11933
   $653 = $ReallocAsyncCtx6 + 204 | 0; //@line 11934
   HEAP32[$653 >> 2] = $102; //@line 11935
   $654 = $ReallocAsyncCtx6 + 208 | 0; //@line 11936
   HEAP32[$654 >> 2] = $104; //@line 11937
   $655 = $ReallocAsyncCtx6 + 212 | 0; //@line 11938
   HEAP32[$655 >> 2] = $106; //@line 11939
   $656 = $ReallocAsyncCtx6 + 216 | 0; //@line 11940
   HEAP32[$656 >> 2] = $108; //@line 11941
   $657 = $ReallocAsyncCtx6 + 220 | 0; //@line 11942
   HEAP8[$657 >> 0] = $110; //@line 11943
   $658 = $ReallocAsyncCtx6 + 221 | 0; //@line 11944
   HEAP8[$658 >> 0] = $112; //@line 11945
   $659 = $ReallocAsyncCtx6 + 224 | 0; //@line 11946
   HEAP32[$659 >> 2] = $114; //@line 11947
   $660 = $ReallocAsyncCtx6 + 228 | 0; //@line 11948
   HEAP32[$660 >> 2] = $116; //@line 11949
   sp = STACKTOP; //@line 11950
   return;
  }
  HEAP8[___async_retval >> 0] = $602; //@line 11954
  ___async_unwind = 0; //@line 11955
  HEAP32[$ReallocAsyncCtx6 >> 2] = 494; //@line 11956
  $603 = $ReallocAsyncCtx6 + 4 | 0; //@line 11957
  HEAP32[$603 >> 2] = $2; //@line 11958
  $604 = $ReallocAsyncCtx6 + 8 | 0; //@line 11959
  HEAP32[$604 >> 2] = $4; //@line 11960
  $605 = $ReallocAsyncCtx6 + 12 | 0; //@line 11961
  HEAP32[$605 >> 2] = $6; //@line 11962
  $606 = $ReallocAsyncCtx6 + 16 | 0; //@line 11963
  HEAP32[$606 >> 2] = $8; //@line 11964
  $607 = $ReallocAsyncCtx6 + 20 | 0; //@line 11965
  HEAP32[$607 >> 2] = $10; //@line 11966
  $608 = $ReallocAsyncCtx6 + 24 | 0; //@line 11967
  HEAP32[$608 >> 2] = $12; //@line 11968
  $609 = $ReallocAsyncCtx6 + 28 | 0; //@line 11969
  HEAP32[$609 >> 2] = $14; //@line 11970
  $610 = $ReallocAsyncCtx6 + 32 | 0; //@line 11971
  HEAP32[$610 >> 2] = $16; //@line 11972
  $611 = $ReallocAsyncCtx6 + 36 | 0; //@line 11973
  HEAP32[$611 >> 2] = $18; //@line 11974
  $612 = $ReallocAsyncCtx6 + 40 | 0; //@line 11975
  HEAP32[$612 >> 2] = $20; //@line 11976
  $613 = $ReallocAsyncCtx6 + 44 | 0; //@line 11977
  HEAP8[$613 >> 0] = $591; //@line 11978
  $614 = $ReallocAsyncCtx6 + 48 | 0; //@line 11979
  HEAP32[$614 >> 2] = $24; //@line 11980
  $615 = $ReallocAsyncCtx6 + 52 | 0; //@line 11981
  HEAP32[$615 >> 2] = $26; //@line 11982
  $616 = $ReallocAsyncCtx6 + 56 | 0; //@line 11983
  HEAP32[$616 >> 2] = $28; //@line 11984
  $617 = $ReallocAsyncCtx6 + 60 | 0; //@line 11985
  HEAP32[$617 >> 2] = $30; //@line 11986
  $618 = $ReallocAsyncCtx6 + 64 | 0; //@line 11987
  HEAP32[$618 >> 2] = $32; //@line 11988
  $619 = $ReallocAsyncCtx6 + 68 | 0; //@line 11989
  HEAP32[$619 >> 2] = $34; //@line 11990
  $620 = $ReallocAsyncCtx6 + 72 | 0; //@line 11991
  HEAP32[$620 >> 2] = $36; //@line 11992
  $621 = $ReallocAsyncCtx6 + 76 | 0; //@line 11993
  HEAP32[$621 >> 2] = $38; //@line 11994
  $622 = $ReallocAsyncCtx6 + 80 | 0; //@line 11995
  HEAP32[$622 >> 2] = $40; //@line 11996
  $623 = $ReallocAsyncCtx6 + 84 | 0; //@line 11997
  HEAP32[$623 >> 2] = $42; //@line 11998
  $624 = $ReallocAsyncCtx6 + 88 | 0; //@line 11999
  HEAP32[$624 >> 2] = $44; //@line 12000
  $625 = $ReallocAsyncCtx6 + 92 | 0; //@line 12001
  HEAP32[$625 >> 2] = $46; //@line 12002
  $626 = $ReallocAsyncCtx6 + 96 | 0; //@line 12003
  HEAP32[$626 >> 2] = $48; //@line 12004
  $627 = $ReallocAsyncCtx6 + 100 | 0; //@line 12005
  HEAP32[$627 >> 2] = $50; //@line 12006
  $628 = $ReallocAsyncCtx6 + 104 | 0; //@line 12007
  HEAP32[$628 >> 2] = $52; //@line 12008
  $629 = $ReallocAsyncCtx6 + 108 | 0; //@line 12009
  HEAP32[$629 >> 2] = $54; //@line 12010
  $630 = $ReallocAsyncCtx6 + 112 | 0; //@line 12011
  HEAP32[$630 >> 2] = $56; //@line 12012
  $631 = $ReallocAsyncCtx6 + 116 | 0; //@line 12013
  HEAP32[$631 >> 2] = $58; //@line 12014
  $632 = $ReallocAsyncCtx6 + 120 | 0; //@line 12015
  HEAP32[$632 >> 2] = $60; //@line 12016
  $633 = $ReallocAsyncCtx6 + 124 | 0; //@line 12017
  HEAP32[$633 >> 2] = $62; //@line 12018
  $634 = $ReallocAsyncCtx6 + 128 | 0; //@line 12019
  HEAP32[$634 >> 2] = $64; //@line 12020
  $635 = $ReallocAsyncCtx6 + 132 | 0; //@line 12021
  HEAP32[$635 >> 2] = $66; //@line 12022
  $636 = $ReallocAsyncCtx6 + 136 | 0; //@line 12023
  HEAP32[$636 >> 2] = $68; //@line 12024
  $637 = $ReallocAsyncCtx6 + 140 | 0; //@line 12025
  HEAP32[$637 >> 2] = $70; //@line 12026
  $638 = $ReallocAsyncCtx6 + 144 | 0; //@line 12027
  HEAP8[$638 >> 0] = $72; //@line 12028
  $639 = $ReallocAsyncCtx6 + 148 | 0; //@line 12029
  HEAP32[$639 >> 2] = $74; //@line 12030
  $640 = $ReallocAsyncCtx6 + 152 | 0; //@line 12031
  HEAP32[$640 >> 2] = $76; //@line 12032
  $641 = $ReallocAsyncCtx6 + 156 | 0; //@line 12033
  HEAP32[$641 >> 2] = $78; //@line 12034
  $642 = $ReallocAsyncCtx6 + 160 | 0; //@line 12035
  HEAP32[$642 >> 2] = $80; //@line 12036
  $643 = $ReallocAsyncCtx6 + 164 | 0; //@line 12037
  HEAP32[$643 >> 2] = $82; //@line 12038
  $644 = $ReallocAsyncCtx6 + 168 | 0; //@line 12039
  HEAP32[$644 >> 2] = $84; //@line 12040
  $645 = $ReallocAsyncCtx6 + 172 | 0; //@line 12041
  HEAP32[$645 >> 2] = $86; //@line 12042
  $646 = $ReallocAsyncCtx6 + 176 | 0; //@line 12043
  HEAP32[$646 >> 2] = $88; //@line 12044
  $647 = $ReallocAsyncCtx6 + 180 | 0; //@line 12045
  HEAP32[$647 >> 2] = $90; //@line 12046
  $648 = $ReallocAsyncCtx6 + 184 | 0; //@line 12047
  HEAP32[$648 >> 2] = $92; //@line 12048
  $649 = $ReallocAsyncCtx6 + 188 | 0; //@line 12049
  HEAP32[$649 >> 2] = $94; //@line 12050
  $650 = $ReallocAsyncCtx6 + 192 | 0; //@line 12051
  HEAP32[$650 >> 2] = $96; //@line 12052
  $651 = $ReallocAsyncCtx6 + 196 | 0; //@line 12053
  HEAP32[$651 >> 2] = $98; //@line 12054
  $652 = $ReallocAsyncCtx6 + 200 | 0; //@line 12055
  HEAP32[$652 >> 2] = $100; //@line 12056
  $653 = $ReallocAsyncCtx6 + 204 | 0; //@line 12057
  HEAP32[$653 >> 2] = $102; //@line 12058
  $654 = $ReallocAsyncCtx6 + 208 | 0; //@line 12059
  HEAP32[$654 >> 2] = $104; //@line 12060
  $655 = $ReallocAsyncCtx6 + 212 | 0; //@line 12061
  HEAP32[$655 >> 2] = $106; //@line 12062
  $656 = $ReallocAsyncCtx6 + 216 | 0; //@line 12063
  HEAP32[$656 >> 2] = $108; //@line 12064
  $657 = $ReallocAsyncCtx6 + 220 | 0; //@line 12065
  HEAP8[$657 >> 0] = $110; //@line 12066
  $658 = $ReallocAsyncCtx6 + 221 | 0; //@line 12067
  HEAP8[$658 >> 0] = $112; //@line 12068
  $659 = $ReallocAsyncCtx6 + 224 | 0; //@line 12069
  HEAP32[$659 >> 2] = $114; //@line 12070
  $660 = $ReallocAsyncCtx6 + 228 | 0; //@line 12071
  HEAP32[$660 >> 2] = $116; //@line 12072
  sp = STACKTOP; //@line 12073
  return;
 } else if ((label | 0) == 32) {
  HEAP32[___async_retval >> 2] = $$0107$be; //@line 12078
  return;
 }
}
function __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_211($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0107$be = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $127 = 0, $138 = 0, $139 = 0, $14 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $212 = 0, $215 = 0, $222 = 0, $223 = 0, $229 = 0, $24 = 0, $248 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $319 = 0, $32 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $385 = 0, $386 = 0, $4 = 0, $40 = 0, $400 = 0, $42 = 0, $421 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $489 = 0, $493 = 0, $497 = 0, $50 = 0, $502 = 0, $503 = 0, $507 = 0, $511 = 0, $513 = 0, $515 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $583 = 0, $590 = 0, $591 = 0, $598 = 0, $6 = 0, $60 = 0, $611 = 0, $618 = 0, $62 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8138
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8140
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8142
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8144
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 8146
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 8148
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 8150
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 8152
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 8154
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 8156
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 8158
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 8162
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 8164
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 8166
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 8168
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 8170
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 8172
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 8174
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 8176
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 8178
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 8180
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 8182
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 8184
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 8186
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 8188
 $52 = HEAP8[$0 + 104 >> 0] | 0; //@line 8190
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 8192
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 8194
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 8196
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 8198
 $62 = HEAP8[$0 + 124 >> 0] | 0; //@line 8200
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 8202
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 8204
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 8206
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 8208
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 8210
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 8212
 $76 = HEAP8[$0 + 152 >> 0] | 0; //@line 8214
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 8216
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 8220
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 8222
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 8224
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 8226
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 8228
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 8230
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 8232
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 8234
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 8236
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 8238
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 8240
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 8242
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 8244
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 8246
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 8248
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 8250
 $114 = HEAP32[$0 + 228 >> 2] | 0; //@line 8252
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 8254
 $118 = HEAP8[$0 + 236 >> 0] | 0; //@line 8256
 $120 = HEAP8[$0 + 237 >> 0] | 0; //@line 8258
 $122 = HEAP32[$0 + 240 >> 2] | 0; //@line 8260
 $124 = HEAP32[$0 + 244 >> 2] | 0; //@line 8262
 if (HEAP8[___async_retval >> 0] & 1) {
  $583 = HEAP32[$0 + 44 >> 2] & 15; //@line 8267
  HEAP8[$18 >> 0] = HEAP8[$0 + 160 >> 0] | 0; //@line 8268
  HEAP8[$58 >> 0] = $62; //@line 8269
  HEAPF32[$66 >> 2] = +(HEAPU8[13552 + $583 >> 0] | 0); //@line 8273
  $590 = HEAP8[$84 >> 0] | 0; //@line 8277
  $591 = $590 & 255; //@line 8278
  if ((128 - (HEAPU8[$70 >> 0] | 0) | 0) > ($591 | 0)) {
   HEAP8[$84 >> 0] = $590 + 1 << 24 >> 24; //@line 8283
   HEAP8[$110 + 4 + $591 >> 0] = 9; //@line 8284
   HEAP8[$112 >> 0] = 1; //@line 8285
   $$0$be = $52; //@line 8286
   $$0107$be = 0; //@line 8286
  } else {
   $$0$be = $52; //@line 8288
   $$0107$be = -1010; //@line 8288
  }
 } else {
  $$0$be = $52; //@line 8291
  $$0107$be = $94; //@line 8291
 }
 L5 : while (1) {
  if (($$0$be & 255) >= ($118 & 255)) {
   label = 33; //@line 8296
   break;
  }
  $127 = $$0$be + 1 << 24 >> 24; //@line 8300
  switch (HEAP8[$16 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 8305
    break L5;
    break;
   }
  case 5:
   {
    label = 9; //@line 8310
    break L5;
    break;
   }
  case 7:
   {
    label = 18; //@line 8315
    break L5;
    break;
   }
  case 9:
   {
    label = 24; //@line 8320
    break L5;
    break;
   }
  case 10:
   {
    label = 30; //@line 8325
    break L5;
    break;
   }
  case 2:
   {
    HEAP32[$72 >> 2] = 0; //@line 8330
    HEAP8[$74 >> 0] = HEAP8[$16 + ($127 & 255) >> 0] | 0; //@line 8335
    HEAP8[$90 >> 0] = HEAP8[$16 + ($$0$be + 2 & 255) >> 0] | 0; //@line 8340
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 8341
    continue L5;
    break;
   }
  case 4:
   {
    $212 = $$0$be + 2 << 24 >> 24; //@line 8346
    $215 = HEAP8[$16 + ($127 & 255) >> 0] | 0; //@line 8349
    HEAP8[$14 >> 0] = $215; //@line 8350
    HEAP16[$100 >> 1] = 1 << ($215 & 255); //@line 8354
    $222 = HEAP8[$84 >> 0] | 0; //@line 8358
    $223 = $222 & 255; //@line 8359
    if ((128 - (HEAPU8[$70 >> 0] | 0) | 0) <= ($223 | 0)) {
     $$0$be = $212; //@line 8362
     $$0107$be = -1010; //@line 8362
     continue L5;
    }
    HEAP8[$84 >> 0] = $222 + 1 << 24 >> 24; //@line 8367
    HEAP8[$110 + 4 + $223 >> 0] = 4; //@line 8368
    HEAP8[$112 >> 0] = 1; //@line 8369
    $$0$be = $212; //@line 8370
    $$0107$be = 0; //@line 8370
    continue L5;
    break;
   }
  case 6:
   {
    $319 = HEAP32[$92 >> 2] | 0; //@line 8375
    if ($319 | 0) {
     label = 13; //@line 8378
     break L5;
    }
    $385 = HEAP8[$84 >> 0] | 0; //@line 8384
    $386 = $385 & 255; //@line 8385
    if ((128 - (HEAPU8[$70 >> 0] | 0) - $386 | 0) <= 2) {
     $$0$be = $127; //@line 8389
     $$0107$be = -1010; //@line 8389
     continue L5;
    }
    HEAP8[$110 + 4 + $386 >> 0] = 6; //@line 8394
    HEAP8[($385 + 1 & 255) + ($110 + 4) >> 0] = -1; //@line 8398
    HEAP8[$84 >> 0] = $385 + 3 << 24 >> 24; //@line 8400
    HEAP8[($385 + 2 & 255) + ($110 + 4) >> 0] = $76; //@line 8403
    HEAP8[$112 >> 0] = 1; //@line 8404
    $$0$be = $127; //@line 8405
    $$0107$be = 0; //@line 8405
    continue L5;
    break;
   }
  case 8:
   {
    $489 = $$0$be + 2 << 24 >> 24; //@line 8410
    $493 = HEAP8[$16 + ($127 & 255) >> 0] & 15; //@line 8414
    $497 = ($493 + ($493 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 8419
    HEAP32[$34 >> 2] = $497; //@line 8420
    HEAP32[$2 >> 2] = $497 + 1e3; //@line 8422
    $502 = HEAP8[$84 >> 0] | 0; //@line 8426
    $503 = $502 & 255; //@line 8427
    if ((128 - (HEAPU8[$70 >> 0] | 0) | 0) <= ($503 | 0)) {
     $$0$be = $489; //@line 8430
     $$0107$be = -1010; //@line 8430
     continue L5;
    }
    HEAP8[$84 >> 0] = $502 + 1 << 24 >> 24; //@line 8435
    HEAP8[$110 + 4 + $503 >> 0] = 8; //@line 8436
    HEAP8[$50 >> 0] = 1; //@line 8437
    HEAP8[$112 >> 0] = 1; //@line 8438
    $$0$be = $489; //@line 8439
    $$0107$be = 0; //@line 8439
    continue L5;
    break;
   }
  default:
   {
    $$0$be = $127; //@line 8444
    $$0107$be = -1013; //@line 8444
    continue L5;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$44 >> 0] = 0; //@line 8450
  HEAP8[$46 >> 0] = 0; //@line 8451
  HEAP8[$4 >> 0] = 0; //@line 8452
  HEAP8[$42 >> 0] = 0; //@line 8453
  $138 = $127 & 255; //@line 8454
  $139 = $138 + -1 | 0; //@line 8455
  HEAP32[$106 >> 2] = $16 + $139; //@line 8457
  HEAP8[$102 >> 0] = $26 - $139; //@line 8460
  HEAP8[$114 >> 0] = HEAP8[$12 >> 0] | 0; //@line 8462
  HEAP8[$8 >> 0] = HEAP8[$18 >> 0] | 0; //@line 8464
  HEAP8[$24 >> 0] = HEAP8[$32 >> 0] | 0; //@line 8466
  HEAP8[$68 >> 0] = HEAP8[$54 >> 0] | 0; //@line 8468
  HEAP8[$86 >> 0] = HEAP8[$60 >> 0] | 0; //@line 8470
  $150 = HEAP32[(HEAP32[$88 >> 2] | 0) + 36 >> 2] | 0; //@line 8473
  $ReallocAsyncCtx = _emscripten_realloc_async_context(240) | 0; //@line 8474
  $151 = FUNCTION_TABLE_iiiiiii[$150 & 3]($96, $36, $44, $46, $4, $42) | 0; //@line 8475
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 489; //@line 8478
   $152 = $ReallocAsyncCtx + 4 | 0; //@line 8479
   HEAP8[$152 >> 0] = $120; //@line 8480
   $153 = $ReallocAsyncCtx + 8 | 0; //@line 8481
   HEAP32[$153 >> 2] = $4; //@line 8482
   $154 = $ReallocAsyncCtx + 12 | 0; //@line 8483
   HEAP32[$154 >> 2] = $6; //@line 8484
   $155 = $ReallocAsyncCtx + 16 | 0; //@line 8485
   HEAP32[$155 >> 2] = $8; //@line 8486
   $156 = $ReallocAsyncCtx + 20 | 0; //@line 8487
   HEAP32[$156 >> 2] = $10; //@line 8488
   $157 = $ReallocAsyncCtx + 24 | 0; //@line 8489
   HEAP32[$157 >> 2] = $124; //@line 8490
   $158 = $ReallocAsyncCtx + 28 | 0; //@line 8491
   HEAP32[$158 >> 2] = $2; //@line 8492
   $159 = $ReallocAsyncCtx + 32 | 0; //@line 8493
   HEAP32[$159 >> 2] = $122; //@line 8494
   $160 = $ReallocAsyncCtx + 36 | 0; //@line 8495
   HEAP32[$160 >> 2] = $18; //@line 8496
   $161 = $ReallocAsyncCtx + 40 | 0; //@line 8497
   HEAP32[$161 >> 2] = $20; //@line 8498
   $162 = $ReallocAsyncCtx + 44 | 0; //@line 8499
   HEAP32[$162 >> 2] = $24; //@line 8500
   $163 = $ReallocAsyncCtx + 48 | 0; //@line 8501
   HEAP32[$163 >> 2] = $26; //@line 8502
   $164 = $ReallocAsyncCtx + 52 | 0; //@line 8503
   HEAP32[$164 >> 2] = $28; //@line 8504
   $165 = $ReallocAsyncCtx + 56 | 0; //@line 8505
   HEAP32[$165 >> 2] = $30; //@line 8506
   $166 = $ReallocAsyncCtx + 60 | 0; //@line 8507
   HEAP32[$166 >> 2] = $32; //@line 8508
   $167 = $ReallocAsyncCtx + 64 | 0; //@line 8509
   HEAP32[$167 >> 2] = $34; //@line 8510
   $168 = $ReallocAsyncCtx + 68 | 0; //@line 8511
   HEAP32[$168 >> 2] = $36; //@line 8512
   $169 = $ReallocAsyncCtx + 72 | 0; //@line 8513
   HEAP32[$169 >> 2] = $38; //@line 8514
   $170 = $ReallocAsyncCtx + 76 | 0; //@line 8515
   HEAP32[$170 >> 2] = $40; //@line 8516
   $171 = $ReallocAsyncCtx + 80 | 0; //@line 8517
   HEAP32[$171 >> 2] = $42; //@line 8518
   $172 = $ReallocAsyncCtx + 84 | 0; //@line 8519
   HEAP32[$172 >> 2] = $44; //@line 8520
   $173 = $ReallocAsyncCtx + 88 | 0; //@line 8521
   HEAP32[$173 >> 2] = $46; //@line 8522
   $174 = $ReallocAsyncCtx + 92 | 0; //@line 8523
   HEAP32[$174 >> 2] = $48; //@line 8524
   $175 = $ReallocAsyncCtx + 96 | 0; //@line 8525
   HEAP32[$175 >> 2] = $50; //@line 8526
   $176 = $ReallocAsyncCtx + 100 | 0; //@line 8527
   HEAP32[$176 >> 2] = $54; //@line 8528
   $177 = $ReallocAsyncCtx + 104 | 0; //@line 8529
   HEAP32[$177 >> 2] = $56; //@line 8530
   $178 = $ReallocAsyncCtx + 108 | 0; //@line 8531
   HEAP32[$178 >> 2] = $58; //@line 8532
   $179 = $ReallocAsyncCtx + 112 | 0; //@line 8533
   HEAP32[$179 >> 2] = $60; //@line 8534
   $180 = $ReallocAsyncCtx + 116 | 0; //@line 8535
   HEAP32[$180 >> 2] = $64; //@line 8536
   $181 = $ReallocAsyncCtx + 120 | 0; //@line 8537
   HEAP32[$181 >> 2] = $66; //@line 8538
   $182 = $ReallocAsyncCtx + 124 | 0; //@line 8539
   HEAP32[$182 >> 2] = $68; //@line 8540
   $183 = $ReallocAsyncCtx + 128 | 0; //@line 8541
   HEAP32[$183 >> 2] = $70; //@line 8542
   $184 = $ReallocAsyncCtx + 132 | 0; //@line 8543
   HEAP32[$184 >> 2] = $72; //@line 8544
   $185 = $ReallocAsyncCtx + 136 | 0; //@line 8545
   HEAP32[$185 >> 2] = $74; //@line 8546
   $186 = $ReallocAsyncCtx + 140 | 0; //@line 8547
   HEAP8[$186 >> 0] = $76; //@line 8548
   $187 = $ReallocAsyncCtx + 144 | 0; //@line 8549
   HEAP32[$187 >> 2] = $78; //@line 8550
   $188 = $ReallocAsyncCtx + 148 | 0; //@line 8551
   HEAP32[$188 >> 2] = $82; //@line 8552
   $189 = $ReallocAsyncCtx + 152 | 0; //@line 8553
   HEAP32[$189 >> 2] = $84; //@line 8554
   $190 = $ReallocAsyncCtx + 156 | 0; //@line 8555
   HEAP32[$190 >> 2] = $86; //@line 8556
   $191 = $ReallocAsyncCtx + 160 | 0; //@line 8557
   HEAP32[$191 >> 2] = $88; //@line 8558
   $192 = $ReallocAsyncCtx + 164 | 0; //@line 8559
   HEAP32[$192 >> 2] = $138; //@line 8560
   $193 = $ReallocAsyncCtx + 168 | 0; //@line 8561
   HEAP32[$193 >> 2] = $90; //@line 8562
   $194 = $ReallocAsyncCtx + 172 | 0; //@line 8563
   HEAP32[$194 >> 2] = $92; //@line 8564
   $195 = $ReallocAsyncCtx + 176 | 0; //@line 8565
   HEAP32[$195 >> 2] = $$0107$be; //@line 8566
   $196 = $ReallocAsyncCtx + 180 | 0; //@line 8567
   HEAP32[$196 >> 2] = $96; //@line 8568
   $197 = $ReallocAsyncCtx + 184 | 0; //@line 8569
   HEAP32[$197 >> 2] = $98; //@line 8570
   $198 = $ReallocAsyncCtx + 188 | 0; //@line 8571
   HEAP32[$198 >> 2] = $100; //@line 8572
   $199 = $ReallocAsyncCtx + 192 | 0; //@line 8573
   HEAP32[$199 >> 2] = $102; //@line 8574
   $200 = $ReallocAsyncCtx + 196 | 0; //@line 8575
   HEAP32[$200 >> 2] = $104; //@line 8576
   $201 = $ReallocAsyncCtx + 200 | 0; //@line 8577
   HEAP32[$201 >> 2] = $106; //@line 8578
   $202 = $ReallocAsyncCtx + 204 | 0; //@line 8579
   HEAP32[$202 >> 2] = $108; //@line 8580
   $203 = $ReallocAsyncCtx + 208 | 0; //@line 8581
   HEAP32[$203 >> 2] = $110; //@line 8582
   $204 = $ReallocAsyncCtx + 212 | 0; //@line 8583
   HEAP32[$204 >> 2] = $112; //@line 8584
   $205 = $ReallocAsyncCtx + 216 | 0; //@line 8585
   HEAP32[$205 >> 2] = $114; //@line 8586
   $206 = $ReallocAsyncCtx + 220 | 0; //@line 8587
   HEAP32[$206 >> 2] = $116; //@line 8588
   $207 = $ReallocAsyncCtx + 224 | 0; //@line 8589
   HEAP8[$207 >> 0] = $118; //@line 8590
   $208 = $ReallocAsyncCtx + 228 | 0; //@line 8591
   HEAP32[$208 >> 2] = $14; //@line 8592
   $209 = $ReallocAsyncCtx + 232 | 0; //@line 8593
   HEAP32[$209 >> 2] = $16; //@line 8594
   $210 = $ReallocAsyncCtx + 236 | 0; //@line 8595
   HEAP32[$210 >> 2] = $12; //@line 8596
   sp = STACKTOP; //@line 8597
   return;
  }
  HEAP8[___async_retval >> 0] = $151; //@line 8601
  ___async_unwind = 0; //@line 8602
  HEAP32[$ReallocAsyncCtx >> 2] = 489; //@line 8603
  $152 = $ReallocAsyncCtx + 4 | 0; //@line 8604
  HEAP8[$152 >> 0] = $120; //@line 8605
  $153 = $ReallocAsyncCtx + 8 | 0; //@line 8606
  HEAP32[$153 >> 2] = $4; //@line 8607
  $154 = $ReallocAsyncCtx + 12 | 0; //@line 8608
  HEAP32[$154 >> 2] = $6; //@line 8609
  $155 = $ReallocAsyncCtx + 16 | 0; //@line 8610
  HEAP32[$155 >> 2] = $8; //@line 8611
  $156 = $ReallocAsyncCtx + 20 | 0; //@line 8612
  HEAP32[$156 >> 2] = $10; //@line 8613
  $157 = $ReallocAsyncCtx + 24 | 0; //@line 8614
  HEAP32[$157 >> 2] = $124; //@line 8615
  $158 = $ReallocAsyncCtx + 28 | 0; //@line 8616
  HEAP32[$158 >> 2] = $2; //@line 8617
  $159 = $ReallocAsyncCtx + 32 | 0; //@line 8618
  HEAP32[$159 >> 2] = $122; //@line 8619
  $160 = $ReallocAsyncCtx + 36 | 0; //@line 8620
  HEAP32[$160 >> 2] = $18; //@line 8621
  $161 = $ReallocAsyncCtx + 40 | 0; //@line 8622
  HEAP32[$161 >> 2] = $20; //@line 8623
  $162 = $ReallocAsyncCtx + 44 | 0; //@line 8624
  HEAP32[$162 >> 2] = $24; //@line 8625
  $163 = $ReallocAsyncCtx + 48 | 0; //@line 8626
  HEAP32[$163 >> 2] = $26; //@line 8627
  $164 = $ReallocAsyncCtx + 52 | 0; //@line 8628
  HEAP32[$164 >> 2] = $28; //@line 8629
  $165 = $ReallocAsyncCtx + 56 | 0; //@line 8630
  HEAP32[$165 >> 2] = $30; //@line 8631
  $166 = $ReallocAsyncCtx + 60 | 0; //@line 8632
  HEAP32[$166 >> 2] = $32; //@line 8633
  $167 = $ReallocAsyncCtx + 64 | 0; //@line 8634
  HEAP32[$167 >> 2] = $34; //@line 8635
  $168 = $ReallocAsyncCtx + 68 | 0; //@line 8636
  HEAP32[$168 >> 2] = $36; //@line 8637
  $169 = $ReallocAsyncCtx + 72 | 0; //@line 8638
  HEAP32[$169 >> 2] = $38; //@line 8639
  $170 = $ReallocAsyncCtx + 76 | 0; //@line 8640
  HEAP32[$170 >> 2] = $40; //@line 8641
  $171 = $ReallocAsyncCtx + 80 | 0; //@line 8642
  HEAP32[$171 >> 2] = $42; //@line 8643
  $172 = $ReallocAsyncCtx + 84 | 0; //@line 8644
  HEAP32[$172 >> 2] = $44; //@line 8645
  $173 = $ReallocAsyncCtx + 88 | 0; //@line 8646
  HEAP32[$173 >> 2] = $46; //@line 8647
  $174 = $ReallocAsyncCtx + 92 | 0; //@line 8648
  HEAP32[$174 >> 2] = $48; //@line 8649
  $175 = $ReallocAsyncCtx + 96 | 0; //@line 8650
  HEAP32[$175 >> 2] = $50; //@line 8651
  $176 = $ReallocAsyncCtx + 100 | 0; //@line 8652
  HEAP32[$176 >> 2] = $54; //@line 8653
  $177 = $ReallocAsyncCtx + 104 | 0; //@line 8654
  HEAP32[$177 >> 2] = $56; //@line 8655
  $178 = $ReallocAsyncCtx + 108 | 0; //@line 8656
  HEAP32[$178 >> 2] = $58; //@line 8657
  $179 = $ReallocAsyncCtx + 112 | 0; //@line 8658
  HEAP32[$179 >> 2] = $60; //@line 8659
  $180 = $ReallocAsyncCtx + 116 | 0; //@line 8660
  HEAP32[$180 >> 2] = $64; //@line 8661
  $181 = $ReallocAsyncCtx + 120 | 0; //@line 8662
  HEAP32[$181 >> 2] = $66; //@line 8663
  $182 = $ReallocAsyncCtx + 124 | 0; //@line 8664
  HEAP32[$182 >> 2] = $68; //@line 8665
  $183 = $ReallocAsyncCtx + 128 | 0; //@line 8666
  HEAP32[$183 >> 2] = $70; //@line 8667
  $184 = $ReallocAsyncCtx + 132 | 0; //@line 8668
  HEAP32[$184 >> 2] = $72; //@line 8669
  $185 = $ReallocAsyncCtx + 136 | 0; //@line 8670
  HEAP32[$185 >> 2] = $74; //@line 8671
  $186 = $ReallocAsyncCtx + 140 | 0; //@line 8672
  HEAP8[$186 >> 0] = $76; //@line 8673
  $187 = $ReallocAsyncCtx + 144 | 0; //@line 8674
  HEAP32[$187 >> 2] = $78; //@line 8675
  $188 = $ReallocAsyncCtx + 148 | 0; //@line 8676
  HEAP32[$188 >> 2] = $82; //@line 8677
  $189 = $ReallocAsyncCtx + 152 | 0; //@line 8678
  HEAP32[$189 >> 2] = $84; //@line 8679
  $190 = $ReallocAsyncCtx + 156 | 0; //@line 8680
  HEAP32[$190 >> 2] = $86; //@line 8681
  $191 = $ReallocAsyncCtx + 160 | 0; //@line 8682
  HEAP32[$191 >> 2] = $88; //@line 8683
  $192 = $ReallocAsyncCtx + 164 | 0; //@line 8684
  HEAP32[$192 >> 2] = $138; //@line 8685
  $193 = $ReallocAsyncCtx + 168 | 0; //@line 8686
  HEAP32[$193 >> 2] = $90; //@line 8687
  $194 = $ReallocAsyncCtx + 172 | 0; //@line 8688
  HEAP32[$194 >> 2] = $92; //@line 8689
  $195 = $ReallocAsyncCtx + 176 | 0; //@line 8690
  HEAP32[$195 >> 2] = $$0107$be; //@line 8691
  $196 = $ReallocAsyncCtx + 180 | 0; //@line 8692
  HEAP32[$196 >> 2] = $96; //@line 8693
  $197 = $ReallocAsyncCtx + 184 | 0; //@line 8694
  HEAP32[$197 >> 2] = $98; //@line 8695
  $198 = $ReallocAsyncCtx + 188 | 0; //@line 8696
  HEAP32[$198 >> 2] = $100; //@line 8697
  $199 = $ReallocAsyncCtx + 192 | 0; //@line 8698
  HEAP32[$199 >> 2] = $102; //@line 8699
  $200 = $ReallocAsyncCtx + 196 | 0; //@line 8700
  HEAP32[$200 >> 2] = $104; //@line 8701
  $201 = $ReallocAsyncCtx + 200 | 0; //@line 8702
  HEAP32[$201 >> 2] = $106; //@line 8703
  $202 = $ReallocAsyncCtx + 204 | 0; //@line 8704
  HEAP32[$202 >> 2] = $108; //@line 8705
  $203 = $ReallocAsyncCtx + 208 | 0; //@line 8706
  HEAP32[$203 >> 2] = $110; //@line 8707
  $204 = $ReallocAsyncCtx + 212 | 0; //@line 8708
  HEAP32[$204 >> 2] = $112; //@line 8709
  $205 = $ReallocAsyncCtx + 216 | 0; //@line 8710
  HEAP32[$205 >> 2] = $114; //@line 8711
  $206 = $ReallocAsyncCtx + 220 | 0; //@line 8712
  HEAP32[$206 >> 2] = $116; //@line 8713
  $207 = $ReallocAsyncCtx + 224 | 0; //@line 8714
  HEAP8[$207 >> 0] = $118; //@line 8715
  $208 = $ReallocAsyncCtx + 228 | 0; //@line 8716
  HEAP32[$208 >> 2] = $14; //@line 8717
  $209 = $ReallocAsyncCtx + 232 | 0; //@line 8718
  HEAP32[$209 >> 2] = $16; //@line 8719
  $210 = $ReallocAsyncCtx + 236 | 0; //@line 8720
  HEAP32[$210 >> 2] = $12; //@line 8721
  sp = STACKTOP; //@line 8722
  return;
 } else if ((label | 0) == 9) {
  $229 = HEAP8[$16 + ($127 & 255) >> 0] | 0; //@line 8728
  HEAP8[$30 >> 0] = ($229 & 255) >>> 4 & 7; //@line 8733
  HEAP8[$108 >> 0] = $229 & 15; //@line 8735
  $248 = $$0$be + 5 << 24 >> 24; //@line 8749
  HEAP32[$6 >> 2] = (HEAPU8[$16 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$16 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$16 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 8757
  $258 = HEAP32[(HEAP32[$10 >> 2] | 0) + 40 >> 2] | 0; //@line 8760
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(236) | 0; //@line 8761
  $259 = FUNCTION_TABLE_iii[$258 & 31]($96, $48) | 0; //@line 8762
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 490; //@line 8765
   $260 = $ReallocAsyncCtx2 + 4 | 0; //@line 8766
   HEAP8[$260 >> 0] = $120; //@line 8767
   $261 = $ReallocAsyncCtx2 + 8 | 0; //@line 8768
   HEAP32[$261 >> 2] = $4; //@line 8769
   $262 = $ReallocAsyncCtx2 + 12 | 0; //@line 8770
   HEAP32[$262 >> 2] = $6; //@line 8771
   $263 = $ReallocAsyncCtx2 + 16 | 0; //@line 8772
   HEAP32[$263 >> 2] = $8; //@line 8773
   $264 = $ReallocAsyncCtx2 + 20 | 0; //@line 8774
   HEAP32[$264 >> 2] = $10; //@line 8775
   $265 = $ReallocAsyncCtx2 + 24 | 0; //@line 8776
   HEAP8[$265 >> 0] = $248; //@line 8777
   $266 = $ReallocAsyncCtx2 + 28 | 0; //@line 8778
   HEAP32[$266 >> 2] = $2; //@line 8779
   $267 = $ReallocAsyncCtx2 + 32 | 0; //@line 8780
   HEAP32[$267 >> 2] = $122; //@line 8781
   $268 = $ReallocAsyncCtx2 + 36 | 0; //@line 8782
   HEAP32[$268 >> 2] = $124; //@line 8783
   $269 = $ReallocAsyncCtx2 + 40 | 0; //@line 8784
   HEAP32[$269 >> 2] = $18; //@line 8785
   $270 = $ReallocAsyncCtx2 + 44 | 0; //@line 8786
   HEAP32[$270 >> 2] = $20; //@line 8787
   $271 = $ReallocAsyncCtx2 + 48 | 0; //@line 8788
   HEAP32[$271 >> 2] = $24; //@line 8789
   $272 = $ReallocAsyncCtx2 + 52 | 0; //@line 8790
   HEAP32[$272 >> 2] = $26; //@line 8791
   $273 = $ReallocAsyncCtx2 + 56 | 0; //@line 8792
   HEAP32[$273 >> 2] = $28; //@line 8793
   $274 = $ReallocAsyncCtx2 + 60 | 0; //@line 8794
   HEAP32[$274 >> 2] = $30; //@line 8795
   $275 = $ReallocAsyncCtx2 + 64 | 0; //@line 8796
   HEAP32[$275 >> 2] = $32; //@line 8797
   $276 = $ReallocAsyncCtx2 + 68 | 0; //@line 8798
   HEAP32[$276 >> 2] = $34; //@line 8799
   $277 = $ReallocAsyncCtx2 + 72 | 0; //@line 8800
   HEAP32[$277 >> 2] = $36; //@line 8801
   $278 = $ReallocAsyncCtx2 + 76 | 0; //@line 8802
   HEAP32[$278 >> 2] = $38; //@line 8803
   $279 = $ReallocAsyncCtx2 + 80 | 0; //@line 8804
   HEAP32[$279 >> 2] = $40; //@line 8805
   $280 = $ReallocAsyncCtx2 + 84 | 0; //@line 8806
   HEAP32[$280 >> 2] = $42; //@line 8807
   $281 = $ReallocAsyncCtx2 + 88 | 0; //@line 8808
   HEAP32[$281 >> 2] = $44; //@line 8809
   $282 = $ReallocAsyncCtx2 + 92 | 0; //@line 8810
   HEAP32[$282 >> 2] = $46; //@line 8811
   $283 = $ReallocAsyncCtx2 + 96 | 0; //@line 8812
   HEAP32[$283 >> 2] = $48; //@line 8813
   $284 = $ReallocAsyncCtx2 + 100 | 0; //@line 8814
   HEAP32[$284 >> 2] = $50; //@line 8815
   $285 = $ReallocAsyncCtx2 + 104 | 0; //@line 8816
   HEAP32[$285 >> 2] = $54; //@line 8817
   $286 = $ReallocAsyncCtx2 + 108 | 0; //@line 8818
   HEAP32[$286 >> 2] = $56; //@line 8819
   $287 = $ReallocAsyncCtx2 + 112 | 0; //@line 8820
   HEAP32[$287 >> 2] = $58; //@line 8821
   $288 = $ReallocAsyncCtx2 + 116 | 0; //@line 8822
   HEAP32[$288 >> 2] = $60; //@line 8823
   $289 = $ReallocAsyncCtx2 + 120 | 0; //@line 8824
   HEAP32[$289 >> 2] = $64; //@line 8825
   $290 = $ReallocAsyncCtx2 + 124 | 0; //@line 8826
   HEAP32[$290 >> 2] = $66; //@line 8827
   $291 = $ReallocAsyncCtx2 + 128 | 0; //@line 8828
   HEAP32[$291 >> 2] = $68; //@line 8829
   $292 = $ReallocAsyncCtx2 + 132 | 0; //@line 8830
   HEAP32[$292 >> 2] = $70; //@line 8831
   $293 = $ReallocAsyncCtx2 + 136 | 0; //@line 8832
   HEAP32[$293 >> 2] = $72; //@line 8833
   $294 = $ReallocAsyncCtx2 + 140 | 0; //@line 8834
   HEAP32[$294 >> 2] = $74; //@line 8835
   $295 = $ReallocAsyncCtx2 + 144 | 0; //@line 8836
   HEAP8[$295 >> 0] = $76; //@line 8837
   $296 = $ReallocAsyncCtx2 + 148 | 0; //@line 8838
   HEAP32[$296 >> 2] = $78; //@line 8839
   $297 = $ReallocAsyncCtx2 + 152 | 0; //@line 8840
   HEAP32[$297 >> 2] = $82; //@line 8841
   $298 = $ReallocAsyncCtx2 + 156 | 0; //@line 8842
   HEAP32[$298 >> 2] = $84; //@line 8843
   $299 = $ReallocAsyncCtx2 + 160 | 0; //@line 8844
   HEAP32[$299 >> 2] = $86; //@line 8845
   $300 = $ReallocAsyncCtx2 + 164 | 0; //@line 8846
   HEAP32[$300 >> 2] = $88; //@line 8847
   $301 = $ReallocAsyncCtx2 + 168 | 0; //@line 8848
   HEAP32[$301 >> 2] = $90; //@line 8849
   $302 = $ReallocAsyncCtx2 + 172 | 0; //@line 8850
   HEAP32[$302 >> 2] = $92; //@line 8851
   $303 = $ReallocAsyncCtx2 + 176 | 0; //@line 8852
   HEAP32[$303 >> 2] = $96; //@line 8853
   $304 = $ReallocAsyncCtx2 + 180 | 0; //@line 8854
   HEAP32[$304 >> 2] = $98; //@line 8855
   $305 = $ReallocAsyncCtx2 + 184 | 0; //@line 8856
   HEAP32[$305 >> 2] = $100; //@line 8857
   $306 = $ReallocAsyncCtx2 + 188 | 0; //@line 8858
   HEAP32[$306 >> 2] = $102; //@line 8859
   $307 = $ReallocAsyncCtx2 + 192 | 0; //@line 8860
   HEAP32[$307 >> 2] = $104; //@line 8861
   $308 = $ReallocAsyncCtx2 + 196 | 0; //@line 8862
   HEAP32[$308 >> 2] = $106; //@line 8863
   $309 = $ReallocAsyncCtx2 + 200 | 0; //@line 8864
   HEAP32[$309 >> 2] = $108; //@line 8865
   $310 = $ReallocAsyncCtx2 + 204 | 0; //@line 8866
   HEAP32[$310 >> 2] = $110; //@line 8867
   $311 = $ReallocAsyncCtx2 + 208 | 0; //@line 8868
   HEAP32[$311 >> 2] = $112; //@line 8869
   $312 = $ReallocAsyncCtx2 + 212 | 0; //@line 8870
   HEAP32[$312 >> 2] = $114; //@line 8871
   $313 = $ReallocAsyncCtx2 + 216 | 0; //@line 8872
   HEAP32[$313 >> 2] = $116; //@line 8873
   $314 = $ReallocAsyncCtx2 + 220 | 0; //@line 8874
   HEAP8[$314 >> 0] = $118; //@line 8875
   $315 = $ReallocAsyncCtx2 + 224 | 0; //@line 8876
   HEAP32[$315 >> 2] = $14; //@line 8877
   $316 = $ReallocAsyncCtx2 + 228 | 0; //@line 8878
   HEAP32[$316 >> 2] = $16; //@line 8879
   $317 = $ReallocAsyncCtx2 + 232 | 0; //@line 8880
   HEAP32[$317 >> 2] = $12; //@line 8881
   sp = STACKTOP; //@line 8882
   return;
  }
  HEAP8[___async_retval >> 0] = $259; //@line 8886
  ___async_unwind = 0; //@line 8887
  HEAP32[$ReallocAsyncCtx2 >> 2] = 490; //@line 8888
  $260 = $ReallocAsyncCtx2 + 4 | 0; //@line 8889
  HEAP8[$260 >> 0] = $120; //@line 8890
  $261 = $ReallocAsyncCtx2 + 8 | 0; //@line 8891
  HEAP32[$261 >> 2] = $4; //@line 8892
  $262 = $ReallocAsyncCtx2 + 12 | 0; //@line 8893
  HEAP32[$262 >> 2] = $6; //@line 8894
  $263 = $ReallocAsyncCtx2 + 16 | 0; //@line 8895
  HEAP32[$263 >> 2] = $8; //@line 8896
  $264 = $ReallocAsyncCtx2 + 20 | 0; //@line 8897
  HEAP32[$264 >> 2] = $10; //@line 8898
  $265 = $ReallocAsyncCtx2 + 24 | 0; //@line 8899
  HEAP8[$265 >> 0] = $248; //@line 8900
  $266 = $ReallocAsyncCtx2 + 28 | 0; //@line 8901
  HEAP32[$266 >> 2] = $2; //@line 8902
  $267 = $ReallocAsyncCtx2 + 32 | 0; //@line 8903
  HEAP32[$267 >> 2] = $122; //@line 8904
  $268 = $ReallocAsyncCtx2 + 36 | 0; //@line 8905
  HEAP32[$268 >> 2] = $124; //@line 8906
  $269 = $ReallocAsyncCtx2 + 40 | 0; //@line 8907
  HEAP32[$269 >> 2] = $18; //@line 8908
  $270 = $ReallocAsyncCtx2 + 44 | 0; //@line 8909
  HEAP32[$270 >> 2] = $20; //@line 8910
  $271 = $ReallocAsyncCtx2 + 48 | 0; //@line 8911
  HEAP32[$271 >> 2] = $24; //@line 8912
  $272 = $ReallocAsyncCtx2 + 52 | 0; //@line 8913
  HEAP32[$272 >> 2] = $26; //@line 8914
  $273 = $ReallocAsyncCtx2 + 56 | 0; //@line 8915
  HEAP32[$273 >> 2] = $28; //@line 8916
  $274 = $ReallocAsyncCtx2 + 60 | 0; //@line 8917
  HEAP32[$274 >> 2] = $30; //@line 8918
  $275 = $ReallocAsyncCtx2 + 64 | 0; //@line 8919
  HEAP32[$275 >> 2] = $32; //@line 8920
  $276 = $ReallocAsyncCtx2 + 68 | 0; //@line 8921
  HEAP32[$276 >> 2] = $34; //@line 8922
  $277 = $ReallocAsyncCtx2 + 72 | 0; //@line 8923
  HEAP32[$277 >> 2] = $36; //@line 8924
  $278 = $ReallocAsyncCtx2 + 76 | 0; //@line 8925
  HEAP32[$278 >> 2] = $38; //@line 8926
  $279 = $ReallocAsyncCtx2 + 80 | 0; //@line 8927
  HEAP32[$279 >> 2] = $40; //@line 8928
  $280 = $ReallocAsyncCtx2 + 84 | 0; //@line 8929
  HEAP32[$280 >> 2] = $42; //@line 8930
  $281 = $ReallocAsyncCtx2 + 88 | 0; //@line 8931
  HEAP32[$281 >> 2] = $44; //@line 8932
  $282 = $ReallocAsyncCtx2 + 92 | 0; //@line 8933
  HEAP32[$282 >> 2] = $46; //@line 8934
  $283 = $ReallocAsyncCtx2 + 96 | 0; //@line 8935
  HEAP32[$283 >> 2] = $48; //@line 8936
  $284 = $ReallocAsyncCtx2 + 100 | 0; //@line 8937
  HEAP32[$284 >> 2] = $50; //@line 8938
  $285 = $ReallocAsyncCtx2 + 104 | 0; //@line 8939
  HEAP32[$285 >> 2] = $54; //@line 8940
  $286 = $ReallocAsyncCtx2 + 108 | 0; //@line 8941
  HEAP32[$286 >> 2] = $56; //@line 8942
  $287 = $ReallocAsyncCtx2 + 112 | 0; //@line 8943
  HEAP32[$287 >> 2] = $58; //@line 8944
  $288 = $ReallocAsyncCtx2 + 116 | 0; //@line 8945
  HEAP32[$288 >> 2] = $60; //@line 8946
  $289 = $ReallocAsyncCtx2 + 120 | 0; //@line 8947
  HEAP32[$289 >> 2] = $64; //@line 8948
  $290 = $ReallocAsyncCtx2 + 124 | 0; //@line 8949
  HEAP32[$290 >> 2] = $66; //@line 8950
  $291 = $ReallocAsyncCtx2 + 128 | 0; //@line 8951
  HEAP32[$291 >> 2] = $68; //@line 8952
  $292 = $ReallocAsyncCtx2 + 132 | 0; //@line 8953
  HEAP32[$292 >> 2] = $70; //@line 8954
  $293 = $ReallocAsyncCtx2 + 136 | 0; //@line 8955
  HEAP32[$293 >> 2] = $72; //@line 8956
  $294 = $ReallocAsyncCtx2 + 140 | 0; //@line 8957
  HEAP32[$294 >> 2] = $74; //@line 8958
  $295 = $ReallocAsyncCtx2 + 144 | 0; //@line 8959
  HEAP8[$295 >> 0] = $76; //@line 8960
  $296 = $ReallocAsyncCtx2 + 148 | 0; //@line 8961
  HEAP32[$296 >> 2] = $78; //@line 8962
  $297 = $ReallocAsyncCtx2 + 152 | 0; //@line 8963
  HEAP32[$297 >> 2] = $82; //@line 8964
  $298 = $ReallocAsyncCtx2 + 156 | 0; //@line 8965
  HEAP32[$298 >> 2] = $84; //@line 8966
  $299 = $ReallocAsyncCtx2 + 160 | 0; //@line 8967
  HEAP32[$299 >> 2] = $86; //@line 8968
  $300 = $ReallocAsyncCtx2 + 164 | 0; //@line 8969
  HEAP32[$300 >> 2] = $88; //@line 8970
  $301 = $ReallocAsyncCtx2 + 168 | 0; //@line 8971
  HEAP32[$301 >> 2] = $90; //@line 8972
  $302 = $ReallocAsyncCtx2 + 172 | 0; //@line 8973
  HEAP32[$302 >> 2] = $92; //@line 8974
  $303 = $ReallocAsyncCtx2 + 176 | 0; //@line 8975
  HEAP32[$303 >> 2] = $96; //@line 8976
  $304 = $ReallocAsyncCtx2 + 180 | 0; //@line 8977
  HEAP32[$304 >> 2] = $98; //@line 8978
  $305 = $ReallocAsyncCtx2 + 184 | 0; //@line 8979
  HEAP32[$305 >> 2] = $100; //@line 8980
  $306 = $ReallocAsyncCtx2 + 188 | 0; //@line 8981
  HEAP32[$306 >> 2] = $102; //@line 8982
  $307 = $ReallocAsyncCtx2 + 192 | 0; //@line 8983
  HEAP32[$307 >> 2] = $104; //@line 8984
  $308 = $ReallocAsyncCtx2 + 196 | 0; //@line 8985
  HEAP32[$308 >> 2] = $106; //@line 8986
  $309 = $ReallocAsyncCtx2 + 200 | 0; //@line 8987
  HEAP32[$309 >> 2] = $108; //@line 8988
  $310 = $ReallocAsyncCtx2 + 204 | 0; //@line 8989
  HEAP32[$310 >> 2] = $110; //@line 8990
  $311 = $ReallocAsyncCtx2 + 208 | 0; //@line 8991
  HEAP32[$311 >> 2] = $112; //@line 8992
  $312 = $ReallocAsyncCtx2 + 212 | 0; //@line 8993
  HEAP32[$312 >> 2] = $114; //@line 8994
  $313 = $ReallocAsyncCtx2 + 216 | 0; //@line 8995
  HEAP32[$313 >> 2] = $116; //@line 8996
  $314 = $ReallocAsyncCtx2 + 220 | 0; //@line 8997
  HEAP8[$314 >> 0] = $118; //@line 8998
  $315 = $ReallocAsyncCtx2 + 224 | 0; //@line 8999
  HEAP32[$315 >> 2] = $14; //@line 9000
  $316 = $ReallocAsyncCtx2 + 228 | 0; //@line 9001
  HEAP32[$316 >> 2] = $16; //@line 9002
  $317 = $ReallocAsyncCtx2 + 232 | 0; //@line 9003
  HEAP32[$317 >> 2] = $12; //@line 9004
  sp = STACKTOP; //@line 9005
  return;
 } else if ((label | 0) == 13) {
  $321 = HEAP32[$319 >> 2] | 0; //@line 9009
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(232) | 0; //@line 9010
  $322 = FUNCTION_TABLE_ii[$321 & 15]($82) | 0; //@line 9011
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 491; //@line 9014
   $323 = $ReallocAsyncCtx3 + 4 | 0; //@line 9015
   HEAP32[$323 >> 2] = $2; //@line 9016
   $324 = $ReallocAsyncCtx3 + 8 | 0; //@line 9017
   HEAP32[$324 >> 2] = $4; //@line 9018
   $325 = $ReallocAsyncCtx3 + 12 | 0; //@line 9019
   HEAP32[$325 >> 2] = $6; //@line 9020
   $326 = $ReallocAsyncCtx3 + 16 | 0; //@line 9021
   HEAP32[$326 >> 2] = $8; //@line 9022
   $327 = $ReallocAsyncCtx3 + 20 | 0; //@line 9023
   HEAP32[$327 >> 2] = $10; //@line 9024
   $328 = $ReallocAsyncCtx3 + 24 | 0; //@line 9025
   HEAP32[$328 >> 2] = $12; //@line 9026
   $329 = $ReallocAsyncCtx3 + 28 | 0; //@line 9027
   HEAP32[$329 >> 2] = $14; //@line 9028
   $330 = $ReallocAsyncCtx3 + 32 | 0; //@line 9029
   HEAP32[$330 >> 2] = $16; //@line 9030
   $331 = $ReallocAsyncCtx3 + 36 | 0; //@line 9031
   HEAP32[$331 >> 2] = $18; //@line 9032
   $332 = $ReallocAsyncCtx3 + 40 | 0; //@line 9033
   HEAP32[$332 >> 2] = $20; //@line 9034
   $333 = $ReallocAsyncCtx3 + 44 | 0; //@line 9035
   HEAP32[$333 >> 2] = $24; //@line 9036
   $334 = $ReallocAsyncCtx3 + 48 | 0; //@line 9037
   HEAP32[$334 >> 2] = $26; //@line 9038
   $335 = $ReallocAsyncCtx3 + 52 | 0; //@line 9039
   HEAP32[$335 >> 2] = $28; //@line 9040
   $336 = $ReallocAsyncCtx3 + 56 | 0; //@line 9041
   HEAP32[$336 >> 2] = $30; //@line 9042
   $337 = $ReallocAsyncCtx3 + 60 | 0; //@line 9043
   HEAP32[$337 >> 2] = $32; //@line 9044
   $338 = $ReallocAsyncCtx3 + 64 | 0; //@line 9045
   HEAP32[$338 >> 2] = $34; //@line 9046
   $339 = $ReallocAsyncCtx3 + 68 | 0; //@line 9047
   HEAP32[$339 >> 2] = $36; //@line 9048
   $340 = $ReallocAsyncCtx3 + 72 | 0; //@line 9049
   HEAP32[$340 >> 2] = $38; //@line 9050
   $341 = $ReallocAsyncCtx3 + 76 | 0; //@line 9051
   HEAP32[$341 >> 2] = $40; //@line 9052
   $342 = $ReallocAsyncCtx3 + 80 | 0; //@line 9053
   HEAP32[$342 >> 2] = $42; //@line 9054
   $343 = $ReallocAsyncCtx3 + 84 | 0; //@line 9055
   HEAP32[$343 >> 2] = $44; //@line 9056
   $344 = $ReallocAsyncCtx3 + 88 | 0; //@line 9057
   HEAP32[$344 >> 2] = $46; //@line 9058
   $345 = $ReallocAsyncCtx3 + 92 | 0; //@line 9059
   HEAP32[$345 >> 2] = $48; //@line 9060
   $346 = $ReallocAsyncCtx3 + 96 | 0; //@line 9061
   HEAP32[$346 >> 2] = $50; //@line 9062
   $347 = $ReallocAsyncCtx3 + 100 | 0; //@line 9063
   HEAP32[$347 >> 2] = $54; //@line 9064
   $348 = $ReallocAsyncCtx3 + 104 | 0; //@line 9065
   HEAP32[$348 >> 2] = $56; //@line 9066
   $349 = $ReallocAsyncCtx3 + 108 | 0; //@line 9067
   HEAP32[$349 >> 2] = $58; //@line 9068
   $350 = $ReallocAsyncCtx3 + 112 | 0; //@line 9069
   HEAP32[$350 >> 2] = $60; //@line 9070
   $351 = $ReallocAsyncCtx3 + 116 | 0; //@line 9071
   HEAP32[$351 >> 2] = $64; //@line 9072
   $352 = $ReallocAsyncCtx3 + 120 | 0; //@line 9073
   HEAP32[$352 >> 2] = $66; //@line 9074
   $353 = $ReallocAsyncCtx3 + 124 | 0; //@line 9075
   HEAP32[$353 >> 2] = $68; //@line 9076
   $354 = $ReallocAsyncCtx3 + 128 | 0; //@line 9077
   HEAP32[$354 >> 2] = $70; //@line 9078
   $355 = $ReallocAsyncCtx3 + 132 | 0; //@line 9079
   HEAP32[$355 >> 2] = $72; //@line 9080
   $356 = $ReallocAsyncCtx3 + 136 | 0; //@line 9081
   HEAP32[$356 >> 2] = $74; //@line 9082
   $357 = $ReallocAsyncCtx3 + 140 | 0; //@line 9083
   HEAP8[$357 >> 0] = $76; //@line 9084
   $358 = $ReallocAsyncCtx3 + 144 | 0; //@line 9085
   HEAP32[$358 >> 2] = $78; //@line 9086
   $359 = $ReallocAsyncCtx3 + 148 | 0; //@line 9087
   HEAP32[$359 >> 2] = $82; //@line 9088
   $360 = $ReallocAsyncCtx3 + 152 | 0; //@line 9089
   HEAP32[$360 >> 2] = $84; //@line 9090
   $361 = $ReallocAsyncCtx3 + 156 | 0; //@line 9091
   HEAP32[$361 >> 2] = $86; //@line 9092
   $362 = $ReallocAsyncCtx3 + 160 | 0; //@line 9093
   HEAP32[$362 >> 2] = $88; //@line 9094
   $363 = $ReallocAsyncCtx3 + 164 | 0; //@line 9095
   HEAP32[$363 >> 2] = $90; //@line 9096
   $364 = $ReallocAsyncCtx3 + 168 | 0; //@line 9097
   HEAP32[$364 >> 2] = $92; //@line 9098
   $365 = $ReallocAsyncCtx3 + 172 | 0; //@line 9099
   HEAP32[$365 >> 2] = $96; //@line 9100
   $366 = $ReallocAsyncCtx3 + 176 | 0; //@line 9101
   HEAP32[$366 >> 2] = $98; //@line 9102
   $367 = $ReallocAsyncCtx3 + 180 | 0; //@line 9103
   HEAP32[$367 >> 2] = $100; //@line 9104
   $368 = $ReallocAsyncCtx3 + 184 | 0; //@line 9105
   HEAP32[$368 >> 2] = $102; //@line 9106
   $369 = $ReallocAsyncCtx3 + 188 | 0; //@line 9107
   HEAP32[$369 >> 2] = $104; //@line 9108
   $370 = $ReallocAsyncCtx3 + 192 | 0; //@line 9109
   HEAP8[$370 >> 0] = $127; //@line 9110
   $371 = $ReallocAsyncCtx3 + 196 | 0; //@line 9111
   HEAP32[$371 >> 2] = $106; //@line 9112
   $372 = $ReallocAsyncCtx3 + 200 | 0; //@line 9113
   HEAP32[$372 >> 2] = $108; //@line 9114
   $373 = $ReallocAsyncCtx3 + 204 | 0; //@line 9115
   HEAP32[$373 >> 2] = $110; //@line 9116
   $374 = $ReallocAsyncCtx3 + 208 | 0; //@line 9117
   HEAP32[$374 >> 2] = $112; //@line 9118
   $375 = $ReallocAsyncCtx3 + 212 | 0; //@line 9119
   HEAP32[$375 >> 2] = $114; //@line 9120
   $376 = $ReallocAsyncCtx3 + 216 | 0; //@line 9121
   HEAP32[$376 >> 2] = $116; //@line 9122
   $377 = $ReallocAsyncCtx3 + 220 | 0; //@line 9123
   HEAP8[$377 >> 0] = $118; //@line 9124
   $378 = $ReallocAsyncCtx3 + 221 | 0; //@line 9125
   HEAP8[$378 >> 0] = $120; //@line 9126
   $379 = $ReallocAsyncCtx3 + 224 | 0; //@line 9127
   HEAP32[$379 >> 2] = $122; //@line 9128
   $380 = $ReallocAsyncCtx3 + 228 | 0; //@line 9129
   HEAP32[$380 >> 2] = $124; //@line 9130
   sp = STACKTOP; //@line 9131
   return;
  }
  HEAP8[___async_retval >> 0] = $322; //@line 9135
  ___async_unwind = 0; //@line 9136
  HEAP32[$ReallocAsyncCtx3 >> 2] = 491; //@line 9137
  $323 = $ReallocAsyncCtx3 + 4 | 0; //@line 9138
  HEAP32[$323 >> 2] = $2; //@line 9139
  $324 = $ReallocAsyncCtx3 + 8 | 0; //@line 9140
  HEAP32[$324 >> 2] = $4; //@line 9141
  $325 = $ReallocAsyncCtx3 + 12 | 0; //@line 9142
  HEAP32[$325 >> 2] = $6; //@line 9143
  $326 = $ReallocAsyncCtx3 + 16 | 0; //@line 9144
  HEAP32[$326 >> 2] = $8; //@line 9145
  $327 = $ReallocAsyncCtx3 + 20 | 0; //@line 9146
  HEAP32[$327 >> 2] = $10; //@line 9147
  $328 = $ReallocAsyncCtx3 + 24 | 0; //@line 9148
  HEAP32[$328 >> 2] = $12; //@line 9149
  $329 = $ReallocAsyncCtx3 + 28 | 0; //@line 9150
  HEAP32[$329 >> 2] = $14; //@line 9151
  $330 = $ReallocAsyncCtx3 + 32 | 0; //@line 9152
  HEAP32[$330 >> 2] = $16; //@line 9153
  $331 = $ReallocAsyncCtx3 + 36 | 0; //@line 9154
  HEAP32[$331 >> 2] = $18; //@line 9155
  $332 = $ReallocAsyncCtx3 + 40 | 0; //@line 9156
  HEAP32[$332 >> 2] = $20; //@line 9157
  $333 = $ReallocAsyncCtx3 + 44 | 0; //@line 9158
  HEAP32[$333 >> 2] = $24; //@line 9159
  $334 = $ReallocAsyncCtx3 + 48 | 0; //@line 9160
  HEAP32[$334 >> 2] = $26; //@line 9161
  $335 = $ReallocAsyncCtx3 + 52 | 0; //@line 9162
  HEAP32[$335 >> 2] = $28; //@line 9163
  $336 = $ReallocAsyncCtx3 + 56 | 0; //@line 9164
  HEAP32[$336 >> 2] = $30; //@line 9165
  $337 = $ReallocAsyncCtx3 + 60 | 0; //@line 9166
  HEAP32[$337 >> 2] = $32; //@line 9167
  $338 = $ReallocAsyncCtx3 + 64 | 0; //@line 9168
  HEAP32[$338 >> 2] = $34; //@line 9169
  $339 = $ReallocAsyncCtx3 + 68 | 0; //@line 9170
  HEAP32[$339 >> 2] = $36; //@line 9171
  $340 = $ReallocAsyncCtx3 + 72 | 0; //@line 9172
  HEAP32[$340 >> 2] = $38; //@line 9173
  $341 = $ReallocAsyncCtx3 + 76 | 0; //@line 9174
  HEAP32[$341 >> 2] = $40; //@line 9175
  $342 = $ReallocAsyncCtx3 + 80 | 0; //@line 9176
  HEAP32[$342 >> 2] = $42; //@line 9177
  $343 = $ReallocAsyncCtx3 + 84 | 0; //@line 9178
  HEAP32[$343 >> 2] = $44; //@line 9179
  $344 = $ReallocAsyncCtx3 + 88 | 0; //@line 9180
  HEAP32[$344 >> 2] = $46; //@line 9181
  $345 = $ReallocAsyncCtx3 + 92 | 0; //@line 9182
  HEAP32[$345 >> 2] = $48; //@line 9183
  $346 = $ReallocAsyncCtx3 + 96 | 0; //@line 9184
  HEAP32[$346 >> 2] = $50; //@line 9185
  $347 = $ReallocAsyncCtx3 + 100 | 0; //@line 9186
  HEAP32[$347 >> 2] = $54; //@line 9187
  $348 = $ReallocAsyncCtx3 + 104 | 0; //@line 9188
  HEAP32[$348 >> 2] = $56; //@line 9189
  $349 = $ReallocAsyncCtx3 + 108 | 0; //@line 9190
  HEAP32[$349 >> 2] = $58; //@line 9191
  $350 = $ReallocAsyncCtx3 + 112 | 0; //@line 9192
  HEAP32[$350 >> 2] = $60; //@line 9193
  $351 = $ReallocAsyncCtx3 + 116 | 0; //@line 9194
  HEAP32[$351 >> 2] = $64; //@line 9195
  $352 = $ReallocAsyncCtx3 + 120 | 0; //@line 9196
  HEAP32[$352 >> 2] = $66; //@line 9197
  $353 = $ReallocAsyncCtx3 + 124 | 0; //@line 9198
  HEAP32[$353 >> 2] = $68; //@line 9199
  $354 = $ReallocAsyncCtx3 + 128 | 0; //@line 9200
  HEAP32[$354 >> 2] = $70; //@line 9201
  $355 = $ReallocAsyncCtx3 + 132 | 0; //@line 9202
  HEAP32[$355 >> 2] = $72; //@line 9203
  $356 = $ReallocAsyncCtx3 + 136 | 0; //@line 9204
  HEAP32[$356 >> 2] = $74; //@line 9205
  $357 = $ReallocAsyncCtx3 + 140 | 0; //@line 9206
  HEAP8[$357 >> 0] = $76; //@line 9207
  $358 = $ReallocAsyncCtx3 + 144 | 0; //@line 9208
  HEAP32[$358 >> 2] = $78; //@line 9209
  $359 = $ReallocAsyncCtx3 + 148 | 0; //@line 9210
  HEAP32[$359 >> 2] = $82; //@line 9211
  $360 = $ReallocAsyncCtx3 + 152 | 0; //@line 9212
  HEAP32[$360 >> 2] = $84; //@line 9213
  $361 = $ReallocAsyncCtx3 + 156 | 0; //@line 9214
  HEAP32[$361 >> 2] = $86; //@line 9215
  $362 = $ReallocAsyncCtx3 + 160 | 0; //@line 9216
  HEAP32[$362 >> 2] = $88; //@line 9217
  $363 = $ReallocAsyncCtx3 + 164 | 0; //@line 9218
  HEAP32[$363 >> 2] = $90; //@line 9219
  $364 = $ReallocAsyncCtx3 + 168 | 0; //@line 9220
  HEAP32[$364 >> 2] = $92; //@line 9221
  $365 = $ReallocAsyncCtx3 + 172 | 0; //@line 9222
  HEAP32[$365 >> 2] = $96; //@line 9223
  $366 = $ReallocAsyncCtx3 + 176 | 0; //@line 9224
  HEAP32[$366 >> 2] = $98; //@line 9225
  $367 = $ReallocAsyncCtx3 + 180 | 0; //@line 9226
  HEAP32[$367 >> 2] = $100; //@line 9227
  $368 = $ReallocAsyncCtx3 + 184 | 0; //@line 9228
  HEAP32[$368 >> 2] = $102; //@line 9229
  $369 = $ReallocAsyncCtx3 + 188 | 0; //@line 9230
  HEAP32[$369 >> 2] = $104; //@line 9231
  $370 = $ReallocAsyncCtx3 + 192 | 0; //@line 9232
  HEAP8[$370 >> 0] = $127; //@line 9233
  $371 = $ReallocAsyncCtx3 + 196 | 0; //@line 9234
  HEAP32[$371 >> 2] = $106; //@line 9235
  $372 = $ReallocAsyncCtx3 + 200 | 0; //@line 9236
  HEAP32[$372 >> 2] = $108; //@line 9237
  $373 = $ReallocAsyncCtx3 + 204 | 0; //@line 9238
  HEAP32[$373 >> 2] = $110; //@line 9239
  $374 = $ReallocAsyncCtx3 + 208 | 0; //@line 9240
  HEAP32[$374 >> 2] = $112; //@line 9241
  $375 = $ReallocAsyncCtx3 + 212 | 0; //@line 9242
  HEAP32[$375 >> 2] = $114; //@line 9243
  $376 = $ReallocAsyncCtx3 + 216 | 0; //@line 9244
  HEAP32[$376 >> 2] = $116; //@line 9245
  $377 = $ReallocAsyncCtx3 + 220 | 0; //@line 9246
  HEAP8[$377 >> 0] = $118; //@line 9247
  $378 = $ReallocAsyncCtx3 + 221 | 0; //@line 9248
  HEAP8[$378 >> 0] = $120; //@line 9249
  $379 = $ReallocAsyncCtx3 + 224 | 0; //@line 9250
  HEAP32[$379 >> 2] = $122; //@line 9251
  $380 = $ReallocAsyncCtx3 + 228 | 0; //@line 9252
  HEAP32[$380 >> 2] = $124; //@line 9253
  sp = STACKTOP; //@line 9254
  return;
 } else if ((label | 0) == 18) {
  $400 = HEAP8[$16 + ($127 & 255) >> 0] | 0; //@line 9261
  HEAP32[$122 >> 2] = (HEAPU8[$16 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$16 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$16 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 9282
  HEAP32[$98 >> 2] = 0; //@line 9283
  $421 = $$0$be + 6 << 24 >> 24; //@line 9284
  HEAP8[$104 >> 0] = HEAP8[$16 + ($$0$be + 5 & 255) >> 0] | 0; //@line 9288
  $427 = HEAP32[(HEAP32[$28 >> 2] | 0) + 8 >> 2] | 0; //@line 9291
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(232) | 0; //@line 9292
  $428 = FUNCTION_TABLE_iiii[$427 & 31]($96, $400, $124) | 0; //@line 9293
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 492; //@line 9296
   $429 = $ReallocAsyncCtx4 + 4 | 0; //@line 9297
   HEAP32[$429 >> 2] = $2; //@line 9298
   $430 = $ReallocAsyncCtx4 + 8 | 0; //@line 9299
   HEAP32[$430 >> 2] = $4; //@line 9300
   $431 = $ReallocAsyncCtx4 + 12 | 0; //@line 9301
   HEAP32[$431 >> 2] = $6; //@line 9302
   $432 = $ReallocAsyncCtx4 + 16 | 0; //@line 9303
   HEAP32[$432 >> 2] = $8; //@line 9304
   $433 = $ReallocAsyncCtx4 + 20 | 0; //@line 9305
   HEAP32[$433 >> 2] = $10; //@line 9306
   $434 = $ReallocAsyncCtx4 + 24 | 0; //@line 9307
   HEAP32[$434 >> 2] = $12; //@line 9308
   $435 = $ReallocAsyncCtx4 + 28 | 0; //@line 9309
   HEAP32[$435 >> 2] = $14; //@line 9310
   $436 = $ReallocAsyncCtx4 + 32 | 0; //@line 9311
   HEAP32[$436 >> 2] = $16; //@line 9312
   $437 = $ReallocAsyncCtx4 + 36 | 0; //@line 9313
   HEAP32[$437 >> 2] = $18; //@line 9314
   $438 = $ReallocAsyncCtx4 + 40 | 0; //@line 9315
   HEAP32[$438 >> 2] = $20; //@line 9316
   $439 = $ReallocAsyncCtx4 + 44 | 0; //@line 9317
   HEAP32[$439 >> 2] = $24; //@line 9318
   $440 = $ReallocAsyncCtx4 + 48 | 0; //@line 9319
   HEAP32[$440 >> 2] = $26; //@line 9320
   $441 = $ReallocAsyncCtx4 + 52 | 0; //@line 9321
   HEAP32[$441 >> 2] = $28; //@line 9322
   $442 = $ReallocAsyncCtx4 + 56 | 0; //@line 9323
   HEAP32[$442 >> 2] = $30; //@line 9324
   $443 = $ReallocAsyncCtx4 + 60 | 0; //@line 9325
   HEAP32[$443 >> 2] = $32; //@line 9326
   $444 = $ReallocAsyncCtx4 + 64 | 0; //@line 9327
   HEAP32[$444 >> 2] = $34; //@line 9328
   $445 = $ReallocAsyncCtx4 + 68 | 0; //@line 9329
   HEAP32[$445 >> 2] = $36; //@line 9330
   $446 = $ReallocAsyncCtx4 + 72 | 0; //@line 9331
   HEAP32[$446 >> 2] = $38; //@line 9332
   $447 = $ReallocAsyncCtx4 + 76 | 0; //@line 9333
   HEAP32[$447 >> 2] = $40; //@line 9334
   $448 = $ReallocAsyncCtx4 + 80 | 0; //@line 9335
   HEAP32[$448 >> 2] = $42; //@line 9336
   $449 = $ReallocAsyncCtx4 + 84 | 0; //@line 9337
   HEAP32[$449 >> 2] = $44; //@line 9338
   $450 = $ReallocAsyncCtx4 + 88 | 0; //@line 9339
   HEAP8[$450 >> 0] = $421; //@line 9340
   $451 = $ReallocAsyncCtx4 + 92 | 0; //@line 9341
   HEAP32[$451 >> 2] = $46; //@line 9342
   $452 = $ReallocAsyncCtx4 + 96 | 0; //@line 9343
   HEAP32[$452 >> 2] = $48; //@line 9344
   $453 = $ReallocAsyncCtx4 + 100 | 0; //@line 9345
   HEAP32[$453 >> 2] = $50; //@line 9346
   $454 = $ReallocAsyncCtx4 + 104 | 0; //@line 9347
   HEAP32[$454 >> 2] = $54; //@line 9348
   $455 = $ReallocAsyncCtx4 + 108 | 0; //@line 9349
   HEAP32[$455 >> 2] = $56; //@line 9350
   $456 = $ReallocAsyncCtx4 + 112 | 0; //@line 9351
   HEAP32[$456 >> 2] = $58; //@line 9352
   $457 = $ReallocAsyncCtx4 + 116 | 0; //@line 9353
   HEAP32[$457 >> 2] = $60; //@line 9354
   $458 = $ReallocAsyncCtx4 + 120 | 0; //@line 9355
   HEAP32[$458 >> 2] = $64; //@line 9356
   $459 = $ReallocAsyncCtx4 + 124 | 0; //@line 9357
   HEAP32[$459 >> 2] = $66; //@line 9358
   $460 = $ReallocAsyncCtx4 + 128 | 0; //@line 9359
   HEAP32[$460 >> 2] = $68; //@line 9360
   $461 = $ReallocAsyncCtx4 + 132 | 0; //@line 9361
   HEAP32[$461 >> 2] = $70; //@line 9362
   $462 = $ReallocAsyncCtx4 + 136 | 0; //@line 9363
   HEAP32[$462 >> 2] = $72; //@line 9364
   $463 = $ReallocAsyncCtx4 + 140 | 0; //@line 9365
   HEAP32[$463 >> 2] = $74; //@line 9366
   $464 = $ReallocAsyncCtx4 + 144 | 0; //@line 9367
   HEAP8[$464 >> 0] = $76; //@line 9368
   $465 = $ReallocAsyncCtx4 + 148 | 0; //@line 9369
   HEAP32[$465 >> 2] = $78; //@line 9370
   $466 = $ReallocAsyncCtx4 + 152 | 0; //@line 9371
   HEAP32[$466 >> 2] = $82; //@line 9372
   $467 = $ReallocAsyncCtx4 + 156 | 0; //@line 9373
   HEAP32[$467 >> 2] = $84; //@line 9374
   $468 = $ReallocAsyncCtx4 + 160 | 0; //@line 9375
   HEAP32[$468 >> 2] = $86; //@line 9376
   $469 = $ReallocAsyncCtx4 + 164 | 0; //@line 9377
   HEAP32[$469 >> 2] = $88; //@line 9378
   $470 = $ReallocAsyncCtx4 + 168 | 0; //@line 9379
   HEAP32[$470 >> 2] = $90; //@line 9380
   $471 = $ReallocAsyncCtx4 + 172 | 0; //@line 9381
   HEAP32[$471 >> 2] = $92; //@line 9382
   $472 = $ReallocAsyncCtx4 + 176 | 0; //@line 9383
   HEAP32[$472 >> 2] = $96; //@line 9384
   $473 = $ReallocAsyncCtx4 + 180 | 0; //@line 9385
   HEAP32[$473 >> 2] = $98; //@line 9386
   $474 = $ReallocAsyncCtx4 + 184 | 0; //@line 9387
   HEAP32[$474 >> 2] = $100; //@line 9388
   $475 = $ReallocAsyncCtx4 + 188 | 0; //@line 9389
   HEAP32[$475 >> 2] = $102; //@line 9390
   $476 = $ReallocAsyncCtx4 + 192 | 0; //@line 9391
   HEAP32[$476 >> 2] = $104; //@line 9392
   $477 = $ReallocAsyncCtx4 + 196 | 0; //@line 9393
   HEAP32[$477 >> 2] = $106; //@line 9394
   $478 = $ReallocAsyncCtx4 + 200 | 0; //@line 9395
   HEAP32[$478 >> 2] = $108; //@line 9396
   $479 = $ReallocAsyncCtx4 + 204 | 0; //@line 9397
   HEAP32[$479 >> 2] = $110; //@line 9398
   $480 = $ReallocAsyncCtx4 + 208 | 0; //@line 9399
   HEAP32[$480 >> 2] = $112; //@line 9400
   $481 = $ReallocAsyncCtx4 + 212 | 0; //@line 9401
   HEAP32[$481 >> 2] = $114; //@line 9402
   $482 = $ReallocAsyncCtx4 + 216 | 0; //@line 9403
   HEAP32[$482 >> 2] = $116; //@line 9404
   $483 = $ReallocAsyncCtx4 + 220 | 0; //@line 9405
   HEAP8[$483 >> 0] = $118; //@line 9406
   $484 = $ReallocAsyncCtx4 + 221 | 0; //@line 9407
   HEAP8[$484 >> 0] = $120; //@line 9408
   $485 = $ReallocAsyncCtx4 + 224 | 0; //@line 9409
   HEAP32[$485 >> 2] = $122; //@line 9410
   $486 = $ReallocAsyncCtx4 + 228 | 0; //@line 9411
   HEAP32[$486 >> 2] = $124; //@line 9412
   sp = STACKTOP; //@line 9413
   return;
  }
  HEAP8[___async_retval >> 0] = $428; //@line 9417
  ___async_unwind = 0; //@line 9418
  HEAP32[$ReallocAsyncCtx4 >> 2] = 492; //@line 9419
  $429 = $ReallocAsyncCtx4 + 4 | 0; //@line 9420
  HEAP32[$429 >> 2] = $2; //@line 9421
  $430 = $ReallocAsyncCtx4 + 8 | 0; //@line 9422
  HEAP32[$430 >> 2] = $4; //@line 9423
  $431 = $ReallocAsyncCtx4 + 12 | 0; //@line 9424
  HEAP32[$431 >> 2] = $6; //@line 9425
  $432 = $ReallocAsyncCtx4 + 16 | 0; //@line 9426
  HEAP32[$432 >> 2] = $8; //@line 9427
  $433 = $ReallocAsyncCtx4 + 20 | 0; //@line 9428
  HEAP32[$433 >> 2] = $10; //@line 9429
  $434 = $ReallocAsyncCtx4 + 24 | 0; //@line 9430
  HEAP32[$434 >> 2] = $12; //@line 9431
  $435 = $ReallocAsyncCtx4 + 28 | 0; //@line 9432
  HEAP32[$435 >> 2] = $14; //@line 9433
  $436 = $ReallocAsyncCtx4 + 32 | 0; //@line 9434
  HEAP32[$436 >> 2] = $16; //@line 9435
  $437 = $ReallocAsyncCtx4 + 36 | 0; //@line 9436
  HEAP32[$437 >> 2] = $18; //@line 9437
  $438 = $ReallocAsyncCtx4 + 40 | 0; //@line 9438
  HEAP32[$438 >> 2] = $20; //@line 9439
  $439 = $ReallocAsyncCtx4 + 44 | 0; //@line 9440
  HEAP32[$439 >> 2] = $24; //@line 9441
  $440 = $ReallocAsyncCtx4 + 48 | 0; //@line 9442
  HEAP32[$440 >> 2] = $26; //@line 9443
  $441 = $ReallocAsyncCtx4 + 52 | 0; //@line 9444
  HEAP32[$441 >> 2] = $28; //@line 9445
  $442 = $ReallocAsyncCtx4 + 56 | 0; //@line 9446
  HEAP32[$442 >> 2] = $30; //@line 9447
  $443 = $ReallocAsyncCtx4 + 60 | 0; //@line 9448
  HEAP32[$443 >> 2] = $32; //@line 9449
  $444 = $ReallocAsyncCtx4 + 64 | 0; //@line 9450
  HEAP32[$444 >> 2] = $34; //@line 9451
  $445 = $ReallocAsyncCtx4 + 68 | 0; //@line 9452
  HEAP32[$445 >> 2] = $36; //@line 9453
  $446 = $ReallocAsyncCtx4 + 72 | 0; //@line 9454
  HEAP32[$446 >> 2] = $38; //@line 9455
  $447 = $ReallocAsyncCtx4 + 76 | 0; //@line 9456
  HEAP32[$447 >> 2] = $40; //@line 9457
  $448 = $ReallocAsyncCtx4 + 80 | 0; //@line 9458
  HEAP32[$448 >> 2] = $42; //@line 9459
  $449 = $ReallocAsyncCtx4 + 84 | 0; //@line 9460
  HEAP32[$449 >> 2] = $44; //@line 9461
  $450 = $ReallocAsyncCtx4 + 88 | 0; //@line 9462
  HEAP8[$450 >> 0] = $421; //@line 9463
  $451 = $ReallocAsyncCtx4 + 92 | 0; //@line 9464
  HEAP32[$451 >> 2] = $46; //@line 9465
  $452 = $ReallocAsyncCtx4 + 96 | 0; //@line 9466
  HEAP32[$452 >> 2] = $48; //@line 9467
  $453 = $ReallocAsyncCtx4 + 100 | 0; //@line 9468
  HEAP32[$453 >> 2] = $50; //@line 9469
  $454 = $ReallocAsyncCtx4 + 104 | 0; //@line 9470
  HEAP32[$454 >> 2] = $54; //@line 9471
  $455 = $ReallocAsyncCtx4 + 108 | 0; //@line 9472
  HEAP32[$455 >> 2] = $56; //@line 9473
  $456 = $ReallocAsyncCtx4 + 112 | 0; //@line 9474
  HEAP32[$456 >> 2] = $58; //@line 9475
  $457 = $ReallocAsyncCtx4 + 116 | 0; //@line 9476
  HEAP32[$457 >> 2] = $60; //@line 9477
  $458 = $ReallocAsyncCtx4 + 120 | 0; //@line 9478
  HEAP32[$458 >> 2] = $64; //@line 9479
  $459 = $ReallocAsyncCtx4 + 124 | 0; //@line 9480
  HEAP32[$459 >> 2] = $66; //@line 9481
  $460 = $ReallocAsyncCtx4 + 128 | 0; //@line 9482
  HEAP32[$460 >> 2] = $68; //@line 9483
  $461 = $ReallocAsyncCtx4 + 132 | 0; //@line 9484
  HEAP32[$461 >> 2] = $70; //@line 9485
  $462 = $ReallocAsyncCtx4 + 136 | 0; //@line 9486
  HEAP32[$462 >> 2] = $72; //@line 9487
  $463 = $ReallocAsyncCtx4 + 140 | 0; //@line 9488
  HEAP32[$463 >> 2] = $74; //@line 9489
  $464 = $ReallocAsyncCtx4 + 144 | 0; //@line 9490
  HEAP8[$464 >> 0] = $76; //@line 9491
  $465 = $ReallocAsyncCtx4 + 148 | 0; //@line 9492
  HEAP32[$465 >> 2] = $78; //@line 9493
  $466 = $ReallocAsyncCtx4 + 152 | 0; //@line 9494
  HEAP32[$466 >> 2] = $82; //@line 9495
  $467 = $ReallocAsyncCtx4 + 156 | 0; //@line 9496
  HEAP32[$467 >> 2] = $84; //@line 9497
  $468 = $ReallocAsyncCtx4 + 160 | 0; //@line 9498
  HEAP32[$468 >> 2] = $86; //@line 9499
  $469 = $ReallocAsyncCtx4 + 164 | 0; //@line 9500
  HEAP32[$469 >> 2] = $88; //@line 9501
  $470 = $ReallocAsyncCtx4 + 168 | 0; //@line 9502
  HEAP32[$470 >> 2] = $90; //@line 9503
  $471 = $ReallocAsyncCtx4 + 172 | 0; //@line 9504
  HEAP32[$471 >> 2] = $92; //@line 9505
  $472 = $ReallocAsyncCtx4 + 176 | 0; //@line 9506
  HEAP32[$472 >> 2] = $96; //@line 9507
  $473 = $ReallocAsyncCtx4 + 180 | 0; //@line 9508
  HEAP32[$473 >> 2] = $98; //@line 9509
  $474 = $ReallocAsyncCtx4 + 184 | 0; //@line 9510
  HEAP32[$474 >> 2] = $100; //@line 9511
  $475 = $ReallocAsyncCtx4 + 188 | 0; //@line 9512
  HEAP32[$475 >> 2] = $102; //@line 9513
  $476 = $ReallocAsyncCtx4 + 192 | 0; //@line 9514
  HEAP32[$476 >> 2] = $104; //@line 9515
  $477 = $ReallocAsyncCtx4 + 196 | 0; //@line 9516
  HEAP32[$477 >> 2] = $106; //@line 9517
  $478 = $ReallocAsyncCtx4 + 200 | 0; //@line 9518
  HEAP32[$478 >> 2] = $108; //@line 9519
  $479 = $ReallocAsyncCtx4 + 204 | 0; //@line 9520
  HEAP32[$479 >> 2] = $110; //@line 9521
  $480 = $ReallocAsyncCtx4 + 208 | 0; //@line 9522
  HEAP32[$480 >> 2] = $112; //@line 9523
  $481 = $ReallocAsyncCtx4 + 212 | 0; //@line 9524
  HEAP32[$481 >> 2] = $114; //@line 9525
  $482 = $ReallocAsyncCtx4 + 216 | 0; //@line 9526
  HEAP32[$482 >> 2] = $116; //@line 9527
  $483 = $ReallocAsyncCtx4 + 220 | 0; //@line 9528
  HEAP8[$483 >> 0] = $118; //@line 9529
  $484 = $ReallocAsyncCtx4 + 221 | 0; //@line 9530
  HEAP8[$484 >> 0] = $120; //@line 9531
  $485 = $ReallocAsyncCtx4 + 224 | 0; //@line 9532
  HEAP32[$485 >> 2] = $122; //@line 9533
  $486 = $ReallocAsyncCtx4 + 228 | 0; //@line 9534
  HEAP32[$486 >> 2] = $124; //@line 9535
  sp = STACKTOP; //@line 9536
  return;
 } else if ((label | 0) == 24) {
  $507 = $$0$be + 2 << 24 >> 24; //@line 9540
  $511 = HEAPU8[$16 + ($127 & 255) >> 0] | 0; //@line 9544
  $513 = $511 >>> 5 & 1; //@line 9547
  $515 = $511 >>> 4 & 1; //@line 9550
  $518 = HEAP32[(HEAP32[$20 >> 2] | 0) + 44 >> 2] | 0; //@line 9553
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(248) | 0; //@line 9554
  $519 = FUNCTION_TABLE_iiii[$518 & 31]($96, $515, $513) | 0; //@line 9555
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 493; //@line 9558
   $520 = $ReallocAsyncCtx5 + 4 | 0; //@line 9559
   HEAP32[$520 >> 2] = $2; //@line 9560
   $521 = $ReallocAsyncCtx5 + 8 | 0; //@line 9561
   HEAP32[$521 >> 2] = $4; //@line 9562
   $522 = $ReallocAsyncCtx5 + 12 | 0; //@line 9563
   HEAP32[$522 >> 2] = $6; //@line 9564
   $523 = $ReallocAsyncCtx5 + 16 | 0; //@line 9565
   HEAP32[$523 >> 2] = $8; //@line 9566
   $524 = $ReallocAsyncCtx5 + 20 | 0; //@line 9567
   HEAP32[$524 >> 2] = $10; //@line 9568
   $525 = $ReallocAsyncCtx5 + 24 | 0; //@line 9569
   HEAP32[$525 >> 2] = $12; //@line 9570
   $526 = $ReallocAsyncCtx5 + 28 | 0; //@line 9571
   HEAP32[$526 >> 2] = $14; //@line 9572
   $527 = $ReallocAsyncCtx5 + 32 | 0; //@line 9573
   HEAP32[$527 >> 2] = $16; //@line 9574
   $528 = $ReallocAsyncCtx5 + 36 | 0; //@line 9575
   HEAP32[$528 >> 2] = $18; //@line 9576
   $529 = $ReallocAsyncCtx5 + 40 | 0; //@line 9577
   HEAP32[$529 >> 2] = $20; //@line 9578
   $530 = $ReallocAsyncCtx5 + 44 | 0; //@line 9579
   HEAP32[$530 >> 2] = $511; //@line 9580
   $531 = $ReallocAsyncCtx5 + 48 | 0; //@line 9581
   HEAP32[$531 >> 2] = $24; //@line 9582
   $532 = $ReallocAsyncCtx5 + 52 | 0; //@line 9583
   HEAP32[$532 >> 2] = $26; //@line 9584
   $533 = $ReallocAsyncCtx5 + 56 | 0; //@line 9585
   HEAP32[$533 >> 2] = $28; //@line 9586
   $534 = $ReallocAsyncCtx5 + 60 | 0; //@line 9587
   HEAP32[$534 >> 2] = $30; //@line 9588
   $535 = $ReallocAsyncCtx5 + 64 | 0; //@line 9589
   HEAP32[$535 >> 2] = $32; //@line 9590
   $536 = $ReallocAsyncCtx5 + 68 | 0; //@line 9591
   HEAP32[$536 >> 2] = $34; //@line 9592
   $537 = $ReallocAsyncCtx5 + 72 | 0; //@line 9593
   HEAP32[$537 >> 2] = $36; //@line 9594
   $538 = $ReallocAsyncCtx5 + 76 | 0; //@line 9595
   HEAP32[$538 >> 2] = $38; //@line 9596
   $539 = $ReallocAsyncCtx5 + 80 | 0; //@line 9597
   HEAP32[$539 >> 2] = $40; //@line 9598
   $540 = $ReallocAsyncCtx5 + 84 | 0; //@line 9599
   HEAP32[$540 >> 2] = $42; //@line 9600
   $541 = $ReallocAsyncCtx5 + 88 | 0; //@line 9601
   HEAP32[$541 >> 2] = $44; //@line 9602
   $542 = $ReallocAsyncCtx5 + 92 | 0; //@line 9603
   HEAP32[$542 >> 2] = $46; //@line 9604
   $543 = $ReallocAsyncCtx5 + 96 | 0; //@line 9605
   HEAP32[$543 >> 2] = $48; //@line 9606
   $544 = $ReallocAsyncCtx5 + 100 | 0; //@line 9607
   HEAP32[$544 >> 2] = $50; //@line 9608
   $545 = $ReallocAsyncCtx5 + 104 | 0; //@line 9609
   HEAP8[$545 >> 0] = $507; //@line 9610
   $546 = $ReallocAsyncCtx5 + 108 | 0; //@line 9611
   HEAP32[$546 >> 2] = $54; //@line 9612
   $547 = $ReallocAsyncCtx5 + 112 | 0; //@line 9613
   HEAP32[$547 >> 2] = $56; //@line 9614
   $548 = $ReallocAsyncCtx5 + 116 | 0; //@line 9615
   HEAP32[$548 >> 2] = $58; //@line 9616
   $549 = $ReallocAsyncCtx5 + 120 | 0; //@line 9617
   HEAP32[$549 >> 2] = $60; //@line 9618
   $550 = $ReallocAsyncCtx5 + 124 | 0; //@line 9619
   HEAP8[$550 >> 0] = $513; //@line 9620
   $551 = $ReallocAsyncCtx5 + 128 | 0; //@line 9621
   HEAP32[$551 >> 2] = $64; //@line 9622
   $552 = $ReallocAsyncCtx5 + 132 | 0; //@line 9623
   HEAP32[$552 >> 2] = $66; //@line 9624
   $553 = $ReallocAsyncCtx5 + 136 | 0; //@line 9625
   HEAP32[$553 >> 2] = $68; //@line 9626
   $554 = $ReallocAsyncCtx5 + 140 | 0; //@line 9627
   HEAP32[$554 >> 2] = $70; //@line 9628
   $555 = $ReallocAsyncCtx5 + 144 | 0; //@line 9629
   HEAP32[$555 >> 2] = $72; //@line 9630
   $556 = $ReallocAsyncCtx5 + 148 | 0; //@line 9631
   HEAP32[$556 >> 2] = $74; //@line 9632
   $557 = $ReallocAsyncCtx5 + 152 | 0; //@line 9633
   HEAP8[$557 >> 0] = $76; //@line 9634
   $558 = $ReallocAsyncCtx5 + 156 | 0; //@line 9635
   HEAP32[$558 >> 2] = $78; //@line 9636
   $559 = $ReallocAsyncCtx5 + 160 | 0; //@line 9637
   HEAP8[$559 >> 0] = $515; //@line 9638
   $560 = $ReallocAsyncCtx5 + 164 | 0; //@line 9639
   HEAP32[$560 >> 2] = $82; //@line 9640
   $561 = $ReallocAsyncCtx5 + 168 | 0; //@line 9641
   HEAP32[$561 >> 2] = $84; //@line 9642
   $562 = $ReallocAsyncCtx5 + 172 | 0; //@line 9643
   HEAP32[$562 >> 2] = $86; //@line 9644
   $563 = $ReallocAsyncCtx5 + 176 | 0; //@line 9645
   HEAP32[$563 >> 2] = $88; //@line 9646
   $564 = $ReallocAsyncCtx5 + 180 | 0; //@line 9647
   HEAP32[$564 >> 2] = $90; //@line 9648
   $565 = $ReallocAsyncCtx5 + 184 | 0; //@line 9649
   HEAP32[$565 >> 2] = $92; //@line 9650
   $566 = $ReallocAsyncCtx5 + 188 | 0; //@line 9651
   HEAP32[$566 >> 2] = $$0107$be; //@line 9652
   $567 = $ReallocAsyncCtx5 + 192 | 0; //@line 9653
   HEAP32[$567 >> 2] = $96; //@line 9654
   $568 = $ReallocAsyncCtx5 + 196 | 0; //@line 9655
   HEAP32[$568 >> 2] = $98; //@line 9656
   $569 = $ReallocAsyncCtx5 + 200 | 0; //@line 9657
   HEAP32[$569 >> 2] = $100; //@line 9658
   $570 = $ReallocAsyncCtx5 + 204 | 0; //@line 9659
   HEAP32[$570 >> 2] = $102; //@line 9660
   $571 = $ReallocAsyncCtx5 + 208 | 0; //@line 9661
   HEAP32[$571 >> 2] = $104; //@line 9662
   $572 = $ReallocAsyncCtx5 + 212 | 0; //@line 9663
   HEAP32[$572 >> 2] = $106; //@line 9664
   $573 = $ReallocAsyncCtx5 + 216 | 0; //@line 9665
   HEAP32[$573 >> 2] = $108; //@line 9666
   $574 = $ReallocAsyncCtx5 + 220 | 0; //@line 9667
   HEAP32[$574 >> 2] = $110; //@line 9668
   $575 = $ReallocAsyncCtx5 + 224 | 0; //@line 9669
   HEAP32[$575 >> 2] = $112; //@line 9670
   $576 = $ReallocAsyncCtx5 + 228 | 0; //@line 9671
   HEAP32[$576 >> 2] = $114; //@line 9672
   $577 = $ReallocAsyncCtx5 + 232 | 0; //@line 9673
   HEAP32[$577 >> 2] = $116; //@line 9674
   $578 = $ReallocAsyncCtx5 + 236 | 0; //@line 9675
   HEAP8[$578 >> 0] = $118; //@line 9676
   $579 = $ReallocAsyncCtx5 + 237 | 0; //@line 9677
   HEAP8[$579 >> 0] = $120; //@line 9678
   $580 = $ReallocAsyncCtx5 + 240 | 0; //@line 9679
   HEAP32[$580 >> 2] = $122; //@line 9680
   $581 = $ReallocAsyncCtx5 + 244 | 0; //@line 9681
   HEAP32[$581 >> 2] = $124; //@line 9682
   sp = STACKTOP; //@line 9683
   return;
  }
  HEAP8[___async_retval >> 0] = $519 & 1; //@line 9688
  ___async_unwind = 0; //@line 9689
  HEAP32[$ReallocAsyncCtx5 >> 2] = 493; //@line 9690
  $520 = $ReallocAsyncCtx5 + 4 | 0; //@line 9691
  HEAP32[$520 >> 2] = $2; //@line 9692
  $521 = $ReallocAsyncCtx5 + 8 | 0; //@line 9693
  HEAP32[$521 >> 2] = $4; //@line 9694
  $522 = $ReallocAsyncCtx5 + 12 | 0; //@line 9695
  HEAP32[$522 >> 2] = $6; //@line 9696
  $523 = $ReallocAsyncCtx5 + 16 | 0; //@line 9697
  HEAP32[$523 >> 2] = $8; //@line 9698
  $524 = $ReallocAsyncCtx5 + 20 | 0; //@line 9699
  HEAP32[$524 >> 2] = $10; //@line 9700
  $525 = $ReallocAsyncCtx5 + 24 | 0; //@line 9701
  HEAP32[$525 >> 2] = $12; //@line 9702
  $526 = $ReallocAsyncCtx5 + 28 | 0; //@line 9703
  HEAP32[$526 >> 2] = $14; //@line 9704
  $527 = $ReallocAsyncCtx5 + 32 | 0; //@line 9705
  HEAP32[$527 >> 2] = $16; //@line 9706
  $528 = $ReallocAsyncCtx5 + 36 | 0; //@line 9707
  HEAP32[$528 >> 2] = $18; //@line 9708
  $529 = $ReallocAsyncCtx5 + 40 | 0; //@line 9709
  HEAP32[$529 >> 2] = $20; //@line 9710
  $530 = $ReallocAsyncCtx5 + 44 | 0; //@line 9711
  HEAP32[$530 >> 2] = $511; //@line 9712
  $531 = $ReallocAsyncCtx5 + 48 | 0; //@line 9713
  HEAP32[$531 >> 2] = $24; //@line 9714
  $532 = $ReallocAsyncCtx5 + 52 | 0; //@line 9715
  HEAP32[$532 >> 2] = $26; //@line 9716
  $533 = $ReallocAsyncCtx5 + 56 | 0; //@line 9717
  HEAP32[$533 >> 2] = $28; //@line 9718
  $534 = $ReallocAsyncCtx5 + 60 | 0; //@line 9719
  HEAP32[$534 >> 2] = $30; //@line 9720
  $535 = $ReallocAsyncCtx5 + 64 | 0; //@line 9721
  HEAP32[$535 >> 2] = $32; //@line 9722
  $536 = $ReallocAsyncCtx5 + 68 | 0; //@line 9723
  HEAP32[$536 >> 2] = $34; //@line 9724
  $537 = $ReallocAsyncCtx5 + 72 | 0; //@line 9725
  HEAP32[$537 >> 2] = $36; //@line 9726
  $538 = $ReallocAsyncCtx5 + 76 | 0; //@line 9727
  HEAP32[$538 >> 2] = $38; //@line 9728
  $539 = $ReallocAsyncCtx5 + 80 | 0; //@line 9729
  HEAP32[$539 >> 2] = $40; //@line 9730
  $540 = $ReallocAsyncCtx5 + 84 | 0; //@line 9731
  HEAP32[$540 >> 2] = $42; //@line 9732
  $541 = $ReallocAsyncCtx5 + 88 | 0; //@line 9733
  HEAP32[$541 >> 2] = $44; //@line 9734
  $542 = $ReallocAsyncCtx5 + 92 | 0; //@line 9735
  HEAP32[$542 >> 2] = $46; //@line 9736
  $543 = $ReallocAsyncCtx5 + 96 | 0; //@line 9737
  HEAP32[$543 >> 2] = $48; //@line 9738
  $544 = $ReallocAsyncCtx5 + 100 | 0; //@line 9739
  HEAP32[$544 >> 2] = $50; //@line 9740
  $545 = $ReallocAsyncCtx5 + 104 | 0; //@line 9741
  HEAP8[$545 >> 0] = $507; //@line 9742
  $546 = $ReallocAsyncCtx5 + 108 | 0; //@line 9743
  HEAP32[$546 >> 2] = $54; //@line 9744
  $547 = $ReallocAsyncCtx5 + 112 | 0; //@line 9745
  HEAP32[$547 >> 2] = $56; //@line 9746
  $548 = $ReallocAsyncCtx5 + 116 | 0; //@line 9747
  HEAP32[$548 >> 2] = $58; //@line 9748
  $549 = $ReallocAsyncCtx5 + 120 | 0; //@line 9749
  HEAP32[$549 >> 2] = $60; //@line 9750
  $550 = $ReallocAsyncCtx5 + 124 | 0; //@line 9751
  HEAP8[$550 >> 0] = $513; //@line 9752
  $551 = $ReallocAsyncCtx5 + 128 | 0; //@line 9753
  HEAP32[$551 >> 2] = $64; //@line 9754
  $552 = $ReallocAsyncCtx5 + 132 | 0; //@line 9755
  HEAP32[$552 >> 2] = $66; //@line 9756
  $553 = $ReallocAsyncCtx5 + 136 | 0; //@line 9757
  HEAP32[$553 >> 2] = $68; //@line 9758
  $554 = $ReallocAsyncCtx5 + 140 | 0; //@line 9759
  HEAP32[$554 >> 2] = $70; //@line 9760
  $555 = $ReallocAsyncCtx5 + 144 | 0; //@line 9761
  HEAP32[$555 >> 2] = $72; //@line 9762
  $556 = $ReallocAsyncCtx5 + 148 | 0; //@line 9763
  HEAP32[$556 >> 2] = $74; //@line 9764
  $557 = $ReallocAsyncCtx5 + 152 | 0; //@line 9765
  HEAP8[$557 >> 0] = $76; //@line 9766
  $558 = $ReallocAsyncCtx5 + 156 | 0; //@line 9767
  HEAP32[$558 >> 2] = $78; //@line 9768
  $559 = $ReallocAsyncCtx5 + 160 | 0; //@line 9769
  HEAP8[$559 >> 0] = $515; //@line 9770
  $560 = $ReallocAsyncCtx5 + 164 | 0; //@line 9771
  HEAP32[$560 >> 2] = $82; //@line 9772
  $561 = $ReallocAsyncCtx5 + 168 | 0; //@line 9773
  HEAP32[$561 >> 2] = $84; //@line 9774
  $562 = $ReallocAsyncCtx5 + 172 | 0; //@line 9775
  HEAP32[$562 >> 2] = $86; //@line 9776
  $563 = $ReallocAsyncCtx5 + 176 | 0; //@line 9777
  HEAP32[$563 >> 2] = $88; //@line 9778
  $564 = $ReallocAsyncCtx5 + 180 | 0; //@line 9779
  HEAP32[$564 >> 2] = $90; //@line 9780
  $565 = $ReallocAsyncCtx5 + 184 | 0; //@line 9781
  HEAP32[$565 >> 2] = $92; //@line 9782
  $566 = $ReallocAsyncCtx5 + 188 | 0; //@line 9783
  HEAP32[$566 >> 2] = $$0107$be; //@line 9784
  $567 = $ReallocAsyncCtx5 + 192 | 0; //@line 9785
  HEAP32[$567 >> 2] = $96; //@line 9786
  $568 = $ReallocAsyncCtx5 + 196 | 0; //@line 9787
  HEAP32[$568 >> 2] = $98; //@line 9788
  $569 = $ReallocAsyncCtx5 + 200 | 0; //@line 9789
  HEAP32[$569 >> 2] = $100; //@line 9790
  $570 = $ReallocAsyncCtx5 + 204 | 0; //@line 9791
  HEAP32[$570 >> 2] = $102; //@line 9792
  $571 = $ReallocAsyncCtx5 + 208 | 0; //@line 9793
  HEAP32[$571 >> 2] = $104; //@line 9794
  $572 = $ReallocAsyncCtx5 + 212 | 0; //@line 9795
  HEAP32[$572 >> 2] = $106; //@line 9796
  $573 = $ReallocAsyncCtx5 + 216 | 0; //@line 9797
  HEAP32[$573 >> 2] = $108; //@line 9798
  $574 = $ReallocAsyncCtx5 + 220 | 0; //@line 9799
  HEAP32[$574 >> 2] = $110; //@line 9800
  $575 = $ReallocAsyncCtx5 + 224 | 0; //@line 9801
  HEAP32[$575 >> 2] = $112; //@line 9802
  $576 = $ReallocAsyncCtx5 + 228 | 0; //@line 9803
  HEAP32[$576 >> 2] = $114; //@line 9804
  $577 = $ReallocAsyncCtx5 + 232 | 0; //@line 9805
  HEAP32[$577 >> 2] = $116; //@line 9806
  $578 = $ReallocAsyncCtx5 + 236 | 0; //@line 9807
  HEAP8[$578 >> 0] = $118; //@line 9808
  $579 = $ReallocAsyncCtx5 + 237 | 0; //@line 9809
  HEAP8[$579 >> 0] = $120; //@line 9810
  $580 = $ReallocAsyncCtx5 + 240 | 0; //@line 9811
  HEAP32[$580 >> 2] = $122; //@line 9812
  $581 = $ReallocAsyncCtx5 + 244 | 0; //@line 9813
  HEAP32[$581 >> 2] = $124; //@line 9814
  sp = STACKTOP; //@line 9815
  return;
 } else if ((label | 0) == 30) {
  $598 = HEAP8[$16 + ($127 & 255) >> 0] | 0; //@line 9822
  $611 = $$0$be + 5 << 24 >> 24; //@line 9835
  $618 = (HEAPU8[$16 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$16 + ($$0$be + 2 & 255) >> 0] | HEAPU8[$16 + ($$0$be + 4 & 255) >> 0] << 16) * 100 | 0; //@line 9842
  $621 = HEAP32[(HEAP32[$38 >> 2] | 0) + 48 >> 2] | 0; //@line 9845
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(232) | 0; //@line 9846
  $622 = FUNCTION_TABLE_iiii[$621 & 31]($96, $598, $618) | 0; //@line 9847
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 494; //@line 9850
   $623 = $ReallocAsyncCtx6 + 4 | 0; //@line 9851
   HEAP32[$623 >> 2] = $2; //@line 9852
   $624 = $ReallocAsyncCtx6 + 8 | 0; //@line 9853
   HEAP32[$624 >> 2] = $4; //@line 9854
   $625 = $ReallocAsyncCtx6 + 12 | 0; //@line 9855
   HEAP32[$625 >> 2] = $6; //@line 9856
   $626 = $ReallocAsyncCtx6 + 16 | 0; //@line 9857
   HEAP32[$626 >> 2] = $8; //@line 9858
   $627 = $ReallocAsyncCtx6 + 20 | 0; //@line 9859
   HEAP32[$627 >> 2] = $10; //@line 9860
   $628 = $ReallocAsyncCtx6 + 24 | 0; //@line 9861
   HEAP32[$628 >> 2] = $12; //@line 9862
   $629 = $ReallocAsyncCtx6 + 28 | 0; //@line 9863
   HEAP32[$629 >> 2] = $14; //@line 9864
   $630 = $ReallocAsyncCtx6 + 32 | 0; //@line 9865
   HEAP32[$630 >> 2] = $16; //@line 9866
   $631 = $ReallocAsyncCtx6 + 36 | 0; //@line 9867
   HEAP32[$631 >> 2] = $18; //@line 9868
   $632 = $ReallocAsyncCtx6 + 40 | 0; //@line 9869
   HEAP32[$632 >> 2] = $20; //@line 9870
   $633 = $ReallocAsyncCtx6 + 44 | 0; //@line 9871
   HEAP8[$633 >> 0] = $611; //@line 9872
   $634 = $ReallocAsyncCtx6 + 48 | 0; //@line 9873
   HEAP32[$634 >> 2] = $24; //@line 9874
   $635 = $ReallocAsyncCtx6 + 52 | 0; //@line 9875
   HEAP32[$635 >> 2] = $26; //@line 9876
   $636 = $ReallocAsyncCtx6 + 56 | 0; //@line 9877
   HEAP32[$636 >> 2] = $28; //@line 9878
   $637 = $ReallocAsyncCtx6 + 60 | 0; //@line 9879
   HEAP32[$637 >> 2] = $30; //@line 9880
   $638 = $ReallocAsyncCtx6 + 64 | 0; //@line 9881
   HEAP32[$638 >> 2] = $32; //@line 9882
   $639 = $ReallocAsyncCtx6 + 68 | 0; //@line 9883
   HEAP32[$639 >> 2] = $34; //@line 9884
   $640 = $ReallocAsyncCtx6 + 72 | 0; //@line 9885
   HEAP32[$640 >> 2] = $36; //@line 9886
   $641 = $ReallocAsyncCtx6 + 76 | 0; //@line 9887
   HEAP32[$641 >> 2] = $38; //@line 9888
   $642 = $ReallocAsyncCtx6 + 80 | 0; //@line 9889
   HEAP32[$642 >> 2] = $40; //@line 9890
   $643 = $ReallocAsyncCtx6 + 84 | 0; //@line 9891
   HEAP32[$643 >> 2] = $42; //@line 9892
   $644 = $ReallocAsyncCtx6 + 88 | 0; //@line 9893
   HEAP32[$644 >> 2] = $44; //@line 9894
   $645 = $ReallocAsyncCtx6 + 92 | 0; //@line 9895
   HEAP32[$645 >> 2] = $46; //@line 9896
   $646 = $ReallocAsyncCtx6 + 96 | 0; //@line 9897
   HEAP32[$646 >> 2] = $48; //@line 9898
   $647 = $ReallocAsyncCtx6 + 100 | 0; //@line 9899
   HEAP32[$647 >> 2] = $50; //@line 9900
   $648 = $ReallocAsyncCtx6 + 104 | 0; //@line 9901
   HEAP32[$648 >> 2] = $54; //@line 9902
   $649 = $ReallocAsyncCtx6 + 108 | 0; //@line 9903
   HEAP32[$649 >> 2] = $56; //@line 9904
   $650 = $ReallocAsyncCtx6 + 112 | 0; //@line 9905
   HEAP32[$650 >> 2] = $58; //@line 9906
   $651 = $ReallocAsyncCtx6 + 116 | 0; //@line 9907
   HEAP32[$651 >> 2] = $60; //@line 9908
   $652 = $ReallocAsyncCtx6 + 120 | 0; //@line 9909
   HEAP32[$652 >> 2] = $64; //@line 9910
   $653 = $ReallocAsyncCtx6 + 124 | 0; //@line 9911
   HEAP32[$653 >> 2] = $66; //@line 9912
   $654 = $ReallocAsyncCtx6 + 128 | 0; //@line 9913
   HEAP32[$654 >> 2] = $68; //@line 9914
   $655 = $ReallocAsyncCtx6 + 132 | 0; //@line 9915
   HEAP32[$655 >> 2] = $70; //@line 9916
   $656 = $ReallocAsyncCtx6 + 136 | 0; //@line 9917
   HEAP32[$656 >> 2] = $72; //@line 9918
   $657 = $ReallocAsyncCtx6 + 140 | 0; //@line 9919
   HEAP32[$657 >> 2] = $74; //@line 9920
   $658 = $ReallocAsyncCtx6 + 144 | 0; //@line 9921
   HEAP8[$658 >> 0] = $76; //@line 9922
   $659 = $ReallocAsyncCtx6 + 148 | 0; //@line 9923
   HEAP32[$659 >> 2] = $78; //@line 9924
   $660 = $ReallocAsyncCtx6 + 152 | 0; //@line 9925
   HEAP32[$660 >> 2] = $82; //@line 9926
   $661 = $ReallocAsyncCtx6 + 156 | 0; //@line 9927
   HEAP32[$661 >> 2] = $84; //@line 9928
   $662 = $ReallocAsyncCtx6 + 160 | 0; //@line 9929
   HEAP32[$662 >> 2] = $86; //@line 9930
   $663 = $ReallocAsyncCtx6 + 164 | 0; //@line 9931
   HEAP32[$663 >> 2] = $88; //@line 9932
   $664 = $ReallocAsyncCtx6 + 168 | 0; //@line 9933
   HEAP32[$664 >> 2] = $90; //@line 9934
   $665 = $ReallocAsyncCtx6 + 172 | 0; //@line 9935
   HEAP32[$665 >> 2] = $92; //@line 9936
   $666 = $ReallocAsyncCtx6 + 176 | 0; //@line 9937
   HEAP32[$666 >> 2] = $96; //@line 9938
   $667 = $ReallocAsyncCtx6 + 180 | 0; //@line 9939
   HEAP32[$667 >> 2] = $98; //@line 9940
   $668 = $ReallocAsyncCtx6 + 184 | 0; //@line 9941
   HEAP32[$668 >> 2] = $100; //@line 9942
   $669 = $ReallocAsyncCtx6 + 188 | 0; //@line 9943
   HEAP32[$669 >> 2] = $102; //@line 9944
   $670 = $ReallocAsyncCtx6 + 192 | 0; //@line 9945
   HEAP32[$670 >> 2] = $104; //@line 9946
   $671 = $ReallocAsyncCtx6 + 196 | 0; //@line 9947
   HEAP32[$671 >> 2] = $106; //@line 9948
   $672 = $ReallocAsyncCtx6 + 200 | 0; //@line 9949
   HEAP32[$672 >> 2] = $108; //@line 9950
   $673 = $ReallocAsyncCtx6 + 204 | 0; //@line 9951
   HEAP32[$673 >> 2] = $110; //@line 9952
   $674 = $ReallocAsyncCtx6 + 208 | 0; //@line 9953
   HEAP32[$674 >> 2] = $112; //@line 9954
   $675 = $ReallocAsyncCtx6 + 212 | 0; //@line 9955
   HEAP32[$675 >> 2] = $114; //@line 9956
   $676 = $ReallocAsyncCtx6 + 216 | 0; //@line 9957
   HEAP32[$676 >> 2] = $116; //@line 9958
   $677 = $ReallocAsyncCtx6 + 220 | 0; //@line 9959
   HEAP8[$677 >> 0] = $118; //@line 9960
   $678 = $ReallocAsyncCtx6 + 221 | 0; //@line 9961
   HEAP8[$678 >> 0] = $120; //@line 9962
   $679 = $ReallocAsyncCtx6 + 224 | 0; //@line 9963
   HEAP32[$679 >> 2] = $122; //@line 9964
   $680 = $ReallocAsyncCtx6 + 228 | 0; //@line 9965
   HEAP32[$680 >> 2] = $124; //@line 9966
   sp = STACKTOP; //@line 9967
   return;
  }
  HEAP8[___async_retval >> 0] = $622; //@line 9971
  ___async_unwind = 0; //@line 9972
  HEAP32[$ReallocAsyncCtx6 >> 2] = 494; //@line 9973
  $623 = $ReallocAsyncCtx6 + 4 | 0; //@line 9974
  HEAP32[$623 >> 2] = $2; //@line 9975
  $624 = $ReallocAsyncCtx6 + 8 | 0; //@line 9976
  HEAP32[$624 >> 2] = $4; //@line 9977
  $625 = $ReallocAsyncCtx6 + 12 | 0; //@line 9978
  HEAP32[$625 >> 2] = $6; //@line 9979
  $626 = $ReallocAsyncCtx6 + 16 | 0; //@line 9980
  HEAP32[$626 >> 2] = $8; //@line 9981
  $627 = $ReallocAsyncCtx6 + 20 | 0; //@line 9982
  HEAP32[$627 >> 2] = $10; //@line 9983
  $628 = $ReallocAsyncCtx6 + 24 | 0; //@line 9984
  HEAP32[$628 >> 2] = $12; //@line 9985
  $629 = $ReallocAsyncCtx6 + 28 | 0; //@line 9986
  HEAP32[$629 >> 2] = $14; //@line 9987
  $630 = $ReallocAsyncCtx6 + 32 | 0; //@line 9988
  HEAP32[$630 >> 2] = $16; //@line 9989
  $631 = $ReallocAsyncCtx6 + 36 | 0; //@line 9990
  HEAP32[$631 >> 2] = $18; //@line 9991
  $632 = $ReallocAsyncCtx6 + 40 | 0; //@line 9992
  HEAP32[$632 >> 2] = $20; //@line 9993
  $633 = $ReallocAsyncCtx6 + 44 | 0; //@line 9994
  HEAP8[$633 >> 0] = $611; //@line 9995
  $634 = $ReallocAsyncCtx6 + 48 | 0; //@line 9996
  HEAP32[$634 >> 2] = $24; //@line 9997
  $635 = $ReallocAsyncCtx6 + 52 | 0; //@line 9998
  HEAP32[$635 >> 2] = $26; //@line 9999
  $636 = $ReallocAsyncCtx6 + 56 | 0; //@line 10000
  HEAP32[$636 >> 2] = $28; //@line 10001
  $637 = $ReallocAsyncCtx6 + 60 | 0; //@line 10002
  HEAP32[$637 >> 2] = $30; //@line 10003
  $638 = $ReallocAsyncCtx6 + 64 | 0; //@line 10004
  HEAP32[$638 >> 2] = $32; //@line 10005
  $639 = $ReallocAsyncCtx6 + 68 | 0; //@line 10006
  HEAP32[$639 >> 2] = $34; //@line 10007
  $640 = $ReallocAsyncCtx6 + 72 | 0; //@line 10008
  HEAP32[$640 >> 2] = $36; //@line 10009
  $641 = $ReallocAsyncCtx6 + 76 | 0; //@line 10010
  HEAP32[$641 >> 2] = $38; //@line 10011
  $642 = $ReallocAsyncCtx6 + 80 | 0; //@line 10012
  HEAP32[$642 >> 2] = $40; //@line 10013
  $643 = $ReallocAsyncCtx6 + 84 | 0; //@line 10014
  HEAP32[$643 >> 2] = $42; //@line 10015
  $644 = $ReallocAsyncCtx6 + 88 | 0; //@line 10016
  HEAP32[$644 >> 2] = $44; //@line 10017
  $645 = $ReallocAsyncCtx6 + 92 | 0; //@line 10018
  HEAP32[$645 >> 2] = $46; //@line 10019
  $646 = $ReallocAsyncCtx6 + 96 | 0; //@line 10020
  HEAP32[$646 >> 2] = $48; //@line 10021
  $647 = $ReallocAsyncCtx6 + 100 | 0; //@line 10022
  HEAP32[$647 >> 2] = $50; //@line 10023
  $648 = $ReallocAsyncCtx6 + 104 | 0; //@line 10024
  HEAP32[$648 >> 2] = $54; //@line 10025
  $649 = $ReallocAsyncCtx6 + 108 | 0; //@line 10026
  HEAP32[$649 >> 2] = $56; //@line 10027
  $650 = $ReallocAsyncCtx6 + 112 | 0; //@line 10028
  HEAP32[$650 >> 2] = $58; //@line 10029
  $651 = $ReallocAsyncCtx6 + 116 | 0; //@line 10030
  HEAP32[$651 >> 2] = $60; //@line 10031
  $652 = $ReallocAsyncCtx6 + 120 | 0; //@line 10032
  HEAP32[$652 >> 2] = $64; //@line 10033
  $653 = $ReallocAsyncCtx6 + 124 | 0; //@line 10034
  HEAP32[$653 >> 2] = $66; //@line 10035
  $654 = $ReallocAsyncCtx6 + 128 | 0; //@line 10036
  HEAP32[$654 >> 2] = $68; //@line 10037
  $655 = $ReallocAsyncCtx6 + 132 | 0; //@line 10038
  HEAP32[$655 >> 2] = $70; //@line 10039
  $656 = $ReallocAsyncCtx6 + 136 | 0; //@line 10040
  HEAP32[$656 >> 2] = $72; //@line 10041
  $657 = $ReallocAsyncCtx6 + 140 | 0; //@line 10042
  HEAP32[$657 >> 2] = $74; //@line 10043
  $658 = $ReallocAsyncCtx6 + 144 | 0; //@line 10044
  HEAP8[$658 >> 0] = $76; //@line 10045
  $659 = $ReallocAsyncCtx6 + 148 | 0; //@line 10046
  HEAP32[$659 >> 2] = $78; //@line 10047
  $660 = $ReallocAsyncCtx6 + 152 | 0; //@line 10048
  HEAP32[$660 >> 2] = $82; //@line 10049
  $661 = $ReallocAsyncCtx6 + 156 | 0; //@line 10050
  HEAP32[$661 >> 2] = $84; //@line 10051
  $662 = $ReallocAsyncCtx6 + 160 | 0; //@line 10052
  HEAP32[$662 >> 2] = $86; //@line 10053
  $663 = $ReallocAsyncCtx6 + 164 | 0; //@line 10054
  HEAP32[$663 >> 2] = $88; //@line 10055
  $664 = $ReallocAsyncCtx6 + 168 | 0; //@line 10056
  HEAP32[$664 >> 2] = $90; //@line 10057
  $665 = $ReallocAsyncCtx6 + 172 | 0; //@line 10058
  HEAP32[$665 >> 2] = $92; //@line 10059
  $666 = $ReallocAsyncCtx6 + 176 | 0; //@line 10060
  HEAP32[$666 >> 2] = $96; //@line 10061
  $667 = $ReallocAsyncCtx6 + 180 | 0; //@line 10062
  HEAP32[$667 >> 2] = $98; //@line 10063
  $668 = $ReallocAsyncCtx6 + 184 | 0; //@line 10064
  HEAP32[$668 >> 2] = $100; //@line 10065
  $669 = $ReallocAsyncCtx6 + 188 | 0; //@line 10066
  HEAP32[$669 >> 2] = $102; //@line 10067
  $670 = $ReallocAsyncCtx6 + 192 | 0; //@line 10068
  HEAP32[$670 >> 2] = $104; //@line 10069
  $671 = $ReallocAsyncCtx6 + 196 | 0; //@line 10070
  HEAP32[$671 >> 2] = $106; //@line 10071
  $672 = $ReallocAsyncCtx6 + 200 | 0; //@line 10072
  HEAP32[$672 >> 2] = $108; //@line 10073
  $673 = $ReallocAsyncCtx6 + 204 | 0; //@line 10074
  HEAP32[$673 >> 2] = $110; //@line 10075
  $674 = $ReallocAsyncCtx6 + 208 | 0; //@line 10076
  HEAP32[$674 >> 2] = $112; //@line 10077
  $675 = $ReallocAsyncCtx6 + 212 | 0; //@line 10078
  HEAP32[$675 >> 2] = $114; //@line 10079
  $676 = $ReallocAsyncCtx6 + 216 | 0; //@line 10080
  HEAP32[$676 >> 2] = $116; //@line 10081
  $677 = $ReallocAsyncCtx6 + 220 | 0; //@line 10082
  HEAP8[$677 >> 0] = $118; //@line 10083
  $678 = $ReallocAsyncCtx6 + 221 | 0; //@line 10084
  HEAP8[$678 >> 0] = $120; //@line 10085
  $679 = $ReallocAsyncCtx6 + 224 | 0; //@line 10086
  HEAP32[$679 >> 2] = $122; //@line 10087
  $680 = $ReallocAsyncCtx6 + 228 | 0; //@line 10088
  HEAP32[$680 >> 2] = $124; //@line 10089
  sp = STACKTOP; //@line 10090
  return;
 } else if ((label | 0) == 33) {
  HEAP32[___async_retval >> 2] = $$0107$be; //@line 10095
  return;
 }
}
function __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0$i = 0, $$0107$be = 0, $$0109129 = 0, $$1$lcssa = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $121 = 0, $132 = 0, $133 = 0, $14 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $211 = 0, $214 = 0, $219 = 0, $22 = 0, $220 = 0, $226 = 0, $230 = 0, $233 = 0, $24 = 0, $240 = 0, $241 = 0, $247 = 0, $26 = 0, $266 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $337 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $4 = 0, $40 = 0, $403 = 0, $404 = 0, $418 = 0, $42 = 0, $439 = 0, $44 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $507 = 0, $511 = 0, $515 = 0, $52 = 0, $520 = 0, $521 = 0, $525 = 0, $529 = 0, $531 = 0, $533 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $604 = 0, $617 = 0, $62 = 0, $624 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $689 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $div = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 172
 $2 = HEAP8[$0 + 4 >> 0] | 0; //@line 174
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 176
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 178
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 180
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 182
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 184
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 186
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 188
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 190
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 192
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 194
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 196
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 198
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 200
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 202
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 204
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 206
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 208
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 210
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 212
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 214
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 216
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 218
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 220
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 222
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 224
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 226
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 228
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 230
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 232
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 234
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 236
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 238
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 240
 $70 = HEAP8[$0 + 140 >> 0] | 0; //@line 242
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 244
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 246
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 248
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 250
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 252
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 254
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 256
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 258
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 260
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 262
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 264
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 266
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 268
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 270
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 272
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 274
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 276
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 278
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 280
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 282
 $112 = HEAP8[$0 + 224 >> 0] | 0; //@line 284
 $114 = HEAP32[$0 + 228 >> 2] | 0; //@line 286
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 288
 $118 = HEAP32[$0 + 236 >> 2] | 0; //@line 290
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 292
 if (($AsyncRetVal & 7) == 7) {
  HEAP8[$30 >> 0] = HEAP8[$42 >> 0] | 0; //@line 297
  HEAP8[$50 >> 0] = HEAP8[$44 >> 0] | 0; //@line 299
  HEAP8[$56 >> 0] = HEAP8[$4 >> 0] | 0; //@line 301
 }
 $211 = HEAP8[$40 >> 0] | 0; //@line 303
 if (($211 & 255) > 4) {
  $div = ($211 & 255) / 5 | 0; //@line 306
  $214 = 128 - (HEAPU8[$64 >> 0] | 0) | 0; //@line 310
  $$0109129 = 0; //@line 311
  $220 = HEAP8[$76 >> 0] | 0; //@line 311
  while (1) {
   $219 = $220 & 255; //@line 313
   if (($214 - $219 | 0) > 1) {
    $226 = $220 + 2 << 24 >> 24; //@line 320
    HEAP8[$104 + 4 + $219 >> 0] = 3; //@line 322
    HEAP8[$76 >> 0] = $226; //@line 323
    HEAP8[($220 + 1 & 255) + ($104 + 4) >> 0] = $AsyncRetVal; //@line 324
    HEAP8[$106 >> 0] = 1; //@line 325
    $$0$i = 0; //@line 326
    $689 = $226; //@line 326
   } else {
    $$0$i = -1010; //@line 328
    $689 = $220; //@line 328
   }
   $$0109129 = $$0109129 + 1 << 24 >> 24; //@line 330
   if (($$0109129 & 255) >= ($div & 255)) {
    $$1$lcssa = $$0$i; //@line 335
    break;
   } else {
    $220 = $689; //@line 333
   }
  }
 } else {
  $$1$lcssa = $88; //@line 340
 }
 $$0$be = $82 + 255 + ($211 & 255) & 255; //@line 346
 $$0107$be = $$1$lcssa; //@line 346
 L13 : while (1) {
  if (($$0$be & 255) >= ($112 & 255)) {
   label = 38; //@line 350
   break;
  }
  $121 = $$0$be + 1 << 24 >> 24; //@line 354
  switch (HEAP8[$116 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 359
    break L13;
    break;
   }
  case 5:
   {
    label = 17; //@line 364
    break L13;
    break;
   }
  case 7:
   {
    label = 26; //@line 369
    break L13;
    break;
   }
  case 9:
   {
    label = 32; //@line 374
    break L13;
    break;
   }
  case 10:
   {
    label = 35; //@line 379
    break L13;
    break;
   }
  case 2:
   {
    HEAP32[$66 >> 2] = 0; //@line 384
    HEAP8[$68 >> 0] = HEAP8[$116 + ($121 & 255) >> 0] | 0; //@line 389
    HEAP8[$84 >> 0] = HEAP8[$116 + ($$0$be + 2 & 255) >> 0] | 0; //@line 394
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 395
    continue L13;
    break;
   }
  case 4:
   {
    $230 = $$0$be + 2 << 24 >> 24; //@line 400
    $233 = HEAP8[$116 + ($121 & 255) >> 0] | 0; //@line 403
    HEAP8[$114 >> 0] = $233; //@line 404
    HEAP16[$94 >> 1] = 1 << ($233 & 255); //@line 408
    $240 = HEAP8[$76 >> 0] | 0; //@line 412
    $241 = $240 & 255; //@line 413
    if ((128 - (HEAPU8[$64 >> 0] | 0) | 0) <= ($241 | 0)) {
     $$0$be = $230; //@line 416
     $$0107$be = -1010; //@line 416
     continue L13;
    }
    HEAP8[$76 >> 0] = $240 + 1 << 24 >> 24; //@line 421
    HEAP8[$104 + 4 + $241 >> 0] = 4; //@line 422
    HEAP8[$106 >> 0] = 1; //@line 423
    $$0$be = $230; //@line 424
    $$0107$be = 0; //@line 424
    continue L13;
    break;
   }
  case 6:
   {
    $337 = HEAP32[$86 >> 2] | 0; //@line 429
    if ($337 | 0) {
     label = 21; //@line 432
     break L13;
    }
    $403 = HEAP8[$76 >> 0] | 0; //@line 438
    $404 = $403 & 255; //@line 439
    if ((128 - (HEAPU8[$64 >> 0] | 0) - $404 | 0) <= 2) {
     $$0$be = $121; //@line 443
     $$0107$be = -1010; //@line 443
     continue L13;
    }
    HEAP8[$104 + 4 + $404 >> 0] = 6; //@line 448
    HEAP8[($403 + 1 & 255) + ($104 + 4) >> 0] = -1; //@line 452
    HEAP8[$76 >> 0] = $403 + 3 << 24 >> 24; //@line 454
    HEAP8[($403 + 2 & 255) + ($104 + 4) >> 0] = $70; //@line 457
    HEAP8[$106 >> 0] = 1; //@line 458
    $$0$be = $121; //@line 459
    $$0107$be = 0; //@line 459
    continue L13;
    break;
   }
  case 8:
   {
    $507 = $$0$be + 2 << 24 >> 24; //@line 464
    $511 = HEAP8[$116 + ($121 & 255) >> 0] & 15; //@line 468
    $515 = ($511 + ($511 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 473
    HEAP32[$32 >> 2] = $515; //@line 474
    HEAP32[$14 >> 2] = $515 + 1e3; //@line 476
    $520 = HEAP8[$76 >> 0] | 0; //@line 480
    $521 = $520 & 255; //@line 481
    if ((128 - (HEAPU8[$64 >> 0] | 0) | 0) <= ($521 | 0)) {
     $$0$be = $507; //@line 484
     $$0107$be = -1010; //@line 484
     continue L13;
    }
    HEAP8[$76 >> 0] = $520 + 1 << 24 >> 24; //@line 489
    HEAP8[$104 + 4 + $521 >> 0] = 8; //@line 490
    HEAP8[$48 >> 0] = 1; //@line 491
    HEAP8[$106 >> 0] = 1; //@line 492
    $$0$be = $507; //@line 493
    $$0107$be = 0; //@line 493
    continue L13;
    break;
   }
  default:
   {
    $$0$be = $121; //@line 498
    $$0107$be = -1013; //@line 498
    continue L13;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$42 >> 0] = 0; //@line 504
  HEAP8[$44 >> 0] = 0; //@line 505
  HEAP8[$4 >> 0] = 0; //@line 506
  HEAP8[$40 >> 0] = 0; //@line 507
  $132 = $121 & 255; //@line 508
  $133 = $132 + -1 | 0; //@line 509
  HEAP32[$100 >> 2] = $116 + $133; //@line 511
  HEAP8[$96 >> 0] = $24 - $133; //@line 514
  HEAP8[$108 >> 0] = HEAP8[$118 >> 0] | 0; //@line 516
  HEAP8[$8 >> 0] = HEAP8[$18 >> 0] | 0; //@line 518
  HEAP8[$22 >> 0] = HEAP8[$30 >> 0] | 0; //@line 520
  HEAP8[$62 >> 0] = HEAP8[$50 >> 0] | 0; //@line 522
  HEAP8[$78 >> 0] = HEAP8[$56 >> 0] | 0; //@line 524
  $144 = HEAP32[(HEAP32[$80 >> 2] | 0) + 36 >> 2] | 0; //@line 527
  $ReallocAsyncCtx = _emscripten_realloc_async_context(240) | 0; //@line 528
  $145 = FUNCTION_TABLE_iiiiiii[$144 & 3]($90, $34, $42, $44, $4, $40) | 0; //@line 529
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 489; //@line 532
   $146 = $ReallocAsyncCtx + 4 | 0; //@line 533
   HEAP8[$146 >> 0] = $2; //@line 534
   $147 = $ReallocAsyncCtx + 8 | 0; //@line 535
   HEAP32[$147 >> 2] = $4; //@line 536
   $148 = $ReallocAsyncCtx + 12 | 0; //@line 537
   HEAP32[$148 >> 2] = $6; //@line 538
   $149 = $ReallocAsyncCtx + 16 | 0; //@line 539
   HEAP32[$149 >> 2] = $8; //@line 540
   $150 = $ReallocAsyncCtx + 20 | 0; //@line 541
   HEAP32[$150 >> 2] = $10; //@line 542
   $151 = $ReallocAsyncCtx + 24 | 0; //@line 543
   HEAP32[$151 >> 2] = $12; //@line 544
   $152 = $ReallocAsyncCtx + 28 | 0; //@line 545
   HEAP32[$152 >> 2] = $14; //@line 546
   $153 = $ReallocAsyncCtx + 32 | 0; //@line 547
   HEAP32[$153 >> 2] = $16; //@line 548
   $154 = $ReallocAsyncCtx + 36 | 0; //@line 549
   HEAP32[$154 >> 2] = $18; //@line 550
   $155 = $ReallocAsyncCtx + 40 | 0; //@line 551
   HEAP32[$155 >> 2] = $20; //@line 552
   $156 = $ReallocAsyncCtx + 44 | 0; //@line 553
   HEAP32[$156 >> 2] = $22; //@line 554
   $157 = $ReallocAsyncCtx + 48 | 0; //@line 555
   HEAP32[$157 >> 2] = $24; //@line 556
   $158 = $ReallocAsyncCtx + 52 | 0; //@line 557
   HEAP32[$158 >> 2] = $26; //@line 558
   $159 = $ReallocAsyncCtx + 56 | 0; //@line 559
   HEAP32[$159 >> 2] = $28; //@line 560
   $160 = $ReallocAsyncCtx + 60 | 0; //@line 561
   HEAP32[$160 >> 2] = $30; //@line 562
   $161 = $ReallocAsyncCtx + 64 | 0; //@line 563
   HEAP32[$161 >> 2] = $32; //@line 564
   $162 = $ReallocAsyncCtx + 68 | 0; //@line 565
   HEAP32[$162 >> 2] = $34; //@line 566
   $163 = $ReallocAsyncCtx + 72 | 0; //@line 567
   HEAP32[$163 >> 2] = $36; //@line 568
   $164 = $ReallocAsyncCtx + 76 | 0; //@line 569
   HEAP32[$164 >> 2] = $38; //@line 570
   $165 = $ReallocAsyncCtx + 80 | 0; //@line 571
   HEAP32[$165 >> 2] = $40; //@line 572
   $166 = $ReallocAsyncCtx + 84 | 0; //@line 573
   HEAP32[$166 >> 2] = $42; //@line 574
   $167 = $ReallocAsyncCtx + 88 | 0; //@line 575
   HEAP32[$167 >> 2] = $44; //@line 576
   $168 = $ReallocAsyncCtx + 92 | 0; //@line 577
   HEAP32[$168 >> 2] = $46; //@line 578
   $169 = $ReallocAsyncCtx + 96 | 0; //@line 579
   HEAP32[$169 >> 2] = $48; //@line 580
   $170 = $ReallocAsyncCtx + 100 | 0; //@line 581
   HEAP32[$170 >> 2] = $50; //@line 582
   $171 = $ReallocAsyncCtx + 104 | 0; //@line 583
   HEAP32[$171 >> 2] = $52; //@line 584
   $172 = $ReallocAsyncCtx + 108 | 0; //@line 585
   HEAP32[$172 >> 2] = $54; //@line 586
   $173 = $ReallocAsyncCtx + 112 | 0; //@line 587
   HEAP32[$173 >> 2] = $56; //@line 588
   $174 = $ReallocAsyncCtx + 116 | 0; //@line 589
   HEAP32[$174 >> 2] = $58; //@line 590
   $175 = $ReallocAsyncCtx + 120 | 0; //@line 591
   HEAP32[$175 >> 2] = $60; //@line 592
   $176 = $ReallocAsyncCtx + 124 | 0; //@line 593
   HEAP32[$176 >> 2] = $62; //@line 594
   $177 = $ReallocAsyncCtx + 128 | 0; //@line 595
   HEAP32[$177 >> 2] = $64; //@line 596
   $178 = $ReallocAsyncCtx + 132 | 0; //@line 597
   HEAP32[$178 >> 2] = $66; //@line 598
   $179 = $ReallocAsyncCtx + 136 | 0; //@line 599
   HEAP32[$179 >> 2] = $68; //@line 600
   $180 = $ReallocAsyncCtx + 140 | 0; //@line 601
   HEAP8[$180 >> 0] = $70; //@line 602
   $181 = $ReallocAsyncCtx + 144 | 0; //@line 603
   HEAP32[$181 >> 2] = $72; //@line 604
   $182 = $ReallocAsyncCtx + 148 | 0; //@line 605
   HEAP32[$182 >> 2] = $74; //@line 606
   $183 = $ReallocAsyncCtx + 152 | 0; //@line 607
   HEAP32[$183 >> 2] = $76; //@line 608
   $184 = $ReallocAsyncCtx + 156 | 0; //@line 609
   HEAP32[$184 >> 2] = $78; //@line 610
   $185 = $ReallocAsyncCtx + 160 | 0; //@line 611
   HEAP32[$185 >> 2] = $80; //@line 612
   $186 = $ReallocAsyncCtx + 164 | 0; //@line 613
   HEAP32[$186 >> 2] = $132; //@line 614
   $187 = $ReallocAsyncCtx + 168 | 0; //@line 615
   HEAP32[$187 >> 2] = $84; //@line 616
   $188 = $ReallocAsyncCtx + 172 | 0; //@line 617
   HEAP32[$188 >> 2] = $86; //@line 618
   $189 = $ReallocAsyncCtx + 176 | 0; //@line 619
   HEAP32[$189 >> 2] = $$0107$be; //@line 620
   $190 = $ReallocAsyncCtx + 180 | 0; //@line 621
   HEAP32[$190 >> 2] = $90; //@line 622
   $191 = $ReallocAsyncCtx + 184 | 0; //@line 623
   HEAP32[$191 >> 2] = $92; //@line 624
   $192 = $ReallocAsyncCtx + 188 | 0; //@line 625
   HEAP32[$192 >> 2] = $94; //@line 626
   $193 = $ReallocAsyncCtx + 192 | 0; //@line 627
   HEAP32[$193 >> 2] = $96; //@line 628
   $194 = $ReallocAsyncCtx + 196 | 0; //@line 629
   HEAP32[$194 >> 2] = $98; //@line 630
   $195 = $ReallocAsyncCtx + 200 | 0; //@line 631
   HEAP32[$195 >> 2] = $100; //@line 632
   $196 = $ReallocAsyncCtx + 204 | 0; //@line 633
   HEAP32[$196 >> 2] = $102; //@line 634
   $197 = $ReallocAsyncCtx + 208 | 0; //@line 635
   HEAP32[$197 >> 2] = $104; //@line 636
   $198 = $ReallocAsyncCtx + 212 | 0; //@line 637
   HEAP32[$198 >> 2] = $106; //@line 638
   $199 = $ReallocAsyncCtx + 216 | 0; //@line 639
   HEAP32[$199 >> 2] = $108; //@line 640
   $200 = $ReallocAsyncCtx + 220 | 0; //@line 641
   HEAP32[$200 >> 2] = $110; //@line 642
   $201 = $ReallocAsyncCtx + 224 | 0; //@line 643
   HEAP8[$201 >> 0] = $112; //@line 644
   $202 = $ReallocAsyncCtx + 228 | 0; //@line 645
   HEAP32[$202 >> 2] = $114; //@line 646
   $203 = $ReallocAsyncCtx + 232 | 0; //@line 647
   HEAP32[$203 >> 2] = $116; //@line 648
   $204 = $ReallocAsyncCtx + 236 | 0; //@line 649
   HEAP32[$204 >> 2] = $118; //@line 650
   sp = STACKTOP; //@line 651
   return;
  }
  HEAP8[___async_retval >> 0] = $145; //@line 655
  ___async_unwind = 0; //@line 656
  HEAP32[$ReallocAsyncCtx >> 2] = 489; //@line 657
  $146 = $ReallocAsyncCtx + 4 | 0; //@line 658
  HEAP8[$146 >> 0] = $2; //@line 659
  $147 = $ReallocAsyncCtx + 8 | 0; //@line 660
  HEAP32[$147 >> 2] = $4; //@line 661
  $148 = $ReallocAsyncCtx + 12 | 0; //@line 662
  HEAP32[$148 >> 2] = $6; //@line 663
  $149 = $ReallocAsyncCtx + 16 | 0; //@line 664
  HEAP32[$149 >> 2] = $8; //@line 665
  $150 = $ReallocAsyncCtx + 20 | 0; //@line 666
  HEAP32[$150 >> 2] = $10; //@line 667
  $151 = $ReallocAsyncCtx + 24 | 0; //@line 668
  HEAP32[$151 >> 2] = $12; //@line 669
  $152 = $ReallocAsyncCtx + 28 | 0; //@line 670
  HEAP32[$152 >> 2] = $14; //@line 671
  $153 = $ReallocAsyncCtx + 32 | 0; //@line 672
  HEAP32[$153 >> 2] = $16; //@line 673
  $154 = $ReallocAsyncCtx + 36 | 0; //@line 674
  HEAP32[$154 >> 2] = $18; //@line 675
  $155 = $ReallocAsyncCtx + 40 | 0; //@line 676
  HEAP32[$155 >> 2] = $20; //@line 677
  $156 = $ReallocAsyncCtx + 44 | 0; //@line 678
  HEAP32[$156 >> 2] = $22; //@line 679
  $157 = $ReallocAsyncCtx + 48 | 0; //@line 680
  HEAP32[$157 >> 2] = $24; //@line 681
  $158 = $ReallocAsyncCtx + 52 | 0; //@line 682
  HEAP32[$158 >> 2] = $26; //@line 683
  $159 = $ReallocAsyncCtx + 56 | 0; //@line 684
  HEAP32[$159 >> 2] = $28; //@line 685
  $160 = $ReallocAsyncCtx + 60 | 0; //@line 686
  HEAP32[$160 >> 2] = $30; //@line 687
  $161 = $ReallocAsyncCtx + 64 | 0; //@line 688
  HEAP32[$161 >> 2] = $32; //@line 689
  $162 = $ReallocAsyncCtx + 68 | 0; //@line 690
  HEAP32[$162 >> 2] = $34; //@line 691
  $163 = $ReallocAsyncCtx + 72 | 0; //@line 692
  HEAP32[$163 >> 2] = $36; //@line 693
  $164 = $ReallocAsyncCtx + 76 | 0; //@line 694
  HEAP32[$164 >> 2] = $38; //@line 695
  $165 = $ReallocAsyncCtx + 80 | 0; //@line 696
  HEAP32[$165 >> 2] = $40; //@line 697
  $166 = $ReallocAsyncCtx + 84 | 0; //@line 698
  HEAP32[$166 >> 2] = $42; //@line 699
  $167 = $ReallocAsyncCtx + 88 | 0; //@line 700
  HEAP32[$167 >> 2] = $44; //@line 701
  $168 = $ReallocAsyncCtx + 92 | 0; //@line 702
  HEAP32[$168 >> 2] = $46; //@line 703
  $169 = $ReallocAsyncCtx + 96 | 0; //@line 704
  HEAP32[$169 >> 2] = $48; //@line 705
  $170 = $ReallocAsyncCtx + 100 | 0; //@line 706
  HEAP32[$170 >> 2] = $50; //@line 707
  $171 = $ReallocAsyncCtx + 104 | 0; //@line 708
  HEAP32[$171 >> 2] = $52; //@line 709
  $172 = $ReallocAsyncCtx + 108 | 0; //@line 710
  HEAP32[$172 >> 2] = $54; //@line 711
  $173 = $ReallocAsyncCtx + 112 | 0; //@line 712
  HEAP32[$173 >> 2] = $56; //@line 713
  $174 = $ReallocAsyncCtx + 116 | 0; //@line 714
  HEAP32[$174 >> 2] = $58; //@line 715
  $175 = $ReallocAsyncCtx + 120 | 0; //@line 716
  HEAP32[$175 >> 2] = $60; //@line 717
  $176 = $ReallocAsyncCtx + 124 | 0; //@line 718
  HEAP32[$176 >> 2] = $62; //@line 719
  $177 = $ReallocAsyncCtx + 128 | 0; //@line 720
  HEAP32[$177 >> 2] = $64; //@line 721
  $178 = $ReallocAsyncCtx + 132 | 0; //@line 722
  HEAP32[$178 >> 2] = $66; //@line 723
  $179 = $ReallocAsyncCtx + 136 | 0; //@line 724
  HEAP32[$179 >> 2] = $68; //@line 725
  $180 = $ReallocAsyncCtx + 140 | 0; //@line 726
  HEAP8[$180 >> 0] = $70; //@line 727
  $181 = $ReallocAsyncCtx + 144 | 0; //@line 728
  HEAP32[$181 >> 2] = $72; //@line 729
  $182 = $ReallocAsyncCtx + 148 | 0; //@line 730
  HEAP32[$182 >> 2] = $74; //@line 731
  $183 = $ReallocAsyncCtx + 152 | 0; //@line 732
  HEAP32[$183 >> 2] = $76; //@line 733
  $184 = $ReallocAsyncCtx + 156 | 0; //@line 734
  HEAP32[$184 >> 2] = $78; //@line 735
  $185 = $ReallocAsyncCtx + 160 | 0; //@line 736
  HEAP32[$185 >> 2] = $80; //@line 737
  $186 = $ReallocAsyncCtx + 164 | 0; //@line 738
  HEAP32[$186 >> 2] = $132; //@line 739
  $187 = $ReallocAsyncCtx + 168 | 0; //@line 740
  HEAP32[$187 >> 2] = $84; //@line 741
  $188 = $ReallocAsyncCtx + 172 | 0; //@line 742
  HEAP32[$188 >> 2] = $86; //@line 743
  $189 = $ReallocAsyncCtx + 176 | 0; //@line 744
  HEAP32[$189 >> 2] = $$0107$be; //@line 745
  $190 = $ReallocAsyncCtx + 180 | 0; //@line 746
  HEAP32[$190 >> 2] = $90; //@line 747
  $191 = $ReallocAsyncCtx + 184 | 0; //@line 748
  HEAP32[$191 >> 2] = $92; //@line 749
  $192 = $ReallocAsyncCtx + 188 | 0; //@line 750
  HEAP32[$192 >> 2] = $94; //@line 751
  $193 = $ReallocAsyncCtx + 192 | 0; //@line 752
  HEAP32[$193 >> 2] = $96; //@line 753
  $194 = $ReallocAsyncCtx + 196 | 0; //@line 754
  HEAP32[$194 >> 2] = $98; //@line 755
  $195 = $ReallocAsyncCtx + 200 | 0; //@line 756
  HEAP32[$195 >> 2] = $100; //@line 757
  $196 = $ReallocAsyncCtx + 204 | 0; //@line 758
  HEAP32[$196 >> 2] = $102; //@line 759
  $197 = $ReallocAsyncCtx + 208 | 0; //@line 760
  HEAP32[$197 >> 2] = $104; //@line 761
  $198 = $ReallocAsyncCtx + 212 | 0; //@line 762
  HEAP32[$198 >> 2] = $106; //@line 763
  $199 = $ReallocAsyncCtx + 216 | 0; //@line 764
  HEAP32[$199 >> 2] = $108; //@line 765
  $200 = $ReallocAsyncCtx + 220 | 0; //@line 766
  HEAP32[$200 >> 2] = $110; //@line 767
  $201 = $ReallocAsyncCtx + 224 | 0; //@line 768
  HEAP8[$201 >> 0] = $112; //@line 769
  $202 = $ReallocAsyncCtx + 228 | 0; //@line 770
  HEAP32[$202 >> 2] = $114; //@line 771
  $203 = $ReallocAsyncCtx + 232 | 0; //@line 772
  HEAP32[$203 >> 2] = $116; //@line 773
  $204 = $ReallocAsyncCtx + 236 | 0; //@line 774
  HEAP32[$204 >> 2] = $118; //@line 775
  sp = STACKTOP; //@line 776
  return;
 } else if ((label | 0) == 17) {
  $247 = HEAP8[$116 + ($121 & 255) >> 0] | 0; //@line 782
  HEAP8[$28 >> 0] = ($247 & 255) >>> 4 & 7; //@line 787
  HEAP8[$102 >> 0] = $247 & 15; //@line 789
  $266 = $$0$be + 5 << 24 >> 24; //@line 803
  HEAP32[$6 >> 2] = (HEAPU8[$116 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$116 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$116 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 811
  $276 = HEAP32[(HEAP32[$10 >> 2] | 0) + 40 >> 2] | 0; //@line 814
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(236) | 0; //@line 815
  $277 = FUNCTION_TABLE_iii[$276 & 31]($90, $46) | 0; //@line 816
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 490; //@line 819
   $278 = $ReallocAsyncCtx2 + 4 | 0; //@line 820
   HEAP8[$278 >> 0] = $2; //@line 821
   $279 = $ReallocAsyncCtx2 + 8 | 0; //@line 822
   HEAP32[$279 >> 2] = $4; //@line 823
   $280 = $ReallocAsyncCtx2 + 12 | 0; //@line 824
   HEAP32[$280 >> 2] = $6; //@line 825
   $281 = $ReallocAsyncCtx2 + 16 | 0; //@line 826
   HEAP32[$281 >> 2] = $8; //@line 827
   $282 = $ReallocAsyncCtx2 + 20 | 0; //@line 828
   HEAP32[$282 >> 2] = $10; //@line 829
   $283 = $ReallocAsyncCtx2 + 24 | 0; //@line 830
   HEAP8[$283 >> 0] = $266; //@line 831
   $284 = $ReallocAsyncCtx2 + 28 | 0; //@line 832
   HEAP32[$284 >> 2] = $14; //@line 833
   $285 = $ReallocAsyncCtx2 + 32 | 0; //@line 834
   HEAP32[$285 >> 2] = $16; //@line 835
   $286 = $ReallocAsyncCtx2 + 36 | 0; //@line 836
   HEAP32[$286 >> 2] = $12; //@line 837
   $287 = $ReallocAsyncCtx2 + 40 | 0; //@line 838
   HEAP32[$287 >> 2] = $18; //@line 839
   $288 = $ReallocAsyncCtx2 + 44 | 0; //@line 840
   HEAP32[$288 >> 2] = $20; //@line 841
   $289 = $ReallocAsyncCtx2 + 48 | 0; //@line 842
   HEAP32[$289 >> 2] = $22; //@line 843
   $290 = $ReallocAsyncCtx2 + 52 | 0; //@line 844
   HEAP32[$290 >> 2] = $24; //@line 845
   $291 = $ReallocAsyncCtx2 + 56 | 0; //@line 846
   HEAP32[$291 >> 2] = $26; //@line 847
   $292 = $ReallocAsyncCtx2 + 60 | 0; //@line 848
   HEAP32[$292 >> 2] = $28; //@line 849
   $293 = $ReallocAsyncCtx2 + 64 | 0; //@line 850
   HEAP32[$293 >> 2] = $30; //@line 851
   $294 = $ReallocAsyncCtx2 + 68 | 0; //@line 852
   HEAP32[$294 >> 2] = $32; //@line 853
   $295 = $ReallocAsyncCtx2 + 72 | 0; //@line 854
   HEAP32[$295 >> 2] = $34; //@line 855
   $296 = $ReallocAsyncCtx2 + 76 | 0; //@line 856
   HEAP32[$296 >> 2] = $36; //@line 857
   $297 = $ReallocAsyncCtx2 + 80 | 0; //@line 858
   HEAP32[$297 >> 2] = $38; //@line 859
   $298 = $ReallocAsyncCtx2 + 84 | 0; //@line 860
   HEAP32[$298 >> 2] = $40; //@line 861
   $299 = $ReallocAsyncCtx2 + 88 | 0; //@line 862
   HEAP32[$299 >> 2] = $42; //@line 863
   $300 = $ReallocAsyncCtx2 + 92 | 0; //@line 864
   HEAP32[$300 >> 2] = $44; //@line 865
   $301 = $ReallocAsyncCtx2 + 96 | 0; //@line 866
   HEAP32[$301 >> 2] = $46; //@line 867
   $302 = $ReallocAsyncCtx2 + 100 | 0; //@line 868
   HEAP32[$302 >> 2] = $48; //@line 869
   $303 = $ReallocAsyncCtx2 + 104 | 0; //@line 870
   HEAP32[$303 >> 2] = $50; //@line 871
   $304 = $ReallocAsyncCtx2 + 108 | 0; //@line 872
   HEAP32[$304 >> 2] = $52; //@line 873
   $305 = $ReallocAsyncCtx2 + 112 | 0; //@line 874
   HEAP32[$305 >> 2] = $54; //@line 875
   $306 = $ReallocAsyncCtx2 + 116 | 0; //@line 876
   HEAP32[$306 >> 2] = $56; //@line 877
   $307 = $ReallocAsyncCtx2 + 120 | 0; //@line 878
   HEAP32[$307 >> 2] = $58; //@line 879
   $308 = $ReallocAsyncCtx2 + 124 | 0; //@line 880
   HEAP32[$308 >> 2] = $60; //@line 881
   $309 = $ReallocAsyncCtx2 + 128 | 0; //@line 882
   HEAP32[$309 >> 2] = $62; //@line 883
   $310 = $ReallocAsyncCtx2 + 132 | 0; //@line 884
   HEAP32[$310 >> 2] = $64; //@line 885
   $311 = $ReallocAsyncCtx2 + 136 | 0; //@line 886
   HEAP32[$311 >> 2] = $66; //@line 887
   $312 = $ReallocAsyncCtx2 + 140 | 0; //@line 888
   HEAP32[$312 >> 2] = $68; //@line 889
   $313 = $ReallocAsyncCtx2 + 144 | 0; //@line 890
   HEAP8[$313 >> 0] = $70; //@line 891
   $314 = $ReallocAsyncCtx2 + 148 | 0; //@line 892
   HEAP32[$314 >> 2] = $72; //@line 893
   $315 = $ReallocAsyncCtx2 + 152 | 0; //@line 894
   HEAP32[$315 >> 2] = $74; //@line 895
   $316 = $ReallocAsyncCtx2 + 156 | 0; //@line 896
   HEAP32[$316 >> 2] = $76; //@line 897
   $317 = $ReallocAsyncCtx2 + 160 | 0; //@line 898
   HEAP32[$317 >> 2] = $78; //@line 899
   $318 = $ReallocAsyncCtx2 + 164 | 0; //@line 900
   HEAP32[$318 >> 2] = $80; //@line 901
   $319 = $ReallocAsyncCtx2 + 168 | 0; //@line 902
   HEAP32[$319 >> 2] = $84; //@line 903
   $320 = $ReallocAsyncCtx2 + 172 | 0; //@line 904
   HEAP32[$320 >> 2] = $86; //@line 905
   $321 = $ReallocAsyncCtx2 + 176 | 0; //@line 906
   HEAP32[$321 >> 2] = $90; //@line 907
   $322 = $ReallocAsyncCtx2 + 180 | 0; //@line 908
   HEAP32[$322 >> 2] = $92; //@line 909
   $323 = $ReallocAsyncCtx2 + 184 | 0; //@line 910
   HEAP32[$323 >> 2] = $94; //@line 911
   $324 = $ReallocAsyncCtx2 + 188 | 0; //@line 912
   HEAP32[$324 >> 2] = $96; //@line 913
   $325 = $ReallocAsyncCtx2 + 192 | 0; //@line 914
   HEAP32[$325 >> 2] = $98; //@line 915
   $326 = $ReallocAsyncCtx2 + 196 | 0; //@line 916
   HEAP32[$326 >> 2] = $100; //@line 917
   $327 = $ReallocAsyncCtx2 + 200 | 0; //@line 918
   HEAP32[$327 >> 2] = $102; //@line 919
   $328 = $ReallocAsyncCtx2 + 204 | 0; //@line 920
   HEAP32[$328 >> 2] = $104; //@line 921
   $329 = $ReallocAsyncCtx2 + 208 | 0; //@line 922
   HEAP32[$329 >> 2] = $106; //@line 923
   $330 = $ReallocAsyncCtx2 + 212 | 0; //@line 924
   HEAP32[$330 >> 2] = $108; //@line 925
   $331 = $ReallocAsyncCtx2 + 216 | 0; //@line 926
   HEAP32[$331 >> 2] = $110; //@line 927
   $332 = $ReallocAsyncCtx2 + 220 | 0; //@line 928
   HEAP8[$332 >> 0] = $112; //@line 929
   $333 = $ReallocAsyncCtx2 + 224 | 0; //@line 930
   HEAP32[$333 >> 2] = $114; //@line 931
   $334 = $ReallocAsyncCtx2 + 228 | 0; //@line 932
   HEAP32[$334 >> 2] = $116; //@line 933
   $335 = $ReallocAsyncCtx2 + 232 | 0; //@line 934
   HEAP32[$335 >> 2] = $118; //@line 935
   sp = STACKTOP; //@line 936
   return;
  }
  HEAP8[___async_retval >> 0] = $277; //@line 940
  ___async_unwind = 0; //@line 941
  HEAP32[$ReallocAsyncCtx2 >> 2] = 490; //@line 942
  $278 = $ReallocAsyncCtx2 + 4 | 0; //@line 943
  HEAP8[$278 >> 0] = $2; //@line 944
  $279 = $ReallocAsyncCtx2 + 8 | 0; //@line 945
  HEAP32[$279 >> 2] = $4; //@line 946
  $280 = $ReallocAsyncCtx2 + 12 | 0; //@line 947
  HEAP32[$280 >> 2] = $6; //@line 948
  $281 = $ReallocAsyncCtx2 + 16 | 0; //@line 949
  HEAP32[$281 >> 2] = $8; //@line 950
  $282 = $ReallocAsyncCtx2 + 20 | 0; //@line 951
  HEAP32[$282 >> 2] = $10; //@line 952
  $283 = $ReallocAsyncCtx2 + 24 | 0; //@line 953
  HEAP8[$283 >> 0] = $266; //@line 954
  $284 = $ReallocAsyncCtx2 + 28 | 0; //@line 955
  HEAP32[$284 >> 2] = $14; //@line 956
  $285 = $ReallocAsyncCtx2 + 32 | 0; //@line 957
  HEAP32[$285 >> 2] = $16; //@line 958
  $286 = $ReallocAsyncCtx2 + 36 | 0; //@line 959
  HEAP32[$286 >> 2] = $12; //@line 960
  $287 = $ReallocAsyncCtx2 + 40 | 0; //@line 961
  HEAP32[$287 >> 2] = $18; //@line 962
  $288 = $ReallocAsyncCtx2 + 44 | 0; //@line 963
  HEAP32[$288 >> 2] = $20; //@line 964
  $289 = $ReallocAsyncCtx2 + 48 | 0; //@line 965
  HEAP32[$289 >> 2] = $22; //@line 966
  $290 = $ReallocAsyncCtx2 + 52 | 0; //@line 967
  HEAP32[$290 >> 2] = $24; //@line 968
  $291 = $ReallocAsyncCtx2 + 56 | 0; //@line 969
  HEAP32[$291 >> 2] = $26; //@line 970
  $292 = $ReallocAsyncCtx2 + 60 | 0; //@line 971
  HEAP32[$292 >> 2] = $28; //@line 972
  $293 = $ReallocAsyncCtx2 + 64 | 0; //@line 973
  HEAP32[$293 >> 2] = $30; //@line 974
  $294 = $ReallocAsyncCtx2 + 68 | 0; //@line 975
  HEAP32[$294 >> 2] = $32; //@line 976
  $295 = $ReallocAsyncCtx2 + 72 | 0; //@line 977
  HEAP32[$295 >> 2] = $34; //@line 978
  $296 = $ReallocAsyncCtx2 + 76 | 0; //@line 979
  HEAP32[$296 >> 2] = $36; //@line 980
  $297 = $ReallocAsyncCtx2 + 80 | 0; //@line 981
  HEAP32[$297 >> 2] = $38; //@line 982
  $298 = $ReallocAsyncCtx2 + 84 | 0; //@line 983
  HEAP32[$298 >> 2] = $40; //@line 984
  $299 = $ReallocAsyncCtx2 + 88 | 0; //@line 985
  HEAP32[$299 >> 2] = $42; //@line 986
  $300 = $ReallocAsyncCtx2 + 92 | 0; //@line 987
  HEAP32[$300 >> 2] = $44; //@line 988
  $301 = $ReallocAsyncCtx2 + 96 | 0; //@line 989
  HEAP32[$301 >> 2] = $46; //@line 990
  $302 = $ReallocAsyncCtx2 + 100 | 0; //@line 991
  HEAP32[$302 >> 2] = $48; //@line 992
  $303 = $ReallocAsyncCtx2 + 104 | 0; //@line 993
  HEAP32[$303 >> 2] = $50; //@line 994
  $304 = $ReallocAsyncCtx2 + 108 | 0; //@line 995
  HEAP32[$304 >> 2] = $52; //@line 996
  $305 = $ReallocAsyncCtx2 + 112 | 0; //@line 997
  HEAP32[$305 >> 2] = $54; //@line 998
  $306 = $ReallocAsyncCtx2 + 116 | 0; //@line 999
  HEAP32[$306 >> 2] = $56; //@line 1000
  $307 = $ReallocAsyncCtx2 + 120 | 0; //@line 1001
  HEAP32[$307 >> 2] = $58; //@line 1002
  $308 = $ReallocAsyncCtx2 + 124 | 0; //@line 1003
  HEAP32[$308 >> 2] = $60; //@line 1004
  $309 = $ReallocAsyncCtx2 + 128 | 0; //@line 1005
  HEAP32[$309 >> 2] = $62; //@line 1006
  $310 = $ReallocAsyncCtx2 + 132 | 0; //@line 1007
  HEAP32[$310 >> 2] = $64; //@line 1008
  $311 = $ReallocAsyncCtx2 + 136 | 0; //@line 1009
  HEAP32[$311 >> 2] = $66; //@line 1010
  $312 = $ReallocAsyncCtx2 + 140 | 0; //@line 1011
  HEAP32[$312 >> 2] = $68; //@line 1012
  $313 = $ReallocAsyncCtx2 + 144 | 0; //@line 1013
  HEAP8[$313 >> 0] = $70; //@line 1014
  $314 = $ReallocAsyncCtx2 + 148 | 0; //@line 1015
  HEAP32[$314 >> 2] = $72; //@line 1016
  $315 = $ReallocAsyncCtx2 + 152 | 0; //@line 1017
  HEAP32[$315 >> 2] = $74; //@line 1018
  $316 = $ReallocAsyncCtx2 + 156 | 0; //@line 1019
  HEAP32[$316 >> 2] = $76; //@line 1020
  $317 = $ReallocAsyncCtx2 + 160 | 0; //@line 1021
  HEAP32[$317 >> 2] = $78; //@line 1022
  $318 = $ReallocAsyncCtx2 + 164 | 0; //@line 1023
  HEAP32[$318 >> 2] = $80; //@line 1024
  $319 = $ReallocAsyncCtx2 + 168 | 0; //@line 1025
  HEAP32[$319 >> 2] = $84; //@line 1026
  $320 = $ReallocAsyncCtx2 + 172 | 0; //@line 1027
  HEAP32[$320 >> 2] = $86; //@line 1028
  $321 = $ReallocAsyncCtx2 + 176 | 0; //@line 1029
  HEAP32[$321 >> 2] = $90; //@line 1030
  $322 = $ReallocAsyncCtx2 + 180 | 0; //@line 1031
  HEAP32[$322 >> 2] = $92; //@line 1032
  $323 = $ReallocAsyncCtx2 + 184 | 0; //@line 1033
  HEAP32[$323 >> 2] = $94; //@line 1034
  $324 = $ReallocAsyncCtx2 + 188 | 0; //@line 1035
  HEAP32[$324 >> 2] = $96; //@line 1036
  $325 = $ReallocAsyncCtx2 + 192 | 0; //@line 1037
  HEAP32[$325 >> 2] = $98; //@line 1038
  $326 = $ReallocAsyncCtx2 + 196 | 0; //@line 1039
  HEAP32[$326 >> 2] = $100; //@line 1040
  $327 = $ReallocAsyncCtx2 + 200 | 0; //@line 1041
  HEAP32[$327 >> 2] = $102; //@line 1042
  $328 = $ReallocAsyncCtx2 + 204 | 0; //@line 1043
  HEAP32[$328 >> 2] = $104; //@line 1044
  $329 = $ReallocAsyncCtx2 + 208 | 0; //@line 1045
  HEAP32[$329 >> 2] = $106; //@line 1046
  $330 = $ReallocAsyncCtx2 + 212 | 0; //@line 1047
  HEAP32[$330 >> 2] = $108; //@line 1048
  $331 = $ReallocAsyncCtx2 + 216 | 0; //@line 1049
  HEAP32[$331 >> 2] = $110; //@line 1050
  $332 = $ReallocAsyncCtx2 + 220 | 0; //@line 1051
  HEAP8[$332 >> 0] = $112; //@line 1052
  $333 = $ReallocAsyncCtx2 + 224 | 0; //@line 1053
  HEAP32[$333 >> 2] = $114; //@line 1054
  $334 = $ReallocAsyncCtx2 + 228 | 0; //@line 1055
  HEAP32[$334 >> 2] = $116; //@line 1056
  $335 = $ReallocAsyncCtx2 + 232 | 0; //@line 1057
  HEAP32[$335 >> 2] = $118; //@line 1058
  sp = STACKTOP; //@line 1059
  return;
 } else if ((label | 0) == 21) {
  $339 = HEAP32[$337 >> 2] | 0; //@line 1063
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(232) | 0; //@line 1064
  $340 = FUNCTION_TABLE_ii[$339 & 15]($74) | 0; //@line 1065
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 491; //@line 1068
   $341 = $ReallocAsyncCtx3 + 4 | 0; //@line 1069
   HEAP32[$341 >> 2] = $14; //@line 1070
   $342 = $ReallocAsyncCtx3 + 8 | 0; //@line 1071
   HEAP32[$342 >> 2] = $4; //@line 1072
   $343 = $ReallocAsyncCtx3 + 12 | 0; //@line 1073
   HEAP32[$343 >> 2] = $6; //@line 1074
   $344 = $ReallocAsyncCtx3 + 16 | 0; //@line 1075
   HEAP32[$344 >> 2] = $8; //@line 1076
   $345 = $ReallocAsyncCtx3 + 20 | 0; //@line 1077
   HEAP32[$345 >> 2] = $10; //@line 1078
   $346 = $ReallocAsyncCtx3 + 24 | 0; //@line 1079
   HEAP32[$346 >> 2] = $118; //@line 1080
   $347 = $ReallocAsyncCtx3 + 28 | 0; //@line 1081
   HEAP32[$347 >> 2] = $114; //@line 1082
   $348 = $ReallocAsyncCtx3 + 32 | 0; //@line 1083
   HEAP32[$348 >> 2] = $116; //@line 1084
   $349 = $ReallocAsyncCtx3 + 36 | 0; //@line 1085
   HEAP32[$349 >> 2] = $18; //@line 1086
   $350 = $ReallocAsyncCtx3 + 40 | 0; //@line 1087
   HEAP32[$350 >> 2] = $20; //@line 1088
   $351 = $ReallocAsyncCtx3 + 44 | 0; //@line 1089
   HEAP32[$351 >> 2] = $22; //@line 1090
   $352 = $ReallocAsyncCtx3 + 48 | 0; //@line 1091
   HEAP32[$352 >> 2] = $24; //@line 1092
   $353 = $ReallocAsyncCtx3 + 52 | 0; //@line 1093
   HEAP32[$353 >> 2] = $26; //@line 1094
   $354 = $ReallocAsyncCtx3 + 56 | 0; //@line 1095
   HEAP32[$354 >> 2] = $28; //@line 1096
   $355 = $ReallocAsyncCtx3 + 60 | 0; //@line 1097
   HEAP32[$355 >> 2] = $30; //@line 1098
   $356 = $ReallocAsyncCtx3 + 64 | 0; //@line 1099
   HEAP32[$356 >> 2] = $32; //@line 1100
   $357 = $ReallocAsyncCtx3 + 68 | 0; //@line 1101
   HEAP32[$357 >> 2] = $34; //@line 1102
   $358 = $ReallocAsyncCtx3 + 72 | 0; //@line 1103
   HEAP32[$358 >> 2] = $36; //@line 1104
   $359 = $ReallocAsyncCtx3 + 76 | 0; //@line 1105
   HEAP32[$359 >> 2] = $38; //@line 1106
   $360 = $ReallocAsyncCtx3 + 80 | 0; //@line 1107
   HEAP32[$360 >> 2] = $40; //@line 1108
   $361 = $ReallocAsyncCtx3 + 84 | 0; //@line 1109
   HEAP32[$361 >> 2] = $42; //@line 1110
   $362 = $ReallocAsyncCtx3 + 88 | 0; //@line 1111
   HEAP32[$362 >> 2] = $44; //@line 1112
   $363 = $ReallocAsyncCtx3 + 92 | 0; //@line 1113
   HEAP32[$363 >> 2] = $46; //@line 1114
   $364 = $ReallocAsyncCtx3 + 96 | 0; //@line 1115
   HEAP32[$364 >> 2] = $48; //@line 1116
   $365 = $ReallocAsyncCtx3 + 100 | 0; //@line 1117
   HEAP32[$365 >> 2] = $50; //@line 1118
   $366 = $ReallocAsyncCtx3 + 104 | 0; //@line 1119
   HEAP32[$366 >> 2] = $52; //@line 1120
   $367 = $ReallocAsyncCtx3 + 108 | 0; //@line 1121
   HEAP32[$367 >> 2] = $54; //@line 1122
   $368 = $ReallocAsyncCtx3 + 112 | 0; //@line 1123
   HEAP32[$368 >> 2] = $56; //@line 1124
   $369 = $ReallocAsyncCtx3 + 116 | 0; //@line 1125
   HEAP32[$369 >> 2] = $58; //@line 1126
   $370 = $ReallocAsyncCtx3 + 120 | 0; //@line 1127
   HEAP32[$370 >> 2] = $60; //@line 1128
   $371 = $ReallocAsyncCtx3 + 124 | 0; //@line 1129
   HEAP32[$371 >> 2] = $62; //@line 1130
   $372 = $ReallocAsyncCtx3 + 128 | 0; //@line 1131
   HEAP32[$372 >> 2] = $64; //@line 1132
   $373 = $ReallocAsyncCtx3 + 132 | 0; //@line 1133
   HEAP32[$373 >> 2] = $66; //@line 1134
   $374 = $ReallocAsyncCtx3 + 136 | 0; //@line 1135
   HEAP32[$374 >> 2] = $68; //@line 1136
   $375 = $ReallocAsyncCtx3 + 140 | 0; //@line 1137
   HEAP8[$375 >> 0] = $70; //@line 1138
   $376 = $ReallocAsyncCtx3 + 144 | 0; //@line 1139
   HEAP32[$376 >> 2] = $72; //@line 1140
   $377 = $ReallocAsyncCtx3 + 148 | 0; //@line 1141
   HEAP32[$377 >> 2] = $74; //@line 1142
   $378 = $ReallocAsyncCtx3 + 152 | 0; //@line 1143
   HEAP32[$378 >> 2] = $76; //@line 1144
   $379 = $ReallocAsyncCtx3 + 156 | 0; //@line 1145
   HEAP32[$379 >> 2] = $78; //@line 1146
   $380 = $ReallocAsyncCtx3 + 160 | 0; //@line 1147
   HEAP32[$380 >> 2] = $80; //@line 1148
   $381 = $ReallocAsyncCtx3 + 164 | 0; //@line 1149
   HEAP32[$381 >> 2] = $84; //@line 1150
   $382 = $ReallocAsyncCtx3 + 168 | 0; //@line 1151
   HEAP32[$382 >> 2] = $86; //@line 1152
   $383 = $ReallocAsyncCtx3 + 172 | 0; //@line 1153
   HEAP32[$383 >> 2] = $90; //@line 1154
   $384 = $ReallocAsyncCtx3 + 176 | 0; //@line 1155
   HEAP32[$384 >> 2] = $92; //@line 1156
   $385 = $ReallocAsyncCtx3 + 180 | 0; //@line 1157
   HEAP32[$385 >> 2] = $94; //@line 1158
   $386 = $ReallocAsyncCtx3 + 184 | 0; //@line 1159
   HEAP32[$386 >> 2] = $96; //@line 1160
   $387 = $ReallocAsyncCtx3 + 188 | 0; //@line 1161
   HEAP32[$387 >> 2] = $98; //@line 1162
   $388 = $ReallocAsyncCtx3 + 192 | 0; //@line 1163
   HEAP8[$388 >> 0] = $121; //@line 1164
   $389 = $ReallocAsyncCtx3 + 196 | 0; //@line 1165
   HEAP32[$389 >> 2] = $100; //@line 1166
   $390 = $ReallocAsyncCtx3 + 200 | 0; //@line 1167
   HEAP32[$390 >> 2] = $102; //@line 1168
   $391 = $ReallocAsyncCtx3 + 204 | 0; //@line 1169
   HEAP32[$391 >> 2] = $104; //@line 1170
   $392 = $ReallocAsyncCtx3 + 208 | 0; //@line 1171
   HEAP32[$392 >> 2] = $106; //@line 1172
   $393 = $ReallocAsyncCtx3 + 212 | 0; //@line 1173
   HEAP32[$393 >> 2] = $108; //@line 1174
   $394 = $ReallocAsyncCtx3 + 216 | 0; //@line 1175
   HEAP32[$394 >> 2] = $110; //@line 1176
   $395 = $ReallocAsyncCtx3 + 220 | 0; //@line 1177
   HEAP8[$395 >> 0] = $112; //@line 1178
   $396 = $ReallocAsyncCtx3 + 221 | 0; //@line 1179
   HEAP8[$396 >> 0] = $2; //@line 1180
   $397 = $ReallocAsyncCtx3 + 224 | 0; //@line 1181
   HEAP32[$397 >> 2] = $16; //@line 1182
   $398 = $ReallocAsyncCtx3 + 228 | 0; //@line 1183
   HEAP32[$398 >> 2] = $12; //@line 1184
   sp = STACKTOP; //@line 1185
   return;
  }
  HEAP8[___async_retval >> 0] = $340; //@line 1189
  ___async_unwind = 0; //@line 1190
  HEAP32[$ReallocAsyncCtx3 >> 2] = 491; //@line 1191
  $341 = $ReallocAsyncCtx3 + 4 | 0; //@line 1192
  HEAP32[$341 >> 2] = $14; //@line 1193
  $342 = $ReallocAsyncCtx3 + 8 | 0; //@line 1194
  HEAP32[$342 >> 2] = $4; //@line 1195
  $343 = $ReallocAsyncCtx3 + 12 | 0; //@line 1196
  HEAP32[$343 >> 2] = $6; //@line 1197
  $344 = $ReallocAsyncCtx3 + 16 | 0; //@line 1198
  HEAP32[$344 >> 2] = $8; //@line 1199
  $345 = $ReallocAsyncCtx3 + 20 | 0; //@line 1200
  HEAP32[$345 >> 2] = $10; //@line 1201
  $346 = $ReallocAsyncCtx3 + 24 | 0; //@line 1202
  HEAP32[$346 >> 2] = $118; //@line 1203
  $347 = $ReallocAsyncCtx3 + 28 | 0; //@line 1204
  HEAP32[$347 >> 2] = $114; //@line 1205
  $348 = $ReallocAsyncCtx3 + 32 | 0; //@line 1206
  HEAP32[$348 >> 2] = $116; //@line 1207
  $349 = $ReallocAsyncCtx3 + 36 | 0; //@line 1208
  HEAP32[$349 >> 2] = $18; //@line 1209
  $350 = $ReallocAsyncCtx3 + 40 | 0; //@line 1210
  HEAP32[$350 >> 2] = $20; //@line 1211
  $351 = $ReallocAsyncCtx3 + 44 | 0; //@line 1212
  HEAP32[$351 >> 2] = $22; //@line 1213
  $352 = $ReallocAsyncCtx3 + 48 | 0; //@line 1214
  HEAP32[$352 >> 2] = $24; //@line 1215
  $353 = $ReallocAsyncCtx3 + 52 | 0; //@line 1216
  HEAP32[$353 >> 2] = $26; //@line 1217
  $354 = $ReallocAsyncCtx3 + 56 | 0; //@line 1218
  HEAP32[$354 >> 2] = $28; //@line 1219
  $355 = $ReallocAsyncCtx3 + 60 | 0; //@line 1220
  HEAP32[$355 >> 2] = $30; //@line 1221
  $356 = $ReallocAsyncCtx3 + 64 | 0; //@line 1222
  HEAP32[$356 >> 2] = $32; //@line 1223
  $357 = $ReallocAsyncCtx3 + 68 | 0; //@line 1224
  HEAP32[$357 >> 2] = $34; //@line 1225
  $358 = $ReallocAsyncCtx3 + 72 | 0; //@line 1226
  HEAP32[$358 >> 2] = $36; //@line 1227
  $359 = $ReallocAsyncCtx3 + 76 | 0; //@line 1228
  HEAP32[$359 >> 2] = $38; //@line 1229
  $360 = $ReallocAsyncCtx3 + 80 | 0; //@line 1230
  HEAP32[$360 >> 2] = $40; //@line 1231
  $361 = $ReallocAsyncCtx3 + 84 | 0; //@line 1232
  HEAP32[$361 >> 2] = $42; //@line 1233
  $362 = $ReallocAsyncCtx3 + 88 | 0; //@line 1234
  HEAP32[$362 >> 2] = $44; //@line 1235
  $363 = $ReallocAsyncCtx3 + 92 | 0; //@line 1236
  HEAP32[$363 >> 2] = $46; //@line 1237
  $364 = $ReallocAsyncCtx3 + 96 | 0; //@line 1238
  HEAP32[$364 >> 2] = $48; //@line 1239
  $365 = $ReallocAsyncCtx3 + 100 | 0; //@line 1240
  HEAP32[$365 >> 2] = $50; //@line 1241
  $366 = $ReallocAsyncCtx3 + 104 | 0; //@line 1242
  HEAP32[$366 >> 2] = $52; //@line 1243
  $367 = $ReallocAsyncCtx3 + 108 | 0; //@line 1244
  HEAP32[$367 >> 2] = $54; //@line 1245
  $368 = $ReallocAsyncCtx3 + 112 | 0; //@line 1246
  HEAP32[$368 >> 2] = $56; //@line 1247
  $369 = $ReallocAsyncCtx3 + 116 | 0; //@line 1248
  HEAP32[$369 >> 2] = $58; //@line 1249
  $370 = $ReallocAsyncCtx3 + 120 | 0; //@line 1250
  HEAP32[$370 >> 2] = $60; //@line 1251
  $371 = $ReallocAsyncCtx3 + 124 | 0; //@line 1252
  HEAP32[$371 >> 2] = $62; //@line 1253
  $372 = $ReallocAsyncCtx3 + 128 | 0; //@line 1254
  HEAP32[$372 >> 2] = $64; //@line 1255
  $373 = $ReallocAsyncCtx3 + 132 | 0; //@line 1256
  HEAP32[$373 >> 2] = $66; //@line 1257
  $374 = $ReallocAsyncCtx3 + 136 | 0; //@line 1258
  HEAP32[$374 >> 2] = $68; //@line 1259
  $375 = $ReallocAsyncCtx3 + 140 | 0; //@line 1260
  HEAP8[$375 >> 0] = $70; //@line 1261
  $376 = $ReallocAsyncCtx3 + 144 | 0; //@line 1262
  HEAP32[$376 >> 2] = $72; //@line 1263
  $377 = $ReallocAsyncCtx3 + 148 | 0; //@line 1264
  HEAP32[$377 >> 2] = $74; //@line 1265
  $378 = $ReallocAsyncCtx3 + 152 | 0; //@line 1266
  HEAP32[$378 >> 2] = $76; //@line 1267
  $379 = $ReallocAsyncCtx3 + 156 | 0; //@line 1268
  HEAP32[$379 >> 2] = $78; //@line 1269
  $380 = $ReallocAsyncCtx3 + 160 | 0; //@line 1270
  HEAP32[$380 >> 2] = $80; //@line 1271
  $381 = $ReallocAsyncCtx3 + 164 | 0; //@line 1272
  HEAP32[$381 >> 2] = $84; //@line 1273
  $382 = $ReallocAsyncCtx3 + 168 | 0; //@line 1274
  HEAP32[$382 >> 2] = $86; //@line 1275
  $383 = $ReallocAsyncCtx3 + 172 | 0; //@line 1276
  HEAP32[$383 >> 2] = $90; //@line 1277
  $384 = $ReallocAsyncCtx3 + 176 | 0; //@line 1278
  HEAP32[$384 >> 2] = $92; //@line 1279
  $385 = $ReallocAsyncCtx3 + 180 | 0; //@line 1280
  HEAP32[$385 >> 2] = $94; //@line 1281
  $386 = $ReallocAsyncCtx3 + 184 | 0; //@line 1282
  HEAP32[$386 >> 2] = $96; //@line 1283
  $387 = $ReallocAsyncCtx3 + 188 | 0; //@line 1284
  HEAP32[$387 >> 2] = $98; //@line 1285
  $388 = $ReallocAsyncCtx3 + 192 | 0; //@line 1286
  HEAP8[$388 >> 0] = $121; //@line 1287
  $389 = $ReallocAsyncCtx3 + 196 | 0; //@line 1288
  HEAP32[$389 >> 2] = $100; //@line 1289
  $390 = $ReallocAsyncCtx3 + 200 | 0; //@line 1290
  HEAP32[$390 >> 2] = $102; //@line 1291
  $391 = $ReallocAsyncCtx3 + 204 | 0; //@line 1292
  HEAP32[$391 >> 2] = $104; //@line 1293
  $392 = $ReallocAsyncCtx3 + 208 | 0; //@line 1294
  HEAP32[$392 >> 2] = $106; //@line 1295
  $393 = $ReallocAsyncCtx3 + 212 | 0; //@line 1296
  HEAP32[$393 >> 2] = $108; //@line 1297
  $394 = $ReallocAsyncCtx3 + 216 | 0; //@line 1298
  HEAP32[$394 >> 2] = $110; //@line 1299
  $395 = $ReallocAsyncCtx3 + 220 | 0; //@line 1300
  HEAP8[$395 >> 0] = $112; //@line 1301
  $396 = $ReallocAsyncCtx3 + 221 | 0; //@line 1302
  HEAP8[$396 >> 0] = $2; //@line 1303
  $397 = $ReallocAsyncCtx3 + 224 | 0; //@line 1304
  HEAP32[$397 >> 2] = $16; //@line 1305
  $398 = $ReallocAsyncCtx3 + 228 | 0; //@line 1306
  HEAP32[$398 >> 2] = $12; //@line 1307
  sp = STACKTOP; //@line 1308
  return;
 } else if ((label | 0) == 26) {
  $418 = HEAP8[$116 + ($121 & 255) >> 0] | 0; //@line 1315
  HEAP32[$16 >> 2] = (HEAPU8[$116 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$116 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$116 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 1336
  HEAP32[$92 >> 2] = 0; //@line 1337
  $439 = $$0$be + 6 << 24 >> 24; //@line 1338
  HEAP8[$98 >> 0] = HEAP8[$116 + ($$0$be + 5 & 255) >> 0] | 0; //@line 1342
  $445 = HEAP32[(HEAP32[$26 >> 2] | 0) + 8 >> 2] | 0; //@line 1345
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(232) | 0; //@line 1346
  $446 = FUNCTION_TABLE_iiii[$445 & 31]($90, $418, $12) | 0; //@line 1347
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 492; //@line 1350
   $447 = $ReallocAsyncCtx4 + 4 | 0; //@line 1351
   HEAP32[$447 >> 2] = $14; //@line 1352
   $448 = $ReallocAsyncCtx4 + 8 | 0; //@line 1353
   HEAP32[$448 >> 2] = $4; //@line 1354
   $449 = $ReallocAsyncCtx4 + 12 | 0; //@line 1355
   HEAP32[$449 >> 2] = $6; //@line 1356
   $450 = $ReallocAsyncCtx4 + 16 | 0; //@line 1357
   HEAP32[$450 >> 2] = $8; //@line 1358
   $451 = $ReallocAsyncCtx4 + 20 | 0; //@line 1359
   HEAP32[$451 >> 2] = $10; //@line 1360
   $452 = $ReallocAsyncCtx4 + 24 | 0; //@line 1361
   HEAP32[$452 >> 2] = $118; //@line 1362
   $453 = $ReallocAsyncCtx4 + 28 | 0; //@line 1363
   HEAP32[$453 >> 2] = $114; //@line 1364
   $454 = $ReallocAsyncCtx4 + 32 | 0; //@line 1365
   HEAP32[$454 >> 2] = $116; //@line 1366
   $455 = $ReallocAsyncCtx4 + 36 | 0; //@line 1367
   HEAP32[$455 >> 2] = $18; //@line 1368
   $456 = $ReallocAsyncCtx4 + 40 | 0; //@line 1369
   HEAP32[$456 >> 2] = $20; //@line 1370
   $457 = $ReallocAsyncCtx4 + 44 | 0; //@line 1371
   HEAP32[$457 >> 2] = $22; //@line 1372
   $458 = $ReallocAsyncCtx4 + 48 | 0; //@line 1373
   HEAP32[$458 >> 2] = $24; //@line 1374
   $459 = $ReallocAsyncCtx4 + 52 | 0; //@line 1375
   HEAP32[$459 >> 2] = $26; //@line 1376
   $460 = $ReallocAsyncCtx4 + 56 | 0; //@line 1377
   HEAP32[$460 >> 2] = $28; //@line 1378
   $461 = $ReallocAsyncCtx4 + 60 | 0; //@line 1379
   HEAP32[$461 >> 2] = $30; //@line 1380
   $462 = $ReallocAsyncCtx4 + 64 | 0; //@line 1381
   HEAP32[$462 >> 2] = $32; //@line 1382
   $463 = $ReallocAsyncCtx4 + 68 | 0; //@line 1383
   HEAP32[$463 >> 2] = $34; //@line 1384
   $464 = $ReallocAsyncCtx4 + 72 | 0; //@line 1385
   HEAP32[$464 >> 2] = $36; //@line 1386
   $465 = $ReallocAsyncCtx4 + 76 | 0; //@line 1387
   HEAP32[$465 >> 2] = $38; //@line 1388
   $466 = $ReallocAsyncCtx4 + 80 | 0; //@line 1389
   HEAP32[$466 >> 2] = $40; //@line 1390
   $467 = $ReallocAsyncCtx4 + 84 | 0; //@line 1391
   HEAP32[$467 >> 2] = $42; //@line 1392
   $468 = $ReallocAsyncCtx4 + 88 | 0; //@line 1393
   HEAP8[$468 >> 0] = $439; //@line 1394
   $469 = $ReallocAsyncCtx4 + 92 | 0; //@line 1395
   HEAP32[$469 >> 2] = $44; //@line 1396
   $470 = $ReallocAsyncCtx4 + 96 | 0; //@line 1397
   HEAP32[$470 >> 2] = $46; //@line 1398
   $471 = $ReallocAsyncCtx4 + 100 | 0; //@line 1399
   HEAP32[$471 >> 2] = $48; //@line 1400
   $472 = $ReallocAsyncCtx4 + 104 | 0; //@line 1401
   HEAP32[$472 >> 2] = $50; //@line 1402
   $473 = $ReallocAsyncCtx4 + 108 | 0; //@line 1403
   HEAP32[$473 >> 2] = $52; //@line 1404
   $474 = $ReallocAsyncCtx4 + 112 | 0; //@line 1405
   HEAP32[$474 >> 2] = $54; //@line 1406
   $475 = $ReallocAsyncCtx4 + 116 | 0; //@line 1407
   HEAP32[$475 >> 2] = $56; //@line 1408
   $476 = $ReallocAsyncCtx4 + 120 | 0; //@line 1409
   HEAP32[$476 >> 2] = $58; //@line 1410
   $477 = $ReallocAsyncCtx4 + 124 | 0; //@line 1411
   HEAP32[$477 >> 2] = $60; //@line 1412
   $478 = $ReallocAsyncCtx4 + 128 | 0; //@line 1413
   HEAP32[$478 >> 2] = $62; //@line 1414
   $479 = $ReallocAsyncCtx4 + 132 | 0; //@line 1415
   HEAP32[$479 >> 2] = $64; //@line 1416
   $480 = $ReallocAsyncCtx4 + 136 | 0; //@line 1417
   HEAP32[$480 >> 2] = $66; //@line 1418
   $481 = $ReallocAsyncCtx4 + 140 | 0; //@line 1419
   HEAP32[$481 >> 2] = $68; //@line 1420
   $482 = $ReallocAsyncCtx4 + 144 | 0; //@line 1421
   HEAP8[$482 >> 0] = $70; //@line 1422
   $483 = $ReallocAsyncCtx4 + 148 | 0; //@line 1423
   HEAP32[$483 >> 2] = $72; //@line 1424
   $484 = $ReallocAsyncCtx4 + 152 | 0; //@line 1425
   HEAP32[$484 >> 2] = $74; //@line 1426
   $485 = $ReallocAsyncCtx4 + 156 | 0; //@line 1427
   HEAP32[$485 >> 2] = $76; //@line 1428
   $486 = $ReallocAsyncCtx4 + 160 | 0; //@line 1429
   HEAP32[$486 >> 2] = $78; //@line 1430
   $487 = $ReallocAsyncCtx4 + 164 | 0; //@line 1431
   HEAP32[$487 >> 2] = $80; //@line 1432
   $488 = $ReallocAsyncCtx4 + 168 | 0; //@line 1433
   HEAP32[$488 >> 2] = $84; //@line 1434
   $489 = $ReallocAsyncCtx4 + 172 | 0; //@line 1435
   HEAP32[$489 >> 2] = $86; //@line 1436
   $490 = $ReallocAsyncCtx4 + 176 | 0; //@line 1437
   HEAP32[$490 >> 2] = $90; //@line 1438
   $491 = $ReallocAsyncCtx4 + 180 | 0; //@line 1439
   HEAP32[$491 >> 2] = $92; //@line 1440
   $492 = $ReallocAsyncCtx4 + 184 | 0; //@line 1441
   HEAP32[$492 >> 2] = $94; //@line 1442
   $493 = $ReallocAsyncCtx4 + 188 | 0; //@line 1443
   HEAP32[$493 >> 2] = $96; //@line 1444
   $494 = $ReallocAsyncCtx4 + 192 | 0; //@line 1445
   HEAP32[$494 >> 2] = $98; //@line 1446
   $495 = $ReallocAsyncCtx4 + 196 | 0; //@line 1447
   HEAP32[$495 >> 2] = $100; //@line 1448
   $496 = $ReallocAsyncCtx4 + 200 | 0; //@line 1449
   HEAP32[$496 >> 2] = $102; //@line 1450
   $497 = $ReallocAsyncCtx4 + 204 | 0; //@line 1451
   HEAP32[$497 >> 2] = $104; //@line 1452
   $498 = $ReallocAsyncCtx4 + 208 | 0; //@line 1453
   HEAP32[$498 >> 2] = $106; //@line 1454
   $499 = $ReallocAsyncCtx4 + 212 | 0; //@line 1455
   HEAP32[$499 >> 2] = $108; //@line 1456
   $500 = $ReallocAsyncCtx4 + 216 | 0; //@line 1457
   HEAP32[$500 >> 2] = $110; //@line 1458
   $501 = $ReallocAsyncCtx4 + 220 | 0; //@line 1459
   HEAP8[$501 >> 0] = $112; //@line 1460
   $502 = $ReallocAsyncCtx4 + 221 | 0; //@line 1461
   HEAP8[$502 >> 0] = $2; //@line 1462
   $503 = $ReallocAsyncCtx4 + 224 | 0; //@line 1463
   HEAP32[$503 >> 2] = $16; //@line 1464
   $504 = $ReallocAsyncCtx4 + 228 | 0; //@line 1465
   HEAP32[$504 >> 2] = $12; //@line 1466
   sp = STACKTOP; //@line 1467
   return;
  }
  HEAP8[___async_retval >> 0] = $446; //@line 1471
  ___async_unwind = 0; //@line 1472
  HEAP32[$ReallocAsyncCtx4 >> 2] = 492; //@line 1473
  $447 = $ReallocAsyncCtx4 + 4 | 0; //@line 1474
  HEAP32[$447 >> 2] = $14; //@line 1475
  $448 = $ReallocAsyncCtx4 + 8 | 0; //@line 1476
  HEAP32[$448 >> 2] = $4; //@line 1477
  $449 = $ReallocAsyncCtx4 + 12 | 0; //@line 1478
  HEAP32[$449 >> 2] = $6; //@line 1479
  $450 = $ReallocAsyncCtx4 + 16 | 0; //@line 1480
  HEAP32[$450 >> 2] = $8; //@line 1481
  $451 = $ReallocAsyncCtx4 + 20 | 0; //@line 1482
  HEAP32[$451 >> 2] = $10; //@line 1483
  $452 = $ReallocAsyncCtx4 + 24 | 0; //@line 1484
  HEAP32[$452 >> 2] = $118; //@line 1485
  $453 = $ReallocAsyncCtx4 + 28 | 0; //@line 1486
  HEAP32[$453 >> 2] = $114; //@line 1487
  $454 = $ReallocAsyncCtx4 + 32 | 0; //@line 1488
  HEAP32[$454 >> 2] = $116; //@line 1489
  $455 = $ReallocAsyncCtx4 + 36 | 0; //@line 1490
  HEAP32[$455 >> 2] = $18; //@line 1491
  $456 = $ReallocAsyncCtx4 + 40 | 0; //@line 1492
  HEAP32[$456 >> 2] = $20; //@line 1493
  $457 = $ReallocAsyncCtx4 + 44 | 0; //@line 1494
  HEAP32[$457 >> 2] = $22; //@line 1495
  $458 = $ReallocAsyncCtx4 + 48 | 0; //@line 1496
  HEAP32[$458 >> 2] = $24; //@line 1497
  $459 = $ReallocAsyncCtx4 + 52 | 0; //@line 1498
  HEAP32[$459 >> 2] = $26; //@line 1499
  $460 = $ReallocAsyncCtx4 + 56 | 0; //@line 1500
  HEAP32[$460 >> 2] = $28; //@line 1501
  $461 = $ReallocAsyncCtx4 + 60 | 0; //@line 1502
  HEAP32[$461 >> 2] = $30; //@line 1503
  $462 = $ReallocAsyncCtx4 + 64 | 0; //@line 1504
  HEAP32[$462 >> 2] = $32; //@line 1505
  $463 = $ReallocAsyncCtx4 + 68 | 0; //@line 1506
  HEAP32[$463 >> 2] = $34; //@line 1507
  $464 = $ReallocAsyncCtx4 + 72 | 0; //@line 1508
  HEAP32[$464 >> 2] = $36; //@line 1509
  $465 = $ReallocAsyncCtx4 + 76 | 0; //@line 1510
  HEAP32[$465 >> 2] = $38; //@line 1511
  $466 = $ReallocAsyncCtx4 + 80 | 0; //@line 1512
  HEAP32[$466 >> 2] = $40; //@line 1513
  $467 = $ReallocAsyncCtx4 + 84 | 0; //@line 1514
  HEAP32[$467 >> 2] = $42; //@line 1515
  $468 = $ReallocAsyncCtx4 + 88 | 0; //@line 1516
  HEAP8[$468 >> 0] = $439; //@line 1517
  $469 = $ReallocAsyncCtx4 + 92 | 0; //@line 1518
  HEAP32[$469 >> 2] = $44; //@line 1519
  $470 = $ReallocAsyncCtx4 + 96 | 0; //@line 1520
  HEAP32[$470 >> 2] = $46; //@line 1521
  $471 = $ReallocAsyncCtx4 + 100 | 0; //@line 1522
  HEAP32[$471 >> 2] = $48; //@line 1523
  $472 = $ReallocAsyncCtx4 + 104 | 0; //@line 1524
  HEAP32[$472 >> 2] = $50; //@line 1525
  $473 = $ReallocAsyncCtx4 + 108 | 0; //@line 1526
  HEAP32[$473 >> 2] = $52; //@line 1527
  $474 = $ReallocAsyncCtx4 + 112 | 0; //@line 1528
  HEAP32[$474 >> 2] = $54; //@line 1529
  $475 = $ReallocAsyncCtx4 + 116 | 0; //@line 1530
  HEAP32[$475 >> 2] = $56; //@line 1531
  $476 = $ReallocAsyncCtx4 + 120 | 0; //@line 1532
  HEAP32[$476 >> 2] = $58; //@line 1533
  $477 = $ReallocAsyncCtx4 + 124 | 0; //@line 1534
  HEAP32[$477 >> 2] = $60; //@line 1535
  $478 = $ReallocAsyncCtx4 + 128 | 0; //@line 1536
  HEAP32[$478 >> 2] = $62; //@line 1537
  $479 = $ReallocAsyncCtx4 + 132 | 0; //@line 1538
  HEAP32[$479 >> 2] = $64; //@line 1539
  $480 = $ReallocAsyncCtx4 + 136 | 0; //@line 1540
  HEAP32[$480 >> 2] = $66; //@line 1541
  $481 = $ReallocAsyncCtx4 + 140 | 0; //@line 1542
  HEAP32[$481 >> 2] = $68; //@line 1543
  $482 = $ReallocAsyncCtx4 + 144 | 0; //@line 1544
  HEAP8[$482 >> 0] = $70; //@line 1545
  $483 = $ReallocAsyncCtx4 + 148 | 0; //@line 1546
  HEAP32[$483 >> 2] = $72; //@line 1547
  $484 = $ReallocAsyncCtx4 + 152 | 0; //@line 1548
  HEAP32[$484 >> 2] = $74; //@line 1549
  $485 = $ReallocAsyncCtx4 + 156 | 0; //@line 1550
  HEAP32[$485 >> 2] = $76; //@line 1551
  $486 = $ReallocAsyncCtx4 + 160 | 0; //@line 1552
  HEAP32[$486 >> 2] = $78; //@line 1553
  $487 = $ReallocAsyncCtx4 + 164 | 0; //@line 1554
  HEAP32[$487 >> 2] = $80; //@line 1555
  $488 = $ReallocAsyncCtx4 + 168 | 0; //@line 1556
  HEAP32[$488 >> 2] = $84; //@line 1557
  $489 = $ReallocAsyncCtx4 + 172 | 0; //@line 1558
  HEAP32[$489 >> 2] = $86; //@line 1559
  $490 = $ReallocAsyncCtx4 + 176 | 0; //@line 1560
  HEAP32[$490 >> 2] = $90; //@line 1561
  $491 = $ReallocAsyncCtx4 + 180 | 0; //@line 1562
  HEAP32[$491 >> 2] = $92; //@line 1563
  $492 = $ReallocAsyncCtx4 + 184 | 0; //@line 1564
  HEAP32[$492 >> 2] = $94; //@line 1565
  $493 = $ReallocAsyncCtx4 + 188 | 0; //@line 1566
  HEAP32[$493 >> 2] = $96; //@line 1567
  $494 = $ReallocAsyncCtx4 + 192 | 0; //@line 1568
  HEAP32[$494 >> 2] = $98; //@line 1569
  $495 = $ReallocAsyncCtx4 + 196 | 0; //@line 1570
  HEAP32[$495 >> 2] = $100; //@line 1571
  $496 = $ReallocAsyncCtx4 + 200 | 0; //@line 1572
  HEAP32[$496 >> 2] = $102; //@line 1573
  $497 = $ReallocAsyncCtx4 + 204 | 0; //@line 1574
  HEAP32[$497 >> 2] = $104; //@line 1575
  $498 = $ReallocAsyncCtx4 + 208 | 0; //@line 1576
  HEAP32[$498 >> 2] = $106; //@line 1577
  $499 = $ReallocAsyncCtx4 + 212 | 0; //@line 1578
  HEAP32[$499 >> 2] = $108; //@line 1579
  $500 = $ReallocAsyncCtx4 + 216 | 0; //@line 1580
  HEAP32[$500 >> 2] = $110; //@line 1581
  $501 = $ReallocAsyncCtx4 + 220 | 0; //@line 1582
  HEAP8[$501 >> 0] = $112; //@line 1583
  $502 = $ReallocAsyncCtx4 + 221 | 0; //@line 1584
  HEAP8[$502 >> 0] = $2; //@line 1585
  $503 = $ReallocAsyncCtx4 + 224 | 0; //@line 1586
  HEAP32[$503 >> 2] = $16; //@line 1587
  $504 = $ReallocAsyncCtx4 + 228 | 0; //@line 1588
  HEAP32[$504 >> 2] = $12; //@line 1589
  sp = STACKTOP; //@line 1590
  return;
 } else if ((label | 0) == 32) {
  $525 = $$0$be + 2 << 24 >> 24; //@line 1594
  $529 = HEAPU8[$116 + ($121 & 255) >> 0] | 0; //@line 1598
  $531 = $529 >>> 5 & 1; //@line 1601
  $533 = $529 >>> 4 & 1; //@line 1604
  $536 = HEAP32[(HEAP32[$20 >> 2] | 0) + 44 >> 2] | 0; //@line 1607
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(248) | 0; //@line 1608
  $537 = FUNCTION_TABLE_iiii[$536 & 31]($90, $533, $531) | 0; //@line 1609
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 493; //@line 1612
   $538 = $ReallocAsyncCtx5 + 4 | 0; //@line 1613
   HEAP32[$538 >> 2] = $14; //@line 1614
   $539 = $ReallocAsyncCtx5 + 8 | 0; //@line 1615
   HEAP32[$539 >> 2] = $4; //@line 1616
   $540 = $ReallocAsyncCtx5 + 12 | 0; //@line 1617
   HEAP32[$540 >> 2] = $6; //@line 1618
   $541 = $ReallocAsyncCtx5 + 16 | 0; //@line 1619
   HEAP32[$541 >> 2] = $8; //@line 1620
   $542 = $ReallocAsyncCtx5 + 20 | 0; //@line 1621
   HEAP32[$542 >> 2] = $10; //@line 1622
   $543 = $ReallocAsyncCtx5 + 24 | 0; //@line 1623
   HEAP32[$543 >> 2] = $118; //@line 1624
   $544 = $ReallocAsyncCtx5 + 28 | 0; //@line 1625
   HEAP32[$544 >> 2] = $114; //@line 1626
   $545 = $ReallocAsyncCtx5 + 32 | 0; //@line 1627
   HEAP32[$545 >> 2] = $116; //@line 1628
   $546 = $ReallocAsyncCtx5 + 36 | 0; //@line 1629
   HEAP32[$546 >> 2] = $18; //@line 1630
   $547 = $ReallocAsyncCtx5 + 40 | 0; //@line 1631
   HEAP32[$547 >> 2] = $20; //@line 1632
   $548 = $ReallocAsyncCtx5 + 44 | 0; //@line 1633
   HEAP32[$548 >> 2] = $529; //@line 1634
   $549 = $ReallocAsyncCtx5 + 48 | 0; //@line 1635
   HEAP32[$549 >> 2] = $22; //@line 1636
   $550 = $ReallocAsyncCtx5 + 52 | 0; //@line 1637
   HEAP32[$550 >> 2] = $24; //@line 1638
   $551 = $ReallocAsyncCtx5 + 56 | 0; //@line 1639
   HEAP32[$551 >> 2] = $26; //@line 1640
   $552 = $ReallocAsyncCtx5 + 60 | 0; //@line 1641
   HEAP32[$552 >> 2] = $28; //@line 1642
   $553 = $ReallocAsyncCtx5 + 64 | 0; //@line 1643
   HEAP32[$553 >> 2] = $30; //@line 1644
   $554 = $ReallocAsyncCtx5 + 68 | 0; //@line 1645
   HEAP32[$554 >> 2] = $32; //@line 1646
   $555 = $ReallocAsyncCtx5 + 72 | 0; //@line 1647
   HEAP32[$555 >> 2] = $34; //@line 1648
   $556 = $ReallocAsyncCtx5 + 76 | 0; //@line 1649
   HEAP32[$556 >> 2] = $36; //@line 1650
   $557 = $ReallocAsyncCtx5 + 80 | 0; //@line 1651
   HEAP32[$557 >> 2] = $38; //@line 1652
   $558 = $ReallocAsyncCtx5 + 84 | 0; //@line 1653
   HEAP32[$558 >> 2] = $40; //@line 1654
   $559 = $ReallocAsyncCtx5 + 88 | 0; //@line 1655
   HEAP32[$559 >> 2] = $42; //@line 1656
   $560 = $ReallocAsyncCtx5 + 92 | 0; //@line 1657
   HEAP32[$560 >> 2] = $44; //@line 1658
   $561 = $ReallocAsyncCtx5 + 96 | 0; //@line 1659
   HEAP32[$561 >> 2] = $46; //@line 1660
   $562 = $ReallocAsyncCtx5 + 100 | 0; //@line 1661
   HEAP32[$562 >> 2] = $48; //@line 1662
   $563 = $ReallocAsyncCtx5 + 104 | 0; //@line 1663
   HEAP8[$563 >> 0] = $525; //@line 1664
   $564 = $ReallocAsyncCtx5 + 108 | 0; //@line 1665
   HEAP32[$564 >> 2] = $50; //@line 1666
   $565 = $ReallocAsyncCtx5 + 112 | 0; //@line 1667
   HEAP32[$565 >> 2] = $52; //@line 1668
   $566 = $ReallocAsyncCtx5 + 116 | 0; //@line 1669
   HEAP32[$566 >> 2] = $54; //@line 1670
   $567 = $ReallocAsyncCtx5 + 120 | 0; //@line 1671
   HEAP32[$567 >> 2] = $56; //@line 1672
   $568 = $ReallocAsyncCtx5 + 124 | 0; //@line 1673
   HEAP8[$568 >> 0] = $531; //@line 1674
   $569 = $ReallocAsyncCtx5 + 128 | 0; //@line 1675
   HEAP32[$569 >> 2] = $58; //@line 1676
   $570 = $ReallocAsyncCtx5 + 132 | 0; //@line 1677
   HEAP32[$570 >> 2] = $60; //@line 1678
   $571 = $ReallocAsyncCtx5 + 136 | 0; //@line 1679
   HEAP32[$571 >> 2] = $62; //@line 1680
   $572 = $ReallocAsyncCtx5 + 140 | 0; //@line 1681
   HEAP32[$572 >> 2] = $64; //@line 1682
   $573 = $ReallocAsyncCtx5 + 144 | 0; //@line 1683
   HEAP32[$573 >> 2] = $66; //@line 1684
   $574 = $ReallocAsyncCtx5 + 148 | 0; //@line 1685
   HEAP32[$574 >> 2] = $68; //@line 1686
   $575 = $ReallocAsyncCtx5 + 152 | 0; //@line 1687
   HEAP8[$575 >> 0] = $70; //@line 1688
   $576 = $ReallocAsyncCtx5 + 156 | 0; //@line 1689
   HEAP32[$576 >> 2] = $72; //@line 1690
   $577 = $ReallocAsyncCtx5 + 160 | 0; //@line 1691
   HEAP8[$577 >> 0] = $533; //@line 1692
   $578 = $ReallocAsyncCtx5 + 164 | 0; //@line 1693
   HEAP32[$578 >> 2] = $74; //@line 1694
   $579 = $ReallocAsyncCtx5 + 168 | 0; //@line 1695
   HEAP32[$579 >> 2] = $76; //@line 1696
   $580 = $ReallocAsyncCtx5 + 172 | 0; //@line 1697
   HEAP32[$580 >> 2] = $78; //@line 1698
   $581 = $ReallocAsyncCtx5 + 176 | 0; //@line 1699
   HEAP32[$581 >> 2] = $80; //@line 1700
   $582 = $ReallocAsyncCtx5 + 180 | 0; //@line 1701
   HEAP32[$582 >> 2] = $84; //@line 1702
   $583 = $ReallocAsyncCtx5 + 184 | 0; //@line 1703
   HEAP32[$583 >> 2] = $86; //@line 1704
   $584 = $ReallocAsyncCtx5 + 188 | 0; //@line 1705
   HEAP32[$584 >> 2] = $$0107$be; //@line 1706
   $585 = $ReallocAsyncCtx5 + 192 | 0; //@line 1707
   HEAP32[$585 >> 2] = $90; //@line 1708
   $586 = $ReallocAsyncCtx5 + 196 | 0; //@line 1709
   HEAP32[$586 >> 2] = $92; //@line 1710
   $587 = $ReallocAsyncCtx5 + 200 | 0; //@line 1711
   HEAP32[$587 >> 2] = $94; //@line 1712
   $588 = $ReallocAsyncCtx5 + 204 | 0; //@line 1713
   HEAP32[$588 >> 2] = $96; //@line 1714
   $589 = $ReallocAsyncCtx5 + 208 | 0; //@line 1715
   HEAP32[$589 >> 2] = $98; //@line 1716
   $590 = $ReallocAsyncCtx5 + 212 | 0; //@line 1717
   HEAP32[$590 >> 2] = $100; //@line 1718
   $591 = $ReallocAsyncCtx5 + 216 | 0; //@line 1719
   HEAP32[$591 >> 2] = $102; //@line 1720
   $592 = $ReallocAsyncCtx5 + 220 | 0; //@line 1721
   HEAP32[$592 >> 2] = $104; //@line 1722
   $593 = $ReallocAsyncCtx5 + 224 | 0; //@line 1723
   HEAP32[$593 >> 2] = $106; //@line 1724
   $594 = $ReallocAsyncCtx5 + 228 | 0; //@line 1725
   HEAP32[$594 >> 2] = $108; //@line 1726
   $595 = $ReallocAsyncCtx5 + 232 | 0; //@line 1727
   HEAP32[$595 >> 2] = $110; //@line 1728
   $596 = $ReallocAsyncCtx5 + 236 | 0; //@line 1729
   HEAP8[$596 >> 0] = $112; //@line 1730
   $597 = $ReallocAsyncCtx5 + 237 | 0; //@line 1731
   HEAP8[$597 >> 0] = $2; //@line 1732
   $598 = $ReallocAsyncCtx5 + 240 | 0; //@line 1733
   HEAP32[$598 >> 2] = $16; //@line 1734
   $599 = $ReallocAsyncCtx5 + 244 | 0; //@line 1735
   HEAP32[$599 >> 2] = $12; //@line 1736
   sp = STACKTOP; //@line 1737
   return;
  }
  HEAP8[___async_retval >> 0] = $537 & 1; //@line 1742
  ___async_unwind = 0; //@line 1743
  HEAP32[$ReallocAsyncCtx5 >> 2] = 493; //@line 1744
  $538 = $ReallocAsyncCtx5 + 4 | 0; //@line 1745
  HEAP32[$538 >> 2] = $14; //@line 1746
  $539 = $ReallocAsyncCtx5 + 8 | 0; //@line 1747
  HEAP32[$539 >> 2] = $4; //@line 1748
  $540 = $ReallocAsyncCtx5 + 12 | 0; //@line 1749
  HEAP32[$540 >> 2] = $6; //@line 1750
  $541 = $ReallocAsyncCtx5 + 16 | 0; //@line 1751
  HEAP32[$541 >> 2] = $8; //@line 1752
  $542 = $ReallocAsyncCtx5 + 20 | 0; //@line 1753
  HEAP32[$542 >> 2] = $10; //@line 1754
  $543 = $ReallocAsyncCtx5 + 24 | 0; //@line 1755
  HEAP32[$543 >> 2] = $118; //@line 1756
  $544 = $ReallocAsyncCtx5 + 28 | 0; //@line 1757
  HEAP32[$544 >> 2] = $114; //@line 1758
  $545 = $ReallocAsyncCtx5 + 32 | 0; //@line 1759
  HEAP32[$545 >> 2] = $116; //@line 1760
  $546 = $ReallocAsyncCtx5 + 36 | 0; //@line 1761
  HEAP32[$546 >> 2] = $18; //@line 1762
  $547 = $ReallocAsyncCtx5 + 40 | 0; //@line 1763
  HEAP32[$547 >> 2] = $20; //@line 1764
  $548 = $ReallocAsyncCtx5 + 44 | 0; //@line 1765
  HEAP32[$548 >> 2] = $529; //@line 1766
  $549 = $ReallocAsyncCtx5 + 48 | 0; //@line 1767
  HEAP32[$549 >> 2] = $22; //@line 1768
  $550 = $ReallocAsyncCtx5 + 52 | 0; //@line 1769
  HEAP32[$550 >> 2] = $24; //@line 1770
  $551 = $ReallocAsyncCtx5 + 56 | 0; //@line 1771
  HEAP32[$551 >> 2] = $26; //@line 1772
  $552 = $ReallocAsyncCtx5 + 60 | 0; //@line 1773
  HEAP32[$552 >> 2] = $28; //@line 1774
  $553 = $ReallocAsyncCtx5 + 64 | 0; //@line 1775
  HEAP32[$553 >> 2] = $30; //@line 1776
  $554 = $ReallocAsyncCtx5 + 68 | 0; //@line 1777
  HEAP32[$554 >> 2] = $32; //@line 1778
  $555 = $ReallocAsyncCtx5 + 72 | 0; //@line 1779
  HEAP32[$555 >> 2] = $34; //@line 1780
  $556 = $ReallocAsyncCtx5 + 76 | 0; //@line 1781
  HEAP32[$556 >> 2] = $36; //@line 1782
  $557 = $ReallocAsyncCtx5 + 80 | 0; //@line 1783
  HEAP32[$557 >> 2] = $38; //@line 1784
  $558 = $ReallocAsyncCtx5 + 84 | 0; //@line 1785
  HEAP32[$558 >> 2] = $40; //@line 1786
  $559 = $ReallocAsyncCtx5 + 88 | 0; //@line 1787
  HEAP32[$559 >> 2] = $42; //@line 1788
  $560 = $ReallocAsyncCtx5 + 92 | 0; //@line 1789
  HEAP32[$560 >> 2] = $44; //@line 1790
  $561 = $ReallocAsyncCtx5 + 96 | 0; //@line 1791
  HEAP32[$561 >> 2] = $46; //@line 1792
  $562 = $ReallocAsyncCtx5 + 100 | 0; //@line 1793
  HEAP32[$562 >> 2] = $48; //@line 1794
  $563 = $ReallocAsyncCtx5 + 104 | 0; //@line 1795
  HEAP8[$563 >> 0] = $525; //@line 1796
  $564 = $ReallocAsyncCtx5 + 108 | 0; //@line 1797
  HEAP32[$564 >> 2] = $50; //@line 1798
  $565 = $ReallocAsyncCtx5 + 112 | 0; //@line 1799
  HEAP32[$565 >> 2] = $52; //@line 1800
  $566 = $ReallocAsyncCtx5 + 116 | 0; //@line 1801
  HEAP32[$566 >> 2] = $54; //@line 1802
  $567 = $ReallocAsyncCtx5 + 120 | 0; //@line 1803
  HEAP32[$567 >> 2] = $56; //@line 1804
  $568 = $ReallocAsyncCtx5 + 124 | 0; //@line 1805
  HEAP8[$568 >> 0] = $531; //@line 1806
  $569 = $ReallocAsyncCtx5 + 128 | 0; //@line 1807
  HEAP32[$569 >> 2] = $58; //@line 1808
  $570 = $ReallocAsyncCtx5 + 132 | 0; //@line 1809
  HEAP32[$570 >> 2] = $60; //@line 1810
  $571 = $ReallocAsyncCtx5 + 136 | 0; //@line 1811
  HEAP32[$571 >> 2] = $62; //@line 1812
  $572 = $ReallocAsyncCtx5 + 140 | 0; //@line 1813
  HEAP32[$572 >> 2] = $64; //@line 1814
  $573 = $ReallocAsyncCtx5 + 144 | 0; //@line 1815
  HEAP32[$573 >> 2] = $66; //@line 1816
  $574 = $ReallocAsyncCtx5 + 148 | 0; //@line 1817
  HEAP32[$574 >> 2] = $68; //@line 1818
  $575 = $ReallocAsyncCtx5 + 152 | 0; //@line 1819
  HEAP8[$575 >> 0] = $70; //@line 1820
  $576 = $ReallocAsyncCtx5 + 156 | 0; //@line 1821
  HEAP32[$576 >> 2] = $72; //@line 1822
  $577 = $ReallocAsyncCtx5 + 160 | 0; //@line 1823
  HEAP8[$577 >> 0] = $533; //@line 1824
  $578 = $ReallocAsyncCtx5 + 164 | 0; //@line 1825
  HEAP32[$578 >> 2] = $74; //@line 1826
  $579 = $ReallocAsyncCtx5 + 168 | 0; //@line 1827
  HEAP32[$579 >> 2] = $76; //@line 1828
  $580 = $ReallocAsyncCtx5 + 172 | 0; //@line 1829
  HEAP32[$580 >> 2] = $78; //@line 1830
  $581 = $ReallocAsyncCtx5 + 176 | 0; //@line 1831
  HEAP32[$581 >> 2] = $80; //@line 1832
  $582 = $ReallocAsyncCtx5 + 180 | 0; //@line 1833
  HEAP32[$582 >> 2] = $84; //@line 1834
  $583 = $ReallocAsyncCtx5 + 184 | 0; //@line 1835
  HEAP32[$583 >> 2] = $86; //@line 1836
  $584 = $ReallocAsyncCtx5 + 188 | 0; //@line 1837
  HEAP32[$584 >> 2] = $$0107$be; //@line 1838
  $585 = $ReallocAsyncCtx5 + 192 | 0; //@line 1839
  HEAP32[$585 >> 2] = $90; //@line 1840
  $586 = $ReallocAsyncCtx5 + 196 | 0; //@line 1841
  HEAP32[$586 >> 2] = $92; //@line 1842
  $587 = $ReallocAsyncCtx5 + 200 | 0; //@line 1843
  HEAP32[$587 >> 2] = $94; //@line 1844
  $588 = $ReallocAsyncCtx5 + 204 | 0; //@line 1845
  HEAP32[$588 >> 2] = $96; //@line 1846
  $589 = $ReallocAsyncCtx5 + 208 | 0; //@line 1847
  HEAP32[$589 >> 2] = $98; //@line 1848
  $590 = $ReallocAsyncCtx5 + 212 | 0; //@line 1849
  HEAP32[$590 >> 2] = $100; //@line 1850
  $591 = $ReallocAsyncCtx5 + 216 | 0; //@line 1851
  HEAP32[$591 >> 2] = $102; //@line 1852
  $592 = $ReallocAsyncCtx5 + 220 | 0; //@line 1853
  HEAP32[$592 >> 2] = $104; //@line 1854
  $593 = $ReallocAsyncCtx5 + 224 | 0; //@line 1855
  HEAP32[$593 >> 2] = $106; //@line 1856
  $594 = $ReallocAsyncCtx5 + 228 | 0; //@line 1857
  HEAP32[$594 >> 2] = $108; //@line 1858
  $595 = $ReallocAsyncCtx5 + 232 | 0; //@line 1859
  HEAP32[$595 >> 2] = $110; //@line 1860
  $596 = $ReallocAsyncCtx5 + 236 | 0; //@line 1861
  HEAP8[$596 >> 0] = $112; //@line 1862
  $597 = $ReallocAsyncCtx5 + 237 | 0; //@line 1863
  HEAP8[$597 >> 0] = $2; //@line 1864
  $598 = $ReallocAsyncCtx5 + 240 | 0; //@line 1865
  HEAP32[$598 >> 2] = $16; //@line 1866
  $599 = $ReallocAsyncCtx5 + 244 | 0; //@line 1867
  HEAP32[$599 >> 2] = $12; //@line 1868
  sp = STACKTOP; //@line 1869
  return;
 } else if ((label | 0) == 35) {
  $604 = HEAP8[$116 + ($121 & 255) >> 0] | 0; //@line 1876
  $617 = $$0$be + 5 << 24 >> 24; //@line 1889
  $624 = (HEAPU8[$116 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$116 + ($$0$be + 2 & 255) >> 0] | HEAPU8[$116 + ($$0$be + 4 & 255) >> 0] << 16) * 100 | 0; //@line 1896
  $627 = HEAP32[(HEAP32[$36 >> 2] | 0) + 48 >> 2] | 0; //@line 1899
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(232) | 0; //@line 1900
  $628 = FUNCTION_TABLE_iiii[$627 & 31]($90, $604, $624) | 0; //@line 1901
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 494; //@line 1904
   $629 = $ReallocAsyncCtx6 + 4 | 0; //@line 1905
   HEAP32[$629 >> 2] = $14; //@line 1906
   $630 = $ReallocAsyncCtx6 + 8 | 0; //@line 1907
   HEAP32[$630 >> 2] = $4; //@line 1908
   $631 = $ReallocAsyncCtx6 + 12 | 0; //@line 1909
   HEAP32[$631 >> 2] = $6; //@line 1910
   $632 = $ReallocAsyncCtx6 + 16 | 0; //@line 1911
   HEAP32[$632 >> 2] = $8; //@line 1912
   $633 = $ReallocAsyncCtx6 + 20 | 0; //@line 1913
   HEAP32[$633 >> 2] = $10; //@line 1914
   $634 = $ReallocAsyncCtx6 + 24 | 0; //@line 1915
   HEAP32[$634 >> 2] = $118; //@line 1916
   $635 = $ReallocAsyncCtx6 + 28 | 0; //@line 1917
   HEAP32[$635 >> 2] = $114; //@line 1918
   $636 = $ReallocAsyncCtx6 + 32 | 0; //@line 1919
   HEAP32[$636 >> 2] = $116; //@line 1920
   $637 = $ReallocAsyncCtx6 + 36 | 0; //@line 1921
   HEAP32[$637 >> 2] = $18; //@line 1922
   $638 = $ReallocAsyncCtx6 + 40 | 0; //@line 1923
   HEAP32[$638 >> 2] = $20; //@line 1924
   $639 = $ReallocAsyncCtx6 + 44 | 0; //@line 1925
   HEAP8[$639 >> 0] = $617; //@line 1926
   $640 = $ReallocAsyncCtx6 + 48 | 0; //@line 1927
   HEAP32[$640 >> 2] = $22; //@line 1928
   $641 = $ReallocAsyncCtx6 + 52 | 0; //@line 1929
   HEAP32[$641 >> 2] = $24; //@line 1930
   $642 = $ReallocAsyncCtx6 + 56 | 0; //@line 1931
   HEAP32[$642 >> 2] = $26; //@line 1932
   $643 = $ReallocAsyncCtx6 + 60 | 0; //@line 1933
   HEAP32[$643 >> 2] = $28; //@line 1934
   $644 = $ReallocAsyncCtx6 + 64 | 0; //@line 1935
   HEAP32[$644 >> 2] = $30; //@line 1936
   $645 = $ReallocAsyncCtx6 + 68 | 0; //@line 1937
   HEAP32[$645 >> 2] = $32; //@line 1938
   $646 = $ReallocAsyncCtx6 + 72 | 0; //@line 1939
   HEAP32[$646 >> 2] = $34; //@line 1940
   $647 = $ReallocAsyncCtx6 + 76 | 0; //@line 1941
   HEAP32[$647 >> 2] = $36; //@line 1942
   $648 = $ReallocAsyncCtx6 + 80 | 0; //@line 1943
   HEAP32[$648 >> 2] = $38; //@line 1944
   $649 = $ReallocAsyncCtx6 + 84 | 0; //@line 1945
   HEAP32[$649 >> 2] = $40; //@line 1946
   $650 = $ReallocAsyncCtx6 + 88 | 0; //@line 1947
   HEAP32[$650 >> 2] = $42; //@line 1948
   $651 = $ReallocAsyncCtx6 + 92 | 0; //@line 1949
   HEAP32[$651 >> 2] = $44; //@line 1950
   $652 = $ReallocAsyncCtx6 + 96 | 0; //@line 1951
   HEAP32[$652 >> 2] = $46; //@line 1952
   $653 = $ReallocAsyncCtx6 + 100 | 0; //@line 1953
   HEAP32[$653 >> 2] = $48; //@line 1954
   $654 = $ReallocAsyncCtx6 + 104 | 0; //@line 1955
   HEAP32[$654 >> 2] = $50; //@line 1956
   $655 = $ReallocAsyncCtx6 + 108 | 0; //@line 1957
   HEAP32[$655 >> 2] = $52; //@line 1958
   $656 = $ReallocAsyncCtx6 + 112 | 0; //@line 1959
   HEAP32[$656 >> 2] = $54; //@line 1960
   $657 = $ReallocAsyncCtx6 + 116 | 0; //@line 1961
   HEAP32[$657 >> 2] = $56; //@line 1962
   $658 = $ReallocAsyncCtx6 + 120 | 0; //@line 1963
   HEAP32[$658 >> 2] = $58; //@line 1964
   $659 = $ReallocAsyncCtx6 + 124 | 0; //@line 1965
   HEAP32[$659 >> 2] = $60; //@line 1966
   $660 = $ReallocAsyncCtx6 + 128 | 0; //@line 1967
   HEAP32[$660 >> 2] = $62; //@line 1968
   $661 = $ReallocAsyncCtx6 + 132 | 0; //@line 1969
   HEAP32[$661 >> 2] = $64; //@line 1970
   $662 = $ReallocAsyncCtx6 + 136 | 0; //@line 1971
   HEAP32[$662 >> 2] = $66; //@line 1972
   $663 = $ReallocAsyncCtx6 + 140 | 0; //@line 1973
   HEAP32[$663 >> 2] = $68; //@line 1974
   $664 = $ReallocAsyncCtx6 + 144 | 0; //@line 1975
   HEAP8[$664 >> 0] = $70; //@line 1976
   $665 = $ReallocAsyncCtx6 + 148 | 0; //@line 1977
   HEAP32[$665 >> 2] = $72; //@line 1978
   $666 = $ReallocAsyncCtx6 + 152 | 0; //@line 1979
   HEAP32[$666 >> 2] = $74; //@line 1980
   $667 = $ReallocAsyncCtx6 + 156 | 0; //@line 1981
   HEAP32[$667 >> 2] = $76; //@line 1982
   $668 = $ReallocAsyncCtx6 + 160 | 0; //@line 1983
   HEAP32[$668 >> 2] = $78; //@line 1984
   $669 = $ReallocAsyncCtx6 + 164 | 0; //@line 1985
   HEAP32[$669 >> 2] = $80; //@line 1986
   $670 = $ReallocAsyncCtx6 + 168 | 0; //@line 1987
   HEAP32[$670 >> 2] = $84; //@line 1988
   $671 = $ReallocAsyncCtx6 + 172 | 0; //@line 1989
   HEAP32[$671 >> 2] = $86; //@line 1990
   $672 = $ReallocAsyncCtx6 + 176 | 0; //@line 1991
   HEAP32[$672 >> 2] = $90; //@line 1992
   $673 = $ReallocAsyncCtx6 + 180 | 0; //@line 1993
   HEAP32[$673 >> 2] = $92; //@line 1994
   $674 = $ReallocAsyncCtx6 + 184 | 0; //@line 1995
   HEAP32[$674 >> 2] = $94; //@line 1996
   $675 = $ReallocAsyncCtx6 + 188 | 0; //@line 1997
   HEAP32[$675 >> 2] = $96; //@line 1998
   $676 = $ReallocAsyncCtx6 + 192 | 0; //@line 1999
   HEAP32[$676 >> 2] = $98; //@line 2000
   $677 = $ReallocAsyncCtx6 + 196 | 0; //@line 2001
   HEAP32[$677 >> 2] = $100; //@line 2002
   $678 = $ReallocAsyncCtx6 + 200 | 0; //@line 2003
   HEAP32[$678 >> 2] = $102; //@line 2004
   $679 = $ReallocAsyncCtx6 + 204 | 0; //@line 2005
   HEAP32[$679 >> 2] = $104; //@line 2006
   $680 = $ReallocAsyncCtx6 + 208 | 0; //@line 2007
   HEAP32[$680 >> 2] = $106; //@line 2008
   $681 = $ReallocAsyncCtx6 + 212 | 0; //@line 2009
   HEAP32[$681 >> 2] = $108; //@line 2010
   $682 = $ReallocAsyncCtx6 + 216 | 0; //@line 2011
   HEAP32[$682 >> 2] = $110; //@line 2012
   $683 = $ReallocAsyncCtx6 + 220 | 0; //@line 2013
   HEAP8[$683 >> 0] = $112; //@line 2014
   $684 = $ReallocAsyncCtx6 + 221 | 0; //@line 2015
   HEAP8[$684 >> 0] = $2; //@line 2016
   $685 = $ReallocAsyncCtx6 + 224 | 0; //@line 2017
   HEAP32[$685 >> 2] = $16; //@line 2018
   $686 = $ReallocAsyncCtx6 + 228 | 0; //@line 2019
   HEAP32[$686 >> 2] = $12; //@line 2020
   sp = STACKTOP; //@line 2021
   return;
  }
  HEAP8[___async_retval >> 0] = $628; //@line 2025
  ___async_unwind = 0; //@line 2026
  HEAP32[$ReallocAsyncCtx6 >> 2] = 494; //@line 2027
  $629 = $ReallocAsyncCtx6 + 4 | 0; //@line 2028
  HEAP32[$629 >> 2] = $14; //@line 2029
  $630 = $ReallocAsyncCtx6 + 8 | 0; //@line 2030
  HEAP32[$630 >> 2] = $4; //@line 2031
  $631 = $ReallocAsyncCtx6 + 12 | 0; //@line 2032
  HEAP32[$631 >> 2] = $6; //@line 2033
  $632 = $ReallocAsyncCtx6 + 16 | 0; //@line 2034
  HEAP32[$632 >> 2] = $8; //@line 2035
  $633 = $ReallocAsyncCtx6 + 20 | 0; //@line 2036
  HEAP32[$633 >> 2] = $10; //@line 2037
  $634 = $ReallocAsyncCtx6 + 24 | 0; //@line 2038
  HEAP32[$634 >> 2] = $118; //@line 2039
  $635 = $ReallocAsyncCtx6 + 28 | 0; //@line 2040
  HEAP32[$635 >> 2] = $114; //@line 2041
  $636 = $ReallocAsyncCtx6 + 32 | 0; //@line 2042
  HEAP32[$636 >> 2] = $116; //@line 2043
  $637 = $ReallocAsyncCtx6 + 36 | 0; //@line 2044
  HEAP32[$637 >> 2] = $18; //@line 2045
  $638 = $ReallocAsyncCtx6 + 40 | 0; //@line 2046
  HEAP32[$638 >> 2] = $20; //@line 2047
  $639 = $ReallocAsyncCtx6 + 44 | 0; //@line 2048
  HEAP8[$639 >> 0] = $617; //@line 2049
  $640 = $ReallocAsyncCtx6 + 48 | 0; //@line 2050
  HEAP32[$640 >> 2] = $22; //@line 2051
  $641 = $ReallocAsyncCtx6 + 52 | 0; //@line 2052
  HEAP32[$641 >> 2] = $24; //@line 2053
  $642 = $ReallocAsyncCtx6 + 56 | 0; //@line 2054
  HEAP32[$642 >> 2] = $26; //@line 2055
  $643 = $ReallocAsyncCtx6 + 60 | 0; //@line 2056
  HEAP32[$643 >> 2] = $28; //@line 2057
  $644 = $ReallocAsyncCtx6 + 64 | 0; //@line 2058
  HEAP32[$644 >> 2] = $30; //@line 2059
  $645 = $ReallocAsyncCtx6 + 68 | 0; //@line 2060
  HEAP32[$645 >> 2] = $32; //@line 2061
  $646 = $ReallocAsyncCtx6 + 72 | 0; //@line 2062
  HEAP32[$646 >> 2] = $34; //@line 2063
  $647 = $ReallocAsyncCtx6 + 76 | 0; //@line 2064
  HEAP32[$647 >> 2] = $36; //@line 2065
  $648 = $ReallocAsyncCtx6 + 80 | 0; //@line 2066
  HEAP32[$648 >> 2] = $38; //@line 2067
  $649 = $ReallocAsyncCtx6 + 84 | 0; //@line 2068
  HEAP32[$649 >> 2] = $40; //@line 2069
  $650 = $ReallocAsyncCtx6 + 88 | 0; //@line 2070
  HEAP32[$650 >> 2] = $42; //@line 2071
  $651 = $ReallocAsyncCtx6 + 92 | 0; //@line 2072
  HEAP32[$651 >> 2] = $44; //@line 2073
  $652 = $ReallocAsyncCtx6 + 96 | 0; //@line 2074
  HEAP32[$652 >> 2] = $46; //@line 2075
  $653 = $ReallocAsyncCtx6 + 100 | 0; //@line 2076
  HEAP32[$653 >> 2] = $48; //@line 2077
  $654 = $ReallocAsyncCtx6 + 104 | 0; //@line 2078
  HEAP32[$654 >> 2] = $50; //@line 2079
  $655 = $ReallocAsyncCtx6 + 108 | 0; //@line 2080
  HEAP32[$655 >> 2] = $52; //@line 2081
  $656 = $ReallocAsyncCtx6 + 112 | 0; //@line 2082
  HEAP32[$656 >> 2] = $54; //@line 2083
  $657 = $ReallocAsyncCtx6 + 116 | 0; //@line 2084
  HEAP32[$657 >> 2] = $56; //@line 2085
  $658 = $ReallocAsyncCtx6 + 120 | 0; //@line 2086
  HEAP32[$658 >> 2] = $58; //@line 2087
  $659 = $ReallocAsyncCtx6 + 124 | 0; //@line 2088
  HEAP32[$659 >> 2] = $60; //@line 2089
  $660 = $ReallocAsyncCtx6 + 128 | 0; //@line 2090
  HEAP32[$660 >> 2] = $62; //@line 2091
  $661 = $ReallocAsyncCtx6 + 132 | 0; //@line 2092
  HEAP32[$661 >> 2] = $64; //@line 2093
  $662 = $ReallocAsyncCtx6 + 136 | 0; //@line 2094
  HEAP32[$662 >> 2] = $66; //@line 2095
  $663 = $ReallocAsyncCtx6 + 140 | 0; //@line 2096
  HEAP32[$663 >> 2] = $68; //@line 2097
  $664 = $ReallocAsyncCtx6 + 144 | 0; //@line 2098
  HEAP8[$664 >> 0] = $70; //@line 2099
  $665 = $ReallocAsyncCtx6 + 148 | 0; //@line 2100
  HEAP32[$665 >> 2] = $72; //@line 2101
  $666 = $ReallocAsyncCtx6 + 152 | 0; //@line 2102
  HEAP32[$666 >> 2] = $74; //@line 2103
  $667 = $ReallocAsyncCtx6 + 156 | 0; //@line 2104
  HEAP32[$667 >> 2] = $76; //@line 2105
  $668 = $ReallocAsyncCtx6 + 160 | 0; //@line 2106
  HEAP32[$668 >> 2] = $78; //@line 2107
  $669 = $ReallocAsyncCtx6 + 164 | 0; //@line 2108
  HEAP32[$669 >> 2] = $80; //@line 2109
  $670 = $ReallocAsyncCtx6 + 168 | 0; //@line 2110
  HEAP32[$670 >> 2] = $84; //@line 2111
  $671 = $ReallocAsyncCtx6 + 172 | 0; //@line 2112
  HEAP32[$671 >> 2] = $86; //@line 2113
  $672 = $ReallocAsyncCtx6 + 176 | 0; //@line 2114
  HEAP32[$672 >> 2] = $90; //@line 2115
  $673 = $ReallocAsyncCtx6 + 180 | 0; //@line 2116
  HEAP32[$673 >> 2] = $92; //@line 2117
  $674 = $ReallocAsyncCtx6 + 184 | 0; //@line 2118
  HEAP32[$674 >> 2] = $94; //@line 2119
  $675 = $ReallocAsyncCtx6 + 188 | 0; //@line 2120
  HEAP32[$675 >> 2] = $96; //@line 2121
  $676 = $ReallocAsyncCtx6 + 192 | 0; //@line 2122
  HEAP32[$676 >> 2] = $98; //@line 2123
  $677 = $ReallocAsyncCtx6 + 196 | 0; //@line 2124
  HEAP32[$677 >> 2] = $100; //@line 2125
  $678 = $ReallocAsyncCtx6 + 200 | 0; //@line 2126
  HEAP32[$678 >> 2] = $102; //@line 2127
  $679 = $ReallocAsyncCtx6 + 204 | 0; //@line 2128
  HEAP32[$679 >> 2] = $104; //@line 2129
  $680 = $ReallocAsyncCtx6 + 208 | 0; //@line 2130
  HEAP32[$680 >> 2] = $106; //@line 2131
  $681 = $ReallocAsyncCtx6 + 212 | 0; //@line 2132
  HEAP32[$681 >> 2] = $108; //@line 2133
  $682 = $ReallocAsyncCtx6 + 216 | 0; //@line 2134
  HEAP32[$682 >> 2] = $110; //@line 2135
  $683 = $ReallocAsyncCtx6 + 220 | 0; //@line 2136
  HEAP8[$683 >> 0] = $112; //@line 2137
  $684 = $ReallocAsyncCtx6 + 221 | 0; //@line 2138
  HEAP8[$684 >> 0] = $2; //@line 2139
  $685 = $ReallocAsyncCtx6 + 224 | 0; //@line 2140
  HEAP32[$685 >> 2] = $16; //@line 2141
  $686 = $ReallocAsyncCtx6 + 228 | 0; //@line 2142
  HEAP32[$686 >> 2] = $12; //@line 2143
  sp = STACKTOP; //@line 2144
  return;
 } else if ((label | 0) == 38) {
  HEAP32[___async_retval >> 2] = $$0107$be; //@line 2149
  return;
 }
}
function __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_208($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0$i116 = 0, $$0107$be = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $119 = 0, $12 = 0, $130 = 0, $131 = 0, $14 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $204 = 0, $207 = 0, $214 = 0, $215 = 0, $22 = 0, $221 = 0, $24 = 0, $240 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $319 = 0, $32 = 0, $320 = 0, $328 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $394 = 0, $395 = 0, $4 = 0, $40 = 0, $409 = 0, $42 = 0, $430 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $498 = 0, $50 = 0, $502 = 0, $506 = 0, $511 = 0, $512 = 0, $516 = 0, $52 = 0, $520 = 0, $522 = 0, $524 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $590 = 0, $595 = 0, $6 = 0, $60 = 0, $608 = 0, $615 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 2191
 $2 = HEAP8[$0 + 4 >> 0] | 0; //@line 2193
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2195
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2197
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2199
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 2201
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 2203
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 2205
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 2207
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 2209
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 2211
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 2213
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 2215
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 2217
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 2219
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 2221
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 2223
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 2225
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 2227
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 2229
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 2231
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 2233
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 2235
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 2237
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 2239
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 2241
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 2243
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 2245
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 2247
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 2249
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 2251
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 2253
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 2255
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 2257
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 2259
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 2261
 $72 = HEAP8[$0 + 144 >> 0] | 0; //@line 2263
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 2265
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 2267
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 2269
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 2271
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 2273
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 2275
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 2277
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 2279
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 2281
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 2283
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 2285
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 2287
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 2289
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 2291
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 2293
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 2295
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 2297
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 2299
 $110 = HEAP8[$0 + 220 >> 0] | 0; //@line 2301
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 2303
 $114 = HEAP32[$0 + 228 >> 2] | 0; //@line 2305
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 2307
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 2309
 if (($AsyncRetVal & 7) == 7) {
  HEAP8[$54 >> 0] = HEAP8[$100 >> 0] | 0; //@line 2314
  HEAP32[$60 >> 2] = HEAP32[$6 >> 2]; //@line 2316
  HEAP8[$40 >> 0] = HEAP8[$30 >> 0] | 0; //@line 2318
 }
 $319 = HEAP8[$78 >> 0] | 0; //@line 2323
 $320 = $319 & 255; //@line 2324
 if ((128 - (HEAPU8[$66 >> 0] | 0) - $320 | 0) > 1) {
  HEAP8[$102 + 4 + $320 >> 0] = 5; //@line 2330
  HEAP8[$78 >> 0] = $319 + 2 << 24 >> 24; //@line 2332
  HEAP8[($319 + 1 & 255) + ($102 + 4) >> 0] = $AsyncRetVal; //@line 2335
  HEAP8[$50 >> 0] = 1; //@line 2336
  HEAP8[$104 >> 0] = 1; //@line 2337
  $$0$i116 = 0; //@line 2338
 } else {
  $$0$i116 = -1010; //@line 2340
 }
 $$0$be = $12; //@line 2342
 $$0107$be = $$0$i116; //@line 2342
 L8 : while (1) {
  if (($$0$be & 255) >= ($110 & 255)) {
   label = 35; //@line 2346
   break;
  }
  $119 = $$0$be + 1 << 24 >> 24; //@line 2350
  switch (HEAP8[$114 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 2355
    break L8;
    break;
   }
  case 5:
   {
    label = 9; //@line 2360
    break L8;
    break;
   }
  case 7:
   {
    label = 23; //@line 2365
    break L8;
    break;
   }
  case 9:
   {
    label = 29; //@line 2370
    break L8;
    break;
   }
  case 10:
   {
    label = 32; //@line 2375
    break L8;
    break;
   }
  case 2:
   {
    HEAP32[$68 >> 2] = 0; //@line 2380
    HEAP8[$70 >> 0] = HEAP8[$114 + ($119 & 255) >> 0] | 0; //@line 2385
    HEAP8[$84 >> 0] = HEAP8[$114 + ($$0$be + 2 & 255) >> 0] | 0; //@line 2390
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 2391
    continue L8;
    break;
   }
  case 4:
   {
    $204 = $$0$be + 2 << 24 >> 24; //@line 2396
    $207 = HEAP8[$114 + ($119 & 255) >> 0] | 0; //@line 2399
    HEAP8[$112 >> 0] = $207; //@line 2400
    HEAP16[$92 >> 1] = 1 << ($207 & 255); //@line 2404
    $214 = HEAP8[$78 >> 0] | 0; //@line 2408
    $215 = $214 & 255; //@line 2409
    if ((128 - (HEAPU8[$66 >> 0] | 0) | 0) <= ($215 | 0)) {
     $$0$be = $204; //@line 2412
     $$0107$be = -1010; //@line 2412
     continue L8;
    }
    HEAP8[$78 >> 0] = $214 + 1 << 24 >> 24; //@line 2417
    HEAP8[$102 + 4 + $215 >> 0] = 4; //@line 2418
    HEAP8[$104 >> 0] = 1; //@line 2419
    $$0$be = $204; //@line 2420
    $$0107$be = 0; //@line 2420
    continue L8;
    break;
   }
  case 6:
   {
    $328 = HEAP32[$86 >> 2] | 0; //@line 2425
    if ($328 | 0) {
     label = 18; //@line 2428
     break L8;
    }
    $394 = HEAP8[$78 >> 0] | 0; //@line 2434
    $395 = $394 & 255; //@line 2435
    if ((128 - (HEAPU8[$66 >> 0] | 0) - $395 | 0) <= 2) {
     $$0$be = $119; //@line 2439
     $$0107$be = -1010; //@line 2439
     continue L8;
    }
    HEAP8[$102 + 4 + $395 >> 0] = 6; //@line 2444
    HEAP8[($394 + 1 & 255) + ($102 + 4) >> 0] = -1; //@line 2448
    HEAP8[$78 >> 0] = $394 + 3 << 24 >> 24; //@line 2450
    HEAP8[($394 + 2 & 255) + ($102 + 4) >> 0] = $72; //@line 2453
    HEAP8[$104 >> 0] = 1; //@line 2454
    $$0$be = $119; //@line 2455
    $$0107$be = 0; //@line 2455
    continue L8;
    break;
   }
  case 8:
   {
    $498 = $$0$be + 2 << 24 >> 24; //@line 2460
    $502 = HEAP8[$114 + ($119 & 255) >> 0] & 15; //@line 2464
    $506 = ($502 + ($502 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 2469
    HEAP32[$34 >> 2] = $506; //@line 2470
    HEAP32[$14 >> 2] = $506 + 1e3; //@line 2472
    $511 = HEAP8[$78 >> 0] | 0; //@line 2476
    $512 = $511 & 255; //@line 2477
    if ((128 - (HEAPU8[$66 >> 0] | 0) | 0) <= ($512 | 0)) {
     $$0$be = $498; //@line 2480
     $$0107$be = -1010; //@line 2480
     continue L8;
    }
    HEAP8[$78 >> 0] = $511 + 1 << 24 >> 24; //@line 2485
    HEAP8[$102 + 4 + $512 >> 0] = 8; //@line 2486
    HEAP8[$50 >> 0] = 1; //@line 2487
    HEAP8[$104 >> 0] = 1; //@line 2488
    $$0$be = $498; //@line 2489
    $$0107$be = 0; //@line 2489
    continue L8;
    break;
   }
  default:
   {
    $$0$be = $119; //@line 2494
    $$0107$be = -1013; //@line 2494
    continue L8;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$44 >> 0] = 0; //@line 2500
  HEAP8[$46 >> 0] = 0; //@line 2501
  HEAP8[$4 >> 0] = 0; //@line 2502
  HEAP8[$42 >> 0] = 0; //@line 2503
  $130 = $119 & 255; //@line 2504
  $131 = $130 + -1 | 0; //@line 2505
  HEAP32[$98 >> 2] = $114 + $131; //@line 2507
  HEAP8[$94 >> 0] = $26 - $131; //@line 2510
  HEAP8[$106 >> 0] = HEAP8[$116 >> 0] | 0; //@line 2512
  HEAP8[$8 >> 0] = HEAP8[$20 >> 0] | 0; //@line 2514
  HEAP8[$24 >> 0] = HEAP8[$32 >> 0] | 0; //@line 2516
  HEAP8[$64 >> 0] = HEAP8[$52 >> 0] | 0; //@line 2518
  HEAP8[$80 >> 0] = HEAP8[$58 >> 0] | 0; //@line 2520
  $142 = HEAP32[(HEAP32[$82 >> 2] | 0) + 36 >> 2] | 0; //@line 2523
  $ReallocAsyncCtx = _emscripten_realloc_async_context(240) | 0; //@line 2524
  $143 = FUNCTION_TABLE_iiiiiii[$142 & 3]($88, $36, $44, $46, $4, $42) | 0; //@line 2525
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 489; //@line 2528
   $144 = $ReallocAsyncCtx + 4 | 0; //@line 2529
   HEAP8[$144 >> 0] = $2; //@line 2530
   $145 = $ReallocAsyncCtx + 8 | 0; //@line 2531
   HEAP32[$145 >> 2] = $4; //@line 2532
   $146 = $ReallocAsyncCtx + 12 | 0; //@line 2533
   HEAP32[$146 >> 2] = $6; //@line 2534
   $147 = $ReallocAsyncCtx + 16 | 0; //@line 2535
   HEAP32[$147 >> 2] = $8; //@line 2536
   $148 = $ReallocAsyncCtx + 20 | 0; //@line 2537
   HEAP32[$148 >> 2] = $10; //@line 2538
   $149 = $ReallocAsyncCtx + 24 | 0; //@line 2539
   HEAP32[$149 >> 2] = $18; //@line 2540
   $150 = $ReallocAsyncCtx + 28 | 0; //@line 2541
   HEAP32[$150 >> 2] = $14; //@line 2542
   $151 = $ReallocAsyncCtx + 32 | 0; //@line 2543
   HEAP32[$151 >> 2] = $16; //@line 2544
   $152 = $ReallocAsyncCtx + 36 | 0; //@line 2545
   HEAP32[$152 >> 2] = $20; //@line 2546
   $153 = $ReallocAsyncCtx + 40 | 0; //@line 2547
   HEAP32[$153 >> 2] = $22; //@line 2548
   $154 = $ReallocAsyncCtx + 44 | 0; //@line 2549
   HEAP32[$154 >> 2] = $24; //@line 2550
   $155 = $ReallocAsyncCtx + 48 | 0; //@line 2551
   HEAP32[$155 >> 2] = $26; //@line 2552
   $156 = $ReallocAsyncCtx + 52 | 0; //@line 2553
   HEAP32[$156 >> 2] = $28; //@line 2554
   $157 = $ReallocAsyncCtx + 56 | 0; //@line 2555
   HEAP32[$157 >> 2] = $30; //@line 2556
   $158 = $ReallocAsyncCtx + 60 | 0; //@line 2557
   HEAP32[$158 >> 2] = $32; //@line 2558
   $159 = $ReallocAsyncCtx + 64 | 0; //@line 2559
   HEAP32[$159 >> 2] = $34; //@line 2560
   $160 = $ReallocAsyncCtx + 68 | 0; //@line 2561
   HEAP32[$160 >> 2] = $36; //@line 2562
   $161 = $ReallocAsyncCtx + 72 | 0; //@line 2563
   HEAP32[$161 >> 2] = $38; //@line 2564
   $162 = $ReallocAsyncCtx + 76 | 0; //@line 2565
   HEAP32[$162 >> 2] = $40; //@line 2566
   $163 = $ReallocAsyncCtx + 80 | 0; //@line 2567
   HEAP32[$163 >> 2] = $42; //@line 2568
   $164 = $ReallocAsyncCtx + 84 | 0; //@line 2569
   HEAP32[$164 >> 2] = $44; //@line 2570
   $165 = $ReallocAsyncCtx + 88 | 0; //@line 2571
   HEAP32[$165 >> 2] = $46; //@line 2572
   $166 = $ReallocAsyncCtx + 92 | 0; //@line 2573
   HEAP32[$166 >> 2] = $48; //@line 2574
   $167 = $ReallocAsyncCtx + 96 | 0; //@line 2575
   HEAP32[$167 >> 2] = $50; //@line 2576
   $168 = $ReallocAsyncCtx + 100 | 0; //@line 2577
   HEAP32[$168 >> 2] = $52; //@line 2578
   $169 = $ReallocAsyncCtx + 104 | 0; //@line 2579
   HEAP32[$169 >> 2] = $54; //@line 2580
   $170 = $ReallocAsyncCtx + 108 | 0; //@line 2581
   HEAP32[$170 >> 2] = $56; //@line 2582
   $171 = $ReallocAsyncCtx + 112 | 0; //@line 2583
   HEAP32[$171 >> 2] = $58; //@line 2584
   $172 = $ReallocAsyncCtx + 116 | 0; //@line 2585
   HEAP32[$172 >> 2] = $60; //@line 2586
   $173 = $ReallocAsyncCtx + 120 | 0; //@line 2587
   HEAP32[$173 >> 2] = $62; //@line 2588
   $174 = $ReallocAsyncCtx + 124 | 0; //@line 2589
   HEAP32[$174 >> 2] = $64; //@line 2590
   $175 = $ReallocAsyncCtx + 128 | 0; //@line 2591
   HEAP32[$175 >> 2] = $66; //@line 2592
   $176 = $ReallocAsyncCtx + 132 | 0; //@line 2593
   HEAP32[$176 >> 2] = $68; //@line 2594
   $177 = $ReallocAsyncCtx + 136 | 0; //@line 2595
   HEAP32[$177 >> 2] = $70; //@line 2596
   $178 = $ReallocAsyncCtx + 140 | 0; //@line 2597
   HEAP8[$178 >> 0] = $72; //@line 2598
   $179 = $ReallocAsyncCtx + 144 | 0; //@line 2599
   HEAP32[$179 >> 2] = $74; //@line 2600
   $180 = $ReallocAsyncCtx + 148 | 0; //@line 2601
   HEAP32[$180 >> 2] = $76; //@line 2602
   $181 = $ReallocAsyncCtx + 152 | 0; //@line 2603
   HEAP32[$181 >> 2] = $78; //@line 2604
   $182 = $ReallocAsyncCtx + 156 | 0; //@line 2605
   HEAP32[$182 >> 2] = $80; //@line 2606
   $183 = $ReallocAsyncCtx + 160 | 0; //@line 2607
   HEAP32[$183 >> 2] = $82; //@line 2608
   $184 = $ReallocAsyncCtx + 164 | 0; //@line 2609
   HEAP32[$184 >> 2] = $130; //@line 2610
   $185 = $ReallocAsyncCtx + 168 | 0; //@line 2611
   HEAP32[$185 >> 2] = $84; //@line 2612
   $186 = $ReallocAsyncCtx + 172 | 0; //@line 2613
   HEAP32[$186 >> 2] = $86; //@line 2614
   $187 = $ReallocAsyncCtx + 176 | 0; //@line 2615
   HEAP32[$187 >> 2] = $$0107$be; //@line 2616
   $188 = $ReallocAsyncCtx + 180 | 0; //@line 2617
   HEAP32[$188 >> 2] = $88; //@line 2618
   $189 = $ReallocAsyncCtx + 184 | 0; //@line 2619
   HEAP32[$189 >> 2] = $90; //@line 2620
   $190 = $ReallocAsyncCtx + 188 | 0; //@line 2621
   HEAP32[$190 >> 2] = $92; //@line 2622
   $191 = $ReallocAsyncCtx + 192 | 0; //@line 2623
   HEAP32[$191 >> 2] = $94; //@line 2624
   $192 = $ReallocAsyncCtx + 196 | 0; //@line 2625
   HEAP32[$192 >> 2] = $96; //@line 2626
   $193 = $ReallocAsyncCtx + 200 | 0; //@line 2627
   HEAP32[$193 >> 2] = $98; //@line 2628
   $194 = $ReallocAsyncCtx + 204 | 0; //@line 2629
   HEAP32[$194 >> 2] = $100; //@line 2630
   $195 = $ReallocAsyncCtx + 208 | 0; //@line 2631
   HEAP32[$195 >> 2] = $102; //@line 2632
   $196 = $ReallocAsyncCtx + 212 | 0; //@line 2633
   HEAP32[$196 >> 2] = $104; //@line 2634
   $197 = $ReallocAsyncCtx + 216 | 0; //@line 2635
   HEAP32[$197 >> 2] = $106; //@line 2636
   $198 = $ReallocAsyncCtx + 220 | 0; //@line 2637
   HEAP32[$198 >> 2] = $108; //@line 2638
   $199 = $ReallocAsyncCtx + 224 | 0; //@line 2639
   HEAP8[$199 >> 0] = $110; //@line 2640
   $200 = $ReallocAsyncCtx + 228 | 0; //@line 2641
   HEAP32[$200 >> 2] = $112; //@line 2642
   $201 = $ReallocAsyncCtx + 232 | 0; //@line 2643
   HEAP32[$201 >> 2] = $114; //@line 2644
   $202 = $ReallocAsyncCtx + 236 | 0; //@line 2645
   HEAP32[$202 >> 2] = $116; //@line 2646
   sp = STACKTOP; //@line 2647
   return;
  }
  HEAP8[___async_retval >> 0] = $143; //@line 2651
  ___async_unwind = 0; //@line 2652
  HEAP32[$ReallocAsyncCtx >> 2] = 489; //@line 2653
  $144 = $ReallocAsyncCtx + 4 | 0; //@line 2654
  HEAP8[$144 >> 0] = $2; //@line 2655
  $145 = $ReallocAsyncCtx + 8 | 0; //@line 2656
  HEAP32[$145 >> 2] = $4; //@line 2657
  $146 = $ReallocAsyncCtx + 12 | 0; //@line 2658
  HEAP32[$146 >> 2] = $6; //@line 2659
  $147 = $ReallocAsyncCtx + 16 | 0; //@line 2660
  HEAP32[$147 >> 2] = $8; //@line 2661
  $148 = $ReallocAsyncCtx + 20 | 0; //@line 2662
  HEAP32[$148 >> 2] = $10; //@line 2663
  $149 = $ReallocAsyncCtx + 24 | 0; //@line 2664
  HEAP32[$149 >> 2] = $18; //@line 2665
  $150 = $ReallocAsyncCtx + 28 | 0; //@line 2666
  HEAP32[$150 >> 2] = $14; //@line 2667
  $151 = $ReallocAsyncCtx + 32 | 0; //@line 2668
  HEAP32[$151 >> 2] = $16; //@line 2669
  $152 = $ReallocAsyncCtx + 36 | 0; //@line 2670
  HEAP32[$152 >> 2] = $20; //@line 2671
  $153 = $ReallocAsyncCtx + 40 | 0; //@line 2672
  HEAP32[$153 >> 2] = $22; //@line 2673
  $154 = $ReallocAsyncCtx + 44 | 0; //@line 2674
  HEAP32[$154 >> 2] = $24; //@line 2675
  $155 = $ReallocAsyncCtx + 48 | 0; //@line 2676
  HEAP32[$155 >> 2] = $26; //@line 2677
  $156 = $ReallocAsyncCtx + 52 | 0; //@line 2678
  HEAP32[$156 >> 2] = $28; //@line 2679
  $157 = $ReallocAsyncCtx + 56 | 0; //@line 2680
  HEAP32[$157 >> 2] = $30; //@line 2681
  $158 = $ReallocAsyncCtx + 60 | 0; //@line 2682
  HEAP32[$158 >> 2] = $32; //@line 2683
  $159 = $ReallocAsyncCtx + 64 | 0; //@line 2684
  HEAP32[$159 >> 2] = $34; //@line 2685
  $160 = $ReallocAsyncCtx + 68 | 0; //@line 2686
  HEAP32[$160 >> 2] = $36; //@line 2687
  $161 = $ReallocAsyncCtx + 72 | 0; //@line 2688
  HEAP32[$161 >> 2] = $38; //@line 2689
  $162 = $ReallocAsyncCtx + 76 | 0; //@line 2690
  HEAP32[$162 >> 2] = $40; //@line 2691
  $163 = $ReallocAsyncCtx + 80 | 0; //@line 2692
  HEAP32[$163 >> 2] = $42; //@line 2693
  $164 = $ReallocAsyncCtx + 84 | 0; //@line 2694
  HEAP32[$164 >> 2] = $44; //@line 2695
  $165 = $ReallocAsyncCtx + 88 | 0; //@line 2696
  HEAP32[$165 >> 2] = $46; //@line 2697
  $166 = $ReallocAsyncCtx + 92 | 0; //@line 2698
  HEAP32[$166 >> 2] = $48; //@line 2699
  $167 = $ReallocAsyncCtx + 96 | 0; //@line 2700
  HEAP32[$167 >> 2] = $50; //@line 2701
  $168 = $ReallocAsyncCtx + 100 | 0; //@line 2702
  HEAP32[$168 >> 2] = $52; //@line 2703
  $169 = $ReallocAsyncCtx + 104 | 0; //@line 2704
  HEAP32[$169 >> 2] = $54; //@line 2705
  $170 = $ReallocAsyncCtx + 108 | 0; //@line 2706
  HEAP32[$170 >> 2] = $56; //@line 2707
  $171 = $ReallocAsyncCtx + 112 | 0; //@line 2708
  HEAP32[$171 >> 2] = $58; //@line 2709
  $172 = $ReallocAsyncCtx + 116 | 0; //@line 2710
  HEAP32[$172 >> 2] = $60; //@line 2711
  $173 = $ReallocAsyncCtx + 120 | 0; //@line 2712
  HEAP32[$173 >> 2] = $62; //@line 2713
  $174 = $ReallocAsyncCtx + 124 | 0; //@line 2714
  HEAP32[$174 >> 2] = $64; //@line 2715
  $175 = $ReallocAsyncCtx + 128 | 0; //@line 2716
  HEAP32[$175 >> 2] = $66; //@line 2717
  $176 = $ReallocAsyncCtx + 132 | 0; //@line 2718
  HEAP32[$176 >> 2] = $68; //@line 2719
  $177 = $ReallocAsyncCtx + 136 | 0; //@line 2720
  HEAP32[$177 >> 2] = $70; //@line 2721
  $178 = $ReallocAsyncCtx + 140 | 0; //@line 2722
  HEAP8[$178 >> 0] = $72; //@line 2723
  $179 = $ReallocAsyncCtx + 144 | 0; //@line 2724
  HEAP32[$179 >> 2] = $74; //@line 2725
  $180 = $ReallocAsyncCtx + 148 | 0; //@line 2726
  HEAP32[$180 >> 2] = $76; //@line 2727
  $181 = $ReallocAsyncCtx + 152 | 0; //@line 2728
  HEAP32[$181 >> 2] = $78; //@line 2729
  $182 = $ReallocAsyncCtx + 156 | 0; //@line 2730
  HEAP32[$182 >> 2] = $80; //@line 2731
  $183 = $ReallocAsyncCtx + 160 | 0; //@line 2732
  HEAP32[$183 >> 2] = $82; //@line 2733
  $184 = $ReallocAsyncCtx + 164 | 0; //@line 2734
  HEAP32[$184 >> 2] = $130; //@line 2735
  $185 = $ReallocAsyncCtx + 168 | 0; //@line 2736
  HEAP32[$185 >> 2] = $84; //@line 2737
  $186 = $ReallocAsyncCtx + 172 | 0; //@line 2738
  HEAP32[$186 >> 2] = $86; //@line 2739
  $187 = $ReallocAsyncCtx + 176 | 0; //@line 2740
  HEAP32[$187 >> 2] = $$0107$be; //@line 2741
  $188 = $ReallocAsyncCtx + 180 | 0; //@line 2742
  HEAP32[$188 >> 2] = $88; //@line 2743
  $189 = $ReallocAsyncCtx + 184 | 0; //@line 2744
  HEAP32[$189 >> 2] = $90; //@line 2745
  $190 = $ReallocAsyncCtx + 188 | 0; //@line 2746
  HEAP32[$190 >> 2] = $92; //@line 2747
  $191 = $ReallocAsyncCtx + 192 | 0; //@line 2748
  HEAP32[$191 >> 2] = $94; //@line 2749
  $192 = $ReallocAsyncCtx + 196 | 0; //@line 2750
  HEAP32[$192 >> 2] = $96; //@line 2751
  $193 = $ReallocAsyncCtx + 200 | 0; //@line 2752
  HEAP32[$193 >> 2] = $98; //@line 2753
  $194 = $ReallocAsyncCtx + 204 | 0; //@line 2754
  HEAP32[$194 >> 2] = $100; //@line 2755
  $195 = $ReallocAsyncCtx + 208 | 0; //@line 2756
  HEAP32[$195 >> 2] = $102; //@line 2757
  $196 = $ReallocAsyncCtx + 212 | 0; //@line 2758
  HEAP32[$196 >> 2] = $104; //@line 2759
  $197 = $ReallocAsyncCtx + 216 | 0; //@line 2760
  HEAP32[$197 >> 2] = $106; //@line 2761
  $198 = $ReallocAsyncCtx + 220 | 0; //@line 2762
  HEAP32[$198 >> 2] = $108; //@line 2763
  $199 = $ReallocAsyncCtx + 224 | 0; //@line 2764
  HEAP8[$199 >> 0] = $110; //@line 2765
  $200 = $ReallocAsyncCtx + 228 | 0; //@line 2766
  HEAP32[$200 >> 2] = $112; //@line 2767
  $201 = $ReallocAsyncCtx + 232 | 0; //@line 2768
  HEAP32[$201 >> 2] = $114; //@line 2769
  $202 = $ReallocAsyncCtx + 236 | 0; //@line 2770
  HEAP32[$202 >> 2] = $116; //@line 2771
  sp = STACKTOP; //@line 2772
  return;
 } else if ((label | 0) == 9) {
  $221 = HEAP8[$114 + ($119 & 255) >> 0] | 0; //@line 2778
  HEAP8[$30 >> 0] = ($221 & 255) >>> 4 & 7; //@line 2783
  HEAP8[$100 >> 0] = $221 & 15; //@line 2785
  $240 = $$0$be + 5 << 24 >> 24; //@line 2799
  HEAP32[$6 >> 2] = (HEAPU8[$114 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$114 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$114 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 2807
  $250 = HEAP32[(HEAP32[$10 >> 2] | 0) + 40 >> 2] | 0; //@line 2810
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(236) | 0; //@line 2811
  $251 = FUNCTION_TABLE_iii[$250 & 31]($88, $48) | 0; //@line 2812
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 490; //@line 2815
   $252 = $ReallocAsyncCtx2 + 4 | 0; //@line 2816
   HEAP8[$252 >> 0] = $2; //@line 2817
   $253 = $ReallocAsyncCtx2 + 8 | 0; //@line 2818
   HEAP32[$253 >> 2] = $4; //@line 2819
   $254 = $ReallocAsyncCtx2 + 12 | 0; //@line 2820
   HEAP32[$254 >> 2] = $6; //@line 2821
   $255 = $ReallocAsyncCtx2 + 16 | 0; //@line 2822
   HEAP32[$255 >> 2] = $8; //@line 2823
   $256 = $ReallocAsyncCtx2 + 20 | 0; //@line 2824
   HEAP32[$256 >> 2] = $10; //@line 2825
   $257 = $ReallocAsyncCtx2 + 24 | 0; //@line 2826
   HEAP8[$257 >> 0] = $240; //@line 2827
   $258 = $ReallocAsyncCtx2 + 28 | 0; //@line 2828
   HEAP32[$258 >> 2] = $14; //@line 2829
   $259 = $ReallocAsyncCtx2 + 32 | 0; //@line 2830
   HEAP32[$259 >> 2] = $16; //@line 2831
   $260 = $ReallocAsyncCtx2 + 36 | 0; //@line 2832
   HEAP32[$260 >> 2] = $18; //@line 2833
   $261 = $ReallocAsyncCtx2 + 40 | 0; //@line 2834
   HEAP32[$261 >> 2] = $20; //@line 2835
   $262 = $ReallocAsyncCtx2 + 44 | 0; //@line 2836
   HEAP32[$262 >> 2] = $22; //@line 2837
   $263 = $ReallocAsyncCtx2 + 48 | 0; //@line 2838
   HEAP32[$263 >> 2] = $24; //@line 2839
   $264 = $ReallocAsyncCtx2 + 52 | 0; //@line 2840
   HEAP32[$264 >> 2] = $26; //@line 2841
   $265 = $ReallocAsyncCtx2 + 56 | 0; //@line 2842
   HEAP32[$265 >> 2] = $28; //@line 2843
   $266 = $ReallocAsyncCtx2 + 60 | 0; //@line 2844
   HEAP32[$266 >> 2] = $30; //@line 2845
   $267 = $ReallocAsyncCtx2 + 64 | 0; //@line 2846
   HEAP32[$267 >> 2] = $32; //@line 2847
   $268 = $ReallocAsyncCtx2 + 68 | 0; //@line 2848
   HEAP32[$268 >> 2] = $34; //@line 2849
   $269 = $ReallocAsyncCtx2 + 72 | 0; //@line 2850
   HEAP32[$269 >> 2] = $36; //@line 2851
   $270 = $ReallocAsyncCtx2 + 76 | 0; //@line 2852
   HEAP32[$270 >> 2] = $38; //@line 2853
   $271 = $ReallocAsyncCtx2 + 80 | 0; //@line 2854
   HEAP32[$271 >> 2] = $40; //@line 2855
   $272 = $ReallocAsyncCtx2 + 84 | 0; //@line 2856
   HEAP32[$272 >> 2] = $42; //@line 2857
   $273 = $ReallocAsyncCtx2 + 88 | 0; //@line 2858
   HEAP32[$273 >> 2] = $44; //@line 2859
   $274 = $ReallocAsyncCtx2 + 92 | 0; //@line 2860
   HEAP32[$274 >> 2] = $46; //@line 2861
   $275 = $ReallocAsyncCtx2 + 96 | 0; //@line 2862
   HEAP32[$275 >> 2] = $48; //@line 2863
   $276 = $ReallocAsyncCtx2 + 100 | 0; //@line 2864
   HEAP32[$276 >> 2] = $50; //@line 2865
   $277 = $ReallocAsyncCtx2 + 104 | 0; //@line 2866
   HEAP32[$277 >> 2] = $52; //@line 2867
   $278 = $ReallocAsyncCtx2 + 108 | 0; //@line 2868
   HEAP32[$278 >> 2] = $54; //@line 2869
   $279 = $ReallocAsyncCtx2 + 112 | 0; //@line 2870
   HEAP32[$279 >> 2] = $56; //@line 2871
   $280 = $ReallocAsyncCtx2 + 116 | 0; //@line 2872
   HEAP32[$280 >> 2] = $58; //@line 2873
   $281 = $ReallocAsyncCtx2 + 120 | 0; //@line 2874
   HEAP32[$281 >> 2] = $60; //@line 2875
   $282 = $ReallocAsyncCtx2 + 124 | 0; //@line 2876
   HEAP32[$282 >> 2] = $62; //@line 2877
   $283 = $ReallocAsyncCtx2 + 128 | 0; //@line 2878
   HEAP32[$283 >> 2] = $64; //@line 2879
   $284 = $ReallocAsyncCtx2 + 132 | 0; //@line 2880
   HEAP32[$284 >> 2] = $66; //@line 2881
   $285 = $ReallocAsyncCtx2 + 136 | 0; //@line 2882
   HEAP32[$285 >> 2] = $68; //@line 2883
   $286 = $ReallocAsyncCtx2 + 140 | 0; //@line 2884
   HEAP32[$286 >> 2] = $70; //@line 2885
   $287 = $ReallocAsyncCtx2 + 144 | 0; //@line 2886
   HEAP8[$287 >> 0] = $72; //@line 2887
   $288 = $ReallocAsyncCtx2 + 148 | 0; //@line 2888
   HEAP32[$288 >> 2] = $74; //@line 2889
   $289 = $ReallocAsyncCtx2 + 152 | 0; //@line 2890
   HEAP32[$289 >> 2] = $76; //@line 2891
   $290 = $ReallocAsyncCtx2 + 156 | 0; //@line 2892
   HEAP32[$290 >> 2] = $78; //@line 2893
   $291 = $ReallocAsyncCtx2 + 160 | 0; //@line 2894
   HEAP32[$291 >> 2] = $80; //@line 2895
   $292 = $ReallocAsyncCtx2 + 164 | 0; //@line 2896
   HEAP32[$292 >> 2] = $82; //@line 2897
   $293 = $ReallocAsyncCtx2 + 168 | 0; //@line 2898
   HEAP32[$293 >> 2] = $84; //@line 2899
   $294 = $ReallocAsyncCtx2 + 172 | 0; //@line 2900
   HEAP32[$294 >> 2] = $86; //@line 2901
   $295 = $ReallocAsyncCtx2 + 176 | 0; //@line 2902
   HEAP32[$295 >> 2] = $88; //@line 2903
   $296 = $ReallocAsyncCtx2 + 180 | 0; //@line 2904
   HEAP32[$296 >> 2] = $90; //@line 2905
   $297 = $ReallocAsyncCtx2 + 184 | 0; //@line 2906
   HEAP32[$297 >> 2] = $92; //@line 2907
   $298 = $ReallocAsyncCtx2 + 188 | 0; //@line 2908
   HEAP32[$298 >> 2] = $94; //@line 2909
   $299 = $ReallocAsyncCtx2 + 192 | 0; //@line 2910
   HEAP32[$299 >> 2] = $96; //@line 2911
   $300 = $ReallocAsyncCtx2 + 196 | 0; //@line 2912
   HEAP32[$300 >> 2] = $98; //@line 2913
   $301 = $ReallocAsyncCtx2 + 200 | 0; //@line 2914
   HEAP32[$301 >> 2] = $100; //@line 2915
   $302 = $ReallocAsyncCtx2 + 204 | 0; //@line 2916
   HEAP32[$302 >> 2] = $102; //@line 2917
   $303 = $ReallocAsyncCtx2 + 208 | 0; //@line 2918
   HEAP32[$303 >> 2] = $104; //@line 2919
   $304 = $ReallocAsyncCtx2 + 212 | 0; //@line 2920
   HEAP32[$304 >> 2] = $106; //@line 2921
   $305 = $ReallocAsyncCtx2 + 216 | 0; //@line 2922
   HEAP32[$305 >> 2] = $108; //@line 2923
   $306 = $ReallocAsyncCtx2 + 220 | 0; //@line 2924
   HEAP8[$306 >> 0] = $110; //@line 2925
   $307 = $ReallocAsyncCtx2 + 224 | 0; //@line 2926
   HEAP32[$307 >> 2] = $112; //@line 2927
   $308 = $ReallocAsyncCtx2 + 228 | 0; //@line 2928
   HEAP32[$308 >> 2] = $114; //@line 2929
   $309 = $ReallocAsyncCtx2 + 232 | 0; //@line 2930
   HEAP32[$309 >> 2] = $116; //@line 2931
   sp = STACKTOP; //@line 2932
   return;
  }
  HEAP8[___async_retval >> 0] = $251; //@line 2936
  ___async_unwind = 0; //@line 2937
  HEAP32[$ReallocAsyncCtx2 >> 2] = 490; //@line 2938
  $252 = $ReallocAsyncCtx2 + 4 | 0; //@line 2939
  HEAP8[$252 >> 0] = $2; //@line 2940
  $253 = $ReallocAsyncCtx2 + 8 | 0; //@line 2941
  HEAP32[$253 >> 2] = $4; //@line 2942
  $254 = $ReallocAsyncCtx2 + 12 | 0; //@line 2943
  HEAP32[$254 >> 2] = $6; //@line 2944
  $255 = $ReallocAsyncCtx2 + 16 | 0; //@line 2945
  HEAP32[$255 >> 2] = $8; //@line 2946
  $256 = $ReallocAsyncCtx2 + 20 | 0; //@line 2947
  HEAP32[$256 >> 2] = $10; //@line 2948
  $257 = $ReallocAsyncCtx2 + 24 | 0; //@line 2949
  HEAP8[$257 >> 0] = $240; //@line 2950
  $258 = $ReallocAsyncCtx2 + 28 | 0; //@line 2951
  HEAP32[$258 >> 2] = $14; //@line 2952
  $259 = $ReallocAsyncCtx2 + 32 | 0; //@line 2953
  HEAP32[$259 >> 2] = $16; //@line 2954
  $260 = $ReallocAsyncCtx2 + 36 | 0; //@line 2955
  HEAP32[$260 >> 2] = $18; //@line 2956
  $261 = $ReallocAsyncCtx2 + 40 | 0; //@line 2957
  HEAP32[$261 >> 2] = $20; //@line 2958
  $262 = $ReallocAsyncCtx2 + 44 | 0; //@line 2959
  HEAP32[$262 >> 2] = $22; //@line 2960
  $263 = $ReallocAsyncCtx2 + 48 | 0; //@line 2961
  HEAP32[$263 >> 2] = $24; //@line 2962
  $264 = $ReallocAsyncCtx2 + 52 | 0; //@line 2963
  HEAP32[$264 >> 2] = $26; //@line 2964
  $265 = $ReallocAsyncCtx2 + 56 | 0; //@line 2965
  HEAP32[$265 >> 2] = $28; //@line 2966
  $266 = $ReallocAsyncCtx2 + 60 | 0; //@line 2967
  HEAP32[$266 >> 2] = $30; //@line 2968
  $267 = $ReallocAsyncCtx2 + 64 | 0; //@line 2969
  HEAP32[$267 >> 2] = $32; //@line 2970
  $268 = $ReallocAsyncCtx2 + 68 | 0; //@line 2971
  HEAP32[$268 >> 2] = $34; //@line 2972
  $269 = $ReallocAsyncCtx2 + 72 | 0; //@line 2973
  HEAP32[$269 >> 2] = $36; //@line 2974
  $270 = $ReallocAsyncCtx2 + 76 | 0; //@line 2975
  HEAP32[$270 >> 2] = $38; //@line 2976
  $271 = $ReallocAsyncCtx2 + 80 | 0; //@line 2977
  HEAP32[$271 >> 2] = $40; //@line 2978
  $272 = $ReallocAsyncCtx2 + 84 | 0; //@line 2979
  HEAP32[$272 >> 2] = $42; //@line 2980
  $273 = $ReallocAsyncCtx2 + 88 | 0; //@line 2981
  HEAP32[$273 >> 2] = $44; //@line 2982
  $274 = $ReallocAsyncCtx2 + 92 | 0; //@line 2983
  HEAP32[$274 >> 2] = $46; //@line 2984
  $275 = $ReallocAsyncCtx2 + 96 | 0; //@line 2985
  HEAP32[$275 >> 2] = $48; //@line 2986
  $276 = $ReallocAsyncCtx2 + 100 | 0; //@line 2987
  HEAP32[$276 >> 2] = $50; //@line 2988
  $277 = $ReallocAsyncCtx2 + 104 | 0; //@line 2989
  HEAP32[$277 >> 2] = $52; //@line 2990
  $278 = $ReallocAsyncCtx2 + 108 | 0; //@line 2991
  HEAP32[$278 >> 2] = $54; //@line 2992
  $279 = $ReallocAsyncCtx2 + 112 | 0; //@line 2993
  HEAP32[$279 >> 2] = $56; //@line 2994
  $280 = $ReallocAsyncCtx2 + 116 | 0; //@line 2995
  HEAP32[$280 >> 2] = $58; //@line 2996
  $281 = $ReallocAsyncCtx2 + 120 | 0; //@line 2997
  HEAP32[$281 >> 2] = $60; //@line 2998
  $282 = $ReallocAsyncCtx2 + 124 | 0; //@line 2999
  HEAP32[$282 >> 2] = $62; //@line 3000
  $283 = $ReallocAsyncCtx2 + 128 | 0; //@line 3001
  HEAP32[$283 >> 2] = $64; //@line 3002
  $284 = $ReallocAsyncCtx2 + 132 | 0; //@line 3003
  HEAP32[$284 >> 2] = $66; //@line 3004
  $285 = $ReallocAsyncCtx2 + 136 | 0; //@line 3005
  HEAP32[$285 >> 2] = $68; //@line 3006
  $286 = $ReallocAsyncCtx2 + 140 | 0; //@line 3007
  HEAP32[$286 >> 2] = $70; //@line 3008
  $287 = $ReallocAsyncCtx2 + 144 | 0; //@line 3009
  HEAP8[$287 >> 0] = $72; //@line 3010
  $288 = $ReallocAsyncCtx2 + 148 | 0; //@line 3011
  HEAP32[$288 >> 2] = $74; //@line 3012
  $289 = $ReallocAsyncCtx2 + 152 | 0; //@line 3013
  HEAP32[$289 >> 2] = $76; //@line 3014
  $290 = $ReallocAsyncCtx2 + 156 | 0; //@line 3015
  HEAP32[$290 >> 2] = $78; //@line 3016
  $291 = $ReallocAsyncCtx2 + 160 | 0; //@line 3017
  HEAP32[$291 >> 2] = $80; //@line 3018
  $292 = $ReallocAsyncCtx2 + 164 | 0; //@line 3019
  HEAP32[$292 >> 2] = $82; //@line 3020
  $293 = $ReallocAsyncCtx2 + 168 | 0; //@line 3021
  HEAP32[$293 >> 2] = $84; //@line 3022
  $294 = $ReallocAsyncCtx2 + 172 | 0; //@line 3023
  HEAP32[$294 >> 2] = $86; //@line 3024
  $295 = $ReallocAsyncCtx2 + 176 | 0; //@line 3025
  HEAP32[$295 >> 2] = $88; //@line 3026
  $296 = $ReallocAsyncCtx2 + 180 | 0; //@line 3027
  HEAP32[$296 >> 2] = $90; //@line 3028
  $297 = $ReallocAsyncCtx2 + 184 | 0; //@line 3029
  HEAP32[$297 >> 2] = $92; //@line 3030
  $298 = $ReallocAsyncCtx2 + 188 | 0; //@line 3031
  HEAP32[$298 >> 2] = $94; //@line 3032
  $299 = $ReallocAsyncCtx2 + 192 | 0; //@line 3033
  HEAP32[$299 >> 2] = $96; //@line 3034
  $300 = $ReallocAsyncCtx2 + 196 | 0; //@line 3035
  HEAP32[$300 >> 2] = $98; //@line 3036
  $301 = $ReallocAsyncCtx2 + 200 | 0; //@line 3037
  HEAP32[$301 >> 2] = $100; //@line 3038
  $302 = $ReallocAsyncCtx2 + 204 | 0; //@line 3039
  HEAP32[$302 >> 2] = $102; //@line 3040
  $303 = $ReallocAsyncCtx2 + 208 | 0; //@line 3041
  HEAP32[$303 >> 2] = $104; //@line 3042
  $304 = $ReallocAsyncCtx2 + 212 | 0; //@line 3043
  HEAP32[$304 >> 2] = $106; //@line 3044
  $305 = $ReallocAsyncCtx2 + 216 | 0; //@line 3045
  HEAP32[$305 >> 2] = $108; //@line 3046
  $306 = $ReallocAsyncCtx2 + 220 | 0; //@line 3047
  HEAP8[$306 >> 0] = $110; //@line 3048
  $307 = $ReallocAsyncCtx2 + 224 | 0; //@line 3049
  HEAP32[$307 >> 2] = $112; //@line 3050
  $308 = $ReallocAsyncCtx2 + 228 | 0; //@line 3051
  HEAP32[$308 >> 2] = $114; //@line 3052
  $309 = $ReallocAsyncCtx2 + 232 | 0; //@line 3053
  HEAP32[$309 >> 2] = $116; //@line 3054
  sp = STACKTOP; //@line 3055
  return;
 } else if ((label | 0) == 18) {
  $330 = HEAP32[$328 >> 2] | 0; //@line 3059
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(232) | 0; //@line 3060
  $331 = FUNCTION_TABLE_ii[$330 & 15]($76) | 0; //@line 3061
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 491; //@line 3064
   $332 = $ReallocAsyncCtx3 + 4 | 0; //@line 3065
   HEAP32[$332 >> 2] = $14; //@line 3066
   $333 = $ReallocAsyncCtx3 + 8 | 0; //@line 3067
   HEAP32[$333 >> 2] = $4; //@line 3068
   $334 = $ReallocAsyncCtx3 + 12 | 0; //@line 3069
   HEAP32[$334 >> 2] = $6; //@line 3070
   $335 = $ReallocAsyncCtx3 + 16 | 0; //@line 3071
   HEAP32[$335 >> 2] = $8; //@line 3072
   $336 = $ReallocAsyncCtx3 + 20 | 0; //@line 3073
   HEAP32[$336 >> 2] = $10; //@line 3074
   $337 = $ReallocAsyncCtx3 + 24 | 0; //@line 3075
   HEAP32[$337 >> 2] = $116; //@line 3076
   $338 = $ReallocAsyncCtx3 + 28 | 0; //@line 3077
   HEAP32[$338 >> 2] = $112; //@line 3078
   $339 = $ReallocAsyncCtx3 + 32 | 0; //@line 3079
   HEAP32[$339 >> 2] = $114; //@line 3080
   $340 = $ReallocAsyncCtx3 + 36 | 0; //@line 3081
   HEAP32[$340 >> 2] = $20; //@line 3082
   $341 = $ReallocAsyncCtx3 + 40 | 0; //@line 3083
   HEAP32[$341 >> 2] = $22; //@line 3084
   $342 = $ReallocAsyncCtx3 + 44 | 0; //@line 3085
   HEAP32[$342 >> 2] = $24; //@line 3086
   $343 = $ReallocAsyncCtx3 + 48 | 0; //@line 3087
   HEAP32[$343 >> 2] = $26; //@line 3088
   $344 = $ReallocAsyncCtx3 + 52 | 0; //@line 3089
   HEAP32[$344 >> 2] = $28; //@line 3090
   $345 = $ReallocAsyncCtx3 + 56 | 0; //@line 3091
   HEAP32[$345 >> 2] = $30; //@line 3092
   $346 = $ReallocAsyncCtx3 + 60 | 0; //@line 3093
   HEAP32[$346 >> 2] = $32; //@line 3094
   $347 = $ReallocAsyncCtx3 + 64 | 0; //@line 3095
   HEAP32[$347 >> 2] = $34; //@line 3096
   $348 = $ReallocAsyncCtx3 + 68 | 0; //@line 3097
   HEAP32[$348 >> 2] = $36; //@line 3098
   $349 = $ReallocAsyncCtx3 + 72 | 0; //@line 3099
   HEAP32[$349 >> 2] = $38; //@line 3100
   $350 = $ReallocAsyncCtx3 + 76 | 0; //@line 3101
   HEAP32[$350 >> 2] = $40; //@line 3102
   $351 = $ReallocAsyncCtx3 + 80 | 0; //@line 3103
   HEAP32[$351 >> 2] = $42; //@line 3104
   $352 = $ReallocAsyncCtx3 + 84 | 0; //@line 3105
   HEAP32[$352 >> 2] = $44; //@line 3106
   $353 = $ReallocAsyncCtx3 + 88 | 0; //@line 3107
   HEAP32[$353 >> 2] = $46; //@line 3108
   $354 = $ReallocAsyncCtx3 + 92 | 0; //@line 3109
   HEAP32[$354 >> 2] = $48; //@line 3110
   $355 = $ReallocAsyncCtx3 + 96 | 0; //@line 3111
   HEAP32[$355 >> 2] = $50; //@line 3112
   $356 = $ReallocAsyncCtx3 + 100 | 0; //@line 3113
   HEAP32[$356 >> 2] = $52; //@line 3114
   $357 = $ReallocAsyncCtx3 + 104 | 0; //@line 3115
   HEAP32[$357 >> 2] = $54; //@line 3116
   $358 = $ReallocAsyncCtx3 + 108 | 0; //@line 3117
   HEAP32[$358 >> 2] = $56; //@line 3118
   $359 = $ReallocAsyncCtx3 + 112 | 0; //@line 3119
   HEAP32[$359 >> 2] = $58; //@line 3120
   $360 = $ReallocAsyncCtx3 + 116 | 0; //@line 3121
   HEAP32[$360 >> 2] = $60; //@line 3122
   $361 = $ReallocAsyncCtx3 + 120 | 0; //@line 3123
   HEAP32[$361 >> 2] = $62; //@line 3124
   $362 = $ReallocAsyncCtx3 + 124 | 0; //@line 3125
   HEAP32[$362 >> 2] = $64; //@line 3126
   $363 = $ReallocAsyncCtx3 + 128 | 0; //@line 3127
   HEAP32[$363 >> 2] = $66; //@line 3128
   $364 = $ReallocAsyncCtx3 + 132 | 0; //@line 3129
   HEAP32[$364 >> 2] = $68; //@line 3130
   $365 = $ReallocAsyncCtx3 + 136 | 0; //@line 3131
   HEAP32[$365 >> 2] = $70; //@line 3132
   $366 = $ReallocAsyncCtx3 + 140 | 0; //@line 3133
   HEAP8[$366 >> 0] = $72; //@line 3134
   $367 = $ReallocAsyncCtx3 + 144 | 0; //@line 3135
   HEAP32[$367 >> 2] = $74; //@line 3136
   $368 = $ReallocAsyncCtx3 + 148 | 0; //@line 3137
   HEAP32[$368 >> 2] = $76; //@line 3138
   $369 = $ReallocAsyncCtx3 + 152 | 0; //@line 3139
   HEAP32[$369 >> 2] = $78; //@line 3140
   $370 = $ReallocAsyncCtx3 + 156 | 0; //@line 3141
   HEAP32[$370 >> 2] = $80; //@line 3142
   $371 = $ReallocAsyncCtx3 + 160 | 0; //@line 3143
   HEAP32[$371 >> 2] = $82; //@line 3144
   $372 = $ReallocAsyncCtx3 + 164 | 0; //@line 3145
   HEAP32[$372 >> 2] = $84; //@line 3146
   $373 = $ReallocAsyncCtx3 + 168 | 0; //@line 3147
   HEAP32[$373 >> 2] = $86; //@line 3148
   $374 = $ReallocAsyncCtx3 + 172 | 0; //@line 3149
   HEAP32[$374 >> 2] = $88; //@line 3150
   $375 = $ReallocAsyncCtx3 + 176 | 0; //@line 3151
   HEAP32[$375 >> 2] = $90; //@line 3152
   $376 = $ReallocAsyncCtx3 + 180 | 0; //@line 3153
   HEAP32[$376 >> 2] = $92; //@line 3154
   $377 = $ReallocAsyncCtx3 + 184 | 0; //@line 3155
   HEAP32[$377 >> 2] = $94; //@line 3156
   $378 = $ReallocAsyncCtx3 + 188 | 0; //@line 3157
   HEAP32[$378 >> 2] = $96; //@line 3158
   $379 = $ReallocAsyncCtx3 + 192 | 0; //@line 3159
   HEAP8[$379 >> 0] = $119; //@line 3160
   $380 = $ReallocAsyncCtx3 + 196 | 0; //@line 3161
   HEAP32[$380 >> 2] = $98; //@line 3162
   $381 = $ReallocAsyncCtx3 + 200 | 0; //@line 3163
   HEAP32[$381 >> 2] = $100; //@line 3164
   $382 = $ReallocAsyncCtx3 + 204 | 0; //@line 3165
   HEAP32[$382 >> 2] = $102; //@line 3166
   $383 = $ReallocAsyncCtx3 + 208 | 0; //@line 3167
   HEAP32[$383 >> 2] = $104; //@line 3168
   $384 = $ReallocAsyncCtx3 + 212 | 0; //@line 3169
   HEAP32[$384 >> 2] = $106; //@line 3170
   $385 = $ReallocAsyncCtx3 + 216 | 0; //@line 3171
   HEAP32[$385 >> 2] = $108; //@line 3172
   $386 = $ReallocAsyncCtx3 + 220 | 0; //@line 3173
   HEAP8[$386 >> 0] = $110; //@line 3174
   $387 = $ReallocAsyncCtx3 + 221 | 0; //@line 3175
   HEAP8[$387 >> 0] = $2; //@line 3176
   $388 = $ReallocAsyncCtx3 + 224 | 0; //@line 3177
   HEAP32[$388 >> 2] = $16; //@line 3178
   $389 = $ReallocAsyncCtx3 + 228 | 0; //@line 3179
   HEAP32[$389 >> 2] = $18; //@line 3180
   sp = STACKTOP; //@line 3181
   return;
  }
  HEAP8[___async_retval >> 0] = $331; //@line 3185
  ___async_unwind = 0; //@line 3186
  HEAP32[$ReallocAsyncCtx3 >> 2] = 491; //@line 3187
  $332 = $ReallocAsyncCtx3 + 4 | 0; //@line 3188
  HEAP32[$332 >> 2] = $14; //@line 3189
  $333 = $ReallocAsyncCtx3 + 8 | 0; //@line 3190
  HEAP32[$333 >> 2] = $4; //@line 3191
  $334 = $ReallocAsyncCtx3 + 12 | 0; //@line 3192
  HEAP32[$334 >> 2] = $6; //@line 3193
  $335 = $ReallocAsyncCtx3 + 16 | 0; //@line 3194
  HEAP32[$335 >> 2] = $8; //@line 3195
  $336 = $ReallocAsyncCtx3 + 20 | 0; //@line 3196
  HEAP32[$336 >> 2] = $10; //@line 3197
  $337 = $ReallocAsyncCtx3 + 24 | 0; //@line 3198
  HEAP32[$337 >> 2] = $116; //@line 3199
  $338 = $ReallocAsyncCtx3 + 28 | 0; //@line 3200
  HEAP32[$338 >> 2] = $112; //@line 3201
  $339 = $ReallocAsyncCtx3 + 32 | 0; //@line 3202
  HEAP32[$339 >> 2] = $114; //@line 3203
  $340 = $ReallocAsyncCtx3 + 36 | 0; //@line 3204
  HEAP32[$340 >> 2] = $20; //@line 3205
  $341 = $ReallocAsyncCtx3 + 40 | 0; //@line 3206
  HEAP32[$341 >> 2] = $22; //@line 3207
  $342 = $ReallocAsyncCtx3 + 44 | 0; //@line 3208
  HEAP32[$342 >> 2] = $24; //@line 3209
  $343 = $ReallocAsyncCtx3 + 48 | 0; //@line 3210
  HEAP32[$343 >> 2] = $26; //@line 3211
  $344 = $ReallocAsyncCtx3 + 52 | 0; //@line 3212
  HEAP32[$344 >> 2] = $28; //@line 3213
  $345 = $ReallocAsyncCtx3 + 56 | 0; //@line 3214
  HEAP32[$345 >> 2] = $30; //@line 3215
  $346 = $ReallocAsyncCtx3 + 60 | 0; //@line 3216
  HEAP32[$346 >> 2] = $32; //@line 3217
  $347 = $ReallocAsyncCtx3 + 64 | 0; //@line 3218
  HEAP32[$347 >> 2] = $34; //@line 3219
  $348 = $ReallocAsyncCtx3 + 68 | 0; //@line 3220
  HEAP32[$348 >> 2] = $36; //@line 3221
  $349 = $ReallocAsyncCtx3 + 72 | 0; //@line 3222
  HEAP32[$349 >> 2] = $38; //@line 3223
  $350 = $ReallocAsyncCtx3 + 76 | 0; //@line 3224
  HEAP32[$350 >> 2] = $40; //@line 3225
  $351 = $ReallocAsyncCtx3 + 80 | 0; //@line 3226
  HEAP32[$351 >> 2] = $42; //@line 3227
  $352 = $ReallocAsyncCtx3 + 84 | 0; //@line 3228
  HEAP32[$352 >> 2] = $44; //@line 3229
  $353 = $ReallocAsyncCtx3 + 88 | 0; //@line 3230
  HEAP32[$353 >> 2] = $46; //@line 3231
  $354 = $ReallocAsyncCtx3 + 92 | 0; //@line 3232
  HEAP32[$354 >> 2] = $48; //@line 3233
  $355 = $ReallocAsyncCtx3 + 96 | 0; //@line 3234
  HEAP32[$355 >> 2] = $50; //@line 3235
  $356 = $ReallocAsyncCtx3 + 100 | 0; //@line 3236
  HEAP32[$356 >> 2] = $52; //@line 3237
  $357 = $ReallocAsyncCtx3 + 104 | 0; //@line 3238
  HEAP32[$357 >> 2] = $54; //@line 3239
  $358 = $ReallocAsyncCtx3 + 108 | 0; //@line 3240
  HEAP32[$358 >> 2] = $56; //@line 3241
  $359 = $ReallocAsyncCtx3 + 112 | 0; //@line 3242
  HEAP32[$359 >> 2] = $58; //@line 3243
  $360 = $ReallocAsyncCtx3 + 116 | 0; //@line 3244
  HEAP32[$360 >> 2] = $60; //@line 3245
  $361 = $ReallocAsyncCtx3 + 120 | 0; //@line 3246
  HEAP32[$361 >> 2] = $62; //@line 3247
  $362 = $ReallocAsyncCtx3 + 124 | 0; //@line 3248
  HEAP32[$362 >> 2] = $64; //@line 3249
  $363 = $ReallocAsyncCtx3 + 128 | 0; //@line 3250
  HEAP32[$363 >> 2] = $66; //@line 3251
  $364 = $ReallocAsyncCtx3 + 132 | 0; //@line 3252
  HEAP32[$364 >> 2] = $68; //@line 3253
  $365 = $ReallocAsyncCtx3 + 136 | 0; //@line 3254
  HEAP32[$365 >> 2] = $70; //@line 3255
  $366 = $ReallocAsyncCtx3 + 140 | 0; //@line 3256
  HEAP8[$366 >> 0] = $72; //@line 3257
  $367 = $ReallocAsyncCtx3 + 144 | 0; //@line 3258
  HEAP32[$367 >> 2] = $74; //@line 3259
  $368 = $ReallocAsyncCtx3 + 148 | 0; //@line 3260
  HEAP32[$368 >> 2] = $76; //@line 3261
  $369 = $ReallocAsyncCtx3 + 152 | 0; //@line 3262
  HEAP32[$369 >> 2] = $78; //@line 3263
  $370 = $ReallocAsyncCtx3 + 156 | 0; //@line 3264
  HEAP32[$370 >> 2] = $80; //@line 3265
  $371 = $ReallocAsyncCtx3 + 160 | 0; //@line 3266
  HEAP32[$371 >> 2] = $82; //@line 3267
  $372 = $ReallocAsyncCtx3 + 164 | 0; //@line 3268
  HEAP32[$372 >> 2] = $84; //@line 3269
  $373 = $ReallocAsyncCtx3 + 168 | 0; //@line 3270
  HEAP32[$373 >> 2] = $86; //@line 3271
  $374 = $ReallocAsyncCtx3 + 172 | 0; //@line 3272
  HEAP32[$374 >> 2] = $88; //@line 3273
  $375 = $ReallocAsyncCtx3 + 176 | 0; //@line 3274
  HEAP32[$375 >> 2] = $90; //@line 3275
  $376 = $ReallocAsyncCtx3 + 180 | 0; //@line 3276
  HEAP32[$376 >> 2] = $92; //@line 3277
  $377 = $ReallocAsyncCtx3 + 184 | 0; //@line 3278
  HEAP32[$377 >> 2] = $94; //@line 3279
  $378 = $ReallocAsyncCtx3 + 188 | 0; //@line 3280
  HEAP32[$378 >> 2] = $96; //@line 3281
  $379 = $ReallocAsyncCtx3 + 192 | 0; //@line 3282
  HEAP8[$379 >> 0] = $119; //@line 3283
  $380 = $ReallocAsyncCtx3 + 196 | 0; //@line 3284
  HEAP32[$380 >> 2] = $98; //@line 3285
  $381 = $ReallocAsyncCtx3 + 200 | 0; //@line 3286
  HEAP32[$381 >> 2] = $100; //@line 3287
  $382 = $ReallocAsyncCtx3 + 204 | 0; //@line 3288
  HEAP32[$382 >> 2] = $102; //@line 3289
  $383 = $ReallocAsyncCtx3 + 208 | 0; //@line 3290
  HEAP32[$383 >> 2] = $104; //@line 3291
  $384 = $ReallocAsyncCtx3 + 212 | 0; //@line 3292
  HEAP32[$384 >> 2] = $106; //@line 3293
  $385 = $ReallocAsyncCtx3 + 216 | 0; //@line 3294
  HEAP32[$385 >> 2] = $108; //@line 3295
  $386 = $ReallocAsyncCtx3 + 220 | 0; //@line 3296
  HEAP8[$386 >> 0] = $110; //@line 3297
  $387 = $ReallocAsyncCtx3 + 221 | 0; //@line 3298
  HEAP8[$387 >> 0] = $2; //@line 3299
  $388 = $ReallocAsyncCtx3 + 224 | 0; //@line 3300
  HEAP32[$388 >> 2] = $16; //@line 3301
  $389 = $ReallocAsyncCtx3 + 228 | 0; //@line 3302
  HEAP32[$389 >> 2] = $18; //@line 3303
  sp = STACKTOP; //@line 3304
  return;
 } else if ((label | 0) == 23) {
  $409 = HEAP8[$114 + ($119 & 255) >> 0] | 0; //@line 3311
  HEAP32[$16 >> 2] = (HEAPU8[$114 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$114 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$114 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 3332
  HEAP32[$90 >> 2] = 0; //@line 3333
  $430 = $$0$be + 6 << 24 >> 24; //@line 3334
  HEAP8[$96 >> 0] = HEAP8[$114 + ($$0$be + 5 & 255) >> 0] | 0; //@line 3338
  $436 = HEAP32[(HEAP32[$28 >> 2] | 0) + 8 >> 2] | 0; //@line 3341
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(232) | 0; //@line 3342
  $437 = FUNCTION_TABLE_iiii[$436 & 31]($88, $409, $18) | 0; //@line 3343
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 492; //@line 3346
   $438 = $ReallocAsyncCtx4 + 4 | 0; //@line 3347
   HEAP32[$438 >> 2] = $14; //@line 3348
   $439 = $ReallocAsyncCtx4 + 8 | 0; //@line 3349
   HEAP32[$439 >> 2] = $4; //@line 3350
   $440 = $ReallocAsyncCtx4 + 12 | 0; //@line 3351
   HEAP32[$440 >> 2] = $6; //@line 3352
   $441 = $ReallocAsyncCtx4 + 16 | 0; //@line 3353
   HEAP32[$441 >> 2] = $8; //@line 3354
   $442 = $ReallocAsyncCtx4 + 20 | 0; //@line 3355
   HEAP32[$442 >> 2] = $10; //@line 3356
   $443 = $ReallocAsyncCtx4 + 24 | 0; //@line 3357
   HEAP32[$443 >> 2] = $116; //@line 3358
   $444 = $ReallocAsyncCtx4 + 28 | 0; //@line 3359
   HEAP32[$444 >> 2] = $112; //@line 3360
   $445 = $ReallocAsyncCtx4 + 32 | 0; //@line 3361
   HEAP32[$445 >> 2] = $114; //@line 3362
   $446 = $ReallocAsyncCtx4 + 36 | 0; //@line 3363
   HEAP32[$446 >> 2] = $20; //@line 3364
   $447 = $ReallocAsyncCtx4 + 40 | 0; //@line 3365
   HEAP32[$447 >> 2] = $22; //@line 3366
   $448 = $ReallocAsyncCtx4 + 44 | 0; //@line 3367
   HEAP32[$448 >> 2] = $24; //@line 3368
   $449 = $ReallocAsyncCtx4 + 48 | 0; //@line 3369
   HEAP32[$449 >> 2] = $26; //@line 3370
   $450 = $ReallocAsyncCtx4 + 52 | 0; //@line 3371
   HEAP32[$450 >> 2] = $28; //@line 3372
   $451 = $ReallocAsyncCtx4 + 56 | 0; //@line 3373
   HEAP32[$451 >> 2] = $30; //@line 3374
   $452 = $ReallocAsyncCtx4 + 60 | 0; //@line 3375
   HEAP32[$452 >> 2] = $32; //@line 3376
   $453 = $ReallocAsyncCtx4 + 64 | 0; //@line 3377
   HEAP32[$453 >> 2] = $34; //@line 3378
   $454 = $ReallocAsyncCtx4 + 68 | 0; //@line 3379
   HEAP32[$454 >> 2] = $36; //@line 3380
   $455 = $ReallocAsyncCtx4 + 72 | 0; //@line 3381
   HEAP32[$455 >> 2] = $38; //@line 3382
   $456 = $ReallocAsyncCtx4 + 76 | 0; //@line 3383
   HEAP32[$456 >> 2] = $40; //@line 3384
   $457 = $ReallocAsyncCtx4 + 80 | 0; //@line 3385
   HEAP32[$457 >> 2] = $42; //@line 3386
   $458 = $ReallocAsyncCtx4 + 84 | 0; //@line 3387
   HEAP32[$458 >> 2] = $44; //@line 3388
   $459 = $ReallocAsyncCtx4 + 88 | 0; //@line 3389
   HEAP8[$459 >> 0] = $430; //@line 3390
   $460 = $ReallocAsyncCtx4 + 92 | 0; //@line 3391
   HEAP32[$460 >> 2] = $46; //@line 3392
   $461 = $ReallocAsyncCtx4 + 96 | 0; //@line 3393
   HEAP32[$461 >> 2] = $48; //@line 3394
   $462 = $ReallocAsyncCtx4 + 100 | 0; //@line 3395
   HEAP32[$462 >> 2] = $50; //@line 3396
   $463 = $ReallocAsyncCtx4 + 104 | 0; //@line 3397
   HEAP32[$463 >> 2] = $52; //@line 3398
   $464 = $ReallocAsyncCtx4 + 108 | 0; //@line 3399
   HEAP32[$464 >> 2] = $54; //@line 3400
   $465 = $ReallocAsyncCtx4 + 112 | 0; //@line 3401
   HEAP32[$465 >> 2] = $56; //@line 3402
   $466 = $ReallocAsyncCtx4 + 116 | 0; //@line 3403
   HEAP32[$466 >> 2] = $58; //@line 3404
   $467 = $ReallocAsyncCtx4 + 120 | 0; //@line 3405
   HEAP32[$467 >> 2] = $60; //@line 3406
   $468 = $ReallocAsyncCtx4 + 124 | 0; //@line 3407
   HEAP32[$468 >> 2] = $62; //@line 3408
   $469 = $ReallocAsyncCtx4 + 128 | 0; //@line 3409
   HEAP32[$469 >> 2] = $64; //@line 3410
   $470 = $ReallocAsyncCtx4 + 132 | 0; //@line 3411
   HEAP32[$470 >> 2] = $66; //@line 3412
   $471 = $ReallocAsyncCtx4 + 136 | 0; //@line 3413
   HEAP32[$471 >> 2] = $68; //@line 3414
   $472 = $ReallocAsyncCtx4 + 140 | 0; //@line 3415
   HEAP32[$472 >> 2] = $70; //@line 3416
   $473 = $ReallocAsyncCtx4 + 144 | 0; //@line 3417
   HEAP8[$473 >> 0] = $72; //@line 3418
   $474 = $ReallocAsyncCtx4 + 148 | 0; //@line 3419
   HEAP32[$474 >> 2] = $74; //@line 3420
   $475 = $ReallocAsyncCtx4 + 152 | 0; //@line 3421
   HEAP32[$475 >> 2] = $76; //@line 3422
   $476 = $ReallocAsyncCtx4 + 156 | 0; //@line 3423
   HEAP32[$476 >> 2] = $78; //@line 3424
   $477 = $ReallocAsyncCtx4 + 160 | 0; //@line 3425
   HEAP32[$477 >> 2] = $80; //@line 3426
   $478 = $ReallocAsyncCtx4 + 164 | 0; //@line 3427
   HEAP32[$478 >> 2] = $82; //@line 3428
   $479 = $ReallocAsyncCtx4 + 168 | 0; //@line 3429
   HEAP32[$479 >> 2] = $84; //@line 3430
   $480 = $ReallocAsyncCtx4 + 172 | 0; //@line 3431
   HEAP32[$480 >> 2] = $86; //@line 3432
   $481 = $ReallocAsyncCtx4 + 176 | 0; //@line 3433
   HEAP32[$481 >> 2] = $88; //@line 3434
   $482 = $ReallocAsyncCtx4 + 180 | 0; //@line 3435
   HEAP32[$482 >> 2] = $90; //@line 3436
   $483 = $ReallocAsyncCtx4 + 184 | 0; //@line 3437
   HEAP32[$483 >> 2] = $92; //@line 3438
   $484 = $ReallocAsyncCtx4 + 188 | 0; //@line 3439
   HEAP32[$484 >> 2] = $94; //@line 3440
   $485 = $ReallocAsyncCtx4 + 192 | 0; //@line 3441
   HEAP32[$485 >> 2] = $96; //@line 3442
   $486 = $ReallocAsyncCtx4 + 196 | 0; //@line 3443
   HEAP32[$486 >> 2] = $98; //@line 3444
   $487 = $ReallocAsyncCtx4 + 200 | 0; //@line 3445
   HEAP32[$487 >> 2] = $100; //@line 3446
   $488 = $ReallocAsyncCtx4 + 204 | 0; //@line 3447
   HEAP32[$488 >> 2] = $102; //@line 3448
   $489 = $ReallocAsyncCtx4 + 208 | 0; //@line 3449
   HEAP32[$489 >> 2] = $104; //@line 3450
   $490 = $ReallocAsyncCtx4 + 212 | 0; //@line 3451
   HEAP32[$490 >> 2] = $106; //@line 3452
   $491 = $ReallocAsyncCtx4 + 216 | 0; //@line 3453
   HEAP32[$491 >> 2] = $108; //@line 3454
   $492 = $ReallocAsyncCtx4 + 220 | 0; //@line 3455
   HEAP8[$492 >> 0] = $110; //@line 3456
   $493 = $ReallocAsyncCtx4 + 221 | 0; //@line 3457
   HEAP8[$493 >> 0] = $2; //@line 3458
   $494 = $ReallocAsyncCtx4 + 224 | 0; //@line 3459
   HEAP32[$494 >> 2] = $16; //@line 3460
   $495 = $ReallocAsyncCtx4 + 228 | 0; //@line 3461
   HEAP32[$495 >> 2] = $18; //@line 3462
   sp = STACKTOP; //@line 3463
   return;
  }
  HEAP8[___async_retval >> 0] = $437; //@line 3467
  ___async_unwind = 0; //@line 3468
  HEAP32[$ReallocAsyncCtx4 >> 2] = 492; //@line 3469
  $438 = $ReallocAsyncCtx4 + 4 | 0; //@line 3470
  HEAP32[$438 >> 2] = $14; //@line 3471
  $439 = $ReallocAsyncCtx4 + 8 | 0; //@line 3472
  HEAP32[$439 >> 2] = $4; //@line 3473
  $440 = $ReallocAsyncCtx4 + 12 | 0; //@line 3474
  HEAP32[$440 >> 2] = $6; //@line 3475
  $441 = $ReallocAsyncCtx4 + 16 | 0; //@line 3476
  HEAP32[$441 >> 2] = $8; //@line 3477
  $442 = $ReallocAsyncCtx4 + 20 | 0; //@line 3478
  HEAP32[$442 >> 2] = $10; //@line 3479
  $443 = $ReallocAsyncCtx4 + 24 | 0; //@line 3480
  HEAP32[$443 >> 2] = $116; //@line 3481
  $444 = $ReallocAsyncCtx4 + 28 | 0; //@line 3482
  HEAP32[$444 >> 2] = $112; //@line 3483
  $445 = $ReallocAsyncCtx4 + 32 | 0; //@line 3484
  HEAP32[$445 >> 2] = $114; //@line 3485
  $446 = $ReallocAsyncCtx4 + 36 | 0; //@line 3486
  HEAP32[$446 >> 2] = $20; //@line 3487
  $447 = $ReallocAsyncCtx4 + 40 | 0; //@line 3488
  HEAP32[$447 >> 2] = $22; //@line 3489
  $448 = $ReallocAsyncCtx4 + 44 | 0; //@line 3490
  HEAP32[$448 >> 2] = $24; //@line 3491
  $449 = $ReallocAsyncCtx4 + 48 | 0; //@line 3492
  HEAP32[$449 >> 2] = $26; //@line 3493
  $450 = $ReallocAsyncCtx4 + 52 | 0; //@line 3494
  HEAP32[$450 >> 2] = $28; //@line 3495
  $451 = $ReallocAsyncCtx4 + 56 | 0; //@line 3496
  HEAP32[$451 >> 2] = $30; //@line 3497
  $452 = $ReallocAsyncCtx4 + 60 | 0; //@line 3498
  HEAP32[$452 >> 2] = $32; //@line 3499
  $453 = $ReallocAsyncCtx4 + 64 | 0; //@line 3500
  HEAP32[$453 >> 2] = $34; //@line 3501
  $454 = $ReallocAsyncCtx4 + 68 | 0; //@line 3502
  HEAP32[$454 >> 2] = $36; //@line 3503
  $455 = $ReallocAsyncCtx4 + 72 | 0; //@line 3504
  HEAP32[$455 >> 2] = $38; //@line 3505
  $456 = $ReallocAsyncCtx4 + 76 | 0; //@line 3506
  HEAP32[$456 >> 2] = $40; //@line 3507
  $457 = $ReallocAsyncCtx4 + 80 | 0; //@line 3508
  HEAP32[$457 >> 2] = $42; //@line 3509
  $458 = $ReallocAsyncCtx4 + 84 | 0; //@line 3510
  HEAP32[$458 >> 2] = $44; //@line 3511
  $459 = $ReallocAsyncCtx4 + 88 | 0; //@line 3512
  HEAP8[$459 >> 0] = $430; //@line 3513
  $460 = $ReallocAsyncCtx4 + 92 | 0; //@line 3514
  HEAP32[$460 >> 2] = $46; //@line 3515
  $461 = $ReallocAsyncCtx4 + 96 | 0; //@line 3516
  HEAP32[$461 >> 2] = $48; //@line 3517
  $462 = $ReallocAsyncCtx4 + 100 | 0; //@line 3518
  HEAP32[$462 >> 2] = $50; //@line 3519
  $463 = $ReallocAsyncCtx4 + 104 | 0; //@line 3520
  HEAP32[$463 >> 2] = $52; //@line 3521
  $464 = $ReallocAsyncCtx4 + 108 | 0; //@line 3522
  HEAP32[$464 >> 2] = $54; //@line 3523
  $465 = $ReallocAsyncCtx4 + 112 | 0; //@line 3524
  HEAP32[$465 >> 2] = $56; //@line 3525
  $466 = $ReallocAsyncCtx4 + 116 | 0; //@line 3526
  HEAP32[$466 >> 2] = $58; //@line 3527
  $467 = $ReallocAsyncCtx4 + 120 | 0; //@line 3528
  HEAP32[$467 >> 2] = $60; //@line 3529
  $468 = $ReallocAsyncCtx4 + 124 | 0; //@line 3530
  HEAP32[$468 >> 2] = $62; //@line 3531
  $469 = $ReallocAsyncCtx4 + 128 | 0; //@line 3532
  HEAP32[$469 >> 2] = $64; //@line 3533
  $470 = $ReallocAsyncCtx4 + 132 | 0; //@line 3534
  HEAP32[$470 >> 2] = $66; //@line 3535
  $471 = $ReallocAsyncCtx4 + 136 | 0; //@line 3536
  HEAP32[$471 >> 2] = $68; //@line 3537
  $472 = $ReallocAsyncCtx4 + 140 | 0; //@line 3538
  HEAP32[$472 >> 2] = $70; //@line 3539
  $473 = $ReallocAsyncCtx4 + 144 | 0; //@line 3540
  HEAP8[$473 >> 0] = $72; //@line 3541
  $474 = $ReallocAsyncCtx4 + 148 | 0; //@line 3542
  HEAP32[$474 >> 2] = $74; //@line 3543
  $475 = $ReallocAsyncCtx4 + 152 | 0; //@line 3544
  HEAP32[$475 >> 2] = $76; //@line 3545
  $476 = $ReallocAsyncCtx4 + 156 | 0; //@line 3546
  HEAP32[$476 >> 2] = $78; //@line 3547
  $477 = $ReallocAsyncCtx4 + 160 | 0; //@line 3548
  HEAP32[$477 >> 2] = $80; //@line 3549
  $478 = $ReallocAsyncCtx4 + 164 | 0; //@line 3550
  HEAP32[$478 >> 2] = $82; //@line 3551
  $479 = $ReallocAsyncCtx4 + 168 | 0; //@line 3552
  HEAP32[$479 >> 2] = $84; //@line 3553
  $480 = $ReallocAsyncCtx4 + 172 | 0; //@line 3554
  HEAP32[$480 >> 2] = $86; //@line 3555
  $481 = $ReallocAsyncCtx4 + 176 | 0; //@line 3556
  HEAP32[$481 >> 2] = $88; //@line 3557
  $482 = $ReallocAsyncCtx4 + 180 | 0; //@line 3558
  HEAP32[$482 >> 2] = $90; //@line 3559
  $483 = $ReallocAsyncCtx4 + 184 | 0; //@line 3560
  HEAP32[$483 >> 2] = $92; //@line 3561
  $484 = $ReallocAsyncCtx4 + 188 | 0; //@line 3562
  HEAP32[$484 >> 2] = $94; //@line 3563
  $485 = $ReallocAsyncCtx4 + 192 | 0; //@line 3564
  HEAP32[$485 >> 2] = $96; //@line 3565
  $486 = $ReallocAsyncCtx4 + 196 | 0; //@line 3566
  HEAP32[$486 >> 2] = $98; //@line 3567
  $487 = $ReallocAsyncCtx4 + 200 | 0; //@line 3568
  HEAP32[$487 >> 2] = $100; //@line 3569
  $488 = $ReallocAsyncCtx4 + 204 | 0; //@line 3570
  HEAP32[$488 >> 2] = $102; //@line 3571
  $489 = $ReallocAsyncCtx4 + 208 | 0; //@line 3572
  HEAP32[$489 >> 2] = $104; //@line 3573
  $490 = $ReallocAsyncCtx4 + 212 | 0; //@line 3574
  HEAP32[$490 >> 2] = $106; //@line 3575
  $491 = $ReallocAsyncCtx4 + 216 | 0; //@line 3576
  HEAP32[$491 >> 2] = $108; //@line 3577
  $492 = $ReallocAsyncCtx4 + 220 | 0; //@line 3578
  HEAP8[$492 >> 0] = $110; //@line 3579
  $493 = $ReallocAsyncCtx4 + 221 | 0; //@line 3580
  HEAP8[$493 >> 0] = $2; //@line 3581
  $494 = $ReallocAsyncCtx4 + 224 | 0; //@line 3582
  HEAP32[$494 >> 2] = $16; //@line 3583
  $495 = $ReallocAsyncCtx4 + 228 | 0; //@line 3584
  HEAP32[$495 >> 2] = $18; //@line 3585
  sp = STACKTOP; //@line 3586
  return;
 } else if ((label | 0) == 29) {
  $516 = $$0$be + 2 << 24 >> 24; //@line 3590
  $520 = HEAPU8[$114 + ($119 & 255) >> 0] | 0; //@line 3594
  $522 = $520 >>> 5 & 1; //@line 3597
  $524 = $520 >>> 4 & 1; //@line 3600
  $527 = HEAP32[(HEAP32[$22 >> 2] | 0) + 44 >> 2] | 0; //@line 3603
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(248) | 0; //@line 3604
  $528 = FUNCTION_TABLE_iiii[$527 & 31]($88, $524, $522) | 0; //@line 3605
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 493; //@line 3608
   $529 = $ReallocAsyncCtx5 + 4 | 0; //@line 3609
   HEAP32[$529 >> 2] = $14; //@line 3610
   $530 = $ReallocAsyncCtx5 + 8 | 0; //@line 3611
   HEAP32[$530 >> 2] = $4; //@line 3612
   $531 = $ReallocAsyncCtx5 + 12 | 0; //@line 3613
   HEAP32[$531 >> 2] = $6; //@line 3614
   $532 = $ReallocAsyncCtx5 + 16 | 0; //@line 3615
   HEAP32[$532 >> 2] = $8; //@line 3616
   $533 = $ReallocAsyncCtx5 + 20 | 0; //@line 3617
   HEAP32[$533 >> 2] = $10; //@line 3618
   $534 = $ReallocAsyncCtx5 + 24 | 0; //@line 3619
   HEAP32[$534 >> 2] = $116; //@line 3620
   $535 = $ReallocAsyncCtx5 + 28 | 0; //@line 3621
   HEAP32[$535 >> 2] = $112; //@line 3622
   $536 = $ReallocAsyncCtx5 + 32 | 0; //@line 3623
   HEAP32[$536 >> 2] = $114; //@line 3624
   $537 = $ReallocAsyncCtx5 + 36 | 0; //@line 3625
   HEAP32[$537 >> 2] = $20; //@line 3626
   $538 = $ReallocAsyncCtx5 + 40 | 0; //@line 3627
   HEAP32[$538 >> 2] = $22; //@line 3628
   $539 = $ReallocAsyncCtx5 + 44 | 0; //@line 3629
   HEAP32[$539 >> 2] = $520; //@line 3630
   $540 = $ReallocAsyncCtx5 + 48 | 0; //@line 3631
   HEAP32[$540 >> 2] = $24; //@line 3632
   $541 = $ReallocAsyncCtx5 + 52 | 0; //@line 3633
   HEAP32[$541 >> 2] = $26; //@line 3634
   $542 = $ReallocAsyncCtx5 + 56 | 0; //@line 3635
   HEAP32[$542 >> 2] = $28; //@line 3636
   $543 = $ReallocAsyncCtx5 + 60 | 0; //@line 3637
   HEAP32[$543 >> 2] = $30; //@line 3638
   $544 = $ReallocAsyncCtx5 + 64 | 0; //@line 3639
   HEAP32[$544 >> 2] = $32; //@line 3640
   $545 = $ReallocAsyncCtx5 + 68 | 0; //@line 3641
   HEAP32[$545 >> 2] = $34; //@line 3642
   $546 = $ReallocAsyncCtx5 + 72 | 0; //@line 3643
   HEAP32[$546 >> 2] = $36; //@line 3644
   $547 = $ReallocAsyncCtx5 + 76 | 0; //@line 3645
   HEAP32[$547 >> 2] = $38; //@line 3646
   $548 = $ReallocAsyncCtx5 + 80 | 0; //@line 3647
   HEAP32[$548 >> 2] = $40; //@line 3648
   $549 = $ReallocAsyncCtx5 + 84 | 0; //@line 3649
   HEAP32[$549 >> 2] = $42; //@line 3650
   $550 = $ReallocAsyncCtx5 + 88 | 0; //@line 3651
   HEAP32[$550 >> 2] = $44; //@line 3652
   $551 = $ReallocAsyncCtx5 + 92 | 0; //@line 3653
   HEAP32[$551 >> 2] = $46; //@line 3654
   $552 = $ReallocAsyncCtx5 + 96 | 0; //@line 3655
   HEAP32[$552 >> 2] = $48; //@line 3656
   $553 = $ReallocAsyncCtx5 + 100 | 0; //@line 3657
   HEAP32[$553 >> 2] = $50; //@line 3658
   $554 = $ReallocAsyncCtx5 + 104 | 0; //@line 3659
   HEAP8[$554 >> 0] = $516; //@line 3660
   $555 = $ReallocAsyncCtx5 + 108 | 0; //@line 3661
   HEAP32[$555 >> 2] = $52; //@line 3662
   $556 = $ReallocAsyncCtx5 + 112 | 0; //@line 3663
   HEAP32[$556 >> 2] = $54; //@line 3664
   $557 = $ReallocAsyncCtx5 + 116 | 0; //@line 3665
   HEAP32[$557 >> 2] = $56; //@line 3666
   $558 = $ReallocAsyncCtx5 + 120 | 0; //@line 3667
   HEAP32[$558 >> 2] = $58; //@line 3668
   $559 = $ReallocAsyncCtx5 + 124 | 0; //@line 3669
   HEAP8[$559 >> 0] = $522; //@line 3670
   $560 = $ReallocAsyncCtx5 + 128 | 0; //@line 3671
   HEAP32[$560 >> 2] = $60; //@line 3672
   $561 = $ReallocAsyncCtx5 + 132 | 0; //@line 3673
   HEAP32[$561 >> 2] = $62; //@line 3674
   $562 = $ReallocAsyncCtx5 + 136 | 0; //@line 3675
   HEAP32[$562 >> 2] = $64; //@line 3676
   $563 = $ReallocAsyncCtx5 + 140 | 0; //@line 3677
   HEAP32[$563 >> 2] = $66; //@line 3678
   $564 = $ReallocAsyncCtx5 + 144 | 0; //@line 3679
   HEAP32[$564 >> 2] = $68; //@line 3680
   $565 = $ReallocAsyncCtx5 + 148 | 0; //@line 3681
   HEAP32[$565 >> 2] = $70; //@line 3682
   $566 = $ReallocAsyncCtx5 + 152 | 0; //@line 3683
   HEAP8[$566 >> 0] = $72; //@line 3684
   $567 = $ReallocAsyncCtx5 + 156 | 0; //@line 3685
   HEAP32[$567 >> 2] = $74; //@line 3686
   $568 = $ReallocAsyncCtx5 + 160 | 0; //@line 3687
   HEAP8[$568 >> 0] = $524; //@line 3688
   $569 = $ReallocAsyncCtx5 + 164 | 0; //@line 3689
   HEAP32[$569 >> 2] = $76; //@line 3690
   $570 = $ReallocAsyncCtx5 + 168 | 0; //@line 3691
   HEAP32[$570 >> 2] = $78; //@line 3692
   $571 = $ReallocAsyncCtx5 + 172 | 0; //@line 3693
   HEAP32[$571 >> 2] = $80; //@line 3694
   $572 = $ReallocAsyncCtx5 + 176 | 0; //@line 3695
   HEAP32[$572 >> 2] = $82; //@line 3696
   $573 = $ReallocAsyncCtx5 + 180 | 0; //@line 3697
   HEAP32[$573 >> 2] = $84; //@line 3698
   $574 = $ReallocAsyncCtx5 + 184 | 0; //@line 3699
   HEAP32[$574 >> 2] = $86; //@line 3700
   $575 = $ReallocAsyncCtx5 + 188 | 0; //@line 3701
   HEAP32[$575 >> 2] = $$0107$be; //@line 3702
   $576 = $ReallocAsyncCtx5 + 192 | 0; //@line 3703
   HEAP32[$576 >> 2] = $88; //@line 3704
   $577 = $ReallocAsyncCtx5 + 196 | 0; //@line 3705
   HEAP32[$577 >> 2] = $90; //@line 3706
   $578 = $ReallocAsyncCtx5 + 200 | 0; //@line 3707
   HEAP32[$578 >> 2] = $92; //@line 3708
   $579 = $ReallocAsyncCtx5 + 204 | 0; //@line 3709
   HEAP32[$579 >> 2] = $94; //@line 3710
   $580 = $ReallocAsyncCtx5 + 208 | 0; //@line 3711
   HEAP32[$580 >> 2] = $96; //@line 3712
   $581 = $ReallocAsyncCtx5 + 212 | 0; //@line 3713
   HEAP32[$581 >> 2] = $98; //@line 3714
   $582 = $ReallocAsyncCtx5 + 216 | 0; //@line 3715
   HEAP32[$582 >> 2] = $100; //@line 3716
   $583 = $ReallocAsyncCtx5 + 220 | 0; //@line 3717
   HEAP32[$583 >> 2] = $102; //@line 3718
   $584 = $ReallocAsyncCtx5 + 224 | 0; //@line 3719
   HEAP32[$584 >> 2] = $104; //@line 3720
   $585 = $ReallocAsyncCtx5 + 228 | 0; //@line 3721
   HEAP32[$585 >> 2] = $106; //@line 3722
   $586 = $ReallocAsyncCtx5 + 232 | 0; //@line 3723
   HEAP32[$586 >> 2] = $108; //@line 3724
   $587 = $ReallocAsyncCtx5 + 236 | 0; //@line 3725
   HEAP8[$587 >> 0] = $110; //@line 3726
   $588 = $ReallocAsyncCtx5 + 237 | 0; //@line 3727
   HEAP8[$588 >> 0] = $2; //@line 3728
   $589 = $ReallocAsyncCtx5 + 240 | 0; //@line 3729
   HEAP32[$589 >> 2] = $16; //@line 3730
   $590 = $ReallocAsyncCtx5 + 244 | 0; //@line 3731
   HEAP32[$590 >> 2] = $18; //@line 3732
   sp = STACKTOP; //@line 3733
   return;
  }
  HEAP8[___async_retval >> 0] = $528 & 1; //@line 3738
  ___async_unwind = 0; //@line 3739
  HEAP32[$ReallocAsyncCtx5 >> 2] = 493; //@line 3740
  $529 = $ReallocAsyncCtx5 + 4 | 0; //@line 3741
  HEAP32[$529 >> 2] = $14; //@line 3742
  $530 = $ReallocAsyncCtx5 + 8 | 0; //@line 3743
  HEAP32[$530 >> 2] = $4; //@line 3744
  $531 = $ReallocAsyncCtx5 + 12 | 0; //@line 3745
  HEAP32[$531 >> 2] = $6; //@line 3746
  $532 = $ReallocAsyncCtx5 + 16 | 0; //@line 3747
  HEAP32[$532 >> 2] = $8; //@line 3748
  $533 = $ReallocAsyncCtx5 + 20 | 0; //@line 3749
  HEAP32[$533 >> 2] = $10; //@line 3750
  $534 = $ReallocAsyncCtx5 + 24 | 0; //@line 3751
  HEAP32[$534 >> 2] = $116; //@line 3752
  $535 = $ReallocAsyncCtx5 + 28 | 0; //@line 3753
  HEAP32[$535 >> 2] = $112; //@line 3754
  $536 = $ReallocAsyncCtx5 + 32 | 0; //@line 3755
  HEAP32[$536 >> 2] = $114; //@line 3756
  $537 = $ReallocAsyncCtx5 + 36 | 0; //@line 3757
  HEAP32[$537 >> 2] = $20; //@line 3758
  $538 = $ReallocAsyncCtx5 + 40 | 0; //@line 3759
  HEAP32[$538 >> 2] = $22; //@line 3760
  $539 = $ReallocAsyncCtx5 + 44 | 0; //@line 3761
  HEAP32[$539 >> 2] = $520; //@line 3762
  $540 = $ReallocAsyncCtx5 + 48 | 0; //@line 3763
  HEAP32[$540 >> 2] = $24; //@line 3764
  $541 = $ReallocAsyncCtx5 + 52 | 0; //@line 3765
  HEAP32[$541 >> 2] = $26; //@line 3766
  $542 = $ReallocAsyncCtx5 + 56 | 0; //@line 3767
  HEAP32[$542 >> 2] = $28; //@line 3768
  $543 = $ReallocAsyncCtx5 + 60 | 0; //@line 3769
  HEAP32[$543 >> 2] = $30; //@line 3770
  $544 = $ReallocAsyncCtx5 + 64 | 0; //@line 3771
  HEAP32[$544 >> 2] = $32; //@line 3772
  $545 = $ReallocAsyncCtx5 + 68 | 0; //@line 3773
  HEAP32[$545 >> 2] = $34; //@line 3774
  $546 = $ReallocAsyncCtx5 + 72 | 0; //@line 3775
  HEAP32[$546 >> 2] = $36; //@line 3776
  $547 = $ReallocAsyncCtx5 + 76 | 0; //@line 3777
  HEAP32[$547 >> 2] = $38; //@line 3778
  $548 = $ReallocAsyncCtx5 + 80 | 0; //@line 3779
  HEAP32[$548 >> 2] = $40; //@line 3780
  $549 = $ReallocAsyncCtx5 + 84 | 0; //@line 3781
  HEAP32[$549 >> 2] = $42; //@line 3782
  $550 = $ReallocAsyncCtx5 + 88 | 0; //@line 3783
  HEAP32[$550 >> 2] = $44; //@line 3784
  $551 = $ReallocAsyncCtx5 + 92 | 0; //@line 3785
  HEAP32[$551 >> 2] = $46; //@line 3786
  $552 = $ReallocAsyncCtx5 + 96 | 0; //@line 3787
  HEAP32[$552 >> 2] = $48; //@line 3788
  $553 = $ReallocAsyncCtx5 + 100 | 0; //@line 3789
  HEAP32[$553 >> 2] = $50; //@line 3790
  $554 = $ReallocAsyncCtx5 + 104 | 0; //@line 3791
  HEAP8[$554 >> 0] = $516; //@line 3792
  $555 = $ReallocAsyncCtx5 + 108 | 0; //@line 3793
  HEAP32[$555 >> 2] = $52; //@line 3794
  $556 = $ReallocAsyncCtx5 + 112 | 0; //@line 3795
  HEAP32[$556 >> 2] = $54; //@line 3796
  $557 = $ReallocAsyncCtx5 + 116 | 0; //@line 3797
  HEAP32[$557 >> 2] = $56; //@line 3798
  $558 = $ReallocAsyncCtx5 + 120 | 0; //@line 3799
  HEAP32[$558 >> 2] = $58; //@line 3800
  $559 = $ReallocAsyncCtx5 + 124 | 0; //@line 3801
  HEAP8[$559 >> 0] = $522; //@line 3802
  $560 = $ReallocAsyncCtx5 + 128 | 0; //@line 3803
  HEAP32[$560 >> 2] = $60; //@line 3804
  $561 = $ReallocAsyncCtx5 + 132 | 0; //@line 3805
  HEAP32[$561 >> 2] = $62; //@line 3806
  $562 = $ReallocAsyncCtx5 + 136 | 0; //@line 3807
  HEAP32[$562 >> 2] = $64; //@line 3808
  $563 = $ReallocAsyncCtx5 + 140 | 0; //@line 3809
  HEAP32[$563 >> 2] = $66; //@line 3810
  $564 = $ReallocAsyncCtx5 + 144 | 0; //@line 3811
  HEAP32[$564 >> 2] = $68; //@line 3812
  $565 = $ReallocAsyncCtx5 + 148 | 0; //@line 3813
  HEAP32[$565 >> 2] = $70; //@line 3814
  $566 = $ReallocAsyncCtx5 + 152 | 0; //@line 3815
  HEAP8[$566 >> 0] = $72; //@line 3816
  $567 = $ReallocAsyncCtx5 + 156 | 0; //@line 3817
  HEAP32[$567 >> 2] = $74; //@line 3818
  $568 = $ReallocAsyncCtx5 + 160 | 0; //@line 3819
  HEAP8[$568 >> 0] = $524; //@line 3820
  $569 = $ReallocAsyncCtx5 + 164 | 0; //@line 3821
  HEAP32[$569 >> 2] = $76; //@line 3822
  $570 = $ReallocAsyncCtx5 + 168 | 0; //@line 3823
  HEAP32[$570 >> 2] = $78; //@line 3824
  $571 = $ReallocAsyncCtx5 + 172 | 0; //@line 3825
  HEAP32[$571 >> 2] = $80; //@line 3826
  $572 = $ReallocAsyncCtx5 + 176 | 0; //@line 3827
  HEAP32[$572 >> 2] = $82; //@line 3828
  $573 = $ReallocAsyncCtx5 + 180 | 0; //@line 3829
  HEAP32[$573 >> 2] = $84; //@line 3830
  $574 = $ReallocAsyncCtx5 + 184 | 0; //@line 3831
  HEAP32[$574 >> 2] = $86; //@line 3832
  $575 = $ReallocAsyncCtx5 + 188 | 0; //@line 3833
  HEAP32[$575 >> 2] = $$0107$be; //@line 3834
  $576 = $ReallocAsyncCtx5 + 192 | 0; //@line 3835
  HEAP32[$576 >> 2] = $88; //@line 3836
  $577 = $ReallocAsyncCtx5 + 196 | 0; //@line 3837
  HEAP32[$577 >> 2] = $90; //@line 3838
  $578 = $ReallocAsyncCtx5 + 200 | 0; //@line 3839
  HEAP32[$578 >> 2] = $92; //@line 3840
  $579 = $ReallocAsyncCtx5 + 204 | 0; //@line 3841
  HEAP32[$579 >> 2] = $94; //@line 3842
  $580 = $ReallocAsyncCtx5 + 208 | 0; //@line 3843
  HEAP32[$580 >> 2] = $96; //@line 3844
  $581 = $ReallocAsyncCtx5 + 212 | 0; //@line 3845
  HEAP32[$581 >> 2] = $98; //@line 3846
  $582 = $ReallocAsyncCtx5 + 216 | 0; //@line 3847
  HEAP32[$582 >> 2] = $100; //@line 3848
  $583 = $ReallocAsyncCtx5 + 220 | 0; //@line 3849
  HEAP32[$583 >> 2] = $102; //@line 3850
  $584 = $ReallocAsyncCtx5 + 224 | 0; //@line 3851
  HEAP32[$584 >> 2] = $104; //@line 3852
  $585 = $ReallocAsyncCtx5 + 228 | 0; //@line 3853
  HEAP32[$585 >> 2] = $106; //@line 3854
  $586 = $ReallocAsyncCtx5 + 232 | 0; //@line 3855
  HEAP32[$586 >> 2] = $108; //@line 3856
  $587 = $ReallocAsyncCtx5 + 236 | 0; //@line 3857
  HEAP8[$587 >> 0] = $110; //@line 3858
  $588 = $ReallocAsyncCtx5 + 237 | 0; //@line 3859
  HEAP8[$588 >> 0] = $2; //@line 3860
  $589 = $ReallocAsyncCtx5 + 240 | 0; //@line 3861
  HEAP32[$589 >> 2] = $16; //@line 3862
  $590 = $ReallocAsyncCtx5 + 244 | 0; //@line 3863
  HEAP32[$590 >> 2] = $18; //@line 3864
  sp = STACKTOP; //@line 3865
  return;
 } else if ((label | 0) == 32) {
  $595 = HEAP8[$114 + ($119 & 255) >> 0] | 0; //@line 3872
  $608 = $$0$be + 5 << 24 >> 24; //@line 3885
  $615 = (HEAPU8[$114 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$114 + ($$0$be + 2 & 255) >> 0] | HEAPU8[$114 + ($$0$be + 4 & 255) >> 0] << 16) * 100 | 0; //@line 3892
  $618 = HEAP32[(HEAP32[$38 >> 2] | 0) + 48 >> 2] | 0; //@line 3895
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(232) | 0; //@line 3896
  $619 = FUNCTION_TABLE_iiii[$618 & 31]($88, $595, $615) | 0; //@line 3897
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 494; //@line 3900
   $620 = $ReallocAsyncCtx6 + 4 | 0; //@line 3901
   HEAP32[$620 >> 2] = $14; //@line 3902
   $621 = $ReallocAsyncCtx6 + 8 | 0; //@line 3903
   HEAP32[$621 >> 2] = $4; //@line 3904
   $622 = $ReallocAsyncCtx6 + 12 | 0; //@line 3905
   HEAP32[$622 >> 2] = $6; //@line 3906
   $623 = $ReallocAsyncCtx6 + 16 | 0; //@line 3907
   HEAP32[$623 >> 2] = $8; //@line 3908
   $624 = $ReallocAsyncCtx6 + 20 | 0; //@line 3909
   HEAP32[$624 >> 2] = $10; //@line 3910
   $625 = $ReallocAsyncCtx6 + 24 | 0; //@line 3911
   HEAP32[$625 >> 2] = $116; //@line 3912
   $626 = $ReallocAsyncCtx6 + 28 | 0; //@line 3913
   HEAP32[$626 >> 2] = $112; //@line 3914
   $627 = $ReallocAsyncCtx6 + 32 | 0; //@line 3915
   HEAP32[$627 >> 2] = $114; //@line 3916
   $628 = $ReallocAsyncCtx6 + 36 | 0; //@line 3917
   HEAP32[$628 >> 2] = $20; //@line 3918
   $629 = $ReallocAsyncCtx6 + 40 | 0; //@line 3919
   HEAP32[$629 >> 2] = $22; //@line 3920
   $630 = $ReallocAsyncCtx6 + 44 | 0; //@line 3921
   HEAP8[$630 >> 0] = $608; //@line 3922
   $631 = $ReallocAsyncCtx6 + 48 | 0; //@line 3923
   HEAP32[$631 >> 2] = $24; //@line 3924
   $632 = $ReallocAsyncCtx6 + 52 | 0; //@line 3925
   HEAP32[$632 >> 2] = $26; //@line 3926
   $633 = $ReallocAsyncCtx6 + 56 | 0; //@line 3927
   HEAP32[$633 >> 2] = $28; //@line 3928
   $634 = $ReallocAsyncCtx6 + 60 | 0; //@line 3929
   HEAP32[$634 >> 2] = $30; //@line 3930
   $635 = $ReallocAsyncCtx6 + 64 | 0; //@line 3931
   HEAP32[$635 >> 2] = $32; //@line 3932
   $636 = $ReallocAsyncCtx6 + 68 | 0; //@line 3933
   HEAP32[$636 >> 2] = $34; //@line 3934
   $637 = $ReallocAsyncCtx6 + 72 | 0; //@line 3935
   HEAP32[$637 >> 2] = $36; //@line 3936
   $638 = $ReallocAsyncCtx6 + 76 | 0; //@line 3937
   HEAP32[$638 >> 2] = $38; //@line 3938
   $639 = $ReallocAsyncCtx6 + 80 | 0; //@line 3939
   HEAP32[$639 >> 2] = $40; //@line 3940
   $640 = $ReallocAsyncCtx6 + 84 | 0; //@line 3941
   HEAP32[$640 >> 2] = $42; //@line 3942
   $641 = $ReallocAsyncCtx6 + 88 | 0; //@line 3943
   HEAP32[$641 >> 2] = $44; //@line 3944
   $642 = $ReallocAsyncCtx6 + 92 | 0; //@line 3945
   HEAP32[$642 >> 2] = $46; //@line 3946
   $643 = $ReallocAsyncCtx6 + 96 | 0; //@line 3947
   HEAP32[$643 >> 2] = $48; //@line 3948
   $644 = $ReallocAsyncCtx6 + 100 | 0; //@line 3949
   HEAP32[$644 >> 2] = $50; //@line 3950
   $645 = $ReallocAsyncCtx6 + 104 | 0; //@line 3951
   HEAP32[$645 >> 2] = $52; //@line 3952
   $646 = $ReallocAsyncCtx6 + 108 | 0; //@line 3953
   HEAP32[$646 >> 2] = $54; //@line 3954
   $647 = $ReallocAsyncCtx6 + 112 | 0; //@line 3955
   HEAP32[$647 >> 2] = $56; //@line 3956
   $648 = $ReallocAsyncCtx6 + 116 | 0; //@line 3957
   HEAP32[$648 >> 2] = $58; //@line 3958
   $649 = $ReallocAsyncCtx6 + 120 | 0; //@line 3959
   HEAP32[$649 >> 2] = $60; //@line 3960
   $650 = $ReallocAsyncCtx6 + 124 | 0; //@line 3961
   HEAP32[$650 >> 2] = $62; //@line 3962
   $651 = $ReallocAsyncCtx6 + 128 | 0; //@line 3963
   HEAP32[$651 >> 2] = $64; //@line 3964
   $652 = $ReallocAsyncCtx6 + 132 | 0; //@line 3965
   HEAP32[$652 >> 2] = $66; //@line 3966
   $653 = $ReallocAsyncCtx6 + 136 | 0; //@line 3967
   HEAP32[$653 >> 2] = $68; //@line 3968
   $654 = $ReallocAsyncCtx6 + 140 | 0; //@line 3969
   HEAP32[$654 >> 2] = $70; //@line 3970
   $655 = $ReallocAsyncCtx6 + 144 | 0; //@line 3971
   HEAP8[$655 >> 0] = $72; //@line 3972
   $656 = $ReallocAsyncCtx6 + 148 | 0; //@line 3973
   HEAP32[$656 >> 2] = $74; //@line 3974
   $657 = $ReallocAsyncCtx6 + 152 | 0; //@line 3975
   HEAP32[$657 >> 2] = $76; //@line 3976
   $658 = $ReallocAsyncCtx6 + 156 | 0; //@line 3977
   HEAP32[$658 >> 2] = $78; //@line 3978
   $659 = $ReallocAsyncCtx6 + 160 | 0; //@line 3979
   HEAP32[$659 >> 2] = $80; //@line 3980
   $660 = $ReallocAsyncCtx6 + 164 | 0; //@line 3981
   HEAP32[$660 >> 2] = $82; //@line 3982
   $661 = $ReallocAsyncCtx6 + 168 | 0; //@line 3983
   HEAP32[$661 >> 2] = $84; //@line 3984
   $662 = $ReallocAsyncCtx6 + 172 | 0; //@line 3985
   HEAP32[$662 >> 2] = $86; //@line 3986
   $663 = $ReallocAsyncCtx6 + 176 | 0; //@line 3987
   HEAP32[$663 >> 2] = $88; //@line 3988
   $664 = $ReallocAsyncCtx6 + 180 | 0; //@line 3989
   HEAP32[$664 >> 2] = $90; //@line 3990
   $665 = $ReallocAsyncCtx6 + 184 | 0; //@line 3991
   HEAP32[$665 >> 2] = $92; //@line 3992
   $666 = $ReallocAsyncCtx6 + 188 | 0; //@line 3993
   HEAP32[$666 >> 2] = $94; //@line 3994
   $667 = $ReallocAsyncCtx6 + 192 | 0; //@line 3995
   HEAP32[$667 >> 2] = $96; //@line 3996
   $668 = $ReallocAsyncCtx6 + 196 | 0; //@line 3997
   HEAP32[$668 >> 2] = $98; //@line 3998
   $669 = $ReallocAsyncCtx6 + 200 | 0; //@line 3999
   HEAP32[$669 >> 2] = $100; //@line 4000
   $670 = $ReallocAsyncCtx6 + 204 | 0; //@line 4001
   HEAP32[$670 >> 2] = $102; //@line 4002
   $671 = $ReallocAsyncCtx6 + 208 | 0; //@line 4003
   HEAP32[$671 >> 2] = $104; //@line 4004
   $672 = $ReallocAsyncCtx6 + 212 | 0; //@line 4005
   HEAP32[$672 >> 2] = $106; //@line 4006
   $673 = $ReallocAsyncCtx6 + 216 | 0; //@line 4007
   HEAP32[$673 >> 2] = $108; //@line 4008
   $674 = $ReallocAsyncCtx6 + 220 | 0; //@line 4009
   HEAP8[$674 >> 0] = $110; //@line 4010
   $675 = $ReallocAsyncCtx6 + 221 | 0; //@line 4011
   HEAP8[$675 >> 0] = $2; //@line 4012
   $676 = $ReallocAsyncCtx6 + 224 | 0; //@line 4013
   HEAP32[$676 >> 2] = $16; //@line 4014
   $677 = $ReallocAsyncCtx6 + 228 | 0; //@line 4015
   HEAP32[$677 >> 2] = $18; //@line 4016
   sp = STACKTOP; //@line 4017
   return;
  }
  HEAP8[___async_retval >> 0] = $619; //@line 4021
  ___async_unwind = 0; //@line 4022
  HEAP32[$ReallocAsyncCtx6 >> 2] = 494; //@line 4023
  $620 = $ReallocAsyncCtx6 + 4 | 0; //@line 4024
  HEAP32[$620 >> 2] = $14; //@line 4025
  $621 = $ReallocAsyncCtx6 + 8 | 0; //@line 4026
  HEAP32[$621 >> 2] = $4; //@line 4027
  $622 = $ReallocAsyncCtx6 + 12 | 0; //@line 4028
  HEAP32[$622 >> 2] = $6; //@line 4029
  $623 = $ReallocAsyncCtx6 + 16 | 0; //@line 4030
  HEAP32[$623 >> 2] = $8; //@line 4031
  $624 = $ReallocAsyncCtx6 + 20 | 0; //@line 4032
  HEAP32[$624 >> 2] = $10; //@line 4033
  $625 = $ReallocAsyncCtx6 + 24 | 0; //@line 4034
  HEAP32[$625 >> 2] = $116; //@line 4035
  $626 = $ReallocAsyncCtx6 + 28 | 0; //@line 4036
  HEAP32[$626 >> 2] = $112; //@line 4037
  $627 = $ReallocAsyncCtx6 + 32 | 0; //@line 4038
  HEAP32[$627 >> 2] = $114; //@line 4039
  $628 = $ReallocAsyncCtx6 + 36 | 0; //@line 4040
  HEAP32[$628 >> 2] = $20; //@line 4041
  $629 = $ReallocAsyncCtx6 + 40 | 0; //@line 4042
  HEAP32[$629 >> 2] = $22; //@line 4043
  $630 = $ReallocAsyncCtx6 + 44 | 0; //@line 4044
  HEAP8[$630 >> 0] = $608; //@line 4045
  $631 = $ReallocAsyncCtx6 + 48 | 0; //@line 4046
  HEAP32[$631 >> 2] = $24; //@line 4047
  $632 = $ReallocAsyncCtx6 + 52 | 0; //@line 4048
  HEAP32[$632 >> 2] = $26; //@line 4049
  $633 = $ReallocAsyncCtx6 + 56 | 0; //@line 4050
  HEAP32[$633 >> 2] = $28; //@line 4051
  $634 = $ReallocAsyncCtx6 + 60 | 0; //@line 4052
  HEAP32[$634 >> 2] = $30; //@line 4053
  $635 = $ReallocAsyncCtx6 + 64 | 0; //@line 4054
  HEAP32[$635 >> 2] = $32; //@line 4055
  $636 = $ReallocAsyncCtx6 + 68 | 0; //@line 4056
  HEAP32[$636 >> 2] = $34; //@line 4057
  $637 = $ReallocAsyncCtx6 + 72 | 0; //@line 4058
  HEAP32[$637 >> 2] = $36; //@line 4059
  $638 = $ReallocAsyncCtx6 + 76 | 0; //@line 4060
  HEAP32[$638 >> 2] = $38; //@line 4061
  $639 = $ReallocAsyncCtx6 + 80 | 0; //@line 4062
  HEAP32[$639 >> 2] = $40; //@line 4063
  $640 = $ReallocAsyncCtx6 + 84 | 0; //@line 4064
  HEAP32[$640 >> 2] = $42; //@line 4065
  $641 = $ReallocAsyncCtx6 + 88 | 0; //@line 4066
  HEAP32[$641 >> 2] = $44; //@line 4067
  $642 = $ReallocAsyncCtx6 + 92 | 0; //@line 4068
  HEAP32[$642 >> 2] = $46; //@line 4069
  $643 = $ReallocAsyncCtx6 + 96 | 0; //@line 4070
  HEAP32[$643 >> 2] = $48; //@line 4071
  $644 = $ReallocAsyncCtx6 + 100 | 0; //@line 4072
  HEAP32[$644 >> 2] = $50; //@line 4073
  $645 = $ReallocAsyncCtx6 + 104 | 0; //@line 4074
  HEAP32[$645 >> 2] = $52; //@line 4075
  $646 = $ReallocAsyncCtx6 + 108 | 0; //@line 4076
  HEAP32[$646 >> 2] = $54; //@line 4077
  $647 = $ReallocAsyncCtx6 + 112 | 0; //@line 4078
  HEAP32[$647 >> 2] = $56; //@line 4079
  $648 = $ReallocAsyncCtx6 + 116 | 0; //@line 4080
  HEAP32[$648 >> 2] = $58; //@line 4081
  $649 = $ReallocAsyncCtx6 + 120 | 0; //@line 4082
  HEAP32[$649 >> 2] = $60; //@line 4083
  $650 = $ReallocAsyncCtx6 + 124 | 0; //@line 4084
  HEAP32[$650 >> 2] = $62; //@line 4085
  $651 = $ReallocAsyncCtx6 + 128 | 0; //@line 4086
  HEAP32[$651 >> 2] = $64; //@line 4087
  $652 = $ReallocAsyncCtx6 + 132 | 0; //@line 4088
  HEAP32[$652 >> 2] = $66; //@line 4089
  $653 = $ReallocAsyncCtx6 + 136 | 0; //@line 4090
  HEAP32[$653 >> 2] = $68; //@line 4091
  $654 = $ReallocAsyncCtx6 + 140 | 0; //@line 4092
  HEAP32[$654 >> 2] = $70; //@line 4093
  $655 = $ReallocAsyncCtx6 + 144 | 0; //@line 4094
  HEAP8[$655 >> 0] = $72; //@line 4095
  $656 = $ReallocAsyncCtx6 + 148 | 0; //@line 4096
  HEAP32[$656 >> 2] = $74; //@line 4097
  $657 = $ReallocAsyncCtx6 + 152 | 0; //@line 4098
  HEAP32[$657 >> 2] = $76; //@line 4099
  $658 = $ReallocAsyncCtx6 + 156 | 0; //@line 4100
  HEAP32[$658 >> 2] = $78; //@line 4101
  $659 = $ReallocAsyncCtx6 + 160 | 0; //@line 4102
  HEAP32[$659 >> 2] = $80; //@line 4103
  $660 = $ReallocAsyncCtx6 + 164 | 0; //@line 4104
  HEAP32[$660 >> 2] = $82; //@line 4105
  $661 = $ReallocAsyncCtx6 + 168 | 0; //@line 4106
  HEAP32[$661 >> 2] = $84; //@line 4107
  $662 = $ReallocAsyncCtx6 + 172 | 0; //@line 4108
  HEAP32[$662 >> 2] = $86; //@line 4109
  $663 = $ReallocAsyncCtx6 + 176 | 0; //@line 4110
  HEAP32[$663 >> 2] = $88; //@line 4111
  $664 = $ReallocAsyncCtx6 + 180 | 0; //@line 4112
  HEAP32[$664 >> 2] = $90; //@line 4113
  $665 = $ReallocAsyncCtx6 + 184 | 0; //@line 4114
  HEAP32[$665 >> 2] = $92; //@line 4115
  $666 = $ReallocAsyncCtx6 + 188 | 0; //@line 4116
  HEAP32[$666 >> 2] = $94; //@line 4117
  $667 = $ReallocAsyncCtx6 + 192 | 0; //@line 4118
  HEAP32[$667 >> 2] = $96; //@line 4119
  $668 = $ReallocAsyncCtx6 + 196 | 0; //@line 4120
  HEAP32[$668 >> 2] = $98; //@line 4121
  $669 = $ReallocAsyncCtx6 + 200 | 0; //@line 4122
  HEAP32[$669 >> 2] = $100; //@line 4123
  $670 = $ReallocAsyncCtx6 + 204 | 0; //@line 4124
  HEAP32[$670 >> 2] = $102; //@line 4125
  $671 = $ReallocAsyncCtx6 + 208 | 0; //@line 4126
  HEAP32[$671 >> 2] = $104; //@line 4127
  $672 = $ReallocAsyncCtx6 + 212 | 0; //@line 4128
  HEAP32[$672 >> 2] = $106; //@line 4129
  $673 = $ReallocAsyncCtx6 + 216 | 0; //@line 4130
  HEAP32[$673 >> 2] = $108; //@line 4131
  $674 = $ReallocAsyncCtx6 + 220 | 0; //@line 4132
  HEAP8[$674 >> 0] = $110; //@line 4133
  $675 = $ReallocAsyncCtx6 + 221 | 0; //@line 4134
  HEAP8[$675 >> 0] = $2; //@line 4135
  $676 = $ReallocAsyncCtx6 + 224 | 0; //@line 4136
  HEAP32[$676 >> 2] = $16; //@line 4137
  $677 = $ReallocAsyncCtx6 + 228 | 0; //@line 4138
  HEAP32[$677 >> 2] = $18; //@line 4139
  sp = STACKTOP; //@line 4140
  return;
 } else if ((label | 0) == 35) {
  HEAP32[___async_retval >> 2] = $$0107$be; //@line 4145
  return;
 }
}
function __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_210($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0$i118 = 0, $$0107$be = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $119 = 0, $12 = 0, $130 = 0, $131 = 0, $14 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $204 = 0, $207 = 0, $214 = 0, $215 = 0, $22 = 0, $221 = 0, $24 = 0, $240 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $311 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $377 = 0, $378 = 0, $38 = 0, $392 = 0, $4 = 0, $40 = 0, $413 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $48 = 0, $483 = 0, $484 = 0, $493 = 0, $497 = 0, $50 = 0, $501 = 0, $506 = 0, $507 = 0, $511 = 0, $515 = 0, $517 = 0, $519 = 0, $52 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $590 = 0, $6 = 0, $60 = 0, $603 = 0, $610 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $671 = 0, $672 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6153
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6155
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6157
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6159
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6161
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 6163
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 6165
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 6167
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 6169
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 6171
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 6173
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 6175
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 6177
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 6179
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 6181
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 6183
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 6185
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 6187
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 6189
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 6191
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 6193
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 6195
 $44 = HEAP8[$0 + 88 >> 0] | 0; //@line 6197
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 6199
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 6201
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 6203
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 6205
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 6207
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 6209
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 6211
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 6213
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 6215
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 6217
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 6219
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 6221
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 6223
 $72 = HEAP8[$0 + 144 >> 0] | 0; //@line 6225
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 6227
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 6229
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 6231
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 6233
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 6235
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 6237
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 6239
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 6241
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 6243
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 6245
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 6247
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 6249
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 6251
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 6253
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 6255
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 6257
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 6259
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 6261
 $110 = HEAP8[$0 + 220 >> 0] | 0; //@line 6263
 $112 = HEAP8[$0 + 221 >> 0] | 0; //@line 6265
 $114 = HEAP32[$0 + 224 >> 2] | 0; //@line 6267
 $116 = HEAP32[$0 + 228 >> 2] | 0; //@line 6269
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 6271
 $483 = HEAP8[$78 >> 0] | 0; //@line 6275
 $484 = $483 & 255; //@line 6276
 if ((128 - (HEAPU8[$66 >> 0] | 0) - $484 | 0) > 1) {
  HEAP8[$102 + 4 + $484 >> 0] = 7; //@line 6285
  HEAP8[$78 >> 0] = $483 + 2 << 24 >> 24; //@line 6286
  HEAP8[($483 + 1 & 255) + ($102 + 4) >> 0] = $AsyncRetVal; //@line 6287
  HEAP8[$104 >> 0] = 1; //@line 6288
  $$0$i118 = 0; //@line 6289
 } else {
  $$0$i118 = -1010; //@line 6291
 }
 $$0$be = $44; //@line 6293
 $$0107$be = $$0$i118; //@line 6293
 L5 : while (1) {
  if (($$0$be & 255) >= ($110 & 255)) {
   label = 33; //@line 6297
   break;
  }
  $119 = $$0$be + 1 << 24 >> 24; //@line 6301
  switch (HEAP8[$16 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 6306
    break L5;
    break;
   }
  case 5:
   {
    label = 9; //@line 6311
    break L5;
    break;
   }
  case 7:
   {
    label = 18; //@line 6316
    break L5;
    break;
   }
  case 9:
   {
    label = 27; //@line 6321
    break L5;
    break;
   }
  case 10:
   {
    label = 30; //@line 6326
    break L5;
    break;
   }
  case 2:
   {
    HEAP32[$68 >> 2] = 0; //@line 6331
    HEAP8[$70 >> 0] = HEAP8[$16 + ($119 & 255) >> 0] | 0; //@line 6336
    HEAP8[$84 >> 0] = HEAP8[$16 + ($$0$be + 2 & 255) >> 0] | 0; //@line 6341
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 6342
    continue L5;
    break;
   }
  case 4:
   {
    $204 = $$0$be + 2 << 24 >> 24; //@line 6347
    $207 = HEAP8[$16 + ($119 & 255) >> 0] | 0; //@line 6350
    HEAP8[$14 >> 0] = $207; //@line 6351
    HEAP16[$92 >> 1] = 1 << ($207 & 255); //@line 6355
    $214 = HEAP8[$78 >> 0] | 0; //@line 6359
    $215 = $214 & 255; //@line 6360
    if ((128 - (HEAPU8[$66 >> 0] | 0) | 0) <= ($215 | 0)) {
     $$0$be = $204; //@line 6363
     $$0107$be = -1010; //@line 6363
     continue L5;
    }
    HEAP8[$78 >> 0] = $214 + 1 << 24 >> 24; //@line 6368
    HEAP8[$102 + 4 + $215 >> 0] = 4; //@line 6369
    HEAP8[$104 >> 0] = 1; //@line 6370
    $$0$be = $204; //@line 6371
    $$0107$be = 0; //@line 6371
    continue L5;
    break;
   }
  case 6:
   {
    $311 = HEAP32[$86 >> 2] | 0; //@line 6376
    if ($311 | 0) {
     label = 13; //@line 6379
     break L5;
    }
    $377 = HEAP8[$78 >> 0] | 0; //@line 6385
    $378 = $377 & 255; //@line 6386
    if ((128 - (HEAPU8[$66 >> 0] | 0) - $378 | 0) <= 2) {
     $$0$be = $119; //@line 6390
     $$0107$be = -1010; //@line 6390
     continue L5;
    }
    HEAP8[$102 + 4 + $378 >> 0] = 6; //@line 6395
    HEAP8[($377 + 1 & 255) + ($102 + 4) >> 0] = -1; //@line 6399
    HEAP8[$78 >> 0] = $377 + 3 << 24 >> 24; //@line 6401
    HEAP8[($377 + 2 & 255) + ($102 + 4) >> 0] = $72; //@line 6404
    HEAP8[$104 >> 0] = 1; //@line 6405
    $$0$be = $119; //@line 6406
    $$0107$be = 0; //@line 6406
    continue L5;
    break;
   }
  case 8:
   {
    $493 = $$0$be + 2 << 24 >> 24; //@line 6411
    $497 = HEAP8[$16 + ($119 & 255) >> 0] & 15; //@line 6415
    $501 = ($497 + ($497 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 6420
    HEAP32[$32 >> 2] = $501; //@line 6421
    HEAP32[$2 >> 2] = $501 + 1e3; //@line 6423
    $506 = HEAP8[$78 >> 0] | 0; //@line 6427
    $507 = $506 & 255; //@line 6428
    if ((128 - (HEAPU8[$66 >> 0] | 0) | 0) <= ($507 | 0)) {
     $$0$be = $493; //@line 6431
     $$0107$be = -1010; //@line 6431
     continue L5;
    }
    HEAP8[$78 >> 0] = $506 + 1 << 24 >> 24; //@line 6436
    HEAP8[$102 + 4 + $507 >> 0] = 8; //@line 6437
    HEAP8[$50 >> 0] = 1; //@line 6438
    HEAP8[$104 >> 0] = 1; //@line 6439
    $$0$be = $493; //@line 6440
    $$0107$be = 0; //@line 6440
    continue L5;
    break;
   }
  default:
   {
    $$0$be = $119; //@line 6445
    $$0107$be = -1013; //@line 6445
    continue L5;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$42 >> 0] = 0; //@line 6451
  HEAP8[$46 >> 0] = 0; //@line 6452
  HEAP8[$4 >> 0] = 0; //@line 6453
  HEAP8[$40 >> 0] = 0; //@line 6454
  $130 = $119 & 255; //@line 6455
  $131 = $130 + -1 | 0; //@line 6456
  HEAP32[$98 >> 2] = $16 + $131; //@line 6458
  HEAP8[$94 >> 0] = $24 - $131; //@line 6461
  HEAP8[$106 >> 0] = HEAP8[$12 >> 0] | 0; //@line 6463
  HEAP8[$8 >> 0] = HEAP8[$18 >> 0] | 0; //@line 6465
  HEAP8[$22 >> 0] = HEAP8[$30 >> 0] | 0; //@line 6467
  HEAP8[$64 >> 0] = HEAP8[$52 >> 0] | 0; //@line 6469
  HEAP8[$80 >> 0] = HEAP8[$58 >> 0] | 0; //@line 6471
  $142 = HEAP32[(HEAP32[$82 >> 2] | 0) + 36 >> 2] | 0; //@line 6474
  $ReallocAsyncCtx = _emscripten_realloc_async_context(240) | 0; //@line 6475
  $143 = FUNCTION_TABLE_iiiiiii[$142 & 3]($88, $34, $42, $46, $4, $40) | 0; //@line 6476
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 489; //@line 6479
   $144 = $ReallocAsyncCtx + 4 | 0; //@line 6480
   HEAP8[$144 >> 0] = $112; //@line 6481
   $145 = $ReallocAsyncCtx + 8 | 0; //@line 6482
   HEAP32[$145 >> 2] = $4; //@line 6483
   $146 = $ReallocAsyncCtx + 12 | 0; //@line 6484
   HEAP32[$146 >> 2] = $6; //@line 6485
   $147 = $ReallocAsyncCtx + 16 | 0; //@line 6486
   HEAP32[$147 >> 2] = $8; //@line 6487
   $148 = $ReallocAsyncCtx + 20 | 0; //@line 6488
   HEAP32[$148 >> 2] = $10; //@line 6489
   $149 = $ReallocAsyncCtx + 24 | 0; //@line 6490
   HEAP32[$149 >> 2] = $116; //@line 6491
   $150 = $ReallocAsyncCtx + 28 | 0; //@line 6492
   HEAP32[$150 >> 2] = $2; //@line 6493
   $151 = $ReallocAsyncCtx + 32 | 0; //@line 6494
   HEAP32[$151 >> 2] = $114; //@line 6495
   $152 = $ReallocAsyncCtx + 36 | 0; //@line 6496
   HEAP32[$152 >> 2] = $18; //@line 6497
   $153 = $ReallocAsyncCtx + 40 | 0; //@line 6498
   HEAP32[$153 >> 2] = $20; //@line 6499
   $154 = $ReallocAsyncCtx + 44 | 0; //@line 6500
   HEAP32[$154 >> 2] = $22; //@line 6501
   $155 = $ReallocAsyncCtx + 48 | 0; //@line 6502
   HEAP32[$155 >> 2] = $24; //@line 6503
   $156 = $ReallocAsyncCtx + 52 | 0; //@line 6504
   HEAP32[$156 >> 2] = $26; //@line 6505
   $157 = $ReallocAsyncCtx + 56 | 0; //@line 6506
   HEAP32[$157 >> 2] = $28; //@line 6507
   $158 = $ReallocAsyncCtx + 60 | 0; //@line 6508
   HEAP32[$158 >> 2] = $30; //@line 6509
   $159 = $ReallocAsyncCtx + 64 | 0; //@line 6510
   HEAP32[$159 >> 2] = $32; //@line 6511
   $160 = $ReallocAsyncCtx + 68 | 0; //@line 6512
   HEAP32[$160 >> 2] = $34; //@line 6513
   $161 = $ReallocAsyncCtx + 72 | 0; //@line 6514
   HEAP32[$161 >> 2] = $36; //@line 6515
   $162 = $ReallocAsyncCtx + 76 | 0; //@line 6516
   HEAP32[$162 >> 2] = $38; //@line 6517
   $163 = $ReallocAsyncCtx + 80 | 0; //@line 6518
   HEAP32[$163 >> 2] = $40; //@line 6519
   $164 = $ReallocAsyncCtx + 84 | 0; //@line 6520
   HEAP32[$164 >> 2] = $42; //@line 6521
   $165 = $ReallocAsyncCtx + 88 | 0; //@line 6522
   HEAP32[$165 >> 2] = $46; //@line 6523
   $166 = $ReallocAsyncCtx + 92 | 0; //@line 6524
   HEAP32[$166 >> 2] = $48; //@line 6525
   $167 = $ReallocAsyncCtx + 96 | 0; //@line 6526
   HEAP32[$167 >> 2] = $50; //@line 6527
   $168 = $ReallocAsyncCtx + 100 | 0; //@line 6528
   HEAP32[$168 >> 2] = $52; //@line 6529
   $169 = $ReallocAsyncCtx + 104 | 0; //@line 6530
   HEAP32[$169 >> 2] = $54; //@line 6531
   $170 = $ReallocAsyncCtx + 108 | 0; //@line 6532
   HEAP32[$170 >> 2] = $56; //@line 6533
   $171 = $ReallocAsyncCtx + 112 | 0; //@line 6534
   HEAP32[$171 >> 2] = $58; //@line 6535
   $172 = $ReallocAsyncCtx + 116 | 0; //@line 6536
   HEAP32[$172 >> 2] = $60; //@line 6537
   $173 = $ReallocAsyncCtx + 120 | 0; //@line 6538
   HEAP32[$173 >> 2] = $62; //@line 6539
   $174 = $ReallocAsyncCtx + 124 | 0; //@line 6540
   HEAP32[$174 >> 2] = $64; //@line 6541
   $175 = $ReallocAsyncCtx + 128 | 0; //@line 6542
   HEAP32[$175 >> 2] = $66; //@line 6543
   $176 = $ReallocAsyncCtx + 132 | 0; //@line 6544
   HEAP32[$176 >> 2] = $68; //@line 6545
   $177 = $ReallocAsyncCtx + 136 | 0; //@line 6546
   HEAP32[$177 >> 2] = $70; //@line 6547
   $178 = $ReallocAsyncCtx + 140 | 0; //@line 6548
   HEAP8[$178 >> 0] = $72; //@line 6549
   $179 = $ReallocAsyncCtx + 144 | 0; //@line 6550
   HEAP32[$179 >> 2] = $74; //@line 6551
   $180 = $ReallocAsyncCtx + 148 | 0; //@line 6552
   HEAP32[$180 >> 2] = $76; //@line 6553
   $181 = $ReallocAsyncCtx + 152 | 0; //@line 6554
   HEAP32[$181 >> 2] = $78; //@line 6555
   $182 = $ReallocAsyncCtx + 156 | 0; //@line 6556
   HEAP32[$182 >> 2] = $80; //@line 6557
   $183 = $ReallocAsyncCtx + 160 | 0; //@line 6558
   HEAP32[$183 >> 2] = $82; //@line 6559
   $184 = $ReallocAsyncCtx + 164 | 0; //@line 6560
   HEAP32[$184 >> 2] = $130; //@line 6561
   $185 = $ReallocAsyncCtx + 168 | 0; //@line 6562
   HEAP32[$185 >> 2] = $84; //@line 6563
   $186 = $ReallocAsyncCtx + 172 | 0; //@line 6564
   HEAP32[$186 >> 2] = $86; //@line 6565
   $187 = $ReallocAsyncCtx + 176 | 0; //@line 6566
   HEAP32[$187 >> 2] = $$0107$be; //@line 6567
   $188 = $ReallocAsyncCtx + 180 | 0; //@line 6568
   HEAP32[$188 >> 2] = $88; //@line 6569
   $189 = $ReallocAsyncCtx + 184 | 0; //@line 6570
   HEAP32[$189 >> 2] = $90; //@line 6571
   $190 = $ReallocAsyncCtx + 188 | 0; //@line 6572
   HEAP32[$190 >> 2] = $92; //@line 6573
   $191 = $ReallocAsyncCtx + 192 | 0; //@line 6574
   HEAP32[$191 >> 2] = $94; //@line 6575
   $192 = $ReallocAsyncCtx + 196 | 0; //@line 6576
   HEAP32[$192 >> 2] = $96; //@line 6577
   $193 = $ReallocAsyncCtx + 200 | 0; //@line 6578
   HEAP32[$193 >> 2] = $98; //@line 6579
   $194 = $ReallocAsyncCtx + 204 | 0; //@line 6580
   HEAP32[$194 >> 2] = $100; //@line 6581
   $195 = $ReallocAsyncCtx + 208 | 0; //@line 6582
   HEAP32[$195 >> 2] = $102; //@line 6583
   $196 = $ReallocAsyncCtx + 212 | 0; //@line 6584
   HEAP32[$196 >> 2] = $104; //@line 6585
   $197 = $ReallocAsyncCtx + 216 | 0; //@line 6586
   HEAP32[$197 >> 2] = $106; //@line 6587
   $198 = $ReallocAsyncCtx + 220 | 0; //@line 6588
   HEAP32[$198 >> 2] = $108; //@line 6589
   $199 = $ReallocAsyncCtx + 224 | 0; //@line 6590
   HEAP8[$199 >> 0] = $110; //@line 6591
   $200 = $ReallocAsyncCtx + 228 | 0; //@line 6592
   HEAP32[$200 >> 2] = $14; //@line 6593
   $201 = $ReallocAsyncCtx + 232 | 0; //@line 6594
   HEAP32[$201 >> 2] = $16; //@line 6595
   $202 = $ReallocAsyncCtx + 236 | 0; //@line 6596
   HEAP32[$202 >> 2] = $12; //@line 6597
   sp = STACKTOP; //@line 6598
   return;
  }
  HEAP8[___async_retval >> 0] = $143; //@line 6602
  ___async_unwind = 0; //@line 6603
  HEAP32[$ReallocAsyncCtx >> 2] = 489; //@line 6604
  $144 = $ReallocAsyncCtx + 4 | 0; //@line 6605
  HEAP8[$144 >> 0] = $112; //@line 6606
  $145 = $ReallocAsyncCtx + 8 | 0; //@line 6607
  HEAP32[$145 >> 2] = $4; //@line 6608
  $146 = $ReallocAsyncCtx + 12 | 0; //@line 6609
  HEAP32[$146 >> 2] = $6; //@line 6610
  $147 = $ReallocAsyncCtx + 16 | 0; //@line 6611
  HEAP32[$147 >> 2] = $8; //@line 6612
  $148 = $ReallocAsyncCtx + 20 | 0; //@line 6613
  HEAP32[$148 >> 2] = $10; //@line 6614
  $149 = $ReallocAsyncCtx + 24 | 0; //@line 6615
  HEAP32[$149 >> 2] = $116; //@line 6616
  $150 = $ReallocAsyncCtx + 28 | 0; //@line 6617
  HEAP32[$150 >> 2] = $2; //@line 6618
  $151 = $ReallocAsyncCtx + 32 | 0; //@line 6619
  HEAP32[$151 >> 2] = $114; //@line 6620
  $152 = $ReallocAsyncCtx + 36 | 0; //@line 6621
  HEAP32[$152 >> 2] = $18; //@line 6622
  $153 = $ReallocAsyncCtx + 40 | 0; //@line 6623
  HEAP32[$153 >> 2] = $20; //@line 6624
  $154 = $ReallocAsyncCtx + 44 | 0; //@line 6625
  HEAP32[$154 >> 2] = $22; //@line 6626
  $155 = $ReallocAsyncCtx + 48 | 0; //@line 6627
  HEAP32[$155 >> 2] = $24; //@line 6628
  $156 = $ReallocAsyncCtx + 52 | 0; //@line 6629
  HEAP32[$156 >> 2] = $26; //@line 6630
  $157 = $ReallocAsyncCtx + 56 | 0; //@line 6631
  HEAP32[$157 >> 2] = $28; //@line 6632
  $158 = $ReallocAsyncCtx + 60 | 0; //@line 6633
  HEAP32[$158 >> 2] = $30; //@line 6634
  $159 = $ReallocAsyncCtx + 64 | 0; //@line 6635
  HEAP32[$159 >> 2] = $32; //@line 6636
  $160 = $ReallocAsyncCtx + 68 | 0; //@line 6637
  HEAP32[$160 >> 2] = $34; //@line 6638
  $161 = $ReallocAsyncCtx + 72 | 0; //@line 6639
  HEAP32[$161 >> 2] = $36; //@line 6640
  $162 = $ReallocAsyncCtx + 76 | 0; //@line 6641
  HEAP32[$162 >> 2] = $38; //@line 6642
  $163 = $ReallocAsyncCtx + 80 | 0; //@line 6643
  HEAP32[$163 >> 2] = $40; //@line 6644
  $164 = $ReallocAsyncCtx + 84 | 0; //@line 6645
  HEAP32[$164 >> 2] = $42; //@line 6646
  $165 = $ReallocAsyncCtx + 88 | 0; //@line 6647
  HEAP32[$165 >> 2] = $46; //@line 6648
  $166 = $ReallocAsyncCtx + 92 | 0; //@line 6649
  HEAP32[$166 >> 2] = $48; //@line 6650
  $167 = $ReallocAsyncCtx + 96 | 0; //@line 6651
  HEAP32[$167 >> 2] = $50; //@line 6652
  $168 = $ReallocAsyncCtx + 100 | 0; //@line 6653
  HEAP32[$168 >> 2] = $52; //@line 6654
  $169 = $ReallocAsyncCtx + 104 | 0; //@line 6655
  HEAP32[$169 >> 2] = $54; //@line 6656
  $170 = $ReallocAsyncCtx + 108 | 0; //@line 6657
  HEAP32[$170 >> 2] = $56; //@line 6658
  $171 = $ReallocAsyncCtx + 112 | 0; //@line 6659
  HEAP32[$171 >> 2] = $58; //@line 6660
  $172 = $ReallocAsyncCtx + 116 | 0; //@line 6661
  HEAP32[$172 >> 2] = $60; //@line 6662
  $173 = $ReallocAsyncCtx + 120 | 0; //@line 6663
  HEAP32[$173 >> 2] = $62; //@line 6664
  $174 = $ReallocAsyncCtx + 124 | 0; //@line 6665
  HEAP32[$174 >> 2] = $64; //@line 6666
  $175 = $ReallocAsyncCtx + 128 | 0; //@line 6667
  HEAP32[$175 >> 2] = $66; //@line 6668
  $176 = $ReallocAsyncCtx + 132 | 0; //@line 6669
  HEAP32[$176 >> 2] = $68; //@line 6670
  $177 = $ReallocAsyncCtx + 136 | 0; //@line 6671
  HEAP32[$177 >> 2] = $70; //@line 6672
  $178 = $ReallocAsyncCtx + 140 | 0; //@line 6673
  HEAP8[$178 >> 0] = $72; //@line 6674
  $179 = $ReallocAsyncCtx + 144 | 0; //@line 6675
  HEAP32[$179 >> 2] = $74; //@line 6676
  $180 = $ReallocAsyncCtx + 148 | 0; //@line 6677
  HEAP32[$180 >> 2] = $76; //@line 6678
  $181 = $ReallocAsyncCtx + 152 | 0; //@line 6679
  HEAP32[$181 >> 2] = $78; //@line 6680
  $182 = $ReallocAsyncCtx + 156 | 0; //@line 6681
  HEAP32[$182 >> 2] = $80; //@line 6682
  $183 = $ReallocAsyncCtx + 160 | 0; //@line 6683
  HEAP32[$183 >> 2] = $82; //@line 6684
  $184 = $ReallocAsyncCtx + 164 | 0; //@line 6685
  HEAP32[$184 >> 2] = $130; //@line 6686
  $185 = $ReallocAsyncCtx + 168 | 0; //@line 6687
  HEAP32[$185 >> 2] = $84; //@line 6688
  $186 = $ReallocAsyncCtx + 172 | 0; //@line 6689
  HEAP32[$186 >> 2] = $86; //@line 6690
  $187 = $ReallocAsyncCtx + 176 | 0; //@line 6691
  HEAP32[$187 >> 2] = $$0107$be; //@line 6692
  $188 = $ReallocAsyncCtx + 180 | 0; //@line 6693
  HEAP32[$188 >> 2] = $88; //@line 6694
  $189 = $ReallocAsyncCtx + 184 | 0; //@line 6695
  HEAP32[$189 >> 2] = $90; //@line 6696
  $190 = $ReallocAsyncCtx + 188 | 0; //@line 6697
  HEAP32[$190 >> 2] = $92; //@line 6698
  $191 = $ReallocAsyncCtx + 192 | 0; //@line 6699
  HEAP32[$191 >> 2] = $94; //@line 6700
  $192 = $ReallocAsyncCtx + 196 | 0; //@line 6701
  HEAP32[$192 >> 2] = $96; //@line 6702
  $193 = $ReallocAsyncCtx + 200 | 0; //@line 6703
  HEAP32[$193 >> 2] = $98; //@line 6704
  $194 = $ReallocAsyncCtx + 204 | 0; //@line 6705
  HEAP32[$194 >> 2] = $100; //@line 6706
  $195 = $ReallocAsyncCtx + 208 | 0; //@line 6707
  HEAP32[$195 >> 2] = $102; //@line 6708
  $196 = $ReallocAsyncCtx + 212 | 0; //@line 6709
  HEAP32[$196 >> 2] = $104; //@line 6710
  $197 = $ReallocAsyncCtx + 216 | 0; //@line 6711
  HEAP32[$197 >> 2] = $106; //@line 6712
  $198 = $ReallocAsyncCtx + 220 | 0; //@line 6713
  HEAP32[$198 >> 2] = $108; //@line 6714
  $199 = $ReallocAsyncCtx + 224 | 0; //@line 6715
  HEAP8[$199 >> 0] = $110; //@line 6716
  $200 = $ReallocAsyncCtx + 228 | 0; //@line 6717
  HEAP32[$200 >> 2] = $14; //@line 6718
  $201 = $ReallocAsyncCtx + 232 | 0; //@line 6719
  HEAP32[$201 >> 2] = $16; //@line 6720
  $202 = $ReallocAsyncCtx + 236 | 0; //@line 6721
  HEAP32[$202 >> 2] = $12; //@line 6722
  sp = STACKTOP; //@line 6723
  return;
 } else if ((label | 0) == 9) {
  $221 = HEAP8[$16 + ($119 & 255) >> 0] | 0; //@line 6729
  HEAP8[$28 >> 0] = ($221 & 255) >>> 4 & 7; //@line 6734
  HEAP8[$100 >> 0] = $221 & 15; //@line 6736
  $240 = $$0$be + 5 << 24 >> 24; //@line 6750
  HEAP32[$6 >> 2] = (HEAPU8[$16 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$16 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$16 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 6758
  $250 = HEAP32[(HEAP32[$10 >> 2] | 0) + 40 >> 2] | 0; //@line 6761
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(236) | 0; //@line 6762
  $251 = FUNCTION_TABLE_iii[$250 & 31]($88, $48) | 0; //@line 6763
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 490; //@line 6766
   $252 = $ReallocAsyncCtx2 + 4 | 0; //@line 6767
   HEAP8[$252 >> 0] = $112; //@line 6768
   $253 = $ReallocAsyncCtx2 + 8 | 0; //@line 6769
   HEAP32[$253 >> 2] = $4; //@line 6770
   $254 = $ReallocAsyncCtx2 + 12 | 0; //@line 6771
   HEAP32[$254 >> 2] = $6; //@line 6772
   $255 = $ReallocAsyncCtx2 + 16 | 0; //@line 6773
   HEAP32[$255 >> 2] = $8; //@line 6774
   $256 = $ReallocAsyncCtx2 + 20 | 0; //@line 6775
   HEAP32[$256 >> 2] = $10; //@line 6776
   $257 = $ReallocAsyncCtx2 + 24 | 0; //@line 6777
   HEAP8[$257 >> 0] = $240; //@line 6778
   $258 = $ReallocAsyncCtx2 + 28 | 0; //@line 6779
   HEAP32[$258 >> 2] = $2; //@line 6780
   $259 = $ReallocAsyncCtx2 + 32 | 0; //@line 6781
   HEAP32[$259 >> 2] = $114; //@line 6782
   $260 = $ReallocAsyncCtx2 + 36 | 0; //@line 6783
   HEAP32[$260 >> 2] = $116; //@line 6784
   $261 = $ReallocAsyncCtx2 + 40 | 0; //@line 6785
   HEAP32[$261 >> 2] = $18; //@line 6786
   $262 = $ReallocAsyncCtx2 + 44 | 0; //@line 6787
   HEAP32[$262 >> 2] = $20; //@line 6788
   $263 = $ReallocAsyncCtx2 + 48 | 0; //@line 6789
   HEAP32[$263 >> 2] = $22; //@line 6790
   $264 = $ReallocAsyncCtx2 + 52 | 0; //@line 6791
   HEAP32[$264 >> 2] = $24; //@line 6792
   $265 = $ReallocAsyncCtx2 + 56 | 0; //@line 6793
   HEAP32[$265 >> 2] = $26; //@line 6794
   $266 = $ReallocAsyncCtx2 + 60 | 0; //@line 6795
   HEAP32[$266 >> 2] = $28; //@line 6796
   $267 = $ReallocAsyncCtx2 + 64 | 0; //@line 6797
   HEAP32[$267 >> 2] = $30; //@line 6798
   $268 = $ReallocAsyncCtx2 + 68 | 0; //@line 6799
   HEAP32[$268 >> 2] = $32; //@line 6800
   $269 = $ReallocAsyncCtx2 + 72 | 0; //@line 6801
   HEAP32[$269 >> 2] = $34; //@line 6802
   $270 = $ReallocAsyncCtx2 + 76 | 0; //@line 6803
   HEAP32[$270 >> 2] = $36; //@line 6804
   $271 = $ReallocAsyncCtx2 + 80 | 0; //@line 6805
   HEAP32[$271 >> 2] = $38; //@line 6806
   $272 = $ReallocAsyncCtx2 + 84 | 0; //@line 6807
   HEAP32[$272 >> 2] = $40; //@line 6808
   $273 = $ReallocAsyncCtx2 + 88 | 0; //@line 6809
   HEAP32[$273 >> 2] = $42; //@line 6810
   $274 = $ReallocAsyncCtx2 + 92 | 0; //@line 6811
   HEAP32[$274 >> 2] = $46; //@line 6812
   $275 = $ReallocAsyncCtx2 + 96 | 0; //@line 6813
   HEAP32[$275 >> 2] = $48; //@line 6814
   $276 = $ReallocAsyncCtx2 + 100 | 0; //@line 6815
   HEAP32[$276 >> 2] = $50; //@line 6816
   $277 = $ReallocAsyncCtx2 + 104 | 0; //@line 6817
   HEAP32[$277 >> 2] = $52; //@line 6818
   $278 = $ReallocAsyncCtx2 + 108 | 0; //@line 6819
   HEAP32[$278 >> 2] = $54; //@line 6820
   $279 = $ReallocAsyncCtx2 + 112 | 0; //@line 6821
   HEAP32[$279 >> 2] = $56; //@line 6822
   $280 = $ReallocAsyncCtx2 + 116 | 0; //@line 6823
   HEAP32[$280 >> 2] = $58; //@line 6824
   $281 = $ReallocAsyncCtx2 + 120 | 0; //@line 6825
   HEAP32[$281 >> 2] = $60; //@line 6826
   $282 = $ReallocAsyncCtx2 + 124 | 0; //@line 6827
   HEAP32[$282 >> 2] = $62; //@line 6828
   $283 = $ReallocAsyncCtx2 + 128 | 0; //@line 6829
   HEAP32[$283 >> 2] = $64; //@line 6830
   $284 = $ReallocAsyncCtx2 + 132 | 0; //@line 6831
   HEAP32[$284 >> 2] = $66; //@line 6832
   $285 = $ReallocAsyncCtx2 + 136 | 0; //@line 6833
   HEAP32[$285 >> 2] = $68; //@line 6834
   $286 = $ReallocAsyncCtx2 + 140 | 0; //@line 6835
   HEAP32[$286 >> 2] = $70; //@line 6836
   $287 = $ReallocAsyncCtx2 + 144 | 0; //@line 6837
   HEAP8[$287 >> 0] = $72; //@line 6838
   $288 = $ReallocAsyncCtx2 + 148 | 0; //@line 6839
   HEAP32[$288 >> 2] = $74; //@line 6840
   $289 = $ReallocAsyncCtx2 + 152 | 0; //@line 6841
   HEAP32[$289 >> 2] = $76; //@line 6842
   $290 = $ReallocAsyncCtx2 + 156 | 0; //@line 6843
   HEAP32[$290 >> 2] = $78; //@line 6844
   $291 = $ReallocAsyncCtx2 + 160 | 0; //@line 6845
   HEAP32[$291 >> 2] = $80; //@line 6846
   $292 = $ReallocAsyncCtx2 + 164 | 0; //@line 6847
   HEAP32[$292 >> 2] = $82; //@line 6848
   $293 = $ReallocAsyncCtx2 + 168 | 0; //@line 6849
   HEAP32[$293 >> 2] = $84; //@line 6850
   $294 = $ReallocAsyncCtx2 + 172 | 0; //@line 6851
   HEAP32[$294 >> 2] = $86; //@line 6852
   $295 = $ReallocAsyncCtx2 + 176 | 0; //@line 6853
   HEAP32[$295 >> 2] = $88; //@line 6854
   $296 = $ReallocAsyncCtx2 + 180 | 0; //@line 6855
   HEAP32[$296 >> 2] = $90; //@line 6856
   $297 = $ReallocAsyncCtx2 + 184 | 0; //@line 6857
   HEAP32[$297 >> 2] = $92; //@line 6858
   $298 = $ReallocAsyncCtx2 + 188 | 0; //@line 6859
   HEAP32[$298 >> 2] = $94; //@line 6860
   $299 = $ReallocAsyncCtx2 + 192 | 0; //@line 6861
   HEAP32[$299 >> 2] = $96; //@line 6862
   $300 = $ReallocAsyncCtx2 + 196 | 0; //@line 6863
   HEAP32[$300 >> 2] = $98; //@line 6864
   $301 = $ReallocAsyncCtx2 + 200 | 0; //@line 6865
   HEAP32[$301 >> 2] = $100; //@line 6866
   $302 = $ReallocAsyncCtx2 + 204 | 0; //@line 6867
   HEAP32[$302 >> 2] = $102; //@line 6868
   $303 = $ReallocAsyncCtx2 + 208 | 0; //@line 6869
   HEAP32[$303 >> 2] = $104; //@line 6870
   $304 = $ReallocAsyncCtx2 + 212 | 0; //@line 6871
   HEAP32[$304 >> 2] = $106; //@line 6872
   $305 = $ReallocAsyncCtx2 + 216 | 0; //@line 6873
   HEAP32[$305 >> 2] = $108; //@line 6874
   $306 = $ReallocAsyncCtx2 + 220 | 0; //@line 6875
   HEAP8[$306 >> 0] = $110; //@line 6876
   $307 = $ReallocAsyncCtx2 + 224 | 0; //@line 6877
   HEAP32[$307 >> 2] = $14; //@line 6878
   $308 = $ReallocAsyncCtx2 + 228 | 0; //@line 6879
   HEAP32[$308 >> 2] = $16; //@line 6880
   $309 = $ReallocAsyncCtx2 + 232 | 0; //@line 6881
   HEAP32[$309 >> 2] = $12; //@line 6882
   sp = STACKTOP; //@line 6883
   return;
  }
  HEAP8[___async_retval >> 0] = $251; //@line 6887
  ___async_unwind = 0; //@line 6888
  HEAP32[$ReallocAsyncCtx2 >> 2] = 490; //@line 6889
  $252 = $ReallocAsyncCtx2 + 4 | 0; //@line 6890
  HEAP8[$252 >> 0] = $112; //@line 6891
  $253 = $ReallocAsyncCtx2 + 8 | 0; //@line 6892
  HEAP32[$253 >> 2] = $4; //@line 6893
  $254 = $ReallocAsyncCtx2 + 12 | 0; //@line 6894
  HEAP32[$254 >> 2] = $6; //@line 6895
  $255 = $ReallocAsyncCtx2 + 16 | 0; //@line 6896
  HEAP32[$255 >> 2] = $8; //@line 6897
  $256 = $ReallocAsyncCtx2 + 20 | 0; //@line 6898
  HEAP32[$256 >> 2] = $10; //@line 6899
  $257 = $ReallocAsyncCtx2 + 24 | 0; //@line 6900
  HEAP8[$257 >> 0] = $240; //@line 6901
  $258 = $ReallocAsyncCtx2 + 28 | 0; //@line 6902
  HEAP32[$258 >> 2] = $2; //@line 6903
  $259 = $ReallocAsyncCtx2 + 32 | 0; //@line 6904
  HEAP32[$259 >> 2] = $114; //@line 6905
  $260 = $ReallocAsyncCtx2 + 36 | 0; //@line 6906
  HEAP32[$260 >> 2] = $116; //@line 6907
  $261 = $ReallocAsyncCtx2 + 40 | 0; //@line 6908
  HEAP32[$261 >> 2] = $18; //@line 6909
  $262 = $ReallocAsyncCtx2 + 44 | 0; //@line 6910
  HEAP32[$262 >> 2] = $20; //@line 6911
  $263 = $ReallocAsyncCtx2 + 48 | 0; //@line 6912
  HEAP32[$263 >> 2] = $22; //@line 6913
  $264 = $ReallocAsyncCtx2 + 52 | 0; //@line 6914
  HEAP32[$264 >> 2] = $24; //@line 6915
  $265 = $ReallocAsyncCtx2 + 56 | 0; //@line 6916
  HEAP32[$265 >> 2] = $26; //@line 6917
  $266 = $ReallocAsyncCtx2 + 60 | 0; //@line 6918
  HEAP32[$266 >> 2] = $28; //@line 6919
  $267 = $ReallocAsyncCtx2 + 64 | 0; //@line 6920
  HEAP32[$267 >> 2] = $30; //@line 6921
  $268 = $ReallocAsyncCtx2 + 68 | 0; //@line 6922
  HEAP32[$268 >> 2] = $32; //@line 6923
  $269 = $ReallocAsyncCtx2 + 72 | 0; //@line 6924
  HEAP32[$269 >> 2] = $34; //@line 6925
  $270 = $ReallocAsyncCtx2 + 76 | 0; //@line 6926
  HEAP32[$270 >> 2] = $36; //@line 6927
  $271 = $ReallocAsyncCtx2 + 80 | 0; //@line 6928
  HEAP32[$271 >> 2] = $38; //@line 6929
  $272 = $ReallocAsyncCtx2 + 84 | 0; //@line 6930
  HEAP32[$272 >> 2] = $40; //@line 6931
  $273 = $ReallocAsyncCtx2 + 88 | 0; //@line 6932
  HEAP32[$273 >> 2] = $42; //@line 6933
  $274 = $ReallocAsyncCtx2 + 92 | 0; //@line 6934
  HEAP32[$274 >> 2] = $46; //@line 6935
  $275 = $ReallocAsyncCtx2 + 96 | 0; //@line 6936
  HEAP32[$275 >> 2] = $48; //@line 6937
  $276 = $ReallocAsyncCtx2 + 100 | 0; //@line 6938
  HEAP32[$276 >> 2] = $50; //@line 6939
  $277 = $ReallocAsyncCtx2 + 104 | 0; //@line 6940
  HEAP32[$277 >> 2] = $52; //@line 6941
  $278 = $ReallocAsyncCtx2 + 108 | 0; //@line 6942
  HEAP32[$278 >> 2] = $54; //@line 6943
  $279 = $ReallocAsyncCtx2 + 112 | 0; //@line 6944
  HEAP32[$279 >> 2] = $56; //@line 6945
  $280 = $ReallocAsyncCtx2 + 116 | 0; //@line 6946
  HEAP32[$280 >> 2] = $58; //@line 6947
  $281 = $ReallocAsyncCtx2 + 120 | 0; //@line 6948
  HEAP32[$281 >> 2] = $60; //@line 6949
  $282 = $ReallocAsyncCtx2 + 124 | 0; //@line 6950
  HEAP32[$282 >> 2] = $62; //@line 6951
  $283 = $ReallocAsyncCtx2 + 128 | 0; //@line 6952
  HEAP32[$283 >> 2] = $64; //@line 6953
  $284 = $ReallocAsyncCtx2 + 132 | 0; //@line 6954
  HEAP32[$284 >> 2] = $66; //@line 6955
  $285 = $ReallocAsyncCtx2 + 136 | 0; //@line 6956
  HEAP32[$285 >> 2] = $68; //@line 6957
  $286 = $ReallocAsyncCtx2 + 140 | 0; //@line 6958
  HEAP32[$286 >> 2] = $70; //@line 6959
  $287 = $ReallocAsyncCtx2 + 144 | 0; //@line 6960
  HEAP8[$287 >> 0] = $72; //@line 6961
  $288 = $ReallocAsyncCtx2 + 148 | 0; //@line 6962
  HEAP32[$288 >> 2] = $74; //@line 6963
  $289 = $ReallocAsyncCtx2 + 152 | 0; //@line 6964
  HEAP32[$289 >> 2] = $76; //@line 6965
  $290 = $ReallocAsyncCtx2 + 156 | 0; //@line 6966
  HEAP32[$290 >> 2] = $78; //@line 6967
  $291 = $ReallocAsyncCtx2 + 160 | 0; //@line 6968
  HEAP32[$291 >> 2] = $80; //@line 6969
  $292 = $ReallocAsyncCtx2 + 164 | 0; //@line 6970
  HEAP32[$292 >> 2] = $82; //@line 6971
  $293 = $ReallocAsyncCtx2 + 168 | 0; //@line 6972
  HEAP32[$293 >> 2] = $84; //@line 6973
  $294 = $ReallocAsyncCtx2 + 172 | 0; //@line 6974
  HEAP32[$294 >> 2] = $86; //@line 6975
  $295 = $ReallocAsyncCtx2 + 176 | 0; //@line 6976
  HEAP32[$295 >> 2] = $88; //@line 6977
  $296 = $ReallocAsyncCtx2 + 180 | 0; //@line 6978
  HEAP32[$296 >> 2] = $90; //@line 6979
  $297 = $ReallocAsyncCtx2 + 184 | 0; //@line 6980
  HEAP32[$297 >> 2] = $92; //@line 6981
  $298 = $ReallocAsyncCtx2 + 188 | 0; //@line 6982
  HEAP32[$298 >> 2] = $94; //@line 6983
  $299 = $ReallocAsyncCtx2 + 192 | 0; //@line 6984
  HEAP32[$299 >> 2] = $96; //@line 6985
  $300 = $ReallocAsyncCtx2 + 196 | 0; //@line 6986
  HEAP32[$300 >> 2] = $98; //@line 6987
  $301 = $ReallocAsyncCtx2 + 200 | 0; //@line 6988
  HEAP32[$301 >> 2] = $100; //@line 6989
  $302 = $ReallocAsyncCtx2 + 204 | 0; //@line 6990
  HEAP32[$302 >> 2] = $102; //@line 6991
  $303 = $ReallocAsyncCtx2 + 208 | 0; //@line 6992
  HEAP32[$303 >> 2] = $104; //@line 6993
  $304 = $ReallocAsyncCtx2 + 212 | 0; //@line 6994
  HEAP32[$304 >> 2] = $106; //@line 6995
  $305 = $ReallocAsyncCtx2 + 216 | 0; //@line 6996
  HEAP32[$305 >> 2] = $108; //@line 6997
  $306 = $ReallocAsyncCtx2 + 220 | 0; //@line 6998
  HEAP8[$306 >> 0] = $110; //@line 6999
  $307 = $ReallocAsyncCtx2 + 224 | 0; //@line 7000
  HEAP32[$307 >> 2] = $14; //@line 7001
  $308 = $ReallocAsyncCtx2 + 228 | 0; //@line 7002
  HEAP32[$308 >> 2] = $16; //@line 7003
  $309 = $ReallocAsyncCtx2 + 232 | 0; //@line 7004
  HEAP32[$309 >> 2] = $12; //@line 7005
  sp = STACKTOP; //@line 7006
  return;
 } else if ((label | 0) == 13) {
  $313 = HEAP32[$311 >> 2] | 0; //@line 7010
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(232) | 0; //@line 7011
  $314 = FUNCTION_TABLE_ii[$313 & 15]($76) | 0; //@line 7012
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 491; //@line 7015
   $315 = $ReallocAsyncCtx3 + 4 | 0; //@line 7016
   HEAP32[$315 >> 2] = $2; //@line 7017
   $316 = $ReallocAsyncCtx3 + 8 | 0; //@line 7018
   HEAP32[$316 >> 2] = $4; //@line 7019
   $317 = $ReallocAsyncCtx3 + 12 | 0; //@line 7020
   HEAP32[$317 >> 2] = $6; //@line 7021
   $318 = $ReallocAsyncCtx3 + 16 | 0; //@line 7022
   HEAP32[$318 >> 2] = $8; //@line 7023
   $319 = $ReallocAsyncCtx3 + 20 | 0; //@line 7024
   HEAP32[$319 >> 2] = $10; //@line 7025
   $320 = $ReallocAsyncCtx3 + 24 | 0; //@line 7026
   HEAP32[$320 >> 2] = $12; //@line 7027
   $321 = $ReallocAsyncCtx3 + 28 | 0; //@line 7028
   HEAP32[$321 >> 2] = $14; //@line 7029
   $322 = $ReallocAsyncCtx3 + 32 | 0; //@line 7030
   HEAP32[$322 >> 2] = $16; //@line 7031
   $323 = $ReallocAsyncCtx3 + 36 | 0; //@line 7032
   HEAP32[$323 >> 2] = $18; //@line 7033
   $324 = $ReallocAsyncCtx3 + 40 | 0; //@line 7034
   HEAP32[$324 >> 2] = $20; //@line 7035
   $325 = $ReallocAsyncCtx3 + 44 | 0; //@line 7036
   HEAP32[$325 >> 2] = $22; //@line 7037
   $326 = $ReallocAsyncCtx3 + 48 | 0; //@line 7038
   HEAP32[$326 >> 2] = $24; //@line 7039
   $327 = $ReallocAsyncCtx3 + 52 | 0; //@line 7040
   HEAP32[$327 >> 2] = $26; //@line 7041
   $328 = $ReallocAsyncCtx3 + 56 | 0; //@line 7042
   HEAP32[$328 >> 2] = $28; //@line 7043
   $329 = $ReallocAsyncCtx3 + 60 | 0; //@line 7044
   HEAP32[$329 >> 2] = $30; //@line 7045
   $330 = $ReallocAsyncCtx3 + 64 | 0; //@line 7046
   HEAP32[$330 >> 2] = $32; //@line 7047
   $331 = $ReallocAsyncCtx3 + 68 | 0; //@line 7048
   HEAP32[$331 >> 2] = $34; //@line 7049
   $332 = $ReallocAsyncCtx3 + 72 | 0; //@line 7050
   HEAP32[$332 >> 2] = $36; //@line 7051
   $333 = $ReallocAsyncCtx3 + 76 | 0; //@line 7052
   HEAP32[$333 >> 2] = $38; //@line 7053
   $334 = $ReallocAsyncCtx3 + 80 | 0; //@line 7054
   HEAP32[$334 >> 2] = $40; //@line 7055
   $335 = $ReallocAsyncCtx3 + 84 | 0; //@line 7056
   HEAP32[$335 >> 2] = $42; //@line 7057
   $336 = $ReallocAsyncCtx3 + 88 | 0; //@line 7058
   HEAP32[$336 >> 2] = $46; //@line 7059
   $337 = $ReallocAsyncCtx3 + 92 | 0; //@line 7060
   HEAP32[$337 >> 2] = $48; //@line 7061
   $338 = $ReallocAsyncCtx3 + 96 | 0; //@line 7062
   HEAP32[$338 >> 2] = $50; //@line 7063
   $339 = $ReallocAsyncCtx3 + 100 | 0; //@line 7064
   HEAP32[$339 >> 2] = $52; //@line 7065
   $340 = $ReallocAsyncCtx3 + 104 | 0; //@line 7066
   HEAP32[$340 >> 2] = $54; //@line 7067
   $341 = $ReallocAsyncCtx3 + 108 | 0; //@line 7068
   HEAP32[$341 >> 2] = $56; //@line 7069
   $342 = $ReallocAsyncCtx3 + 112 | 0; //@line 7070
   HEAP32[$342 >> 2] = $58; //@line 7071
   $343 = $ReallocAsyncCtx3 + 116 | 0; //@line 7072
   HEAP32[$343 >> 2] = $60; //@line 7073
   $344 = $ReallocAsyncCtx3 + 120 | 0; //@line 7074
   HEAP32[$344 >> 2] = $62; //@line 7075
   $345 = $ReallocAsyncCtx3 + 124 | 0; //@line 7076
   HEAP32[$345 >> 2] = $64; //@line 7077
   $346 = $ReallocAsyncCtx3 + 128 | 0; //@line 7078
   HEAP32[$346 >> 2] = $66; //@line 7079
   $347 = $ReallocAsyncCtx3 + 132 | 0; //@line 7080
   HEAP32[$347 >> 2] = $68; //@line 7081
   $348 = $ReallocAsyncCtx3 + 136 | 0; //@line 7082
   HEAP32[$348 >> 2] = $70; //@line 7083
   $349 = $ReallocAsyncCtx3 + 140 | 0; //@line 7084
   HEAP8[$349 >> 0] = $72; //@line 7085
   $350 = $ReallocAsyncCtx3 + 144 | 0; //@line 7086
   HEAP32[$350 >> 2] = $74; //@line 7087
   $351 = $ReallocAsyncCtx3 + 148 | 0; //@line 7088
   HEAP32[$351 >> 2] = $76; //@line 7089
   $352 = $ReallocAsyncCtx3 + 152 | 0; //@line 7090
   HEAP32[$352 >> 2] = $78; //@line 7091
   $353 = $ReallocAsyncCtx3 + 156 | 0; //@line 7092
   HEAP32[$353 >> 2] = $80; //@line 7093
   $354 = $ReallocAsyncCtx3 + 160 | 0; //@line 7094
   HEAP32[$354 >> 2] = $82; //@line 7095
   $355 = $ReallocAsyncCtx3 + 164 | 0; //@line 7096
   HEAP32[$355 >> 2] = $84; //@line 7097
   $356 = $ReallocAsyncCtx3 + 168 | 0; //@line 7098
   HEAP32[$356 >> 2] = $86; //@line 7099
   $357 = $ReallocAsyncCtx3 + 172 | 0; //@line 7100
   HEAP32[$357 >> 2] = $88; //@line 7101
   $358 = $ReallocAsyncCtx3 + 176 | 0; //@line 7102
   HEAP32[$358 >> 2] = $90; //@line 7103
   $359 = $ReallocAsyncCtx3 + 180 | 0; //@line 7104
   HEAP32[$359 >> 2] = $92; //@line 7105
   $360 = $ReallocAsyncCtx3 + 184 | 0; //@line 7106
   HEAP32[$360 >> 2] = $94; //@line 7107
   $361 = $ReallocAsyncCtx3 + 188 | 0; //@line 7108
   HEAP32[$361 >> 2] = $96; //@line 7109
   $362 = $ReallocAsyncCtx3 + 192 | 0; //@line 7110
   HEAP8[$362 >> 0] = $119; //@line 7111
   $363 = $ReallocAsyncCtx3 + 196 | 0; //@line 7112
   HEAP32[$363 >> 2] = $98; //@line 7113
   $364 = $ReallocAsyncCtx3 + 200 | 0; //@line 7114
   HEAP32[$364 >> 2] = $100; //@line 7115
   $365 = $ReallocAsyncCtx3 + 204 | 0; //@line 7116
   HEAP32[$365 >> 2] = $102; //@line 7117
   $366 = $ReallocAsyncCtx3 + 208 | 0; //@line 7118
   HEAP32[$366 >> 2] = $104; //@line 7119
   $367 = $ReallocAsyncCtx3 + 212 | 0; //@line 7120
   HEAP32[$367 >> 2] = $106; //@line 7121
   $368 = $ReallocAsyncCtx3 + 216 | 0; //@line 7122
   HEAP32[$368 >> 2] = $108; //@line 7123
   $369 = $ReallocAsyncCtx3 + 220 | 0; //@line 7124
   HEAP8[$369 >> 0] = $110; //@line 7125
   $370 = $ReallocAsyncCtx3 + 221 | 0; //@line 7126
   HEAP8[$370 >> 0] = $112; //@line 7127
   $371 = $ReallocAsyncCtx3 + 224 | 0; //@line 7128
   HEAP32[$371 >> 2] = $114; //@line 7129
   $372 = $ReallocAsyncCtx3 + 228 | 0; //@line 7130
   HEAP32[$372 >> 2] = $116; //@line 7131
   sp = STACKTOP; //@line 7132
   return;
  }
  HEAP8[___async_retval >> 0] = $314; //@line 7136
  ___async_unwind = 0; //@line 7137
  HEAP32[$ReallocAsyncCtx3 >> 2] = 491; //@line 7138
  $315 = $ReallocAsyncCtx3 + 4 | 0; //@line 7139
  HEAP32[$315 >> 2] = $2; //@line 7140
  $316 = $ReallocAsyncCtx3 + 8 | 0; //@line 7141
  HEAP32[$316 >> 2] = $4; //@line 7142
  $317 = $ReallocAsyncCtx3 + 12 | 0; //@line 7143
  HEAP32[$317 >> 2] = $6; //@line 7144
  $318 = $ReallocAsyncCtx3 + 16 | 0; //@line 7145
  HEAP32[$318 >> 2] = $8; //@line 7146
  $319 = $ReallocAsyncCtx3 + 20 | 0; //@line 7147
  HEAP32[$319 >> 2] = $10; //@line 7148
  $320 = $ReallocAsyncCtx3 + 24 | 0; //@line 7149
  HEAP32[$320 >> 2] = $12; //@line 7150
  $321 = $ReallocAsyncCtx3 + 28 | 0; //@line 7151
  HEAP32[$321 >> 2] = $14; //@line 7152
  $322 = $ReallocAsyncCtx3 + 32 | 0; //@line 7153
  HEAP32[$322 >> 2] = $16; //@line 7154
  $323 = $ReallocAsyncCtx3 + 36 | 0; //@line 7155
  HEAP32[$323 >> 2] = $18; //@line 7156
  $324 = $ReallocAsyncCtx3 + 40 | 0; //@line 7157
  HEAP32[$324 >> 2] = $20; //@line 7158
  $325 = $ReallocAsyncCtx3 + 44 | 0; //@line 7159
  HEAP32[$325 >> 2] = $22; //@line 7160
  $326 = $ReallocAsyncCtx3 + 48 | 0; //@line 7161
  HEAP32[$326 >> 2] = $24; //@line 7162
  $327 = $ReallocAsyncCtx3 + 52 | 0; //@line 7163
  HEAP32[$327 >> 2] = $26; //@line 7164
  $328 = $ReallocAsyncCtx3 + 56 | 0; //@line 7165
  HEAP32[$328 >> 2] = $28; //@line 7166
  $329 = $ReallocAsyncCtx3 + 60 | 0; //@line 7167
  HEAP32[$329 >> 2] = $30; //@line 7168
  $330 = $ReallocAsyncCtx3 + 64 | 0; //@line 7169
  HEAP32[$330 >> 2] = $32; //@line 7170
  $331 = $ReallocAsyncCtx3 + 68 | 0; //@line 7171
  HEAP32[$331 >> 2] = $34; //@line 7172
  $332 = $ReallocAsyncCtx3 + 72 | 0; //@line 7173
  HEAP32[$332 >> 2] = $36; //@line 7174
  $333 = $ReallocAsyncCtx3 + 76 | 0; //@line 7175
  HEAP32[$333 >> 2] = $38; //@line 7176
  $334 = $ReallocAsyncCtx3 + 80 | 0; //@line 7177
  HEAP32[$334 >> 2] = $40; //@line 7178
  $335 = $ReallocAsyncCtx3 + 84 | 0; //@line 7179
  HEAP32[$335 >> 2] = $42; //@line 7180
  $336 = $ReallocAsyncCtx3 + 88 | 0; //@line 7181
  HEAP32[$336 >> 2] = $46; //@line 7182
  $337 = $ReallocAsyncCtx3 + 92 | 0; //@line 7183
  HEAP32[$337 >> 2] = $48; //@line 7184
  $338 = $ReallocAsyncCtx3 + 96 | 0; //@line 7185
  HEAP32[$338 >> 2] = $50; //@line 7186
  $339 = $ReallocAsyncCtx3 + 100 | 0; //@line 7187
  HEAP32[$339 >> 2] = $52; //@line 7188
  $340 = $ReallocAsyncCtx3 + 104 | 0; //@line 7189
  HEAP32[$340 >> 2] = $54; //@line 7190
  $341 = $ReallocAsyncCtx3 + 108 | 0; //@line 7191
  HEAP32[$341 >> 2] = $56; //@line 7192
  $342 = $ReallocAsyncCtx3 + 112 | 0; //@line 7193
  HEAP32[$342 >> 2] = $58; //@line 7194
  $343 = $ReallocAsyncCtx3 + 116 | 0; //@line 7195
  HEAP32[$343 >> 2] = $60; //@line 7196
  $344 = $ReallocAsyncCtx3 + 120 | 0; //@line 7197
  HEAP32[$344 >> 2] = $62; //@line 7198
  $345 = $ReallocAsyncCtx3 + 124 | 0; //@line 7199
  HEAP32[$345 >> 2] = $64; //@line 7200
  $346 = $ReallocAsyncCtx3 + 128 | 0; //@line 7201
  HEAP32[$346 >> 2] = $66; //@line 7202
  $347 = $ReallocAsyncCtx3 + 132 | 0; //@line 7203
  HEAP32[$347 >> 2] = $68; //@line 7204
  $348 = $ReallocAsyncCtx3 + 136 | 0; //@line 7205
  HEAP32[$348 >> 2] = $70; //@line 7206
  $349 = $ReallocAsyncCtx3 + 140 | 0; //@line 7207
  HEAP8[$349 >> 0] = $72; //@line 7208
  $350 = $ReallocAsyncCtx3 + 144 | 0; //@line 7209
  HEAP32[$350 >> 2] = $74; //@line 7210
  $351 = $ReallocAsyncCtx3 + 148 | 0; //@line 7211
  HEAP32[$351 >> 2] = $76; //@line 7212
  $352 = $ReallocAsyncCtx3 + 152 | 0; //@line 7213
  HEAP32[$352 >> 2] = $78; //@line 7214
  $353 = $ReallocAsyncCtx3 + 156 | 0; //@line 7215
  HEAP32[$353 >> 2] = $80; //@line 7216
  $354 = $ReallocAsyncCtx3 + 160 | 0; //@line 7217
  HEAP32[$354 >> 2] = $82; //@line 7218
  $355 = $ReallocAsyncCtx3 + 164 | 0; //@line 7219
  HEAP32[$355 >> 2] = $84; //@line 7220
  $356 = $ReallocAsyncCtx3 + 168 | 0; //@line 7221
  HEAP32[$356 >> 2] = $86; //@line 7222
  $357 = $ReallocAsyncCtx3 + 172 | 0; //@line 7223
  HEAP32[$357 >> 2] = $88; //@line 7224
  $358 = $ReallocAsyncCtx3 + 176 | 0; //@line 7225
  HEAP32[$358 >> 2] = $90; //@line 7226
  $359 = $ReallocAsyncCtx3 + 180 | 0; //@line 7227
  HEAP32[$359 >> 2] = $92; //@line 7228
  $360 = $ReallocAsyncCtx3 + 184 | 0; //@line 7229
  HEAP32[$360 >> 2] = $94; //@line 7230
  $361 = $ReallocAsyncCtx3 + 188 | 0; //@line 7231
  HEAP32[$361 >> 2] = $96; //@line 7232
  $362 = $ReallocAsyncCtx3 + 192 | 0; //@line 7233
  HEAP8[$362 >> 0] = $119; //@line 7234
  $363 = $ReallocAsyncCtx3 + 196 | 0; //@line 7235
  HEAP32[$363 >> 2] = $98; //@line 7236
  $364 = $ReallocAsyncCtx3 + 200 | 0; //@line 7237
  HEAP32[$364 >> 2] = $100; //@line 7238
  $365 = $ReallocAsyncCtx3 + 204 | 0; //@line 7239
  HEAP32[$365 >> 2] = $102; //@line 7240
  $366 = $ReallocAsyncCtx3 + 208 | 0; //@line 7241
  HEAP32[$366 >> 2] = $104; //@line 7242
  $367 = $ReallocAsyncCtx3 + 212 | 0; //@line 7243
  HEAP32[$367 >> 2] = $106; //@line 7244
  $368 = $ReallocAsyncCtx3 + 216 | 0; //@line 7245
  HEAP32[$368 >> 2] = $108; //@line 7246
  $369 = $ReallocAsyncCtx3 + 220 | 0; //@line 7247
  HEAP8[$369 >> 0] = $110; //@line 7248
  $370 = $ReallocAsyncCtx3 + 221 | 0; //@line 7249
  HEAP8[$370 >> 0] = $112; //@line 7250
  $371 = $ReallocAsyncCtx3 + 224 | 0; //@line 7251
  HEAP32[$371 >> 2] = $114; //@line 7252
  $372 = $ReallocAsyncCtx3 + 228 | 0; //@line 7253
  HEAP32[$372 >> 2] = $116; //@line 7254
  sp = STACKTOP; //@line 7255
  return;
 } else if ((label | 0) == 18) {
  $392 = HEAP8[$16 + ($119 & 255) >> 0] | 0; //@line 7262
  HEAP32[$114 >> 2] = (HEAPU8[$16 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$16 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$16 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 7283
  HEAP32[$90 >> 2] = 0; //@line 7284
  $413 = $$0$be + 6 << 24 >> 24; //@line 7285
  HEAP8[$96 >> 0] = HEAP8[$16 + ($$0$be + 5 & 255) >> 0] | 0; //@line 7289
  $419 = HEAP32[(HEAP32[$26 >> 2] | 0) + 8 >> 2] | 0; //@line 7292
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(232) | 0; //@line 7293
  $420 = FUNCTION_TABLE_iiii[$419 & 31]($88, $392, $116) | 0; //@line 7294
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 492; //@line 7297
   $421 = $ReallocAsyncCtx4 + 4 | 0; //@line 7298
   HEAP32[$421 >> 2] = $2; //@line 7299
   $422 = $ReallocAsyncCtx4 + 8 | 0; //@line 7300
   HEAP32[$422 >> 2] = $4; //@line 7301
   $423 = $ReallocAsyncCtx4 + 12 | 0; //@line 7302
   HEAP32[$423 >> 2] = $6; //@line 7303
   $424 = $ReallocAsyncCtx4 + 16 | 0; //@line 7304
   HEAP32[$424 >> 2] = $8; //@line 7305
   $425 = $ReallocAsyncCtx4 + 20 | 0; //@line 7306
   HEAP32[$425 >> 2] = $10; //@line 7307
   $426 = $ReallocAsyncCtx4 + 24 | 0; //@line 7308
   HEAP32[$426 >> 2] = $12; //@line 7309
   $427 = $ReallocAsyncCtx4 + 28 | 0; //@line 7310
   HEAP32[$427 >> 2] = $14; //@line 7311
   $428 = $ReallocAsyncCtx4 + 32 | 0; //@line 7312
   HEAP32[$428 >> 2] = $16; //@line 7313
   $429 = $ReallocAsyncCtx4 + 36 | 0; //@line 7314
   HEAP32[$429 >> 2] = $18; //@line 7315
   $430 = $ReallocAsyncCtx4 + 40 | 0; //@line 7316
   HEAP32[$430 >> 2] = $20; //@line 7317
   $431 = $ReallocAsyncCtx4 + 44 | 0; //@line 7318
   HEAP32[$431 >> 2] = $22; //@line 7319
   $432 = $ReallocAsyncCtx4 + 48 | 0; //@line 7320
   HEAP32[$432 >> 2] = $24; //@line 7321
   $433 = $ReallocAsyncCtx4 + 52 | 0; //@line 7322
   HEAP32[$433 >> 2] = $26; //@line 7323
   $434 = $ReallocAsyncCtx4 + 56 | 0; //@line 7324
   HEAP32[$434 >> 2] = $28; //@line 7325
   $435 = $ReallocAsyncCtx4 + 60 | 0; //@line 7326
   HEAP32[$435 >> 2] = $30; //@line 7327
   $436 = $ReallocAsyncCtx4 + 64 | 0; //@line 7328
   HEAP32[$436 >> 2] = $32; //@line 7329
   $437 = $ReallocAsyncCtx4 + 68 | 0; //@line 7330
   HEAP32[$437 >> 2] = $34; //@line 7331
   $438 = $ReallocAsyncCtx4 + 72 | 0; //@line 7332
   HEAP32[$438 >> 2] = $36; //@line 7333
   $439 = $ReallocAsyncCtx4 + 76 | 0; //@line 7334
   HEAP32[$439 >> 2] = $38; //@line 7335
   $440 = $ReallocAsyncCtx4 + 80 | 0; //@line 7336
   HEAP32[$440 >> 2] = $40; //@line 7337
   $441 = $ReallocAsyncCtx4 + 84 | 0; //@line 7338
   HEAP32[$441 >> 2] = $42; //@line 7339
   $442 = $ReallocAsyncCtx4 + 88 | 0; //@line 7340
   HEAP8[$442 >> 0] = $413; //@line 7341
   $443 = $ReallocAsyncCtx4 + 92 | 0; //@line 7342
   HEAP32[$443 >> 2] = $46; //@line 7343
   $444 = $ReallocAsyncCtx4 + 96 | 0; //@line 7344
   HEAP32[$444 >> 2] = $48; //@line 7345
   $445 = $ReallocAsyncCtx4 + 100 | 0; //@line 7346
   HEAP32[$445 >> 2] = $50; //@line 7347
   $446 = $ReallocAsyncCtx4 + 104 | 0; //@line 7348
   HEAP32[$446 >> 2] = $52; //@line 7349
   $447 = $ReallocAsyncCtx4 + 108 | 0; //@line 7350
   HEAP32[$447 >> 2] = $54; //@line 7351
   $448 = $ReallocAsyncCtx4 + 112 | 0; //@line 7352
   HEAP32[$448 >> 2] = $56; //@line 7353
   $449 = $ReallocAsyncCtx4 + 116 | 0; //@line 7354
   HEAP32[$449 >> 2] = $58; //@line 7355
   $450 = $ReallocAsyncCtx4 + 120 | 0; //@line 7356
   HEAP32[$450 >> 2] = $60; //@line 7357
   $451 = $ReallocAsyncCtx4 + 124 | 0; //@line 7358
   HEAP32[$451 >> 2] = $62; //@line 7359
   $452 = $ReallocAsyncCtx4 + 128 | 0; //@line 7360
   HEAP32[$452 >> 2] = $64; //@line 7361
   $453 = $ReallocAsyncCtx4 + 132 | 0; //@line 7362
   HEAP32[$453 >> 2] = $66; //@line 7363
   $454 = $ReallocAsyncCtx4 + 136 | 0; //@line 7364
   HEAP32[$454 >> 2] = $68; //@line 7365
   $455 = $ReallocAsyncCtx4 + 140 | 0; //@line 7366
   HEAP32[$455 >> 2] = $70; //@line 7367
   $456 = $ReallocAsyncCtx4 + 144 | 0; //@line 7368
   HEAP8[$456 >> 0] = $72; //@line 7369
   $457 = $ReallocAsyncCtx4 + 148 | 0; //@line 7370
   HEAP32[$457 >> 2] = $74; //@line 7371
   $458 = $ReallocAsyncCtx4 + 152 | 0; //@line 7372
   HEAP32[$458 >> 2] = $76; //@line 7373
   $459 = $ReallocAsyncCtx4 + 156 | 0; //@line 7374
   HEAP32[$459 >> 2] = $78; //@line 7375
   $460 = $ReallocAsyncCtx4 + 160 | 0; //@line 7376
   HEAP32[$460 >> 2] = $80; //@line 7377
   $461 = $ReallocAsyncCtx4 + 164 | 0; //@line 7378
   HEAP32[$461 >> 2] = $82; //@line 7379
   $462 = $ReallocAsyncCtx4 + 168 | 0; //@line 7380
   HEAP32[$462 >> 2] = $84; //@line 7381
   $463 = $ReallocAsyncCtx4 + 172 | 0; //@line 7382
   HEAP32[$463 >> 2] = $86; //@line 7383
   $464 = $ReallocAsyncCtx4 + 176 | 0; //@line 7384
   HEAP32[$464 >> 2] = $88; //@line 7385
   $465 = $ReallocAsyncCtx4 + 180 | 0; //@line 7386
   HEAP32[$465 >> 2] = $90; //@line 7387
   $466 = $ReallocAsyncCtx4 + 184 | 0; //@line 7388
   HEAP32[$466 >> 2] = $92; //@line 7389
   $467 = $ReallocAsyncCtx4 + 188 | 0; //@line 7390
   HEAP32[$467 >> 2] = $94; //@line 7391
   $468 = $ReallocAsyncCtx4 + 192 | 0; //@line 7392
   HEAP32[$468 >> 2] = $96; //@line 7393
   $469 = $ReallocAsyncCtx4 + 196 | 0; //@line 7394
   HEAP32[$469 >> 2] = $98; //@line 7395
   $470 = $ReallocAsyncCtx4 + 200 | 0; //@line 7396
   HEAP32[$470 >> 2] = $100; //@line 7397
   $471 = $ReallocAsyncCtx4 + 204 | 0; //@line 7398
   HEAP32[$471 >> 2] = $102; //@line 7399
   $472 = $ReallocAsyncCtx4 + 208 | 0; //@line 7400
   HEAP32[$472 >> 2] = $104; //@line 7401
   $473 = $ReallocAsyncCtx4 + 212 | 0; //@line 7402
   HEAP32[$473 >> 2] = $106; //@line 7403
   $474 = $ReallocAsyncCtx4 + 216 | 0; //@line 7404
   HEAP32[$474 >> 2] = $108; //@line 7405
   $475 = $ReallocAsyncCtx4 + 220 | 0; //@line 7406
   HEAP8[$475 >> 0] = $110; //@line 7407
   $476 = $ReallocAsyncCtx4 + 221 | 0; //@line 7408
   HEAP8[$476 >> 0] = $112; //@line 7409
   $477 = $ReallocAsyncCtx4 + 224 | 0; //@line 7410
   HEAP32[$477 >> 2] = $114; //@line 7411
   $478 = $ReallocAsyncCtx4 + 228 | 0; //@line 7412
   HEAP32[$478 >> 2] = $116; //@line 7413
   sp = STACKTOP; //@line 7414
   return;
  }
  HEAP8[___async_retval >> 0] = $420; //@line 7418
  ___async_unwind = 0; //@line 7419
  HEAP32[$ReallocAsyncCtx4 >> 2] = 492; //@line 7420
  $421 = $ReallocAsyncCtx4 + 4 | 0; //@line 7421
  HEAP32[$421 >> 2] = $2; //@line 7422
  $422 = $ReallocAsyncCtx4 + 8 | 0; //@line 7423
  HEAP32[$422 >> 2] = $4; //@line 7424
  $423 = $ReallocAsyncCtx4 + 12 | 0; //@line 7425
  HEAP32[$423 >> 2] = $6; //@line 7426
  $424 = $ReallocAsyncCtx4 + 16 | 0; //@line 7427
  HEAP32[$424 >> 2] = $8; //@line 7428
  $425 = $ReallocAsyncCtx4 + 20 | 0; //@line 7429
  HEAP32[$425 >> 2] = $10; //@line 7430
  $426 = $ReallocAsyncCtx4 + 24 | 0; //@line 7431
  HEAP32[$426 >> 2] = $12; //@line 7432
  $427 = $ReallocAsyncCtx4 + 28 | 0; //@line 7433
  HEAP32[$427 >> 2] = $14; //@line 7434
  $428 = $ReallocAsyncCtx4 + 32 | 0; //@line 7435
  HEAP32[$428 >> 2] = $16; //@line 7436
  $429 = $ReallocAsyncCtx4 + 36 | 0; //@line 7437
  HEAP32[$429 >> 2] = $18; //@line 7438
  $430 = $ReallocAsyncCtx4 + 40 | 0; //@line 7439
  HEAP32[$430 >> 2] = $20; //@line 7440
  $431 = $ReallocAsyncCtx4 + 44 | 0; //@line 7441
  HEAP32[$431 >> 2] = $22; //@line 7442
  $432 = $ReallocAsyncCtx4 + 48 | 0; //@line 7443
  HEAP32[$432 >> 2] = $24; //@line 7444
  $433 = $ReallocAsyncCtx4 + 52 | 0; //@line 7445
  HEAP32[$433 >> 2] = $26; //@line 7446
  $434 = $ReallocAsyncCtx4 + 56 | 0; //@line 7447
  HEAP32[$434 >> 2] = $28; //@line 7448
  $435 = $ReallocAsyncCtx4 + 60 | 0; //@line 7449
  HEAP32[$435 >> 2] = $30; //@line 7450
  $436 = $ReallocAsyncCtx4 + 64 | 0; //@line 7451
  HEAP32[$436 >> 2] = $32; //@line 7452
  $437 = $ReallocAsyncCtx4 + 68 | 0; //@line 7453
  HEAP32[$437 >> 2] = $34; //@line 7454
  $438 = $ReallocAsyncCtx4 + 72 | 0; //@line 7455
  HEAP32[$438 >> 2] = $36; //@line 7456
  $439 = $ReallocAsyncCtx4 + 76 | 0; //@line 7457
  HEAP32[$439 >> 2] = $38; //@line 7458
  $440 = $ReallocAsyncCtx4 + 80 | 0; //@line 7459
  HEAP32[$440 >> 2] = $40; //@line 7460
  $441 = $ReallocAsyncCtx4 + 84 | 0; //@line 7461
  HEAP32[$441 >> 2] = $42; //@line 7462
  $442 = $ReallocAsyncCtx4 + 88 | 0; //@line 7463
  HEAP8[$442 >> 0] = $413; //@line 7464
  $443 = $ReallocAsyncCtx4 + 92 | 0; //@line 7465
  HEAP32[$443 >> 2] = $46; //@line 7466
  $444 = $ReallocAsyncCtx4 + 96 | 0; //@line 7467
  HEAP32[$444 >> 2] = $48; //@line 7468
  $445 = $ReallocAsyncCtx4 + 100 | 0; //@line 7469
  HEAP32[$445 >> 2] = $50; //@line 7470
  $446 = $ReallocAsyncCtx4 + 104 | 0; //@line 7471
  HEAP32[$446 >> 2] = $52; //@line 7472
  $447 = $ReallocAsyncCtx4 + 108 | 0; //@line 7473
  HEAP32[$447 >> 2] = $54; //@line 7474
  $448 = $ReallocAsyncCtx4 + 112 | 0; //@line 7475
  HEAP32[$448 >> 2] = $56; //@line 7476
  $449 = $ReallocAsyncCtx4 + 116 | 0; //@line 7477
  HEAP32[$449 >> 2] = $58; //@line 7478
  $450 = $ReallocAsyncCtx4 + 120 | 0; //@line 7479
  HEAP32[$450 >> 2] = $60; //@line 7480
  $451 = $ReallocAsyncCtx4 + 124 | 0; //@line 7481
  HEAP32[$451 >> 2] = $62; //@line 7482
  $452 = $ReallocAsyncCtx4 + 128 | 0; //@line 7483
  HEAP32[$452 >> 2] = $64; //@line 7484
  $453 = $ReallocAsyncCtx4 + 132 | 0; //@line 7485
  HEAP32[$453 >> 2] = $66; //@line 7486
  $454 = $ReallocAsyncCtx4 + 136 | 0; //@line 7487
  HEAP32[$454 >> 2] = $68; //@line 7488
  $455 = $ReallocAsyncCtx4 + 140 | 0; //@line 7489
  HEAP32[$455 >> 2] = $70; //@line 7490
  $456 = $ReallocAsyncCtx4 + 144 | 0; //@line 7491
  HEAP8[$456 >> 0] = $72; //@line 7492
  $457 = $ReallocAsyncCtx4 + 148 | 0; //@line 7493
  HEAP32[$457 >> 2] = $74; //@line 7494
  $458 = $ReallocAsyncCtx4 + 152 | 0; //@line 7495
  HEAP32[$458 >> 2] = $76; //@line 7496
  $459 = $ReallocAsyncCtx4 + 156 | 0; //@line 7497
  HEAP32[$459 >> 2] = $78; //@line 7498
  $460 = $ReallocAsyncCtx4 + 160 | 0; //@line 7499
  HEAP32[$460 >> 2] = $80; //@line 7500
  $461 = $ReallocAsyncCtx4 + 164 | 0; //@line 7501
  HEAP32[$461 >> 2] = $82; //@line 7502
  $462 = $ReallocAsyncCtx4 + 168 | 0; //@line 7503
  HEAP32[$462 >> 2] = $84; //@line 7504
  $463 = $ReallocAsyncCtx4 + 172 | 0; //@line 7505
  HEAP32[$463 >> 2] = $86; //@line 7506
  $464 = $ReallocAsyncCtx4 + 176 | 0; //@line 7507
  HEAP32[$464 >> 2] = $88; //@line 7508
  $465 = $ReallocAsyncCtx4 + 180 | 0; //@line 7509
  HEAP32[$465 >> 2] = $90; //@line 7510
  $466 = $ReallocAsyncCtx4 + 184 | 0; //@line 7511
  HEAP32[$466 >> 2] = $92; //@line 7512
  $467 = $ReallocAsyncCtx4 + 188 | 0; //@line 7513
  HEAP32[$467 >> 2] = $94; //@line 7514
  $468 = $ReallocAsyncCtx4 + 192 | 0; //@line 7515
  HEAP32[$468 >> 2] = $96; //@line 7516
  $469 = $ReallocAsyncCtx4 + 196 | 0; //@line 7517
  HEAP32[$469 >> 2] = $98; //@line 7518
  $470 = $ReallocAsyncCtx4 + 200 | 0; //@line 7519
  HEAP32[$470 >> 2] = $100; //@line 7520
  $471 = $ReallocAsyncCtx4 + 204 | 0; //@line 7521
  HEAP32[$471 >> 2] = $102; //@line 7522
  $472 = $ReallocAsyncCtx4 + 208 | 0; //@line 7523
  HEAP32[$472 >> 2] = $104; //@line 7524
  $473 = $ReallocAsyncCtx4 + 212 | 0; //@line 7525
  HEAP32[$473 >> 2] = $106; //@line 7526
  $474 = $ReallocAsyncCtx4 + 216 | 0; //@line 7527
  HEAP32[$474 >> 2] = $108; //@line 7528
  $475 = $ReallocAsyncCtx4 + 220 | 0; //@line 7529
  HEAP8[$475 >> 0] = $110; //@line 7530
  $476 = $ReallocAsyncCtx4 + 221 | 0; //@line 7531
  HEAP8[$476 >> 0] = $112; //@line 7532
  $477 = $ReallocAsyncCtx4 + 224 | 0; //@line 7533
  HEAP32[$477 >> 2] = $114; //@line 7534
  $478 = $ReallocAsyncCtx4 + 228 | 0; //@line 7535
  HEAP32[$478 >> 2] = $116; //@line 7536
  sp = STACKTOP; //@line 7537
  return;
 } else if ((label | 0) == 27) {
  $511 = $$0$be + 2 << 24 >> 24; //@line 7541
  $515 = HEAPU8[$16 + ($119 & 255) >> 0] | 0; //@line 7545
  $517 = $515 >>> 5 & 1; //@line 7548
  $519 = $515 >>> 4 & 1; //@line 7551
  $522 = HEAP32[(HEAP32[$20 >> 2] | 0) + 44 >> 2] | 0; //@line 7554
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(248) | 0; //@line 7555
  $523 = FUNCTION_TABLE_iiii[$522 & 31]($88, $519, $517) | 0; //@line 7556
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 493; //@line 7559
   $524 = $ReallocAsyncCtx5 + 4 | 0; //@line 7560
   HEAP32[$524 >> 2] = $2; //@line 7561
   $525 = $ReallocAsyncCtx5 + 8 | 0; //@line 7562
   HEAP32[$525 >> 2] = $4; //@line 7563
   $526 = $ReallocAsyncCtx5 + 12 | 0; //@line 7564
   HEAP32[$526 >> 2] = $6; //@line 7565
   $527 = $ReallocAsyncCtx5 + 16 | 0; //@line 7566
   HEAP32[$527 >> 2] = $8; //@line 7567
   $528 = $ReallocAsyncCtx5 + 20 | 0; //@line 7568
   HEAP32[$528 >> 2] = $10; //@line 7569
   $529 = $ReallocAsyncCtx5 + 24 | 0; //@line 7570
   HEAP32[$529 >> 2] = $12; //@line 7571
   $530 = $ReallocAsyncCtx5 + 28 | 0; //@line 7572
   HEAP32[$530 >> 2] = $14; //@line 7573
   $531 = $ReallocAsyncCtx5 + 32 | 0; //@line 7574
   HEAP32[$531 >> 2] = $16; //@line 7575
   $532 = $ReallocAsyncCtx5 + 36 | 0; //@line 7576
   HEAP32[$532 >> 2] = $18; //@line 7577
   $533 = $ReallocAsyncCtx5 + 40 | 0; //@line 7578
   HEAP32[$533 >> 2] = $20; //@line 7579
   $534 = $ReallocAsyncCtx5 + 44 | 0; //@line 7580
   HEAP32[$534 >> 2] = $515; //@line 7581
   $535 = $ReallocAsyncCtx5 + 48 | 0; //@line 7582
   HEAP32[$535 >> 2] = $22; //@line 7583
   $536 = $ReallocAsyncCtx5 + 52 | 0; //@line 7584
   HEAP32[$536 >> 2] = $24; //@line 7585
   $537 = $ReallocAsyncCtx5 + 56 | 0; //@line 7586
   HEAP32[$537 >> 2] = $26; //@line 7587
   $538 = $ReallocAsyncCtx5 + 60 | 0; //@line 7588
   HEAP32[$538 >> 2] = $28; //@line 7589
   $539 = $ReallocAsyncCtx5 + 64 | 0; //@line 7590
   HEAP32[$539 >> 2] = $30; //@line 7591
   $540 = $ReallocAsyncCtx5 + 68 | 0; //@line 7592
   HEAP32[$540 >> 2] = $32; //@line 7593
   $541 = $ReallocAsyncCtx5 + 72 | 0; //@line 7594
   HEAP32[$541 >> 2] = $34; //@line 7595
   $542 = $ReallocAsyncCtx5 + 76 | 0; //@line 7596
   HEAP32[$542 >> 2] = $36; //@line 7597
   $543 = $ReallocAsyncCtx5 + 80 | 0; //@line 7598
   HEAP32[$543 >> 2] = $38; //@line 7599
   $544 = $ReallocAsyncCtx5 + 84 | 0; //@line 7600
   HEAP32[$544 >> 2] = $40; //@line 7601
   $545 = $ReallocAsyncCtx5 + 88 | 0; //@line 7602
   HEAP32[$545 >> 2] = $42; //@line 7603
   $546 = $ReallocAsyncCtx5 + 92 | 0; //@line 7604
   HEAP32[$546 >> 2] = $46; //@line 7605
   $547 = $ReallocAsyncCtx5 + 96 | 0; //@line 7606
   HEAP32[$547 >> 2] = $48; //@line 7607
   $548 = $ReallocAsyncCtx5 + 100 | 0; //@line 7608
   HEAP32[$548 >> 2] = $50; //@line 7609
   $549 = $ReallocAsyncCtx5 + 104 | 0; //@line 7610
   HEAP8[$549 >> 0] = $511; //@line 7611
   $550 = $ReallocAsyncCtx5 + 108 | 0; //@line 7612
   HEAP32[$550 >> 2] = $52; //@line 7613
   $551 = $ReallocAsyncCtx5 + 112 | 0; //@line 7614
   HEAP32[$551 >> 2] = $54; //@line 7615
   $552 = $ReallocAsyncCtx5 + 116 | 0; //@line 7616
   HEAP32[$552 >> 2] = $56; //@line 7617
   $553 = $ReallocAsyncCtx5 + 120 | 0; //@line 7618
   HEAP32[$553 >> 2] = $58; //@line 7619
   $554 = $ReallocAsyncCtx5 + 124 | 0; //@line 7620
   HEAP8[$554 >> 0] = $517; //@line 7621
   $555 = $ReallocAsyncCtx5 + 128 | 0; //@line 7622
   HEAP32[$555 >> 2] = $60; //@line 7623
   $556 = $ReallocAsyncCtx5 + 132 | 0; //@line 7624
   HEAP32[$556 >> 2] = $62; //@line 7625
   $557 = $ReallocAsyncCtx5 + 136 | 0; //@line 7626
   HEAP32[$557 >> 2] = $64; //@line 7627
   $558 = $ReallocAsyncCtx5 + 140 | 0; //@line 7628
   HEAP32[$558 >> 2] = $66; //@line 7629
   $559 = $ReallocAsyncCtx5 + 144 | 0; //@line 7630
   HEAP32[$559 >> 2] = $68; //@line 7631
   $560 = $ReallocAsyncCtx5 + 148 | 0; //@line 7632
   HEAP32[$560 >> 2] = $70; //@line 7633
   $561 = $ReallocAsyncCtx5 + 152 | 0; //@line 7634
   HEAP8[$561 >> 0] = $72; //@line 7635
   $562 = $ReallocAsyncCtx5 + 156 | 0; //@line 7636
   HEAP32[$562 >> 2] = $74; //@line 7637
   $563 = $ReallocAsyncCtx5 + 160 | 0; //@line 7638
   HEAP8[$563 >> 0] = $519; //@line 7639
   $564 = $ReallocAsyncCtx5 + 164 | 0; //@line 7640
   HEAP32[$564 >> 2] = $76; //@line 7641
   $565 = $ReallocAsyncCtx5 + 168 | 0; //@line 7642
   HEAP32[$565 >> 2] = $78; //@line 7643
   $566 = $ReallocAsyncCtx5 + 172 | 0; //@line 7644
   HEAP32[$566 >> 2] = $80; //@line 7645
   $567 = $ReallocAsyncCtx5 + 176 | 0; //@line 7646
   HEAP32[$567 >> 2] = $82; //@line 7647
   $568 = $ReallocAsyncCtx5 + 180 | 0; //@line 7648
   HEAP32[$568 >> 2] = $84; //@line 7649
   $569 = $ReallocAsyncCtx5 + 184 | 0; //@line 7650
   HEAP32[$569 >> 2] = $86; //@line 7651
   $570 = $ReallocAsyncCtx5 + 188 | 0; //@line 7652
   HEAP32[$570 >> 2] = $$0107$be; //@line 7653
   $571 = $ReallocAsyncCtx5 + 192 | 0; //@line 7654
   HEAP32[$571 >> 2] = $88; //@line 7655
   $572 = $ReallocAsyncCtx5 + 196 | 0; //@line 7656
   HEAP32[$572 >> 2] = $90; //@line 7657
   $573 = $ReallocAsyncCtx5 + 200 | 0; //@line 7658
   HEAP32[$573 >> 2] = $92; //@line 7659
   $574 = $ReallocAsyncCtx5 + 204 | 0; //@line 7660
   HEAP32[$574 >> 2] = $94; //@line 7661
   $575 = $ReallocAsyncCtx5 + 208 | 0; //@line 7662
   HEAP32[$575 >> 2] = $96; //@line 7663
   $576 = $ReallocAsyncCtx5 + 212 | 0; //@line 7664
   HEAP32[$576 >> 2] = $98; //@line 7665
   $577 = $ReallocAsyncCtx5 + 216 | 0; //@line 7666
   HEAP32[$577 >> 2] = $100; //@line 7667
   $578 = $ReallocAsyncCtx5 + 220 | 0; //@line 7668
   HEAP32[$578 >> 2] = $102; //@line 7669
   $579 = $ReallocAsyncCtx5 + 224 | 0; //@line 7670
   HEAP32[$579 >> 2] = $104; //@line 7671
   $580 = $ReallocAsyncCtx5 + 228 | 0; //@line 7672
   HEAP32[$580 >> 2] = $106; //@line 7673
   $581 = $ReallocAsyncCtx5 + 232 | 0; //@line 7674
   HEAP32[$581 >> 2] = $108; //@line 7675
   $582 = $ReallocAsyncCtx5 + 236 | 0; //@line 7676
   HEAP8[$582 >> 0] = $110; //@line 7677
   $583 = $ReallocAsyncCtx5 + 237 | 0; //@line 7678
   HEAP8[$583 >> 0] = $112; //@line 7679
   $584 = $ReallocAsyncCtx5 + 240 | 0; //@line 7680
   HEAP32[$584 >> 2] = $114; //@line 7681
   $585 = $ReallocAsyncCtx5 + 244 | 0; //@line 7682
   HEAP32[$585 >> 2] = $116; //@line 7683
   sp = STACKTOP; //@line 7684
   return;
  }
  HEAP8[___async_retval >> 0] = $523 & 1; //@line 7689
  ___async_unwind = 0; //@line 7690
  HEAP32[$ReallocAsyncCtx5 >> 2] = 493; //@line 7691
  $524 = $ReallocAsyncCtx5 + 4 | 0; //@line 7692
  HEAP32[$524 >> 2] = $2; //@line 7693
  $525 = $ReallocAsyncCtx5 + 8 | 0; //@line 7694
  HEAP32[$525 >> 2] = $4; //@line 7695
  $526 = $ReallocAsyncCtx5 + 12 | 0; //@line 7696
  HEAP32[$526 >> 2] = $6; //@line 7697
  $527 = $ReallocAsyncCtx5 + 16 | 0; //@line 7698
  HEAP32[$527 >> 2] = $8; //@line 7699
  $528 = $ReallocAsyncCtx5 + 20 | 0; //@line 7700
  HEAP32[$528 >> 2] = $10; //@line 7701
  $529 = $ReallocAsyncCtx5 + 24 | 0; //@line 7702
  HEAP32[$529 >> 2] = $12; //@line 7703
  $530 = $ReallocAsyncCtx5 + 28 | 0; //@line 7704
  HEAP32[$530 >> 2] = $14; //@line 7705
  $531 = $ReallocAsyncCtx5 + 32 | 0; //@line 7706
  HEAP32[$531 >> 2] = $16; //@line 7707
  $532 = $ReallocAsyncCtx5 + 36 | 0; //@line 7708
  HEAP32[$532 >> 2] = $18; //@line 7709
  $533 = $ReallocAsyncCtx5 + 40 | 0; //@line 7710
  HEAP32[$533 >> 2] = $20; //@line 7711
  $534 = $ReallocAsyncCtx5 + 44 | 0; //@line 7712
  HEAP32[$534 >> 2] = $515; //@line 7713
  $535 = $ReallocAsyncCtx5 + 48 | 0; //@line 7714
  HEAP32[$535 >> 2] = $22; //@line 7715
  $536 = $ReallocAsyncCtx5 + 52 | 0; //@line 7716
  HEAP32[$536 >> 2] = $24; //@line 7717
  $537 = $ReallocAsyncCtx5 + 56 | 0; //@line 7718
  HEAP32[$537 >> 2] = $26; //@line 7719
  $538 = $ReallocAsyncCtx5 + 60 | 0; //@line 7720
  HEAP32[$538 >> 2] = $28; //@line 7721
  $539 = $ReallocAsyncCtx5 + 64 | 0; //@line 7722
  HEAP32[$539 >> 2] = $30; //@line 7723
  $540 = $ReallocAsyncCtx5 + 68 | 0; //@line 7724
  HEAP32[$540 >> 2] = $32; //@line 7725
  $541 = $ReallocAsyncCtx5 + 72 | 0; //@line 7726
  HEAP32[$541 >> 2] = $34; //@line 7727
  $542 = $ReallocAsyncCtx5 + 76 | 0; //@line 7728
  HEAP32[$542 >> 2] = $36; //@line 7729
  $543 = $ReallocAsyncCtx5 + 80 | 0; //@line 7730
  HEAP32[$543 >> 2] = $38; //@line 7731
  $544 = $ReallocAsyncCtx5 + 84 | 0; //@line 7732
  HEAP32[$544 >> 2] = $40; //@line 7733
  $545 = $ReallocAsyncCtx5 + 88 | 0; //@line 7734
  HEAP32[$545 >> 2] = $42; //@line 7735
  $546 = $ReallocAsyncCtx5 + 92 | 0; //@line 7736
  HEAP32[$546 >> 2] = $46; //@line 7737
  $547 = $ReallocAsyncCtx5 + 96 | 0; //@line 7738
  HEAP32[$547 >> 2] = $48; //@line 7739
  $548 = $ReallocAsyncCtx5 + 100 | 0; //@line 7740
  HEAP32[$548 >> 2] = $50; //@line 7741
  $549 = $ReallocAsyncCtx5 + 104 | 0; //@line 7742
  HEAP8[$549 >> 0] = $511; //@line 7743
  $550 = $ReallocAsyncCtx5 + 108 | 0; //@line 7744
  HEAP32[$550 >> 2] = $52; //@line 7745
  $551 = $ReallocAsyncCtx5 + 112 | 0; //@line 7746
  HEAP32[$551 >> 2] = $54; //@line 7747
  $552 = $ReallocAsyncCtx5 + 116 | 0; //@line 7748
  HEAP32[$552 >> 2] = $56; //@line 7749
  $553 = $ReallocAsyncCtx5 + 120 | 0; //@line 7750
  HEAP32[$553 >> 2] = $58; //@line 7751
  $554 = $ReallocAsyncCtx5 + 124 | 0; //@line 7752
  HEAP8[$554 >> 0] = $517; //@line 7753
  $555 = $ReallocAsyncCtx5 + 128 | 0; //@line 7754
  HEAP32[$555 >> 2] = $60; //@line 7755
  $556 = $ReallocAsyncCtx5 + 132 | 0; //@line 7756
  HEAP32[$556 >> 2] = $62; //@line 7757
  $557 = $ReallocAsyncCtx5 + 136 | 0; //@line 7758
  HEAP32[$557 >> 2] = $64; //@line 7759
  $558 = $ReallocAsyncCtx5 + 140 | 0; //@line 7760
  HEAP32[$558 >> 2] = $66; //@line 7761
  $559 = $ReallocAsyncCtx5 + 144 | 0; //@line 7762
  HEAP32[$559 >> 2] = $68; //@line 7763
  $560 = $ReallocAsyncCtx5 + 148 | 0; //@line 7764
  HEAP32[$560 >> 2] = $70; //@line 7765
  $561 = $ReallocAsyncCtx5 + 152 | 0; //@line 7766
  HEAP8[$561 >> 0] = $72; //@line 7767
  $562 = $ReallocAsyncCtx5 + 156 | 0; //@line 7768
  HEAP32[$562 >> 2] = $74; //@line 7769
  $563 = $ReallocAsyncCtx5 + 160 | 0; //@line 7770
  HEAP8[$563 >> 0] = $519; //@line 7771
  $564 = $ReallocAsyncCtx5 + 164 | 0; //@line 7772
  HEAP32[$564 >> 2] = $76; //@line 7773
  $565 = $ReallocAsyncCtx5 + 168 | 0; //@line 7774
  HEAP32[$565 >> 2] = $78; //@line 7775
  $566 = $ReallocAsyncCtx5 + 172 | 0; //@line 7776
  HEAP32[$566 >> 2] = $80; //@line 7777
  $567 = $ReallocAsyncCtx5 + 176 | 0; //@line 7778
  HEAP32[$567 >> 2] = $82; //@line 7779
  $568 = $ReallocAsyncCtx5 + 180 | 0; //@line 7780
  HEAP32[$568 >> 2] = $84; //@line 7781
  $569 = $ReallocAsyncCtx5 + 184 | 0; //@line 7782
  HEAP32[$569 >> 2] = $86; //@line 7783
  $570 = $ReallocAsyncCtx5 + 188 | 0; //@line 7784
  HEAP32[$570 >> 2] = $$0107$be; //@line 7785
  $571 = $ReallocAsyncCtx5 + 192 | 0; //@line 7786
  HEAP32[$571 >> 2] = $88; //@line 7787
  $572 = $ReallocAsyncCtx5 + 196 | 0; //@line 7788
  HEAP32[$572 >> 2] = $90; //@line 7789
  $573 = $ReallocAsyncCtx5 + 200 | 0; //@line 7790
  HEAP32[$573 >> 2] = $92; //@line 7791
  $574 = $ReallocAsyncCtx5 + 204 | 0; //@line 7792
  HEAP32[$574 >> 2] = $94; //@line 7793
  $575 = $ReallocAsyncCtx5 + 208 | 0; //@line 7794
  HEAP32[$575 >> 2] = $96; //@line 7795
  $576 = $ReallocAsyncCtx5 + 212 | 0; //@line 7796
  HEAP32[$576 >> 2] = $98; //@line 7797
  $577 = $ReallocAsyncCtx5 + 216 | 0; //@line 7798
  HEAP32[$577 >> 2] = $100; //@line 7799
  $578 = $ReallocAsyncCtx5 + 220 | 0; //@line 7800
  HEAP32[$578 >> 2] = $102; //@line 7801
  $579 = $ReallocAsyncCtx5 + 224 | 0; //@line 7802
  HEAP32[$579 >> 2] = $104; //@line 7803
  $580 = $ReallocAsyncCtx5 + 228 | 0; //@line 7804
  HEAP32[$580 >> 2] = $106; //@line 7805
  $581 = $ReallocAsyncCtx5 + 232 | 0; //@line 7806
  HEAP32[$581 >> 2] = $108; //@line 7807
  $582 = $ReallocAsyncCtx5 + 236 | 0; //@line 7808
  HEAP8[$582 >> 0] = $110; //@line 7809
  $583 = $ReallocAsyncCtx5 + 237 | 0; //@line 7810
  HEAP8[$583 >> 0] = $112; //@line 7811
  $584 = $ReallocAsyncCtx5 + 240 | 0; //@line 7812
  HEAP32[$584 >> 2] = $114; //@line 7813
  $585 = $ReallocAsyncCtx5 + 244 | 0; //@line 7814
  HEAP32[$585 >> 2] = $116; //@line 7815
  sp = STACKTOP; //@line 7816
  return;
 } else if ((label | 0) == 30) {
  $590 = HEAP8[$16 + ($119 & 255) >> 0] | 0; //@line 7823
  $603 = $$0$be + 5 << 24 >> 24; //@line 7836
  $610 = (HEAPU8[$16 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$16 + ($$0$be + 2 & 255) >> 0] | HEAPU8[$16 + ($$0$be + 4 & 255) >> 0] << 16) * 100 | 0; //@line 7843
  $613 = HEAP32[(HEAP32[$36 >> 2] | 0) + 48 >> 2] | 0; //@line 7846
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(232) | 0; //@line 7847
  $614 = FUNCTION_TABLE_iiii[$613 & 31]($88, $590, $610) | 0; //@line 7848
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 494; //@line 7851
   $615 = $ReallocAsyncCtx6 + 4 | 0; //@line 7852
   HEAP32[$615 >> 2] = $2; //@line 7853
   $616 = $ReallocAsyncCtx6 + 8 | 0; //@line 7854
   HEAP32[$616 >> 2] = $4; //@line 7855
   $617 = $ReallocAsyncCtx6 + 12 | 0; //@line 7856
   HEAP32[$617 >> 2] = $6; //@line 7857
   $618 = $ReallocAsyncCtx6 + 16 | 0; //@line 7858
   HEAP32[$618 >> 2] = $8; //@line 7859
   $619 = $ReallocAsyncCtx6 + 20 | 0; //@line 7860
   HEAP32[$619 >> 2] = $10; //@line 7861
   $620 = $ReallocAsyncCtx6 + 24 | 0; //@line 7862
   HEAP32[$620 >> 2] = $12; //@line 7863
   $621 = $ReallocAsyncCtx6 + 28 | 0; //@line 7864
   HEAP32[$621 >> 2] = $14; //@line 7865
   $622 = $ReallocAsyncCtx6 + 32 | 0; //@line 7866
   HEAP32[$622 >> 2] = $16; //@line 7867
   $623 = $ReallocAsyncCtx6 + 36 | 0; //@line 7868
   HEAP32[$623 >> 2] = $18; //@line 7869
   $624 = $ReallocAsyncCtx6 + 40 | 0; //@line 7870
   HEAP32[$624 >> 2] = $20; //@line 7871
   $625 = $ReallocAsyncCtx6 + 44 | 0; //@line 7872
   HEAP8[$625 >> 0] = $603; //@line 7873
   $626 = $ReallocAsyncCtx6 + 48 | 0; //@line 7874
   HEAP32[$626 >> 2] = $22; //@line 7875
   $627 = $ReallocAsyncCtx6 + 52 | 0; //@line 7876
   HEAP32[$627 >> 2] = $24; //@line 7877
   $628 = $ReallocAsyncCtx6 + 56 | 0; //@line 7878
   HEAP32[$628 >> 2] = $26; //@line 7879
   $629 = $ReallocAsyncCtx6 + 60 | 0; //@line 7880
   HEAP32[$629 >> 2] = $28; //@line 7881
   $630 = $ReallocAsyncCtx6 + 64 | 0; //@line 7882
   HEAP32[$630 >> 2] = $30; //@line 7883
   $631 = $ReallocAsyncCtx6 + 68 | 0; //@line 7884
   HEAP32[$631 >> 2] = $32; //@line 7885
   $632 = $ReallocAsyncCtx6 + 72 | 0; //@line 7886
   HEAP32[$632 >> 2] = $34; //@line 7887
   $633 = $ReallocAsyncCtx6 + 76 | 0; //@line 7888
   HEAP32[$633 >> 2] = $36; //@line 7889
   $634 = $ReallocAsyncCtx6 + 80 | 0; //@line 7890
   HEAP32[$634 >> 2] = $38; //@line 7891
   $635 = $ReallocAsyncCtx6 + 84 | 0; //@line 7892
   HEAP32[$635 >> 2] = $40; //@line 7893
   $636 = $ReallocAsyncCtx6 + 88 | 0; //@line 7894
   HEAP32[$636 >> 2] = $42; //@line 7895
   $637 = $ReallocAsyncCtx6 + 92 | 0; //@line 7896
   HEAP32[$637 >> 2] = $46; //@line 7897
   $638 = $ReallocAsyncCtx6 + 96 | 0; //@line 7898
   HEAP32[$638 >> 2] = $48; //@line 7899
   $639 = $ReallocAsyncCtx6 + 100 | 0; //@line 7900
   HEAP32[$639 >> 2] = $50; //@line 7901
   $640 = $ReallocAsyncCtx6 + 104 | 0; //@line 7902
   HEAP32[$640 >> 2] = $52; //@line 7903
   $641 = $ReallocAsyncCtx6 + 108 | 0; //@line 7904
   HEAP32[$641 >> 2] = $54; //@line 7905
   $642 = $ReallocAsyncCtx6 + 112 | 0; //@line 7906
   HEAP32[$642 >> 2] = $56; //@line 7907
   $643 = $ReallocAsyncCtx6 + 116 | 0; //@line 7908
   HEAP32[$643 >> 2] = $58; //@line 7909
   $644 = $ReallocAsyncCtx6 + 120 | 0; //@line 7910
   HEAP32[$644 >> 2] = $60; //@line 7911
   $645 = $ReallocAsyncCtx6 + 124 | 0; //@line 7912
   HEAP32[$645 >> 2] = $62; //@line 7913
   $646 = $ReallocAsyncCtx6 + 128 | 0; //@line 7914
   HEAP32[$646 >> 2] = $64; //@line 7915
   $647 = $ReallocAsyncCtx6 + 132 | 0; //@line 7916
   HEAP32[$647 >> 2] = $66; //@line 7917
   $648 = $ReallocAsyncCtx6 + 136 | 0; //@line 7918
   HEAP32[$648 >> 2] = $68; //@line 7919
   $649 = $ReallocAsyncCtx6 + 140 | 0; //@line 7920
   HEAP32[$649 >> 2] = $70; //@line 7921
   $650 = $ReallocAsyncCtx6 + 144 | 0; //@line 7922
   HEAP8[$650 >> 0] = $72; //@line 7923
   $651 = $ReallocAsyncCtx6 + 148 | 0; //@line 7924
   HEAP32[$651 >> 2] = $74; //@line 7925
   $652 = $ReallocAsyncCtx6 + 152 | 0; //@line 7926
   HEAP32[$652 >> 2] = $76; //@line 7927
   $653 = $ReallocAsyncCtx6 + 156 | 0; //@line 7928
   HEAP32[$653 >> 2] = $78; //@line 7929
   $654 = $ReallocAsyncCtx6 + 160 | 0; //@line 7930
   HEAP32[$654 >> 2] = $80; //@line 7931
   $655 = $ReallocAsyncCtx6 + 164 | 0; //@line 7932
   HEAP32[$655 >> 2] = $82; //@line 7933
   $656 = $ReallocAsyncCtx6 + 168 | 0; //@line 7934
   HEAP32[$656 >> 2] = $84; //@line 7935
   $657 = $ReallocAsyncCtx6 + 172 | 0; //@line 7936
   HEAP32[$657 >> 2] = $86; //@line 7937
   $658 = $ReallocAsyncCtx6 + 176 | 0; //@line 7938
   HEAP32[$658 >> 2] = $88; //@line 7939
   $659 = $ReallocAsyncCtx6 + 180 | 0; //@line 7940
   HEAP32[$659 >> 2] = $90; //@line 7941
   $660 = $ReallocAsyncCtx6 + 184 | 0; //@line 7942
   HEAP32[$660 >> 2] = $92; //@line 7943
   $661 = $ReallocAsyncCtx6 + 188 | 0; //@line 7944
   HEAP32[$661 >> 2] = $94; //@line 7945
   $662 = $ReallocAsyncCtx6 + 192 | 0; //@line 7946
   HEAP32[$662 >> 2] = $96; //@line 7947
   $663 = $ReallocAsyncCtx6 + 196 | 0; //@line 7948
   HEAP32[$663 >> 2] = $98; //@line 7949
   $664 = $ReallocAsyncCtx6 + 200 | 0; //@line 7950
   HEAP32[$664 >> 2] = $100; //@line 7951
   $665 = $ReallocAsyncCtx6 + 204 | 0; //@line 7952
   HEAP32[$665 >> 2] = $102; //@line 7953
   $666 = $ReallocAsyncCtx6 + 208 | 0; //@line 7954
   HEAP32[$666 >> 2] = $104; //@line 7955
   $667 = $ReallocAsyncCtx6 + 212 | 0; //@line 7956
   HEAP32[$667 >> 2] = $106; //@line 7957
   $668 = $ReallocAsyncCtx6 + 216 | 0; //@line 7958
   HEAP32[$668 >> 2] = $108; //@line 7959
   $669 = $ReallocAsyncCtx6 + 220 | 0; //@line 7960
   HEAP8[$669 >> 0] = $110; //@line 7961
   $670 = $ReallocAsyncCtx6 + 221 | 0; //@line 7962
   HEAP8[$670 >> 0] = $112; //@line 7963
   $671 = $ReallocAsyncCtx6 + 224 | 0; //@line 7964
   HEAP32[$671 >> 2] = $114; //@line 7965
   $672 = $ReallocAsyncCtx6 + 228 | 0; //@line 7966
   HEAP32[$672 >> 2] = $116; //@line 7967
   sp = STACKTOP; //@line 7968
   return;
  }
  HEAP8[___async_retval >> 0] = $614; //@line 7972
  ___async_unwind = 0; //@line 7973
  HEAP32[$ReallocAsyncCtx6 >> 2] = 494; //@line 7974
  $615 = $ReallocAsyncCtx6 + 4 | 0; //@line 7975
  HEAP32[$615 >> 2] = $2; //@line 7976
  $616 = $ReallocAsyncCtx6 + 8 | 0; //@line 7977
  HEAP32[$616 >> 2] = $4; //@line 7978
  $617 = $ReallocAsyncCtx6 + 12 | 0; //@line 7979
  HEAP32[$617 >> 2] = $6; //@line 7980
  $618 = $ReallocAsyncCtx6 + 16 | 0; //@line 7981
  HEAP32[$618 >> 2] = $8; //@line 7982
  $619 = $ReallocAsyncCtx6 + 20 | 0; //@line 7983
  HEAP32[$619 >> 2] = $10; //@line 7984
  $620 = $ReallocAsyncCtx6 + 24 | 0; //@line 7985
  HEAP32[$620 >> 2] = $12; //@line 7986
  $621 = $ReallocAsyncCtx6 + 28 | 0; //@line 7987
  HEAP32[$621 >> 2] = $14; //@line 7988
  $622 = $ReallocAsyncCtx6 + 32 | 0; //@line 7989
  HEAP32[$622 >> 2] = $16; //@line 7990
  $623 = $ReallocAsyncCtx6 + 36 | 0; //@line 7991
  HEAP32[$623 >> 2] = $18; //@line 7992
  $624 = $ReallocAsyncCtx6 + 40 | 0; //@line 7993
  HEAP32[$624 >> 2] = $20; //@line 7994
  $625 = $ReallocAsyncCtx6 + 44 | 0; //@line 7995
  HEAP8[$625 >> 0] = $603; //@line 7996
  $626 = $ReallocAsyncCtx6 + 48 | 0; //@line 7997
  HEAP32[$626 >> 2] = $22; //@line 7998
  $627 = $ReallocAsyncCtx6 + 52 | 0; //@line 7999
  HEAP32[$627 >> 2] = $24; //@line 8000
  $628 = $ReallocAsyncCtx6 + 56 | 0; //@line 8001
  HEAP32[$628 >> 2] = $26; //@line 8002
  $629 = $ReallocAsyncCtx6 + 60 | 0; //@line 8003
  HEAP32[$629 >> 2] = $28; //@line 8004
  $630 = $ReallocAsyncCtx6 + 64 | 0; //@line 8005
  HEAP32[$630 >> 2] = $30; //@line 8006
  $631 = $ReallocAsyncCtx6 + 68 | 0; //@line 8007
  HEAP32[$631 >> 2] = $32; //@line 8008
  $632 = $ReallocAsyncCtx6 + 72 | 0; //@line 8009
  HEAP32[$632 >> 2] = $34; //@line 8010
  $633 = $ReallocAsyncCtx6 + 76 | 0; //@line 8011
  HEAP32[$633 >> 2] = $36; //@line 8012
  $634 = $ReallocAsyncCtx6 + 80 | 0; //@line 8013
  HEAP32[$634 >> 2] = $38; //@line 8014
  $635 = $ReallocAsyncCtx6 + 84 | 0; //@line 8015
  HEAP32[$635 >> 2] = $40; //@line 8016
  $636 = $ReallocAsyncCtx6 + 88 | 0; //@line 8017
  HEAP32[$636 >> 2] = $42; //@line 8018
  $637 = $ReallocAsyncCtx6 + 92 | 0; //@line 8019
  HEAP32[$637 >> 2] = $46; //@line 8020
  $638 = $ReallocAsyncCtx6 + 96 | 0; //@line 8021
  HEAP32[$638 >> 2] = $48; //@line 8022
  $639 = $ReallocAsyncCtx6 + 100 | 0; //@line 8023
  HEAP32[$639 >> 2] = $50; //@line 8024
  $640 = $ReallocAsyncCtx6 + 104 | 0; //@line 8025
  HEAP32[$640 >> 2] = $52; //@line 8026
  $641 = $ReallocAsyncCtx6 + 108 | 0; //@line 8027
  HEAP32[$641 >> 2] = $54; //@line 8028
  $642 = $ReallocAsyncCtx6 + 112 | 0; //@line 8029
  HEAP32[$642 >> 2] = $56; //@line 8030
  $643 = $ReallocAsyncCtx6 + 116 | 0; //@line 8031
  HEAP32[$643 >> 2] = $58; //@line 8032
  $644 = $ReallocAsyncCtx6 + 120 | 0; //@line 8033
  HEAP32[$644 >> 2] = $60; //@line 8034
  $645 = $ReallocAsyncCtx6 + 124 | 0; //@line 8035
  HEAP32[$645 >> 2] = $62; //@line 8036
  $646 = $ReallocAsyncCtx6 + 128 | 0; //@line 8037
  HEAP32[$646 >> 2] = $64; //@line 8038
  $647 = $ReallocAsyncCtx6 + 132 | 0; //@line 8039
  HEAP32[$647 >> 2] = $66; //@line 8040
  $648 = $ReallocAsyncCtx6 + 136 | 0; //@line 8041
  HEAP32[$648 >> 2] = $68; //@line 8042
  $649 = $ReallocAsyncCtx6 + 140 | 0; //@line 8043
  HEAP32[$649 >> 2] = $70; //@line 8044
  $650 = $ReallocAsyncCtx6 + 144 | 0; //@line 8045
  HEAP8[$650 >> 0] = $72; //@line 8046
  $651 = $ReallocAsyncCtx6 + 148 | 0; //@line 8047
  HEAP32[$651 >> 2] = $74; //@line 8048
  $652 = $ReallocAsyncCtx6 + 152 | 0; //@line 8049
  HEAP32[$652 >> 2] = $76; //@line 8050
  $653 = $ReallocAsyncCtx6 + 156 | 0; //@line 8051
  HEAP32[$653 >> 2] = $78; //@line 8052
  $654 = $ReallocAsyncCtx6 + 160 | 0; //@line 8053
  HEAP32[$654 >> 2] = $80; //@line 8054
  $655 = $ReallocAsyncCtx6 + 164 | 0; //@line 8055
  HEAP32[$655 >> 2] = $82; //@line 8056
  $656 = $ReallocAsyncCtx6 + 168 | 0; //@line 8057
  HEAP32[$656 >> 2] = $84; //@line 8058
  $657 = $ReallocAsyncCtx6 + 172 | 0; //@line 8059
  HEAP32[$657 >> 2] = $86; //@line 8060
  $658 = $ReallocAsyncCtx6 + 176 | 0; //@line 8061
  HEAP32[$658 >> 2] = $88; //@line 8062
  $659 = $ReallocAsyncCtx6 + 180 | 0; //@line 8063
  HEAP32[$659 >> 2] = $90; //@line 8064
  $660 = $ReallocAsyncCtx6 + 184 | 0; //@line 8065
  HEAP32[$660 >> 2] = $92; //@line 8066
  $661 = $ReallocAsyncCtx6 + 188 | 0; //@line 8067
  HEAP32[$661 >> 2] = $94; //@line 8068
  $662 = $ReallocAsyncCtx6 + 192 | 0; //@line 8069
  HEAP32[$662 >> 2] = $96; //@line 8070
  $663 = $ReallocAsyncCtx6 + 196 | 0; //@line 8071
  HEAP32[$663 >> 2] = $98; //@line 8072
  $664 = $ReallocAsyncCtx6 + 200 | 0; //@line 8073
  HEAP32[$664 >> 2] = $100; //@line 8074
  $665 = $ReallocAsyncCtx6 + 204 | 0; //@line 8075
  HEAP32[$665 >> 2] = $102; //@line 8076
  $666 = $ReallocAsyncCtx6 + 208 | 0; //@line 8077
  HEAP32[$666 >> 2] = $104; //@line 8078
  $667 = $ReallocAsyncCtx6 + 212 | 0; //@line 8079
  HEAP32[$667 >> 2] = $106; //@line 8080
  $668 = $ReallocAsyncCtx6 + 216 | 0; //@line 8081
  HEAP32[$668 >> 2] = $108; //@line 8082
  $669 = $ReallocAsyncCtx6 + 220 | 0; //@line 8083
  HEAP8[$669 >> 0] = $110; //@line 8084
  $670 = $ReallocAsyncCtx6 + 221 | 0; //@line 8085
  HEAP8[$670 >> 0] = $112; //@line 8086
  $671 = $ReallocAsyncCtx6 + 224 | 0; //@line 8087
  HEAP32[$671 >> 2] = $114; //@line 8088
  $672 = $ReallocAsyncCtx6 + 228 | 0; //@line 8089
  HEAP32[$672 >> 2] = $116; //@line 8090
  sp = STACKTOP; //@line 8091
  return;
 } else if ((label | 0) == 33) {
  HEAP32[___async_retval >> 2] = $$0107$be; //@line 8096
  return;
 }
}
function __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_209($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0107$be = 0, $$0111 = 0, $$reg2mem$0 = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $119 = 0, $12 = 0, $130 = 0, $131 = 0, $14 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $204 = 0, $207 = 0, $214 = 0, $215 = 0, $22 = 0, $221 = 0, $24 = 0, $240 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $311 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $377 = 0, $378 = 0, $38 = 0, $392 = 0, $4 = 0, $40 = 0, $413 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $48 = 0, $481 = 0, $485 = 0, $489 = 0, $494 = 0, $495 = 0, $499 = 0, $50 = 0, $503 = 0, $505 = 0, $507 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $578 = 0, $58 = 0, $591 = 0, $598 = 0, $6 = 0, $60 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $98 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4186
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4188
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4190
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4192
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4194
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 4196
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 4198
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 4200
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 4202
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 4204
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 4206
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 4208
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 4210
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 4212
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 4214
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 4216
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 4218
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 4220
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 4222
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 4224
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 4226
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 4228
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 4230
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 4232
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 4234
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 4236
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 4238
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 4240
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 4242
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 4244
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 4246
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 4248
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 4250
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 4252
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 4254
 $70 = HEAP8[$0 + 140 >> 0] | 0; //@line 4256
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 4258
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 4260
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 4262
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 4264
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 4266
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 4268
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 4270
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 4272
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 4274
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 4276
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 4278
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 4280
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 4284
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 4286
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 4288
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 4290
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 4292
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 4294
 $110 = HEAP8[$0 + 220 >> 0] | 0; //@line 4296
 $112 = HEAP8[$0 + 221 >> 0] | 0; //@line 4298
 $114 = HEAP32[$0 + 224 >> 2] | 0; //@line 4300
 $116 = HEAP32[$0 + 228 >> 2] | 0; //@line 4302
 $$0111 = HEAP8[___async_retval >> 0] | 0; //@line 4305
 $$reg2mem$0 = HEAP8[$0 + 192 >> 0] | 0; //@line 4305
 L2 : while (1) {
  $377 = HEAP8[$76 >> 0] | 0; //@line 4310
  $378 = $377 & 255; //@line 4311
  if ((128 - (HEAPU8[$64 >> 0] | 0) - $378 | 0) > 2) {
   HEAP8[$102 + 4 + $378 >> 0] = 6; //@line 4317
   HEAP8[($377 + 1 & 255) + ($102 + 4) >> 0] = $$0111; //@line 4321
   HEAP8[$76 >> 0] = $377 + 3 << 24 >> 24; //@line 4323
   HEAP8[($377 + 2 & 255) + ($102 + 4) >> 0] = $70; //@line 4326
   HEAP8[$104 >> 0] = 1; //@line 4327
   $$0$be = $$reg2mem$0; //@line 4328
   $$0107$be = 0; //@line 4328
  } else {
   $$0$be = $$reg2mem$0; //@line 4330
   $$0107$be = -1010; //@line 4330
  }
  L6 : while (1) {
   if (($$0$be & 255) >= ($110 & 255)) {
    label = 31; //@line 4335
    break L2;
   }
   $119 = $$0$be + 1 << 24 >> 24; //@line 4339
   switch (HEAP8[$16 + ($$0$be & 255) >> 0] | 0) {
   case 3:
    {
     label = 4; //@line 4344
     break L2;
     break;
    }
   case 5:
    {
     label = 9; //@line 4349
     break L2;
     break;
    }
   case 7:
    {
     label = 19; //@line 4354
     break L2;
     break;
    }
   case 9:
    {
     label = 25; //@line 4359
     break L2;
     break;
    }
   case 10:
    {
     label = 28; //@line 4364
     break L2;
     break;
    }
   case 6:
    {
     break L6;
     break;
    }
   case 2:
    {
     HEAP32[$66 >> 2] = 0; //@line 4373
     HEAP8[$68 >> 0] = HEAP8[$16 + ($119 & 255) >> 0] | 0; //@line 4378
     HEAP8[$82 >> 0] = HEAP8[$16 + ($$0$be + 2 & 255) >> 0] | 0; //@line 4383
     $$0$be = $$0$be + 3 << 24 >> 24; //@line 4384
     continue L6;
     break;
    }
   case 4:
    {
     $204 = $$0$be + 2 << 24 >> 24; //@line 4389
     $207 = HEAP8[$16 + ($119 & 255) >> 0] | 0; //@line 4392
     HEAP8[$14 >> 0] = $207; //@line 4393
     HEAP16[$90 >> 1] = 1 << ($207 & 255); //@line 4397
     $214 = HEAP8[$76 >> 0] | 0; //@line 4401
     $215 = $214 & 255; //@line 4402
     if ((128 - (HEAPU8[$64 >> 0] | 0) | 0) <= ($215 | 0)) {
      $$0$be = $204; //@line 4405
      $$0107$be = -1010; //@line 4405
      continue L6;
     }
     HEAP8[$76 >> 0] = $214 + 1 << 24 >> 24; //@line 4410
     HEAP8[$102 + 4 + $215 >> 0] = 4; //@line 4411
     HEAP8[$104 >> 0] = 1; //@line 4412
     $$0$be = $204; //@line 4413
     $$0107$be = 0; //@line 4413
     continue L6;
     break;
    }
   case 8:
    {
     $481 = $$0$be + 2 << 24 >> 24; //@line 4418
     $485 = HEAP8[$16 + ($119 & 255) >> 0] & 15; //@line 4422
     $489 = ($485 + ($485 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 4427
     HEAP32[$32 >> 2] = $489; //@line 4428
     HEAP32[$2 >> 2] = $489 + 1e3; //@line 4430
     $494 = HEAP8[$76 >> 0] | 0; //@line 4434
     $495 = $494 & 255; //@line 4435
     if ((128 - (HEAPU8[$64 >> 0] | 0) | 0) <= ($495 | 0)) {
      $$0$be = $481; //@line 4438
      $$0107$be = -1010; //@line 4438
      continue L6;
     }
     HEAP8[$76 >> 0] = $494 + 1 << 24 >> 24; //@line 4443
     HEAP8[$102 + 4 + $495 >> 0] = 8; //@line 4444
     HEAP8[$48 >> 0] = 1; //@line 4445
     HEAP8[$104 >> 0] = 1; //@line 4446
     $$0$be = $481; //@line 4447
     $$0107$be = 0; //@line 4447
     continue L6;
     break;
    }
   default:
    {
     $$0$be = $119; //@line 4452
     $$0107$be = -1013; //@line 4452
     continue L6;
    }
   }
  }
  $311 = HEAP32[$84 >> 2] | 0; //@line 4457
  if (!$311) {
   $$0111 = -1; //@line 4460
   $$reg2mem$0 = $119; //@line 4460
  } else {
   label = 13; //@line 4462
   break;
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$42 >> 0] = 0; //@line 4467
  HEAP8[$44 >> 0] = 0; //@line 4468
  HEAP8[$4 >> 0] = 0; //@line 4469
  HEAP8[$40 >> 0] = 0; //@line 4470
  $130 = $119 & 255; //@line 4471
  $131 = $130 + -1 | 0; //@line 4472
  HEAP32[$98 >> 2] = $16 + $131; //@line 4474
  HEAP8[$92 >> 0] = $24 - $131; //@line 4477
  HEAP8[$106 >> 0] = HEAP8[$12 >> 0] | 0; //@line 4479
  HEAP8[$8 >> 0] = HEAP8[$18 >> 0] | 0; //@line 4481
  HEAP8[$22 >> 0] = HEAP8[$30 >> 0] | 0; //@line 4483
  HEAP8[$62 >> 0] = HEAP8[$50 >> 0] | 0; //@line 4485
  HEAP8[$78 >> 0] = HEAP8[$56 >> 0] | 0; //@line 4487
  $142 = HEAP32[(HEAP32[$80 >> 2] | 0) + 36 >> 2] | 0; //@line 4490
  $ReallocAsyncCtx = _emscripten_realloc_async_context(240) | 0; //@line 4491
  $143 = FUNCTION_TABLE_iiiiiii[$142 & 3]($86, $34, $42, $44, $4, $40) | 0; //@line 4492
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 489; //@line 4495
   $144 = $ReallocAsyncCtx + 4 | 0; //@line 4496
   HEAP8[$144 >> 0] = $112; //@line 4497
   $145 = $ReallocAsyncCtx + 8 | 0; //@line 4498
   HEAP32[$145 >> 2] = $4; //@line 4499
   $146 = $ReallocAsyncCtx + 12 | 0; //@line 4500
   HEAP32[$146 >> 2] = $6; //@line 4501
   $147 = $ReallocAsyncCtx + 16 | 0; //@line 4502
   HEAP32[$147 >> 2] = $8; //@line 4503
   $148 = $ReallocAsyncCtx + 20 | 0; //@line 4504
   HEAP32[$148 >> 2] = $10; //@line 4505
   $149 = $ReallocAsyncCtx + 24 | 0; //@line 4506
   HEAP32[$149 >> 2] = $116; //@line 4507
   $150 = $ReallocAsyncCtx + 28 | 0; //@line 4508
   HEAP32[$150 >> 2] = $2; //@line 4509
   $151 = $ReallocAsyncCtx + 32 | 0; //@line 4510
   HEAP32[$151 >> 2] = $114; //@line 4511
   $152 = $ReallocAsyncCtx + 36 | 0; //@line 4512
   HEAP32[$152 >> 2] = $18; //@line 4513
   $153 = $ReallocAsyncCtx + 40 | 0; //@line 4514
   HEAP32[$153 >> 2] = $20; //@line 4515
   $154 = $ReallocAsyncCtx + 44 | 0; //@line 4516
   HEAP32[$154 >> 2] = $22; //@line 4517
   $155 = $ReallocAsyncCtx + 48 | 0; //@line 4518
   HEAP32[$155 >> 2] = $24; //@line 4519
   $156 = $ReallocAsyncCtx + 52 | 0; //@line 4520
   HEAP32[$156 >> 2] = $26; //@line 4521
   $157 = $ReallocAsyncCtx + 56 | 0; //@line 4522
   HEAP32[$157 >> 2] = $28; //@line 4523
   $158 = $ReallocAsyncCtx + 60 | 0; //@line 4524
   HEAP32[$158 >> 2] = $30; //@line 4525
   $159 = $ReallocAsyncCtx + 64 | 0; //@line 4526
   HEAP32[$159 >> 2] = $32; //@line 4527
   $160 = $ReallocAsyncCtx + 68 | 0; //@line 4528
   HEAP32[$160 >> 2] = $34; //@line 4529
   $161 = $ReallocAsyncCtx + 72 | 0; //@line 4530
   HEAP32[$161 >> 2] = $36; //@line 4531
   $162 = $ReallocAsyncCtx + 76 | 0; //@line 4532
   HEAP32[$162 >> 2] = $38; //@line 4533
   $163 = $ReallocAsyncCtx + 80 | 0; //@line 4534
   HEAP32[$163 >> 2] = $40; //@line 4535
   $164 = $ReallocAsyncCtx + 84 | 0; //@line 4536
   HEAP32[$164 >> 2] = $42; //@line 4537
   $165 = $ReallocAsyncCtx + 88 | 0; //@line 4538
   HEAP32[$165 >> 2] = $44; //@line 4539
   $166 = $ReallocAsyncCtx + 92 | 0; //@line 4540
   HEAP32[$166 >> 2] = $46; //@line 4541
   $167 = $ReallocAsyncCtx + 96 | 0; //@line 4542
   HEAP32[$167 >> 2] = $48; //@line 4543
   $168 = $ReallocAsyncCtx + 100 | 0; //@line 4544
   HEAP32[$168 >> 2] = $50; //@line 4545
   $169 = $ReallocAsyncCtx + 104 | 0; //@line 4546
   HEAP32[$169 >> 2] = $52; //@line 4547
   $170 = $ReallocAsyncCtx + 108 | 0; //@line 4548
   HEAP32[$170 >> 2] = $54; //@line 4549
   $171 = $ReallocAsyncCtx + 112 | 0; //@line 4550
   HEAP32[$171 >> 2] = $56; //@line 4551
   $172 = $ReallocAsyncCtx + 116 | 0; //@line 4552
   HEAP32[$172 >> 2] = $58; //@line 4553
   $173 = $ReallocAsyncCtx + 120 | 0; //@line 4554
   HEAP32[$173 >> 2] = $60; //@line 4555
   $174 = $ReallocAsyncCtx + 124 | 0; //@line 4556
   HEAP32[$174 >> 2] = $62; //@line 4557
   $175 = $ReallocAsyncCtx + 128 | 0; //@line 4558
   HEAP32[$175 >> 2] = $64; //@line 4559
   $176 = $ReallocAsyncCtx + 132 | 0; //@line 4560
   HEAP32[$176 >> 2] = $66; //@line 4561
   $177 = $ReallocAsyncCtx + 136 | 0; //@line 4562
   HEAP32[$177 >> 2] = $68; //@line 4563
   $178 = $ReallocAsyncCtx + 140 | 0; //@line 4564
   HEAP8[$178 >> 0] = $70; //@line 4565
   $179 = $ReallocAsyncCtx + 144 | 0; //@line 4566
   HEAP32[$179 >> 2] = $72; //@line 4567
   $180 = $ReallocAsyncCtx + 148 | 0; //@line 4568
   HEAP32[$180 >> 2] = $74; //@line 4569
   $181 = $ReallocAsyncCtx + 152 | 0; //@line 4570
   HEAP32[$181 >> 2] = $76; //@line 4571
   $182 = $ReallocAsyncCtx + 156 | 0; //@line 4572
   HEAP32[$182 >> 2] = $78; //@line 4573
   $183 = $ReallocAsyncCtx + 160 | 0; //@line 4574
   HEAP32[$183 >> 2] = $80; //@line 4575
   $184 = $ReallocAsyncCtx + 164 | 0; //@line 4576
   HEAP32[$184 >> 2] = $130; //@line 4577
   $185 = $ReallocAsyncCtx + 168 | 0; //@line 4578
   HEAP32[$185 >> 2] = $82; //@line 4579
   $186 = $ReallocAsyncCtx + 172 | 0; //@line 4580
   HEAP32[$186 >> 2] = $84; //@line 4581
   $187 = $ReallocAsyncCtx + 176 | 0; //@line 4582
   HEAP32[$187 >> 2] = $$0107$be; //@line 4583
   $188 = $ReallocAsyncCtx + 180 | 0; //@line 4584
   HEAP32[$188 >> 2] = $86; //@line 4585
   $189 = $ReallocAsyncCtx + 184 | 0; //@line 4586
   HEAP32[$189 >> 2] = $88; //@line 4587
   $190 = $ReallocAsyncCtx + 188 | 0; //@line 4588
   HEAP32[$190 >> 2] = $90; //@line 4589
   $191 = $ReallocAsyncCtx + 192 | 0; //@line 4590
   HEAP32[$191 >> 2] = $92; //@line 4591
   $192 = $ReallocAsyncCtx + 196 | 0; //@line 4592
   HEAP32[$192 >> 2] = $94; //@line 4593
   $193 = $ReallocAsyncCtx + 200 | 0; //@line 4594
   HEAP32[$193 >> 2] = $98; //@line 4595
   $194 = $ReallocAsyncCtx + 204 | 0; //@line 4596
   HEAP32[$194 >> 2] = $100; //@line 4597
   $195 = $ReallocAsyncCtx + 208 | 0; //@line 4598
   HEAP32[$195 >> 2] = $102; //@line 4599
   $196 = $ReallocAsyncCtx + 212 | 0; //@line 4600
   HEAP32[$196 >> 2] = $104; //@line 4601
   $197 = $ReallocAsyncCtx + 216 | 0; //@line 4602
   HEAP32[$197 >> 2] = $106; //@line 4603
   $198 = $ReallocAsyncCtx + 220 | 0; //@line 4604
   HEAP32[$198 >> 2] = $108; //@line 4605
   $199 = $ReallocAsyncCtx + 224 | 0; //@line 4606
   HEAP8[$199 >> 0] = $110; //@line 4607
   $200 = $ReallocAsyncCtx + 228 | 0; //@line 4608
   HEAP32[$200 >> 2] = $14; //@line 4609
   $201 = $ReallocAsyncCtx + 232 | 0; //@line 4610
   HEAP32[$201 >> 2] = $16; //@line 4611
   $202 = $ReallocAsyncCtx + 236 | 0; //@line 4612
   HEAP32[$202 >> 2] = $12; //@line 4613
   sp = STACKTOP; //@line 4614
   return;
  }
  HEAP8[___async_retval >> 0] = $143; //@line 4618
  ___async_unwind = 0; //@line 4619
  HEAP32[$ReallocAsyncCtx >> 2] = 489; //@line 4620
  $144 = $ReallocAsyncCtx + 4 | 0; //@line 4621
  HEAP8[$144 >> 0] = $112; //@line 4622
  $145 = $ReallocAsyncCtx + 8 | 0; //@line 4623
  HEAP32[$145 >> 2] = $4; //@line 4624
  $146 = $ReallocAsyncCtx + 12 | 0; //@line 4625
  HEAP32[$146 >> 2] = $6; //@line 4626
  $147 = $ReallocAsyncCtx + 16 | 0; //@line 4627
  HEAP32[$147 >> 2] = $8; //@line 4628
  $148 = $ReallocAsyncCtx + 20 | 0; //@line 4629
  HEAP32[$148 >> 2] = $10; //@line 4630
  $149 = $ReallocAsyncCtx + 24 | 0; //@line 4631
  HEAP32[$149 >> 2] = $116; //@line 4632
  $150 = $ReallocAsyncCtx + 28 | 0; //@line 4633
  HEAP32[$150 >> 2] = $2; //@line 4634
  $151 = $ReallocAsyncCtx + 32 | 0; //@line 4635
  HEAP32[$151 >> 2] = $114; //@line 4636
  $152 = $ReallocAsyncCtx + 36 | 0; //@line 4637
  HEAP32[$152 >> 2] = $18; //@line 4638
  $153 = $ReallocAsyncCtx + 40 | 0; //@line 4639
  HEAP32[$153 >> 2] = $20; //@line 4640
  $154 = $ReallocAsyncCtx + 44 | 0; //@line 4641
  HEAP32[$154 >> 2] = $22; //@line 4642
  $155 = $ReallocAsyncCtx + 48 | 0; //@line 4643
  HEAP32[$155 >> 2] = $24; //@line 4644
  $156 = $ReallocAsyncCtx + 52 | 0; //@line 4645
  HEAP32[$156 >> 2] = $26; //@line 4646
  $157 = $ReallocAsyncCtx + 56 | 0; //@line 4647
  HEAP32[$157 >> 2] = $28; //@line 4648
  $158 = $ReallocAsyncCtx + 60 | 0; //@line 4649
  HEAP32[$158 >> 2] = $30; //@line 4650
  $159 = $ReallocAsyncCtx + 64 | 0; //@line 4651
  HEAP32[$159 >> 2] = $32; //@line 4652
  $160 = $ReallocAsyncCtx + 68 | 0; //@line 4653
  HEAP32[$160 >> 2] = $34; //@line 4654
  $161 = $ReallocAsyncCtx + 72 | 0; //@line 4655
  HEAP32[$161 >> 2] = $36; //@line 4656
  $162 = $ReallocAsyncCtx + 76 | 0; //@line 4657
  HEAP32[$162 >> 2] = $38; //@line 4658
  $163 = $ReallocAsyncCtx + 80 | 0; //@line 4659
  HEAP32[$163 >> 2] = $40; //@line 4660
  $164 = $ReallocAsyncCtx + 84 | 0; //@line 4661
  HEAP32[$164 >> 2] = $42; //@line 4662
  $165 = $ReallocAsyncCtx + 88 | 0; //@line 4663
  HEAP32[$165 >> 2] = $44; //@line 4664
  $166 = $ReallocAsyncCtx + 92 | 0; //@line 4665
  HEAP32[$166 >> 2] = $46; //@line 4666
  $167 = $ReallocAsyncCtx + 96 | 0; //@line 4667
  HEAP32[$167 >> 2] = $48; //@line 4668
  $168 = $ReallocAsyncCtx + 100 | 0; //@line 4669
  HEAP32[$168 >> 2] = $50; //@line 4670
  $169 = $ReallocAsyncCtx + 104 | 0; //@line 4671
  HEAP32[$169 >> 2] = $52; //@line 4672
  $170 = $ReallocAsyncCtx + 108 | 0; //@line 4673
  HEAP32[$170 >> 2] = $54; //@line 4674
  $171 = $ReallocAsyncCtx + 112 | 0; //@line 4675
  HEAP32[$171 >> 2] = $56; //@line 4676
  $172 = $ReallocAsyncCtx + 116 | 0; //@line 4677
  HEAP32[$172 >> 2] = $58; //@line 4678
  $173 = $ReallocAsyncCtx + 120 | 0; //@line 4679
  HEAP32[$173 >> 2] = $60; //@line 4680
  $174 = $ReallocAsyncCtx + 124 | 0; //@line 4681
  HEAP32[$174 >> 2] = $62; //@line 4682
  $175 = $ReallocAsyncCtx + 128 | 0; //@line 4683
  HEAP32[$175 >> 2] = $64; //@line 4684
  $176 = $ReallocAsyncCtx + 132 | 0; //@line 4685
  HEAP32[$176 >> 2] = $66; //@line 4686
  $177 = $ReallocAsyncCtx + 136 | 0; //@line 4687
  HEAP32[$177 >> 2] = $68; //@line 4688
  $178 = $ReallocAsyncCtx + 140 | 0; //@line 4689
  HEAP8[$178 >> 0] = $70; //@line 4690
  $179 = $ReallocAsyncCtx + 144 | 0; //@line 4691
  HEAP32[$179 >> 2] = $72; //@line 4692
  $180 = $ReallocAsyncCtx + 148 | 0; //@line 4693
  HEAP32[$180 >> 2] = $74; //@line 4694
  $181 = $ReallocAsyncCtx + 152 | 0; //@line 4695
  HEAP32[$181 >> 2] = $76; //@line 4696
  $182 = $ReallocAsyncCtx + 156 | 0; //@line 4697
  HEAP32[$182 >> 2] = $78; //@line 4698
  $183 = $ReallocAsyncCtx + 160 | 0; //@line 4699
  HEAP32[$183 >> 2] = $80; //@line 4700
  $184 = $ReallocAsyncCtx + 164 | 0; //@line 4701
  HEAP32[$184 >> 2] = $130; //@line 4702
  $185 = $ReallocAsyncCtx + 168 | 0; //@line 4703
  HEAP32[$185 >> 2] = $82; //@line 4704
  $186 = $ReallocAsyncCtx + 172 | 0; //@line 4705
  HEAP32[$186 >> 2] = $84; //@line 4706
  $187 = $ReallocAsyncCtx + 176 | 0; //@line 4707
  HEAP32[$187 >> 2] = $$0107$be; //@line 4708
  $188 = $ReallocAsyncCtx + 180 | 0; //@line 4709
  HEAP32[$188 >> 2] = $86; //@line 4710
  $189 = $ReallocAsyncCtx + 184 | 0; //@line 4711
  HEAP32[$189 >> 2] = $88; //@line 4712
  $190 = $ReallocAsyncCtx + 188 | 0; //@line 4713
  HEAP32[$190 >> 2] = $90; //@line 4714
  $191 = $ReallocAsyncCtx + 192 | 0; //@line 4715
  HEAP32[$191 >> 2] = $92; //@line 4716
  $192 = $ReallocAsyncCtx + 196 | 0; //@line 4717
  HEAP32[$192 >> 2] = $94; //@line 4718
  $193 = $ReallocAsyncCtx + 200 | 0; //@line 4719
  HEAP32[$193 >> 2] = $98; //@line 4720
  $194 = $ReallocAsyncCtx + 204 | 0; //@line 4721
  HEAP32[$194 >> 2] = $100; //@line 4722
  $195 = $ReallocAsyncCtx + 208 | 0; //@line 4723
  HEAP32[$195 >> 2] = $102; //@line 4724
  $196 = $ReallocAsyncCtx + 212 | 0; //@line 4725
  HEAP32[$196 >> 2] = $104; //@line 4726
  $197 = $ReallocAsyncCtx + 216 | 0; //@line 4727
  HEAP32[$197 >> 2] = $106; //@line 4728
  $198 = $ReallocAsyncCtx + 220 | 0; //@line 4729
  HEAP32[$198 >> 2] = $108; //@line 4730
  $199 = $ReallocAsyncCtx + 224 | 0; //@line 4731
  HEAP8[$199 >> 0] = $110; //@line 4732
  $200 = $ReallocAsyncCtx + 228 | 0; //@line 4733
  HEAP32[$200 >> 2] = $14; //@line 4734
  $201 = $ReallocAsyncCtx + 232 | 0; //@line 4735
  HEAP32[$201 >> 2] = $16; //@line 4736
  $202 = $ReallocAsyncCtx + 236 | 0; //@line 4737
  HEAP32[$202 >> 2] = $12; //@line 4738
  sp = STACKTOP; //@line 4739
  return;
 } else if ((label | 0) == 9) {
  $221 = HEAP8[$16 + ($119 & 255) >> 0] | 0; //@line 4745
  HEAP8[$28 >> 0] = ($221 & 255) >>> 4 & 7; //@line 4750
  HEAP8[$100 >> 0] = $221 & 15; //@line 4752
  $240 = $$0$be + 5 << 24 >> 24; //@line 4766
  HEAP32[$6 >> 2] = (HEAPU8[$16 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$16 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$16 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 4774
  $250 = HEAP32[(HEAP32[$10 >> 2] | 0) + 40 >> 2] | 0; //@line 4777
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(236) | 0; //@line 4778
  $251 = FUNCTION_TABLE_iii[$250 & 31]($86, $46) | 0; //@line 4779
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 490; //@line 4782
   $252 = $ReallocAsyncCtx2 + 4 | 0; //@line 4783
   HEAP8[$252 >> 0] = $112; //@line 4784
   $253 = $ReallocAsyncCtx2 + 8 | 0; //@line 4785
   HEAP32[$253 >> 2] = $4; //@line 4786
   $254 = $ReallocAsyncCtx2 + 12 | 0; //@line 4787
   HEAP32[$254 >> 2] = $6; //@line 4788
   $255 = $ReallocAsyncCtx2 + 16 | 0; //@line 4789
   HEAP32[$255 >> 2] = $8; //@line 4790
   $256 = $ReallocAsyncCtx2 + 20 | 0; //@line 4791
   HEAP32[$256 >> 2] = $10; //@line 4792
   $257 = $ReallocAsyncCtx2 + 24 | 0; //@line 4793
   HEAP8[$257 >> 0] = $240; //@line 4794
   $258 = $ReallocAsyncCtx2 + 28 | 0; //@line 4795
   HEAP32[$258 >> 2] = $2; //@line 4796
   $259 = $ReallocAsyncCtx2 + 32 | 0; //@line 4797
   HEAP32[$259 >> 2] = $114; //@line 4798
   $260 = $ReallocAsyncCtx2 + 36 | 0; //@line 4799
   HEAP32[$260 >> 2] = $116; //@line 4800
   $261 = $ReallocAsyncCtx2 + 40 | 0; //@line 4801
   HEAP32[$261 >> 2] = $18; //@line 4802
   $262 = $ReallocAsyncCtx2 + 44 | 0; //@line 4803
   HEAP32[$262 >> 2] = $20; //@line 4804
   $263 = $ReallocAsyncCtx2 + 48 | 0; //@line 4805
   HEAP32[$263 >> 2] = $22; //@line 4806
   $264 = $ReallocAsyncCtx2 + 52 | 0; //@line 4807
   HEAP32[$264 >> 2] = $24; //@line 4808
   $265 = $ReallocAsyncCtx2 + 56 | 0; //@line 4809
   HEAP32[$265 >> 2] = $26; //@line 4810
   $266 = $ReallocAsyncCtx2 + 60 | 0; //@line 4811
   HEAP32[$266 >> 2] = $28; //@line 4812
   $267 = $ReallocAsyncCtx2 + 64 | 0; //@line 4813
   HEAP32[$267 >> 2] = $30; //@line 4814
   $268 = $ReallocAsyncCtx2 + 68 | 0; //@line 4815
   HEAP32[$268 >> 2] = $32; //@line 4816
   $269 = $ReallocAsyncCtx2 + 72 | 0; //@line 4817
   HEAP32[$269 >> 2] = $34; //@line 4818
   $270 = $ReallocAsyncCtx2 + 76 | 0; //@line 4819
   HEAP32[$270 >> 2] = $36; //@line 4820
   $271 = $ReallocAsyncCtx2 + 80 | 0; //@line 4821
   HEAP32[$271 >> 2] = $38; //@line 4822
   $272 = $ReallocAsyncCtx2 + 84 | 0; //@line 4823
   HEAP32[$272 >> 2] = $40; //@line 4824
   $273 = $ReallocAsyncCtx2 + 88 | 0; //@line 4825
   HEAP32[$273 >> 2] = $42; //@line 4826
   $274 = $ReallocAsyncCtx2 + 92 | 0; //@line 4827
   HEAP32[$274 >> 2] = $44; //@line 4828
   $275 = $ReallocAsyncCtx2 + 96 | 0; //@line 4829
   HEAP32[$275 >> 2] = $46; //@line 4830
   $276 = $ReallocAsyncCtx2 + 100 | 0; //@line 4831
   HEAP32[$276 >> 2] = $48; //@line 4832
   $277 = $ReallocAsyncCtx2 + 104 | 0; //@line 4833
   HEAP32[$277 >> 2] = $50; //@line 4834
   $278 = $ReallocAsyncCtx2 + 108 | 0; //@line 4835
   HEAP32[$278 >> 2] = $52; //@line 4836
   $279 = $ReallocAsyncCtx2 + 112 | 0; //@line 4837
   HEAP32[$279 >> 2] = $54; //@line 4838
   $280 = $ReallocAsyncCtx2 + 116 | 0; //@line 4839
   HEAP32[$280 >> 2] = $56; //@line 4840
   $281 = $ReallocAsyncCtx2 + 120 | 0; //@line 4841
   HEAP32[$281 >> 2] = $58; //@line 4842
   $282 = $ReallocAsyncCtx2 + 124 | 0; //@line 4843
   HEAP32[$282 >> 2] = $60; //@line 4844
   $283 = $ReallocAsyncCtx2 + 128 | 0; //@line 4845
   HEAP32[$283 >> 2] = $62; //@line 4846
   $284 = $ReallocAsyncCtx2 + 132 | 0; //@line 4847
   HEAP32[$284 >> 2] = $64; //@line 4848
   $285 = $ReallocAsyncCtx2 + 136 | 0; //@line 4849
   HEAP32[$285 >> 2] = $66; //@line 4850
   $286 = $ReallocAsyncCtx2 + 140 | 0; //@line 4851
   HEAP32[$286 >> 2] = $68; //@line 4852
   $287 = $ReallocAsyncCtx2 + 144 | 0; //@line 4853
   HEAP8[$287 >> 0] = $70; //@line 4854
   $288 = $ReallocAsyncCtx2 + 148 | 0; //@line 4855
   HEAP32[$288 >> 2] = $72; //@line 4856
   $289 = $ReallocAsyncCtx2 + 152 | 0; //@line 4857
   HEAP32[$289 >> 2] = $74; //@line 4858
   $290 = $ReallocAsyncCtx2 + 156 | 0; //@line 4859
   HEAP32[$290 >> 2] = $76; //@line 4860
   $291 = $ReallocAsyncCtx2 + 160 | 0; //@line 4861
   HEAP32[$291 >> 2] = $78; //@line 4862
   $292 = $ReallocAsyncCtx2 + 164 | 0; //@line 4863
   HEAP32[$292 >> 2] = $80; //@line 4864
   $293 = $ReallocAsyncCtx2 + 168 | 0; //@line 4865
   HEAP32[$293 >> 2] = $82; //@line 4866
   $294 = $ReallocAsyncCtx2 + 172 | 0; //@line 4867
   HEAP32[$294 >> 2] = $84; //@line 4868
   $295 = $ReallocAsyncCtx2 + 176 | 0; //@line 4869
   HEAP32[$295 >> 2] = $86; //@line 4870
   $296 = $ReallocAsyncCtx2 + 180 | 0; //@line 4871
   HEAP32[$296 >> 2] = $88; //@line 4872
   $297 = $ReallocAsyncCtx2 + 184 | 0; //@line 4873
   HEAP32[$297 >> 2] = $90; //@line 4874
   $298 = $ReallocAsyncCtx2 + 188 | 0; //@line 4875
   HEAP32[$298 >> 2] = $92; //@line 4876
   $299 = $ReallocAsyncCtx2 + 192 | 0; //@line 4877
   HEAP32[$299 >> 2] = $94; //@line 4878
   $300 = $ReallocAsyncCtx2 + 196 | 0; //@line 4879
   HEAP32[$300 >> 2] = $98; //@line 4880
   $301 = $ReallocAsyncCtx2 + 200 | 0; //@line 4881
   HEAP32[$301 >> 2] = $100; //@line 4882
   $302 = $ReallocAsyncCtx2 + 204 | 0; //@line 4883
   HEAP32[$302 >> 2] = $102; //@line 4884
   $303 = $ReallocAsyncCtx2 + 208 | 0; //@line 4885
   HEAP32[$303 >> 2] = $104; //@line 4886
   $304 = $ReallocAsyncCtx2 + 212 | 0; //@line 4887
   HEAP32[$304 >> 2] = $106; //@line 4888
   $305 = $ReallocAsyncCtx2 + 216 | 0; //@line 4889
   HEAP32[$305 >> 2] = $108; //@line 4890
   $306 = $ReallocAsyncCtx2 + 220 | 0; //@line 4891
   HEAP8[$306 >> 0] = $110; //@line 4892
   $307 = $ReallocAsyncCtx2 + 224 | 0; //@line 4893
   HEAP32[$307 >> 2] = $14; //@line 4894
   $308 = $ReallocAsyncCtx2 + 228 | 0; //@line 4895
   HEAP32[$308 >> 2] = $16; //@line 4896
   $309 = $ReallocAsyncCtx2 + 232 | 0; //@line 4897
   HEAP32[$309 >> 2] = $12; //@line 4898
   sp = STACKTOP; //@line 4899
   return;
  }
  HEAP8[___async_retval >> 0] = $251; //@line 4903
  ___async_unwind = 0; //@line 4904
  HEAP32[$ReallocAsyncCtx2 >> 2] = 490; //@line 4905
  $252 = $ReallocAsyncCtx2 + 4 | 0; //@line 4906
  HEAP8[$252 >> 0] = $112; //@line 4907
  $253 = $ReallocAsyncCtx2 + 8 | 0; //@line 4908
  HEAP32[$253 >> 2] = $4; //@line 4909
  $254 = $ReallocAsyncCtx2 + 12 | 0; //@line 4910
  HEAP32[$254 >> 2] = $6; //@line 4911
  $255 = $ReallocAsyncCtx2 + 16 | 0; //@line 4912
  HEAP32[$255 >> 2] = $8; //@line 4913
  $256 = $ReallocAsyncCtx2 + 20 | 0; //@line 4914
  HEAP32[$256 >> 2] = $10; //@line 4915
  $257 = $ReallocAsyncCtx2 + 24 | 0; //@line 4916
  HEAP8[$257 >> 0] = $240; //@line 4917
  $258 = $ReallocAsyncCtx2 + 28 | 0; //@line 4918
  HEAP32[$258 >> 2] = $2; //@line 4919
  $259 = $ReallocAsyncCtx2 + 32 | 0; //@line 4920
  HEAP32[$259 >> 2] = $114; //@line 4921
  $260 = $ReallocAsyncCtx2 + 36 | 0; //@line 4922
  HEAP32[$260 >> 2] = $116; //@line 4923
  $261 = $ReallocAsyncCtx2 + 40 | 0; //@line 4924
  HEAP32[$261 >> 2] = $18; //@line 4925
  $262 = $ReallocAsyncCtx2 + 44 | 0; //@line 4926
  HEAP32[$262 >> 2] = $20; //@line 4927
  $263 = $ReallocAsyncCtx2 + 48 | 0; //@line 4928
  HEAP32[$263 >> 2] = $22; //@line 4929
  $264 = $ReallocAsyncCtx2 + 52 | 0; //@line 4930
  HEAP32[$264 >> 2] = $24; //@line 4931
  $265 = $ReallocAsyncCtx2 + 56 | 0; //@line 4932
  HEAP32[$265 >> 2] = $26; //@line 4933
  $266 = $ReallocAsyncCtx2 + 60 | 0; //@line 4934
  HEAP32[$266 >> 2] = $28; //@line 4935
  $267 = $ReallocAsyncCtx2 + 64 | 0; //@line 4936
  HEAP32[$267 >> 2] = $30; //@line 4937
  $268 = $ReallocAsyncCtx2 + 68 | 0; //@line 4938
  HEAP32[$268 >> 2] = $32; //@line 4939
  $269 = $ReallocAsyncCtx2 + 72 | 0; //@line 4940
  HEAP32[$269 >> 2] = $34; //@line 4941
  $270 = $ReallocAsyncCtx2 + 76 | 0; //@line 4942
  HEAP32[$270 >> 2] = $36; //@line 4943
  $271 = $ReallocAsyncCtx2 + 80 | 0; //@line 4944
  HEAP32[$271 >> 2] = $38; //@line 4945
  $272 = $ReallocAsyncCtx2 + 84 | 0; //@line 4946
  HEAP32[$272 >> 2] = $40; //@line 4947
  $273 = $ReallocAsyncCtx2 + 88 | 0; //@line 4948
  HEAP32[$273 >> 2] = $42; //@line 4949
  $274 = $ReallocAsyncCtx2 + 92 | 0; //@line 4950
  HEAP32[$274 >> 2] = $44; //@line 4951
  $275 = $ReallocAsyncCtx2 + 96 | 0; //@line 4952
  HEAP32[$275 >> 2] = $46; //@line 4953
  $276 = $ReallocAsyncCtx2 + 100 | 0; //@line 4954
  HEAP32[$276 >> 2] = $48; //@line 4955
  $277 = $ReallocAsyncCtx2 + 104 | 0; //@line 4956
  HEAP32[$277 >> 2] = $50; //@line 4957
  $278 = $ReallocAsyncCtx2 + 108 | 0; //@line 4958
  HEAP32[$278 >> 2] = $52; //@line 4959
  $279 = $ReallocAsyncCtx2 + 112 | 0; //@line 4960
  HEAP32[$279 >> 2] = $54; //@line 4961
  $280 = $ReallocAsyncCtx2 + 116 | 0; //@line 4962
  HEAP32[$280 >> 2] = $56; //@line 4963
  $281 = $ReallocAsyncCtx2 + 120 | 0; //@line 4964
  HEAP32[$281 >> 2] = $58; //@line 4965
  $282 = $ReallocAsyncCtx2 + 124 | 0; //@line 4966
  HEAP32[$282 >> 2] = $60; //@line 4967
  $283 = $ReallocAsyncCtx2 + 128 | 0; //@line 4968
  HEAP32[$283 >> 2] = $62; //@line 4969
  $284 = $ReallocAsyncCtx2 + 132 | 0; //@line 4970
  HEAP32[$284 >> 2] = $64; //@line 4971
  $285 = $ReallocAsyncCtx2 + 136 | 0; //@line 4972
  HEAP32[$285 >> 2] = $66; //@line 4973
  $286 = $ReallocAsyncCtx2 + 140 | 0; //@line 4974
  HEAP32[$286 >> 2] = $68; //@line 4975
  $287 = $ReallocAsyncCtx2 + 144 | 0; //@line 4976
  HEAP8[$287 >> 0] = $70; //@line 4977
  $288 = $ReallocAsyncCtx2 + 148 | 0; //@line 4978
  HEAP32[$288 >> 2] = $72; //@line 4979
  $289 = $ReallocAsyncCtx2 + 152 | 0; //@line 4980
  HEAP32[$289 >> 2] = $74; //@line 4981
  $290 = $ReallocAsyncCtx2 + 156 | 0; //@line 4982
  HEAP32[$290 >> 2] = $76; //@line 4983
  $291 = $ReallocAsyncCtx2 + 160 | 0; //@line 4984
  HEAP32[$291 >> 2] = $78; //@line 4985
  $292 = $ReallocAsyncCtx2 + 164 | 0; //@line 4986
  HEAP32[$292 >> 2] = $80; //@line 4987
  $293 = $ReallocAsyncCtx2 + 168 | 0; //@line 4988
  HEAP32[$293 >> 2] = $82; //@line 4989
  $294 = $ReallocAsyncCtx2 + 172 | 0; //@line 4990
  HEAP32[$294 >> 2] = $84; //@line 4991
  $295 = $ReallocAsyncCtx2 + 176 | 0; //@line 4992
  HEAP32[$295 >> 2] = $86; //@line 4993
  $296 = $ReallocAsyncCtx2 + 180 | 0; //@line 4994
  HEAP32[$296 >> 2] = $88; //@line 4995
  $297 = $ReallocAsyncCtx2 + 184 | 0; //@line 4996
  HEAP32[$297 >> 2] = $90; //@line 4997
  $298 = $ReallocAsyncCtx2 + 188 | 0; //@line 4998
  HEAP32[$298 >> 2] = $92; //@line 4999
  $299 = $ReallocAsyncCtx2 + 192 | 0; //@line 5000
  HEAP32[$299 >> 2] = $94; //@line 5001
  $300 = $ReallocAsyncCtx2 + 196 | 0; //@line 5002
  HEAP32[$300 >> 2] = $98; //@line 5003
  $301 = $ReallocAsyncCtx2 + 200 | 0; //@line 5004
  HEAP32[$301 >> 2] = $100; //@line 5005
  $302 = $ReallocAsyncCtx2 + 204 | 0; //@line 5006
  HEAP32[$302 >> 2] = $102; //@line 5007
  $303 = $ReallocAsyncCtx2 + 208 | 0; //@line 5008
  HEAP32[$303 >> 2] = $104; //@line 5009
  $304 = $ReallocAsyncCtx2 + 212 | 0; //@line 5010
  HEAP32[$304 >> 2] = $106; //@line 5011
  $305 = $ReallocAsyncCtx2 + 216 | 0; //@line 5012
  HEAP32[$305 >> 2] = $108; //@line 5013
  $306 = $ReallocAsyncCtx2 + 220 | 0; //@line 5014
  HEAP8[$306 >> 0] = $110; //@line 5015
  $307 = $ReallocAsyncCtx2 + 224 | 0; //@line 5016
  HEAP32[$307 >> 2] = $14; //@line 5017
  $308 = $ReallocAsyncCtx2 + 228 | 0; //@line 5018
  HEAP32[$308 >> 2] = $16; //@line 5019
  $309 = $ReallocAsyncCtx2 + 232 | 0; //@line 5020
  HEAP32[$309 >> 2] = $12; //@line 5021
  sp = STACKTOP; //@line 5022
  return;
 } else if ((label | 0) == 13) {
  $313 = HEAP32[$311 >> 2] | 0; //@line 5026
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(232) | 0; //@line 5027
  $314 = FUNCTION_TABLE_ii[$313 & 15]($74) | 0; //@line 5028
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 491; //@line 5031
   $315 = $ReallocAsyncCtx3 + 4 | 0; //@line 5032
   HEAP32[$315 >> 2] = $2; //@line 5033
   $316 = $ReallocAsyncCtx3 + 8 | 0; //@line 5034
   HEAP32[$316 >> 2] = $4; //@line 5035
   $317 = $ReallocAsyncCtx3 + 12 | 0; //@line 5036
   HEAP32[$317 >> 2] = $6; //@line 5037
   $318 = $ReallocAsyncCtx3 + 16 | 0; //@line 5038
   HEAP32[$318 >> 2] = $8; //@line 5039
   $319 = $ReallocAsyncCtx3 + 20 | 0; //@line 5040
   HEAP32[$319 >> 2] = $10; //@line 5041
   $320 = $ReallocAsyncCtx3 + 24 | 0; //@line 5042
   HEAP32[$320 >> 2] = $12; //@line 5043
   $321 = $ReallocAsyncCtx3 + 28 | 0; //@line 5044
   HEAP32[$321 >> 2] = $14; //@line 5045
   $322 = $ReallocAsyncCtx3 + 32 | 0; //@line 5046
   HEAP32[$322 >> 2] = $16; //@line 5047
   $323 = $ReallocAsyncCtx3 + 36 | 0; //@line 5048
   HEAP32[$323 >> 2] = $18; //@line 5049
   $324 = $ReallocAsyncCtx3 + 40 | 0; //@line 5050
   HEAP32[$324 >> 2] = $20; //@line 5051
   $325 = $ReallocAsyncCtx3 + 44 | 0; //@line 5052
   HEAP32[$325 >> 2] = $22; //@line 5053
   $326 = $ReallocAsyncCtx3 + 48 | 0; //@line 5054
   HEAP32[$326 >> 2] = $24; //@line 5055
   $327 = $ReallocAsyncCtx3 + 52 | 0; //@line 5056
   HEAP32[$327 >> 2] = $26; //@line 5057
   $328 = $ReallocAsyncCtx3 + 56 | 0; //@line 5058
   HEAP32[$328 >> 2] = $28; //@line 5059
   $329 = $ReallocAsyncCtx3 + 60 | 0; //@line 5060
   HEAP32[$329 >> 2] = $30; //@line 5061
   $330 = $ReallocAsyncCtx3 + 64 | 0; //@line 5062
   HEAP32[$330 >> 2] = $32; //@line 5063
   $331 = $ReallocAsyncCtx3 + 68 | 0; //@line 5064
   HEAP32[$331 >> 2] = $34; //@line 5065
   $332 = $ReallocAsyncCtx3 + 72 | 0; //@line 5066
   HEAP32[$332 >> 2] = $36; //@line 5067
   $333 = $ReallocAsyncCtx3 + 76 | 0; //@line 5068
   HEAP32[$333 >> 2] = $38; //@line 5069
   $334 = $ReallocAsyncCtx3 + 80 | 0; //@line 5070
   HEAP32[$334 >> 2] = $40; //@line 5071
   $335 = $ReallocAsyncCtx3 + 84 | 0; //@line 5072
   HEAP32[$335 >> 2] = $42; //@line 5073
   $336 = $ReallocAsyncCtx3 + 88 | 0; //@line 5074
   HEAP32[$336 >> 2] = $44; //@line 5075
   $337 = $ReallocAsyncCtx3 + 92 | 0; //@line 5076
   HEAP32[$337 >> 2] = $46; //@line 5077
   $338 = $ReallocAsyncCtx3 + 96 | 0; //@line 5078
   HEAP32[$338 >> 2] = $48; //@line 5079
   $339 = $ReallocAsyncCtx3 + 100 | 0; //@line 5080
   HEAP32[$339 >> 2] = $50; //@line 5081
   $340 = $ReallocAsyncCtx3 + 104 | 0; //@line 5082
   HEAP32[$340 >> 2] = $52; //@line 5083
   $341 = $ReallocAsyncCtx3 + 108 | 0; //@line 5084
   HEAP32[$341 >> 2] = $54; //@line 5085
   $342 = $ReallocAsyncCtx3 + 112 | 0; //@line 5086
   HEAP32[$342 >> 2] = $56; //@line 5087
   $343 = $ReallocAsyncCtx3 + 116 | 0; //@line 5088
   HEAP32[$343 >> 2] = $58; //@line 5089
   $344 = $ReallocAsyncCtx3 + 120 | 0; //@line 5090
   HEAP32[$344 >> 2] = $60; //@line 5091
   $345 = $ReallocAsyncCtx3 + 124 | 0; //@line 5092
   HEAP32[$345 >> 2] = $62; //@line 5093
   $346 = $ReallocAsyncCtx3 + 128 | 0; //@line 5094
   HEAP32[$346 >> 2] = $64; //@line 5095
   $347 = $ReallocAsyncCtx3 + 132 | 0; //@line 5096
   HEAP32[$347 >> 2] = $66; //@line 5097
   $348 = $ReallocAsyncCtx3 + 136 | 0; //@line 5098
   HEAP32[$348 >> 2] = $68; //@line 5099
   $349 = $ReallocAsyncCtx3 + 140 | 0; //@line 5100
   HEAP8[$349 >> 0] = $70; //@line 5101
   $350 = $ReallocAsyncCtx3 + 144 | 0; //@line 5102
   HEAP32[$350 >> 2] = $72; //@line 5103
   $351 = $ReallocAsyncCtx3 + 148 | 0; //@line 5104
   HEAP32[$351 >> 2] = $74; //@line 5105
   $352 = $ReallocAsyncCtx3 + 152 | 0; //@line 5106
   HEAP32[$352 >> 2] = $76; //@line 5107
   $353 = $ReallocAsyncCtx3 + 156 | 0; //@line 5108
   HEAP32[$353 >> 2] = $78; //@line 5109
   $354 = $ReallocAsyncCtx3 + 160 | 0; //@line 5110
   HEAP32[$354 >> 2] = $80; //@line 5111
   $355 = $ReallocAsyncCtx3 + 164 | 0; //@line 5112
   HEAP32[$355 >> 2] = $82; //@line 5113
   $356 = $ReallocAsyncCtx3 + 168 | 0; //@line 5114
   HEAP32[$356 >> 2] = $84; //@line 5115
   $357 = $ReallocAsyncCtx3 + 172 | 0; //@line 5116
   HEAP32[$357 >> 2] = $86; //@line 5117
   $358 = $ReallocAsyncCtx3 + 176 | 0; //@line 5118
   HEAP32[$358 >> 2] = $88; //@line 5119
   $359 = $ReallocAsyncCtx3 + 180 | 0; //@line 5120
   HEAP32[$359 >> 2] = $90; //@line 5121
   $360 = $ReallocAsyncCtx3 + 184 | 0; //@line 5122
   HEAP32[$360 >> 2] = $92; //@line 5123
   $361 = $ReallocAsyncCtx3 + 188 | 0; //@line 5124
   HEAP32[$361 >> 2] = $94; //@line 5125
   $362 = $ReallocAsyncCtx3 + 192 | 0; //@line 5126
   HEAP8[$362 >> 0] = $119; //@line 5127
   $363 = $ReallocAsyncCtx3 + 196 | 0; //@line 5128
   HEAP32[$363 >> 2] = $98; //@line 5129
   $364 = $ReallocAsyncCtx3 + 200 | 0; //@line 5130
   HEAP32[$364 >> 2] = $100; //@line 5131
   $365 = $ReallocAsyncCtx3 + 204 | 0; //@line 5132
   HEAP32[$365 >> 2] = $102; //@line 5133
   $366 = $ReallocAsyncCtx3 + 208 | 0; //@line 5134
   HEAP32[$366 >> 2] = $104; //@line 5135
   $367 = $ReallocAsyncCtx3 + 212 | 0; //@line 5136
   HEAP32[$367 >> 2] = $106; //@line 5137
   $368 = $ReallocAsyncCtx3 + 216 | 0; //@line 5138
   HEAP32[$368 >> 2] = $108; //@line 5139
   $369 = $ReallocAsyncCtx3 + 220 | 0; //@line 5140
   HEAP8[$369 >> 0] = $110; //@line 5141
   $370 = $ReallocAsyncCtx3 + 221 | 0; //@line 5142
   HEAP8[$370 >> 0] = $112; //@line 5143
   $371 = $ReallocAsyncCtx3 + 224 | 0; //@line 5144
   HEAP32[$371 >> 2] = $114; //@line 5145
   $372 = $ReallocAsyncCtx3 + 228 | 0; //@line 5146
   HEAP32[$372 >> 2] = $116; //@line 5147
   sp = STACKTOP; //@line 5148
   return;
  }
  HEAP8[___async_retval >> 0] = $314; //@line 5152
  ___async_unwind = 0; //@line 5153
  HEAP32[$ReallocAsyncCtx3 >> 2] = 491; //@line 5154
  $315 = $ReallocAsyncCtx3 + 4 | 0; //@line 5155
  HEAP32[$315 >> 2] = $2; //@line 5156
  $316 = $ReallocAsyncCtx3 + 8 | 0; //@line 5157
  HEAP32[$316 >> 2] = $4; //@line 5158
  $317 = $ReallocAsyncCtx3 + 12 | 0; //@line 5159
  HEAP32[$317 >> 2] = $6; //@line 5160
  $318 = $ReallocAsyncCtx3 + 16 | 0; //@line 5161
  HEAP32[$318 >> 2] = $8; //@line 5162
  $319 = $ReallocAsyncCtx3 + 20 | 0; //@line 5163
  HEAP32[$319 >> 2] = $10; //@line 5164
  $320 = $ReallocAsyncCtx3 + 24 | 0; //@line 5165
  HEAP32[$320 >> 2] = $12; //@line 5166
  $321 = $ReallocAsyncCtx3 + 28 | 0; //@line 5167
  HEAP32[$321 >> 2] = $14; //@line 5168
  $322 = $ReallocAsyncCtx3 + 32 | 0; //@line 5169
  HEAP32[$322 >> 2] = $16; //@line 5170
  $323 = $ReallocAsyncCtx3 + 36 | 0; //@line 5171
  HEAP32[$323 >> 2] = $18; //@line 5172
  $324 = $ReallocAsyncCtx3 + 40 | 0; //@line 5173
  HEAP32[$324 >> 2] = $20; //@line 5174
  $325 = $ReallocAsyncCtx3 + 44 | 0; //@line 5175
  HEAP32[$325 >> 2] = $22; //@line 5176
  $326 = $ReallocAsyncCtx3 + 48 | 0; //@line 5177
  HEAP32[$326 >> 2] = $24; //@line 5178
  $327 = $ReallocAsyncCtx3 + 52 | 0; //@line 5179
  HEAP32[$327 >> 2] = $26; //@line 5180
  $328 = $ReallocAsyncCtx3 + 56 | 0; //@line 5181
  HEAP32[$328 >> 2] = $28; //@line 5182
  $329 = $ReallocAsyncCtx3 + 60 | 0; //@line 5183
  HEAP32[$329 >> 2] = $30; //@line 5184
  $330 = $ReallocAsyncCtx3 + 64 | 0; //@line 5185
  HEAP32[$330 >> 2] = $32; //@line 5186
  $331 = $ReallocAsyncCtx3 + 68 | 0; //@line 5187
  HEAP32[$331 >> 2] = $34; //@line 5188
  $332 = $ReallocAsyncCtx3 + 72 | 0; //@line 5189
  HEAP32[$332 >> 2] = $36; //@line 5190
  $333 = $ReallocAsyncCtx3 + 76 | 0; //@line 5191
  HEAP32[$333 >> 2] = $38; //@line 5192
  $334 = $ReallocAsyncCtx3 + 80 | 0; //@line 5193
  HEAP32[$334 >> 2] = $40; //@line 5194
  $335 = $ReallocAsyncCtx3 + 84 | 0; //@line 5195
  HEAP32[$335 >> 2] = $42; //@line 5196
  $336 = $ReallocAsyncCtx3 + 88 | 0; //@line 5197
  HEAP32[$336 >> 2] = $44; //@line 5198
  $337 = $ReallocAsyncCtx3 + 92 | 0; //@line 5199
  HEAP32[$337 >> 2] = $46; //@line 5200
  $338 = $ReallocAsyncCtx3 + 96 | 0; //@line 5201
  HEAP32[$338 >> 2] = $48; //@line 5202
  $339 = $ReallocAsyncCtx3 + 100 | 0; //@line 5203
  HEAP32[$339 >> 2] = $50; //@line 5204
  $340 = $ReallocAsyncCtx3 + 104 | 0; //@line 5205
  HEAP32[$340 >> 2] = $52; //@line 5206
  $341 = $ReallocAsyncCtx3 + 108 | 0; //@line 5207
  HEAP32[$341 >> 2] = $54; //@line 5208
  $342 = $ReallocAsyncCtx3 + 112 | 0; //@line 5209
  HEAP32[$342 >> 2] = $56; //@line 5210
  $343 = $ReallocAsyncCtx3 + 116 | 0; //@line 5211
  HEAP32[$343 >> 2] = $58; //@line 5212
  $344 = $ReallocAsyncCtx3 + 120 | 0; //@line 5213
  HEAP32[$344 >> 2] = $60; //@line 5214
  $345 = $ReallocAsyncCtx3 + 124 | 0; //@line 5215
  HEAP32[$345 >> 2] = $62; //@line 5216
  $346 = $ReallocAsyncCtx3 + 128 | 0; //@line 5217
  HEAP32[$346 >> 2] = $64; //@line 5218
  $347 = $ReallocAsyncCtx3 + 132 | 0; //@line 5219
  HEAP32[$347 >> 2] = $66; //@line 5220
  $348 = $ReallocAsyncCtx3 + 136 | 0; //@line 5221
  HEAP32[$348 >> 2] = $68; //@line 5222
  $349 = $ReallocAsyncCtx3 + 140 | 0; //@line 5223
  HEAP8[$349 >> 0] = $70; //@line 5224
  $350 = $ReallocAsyncCtx3 + 144 | 0; //@line 5225
  HEAP32[$350 >> 2] = $72; //@line 5226
  $351 = $ReallocAsyncCtx3 + 148 | 0; //@line 5227
  HEAP32[$351 >> 2] = $74; //@line 5228
  $352 = $ReallocAsyncCtx3 + 152 | 0; //@line 5229
  HEAP32[$352 >> 2] = $76; //@line 5230
  $353 = $ReallocAsyncCtx3 + 156 | 0; //@line 5231
  HEAP32[$353 >> 2] = $78; //@line 5232
  $354 = $ReallocAsyncCtx3 + 160 | 0; //@line 5233
  HEAP32[$354 >> 2] = $80; //@line 5234
  $355 = $ReallocAsyncCtx3 + 164 | 0; //@line 5235
  HEAP32[$355 >> 2] = $82; //@line 5236
  $356 = $ReallocAsyncCtx3 + 168 | 0; //@line 5237
  HEAP32[$356 >> 2] = $84; //@line 5238
  $357 = $ReallocAsyncCtx3 + 172 | 0; //@line 5239
  HEAP32[$357 >> 2] = $86; //@line 5240
  $358 = $ReallocAsyncCtx3 + 176 | 0; //@line 5241
  HEAP32[$358 >> 2] = $88; //@line 5242
  $359 = $ReallocAsyncCtx3 + 180 | 0; //@line 5243
  HEAP32[$359 >> 2] = $90; //@line 5244
  $360 = $ReallocAsyncCtx3 + 184 | 0; //@line 5245
  HEAP32[$360 >> 2] = $92; //@line 5246
  $361 = $ReallocAsyncCtx3 + 188 | 0; //@line 5247
  HEAP32[$361 >> 2] = $94; //@line 5248
  $362 = $ReallocAsyncCtx3 + 192 | 0; //@line 5249
  HEAP8[$362 >> 0] = $119; //@line 5250
  $363 = $ReallocAsyncCtx3 + 196 | 0; //@line 5251
  HEAP32[$363 >> 2] = $98; //@line 5252
  $364 = $ReallocAsyncCtx3 + 200 | 0; //@line 5253
  HEAP32[$364 >> 2] = $100; //@line 5254
  $365 = $ReallocAsyncCtx3 + 204 | 0; //@line 5255
  HEAP32[$365 >> 2] = $102; //@line 5256
  $366 = $ReallocAsyncCtx3 + 208 | 0; //@line 5257
  HEAP32[$366 >> 2] = $104; //@line 5258
  $367 = $ReallocAsyncCtx3 + 212 | 0; //@line 5259
  HEAP32[$367 >> 2] = $106; //@line 5260
  $368 = $ReallocAsyncCtx3 + 216 | 0; //@line 5261
  HEAP32[$368 >> 2] = $108; //@line 5262
  $369 = $ReallocAsyncCtx3 + 220 | 0; //@line 5263
  HEAP8[$369 >> 0] = $110; //@line 5264
  $370 = $ReallocAsyncCtx3 + 221 | 0; //@line 5265
  HEAP8[$370 >> 0] = $112; //@line 5266
  $371 = $ReallocAsyncCtx3 + 224 | 0; //@line 5267
  HEAP32[$371 >> 2] = $114; //@line 5268
  $372 = $ReallocAsyncCtx3 + 228 | 0; //@line 5269
  HEAP32[$372 >> 2] = $116; //@line 5270
  sp = STACKTOP; //@line 5271
  return;
 } else if ((label | 0) == 19) {
  $392 = HEAP8[$16 + ($119 & 255) >> 0] | 0; //@line 5278
  HEAP32[$114 >> 2] = (HEAPU8[$16 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$16 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$16 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 5299
  HEAP32[$88 >> 2] = 0; //@line 5300
  $413 = $$0$be + 6 << 24 >> 24; //@line 5301
  HEAP8[$94 >> 0] = HEAP8[$16 + ($$0$be + 5 & 255) >> 0] | 0; //@line 5305
  $419 = HEAP32[(HEAP32[$26 >> 2] | 0) + 8 >> 2] | 0; //@line 5308
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(232) | 0; //@line 5309
  $420 = FUNCTION_TABLE_iiii[$419 & 31]($86, $392, $116) | 0; //@line 5310
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 492; //@line 5313
   $421 = $ReallocAsyncCtx4 + 4 | 0; //@line 5314
   HEAP32[$421 >> 2] = $2; //@line 5315
   $422 = $ReallocAsyncCtx4 + 8 | 0; //@line 5316
   HEAP32[$422 >> 2] = $4; //@line 5317
   $423 = $ReallocAsyncCtx4 + 12 | 0; //@line 5318
   HEAP32[$423 >> 2] = $6; //@line 5319
   $424 = $ReallocAsyncCtx4 + 16 | 0; //@line 5320
   HEAP32[$424 >> 2] = $8; //@line 5321
   $425 = $ReallocAsyncCtx4 + 20 | 0; //@line 5322
   HEAP32[$425 >> 2] = $10; //@line 5323
   $426 = $ReallocAsyncCtx4 + 24 | 0; //@line 5324
   HEAP32[$426 >> 2] = $12; //@line 5325
   $427 = $ReallocAsyncCtx4 + 28 | 0; //@line 5326
   HEAP32[$427 >> 2] = $14; //@line 5327
   $428 = $ReallocAsyncCtx4 + 32 | 0; //@line 5328
   HEAP32[$428 >> 2] = $16; //@line 5329
   $429 = $ReallocAsyncCtx4 + 36 | 0; //@line 5330
   HEAP32[$429 >> 2] = $18; //@line 5331
   $430 = $ReallocAsyncCtx4 + 40 | 0; //@line 5332
   HEAP32[$430 >> 2] = $20; //@line 5333
   $431 = $ReallocAsyncCtx4 + 44 | 0; //@line 5334
   HEAP32[$431 >> 2] = $22; //@line 5335
   $432 = $ReallocAsyncCtx4 + 48 | 0; //@line 5336
   HEAP32[$432 >> 2] = $24; //@line 5337
   $433 = $ReallocAsyncCtx4 + 52 | 0; //@line 5338
   HEAP32[$433 >> 2] = $26; //@line 5339
   $434 = $ReallocAsyncCtx4 + 56 | 0; //@line 5340
   HEAP32[$434 >> 2] = $28; //@line 5341
   $435 = $ReallocAsyncCtx4 + 60 | 0; //@line 5342
   HEAP32[$435 >> 2] = $30; //@line 5343
   $436 = $ReallocAsyncCtx4 + 64 | 0; //@line 5344
   HEAP32[$436 >> 2] = $32; //@line 5345
   $437 = $ReallocAsyncCtx4 + 68 | 0; //@line 5346
   HEAP32[$437 >> 2] = $34; //@line 5347
   $438 = $ReallocAsyncCtx4 + 72 | 0; //@line 5348
   HEAP32[$438 >> 2] = $36; //@line 5349
   $439 = $ReallocAsyncCtx4 + 76 | 0; //@line 5350
   HEAP32[$439 >> 2] = $38; //@line 5351
   $440 = $ReallocAsyncCtx4 + 80 | 0; //@line 5352
   HEAP32[$440 >> 2] = $40; //@line 5353
   $441 = $ReallocAsyncCtx4 + 84 | 0; //@line 5354
   HEAP32[$441 >> 2] = $42; //@line 5355
   $442 = $ReallocAsyncCtx4 + 88 | 0; //@line 5356
   HEAP8[$442 >> 0] = $413; //@line 5357
   $443 = $ReallocAsyncCtx4 + 92 | 0; //@line 5358
   HEAP32[$443 >> 2] = $44; //@line 5359
   $444 = $ReallocAsyncCtx4 + 96 | 0; //@line 5360
   HEAP32[$444 >> 2] = $46; //@line 5361
   $445 = $ReallocAsyncCtx4 + 100 | 0; //@line 5362
   HEAP32[$445 >> 2] = $48; //@line 5363
   $446 = $ReallocAsyncCtx4 + 104 | 0; //@line 5364
   HEAP32[$446 >> 2] = $50; //@line 5365
   $447 = $ReallocAsyncCtx4 + 108 | 0; //@line 5366
   HEAP32[$447 >> 2] = $52; //@line 5367
   $448 = $ReallocAsyncCtx4 + 112 | 0; //@line 5368
   HEAP32[$448 >> 2] = $54; //@line 5369
   $449 = $ReallocAsyncCtx4 + 116 | 0; //@line 5370
   HEAP32[$449 >> 2] = $56; //@line 5371
   $450 = $ReallocAsyncCtx4 + 120 | 0; //@line 5372
   HEAP32[$450 >> 2] = $58; //@line 5373
   $451 = $ReallocAsyncCtx4 + 124 | 0; //@line 5374
   HEAP32[$451 >> 2] = $60; //@line 5375
   $452 = $ReallocAsyncCtx4 + 128 | 0; //@line 5376
   HEAP32[$452 >> 2] = $62; //@line 5377
   $453 = $ReallocAsyncCtx4 + 132 | 0; //@line 5378
   HEAP32[$453 >> 2] = $64; //@line 5379
   $454 = $ReallocAsyncCtx4 + 136 | 0; //@line 5380
   HEAP32[$454 >> 2] = $66; //@line 5381
   $455 = $ReallocAsyncCtx4 + 140 | 0; //@line 5382
   HEAP32[$455 >> 2] = $68; //@line 5383
   $456 = $ReallocAsyncCtx4 + 144 | 0; //@line 5384
   HEAP8[$456 >> 0] = $70; //@line 5385
   $457 = $ReallocAsyncCtx4 + 148 | 0; //@line 5386
   HEAP32[$457 >> 2] = $72; //@line 5387
   $458 = $ReallocAsyncCtx4 + 152 | 0; //@line 5388
   HEAP32[$458 >> 2] = $74; //@line 5389
   $459 = $ReallocAsyncCtx4 + 156 | 0; //@line 5390
   HEAP32[$459 >> 2] = $76; //@line 5391
   $460 = $ReallocAsyncCtx4 + 160 | 0; //@line 5392
   HEAP32[$460 >> 2] = $78; //@line 5393
   $461 = $ReallocAsyncCtx4 + 164 | 0; //@line 5394
   HEAP32[$461 >> 2] = $80; //@line 5395
   $462 = $ReallocAsyncCtx4 + 168 | 0; //@line 5396
   HEAP32[$462 >> 2] = $82; //@line 5397
   $463 = $ReallocAsyncCtx4 + 172 | 0; //@line 5398
   HEAP32[$463 >> 2] = $84; //@line 5399
   $464 = $ReallocAsyncCtx4 + 176 | 0; //@line 5400
   HEAP32[$464 >> 2] = $86; //@line 5401
   $465 = $ReallocAsyncCtx4 + 180 | 0; //@line 5402
   HEAP32[$465 >> 2] = $88; //@line 5403
   $466 = $ReallocAsyncCtx4 + 184 | 0; //@line 5404
   HEAP32[$466 >> 2] = $90; //@line 5405
   $467 = $ReallocAsyncCtx4 + 188 | 0; //@line 5406
   HEAP32[$467 >> 2] = $92; //@line 5407
   $468 = $ReallocAsyncCtx4 + 192 | 0; //@line 5408
   HEAP32[$468 >> 2] = $94; //@line 5409
   $469 = $ReallocAsyncCtx4 + 196 | 0; //@line 5410
   HEAP32[$469 >> 2] = $98; //@line 5411
   $470 = $ReallocAsyncCtx4 + 200 | 0; //@line 5412
   HEAP32[$470 >> 2] = $100; //@line 5413
   $471 = $ReallocAsyncCtx4 + 204 | 0; //@line 5414
   HEAP32[$471 >> 2] = $102; //@line 5415
   $472 = $ReallocAsyncCtx4 + 208 | 0; //@line 5416
   HEAP32[$472 >> 2] = $104; //@line 5417
   $473 = $ReallocAsyncCtx4 + 212 | 0; //@line 5418
   HEAP32[$473 >> 2] = $106; //@line 5419
   $474 = $ReallocAsyncCtx4 + 216 | 0; //@line 5420
   HEAP32[$474 >> 2] = $108; //@line 5421
   $475 = $ReallocAsyncCtx4 + 220 | 0; //@line 5422
   HEAP8[$475 >> 0] = $110; //@line 5423
   $476 = $ReallocAsyncCtx4 + 221 | 0; //@line 5424
   HEAP8[$476 >> 0] = $112; //@line 5425
   $477 = $ReallocAsyncCtx4 + 224 | 0; //@line 5426
   HEAP32[$477 >> 2] = $114; //@line 5427
   $478 = $ReallocAsyncCtx4 + 228 | 0; //@line 5428
   HEAP32[$478 >> 2] = $116; //@line 5429
   sp = STACKTOP; //@line 5430
   return;
  }
  HEAP8[___async_retval >> 0] = $420; //@line 5434
  ___async_unwind = 0; //@line 5435
  HEAP32[$ReallocAsyncCtx4 >> 2] = 492; //@line 5436
  $421 = $ReallocAsyncCtx4 + 4 | 0; //@line 5437
  HEAP32[$421 >> 2] = $2; //@line 5438
  $422 = $ReallocAsyncCtx4 + 8 | 0; //@line 5439
  HEAP32[$422 >> 2] = $4; //@line 5440
  $423 = $ReallocAsyncCtx4 + 12 | 0; //@line 5441
  HEAP32[$423 >> 2] = $6; //@line 5442
  $424 = $ReallocAsyncCtx4 + 16 | 0; //@line 5443
  HEAP32[$424 >> 2] = $8; //@line 5444
  $425 = $ReallocAsyncCtx4 + 20 | 0; //@line 5445
  HEAP32[$425 >> 2] = $10; //@line 5446
  $426 = $ReallocAsyncCtx4 + 24 | 0; //@line 5447
  HEAP32[$426 >> 2] = $12; //@line 5448
  $427 = $ReallocAsyncCtx4 + 28 | 0; //@line 5449
  HEAP32[$427 >> 2] = $14; //@line 5450
  $428 = $ReallocAsyncCtx4 + 32 | 0; //@line 5451
  HEAP32[$428 >> 2] = $16; //@line 5452
  $429 = $ReallocAsyncCtx4 + 36 | 0; //@line 5453
  HEAP32[$429 >> 2] = $18; //@line 5454
  $430 = $ReallocAsyncCtx4 + 40 | 0; //@line 5455
  HEAP32[$430 >> 2] = $20; //@line 5456
  $431 = $ReallocAsyncCtx4 + 44 | 0; //@line 5457
  HEAP32[$431 >> 2] = $22; //@line 5458
  $432 = $ReallocAsyncCtx4 + 48 | 0; //@line 5459
  HEAP32[$432 >> 2] = $24; //@line 5460
  $433 = $ReallocAsyncCtx4 + 52 | 0; //@line 5461
  HEAP32[$433 >> 2] = $26; //@line 5462
  $434 = $ReallocAsyncCtx4 + 56 | 0; //@line 5463
  HEAP32[$434 >> 2] = $28; //@line 5464
  $435 = $ReallocAsyncCtx4 + 60 | 0; //@line 5465
  HEAP32[$435 >> 2] = $30; //@line 5466
  $436 = $ReallocAsyncCtx4 + 64 | 0; //@line 5467
  HEAP32[$436 >> 2] = $32; //@line 5468
  $437 = $ReallocAsyncCtx4 + 68 | 0; //@line 5469
  HEAP32[$437 >> 2] = $34; //@line 5470
  $438 = $ReallocAsyncCtx4 + 72 | 0; //@line 5471
  HEAP32[$438 >> 2] = $36; //@line 5472
  $439 = $ReallocAsyncCtx4 + 76 | 0; //@line 5473
  HEAP32[$439 >> 2] = $38; //@line 5474
  $440 = $ReallocAsyncCtx4 + 80 | 0; //@line 5475
  HEAP32[$440 >> 2] = $40; //@line 5476
  $441 = $ReallocAsyncCtx4 + 84 | 0; //@line 5477
  HEAP32[$441 >> 2] = $42; //@line 5478
  $442 = $ReallocAsyncCtx4 + 88 | 0; //@line 5479
  HEAP8[$442 >> 0] = $413; //@line 5480
  $443 = $ReallocAsyncCtx4 + 92 | 0; //@line 5481
  HEAP32[$443 >> 2] = $44; //@line 5482
  $444 = $ReallocAsyncCtx4 + 96 | 0; //@line 5483
  HEAP32[$444 >> 2] = $46; //@line 5484
  $445 = $ReallocAsyncCtx4 + 100 | 0; //@line 5485
  HEAP32[$445 >> 2] = $48; //@line 5486
  $446 = $ReallocAsyncCtx4 + 104 | 0; //@line 5487
  HEAP32[$446 >> 2] = $50; //@line 5488
  $447 = $ReallocAsyncCtx4 + 108 | 0; //@line 5489
  HEAP32[$447 >> 2] = $52; //@line 5490
  $448 = $ReallocAsyncCtx4 + 112 | 0; //@line 5491
  HEAP32[$448 >> 2] = $54; //@line 5492
  $449 = $ReallocAsyncCtx4 + 116 | 0; //@line 5493
  HEAP32[$449 >> 2] = $56; //@line 5494
  $450 = $ReallocAsyncCtx4 + 120 | 0; //@line 5495
  HEAP32[$450 >> 2] = $58; //@line 5496
  $451 = $ReallocAsyncCtx4 + 124 | 0; //@line 5497
  HEAP32[$451 >> 2] = $60; //@line 5498
  $452 = $ReallocAsyncCtx4 + 128 | 0; //@line 5499
  HEAP32[$452 >> 2] = $62; //@line 5500
  $453 = $ReallocAsyncCtx4 + 132 | 0; //@line 5501
  HEAP32[$453 >> 2] = $64; //@line 5502
  $454 = $ReallocAsyncCtx4 + 136 | 0; //@line 5503
  HEAP32[$454 >> 2] = $66; //@line 5504
  $455 = $ReallocAsyncCtx4 + 140 | 0; //@line 5505
  HEAP32[$455 >> 2] = $68; //@line 5506
  $456 = $ReallocAsyncCtx4 + 144 | 0; //@line 5507
  HEAP8[$456 >> 0] = $70; //@line 5508
  $457 = $ReallocAsyncCtx4 + 148 | 0; //@line 5509
  HEAP32[$457 >> 2] = $72; //@line 5510
  $458 = $ReallocAsyncCtx4 + 152 | 0; //@line 5511
  HEAP32[$458 >> 2] = $74; //@line 5512
  $459 = $ReallocAsyncCtx4 + 156 | 0; //@line 5513
  HEAP32[$459 >> 2] = $76; //@line 5514
  $460 = $ReallocAsyncCtx4 + 160 | 0; //@line 5515
  HEAP32[$460 >> 2] = $78; //@line 5516
  $461 = $ReallocAsyncCtx4 + 164 | 0; //@line 5517
  HEAP32[$461 >> 2] = $80; //@line 5518
  $462 = $ReallocAsyncCtx4 + 168 | 0; //@line 5519
  HEAP32[$462 >> 2] = $82; //@line 5520
  $463 = $ReallocAsyncCtx4 + 172 | 0; //@line 5521
  HEAP32[$463 >> 2] = $84; //@line 5522
  $464 = $ReallocAsyncCtx4 + 176 | 0; //@line 5523
  HEAP32[$464 >> 2] = $86; //@line 5524
  $465 = $ReallocAsyncCtx4 + 180 | 0; //@line 5525
  HEAP32[$465 >> 2] = $88; //@line 5526
  $466 = $ReallocAsyncCtx4 + 184 | 0; //@line 5527
  HEAP32[$466 >> 2] = $90; //@line 5528
  $467 = $ReallocAsyncCtx4 + 188 | 0; //@line 5529
  HEAP32[$467 >> 2] = $92; //@line 5530
  $468 = $ReallocAsyncCtx4 + 192 | 0; //@line 5531
  HEAP32[$468 >> 2] = $94; //@line 5532
  $469 = $ReallocAsyncCtx4 + 196 | 0; //@line 5533
  HEAP32[$469 >> 2] = $98; //@line 5534
  $470 = $ReallocAsyncCtx4 + 200 | 0; //@line 5535
  HEAP32[$470 >> 2] = $100; //@line 5536
  $471 = $ReallocAsyncCtx4 + 204 | 0; //@line 5537
  HEAP32[$471 >> 2] = $102; //@line 5538
  $472 = $ReallocAsyncCtx4 + 208 | 0; //@line 5539
  HEAP32[$472 >> 2] = $104; //@line 5540
  $473 = $ReallocAsyncCtx4 + 212 | 0; //@line 5541
  HEAP32[$473 >> 2] = $106; //@line 5542
  $474 = $ReallocAsyncCtx4 + 216 | 0; //@line 5543
  HEAP32[$474 >> 2] = $108; //@line 5544
  $475 = $ReallocAsyncCtx4 + 220 | 0; //@line 5545
  HEAP8[$475 >> 0] = $110; //@line 5546
  $476 = $ReallocAsyncCtx4 + 221 | 0; //@line 5547
  HEAP8[$476 >> 0] = $112; //@line 5548
  $477 = $ReallocAsyncCtx4 + 224 | 0; //@line 5549
  HEAP32[$477 >> 2] = $114; //@line 5550
  $478 = $ReallocAsyncCtx4 + 228 | 0; //@line 5551
  HEAP32[$478 >> 2] = $116; //@line 5552
  sp = STACKTOP; //@line 5553
  return;
 } else if ((label | 0) == 25) {
  $499 = $$0$be + 2 << 24 >> 24; //@line 5557
  $503 = HEAPU8[$16 + ($119 & 255) >> 0] | 0; //@line 5561
  $505 = $503 >>> 5 & 1; //@line 5564
  $507 = $503 >>> 4 & 1; //@line 5567
  $510 = HEAP32[(HEAP32[$20 >> 2] | 0) + 44 >> 2] | 0; //@line 5570
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(248) | 0; //@line 5571
  $511 = FUNCTION_TABLE_iiii[$510 & 31]($86, $507, $505) | 0; //@line 5572
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 493; //@line 5575
   $512 = $ReallocAsyncCtx5 + 4 | 0; //@line 5576
   HEAP32[$512 >> 2] = $2; //@line 5577
   $513 = $ReallocAsyncCtx5 + 8 | 0; //@line 5578
   HEAP32[$513 >> 2] = $4; //@line 5579
   $514 = $ReallocAsyncCtx5 + 12 | 0; //@line 5580
   HEAP32[$514 >> 2] = $6; //@line 5581
   $515 = $ReallocAsyncCtx5 + 16 | 0; //@line 5582
   HEAP32[$515 >> 2] = $8; //@line 5583
   $516 = $ReallocAsyncCtx5 + 20 | 0; //@line 5584
   HEAP32[$516 >> 2] = $10; //@line 5585
   $517 = $ReallocAsyncCtx5 + 24 | 0; //@line 5586
   HEAP32[$517 >> 2] = $12; //@line 5587
   $518 = $ReallocAsyncCtx5 + 28 | 0; //@line 5588
   HEAP32[$518 >> 2] = $14; //@line 5589
   $519 = $ReallocAsyncCtx5 + 32 | 0; //@line 5590
   HEAP32[$519 >> 2] = $16; //@line 5591
   $520 = $ReallocAsyncCtx5 + 36 | 0; //@line 5592
   HEAP32[$520 >> 2] = $18; //@line 5593
   $521 = $ReallocAsyncCtx5 + 40 | 0; //@line 5594
   HEAP32[$521 >> 2] = $20; //@line 5595
   $522 = $ReallocAsyncCtx5 + 44 | 0; //@line 5596
   HEAP32[$522 >> 2] = $503; //@line 5597
   $523 = $ReallocAsyncCtx5 + 48 | 0; //@line 5598
   HEAP32[$523 >> 2] = $22; //@line 5599
   $524 = $ReallocAsyncCtx5 + 52 | 0; //@line 5600
   HEAP32[$524 >> 2] = $24; //@line 5601
   $525 = $ReallocAsyncCtx5 + 56 | 0; //@line 5602
   HEAP32[$525 >> 2] = $26; //@line 5603
   $526 = $ReallocAsyncCtx5 + 60 | 0; //@line 5604
   HEAP32[$526 >> 2] = $28; //@line 5605
   $527 = $ReallocAsyncCtx5 + 64 | 0; //@line 5606
   HEAP32[$527 >> 2] = $30; //@line 5607
   $528 = $ReallocAsyncCtx5 + 68 | 0; //@line 5608
   HEAP32[$528 >> 2] = $32; //@line 5609
   $529 = $ReallocAsyncCtx5 + 72 | 0; //@line 5610
   HEAP32[$529 >> 2] = $34; //@line 5611
   $530 = $ReallocAsyncCtx5 + 76 | 0; //@line 5612
   HEAP32[$530 >> 2] = $36; //@line 5613
   $531 = $ReallocAsyncCtx5 + 80 | 0; //@line 5614
   HEAP32[$531 >> 2] = $38; //@line 5615
   $532 = $ReallocAsyncCtx5 + 84 | 0; //@line 5616
   HEAP32[$532 >> 2] = $40; //@line 5617
   $533 = $ReallocAsyncCtx5 + 88 | 0; //@line 5618
   HEAP32[$533 >> 2] = $42; //@line 5619
   $534 = $ReallocAsyncCtx5 + 92 | 0; //@line 5620
   HEAP32[$534 >> 2] = $44; //@line 5621
   $535 = $ReallocAsyncCtx5 + 96 | 0; //@line 5622
   HEAP32[$535 >> 2] = $46; //@line 5623
   $536 = $ReallocAsyncCtx5 + 100 | 0; //@line 5624
   HEAP32[$536 >> 2] = $48; //@line 5625
   $537 = $ReallocAsyncCtx5 + 104 | 0; //@line 5626
   HEAP8[$537 >> 0] = $499; //@line 5627
   $538 = $ReallocAsyncCtx5 + 108 | 0; //@line 5628
   HEAP32[$538 >> 2] = $50; //@line 5629
   $539 = $ReallocAsyncCtx5 + 112 | 0; //@line 5630
   HEAP32[$539 >> 2] = $52; //@line 5631
   $540 = $ReallocAsyncCtx5 + 116 | 0; //@line 5632
   HEAP32[$540 >> 2] = $54; //@line 5633
   $541 = $ReallocAsyncCtx5 + 120 | 0; //@line 5634
   HEAP32[$541 >> 2] = $56; //@line 5635
   $542 = $ReallocAsyncCtx5 + 124 | 0; //@line 5636
   HEAP8[$542 >> 0] = $505; //@line 5637
   $543 = $ReallocAsyncCtx5 + 128 | 0; //@line 5638
   HEAP32[$543 >> 2] = $58; //@line 5639
   $544 = $ReallocAsyncCtx5 + 132 | 0; //@line 5640
   HEAP32[$544 >> 2] = $60; //@line 5641
   $545 = $ReallocAsyncCtx5 + 136 | 0; //@line 5642
   HEAP32[$545 >> 2] = $62; //@line 5643
   $546 = $ReallocAsyncCtx5 + 140 | 0; //@line 5644
   HEAP32[$546 >> 2] = $64; //@line 5645
   $547 = $ReallocAsyncCtx5 + 144 | 0; //@line 5646
   HEAP32[$547 >> 2] = $66; //@line 5647
   $548 = $ReallocAsyncCtx5 + 148 | 0; //@line 5648
   HEAP32[$548 >> 2] = $68; //@line 5649
   $549 = $ReallocAsyncCtx5 + 152 | 0; //@line 5650
   HEAP8[$549 >> 0] = $70; //@line 5651
   $550 = $ReallocAsyncCtx5 + 156 | 0; //@line 5652
   HEAP32[$550 >> 2] = $72; //@line 5653
   $551 = $ReallocAsyncCtx5 + 160 | 0; //@line 5654
   HEAP8[$551 >> 0] = $507; //@line 5655
   $552 = $ReallocAsyncCtx5 + 164 | 0; //@line 5656
   HEAP32[$552 >> 2] = $74; //@line 5657
   $553 = $ReallocAsyncCtx5 + 168 | 0; //@line 5658
   HEAP32[$553 >> 2] = $76; //@line 5659
   $554 = $ReallocAsyncCtx5 + 172 | 0; //@line 5660
   HEAP32[$554 >> 2] = $78; //@line 5661
   $555 = $ReallocAsyncCtx5 + 176 | 0; //@line 5662
   HEAP32[$555 >> 2] = $80; //@line 5663
   $556 = $ReallocAsyncCtx5 + 180 | 0; //@line 5664
   HEAP32[$556 >> 2] = $82; //@line 5665
   $557 = $ReallocAsyncCtx5 + 184 | 0; //@line 5666
   HEAP32[$557 >> 2] = $84; //@line 5667
   $558 = $ReallocAsyncCtx5 + 188 | 0; //@line 5668
   HEAP32[$558 >> 2] = $$0107$be; //@line 5669
   $559 = $ReallocAsyncCtx5 + 192 | 0; //@line 5670
   HEAP32[$559 >> 2] = $86; //@line 5671
   $560 = $ReallocAsyncCtx5 + 196 | 0; //@line 5672
   HEAP32[$560 >> 2] = $88; //@line 5673
   $561 = $ReallocAsyncCtx5 + 200 | 0; //@line 5674
   HEAP32[$561 >> 2] = $90; //@line 5675
   $562 = $ReallocAsyncCtx5 + 204 | 0; //@line 5676
   HEAP32[$562 >> 2] = $92; //@line 5677
   $563 = $ReallocAsyncCtx5 + 208 | 0; //@line 5678
   HEAP32[$563 >> 2] = $94; //@line 5679
   $564 = $ReallocAsyncCtx5 + 212 | 0; //@line 5680
   HEAP32[$564 >> 2] = $98; //@line 5681
   $565 = $ReallocAsyncCtx5 + 216 | 0; //@line 5682
   HEAP32[$565 >> 2] = $100; //@line 5683
   $566 = $ReallocAsyncCtx5 + 220 | 0; //@line 5684
   HEAP32[$566 >> 2] = $102; //@line 5685
   $567 = $ReallocAsyncCtx5 + 224 | 0; //@line 5686
   HEAP32[$567 >> 2] = $104; //@line 5687
   $568 = $ReallocAsyncCtx5 + 228 | 0; //@line 5688
   HEAP32[$568 >> 2] = $106; //@line 5689
   $569 = $ReallocAsyncCtx5 + 232 | 0; //@line 5690
   HEAP32[$569 >> 2] = $108; //@line 5691
   $570 = $ReallocAsyncCtx5 + 236 | 0; //@line 5692
   HEAP8[$570 >> 0] = $110; //@line 5693
   $571 = $ReallocAsyncCtx5 + 237 | 0; //@line 5694
   HEAP8[$571 >> 0] = $112; //@line 5695
   $572 = $ReallocAsyncCtx5 + 240 | 0; //@line 5696
   HEAP32[$572 >> 2] = $114; //@line 5697
   $573 = $ReallocAsyncCtx5 + 244 | 0; //@line 5698
   HEAP32[$573 >> 2] = $116; //@line 5699
   sp = STACKTOP; //@line 5700
   return;
  }
  HEAP8[___async_retval >> 0] = $511 & 1; //@line 5705
  ___async_unwind = 0; //@line 5706
  HEAP32[$ReallocAsyncCtx5 >> 2] = 493; //@line 5707
  $512 = $ReallocAsyncCtx5 + 4 | 0; //@line 5708
  HEAP32[$512 >> 2] = $2; //@line 5709
  $513 = $ReallocAsyncCtx5 + 8 | 0; //@line 5710
  HEAP32[$513 >> 2] = $4; //@line 5711
  $514 = $ReallocAsyncCtx5 + 12 | 0; //@line 5712
  HEAP32[$514 >> 2] = $6; //@line 5713
  $515 = $ReallocAsyncCtx5 + 16 | 0; //@line 5714
  HEAP32[$515 >> 2] = $8; //@line 5715
  $516 = $ReallocAsyncCtx5 + 20 | 0; //@line 5716
  HEAP32[$516 >> 2] = $10; //@line 5717
  $517 = $ReallocAsyncCtx5 + 24 | 0; //@line 5718
  HEAP32[$517 >> 2] = $12; //@line 5719
  $518 = $ReallocAsyncCtx5 + 28 | 0; //@line 5720
  HEAP32[$518 >> 2] = $14; //@line 5721
  $519 = $ReallocAsyncCtx5 + 32 | 0; //@line 5722
  HEAP32[$519 >> 2] = $16; //@line 5723
  $520 = $ReallocAsyncCtx5 + 36 | 0; //@line 5724
  HEAP32[$520 >> 2] = $18; //@line 5725
  $521 = $ReallocAsyncCtx5 + 40 | 0; //@line 5726
  HEAP32[$521 >> 2] = $20; //@line 5727
  $522 = $ReallocAsyncCtx5 + 44 | 0; //@line 5728
  HEAP32[$522 >> 2] = $503; //@line 5729
  $523 = $ReallocAsyncCtx5 + 48 | 0; //@line 5730
  HEAP32[$523 >> 2] = $22; //@line 5731
  $524 = $ReallocAsyncCtx5 + 52 | 0; //@line 5732
  HEAP32[$524 >> 2] = $24; //@line 5733
  $525 = $ReallocAsyncCtx5 + 56 | 0; //@line 5734
  HEAP32[$525 >> 2] = $26; //@line 5735
  $526 = $ReallocAsyncCtx5 + 60 | 0; //@line 5736
  HEAP32[$526 >> 2] = $28; //@line 5737
  $527 = $ReallocAsyncCtx5 + 64 | 0; //@line 5738
  HEAP32[$527 >> 2] = $30; //@line 5739
  $528 = $ReallocAsyncCtx5 + 68 | 0; //@line 5740
  HEAP32[$528 >> 2] = $32; //@line 5741
  $529 = $ReallocAsyncCtx5 + 72 | 0; //@line 5742
  HEAP32[$529 >> 2] = $34; //@line 5743
  $530 = $ReallocAsyncCtx5 + 76 | 0; //@line 5744
  HEAP32[$530 >> 2] = $36; //@line 5745
  $531 = $ReallocAsyncCtx5 + 80 | 0; //@line 5746
  HEAP32[$531 >> 2] = $38; //@line 5747
  $532 = $ReallocAsyncCtx5 + 84 | 0; //@line 5748
  HEAP32[$532 >> 2] = $40; //@line 5749
  $533 = $ReallocAsyncCtx5 + 88 | 0; //@line 5750
  HEAP32[$533 >> 2] = $42; //@line 5751
  $534 = $ReallocAsyncCtx5 + 92 | 0; //@line 5752
  HEAP32[$534 >> 2] = $44; //@line 5753
  $535 = $ReallocAsyncCtx5 + 96 | 0; //@line 5754
  HEAP32[$535 >> 2] = $46; //@line 5755
  $536 = $ReallocAsyncCtx5 + 100 | 0; //@line 5756
  HEAP32[$536 >> 2] = $48; //@line 5757
  $537 = $ReallocAsyncCtx5 + 104 | 0; //@line 5758
  HEAP8[$537 >> 0] = $499; //@line 5759
  $538 = $ReallocAsyncCtx5 + 108 | 0; //@line 5760
  HEAP32[$538 >> 2] = $50; //@line 5761
  $539 = $ReallocAsyncCtx5 + 112 | 0; //@line 5762
  HEAP32[$539 >> 2] = $52; //@line 5763
  $540 = $ReallocAsyncCtx5 + 116 | 0; //@line 5764
  HEAP32[$540 >> 2] = $54; //@line 5765
  $541 = $ReallocAsyncCtx5 + 120 | 0; //@line 5766
  HEAP32[$541 >> 2] = $56; //@line 5767
  $542 = $ReallocAsyncCtx5 + 124 | 0; //@line 5768
  HEAP8[$542 >> 0] = $505; //@line 5769
  $543 = $ReallocAsyncCtx5 + 128 | 0; //@line 5770
  HEAP32[$543 >> 2] = $58; //@line 5771
  $544 = $ReallocAsyncCtx5 + 132 | 0; //@line 5772
  HEAP32[$544 >> 2] = $60; //@line 5773
  $545 = $ReallocAsyncCtx5 + 136 | 0; //@line 5774
  HEAP32[$545 >> 2] = $62; //@line 5775
  $546 = $ReallocAsyncCtx5 + 140 | 0; //@line 5776
  HEAP32[$546 >> 2] = $64; //@line 5777
  $547 = $ReallocAsyncCtx5 + 144 | 0; //@line 5778
  HEAP32[$547 >> 2] = $66; //@line 5779
  $548 = $ReallocAsyncCtx5 + 148 | 0; //@line 5780
  HEAP32[$548 >> 2] = $68; //@line 5781
  $549 = $ReallocAsyncCtx5 + 152 | 0; //@line 5782
  HEAP8[$549 >> 0] = $70; //@line 5783
  $550 = $ReallocAsyncCtx5 + 156 | 0; //@line 5784
  HEAP32[$550 >> 2] = $72; //@line 5785
  $551 = $ReallocAsyncCtx5 + 160 | 0; //@line 5786
  HEAP8[$551 >> 0] = $507; //@line 5787
  $552 = $ReallocAsyncCtx5 + 164 | 0; //@line 5788
  HEAP32[$552 >> 2] = $74; //@line 5789
  $553 = $ReallocAsyncCtx5 + 168 | 0; //@line 5790
  HEAP32[$553 >> 2] = $76; //@line 5791
  $554 = $ReallocAsyncCtx5 + 172 | 0; //@line 5792
  HEAP32[$554 >> 2] = $78; //@line 5793
  $555 = $ReallocAsyncCtx5 + 176 | 0; //@line 5794
  HEAP32[$555 >> 2] = $80; //@line 5795
  $556 = $ReallocAsyncCtx5 + 180 | 0; //@line 5796
  HEAP32[$556 >> 2] = $82; //@line 5797
  $557 = $ReallocAsyncCtx5 + 184 | 0; //@line 5798
  HEAP32[$557 >> 2] = $84; //@line 5799
  $558 = $ReallocAsyncCtx5 + 188 | 0; //@line 5800
  HEAP32[$558 >> 2] = $$0107$be; //@line 5801
  $559 = $ReallocAsyncCtx5 + 192 | 0; //@line 5802
  HEAP32[$559 >> 2] = $86; //@line 5803
  $560 = $ReallocAsyncCtx5 + 196 | 0; //@line 5804
  HEAP32[$560 >> 2] = $88; //@line 5805
  $561 = $ReallocAsyncCtx5 + 200 | 0; //@line 5806
  HEAP32[$561 >> 2] = $90; //@line 5807
  $562 = $ReallocAsyncCtx5 + 204 | 0; //@line 5808
  HEAP32[$562 >> 2] = $92; //@line 5809
  $563 = $ReallocAsyncCtx5 + 208 | 0; //@line 5810
  HEAP32[$563 >> 2] = $94; //@line 5811
  $564 = $ReallocAsyncCtx5 + 212 | 0; //@line 5812
  HEAP32[$564 >> 2] = $98; //@line 5813
  $565 = $ReallocAsyncCtx5 + 216 | 0; //@line 5814
  HEAP32[$565 >> 2] = $100; //@line 5815
  $566 = $ReallocAsyncCtx5 + 220 | 0; //@line 5816
  HEAP32[$566 >> 2] = $102; //@line 5817
  $567 = $ReallocAsyncCtx5 + 224 | 0; //@line 5818
  HEAP32[$567 >> 2] = $104; //@line 5819
  $568 = $ReallocAsyncCtx5 + 228 | 0; //@line 5820
  HEAP32[$568 >> 2] = $106; //@line 5821
  $569 = $ReallocAsyncCtx5 + 232 | 0; //@line 5822
  HEAP32[$569 >> 2] = $108; //@line 5823
  $570 = $ReallocAsyncCtx5 + 236 | 0; //@line 5824
  HEAP8[$570 >> 0] = $110; //@line 5825
  $571 = $ReallocAsyncCtx5 + 237 | 0; //@line 5826
  HEAP8[$571 >> 0] = $112; //@line 5827
  $572 = $ReallocAsyncCtx5 + 240 | 0; //@line 5828
  HEAP32[$572 >> 2] = $114; //@line 5829
  $573 = $ReallocAsyncCtx5 + 244 | 0; //@line 5830
  HEAP32[$573 >> 2] = $116; //@line 5831
  sp = STACKTOP; //@line 5832
  return;
 } else if ((label | 0) == 28) {
  $578 = HEAP8[$16 + ($119 & 255) >> 0] | 0; //@line 5839
  $591 = $$0$be + 5 << 24 >> 24; //@line 5852
  $598 = (HEAPU8[$16 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$16 + ($$0$be + 2 & 255) >> 0] | HEAPU8[$16 + ($$0$be + 4 & 255) >> 0] << 16) * 100 | 0; //@line 5859
  $601 = HEAP32[(HEAP32[$36 >> 2] | 0) + 48 >> 2] | 0; //@line 5862
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(232) | 0; //@line 5863
  $602 = FUNCTION_TABLE_iiii[$601 & 31]($86, $578, $598) | 0; //@line 5864
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 494; //@line 5867
   $603 = $ReallocAsyncCtx6 + 4 | 0; //@line 5868
   HEAP32[$603 >> 2] = $2; //@line 5869
   $604 = $ReallocAsyncCtx6 + 8 | 0; //@line 5870
   HEAP32[$604 >> 2] = $4; //@line 5871
   $605 = $ReallocAsyncCtx6 + 12 | 0; //@line 5872
   HEAP32[$605 >> 2] = $6; //@line 5873
   $606 = $ReallocAsyncCtx6 + 16 | 0; //@line 5874
   HEAP32[$606 >> 2] = $8; //@line 5875
   $607 = $ReallocAsyncCtx6 + 20 | 0; //@line 5876
   HEAP32[$607 >> 2] = $10; //@line 5877
   $608 = $ReallocAsyncCtx6 + 24 | 0; //@line 5878
   HEAP32[$608 >> 2] = $12; //@line 5879
   $609 = $ReallocAsyncCtx6 + 28 | 0; //@line 5880
   HEAP32[$609 >> 2] = $14; //@line 5881
   $610 = $ReallocAsyncCtx6 + 32 | 0; //@line 5882
   HEAP32[$610 >> 2] = $16; //@line 5883
   $611 = $ReallocAsyncCtx6 + 36 | 0; //@line 5884
   HEAP32[$611 >> 2] = $18; //@line 5885
   $612 = $ReallocAsyncCtx6 + 40 | 0; //@line 5886
   HEAP32[$612 >> 2] = $20; //@line 5887
   $613 = $ReallocAsyncCtx6 + 44 | 0; //@line 5888
   HEAP8[$613 >> 0] = $591; //@line 5889
   $614 = $ReallocAsyncCtx6 + 48 | 0; //@line 5890
   HEAP32[$614 >> 2] = $22; //@line 5891
   $615 = $ReallocAsyncCtx6 + 52 | 0; //@line 5892
   HEAP32[$615 >> 2] = $24; //@line 5893
   $616 = $ReallocAsyncCtx6 + 56 | 0; //@line 5894
   HEAP32[$616 >> 2] = $26; //@line 5895
   $617 = $ReallocAsyncCtx6 + 60 | 0; //@line 5896
   HEAP32[$617 >> 2] = $28; //@line 5897
   $618 = $ReallocAsyncCtx6 + 64 | 0; //@line 5898
   HEAP32[$618 >> 2] = $30; //@line 5899
   $619 = $ReallocAsyncCtx6 + 68 | 0; //@line 5900
   HEAP32[$619 >> 2] = $32; //@line 5901
   $620 = $ReallocAsyncCtx6 + 72 | 0; //@line 5902
   HEAP32[$620 >> 2] = $34; //@line 5903
   $621 = $ReallocAsyncCtx6 + 76 | 0; //@line 5904
   HEAP32[$621 >> 2] = $36; //@line 5905
   $622 = $ReallocAsyncCtx6 + 80 | 0; //@line 5906
   HEAP32[$622 >> 2] = $38; //@line 5907
   $623 = $ReallocAsyncCtx6 + 84 | 0; //@line 5908
   HEAP32[$623 >> 2] = $40; //@line 5909
   $624 = $ReallocAsyncCtx6 + 88 | 0; //@line 5910
   HEAP32[$624 >> 2] = $42; //@line 5911
   $625 = $ReallocAsyncCtx6 + 92 | 0; //@line 5912
   HEAP32[$625 >> 2] = $44; //@line 5913
   $626 = $ReallocAsyncCtx6 + 96 | 0; //@line 5914
   HEAP32[$626 >> 2] = $46; //@line 5915
   $627 = $ReallocAsyncCtx6 + 100 | 0; //@line 5916
   HEAP32[$627 >> 2] = $48; //@line 5917
   $628 = $ReallocAsyncCtx6 + 104 | 0; //@line 5918
   HEAP32[$628 >> 2] = $50; //@line 5919
   $629 = $ReallocAsyncCtx6 + 108 | 0; //@line 5920
   HEAP32[$629 >> 2] = $52; //@line 5921
   $630 = $ReallocAsyncCtx6 + 112 | 0; //@line 5922
   HEAP32[$630 >> 2] = $54; //@line 5923
   $631 = $ReallocAsyncCtx6 + 116 | 0; //@line 5924
   HEAP32[$631 >> 2] = $56; //@line 5925
   $632 = $ReallocAsyncCtx6 + 120 | 0; //@line 5926
   HEAP32[$632 >> 2] = $58; //@line 5927
   $633 = $ReallocAsyncCtx6 + 124 | 0; //@line 5928
   HEAP32[$633 >> 2] = $60; //@line 5929
   $634 = $ReallocAsyncCtx6 + 128 | 0; //@line 5930
   HEAP32[$634 >> 2] = $62; //@line 5931
   $635 = $ReallocAsyncCtx6 + 132 | 0; //@line 5932
   HEAP32[$635 >> 2] = $64; //@line 5933
   $636 = $ReallocAsyncCtx6 + 136 | 0; //@line 5934
   HEAP32[$636 >> 2] = $66; //@line 5935
   $637 = $ReallocAsyncCtx6 + 140 | 0; //@line 5936
   HEAP32[$637 >> 2] = $68; //@line 5937
   $638 = $ReallocAsyncCtx6 + 144 | 0; //@line 5938
   HEAP8[$638 >> 0] = $70; //@line 5939
   $639 = $ReallocAsyncCtx6 + 148 | 0; //@line 5940
   HEAP32[$639 >> 2] = $72; //@line 5941
   $640 = $ReallocAsyncCtx6 + 152 | 0; //@line 5942
   HEAP32[$640 >> 2] = $74; //@line 5943
   $641 = $ReallocAsyncCtx6 + 156 | 0; //@line 5944
   HEAP32[$641 >> 2] = $76; //@line 5945
   $642 = $ReallocAsyncCtx6 + 160 | 0; //@line 5946
   HEAP32[$642 >> 2] = $78; //@line 5947
   $643 = $ReallocAsyncCtx6 + 164 | 0; //@line 5948
   HEAP32[$643 >> 2] = $80; //@line 5949
   $644 = $ReallocAsyncCtx6 + 168 | 0; //@line 5950
   HEAP32[$644 >> 2] = $82; //@line 5951
   $645 = $ReallocAsyncCtx6 + 172 | 0; //@line 5952
   HEAP32[$645 >> 2] = $84; //@line 5953
   $646 = $ReallocAsyncCtx6 + 176 | 0; //@line 5954
   HEAP32[$646 >> 2] = $86; //@line 5955
   $647 = $ReallocAsyncCtx6 + 180 | 0; //@line 5956
   HEAP32[$647 >> 2] = $88; //@line 5957
   $648 = $ReallocAsyncCtx6 + 184 | 0; //@line 5958
   HEAP32[$648 >> 2] = $90; //@line 5959
   $649 = $ReallocAsyncCtx6 + 188 | 0; //@line 5960
   HEAP32[$649 >> 2] = $92; //@line 5961
   $650 = $ReallocAsyncCtx6 + 192 | 0; //@line 5962
   HEAP32[$650 >> 2] = $94; //@line 5963
   $651 = $ReallocAsyncCtx6 + 196 | 0; //@line 5964
   HEAP32[$651 >> 2] = $98; //@line 5965
   $652 = $ReallocAsyncCtx6 + 200 | 0; //@line 5966
   HEAP32[$652 >> 2] = $100; //@line 5967
   $653 = $ReallocAsyncCtx6 + 204 | 0; //@line 5968
   HEAP32[$653 >> 2] = $102; //@line 5969
   $654 = $ReallocAsyncCtx6 + 208 | 0; //@line 5970
   HEAP32[$654 >> 2] = $104; //@line 5971
   $655 = $ReallocAsyncCtx6 + 212 | 0; //@line 5972
   HEAP32[$655 >> 2] = $106; //@line 5973
   $656 = $ReallocAsyncCtx6 + 216 | 0; //@line 5974
   HEAP32[$656 >> 2] = $108; //@line 5975
   $657 = $ReallocAsyncCtx6 + 220 | 0; //@line 5976
   HEAP8[$657 >> 0] = $110; //@line 5977
   $658 = $ReallocAsyncCtx6 + 221 | 0; //@line 5978
   HEAP8[$658 >> 0] = $112; //@line 5979
   $659 = $ReallocAsyncCtx6 + 224 | 0; //@line 5980
   HEAP32[$659 >> 2] = $114; //@line 5981
   $660 = $ReallocAsyncCtx6 + 228 | 0; //@line 5982
   HEAP32[$660 >> 2] = $116; //@line 5983
   sp = STACKTOP; //@line 5984
   return;
  }
  HEAP8[___async_retval >> 0] = $602; //@line 5988
  ___async_unwind = 0; //@line 5989
  HEAP32[$ReallocAsyncCtx6 >> 2] = 494; //@line 5990
  $603 = $ReallocAsyncCtx6 + 4 | 0; //@line 5991
  HEAP32[$603 >> 2] = $2; //@line 5992
  $604 = $ReallocAsyncCtx6 + 8 | 0; //@line 5993
  HEAP32[$604 >> 2] = $4; //@line 5994
  $605 = $ReallocAsyncCtx6 + 12 | 0; //@line 5995
  HEAP32[$605 >> 2] = $6; //@line 5996
  $606 = $ReallocAsyncCtx6 + 16 | 0; //@line 5997
  HEAP32[$606 >> 2] = $8; //@line 5998
  $607 = $ReallocAsyncCtx6 + 20 | 0; //@line 5999
  HEAP32[$607 >> 2] = $10; //@line 6000
  $608 = $ReallocAsyncCtx6 + 24 | 0; //@line 6001
  HEAP32[$608 >> 2] = $12; //@line 6002
  $609 = $ReallocAsyncCtx6 + 28 | 0; //@line 6003
  HEAP32[$609 >> 2] = $14; //@line 6004
  $610 = $ReallocAsyncCtx6 + 32 | 0; //@line 6005
  HEAP32[$610 >> 2] = $16; //@line 6006
  $611 = $ReallocAsyncCtx6 + 36 | 0; //@line 6007
  HEAP32[$611 >> 2] = $18; //@line 6008
  $612 = $ReallocAsyncCtx6 + 40 | 0; //@line 6009
  HEAP32[$612 >> 2] = $20; //@line 6010
  $613 = $ReallocAsyncCtx6 + 44 | 0; //@line 6011
  HEAP8[$613 >> 0] = $591; //@line 6012
  $614 = $ReallocAsyncCtx6 + 48 | 0; //@line 6013
  HEAP32[$614 >> 2] = $22; //@line 6014
  $615 = $ReallocAsyncCtx6 + 52 | 0; //@line 6015
  HEAP32[$615 >> 2] = $24; //@line 6016
  $616 = $ReallocAsyncCtx6 + 56 | 0; //@line 6017
  HEAP32[$616 >> 2] = $26; //@line 6018
  $617 = $ReallocAsyncCtx6 + 60 | 0; //@line 6019
  HEAP32[$617 >> 2] = $28; //@line 6020
  $618 = $ReallocAsyncCtx6 + 64 | 0; //@line 6021
  HEAP32[$618 >> 2] = $30; //@line 6022
  $619 = $ReallocAsyncCtx6 + 68 | 0; //@line 6023
  HEAP32[$619 >> 2] = $32; //@line 6024
  $620 = $ReallocAsyncCtx6 + 72 | 0; //@line 6025
  HEAP32[$620 >> 2] = $34; //@line 6026
  $621 = $ReallocAsyncCtx6 + 76 | 0; //@line 6027
  HEAP32[$621 >> 2] = $36; //@line 6028
  $622 = $ReallocAsyncCtx6 + 80 | 0; //@line 6029
  HEAP32[$622 >> 2] = $38; //@line 6030
  $623 = $ReallocAsyncCtx6 + 84 | 0; //@line 6031
  HEAP32[$623 >> 2] = $40; //@line 6032
  $624 = $ReallocAsyncCtx6 + 88 | 0; //@line 6033
  HEAP32[$624 >> 2] = $42; //@line 6034
  $625 = $ReallocAsyncCtx6 + 92 | 0; //@line 6035
  HEAP32[$625 >> 2] = $44; //@line 6036
  $626 = $ReallocAsyncCtx6 + 96 | 0; //@line 6037
  HEAP32[$626 >> 2] = $46; //@line 6038
  $627 = $ReallocAsyncCtx6 + 100 | 0; //@line 6039
  HEAP32[$627 >> 2] = $48; //@line 6040
  $628 = $ReallocAsyncCtx6 + 104 | 0; //@line 6041
  HEAP32[$628 >> 2] = $50; //@line 6042
  $629 = $ReallocAsyncCtx6 + 108 | 0; //@line 6043
  HEAP32[$629 >> 2] = $52; //@line 6044
  $630 = $ReallocAsyncCtx6 + 112 | 0; //@line 6045
  HEAP32[$630 >> 2] = $54; //@line 6046
  $631 = $ReallocAsyncCtx6 + 116 | 0; //@line 6047
  HEAP32[$631 >> 2] = $56; //@line 6048
  $632 = $ReallocAsyncCtx6 + 120 | 0; //@line 6049
  HEAP32[$632 >> 2] = $58; //@line 6050
  $633 = $ReallocAsyncCtx6 + 124 | 0; //@line 6051
  HEAP32[$633 >> 2] = $60; //@line 6052
  $634 = $ReallocAsyncCtx6 + 128 | 0; //@line 6053
  HEAP32[$634 >> 2] = $62; //@line 6054
  $635 = $ReallocAsyncCtx6 + 132 | 0; //@line 6055
  HEAP32[$635 >> 2] = $64; //@line 6056
  $636 = $ReallocAsyncCtx6 + 136 | 0; //@line 6057
  HEAP32[$636 >> 2] = $66; //@line 6058
  $637 = $ReallocAsyncCtx6 + 140 | 0; //@line 6059
  HEAP32[$637 >> 2] = $68; //@line 6060
  $638 = $ReallocAsyncCtx6 + 144 | 0; //@line 6061
  HEAP8[$638 >> 0] = $70; //@line 6062
  $639 = $ReallocAsyncCtx6 + 148 | 0; //@line 6063
  HEAP32[$639 >> 2] = $72; //@line 6064
  $640 = $ReallocAsyncCtx6 + 152 | 0; //@line 6065
  HEAP32[$640 >> 2] = $74; //@line 6066
  $641 = $ReallocAsyncCtx6 + 156 | 0; //@line 6067
  HEAP32[$641 >> 2] = $76; //@line 6068
  $642 = $ReallocAsyncCtx6 + 160 | 0; //@line 6069
  HEAP32[$642 >> 2] = $78; //@line 6070
  $643 = $ReallocAsyncCtx6 + 164 | 0; //@line 6071
  HEAP32[$643 >> 2] = $80; //@line 6072
  $644 = $ReallocAsyncCtx6 + 168 | 0; //@line 6073
  HEAP32[$644 >> 2] = $82; //@line 6074
  $645 = $ReallocAsyncCtx6 + 172 | 0; //@line 6075
  HEAP32[$645 >> 2] = $84; //@line 6076
  $646 = $ReallocAsyncCtx6 + 176 | 0; //@line 6077
  HEAP32[$646 >> 2] = $86; //@line 6078
  $647 = $ReallocAsyncCtx6 + 180 | 0; //@line 6079
  HEAP32[$647 >> 2] = $88; //@line 6080
  $648 = $ReallocAsyncCtx6 + 184 | 0; //@line 6081
  HEAP32[$648 >> 2] = $90; //@line 6082
  $649 = $ReallocAsyncCtx6 + 188 | 0; //@line 6083
  HEAP32[$649 >> 2] = $92; //@line 6084
  $650 = $ReallocAsyncCtx6 + 192 | 0; //@line 6085
  HEAP32[$650 >> 2] = $94; //@line 6086
  $651 = $ReallocAsyncCtx6 + 196 | 0; //@line 6087
  HEAP32[$651 >> 2] = $98; //@line 6088
  $652 = $ReallocAsyncCtx6 + 200 | 0; //@line 6089
  HEAP32[$652 >> 2] = $100; //@line 6090
  $653 = $ReallocAsyncCtx6 + 204 | 0; //@line 6091
  HEAP32[$653 >> 2] = $102; //@line 6092
  $654 = $ReallocAsyncCtx6 + 208 | 0; //@line 6093
  HEAP32[$654 >> 2] = $104; //@line 6094
  $655 = $ReallocAsyncCtx6 + 212 | 0; //@line 6095
  HEAP32[$655 >> 2] = $106; //@line 6096
  $656 = $ReallocAsyncCtx6 + 216 | 0; //@line 6097
  HEAP32[$656 >> 2] = $108; //@line 6098
  $657 = $ReallocAsyncCtx6 + 220 | 0; //@line 6099
  HEAP8[$657 >> 0] = $110; //@line 6100
  $658 = $ReallocAsyncCtx6 + 221 | 0; //@line 6101
  HEAP8[$658 >> 0] = $112; //@line 6102
  $659 = $ReallocAsyncCtx6 + 224 | 0; //@line 6103
  HEAP32[$659 >> 2] = $114; //@line 6104
  $660 = $ReallocAsyncCtx6 + 228 | 0; //@line 6105
  HEAP32[$660 >> 2] = $116; //@line 6106
  sp = STACKTOP; //@line 6107
  return;
 } else if ((label | 0) == 31) {
  HEAP32[___async_retval >> 2] = $$0107$be; //@line 6112
  return;
 }
}
function _malloc($0) {
 $0 = $0 | 0;
 var $$$0192$i = 0, $$$0193$i = 0, $$$4351$i = 0, $$$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i17$i = 0, $$0189$i = 0, $$0192$lcssa$i = 0, $$01926$i = 0, $$0193$lcssa$i = 0, $$01935$i = 0, $$0197 = 0, $$0199 = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$0211$i$i = 0, $$0212$i$i = 0, $$024367$i = 0, $$0287$i$i = 0, $$0288$i$i = 0, $$0289$i$i = 0, $$0295$i$i = 0, $$0296$i$i = 0, $$0342$i = 0, $$0344$i = 0, $$0345$i = 0, $$0347$i = 0, $$0353$i = 0, $$0358$i = 0, $$0359$i = 0, $$0361$i = 0, $$0362$i = 0, $$0368$i = 0, $$1196$i = 0, $$1198$i = 0, $$124466$i = 0, $$1291$i$i = 0, $$1293$i$i = 0, $$1343$i = 0, $$1348$i = 0, $$1363$i = 0, $$1370$i = 0, $$1374$i = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2355$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i203 = 0, $$3350$i = 0, $$3372$i = 0, $$4$lcssa$i = 0, $$4$ph$i = 0, $$414$i = 0, $$4236$i = 0, $$4351$lcssa$i = 0, $$435113$i = 0, $$4357$$4$i = 0, $$4357$ph$i = 0, $$435712$i = 0, $$723947$i = 0, $$748$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i19$iZ2D = 0, $$pre$phi$i211Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi11$i$iZ2D = 0, $$pre$phiZ2D = 0, $1 = 0, $1004 = 0, $101 = 0, $1010 = 0, $1013 = 0, $1014 = 0, $102 = 0, $1032 = 0, $1034 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1052 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $108 = 0, $112 = 0, $114 = 0, $115 = 0, $117 = 0, $119 = 0, $121 = 0, $123 = 0, $125 = 0, $127 = 0, $129 = 0, $134 = 0, $138 = 0, $14 = 0, $143 = 0, $146 = 0, $149 = 0, $150 = 0, $157 = 0, $159 = 0, $16 = 0, $162 = 0, $164 = 0, $167 = 0, $169 = 0, $17 = 0, $172 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $18 = 0, $181 = 0, $182 = 0, $184 = 0, $185 = 0, $19 = 0, $190 = 0, $191 = 0, $20 = 0, $204 = 0, $208 = 0, $214 = 0, $221 = 0, $225 = 0, $234 = 0, $235 = 0, $237 = 0, $238 = 0, $242 = 0, $243 = 0, $251 = 0, $252 = 0, $253 = 0, $255 = 0, $256 = 0, $261 = 0, $262 = 0, $265 = 0, $267 = 0, $27 = 0, $270 = 0, $275 = 0, $282 = 0, $292 = 0, $296 = 0, $30 = 0, $302 = 0, $306 = 0, $309 = 0, $313 = 0, $315 = 0, $316 = 0, $318 = 0, $320 = 0, $322 = 0, $324 = 0, $326 = 0, $328 = 0, $330 = 0, $34 = 0, $340 = 0, $341 = 0, $352 = 0, $354 = 0, $357 = 0, $359 = 0, $362 = 0, $364 = 0, $367 = 0, $37 = 0, $370 = 0, $371 = 0, $373 = 0, $374 = 0, $376 = 0, $377 = 0, $379 = 0, $380 = 0, $385 = 0, $386 = 0, $391 = 0, $399 = 0, $403 = 0, $409 = 0, $41 = 0, $416 = 0, $420 = 0, $428 = 0, $431 = 0, $432 = 0, $433 = 0, $437 = 0, $438 = 0, $44 = 0, $444 = 0, $449 = 0, $450 = 0, $453 = 0, $455 = 0, $458 = 0, $463 = 0, $469 = 0, $47 = 0, $471 = 0, $473 = 0, $475 = 0, $49 = 0, $492 = 0, $494 = 0, $50 = 0, $501 = 0, $502 = 0, $503 = 0, $512 = 0, $514 = 0, $515 = 0, $517 = 0, $52 = 0, $526 = 0, $530 = 0, $532 = 0, $533 = 0, $534 = 0, $54 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $552 = 0, $554 = 0, $555 = 0, $56 = 0, $561 = 0, $563 = 0, $565 = 0, $570 = 0, $572 = 0, $574 = 0, $575 = 0, $576 = 0, $58 = 0, $584 = 0, $585 = 0, $588 = 0, $592 = 0, $595 = 0, $597 = 0, $6 = 0, $60 = 0, $603 = 0, $607 = 0, $611 = 0, $62 = 0, $620 = 0, $621 = 0, $627 = 0, $629 = 0, $633 = 0, $636 = 0, $638 = 0, $64 = 0, $642 = 0, $644 = 0, $649 = 0, $650 = 0, $651 = 0, $657 = 0, $658 = 0, $659 = 0, $663 = 0, $67 = 0, $673 = 0, $675 = 0, $680 = 0, $681 = 0, $682 = 0, $688 = 0, $69 = 0, $690 = 0, $694 = 0, $7 = 0, $70 = 0, $700 = 0, $704 = 0, $71 = 0, $710 = 0, $712 = 0, $718 = 0, $72 = 0, $722 = 0, $723 = 0, $728 = 0, $73 = 0, $734 = 0, $739 = 0, $742 = 0, $743 = 0, $746 = 0, $748 = 0, $750 = 0, $753 = 0, $764 = 0, $769 = 0, $77 = 0, $771 = 0, $774 = 0, $776 = 0, $779 = 0, $782 = 0, $783 = 0, $784 = 0, $786 = 0, $788 = 0, $789 = 0, $791 = 0, $792 = 0, $797 = 0, $798 = 0, $8 = 0, $80 = 0, $812 = 0, $815 = 0, $816 = 0, $822 = 0, $83 = 0, $830 = 0, $836 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $845 = 0, $846 = 0, $852 = 0, $857 = 0, $858 = 0, $861 = 0, $863 = 0, $866 = 0, $87 = 0, $871 = 0, $877 = 0, $879 = 0, $881 = 0, $882 = 0, $9 = 0, $900 = 0, $902 = 0, $909 = 0, $910 = 0, $911 = 0, $919 = 0, $92 = 0, $923 = 0, $927 = 0, $929 = 0, $93 = 0, $935 = 0, $936 = 0, $938 = 0, $939 = 0, $940 = 0, $941 = 0, $943 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $956 = 0, $958 = 0, $96 = 0, $964 = 0, $969 = 0, $972 = 0, $973 = 0, $974 = 0, $978 = 0, $979 = 0, $98 = 0, $985 = 0, $990 = 0, $991 = 0, $994 = 0, $996 = 0, $999 = 0, label = 0, sp = 0, $958$looptemp = 0;
 sp = STACKTOP; //@line 8254
 STACKTOP = STACKTOP + 16 | 0; //@line 8255
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 8255
 $1 = sp; //@line 8256
 do {
  if ($0 >>> 0 < 245) {
   $6 = $0 >>> 0 < 11 ? 16 : $0 + 11 & -8; //@line 8263
   $7 = $6 >>> 3; //@line 8264
   $8 = HEAP32[5969] | 0; //@line 8265
   $9 = $8 >>> $7; //@line 8266
   if ($9 & 3 | 0) {
    $14 = ($9 & 1 ^ 1) + $7 | 0; //@line 8272
    $16 = 23916 + ($14 << 1 << 2) | 0; //@line 8274
    $17 = $16 + 8 | 0; //@line 8275
    $18 = HEAP32[$17 >> 2] | 0; //@line 8276
    $19 = $18 + 8 | 0; //@line 8277
    $20 = HEAP32[$19 >> 2] | 0; //@line 8278
    do {
     if (($20 | 0) == ($16 | 0)) {
      HEAP32[5969] = $8 & ~(1 << $14); //@line 8285
     } else {
      if ((HEAP32[5973] | 0) >>> 0 > $20 >>> 0) {
       _abort(); //@line 8290
      }
      $27 = $20 + 12 | 0; //@line 8293
      if ((HEAP32[$27 >> 2] | 0) == ($18 | 0)) {
       HEAP32[$27 >> 2] = $16; //@line 8297
       HEAP32[$17 >> 2] = $20; //@line 8298
       break;
      } else {
       _abort(); //@line 8301
      }
     }
    } while (0);
    $30 = $14 << 3; //@line 8306
    HEAP32[$18 + 4 >> 2] = $30 | 3; //@line 8309
    $34 = $18 + $30 + 4 | 0; //@line 8311
    HEAP32[$34 >> 2] = HEAP32[$34 >> 2] | 1; //@line 8314
    $$0 = $19; //@line 8315
    STACKTOP = sp; //@line 8316
    return $$0 | 0; //@line 8316
   }
   $37 = HEAP32[5971] | 0; //@line 8318
   if ($6 >>> 0 > $37 >>> 0) {
    if ($9 | 0) {
     $41 = 2 << $7; //@line 8324
     $44 = $9 << $7 & ($41 | 0 - $41); //@line 8327
     $47 = ($44 & 0 - $44) + -1 | 0; //@line 8330
     $49 = $47 >>> 12 & 16; //@line 8332
     $50 = $47 >>> $49; //@line 8333
     $52 = $50 >>> 5 & 8; //@line 8335
     $54 = $50 >>> $52; //@line 8337
     $56 = $54 >>> 2 & 4; //@line 8339
     $58 = $54 >>> $56; //@line 8341
     $60 = $58 >>> 1 & 2; //@line 8343
     $62 = $58 >>> $60; //@line 8345
     $64 = $62 >>> 1 & 1; //@line 8347
     $67 = ($52 | $49 | $56 | $60 | $64) + ($62 >>> $64) | 0; //@line 8350
     $69 = 23916 + ($67 << 1 << 2) | 0; //@line 8352
     $70 = $69 + 8 | 0; //@line 8353
     $71 = HEAP32[$70 >> 2] | 0; //@line 8354
     $72 = $71 + 8 | 0; //@line 8355
     $73 = HEAP32[$72 >> 2] | 0; //@line 8356
     do {
      if (($73 | 0) == ($69 | 0)) {
       $77 = $8 & ~(1 << $67); //@line 8362
       HEAP32[5969] = $77; //@line 8363
       $98 = $77; //@line 8364
      } else {
       if ((HEAP32[5973] | 0) >>> 0 > $73 >>> 0) {
        _abort(); //@line 8369
       }
       $80 = $73 + 12 | 0; //@line 8372
       if ((HEAP32[$80 >> 2] | 0) == ($71 | 0)) {
        HEAP32[$80 >> 2] = $69; //@line 8376
        HEAP32[$70 >> 2] = $73; //@line 8377
        $98 = $8; //@line 8378
        break;
       } else {
        _abort(); //@line 8381
       }
      }
     } while (0);
     $83 = $67 << 3; //@line 8386
     $84 = $83 - $6 | 0; //@line 8387
     HEAP32[$71 + 4 >> 2] = $6 | 3; //@line 8390
     $87 = $71 + $6 | 0; //@line 8391
     HEAP32[$87 + 4 >> 2] = $84 | 1; //@line 8394
     HEAP32[$71 + $83 >> 2] = $84; //@line 8396
     if ($37 | 0) {
      $92 = HEAP32[5974] | 0; //@line 8399
      $93 = $37 >>> 3; //@line 8400
      $95 = 23916 + ($93 << 1 << 2) | 0; //@line 8402
      $96 = 1 << $93; //@line 8403
      if (!($98 & $96)) {
       HEAP32[5969] = $98 | $96; //@line 8408
       $$0199 = $95; //@line 8410
       $$pre$phiZ2D = $95 + 8 | 0; //@line 8410
      } else {
       $101 = $95 + 8 | 0; //@line 8412
       $102 = HEAP32[$101 >> 2] | 0; //@line 8413
       if ((HEAP32[5973] | 0) >>> 0 > $102 >>> 0) {
        _abort(); //@line 8417
       } else {
        $$0199 = $102; //@line 8420
        $$pre$phiZ2D = $101; //@line 8420
       }
      }
      HEAP32[$$pre$phiZ2D >> 2] = $92; //@line 8423
      HEAP32[$$0199 + 12 >> 2] = $92; //@line 8425
      HEAP32[$92 + 8 >> 2] = $$0199; //@line 8427
      HEAP32[$92 + 12 >> 2] = $95; //@line 8429
     }
     HEAP32[5971] = $84; //@line 8431
     HEAP32[5974] = $87; //@line 8432
     $$0 = $72; //@line 8433
     STACKTOP = sp; //@line 8434
     return $$0 | 0; //@line 8434
    }
    $108 = HEAP32[5970] | 0; //@line 8436
    if (!$108) {
     $$0197 = $6; //@line 8439
    } else {
     $112 = ($108 & 0 - $108) + -1 | 0; //@line 8443
     $114 = $112 >>> 12 & 16; //@line 8445
     $115 = $112 >>> $114; //@line 8446
     $117 = $115 >>> 5 & 8; //@line 8448
     $119 = $115 >>> $117; //@line 8450
     $121 = $119 >>> 2 & 4; //@line 8452
     $123 = $119 >>> $121; //@line 8454
     $125 = $123 >>> 1 & 2; //@line 8456
     $127 = $123 >>> $125; //@line 8458
     $129 = $127 >>> 1 & 1; //@line 8460
     $134 = HEAP32[24180 + (($117 | $114 | $121 | $125 | $129) + ($127 >>> $129) << 2) >> 2] | 0; //@line 8465
     $138 = (HEAP32[$134 + 4 >> 2] & -8) - $6 | 0; //@line 8469
     $143 = HEAP32[$134 + 16 + (((HEAP32[$134 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 8475
     if (!$143) {
      $$0192$lcssa$i = $134; //@line 8478
      $$0193$lcssa$i = $138; //@line 8478
     } else {
      $$01926$i = $134; //@line 8480
      $$01935$i = $138; //@line 8480
      $146 = $143; //@line 8480
      while (1) {
       $149 = (HEAP32[$146 + 4 >> 2] & -8) - $6 | 0; //@line 8485
       $150 = $149 >>> 0 < $$01935$i >>> 0; //@line 8486
       $$$0193$i = $150 ? $149 : $$01935$i; //@line 8487
       $$$0192$i = $150 ? $146 : $$01926$i; //@line 8488
       $146 = HEAP32[$146 + 16 + (((HEAP32[$146 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 8494
       if (!$146) {
        $$0192$lcssa$i = $$$0192$i; //@line 8497
        $$0193$lcssa$i = $$$0193$i; //@line 8497
        break;
       } else {
        $$01926$i = $$$0192$i; //@line 8500
        $$01935$i = $$$0193$i; //@line 8500
       }
      }
     }
     $157 = HEAP32[5973] | 0; //@line 8504
     if ($157 >>> 0 > $$0192$lcssa$i >>> 0) {
      _abort(); //@line 8507
     }
     $159 = $$0192$lcssa$i + $6 | 0; //@line 8510
     if ($159 >>> 0 <= $$0192$lcssa$i >>> 0) {
      _abort(); //@line 8513
     }
     $162 = HEAP32[$$0192$lcssa$i + 24 >> 2] | 0; //@line 8517
     $164 = HEAP32[$$0192$lcssa$i + 12 >> 2] | 0; //@line 8519
     do {
      if (($164 | 0) == ($$0192$lcssa$i | 0)) {
       $175 = $$0192$lcssa$i + 20 | 0; //@line 8523
       $176 = HEAP32[$175 >> 2] | 0; //@line 8524
       if (!$176) {
        $178 = $$0192$lcssa$i + 16 | 0; //@line 8527
        $179 = HEAP32[$178 >> 2] | 0; //@line 8528
        if (!$179) {
         $$3$i = 0; //@line 8531
         break;
        } else {
         $$1196$i = $179; //@line 8534
         $$1198$i = $178; //@line 8534
        }
       } else {
        $$1196$i = $176; //@line 8537
        $$1198$i = $175; //@line 8537
       }
       while (1) {
        $181 = $$1196$i + 20 | 0; //@line 8540
        $182 = HEAP32[$181 >> 2] | 0; //@line 8541
        if ($182 | 0) {
         $$1196$i = $182; //@line 8544
         $$1198$i = $181; //@line 8544
         continue;
        }
        $184 = $$1196$i + 16 | 0; //@line 8547
        $185 = HEAP32[$184 >> 2] | 0; //@line 8548
        if (!$185) {
         break;
        } else {
         $$1196$i = $185; //@line 8553
         $$1198$i = $184; //@line 8553
        }
       }
       if ($157 >>> 0 > $$1198$i >>> 0) {
        _abort(); //@line 8558
       } else {
        HEAP32[$$1198$i >> 2] = 0; //@line 8561
        $$3$i = $$1196$i; //@line 8562
        break;
       }
      } else {
       $167 = HEAP32[$$0192$lcssa$i + 8 >> 2] | 0; //@line 8567
       if ($157 >>> 0 > $167 >>> 0) {
        _abort(); //@line 8570
       }
       $169 = $167 + 12 | 0; //@line 8573
       if ((HEAP32[$169 >> 2] | 0) != ($$0192$lcssa$i | 0)) {
        _abort(); //@line 8577
       }
       $172 = $164 + 8 | 0; //@line 8580
       if ((HEAP32[$172 >> 2] | 0) == ($$0192$lcssa$i | 0)) {
        HEAP32[$169 >> 2] = $164; //@line 8584
        HEAP32[$172 >> 2] = $167; //@line 8585
        $$3$i = $164; //@line 8586
        break;
       } else {
        _abort(); //@line 8589
       }
      }
     } while (0);
     L73 : do {
      if ($162 | 0) {
       $190 = HEAP32[$$0192$lcssa$i + 28 >> 2] | 0; //@line 8598
       $191 = 24180 + ($190 << 2) | 0; //@line 8599
       do {
        if (($$0192$lcssa$i | 0) == (HEAP32[$191 >> 2] | 0)) {
         HEAP32[$191 >> 2] = $$3$i; //@line 8604
         if (!$$3$i) {
          HEAP32[5970] = $108 & ~(1 << $190); //@line 8610
          break L73;
         }
        } else {
         if ((HEAP32[5973] | 0) >>> 0 > $162 >>> 0) {
          _abort(); //@line 8617
         } else {
          HEAP32[$162 + 16 + (((HEAP32[$162 + 16 >> 2] | 0) != ($$0192$lcssa$i | 0) & 1) << 2) >> 2] = $$3$i; //@line 8625
          if (!$$3$i) {
           break L73;
          } else {
           break;
          }
         }
        }
       } while (0);
       $204 = HEAP32[5973] | 0; //@line 8635
       if ($204 >>> 0 > $$3$i >>> 0) {
        _abort(); //@line 8638
       }
       HEAP32[$$3$i + 24 >> 2] = $162; //@line 8642
       $208 = HEAP32[$$0192$lcssa$i + 16 >> 2] | 0; //@line 8644
       do {
        if ($208 | 0) {
         if ($204 >>> 0 > $208 >>> 0) {
          _abort(); //@line 8650
         } else {
          HEAP32[$$3$i + 16 >> 2] = $208; //@line 8654
          HEAP32[$208 + 24 >> 2] = $$3$i; //@line 8656
          break;
         }
        }
       } while (0);
       $214 = HEAP32[$$0192$lcssa$i + 20 >> 2] | 0; //@line 8662
       if ($214 | 0) {
        if ((HEAP32[5973] | 0) >>> 0 > $214 >>> 0) {
         _abort(); //@line 8668
        } else {
         HEAP32[$$3$i + 20 >> 2] = $214; //@line 8672
         HEAP32[$214 + 24 >> 2] = $$3$i; //@line 8674
         break;
        }
       }
      }
     } while (0);
     if ($$0193$lcssa$i >>> 0 < 16) {
      $221 = $$0193$lcssa$i + $6 | 0; //@line 8682
      HEAP32[$$0192$lcssa$i + 4 >> 2] = $221 | 3; //@line 8685
      $225 = $$0192$lcssa$i + $221 + 4 | 0; //@line 8687
      HEAP32[$225 >> 2] = HEAP32[$225 >> 2] | 1; //@line 8690
     } else {
      HEAP32[$$0192$lcssa$i + 4 >> 2] = $6 | 3; //@line 8694
      HEAP32[$159 + 4 >> 2] = $$0193$lcssa$i | 1; //@line 8697
      HEAP32[$159 + $$0193$lcssa$i >> 2] = $$0193$lcssa$i; //@line 8699
      if ($37 | 0) {
       $234 = HEAP32[5974] | 0; //@line 8702
       $235 = $37 >>> 3; //@line 8703
       $237 = 23916 + ($235 << 1 << 2) | 0; //@line 8705
       $238 = 1 << $235; //@line 8706
       if (!($8 & $238)) {
        HEAP32[5969] = $8 | $238; //@line 8711
        $$0189$i = $237; //@line 8713
        $$pre$phi$iZ2D = $237 + 8 | 0; //@line 8713
       } else {
        $242 = $237 + 8 | 0; //@line 8715
        $243 = HEAP32[$242 >> 2] | 0; //@line 8716
        if ((HEAP32[5973] | 0) >>> 0 > $243 >>> 0) {
         _abort(); //@line 8720
        } else {
         $$0189$i = $243; //@line 8723
         $$pre$phi$iZ2D = $242; //@line 8723
        }
       }
       HEAP32[$$pre$phi$iZ2D >> 2] = $234; //@line 8726
       HEAP32[$$0189$i + 12 >> 2] = $234; //@line 8728
       HEAP32[$234 + 8 >> 2] = $$0189$i; //@line 8730
       HEAP32[$234 + 12 >> 2] = $237; //@line 8732
      }
      HEAP32[5971] = $$0193$lcssa$i; //@line 8734
      HEAP32[5974] = $159; //@line 8735
     }
     $$0 = $$0192$lcssa$i + 8 | 0; //@line 8738
     STACKTOP = sp; //@line 8739
     return $$0 | 0; //@line 8739
    }
   } else {
    $$0197 = $6; //@line 8742
   }
  } else {
   if ($0 >>> 0 > 4294967231) {
    $$0197 = -1; //@line 8747
   } else {
    $251 = $0 + 11 | 0; //@line 8749
    $252 = $251 & -8; //@line 8750
    $253 = HEAP32[5970] | 0; //@line 8751
    if (!$253) {
     $$0197 = $252; //@line 8754
    } else {
     $255 = 0 - $252 | 0; //@line 8756
     $256 = $251 >>> 8; //@line 8757
     if (!$256) {
      $$0358$i = 0; //@line 8760
     } else {
      if ($252 >>> 0 > 16777215) {
       $$0358$i = 31; //@line 8764
      } else {
       $261 = ($256 + 1048320 | 0) >>> 16 & 8; //@line 8768
       $262 = $256 << $261; //@line 8769
       $265 = ($262 + 520192 | 0) >>> 16 & 4; //@line 8772
       $267 = $262 << $265; //@line 8774
       $270 = ($267 + 245760 | 0) >>> 16 & 2; //@line 8777
       $275 = 14 - ($265 | $261 | $270) + ($267 << $270 >>> 15) | 0; //@line 8782
       $$0358$i = $252 >>> ($275 + 7 | 0) & 1 | $275 << 1; //@line 8788
      }
     }
     $282 = HEAP32[24180 + ($$0358$i << 2) >> 2] | 0; //@line 8792
     L117 : do {
      if (!$282) {
       $$2355$i = 0; //@line 8796
       $$3$i203 = 0; //@line 8796
       $$3350$i = $255; //@line 8796
       label = 81; //@line 8797
      } else {
       $$0342$i = 0; //@line 8804
       $$0347$i = $255; //@line 8804
       $$0353$i = $282; //@line 8804
       $$0359$i = $252 << (($$0358$i | 0) == 31 ? 0 : 25 - ($$0358$i >>> 1) | 0); //@line 8804
       $$0362$i = 0; //@line 8804
       while (1) {
        $292 = (HEAP32[$$0353$i + 4 >> 2] & -8) - $252 | 0; //@line 8809
        if ($292 >>> 0 < $$0347$i >>> 0) {
         if (!$292) {
          $$414$i = $$0353$i; //@line 8814
          $$435113$i = 0; //@line 8814
          $$435712$i = $$0353$i; //@line 8814
          label = 85; //@line 8815
          break L117;
         } else {
          $$1343$i = $$0353$i; //@line 8818
          $$1348$i = $292; //@line 8818
         }
        } else {
         $$1343$i = $$0342$i; //@line 8821
         $$1348$i = $$0347$i; //@line 8821
        }
        $296 = HEAP32[$$0353$i + 20 >> 2] | 0; //@line 8824
        $$0353$i = HEAP32[$$0353$i + 16 + ($$0359$i >>> 31 << 2) >> 2] | 0; //@line 8827
        $$1363$i = ($296 | 0) == 0 | ($296 | 0) == ($$0353$i | 0) ? $$0362$i : $296; //@line 8831
        $302 = ($$0353$i | 0) == 0; //@line 8832
        if ($302) {
         $$2355$i = $$1363$i; //@line 8837
         $$3$i203 = $$1343$i; //@line 8837
         $$3350$i = $$1348$i; //@line 8837
         label = 81; //@line 8838
         break;
        } else {
         $$0342$i = $$1343$i; //@line 8841
         $$0347$i = $$1348$i; //@line 8841
         $$0359$i = $$0359$i << (($302 ^ 1) & 1); //@line 8841
         $$0362$i = $$1363$i; //@line 8841
        }
       }
      }
     } while (0);
     if ((label | 0) == 81) {
      if (($$2355$i | 0) == 0 & ($$3$i203 | 0) == 0) {
       $306 = 2 << $$0358$i; //@line 8851
       $309 = $253 & ($306 | 0 - $306); //@line 8854
       if (!$309) {
        $$0197 = $252; //@line 8857
        break;
       }
       $313 = ($309 & 0 - $309) + -1 | 0; //@line 8862
       $315 = $313 >>> 12 & 16; //@line 8864
       $316 = $313 >>> $315; //@line 8865
       $318 = $316 >>> 5 & 8; //@line 8867
       $320 = $316 >>> $318; //@line 8869
       $322 = $320 >>> 2 & 4; //@line 8871
       $324 = $320 >>> $322; //@line 8873
       $326 = $324 >>> 1 & 2; //@line 8875
       $328 = $324 >>> $326; //@line 8877
       $330 = $328 >>> 1 & 1; //@line 8879
       $$4$ph$i = 0; //@line 8885
       $$4357$ph$i = HEAP32[24180 + (($318 | $315 | $322 | $326 | $330) + ($328 >>> $330) << 2) >> 2] | 0; //@line 8885
      } else {
       $$4$ph$i = $$3$i203; //@line 8887
       $$4357$ph$i = $$2355$i; //@line 8887
      }
      if (!$$4357$ph$i) {
       $$4$lcssa$i = $$4$ph$i; //@line 8891
       $$4351$lcssa$i = $$3350$i; //@line 8891
      } else {
       $$414$i = $$4$ph$i; //@line 8893
       $$435113$i = $$3350$i; //@line 8893
       $$435712$i = $$4357$ph$i; //@line 8893
       label = 85; //@line 8894
      }
     }
     if ((label | 0) == 85) {
      while (1) {
       label = 0; //@line 8899
       $340 = (HEAP32[$$435712$i + 4 >> 2] & -8) - $252 | 0; //@line 8903
       $341 = $340 >>> 0 < $$435113$i >>> 0; //@line 8904
       $$$4351$i = $341 ? $340 : $$435113$i; //@line 8905
       $$4357$$4$i = $341 ? $$435712$i : $$414$i; //@line 8906
       $$435712$i = HEAP32[$$435712$i + 16 + (((HEAP32[$$435712$i + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 8912
       if (!$$435712$i) {
        $$4$lcssa$i = $$4357$$4$i; //@line 8915
        $$4351$lcssa$i = $$$4351$i; //@line 8915
        break;
       } else {
        $$414$i = $$4357$$4$i; //@line 8918
        $$435113$i = $$$4351$i; //@line 8918
        label = 85; //@line 8919
       }
      }
     }
     if (!$$4$lcssa$i) {
      $$0197 = $252; //@line 8925
     } else {
      if ($$4351$lcssa$i >>> 0 < ((HEAP32[5971] | 0) - $252 | 0) >>> 0) {
       $352 = HEAP32[5973] | 0; //@line 8931
       if ($352 >>> 0 > $$4$lcssa$i >>> 0) {
        _abort(); //@line 8934
       }
       $354 = $$4$lcssa$i + $252 | 0; //@line 8937
       if ($354 >>> 0 <= $$4$lcssa$i >>> 0) {
        _abort(); //@line 8940
       }
       $357 = HEAP32[$$4$lcssa$i + 24 >> 2] | 0; //@line 8944
       $359 = HEAP32[$$4$lcssa$i + 12 >> 2] | 0; //@line 8946
       do {
        if (($359 | 0) == ($$4$lcssa$i | 0)) {
         $370 = $$4$lcssa$i + 20 | 0; //@line 8950
         $371 = HEAP32[$370 >> 2] | 0; //@line 8951
         if (!$371) {
          $373 = $$4$lcssa$i + 16 | 0; //@line 8954
          $374 = HEAP32[$373 >> 2] | 0; //@line 8955
          if (!$374) {
           $$3372$i = 0; //@line 8958
           break;
          } else {
           $$1370$i = $374; //@line 8961
           $$1374$i = $373; //@line 8961
          }
         } else {
          $$1370$i = $371; //@line 8964
          $$1374$i = $370; //@line 8964
         }
         while (1) {
          $376 = $$1370$i + 20 | 0; //@line 8967
          $377 = HEAP32[$376 >> 2] | 0; //@line 8968
          if ($377 | 0) {
           $$1370$i = $377; //@line 8971
           $$1374$i = $376; //@line 8971
           continue;
          }
          $379 = $$1370$i + 16 | 0; //@line 8974
          $380 = HEAP32[$379 >> 2] | 0; //@line 8975
          if (!$380) {
           break;
          } else {
           $$1370$i = $380; //@line 8980
           $$1374$i = $379; //@line 8980
          }
         }
         if ($352 >>> 0 > $$1374$i >>> 0) {
          _abort(); //@line 8985
         } else {
          HEAP32[$$1374$i >> 2] = 0; //@line 8988
          $$3372$i = $$1370$i; //@line 8989
          break;
         }
        } else {
         $362 = HEAP32[$$4$lcssa$i + 8 >> 2] | 0; //@line 8994
         if ($352 >>> 0 > $362 >>> 0) {
          _abort(); //@line 8997
         }
         $364 = $362 + 12 | 0; //@line 9000
         if ((HEAP32[$364 >> 2] | 0) != ($$4$lcssa$i | 0)) {
          _abort(); //@line 9004
         }
         $367 = $359 + 8 | 0; //@line 9007
         if ((HEAP32[$367 >> 2] | 0) == ($$4$lcssa$i | 0)) {
          HEAP32[$364 >> 2] = $359; //@line 9011
          HEAP32[$367 >> 2] = $362; //@line 9012
          $$3372$i = $359; //@line 9013
          break;
         } else {
          _abort(); //@line 9016
         }
        }
       } while (0);
       L164 : do {
        if (!$357) {
         $475 = $253; //@line 9024
        } else {
         $385 = HEAP32[$$4$lcssa$i + 28 >> 2] | 0; //@line 9027
         $386 = 24180 + ($385 << 2) | 0; //@line 9028
         do {
          if (($$4$lcssa$i | 0) == (HEAP32[$386 >> 2] | 0)) {
           HEAP32[$386 >> 2] = $$3372$i; //@line 9033
           if (!$$3372$i) {
            $391 = $253 & ~(1 << $385); //@line 9038
            HEAP32[5970] = $391; //@line 9039
            $475 = $391; //@line 9040
            break L164;
           }
          } else {
           if ((HEAP32[5973] | 0) >>> 0 > $357 >>> 0) {
            _abort(); //@line 9047
           } else {
            HEAP32[$357 + 16 + (((HEAP32[$357 + 16 >> 2] | 0) != ($$4$lcssa$i | 0) & 1) << 2) >> 2] = $$3372$i; //@line 9055
            if (!$$3372$i) {
             $475 = $253; //@line 9058
             break L164;
            } else {
             break;
            }
           }
          }
         } while (0);
         $399 = HEAP32[5973] | 0; //@line 9066
         if ($399 >>> 0 > $$3372$i >>> 0) {
          _abort(); //@line 9069
         }
         HEAP32[$$3372$i + 24 >> 2] = $357; //@line 9073
         $403 = HEAP32[$$4$lcssa$i + 16 >> 2] | 0; //@line 9075
         do {
          if ($403 | 0) {
           if ($399 >>> 0 > $403 >>> 0) {
            _abort(); //@line 9081
           } else {
            HEAP32[$$3372$i + 16 >> 2] = $403; //@line 9085
            HEAP32[$403 + 24 >> 2] = $$3372$i; //@line 9087
            break;
           }
          }
         } while (0);
         $409 = HEAP32[$$4$lcssa$i + 20 >> 2] | 0; //@line 9093
         if (!$409) {
          $475 = $253; //@line 9096
         } else {
          if ((HEAP32[5973] | 0) >>> 0 > $409 >>> 0) {
           _abort(); //@line 9101
          } else {
           HEAP32[$$3372$i + 20 >> 2] = $409; //@line 9105
           HEAP32[$409 + 24 >> 2] = $$3372$i; //@line 9107
           $475 = $253; //@line 9108
           break;
          }
         }
        }
       } while (0);
       do {
        if ($$4351$lcssa$i >>> 0 < 16) {
         $416 = $$4351$lcssa$i + $252 | 0; //@line 9117
         HEAP32[$$4$lcssa$i + 4 >> 2] = $416 | 3; //@line 9120
         $420 = $$4$lcssa$i + $416 + 4 | 0; //@line 9122
         HEAP32[$420 >> 2] = HEAP32[$420 >> 2] | 1; //@line 9125
        } else {
         HEAP32[$$4$lcssa$i + 4 >> 2] = $252 | 3; //@line 9129
         HEAP32[$354 + 4 >> 2] = $$4351$lcssa$i | 1; //@line 9132
         HEAP32[$354 + $$4351$lcssa$i >> 2] = $$4351$lcssa$i; //@line 9134
         $428 = $$4351$lcssa$i >>> 3; //@line 9135
         if ($$4351$lcssa$i >>> 0 < 256) {
          $431 = 23916 + ($428 << 1 << 2) | 0; //@line 9139
          $432 = HEAP32[5969] | 0; //@line 9140
          $433 = 1 << $428; //@line 9141
          if (!($432 & $433)) {
           HEAP32[5969] = $432 | $433; //@line 9146
           $$0368$i = $431; //@line 9148
           $$pre$phi$i211Z2D = $431 + 8 | 0; //@line 9148
          } else {
           $437 = $431 + 8 | 0; //@line 9150
           $438 = HEAP32[$437 >> 2] | 0; //@line 9151
           if ((HEAP32[5973] | 0) >>> 0 > $438 >>> 0) {
            _abort(); //@line 9155
           } else {
            $$0368$i = $438; //@line 9158
            $$pre$phi$i211Z2D = $437; //@line 9158
           }
          }
          HEAP32[$$pre$phi$i211Z2D >> 2] = $354; //@line 9161
          HEAP32[$$0368$i + 12 >> 2] = $354; //@line 9163
          HEAP32[$354 + 8 >> 2] = $$0368$i; //@line 9165
          HEAP32[$354 + 12 >> 2] = $431; //@line 9167
          break;
         }
         $444 = $$4351$lcssa$i >>> 8; //@line 9170
         if (!$444) {
          $$0361$i = 0; //@line 9173
         } else {
          if ($$4351$lcssa$i >>> 0 > 16777215) {
           $$0361$i = 31; //@line 9177
          } else {
           $449 = ($444 + 1048320 | 0) >>> 16 & 8; //@line 9181
           $450 = $444 << $449; //@line 9182
           $453 = ($450 + 520192 | 0) >>> 16 & 4; //@line 9185
           $455 = $450 << $453; //@line 9187
           $458 = ($455 + 245760 | 0) >>> 16 & 2; //@line 9190
           $463 = 14 - ($453 | $449 | $458) + ($455 << $458 >>> 15) | 0; //@line 9195
           $$0361$i = $$4351$lcssa$i >>> ($463 + 7 | 0) & 1 | $463 << 1; //@line 9201
          }
         }
         $469 = 24180 + ($$0361$i << 2) | 0; //@line 9204
         HEAP32[$354 + 28 >> 2] = $$0361$i; //@line 9206
         $471 = $354 + 16 | 0; //@line 9207
         HEAP32[$471 + 4 >> 2] = 0; //@line 9209
         HEAP32[$471 >> 2] = 0; //@line 9210
         $473 = 1 << $$0361$i; //@line 9211
         if (!($475 & $473)) {
          HEAP32[5970] = $475 | $473; //@line 9216
          HEAP32[$469 >> 2] = $354; //@line 9217
          HEAP32[$354 + 24 >> 2] = $469; //@line 9219
          HEAP32[$354 + 12 >> 2] = $354; //@line 9221
          HEAP32[$354 + 8 >> 2] = $354; //@line 9223
          break;
         }
         $$0344$i = $$4351$lcssa$i << (($$0361$i | 0) == 31 ? 0 : 25 - ($$0361$i >>> 1) | 0); //@line 9232
         $$0345$i = HEAP32[$469 >> 2] | 0; //@line 9232
         while (1) {
          if ((HEAP32[$$0345$i + 4 >> 2] & -8 | 0) == ($$4351$lcssa$i | 0)) {
           label = 139; //@line 9239
           break;
          }
          $492 = $$0345$i + 16 + ($$0344$i >>> 31 << 2) | 0; //@line 9243
          $494 = HEAP32[$492 >> 2] | 0; //@line 9245
          if (!$494) {
           label = 136; //@line 9248
           break;
          } else {
           $$0344$i = $$0344$i << 1; //@line 9251
           $$0345$i = $494; //@line 9251
          }
         }
         if ((label | 0) == 136) {
          if ((HEAP32[5973] | 0) >>> 0 > $492 >>> 0) {
           _abort(); //@line 9258
          } else {
           HEAP32[$492 >> 2] = $354; //@line 9261
           HEAP32[$354 + 24 >> 2] = $$0345$i; //@line 9263
           HEAP32[$354 + 12 >> 2] = $354; //@line 9265
           HEAP32[$354 + 8 >> 2] = $354; //@line 9267
           break;
          }
         } else if ((label | 0) == 139) {
          $501 = $$0345$i + 8 | 0; //@line 9272
          $502 = HEAP32[$501 >> 2] | 0; //@line 9273
          $503 = HEAP32[5973] | 0; //@line 9274
          if ($503 >>> 0 <= $502 >>> 0 & $503 >>> 0 <= $$0345$i >>> 0) {
           HEAP32[$502 + 12 >> 2] = $354; //@line 9280
           HEAP32[$501 >> 2] = $354; //@line 9281
           HEAP32[$354 + 8 >> 2] = $502; //@line 9283
           HEAP32[$354 + 12 >> 2] = $$0345$i; //@line 9285
           HEAP32[$354 + 24 >> 2] = 0; //@line 9287
           break;
          } else {
           _abort(); //@line 9290
          }
         }
        }
       } while (0);
       $$0 = $$4$lcssa$i + 8 | 0; //@line 9297
       STACKTOP = sp; //@line 9298
       return $$0 | 0; //@line 9298
      } else {
       $$0197 = $252; //@line 9300
      }
     }
    }
   }
  }
 } while (0);
 $512 = HEAP32[5971] | 0; //@line 9307
 if ($512 >>> 0 >= $$0197 >>> 0) {
  $514 = $512 - $$0197 | 0; //@line 9310
  $515 = HEAP32[5974] | 0; //@line 9311
  if ($514 >>> 0 > 15) {
   $517 = $515 + $$0197 | 0; //@line 9314
   HEAP32[5974] = $517; //@line 9315
   HEAP32[5971] = $514; //@line 9316
   HEAP32[$517 + 4 >> 2] = $514 | 1; //@line 9319
   HEAP32[$515 + $512 >> 2] = $514; //@line 9321
   HEAP32[$515 + 4 >> 2] = $$0197 | 3; //@line 9324
  } else {
   HEAP32[5971] = 0; //@line 9326
   HEAP32[5974] = 0; //@line 9327
   HEAP32[$515 + 4 >> 2] = $512 | 3; //@line 9330
   $526 = $515 + $512 + 4 | 0; //@line 9332
   HEAP32[$526 >> 2] = HEAP32[$526 >> 2] | 1; //@line 9335
  }
  $$0 = $515 + 8 | 0; //@line 9338
  STACKTOP = sp; //@line 9339
  return $$0 | 0; //@line 9339
 }
 $530 = HEAP32[5972] | 0; //@line 9341
 if ($530 >>> 0 > $$0197 >>> 0) {
  $532 = $530 - $$0197 | 0; //@line 9344
  HEAP32[5972] = $532; //@line 9345
  $533 = HEAP32[5975] | 0; //@line 9346
  $534 = $533 + $$0197 | 0; //@line 9347
  HEAP32[5975] = $534; //@line 9348
  HEAP32[$534 + 4 >> 2] = $532 | 1; //@line 9351
  HEAP32[$533 + 4 >> 2] = $$0197 | 3; //@line 9354
  $$0 = $533 + 8 | 0; //@line 9356
  STACKTOP = sp; //@line 9357
  return $$0 | 0; //@line 9357
 }
 if (!(HEAP32[6087] | 0)) {
  HEAP32[6089] = 4096; //@line 9362
  HEAP32[6088] = 4096; //@line 9363
  HEAP32[6090] = -1; //@line 9364
  HEAP32[6091] = -1; //@line 9365
  HEAP32[6092] = 0; //@line 9366
  HEAP32[6080] = 0; //@line 9367
  HEAP32[6087] = $1 & -16 ^ 1431655768; //@line 9371
  $548 = 4096; //@line 9372
 } else {
  $548 = HEAP32[6089] | 0; //@line 9375
 }
 $545 = $$0197 + 48 | 0; //@line 9377
 $546 = $$0197 + 47 | 0; //@line 9378
 $547 = $548 + $546 | 0; //@line 9379
 $549 = 0 - $548 | 0; //@line 9380
 $550 = $547 & $549; //@line 9381
 if ($550 >>> 0 <= $$0197 >>> 0) {
  $$0 = 0; //@line 9384
  STACKTOP = sp; //@line 9385
  return $$0 | 0; //@line 9385
 }
 $552 = HEAP32[6079] | 0; //@line 9387
 if ($552 | 0) {
  $554 = HEAP32[6077] | 0; //@line 9390
  $555 = $554 + $550 | 0; //@line 9391
  if ($555 >>> 0 <= $554 >>> 0 | $555 >>> 0 > $552 >>> 0) {
   $$0 = 0; //@line 9396
   STACKTOP = sp; //@line 9397
   return $$0 | 0; //@line 9397
  }
 }
 L244 : do {
  if (!(HEAP32[6080] & 4)) {
   $561 = HEAP32[5975] | 0; //@line 9405
   L246 : do {
    if (!$561) {
     label = 163; //@line 9409
    } else {
     $$0$i$i = 24324; //@line 9411
     while (1) {
      $563 = HEAP32[$$0$i$i >> 2] | 0; //@line 9413
      if ($563 >>> 0 <= $561 >>> 0) {
       $565 = $$0$i$i + 4 | 0; //@line 9416
       if (($563 + (HEAP32[$565 >> 2] | 0) | 0) >>> 0 > $561 >>> 0) {
        break;
       }
      }
      $570 = HEAP32[$$0$i$i + 8 >> 2] | 0; //@line 9425
      if (!$570) {
       label = 163; //@line 9428
       break L246;
      } else {
       $$0$i$i = $570; //@line 9431
      }
     }
     $595 = $547 - $530 & $549; //@line 9435
     if ($595 >>> 0 < 2147483647) {
      $597 = _sbrk($595 | 0) | 0; //@line 9438
      if (($597 | 0) == ((HEAP32[$$0$i$i >> 2] | 0) + (HEAP32[$565 >> 2] | 0) | 0)) {
       if (($597 | 0) == (-1 | 0)) {
        $$2234243136$i = $595; //@line 9446
       } else {
        $$723947$i = $595; //@line 9448
        $$748$i = $597; //@line 9448
        label = 180; //@line 9449
        break L244;
       }
      } else {
       $$2247$ph$i = $597; //@line 9453
       $$2253$ph$i = $595; //@line 9453
       label = 171; //@line 9454
      }
     } else {
      $$2234243136$i = 0; //@line 9457
     }
    }
   } while (0);
   do {
    if ((label | 0) == 163) {
     $572 = _sbrk(0) | 0; //@line 9463
     if (($572 | 0) == (-1 | 0)) {
      $$2234243136$i = 0; //@line 9466
     } else {
      $574 = $572; //@line 9468
      $575 = HEAP32[6088] | 0; //@line 9469
      $576 = $575 + -1 | 0; //@line 9470
      $$$i = (($576 & $574 | 0) == 0 ? 0 : ($576 + $574 & 0 - $575) - $574 | 0) + $550 | 0; //@line 9478
      $584 = HEAP32[6077] | 0; //@line 9479
      $585 = $$$i + $584 | 0; //@line 9480
      if ($$$i >>> 0 > $$0197 >>> 0 & $$$i >>> 0 < 2147483647) {
       $588 = HEAP32[6079] | 0; //@line 9485
       if ($588 | 0) {
        if ($585 >>> 0 <= $584 >>> 0 | $585 >>> 0 > $588 >>> 0) {
         $$2234243136$i = 0; //@line 9492
         break;
        }
       }
       $592 = _sbrk($$$i | 0) | 0; //@line 9496
       if (($592 | 0) == ($572 | 0)) {
        $$723947$i = $$$i; //@line 9499
        $$748$i = $572; //@line 9499
        label = 180; //@line 9500
        break L244;
       } else {
        $$2247$ph$i = $592; //@line 9503
        $$2253$ph$i = $$$i; //@line 9503
        label = 171; //@line 9504
       }
      } else {
       $$2234243136$i = 0; //@line 9507
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 171) {
     $603 = 0 - $$2253$ph$i | 0; //@line 9514
     if (!($545 >>> 0 > $$2253$ph$i >>> 0 & ($$2253$ph$i >>> 0 < 2147483647 & ($$2247$ph$i | 0) != (-1 | 0)))) {
      if (($$2247$ph$i | 0) == (-1 | 0)) {
       $$2234243136$i = 0; //@line 9523
       break;
      } else {
       $$723947$i = $$2253$ph$i; //@line 9526
       $$748$i = $$2247$ph$i; //@line 9526
       label = 180; //@line 9527
       break L244;
      }
     }
     $607 = HEAP32[6089] | 0; //@line 9531
     $611 = $546 - $$2253$ph$i + $607 & 0 - $607; //@line 9535
     if ($611 >>> 0 >= 2147483647) {
      $$723947$i = $$2253$ph$i; //@line 9538
      $$748$i = $$2247$ph$i; //@line 9538
      label = 180; //@line 9539
      break L244;
     }
     if ((_sbrk($611 | 0) | 0) == (-1 | 0)) {
      _sbrk($603 | 0) | 0; //@line 9545
      $$2234243136$i = 0; //@line 9546
      break;
     } else {
      $$723947$i = $611 + $$2253$ph$i | 0; //@line 9550
      $$748$i = $$2247$ph$i; //@line 9550
      label = 180; //@line 9551
      break L244;
     }
    }
   } while (0);
   HEAP32[6080] = HEAP32[6080] | 4; //@line 9558
   $$4236$i = $$2234243136$i; //@line 9559
   label = 178; //@line 9560
  } else {
   $$4236$i = 0; //@line 9562
   label = 178; //@line 9563
  }
 } while (0);
 if ((label | 0) == 178) {
  if ($550 >>> 0 < 2147483647) {
   $620 = _sbrk($550 | 0) | 0; //@line 9569
   $621 = _sbrk(0) | 0; //@line 9570
   $627 = $621 - $620 | 0; //@line 9578
   $629 = $627 >>> 0 > ($$0197 + 40 | 0) >>> 0; //@line 9580
   if (!(($620 | 0) == (-1 | 0) | $629 ^ 1 | $620 >>> 0 < $621 >>> 0 & (($620 | 0) != (-1 | 0) & ($621 | 0) != (-1 | 0)) ^ 1)) {
    $$723947$i = $629 ? $627 : $$4236$i; //@line 9588
    $$748$i = $620; //@line 9588
    label = 180; //@line 9589
   }
  }
 }
 if ((label | 0) == 180) {
  $633 = (HEAP32[6077] | 0) + $$723947$i | 0; //@line 9595
  HEAP32[6077] = $633; //@line 9596
  if ($633 >>> 0 > (HEAP32[6078] | 0) >>> 0) {
   HEAP32[6078] = $633; //@line 9600
  }
  $636 = HEAP32[5975] | 0; //@line 9602
  do {
   if (!$636) {
    $638 = HEAP32[5973] | 0; //@line 9606
    if (($638 | 0) == 0 | $$748$i >>> 0 < $638 >>> 0) {
     HEAP32[5973] = $$748$i; //@line 9611
    }
    HEAP32[6081] = $$748$i; //@line 9613
    HEAP32[6082] = $$723947$i; //@line 9614
    HEAP32[6084] = 0; //@line 9615
    HEAP32[5978] = HEAP32[6087]; //@line 9617
    HEAP32[5977] = -1; //@line 9618
    HEAP32[5982] = 23916; //@line 9619
    HEAP32[5981] = 23916; //@line 9620
    HEAP32[5984] = 23924; //@line 9621
    HEAP32[5983] = 23924; //@line 9622
    HEAP32[5986] = 23932; //@line 9623
    HEAP32[5985] = 23932; //@line 9624
    HEAP32[5988] = 23940; //@line 9625
    HEAP32[5987] = 23940; //@line 9626
    HEAP32[5990] = 23948; //@line 9627
    HEAP32[5989] = 23948; //@line 9628
    HEAP32[5992] = 23956; //@line 9629
    HEAP32[5991] = 23956; //@line 9630
    HEAP32[5994] = 23964; //@line 9631
    HEAP32[5993] = 23964; //@line 9632
    HEAP32[5996] = 23972; //@line 9633
    HEAP32[5995] = 23972; //@line 9634
    HEAP32[5998] = 23980; //@line 9635
    HEAP32[5997] = 23980; //@line 9636
    HEAP32[6e3] = 23988; //@line 9637
    HEAP32[5999] = 23988; //@line 9638
    HEAP32[6002] = 23996; //@line 9639
    HEAP32[6001] = 23996; //@line 9640
    HEAP32[6004] = 24004; //@line 9641
    HEAP32[6003] = 24004; //@line 9642
    HEAP32[6006] = 24012; //@line 9643
    HEAP32[6005] = 24012; //@line 9644
    HEAP32[6008] = 24020; //@line 9645
    HEAP32[6007] = 24020; //@line 9646
    HEAP32[6010] = 24028; //@line 9647
    HEAP32[6009] = 24028; //@line 9648
    HEAP32[6012] = 24036; //@line 9649
    HEAP32[6011] = 24036; //@line 9650
    HEAP32[6014] = 24044; //@line 9651
    HEAP32[6013] = 24044; //@line 9652
    HEAP32[6016] = 24052; //@line 9653
    HEAP32[6015] = 24052; //@line 9654
    HEAP32[6018] = 24060; //@line 9655
    HEAP32[6017] = 24060; //@line 9656
    HEAP32[6020] = 24068; //@line 9657
    HEAP32[6019] = 24068; //@line 9658
    HEAP32[6022] = 24076; //@line 9659
    HEAP32[6021] = 24076; //@line 9660
    HEAP32[6024] = 24084; //@line 9661
    HEAP32[6023] = 24084; //@line 9662
    HEAP32[6026] = 24092; //@line 9663
    HEAP32[6025] = 24092; //@line 9664
    HEAP32[6028] = 24100; //@line 9665
    HEAP32[6027] = 24100; //@line 9666
    HEAP32[6030] = 24108; //@line 9667
    HEAP32[6029] = 24108; //@line 9668
    HEAP32[6032] = 24116; //@line 9669
    HEAP32[6031] = 24116; //@line 9670
    HEAP32[6034] = 24124; //@line 9671
    HEAP32[6033] = 24124; //@line 9672
    HEAP32[6036] = 24132; //@line 9673
    HEAP32[6035] = 24132; //@line 9674
    HEAP32[6038] = 24140; //@line 9675
    HEAP32[6037] = 24140; //@line 9676
    HEAP32[6040] = 24148; //@line 9677
    HEAP32[6039] = 24148; //@line 9678
    HEAP32[6042] = 24156; //@line 9679
    HEAP32[6041] = 24156; //@line 9680
    HEAP32[6044] = 24164; //@line 9681
    HEAP32[6043] = 24164; //@line 9682
    $642 = $$723947$i + -40 | 0; //@line 9683
    $644 = $$748$i + 8 | 0; //@line 9685
    $649 = ($644 & 7 | 0) == 0 ? 0 : 0 - $644 & 7; //@line 9690
    $650 = $$748$i + $649 | 0; //@line 9691
    $651 = $642 - $649 | 0; //@line 9692
    HEAP32[5975] = $650; //@line 9693
    HEAP32[5972] = $651; //@line 9694
    HEAP32[$650 + 4 >> 2] = $651 | 1; //@line 9697
    HEAP32[$$748$i + $642 + 4 >> 2] = 40; //@line 9700
    HEAP32[5976] = HEAP32[6091]; //@line 9702
   } else {
    $$024367$i = 24324; //@line 9704
    while (1) {
     $657 = HEAP32[$$024367$i >> 2] | 0; //@line 9706
     $658 = $$024367$i + 4 | 0; //@line 9707
     $659 = HEAP32[$658 >> 2] | 0; //@line 9708
     if (($$748$i | 0) == ($657 + $659 | 0)) {
      label = 188; //@line 9712
      break;
     }
     $663 = HEAP32[$$024367$i + 8 >> 2] | 0; //@line 9716
     if (!$663) {
      break;
     } else {
      $$024367$i = $663; //@line 9721
     }
    }
    if ((label | 0) == 188) {
     if (!(HEAP32[$$024367$i + 12 >> 2] & 8)) {
      if ($$748$i >>> 0 > $636 >>> 0 & $657 >>> 0 <= $636 >>> 0) {
       HEAP32[$658 >> 2] = $659 + $$723947$i; //@line 9735
       $673 = (HEAP32[5972] | 0) + $$723947$i | 0; //@line 9737
       $675 = $636 + 8 | 0; //@line 9739
       $680 = ($675 & 7 | 0) == 0 ? 0 : 0 - $675 & 7; //@line 9744
       $681 = $636 + $680 | 0; //@line 9745
       $682 = $673 - $680 | 0; //@line 9746
       HEAP32[5975] = $681; //@line 9747
       HEAP32[5972] = $682; //@line 9748
       HEAP32[$681 + 4 >> 2] = $682 | 1; //@line 9751
       HEAP32[$636 + $673 + 4 >> 2] = 40; //@line 9754
       HEAP32[5976] = HEAP32[6091]; //@line 9756
       break;
      }
     }
    }
    $688 = HEAP32[5973] | 0; //@line 9761
    if ($$748$i >>> 0 < $688 >>> 0) {
     HEAP32[5973] = $$748$i; //@line 9764
     $753 = $$748$i; //@line 9765
    } else {
     $753 = $688; //@line 9767
    }
    $690 = $$748$i + $$723947$i | 0; //@line 9769
    $$124466$i = 24324; //@line 9770
    while (1) {
     if ((HEAP32[$$124466$i >> 2] | 0) == ($690 | 0)) {
      label = 196; //@line 9775
      break;
     }
     $694 = HEAP32[$$124466$i + 8 >> 2] | 0; //@line 9779
     if (!$694) {
      $$0$i$i$i = 24324; //@line 9782
      break;
     } else {
      $$124466$i = $694; //@line 9785
     }
    }
    if ((label | 0) == 196) {
     if (!(HEAP32[$$124466$i + 12 >> 2] & 8)) {
      HEAP32[$$124466$i >> 2] = $$748$i; //@line 9794
      $700 = $$124466$i + 4 | 0; //@line 9795
      HEAP32[$700 >> 2] = (HEAP32[$700 >> 2] | 0) + $$723947$i; //@line 9798
      $704 = $$748$i + 8 | 0; //@line 9800
      $710 = $$748$i + (($704 & 7 | 0) == 0 ? 0 : 0 - $704 & 7) | 0; //@line 9806
      $712 = $690 + 8 | 0; //@line 9808
      $718 = $690 + (($712 & 7 | 0) == 0 ? 0 : 0 - $712 & 7) | 0; //@line 9814
      $722 = $710 + $$0197 | 0; //@line 9818
      $723 = $718 - $710 - $$0197 | 0; //@line 9819
      HEAP32[$710 + 4 >> 2] = $$0197 | 3; //@line 9822
      do {
       if (($636 | 0) == ($718 | 0)) {
        $728 = (HEAP32[5972] | 0) + $723 | 0; //@line 9827
        HEAP32[5972] = $728; //@line 9828
        HEAP32[5975] = $722; //@line 9829
        HEAP32[$722 + 4 >> 2] = $728 | 1; //@line 9832
       } else {
        if ((HEAP32[5974] | 0) == ($718 | 0)) {
         $734 = (HEAP32[5971] | 0) + $723 | 0; //@line 9838
         HEAP32[5971] = $734; //@line 9839
         HEAP32[5974] = $722; //@line 9840
         HEAP32[$722 + 4 >> 2] = $734 | 1; //@line 9843
         HEAP32[$722 + $734 >> 2] = $734; //@line 9845
         break;
        }
        $739 = HEAP32[$718 + 4 >> 2] | 0; //@line 9849
        if (($739 & 3 | 0) == 1) {
         $742 = $739 & -8; //@line 9853
         $743 = $739 >>> 3; //@line 9854
         L311 : do {
          if ($739 >>> 0 < 256) {
           $746 = HEAP32[$718 + 8 >> 2] | 0; //@line 9859
           $748 = HEAP32[$718 + 12 >> 2] | 0; //@line 9861
           $750 = 23916 + ($743 << 1 << 2) | 0; //@line 9863
           do {
            if (($746 | 0) != ($750 | 0)) {
             if ($753 >>> 0 > $746 >>> 0) {
              _abort(); //@line 9869
             }
             if ((HEAP32[$746 + 12 >> 2] | 0) == ($718 | 0)) {
              break;
             }
             _abort(); //@line 9878
            }
           } while (0);
           if (($748 | 0) == ($746 | 0)) {
            HEAP32[5969] = HEAP32[5969] & ~(1 << $743); //@line 9888
            break;
           }
           do {
            if (($748 | 0) == ($750 | 0)) {
             $$pre$phi11$i$iZ2D = $748 + 8 | 0; //@line 9895
            } else {
             if ($753 >>> 0 > $748 >>> 0) {
              _abort(); //@line 9899
             }
             $764 = $748 + 8 | 0; //@line 9902
             if ((HEAP32[$764 >> 2] | 0) == ($718 | 0)) {
              $$pre$phi11$i$iZ2D = $764; //@line 9906
              break;
             }
             _abort(); //@line 9909
            }
           } while (0);
           HEAP32[$746 + 12 >> 2] = $748; //@line 9914
           HEAP32[$$pre$phi11$i$iZ2D >> 2] = $746; //@line 9915
          } else {
           $769 = HEAP32[$718 + 24 >> 2] | 0; //@line 9918
           $771 = HEAP32[$718 + 12 >> 2] | 0; //@line 9920
           do {
            if (($771 | 0) == ($718 | 0)) {
             $782 = $718 + 16 | 0; //@line 9924
             $783 = $782 + 4 | 0; //@line 9925
             $784 = HEAP32[$783 >> 2] | 0; //@line 9926
             if (!$784) {
              $786 = HEAP32[$782 >> 2] | 0; //@line 9929
              if (!$786) {
               $$3$i$i = 0; //@line 9932
               break;
              } else {
               $$1291$i$i = $786; //@line 9935
               $$1293$i$i = $782; //@line 9935
              }
             } else {
              $$1291$i$i = $784; //@line 9938
              $$1293$i$i = $783; //@line 9938
             }
             while (1) {
              $788 = $$1291$i$i + 20 | 0; //@line 9941
              $789 = HEAP32[$788 >> 2] | 0; //@line 9942
              if ($789 | 0) {
               $$1291$i$i = $789; //@line 9945
               $$1293$i$i = $788; //@line 9945
               continue;
              }
              $791 = $$1291$i$i + 16 | 0; //@line 9948
              $792 = HEAP32[$791 >> 2] | 0; //@line 9949
              if (!$792) {
               break;
              } else {
               $$1291$i$i = $792; //@line 9954
               $$1293$i$i = $791; //@line 9954
              }
             }
             if ($753 >>> 0 > $$1293$i$i >>> 0) {
              _abort(); //@line 9959
             } else {
              HEAP32[$$1293$i$i >> 2] = 0; //@line 9962
              $$3$i$i = $$1291$i$i; //@line 9963
              break;
             }
            } else {
             $774 = HEAP32[$718 + 8 >> 2] | 0; //@line 9968
             if ($753 >>> 0 > $774 >>> 0) {
              _abort(); //@line 9971
             }
             $776 = $774 + 12 | 0; //@line 9974
             if ((HEAP32[$776 >> 2] | 0) != ($718 | 0)) {
              _abort(); //@line 9978
             }
             $779 = $771 + 8 | 0; //@line 9981
             if ((HEAP32[$779 >> 2] | 0) == ($718 | 0)) {
              HEAP32[$776 >> 2] = $771; //@line 9985
              HEAP32[$779 >> 2] = $774; //@line 9986
              $$3$i$i = $771; //@line 9987
              break;
             } else {
              _abort(); //@line 9990
             }
            }
           } while (0);
           if (!$769) {
            break;
           }
           $797 = HEAP32[$718 + 28 >> 2] | 0; //@line 10000
           $798 = 24180 + ($797 << 2) | 0; //@line 10001
           do {
            if ((HEAP32[$798 >> 2] | 0) == ($718 | 0)) {
             HEAP32[$798 >> 2] = $$3$i$i; //@line 10006
             if ($$3$i$i | 0) {
              break;
             }
             HEAP32[5970] = HEAP32[5970] & ~(1 << $797); //@line 10015
             break L311;
            } else {
             if ((HEAP32[5973] | 0) >>> 0 > $769 >>> 0) {
              _abort(); //@line 10021
             } else {
              HEAP32[$769 + 16 + (((HEAP32[$769 + 16 >> 2] | 0) != ($718 | 0) & 1) << 2) >> 2] = $$3$i$i; //@line 10029
              if (!$$3$i$i) {
               break L311;
              } else {
               break;
              }
             }
            }
           } while (0);
           $812 = HEAP32[5973] | 0; //@line 10039
           if ($812 >>> 0 > $$3$i$i >>> 0) {
            _abort(); //@line 10042
           }
           HEAP32[$$3$i$i + 24 >> 2] = $769; //@line 10046
           $815 = $718 + 16 | 0; //@line 10047
           $816 = HEAP32[$815 >> 2] | 0; //@line 10048
           do {
            if ($816 | 0) {
             if ($812 >>> 0 > $816 >>> 0) {
              _abort(); //@line 10054
             } else {
              HEAP32[$$3$i$i + 16 >> 2] = $816; //@line 10058
              HEAP32[$816 + 24 >> 2] = $$3$i$i; //@line 10060
              break;
             }
            }
           } while (0);
           $822 = HEAP32[$815 + 4 >> 2] | 0; //@line 10066
           if (!$822) {
            break;
           }
           if ((HEAP32[5973] | 0) >>> 0 > $822 >>> 0) {
            _abort(); //@line 10074
           } else {
            HEAP32[$$3$i$i + 20 >> 2] = $822; //@line 10078
            HEAP32[$822 + 24 >> 2] = $$3$i$i; //@line 10080
            break;
           }
          }
         } while (0);
         $$0$i17$i = $718 + $742 | 0; //@line 10087
         $$0287$i$i = $742 + $723 | 0; //@line 10087
        } else {
         $$0$i17$i = $718; //@line 10089
         $$0287$i$i = $723; //@line 10089
        }
        $830 = $$0$i17$i + 4 | 0; //@line 10091
        HEAP32[$830 >> 2] = HEAP32[$830 >> 2] & -2; //@line 10094
        HEAP32[$722 + 4 >> 2] = $$0287$i$i | 1; //@line 10097
        HEAP32[$722 + $$0287$i$i >> 2] = $$0287$i$i; //@line 10099
        $836 = $$0287$i$i >>> 3; //@line 10100
        if ($$0287$i$i >>> 0 < 256) {
         $839 = 23916 + ($836 << 1 << 2) | 0; //@line 10104
         $840 = HEAP32[5969] | 0; //@line 10105
         $841 = 1 << $836; //@line 10106
         do {
          if (!($840 & $841)) {
           HEAP32[5969] = $840 | $841; //@line 10112
           $$0295$i$i = $839; //@line 10114
           $$pre$phi$i19$iZ2D = $839 + 8 | 0; //@line 10114
          } else {
           $845 = $839 + 8 | 0; //@line 10116
           $846 = HEAP32[$845 >> 2] | 0; //@line 10117
           if ((HEAP32[5973] | 0) >>> 0 <= $846 >>> 0) {
            $$0295$i$i = $846; //@line 10121
            $$pre$phi$i19$iZ2D = $845; //@line 10121
            break;
           }
           _abort(); //@line 10124
          }
         } while (0);
         HEAP32[$$pre$phi$i19$iZ2D >> 2] = $722; //@line 10128
         HEAP32[$$0295$i$i + 12 >> 2] = $722; //@line 10130
         HEAP32[$722 + 8 >> 2] = $$0295$i$i; //@line 10132
         HEAP32[$722 + 12 >> 2] = $839; //@line 10134
         break;
        }
        $852 = $$0287$i$i >>> 8; //@line 10137
        do {
         if (!$852) {
          $$0296$i$i = 0; //@line 10141
         } else {
          if ($$0287$i$i >>> 0 > 16777215) {
           $$0296$i$i = 31; //@line 10145
           break;
          }
          $857 = ($852 + 1048320 | 0) >>> 16 & 8; //@line 10150
          $858 = $852 << $857; //@line 10151
          $861 = ($858 + 520192 | 0) >>> 16 & 4; //@line 10154
          $863 = $858 << $861; //@line 10156
          $866 = ($863 + 245760 | 0) >>> 16 & 2; //@line 10159
          $871 = 14 - ($861 | $857 | $866) + ($863 << $866 >>> 15) | 0; //@line 10164
          $$0296$i$i = $$0287$i$i >>> ($871 + 7 | 0) & 1 | $871 << 1; //@line 10170
         }
        } while (0);
        $877 = 24180 + ($$0296$i$i << 2) | 0; //@line 10173
        HEAP32[$722 + 28 >> 2] = $$0296$i$i; //@line 10175
        $879 = $722 + 16 | 0; //@line 10176
        HEAP32[$879 + 4 >> 2] = 0; //@line 10178
        HEAP32[$879 >> 2] = 0; //@line 10179
        $881 = HEAP32[5970] | 0; //@line 10180
        $882 = 1 << $$0296$i$i; //@line 10181
        if (!($881 & $882)) {
         HEAP32[5970] = $881 | $882; //@line 10186
         HEAP32[$877 >> 2] = $722; //@line 10187
         HEAP32[$722 + 24 >> 2] = $877; //@line 10189
         HEAP32[$722 + 12 >> 2] = $722; //@line 10191
         HEAP32[$722 + 8 >> 2] = $722; //@line 10193
         break;
        }
        $$0288$i$i = $$0287$i$i << (($$0296$i$i | 0) == 31 ? 0 : 25 - ($$0296$i$i >>> 1) | 0); //@line 10202
        $$0289$i$i = HEAP32[$877 >> 2] | 0; //@line 10202
        while (1) {
         if ((HEAP32[$$0289$i$i + 4 >> 2] & -8 | 0) == ($$0287$i$i | 0)) {
          label = 263; //@line 10209
          break;
         }
         $900 = $$0289$i$i + 16 + ($$0288$i$i >>> 31 << 2) | 0; //@line 10213
         $902 = HEAP32[$900 >> 2] | 0; //@line 10215
         if (!$902) {
          label = 260; //@line 10218
          break;
         } else {
          $$0288$i$i = $$0288$i$i << 1; //@line 10221
          $$0289$i$i = $902; //@line 10221
         }
        }
        if ((label | 0) == 260) {
         if ((HEAP32[5973] | 0) >>> 0 > $900 >>> 0) {
          _abort(); //@line 10228
         } else {
          HEAP32[$900 >> 2] = $722; //@line 10231
          HEAP32[$722 + 24 >> 2] = $$0289$i$i; //@line 10233
          HEAP32[$722 + 12 >> 2] = $722; //@line 10235
          HEAP32[$722 + 8 >> 2] = $722; //@line 10237
          break;
         }
        } else if ((label | 0) == 263) {
         $909 = $$0289$i$i + 8 | 0; //@line 10242
         $910 = HEAP32[$909 >> 2] | 0; //@line 10243
         $911 = HEAP32[5973] | 0; //@line 10244
         if ($911 >>> 0 <= $910 >>> 0 & $911 >>> 0 <= $$0289$i$i >>> 0) {
          HEAP32[$910 + 12 >> 2] = $722; //@line 10250
          HEAP32[$909 >> 2] = $722; //@line 10251
          HEAP32[$722 + 8 >> 2] = $910; //@line 10253
          HEAP32[$722 + 12 >> 2] = $$0289$i$i; //@line 10255
          HEAP32[$722 + 24 >> 2] = 0; //@line 10257
          break;
         } else {
          _abort(); //@line 10260
         }
        }
       }
      } while (0);
      $$0 = $710 + 8 | 0; //@line 10267
      STACKTOP = sp; //@line 10268
      return $$0 | 0; //@line 10268
     } else {
      $$0$i$i$i = 24324; //@line 10270
     }
    }
    while (1) {
     $919 = HEAP32[$$0$i$i$i >> 2] | 0; //@line 10274
     if ($919 >>> 0 <= $636 >>> 0) {
      $923 = $919 + (HEAP32[$$0$i$i$i + 4 >> 2] | 0) | 0; //@line 10279
      if ($923 >>> 0 > $636 >>> 0) {
       break;
      }
     }
     $$0$i$i$i = HEAP32[$$0$i$i$i + 8 >> 2] | 0; //@line 10287
    }
    $927 = $923 + -47 | 0; //@line 10289
    $929 = $927 + 8 | 0; //@line 10291
    $935 = $927 + (($929 & 7 | 0) == 0 ? 0 : 0 - $929 & 7) | 0; //@line 10297
    $936 = $636 + 16 | 0; //@line 10298
    $938 = $935 >>> 0 < $936 >>> 0 ? $636 : $935; //@line 10300
    $939 = $938 + 8 | 0; //@line 10301
    $940 = $938 + 24 | 0; //@line 10302
    $941 = $$723947$i + -40 | 0; //@line 10303
    $943 = $$748$i + 8 | 0; //@line 10305
    $948 = ($943 & 7 | 0) == 0 ? 0 : 0 - $943 & 7; //@line 10310
    $949 = $$748$i + $948 | 0; //@line 10311
    $950 = $941 - $948 | 0; //@line 10312
    HEAP32[5975] = $949; //@line 10313
    HEAP32[5972] = $950; //@line 10314
    HEAP32[$949 + 4 >> 2] = $950 | 1; //@line 10317
    HEAP32[$$748$i + $941 + 4 >> 2] = 40; //@line 10320
    HEAP32[5976] = HEAP32[6091]; //@line 10322
    $956 = $938 + 4 | 0; //@line 10323
    HEAP32[$956 >> 2] = 27; //@line 10324
    HEAP32[$939 >> 2] = HEAP32[6081]; //@line 10325
    HEAP32[$939 + 4 >> 2] = HEAP32[6082]; //@line 10325
    HEAP32[$939 + 8 >> 2] = HEAP32[6083]; //@line 10325
    HEAP32[$939 + 12 >> 2] = HEAP32[6084]; //@line 10325
    HEAP32[6081] = $$748$i; //@line 10326
    HEAP32[6082] = $$723947$i; //@line 10327
    HEAP32[6084] = 0; //@line 10328
    HEAP32[6083] = $939; //@line 10329
    $958 = $940; //@line 10330
    do {
     $958$looptemp = $958;
     $958 = $958 + 4 | 0; //@line 10332
     HEAP32[$958 >> 2] = 7; //@line 10333
    } while (($958$looptemp + 8 | 0) >>> 0 < $923 >>> 0);
    if (($938 | 0) != ($636 | 0)) {
     $964 = $938 - $636 | 0; //@line 10346
     HEAP32[$956 >> 2] = HEAP32[$956 >> 2] & -2; //@line 10349
     HEAP32[$636 + 4 >> 2] = $964 | 1; //@line 10352
     HEAP32[$938 >> 2] = $964; //@line 10353
     $969 = $964 >>> 3; //@line 10354
     if ($964 >>> 0 < 256) {
      $972 = 23916 + ($969 << 1 << 2) | 0; //@line 10358
      $973 = HEAP32[5969] | 0; //@line 10359
      $974 = 1 << $969; //@line 10360
      if (!($973 & $974)) {
       HEAP32[5969] = $973 | $974; //@line 10365
       $$0211$i$i = $972; //@line 10367
       $$pre$phi$i$iZ2D = $972 + 8 | 0; //@line 10367
      } else {
       $978 = $972 + 8 | 0; //@line 10369
       $979 = HEAP32[$978 >> 2] | 0; //@line 10370
       if ((HEAP32[5973] | 0) >>> 0 > $979 >>> 0) {
        _abort(); //@line 10374
       } else {
        $$0211$i$i = $979; //@line 10377
        $$pre$phi$i$iZ2D = $978; //@line 10377
       }
      }
      HEAP32[$$pre$phi$i$iZ2D >> 2] = $636; //@line 10380
      HEAP32[$$0211$i$i + 12 >> 2] = $636; //@line 10382
      HEAP32[$636 + 8 >> 2] = $$0211$i$i; //@line 10384
      HEAP32[$636 + 12 >> 2] = $972; //@line 10386
      break;
     }
     $985 = $964 >>> 8; //@line 10389
     if (!$985) {
      $$0212$i$i = 0; //@line 10392
     } else {
      if ($964 >>> 0 > 16777215) {
       $$0212$i$i = 31; //@line 10396
      } else {
       $990 = ($985 + 1048320 | 0) >>> 16 & 8; //@line 10400
       $991 = $985 << $990; //@line 10401
       $994 = ($991 + 520192 | 0) >>> 16 & 4; //@line 10404
       $996 = $991 << $994; //@line 10406
       $999 = ($996 + 245760 | 0) >>> 16 & 2; //@line 10409
       $1004 = 14 - ($994 | $990 | $999) + ($996 << $999 >>> 15) | 0; //@line 10414
       $$0212$i$i = $964 >>> ($1004 + 7 | 0) & 1 | $1004 << 1; //@line 10420
      }
     }
     $1010 = 24180 + ($$0212$i$i << 2) | 0; //@line 10423
     HEAP32[$636 + 28 >> 2] = $$0212$i$i; //@line 10425
     HEAP32[$636 + 20 >> 2] = 0; //@line 10427
     HEAP32[$936 >> 2] = 0; //@line 10428
     $1013 = HEAP32[5970] | 0; //@line 10429
     $1014 = 1 << $$0212$i$i; //@line 10430
     if (!($1013 & $1014)) {
      HEAP32[5970] = $1013 | $1014; //@line 10435
      HEAP32[$1010 >> 2] = $636; //@line 10436
      HEAP32[$636 + 24 >> 2] = $1010; //@line 10438
      HEAP32[$636 + 12 >> 2] = $636; //@line 10440
      HEAP32[$636 + 8 >> 2] = $636; //@line 10442
      break;
     }
     $$0206$i$i = $964 << (($$0212$i$i | 0) == 31 ? 0 : 25 - ($$0212$i$i >>> 1) | 0); //@line 10451
     $$0207$i$i = HEAP32[$1010 >> 2] | 0; //@line 10451
     while (1) {
      if ((HEAP32[$$0207$i$i + 4 >> 2] & -8 | 0) == ($964 | 0)) {
       label = 289; //@line 10458
       break;
      }
      $1032 = $$0207$i$i + 16 + ($$0206$i$i >>> 31 << 2) | 0; //@line 10462
      $1034 = HEAP32[$1032 >> 2] | 0; //@line 10464
      if (!$1034) {
       label = 286; //@line 10467
       break;
      } else {
       $$0206$i$i = $$0206$i$i << 1; //@line 10470
       $$0207$i$i = $1034; //@line 10470
      }
     }
     if ((label | 0) == 286) {
      if ((HEAP32[5973] | 0) >>> 0 > $1032 >>> 0) {
       _abort(); //@line 10477
      } else {
       HEAP32[$1032 >> 2] = $636; //@line 10480
       HEAP32[$636 + 24 >> 2] = $$0207$i$i; //@line 10482
       HEAP32[$636 + 12 >> 2] = $636; //@line 10484
       HEAP32[$636 + 8 >> 2] = $636; //@line 10486
       break;
      }
     } else if ((label | 0) == 289) {
      $1041 = $$0207$i$i + 8 | 0; //@line 10491
      $1042 = HEAP32[$1041 >> 2] | 0; //@line 10492
      $1043 = HEAP32[5973] | 0; //@line 10493
      if ($1043 >>> 0 <= $1042 >>> 0 & $1043 >>> 0 <= $$0207$i$i >>> 0) {
       HEAP32[$1042 + 12 >> 2] = $636; //@line 10499
       HEAP32[$1041 >> 2] = $636; //@line 10500
       HEAP32[$636 + 8 >> 2] = $1042; //@line 10502
       HEAP32[$636 + 12 >> 2] = $$0207$i$i; //@line 10504
       HEAP32[$636 + 24 >> 2] = 0; //@line 10506
       break;
      } else {
       _abort(); //@line 10509
      }
     }
    }
   }
  } while (0);
  $1052 = HEAP32[5972] | 0; //@line 10516
  if ($1052 >>> 0 > $$0197 >>> 0) {
   $1054 = $1052 - $$0197 | 0; //@line 10519
   HEAP32[5972] = $1054; //@line 10520
   $1055 = HEAP32[5975] | 0; //@line 10521
   $1056 = $1055 + $$0197 | 0; //@line 10522
   HEAP32[5975] = $1056; //@line 10523
   HEAP32[$1056 + 4 >> 2] = $1054 | 1; //@line 10526
   HEAP32[$1055 + 4 >> 2] = $$0197 | 3; //@line 10529
   $$0 = $1055 + 8 | 0; //@line 10531
   STACKTOP = sp; //@line 10532
   return $$0 | 0; //@line 10532
  }
 }
 HEAP32[(___errno_location() | 0) >> 2] = 12; //@line 10536
 $$0 = 0; //@line 10537
 STACKTOP = sp; //@line 10538
 return $$0 | 0; //@line 10538
}
function __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$0$be = 0, $$0$i = 0, $$0$i116 = 0, $$0$i118 = 0, $$0107$be = 0, $$0107$lcssa = 0, $$0107131 = 0, $$0109129 = 0, $$0111 = 0, $$0132 = 0, $$1$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $137 = 0, $140 = 0, $145 = 0, $146 = 0, $15 = 0, $152 = 0, $156 = 0, $159 = 0, $16 = 0, $166 = 0, $167 = 0, $17 = 0, $173 = 0, $18 = 0, $19 = 0, $192 = 0, $20 = 0, $202 = 0, $203 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $270 = 0, $271 = 0, $279 = 0, $28 = 0, $281 = 0, $282 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $344 = 0, $345 = 0, $35 = 0, $359 = 0, $36 = 0, $37 = 0, $38 = 0, $380 = 0, $386 = 0, $387 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $449 = 0, $45 = 0, $450 = 0, $459 = 0, $46 = 0, $463 = 0, $467 = 0, $472 = 0, $473 = 0, $477 = 0, $48 = 0, $481 = 0, $483 = 0, $485 = 0, $488 = 0, $489 = 0, $559 = 0, $560 = 0, $567 = 0, $580 = 0, $587 = 0, $59 = 0, $590 = 0, $591 = 0, $60 = 0, $653 = 0, $654 = 0, $661 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx14 = 0, $AsyncCtx18 = 0, $AsyncCtx3 = 0, $AsyncCtx6 = 0, $div = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 17569
 STACKTOP = STACKTOP + 16 | 0; //@line 17570
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 17570
 $8 = sp; //@line 17571
 $9 = sp + 15 | 0; //@line 17572
 $10 = sp + 14 | 0; //@line 17573
 $11 = sp + 13 | 0; //@line 17574
 $12 = sp + 12 | 0; //@line 17575
 $13 = $3 & 255; //@line 17576
 if (($2 & 255) >= ($3 & 255)) {
  $$0107$lcssa = 0; //@line 17579
  STACKTOP = sp; //@line 17580
  return $$0107$lcssa | 0; //@line 17580
 }
 $15 = $5 + 8 | 0; //@line 17582
 $16 = $5 + 16 | 0; //@line 17583
 $17 = $5 + 17 | 0; //@line 17584
 $18 = $8 + 4 | 0; //@line 17585
 $19 = $6 + 60 | 0; //@line 17586
 $20 = $8 + 6 | 0; //@line 17587
 $21 = $6 + 44 | 0; //@line 17588
 $22 = $8 + 5 | 0; //@line 17589
 $23 = $6 + 1 | 0; //@line 17590
 $24 = $8 + 7 | 0; //@line 17591
 $25 = $8 + 8 | 0; //@line 17592
 $26 = $6 + 32 | 0; //@line 17593
 $27 = $8 + 9 | 0; //@line 17594
 $28 = $0 + 3 | 0; //@line 17595
 $29 = $0 + 2 | 0; //@line 17596
 $30 = $6 + 56 | 0; //@line 17597
 $31 = $6 + 58 | 0; //@line 17598
 $32 = $8 + 1 | 0; //@line 17599
 $33 = $8 + 4 | 0; //@line 17600
 $34 = $6 + 40 | 0; //@line 17601
 $35 = $6 + 36 | 0; //@line 17602
 $36 = $6 + 33 | 0; //@line 17603
 $37 = $0 + 1 | 0; //@line 17604
 $38 = $0 + 272 | 0; //@line 17605
 $39 = $4 & 63; //@line 17606
 $40 = $0 + 260 | 0; //@line 17607
 $41 = $8 + 4 | 0; //@line 17608
 $42 = $8 + 8 | 0; //@line 17609
 $43 = $6 + 16 | 0; //@line 17610
 $44 = $6 + 20 | 0; //@line 17611
 $45 = $6 + 45 | 0; //@line 17612
 $46 = $6 + 48 | 0; //@line 17613
 $$0107131 = 0; //@line 17614
 $$0132 = $2; //@line 17614
 L4 : while (1) {
  $48 = $$0132 + 1 << 24 >> 24; //@line 17617
  switch (HEAP8[$1 + ($$0132 & 255) >> 0] | 0) {
  case 2:
   {
    HEAP32[$15 >> 2] = 0; //@line 17622
    HEAP8[$16 >> 0] = HEAP8[$1 + ($48 & 255) >> 0] | 0; //@line 17627
    HEAP8[$17 >> 0] = HEAP8[$1 + ($$0132 + 2 & 255) >> 0] | 0; //@line 17632
    $$0$be = $$0132 + 3 << 24 >> 24; //@line 17633
    $$0107$be = $$0107131; //@line 17633
    break;
   }
  case 3:
   {
    HEAP8[$9 >> 0] = 0; //@line 17637
    HEAP8[$10 >> 0] = 0; //@line 17638
    HEAP8[$11 >> 0] = 0; //@line 17639
    HEAP8[$12 >> 0] = 0; //@line 17640
    $59 = $48 & 255; //@line 17641
    $60 = $59 + -1 | 0; //@line 17642
    HEAP32[$8 >> 2] = $1 + $60; //@line 17644
    HEAP8[$18 >> 0] = $13 - $60; //@line 17647
    HEAP8[$20 >> 0] = HEAP8[$19 >> 0] | 0; //@line 17649
    HEAP8[$22 >> 0] = HEAP8[$21 >> 0] | 0; //@line 17651
    HEAP8[$24 >> 0] = HEAP8[$23 >> 0] | 0; //@line 17653
    HEAP8[$25 >> 0] = HEAP8[$6 >> 0] | 0; //@line 17655
    HEAP8[$27 >> 0] = HEAP8[$26 >> 0] | 0; //@line 17657
    $71 = HEAP32[(HEAP32[$7 >> 2] | 0) + 36 >> 2] | 0; //@line 17660
    $AsyncCtx = _emscripten_alloc_async_context(240, sp) | 0; //@line 17661
    $72 = FUNCTION_TABLE_iiiiiii[$71 & 3]($7, $8, $9, $10, $11, $12) | 0; //@line 17662
    if (___async) {
     label = 6; //@line 17665
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 17668
    if (($72 & 7) == 7) {
     HEAP8[$23 >> 0] = HEAP8[$9 >> 0] | 0; //@line 17673
     HEAP8[$6 >> 0] = HEAP8[$10 >> 0] | 0; //@line 17675
     HEAP8[$26 >> 0] = HEAP8[$11 >> 0] | 0; //@line 17677
    }
    $137 = HEAP8[$12 >> 0] | 0; //@line 17679
    if (($137 & 255) > 4) {
     $div = ($137 & 255) / 5 | 0; //@line 17682
     $140 = 128 - (HEAPU8[$28 >> 0] | 0) | 0; //@line 17686
     $$0109129 = 0; //@line 17687
     $146 = HEAP8[$29 >> 0] | 0; //@line 17687
     while (1) {
      $145 = $146 & 255; //@line 17689
      if (($140 - $145 | 0) > 1) {
       $152 = $146 + 2 << 24 >> 24; //@line 17696
       HEAP8[$0 + 4 + $145 >> 0] = 3; //@line 17698
       HEAP8[$29 >> 0] = $152; //@line 17699
       HEAP8[($146 + 1 & 255) + ($0 + 4) >> 0] = $72; //@line 17700
       HEAP8[$0 >> 0] = 1; //@line 17701
       $$0$i = 0; //@line 17702
       $661 = $152; //@line 17702
      } else {
       $$0$i = -1010; //@line 17704
       $661 = $146; //@line 17704
      }
      $$0109129 = $$0109129 + 1 << 24 >> 24; //@line 17706
      if (($$0109129 & 255) >= ($div & 255)) {
       $$1$lcssa = $$0$i; //@line 17711
       break;
      } else {
       $146 = $661; //@line 17709
      }
     }
    } else {
     $$1$lcssa = $$0107131; //@line 17716
    }
    $$0$be = $59 + 255 + ($137 & 255) & 255; //@line 17722
    $$0107$be = $$1$lcssa; //@line 17722
    break;
   }
  case 4:
   {
    $156 = $$0132 + 2 << 24 >> 24; //@line 17726
    $159 = HEAP8[$1 + ($48 & 255) >> 0] | 0; //@line 17729
    HEAP8[$30 >> 0] = $159; //@line 17730
    HEAP16[$31 >> 1] = 1 << ($159 & 255); //@line 17734
    $166 = HEAP8[$29 >> 0] | 0; //@line 17738
    $167 = $166 & 255; //@line 17739
    if ((128 - (HEAPU8[$28 >> 0] | 0) | 0) > ($167 | 0)) {
     HEAP8[$29 >> 0] = $166 + 1 << 24 >> 24; //@line 17744
     HEAP8[$0 + 4 + $167 >> 0] = 4; //@line 17745
     HEAP8[$0 >> 0] = 1; //@line 17746
     $$0$be = $156; //@line 17747
     $$0107$be = 0; //@line 17747
    } else {
     $$0$be = $156; //@line 17749
     $$0107$be = -1010; //@line 17749
    }
    break;
   }
  case 5:
   {
    $173 = HEAP8[$1 + ($48 & 255) >> 0] | 0; //@line 17756
    HEAP8[$32 >> 0] = ($173 & 255) >>> 4 & 7; //@line 17761
    HEAP8[$8 >> 0] = $173 & 15; //@line 17763
    $192 = $$0132 + 5 << 24 >> 24; //@line 17777
    HEAP32[$33 >> 2] = (HEAPU8[$1 + ($$0132 + 4 & 255) >> 0] << 16 | (HEAPU8[$1 + ($$0132 + 3 & 255) >> 0] << 8 | HEAPU8[$1 + ($$0132 + 2 & 255) >> 0])) * 100; //@line 17785
    $202 = HEAP32[(HEAP32[$7 >> 2] | 0) + 40 >> 2] | 0; //@line 17788
    $AsyncCtx3 = _emscripten_alloc_async_context(236, sp) | 0; //@line 17789
    $203 = FUNCTION_TABLE_iii[$202 & 31]($7, $8) | 0; //@line 17790
    if (___async) {
     label = 18; //@line 17793
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 17796
    if (($203 & 7) == 7) {
     HEAP8[$34 >> 0] = HEAP8[$8 >> 0] | 0; //@line 17801
     HEAP32[$35 >> 2] = HEAP32[$33 >> 2]; //@line 17803
     HEAP8[$36 >> 0] = HEAP8[$32 >> 0] | 0; //@line 17805
    }
    $270 = HEAP8[$29 >> 0] | 0; //@line 17810
    $271 = $270 & 255; //@line 17811
    if ((128 - (HEAPU8[$28 >> 0] | 0) - $271 | 0) > 1) {
     HEAP8[$0 + 4 + $271 >> 0] = 5; //@line 17817
     HEAP8[$29 >> 0] = $270 + 2 << 24 >> 24; //@line 17819
     HEAP8[($270 + 1 & 255) + ($0 + 4) >> 0] = $203; //@line 17822
     HEAP8[$37 >> 0] = 1; //@line 17823
     HEAP8[$0 >> 0] = 1; //@line 17824
     $$0$i116 = 0; //@line 17825
    } else {
     $$0$i116 = -1010; //@line 17827
    }
    $$0$be = $192; //@line 17829
    $$0107$be = $$0$i116; //@line 17829
    break;
   }
  case 6:
   {
    $279 = HEAP32[$38 >> 2] | 0; //@line 17833
    if (!$279) {
     $$0111 = -1; //@line 17836
    } else {
     $281 = HEAP32[$279 >> 2] | 0; //@line 17838
     $AsyncCtx6 = _emscripten_alloc_async_context(232, sp) | 0; //@line 17839
     $282 = FUNCTION_TABLE_ii[$281 & 15]($40) | 0; //@line 17840
     if (___async) {
      label = 26; //@line 17843
      break L4;
     }
     _emscripten_free_async_context($AsyncCtx6 | 0); //@line 17846
     $$0111 = $282; //@line 17847
    }
    $344 = HEAP8[$29 >> 0] | 0; //@line 17852
    $345 = $344 & 255; //@line 17853
    if ((128 - (HEAPU8[$28 >> 0] | 0) - $345 | 0) > 2) {
     HEAP8[$0 + 4 + $345 >> 0] = 6; //@line 17859
     HEAP8[($344 + 1 & 255) + ($0 + 4) >> 0] = $$0111; //@line 17863
     HEAP8[$29 >> 0] = $344 + 3 << 24 >> 24; //@line 17865
     HEAP8[($344 + 2 & 255) + ($0 + 4) >> 0] = $39; //@line 17868
     HEAP8[$0 >> 0] = 1; //@line 17869
     $$0$be = $48; //@line 17870
     $$0107$be = 0; //@line 17870
    } else {
     $$0$be = $48; //@line 17872
     $$0107$be = -1010; //@line 17872
    }
    break;
   }
  case 7:
   {
    $359 = HEAP8[$1 + ($48 & 255) >> 0] | 0; //@line 17880
    HEAP32[$8 >> 2] = (HEAPU8[$1 + ($$0132 + 4 & 255) >> 0] << 16 | (HEAPU8[$1 + ($$0132 + 3 & 255) >> 0] << 8 | HEAPU8[$1 + ($$0132 + 2 & 255) >> 0])) * 100; //@line 17901
    HEAP32[$41 >> 2] = 0; //@line 17902
    $380 = $$0132 + 6 << 24 >> 24; //@line 17903
    HEAP8[$42 >> 0] = HEAP8[$1 + ($$0132 + 5 & 255) >> 0] | 0; //@line 17907
    $386 = HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0; //@line 17910
    $AsyncCtx10 = _emscripten_alloc_async_context(232, sp) | 0; //@line 17911
    $387 = FUNCTION_TABLE_iiii[$386 & 31]($7, $359, $8) | 0; //@line 17912
    if (___async) {
     label = 31; //@line 17915
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx10 | 0); //@line 17918
    $449 = HEAP8[$29 >> 0] | 0; //@line 17922
    $450 = $449 & 255; //@line 17923
    if ((128 - (HEAPU8[$28 >> 0] | 0) - $450 | 0) > 1) {
     HEAP8[$0 + 4 + $450 >> 0] = 7; //@line 17932
     HEAP8[$29 >> 0] = $449 + 2 << 24 >> 24; //@line 17933
     HEAP8[($449 + 1 & 255) + ($0 + 4) >> 0] = $387; //@line 17934
     HEAP8[$0 >> 0] = 1; //@line 17935
     $$0$i118 = 0; //@line 17936
    } else {
     $$0$i118 = -1010; //@line 17938
    }
    $$0$be = $380; //@line 17940
    $$0107$be = $$0$i118; //@line 17940
    break;
   }
  case 8:
   {
    $459 = $$0132 + 2 << 24 >> 24; //@line 17944
    $463 = HEAP8[$1 + ($48 & 255) >> 0] & 15; //@line 17948
    $467 = ($463 + ($463 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 17953
    HEAP32[$43 >> 2] = $467; //@line 17954
    HEAP32[$44 >> 2] = $467 + 1e3; //@line 17956
    $472 = HEAP8[$29 >> 0] | 0; //@line 17960
    $473 = $472 & 255; //@line 17961
    if ((128 - (HEAPU8[$28 >> 0] | 0) | 0) > ($473 | 0)) {
     HEAP8[$29 >> 0] = $472 + 1 << 24 >> 24; //@line 17966
     HEAP8[$0 + 4 + $473 >> 0] = 8; //@line 17967
     HEAP8[$37 >> 0] = 1; //@line 17968
     HEAP8[$0 >> 0] = 1; //@line 17969
     $$0$be = $459; //@line 17970
     $$0107$be = 0; //@line 17970
    } else {
     $$0$be = $459; //@line 17972
     $$0107$be = -1010; //@line 17972
    }
    break;
   }
  case 9:
   {
    $477 = $$0132 + 2 << 24 >> 24; //@line 17977
    $481 = HEAPU8[$1 + ($48 & 255) >> 0] | 0; //@line 17981
    $483 = $481 >>> 5 & 1; //@line 17984
    $485 = $481 >>> 4 & 1; //@line 17987
    $488 = HEAP32[(HEAP32[$7 >> 2] | 0) + 44 >> 2] | 0; //@line 17990
    $AsyncCtx14 = _emscripten_alloc_async_context(248, sp) | 0; //@line 17991
    $489 = FUNCTION_TABLE_iiii[$488 & 31]($7, $485, $483) | 0; //@line 17992
    if (___async) {
     label = 39; //@line 17995
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 17998
    if ($489) {
     HEAP8[$21 >> 0] = $485; //@line 18001
     HEAP8[$45 >> 0] = $483; //@line 18002
     HEAPF32[$46 >> 2] = +(HEAPU8[13552 + ($481 & 15) >> 0] | 0); //@line 18006
     $559 = HEAP8[$29 >> 0] | 0; //@line 18010
     $560 = $559 & 255; //@line 18011
     if ((128 - (HEAPU8[$28 >> 0] | 0) | 0) > ($560 | 0)) {
      HEAP8[$29 >> 0] = $559 + 1 << 24 >> 24; //@line 18016
      HEAP8[$0 + 4 + $560 >> 0] = 9; //@line 18017
      HEAP8[$0 >> 0] = 1; //@line 18018
      $$0$be = $477; //@line 18019
      $$0107$be = 0; //@line 18019
     } else {
      $$0$be = $477; //@line 18021
      $$0107$be = -1010; //@line 18021
     }
    } else {
     $$0$be = $477; //@line 18024
     $$0107$be = $$0107131; //@line 18024
    }
    break;
   }
  case 10:
   {
    $567 = HEAP8[$1 + ($48 & 255) >> 0] | 0; //@line 18032
    $580 = $$0132 + 5 << 24 >> 24; //@line 18045
    $587 = (HEAPU8[$1 + ($$0132 + 3 & 255) >> 0] << 8 | HEAPU8[$1 + ($$0132 + 2 & 255) >> 0] | HEAPU8[$1 + ($$0132 + 4 & 255) >> 0] << 16) * 100 | 0; //@line 18052
    $590 = HEAP32[(HEAP32[$7 >> 2] | 0) + 48 >> 2] | 0; //@line 18055
    $AsyncCtx18 = _emscripten_alloc_async_context(232, sp) | 0; //@line 18056
    $591 = FUNCTION_TABLE_iiii[$590 & 31]($7, $567, $587) | 0; //@line 18057
    if (___async) {
     label = 44; //@line 18060
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx18 | 0); //@line 18063
    $653 = HEAP8[$29 >> 0] | 0; //@line 18067
    $654 = $653 & 255; //@line 18068
    if ((128 - (HEAPU8[$28 >> 0] | 0) | 0) > ($654 | 0)) {
     HEAP8[$0 + 4 + $654 >> 0] = 10; //@line 18073
     HEAP8[$29 >> 0] = $653 + 2 << 24 >> 24; //@line 18075
     HEAP8[($653 + 1 & 255) + ($0 + 4) >> 0] = $591; //@line 18078
     HEAP8[$37 >> 0] = 1; //@line 18079
     HEAP8[$0 >> 0] = 1; //@line 18080
     $$0$be = $580; //@line 18081
     $$0107$be = 0; //@line 18081
    } else {
     $$0$be = $580; //@line 18083
     $$0107$be = -1010; //@line 18083
    }
    break;
   }
  default:
   {
    $$0$be = $48; //@line 18088
    $$0107$be = -1013; //@line 18088
   }
  }
  if (($$0$be & 255) < ($3 & 255)) {
   $$0107131 = $$0107$be; //@line 18093
   $$0132 = $$0$be; //@line 18093
  } else {
   $$0107$lcssa = $$0107$be; //@line 18095
   label = 47; //@line 18096
   break;
  }
 }
 if ((label | 0) == 6) {
  HEAP32[$AsyncCtx >> 2] = 489; //@line 18101
  HEAP8[$AsyncCtx + 4 >> 0] = $2; //@line 18103
  HEAP32[$AsyncCtx + 8 >> 2] = $11; //@line 18105
  HEAP32[$AsyncCtx + 12 >> 2] = $33; //@line 18107
  HEAP32[$AsyncCtx + 16 >> 2] = $22; //@line 18109
  HEAP32[$AsyncCtx + 20 >> 2] = $7; //@line 18111
  HEAP32[$AsyncCtx + 24 >> 2] = $8; //@line 18113
  HEAP32[$AsyncCtx + 28 >> 2] = $44; //@line 18115
  HEAP32[$AsyncCtx + 32 >> 2] = $8; //@line 18117
  HEAP32[$AsyncCtx + 36 >> 2] = $21; //@line 18119
  HEAP32[$AsyncCtx + 40 >> 2] = $7; //@line 18121
  HEAP32[$AsyncCtx + 44 >> 2] = $24; //@line 18123
  HEAP32[$AsyncCtx + 48 >> 2] = $13; //@line 18125
  HEAP32[$AsyncCtx + 52 >> 2] = $7; //@line 18127
  HEAP32[$AsyncCtx + 56 >> 2] = $32; //@line 18129
  HEAP32[$AsyncCtx + 60 >> 2] = $23; //@line 18131
  HEAP32[$AsyncCtx + 64 >> 2] = $43; //@line 18133
  HEAP32[$AsyncCtx + 68 >> 2] = $8; //@line 18135
  HEAP32[$AsyncCtx + 72 >> 2] = $7; //@line 18137
  HEAP32[$AsyncCtx + 76 >> 2] = $36; //@line 18139
  HEAP32[$AsyncCtx + 80 >> 2] = $12; //@line 18141
  HEAP32[$AsyncCtx + 84 >> 2] = $9; //@line 18143
  HEAP32[$AsyncCtx + 88 >> 2] = $10; //@line 18145
  HEAP32[$AsyncCtx + 92 >> 2] = $8; //@line 18147
  HEAP32[$AsyncCtx + 96 >> 2] = $37; //@line 18149
  HEAP32[$AsyncCtx + 100 >> 2] = $6; //@line 18151
  HEAP32[$AsyncCtx + 104 >> 2] = $34; //@line 18153
  HEAP32[$AsyncCtx + 108 >> 2] = $45; //@line 18155
  HEAP32[$AsyncCtx + 112 >> 2] = $26; //@line 18157
  HEAP32[$AsyncCtx + 116 >> 2] = $35; //@line 18159
  HEAP32[$AsyncCtx + 120 >> 2] = $46; //@line 18161
  HEAP32[$AsyncCtx + 124 >> 2] = $25; //@line 18163
  HEAP32[$AsyncCtx + 128 >> 2] = $28; //@line 18165
  HEAP32[$AsyncCtx + 132 >> 2] = $15; //@line 18167
  HEAP32[$AsyncCtx + 136 >> 2] = $16; //@line 18169
  HEAP8[$AsyncCtx + 140 >> 0] = $39; //@line 18171
  HEAP32[$AsyncCtx + 144 >> 2] = $8; //@line 18173
  HEAP32[$AsyncCtx + 148 >> 2] = $40; //@line 18175
  HEAP32[$AsyncCtx + 152 >> 2] = $29; //@line 18177
  HEAP32[$AsyncCtx + 156 >> 2] = $27; //@line 18179
  HEAP32[$AsyncCtx + 160 >> 2] = $7; //@line 18181
  HEAP32[$AsyncCtx + 164 >> 2] = $59; //@line 18183
  HEAP32[$AsyncCtx + 168 >> 2] = $17; //@line 18185
  HEAP32[$AsyncCtx + 172 >> 2] = $38; //@line 18187
  HEAP32[$AsyncCtx + 176 >> 2] = $$0107131; //@line 18189
  HEAP32[$AsyncCtx + 180 >> 2] = $7; //@line 18191
  HEAP32[$AsyncCtx + 184 >> 2] = $41; //@line 18193
  HEAP32[$AsyncCtx + 188 >> 2] = $31; //@line 18195
  HEAP32[$AsyncCtx + 192 >> 2] = $18; //@line 18197
  HEAP32[$AsyncCtx + 196 >> 2] = $42; //@line 18199
  HEAP32[$AsyncCtx + 200 >> 2] = $8; //@line 18201
  HEAP32[$AsyncCtx + 204 >> 2] = $8; //@line 18203
  HEAP32[$AsyncCtx + 208 >> 2] = $0; //@line 18205
  HEAP32[$AsyncCtx + 212 >> 2] = $0; //@line 18207
  HEAP32[$AsyncCtx + 216 >> 2] = $20; //@line 18209
  HEAP32[$AsyncCtx + 220 >> 2] = $8; //@line 18211
  HEAP8[$AsyncCtx + 224 >> 0] = $3; //@line 18213
  HEAP32[$AsyncCtx + 228 >> 2] = $30; //@line 18215
  HEAP32[$AsyncCtx + 232 >> 2] = $1; //@line 18217
  HEAP32[$AsyncCtx + 236 >> 2] = $19; //@line 18219
  sp = STACKTOP; //@line 18220
  STACKTOP = sp; //@line 18221
  return 0; //@line 18221
 } else if ((label | 0) == 18) {
  HEAP32[$AsyncCtx3 >> 2] = 490; //@line 18224
  HEAP8[$AsyncCtx3 + 4 >> 0] = $2; //@line 18226
  HEAP32[$AsyncCtx3 + 8 >> 2] = $11; //@line 18228
  HEAP32[$AsyncCtx3 + 12 >> 2] = $33; //@line 18230
  HEAP32[$AsyncCtx3 + 16 >> 2] = $22; //@line 18232
  HEAP32[$AsyncCtx3 + 20 >> 2] = $7; //@line 18234
  HEAP8[$AsyncCtx3 + 24 >> 0] = $192; //@line 18236
  HEAP32[$AsyncCtx3 + 28 >> 2] = $44; //@line 18238
  HEAP32[$AsyncCtx3 + 32 >> 2] = $8; //@line 18240
  HEAP32[$AsyncCtx3 + 36 >> 2] = $8; //@line 18242
  HEAP32[$AsyncCtx3 + 40 >> 2] = $21; //@line 18244
  HEAP32[$AsyncCtx3 + 44 >> 2] = $7; //@line 18246
  HEAP32[$AsyncCtx3 + 48 >> 2] = $24; //@line 18248
  HEAP32[$AsyncCtx3 + 52 >> 2] = $13; //@line 18250
  HEAP32[$AsyncCtx3 + 56 >> 2] = $7; //@line 18252
  HEAP32[$AsyncCtx3 + 60 >> 2] = $32; //@line 18254
  HEAP32[$AsyncCtx3 + 64 >> 2] = $23; //@line 18256
  HEAP32[$AsyncCtx3 + 68 >> 2] = $43; //@line 18258
  HEAP32[$AsyncCtx3 + 72 >> 2] = $8; //@line 18260
  HEAP32[$AsyncCtx3 + 76 >> 2] = $7; //@line 18262
  HEAP32[$AsyncCtx3 + 80 >> 2] = $36; //@line 18264
  HEAP32[$AsyncCtx3 + 84 >> 2] = $12; //@line 18266
  HEAP32[$AsyncCtx3 + 88 >> 2] = $9; //@line 18268
  HEAP32[$AsyncCtx3 + 92 >> 2] = $10; //@line 18270
  HEAP32[$AsyncCtx3 + 96 >> 2] = $8; //@line 18272
  HEAP32[$AsyncCtx3 + 100 >> 2] = $37; //@line 18274
  HEAP32[$AsyncCtx3 + 104 >> 2] = $6; //@line 18276
  HEAP32[$AsyncCtx3 + 108 >> 2] = $34; //@line 18278
  HEAP32[$AsyncCtx3 + 112 >> 2] = $45; //@line 18280
  HEAP32[$AsyncCtx3 + 116 >> 2] = $26; //@line 18282
  HEAP32[$AsyncCtx3 + 120 >> 2] = $35; //@line 18284
  HEAP32[$AsyncCtx3 + 124 >> 2] = $46; //@line 18286
  HEAP32[$AsyncCtx3 + 128 >> 2] = $25; //@line 18288
  HEAP32[$AsyncCtx3 + 132 >> 2] = $28; //@line 18290
  HEAP32[$AsyncCtx3 + 136 >> 2] = $15; //@line 18292
  HEAP32[$AsyncCtx3 + 140 >> 2] = $16; //@line 18294
  HEAP8[$AsyncCtx3 + 144 >> 0] = $39; //@line 18296
  HEAP32[$AsyncCtx3 + 148 >> 2] = $8; //@line 18298
  HEAP32[$AsyncCtx3 + 152 >> 2] = $40; //@line 18300
  HEAP32[$AsyncCtx3 + 156 >> 2] = $29; //@line 18302
  HEAP32[$AsyncCtx3 + 160 >> 2] = $27; //@line 18304
  HEAP32[$AsyncCtx3 + 164 >> 2] = $7; //@line 18306
  HEAP32[$AsyncCtx3 + 168 >> 2] = $17; //@line 18308
  HEAP32[$AsyncCtx3 + 172 >> 2] = $38; //@line 18310
  HEAP32[$AsyncCtx3 + 176 >> 2] = $7; //@line 18312
  HEAP32[$AsyncCtx3 + 180 >> 2] = $41; //@line 18314
  HEAP32[$AsyncCtx3 + 184 >> 2] = $31; //@line 18316
  HEAP32[$AsyncCtx3 + 188 >> 2] = $18; //@line 18318
  HEAP32[$AsyncCtx3 + 192 >> 2] = $42; //@line 18320
  HEAP32[$AsyncCtx3 + 196 >> 2] = $8; //@line 18322
  HEAP32[$AsyncCtx3 + 200 >> 2] = $8; //@line 18324
  HEAP32[$AsyncCtx3 + 204 >> 2] = $0; //@line 18326
  HEAP32[$AsyncCtx3 + 208 >> 2] = $0; //@line 18328
  HEAP32[$AsyncCtx3 + 212 >> 2] = $20; //@line 18330
  HEAP32[$AsyncCtx3 + 216 >> 2] = $8; //@line 18332
  HEAP8[$AsyncCtx3 + 220 >> 0] = $3; //@line 18334
  HEAP32[$AsyncCtx3 + 224 >> 2] = $30; //@line 18336
  HEAP32[$AsyncCtx3 + 228 >> 2] = $1; //@line 18338
  HEAP32[$AsyncCtx3 + 232 >> 2] = $19; //@line 18340
  sp = STACKTOP; //@line 18341
  STACKTOP = sp; //@line 18342
  return 0; //@line 18342
 } else if ((label | 0) == 26) {
  HEAP32[$AsyncCtx6 >> 2] = 491; //@line 18345
  HEAP32[$AsyncCtx6 + 4 >> 2] = $44; //@line 18347
  HEAP32[$AsyncCtx6 + 8 >> 2] = $11; //@line 18349
  HEAP32[$AsyncCtx6 + 12 >> 2] = $33; //@line 18351
  HEAP32[$AsyncCtx6 + 16 >> 2] = $22; //@line 18353
  HEAP32[$AsyncCtx6 + 20 >> 2] = $7; //@line 18355
  HEAP32[$AsyncCtx6 + 24 >> 2] = $19; //@line 18357
  HEAP32[$AsyncCtx6 + 28 >> 2] = $30; //@line 18359
  HEAP32[$AsyncCtx6 + 32 >> 2] = $1; //@line 18361
  HEAP32[$AsyncCtx6 + 36 >> 2] = $21; //@line 18363
  HEAP32[$AsyncCtx6 + 40 >> 2] = $7; //@line 18365
  HEAP32[$AsyncCtx6 + 44 >> 2] = $24; //@line 18367
  HEAP32[$AsyncCtx6 + 48 >> 2] = $13; //@line 18369
  HEAP32[$AsyncCtx6 + 52 >> 2] = $7; //@line 18371
  HEAP32[$AsyncCtx6 + 56 >> 2] = $32; //@line 18373
  HEAP32[$AsyncCtx6 + 60 >> 2] = $23; //@line 18375
  HEAP32[$AsyncCtx6 + 64 >> 2] = $43; //@line 18377
  HEAP32[$AsyncCtx6 + 68 >> 2] = $8; //@line 18379
  HEAP32[$AsyncCtx6 + 72 >> 2] = $7; //@line 18381
  HEAP32[$AsyncCtx6 + 76 >> 2] = $36; //@line 18383
  HEAP32[$AsyncCtx6 + 80 >> 2] = $12; //@line 18385
  HEAP32[$AsyncCtx6 + 84 >> 2] = $9; //@line 18387
  HEAP32[$AsyncCtx6 + 88 >> 2] = $10; //@line 18389
  HEAP32[$AsyncCtx6 + 92 >> 2] = $8; //@line 18391
  HEAP32[$AsyncCtx6 + 96 >> 2] = $37; //@line 18393
  HEAP32[$AsyncCtx6 + 100 >> 2] = $6; //@line 18395
  HEAP32[$AsyncCtx6 + 104 >> 2] = $34; //@line 18397
  HEAP32[$AsyncCtx6 + 108 >> 2] = $45; //@line 18399
  HEAP32[$AsyncCtx6 + 112 >> 2] = $26; //@line 18401
  HEAP32[$AsyncCtx6 + 116 >> 2] = $35; //@line 18403
  HEAP32[$AsyncCtx6 + 120 >> 2] = $46; //@line 18405
  HEAP32[$AsyncCtx6 + 124 >> 2] = $25; //@line 18407
  HEAP32[$AsyncCtx6 + 128 >> 2] = $28; //@line 18409
  HEAP32[$AsyncCtx6 + 132 >> 2] = $15; //@line 18411
  HEAP32[$AsyncCtx6 + 136 >> 2] = $16; //@line 18413
  HEAP8[$AsyncCtx6 + 140 >> 0] = $39; //@line 18415
  HEAP32[$AsyncCtx6 + 144 >> 2] = $8; //@line 18417
  HEAP32[$AsyncCtx6 + 148 >> 2] = $40; //@line 18419
  HEAP32[$AsyncCtx6 + 152 >> 2] = $29; //@line 18421
  HEAP32[$AsyncCtx6 + 156 >> 2] = $27; //@line 18423
  HEAP32[$AsyncCtx6 + 160 >> 2] = $7; //@line 18425
  HEAP32[$AsyncCtx6 + 164 >> 2] = $17; //@line 18427
  HEAP32[$AsyncCtx6 + 168 >> 2] = $38; //@line 18429
  HEAP32[$AsyncCtx6 + 172 >> 2] = $7; //@line 18431
  HEAP32[$AsyncCtx6 + 176 >> 2] = $41; //@line 18433
  HEAP32[$AsyncCtx6 + 180 >> 2] = $31; //@line 18435
  HEAP32[$AsyncCtx6 + 184 >> 2] = $18; //@line 18437
  HEAP32[$AsyncCtx6 + 188 >> 2] = $42; //@line 18439
  HEAP8[$AsyncCtx6 + 192 >> 0] = $48; //@line 18441
  HEAP32[$AsyncCtx6 + 196 >> 2] = $8; //@line 18443
  HEAP32[$AsyncCtx6 + 200 >> 2] = $8; //@line 18445
  HEAP32[$AsyncCtx6 + 204 >> 2] = $0; //@line 18447
  HEAP32[$AsyncCtx6 + 208 >> 2] = $0; //@line 18449
  HEAP32[$AsyncCtx6 + 212 >> 2] = $20; //@line 18451
  HEAP32[$AsyncCtx6 + 216 >> 2] = $8; //@line 18453
  HEAP8[$AsyncCtx6 + 220 >> 0] = $3; //@line 18455
  HEAP8[$AsyncCtx6 + 221 >> 0] = $2; //@line 18457
  HEAP32[$AsyncCtx6 + 224 >> 2] = $8; //@line 18459
  HEAP32[$AsyncCtx6 + 228 >> 2] = $8; //@line 18461
  sp = STACKTOP; //@line 18462
  STACKTOP = sp; //@line 18463
  return 0; //@line 18463
 } else if ((label | 0) == 31) {
  HEAP32[$AsyncCtx10 >> 2] = 492; //@line 18466
  HEAP32[$AsyncCtx10 + 4 >> 2] = $44; //@line 18468
  HEAP32[$AsyncCtx10 + 8 >> 2] = $11; //@line 18470
  HEAP32[$AsyncCtx10 + 12 >> 2] = $33; //@line 18472
  HEAP32[$AsyncCtx10 + 16 >> 2] = $22; //@line 18474
  HEAP32[$AsyncCtx10 + 20 >> 2] = $7; //@line 18476
  HEAP32[$AsyncCtx10 + 24 >> 2] = $19; //@line 18478
  HEAP32[$AsyncCtx10 + 28 >> 2] = $30; //@line 18480
  HEAP32[$AsyncCtx10 + 32 >> 2] = $1; //@line 18482
  HEAP32[$AsyncCtx10 + 36 >> 2] = $21; //@line 18484
  HEAP32[$AsyncCtx10 + 40 >> 2] = $7; //@line 18486
  HEAP32[$AsyncCtx10 + 44 >> 2] = $24; //@line 18488
  HEAP32[$AsyncCtx10 + 48 >> 2] = $13; //@line 18490
  HEAP32[$AsyncCtx10 + 52 >> 2] = $7; //@line 18492
  HEAP32[$AsyncCtx10 + 56 >> 2] = $32; //@line 18494
  HEAP32[$AsyncCtx10 + 60 >> 2] = $23; //@line 18496
  HEAP32[$AsyncCtx10 + 64 >> 2] = $43; //@line 18498
  HEAP32[$AsyncCtx10 + 68 >> 2] = $8; //@line 18500
  HEAP32[$AsyncCtx10 + 72 >> 2] = $7; //@line 18502
  HEAP32[$AsyncCtx10 + 76 >> 2] = $36; //@line 18504
  HEAP32[$AsyncCtx10 + 80 >> 2] = $12; //@line 18506
  HEAP32[$AsyncCtx10 + 84 >> 2] = $9; //@line 18508
  HEAP8[$AsyncCtx10 + 88 >> 0] = $380; //@line 18510
  HEAP32[$AsyncCtx10 + 92 >> 2] = $10; //@line 18512
  HEAP32[$AsyncCtx10 + 96 >> 2] = $8; //@line 18514
  HEAP32[$AsyncCtx10 + 100 >> 2] = $37; //@line 18516
  HEAP32[$AsyncCtx10 + 104 >> 2] = $6; //@line 18518
  HEAP32[$AsyncCtx10 + 108 >> 2] = $34; //@line 18520
  HEAP32[$AsyncCtx10 + 112 >> 2] = $45; //@line 18522
  HEAP32[$AsyncCtx10 + 116 >> 2] = $26; //@line 18524
  HEAP32[$AsyncCtx10 + 120 >> 2] = $35; //@line 18526
  HEAP32[$AsyncCtx10 + 124 >> 2] = $46; //@line 18528
  HEAP32[$AsyncCtx10 + 128 >> 2] = $25; //@line 18530
  HEAP32[$AsyncCtx10 + 132 >> 2] = $28; //@line 18532
  HEAP32[$AsyncCtx10 + 136 >> 2] = $15; //@line 18534
  HEAP32[$AsyncCtx10 + 140 >> 2] = $16; //@line 18536
  HEAP8[$AsyncCtx10 + 144 >> 0] = $39; //@line 18538
  HEAP32[$AsyncCtx10 + 148 >> 2] = $8; //@line 18540
  HEAP32[$AsyncCtx10 + 152 >> 2] = $40; //@line 18542
  HEAP32[$AsyncCtx10 + 156 >> 2] = $29; //@line 18544
  HEAP32[$AsyncCtx10 + 160 >> 2] = $27; //@line 18546
  HEAP32[$AsyncCtx10 + 164 >> 2] = $7; //@line 18548
  HEAP32[$AsyncCtx10 + 168 >> 2] = $17; //@line 18550
  HEAP32[$AsyncCtx10 + 172 >> 2] = $38; //@line 18552
  HEAP32[$AsyncCtx10 + 176 >> 2] = $7; //@line 18554
  HEAP32[$AsyncCtx10 + 180 >> 2] = $41; //@line 18556
  HEAP32[$AsyncCtx10 + 184 >> 2] = $31; //@line 18558
  HEAP32[$AsyncCtx10 + 188 >> 2] = $18; //@line 18560
  HEAP32[$AsyncCtx10 + 192 >> 2] = $42; //@line 18562
  HEAP32[$AsyncCtx10 + 196 >> 2] = $8; //@line 18564
  HEAP32[$AsyncCtx10 + 200 >> 2] = $8; //@line 18566
  HEAP32[$AsyncCtx10 + 204 >> 2] = $0; //@line 18568
  HEAP32[$AsyncCtx10 + 208 >> 2] = $0; //@line 18570
  HEAP32[$AsyncCtx10 + 212 >> 2] = $20; //@line 18572
  HEAP32[$AsyncCtx10 + 216 >> 2] = $8; //@line 18574
  HEAP8[$AsyncCtx10 + 220 >> 0] = $3; //@line 18576
  HEAP8[$AsyncCtx10 + 221 >> 0] = $2; //@line 18578
  HEAP32[$AsyncCtx10 + 224 >> 2] = $8; //@line 18580
  HEAP32[$AsyncCtx10 + 228 >> 2] = $8; //@line 18582
  sp = STACKTOP; //@line 18583
  STACKTOP = sp; //@line 18584
  return 0; //@line 18584
 } else if ((label | 0) == 39) {
  HEAP32[$AsyncCtx14 >> 2] = 493; //@line 18587
  HEAP32[$AsyncCtx14 + 4 >> 2] = $44; //@line 18589
  HEAP32[$AsyncCtx14 + 8 >> 2] = $11; //@line 18591
  HEAP32[$AsyncCtx14 + 12 >> 2] = $33; //@line 18593
  HEAP32[$AsyncCtx14 + 16 >> 2] = $22; //@line 18595
  HEAP32[$AsyncCtx14 + 20 >> 2] = $7; //@line 18597
  HEAP32[$AsyncCtx14 + 24 >> 2] = $19; //@line 18599
  HEAP32[$AsyncCtx14 + 28 >> 2] = $30; //@line 18601
  HEAP32[$AsyncCtx14 + 32 >> 2] = $1; //@line 18603
  HEAP32[$AsyncCtx14 + 36 >> 2] = $21; //@line 18605
  HEAP32[$AsyncCtx14 + 40 >> 2] = $7; //@line 18607
  HEAP32[$AsyncCtx14 + 44 >> 2] = $481; //@line 18609
  HEAP32[$AsyncCtx14 + 48 >> 2] = $24; //@line 18611
  HEAP32[$AsyncCtx14 + 52 >> 2] = $13; //@line 18613
  HEAP32[$AsyncCtx14 + 56 >> 2] = $7; //@line 18615
  HEAP32[$AsyncCtx14 + 60 >> 2] = $32; //@line 18617
  HEAP32[$AsyncCtx14 + 64 >> 2] = $23; //@line 18619
  HEAP32[$AsyncCtx14 + 68 >> 2] = $43; //@line 18621
  HEAP32[$AsyncCtx14 + 72 >> 2] = $8; //@line 18623
  HEAP32[$AsyncCtx14 + 76 >> 2] = $7; //@line 18625
  HEAP32[$AsyncCtx14 + 80 >> 2] = $36; //@line 18627
  HEAP32[$AsyncCtx14 + 84 >> 2] = $12; //@line 18629
  HEAP32[$AsyncCtx14 + 88 >> 2] = $9; //@line 18631
  HEAP32[$AsyncCtx14 + 92 >> 2] = $10; //@line 18633
  HEAP32[$AsyncCtx14 + 96 >> 2] = $8; //@line 18635
  HEAP32[$AsyncCtx14 + 100 >> 2] = $37; //@line 18637
  HEAP8[$AsyncCtx14 + 104 >> 0] = $477; //@line 18639
  HEAP32[$AsyncCtx14 + 108 >> 2] = $6; //@line 18641
  HEAP32[$AsyncCtx14 + 112 >> 2] = $34; //@line 18643
  HEAP32[$AsyncCtx14 + 116 >> 2] = $45; //@line 18645
  HEAP32[$AsyncCtx14 + 120 >> 2] = $26; //@line 18647
  HEAP8[$AsyncCtx14 + 124 >> 0] = $483; //@line 18649
  HEAP32[$AsyncCtx14 + 128 >> 2] = $35; //@line 18651
  HEAP32[$AsyncCtx14 + 132 >> 2] = $46; //@line 18653
  HEAP32[$AsyncCtx14 + 136 >> 2] = $25; //@line 18655
  HEAP32[$AsyncCtx14 + 140 >> 2] = $28; //@line 18657
  HEAP32[$AsyncCtx14 + 144 >> 2] = $15; //@line 18659
  HEAP32[$AsyncCtx14 + 148 >> 2] = $16; //@line 18661
  HEAP8[$AsyncCtx14 + 152 >> 0] = $39; //@line 18663
  HEAP32[$AsyncCtx14 + 156 >> 2] = $8; //@line 18665
  HEAP8[$AsyncCtx14 + 160 >> 0] = $485; //@line 18667
  HEAP32[$AsyncCtx14 + 164 >> 2] = $40; //@line 18669
  HEAP32[$AsyncCtx14 + 168 >> 2] = $29; //@line 18671
  HEAP32[$AsyncCtx14 + 172 >> 2] = $27; //@line 18673
  HEAP32[$AsyncCtx14 + 176 >> 2] = $7; //@line 18675
  HEAP32[$AsyncCtx14 + 180 >> 2] = $17; //@line 18677
  HEAP32[$AsyncCtx14 + 184 >> 2] = $38; //@line 18679
  HEAP32[$AsyncCtx14 + 188 >> 2] = $$0107131; //@line 18681
  HEAP32[$AsyncCtx14 + 192 >> 2] = $7; //@line 18683
  HEAP32[$AsyncCtx14 + 196 >> 2] = $41; //@line 18685
  HEAP32[$AsyncCtx14 + 200 >> 2] = $31; //@line 18687
  HEAP32[$AsyncCtx14 + 204 >> 2] = $18; //@line 18689
  HEAP32[$AsyncCtx14 + 208 >> 2] = $42; //@line 18691
  HEAP32[$AsyncCtx14 + 212 >> 2] = $8; //@line 18693
  HEAP32[$AsyncCtx14 + 216 >> 2] = $8; //@line 18695
  HEAP32[$AsyncCtx14 + 220 >> 2] = $0; //@line 18697
  HEAP32[$AsyncCtx14 + 224 >> 2] = $0; //@line 18699
  HEAP32[$AsyncCtx14 + 228 >> 2] = $20; //@line 18701
  HEAP32[$AsyncCtx14 + 232 >> 2] = $8; //@line 18703
  HEAP8[$AsyncCtx14 + 236 >> 0] = $3; //@line 18705
  HEAP8[$AsyncCtx14 + 237 >> 0] = $2; //@line 18707
  HEAP32[$AsyncCtx14 + 240 >> 2] = $8; //@line 18709
  HEAP32[$AsyncCtx14 + 244 >> 2] = $8; //@line 18711
  sp = STACKTOP; //@line 18712
  STACKTOP = sp; //@line 18713
  return 0; //@line 18713
 } else if ((label | 0) == 44) {
  HEAP32[$AsyncCtx18 >> 2] = 494; //@line 18716
  HEAP32[$AsyncCtx18 + 4 >> 2] = $44; //@line 18718
  HEAP32[$AsyncCtx18 + 8 >> 2] = $11; //@line 18720
  HEAP32[$AsyncCtx18 + 12 >> 2] = $33; //@line 18722
  HEAP32[$AsyncCtx18 + 16 >> 2] = $22; //@line 18724
  HEAP32[$AsyncCtx18 + 20 >> 2] = $7; //@line 18726
  HEAP32[$AsyncCtx18 + 24 >> 2] = $19; //@line 18728
  HEAP32[$AsyncCtx18 + 28 >> 2] = $30; //@line 18730
  HEAP32[$AsyncCtx18 + 32 >> 2] = $1; //@line 18732
  HEAP32[$AsyncCtx18 + 36 >> 2] = $21; //@line 18734
  HEAP32[$AsyncCtx18 + 40 >> 2] = $7; //@line 18736
  HEAP8[$AsyncCtx18 + 44 >> 0] = $580; //@line 18738
  HEAP32[$AsyncCtx18 + 48 >> 2] = $24; //@line 18740
  HEAP32[$AsyncCtx18 + 52 >> 2] = $13; //@line 18742
  HEAP32[$AsyncCtx18 + 56 >> 2] = $7; //@line 18744
  HEAP32[$AsyncCtx18 + 60 >> 2] = $32; //@line 18746
  HEAP32[$AsyncCtx18 + 64 >> 2] = $23; //@line 18748
  HEAP32[$AsyncCtx18 + 68 >> 2] = $43; //@line 18750
  HEAP32[$AsyncCtx18 + 72 >> 2] = $8; //@line 18752
  HEAP32[$AsyncCtx18 + 76 >> 2] = $7; //@line 18754
  HEAP32[$AsyncCtx18 + 80 >> 2] = $36; //@line 18756
  HEAP32[$AsyncCtx18 + 84 >> 2] = $12; //@line 18758
  HEAP32[$AsyncCtx18 + 88 >> 2] = $9; //@line 18760
  HEAP32[$AsyncCtx18 + 92 >> 2] = $10; //@line 18762
  HEAP32[$AsyncCtx18 + 96 >> 2] = $8; //@line 18764
  HEAP32[$AsyncCtx18 + 100 >> 2] = $37; //@line 18766
  HEAP32[$AsyncCtx18 + 104 >> 2] = $6; //@line 18768
  HEAP32[$AsyncCtx18 + 108 >> 2] = $34; //@line 18770
  HEAP32[$AsyncCtx18 + 112 >> 2] = $45; //@line 18772
  HEAP32[$AsyncCtx18 + 116 >> 2] = $26; //@line 18774
  HEAP32[$AsyncCtx18 + 120 >> 2] = $35; //@line 18776
  HEAP32[$AsyncCtx18 + 124 >> 2] = $46; //@line 18778
  HEAP32[$AsyncCtx18 + 128 >> 2] = $25; //@line 18780
  HEAP32[$AsyncCtx18 + 132 >> 2] = $28; //@line 18782
  HEAP32[$AsyncCtx18 + 136 >> 2] = $15; //@line 18784
  HEAP32[$AsyncCtx18 + 140 >> 2] = $16; //@line 18786
  HEAP8[$AsyncCtx18 + 144 >> 0] = $39; //@line 18788
  HEAP32[$AsyncCtx18 + 148 >> 2] = $8; //@line 18790
  HEAP32[$AsyncCtx18 + 152 >> 2] = $40; //@line 18792
  HEAP32[$AsyncCtx18 + 156 >> 2] = $29; //@line 18794
  HEAP32[$AsyncCtx18 + 160 >> 2] = $27; //@line 18796
  HEAP32[$AsyncCtx18 + 164 >> 2] = $7; //@line 18798
  HEAP32[$AsyncCtx18 + 168 >> 2] = $17; //@line 18800
  HEAP32[$AsyncCtx18 + 172 >> 2] = $38; //@line 18802
  HEAP32[$AsyncCtx18 + 176 >> 2] = $7; //@line 18804
  HEAP32[$AsyncCtx18 + 180 >> 2] = $41; //@line 18806
  HEAP32[$AsyncCtx18 + 184 >> 2] = $31; //@line 18808
  HEAP32[$AsyncCtx18 + 188 >> 2] = $18; //@line 18810
  HEAP32[$AsyncCtx18 + 192 >> 2] = $42; //@line 18812
  HEAP32[$AsyncCtx18 + 196 >> 2] = $8; //@line 18814
  HEAP32[$AsyncCtx18 + 200 >> 2] = $8; //@line 18816
  HEAP32[$AsyncCtx18 + 204 >> 2] = $0; //@line 18818
  HEAP32[$AsyncCtx18 + 208 >> 2] = $0; //@line 18820
  HEAP32[$AsyncCtx18 + 212 >> 2] = $20; //@line 18822
  HEAP32[$AsyncCtx18 + 216 >> 2] = $8; //@line 18824
  HEAP8[$AsyncCtx18 + 220 >> 0] = $3; //@line 18826
  HEAP8[$AsyncCtx18 + 221 >> 0] = $2; //@line 18828
  HEAP32[$AsyncCtx18 + 224 >> 2] = $8; //@line 18830
  HEAP32[$AsyncCtx18 + 228 >> 2] = $8; //@line 18832
  sp = STACKTOP; //@line 18833
  STACKTOP = sp; //@line 18834
  return 0; //@line 18834
 } else if ((label | 0) == 47) {
  STACKTOP = sp; //@line 18837
  return $$0107$lcssa | 0; //@line 18837
 }
 return 0; //@line 18839
}
function _equeue_dispatch__async_cb_15($0) {
 $0 = $0 | 0;
 var $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$03956$i = 0, $$03956$i$phi = 0, $$04055$i = 0, $$0405571$i = 0, $$04063$i = 0, $$04159$i = 0, $$04258$i = 0, $$057$i = 0, $$067 = 0, $$06992 = 0, $$2 = 0, $$expand_i1_val = 0, $$expand_i1_val11 = 0, $$expand_i1_val13 = 0, $$expand_i1_val9 = 0, $$sink$in$i$i = 0, $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i75 = 0, $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i74 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $12 = 0, $127 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $152 = 0, $153 = 0, $154 = 0, $156 = 0, $157 = 0, $16 = 0, $165 = 0, $166 = 0, $168 = 0, $171 = 0, $173 = 0, $176 = 0, $179 = 0, $18 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $190 = 0, $193 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $4 = 0, $44 = 0, $45 = 0, $48 = 0, $54 = 0, $6 = 0, $63 = 0, $66 = 0, $67 = 0, $69 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $93 = 0, $95 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0, $$04159$i$looptemp = 0, $$04258$i$looptemp = 0;
 sp = STACKTOP; //@line 21243
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21245
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21247
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21249
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21251
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21253
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21255
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21257
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 21259
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 21261
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 21263
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 21265
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 21267
 $26 = HEAP8[$0 + 52 >> 0] & 1; //@line 21270
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 21272
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 21274
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 21276
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 21278
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 21280
 _equeue_mutex_lock($14); //@line 21281
 HEAP8[$28 >> 0] = (HEAPU8[$28 >> 0] | 0) + 1; //@line 21286
 if (((HEAP32[$16 >> 2] | 0) - $36 | 0) < 1) {
  HEAP32[$16 >> 2] = $36; //@line 21291
 }
 $44 = HEAP32[$8 >> 2] | 0; //@line 21293
 HEAP32[$10 >> 2] = $44; //@line 21294
 $45 = $44; //@line 21295
 L6 : do {
  if (!$44) {
   $$04055$i = $22; //@line 21299
   $54 = $45; //@line 21299
   label = 8; //@line 21300
  } else {
   $$04063$i = $22; //@line 21302
   $48 = $45; //@line 21302
   do {
    if (((HEAP32[$48 + 20 >> 2] | 0) - $36 | 0) >= 1) {
     $$04055$i = $$04063$i; //@line 21309
     $54 = $48; //@line 21309
     label = 8; //@line 21310
     break L6;
    }
    $$04063$i = $48 + 8 | 0; //@line 21313
    $48 = HEAP32[$$04063$i >> 2] | 0; //@line 21314
   } while (($48 | 0) != 0);
   HEAP32[$20 >> 2] = 0; //@line 21322
   $$0405571$i = $$04063$i; //@line 21323
  }
 } while (0);
 if ((label | 0) == 8) {
  HEAP32[$20 >> 2] = $54; //@line 21327
  if (!$54) {
   $$0405571$i = $$04055$i; //@line 21330
  } else {
   HEAP32[$54 + 16 >> 2] = $20; //@line 21333
   $$0405571$i = $$04055$i; //@line 21334
  }
 }
 HEAP32[$$0405571$i >> 2] = 0; //@line 21337
 _equeue_mutex_unlock($14); //@line 21338
 $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i74 = HEAP32[$22 >> 2] | 0; //@line 21339
 L15 : do {
  if (!$$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i74) {} else {
   $$04159$i = $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i74; //@line 21344
   $$04258$i = $22; //@line 21344
   do {
    $$04258$i$looptemp = $$04258$i;
    $$04258$i = $$04159$i + 8 | 0; //@line 21346
    $$04159$i$looptemp = $$04159$i;
    $$04159$i = HEAP32[$$04258$i >> 2] | 0; //@line 21347
    $$03956$i = 0; //@line 21348
    $$057$i = $$04159$i$looptemp; //@line 21348
    while (1) {
     HEAP32[$$057$i + 8 >> 2] = $$03956$i; //@line 21351
     $63 = HEAP32[$$057$i + 12 >> 2] | 0; //@line 21353
     if (!$63) {
      break;
     } else {
      $$03956$i$phi = $$057$i; //@line 21358
      $$057$i = $63; //@line 21358
      $$03956$i = $$03956$i$phi; //@line 21358
     }
    }
    HEAP32[$$04258$i$looptemp >> 2] = $$057$i; //@line 21361
   } while (($$04159$i | 0) != 0);
   $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i75 = HEAP32[$22 >> 2] | 0; //@line 21369
   if ($$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i75 | 0) {
    $$06992 = $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i75; //@line 21372
    while (1) {
     $66 = $$06992 + 8 | 0; //@line 21374
     $67 = HEAP32[$66 >> 2] | 0; //@line 21375
     $69 = HEAP32[$$06992 + 32 >> 2] | 0; //@line 21377
     if ($69 | 0) {
      label = 17; //@line 21380
      break;
     }
     $93 = HEAP32[$$06992 + 24 >> 2] | 0; //@line 21384
     if (($93 | 0) > -1) {
      label = 21; //@line 21387
      break;
     }
     $117 = $$06992 + 4 | 0; //@line 21391
     $118 = HEAP8[$117 >> 0] | 0; //@line 21392
     HEAP8[$117 >> 0] = (($118 + 1 & 255) << HEAP32[$34 >> 2] | 0) == 0 ? 1 : ($118 & 255) + 1 & 255; //@line 21401
     $127 = HEAP32[$$06992 + 28 >> 2] | 0; //@line 21403
     if ($127 | 0) {
      label = 25; //@line 21406
      break;
     }
     _equeue_mutex_lock($2); //@line 21409
     $150 = HEAP32[$4 >> 2] | 0; //@line 21410
     L28 : do {
      if (!$150) {
       $$02329$i$i = $4; //@line 21414
       label = 34; //@line 21415
      } else {
       $152 = HEAP32[$$06992 >> 2] | 0; //@line 21417
       $$025$i$i = $4; //@line 21418
       $154 = $150; //@line 21418
       while (1) {
        $153 = HEAP32[$154 >> 2] | 0; //@line 21420
        if ($153 >>> 0 >= $152 >>> 0) {
         break;
        }
        $156 = $154 + 8 | 0; //@line 21425
        $157 = HEAP32[$156 >> 2] | 0; //@line 21426
        if (!$157) {
         $$02329$i$i = $156; //@line 21429
         label = 34; //@line 21430
         break L28;
        } else {
         $$025$i$i = $156; //@line 21433
         $154 = $157; //@line 21433
        }
       }
       if (($153 | 0) == ($152 | 0)) {
        HEAP32[$$06992 + 12 >> 2] = $154; //@line 21439
        $$02330$i$i = $$025$i$i; //@line 21442
        $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 21442
       } else {
        $$02329$i$i = $$025$i$i; //@line 21444
        label = 34; //@line 21445
       }
      }
     } while (0);
     if ((label | 0) == 34) {
      label = 0; //@line 21450
      HEAP32[$$06992 + 12 >> 2] = 0; //@line 21452
      $$02330$i$i = $$02329$i$i; //@line 21453
      $$sink$in$i$i = $$02329$i$i; //@line 21453
     }
     HEAP32[$66 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 21456
     HEAP32[$$02330$i$i >> 2] = $$06992; //@line 21457
     _equeue_mutex_unlock($2); //@line 21458
     if (!$67) {
      break L15;
     } else {
      $$06992 = $67; //@line 21463
     }
    }
    if ((label | 0) == 17) {
     $ReallocAsyncCtx = _emscripten_realloc_async_context(84) | 0; //@line 21468
     FUNCTION_TABLE_vi[$69 & 1023]($$06992 + 36 | 0); //@line 21469
     if (___async) {
      HEAP32[$ReallocAsyncCtx >> 2] = 134; //@line 21472
      $72 = $ReallocAsyncCtx + 4 | 0; //@line 21473
      HEAP32[$72 >> 2] = $66; //@line 21474
      $73 = $ReallocAsyncCtx + 8 | 0; //@line 21475
      HEAP32[$73 >> 2] = $$06992; //@line 21476
      $74 = $ReallocAsyncCtx + 12 | 0; //@line 21477
      HEAP32[$74 >> 2] = $2; //@line 21478
      $75 = $ReallocAsyncCtx + 16 | 0; //@line 21479
      HEAP32[$75 >> 2] = $67; //@line 21480
      $76 = $ReallocAsyncCtx + 20 | 0; //@line 21481
      HEAP32[$76 >> 2] = $4; //@line 21482
      $77 = $ReallocAsyncCtx + 24 | 0; //@line 21483
      HEAP32[$77 >> 2] = $6; //@line 21484
      $78 = $ReallocAsyncCtx + 28 | 0; //@line 21485
      HEAP32[$78 >> 2] = $8; //@line 21486
      $79 = $ReallocAsyncCtx + 32 | 0; //@line 21487
      HEAP32[$79 >> 2] = $10; //@line 21488
      $80 = $ReallocAsyncCtx + 36 | 0; //@line 21489
      HEAP32[$80 >> 2] = $12; //@line 21490
      $81 = $ReallocAsyncCtx + 40 | 0; //@line 21491
      HEAP32[$81 >> 2] = $14; //@line 21492
      $82 = $ReallocAsyncCtx + 44 | 0; //@line 21493
      HEAP32[$82 >> 2] = $16; //@line 21494
      $83 = $ReallocAsyncCtx + 48 | 0; //@line 21495
      HEAP32[$83 >> 2] = $18; //@line 21496
      $84 = $ReallocAsyncCtx + 52 | 0; //@line 21497
      HEAP32[$84 >> 2] = $20; //@line 21498
      $85 = $ReallocAsyncCtx + 56 | 0; //@line 21499
      HEAP32[$85 >> 2] = $22; //@line 21500
      $86 = $ReallocAsyncCtx + 60 | 0; //@line 21501
      HEAP32[$86 >> 2] = $24; //@line 21502
      $87 = $ReallocAsyncCtx + 64 | 0; //@line 21503
      $$expand_i1_val = $26 & 1; //@line 21504
      HEAP8[$87 >> 0] = $$expand_i1_val; //@line 21505
      $88 = $ReallocAsyncCtx + 68 | 0; //@line 21506
      HEAP32[$88 >> 2] = $28; //@line 21507
      $89 = $ReallocAsyncCtx + 72 | 0; //@line 21508
      HEAP32[$89 >> 2] = $30; //@line 21509
      $90 = $ReallocAsyncCtx + 76 | 0; //@line 21510
      HEAP32[$90 >> 2] = $32; //@line 21511
      $91 = $ReallocAsyncCtx + 80 | 0; //@line 21512
      HEAP32[$91 >> 2] = $34; //@line 21513
      sp = STACKTOP; //@line 21514
      return;
     }
     ___async_unwind = 0; //@line 21517
     HEAP32[$ReallocAsyncCtx >> 2] = 134; //@line 21518
     $72 = $ReallocAsyncCtx + 4 | 0; //@line 21519
     HEAP32[$72 >> 2] = $66; //@line 21520
     $73 = $ReallocAsyncCtx + 8 | 0; //@line 21521
     HEAP32[$73 >> 2] = $$06992; //@line 21522
     $74 = $ReallocAsyncCtx + 12 | 0; //@line 21523
     HEAP32[$74 >> 2] = $2; //@line 21524
     $75 = $ReallocAsyncCtx + 16 | 0; //@line 21525
     HEAP32[$75 >> 2] = $67; //@line 21526
     $76 = $ReallocAsyncCtx + 20 | 0; //@line 21527
     HEAP32[$76 >> 2] = $4; //@line 21528
     $77 = $ReallocAsyncCtx + 24 | 0; //@line 21529
     HEAP32[$77 >> 2] = $6; //@line 21530
     $78 = $ReallocAsyncCtx + 28 | 0; //@line 21531
     HEAP32[$78 >> 2] = $8; //@line 21532
     $79 = $ReallocAsyncCtx + 32 | 0; //@line 21533
     HEAP32[$79 >> 2] = $10; //@line 21534
     $80 = $ReallocAsyncCtx + 36 | 0; //@line 21535
     HEAP32[$80 >> 2] = $12; //@line 21536
     $81 = $ReallocAsyncCtx + 40 | 0; //@line 21537
     HEAP32[$81 >> 2] = $14; //@line 21538
     $82 = $ReallocAsyncCtx + 44 | 0; //@line 21539
     HEAP32[$82 >> 2] = $16; //@line 21540
     $83 = $ReallocAsyncCtx + 48 | 0; //@line 21541
     HEAP32[$83 >> 2] = $18; //@line 21542
     $84 = $ReallocAsyncCtx + 52 | 0; //@line 21543
     HEAP32[$84 >> 2] = $20; //@line 21544
     $85 = $ReallocAsyncCtx + 56 | 0; //@line 21545
     HEAP32[$85 >> 2] = $22; //@line 21546
     $86 = $ReallocAsyncCtx + 60 | 0; //@line 21547
     HEAP32[$86 >> 2] = $24; //@line 21548
     $87 = $ReallocAsyncCtx + 64 | 0; //@line 21549
     $$expand_i1_val = $26 & 1; //@line 21550
     HEAP8[$87 >> 0] = $$expand_i1_val; //@line 21551
     $88 = $ReallocAsyncCtx + 68 | 0; //@line 21552
     HEAP32[$88 >> 2] = $28; //@line 21553
     $89 = $ReallocAsyncCtx + 72 | 0; //@line 21554
     HEAP32[$89 >> 2] = $30; //@line 21555
     $90 = $ReallocAsyncCtx + 76 | 0; //@line 21556
     HEAP32[$90 >> 2] = $32; //@line 21557
     $91 = $ReallocAsyncCtx + 80 | 0; //@line 21558
     HEAP32[$91 >> 2] = $34; //@line 21559
     sp = STACKTOP; //@line 21560
     return;
    } else if ((label | 0) == 21) {
     $95 = $$06992 + 20 | 0; //@line 21564
     HEAP32[$95 >> 2] = (HEAP32[$95 >> 2] | 0) + $93; //@line 21567
     $98 = _equeue_tick() | 0; //@line 21568
     $ReallocAsyncCtx4 = _emscripten_realloc_async_context(76) | 0; //@line 21569
     _equeue_enqueue($24, $$06992, $98) | 0; //@line 21570
     if (___async) {
      HEAP32[$ReallocAsyncCtx4 >> 2] = 135; //@line 21573
      $99 = $ReallocAsyncCtx4 + 4 | 0; //@line 21574
      HEAP32[$99 >> 2] = $2; //@line 21575
      $100 = $ReallocAsyncCtx4 + 8 | 0; //@line 21576
      HEAP32[$100 >> 2] = $67; //@line 21577
      $101 = $ReallocAsyncCtx4 + 12 | 0; //@line 21578
      HEAP32[$101 >> 2] = $4; //@line 21579
      $102 = $ReallocAsyncCtx4 + 16 | 0; //@line 21580
      HEAP32[$102 >> 2] = $6; //@line 21581
      $103 = $ReallocAsyncCtx4 + 20 | 0; //@line 21582
      HEAP32[$103 >> 2] = $8; //@line 21583
      $104 = $ReallocAsyncCtx4 + 24 | 0; //@line 21584
      HEAP32[$104 >> 2] = $10; //@line 21585
      $105 = $ReallocAsyncCtx4 + 28 | 0; //@line 21586
      HEAP32[$105 >> 2] = $12; //@line 21587
      $106 = $ReallocAsyncCtx4 + 32 | 0; //@line 21588
      HEAP32[$106 >> 2] = $14; //@line 21589
      $107 = $ReallocAsyncCtx4 + 36 | 0; //@line 21590
      HEAP32[$107 >> 2] = $16; //@line 21591
      $108 = $ReallocAsyncCtx4 + 40 | 0; //@line 21592
      HEAP32[$108 >> 2] = $18; //@line 21593
      $109 = $ReallocAsyncCtx4 + 44 | 0; //@line 21594
      HEAP32[$109 >> 2] = $20; //@line 21595
      $110 = $ReallocAsyncCtx4 + 48 | 0; //@line 21596
      HEAP32[$110 >> 2] = $22; //@line 21597
      $111 = $ReallocAsyncCtx4 + 52 | 0; //@line 21598
      HEAP32[$111 >> 2] = $24; //@line 21599
      $112 = $ReallocAsyncCtx4 + 56 | 0; //@line 21600
      $$expand_i1_val9 = $26 & 1; //@line 21601
      HEAP8[$112 >> 0] = $$expand_i1_val9; //@line 21602
      $113 = $ReallocAsyncCtx4 + 60 | 0; //@line 21603
      HEAP32[$113 >> 2] = $28; //@line 21604
      $114 = $ReallocAsyncCtx4 + 64 | 0; //@line 21605
      HEAP32[$114 >> 2] = $30; //@line 21606
      $115 = $ReallocAsyncCtx4 + 68 | 0; //@line 21607
      HEAP32[$115 >> 2] = $32; //@line 21608
      $116 = $ReallocAsyncCtx4 + 72 | 0; //@line 21609
      HEAP32[$116 >> 2] = $34; //@line 21610
      sp = STACKTOP; //@line 21611
      return;
     }
     ___async_unwind = 0; //@line 21614
     HEAP32[$ReallocAsyncCtx4 >> 2] = 135; //@line 21615
     $99 = $ReallocAsyncCtx4 + 4 | 0; //@line 21616
     HEAP32[$99 >> 2] = $2; //@line 21617
     $100 = $ReallocAsyncCtx4 + 8 | 0; //@line 21618
     HEAP32[$100 >> 2] = $67; //@line 21619
     $101 = $ReallocAsyncCtx4 + 12 | 0; //@line 21620
     HEAP32[$101 >> 2] = $4; //@line 21621
     $102 = $ReallocAsyncCtx4 + 16 | 0; //@line 21622
     HEAP32[$102 >> 2] = $6; //@line 21623
     $103 = $ReallocAsyncCtx4 + 20 | 0; //@line 21624
     HEAP32[$103 >> 2] = $8; //@line 21625
     $104 = $ReallocAsyncCtx4 + 24 | 0; //@line 21626
     HEAP32[$104 >> 2] = $10; //@line 21627
     $105 = $ReallocAsyncCtx4 + 28 | 0; //@line 21628
     HEAP32[$105 >> 2] = $12; //@line 21629
     $106 = $ReallocAsyncCtx4 + 32 | 0; //@line 21630
     HEAP32[$106 >> 2] = $14; //@line 21631
     $107 = $ReallocAsyncCtx4 + 36 | 0; //@line 21632
     HEAP32[$107 >> 2] = $16; //@line 21633
     $108 = $ReallocAsyncCtx4 + 40 | 0; //@line 21634
     HEAP32[$108 >> 2] = $18; //@line 21635
     $109 = $ReallocAsyncCtx4 + 44 | 0; //@line 21636
     HEAP32[$109 >> 2] = $20; //@line 21637
     $110 = $ReallocAsyncCtx4 + 48 | 0; //@line 21638
     HEAP32[$110 >> 2] = $22; //@line 21639
     $111 = $ReallocAsyncCtx4 + 52 | 0; //@line 21640
     HEAP32[$111 >> 2] = $24; //@line 21641
     $112 = $ReallocAsyncCtx4 + 56 | 0; //@line 21642
     $$expand_i1_val9 = $26 & 1; //@line 21643
     HEAP8[$112 >> 0] = $$expand_i1_val9; //@line 21644
     $113 = $ReallocAsyncCtx4 + 60 | 0; //@line 21645
     HEAP32[$113 >> 2] = $28; //@line 21646
     $114 = $ReallocAsyncCtx4 + 64 | 0; //@line 21647
     HEAP32[$114 >> 2] = $30; //@line 21648
     $115 = $ReallocAsyncCtx4 + 68 | 0; //@line 21649
     HEAP32[$115 >> 2] = $32; //@line 21650
     $116 = $ReallocAsyncCtx4 + 72 | 0; //@line 21651
     HEAP32[$116 >> 2] = $34; //@line 21652
     sp = STACKTOP; //@line 21653
     return;
    } else if ((label | 0) == 25) {
     $ReallocAsyncCtx2 = _emscripten_realloc_async_context(84) | 0; //@line 21658
     FUNCTION_TABLE_vi[$127 & 1023]($$06992 + 36 | 0); //@line 21659
     if (___async) {
      HEAP32[$ReallocAsyncCtx2 >> 2] = 136; //@line 21662
      $130 = $ReallocAsyncCtx2 + 4 | 0; //@line 21663
      HEAP32[$130 >> 2] = $66; //@line 21664
      $131 = $ReallocAsyncCtx2 + 8 | 0; //@line 21665
      HEAP32[$131 >> 2] = $$06992; //@line 21666
      $132 = $ReallocAsyncCtx2 + 12 | 0; //@line 21667
      HEAP32[$132 >> 2] = $2; //@line 21668
      $133 = $ReallocAsyncCtx2 + 16 | 0; //@line 21669
      HEAP32[$133 >> 2] = $67; //@line 21670
      $134 = $ReallocAsyncCtx2 + 20 | 0; //@line 21671
      HEAP32[$134 >> 2] = $4; //@line 21672
      $135 = $ReallocAsyncCtx2 + 24 | 0; //@line 21673
      HEAP32[$135 >> 2] = $6; //@line 21674
      $136 = $ReallocAsyncCtx2 + 28 | 0; //@line 21675
      HEAP32[$136 >> 2] = $8; //@line 21676
      $137 = $ReallocAsyncCtx2 + 32 | 0; //@line 21677
      HEAP32[$137 >> 2] = $10; //@line 21678
      $138 = $ReallocAsyncCtx2 + 36 | 0; //@line 21679
      HEAP32[$138 >> 2] = $12; //@line 21680
      $139 = $ReallocAsyncCtx2 + 40 | 0; //@line 21681
      HEAP32[$139 >> 2] = $14; //@line 21682
      $140 = $ReallocAsyncCtx2 + 44 | 0; //@line 21683
      HEAP32[$140 >> 2] = $16; //@line 21684
      $141 = $ReallocAsyncCtx2 + 48 | 0; //@line 21685
      HEAP32[$141 >> 2] = $18; //@line 21686
      $142 = $ReallocAsyncCtx2 + 52 | 0; //@line 21687
      HEAP32[$142 >> 2] = $20; //@line 21688
      $143 = $ReallocAsyncCtx2 + 56 | 0; //@line 21689
      HEAP32[$143 >> 2] = $22; //@line 21690
      $144 = $ReallocAsyncCtx2 + 60 | 0; //@line 21691
      HEAP32[$144 >> 2] = $24; //@line 21692
      $145 = $ReallocAsyncCtx2 + 64 | 0; //@line 21693
      $$expand_i1_val11 = $26 & 1; //@line 21694
      HEAP8[$145 >> 0] = $$expand_i1_val11; //@line 21695
      $146 = $ReallocAsyncCtx2 + 68 | 0; //@line 21696
      HEAP32[$146 >> 2] = $28; //@line 21697
      $147 = $ReallocAsyncCtx2 + 72 | 0; //@line 21698
      HEAP32[$147 >> 2] = $30; //@line 21699
      $148 = $ReallocAsyncCtx2 + 76 | 0; //@line 21700
      HEAP32[$148 >> 2] = $32; //@line 21701
      $149 = $ReallocAsyncCtx2 + 80 | 0; //@line 21702
      HEAP32[$149 >> 2] = $34; //@line 21703
      sp = STACKTOP; //@line 21704
      return;
     }
     ___async_unwind = 0; //@line 21707
     HEAP32[$ReallocAsyncCtx2 >> 2] = 136; //@line 21708
     $130 = $ReallocAsyncCtx2 + 4 | 0; //@line 21709
     HEAP32[$130 >> 2] = $66; //@line 21710
     $131 = $ReallocAsyncCtx2 + 8 | 0; //@line 21711
     HEAP32[$131 >> 2] = $$06992; //@line 21712
     $132 = $ReallocAsyncCtx2 + 12 | 0; //@line 21713
     HEAP32[$132 >> 2] = $2; //@line 21714
     $133 = $ReallocAsyncCtx2 + 16 | 0; //@line 21715
     HEAP32[$133 >> 2] = $67; //@line 21716
     $134 = $ReallocAsyncCtx2 + 20 | 0; //@line 21717
     HEAP32[$134 >> 2] = $4; //@line 21718
     $135 = $ReallocAsyncCtx2 + 24 | 0; //@line 21719
     HEAP32[$135 >> 2] = $6; //@line 21720
     $136 = $ReallocAsyncCtx2 + 28 | 0; //@line 21721
     HEAP32[$136 >> 2] = $8; //@line 21722
     $137 = $ReallocAsyncCtx2 + 32 | 0; //@line 21723
     HEAP32[$137 >> 2] = $10; //@line 21724
     $138 = $ReallocAsyncCtx2 + 36 | 0; //@line 21725
     HEAP32[$138 >> 2] = $12; //@line 21726
     $139 = $ReallocAsyncCtx2 + 40 | 0; //@line 21727
     HEAP32[$139 >> 2] = $14; //@line 21728
     $140 = $ReallocAsyncCtx2 + 44 | 0; //@line 21729
     HEAP32[$140 >> 2] = $16; //@line 21730
     $141 = $ReallocAsyncCtx2 + 48 | 0; //@line 21731
     HEAP32[$141 >> 2] = $18; //@line 21732
     $142 = $ReallocAsyncCtx2 + 52 | 0; //@line 21733
     HEAP32[$142 >> 2] = $20; //@line 21734
     $143 = $ReallocAsyncCtx2 + 56 | 0; //@line 21735
     HEAP32[$143 >> 2] = $22; //@line 21736
     $144 = $ReallocAsyncCtx2 + 60 | 0; //@line 21737
     HEAP32[$144 >> 2] = $24; //@line 21738
     $145 = $ReallocAsyncCtx2 + 64 | 0; //@line 21739
     $$expand_i1_val11 = $26 & 1; //@line 21740
     HEAP8[$145 >> 0] = $$expand_i1_val11; //@line 21741
     $146 = $ReallocAsyncCtx2 + 68 | 0; //@line 21742
     HEAP32[$146 >> 2] = $28; //@line 21743
     $147 = $ReallocAsyncCtx2 + 72 | 0; //@line 21744
     HEAP32[$147 >> 2] = $30; //@line 21745
     $148 = $ReallocAsyncCtx2 + 76 | 0; //@line 21746
     HEAP32[$148 >> 2] = $32; //@line 21747
     $149 = $ReallocAsyncCtx2 + 80 | 0; //@line 21748
     HEAP32[$149 >> 2] = $34; //@line 21749
     sp = STACKTOP; //@line 21750
     return;
    }
   }
  }
 } while (0);
 $165 = _equeue_tick() | 0; //@line 21756
 if ($26) {
  $166 = $30 - $165 | 0; //@line 21758
  if (($166 | 0) < 1) {
   $168 = $24 + 40 | 0; //@line 21761
   if (HEAP32[$168 >> 2] | 0) {
    _equeue_mutex_lock($14); //@line 21765
    $171 = HEAP32[$168 >> 2] | 0; //@line 21766
    if ($171 | 0) {
     $173 = HEAP32[$20 >> 2] | 0; //@line 21769
     if ($173 | 0) {
      $176 = HEAP32[$24 + 44 >> 2] | 0; //@line 21773
      $179 = (HEAP32[$173 + 20 >> 2] | 0) - $165 | 0; //@line 21776
      $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 21780
      FUNCTION_TABLE_vii[$171 & 15]($176, $179 & ~($179 >> 31)); //@line 21781
      if (___async) {
       HEAP32[$ReallocAsyncCtx3 >> 2] = 137; //@line 21784
       $183 = $ReallocAsyncCtx3 + 4 | 0; //@line 21785
       HEAP32[$183 >> 2] = $12; //@line 21786
       $184 = $ReallocAsyncCtx3 + 8 | 0; //@line 21787
       HEAP32[$184 >> 2] = $14; //@line 21788
       $185 = $ReallocAsyncCtx3 + 12 | 0; //@line 21789
       HEAP32[$185 >> 2] = $18; //@line 21790
       sp = STACKTOP; //@line 21791
       return;
      }
      ___async_unwind = 0; //@line 21794
      HEAP32[$ReallocAsyncCtx3 >> 2] = 137; //@line 21795
      $183 = $ReallocAsyncCtx3 + 4 | 0; //@line 21796
      HEAP32[$183 >> 2] = $12; //@line 21797
      $184 = $ReallocAsyncCtx3 + 8 | 0; //@line 21798
      HEAP32[$184 >> 2] = $14; //@line 21799
      $185 = $ReallocAsyncCtx3 + 12 | 0; //@line 21800
      HEAP32[$185 >> 2] = $18; //@line 21801
      sp = STACKTOP; //@line 21802
      return;
     }
    }
    HEAP8[$12 >> 0] = 1; //@line 21806
    _equeue_mutex_unlock($14); //@line 21807
   }
   HEAP8[$18 >> 0] = 0; //@line 21809
   return;
  } else {
   $$067 = $166; //@line 21812
  }
 } else {
  $$067 = -1; //@line 21815
 }
 _equeue_mutex_lock($14); //@line 21817
 $186 = HEAP32[$20 >> 2] | 0; //@line 21818
 if (!$186) {
  $$2 = $$067; //@line 21821
 } else {
  $190 = (HEAP32[$186 + 20 >> 2] | 0) - $165 | 0; //@line 21825
  $193 = $190 & ~($190 >> 31); //@line 21828
  $$2 = $193 >>> 0 < $$067 >>> 0 ? $193 : $$067; //@line 21831
 }
 _equeue_mutex_unlock($14); //@line 21833
 _equeue_sema_wait($32, $$2) | 0; //@line 21834
 do {
  if (HEAP8[$18 >> 0] | 0) {
   _equeue_mutex_lock($14); //@line 21839
   if (!(HEAP8[$18 >> 0] | 0)) {
    _equeue_mutex_unlock($14); //@line 21843
    break;
   }
   HEAP8[$18 >> 0] = 0; //@line 21846
   _equeue_mutex_unlock($14); //@line 21847
   return;
  }
 } while (0);
 $199 = _equeue_tick() | 0; //@line 21851
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(76) | 0; //@line 21852
 _wait_ms(20); //@line 21853
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 138; //@line 21856
  $200 = $ReallocAsyncCtx5 + 4 | 0; //@line 21857
  HEAP32[$200 >> 2] = $2; //@line 21858
  $201 = $ReallocAsyncCtx5 + 8 | 0; //@line 21859
  HEAP32[$201 >> 2] = $4; //@line 21860
  $202 = $ReallocAsyncCtx5 + 12 | 0; //@line 21861
  HEAP32[$202 >> 2] = $6; //@line 21862
  $203 = $ReallocAsyncCtx5 + 16 | 0; //@line 21863
  HEAP32[$203 >> 2] = $8; //@line 21864
  $204 = $ReallocAsyncCtx5 + 20 | 0; //@line 21865
  HEAP32[$204 >> 2] = $10; //@line 21866
  $205 = $ReallocAsyncCtx5 + 24 | 0; //@line 21867
  HEAP32[$205 >> 2] = $12; //@line 21868
  $206 = $ReallocAsyncCtx5 + 28 | 0; //@line 21869
  HEAP32[$206 >> 2] = $14; //@line 21870
  $207 = $ReallocAsyncCtx5 + 32 | 0; //@line 21871
  HEAP32[$207 >> 2] = $16; //@line 21872
  $208 = $ReallocAsyncCtx5 + 36 | 0; //@line 21873
  HEAP32[$208 >> 2] = $18; //@line 21874
  $209 = $ReallocAsyncCtx5 + 40 | 0; //@line 21875
  HEAP32[$209 >> 2] = $20; //@line 21876
  $210 = $ReallocAsyncCtx5 + 44 | 0; //@line 21877
  HEAP32[$210 >> 2] = $22; //@line 21878
  $211 = $ReallocAsyncCtx5 + 48 | 0; //@line 21879
  HEAP32[$211 >> 2] = $24; //@line 21880
  $212 = $ReallocAsyncCtx5 + 52 | 0; //@line 21881
  $$expand_i1_val13 = $26 & 1; //@line 21882
  HEAP8[$212 >> 0] = $$expand_i1_val13; //@line 21883
  $213 = $ReallocAsyncCtx5 + 56 | 0; //@line 21884
  HEAP32[$213 >> 2] = $28; //@line 21885
  $214 = $ReallocAsyncCtx5 + 60 | 0; //@line 21886
  HEAP32[$214 >> 2] = $30; //@line 21887
  $215 = $ReallocAsyncCtx5 + 64 | 0; //@line 21888
  HEAP32[$215 >> 2] = $32; //@line 21889
  $216 = $ReallocAsyncCtx5 + 68 | 0; //@line 21890
  HEAP32[$216 >> 2] = $34; //@line 21891
  $217 = $ReallocAsyncCtx5 + 72 | 0; //@line 21892
  HEAP32[$217 >> 2] = $199; //@line 21893
  sp = STACKTOP; //@line 21894
  return;
 }
 ___async_unwind = 0; //@line 21897
 HEAP32[$ReallocAsyncCtx5 >> 2] = 138; //@line 21898
 $200 = $ReallocAsyncCtx5 + 4 | 0; //@line 21899
 HEAP32[$200 >> 2] = $2; //@line 21900
 $201 = $ReallocAsyncCtx5 + 8 | 0; //@line 21901
 HEAP32[$201 >> 2] = $4; //@line 21902
 $202 = $ReallocAsyncCtx5 + 12 | 0; //@line 21903
 HEAP32[$202 >> 2] = $6; //@line 21904
 $203 = $ReallocAsyncCtx5 + 16 | 0; //@line 21905
 HEAP32[$203 >> 2] = $8; //@line 21906
 $204 = $ReallocAsyncCtx5 + 20 | 0; //@line 21907
 HEAP32[$204 >> 2] = $10; //@line 21908
 $205 = $ReallocAsyncCtx5 + 24 | 0; //@line 21909
 HEAP32[$205 >> 2] = $12; //@line 21910
 $206 = $ReallocAsyncCtx5 + 28 | 0; //@line 21911
 HEAP32[$206 >> 2] = $14; //@line 21912
 $207 = $ReallocAsyncCtx5 + 32 | 0; //@line 21913
 HEAP32[$207 >> 2] = $16; //@line 21914
 $208 = $ReallocAsyncCtx5 + 36 | 0; //@line 21915
 HEAP32[$208 >> 2] = $18; //@line 21916
 $209 = $ReallocAsyncCtx5 + 40 | 0; //@line 21917
 HEAP32[$209 >> 2] = $20; //@line 21918
 $210 = $ReallocAsyncCtx5 + 44 | 0; //@line 21919
 HEAP32[$210 >> 2] = $22; //@line 21920
 $211 = $ReallocAsyncCtx5 + 48 | 0; //@line 21921
 HEAP32[$211 >> 2] = $24; //@line 21922
 $212 = $ReallocAsyncCtx5 + 52 | 0; //@line 21923
 $$expand_i1_val13 = $26 & 1; //@line 21924
 HEAP8[$212 >> 0] = $$expand_i1_val13; //@line 21925
 $213 = $ReallocAsyncCtx5 + 56 | 0; //@line 21926
 HEAP32[$213 >> 2] = $28; //@line 21927
 $214 = $ReallocAsyncCtx5 + 60 | 0; //@line 21928
 HEAP32[$214 >> 2] = $30; //@line 21929
 $215 = $ReallocAsyncCtx5 + 64 | 0; //@line 21930
 HEAP32[$215 >> 2] = $32; //@line 21931
 $216 = $ReallocAsyncCtx5 + 68 | 0; //@line 21932
 HEAP32[$216 >> 2] = $34; //@line 21933
 $217 = $ReallocAsyncCtx5 + 72 | 0; //@line 21934
 HEAP32[$217 >> 2] = $199; //@line 21935
 sp = STACKTOP; //@line 21936
 return;
}
function _fmt_fp($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$$3484 = 0, $$$3484700 = 0, $$$4502 = 0, $$$564 = 0.0, $$0 = 0, $$0463$lcssa = 0, $$0463587 = 0, $$0464597 = 0, $$0471 = 0.0, $$0479 = 0, $$0487644 = 0, $$0488655 = 0, $$0488657 = 0, $$0496$$9 = 0, $$0497656 = 0, $$0498 = 0, $$0509585 = 0.0, $$0511 = 0, $$0514639 = 0, $$0520 = 0, $$0521 = 0, $$0521$ = 0, $$0523 = 0, $$0527$in633 = 0, $$0530638 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0, $$1480 = 0, $$1482$lcssa = 0, $$1482663 = 0, $$1489643 = 0, $$1499$lcssa = 0, $$1499662 = 0, $$1508586 = 0, $$1512$lcssa = 0, $$1512610 = 0, $$1515 = 0, $$1524 = 0, $$1528617 = 0, $$1531$lcssa = 0, $$1531632 = 0, $$1601 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2483$ph = 0, $$2500 = 0, $$2513 = 0, $$2516621 = 0, $$2529 = 0, $$2532620 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484650 = 0, $$3501$lcssa = 0, $$3501649 = 0, $$3533616 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478593 = 0, $$4492 = 0, $$4502 = 0, $$4518 = 0, $$5$lcssa = 0, $$540 = 0, $$540$ = 0, $$543 = 0.0, $$548 = 0, $$5486$lcssa = 0, $$5486626 = 0, $$5493600 = 0, $$550 = 0, $$5519$ph = 0, $$5605 = 0, $$561 = 0, $$6 = 0, $$6494592 = 0, $$7495604 = 0, $$7505 = 0, $$7505$ = 0, $$7505$ph = 0, $$8 = 0, $$9$ph = 0, $$lcssa675 = 0, $$pn = 0, $$pr = 0, $$pr566 = 0, $$pre$phi691Z2D = 0, $$pre$phi698Z2D = 0, $$pre693 = 0, $$sink = 0, $$sink547$lcssa = 0, $$sink547625 = 0, $$sink560 = 0, $10 = 0, $101 = 0, $104 = 0, $106 = 0, $11 = 0, $113 = 0, $116 = 0, $124 = 0, $125 = 0, $128 = 0, $130 = 0, $131 = 0, $132 = 0, $138 = 0, $140 = 0, $144 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $154 = 0, $160 = 0, $161 = 0, $162 = 0, $174 = 0, $185 = 0, $189 = 0, $190 = 0, $193 = 0, $198 = 0, $199 = 0, $201 = 0, $209 = 0, $212 = 0, $213 = 0, $215 = 0, $217 = 0, $218 = 0, $221 = 0, $225 = 0, $230 = 0, $233 = 0, $236 = 0, $238 = 0, $240 = 0, $242 = 0, $247 = 0, $248 = 0, $251 = 0, $253 = 0, $256 = 0, $259 = 0, $267 = 0, $27 = 0, $270 = 0, $275 = 0, $284 = 0, $285 = 0, $289 = 0, $292 = 0, $294 = 0, $296 = 0, $300 = 0, $303 = 0, $304 = 0, $308 = 0, $31 = 0, $318 = 0, $323 = 0, $326 = 0, $327 = 0, $328 = 0, $330 = 0, $335 = 0, $347 = 0, $35 = 0.0, $351 = 0, $356 = 0, $36 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $369 = 0, $373 = 0, $375 = 0, $378 = 0, $381 = 0, $39 = 0, $41 = 0, $44 = 0, $46 = 0, $6 = 0, $60 = 0, $63 = 0, $66 = 0, $68 = 0, $7 = 0, $76 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 14296
 STACKTOP = STACKTOP + 560 | 0; //@line 14297
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(560); //@line 14297
 $6 = sp + 8 | 0; //@line 14298
 $7 = sp; //@line 14299
 $8 = sp + 524 | 0; //@line 14300
 $9 = $8; //@line 14301
 $10 = sp + 512 | 0; //@line 14302
 HEAP32[$7 >> 2] = 0; //@line 14303
 $11 = $10 + 12 | 0; //@line 14304
 ___DOUBLE_BITS_677($1) | 0; //@line 14305
 if ((tempRet0 | 0) < 0) {
  $$0471 = -$1; //@line 14310
  $$0520 = 1; //@line 14310
  $$0521 = 16454; //@line 14310
 } else {
  $$0471 = $1; //@line 14321
  $$0520 = ($4 & 2049 | 0) != 0 & 1; //@line 14321
  $$0521 = ($4 & 2048 | 0) == 0 ? ($4 & 1 | 0) == 0 ? 16455 : 16460 : 16457; //@line 14321
 }
 ___DOUBLE_BITS_677($$0471) | 0; //@line 14323
 do {
  if (0 == 0 & (tempRet0 & 2146435072 | 0) == 2146435072) {
   $27 = ($5 & 32 | 0) != 0; //@line 14332
   $31 = $$0520 + 3 | 0; //@line 14337
   _pad_676($0, 32, $2, $31, $4 & -65537); //@line 14339
   _out_670($0, $$0521, $$0520); //@line 14340
   _out_670($0, $$0471 != $$0471 | 0.0 != 0.0 ? $27 ? 16481 : 16485 : $27 ? 16473 : 16477, 3); //@line 14341
   _pad_676($0, 32, $2, $31, $4 ^ 8192); //@line 14343
   $$sink560 = $31; //@line 14344
  } else {
   $35 = +_frexpl($$0471, $7) * 2.0; //@line 14347
   $36 = $35 != 0.0; //@line 14348
   if ($36) {
    HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1; //@line 14352
   }
   $39 = $5 | 32; //@line 14354
   if (($39 | 0) == 97) {
    $41 = $5 & 32; //@line 14357
    $$0521$ = ($41 | 0) == 0 ? $$0521 : $$0521 + 9 | 0; //@line 14360
    $44 = $$0520 | 2; //@line 14361
    $46 = 12 - $3 | 0; //@line 14363
    do {
     if ($3 >>> 0 > 11 | ($46 | 0) == 0) {
      $$1472 = $35; //@line 14368
     } else {
      $$0509585 = 8.0; //@line 14370
      $$1508586 = $46; //@line 14370
      do {
       $$1508586 = $$1508586 + -1 | 0; //@line 14372
       $$0509585 = $$0509585 * 16.0; //@line 14373
      } while (($$1508586 | 0) != 0);
      if ((HEAP8[$$0521$ >> 0] | 0) == 45) {
       $$1472 = -($$0509585 + (-$35 - $$0509585)); //@line 14388
       break;
      } else {
       $$1472 = $35 + $$0509585 - $$0509585; //@line 14393
       break;
      }
     }
    } while (0);
    $60 = HEAP32[$7 >> 2] | 0; //@line 14398
    $63 = ($60 | 0) < 0 ? 0 - $60 | 0 : $60; //@line 14401
    $66 = _fmt_u($63, (($63 | 0) < 0) << 31 >> 31, $11) | 0; //@line 14404
    if (($66 | 0) == ($11 | 0)) {
     $68 = $10 + 11 | 0; //@line 14407
     HEAP8[$68 >> 0] = 48; //@line 14408
     $$0511 = $68; //@line 14409
    } else {
     $$0511 = $66; //@line 14411
    }
    HEAP8[$$0511 + -1 >> 0] = ($60 >> 31 & 2) + 43; //@line 14418
    $76 = $$0511 + -2 | 0; //@line 14421
    HEAP8[$76 >> 0] = $5 + 15; //@line 14422
    $77 = ($3 | 0) < 1; //@line 14423
    $79 = ($4 & 8 | 0) == 0; //@line 14425
    $$0523 = $8; //@line 14426
    $$2473 = $$1472; //@line 14426
    while (1) {
     $80 = ~~$$2473; //@line 14428
     $86 = $$0523 + 1 | 0; //@line 14434
     HEAP8[$$0523 >> 0] = $41 | HEAPU8[16489 + $80 >> 0]; //@line 14435
     $$2473 = ($$2473 - +($80 | 0)) * 16.0; //@line 14438
     if (($86 - $9 | 0) == 1) {
      if ($79 & ($77 & $$2473 == 0.0)) {
       $$1524 = $86; //@line 14447
      } else {
       HEAP8[$86 >> 0] = 46; //@line 14450
       $$1524 = $$0523 + 2 | 0; //@line 14451
      }
     } else {
      $$1524 = $86; //@line 14454
     }
     if (!($$2473 != 0.0)) {
      break;
     } else {
      $$0523 = $$1524; //@line 14458
     }
    }
    $$pre693 = $$1524; //@line 14464
    if (!$3) {
     label = 24; //@line 14466
    } else {
     if ((-2 - $9 + $$pre693 | 0) < ($3 | 0)) {
      $$pre$phi691Z2D = $$pre693 - $9 | 0; //@line 14474
      $$sink = $3 + 2 | 0; //@line 14474
     } else {
      label = 24; //@line 14476
     }
    }
    if ((label | 0) == 24) {
     $101 = $$pre693 - $9 | 0; //@line 14480
     $$pre$phi691Z2D = $101; //@line 14481
     $$sink = $101; //@line 14481
    }
    $104 = $11 - $76 | 0; //@line 14485
    $106 = $104 + $44 + $$sink | 0; //@line 14487
    _pad_676($0, 32, $2, $106, $4); //@line 14488
    _out_670($0, $$0521$, $44); //@line 14489
    _pad_676($0, 48, $2, $106, $4 ^ 65536); //@line 14491
    _out_670($0, $8, $$pre$phi691Z2D); //@line 14492
    _pad_676($0, 48, $$sink - $$pre$phi691Z2D | 0, 0, 0); //@line 14494
    _out_670($0, $76, $104); //@line 14495
    _pad_676($0, 32, $2, $106, $4 ^ 8192); //@line 14497
    $$sink560 = $106; //@line 14498
    break;
   }
   $$540 = ($3 | 0) < 0 ? 6 : $3; //@line 14502
   if ($36) {
    $113 = (HEAP32[$7 >> 2] | 0) + -28 | 0; //@line 14506
    HEAP32[$7 >> 2] = $113; //@line 14507
    $$3 = $35 * 268435456.0; //@line 14508
    $$pr = $113; //@line 14508
   } else {
    $$3 = $35; //@line 14511
    $$pr = HEAP32[$7 >> 2] | 0; //@line 14511
   }
   $$561 = ($$pr | 0) < 0 ? $6 : $6 + 288 | 0; //@line 14515
   $$0498 = $$561; //@line 14516
   $$4 = $$3; //@line 14516
   do {
    $116 = ~~$$4 >>> 0; //@line 14518
    HEAP32[$$0498 >> 2] = $116; //@line 14519
    $$0498 = $$0498 + 4 | 0; //@line 14520
    $$4 = ($$4 - +($116 >>> 0)) * 1.0e9; //@line 14523
   } while ($$4 != 0.0);
   if (($$pr | 0) > 0) {
    $$1482663 = $$561; //@line 14533
    $$1499662 = $$0498; //@line 14533
    $124 = $$pr; //@line 14533
    while (1) {
     $125 = ($124 | 0) < 29 ? $124 : 29; //@line 14536
     $$0488655 = $$1499662 + -4 | 0; //@line 14537
     if ($$0488655 >>> 0 < $$1482663 >>> 0) {
      $$2483$ph = $$1482663; //@line 14540
     } else {
      $$0488657 = $$0488655; //@line 14542
      $$0497656 = 0; //@line 14542
      do {
       $128 = _bitshift64Shl(HEAP32[$$0488657 >> 2] | 0, 0, $125 | 0) | 0; //@line 14545
       $130 = _i64Add($128 | 0, tempRet0 | 0, $$0497656 | 0, 0) | 0; //@line 14547
       $131 = tempRet0; //@line 14548
       $132 = ___uremdi3($130 | 0, $131 | 0, 1e9, 0) | 0; //@line 14549
       HEAP32[$$0488657 >> 2] = $132; //@line 14551
       $$0497656 = ___udivdi3($130 | 0, $131 | 0, 1e9, 0) | 0; //@line 14552
       $$0488657 = $$0488657 + -4 | 0; //@line 14554
      } while ($$0488657 >>> 0 >= $$1482663 >>> 0);
      if (!$$0497656) {
       $$2483$ph = $$1482663; //@line 14564
      } else {
       $138 = $$1482663 + -4 | 0; //@line 14566
       HEAP32[$138 >> 2] = $$0497656; //@line 14567
       $$2483$ph = $138; //@line 14568
      }
     }
     $$2500 = $$1499662; //@line 14571
     while (1) {
      if ($$2500 >>> 0 <= $$2483$ph >>> 0) {
       break;
      }
      $140 = $$2500 + -4 | 0; //@line 14577
      if (!(HEAP32[$140 >> 2] | 0)) {
       $$2500 = $140; //@line 14581
      } else {
       break;
      }
     }
     $144 = (HEAP32[$7 >> 2] | 0) - $125 | 0; //@line 14587
     HEAP32[$7 >> 2] = $144; //@line 14588
     if (($144 | 0) > 0) {
      $$1482663 = $$2483$ph; //@line 14591
      $$1499662 = $$2500; //@line 14591
      $124 = $144; //@line 14591
     } else {
      $$1482$lcssa = $$2483$ph; //@line 14593
      $$1499$lcssa = $$2500; //@line 14593
      $$pr566 = $144; //@line 14593
      break;
     }
    }
   } else {
    $$1482$lcssa = $$561; //@line 14598
    $$1499$lcssa = $$0498; //@line 14598
    $$pr566 = $$pr; //@line 14598
   }
   if (($$pr566 | 0) < 0) {
    $149 = (($$540 + 25 | 0) / 9 | 0) + 1 | 0; //@line 14604
    $150 = ($39 | 0) == 102; //@line 14605
    $$3484650 = $$1482$lcssa; //@line 14606
    $$3501649 = $$1499$lcssa; //@line 14606
    $152 = $$pr566; //@line 14606
    while (1) {
     $151 = 0 - $152 | 0; //@line 14608
     $154 = ($151 | 0) < 9 ? $151 : 9; //@line 14610
     if ($$3484650 >>> 0 < $$3501649 >>> 0) {
      $160 = (1 << $154) + -1 | 0; //@line 14614
      $161 = 1e9 >>> $154; //@line 14615
      $$0487644 = 0; //@line 14616
      $$1489643 = $$3484650; //@line 14616
      do {
       $162 = HEAP32[$$1489643 >> 2] | 0; //@line 14618
       HEAP32[$$1489643 >> 2] = ($162 >>> $154) + $$0487644; //@line 14622
       $$0487644 = Math_imul($162 & $160, $161) | 0; //@line 14623
       $$1489643 = $$1489643 + 4 | 0; //@line 14624
      } while ($$1489643 >>> 0 < $$3501649 >>> 0);
      $$$3484 = (HEAP32[$$3484650 >> 2] | 0) == 0 ? $$3484650 + 4 | 0 : $$3484650; //@line 14635
      if (!$$0487644) {
       $$$3484700 = $$$3484; //@line 14638
       $$4502 = $$3501649; //@line 14638
      } else {
       HEAP32[$$3501649 >> 2] = $$0487644; //@line 14641
       $$$3484700 = $$$3484; //@line 14642
       $$4502 = $$3501649 + 4 | 0; //@line 14642
      }
     } else {
      $$$3484700 = (HEAP32[$$3484650 >> 2] | 0) == 0 ? $$3484650 + 4 | 0 : $$3484650; //@line 14649
      $$4502 = $$3501649; //@line 14649
     }
     $174 = $150 ? $$561 : $$$3484700; //@line 14651
     $$$4502 = ($$4502 - $174 >> 2 | 0) > ($149 | 0) ? $174 + ($149 << 2) | 0 : $$4502; //@line 14658
     $152 = (HEAP32[$7 >> 2] | 0) + $154 | 0; //@line 14660
     HEAP32[$7 >> 2] = $152; //@line 14661
     if (($152 | 0) >= 0) {
      $$3484$lcssa = $$$3484700; //@line 14666
      $$3501$lcssa = $$$4502; //@line 14666
      break;
     } else {
      $$3484650 = $$$3484700; //@line 14664
      $$3501649 = $$$4502; //@line 14664
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa; //@line 14671
    $$3501$lcssa = $$1499$lcssa; //@line 14671
   }
   $185 = $$561; //@line 14674
   if ($$3484$lcssa >>> 0 < $$3501$lcssa >>> 0) {
    $189 = ($185 - $$3484$lcssa >> 2) * 9 | 0; //@line 14679
    $190 = HEAP32[$$3484$lcssa >> 2] | 0; //@line 14680
    if ($190 >>> 0 < 10) {
     $$1515 = $189; //@line 14683
    } else {
     $$0514639 = $189; //@line 14685
     $$0530638 = 10; //@line 14685
     while (1) {
      $$0530638 = $$0530638 * 10 | 0; //@line 14687
      $193 = $$0514639 + 1 | 0; //@line 14688
      if ($190 >>> 0 < $$0530638 >>> 0) {
       $$1515 = $193; //@line 14691
       break;
      } else {
       $$0514639 = $193; //@line 14694
      }
     }
    }
   } else {
    $$1515 = 0; //@line 14699
   }
   $198 = ($39 | 0) == 103; //@line 14704
   $199 = ($$540 | 0) != 0; //@line 14705
   $201 = $$540 - (($39 | 0) != 102 ? $$1515 : 0) + (($199 & $198) << 31 >> 31) | 0; //@line 14708
   if (($201 | 0) < ((($$3501$lcssa - $185 >> 2) * 9 | 0) + -9 | 0)) {
    $209 = $201 + 9216 | 0; //@line 14717
    $212 = $$561 + 4 + ((($209 | 0) / 9 | 0) + -1024 << 2) | 0; //@line 14720
    $213 = ($209 | 0) % 9 | 0; //@line 14721
    if (($213 | 0) < 8) {
     $$0527$in633 = $213; //@line 14724
     $$1531632 = 10; //@line 14724
     while (1) {
      $215 = $$1531632 * 10 | 0; //@line 14727
      if (($$0527$in633 | 0) < 7) {
       $$0527$in633 = $$0527$in633 + 1 | 0; //@line 14730
       $$1531632 = $215; //@line 14730
      } else {
       $$1531$lcssa = $215; //@line 14732
       break;
      }
     }
    } else {
     $$1531$lcssa = 10; //@line 14737
    }
    $217 = HEAP32[$212 >> 2] | 0; //@line 14739
    $218 = ($217 >>> 0) % ($$1531$lcssa >>> 0) | 0; //@line 14740
    $221 = ($212 + 4 | 0) == ($$3501$lcssa | 0); //@line 14743
    if ($221 & ($218 | 0) == 0) {
     $$4492 = $212; //@line 14746
     $$4518 = $$1515; //@line 14746
     $$8 = $$3484$lcssa; //@line 14746
    } else {
     $$543 = ((($217 >>> 0) / ($$1531$lcssa >>> 0) | 0) & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0; //@line 14751
     $225 = ($$1531$lcssa | 0) / 2 | 0; //@line 14752
     $$$564 = $218 >>> 0 < $225 >>> 0 ? .5 : $221 & ($218 | 0) == ($225 | 0) ? 1.0 : 1.5; //@line 14757
     if (!$$0520) {
      $$1467 = $$$564; //@line 14760
      $$1469 = $$543; //@line 14760
     } else {
      $230 = (HEAP8[$$0521 >> 0] | 0) == 45; //@line 14763
      $$1467 = $230 ? -$$$564 : $$$564; //@line 14768
      $$1469 = $230 ? -$$543 : $$543; //@line 14768
     }
     $233 = $217 - $218 | 0; //@line 14770
     HEAP32[$212 >> 2] = $233; //@line 14771
     if ($$1469 + $$1467 != $$1469) {
      $236 = $233 + $$1531$lcssa | 0; //@line 14775
      HEAP32[$212 >> 2] = $236; //@line 14776
      if ($236 >>> 0 > 999999999) {
       $$5486626 = $$3484$lcssa; //@line 14779
       $$sink547625 = $212; //@line 14779
       while (1) {
        $238 = $$sink547625 + -4 | 0; //@line 14781
        HEAP32[$$sink547625 >> 2] = 0; //@line 14782
        if ($238 >>> 0 < $$5486626 >>> 0) {
         $240 = $$5486626 + -4 | 0; //@line 14785
         HEAP32[$240 >> 2] = 0; //@line 14786
         $$6 = $240; //@line 14787
        } else {
         $$6 = $$5486626; //@line 14789
        }
        $242 = (HEAP32[$238 >> 2] | 0) + 1 | 0; //@line 14792
        HEAP32[$238 >> 2] = $242; //@line 14793
        if ($242 >>> 0 > 999999999) {
         $$5486626 = $$6; //@line 14796
         $$sink547625 = $238; //@line 14796
        } else {
         $$5486$lcssa = $$6; //@line 14798
         $$sink547$lcssa = $238; //@line 14798
         break;
        }
       }
      } else {
       $$5486$lcssa = $$3484$lcssa; //@line 14803
       $$sink547$lcssa = $212; //@line 14803
      }
      $247 = ($185 - $$5486$lcssa >> 2) * 9 | 0; //@line 14808
      $248 = HEAP32[$$5486$lcssa >> 2] | 0; //@line 14809
      if ($248 >>> 0 < 10) {
       $$4492 = $$sink547$lcssa; //@line 14812
       $$4518 = $247; //@line 14812
       $$8 = $$5486$lcssa; //@line 14812
      } else {
       $$2516621 = $247; //@line 14814
       $$2532620 = 10; //@line 14814
       while (1) {
        $$2532620 = $$2532620 * 10 | 0; //@line 14816
        $251 = $$2516621 + 1 | 0; //@line 14817
        if ($248 >>> 0 < $$2532620 >>> 0) {
         $$4492 = $$sink547$lcssa; //@line 14820
         $$4518 = $251; //@line 14820
         $$8 = $$5486$lcssa; //@line 14820
         break;
        } else {
         $$2516621 = $251; //@line 14823
        }
       }
      }
     } else {
      $$4492 = $212; //@line 14828
      $$4518 = $$1515; //@line 14828
      $$8 = $$3484$lcssa; //@line 14828
     }
    }
    $253 = $$4492 + 4 | 0; //@line 14831
    $$5519$ph = $$4518; //@line 14834
    $$7505$ph = $$3501$lcssa >>> 0 > $253 >>> 0 ? $253 : $$3501$lcssa; //@line 14834
    $$9$ph = $$8; //@line 14834
   } else {
    $$5519$ph = $$1515; //@line 14836
    $$7505$ph = $$3501$lcssa; //@line 14836
    $$9$ph = $$3484$lcssa; //@line 14836
   }
   $$7505 = $$7505$ph; //@line 14838
   while (1) {
    if ($$7505 >>> 0 <= $$9$ph >>> 0) {
     $$lcssa675 = 0; //@line 14842
     break;
    }
    $256 = $$7505 + -4 | 0; //@line 14845
    if (!(HEAP32[$256 >> 2] | 0)) {
     $$7505 = $256; //@line 14849
    } else {
     $$lcssa675 = 1; //@line 14851
     break;
    }
   }
   $259 = 0 - $$5519$ph | 0; //@line 14855
   do {
    if ($198) {
     $$540$ = $$540 + (($199 ^ 1) & 1) | 0; //@line 14860
     if (($$540$ | 0) > ($$5519$ph | 0) & ($$5519$ph | 0) > -5) {
      $$0479 = $5 + -1 | 0; //@line 14868
      $$2476 = $$540$ + -1 - $$5519$ph | 0; //@line 14868
     } else {
      $$0479 = $5 + -2 | 0; //@line 14872
      $$2476 = $$540$ + -1 | 0; //@line 14872
     }
     $267 = $4 & 8; //@line 14874
     if (!$267) {
      if ($$lcssa675) {
       $270 = HEAP32[$$7505 + -4 >> 2] | 0; //@line 14879
       if (!$270) {
        $$2529 = 9; //@line 14882
       } else {
        if (!(($270 >>> 0) % 10 | 0)) {
         $$1528617 = 0; //@line 14887
         $$3533616 = 10; //@line 14887
         while (1) {
          $$3533616 = $$3533616 * 10 | 0; //@line 14889
          $275 = $$1528617 + 1 | 0; //@line 14890
          if (($270 >>> 0) % ($$3533616 >>> 0) | 0 | 0) {
           $$2529 = $275; //@line 14896
           break;
          } else {
           $$1528617 = $275; //@line 14894
          }
         }
        } else {
         $$2529 = 0; //@line 14901
        }
       }
      } else {
       $$2529 = 9; //@line 14905
      }
      $284 = (($$7505 - $185 >> 2) * 9 | 0) + -9 | 0; //@line 14913
      if (($$0479 | 32 | 0) == 102) {
       $285 = $284 - $$2529 | 0; //@line 14915
       $$548 = ($285 | 0) > 0 ? $285 : 0; //@line 14917
       $$1480 = $$0479; //@line 14920
       $$3477 = ($$2476 | 0) < ($$548 | 0) ? $$2476 : $$548; //@line 14920
       $$pre$phi698Z2D = 0; //@line 14920
       break;
      } else {
       $289 = $284 + $$5519$ph - $$2529 | 0; //@line 14924
       $$550 = ($289 | 0) > 0 ? $289 : 0; //@line 14926
       $$1480 = $$0479; //@line 14929
       $$3477 = ($$2476 | 0) < ($$550 | 0) ? $$2476 : $$550; //@line 14929
       $$pre$phi698Z2D = 0; //@line 14929
       break;
      }
     } else {
      $$1480 = $$0479; //@line 14933
      $$3477 = $$2476; //@line 14933
      $$pre$phi698Z2D = $267; //@line 14933
     }
    } else {
     $$1480 = $5; //@line 14937
     $$3477 = $$540; //@line 14937
     $$pre$phi698Z2D = $4 & 8; //@line 14937
    }
   } while (0);
   $292 = $$3477 | $$pre$phi698Z2D; //@line 14940
   $294 = ($292 | 0) != 0 & 1; //@line 14942
   $296 = ($$1480 | 32 | 0) == 102; //@line 14944
   if ($296) {
    $$2513 = 0; //@line 14948
    $$pn = ($$5519$ph | 0) > 0 ? $$5519$ph : 0; //@line 14948
   } else {
    $300 = ($$5519$ph | 0) < 0 ? $259 : $$5519$ph; //@line 14951
    $303 = _fmt_u($300, (($300 | 0) < 0) << 31 >> 31, $11) | 0; //@line 14954
    $304 = $11; //@line 14955
    if (($304 - $303 | 0) < 2) {
     $$1512610 = $303; //@line 14960
     while (1) {
      $308 = $$1512610 + -1 | 0; //@line 14962
      HEAP8[$308 >> 0] = 48; //@line 14963
      if (($304 - $308 | 0) < 2) {
       $$1512610 = $308; //@line 14968
      } else {
       $$1512$lcssa = $308; //@line 14970
       break;
      }
     }
    } else {
     $$1512$lcssa = $303; //@line 14975
    }
    HEAP8[$$1512$lcssa + -1 >> 0] = ($$5519$ph >> 31 & 2) + 43; //@line 14982
    $318 = $$1512$lcssa + -2 | 0; //@line 14984
    HEAP8[$318 >> 0] = $$1480; //@line 14985
    $$2513 = $318; //@line 14988
    $$pn = $304 - $318 | 0; //@line 14988
   }
   $323 = $$0520 + 1 + $$3477 + $294 + $$pn | 0; //@line 14993
   _pad_676($0, 32, $2, $323, $4); //@line 14994
   _out_670($0, $$0521, $$0520); //@line 14995
   _pad_676($0, 48, $2, $323, $4 ^ 65536); //@line 14997
   if ($296) {
    $$0496$$9 = $$9$ph >>> 0 > $$561 >>> 0 ? $$561 : $$9$ph; //@line 15000
    $326 = $8 + 9 | 0; //@line 15001
    $327 = $326; //@line 15002
    $328 = $8 + 8 | 0; //@line 15003
    $$5493600 = $$0496$$9; //@line 15004
    do {
     $330 = _fmt_u(HEAP32[$$5493600 >> 2] | 0, 0, $326) | 0; //@line 15007
     if (($$5493600 | 0) == ($$0496$$9 | 0)) {
      if (($330 | 0) == ($326 | 0)) {
       HEAP8[$328 >> 0] = 48; //@line 15012
       $$1465 = $328; //@line 15013
      } else {
       $$1465 = $330; //@line 15015
      }
     } else {
      if ($330 >>> 0 > $8 >>> 0) {
       _memset($8 | 0, 48, $330 - $9 | 0) | 0; //@line 15022
       $$0464597 = $330; //@line 15023
       while (1) {
        $335 = $$0464597 + -1 | 0; //@line 15025
        if ($335 >>> 0 > $8 >>> 0) {
         $$0464597 = $335; //@line 15028
        } else {
         $$1465 = $335; //@line 15030
         break;
        }
       }
      } else {
       $$1465 = $330; //@line 15035
      }
     }
     _out_670($0, $$1465, $327 - $$1465 | 0); //@line 15040
     $$5493600 = $$5493600 + 4 | 0; //@line 15041
    } while ($$5493600 >>> 0 <= $$561 >>> 0);
    if ($292 | 0) {
     _out_670($0, 16505, 1); //@line 15051
    }
    if ($$5493600 >>> 0 < $$7505 >>> 0 & ($$3477 | 0) > 0) {
     $$4478593 = $$3477; //@line 15057
     $$6494592 = $$5493600; //@line 15057
     while (1) {
      $347 = _fmt_u(HEAP32[$$6494592 >> 2] | 0, 0, $326) | 0; //@line 15060
      if ($347 >>> 0 > $8 >>> 0) {
       _memset($8 | 0, 48, $347 - $9 | 0) | 0; //@line 15065
       $$0463587 = $347; //@line 15066
       while (1) {
        $351 = $$0463587 + -1 | 0; //@line 15068
        if ($351 >>> 0 > $8 >>> 0) {
         $$0463587 = $351; //@line 15071
        } else {
         $$0463$lcssa = $351; //@line 15073
         break;
        }
       }
      } else {
       $$0463$lcssa = $347; //@line 15078
      }
      _out_670($0, $$0463$lcssa, ($$4478593 | 0) < 9 ? $$4478593 : 9); //@line 15082
      $$6494592 = $$6494592 + 4 | 0; //@line 15083
      $356 = $$4478593 + -9 | 0; //@line 15084
      if (!($$6494592 >>> 0 < $$7505 >>> 0 & ($$4478593 | 0) > 9)) {
       $$4478$lcssa = $356; //@line 15091
       break;
      } else {
       $$4478593 = $356; //@line 15089
      }
     }
    } else {
     $$4478$lcssa = $$3477; //@line 15096
    }
    _pad_676($0, 48, $$4478$lcssa + 9 | 0, 9, 0); //@line 15099
   } else {
    $$7505$ = $$lcssa675 ? $$7505 : $$9$ph + 4 | 0; //@line 15102
    if (($$3477 | 0) > -1) {
     $363 = $8 + 9 | 0; //@line 15105
     $364 = ($$pre$phi698Z2D | 0) == 0; //@line 15106
     $365 = $363; //@line 15107
     $366 = 0 - $9 | 0; //@line 15108
     $367 = $8 + 8 | 0; //@line 15109
     $$5605 = $$3477; //@line 15110
     $$7495604 = $$9$ph; //@line 15110
     while (1) {
      $369 = _fmt_u(HEAP32[$$7495604 >> 2] | 0, 0, $363) | 0; //@line 15113
      if (($369 | 0) == ($363 | 0)) {
       HEAP8[$367 >> 0] = 48; //@line 15116
       $$0 = $367; //@line 15117
      } else {
       $$0 = $369; //@line 15119
      }
      do {
       if (($$7495604 | 0) == ($$9$ph | 0)) {
        $375 = $$0 + 1 | 0; //@line 15124
        _out_670($0, $$0, 1); //@line 15125
        if ($364 & ($$5605 | 0) < 1) {
         $$2 = $375; //@line 15129
         break;
        }
        _out_670($0, 16505, 1); //@line 15132
        $$2 = $375; //@line 15133
       } else {
        if ($$0 >>> 0 <= $8 >>> 0) {
         $$2 = $$0; //@line 15137
         break;
        }
        _memset($8 | 0, 48, $$0 + $366 | 0) | 0; //@line 15142
        $$1601 = $$0; //@line 15143
        while (1) {
         $373 = $$1601 + -1 | 0; //@line 15145
         if ($373 >>> 0 > $8 >>> 0) {
          $$1601 = $373; //@line 15148
         } else {
          $$2 = $373; //@line 15150
          break;
         }
        }
       }
      } while (0);
      $378 = $365 - $$2 | 0; //@line 15157
      _out_670($0, $$2, ($$5605 | 0) > ($378 | 0) ? $378 : $$5605); //@line 15160
      $381 = $$5605 - $378 | 0; //@line 15161
      $$7495604 = $$7495604 + 4 | 0; //@line 15162
      if (!($$7495604 >>> 0 < $$7505$ >>> 0 & ($381 | 0) > -1)) {
       $$5$lcssa = $381; //@line 15169
       break;
      } else {
       $$5605 = $381; //@line 15167
      }
     }
    } else {
     $$5$lcssa = $$3477; //@line 15174
    }
    _pad_676($0, 48, $$5$lcssa + 18 | 0, 18, 0); //@line 15177
    _out_670($0, $$2513, $11 - $$2513 | 0); //@line 15181
   }
   _pad_676($0, 32, $2, $323, $4 ^ 8192); //@line 15184
   $$sink560 = $323; //@line 15185
  }
 } while (0);
 STACKTOP = sp; //@line 15190
 return (($$sink560 | 0) < ($2 | 0) ? $2 : $$sink560) | 0; //@line 15190
}
function _equeue_dispatch__async_cb($0) {
 $0 = $0 | 0;
 var $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$067 = 0, $$06992$reg2mem$0 = 0, $$06992$reg2mem$0$phi = 0, $$2 = 0, $$expand_i1_val = 0, $$expand_i1_val31 = 0, $$expand_i1_val33 = 0, $$expand_i1_val35 = 0, $$reg2mem$0 = 0, $$reg2mem23$0 = 0, $$sink$in$i$i = 0, $10 = 0, $102 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $127 = 0, $128 = 0, $129 = 0, $131 = 0, $132 = 0, $14 = 0, $140 = 0, $141 = 0, $143 = 0, $146 = 0, $148 = 0, $151 = 0, $154 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $165 = 0, $168 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $40 = 0, $41 = 0, $42 = 0, $44 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $70 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 19364
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19370
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19374
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19376
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 19378
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 19380
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 19382
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 19384
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 19386
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 19388
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 19390
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 19392
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 19394
 $32 = HEAP8[$0 + 64 >> 0] & 1; //@line 19397
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 19399
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 19401
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 19403
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 19405
 $$06992$reg2mem$0 = HEAP32[$0 + 8 >> 2] | 0; //@line 19406
 $$reg2mem$0 = HEAP32[$0 + 4 >> 2] | 0; //@line 19406
 $$reg2mem23$0 = HEAP32[$0 + 16 >> 2] | 0; //@line 19406
 while (1) {
  $68 = HEAP32[$$06992$reg2mem$0 + 24 >> 2] | 0; //@line 19409
  if (($68 | 0) > -1) {
   label = 8; //@line 19412
   break;
  }
  $92 = $$06992$reg2mem$0 + 4 | 0; //@line 19416
  $93 = HEAP8[$92 >> 0] | 0; //@line 19417
  HEAP8[$92 >> 0] = (($93 + 1 & 255) << HEAP32[$40 >> 2] | 0) == 0 ? 1 : ($93 & 255) + 1 & 255; //@line 19426
  $102 = HEAP32[$$06992$reg2mem$0 + 28 >> 2] | 0; //@line 19428
  if ($102 | 0) {
   label = 12; //@line 19431
   break;
  }
  _equeue_mutex_lock($6); //@line 19434
  $125 = HEAP32[$10 >> 2] | 0; //@line 19435
  L6 : do {
   if (!$125) {
    $$02329$i$i = $10; //@line 19439
    label = 21; //@line 19440
   } else {
    $127 = HEAP32[$$06992$reg2mem$0 >> 2] | 0; //@line 19442
    $$025$i$i = $10; //@line 19443
    $129 = $125; //@line 19443
    while (1) {
     $128 = HEAP32[$129 >> 2] | 0; //@line 19445
     if ($128 >>> 0 >= $127 >>> 0) {
      break;
     }
     $131 = $129 + 8 | 0; //@line 19450
     $132 = HEAP32[$131 >> 2] | 0; //@line 19451
     if (!$132) {
      $$02329$i$i = $131; //@line 19454
      label = 21; //@line 19455
      break L6;
     } else {
      $$025$i$i = $131; //@line 19458
      $129 = $132; //@line 19458
     }
    }
    if (($128 | 0) == ($127 | 0)) {
     HEAP32[$$06992$reg2mem$0 + 12 >> 2] = $129; //@line 19464
     $$02330$i$i = $$025$i$i; //@line 19467
     $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 19467
    } else {
     $$02329$i$i = $$025$i$i; //@line 19469
     label = 21; //@line 19470
    }
   }
  } while (0);
  if ((label | 0) == 21) {
   label = 0; //@line 19475
   HEAP32[$$06992$reg2mem$0 + 12 >> 2] = 0; //@line 19477
   $$02330$i$i = $$02329$i$i; //@line 19478
   $$sink$in$i$i = $$02329$i$i; //@line 19478
  }
  HEAP32[$$reg2mem$0 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 19481
  HEAP32[$$02330$i$i >> 2] = $$06992$reg2mem$0; //@line 19482
  _equeue_mutex_unlock($6); //@line 19483
  if (!$$reg2mem23$0) {
   label = 24; //@line 19486
   break;
  }
  $41 = $$reg2mem23$0 + 8 | 0; //@line 19489
  $42 = HEAP32[$41 >> 2] | 0; //@line 19490
  $44 = HEAP32[$$reg2mem23$0 + 32 >> 2] | 0; //@line 19492
  if (!$44) {
   $$06992$reg2mem$0$phi = $$reg2mem23$0; //@line 19495
   $$reg2mem$0 = $41; //@line 19495
   $$reg2mem23$0 = $42; //@line 19495
   $$06992$reg2mem$0 = $$06992$reg2mem$0$phi; //@line 19495
  } else {
   label = 3; //@line 19497
   break;
  }
 }
 if ((label | 0) == 3) {
  $ReallocAsyncCtx = _emscripten_realloc_async_context(84) | 0; //@line 19503
  FUNCTION_TABLE_vi[$44 & 1023]($$reg2mem23$0 + 36 | 0); //@line 19504
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 134; //@line 19507
   $47 = $ReallocAsyncCtx + 4 | 0; //@line 19508
   HEAP32[$47 >> 2] = $41; //@line 19509
   $48 = $ReallocAsyncCtx + 8 | 0; //@line 19510
   HEAP32[$48 >> 2] = $$reg2mem23$0; //@line 19511
   $49 = $ReallocAsyncCtx + 12 | 0; //@line 19512
   HEAP32[$49 >> 2] = $6; //@line 19513
   $50 = $ReallocAsyncCtx + 16 | 0; //@line 19514
   HEAP32[$50 >> 2] = $42; //@line 19515
   $51 = $ReallocAsyncCtx + 20 | 0; //@line 19516
   HEAP32[$51 >> 2] = $10; //@line 19517
   $52 = $ReallocAsyncCtx + 24 | 0; //@line 19518
   HEAP32[$52 >> 2] = $12; //@line 19519
   $53 = $ReallocAsyncCtx + 28 | 0; //@line 19520
   HEAP32[$53 >> 2] = $14; //@line 19521
   $54 = $ReallocAsyncCtx + 32 | 0; //@line 19522
   HEAP32[$54 >> 2] = $16; //@line 19523
   $55 = $ReallocAsyncCtx + 36 | 0; //@line 19524
   HEAP32[$55 >> 2] = $18; //@line 19525
   $56 = $ReallocAsyncCtx + 40 | 0; //@line 19526
   HEAP32[$56 >> 2] = $20; //@line 19527
   $57 = $ReallocAsyncCtx + 44 | 0; //@line 19528
   HEAP32[$57 >> 2] = $22; //@line 19529
   $58 = $ReallocAsyncCtx + 48 | 0; //@line 19530
   HEAP32[$58 >> 2] = $24; //@line 19531
   $59 = $ReallocAsyncCtx + 52 | 0; //@line 19532
   HEAP32[$59 >> 2] = $26; //@line 19533
   $60 = $ReallocAsyncCtx + 56 | 0; //@line 19534
   HEAP32[$60 >> 2] = $28; //@line 19535
   $61 = $ReallocAsyncCtx + 60 | 0; //@line 19536
   HEAP32[$61 >> 2] = $30; //@line 19537
   $62 = $ReallocAsyncCtx + 64 | 0; //@line 19538
   $$expand_i1_val = $32 & 1; //@line 19539
   HEAP8[$62 >> 0] = $$expand_i1_val; //@line 19540
   $63 = $ReallocAsyncCtx + 68 | 0; //@line 19541
   HEAP32[$63 >> 2] = $34; //@line 19542
   $64 = $ReallocAsyncCtx + 72 | 0; //@line 19543
   HEAP32[$64 >> 2] = $36; //@line 19544
   $65 = $ReallocAsyncCtx + 76 | 0; //@line 19545
   HEAP32[$65 >> 2] = $38; //@line 19546
   $66 = $ReallocAsyncCtx + 80 | 0; //@line 19547
   HEAP32[$66 >> 2] = $40; //@line 19548
   sp = STACKTOP; //@line 19549
   return;
  }
  ___async_unwind = 0; //@line 19552
  HEAP32[$ReallocAsyncCtx >> 2] = 134; //@line 19553
  $47 = $ReallocAsyncCtx + 4 | 0; //@line 19554
  HEAP32[$47 >> 2] = $41; //@line 19555
  $48 = $ReallocAsyncCtx + 8 | 0; //@line 19556
  HEAP32[$48 >> 2] = $$reg2mem23$0; //@line 19557
  $49 = $ReallocAsyncCtx + 12 | 0; //@line 19558
  HEAP32[$49 >> 2] = $6; //@line 19559
  $50 = $ReallocAsyncCtx + 16 | 0; //@line 19560
  HEAP32[$50 >> 2] = $42; //@line 19561
  $51 = $ReallocAsyncCtx + 20 | 0; //@line 19562
  HEAP32[$51 >> 2] = $10; //@line 19563
  $52 = $ReallocAsyncCtx + 24 | 0; //@line 19564
  HEAP32[$52 >> 2] = $12; //@line 19565
  $53 = $ReallocAsyncCtx + 28 | 0; //@line 19566
  HEAP32[$53 >> 2] = $14; //@line 19567
  $54 = $ReallocAsyncCtx + 32 | 0; //@line 19568
  HEAP32[$54 >> 2] = $16; //@line 19569
  $55 = $ReallocAsyncCtx + 36 | 0; //@line 19570
  HEAP32[$55 >> 2] = $18; //@line 19571
  $56 = $ReallocAsyncCtx + 40 | 0; //@line 19572
  HEAP32[$56 >> 2] = $20; //@line 19573
  $57 = $ReallocAsyncCtx + 44 | 0; //@line 19574
  HEAP32[$57 >> 2] = $22; //@line 19575
  $58 = $ReallocAsyncCtx + 48 | 0; //@line 19576
  HEAP32[$58 >> 2] = $24; //@line 19577
  $59 = $ReallocAsyncCtx + 52 | 0; //@line 19578
  HEAP32[$59 >> 2] = $26; //@line 19579
  $60 = $ReallocAsyncCtx + 56 | 0; //@line 19580
  HEAP32[$60 >> 2] = $28; //@line 19581
  $61 = $ReallocAsyncCtx + 60 | 0; //@line 19582
  HEAP32[$61 >> 2] = $30; //@line 19583
  $62 = $ReallocAsyncCtx + 64 | 0; //@line 19584
  $$expand_i1_val = $32 & 1; //@line 19585
  HEAP8[$62 >> 0] = $$expand_i1_val; //@line 19586
  $63 = $ReallocAsyncCtx + 68 | 0; //@line 19587
  HEAP32[$63 >> 2] = $34; //@line 19588
  $64 = $ReallocAsyncCtx + 72 | 0; //@line 19589
  HEAP32[$64 >> 2] = $36; //@line 19590
  $65 = $ReallocAsyncCtx + 76 | 0; //@line 19591
  HEAP32[$65 >> 2] = $38; //@line 19592
  $66 = $ReallocAsyncCtx + 80 | 0; //@line 19593
  HEAP32[$66 >> 2] = $40; //@line 19594
  sp = STACKTOP; //@line 19595
  return;
 } else if ((label | 0) == 8) {
  $70 = $$06992$reg2mem$0 + 20 | 0; //@line 19599
  HEAP32[$70 >> 2] = (HEAP32[$70 >> 2] | 0) + $68; //@line 19602
  $73 = _equeue_tick() | 0; //@line 19603
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(76) | 0; //@line 19604
  _equeue_enqueue($30, $$06992$reg2mem$0, $73) | 0; //@line 19605
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 135; //@line 19608
   $74 = $ReallocAsyncCtx4 + 4 | 0; //@line 19609
   HEAP32[$74 >> 2] = $6; //@line 19610
   $75 = $ReallocAsyncCtx4 + 8 | 0; //@line 19611
   HEAP32[$75 >> 2] = $$reg2mem23$0; //@line 19612
   $76 = $ReallocAsyncCtx4 + 12 | 0; //@line 19613
   HEAP32[$76 >> 2] = $10; //@line 19614
   $77 = $ReallocAsyncCtx4 + 16 | 0; //@line 19615
   HEAP32[$77 >> 2] = $12; //@line 19616
   $78 = $ReallocAsyncCtx4 + 20 | 0; //@line 19617
   HEAP32[$78 >> 2] = $14; //@line 19618
   $79 = $ReallocAsyncCtx4 + 24 | 0; //@line 19619
   HEAP32[$79 >> 2] = $16; //@line 19620
   $80 = $ReallocAsyncCtx4 + 28 | 0; //@line 19621
   HEAP32[$80 >> 2] = $18; //@line 19622
   $81 = $ReallocAsyncCtx4 + 32 | 0; //@line 19623
   HEAP32[$81 >> 2] = $20; //@line 19624
   $82 = $ReallocAsyncCtx4 + 36 | 0; //@line 19625
   HEAP32[$82 >> 2] = $22; //@line 19626
   $83 = $ReallocAsyncCtx4 + 40 | 0; //@line 19627
   HEAP32[$83 >> 2] = $24; //@line 19628
   $84 = $ReallocAsyncCtx4 + 44 | 0; //@line 19629
   HEAP32[$84 >> 2] = $26; //@line 19630
   $85 = $ReallocAsyncCtx4 + 48 | 0; //@line 19631
   HEAP32[$85 >> 2] = $28; //@line 19632
   $86 = $ReallocAsyncCtx4 + 52 | 0; //@line 19633
   HEAP32[$86 >> 2] = $30; //@line 19634
   $87 = $ReallocAsyncCtx4 + 56 | 0; //@line 19635
   $$expand_i1_val31 = $32 & 1; //@line 19636
   HEAP8[$87 >> 0] = $$expand_i1_val31; //@line 19637
   $88 = $ReallocAsyncCtx4 + 60 | 0; //@line 19638
   HEAP32[$88 >> 2] = $34; //@line 19639
   $89 = $ReallocAsyncCtx4 + 64 | 0; //@line 19640
   HEAP32[$89 >> 2] = $36; //@line 19641
   $90 = $ReallocAsyncCtx4 + 68 | 0; //@line 19642
   HEAP32[$90 >> 2] = $38; //@line 19643
   $91 = $ReallocAsyncCtx4 + 72 | 0; //@line 19644
   HEAP32[$91 >> 2] = $40; //@line 19645
   sp = STACKTOP; //@line 19646
   return;
  }
  ___async_unwind = 0; //@line 19649
  HEAP32[$ReallocAsyncCtx4 >> 2] = 135; //@line 19650
  $74 = $ReallocAsyncCtx4 + 4 | 0; //@line 19651
  HEAP32[$74 >> 2] = $6; //@line 19652
  $75 = $ReallocAsyncCtx4 + 8 | 0; //@line 19653
  HEAP32[$75 >> 2] = $$reg2mem23$0; //@line 19654
  $76 = $ReallocAsyncCtx4 + 12 | 0; //@line 19655
  HEAP32[$76 >> 2] = $10; //@line 19656
  $77 = $ReallocAsyncCtx4 + 16 | 0; //@line 19657
  HEAP32[$77 >> 2] = $12; //@line 19658
  $78 = $ReallocAsyncCtx4 + 20 | 0; //@line 19659
  HEAP32[$78 >> 2] = $14; //@line 19660
  $79 = $ReallocAsyncCtx4 + 24 | 0; //@line 19661
  HEAP32[$79 >> 2] = $16; //@line 19662
  $80 = $ReallocAsyncCtx4 + 28 | 0; //@line 19663
  HEAP32[$80 >> 2] = $18; //@line 19664
  $81 = $ReallocAsyncCtx4 + 32 | 0; //@line 19665
  HEAP32[$81 >> 2] = $20; //@line 19666
  $82 = $ReallocAsyncCtx4 + 36 | 0; //@line 19667
  HEAP32[$82 >> 2] = $22; //@line 19668
  $83 = $ReallocAsyncCtx4 + 40 | 0; //@line 19669
  HEAP32[$83 >> 2] = $24; //@line 19670
  $84 = $ReallocAsyncCtx4 + 44 | 0; //@line 19671
  HEAP32[$84 >> 2] = $26; //@line 19672
  $85 = $ReallocAsyncCtx4 + 48 | 0; //@line 19673
  HEAP32[$85 >> 2] = $28; //@line 19674
  $86 = $ReallocAsyncCtx4 + 52 | 0; //@line 19675
  HEAP32[$86 >> 2] = $30; //@line 19676
  $87 = $ReallocAsyncCtx4 + 56 | 0; //@line 19677
  $$expand_i1_val31 = $32 & 1; //@line 19678
  HEAP8[$87 >> 0] = $$expand_i1_val31; //@line 19679
  $88 = $ReallocAsyncCtx4 + 60 | 0; //@line 19680
  HEAP32[$88 >> 2] = $34; //@line 19681
  $89 = $ReallocAsyncCtx4 + 64 | 0; //@line 19682
  HEAP32[$89 >> 2] = $36; //@line 19683
  $90 = $ReallocAsyncCtx4 + 68 | 0; //@line 19684
  HEAP32[$90 >> 2] = $38; //@line 19685
  $91 = $ReallocAsyncCtx4 + 72 | 0; //@line 19686
  HEAP32[$91 >> 2] = $40; //@line 19687
  sp = STACKTOP; //@line 19688
  return;
 } else if ((label | 0) == 12) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(84) | 0; //@line 19693
  FUNCTION_TABLE_vi[$102 & 1023]($$06992$reg2mem$0 + 36 | 0); //@line 19694
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 136; //@line 19697
   $105 = $ReallocAsyncCtx2 + 4 | 0; //@line 19698
   HEAP32[$105 >> 2] = $$reg2mem$0; //@line 19699
   $106 = $ReallocAsyncCtx2 + 8 | 0; //@line 19700
   HEAP32[$106 >> 2] = $$06992$reg2mem$0; //@line 19701
   $107 = $ReallocAsyncCtx2 + 12 | 0; //@line 19702
   HEAP32[$107 >> 2] = $6; //@line 19703
   $108 = $ReallocAsyncCtx2 + 16 | 0; //@line 19704
   HEAP32[$108 >> 2] = $$reg2mem23$0; //@line 19705
   $109 = $ReallocAsyncCtx2 + 20 | 0; //@line 19706
   HEAP32[$109 >> 2] = $10; //@line 19707
   $110 = $ReallocAsyncCtx2 + 24 | 0; //@line 19708
   HEAP32[$110 >> 2] = $12; //@line 19709
   $111 = $ReallocAsyncCtx2 + 28 | 0; //@line 19710
   HEAP32[$111 >> 2] = $14; //@line 19711
   $112 = $ReallocAsyncCtx2 + 32 | 0; //@line 19712
   HEAP32[$112 >> 2] = $16; //@line 19713
   $113 = $ReallocAsyncCtx2 + 36 | 0; //@line 19714
   HEAP32[$113 >> 2] = $18; //@line 19715
   $114 = $ReallocAsyncCtx2 + 40 | 0; //@line 19716
   HEAP32[$114 >> 2] = $20; //@line 19717
   $115 = $ReallocAsyncCtx2 + 44 | 0; //@line 19718
   HEAP32[$115 >> 2] = $22; //@line 19719
   $116 = $ReallocAsyncCtx2 + 48 | 0; //@line 19720
   HEAP32[$116 >> 2] = $24; //@line 19721
   $117 = $ReallocAsyncCtx2 + 52 | 0; //@line 19722
   HEAP32[$117 >> 2] = $26; //@line 19723
   $118 = $ReallocAsyncCtx2 + 56 | 0; //@line 19724
   HEAP32[$118 >> 2] = $28; //@line 19725
   $119 = $ReallocAsyncCtx2 + 60 | 0; //@line 19726
   HEAP32[$119 >> 2] = $30; //@line 19727
   $120 = $ReallocAsyncCtx2 + 64 | 0; //@line 19728
   $$expand_i1_val33 = $32 & 1; //@line 19729
   HEAP8[$120 >> 0] = $$expand_i1_val33; //@line 19730
   $121 = $ReallocAsyncCtx2 + 68 | 0; //@line 19731
   HEAP32[$121 >> 2] = $34; //@line 19732
   $122 = $ReallocAsyncCtx2 + 72 | 0; //@line 19733
   HEAP32[$122 >> 2] = $36; //@line 19734
   $123 = $ReallocAsyncCtx2 + 76 | 0; //@line 19735
   HEAP32[$123 >> 2] = $38; //@line 19736
   $124 = $ReallocAsyncCtx2 + 80 | 0; //@line 19737
   HEAP32[$124 >> 2] = $40; //@line 19738
   sp = STACKTOP; //@line 19739
   return;
  }
  ___async_unwind = 0; //@line 19742
  HEAP32[$ReallocAsyncCtx2 >> 2] = 136; //@line 19743
  $105 = $ReallocAsyncCtx2 + 4 | 0; //@line 19744
  HEAP32[$105 >> 2] = $$reg2mem$0; //@line 19745
  $106 = $ReallocAsyncCtx2 + 8 | 0; //@line 19746
  HEAP32[$106 >> 2] = $$06992$reg2mem$0; //@line 19747
  $107 = $ReallocAsyncCtx2 + 12 | 0; //@line 19748
  HEAP32[$107 >> 2] = $6; //@line 19749
  $108 = $ReallocAsyncCtx2 + 16 | 0; //@line 19750
  HEAP32[$108 >> 2] = $$reg2mem23$0; //@line 19751
  $109 = $ReallocAsyncCtx2 + 20 | 0; //@line 19752
  HEAP32[$109 >> 2] = $10; //@line 19753
  $110 = $ReallocAsyncCtx2 + 24 | 0; //@line 19754
  HEAP32[$110 >> 2] = $12; //@line 19755
  $111 = $ReallocAsyncCtx2 + 28 | 0; //@line 19756
  HEAP32[$111 >> 2] = $14; //@line 19757
  $112 = $ReallocAsyncCtx2 + 32 | 0; //@line 19758
  HEAP32[$112 >> 2] = $16; //@line 19759
  $113 = $ReallocAsyncCtx2 + 36 | 0; //@line 19760
  HEAP32[$113 >> 2] = $18; //@line 19761
  $114 = $ReallocAsyncCtx2 + 40 | 0; //@line 19762
  HEAP32[$114 >> 2] = $20; //@line 19763
  $115 = $ReallocAsyncCtx2 + 44 | 0; //@line 19764
  HEAP32[$115 >> 2] = $22; //@line 19765
  $116 = $ReallocAsyncCtx2 + 48 | 0; //@line 19766
  HEAP32[$116 >> 2] = $24; //@line 19767
  $117 = $ReallocAsyncCtx2 + 52 | 0; //@line 19768
  HEAP32[$117 >> 2] = $26; //@line 19769
  $118 = $ReallocAsyncCtx2 + 56 | 0; //@line 19770
  HEAP32[$118 >> 2] = $28; //@line 19771
  $119 = $ReallocAsyncCtx2 + 60 | 0; //@line 19772
  HEAP32[$119 >> 2] = $30; //@line 19773
  $120 = $ReallocAsyncCtx2 + 64 | 0; //@line 19774
  $$expand_i1_val33 = $32 & 1; //@line 19775
  HEAP8[$120 >> 0] = $$expand_i1_val33; //@line 19776
  $121 = $ReallocAsyncCtx2 + 68 | 0; //@line 19777
  HEAP32[$121 >> 2] = $34; //@line 19778
  $122 = $ReallocAsyncCtx2 + 72 | 0; //@line 19779
  HEAP32[$122 >> 2] = $36; //@line 19780
  $123 = $ReallocAsyncCtx2 + 76 | 0; //@line 19781
  HEAP32[$123 >> 2] = $38; //@line 19782
  $124 = $ReallocAsyncCtx2 + 80 | 0; //@line 19783
  HEAP32[$124 >> 2] = $40; //@line 19784
  sp = STACKTOP; //@line 19785
  return;
 } else if ((label | 0) == 24) {
  $140 = _equeue_tick() | 0; //@line 19789
  if ($32) {
   $141 = $36 - $140 | 0; //@line 19791
   if (($141 | 0) < 1) {
    $143 = $30 + 40 | 0; //@line 19794
    if (HEAP32[$143 >> 2] | 0) {
     _equeue_mutex_lock($20); //@line 19798
     $146 = HEAP32[$143 >> 2] | 0; //@line 19799
     if ($146 | 0) {
      $148 = HEAP32[$26 >> 2] | 0; //@line 19802
      if ($148 | 0) {
       $151 = HEAP32[$30 + 44 >> 2] | 0; //@line 19806
       $154 = (HEAP32[$148 + 20 >> 2] | 0) - $140 | 0; //@line 19809
       $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 19813
       FUNCTION_TABLE_vii[$146 & 15]($151, $154 & ~($154 >> 31)); //@line 19814
       if (___async) {
        HEAP32[$ReallocAsyncCtx3 >> 2] = 137; //@line 19817
        $158 = $ReallocAsyncCtx3 + 4 | 0; //@line 19818
        HEAP32[$158 >> 2] = $18; //@line 19819
        $159 = $ReallocAsyncCtx3 + 8 | 0; //@line 19820
        HEAP32[$159 >> 2] = $20; //@line 19821
        $160 = $ReallocAsyncCtx3 + 12 | 0; //@line 19822
        HEAP32[$160 >> 2] = $24; //@line 19823
        sp = STACKTOP; //@line 19824
        return;
       }
       ___async_unwind = 0; //@line 19827
       HEAP32[$ReallocAsyncCtx3 >> 2] = 137; //@line 19828
       $158 = $ReallocAsyncCtx3 + 4 | 0; //@line 19829
       HEAP32[$158 >> 2] = $18; //@line 19830
       $159 = $ReallocAsyncCtx3 + 8 | 0; //@line 19831
       HEAP32[$159 >> 2] = $20; //@line 19832
       $160 = $ReallocAsyncCtx3 + 12 | 0; //@line 19833
       HEAP32[$160 >> 2] = $24; //@line 19834
       sp = STACKTOP; //@line 19835
       return;
      }
     }
     HEAP8[$18 >> 0] = 1; //@line 19839
     _equeue_mutex_unlock($20); //@line 19840
    }
    HEAP8[$24 >> 0] = 0; //@line 19842
    return;
   } else {
    $$067 = $141; //@line 19845
   }
  } else {
   $$067 = -1; //@line 19848
  }
  _equeue_mutex_lock($20); //@line 19850
  $161 = HEAP32[$26 >> 2] | 0; //@line 19851
  if (!$161) {
   $$2 = $$067; //@line 19854
  } else {
   $165 = (HEAP32[$161 + 20 >> 2] | 0) - $140 | 0; //@line 19858
   $168 = $165 & ~($165 >> 31); //@line 19861
   $$2 = $168 >>> 0 < $$067 >>> 0 ? $168 : $$067; //@line 19864
  }
  _equeue_mutex_unlock($20); //@line 19866
  _equeue_sema_wait($38, $$2) | 0; //@line 19867
  do {
   if (HEAP8[$24 >> 0] | 0) {
    _equeue_mutex_lock($20); //@line 19872
    if (!(HEAP8[$24 >> 0] | 0)) {
     _equeue_mutex_unlock($20); //@line 19876
     break;
    }
    HEAP8[$24 >> 0] = 0; //@line 19879
    _equeue_mutex_unlock($20); //@line 19880
    return;
   }
  } while (0);
  $174 = _equeue_tick() | 0; //@line 19884
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(76) | 0; //@line 19885
  _wait_ms(20); //@line 19886
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 138; //@line 19889
   $175 = $ReallocAsyncCtx5 + 4 | 0; //@line 19890
   HEAP32[$175 >> 2] = $6; //@line 19891
   $176 = $ReallocAsyncCtx5 + 8 | 0; //@line 19892
   HEAP32[$176 >> 2] = $10; //@line 19893
   $177 = $ReallocAsyncCtx5 + 12 | 0; //@line 19894
   HEAP32[$177 >> 2] = $12; //@line 19895
   $178 = $ReallocAsyncCtx5 + 16 | 0; //@line 19896
   HEAP32[$178 >> 2] = $14; //@line 19897
   $179 = $ReallocAsyncCtx5 + 20 | 0; //@line 19898
   HEAP32[$179 >> 2] = $16; //@line 19899
   $180 = $ReallocAsyncCtx5 + 24 | 0; //@line 19900
   HEAP32[$180 >> 2] = $18; //@line 19901
   $181 = $ReallocAsyncCtx5 + 28 | 0; //@line 19902
   HEAP32[$181 >> 2] = $20; //@line 19903
   $182 = $ReallocAsyncCtx5 + 32 | 0; //@line 19904
   HEAP32[$182 >> 2] = $22; //@line 19905
   $183 = $ReallocAsyncCtx5 + 36 | 0; //@line 19906
   HEAP32[$183 >> 2] = $24; //@line 19907
   $184 = $ReallocAsyncCtx5 + 40 | 0; //@line 19908
   HEAP32[$184 >> 2] = $26; //@line 19909
   $185 = $ReallocAsyncCtx5 + 44 | 0; //@line 19910
   HEAP32[$185 >> 2] = $28; //@line 19911
   $186 = $ReallocAsyncCtx5 + 48 | 0; //@line 19912
   HEAP32[$186 >> 2] = $30; //@line 19913
   $187 = $ReallocAsyncCtx5 + 52 | 0; //@line 19914
   $$expand_i1_val35 = $32 & 1; //@line 19915
   HEAP8[$187 >> 0] = $$expand_i1_val35; //@line 19916
   $188 = $ReallocAsyncCtx5 + 56 | 0; //@line 19917
   HEAP32[$188 >> 2] = $34; //@line 19918
   $189 = $ReallocAsyncCtx5 + 60 | 0; //@line 19919
   HEAP32[$189 >> 2] = $36; //@line 19920
   $190 = $ReallocAsyncCtx5 + 64 | 0; //@line 19921
   HEAP32[$190 >> 2] = $38; //@line 19922
   $191 = $ReallocAsyncCtx5 + 68 | 0; //@line 19923
   HEAP32[$191 >> 2] = $40; //@line 19924
   $192 = $ReallocAsyncCtx5 + 72 | 0; //@line 19925
   HEAP32[$192 >> 2] = $174; //@line 19926
   sp = STACKTOP; //@line 19927
   return;
  }
  ___async_unwind = 0; //@line 19930
  HEAP32[$ReallocAsyncCtx5 >> 2] = 138; //@line 19931
  $175 = $ReallocAsyncCtx5 + 4 | 0; //@line 19932
  HEAP32[$175 >> 2] = $6; //@line 19933
  $176 = $ReallocAsyncCtx5 + 8 | 0; //@line 19934
  HEAP32[$176 >> 2] = $10; //@line 19935
  $177 = $ReallocAsyncCtx5 + 12 | 0; //@line 19936
  HEAP32[$177 >> 2] = $12; //@line 19937
  $178 = $ReallocAsyncCtx5 + 16 | 0; //@line 19938
  HEAP32[$178 >> 2] = $14; //@line 19939
  $179 = $ReallocAsyncCtx5 + 20 | 0; //@line 19940
  HEAP32[$179 >> 2] = $16; //@line 19941
  $180 = $ReallocAsyncCtx5 + 24 | 0; //@line 19942
  HEAP32[$180 >> 2] = $18; //@line 19943
  $181 = $ReallocAsyncCtx5 + 28 | 0; //@line 19944
  HEAP32[$181 >> 2] = $20; //@line 19945
  $182 = $ReallocAsyncCtx5 + 32 | 0; //@line 19946
  HEAP32[$182 >> 2] = $22; //@line 19947
  $183 = $ReallocAsyncCtx5 + 36 | 0; //@line 19948
  HEAP32[$183 >> 2] = $24; //@line 19949
  $184 = $ReallocAsyncCtx5 + 40 | 0; //@line 19950
  HEAP32[$184 >> 2] = $26; //@line 19951
  $185 = $ReallocAsyncCtx5 + 44 | 0; //@line 19952
  HEAP32[$185 >> 2] = $28; //@line 19953
  $186 = $ReallocAsyncCtx5 + 48 | 0; //@line 19954
  HEAP32[$186 >> 2] = $30; //@line 19955
  $187 = $ReallocAsyncCtx5 + 52 | 0; //@line 19956
  $$expand_i1_val35 = $32 & 1; //@line 19957
  HEAP8[$187 >> 0] = $$expand_i1_val35; //@line 19958
  $188 = $ReallocAsyncCtx5 + 56 | 0; //@line 19959
  HEAP32[$188 >> 2] = $34; //@line 19960
  $189 = $ReallocAsyncCtx5 + 60 | 0; //@line 19961
  HEAP32[$189 >> 2] = $36; //@line 19962
  $190 = $ReallocAsyncCtx5 + 64 | 0; //@line 19963
  HEAP32[$190 >> 2] = $38; //@line 19964
  $191 = $ReallocAsyncCtx5 + 68 | 0; //@line 19965
  HEAP32[$191 >> 2] = $40; //@line 19966
  $192 = $ReallocAsyncCtx5 + 72 | 0; //@line 19967
  HEAP32[$192 >> 2] = $174; //@line 19968
  sp = STACKTOP; //@line 19969
  return;
 }
}
function _equeue_dispatch__async_cb_12($0) {
 $0 = $0 | 0;
 var $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$067 = 0, $$06992$reg2mem$0 = 0, $$06992$reg2mem$0$phi = 0, $$2 = 0, $$expand_i1_val = 0, $$expand_i1_val31 = 0, $$expand_i1_val33 = 0, $$expand_i1_val35 = 0, $$reg2mem$0 = 0, $$reg2mem23$0 = 0, $$sink$in$i$i = 0, $10 = 0, $102 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $127 = 0, $128 = 0, $129 = 0, $131 = 0, $132 = 0, $14 = 0, $140 = 0, $141 = 0, $143 = 0, $146 = 0, $148 = 0, $151 = 0, $154 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $165 = 0, $168 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $40 = 0, $42 = 0, $44 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $70 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 19987
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19993
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19997
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19999
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20001
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20003
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 20005
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 20007
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 20009
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 20011
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 20013
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 20015
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 20017
 $32 = HEAP8[$0 + 64 >> 0] & 1; //@line 20020
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 20022
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 20024
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 20026
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 20028
 $$06992$reg2mem$0 = HEAP32[$0 + 8 >> 2] | 0; //@line 20029
 $$reg2mem$0 = HEAP32[$0 + 4 >> 2] | 0; //@line 20029
 $$reg2mem23$0 = HEAP32[$0 + 16 >> 2] | 0; //@line 20029
 while (1) {
  _equeue_mutex_lock($6); //@line 20031
  $125 = HEAP32[$10 >> 2] | 0; //@line 20032
  L4 : do {
   if (!$125) {
    $$02329$i$i = $10; //@line 20036
    label = 21; //@line 20037
   } else {
    $127 = HEAP32[$$06992$reg2mem$0 >> 2] | 0; //@line 20039
    $$025$i$i = $10; //@line 20040
    $129 = $125; //@line 20040
    while (1) {
     $128 = HEAP32[$129 >> 2] | 0; //@line 20042
     if ($128 >>> 0 >= $127 >>> 0) {
      break;
     }
     $131 = $129 + 8 | 0; //@line 20047
     $132 = HEAP32[$131 >> 2] | 0; //@line 20048
     if (!$132) {
      $$02329$i$i = $131; //@line 20051
      label = 21; //@line 20052
      break L4;
     } else {
      $$025$i$i = $131; //@line 20055
      $129 = $132; //@line 20055
     }
    }
    if (($128 | 0) == ($127 | 0)) {
     HEAP32[$$06992$reg2mem$0 + 12 >> 2] = $129; //@line 20061
     $$02330$i$i = $$025$i$i; //@line 20064
     $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 20064
    } else {
     $$02329$i$i = $$025$i$i; //@line 20066
     label = 21; //@line 20067
    }
   }
  } while (0);
  if ((label | 0) == 21) {
   label = 0; //@line 20072
   HEAP32[$$06992$reg2mem$0 + 12 >> 2] = 0; //@line 20074
   $$02330$i$i = $$02329$i$i; //@line 20075
   $$sink$in$i$i = $$02329$i$i; //@line 20075
  }
  HEAP32[$$reg2mem$0 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 20078
  HEAP32[$$02330$i$i >> 2] = $$06992$reg2mem$0; //@line 20079
  _equeue_mutex_unlock($6); //@line 20080
  if (!$$reg2mem23$0) {
   label = 24; //@line 20083
   break;
  }
  $$reg2mem$0 = $$reg2mem23$0 + 8 | 0; //@line 20086
  $42 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 20087
  $44 = HEAP32[$$reg2mem23$0 + 32 >> 2] | 0; //@line 20089
  if ($44 | 0) {
   label = 3; //@line 20092
   break;
  }
  $68 = HEAP32[$$reg2mem23$0 + 24 >> 2] | 0; //@line 20096
  if (($68 | 0) > -1) {
   label = 7; //@line 20099
   break;
  }
  $92 = $$reg2mem23$0 + 4 | 0; //@line 20103
  $93 = HEAP8[$92 >> 0] | 0; //@line 20104
  HEAP8[$92 >> 0] = (($93 + 1 & 255) << HEAP32[$40 >> 2] | 0) == 0 ? 1 : ($93 & 255) + 1 & 255; //@line 20113
  $102 = HEAP32[$$reg2mem23$0 + 28 >> 2] | 0; //@line 20115
  if ($102 | 0) {
   label = 11; //@line 20120
   break;
  } else {
   $$06992$reg2mem$0$phi = $$reg2mem23$0; //@line 20118
   $$reg2mem23$0 = $42; //@line 20118
   $$06992$reg2mem$0 = $$06992$reg2mem$0$phi; //@line 20118
  }
 }
 if ((label | 0) == 3) {
  $ReallocAsyncCtx = _emscripten_realloc_async_context(84) | 0; //@line 20126
  FUNCTION_TABLE_vi[$44 & 1023]($$reg2mem23$0 + 36 | 0); //@line 20127
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 134; //@line 20130
   $47 = $ReallocAsyncCtx + 4 | 0; //@line 20131
   HEAP32[$47 >> 2] = $$reg2mem$0; //@line 20132
   $48 = $ReallocAsyncCtx + 8 | 0; //@line 20133
   HEAP32[$48 >> 2] = $$reg2mem23$0; //@line 20134
   $49 = $ReallocAsyncCtx + 12 | 0; //@line 20135
   HEAP32[$49 >> 2] = $6; //@line 20136
   $50 = $ReallocAsyncCtx + 16 | 0; //@line 20137
   HEAP32[$50 >> 2] = $42; //@line 20138
   $51 = $ReallocAsyncCtx + 20 | 0; //@line 20139
   HEAP32[$51 >> 2] = $10; //@line 20140
   $52 = $ReallocAsyncCtx + 24 | 0; //@line 20141
   HEAP32[$52 >> 2] = $12; //@line 20142
   $53 = $ReallocAsyncCtx + 28 | 0; //@line 20143
   HEAP32[$53 >> 2] = $14; //@line 20144
   $54 = $ReallocAsyncCtx + 32 | 0; //@line 20145
   HEAP32[$54 >> 2] = $16; //@line 20146
   $55 = $ReallocAsyncCtx + 36 | 0; //@line 20147
   HEAP32[$55 >> 2] = $18; //@line 20148
   $56 = $ReallocAsyncCtx + 40 | 0; //@line 20149
   HEAP32[$56 >> 2] = $20; //@line 20150
   $57 = $ReallocAsyncCtx + 44 | 0; //@line 20151
   HEAP32[$57 >> 2] = $22; //@line 20152
   $58 = $ReallocAsyncCtx + 48 | 0; //@line 20153
   HEAP32[$58 >> 2] = $24; //@line 20154
   $59 = $ReallocAsyncCtx + 52 | 0; //@line 20155
   HEAP32[$59 >> 2] = $26; //@line 20156
   $60 = $ReallocAsyncCtx + 56 | 0; //@line 20157
   HEAP32[$60 >> 2] = $28; //@line 20158
   $61 = $ReallocAsyncCtx + 60 | 0; //@line 20159
   HEAP32[$61 >> 2] = $30; //@line 20160
   $62 = $ReallocAsyncCtx + 64 | 0; //@line 20161
   $$expand_i1_val = $32 & 1; //@line 20162
   HEAP8[$62 >> 0] = $$expand_i1_val; //@line 20163
   $63 = $ReallocAsyncCtx + 68 | 0; //@line 20164
   HEAP32[$63 >> 2] = $34; //@line 20165
   $64 = $ReallocAsyncCtx + 72 | 0; //@line 20166
   HEAP32[$64 >> 2] = $36; //@line 20167
   $65 = $ReallocAsyncCtx + 76 | 0; //@line 20168
   HEAP32[$65 >> 2] = $38; //@line 20169
   $66 = $ReallocAsyncCtx + 80 | 0; //@line 20170
   HEAP32[$66 >> 2] = $40; //@line 20171
   sp = STACKTOP; //@line 20172
   return;
  }
  ___async_unwind = 0; //@line 20175
  HEAP32[$ReallocAsyncCtx >> 2] = 134; //@line 20176
  $47 = $ReallocAsyncCtx + 4 | 0; //@line 20177
  HEAP32[$47 >> 2] = $$reg2mem$0; //@line 20178
  $48 = $ReallocAsyncCtx + 8 | 0; //@line 20179
  HEAP32[$48 >> 2] = $$reg2mem23$0; //@line 20180
  $49 = $ReallocAsyncCtx + 12 | 0; //@line 20181
  HEAP32[$49 >> 2] = $6; //@line 20182
  $50 = $ReallocAsyncCtx + 16 | 0; //@line 20183
  HEAP32[$50 >> 2] = $42; //@line 20184
  $51 = $ReallocAsyncCtx + 20 | 0; //@line 20185
  HEAP32[$51 >> 2] = $10; //@line 20186
  $52 = $ReallocAsyncCtx + 24 | 0; //@line 20187
  HEAP32[$52 >> 2] = $12; //@line 20188
  $53 = $ReallocAsyncCtx + 28 | 0; //@line 20189
  HEAP32[$53 >> 2] = $14; //@line 20190
  $54 = $ReallocAsyncCtx + 32 | 0; //@line 20191
  HEAP32[$54 >> 2] = $16; //@line 20192
  $55 = $ReallocAsyncCtx + 36 | 0; //@line 20193
  HEAP32[$55 >> 2] = $18; //@line 20194
  $56 = $ReallocAsyncCtx + 40 | 0; //@line 20195
  HEAP32[$56 >> 2] = $20; //@line 20196
  $57 = $ReallocAsyncCtx + 44 | 0; //@line 20197
  HEAP32[$57 >> 2] = $22; //@line 20198
  $58 = $ReallocAsyncCtx + 48 | 0; //@line 20199
  HEAP32[$58 >> 2] = $24; //@line 20200
  $59 = $ReallocAsyncCtx + 52 | 0; //@line 20201
  HEAP32[$59 >> 2] = $26; //@line 20202
  $60 = $ReallocAsyncCtx + 56 | 0; //@line 20203
  HEAP32[$60 >> 2] = $28; //@line 20204
  $61 = $ReallocAsyncCtx + 60 | 0; //@line 20205
  HEAP32[$61 >> 2] = $30; //@line 20206
  $62 = $ReallocAsyncCtx + 64 | 0; //@line 20207
  $$expand_i1_val = $32 & 1; //@line 20208
  HEAP8[$62 >> 0] = $$expand_i1_val; //@line 20209
  $63 = $ReallocAsyncCtx + 68 | 0; //@line 20210
  HEAP32[$63 >> 2] = $34; //@line 20211
  $64 = $ReallocAsyncCtx + 72 | 0; //@line 20212
  HEAP32[$64 >> 2] = $36; //@line 20213
  $65 = $ReallocAsyncCtx + 76 | 0; //@line 20214
  HEAP32[$65 >> 2] = $38; //@line 20215
  $66 = $ReallocAsyncCtx + 80 | 0; //@line 20216
  HEAP32[$66 >> 2] = $40; //@line 20217
  sp = STACKTOP; //@line 20218
  return;
 } else if ((label | 0) == 7) {
  $70 = $$reg2mem23$0 + 20 | 0; //@line 20222
  HEAP32[$70 >> 2] = (HEAP32[$70 >> 2] | 0) + $68; //@line 20225
  $73 = _equeue_tick() | 0; //@line 20226
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(76) | 0; //@line 20227
  _equeue_enqueue($30, $$reg2mem23$0, $73) | 0; //@line 20228
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 135; //@line 20231
   $74 = $ReallocAsyncCtx4 + 4 | 0; //@line 20232
   HEAP32[$74 >> 2] = $6; //@line 20233
   $75 = $ReallocAsyncCtx4 + 8 | 0; //@line 20234
   HEAP32[$75 >> 2] = $42; //@line 20235
   $76 = $ReallocAsyncCtx4 + 12 | 0; //@line 20236
   HEAP32[$76 >> 2] = $10; //@line 20237
   $77 = $ReallocAsyncCtx4 + 16 | 0; //@line 20238
   HEAP32[$77 >> 2] = $12; //@line 20239
   $78 = $ReallocAsyncCtx4 + 20 | 0; //@line 20240
   HEAP32[$78 >> 2] = $14; //@line 20241
   $79 = $ReallocAsyncCtx4 + 24 | 0; //@line 20242
   HEAP32[$79 >> 2] = $16; //@line 20243
   $80 = $ReallocAsyncCtx4 + 28 | 0; //@line 20244
   HEAP32[$80 >> 2] = $18; //@line 20245
   $81 = $ReallocAsyncCtx4 + 32 | 0; //@line 20246
   HEAP32[$81 >> 2] = $20; //@line 20247
   $82 = $ReallocAsyncCtx4 + 36 | 0; //@line 20248
   HEAP32[$82 >> 2] = $22; //@line 20249
   $83 = $ReallocAsyncCtx4 + 40 | 0; //@line 20250
   HEAP32[$83 >> 2] = $24; //@line 20251
   $84 = $ReallocAsyncCtx4 + 44 | 0; //@line 20252
   HEAP32[$84 >> 2] = $26; //@line 20253
   $85 = $ReallocAsyncCtx4 + 48 | 0; //@line 20254
   HEAP32[$85 >> 2] = $28; //@line 20255
   $86 = $ReallocAsyncCtx4 + 52 | 0; //@line 20256
   HEAP32[$86 >> 2] = $30; //@line 20257
   $87 = $ReallocAsyncCtx4 + 56 | 0; //@line 20258
   $$expand_i1_val31 = $32 & 1; //@line 20259
   HEAP8[$87 >> 0] = $$expand_i1_val31; //@line 20260
   $88 = $ReallocAsyncCtx4 + 60 | 0; //@line 20261
   HEAP32[$88 >> 2] = $34; //@line 20262
   $89 = $ReallocAsyncCtx4 + 64 | 0; //@line 20263
   HEAP32[$89 >> 2] = $36; //@line 20264
   $90 = $ReallocAsyncCtx4 + 68 | 0; //@line 20265
   HEAP32[$90 >> 2] = $38; //@line 20266
   $91 = $ReallocAsyncCtx4 + 72 | 0; //@line 20267
   HEAP32[$91 >> 2] = $40; //@line 20268
   sp = STACKTOP; //@line 20269
   return;
  }
  ___async_unwind = 0; //@line 20272
  HEAP32[$ReallocAsyncCtx4 >> 2] = 135; //@line 20273
  $74 = $ReallocAsyncCtx4 + 4 | 0; //@line 20274
  HEAP32[$74 >> 2] = $6; //@line 20275
  $75 = $ReallocAsyncCtx4 + 8 | 0; //@line 20276
  HEAP32[$75 >> 2] = $42; //@line 20277
  $76 = $ReallocAsyncCtx4 + 12 | 0; //@line 20278
  HEAP32[$76 >> 2] = $10; //@line 20279
  $77 = $ReallocAsyncCtx4 + 16 | 0; //@line 20280
  HEAP32[$77 >> 2] = $12; //@line 20281
  $78 = $ReallocAsyncCtx4 + 20 | 0; //@line 20282
  HEAP32[$78 >> 2] = $14; //@line 20283
  $79 = $ReallocAsyncCtx4 + 24 | 0; //@line 20284
  HEAP32[$79 >> 2] = $16; //@line 20285
  $80 = $ReallocAsyncCtx4 + 28 | 0; //@line 20286
  HEAP32[$80 >> 2] = $18; //@line 20287
  $81 = $ReallocAsyncCtx4 + 32 | 0; //@line 20288
  HEAP32[$81 >> 2] = $20; //@line 20289
  $82 = $ReallocAsyncCtx4 + 36 | 0; //@line 20290
  HEAP32[$82 >> 2] = $22; //@line 20291
  $83 = $ReallocAsyncCtx4 + 40 | 0; //@line 20292
  HEAP32[$83 >> 2] = $24; //@line 20293
  $84 = $ReallocAsyncCtx4 + 44 | 0; //@line 20294
  HEAP32[$84 >> 2] = $26; //@line 20295
  $85 = $ReallocAsyncCtx4 + 48 | 0; //@line 20296
  HEAP32[$85 >> 2] = $28; //@line 20297
  $86 = $ReallocAsyncCtx4 + 52 | 0; //@line 20298
  HEAP32[$86 >> 2] = $30; //@line 20299
  $87 = $ReallocAsyncCtx4 + 56 | 0; //@line 20300
  $$expand_i1_val31 = $32 & 1; //@line 20301
  HEAP8[$87 >> 0] = $$expand_i1_val31; //@line 20302
  $88 = $ReallocAsyncCtx4 + 60 | 0; //@line 20303
  HEAP32[$88 >> 2] = $34; //@line 20304
  $89 = $ReallocAsyncCtx4 + 64 | 0; //@line 20305
  HEAP32[$89 >> 2] = $36; //@line 20306
  $90 = $ReallocAsyncCtx4 + 68 | 0; //@line 20307
  HEAP32[$90 >> 2] = $38; //@line 20308
  $91 = $ReallocAsyncCtx4 + 72 | 0; //@line 20309
  HEAP32[$91 >> 2] = $40; //@line 20310
  sp = STACKTOP; //@line 20311
  return;
 } else if ((label | 0) == 11) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(84) | 0; //@line 20316
  FUNCTION_TABLE_vi[$102 & 1023]($$reg2mem23$0 + 36 | 0); //@line 20317
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 136; //@line 20320
   $105 = $ReallocAsyncCtx2 + 4 | 0; //@line 20321
   HEAP32[$105 >> 2] = $$reg2mem$0; //@line 20322
   $106 = $ReallocAsyncCtx2 + 8 | 0; //@line 20323
   HEAP32[$106 >> 2] = $$reg2mem23$0; //@line 20324
   $107 = $ReallocAsyncCtx2 + 12 | 0; //@line 20325
   HEAP32[$107 >> 2] = $6; //@line 20326
   $108 = $ReallocAsyncCtx2 + 16 | 0; //@line 20327
   HEAP32[$108 >> 2] = $42; //@line 20328
   $109 = $ReallocAsyncCtx2 + 20 | 0; //@line 20329
   HEAP32[$109 >> 2] = $10; //@line 20330
   $110 = $ReallocAsyncCtx2 + 24 | 0; //@line 20331
   HEAP32[$110 >> 2] = $12; //@line 20332
   $111 = $ReallocAsyncCtx2 + 28 | 0; //@line 20333
   HEAP32[$111 >> 2] = $14; //@line 20334
   $112 = $ReallocAsyncCtx2 + 32 | 0; //@line 20335
   HEAP32[$112 >> 2] = $16; //@line 20336
   $113 = $ReallocAsyncCtx2 + 36 | 0; //@line 20337
   HEAP32[$113 >> 2] = $18; //@line 20338
   $114 = $ReallocAsyncCtx2 + 40 | 0; //@line 20339
   HEAP32[$114 >> 2] = $20; //@line 20340
   $115 = $ReallocAsyncCtx2 + 44 | 0; //@line 20341
   HEAP32[$115 >> 2] = $22; //@line 20342
   $116 = $ReallocAsyncCtx2 + 48 | 0; //@line 20343
   HEAP32[$116 >> 2] = $24; //@line 20344
   $117 = $ReallocAsyncCtx2 + 52 | 0; //@line 20345
   HEAP32[$117 >> 2] = $26; //@line 20346
   $118 = $ReallocAsyncCtx2 + 56 | 0; //@line 20347
   HEAP32[$118 >> 2] = $28; //@line 20348
   $119 = $ReallocAsyncCtx2 + 60 | 0; //@line 20349
   HEAP32[$119 >> 2] = $30; //@line 20350
   $120 = $ReallocAsyncCtx2 + 64 | 0; //@line 20351
   $$expand_i1_val33 = $32 & 1; //@line 20352
   HEAP8[$120 >> 0] = $$expand_i1_val33; //@line 20353
   $121 = $ReallocAsyncCtx2 + 68 | 0; //@line 20354
   HEAP32[$121 >> 2] = $34; //@line 20355
   $122 = $ReallocAsyncCtx2 + 72 | 0; //@line 20356
   HEAP32[$122 >> 2] = $36; //@line 20357
   $123 = $ReallocAsyncCtx2 + 76 | 0; //@line 20358
   HEAP32[$123 >> 2] = $38; //@line 20359
   $124 = $ReallocAsyncCtx2 + 80 | 0; //@line 20360
   HEAP32[$124 >> 2] = $40; //@line 20361
   sp = STACKTOP; //@line 20362
   return;
  }
  ___async_unwind = 0; //@line 20365
  HEAP32[$ReallocAsyncCtx2 >> 2] = 136; //@line 20366
  $105 = $ReallocAsyncCtx2 + 4 | 0; //@line 20367
  HEAP32[$105 >> 2] = $$reg2mem$0; //@line 20368
  $106 = $ReallocAsyncCtx2 + 8 | 0; //@line 20369
  HEAP32[$106 >> 2] = $$reg2mem23$0; //@line 20370
  $107 = $ReallocAsyncCtx2 + 12 | 0; //@line 20371
  HEAP32[$107 >> 2] = $6; //@line 20372
  $108 = $ReallocAsyncCtx2 + 16 | 0; //@line 20373
  HEAP32[$108 >> 2] = $42; //@line 20374
  $109 = $ReallocAsyncCtx2 + 20 | 0; //@line 20375
  HEAP32[$109 >> 2] = $10; //@line 20376
  $110 = $ReallocAsyncCtx2 + 24 | 0; //@line 20377
  HEAP32[$110 >> 2] = $12; //@line 20378
  $111 = $ReallocAsyncCtx2 + 28 | 0; //@line 20379
  HEAP32[$111 >> 2] = $14; //@line 20380
  $112 = $ReallocAsyncCtx2 + 32 | 0; //@line 20381
  HEAP32[$112 >> 2] = $16; //@line 20382
  $113 = $ReallocAsyncCtx2 + 36 | 0; //@line 20383
  HEAP32[$113 >> 2] = $18; //@line 20384
  $114 = $ReallocAsyncCtx2 + 40 | 0; //@line 20385
  HEAP32[$114 >> 2] = $20; //@line 20386
  $115 = $ReallocAsyncCtx2 + 44 | 0; //@line 20387
  HEAP32[$115 >> 2] = $22; //@line 20388
  $116 = $ReallocAsyncCtx2 + 48 | 0; //@line 20389
  HEAP32[$116 >> 2] = $24; //@line 20390
  $117 = $ReallocAsyncCtx2 + 52 | 0; //@line 20391
  HEAP32[$117 >> 2] = $26; //@line 20392
  $118 = $ReallocAsyncCtx2 + 56 | 0; //@line 20393
  HEAP32[$118 >> 2] = $28; //@line 20394
  $119 = $ReallocAsyncCtx2 + 60 | 0; //@line 20395
  HEAP32[$119 >> 2] = $30; //@line 20396
  $120 = $ReallocAsyncCtx2 + 64 | 0; //@line 20397
  $$expand_i1_val33 = $32 & 1; //@line 20398
  HEAP8[$120 >> 0] = $$expand_i1_val33; //@line 20399
  $121 = $ReallocAsyncCtx2 + 68 | 0; //@line 20400
  HEAP32[$121 >> 2] = $34; //@line 20401
  $122 = $ReallocAsyncCtx2 + 72 | 0; //@line 20402
  HEAP32[$122 >> 2] = $36; //@line 20403
  $123 = $ReallocAsyncCtx2 + 76 | 0; //@line 20404
  HEAP32[$123 >> 2] = $38; //@line 20405
  $124 = $ReallocAsyncCtx2 + 80 | 0; //@line 20406
  HEAP32[$124 >> 2] = $40; //@line 20407
  sp = STACKTOP; //@line 20408
  return;
 } else if ((label | 0) == 24) {
  $140 = _equeue_tick() | 0; //@line 20412
  if ($32) {
   $141 = $36 - $140 | 0; //@line 20414
   if (($141 | 0) < 1) {
    $143 = $30 + 40 | 0; //@line 20417
    if (HEAP32[$143 >> 2] | 0) {
     _equeue_mutex_lock($20); //@line 20421
     $146 = HEAP32[$143 >> 2] | 0; //@line 20422
     if ($146 | 0) {
      $148 = HEAP32[$26 >> 2] | 0; //@line 20425
      if ($148 | 0) {
       $151 = HEAP32[$30 + 44 >> 2] | 0; //@line 20429
       $154 = (HEAP32[$148 + 20 >> 2] | 0) - $140 | 0; //@line 20432
       $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 20436
       FUNCTION_TABLE_vii[$146 & 15]($151, $154 & ~($154 >> 31)); //@line 20437
       if (___async) {
        HEAP32[$ReallocAsyncCtx3 >> 2] = 137; //@line 20440
        $158 = $ReallocAsyncCtx3 + 4 | 0; //@line 20441
        HEAP32[$158 >> 2] = $18; //@line 20442
        $159 = $ReallocAsyncCtx3 + 8 | 0; //@line 20443
        HEAP32[$159 >> 2] = $20; //@line 20444
        $160 = $ReallocAsyncCtx3 + 12 | 0; //@line 20445
        HEAP32[$160 >> 2] = $24; //@line 20446
        sp = STACKTOP; //@line 20447
        return;
       }
       ___async_unwind = 0; //@line 20450
       HEAP32[$ReallocAsyncCtx3 >> 2] = 137; //@line 20451
       $158 = $ReallocAsyncCtx3 + 4 | 0; //@line 20452
       HEAP32[$158 >> 2] = $18; //@line 20453
       $159 = $ReallocAsyncCtx3 + 8 | 0; //@line 20454
       HEAP32[$159 >> 2] = $20; //@line 20455
       $160 = $ReallocAsyncCtx3 + 12 | 0; //@line 20456
       HEAP32[$160 >> 2] = $24; //@line 20457
       sp = STACKTOP; //@line 20458
       return;
      }
     }
     HEAP8[$18 >> 0] = 1; //@line 20462
     _equeue_mutex_unlock($20); //@line 20463
    }
    HEAP8[$24 >> 0] = 0; //@line 20465
    return;
   } else {
    $$067 = $141; //@line 20468
   }
  } else {
   $$067 = -1; //@line 20471
  }
  _equeue_mutex_lock($20); //@line 20473
  $161 = HEAP32[$26 >> 2] | 0; //@line 20474
  if (!$161) {
   $$2 = $$067; //@line 20477
  } else {
   $165 = (HEAP32[$161 + 20 >> 2] | 0) - $140 | 0; //@line 20481
   $168 = $165 & ~($165 >> 31); //@line 20484
   $$2 = $168 >>> 0 < $$067 >>> 0 ? $168 : $$067; //@line 20487
  }
  _equeue_mutex_unlock($20); //@line 20489
  _equeue_sema_wait($38, $$2) | 0; //@line 20490
  do {
   if (HEAP8[$24 >> 0] | 0) {
    _equeue_mutex_lock($20); //@line 20495
    if (!(HEAP8[$24 >> 0] | 0)) {
     _equeue_mutex_unlock($20); //@line 20499
     break;
    }
    HEAP8[$24 >> 0] = 0; //@line 20502
    _equeue_mutex_unlock($20); //@line 20503
    return;
   }
  } while (0);
  $174 = _equeue_tick() | 0; //@line 20507
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(76) | 0; //@line 20508
  _wait_ms(20); //@line 20509
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 138; //@line 20512
   $175 = $ReallocAsyncCtx5 + 4 | 0; //@line 20513
   HEAP32[$175 >> 2] = $6; //@line 20514
   $176 = $ReallocAsyncCtx5 + 8 | 0; //@line 20515
   HEAP32[$176 >> 2] = $10; //@line 20516
   $177 = $ReallocAsyncCtx5 + 12 | 0; //@line 20517
   HEAP32[$177 >> 2] = $12; //@line 20518
   $178 = $ReallocAsyncCtx5 + 16 | 0; //@line 20519
   HEAP32[$178 >> 2] = $14; //@line 20520
   $179 = $ReallocAsyncCtx5 + 20 | 0; //@line 20521
   HEAP32[$179 >> 2] = $16; //@line 20522
   $180 = $ReallocAsyncCtx5 + 24 | 0; //@line 20523
   HEAP32[$180 >> 2] = $18; //@line 20524
   $181 = $ReallocAsyncCtx5 + 28 | 0; //@line 20525
   HEAP32[$181 >> 2] = $20; //@line 20526
   $182 = $ReallocAsyncCtx5 + 32 | 0; //@line 20527
   HEAP32[$182 >> 2] = $22; //@line 20528
   $183 = $ReallocAsyncCtx5 + 36 | 0; //@line 20529
   HEAP32[$183 >> 2] = $24; //@line 20530
   $184 = $ReallocAsyncCtx5 + 40 | 0; //@line 20531
   HEAP32[$184 >> 2] = $26; //@line 20532
   $185 = $ReallocAsyncCtx5 + 44 | 0; //@line 20533
   HEAP32[$185 >> 2] = $28; //@line 20534
   $186 = $ReallocAsyncCtx5 + 48 | 0; //@line 20535
   HEAP32[$186 >> 2] = $30; //@line 20536
   $187 = $ReallocAsyncCtx5 + 52 | 0; //@line 20537
   $$expand_i1_val35 = $32 & 1; //@line 20538
   HEAP8[$187 >> 0] = $$expand_i1_val35; //@line 20539
   $188 = $ReallocAsyncCtx5 + 56 | 0; //@line 20540
   HEAP32[$188 >> 2] = $34; //@line 20541
   $189 = $ReallocAsyncCtx5 + 60 | 0; //@line 20542
   HEAP32[$189 >> 2] = $36; //@line 20543
   $190 = $ReallocAsyncCtx5 + 64 | 0; //@line 20544
   HEAP32[$190 >> 2] = $38; //@line 20545
   $191 = $ReallocAsyncCtx5 + 68 | 0; //@line 20546
   HEAP32[$191 >> 2] = $40; //@line 20547
   $192 = $ReallocAsyncCtx5 + 72 | 0; //@line 20548
   HEAP32[$192 >> 2] = $174; //@line 20549
   sp = STACKTOP; //@line 20550
   return;
  }
  ___async_unwind = 0; //@line 20553
  HEAP32[$ReallocAsyncCtx5 >> 2] = 138; //@line 20554
  $175 = $ReallocAsyncCtx5 + 4 | 0; //@line 20555
  HEAP32[$175 >> 2] = $6; //@line 20556
  $176 = $ReallocAsyncCtx5 + 8 | 0; //@line 20557
  HEAP32[$176 >> 2] = $10; //@line 20558
  $177 = $ReallocAsyncCtx5 + 12 | 0; //@line 20559
  HEAP32[$177 >> 2] = $12; //@line 20560
  $178 = $ReallocAsyncCtx5 + 16 | 0; //@line 20561
  HEAP32[$178 >> 2] = $14; //@line 20562
  $179 = $ReallocAsyncCtx5 + 20 | 0; //@line 20563
  HEAP32[$179 >> 2] = $16; //@line 20564
  $180 = $ReallocAsyncCtx5 + 24 | 0; //@line 20565
  HEAP32[$180 >> 2] = $18; //@line 20566
  $181 = $ReallocAsyncCtx5 + 28 | 0; //@line 20567
  HEAP32[$181 >> 2] = $20; //@line 20568
  $182 = $ReallocAsyncCtx5 + 32 | 0; //@line 20569
  HEAP32[$182 >> 2] = $22; //@line 20570
  $183 = $ReallocAsyncCtx5 + 36 | 0; //@line 20571
  HEAP32[$183 >> 2] = $24; //@line 20572
  $184 = $ReallocAsyncCtx5 + 40 | 0; //@line 20573
  HEAP32[$184 >> 2] = $26; //@line 20574
  $185 = $ReallocAsyncCtx5 + 44 | 0; //@line 20575
  HEAP32[$185 >> 2] = $28; //@line 20576
  $186 = $ReallocAsyncCtx5 + 48 | 0; //@line 20577
  HEAP32[$186 >> 2] = $30; //@line 20578
  $187 = $ReallocAsyncCtx5 + 52 | 0; //@line 20579
  $$expand_i1_val35 = $32 & 1; //@line 20580
  HEAP8[$187 >> 0] = $$expand_i1_val35; //@line 20581
  $188 = $ReallocAsyncCtx5 + 56 | 0; //@line 20582
  HEAP32[$188 >> 2] = $34; //@line 20583
  $189 = $ReallocAsyncCtx5 + 60 | 0; //@line 20584
  HEAP32[$189 >> 2] = $36; //@line 20585
  $190 = $ReallocAsyncCtx5 + 64 | 0; //@line 20586
  HEAP32[$190 >> 2] = $38; //@line 20587
  $191 = $ReallocAsyncCtx5 + 68 | 0; //@line 20588
  HEAP32[$191 >> 2] = $40; //@line 20589
  $192 = $ReallocAsyncCtx5 + 72 | 0; //@line 20590
  HEAP32[$192 >> 2] = $174; //@line 20591
  sp = STACKTOP; //@line 20592
  return;
 }
}
function _equeue_dispatch__async_cb_14($0) {
 $0 = $0 | 0;
 var $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$067 = 0, $$2 = 0, $$expand_i1_val = 0, $$expand_i1_val12 = 0, $$expand_i1_val14 = 0, $$expand_i1_val16 = 0, $$reg2mem$0 = 0, $$sink$in$i$i = 0, $10 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $123 = 0, $124 = 0, $125 = 0, $127 = 0, $128 = 0, $136 = 0, $137 = 0, $139 = 0, $14 = 0, $142 = 0, $144 = 0, $147 = 0, $150 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $161 = 0, $164 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $40 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $64 = 0, $66 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $98 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 20624
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20626
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20630
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20632
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20634
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20636
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20638
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20640
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 20642
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 20644
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 20646
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 20648
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 20650
 $28 = HEAP8[$0 + 56 >> 0] & 1; //@line 20653
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 20655
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 20657
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 20659
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 20661
 $$reg2mem$0 = HEAP32[$0 + 8 >> 2] | 0; //@line 20662
 while (1) {
  if (!$$reg2mem$0) {
   label = 24; //@line 20666
   break;
  }
  $37 = $$reg2mem$0 + 8 | 0; //@line 20669
  $38 = HEAP32[$37 >> 2] | 0; //@line 20670
  $40 = HEAP32[$$reg2mem$0 + 32 >> 2] | 0; //@line 20672
  if ($40 | 0) {
   label = 3; //@line 20675
   break;
  }
  $64 = HEAP32[$$reg2mem$0 + 24 >> 2] | 0; //@line 20679
  if (($64 | 0) > -1) {
   label = 7; //@line 20682
   break;
  }
  $88 = $$reg2mem$0 + 4 | 0; //@line 20686
  $89 = HEAP8[$88 >> 0] | 0; //@line 20687
  HEAP8[$88 >> 0] = (($89 + 1 & 255) << HEAP32[$36 >> 2] | 0) == 0 ? 1 : ($89 & 255) + 1 & 255; //@line 20696
  $98 = HEAP32[$$reg2mem$0 + 28 >> 2] | 0; //@line 20698
  if ($98 | 0) {
   label = 12; //@line 20701
   break;
  }
  _equeue_mutex_lock($2); //@line 20704
  $121 = HEAP32[$6 >> 2] | 0; //@line 20705
  L8 : do {
   if (!$121) {
    $$02329$i$i = $6; //@line 20709
    label = 21; //@line 20710
   } else {
    $123 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 20712
    $$025$i$i = $6; //@line 20713
    $125 = $121; //@line 20713
    while (1) {
     $124 = HEAP32[$125 >> 2] | 0; //@line 20715
     if ($124 >>> 0 >= $123 >>> 0) {
      break;
     }
     $127 = $125 + 8 | 0; //@line 20720
     $128 = HEAP32[$127 >> 2] | 0; //@line 20721
     if (!$128) {
      $$02329$i$i = $127; //@line 20724
      label = 21; //@line 20725
      break L8;
     } else {
      $$025$i$i = $127; //@line 20728
      $125 = $128; //@line 20728
     }
    }
    if (($124 | 0) == ($123 | 0)) {
     HEAP32[$$reg2mem$0 + 12 >> 2] = $125; //@line 20734
     $$02330$i$i = $$025$i$i; //@line 20737
     $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 20737
    } else {
     $$02329$i$i = $$025$i$i; //@line 20739
     label = 21; //@line 20740
    }
   }
  } while (0);
  if ((label | 0) == 21) {
   label = 0; //@line 20745
   HEAP32[$$reg2mem$0 + 12 >> 2] = 0; //@line 20747
   $$02330$i$i = $$02329$i$i; //@line 20748
   $$sink$in$i$i = $$02329$i$i; //@line 20748
  }
  HEAP32[$37 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 20751
  HEAP32[$$02330$i$i >> 2] = $$reg2mem$0; //@line 20752
  _equeue_mutex_unlock($2); //@line 20753
  $$reg2mem$0 = $38; //@line 20754
 }
 if ((label | 0) == 3) {
  $ReallocAsyncCtx = _emscripten_realloc_async_context(84) | 0; //@line 20758
  FUNCTION_TABLE_vi[$40 & 1023]($$reg2mem$0 + 36 | 0); //@line 20759
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 134; //@line 20762
   $43 = $ReallocAsyncCtx + 4 | 0; //@line 20763
   HEAP32[$43 >> 2] = $37; //@line 20764
   $44 = $ReallocAsyncCtx + 8 | 0; //@line 20765
   HEAP32[$44 >> 2] = $$reg2mem$0; //@line 20766
   $45 = $ReallocAsyncCtx + 12 | 0; //@line 20767
   HEAP32[$45 >> 2] = $2; //@line 20768
   $46 = $ReallocAsyncCtx + 16 | 0; //@line 20769
   HEAP32[$46 >> 2] = $38; //@line 20770
   $47 = $ReallocAsyncCtx + 20 | 0; //@line 20771
   HEAP32[$47 >> 2] = $6; //@line 20772
   $48 = $ReallocAsyncCtx + 24 | 0; //@line 20773
   HEAP32[$48 >> 2] = $8; //@line 20774
   $49 = $ReallocAsyncCtx + 28 | 0; //@line 20775
   HEAP32[$49 >> 2] = $10; //@line 20776
   $50 = $ReallocAsyncCtx + 32 | 0; //@line 20777
   HEAP32[$50 >> 2] = $12; //@line 20778
   $51 = $ReallocAsyncCtx + 36 | 0; //@line 20779
   HEAP32[$51 >> 2] = $14; //@line 20780
   $52 = $ReallocAsyncCtx + 40 | 0; //@line 20781
   HEAP32[$52 >> 2] = $16; //@line 20782
   $53 = $ReallocAsyncCtx + 44 | 0; //@line 20783
   HEAP32[$53 >> 2] = $18; //@line 20784
   $54 = $ReallocAsyncCtx + 48 | 0; //@line 20785
   HEAP32[$54 >> 2] = $20; //@line 20786
   $55 = $ReallocAsyncCtx + 52 | 0; //@line 20787
   HEAP32[$55 >> 2] = $22; //@line 20788
   $56 = $ReallocAsyncCtx + 56 | 0; //@line 20789
   HEAP32[$56 >> 2] = $24; //@line 20790
   $57 = $ReallocAsyncCtx + 60 | 0; //@line 20791
   HEAP32[$57 >> 2] = $26; //@line 20792
   $58 = $ReallocAsyncCtx + 64 | 0; //@line 20793
   $$expand_i1_val = $28 & 1; //@line 20794
   HEAP8[$58 >> 0] = $$expand_i1_val; //@line 20795
   $59 = $ReallocAsyncCtx + 68 | 0; //@line 20796
   HEAP32[$59 >> 2] = $30; //@line 20797
   $60 = $ReallocAsyncCtx + 72 | 0; //@line 20798
   HEAP32[$60 >> 2] = $32; //@line 20799
   $61 = $ReallocAsyncCtx + 76 | 0; //@line 20800
   HEAP32[$61 >> 2] = $34; //@line 20801
   $62 = $ReallocAsyncCtx + 80 | 0; //@line 20802
   HEAP32[$62 >> 2] = $36; //@line 20803
   sp = STACKTOP; //@line 20804
   return;
  }
  ___async_unwind = 0; //@line 20807
  HEAP32[$ReallocAsyncCtx >> 2] = 134; //@line 20808
  $43 = $ReallocAsyncCtx + 4 | 0; //@line 20809
  HEAP32[$43 >> 2] = $37; //@line 20810
  $44 = $ReallocAsyncCtx + 8 | 0; //@line 20811
  HEAP32[$44 >> 2] = $$reg2mem$0; //@line 20812
  $45 = $ReallocAsyncCtx + 12 | 0; //@line 20813
  HEAP32[$45 >> 2] = $2; //@line 20814
  $46 = $ReallocAsyncCtx + 16 | 0; //@line 20815
  HEAP32[$46 >> 2] = $38; //@line 20816
  $47 = $ReallocAsyncCtx + 20 | 0; //@line 20817
  HEAP32[$47 >> 2] = $6; //@line 20818
  $48 = $ReallocAsyncCtx + 24 | 0; //@line 20819
  HEAP32[$48 >> 2] = $8; //@line 20820
  $49 = $ReallocAsyncCtx + 28 | 0; //@line 20821
  HEAP32[$49 >> 2] = $10; //@line 20822
  $50 = $ReallocAsyncCtx + 32 | 0; //@line 20823
  HEAP32[$50 >> 2] = $12; //@line 20824
  $51 = $ReallocAsyncCtx + 36 | 0; //@line 20825
  HEAP32[$51 >> 2] = $14; //@line 20826
  $52 = $ReallocAsyncCtx + 40 | 0; //@line 20827
  HEAP32[$52 >> 2] = $16; //@line 20828
  $53 = $ReallocAsyncCtx + 44 | 0; //@line 20829
  HEAP32[$53 >> 2] = $18; //@line 20830
  $54 = $ReallocAsyncCtx + 48 | 0; //@line 20831
  HEAP32[$54 >> 2] = $20; //@line 20832
  $55 = $ReallocAsyncCtx + 52 | 0; //@line 20833
  HEAP32[$55 >> 2] = $22; //@line 20834
  $56 = $ReallocAsyncCtx + 56 | 0; //@line 20835
  HEAP32[$56 >> 2] = $24; //@line 20836
  $57 = $ReallocAsyncCtx + 60 | 0; //@line 20837
  HEAP32[$57 >> 2] = $26; //@line 20838
  $58 = $ReallocAsyncCtx + 64 | 0; //@line 20839
  $$expand_i1_val = $28 & 1; //@line 20840
  HEAP8[$58 >> 0] = $$expand_i1_val; //@line 20841
  $59 = $ReallocAsyncCtx + 68 | 0; //@line 20842
  HEAP32[$59 >> 2] = $30; //@line 20843
  $60 = $ReallocAsyncCtx + 72 | 0; //@line 20844
  HEAP32[$60 >> 2] = $32; //@line 20845
  $61 = $ReallocAsyncCtx + 76 | 0; //@line 20846
  HEAP32[$61 >> 2] = $34; //@line 20847
  $62 = $ReallocAsyncCtx + 80 | 0; //@line 20848
  HEAP32[$62 >> 2] = $36; //@line 20849
  sp = STACKTOP; //@line 20850
  return;
 } else if ((label | 0) == 7) {
  $66 = $$reg2mem$0 + 20 | 0; //@line 20854
  HEAP32[$66 >> 2] = (HEAP32[$66 >> 2] | 0) + $64; //@line 20857
  $69 = _equeue_tick() | 0; //@line 20858
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(76) | 0; //@line 20859
  _equeue_enqueue($26, $$reg2mem$0, $69) | 0; //@line 20860
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 135; //@line 20863
   $70 = $ReallocAsyncCtx4 + 4 | 0; //@line 20864
   HEAP32[$70 >> 2] = $2; //@line 20865
   $71 = $ReallocAsyncCtx4 + 8 | 0; //@line 20866
   HEAP32[$71 >> 2] = $38; //@line 20867
   $72 = $ReallocAsyncCtx4 + 12 | 0; //@line 20868
   HEAP32[$72 >> 2] = $6; //@line 20869
   $73 = $ReallocAsyncCtx4 + 16 | 0; //@line 20870
   HEAP32[$73 >> 2] = $8; //@line 20871
   $74 = $ReallocAsyncCtx4 + 20 | 0; //@line 20872
   HEAP32[$74 >> 2] = $10; //@line 20873
   $75 = $ReallocAsyncCtx4 + 24 | 0; //@line 20874
   HEAP32[$75 >> 2] = $12; //@line 20875
   $76 = $ReallocAsyncCtx4 + 28 | 0; //@line 20876
   HEAP32[$76 >> 2] = $14; //@line 20877
   $77 = $ReallocAsyncCtx4 + 32 | 0; //@line 20878
   HEAP32[$77 >> 2] = $16; //@line 20879
   $78 = $ReallocAsyncCtx4 + 36 | 0; //@line 20880
   HEAP32[$78 >> 2] = $18; //@line 20881
   $79 = $ReallocAsyncCtx4 + 40 | 0; //@line 20882
   HEAP32[$79 >> 2] = $20; //@line 20883
   $80 = $ReallocAsyncCtx4 + 44 | 0; //@line 20884
   HEAP32[$80 >> 2] = $22; //@line 20885
   $81 = $ReallocAsyncCtx4 + 48 | 0; //@line 20886
   HEAP32[$81 >> 2] = $24; //@line 20887
   $82 = $ReallocAsyncCtx4 + 52 | 0; //@line 20888
   HEAP32[$82 >> 2] = $26; //@line 20889
   $83 = $ReallocAsyncCtx4 + 56 | 0; //@line 20890
   $$expand_i1_val12 = $28 & 1; //@line 20891
   HEAP8[$83 >> 0] = $$expand_i1_val12; //@line 20892
   $84 = $ReallocAsyncCtx4 + 60 | 0; //@line 20893
   HEAP32[$84 >> 2] = $30; //@line 20894
   $85 = $ReallocAsyncCtx4 + 64 | 0; //@line 20895
   HEAP32[$85 >> 2] = $32; //@line 20896
   $86 = $ReallocAsyncCtx4 + 68 | 0; //@line 20897
   HEAP32[$86 >> 2] = $34; //@line 20898
   $87 = $ReallocAsyncCtx4 + 72 | 0; //@line 20899
   HEAP32[$87 >> 2] = $36; //@line 20900
   sp = STACKTOP; //@line 20901
   return;
  }
  ___async_unwind = 0; //@line 20904
  HEAP32[$ReallocAsyncCtx4 >> 2] = 135; //@line 20905
  $70 = $ReallocAsyncCtx4 + 4 | 0; //@line 20906
  HEAP32[$70 >> 2] = $2; //@line 20907
  $71 = $ReallocAsyncCtx4 + 8 | 0; //@line 20908
  HEAP32[$71 >> 2] = $38; //@line 20909
  $72 = $ReallocAsyncCtx4 + 12 | 0; //@line 20910
  HEAP32[$72 >> 2] = $6; //@line 20911
  $73 = $ReallocAsyncCtx4 + 16 | 0; //@line 20912
  HEAP32[$73 >> 2] = $8; //@line 20913
  $74 = $ReallocAsyncCtx4 + 20 | 0; //@line 20914
  HEAP32[$74 >> 2] = $10; //@line 20915
  $75 = $ReallocAsyncCtx4 + 24 | 0; //@line 20916
  HEAP32[$75 >> 2] = $12; //@line 20917
  $76 = $ReallocAsyncCtx4 + 28 | 0; //@line 20918
  HEAP32[$76 >> 2] = $14; //@line 20919
  $77 = $ReallocAsyncCtx4 + 32 | 0; //@line 20920
  HEAP32[$77 >> 2] = $16; //@line 20921
  $78 = $ReallocAsyncCtx4 + 36 | 0; //@line 20922
  HEAP32[$78 >> 2] = $18; //@line 20923
  $79 = $ReallocAsyncCtx4 + 40 | 0; //@line 20924
  HEAP32[$79 >> 2] = $20; //@line 20925
  $80 = $ReallocAsyncCtx4 + 44 | 0; //@line 20926
  HEAP32[$80 >> 2] = $22; //@line 20927
  $81 = $ReallocAsyncCtx4 + 48 | 0; //@line 20928
  HEAP32[$81 >> 2] = $24; //@line 20929
  $82 = $ReallocAsyncCtx4 + 52 | 0; //@line 20930
  HEAP32[$82 >> 2] = $26; //@line 20931
  $83 = $ReallocAsyncCtx4 + 56 | 0; //@line 20932
  $$expand_i1_val12 = $28 & 1; //@line 20933
  HEAP8[$83 >> 0] = $$expand_i1_val12; //@line 20934
  $84 = $ReallocAsyncCtx4 + 60 | 0; //@line 20935
  HEAP32[$84 >> 2] = $30; //@line 20936
  $85 = $ReallocAsyncCtx4 + 64 | 0; //@line 20937
  HEAP32[$85 >> 2] = $32; //@line 20938
  $86 = $ReallocAsyncCtx4 + 68 | 0; //@line 20939
  HEAP32[$86 >> 2] = $34; //@line 20940
  $87 = $ReallocAsyncCtx4 + 72 | 0; //@line 20941
  HEAP32[$87 >> 2] = $36; //@line 20942
  sp = STACKTOP; //@line 20943
  return;
 } else if ((label | 0) == 12) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(84) | 0; //@line 20948
  FUNCTION_TABLE_vi[$98 & 1023]($$reg2mem$0 + 36 | 0); //@line 20949
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 136; //@line 20952
   $101 = $ReallocAsyncCtx2 + 4 | 0; //@line 20953
   HEAP32[$101 >> 2] = $37; //@line 20954
   $102 = $ReallocAsyncCtx2 + 8 | 0; //@line 20955
   HEAP32[$102 >> 2] = $$reg2mem$0; //@line 20956
   $103 = $ReallocAsyncCtx2 + 12 | 0; //@line 20957
   HEAP32[$103 >> 2] = $2; //@line 20958
   $104 = $ReallocAsyncCtx2 + 16 | 0; //@line 20959
   HEAP32[$104 >> 2] = $38; //@line 20960
   $105 = $ReallocAsyncCtx2 + 20 | 0; //@line 20961
   HEAP32[$105 >> 2] = $6; //@line 20962
   $106 = $ReallocAsyncCtx2 + 24 | 0; //@line 20963
   HEAP32[$106 >> 2] = $8; //@line 20964
   $107 = $ReallocAsyncCtx2 + 28 | 0; //@line 20965
   HEAP32[$107 >> 2] = $10; //@line 20966
   $108 = $ReallocAsyncCtx2 + 32 | 0; //@line 20967
   HEAP32[$108 >> 2] = $12; //@line 20968
   $109 = $ReallocAsyncCtx2 + 36 | 0; //@line 20969
   HEAP32[$109 >> 2] = $14; //@line 20970
   $110 = $ReallocAsyncCtx2 + 40 | 0; //@line 20971
   HEAP32[$110 >> 2] = $16; //@line 20972
   $111 = $ReallocAsyncCtx2 + 44 | 0; //@line 20973
   HEAP32[$111 >> 2] = $18; //@line 20974
   $112 = $ReallocAsyncCtx2 + 48 | 0; //@line 20975
   HEAP32[$112 >> 2] = $20; //@line 20976
   $113 = $ReallocAsyncCtx2 + 52 | 0; //@line 20977
   HEAP32[$113 >> 2] = $22; //@line 20978
   $114 = $ReallocAsyncCtx2 + 56 | 0; //@line 20979
   HEAP32[$114 >> 2] = $24; //@line 20980
   $115 = $ReallocAsyncCtx2 + 60 | 0; //@line 20981
   HEAP32[$115 >> 2] = $26; //@line 20982
   $116 = $ReallocAsyncCtx2 + 64 | 0; //@line 20983
   $$expand_i1_val14 = $28 & 1; //@line 20984
   HEAP8[$116 >> 0] = $$expand_i1_val14; //@line 20985
   $117 = $ReallocAsyncCtx2 + 68 | 0; //@line 20986
   HEAP32[$117 >> 2] = $30; //@line 20987
   $118 = $ReallocAsyncCtx2 + 72 | 0; //@line 20988
   HEAP32[$118 >> 2] = $32; //@line 20989
   $119 = $ReallocAsyncCtx2 + 76 | 0; //@line 20990
   HEAP32[$119 >> 2] = $34; //@line 20991
   $120 = $ReallocAsyncCtx2 + 80 | 0; //@line 20992
   HEAP32[$120 >> 2] = $36; //@line 20993
   sp = STACKTOP; //@line 20994
   return;
  }
  ___async_unwind = 0; //@line 20997
  HEAP32[$ReallocAsyncCtx2 >> 2] = 136; //@line 20998
  $101 = $ReallocAsyncCtx2 + 4 | 0; //@line 20999
  HEAP32[$101 >> 2] = $37; //@line 21000
  $102 = $ReallocAsyncCtx2 + 8 | 0; //@line 21001
  HEAP32[$102 >> 2] = $$reg2mem$0; //@line 21002
  $103 = $ReallocAsyncCtx2 + 12 | 0; //@line 21003
  HEAP32[$103 >> 2] = $2; //@line 21004
  $104 = $ReallocAsyncCtx2 + 16 | 0; //@line 21005
  HEAP32[$104 >> 2] = $38; //@line 21006
  $105 = $ReallocAsyncCtx2 + 20 | 0; //@line 21007
  HEAP32[$105 >> 2] = $6; //@line 21008
  $106 = $ReallocAsyncCtx2 + 24 | 0; //@line 21009
  HEAP32[$106 >> 2] = $8; //@line 21010
  $107 = $ReallocAsyncCtx2 + 28 | 0; //@line 21011
  HEAP32[$107 >> 2] = $10; //@line 21012
  $108 = $ReallocAsyncCtx2 + 32 | 0; //@line 21013
  HEAP32[$108 >> 2] = $12; //@line 21014
  $109 = $ReallocAsyncCtx2 + 36 | 0; //@line 21015
  HEAP32[$109 >> 2] = $14; //@line 21016
  $110 = $ReallocAsyncCtx2 + 40 | 0; //@line 21017
  HEAP32[$110 >> 2] = $16; //@line 21018
  $111 = $ReallocAsyncCtx2 + 44 | 0; //@line 21019
  HEAP32[$111 >> 2] = $18; //@line 21020
  $112 = $ReallocAsyncCtx2 + 48 | 0; //@line 21021
  HEAP32[$112 >> 2] = $20; //@line 21022
  $113 = $ReallocAsyncCtx2 + 52 | 0; //@line 21023
  HEAP32[$113 >> 2] = $22; //@line 21024
  $114 = $ReallocAsyncCtx2 + 56 | 0; //@line 21025
  HEAP32[$114 >> 2] = $24; //@line 21026
  $115 = $ReallocAsyncCtx2 + 60 | 0; //@line 21027
  HEAP32[$115 >> 2] = $26; //@line 21028
  $116 = $ReallocAsyncCtx2 + 64 | 0; //@line 21029
  $$expand_i1_val14 = $28 & 1; //@line 21030
  HEAP8[$116 >> 0] = $$expand_i1_val14; //@line 21031
  $117 = $ReallocAsyncCtx2 + 68 | 0; //@line 21032
  HEAP32[$117 >> 2] = $30; //@line 21033
  $118 = $ReallocAsyncCtx2 + 72 | 0; //@line 21034
  HEAP32[$118 >> 2] = $32; //@line 21035
  $119 = $ReallocAsyncCtx2 + 76 | 0; //@line 21036
  HEAP32[$119 >> 2] = $34; //@line 21037
  $120 = $ReallocAsyncCtx2 + 80 | 0; //@line 21038
  HEAP32[$120 >> 2] = $36; //@line 21039
  sp = STACKTOP; //@line 21040
  return;
 } else if ((label | 0) == 24) {
  $136 = _equeue_tick() | 0; //@line 21044
  if ($28) {
   $137 = $32 - $136 | 0; //@line 21046
   if (($137 | 0) < 1) {
    $139 = $26 + 40 | 0; //@line 21049
    if (HEAP32[$139 >> 2] | 0) {
     _equeue_mutex_lock($16); //@line 21053
     $142 = HEAP32[$139 >> 2] | 0; //@line 21054
     if ($142 | 0) {
      $144 = HEAP32[$22 >> 2] | 0; //@line 21057
      if ($144 | 0) {
       $147 = HEAP32[$26 + 44 >> 2] | 0; //@line 21061
       $150 = (HEAP32[$144 + 20 >> 2] | 0) - $136 | 0; //@line 21064
       $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 21068
       FUNCTION_TABLE_vii[$142 & 15]($147, $150 & ~($150 >> 31)); //@line 21069
       if (___async) {
        HEAP32[$ReallocAsyncCtx3 >> 2] = 137; //@line 21072
        $154 = $ReallocAsyncCtx3 + 4 | 0; //@line 21073
        HEAP32[$154 >> 2] = $14; //@line 21074
        $155 = $ReallocAsyncCtx3 + 8 | 0; //@line 21075
        HEAP32[$155 >> 2] = $16; //@line 21076
        $156 = $ReallocAsyncCtx3 + 12 | 0; //@line 21077
        HEAP32[$156 >> 2] = $20; //@line 21078
        sp = STACKTOP; //@line 21079
        return;
       }
       ___async_unwind = 0; //@line 21082
       HEAP32[$ReallocAsyncCtx3 >> 2] = 137; //@line 21083
       $154 = $ReallocAsyncCtx3 + 4 | 0; //@line 21084
       HEAP32[$154 >> 2] = $14; //@line 21085
       $155 = $ReallocAsyncCtx3 + 8 | 0; //@line 21086
       HEAP32[$155 >> 2] = $16; //@line 21087
       $156 = $ReallocAsyncCtx3 + 12 | 0; //@line 21088
       HEAP32[$156 >> 2] = $20; //@line 21089
       sp = STACKTOP; //@line 21090
       return;
      }
     }
     HEAP8[$14 >> 0] = 1; //@line 21094
     _equeue_mutex_unlock($16); //@line 21095
    }
    HEAP8[$20 >> 0] = 0; //@line 21097
    return;
   } else {
    $$067 = $137; //@line 21100
   }
  } else {
   $$067 = -1; //@line 21103
  }
  _equeue_mutex_lock($16); //@line 21105
  $157 = HEAP32[$22 >> 2] | 0; //@line 21106
  if (!$157) {
   $$2 = $$067; //@line 21109
  } else {
   $161 = (HEAP32[$157 + 20 >> 2] | 0) - $136 | 0; //@line 21113
   $164 = $161 & ~($161 >> 31); //@line 21116
   $$2 = $164 >>> 0 < $$067 >>> 0 ? $164 : $$067; //@line 21119
  }
  _equeue_mutex_unlock($16); //@line 21121
  _equeue_sema_wait($34, $$2) | 0; //@line 21122
  do {
   if (HEAP8[$20 >> 0] | 0) {
    _equeue_mutex_lock($16); //@line 21127
    if (!(HEAP8[$20 >> 0] | 0)) {
     _equeue_mutex_unlock($16); //@line 21131
     break;
    }
    HEAP8[$20 >> 0] = 0; //@line 21134
    _equeue_mutex_unlock($16); //@line 21135
    return;
   }
  } while (0);
  $170 = _equeue_tick() | 0; //@line 21139
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(76) | 0; //@line 21140
  _wait_ms(20); //@line 21141
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 138; //@line 21144
   $171 = $ReallocAsyncCtx5 + 4 | 0; //@line 21145
   HEAP32[$171 >> 2] = $2; //@line 21146
   $172 = $ReallocAsyncCtx5 + 8 | 0; //@line 21147
   HEAP32[$172 >> 2] = $6; //@line 21148
   $173 = $ReallocAsyncCtx5 + 12 | 0; //@line 21149
   HEAP32[$173 >> 2] = $8; //@line 21150
   $174 = $ReallocAsyncCtx5 + 16 | 0; //@line 21151
   HEAP32[$174 >> 2] = $10; //@line 21152
   $175 = $ReallocAsyncCtx5 + 20 | 0; //@line 21153
   HEAP32[$175 >> 2] = $12; //@line 21154
   $176 = $ReallocAsyncCtx5 + 24 | 0; //@line 21155
   HEAP32[$176 >> 2] = $14; //@line 21156
   $177 = $ReallocAsyncCtx5 + 28 | 0; //@line 21157
   HEAP32[$177 >> 2] = $16; //@line 21158
   $178 = $ReallocAsyncCtx5 + 32 | 0; //@line 21159
   HEAP32[$178 >> 2] = $18; //@line 21160
   $179 = $ReallocAsyncCtx5 + 36 | 0; //@line 21161
   HEAP32[$179 >> 2] = $20; //@line 21162
   $180 = $ReallocAsyncCtx5 + 40 | 0; //@line 21163
   HEAP32[$180 >> 2] = $22; //@line 21164
   $181 = $ReallocAsyncCtx5 + 44 | 0; //@line 21165
   HEAP32[$181 >> 2] = $24; //@line 21166
   $182 = $ReallocAsyncCtx5 + 48 | 0; //@line 21167
   HEAP32[$182 >> 2] = $26; //@line 21168
   $183 = $ReallocAsyncCtx5 + 52 | 0; //@line 21169
   $$expand_i1_val16 = $28 & 1; //@line 21170
   HEAP8[$183 >> 0] = $$expand_i1_val16; //@line 21171
   $184 = $ReallocAsyncCtx5 + 56 | 0; //@line 21172
   HEAP32[$184 >> 2] = $30; //@line 21173
   $185 = $ReallocAsyncCtx5 + 60 | 0; //@line 21174
   HEAP32[$185 >> 2] = $32; //@line 21175
   $186 = $ReallocAsyncCtx5 + 64 | 0; //@line 21176
   HEAP32[$186 >> 2] = $34; //@line 21177
   $187 = $ReallocAsyncCtx5 + 68 | 0; //@line 21178
   HEAP32[$187 >> 2] = $36; //@line 21179
   $188 = $ReallocAsyncCtx5 + 72 | 0; //@line 21180
   HEAP32[$188 >> 2] = $170; //@line 21181
   sp = STACKTOP; //@line 21182
   return;
  }
  ___async_unwind = 0; //@line 21185
  HEAP32[$ReallocAsyncCtx5 >> 2] = 138; //@line 21186
  $171 = $ReallocAsyncCtx5 + 4 | 0; //@line 21187
  HEAP32[$171 >> 2] = $2; //@line 21188
  $172 = $ReallocAsyncCtx5 + 8 | 0; //@line 21189
  HEAP32[$172 >> 2] = $6; //@line 21190
  $173 = $ReallocAsyncCtx5 + 12 | 0; //@line 21191
  HEAP32[$173 >> 2] = $8; //@line 21192
  $174 = $ReallocAsyncCtx5 + 16 | 0; //@line 21193
  HEAP32[$174 >> 2] = $10; //@line 21194
  $175 = $ReallocAsyncCtx5 + 20 | 0; //@line 21195
  HEAP32[$175 >> 2] = $12; //@line 21196
  $176 = $ReallocAsyncCtx5 + 24 | 0; //@line 21197
  HEAP32[$176 >> 2] = $14; //@line 21198
  $177 = $ReallocAsyncCtx5 + 28 | 0; //@line 21199
  HEAP32[$177 >> 2] = $16; //@line 21200
  $178 = $ReallocAsyncCtx5 + 32 | 0; //@line 21201
  HEAP32[$178 >> 2] = $18; //@line 21202
  $179 = $ReallocAsyncCtx5 + 36 | 0; //@line 21203
  HEAP32[$179 >> 2] = $20; //@line 21204
  $180 = $ReallocAsyncCtx5 + 40 | 0; //@line 21205
  HEAP32[$180 >> 2] = $22; //@line 21206
  $181 = $ReallocAsyncCtx5 + 44 | 0; //@line 21207
  HEAP32[$181 >> 2] = $24; //@line 21208
  $182 = $ReallocAsyncCtx5 + 48 | 0; //@line 21209
  HEAP32[$182 >> 2] = $26; //@line 21210
  $183 = $ReallocAsyncCtx5 + 52 | 0; //@line 21211
  $$expand_i1_val16 = $28 & 1; //@line 21212
  HEAP8[$183 >> 0] = $$expand_i1_val16; //@line 21213
  $184 = $ReallocAsyncCtx5 + 56 | 0; //@line 21214
  HEAP32[$184 >> 2] = $30; //@line 21215
  $185 = $ReallocAsyncCtx5 + 60 | 0; //@line 21216
  HEAP32[$185 >> 2] = $32; //@line 21217
  $186 = $ReallocAsyncCtx5 + 64 | 0; //@line 21218
  HEAP32[$186 >> 2] = $34; //@line 21219
  $187 = $ReallocAsyncCtx5 + 68 | 0; //@line 21220
  HEAP32[$187 >> 2] = $36; //@line 21221
  $188 = $ReallocAsyncCtx5 + 72 | 0; //@line 21222
  HEAP32[$188 >> 2] = $170; //@line 21223
  sp = STACKTOP; //@line 21224
  return;
 }
}
function _printf_core($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$$5 = 0, $$0 = 0, $$0228 = 0, $$0229316 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240$lcssa = 0, $$0240$lcssa356 = 0, $$0240315 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0, $$0249303 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0259 = 0, $$0262$lcssa = 0, $$0262309 = 0, $$0269 = 0, $$1 = 0, $$1230327 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241326 = 0, $$1244314 = 0, $$1248 = 0, $$1255 = 0, $$1260 = 0, $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242$lcssa = 0, $$2242302 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2261 = 0, $$2271 = 0, $$3265 = 0, $$3272 = 0, $$3300 = 0, $$4258354 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa291 = 0, $$lcssa292 = 0, $$pre342 = 0, $$pre345 = 0, $$pre348 = 0, $$sink = 0, $10 = 0, $105 = 0, $106 = 0, $109 = 0, $11 = 0, $112 = 0, $115 = 0, $12 = 0, $125 = 0, $129 = 0, $13 = 0, $14 = 0, $140 = 0, $144 = 0, $151 = 0, $152 = 0, $154 = 0, $156 = 0, $158 = 0, $167 = 0, $168 = 0, $173 = 0, $176 = 0, $181 = 0, $182 = 0, $187 = 0, $189 = 0, $196 = 0, $197 = 0, $20 = 0, $208 = 0, $21 = 0, $220 = 0, $227 = 0, $229 = 0, $23 = 0, $232 = 0, $234 = 0, $24 = 0, $242 = 0, $244 = 0, $247 = 0, $248 = 0, $25 = 0, $252 = 0, $256 = 0, $258 = 0, $261 = 0, $263 = 0, $264 = 0, $265 = 0, $27 = 0, $275 = 0, $276 = 0, $281 = 0, $283 = 0, $284 = 0, $290 = 0, $30 = 0, $302 = 0, $305 = 0, $306 = 0, $318 = 0, $320 = 0, $325 = 0, $329 = 0, $331 = 0, $343 = 0, $345 = 0, $352 = 0, $356 = 0, $36 = 0, $363 = 0, $364 = 0, $365 = 0, $43 = 0, $5 = 0, $51 = 0, $52 = 0, $54 = 0, $6 = 0, $60 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $7 = 0, $79 = 0, $8 = 0, $83 = 0, $9 = 0, $or$cond = 0, $or$cond278 = 0, $storemerge274 = 0, label = 0, sp = 0, $158$looptemp = 0;
 sp = STACKTOP; //@line 12868
 STACKTOP = STACKTOP + 64 | 0; //@line 12869
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 12869
 $5 = sp + 16 | 0; //@line 12870
 $6 = sp; //@line 12871
 $7 = sp + 24 | 0; //@line 12872
 $8 = sp + 8 | 0; //@line 12873
 $9 = sp + 20 | 0; //@line 12874
 HEAP32[$5 >> 2] = $1; //@line 12875
 $10 = ($0 | 0) != 0; //@line 12876
 $11 = $7 + 40 | 0; //@line 12877
 $12 = $11; //@line 12878
 $13 = $7 + 39 | 0; //@line 12879
 $14 = $8 + 4 | 0; //@line 12880
 $$0243 = 0; //@line 12881
 $$0247 = 0; //@line 12881
 $$0269 = 0; //@line 12881
 L1 : while (1) {
  do {
   if (($$0247 | 0) > -1) {
    if (($$0243 | 0) > (2147483647 - $$0247 | 0)) {
     HEAP32[(___errno_location() | 0) >> 2] = 75; //@line 12890
     $$1248 = -1; //@line 12891
     break;
    } else {
     $$1248 = $$0243 + $$0247 | 0; //@line 12895
     break;
    }
   } else {
    $$1248 = $$0247; //@line 12899
   }
  } while (0);
  $20 = HEAP32[$5 >> 2] | 0; //@line 12902
  $21 = HEAP8[$20 >> 0] | 0; //@line 12903
  if (!($21 << 24 >> 24)) {
   label = 88; //@line 12906
   break;
  } else {
   $23 = $21; //@line 12909
   $25 = $20; //@line 12909
  }
  L9 : while (1) {
   switch ($23 << 24 >> 24) {
   case 37:
    {
     $$0249303 = $25; //@line 12914
     $27 = $25; //@line 12914
     label = 9; //@line 12915
     break L9;
     break;
    }
   case 0:
    {
     $$0249$lcssa = $25; //@line 12920
     break L9;
     break;
    }
   default:
    {}
   }
   $24 = $25 + 1 | 0; //@line 12927
   HEAP32[$5 >> 2] = $24; //@line 12928
   $23 = HEAP8[$24 >> 0] | 0; //@line 12930
   $25 = $24; //@line 12930
  }
  L12 : do {
   if ((label | 0) == 9) {
    while (1) {
     label = 0; //@line 12935
     if ((HEAP8[$27 + 1 >> 0] | 0) != 37) {
      $$0249$lcssa = $$0249303; //@line 12940
      break L12;
     }
     $30 = $$0249303 + 1 | 0; //@line 12943
     $27 = $27 + 2 | 0; //@line 12944
     HEAP32[$5 >> 2] = $27; //@line 12945
     if ((HEAP8[$27 >> 0] | 0) != 37) {
      $$0249$lcssa = $30; //@line 12952
      break;
     } else {
      $$0249303 = $30; //@line 12949
      label = 9; //@line 12950
     }
    }
   }
  } while (0);
  $36 = $$0249$lcssa - $20 | 0; //@line 12960
  if ($10) {
   _out_670($0, $20, $36); //@line 12962
  }
  if ($36 | 0) {
   $$0243 = $36; //@line 12966
   $$0247 = $$1248; //@line 12966
   continue;
  }
  $43 = (_isdigit(HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] | 0) | 0) == 0; //@line 12974
  $$pre342 = HEAP32[$5 >> 2] | 0; //@line 12975
  if ($43) {
   $$0253 = -1; //@line 12977
   $$1270 = $$0269; //@line 12977
   $$sink = 1; //@line 12977
  } else {
   if ((HEAP8[$$pre342 + 2 >> 0] | 0) == 36) {
    $$0253 = (HEAP8[$$pre342 + 1 >> 0] | 0) + -48 | 0; //@line 12987
    $$1270 = 1; //@line 12987
    $$sink = 3; //@line 12987
   } else {
    $$0253 = -1; //@line 12989
    $$1270 = $$0269; //@line 12989
    $$sink = 1; //@line 12989
   }
  }
  $51 = $$pre342 + $$sink | 0; //@line 12992
  HEAP32[$5 >> 2] = $51; //@line 12993
  $52 = HEAP8[$51 >> 0] | 0; //@line 12994
  $54 = ($52 << 24 >> 24) + -32 | 0; //@line 12996
  if ($54 >>> 0 > 31 | (1 << $54 & 75913 | 0) == 0) {
   $$0262$lcssa = 0; //@line 13003
   $$lcssa291 = $52; //@line 13003
   $$lcssa292 = $51; //@line 13003
  } else {
   $$0262309 = 0; //@line 13005
   $60 = $52; //@line 13005
   $65 = $51; //@line 13005
   while (1) {
    $63 = 1 << ($60 << 24 >> 24) + -32 | $$0262309; //@line 13010
    $64 = $65 + 1 | 0; //@line 13011
    HEAP32[$5 >> 2] = $64; //@line 13012
    $66 = HEAP8[$64 >> 0] | 0; //@line 13013
    $68 = ($66 << 24 >> 24) + -32 | 0; //@line 13015
    if ($68 >>> 0 > 31 | (1 << $68 & 75913 | 0) == 0) {
     $$0262$lcssa = $63; //@line 13022
     $$lcssa291 = $66; //@line 13022
     $$lcssa292 = $64; //@line 13022
     break;
    } else {
     $$0262309 = $63; //@line 13025
     $60 = $66; //@line 13025
     $65 = $64; //@line 13025
    }
   }
  }
  if ($$lcssa291 << 24 >> 24 == 42) {
   if (!(_isdigit(HEAP8[$$lcssa292 + 1 >> 0] | 0) | 0)) {
    label = 23; //@line 13037
   } else {
    $79 = HEAP32[$5 >> 2] | 0; //@line 13039
    if ((HEAP8[$79 + 2 >> 0] | 0) == 36) {
     $83 = $79 + 1 | 0; //@line 13044
     HEAP32[$4 + ((HEAP8[$83 >> 0] | 0) + -48 << 2) >> 2] = 10; //@line 13049
     $$0259 = HEAP32[$3 + ((HEAP8[$83 >> 0] | 0) + -48 << 3) >> 2] | 0; //@line 13061
     $$2271 = 1; //@line 13061
     $storemerge274 = $79 + 3 | 0; //@line 13061
    } else {
     label = 23; //@line 13063
    }
   }
   if ((label | 0) == 23) {
    label = 0; //@line 13067
    if ($$1270 | 0) {
     $$0 = -1; //@line 13070
     break;
    }
    if ($10) {
     $105 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 13085
     $106 = HEAP32[$105 >> 2] | 0; //@line 13086
     HEAP32[$2 >> 2] = $105 + 4; //@line 13088
     $363 = $106; //@line 13089
    } else {
     $363 = 0; //@line 13091
    }
    $$0259 = $363; //@line 13095
    $$2271 = 0; //@line 13095
    $storemerge274 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 13095
   }
   HEAP32[$5 >> 2] = $storemerge274; //@line 13097
   $109 = ($$0259 | 0) < 0; //@line 13098
   $$1260 = $109 ? 0 - $$0259 | 0 : $$0259; //@line 13103
   $$1263 = $109 ? $$0262$lcssa | 8192 : $$0262$lcssa; //@line 13103
   $$3272 = $$2271; //@line 13103
   $115 = $storemerge274; //@line 13103
  } else {
   $112 = _getint_671($5) | 0; //@line 13105
   if (($112 | 0) < 0) {
    $$0 = -1; //@line 13108
    break;
   }
   $$1260 = $112; //@line 13112
   $$1263 = $$0262$lcssa; //@line 13112
   $$3272 = $$1270; //@line 13112
   $115 = HEAP32[$5 >> 2] | 0; //@line 13112
  }
  do {
   if ((HEAP8[$115 >> 0] | 0) == 46) {
    if ((HEAP8[$115 + 1 >> 0] | 0) != 42) {
     HEAP32[$5 >> 2] = $115 + 1; //@line 13123
     $156 = _getint_671($5) | 0; //@line 13124
     $$0254 = $156; //@line 13126
     $$pre345 = HEAP32[$5 >> 2] | 0; //@line 13126
     break;
    }
    if (_isdigit(HEAP8[$115 + 2 >> 0] | 0) | 0) {
     $125 = HEAP32[$5 >> 2] | 0; //@line 13135
     if ((HEAP8[$125 + 3 >> 0] | 0) == 36) {
      $129 = $125 + 2 | 0; //@line 13140
      HEAP32[$4 + ((HEAP8[$129 >> 0] | 0) + -48 << 2) >> 2] = 10; //@line 13145
      $140 = HEAP32[$3 + ((HEAP8[$129 >> 0] | 0) + -48 << 3) >> 2] | 0; //@line 13152
      $144 = $125 + 4 | 0; //@line 13156
      HEAP32[$5 >> 2] = $144; //@line 13157
      $$0254 = $140; //@line 13158
      $$pre345 = $144; //@line 13158
      break;
     }
    }
    if ($$3272 | 0) {
     $$0 = -1; //@line 13164
     break L1;
    }
    if ($10) {
     $151 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 13179
     $152 = HEAP32[$151 >> 2] | 0; //@line 13180
     HEAP32[$2 >> 2] = $151 + 4; //@line 13182
     $364 = $152; //@line 13183
    } else {
     $364 = 0; //@line 13185
    }
    $154 = (HEAP32[$5 >> 2] | 0) + 2 | 0; //@line 13188
    HEAP32[$5 >> 2] = $154; //@line 13189
    $$0254 = $364; //@line 13190
    $$pre345 = $154; //@line 13190
   } else {
    $$0254 = -1; //@line 13192
    $$pre345 = $115; //@line 13192
   }
  } while (0);
  $$0252 = 0; //@line 13195
  $158 = $$pre345; //@line 13195
  while (1) {
   if (((HEAP8[$158 >> 0] | 0) + -65 | 0) >>> 0 > 57) {
    $$0 = -1; //@line 13202
    break L1;
   }
   $158$looptemp = $158;
   $158 = $158 + 1 | 0; //@line 13205
   HEAP32[$5 >> 2] = $158; //@line 13206
   $167 = HEAP8[(HEAP8[$158$looptemp >> 0] | 0) + -65 + (15973 + ($$0252 * 58 | 0)) >> 0] | 0; //@line 13211
   $168 = $167 & 255; //@line 13212
   if (($168 + -1 | 0) >>> 0 >= 8) {
    break;
   } else {
    $$0252 = $168; //@line 13216
   }
  }
  if (!($167 << 24 >> 24)) {
   $$0 = -1; //@line 13223
   break;
  }
  $173 = ($$0253 | 0) > -1; //@line 13227
  do {
   if ($167 << 24 >> 24 == 19) {
    if ($173) {
     $$0 = -1; //@line 13231
     break L1;
    } else {
     label = 50; //@line 13234
    }
   } else {
    if ($173) {
     HEAP32[$4 + ($$0253 << 2) >> 2] = $168; //@line 13239
     $176 = $3 + ($$0253 << 3) | 0; //@line 13241
     $181 = HEAP32[$176 + 4 >> 2] | 0; //@line 13246
     $182 = $6; //@line 13247
     HEAP32[$182 >> 2] = HEAP32[$176 >> 2]; //@line 13249
     HEAP32[$182 + 4 >> 2] = $181; //@line 13252
     label = 50; //@line 13253
     break;
    }
    if (!$10) {
     $$0 = 0; //@line 13257
     break L1;
    }
    _pop_arg_673($6, $168, $2); //@line 13260
    $187 = HEAP32[$5 >> 2] | 0; //@line 13262
   }
  } while (0);
  if ((label | 0) == 50) {
   label = 0; //@line 13266
   if ($10) {
    $187 = $158; //@line 13268
   } else {
    $$0243 = 0; //@line 13270
    $$0247 = $$1248; //@line 13270
    $$0269 = $$3272; //@line 13270
    continue;
   }
  }
  $189 = HEAP8[$187 + -1 >> 0] | 0; //@line 13276
  $$0235 = ($$0252 | 0) != 0 & ($189 & 15 | 0) == 3 ? $189 & -33 : $189; //@line 13282
  $196 = $$1263 & -65537; //@line 13285
  $$1263$ = ($$1263 & 8192 | 0) == 0 ? $$1263 : $196; //@line 13286
  L73 : do {
   switch ($$0235 | 0) {
   case 110:
    {
     switch (($$0252 & 255) << 24 >> 24) {
     case 0:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 13294
       $$0243 = 0; //@line 13295
       $$0247 = $$1248; //@line 13295
       $$0269 = $$3272; //@line 13295
       continue L1;
       break;
      }
     case 1:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 13301
       $$0243 = 0; //@line 13302
       $$0247 = $$1248; //@line 13302
       $$0269 = $$3272; //@line 13302
       continue L1;
       break;
      }
     case 2:
      {
       $208 = HEAP32[$6 >> 2] | 0; //@line 13310
       HEAP32[$208 >> 2] = $$1248; //@line 13312
       HEAP32[$208 + 4 >> 2] = (($$1248 | 0) < 0) << 31 >> 31; //@line 13315
       $$0243 = 0; //@line 13316
       $$0247 = $$1248; //@line 13316
       $$0269 = $$3272; //@line 13316
       continue L1;
       break;
      }
     case 3:
      {
       HEAP16[HEAP32[$6 >> 2] >> 1] = $$1248; //@line 13323
       $$0243 = 0; //@line 13324
       $$0247 = $$1248; //@line 13324
       $$0269 = $$3272; //@line 13324
       continue L1;
       break;
      }
     case 4:
      {
       HEAP8[HEAP32[$6 >> 2] >> 0] = $$1248; //@line 13331
       $$0243 = 0; //@line 13332
       $$0247 = $$1248; //@line 13332
       $$0269 = $$3272; //@line 13332
       continue L1;
       break;
      }
     case 6:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 13338
       $$0243 = 0; //@line 13339
       $$0247 = $$1248; //@line 13339
       $$0269 = $$3272; //@line 13339
       continue L1;
       break;
      }
     case 7:
      {
       $220 = HEAP32[$6 >> 2] | 0; //@line 13347
       HEAP32[$220 >> 2] = $$1248; //@line 13349
       HEAP32[$220 + 4 >> 2] = (($$1248 | 0) < 0) << 31 >> 31; //@line 13352
       $$0243 = 0; //@line 13353
       $$0247 = $$1248; //@line 13353
       $$0269 = $$3272; //@line 13353
       continue L1;
       break;
      }
     default:
      {
       $$0243 = 0; //@line 13358
       $$0247 = $$1248; //@line 13358
       $$0269 = $$3272; //@line 13358
       continue L1;
      }
     }
     break;
    }
   case 112:
    {
     $$1236 = 120; //@line 13368
     $$1255 = $$0254 >>> 0 > 8 ? $$0254 : 8; //@line 13368
     $$3265 = $$1263$ | 8; //@line 13368
     label = 62; //@line 13369
     break;
    }
   case 88:
   case 120:
    {
     $$1236 = $$0235; //@line 13373
     $$1255 = $$0254; //@line 13373
     $$3265 = $$1263$; //@line 13373
     label = 62; //@line 13374
     break;
    }
   case 111:
    {
     $242 = $6; //@line 13378
     $244 = HEAP32[$242 >> 2] | 0; //@line 13380
     $247 = HEAP32[$242 + 4 >> 2] | 0; //@line 13383
     $248 = _fmt_o($244, $247, $11) | 0; //@line 13384
     $252 = $12 - $248 | 0; //@line 13388
     $$0228 = $248; //@line 13393
     $$1233 = 0; //@line 13393
     $$1238 = 16437; //@line 13393
     $$2256 = ($$1263$ & 8 | 0) == 0 | ($$0254 | 0) > ($252 | 0) ? $$0254 : $252 + 1 | 0; //@line 13393
     $$4266 = $$1263$; //@line 13393
     $281 = $244; //@line 13393
     $283 = $247; //@line 13393
     label = 68; //@line 13394
     break;
    }
   case 105:
   case 100:
    {
     $256 = $6; //@line 13398
     $258 = HEAP32[$256 >> 2] | 0; //@line 13400
     $261 = HEAP32[$256 + 4 >> 2] | 0; //@line 13403
     if (($261 | 0) < 0) {
      $263 = _i64Subtract(0, 0, $258 | 0, $261 | 0) | 0; //@line 13406
      $264 = tempRet0; //@line 13407
      $265 = $6; //@line 13408
      HEAP32[$265 >> 2] = $263; //@line 13410
      HEAP32[$265 + 4 >> 2] = $264; //@line 13413
      $$0232 = 1; //@line 13414
      $$0237 = 16437; //@line 13414
      $275 = $263; //@line 13414
      $276 = $264; //@line 13414
      label = 67; //@line 13415
      break L73;
     } else {
      $$0232 = ($$1263$ & 2049 | 0) != 0 & 1; //@line 13427
      $$0237 = ($$1263$ & 2048 | 0) == 0 ? ($$1263$ & 1 | 0) == 0 ? 16437 : 16439 : 16438; //@line 13427
      $275 = $258; //@line 13427
      $276 = $261; //@line 13427
      label = 67; //@line 13428
      break L73;
     }
     break;
    }
   case 117:
    {
     $197 = $6; //@line 13434
     $$0232 = 0; //@line 13440
     $$0237 = 16437; //@line 13440
     $275 = HEAP32[$197 >> 2] | 0; //@line 13440
     $276 = HEAP32[$197 + 4 >> 2] | 0; //@line 13440
     label = 67; //@line 13441
     break;
    }
   case 99:
    {
     HEAP8[$13 >> 0] = HEAP32[$6 >> 2]; //@line 13452
     $$2 = $13; //@line 13453
     $$2234 = 0; //@line 13453
     $$2239 = 16437; //@line 13453
     $$2251 = $11; //@line 13453
     $$5 = 1; //@line 13453
     $$6268 = $196; //@line 13453
     break;
    }
   case 109:
    {
     $$1 = _strerror(HEAP32[(___errno_location() | 0) >> 2] | 0) | 0; //@line 13460
     label = 72; //@line 13461
     break;
    }
   case 115:
    {
     $302 = HEAP32[$6 >> 2] | 0; //@line 13465
     $$1 = $302 | 0 ? $302 : 16447; //@line 13468
     label = 72; //@line 13469
     break;
    }
   case 67:
    {
     HEAP32[$8 >> 2] = HEAP32[$6 >> 2]; //@line 13479
     HEAP32[$14 >> 2] = 0; //@line 13480
     HEAP32[$6 >> 2] = $8; //@line 13481
     $$4258354 = -1; //@line 13482
     $365 = $8; //@line 13482
     label = 76; //@line 13483
     break;
    }
   case 83:
    {
     $$pre348 = HEAP32[$6 >> 2] | 0; //@line 13487
     if (!$$0254) {
      _pad_676($0, 32, $$1260, 0, $$1263$); //@line 13490
      $$0240$lcssa356 = 0; //@line 13491
      label = 85; //@line 13492
     } else {
      $$4258354 = $$0254; //@line 13494
      $365 = $$pre348; //@line 13494
      label = 76; //@line 13495
     }
     break;
    }
   case 65:
   case 71:
   case 70:
   case 69:
   case 97:
   case 103:
   case 102:
   case 101:
    {
     $$0243 = _fmt_fp($0, +HEAPF64[$6 >> 3], $$1260, $$0254, $$1263$, $$0235) | 0; //@line 13502
     $$0247 = $$1248; //@line 13502
     $$0269 = $$3272; //@line 13502
     continue L1;
     break;
    }
   default:
    {
     $$2 = $20; //@line 13507
     $$2234 = 0; //@line 13507
     $$2239 = 16437; //@line 13507
     $$2251 = $11; //@line 13507
     $$5 = $$0254; //@line 13507
     $$6268 = $$1263$; //@line 13507
    }
   }
  } while (0);
  L97 : do {
   if ((label | 0) == 62) {
    label = 0; //@line 13513
    $227 = $6; //@line 13514
    $229 = HEAP32[$227 >> 2] | 0; //@line 13516
    $232 = HEAP32[$227 + 4 >> 2] | 0; //@line 13519
    $234 = _fmt_x($229, $232, $11, $$1236 & 32) | 0; //@line 13521
    $or$cond278 = ($$3265 & 8 | 0) == 0 | ($229 | 0) == 0 & ($232 | 0) == 0; //@line 13527
    $$0228 = $234; //@line 13532
    $$1233 = $or$cond278 ? 0 : 2; //@line 13532
    $$1238 = $or$cond278 ? 16437 : 16437 + ($$1236 >> 4) | 0; //@line 13532
    $$2256 = $$1255; //@line 13532
    $$4266 = $$3265; //@line 13532
    $281 = $229; //@line 13532
    $283 = $232; //@line 13532
    label = 68; //@line 13533
   } else if ((label | 0) == 67) {
    label = 0; //@line 13536
    $$0228 = _fmt_u($275, $276, $11) | 0; //@line 13538
    $$1233 = $$0232; //@line 13538
    $$1238 = $$0237; //@line 13538
    $$2256 = $$0254; //@line 13538
    $$4266 = $$1263$; //@line 13538
    $281 = $275; //@line 13538
    $283 = $276; //@line 13538
    label = 68; //@line 13539
   } else if ((label | 0) == 72) {
    label = 0; //@line 13542
    $305 = _memchr($$1, 0, $$0254) | 0; //@line 13543
    $306 = ($305 | 0) == 0; //@line 13544
    $$2 = $$1; //@line 13551
    $$2234 = 0; //@line 13551
    $$2239 = 16437; //@line 13551
    $$2251 = $306 ? $$1 + $$0254 | 0 : $305; //@line 13551
    $$5 = $306 ? $$0254 : $305 - $$1 | 0; //@line 13551
    $$6268 = $196; //@line 13551
   } else if ((label | 0) == 76) {
    label = 0; //@line 13554
    $$0229316 = $365; //@line 13555
    $$0240315 = 0; //@line 13555
    $$1244314 = 0; //@line 13555
    while (1) {
     $318 = HEAP32[$$0229316 >> 2] | 0; //@line 13557
     if (!$318) {
      $$0240$lcssa = $$0240315; //@line 13560
      $$2245 = $$1244314; //@line 13560
      break;
     }
     $320 = _wctomb($9, $318) | 0; //@line 13563
     if (($320 | 0) < 0 | $320 >>> 0 > ($$4258354 - $$0240315 | 0) >>> 0) {
      $$0240$lcssa = $$0240315; //@line 13569
      $$2245 = $320; //@line 13569
      break;
     }
     $325 = $320 + $$0240315 | 0; //@line 13573
     if ($$4258354 >>> 0 > $325 >>> 0) {
      $$0229316 = $$0229316 + 4 | 0; //@line 13576
      $$0240315 = $325; //@line 13576
      $$1244314 = $320; //@line 13576
     } else {
      $$0240$lcssa = $325; //@line 13578
      $$2245 = $320; //@line 13578
      break;
     }
    }
    if (($$2245 | 0) < 0) {
     $$0 = -1; //@line 13584
     break L1;
    }
    _pad_676($0, 32, $$1260, $$0240$lcssa, $$1263$); //@line 13587
    if (!$$0240$lcssa) {
     $$0240$lcssa356 = 0; //@line 13590
     label = 85; //@line 13591
    } else {
     $$1230327 = $365; //@line 13593
     $$1241326 = 0; //@line 13593
     while (1) {
      $329 = HEAP32[$$1230327 >> 2] | 0; //@line 13595
      if (!$329) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 13598
       label = 85; //@line 13599
       break L97;
      }
      $331 = _wctomb($9, $329) | 0; //@line 13602
      $$1241326 = $331 + $$1241326 | 0; //@line 13603
      if (($$1241326 | 0) > ($$0240$lcssa | 0)) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 13606
       label = 85; //@line 13607
       break L97;
      }
      _out_670($0, $9, $331); //@line 13611
      if ($$1241326 >>> 0 >= $$0240$lcssa >>> 0) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 13616
       label = 85; //@line 13617
       break;
      } else {
       $$1230327 = $$1230327 + 4 | 0; //@line 13614
      }
     }
    }
   }
  } while (0);
  if ((label | 0) == 68) {
   label = 0; //@line 13625
   $284 = ($281 | 0) != 0 | ($283 | 0) != 0; //@line 13631
   $or$cond = ($$2256 | 0) != 0 | $284; //@line 13633
   $290 = $12 - $$0228 + (($284 ^ 1) & 1) | 0; //@line 13638
   $$2 = $or$cond ? $$0228 : $11; //@line 13643
   $$2234 = $$1233; //@line 13643
   $$2239 = $$1238; //@line 13643
   $$2251 = $11; //@line 13643
   $$5 = $or$cond ? ($$2256 | 0) > ($290 | 0) ? $$2256 : $290 : $$2256; //@line 13643
   $$6268 = ($$2256 | 0) > -1 ? $$4266 & -65537 : $$4266; //@line 13643
  } else if ((label | 0) == 85) {
   label = 0; //@line 13646
   _pad_676($0, 32, $$1260, $$0240$lcssa356, $$1263$ ^ 8192); //@line 13648
   $$0243 = ($$1260 | 0) > ($$0240$lcssa356 | 0) ? $$1260 : $$0240$lcssa356; //@line 13651
   $$0247 = $$1248; //@line 13651
   $$0269 = $$3272; //@line 13651
   continue;
  }
  $343 = $$2251 - $$2 | 0; //@line 13656
  $$$5 = ($$5 | 0) < ($343 | 0) ? $343 : $$5; //@line 13658
  $345 = $$$5 + $$2234 | 0; //@line 13659
  $$2261 = ($$1260 | 0) < ($345 | 0) ? $345 : $$1260; //@line 13661
  _pad_676($0, 32, $$2261, $345, $$6268); //@line 13662
  _out_670($0, $$2239, $$2234); //@line 13663
  _pad_676($0, 48, $$2261, $345, $$6268 ^ 65536); //@line 13665
  _pad_676($0, 48, $$$5, $343, 0); //@line 13666
  _out_670($0, $$2, $343); //@line 13667
  _pad_676($0, 32, $$2261, $345, $$6268 ^ 8192); //@line 13669
  $$0243 = $$2261; //@line 13670
  $$0247 = $$1248; //@line 13670
  $$0269 = $$3272; //@line 13670
 }
 L116 : do {
  if ((label | 0) == 88) {
   if (!$0) {
    if (!$$0269) {
     $$0 = 0; //@line 13678
    } else {
     $$2242302 = 1; //@line 13680
     while (1) {
      $352 = HEAP32[$4 + ($$2242302 << 2) >> 2] | 0; //@line 13683
      if (!$352) {
       $$2242$lcssa = $$2242302; //@line 13686
       break;
      }
      _pop_arg_673($3 + ($$2242302 << 3) | 0, $352, $2); //@line 13690
      $356 = $$2242302 + 1 | 0; //@line 13691
      if (($$2242302 | 0) < 9) {
       $$2242302 = $356; //@line 13694
      } else {
       $$2242$lcssa = $356; //@line 13696
       break;
      }
     }
     if (($$2242$lcssa | 0) < 10) {
      $$3300 = $$2242$lcssa; //@line 13702
      while (1) {
       if (HEAP32[$4 + ($$3300 << 2) >> 2] | 0) {
        $$0 = -1; //@line 13708
        break L116;
       }
       if (($$3300 | 0) < 9) {
        $$3300 = $$3300 + 1 | 0; //@line 13714
       } else {
        $$0 = 1; //@line 13716
        break;
       }
      }
     } else {
      $$0 = 1; //@line 13721
     }
    }
   } else {
    $$0 = $$1248; //@line 13725
   }
  }
 } while (0);
 STACKTOP = sp; //@line 13729
 return $$0 | 0; //@line 13729
}
function _mbed_vtracef($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $$0$i = 0, $$0141 = 0, $$0142 = 0, $$0144 = 0, $$0199 = 0, $$1$off0 = 0, $$10 = 0, $$1143 = 0, $$1145 = 0, $$1152 = 0, $$1152$ = 0, $$13 = 0, $$18 = 0, $$3 = 0, $$3147 = 0, $$3147168 = 0, $$3154 = 0, $$3169 = 0, $$5156 = 0, $$5156$ = 0, $$6 = 0, $$6150 = 0, $$9 = 0, $$lobit = 0, $$pre = 0, $$sink = 0, $125 = 0, $126 = 0, $151 = 0, $157 = 0, $168 = 0, $169 = 0, $171 = 0, $181 = 0, $182 = 0, $184 = 0, $186 = 0, $194 = 0, $201 = 0, $202 = 0, $204 = 0, $206 = 0, $209 = 0, $34 = 0, $38 = 0, $4 = 0, $43 = 0, $5 = 0, $54 = 0, $55 = 0, $59 = 0, $60 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $69 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $76 = 0, $78 = 0, $82 = 0, $89 = 0, $95 = 0, $AsyncCtx = 0, $AsyncCtx27 = 0, $AsyncCtx30 = 0, $AsyncCtx34 = 0, $AsyncCtx38 = 0, $AsyncCtx42 = 0, $AsyncCtx45 = 0, $AsyncCtx49 = 0, $AsyncCtx52 = 0, $AsyncCtx56 = 0, $AsyncCtx60 = 0, $AsyncCtx64 = 0, $extract$t159 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4633
 STACKTOP = STACKTOP + 96 | 0; //@line 4634
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96); //@line 4634
 $vararg_buffer23 = sp + 72 | 0; //@line 4635
 $vararg_buffer20 = sp + 64 | 0; //@line 4636
 $vararg_buffer18 = sp + 56 | 0; //@line 4637
 $vararg_buffer15 = sp + 48 | 0; //@line 4638
 $vararg_buffer12 = sp + 40 | 0; //@line 4639
 $vararg_buffer9 = sp + 32 | 0; //@line 4640
 $vararg_buffer6 = sp + 24 | 0; //@line 4641
 $vararg_buffer3 = sp + 16 | 0; //@line 4642
 $vararg_buffer1 = sp + 8 | 0; //@line 4643
 $vararg_buffer = sp; //@line 4644
 $4 = sp + 80 | 0; //@line 4645
 $5 = HEAP32[176] | 0; //@line 4646
 do {
  if ($5 | 0) {
   $AsyncCtx = _emscripten_alloc_async_context(104, sp) | 0; //@line 4650
   FUNCTION_TABLE_v[$5 & 15](); //@line 4651
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 141; //@line 4654
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 4656
    HEAP8[$AsyncCtx + 8 >> 0] = $0; //@line 4658
    HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer23; //@line 4660
    HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer23; //@line 4662
    HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 4664
    HEAP32[$AsyncCtx + 24 >> 2] = $3; //@line 4666
    HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer6; //@line 4668
    HEAP32[$AsyncCtx + 32 >> 2] = $vararg_buffer6; //@line 4670
    HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer9; //@line 4672
    HEAP32[$AsyncCtx + 40 >> 2] = $vararg_buffer9; //@line 4674
    HEAP32[$AsyncCtx + 44 >> 2] = $vararg_buffer12; //@line 4676
    HEAP32[$AsyncCtx + 48 >> 2] = $vararg_buffer12; //@line 4678
    HEAP32[$AsyncCtx + 52 >> 2] = $vararg_buffer15; //@line 4680
    HEAP32[$AsyncCtx + 56 >> 2] = $vararg_buffer15; //@line 4682
    HEAP32[$AsyncCtx + 60 >> 2] = $vararg_buffer18; //@line 4684
    HEAP32[$AsyncCtx + 64 >> 2] = $vararg_buffer18; //@line 4686
    HEAP32[$AsyncCtx + 68 >> 2] = $vararg_buffer3; //@line 4688
    HEAP32[$AsyncCtx + 72 >> 2] = $vararg_buffer3; //@line 4690
    HEAP32[$AsyncCtx + 76 >> 2] = $vararg_buffer; //@line 4692
    HEAP32[$AsyncCtx + 80 >> 2] = $vararg_buffer; //@line 4694
    HEAP32[$AsyncCtx + 84 >> 2] = $vararg_buffer20; //@line 4696
    HEAP32[$AsyncCtx + 88 >> 2] = $vararg_buffer20; //@line 4698
    HEAP32[$AsyncCtx + 92 >> 2] = $4; //@line 4700
    HEAP32[$AsyncCtx + 96 >> 2] = $vararg_buffer1; //@line 4702
    HEAP32[$AsyncCtx + 100 >> 2] = $vararg_buffer1; //@line 4704
    sp = STACKTOP; //@line 4705
    STACKTOP = sp; //@line 4706
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 4708
    HEAP32[178] = (HEAP32[178] | 0) + 1; //@line 4711
    break;
   }
  }
 } while (0);
 $34 = HEAP32[167] | 0; //@line 4716
 do {
  if ($34 | 0) {
   HEAP8[$34 >> 0] = 0; //@line 4720
   do {
    if ($0 << 24 >> 24 > -1 & ($1 | 0) != 0) {
     $38 = HEAP32[164] | 0; //@line 4726
     if (HEAP8[$38 >> 0] | 0) {
      if (_strstr($38, $1) | 0) {
       $$0$i = 1; //@line 4733
       break;
      }
     }
     $43 = HEAP32[165] | 0; //@line 4737
     if (!(HEAP8[$43 >> 0] | 0)) {
      label = 11; //@line 4741
     } else {
      if (!(_strstr($43, $1) | 0)) {
       $$0$i = 1; //@line 4746
      } else {
       label = 11; //@line 4748
      }
     }
    } else {
     label = 11; //@line 4752
    }
   } while (0);
   if ((label | 0) == 11) {
    $$0$i = 0; //@line 4756
   }
   if (!((HEAP32[174] | 0) != 0 & ((($1 | 0) == 0 | (($2 | 0) == 0 | $$0$i)) ^ 1))) {
    HEAP32[171] = HEAP32[169]; //@line 4768
    break;
   }
   $54 = HEAPU8[652] | 0; //@line 4772
   $55 = $0 & 255; //@line 4773
   if ($55 & 31 & $54 | 0) {
    $59 = $54 & 64; //@line 4778
    $$lobit = $59 >>> 6; //@line 4779
    $60 = $$lobit & 255; //@line 4780
    $64 = ($54 & 32 | 0) == 0; //@line 4784
    $65 = HEAP32[168] | 0; //@line 4785
    $66 = HEAP32[167] | 0; //@line 4786
    $67 = $0 << 24 >> 24 == 1; //@line 4787
    do {
     if ($67 | ($54 & 128 | 0) != 0) {
      $AsyncCtx64 = _emscripten_alloc_async_context(8, sp) | 0; //@line 4791
      _vsnprintf($66, $65, $2, $3) | 0; //@line 4792
      if (___async) {
       HEAP32[$AsyncCtx64 >> 2] = 142; //@line 4795
       HEAP8[$AsyncCtx64 + 4 >> 0] = $67 & 1; //@line 4798
       sp = STACKTOP; //@line 4799
       STACKTOP = sp; //@line 4800
       return;
      }
      _emscripten_free_async_context($AsyncCtx64 | 0); //@line 4802
      $69 = HEAP32[175] | 0; //@line 4803
      if (!($67 & ($69 | 0) != 0)) {
       $73 = HEAP32[174] | 0; //@line 4807
       $74 = HEAP32[167] | 0; //@line 4808
       $AsyncCtx34 = _emscripten_alloc_async_context(4, sp) | 0; //@line 4809
       FUNCTION_TABLE_vi[$73 & 1023]($74); //@line 4810
       if (___async) {
        HEAP32[$AsyncCtx34 >> 2] = 145; //@line 4813
        sp = STACKTOP; //@line 4814
        STACKTOP = sp; //@line 4815
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx34 | 0); //@line 4817
        break;
       }
      }
      $71 = HEAP32[167] | 0; //@line 4821
      $AsyncCtx27 = _emscripten_alloc_async_context(4, sp) | 0; //@line 4822
      FUNCTION_TABLE_vi[$69 & 1023]($71); //@line 4823
      if (___async) {
       HEAP32[$AsyncCtx27 >> 2] = 143; //@line 4826
       sp = STACKTOP; //@line 4827
       STACKTOP = sp; //@line 4828
       return;
      }
      _emscripten_free_async_context($AsyncCtx27 | 0); //@line 4830
      $72 = HEAP32[175] | 0; //@line 4831
      $AsyncCtx30 = _emscripten_alloc_async_context(4, sp) | 0; //@line 4832
      FUNCTION_TABLE_vi[$72 & 1023](11956); //@line 4833
      if (___async) {
       HEAP32[$AsyncCtx30 >> 2] = 144; //@line 4836
       sp = STACKTOP; //@line 4837
       STACKTOP = sp; //@line 4838
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx30 | 0); //@line 4840
       break;
      }
     } else {
      if (!$59) {
       $$1$off0 = ($$lobit | 0) != 0; //@line 4847
       $$1143 = $66; //@line 4847
       $$1145 = $65; //@line 4847
       $$3154 = 0; //@line 4847
       label = 38; //@line 4848
      } else {
       if ($64) {
        $$0142 = $66; //@line 4851
        $$0144 = $65; //@line 4851
       } else {
        $76 = _snprintf($66, $65, 11958, $vararg_buffer) | 0; //@line 4853
        $$ = ($76 | 0) >= ($65 | 0) ? 0 : $76; //@line 4855
        $78 = ($$ | 0) > 0; //@line 4856
        $$0142 = $78 ? $66 + $$ | 0 : $66; //@line 4861
        $$0144 = $65 - ($78 ? $$ : 0) | 0; //@line 4861
       }
       if (($$0144 | 0) > 0) {
        $82 = $55 + -2 | 0; //@line 4865
        switch ($82 >>> 1 | $82 << 31 | 0) {
        case 0:
         {
          $$sink = 11976; //@line 4871
          label = 35; //@line 4872
          break;
         }
        case 1:
         {
          $$sink = 11982; //@line 4876
          label = 35; //@line 4877
          break;
         }
        case 3:
         {
          $$sink = 11970; //@line 4881
          label = 35; //@line 4882
          break;
         }
        case 7:
         {
          $$sink = 11964; //@line 4886
          label = 35; //@line 4887
          break;
         }
        default:
         {
          $$0141 = 0; //@line 4891
          $$1152 = 0; //@line 4891
         }
        }
        if ((label | 0) == 35) {
         HEAP32[$vararg_buffer1 >> 2] = $$sink; //@line 4895
         $$0141 = $60 & 1; //@line 4898
         $$1152 = _snprintf($$0142, $$0144, 11988, $vararg_buffer1) | 0; //@line 4898
        }
        $$1152$ = ($$1152 | 0) < ($$0144 | 0) ? $$1152 : 0; //@line 4901
        $extract$t159 = $$0141 << 24 >> 24 != 0; //@line 4903
        if (($$1152$ | 0) > 0) {
         $89 = $$0141 << 24 >> 24 == 0; //@line 4905
         $$1$off0 = $extract$t159; //@line 4910
         $$1143 = $89 ? $$0142 : $$0142 + $$1152$ | 0; //@line 4910
         $$1145 = $$0144 - ($89 ? 0 : $$1152$) | 0; //@line 4910
         $$3154 = $$1152; //@line 4910
         label = 38; //@line 4911
        } else {
         $$1$off0 = $extract$t159; //@line 4913
         $$1143 = $$0142; //@line 4913
         $$1145 = $$0144; //@line 4913
         $$3154 = $$1152$; //@line 4913
         label = 38; //@line 4914
        }
       }
      }
      L54 : do {
       if ((label | 0) == 38) {
        do {
         if (($$1145 | 0) > 0 & (HEAP32[172] | 0) != 0) {
          HEAP32[$4 >> 2] = HEAP32[$3 >> 2]; //@line 4927
          $AsyncCtx60 = _emscripten_alloc_async_context(104, sp) | 0; //@line 4928
          $95 = _vsnprintf(0, 0, $2, $4) | 0; //@line 4929
          if (___async) {
           HEAP32[$AsyncCtx60 >> 2] = 146; //@line 4932
           HEAP8[$AsyncCtx60 + 4 >> 0] = $$1$off0 & 1; //@line 4935
           HEAP32[$AsyncCtx60 + 8 >> 2] = $vararg_buffer23; //@line 4937
           HEAP32[$AsyncCtx60 + 12 >> 2] = $vararg_buffer23; //@line 4939
           HEAP32[$AsyncCtx60 + 16 >> 2] = $vararg_buffer20; //@line 4941
           HEAP32[$AsyncCtx60 + 20 >> 2] = $vararg_buffer20; //@line 4943
           HEAP32[$AsyncCtx60 + 24 >> 2] = $$1143; //@line 4945
           HEAP32[$AsyncCtx60 + 28 >> 2] = $$1145; //@line 4947
           HEAP32[$AsyncCtx60 + 32 >> 2] = $55; //@line 4949
           HEAP32[$AsyncCtx60 + 36 >> 2] = $vararg_buffer6; //@line 4951
           HEAP32[$AsyncCtx60 + 40 >> 2] = $1; //@line 4953
           HEAP32[$AsyncCtx60 + 44 >> 2] = $vararg_buffer6; //@line 4955
           HEAP32[$AsyncCtx60 + 48 >> 2] = $vararg_buffer9; //@line 4957
           HEAP32[$AsyncCtx60 + 52 >> 2] = $vararg_buffer9; //@line 4959
           HEAP32[$AsyncCtx60 + 56 >> 2] = $vararg_buffer12; //@line 4961
           HEAP32[$AsyncCtx60 + 60 >> 2] = $vararg_buffer12; //@line 4963
           HEAP32[$AsyncCtx60 + 64 >> 2] = $vararg_buffer15; //@line 4965
           HEAP32[$AsyncCtx60 + 68 >> 2] = $vararg_buffer15; //@line 4967
           HEAP32[$AsyncCtx60 + 72 >> 2] = $vararg_buffer18; //@line 4969
           HEAP32[$AsyncCtx60 + 76 >> 2] = $vararg_buffer18; //@line 4971
           HEAP32[$AsyncCtx60 + 80 >> 2] = $2; //@line 4973
           HEAP32[$AsyncCtx60 + 84 >> 2] = $3; //@line 4975
           HEAP32[$AsyncCtx60 + 88 >> 2] = $vararg_buffer3; //@line 4977
           HEAP32[$AsyncCtx60 + 92 >> 2] = $vararg_buffer3; //@line 4979
           HEAP32[$AsyncCtx60 + 96 >> 2] = $4; //@line 4981
           HEAP32[$AsyncCtx60 + 100 >> 2] = $$3154; //@line 4983
           sp = STACKTOP; //@line 4984
           STACKTOP = sp; //@line 4985
           return;
          }
          _emscripten_free_async_context($AsyncCtx60 | 0); //@line 4987
          $125 = HEAP32[172] | 0; //@line 4992
          $AsyncCtx38 = _emscripten_alloc_async_context(100, sp) | 0; //@line 4993
          $126 = FUNCTION_TABLE_ii[$125 & 15](($$3154 | 0 ? 4 : 0) + $$3154 + $95 | 0) | 0; //@line 4994
          if (___async) {
           HEAP32[$AsyncCtx38 >> 2] = 147; //@line 4997
           HEAP8[$AsyncCtx38 + 4 >> 0] = $$1$off0 & 1; //@line 5000
           HEAP32[$AsyncCtx38 + 8 >> 2] = $vararg_buffer23; //@line 5002
           HEAP32[$AsyncCtx38 + 12 >> 2] = $vararg_buffer23; //@line 5004
           HEAP32[$AsyncCtx38 + 16 >> 2] = $$1143; //@line 5006
           HEAP32[$AsyncCtx38 + 20 >> 2] = $$1145; //@line 5008
           HEAP32[$AsyncCtx38 + 24 >> 2] = $55; //@line 5010
           HEAP32[$AsyncCtx38 + 28 >> 2] = $vararg_buffer6; //@line 5012
           HEAP32[$AsyncCtx38 + 32 >> 2] = $1; //@line 5014
           HEAP32[$AsyncCtx38 + 36 >> 2] = $vararg_buffer6; //@line 5016
           HEAP32[$AsyncCtx38 + 40 >> 2] = $vararg_buffer9; //@line 5018
           HEAP32[$AsyncCtx38 + 44 >> 2] = $vararg_buffer9; //@line 5020
           HEAP32[$AsyncCtx38 + 48 >> 2] = $vararg_buffer12; //@line 5022
           HEAP32[$AsyncCtx38 + 52 >> 2] = $vararg_buffer12; //@line 5024
           HEAP32[$AsyncCtx38 + 56 >> 2] = $vararg_buffer15; //@line 5026
           HEAP32[$AsyncCtx38 + 60 >> 2] = $vararg_buffer15; //@line 5028
           HEAP32[$AsyncCtx38 + 64 >> 2] = $vararg_buffer18; //@line 5030
           HEAP32[$AsyncCtx38 + 68 >> 2] = $vararg_buffer18; //@line 5032
           HEAP32[$AsyncCtx38 + 72 >> 2] = $2; //@line 5034
           HEAP32[$AsyncCtx38 + 76 >> 2] = $3; //@line 5036
           HEAP32[$AsyncCtx38 + 80 >> 2] = $vararg_buffer3; //@line 5038
           HEAP32[$AsyncCtx38 + 84 >> 2] = $vararg_buffer3; //@line 5040
           HEAP32[$AsyncCtx38 + 88 >> 2] = $4; //@line 5042
           HEAP32[$AsyncCtx38 + 92 >> 2] = $vararg_buffer20; //@line 5044
           HEAP32[$AsyncCtx38 + 96 >> 2] = $vararg_buffer20; //@line 5046
           sp = STACKTOP; //@line 5047
           STACKTOP = sp; //@line 5048
           return;
          } else {
           _emscripten_free_async_context($AsyncCtx38 | 0); //@line 5050
           HEAP32[$vararg_buffer3 >> 2] = $126; //@line 5051
           $151 = _snprintf($$1143, $$1145, 11988, $vararg_buffer3) | 0; //@line 5052
           $$10 = ($151 | 0) >= ($$1145 | 0) ? 0 : $151; //@line 5054
           if (($$10 | 0) > 0) {
            $$3 = $$1143 + $$10 | 0; //@line 5059
            $$3147 = $$1145 - $$10 | 0; //@line 5059
            label = 44; //@line 5060
            break;
           } else {
            $$3147168 = $$1145; //@line 5063
            $$3169 = $$1143; //@line 5063
            break;
           }
          }
         } else {
          $$3 = $$1143; //@line 5068
          $$3147 = $$1145; //@line 5068
          label = 44; //@line 5069
         }
        } while (0);
        if ((label | 0) == 44) {
         if (($$3147 | 0) > 0) {
          $$3147168 = $$3147; //@line 5075
          $$3169 = $$3; //@line 5075
         } else {
          break;
         }
        }
        $157 = $55 + -2 | 0; //@line 5080
        switch ($157 >>> 1 | $157 << 31 | 0) {
        case 0:
         {
          HEAP32[$vararg_buffer6 >> 2] = $1; //@line 5086
          $$5156 = _snprintf($$3169, $$3147168, 11991, $vararg_buffer6) | 0; //@line 5088
          break;
         }
        case 1:
         {
          HEAP32[$vararg_buffer9 >> 2] = $1; //@line 5092
          $$5156 = _snprintf($$3169, $$3147168, 12006, $vararg_buffer9) | 0; //@line 5094
          break;
         }
        case 3:
         {
          HEAP32[$vararg_buffer12 >> 2] = $1; //@line 5098
          $$5156 = _snprintf($$3169, $$3147168, 12021, $vararg_buffer12) | 0; //@line 5100
          break;
         }
        case 7:
         {
          HEAP32[$vararg_buffer15 >> 2] = $1; //@line 5104
          $$5156 = _snprintf($$3169, $$3147168, 12036, $vararg_buffer15) | 0; //@line 5106
          break;
         }
        default:
         {
          $$5156 = _snprintf($$3169, $$3147168, 12051, $vararg_buffer18) | 0; //@line 5111
         }
        }
        $$5156$ = ($$5156 | 0) < ($$3147168 | 0) ? $$5156 : 0; //@line 5115
        $168 = $$3169 + $$5156$ | 0; //@line 5117
        $169 = $$3147168 - $$5156$ | 0; //@line 5118
        if (($$5156$ | 0) > 0 & ($169 | 0) > 0) {
         $AsyncCtx56 = _emscripten_alloc_async_context(32, sp) | 0; //@line 5122
         $171 = _vsnprintf($168, $169, $2, $3) | 0; //@line 5123
         if (___async) {
          HEAP32[$AsyncCtx56 >> 2] = 148; //@line 5126
          HEAP8[$AsyncCtx56 + 4 >> 0] = $$1$off0 & 1; //@line 5129
          HEAP32[$AsyncCtx56 + 8 >> 2] = $vararg_buffer23; //@line 5131
          HEAP32[$AsyncCtx56 + 12 >> 2] = $vararg_buffer23; //@line 5133
          HEAP32[$AsyncCtx56 + 16 >> 2] = $vararg_buffer20; //@line 5135
          HEAP32[$AsyncCtx56 + 20 >> 2] = $vararg_buffer20; //@line 5137
          HEAP32[$AsyncCtx56 + 24 >> 2] = $169; //@line 5139
          HEAP32[$AsyncCtx56 + 28 >> 2] = $168; //@line 5141
          sp = STACKTOP; //@line 5142
          STACKTOP = sp; //@line 5143
          return;
         }
         _emscripten_free_async_context($AsyncCtx56 | 0); //@line 5145
         $$13 = ($171 | 0) >= ($169 | 0) ? 0 : $171; //@line 5147
         $181 = $168 + $$13 | 0; //@line 5149
         $182 = $169 - $$13 | 0; //@line 5150
         if (($$13 | 0) > 0) {
          $184 = HEAP32[173] | 0; //@line 5153
          do {
           if (($182 | 0) > 0 & ($184 | 0) != 0) {
            $AsyncCtx42 = _emscripten_alloc_async_context(32, sp) | 0; //@line 5158
            $186 = FUNCTION_TABLE_i[$184 & 7]() | 0; //@line 5159
            if (___async) {
             HEAP32[$AsyncCtx42 >> 2] = 149; //@line 5162
             HEAP32[$AsyncCtx42 + 4 >> 2] = $vararg_buffer20; //@line 5164
             HEAP32[$AsyncCtx42 + 8 >> 2] = $181; //@line 5166
             HEAP32[$AsyncCtx42 + 12 >> 2] = $182; //@line 5168
             HEAP32[$AsyncCtx42 + 16 >> 2] = $vararg_buffer20; //@line 5170
             HEAP8[$AsyncCtx42 + 20 >> 0] = $$1$off0 & 1; //@line 5173
             HEAP32[$AsyncCtx42 + 24 >> 2] = $vararg_buffer23; //@line 5175
             HEAP32[$AsyncCtx42 + 28 >> 2] = $vararg_buffer23; //@line 5177
             sp = STACKTOP; //@line 5178
             STACKTOP = sp; //@line 5179
             return;
            } else {
             _emscripten_free_async_context($AsyncCtx42 | 0); //@line 5181
             HEAP32[$vararg_buffer20 >> 2] = $186; //@line 5182
             $194 = _snprintf($181, $182, 11988, $vararg_buffer20) | 0; //@line 5183
             $$18 = ($194 | 0) >= ($182 | 0) ? 0 : $194; //@line 5185
             if (($$18 | 0) > 0) {
              $$6 = $181 + $$18 | 0; //@line 5190
              $$6150 = $182 - $$18 | 0; //@line 5190
              $$9 = $$18; //@line 5190
              break;
             } else {
              break L54;
             }
            }
           } else {
            $$6 = $181; //@line 5197
            $$6150 = $182; //@line 5197
            $$9 = $$13; //@line 5197
           }
          } while (0);
          if (!(($$9 | 0) < 1 | ($$6150 | 0) < 1 | $$1$off0 ^ 1)) {
           _snprintf($$6, $$6150, 12066, $vararg_buffer23) | 0; //@line 5206
          }
         }
        }
       }
      } while (0);
      $201 = HEAP32[174] | 0; //@line 5212
      $202 = HEAP32[167] | 0; //@line 5213
      $AsyncCtx45 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5214
      FUNCTION_TABLE_vi[$201 & 1023]($202); //@line 5215
      if (___async) {
       HEAP32[$AsyncCtx45 >> 2] = 150; //@line 5218
       sp = STACKTOP; //@line 5219
       STACKTOP = sp; //@line 5220
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx45 | 0); //@line 5222
       break;
      }
     }
    } while (0);
    HEAP32[171] = HEAP32[169]; //@line 5228
   }
  }
 } while (0);
 $204 = HEAP32[177] | 0; //@line 5232
 if (!$204) {
  STACKTOP = sp; //@line 5235
  return;
 }
 $206 = HEAP32[178] | 0; //@line 5237
 HEAP32[178] = 0; //@line 5238
 $AsyncCtx49 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5239
 FUNCTION_TABLE_v[$204 & 15](); //@line 5240
 if (___async) {
  HEAP32[$AsyncCtx49 >> 2] = 151; //@line 5243
  HEAP32[$AsyncCtx49 + 4 >> 2] = $206; //@line 5245
  sp = STACKTOP; //@line 5246
  STACKTOP = sp; //@line 5247
  return;
 }
 _emscripten_free_async_context($AsyncCtx49 | 0); //@line 5249
 if (($206 | 0) > 1) {
  $$0199 = $206; //@line 5252
 } else {
  STACKTOP = sp; //@line 5254
  return;
 }
 while (1) {
  $209 = $$0199 + -1 | 0; //@line 5257
  $$pre = HEAP32[177] | 0; //@line 5258
  $AsyncCtx52 = _emscripten_alloc_async_context(12, sp) | 0; //@line 5259
  FUNCTION_TABLE_v[$$pre & 15](); //@line 5260
  if (___async) {
   label = 70; //@line 5263
   break;
  }
  _emscripten_free_async_context($AsyncCtx52 | 0); //@line 5266
  if (($$0199 | 0) > 2) {
   $$0199 = $209; //@line 5269
  } else {
   label = 72; //@line 5271
   break;
  }
 }
 if ((label | 0) == 70) {
  HEAP32[$AsyncCtx52 >> 2] = 152; //@line 5276
  HEAP32[$AsyncCtx52 + 4 >> 2] = $$0199; //@line 5278
  HEAP32[$AsyncCtx52 + 8 >> 2] = $209; //@line 5280
  sp = STACKTOP; //@line 5281
  STACKTOP = sp; //@line 5282
  return;
 } else if ((label | 0) == 72) {
  STACKTOP = sp; //@line 5285
  return;
 }
}
function _initialize($0) {
 $0 = $0 | 0;
 var $$043 = 0, $$044 = 0, $$04750525456586062646668707274767880828486889092949698100102104106108 = 0, $$048 = 0, $1 = 0, $104 = 0, $105 = 0, $107 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $116 = 0, $118 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $135 = 0, $136 = 0, $137 = 0, $139 = 0, $14 = 0, $143 = 0, $144 = 0, $145 = 0, $147 = 0, $149 = 0, $155 = 0, $156 = 0, $157 = 0, $166 = 0, $167 = 0, $168 = 0, $170 = 0, $174 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $184 = 0, $24 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $39 = 0, $40 = 0, $41 = 0, $45 = 0, $46 = 0, $53 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $70 = 0, $72 = 0, $75 = 0, $79 = 0, $80 = 0, $87 = 0, $88 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx16 = 0, $AsyncCtx19 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5093
 $1 = $0 + 4 | 0; //@line 5094
 if (HEAP8[(HEAP32[$1 >> 2] | 0) + 56 >> 0] | 0) {
  return;
 }
 $7 = HEAP32[HEAP32[$0 >> 2] >> 2] | 0; //@line 5103
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 5104
 FUNCTION_TABLE_v[$7 & 15](); //@line 5105
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 618; //@line 5108
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 5110
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 5112
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 5114
  sp = STACKTOP; //@line 5115
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 5118
 $13 = HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] | 0; //@line 5121
 $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 5122
 $14 = FUNCTION_TABLE_i[$13 & 7]() | 0; //@line 5123
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 619; //@line 5126
  HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 5128
  HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 5130
  HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 5132
  sp = STACKTOP; //@line 5133
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 5136
 $18 = HEAP32[$14 >> 2] | 0; //@line 5137
 L10 : do {
  if (($18 | 0) < 32768) {
   if (($18 | 0) >= 128) {
    if (($18 | 0) < 2048) {
     switch ($18 | 0) {
     case 1024:
      {
       $$043 = 10; //@line 5147
       $$048 = $18; //@line 5147
       break L10;
       break;
      }
     case 512:
      {
       $$043 = 9; //@line 5152
       $$048 = $18; //@line 5152
       break L10;
       break;
      }
     case 256:
      {
       $$043 = 8; //@line 5157
       $$048 = $18; //@line 5157
       break L10;
       break;
      }
     case 128:
      {
       $$043 = 7; //@line 5162
       $$048 = $18; //@line 5162
       break L10;
       break;
      }
     default:
      {
       $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5167
       label = 60; //@line 5168
       break L10;
      }
     }
    }
    if (($18 | 0) < 8192) {
     switch ($18 | 0) {
     case 4096:
      {
       $$043 = 12; //@line 5177
       $$048 = $18; //@line 5177
       break L10;
       break;
      }
     case 2048:
      {
       $$043 = 11; //@line 5182
       $$048 = $18; //@line 5182
       break L10;
       break;
      }
     default:
      {
       $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5187
       label = 60; //@line 5188
       break L10;
      }
     }
    }
    if (($18 | 0) < 16384) {
     switch ($18 | 0) {
     case 8192:
      {
       break;
      }
     default:
      {
       $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5200
       label = 60; //@line 5201
       break L10;
      }
     }
     $$043 = 13; //@line 5205
     $$048 = $18; //@line 5205
     break;
    } else {
     switch ($18 | 0) {
     case 16384:
      {
       break;
      }
     default:
      {
       $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5213
       label = 60; //@line 5214
       break L10;
      }
     }
     $$043 = 14; //@line 5218
     $$048 = $18; //@line 5218
     break;
    }
   }
   if (($18 | 0) >= 8) {
    switch ($18 | 0) {
    case 64:
     {
      $$043 = 6; //@line 5226
      $$048 = $18; //@line 5226
      break L10;
      break;
     }
    case 32:
     {
      $$043 = 5; //@line 5231
      $$048 = $18; //@line 5231
      break L10;
      break;
     }
    case 16:
     {
      $$043 = 4; //@line 5236
      $$048 = $18; //@line 5236
      break L10;
      break;
     }
    case 8:
     {
      $$043 = 3; //@line 5241
      $$048 = $18; //@line 5241
      break L10;
      break;
     }
    default:
     {
      $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5246
      label = 60; //@line 5247
      break L10;
     }
    }
   }
   if (($18 | 0) >= 2) {
    switch ($18 | 0) {
    case 4:
     {
      $$043 = 2; //@line 5256
      $$048 = $18; //@line 5256
      break L10;
      break;
     }
    case 2:
     {
      $$043 = 1; //@line 5261
      $$048 = $18; //@line 5261
      break L10;
      break;
     }
    default:
     {
      $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5266
      label = 60; //@line 5267
      break L10;
     }
    }
   }
   if (($18 | 0) < 0) {
    switch ($18 | 0) {
    case -2147483648:
     {
      $$043 = 31; //@line 5276
      $$048 = -2147483648; //@line 5276
      break L10;
      break;
     }
    default:
     {
      $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5281
      label = 60; //@line 5282
      break L10;
     }
    }
   }
   switch ($18 | 0) {
   case 0:
    {
     break;
    }
   default:
    {
     $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5292
     label = 60; //@line 5293
     break L10;
    }
   }
   $AsyncCtx19 = _emscripten_alloc_async_context(20, sp) | 0; //@line 5297
   _mbed_assert_internal(14462, 14464, 41); //@line 5298
   if (___async) {
    HEAP32[$AsyncCtx19 >> 2] = 620; //@line 5301
    HEAP32[$AsyncCtx19 + 4 >> 2] = $1; //@line 5303
    HEAP32[$AsyncCtx19 + 8 >> 2] = $0; //@line 5305
    HEAP32[$AsyncCtx19 + 12 >> 2] = $0; //@line 5307
    HEAP32[$AsyncCtx19 + 16 >> 2] = $14; //@line 5309
    sp = STACKTOP; //@line 5310
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx19 | 0); //@line 5313
    $$04750525456586062646668707274767880828486889092949698100102104106108 = 1e6; //@line 5314
    label = 60; //@line 5315
    break;
   }
  } else {
   if (($18 | 0) < 8388608) {
    if (($18 | 0) < 524288) {
     if (($18 | 0) < 131072) {
      if (($18 | 0) < 65536) {
       switch ($18 | 0) {
       case 32768:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5332
         label = 60; //@line 5333
         break L10;
        }
       }
       $$043 = 15; //@line 5337
       $$048 = $18; //@line 5337
       break;
      } else {
       switch ($18 | 0) {
       case 65536:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5345
         label = 60; //@line 5346
         break L10;
        }
       }
       $$043 = 16; //@line 5350
       $$048 = $18; //@line 5350
       break;
      }
     } else {
      if (($18 | 0) < 262144) {
       switch ($18 | 0) {
       case 131072:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5361
         label = 60; //@line 5362
         break L10;
        }
       }
       $$043 = 17; //@line 5366
       $$048 = $18; //@line 5366
       break;
      } else {
       switch ($18 | 0) {
       case 262144:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5374
         label = 60; //@line 5375
         break L10;
        }
       }
       $$043 = 18; //@line 5379
       $$048 = $18; //@line 5379
       break;
      }
     }
    } else {
     if (($18 | 0) < 2097152) {
      if (($18 | 0) < 1048576) {
       switch ($18 | 0) {
       case 524288:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5393
         label = 60; //@line 5394
         break L10;
        }
       }
       $$043 = 19; //@line 5398
       $$048 = $18; //@line 5398
       break;
      } else {
       switch ($18 | 0) {
       case 1048576:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5406
         label = 60; //@line 5407
         break L10;
        }
       }
       $$043 = 20; //@line 5411
       $$048 = $18; //@line 5411
       break;
      }
     } else {
      if (($18 | 0) < 4194304) {
       switch ($18 | 0) {
       case 2097152:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5422
         label = 60; //@line 5423
         break L10;
        }
       }
       $$043 = 21; //@line 5427
       $$048 = $18; //@line 5427
       break;
      } else {
       switch ($18 | 0) {
       case 4194304:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5435
         label = 60; //@line 5436
         break L10;
        }
       }
       $$043 = 22; //@line 5440
       $$048 = $18; //@line 5440
       break;
      }
     }
    }
   } else {
    if (($18 | 0) < 134217728) {
     if (($18 | 0) < 33554432) {
      if (($18 | 0) < 16777216) {
       switch ($18 | 0) {
       case 8388608:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5457
         label = 60; //@line 5458
         break L10;
        }
       }
       $$043 = 23; //@line 5462
       $$048 = $18; //@line 5462
       break;
      } else {
       switch ($18 | 0) {
       case 16777216:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5470
         label = 60; //@line 5471
         break L10;
        }
       }
       $$043 = 24; //@line 5475
       $$048 = $18; //@line 5475
       break;
      }
     } else {
      if (($18 | 0) < 67108864) {
       switch ($18 | 0) {
       case 33554432:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5486
         label = 60; //@line 5487
         break L10;
        }
       }
       $$043 = 25; //@line 5491
       $$048 = $18; //@line 5491
       break;
      } else {
       switch ($18 | 0) {
       case 67108864:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5499
         label = 60; //@line 5500
         break L10;
        }
       }
       $$043 = 26; //@line 5504
       $$048 = $18; //@line 5504
       break;
      }
     }
    } else {
     if (($18 | 0) < 536870912) {
      if (($18 | 0) < 268435456) {
       switch ($18 | 0) {
       case 134217728:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5518
         label = 60; //@line 5519
         break L10;
        }
       }
       $$043 = 27; //@line 5523
       $$048 = $18; //@line 5523
       break;
      } else {
       switch ($18 | 0) {
       case 268435456:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5531
         label = 60; //@line 5532
         break L10;
        }
       }
       $$043 = 28; //@line 5536
       $$048 = $18; //@line 5536
       break;
      }
     } else {
      if (($18 | 0) < 1073741824) {
       switch ($18 | 0) {
       case 536870912:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5547
         label = 60; //@line 5548
         break L10;
        }
       }
       $$043 = 29; //@line 5552
       $$048 = $18; //@line 5552
       break;
      } else {
       switch ($18 | 0) {
       case 1073741824:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5560
         label = 60; //@line 5561
         break L10;
        }
       }
       $$043 = 30; //@line 5565
       $$048 = $18; //@line 5565
       break;
      }
     }
    }
   }
  }
 } while (0);
 if ((label | 0) == 60) {
  $$043 = 0; //@line 5574
  $$048 = $$04750525456586062646668707274767880828486889092949698100102104106108; //@line 5574
 }
 $24 = HEAP32[$14 + 4 >> 2] | 0; //@line 5577
 do {
  if (($24 + -4 | 0) >>> 0 > 28) {
   $AsyncCtx16 = _emscripten_alloc_async_context(24, sp) | 0; //@line 5582
   _mbed_assert_internal(14462, 14464, 55); //@line 5583
   if (___async) {
    HEAP32[$AsyncCtx16 >> 2] = 621; //@line 5586
    HEAP32[$AsyncCtx16 + 4 >> 2] = $1; //@line 5588
    HEAP32[$AsyncCtx16 + 8 >> 2] = $0; //@line 5590
    HEAP32[$AsyncCtx16 + 12 >> 2] = $$048; //@line 5592
    HEAP32[$AsyncCtx16 + 16 >> 2] = $0; //@line 5594
    HEAP8[$AsyncCtx16 + 20 >> 0] = $$043; //@line 5596
    sp = STACKTOP; //@line 5597
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx16 | 0); //@line 5600
    $$044 = 32; //@line 5601
    break;
   }
  } else {
   $$044 = $24; //@line 5605
  }
 } while (0);
 $32 = 7 << $$044 + -4; //@line 5609
 $33 = ___muldi3($32 | 0, 0, 1e6, 0) | 0; //@line 5610
 $34 = tempRet0; //@line 5611
 $35 = _i64Add($$048 | 0, 0, -1, -1) | 0; //@line 5612
 $37 = _i64Add($35 | 0, tempRet0 | 0, $33 | 0, $34 | 0) | 0; //@line 5614
 $39 = ___udivdi3($37 | 0, tempRet0 | 0, $$048 | 0, 0) | 0; //@line 5616
 $40 = tempRet0; //@line 5617
 $41 = HEAP32[$1 >> 2] | 0; //@line 5618
 HEAP32[$41 >> 2] = 0; //@line 5619
 HEAP32[$41 + 4 >> 2] = 0; //@line 5621
 $45 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 5624
 $AsyncCtx6 = _emscripten_alloc_async_context(40, sp) | 0; //@line 5625
 $46 = FUNCTION_TABLE_i[$45 & 7]() | 0; //@line 5626
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 622; //@line 5629
  HEAP32[$AsyncCtx6 + 4 >> 2] = $1; //@line 5631
  HEAP32[$AsyncCtx6 + 8 >> 2] = $$048; //@line 5633
  HEAP8[$AsyncCtx6 + 12 >> 0] = $$043; //@line 5635
  HEAP32[$AsyncCtx6 + 16 >> 2] = $$044; //@line 5637
  HEAP32[$AsyncCtx6 + 20 >> 2] = $32; //@line 5639
  $53 = $AsyncCtx6 + 24 | 0; //@line 5641
  HEAP32[$53 >> 2] = $39; //@line 5643
  HEAP32[$53 + 4 >> 2] = $40; //@line 5646
  HEAP32[$AsyncCtx6 + 32 >> 2] = $0; //@line 5648
  HEAP32[$AsyncCtx6 + 36 >> 2] = $0; //@line 5650
  sp = STACKTOP; //@line 5651
  return;
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 5654
 $59 = HEAP32[$1 >> 2] | 0; //@line 5655
 $60 = $59 + 32 | 0; //@line 5656
 HEAP32[$60 >> 2] = $46; //@line 5657
 $61 = $59 + 40 | 0; //@line 5658
 $62 = $61; //@line 5659
 HEAP32[$62 >> 2] = 0; //@line 5661
 HEAP32[$62 + 4 >> 2] = 0; //@line 5664
 $66 = $59 + 8 | 0; //@line 5665
 HEAP32[$66 >> 2] = $$048; //@line 5666
 $67 = $59 + 57 | 0; //@line 5667
 HEAP8[$67 >> 0] = $$043; //@line 5668
 $68 = _bitshift64Shl(1, 0, $$044 | 0) | 0; //@line 5669
 $70 = _i64Add($68 | 0, tempRet0 | 0, -1, 0) | 0; //@line 5671
 $72 = $59 + 12 | 0; //@line 5673
 HEAP32[$72 >> 2] = $70; //@line 5674
 HEAP32[$59 + 16 >> 2] = $32; //@line 5676
 $75 = $59 + 24 | 0; //@line 5678
 HEAP32[$75 >> 2] = $39; //@line 5680
 HEAP32[$75 + 4 >> 2] = $40; //@line 5683
 $79 = $59 + 48 | 0; //@line 5684
 $80 = $79; //@line 5685
 HEAP32[$80 >> 2] = 0; //@line 5687
 HEAP32[$80 + 4 >> 2] = 0; //@line 5690
 HEAP8[$59 + 56 >> 0] = 1; //@line 5692
 $87 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 5695
 $AsyncCtx9 = _emscripten_alloc_async_context(36, sp) | 0; //@line 5696
 $88 = FUNCTION_TABLE_i[$87 & 7]() | 0; //@line 5697
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 623; //@line 5700
  HEAP32[$AsyncCtx9 + 4 >> 2] = $1; //@line 5702
  HEAP32[$AsyncCtx9 + 8 >> 2] = $0; //@line 5704
  HEAP32[$AsyncCtx9 + 12 >> 2] = $60; //@line 5706
  HEAP32[$AsyncCtx9 + 16 >> 2] = $72; //@line 5708
  HEAP32[$AsyncCtx9 + 20 >> 2] = $66; //@line 5710
  HEAP32[$AsyncCtx9 + 24 >> 2] = $79; //@line 5712
  HEAP32[$AsyncCtx9 + 28 >> 2] = $67; //@line 5714
  HEAP32[$AsyncCtx9 + 32 >> 2] = $61; //@line 5716
  sp = STACKTOP; //@line 5717
  return;
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 5720
 if (($88 | 0) != (HEAP32[(HEAP32[$1 >> 2] | 0) + 32 >> 2] | 0)) {
  $104 = $88 - (HEAP32[$60 >> 2] | 0) & HEAP32[$72 >> 2]; //@line 5729
  HEAP32[$60 >> 2] = $88; //@line 5730
  $105 = HEAP32[$66 >> 2] | 0; //@line 5731
  do {
   if (($105 | 0) == 1e6) {
    $180 = $104; //@line 5735
    $181 = 0; //@line 5735
   } else {
    $107 = HEAP8[$67 >> 0] | 0; //@line 5737
    $109 = ___muldi3($104 | 0, 0, 1e6, 0) | 0; //@line 5739
    $110 = tempRet0; //@line 5740
    if (!($107 << 24 >> 24)) {
     $143 = ___udivdi3($109 | 0, $110 | 0, $105 | 0, 0) | 0; //@line 5742
     $144 = tempRet0; //@line 5743
     $145 = ___muldi3($143 | 0, $144 | 0, $105 | 0, 0) | 0; //@line 5744
     $147 = _i64Subtract($109 | 0, $110 | 0, $145 | 0, tempRet0 | 0) | 0; //@line 5746
     $149 = $61; //@line 5748
     $155 = _i64Add($147 | 0, tempRet0 | 0, HEAP32[$149 >> 2] | 0, HEAP32[$149 + 4 >> 2] | 0) | 0; //@line 5754
     $156 = tempRet0; //@line 5755
     $157 = $61; //@line 5756
     HEAP32[$157 >> 2] = $155; //@line 5758
     HEAP32[$157 + 4 >> 2] = $156; //@line 5761
     if ($156 >>> 0 < 0 | ($156 | 0) == 0 & $155 >>> 0 < $105 >>> 0) {
      $180 = $143; //@line 5768
      $181 = $144; //@line 5768
      break;
     }
     $166 = _i64Add($143 | 0, $144 | 0, 1, 0) | 0; //@line 5771
     $167 = tempRet0; //@line 5772
     $168 = _i64Subtract($155 | 0, $156 | 0, $105 | 0, 0) | 0; //@line 5773
     $170 = $61; //@line 5775
     HEAP32[$170 >> 2] = $168; //@line 5777
     HEAP32[$170 + 4 >> 2] = tempRet0; //@line 5780
     $180 = $166; //@line 5781
     $181 = $167; //@line 5781
     break;
    } else {
     $111 = $107 & 255; //@line 5784
     $112 = _bitshift64Lshr($109 | 0, $110 | 0, $111 | 0) | 0; //@line 5785
     $113 = tempRet0; //@line 5786
     $114 = _bitshift64Shl($112 | 0, $113 | 0, $111 | 0) | 0; //@line 5787
     $116 = _i64Subtract($109 | 0, $110 | 0, $114 | 0, tempRet0 | 0) | 0; //@line 5789
     $118 = $61; //@line 5791
     $124 = _i64Add(HEAP32[$118 >> 2] | 0, HEAP32[$118 + 4 >> 2] | 0, $116 | 0, tempRet0 | 0) | 0; //@line 5797
     $125 = tempRet0; //@line 5798
     $126 = $61; //@line 5799
     HEAP32[$126 >> 2] = $124; //@line 5801
     HEAP32[$126 + 4 >> 2] = $125; //@line 5804
     if ($125 >>> 0 < 0 | ($125 | 0) == 0 & $124 >>> 0 < $105 >>> 0) {
      $180 = $112; //@line 5811
      $181 = $113; //@line 5811
      break;
     }
     $135 = _i64Add($112 | 0, $113 | 0, 1, 0) | 0; //@line 5814
     $136 = tempRet0; //@line 5815
     $137 = _i64Subtract($124 | 0, $125 | 0, $105 | 0, 0) | 0; //@line 5816
     $139 = $61; //@line 5818
     HEAP32[$139 >> 2] = $137; //@line 5820
     HEAP32[$139 + 4 >> 2] = tempRet0; //@line 5823
     $180 = $135; //@line 5824
     $181 = $136; //@line 5824
     break;
    }
   }
  } while (0);
  $174 = $79; //@line 5829
  $182 = _i64Add(HEAP32[$174 >> 2] | 0, HEAP32[$174 + 4 >> 2] | 0, $180 | 0, $181 | 0) | 0; //@line 5835
  $184 = $79; //@line 5837
  HEAP32[$184 >> 2] = $182; //@line 5839
  HEAP32[$184 + 4 >> 2] = tempRet0; //@line 5842
 }
 $AsyncCtx12 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5844
 _schedule_interrupt($0); //@line 5845
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 624; //@line 5848
  sp = STACKTOP; //@line 5849
  return;
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 5852
 return;
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$pre = 0, $$pre$i$i = 0, $$pre$i$i25 = 0, $$pre$i$i38 = 0, $$pre$i$i54 = 0, $$pre$i$i70 = 0, $$pre123 = 0, $$pre124 = 0, $$pre125 = 0, $$pre126 = 0, $10 = 0, $110 = 0, $111 = 0, $123 = 0, $124 = 0, $131 = 0, $132 = 0, $134 = 0, $135 = 0, $138 = 0, $149 = 0, $150 = 0, $161 = 0, $162 = 0, $168 = 0, $169 = 0, $171 = 0, $172 = 0, $175 = 0, $185 = 0, $186 = 0, $196 = 0, $197 = 0, $2 = 0, $204 = 0, $209 = 0, $214 = 0, $23 = 0, $24 = 0, $3 = 0, $38 = 0, $39 = 0, $4 = 0, $48 = 0, $49 = 0, $51 = 0, $52 = 0, $55 = 0, $6 = 0, $68 = 0, $69 = 0, $7 = 0, $82 = 0, $83 = 0, $91 = 0, $92 = 0, $94 = 0, $95 = 0, $98 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx23 = 0, $AsyncCtx26 = 0, $AsyncCtx29 = 0, $AsyncCtx32 = 0, $AsyncCtx35 = 0, $AsyncCtx38 = 0, $AsyncCtx41 = 0, $AsyncCtx44 = 0, $AsyncCtx47 = 0, $AsyncCtx5 = 0, $AsyncCtx50 = 0, $AsyncCtx8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6004
 STACKTOP = STACKTOP + 16 | 0; //@line 6005
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 6005
 $2 = sp; //@line 6006
 $3 = $2 + 12 | 0; //@line 6007
 HEAP32[$2 >> 2] = 181; //@line 6008
 HEAP32[$2 + 4 >> 2] = 0; //@line 6010
 HEAP32[$2 + 8 >> 2] = $0; //@line 6012
 HEAP32[$3 >> 2] = 824; //@line 6013
 $4 = $0 + 2384 | 0; //@line 6014
 do {
  if (($4 | 0) == ($2 | 0)) {
   $38 = 824; //@line 6018
   label = 10; //@line 6019
  } else {
   $6 = $0 + 2396 | 0; //@line 6021
   $7 = HEAP32[$6 >> 2] | 0; //@line 6022
   if (!$7) {
    $23 = 824; //@line 6025
   } else {
    $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 6028
    $AsyncCtx = _emscripten_alloc_async_context(44, sp) | 0; //@line 6029
    FUNCTION_TABLE_vi[$10 & 1023]($4); //@line 6030
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 182; //@line 6033
     HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 6035
     HEAP32[$AsyncCtx + 8 >> 2] = $6; //@line 6037
     HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 6039
     HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 6041
     HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 6043
     HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 6045
     HEAP32[$AsyncCtx + 28 >> 2] = $4; //@line 6047
     HEAP32[$AsyncCtx + 32 >> 2] = $2; //@line 6049
     HEAP32[$AsyncCtx + 36 >> 2] = $2; //@line 6051
     HEAP32[$AsyncCtx + 40 >> 2] = $2; //@line 6053
     sp = STACKTOP; //@line 6054
     STACKTOP = sp; //@line 6055
     return;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 6057
    $$pre = HEAP32[$3 >> 2] | 0; //@line 6058
    if (!$$pre) {
     HEAP32[$6 >> 2] = 0; //@line 6061
     break;
    } else {
     $23 = $$pre; //@line 6064
    }
   }
   $24 = HEAP32[$23 + 4 >> 2] | 0; //@line 6068
   $AsyncCtx2 = _emscripten_alloc_async_context(44, sp) | 0; //@line 6069
   FUNCTION_TABLE_vii[$24 & 15]($4, $2); //@line 6070
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 183; //@line 6073
    HEAP32[$AsyncCtx2 + 4 >> 2] = $3; //@line 6075
    HEAP32[$AsyncCtx2 + 8 >> 2] = $6; //@line 6077
    HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 6079
    HEAP32[$AsyncCtx2 + 16 >> 2] = $2; //@line 6081
    HEAP32[$AsyncCtx2 + 20 >> 2] = $1; //@line 6083
    HEAP32[$AsyncCtx2 + 24 >> 2] = $2; //@line 6085
    HEAP32[$AsyncCtx2 + 28 >> 2] = $2; //@line 6087
    HEAP32[$AsyncCtx2 + 32 >> 2] = $2; //@line 6089
    HEAP32[$AsyncCtx2 + 36 >> 2] = $2; //@line 6091
    HEAP32[$AsyncCtx2 + 40 >> 2] = $4; //@line 6093
    sp = STACKTOP; //@line 6094
    STACKTOP = sp; //@line 6095
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6097
    $$pre$i$i = HEAP32[$3 >> 2] | 0; //@line 6098
    HEAP32[$6 >> 2] = $$pre$i$i; //@line 6100
    if (!$$pre$i$i) {
     break;
    } else {
     $38 = $$pre$i$i; //@line 6105
     label = 10; //@line 6106
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 10) {
   $39 = HEAP32[$38 + 8 >> 2] | 0; //@line 6115
   $AsyncCtx5 = _emscripten_alloc_async_context(36, sp) | 0; //@line 6116
   FUNCTION_TABLE_vi[$39 & 1023]($2); //@line 6117
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 184; //@line 6120
    HEAP32[$AsyncCtx5 + 4 >> 2] = $0; //@line 6122
    HEAP32[$AsyncCtx5 + 8 >> 2] = $2; //@line 6124
    HEAP32[$AsyncCtx5 + 12 >> 2] = $1; //@line 6126
    HEAP32[$AsyncCtx5 + 16 >> 2] = $2; //@line 6128
    HEAP32[$AsyncCtx5 + 20 >> 2] = $2; //@line 6130
    HEAP32[$AsyncCtx5 + 24 >> 2] = $2; //@line 6132
    HEAP32[$AsyncCtx5 + 28 >> 2] = $2; //@line 6134
    HEAP32[$AsyncCtx5 + 32 >> 2] = $4; //@line 6136
    sp = STACKTOP; //@line 6137
    STACKTOP = sp; //@line 6138
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 6140
    break;
   }
  }
 } while (0);
 $48 = $2 + 12 | 0; //@line 6145
 HEAP32[$2 >> 2] = 6; //@line 6146
 HEAP32[$2 + 4 >> 2] = 0; //@line 6148
 HEAP32[$2 + 8 >> 2] = $0; //@line 6150
 HEAP32[$48 >> 2] = 836; //@line 6151
 $49 = $0 + 2416 | 0; //@line 6152
 do {
  if (($49 | 0) == ($2 | 0)) {
   $82 = 836; //@line 6156
   label = 22; //@line 6157
  } else {
   $51 = $0 + 2428 | 0; //@line 6159
   $52 = HEAP32[$51 >> 2] | 0; //@line 6160
   if (!$52) {
    $68 = 836; //@line 6163
   } else {
    $55 = HEAP32[$52 + 8 >> 2] | 0; //@line 6166
    $AsyncCtx8 = _emscripten_alloc_async_context(44, sp) | 0; //@line 6167
    FUNCTION_TABLE_vi[$55 & 1023]($49); //@line 6168
    if (___async) {
     HEAP32[$AsyncCtx8 >> 2] = 185; //@line 6171
     HEAP32[$AsyncCtx8 + 4 >> 2] = $48; //@line 6173
     HEAP32[$AsyncCtx8 + 8 >> 2] = $0; //@line 6175
     HEAP32[$AsyncCtx8 + 12 >> 2] = $2; //@line 6177
     HEAP32[$AsyncCtx8 + 16 >> 2] = $1; //@line 6179
     HEAP32[$AsyncCtx8 + 20 >> 2] = $51; //@line 6181
     HEAP32[$AsyncCtx8 + 24 >> 2] = $49; //@line 6183
     HEAP32[$AsyncCtx8 + 28 >> 2] = $2; //@line 6185
     HEAP32[$AsyncCtx8 + 32 >> 2] = $2; //@line 6187
     HEAP32[$AsyncCtx8 + 36 >> 2] = $2; //@line 6189
     HEAP32[$AsyncCtx8 + 40 >> 2] = $4; //@line 6191
     sp = STACKTOP; //@line 6192
     STACKTOP = sp; //@line 6193
     return;
    }
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 6195
    $$pre123 = HEAP32[$48 >> 2] | 0; //@line 6196
    if (!$$pre123) {
     HEAP32[$51 >> 2] = 0; //@line 6199
     break;
    } else {
     $68 = $$pre123; //@line 6202
    }
   }
   $69 = HEAP32[$68 + 4 >> 2] | 0; //@line 6206
   $AsyncCtx11 = _emscripten_alloc_async_context(40, sp) | 0; //@line 6207
   FUNCTION_TABLE_vii[$69 & 15]($49, $2); //@line 6208
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 186; //@line 6211
    HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 6213
    HEAP32[$AsyncCtx11 + 8 >> 2] = $2; //@line 6215
    HEAP32[$AsyncCtx11 + 12 >> 2] = $1; //@line 6217
    HEAP32[$AsyncCtx11 + 16 >> 2] = $48; //@line 6219
    HEAP32[$AsyncCtx11 + 20 >> 2] = $51; //@line 6221
    HEAP32[$AsyncCtx11 + 24 >> 2] = $2; //@line 6223
    HEAP32[$AsyncCtx11 + 28 >> 2] = $2; //@line 6225
    HEAP32[$AsyncCtx11 + 32 >> 2] = $2; //@line 6227
    HEAP32[$AsyncCtx11 + 36 >> 2] = $4; //@line 6229
    sp = STACKTOP; //@line 6230
    STACKTOP = sp; //@line 6231
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 6233
    $$pre$i$i25 = HEAP32[$48 >> 2] | 0; //@line 6234
    HEAP32[$51 >> 2] = $$pre$i$i25; //@line 6236
    if (!$$pre$i$i25) {
     break;
    } else {
     $82 = $$pre$i$i25; //@line 6241
     label = 22; //@line 6242
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 22) {
   $83 = HEAP32[$82 + 8 >> 2] | 0; //@line 6251
   $AsyncCtx14 = _emscripten_alloc_async_context(32, sp) | 0; //@line 6252
   FUNCTION_TABLE_vi[$83 & 1023]($2); //@line 6253
   if (___async) {
    HEAP32[$AsyncCtx14 >> 2] = 187; //@line 6256
    HEAP32[$AsyncCtx14 + 4 >> 2] = $0; //@line 6258
    HEAP32[$AsyncCtx14 + 8 >> 2] = $2; //@line 6260
    HEAP32[$AsyncCtx14 + 12 >> 2] = $1; //@line 6262
    HEAP32[$AsyncCtx14 + 16 >> 2] = $2; //@line 6264
    HEAP32[$AsyncCtx14 + 20 >> 2] = $2; //@line 6266
    HEAP32[$AsyncCtx14 + 24 >> 2] = $2; //@line 6268
    HEAP32[$AsyncCtx14 + 28 >> 2] = $4; //@line 6270
    sp = STACKTOP; //@line 6271
    STACKTOP = sp; //@line 6272
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 6274
    break;
   }
  }
 } while (0);
 $91 = $2 + 12 | 0; //@line 6279
 HEAP32[$2 >> 2] = 188; //@line 6280
 HEAP32[$2 + 4 >> 2] = 0; //@line 6282
 HEAP32[$2 + 8 >> 2] = $0; //@line 6284
 HEAP32[$91 >> 2] = 824; //@line 6285
 $92 = $0 + 2448 | 0; //@line 6286
 do {
  if (($92 | 0) == ($2 | 0)) {
   $123 = 824; //@line 6290
   label = 34; //@line 6291
  } else {
   $94 = $0 + 2460 | 0; //@line 6293
   $95 = HEAP32[$94 >> 2] | 0; //@line 6294
   if (!$95) {
    $110 = 824; //@line 6297
   } else {
    $98 = HEAP32[$95 + 8 >> 2] | 0; //@line 6300
    $AsyncCtx17 = _emscripten_alloc_async_context(40, sp) | 0; //@line 6301
    FUNCTION_TABLE_vi[$98 & 1023]($92); //@line 6302
    if (___async) {
     HEAP32[$AsyncCtx17 >> 2] = 189; //@line 6305
     HEAP32[$AsyncCtx17 + 4 >> 2] = $94; //@line 6307
     HEAP32[$AsyncCtx17 + 8 >> 2] = $92; //@line 6309
     HEAP32[$AsyncCtx17 + 12 >> 2] = $2; //@line 6311
     HEAP32[$AsyncCtx17 + 16 >> 2] = $2; //@line 6313
     HEAP32[$AsyncCtx17 + 20 >> 2] = $0; //@line 6315
     HEAP32[$AsyncCtx17 + 24 >> 2] = $1; //@line 6317
     HEAP32[$AsyncCtx17 + 28 >> 2] = $91; //@line 6319
     HEAP32[$AsyncCtx17 + 32 >> 2] = $2; //@line 6321
     HEAP32[$AsyncCtx17 + 36 >> 2] = $4; //@line 6323
     sp = STACKTOP; //@line 6324
     STACKTOP = sp; //@line 6325
     return;
    }
    _emscripten_free_async_context($AsyncCtx17 | 0); //@line 6327
    $$pre124 = HEAP32[$91 >> 2] | 0; //@line 6328
    if (!$$pre124) {
     HEAP32[$94 >> 2] = 0; //@line 6331
     break;
    } else {
     $110 = $$pre124; //@line 6334
    }
   }
   $111 = HEAP32[$110 + 4 >> 2] | 0; //@line 6338
   $AsyncCtx20 = _emscripten_alloc_async_context(36, sp) | 0; //@line 6339
   FUNCTION_TABLE_vii[$111 & 15]($92, $2); //@line 6340
   if (___async) {
    HEAP32[$AsyncCtx20 >> 2] = 190; //@line 6343
    HEAP32[$AsyncCtx20 + 4 >> 2] = $2; //@line 6345
    HEAP32[$AsyncCtx20 + 8 >> 2] = $2; //@line 6347
    HEAP32[$AsyncCtx20 + 12 >> 2] = $0; //@line 6349
    HEAP32[$AsyncCtx20 + 16 >> 2] = $1; //@line 6351
    HEAP32[$AsyncCtx20 + 20 >> 2] = $91; //@line 6353
    HEAP32[$AsyncCtx20 + 24 >> 2] = $94; //@line 6355
    HEAP32[$AsyncCtx20 + 28 >> 2] = $2; //@line 6357
    HEAP32[$AsyncCtx20 + 32 >> 2] = $4; //@line 6359
    sp = STACKTOP; //@line 6360
    STACKTOP = sp; //@line 6361
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx20 | 0); //@line 6363
    $$pre$i$i38 = HEAP32[$91 >> 2] | 0; //@line 6364
    HEAP32[$94 >> 2] = $$pre$i$i38; //@line 6366
    if (!$$pre$i$i38) {
     break;
    } else {
     $123 = $$pre$i$i38; //@line 6371
     label = 34; //@line 6372
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 34) {
   $124 = HEAP32[$123 + 8 >> 2] | 0; //@line 6381
   $AsyncCtx23 = _emscripten_alloc_async_context(28, sp) | 0; //@line 6382
   FUNCTION_TABLE_vi[$124 & 1023]($2); //@line 6383
   if (___async) {
    HEAP32[$AsyncCtx23 >> 2] = 191; //@line 6386
    HEAP32[$AsyncCtx23 + 4 >> 2] = $2; //@line 6388
    HEAP32[$AsyncCtx23 + 8 >> 2] = $2; //@line 6390
    HEAP32[$AsyncCtx23 + 12 >> 2] = $0; //@line 6392
    HEAP32[$AsyncCtx23 + 16 >> 2] = $1; //@line 6394
    HEAP32[$AsyncCtx23 + 20 >> 2] = $2; //@line 6396
    HEAP32[$AsyncCtx23 + 24 >> 2] = $4; //@line 6398
    sp = STACKTOP; //@line 6399
    STACKTOP = sp; //@line 6400
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx23 | 0); //@line 6402
    break;
   }
  }
 } while (0);
 $131 = $2 + 12 | 0; //@line 6407
 HEAP32[$2 >> 2] = 192; //@line 6408
 HEAP32[$2 + 4 >> 2] = 0; //@line 6410
 HEAP32[$2 + 8 >> 2] = $0; //@line 6412
 HEAP32[$131 >> 2] = 824; //@line 6413
 $132 = $0 + 2400 | 0; //@line 6414
 do {
  if (($132 | 0) == ($2 | 0)) {
   $161 = 824; //@line 6418
   label = 46; //@line 6419
  } else {
   $134 = $0 + 2412 | 0; //@line 6421
   $135 = HEAP32[$134 >> 2] | 0; //@line 6422
   if (!$135) {
    $149 = 824; //@line 6425
   } else {
    $138 = HEAP32[$135 + 8 >> 2] | 0; //@line 6428
    $AsyncCtx26 = _emscripten_alloc_async_context(36, sp) | 0; //@line 6429
    FUNCTION_TABLE_vi[$138 & 1023]($132); //@line 6430
    if (___async) {
     HEAP32[$AsyncCtx26 >> 2] = 193; //@line 6433
     HEAP32[$AsyncCtx26 + 4 >> 2] = $131; //@line 6435
     HEAP32[$AsyncCtx26 + 8 >> 2] = $1; //@line 6437
     HEAP32[$AsyncCtx26 + 12 >> 2] = $134; //@line 6439
     HEAP32[$AsyncCtx26 + 16 >> 2] = $0; //@line 6441
     HEAP32[$AsyncCtx26 + 20 >> 2] = $132; //@line 6443
     HEAP32[$AsyncCtx26 + 24 >> 2] = $2; //@line 6445
     HEAP32[$AsyncCtx26 + 28 >> 2] = $2; //@line 6447
     HEAP32[$AsyncCtx26 + 32 >> 2] = $4; //@line 6449
     sp = STACKTOP; //@line 6450
     STACKTOP = sp; //@line 6451
     return;
    }
    _emscripten_free_async_context($AsyncCtx26 | 0); //@line 6453
    $$pre125 = HEAP32[$131 >> 2] | 0; //@line 6454
    if (!$$pre125) {
     HEAP32[$134 >> 2] = 0; //@line 6457
     break;
    } else {
     $149 = $$pre125; //@line 6460
    }
   }
   $150 = HEAP32[$149 + 4 >> 2] | 0; //@line 6464
   $AsyncCtx29 = _emscripten_alloc_async_context(32, sp) | 0; //@line 6465
   FUNCTION_TABLE_vii[$150 & 15]($132, $2); //@line 6466
   if (___async) {
    HEAP32[$AsyncCtx29 >> 2] = 194; //@line 6469
    HEAP32[$AsyncCtx29 + 4 >> 2] = $1; //@line 6471
    HEAP32[$AsyncCtx29 + 8 >> 2] = $131; //@line 6473
    HEAP32[$AsyncCtx29 + 12 >> 2] = $134; //@line 6475
    HEAP32[$AsyncCtx29 + 16 >> 2] = $0; //@line 6477
    HEAP32[$AsyncCtx29 + 20 >> 2] = $2; //@line 6479
    HEAP32[$AsyncCtx29 + 24 >> 2] = $2; //@line 6481
    HEAP32[$AsyncCtx29 + 28 >> 2] = $4; //@line 6483
    sp = STACKTOP; //@line 6484
    STACKTOP = sp; //@line 6485
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx29 | 0); //@line 6487
    $$pre$i$i54 = HEAP32[$131 >> 2] | 0; //@line 6488
    HEAP32[$134 >> 2] = $$pre$i$i54; //@line 6490
    if (!$$pre$i$i54) {
     break;
    } else {
     $161 = $$pre$i$i54; //@line 6495
     label = 46; //@line 6496
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 46) {
   $162 = HEAP32[$161 + 8 >> 2] | 0; //@line 6505
   $AsyncCtx32 = _emscripten_alloc_async_context(24, sp) | 0; //@line 6506
   FUNCTION_TABLE_vi[$162 & 1023]($2); //@line 6507
   if (___async) {
    HEAP32[$AsyncCtx32 >> 2] = 195; //@line 6510
    HEAP32[$AsyncCtx32 + 4 >> 2] = $1; //@line 6512
    HEAP32[$AsyncCtx32 + 8 >> 2] = $0; //@line 6514
    HEAP32[$AsyncCtx32 + 12 >> 2] = $2; //@line 6516
    HEAP32[$AsyncCtx32 + 16 >> 2] = $2; //@line 6518
    HEAP32[$AsyncCtx32 + 20 >> 2] = $4; //@line 6520
    sp = STACKTOP; //@line 6521
    STACKTOP = sp; //@line 6522
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx32 | 0); //@line 6524
    break;
   }
  }
 } while (0);
 $168 = $2 + 12 | 0; //@line 6529
 HEAP32[$2 >> 2] = 196; //@line 6530
 HEAP32[$2 + 4 >> 2] = 0; //@line 6532
 HEAP32[$2 + 8 >> 2] = $0; //@line 6534
 HEAP32[$168 >> 2] = 824; //@line 6535
 $169 = $0 + 2432 | 0; //@line 6536
 do {
  if (($169 | 0) == ($2 | 0)) {
   $196 = 824; //@line 6540
   label = 58; //@line 6541
  } else {
   $171 = $0 + 2444 | 0; //@line 6543
   $172 = HEAP32[$171 >> 2] | 0; //@line 6544
   if (!$172) {
    $185 = 824; //@line 6547
   } else {
    $175 = HEAP32[$172 + 8 >> 2] | 0; //@line 6550
    $AsyncCtx35 = _emscripten_alloc_async_context(32, sp) | 0; //@line 6551
    FUNCTION_TABLE_vi[$175 & 1023]($169); //@line 6552
    if (___async) {
     HEAP32[$AsyncCtx35 >> 2] = 197; //@line 6555
     HEAP32[$AsyncCtx35 + 4 >> 2] = $168; //@line 6557
     HEAP32[$AsyncCtx35 + 8 >> 2] = $171; //@line 6559
     HEAP32[$AsyncCtx35 + 12 >> 2] = $169; //@line 6561
     HEAP32[$AsyncCtx35 + 16 >> 2] = $2; //@line 6563
     HEAP32[$AsyncCtx35 + 20 >> 2] = $0; //@line 6565
     HEAP32[$AsyncCtx35 + 24 >> 2] = $1; //@line 6567
     HEAP32[$AsyncCtx35 + 28 >> 2] = $4; //@line 6569
     sp = STACKTOP; //@line 6570
     STACKTOP = sp; //@line 6571
     return;
    }
    _emscripten_free_async_context($AsyncCtx35 | 0); //@line 6573
    $$pre126 = HEAP32[$168 >> 2] | 0; //@line 6574
    if (!$$pre126) {
     HEAP32[$171 >> 2] = 0; //@line 6577
     break;
    } else {
     $185 = $$pre126; //@line 6580
    }
   }
   $186 = HEAP32[$185 + 4 >> 2] | 0; //@line 6584
   $AsyncCtx38 = _emscripten_alloc_async_context(28, sp) | 0; //@line 6585
   FUNCTION_TABLE_vii[$186 & 15]($169, $2); //@line 6586
   if (___async) {
    HEAP32[$AsyncCtx38 >> 2] = 198; //@line 6589
    HEAP32[$AsyncCtx38 + 4 >> 2] = $168; //@line 6591
    HEAP32[$AsyncCtx38 + 8 >> 2] = $171; //@line 6593
    HEAP32[$AsyncCtx38 + 12 >> 2] = $2; //@line 6595
    HEAP32[$AsyncCtx38 + 16 >> 2] = $0; //@line 6597
    HEAP32[$AsyncCtx38 + 20 >> 2] = $1; //@line 6599
    HEAP32[$AsyncCtx38 + 24 >> 2] = $4; //@line 6601
    sp = STACKTOP; //@line 6602
    STACKTOP = sp; //@line 6603
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx38 | 0); //@line 6605
    $$pre$i$i70 = HEAP32[$168 >> 2] | 0; //@line 6606
    HEAP32[$171 >> 2] = $$pre$i$i70; //@line 6608
    if (!$$pre$i$i70) {
     break;
    } else {
     $196 = $$pre$i$i70; //@line 6613
     label = 58; //@line 6614
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 58) {
   $197 = HEAP32[$196 + 8 >> 2] | 0; //@line 6623
   $AsyncCtx41 = _emscripten_alloc_async_context(20, sp) | 0; //@line 6624
   FUNCTION_TABLE_vi[$197 & 1023]($2); //@line 6625
   if (___async) {
    HEAP32[$AsyncCtx41 >> 2] = 199; //@line 6628
    HEAP32[$AsyncCtx41 + 4 >> 2] = $2; //@line 6630
    HEAP32[$AsyncCtx41 + 8 >> 2] = $0; //@line 6632
    HEAP32[$AsyncCtx41 + 12 >> 2] = $1; //@line 6634
    HEAP32[$AsyncCtx41 + 16 >> 2] = $4; //@line 6636
    sp = STACKTOP; //@line 6637
    STACKTOP = sp; //@line 6638
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx41 | 0); //@line 6640
    break;
   }
  }
 } while (0);
 __ZN7LoRaMac17bind_radio_driverER9LoRaRadio($0, $1); //@line 6645
 $204 = HEAP32[(HEAP32[$1 >> 2] | 0) + 72 >> 2] | 0; //@line 6648
 $AsyncCtx44 = _emscripten_alloc_async_context(16, sp) | 0; //@line 6649
 FUNCTION_TABLE_vi[$204 & 1023]($1); //@line 6650
 if (___async) {
  HEAP32[$AsyncCtx44 >> 2] = 200; //@line 6653
  HEAP32[$AsyncCtx44 + 4 >> 2] = $1; //@line 6655
  HEAP32[$AsyncCtx44 + 8 >> 2] = $4; //@line 6657
  HEAP32[$AsyncCtx44 + 12 >> 2] = $1; //@line 6659
  sp = STACKTOP; //@line 6660
  STACKTOP = sp; //@line 6661
  return;
 }
 _emscripten_free_async_context($AsyncCtx44 | 0); //@line 6663
 $209 = HEAP32[HEAP32[$1 >> 2] >> 2] | 0; //@line 6665
 $AsyncCtx47 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6666
 FUNCTION_TABLE_vii[$209 & 15]($1, $4); //@line 6667
 if (___async) {
  HEAP32[$AsyncCtx47 >> 2] = 201; //@line 6670
  HEAP32[$AsyncCtx47 + 4 >> 2] = $1; //@line 6672
  HEAP32[$AsyncCtx47 + 8 >> 2] = $1; //@line 6674
  sp = STACKTOP; //@line 6675
  STACKTOP = sp; //@line 6676
  return;
 }
 _emscripten_free_async_context($AsyncCtx47 | 0); //@line 6678
 $214 = HEAP32[(HEAP32[$1 >> 2] | 0) + 76 >> 2] | 0; //@line 6681
 $AsyncCtx50 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6682
 FUNCTION_TABLE_vi[$214 & 1023]($1); //@line 6683
 if (___async) {
  HEAP32[$AsyncCtx50 >> 2] = 202; //@line 6686
  sp = STACKTOP; //@line 6687
  STACKTOP = sp; //@line 6688
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx50 | 0); //@line 6690
  STACKTOP = sp; //@line 6691
  return;
 }
}
function _mbed_vtracef__async_cb($0) {
 $0 = $0 | 0;
 var $$ = 0, $$0$i = 0, $$0141 = 0, $$0142 = 0, $$0144 = 0, $$1$off0 = 0, $$1$off0$expand_i1_val = 0, $$1$off0$expand_i1_val18 = 0, $$1143 = 0, $$1145 = 0, $$1152 = 0, $$1152$ = 0, $$3154 = 0, $$5156 = 0, $$5156$ = 0, $$expand_i1_val = 0, $$lobit = 0, $$sink = 0, $10 = 0, $102 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $136 = 0, $14 = 0, $147 = 0, $148 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $163 = 0, $164 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $53 = 0, $57 = 0, $6 = 0, $62 = 0, $73 = 0, $74 = 0, $78 = 0, $79 = 0, $8 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $89 = 0, $91 = 0, $95 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $extract$t159 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 30258
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30260
 $4 = HEAP8[$0 + 8 >> 0] | 0; //@line 30262
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30264
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30266
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30268
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30270
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 30272
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 30274
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 30276
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 30278
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 30280
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 30282
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 30284
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 30286
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 30288
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 30290
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 30292
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 30294
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 30296
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 30300
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 30302
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 30304
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 30306
 HEAP32[178] = (HEAP32[178] | 0) + 1; //@line 30311
 $53 = HEAP32[167] | 0; //@line 30312
 do {
  if ($53 | 0) {
   HEAP8[$53 >> 0] = 0; //@line 30316
   do {
    if ($4 << 24 >> 24 > -1 & ($2 | 0) != 0) {
     $57 = HEAP32[164] | 0; //@line 30322
     if (HEAP8[$57 >> 0] | 0) {
      if (_strstr($57, $2) | 0) {
       $$0$i = 1; //@line 30329
       break;
      }
     }
     $62 = HEAP32[165] | 0; //@line 30333
     if (!(HEAP8[$62 >> 0] | 0)) {
      label = 9; //@line 30337
     } else {
      if (!(_strstr($62, $2) | 0)) {
       $$0$i = 1; //@line 30342
      } else {
       label = 9; //@line 30344
      }
     }
    } else {
     label = 9; //@line 30348
    }
   } while (0);
   if ((label | 0) == 9) {
    $$0$i = 0; //@line 30352
   }
   if (!((HEAP32[174] | 0) != 0 & ((($2 | 0) == 0 | (($10 | 0) == 0 | $$0$i)) ^ 1))) {
    HEAP32[171] = HEAP32[169]; //@line 30364
    break;
   }
   $73 = HEAPU8[652] | 0; //@line 30368
   $74 = $4 & 255; //@line 30369
   if ($74 & 31 & $73 | 0) {
    $78 = $73 & 64; //@line 30374
    $$lobit = $78 >>> 6; //@line 30375
    $79 = $$lobit & 255; //@line 30376
    $83 = ($73 & 32 | 0) == 0; //@line 30380
    $84 = HEAP32[168] | 0; //@line 30381
    $85 = HEAP32[167] | 0; //@line 30382
    $86 = $4 << 24 >> 24 == 1; //@line 30383
    if ($86 | ($73 & 128 | 0) != 0) {
     $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 30386
     _vsnprintf($85, $84, $10, $12) | 0; //@line 30387
     if (___async) {
      HEAP32[$ReallocAsyncCtx12 >> 2] = 142; //@line 30390
      $87 = $ReallocAsyncCtx12 + 4 | 0; //@line 30391
      $$expand_i1_val = $86 & 1; //@line 30392
      HEAP8[$87 >> 0] = $$expand_i1_val; //@line 30393
      sp = STACKTOP; //@line 30394
      return;
     }
     ___async_unwind = 0; //@line 30397
     HEAP32[$ReallocAsyncCtx12 >> 2] = 142; //@line 30398
     $87 = $ReallocAsyncCtx12 + 4 | 0; //@line 30399
     $$expand_i1_val = $86 & 1; //@line 30400
     HEAP8[$87 >> 0] = $$expand_i1_val; //@line 30401
     sp = STACKTOP; //@line 30402
     return;
    }
    if (!$78) {
     $$1$off0 = ($$lobit | 0) != 0; //@line 30408
     $$1143 = $85; //@line 30408
     $$1145 = $84; //@line 30408
     $$3154 = 0; //@line 30408
     label = 28; //@line 30409
    } else {
     if ($83) {
      $$0142 = $85; //@line 30412
      $$0144 = $84; //@line 30412
     } else {
      $89 = _snprintf($85, $84, 11958, $38) | 0; //@line 30414
      $$ = ($89 | 0) >= ($84 | 0) ? 0 : $89; //@line 30416
      $91 = ($$ | 0) > 0; //@line 30417
      $$0142 = $91 ? $85 + $$ | 0 : $85; //@line 30422
      $$0144 = $84 - ($91 ? $$ : 0) | 0; //@line 30422
     }
     if (($$0144 | 0) > 0) {
      $95 = $74 + -2 | 0; //@line 30426
      switch ($95 >>> 1 | $95 << 31 | 0) {
      case 0:
       {
        $$sink = 11976; //@line 30432
        label = 25; //@line 30433
        break;
       }
      case 1:
       {
        $$sink = 11982; //@line 30437
        label = 25; //@line 30438
        break;
       }
      case 3:
       {
        $$sink = 11970; //@line 30442
        label = 25; //@line 30443
        break;
       }
      case 7:
       {
        $$sink = 11964; //@line 30447
        label = 25; //@line 30448
        break;
       }
      default:
       {
        $$0141 = 0; //@line 30452
        $$1152 = 0; //@line 30452
       }
      }
      if ((label | 0) == 25) {
       HEAP32[$48 >> 2] = $$sink; //@line 30456
       $$0141 = $79 & 1; //@line 30459
       $$1152 = _snprintf($$0142, $$0144, 11988, $48) | 0; //@line 30459
      }
      $$1152$ = ($$1152 | 0) < ($$0144 | 0) ? $$1152 : 0; //@line 30462
      $extract$t159 = $$0141 << 24 >> 24 != 0; //@line 30464
      if (($$1152$ | 0) > 0) {
       $102 = $$0141 << 24 >> 24 == 0; //@line 30466
       $$1$off0 = $extract$t159; //@line 30471
       $$1143 = $102 ? $$0142 : $$0142 + $$1152$ | 0; //@line 30471
       $$1145 = $$0144 - ($102 ? 0 : $$1152$) | 0; //@line 30471
       $$3154 = $$1152; //@line 30471
       label = 28; //@line 30472
      } else {
       $$1$off0 = $extract$t159; //@line 30474
       $$1143 = $$0142; //@line 30474
       $$1145 = $$0144; //@line 30474
       $$3154 = $$1152$; //@line 30474
       label = 28; //@line 30475
      }
     }
    }
    if ((label | 0) == 28) {
     if (($$1145 | 0) > 0 & (HEAP32[172] | 0) != 0) {
      HEAP32[$46 >> 2] = HEAP32[$12 >> 2]; //@line 30486
      $ReallocAsyncCtx11 = _emscripten_realloc_async_context(104) | 0; //@line 30487
      $108 = _vsnprintf(0, 0, $10, $46) | 0; //@line 30488
      if (___async) {
       HEAP32[$ReallocAsyncCtx11 >> 2] = 146; //@line 30491
       $109 = $ReallocAsyncCtx11 + 4 | 0; //@line 30492
       $$1$off0$expand_i1_val = $$1$off0 & 1; //@line 30493
       HEAP8[$109 >> 0] = $$1$off0$expand_i1_val; //@line 30494
       $110 = $ReallocAsyncCtx11 + 8 | 0; //@line 30495
       HEAP32[$110 >> 2] = $6; //@line 30496
       $111 = $ReallocAsyncCtx11 + 12 | 0; //@line 30497
       HEAP32[$111 >> 2] = $8; //@line 30498
       $112 = $ReallocAsyncCtx11 + 16 | 0; //@line 30499
       HEAP32[$112 >> 2] = $42; //@line 30500
       $113 = $ReallocAsyncCtx11 + 20 | 0; //@line 30501
       HEAP32[$113 >> 2] = $44; //@line 30502
       $114 = $ReallocAsyncCtx11 + 24 | 0; //@line 30503
       HEAP32[$114 >> 2] = $$1143; //@line 30504
       $115 = $ReallocAsyncCtx11 + 28 | 0; //@line 30505
       HEAP32[$115 >> 2] = $$1145; //@line 30506
       $116 = $ReallocAsyncCtx11 + 32 | 0; //@line 30507
       HEAP32[$116 >> 2] = $74; //@line 30508
       $117 = $ReallocAsyncCtx11 + 36 | 0; //@line 30509
       HEAP32[$117 >> 2] = $14; //@line 30510
       $118 = $ReallocAsyncCtx11 + 40 | 0; //@line 30511
       HEAP32[$118 >> 2] = $2; //@line 30512
       $119 = $ReallocAsyncCtx11 + 44 | 0; //@line 30513
       HEAP32[$119 >> 2] = $16; //@line 30514
       $120 = $ReallocAsyncCtx11 + 48 | 0; //@line 30515
       HEAP32[$120 >> 2] = $18; //@line 30516
       $121 = $ReallocAsyncCtx11 + 52 | 0; //@line 30517
       HEAP32[$121 >> 2] = $20; //@line 30518
       $122 = $ReallocAsyncCtx11 + 56 | 0; //@line 30519
       HEAP32[$122 >> 2] = $22; //@line 30520
       $123 = $ReallocAsyncCtx11 + 60 | 0; //@line 30521
       HEAP32[$123 >> 2] = $24; //@line 30522
       $124 = $ReallocAsyncCtx11 + 64 | 0; //@line 30523
       HEAP32[$124 >> 2] = $26; //@line 30524
       $125 = $ReallocAsyncCtx11 + 68 | 0; //@line 30525
       HEAP32[$125 >> 2] = $28; //@line 30526
       $126 = $ReallocAsyncCtx11 + 72 | 0; //@line 30527
       HEAP32[$126 >> 2] = $30; //@line 30528
       $127 = $ReallocAsyncCtx11 + 76 | 0; //@line 30529
       HEAP32[$127 >> 2] = $32; //@line 30530
       $128 = $ReallocAsyncCtx11 + 80 | 0; //@line 30531
       HEAP32[$128 >> 2] = $10; //@line 30532
       $129 = $ReallocAsyncCtx11 + 84 | 0; //@line 30533
       HEAP32[$129 >> 2] = $12; //@line 30534
       $130 = $ReallocAsyncCtx11 + 88 | 0; //@line 30535
       HEAP32[$130 >> 2] = $34; //@line 30536
       $131 = $ReallocAsyncCtx11 + 92 | 0; //@line 30537
       HEAP32[$131 >> 2] = $36; //@line 30538
       $132 = $ReallocAsyncCtx11 + 96 | 0; //@line 30539
       HEAP32[$132 >> 2] = $46; //@line 30540
       $133 = $ReallocAsyncCtx11 + 100 | 0; //@line 30541
       HEAP32[$133 >> 2] = $$3154; //@line 30542
       sp = STACKTOP; //@line 30543
       return;
      }
      HEAP32[___async_retval >> 2] = $108; //@line 30547
      ___async_unwind = 0; //@line 30548
      HEAP32[$ReallocAsyncCtx11 >> 2] = 146; //@line 30549
      $109 = $ReallocAsyncCtx11 + 4 | 0; //@line 30550
      $$1$off0$expand_i1_val = $$1$off0 & 1; //@line 30551
      HEAP8[$109 >> 0] = $$1$off0$expand_i1_val; //@line 30552
      $110 = $ReallocAsyncCtx11 + 8 | 0; //@line 30553
      HEAP32[$110 >> 2] = $6; //@line 30554
      $111 = $ReallocAsyncCtx11 + 12 | 0; //@line 30555
      HEAP32[$111 >> 2] = $8; //@line 30556
      $112 = $ReallocAsyncCtx11 + 16 | 0; //@line 30557
      HEAP32[$112 >> 2] = $42; //@line 30558
      $113 = $ReallocAsyncCtx11 + 20 | 0; //@line 30559
      HEAP32[$113 >> 2] = $44; //@line 30560
      $114 = $ReallocAsyncCtx11 + 24 | 0; //@line 30561
      HEAP32[$114 >> 2] = $$1143; //@line 30562
      $115 = $ReallocAsyncCtx11 + 28 | 0; //@line 30563
      HEAP32[$115 >> 2] = $$1145; //@line 30564
      $116 = $ReallocAsyncCtx11 + 32 | 0; //@line 30565
      HEAP32[$116 >> 2] = $74; //@line 30566
      $117 = $ReallocAsyncCtx11 + 36 | 0; //@line 30567
      HEAP32[$117 >> 2] = $14; //@line 30568
      $118 = $ReallocAsyncCtx11 + 40 | 0; //@line 30569
      HEAP32[$118 >> 2] = $2; //@line 30570
      $119 = $ReallocAsyncCtx11 + 44 | 0; //@line 30571
      HEAP32[$119 >> 2] = $16; //@line 30572
      $120 = $ReallocAsyncCtx11 + 48 | 0; //@line 30573
      HEAP32[$120 >> 2] = $18; //@line 30574
      $121 = $ReallocAsyncCtx11 + 52 | 0; //@line 30575
      HEAP32[$121 >> 2] = $20; //@line 30576
      $122 = $ReallocAsyncCtx11 + 56 | 0; //@line 30577
      HEAP32[$122 >> 2] = $22; //@line 30578
      $123 = $ReallocAsyncCtx11 + 60 | 0; //@line 30579
      HEAP32[$123 >> 2] = $24; //@line 30580
      $124 = $ReallocAsyncCtx11 + 64 | 0; //@line 30581
      HEAP32[$124 >> 2] = $26; //@line 30582
      $125 = $ReallocAsyncCtx11 + 68 | 0; //@line 30583
      HEAP32[$125 >> 2] = $28; //@line 30584
      $126 = $ReallocAsyncCtx11 + 72 | 0; //@line 30585
      HEAP32[$126 >> 2] = $30; //@line 30586
      $127 = $ReallocAsyncCtx11 + 76 | 0; //@line 30587
      HEAP32[$127 >> 2] = $32; //@line 30588
      $128 = $ReallocAsyncCtx11 + 80 | 0; //@line 30589
      HEAP32[$128 >> 2] = $10; //@line 30590
      $129 = $ReallocAsyncCtx11 + 84 | 0; //@line 30591
      HEAP32[$129 >> 2] = $12; //@line 30592
      $130 = $ReallocAsyncCtx11 + 88 | 0; //@line 30593
      HEAP32[$130 >> 2] = $34; //@line 30594
      $131 = $ReallocAsyncCtx11 + 92 | 0; //@line 30595
      HEAP32[$131 >> 2] = $36; //@line 30596
      $132 = $ReallocAsyncCtx11 + 96 | 0; //@line 30597
      HEAP32[$132 >> 2] = $46; //@line 30598
      $133 = $ReallocAsyncCtx11 + 100 | 0; //@line 30599
      HEAP32[$133 >> 2] = $$3154; //@line 30600
      sp = STACKTOP; //@line 30601
      return;
     }
     if (($$1145 | 0) > 0) {
      $136 = $74 + -2 | 0; //@line 30606
      switch ($136 >>> 1 | $136 << 31 | 0) {
      case 0:
       {
        HEAP32[$14 >> 2] = $2; //@line 30612
        $$5156 = _snprintf($$1143, $$1145, 11991, $14) | 0; //@line 30614
        break;
       }
      case 1:
       {
        HEAP32[$18 >> 2] = $2; //@line 30618
        $$5156 = _snprintf($$1143, $$1145, 12006, $18) | 0; //@line 30620
        break;
       }
      case 3:
       {
        HEAP32[$22 >> 2] = $2; //@line 30624
        $$5156 = _snprintf($$1143, $$1145, 12021, $22) | 0; //@line 30626
        break;
       }
      case 7:
       {
        HEAP32[$26 >> 2] = $2; //@line 30630
        $$5156 = _snprintf($$1143, $$1145, 12036, $26) | 0; //@line 30632
        break;
       }
      default:
       {
        $$5156 = _snprintf($$1143, $$1145, 12051, $30) | 0; //@line 30637
       }
      }
      $$5156$ = ($$5156 | 0) < ($$1145 | 0) ? $$5156 : 0; //@line 30641
      $147 = $$1143 + $$5156$ | 0; //@line 30643
      $148 = $$1145 - $$5156$ | 0; //@line 30644
      if (($$5156$ | 0) > 0 & ($148 | 0) > 0) {
       $ReallocAsyncCtx10 = _emscripten_realloc_async_context(32) | 0; //@line 30648
       $150 = _vsnprintf($147, $148, $10, $12) | 0; //@line 30649
       if (___async) {
        HEAP32[$ReallocAsyncCtx10 >> 2] = 148; //@line 30652
        $151 = $ReallocAsyncCtx10 + 4 | 0; //@line 30653
        $$1$off0$expand_i1_val18 = $$1$off0 & 1; //@line 30654
        HEAP8[$151 >> 0] = $$1$off0$expand_i1_val18; //@line 30655
        $152 = $ReallocAsyncCtx10 + 8 | 0; //@line 30656
        HEAP32[$152 >> 2] = $6; //@line 30657
        $153 = $ReallocAsyncCtx10 + 12 | 0; //@line 30658
        HEAP32[$153 >> 2] = $8; //@line 30659
        $154 = $ReallocAsyncCtx10 + 16 | 0; //@line 30660
        HEAP32[$154 >> 2] = $42; //@line 30661
        $155 = $ReallocAsyncCtx10 + 20 | 0; //@line 30662
        HEAP32[$155 >> 2] = $44; //@line 30663
        $156 = $ReallocAsyncCtx10 + 24 | 0; //@line 30664
        HEAP32[$156 >> 2] = $148; //@line 30665
        $157 = $ReallocAsyncCtx10 + 28 | 0; //@line 30666
        HEAP32[$157 >> 2] = $147; //@line 30667
        sp = STACKTOP; //@line 30668
        return;
       }
       HEAP32[___async_retval >> 2] = $150; //@line 30672
       ___async_unwind = 0; //@line 30673
       HEAP32[$ReallocAsyncCtx10 >> 2] = 148; //@line 30674
       $151 = $ReallocAsyncCtx10 + 4 | 0; //@line 30675
       $$1$off0$expand_i1_val18 = $$1$off0 & 1; //@line 30676
       HEAP8[$151 >> 0] = $$1$off0$expand_i1_val18; //@line 30677
       $152 = $ReallocAsyncCtx10 + 8 | 0; //@line 30678
       HEAP32[$152 >> 2] = $6; //@line 30679
       $153 = $ReallocAsyncCtx10 + 12 | 0; //@line 30680
       HEAP32[$153 >> 2] = $8; //@line 30681
       $154 = $ReallocAsyncCtx10 + 16 | 0; //@line 30682
       HEAP32[$154 >> 2] = $42; //@line 30683
       $155 = $ReallocAsyncCtx10 + 20 | 0; //@line 30684
       HEAP32[$155 >> 2] = $44; //@line 30685
       $156 = $ReallocAsyncCtx10 + 24 | 0; //@line 30686
       HEAP32[$156 >> 2] = $148; //@line 30687
       $157 = $ReallocAsyncCtx10 + 28 | 0; //@line 30688
       HEAP32[$157 >> 2] = $147; //@line 30689
       sp = STACKTOP; //@line 30690
       return;
      }
     }
    }
    $159 = HEAP32[174] | 0; //@line 30695
    $160 = HEAP32[167] | 0; //@line 30696
    $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 30697
    FUNCTION_TABLE_vi[$159 & 1023]($160); //@line 30698
    if (___async) {
     HEAP32[$ReallocAsyncCtx7 >> 2] = 150; //@line 30701
     sp = STACKTOP; //@line 30702
     return;
    }
    ___async_unwind = 0; //@line 30705
    HEAP32[$ReallocAsyncCtx7 >> 2] = 150; //@line 30706
    sp = STACKTOP; //@line 30707
    return;
   }
  }
 } while (0);
 $161 = HEAP32[177] | 0; //@line 30712
 if (!$161) {
  return;
 }
 $163 = HEAP32[178] | 0; //@line 30717
 HEAP32[178] = 0; //@line 30718
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 30719
 FUNCTION_TABLE_v[$161 & 15](); //@line 30720
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 151; //@line 30723
  $164 = $ReallocAsyncCtx8 + 4 | 0; //@line 30724
  HEAP32[$164 >> 2] = $163; //@line 30725
  sp = STACKTOP; //@line 30726
  return;
 }
 ___async_unwind = 0; //@line 30729
 HEAP32[$ReallocAsyncCtx8 >> 2] = 151; //@line 30730
 $164 = $ReallocAsyncCtx8 + 4 | 0; //@line 30731
 HEAP32[$164 >> 2] = $163; //@line 30732
 sp = STACKTOP; //@line 30733
 return;
}
function _free($0) {
 $0 = $0 | 0;
 var $$0212$i = 0, $$0212$in$i = 0, $$0383 = 0, $$0384 = 0, $$0396 = 0, $$0403 = 0, $$1 = 0, $$1382 = 0, $$1387 = 0, $$1390 = 0, $$1398 = 0, $$1402 = 0, $$2 = 0, $$3 = 0, $$3400 = 0, $$pre$phi442Z2D = 0, $$pre$phi444Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $105 = 0, $106 = 0, $114 = 0, $115 = 0, $116 = 0, $124 = 0, $13 = 0, $132 = 0, $137 = 0, $138 = 0, $141 = 0, $143 = 0, $145 = 0, $16 = 0, $160 = 0, $165 = 0, $167 = 0, $17 = 0, $170 = 0, $173 = 0, $176 = 0, $179 = 0, $180 = 0, $181 = 0, $183 = 0, $185 = 0, $186 = 0, $188 = 0, $189 = 0, $195 = 0, $196 = 0, $2 = 0, $21 = 0, $210 = 0, $213 = 0, $214 = 0, $220 = 0, $235 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $244 = 0, $245 = 0, $251 = 0, $256 = 0, $257 = 0, $26 = 0, $260 = 0, $262 = 0, $265 = 0, $270 = 0, $276 = 0, $28 = 0, $280 = 0, $281 = 0, $299 = 0, $3 = 0, $301 = 0, $308 = 0, $309 = 0, $310 = 0, $319 = 0, $41 = 0, $46 = 0, $48 = 0, $51 = 0, $53 = 0, $56 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $7 = 0, $74 = 0, $75 = 0, $89 = 0, $9 = 0, $92 = 0, $93 = 0, $99 = 0, label = 0;
 if (!$0) {
  return;
 }
 $2 = $0 + -8 | 0; //@line 10565
 $3 = HEAP32[5973] | 0; //@line 10566
 if ($2 >>> 0 < $3 >>> 0) {
  _abort(); //@line 10569
 }
 $6 = HEAP32[$0 + -4 >> 2] | 0; //@line 10573
 $7 = $6 & 3; //@line 10574
 if (($7 | 0) == 1) {
  _abort(); //@line 10577
 }
 $9 = $6 & -8; //@line 10580
 $10 = $2 + $9 | 0; //@line 10581
 L10 : do {
  if (!($6 & 1)) {
   $13 = HEAP32[$2 >> 2] | 0; //@line 10586
   if (!$7) {
    return;
   }
   $16 = $2 + (0 - $13) | 0; //@line 10592
   $17 = $13 + $9 | 0; //@line 10593
   if ($16 >>> 0 < $3 >>> 0) {
    _abort(); //@line 10596
   }
   if ((HEAP32[5974] | 0) == ($16 | 0)) {
    $105 = $10 + 4 | 0; //@line 10602
    $106 = HEAP32[$105 >> 2] | 0; //@line 10603
    if (($106 & 3 | 0) != 3) {
     $$1 = $16; //@line 10607
     $$1382 = $17; //@line 10607
     $114 = $16; //@line 10607
     break;
    }
    HEAP32[5971] = $17; //@line 10610
    HEAP32[$105 >> 2] = $106 & -2; //@line 10612
    HEAP32[$16 + 4 >> 2] = $17 | 1; //@line 10615
    HEAP32[$16 + $17 >> 2] = $17; //@line 10617
    return;
   }
   $21 = $13 >>> 3; //@line 10620
   if ($13 >>> 0 < 256) {
    $24 = HEAP32[$16 + 8 >> 2] | 0; //@line 10624
    $26 = HEAP32[$16 + 12 >> 2] | 0; //@line 10626
    $28 = 23916 + ($21 << 1 << 2) | 0; //@line 10628
    if (($24 | 0) != ($28 | 0)) {
     if ($3 >>> 0 > $24 >>> 0) {
      _abort(); //@line 10633
     }
     if ((HEAP32[$24 + 12 >> 2] | 0) != ($16 | 0)) {
      _abort(); //@line 10640
     }
    }
    if (($26 | 0) == ($24 | 0)) {
     HEAP32[5969] = HEAP32[5969] & ~(1 << $21); //@line 10650
     $$1 = $16; //@line 10651
     $$1382 = $17; //@line 10651
     $114 = $16; //@line 10651
     break;
    }
    if (($26 | 0) == ($28 | 0)) {
     $$pre$phi444Z2D = $26 + 8 | 0; //@line 10657
    } else {
     if ($3 >>> 0 > $26 >>> 0) {
      _abort(); //@line 10661
     }
     $41 = $26 + 8 | 0; //@line 10664
     if ((HEAP32[$41 >> 2] | 0) == ($16 | 0)) {
      $$pre$phi444Z2D = $41; //@line 10668
     } else {
      _abort(); //@line 10670
     }
    }
    HEAP32[$24 + 12 >> 2] = $26; //@line 10675
    HEAP32[$$pre$phi444Z2D >> 2] = $24; //@line 10676
    $$1 = $16; //@line 10677
    $$1382 = $17; //@line 10677
    $114 = $16; //@line 10677
    break;
   }
   $46 = HEAP32[$16 + 24 >> 2] | 0; //@line 10681
   $48 = HEAP32[$16 + 12 >> 2] | 0; //@line 10683
   do {
    if (($48 | 0) == ($16 | 0)) {
     $59 = $16 + 16 | 0; //@line 10687
     $60 = $59 + 4 | 0; //@line 10688
     $61 = HEAP32[$60 >> 2] | 0; //@line 10689
     if (!$61) {
      $63 = HEAP32[$59 >> 2] | 0; //@line 10692
      if (!$63) {
       $$3 = 0; //@line 10695
       break;
      } else {
       $$1387 = $63; //@line 10698
       $$1390 = $59; //@line 10698
      }
     } else {
      $$1387 = $61; //@line 10701
      $$1390 = $60; //@line 10701
     }
     while (1) {
      $65 = $$1387 + 20 | 0; //@line 10704
      $66 = HEAP32[$65 >> 2] | 0; //@line 10705
      if ($66 | 0) {
       $$1387 = $66; //@line 10708
       $$1390 = $65; //@line 10708
       continue;
      }
      $68 = $$1387 + 16 | 0; //@line 10711
      $69 = HEAP32[$68 >> 2] | 0; //@line 10712
      if (!$69) {
       break;
      } else {
       $$1387 = $69; //@line 10717
       $$1390 = $68; //@line 10717
      }
     }
     if ($3 >>> 0 > $$1390 >>> 0) {
      _abort(); //@line 10722
     } else {
      HEAP32[$$1390 >> 2] = 0; //@line 10725
      $$3 = $$1387; //@line 10726
      break;
     }
    } else {
     $51 = HEAP32[$16 + 8 >> 2] | 0; //@line 10731
     if ($3 >>> 0 > $51 >>> 0) {
      _abort(); //@line 10734
     }
     $53 = $51 + 12 | 0; //@line 10737
     if ((HEAP32[$53 >> 2] | 0) != ($16 | 0)) {
      _abort(); //@line 10741
     }
     $56 = $48 + 8 | 0; //@line 10744
     if ((HEAP32[$56 >> 2] | 0) == ($16 | 0)) {
      HEAP32[$53 >> 2] = $48; //@line 10748
      HEAP32[$56 >> 2] = $51; //@line 10749
      $$3 = $48; //@line 10750
      break;
     } else {
      _abort(); //@line 10753
     }
    }
   } while (0);
   if (!$46) {
    $$1 = $16; //@line 10760
    $$1382 = $17; //@line 10760
    $114 = $16; //@line 10760
   } else {
    $74 = HEAP32[$16 + 28 >> 2] | 0; //@line 10763
    $75 = 24180 + ($74 << 2) | 0; //@line 10764
    do {
     if ((HEAP32[$75 >> 2] | 0) == ($16 | 0)) {
      HEAP32[$75 >> 2] = $$3; //@line 10769
      if (!$$3) {
       HEAP32[5970] = HEAP32[5970] & ~(1 << $74); //@line 10776
       $$1 = $16; //@line 10777
       $$1382 = $17; //@line 10777
       $114 = $16; //@line 10777
       break L10;
      }
     } else {
      if ((HEAP32[5973] | 0) >>> 0 > $46 >>> 0) {
       _abort(); //@line 10784
      } else {
       HEAP32[$46 + 16 + (((HEAP32[$46 + 16 >> 2] | 0) != ($16 | 0) & 1) << 2) >> 2] = $$3; //@line 10792
       if (!$$3) {
        $$1 = $16; //@line 10795
        $$1382 = $17; //@line 10795
        $114 = $16; //@line 10795
        break L10;
       } else {
        break;
       }
      }
     }
    } while (0);
    $89 = HEAP32[5973] | 0; //@line 10803
    if ($89 >>> 0 > $$3 >>> 0) {
     _abort(); //@line 10806
    }
    HEAP32[$$3 + 24 >> 2] = $46; //@line 10810
    $92 = $16 + 16 | 0; //@line 10811
    $93 = HEAP32[$92 >> 2] | 0; //@line 10812
    do {
     if ($93 | 0) {
      if ($89 >>> 0 > $93 >>> 0) {
       _abort(); //@line 10818
      } else {
       HEAP32[$$3 + 16 >> 2] = $93; //@line 10822
       HEAP32[$93 + 24 >> 2] = $$3; //@line 10824
       break;
      }
     }
    } while (0);
    $99 = HEAP32[$92 + 4 >> 2] | 0; //@line 10830
    if (!$99) {
     $$1 = $16; //@line 10833
     $$1382 = $17; //@line 10833
     $114 = $16; //@line 10833
    } else {
     if ((HEAP32[5973] | 0) >>> 0 > $99 >>> 0) {
      _abort(); //@line 10838
     } else {
      HEAP32[$$3 + 20 >> 2] = $99; //@line 10842
      HEAP32[$99 + 24 >> 2] = $$3; //@line 10844
      $$1 = $16; //@line 10845
      $$1382 = $17; //@line 10845
      $114 = $16; //@line 10845
      break;
     }
    }
   }
  } else {
   $$1 = $2; //@line 10851
   $$1382 = $9; //@line 10851
   $114 = $2; //@line 10851
  }
 } while (0);
 if ($114 >>> 0 >= $10 >>> 0) {
  _abort(); //@line 10856
 }
 $115 = $10 + 4 | 0; //@line 10859
 $116 = HEAP32[$115 >> 2] | 0; //@line 10860
 if (!($116 & 1)) {
  _abort(); //@line 10864
 }
 if (!($116 & 2)) {
  if ((HEAP32[5975] | 0) == ($10 | 0)) {
   $124 = (HEAP32[5972] | 0) + $$1382 | 0; //@line 10874
   HEAP32[5972] = $124; //@line 10875
   HEAP32[5975] = $$1; //@line 10876
   HEAP32[$$1 + 4 >> 2] = $124 | 1; //@line 10879
   if (($$1 | 0) != (HEAP32[5974] | 0)) {
    return;
   }
   HEAP32[5974] = 0; //@line 10885
   HEAP32[5971] = 0; //@line 10886
   return;
  }
  if ((HEAP32[5974] | 0) == ($10 | 0)) {
   $132 = (HEAP32[5971] | 0) + $$1382 | 0; //@line 10893
   HEAP32[5971] = $132; //@line 10894
   HEAP32[5974] = $114; //@line 10895
   HEAP32[$$1 + 4 >> 2] = $132 | 1; //@line 10898
   HEAP32[$114 + $132 >> 2] = $132; //@line 10900
   return;
  }
  $137 = ($116 & -8) + $$1382 | 0; //@line 10904
  $138 = $116 >>> 3; //@line 10905
  L108 : do {
   if ($116 >>> 0 < 256) {
    $141 = HEAP32[$10 + 8 >> 2] | 0; //@line 10910
    $143 = HEAP32[$10 + 12 >> 2] | 0; //@line 10912
    $145 = 23916 + ($138 << 1 << 2) | 0; //@line 10914
    if (($141 | 0) != ($145 | 0)) {
     if ((HEAP32[5973] | 0) >>> 0 > $141 >>> 0) {
      _abort(); //@line 10920
     }
     if ((HEAP32[$141 + 12 >> 2] | 0) != ($10 | 0)) {
      _abort(); //@line 10927
     }
    }
    if (($143 | 0) == ($141 | 0)) {
     HEAP32[5969] = HEAP32[5969] & ~(1 << $138); //@line 10937
     break;
    }
    if (($143 | 0) == ($145 | 0)) {
     $$pre$phi442Z2D = $143 + 8 | 0; //@line 10943
    } else {
     if ((HEAP32[5973] | 0) >>> 0 > $143 >>> 0) {
      _abort(); //@line 10948
     }
     $160 = $143 + 8 | 0; //@line 10951
     if ((HEAP32[$160 >> 2] | 0) == ($10 | 0)) {
      $$pre$phi442Z2D = $160; //@line 10955
     } else {
      _abort(); //@line 10957
     }
    }
    HEAP32[$141 + 12 >> 2] = $143; //@line 10962
    HEAP32[$$pre$phi442Z2D >> 2] = $141; //@line 10963
   } else {
    $165 = HEAP32[$10 + 24 >> 2] | 0; //@line 10966
    $167 = HEAP32[$10 + 12 >> 2] | 0; //@line 10968
    do {
     if (($167 | 0) == ($10 | 0)) {
      $179 = $10 + 16 | 0; //@line 10972
      $180 = $179 + 4 | 0; //@line 10973
      $181 = HEAP32[$180 >> 2] | 0; //@line 10974
      if (!$181) {
       $183 = HEAP32[$179 >> 2] | 0; //@line 10977
       if (!$183) {
        $$3400 = 0; //@line 10980
        break;
       } else {
        $$1398 = $183; //@line 10983
        $$1402 = $179; //@line 10983
       }
      } else {
       $$1398 = $181; //@line 10986
       $$1402 = $180; //@line 10986
      }
      while (1) {
       $185 = $$1398 + 20 | 0; //@line 10989
       $186 = HEAP32[$185 >> 2] | 0; //@line 10990
       if ($186 | 0) {
        $$1398 = $186; //@line 10993
        $$1402 = $185; //@line 10993
        continue;
       }
       $188 = $$1398 + 16 | 0; //@line 10996
       $189 = HEAP32[$188 >> 2] | 0; //@line 10997
       if (!$189) {
        break;
       } else {
        $$1398 = $189; //@line 11002
        $$1402 = $188; //@line 11002
       }
      }
      if ((HEAP32[5973] | 0) >>> 0 > $$1402 >>> 0) {
       _abort(); //@line 11008
      } else {
       HEAP32[$$1402 >> 2] = 0; //@line 11011
       $$3400 = $$1398; //@line 11012
       break;
      }
     } else {
      $170 = HEAP32[$10 + 8 >> 2] | 0; //@line 11017
      if ((HEAP32[5973] | 0) >>> 0 > $170 >>> 0) {
       _abort(); //@line 11021
      }
      $173 = $170 + 12 | 0; //@line 11024
      if ((HEAP32[$173 >> 2] | 0) != ($10 | 0)) {
       _abort(); //@line 11028
      }
      $176 = $167 + 8 | 0; //@line 11031
      if ((HEAP32[$176 >> 2] | 0) == ($10 | 0)) {
       HEAP32[$173 >> 2] = $167; //@line 11035
       HEAP32[$176 >> 2] = $170; //@line 11036
       $$3400 = $167; //@line 11037
       break;
      } else {
       _abort(); //@line 11040
      }
     }
    } while (0);
    if ($165 | 0) {
     $195 = HEAP32[$10 + 28 >> 2] | 0; //@line 11048
     $196 = 24180 + ($195 << 2) | 0; //@line 11049
     do {
      if ((HEAP32[$196 >> 2] | 0) == ($10 | 0)) {
       HEAP32[$196 >> 2] = $$3400; //@line 11054
       if (!$$3400) {
        HEAP32[5970] = HEAP32[5970] & ~(1 << $195); //@line 11061
        break L108;
       }
      } else {
       if ((HEAP32[5973] | 0) >>> 0 > $165 >>> 0) {
        _abort(); //@line 11068
       } else {
        HEAP32[$165 + 16 + (((HEAP32[$165 + 16 >> 2] | 0) != ($10 | 0) & 1) << 2) >> 2] = $$3400; //@line 11076
        if (!$$3400) {
         break L108;
        } else {
         break;
        }
       }
      }
     } while (0);
     $210 = HEAP32[5973] | 0; //@line 11086
     if ($210 >>> 0 > $$3400 >>> 0) {
      _abort(); //@line 11089
     }
     HEAP32[$$3400 + 24 >> 2] = $165; //@line 11093
     $213 = $10 + 16 | 0; //@line 11094
     $214 = HEAP32[$213 >> 2] | 0; //@line 11095
     do {
      if ($214 | 0) {
       if ($210 >>> 0 > $214 >>> 0) {
        _abort(); //@line 11101
       } else {
        HEAP32[$$3400 + 16 >> 2] = $214; //@line 11105
        HEAP32[$214 + 24 >> 2] = $$3400; //@line 11107
        break;
       }
      }
     } while (0);
     $220 = HEAP32[$213 + 4 >> 2] | 0; //@line 11113
     if ($220 | 0) {
      if ((HEAP32[5973] | 0) >>> 0 > $220 >>> 0) {
       _abort(); //@line 11119
      } else {
       HEAP32[$$3400 + 20 >> 2] = $220; //@line 11123
       HEAP32[$220 + 24 >> 2] = $$3400; //@line 11125
       break;
      }
     }
    }
   }
  } while (0);
  HEAP32[$$1 + 4 >> 2] = $137 | 1; //@line 11134
  HEAP32[$114 + $137 >> 2] = $137; //@line 11136
  if (($$1 | 0) == (HEAP32[5974] | 0)) {
   HEAP32[5971] = $137; //@line 11140
   return;
  } else {
   $$2 = $137; //@line 11143
  }
 } else {
  HEAP32[$115 >> 2] = $116 & -2; //@line 11147
  HEAP32[$$1 + 4 >> 2] = $$1382 | 1; //@line 11150
  HEAP32[$114 + $$1382 >> 2] = $$1382; //@line 11152
  $$2 = $$1382; //@line 11153
 }
 $235 = $$2 >>> 3; //@line 11155
 if ($$2 >>> 0 < 256) {
  $238 = 23916 + ($235 << 1 << 2) | 0; //@line 11159
  $239 = HEAP32[5969] | 0; //@line 11160
  $240 = 1 << $235; //@line 11161
  if (!($239 & $240)) {
   HEAP32[5969] = $239 | $240; //@line 11166
   $$0403 = $238; //@line 11168
   $$pre$phiZ2D = $238 + 8 | 0; //@line 11168
  } else {
   $244 = $238 + 8 | 0; //@line 11170
   $245 = HEAP32[$244 >> 2] | 0; //@line 11171
   if ((HEAP32[5973] | 0) >>> 0 > $245 >>> 0) {
    _abort(); //@line 11175
   } else {
    $$0403 = $245; //@line 11178
    $$pre$phiZ2D = $244; //@line 11178
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$1; //@line 11181
  HEAP32[$$0403 + 12 >> 2] = $$1; //@line 11183
  HEAP32[$$1 + 8 >> 2] = $$0403; //@line 11185
  HEAP32[$$1 + 12 >> 2] = $238; //@line 11187
  return;
 }
 $251 = $$2 >>> 8; //@line 11190
 if (!$251) {
  $$0396 = 0; //@line 11193
 } else {
  if ($$2 >>> 0 > 16777215) {
   $$0396 = 31; //@line 11197
  } else {
   $256 = ($251 + 1048320 | 0) >>> 16 & 8; //@line 11201
   $257 = $251 << $256; //@line 11202
   $260 = ($257 + 520192 | 0) >>> 16 & 4; //@line 11205
   $262 = $257 << $260; //@line 11207
   $265 = ($262 + 245760 | 0) >>> 16 & 2; //@line 11210
   $270 = 14 - ($260 | $256 | $265) + ($262 << $265 >>> 15) | 0; //@line 11215
   $$0396 = $$2 >>> ($270 + 7 | 0) & 1 | $270 << 1; //@line 11221
  }
 }
 $276 = 24180 + ($$0396 << 2) | 0; //@line 11224
 HEAP32[$$1 + 28 >> 2] = $$0396; //@line 11226
 HEAP32[$$1 + 20 >> 2] = 0; //@line 11229
 HEAP32[$$1 + 16 >> 2] = 0; //@line 11230
 $280 = HEAP32[5970] | 0; //@line 11231
 $281 = 1 << $$0396; //@line 11232
 do {
  if (!($280 & $281)) {
   HEAP32[5970] = $280 | $281; //@line 11238
   HEAP32[$276 >> 2] = $$1; //@line 11239
   HEAP32[$$1 + 24 >> 2] = $276; //@line 11241
   HEAP32[$$1 + 12 >> 2] = $$1; //@line 11243
   HEAP32[$$1 + 8 >> 2] = $$1; //@line 11245
  } else {
   $$0383 = $$2 << (($$0396 | 0) == 31 ? 0 : 25 - ($$0396 >>> 1) | 0); //@line 11253
   $$0384 = HEAP32[$276 >> 2] | 0; //@line 11253
   while (1) {
    if ((HEAP32[$$0384 + 4 >> 2] & -8 | 0) == ($$2 | 0)) {
     label = 124; //@line 11260
     break;
    }
    $299 = $$0384 + 16 + ($$0383 >>> 31 << 2) | 0; //@line 11264
    $301 = HEAP32[$299 >> 2] | 0; //@line 11266
    if (!$301) {
     label = 121; //@line 11269
     break;
    } else {
     $$0383 = $$0383 << 1; //@line 11272
     $$0384 = $301; //@line 11272
    }
   }
   if ((label | 0) == 121) {
    if ((HEAP32[5973] | 0) >>> 0 > $299 >>> 0) {
     _abort(); //@line 11279
    } else {
     HEAP32[$299 >> 2] = $$1; //@line 11282
     HEAP32[$$1 + 24 >> 2] = $$0384; //@line 11284
     HEAP32[$$1 + 12 >> 2] = $$1; //@line 11286
     HEAP32[$$1 + 8 >> 2] = $$1; //@line 11288
     break;
    }
   } else if ((label | 0) == 124) {
    $308 = $$0384 + 8 | 0; //@line 11293
    $309 = HEAP32[$308 >> 2] | 0; //@line 11294
    $310 = HEAP32[5973] | 0; //@line 11295
    if ($310 >>> 0 <= $309 >>> 0 & $310 >>> 0 <= $$0384 >>> 0) {
     HEAP32[$309 + 12 >> 2] = $$1; //@line 11301
     HEAP32[$308 >> 2] = $$1; //@line 11302
     HEAP32[$$1 + 8 >> 2] = $309; //@line 11304
     HEAP32[$$1 + 12 >> 2] = $$0384; //@line 11306
     HEAP32[$$1 + 24 >> 2] = 0; //@line 11308
     break;
    } else {
     _abort(); //@line 11311
    }
   }
  }
 } while (0);
 $319 = (HEAP32[5977] | 0) + -1 | 0; //@line 11318
 HEAP32[5977] = $319; //@line 11319
 if (!$319) {
  $$0212$in$i = 24332; //@line 11322
 } else {
  return;
 }
 while (1) {
  $$0212$i = HEAP32[$$0212$in$i >> 2] | 0; //@line 11327
  if (!$$0212$i) {
   break;
  } else {
   $$0212$in$i = $$0212$i + 8 | 0; //@line 11333
  }
 }
 HEAP32[5977] = -1; //@line 11336
 return;
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$ = 0, $$058 = 0, $$059 = 0, $$062 = 0, $$06272 = 0, $$06273 = 0, $$064 = 0, $$06471 = 0, $$06575 = 0, $$06874 = 0, $$1 = 0, $$163 = 0, $$166 = 0, $$16670 = 0, $$267 = 0, $$3 = 0, $$pre$phiZ2D = 0, $101 = 0, $103 = 0, $109 = 0, $11 = 0, $115 = 0, $121 = 0, $135 = 0, $15 = 0, $156 = 0, $157 = 0, $170 = 0, $171 = 0, $172 = 0, $178 = 0, $179 = 0, $183 = 0, $185 = 0, $191 = 0, $192 = 0, $195 = 0, $197 = 0, $212 = 0, $219 = 0, $220 = 0, $221 = 0, $224 = 0, $242 = 0, $245 = 0, $246 = 0, $247 = 0, $258 = 0, $40 = 0, $6 = 0, $64 = 0, $7 = 0, $74 = 0, $76 = 0, $8 = 0, $82 = 0, $83 = 0, $89 = 0, $9 = 0, $91 = 0, $92 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 14213
 STACKTOP = STACKTOP + 16 | 0; //@line 14214
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14214
 $vararg_buffer1 = sp + 8 | 0; //@line 14215
 $vararg_buffer = sp; //@line 14216
 $6 = sp + 12 | 0; //@line 14217
 HEAP32[$6 >> 2] = 0; //@line 14218
 $7 = $0 + 1440 | 0; //@line 14219
 $8 = $0 + 1177 | 0; //@line 14220
 HEAP8[$8 >> 0] = 0; //@line 14221
 $9 = ($4 | 0) == 0; //@line 14222
 $$ = $9 ? 0 : $5; //@line 14223
 HEAP16[$7 >> 1] = $$; //@line 14224
 $11 = $0 + 1185 | 0; //@line 14226
 HEAP8[$11 >> 0] = HEAP8[$1 >> 0] | 0; //@line 14227
 L1 : do {
  switch ((HEAPU8[$1 >> 0] | 0) >>> 5 & 7) {
  case 0:
   {
    HEAP16[$7 >> 1] = 1; //@line 14234
    $15 = HEAP32[$0 + 1708 >> 2] | 0; //@line 14237
    HEAP8[$0 + 1193 >> 0] = HEAP8[$15 >> 0] | 0; //@line 14242
    HEAP8[$0 + 1192 >> 0] = HEAP8[$15 + 1 >> 0] | 0; //@line 14246
    HEAP8[$0 + 1191 >> 0] = HEAP8[$15 + 2 >> 0] | 0; //@line 14250
    HEAP8[$0 + 1190 >> 0] = HEAP8[$15 + 3 >> 0] | 0; //@line 14254
    HEAP8[$0 + 1189 >> 0] = HEAP8[$15 + 4 >> 0] | 0; //@line 14258
    HEAP8[$0 + 1188 >> 0] = HEAP8[$15 + 5 >> 0] | 0; //@line 14262
    HEAP8[$0 + 1187 >> 0] = HEAP8[$15 + 6 >> 0] | 0; //@line 14265
    HEAP8[$0 + 1186 >> 0] = HEAP8[$15 + 7 >> 0] | 0; //@line 14267
    HEAP16[$7 >> 1] = 9; //@line 14268
    $40 = HEAP32[$0 + 1704 >> 2] | 0; //@line 14271
    HEAP8[$0 + 1201 >> 0] = HEAP8[$40 >> 0] | 0; //@line 14276
    HEAP8[$0 + 1200 >> 0] = HEAP8[$40 + 1 >> 0] | 0; //@line 14280
    HEAP8[$0 + 1199 >> 0] = HEAP8[$40 + 2 >> 0] | 0; //@line 14284
    HEAP8[$0 + 1198 >> 0] = HEAP8[$40 + 3 >> 0] | 0; //@line 14288
    HEAP8[$0 + 1197 >> 0] = HEAP8[$40 + 4 >> 0] | 0; //@line 14292
    HEAP8[$0 + 1196 >> 0] = HEAP8[$40 + 5 >> 0] | 0; //@line 14296
    HEAP8[$0 + 1195 >> 0] = HEAP8[$40 + 6 >> 0] | 0; //@line 14299
    HEAP8[$0 + 1194 >> 0] = HEAP8[$40 + 7 >> 0] | 0; //@line 14301
    HEAP16[$7 >> 1] = 17; //@line 14302
    $AsyncCtx17 = _emscripten_alloc_async_context(36, sp) | 0; //@line 14304
    $64 = __ZN7LoRaPHY13get_radio_rngEv($0 + 4 | 0) | 0; //@line 14305
    if (___async) {
     HEAP32[$AsyncCtx17 >> 2] = 426; //@line 14308
     HEAP32[$AsyncCtx17 + 4 >> 2] = $0; //@line 14310
     HEAP32[$AsyncCtx17 + 8 >> 2] = $7; //@line 14312
     HEAP32[$AsyncCtx17 + 12 >> 2] = $11; //@line 14314
     HEAP32[$AsyncCtx17 + 16 >> 2] = $6; //@line 14316
     HEAP32[$AsyncCtx17 + 20 >> 2] = $6; //@line 14318
     HEAP8[$AsyncCtx17 + 24 >> 0] = $3; //@line 14320
     HEAP32[$AsyncCtx17 + 28 >> 2] = $vararg_buffer1; //@line 14322
     HEAP32[$AsyncCtx17 + 32 >> 2] = $vararg_buffer1; //@line 14324
     sp = STACKTOP; //@line 14325
     STACKTOP = sp; //@line 14326
     return 0; //@line 14326
    }
    _emscripten_free_async_context($AsyncCtx17 | 0); //@line 14328
    $74 = $0 + 1748 | 0; //@line 14330
    HEAP16[$74 >> 1] = $64; //@line 14331
    $76 = HEAP16[$7 >> 1] | 0; //@line 14333
    HEAP16[$7 >> 1] = $76 + 1 << 16 >> 16; //@line 14335
    HEAP8[($76 & 65535) + ($0 + 1185) >> 0] = $64; //@line 14338
    $82 = (HEAPU16[$74 >> 1] | 0) >>> 8 & 255; //@line 14341
    $83 = HEAP16[$7 >> 1] | 0; //@line 14342
    HEAP16[$7 >> 1] = $83 + 1 << 16 >> 16; //@line 14344
    HEAP8[($83 & 65535) + ($0 + 1185) >> 0] = $82; //@line 14347
    $89 = HEAP16[$7 >> 1] & 255; //@line 14350
    $91 = HEAP32[$0 + 1712 >> 2] | 0; //@line 14352
    $AsyncCtx9 = _emscripten_alloc_async_context(32, sp) | 0; //@line 14353
    $92 = __ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj($0 + 756 | 0, $11, $89, $91, 128, $6) | 0; //@line 14354
    if (___async) {
     HEAP32[$AsyncCtx9 >> 2] = 427; //@line 14357
     HEAP32[$AsyncCtx9 + 4 >> 2] = $6; //@line 14359
     HEAP32[$AsyncCtx9 + 8 >> 2] = $7; //@line 14361
     HEAP32[$AsyncCtx9 + 12 >> 2] = $0; //@line 14363
     HEAP32[$AsyncCtx9 + 16 >> 2] = $6; //@line 14365
     HEAP8[$AsyncCtx9 + 20 >> 0] = $3; //@line 14367
     HEAP32[$AsyncCtx9 + 24 >> 2] = $vararg_buffer1; //@line 14369
     HEAP32[$AsyncCtx9 + 28 >> 2] = $vararg_buffer1; //@line 14371
     sp = STACKTOP; //@line 14372
     STACKTOP = sp; //@line 14373
     return 0; //@line 14373
    }
    _emscripten_free_async_context($AsyncCtx9 | 0); //@line 14375
    if (!$92) {
     $101 = HEAP32[$6 >> 2] | 0; //@line 14378
     $103 = HEAP16[$7 >> 1] | 0; //@line 14380
     HEAP16[$7 >> 1] = $103 + 1 << 16 >> 16; //@line 14382
     HEAP8[($103 & 65535) + ($0 + 1185) >> 0] = $101; //@line 14385
     $109 = HEAP16[$7 >> 1] | 0; //@line 14388
     HEAP16[$7 >> 1] = $109 + 1 << 16 >> 16; //@line 14390
     HEAP8[($109 & 65535) + ($0 + 1185) >> 0] = $101 >>> 8; //@line 14393
     $115 = HEAP16[$7 >> 1] | 0; //@line 14396
     HEAP16[$7 >> 1] = $115 + 1 << 16 >> 16; //@line 14398
     HEAP8[($115 & 65535) + ($0 + 1185) >> 0] = $101 >>> 16; //@line 14401
     $121 = HEAP16[$7 >> 1] | 0; //@line 14404
     HEAP16[$7 >> 1] = $121 + 1 << 16 >> 16; //@line 14406
     HEAP8[($121 & 65535) + ($0 + 1185) >> 0] = $101 >>> 24; //@line 14409
     $$163 = $3; //@line 14410
     $$3 = 0; //@line 14410
     break L1;
    } else {
     $$059 = -1014; //@line 14413
     STACKTOP = sp; //@line 14414
     return $$059 | 0; //@line 14414
    }
    break;
   }
  case 4:
   {
    HEAP8[$8 >> 0] = 1; //@line 14419
    label = 9; //@line 14420
    break;
   }
  case 2:
   {
    label = 9; //@line 14424
    break;
   }
  case 7:
   {
    if ($9 | $$ << 16 >> 16 == 0) {
     $$163 = $3; //@line 14431
     $$3 = 0; //@line 14431
    } else {
     _memcpy($0 + 1186 | 0, $4 | 0, $$ & 65535 | 0) | 0; //@line 14435
     HEAP16[$7 >> 1] = (HEAPU16[$7 >> 1] | 0) + 1; //@line 14440
     $$163 = $3; //@line 14441
     $$3 = 0; //@line 14441
    }
    break;
   }
  default:
   {
    $$163 = $3; //@line 14446
    $$3 = -1002; //@line 14446
   }
  }
 } while (0);
 do {
  if ((label | 0) == 9) {
   if (!(HEAP8[$0 + 2376 >> 0] | 0)) {
    $$059 = -1009; //@line 14456
    STACKTOP = sp; //@line 14457
    return $$059 | 0; //@line 14457
   }
   if (HEAP8[$0 + 1936 >> 0] | 0) {
    $AsyncCtx13 = _emscripten_alloc_async_context(56, sp) | 0; //@line 14467
    $135 = __ZN7LoRaPHY12get_next_ADREbRaS0_Rj($0 + 4 | 0, 1, $0 + 1877 | 0, $0 + 1876 | 0, $0 + 1768 | 0) | 0; //@line 14468
    if (___async) {
     HEAP32[$AsyncCtx13 >> 2] = 428; //@line 14471
     HEAP32[$AsyncCtx13 + 4 >> 2] = $7; //@line 14473
     HEAP32[$AsyncCtx13 + 8 >> 2] = $0; //@line 14475
     HEAP32[$AsyncCtx13 + 12 >> 2] = $11; //@line 14477
     HEAP32[$AsyncCtx13 + 16 >> 2] = $6; //@line 14479
     HEAP8[$AsyncCtx13 + 20 >> 0] = $3; //@line 14481
     HEAP32[$AsyncCtx13 + 24 >> 2] = $vararg_buffer1; //@line 14483
     HEAP32[$AsyncCtx13 + 28 >> 2] = $vararg_buffer1; //@line 14485
     HEAP32[$AsyncCtx13 + 32 >> 2] = $6; //@line 14487
     HEAP32[$AsyncCtx13 + 36 >> 2] = $2; //@line 14489
     HEAP8[$AsyncCtx13 + 40 >> 0] = $9 & 1; //@line 14492
     HEAP32[$AsyncCtx13 + 44 >> 2] = $vararg_buffer; //@line 14494
     HEAP32[$AsyncCtx13 + 48 >> 2] = $vararg_buffer; //@line 14496
     HEAP32[$AsyncCtx13 + 52 >> 2] = $4; //@line 14498
     sp = STACKTOP; //@line 14499
     STACKTOP = sp; //@line 14500
     return 0; //@line 14500
    }
    _emscripten_free_async_context($AsyncCtx13 | 0); //@line 14502
    if ($135) {
     HEAP8[$2 >> 0] = HEAP8[$2 >> 0] | 64; //@line 14506
    }
   }
   if (!(HEAP8[$0 + 1178 >> 0] | 0)) {
    $$pre$phiZ2D = $2; //@line 14513
   } else {
    _mbed_tracef(16, 12890, 13062, $vararg_buffer); //@line 14515
    HEAP8[$2 >> 0] = HEAP8[$2 >> 0] | 32; //@line 14518
    $$pre$phiZ2D = $2; //@line 14519
   }
   $156 = $0 + 1756 | 0; //@line 14521
   $157 = HEAP32[$156 >> 2] | 0; //@line 14522
   HEAP8[$0 + 1186 >> 0] = $157; //@line 14525
   HEAP8[$0 + 1187 >> 0] = $157 >>> 8; //@line 14529
   HEAP8[$0 + 1188 >> 0] = $157 >>> 16; //@line 14533
   HEAP8[$0 + 1189 >> 0] = $157 >>> 24; //@line 14537
   $170 = $0 + 1190 | 0; //@line 14539
   HEAP8[$170 >> 0] = HEAP8[$$pre$phiZ2D >> 0] | 0; //@line 14540
   $171 = $0 + 1760 | 0; //@line 14541
   $172 = HEAP32[$171 >> 2] | 0; //@line 14542
   HEAP8[$0 + 1191 >> 0] = $172; //@line 14545
   HEAP8[$0 + 1192 >> 0] = $172 >>> 8; //@line 14549
   $178 = $0 + 476 | 0; //@line 14550
   __ZN14LoRaMacCommand30copy_repeat_commands_to_bufferEv($178); //@line 14551
   $179 = __ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($178) | 0; //@line 14552
   do {
    if ($9) {
     label = 27; //@line 14555
    } else {
     if (!(HEAP16[$7 >> 1] | 0)) {
      label = 27; //@line 14560
     } else {
      if (!(__ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($178) | 0)) {
       __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($178); //@line 14564
       $$06272 = $3; //@line 14565
       $$06471 = $4; //@line 14565
       $$16670 = 8; //@line 14565
       label = 31; //@line 14566
       break;
      }
      $183 = $179 & 255; //@line 14569
      if (($179 & 255) >= 16) {
       HEAP16[$7 >> 1] = $179 & 255; //@line 14573
       $$062 = 0; //@line 14575
       $$064 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($178) | 0; //@line 14575
       $$166 = 8; //@line 14575
       label = 30; //@line 14576
       break;
      }
      $185 = HEAP8[$$pre$phiZ2D >> 0] | 0; //@line 14579
      $191 = ($185 & 255) + $183 & 15 | $185 & -16; //@line 14585
      HEAP8[$$pre$phiZ2D >> 0] = $191; //@line 14586
      HEAP8[$170 >> 0] = $191; //@line 14587
      $192 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($178) | 0; //@line 14588
      if (!($179 << 24 >> 24)) {
       __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($178); //@line 14591
       $$06272 = $3; //@line 14592
       $$06471 = $4; //@line 14592
       $$16670 = 8; //@line 14592
       label = 31; //@line 14593
       break;
      } else {
       $$06575 = 8; //@line 14596
       $$06874 = 0; //@line 14596
       $195 = 0; //@line 14596
       while (1) {
        $197 = $$06575 + 1 << 24 >> 24; //@line 14600
        HEAP8[($$06575 & 255) + ($0 + 1185) >> 0] = HEAP8[$192 + $195 >> 0] | 0; //@line 14603
        $$06874 = $$06874 + 1 << 16 >> 16; //@line 14604
        $195 = $$06874 & 65535; //@line 14605
        if ($195 >>> 0 >= $183 >>> 0) {
         $$062 = $3; //@line 14610
         $$064 = $4; //@line 14610
         $$166 = $197; //@line 14610
         label = 30; //@line 14611
         break;
        } else {
         $$06575 = $197; //@line 14608
        }
       }
      }
     }
    }
   } while (0);
   if ((label | 0) == 27) {
    if (!($179 << 24 >> 24)) {
     $$062 = $3; //@line 14622
     $$064 = $4; //@line 14622
     $$166 = 8; //@line 14622
     label = 30; //@line 14623
    } else {
     if (__ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($178) | 0) {
      HEAP16[$7 >> 1] = $179 & 255; //@line 14628
      $$062 = 0; //@line 14630
      $$064 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($178) | 0; //@line 14630
      $$166 = 8; //@line 14630
      label = 30; //@line 14631
     } else {
      $$062 = $3; //@line 14633
      $$064 = $4; //@line 14633
      $$166 = 8; //@line 14633
      label = 30; //@line 14634
     }
    }
   }
   if ((label | 0) == 30) {
    __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($178); //@line 14639
    if (!$$064) {
     $$06273 = $$062; //@line 14642
     $$1 = 0; //@line 14642
     $$267 = $$166; //@line 14642
    } else {
     $$06272 = $$062; //@line 14644
     $$06471 = $$064; //@line 14644
     $$16670 = $$166; //@line 14644
     label = 31; //@line 14645
    }
   }
   do {
    if ((label | 0) == 31) {
     if (!(HEAP16[$7 >> 1] | 0)) {
      $$06273 = $$06272; //@line 14653
      $$1 = 0; //@line 14653
      $$267 = $$16670; //@line 14653
     } else {
      $212 = $$16670 + 1 << 24 >> 24; //@line 14655
      HEAP8[($$16670 & 255) + ($0 + 1185) >> 0] = $$06272; //@line 14658
      if (!($$06272 << 24 >> 24)) {
       __ZN14LoRaMacCommand20clear_command_bufferEv($178); //@line 14662
       $$058 = $0 + 1716 | 0; //@line 14664
      } else {
       $$058 = $0 + 1732 | 0; //@line 14666
      }
      $219 = HEAP16[$7 >> 1] | 0; //@line 14669
      $220 = HEAP32[$156 >> 2] | 0; //@line 14670
      $221 = HEAP32[$171 >> 2] | 0; //@line 14671
      $AsyncCtx = _emscripten_alloc_async_context(48, sp) | 0; //@line 14674
      $224 = __ZN13LoRaMacCrypto15encrypt_payloadEPKhtS1_jjhjPh($0 + 756 | 0, $$06471, $219, $$058, 128, $220, 0, $221, ($212 & 255) + ($0 + 1185) | 0) | 0; //@line 14675
      if (___async) {
       HEAP32[$AsyncCtx >> 2] = 429; //@line 14678
       HEAP8[$AsyncCtx + 4 >> 0] = $$06272; //@line 14680
       HEAP8[$AsyncCtx + 5 >> 0] = $212; //@line 14682
       HEAP32[$AsyncCtx + 8 >> 2] = $7; //@line 14684
       HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 14686
       HEAP32[$AsyncCtx + 16 >> 2] = $156; //@line 14688
       HEAP32[$AsyncCtx + 20 >> 2] = $171; //@line 14690
       HEAP32[$AsyncCtx + 24 >> 2] = $11; //@line 14692
       HEAP32[$AsyncCtx + 28 >> 2] = $6; //@line 14694
       HEAP8[$AsyncCtx + 32 >> 0] = $3; //@line 14696
       HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer1; //@line 14698
       HEAP32[$AsyncCtx + 40 >> 2] = $vararg_buffer1; //@line 14700
       HEAP32[$AsyncCtx + 44 >> 2] = $6; //@line 14702
       sp = STACKTOP; //@line 14703
       STACKTOP = sp; //@line 14704
       return 0; //@line 14704
      } else {
       _emscripten_free_async_context($AsyncCtx | 0); //@line 14706
       $$06273 = $$06272; //@line 14709
       $$1 = ($224 | 0) == 0 ? 0 : -1014; //@line 14709
       $$267 = $212; //@line 14709
       break;
      }
     }
    }
   } while (0);
   $242 = (HEAPU16[$7 >> 1] | 0) + ($$267 & 255) & 65535; //@line 14719
   HEAP16[$7 >> 1] = $242; //@line 14720
   $245 = HEAP32[$156 >> 2] | 0; //@line 14723
   $246 = HEAP32[$171 >> 2] | 0; //@line 14724
   $AsyncCtx5 = _emscripten_alloc_async_context(36, sp) | 0; //@line 14725
   $247 = __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj($0 + 756 | 0, $11, $242, $0 + 1716 | 0, 128, $245, 0, $246, $6) | 0; //@line 14726
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 430; //@line 14729
    HEAP32[$AsyncCtx5 + 4 >> 2] = $$1; //@line 14731
    HEAP32[$AsyncCtx5 + 8 >> 2] = $6; //@line 14733
    HEAP32[$AsyncCtx5 + 12 >> 2] = $7; //@line 14735
    HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 14737
    HEAP8[$AsyncCtx5 + 20 >> 0] = $3; //@line 14739
    HEAP8[$AsyncCtx5 + 21 >> 0] = $$06273; //@line 14741
    HEAP32[$AsyncCtx5 + 24 >> 2] = $vararg_buffer1; //@line 14743
    HEAP32[$AsyncCtx5 + 28 >> 2] = $vararg_buffer1; //@line 14745
    HEAP32[$AsyncCtx5 + 32 >> 2] = $6; //@line 14747
    sp = STACKTOP; //@line 14748
    STACKTOP = sp; //@line 14749
    return 0; //@line 14749
   } else {
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 14751
    $258 = HEAP32[$6 >> 2] | 0; //@line 14754
    HEAP8[(HEAPU16[$7 >> 1] | 0) + ($0 + 1185) >> 0] = $258; //@line 14759
    HEAP8[(HEAPU16[$7 >> 1] | 0) + 1 + ($0 + 1185) >> 0] = $258 >>> 8; //@line 14766
    HEAP8[(HEAPU16[$7 >> 1] | 0) + 2 + ($0 + 1185) >> 0] = $258 >>> 16; //@line 14773
    HEAP8[(HEAPU16[$7 >> 1] | 0) + 3 + ($0 + 1185) >> 0] = $258 >>> 24; //@line 14780
    HEAP16[$7 >> 1] = (HEAPU16[$7 >> 1] | 0) + 4; //@line 14785
    $$163 = $$06273; //@line 14786
    $$3 = ($247 | 0) == 0 ? $$1 : -1014; //@line 14786
    break;
   }
  }
 } while (0);
 HEAP32[$vararg_buffer1 >> 2] = $$163 & 255; //@line 14792
 _mbed_tracef(16, 12890, 13075, $vararg_buffer1); //@line 14793
 $$059 = $$3; //@line 14794
 STACKTOP = sp; //@line 14795
 return $$059 | 0; //@line 14795
}
function _equeue_dispatch($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$03956$i = 0, $$03956$i$phi = 0, $$04055$i = 0, $$0405571$i = 0, $$04063$i = 0, $$04159$i = 0, $$04258$i = 0, $$057$i = 0, $$067 = 0, $$06992 = 0, $$2 = 0, $$idx = 0, $$sink$in$i$i = 0, $$sroa$0$i = 0, $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i75 = 0, $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i74 = 0, $10 = 0, $106 = 0, $11 = 0, $12 = 0, $129 = 0, $13 = 0, $131 = 0, $132 = 0, $133 = 0, $135 = 0, $136 = 0, $14 = 0, $144 = 0, $145 = 0, $147 = 0, $15 = 0, $150 = 0, $152 = 0, $155 = 0, $158 = 0, $165 = 0, $169 = 0, $172 = 0, $178 = 0, $2 = 0, $23 = 0, $24 = 0, $27 = 0, $33 = 0, $42 = 0, $45 = 0, $46 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $72 = 0, $74 = 0, $77 = 0, $8 = 0, $9 = 0, $96 = 0, $97 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0, $$04159$i$looptemp = 0, $$04258$i$looptemp = 0;
 sp = STACKTOP; //@line 3819
 STACKTOP = STACKTOP + 16 | 0; //@line 3820
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 3820
 $$sroa$0$i = sp; //@line 3821
 $2 = $0 + 184 | 0; //@line 3822
 if (!(HEAP8[$2 >> 0] | 0)) {
  HEAP8[$2 >> 0] = 1; //@line 3826
 }
 $5 = _equeue_tick() | 0; //@line 3828
 $6 = $5 + $1 | 0; //@line 3829
 $7 = $0 + 36 | 0; //@line 3830
 HEAP8[$7 >> 0] = 0; //@line 3831
 $8 = $0 + 128 | 0; //@line 3832
 $9 = $0 + 9 | 0; //@line 3833
 $10 = $0 + 4 | 0; //@line 3834
 $11 = ($1 | 0) > -1; //@line 3835
 $12 = $0 + 48 | 0; //@line 3836
 $13 = $0 + 8 | 0; //@line 3837
 $$idx = $0 + 16 | 0; //@line 3838
 $14 = $0 + 156 | 0; //@line 3839
 $15 = $0 + 24 | 0; //@line 3840
 $$0 = $5; //@line 3841
 L4 : while (1) {
  _equeue_mutex_lock($8); //@line 3843
  HEAP8[$9 >> 0] = (HEAPU8[$9 >> 0] | 0) + 1; //@line 3848
  if (((HEAP32[$10 >> 2] | 0) - $$0 | 0) < 1) {
   HEAP32[$10 >> 2] = $$0; //@line 3853
  }
  $23 = HEAP32[$0 >> 2] | 0; //@line 3855
  HEAP32[$$sroa$0$i >> 2] = $23; //@line 3856
  $24 = $23; //@line 3857
  L9 : do {
   if (!$23) {
    $$04055$i = $$sroa$0$i; //@line 3861
    $33 = $24; //@line 3861
    label = 10; //@line 3862
   } else {
    $$04063$i = $$sroa$0$i; //@line 3864
    $27 = $24; //@line 3864
    do {
     if (((HEAP32[$27 + 20 >> 2] | 0) - $$0 | 0) >= 1) {
      $$04055$i = $$04063$i; //@line 3871
      $33 = $27; //@line 3871
      label = 10; //@line 3872
      break L9;
     }
     $$04063$i = $27 + 8 | 0; //@line 3875
     $27 = HEAP32[$$04063$i >> 2] | 0; //@line 3876
    } while (($27 | 0) != 0);
    HEAP32[$0 >> 2] = 0; //@line 3884
    $$0405571$i = $$04063$i; //@line 3885
   }
  } while (0);
  if ((label | 0) == 10) {
   label = 0; //@line 3889
   HEAP32[$0 >> 2] = $33; //@line 3890
   if (!$33) {
    $$0405571$i = $$04055$i; //@line 3893
   } else {
    HEAP32[$33 + 16 >> 2] = $0; //@line 3896
    $$0405571$i = $$04055$i; //@line 3897
   }
  }
  HEAP32[$$0405571$i >> 2] = 0; //@line 3900
  _equeue_mutex_unlock($8); //@line 3901
  $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i74 = HEAP32[$$sroa$0$i >> 2] | 0; //@line 3902
  if (!$$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i74) {} else {
   $$04159$i = $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i74; //@line 3906
   $$04258$i = $$sroa$0$i; //@line 3906
   do {
    $$04258$i$looptemp = $$04258$i;
    $$04258$i = $$04159$i + 8 | 0; //@line 3908
    $$04159$i$looptemp = $$04159$i;
    $$04159$i = HEAP32[$$04258$i >> 2] | 0; //@line 3909
    $$03956$i = 0; //@line 3910
    $$057$i = $$04159$i$looptemp; //@line 3910
    while (1) {
     HEAP32[$$057$i + 8 >> 2] = $$03956$i; //@line 3913
     $42 = HEAP32[$$057$i + 12 >> 2] | 0; //@line 3915
     if (!$42) {
      break;
     } else {
      $$03956$i$phi = $$057$i; //@line 3920
      $$057$i = $42; //@line 3920
      $$03956$i = $$03956$i$phi; //@line 3920
     }
    }
    HEAP32[$$04258$i$looptemp >> 2] = $$057$i; //@line 3923
   } while (($$04159$i | 0) != 0);
   $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i75 = HEAP32[$$sroa$0$i >> 2] | 0; //@line 3931
   if ($$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i75 | 0) {
    $$06992 = $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i75; //@line 3934
    while (1) {
     $45 = $$06992 + 8 | 0; //@line 3936
     $46 = HEAP32[$45 >> 2] | 0; //@line 3937
     $48 = HEAP32[$$06992 + 32 >> 2] | 0; //@line 3939
     if ($48 | 0) {
      $AsyncCtx = _emscripten_alloc_async_context(84, sp) | 0; //@line 3943
      FUNCTION_TABLE_vi[$48 & 1023]($$06992 + 36 | 0); //@line 3944
      if (___async) {
       label = 20; //@line 3947
       break L4;
      }
      _emscripten_free_async_context($AsyncCtx | 0); //@line 3950
     }
     $72 = HEAP32[$$06992 + 24 >> 2] | 0; //@line 3953
     if (($72 | 0) > -1) {
      $74 = $$06992 + 20 | 0; //@line 3956
      HEAP32[$74 >> 2] = (HEAP32[$74 >> 2] | 0) + $72; //@line 3959
      $77 = _equeue_tick() | 0; //@line 3960
      $AsyncCtx11 = _emscripten_alloc_async_context(76, sp) | 0; //@line 3961
      _equeue_enqueue($0, $$06992, $77) | 0; //@line 3962
      if (___async) {
       label = 24; //@line 3965
       break L4;
      }
      _emscripten_free_async_context($AsyncCtx11 | 0); //@line 3968
     } else {
      $96 = $$06992 + 4 | 0; //@line 3971
      $97 = HEAP8[$96 >> 0] | 0; //@line 3972
      HEAP8[$96 >> 0] = (($97 + 1 & 255) << HEAP32[$$idx >> 2] | 0) == 0 ? 1 : ($97 & 255) + 1 & 255; //@line 3981
      $106 = HEAP32[$$06992 + 28 >> 2] | 0; //@line 3983
      if ($106 | 0) {
       $AsyncCtx3 = _emscripten_alloc_async_context(84, sp) | 0; //@line 3987
       FUNCTION_TABLE_vi[$106 & 1023]($$06992 + 36 | 0); //@line 3988
       if (___async) {
        label = 28; //@line 3991
        break L4;
       }
       _emscripten_free_async_context($AsyncCtx3 | 0); //@line 3994
      }
      _equeue_mutex_lock($14); //@line 3996
      $129 = HEAP32[$15 >> 2] | 0; //@line 3997
      L40 : do {
       if (!$129) {
        $$02329$i$i = $15; //@line 4001
        label = 36; //@line 4002
       } else {
        $131 = HEAP32[$$06992 >> 2] | 0; //@line 4004
        $$025$i$i = $15; //@line 4005
        $133 = $129; //@line 4005
        while (1) {
         $132 = HEAP32[$133 >> 2] | 0; //@line 4007
         if ($132 >>> 0 >= $131 >>> 0) {
          break;
         }
         $135 = $133 + 8 | 0; //@line 4012
         $136 = HEAP32[$135 >> 2] | 0; //@line 4013
         if (!$136) {
          $$02329$i$i = $135; //@line 4016
          label = 36; //@line 4017
          break L40;
         } else {
          $$025$i$i = $135; //@line 4020
          $133 = $136; //@line 4020
         }
        }
        if (($132 | 0) == ($131 | 0)) {
         HEAP32[$$06992 + 12 >> 2] = $133; //@line 4026
         $$02330$i$i = $$025$i$i; //@line 4029
         $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 4029
        } else {
         $$02329$i$i = $$025$i$i; //@line 4031
         label = 36; //@line 4032
        }
       }
      } while (0);
      if ((label | 0) == 36) {
       label = 0; //@line 4037
       HEAP32[$$06992 + 12 >> 2] = 0; //@line 4039
       $$02330$i$i = $$02329$i$i; //@line 4040
       $$sink$in$i$i = $$02329$i$i; //@line 4040
      }
      HEAP32[$45 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 4043
      HEAP32[$$02330$i$i >> 2] = $$06992; //@line 4044
      _equeue_mutex_unlock($14); //@line 4045
     }
     if (!$46) {
      break;
     } else {
      $$06992 = $46; //@line 4051
     }
    }
   }
  }
  $144 = _equeue_tick() | 0; //@line 4056
  if ($11) {
   $145 = $6 - $144 | 0; //@line 4058
   if (($145 | 0) < 1) {
    label = 41; //@line 4061
    break;
   } else {
    $$067 = $145; //@line 4064
   }
  } else {
   $$067 = -1; //@line 4067
  }
  _equeue_mutex_lock($8); //@line 4069
  $165 = HEAP32[$0 >> 2] | 0; //@line 4070
  if (!$165) {
   $$2 = $$067; //@line 4073
  } else {
   $169 = (HEAP32[$165 + 20 >> 2] | 0) - $144 | 0; //@line 4077
   $172 = $169 & ~($169 >> 31); //@line 4080
   $$2 = $172 >>> 0 < $$067 >>> 0 ? $172 : $$067; //@line 4083
  }
  _equeue_mutex_unlock($8); //@line 4085
  _equeue_sema_wait($12, $$2) | 0; //@line 4086
  if (HEAP8[$13 >> 0] | 0) {
   _equeue_mutex_lock($8); //@line 4090
   if (HEAP8[$13 >> 0] | 0) {
    label = 53; //@line 4094
    break;
   }
   _equeue_mutex_unlock($8); //@line 4097
  }
  $178 = _equeue_tick() | 0; //@line 4099
  $AsyncCtx15 = _emscripten_alloc_async_context(76, sp) | 0; //@line 4100
  _wait_ms(20); //@line 4101
  if (___async) {
   label = 56; //@line 4104
   break;
  }
  _emscripten_free_async_context($AsyncCtx15 | 0); //@line 4107
  $$0 = $178; //@line 4108
 }
 if ((label | 0) == 20) {
  HEAP32[$AsyncCtx >> 2] = 134; //@line 4111
  HEAP32[$AsyncCtx + 4 >> 2] = $45; //@line 4113
  HEAP32[$AsyncCtx + 8 >> 2] = $$06992; //@line 4115
  HEAP32[$AsyncCtx + 12 >> 2] = $14; //@line 4117
  HEAP32[$AsyncCtx + 16 >> 2] = $46; //@line 4119
  HEAP32[$AsyncCtx + 20 >> 2] = $15; //@line 4121
  HEAP32[$AsyncCtx + 24 >> 2] = $$sroa$0$i; //@line 4123
  HEAP32[$AsyncCtx + 28 >> 2] = $0; //@line 4125
  HEAP32[$AsyncCtx + 32 >> 2] = $$sroa$0$i; //@line 4127
  HEAP32[$AsyncCtx + 36 >> 2] = $7; //@line 4129
  HEAP32[$AsyncCtx + 40 >> 2] = $8; //@line 4131
  HEAP32[$AsyncCtx + 44 >> 2] = $10; //@line 4133
  HEAP32[$AsyncCtx + 48 >> 2] = $13; //@line 4135
  HEAP32[$AsyncCtx + 52 >> 2] = $0; //@line 4137
  HEAP32[$AsyncCtx + 56 >> 2] = $$sroa$0$i; //@line 4139
  HEAP32[$AsyncCtx + 60 >> 2] = $0; //@line 4141
  HEAP8[$AsyncCtx + 64 >> 0] = $11 & 1; //@line 4144
  HEAP32[$AsyncCtx + 68 >> 2] = $9; //@line 4146
  HEAP32[$AsyncCtx + 72 >> 2] = $6; //@line 4148
  HEAP32[$AsyncCtx + 76 >> 2] = $12; //@line 4150
  HEAP32[$AsyncCtx + 80 >> 2] = $$idx; //@line 4152
  sp = STACKTOP; //@line 4153
  STACKTOP = sp; //@line 4154
  return;
 } else if ((label | 0) == 24) {
  HEAP32[$AsyncCtx11 >> 2] = 135; //@line 4157
  HEAP32[$AsyncCtx11 + 4 >> 2] = $14; //@line 4159
  HEAP32[$AsyncCtx11 + 8 >> 2] = $46; //@line 4161
  HEAP32[$AsyncCtx11 + 12 >> 2] = $15; //@line 4163
  HEAP32[$AsyncCtx11 + 16 >> 2] = $$sroa$0$i; //@line 4165
  HEAP32[$AsyncCtx11 + 20 >> 2] = $0; //@line 4167
  HEAP32[$AsyncCtx11 + 24 >> 2] = $$sroa$0$i; //@line 4169
  HEAP32[$AsyncCtx11 + 28 >> 2] = $7; //@line 4171
  HEAP32[$AsyncCtx11 + 32 >> 2] = $8; //@line 4173
  HEAP32[$AsyncCtx11 + 36 >> 2] = $10; //@line 4175
  HEAP32[$AsyncCtx11 + 40 >> 2] = $13; //@line 4177
  HEAP32[$AsyncCtx11 + 44 >> 2] = $0; //@line 4179
  HEAP32[$AsyncCtx11 + 48 >> 2] = $$sroa$0$i; //@line 4181
  HEAP32[$AsyncCtx11 + 52 >> 2] = $0; //@line 4183
  HEAP8[$AsyncCtx11 + 56 >> 0] = $11 & 1; //@line 4186
  HEAP32[$AsyncCtx11 + 60 >> 2] = $9; //@line 4188
  HEAP32[$AsyncCtx11 + 64 >> 2] = $6; //@line 4190
  HEAP32[$AsyncCtx11 + 68 >> 2] = $12; //@line 4192
  HEAP32[$AsyncCtx11 + 72 >> 2] = $$idx; //@line 4194
  sp = STACKTOP; //@line 4195
  STACKTOP = sp; //@line 4196
  return;
 } else if ((label | 0) == 28) {
  HEAP32[$AsyncCtx3 >> 2] = 136; //@line 4199
  HEAP32[$AsyncCtx3 + 4 >> 2] = $45; //@line 4201
  HEAP32[$AsyncCtx3 + 8 >> 2] = $$06992; //@line 4203
  HEAP32[$AsyncCtx3 + 12 >> 2] = $14; //@line 4205
  HEAP32[$AsyncCtx3 + 16 >> 2] = $46; //@line 4207
  HEAP32[$AsyncCtx3 + 20 >> 2] = $15; //@line 4209
  HEAP32[$AsyncCtx3 + 24 >> 2] = $$sroa$0$i; //@line 4211
  HEAP32[$AsyncCtx3 + 28 >> 2] = $0; //@line 4213
  HEAP32[$AsyncCtx3 + 32 >> 2] = $$sroa$0$i; //@line 4215
  HEAP32[$AsyncCtx3 + 36 >> 2] = $7; //@line 4217
  HEAP32[$AsyncCtx3 + 40 >> 2] = $8; //@line 4219
  HEAP32[$AsyncCtx3 + 44 >> 2] = $10; //@line 4221
  HEAP32[$AsyncCtx3 + 48 >> 2] = $13; //@line 4223
  HEAP32[$AsyncCtx3 + 52 >> 2] = $0; //@line 4225
  HEAP32[$AsyncCtx3 + 56 >> 2] = $$sroa$0$i; //@line 4227
  HEAP32[$AsyncCtx3 + 60 >> 2] = $0; //@line 4229
  HEAP8[$AsyncCtx3 + 64 >> 0] = $11 & 1; //@line 4232
  HEAP32[$AsyncCtx3 + 68 >> 2] = $9; //@line 4234
  HEAP32[$AsyncCtx3 + 72 >> 2] = $6; //@line 4236
  HEAP32[$AsyncCtx3 + 76 >> 2] = $12; //@line 4238
  HEAP32[$AsyncCtx3 + 80 >> 2] = $$idx; //@line 4240
  sp = STACKTOP; //@line 4241
  STACKTOP = sp; //@line 4242
  return;
 } else if ((label | 0) == 41) {
  $147 = $0 + 40 | 0; //@line 4245
  if (HEAP32[$147 >> 2] | 0) {
   _equeue_mutex_lock($8); //@line 4249
   $150 = HEAP32[$147 >> 2] | 0; //@line 4250
   do {
    if ($150 | 0) {
     $152 = HEAP32[$0 >> 2] | 0; //@line 4254
     if ($152 | 0) {
      $155 = HEAP32[$0 + 44 >> 2] | 0; //@line 4258
      $158 = (HEAP32[$152 + 20 >> 2] | 0) - $144 | 0; //@line 4261
      $AsyncCtx7 = _emscripten_alloc_async_context(16, sp) | 0; //@line 4265
      FUNCTION_TABLE_vii[$150 & 15]($155, $158 & ~($158 >> 31)); //@line 4266
      if (___async) {
       HEAP32[$AsyncCtx7 >> 2] = 137; //@line 4269
       HEAP32[$AsyncCtx7 + 4 >> 2] = $7; //@line 4271
       HEAP32[$AsyncCtx7 + 8 >> 2] = $8; //@line 4273
       HEAP32[$AsyncCtx7 + 12 >> 2] = $13; //@line 4275
       sp = STACKTOP; //@line 4276
       STACKTOP = sp; //@line 4277
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx7 | 0); //@line 4279
       break;
      }
     }
    }
   } while (0);
   HEAP8[$7 >> 0] = 1; //@line 4285
   _equeue_mutex_unlock($8); //@line 4286
  }
  HEAP8[$13 >> 0] = 0; //@line 4288
  STACKTOP = sp; //@line 4289
  return;
 } else if ((label | 0) == 53) {
  HEAP8[$13 >> 0] = 0; //@line 4292
  _equeue_mutex_unlock($8); //@line 4293
  STACKTOP = sp; //@line 4294
  return;
 } else if ((label | 0) == 56) {
  HEAP32[$AsyncCtx15 >> 2] = 138; //@line 4297
  HEAP32[$AsyncCtx15 + 4 >> 2] = $14; //@line 4299
  HEAP32[$AsyncCtx15 + 8 >> 2] = $15; //@line 4301
  HEAP32[$AsyncCtx15 + 12 >> 2] = $$sroa$0$i; //@line 4303
  HEAP32[$AsyncCtx15 + 16 >> 2] = $0; //@line 4305
  HEAP32[$AsyncCtx15 + 20 >> 2] = $$sroa$0$i; //@line 4307
  HEAP32[$AsyncCtx15 + 24 >> 2] = $7; //@line 4309
  HEAP32[$AsyncCtx15 + 28 >> 2] = $8; //@line 4311
  HEAP32[$AsyncCtx15 + 32 >> 2] = $10; //@line 4313
  HEAP32[$AsyncCtx15 + 36 >> 2] = $13; //@line 4315
  HEAP32[$AsyncCtx15 + 40 >> 2] = $0; //@line 4317
  HEAP32[$AsyncCtx15 + 44 >> 2] = $$sroa$0$i; //@line 4319
  HEAP32[$AsyncCtx15 + 48 >> 2] = $0; //@line 4321
  HEAP8[$AsyncCtx15 + 52 >> 0] = $11 & 1; //@line 4324
  HEAP32[$AsyncCtx15 + 56 >> 2] = $9; //@line 4326
  HEAP32[$AsyncCtx15 + 60 >> 2] = $6; //@line 4328
  HEAP32[$AsyncCtx15 + 64 >> 2] = $12; //@line 4330
  HEAP32[$AsyncCtx15 + 68 >> 2] = $$idx; //@line 4332
  HEAP32[$AsyncCtx15 + 72 >> 2] = $178; //@line 4334
  sp = STACKTOP; //@line 4335
  STACKTOP = sp; //@line 4336
  return;
 }
}
function _initialize__async_cb_414($0) {
 $0 = $0 | 0;
 var $$043 = 0, $$048 = 0, $10 = 0, $11 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 29474
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29476
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29478
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29480
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29482
 $8 = HEAP32[$AsyncRetVal >> 2] | 0; //@line 29483
 L2 : do {
  if (($8 | 0) < 32768) {
   if (($8 | 0) >= 128) {
    if (($8 | 0) < 2048) {
     switch ($8 | 0) {
     case 1024:
      {
       $$043 = 10; //@line 29493
       $$048 = $8; //@line 29493
       break L2;
       break;
      }
     case 512:
      {
       $$043 = 9; //@line 29498
       $$048 = $8; //@line 29498
       break L2;
       break;
      }
     case 256:
      {
       $$043 = 8; //@line 29503
       $$048 = $8; //@line 29503
       break L2;
       break;
      }
     case 128:
      {
       $$043 = 7; //@line 29508
       $$048 = $8; //@line 29508
       break L2;
       break;
      }
     default:
      {
       label = 43; //@line 29513
       break L2;
      }
     }
    }
    if (($8 | 0) < 8192) {
     switch ($8 | 0) {
     case 4096:
      {
       $$043 = 12; //@line 29522
       $$048 = $8; //@line 29522
       break L2;
       break;
      }
     case 2048:
      {
       $$043 = 11; //@line 29527
       $$048 = $8; //@line 29527
       break L2;
       break;
      }
     default:
      {
       label = 43; //@line 29532
       break L2;
      }
     }
    }
    if (($8 | 0) < 16384) {
     switch ($8 | 0) {
     case 8192:
      {
       break;
      }
     default:
      {
       label = 43; //@line 29544
       break L2;
      }
     }
     $$043 = 13; //@line 29548
     $$048 = $8; //@line 29548
     break;
    } else {
     switch ($8 | 0) {
     case 16384:
      {
       break;
      }
     default:
      {
       label = 43; //@line 29556
       break L2;
      }
     }
     $$043 = 14; //@line 29560
     $$048 = $8; //@line 29560
     break;
    }
   }
   if (($8 | 0) >= 8) {
    switch ($8 | 0) {
    case 64:
     {
      $$043 = 6; //@line 29568
      $$048 = $8; //@line 29568
      break L2;
      break;
     }
    case 32:
     {
      $$043 = 5; //@line 29573
      $$048 = $8; //@line 29573
      break L2;
      break;
     }
    case 16:
     {
      $$043 = 4; //@line 29578
      $$048 = $8; //@line 29578
      break L2;
      break;
     }
    case 8:
     {
      $$043 = 3; //@line 29583
      $$048 = $8; //@line 29583
      break L2;
      break;
     }
    default:
     {
      label = 43; //@line 29588
      break L2;
     }
    }
   }
   if (($8 | 0) >= 2) {
    switch ($8 | 0) {
    case 4:
     {
      $$043 = 2; //@line 29597
      $$048 = $8; //@line 29597
      break L2;
      break;
     }
    case 2:
     {
      $$043 = 1; //@line 29602
      $$048 = $8; //@line 29602
      break L2;
      break;
     }
    default:
     {
      label = 43; //@line 29607
      break L2;
     }
    }
   }
   if (($8 | 0) < 0) {
    switch ($8 | 0) {
    case -2147483648:
     {
      $$043 = 31; //@line 29616
      $$048 = -2147483648; //@line 29616
      break L2;
      break;
     }
    default:
     {
      label = 43; //@line 29621
      break L2;
     }
    }
   }
   switch ($8 | 0) {
   case 0:
    {
     break;
    }
   default:
    {
     label = 43; //@line 29631
     break L2;
    }
   }
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(20) | 0; //@line 29635
   _mbed_assert_internal(14462, 14464, 41); //@line 29636
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 620; //@line 29639
    $9 = $ReallocAsyncCtx7 + 4 | 0; //@line 29640
    HEAP32[$9 >> 2] = $2; //@line 29641
    $10 = $ReallocAsyncCtx7 + 8 | 0; //@line 29642
    HEAP32[$10 >> 2] = $6; //@line 29643
    $11 = $ReallocAsyncCtx7 + 12 | 0; //@line 29644
    HEAP32[$11 >> 2] = $4; //@line 29645
    $12 = $ReallocAsyncCtx7 + 16 | 0; //@line 29646
    HEAP32[$12 >> 2] = $AsyncRetVal; //@line 29647
    sp = STACKTOP; //@line 29648
    return;
   }
   ___async_unwind = 0; //@line 29651
   HEAP32[$ReallocAsyncCtx7 >> 2] = 620; //@line 29652
   $9 = $ReallocAsyncCtx7 + 4 | 0; //@line 29653
   HEAP32[$9 >> 2] = $2; //@line 29654
   $10 = $ReallocAsyncCtx7 + 8 | 0; //@line 29655
   HEAP32[$10 >> 2] = $6; //@line 29656
   $11 = $ReallocAsyncCtx7 + 12 | 0; //@line 29657
   HEAP32[$11 >> 2] = $4; //@line 29658
   $12 = $ReallocAsyncCtx7 + 16 | 0; //@line 29659
   HEAP32[$12 >> 2] = $AsyncRetVal; //@line 29660
   sp = STACKTOP; //@line 29661
   return;
  } else {
   if (($8 | 0) < 8388608) {
    if (($8 | 0) < 524288) {
     if (($8 | 0) < 131072) {
      if (($8 | 0) < 65536) {
       switch ($8 | 0) {
       case 32768:
        {
         break;
        }
       default:
        {
         label = 43; //@line 29677
         break L2;
        }
       }
       $$043 = 15; //@line 29681
       $$048 = $8; //@line 29681
       break;
      } else {
       switch ($8 | 0) {
       case 65536:
        {
         break;
        }
       default:
        {
         label = 43; //@line 29689
         break L2;
        }
       }
       $$043 = 16; //@line 29693
       $$048 = $8; //@line 29693
       break;
      }
     } else {
      if (($8 | 0) < 262144) {
       switch ($8 | 0) {
       case 131072:
        {
         break;
        }
       default:
        {
         label = 43; //@line 29704
         break L2;
        }
       }
       $$043 = 17; //@line 29708
       $$048 = $8; //@line 29708
       break;
      } else {
       switch ($8 | 0) {
       case 262144:
        {
         break;
        }
       default:
        {
         label = 43; //@line 29716
         break L2;
        }
       }
       $$043 = 18; //@line 29720
       $$048 = $8; //@line 29720
       break;
      }
     }
    } else {
     if (($8 | 0) < 2097152) {
      if (($8 | 0) < 1048576) {
       switch ($8 | 0) {
       case 524288:
        {
         break;
        }
       default:
        {
         label = 43; //@line 29734
         break L2;
        }
       }
       $$043 = 19; //@line 29738
       $$048 = $8; //@line 29738
       break;
      } else {
       switch ($8 | 0) {
       case 1048576:
        {
         break;
        }
       default:
        {
         label = 43; //@line 29746
         break L2;
        }
       }
       $$043 = 20; //@line 29750
       $$048 = $8; //@line 29750
       break;
      }
     } else {
      if (($8 | 0) < 4194304) {
       switch ($8 | 0) {
       case 2097152:
        {
         break;
        }
       default:
        {
         label = 43; //@line 29761
         break L2;
        }
       }
       $$043 = 21; //@line 29765
       $$048 = $8; //@line 29765
       break;
      } else {
       switch ($8 | 0) {
       case 4194304:
        {
         break;
        }
       default:
        {
         label = 43; //@line 29773
         break L2;
        }
       }
       $$043 = 22; //@line 29777
       $$048 = $8; //@line 29777
       break;
      }
     }
    }
   } else {
    if (($8 | 0) < 134217728) {
     if (($8 | 0) < 33554432) {
      if (($8 | 0) < 16777216) {
       switch ($8 | 0) {
       case 8388608:
        {
         break;
        }
       default:
        {
         label = 43; //@line 29794
         break L2;
        }
       }
       $$043 = 23; //@line 29798
       $$048 = $8; //@line 29798
       break;
      } else {
       switch ($8 | 0) {
       case 16777216:
        {
         break;
        }
       default:
        {
         label = 43; //@line 29806
         break L2;
        }
       }
       $$043 = 24; //@line 29810
       $$048 = $8; //@line 29810
       break;
      }
     } else {
      if (($8 | 0) < 67108864) {
       switch ($8 | 0) {
       case 33554432:
        {
         break;
        }
       default:
        {
         label = 43; //@line 29821
         break L2;
        }
       }
       $$043 = 25; //@line 29825
       $$048 = $8; //@line 29825
       break;
      } else {
       switch ($8 | 0) {
       case 67108864:
        {
         break;
        }
       default:
        {
         label = 43; //@line 29833
         break L2;
        }
       }
       $$043 = 26; //@line 29837
       $$048 = $8; //@line 29837
       break;
      }
     }
    } else {
     if (($8 | 0) < 536870912) {
      if (($8 | 0) < 268435456) {
       switch ($8 | 0) {
       case 134217728:
        {
         break;
        }
       default:
        {
         label = 43; //@line 29851
         break L2;
        }
       }
       $$043 = 27; //@line 29855
       $$048 = $8; //@line 29855
       break;
      } else {
       switch ($8 | 0) {
       case 268435456:
        {
         break;
        }
       default:
        {
         label = 43; //@line 29863
         break L2;
        }
       }
       $$043 = 28; //@line 29867
       $$048 = $8; //@line 29867
       break;
      }
     } else {
      if (($8 | 0) < 1073741824) {
       switch ($8 | 0) {
       case 536870912:
        {
         break;
        }
       default:
        {
         label = 43; //@line 29878
         break L2;
        }
       }
       $$043 = 29; //@line 29882
       $$048 = $8; //@line 29882
       break;
      } else {
       switch ($8 | 0) {
       case 1073741824:
        {
         break;
        }
       default:
        {
         label = 43; //@line 29890
         break L2;
        }
       }
       $$043 = 30; //@line 29894
       $$048 = $8; //@line 29894
       break;
      }
     }
    }
   }
  }
 } while (0);
 if ((label | 0) == 43) {
  $$043 = 0; //@line 29903
  $$048 = $8; //@line 29903
 }
 $14 = HEAP32[$AsyncRetVal + 4 >> 2] | 0; //@line 29906
 if (($14 + -4 | 0) >>> 0 > 28) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 29910
  _mbed_assert_internal(14462, 14464, 55); //@line 29911
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 621; //@line 29914
   $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 29915
   HEAP32[$16 >> 2] = $2; //@line 29916
   $17 = $ReallocAsyncCtx6 + 8 | 0; //@line 29917
   HEAP32[$17 >> 2] = $6; //@line 29918
   $18 = $ReallocAsyncCtx6 + 12 | 0; //@line 29919
   HEAP32[$18 >> 2] = $$048; //@line 29920
   $19 = $ReallocAsyncCtx6 + 16 | 0; //@line 29921
   HEAP32[$19 >> 2] = $4; //@line 29922
   $20 = $ReallocAsyncCtx6 + 20 | 0; //@line 29923
   HEAP8[$20 >> 0] = $$043; //@line 29924
   sp = STACKTOP; //@line 29925
   return;
  }
  ___async_unwind = 0; //@line 29928
  HEAP32[$ReallocAsyncCtx6 >> 2] = 621; //@line 29929
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 29930
  HEAP32[$16 >> 2] = $2; //@line 29931
  $17 = $ReallocAsyncCtx6 + 8 | 0; //@line 29932
  HEAP32[$17 >> 2] = $6; //@line 29933
  $18 = $ReallocAsyncCtx6 + 12 | 0; //@line 29934
  HEAP32[$18 >> 2] = $$048; //@line 29935
  $19 = $ReallocAsyncCtx6 + 16 | 0; //@line 29936
  HEAP32[$19 >> 2] = $4; //@line 29937
  $20 = $ReallocAsyncCtx6 + 20 | 0; //@line 29938
  HEAP8[$20 >> 0] = $$043; //@line 29939
  sp = STACKTOP; //@line 29940
  return;
 } else {
  $22 = 7 << $14 + -4; //@line 29944
  $23 = ___muldi3($22 | 0, 0, 1e6, 0) | 0; //@line 29945
  $24 = tempRet0; //@line 29946
  $25 = _i64Add($$048 | 0, 0, -1, -1) | 0; //@line 29947
  $27 = _i64Add($25 | 0, tempRet0 | 0, $23 | 0, $24 | 0) | 0; //@line 29949
  $29 = ___udivdi3($27 | 0, tempRet0 | 0, $$048 | 0, 0) | 0; //@line 29951
  $30 = tempRet0; //@line 29952
  $31 = HEAP32[$2 >> 2] | 0; //@line 29953
  HEAP32[$31 >> 2] = 0; //@line 29954
  HEAP32[$31 + 4 >> 2] = 0; //@line 29956
  $35 = HEAP32[(HEAP32[$4 >> 2] | 0) + 4 >> 2] | 0; //@line 29959
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(40) | 0; //@line 29960
  $36 = FUNCTION_TABLE_i[$35 & 7]() | 0; //@line 29961
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 622; //@line 29964
   $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 29965
   HEAP32[$37 >> 2] = $2; //@line 29966
   $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 29967
   HEAP32[$38 >> 2] = $$048; //@line 29968
   $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 29969
   HEAP8[$39 >> 0] = $$043; //@line 29970
   $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 29971
   HEAP32[$40 >> 2] = $14; //@line 29972
   $41 = $ReallocAsyncCtx3 + 20 | 0; //@line 29973
   HEAP32[$41 >> 2] = $22; //@line 29974
   $42 = $ReallocAsyncCtx3 + 24 | 0; //@line 29975
   $43 = $42; //@line 29976
   $44 = $43; //@line 29977
   HEAP32[$44 >> 2] = $29; //@line 29978
   $45 = $43 + 4 | 0; //@line 29979
   $46 = $45; //@line 29980
   HEAP32[$46 >> 2] = $30; //@line 29981
   $47 = $ReallocAsyncCtx3 + 32 | 0; //@line 29982
   HEAP32[$47 >> 2] = $4; //@line 29983
   $48 = $ReallocAsyncCtx3 + 36 | 0; //@line 29984
   HEAP32[$48 >> 2] = $6; //@line 29985
   sp = STACKTOP; //@line 29986
   return;
  }
  HEAP32[___async_retval >> 2] = $36; //@line 29990
  ___async_unwind = 0; //@line 29991
  HEAP32[$ReallocAsyncCtx3 >> 2] = 622; //@line 29992
  $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 29993
  HEAP32[$37 >> 2] = $2; //@line 29994
  $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 29995
  HEAP32[$38 >> 2] = $$048; //@line 29996
  $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 29997
  HEAP8[$39 >> 0] = $$043; //@line 29998
  $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 29999
  HEAP32[$40 >> 2] = $14; //@line 30000
  $41 = $ReallocAsyncCtx3 + 20 | 0; //@line 30001
  HEAP32[$41 >> 2] = $22; //@line 30002
  $42 = $ReallocAsyncCtx3 + 24 | 0; //@line 30003
  $43 = $42; //@line 30004
  $44 = $43; //@line 30005
  HEAP32[$44 >> 2] = $29; //@line 30006
  $45 = $43 + 4 | 0; //@line 30007
  $46 = $45; //@line 30008
  HEAP32[$46 >> 2] = $30; //@line 30009
  $47 = $ReallocAsyncCtx3 + 32 | 0; //@line 30010
  HEAP32[$47 >> 2] = $4; //@line 30011
  $48 = $ReallocAsyncCtx3 + 36 | 0; //@line 30012
  HEAP32[$48 >> 2] = $6; //@line 30013
  sp = STACKTOP; //@line 30014
  return;
 }
}
function _mbedtls_cipher_cmac_finish($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$013$i = 0, $$01720$i45 = 0, $$019$i = 0, $$019$i42 = 0, $$021$i44 = 0, $$09$i = 0, $$09$i53 = 0, $$09$i58 = 0, $$sink$sink$i = 0, $105 = 0, $108 = 0, $116 = 0, $117 = 0, $12 = 0, $130 = 0, $150 = 0, $151 = 0, $152 = 0, $16 = 0, $160 = 0, $177 = 0, $181 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $69 = 0, $7 = 0, $70 = 0, $89 = 0, $9 = 0, $92 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx18 = 0, $AsyncCtx22 = 0, $AsyncCtx26 = 0, $AsyncCtx29 = 0, $AsyncCtx3 = 0, $AsyncCtx32 = 0, $AsyncCtx7 = 0, label = 0, sp = 0, $116$looptemp = 0;
 sp = STACKTOP; //@line 3537
 STACKTOP = STACKTOP + 80 | 0; //@line 3538
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80); //@line 3538
 $2 = sp + 56 | 0; //@line 3539
 $3 = sp + 4 | 0; //@line 3540
 $4 = sp + 40 | 0; //@line 3541
 $5 = sp + 24 | 0; //@line 3542
 $6 = sp + 8 | 0; //@line 3543
 $7 = sp; //@line 3544
 if (!$0) {
  $$0 = -24832; //@line 3547
  STACKTOP = sp; //@line 3548
  return $$0 | 0; //@line 3548
 }
 $9 = HEAP32[$0 >> 2] | 0; //@line 3550
 if (!$9) {
  $$0 = -24832; //@line 3553
  STACKTOP = sp; //@line 3554
  return $$0 | 0; //@line 3554
 }
 $12 = HEAP32[$0 + 64 >> 2] | 0; //@line 3557
 if (($1 | 0) == 0 | ($12 | 0) == 0) {
  $$0 = -24832; //@line 3562
  STACKTOP = sp; //@line 3563
  return $$0 | 0; //@line 3563
 }
 $16 = HEAP32[$9 + 24 >> 2] | 0; //@line 3566
 $AsyncCtx26 = _emscripten_alloc_async_context(68, sp) | 0; //@line 3567
 _mbedtls_platform_zeroize($4, 16); //@line 3568
 if (___async) {
  HEAP32[$AsyncCtx26 >> 2] = 599; //@line 3571
  HEAP32[$AsyncCtx26 + 4 >> 2] = $12; //@line 3573
  HEAP32[$AsyncCtx26 + 8 >> 2] = $6; //@line 3575
  HEAP32[$AsyncCtx26 + 12 >> 2] = $16; //@line 3577
  HEAP32[$AsyncCtx26 + 16 >> 2] = $5; //@line 3579
  HEAP32[$AsyncCtx26 + 20 >> 2] = $4; //@line 3581
  HEAP32[$AsyncCtx26 + 24 >> 2] = $0; //@line 3583
  HEAP32[$AsyncCtx26 + 28 >> 2] = $0; //@line 3585
  HEAP32[$AsyncCtx26 + 32 >> 2] = $3; //@line 3587
  HEAP32[$AsyncCtx26 + 36 >> 2] = $7; //@line 3589
  HEAP32[$AsyncCtx26 + 40 >> 2] = $6; //@line 3591
  HEAP32[$AsyncCtx26 + 44 >> 2] = $5; //@line 3593
  HEAP32[$AsyncCtx26 + 48 >> 2] = $12; //@line 3595
  HEAP32[$AsyncCtx26 + 52 >> 2] = $1; //@line 3597
  HEAP32[$AsyncCtx26 + 56 >> 2] = $4; //@line 3599
  HEAP32[$AsyncCtx26 + 60 >> 2] = $7; //@line 3601
  HEAP32[$AsyncCtx26 + 64 >> 2] = $2; //@line 3603
  sp = STACKTOP; //@line 3604
  STACKTOP = sp; //@line 3605
  return 0; //@line 3605
 }
 _emscripten_free_async_context($AsyncCtx26 | 0); //@line 3607
 $AsyncCtx22 = _emscripten_alloc_async_context(68, sp) | 0; //@line 3608
 _mbedtls_platform_zeroize($5, 16); //@line 3609
 if (___async) {
  HEAP32[$AsyncCtx22 >> 2] = 600; //@line 3612
  HEAP32[$AsyncCtx22 + 4 >> 2] = $12; //@line 3614
  HEAP32[$AsyncCtx22 + 8 >> 2] = $6; //@line 3616
  HEAP32[$AsyncCtx22 + 12 >> 2] = $16; //@line 3618
  HEAP32[$AsyncCtx22 + 16 >> 2] = $5; //@line 3620
  HEAP32[$AsyncCtx22 + 20 >> 2] = $4; //@line 3622
  HEAP32[$AsyncCtx22 + 24 >> 2] = $0; //@line 3624
  HEAP32[$AsyncCtx22 + 28 >> 2] = $0; //@line 3626
  HEAP32[$AsyncCtx22 + 32 >> 2] = $3; //@line 3628
  HEAP32[$AsyncCtx22 + 36 >> 2] = $7; //@line 3630
  HEAP32[$AsyncCtx22 + 40 >> 2] = $6; //@line 3632
  HEAP32[$AsyncCtx22 + 44 >> 2] = $5; //@line 3634
  HEAP32[$AsyncCtx22 + 48 >> 2] = $12; //@line 3636
  HEAP32[$AsyncCtx22 + 52 >> 2] = $1; //@line 3638
  HEAP32[$AsyncCtx22 + 56 >> 2] = $4; //@line 3640
  HEAP32[$AsyncCtx22 + 60 >> 2] = $7; //@line 3642
  HEAP32[$AsyncCtx22 + 64 >> 2] = $2; //@line 3644
  sp = STACKTOP; //@line 3645
  STACKTOP = sp; //@line 3646
  return 0; //@line 3646
 }
 _emscripten_free_async_context($AsyncCtx22 | 0); //@line 3648
 $AsyncCtx18 = _emscripten_alloc_async_context(76, sp) | 0; //@line 3649
 _mbedtls_platform_zeroize($2, 16); //@line 3650
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 601; //@line 3653
  HEAP32[$AsyncCtx18 + 4 >> 2] = $12; //@line 3655
  HEAP32[$AsyncCtx18 + 8 >> 2] = $6; //@line 3657
  HEAP32[$AsyncCtx18 + 12 >> 2] = $16; //@line 3659
  HEAP32[$AsyncCtx18 + 16 >> 2] = $5; //@line 3661
  HEAP32[$AsyncCtx18 + 20 >> 2] = $4; //@line 3663
  HEAP32[$AsyncCtx18 + 24 >> 2] = $0; //@line 3665
  HEAP32[$AsyncCtx18 + 28 >> 2] = $0; //@line 3667
  HEAP32[$AsyncCtx18 + 32 >> 2] = $2; //@line 3669
  HEAP32[$AsyncCtx18 + 36 >> 2] = $3; //@line 3671
  HEAP32[$AsyncCtx18 + 40 >> 2] = $7; //@line 3673
  HEAP32[$AsyncCtx18 + 44 >> 2] = $6; //@line 3675
  HEAP32[$AsyncCtx18 + 48 >> 2] = $5; //@line 3677
  HEAP32[$AsyncCtx18 + 52 >> 2] = $12; //@line 3679
  HEAP32[$AsyncCtx18 + 56 >> 2] = $1; //@line 3681
  HEAP32[$AsyncCtx18 + 60 >> 2] = $4; //@line 3683
  HEAP32[$AsyncCtx18 + 64 >> 2] = $7; //@line 3685
  HEAP32[$AsyncCtx18 + 68 >> 2] = $3; //@line 3687
  HEAP32[$AsyncCtx18 + 72 >> 2] = $2; //@line 3689
  sp = STACKTOP; //@line 3690
  STACKTOP = sp; //@line 3691
  return 0; //@line 3691
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 3693
 $69 = HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] | 0; //@line 3696
 $AsyncCtx32 = _emscripten_alloc_async_context(72, sp) | 0; //@line 3697
 $70 = _mbedtls_cipher_update($0, $2, $69, $2, $3) | 0; //@line 3698
 if (___async) {
  HEAP32[$AsyncCtx32 >> 2] = 602; //@line 3701
  HEAP32[$AsyncCtx32 + 4 >> 2] = $12; //@line 3703
  HEAP32[$AsyncCtx32 + 8 >> 2] = $6; //@line 3705
  HEAP32[$AsyncCtx32 + 12 >> 2] = $16; //@line 3707
  HEAP32[$AsyncCtx32 + 16 >> 2] = $5; //@line 3709
  HEAP32[$AsyncCtx32 + 20 >> 2] = $4; //@line 3711
  HEAP32[$AsyncCtx32 + 24 >> 2] = $2; //@line 3713
  HEAP32[$AsyncCtx32 + 28 >> 2] = $7; //@line 3715
  HEAP32[$AsyncCtx32 + 32 >> 2] = $6; //@line 3717
  HEAP32[$AsyncCtx32 + 36 >> 2] = $5; //@line 3719
  HEAP32[$AsyncCtx32 + 40 >> 2] = $12; //@line 3721
  HEAP32[$AsyncCtx32 + 44 >> 2] = $1; //@line 3723
  HEAP32[$AsyncCtx32 + 48 >> 2] = $4; //@line 3725
  HEAP32[$AsyncCtx32 + 52 >> 2] = $0; //@line 3727
  HEAP32[$AsyncCtx32 + 56 >> 2] = $7; //@line 3729
  HEAP32[$AsyncCtx32 + 60 >> 2] = $69; //@line 3731
  HEAP32[$AsyncCtx32 + 64 >> 2] = $3; //@line 3733
  HEAP32[$AsyncCtx32 + 68 >> 2] = $2; //@line 3735
  sp = STACKTOP; //@line 3736
  STACKTOP = sp; //@line 3737
  return 0; //@line 3737
 }
 _emscripten_free_async_context($AsyncCtx32 | 0); //@line 3739
 L22 : do {
  if (!$70) {
   switch ($69 | 0) {
   case 16:
    {
     $$019$i42 = 135; //@line 3745
     break;
    }
   case 8:
    {
     $$019$i42 = 27; //@line 3749
     break;
    }
   default:
    {
     break L22;
    }
   }
   $89 = $69 + -1 | 0; //@line 3756
   $$01720$i45 = 0; //@line 3757
   $$021$i44 = $89; //@line 3757
   while (1) {
    $92 = HEAPU8[$2 + $$021$i44 >> 0] | 0; //@line 3761
    HEAP8[$4 + $$021$i44 >> 0] = $92 << 1 | $$01720$i45; //@line 3766
    if (($$021$i44 | 0) > 0) {
     $$01720$i45 = $92 >>> 7; //@line 3771
     $$021$i44 = $$021$i44 + -1 | 0; //@line 3771
    } else {
     break;
    }
   }
   $105 = $4 + $89 | 0; //@line 3781
   $108 = $$019$i42 & 0 - ((HEAPU8[$2 >> 0] | 0) >>> 7) ^ (HEAPU8[$105 >> 0] | 0); //@line 3784
   HEAP8[$105 >> 0] = $108; //@line 3786
   switch ($69 | 0) {
   case 16:
    {
     $$019$i = 135; //@line 3789
     break;
    }
   case 8:
    {
     $$019$i = 27; //@line 3793
     break;
    }
   default:
    {
     break L22;
    }
   }
   HEAP8[$5 + $89 >> 0] = $108 << 1; //@line 3803
   if (($89 | 0) > 0) {
    $116 = $108; //@line 3807
    $117 = $69 + -2 | 0; //@line 3807
    while (1) {
     $116$looptemp = $116;
     $116 = HEAPU8[$4 + $117 >> 0] | 0; //@line 3812
     HEAP8[$5 + $117 >> 0] = $116 << 1 | $116$looptemp >>> 7; //@line 3817
     if (($117 | 0) <= 0) {
      break;
     } else {
      $117 = $117 + -1 | 0; //@line 3821
     }
    }
   }
   $130 = $5 + $89 | 0; //@line 3832
   HEAP8[$130 >> 0] = $$019$i & 0 - ((HEAPU8[$4 >> 0] | 0) >>> 7) ^ (HEAPU8[$130 >> 0] | 0); //@line 3837
  }
 } while (0);
 $AsyncCtx14 = _emscripten_alloc_async_context(64, sp) | 0; //@line 3840
 _mbedtls_platform_zeroize($2, 16); //@line 3841
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 603; //@line 3844
  HEAP32[$AsyncCtx14 + 4 >> 2] = $12; //@line 3846
  HEAP32[$AsyncCtx14 + 8 >> 2] = $6; //@line 3848
  HEAP32[$AsyncCtx14 + 12 >> 2] = $16; //@line 3850
  HEAP32[$AsyncCtx14 + 16 >> 2] = $5; //@line 3852
  HEAP32[$AsyncCtx14 + 20 >> 2] = $7; //@line 3854
  HEAP32[$AsyncCtx14 + 24 >> 2] = $6; //@line 3856
  HEAP32[$AsyncCtx14 + 28 >> 2] = $5; //@line 3858
  HEAP32[$AsyncCtx14 + 32 >> 2] = $4; //@line 3860
  HEAP32[$AsyncCtx14 + 36 >> 2] = $12; //@line 3862
  HEAP32[$AsyncCtx14 + 40 >> 2] = $1; //@line 3864
  HEAP32[$AsyncCtx14 + 44 >> 2] = $4; //@line 3866
  HEAP32[$AsyncCtx14 + 48 >> 2] = $0; //@line 3868
  HEAP32[$AsyncCtx14 + 52 >> 2] = $7; //@line 3870
  HEAP32[$AsyncCtx14 + 56 >> 2] = $3; //@line 3872
  HEAP32[$AsyncCtx14 + 60 >> 2] = $2; //@line 3874
  sp = STACKTOP; //@line 3875
  STACKTOP = sp; //@line 3876
  return 0; //@line 3876
 }
 _emscripten_free_async_context($AsyncCtx14 | 0); //@line 3878
 $150 = $12 + 16 | 0; //@line 3879
 $151 = $12 + 32 | 0; //@line 3880
 $152 = HEAP32[$151 >> 2] | 0; //@line 3881
 if ($152 >>> 0 < $16 >>> 0) {
  $$013$i = 0; //@line 3884
  do {
   if ($$013$i >>> 0 < $152 >>> 0) {
    $$sink$sink$i = HEAP8[$12 + 16 + $$013$i >> 0] | 0; //@line 3890
   } else {
    $$sink$sink$i = ($$013$i | 0) == ($152 | 0) ? -128 : 0; //@line 3894
   }
   HEAP8[$6 + $$013$i >> 0] = $$sink$sink$i; //@line 3897
   $$013$i = $$013$i + 1 | 0; //@line 3898
  } while (($$013$i | 0) != ($16 | 0));
  $$09$i = 0; //@line 3901
  do {
   $160 = $6 + $$09$i | 0; //@line 3908
   HEAP8[$160 >> 0] = HEAP8[$5 + $$09$i >> 0] ^ HEAP8[$160 >> 0]; //@line 3913
   $$09$i = $$09$i + 1 | 0; //@line 3914
  } while (($$09$i | 0) != ($16 | 0));
  label = 33; //@line 3917
 } else {
  if ($16 | 0) {
   $$09$i53 = 0; //@line 3926
   do {
    HEAP8[$6 + $$09$i53 >> 0] = HEAP8[$4 + $$09$i53 >> 0] ^ HEAP8[$12 + 16 + $$09$i53 >> 0]; //@line 3934
    $$09$i53 = $$09$i53 + 1 | 0; //@line 3935
   } while (($$09$i53 | 0) != ($16 | 0));
   label = 33; //@line 3938
  }
 }
 if ((label | 0) == 33) {
  if ($16 | 0) {
   $$09$i58 = 0; //@line 3949
   do {
    $177 = $12 + $$09$i58 | 0; //@line 3953
    HEAP8[$177 >> 0] = HEAP8[$177 >> 0] ^ HEAP8[$6 + $$09$i58 >> 0]; //@line 3956
    $$09$i58 = $$09$i58 + 1 | 0; //@line 3957
   } while (($$09$i58 | 0) != ($16 | 0));
  }
 }
 $AsyncCtx29 = _emscripten_alloc_async_context(40, sp) | 0; //@line 3967
 $181 = _mbedtls_cipher_update($0, $12, $16, $12, $7) | 0; //@line 3968
 if (___async) {
  HEAP32[$AsyncCtx29 >> 2] = 604; //@line 3971
  HEAP32[$AsyncCtx29 + 4 >> 2] = $1; //@line 3973
  HEAP32[$AsyncCtx29 + 8 >> 2] = $12; //@line 3975
  HEAP32[$AsyncCtx29 + 12 >> 2] = $16; //@line 3977
  HEAP32[$AsyncCtx29 + 16 >> 2] = $4; //@line 3979
  HEAP32[$AsyncCtx29 + 20 >> 2] = $5; //@line 3981
  HEAP32[$AsyncCtx29 + 24 >> 2] = $151; //@line 3983
  HEAP32[$AsyncCtx29 + 28 >> 2] = $150; //@line 3985
  HEAP32[$AsyncCtx29 + 32 >> 2] = $7; //@line 3987
  HEAP32[$AsyncCtx29 + 36 >> 2] = $6; //@line 3989
  sp = STACKTOP; //@line 3990
  STACKTOP = sp; //@line 3991
  return 0; //@line 3991
 }
 _emscripten_free_async_context($AsyncCtx29 | 0); //@line 3993
 if (!$181) {
  _memcpy($1 | 0, $12 | 0, $16 | 0) | 0; //@line 3996
 }
 $AsyncCtx11 = _emscripten_alloc_async_context(36, sp) | 0; //@line 3998
 _mbedtls_platform_zeroize($4, 16); //@line 3999
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 605; //@line 4002
  HEAP32[$AsyncCtx11 + 4 >> 2] = $5; //@line 4004
  HEAP32[$AsyncCtx11 + 8 >> 2] = $151; //@line 4006
  HEAP32[$AsyncCtx11 + 12 >> 2] = $150; //@line 4008
  HEAP32[$AsyncCtx11 + 16 >> 2] = $12; //@line 4010
  HEAP32[$AsyncCtx11 + 20 >> 2] = $181; //@line 4012
  HEAP32[$AsyncCtx11 + 24 >> 2] = $7; //@line 4014
  HEAP32[$AsyncCtx11 + 28 >> 2] = $6; //@line 4016
  HEAP32[$AsyncCtx11 + 32 >> 2] = $4; //@line 4018
  sp = STACKTOP; //@line 4019
  STACKTOP = sp; //@line 4020
  return 0; //@line 4020
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 4022
 $AsyncCtx7 = _emscripten_alloc_async_context(36, sp) | 0; //@line 4023
 _mbedtls_platform_zeroize($5, 16); //@line 4024
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 606; //@line 4027
  HEAP32[$AsyncCtx7 + 4 >> 2] = $151; //@line 4029
  HEAP32[$AsyncCtx7 + 8 >> 2] = $150; //@line 4031
  HEAP32[$AsyncCtx7 + 12 >> 2] = $12; //@line 4033
  HEAP32[$AsyncCtx7 + 16 >> 2] = $181; //@line 4035
  HEAP32[$AsyncCtx7 + 20 >> 2] = $7; //@line 4037
  HEAP32[$AsyncCtx7 + 24 >> 2] = $6; //@line 4039
  HEAP32[$AsyncCtx7 + 28 >> 2] = $5; //@line 4041
  HEAP32[$AsyncCtx7 + 32 >> 2] = $4; //@line 4043
  sp = STACKTOP; //@line 4044
  STACKTOP = sp; //@line 4045
  return 0; //@line 4045
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 4047
 HEAP32[$151 >> 2] = 0; //@line 4048
 $AsyncCtx3 = _emscripten_alloc_async_context(28, sp) | 0; //@line 4049
 _mbedtls_platform_zeroize($150, 16); //@line 4050
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 607; //@line 4053
  HEAP32[$AsyncCtx3 + 4 >> 2] = $12; //@line 4055
  HEAP32[$AsyncCtx3 + 8 >> 2] = $181; //@line 4057
  HEAP32[$AsyncCtx3 + 12 >> 2] = $7; //@line 4059
  HEAP32[$AsyncCtx3 + 16 >> 2] = $6; //@line 4061
  HEAP32[$AsyncCtx3 + 20 >> 2] = $5; //@line 4063
  HEAP32[$AsyncCtx3 + 24 >> 2] = $4; //@line 4065
  sp = STACKTOP; //@line 4066
  STACKTOP = sp; //@line 4067
  return 0; //@line 4067
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 4069
 $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 4070
 _mbedtls_platform_zeroize($12, 16); //@line 4071
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 608; //@line 4074
  HEAP32[$AsyncCtx + 4 >> 2] = $181; //@line 4076
  HEAP32[$AsyncCtx + 8 >> 2] = $7; //@line 4078
  HEAP32[$AsyncCtx + 12 >> 2] = $6; //@line 4080
  HEAP32[$AsyncCtx + 16 >> 2] = $5; //@line 4082
  HEAP32[$AsyncCtx + 20 >> 2] = $4; //@line 4084
  sp = STACKTOP; //@line 4085
  STACKTOP = sp; //@line 4086
  return 0; //@line 4086
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 4088
 $$0 = $181; //@line 4089
 STACKTOP = sp; //@line 4090
 return $$0 | 0; //@line 4090
}
function __ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $115 = 0, $12 = 0, $120 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 19700
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19702
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19704
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19706
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19708
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19710
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19712
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 19714
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 19716
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 19718
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 19720
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 19722
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 19724
 HEAP8[$6 + 2900 >> 0] = 0; //@line 19726
 HEAP8[$6 + 2898 >> 0] = HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($2) | 0) + 14 >> 0] | 0; //@line 19731
 HEAP16[$6 + 2896 >> 1] = HEAP16[(__ZNK7LoRaMac19get_mcps_indicationEv($2) | 0) + 24 >> 1] | 0; //@line 19736
 HEAP8[$6 + 2899 >> 0] = HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($2) | 0) + 26 >> 0] | 0; //@line 19741
 if (HEAP8[(__ZNK7LoRaMac21get_mlme_confirmationEv($2) | 0) >> 0] | 0) {
  __ZN7LoRaMac25post_process_mlme_requestEv($2); //@line 19746
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(52) | 0; //@line 19747
  __ZN12LoRaWANStack20mlme_confirm_handlerEv($6); //@line 19748
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 292; //@line 19751
   $41 = $ReallocAsyncCtx3 + 4 | 0; //@line 19752
   HEAP32[$41 >> 2] = $2; //@line 19753
   $42 = $ReallocAsyncCtx3 + 8 | 0; //@line 19754
   HEAP32[$42 >> 2] = $4; //@line 19755
   $43 = $ReallocAsyncCtx3 + 12 | 0; //@line 19756
   HEAP32[$43 >> 2] = $6; //@line 19757
   $44 = $ReallocAsyncCtx3 + 16 | 0; //@line 19758
   HEAP32[$44 >> 2] = $8; //@line 19759
   $45 = $ReallocAsyncCtx3 + 20 | 0; //@line 19760
   HEAP32[$45 >> 2] = $10; //@line 19761
   $46 = $ReallocAsyncCtx3 + 24 | 0; //@line 19762
   HEAP32[$46 >> 2] = $12; //@line 19763
   $47 = $ReallocAsyncCtx3 + 28 | 0; //@line 19764
   HEAP32[$47 >> 2] = $14; //@line 19765
   $48 = $ReallocAsyncCtx3 + 32 | 0; //@line 19766
   HEAP32[$48 >> 2] = $16; //@line 19767
   $49 = $ReallocAsyncCtx3 + 36 | 0; //@line 19768
   HEAP32[$49 >> 2] = $18; //@line 19769
   $50 = $ReallocAsyncCtx3 + 40 | 0; //@line 19770
   HEAP32[$50 >> 2] = $20; //@line 19771
   $51 = $ReallocAsyncCtx3 + 44 | 0; //@line 19772
   HEAP32[$51 >> 2] = $22; //@line 19773
   $52 = $ReallocAsyncCtx3 + 48 | 0; //@line 19774
   HEAP32[$52 >> 2] = $24; //@line 19775
   sp = STACKTOP; //@line 19776
   return;
  }
  ___async_unwind = 0; //@line 19779
  HEAP32[$ReallocAsyncCtx3 >> 2] = 292; //@line 19780
  $41 = $ReallocAsyncCtx3 + 4 | 0; //@line 19781
  HEAP32[$41 >> 2] = $2; //@line 19782
  $42 = $ReallocAsyncCtx3 + 8 | 0; //@line 19783
  HEAP32[$42 >> 2] = $4; //@line 19784
  $43 = $ReallocAsyncCtx3 + 12 | 0; //@line 19785
  HEAP32[$43 >> 2] = $6; //@line 19786
  $44 = $ReallocAsyncCtx3 + 16 | 0; //@line 19787
  HEAP32[$44 >> 2] = $8; //@line 19788
  $45 = $ReallocAsyncCtx3 + 20 | 0; //@line 19789
  HEAP32[$45 >> 2] = $10; //@line 19790
  $46 = $ReallocAsyncCtx3 + 24 | 0; //@line 19791
  HEAP32[$46 >> 2] = $12; //@line 19792
  $47 = $ReallocAsyncCtx3 + 28 | 0; //@line 19793
  HEAP32[$47 >> 2] = $14; //@line 19794
  $48 = $ReallocAsyncCtx3 + 32 | 0; //@line 19795
  HEAP32[$48 >> 2] = $16; //@line 19796
  $49 = $ReallocAsyncCtx3 + 36 | 0; //@line 19797
  HEAP32[$49 >> 2] = $18; //@line 19798
  $50 = $ReallocAsyncCtx3 + 40 | 0; //@line 19799
  HEAP32[$50 >> 2] = $20; //@line 19800
  $51 = $ReallocAsyncCtx3 + 44 | 0; //@line 19801
  HEAP32[$51 >> 2] = $22; //@line 19802
  $52 = $ReallocAsyncCtx3 + 48 | 0; //@line 19803
  HEAP32[$52 >> 2] = $24; //@line 19804
  sp = STACKTOP; //@line 19805
  return;
 }
 if (!(__ZN7LoRaMac10nwk_joinedEv($2) | 0)) {
  return;
 }
 if ((HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($2) | 0) >> 2] | 0) != 1) {
  __ZN7LoRaMac21post_process_mcps_reqEv($2); //@line 19816
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 16; //@line 19819
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(36) | 0; //@line 19820
  __ZN12LoRaWANStack26process_status_check_stateEv($6); //@line 19821
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 295; //@line 19824
   $90 = $ReallocAsyncCtx5 + 4 | 0; //@line 19825
   HEAP32[$90 >> 2] = $2; //@line 19826
   $91 = $ReallocAsyncCtx5 + 8 | 0; //@line 19827
   HEAP32[$91 >> 2] = $4; //@line 19828
   $92 = $ReallocAsyncCtx5 + 12 | 0; //@line 19829
   HEAP32[$92 >> 2] = $6; //@line 19830
   $93 = $ReallocAsyncCtx5 + 16 | 0; //@line 19831
   HEAP32[$93 >> 2] = $24; //@line 19832
   $94 = $ReallocAsyncCtx5 + 20 | 0; //@line 19833
   HEAP32[$94 >> 2] = $16; //@line 19834
   $95 = $ReallocAsyncCtx5 + 24 | 0; //@line 19835
   HEAP32[$95 >> 2] = $18; //@line 19836
   $96 = $ReallocAsyncCtx5 + 28 | 0; //@line 19837
   HEAP32[$96 >> 2] = $20; //@line 19838
   $97 = $ReallocAsyncCtx5 + 32 | 0; //@line 19839
   HEAP32[$97 >> 2] = $22; //@line 19840
   sp = STACKTOP; //@line 19841
   return;
  }
  ___async_unwind = 0; //@line 19844
  HEAP32[$ReallocAsyncCtx5 >> 2] = 295; //@line 19845
  $90 = $ReallocAsyncCtx5 + 4 | 0; //@line 19846
  HEAP32[$90 >> 2] = $2; //@line 19847
  $91 = $ReallocAsyncCtx5 + 8 | 0; //@line 19848
  HEAP32[$91 >> 2] = $4; //@line 19849
  $92 = $ReallocAsyncCtx5 + 12 | 0; //@line 19850
  HEAP32[$92 >> 2] = $6; //@line 19851
  $93 = $ReallocAsyncCtx5 + 16 | 0; //@line 19852
  HEAP32[$93 >> 2] = $24; //@line 19853
  $94 = $ReallocAsyncCtx5 + 20 | 0; //@line 19854
  HEAP32[$94 >> 2] = $16; //@line 19855
  $95 = $ReallocAsyncCtx5 + 24 | 0; //@line 19856
  HEAP32[$95 >> 2] = $18; //@line 19857
  $96 = $ReallocAsyncCtx5 + 28 | 0; //@line 19858
  HEAP32[$96 >> 2] = $20; //@line 19859
  $97 = $ReallocAsyncCtx5 + 32 | 0; //@line 19860
  HEAP32[$97 >> 2] = $22; //@line 19861
  sp = STACKTOP; //@line 19862
  return;
 }
 if (HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($2) | 0) + 32 >> 0] | 0) {
  HEAP32[$12 >> 2] = HEAPU8[(__ZNK7LoRaMac21get_mcps_confirmationEv($2) | 0) + 11 >> 0]; //@line 19874
  _mbed_tracef(16, 12211, 12413, $12); //@line 19875
  __ZN7LoRaMac21post_process_mcps_reqEv($2); //@line 19876
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] & -18 | 16; //@line 19880
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(36) | 0; //@line 19881
  __ZN12LoRaWANStack26process_status_check_stateEv($6); //@line 19882
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 293; //@line 19885
   $68 = $ReallocAsyncCtx7 + 4 | 0; //@line 19886
   HEAP32[$68 >> 2] = $2; //@line 19887
   $69 = $ReallocAsyncCtx7 + 8 | 0; //@line 19888
   HEAP32[$69 >> 2] = $4; //@line 19889
   $70 = $ReallocAsyncCtx7 + 12 | 0; //@line 19890
   HEAP32[$70 >> 2] = $6; //@line 19891
   $71 = $ReallocAsyncCtx7 + 16 | 0; //@line 19892
   HEAP32[$71 >> 2] = $24; //@line 19893
   $72 = $ReallocAsyncCtx7 + 20 | 0; //@line 19894
   HEAP32[$72 >> 2] = $16; //@line 19895
   $73 = $ReallocAsyncCtx7 + 24 | 0; //@line 19896
   HEAP32[$73 >> 2] = $18; //@line 19897
   $74 = $ReallocAsyncCtx7 + 28 | 0; //@line 19898
   HEAP32[$74 >> 2] = $20; //@line 19899
   $75 = $ReallocAsyncCtx7 + 32 | 0; //@line 19900
   HEAP32[$75 >> 2] = $22; //@line 19901
   sp = STACKTOP; //@line 19902
   return;
  }
  ___async_unwind = 0; //@line 19905
  HEAP32[$ReallocAsyncCtx7 >> 2] = 293; //@line 19906
  $68 = $ReallocAsyncCtx7 + 4 | 0; //@line 19907
  HEAP32[$68 >> 2] = $2; //@line 19908
  $69 = $ReallocAsyncCtx7 + 8 | 0; //@line 19909
  HEAP32[$69 >> 2] = $4; //@line 19910
  $70 = $ReallocAsyncCtx7 + 12 | 0; //@line 19911
  HEAP32[$70 >> 2] = $6; //@line 19912
  $71 = $ReallocAsyncCtx7 + 16 | 0; //@line 19913
  HEAP32[$71 >> 2] = $24; //@line 19914
  $72 = $ReallocAsyncCtx7 + 20 | 0; //@line 19915
  HEAP32[$72 >> 2] = $16; //@line 19916
  $73 = $ReallocAsyncCtx7 + 24 | 0; //@line 19917
  HEAP32[$73 >> 2] = $18; //@line 19918
  $74 = $ReallocAsyncCtx7 + 28 | 0; //@line 19919
  HEAP32[$74 >> 2] = $20; //@line 19920
  $75 = $ReallocAsyncCtx7 + 32 | 0; //@line 19921
  HEAP32[$75 >> 2] = $22; //@line 19922
  sp = STACKTOP; //@line 19923
  return;
 }
 if (!(__ZN7LoRaMac24continue_sending_processEv($2) | 0)) {
  _mbed_tracef(2, 12211, 12216, $8); //@line 19928
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] & -18 | 1; //@line 19932
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(36) | 0; //@line 19933
  __ZN12LoRaWANStack26process_status_check_stateEv($6); //@line 19934
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 294; //@line 19937
   $80 = $ReallocAsyncCtx6 + 4 | 0; //@line 19938
   HEAP32[$80 >> 2] = $2; //@line 19939
   $81 = $ReallocAsyncCtx6 + 8 | 0; //@line 19940
   HEAP32[$81 >> 2] = $4; //@line 19941
   $82 = $ReallocAsyncCtx6 + 12 | 0; //@line 19942
   HEAP32[$82 >> 2] = $6; //@line 19943
   $83 = $ReallocAsyncCtx6 + 16 | 0; //@line 19944
   HEAP32[$83 >> 2] = $24; //@line 19945
   $84 = $ReallocAsyncCtx6 + 20 | 0; //@line 19946
   HEAP32[$84 >> 2] = $16; //@line 19947
   $85 = $ReallocAsyncCtx6 + 24 | 0; //@line 19948
   HEAP32[$85 >> 2] = $18; //@line 19949
   $86 = $ReallocAsyncCtx6 + 28 | 0; //@line 19950
   HEAP32[$86 >> 2] = $20; //@line 19951
   $87 = $ReallocAsyncCtx6 + 32 | 0; //@line 19952
   HEAP32[$87 >> 2] = $22; //@line 19953
   sp = STACKTOP; //@line 19954
   return;
  }
  ___async_unwind = 0; //@line 19957
  HEAP32[$ReallocAsyncCtx6 >> 2] = 294; //@line 19958
  $80 = $ReallocAsyncCtx6 + 4 | 0; //@line 19959
  HEAP32[$80 >> 2] = $2; //@line 19960
  $81 = $ReallocAsyncCtx6 + 8 | 0; //@line 19961
  HEAP32[$81 >> 2] = $4; //@line 19962
  $82 = $ReallocAsyncCtx6 + 12 | 0; //@line 19963
  HEAP32[$82 >> 2] = $6; //@line 19964
  $83 = $ReallocAsyncCtx6 + 16 | 0; //@line 19965
  HEAP32[$83 >> 2] = $24; //@line 19966
  $84 = $ReallocAsyncCtx6 + 20 | 0; //@line 19967
  HEAP32[$84 >> 2] = $16; //@line 19968
  $85 = $ReallocAsyncCtx6 + 24 | 0; //@line 19969
  HEAP32[$85 >> 2] = $18; //@line 19970
  $86 = $ReallocAsyncCtx6 + 28 | 0; //@line 19971
  HEAP32[$86 >> 2] = $20; //@line 19972
  $87 = $ReallocAsyncCtx6 + 32 | 0; //@line 19973
  HEAP32[$87 >> 2] = $22; //@line 19974
  sp = STACKTOP; //@line 19975
  return;
 }
 if (HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($2) | 0) >> 0] | 0) {
  __ZN7LoRaMac21post_process_mcps_indEv($2); //@line 19982
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2; //@line 19985
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(36) | 0; //@line 19986
  __ZN12LoRaWANStack26process_status_check_stateEv($6); //@line 19987
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 296; //@line 19990
   $103 = $ReallocAsyncCtx4 + 4 | 0; //@line 19991
   HEAP32[$103 >> 2] = $4; //@line 19992
   $104 = $ReallocAsyncCtx4 + 8 | 0; //@line 19993
   HEAP32[$104 >> 2] = $2; //@line 19994
   $105 = $ReallocAsyncCtx4 + 12 | 0; //@line 19995
   HEAP32[$105 >> 2] = $24; //@line 19996
   $106 = $ReallocAsyncCtx4 + 16 | 0; //@line 19997
   HEAP32[$106 >> 2] = $6; //@line 19998
   $107 = $ReallocAsyncCtx4 + 20 | 0; //@line 19999
   HEAP32[$107 >> 2] = $16; //@line 20000
   $108 = $ReallocAsyncCtx4 + 24 | 0; //@line 20001
   HEAP32[$108 >> 2] = $18; //@line 20002
   $109 = $ReallocAsyncCtx4 + 28 | 0; //@line 20003
   HEAP32[$109 >> 2] = $20; //@line 20004
   $110 = $ReallocAsyncCtx4 + 32 | 0; //@line 20005
   HEAP32[$110 >> 2] = $22; //@line 20006
   sp = STACKTOP; //@line 20007
   return;
  }
  ___async_unwind = 0; //@line 20010
  HEAP32[$ReallocAsyncCtx4 >> 2] = 296; //@line 20011
  $103 = $ReallocAsyncCtx4 + 4 | 0; //@line 20012
  HEAP32[$103 >> 2] = $4; //@line 20013
  $104 = $ReallocAsyncCtx4 + 8 | 0; //@line 20014
  HEAP32[$104 >> 2] = $2; //@line 20015
  $105 = $ReallocAsyncCtx4 + 12 | 0; //@line 20016
  HEAP32[$105 >> 2] = $24; //@line 20017
  $106 = $ReallocAsyncCtx4 + 16 | 0; //@line 20018
  HEAP32[$106 >> 2] = $6; //@line 20019
  $107 = $ReallocAsyncCtx4 + 20 | 0; //@line 20020
  HEAP32[$107 >> 2] = $16; //@line 20021
  $108 = $ReallocAsyncCtx4 + 24 | 0; //@line 20022
  HEAP32[$108 >> 2] = $18; //@line 20023
  $109 = $ReallocAsyncCtx4 + 28 | 0; //@line 20024
  HEAP32[$109 >> 2] = $20; //@line 20025
  $110 = $ReallocAsyncCtx4 + 32 | 0; //@line 20026
  HEAP32[$110 >> 2] = $22; //@line 20027
  sp = STACKTOP; //@line 20028
  return;
 }
 if (!(HEAP32[$4 >> 2] & 1)) {
  $115 = (__ZNK7LoRaMac16get_device_classEv($2) | 0) == 2; //@line 20036
  HEAP32[$24 >> 2] = $115 ? 5 : 2; //@line 20038
 }
 if (!(HEAP8[(__ZNK7LoRaMac19get_mlme_indicationEv($2) | 0) + 4 >> 0] | 0)) {
  HEAP8[$6 + 2911 >> 0] = 1; //@line 20046
  return;
 }
 _mbed_tracef(16, 12211, 12433, $16); //@line 20049
 __ZN7LoRaMac21post_process_mlme_indEv($2); //@line 20050
 _mbed_tracef(16, 12211, 12457, $20); //@line 20051
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 20052
 __ZN12LoRaWANStack23mlme_indication_handlerEv($6); //@line 20053
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 297; //@line 20056
  $120 = $ReallocAsyncCtx2 + 4 | 0; //@line 20057
  HEAP32[$120 >> 2] = $6; //@line 20058
  sp = STACKTOP; //@line 20059
  return;
 }
 ___async_unwind = 0; //@line 20062
 HEAP32[$ReallocAsyncCtx2 >> 2] = 297; //@line 20063
 $120 = $ReallocAsyncCtx2 + 4 | 0; //@line 20064
 HEAP32[$120 >> 2] = $6; //@line 20065
 sp = STACKTOP; //@line 20066
 return;
}
function __ZN7LoRaPHY13apply_cf_listEPKhh__async_cb_404($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $42 = 0, $43 = 0, $58 = 0, $59 = 0, $6 = 0, $65 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 28488
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28490
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28494
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28498
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28500
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28502
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28504
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 28506
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 28508
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 28510
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 28512
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 28514
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 28516
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 28518
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 28520
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 28522
 $36 = (HEAP8[$0 + 16 >> 0] | 0) + 1 << 24 >> 24; //@line 28523
 if (($36 & 255) >= (HEAPU8[$10 >> 0] | 0)) {
  return;
 }
 $43 = (HEAPU8[$0 + 8 >> 0] | 0) + 3 & 255; //@line 28531
 if (((HEAPU8[$6 >> 0] | 0) + (HEAPU8[$22 >> 0] | 0) | 0) >>> 0 > ($36 & 255) >>> 0) {
  $42 = $43 & 255; //@line 28540
  $58 = HEAPU8[$14 + ($42 + 2) >> 0] << 16 | (HEAPU8[$14 + ($42 + 1) >> 0] << 8 | HEAPU8[$14 + $42 >> 0]); //@line 28555
  $59 = $58 * 100 | 0; //@line 28556
  HEAP32[$16 >> 2] = $59; //@line 28557
  HEAP32[$18 >> 2] = 0; //@line 28558
  if ($58 | 0) {
   if (!(HEAP8[$12 >> 0] | 0)) {
    HEAP8[$28 >> 0] = -1; //@line 28565
    $91 = HEAP32[(HEAP32[$30 >> 2] | 0) + 60 >> 2] | 0; //@line 28568
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(72) | 0; //@line 28569
    FUNCTION_TABLE_iiii[$91 & 31]($26, $32, $36) | 0; //@line 28570
    if (___async) {
     HEAP32[$ReallocAsyncCtx2 >> 2] = 516; //@line 28573
     $92 = $ReallocAsyncCtx2 + 4 | 0; //@line 28574
     HEAP32[$92 >> 2] = $2; //@line 28575
     $93 = $ReallocAsyncCtx2 + 8 | 0; //@line 28576
     HEAP8[$93 >> 0] = $43; //@line 28577
     $94 = $ReallocAsyncCtx2 + 12 | 0; //@line 28578
     HEAP32[$94 >> 2] = $6; //@line 28579
     $95 = $ReallocAsyncCtx2 + 16 | 0; //@line 28580
     HEAP8[$95 >> 0] = $36; //@line 28581
     $96 = $ReallocAsyncCtx2 + 20 | 0; //@line 28582
     HEAP32[$96 >> 2] = $10; //@line 28583
     $97 = $ReallocAsyncCtx2 + 24 | 0; //@line 28584
     HEAP32[$97 >> 2] = $12; //@line 28585
     $98 = $ReallocAsyncCtx2 + 28 | 0; //@line 28586
     HEAP32[$98 >> 2] = $14; //@line 28587
     $99 = $ReallocAsyncCtx2 + 32 | 0; //@line 28588
     HEAP32[$99 >> 2] = $16; //@line 28589
     $100 = $ReallocAsyncCtx2 + 36 | 0; //@line 28590
     HEAP32[$100 >> 2] = $18; //@line 28591
     $101 = $ReallocAsyncCtx2 + 40 | 0; //@line 28592
     HEAP32[$101 >> 2] = $20; //@line 28593
     $102 = $ReallocAsyncCtx2 + 44 | 0; //@line 28594
     HEAP32[$102 >> 2] = $22; //@line 28595
     $103 = $ReallocAsyncCtx2 + 48 | 0; //@line 28596
     HEAP32[$103 >> 2] = $24; //@line 28597
     $104 = $ReallocAsyncCtx2 + 52 | 0; //@line 28598
     HEAP32[$104 >> 2] = $26; //@line 28599
     $105 = $ReallocAsyncCtx2 + 56 | 0; //@line 28600
     HEAP32[$105 >> 2] = $28; //@line 28601
     $106 = $ReallocAsyncCtx2 + 60 | 0; //@line 28602
     HEAP32[$106 >> 2] = $30; //@line 28603
     $107 = $ReallocAsyncCtx2 + 64 | 0; //@line 28604
     HEAP32[$107 >> 2] = $32; //@line 28605
     $108 = $ReallocAsyncCtx2 + 68 | 0; //@line 28606
     HEAP32[$108 >> 2] = $34; //@line 28607
     sp = STACKTOP; //@line 28608
     return;
    }
    ___async_unwind = 0; //@line 28611
    HEAP32[$ReallocAsyncCtx2 >> 2] = 516; //@line 28612
    $92 = $ReallocAsyncCtx2 + 4 | 0; //@line 28613
    HEAP32[$92 >> 2] = $2; //@line 28614
    $93 = $ReallocAsyncCtx2 + 8 | 0; //@line 28615
    HEAP8[$93 >> 0] = $43; //@line 28616
    $94 = $ReallocAsyncCtx2 + 12 | 0; //@line 28617
    HEAP32[$94 >> 2] = $6; //@line 28618
    $95 = $ReallocAsyncCtx2 + 16 | 0; //@line 28619
    HEAP8[$95 >> 0] = $36; //@line 28620
    $96 = $ReallocAsyncCtx2 + 20 | 0; //@line 28621
    HEAP32[$96 >> 2] = $10; //@line 28622
    $97 = $ReallocAsyncCtx2 + 24 | 0; //@line 28623
    HEAP32[$97 >> 2] = $12; //@line 28624
    $98 = $ReallocAsyncCtx2 + 28 | 0; //@line 28625
    HEAP32[$98 >> 2] = $14; //@line 28626
    $99 = $ReallocAsyncCtx2 + 32 | 0; //@line 28627
    HEAP32[$99 >> 2] = $16; //@line 28628
    $100 = $ReallocAsyncCtx2 + 36 | 0; //@line 28629
    HEAP32[$100 >> 2] = $18; //@line 28630
    $101 = $ReallocAsyncCtx2 + 40 | 0; //@line 28631
    HEAP32[$101 >> 2] = $20; //@line 28632
    $102 = $ReallocAsyncCtx2 + 44 | 0; //@line 28633
    HEAP32[$102 >> 2] = $22; //@line 28634
    $103 = $ReallocAsyncCtx2 + 48 | 0; //@line 28635
    HEAP32[$103 >> 2] = $24; //@line 28636
    $104 = $ReallocAsyncCtx2 + 52 | 0; //@line 28637
    HEAP32[$104 >> 2] = $26; //@line 28638
    $105 = $ReallocAsyncCtx2 + 56 | 0; //@line 28639
    HEAP32[$105 >> 2] = $28; //@line 28640
    $106 = $ReallocAsyncCtx2 + 60 | 0; //@line 28641
    HEAP32[$106 >> 2] = $30; //@line 28642
    $107 = $ReallocAsyncCtx2 + 64 | 0; //@line 28643
    HEAP32[$107 >> 2] = $32; //@line 28644
    $108 = $ReallocAsyncCtx2 + 68 | 0; //@line 28645
    HEAP32[$108 >> 2] = $34; //@line 28646
    sp = STACKTOP; //@line 28647
    return;
   } else {
    $65 = HEAP32[(HEAP32[$34 >> 2] | 0) + 76 >> 2] | 0; //@line 28652
    $ReallocAsyncCtx = _emscripten_realloc_async_context(80) | 0; //@line 28654
    $67 = FUNCTION_TABLE_iiii[$65 & 31]($26, $59, 0) | 0; //@line 28655
    if (___async) {
     HEAP32[$ReallocAsyncCtx >> 2] = 515; //@line 28658
     $68 = $ReallocAsyncCtx + 4 | 0; //@line 28659
     HEAP32[$68 >> 2] = $2; //@line 28660
     $69 = $ReallocAsyncCtx + 8 | 0; //@line 28661
     HEAP8[$69 >> 0] = $43; //@line 28662
     $70 = $ReallocAsyncCtx + 12 | 0; //@line 28663
     HEAP32[$70 >> 2] = $6; //@line 28664
     $71 = $ReallocAsyncCtx + 16 | 0; //@line 28665
     HEAP8[$71 >> 0] = $36; //@line 28666
     $72 = $ReallocAsyncCtx + 20 | 0; //@line 28667
     HEAP32[$72 >> 2] = $10; //@line 28668
     $73 = $ReallocAsyncCtx + 24 | 0; //@line 28669
     HEAP32[$73 >> 2] = $12; //@line 28670
     $74 = $ReallocAsyncCtx + 28 | 0; //@line 28671
     HEAP32[$74 >> 2] = $14; //@line 28672
     $75 = $ReallocAsyncCtx + 32 | 0; //@line 28673
     HEAP32[$75 >> 2] = $16; //@line 28674
     $76 = $ReallocAsyncCtx + 36 | 0; //@line 28675
     HEAP32[$76 >> 2] = $18; //@line 28676
     $77 = $ReallocAsyncCtx + 40 | 0; //@line 28677
     HEAP32[$77 >> 2] = $20; //@line 28678
     $78 = $ReallocAsyncCtx + 44 | 0; //@line 28679
     HEAP32[$78 >> 2] = $22; //@line 28680
     $79 = $ReallocAsyncCtx + 48 | 0; //@line 28681
     HEAP32[$79 >> 2] = $24; //@line 28682
     $80 = $ReallocAsyncCtx + 52 | 0; //@line 28683
     HEAP32[$80 >> 2] = $26; //@line 28684
     $81 = $ReallocAsyncCtx + 56 | 0; //@line 28685
     HEAP32[$81 >> 2] = 0; //@line 28686
     $82 = $ReallocAsyncCtx + 60 | 0; //@line 28687
     HEAP32[$82 >> 2] = $28; //@line 28688
     $83 = $ReallocAsyncCtx + 64 | 0; //@line 28689
     HEAP32[$83 >> 2] = $30; //@line 28690
     $84 = $ReallocAsyncCtx + 68 | 0; //@line 28691
     HEAP32[$84 >> 2] = $32; //@line 28692
     $85 = $ReallocAsyncCtx + 72 | 0; //@line 28693
     HEAP32[$85 >> 2] = $34; //@line 28694
     $86 = $ReallocAsyncCtx + 76 | 0; //@line 28695
     HEAP32[$86 >> 2] = $59; //@line 28696
     sp = STACKTOP; //@line 28697
     return;
    }
    HEAP8[___async_retval >> 0] = $67 & 1; //@line 28702
    ___async_unwind = 0; //@line 28703
    HEAP32[$ReallocAsyncCtx >> 2] = 515; //@line 28704
    $68 = $ReallocAsyncCtx + 4 | 0; //@line 28705
    HEAP32[$68 >> 2] = $2; //@line 28706
    $69 = $ReallocAsyncCtx + 8 | 0; //@line 28707
    HEAP8[$69 >> 0] = $43; //@line 28708
    $70 = $ReallocAsyncCtx + 12 | 0; //@line 28709
    HEAP32[$70 >> 2] = $6; //@line 28710
    $71 = $ReallocAsyncCtx + 16 | 0; //@line 28711
    HEAP8[$71 >> 0] = $36; //@line 28712
    $72 = $ReallocAsyncCtx + 20 | 0; //@line 28713
    HEAP32[$72 >> 2] = $10; //@line 28714
    $73 = $ReallocAsyncCtx + 24 | 0; //@line 28715
    HEAP32[$73 >> 2] = $12; //@line 28716
    $74 = $ReallocAsyncCtx + 28 | 0; //@line 28717
    HEAP32[$74 >> 2] = $14; //@line 28718
    $75 = $ReallocAsyncCtx + 32 | 0; //@line 28719
    HEAP32[$75 >> 2] = $16; //@line 28720
    $76 = $ReallocAsyncCtx + 36 | 0; //@line 28721
    HEAP32[$76 >> 2] = $18; //@line 28722
    $77 = $ReallocAsyncCtx + 40 | 0; //@line 28723
    HEAP32[$77 >> 2] = $20; //@line 28724
    $78 = $ReallocAsyncCtx + 44 | 0; //@line 28725
    HEAP32[$78 >> 2] = $22; //@line 28726
    $79 = $ReallocAsyncCtx + 48 | 0; //@line 28727
    HEAP32[$79 >> 2] = $24; //@line 28728
    $80 = $ReallocAsyncCtx + 52 | 0; //@line 28729
    HEAP32[$80 >> 2] = $26; //@line 28730
    $81 = $ReallocAsyncCtx + 56 | 0; //@line 28731
    HEAP32[$81 >> 2] = 0; //@line 28732
    $82 = $ReallocAsyncCtx + 60 | 0; //@line 28733
    HEAP32[$82 >> 2] = $28; //@line 28734
    $83 = $ReallocAsyncCtx + 64 | 0; //@line 28735
    HEAP32[$83 >> 2] = $30; //@line 28736
    $84 = $ReallocAsyncCtx + 68 | 0; //@line 28737
    HEAP32[$84 >> 2] = $32; //@line 28738
    $85 = $ReallocAsyncCtx + 72 | 0; //@line 28739
    HEAP32[$85 >> 2] = $34; //@line 28740
    $86 = $ReallocAsyncCtx + 76 | 0; //@line 28741
    HEAP32[$86 >> 2] = $59; //@line 28742
    sp = STACKTOP; //@line 28743
    return;
   }
  }
 } else {
  HEAP32[$16 >> 2] = 0; //@line 28748
  HEAP8[$20 >> 0] = 0; //@line 28749
  HEAP32[$18 >> 2] = 0; //@line 28750
 }
 $111 = HEAP32[(HEAP32[$24 >> 2] | 0) + 64 >> 2] | 0; //@line 28754
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(72) | 0; //@line 28755
 FUNCTION_TABLE_iii[$111 & 31]($26, $36) | 0; //@line 28756
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 517; //@line 28759
  $112 = $ReallocAsyncCtx3 + 4 | 0; //@line 28760
  HEAP32[$112 >> 2] = $2; //@line 28761
  $113 = $ReallocAsyncCtx3 + 8 | 0; //@line 28762
  HEAP8[$113 >> 0] = $43; //@line 28763
  $114 = $ReallocAsyncCtx3 + 12 | 0; //@line 28764
  HEAP32[$114 >> 2] = $6; //@line 28765
  $115 = $ReallocAsyncCtx3 + 16 | 0; //@line 28766
  HEAP8[$115 >> 0] = $36; //@line 28767
  $116 = $ReallocAsyncCtx3 + 20 | 0; //@line 28768
  HEAP32[$116 >> 2] = $10; //@line 28769
  $117 = $ReallocAsyncCtx3 + 24 | 0; //@line 28770
  HEAP32[$117 >> 2] = $12; //@line 28771
  $118 = $ReallocAsyncCtx3 + 28 | 0; //@line 28772
  HEAP32[$118 >> 2] = $14; //@line 28773
  $119 = $ReallocAsyncCtx3 + 32 | 0; //@line 28774
  HEAP32[$119 >> 2] = $16; //@line 28775
  $120 = $ReallocAsyncCtx3 + 36 | 0; //@line 28776
  HEAP32[$120 >> 2] = $18; //@line 28777
  $121 = $ReallocAsyncCtx3 + 40 | 0; //@line 28778
  HEAP32[$121 >> 2] = $20; //@line 28779
  $122 = $ReallocAsyncCtx3 + 44 | 0; //@line 28780
  HEAP32[$122 >> 2] = $22; //@line 28781
  $123 = $ReallocAsyncCtx3 + 48 | 0; //@line 28782
  HEAP32[$123 >> 2] = $24; //@line 28783
  $124 = $ReallocAsyncCtx3 + 52 | 0; //@line 28784
  HEAP32[$124 >> 2] = $26; //@line 28785
  $125 = $ReallocAsyncCtx3 + 56 | 0; //@line 28786
  HEAP32[$125 >> 2] = $28; //@line 28787
  $126 = $ReallocAsyncCtx3 + 60 | 0; //@line 28788
  HEAP32[$126 >> 2] = $30; //@line 28789
  $127 = $ReallocAsyncCtx3 + 64 | 0; //@line 28790
  HEAP32[$127 >> 2] = $32; //@line 28791
  $128 = $ReallocAsyncCtx3 + 68 | 0; //@line 28792
  HEAP32[$128 >> 2] = $34; //@line 28793
  sp = STACKTOP; //@line 28794
  return;
 }
 ___async_unwind = 0; //@line 28797
 HEAP32[$ReallocAsyncCtx3 >> 2] = 517; //@line 28798
 $112 = $ReallocAsyncCtx3 + 4 | 0; //@line 28799
 HEAP32[$112 >> 2] = $2; //@line 28800
 $113 = $ReallocAsyncCtx3 + 8 | 0; //@line 28801
 HEAP8[$113 >> 0] = $43; //@line 28802
 $114 = $ReallocAsyncCtx3 + 12 | 0; //@line 28803
 HEAP32[$114 >> 2] = $6; //@line 28804
 $115 = $ReallocAsyncCtx3 + 16 | 0; //@line 28805
 HEAP8[$115 >> 0] = $36; //@line 28806
 $116 = $ReallocAsyncCtx3 + 20 | 0; //@line 28807
 HEAP32[$116 >> 2] = $10; //@line 28808
 $117 = $ReallocAsyncCtx3 + 24 | 0; //@line 28809
 HEAP32[$117 >> 2] = $12; //@line 28810
 $118 = $ReallocAsyncCtx3 + 28 | 0; //@line 28811
 HEAP32[$118 >> 2] = $14; //@line 28812
 $119 = $ReallocAsyncCtx3 + 32 | 0; //@line 28813
 HEAP32[$119 >> 2] = $16; //@line 28814
 $120 = $ReallocAsyncCtx3 + 36 | 0; //@line 28815
 HEAP32[$120 >> 2] = $18; //@line 28816
 $121 = $ReallocAsyncCtx3 + 40 | 0; //@line 28817
 HEAP32[$121 >> 2] = $20; //@line 28818
 $122 = $ReallocAsyncCtx3 + 44 | 0; //@line 28819
 HEAP32[$122 >> 2] = $22; //@line 28820
 $123 = $ReallocAsyncCtx3 + 48 | 0; //@line 28821
 HEAP32[$123 >> 2] = $24; //@line 28822
 $124 = $ReallocAsyncCtx3 + 52 | 0; //@line 28823
 HEAP32[$124 >> 2] = $26; //@line 28824
 $125 = $ReallocAsyncCtx3 + 56 | 0; //@line 28825
 HEAP32[$125 >> 2] = $28; //@line 28826
 $126 = $ReallocAsyncCtx3 + 60 | 0; //@line 28827
 HEAP32[$126 >> 2] = $30; //@line 28828
 $127 = $ReallocAsyncCtx3 + 64 | 0; //@line 28829
 HEAP32[$127 >> 2] = $32; //@line 28830
 $128 = $ReallocAsyncCtx3 + 68 | 0; //@line 28831
 HEAP32[$128 >> 2] = $34; //@line 28832
 sp = STACKTOP; //@line 28833
 return;
}
function __ZN7LoRaPHY13apply_cf_listEPKhh__async_cb_403($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $42 = 0, $43 = 0, $58 = 0, $59 = 0, $6 = 0, $65 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 28130
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28132
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28136
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28140
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28142
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28144
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28146
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 28148
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 28150
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 28152
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 28154
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 28156
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 28158
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 28160
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 28162
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 28164
 $36 = (HEAP8[$0 + 16 >> 0] | 0) + 1 << 24 >> 24; //@line 28165
 if (($36 & 255) >= (HEAPU8[$10 >> 0] | 0)) {
  return;
 }
 $43 = (HEAPU8[$0 + 8 >> 0] | 0) + 3 & 255; //@line 28173
 if (((HEAPU8[$6 >> 0] | 0) + (HEAPU8[$22 >> 0] | 0) | 0) >>> 0 > ($36 & 255) >>> 0) {
  $42 = $43 & 255; //@line 28182
  $58 = HEAPU8[$14 + ($42 + 2) >> 0] << 16 | (HEAPU8[$14 + ($42 + 1) >> 0] << 8 | HEAPU8[$14 + $42 >> 0]); //@line 28197
  $59 = $58 * 100 | 0; //@line 28198
  HEAP32[$16 >> 2] = $59; //@line 28199
  HEAP32[$18 >> 2] = 0; //@line 28200
  if ($58 | 0) {
   if (!(HEAP8[$12 >> 0] | 0)) {
    HEAP8[$28 >> 0] = -1; //@line 28207
    $91 = HEAP32[(HEAP32[$30 >> 2] | 0) + 60 >> 2] | 0; //@line 28210
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(72) | 0; //@line 28211
    FUNCTION_TABLE_iiii[$91 & 31]($26, $32, $36) | 0; //@line 28212
    if (___async) {
     HEAP32[$ReallocAsyncCtx2 >> 2] = 516; //@line 28215
     $92 = $ReallocAsyncCtx2 + 4 | 0; //@line 28216
     HEAP32[$92 >> 2] = $2; //@line 28217
     $93 = $ReallocAsyncCtx2 + 8 | 0; //@line 28218
     HEAP8[$93 >> 0] = $43; //@line 28219
     $94 = $ReallocAsyncCtx2 + 12 | 0; //@line 28220
     HEAP32[$94 >> 2] = $6; //@line 28221
     $95 = $ReallocAsyncCtx2 + 16 | 0; //@line 28222
     HEAP8[$95 >> 0] = $36; //@line 28223
     $96 = $ReallocAsyncCtx2 + 20 | 0; //@line 28224
     HEAP32[$96 >> 2] = $10; //@line 28225
     $97 = $ReallocAsyncCtx2 + 24 | 0; //@line 28226
     HEAP32[$97 >> 2] = $12; //@line 28227
     $98 = $ReallocAsyncCtx2 + 28 | 0; //@line 28228
     HEAP32[$98 >> 2] = $14; //@line 28229
     $99 = $ReallocAsyncCtx2 + 32 | 0; //@line 28230
     HEAP32[$99 >> 2] = $16; //@line 28231
     $100 = $ReallocAsyncCtx2 + 36 | 0; //@line 28232
     HEAP32[$100 >> 2] = $18; //@line 28233
     $101 = $ReallocAsyncCtx2 + 40 | 0; //@line 28234
     HEAP32[$101 >> 2] = $20; //@line 28235
     $102 = $ReallocAsyncCtx2 + 44 | 0; //@line 28236
     HEAP32[$102 >> 2] = $22; //@line 28237
     $103 = $ReallocAsyncCtx2 + 48 | 0; //@line 28238
     HEAP32[$103 >> 2] = $24; //@line 28239
     $104 = $ReallocAsyncCtx2 + 52 | 0; //@line 28240
     HEAP32[$104 >> 2] = $26; //@line 28241
     $105 = $ReallocAsyncCtx2 + 56 | 0; //@line 28242
     HEAP32[$105 >> 2] = $28; //@line 28243
     $106 = $ReallocAsyncCtx2 + 60 | 0; //@line 28244
     HEAP32[$106 >> 2] = $30; //@line 28245
     $107 = $ReallocAsyncCtx2 + 64 | 0; //@line 28246
     HEAP32[$107 >> 2] = $32; //@line 28247
     $108 = $ReallocAsyncCtx2 + 68 | 0; //@line 28248
     HEAP32[$108 >> 2] = $34; //@line 28249
     sp = STACKTOP; //@line 28250
     return;
    }
    ___async_unwind = 0; //@line 28253
    HEAP32[$ReallocAsyncCtx2 >> 2] = 516; //@line 28254
    $92 = $ReallocAsyncCtx2 + 4 | 0; //@line 28255
    HEAP32[$92 >> 2] = $2; //@line 28256
    $93 = $ReallocAsyncCtx2 + 8 | 0; //@line 28257
    HEAP8[$93 >> 0] = $43; //@line 28258
    $94 = $ReallocAsyncCtx2 + 12 | 0; //@line 28259
    HEAP32[$94 >> 2] = $6; //@line 28260
    $95 = $ReallocAsyncCtx2 + 16 | 0; //@line 28261
    HEAP8[$95 >> 0] = $36; //@line 28262
    $96 = $ReallocAsyncCtx2 + 20 | 0; //@line 28263
    HEAP32[$96 >> 2] = $10; //@line 28264
    $97 = $ReallocAsyncCtx2 + 24 | 0; //@line 28265
    HEAP32[$97 >> 2] = $12; //@line 28266
    $98 = $ReallocAsyncCtx2 + 28 | 0; //@line 28267
    HEAP32[$98 >> 2] = $14; //@line 28268
    $99 = $ReallocAsyncCtx2 + 32 | 0; //@line 28269
    HEAP32[$99 >> 2] = $16; //@line 28270
    $100 = $ReallocAsyncCtx2 + 36 | 0; //@line 28271
    HEAP32[$100 >> 2] = $18; //@line 28272
    $101 = $ReallocAsyncCtx2 + 40 | 0; //@line 28273
    HEAP32[$101 >> 2] = $20; //@line 28274
    $102 = $ReallocAsyncCtx2 + 44 | 0; //@line 28275
    HEAP32[$102 >> 2] = $22; //@line 28276
    $103 = $ReallocAsyncCtx2 + 48 | 0; //@line 28277
    HEAP32[$103 >> 2] = $24; //@line 28278
    $104 = $ReallocAsyncCtx2 + 52 | 0; //@line 28279
    HEAP32[$104 >> 2] = $26; //@line 28280
    $105 = $ReallocAsyncCtx2 + 56 | 0; //@line 28281
    HEAP32[$105 >> 2] = $28; //@line 28282
    $106 = $ReallocAsyncCtx2 + 60 | 0; //@line 28283
    HEAP32[$106 >> 2] = $30; //@line 28284
    $107 = $ReallocAsyncCtx2 + 64 | 0; //@line 28285
    HEAP32[$107 >> 2] = $32; //@line 28286
    $108 = $ReallocAsyncCtx2 + 68 | 0; //@line 28287
    HEAP32[$108 >> 2] = $34; //@line 28288
    sp = STACKTOP; //@line 28289
    return;
   } else {
    $65 = HEAP32[(HEAP32[$34 >> 2] | 0) + 76 >> 2] | 0; //@line 28294
    $ReallocAsyncCtx = _emscripten_realloc_async_context(80) | 0; //@line 28296
    $67 = FUNCTION_TABLE_iiii[$65 & 31]($26, $59, 0) | 0; //@line 28297
    if (___async) {
     HEAP32[$ReallocAsyncCtx >> 2] = 515; //@line 28300
     $68 = $ReallocAsyncCtx + 4 | 0; //@line 28301
     HEAP32[$68 >> 2] = $2; //@line 28302
     $69 = $ReallocAsyncCtx + 8 | 0; //@line 28303
     HEAP8[$69 >> 0] = $43; //@line 28304
     $70 = $ReallocAsyncCtx + 12 | 0; //@line 28305
     HEAP32[$70 >> 2] = $6; //@line 28306
     $71 = $ReallocAsyncCtx + 16 | 0; //@line 28307
     HEAP8[$71 >> 0] = $36; //@line 28308
     $72 = $ReallocAsyncCtx + 20 | 0; //@line 28309
     HEAP32[$72 >> 2] = $10; //@line 28310
     $73 = $ReallocAsyncCtx + 24 | 0; //@line 28311
     HEAP32[$73 >> 2] = $12; //@line 28312
     $74 = $ReallocAsyncCtx + 28 | 0; //@line 28313
     HEAP32[$74 >> 2] = $14; //@line 28314
     $75 = $ReallocAsyncCtx + 32 | 0; //@line 28315
     HEAP32[$75 >> 2] = $16; //@line 28316
     $76 = $ReallocAsyncCtx + 36 | 0; //@line 28317
     HEAP32[$76 >> 2] = $18; //@line 28318
     $77 = $ReallocAsyncCtx + 40 | 0; //@line 28319
     HEAP32[$77 >> 2] = $20; //@line 28320
     $78 = $ReallocAsyncCtx + 44 | 0; //@line 28321
     HEAP32[$78 >> 2] = $22; //@line 28322
     $79 = $ReallocAsyncCtx + 48 | 0; //@line 28323
     HEAP32[$79 >> 2] = $24; //@line 28324
     $80 = $ReallocAsyncCtx + 52 | 0; //@line 28325
     HEAP32[$80 >> 2] = $26; //@line 28326
     $81 = $ReallocAsyncCtx + 56 | 0; //@line 28327
     HEAP32[$81 >> 2] = 0; //@line 28328
     $82 = $ReallocAsyncCtx + 60 | 0; //@line 28329
     HEAP32[$82 >> 2] = $28; //@line 28330
     $83 = $ReallocAsyncCtx + 64 | 0; //@line 28331
     HEAP32[$83 >> 2] = $30; //@line 28332
     $84 = $ReallocAsyncCtx + 68 | 0; //@line 28333
     HEAP32[$84 >> 2] = $32; //@line 28334
     $85 = $ReallocAsyncCtx + 72 | 0; //@line 28335
     HEAP32[$85 >> 2] = $34; //@line 28336
     $86 = $ReallocAsyncCtx + 76 | 0; //@line 28337
     HEAP32[$86 >> 2] = $59; //@line 28338
     sp = STACKTOP; //@line 28339
     return;
    }
    HEAP8[___async_retval >> 0] = $67 & 1; //@line 28344
    ___async_unwind = 0; //@line 28345
    HEAP32[$ReallocAsyncCtx >> 2] = 515; //@line 28346
    $68 = $ReallocAsyncCtx + 4 | 0; //@line 28347
    HEAP32[$68 >> 2] = $2; //@line 28348
    $69 = $ReallocAsyncCtx + 8 | 0; //@line 28349
    HEAP8[$69 >> 0] = $43; //@line 28350
    $70 = $ReallocAsyncCtx + 12 | 0; //@line 28351
    HEAP32[$70 >> 2] = $6; //@line 28352
    $71 = $ReallocAsyncCtx + 16 | 0; //@line 28353
    HEAP8[$71 >> 0] = $36; //@line 28354
    $72 = $ReallocAsyncCtx + 20 | 0; //@line 28355
    HEAP32[$72 >> 2] = $10; //@line 28356
    $73 = $ReallocAsyncCtx + 24 | 0; //@line 28357
    HEAP32[$73 >> 2] = $12; //@line 28358
    $74 = $ReallocAsyncCtx + 28 | 0; //@line 28359
    HEAP32[$74 >> 2] = $14; //@line 28360
    $75 = $ReallocAsyncCtx + 32 | 0; //@line 28361
    HEAP32[$75 >> 2] = $16; //@line 28362
    $76 = $ReallocAsyncCtx + 36 | 0; //@line 28363
    HEAP32[$76 >> 2] = $18; //@line 28364
    $77 = $ReallocAsyncCtx + 40 | 0; //@line 28365
    HEAP32[$77 >> 2] = $20; //@line 28366
    $78 = $ReallocAsyncCtx + 44 | 0; //@line 28367
    HEAP32[$78 >> 2] = $22; //@line 28368
    $79 = $ReallocAsyncCtx + 48 | 0; //@line 28369
    HEAP32[$79 >> 2] = $24; //@line 28370
    $80 = $ReallocAsyncCtx + 52 | 0; //@line 28371
    HEAP32[$80 >> 2] = $26; //@line 28372
    $81 = $ReallocAsyncCtx + 56 | 0; //@line 28373
    HEAP32[$81 >> 2] = 0; //@line 28374
    $82 = $ReallocAsyncCtx + 60 | 0; //@line 28375
    HEAP32[$82 >> 2] = $28; //@line 28376
    $83 = $ReallocAsyncCtx + 64 | 0; //@line 28377
    HEAP32[$83 >> 2] = $30; //@line 28378
    $84 = $ReallocAsyncCtx + 68 | 0; //@line 28379
    HEAP32[$84 >> 2] = $32; //@line 28380
    $85 = $ReallocAsyncCtx + 72 | 0; //@line 28381
    HEAP32[$85 >> 2] = $34; //@line 28382
    $86 = $ReallocAsyncCtx + 76 | 0; //@line 28383
    HEAP32[$86 >> 2] = $59; //@line 28384
    sp = STACKTOP; //@line 28385
    return;
   }
  }
 } else {
  HEAP32[$16 >> 2] = 0; //@line 28390
  HEAP8[$20 >> 0] = 0; //@line 28391
  HEAP32[$18 >> 2] = 0; //@line 28392
 }
 $111 = HEAP32[(HEAP32[$24 >> 2] | 0) + 64 >> 2] | 0; //@line 28396
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(72) | 0; //@line 28397
 FUNCTION_TABLE_iii[$111 & 31]($26, $36) | 0; //@line 28398
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 517; //@line 28401
  $112 = $ReallocAsyncCtx3 + 4 | 0; //@line 28402
  HEAP32[$112 >> 2] = $2; //@line 28403
  $113 = $ReallocAsyncCtx3 + 8 | 0; //@line 28404
  HEAP8[$113 >> 0] = $43; //@line 28405
  $114 = $ReallocAsyncCtx3 + 12 | 0; //@line 28406
  HEAP32[$114 >> 2] = $6; //@line 28407
  $115 = $ReallocAsyncCtx3 + 16 | 0; //@line 28408
  HEAP8[$115 >> 0] = $36; //@line 28409
  $116 = $ReallocAsyncCtx3 + 20 | 0; //@line 28410
  HEAP32[$116 >> 2] = $10; //@line 28411
  $117 = $ReallocAsyncCtx3 + 24 | 0; //@line 28412
  HEAP32[$117 >> 2] = $12; //@line 28413
  $118 = $ReallocAsyncCtx3 + 28 | 0; //@line 28414
  HEAP32[$118 >> 2] = $14; //@line 28415
  $119 = $ReallocAsyncCtx3 + 32 | 0; //@line 28416
  HEAP32[$119 >> 2] = $16; //@line 28417
  $120 = $ReallocAsyncCtx3 + 36 | 0; //@line 28418
  HEAP32[$120 >> 2] = $18; //@line 28419
  $121 = $ReallocAsyncCtx3 + 40 | 0; //@line 28420
  HEAP32[$121 >> 2] = $20; //@line 28421
  $122 = $ReallocAsyncCtx3 + 44 | 0; //@line 28422
  HEAP32[$122 >> 2] = $22; //@line 28423
  $123 = $ReallocAsyncCtx3 + 48 | 0; //@line 28424
  HEAP32[$123 >> 2] = $24; //@line 28425
  $124 = $ReallocAsyncCtx3 + 52 | 0; //@line 28426
  HEAP32[$124 >> 2] = $26; //@line 28427
  $125 = $ReallocAsyncCtx3 + 56 | 0; //@line 28428
  HEAP32[$125 >> 2] = $28; //@line 28429
  $126 = $ReallocAsyncCtx3 + 60 | 0; //@line 28430
  HEAP32[$126 >> 2] = $30; //@line 28431
  $127 = $ReallocAsyncCtx3 + 64 | 0; //@line 28432
  HEAP32[$127 >> 2] = $32; //@line 28433
  $128 = $ReallocAsyncCtx3 + 68 | 0; //@line 28434
  HEAP32[$128 >> 2] = $34; //@line 28435
  sp = STACKTOP; //@line 28436
  return;
 }
 ___async_unwind = 0; //@line 28439
 HEAP32[$ReallocAsyncCtx3 >> 2] = 517; //@line 28440
 $112 = $ReallocAsyncCtx3 + 4 | 0; //@line 28441
 HEAP32[$112 >> 2] = $2; //@line 28442
 $113 = $ReallocAsyncCtx3 + 8 | 0; //@line 28443
 HEAP8[$113 >> 0] = $43; //@line 28444
 $114 = $ReallocAsyncCtx3 + 12 | 0; //@line 28445
 HEAP32[$114 >> 2] = $6; //@line 28446
 $115 = $ReallocAsyncCtx3 + 16 | 0; //@line 28447
 HEAP8[$115 >> 0] = $36; //@line 28448
 $116 = $ReallocAsyncCtx3 + 20 | 0; //@line 28449
 HEAP32[$116 >> 2] = $10; //@line 28450
 $117 = $ReallocAsyncCtx3 + 24 | 0; //@line 28451
 HEAP32[$117 >> 2] = $12; //@line 28452
 $118 = $ReallocAsyncCtx3 + 28 | 0; //@line 28453
 HEAP32[$118 >> 2] = $14; //@line 28454
 $119 = $ReallocAsyncCtx3 + 32 | 0; //@line 28455
 HEAP32[$119 >> 2] = $16; //@line 28456
 $120 = $ReallocAsyncCtx3 + 36 | 0; //@line 28457
 HEAP32[$120 >> 2] = $18; //@line 28458
 $121 = $ReallocAsyncCtx3 + 40 | 0; //@line 28459
 HEAP32[$121 >> 2] = $20; //@line 28460
 $122 = $ReallocAsyncCtx3 + 44 | 0; //@line 28461
 HEAP32[$122 >> 2] = $22; //@line 28462
 $123 = $ReallocAsyncCtx3 + 48 | 0; //@line 28463
 HEAP32[$123 >> 2] = $24; //@line 28464
 $124 = $ReallocAsyncCtx3 + 52 | 0; //@line 28465
 HEAP32[$124 >> 2] = $26; //@line 28466
 $125 = $ReallocAsyncCtx3 + 56 | 0; //@line 28467
 HEAP32[$125 >> 2] = $28; //@line 28468
 $126 = $ReallocAsyncCtx3 + 60 | 0; //@line 28469
 HEAP32[$126 >> 2] = $30; //@line 28470
 $127 = $ReallocAsyncCtx3 + 64 | 0; //@line 28471
 HEAP32[$127 >> 2] = $32; //@line 28472
 $128 = $ReallocAsyncCtx3 + 68 | 0; //@line 28473
 HEAP32[$128 >> 2] = $34; //@line 28474
 sp = STACKTOP; //@line 28475
 return;
}
function __ZN7LoRaMac17handle_data_frameEPKhthhsa($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$063 = 0, $$06370 = 0, $$06371 = 0, $$1$off0 = 0, $$160 = 0, $$162 = 0, $$164 = 0, $$pre$phi$sinkZ2D = 0, $123 = 0, $124 = 0, $125 = 0, $127 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $141 = 0, $143 = 0, $144 = 0, $149 = 0, $15 = 0, $150 = 0, $155 = 0, $156 = 0, $16 = 0, $183 = 0, $201 = 0, $203 = 0, $40 = 0, $41 = 0, $47 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx21 = 0, $AsyncCtx9 = 0, $addconv = 0, $sext$i = 0, $storemerge$in = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP; //@line 13098
 STACKTOP = STACKTOP + 48 | 0; //@line 13099
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 13099
 $vararg_buffer5 = sp + 24 | 0; //@line 13100
 $vararg_buffer3 = sp + 16 | 0; //@line 13101
 $vararg_buffer1 = sp + 8 | 0; //@line 13102
 $7 = sp + 32 | 0; //@line 13104
 $8 = sp + 28 | 0; //@line 13105
 HEAP8[$7 >> 0] = $3; //@line 13106
 $9 = $0 + 4 | 0; //@line 13107
 $15 = __ZN7LoRaPHY15get_max_payloadEhb($9, HEAP8[$0 + 2026 >> 0] | 0, (HEAP8[$0 + 1173 >> 0] | 0) != 0) | 0; //@line 13113
 $16 = $2 & 65535; //@line 13114
 $sext$i = ($16 << 16) + -851968 | 0; //@line 13116
 if (((($sext$i | 0) < 0 ? 0 : $sext$i >> 16) | 0) > ($15 & 255 | 0)) {
  _mbed_tracef(2, 12890, 12922, sp); //@line 13123
 }
 HEAP32[$8 >> 2] = 0; //@line 13125
 $40 = HEAPU8[$1 + ($3 + 1 & 255) >> 0] << 8 | HEAPU8[$1 + ($3 & 255) >> 0] | HEAPU8[$1 + ($3 + 2 & 255) >> 0] << 16; //@line 13144
 $41 = $3 + 4 << 24 >> 24; //@line 13145
 HEAP8[$7 >> 0] = $41; //@line 13146
 $47 = $40 | HEAPU8[$1 + ($3 + 3 & 255) >> 0] << 24; //@line 13152
 L4 : do {
  if (($47 | 0) == (HEAP32[$0 + 1756 >> 2] | 0)) {
   $$1$off0 = 0; //@line 13161
   $$160 = $0 + 1732 | 0; //@line 13161
   $$162 = $0 + 1716 | 0; //@line 13161
   $$164 = 0; //@line 13161
   $storemerge$in = $0 + 1764 | 0; //@line 13161
  } else {
   $$06370 = HEAP32[$0 + 1988 >> 2] | 0; //@line 13164
   L7 : do {
    if ($$06370 | 0) {
     $$06371 = $$06370; //@line 13168
     while (1) {
      if (($47 | 0) == (HEAP32[$$06371 >> 2] | 0)) {
       break;
      }
      $$063 = HEAP32[$$06371 + 40 >> 2] | 0; //@line 13176
      if (!$$063) {
       break L7;
      } else {
       $$06371 = $$063; //@line 13181
      }
     }
     $$1$off0 = 1; //@line 13187
     $$160 = $$06371 + 20 | 0; //@line 13187
     $$162 = $$06371 + 4 | 0; //@line 13187
     $$164 = $$06371; //@line 13187
     $storemerge$in = $$06371 + 36 | 0; //@line 13187
     break L4;
    }
   } while (0);
   HEAP32[$0 + 2020 >> 2] = 11; //@line 13192
   HEAP8[$0 + 2012 >> 0] = 0; //@line 13194
   STACKTOP = sp; //@line 13195
   return;
  }
 } while (0);
 HEAP32[$8 >> 2] = HEAP32[$storemerge$in >> 2]; //@line 13199
 HEAP8[$7 >> 0] = $3 + 5 << 24 >> 24; //@line 13201
 $68 = HEAP8[$1 + ($41 & 255) >> 0] | 0; //@line 13204
 $69 = $68 & 15; //@line 13205
 $addconv = $69 + 8 << 24 >> 24; //@line 13206
 $AsyncCtx9 = _emscripten_alloc_async_context(92, sp) | 0; //@line 13207
 $70 = __ZN7LoRaMac23message_integrity_checkEPKhtPhjPjS1_($0, $1, $2, $7, $47, $8, $$162) | 0; //@line 13208
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 400; //@line 13211
  HEAP32[$AsyncCtx9 + 4 >> 2] = $0; //@line 13213
  HEAP32[$AsyncCtx9 + 8 >> 2] = $$164; //@line 13215
  HEAP32[$AsyncCtx9 + 12 >> 2] = $vararg_buffer1; //@line 13217
  HEAP32[$AsyncCtx9 + 16 >> 2] = $vararg_buffer1; //@line 13219
  HEAP8[$AsyncCtx9 + 20 >> 0] = $$1$off0 & 1; //@line 13222
  HEAP8[$AsyncCtx9 + 21 >> 0] = $68; //@line 13224
  HEAP32[$AsyncCtx9 + 24 >> 2] = $8; //@line 13226
  HEAP16[$AsyncCtx9 + 28 >> 1] = $5; //@line 13228
  HEAP8[$AsyncCtx9 + 30 >> 0] = $6; //@line 13230
  HEAP32[$AsyncCtx9 + 32 >> 2] = $1; //@line 13232
  HEAP8[$AsyncCtx9 + 36 >> 0] = $addconv; //@line 13234
  HEAP32[$AsyncCtx9 + 40 >> 2] = $9; //@line 13236
  HEAP8[$AsyncCtx9 + 44 >> 0] = $4; //@line 13238
  HEAP8[$AsyncCtx9 + 45 >> 0] = $69; //@line 13240
  HEAP32[$AsyncCtx9 + 48 >> 2] = $7; //@line 13242
  HEAP32[$AsyncCtx9 + 52 >> 2] = $16; //@line 13244
  HEAP16[$AsyncCtx9 + 56 >> 1] = $2; //@line 13246
  HEAP32[$AsyncCtx9 + 60 >> 2] = $$162; //@line 13248
  HEAP32[$AsyncCtx9 + 64 >> 2] = $$160; //@line 13250
  HEAP32[$AsyncCtx9 + 68 >> 2] = $47; //@line 13252
  HEAP32[$AsyncCtx9 + 72 >> 2] = $8; //@line 13254
  HEAP32[$AsyncCtx9 + 76 >> 2] = $vararg_buffer5; //@line 13256
  HEAP32[$AsyncCtx9 + 80 >> 2] = $vararg_buffer5; //@line 13258
  HEAP32[$AsyncCtx9 + 84 >> 2] = $vararg_buffer3; //@line 13260
  HEAP32[$AsyncCtx9 + 88 >> 2] = $vararg_buffer3; //@line 13262
  sp = STACKTOP; //@line 13263
  STACKTOP = sp; //@line 13264
  return;
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 13266
 if (!$70) {
  _mbed_tracef(2, 12890, 12941, $vararg_buffer1); //@line 13268
  HEAP32[$0 + 2020 >> 2] = 12; //@line 13270
  HEAP8[$0 + 2012 >> 0] = 0; //@line 13272
  STACKTOP = sp; //@line 13273
  return;
 }
 $AsyncCtx21 = _emscripten_alloc_async_context(88, sp) | 0; //@line 13276
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1836 | 0); //@line 13277
 if (___async) {
  HEAP32[$AsyncCtx21 >> 2] = 401; //@line 13280
  HEAP32[$AsyncCtx21 + 4 >> 2] = $0; //@line 13282
  HEAP32[$AsyncCtx21 + 8 >> 2] = $$164; //@line 13284
  HEAP8[$AsyncCtx21 + 12 >> 0] = $$1$off0 & 1; //@line 13287
  HEAP8[$AsyncCtx21 + 13 >> 0] = $68; //@line 13289
  HEAP32[$AsyncCtx21 + 16 >> 2] = $8; //@line 13291
  HEAP16[$AsyncCtx21 + 20 >> 1] = $5; //@line 13293
  HEAP8[$AsyncCtx21 + 22 >> 0] = $6; //@line 13295
  HEAP32[$AsyncCtx21 + 24 >> 2] = $1; //@line 13297
  HEAP8[$AsyncCtx21 + 28 >> 0] = $addconv; //@line 13299
  HEAP32[$AsyncCtx21 + 32 >> 2] = $9; //@line 13301
  HEAP8[$AsyncCtx21 + 36 >> 0] = $4; //@line 13303
  HEAP8[$AsyncCtx21 + 37 >> 0] = $69; //@line 13305
  HEAP32[$AsyncCtx21 + 40 >> 2] = $7; //@line 13307
  HEAP32[$AsyncCtx21 + 44 >> 2] = $16; //@line 13309
  HEAP16[$AsyncCtx21 + 48 >> 1] = $2; //@line 13311
  HEAP32[$AsyncCtx21 + 52 >> 2] = $$162; //@line 13313
  HEAP32[$AsyncCtx21 + 56 >> 2] = $$160; //@line 13315
  HEAP32[$AsyncCtx21 + 60 >> 2] = $47; //@line 13317
  HEAP32[$AsyncCtx21 + 64 >> 2] = $0; //@line 13319
  HEAP32[$AsyncCtx21 + 68 >> 2] = $8; //@line 13321
  HEAP32[$AsyncCtx21 + 72 >> 2] = $vararg_buffer5; //@line 13323
  HEAP32[$AsyncCtx21 + 76 >> 2] = $vararg_buffer5; //@line 13325
  HEAP32[$AsyncCtx21 + 80 >> 2] = $vararg_buffer3; //@line 13327
  HEAP32[$AsyncCtx21 + 84 >> 2] = $vararg_buffer3; //@line 13329
  sp = STACKTOP; //@line 13330
  STACKTOP = sp; //@line 13331
  return;
 }
 _emscripten_free_async_context($AsyncCtx21 | 0); //@line 13333
 $123 = $0 + 2062 | 0; //@line 13334
 HEAP8[$123 >> 0] = 0; //@line 13335
 $124 = $0 + 2044 | 0; //@line 13336
 HEAP8[$124 >> 0] = 0; //@line 13337
 $125 = $0 + 2012 | 0; //@line 13338
 HEAP8[$125 >> 0] = 1; //@line 13339
 HEAP8[$0 + 2034 >> 0] = 0; //@line 13341
 $127 = $0 + 2020 | 0; //@line 13342
 HEAP32[$127 >> 2] = 0; //@line 13343
 HEAP8[$0 + 2024 >> 0] = $$1$off0 & 1; //@line 13346
 HEAP8[$0 + 2027 >> 0] = ($68 & 255) >>> 4 & 1; //@line 13350
 $133 = $0 + 2028 | 0; //@line 13351
 HEAP32[$133 >> 2] = 0; //@line 13352
 $134 = $0 + 2032 | 0; //@line 13353
 HEAP16[$134 >> 1] = 0; //@line 13354
 $135 = HEAP32[$8 >> 2] | 0; //@line 13355
 $136 = $0 + 2048 | 0; //@line 13356
 HEAP32[$136 >> 2] = $135; //@line 13357
 HEAP16[$0 + 2036 >> 1] = $5; //@line 13359
 HEAP8[$0 + 2038 >> 0] = $6; //@line 13361
 HEAP32[$0 + 2056 >> 2] = 0; //@line 13363
 HEAP32[$0 + 1768 >> 2] = 0; //@line 13365
 $141 = $0 + 476 | 0; //@line 13366
 __ZN14LoRaMacCommand19clear_repeat_bufferEv($141); //@line 13367
 L25 : do {
  if ($$1$off0) {
   HEAP32[$0 + 2016 >> 2] = 2; //@line 13371
   $143 = $$164 + 36 | 0; //@line 13372
   $144 = HEAP32[$143 >> 2] | 0; //@line 13373
   if (($144 | 0) == 0 | ($144 | 0) != ($135 | 0)) {
    $$pre$phi$sinkZ2D = $143; //@line 13378
   } else {
    HEAP32[$127 >> 2] = 8; //@line 13380
    HEAP32[$136 >> 2] = $135; //@line 13381
    HEAP8[$125 >> 0] = 0; //@line 13382
    STACKTOP = sp; //@line 13383
    return;
   }
  } else {
   switch ($4 << 24 >> 24) {
   case 5:
    {
     HEAP8[$0 + 1178 >> 0] = 1; //@line 13389
     HEAP32[$0 + 2016 >> 2] = 1; //@line 13391
     $149 = $0 + 1764 | 0; //@line 13392
     $150 = HEAP32[$149 >> 2] | 0; //@line 13393
     if (($150 | 0) == 0 | ($150 | 0) != ($135 | 0)) {
      $$pre$phi$sinkZ2D = $149; //@line 13398
      break L25;
     }
     _mbed_tracef(16, 12890, 12952, $vararg_buffer3); //@line 13401
     HEAP8[$125 >> 0] = 0; //@line 13402
     HEAP32[$127 >> 2] = 8; //@line 13403
     $$pre$phi$sinkZ2D = $149; //@line 13404
     break L25;
     break;
    }
   case 3:
    {
     HEAP8[$0 + 1178 >> 0] = 0; //@line 13410
     HEAP32[$0 + 2016 >> 2] = 0; //@line 13412
     $155 = $0 + 1764 | 0; //@line 13413
     $156 = HEAP32[$155 >> 2] | 0; //@line 13414
     if (($156 | 0) == 0 | ($156 | 0) != ($135 | 0)) {
      $$pre$phi$sinkZ2D = $155; //@line 13419
      break L25;
     }
     _mbed_tracef(16, 12890, 12952, $vararg_buffer5); //@line 13422
     HEAP8[$125 >> 0] = 0; //@line 13423
     HEAP32[$127 >> 2] = 8; //@line 13424
     STACKTOP = sp; //@line 13425
     return;
    }
   default:
    {
     $$pre$phi$sinkZ2D = $0 + 1764 | 0; //@line 13430
     break L25;
    }
   }
  }
 } while (0);
 HEAP32[$$pre$phi$sinkZ2D >> 2] = $135; //@line 13436
 if (!(HEAP8[$0 + 1177 >> 0] | 0)) {
  __ZN14LoRaMacCommand20clear_command_bufferEv($141); //@line 13441
 } else {
  if ($68 & 32) {
   __ZN14LoRaMacCommand20clear_command_bufferEv($141); //@line 13446
   HEAP8[$123 >> 0] = 1; //@line 13447
   HEAP8[$124 >> 0] = 1; //@line 13448
  }
 }
 do {
  if (!($16 + 252 - ($addconv & 255) & 255)) {
   if ($69 << 24 >> 24) {
    $AsyncCtx13 = _emscripten_alloc_async_context(52, sp) | 0; //@line 13462
    $183 = __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($141, $1, 8, $addconv, $6, $0 + 2084 | 0, $0 + 1876 | 0, $9) | 0; //@line 13463
    if (___async) {
     HEAP32[$AsyncCtx13 >> 2] = 403; //@line 13466
     HEAP32[$AsyncCtx13 + 4 >> 2] = $141; //@line 13468
     HEAP32[$AsyncCtx13 + 8 >> 2] = $127; //@line 13470
     HEAP8[$AsyncCtx13 + 12 >> 0] = $4; //@line 13472
     HEAP32[$AsyncCtx13 + 16 >> 2] = $0; //@line 13474
     HEAP32[$AsyncCtx13 + 20 >> 2] = $7; //@line 13476
     HEAP32[$AsyncCtx13 + 24 >> 2] = $1; //@line 13478
     HEAP32[$AsyncCtx13 + 28 >> 2] = $16; //@line 13480
     HEAP32[$AsyncCtx13 + 32 >> 2] = $133; //@line 13482
     HEAP32[$AsyncCtx13 + 36 >> 2] = $134; //@line 13484
     HEAP32[$AsyncCtx13 + 40 >> 2] = $123; //@line 13486
     HEAP32[$AsyncCtx13 + 44 >> 2] = $8; //@line 13488
     HEAP32[$AsyncCtx13 + 48 >> 2] = $0; //@line 13490
     sp = STACKTOP; //@line 13491
     STACKTOP = sp; //@line 13492
     return;
    }
    _emscripten_free_async_context($AsyncCtx13 | 0); //@line 13494
    if ($183 | 0) {
     HEAP32[$127 >> 2] = 1; //@line 13497
     break;
    }
    if (__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($141) | 0) {
     HEAP32[$0 + 2076 >> 2] = 4; //@line 13503
     HEAP8[$0 + 2080 >> 0] = 1; //@line 13505
     __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($141); //@line 13506
    }
   }
  } else {
   $AsyncCtx = _emscripten_alloc_async_context(48, sp) | 0; //@line 13510
   __ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa($0, $1, $2, $69, $$162, $$160, $47, $135, 0, $6); //@line 13511
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 402; //@line 13514
    HEAP8[$AsyncCtx + 4 >> 0] = $4; //@line 13516
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 13518
    HEAP32[$AsyncCtx + 12 >> 2] = $7; //@line 13520
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 13522
    HEAP32[$AsyncCtx + 20 >> 2] = $16; //@line 13524
    HEAP32[$AsyncCtx + 24 >> 2] = $127; //@line 13526
    HEAP32[$AsyncCtx + 28 >> 2] = $133; //@line 13528
    HEAP32[$AsyncCtx + 32 >> 2] = $134; //@line 13530
    HEAP32[$AsyncCtx + 36 >> 2] = $123; //@line 13532
    HEAP32[$AsyncCtx + 40 >> 2] = $8; //@line 13534
    HEAP32[$AsyncCtx + 44 >> 2] = $0; //@line 13536
    sp = STACKTOP; //@line 13537
    STACKTOP = sp; //@line 13538
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 13540
    break;
   }
  }
 } while (0);
 if ($4 << 24 >> 24 == 7) {
  $201 = $0 + 1442 | 0; //@line 13547
  $203 = HEAPU8[$7 >> 0] | 0; //@line 13549
  _memcpy($201 | 0, $1 + $203 | 0, $16 | 0) | 0; //@line 13551
  HEAP32[$0 + 2016 >> 2] = 3; //@line 13553
  HEAP32[$127 >> 2] = 0; //@line 13554
  HEAP32[$133 >> 2] = $201; //@line 13555
  HEAP16[$134 >> 1] = $16 - $203; //@line 13558
 }
 if (!(HEAP8[$123 >> 0] | 0)) {
  STACKTOP = sp; //@line 13563
  return;
 }
 $AsyncCtx17 = _emscripten_alloc_async_context(8, sp) | 0; //@line 13566
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1856 | 0); //@line 13567
 if (___async) {
  HEAP32[$AsyncCtx17 >> 2] = 404; //@line 13570
  HEAP32[$AsyncCtx17 + 4 >> 2] = $8; //@line 13572
  sp = STACKTOP; //@line 13573
  STACKTOP = sp; //@line 13574
  return;
 }
 _emscripten_free_async_context($AsyncCtx17 | 0); //@line 13576
 STACKTOP = sp; //@line 13577
 return;
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$05$i = 0, $$06$i = 0, $10 = 0, $100 = 0, $108 = 0, $116 = 0, $119 = 0, $126 = 0, $133 = 0, $136 = 0, $2 = 0, $29 = 0, $3 = 0, $4 = 0, $40 = 0, $48 = 0, $5 = 0, $66 = 0, $76 = 0, $79 = 0, $8 = 0, $88 = 0, $97 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx20 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx3 = 0, $AsyncCtx30 = 0, $AsyncCtx33 = 0, $AsyncCtx36 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 16321
 STACKTOP = STACKTOP + 64 | 0; //@line 16322
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 16322
 $2 = sp + 48 | 0; //@line 16323
 $3 = sp + 32 | 0; //@line 16324
 $4 = sp + 16 | 0; //@line 16325
 $5 = sp; //@line 16326
 __ZN18LoRaWANTimeHandler24activate_timer_subsystemEPN6events10EventQueueE($0, $1); //@line 16327
 HEAP32[$0 + 1992 >> 2] = $1; //@line 16329
 $8 = $0 + 4 | 0; //@line 16331
 __ZN18LoRaMacChannelPlan30activate_channelplan_subsystemEP7LoRaPHY($0 + 752 | 0, $8); //@line 16332
 HEAP32[$0 + 2380 >> 2] = 0; //@line 16334
 $10 = $0 + 1168 | 0; //@line 16335
 HEAP8[$0 + 1701 >> 0] = 0; //@line 16337
 HEAP8[$0 + 1700 >> 0] = 1; //@line 16339
 HEAP8[$0 + 1173 >> 0] = 0; //@line 16341
 HEAP32[$0 + 1780 >> 2] = 0; //@line 16343
 HEAP32[$0 + 1784 >> 2] = 0; //@line 16345
 __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb($8, $10, 1); //@line 16346
 HEAP32[$0 + 1880 >> 2] = 10; //@line 16348
 HEAP8[$0 + 1884 >> 0] = 6; //@line 16350
 HEAP8[$0 + 1908 >> 0] = 1; //@line 16352
 HEAP8[$0 + 2376 >> 0] = 0; //@line 16354
 HEAP32[$0 + 1760 >> 2] = 0; //@line 16356
 HEAP32[$0 + 1764 >> 2] = 0; //@line 16358
 HEAP32[$0 + 1768 >> 2] = 0; //@line 16360
 HEAP8[$0 + 1184 >> 0] = 0; //@line 16362
 HEAP8[$0 + 1698 >> 0] = 1; //@line 16364
 HEAP8[$0 + 1699 >> 0] = 1; //@line 16366
 HEAP8[$0 + 1181 >> 0] = 0; //@line 16368
 HEAP8[$0 + 1932 >> 0] = 0; //@line 16370
 HEAP16[$0 + 1934 >> 1] = 1; //@line 16372
 $29 = $0 + 476 | 0; //@line 16373
 __ZN14LoRaMacCommand20clear_command_bufferEv($29); //@line 16374
 __ZN14LoRaMacCommand19clear_repeat_bufferEv($29); //@line 16375
 __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($29); //@line 16376
 HEAP8[$0 + 1175 >> 0] = 1; //@line 16378
 __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb($8, $10, 0); //@line 16379
 HEAP8[$0 + 1177 >> 0] = 0; //@line 16381
 HEAP8[$0 + 1178 >> 0] = 0; //@line 16383
 $$05$i = HEAP32[$0 + 1988 >> 2] | 0; //@line 16385
 if ($$05$i | 0) {
  $$06$i = $$05$i; //@line 16388
  do {
   HEAP32[$$06$i + 36 >> 2] = 0; //@line 16391
   $$06$i = HEAP32[$$06$i + 40 >> 2] | 0; //@line 16393
  } while (($$06$i | 0) != 0);
 }
 HEAP8[$0 + 1182 >> 0] = 0; //@line 16403
 HEAP8[$0 + 1183 >> 0] = 0; //@line 16405
 $AsyncCtx27 = _emscripten_alloc_async_context(32, sp) | 0; //@line 16406
 $40 = __ZN7LoRaPHY13get_radio_rngEv($8) | 0; //@line 16407
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 459; //@line 16410
  HEAP32[$AsyncCtx27 + 4 >> 2] = $8; //@line 16412
  HEAP32[$AsyncCtx27 + 8 >> 2] = $0; //@line 16414
  HEAP32[$AsyncCtx27 + 12 >> 2] = $0; //@line 16416
  HEAP32[$AsyncCtx27 + 16 >> 2] = $3; //@line 16418
  HEAP32[$AsyncCtx27 + 20 >> 2] = $4; //@line 16420
  HEAP32[$AsyncCtx27 + 24 >> 2] = $5; //@line 16422
  HEAP32[$AsyncCtx27 + 28 >> 2] = $2; //@line 16424
  sp = STACKTOP; //@line 16425
  STACKTOP = sp; //@line 16426
  return 0; //@line 16426
 }
 _emscripten_free_async_context($AsyncCtx27 | 0); //@line 16428
 _srand($40); //@line 16429
 $48 = $0 + 1172 | 0; //@line 16430
 HEAP8[$48 >> 0] = 1; //@line 16431
 $AsyncCtx33 = _emscripten_alloc_async_context(36, sp) | 0; //@line 16432
 __ZN7LoRaPHY25setup_public_network_modeEb($8, 1); //@line 16433
 if (___async) {
  HEAP32[$AsyncCtx33 >> 2] = 460; //@line 16436
  HEAP32[$AsyncCtx33 + 4 >> 2] = $8; //@line 16438
  HEAP32[$AsyncCtx33 + 8 >> 2] = $0; //@line 16440
  HEAP32[$AsyncCtx33 + 12 >> 2] = $0; //@line 16442
  HEAP32[$AsyncCtx33 + 16 >> 2] = $48; //@line 16444
  HEAP32[$AsyncCtx33 + 20 >> 2] = $3; //@line 16446
  HEAP32[$AsyncCtx33 + 24 >> 2] = $4; //@line 16448
  HEAP32[$AsyncCtx33 + 28 >> 2] = $5; //@line 16450
  HEAP32[$AsyncCtx33 + 32 >> 2] = $2; //@line 16452
  sp = STACKTOP; //@line 16453
  STACKTOP = sp; //@line 16454
  return 0; //@line 16454
 }
 _emscripten_free_async_context($AsyncCtx33 | 0); //@line 16456
 $AsyncCtx36 = _emscripten_alloc_async_context(36, sp) | 0; //@line 16457
 __ZN7LoRaPHY18put_radio_to_sleepEv($8); //@line 16458
 if (___async) {
  HEAP32[$AsyncCtx36 >> 2] = 461; //@line 16461
  HEAP32[$AsyncCtx36 + 4 >> 2] = $0; //@line 16463
  HEAP32[$AsyncCtx36 + 8 >> 2] = $0; //@line 16465
  HEAP32[$AsyncCtx36 + 12 >> 2] = $48; //@line 16467
  HEAP32[$AsyncCtx36 + 16 >> 2] = $8; //@line 16469
  HEAP32[$AsyncCtx36 + 20 >> 2] = $3; //@line 16471
  HEAP32[$AsyncCtx36 + 24 >> 2] = $4; //@line 16473
  HEAP32[$AsyncCtx36 + 28 >> 2] = $5; //@line 16475
  HEAP32[$AsyncCtx36 + 32 >> 2] = $2; //@line 16477
  sp = STACKTOP; //@line 16478
  STACKTOP = sp; //@line 16479
  return 0; //@line 16479
 }
 _emscripten_free_async_context($AsyncCtx36 | 0); //@line 16481
 $66 = $2 + 12 | 0; //@line 16483
 HEAP32[$2 >> 2] = 462; //@line 16484
 HEAP32[$2 + 4 >> 2] = 0; //@line 16486
 HEAP32[$2 + 8 >> 2] = $0; //@line 16488
 HEAP32[$66 >> 2] = 860; //@line 16489
 $AsyncCtx23 = _emscripten_alloc_async_context(40, sp) | 0; //@line 16490
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($0, $0 + 1796 | 0, $2); //@line 16491
 if (___async) {
  HEAP32[$AsyncCtx23 >> 2] = 463; //@line 16494
  HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 16496
  HEAP32[$AsyncCtx23 + 8 >> 2] = $0; //@line 16498
  HEAP32[$AsyncCtx23 + 12 >> 2] = $48; //@line 16500
  HEAP32[$AsyncCtx23 + 16 >> 2] = $8; //@line 16502
  HEAP32[$AsyncCtx23 + 20 >> 2] = $3; //@line 16504
  HEAP32[$AsyncCtx23 + 24 >> 2] = $4; //@line 16506
  HEAP32[$AsyncCtx23 + 28 >> 2] = $5; //@line 16508
  HEAP32[$AsyncCtx23 + 32 >> 2] = $2; //@line 16510
  HEAP32[$AsyncCtx23 + 36 >> 2] = $66; //@line 16512
  sp = STACKTOP; //@line 16513
  STACKTOP = sp; //@line 16514
  return 0; //@line 16514
 }
 _emscripten_free_async_context($AsyncCtx23 | 0); //@line 16516
 $76 = HEAP32[$66 >> 2] | 0; //@line 16517
 do {
  if ($76 | 0) {
   $79 = HEAP32[$76 + 8 >> 2] | 0; //@line 16522
   $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 16523
   FUNCTION_TABLE_vi[$79 & 1023]($2); //@line 16524
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 464; //@line 16527
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 16529
    HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 16531
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 16533
    HEAP32[$AsyncCtx + 16 >> 2] = $4; //@line 16535
    HEAP32[$AsyncCtx + 20 >> 2] = $5; //@line 16537
    HEAP32[$AsyncCtx + 24 >> 2] = $48; //@line 16539
    HEAP32[$AsyncCtx + 28 >> 2] = $8; //@line 16541
    sp = STACKTOP; //@line 16542
    STACKTOP = sp; //@line 16543
    return 0; //@line 16543
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 16545
    break;
   }
  }
 } while (0);
 $88 = $3 + 12 | 0; //@line 16551
 HEAP32[$3 >> 2] = 465; //@line 16552
 HEAP32[$3 + 4 >> 2] = 0; //@line 16554
 HEAP32[$3 + 8 >> 2] = $0; //@line 16556
 HEAP32[$88 >> 2] = 860; //@line 16557
 $AsyncCtx20 = _emscripten_alloc_async_context(36, sp) | 0; //@line 16558
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($0, $0 + 1816 | 0, $3); //@line 16559
 if (___async) {
  HEAP32[$AsyncCtx20 >> 2] = 466; //@line 16562
  HEAP32[$AsyncCtx20 + 4 >> 2] = $0; //@line 16564
  HEAP32[$AsyncCtx20 + 8 >> 2] = $0; //@line 16566
  HEAP32[$AsyncCtx20 + 12 >> 2] = $48; //@line 16568
  HEAP32[$AsyncCtx20 + 16 >> 2] = $8; //@line 16570
  HEAP32[$AsyncCtx20 + 20 >> 2] = $88; //@line 16572
  HEAP32[$AsyncCtx20 + 24 >> 2] = $5; //@line 16574
  HEAP32[$AsyncCtx20 + 28 >> 2] = $4; //@line 16576
  HEAP32[$AsyncCtx20 + 32 >> 2] = $3; //@line 16578
  sp = STACKTOP; //@line 16579
  STACKTOP = sp; //@line 16580
  return 0; //@line 16580
 }
 _emscripten_free_async_context($AsyncCtx20 | 0); //@line 16582
 $97 = HEAP32[$88 >> 2] | 0; //@line 16583
 do {
  if ($97 | 0) {
   $100 = HEAP32[$97 + 8 >> 2] | 0; //@line 16588
   $AsyncCtx3 = _emscripten_alloc_async_context(28, sp) | 0; //@line 16589
   FUNCTION_TABLE_vi[$100 & 1023]($3); //@line 16590
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 467; //@line 16593
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 16595
    HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 16597
    HEAP32[$AsyncCtx3 + 12 >> 2] = $0; //@line 16599
    HEAP32[$AsyncCtx3 + 16 >> 2] = $5; //@line 16601
    HEAP32[$AsyncCtx3 + 20 >> 2] = $48; //@line 16603
    HEAP32[$AsyncCtx3 + 24 >> 2] = $8; //@line 16605
    sp = STACKTOP; //@line 16606
    STACKTOP = sp; //@line 16607
    return 0; //@line 16607
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 16609
    break;
   }
  }
 } while (0);
 $108 = $4 + 12 | 0; //@line 16615
 HEAP32[$4 >> 2] = 468; //@line 16616
 HEAP32[$4 + 4 >> 2] = 0; //@line 16618
 HEAP32[$4 + 8 >> 2] = $0; //@line 16620
 HEAP32[$108 >> 2] = 860; //@line 16621
 $AsyncCtx17 = _emscripten_alloc_async_context(32, sp) | 0; //@line 16622
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($0, $0 + 1836 | 0, $4); //@line 16623
 if (___async) {
  HEAP32[$AsyncCtx17 >> 2] = 469; //@line 16626
  HEAP32[$AsyncCtx17 + 4 >> 2] = $108; //@line 16628
  HEAP32[$AsyncCtx17 + 8 >> 2] = $0; //@line 16630
  HEAP32[$AsyncCtx17 + 12 >> 2] = $5; //@line 16632
  HEAP32[$AsyncCtx17 + 16 >> 2] = $0; //@line 16634
  HEAP32[$AsyncCtx17 + 20 >> 2] = $4; //@line 16636
  HEAP32[$AsyncCtx17 + 24 >> 2] = $48; //@line 16638
  HEAP32[$AsyncCtx17 + 28 >> 2] = $8; //@line 16640
  sp = STACKTOP; //@line 16641
  STACKTOP = sp; //@line 16642
  return 0; //@line 16642
 }
 _emscripten_free_async_context($AsyncCtx17 | 0); //@line 16644
 $116 = HEAP32[$108 >> 2] | 0; //@line 16645
 do {
  if ($116 | 0) {
   $119 = HEAP32[$116 + 8 >> 2] | 0; //@line 16650
   $AsyncCtx7 = _emscripten_alloc_async_context(24, sp) | 0; //@line 16651
   FUNCTION_TABLE_vi[$119 & 1023]($4); //@line 16652
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 470; //@line 16655
    HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 16657
    HEAP32[$AsyncCtx7 + 8 >> 2] = $5; //@line 16659
    HEAP32[$AsyncCtx7 + 12 >> 2] = $0; //@line 16661
    HEAP32[$AsyncCtx7 + 16 >> 2] = $48; //@line 16663
    HEAP32[$AsyncCtx7 + 20 >> 2] = $8; //@line 16665
    sp = STACKTOP; //@line 16666
    STACKTOP = sp; //@line 16667
    return 0; //@line 16667
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 16669
    break;
   }
  }
 } while (0);
 $126 = $5 + 12 | 0; //@line 16675
 HEAP32[$5 >> 2] = 471; //@line 16676
 HEAP32[$5 + 4 >> 2] = 0; //@line 16678
 HEAP32[$5 + 8 >> 2] = $0; //@line 16680
 HEAP32[$126 >> 2] = 860; //@line 16681
 $AsyncCtx14 = _emscripten_alloc_async_context(28, sp) | 0; //@line 16682
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($0, $0 + 1856 | 0, $5); //@line 16683
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 472; //@line 16686
  HEAP32[$AsyncCtx14 + 4 >> 2] = $126; //@line 16688
  HEAP32[$AsyncCtx14 + 8 >> 2] = $0; //@line 16690
  HEAP32[$AsyncCtx14 + 12 >> 2] = $0; //@line 16692
  HEAP32[$AsyncCtx14 + 16 >> 2] = $48; //@line 16694
  HEAP32[$AsyncCtx14 + 20 >> 2] = $8; //@line 16696
  HEAP32[$AsyncCtx14 + 24 >> 2] = $5; //@line 16698
  sp = STACKTOP; //@line 16699
  STACKTOP = sp; //@line 16700
  return 0; //@line 16700
 }
 _emscripten_free_async_context($AsyncCtx14 | 0); //@line 16702
 $133 = HEAP32[$126 >> 2] | 0; //@line 16703
 do {
  if ($133 | 0) {
   $136 = HEAP32[$133 + 8 >> 2] | 0; //@line 16708
   $AsyncCtx11 = _emscripten_alloc_async_context(20, sp) | 0; //@line 16709
   FUNCTION_TABLE_vi[$136 & 1023]($5); //@line 16710
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 473; //@line 16713
    HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 16715
    HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 16717
    HEAP32[$AsyncCtx11 + 12 >> 2] = $48; //@line 16719
    HEAP32[$AsyncCtx11 + 16 >> 2] = $8; //@line 16721
    sp = STACKTOP; //@line 16722
    STACKTOP = sp; //@line 16723
    return 0; //@line 16723
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 16725
    break;
   }
  }
 } while (0);
 HEAP32[$0 + 1788 >> 2] = __ZN18LoRaWANTimeHandler16get_current_timeEv($0) | 0; //@line 16732
 HEAP8[$0 + 1936 >> 0] = 1; //@line 16734
 HEAP8[$48 >> 0] = 1; //@line 16735
 $AsyncCtx30 = _emscripten_alloc_async_context(4, sp) | 0; //@line 16736
 __ZN7LoRaPHY25setup_public_network_modeEb($8, 1); //@line 16737
 if (___async) {
  HEAP32[$AsyncCtx30 >> 2] = 474; //@line 16740
  sp = STACKTOP; //@line 16741
  STACKTOP = sp; //@line 16742
  return 0; //@line 16742
 } else {
  _emscripten_free_async_context($AsyncCtx30 | 0); //@line 16744
  STACKTOP = sp; //@line 16745
  return 0; //@line 16745
 }
 return 0; //@line 16747
}
function _main() {
 var $$0 = 0, $$1 = 0, $$pr = 0, $$pre$i$i = 0, $0 = 0, $1 = 0, $108 = 0, $119 = 0, $25 = 0, $39 = 0, $42 = 0, $50 = 0, $52 = 0, $54 = 0, $57 = 0, $66 = 0, $69 = 0, $76 = 0, $82 = 0, $86 = 0, $87 = 0, $90 = 0, $98 = 0, $99 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx21 = 0, $AsyncCtx25 = 0, $AsyncCtx29 = 0, $AsyncCtx3 = 0, $AsyncCtx33 = 0, $AsyncCtx36 = 0, $AsyncCtx39 = 0, $AsyncCtx43 = 0, $AsyncCtx47 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 7381
 STACKTOP = STACKTOP + 48 | 0; //@line 7382
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 7382
 $vararg_buffer = sp; //@line 7383
 $0 = sp + 8 | 0; //@line 7384
 $1 = sp + 24 | 0; //@line 7385
 if (!((HEAP8[24462] | HEAP8[24461] | HEAP8[24463] | HEAP8[24464] | HEAP8[24465] | HEAP8[24466] | HEAP8[24467] | HEAP8[24468]) << 24 >> 24)) {
  $AsyncCtx33 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7403
  _puts(15250) | 0; //@line 7404
  if (___async) {
   HEAP32[$AsyncCtx33 >> 2] = 668; //@line 7407
   sp = STACKTOP; //@line 7408
   STACKTOP = sp; //@line 7409
   return 0; //@line 7409
  }
  _emscripten_free_async_context($AsyncCtx33 | 0); //@line 7411
  $$1 = -1; //@line 7412
  STACKTOP = sp; //@line 7413
  return $$1 | 0; //@line 7413
 }
 $AsyncCtx29 = _emscripten_alloc_async_context(24, sp) | 0; //@line 7415
 _puts(15286) | 0; //@line 7416
 if (___async) {
  HEAP32[$AsyncCtx29 >> 2] = 669; //@line 7419
  HEAP32[$AsyncCtx29 + 4 >> 2] = $1; //@line 7421
  HEAP32[$AsyncCtx29 + 8 >> 2] = $vararg_buffer; //@line 7423
  HEAP32[$AsyncCtx29 + 12 >> 2] = $vararg_buffer; //@line 7425
  HEAP32[$AsyncCtx29 + 16 >> 2] = $1; //@line 7427
  HEAP32[$AsyncCtx29 + 20 >> 2] = $0; //@line 7429
  sp = STACKTOP; //@line 7430
  STACKTOP = sp; //@line 7431
  return 0; //@line 7431
 }
 _emscripten_free_async_context($AsyncCtx29 | 0); //@line 7433
 _mbed_trace_init() | 0; //@line 7434
 if (__ZN16LoRaWANInterface10initializeEPN6events10EventQueueE(20652, 20448) | 0) {
  $AsyncCtx25 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7438
  _puts(15353) | 0; //@line 7439
  if (___async) {
   HEAP32[$AsyncCtx25 >> 2] = 670; //@line 7442
   sp = STACKTOP; //@line 7443
   STACKTOP = sp; //@line 7444
   return 0; //@line 7444
  }
  _emscripten_free_async_context($AsyncCtx25 | 0); //@line 7446
  $$1 = -1; //@line 7447
  STACKTOP = sp; //@line 7448
  return $$1 | 0; //@line 7448
 }
 $AsyncCtx47 = _emscripten_alloc_async_context(24, sp) | 0; //@line 7450
 $25 = _equeue_alloc(20448, 32) | 0; //@line 7451
 if (___async) {
  HEAP32[$AsyncCtx47 >> 2] = 671; //@line 7454
  HEAP32[$AsyncCtx47 + 4 >> 2] = $1; //@line 7456
  HEAP32[$AsyncCtx47 + 8 >> 2] = $vararg_buffer; //@line 7458
  HEAP32[$AsyncCtx47 + 12 >> 2] = $vararg_buffer; //@line 7460
  HEAP32[$AsyncCtx47 + 16 >> 2] = $1; //@line 7462
  HEAP32[$AsyncCtx47 + 20 >> 2] = $0; //@line 7464
  sp = STACKTOP; //@line 7465
  STACKTOP = sp; //@line 7466
  return 0; //@line 7466
 }
 _emscripten_free_async_context($AsyncCtx47 | 0); //@line 7468
 if (!$25) {
  HEAP32[$0 >> 2] = 0; //@line 7471
  HEAP32[$0 + 4 >> 2] = 0; //@line 7471
  HEAP32[$0 + 8 >> 2] = 0; //@line 7471
  HEAP32[$0 + 12 >> 2] = 0; //@line 7471
  $50 = 1; //@line 7472
  $52 = $0; //@line 7472
 } else {
  HEAP32[$25 + 4 >> 2] = 20448; //@line 7475
  HEAP32[$25 + 8 >> 2] = 0; //@line 7477
  HEAP32[$25 + 12 >> 2] = 0; //@line 7479
  HEAP32[$25 + 16 >> 2] = -1; //@line 7481
  HEAP32[$25 + 20 >> 2] = 11; //@line 7483
  HEAP32[$25 + 24 >> 2] = 672; //@line 7485
  HEAP32[$25 + 28 >> 2] = 7; //@line 7487
  HEAP32[$25 >> 2] = 1; //@line 7488
  $39 = $0 + 4 | 0; //@line 7489
  HEAP32[$39 >> 2] = 0; //@line 7490
  HEAP32[$39 + 4 >> 2] = 0; //@line 7490
  HEAP32[$39 + 8 >> 2] = 0; //@line 7490
  HEAP32[$0 >> 2] = $25; //@line 7491
  HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] | 0) + 1; //@line 7494
  $50 = 0; //@line 7495
  $52 = $0; //@line 7495
 }
 $42 = $0 + 12 | 0; //@line 7497
 HEAP32[$42 >> 2] = 10264; //@line 7498
 $AsyncCtx43 = _emscripten_alloc_async_context(40, sp) | 0; //@line 7499
 __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE(20376, $0); //@line 7500
 if (___async) {
  HEAP32[$AsyncCtx43 >> 2] = 673; //@line 7503
  HEAP32[$AsyncCtx43 + 4 >> 2] = $1; //@line 7505
  HEAP32[$AsyncCtx43 + 8 >> 2] = $25; //@line 7507
  HEAP32[$AsyncCtx43 + 12 >> 2] = $25; //@line 7509
  HEAP32[$AsyncCtx43 + 16 >> 2] = $vararg_buffer; //@line 7511
  HEAP32[$AsyncCtx43 + 20 >> 2] = $vararg_buffer; //@line 7513
  HEAP32[$AsyncCtx43 + 24 >> 2] = $1; //@line 7515
  HEAP8[$AsyncCtx43 + 28 >> 0] = $50 & 1; //@line 7518
  HEAP32[$AsyncCtx43 + 32 >> 2] = $52; //@line 7520
  HEAP32[$AsyncCtx43 + 36 >> 2] = $42; //@line 7522
  sp = STACKTOP; //@line 7523
  STACKTOP = sp; //@line 7524
  return 0; //@line 7524
 }
 _emscripten_free_async_context($AsyncCtx43 | 0); //@line 7526
 $54 = HEAP32[$42 >> 2] | 0; //@line 7527
 do {
  if ($54 | 0) {
   $57 = HEAP32[$54 + 8 >> 2] | 0; //@line 7532
   $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 7533
   FUNCTION_TABLE_vi[$57 & 1023]($52); //@line 7534
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 674; //@line 7537
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 7539
    HEAP32[$AsyncCtx + 8 >> 2] = $25; //@line 7541
    HEAP32[$AsyncCtx + 12 >> 2] = $25; //@line 7543
    HEAP8[$AsyncCtx + 16 >> 0] = $50 & 1; //@line 7546
    HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer; //@line 7548
    HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer; //@line 7550
    HEAP32[$AsyncCtx + 28 >> 2] = $1; //@line 7552
    sp = STACKTOP; //@line 7553
    STACKTOP = sp; //@line 7554
    return 0; //@line 7554
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 7556
    break;
   }
  }
 } while (0);
 do {
  if (!$50) {
   $66 = (HEAP32[$25 >> 2] | 0) + -1 | 0; //@line 7564
   HEAP32[$25 >> 2] = $66; //@line 7565
   if (!$66) {
    $69 = HEAP32[$25 + 24 >> 2] | 0; //@line 7569
    $AsyncCtx3 = _emscripten_alloc_async_context(24, sp) | 0; //@line 7570
    FUNCTION_TABLE_vi[$69 & 1023]($25); //@line 7571
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 675; //@line 7574
     HEAP32[$AsyncCtx3 + 4 >> 2] = $1; //@line 7576
     HEAP32[$AsyncCtx3 + 8 >> 2] = $25; //@line 7578
     HEAP32[$AsyncCtx3 + 12 >> 2] = $vararg_buffer; //@line 7580
     HEAP32[$AsyncCtx3 + 16 >> 2] = $vararg_buffer; //@line 7582
     HEAP32[$AsyncCtx3 + 20 >> 2] = $1; //@line 7584
     sp = STACKTOP; //@line 7585
     STACKTOP = sp; //@line 7586
     return 0; //@line 7586
    }
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 7588
    $76 = HEAP32[$25 + 4 >> 2] | 0; //@line 7590
    $AsyncCtx39 = _emscripten_alloc_async_context(20, sp) | 0; //@line 7591
    _equeue_dealloc($76, $25); //@line 7592
    if (___async) {
     HEAP32[$AsyncCtx39 >> 2] = 676; //@line 7595
     HEAP32[$AsyncCtx39 + 4 >> 2] = $1; //@line 7597
     HEAP32[$AsyncCtx39 + 8 >> 2] = $1; //@line 7599
     HEAP32[$AsyncCtx39 + 12 >> 2] = $vararg_buffer; //@line 7601
     HEAP32[$AsyncCtx39 + 16 >> 2] = $vararg_buffer; //@line 7603
     sp = STACKTOP; //@line 7604
     STACKTOP = sp; //@line 7605
     return 0; //@line 7605
    } else {
     _emscripten_free_async_context($AsyncCtx39 | 0); //@line 7607
     break;
    }
   }
  }
 } while (0);
 $82 = $1 + 4 | 0; //@line 7614
 HEAP32[$82 >> 2] = 0; //@line 7616
 HEAP32[$82 + 4 >> 2] = 0; //@line 7619
 HEAP32[$1 >> 2] = 677; //@line 7620
 $86 = $1 + 12 | 0; //@line 7621
 HEAP32[$86 >> 2] = 10276; //@line 7622
 $87 = HEAP32[5960] | 0; //@line 7623
 if (!$87) {
  $98 = 10276; //@line 7626
  label = 34; //@line 7627
 } else {
  $90 = HEAP32[$87 + 8 >> 2] | 0; //@line 7630
  $AsyncCtx6 = _emscripten_alloc_async_context(24, sp) | 0; //@line 7631
  FUNCTION_TABLE_vi[$90 & 1023](23828); //@line 7632
  if (___async) {
   HEAP32[$AsyncCtx6 >> 2] = 678; //@line 7635
   HEAP32[$AsyncCtx6 + 4 >> 2] = $86; //@line 7637
   HEAP32[$AsyncCtx6 + 8 >> 2] = $1; //@line 7639
   HEAP32[$AsyncCtx6 + 12 >> 2] = $vararg_buffer; //@line 7641
   HEAP32[$AsyncCtx6 + 16 >> 2] = $vararg_buffer; //@line 7643
   HEAP32[$AsyncCtx6 + 20 >> 2] = $1; //@line 7645
   sp = STACKTOP; //@line 7646
   STACKTOP = sp; //@line 7647
   return 0; //@line 7647
  }
  _emscripten_free_async_context($AsyncCtx6 | 0); //@line 7649
  $$pr = HEAP32[$86 >> 2] | 0; //@line 7650
  if (!$$pr) {
   HEAP32[5960] = 0; //@line 7653
  } else {
   $98 = $$pr; //@line 7655
   label = 34; //@line 7656
  }
 }
 do {
  if ((label | 0) == 34) {
   $99 = HEAP32[$98 + 4 >> 2] | 0; //@line 7662
   $AsyncCtx9 = _emscripten_alloc_async_context(24, sp) | 0; //@line 7663
   FUNCTION_TABLE_vii[$99 & 15](23828, $1); //@line 7664
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 679; //@line 7667
    HEAP32[$AsyncCtx9 + 4 >> 2] = $86; //@line 7669
    HEAP32[$AsyncCtx9 + 8 >> 2] = $1; //@line 7671
    HEAP32[$AsyncCtx9 + 12 >> 2] = $vararg_buffer; //@line 7673
    HEAP32[$AsyncCtx9 + 16 >> 2] = $vararg_buffer; //@line 7675
    HEAP32[$AsyncCtx9 + 20 >> 2] = $1; //@line 7677
    sp = STACKTOP; //@line 7678
    STACKTOP = sp; //@line 7679
    return 0; //@line 7679
   }
   _emscripten_free_async_context($AsyncCtx9 | 0); //@line 7681
   $$pre$i$i = HEAP32[$86 >> 2] | 0; //@line 7682
   HEAP32[5960] = $$pre$i$i; //@line 7683
   if ($$pre$i$i | 0) {
    $108 = HEAP32[$$pre$i$i + 8 >> 2] | 0; //@line 7688
    $AsyncCtx13 = _emscripten_alloc_async_context(20, sp) | 0; //@line 7689
    FUNCTION_TABLE_vi[$108 & 1023]($1); //@line 7690
    if (___async) {
     HEAP32[$AsyncCtx13 >> 2] = 680; //@line 7693
     HEAP32[$AsyncCtx13 + 4 >> 2] = $1; //@line 7695
     HEAP32[$AsyncCtx13 + 8 >> 2] = $1; //@line 7697
     HEAP32[$AsyncCtx13 + 12 >> 2] = $vararg_buffer; //@line 7699
     HEAP32[$AsyncCtx13 + 16 >> 2] = $vararg_buffer; //@line 7701
     sp = STACKTOP; //@line 7702
     STACKTOP = sp; //@line 7703
     return 0; //@line 7703
    } else {
     _emscripten_free_async_context($AsyncCtx13 | 0); //@line 7705
     break;
    }
   }
  }
 } while (0);
 __ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t(20652, 23828) | 0; //@line 7711
 if (__ZN16LoRaWANInterface25disable_adaptive_datarateEv(20652) | 0) {
  $AsyncCtx21 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7715
  _puts(15381) | 0; //@line 7716
  if (___async) {
   HEAP32[$AsyncCtx21 >> 2] = 681; //@line 7719
   sp = STACKTOP; //@line 7720
   STACKTOP = sp; //@line 7721
   return 0; //@line 7721
  }
  _emscripten_free_async_context($AsyncCtx21 | 0); //@line 7723
  $$1 = -1; //@line 7724
  STACKTOP = sp; //@line 7725
  return $$1 | 0; //@line 7725
 }
 __ZN16LoRaWANInterface12set_datarateEh(20652, 5) | 0; //@line 7727
 HEAP8[$1 >> 0] = 0; //@line 7728
 HEAP32[$1 + 4 >> 2] = 24461; //@line 7730
 HEAP32[$1 + 8 >> 2] = 24469; //@line 7732
 HEAP32[$1 + 12 >> 2] = 24477; //@line 7734
 HEAP8[$1 + 16 >> 0] = 3; //@line 7736
 $119 = __ZN16LoRaWANInterface7connectERK15lorawan_connect(20652, $1) | 0; //@line 7737
 L67 : do {
  switch ($119 | 0) {
  case 0:
  case -1016:
   {
    $AsyncCtx17 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7741
    _puts(15444) | 0; //@line 7742
    if (___async) {
     HEAP32[$AsyncCtx17 >> 2] = 682; //@line 7745
     HEAP32[$AsyncCtx17 + 4 >> 2] = $1; //@line 7747
     sp = STACKTOP; //@line 7748
     STACKTOP = sp; //@line 7749
     return 0; //@line 7749
    }
    _emscripten_free_async_context($AsyncCtx17 | 0); //@line 7751
    $AsyncCtx36 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7752
    __ZN6events10EventQueue8dispatchEi(20448, -1); //@line 7753
    if (___async) {
     HEAP32[$AsyncCtx36 >> 2] = 683; //@line 7756
     HEAP32[$AsyncCtx36 + 4 >> 2] = $1; //@line 7758
     sp = STACKTOP; //@line 7759
     STACKTOP = sp; //@line 7760
     return 0; //@line 7760
    } else {
     _emscripten_free_async_context($AsyncCtx36 | 0); //@line 7762
     $$0 = 0; //@line 7763
     break L67;
    }
    break;
   }
  default:
   {
    HEAP32[$vararg_buffer >> 2] = $119; //@line 7769
    _printf(15415, $vararg_buffer) | 0; //@line 7770
    $$0 = -1; //@line 7771
   }
  }
 } while (0);
 $$1 = $$0; //@line 7775
 STACKTOP = sp; //@line 7776
 return $$1 | 0; //@line 7776
}
function _twoway_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0166 = 0, $$0168 = 0, $$0169 = 0, $$0169$be = 0, $$0170 = 0, $$0175$ph$ph$lcssa216 = 0, $$0175$ph$ph$lcssa216328 = 0, $$0175$ph$ph254 = 0, $$0179242 = 0, $$0183$ph197$ph253 = 0, $$0183$ph197248 = 0, $$0183$ph260 = 0, $$0185$ph$lcssa = 0, $$0185$ph$lcssa327 = 0, $$0185$ph259 = 0, $$0187219$ph325326 = 0, $$0187263 = 0, $$1176$$0175 = 0, $$1176$ph$ph$lcssa208 = 0, $$1176$ph$ph233 = 0, $$1180222 = 0, $$1184$ph193$ph232 = 0, $$1184$ph193227 = 0, $$1184$ph239 = 0, $$1186$$0185 = 0, $$1186$ph$lcssa = 0, $$1186$ph238 = 0, $$2181$sink = 0, $$3 = 0, $$3173 = 0, $$3178 = 0, $$3182221 = 0, $$4 = 0, $$pr = 0, $10 = 0, $105 = 0, $111 = 0, $113 = 0, $118 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $14 = 0, $2 = 0, $23 = 0, $25 = 0, $27 = 0, $3 = 0, $32 = 0, $34 = 0, $37 = 0, $4 = 0, $41 = 0, $45 = 0, $50 = 0, $52 = 0, $53 = 0, $56 = 0, $60 = 0, $68 = 0, $70 = 0, $74 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $83 = 0, $86 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 15712
 STACKTOP = STACKTOP + 1056 | 0; //@line 15713
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1056); //@line 15713
 $2 = sp + 1024 | 0; //@line 15714
 $3 = sp; //@line 15715
 HEAP32[$2 >> 2] = 0; //@line 15716
 HEAP32[$2 + 4 >> 2] = 0; //@line 15716
 HEAP32[$2 + 8 >> 2] = 0; //@line 15716
 HEAP32[$2 + 12 >> 2] = 0; //@line 15716
 HEAP32[$2 + 16 >> 2] = 0; //@line 15716
 HEAP32[$2 + 20 >> 2] = 0; //@line 15716
 HEAP32[$2 + 24 >> 2] = 0; //@line 15716
 HEAP32[$2 + 28 >> 2] = 0; //@line 15716
 $4 = HEAP8[$1 >> 0] | 0; //@line 15717
 L1 : do {
  if (!($4 << 24 >> 24)) {
   $$0175$ph$ph$lcssa216328 = 1; //@line 15721
   $$0185$ph$lcssa327 = -1; //@line 15721
   $$0187219$ph325326 = 0; //@line 15721
   $$1176$ph$ph$lcssa208 = 1; //@line 15721
   $$1186$ph$lcssa = -1; //@line 15721
   label = 26; //@line 15722
  } else {
   $$0187263 = 0; //@line 15724
   $10 = $4; //@line 15724
   do {
    if (!(HEAP8[$0 + $$0187263 >> 0] | 0)) {
     $$3 = 0; //@line 15730
     break L1;
    }
    $14 = $2 + ((($10 & 255) >>> 5 & 255) << 2) | 0; //@line 15738
    HEAP32[$14 >> 2] = HEAP32[$14 >> 2] | 1 << ($10 & 31); //@line 15741
    $$0187263 = $$0187263 + 1 | 0; //@line 15742
    HEAP32[$3 + (($10 & 255) << 2) >> 2] = $$0187263; //@line 15745
    $10 = HEAP8[$1 + $$0187263 >> 0] | 0; //@line 15747
   } while ($10 << 24 >> 24 != 0);
   $23 = $$0187263 >>> 0 > 1; //@line 15755
   if ($23) {
    $$0183$ph260 = 0; //@line 15757
    $$0185$ph259 = -1; //@line 15757
    $130 = 1; //@line 15757
    L6 : while (1) {
     $$0175$ph$ph254 = 1; //@line 15759
     $$0183$ph197$ph253 = $$0183$ph260; //@line 15759
     $131 = $130; //@line 15759
     while (1) {
      $$0183$ph197248 = $$0183$ph197$ph253; //@line 15761
      $132 = $131; //@line 15761
      L10 : while (1) {
       $$0179242 = 1; //@line 15763
       $25 = $132; //@line 15763
       while (1) {
        $32 = HEAP8[$1 + ($$0179242 + $$0185$ph259) >> 0] | 0; //@line 15767
        $34 = HEAP8[$1 + $25 >> 0] | 0; //@line 15769
        if ($32 << 24 >> 24 != $34 << 24 >> 24) {
         break L10;
        }
        if (($$0179242 | 0) == ($$0175$ph$ph254 | 0)) {
         break;
        }
        $$0179242 = $$0179242 + 1 | 0; //@line 15775
        $27 = $$0179242 + $$0183$ph197248 | 0; //@line 15779
        if ($27 >>> 0 >= $$0187263 >>> 0) {
         $$0175$ph$ph$lcssa216 = $$0175$ph$ph254; //@line 15784
         $$0185$ph$lcssa = $$0185$ph259; //@line 15784
         break L6;
        } else {
         $25 = $27; //@line 15782
        }
       }
       $37 = $$0175$ph$ph254 + $$0183$ph197248 | 0; //@line 15788
       $132 = $37 + 1 | 0; //@line 15789
       if ($132 >>> 0 >= $$0187263 >>> 0) {
        $$0175$ph$ph$lcssa216 = $$0175$ph$ph254; //@line 15794
        $$0185$ph$lcssa = $$0185$ph259; //@line 15794
        break L6;
       } else {
        $$0183$ph197248 = $37; //@line 15792
       }
      }
      $41 = $25 - $$0185$ph259 | 0; //@line 15799
      if (($32 & 255) <= ($34 & 255)) {
       break;
      }
      $131 = $25 + 1 | 0; //@line 15803
      if ($131 >>> 0 >= $$0187263 >>> 0) {
       $$0175$ph$ph$lcssa216 = $41; //@line 15808
       $$0185$ph$lcssa = $$0185$ph259; //@line 15808
       break L6;
      } else {
       $$0175$ph$ph254 = $41; //@line 15806
       $$0183$ph197$ph253 = $25; //@line 15806
      }
     }
     $130 = $$0183$ph197248 + 2 | 0; //@line 15813
     if ($130 >>> 0 >= $$0187263 >>> 0) {
      $$0175$ph$ph$lcssa216 = 1; //@line 15818
      $$0185$ph$lcssa = $$0183$ph197248; //@line 15818
      break;
     } else {
      $$0183$ph260 = $$0183$ph197248 + 1 | 0; //@line 15816
      $$0185$ph259 = $$0183$ph197248; //@line 15816
     }
    }
    if ($23) {
     $$1184$ph239 = 0; //@line 15823
     $$1186$ph238 = -1; //@line 15823
     $133 = 1; //@line 15823
     while (1) {
      $$1176$ph$ph233 = 1; //@line 15825
      $$1184$ph193$ph232 = $$1184$ph239; //@line 15825
      $135 = $133; //@line 15825
      while (1) {
       $$1184$ph193227 = $$1184$ph193$ph232; //@line 15827
       $134 = $135; //@line 15827
       L25 : while (1) {
        $$1180222 = 1; //@line 15829
        $52 = $134; //@line 15829
        while (1) {
         $50 = HEAP8[$1 + ($$1180222 + $$1186$ph238) >> 0] | 0; //@line 15833
         $53 = HEAP8[$1 + $52 >> 0] | 0; //@line 15835
         if ($50 << 24 >> 24 != $53 << 24 >> 24) {
          break L25;
         }
         if (($$1180222 | 0) == ($$1176$ph$ph233 | 0)) {
          break;
         }
         $$1180222 = $$1180222 + 1 | 0; //@line 15841
         $45 = $$1180222 + $$1184$ph193227 | 0; //@line 15845
         if ($45 >>> 0 >= $$0187263 >>> 0) {
          $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 15850
          $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 15850
          $$0187219$ph325326 = $$0187263; //@line 15850
          $$1176$ph$ph$lcssa208 = $$1176$ph$ph233; //@line 15850
          $$1186$ph$lcssa = $$1186$ph238; //@line 15850
          label = 26; //@line 15851
          break L1;
         } else {
          $52 = $45; //@line 15848
         }
        }
        $56 = $$1176$ph$ph233 + $$1184$ph193227 | 0; //@line 15855
        $134 = $56 + 1 | 0; //@line 15856
        if ($134 >>> 0 >= $$0187263 >>> 0) {
         $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 15861
         $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 15861
         $$0187219$ph325326 = $$0187263; //@line 15861
         $$1176$ph$ph$lcssa208 = $$1176$ph$ph233; //@line 15861
         $$1186$ph$lcssa = $$1186$ph238; //@line 15861
         label = 26; //@line 15862
         break L1;
        } else {
         $$1184$ph193227 = $56; //@line 15859
        }
       }
       $60 = $52 - $$1186$ph238 | 0; //@line 15867
       if (($50 & 255) >= ($53 & 255)) {
        break;
       }
       $135 = $52 + 1 | 0; //@line 15871
       if ($135 >>> 0 >= $$0187263 >>> 0) {
        $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 15876
        $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 15876
        $$0187219$ph325326 = $$0187263; //@line 15876
        $$1176$ph$ph$lcssa208 = $60; //@line 15876
        $$1186$ph$lcssa = $$1186$ph238; //@line 15876
        label = 26; //@line 15877
        break L1;
       } else {
        $$1176$ph$ph233 = $60; //@line 15874
        $$1184$ph193$ph232 = $52; //@line 15874
       }
      }
      $133 = $$1184$ph193227 + 2 | 0; //@line 15882
      if ($133 >>> 0 >= $$0187263 >>> 0) {
       $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 15887
       $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 15887
       $$0187219$ph325326 = $$0187263; //@line 15887
       $$1176$ph$ph$lcssa208 = 1; //@line 15887
       $$1186$ph$lcssa = $$1184$ph193227; //@line 15887
       label = 26; //@line 15888
       break;
      } else {
       $$1184$ph239 = $$1184$ph193227 + 1 | 0; //@line 15885
       $$1186$ph238 = $$1184$ph193227; //@line 15885
      }
     }
    } else {
     $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 15893
     $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 15893
     $$0187219$ph325326 = $$0187263; //@line 15893
     $$1176$ph$ph$lcssa208 = 1; //@line 15893
     $$1186$ph$lcssa = -1; //@line 15893
     label = 26; //@line 15894
    }
   } else {
    $$0175$ph$ph$lcssa216328 = 1; //@line 15897
    $$0185$ph$lcssa327 = -1; //@line 15897
    $$0187219$ph325326 = $$0187263; //@line 15897
    $$1176$ph$ph$lcssa208 = 1; //@line 15897
    $$1186$ph$lcssa = -1; //@line 15897
    label = 26; //@line 15898
   }
  }
 } while (0);
 L35 : do {
  if ((label | 0) == 26) {
   $68 = ($$1186$ph$lcssa + 1 | 0) >>> 0 > ($$0185$ph$lcssa327 + 1 | 0) >>> 0; //@line 15906
   $$1176$$0175 = $68 ? $$1176$ph$ph$lcssa208 : $$0175$ph$ph$lcssa216328; //@line 15907
   $$1186$$0185 = $68 ? $$1186$ph$lcssa : $$0185$ph$lcssa327; //@line 15908
   $70 = $$1186$$0185 + 1 | 0; //@line 15910
   if (!(_memcmp($1, $1 + $$1176$$0175 | 0, $70) | 0)) {
    $$0168 = $$0187219$ph325326 - $$1176$$0175 | 0; //@line 15915
    $$3178 = $$1176$$0175; //@line 15915
   } else {
    $74 = $$0187219$ph325326 - $$1186$$0185 + -1 | 0; //@line 15918
    $$0168 = 0; //@line 15922
    $$3178 = ($$1186$$0185 >>> 0 > $74 >>> 0 ? $$1186$$0185 : $74) + 1 | 0; //@line 15922
   }
   $78 = $$0187219$ph325326 | 63; //@line 15924
   $79 = $$0187219$ph325326 + -1 | 0; //@line 15925
   $80 = ($$0168 | 0) != 0; //@line 15926
   $81 = $$0187219$ph325326 - $$3178 | 0; //@line 15927
   $$0166 = $0; //@line 15928
   $$0169 = 0; //@line 15928
   $$0170 = $0; //@line 15928
   while (1) {
    $83 = $$0166; //@line 15931
    do {
     if (($$0170 - $83 | 0) >>> 0 < $$0187219$ph325326 >>> 0) {
      $86 = _memchr($$0170, 0, $78) | 0; //@line 15936
      if (!$86) {
       $$3173 = $$0170 + $78 | 0; //@line 15940
       break;
      } else {
       if (($86 - $83 | 0) >>> 0 < $$0187219$ph325326 >>> 0) {
        $$3 = 0; //@line 15947
        break L35;
       } else {
        $$3173 = $86; //@line 15950
        break;
       }
      }
     } else {
      $$3173 = $$0170; //@line 15955
     }
    } while (0);
    $93 = HEAP8[$$0166 + $79 >> 0] | 0; //@line 15959
    L49 : do {
     if (!(1 << ($93 & 31) & HEAP32[$2 + ((($93 & 255) >>> 5 & 255) << 2) >> 2])) {
      $$0169$be = 0; //@line 15971
      $$2181$sink = $$0187219$ph325326; //@line 15971
     } else {
      $105 = $$0187219$ph325326 - (HEAP32[$3 + (($93 & 255) << 2) >> 2] | 0) | 0; //@line 15976
      if ($105 | 0) {
       $$0169$be = 0; //@line 15984
       $$2181$sink = $80 & ($$0169 | 0) != 0 & $105 >>> 0 < $$3178 >>> 0 ? $81 : $105; //@line 15984
       break;
      }
      $111 = $70 >>> 0 > $$0169 >>> 0 ? $70 : $$0169; //@line 15988
      $113 = HEAP8[$1 + $111 >> 0] | 0; //@line 15990
      L54 : do {
       if (!($113 << 24 >> 24)) {
        $$4 = $70; //@line 15994
       } else {
        $$3182221 = $111; //@line 15996
        $$pr = $113; //@line 15996
        while (1) {
         if ($$pr << 24 >> 24 != (HEAP8[$$0166 + $$3182221 >> 0] | 0)) {
          break;
         }
         $118 = $$3182221 + 1 | 0; //@line 16004
         $$pr = HEAP8[$1 + $118 >> 0] | 0; //@line 16006
         if (!($$pr << 24 >> 24)) {
          $$4 = $70; //@line 16009
          break L54;
         } else {
          $$3182221 = $118; //@line 16012
         }
        }
        $$0169$be = 0; //@line 16016
        $$2181$sink = $$3182221 - $$1186$$0185 | 0; //@line 16016
        break L49;
       }
      } while (0);
      while (1) {
       if ($$4 >>> 0 <= $$0169 >>> 0) {
        $$3 = $$0166; //@line 16023
        break L35;
       }
       $$4 = $$4 + -1 | 0; //@line 16026
       if ((HEAP8[$1 + $$4 >> 0] | 0) != (HEAP8[$$0166 + $$4 >> 0] | 0)) {
        $$0169$be = $$0168; //@line 16035
        $$2181$sink = $$3178; //@line 16035
        break;
       }
      }
     }
    } while (0);
    $$0166 = $$0166 + $$2181$sink | 0; //@line 16042
    $$0169 = $$0169$be; //@line 16042
    $$0170 = $$3173; //@line 16042
   }
  }
 } while (0);
 STACKTOP = sp; //@line 16046
 return $$3 | 0; //@line 16046
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_425($0) {
 $0 = $0 | 0;
 var $$058 = 0, $$062 = 0, $$06272 = 0, $$06273 = 0, $$064 = 0, $$06471 = 0, $$06575 = 0, $$06874 = 0, $$166 = 0, $$16670 = 0, $$267 = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $12 = 0, $121 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $26 = 0, $35 = 0, $36 = 0, $4 = 0, $49 = 0, $50 = 0, $51 = 0, $57 = 0, $58 = 0, $6 = 0, $62 = 0, $64 = 0, $70 = 0, $71 = 0, $74 = 0, $76 = 0, $8 = 0, $91 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 30920
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30922
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30924
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30926
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30928
 $10 = HEAP8[$0 + 20 >> 0] | 0; //@line 30930
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30932
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 30934
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 30936
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 30938
 $20 = HEAP8[$0 + 40 >> 0] & 1; //@line 30941
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 30943
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 30947
 if (HEAP8[___async_retval >> 0] & 1) {
  HEAP8[$18 >> 0] = HEAP8[$18 >> 0] | 64; //@line 30954
 }
 if (!(HEAP8[$4 + 1178 >> 0] | 0)) {
  $$pre$phiZ2D = $18; //@line 30960
 } else {
  _mbed_tracef(16, 12890, 13062, $22); //@line 30962
  HEAP8[$18 >> 0] = HEAP8[$18 >> 0] | 32; //@line 30965
  $$pre$phiZ2D = $18; //@line 30966
 }
 $35 = $4 + 1756 | 0; //@line 30968
 $36 = HEAP32[$35 >> 2] | 0; //@line 30969
 HEAP8[$4 + 1186 >> 0] = $36; //@line 30972
 HEAP8[$4 + 1187 >> 0] = $36 >>> 8; //@line 30976
 HEAP8[$4 + 1188 >> 0] = $36 >>> 16; //@line 30980
 HEAP8[$4 + 1189 >> 0] = $36 >>> 24; //@line 30984
 $49 = $4 + 1190 | 0; //@line 30986
 HEAP8[$49 >> 0] = HEAP8[$$pre$phiZ2D >> 0] | 0; //@line 30987
 $50 = $4 + 1760 | 0; //@line 30988
 $51 = HEAP32[$50 >> 2] | 0; //@line 30989
 HEAP8[$4 + 1191 >> 0] = $51; //@line 30992
 HEAP8[$4 + 1192 >> 0] = $51 >>> 8; //@line 30996
 $57 = $4 + 476 | 0; //@line 30997
 __ZN14LoRaMacCommand30copy_repeat_commands_to_bufferEv($57); //@line 30998
 $58 = __ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($57) | 0; //@line 30999
 do {
  if ($20) {
   label = 16; //@line 31002
  } else {
   if (!(HEAP16[$2 >> 1] | 0)) {
    label = 16; //@line 31007
   } else {
    if (!(__ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($57) | 0)) {
     __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($57); //@line 31011
     $$06272 = $10; //@line 31012
     $$06471 = $26; //@line 31012
     $$16670 = 8; //@line 31012
     label = 20; //@line 31013
     break;
    }
    $62 = $58 & 255; //@line 31016
    if (($58 & 255) >= 16) {
     HEAP16[$2 >> 1] = $58 & 255; //@line 31020
     $$062 = 0; //@line 31022
     $$064 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($57) | 0; //@line 31022
     $$166 = 8; //@line 31022
     label = 19; //@line 31023
     break;
    }
    $64 = HEAP8[$$pre$phiZ2D >> 0] | 0; //@line 31026
    $70 = ($64 & 255) + $62 & 15 | $64 & -16; //@line 31032
    HEAP8[$$pre$phiZ2D >> 0] = $70; //@line 31033
    HEAP8[$49 >> 0] = $70; //@line 31034
    $71 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($57) | 0; //@line 31035
    if (!($58 << 24 >> 24)) {
     __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($57); //@line 31038
     $$06272 = $10; //@line 31039
     $$06471 = $26; //@line 31039
     $$16670 = 8; //@line 31039
     label = 20; //@line 31040
     break;
    } else {
     $$06575 = 8; //@line 31043
     $$06874 = 0; //@line 31043
     $74 = 0; //@line 31043
     while (1) {
      $76 = $$06575 + 1 << 24 >> 24; //@line 31047
      HEAP8[($$06575 & 255) + ($4 + 1185) >> 0] = HEAP8[$71 + $74 >> 0] | 0; //@line 31050
      $$06874 = $$06874 + 1 << 16 >> 16; //@line 31051
      $74 = $$06874 & 65535; //@line 31052
      if ($74 >>> 0 >= $62 >>> 0) {
       $$062 = $10; //@line 31057
       $$064 = $26; //@line 31057
       $$166 = $76; //@line 31057
       label = 19; //@line 31058
       break;
      } else {
       $$06575 = $76; //@line 31055
      }
     }
    }
   }
  }
 } while (0);
 if ((label | 0) == 16) {
  if (!($58 << 24 >> 24)) {
   $$062 = $10; //@line 31069
   $$064 = $26; //@line 31069
   $$166 = 8; //@line 31069
   label = 19; //@line 31070
  } else {
   if (__ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($57) | 0) {
    HEAP16[$2 >> 1] = $58 & 255; //@line 31075
    $$062 = 0; //@line 31077
    $$064 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($57) | 0; //@line 31077
    $$166 = 8; //@line 31077
    label = 19; //@line 31078
   } else {
    $$062 = $10; //@line 31080
    $$064 = $26; //@line 31080
    $$166 = 8; //@line 31080
    label = 19; //@line 31081
   }
  }
 }
 if ((label | 0) == 19) {
  __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($57); //@line 31086
  if (!$$064) {
   $$06273 = $$062; //@line 31089
   $$267 = $$166; //@line 31089
  } else {
   $$06272 = $$062; //@line 31091
   $$06471 = $$064; //@line 31091
   $$16670 = $$166; //@line 31091
   label = 20; //@line 31092
  }
 }
 if ((label | 0) == 20) {
  if (!(HEAP16[$2 >> 1] | 0)) {
   $$06273 = $$06272; //@line 31099
   $$267 = $$16670; //@line 31099
  } else {
   $91 = $$16670 + 1 << 24 >> 24; //@line 31101
   HEAP8[($$16670 & 255) + ($4 + 1185) >> 0] = $$06272; //@line 31104
   if (!($$06272 << 24 >> 24)) {
    __ZN14LoRaMacCommand20clear_command_bufferEv($57); //@line 31108
    $$058 = $4 + 1716 | 0; //@line 31110
   } else {
    $$058 = $4 + 1732 | 0; //@line 31112
   }
   $98 = HEAP16[$2 >> 1] | 0; //@line 31115
   $99 = HEAP32[$35 >> 2] | 0; //@line 31116
   $100 = HEAP32[$50 >> 2] | 0; //@line 31117
   $ReallocAsyncCtx = _emscripten_realloc_async_context(48) | 0; //@line 31120
   $103 = __ZN13LoRaMacCrypto15encrypt_payloadEPKhtS1_jjhjPh($4 + 756 | 0, $$06471, $98, $$058, 128, $99, 0, $100, ($91 & 255) + ($4 + 1185) | 0) | 0; //@line 31121
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 429; //@line 31124
    $104 = $ReallocAsyncCtx + 4 | 0; //@line 31125
    HEAP8[$104 >> 0] = $$06272; //@line 31126
    $105 = $ReallocAsyncCtx + 5 | 0; //@line 31127
    HEAP8[$105 >> 0] = $91; //@line 31128
    $106 = $ReallocAsyncCtx + 8 | 0; //@line 31129
    HEAP32[$106 >> 2] = $2; //@line 31130
    $107 = $ReallocAsyncCtx + 12 | 0; //@line 31131
    HEAP32[$107 >> 2] = $4; //@line 31132
    $108 = $ReallocAsyncCtx + 16 | 0; //@line 31133
    HEAP32[$108 >> 2] = $35; //@line 31134
    $109 = $ReallocAsyncCtx + 20 | 0; //@line 31135
    HEAP32[$109 >> 2] = $50; //@line 31136
    $110 = $ReallocAsyncCtx + 24 | 0; //@line 31137
    HEAP32[$110 >> 2] = $6; //@line 31138
    $111 = $ReallocAsyncCtx + 28 | 0; //@line 31139
    HEAP32[$111 >> 2] = $8; //@line 31140
    $112 = $ReallocAsyncCtx + 32 | 0; //@line 31141
    HEAP8[$112 >> 0] = $10; //@line 31142
    $113 = $ReallocAsyncCtx + 36 | 0; //@line 31143
    HEAP32[$113 >> 2] = $12; //@line 31144
    $114 = $ReallocAsyncCtx + 40 | 0; //@line 31145
    HEAP32[$114 >> 2] = $14; //@line 31146
    $115 = $ReallocAsyncCtx + 44 | 0; //@line 31147
    HEAP32[$115 >> 2] = $16; //@line 31148
    sp = STACKTOP; //@line 31149
    return;
   }
   HEAP32[___async_retval >> 2] = $103; //@line 31153
   ___async_unwind = 0; //@line 31154
   HEAP32[$ReallocAsyncCtx >> 2] = 429; //@line 31155
   $104 = $ReallocAsyncCtx + 4 | 0; //@line 31156
   HEAP8[$104 >> 0] = $$06272; //@line 31157
   $105 = $ReallocAsyncCtx + 5 | 0; //@line 31158
   HEAP8[$105 >> 0] = $91; //@line 31159
   $106 = $ReallocAsyncCtx + 8 | 0; //@line 31160
   HEAP32[$106 >> 2] = $2; //@line 31161
   $107 = $ReallocAsyncCtx + 12 | 0; //@line 31162
   HEAP32[$107 >> 2] = $4; //@line 31163
   $108 = $ReallocAsyncCtx + 16 | 0; //@line 31164
   HEAP32[$108 >> 2] = $35; //@line 31165
   $109 = $ReallocAsyncCtx + 20 | 0; //@line 31166
   HEAP32[$109 >> 2] = $50; //@line 31167
   $110 = $ReallocAsyncCtx + 24 | 0; //@line 31168
   HEAP32[$110 >> 2] = $6; //@line 31169
   $111 = $ReallocAsyncCtx + 28 | 0; //@line 31170
   HEAP32[$111 >> 2] = $8; //@line 31171
   $112 = $ReallocAsyncCtx + 32 | 0; //@line 31172
   HEAP8[$112 >> 0] = $10; //@line 31173
   $113 = $ReallocAsyncCtx + 36 | 0; //@line 31174
   HEAP32[$113 >> 2] = $12; //@line 31175
   $114 = $ReallocAsyncCtx + 40 | 0; //@line 31176
   HEAP32[$114 >> 2] = $14; //@line 31177
   $115 = $ReallocAsyncCtx + 44 | 0; //@line 31178
   HEAP32[$115 >> 2] = $16; //@line 31179
   sp = STACKTOP; //@line 31180
   return;
  }
 }
 $121 = (HEAPU16[$2 >> 1] | 0) + ($$267 & 255) & 65535; //@line 31188
 HEAP16[$2 >> 1] = $121; //@line 31189
 $124 = HEAP32[$35 >> 2] | 0; //@line 31192
 $125 = HEAP32[$50 >> 2] | 0; //@line 31193
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 31194
 $126 = __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj($4 + 756 | 0, $6, $121, $4 + 1716 | 0, 128, $124, 0, $125, $8) | 0; //@line 31195
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 430; //@line 31198
  $127 = $ReallocAsyncCtx2 + 4 | 0; //@line 31199
  HEAP32[$127 >> 2] = 0; //@line 31200
  $128 = $ReallocAsyncCtx2 + 8 | 0; //@line 31201
  HEAP32[$128 >> 2] = $8; //@line 31202
  $129 = $ReallocAsyncCtx2 + 12 | 0; //@line 31203
  HEAP32[$129 >> 2] = $2; //@line 31204
  $130 = $ReallocAsyncCtx2 + 16 | 0; //@line 31205
  HEAP32[$130 >> 2] = $4; //@line 31206
  $131 = $ReallocAsyncCtx2 + 20 | 0; //@line 31207
  HEAP8[$131 >> 0] = $10; //@line 31208
  $132 = $ReallocAsyncCtx2 + 21 | 0; //@line 31209
  HEAP8[$132 >> 0] = $$06273; //@line 31210
  $133 = $ReallocAsyncCtx2 + 24 | 0; //@line 31211
  HEAP32[$133 >> 2] = $12; //@line 31212
  $134 = $ReallocAsyncCtx2 + 28 | 0; //@line 31213
  HEAP32[$134 >> 2] = $14; //@line 31214
  $135 = $ReallocAsyncCtx2 + 32 | 0; //@line 31215
  HEAP32[$135 >> 2] = $16; //@line 31216
  sp = STACKTOP; //@line 31217
  return;
 }
 HEAP32[___async_retval >> 2] = $126; //@line 31221
 ___async_unwind = 0; //@line 31222
 HEAP32[$ReallocAsyncCtx2 >> 2] = 430; //@line 31223
 $127 = $ReallocAsyncCtx2 + 4 | 0; //@line 31224
 HEAP32[$127 >> 2] = 0; //@line 31225
 $128 = $ReallocAsyncCtx2 + 8 | 0; //@line 31226
 HEAP32[$128 >> 2] = $8; //@line 31227
 $129 = $ReallocAsyncCtx2 + 12 | 0; //@line 31228
 HEAP32[$129 >> 2] = $2; //@line 31229
 $130 = $ReallocAsyncCtx2 + 16 | 0; //@line 31230
 HEAP32[$130 >> 2] = $4; //@line 31231
 $131 = $ReallocAsyncCtx2 + 20 | 0; //@line 31232
 HEAP8[$131 >> 0] = $10; //@line 31233
 $132 = $ReallocAsyncCtx2 + 21 | 0; //@line 31234
 HEAP8[$132 >> 0] = $$06273; //@line 31235
 $133 = $ReallocAsyncCtx2 + 24 | 0; //@line 31236
 HEAP32[$133 >> 2] = $12; //@line 31237
 $134 = $ReallocAsyncCtx2 + 28 | 0; //@line 31238
 HEAP32[$134 >> 2] = $14; //@line 31239
 $135 = $ReallocAsyncCtx2 + 32 | 0; //@line 31240
 HEAP32[$135 >> 2] = $16; //@line 31241
 sp = STACKTOP; //@line 31242
 return;
}
function _mbedtls_gcm_setkey($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$0$i = 0, $108 = 0, $110 = 0, $115 = 0, $120 = 0, $125 = 0, $130 = 0, $132 = 0, $133 = 0, $134 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $141 = 0, $143 = 0, $148 = 0, $153 = 0, $155 = 0, $156 = 0, $157 = 0, $159 = 0, $160 = 0, $161 = 0, $162 = 0, $164 = 0, $166 = 0, $171 = 0, $176 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $182 = 0, $183 = 0, $184 = 0, $187 = 0, $189 = 0, $194 = 0, $198 = 0, $199 = 0, $201 = 0, $205 = 0, $206 = 0, $208 = 0, $212 = 0, $213 = 0, $215 = 0, $219 = 0, $220 = 0, $222 = 0, $226 = 0, $227 = 0, $229 = 0, $233 = 0, $234 = 0, $236 = 0, $240 = 0, $241 = 0, $243 = 0, $247 = 0, $248 = 0, $250 = 0, $257 = 0, $26 = 0, $264 = 0, $271 = 0, $278 = 0, $285 = 0, $292 = 0, $299 = 0, $306 = 0, $313 = 0, $32 = 0, $320 = 0, $327 = 0, $334 = 0, $341 = 0, $348 = 0, $4 = 0, $5 = 0, $54 = 0, $6 = 0, $72 = 0, $90 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 4123
 STACKTOP = STACKTOP + 32 | 0; //@line 4124
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 4124
 $4 = sp + 8 | 0; //@line 4125
 $5 = sp; //@line 4126
 $6 = _mbedtls_cipher_info_from_values($1, $3, 1) | 0; //@line 4127
 if (!$6) {
  $$0 = -20; //@line 4130
  STACKTOP = sp; //@line 4131
  return $$0 | 0; //@line 4131
 }
 if ((HEAP32[$6 + 24 >> 2] | 0) != 16) {
  $$0 = -20; //@line 4137
  STACKTOP = sp; //@line 4138
  return $$0 | 0; //@line 4138
 }
 $AsyncCtx11 = _emscripten_alloc_async_context(32, sp) | 0; //@line 4140
 _mbedtls_cipher_free($0); //@line 4141
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 609; //@line 4144
  HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 4146
  HEAP32[$AsyncCtx11 + 8 >> 2] = $6; //@line 4148
  HEAP32[$AsyncCtx11 + 12 >> 2] = $2; //@line 4150
  HEAP32[$AsyncCtx11 + 16 >> 2] = $3; //@line 4152
  HEAP32[$AsyncCtx11 + 20 >> 2] = $4; //@line 4154
  HEAP32[$AsyncCtx11 + 24 >> 2] = $5; //@line 4156
  HEAP32[$AsyncCtx11 + 28 >> 2] = $0; //@line 4158
  sp = STACKTOP; //@line 4159
  STACKTOP = sp; //@line 4160
  return 0; //@line 4160
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 4162
 $AsyncCtx7 = _emscripten_alloc_async_context(28, sp) | 0; //@line 4163
 $18 = _mbedtls_cipher_setup($0, $6) | 0; //@line 4164
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 610; //@line 4167
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 4169
  HEAP32[$AsyncCtx7 + 8 >> 2] = $2; //@line 4171
  HEAP32[$AsyncCtx7 + 12 >> 2] = $3; //@line 4173
  HEAP32[$AsyncCtx7 + 16 >> 2] = $4; //@line 4175
  HEAP32[$AsyncCtx7 + 20 >> 2] = $5; //@line 4177
  HEAP32[$AsyncCtx7 + 24 >> 2] = $0; //@line 4179
  sp = STACKTOP; //@line 4180
  STACKTOP = sp; //@line 4181
  return 0; //@line 4181
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 4183
 if ($18 | 0) {
  $$0 = $18; //@line 4186
  STACKTOP = sp; //@line 4187
  return $$0 | 0; //@line 4187
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(20, sp) | 0; //@line 4189
 $26 = _mbedtls_cipher_setkey($0, $2, $3, 1) | 0; //@line 4190
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 611; //@line 4193
  HEAP32[$AsyncCtx3 + 4 >> 2] = $4; //@line 4195
  HEAP32[$AsyncCtx3 + 8 >> 2] = $5; //@line 4197
  HEAP32[$AsyncCtx3 + 12 >> 2] = $0; //@line 4199
  HEAP32[$AsyncCtx3 + 16 >> 2] = $0; //@line 4201
  sp = STACKTOP; //@line 4202
  STACKTOP = sp; //@line 4203
  return 0; //@line 4203
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 4205
 if ($26 | 0) {
  $$0 = $26; //@line 4208
  STACKTOP = sp; //@line 4209
  return $$0 | 0; //@line 4209
 }
 HEAP32[$5 >> 2] = 0; //@line 4211
 dest = $4; //@line 4212
 stop = dest + 16 | 0; //@line 4212
 do {
  HEAP8[dest >> 0] = 0; //@line 4212
  dest = dest + 1 | 0; //@line 4212
 } while ((dest | 0) < (stop | 0));
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 4213
 $32 = _mbedtls_cipher_update($0, $4, 16, $4, $5) | 0; //@line 4214
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 612; //@line 4217
  HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 4219
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 4221
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 4223
  HEAP32[$AsyncCtx + 16 >> 2] = $5; //@line 4225
  sp = STACKTOP; //@line 4226
  STACKTOP = sp; //@line 4227
  return 0; //@line 4227
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 4229
 if (!$32) {
  $54 = (HEAPU8[$4 + 1 >> 0] | 0) << 16 | (HEAPU8[$4 >> 0] | 0) << 24 | (HEAPU8[$4 + 2 >> 0] | 0) << 8 | (HEAPU8[$4 + 3 >> 0] | 0); //@line 4248
  $72 = (HEAPU8[$4 + 5 >> 0] | 0) << 16 | (HEAPU8[$4 + 4 >> 0] | 0) << 24 | (HEAPU8[$4 + 6 >> 0] | 0) << 8 | (HEAPU8[$4 + 7 >> 0] | 0); //@line 4266
  $90 = (HEAPU8[$4 + 9 >> 0] | 0) << 16 | (HEAPU8[$4 + 8 >> 0] | 0) << 24 | (HEAPU8[$4 + 10 >> 0] | 0) << 8 | (HEAPU8[$4 + 11 >> 0] | 0); //@line 4284
  $108 = (HEAPU8[$4 + 13 >> 0] | 0) << 16 | (HEAPU8[$4 + 12 >> 0] | 0) << 24 | (HEAPU8[$4 + 14 >> 0] | 0) << 8 | (HEAPU8[$4 + 15 >> 0] | 0); //@line 4302
  $110 = $0 + 136 | 0; //@line 4304
  HEAP32[$110 >> 2] = $108; //@line 4306
  HEAP32[$110 + 4 >> 2] = $90; //@line 4309
  $115 = $0 + 264 | 0; //@line 4311
  HEAP32[$115 >> 2] = $72; //@line 4313
  HEAP32[$115 + 4 >> 2] = $54; //@line 4316
  $120 = $0 + 200 | 0; //@line 4318
  HEAP32[$120 >> 2] = 0; //@line 4320
  HEAP32[$120 + 4 >> 2] = 0; //@line 4323
  $125 = $0 + 72 | 0; //@line 4325
  HEAP32[$125 >> 2] = 0; //@line 4327
  HEAP32[$125 + 4 >> 2] = 0; //@line 4330
  $130 = _i64Subtract(0, 0, $108 & 1 | 0, 0) | 0; //@line 4332
  $132 = _bitshift64Shl($72 | 0, 0, 63) | 0; //@line 4334
  $133 = tempRet0; //@line 4335
  $134 = _bitshift64Lshr($108 | 0, $90 | 0, 1) | 0; //@line 4336
  $136 = $134 | $132; //@line 4338
  $137 = tempRet0 | $133; //@line 4339
  $138 = _bitshift64Lshr($72 | 0, $54 | 0, 1) | 0; //@line 4340
  $139 = tempRet0; //@line 4341
  $141 = $130 & -520093696 ^ $139; //@line 4343
  $143 = $0 + 104 | 0; //@line 4345
  HEAP32[$143 >> 2] = $136; //@line 4347
  HEAP32[$143 + 4 >> 2] = $137; //@line 4350
  $148 = $0 + 232 | 0; //@line 4352
  HEAP32[$148 >> 2] = $138; //@line 4354
  HEAP32[$148 + 4 >> 2] = $141; //@line 4357
  $153 = _i64Subtract(0, 0, $134 & 1 | 0, 0) | 0; //@line 4359
  $155 = _bitshift64Shl($138 | 0, $139 | 0, 63) | 0; //@line 4361
  $156 = tempRet0; //@line 4362
  $157 = _bitshift64Lshr($136 | 0, $137 | 0, 1) | 0; //@line 4363
  $159 = $157 | $155; //@line 4365
  $160 = tempRet0 | $156; //@line 4366
  $161 = _bitshift64Lshr($138 | 0, $141 | 0, 1) | 0; //@line 4367
  $162 = tempRet0; //@line 4368
  $164 = $153 & -520093696 ^ $162; //@line 4370
  $166 = $0 + 88 | 0; //@line 4372
  HEAP32[$166 >> 2] = $159; //@line 4374
  HEAP32[$166 + 4 >> 2] = $160; //@line 4377
  $171 = $0 + 216 | 0; //@line 4379
  HEAP32[$171 >> 2] = $161; //@line 4381
  HEAP32[$171 + 4 >> 2] = $164; //@line 4384
  $176 = _i64Subtract(0, 0, $157 & 1 | 0, 0) | 0; //@line 4386
  $178 = _bitshift64Shl($161 | 0, $162 | 0, 63) | 0; //@line 4388
  $179 = tempRet0; //@line 4389
  $180 = _bitshift64Lshr($159 | 0, $160 | 0, 1) | 0; //@line 4390
  $182 = $178 | $180; //@line 4392
  $183 = $179 | tempRet0; //@line 4393
  $184 = _bitshift64Lshr($161 | 0, $164 | 0, 1) | 0; //@line 4394
  $187 = $176 & -520093696 ^ tempRet0; //@line 4397
  $189 = $0 + 80 | 0; //@line 4399
  HEAP32[$189 >> 2] = $182; //@line 4401
  HEAP32[$189 + 4 >> 2] = $183; //@line 4404
  $194 = $0 + 208 | 0; //@line 4406
  HEAP32[$194 >> 2] = $184; //@line 4408
  HEAP32[$194 + 4 >> 2] = $187; //@line 4411
  $198 = $184 ^ $161; //@line 4412
  $199 = $187 ^ $164; //@line 4413
  $201 = $0 + 224 | 0; //@line 4415
  HEAP32[$201 >> 2] = $198; //@line 4417
  HEAP32[$201 + 4 >> 2] = $199; //@line 4420
  $205 = $182 ^ $159; //@line 4421
  $206 = $183 ^ $160; //@line 4422
  $208 = $0 + 96 | 0; //@line 4424
  HEAP32[$208 >> 2] = $205; //@line 4426
  HEAP32[$208 + 4 >> 2] = $206; //@line 4429
  $212 = $184 ^ $138; //@line 4430
  $213 = $187 ^ $141; //@line 4431
  $215 = $0 + 240 | 0; //@line 4433
  HEAP32[$215 >> 2] = $212; //@line 4435
  HEAP32[$215 + 4 >> 2] = $213; //@line 4438
  $219 = $182 ^ $136; //@line 4439
  $220 = $183 ^ $137; //@line 4440
  $222 = $0 + 112 | 0; //@line 4442
  HEAP32[$222 >> 2] = $219; //@line 4444
  HEAP32[$222 + 4 >> 2] = $220; //@line 4447
  $226 = $161 ^ $138; //@line 4448
  $227 = $164 ^ $141; //@line 4449
  $229 = $0 + 248 | 0; //@line 4451
  HEAP32[$229 >> 2] = $226; //@line 4453
  HEAP32[$229 + 4 >> 2] = $227; //@line 4456
  $233 = $159 ^ $136; //@line 4457
  $234 = $160 ^ $137; //@line 4458
  $236 = $0 + 120 | 0; //@line 4460
  HEAP32[$236 >> 2] = $233; //@line 4462
  HEAP32[$236 + 4 >> 2] = $234; //@line 4465
  $240 = $198 ^ $138; //@line 4466
  $241 = $199 ^ $141; //@line 4467
  $243 = $0 + 256 | 0; //@line 4469
  HEAP32[$243 >> 2] = $240; //@line 4471
  HEAP32[$243 + 4 >> 2] = $241; //@line 4474
  $247 = $205 ^ $136; //@line 4475
  $248 = $206 ^ $137; //@line 4476
  $250 = $0 + 128 | 0; //@line 4478
  HEAP32[$250 >> 2] = $247; //@line 4480
  HEAP32[$250 + 4 >> 2] = $248; //@line 4483
  $257 = $0 + 272 | 0; //@line 4487
  HEAP32[$257 >> 2] = $184 ^ $72; //@line 4489
  HEAP32[$257 + 4 >> 2] = $187 ^ $54; //@line 4492
  $264 = $0 + 144 | 0; //@line 4496
  HEAP32[$264 >> 2] = $182 ^ $108; //@line 4498
  HEAP32[$264 + 4 >> 2] = $183 ^ $90; //@line 4501
  $271 = $0 + 280 | 0; //@line 4505
  HEAP32[$271 >> 2] = $161 ^ $72; //@line 4507
  HEAP32[$271 + 4 >> 2] = $164 ^ $54; //@line 4510
  $278 = $0 + 152 | 0; //@line 4514
  HEAP32[$278 >> 2] = $159 ^ $108; //@line 4516
  HEAP32[$278 + 4 >> 2] = $160 ^ $90; //@line 4519
  $285 = $0 + 288 | 0; //@line 4523
  HEAP32[$285 >> 2] = $198 ^ $72; //@line 4525
  HEAP32[$285 + 4 >> 2] = $199 ^ $54; //@line 4528
  $292 = $0 + 160 | 0; //@line 4532
  HEAP32[$292 >> 2] = $205 ^ $108; //@line 4534
  HEAP32[$292 + 4 >> 2] = $206 ^ $90; //@line 4537
  $299 = $0 + 296 | 0; //@line 4541
  HEAP32[$299 >> 2] = $138 ^ $72; //@line 4543
  HEAP32[$299 + 4 >> 2] = $141 ^ $54; //@line 4546
  $306 = $0 + 168 | 0; //@line 4550
  HEAP32[$306 >> 2] = $136 ^ $108; //@line 4552
  HEAP32[$306 + 4 >> 2] = $137 ^ $90; //@line 4555
  $313 = $0 + 304 | 0; //@line 4559
  HEAP32[$313 >> 2] = $212 ^ $72; //@line 4561
  HEAP32[$313 + 4 >> 2] = $213 ^ $54; //@line 4564
  $320 = $0 + 176 | 0; //@line 4568
  HEAP32[$320 >> 2] = $219 ^ $108; //@line 4570
  HEAP32[$320 + 4 >> 2] = $220 ^ $90; //@line 4573
  $327 = $0 + 312 | 0; //@line 4577
  HEAP32[$327 >> 2] = $226 ^ $72; //@line 4579
  HEAP32[$327 + 4 >> 2] = $227 ^ $54; //@line 4582
  $334 = $0 + 184 | 0; //@line 4586
  HEAP32[$334 >> 2] = $233 ^ $108; //@line 4588
  HEAP32[$334 + 4 >> 2] = $234 ^ $90; //@line 4591
  $341 = $0 + 320 | 0; //@line 4595
  HEAP32[$341 >> 2] = $240 ^ $72; //@line 4597
  HEAP32[$341 + 4 >> 2] = $241 ^ $54; //@line 4600
  $348 = $0 + 192 | 0; //@line 4604
  HEAP32[$348 >> 2] = $247 ^ $108; //@line 4606
  HEAP32[$348 + 4 >> 2] = $248 ^ $90; //@line 4609
  $$0$i = 0; //@line 4610
 } else {
  $$0$i = $32; //@line 4612
 }
 $$0 = $$0$i; //@line 4614
 STACKTOP = sp; //@line 4615
 return $$0 | 0; //@line 4615
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $103 = 0, $104 = 0, $108 = 0, $11 = 0, $110 = 0, $115 = 0, $116 = 0, $119 = 0, $122 = 0, $13 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $25 = 0, $33 = 0, $4 = 0, $41 = 0, $53 = 0, $54 = 0, $58 = 0, $6 = 0, $60 = 0, $69 = 0, $7 = 0, $70 = 0, $77 = 0, $80 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx21 = 0, $AsyncCtx24 = 0, $AsyncCtx27 = 0, $AsyncCtx30 = 0, $AsyncCtx34 = 0, $AsyncCtx38 = 0, $AsyncCtx42 = 0, $AsyncCtx7 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 7956
 STACKTOP = STACKTOP + 64 | 0; //@line 7957
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 7957
 $vararg_buffer3 = sp + 24 | 0; //@line 7958
 $vararg_buffer1 = sp + 16 | 0; //@line 7959
 $vararg_buffer = sp; //@line 7960
 $1 = sp + 40 | 0; //@line 7961
 $2 = __ZNK7LoRaMac19get_mcps_indicationEv($0) | 0; //@line 7962
 $4 = HEAP32[$2 + 8 >> 2] | 0; //@line 7964
 if ($4 | 0) {
  HEAP32[$vararg_buffer >> 2] = $4; //@line 7967
  _mbed_tracef(2, 12211, 12253, $vararg_buffer); //@line 7968
  $6 = $0 + 2512 | 0; //@line 7969
  $7 = HEAP32[$6 >> 2] | 0; //@line 7970
  do {
   if ($7 | 0) {
    $11 = HEAP32[$0 + 3168 >> 2] | 0; //@line 7976
    $13 = HEAP32[$7 + 4 >> 2] | 0; //@line 7978
    $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 7979
    FUNCTION_TABLE_vii[$13 & 15]($vararg_buffer, $0 + 2500 | 0); //@line 7980
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 255; //@line 7983
     HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 7985
     HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 7987
     HEAP32[$AsyncCtx + 12 >> 2] = $11; //@line 7989
     HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer; //@line 7991
     sp = STACKTOP; //@line 7992
     STACKTOP = sp; //@line 7993
     return;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 7995
    $18 = $vararg_buffer + 12 | 0; //@line 7997
    HEAP32[$18 >> 2] = HEAP32[$6 >> 2]; //@line 7998
    $AsyncCtx30 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7999
    $19 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($11, $vararg_buffer, 9) | 0; //@line 8000
    if (___async) {
     HEAP32[$AsyncCtx30 >> 2] = 256; //@line 8003
     HEAP32[$AsyncCtx30 + 4 >> 2] = $18; //@line 8005
     HEAP32[$AsyncCtx30 + 8 >> 2] = $vararg_buffer; //@line 8007
     sp = STACKTOP; //@line 8008
     STACKTOP = sp; //@line 8009
     return;
    }
    _emscripten_free_async_context($AsyncCtx30 | 0); //@line 8011
    $22 = HEAP32[$18 >> 2] | 0; //@line 8012
    do {
     if ($22 | 0) {
      $25 = HEAP32[$22 + 8 >> 2] | 0; //@line 8017
      $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 8018
      FUNCTION_TABLE_vi[$25 & 1023]($vararg_buffer); //@line 8019
      if (___async) {
       HEAP32[$AsyncCtx7 >> 2] = 257; //@line 8022
       HEAP32[$AsyncCtx7 + 4 >> 2] = $19; //@line 8024
       HEAP32[$AsyncCtx7 + 8 >> 2] = $vararg_buffer; //@line 8026
       sp = STACKTOP; //@line 8027
       STACKTOP = sp; //@line 8028
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx7 | 0); //@line 8030
       break;
      }
     }
    } while (0);
    if (!$19) {
     $AsyncCtx42 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8037
     _mbed_assert_internal(12104, 12113, 775); //@line 8038
     if (___async) {
      HEAP32[$AsyncCtx42 >> 2] = 258; //@line 8041
      HEAP32[$AsyncCtx42 + 4 >> 2] = $vararg_buffer; //@line 8043
      sp = STACKTOP; //@line 8044
      STACKTOP = sp; //@line 8045
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx42 | 0); //@line 8047
      break;
     }
    }
   }
  } while (0);
  STACKTOP = sp; //@line 8053
  return;
 }
 HEAP32[$0 + 2556 >> 2] = HEAP32[$2 + 36 >> 2]; //@line 8058
 $33 = $2 + 13 | 0; //@line 8059
 if ((HEAP8[$33 >> 0] | 0) == -32) {
  _mbed_tracef(8, 12211, 12291, $vararg_buffer1); //@line 8063
  STACKTOP = sp; //@line 8064
  return;
 }
 if (HEAP8[$2 + 22 >> 0] | 0) {
  HEAP32[$0 + 2836 >> 2] = 2; //@line 8071
  $41 = HEAP16[$2 + 20 >> 1] | 0; //@line 8073
  HEAP16[$0 + 2860 >> 1] = $41; //@line 8075
  HEAP8[$0 + 2853 >> 0] = HEAP8[$33 >> 0] | 0; //@line 8078
  HEAP32[$0 + 2856 >> 2] = HEAP32[$2 + 16 >> 2]; //@line 8082
  HEAP32[$0 + 2844 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 8086
  HEAP32[$vararg_buffer3 >> 2] = $41 & 65535; //@line 8088
  _mbed_tracef(16, 12211, 12317, $vararg_buffer3); //@line 8089
  HEAP8[$0 + 2832 >> 0] = 1; //@line 8091
  $53 = $0 + 2512 | 0; //@line 8092
  $54 = HEAP32[$53 >> 2] | 0; //@line 8093
  do {
   if ($54 | 0) {
    $58 = HEAP32[$0 + 3168 >> 2] | 0; //@line 8099
    $60 = HEAP32[$54 + 4 >> 2] | 0; //@line 8101
    $AsyncCtx10 = _emscripten_alloc_async_context(36, sp) | 0; //@line 8102
    FUNCTION_TABLE_vii[$60 & 15]($vararg_buffer3, $0 + 2500 | 0); //@line 8103
    if (___async) {
     HEAP32[$AsyncCtx10 >> 2] = 259; //@line 8106
     HEAP32[$AsyncCtx10 + 4 >> 2] = $vararg_buffer3; //@line 8108
     HEAP32[$AsyncCtx10 + 8 >> 2] = $2; //@line 8110
     HEAP32[$AsyncCtx10 + 12 >> 2] = $0; //@line 8112
     HEAP32[$AsyncCtx10 + 16 >> 2] = $0; //@line 8114
     HEAP32[$AsyncCtx10 + 20 >> 2] = $1; //@line 8116
     HEAP32[$AsyncCtx10 + 24 >> 2] = $53; //@line 8118
     HEAP32[$AsyncCtx10 + 28 >> 2] = $vararg_buffer3; //@line 8120
     HEAP32[$AsyncCtx10 + 32 >> 2] = $58; //@line 8122
     sp = STACKTOP; //@line 8123
     STACKTOP = sp; //@line 8124
     return;
    }
    _emscripten_free_async_context($AsyncCtx10 | 0); //@line 8126
    $69 = $vararg_buffer3 + 12 | 0; //@line 8128
    HEAP32[$69 >> 2] = HEAP32[$53 >> 2]; //@line 8129
    $AsyncCtx27 = _emscripten_alloc_async_context(28, sp) | 0; //@line 8130
    $70 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($58, $vararg_buffer3, 7) | 0; //@line 8131
    if (___async) {
     HEAP32[$AsyncCtx27 >> 2] = 260; //@line 8134
     HEAP32[$AsyncCtx27 + 4 >> 2] = $vararg_buffer3; //@line 8136
     HEAP32[$AsyncCtx27 + 8 >> 2] = $2; //@line 8138
     HEAP32[$AsyncCtx27 + 12 >> 2] = $0; //@line 8140
     HEAP32[$AsyncCtx27 + 16 >> 2] = $0; //@line 8142
     HEAP32[$AsyncCtx27 + 20 >> 2] = $1; //@line 8144
     HEAP32[$AsyncCtx27 + 24 >> 2] = $69; //@line 8146
     sp = STACKTOP; //@line 8147
     STACKTOP = sp; //@line 8148
     return;
    }
    _emscripten_free_async_context($AsyncCtx27 | 0); //@line 8150
    $77 = HEAP32[$69 >> 2] | 0; //@line 8151
    do {
     if ($77 | 0) {
      $80 = HEAP32[$77 + 8 >> 2] | 0; //@line 8156
      $AsyncCtx14 = _emscripten_alloc_async_context(28, sp) | 0; //@line 8157
      FUNCTION_TABLE_vi[$80 & 1023]($vararg_buffer3); //@line 8158
      if (___async) {
       HEAP32[$AsyncCtx14 >> 2] = 261; //@line 8161
       HEAP32[$AsyncCtx14 + 4 >> 2] = $vararg_buffer3; //@line 8163
       HEAP32[$AsyncCtx14 + 8 >> 2] = $2; //@line 8165
       HEAP32[$AsyncCtx14 + 12 >> 2] = $0; //@line 8167
       HEAP32[$AsyncCtx14 + 16 >> 2] = $0; //@line 8169
       HEAP32[$AsyncCtx14 + 20 >> 2] = $1; //@line 8171
       HEAP32[$AsyncCtx14 + 24 >> 2] = $70; //@line 8173
       sp = STACKTOP; //@line 8174
       STACKTOP = sp; //@line 8175
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx14 | 0); //@line 8177
       break;
      }
     }
    } while (0);
    if (!$70) {
     $AsyncCtx38 = _emscripten_alloc_async_context(24, sp) | 0; //@line 8184
     _mbed_assert_internal(12104, 12113, 775); //@line 8185
     if (___async) {
      HEAP32[$AsyncCtx38 >> 2] = 262; //@line 8188
      HEAP32[$AsyncCtx38 + 4 >> 2] = $vararg_buffer3; //@line 8190
      HEAP32[$AsyncCtx38 + 8 >> 2] = $2; //@line 8192
      HEAP32[$AsyncCtx38 + 12 >> 2] = $0; //@line 8194
      HEAP32[$AsyncCtx38 + 16 >> 2] = $0; //@line 8196
      HEAP32[$AsyncCtx38 + 20 >> 2] = $1; //@line 8198
      sp = STACKTOP; //@line 8199
      STACKTOP = sp; //@line 8200
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx38 | 0); //@line 8202
      break;
     }
    }
   }
  } while (0);
 }
 if ((__ZNK7LoRaMac16get_device_classEv($0) | 0) == 2) {
  label = 35; //@line 8212
 } else {
  if (!(HEAP8[$2 + 15 >> 0] | 0)) {
   label = 35; //@line 8218
  }
 }
 if ((label | 0) == 35) {
  if ((__ZNK7LoRaMac16get_device_classEv($0) | 0) != 2) {
   STACKTOP = sp; //@line 8225
   return;
  }
  if ((HEAP32[$2 + 4 >> 2] | 0) != 1) {
   STACKTOP = sp; //@line 8231
   return;
  }
 }
 $103 = $0 + 2512 | 0; //@line 8234
 $104 = HEAP32[$103 >> 2] | 0; //@line 8235
 do {
  if ($104 | 0) {
   $108 = HEAP32[$0 + 3168 >> 2] | 0; //@line 8241
   $110 = HEAP32[$104 + 4 >> 2] | 0; //@line 8243
   $AsyncCtx17 = _emscripten_alloc_async_context(20, sp) | 0; //@line 8244
   FUNCTION_TABLE_vii[$110 & 15]($1, $0 + 2500 | 0); //@line 8245
   if (___async) {
    HEAP32[$AsyncCtx17 >> 2] = 263; //@line 8248
    HEAP32[$AsyncCtx17 + 4 >> 2] = $103; //@line 8250
    HEAP32[$AsyncCtx17 + 8 >> 2] = $1; //@line 8252
    HEAP32[$AsyncCtx17 + 12 >> 2] = $108; //@line 8254
    HEAP32[$AsyncCtx17 + 16 >> 2] = $1; //@line 8256
    sp = STACKTOP; //@line 8257
    STACKTOP = sp; //@line 8258
    return;
   }
   _emscripten_free_async_context($AsyncCtx17 | 0); //@line 8260
   $115 = $1 + 12 | 0; //@line 8262
   HEAP32[$115 >> 2] = HEAP32[$103 >> 2]; //@line 8263
   $AsyncCtx24 = _emscripten_alloc_async_context(12, sp) | 0; //@line 8264
   $116 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($108, $1, 11) | 0; //@line 8265
   if (___async) {
    HEAP32[$AsyncCtx24 >> 2] = 264; //@line 8268
    HEAP32[$AsyncCtx24 + 4 >> 2] = $115; //@line 8270
    HEAP32[$AsyncCtx24 + 8 >> 2] = $1; //@line 8272
    sp = STACKTOP; //@line 8273
    STACKTOP = sp; //@line 8274
    return;
   }
   _emscripten_free_async_context($AsyncCtx24 | 0); //@line 8276
   $119 = HEAP32[$115 >> 2] | 0; //@line 8277
   do {
    if ($119 | 0) {
     $122 = HEAP32[$119 + 8 >> 2] | 0; //@line 8282
     $AsyncCtx21 = _emscripten_alloc_async_context(12, sp) | 0; //@line 8283
     FUNCTION_TABLE_vi[$122 & 1023]($1); //@line 8284
     if (___async) {
      HEAP32[$AsyncCtx21 >> 2] = 265; //@line 8287
      HEAP32[$AsyncCtx21 + 4 >> 2] = $116; //@line 8289
      HEAP32[$AsyncCtx21 + 8 >> 2] = $1; //@line 8291
      sp = STACKTOP; //@line 8292
      STACKTOP = sp; //@line 8293
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx21 | 0); //@line 8295
      break;
     }
    }
   } while (0);
   if (!$116) {
    $AsyncCtx34 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8302
    _mbed_assert_internal(12104, 12113, 775); //@line 8303
    if (___async) {
     HEAP32[$AsyncCtx34 >> 2] = 266; //@line 8306
     HEAP32[$AsyncCtx34 + 4 >> 2] = $1; //@line 8308
     sp = STACKTOP; //@line 8309
     STACKTOP = sp; //@line 8310
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx34 | 0); //@line 8312
     break;
    }
   }
  }
 } while (0);
 STACKTOP = sp; //@line 8318
 return;
}
function __ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_5($0) {
 $0 = $0 | 0;
 var $$pre$phi$sinkZ2D = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $124 = 0, $126 = 0, $134 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $46 = 0, $49 = 0, $50 = 0, $51 = 0, $53 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $67 = 0, $69 = 0, $70 = 0, $75 = 0, $76 = 0, $8 = 0, $81 = 0, $82 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 18700
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18702
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18704
 $6 = HEAP8[$0 + 12 >> 0] & 1; //@line 18707
 $8 = HEAP8[$0 + 13 >> 0] | 0; //@line 18709
 $10 = HEAP32[$0 + 16 >> 2] | 0; //@line 18711
 $12 = HEAP16[$0 + 20 >> 1] | 0; //@line 18713
 $14 = HEAP8[$0 + 22 >> 0] | 0; //@line 18715
 $16 = HEAP32[$0 + 24 >> 2] | 0; //@line 18717
 $18 = HEAP8[$0 + 28 >> 0] | 0; //@line 18719
 $20 = HEAP32[$0 + 32 >> 2] | 0; //@line 18721
 $22 = HEAP8[$0 + 36 >> 0] | 0; //@line 18723
 $24 = HEAP8[$0 + 37 >> 0] | 0; //@line 18725
 $26 = HEAP32[$0 + 40 >> 2] | 0; //@line 18727
 $28 = HEAP32[$0 + 44 >> 2] | 0; //@line 18729
 $30 = HEAP16[$0 + 48 >> 1] | 0; //@line 18731
 $32 = HEAP32[$0 + 52 >> 2] | 0; //@line 18733
 $34 = HEAP32[$0 + 56 >> 2] | 0; //@line 18735
 $36 = HEAP32[$0 + 60 >> 2] | 0; //@line 18737
 $38 = HEAP32[$0 + 64 >> 2] | 0; //@line 18739
 $40 = HEAP32[$0 + 68 >> 2] | 0; //@line 18741
 $42 = HEAP32[$0 + 72 >> 2] | 0; //@line 18743
 $46 = HEAP32[$0 + 80 >> 2] | 0; //@line 18747
 $49 = $2 + 2062 | 0; //@line 18750
 HEAP8[$49 >> 0] = 0; //@line 18751
 $50 = $2 + 2044 | 0; //@line 18752
 HEAP8[$50 >> 0] = 0; //@line 18753
 $51 = $2 + 2012 | 0; //@line 18754
 HEAP8[$51 >> 0] = 1; //@line 18755
 HEAP8[$2 + 2034 >> 0] = 0; //@line 18757
 $53 = $2 + 2020 | 0; //@line 18758
 HEAP32[$53 >> 2] = 0; //@line 18759
 HEAP8[$2 + 2024 >> 0] = $6 & 1; //@line 18762
 HEAP8[$2 + 2027 >> 0] = ($8 & 255) >>> 4 & 1; //@line 18766
 $59 = $2 + 2028 | 0; //@line 18767
 HEAP32[$59 >> 2] = 0; //@line 18768
 $60 = $2 + 2032 | 0; //@line 18769
 HEAP16[$60 >> 1] = 0; //@line 18770
 $61 = HEAP32[$10 >> 2] | 0; //@line 18771
 $62 = $2 + 2048 | 0; //@line 18772
 HEAP32[$62 >> 2] = $61; //@line 18773
 HEAP16[$2 + 2036 >> 1] = $12; //@line 18775
 HEAP8[$2 + 2038 >> 0] = $14; //@line 18777
 HEAP32[$2 + 2056 >> 2] = 0; //@line 18779
 HEAP32[$2 + 1768 >> 2] = 0; //@line 18781
 $67 = $2 + 476 | 0; //@line 18782
 __ZN14LoRaMacCommand19clear_repeat_bufferEv($67); //@line 18783
 L2 : do {
  if ($6) {
   HEAP32[$2 + 2016 >> 2] = 2; //@line 18787
   $69 = $4 + 36 | 0; //@line 18788
   $70 = HEAP32[$69 >> 2] | 0; //@line 18789
   if (($70 | 0) == 0 | ($70 | 0) != ($61 | 0)) {
    $$pre$phi$sinkZ2D = $69; //@line 18794
   } else {
    HEAP32[$53 >> 2] = 8; //@line 18796
    HEAP32[$62 >> 2] = $61; //@line 18797
    HEAP8[$51 >> 0] = 0; //@line 18798
    return;
   }
  } else {
   switch ($22 << 24 >> 24) {
   case 5:
    {
     HEAP8[$2 + 1178 >> 0] = 1; //@line 18805
     HEAP32[$2 + 2016 >> 2] = 1; //@line 18807
     $75 = $2 + 1764 | 0; //@line 18808
     $76 = HEAP32[$75 >> 2] | 0; //@line 18809
     if (($76 | 0) == 0 | ($76 | 0) != ($61 | 0)) {
      $$pre$phi$sinkZ2D = $75; //@line 18814
      break L2;
     }
     _mbed_tracef(16, 12890, 12952, $46); //@line 18817
     HEAP8[$51 >> 0] = 0; //@line 18818
     HEAP32[$53 >> 2] = 8; //@line 18819
     $$pre$phi$sinkZ2D = $75; //@line 18820
     break L2;
     break;
    }
   case 3:
    {
     HEAP8[$2 + 1178 >> 0] = 0; //@line 18826
     HEAP32[$2 + 2016 >> 2] = 0; //@line 18828
     $81 = $2 + 1764 | 0; //@line 18829
     $82 = HEAP32[$81 >> 2] | 0; //@line 18830
     if (($82 | 0) == 0 | ($82 | 0) != ($61 | 0)) {
      $$pre$phi$sinkZ2D = $81; //@line 18835
      break L2;
     }
     _mbed_tracef(16, 12890, 12952, $42); //@line 18838
     HEAP8[$51 >> 0] = 0; //@line 18839
     HEAP32[$53 >> 2] = 8; //@line 18840
     return;
    }
   default:
    {
     $$pre$phi$sinkZ2D = $2 + 1764 | 0; //@line 18846
     break L2;
    }
   }
  }
 } while (0);
 HEAP32[$$pre$phi$sinkZ2D >> 2] = $61; //@line 18852
 if (!(HEAP8[$2 + 1177 >> 0] | 0)) {
  __ZN14LoRaMacCommand20clear_command_bufferEv($67); //@line 18857
 } else {
  if ($8 & 32) {
   __ZN14LoRaMacCommand20clear_command_bufferEv($67); //@line 18862
   HEAP8[$49 >> 0] = 1; //@line 18863
   HEAP8[$50 >> 0] = 1; //@line 18864
  }
 }
 if ($28 + 252 - ($18 & 255) & 255 | 0) {
  $ReallocAsyncCtx = _emscripten_realloc_async_context(48) | 0; //@line 18873
  __ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa($2, $16, $30, $24, $32, $34, $36, $61, 0, $14); //@line 18874
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 402; //@line 18877
   $95 = $ReallocAsyncCtx + 4 | 0; //@line 18878
   HEAP8[$95 >> 0] = $22; //@line 18879
   $96 = $ReallocAsyncCtx + 8 | 0; //@line 18880
   HEAP32[$96 >> 2] = $2; //@line 18881
   $97 = $ReallocAsyncCtx + 12 | 0; //@line 18882
   HEAP32[$97 >> 2] = $26; //@line 18883
   $98 = $ReallocAsyncCtx + 16 | 0; //@line 18884
   HEAP32[$98 >> 2] = $16; //@line 18885
   $99 = $ReallocAsyncCtx + 20 | 0; //@line 18886
   HEAP32[$99 >> 2] = $28; //@line 18887
   $100 = $ReallocAsyncCtx + 24 | 0; //@line 18888
   HEAP32[$100 >> 2] = $53; //@line 18889
   $101 = $ReallocAsyncCtx + 28 | 0; //@line 18890
   HEAP32[$101 >> 2] = $59; //@line 18891
   $102 = $ReallocAsyncCtx + 32 | 0; //@line 18892
   HEAP32[$102 >> 2] = $60; //@line 18893
   $103 = $ReallocAsyncCtx + 36 | 0; //@line 18894
   HEAP32[$103 >> 2] = $49; //@line 18895
   $104 = $ReallocAsyncCtx + 40 | 0; //@line 18896
   HEAP32[$104 >> 2] = $40; //@line 18897
   $105 = $ReallocAsyncCtx + 44 | 0; //@line 18898
   HEAP32[$105 >> 2] = $38; //@line 18899
   sp = STACKTOP; //@line 18900
   return;
  }
  ___async_unwind = 0; //@line 18903
  HEAP32[$ReallocAsyncCtx >> 2] = 402; //@line 18904
  $95 = $ReallocAsyncCtx + 4 | 0; //@line 18905
  HEAP8[$95 >> 0] = $22; //@line 18906
  $96 = $ReallocAsyncCtx + 8 | 0; //@line 18907
  HEAP32[$96 >> 2] = $2; //@line 18908
  $97 = $ReallocAsyncCtx + 12 | 0; //@line 18909
  HEAP32[$97 >> 2] = $26; //@line 18910
  $98 = $ReallocAsyncCtx + 16 | 0; //@line 18911
  HEAP32[$98 >> 2] = $16; //@line 18912
  $99 = $ReallocAsyncCtx + 20 | 0; //@line 18913
  HEAP32[$99 >> 2] = $28; //@line 18914
  $100 = $ReallocAsyncCtx + 24 | 0; //@line 18915
  HEAP32[$100 >> 2] = $53; //@line 18916
  $101 = $ReallocAsyncCtx + 28 | 0; //@line 18917
  HEAP32[$101 >> 2] = $59; //@line 18918
  $102 = $ReallocAsyncCtx + 32 | 0; //@line 18919
  HEAP32[$102 >> 2] = $60; //@line 18920
  $103 = $ReallocAsyncCtx + 36 | 0; //@line 18921
  HEAP32[$103 >> 2] = $49; //@line 18922
  $104 = $ReallocAsyncCtx + 40 | 0; //@line 18923
  HEAP32[$104 >> 2] = $40; //@line 18924
  $105 = $ReallocAsyncCtx + 44 | 0; //@line 18925
  HEAP32[$105 >> 2] = $38; //@line 18926
  sp = STACKTOP; //@line 18927
  return;
 }
 if ($24 << 24 >> 24) {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(52) | 0; //@line 18934
  $109 = __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($67, $16, 8, $18, $14, $2 + 2084 | 0, $2 + 1876 | 0, $20) | 0; //@line 18935
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 403; //@line 18938
   $110 = $ReallocAsyncCtx3 + 4 | 0; //@line 18939
   HEAP32[$110 >> 2] = $67; //@line 18940
   $111 = $ReallocAsyncCtx3 + 8 | 0; //@line 18941
   HEAP32[$111 >> 2] = $53; //@line 18942
   $112 = $ReallocAsyncCtx3 + 12 | 0; //@line 18943
   HEAP8[$112 >> 0] = $22; //@line 18944
   $113 = $ReallocAsyncCtx3 + 16 | 0; //@line 18945
   HEAP32[$113 >> 2] = $2; //@line 18946
   $114 = $ReallocAsyncCtx3 + 20 | 0; //@line 18947
   HEAP32[$114 >> 2] = $26; //@line 18948
   $115 = $ReallocAsyncCtx3 + 24 | 0; //@line 18949
   HEAP32[$115 >> 2] = $16; //@line 18950
   $116 = $ReallocAsyncCtx3 + 28 | 0; //@line 18951
   HEAP32[$116 >> 2] = $28; //@line 18952
   $117 = $ReallocAsyncCtx3 + 32 | 0; //@line 18953
   HEAP32[$117 >> 2] = $59; //@line 18954
   $118 = $ReallocAsyncCtx3 + 36 | 0; //@line 18955
   HEAP32[$118 >> 2] = $60; //@line 18956
   $119 = $ReallocAsyncCtx3 + 40 | 0; //@line 18957
   HEAP32[$119 >> 2] = $49; //@line 18958
   $120 = $ReallocAsyncCtx3 + 44 | 0; //@line 18959
   HEAP32[$120 >> 2] = $40; //@line 18960
   $121 = $ReallocAsyncCtx3 + 48 | 0; //@line 18961
   HEAP32[$121 >> 2] = $38; //@line 18962
   sp = STACKTOP; //@line 18963
   return;
  }
  HEAP32[___async_retval >> 2] = $109; //@line 18967
  ___async_unwind = 0; //@line 18968
  HEAP32[$ReallocAsyncCtx3 >> 2] = 403; //@line 18969
  $110 = $ReallocAsyncCtx3 + 4 | 0; //@line 18970
  HEAP32[$110 >> 2] = $67; //@line 18971
  $111 = $ReallocAsyncCtx3 + 8 | 0; //@line 18972
  HEAP32[$111 >> 2] = $53; //@line 18973
  $112 = $ReallocAsyncCtx3 + 12 | 0; //@line 18974
  HEAP8[$112 >> 0] = $22; //@line 18975
  $113 = $ReallocAsyncCtx3 + 16 | 0; //@line 18976
  HEAP32[$113 >> 2] = $2; //@line 18977
  $114 = $ReallocAsyncCtx3 + 20 | 0; //@line 18978
  HEAP32[$114 >> 2] = $26; //@line 18979
  $115 = $ReallocAsyncCtx3 + 24 | 0; //@line 18980
  HEAP32[$115 >> 2] = $16; //@line 18981
  $116 = $ReallocAsyncCtx3 + 28 | 0; //@line 18982
  HEAP32[$116 >> 2] = $28; //@line 18983
  $117 = $ReallocAsyncCtx3 + 32 | 0; //@line 18984
  HEAP32[$117 >> 2] = $59; //@line 18985
  $118 = $ReallocAsyncCtx3 + 36 | 0; //@line 18986
  HEAP32[$118 >> 2] = $60; //@line 18987
  $119 = $ReallocAsyncCtx3 + 40 | 0; //@line 18988
  HEAP32[$119 >> 2] = $49; //@line 18989
  $120 = $ReallocAsyncCtx3 + 44 | 0; //@line 18990
  HEAP32[$120 >> 2] = $40; //@line 18991
  $121 = $ReallocAsyncCtx3 + 48 | 0; //@line 18992
  HEAP32[$121 >> 2] = $38; //@line 18993
  sp = STACKTOP; //@line 18994
  return;
 }
 if ($22 << 24 >> 24 == 7) {
  $124 = $2 + 1442 | 0; //@line 18999
  $126 = HEAPU8[$26 >> 0] | 0; //@line 19001
  _memcpy($124 | 0, $16 + $126 | 0, $28 | 0) | 0; //@line 19003
  HEAP32[$2 + 2016 >> 2] = 3; //@line 19005
  HEAP32[$53 >> 2] = 0; //@line 19006
  HEAP32[$59 >> 2] = $124; //@line 19007
  HEAP16[$60 >> 1] = $28 - $126; //@line 19010
 }
 if (!(HEAP8[$49 >> 0] | 0)) {
  return;
 }
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 19018
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($38, $2 + 1856 | 0); //@line 19019
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 404; //@line 19022
  $134 = $ReallocAsyncCtx4 + 4 | 0; //@line 19023
  HEAP32[$134 >> 2] = $40; //@line 19024
  sp = STACKTOP; //@line 19025
  return;
 }
 ___async_unwind = 0; //@line 19028
 HEAP32[$ReallocAsyncCtx4 >> 2] = 404; //@line 19029
 $134 = $ReallocAsyncCtx4 + 4 | 0; //@line 19030
 HEAP32[$134 >> 2] = $40; //@line 19031
 sp = STACKTOP; //@line 19032
 return;
}
function __ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_296($0) {
 $0 = $0 | 0;
 var $12 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $87 = 0, $92 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 20087
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20089
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20091
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20093
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20095
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20099
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20103
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 20105
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 20107
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 20109
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 20111
 if (!(__ZN7LoRaMac10nwk_joinedEv($2) | 0)) {
  return;
 }
 if ((HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($2) | 0) >> 2] | 0) != 1) {
  __ZN7LoRaMac21post_process_mcps_reqEv($2); //@line 20120
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 16; //@line 20123
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(36) | 0; //@line 20124
  __ZN12LoRaWANStack26process_status_check_stateEv($6); //@line 20125
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 295; //@line 20128
   $62 = $ReallocAsyncCtx5 + 4 | 0; //@line 20129
   HEAP32[$62 >> 2] = $2; //@line 20130
   $63 = $ReallocAsyncCtx5 + 8 | 0; //@line 20131
   HEAP32[$63 >> 2] = $4; //@line 20132
   $64 = $ReallocAsyncCtx5 + 12 | 0; //@line 20133
   HEAP32[$64 >> 2] = $6; //@line 20134
   $65 = $ReallocAsyncCtx5 + 16 | 0; //@line 20135
   HEAP32[$65 >> 2] = $24; //@line 20136
   $66 = $ReallocAsyncCtx5 + 20 | 0; //@line 20137
   HEAP32[$66 >> 2] = $16; //@line 20138
   $67 = $ReallocAsyncCtx5 + 24 | 0; //@line 20139
   HEAP32[$67 >> 2] = $18; //@line 20140
   $68 = $ReallocAsyncCtx5 + 28 | 0; //@line 20141
   HEAP32[$68 >> 2] = $20; //@line 20142
   $69 = $ReallocAsyncCtx5 + 32 | 0; //@line 20143
   HEAP32[$69 >> 2] = $22; //@line 20144
   sp = STACKTOP; //@line 20145
   return;
  }
  ___async_unwind = 0; //@line 20148
  HEAP32[$ReallocAsyncCtx5 >> 2] = 295; //@line 20149
  $62 = $ReallocAsyncCtx5 + 4 | 0; //@line 20150
  HEAP32[$62 >> 2] = $2; //@line 20151
  $63 = $ReallocAsyncCtx5 + 8 | 0; //@line 20152
  HEAP32[$63 >> 2] = $4; //@line 20153
  $64 = $ReallocAsyncCtx5 + 12 | 0; //@line 20154
  HEAP32[$64 >> 2] = $6; //@line 20155
  $65 = $ReallocAsyncCtx5 + 16 | 0; //@line 20156
  HEAP32[$65 >> 2] = $24; //@line 20157
  $66 = $ReallocAsyncCtx5 + 20 | 0; //@line 20158
  HEAP32[$66 >> 2] = $16; //@line 20159
  $67 = $ReallocAsyncCtx5 + 24 | 0; //@line 20160
  HEAP32[$67 >> 2] = $18; //@line 20161
  $68 = $ReallocAsyncCtx5 + 28 | 0; //@line 20162
  HEAP32[$68 >> 2] = $20; //@line 20163
  $69 = $ReallocAsyncCtx5 + 32 | 0; //@line 20164
  HEAP32[$69 >> 2] = $22; //@line 20165
  sp = STACKTOP; //@line 20166
  return;
 }
 if (HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($2) | 0) + 32 >> 0] | 0) {
  HEAP32[$12 >> 2] = HEAPU8[(__ZNK7LoRaMac21get_mcps_confirmationEv($2) | 0) + 11 >> 0]; //@line 20178
  _mbed_tracef(16, 12211, 12413, $12); //@line 20179
  __ZN7LoRaMac21post_process_mcps_reqEv($2); //@line 20180
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] & -18 | 16; //@line 20184
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(36) | 0; //@line 20185
  __ZN12LoRaWANStack26process_status_check_stateEv($6); //@line 20186
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 293; //@line 20189
   $40 = $ReallocAsyncCtx7 + 4 | 0; //@line 20190
   HEAP32[$40 >> 2] = $2; //@line 20191
   $41 = $ReallocAsyncCtx7 + 8 | 0; //@line 20192
   HEAP32[$41 >> 2] = $4; //@line 20193
   $42 = $ReallocAsyncCtx7 + 12 | 0; //@line 20194
   HEAP32[$42 >> 2] = $6; //@line 20195
   $43 = $ReallocAsyncCtx7 + 16 | 0; //@line 20196
   HEAP32[$43 >> 2] = $24; //@line 20197
   $44 = $ReallocAsyncCtx7 + 20 | 0; //@line 20198
   HEAP32[$44 >> 2] = $16; //@line 20199
   $45 = $ReallocAsyncCtx7 + 24 | 0; //@line 20200
   HEAP32[$45 >> 2] = $18; //@line 20201
   $46 = $ReallocAsyncCtx7 + 28 | 0; //@line 20202
   HEAP32[$46 >> 2] = $20; //@line 20203
   $47 = $ReallocAsyncCtx7 + 32 | 0; //@line 20204
   HEAP32[$47 >> 2] = $22; //@line 20205
   sp = STACKTOP; //@line 20206
   return;
  }
  ___async_unwind = 0; //@line 20209
  HEAP32[$ReallocAsyncCtx7 >> 2] = 293; //@line 20210
  $40 = $ReallocAsyncCtx7 + 4 | 0; //@line 20211
  HEAP32[$40 >> 2] = $2; //@line 20212
  $41 = $ReallocAsyncCtx7 + 8 | 0; //@line 20213
  HEAP32[$41 >> 2] = $4; //@line 20214
  $42 = $ReallocAsyncCtx7 + 12 | 0; //@line 20215
  HEAP32[$42 >> 2] = $6; //@line 20216
  $43 = $ReallocAsyncCtx7 + 16 | 0; //@line 20217
  HEAP32[$43 >> 2] = $24; //@line 20218
  $44 = $ReallocAsyncCtx7 + 20 | 0; //@line 20219
  HEAP32[$44 >> 2] = $16; //@line 20220
  $45 = $ReallocAsyncCtx7 + 24 | 0; //@line 20221
  HEAP32[$45 >> 2] = $18; //@line 20222
  $46 = $ReallocAsyncCtx7 + 28 | 0; //@line 20223
  HEAP32[$46 >> 2] = $20; //@line 20224
  $47 = $ReallocAsyncCtx7 + 32 | 0; //@line 20225
  HEAP32[$47 >> 2] = $22; //@line 20226
  sp = STACKTOP; //@line 20227
  return;
 }
 if (!(__ZN7LoRaMac24continue_sending_processEv($2) | 0)) {
  _mbed_tracef(2, 12211, 12216, $8); //@line 20232
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] & -18 | 1; //@line 20236
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(36) | 0; //@line 20237
  __ZN12LoRaWANStack26process_status_check_stateEv($6); //@line 20238
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 294; //@line 20241
   $52 = $ReallocAsyncCtx6 + 4 | 0; //@line 20242
   HEAP32[$52 >> 2] = $2; //@line 20243
   $53 = $ReallocAsyncCtx6 + 8 | 0; //@line 20244
   HEAP32[$53 >> 2] = $4; //@line 20245
   $54 = $ReallocAsyncCtx6 + 12 | 0; //@line 20246
   HEAP32[$54 >> 2] = $6; //@line 20247
   $55 = $ReallocAsyncCtx6 + 16 | 0; //@line 20248
   HEAP32[$55 >> 2] = $24; //@line 20249
   $56 = $ReallocAsyncCtx6 + 20 | 0; //@line 20250
   HEAP32[$56 >> 2] = $16; //@line 20251
   $57 = $ReallocAsyncCtx6 + 24 | 0; //@line 20252
   HEAP32[$57 >> 2] = $18; //@line 20253
   $58 = $ReallocAsyncCtx6 + 28 | 0; //@line 20254
   HEAP32[$58 >> 2] = $20; //@line 20255
   $59 = $ReallocAsyncCtx6 + 32 | 0; //@line 20256
   HEAP32[$59 >> 2] = $22; //@line 20257
   sp = STACKTOP; //@line 20258
   return;
  }
  ___async_unwind = 0; //@line 20261
  HEAP32[$ReallocAsyncCtx6 >> 2] = 294; //@line 20262
  $52 = $ReallocAsyncCtx6 + 4 | 0; //@line 20263
  HEAP32[$52 >> 2] = $2; //@line 20264
  $53 = $ReallocAsyncCtx6 + 8 | 0; //@line 20265
  HEAP32[$53 >> 2] = $4; //@line 20266
  $54 = $ReallocAsyncCtx6 + 12 | 0; //@line 20267
  HEAP32[$54 >> 2] = $6; //@line 20268
  $55 = $ReallocAsyncCtx6 + 16 | 0; //@line 20269
  HEAP32[$55 >> 2] = $24; //@line 20270
  $56 = $ReallocAsyncCtx6 + 20 | 0; //@line 20271
  HEAP32[$56 >> 2] = $16; //@line 20272
  $57 = $ReallocAsyncCtx6 + 24 | 0; //@line 20273
  HEAP32[$57 >> 2] = $18; //@line 20274
  $58 = $ReallocAsyncCtx6 + 28 | 0; //@line 20275
  HEAP32[$58 >> 2] = $20; //@line 20276
  $59 = $ReallocAsyncCtx6 + 32 | 0; //@line 20277
  HEAP32[$59 >> 2] = $22; //@line 20278
  sp = STACKTOP; //@line 20279
  return;
 }
 if (HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($2) | 0) >> 0] | 0) {
  __ZN7LoRaMac21post_process_mcps_indEv($2); //@line 20286
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2; //@line 20289
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(36) | 0; //@line 20290
  __ZN12LoRaWANStack26process_status_check_stateEv($6); //@line 20291
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 296; //@line 20294
   $75 = $ReallocAsyncCtx4 + 4 | 0; //@line 20295
   HEAP32[$75 >> 2] = $4; //@line 20296
   $76 = $ReallocAsyncCtx4 + 8 | 0; //@line 20297
   HEAP32[$76 >> 2] = $2; //@line 20298
   $77 = $ReallocAsyncCtx4 + 12 | 0; //@line 20299
   HEAP32[$77 >> 2] = $24; //@line 20300
   $78 = $ReallocAsyncCtx4 + 16 | 0; //@line 20301
   HEAP32[$78 >> 2] = $6; //@line 20302
   $79 = $ReallocAsyncCtx4 + 20 | 0; //@line 20303
   HEAP32[$79 >> 2] = $16; //@line 20304
   $80 = $ReallocAsyncCtx4 + 24 | 0; //@line 20305
   HEAP32[$80 >> 2] = $18; //@line 20306
   $81 = $ReallocAsyncCtx4 + 28 | 0; //@line 20307
   HEAP32[$81 >> 2] = $20; //@line 20308
   $82 = $ReallocAsyncCtx4 + 32 | 0; //@line 20309
   HEAP32[$82 >> 2] = $22; //@line 20310
   sp = STACKTOP; //@line 20311
   return;
  }
  ___async_unwind = 0; //@line 20314
  HEAP32[$ReallocAsyncCtx4 >> 2] = 296; //@line 20315
  $75 = $ReallocAsyncCtx4 + 4 | 0; //@line 20316
  HEAP32[$75 >> 2] = $4; //@line 20317
  $76 = $ReallocAsyncCtx4 + 8 | 0; //@line 20318
  HEAP32[$76 >> 2] = $2; //@line 20319
  $77 = $ReallocAsyncCtx4 + 12 | 0; //@line 20320
  HEAP32[$77 >> 2] = $24; //@line 20321
  $78 = $ReallocAsyncCtx4 + 16 | 0; //@line 20322
  HEAP32[$78 >> 2] = $6; //@line 20323
  $79 = $ReallocAsyncCtx4 + 20 | 0; //@line 20324
  HEAP32[$79 >> 2] = $16; //@line 20325
  $80 = $ReallocAsyncCtx4 + 24 | 0; //@line 20326
  HEAP32[$80 >> 2] = $18; //@line 20327
  $81 = $ReallocAsyncCtx4 + 28 | 0; //@line 20328
  HEAP32[$81 >> 2] = $20; //@line 20329
  $82 = $ReallocAsyncCtx4 + 32 | 0; //@line 20330
  HEAP32[$82 >> 2] = $22; //@line 20331
  sp = STACKTOP; //@line 20332
  return;
 }
 if (!(HEAP32[$4 >> 2] & 1)) {
  $87 = (__ZNK7LoRaMac16get_device_classEv($2) | 0) == 2; //@line 20340
  HEAP32[$24 >> 2] = $87 ? 5 : 2; //@line 20342
 }
 if (!(HEAP8[(__ZNK7LoRaMac19get_mlme_indicationEv($2) | 0) + 4 >> 0] | 0)) {
  HEAP8[$6 + 2911 >> 0] = 1; //@line 20350
  return;
 }
 _mbed_tracef(16, 12211, 12433, $16); //@line 20353
 __ZN7LoRaMac21post_process_mlme_indEv($2); //@line 20354
 _mbed_tracef(16, 12211, 12457, $20); //@line 20355
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 20356
 __ZN12LoRaWANStack23mlme_indication_handlerEv($6); //@line 20357
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 297; //@line 20360
  $92 = $ReallocAsyncCtx2 + 4 | 0; //@line 20361
  HEAP32[$92 >> 2] = $6; //@line 20362
  sp = STACKTOP; //@line 20363
  return;
 }
 ___async_unwind = 0; //@line 20366
 HEAP32[$ReallocAsyncCtx2 >> 2] = 297; //@line 20367
 $92 = $ReallocAsyncCtx2 + 4 | 0; //@line 20368
 HEAP32[$92 >> 2] = $6; //@line 20369
 sp = STACKTOP; //@line 20370
 return;
}
function __ZN7LoRaPHY16link_ADR_requestEP16adr_req_params_tPaS2_PhS3_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$$130$$$i = 0, $$026$$$026$i = 0, $$026$i = 0, $$028$i = 0, $$028$lcssa = 0, $$02864 = 0, $$029$be = 0, $$029$lcssa = 0, $$02963 = 0, $$1 = 0, $$2$i = 0, $$258 = 0, $$3 = 0, $$452 = 0, $$lcssa78 = 0, $$lcssa79 = 0, $$pre = 0, $$sroa$035$0$lcssa = 0, $$sroa$035$060 = 0, $$sroa$035$349 = 0, $$sroa$11$0$lcssa = 0, $$sroa$11$062 = 0, $$sroa$11$351 = 0, $$sroa$637$0$lcssa = 0, $$sroa$637$061 = 0, $$sroa$637$350 = 0, $10 = 0, $100 = 0, $101 = 0, $107 = 0, $11 = 0, $116 = 0, $12 = 0, $123 = 0, $125 = 0, $127 = 0, $129 = 0, $13 = 0, $131 = 0, $135 = 0, $136 = 0, $140 = 0, $17 = 0, $18 = 0, $19 = 0, $27 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $42 = 0, $45 = 0, $52 = 0, $66 = 0, $7 = 0, $79 = 0, $81 = 0, $9 = 0, $93 = 0, $97 = 0, $99 = 0, $indvars$iv = 0, $indvars$iv$i = 0, $indvars$iv$i31 = 0, $indvars$iv82 = 0, $not$or$cond$i$i = 0, $wide$trip$count$i = 0, label = 0;
 $7 = HEAP8[$1 + 4 >> 0] | 0; //@line 20888
 L1 : do {
  if (!($7 << 24 >> 24)) {
   $$028$lcssa = 0; //@line 20892
   $$029$lcssa = 7; //@line 20892
   $$sroa$035$0$lcssa = 0; //@line 20892
   $$sroa$11$0$lcssa = 0; //@line 20892
   $$sroa$637$0$lcssa = 0; //@line 20892
   $101 = 0; //@line 20892
  } else {
   $9 = HEAP32[$1 >> 2] | 0; //@line 20894
   $10 = $0 + 20 | 0; //@line 20895
   $11 = $0 + 124 | 0; //@line 20896
   $$02864 = 0; //@line 20897
   $$02963 = 7; //@line 20897
   $$lcssa78 = 0; //@line 20897
   $$sroa$035$060 = 0; //@line 20897
   $$sroa$11$062 = 0; //@line 20897
   $$sroa$637$061 = 0; //@line 20897
   $13 = 0; //@line 20897
   while (1) {
    $12 = $9 + $13 | 0; //@line 20899
    if ((HEAP8[$12 >> 0] | 0) != 3) {
     $$028$lcssa = $$02864; //@line 20903
     $$029$lcssa = $$02963; //@line 20903
     $$sroa$035$0$lcssa = $$sroa$035$060; //@line 20903
     $$sroa$11$0$lcssa = $$sroa$11$062; //@line 20903
     $$sroa$637$0$lcssa = $$sroa$637$061; //@line 20903
     $101 = $$lcssa78; //@line 20903
     break L1;
    }
    $17 = HEAP8[$12 + 1 >> 0] | 0; //@line 20907
    $18 = $17 & 15; //@line 20908
    $19 = ($17 & 255) >>> 4; //@line 20909
    $27 = HEAPU8[$12 + 3 >> 0] << 8 | HEAPU8[$12 + 2 >> 0]; //@line 20917
    $28 = $27 & 65535; //@line 20918
    $30 = HEAP8[$12 + 4 >> 0] | 0; //@line 20920
    $32 = ($30 & 255) >>> 4; //@line 20922
    $34 = $32 & 7; //@line 20924
    $35 = $30 & 15; //@line 20925
    $36 = $13 + 5 | 0; //@line 20926
    $37 = $36 & 255; //@line 20927
    $$1 = $28 << 16 >> 16 == 0 & $34 << 24 >> 24 == 0 ? 6 : 7; //@line 20931
    L6 : do {
     switch ($32 & 7) {
     case 6:
     case 0:
      {
       $42 = HEAP8[$10 >> 0] | 0; //@line 20937
       if (!($42 << 24 >> 24)) {
        $$029$be = $$1; //@line 20940
        $$lcssa79 = $28; //@line 20940
       } else {
        $45 = $42 & 255; //@line 20943
        if ($34 << 24 >> 24 != 6) {
         $$258 = $$1; //@line 20945
         $indvars$iv = 0; //@line 20945
         while (1) {
          if (!($27 & 1 << ($indvars$iv & 15))) {
           $$3 = $$258; //@line 20952
          } else {
           $$3 = (HEAP32[(HEAP32[$11 >> 2] | 0) + ($indvars$iv * 12 | 0) >> 2] | 0) == 0 ? $$258 & -2 : $$258; //@line 20960
          }
          $indvars$iv = $indvars$iv + 1 | 0; //@line 20962
          if ($indvars$iv >>> 0 >= $45 >>> 0) {
           $$029$be = $$3; //@line 20967
           $$lcssa79 = $28; //@line 20967
           break L6;
          } else {
           $$258 = $$3; //@line 20965
          }
         }
        }
        $$pre = HEAP32[$11 >> 2] | 0; //@line 20972
        $52 = $28; //@line 20973
        $indvars$iv82 = 0; //@line 20973
        while (1) {
         if (!(HEAP32[$$pre + ($indvars$iv82 * 12 | 0) >> 2] | 0)) {
          $140 = $52; //@line 20979
         } else {
          $140 = (1 << ($indvars$iv82 & 15) | $52 & 65535) & 65535; //@line 20986
         }
         $indvars$iv82 = $indvars$iv82 + 1 | 0; //@line 20988
         if ($indvars$iv82 >>> 0 >= $45 >>> 0) {
          $$029$be = $$1; //@line 20993
          $$lcssa79 = $140; //@line 20993
          break;
         } else {
          $52 = $140; //@line 20991
         }
        }
       }
       break;
      }
     default:
      {
       $$029$be = 6; //@line 21001
       $$lcssa79 = $28; //@line 21001
      }
     }
    } while (0);
    if (($7 & 255) > ($37 & 255)) {
     $$02864 = $37; //@line 21008
     $$02963 = $$029$be; //@line 21008
     $$lcssa78 = $$lcssa79; //@line 21008
     $$sroa$035$060 = $35; //@line 21008
     $$sroa$11$062 = $18; //@line 21008
     $$sroa$637$061 = $19; //@line 21008
     $13 = $36 & 255; //@line 21008
    } else {
     $$028$lcssa = $37; //@line 21010
     $$029$lcssa = $$029$be; //@line 21010
     $$sroa$035$0$lcssa = $35; //@line 21010
     $$sroa$11$0$lcssa = $18; //@line 21010
     $$sroa$637$0$lcssa = $19; //@line 21010
     $101 = $$lcssa79; //@line 21010
     break L1;
    }
   }
  }
 } while (0);
 $66 = $$sroa$637$0$lcssa << 24 >> 24; //@line 21016
 if (($66 | 0) < (HEAPU8[$0 + 92 >> 0] | 0)) {
  if (HEAP8[(HEAP32[$0 + 88 >> 2] | 0) + $66 >> 0] | 0) {
   $79 = HEAP8[$1 + 7 >> 0] | 0; //@line 21031
   $81 = HEAP8[$1 + 8 >> 0] | 0; //@line 21033
   if (!(HEAP8[$1 + 6 >> 0] | 0)) {
    if ($$sroa$637$0$lcssa << 24 >> 24 == 15 & $$sroa$11$0$lcssa << 24 >> 24 == 15) {
     $$026$i = $81; //@line 21042
     $$028$i = $79; //@line 21042
    } else {
     $$452 = 0; //@line 21044
     $$sroa$035$349 = HEAP8[$1 + 9 >> 0] | 0; //@line 21044
     $$sroa$11$351 = $81; //@line 21044
     $$sroa$637$350 = $79; //@line 21044
     HEAP8[$2 >> 0] = $$sroa$637$350; //@line 21045
     HEAP8[$3 >> 0] = $$sroa$11$351; //@line 21046
     HEAP8[$4 >> 0] = $$sroa$035$349; //@line 21047
     HEAP8[$5 >> 0] = $$028$lcssa; //@line 21048
     return $$452 | 0; //@line 21049
    }
   } else {
    $$026$i = $$sroa$11$0$lcssa; //@line 21052
    $$028$i = $$sroa$637$0$lcssa; //@line 21052
   }
   if (!($$029$lcssa << 24 >> 24)) {
    $$452 = 0; //@line 21056
    $$sroa$035$349 = $$sroa$035$0$lcssa; //@line 21056
    $$sroa$11$351 = $$026$i; //@line 21056
    $$sroa$637$350 = $$028$i; //@line 21056
    HEAP8[$2 >> 0] = $$sroa$637$350; //@line 21057
    HEAP8[$3 >> 0] = $$sroa$11$351; //@line 21058
    HEAP8[$4 >> 0] = $$sroa$035$349; //@line 21059
    HEAP8[$5 >> 0] = $$028$lcssa; //@line 21060
    return $$452 | 0; //@line 21061
   }
   $93 = HEAP32[$0 + 124 >> 2] | 0; //@line 21068
   L33 : do {
    if ($$028$i << 24 >> 24 >= (HEAP8[$0 + 26 >> 0] | 0) ? $$028$i << 24 >> 24 <= (HEAP8[$0 + 27 >> 0] | 0) : 0) {
     $97 = HEAP8[$0 + 20 >> 0] | 0; //@line 21075
     if (!($97 << 24 >> 24)) {
      label = 26; //@line 21078
     } else {
      $99 = $97 & 255; //@line 21080
      $100 = $101 & 65535; //@line 21081
      $indvars$iv$i31 = 0; //@line 21082
      while (1) {
       if (1 << ($indvars$iv$i31 & 15) & $100 | 0) {
        $107 = HEAP8[$93 + ($indvars$iv$i31 * 12 | 0) + 8 >> 0] | 0; //@line 21090
        if (($107 & 15) <= $$028$i << 24 >> 24 ? ($107 & 255) >>> 4 << 24 >> 24 >= $$028$i << 24 >> 24 : 0) {
         $125 = $$029$lcssa; //@line 21097
         break L33;
        }
       }
       $indvars$iv$i31 = $indvars$iv$i31 + 1 | 0; //@line 21101
       if ($indvars$iv$i31 >>> 0 >= $99 >>> 0) {
        label = 26; //@line 21106
        break;
       }
      }
     }
    } else {
     label = 26; //@line 21112
    }
   } while (0);
   if ((label | 0) == 26) {
    $125 = $$029$lcssa & -3; //@line 21117
   }
   $116 = HEAP8[$0 + 22 >> 0] | 0; //@line 21120
   $not$or$cond$i$i = $$026$i << 24 >> 24 >= $116 << 24 >> 24 ? $$026$i << 24 >> 24 <= (HEAP8[$0 + 21 >> 0] | 0) : 0; //@line 21125
   $123 = ($116 & 255 | 0) > ($$026$i << 24 >> 24 | 0); //@line 21128
   $$$130$$$i = $123 | $not$or$cond$i$i ? $125 : $125 & -5; //@line 21132
   $$026$$$026$i = $not$or$cond$i$i ? $$026$i : $123 ? $116 : $$026$i; //@line 21133
   $127 = $$$130$$$i << 24 >> 24 == 7; //@line 21134
   $$2$i = $$sroa$035$0$lcssa << 24 >> 24 == 0 & $127 ? 1 : $$sroa$035$0$lcssa; //@line 21137
   if (!$127) {
    $$452 = $$$130$$$i; //@line 21139
    $$sroa$035$349 = $$2$i; //@line 21139
    $$sroa$11$351 = $$026$$$026$i; //@line 21139
    $$sroa$637$350 = $$028$i; //@line 21139
    HEAP8[$2 >> 0] = $$sroa$637$350; //@line 21140
    HEAP8[$3 >> 0] = $$sroa$11$351; //@line 21141
    HEAP8[$4 >> 0] = $$sroa$035$349; //@line 21142
    HEAP8[$5 >> 0] = $$028$lcssa; //@line 21143
    return $$452 | 0; //@line 21144
   }
   $129 = $0 + 116 | 0; //@line 21146
   $131 = $0 + 113 | 0; //@line 21148
   _memset(HEAP32[$129 >> 2] | 0, 0, HEAPU8[$131 >> 0] << 1 | 0) | 0; //@line 21152
   $135 = HEAP32[$129 >> 2] | 0; //@line 21153
   $136 = HEAP8[$131 >> 0] | 0; //@line 21154
   if (!(($135 | 0) != 0 & $136 << 24 >> 24 != 0)) {
    $$452 = 7; //@line 21159
    $$sroa$035$349 = $$2$i; //@line 21159
    $$sroa$11$351 = $$026$$$026$i; //@line 21159
    $$sroa$637$350 = $$028$i; //@line 21159
    HEAP8[$2 >> 0] = $$sroa$637$350; //@line 21160
    HEAP8[$3 >> 0] = $$sroa$11$351; //@line 21161
    HEAP8[$4 >> 0] = $$sroa$035$349; //@line 21162
    HEAP8[$5 >> 0] = $$028$lcssa; //@line 21163
    return $$452 | 0; //@line 21164
   }
   $wide$trip$count$i = $136 & 255; //@line 21166
   $indvars$iv$i = 0; //@line 21167
   do {
    HEAP16[$135 + ($indvars$iv$i << 1) >> 1] = $101; //@line 21170
    $indvars$iv$i = $indvars$iv$i + 1 | 0; //@line 21171
   } while (($indvars$iv$i | 0) != ($wide$trip$count$i | 0));
   $$452 = 7; //@line 21174
   $$sroa$035$349 = $$2$i; //@line 21174
   $$sroa$11$351 = $$026$$$026$i; //@line 21174
   $$sroa$637$350 = $$028$i; //@line 21174
   HEAP8[$2 >> 0] = $$sroa$637$350; //@line 21180
   HEAP8[$3 >> 0] = $$sroa$11$351; //@line 21181
   HEAP8[$4 >> 0] = $$sroa$035$349; //@line 21182
   HEAP8[$5 >> 0] = $$028$lcssa; //@line 21183
   return $$452 | 0; //@line 21184
  }
 }
 $$452 = $$029$lcssa & -3; //@line 21188
 $$sroa$035$349 = $$sroa$035$0$lcssa; //@line 21188
 $$sroa$11$351 = $$sroa$11$0$lcssa; //@line 21188
 $$sroa$637$350 = $$sroa$637$0$lcssa; //@line 21188
 HEAP8[$2 >> 0] = $$sroa$637$350; //@line 21189
 HEAP8[$3 >> 0] = $$sroa$11$351; //@line 21190
 HEAP8[$4 >> 0] = $$sroa$035$349; //@line 21191
 HEAP8[$5 >> 0] = $$028$lcssa; //@line 21192
 return $$452 | 0; //@line 21193
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $_0$0 = 0, $_0$1 = 0, $q_sroa_1_1198$looptemp = 0;
 $n_sroa_0_0_extract_trunc = $a$0; //@line 31712
 $n_sroa_1_4_extract_shift$0 = $a$1; //@line 31713
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0; //@line 31714
 $d_sroa_0_0_extract_trunc = $b$0; //@line 31715
 $d_sroa_1_4_extract_shift$0 = $b$1; //@line 31716
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0; //@line 31717
 if (!$n_sroa_1_4_extract_trunc) {
  $4 = ($rem | 0) != 0; //@line 31719
  if (!$d_sroa_1_4_extract_trunc) {
   if ($4) {
    HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0); //@line 31722
    HEAP32[$rem + 4 >> 2] = 0; //@line 31723
   }
   $_0$1 = 0; //@line 31725
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0; //@line 31726
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 31727
  } else {
   if (!$4) {
    $_0$1 = 0; //@line 31730
    $_0$0 = 0; //@line 31731
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 31732
   }
   HEAP32[$rem >> 2] = $a$0 | 0; //@line 31734
   HEAP32[$rem + 4 >> 2] = $a$1 & 0; //@line 31735
   $_0$1 = 0; //@line 31736
   $_0$0 = 0; //@line 31737
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 31738
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0; //@line 31741
 do {
  if (!$d_sroa_0_0_extract_trunc) {
   if ($17) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0); //@line 31746
     HEAP32[$rem + 4 >> 2] = 0; //@line 31747
    }
    $_0$1 = 0; //@line 31749
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0; //@line 31750
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 31751
   }
   if (!$n_sroa_0_0_extract_trunc) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = 0; //@line 31755
     HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0); //@line 31756
    }
    $_0$1 = 0; //@line 31758
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0; //@line 31759
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 31760
   }
   $37 = $d_sroa_1_4_extract_trunc - 1 | 0; //@line 31762
   if (!($37 & $d_sroa_1_4_extract_trunc)) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = $a$0 | 0; //@line 31765
     HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0; //@line 31766
    }
    $_0$1 = 0; //@line 31768
    $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0); //@line 31769
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 31770
   }
   $51 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 31773
   if ($51 >>> 0 <= 30) {
    $57 = $51 + 1 | 0; //@line 31775
    $58 = 31 - $51 | 0; //@line 31776
    $sr_1_ph = $57; //@line 31777
    $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0); //@line 31778
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0); //@line 31779
    $q_sroa_0_1_ph = 0; //@line 31780
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58; //@line 31781
    break;
   }
   if (!$rem) {
    $_0$1 = 0; //@line 31785
    $_0$0 = 0; //@line 31786
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 31787
   }
   HEAP32[$rem >> 2] = $a$0 | 0; //@line 31789
   HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 31790
   $_0$1 = 0; //@line 31791
   $_0$0 = 0; //@line 31792
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 31793
  } else {
   if (!$17) {
    $119 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 31797
    if ($119 >>> 0 <= 31) {
     $125 = $119 + 1 | 0; //@line 31799
     $126 = 31 - $119 | 0; //@line 31800
     $130 = $119 - 31 >> 31; //@line 31801
     $sr_1_ph = $125; //@line 31802
     $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126; //@line 31803
     $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130; //@line 31804
     $q_sroa_0_1_ph = 0; //@line 31805
     $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126; //@line 31806
     break;
    }
    if (!$rem) {
     $_0$1 = 0; //@line 31810
     $_0$0 = 0; //@line 31811
     return (tempRet0 = $_0$1, $_0$0) | 0; //@line 31812
    }
    HEAP32[$rem >> 2] = $a$0 | 0; //@line 31814
    HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 31815
    $_0$1 = 0; //@line 31816
    $_0$0 = 0; //@line 31817
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 31818
   }
   $66 = $d_sroa_0_0_extract_trunc - 1 | 0; //@line 31820
   if ($66 & $d_sroa_0_0_extract_trunc | 0) {
    $88 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 31823
    $89 = 64 - $88 | 0; //@line 31824
    $91 = 32 - $88 | 0; //@line 31825
    $92 = $91 >> 31; //@line 31826
    $95 = $88 - 32 | 0; //@line 31827
    $105 = $95 >> 31; //@line 31828
    $sr_1_ph = $88; //@line 31829
    $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105; //@line 31830
    $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0); //@line 31831
    $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92; //@line 31832
    $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31; //@line 31833
    break;
   }
   if ($rem | 0) {
    HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc; //@line 31837
    HEAP32[$rem + 4 >> 2] = 0; //@line 31838
   }
   if (($d_sroa_0_0_extract_trunc | 0) == 1) {
    $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 31841
    $_0$0 = $a$0 | 0 | 0; //@line 31842
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 31843
   } else {
    $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0; //@line 31845
    $_0$1 = $n_sroa_1_4_extract_trunc >>> ($78 >>> 0) | 0; //@line 31846
    $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0; //@line 31847
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 31848
   }
  }
 } while (0);
 if (!$sr_1_ph) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph; //@line 31853
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph; //@line 31854
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph; //@line 31855
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph; //@line 31856
  $carry_0_lcssa$1 = 0; //@line 31857
  $carry_0_lcssa$0 = 0; //@line 31858
 } else {
  $d_sroa_0_0_insert_insert99$0 = $b$0 | 0 | 0; //@line 31860
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0; //@line 31861
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0; //@line 31862
  $137$1 = tempRet0; //@line 31863
  $q_sroa_1_1198 = $q_sroa_1_1_ph; //@line 31864
  $q_sroa_0_1199 = $q_sroa_0_1_ph; //@line 31865
  $r_sroa_1_1200 = $r_sroa_1_1_ph; //@line 31866
  $r_sroa_0_1201 = $r_sroa_0_1_ph; //@line 31867
  $sr_1202 = $sr_1_ph; //@line 31868
  $carry_0203 = 0; //@line 31869
  do {
   $q_sroa_1_1198$looptemp = $q_sroa_1_1198;
   $q_sroa_1_1198 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1; //@line 31871
   $q_sroa_0_1199 = $carry_0203 | $q_sroa_0_1199 << 1; //@line 31872
   $r_sroa_0_0_insert_insert42$0 = $r_sroa_0_1201 << 1 | $q_sroa_1_1198$looptemp >>> 31 | 0; //@line 31873
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0; //@line 31874
   _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0; //@line 31875
   $150$1 = tempRet0; //@line 31876
   $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1; //@line 31877
   $carry_0203 = $151$0 & 1; //@line 31878
   $r_sroa_0_1201 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0; //@line 31880
   $r_sroa_1_1200 = tempRet0; //@line 31881
   $sr_1202 = $sr_1202 - 1 | 0; //@line 31882
  } while (($sr_1202 | 0) != 0);
  $q_sroa_1_1_lcssa = $q_sroa_1_1198; //@line 31894
  $q_sroa_0_1_lcssa = $q_sroa_0_1199; //@line 31895
  $r_sroa_1_1_lcssa = $r_sroa_1_1200; //@line 31896
  $r_sroa_0_1_lcssa = $r_sroa_0_1201; //@line 31897
  $carry_0_lcssa$1 = 0; //@line 31898
  $carry_0_lcssa$0 = $carry_0203; //@line 31899
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa; //@line 31901
 $q_sroa_0_0_insert_ext75$1 = 0; //@line 31902
 if ($rem | 0) {
  HEAP32[$rem >> 2] = $r_sroa_0_1_lcssa; //@line 31905
  HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa; //@line 31906
 }
 $_0$1 = ($q_sroa_0_0_insert_ext75$0 | 0) >>> 31 | ($q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1) << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1; //@line 31908
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0; //@line 31909
 return (tempRet0 = $_0$1, $_0$0) | 0; //@line 31910
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$081$off0 = 0, $$084 = 0, $$085$off0 = 0, $$1 = 0, $$182$off0 = 0, $$186$off0 = 0, $$2 = 0, $$283$off0 = 0, $100 = 0, $104 = 0, $105 = 0, $106 = 0, $122 = 0, $13 = 0, $136 = 0, $19 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $61 = 0, $69 = 0, $72 = 0, $73 = 0, $81 = 0, $84 = 0, $87 = 0, $90 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 17637
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 17643
  } else {
   if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0) {
    if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
     $13 = $1 + 20 | 0; //@line 17652
     if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
      HEAP32[$1 + 32 >> 2] = $3; //@line 17657
      $19 = $1 + 44 | 0; //@line 17658
      if ((HEAP32[$19 >> 2] | 0) == 4) {
       break;
      }
      $25 = $0 + 16 + (HEAP32[$0 + 12 >> 2] << 3) | 0; //@line 17667
      $26 = $1 + 52 | 0; //@line 17668
      $27 = $1 + 53 | 0; //@line 17669
      $28 = $1 + 54 | 0; //@line 17670
      $29 = $0 + 8 | 0; //@line 17671
      $30 = $1 + 24 | 0; //@line 17672
      $$081$off0 = 0; //@line 17673
      $$084 = $0 + 16 | 0; //@line 17673
      $$085$off0 = 0; //@line 17673
      L10 : while (1) {
       if ($$084 >>> 0 >= $25 >>> 0) {
        $$283$off0 = $$081$off0; //@line 17677
        label = 20; //@line 17678
        break;
       }
       HEAP8[$26 >> 0] = 0; //@line 17681
       HEAP8[$27 >> 0] = 0; //@line 17682
       $AsyncCtx15 = _emscripten_alloc_async_context(56, sp) | 0; //@line 17683
       __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$084, $1, $2, $2, 1, $4); //@line 17684
       if (___async) {
        label = 12; //@line 17687
        break;
       }
       _emscripten_free_async_context($AsyncCtx15 | 0); //@line 17690
       if (HEAP8[$28 >> 0] | 0) {
        $$283$off0 = $$081$off0; //@line 17694
        label = 20; //@line 17695
        break;
       }
       do {
        if (!(HEAP8[$27 >> 0] | 0)) {
         $$182$off0 = $$081$off0; //@line 17702
         $$186$off0 = $$085$off0; //@line 17702
        } else {
         if (!(HEAP8[$26 >> 0] | 0)) {
          if (!(HEAP32[$29 >> 2] & 1)) {
           $$283$off0 = 1; //@line 17711
           label = 20; //@line 17712
           break L10;
          } else {
           $$182$off0 = 1; //@line 17715
           $$186$off0 = $$085$off0; //@line 17715
           break;
          }
         }
         if ((HEAP32[$30 >> 2] | 0) == 1) {
          label = 25; //@line 17722
          break L10;
         }
         if (!(HEAP32[$29 >> 2] & 2)) {
          label = 25; //@line 17729
          break L10;
         } else {
          $$182$off0 = 1; //@line 17732
          $$186$off0 = 1; //@line 17732
         }
        }
       } while (0);
       $$081$off0 = $$182$off0; //@line 17737
       $$084 = $$084 + 8 | 0; //@line 17737
       $$085$off0 = $$186$off0; //@line 17737
      }
      if ((label | 0) == 12) {
       HEAP32[$AsyncCtx15 >> 2] = 736; //@line 17740
       HEAP32[$AsyncCtx15 + 4 >> 2] = $28; //@line 17742
       HEAP32[$AsyncCtx15 + 8 >> 2] = $19; //@line 17744
       HEAP32[$AsyncCtx15 + 12 >> 2] = $30; //@line 17746
       HEAP32[$AsyncCtx15 + 16 >> 2] = $2; //@line 17748
       HEAP32[$AsyncCtx15 + 20 >> 2] = $13; //@line 17750
       HEAP32[$AsyncCtx15 + 24 >> 2] = $1; //@line 17752
       HEAP32[$AsyncCtx15 + 28 >> 2] = $29; //@line 17754
       HEAP8[$AsyncCtx15 + 32 >> 0] = $$081$off0 & 1; //@line 17757
       HEAP8[$AsyncCtx15 + 33 >> 0] = $$085$off0 & 1; //@line 17760
       HEAP32[$AsyncCtx15 + 36 >> 2] = $$084; //@line 17762
       HEAP32[$AsyncCtx15 + 40 >> 2] = $27; //@line 17764
       HEAP32[$AsyncCtx15 + 44 >> 2] = $26; //@line 17766
       HEAP8[$AsyncCtx15 + 48 >> 0] = $4 & 1; //@line 17769
       HEAP32[$AsyncCtx15 + 52 >> 2] = $25; //@line 17771
       sp = STACKTOP; //@line 17772
       return;
      }
      do {
       if ((label | 0) == 20) {
        if (!$$085$off0) {
         HEAP32[$13 >> 2] = $2; //@line 17778
         $61 = $1 + 40 | 0; //@line 17779
         HEAP32[$61 >> 2] = (HEAP32[$61 >> 2] | 0) + 1; //@line 17782
         if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
          if ((HEAP32[$30 >> 2] | 0) == 2) {
           HEAP8[$28 >> 0] = 1; //@line 17790
           if ($$283$off0) {
            label = 25; //@line 17792
            break;
           } else {
            $69 = 4; //@line 17795
            break;
           }
          }
         }
        }
        if ($$283$off0) {
         label = 25; //@line 17802
        } else {
         $69 = 4; //@line 17804
        }
       }
      } while (0);
      if ((label | 0) == 25) {
       $69 = 3; //@line 17809
      }
      HEAP32[$19 >> 2] = $69; //@line 17811
      break;
     }
    }
    if (($3 | 0) != 1) {
     break;
    }
    HEAP32[$1 + 32 >> 2] = 1; //@line 17820
    break;
   }
   $72 = HEAP32[$0 + 12 >> 2] | 0; //@line 17825
   $73 = $0 + 16 + ($72 << 3) | 0; //@line 17826
   $AsyncCtx11 = _emscripten_alloc_async_context(32, sp) | 0; //@line 17827
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0 + 16 | 0, $1, $2, $3, $4); //@line 17828
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 737; //@line 17831
    HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 17833
    HEAP32[$AsyncCtx11 + 8 >> 2] = $72; //@line 17835
    HEAP32[$AsyncCtx11 + 12 >> 2] = $1; //@line 17837
    HEAP32[$AsyncCtx11 + 16 >> 2] = $2; //@line 17839
    HEAP32[$AsyncCtx11 + 20 >> 2] = $3; //@line 17841
    HEAP8[$AsyncCtx11 + 24 >> 0] = $4 & 1; //@line 17844
    HEAP32[$AsyncCtx11 + 28 >> 2] = $73; //@line 17846
    sp = STACKTOP; //@line 17847
    return;
   }
   _emscripten_free_async_context($AsyncCtx11 | 0); //@line 17850
   $81 = $0 + 24 | 0; //@line 17851
   if (($72 | 0) > 1) {
    $84 = HEAP32[$0 + 8 >> 2] | 0; //@line 17855
    if (!($84 & 2)) {
     $87 = $1 + 36 | 0; //@line 17859
     if ((HEAP32[$87 >> 2] | 0) != 1) {
      if (!($84 & 1)) {
       $106 = $1 + 54 | 0; //@line 17866
       $$2 = $81; //@line 17867
       while (1) {
        if (HEAP8[$106 >> 0] | 0) {
         break L1;
        }
        if ((HEAP32[$87 >> 2] | 0) == 1) {
         break L1;
        }
        $AsyncCtx = _emscripten_alloc_async_context(36, sp) | 0; //@line 17879
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$2, $1, $2, $3, $4); //@line 17880
        if (___async) {
         break;
        }
        _emscripten_free_async_context($AsyncCtx | 0); //@line 17885
        $136 = $$2 + 8 | 0; //@line 17886
        if ($136 >>> 0 < $73 >>> 0) {
         $$2 = $136; //@line 17889
        } else {
         break L1;
        }
       }
       HEAP32[$AsyncCtx >> 2] = 740; //@line 17894
       HEAP32[$AsyncCtx + 4 >> 2] = $$2; //@line 17896
       HEAP32[$AsyncCtx + 8 >> 2] = $73; //@line 17898
       HEAP32[$AsyncCtx + 12 >> 2] = $106; //@line 17900
       HEAP32[$AsyncCtx + 16 >> 2] = $87; //@line 17902
       HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 17904
       HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 17906
       HEAP32[$AsyncCtx + 28 >> 2] = $3; //@line 17908
       HEAP8[$AsyncCtx + 32 >> 0] = $4 & 1; //@line 17911
       sp = STACKTOP; //@line 17912
       return;
      }
      $104 = $1 + 24 | 0; //@line 17915
      $105 = $1 + 54 | 0; //@line 17916
      $$1 = $81; //@line 17917
      while (1) {
       if (HEAP8[$105 >> 0] | 0) {
        break L1;
       }
       if ((HEAP32[$87 >> 2] | 0) == 1) {
        if ((HEAP32[$104 >> 2] | 0) == 1) {
         break L1;
        }
       }
       $AsyncCtx3 = _emscripten_alloc_async_context(40, sp) | 0; //@line 17933
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$1, $1, $2, $3, $4); //@line 17934
       if (___async) {
        break;
       }
       _emscripten_free_async_context($AsyncCtx3 | 0); //@line 17939
       $122 = $$1 + 8 | 0; //@line 17940
       if ($122 >>> 0 < $73 >>> 0) {
        $$1 = $122; //@line 17943
       } else {
        break L1;
       }
      }
      HEAP32[$AsyncCtx3 >> 2] = 739; //@line 17948
      HEAP32[$AsyncCtx3 + 4 >> 2] = $$1; //@line 17950
      HEAP32[$AsyncCtx3 + 8 >> 2] = $73; //@line 17952
      HEAP32[$AsyncCtx3 + 12 >> 2] = $105; //@line 17954
      HEAP32[$AsyncCtx3 + 16 >> 2] = $87; //@line 17956
      HEAP32[$AsyncCtx3 + 20 >> 2] = $104; //@line 17958
      HEAP32[$AsyncCtx3 + 24 >> 2] = $1; //@line 17960
      HEAP32[$AsyncCtx3 + 28 >> 2] = $2; //@line 17962
      HEAP32[$AsyncCtx3 + 32 >> 2] = $3; //@line 17964
      HEAP8[$AsyncCtx3 + 36 >> 0] = $4 & 1; //@line 17967
      sp = STACKTOP; //@line 17968
      return;
     }
    }
    $90 = $1 + 54 | 0; //@line 17972
    $$0 = $81; //@line 17973
    while (1) {
     if (HEAP8[$90 >> 0] | 0) {
      break L1;
     }
     $AsyncCtx7 = _emscripten_alloc_async_context(32, sp) | 0; //@line 17980
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$0, $1, $2, $3, $4); //@line 17981
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx7 | 0); //@line 17986
     $100 = $$0 + 8 | 0; //@line 17987
     if ($100 >>> 0 < $73 >>> 0) {
      $$0 = $100; //@line 17990
     } else {
      break L1;
     }
    }
    HEAP32[$AsyncCtx7 >> 2] = 738; //@line 17995
    HEAP32[$AsyncCtx7 + 4 >> 2] = $$0; //@line 17997
    HEAP32[$AsyncCtx7 + 8 >> 2] = $73; //@line 17999
    HEAP32[$AsyncCtx7 + 12 >> 2] = $90; //@line 18001
    HEAP32[$AsyncCtx7 + 16 >> 2] = $1; //@line 18003
    HEAP32[$AsyncCtx7 + 20 >> 2] = $2; //@line 18005
    HEAP32[$AsyncCtx7 + 24 >> 2] = $3; //@line 18007
    HEAP8[$AsyncCtx7 + 28 >> 0] = $4 & 1; //@line 18010
    sp = STACKTOP; //@line 18011
    return;
   }
  }
 } while (0);
 return;
}
function __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$pr = 0, $$pre = 0, $$pre16 = 0, $$pre17 = 0, $10 = 0, $101 = 0, $104 = 0, $12 = 0, $13 = 0, $16 = 0, $2 = 0, $25 = 0, $26 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $39 = 0, $40 = 0, $43 = 0, $53 = 0, $54 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $65 = 0, $67 = 0, $68 = 0, $7 = 0, $71 = 0, $8 = 0, $80 = 0, $81 = 0, $87 = 0, $90 = 0, $91 = 0, $94 = 0, $96 = 0, $97 = 0, $98 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx21 = 0, $AsyncCtx24 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10743
 STACKTOP = STACKTOP + 16 | 0; //@line 10744
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10744
 $2 = sp; //@line 10745
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$0 = -1012; //@line 10750
  STACKTOP = sp; //@line 10751
  return $$0 | 0; //@line 10751
 }
 if (!$1) {
  $$0 = -1003; //@line 10755
  STACKTOP = sp; //@line 10756
  return $$0 | 0; //@line 10756
 }
 $7 = $1 + 12 | 0; //@line 10758
 $8 = HEAP32[$7 >> 2] | 0; //@line 10759
 if (!$8) {
  $$0 = -1003; //@line 10762
  STACKTOP = sp; //@line 10763
  return $$0 | 0; //@line 10763
 }
 $10 = $0 + 2500 | 0; //@line 10765
 if (($10 | 0) != ($1 | 0)) {
  $12 = $0 + 2512 | 0; //@line 10768
  $13 = HEAP32[$12 >> 2] | 0; //@line 10769
  do {
   if (!$13) {
    $25 = $8; //@line 10773
    label = 9; //@line 10774
   } else {
    $16 = HEAP32[$13 + 8 >> 2] | 0; //@line 10777
    $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 10778
    FUNCTION_TABLE_vi[$16 & 1023]($10); //@line 10779
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 353; //@line 10782
     HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 10784
     HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 10786
     HEAP32[$AsyncCtx + 12 >> 2] = $7; //@line 10788
     HEAP32[$AsyncCtx + 16 >> 2] = $12; //@line 10790
     HEAP32[$AsyncCtx + 20 >> 2] = $10; //@line 10792
     HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 10794
     sp = STACKTOP; //@line 10795
     STACKTOP = sp; //@line 10796
     return 0; //@line 10796
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 10798
     $$pre = HEAP32[$7 >> 2] | 0; //@line 10799
     if (!$$pre) {
      $32 = 0; //@line 10802
      break;
     } else {
      $25 = $$pre; //@line 10805
      label = 9; //@line 10806
      break;
     }
    }
   }
  } while (0);
  do {
   if ((label | 0) == 9) {
    $26 = HEAP32[$25 + 4 >> 2] | 0; //@line 10815
    $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 10816
    FUNCTION_TABLE_vii[$26 & 15]($10, $1); //@line 10817
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 354; //@line 10820
     HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 10822
     HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 10824
     HEAP32[$AsyncCtx2 + 12 >> 2] = $12; //@line 10826
     HEAP32[$AsyncCtx2 + 16 >> 2] = $7; //@line 10828
     HEAP32[$AsyncCtx2 + 20 >> 2] = $2; //@line 10830
     sp = STACKTOP; //@line 10831
     STACKTOP = sp; //@line 10832
     return 0; //@line 10832
    } else {
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 10834
     $32 = HEAP32[$7 >> 2] | 0; //@line 10836
     break;
    }
   }
  } while (0);
  HEAP32[$12 >> 2] = $32; //@line 10841
 }
 $33 = $1 + 16 | 0; //@line 10843
 $34 = $1 + 28 | 0; //@line 10844
 $35 = HEAP32[$34 >> 2] | 0; //@line 10845
 if ($35 | 0) {
  $37 = $0 + 2516 | 0; //@line 10848
  if (($37 | 0) != ($33 | 0)) {
   $39 = $0 + 2528 | 0; //@line 10851
   $40 = HEAP32[$39 >> 2] | 0; //@line 10852
   do {
    if (!$40) {
     $53 = $35; //@line 10856
     label = 19; //@line 10857
    } else {
     $43 = HEAP32[$40 + 8 >> 2] | 0; //@line 10860
     $AsyncCtx5 = _emscripten_alloc_async_context(32, sp) | 0; //@line 10861
     FUNCTION_TABLE_vi[$43 & 1023]($37); //@line 10862
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 355; //@line 10865
      HEAP32[$AsyncCtx5 + 4 >> 2] = $0; //@line 10867
      HEAP32[$AsyncCtx5 + 8 >> 2] = $1; //@line 10869
      HEAP32[$AsyncCtx5 + 12 >> 2] = $39; //@line 10871
      HEAP32[$AsyncCtx5 + 16 >> 2] = $37; //@line 10873
      HEAP32[$AsyncCtx5 + 20 >> 2] = $33; //@line 10875
      HEAP32[$AsyncCtx5 + 24 >> 2] = $34; //@line 10877
      HEAP32[$AsyncCtx5 + 28 >> 2] = $2; //@line 10879
      sp = STACKTOP; //@line 10880
      STACKTOP = sp; //@line 10881
      return 0; //@line 10881
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 10883
      $$pre16 = HEAP32[$34 >> 2] | 0; //@line 10884
      if (!$$pre16) {
       $60 = 0; //@line 10887
       break;
      } else {
       $53 = $$pre16; //@line 10890
       label = 19; //@line 10891
       break;
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 19) {
     $54 = HEAP32[$53 + 4 >> 2] | 0; //@line 10900
     $AsyncCtx8 = _emscripten_alloc_async_context(24, sp) | 0; //@line 10901
     FUNCTION_TABLE_vii[$54 & 15]($37, $33); //@line 10902
     if (___async) {
      HEAP32[$AsyncCtx8 >> 2] = 356; //@line 10905
      HEAP32[$AsyncCtx8 + 4 >> 2] = $0; //@line 10907
      HEAP32[$AsyncCtx8 + 8 >> 2] = $1; //@line 10909
      HEAP32[$AsyncCtx8 + 12 >> 2] = $39; //@line 10911
      HEAP32[$AsyncCtx8 + 16 >> 2] = $34; //@line 10913
      HEAP32[$AsyncCtx8 + 20 >> 2] = $2; //@line 10915
      sp = STACKTOP; //@line 10916
      STACKTOP = sp; //@line 10917
      return 0; //@line 10917
     } else {
      _emscripten_free_async_context($AsyncCtx8 | 0); //@line 10919
      $60 = HEAP32[$34 >> 2] | 0; //@line 10921
      break;
     }
    }
   } while (0);
   HEAP32[$39 >> 2] = $60; //@line 10926
  }
 }
 $61 = $1 + 32 | 0; //@line 10929
 $62 = $1 + 44 | 0; //@line 10930
 $63 = HEAP32[$62 >> 2] | 0; //@line 10931
 if (!$63) {
  $$0 = 0; //@line 10934
  STACKTOP = sp; //@line 10935
  return $$0 | 0; //@line 10935
 }
 $65 = $0 + 2532 | 0; //@line 10937
 if (($65 | 0) == ($61 | 0)) {
  $90 = $63; //@line 10940
  $94 = $0; //@line 10940
  label = 34; //@line 10941
 } else {
  $67 = $0 + 2544 | 0; //@line 10943
  $68 = HEAP32[$67 >> 2] | 0; //@line 10944
  do {
   if (!$68) {
    $80 = $63; //@line 10948
    label = 30; //@line 10949
   } else {
    $71 = HEAP32[$68 + 8 >> 2] | 0; //@line 10952
    $AsyncCtx11 = _emscripten_alloc_async_context(28, sp) | 0; //@line 10953
    FUNCTION_TABLE_vi[$71 & 1023]($65); //@line 10954
    if (___async) {
     HEAP32[$AsyncCtx11 >> 2] = 357; //@line 10957
     HEAP32[$AsyncCtx11 + 4 >> 2] = $62; //@line 10959
     HEAP32[$AsyncCtx11 + 8 >> 2] = $67; //@line 10961
     HEAP32[$AsyncCtx11 + 12 >> 2] = $0; //@line 10963
     HEAP32[$AsyncCtx11 + 16 >> 2] = $65; //@line 10965
     HEAP32[$AsyncCtx11 + 20 >> 2] = $61; //@line 10967
     HEAP32[$AsyncCtx11 + 24 >> 2] = $2; //@line 10969
     sp = STACKTOP; //@line 10970
     STACKTOP = sp; //@line 10971
     return 0; //@line 10971
    } else {
     _emscripten_free_async_context($AsyncCtx11 | 0); //@line 10973
     $$pre17 = HEAP32[$62 >> 2] | 0; //@line 10974
     if (!$$pre17) {
      $87 = 0; //@line 10977
      break;
     } else {
      $80 = $$pre17; //@line 10980
      label = 30; //@line 10981
      break;
     }
    }
   }
  } while (0);
  do {
   if ((label | 0) == 30) {
    $81 = HEAP32[$80 + 4 >> 2] | 0; //@line 10990
    $AsyncCtx14 = _emscripten_alloc_async_context(24, sp) | 0; //@line 10991
    FUNCTION_TABLE_vii[$81 & 15]($65, $61); //@line 10992
    if (___async) {
     HEAP32[$AsyncCtx14 >> 2] = 358; //@line 10995
     HEAP32[$AsyncCtx14 + 4 >> 2] = $62; //@line 10997
     HEAP32[$AsyncCtx14 + 8 >> 2] = $67; //@line 10999
     HEAP32[$AsyncCtx14 + 12 >> 2] = $0; //@line 11001
     HEAP32[$AsyncCtx14 + 16 >> 2] = $2; //@line 11003
     HEAP32[$AsyncCtx14 + 20 >> 2] = $61; //@line 11005
     sp = STACKTOP; //@line 11006
     STACKTOP = sp; //@line 11007
     return 0; //@line 11007
    } else {
     _emscripten_free_async_context($AsyncCtx14 | 0); //@line 11009
     $87 = HEAP32[$62 >> 2] | 0; //@line 11011
     break;
    }
   }
  } while (0);
  HEAP32[$67 >> 2] = $87; //@line 11016
  $$pr = HEAP32[$62 >> 2] | 0; //@line 11017
  if (!$$pr) {
   $97 = 0; //@line 11020
   $98 = $0; //@line 11020
  } else {
   $90 = $$pr; //@line 11022
   $94 = $0; //@line 11022
   label = 34; //@line 11023
  }
 }
 do {
  if ((label | 0) == 34) {
   $91 = HEAP32[$90 + 4 >> 2] | 0; //@line 11029
   $AsyncCtx17 = _emscripten_alloc_async_context(16, sp) | 0; //@line 11030
   FUNCTION_TABLE_vii[$91 & 15]($2, $61); //@line 11031
   if (___async) {
    HEAP32[$AsyncCtx17 >> 2] = 359; //@line 11034
    HEAP32[$AsyncCtx17 + 4 >> 2] = $62; //@line 11036
    HEAP32[$AsyncCtx17 + 8 >> 2] = $94; //@line 11038
    HEAP32[$AsyncCtx17 + 12 >> 2] = $2; //@line 11040
    sp = STACKTOP; //@line 11041
    STACKTOP = sp; //@line 11042
    return 0; //@line 11042
   } else {
    _emscripten_free_async_context($AsyncCtx17 | 0); //@line 11044
    $97 = HEAP32[$62 >> 2] | 0; //@line 11046
    $98 = $94; //@line 11046
    break;
   }
  }
 } while (0);
 $96 = $2 + 12 | 0; //@line 11051
 HEAP32[$96 >> 2] = $97; //@line 11052
 $AsyncCtx24 = _emscripten_alloc_async_context(12, sp) | 0; //@line 11053
 __ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE($98, $2); //@line 11054
 if (___async) {
  HEAP32[$AsyncCtx24 >> 2] = 360; //@line 11057
  HEAP32[$AsyncCtx24 + 4 >> 2] = $96; //@line 11059
  HEAP32[$AsyncCtx24 + 8 >> 2] = $2; //@line 11061
  sp = STACKTOP; //@line 11062
  STACKTOP = sp; //@line 11063
  return 0; //@line 11063
 }
 _emscripten_free_async_context($AsyncCtx24 | 0); //@line 11065
 $101 = HEAP32[$96 >> 2] | 0; //@line 11066
 if (!$101) {
  $$0 = 0; //@line 11069
  STACKTOP = sp; //@line 11070
  return $$0 | 0; //@line 11070
 }
 $104 = HEAP32[$101 + 8 >> 2] | 0; //@line 11073
 $AsyncCtx21 = _emscripten_alloc_async_context(4, sp) | 0; //@line 11074
 FUNCTION_TABLE_vi[$104 & 1023]($2); //@line 11075
 if (___async) {
  HEAP32[$AsyncCtx21 >> 2] = 361; //@line 11078
  sp = STACKTOP; //@line 11079
  STACKTOP = sp; //@line 11080
  return 0; //@line 11080
 }
 _emscripten_free_async_context($AsyncCtx21 | 0); //@line 11082
 $$0 = 0; //@line 11083
 STACKTOP = sp; //@line 11084
 return $$0 | 0; //@line 11084
}
function __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $12 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $27 = 0, $28 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $50 = 0, $52 = 0, $53 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 22618
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22620
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22622
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22624
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22626
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22628
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22630
 $$pre = HEAP32[$6 >> 2] | 0; //@line 22631
 if ($$pre | 0) {
  $15 = HEAP32[$$pre + 4 >> 2] | 0; //@line 22635
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 22636
  FUNCTION_TABLE_vii[$15 & 15]($10, $4); //@line 22637
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 354; //@line 22640
   $16 = $ReallocAsyncCtx2 + 4 | 0; //@line 22641
   HEAP32[$16 >> 2] = $2; //@line 22642
   $17 = $ReallocAsyncCtx2 + 8 | 0; //@line 22643
   HEAP32[$17 >> 2] = $4; //@line 22644
   $18 = $ReallocAsyncCtx2 + 12 | 0; //@line 22645
   HEAP32[$18 >> 2] = $8; //@line 22646
   $19 = $ReallocAsyncCtx2 + 16 | 0; //@line 22647
   HEAP32[$19 >> 2] = $6; //@line 22648
   $20 = $ReallocAsyncCtx2 + 20 | 0; //@line 22649
   HEAP32[$20 >> 2] = $12; //@line 22650
   sp = STACKTOP; //@line 22651
   return;
  }
  ___async_unwind = 0; //@line 22654
  HEAP32[$ReallocAsyncCtx2 >> 2] = 354; //@line 22655
  $16 = $ReallocAsyncCtx2 + 4 | 0; //@line 22656
  HEAP32[$16 >> 2] = $2; //@line 22657
  $17 = $ReallocAsyncCtx2 + 8 | 0; //@line 22658
  HEAP32[$17 >> 2] = $4; //@line 22659
  $18 = $ReallocAsyncCtx2 + 12 | 0; //@line 22660
  HEAP32[$18 >> 2] = $8; //@line 22661
  $19 = $ReallocAsyncCtx2 + 16 | 0; //@line 22662
  HEAP32[$19 >> 2] = $6; //@line 22663
  $20 = $ReallocAsyncCtx2 + 20 | 0; //@line 22664
  HEAP32[$20 >> 2] = $12; //@line 22665
  sp = STACKTOP; //@line 22666
  return;
 }
 HEAP32[$8 >> 2] = 0; //@line 22669
 $21 = $4 + 16 | 0; //@line 22670
 $22 = $4 + 28 | 0; //@line 22671
 $23 = HEAP32[$22 >> 2] | 0; //@line 22672
 if ($23 | 0) {
  $25 = $2 + 2516 | 0; //@line 22675
  if (($25 | 0) != ($21 | 0)) {
   $27 = $2 + 2528 | 0; //@line 22678
   $28 = HEAP32[$27 >> 2] | 0; //@line 22679
   if (!$28) {
    $40 = HEAP32[$23 + 4 >> 2] | 0; //@line 22683
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 22684
    FUNCTION_TABLE_vii[$40 & 15]($25, $21); //@line 22685
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 356; //@line 22688
     $41 = $ReallocAsyncCtx4 + 4 | 0; //@line 22689
     HEAP32[$41 >> 2] = $2; //@line 22690
     $42 = $ReallocAsyncCtx4 + 8 | 0; //@line 22691
     HEAP32[$42 >> 2] = $4; //@line 22692
     $43 = $ReallocAsyncCtx4 + 12 | 0; //@line 22693
     HEAP32[$43 >> 2] = $27; //@line 22694
     $44 = $ReallocAsyncCtx4 + 16 | 0; //@line 22695
     HEAP32[$44 >> 2] = $22; //@line 22696
     $45 = $ReallocAsyncCtx4 + 20 | 0; //@line 22697
     HEAP32[$45 >> 2] = $12; //@line 22698
     sp = STACKTOP; //@line 22699
     return;
    }
    ___async_unwind = 0; //@line 22702
    HEAP32[$ReallocAsyncCtx4 >> 2] = 356; //@line 22703
    $41 = $ReallocAsyncCtx4 + 4 | 0; //@line 22704
    HEAP32[$41 >> 2] = $2; //@line 22705
    $42 = $ReallocAsyncCtx4 + 8 | 0; //@line 22706
    HEAP32[$42 >> 2] = $4; //@line 22707
    $43 = $ReallocAsyncCtx4 + 12 | 0; //@line 22708
    HEAP32[$43 >> 2] = $27; //@line 22709
    $44 = $ReallocAsyncCtx4 + 16 | 0; //@line 22710
    HEAP32[$44 >> 2] = $22; //@line 22711
    $45 = $ReallocAsyncCtx4 + 20 | 0; //@line 22712
    HEAP32[$45 >> 2] = $12; //@line 22713
    sp = STACKTOP; //@line 22714
    return;
   } else {
    $31 = HEAP32[$28 + 8 >> 2] | 0; //@line 22718
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 22719
    FUNCTION_TABLE_vi[$31 & 1023]($25); //@line 22720
    if (___async) {
     HEAP32[$ReallocAsyncCtx3 >> 2] = 355; //@line 22723
     $32 = $ReallocAsyncCtx3 + 4 | 0; //@line 22724
     HEAP32[$32 >> 2] = $2; //@line 22725
     $33 = $ReallocAsyncCtx3 + 8 | 0; //@line 22726
     HEAP32[$33 >> 2] = $4; //@line 22727
     $34 = $ReallocAsyncCtx3 + 12 | 0; //@line 22728
     HEAP32[$34 >> 2] = $27; //@line 22729
     $35 = $ReallocAsyncCtx3 + 16 | 0; //@line 22730
     HEAP32[$35 >> 2] = $25; //@line 22731
     $36 = $ReallocAsyncCtx3 + 20 | 0; //@line 22732
     HEAP32[$36 >> 2] = $21; //@line 22733
     $37 = $ReallocAsyncCtx3 + 24 | 0; //@line 22734
     HEAP32[$37 >> 2] = $22; //@line 22735
     $38 = $ReallocAsyncCtx3 + 28 | 0; //@line 22736
     HEAP32[$38 >> 2] = $12; //@line 22737
     sp = STACKTOP; //@line 22738
     return;
    }
    ___async_unwind = 0; //@line 22741
    HEAP32[$ReallocAsyncCtx3 >> 2] = 355; //@line 22742
    $32 = $ReallocAsyncCtx3 + 4 | 0; //@line 22743
    HEAP32[$32 >> 2] = $2; //@line 22744
    $33 = $ReallocAsyncCtx3 + 8 | 0; //@line 22745
    HEAP32[$33 >> 2] = $4; //@line 22746
    $34 = $ReallocAsyncCtx3 + 12 | 0; //@line 22747
    HEAP32[$34 >> 2] = $27; //@line 22748
    $35 = $ReallocAsyncCtx3 + 16 | 0; //@line 22749
    HEAP32[$35 >> 2] = $25; //@line 22750
    $36 = $ReallocAsyncCtx3 + 20 | 0; //@line 22751
    HEAP32[$36 >> 2] = $21; //@line 22752
    $37 = $ReallocAsyncCtx3 + 24 | 0; //@line 22753
    HEAP32[$37 >> 2] = $22; //@line 22754
    $38 = $ReallocAsyncCtx3 + 28 | 0; //@line 22755
    HEAP32[$38 >> 2] = $12; //@line 22756
    sp = STACKTOP; //@line 22757
    return;
   }
  }
 }
 $46 = $4 + 32 | 0; //@line 22762
 $47 = $4 + 44 | 0; //@line 22763
 $48 = HEAP32[$47 >> 2] | 0; //@line 22764
 if (!$48) {
  HEAP32[___async_retval >> 2] = 0; //@line 22768
  return;
 }
 $50 = $2 + 2532 | 0; //@line 22771
 if (($50 | 0) == ($46 | 0)) {
  $71 = HEAP32[$48 + 4 >> 2] | 0; //@line 22775
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 22776
  FUNCTION_TABLE_vii[$71 & 15]($12, $46); //@line 22777
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 359; //@line 22780
   $72 = $ReallocAsyncCtx7 + 4 | 0; //@line 22781
   HEAP32[$72 >> 2] = $47; //@line 22782
   $73 = $ReallocAsyncCtx7 + 8 | 0; //@line 22783
   HEAP32[$73 >> 2] = $2; //@line 22784
   $74 = $ReallocAsyncCtx7 + 12 | 0; //@line 22785
   HEAP32[$74 >> 2] = $12; //@line 22786
   sp = STACKTOP; //@line 22787
   return;
  }
  ___async_unwind = 0; //@line 22790
  HEAP32[$ReallocAsyncCtx7 >> 2] = 359; //@line 22791
  $72 = $ReallocAsyncCtx7 + 4 | 0; //@line 22792
  HEAP32[$72 >> 2] = $47; //@line 22793
  $73 = $ReallocAsyncCtx7 + 8 | 0; //@line 22794
  HEAP32[$73 >> 2] = $2; //@line 22795
  $74 = $ReallocAsyncCtx7 + 12 | 0; //@line 22796
  HEAP32[$74 >> 2] = $12; //@line 22797
  sp = STACKTOP; //@line 22798
  return;
 }
 $52 = $2 + 2544 | 0; //@line 22801
 $53 = HEAP32[$52 >> 2] | 0; //@line 22802
 if (!$53) {
  $64 = HEAP32[$48 + 4 >> 2] | 0; //@line 22806
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 22807
  FUNCTION_TABLE_vii[$64 & 15]($50, $46); //@line 22808
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 358; //@line 22811
   $65 = $ReallocAsyncCtx6 + 4 | 0; //@line 22812
   HEAP32[$65 >> 2] = $47; //@line 22813
   $66 = $ReallocAsyncCtx6 + 8 | 0; //@line 22814
   HEAP32[$66 >> 2] = $52; //@line 22815
   $67 = $ReallocAsyncCtx6 + 12 | 0; //@line 22816
   HEAP32[$67 >> 2] = $2; //@line 22817
   $68 = $ReallocAsyncCtx6 + 16 | 0; //@line 22818
   HEAP32[$68 >> 2] = $12; //@line 22819
   $69 = $ReallocAsyncCtx6 + 20 | 0; //@line 22820
   HEAP32[$69 >> 2] = $46; //@line 22821
   sp = STACKTOP; //@line 22822
   return;
  }
  ___async_unwind = 0; //@line 22825
  HEAP32[$ReallocAsyncCtx6 >> 2] = 358; //@line 22826
  $65 = $ReallocAsyncCtx6 + 4 | 0; //@line 22827
  HEAP32[$65 >> 2] = $47; //@line 22828
  $66 = $ReallocAsyncCtx6 + 8 | 0; //@line 22829
  HEAP32[$66 >> 2] = $52; //@line 22830
  $67 = $ReallocAsyncCtx6 + 12 | 0; //@line 22831
  HEAP32[$67 >> 2] = $2; //@line 22832
  $68 = $ReallocAsyncCtx6 + 16 | 0; //@line 22833
  HEAP32[$68 >> 2] = $12; //@line 22834
  $69 = $ReallocAsyncCtx6 + 20 | 0; //@line 22835
  HEAP32[$69 >> 2] = $46; //@line 22836
  sp = STACKTOP; //@line 22837
  return;
 } else {
  $56 = HEAP32[$53 + 8 >> 2] | 0; //@line 22841
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 22842
  FUNCTION_TABLE_vi[$56 & 1023]($50); //@line 22843
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 357; //@line 22846
   $57 = $ReallocAsyncCtx5 + 4 | 0; //@line 22847
   HEAP32[$57 >> 2] = $47; //@line 22848
   $58 = $ReallocAsyncCtx5 + 8 | 0; //@line 22849
   HEAP32[$58 >> 2] = $52; //@line 22850
   $59 = $ReallocAsyncCtx5 + 12 | 0; //@line 22851
   HEAP32[$59 >> 2] = $2; //@line 22852
   $60 = $ReallocAsyncCtx5 + 16 | 0; //@line 22853
   HEAP32[$60 >> 2] = $50; //@line 22854
   $61 = $ReallocAsyncCtx5 + 20 | 0; //@line 22855
   HEAP32[$61 >> 2] = $46; //@line 22856
   $62 = $ReallocAsyncCtx5 + 24 | 0; //@line 22857
   HEAP32[$62 >> 2] = $12; //@line 22858
   sp = STACKTOP; //@line 22859
   return;
  }
  ___async_unwind = 0; //@line 22862
  HEAP32[$ReallocAsyncCtx5 >> 2] = 357; //@line 22863
  $57 = $ReallocAsyncCtx5 + 4 | 0; //@line 22864
  HEAP32[$57 >> 2] = $47; //@line 22865
  $58 = $ReallocAsyncCtx5 + 8 | 0; //@line 22866
  HEAP32[$58 >> 2] = $52; //@line 22867
  $59 = $ReallocAsyncCtx5 + 12 | 0; //@line 22868
  HEAP32[$59 >> 2] = $2; //@line 22869
  $60 = $ReallocAsyncCtx5 + 16 | 0; //@line 22870
  HEAP32[$60 >> 2] = $50; //@line 22871
  $61 = $ReallocAsyncCtx5 + 20 | 0; //@line 22872
  HEAP32[$61 >> 2] = $46; //@line 22873
  $62 = $ReallocAsyncCtx5 + 24 | 0; //@line 22874
  HEAP32[$62 >> 2] = $12; //@line 22875
  sp = STACKTOP; //@line 22876
  return;
 }
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 14563
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14565
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14567
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14569
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14571
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14573
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 14575
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 14577
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 14579
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 14581
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 14583
 $$pre = HEAP32[$2 >> 2] | 0; //@line 14584
 if ($$pre | 0) {
  $23 = HEAP32[$$pre + 4 >> 2] | 0; //@line 14588
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(44) | 0; //@line 14589
  FUNCTION_TABLE_vii[$23 & 15]($14, $16); //@line 14590
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 183; //@line 14593
   $24 = $ReallocAsyncCtx2 + 4 | 0; //@line 14594
   HEAP32[$24 >> 2] = $2; //@line 14595
   $25 = $ReallocAsyncCtx2 + 8 | 0; //@line 14596
   HEAP32[$25 >> 2] = $4; //@line 14597
   $26 = $ReallocAsyncCtx2 + 12 | 0; //@line 14598
   HEAP32[$26 >> 2] = $6; //@line 14599
   $27 = $ReallocAsyncCtx2 + 16 | 0; //@line 14600
   HEAP32[$27 >> 2] = $8; //@line 14601
   $28 = $ReallocAsyncCtx2 + 20 | 0; //@line 14602
   HEAP32[$28 >> 2] = $10; //@line 14603
   $29 = $ReallocAsyncCtx2 + 24 | 0; //@line 14604
   HEAP32[$29 >> 2] = $12; //@line 14605
   $30 = $ReallocAsyncCtx2 + 28 | 0; //@line 14606
   HEAP32[$30 >> 2] = $16; //@line 14607
   $31 = $ReallocAsyncCtx2 + 32 | 0; //@line 14608
   HEAP32[$31 >> 2] = $18; //@line 14609
   $32 = $ReallocAsyncCtx2 + 36 | 0; //@line 14610
   HEAP32[$32 >> 2] = $20; //@line 14611
   $33 = $ReallocAsyncCtx2 + 40 | 0; //@line 14612
   HEAP32[$33 >> 2] = $14; //@line 14613
   sp = STACKTOP; //@line 14614
   return;
  }
  ___async_unwind = 0; //@line 14617
  HEAP32[$ReallocAsyncCtx2 >> 2] = 183; //@line 14618
  $24 = $ReallocAsyncCtx2 + 4 | 0; //@line 14619
  HEAP32[$24 >> 2] = $2; //@line 14620
  $25 = $ReallocAsyncCtx2 + 8 | 0; //@line 14621
  HEAP32[$25 >> 2] = $4; //@line 14622
  $26 = $ReallocAsyncCtx2 + 12 | 0; //@line 14623
  HEAP32[$26 >> 2] = $6; //@line 14624
  $27 = $ReallocAsyncCtx2 + 16 | 0; //@line 14625
  HEAP32[$27 >> 2] = $8; //@line 14626
  $28 = $ReallocAsyncCtx2 + 20 | 0; //@line 14627
  HEAP32[$28 >> 2] = $10; //@line 14628
  $29 = $ReallocAsyncCtx2 + 24 | 0; //@line 14629
  HEAP32[$29 >> 2] = $12; //@line 14630
  $30 = $ReallocAsyncCtx2 + 28 | 0; //@line 14631
  HEAP32[$30 >> 2] = $16; //@line 14632
  $31 = $ReallocAsyncCtx2 + 32 | 0; //@line 14633
  HEAP32[$31 >> 2] = $18; //@line 14634
  $32 = $ReallocAsyncCtx2 + 36 | 0; //@line 14635
  HEAP32[$32 >> 2] = $20; //@line 14636
  $33 = $ReallocAsyncCtx2 + 40 | 0; //@line 14637
  HEAP32[$33 >> 2] = $14; //@line 14638
  sp = STACKTOP; //@line 14639
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 14642
 $34 = $18 + 12 | 0; //@line 14643
 HEAP32[$18 >> 2] = 6; //@line 14644
 HEAP32[$18 + 4 >> 2] = 0; //@line 14646
 HEAP32[$18 + 8 >> 2] = $6; //@line 14648
 HEAP32[$34 >> 2] = 836; //@line 14649
 $35 = $6 + 2416 | 0; //@line 14650
 if (($35 | 0) == ($18 | 0)) {
  $64 = HEAP32[211] | 0; //@line 14654
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(32) | 0; //@line 14655
  FUNCTION_TABLE_vi[$64 & 1023]($18); //@line 14656
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 187; //@line 14659
   $65 = $ReallocAsyncCtx6 + 4 | 0; //@line 14660
   HEAP32[$65 >> 2] = $6; //@line 14661
   $66 = $ReallocAsyncCtx6 + 8 | 0; //@line 14662
   HEAP32[$66 >> 2] = $8; //@line 14663
   $67 = $ReallocAsyncCtx6 + 12 | 0; //@line 14664
   HEAP32[$67 >> 2] = $10; //@line 14665
   $68 = $ReallocAsyncCtx6 + 16 | 0; //@line 14666
   HEAP32[$68 >> 2] = $18; //@line 14667
   $69 = $ReallocAsyncCtx6 + 20 | 0; //@line 14668
   HEAP32[$69 >> 2] = $12; //@line 14669
   $70 = $ReallocAsyncCtx6 + 24 | 0; //@line 14670
   HEAP32[$70 >> 2] = $20; //@line 14671
   $71 = $ReallocAsyncCtx6 + 28 | 0; //@line 14672
   HEAP32[$71 >> 2] = $14; //@line 14673
   sp = STACKTOP; //@line 14674
   return;
  }
  ___async_unwind = 0; //@line 14677
  HEAP32[$ReallocAsyncCtx6 >> 2] = 187; //@line 14678
  $65 = $ReallocAsyncCtx6 + 4 | 0; //@line 14679
  HEAP32[$65 >> 2] = $6; //@line 14680
  $66 = $ReallocAsyncCtx6 + 8 | 0; //@line 14681
  HEAP32[$66 >> 2] = $8; //@line 14682
  $67 = $ReallocAsyncCtx6 + 12 | 0; //@line 14683
  HEAP32[$67 >> 2] = $10; //@line 14684
  $68 = $ReallocAsyncCtx6 + 16 | 0; //@line 14685
  HEAP32[$68 >> 2] = $18; //@line 14686
  $69 = $ReallocAsyncCtx6 + 20 | 0; //@line 14687
  HEAP32[$69 >> 2] = $12; //@line 14688
  $70 = $ReallocAsyncCtx6 + 24 | 0; //@line 14689
  HEAP32[$70 >> 2] = $20; //@line 14690
  $71 = $ReallocAsyncCtx6 + 28 | 0; //@line 14691
  HEAP32[$71 >> 2] = $14; //@line 14692
  sp = STACKTOP; //@line 14693
  return;
 }
 $37 = $6 + 2428 | 0; //@line 14696
 $38 = HEAP32[$37 >> 2] | 0; //@line 14697
 if (!$38) {
  $53 = HEAP32[210] | 0; //@line 14701
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(40) | 0; //@line 14702
  FUNCTION_TABLE_vii[$53 & 15]($35, $18); //@line 14703
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 186; //@line 14706
   $54 = $ReallocAsyncCtx5 + 4 | 0; //@line 14707
   HEAP32[$54 >> 2] = $6; //@line 14708
   $55 = $ReallocAsyncCtx5 + 8 | 0; //@line 14709
   HEAP32[$55 >> 2] = $8; //@line 14710
   $56 = $ReallocAsyncCtx5 + 12 | 0; //@line 14711
   HEAP32[$56 >> 2] = $10; //@line 14712
   $57 = $ReallocAsyncCtx5 + 16 | 0; //@line 14713
   HEAP32[$57 >> 2] = $34; //@line 14714
   $58 = $ReallocAsyncCtx5 + 20 | 0; //@line 14715
   HEAP32[$58 >> 2] = $37; //@line 14716
   $59 = $ReallocAsyncCtx5 + 24 | 0; //@line 14717
   HEAP32[$59 >> 2] = $18; //@line 14718
   $60 = $ReallocAsyncCtx5 + 28 | 0; //@line 14719
   HEAP32[$60 >> 2] = $12; //@line 14720
   $61 = $ReallocAsyncCtx5 + 32 | 0; //@line 14721
   HEAP32[$61 >> 2] = $20; //@line 14722
   $62 = $ReallocAsyncCtx5 + 36 | 0; //@line 14723
   HEAP32[$62 >> 2] = $14; //@line 14724
   sp = STACKTOP; //@line 14725
   return;
  }
  ___async_unwind = 0; //@line 14728
  HEAP32[$ReallocAsyncCtx5 >> 2] = 186; //@line 14729
  $54 = $ReallocAsyncCtx5 + 4 | 0; //@line 14730
  HEAP32[$54 >> 2] = $6; //@line 14731
  $55 = $ReallocAsyncCtx5 + 8 | 0; //@line 14732
  HEAP32[$55 >> 2] = $8; //@line 14733
  $56 = $ReallocAsyncCtx5 + 12 | 0; //@line 14734
  HEAP32[$56 >> 2] = $10; //@line 14735
  $57 = $ReallocAsyncCtx5 + 16 | 0; //@line 14736
  HEAP32[$57 >> 2] = $34; //@line 14737
  $58 = $ReallocAsyncCtx5 + 20 | 0; //@line 14738
  HEAP32[$58 >> 2] = $37; //@line 14739
  $59 = $ReallocAsyncCtx5 + 24 | 0; //@line 14740
  HEAP32[$59 >> 2] = $18; //@line 14741
  $60 = $ReallocAsyncCtx5 + 28 | 0; //@line 14742
  HEAP32[$60 >> 2] = $12; //@line 14743
  $61 = $ReallocAsyncCtx5 + 32 | 0; //@line 14744
  HEAP32[$61 >> 2] = $20; //@line 14745
  $62 = $ReallocAsyncCtx5 + 36 | 0; //@line 14746
  HEAP32[$62 >> 2] = $14; //@line 14747
  sp = STACKTOP; //@line 14748
  return;
 } else {
  $41 = HEAP32[$38 + 8 >> 2] | 0; //@line 14752
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(44) | 0; //@line 14753
  FUNCTION_TABLE_vi[$41 & 1023]($35); //@line 14754
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 185; //@line 14757
   $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 14758
   HEAP32[$42 >> 2] = $34; //@line 14759
   $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 14760
   HEAP32[$43 >> 2] = $6; //@line 14761
   $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 14762
   HEAP32[$44 >> 2] = $8; //@line 14763
   $45 = $ReallocAsyncCtx4 + 16 | 0; //@line 14764
   HEAP32[$45 >> 2] = $10; //@line 14765
   $46 = $ReallocAsyncCtx4 + 20 | 0; //@line 14766
   HEAP32[$46 >> 2] = $37; //@line 14767
   $47 = $ReallocAsyncCtx4 + 24 | 0; //@line 14768
   HEAP32[$47 >> 2] = $35; //@line 14769
   $48 = $ReallocAsyncCtx4 + 28 | 0; //@line 14770
   HEAP32[$48 >> 2] = $18; //@line 14771
   $49 = $ReallocAsyncCtx4 + 32 | 0; //@line 14772
   HEAP32[$49 >> 2] = $12; //@line 14773
   $50 = $ReallocAsyncCtx4 + 36 | 0; //@line 14774
   HEAP32[$50 >> 2] = $20; //@line 14775
   $51 = $ReallocAsyncCtx4 + 40 | 0; //@line 14776
   HEAP32[$51 >> 2] = $14; //@line 14777
   sp = STACKTOP; //@line 14778
   return;
  }
  ___async_unwind = 0; //@line 14781
  HEAP32[$ReallocAsyncCtx4 >> 2] = 185; //@line 14782
  $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 14783
  HEAP32[$42 >> 2] = $34; //@line 14784
  $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 14785
  HEAP32[$43 >> 2] = $6; //@line 14786
  $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 14787
  HEAP32[$44 >> 2] = $8; //@line 14788
  $45 = $ReallocAsyncCtx4 + 16 | 0; //@line 14789
  HEAP32[$45 >> 2] = $10; //@line 14790
  $46 = $ReallocAsyncCtx4 + 20 | 0; //@line 14791
  HEAP32[$46 >> 2] = $37; //@line 14792
  $47 = $ReallocAsyncCtx4 + 24 | 0; //@line 14793
  HEAP32[$47 >> 2] = $35; //@line 14794
  $48 = $ReallocAsyncCtx4 + 28 | 0; //@line 14795
  HEAP32[$48 >> 2] = $18; //@line 14796
  $49 = $ReallocAsyncCtx4 + 32 | 0; //@line 14797
  HEAP32[$49 >> 2] = $12; //@line 14798
  $50 = $ReallocAsyncCtx4 + 36 | 0; //@line 14799
  HEAP32[$50 >> 2] = $20; //@line 14800
  $51 = $ReallocAsyncCtx4 + 40 | 0; //@line 14801
  HEAP32[$51 >> 2] = $14; //@line 14802
  sp = STACKTOP; //@line 14803
  return;
 }
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 $14 = $14 | 0;
 $15 = $15 | 0;
 $16 = $16 | 0;
 $17 = $17 | 0;
 $18 = $18 | 0;
 var $106 = 0, $19 = 0, $20 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $47 = 0, $49 = 0, $62 = 0, $64 = 0, $77 = 0, $79 = 0, $92 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 1956
 HEAP32[$0 >> 2] = 496; //@line 1957
 $19 = $0 + 4 | 0; //@line 1958
 HEAP32[$19 >> 2] = 0; //@line 1959
 HEAP32[$19 + 4 >> 2] = 0; //@line 1959
 HEAP32[$19 + 8 >> 2] = 0; //@line 1959
 HEAP32[$19 + 12 >> 2] = 0; //@line 1959
 HEAP32[$19 + 16 >> 2] = 0; //@line 1959
 HEAP32[$19 + 20 >> 2] = 0; //@line 1959
 _gpio_init_out_ex($19, $4, 1); //@line 1960
 $20 = $0 + 28 | 0; //@line 1961
 HEAP32[$20 >> 2] = 0; //@line 1962
 HEAP32[$20 + 4 >> 2] = 0; //@line 1962
 HEAP32[$20 + 8 >> 2] = 0; //@line 1962
 HEAP32[$20 + 12 >> 2] = 0; //@line 1962
 HEAP32[$20 + 16 >> 2] = 0; //@line 1962
 HEAP32[$20 + 20 >> 2] = 0; //@line 1962
 _gpio_init_in($20, $5); //@line 1963
 __ZN4mbed11InterruptInC2E7PinName($0 + 52 | 0, $6); //@line 1965
 __ZN4mbed11InterruptInC2E7PinName($0 + 124 | 0, $7); //@line 1967
 __ZN4mbed11InterruptInC2E7PinName($0 + 196 | 0, $8); //@line 1969
 __ZN4mbed11InterruptInC2E7PinName($0 + 268 | 0, $9); //@line 1971
 __ZN4mbed11InterruptInC2E7PinName($0 + 340 | 0, $10); //@line 1973
 __ZN4mbed11InterruptInC2E7PinName($0 + 412 | 0, $11); //@line 1975
 $27 = $0 + 484 | 0; //@line 1976
 HEAP32[$27 >> 2] = 0; //@line 1977
 HEAP32[$27 + 4 >> 2] = 0; //@line 1977
 HEAP32[$27 + 8 >> 2] = 0; //@line 1977
 HEAP32[$27 + 12 >> 2] = 0; //@line 1977
 HEAP32[$27 + 16 >> 2] = 0; //@line 1977
 HEAP32[$27 + 20 >> 2] = 0; //@line 1977
 _gpio_init_out_ex($27, $12, 0); //@line 1978
 $28 = $0 + 508 | 0; //@line 1979
 HEAP32[$28 >> 2] = 0; //@line 1980
 HEAP32[$28 + 4 >> 2] = 0; //@line 1980
 HEAP32[$28 + 8 >> 2] = 0; //@line 1980
 HEAP32[$28 + 12 >> 2] = 0; //@line 1980
 HEAP32[$28 + 16 >> 2] = 0; //@line 1980
 HEAP32[$28 + 20 >> 2] = 0; //@line 1980
 _gpio_init_out_ex($28, $13, 0); //@line 1981
 $29 = $0 + 532 | 0; //@line 1982
 HEAP32[$29 >> 2] = 0; //@line 1983
 HEAP32[$29 + 4 >> 2] = 0; //@line 1983
 HEAP32[$29 + 8 >> 2] = 0; //@line 1983
 HEAP32[$29 + 12 >> 2] = 0; //@line 1983
 HEAP32[$29 + 16 >> 2] = 0; //@line 1983
 HEAP32[$29 + 20 >> 2] = 0; //@line 1983
 _gpio_init_out_ex($29, $14, 0); //@line 1984
 $30 = $0 + 556 | 0; //@line 1985
 HEAP32[$30 >> 2] = 0; //@line 1986
 HEAP32[$30 + 4 >> 2] = 0; //@line 1986
 HEAP32[$30 + 8 >> 2] = 0; //@line 1986
 HEAP32[$30 + 12 >> 2] = 0; //@line 1986
 HEAP32[$30 + 16 >> 2] = 0; //@line 1986
 HEAP32[$30 + 20 >> 2] = 0; //@line 1986
 _gpio_init_out_ex($30, $15, 0); //@line 1987
 $31 = $0 + 580 | 0; //@line 1988
 HEAP32[$31 >> 2] = 0; //@line 1989
 HEAP32[$31 + 4 >> 2] = 0; //@line 1989
 HEAP32[$31 + 8 >> 2] = 0; //@line 1989
 HEAP32[$31 + 12 >> 2] = 0; //@line 1989
 HEAP32[$31 + 16 >> 2] = 0; //@line 1989
 HEAP32[$31 + 20 >> 2] = 0; //@line 1989
 _gpio_init_inout($31, $16, 0, 0, 0); //@line 1990
 $32 = $0 + 604 | 0; //@line 1991
 HEAP32[$32 >> 2] = 0; //@line 1992
 HEAP32[$32 + 4 >> 2] = 0; //@line 1992
 HEAP32[$32 + 8 >> 2] = 0; //@line 1992
 HEAP32[$32 + 12 >> 2] = 0; //@line 1992
 HEAP32[$32 + 16 >> 2] = 0; //@line 1992
 HEAP32[$32 + 20 >> 2] = 0; //@line 1992
 _gpio_init_out($32, $17); //@line 1993
 $33 = $0 + 628 | 0; //@line 1994
 HEAP32[$33 >> 2] = 0; //@line 1995
 HEAP32[$33 + 4 >> 2] = 0; //@line 1995
 HEAP32[$33 + 8 >> 2] = 0; //@line 1995
 HEAP32[$33 + 12 >> 2] = 0; //@line 1995
 HEAP32[$33 + 16 >> 2] = 0; //@line 1995
 HEAP32[$33 + 20 >> 2] = 0; //@line 1995
 _gpio_init_out($33, $18); //@line 1996
 $34 = $0 + 1048 | 0; //@line 1997
 $AsyncCtx11 = _emscripten_alloc_async_context(52, sp) | 0; //@line 1998
 __ZN4mbed10TimerEventC2Ev($34); //@line 1999
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 97; //@line 2002
  HEAP32[$AsyncCtx11 + 4 >> 2] = $34; //@line 2004
  HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 2006
  HEAP32[$AsyncCtx11 + 12 >> 2] = $16; //@line 2008
  HEAP32[$AsyncCtx11 + 16 >> 2] = $17; //@line 2010
  HEAP32[$AsyncCtx11 + 20 >> 2] = $12; //@line 2012
  HEAP32[$AsyncCtx11 + 24 >> 2] = $13; //@line 2014
  HEAP32[$AsyncCtx11 + 28 >> 2] = $15; //@line 2016
  HEAP32[$AsyncCtx11 + 32 >> 2] = $14; //@line 2018
  HEAP32[$AsyncCtx11 + 36 >> 2] = $18; //@line 2020
  HEAP32[$AsyncCtx11 + 40 >> 2] = $10; //@line 2022
  HEAP32[$AsyncCtx11 + 44 >> 2] = $11; //@line 2024
  HEAP32[$AsyncCtx11 + 48 >> 2] = $33; //@line 2026
  sp = STACKTOP; //@line 2027
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 2030
 $47 = $0 + 1088 | 0; //@line 2031
 HEAP32[$47 >> 2] = 0; //@line 2032
 HEAP32[$47 + 4 >> 2] = 0; //@line 2032
 HEAP32[$47 + 8 >> 2] = 0; //@line 2032
 HEAP32[$47 + 12 >> 2] = 0; //@line 2032
 HEAP8[$0 + 1104 >> 0] = 1; //@line 2034
 HEAP32[$34 >> 2] = 620; //@line 2035
 $49 = $0 + 1112 | 0; //@line 2036
 $AsyncCtx7 = _emscripten_alloc_async_context(52, sp) | 0; //@line 2037
 __ZN4mbed10TimerEventC2Ev($49); //@line 2038
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 98; //@line 2041
  HEAP32[$AsyncCtx7 + 4 >> 2] = $49; //@line 2043
  HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 2045
  HEAP32[$AsyncCtx7 + 12 >> 2] = $16; //@line 2047
  HEAP32[$AsyncCtx7 + 16 >> 2] = $17; //@line 2049
  HEAP32[$AsyncCtx7 + 20 >> 2] = $12; //@line 2051
  HEAP32[$AsyncCtx7 + 24 >> 2] = $13; //@line 2053
  HEAP32[$AsyncCtx7 + 28 >> 2] = $15; //@line 2055
  HEAP32[$AsyncCtx7 + 32 >> 2] = $14; //@line 2057
  HEAP32[$AsyncCtx7 + 36 >> 2] = $18; //@line 2059
  HEAP32[$AsyncCtx7 + 40 >> 2] = $10; //@line 2061
  HEAP32[$AsyncCtx7 + 44 >> 2] = $11; //@line 2063
  HEAP32[$AsyncCtx7 + 48 >> 2] = $33; //@line 2065
  sp = STACKTOP; //@line 2066
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 2069
 $62 = $0 + 1152 | 0; //@line 2070
 HEAP32[$62 >> 2] = 0; //@line 2071
 HEAP32[$62 + 4 >> 2] = 0; //@line 2071
 HEAP32[$62 + 8 >> 2] = 0; //@line 2071
 HEAP32[$62 + 12 >> 2] = 0; //@line 2071
 HEAP8[$0 + 1168 >> 0] = 1; //@line 2073
 HEAP32[$49 >> 2] = 620; //@line 2074
 $64 = $0 + 1176 | 0; //@line 2075
 $AsyncCtx3 = _emscripten_alloc_async_context(52, sp) | 0; //@line 2076
 __ZN4mbed10TimerEventC2Ev($64); //@line 2077
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 99; //@line 2080
  HEAP32[$AsyncCtx3 + 4 >> 2] = $64; //@line 2082
  HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 2084
  HEAP32[$AsyncCtx3 + 12 >> 2] = $16; //@line 2086
  HEAP32[$AsyncCtx3 + 16 >> 2] = $17; //@line 2088
  HEAP32[$AsyncCtx3 + 20 >> 2] = $12; //@line 2090
  HEAP32[$AsyncCtx3 + 24 >> 2] = $13; //@line 2092
  HEAP32[$AsyncCtx3 + 28 >> 2] = $15; //@line 2094
  HEAP32[$AsyncCtx3 + 32 >> 2] = $14; //@line 2096
  HEAP32[$AsyncCtx3 + 36 >> 2] = $18; //@line 2098
  HEAP32[$AsyncCtx3 + 40 >> 2] = $10; //@line 2100
  HEAP32[$AsyncCtx3 + 44 >> 2] = $11; //@line 2102
  HEAP32[$AsyncCtx3 + 48 >> 2] = $33; //@line 2104
  sp = STACKTOP; //@line 2105
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2108
 $77 = $0 + 1216 | 0; //@line 2109
 HEAP32[$77 >> 2] = 0; //@line 2110
 HEAP32[$77 + 4 >> 2] = 0; //@line 2110
 HEAP32[$77 + 8 >> 2] = 0; //@line 2110
 HEAP32[$77 + 12 >> 2] = 0; //@line 2110
 HEAP8[$0 + 1232 >> 0] = 1; //@line 2112
 HEAP32[$64 >> 2] = 620; //@line 2113
 $79 = $0 + 1240 | 0; //@line 2114
 $AsyncCtx = _emscripten_alloc_async_context(52, sp) | 0; //@line 2115
 __ZN4mbed10TimerEventC2Ev($79); //@line 2116
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 100; //@line 2119
  HEAP32[$AsyncCtx + 4 >> 2] = $79; //@line 2121
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 2123
  HEAP32[$AsyncCtx + 12 >> 2] = $16; //@line 2125
  HEAP32[$AsyncCtx + 16 >> 2] = $17; //@line 2127
  HEAP32[$AsyncCtx + 20 >> 2] = $12; //@line 2129
  HEAP32[$AsyncCtx + 24 >> 2] = $13; //@line 2131
  HEAP32[$AsyncCtx + 28 >> 2] = $15; //@line 2133
  HEAP32[$AsyncCtx + 32 >> 2] = $14; //@line 2135
  HEAP32[$AsyncCtx + 36 >> 2] = $18; //@line 2137
  HEAP32[$AsyncCtx + 40 >> 2] = $10; //@line 2139
  HEAP32[$AsyncCtx + 44 >> 2] = $11; //@line 2141
  HEAP32[$AsyncCtx + 48 >> 2] = $33; //@line 2143
  sp = STACKTOP; //@line 2144
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2147
 $92 = $0 + 1280 | 0; //@line 2148
 HEAP32[$92 >> 2] = 0; //@line 2149
 HEAP32[$92 + 4 >> 2] = 0; //@line 2149
 HEAP32[$92 + 8 >> 2] = 0; //@line 2149
 HEAP32[$92 + 12 >> 2] = 0; //@line 2149
 HEAP8[$0 + 1296 >> 0] = 1; //@line 2151
 HEAP32[$79 >> 2] = 620; //@line 2152
 HEAP32[$0 + 668 >> 2] = $16; //@line 2154
 HEAP32[$0 + 672 >> 2] = $17; //@line 2156
 HEAP32[$0 + 652 >> 2] = $12; //@line 2158
 HEAP32[$0 + 656 >> 2] = $13; //@line 2160
 HEAP32[$0 + 664 >> 2] = $15; //@line 2162
 HEAP32[$0 + 660 >> 2] = $14; //@line 2164
 HEAP32[$0 + 676 >> 2] = $18; //@line 2166
 HEAP32[$0 + 680 >> 2] = $10; //@line 2168
 HEAP32[$0 + 684 >> 2] = $11; //@line 2170
 HEAP32[$0 + 788 >> 2] = 0; //@line 2172
 if (($18 | 0) == -1) {
  $106 = _emscripten_asm_const_ii(7, $0 | 0) | 0; //@line 2175
  return;
 }
 _emscripten_asm_const_iii(5, HEAP32[$33 >> 2] | 0, 1) | 0; //@line 2179
 $106 = _emscripten_asm_const_ii(7, $0 | 0) | 0; //@line 2180
 return;
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_239($0) {
 $0 = $0 | 0;
 var $$pre$i$i = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 14814
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14820
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14822
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14824
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 14826
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 14828
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 14830
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 14832
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 14834
 $$pre$i$i = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 14835
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = $$pre$i$i; //@line 14837
 if ($$pre$i$i | 0) {
  $24 = HEAP32[$$pre$i$i + 8 >> 2] | 0; //@line 14841
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 14842
  FUNCTION_TABLE_vi[$24 & 1023]($14); //@line 14843
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 184; //@line 14846
   $25 = $ReallocAsyncCtx3 + 4 | 0; //@line 14847
   HEAP32[$25 >> 2] = $6; //@line 14848
   $26 = $ReallocAsyncCtx3 + 8 | 0; //@line 14849
   HEAP32[$26 >> 2] = $8; //@line 14850
   $27 = $ReallocAsyncCtx3 + 12 | 0; //@line 14851
   HEAP32[$27 >> 2] = $10; //@line 14852
   $28 = $ReallocAsyncCtx3 + 16 | 0; //@line 14853
   HEAP32[$28 >> 2] = $12; //@line 14854
   $29 = $ReallocAsyncCtx3 + 20 | 0; //@line 14855
   HEAP32[$29 >> 2] = $14; //@line 14856
   $30 = $ReallocAsyncCtx3 + 24 | 0; //@line 14857
   HEAP32[$30 >> 2] = $16; //@line 14858
   $31 = $ReallocAsyncCtx3 + 28 | 0; //@line 14859
   HEAP32[$31 >> 2] = $18; //@line 14860
   $32 = $ReallocAsyncCtx3 + 32 | 0; //@line 14861
   HEAP32[$32 >> 2] = $20; //@line 14862
   sp = STACKTOP; //@line 14863
   return;
  }
  ___async_unwind = 0; //@line 14866
  HEAP32[$ReallocAsyncCtx3 >> 2] = 184; //@line 14867
  $25 = $ReallocAsyncCtx3 + 4 | 0; //@line 14868
  HEAP32[$25 >> 2] = $6; //@line 14869
  $26 = $ReallocAsyncCtx3 + 8 | 0; //@line 14870
  HEAP32[$26 >> 2] = $8; //@line 14871
  $27 = $ReallocAsyncCtx3 + 12 | 0; //@line 14872
  HEAP32[$27 >> 2] = $10; //@line 14873
  $28 = $ReallocAsyncCtx3 + 16 | 0; //@line 14874
  HEAP32[$28 >> 2] = $12; //@line 14875
  $29 = $ReallocAsyncCtx3 + 20 | 0; //@line 14876
  HEAP32[$29 >> 2] = $14; //@line 14877
  $30 = $ReallocAsyncCtx3 + 24 | 0; //@line 14878
  HEAP32[$30 >> 2] = $16; //@line 14879
  $31 = $ReallocAsyncCtx3 + 28 | 0; //@line 14880
  HEAP32[$31 >> 2] = $18; //@line 14881
  $32 = $ReallocAsyncCtx3 + 32 | 0; //@line 14882
  HEAP32[$32 >> 2] = $20; //@line 14883
  sp = STACKTOP; //@line 14884
  return;
 }
 $33 = $16 + 12 | 0; //@line 14887
 HEAP32[$16 >> 2] = 6; //@line 14888
 HEAP32[$16 + 4 >> 2] = 0; //@line 14890
 HEAP32[$16 + 8 >> 2] = $6; //@line 14892
 HEAP32[$33 >> 2] = 836; //@line 14893
 $34 = $6 + 2416 | 0; //@line 14894
 if (($34 | 0) == ($16 | 0)) {
  $63 = HEAP32[211] | 0; //@line 14898
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(32) | 0; //@line 14899
  FUNCTION_TABLE_vi[$63 & 1023]($16); //@line 14900
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 187; //@line 14903
   $64 = $ReallocAsyncCtx6 + 4 | 0; //@line 14904
   HEAP32[$64 >> 2] = $6; //@line 14905
   $65 = $ReallocAsyncCtx6 + 8 | 0; //@line 14906
   HEAP32[$65 >> 2] = $8; //@line 14907
   $66 = $ReallocAsyncCtx6 + 12 | 0; //@line 14908
   HEAP32[$66 >> 2] = $10; //@line 14909
   $67 = $ReallocAsyncCtx6 + 16 | 0; //@line 14910
   HEAP32[$67 >> 2] = $16; //@line 14911
   $68 = $ReallocAsyncCtx6 + 20 | 0; //@line 14912
   HEAP32[$68 >> 2] = $12; //@line 14913
   $69 = $ReallocAsyncCtx6 + 24 | 0; //@line 14914
   HEAP32[$69 >> 2] = $18; //@line 14915
   $70 = $ReallocAsyncCtx6 + 28 | 0; //@line 14916
   HEAP32[$70 >> 2] = $20; //@line 14917
   sp = STACKTOP; //@line 14918
   return;
  }
  ___async_unwind = 0; //@line 14921
  HEAP32[$ReallocAsyncCtx6 >> 2] = 187; //@line 14922
  $64 = $ReallocAsyncCtx6 + 4 | 0; //@line 14923
  HEAP32[$64 >> 2] = $6; //@line 14924
  $65 = $ReallocAsyncCtx6 + 8 | 0; //@line 14925
  HEAP32[$65 >> 2] = $8; //@line 14926
  $66 = $ReallocAsyncCtx6 + 12 | 0; //@line 14927
  HEAP32[$66 >> 2] = $10; //@line 14928
  $67 = $ReallocAsyncCtx6 + 16 | 0; //@line 14929
  HEAP32[$67 >> 2] = $16; //@line 14930
  $68 = $ReallocAsyncCtx6 + 20 | 0; //@line 14931
  HEAP32[$68 >> 2] = $12; //@line 14932
  $69 = $ReallocAsyncCtx6 + 24 | 0; //@line 14933
  HEAP32[$69 >> 2] = $18; //@line 14934
  $70 = $ReallocAsyncCtx6 + 28 | 0; //@line 14935
  HEAP32[$70 >> 2] = $20; //@line 14936
  sp = STACKTOP; //@line 14937
  return;
 }
 $36 = $6 + 2428 | 0; //@line 14940
 $37 = HEAP32[$36 >> 2] | 0; //@line 14941
 if (!$37) {
  $52 = HEAP32[210] | 0; //@line 14945
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(40) | 0; //@line 14946
  FUNCTION_TABLE_vii[$52 & 15]($34, $16); //@line 14947
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 186; //@line 14950
   $53 = $ReallocAsyncCtx5 + 4 | 0; //@line 14951
   HEAP32[$53 >> 2] = $6; //@line 14952
   $54 = $ReallocAsyncCtx5 + 8 | 0; //@line 14953
   HEAP32[$54 >> 2] = $8; //@line 14954
   $55 = $ReallocAsyncCtx5 + 12 | 0; //@line 14955
   HEAP32[$55 >> 2] = $10; //@line 14956
   $56 = $ReallocAsyncCtx5 + 16 | 0; //@line 14957
   HEAP32[$56 >> 2] = $33; //@line 14958
   $57 = $ReallocAsyncCtx5 + 20 | 0; //@line 14959
   HEAP32[$57 >> 2] = $36; //@line 14960
   $58 = $ReallocAsyncCtx5 + 24 | 0; //@line 14961
   HEAP32[$58 >> 2] = $16; //@line 14962
   $59 = $ReallocAsyncCtx5 + 28 | 0; //@line 14963
   HEAP32[$59 >> 2] = $12; //@line 14964
   $60 = $ReallocAsyncCtx5 + 32 | 0; //@line 14965
   HEAP32[$60 >> 2] = $18; //@line 14966
   $61 = $ReallocAsyncCtx5 + 36 | 0; //@line 14967
   HEAP32[$61 >> 2] = $20; //@line 14968
   sp = STACKTOP; //@line 14969
   return;
  }
  ___async_unwind = 0; //@line 14972
  HEAP32[$ReallocAsyncCtx5 >> 2] = 186; //@line 14973
  $53 = $ReallocAsyncCtx5 + 4 | 0; //@line 14974
  HEAP32[$53 >> 2] = $6; //@line 14975
  $54 = $ReallocAsyncCtx5 + 8 | 0; //@line 14976
  HEAP32[$54 >> 2] = $8; //@line 14977
  $55 = $ReallocAsyncCtx5 + 12 | 0; //@line 14978
  HEAP32[$55 >> 2] = $10; //@line 14979
  $56 = $ReallocAsyncCtx5 + 16 | 0; //@line 14980
  HEAP32[$56 >> 2] = $33; //@line 14981
  $57 = $ReallocAsyncCtx5 + 20 | 0; //@line 14982
  HEAP32[$57 >> 2] = $36; //@line 14983
  $58 = $ReallocAsyncCtx5 + 24 | 0; //@line 14984
  HEAP32[$58 >> 2] = $16; //@line 14985
  $59 = $ReallocAsyncCtx5 + 28 | 0; //@line 14986
  HEAP32[$59 >> 2] = $12; //@line 14987
  $60 = $ReallocAsyncCtx5 + 32 | 0; //@line 14988
  HEAP32[$60 >> 2] = $18; //@line 14989
  $61 = $ReallocAsyncCtx5 + 36 | 0; //@line 14990
  HEAP32[$61 >> 2] = $20; //@line 14991
  sp = STACKTOP; //@line 14992
  return;
 } else {
  $40 = HEAP32[$37 + 8 >> 2] | 0; //@line 14996
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(44) | 0; //@line 14997
  FUNCTION_TABLE_vi[$40 & 1023]($34); //@line 14998
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 185; //@line 15001
   $41 = $ReallocAsyncCtx4 + 4 | 0; //@line 15002
   HEAP32[$41 >> 2] = $33; //@line 15003
   $42 = $ReallocAsyncCtx4 + 8 | 0; //@line 15004
   HEAP32[$42 >> 2] = $6; //@line 15005
   $43 = $ReallocAsyncCtx4 + 12 | 0; //@line 15006
   HEAP32[$43 >> 2] = $8; //@line 15007
   $44 = $ReallocAsyncCtx4 + 16 | 0; //@line 15008
   HEAP32[$44 >> 2] = $10; //@line 15009
   $45 = $ReallocAsyncCtx4 + 20 | 0; //@line 15010
   HEAP32[$45 >> 2] = $36; //@line 15011
   $46 = $ReallocAsyncCtx4 + 24 | 0; //@line 15012
   HEAP32[$46 >> 2] = $34; //@line 15013
   $47 = $ReallocAsyncCtx4 + 28 | 0; //@line 15014
   HEAP32[$47 >> 2] = $16; //@line 15015
   $48 = $ReallocAsyncCtx4 + 32 | 0; //@line 15016
   HEAP32[$48 >> 2] = $12; //@line 15017
   $49 = $ReallocAsyncCtx4 + 36 | 0; //@line 15018
   HEAP32[$49 >> 2] = $18; //@line 15019
   $50 = $ReallocAsyncCtx4 + 40 | 0; //@line 15020
   HEAP32[$50 >> 2] = $20; //@line 15021
   sp = STACKTOP; //@line 15022
   return;
  }
  ___async_unwind = 0; //@line 15025
  HEAP32[$ReallocAsyncCtx4 >> 2] = 185; //@line 15026
  $41 = $ReallocAsyncCtx4 + 4 | 0; //@line 15027
  HEAP32[$41 >> 2] = $33; //@line 15028
  $42 = $ReallocAsyncCtx4 + 8 | 0; //@line 15029
  HEAP32[$42 >> 2] = $6; //@line 15030
  $43 = $ReallocAsyncCtx4 + 12 | 0; //@line 15031
  HEAP32[$43 >> 2] = $8; //@line 15032
  $44 = $ReallocAsyncCtx4 + 16 | 0; //@line 15033
  HEAP32[$44 >> 2] = $10; //@line 15034
  $45 = $ReallocAsyncCtx4 + 20 | 0; //@line 15035
  HEAP32[$45 >> 2] = $36; //@line 15036
  $46 = $ReallocAsyncCtx4 + 24 | 0; //@line 15037
  HEAP32[$46 >> 2] = $34; //@line 15038
  $47 = $ReallocAsyncCtx4 + 28 | 0; //@line 15039
  HEAP32[$47 >> 2] = $16; //@line 15040
  $48 = $ReallocAsyncCtx4 + 32 | 0; //@line 15041
  HEAP32[$48 >> 2] = $12; //@line 15042
  $49 = $ReallocAsyncCtx4 + 36 | 0; //@line 15043
  HEAP32[$49 >> 2] = $18; //@line 15044
  $50 = $ReallocAsyncCtx4 + 40 | 0; //@line 15045
  HEAP32[$50 >> 2] = $20; //@line 15046
  sp = STACKTOP; //@line 15047
  return;
 }
}
function _mbedtls_aes_crypt_cbc($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$04056 = 0, $$04255 = 0, $$044 = 0, $$04554 = 0, $$14160 = 0, $$14160$us = 0, $$14359 = 0, $$14359$us = 0, $$14658 = 0, $$14658$us = 0, $10 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $127 = 0, $13 = 0, $131 = 0, $135 = 0, $139 = 0, $14 = 0, $143 = 0, $147 = 0, $15 = 0, $151 = 0, $155 = 0, $159 = 0, $16 = 0, $163 = 0, $167 = 0, $17 = 0, $171 = 0, $175 = 0, $179 = 0, $18 = 0, $183 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $6 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 1715
 STACKTOP = STACKTOP + 16 | 0; //@line 1716
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 1716
 $6 = sp; //@line 1717
 if ($2 & 15 | 0) {
  $$044 = -34; //@line 1721
  STACKTOP = sp; //@line 1722
  return $$044 | 0; //@line 1722
 }
 $10 = ($2 | 0) == 0; //@line 1725
 if (!$1) {
  if ($10) {
   $$044 = 0; //@line 1728
   STACKTOP = sp; //@line 1729
   return $$044 | 0; //@line 1729
  }
  $109 = $3 + 1 | 0; //@line 1731
  $110 = $3 + 2 | 0; //@line 1732
  $111 = $3 + 3 | 0; //@line 1733
  $112 = $3 + 4 | 0; //@line 1734
  $113 = $3 + 5 | 0; //@line 1735
  $114 = $3 + 6 | 0; //@line 1736
  $115 = $3 + 7 | 0; //@line 1737
  $116 = $3 + 8 | 0; //@line 1738
  $117 = $3 + 9 | 0; //@line 1739
  $118 = $3 + 10 | 0; //@line 1740
  $119 = $3 + 11 | 0; //@line 1741
  $120 = $3 + 12 | 0; //@line 1742
  $121 = $3 + 13 | 0; //@line 1743
  $122 = $3 + 14 | 0; //@line 1744
  $123 = $3 + 15 | 0; //@line 1745
  $$04056 = $5; //@line 1746
  $$04255 = $4; //@line 1746
  $$04554 = $2; //@line 1746
  while (1) {
   dest = $6; //@line 1748
   src = $$04255; //@line 1748
   stop = dest + 16 | 0; //@line 1748
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 1748
    dest = dest + 1 | 0; //@line 1748
    src = src + 1 | 0; //@line 1748
   } while ((dest | 0) < (stop | 0));
   _mbedtls_internal_aes_decrypt($0, $$04255, $$04056) | 0; //@line 1749
   HEAP8[$$04056 >> 0] = HEAP8[$3 >> 0] ^ HEAP8[$$04056 >> 0]; //@line 1753
   $127 = $$04056 + 1 | 0; //@line 1754
   HEAP8[$127 >> 0] = HEAP8[$109 >> 0] ^ HEAP8[$127 >> 0]; //@line 1758
   $131 = $$04056 + 2 | 0; //@line 1759
   HEAP8[$131 >> 0] = HEAP8[$110 >> 0] ^ HEAP8[$131 >> 0]; //@line 1763
   $135 = $$04056 + 3 | 0; //@line 1764
   HEAP8[$135 >> 0] = HEAP8[$111 >> 0] ^ HEAP8[$135 >> 0]; //@line 1768
   $139 = $$04056 + 4 | 0; //@line 1769
   HEAP8[$139 >> 0] = HEAP8[$112 >> 0] ^ HEAP8[$139 >> 0]; //@line 1773
   $143 = $$04056 + 5 | 0; //@line 1774
   HEAP8[$143 >> 0] = HEAP8[$113 >> 0] ^ HEAP8[$143 >> 0]; //@line 1778
   $147 = $$04056 + 6 | 0; //@line 1779
   HEAP8[$147 >> 0] = HEAP8[$114 >> 0] ^ HEAP8[$147 >> 0]; //@line 1783
   $151 = $$04056 + 7 | 0; //@line 1784
   HEAP8[$151 >> 0] = HEAP8[$115 >> 0] ^ HEAP8[$151 >> 0]; //@line 1788
   $155 = $$04056 + 8 | 0; //@line 1789
   HEAP8[$155 >> 0] = HEAP8[$116 >> 0] ^ HEAP8[$155 >> 0]; //@line 1793
   $159 = $$04056 + 9 | 0; //@line 1794
   HEAP8[$159 >> 0] = HEAP8[$117 >> 0] ^ HEAP8[$159 >> 0]; //@line 1798
   $163 = $$04056 + 10 | 0; //@line 1799
   HEAP8[$163 >> 0] = HEAP8[$118 >> 0] ^ HEAP8[$163 >> 0]; //@line 1803
   $167 = $$04056 + 11 | 0; //@line 1804
   HEAP8[$167 >> 0] = HEAP8[$119 >> 0] ^ HEAP8[$167 >> 0]; //@line 1808
   $171 = $$04056 + 12 | 0; //@line 1809
   HEAP8[$171 >> 0] = HEAP8[$120 >> 0] ^ HEAP8[$171 >> 0]; //@line 1813
   $175 = $$04056 + 13 | 0; //@line 1814
   HEAP8[$175 >> 0] = HEAP8[$121 >> 0] ^ HEAP8[$175 >> 0]; //@line 1818
   $179 = $$04056 + 14 | 0; //@line 1819
   HEAP8[$179 >> 0] = HEAP8[$122 >> 0] ^ HEAP8[$179 >> 0]; //@line 1823
   $183 = $$04056 + 15 | 0; //@line 1824
   HEAP8[$183 >> 0] = HEAP8[$123 >> 0] ^ HEAP8[$183 >> 0]; //@line 1828
   dest = $3; //@line 1829
   src = $6; //@line 1829
   stop = dest + 16 | 0; //@line 1829
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 1829
    dest = dest + 1 | 0; //@line 1829
    src = src + 1 | 0; //@line 1829
   } while ((dest | 0) < (stop | 0));
   $$04554 = $$04554 + -16 | 0; //@line 1832
   if (!$$04554) {
    $$044 = 0; //@line 1835
    break;
   } else {
    $$04056 = $$04056 + 16 | 0; //@line 1838
    $$04255 = $$04255 + 16 | 0; //@line 1838
   }
  }
  STACKTOP = sp; //@line 1841
  return $$044 | 0; //@line 1841
 }
 if ($10) {
  $$044 = 0; //@line 1844
  STACKTOP = sp; //@line 1845
  return $$044 | 0; //@line 1845
 }
 $12 = $3 + 1 | 0; //@line 1848
 $13 = $3 + 2 | 0; //@line 1849
 $14 = $3 + 3 | 0; //@line 1850
 $15 = $3 + 4 | 0; //@line 1851
 $16 = $3 + 5 | 0; //@line 1852
 $17 = $3 + 6 | 0; //@line 1853
 $18 = $3 + 7 | 0; //@line 1854
 $19 = $3 + 8 | 0; //@line 1855
 $20 = $3 + 9 | 0; //@line 1856
 $21 = $3 + 10 | 0; //@line 1857
 $22 = $3 + 11 | 0; //@line 1858
 $23 = $3 + 12 | 0; //@line 1859
 $24 = $3 + 13 | 0; //@line 1860
 $25 = $3 + 14 | 0; //@line 1861
 $26 = $3 + 15 | 0; //@line 1862
 if (($1 | 0) == 1) {
  $$14160$us = $5; //@line 1864
  $$14359$us = $4; //@line 1864
  $$14658$us = $2; //@line 1864
  while (1) {
   HEAP8[$$14160$us >> 0] = HEAP8[$3 >> 0] ^ HEAP8[$$14359$us >> 0]; //@line 1869
   HEAP8[$$14160$us + 1 >> 0] = HEAP8[$12 >> 0] ^ HEAP8[$$14359$us + 1 >> 0]; //@line 1875
   HEAP8[$$14160$us + 2 >> 0] = HEAP8[$13 >> 0] ^ HEAP8[$$14359$us + 2 >> 0]; //@line 1881
   HEAP8[$$14160$us + 3 >> 0] = HEAP8[$14 >> 0] ^ HEAP8[$$14359$us + 3 >> 0]; //@line 1887
   HEAP8[$$14160$us + 4 >> 0] = HEAP8[$15 >> 0] ^ HEAP8[$$14359$us + 4 >> 0]; //@line 1893
   HEAP8[$$14160$us + 5 >> 0] = HEAP8[$16 >> 0] ^ HEAP8[$$14359$us + 5 >> 0]; //@line 1899
   HEAP8[$$14160$us + 6 >> 0] = HEAP8[$17 >> 0] ^ HEAP8[$$14359$us + 6 >> 0]; //@line 1905
   HEAP8[$$14160$us + 7 >> 0] = HEAP8[$18 >> 0] ^ HEAP8[$$14359$us + 7 >> 0]; //@line 1911
   HEAP8[$$14160$us + 8 >> 0] = HEAP8[$19 >> 0] ^ HEAP8[$$14359$us + 8 >> 0]; //@line 1917
   HEAP8[$$14160$us + 9 >> 0] = HEAP8[$20 >> 0] ^ HEAP8[$$14359$us + 9 >> 0]; //@line 1923
   HEAP8[$$14160$us + 10 >> 0] = HEAP8[$21 >> 0] ^ HEAP8[$$14359$us + 10 >> 0]; //@line 1929
   HEAP8[$$14160$us + 11 >> 0] = HEAP8[$22 >> 0] ^ HEAP8[$$14359$us + 11 >> 0]; //@line 1935
   HEAP8[$$14160$us + 12 >> 0] = HEAP8[$23 >> 0] ^ HEAP8[$$14359$us + 12 >> 0]; //@line 1941
   HEAP8[$$14160$us + 13 >> 0] = HEAP8[$24 >> 0] ^ HEAP8[$$14359$us + 13 >> 0]; //@line 1947
   HEAP8[$$14160$us + 14 >> 0] = HEAP8[$25 >> 0] ^ HEAP8[$$14359$us + 14 >> 0]; //@line 1953
   HEAP8[$$14160$us + 15 >> 0] = HEAP8[$26 >> 0] ^ HEAP8[$$14359$us + 15 >> 0]; //@line 1959
   _mbedtls_internal_aes_encrypt($0, $$14160$us, $$14160$us) | 0; //@line 1960
   dest = $3; //@line 1961
   src = $$14160$us; //@line 1961
   stop = dest + 16 | 0; //@line 1961
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 1961
    dest = dest + 1 | 0; //@line 1961
    src = src + 1 | 0; //@line 1961
   } while ((dest | 0) < (stop | 0));
   $$14658$us = $$14658$us + -16 | 0; //@line 1964
   if (!$$14658$us) {
    $$044 = 0; //@line 1967
    break;
   } else {
    $$14160$us = $$14160$us + 16 | 0; //@line 1970
    $$14359$us = $$14359$us + 16 | 0; //@line 1970
   }
  }
  STACKTOP = sp; //@line 1973
  return $$044 | 0; //@line 1973
 } else {
  $$14160 = $5; //@line 1975
  $$14359 = $4; //@line 1975
  $$14658 = $2; //@line 1975
  while (1) {
   HEAP8[$$14160 >> 0] = HEAP8[$3 >> 0] ^ HEAP8[$$14359 >> 0]; //@line 1980
   HEAP8[$$14160 + 1 >> 0] = HEAP8[$12 >> 0] ^ HEAP8[$$14359 + 1 >> 0]; //@line 1986
   HEAP8[$$14160 + 2 >> 0] = HEAP8[$13 >> 0] ^ HEAP8[$$14359 + 2 >> 0]; //@line 1992
   HEAP8[$$14160 + 3 >> 0] = HEAP8[$14 >> 0] ^ HEAP8[$$14359 + 3 >> 0]; //@line 1998
   HEAP8[$$14160 + 4 >> 0] = HEAP8[$15 >> 0] ^ HEAP8[$$14359 + 4 >> 0]; //@line 2004
   HEAP8[$$14160 + 5 >> 0] = HEAP8[$16 >> 0] ^ HEAP8[$$14359 + 5 >> 0]; //@line 2010
   HEAP8[$$14160 + 6 >> 0] = HEAP8[$17 >> 0] ^ HEAP8[$$14359 + 6 >> 0]; //@line 2016
   HEAP8[$$14160 + 7 >> 0] = HEAP8[$18 >> 0] ^ HEAP8[$$14359 + 7 >> 0]; //@line 2022
   HEAP8[$$14160 + 8 >> 0] = HEAP8[$19 >> 0] ^ HEAP8[$$14359 + 8 >> 0]; //@line 2028
   HEAP8[$$14160 + 9 >> 0] = HEAP8[$20 >> 0] ^ HEAP8[$$14359 + 9 >> 0]; //@line 2034
   HEAP8[$$14160 + 10 >> 0] = HEAP8[$21 >> 0] ^ HEAP8[$$14359 + 10 >> 0]; //@line 2040
   HEAP8[$$14160 + 11 >> 0] = HEAP8[$22 >> 0] ^ HEAP8[$$14359 + 11 >> 0]; //@line 2046
   HEAP8[$$14160 + 12 >> 0] = HEAP8[$23 >> 0] ^ HEAP8[$$14359 + 12 >> 0]; //@line 2052
   HEAP8[$$14160 + 13 >> 0] = HEAP8[$24 >> 0] ^ HEAP8[$$14359 + 13 >> 0]; //@line 2058
   HEAP8[$$14160 + 14 >> 0] = HEAP8[$25 >> 0] ^ HEAP8[$$14359 + 14 >> 0]; //@line 2064
   HEAP8[$$14160 + 15 >> 0] = HEAP8[$26 >> 0] ^ HEAP8[$$14359 + 15 >> 0]; //@line 2070
   _mbedtls_internal_aes_decrypt($0, $$14160, $$14160) | 0; //@line 2071
   dest = $3; //@line 2072
   src = $$14160; //@line 2072
   stop = dest + 16 | 0; //@line 2072
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 2072
    dest = dest + 1 | 0; //@line 2072
    src = src + 1 | 0; //@line 2072
   } while ((dest | 0) < (stop | 0));
   $$14658 = $$14658 + -16 | 0; //@line 2075
   if (!$$14658) {
    $$044 = 0; //@line 2078
    break;
   } else {
    $$14160 = $$14160 + 16 | 0; //@line 2081
    $$14359 = $$14359 + 16 | 0; //@line 2081
   }
  }
  STACKTOP = sp; //@line 2084
  return $$044 | 0; //@line 2084
 }
 return 0; //@line 2086
}
function _schedule_interrupt($0) {
 $0 = $0 | 0;
 var $$0$i = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $104 = 0, $109 = 0, $11 = 0, $112 = 0, $114 = 0, $117 = 0, $118 = 0, $120 = 0, $123 = 0, $131 = 0, $132 = 0, $133 = 0, $135 = 0, $137 = 0, $14 = 0, $142 = 0, $149 = 0, $153 = 0, $156 = 0, $158 = 0, $161 = 0, $163 = 0, $170 = 0, $171 = 0, $174 = 0, $176 = 0, $178 = 0, $184 = 0, $185 = 0, $189 = 0, $19 = 0, $197 = 0, $2 = 0, $205 = 0, $208 = 0, $21 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $35 = 0, $36 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $53 = 0, $54 = 0, $55 = 0, $57 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $65 = 0, $67 = 0, $68 = 0, $74 = 0, $75 = 0, $76 = 0, $85 = 0, $86 = 0, $87 = 0, $89 = 0, $93 = 0, $94 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx18 = 0, $AsyncCtx22 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 5869
 $1 = $0 + 4 | 0; //@line 5870
 $2 = HEAP32[$1 >> 2] | 0; //@line 5871
 $5 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 5874
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 5875
 $6 = FUNCTION_TABLE_i[$5 & 7]() | 0; //@line 5876
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 625; //@line 5879
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 5881
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 5883
  HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 5885
  sp = STACKTOP; //@line 5886
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 5889
 $10 = HEAP32[$1 >> 2] | 0; //@line 5890
 $11 = $10 + 32 | 0; //@line 5891
 if (($6 | 0) != (HEAP32[$11 >> 2] | 0)) {
  $14 = $2 + 32 | 0; //@line 5895
  $19 = $6 - (HEAP32[$14 >> 2] | 0) & HEAP32[$2 + 12 >> 2]; //@line 5900
  HEAP32[$14 >> 2] = $6; //@line 5901
  $21 = HEAP32[$2 + 8 >> 2] | 0; //@line 5903
  do {
   if (($21 | 0) == 1e6) {
    $100 = $19; //@line 5907
    $101 = 0; //@line 5907
   } else {
    $24 = HEAP8[$2 + 57 >> 0] | 0; //@line 5910
    $26 = ___muldi3($19 | 0, 0, 1e6, 0) | 0; //@line 5912
    $27 = tempRet0; //@line 5913
    if (!($24 << 24 >> 24)) {
     $61 = ___udivdi3($26 | 0, $27 | 0, $21 | 0, 0) | 0; //@line 5915
     $62 = tempRet0; //@line 5916
     $63 = ___muldi3($61 | 0, $62 | 0, $21 | 0, 0) | 0; //@line 5917
     $65 = _i64Subtract($26 | 0, $27 | 0, $63 | 0, tempRet0 | 0) | 0; //@line 5919
     $67 = $2 + 40 | 0; //@line 5921
     $68 = $67; //@line 5922
     $74 = _i64Add($65 | 0, tempRet0 | 0, HEAP32[$68 >> 2] | 0, HEAP32[$68 + 4 >> 2] | 0) | 0; //@line 5928
     $75 = tempRet0; //@line 5929
     $76 = $67; //@line 5930
     HEAP32[$76 >> 2] = $74; //@line 5932
     HEAP32[$76 + 4 >> 2] = $75; //@line 5935
     if ($75 >>> 0 < 0 | ($75 | 0) == 0 & $74 >>> 0 < $21 >>> 0) {
      $100 = $61; //@line 5942
      $101 = $62; //@line 5942
      break;
     }
     $85 = _i64Add($61 | 0, $62 | 0, 1, 0) | 0; //@line 5945
     $86 = tempRet0; //@line 5946
     $87 = _i64Subtract($74 | 0, $75 | 0, $21 | 0, 0) | 0; //@line 5947
     $89 = $67; //@line 5949
     HEAP32[$89 >> 2] = $87; //@line 5951
     HEAP32[$89 + 4 >> 2] = tempRet0; //@line 5954
     $100 = $85; //@line 5955
     $101 = $86; //@line 5955
     break;
    } else {
     $28 = $24 & 255; //@line 5958
     $29 = _bitshift64Lshr($26 | 0, $27 | 0, $28 | 0) | 0; //@line 5959
     $30 = tempRet0; //@line 5960
     $31 = _bitshift64Shl($29 | 0, $30 | 0, $28 | 0) | 0; //@line 5961
     $33 = _i64Subtract($26 | 0, $27 | 0, $31 | 0, tempRet0 | 0) | 0; //@line 5963
     $35 = $2 + 40 | 0; //@line 5965
     $36 = $35; //@line 5966
     $42 = _i64Add(HEAP32[$36 >> 2] | 0, HEAP32[$36 + 4 >> 2] | 0, $33 | 0, tempRet0 | 0) | 0; //@line 5972
     $43 = tempRet0; //@line 5973
     $44 = $35; //@line 5974
     HEAP32[$44 >> 2] = $42; //@line 5976
     HEAP32[$44 + 4 >> 2] = $43; //@line 5979
     if ($43 >>> 0 < 0 | ($43 | 0) == 0 & $42 >>> 0 < $21 >>> 0) {
      $100 = $29; //@line 5986
      $101 = $30; //@line 5986
      break;
     }
     $53 = _i64Add($29 | 0, $30 | 0, 1, 0) | 0; //@line 5989
     $54 = tempRet0; //@line 5990
     $55 = _i64Subtract($42 | 0, $43 | 0, $21 | 0, 0) | 0; //@line 5991
     $57 = $35; //@line 5993
     HEAP32[$57 >> 2] = $55; //@line 5995
     HEAP32[$57 + 4 >> 2] = tempRet0; //@line 5998
     $100 = $53; //@line 5999
     $101 = $54; //@line 5999
     break;
    }
   }
  } while (0);
  $93 = $2 + 48 | 0; //@line 6004
  $94 = $93; //@line 6005
  $102 = _i64Add(HEAP32[$94 >> 2] | 0, HEAP32[$94 + 4 >> 2] | 0, $100 | 0, $101 | 0) | 0; //@line 6011
  $104 = $93; //@line 6013
  HEAP32[$104 >> 2] = $102; //@line 6015
  HEAP32[$104 + 4 >> 2] = tempRet0; //@line 6018
 }
 $109 = HEAP32[$10 + 4 >> 2] | 0; //@line 6021
 if (!$109) {
  $205 = (HEAP32[$2 + 16 >> 2] | 0) + (HEAP32[$2 + 32 >> 2] | 0) & HEAP32[$2 + 12 >> 2]; //@line 6031
  $208 = HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0; //@line 6034
  $AsyncCtx22 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6035
  FUNCTION_TABLE_vi[$208 & 1023]($205); //@line 6036
  if (___async) {
   HEAP32[$AsyncCtx22 >> 2] = 631; //@line 6039
   sp = STACKTOP; //@line 6040
   return;
  } else {
   _emscripten_free_async_context($AsyncCtx22 | 0); //@line 6043
   return;
  }
 }
 $112 = $10 + 48 | 0; //@line 6048
 $114 = HEAP32[$112 >> 2] | 0; //@line 6050
 $117 = HEAP32[$112 + 4 >> 2] | 0; //@line 6053
 $118 = $109; //@line 6054
 $120 = HEAP32[$118 >> 2] | 0; //@line 6056
 $123 = HEAP32[$118 + 4 >> 2] | 0; //@line 6059
 if (!($123 >>> 0 > $117 >>> 0 | ($123 | 0) == ($117 | 0) & $120 >>> 0 > $114 >>> 0)) {
  $131 = HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] | 0; //@line 6068
  $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6069
  FUNCTION_TABLE_v[$131 & 15](); //@line 6070
  if (___async) {
   HEAP32[$AsyncCtx3 >> 2] = 626; //@line 6073
   sp = STACKTOP; //@line 6074
   return;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 6077
  return;
 }
 $132 = _i64Subtract($120 | 0, $123 | 0, $114 | 0, $117 | 0) | 0; //@line 6080
 $133 = tempRet0; //@line 6081
 $135 = HEAP32[$10 + 16 >> 2] | 0; //@line 6083
 $137 = $10 + 24 | 0; //@line 6085
 $142 = HEAP32[$137 + 4 >> 2] | 0; //@line 6090
 do {
  if ($133 >>> 0 > $142 >>> 0 | (($133 | 0) == ($142 | 0) ? $132 >>> 0 > (HEAP32[$137 >> 2] | 0) >>> 0 : 0)) {
   $$0$i = $135; //@line 6098
  } else {
   $149 = HEAP32[$10 + 8 >> 2] | 0; //@line 6101
   if (($149 | 0) == 1e6) {
    $$0$i = $135 >>> 0 < $132 >>> 0 ? $135 : $132; //@line 6106
    break;
   }
   $153 = HEAP8[$10 + 57 >> 0] | 0; //@line 6110
   if (!($153 << 24 >> 24)) {
    $161 = ___muldi3($132 | 0, $133 | 0, $149 | 0, 0) | 0; //@line 6113
    $163 = ___udivdi3($161 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 6115
    $$0$i = $135 >>> 0 < $163 >>> 0 ? $135 : $163; //@line 6119
    break;
   } else {
    $156 = _bitshift64Shl($132 | 0, $133 | 0, $153 & 255 | 0) | 0; //@line 6123
    $158 = ___udivdi3($156 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 6125
    $$0$i = $135 >>> 0 < $158 >>> 0 ? $135 : $158; //@line 6129
    break;
   }
  }
 } while (0);
 $170 = (HEAP32[$11 >> 2] | 0) + $$0$i & HEAP32[$10 + 12 >> 2]; //@line 6138
 $171 = $2 + 32 | 0; //@line 6139
 $174 = HEAP32[$0 >> 2] | 0; //@line 6142
 if (($170 | 0) == (HEAP32[$171 >> 2] | 0)) {
  $176 = HEAP32[$174 + 20 >> 2] | 0; //@line 6145
  $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6146
  FUNCTION_TABLE_v[$176 & 15](); //@line 6147
  if (___async) {
   HEAP32[$AsyncCtx7 >> 2] = 627; //@line 6150
   sp = STACKTOP; //@line 6151
   return;
  }
  _emscripten_free_async_context($AsyncCtx7 | 0); //@line 6154
  return;
 }
 $178 = HEAP32[$174 + 16 >> 2] | 0; //@line 6158
 $AsyncCtx11 = _emscripten_alloc_async_context(16, sp) | 0; //@line 6159
 FUNCTION_TABLE_vi[$178 & 1023]($170); //@line 6160
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 628; //@line 6163
  HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 6165
  HEAP32[$AsyncCtx11 + 8 >> 2] = $171; //@line 6167
  HEAP32[$AsyncCtx11 + 12 >> 2] = $170; //@line 6169
  sp = STACKTOP; //@line 6170
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 6173
 $184 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 6176
 $AsyncCtx14 = _emscripten_alloc_async_context(16, sp) | 0; //@line 6177
 $185 = FUNCTION_TABLE_i[$184 & 7]() | 0; //@line 6178
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 629; //@line 6181
  HEAP32[$AsyncCtx14 + 4 >> 2] = $171; //@line 6183
  HEAP32[$AsyncCtx14 + 8 >> 2] = $170; //@line 6185
  HEAP32[$AsyncCtx14 + 12 >> 2] = $0; //@line 6187
  sp = STACKTOP; //@line 6188
  return;
 }
 _emscripten_free_async_context($AsyncCtx14 | 0); //@line 6191
 $189 = HEAP32[$171 >> 2] | 0; //@line 6192
 if ($170 >>> 0 > $189 >>> 0) {
  if (!($185 >>> 0 >= $170 >>> 0 | $185 >>> 0 < $189 >>> 0)) {
   return;
  }
 } else {
  if (!($185 >>> 0 >= $170 >>> 0 & $185 >>> 0 < $189 >>> 0)) {
   return;
  }
 }
 $197 = HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] | 0; //@line 6211
 $AsyncCtx18 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6212
 FUNCTION_TABLE_v[$197 & 15](); //@line 6213
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 630; //@line 6216
  sp = STACKTOP; //@line 6217
  return;
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 6220
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $15 = 0, $17 = 0, $22 = 0, $23 = 0, $26 = 0, $29 = 0, $40 = 0, $41 = 0, $45 = 0, $47 = 0, $5 = 0, $52 = 0, $53 = 0, $56 = 0, $59 = 0, $6 = 0, $64 = 0, $65 = 0, $69 = 0, $71 = 0, $76 = 0, $77 = 0, $80 = 0, $83 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx16 = 0, $AsyncCtx19 = 0, $AsyncCtx2 = 0, $AsyncCtx22 = 0, $AsyncCtx25 = 0, $AsyncCtx29 = 0, $AsyncCtx33 = 0, $AsyncCtx37 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 7664
 STACKTOP = STACKTOP + 32 | 0; //@line 7665
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 7665
 $vararg_buffer = sp; //@line 7666
 $1 = sp + 16 | 0; //@line 7667
 $5 = (HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($0) | 0) + 4 >> 2] | 0) == 0; //@line 7671
 $6 = __ZNK7LoRaMac21get_mcps_confirmationEv($0) | 0; //@line 7672
 if ($5) {
  HEAP32[$0 + 2552 >> 2] = HEAP32[$6 + 16 >> 2]; //@line 7677
  $10 = $0 + 2512 | 0; //@line 7678
  $11 = HEAP32[$10 >> 2] | 0; //@line 7679
  do {
   if ($11 | 0) {
    $15 = HEAP32[$0 + 3168 >> 2] | 0; //@line 7685
    $17 = HEAP32[$11 + 4 >> 2] | 0; //@line 7687
    $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 7688
    FUNCTION_TABLE_vii[$17 & 15]($1, $0 + 2500 | 0); //@line 7689
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 243; //@line 7692
     HEAP32[$AsyncCtx + 4 >> 2] = $10; //@line 7694
     HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 7696
     HEAP32[$AsyncCtx + 12 >> 2] = $15; //@line 7698
     HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 7700
     sp = STACKTOP; //@line 7701
     STACKTOP = sp; //@line 7702
     return;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 7704
    $22 = $1 + 12 | 0; //@line 7706
    HEAP32[$22 >> 2] = HEAP32[$10 >> 2]; //@line 7707
    $AsyncCtx25 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7708
    $23 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($15, $1, 2) | 0; //@line 7709
    if (___async) {
     HEAP32[$AsyncCtx25 >> 2] = 244; //@line 7712
     HEAP32[$AsyncCtx25 + 4 >> 2] = $22; //@line 7714
     HEAP32[$AsyncCtx25 + 8 >> 2] = $1; //@line 7716
     sp = STACKTOP; //@line 7717
     STACKTOP = sp; //@line 7718
     return;
    }
    _emscripten_free_async_context($AsyncCtx25 | 0); //@line 7720
    $26 = HEAP32[$22 >> 2] | 0; //@line 7721
    do {
     if ($26 | 0) {
      $29 = HEAP32[$26 + 8 >> 2] | 0; //@line 7726
      $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7727
      FUNCTION_TABLE_vi[$29 & 1023]($1); //@line 7728
      if (___async) {
       HEAP32[$AsyncCtx2 >> 2] = 245; //@line 7731
       HEAP32[$AsyncCtx2 + 4 >> 2] = $23; //@line 7733
       HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 7735
       sp = STACKTOP; //@line 7736
       STACKTOP = sp; //@line 7737
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7739
       break;
      }
     }
    } while (0);
    if (!$23) {
     $AsyncCtx37 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7746
     _mbed_assert_internal(12104, 12113, 775); //@line 7747
     if (___async) {
      HEAP32[$AsyncCtx37 >> 2] = 246; //@line 7750
      HEAP32[$AsyncCtx37 + 4 >> 2] = $1; //@line 7752
      sp = STACKTOP; //@line 7753
      STACKTOP = sp; //@line 7754
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx37 | 0); //@line 7756
      break;
     }
    }
   }
  } while (0);
  STACKTOP = sp; //@line 7762
  return;
 }
 HEAP32[$vararg_buffer >> 2] = HEAP32[$6 + 4 >> 2]; //@line 7766
 _mbed_tracef(2, 12211, 12342, $vararg_buffer); //@line 7767
 if ((HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($0) | 0) + 4 >> 2] | 0) == 2) {
  $40 = $0 + 2512 | 0; //@line 7773
  $41 = HEAP32[$40 >> 2] | 0; //@line 7774
  do {
   if ($41 | 0) {
    $45 = HEAP32[$0 + 3168 >> 2] | 0; //@line 7780
    $47 = HEAP32[$41 + 4 >> 2] | 0; //@line 7782
    $AsyncCtx5 = _emscripten_alloc_async_context(20, sp) | 0; //@line 7783
    FUNCTION_TABLE_vii[$47 & 15]($vararg_buffer, $0 + 2500 | 0); //@line 7784
    if (___async) {
     HEAP32[$AsyncCtx5 >> 2] = 247; //@line 7787
     HEAP32[$AsyncCtx5 + 4 >> 2] = $40; //@line 7789
     HEAP32[$AsyncCtx5 + 8 >> 2] = $vararg_buffer; //@line 7791
     HEAP32[$AsyncCtx5 + 12 >> 2] = $45; //@line 7793
     HEAP32[$AsyncCtx5 + 16 >> 2] = $vararg_buffer; //@line 7795
     sp = STACKTOP; //@line 7796
     STACKTOP = sp; //@line 7797
     return;
    }
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 7799
    $52 = $vararg_buffer + 12 | 0; //@line 7801
    HEAP32[$52 >> 2] = HEAP32[$40 >> 2]; //@line 7802
    $AsyncCtx22 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7803
    $53 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($45, $vararg_buffer, 3) | 0; //@line 7804
    if (___async) {
     HEAP32[$AsyncCtx22 >> 2] = 248; //@line 7807
     HEAP32[$AsyncCtx22 + 4 >> 2] = $52; //@line 7809
     HEAP32[$AsyncCtx22 + 8 >> 2] = $vararg_buffer; //@line 7811
     sp = STACKTOP; //@line 7812
     STACKTOP = sp; //@line 7813
     return;
    }
    _emscripten_free_async_context($AsyncCtx22 | 0); //@line 7815
    $56 = HEAP32[$52 >> 2] | 0; //@line 7816
    do {
     if ($56 | 0) {
      $59 = HEAP32[$56 + 8 >> 2] | 0; //@line 7821
      $AsyncCtx9 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7822
      FUNCTION_TABLE_vi[$59 & 1023]($vararg_buffer); //@line 7823
      if (___async) {
       HEAP32[$AsyncCtx9 >> 2] = 249; //@line 7826
       HEAP32[$AsyncCtx9 + 4 >> 2] = $53; //@line 7828
       HEAP32[$AsyncCtx9 + 8 >> 2] = $vararg_buffer; //@line 7830
       sp = STACKTOP; //@line 7831
       STACKTOP = sp; //@line 7832
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx9 | 0); //@line 7834
       break;
      }
     }
    } while (0);
    if (!$53) {
     $AsyncCtx33 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7841
     _mbed_assert_internal(12104, 12113, 775); //@line 7842
     if (___async) {
      HEAP32[$AsyncCtx33 >> 2] = 250; //@line 7845
      HEAP32[$AsyncCtx33 + 4 >> 2] = $vararg_buffer; //@line 7847
      sp = STACKTOP; //@line 7848
      STACKTOP = sp; //@line 7849
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx33 | 0); //@line 7851
      break;
     }
    }
   }
  } while (0);
  STACKTOP = sp; //@line 7857
  return;
 } else {
  $64 = $0 + 2512 | 0; //@line 7859
  $65 = HEAP32[$64 >> 2] | 0; //@line 7860
  do {
   if ($65 | 0) {
    $69 = HEAP32[$0 + 3168 >> 2] | 0; //@line 7866
    $71 = HEAP32[$65 + 4 >> 2] | 0; //@line 7868
    $AsyncCtx12 = _emscripten_alloc_async_context(20, sp) | 0; //@line 7869
    FUNCTION_TABLE_vii[$71 & 15]($vararg_buffer, $0 + 2500 | 0); //@line 7870
    if (___async) {
     HEAP32[$AsyncCtx12 >> 2] = 251; //@line 7873
     HEAP32[$AsyncCtx12 + 4 >> 2] = $64; //@line 7875
     HEAP32[$AsyncCtx12 + 8 >> 2] = $vararg_buffer; //@line 7877
     HEAP32[$AsyncCtx12 + 12 >> 2] = $69; //@line 7879
     HEAP32[$AsyncCtx12 + 16 >> 2] = $vararg_buffer; //@line 7881
     sp = STACKTOP; //@line 7882
     STACKTOP = sp; //@line 7883
     return;
    }
    _emscripten_free_async_context($AsyncCtx12 | 0); //@line 7885
    $76 = $vararg_buffer + 12 | 0; //@line 7887
    HEAP32[$76 >> 2] = HEAP32[$64 >> 2]; //@line 7888
    $AsyncCtx19 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7889
    $77 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($69, $vararg_buffer, 4) | 0; //@line 7890
    if (___async) {
     HEAP32[$AsyncCtx19 >> 2] = 252; //@line 7893
     HEAP32[$AsyncCtx19 + 4 >> 2] = $76; //@line 7895
     HEAP32[$AsyncCtx19 + 8 >> 2] = $vararg_buffer; //@line 7897
     sp = STACKTOP; //@line 7898
     STACKTOP = sp; //@line 7899
     return;
    }
    _emscripten_free_async_context($AsyncCtx19 | 0); //@line 7901
    $80 = HEAP32[$76 >> 2] | 0; //@line 7902
    do {
     if ($80 | 0) {
      $83 = HEAP32[$80 + 8 >> 2] | 0; //@line 7907
      $AsyncCtx16 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7908
      FUNCTION_TABLE_vi[$83 & 1023]($vararg_buffer); //@line 7909
      if (___async) {
       HEAP32[$AsyncCtx16 >> 2] = 253; //@line 7912
       HEAP32[$AsyncCtx16 + 4 >> 2] = $77; //@line 7914
       HEAP32[$AsyncCtx16 + 8 >> 2] = $vararg_buffer; //@line 7916
       sp = STACKTOP; //@line 7917
       STACKTOP = sp; //@line 7918
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx16 | 0); //@line 7920
       break;
      }
     }
    } while (0);
    if (!$77) {
     $AsyncCtx29 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7927
     _mbed_assert_internal(12104, 12113, 775); //@line 7928
     if (___async) {
      HEAP32[$AsyncCtx29 >> 2] = 254; //@line 7931
      HEAP32[$AsyncCtx29 + 4 >> 2] = $vararg_buffer; //@line 7933
      sp = STACKTOP; //@line 7934
      STACKTOP = sp; //@line 7935
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx29 | 0); //@line 7937
      break;
     }
    }
   }
  } while (0);
  STACKTOP = sp; //@line 7943
  return;
 }
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_241($0) {
 $0 = $0 | 0;
 var $$pre123 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 15244
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15246
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15248
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15250
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15252
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15254
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 15256
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 15258
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 15260
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 15262
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 15264
 $$pre123 = HEAP32[$2 >> 2] | 0; //@line 15265
 if ($$pre123 | 0) {
  $23 = HEAP32[$$pre123 + 4 >> 2] | 0; //@line 15269
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(40) | 0; //@line 15270
  FUNCTION_TABLE_vii[$23 & 15]($12, $14); //@line 15271
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 186; //@line 15274
   $24 = $ReallocAsyncCtx5 + 4 | 0; //@line 15275
   HEAP32[$24 >> 2] = $4; //@line 15276
   $25 = $ReallocAsyncCtx5 + 8 | 0; //@line 15277
   HEAP32[$25 >> 2] = $6; //@line 15278
   $26 = $ReallocAsyncCtx5 + 12 | 0; //@line 15279
   HEAP32[$26 >> 2] = $8; //@line 15280
   $27 = $ReallocAsyncCtx5 + 16 | 0; //@line 15281
   HEAP32[$27 >> 2] = $2; //@line 15282
   $28 = $ReallocAsyncCtx5 + 20 | 0; //@line 15283
   HEAP32[$28 >> 2] = $10; //@line 15284
   $29 = $ReallocAsyncCtx5 + 24 | 0; //@line 15285
   HEAP32[$29 >> 2] = $14; //@line 15286
   $30 = $ReallocAsyncCtx5 + 28 | 0; //@line 15287
   HEAP32[$30 >> 2] = $16; //@line 15288
   $31 = $ReallocAsyncCtx5 + 32 | 0; //@line 15289
   HEAP32[$31 >> 2] = $18; //@line 15290
   $32 = $ReallocAsyncCtx5 + 36 | 0; //@line 15291
   HEAP32[$32 >> 2] = $20; //@line 15292
   sp = STACKTOP; //@line 15293
   return;
  }
  ___async_unwind = 0; //@line 15296
  HEAP32[$ReallocAsyncCtx5 >> 2] = 186; //@line 15297
  $24 = $ReallocAsyncCtx5 + 4 | 0; //@line 15298
  HEAP32[$24 >> 2] = $4; //@line 15299
  $25 = $ReallocAsyncCtx5 + 8 | 0; //@line 15300
  HEAP32[$25 >> 2] = $6; //@line 15301
  $26 = $ReallocAsyncCtx5 + 12 | 0; //@line 15302
  HEAP32[$26 >> 2] = $8; //@line 15303
  $27 = $ReallocAsyncCtx5 + 16 | 0; //@line 15304
  HEAP32[$27 >> 2] = $2; //@line 15305
  $28 = $ReallocAsyncCtx5 + 20 | 0; //@line 15306
  HEAP32[$28 >> 2] = $10; //@line 15307
  $29 = $ReallocAsyncCtx5 + 24 | 0; //@line 15308
  HEAP32[$29 >> 2] = $14; //@line 15309
  $30 = $ReallocAsyncCtx5 + 28 | 0; //@line 15310
  HEAP32[$30 >> 2] = $16; //@line 15311
  $31 = $ReallocAsyncCtx5 + 32 | 0; //@line 15312
  HEAP32[$31 >> 2] = $18; //@line 15313
  $32 = $ReallocAsyncCtx5 + 36 | 0; //@line 15314
  HEAP32[$32 >> 2] = $20; //@line 15315
  sp = STACKTOP; //@line 15316
  return;
 }
 HEAP32[$10 >> 2] = 0; //@line 15319
 $33 = $16 + 12 | 0; //@line 15320
 HEAP32[$16 >> 2] = 188; //@line 15321
 HEAP32[$16 + 4 >> 2] = 0; //@line 15323
 HEAP32[$16 + 8 >> 2] = $4; //@line 15325
 HEAP32[$33 >> 2] = 824; //@line 15326
 $34 = $4 + 2448 | 0; //@line 15327
 if (($34 | 0) == ($16 | 0)) {
  $61 = HEAP32[208] | 0; //@line 15331
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(28) | 0; //@line 15332
  FUNCTION_TABLE_vi[$61 & 1023]($16); //@line 15333
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 191; //@line 15336
   $62 = $ReallocAsyncCtx9 + 4 | 0; //@line 15337
   HEAP32[$62 >> 2] = $16; //@line 15338
   $63 = $ReallocAsyncCtx9 + 8 | 0; //@line 15339
   HEAP32[$63 >> 2] = $6; //@line 15340
   $64 = $ReallocAsyncCtx9 + 12 | 0; //@line 15341
   HEAP32[$64 >> 2] = $4; //@line 15342
   $65 = $ReallocAsyncCtx9 + 16 | 0; //@line 15343
   HEAP32[$65 >> 2] = $8; //@line 15344
   $66 = $ReallocAsyncCtx9 + 20 | 0; //@line 15345
   HEAP32[$66 >> 2] = $18; //@line 15346
   $67 = $ReallocAsyncCtx9 + 24 | 0; //@line 15347
   HEAP32[$67 >> 2] = $20; //@line 15348
   sp = STACKTOP; //@line 15349
   return;
  }
  ___async_unwind = 0; //@line 15352
  HEAP32[$ReallocAsyncCtx9 >> 2] = 191; //@line 15353
  $62 = $ReallocAsyncCtx9 + 4 | 0; //@line 15354
  HEAP32[$62 >> 2] = $16; //@line 15355
  $63 = $ReallocAsyncCtx9 + 8 | 0; //@line 15356
  HEAP32[$63 >> 2] = $6; //@line 15357
  $64 = $ReallocAsyncCtx9 + 12 | 0; //@line 15358
  HEAP32[$64 >> 2] = $4; //@line 15359
  $65 = $ReallocAsyncCtx9 + 16 | 0; //@line 15360
  HEAP32[$65 >> 2] = $8; //@line 15361
  $66 = $ReallocAsyncCtx9 + 20 | 0; //@line 15362
  HEAP32[$66 >> 2] = $18; //@line 15363
  $67 = $ReallocAsyncCtx9 + 24 | 0; //@line 15364
  HEAP32[$67 >> 2] = $20; //@line 15365
  sp = STACKTOP; //@line 15366
  return;
 }
 $36 = $4 + 2460 | 0; //@line 15369
 $37 = HEAP32[$36 >> 2] | 0; //@line 15370
 if (!$37) {
  $51 = HEAP32[207] | 0; //@line 15374
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(36) | 0; //@line 15375
  FUNCTION_TABLE_vii[$51 & 15]($34, $16); //@line 15376
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 190; //@line 15379
   $52 = $ReallocAsyncCtx8 + 4 | 0; //@line 15380
   HEAP32[$52 >> 2] = $16; //@line 15381
   $53 = $ReallocAsyncCtx8 + 8 | 0; //@line 15382
   HEAP32[$53 >> 2] = $6; //@line 15383
   $54 = $ReallocAsyncCtx8 + 12 | 0; //@line 15384
   HEAP32[$54 >> 2] = $4; //@line 15385
   $55 = $ReallocAsyncCtx8 + 16 | 0; //@line 15386
   HEAP32[$55 >> 2] = $8; //@line 15387
   $56 = $ReallocAsyncCtx8 + 20 | 0; //@line 15388
   HEAP32[$56 >> 2] = $33; //@line 15389
   $57 = $ReallocAsyncCtx8 + 24 | 0; //@line 15390
   HEAP32[$57 >> 2] = $36; //@line 15391
   $58 = $ReallocAsyncCtx8 + 28 | 0; //@line 15392
   HEAP32[$58 >> 2] = $18; //@line 15393
   $59 = $ReallocAsyncCtx8 + 32 | 0; //@line 15394
   HEAP32[$59 >> 2] = $20; //@line 15395
   sp = STACKTOP; //@line 15396
   return;
  }
  ___async_unwind = 0; //@line 15399
  HEAP32[$ReallocAsyncCtx8 >> 2] = 190; //@line 15400
  $52 = $ReallocAsyncCtx8 + 4 | 0; //@line 15401
  HEAP32[$52 >> 2] = $16; //@line 15402
  $53 = $ReallocAsyncCtx8 + 8 | 0; //@line 15403
  HEAP32[$53 >> 2] = $6; //@line 15404
  $54 = $ReallocAsyncCtx8 + 12 | 0; //@line 15405
  HEAP32[$54 >> 2] = $4; //@line 15406
  $55 = $ReallocAsyncCtx8 + 16 | 0; //@line 15407
  HEAP32[$55 >> 2] = $8; //@line 15408
  $56 = $ReallocAsyncCtx8 + 20 | 0; //@line 15409
  HEAP32[$56 >> 2] = $33; //@line 15410
  $57 = $ReallocAsyncCtx8 + 24 | 0; //@line 15411
  HEAP32[$57 >> 2] = $36; //@line 15412
  $58 = $ReallocAsyncCtx8 + 28 | 0; //@line 15413
  HEAP32[$58 >> 2] = $18; //@line 15414
  $59 = $ReallocAsyncCtx8 + 32 | 0; //@line 15415
  HEAP32[$59 >> 2] = $20; //@line 15416
  sp = STACKTOP; //@line 15417
  return;
 } else {
  $40 = HEAP32[$37 + 8 >> 2] | 0; //@line 15421
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(40) | 0; //@line 15422
  FUNCTION_TABLE_vi[$40 & 1023]($34); //@line 15423
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 189; //@line 15426
   $41 = $ReallocAsyncCtx7 + 4 | 0; //@line 15427
   HEAP32[$41 >> 2] = $36; //@line 15428
   $42 = $ReallocAsyncCtx7 + 8 | 0; //@line 15429
   HEAP32[$42 >> 2] = $34; //@line 15430
   $43 = $ReallocAsyncCtx7 + 12 | 0; //@line 15431
   HEAP32[$43 >> 2] = $16; //@line 15432
   $44 = $ReallocAsyncCtx7 + 16 | 0; //@line 15433
   HEAP32[$44 >> 2] = $6; //@line 15434
   $45 = $ReallocAsyncCtx7 + 20 | 0; //@line 15435
   HEAP32[$45 >> 2] = $4; //@line 15436
   $46 = $ReallocAsyncCtx7 + 24 | 0; //@line 15437
   HEAP32[$46 >> 2] = $8; //@line 15438
   $47 = $ReallocAsyncCtx7 + 28 | 0; //@line 15439
   HEAP32[$47 >> 2] = $33; //@line 15440
   $48 = $ReallocAsyncCtx7 + 32 | 0; //@line 15441
   HEAP32[$48 >> 2] = $18; //@line 15442
   $49 = $ReallocAsyncCtx7 + 36 | 0; //@line 15443
   HEAP32[$49 >> 2] = $20; //@line 15444
   sp = STACKTOP; //@line 15445
   return;
  }
  ___async_unwind = 0; //@line 15448
  HEAP32[$ReallocAsyncCtx7 >> 2] = 189; //@line 15449
  $41 = $ReallocAsyncCtx7 + 4 | 0; //@line 15450
  HEAP32[$41 >> 2] = $36; //@line 15451
  $42 = $ReallocAsyncCtx7 + 8 | 0; //@line 15452
  HEAP32[$42 >> 2] = $34; //@line 15453
  $43 = $ReallocAsyncCtx7 + 12 | 0; //@line 15454
  HEAP32[$43 >> 2] = $16; //@line 15455
  $44 = $ReallocAsyncCtx7 + 16 | 0; //@line 15456
  HEAP32[$44 >> 2] = $6; //@line 15457
  $45 = $ReallocAsyncCtx7 + 20 | 0; //@line 15458
  HEAP32[$45 >> 2] = $4; //@line 15459
  $46 = $ReallocAsyncCtx7 + 24 | 0; //@line 15460
  HEAP32[$46 >> 2] = $8; //@line 15461
  $47 = $ReallocAsyncCtx7 + 28 | 0; //@line 15462
  HEAP32[$47 >> 2] = $33; //@line 15463
  $48 = $ReallocAsyncCtx7 + 32 | 0; //@line 15464
  HEAP32[$48 >> 2] = $18; //@line 15465
  $49 = $ReallocAsyncCtx7 + 36 | 0; //@line 15466
  HEAP32[$49 >> 2] = $20; //@line 15467
  sp = STACKTOP; //@line 15468
  return;
 }
}
function __ZN12LoRaWANStack17process_receptionEPKhtsa($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $111 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx21 = 0, $AsyncCtx25 = 0, $AsyncCtx29 = 0, $AsyncCtx9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP; //@line 8904
 STACKTOP = STACKTOP + 32 | 0; //@line 8905
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 8905
 $vararg_buffer5 = sp + 24 | 0; //@line 8906
 $vararg_buffer3 = sp + 16 | 0; //@line 8907
 $vararg_buffer1 = sp + 8 | 0; //@line 8908
 $vararg_buffer = sp; //@line 8909
 $5 = $0 + 2496 | 0; //@line 8910
 HEAP32[$5 >> 2] = 5; //@line 8911
 $6 = $0 + 2904 | 0; //@line 8912
 HEAP32[$6 >> 2] = HEAP32[$6 >> 2] & -3; //@line 8915
 $AsyncCtx = _emscripten_alloc_async_context(52, sp) | 0; //@line 8916
 __ZN7LoRaMac16on_radio_rx_doneEPKhtsa($0, $1, $2, $3, $4); //@line 8917
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 291; //@line 8920
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 8922
  HEAP32[$AsyncCtx + 8 >> 2] = $6; //@line 8924
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 8926
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer1; //@line 8928
  HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer1; //@line 8930
  HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer; //@line 8932
  HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer; //@line 8934
  HEAP32[$AsyncCtx + 32 >> 2] = $vararg_buffer3; //@line 8936
  HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer3; //@line 8938
  HEAP32[$AsyncCtx + 40 >> 2] = $vararg_buffer5; //@line 8940
  HEAP32[$AsyncCtx + 44 >> 2] = $vararg_buffer5; //@line 8942
  HEAP32[$AsyncCtx + 48 >> 2] = $5; //@line 8944
  sp = STACKTOP; //@line 8945
  STACKTOP = sp; //@line 8946
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 8948
 HEAP8[$0 + 2900 >> 0] = 0; //@line 8950
 HEAP8[$0 + 2898 >> 0] = HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($0) | 0) + 14 >> 0] | 0; //@line 8955
 HEAP16[$0 + 2896 >> 1] = HEAP16[(__ZNK7LoRaMac19get_mcps_indicationEv($0) | 0) + 24 >> 1] | 0; //@line 8960
 HEAP8[$0 + 2899 >> 0] = HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($0) | 0) + 26 >> 0] | 0; //@line 8965
 do {
  if (HEAP8[(__ZNK7LoRaMac21get_mlme_confirmationEv($0) | 0) >> 0] | 0) {
   __ZN7LoRaMac25post_process_mlme_requestEv($0); //@line 8971
   $AsyncCtx13 = _emscripten_alloc_async_context(52, sp) | 0; //@line 8972
   __ZN12LoRaWANStack20mlme_confirm_handlerEv($0); //@line 8973
   if (___async) {
    HEAP32[$AsyncCtx13 >> 2] = 292; //@line 8976
    HEAP32[$AsyncCtx13 + 4 >> 2] = $0; //@line 8978
    HEAP32[$AsyncCtx13 + 8 >> 2] = $6; //@line 8980
    HEAP32[$AsyncCtx13 + 12 >> 2] = $0; //@line 8982
    HEAP32[$AsyncCtx13 + 16 >> 2] = $vararg_buffer1; //@line 8984
    HEAP32[$AsyncCtx13 + 20 >> 2] = $vararg_buffer1; //@line 8986
    HEAP32[$AsyncCtx13 + 24 >> 2] = $vararg_buffer; //@line 8988
    HEAP32[$AsyncCtx13 + 28 >> 2] = $vararg_buffer; //@line 8990
    HEAP32[$AsyncCtx13 + 32 >> 2] = $vararg_buffer3; //@line 8992
    HEAP32[$AsyncCtx13 + 36 >> 2] = $vararg_buffer3; //@line 8994
    HEAP32[$AsyncCtx13 + 40 >> 2] = $vararg_buffer5; //@line 8996
    HEAP32[$AsyncCtx13 + 44 >> 2] = $vararg_buffer5; //@line 8998
    HEAP32[$AsyncCtx13 + 48 >> 2] = $5; //@line 9000
    sp = STACKTOP; //@line 9001
    STACKTOP = sp; //@line 9002
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx13 | 0); //@line 9004
    break;
   }
  }
 } while (0);
 if (!(__ZN7LoRaMac10nwk_joinedEv($0) | 0)) {
  STACKTOP = sp; //@line 9011
  return;
 }
 do {
  if ((HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($0) | 0) >> 2] | 0) == 1) {
   if (HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($0) | 0) + 32 >> 0] | 0) {
    HEAP32[$vararg_buffer >> 2] = HEAPU8[(__ZNK7LoRaMac21get_mcps_confirmationEv($0) | 0) + 11 >> 0]; //@line 9027
    _mbed_tracef(16, 12211, 12413, $vararg_buffer); //@line 9028
    __ZN7LoRaMac21post_process_mcps_reqEv($0); //@line 9029
    HEAP32[$6 >> 2] = HEAP32[$6 >> 2] & -18 | 16; //@line 9033
    $AsyncCtx29 = _emscripten_alloc_async_context(36, sp) | 0; //@line 9034
    __ZN12LoRaWANStack26process_status_check_stateEv($0); //@line 9035
    if (___async) {
     HEAP32[$AsyncCtx29 >> 2] = 293; //@line 9038
     HEAP32[$AsyncCtx29 + 4 >> 2] = $0; //@line 9040
     HEAP32[$AsyncCtx29 + 8 >> 2] = $6; //@line 9042
     HEAP32[$AsyncCtx29 + 12 >> 2] = $0; //@line 9044
     HEAP32[$AsyncCtx29 + 16 >> 2] = $5; //@line 9046
     HEAP32[$AsyncCtx29 + 20 >> 2] = $vararg_buffer3; //@line 9048
     HEAP32[$AsyncCtx29 + 24 >> 2] = $vararg_buffer3; //@line 9050
     HEAP32[$AsyncCtx29 + 28 >> 2] = $vararg_buffer5; //@line 9052
     HEAP32[$AsyncCtx29 + 32 >> 2] = $vararg_buffer5; //@line 9054
     sp = STACKTOP; //@line 9055
     STACKTOP = sp; //@line 9056
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx29 | 0); //@line 9058
     break;
    }
   }
   if (!(__ZN7LoRaMac24continue_sending_processEv($0) | 0)) {
    _mbed_tracef(2, 12211, 12216, $vararg_buffer1); //@line 9064
    HEAP32[$6 >> 2] = HEAP32[$6 >> 2] & -18 | 1; //@line 9068
    $AsyncCtx25 = _emscripten_alloc_async_context(36, sp) | 0; //@line 9069
    __ZN12LoRaWANStack26process_status_check_stateEv($0); //@line 9070
    if (___async) {
     HEAP32[$AsyncCtx25 >> 2] = 294; //@line 9073
     HEAP32[$AsyncCtx25 + 4 >> 2] = $0; //@line 9075
     HEAP32[$AsyncCtx25 + 8 >> 2] = $6; //@line 9077
     HEAP32[$AsyncCtx25 + 12 >> 2] = $0; //@line 9079
     HEAP32[$AsyncCtx25 + 16 >> 2] = $5; //@line 9081
     HEAP32[$AsyncCtx25 + 20 >> 2] = $vararg_buffer3; //@line 9083
     HEAP32[$AsyncCtx25 + 24 >> 2] = $vararg_buffer3; //@line 9085
     HEAP32[$AsyncCtx25 + 28 >> 2] = $vararg_buffer5; //@line 9087
     HEAP32[$AsyncCtx25 + 32 >> 2] = $vararg_buffer5; //@line 9089
     sp = STACKTOP; //@line 9090
     STACKTOP = sp; //@line 9091
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx25 | 0); //@line 9093
     break;
    }
   }
  } else {
   __ZN7LoRaMac21post_process_mcps_reqEv($0); //@line 9098
   HEAP32[$6 >> 2] = HEAP32[$6 >> 2] | 16; //@line 9101
   $AsyncCtx21 = _emscripten_alloc_async_context(36, sp) | 0; //@line 9102
   __ZN12LoRaWANStack26process_status_check_stateEv($0); //@line 9103
   if (___async) {
    HEAP32[$AsyncCtx21 >> 2] = 295; //@line 9106
    HEAP32[$AsyncCtx21 + 4 >> 2] = $0; //@line 9108
    HEAP32[$AsyncCtx21 + 8 >> 2] = $6; //@line 9110
    HEAP32[$AsyncCtx21 + 12 >> 2] = $0; //@line 9112
    HEAP32[$AsyncCtx21 + 16 >> 2] = $5; //@line 9114
    HEAP32[$AsyncCtx21 + 20 >> 2] = $vararg_buffer3; //@line 9116
    HEAP32[$AsyncCtx21 + 24 >> 2] = $vararg_buffer3; //@line 9118
    HEAP32[$AsyncCtx21 + 28 >> 2] = $vararg_buffer5; //@line 9120
    HEAP32[$AsyncCtx21 + 32 >> 2] = $vararg_buffer5; //@line 9122
    sp = STACKTOP; //@line 9123
    STACKTOP = sp; //@line 9124
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx21 | 0); //@line 9126
    break;
   }
  }
 } while (0);
 do {
  if (HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($0) | 0) >> 0] | 0) {
   __ZN7LoRaMac21post_process_mcps_indEv($0); //@line 9136
   HEAP32[$6 >> 2] = HEAP32[$6 >> 2] | 2; //@line 9139
   $AsyncCtx17 = _emscripten_alloc_async_context(36, sp) | 0; //@line 9140
   __ZN12LoRaWANStack26process_status_check_stateEv($0); //@line 9141
   if (___async) {
    HEAP32[$AsyncCtx17 >> 2] = 296; //@line 9144
    HEAP32[$AsyncCtx17 + 4 >> 2] = $6; //@line 9146
    HEAP32[$AsyncCtx17 + 8 >> 2] = $0; //@line 9148
    HEAP32[$AsyncCtx17 + 12 >> 2] = $5; //@line 9150
    HEAP32[$AsyncCtx17 + 16 >> 2] = $0; //@line 9152
    HEAP32[$AsyncCtx17 + 20 >> 2] = $vararg_buffer3; //@line 9154
    HEAP32[$AsyncCtx17 + 24 >> 2] = $vararg_buffer3; //@line 9156
    HEAP32[$AsyncCtx17 + 28 >> 2] = $vararg_buffer5; //@line 9158
    HEAP32[$AsyncCtx17 + 32 >> 2] = $vararg_buffer5; //@line 9160
    sp = STACKTOP; //@line 9161
    STACKTOP = sp; //@line 9162
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx17 | 0); //@line 9164
    break;
   }
  }
 } while (0);
 if (!(HEAP32[$6 >> 2] & 1)) {
  $111 = (__ZNK7LoRaMac16get_device_classEv($0) | 0) == 2; //@line 9174
  HEAP32[$5 >> 2] = $111 ? 5 : 2; //@line 9176
 }
 do {
  if (HEAP8[(__ZNK7LoRaMac19get_mlme_indicationEv($0) | 0) + 4 >> 0] | 0) {
   _mbed_tracef(16, 12211, 12433, $vararg_buffer3); //@line 9184
   __ZN7LoRaMac21post_process_mlme_indEv($0); //@line 9185
   _mbed_tracef(16, 12211, 12457, $vararg_buffer5); //@line 9186
   $AsyncCtx9 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9187
   __ZN12LoRaWANStack23mlme_indication_handlerEv($0); //@line 9188
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 297; //@line 9191
    HEAP32[$AsyncCtx9 + 4 >> 2] = $0; //@line 9193
    sp = STACKTOP; //@line 9194
    STACKTOP = sp; //@line 9195
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx9 | 0); //@line 9197
    break;
   }
  }
 } while (0);
 HEAP8[$0 + 2911 >> 0] = 1; //@line 9203
 STACKTOP = sp; //@line 9204
 return;
}
function _mbedtls_cipher_update($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0121 = 0, $$0122 = 0, $$0124 = 0, $$1 = 0, $$phi$trans$insert = 0, $$pre$phi128Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $102 = 0, $103 = 0, $105 = 0, $114 = 0, $116 = 0, $12 = 0, $120 = 0, $17 = 0, $19 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $33 = 0, $38 = 0, $39 = 0, $40 = 0, $43 = 0, $44 = 0, $48 = 0, $52 = 0, $53 = 0, $59 = 0, $6 = 0, $61 = 0, $62 = 0, $65 = 0, $83 = 0, $91 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 2663
 if (!$0) {
  $$1 = -24832; //@line 2666
  return $$1 | 0; //@line 2667
 }
 $6 = HEAP32[$0 >> 2] | 0; //@line 2669
 if (($4 | 0) == 0 | ($6 | 0) == 0) {
  $$1 = -24832; //@line 2674
  return $$1 | 0; //@line 2675
 }
 HEAP32[$4 >> 2] = 0; //@line 2677
 $10 = HEAP32[$6 + 24 >> 2] | 0; //@line 2679
 $12 = HEAP32[$6 + 4 >> 2] | 0; //@line 2681
 switch ($12 | 0) {
 case 1:
  {
   if (($10 | 0) != ($2 | 0)) {
    $$1 = -25216; //@line 2686
    return $$1 | 0; //@line 2687
   }
   HEAP32[$4 >> 2] = $2; //@line 2689
   $17 = HEAP32[(HEAP32[$6 + 28 >> 2] | 0) + 4 >> 2] | 0; //@line 2693
   $19 = HEAP32[$0 + 60 >> 2] | 0; //@line 2695
   $21 = HEAP32[$0 + 8 >> 2] | 0; //@line 2697
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2698
   $22 = FUNCTION_TABLE_iiiii[$17 & 3]($19, $21, $1, $3) | 0; //@line 2699
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 583; //@line 2702
    sp = STACKTOP; //@line 2703
    return 0; //@line 2704
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 2706
   $$1 = $22; //@line 2707
   return $$1 | 0; //@line 2708
  }
 case 6:
  {
   HEAP32[$4 >> 2] = $2; //@line 2712
   $24 = HEAP32[$0 + 60 >> 2] | 0; //@line 2714
   $AsyncCtx15 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2715
   $25 = _mbedtls_gcm_update($24, $2, $1, $3) | 0; //@line 2716
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 584; //@line 2719
    sp = STACKTOP; //@line 2720
    return 0; //@line 2721
   }
   _emscripten_free_async_context($AsyncCtx15 | 0); //@line 2723
   $$1 = $25; //@line 2724
   return $$1 | 0; //@line 2725
  }
 default:
  {
   if (!$10) {
    $$1 = -25472; //@line 2731
    return $$1 | 0; //@line 2732
   }
   if (($1 | 0) == ($3 | 0)) {
    if (HEAP32[$0 + 36 >> 2] | 0) {
     $$1 = -24832; //@line 2740
     return $$1 | 0; //@line 2741
    }
    if (($2 >>> 0) % ($10 >>> 0) | 0 | 0) {
     $$1 = -24832; //@line 2746
     return $$1 | 0; //@line 2747
    }
   }
   switch ($12 | 0) {
   case 2:
    {
     $33 = $0 + 8 | 0; //@line 2752
     L21 : do {
      switch (HEAP32[$33 >> 2] | 0) {
      case 0:
       {
        $38 = $0 + 36 | 0; //@line 2760
        $39 = HEAP32[$38 >> 2] | 0; //@line 2761
        $40 = $10 - $39 | 0; //@line 2762
        if (!(HEAP32[$0 + 12 >> 2] | 0)) {
         if ($40 >>> 0 > $2 >>> 0) {
          $$pre$phiZ2D = $38; //@line 2766
          $48 = $39; //@line 2766
          label = 22; //@line 2767
          break L21;
         } else {
          label = 20; //@line 2770
          break L21;
         }
        } else {
         if ($40 >>> 0 < $2 >>> 0) {
          label = 20; //@line 2776
          break L21;
         } else {
          $$pre$phiZ2D = $38; //@line 2779
          $48 = $39; //@line 2779
          label = 22; //@line 2780
          break L21;
         }
        }
        break;
       }
      case 1:
       {
        $43 = $0 + 36 | 0; //@line 2787
        $44 = HEAP32[$43 >> 2] | 0; //@line 2788
        if (($10 - $44 | 0) >>> 0 > $2 >>> 0) {
         $$pre$phiZ2D = $43; //@line 2792
         $48 = $44; //@line 2792
         label = 22; //@line 2793
        } else {
         $$pre$phi128Z2D = $43; //@line 2795
         $52 = $44; //@line 2795
        }
        break;
       }
      default:
       {
        label = 20; //@line 2800
       }
      }
     } while (0);
     if ((label | 0) == 20) {
      $$phi$trans$insert = $0 + 36 | 0; //@line 2805
      $$pre$phi128Z2D = $$phi$trans$insert; //@line 2807
      $52 = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 2807
     } else if ((label | 0) == 22) {
      _memcpy($0 + 20 + $48 | 0, $1 | 0, $2 | 0) | 0; //@line 2811
      HEAP32[$$pre$phiZ2D >> 2] = (HEAP32[$$pre$phiZ2D >> 2] | 0) + $2; //@line 2814
      $$1 = 0; //@line 2815
      return $$1 | 0; //@line 2816
     }
     do {
      if (!$52) {
       $$0121 = $3; //@line 2821
       $$0122 = $2; //@line 2821
       $$0124 = $1; //@line 2821
      } else {
       $53 = $10 - $52 | 0; //@line 2823
       _memcpy($0 + 20 + $52 | 0, $1 | 0, $53 | 0) | 0; //@line 2825
       $59 = HEAP32[(HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] | 0) + 8 >> 2] | 0; //@line 2830
       $61 = HEAP32[$0 + 60 >> 2] | 0; //@line 2832
       $62 = HEAP32[$33 >> 2] | 0; //@line 2833
       $AsyncCtx3 = _emscripten_alloc_async_context(44, sp) | 0; //@line 2836
       $65 = FUNCTION_TABLE_iiiiiii[$59 & 3]($61, $62, $10, $0 + 40 | 0, $0 + 20 | 0, $3) | 0; //@line 2837
       if (___async) {
        HEAP32[$AsyncCtx3 >> 2] = 585; //@line 2840
        HEAP32[$AsyncCtx3 + 4 >> 2] = $4; //@line 2842
        HEAP32[$AsyncCtx3 + 8 >> 2] = $10; //@line 2844
        HEAP32[$AsyncCtx3 + 12 >> 2] = $3; //@line 2846
        HEAP32[$AsyncCtx3 + 16 >> 2] = $$pre$phi128Z2D; //@line 2848
        HEAP32[$AsyncCtx3 + 20 >> 2] = $1; //@line 2850
        HEAP32[$AsyncCtx3 + 24 >> 2] = $53; //@line 2852
        HEAP32[$AsyncCtx3 + 28 >> 2] = $2; //@line 2854
        HEAP32[$AsyncCtx3 + 32 >> 2] = $33; //@line 2856
        HEAP32[$AsyncCtx3 + 36 >> 2] = $0; //@line 2858
        HEAP32[$AsyncCtx3 + 40 >> 2] = $0; //@line 2860
        sp = STACKTOP; //@line 2861
        return 0; //@line 2862
       }
       _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2864
       if (!$65) {
        HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + $10; //@line 2869
        HEAP32[$$pre$phi128Z2D >> 2] = 0; //@line 2871
        $$0121 = $3 + $10 | 0; //@line 2874
        $$0122 = $2 - $53 | 0; //@line 2874
        $$0124 = $1 + $53 | 0; //@line 2874
        break;
       } else {
        $$1 = $65; //@line 2877
        return $$1 | 0; //@line 2878
       }
      }
     } while (0);
     if (!$$0122) {
      $$1 = 0; //@line 2884
      return $$1 | 0; //@line 2885
     }
     $83 = ($$0122 >>> 0) % ($10 >>> 0) | 0; //@line 2887
     if (!$83) {
      if (!(HEAP32[$33 >> 2] | 0)) {
       $$0 = (HEAP32[$0 + 12 >> 2] | 0) == 0 ? 0 : $10; //@line 2897
      } else {
       $$0 = 0; //@line 2899
      }
     } else {
      $$0 = $83; //@line 2902
     }
     $91 = $$0122 - $$0 | 0; //@line 2905
     _memcpy($0 + 20 | 0, $$0124 + $91 | 0, $$0 | 0) | 0; //@line 2907
     HEAP32[$$pre$phi128Z2D >> 2] = (HEAP32[$$pre$phi128Z2D >> 2] | 0) + $$0; //@line 2910
     if (!$91) {
      $$1 = 0; //@line 2913
      return $$1 | 0; //@line 2914
     }
     $100 = HEAP32[(HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] | 0) + 8 >> 2] | 0; //@line 2920
     $102 = HEAP32[$0 + 60 >> 2] | 0; //@line 2922
     $103 = HEAP32[$33 >> 2] | 0; //@line 2923
     $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 2925
     $105 = FUNCTION_TABLE_iiiiiii[$100 & 3]($102, $103, $91, $0 + 40 | 0, $$0124, $$0121) | 0; //@line 2926
     if (___async) {
      HEAP32[$AsyncCtx7 >> 2] = 586; //@line 2929
      HEAP32[$AsyncCtx7 + 4 >> 2] = $4; //@line 2931
      HEAP32[$AsyncCtx7 + 8 >> 2] = $91; //@line 2933
      sp = STACKTOP; //@line 2934
      return 0; //@line 2935
     }
     _emscripten_free_async_context($AsyncCtx7 | 0); //@line 2937
     if ($105 | 0) {
      $$1 = $105; //@line 2940
      return $$1 | 0; //@line 2941
     }
     HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + $91; //@line 2945
     $$1 = 0; //@line 2946
     return $$1 | 0; //@line 2947
    }
   case 5:
    {
     $114 = HEAP32[(HEAP32[$6 + 28 >> 2] | 0) + 12 >> 2] | 0; //@line 2954
     $116 = HEAP32[$0 + 60 >> 2] | 0; //@line 2956
     $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 2960
     $120 = FUNCTION_TABLE_iiiiiiii[$114 & 1]($116, $2, $0 + 36 | 0, $0 + 40 | 0, $0 + 20 | 0, $1, $3) | 0; //@line 2961
     if (___async) {
      HEAP32[$AsyncCtx11 >> 2] = 587; //@line 2964
      HEAP32[$AsyncCtx11 + 4 >> 2] = $2; //@line 2966
      HEAP32[$AsyncCtx11 + 8 >> 2] = $4; //@line 2968
      sp = STACKTOP; //@line 2969
      return 0; //@line 2970
     }
     _emscripten_free_async_context($AsyncCtx11 | 0); //@line 2972
     if ($120 | 0) {
      $$1 = $120; //@line 2975
      return $$1 | 0; //@line 2976
     }
     HEAP32[$4 >> 2] = $2; //@line 2978
     $$1 = 0; //@line 2979
     return $$1 | 0; //@line 2980
    }
   default:
    {
     $$1 = -24704; //@line 2984
     return $$1 | 0; //@line 2985
    }
   }
  }
 }
 return 0; //@line 2990
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_242($0) {
 $0 = $0 | 0;
 var $$pre$i$i25 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 15478
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15480
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15482
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15484
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 15490
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 15492
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 15494
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 15496
 $$pre$i$i25 = HEAP32[HEAP32[$0 + 16 >> 2] >> 2] | 0; //@line 15497
 HEAP32[HEAP32[$0 + 20 >> 2] >> 2] = $$pre$i$i25; //@line 15499
 if ($$pre$i$i25 | 0) {
  $22 = HEAP32[$$pre$i$i25 + 8 >> 2] | 0; //@line 15503
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(32) | 0; //@line 15504
  FUNCTION_TABLE_vi[$22 & 1023]($12); //@line 15505
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 187; //@line 15508
   $23 = $ReallocAsyncCtx6 + 4 | 0; //@line 15509
   HEAP32[$23 >> 2] = $2; //@line 15510
   $24 = $ReallocAsyncCtx6 + 8 | 0; //@line 15511
   HEAP32[$24 >> 2] = $4; //@line 15512
   $25 = $ReallocAsyncCtx6 + 12 | 0; //@line 15513
   HEAP32[$25 >> 2] = $6; //@line 15514
   $26 = $ReallocAsyncCtx6 + 16 | 0; //@line 15515
   HEAP32[$26 >> 2] = $12; //@line 15516
   $27 = $ReallocAsyncCtx6 + 20 | 0; //@line 15517
   HEAP32[$27 >> 2] = $14; //@line 15518
   $28 = $ReallocAsyncCtx6 + 24 | 0; //@line 15519
   HEAP32[$28 >> 2] = $16; //@line 15520
   $29 = $ReallocAsyncCtx6 + 28 | 0; //@line 15521
   HEAP32[$29 >> 2] = $18; //@line 15522
   sp = STACKTOP; //@line 15523
   return;
  }
  ___async_unwind = 0; //@line 15526
  HEAP32[$ReallocAsyncCtx6 >> 2] = 187; //@line 15527
  $23 = $ReallocAsyncCtx6 + 4 | 0; //@line 15528
  HEAP32[$23 >> 2] = $2; //@line 15529
  $24 = $ReallocAsyncCtx6 + 8 | 0; //@line 15530
  HEAP32[$24 >> 2] = $4; //@line 15531
  $25 = $ReallocAsyncCtx6 + 12 | 0; //@line 15532
  HEAP32[$25 >> 2] = $6; //@line 15533
  $26 = $ReallocAsyncCtx6 + 16 | 0; //@line 15534
  HEAP32[$26 >> 2] = $12; //@line 15535
  $27 = $ReallocAsyncCtx6 + 20 | 0; //@line 15536
  HEAP32[$27 >> 2] = $14; //@line 15537
  $28 = $ReallocAsyncCtx6 + 24 | 0; //@line 15538
  HEAP32[$28 >> 2] = $16; //@line 15539
  $29 = $ReallocAsyncCtx6 + 28 | 0; //@line 15540
  HEAP32[$29 >> 2] = $18; //@line 15541
  sp = STACKTOP; //@line 15542
  return;
 }
 $30 = $14 + 12 | 0; //@line 15545
 HEAP32[$14 >> 2] = 188; //@line 15546
 HEAP32[$14 + 4 >> 2] = 0; //@line 15548
 HEAP32[$14 + 8 >> 2] = $2; //@line 15550
 HEAP32[$30 >> 2] = 824; //@line 15551
 $31 = $2 + 2448 | 0; //@line 15552
 if (($31 | 0) == ($14 | 0)) {
  $58 = HEAP32[208] | 0; //@line 15556
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(28) | 0; //@line 15557
  FUNCTION_TABLE_vi[$58 & 1023]($14); //@line 15558
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 191; //@line 15561
   $59 = $ReallocAsyncCtx9 + 4 | 0; //@line 15562
   HEAP32[$59 >> 2] = $14; //@line 15563
   $60 = $ReallocAsyncCtx9 + 8 | 0; //@line 15564
   HEAP32[$60 >> 2] = $4; //@line 15565
   $61 = $ReallocAsyncCtx9 + 12 | 0; //@line 15566
   HEAP32[$61 >> 2] = $2; //@line 15567
   $62 = $ReallocAsyncCtx9 + 16 | 0; //@line 15568
   HEAP32[$62 >> 2] = $6; //@line 15569
   $63 = $ReallocAsyncCtx9 + 20 | 0; //@line 15570
   HEAP32[$63 >> 2] = $16; //@line 15571
   $64 = $ReallocAsyncCtx9 + 24 | 0; //@line 15572
   HEAP32[$64 >> 2] = $18; //@line 15573
   sp = STACKTOP; //@line 15574
   return;
  }
  ___async_unwind = 0; //@line 15577
  HEAP32[$ReallocAsyncCtx9 >> 2] = 191; //@line 15578
  $59 = $ReallocAsyncCtx9 + 4 | 0; //@line 15579
  HEAP32[$59 >> 2] = $14; //@line 15580
  $60 = $ReallocAsyncCtx9 + 8 | 0; //@line 15581
  HEAP32[$60 >> 2] = $4; //@line 15582
  $61 = $ReallocAsyncCtx9 + 12 | 0; //@line 15583
  HEAP32[$61 >> 2] = $2; //@line 15584
  $62 = $ReallocAsyncCtx9 + 16 | 0; //@line 15585
  HEAP32[$62 >> 2] = $6; //@line 15586
  $63 = $ReallocAsyncCtx9 + 20 | 0; //@line 15587
  HEAP32[$63 >> 2] = $16; //@line 15588
  $64 = $ReallocAsyncCtx9 + 24 | 0; //@line 15589
  HEAP32[$64 >> 2] = $18; //@line 15590
  sp = STACKTOP; //@line 15591
  return;
 }
 $33 = $2 + 2460 | 0; //@line 15594
 $34 = HEAP32[$33 >> 2] | 0; //@line 15595
 if (!$34) {
  $48 = HEAP32[207] | 0; //@line 15599
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(36) | 0; //@line 15600
  FUNCTION_TABLE_vii[$48 & 15]($31, $14); //@line 15601
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 190; //@line 15604
   $49 = $ReallocAsyncCtx8 + 4 | 0; //@line 15605
   HEAP32[$49 >> 2] = $14; //@line 15606
   $50 = $ReallocAsyncCtx8 + 8 | 0; //@line 15607
   HEAP32[$50 >> 2] = $4; //@line 15608
   $51 = $ReallocAsyncCtx8 + 12 | 0; //@line 15609
   HEAP32[$51 >> 2] = $2; //@line 15610
   $52 = $ReallocAsyncCtx8 + 16 | 0; //@line 15611
   HEAP32[$52 >> 2] = $6; //@line 15612
   $53 = $ReallocAsyncCtx8 + 20 | 0; //@line 15613
   HEAP32[$53 >> 2] = $30; //@line 15614
   $54 = $ReallocAsyncCtx8 + 24 | 0; //@line 15615
   HEAP32[$54 >> 2] = $33; //@line 15616
   $55 = $ReallocAsyncCtx8 + 28 | 0; //@line 15617
   HEAP32[$55 >> 2] = $16; //@line 15618
   $56 = $ReallocAsyncCtx8 + 32 | 0; //@line 15619
   HEAP32[$56 >> 2] = $18; //@line 15620
   sp = STACKTOP; //@line 15621
   return;
  }
  ___async_unwind = 0; //@line 15624
  HEAP32[$ReallocAsyncCtx8 >> 2] = 190; //@line 15625
  $49 = $ReallocAsyncCtx8 + 4 | 0; //@line 15626
  HEAP32[$49 >> 2] = $14; //@line 15627
  $50 = $ReallocAsyncCtx8 + 8 | 0; //@line 15628
  HEAP32[$50 >> 2] = $4; //@line 15629
  $51 = $ReallocAsyncCtx8 + 12 | 0; //@line 15630
  HEAP32[$51 >> 2] = $2; //@line 15631
  $52 = $ReallocAsyncCtx8 + 16 | 0; //@line 15632
  HEAP32[$52 >> 2] = $6; //@line 15633
  $53 = $ReallocAsyncCtx8 + 20 | 0; //@line 15634
  HEAP32[$53 >> 2] = $30; //@line 15635
  $54 = $ReallocAsyncCtx8 + 24 | 0; //@line 15636
  HEAP32[$54 >> 2] = $33; //@line 15637
  $55 = $ReallocAsyncCtx8 + 28 | 0; //@line 15638
  HEAP32[$55 >> 2] = $16; //@line 15639
  $56 = $ReallocAsyncCtx8 + 32 | 0; //@line 15640
  HEAP32[$56 >> 2] = $18; //@line 15641
  sp = STACKTOP; //@line 15642
  return;
 } else {
  $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 15646
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(40) | 0; //@line 15647
  FUNCTION_TABLE_vi[$37 & 1023]($31); //@line 15648
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 189; //@line 15651
   $38 = $ReallocAsyncCtx7 + 4 | 0; //@line 15652
   HEAP32[$38 >> 2] = $33; //@line 15653
   $39 = $ReallocAsyncCtx7 + 8 | 0; //@line 15654
   HEAP32[$39 >> 2] = $31; //@line 15655
   $40 = $ReallocAsyncCtx7 + 12 | 0; //@line 15656
   HEAP32[$40 >> 2] = $14; //@line 15657
   $41 = $ReallocAsyncCtx7 + 16 | 0; //@line 15658
   HEAP32[$41 >> 2] = $4; //@line 15659
   $42 = $ReallocAsyncCtx7 + 20 | 0; //@line 15660
   HEAP32[$42 >> 2] = $2; //@line 15661
   $43 = $ReallocAsyncCtx7 + 24 | 0; //@line 15662
   HEAP32[$43 >> 2] = $6; //@line 15663
   $44 = $ReallocAsyncCtx7 + 28 | 0; //@line 15664
   HEAP32[$44 >> 2] = $30; //@line 15665
   $45 = $ReallocAsyncCtx7 + 32 | 0; //@line 15666
   HEAP32[$45 >> 2] = $16; //@line 15667
   $46 = $ReallocAsyncCtx7 + 36 | 0; //@line 15668
   HEAP32[$46 >> 2] = $18; //@line 15669
   sp = STACKTOP; //@line 15670
   return;
  }
  ___async_unwind = 0; //@line 15673
  HEAP32[$ReallocAsyncCtx7 >> 2] = 189; //@line 15674
  $38 = $ReallocAsyncCtx7 + 4 | 0; //@line 15675
  HEAP32[$38 >> 2] = $33; //@line 15676
  $39 = $ReallocAsyncCtx7 + 8 | 0; //@line 15677
  HEAP32[$39 >> 2] = $31; //@line 15678
  $40 = $ReallocAsyncCtx7 + 12 | 0; //@line 15679
  HEAP32[$40 >> 2] = $14; //@line 15680
  $41 = $ReallocAsyncCtx7 + 16 | 0; //@line 15681
  HEAP32[$41 >> 2] = $4; //@line 15682
  $42 = $ReallocAsyncCtx7 + 20 | 0; //@line 15683
  HEAP32[$42 >> 2] = $2; //@line 15684
  $43 = $ReallocAsyncCtx7 + 24 | 0; //@line 15685
  HEAP32[$43 >> 2] = $6; //@line 15686
  $44 = $ReallocAsyncCtx7 + 28 | 0; //@line 15687
  HEAP32[$44 >> 2] = $30; //@line 15688
  $45 = $ReallocAsyncCtx7 + 32 | 0; //@line 15689
  HEAP32[$45 >> 2] = $16; //@line 15690
  $46 = $ReallocAsyncCtx7 + 36 | 0; //@line 15691
  HEAP32[$46 >> 2] = $18; //@line 15692
  sp = STACKTOP; //@line 15693
  return;
 }
}
function __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_27($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $43 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 22886
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22888
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22890
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22896
 HEAP32[HEAP32[$0 + 12 >> 2] >> 2] = HEAP32[HEAP32[$0 + 16 >> 2] >> 2]; //@line 22898
 $11 = $4 + 16 | 0; //@line 22899
 $12 = $4 + 28 | 0; //@line 22900
 $13 = HEAP32[$12 >> 2] | 0; //@line 22901
 if ($13 | 0) {
  $15 = $2 + 2516 | 0; //@line 22904
  if (($15 | 0) != ($11 | 0)) {
   $17 = $2 + 2528 | 0; //@line 22907
   $18 = HEAP32[$17 >> 2] | 0; //@line 22908
   if (!$18) {
    $30 = HEAP32[$13 + 4 >> 2] | 0; //@line 22912
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 22913
    FUNCTION_TABLE_vii[$30 & 15]($15, $11); //@line 22914
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 356; //@line 22917
     $31 = $ReallocAsyncCtx4 + 4 | 0; //@line 22918
     HEAP32[$31 >> 2] = $2; //@line 22919
     $32 = $ReallocAsyncCtx4 + 8 | 0; //@line 22920
     HEAP32[$32 >> 2] = $4; //@line 22921
     $33 = $ReallocAsyncCtx4 + 12 | 0; //@line 22922
     HEAP32[$33 >> 2] = $17; //@line 22923
     $34 = $ReallocAsyncCtx4 + 16 | 0; //@line 22924
     HEAP32[$34 >> 2] = $12; //@line 22925
     $35 = $ReallocAsyncCtx4 + 20 | 0; //@line 22926
     HEAP32[$35 >> 2] = $10; //@line 22927
     sp = STACKTOP; //@line 22928
     return;
    }
    ___async_unwind = 0; //@line 22931
    HEAP32[$ReallocAsyncCtx4 >> 2] = 356; //@line 22932
    $31 = $ReallocAsyncCtx4 + 4 | 0; //@line 22933
    HEAP32[$31 >> 2] = $2; //@line 22934
    $32 = $ReallocAsyncCtx4 + 8 | 0; //@line 22935
    HEAP32[$32 >> 2] = $4; //@line 22936
    $33 = $ReallocAsyncCtx4 + 12 | 0; //@line 22937
    HEAP32[$33 >> 2] = $17; //@line 22938
    $34 = $ReallocAsyncCtx4 + 16 | 0; //@line 22939
    HEAP32[$34 >> 2] = $12; //@line 22940
    $35 = $ReallocAsyncCtx4 + 20 | 0; //@line 22941
    HEAP32[$35 >> 2] = $10; //@line 22942
    sp = STACKTOP; //@line 22943
    return;
   } else {
    $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 22947
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 22948
    FUNCTION_TABLE_vi[$21 & 1023]($15); //@line 22949
    if (___async) {
     HEAP32[$ReallocAsyncCtx3 >> 2] = 355; //@line 22952
     $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 22953
     HEAP32[$22 >> 2] = $2; //@line 22954
     $23 = $ReallocAsyncCtx3 + 8 | 0; //@line 22955
     HEAP32[$23 >> 2] = $4; //@line 22956
     $24 = $ReallocAsyncCtx3 + 12 | 0; //@line 22957
     HEAP32[$24 >> 2] = $17; //@line 22958
     $25 = $ReallocAsyncCtx3 + 16 | 0; //@line 22959
     HEAP32[$25 >> 2] = $15; //@line 22960
     $26 = $ReallocAsyncCtx3 + 20 | 0; //@line 22961
     HEAP32[$26 >> 2] = $11; //@line 22962
     $27 = $ReallocAsyncCtx3 + 24 | 0; //@line 22963
     HEAP32[$27 >> 2] = $12; //@line 22964
     $28 = $ReallocAsyncCtx3 + 28 | 0; //@line 22965
     HEAP32[$28 >> 2] = $10; //@line 22966
     sp = STACKTOP; //@line 22967
     return;
    }
    ___async_unwind = 0; //@line 22970
    HEAP32[$ReallocAsyncCtx3 >> 2] = 355; //@line 22971
    $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 22972
    HEAP32[$22 >> 2] = $2; //@line 22973
    $23 = $ReallocAsyncCtx3 + 8 | 0; //@line 22974
    HEAP32[$23 >> 2] = $4; //@line 22975
    $24 = $ReallocAsyncCtx3 + 12 | 0; //@line 22976
    HEAP32[$24 >> 2] = $17; //@line 22977
    $25 = $ReallocAsyncCtx3 + 16 | 0; //@line 22978
    HEAP32[$25 >> 2] = $15; //@line 22979
    $26 = $ReallocAsyncCtx3 + 20 | 0; //@line 22980
    HEAP32[$26 >> 2] = $11; //@line 22981
    $27 = $ReallocAsyncCtx3 + 24 | 0; //@line 22982
    HEAP32[$27 >> 2] = $12; //@line 22983
    $28 = $ReallocAsyncCtx3 + 28 | 0; //@line 22984
    HEAP32[$28 >> 2] = $10; //@line 22985
    sp = STACKTOP; //@line 22986
    return;
   }
  }
 }
 $36 = $4 + 32 | 0; //@line 22991
 $37 = $4 + 44 | 0; //@line 22992
 $38 = HEAP32[$37 >> 2] | 0; //@line 22993
 if (!$38) {
  HEAP32[___async_retval >> 2] = 0; //@line 22997
  return;
 }
 $40 = $2 + 2532 | 0; //@line 23000
 if (($40 | 0) == ($36 | 0)) {
  $61 = HEAP32[$38 + 4 >> 2] | 0; //@line 23004
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 23005
  FUNCTION_TABLE_vii[$61 & 15]($10, $36); //@line 23006
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 359; //@line 23009
   $62 = $ReallocAsyncCtx7 + 4 | 0; //@line 23010
   HEAP32[$62 >> 2] = $37; //@line 23011
   $63 = $ReallocAsyncCtx7 + 8 | 0; //@line 23012
   HEAP32[$63 >> 2] = $2; //@line 23013
   $64 = $ReallocAsyncCtx7 + 12 | 0; //@line 23014
   HEAP32[$64 >> 2] = $10; //@line 23015
   sp = STACKTOP; //@line 23016
   return;
  }
  ___async_unwind = 0; //@line 23019
  HEAP32[$ReallocAsyncCtx7 >> 2] = 359; //@line 23020
  $62 = $ReallocAsyncCtx7 + 4 | 0; //@line 23021
  HEAP32[$62 >> 2] = $37; //@line 23022
  $63 = $ReallocAsyncCtx7 + 8 | 0; //@line 23023
  HEAP32[$63 >> 2] = $2; //@line 23024
  $64 = $ReallocAsyncCtx7 + 12 | 0; //@line 23025
  HEAP32[$64 >> 2] = $10; //@line 23026
  sp = STACKTOP; //@line 23027
  return;
 }
 $42 = $2 + 2544 | 0; //@line 23030
 $43 = HEAP32[$42 >> 2] | 0; //@line 23031
 if (!$43) {
  $54 = HEAP32[$38 + 4 >> 2] | 0; //@line 23035
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 23036
  FUNCTION_TABLE_vii[$54 & 15]($40, $36); //@line 23037
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 358; //@line 23040
   $55 = $ReallocAsyncCtx6 + 4 | 0; //@line 23041
   HEAP32[$55 >> 2] = $37; //@line 23042
   $56 = $ReallocAsyncCtx6 + 8 | 0; //@line 23043
   HEAP32[$56 >> 2] = $42; //@line 23044
   $57 = $ReallocAsyncCtx6 + 12 | 0; //@line 23045
   HEAP32[$57 >> 2] = $2; //@line 23046
   $58 = $ReallocAsyncCtx6 + 16 | 0; //@line 23047
   HEAP32[$58 >> 2] = $10; //@line 23048
   $59 = $ReallocAsyncCtx6 + 20 | 0; //@line 23049
   HEAP32[$59 >> 2] = $36; //@line 23050
   sp = STACKTOP; //@line 23051
   return;
  }
  ___async_unwind = 0; //@line 23054
  HEAP32[$ReallocAsyncCtx6 >> 2] = 358; //@line 23055
  $55 = $ReallocAsyncCtx6 + 4 | 0; //@line 23056
  HEAP32[$55 >> 2] = $37; //@line 23057
  $56 = $ReallocAsyncCtx6 + 8 | 0; //@line 23058
  HEAP32[$56 >> 2] = $42; //@line 23059
  $57 = $ReallocAsyncCtx6 + 12 | 0; //@line 23060
  HEAP32[$57 >> 2] = $2; //@line 23061
  $58 = $ReallocAsyncCtx6 + 16 | 0; //@line 23062
  HEAP32[$58 >> 2] = $10; //@line 23063
  $59 = $ReallocAsyncCtx6 + 20 | 0; //@line 23064
  HEAP32[$59 >> 2] = $36; //@line 23065
  sp = STACKTOP; //@line 23066
  return;
 } else {
  $46 = HEAP32[$43 + 8 >> 2] | 0; //@line 23070
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 23071
  FUNCTION_TABLE_vi[$46 & 1023]($40); //@line 23072
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 357; //@line 23075
   $47 = $ReallocAsyncCtx5 + 4 | 0; //@line 23076
   HEAP32[$47 >> 2] = $37; //@line 23077
   $48 = $ReallocAsyncCtx5 + 8 | 0; //@line 23078
   HEAP32[$48 >> 2] = $42; //@line 23079
   $49 = $ReallocAsyncCtx5 + 12 | 0; //@line 23080
   HEAP32[$49 >> 2] = $2; //@line 23081
   $50 = $ReallocAsyncCtx5 + 16 | 0; //@line 23082
   HEAP32[$50 >> 2] = $40; //@line 23083
   $51 = $ReallocAsyncCtx5 + 20 | 0; //@line 23084
   HEAP32[$51 >> 2] = $36; //@line 23085
   $52 = $ReallocAsyncCtx5 + 24 | 0; //@line 23086
   HEAP32[$52 >> 2] = $10; //@line 23087
   sp = STACKTOP; //@line 23088
   return;
  }
  ___async_unwind = 0; //@line 23091
  HEAP32[$ReallocAsyncCtx5 >> 2] = 357; //@line 23092
  $47 = $ReallocAsyncCtx5 + 4 | 0; //@line 23093
  HEAP32[$47 >> 2] = $37; //@line 23094
  $48 = $ReallocAsyncCtx5 + 8 | 0; //@line 23095
  HEAP32[$48 >> 2] = $42; //@line 23096
  $49 = $ReallocAsyncCtx5 + 12 | 0; //@line 23097
  HEAP32[$49 >> 2] = $2; //@line 23098
  $50 = $ReallocAsyncCtx5 + 16 | 0; //@line 23099
  HEAP32[$50 >> 2] = $40; //@line 23100
  $51 = $ReallocAsyncCtx5 + 20 | 0; //@line 23101
  HEAP32[$51 >> 2] = $36; //@line 23102
  $52 = $ReallocAsyncCtx5 + 24 | 0; //@line 23103
  HEAP32[$52 >> 2] = $10; //@line 23104
  sp = STACKTOP; //@line 23105
  return;
 }
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$036 = 0, $$038 = 0, $10 = 0, $104 = 0, $107 = 0, $110 = 0, $114 = 0, $117 = 0, $126 = 0, $129 = 0, $132 = 0, $134 = 0, $137 = 0, $16 = 0, $19 = 0, $20 = 0, $26 = 0, $27 = 0, $3 = 0, $30 = 0, $41 = 0, $43 = 0, $47 = 0, $5 = 0, $52 = 0, $54 = 0, $55 = 0, $57 = 0, $58 = 0, $6 = 0, $61 = 0, $7 = 0, $71 = 0, $74 = 0, $87 = 0, $90 = 0, $95 = 0, $98 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx16 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx24 = 0, $AsyncCtx27 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 20210
 $3 = HEAP8[$1 + 1 >> 0] | 0; //@line 20212
 $5 = HEAP32[$1 + 4 >> 2] | 0; //@line 20214
 $6 = $0 + 4 | 0; //@line 20215
 $7 = HEAP32[$6 >> 2] | 0; //@line 20216
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 72 >> 2] | 0; //@line 20219
 $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 20220
 FUNCTION_TABLE_vi[$10 & 1023]($7); //@line 20221
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 518; //@line 20224
  HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 20226
  HEAP8[$AsyncCtx + 8 >> 0] = $3; //@line 20228
  HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 20230
  HEAP32[$AsyncCtx + 16 >> 2] = $5; //@line 20232
  HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 20234
  sp = STACKTOP; //@line 20235
  return 0; //@line 20236
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 20238
 $16 = HEAP32[$6 >> 2] | 0; //@line 20239
 $19 = HEAP32[(HEAP32[$16 >> 2] | 0) + 40 >> 2] | 0; //@line 20242
 $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 20243
 $20 = FUNCTION_TABLE_ii[$19 & 15]($16) | 0; //@line 20244
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 519; //@line 20247
  HEAP8[$AsyncCtx2 + 4 >> 0] = $3; //@line 20249
  HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 20251
  HEAP32[$AsyncCtx2 + 12 >> 2] = $6; //@line 20253
  HEAP32[$AsyncCtx2 + 16 >> 2] = $5; //@line 20255
  HEAP32[$AsyncCtx2 + 20 >> 2] = $0; //@line 20257
  sp = STACKTOP; //@line 20258
  return 0; //@line 20259
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 20261
 $26 = $20 << 24 >> 24 == 0; //@line 20262
 $27 = HEAP32[$6 >> 2] | 0; //@line 20263
 $30 = HEAP32[(HEAP32[$27 >> 2] | 0) + 76 >> 2] | 0; //@line 20266
 $AsyncCtx5 = _emscripten_alloc_async_context(28, sp) | 0; //@line 20267
 FUNCTION_TABLE_vi[$30 & 1023]($27); //@line 20268
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 520; //@line 20271
  HEAP8[$AsyncCtx5 + 4 >> 0] = $3; //@line 20273
  HEAP32[$AsyncCtx5 + 8 >> 2] = $1; //@line 20275
  HEAP32[$AsyncCtx5 + 12 >> 2] = $6; //@line 20277
  HEAP32[$AsyncCtx5 + 16 >> 2] = $5; //@line 20279
  HEAP32[$AsyncCtx5 + 20 >> 2] = $0; //@line 20281
  HEAP8[$AsyncCtx5 + 24 >> 0] = $26 & 1; //@line 20284
  sp = STACKTOP; //@line 20285
  return 0; //@line 20286
 }
 _emscripten_free_async_context($AsyncCtx5 | 0); //@line 20288
 if (!$26) {
  $$0 = 0; //@line 20290
  return $$0 | 0; //@line 20291
 }
 if (!(HEAP32[$1 + 20 >> 2] | 0)) {
  $41 = HEAP32[$0 + 124 >> 2] | 0; //@line 20298
  $43 = HEAPU8[$1 >> 0] | 0; //@line 20300
  $47 = HEAP32[$41 + ($43 * 12 | 0) + 4 >> 2] | 0; //@line 20304
  $$038 = ($47 | 0) == 0 ? HEAP32[$41 + ($43 * 12 | 0) >> 2] | 0 : $47; //@line 20307
 } else {
  $$038 = $5; //@line 20309
 }
 $52 = HEAP32[$0 + 96 >> 2] | 0; //@line 20314
 $54 = HEAP32[$0 + 104 >> 2] | 0; //@line 20316
 $55 = $3 & 255; //@line 20317
 $57 = HEAP8[(HEAP32[$0 + 88 >> 2] | 0) + $55 >> 0] | 0; //@line 20319
 $58 = HEAP32[$6 >> 2] | 0; //@line 20320
 $61 = HEAP32[(HEAP32[$58 >> 2] | 0) + 72 >> 2] | 0; //@line 20323
 $AsyncCtx9 = _emscripten_alloc_async_context(40, sp) | 0; //@line 20324
 FUNCTION_TABLE_vi[$61 & 1023]($58); //@line 20325
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 521; //@line 20328
  HEAP32[$AsyncCtx9 + 4 >> 2] = $6; //@line 20330
  HEAP32[$AsyncCtx9 + 8 >> 2] = $$038; //@line 20332
  HEAP8[$AsyncCtx9 + 12 >> 0] = $3; //@line 20334
  HEAP32[$AsyncCtx9 + 16 >> 2] = $0; //@line 20336
  HEAP32[$AsyncCtx9 + 20 >> 2] = $1; //@line 20338
  HEAP8[$AsyncCtx9 + 24 >> 0] = $57; //@line 20340
  HEAP32[$AsyncCtx9 + 28 >> 2] = $52; //@line 20342
  HEAP32[$AsyncCtx9 + 32 >> 2] = $54; //@line 20344
  HEAP32[$AsyncCtx9 + 36 >> 2] = $55; //@line 20346
  sp = STACKTOP; //@line 20347
  return 0; //@line 20348
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 20350
 $71 = HEAP32[$6 >> 2] | 0; //@line 20351
 $74 = HEAP32[(HEAP32[$71 >> 2] | 0) + 32 >> 2] | 0; //@line 20354
 $AsyncCtx12 = _emscripten_alloc_async_context(36, sp) | 0; //@line 20355
 FUNCTION_TABLE_vii[$74 & 15]($71, $$038); //@line 20356
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 522; //@line 20359
  HEAP8[$AsyncCtx12 + 4 >> 0] = $3; //@line 20361
  HEAP32[$AsyncCtx12 + 8 >> 2] = $0; //@line 20363
  HEAP32[$AsyncCtx12 + 12 >> 2] = $6; //@line 20365
  HEAP32[$AsyncCtx12 + 16 >> 2] = $1; //@line 20367
  HEAP8[$AsyncCtx12 + 20 >> 0] = $57; //@line 20369
  HEAP32[$AsyncCtx12 + 24 >> 2] = $52; //@line 20371
  HEAP32[$AsyncCtx12 + 28 >> 2] = $54; //@line 20373
  HEAP32[$AsyncCtx12 + 32 >> 2] = $55; //@line 20375
  sp = STACKTOP; //@line 20376
  return 0; //@line 20377
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 20379
 do {
  if ($3 << 24 >> 24 == 7) {
   if (!(HEAP8[$0 + 14 >> 0] | 0)) {
    label = 19; //@line 20387
   } else {
    $87 = HEAP32[$6 >> 2] | 0; //@line 20389
    $90 = HEAP32[(HEAP32[$87 >> 2] | 0) + 16 >> 2] | 0; //@line 20392
    $95 = HEAP32[$1 + 8 >> 2] & 65535; //@line 20397
    $98 = (HEAP8[$1 + 18 >> 0] | 0) != 0; //@line 20400
    $AsyncCtx16 = _emscripten_alloc_async_context(24, sp) | 0; //@line 20401
    FUNCTION_TABLE_viiiiiiiiiiiiiii[$90 & 1]($87, 0, 5e4, ($57 & 255) * 1e3 | 0, 0, 83333, 5, $95, 0, 0, 1, 0, 0, 0, $98); //@line 20402
    if (___async) {
     HEAP32[$AsyncCtx16 >> 2] = 523; //@line 20405
     HEAP32[$AsyncCtx16 + 4 >> 2] = $1; //@line 20407
     HEAP32[$AsyncCtx16 + 8 >> 2] = $52; //@line 20409
     HEAP32[$AsyncCtx16 + 12 >> 2] = $54; //@line 20411
     HEAP32[$AsyncCtx16 + 16 >> 2] = $55; //@line 20413
     HEAP32[$AsyncCtx16 + 20 >> 2] = $6; //@line 20415
     sp = STACKTOP; //@line 20416
     return 0; //@line 20417
    } else {
     _emscripten_free_async_context($AsyncCtx16 | 0); //@line 20419
     $$036 = 0; //@line 20420
     break;
    }
   }
  } else {
   label = 19; //@line 20425
  }
 } while (0);
 do {
  if ((label | 0) == 19) {
   $104 = HEAP32[$6 >> 2] | 0; //@line 20430
   $107 = HEAP32[(HEAP32[$104 >> 2] | 0) + 16 >> 2] | 0; //@line 20433
   $110 = HEAPU8[$1 + 2 >> 0] | 0; //@line 20436
   $114 = HEAP32[$1 + 8 >> 2] & 65535; //@line 20440
   $117 = (HEAP8[$1 + 18 >> 0] | 0) != 0; //@line 20443
   $AsyncCtx20 = _emscripten_alloc_async_context(24, sp) | 0; //@line 20444
   FUNCTION_TABLE_viiiiiiiiiiiiiii[$107 & 1]($104, 1, $110, $57 & 255, 1, 0, 8, $114, 0, 0, 0, 0, 0, 1, $117); //@line 20445
   if (___async) {
    HEAP32[$AsyncCtx20 >> 2] = 524; //@line 20448
    HEAP32[$AsyncCtx20 + 4 >> 2] = $1; //@line 20450
    HEAP32[$AsyncCtx20 + 8 >> 2] = $52; //@line 20452
    HEAP32[$AsyncCtx20 + 12 >> 2] = $54; //@line 20454
    HEAP32[$AsyncCtx20 + 16 >> 2] = $55; //@line 20456
    HEAP32[$AsyncCtx20 + 20 >> 2] = $6; //@line 20458
    sp = STACKTOP; //@line 20459
    return 0; //@line 20460
   } else {
    _emscripten_free_async_context($AsyncCtx20 | 0); //@line 20462
    $$036 = 1; //@line 20463
    break;
   }
  }
 } while (0);
 $126 = HEAP32[$6 >> 2] | 0; //@line 20474
 $129 = HEAP32[(HEAP32[$126 >> 2] | 0) + 44 >> 2] | 0; //@line 20477
 $132 = (HEAPU8[((HEAP8[$1 + 17 >> 0] | 0) == 0 ? $52 : $54) + $55 >> 0] | 0) + 13 & 255; //@line 20480
 $AsyncCtx24 = _emscripten_alloc_async_context(8, sp) | 0; //@line 20481
 FUNCTION_TABLE_viii[$129 & 7]($126, $$036, $132); //@line 20482
 if (___async) {
  HEAP32[$AsyncCtx24 >> 2] = 525; //@line 20485
  HEAP32[$AsyncCtx24 + 4 >> 2] = $6; //@line 20487
  sp = STACKTOP; //@line 20488
  return 0; //@line 20489
 }
 _emscripten_free_async_context($AsyncCtx24 | 0); //@line 20491
 $134 = HEAP32[$6 >> 2] | 0; //@line 20492
 $137 = HEAP32[(HEAP32[$134 >> 2] | 0) + 76 >> 2] | 0; //@line 20495
 $AsyncCtx27 = _emscripten_alloc_async_context(4, sp) | 0; //@line 20496
 FUNCTION_TABLE_vi[$137 & 1023]($134); //@line 20497
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 526; //@line 20500
  sp = STACKTOP; //@line 20501
  return 0; //@line 20502
 }
 _emscripten_free_async_context($AsyncCtx27 | 0); //@line 20504
 $$0 = 1; //@line 20505
 return $$0 | 0; //@line 20506
}
function _schedule_interrupt__async_cb($0) {
 $0 = $0 | 0;
 var $$0$i = 0, $100 = 0, $102 = 0, $107 = 0, $110 = 0, $112 = 0, $115 = 0, $116 = 0, $118 = 0, $12 = 0, $121 = 0, $129 = 0, $130 = 0, $131 = 0, $133 = 0, $135 = 0, $140 = 0, $147 = 0, $151 = 0, $154 = 0, $156 = 0, $159 = 0, $161 = 0, $168 = 0, $169 = 0, $17 = 0, $172 = 0, $174 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $187 = 0, $19 = 0, $190 = 0, $2 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $31 = 0, $33 = 0, $34 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $51 = 0, $52 = 0, $53 = 0, $55 = 0, $59 = 0, $60 = 0, $61 = 0, $63 = 0, $65 = 0, $66 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $83 = 0, $84 = 0, $85 = 0, $87 = 0, $9 = 0, $91 = 0, $92 = 0, $98 = 0, $99 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 27324
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27326
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27328
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 27332
 $8 = HEAP32[HEAP32[$0 + 12 >> 2] >> 2] | 0; //@line 27333
 $9 = $8 + 32 | 0; //@line 27334
 if (($AsyncRetVal | 0) != (HEAP32[$9 >> 2] | 0)) {
  $12 = $2 + 32 | 0; //@line 27338
  $17 = $AsyncRetVal - (HEAP32[$12 >> 2] | 0) & HEAP32[$2 + 12 >> 2]; //@line 27343
  HEAP32[$12 >> 2] = $AsyncRetVal; //@line 27344
  $19 = HEAP32[$2 + 8 >> 2] | 0; //@line 27346
  do {
   if (($19 | 0) == 1e6) {
    $98 = $17; //@line 27350
    $99 = 0; //@line 27350
   } else {
    $22 = HEAP8[$2 + 57 >> 0] | 0; //@line 27353
    $24 = ___muldi3($17 | 0, 0, 1e6, 0) | 0; //@line 27355
    $25 = tempRet0; //@line 27356
    if (!($22 << 24 >> 24)) {
     $59 = ___udivdi3($24 | 0, $25 | 0, $19 | 0, 0) | 0; //@line 27358
     $60 = tempRet0; //@line 27359
     $61 = ___muldi3($59 | 0, $60 | 0, $19 | 0, 0) | 0; //@line 27360
     $63 = _i64Subtract($24 | 0, $25 | 0, $61 | 0, tempRet0 | 0) | 0; //@line 27362
     $65 = $2 + 40 | 0; //@line 27364
     $66 = $65; //@line 27365
     $72 = _i64Add($63 | 0, tempRet0 | 0, HEAP32[$66 >> 2] | 0, HEAP32[$66 + 4 >> 2] | 0) | 0; //@line 27371
     $73 = tempRet0; //@line 27372
     $74 = $65; //@line 27373
     HEAP32[$74 >> 2] = $72; //@line 27375
     HEAP32[$74 + 4 >> 2] = $73; //@line 27378
     if ($73 >>> 0 < 0 | ($73 | 0) == 0 & $72 >>> 0 < $19 >>> 0) {
      $98 = $59; //@line 27385
      $99 = $60; //@line 27385
      break;
     }
     $83 = _i64Add($59 | 0, $60 | 0, 1, 0) | 0; //@line 27388
     $84 = tempRet0; //@line 27389
     $85 = _i64Subtract($72 | 0, $73 | 0, $19 | 0, 0) | 0; //@line 27390
     $87 = $65; //@line 27392
     HEAP32[$87 >> 2] = $85; //@line 27394
     HEAP32[$87 + 4 >> 2] = tempRet0; //@line 27397
     $98 = $83; //@line 27398
     $99 = $84; //@line 27398
     break;
    } else {
     $26 = $22 & 255; //@line 27401
     $27 = _bitshift64Lshr($24 | 0, $25 | 0, $26 | 0) | 0; //@line 27402
     $28 = tempRet0; //@line 27403
     $29 = _bitshift64Shl($27 | 0, $28 | 0, $26 | 0) | 0; //@line 27404
     $31 = _i64Subtract($24 | 0, $25 | 0, $29 | 0, tempRet0 | 0) | 0; //@line 27406
     $33 = $2 + 40 | 0; //@line 27408
     $34 = $33; //@line 27409
     $40 = _i64Add(HEAP32[$34 >> 2] | 0, HEAP32[$34 + 4 >> 2] | 0, $31 | 0, tempRet0 | 0) | 0; //@line 27415
     $41 = tempRet0; //@line 27416
     $42 = $33; //@line 27417
     HEAP32[$42 >> 2] = $40; //@line 27419
     HEAP32[$42 + 4 >> 2] = $41; //@line 27422
     if ($41 >>> 0 < 0 | ($41 | 0) == 0 & $40 >>> 0 < $19 >>> 0) {
      $98 = $27; //@line 27429
      $99 = $28; //@line 27429
      break;
     }
     $51 = _i64Add($27 | 0, $28 | 0, 1, 0) | 0; //@line 27432
     $52 = tempRet0; //@line 27433
     $53 = _i64Subtract($40 | 0, $41 | 0, $19 | 0, 0) | 0; //@line 27434
     $55 = $33; //@line 27436
     HEAP32[$55 >> 2] = $53; //@line 27438
     HEAP32[$55 + 4 >> 2] = tempRet0; //@line 27441
     $98 = $51; //@line 27442
     $99 = $52; //@line 27442
     break;
    }
   }
  } while (0);
  $91 = $2 + 48 | 0; //@line 27447
  $92 = $91; //@line 27448
  $100 = _i64Add(HEAP32[$92 >> 2] | 0, HEAP32[$92 + 4 >> 2] | 0, $98 | 0, $99 | 0) | 0; //@line 27454
  $102 = $91; //@line 27456
  HEAP32[$102 >> 2] = $100; //@line 27458
  HEAP32[$102 + 4 >> 2] = tempRet0; //@line 27461
 }
 $107 = HEAP32[$8 + 4 >> 2] | 0; //@line 27464
 if (!$107) {
  $187 = (HEAP32[$2 + 16 >> 2] | 0) + (HEAP32[$2 + 32 >> 2] | 0) & HEAP32[$2 + 12 >> 2]; //@line 27474
  $190 = HEAP32[(HEAP32[$4 >> 2] | 0) + 16 >> 2] | 0; //@line 27477
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 27478
  FUNCTION_TABLE_vi[$190 & 1023]($187); //@line 27479
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 631; //@line 27482
   sp = STACKTOP; //@line 27483
   return;
  }
  ___async_unwind = 0; //@line 27486
  HEAP32[$ReallocAsyncCtx7 >> 2] = 631; //@line 27487
  sp = STACKTOP; //@line 27488
  return;
 }
 $110 = $8 + 48 | 0; //@line 27492
 $112 = HEAP32[$110 >> 2] | 0; //@line 27494
 $115 = HEAP32[$110 + 4 >> 2] | 0; //@line 27497
 $116 = $107; //@line 27498
 $118 = HEAP32[$116 >> 2] | 0; //@line 27500
 $121 = HEAP32[$116 + 4 >> 2] | 0; //@line 27503
 if (!($121 >>> 0 > $115 >>> 0 | ($121 | 0) == ($115 | 0) & $118 >>> 0 > $112 >>> 0)) {
  $129 = HEAP32[(HEAP32[$4 >> 2] | 0) + 20 >> 2] | 0; //@line 27512
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 27513
  FUNCTION_TABLE_v[$129 & 15](); //@line 27514
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 626; //@line 27517
   sp = STACKTOP; //@line 27518
   return;
  }
  ___async_unwind = 0; //@line 27521
  HEAP32[$ReallocAsyncCtx2 >> 2] = 626; //@line 27522
  sp = STACKTOP; //@line 27523
  return;
 }
 $130 = _i64Subtract($118 | 0, $121 | 0, $112 | 0, $115 | 0) | 0; //@line 27526
 $131 = tempRet0; //@line 27527
 $133 = HEAP32[$8 + 16 >> 2] | 0; //@line 27529
 $135 = $8 + 24 | 0; //@line 27531
 $140 = HEAP32[$135 + 4 >> 2] | 0; //@line 27536
 do {
  if ($131 >>> 0 > $140 >>> 0 | (($131 | 0) == ($140 | 0) ? $130 >>> 0 > (HEAP32[$135 >> 2] | 0) >>> 0 : 0)) {
   $$0$i = $133; //@line 27544
  } else {
   $147 = HEAP32[$8 + 8 >> 2] | 0; //@line 27547
   if (($147 | 0) == 1e6) {
    $$0$i = $133 >>> 0 < $130 >>> 0 ? $133 : $130; //@line 27552
    break;
   }
   $151 = HEAP8[$8 + 57 >> 0] | 0; //@line 27556
   if (!($151 << 24 >> 24)) {
    $159 = ___muldi3($130 | 0, $131 | 0, $147 | 0, 0) | 0; //@line 27559
    $161 = ___udivdi3($159 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 27561
    $$0$i = $133 >>> 0 < $161 >>> 0 ? $133 : $161; //@line 27565
    break;
   } else {
    $154 = _bitshift64Shl($130 | 0, $131 | 0, $151 & 255 | 0) | 0; //@line 27569
    $156 = ___udivdi3($154 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 27571
    $$0$i = $133 >>> 0 < $156 >>> 0 ? $133 : $156; //@line 27575
    break;
   }
  }
 } while (0);
 $168 = (HEAP32[$9 >> 2] | 0) + $$0$i & HEAP32[$8 + 12 >> 2]; //@line 27584
 $169 = $2 + 32 | 0; //@line 27585
 $172 = HEAP32[$4 >> 2] | 0; //@line 27588
 if (($168 | 0) == (HEAP32[$169 >> 2] | 0)) {
  $174 = HEAP32[$172 + 20 >> 2] | 0; //@line 27591
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 27592
  FUNCTION_TABLE_v[$174 & 15](); //@line 27593
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 627; //@line 27596
   sp = STACKTOP; //@line 27597
   return;
  }
  ___async_unwind = 0; //@line 27600
  HEAP32[$ReallocAsyncCtx3 >> 2] = 627; //@line 27601
  sp = STACKTOP; //@line 27602
  return;
 } else {
  $176 = HEAP32[$172 + 16 >> 2] | 0; //@line 27606
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 27607
  FUNCTION_TABLE_vi[$176 & 1023]($168); //@line 27608
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 628; //@line 27611
   $177 = $ReallocAsyncCtx4 + 4 | 0; //@line 27612
   HEAP32[$177 >> 2] = $4; //@line 27613
   $178 = $ReallocAsyncCtx4 + 8 | 0; //@line 27614
   HEAP32[$178 >> 2] = $169; //@line 27615
   $179 = $ReallocAsyncCtx4 + 12 | 0; //@line 27616
   HEAP32[$179 >> 2] = $168; //@line 27617
   sp = STACKTOP; //@line 27618
   return;
  }
  ___async_unwind = 0; //@line 27621
  HEAP32[$ReallocAsyncCtx4 >> 2] = 628; //@line 27622
  $177 = $ReallocAsyncCtx4 + 4 | 0; //@line 27623
  HEAP32[$177 >> 2] = $4; //@line 27624
  $178 = $ReallocAsyncCtx4 + 8 | 0; //@line 27625
  HEAP32[$178 >> 2] = $169; //@line 27626
  $179 = $ReallocAsyncCtx4 + 12 | 0; //@line 27627
  HEAP32[$179 >> 2] = $168; //@line 27628
  sp = STACKTOP; //@line 27629
  return;
 }
}
function _mbed_die() {
 var $0 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx3 = 0, $AsyncCtx31 = 0, $AsyncCtx35 = 0, $AsyncCtx39 = 0, $AsyncCtx43 = 0, $AsyncCtx47 = 0, $AsyncCtx51 = 0, $AsyncCtx55 = 0, $AsyncCtx59 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6502
 STACKTOP = STACKTOP + 32 | 0; //@line 6503
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 6503
 $0 = sp; //@line 6504
 _gpio_init_out($0, 50); //@line 6505
 while (1) {
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 6508
  $AsyncCtx59 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6509
  _wait_ms(150); //@line 6510
  if (___async) {
   label = 3; //@line 6513
   break;
  }
  _emscripten_free_async_context($AsyncCtx59 | 0); //@line 6516
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 6518
  $AsyncCtx55 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6519
  _wait_ms(150); //@line 6520
  if (___async) {
   label = 5; //@line 6523
   break;
  }
  _emscripten_free_async_context($AsyncCtx55 | 0); //@line 6526
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 6528
  $AsyncCtx51 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6529
  _wait_ms(150); //@line 6530
  if (___async) {
   label = 7; //@line 6533
   break;
  }
  _emscripten_free_async_context($AsyncCtx51 | 0); //@line 6536
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 6538
  $AsyncCtx47 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6539
  _wait_ms(150); //@line 6540
  if (___async) {
   label = 9; //@line 6543
   break;
  }
  _emscripten_free_async_context($AsyncCtx47 | 0); //@line 6546
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 6548
  $AsyncCtx43 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6549
  _wait_ms(150); //@line 6550
  if (___async) {
   label = 11; //@line 6553
   break;
  }
  _emscripten_free_async_context($AsyncCtx43 | 0); //@line 6556
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 6558
  $AsyncCtx39 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6559
  _wait_ms(150); //@line 6560
  if (___async) {
   label = 13; //@line 6563
   break;
  }
  _emscripten_free_async_context($AsyncCtx39 | 0); //@line 6566
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 6568
  $AsyncCtx35 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6569
  _wait_ms(150); //@line 6570
  if (___async) {
   label = 15; //@line 6573
   break;
  }
  _emscripten_free_async_context($AsyncCtx35 | 0); //@line 6576
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 6578
  $AsyncCtx31 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6579
  _wait_ms(150); //@line 6580
  if (___async) {
   label = 17; //@line 6583
   break;
  }
  _emscripten_free_async_context($AsyncCtx31 | 0); //@line 6586
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 6588
  $AsyncCtx27 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6589
  _wait_ms(400); //@line 6590
  if (___async) {
   label = 19; //@line 6593
   break;
  }
  _emscripten_free_async_context($AsyncCtx27 | 0); //@line 6596
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 6598
  $AsyncCtx23 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6599
  _wait_ms(400); //@line 6600
  if (___async) {
   label = 21; //@line 6603
   break;
  }
  _emscripten_free_async_context($AsyncCtx23 | 0); //@line 6606
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 6608
  $AsyncCtx19 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6609
  _wait_ms(400); //@line 6610
  if (___async) {
   label = 23; //@line 6613
   break;
  }
  _emscripten_free_async_context($AsyncCtx19 | 0); //@line 6616
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 6618
  $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6619
  _wait_ms(400); //@line 6620
  if (___async) {
   label = 25; //@line 6623
   break;
  }
  _emscripten_free_async_context($AsyncCtx15 | 0); //@line 6626
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 6628
  $AsyncCtx11 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6629
  _wait_ms(400); //@line 6630
  if (___async) {
   label = 27; //@line 6633
   break;
  }
  _emscripten_free_async_context($AsyncCtx11 | 0); //@line 6636
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 6638
  $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6639
  _wait_ms(400); //@line 6640
  if (___async) {
   label = 29; //@line 6643
   break;
  }
  _emscripten_free_async_context($AsyncCtx7 | 0); //@line 6646
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 6648
  $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6649
  _wait_ms(400); //@line 6650
  if (___async) {
   label = 31; //@line 6653
   break;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 6656
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 6658
  $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 6659
  _wait_ms(400); //@line 6660
  if (___async) {
   label = 33; //@line 6663
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6666
 }
 switch (label | 0) {
 case 3:
  {
   HEAP32[$AsyncCtx59 >> 2] = 636; //@line 6670
   HEAP32[$AsyncCtx59 + 4 >> 2] = $0; //@line 6672
   sp = STACKTOP; //@line 6673
   STACKTOP = sp; //@line 6674
   return;
  }
 case 5:
  {
   HEAP32[$AsyncCtx55 >> 2] = 637; //@line 6678
   HEAP32[$AsyncCtx55 + 4 >> 2] = $0; //@line 6680
   sp = STACKTOP; //@line 6681
   STACKTOP = sp; //@line 6682
   return;
  }
 case 7:
  {
   HEAP32[$AsyncCtx51 >> 2] = 638; //@line 6686
   HEAP32[$AsyncCtx51 + 4 >> 2] = $0; //@line 6688
   sp = STACKTOP; //@line 6689
   STACKTOP = sp; //@line 6690
   return;
  }
 case 9:
  {
   HEAP32[$AsyncCtx47 >> 2] = 639; //@line 6694
   HEAP32[$AsyncCtx47 + 4 >> 2] = $0; //@line 6696
   sp = STACKTOP; //@line 6697
   STACKTOP = sp; //@line 6698
   return;
  }
 case 11:
  {
   HEAP32[$AsyncCtx43 >> 2] = 640; //@line 6702
   HEAP32[$AsyncCtx43 + 4 >> 2] = $0; //@line 6704
   sp = STACKTOP; //@line 6705
   STACKTOP = sp; //@line 6706
   return;
  }
 case 13:
  {
   HEAP32[$AsyncCtx39 >> 2] = 641; //@line 6710
   HEAP32[$AsyncCtx39 + 4 >> 2] = $0; //@line 6712
   sp = STACKTOP; //@line 6713
   STACKTOP = sp; //@line 6714
   return;
  }
 case 15:
  {
   HEAP32[$AsyncCtx35 >> 2] = 642; //@line 6718
   HEAP32[$AsyncCtx35 + 4 >> 2] = $0; //@line 6720
   sp = STACKTOP; //@line 6721
   STACKTOP = sp; //@line 6722
   return;
  }
 case 17:
  {
   HEAP32[$AsyncCtx31 >> 2] = 643; //@line 6726
   HEAP32[$AsyncCtx31 + 4 >> 2] = $0; //@line 6728
   sp = STACKTOP; //@line 6729
   STACKTOP = sp; //@line 6730
   return;
  }
 case 19:
  {
   HEAP32[$AsyncCtx27 >> 2] = 644; //@line 6734
   HEAP32[$AsyncCtx27 + 4 >> 2] = $0; //@line 6736
   sp = STACKTOP; //@line 6737
   STACKTOP = sp; //@line 6738
   return;
  }
 case 21:
  {
   HEAP32[$AsyncCtx23 >> 2] = 645; //@line 6742
   HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 6744
   sp = STACKTOP; //@line 6745
   STACKTOP = sp; //@line 6746
   return;
  }
 case 23:
  {
   HEAP32[$AsyncCtx19 >> 2] = 646; //@line 6750
   HEAP32[$AsyncCtx19 + 4 >> 2] = $0; //@line 6752
   sp = STACKTOP; //@line 6753
   STACKTOP = sp; //@line 6754
   return;
  }
 case 25:
  {
   HEAP32[$AsyncCtx15 >> 2] = 647; //@line 6758
   HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 6760
   sp = STACKTOP; //@line 6761
   STACKTOP = sp; //@line 6762
   return;
  }
 case 27:
  {
   HEAP32[$AsyncCtx11 >> 2] = 648; //@line 6766
   HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 6768
   sp = STACKTOP; //@line 6769
   STACKTOP = sp; //@line 6770
   return;
  }
 case 29:
  {
   HEAP32[$AsyncCtx7 >> 2] = 649; //@line 6774
   HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 6776
   sp = STACKTOP; //@line 6777
   STACKTOP = sp; //@line 6778
   return;
  }
 case 31:
  {
   HEAP32[$AsyncCtx3 >> 2] = 650; //@line 6782
   HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 6784
   sp = STACKTOP; //@line 6785
   STACKTOP = sp; //@line 6786
   return;
  }
 case 33:
  {
   HEAP32[$AsyncCtx >> 2] = 651; //@line 6790
   HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 6792
   sp = STACKTOP; //@line 6793
   STACKTOP = sp; //@line 6794
   return;
  }
 }
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_244($0) {
 $0 = $0 | 0;
 var $$pre124 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 15875
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15877
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15879
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15881
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15883
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15885
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 15887
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 15889
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 15891
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 15893
 $$pre124 = HEAP32[$14 >> 2] | 0; //@line 15894
 if ($$pre124 | 0) {
  $21 = HEAP32[$$pre124 + 4 >> 2] | 0; //@line 15898
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(36) | 0; //@line 15899
  FUNCTION_TABLE_vii[$21 & 15]($4, $6); //@line 15900
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 190; //@line 15903
   $22 = $ReallocAsyncCtx8 + 4 | 0; //@line 15904
   HEAP32[$22 >> 2] = $6; //@line 15905
   $23 = $ReallocAsyncCtx8 + 8 | 0; //@line 15906
   HEAP32[$23 >> 2] = $8; //@line 15907
   $24 = $ReallocAsyncCtx8 + 12 | 0; //@line 15908
   HEAP32[$24 >> 2] = $10; //@line 15909
   $25 = $ReallocAsyncCtx8 + 16 | 0; //@line 15910
   HEAP32[$25 >> 2] = $12; //@line 15911
   $26 = $ReallocAsyncCtx8 + 20 | 0; //@line 15912
   HEAP32[$26 >> 2] = $14; //@line 15913
   $27 = $ReallocAsyncCtx8 + 24 | 0; //@line 15914
   HEAP32[$27 >> 2] = $2; //@line 15915
   $28 = $ReallocAsyncCtx8 + 28 | 0; //@line 15916
   HEAP32[$28 >> 2] = $16; //@line 15917
   $29 = $ReallocAsyncCtx8 + 32 | 0; //@line 15918
   HEAP32[$29 >> 2] = $18; //@line 15919
   sp = STACKTOP; //@line 15920
   return;
  }
  ___async_unwind = 0; //@line 15923
  HEAP32[$ReallocAsyncCtx8 >> 2] = 190; //@line 15924
  $22 = $ReallocAsyncCtx8 + 4 | 0; //@line 15925
  HEAP32[$22 >> 2] = $6; //@line 15926
  $23 = $ReallocAsyncCtx8 + 8 | 0; //@line 15927
  HEAP32[$23 >> 2] = $8; //@line 15928
  $24 = $ReallocAsyncCtx8 + 12 | 0; //@line 15929
  HEAP32[$24 >> 2] = $10; //@line 15930
  $25 = $ReallocAsyncCtx8 + 16 | 0; //@line 15931
  HEAP32[$25 >> 2] = $12; //@line 15932
  $26 = $ReallocAsyncCtx8 + 20 | 0; //@line 15933
  HEAP32[$26 >> 2] = $14; //@line 15934
  $27 = $ReallocAsyncCtx8 + 24 | 0; //@line 15935
  HEAP32[$27 >> 2] = $2; //@line 15936
  $28 = $ReallocAsyncCtx8 + 28 | 0; //@line 15937
  HEAP32[$28 >> 2] = $16; //@line 15938
  $29 = $ReallocAsyncCtx8 + 32 | 0; //@line 15939
  HEAP32[$29 >> 2] = $18; //@line 15940
  sp = STACKTOP; //@line 15941
  return;
 }
 HEAP32[$2 >> 2] = 0; //@line 15944
 $30 = $8 + 12 | 0; //@line 15945
 HEAP32[$8 >> 2] = 192; //@line 15946
 HEAP32[$8 + 4 >> 2] = 0; //@line 15948
 HEAP32[$8 + 8 >> 2] = $10; //@line 15950
 HEAP32[$30 >> 2] = 824; //@line 15951
 $31 = $10 + 2400 | 0; //@line 15952
 if (($31 | 0) == ($8 | 0)) {
  $56 = HEAP32[208] | 0; //@line 15956
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(24) | 0; //@line 15957
  FUNCTION_TABLE_vi[$56 & 1023]($8); //@line 15958
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 195; //@line 15961
   $57 = $ReallocAsyncCtx12 + 4 | 0; //@line 15962
   HEAP32[$57 >> 2] = $12; //@line 15963
   $58 = $ReallocAsyncCtx12 + 8 | 0; //@line 15964
   HEAP32[$58 >> 2] = $10; //@line 15965
   $59 = $ReallocAsyncCtx12 + 12 | 0; //@line 15966
   HEAP32[$59 >> 2] = $8; //@line 15967
   $60 = $ReallocAsyncCtx12 + 16 | 0; //@line 15968
   HEAP32[$60 >> 2] = $16; //@line 15969
   $61 = $ReallocAsyncCtx12 + 20 | 0; //@line 15970
   HEAP32[$61 >> 2] = $18; //@line 15971
   sp = STACKTOP; //@line 15972
   return;
  }
  ___async_unwind = 0; //@line 15975
  HEAP32[$ReallocAsyncCtx12 >> 2] = 195; //@line 15976
  $57 = $ReallocAsyncCtx12 + 4 | 0; //@line 15977
  HEAP32[$57 >> 2] = $12; //@line 15978
  $58 = $ReallocAsyncCtx12 + 8 | 0; //@line 15979
  HEAP32[$58 >> 2] = $10; //@line 15980
  $59 = $ReallocAsyncCtx12 + 12 | 0; //@line 15981
  HEAP32[$59 >> 2] = $8; //@line 15982
  $60 = $ReallocAsyncCtx12 + 16 | 0; //@line 15983
  HEAP32[$60 >> 2] = $16; //@line 15984
  $61 = $ReallocAsyncCtx12 + 20 | 0; //@line 15985
  HEAP32[$61 >> 2] = $18; //@line 15986
  sp = STACKTOP; //@line 15987
  return;
 }
 $33 = $10 + 2412 | 0; //@line 15990
 $34 = HEAP32[$33 >> 2] | 0; //@line 15991
 if (!$34) {
  $47 = HEAP32[207] | 0; //@line 15995
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(32) | 0; //@line 15996
  FUNCTION_TABLE_vii[$47 & 15]($31, $8); //@line 15997
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 194; //@line 16000
   $48 = $ReallocAsyncCtx11 + 4 | 0; //@line 16001
   HEAP32[$48 >> 2] = $12; //@line 16002
   $49 = $ReallocAsyncCtx11 + 8 | 0; //@line 16003
   HEAP32[$49 >> 2] = $30; //@line 16004
   $50 = $ReallocAsyncCtx11 + 12 | 0; //@line 16005
   HEAP32[$50 >> 2] = $33; //@line 16006
   $51 = $ReallocAsyncCtx11 + 16 | 0; //@line 16007
   HEAP32[$51 >> 2] = $10; //@line 16008
   $52 = $ReallocAsyncCtx11 + 20 | 0; //@line 16009
   HEAP32[$52 >> 2] = $8; //@line 16010
   $53 = $ReallocAsyncCtx11 + 24 | 0; //@line 16011
   HEAP32[$53 >> 2] = $16; //@line 16012
   $54 = $ReallocAsyncCtx11 + 28 | 0; //@line 16013
   HEAP32[$54 >> 2] = $18; //@line 16014
   sp = STACKTOP; //@line 16015
   return;
  }
  ___async_unwind = 0; //@line 16018
  HEAP32[$ReallocAsyncCtx11 >> 2] = 194; //@line 16019
  $48 = $ReallocAsyncCtx11 + 4 | 0; //@line 16020
  HEAP32[$48 >> 2] = $12; //@line 16021
  $49 = $ReallocAsyncCtx11 + 8 | 0; //@line 16022
  HEAP32[$49 >> 2] = $30; //@line 16023
  $50 = $ReallocAsyncCtx11 + 12 | 0; //@line 16024
  HEAP32[$50 >> 2] = $33; //@line 16025
  $51 = $ReallocAsyncCtx11 + 16 | 0; //@line 16026
  HEAP32[$51 >> 2] = $10; //@line 16027
  $52 = $ReallocAsyncCtx11 + 20 | 0; //@line 16028
  HEAP32[$52 >> 2] = $8; //@line 16029
  $53 = $ReallocAsyncCtx11 + 24 | 0; //@line 16030
  HEAP32[$53 >> 2] = $16; //@line 16031
  $54 = $ReallocAsyncCtx11 + 28 | 0; //@line 16032
  HEAP32[$54 >> 2] = $18; //@line 16033
  sp = STACKTOP; //@line 16034
  return;
 } else {
  $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 16038
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(36) | 0; //@line 16039
  FUNCTION_TABLE_vi[$37 & 1023]($31); //@line 16040
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 193; //@line 16043
   $38 = $ReallocAsyncCtx10 + 4 | 0; //@line 16044
   HEAP32[$38 >> 2] = $30; //@line 16045
   $39 = $ReallocAsyncCtx10 + 8 | 0; //@line 16046
   HEAP32[$39 >> 2] = $12; //@line 16047
   $40 = $ReallocAsyncCtx10 + 12 | 0; //@line 16048
   HEAP32[$40 >> 2] = $33; //@line 16049
   $41 = $ReallocAsyncCtx10 + 16 | 0; //@line 16050
   HEAP32[$41 >> 2] = $10; //@line 16051
   $42 = $ReallocAsyncCtx10 + 20 | 0; //@line 16052
   HEAP32[$42 >> 2] = $31; //@line 16053
   $43 = $ReallocAsyncCtx10 + 24 | 0; //@line 16054
   HEAP32[$43 >> 2] = $8; //@line 16055
   $44 = $ReallocAsyncCtx10 + 28 | 0; //@line 16056
   HEAP32[$44 >> 2] = $16; //@line 16057
   $45 = $ReallocAsyncCtx10 + 32 | 0; //@line 16058
   HEAP32[$45 >> 2] = $18; //@line 16059
   sp = STACKTOP; //@line 16060
   return;
  }
  ___async_unwind = 0; //@line 16063
  HEAP32[$ReallocAsyncCtx10 >> 2] = 193; //@line 16064
  $38 = $ReallocAsyncCtx10 + 4 | 0; //@line 16065
  HEAP32[$38 >> 2] = $30; //@line 16066
  $39 = $ReallocAsyncCtx10 + 8 | 0; //@line 16067
  HEAP32[$39 >> 2] = $12; //@line 16068
  $40 = $ReallocAsyncCtx10 + 12 | 0; //@line 16069
  HEAP32[$40 >> 2] = $33; //@line 16070
  $41 = $ReallocAsyncCtx10 + 16 | 0; //@line 16071
  HEAP32[$41 >> 2] = $10; //@line 16072
  $42 = $ReallocAsyncCtx10 + 20 | 0; //@line 16073
  HEAP32[$42 >> 2] = $31; //@line 16074
  $43 = $ReallocAsyncCtx10 + 24 | 0; //@line 16075
  HEAP32[$43 >> 2] = $8; //@line 16076
  $44 = $ReallocAsyncCtx10 + 28 | 0; //@line 16077
  HEAP32[$44 >> 2] = $16; //@line 16078
  $45 = $ReallocAsyncCtx10 + 32 | 0; //@line 16079
  HEAP32[$45 >> 2] = $18; //@line 16080
  sp = STACKTOP; //@line 16081
  return;
 }
}
function __ZN7LoRaMac11schedule_txEv($0) {
 $0 = $0 | 0;
 var $$2 = 0, $$pre$phiZ2D = 0, $$sink = 0, $1 = 0, $100 = 0, $103 = 0, $11 = 0, $115 = 0, $12 = 0, $13 = 0, $137 = 0, $14 = 0, $142 = 0, $147 = 0, $2 = 0, $20 = 0, $22 = 0, $27 = 0, $28 = 0, $3 = 0, $30 = 0, $37 = 0, $38 = 0, $39 = 0, $42 = 0, $48 = 0, $53 = 0, $55 = 0, $6 = 0, $73 = 0, $74 = 0, $76 = 0, $8 = 0, $84 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx6 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 14808
 STACKTOP = STACKTOP + 48 | 0; //@line 14809
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 14809
 $vararg_buffer1 = sp + 8 | 0; //@line 14810
 $vararg_buffer = sp; //@line 14811
 $1 = sp + 40 | 0; //@line 14812
 $2 = sp + 28 | 0; //@line 14813
 $3 = sp + 24 | 0; //@line 14814
 HEAP32[$3 >> 2] = 0; //@line 14815
 switch (HEAP8[$0 + 1932 >> 0] | 0) {
 case 0:
  {
   $6 = $0 + 1784 | 0; //@line 14820
   HEAP32[$6 >> 2] = 0; //@line 14821
   $$pre$phiZ2D = $6; //@line 14822
   break;
  }
 case -1:
  {
   $$2 = -1011; //@line 14826
   STACKTOP = sp; //@line 14827
   return $$2 | 0; //@line 14827
  }
 default:
  {
   $$pre$phiZ2D = $0 + 1784 | 0; //@line 14832
  }
 }
 $8 = HEAP8[$0 + 1183 >> 0] | 0; //@line 14836
 $11 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj($0, HEAP32[$0 + 1788 >> 2] | 0) | 0; //@line 14839
 $12 = $0 + 1179 | 0; //@line 14840
 HEAP8[$12 >> 0] = 1; //@line 14841
 $13 = $0 + 4 | 0; //@line 14842
 $14 = $0 + 2376 | 0; //@line 14843
 $20 = $0 + 1792 | 0; //@line 14849
 __ZN7LoRaPHY17calculate_backoffEbbbhjj($13, (HEAP8[$14 >> 0] | 0) != 0, (HEAP8[$0 + 1180 >> 0] | 0) != 0, 1, $8, $11, HEAP32[$20 >> 2] | 0); //@line 14851
 $22 = HEAP32[$20 >> 2] | 0; //@line 14852
 $27 = (Math_imul($22, HEAPU16[$0 + 1934 >> 1] | 0) | 0) - $22 | 0; //@line 14857
 HEAP32[$$pre$phiZ2D >> 2] = $27; //@line 14858
 HEAP32[$2 >> 2] = $27; //@line 14859
 $28 = $0 + 1877 | 0; //@line 14860
 $30 = $2 + 8 | 0; //@line 14862
 HEAP8[$30 >> 0] = HEAP8[$28 >> 0] | 0; //@line 14863
 HEAP8[$12 >> 0] = 1; //@line 14864
 HEAP8[$2 + 10 >> 0] = 1; //@line 14866
 HEAP8[$2 + 9 >> 0] = HEAP8[$14 >> 0] | 0; //@line 14869
 HEAP32[$2 + 4 >> 2] = HEAP32[$0 + 1780 >> 2]; //@line 14873
 $37 = $0 + 1182 | 0; //@line 14874
 $38 = __ZN7LoRaPHY16set_next_channelEP26channel_selection_params_sPhPjS3_($13, $2, $37, $3, $$pre$phiZ2D) | 0; //@line 14875
 switch ($38 | 0) {
 case -1020:
  {
   $39 = HEAP32[$3 >> 2] | 0; //@line 14878
   if (!$39) {
    $$2 = 0; //@line 14881
    STACKTOP = sp; //@line 14882
    return $$2 | 0; //@line 14882
   }
   HEAP32[$vararg_buffer >> 2] = $39; //@line 14884
   _mbed_tracef(16, 12890, 13004, $vararg_buffer); //@line 14885
   $42 = HEAP32[$3 >> 2] | 0; //@line 14887
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 14888
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($0, $0 + 1796 | 0, $42); //@line 14889
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 431; //@line 14892
    HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 14894
    HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 14896
    sp = STACKTOP; //@line 14897
    STACKTOP = sp; //@line 14898
    return 0; //@line 14898
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 14900
   $$2 = 0; //@line 14901
   STACKTOP = sp; //@line 14902
   return $$2 | 0; //@line 14902
  }
 case -1022:
 case -1021:
  {
   $$2 = $38; //@line 14906
   STACKTOP = sp; //@line 14907
   return $$2 | 0; //@line 14907
  }
 default:
  {
   $48 = HEAP8[$30 >> 0] | 0; //@line 14914
   HEAP32[$vararg_buffer1 >> 2] = HEAPU8[$37 >> 0]; //@line 14915
   HEAP32[$vararg_buffer1 + 4 >> 2] = $48; //@line 14917
   _mbed_tracef(16, 12890, 13040, $vararg_buffer1); //@line 14918
   $53 = $0 + 1884 | 0; //@line 14923
   $55 = $0 + 1880 | 0; //@line 14925
   __ZN7LoRaPHY21compute_rx_win_paramsEahjP18rx_config_params_t($13, __ZN7LoRaPHY15apply_DR_offsetEaa($13, HEAP8[$28 >> 0] | 0, HEAP8[$0 + 1909 >> 0] | 0) | 0, HEAP8[$53 >> 0] | 0, HEAP32[$55 >> 2] | 0, $0 + 1940 | 0); //@line 14928
   __ZN7LoRaPHY21compute_rx_win_paramsEahjP18rx_config_params_t($13, HEAP8[$0 + 1916 >> 0] | 0, HEAP8[$53 >> 0] | 0, HEAP32[$55 >> 2] | 0, $0 + 1964 | 0); //@line 14934
   do {
    if (!(HEAP8[$14 >> 0] | 0)) {
     HEAP32[$0 + 1772 >> 2] = (HEAP32[$0 + 1952 >> 2] | 0) + (HEAP32[$0 + 1900 >> 2] | 0); //@line 14945
     $$sink = $0 + 1904 | 0; //@line 14947
    } else {
     $73 = HEAP16[$0 + 1440 >> 1] | 0; //@line 14950
     $74 = HEAP8[$28 >> 0] | 0; //@line 14951
     $76 = __ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($0 + 476 | 0) | 0; //@line 14953
     $84 = ($76 & 255) + ($73 & 65535) & 65535; //@line 14961
     if ($84 >>> 0 < 256 & $84 >>> 0 <= ((__ZN7LoRaPHY15get_max_payloadEhb($13, $74, (HEAP8[$0 + 1173 >> 0] | 0) != 0) | 0) & 255) >>> 0) {
      HEAP32[$0 + 1772 >> 2] = (HEAP32[$0 + 1952 >> 2] | 0) + (HEAP32[$0 + 1892 >> 2] | 0); //@line 14973
      $$sink = $0 + 1896 | 0; //@line 14975
      break;
     } else {
      $$2 = -1010; //@line 14978
      STACKTOP = sp; //@line 14979
      return $$2 | 0; //@line 14979
     }
    }
   } while (0);
   HEAP32[$0 + 1776 >> 2] = (HEAP32[$0 + 1976 >> 2] | 0) + (HEAP32[$$sink >> 2] | 0); //@line 14988
   $100 = $0 + 1178 | 0; //@line 14989
   if (HEAP8[$100 >> 0] | 0) {
    HEAP8[$100 >> 0] = 0; //@line 14993
   }
   $103 = HEAP8[$37 >> 0] | 0; //@line 14995
   HEAP8[$1 >> 0] = 0; //@line 14996
   HEAP8[$vararg_buffer1 >> 0] = $103; //@line 14997
   HEAP8[$vararg_buffer1 + 1 >> 0] = HEAP8[$28 >> 0] | 0; //@line 15000
   HEAP8[$vararg_buffer1 + 2 >> 0] = HEAP8[$0 + 1876 >> 0] | 0; //@line 15004
   HEAP32[$vararg_buffer1 + 4 >> 2] = HEAP32[$0 + 1924 >> 2]; //@line 15008
   HEAP32[$vararg_buffer1 + 8 >> 2] = HEAP32[$0 + 1928 >> 2]; //@line 15012
   $115 = $0 + 1440 | 0; //@line 15013
   HEAP16[$vararg_buffer1 + 12 >> 1] = HEAP16[$115 >> 1] | 0; //@line 15016
   $AsyncCtx10 = _emscripten_alloc_async_context(48, sp) | 0; //@line 15017
   __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj($13, $vararg_buffer1, $1, $20) | 0; //@line 15018
   if (___async) {
    HEAP32[$AsyncCtx10 >> 2] = 432; //@line 15021
    HEAP32[$AsyncCtx10 + 4 >> 2] = $0; //@line 15023
    HEAP32[$AsyncCtx10 + 8 >> 2] = $28; //@line 15025
    HEAP32[$AsyncCtx10 + 12 >> 2] = $1; //@line 15027
    HEAP8[$AsyncCtx10 + 16 >> 0] = $103; //@line 15029
    HEAP32[$AsyncCtx10 + 20 >> 2] = $20; //@line 15031
    HEAP32[$AsyncCtx10 + 24 >> 2] = $14; //@line 15033
    HEAP32[$AsyncCtx10 + 28 >> 2] = $115; //@line 15035
    HEAP32[$AsyncCtx10 + 32 >> 2] = $13; //@line 15037
    HEAP32[$AsyncCtx10 + 36 >> 2] = $vararg_buffer1; //@line 15039
    HEAP32[$AsyncCtx10 + 40 >> 2] = $3; //@line 15041
    HEAP32[$AsyncCtx10 + 44 >> 2] = $2; //@line 15043
    sp = STACKTOP; //@line 15044
    STACKTOP = sp; //@line 15045
    return 0; //@line 15045
   }
   _emscripten_free_async_context($AsyncCtx10 | 0); //@line 15047
   HEAP32[$0 + 2092 >> 2] = 1; //@line 15049
   HEAP32[$0 + 2056 >> 2] = 1; //@line 15051
   HEAP8[$0 + 2060 >> 0] = HEAP8[$28 >> 0] | 0; //@line 15054
   HEAP8[$0 + 2061 >> 0] = HEAP8[$1 >> 0] | 0; //@line 15057
   HEAP32[$0 + 2072 >> 2] = $103 & 255; //@line 15060
   $137 = HEAP32[$20 >> 2] | 0; //@line 15061
   HEAP32[$0 + 2064 >> 2] = $137; //@line 15063
   HEAP32[$0 + 2096 >> 2] = $137; //@line 15065
   if (!(HEAP8[$14 >> 0] | 0)) {
    $142 = $0 + 1701 | 0; //@line 15069
    HEAP8[$142 >> 0] = (HEAP8[$142 >> 0] | 0) + 1 << 24 >> 24; //@line 15072
   }
   $147 = HEAP16[$115 >> 1] & 255; //@line 15076
   $AsyncCtx6 = _emscripten_alloc_async_context(20, sp) | 0; //@line 15077
   __ZN7LoRaPHY11handle_sendEPhh($13, $0 + 1185 | 0, $147); //@line 15078
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 433; //@line 15081
    HEAP32[$AsyncCtx6 + 4 >> 2] = $1; //@line 15083
    HEAP32[$AsyncCtx6 + 8 >> 2] = $vararg_buffer1; //@line 15085
    HEAP32[$AsyncCtx6 + 12 >> 2] = $3; //@line 15087
    HEAP32[$AsyncCtx6 + 16 >> 2] = $2; //@line 15089
    sp = STACKTOP; //@line 15090
    STACKTOP = sp; //@line 15091
    return 0; //@line 15091
   }
   _emscripten_free_async_context($AsyncCtx6 | 0); //@line 15093
   $$2 = 0; //@line 15094
   STACKTOP = sp; //@line 15095
   return $$2 | 0; //@line 15095
  }
 }
 return 0; //@line 15098
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_245($0) {
 $0 = $0 | 0;
 var $$pre$i$i38 = 0, $14 = 0, $16 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 16091
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16093
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16095
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16097
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16099
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16105
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 16107
 $$pre$i$i38 = HEAP32[HEAP32[$0 + 20 >> 2] >> 2] | 0; //@line 16108
 HEAP32[HEAP32[$0 + 24 >> 2] >> 2] = $$pre$i$i38; //@line 16110
 if ($$pre$i$i38 | 0) {
  $20 = HEAP32[$$pre$i$i38 + 8 >> 2] | 0; //@line 16114
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(28) | 0; //@line 16115
  FUNCTION_TABLE_vi[$20 & 1023]($2); //@line 16116
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 191; //@line 16119
   $21 = $ReallocAsyncCtx9 + 4 | 0; //@line 16120
   HEAP32[$21 >> 2] = $2; //@line 16121
   $22 = $ReallocAsyncCtx9 + 8 | 0; //@line 16122
   HEAP32[$22 >> 2] = $4; //@line 16123
   $23 = $ReallocAsyncCtx9 + 12 | 0; //@line 16124
   HEAP32[$23 >> 2] = $6; //@line 16125
   $24 = $ReallocAsyncCtx9 + 16 | 0; //@line 16126
   HEAP32[$24 >> 2] = $8; //@line 16127
   $25 = $ReallocAsyncCtx9 + 20 | 0; //@line 16128
   HEAP32[$25 >> 2] = $14; //@line 16129
   $26 = $ReallocAsyncCtx9 + 24 | 0; //@line 16130
   HEAP32[$26 >> 2] = $16; //@line 16131
   sp = STACKTOP; //@line 16132
   return;
  }
  ___async_unwind = 0; //@line 16135
  HEAP32[$ReallocAsyncCtx9 >> 2] = 191; //@line 16136
  $21 = $ReallocAsyncCtx9 + 4 | 0; //@line 16137
  HEAP32[$21 >> 2] = $2; //@line 16138
  $22 = $ReallocAsyncCtx9 + 8 | 0; //@line 16139
  HEAP32[$22 >> 2] = $4; //@line 16140
  $23 = $ReallocAsyncCtx9 + 12 | 0; //@line 16141
  HEAP32[$23 >> 2] = $6; //@line 16142
  $24 = $ReallocAsyncCtx9 + 16 | 0; //@line 16143
  HEAP32[$24 >> 2] = $8; //@line 16144
  $25 = $ReallocAsyncCtx9 + 20 | 0; //@line 16145
  HEAP32[$25 >> 2] = $14; //@line 16146
  $26 = $ReallocAsyncCtx9 + 24 | 0; //@line 16147
  HEAP32[$26 >> 2] = $16; //@line 16148
  sp = STACKTOP; //@line 16149
  return;
 }
 $27 = $4 + 12 | 0; //@line 16152
 HEAP32[$4 >> 2] = 192; //@line 16153
 HEAP32[$4 + 4 >> 2] = 0; //@line 16155
 HEAP32[$4 + 8 >> 2] = $6; //@line 16157
 HEAP32[$27 >> 2] = 824; //@line 16158
 $28 = $6 + 2400 | 0; //@line 16159
 if (($28 | 0) == ($4 | 0)) {
  $53 = HEAP32[208] | 0; //@line 16163
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(24) | 0; //@line 16164
  FUNCTION_TABLE_vi[$53 & 1023]($4); //@line 16165
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 195; //@line 16168
   $54 = $ReallocAsyncCtx12 + 4 | 0; //@line 16169
   HEAP32[$54 >> 2] = $8; //@line 16170
   $55 = $ReallocAsyncCtx12 + 8 | 0; //@line 16171
   HEAP32[$55 >> 2] = $6; //@line 16172
   $56 = $ReallocAsyncCtx12 + 12 | 0; //@line 16173
   HEAP32[$56 >> 2] = $4; //@line 16174
   $57 = $ReallocAsyncCtx12 + 16 | 0; //@line 16175
   HEAP32[$57 >> 2] = $14; //@line 16176
   $58 = $ReallocAsyncCtx12 + 20 | 0; //@line 16177
   HEAP32[$58 >> 2] = $16; //@line 16178
   sp = STACKTOP; //@line 16179
   return;
  }
  ___async_unwind = 0; //@line 16182
  HEAP32[$ReallocAsyncCtx12 >> 2] = 195; //@line 16183
  $54 = $ReallocAsyncCtx12 + 4 | 0; //@line 16184
  HEAP32[$54 >> 2] = $8; //@line 16185
  $55 = $ReallocAsyncCtx12 + 8 | 0; //@line 16186
  HEAP32[$55 >> 2] = $6; //@line 16187
  $56 = $ReallocAsyncCtx12 + 12 | 0; //@line 16188
  HEAP32[$56 >> 2] = $4; //@line 16189
  $57 = $ReallocAsyncCtx12 + 16 | 0; //@line 16190
  HEAP32[$57 >> 2] = $14; //@line 16191
  $58 = $ReallocAsyncCtx12 + 20 | 0; //@line 16192
  HEAP32[$58 >> 2] = $16; //@line 16193
  sp = STACKTOP; //@line 16194
  return;
 }
 $30 = $6 + 2412 | 0; //@line 16197
 $31 = HEAP32[$30 >> 2] | 0; //@line 16198
 if (!$31) {
  $44 = HEAP32[207] | 0; //@line 16202
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(32) | 0; //@line 16203
  FUNCTION_TABLE_vii[$44 & 15]($28, $4); //@line 16204
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 194; //@line 16207
   $45 = $ReallocAsyncCtx11 + 4 | 0; //@line 16208
   HEAP32[$45 >> 2] = $8; //@line 16209
   $46 = $ReallocAsyncCtx11 + 8 | 0; //@line 16210
   HEAP32[$46 >> 2] = $27; //@line 16211
   $47 = $ReallocAsyncCtx11 + 12 | 0; //@line 16212
   HEAP32[$47 >> 2] = $30; //@line 16213
   $48 = $ReallocAsyncCtx11 + 16 | 0; //@line 16214
   HEAP32[$48 >> 2] = $6; //@line 16215
   $49 = $ReallocAsyncCtx11 + 20 | 0; //@line 16216
   HEAP32[$49 >> 2] = $4; //@line 16217
   $50 = $ReallocAsyncCtx11 + 24 | 0; //@line 16218
   HEAP32[$50 >> 2] = $14; //@line 16219
   $51 = $ReallocAsyncCtx11 + 28 | 0; //@line 16220
   HEAP32[$51 >> 2] = $16; //@line 16221
   sp = STACKTOP; //@line 16222
   return;
  }
  ___async_unwind = 0; //@line 16225
  HEAP32[$ReallocAsyncCtx11 >> 2] = 194; //@line 16226
  $45 = $ReallocAsyncCtx11 + 4 | 0; //@line 16227
  HEAP32[$45 >> 2] = $8; //@line 16228
  $46 = $ReallocAsyncCtx11 + 8 | 0; //@line 16229
  HEAP32[$46 >> 2] = $27; //@line 16230
  $47 = $ReallocAsyncCtx11 + 12 | 0; //@line 16231
  HEAP32[$47 >> 2] = $30; //@line 16232
  $48 = $ReallocAsyncCtx11 + 16 | 0; //@line 16233
  HEAP32[$48 >> 2] = $6; //@line 16234
  $49 = $ReallocAsyncCtx11 + 20 | 0; //@line 16235
  HEAP32[$49 >> 2] = $4; //@line 16236
  $50 = $ReallocAsyncCtx11 + 24 | 0; //@line 16237
  HEAP32[$50 >> 2] = $14; //@line 16238
  $51 = $ReallocAsyncCtx11 + 28 | 0; //@line 16239
  HEAP32[$51 >> 2] = $16; //@line 16240
  sp = STACKTOP; //@line 16241
  return;
 } else {
  $34 = HEAP32[$31 + 8 >> 2] | 0; //@line 16245
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(36) | 0; //@line 16246
  FUNCTION_TABLE_vi[$34 & 1023]($28); //@line 16247
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 193; //@line 16250
   $35 = $ReallocAsyncCtx10 + 4 | 0; //@line 16251
   HEAP32[$35 >> 2] = $27; //@line 16252
   $36 = $ReallocAsyncCtx10 + 8 | 0; //@line 16253
   HEAP32[$36 >> 2] = $8; //@line 16254
   $37 = $ReallocAsyncCtx10 + 12 | 0; //@line 16255
   HEAP32[$37 >> 2] = $30; //@line 16256
   $38 = $ReallocAsyncCtx10 + 16 | 0; //@line 16257
   HEAP32[$38 >> 2] = $6; //@line 16258
   $39 = $ReallocAsyncCtx10 + 20 | 0; //@line 16259
   HEAP32[$39 >> 2] = $28; //@line 16260
   $40 = $ReallocAsyncCtx10 + 24 | 0; //@line 16261
   HEAP32[$40 >> 2] = $4; //@line 16262
   $41 = $ReallocAsyncCtx10 + 28 | 0; //@line 16263
   HEAP32[$41 >> 2] = $14; //@line 16264
   $42 = $ReallocAsyncCtx10 + 32 | 0; //@line 16265
   HEAP32[$42 >> 2] = $16; //@line 16266
   sp = STACKTOP; //@line 16267
   return;
  }
  ___async_unwind = 0; //@line 16270
  HEAP32[$ReallocAsyncCtx10 >> 2] = 193; //@line 16271
  $35 = $ReallocAsyncCtx10 + 4 | 0; //@line 16272
  HEAP32[$35 >> 2] = $27; //@line 16273
  $36 = $ReallocAsyncCtx10 + 8 | 0; //@line 16274
  HEAP32[$36 >> 2] = $8; //@line 16275
  $37 = $ReallocAsyncCtx10 + 12 | 0; //@line 16276
  HEAP32[$37 >> 2] = $30; //@line 16277
  $38 = $ReallocAsyncCtx10 + 16 | 0; //@line 16278
  HEAP32[$38 >> 2] = $6; //@line 16279
  $39 = $ReallocAsyncCtx10 + 20 | 0; //@line 16280
  HEAP32[$39 >> 2] = $28; //@line 16281
  $40 = $ReallocAsyncCtx10 + 24 | 0; //@line 16282
  HEAP32[$40 >> 2] = $4; //@line 16283
  $41 = $ReallocAsyncCtx10 + 28 | 0; //@line 16284
  HEAP32[$41 >> 2] = $14; //@line 16285
  $42 = $ReallocAsyncCtx10 + 32 | 0; //@line 16286
  HEAP32[$42 >> 2] = $16; //@line 16287
  sp = STACKTOP; //@line 16288
  return;
 }
}
function _mbedtls_gcm_setkey__async_cb($0) {
 $0 = $0 | 0;
 var $$0$i = 0, $103 = 0, $105 = 0, $106 = 0, $107 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $114 = 0, $116 = 0, $121 = 0, $126 = 0, $128 = 0, $129 = 0, $130 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $137 = 0, $139 = 0, $144 = 0, $149 = 0, $151 = 0, $152 = 0, $153 = 0, $155 = 0, $156 = 0, $157 = 0, $160 = 0, $162 = 0, $167 = 0, $171 = 0, $172 = 0, $174 = 0, $178 = 0, $179 = 0, $181 = 0, $185 = 0, $186 = 0, $188 = 0, $192 = 0, $193 = 0, $195 = 0, $199 = 0, $200 = 0, $202 = 0, $206 = 0, $207 = 0, $209 = 0, $213 = 0, $214 = 0, $216 = 0, $220 = 0, $221 = 0, $223 = 0, $230 = 0, $237 = 0, $244 = 0, $251 = 0, $258 = 0, $265 = 0, $27 = 0, $272 = 0, $279 = 0, $286 = 0, $293 = 0, $300 = 0, $307 = 0, $314 = 0, $321 = 0, $4 = 0, $45 = 0, $6 = 0, $63 = 0, $81 = 0, $83 = 0, $88 = 0, $93 = 0, $98 = 0, $AsyncRetVal = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22608
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22610
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 22614
 if (!$AsyncRetVal) {
  $27 = (HEAPU8[$4 + 1 >> 0] | 0) << 16 | (HEAPU8[HEAP32[$0 + 4 >> 2] >> 0] | 0) << 24 | (HEAPU8[$4 + 2 >> 0] | 0) << 8 | (HEAPU8[$4 + 3 >> 0] | 0); //@line 22633
  $45 = (HEAPU8[$4 + 5 >> 0] | 0) << 16 | (HEAPU8[$4 + 4 >> 0] | 0) << 24 | (HEAPU8[$4 + 6 >> 0] | 0) << 8 | (HEAPU8[$4 + 7 >> 0] | 0); //@line 22651
  $63 = (HEAPU8[$4 + 9 >> 0] | 0) << 16 | (HEAPU8[$4 + 8 >> 0] | 0) << 24 | (HEAPU8[$4 + 10 >> 0] | 0) << 8 | (HEAPU8[$4 + 11 >> 0] | 0); //@line 22669
  $81 = (HEAPU8[$4 + 13 >> 0] | 0) << 16 | (HEAPU8[$4 + 12 >> 0] | 0) << 24 | (HEAPU8[$4 + 14 >> 0] | 0) << 8 | (HEAPU8[$4 + 15 >> 0] | 0); //@line 22687
  $83 = $6 + 136 | 0; //@line 22689
  HEAP32[$83 >> 2] = $81; //@line 22691
  HEAP32[$83 + 4 >> 2] = $63; //@line 22694
  $88 = $6 + 264 | 0; //@line 22696
  HEAP32[$88 >> 2] = $45; //@line 22698
  HEAP32[$88 + 4 >> 2] = $27; //@line 22701
  $93 = $6 + 200 | 0; //@line 22703
  HEAP32[$93 >> 2] = 0; //@line 22705
  HEAP32[$93 + 4 >> 2] = 0; //@line 22708
  $98 = $6 + 72 | 0; //@line 22710
  HEAP32[$98 >> 2] = 0; //@line 22712
  HEAP32[$98 + 4 >> 2] = 0; //@line 22715
  $103 = _i64Subtract(0, 0, $81 & 1 | 0, 0) | 0; //@line 22717
  $105 = _bitshift64Shl($45 | 0, 0, 63) | 0; //@line 22719
  $106 = tempRet0; //@line 22720
  $107 = _bitshift64Lshr($81 | 0, $63 | 0, 1) | 0; //@line 22721
  $109 = $107 | $105; //@line 22723
  $110 = tempRet0 | $106; //@line 22724
  $111 = _bitshift64Lshr($45 | 0, $27 | 0, 1) | 0; //@line 22725
  $112 = tempRet0; //@line 22726
  $114 = $103 & -520093696 ^ $112; //@line 22728
  $116 = $6 + 104 | 0; //@line 22730
  HEAP32[$116 >> 2] = $109; //@line 22732
  HEAP32[$116 + 4 >> 2] = $110; //@line 22735
  $121 = $6 + 232 | 0; //@line 22737
  HEAP32[$121 >> 2] = $111; //@line 22739
  HEAP32[$121 + 4 >> 2] = $114; //@line 22742
  $126 = _i64Subtract(0, 0, $107 & 1 | 0, 0) | 0; //@line 22744
  $128 = _bitshift64Shl($111 | 0, $112 | 0, 63) | 0; //@line 22746
  $129 = tempRet0; //@line 22747
  $130 = _bitshift64Lshr($109 | 0, $110 | 0, 1) | 0; //@line 22748
  $132 = $130 | $128; //@line 22750
  $133 = tempRet0 | $129; //@line 22751
  $134 = _bitshift64Lshr($111 | 0, $114 | 0, 1) | 0; //@line 22752
  $135 = tempRet0; //@line 22753
  $137 = $126 & -520093696 ^ $135; //@line 22755
  $139 = $6 + 88 | 0; //@line 22757
  HEAP32[$139 >> 2] = $132; //@line 22759
  HEAP32[$139 + 4 >> 2] = $133; //@line 22762
  $144 = $6 + 216 | 0; //@line 22764
  HEAP32[$144 >> 2] = $134; //@line 22766
  HEAP32[$144 + 4 >> 2] = $137; //@line 22769
  $149 = _i64Subtract(0, 0, $130 & 1 | 0, 0) | 0; //@line 22771
  $151 = _bitshift64Shl($134 | 0, $135 | 0, 63) | 0; //@line 22773
  $152 = tempRet0; //@line 22774
  $153 = _bitshift64Lshr($132 | 0, $133 | 0, 1) | 0; //@line 22775
  $155 = $151 | $153; //@line 22777
  $156 = $152 | tempRet0; //@line 22778
  $157 = _bitshift64Lshr($134 | 0, $137 | 0, 1) | 0; //@line 22779
  $160 = $149 & -520093696 ^ tempRet0; //@line 22782
  $162 = $6 + 80 | 0; //@line 22784
  HEAP32[$162 >> 2] = $155; //@line 22786
  HEAP32[$162 + 4 >> 2] = $156; //@line 22789
  $167 = $6 + 208 | 0; //@line 22791
  HEAP32[$167 >> 2] = $157; //@line 22793
  HEAP32[$167 + 4 >> 2] = $160; //@line 22796
  $171 = $157 ^ $134; //@line 22797
  $172 = $160 ^ $137; //@line 22798
  $174 = $6 + 224 | 0; //@line 22800
  HEAP32[$174 >> 2] = $171; //@line 22802
  HEAP32[$174 + 4 >> 2] = $172; //@line 22805
  $178 = $155 ^ $132; //@line 22806
  $179 = $156 ^ $133; //@line 22807
  $181 = $6 + 96 | 0; //@line 22809
  HEAP32[$181 >> 2] = $178; //@line 22811
  HEAP32[$181 + 4 >> 2] = $179; //@line 22814
  $185 = $157 ^ $111; //@line 22815
  $186 = $160 ^ $114; //@line 22816
  $188 = $6 + 240 | 0; //@line 22818
  HEAP32[$188 >> 2] = $185; //@line 22820
  HEAP32[$188 + 4 >> 2] = $186; //@line 22823
  $192 = $155 ^ $109; //@line 22824
  $193 = $156 ^ $110; //@line 22825
  $195 = $6 + 112 | 0; //@line 22827
  HEAP32[$195 >> 2] = $192; //@line 22829
  HEAP32[$195 + 4 >> 2] = $193; //@line 22832
  $199 = $134 ^ $111; //@line 22833
  $200 = $137 ^ $114; //@line 22834
  $202 = $6 + 248 | 0; //@line 22836
  HEAP32[$202 >> 2] = $199; //@line 22838
  HEAP32[$202 + 4 >> 2] = $200; //@line 22841
  $206 = $132 ^ $109; //@line 22842
  $207 = $133 ^ $110; //@line 22843
  $209 = $6 + 120 | 0; //@line 22845
  HEAP32[$209 >> 2] = $206; //@line 22847
  HEAP32[$209 + 4 >> 2] = $207; //@line 22850
  $213 = $171 ^ $111; //@line 22851
  $214 = $172 ^ $114; //@line 22852
  $216 = $6 + 256 | 0; //@line 22854
  HEAP32[$216 >> 2] = $213; //@line 22856
  HEAP32[$216 + 4 >> 2] = $214; //@line 22859
  $220 = $178 ^ $109; //@line 22860
  $221 = $179 ^ $110; //@line 22861
  $223 = $6 + 128 | 0; //@line 22863
  HEAP32[$223 >> 2] = $220; //@line 22865
  HEAP32[$223 + 4 >> 2] = $221; //@line 22868
  $230 = $6 + 272 | 0; //@line 22872
  HEAP32[$230 >> 2] = $157 ^ $45; //@line 22874
  HEAP32[$230 + 4 >> 2] = $160 ^ $27; //@line 22877
  $237 = $6 + 144 | 0; //@line 22881
  HEAP32[$237 >> 2] = $155 ^ $81; //@line 22883
  HEAP32[$237 + 4 >> 2] = $156 ^ $63; //@line 22886
  $244 = $6 + 280 | 0; //@line 22890
  HEAP32[$244 >> 2] = $134 ^ $45; //@line 22892
  HEAP32[$244 + 4 >> 2] = $137 ^ $27; //@line 22895
  $251 = $6 + 152 | 0; //@line 22899
  HEAP32[$251 >> 2] = $132 ^ $81; //@line 22901
  HEAP32[$251 + 4 >> 2] = $133 ^ $63; //@line 22904
  $258 = $6 + 288 | 0; //@line 22908
  HEAP32[$258 >> 2] = $171 ^ $45; //@line 22910
  HEAP32[$258 + 4 >> 2] = $172 ^ $27; //@line 22913
  $265 = $6 + 160 | 0; //@line 22917
  HEAP32[$265 >> 2] = $178 ^ $81; //@line 22919
  HEAP32[$265 + 4 >> 2] = $179 ^ $63; //@line 22922
  $272 = $6 + 296 | 0; //@line 22926
  HEAP32[$272 >> 2] = $111 ^ $45; //@line 22928
  HEAP32[$272 + 4 >> 2] = $114 ^ $27; //@line 22931
  $279 = $6 + 168 | 0; //@line 22935
  HEAP32[$279 >> 2] = $109 ^ $81; //@line 22937
  HEAP32[$279 + 4 >> 2] = $110 ^ $63; //@line 22940
  $286 = $6 + 304 | 0; //@line 22944
  HEAP32[$286 >> 2] = $185 ^ $45; //@line 22946
  HEAP32[$286 + 4 >> 2] = $186 ^ $27; //@line 22949
  $293 = $6 + 176 | 0; //@line 22953
  HEAP32[$293 >> 2] = $192 ^ $81; //@line 22955
  HEAP32[$293 + 4 >> 2] = $193 ^ $63; //@line 22958
  $300 = $6 + 312 | 0; //@line 22962
  HEAP32[$300 >> 2] = $199 ^ $45; //@line 22964
  HEAP32[$300 + 4 >> 2] = $200 ^ $27; //@line 22967
  $307 = $6 + 184 | 0; //@line 22971
  HEAP32[$307 >> 2] = $206 ^ $81; //@line 22973
  HEAP32[$307 + 4 >> 2] = $207 ^ $63; //@line 22976
  $314 = $6 + 320 | 0; //@line 22980
  HEAP32[$314 >> 2] = $213 ^ $45; //@line 22982
  HEAP32[$314 + 4 >> 2] = $214 ^ $27; //@line 22985
  $321 = $6 + 192 | 0; //@line 22989
  HEAP32[$321 >> 2] = $220 ^ $81; //@line 22991
  HEAP32[$321 + 4 >> 2] = $221 ^ $63; //@line 22994
  $$0$i = 0; //@line 22995
 } else {
  $$0$i = $AsyncRetVal; //@line 22997
 }
 HEAP32[___async_retval >> 2] = $$0$i; //@line 23000
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $103 = 0, $106 = 0, $107 = 0, $109 = 0, $116 = 0, $119 = 0, $12 = 0, $121 = 0, $122 = 0, $127 = 0, $130 = 0, $19 = 0, $20 = 0, $23 = 0, $25 = 0, $30 = 0, $41 = 0, $42 = 0, $43 = 0, $46 = 0, $6 = 0, $60 = 0, $63 = 0, $67 = 0, $7 = 0, $85 = 0, $88 = 0, $90 = 0, $91 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx6 = 0, $switch$selectcmp$i = 0, $switch$selectcmp4$i = 0, sp = 0;
 sp = STACKTOP; //@line 20606
 $6 = $1 + 1 | 0; //@line 20609
 $7 = HEAP8[$6 >> 0] | 0; //@line 20610
 $10 = HEAP8[(HEAP32[$0 + 88 >> 2] | 0) + ($7 << 24 >> 24) >> 0] | 0; //@line 20613
 $12 = HEAP32[$0 + 124 >> 2] | 0; //@line 20615
 $19 = $1 + 2 | 0; //@line 20622
 $20 = HEAP8[$19 >> 0] | 0; //@line 20623
 $23 = HEAP8[(HEAP32[$0 + 72 >> 2] | 0) + ((HEAPU8[$12 + ((HEAPU8[$1 >> 0] | 0) * 12 | 0) + 9 >> 0] | 0) * 24 | 0) + 2 >> 0] | 0; //@line 20626
 $25 = $20 << 24 >> 24 > $23 << 24 >> 24 ? $20 : $23; //@line 20628
 HEAP8[$19 >> 0] = $25; //@line 20629
 $30 = HEAP32[(HEAP32[$0 + 80 >> 2] | 0) + (($7 & 255) << 2) >> 2] | 0; //@line 20634
 $switch$selectcmp$i = ($30 | 0) == 25e4; //@line 20635
 $switch$selectcmp4$i = ($30 | 0) == 5e5; //@line 20636
 $41 = ~~+Math_floor(+(+HEAPF32[$1 + 4 >> 2] - +($25 << 24 >> 24 << 1 >>> 0) - +HEAPF32[$1 + 8 >> 2])); //@line 20647
 $42 = $0 + 4 | 0; //@line 20648
 $43 = HEAP32[$42 >> 2] | 0; //@line 20649
 $46 = HEAP32[(HEAP32[$43 >> 2] | 0) + 72 >> 2] | 0; //@line 20652
 $AsyncCtx = _emscripten_alloc_async_context(44, sp) | 0; //@line 20653
 FUNCTION_TABLE_vi[$46 & 1023]($43); //@line 20654
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 527; //@line 20657
  HEAP32[$AsyncCtx + 4 >> 2] = $42; //@line 20659
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 20661
  HEAP32[$AsyncCtx + 12 >> 2] = $12; //@line 20663
  HEAP32[$AsyncCtx + 16 >> 2] = $6; //@line 20665
  HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 20667
  HEAP8[$AsyncCtx + 24 >> 0] = $switch$selectcmp$i & 1; //@line 20670
  HEAP8[$AsyncCtx + 25 >> 0] = $switch$selectcmp4$i & 1; //@line 20673
  HEAP8[$AsyncCtx + 26 >> 0] = $10; //@line 20675
  HEAP8[$AsyncCtx + 27 >> 0] = $41; //@line 20677
  HEAP32[$AsyncCtx + 28 >> 2] = $1; //@line 20679
  HEAP32[$AsyncCtx + 32 >> 2] = $3; //@line 20681
  HEAP32[$AsyncCtx + 36 >> 2] = $19; //@line 20683
  HEAP32[$AsyncCtx + 40 >> 2] = $2; //@line 20685
  sp = STACKTOP; //@line 20686
  return 0; //@line 20687
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 20689
 $60 = HEAP32[$42 >> 2] | 0; //@line 20690
 $63 = HEAP32[(HEAP32[$60 >> 2] | 0) + 32 >> 2] | 0; //@line 20693
 $67 = HEAP32[$12 + ((HEAPU8[$1 >> 0] | 0) * 12 | 0) >> 2] | 0; //@line 20697
 $AsyncCtx2 = _emscripten_alloc_async_context(36, sp) | 0; //@line 20698
 FUNCTION_TABLE_vii[$63 & 15]($60, $67); //@line 20699
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 528; //@line 20702
  HEAP32[$AsyncCtx2 + 4 >> 2] = $6; //@line 20704
  HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 20706
  HEAP32[$AsyncCtx2 + 12 >> 2] = $42; //@line 20708
  HEAP8[$AsyncCtx2 + 16 >> 0] = $switch$selectcmp$i & 1; //@line 20711
  HEAP8[$AsyncCtx2 + 17 >> 0] = $switch$selectcmp4$i & 1; //@line 20714
  HEAP8[$AsyncCtx2 + 18 >> 0] = $10; //@line 20716
  HEAP8[$AsyncCtx2 + 19 >> 0] = $41; //@line 20718
  HEAP32[$AsyncCtx2 + 20 >> 2] = $1; //@line 20720
  HEAP32[$AsyncCtx2 + 24 >> 2] = $3; //@line 20722
  HEAP32[$AsyncCtx2 + 28 >> 2] = $19; //@line 20724
  HEAP32[$AsyncCtx2 + 32 >> 2] = $2; //@line 20726
  sp = STACKTOP; //@line 20727
  return 0; //@line 20728
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 20730
 $85 = HEAP32[$42 >> 2] | 0; //@line 20737
 $88 = HEAP32[(HEAP32[$85 >> 2] | 0) + 20 >> 2] | 0; //@line 20740
 $90 = $switch$selectcmp4$i ? 2 : $switch$selectcmp$i & 1; //@line 20742
 $91 = $10 << 24 >> 24; //@line 20743
 do {
  if ((HEAP8[$6 >> 0] | 0) == (HEAPU8[$0 + 27 >> 0] | 0)) {
   $AsyncCtx6 = _emscripten_alloc_async_context(24, sp) | 0; //@line 20747
   FUNCTION_TABLE_viiiiiiiiiiiiii[$88 & 1]($85, 0, $41, 25e3, $90, $91 * 1e3 | 0, 0, 5, 0, 1, 0, 0, 0, 3e3); //@line 20748
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 529; //@line 20751
    HEAP32[$AsyncCtx6 + 4 >> 2] = $42; //@line 20753
    HEAP32[$AsyncCtx6 + 8 >> 2] = $1; //@line 20755
    HEAP32[$AsyncCtx6 + 12 >> 2] = $3; //@line 20757
    HEAP32[$AsyncCtx6 + 16 >> 2] = $19; //@line 20759
    HEAP32[$AsyncCtx6 + 20 >> 2] = $2; //@line 20761
    sp = STACKTOP; //@line 20762
    return 0; //@line 20763
   } else {
    _emscripten_free_async_context($AsyncCtx6 | 0); //@line 20765
    $$0 = 0; //@line 20766
    break;
   }
  } else {
   $AsyncCtx10 = _emscripten_alloc_async_context(24, sp) | 0; //@line 20770
   FUNCTION_TABLE_viiiiiiiiiiiiii[$88 & 1]($85, 1, $41, 0, $90, $91, 1, 8, 0, 1, 0, 0, 0, 3e3); //@line 20771
   if (___async) {
    HEAP32[$AsyncCtx10 >> 2] = 530; //@line 20774
    HEAP32[$AsyncCtx10 + 4 >> 2] = $42; //@line 20776
    HEAP32[$AsyncCtx10 + 8 >> 2] = $1; //@line 20778
    HEAP32[$AsyncCtx10 + 12 >> 2] = $3; //@line 20780
    HEAP32[$AsyncCtx10 + 16 >> 2] = $19; //@line 20782
    HEAP32[$AsyncCtx10 + 20 >> 2] = $2; //@line 20784
    sp = STACKTOP; //@line 20785
    return 0; //@line 20786
   } else {
    _emscripten_free_async_context($AsyncCtx10 | 0); //@line 20788
    $$0 = 1; //@line 20789
    break;
   }
  }
 } while (0);
 $103 = HEAP32[$42 >> 2] | 0; //@line 20794
 $106 = HEAP32[(HEAP32[$103 >> 2] | 0) + 44 >> 2] | 0; //@line 20797
 $107 = $1 + 12 | 0; //@line 20798
 $109 = HEAP16[$107 >> 1] & 255; //@line 20800
 $AsyncCtx14 = _emscripten_alloc_async_context(28, sp) | 0; //@line 20801
 FUNCTION_TABLE_viii[$106 & 7]($103, $$0, $109); //@line 20802
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 531; //@line 20805
  HEAP32[$AsyncCtx14 + 4 >> 2] = $42; //@line 20807
  HEAP32[$AsyncCtx14 + 8 >> 2] = $107; //@line 20809
  HEAP32[$AsyncCtx14 + 12 >> 2] = $$0; //@line 20811
  HEAP32[$AsyncCtx14 + 16 >> 2] = $3; //@line 20813
  HEAP32[$AsyncCtx14 + 20 >> 2] = $19; //@line 20815
  HEAP32[$AsyncCtx14 + 24 >> 2] = $2; //@line 20817
  sp = STACKTOP; //@line 20818
  return 0; //@line 20819
 }
 _emscripten_free_async_context($AsyncCtx14 | 0); //@line 20821
 $116 = HEAP32[$42 >> 2] | 0; //@line 20822
 $119 = HEAP32[(HEAP32[$116 >> 2] | 0) + 52 >> 2] | 0; //@line 20825
 $121 = HEAP16[$107 >> 1] & 255; //@line 20827
 $AsyncCtx17 = _emscripten_alloc_async_context(20, sp) | 0; //@line 20828
 $122 = FUNCTION_TABLE_iiii[$119 & 31]($116, $$0, $121) | 0; //@line 20829
 if (___async) {
  HEAP32[$AsyncCtx17 >> 2] = 532; //@line 20832
  HEAP32[$AsyncCtx17 + 4 >> 2] = $3; //@line 20834
  HEAP32[$AsyncCtx17 + 8 >> 2] = $42; //@line 20836
  HEAP32[$AsyncCtx17 + 12 >> 2] = $19; //@line 20838
  HEAP32[$AsyncCtx17 + 16 >> 2] = $2; //@line 20840
  sp = STACKTOP; //@line 20841
  return 0; //@line 20842
 }
 _emscripten_free_async_context($AsyncCtx17 | 0); //@line 20844
 HEAP32[$3 >> 2] = $122; //@line 20845
 $127 = HEAP32[$42 >> 2] | 0; //@line 20846
 $130 = HEAP32[(HEAP32[$127 >> 2] | 0) + 76 >> 2] | 0; //@line 20849
 $AsyncCtx20 = _emscripten_alloc_async_context(12, sp) | 0; //@line 20850
 FUNCTION_TABLE_vi[$130 & 1023]($127); //@line 20851
 if (___async) {
  HEAP32[$AsyncCtx20 >> 2] = 533; //@line 20854
  HEAP32[$AsyncCtx20 + 4 >> 2] = $19; //@line 20856
  HEAP32[$AsyncCtx20 + 8 >> 2] = $2; //@line 20858
  sp = STACKTOP; //@line 20859
  return 0; //@line 20860
 } else {
  _emscripten_free_async_context($AsyncCtx20 | 0); //@line 20862
  HEAP8[$2 >> 0] = HEAP8[$19 >> 0] | 0; //@line 20864
  return 1; //@line 20865
 }
 return 0; //@line 20867
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $15 = 0, $17 = 0, $23 = 0, $26 = 0, $29 = 0, $30 = 0, $33 = 0, $36 = 0, $5 = 0, $53 = 0, $54 = 0, $55 = 0, $59 = 0, $6 = 0, $61 = 0, $66 = 0, $67 = 0, $70 = 0, $73 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx16 = 0, $AsyncCtx19 = 0, $AsyncCtx2 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx31 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 9542
 STACKTOP = STACKTOP + 32 | 0; //@line 9543
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 9543
 $vararg_buffer = sp; //@line 9544
 $1 = sp + 16 | 0; //@line 9545
 $5 = (HEAP32[(__ZNK7LoRaMac21get_mlme_confirmationEv($0) | 0) + 4 >> 2] | 0) == 1; //@line 9549
 $6 = __ZNK7LoRaMac21get_mlme_confirmationEv($0) | 0; //@line 9550
 if ($5) {
  if (HEAP32[$6 + 8 >> 2] | 0) {
   STACKTOP = sp; //@line 9556
   return;
  }
  $10 = $0 + 2528 | 0; //@line 9558
  $11 = HEAP32[$10 >> 2] | 0; //@line 9559
  if (!$11) {
   STACKTOP = sp; //@line 9562
   return;
  }
  $15 = HEAP32[$0 + 3168 >> 2] | 0; //@line 9566
  $17 = HEAP32[$11 + 4 >> 2] | 0; //@line 9568
  $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 9569
  FUNCTION_TABLE_vii[$17 & 15]($1, $0 + 2516 | 0); //@line 9570
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 310; //@line 9573
   HEAP32[$AsyncCtx + 4 >> 2] = $10; //@line 9575
   HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 9577
   HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 9579
   HEAP32[$AsyncCtx + 16 >> 2] = $15; //@line 9581
   HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 9583
   sp = STACKTOP; //@line 9584
   STACKTOP = sp; //@line 9585
   return;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 9587
  $23 = $1 + 12 | 0; //@line 9589
  HEAP32[$23 >> 2] = HEAP32[$10 >> 2]; //@line 9590
  $26 = HEAP8[(__ZNK7LoRaMac21get_mlme_confirmationEv($0) | 0) + 16 >> 0] | 0; //@line 9593
  $29 = HEAP8[(__ZNK7LoRaMac21get_mlme_confirmationEv($0) | 0) + 17 >> 0] | 0; //@line 9596
  $AsyncCtx16 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9597
  $30 = __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1_($15, $1, $26, $29) | 0; //@line 9598
  if (___async) {
   HEAP32[$AsyncCtx16 >> 2] = 311; //@line 9601
   HEAP32[$AsyncCtx16 + 4 >> 2] = $23; //@line 9603
   HEAP32[$AsyncCtx16 + 8 >> 2] = $1; //@line 9605
   sp = STACKTOP; //@line 9606
   STACKTOP = sp; //@line 9607
   return;
  }
  _emscripten_free_async_context($AsyncCtx16 | 0); //@line 9609
  $33 = HEAP32[$23 >> 2] | 0; //@line 9610
  do {
   if ($33 | 0) {
    $36 = HEAP32[$33 + 8 >> 2] | 0; //@line 9615
    $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9616
    FUNCTION_TABLE_vi[$36 & 1023]($1); //@line 9617
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 312; //@line 9620
     HEAP32[$AsyncCtx2 + 4 >> 2] = $30; //@line 9622
     sp = STACKTOP; //@line 9623
     STACKTOP = sp; //@line 9624
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 9626
     break;
    }
   }
  } while (0);
  if ($30 | 0) {
   STACKTOP = sp; //@line 9633
   return;
  }
  $AsyncCtx31 = _emscripten_alloc_async_context(4, sp) | 0; //@line 9635
  _mbed_assert_internal(12104, 12113, 881); //@line 9636
  if (___async) {
   HEAP32[$AsyncCtx31 >> 2] = 313; //@line 9639
   sp = STACKTOP; //@line 9640
   STACKTOP = sp; //@line 9641
   return;
  }
  _emscripten_free_async_context($AsyncCtx31 | 0); //@line 9643
  STACKTOP = sp; //@line 9644
  return;
 }
 if (HEAP32[$6 + 4 >> 2] | 0) {
  STACKTOP = sp; //@line 9650
  return;
 }
 if (!(HEAP32[(__ZNK7LoRaMac21get_mlme_confirmationEv($0) | 0) + 8 >> 2] | 0)) {
  $AsyncCtx13 = _emscripten_alloc_async_context(4, sp) | 0; //@line 9657
  __ZN12LoRaWANStack23process_connected_stateEv($0); //@line 9658
  if (___async) {
   HEAP32[$AsyncCtx13 >> 2] = 314; //@line 9661
   sp = STACKTOP; //@line 9662
   STACKTOP = sp; //@line 9663
   return;
  }
  _emscripten_free_async_context($AsyncCtx13 | 0); //@line 9665
  STACKTOP = sp; //@line 9666
  return;
 }
 HEAP32[$vararg_buffer >> 2] = HEAP32[(__ZNK7LoRaMac21get_mlme_confirmationEv($0) | 0) + 8 >> 2]; //@line 9671
 _mbed_tracef(2, 12211, 12514, $vararg_buffer); //@line 9672
 $53 = $0 + 2496 | 0; //@line 9677
 if ((HEAP32[(__ZNK7LoRaMac21get_mlme_confirmationEv($0) | 0) + 8 >> 2] | 0) != 13) {
  HEAP32[$53 >> 2] = 4; //@line 9679
  HEAP32[$vararg_buffer >> 2] = 0; //@line 9680
  $AsyncCtx23 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9681
  __ZN12LoRaWANStack21process_joining_stateER14lorawan_status($0, $vararg_buffer); //@line 9682
  if (___async) {
   HEAP32[$AsyncCtx23 >> 2] = 319; //@line 9685
   HEAP32[$AsyncCtx23 + 4 >> 2] = $vararg_buffer; //@line 9687
   sp = STACKTOP; //@line 9688
   STACKTOP = sp; //@line 9689
   return;
  }
  _emscripten_free_async_context($AsyncCtx23 | 0); //@line 9691
  STACKTOP = sp; //@line 9692
  return;
 }
 HEAP32[$53 >> 2] = 2; //@line 9694
 $54 = $0 + 2512 | 0; //@line 9695
 $55 = HEAP32[$54 >> 2] | 0; //@line 9696
 do {
  if ($55 | 0) {
   $59 = HEAP32[$0 + 3168 >> 2] | 0; //@line 9702
   $61 = HEAP32[$55 + 4 >> 2] | 0; //@line 9704
   $AsyncCtx5 = _emscripten_alloc_async_context(20, sp) | 0; //@line 9705
   FUNCTION_TABLE_vii[$61 & 15]($vararg_buffer, $0 + 2500 | 0); //@line 9706
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 315; //@line 9709
    HEAP32[$AsyncCtx5 + 4 >> 2] = $54; //@line 9711
    HEAP32[$AsyncCtx5 + 8 >> 2] = $vararg_buffer; //@line 9713
    HEAP32[$AsyncCtx5 + 12 >> 2] = $59; //@line 9715
    HEAP32[$AsyncCtx5 + 16 >> 2] = $vararg_buffer; //@line 9717
    sp = STACKTOP; //@line 9718
    STACKTOP = sp; //@line 9719
    return;
   }
   _emscripten_free_async_context($AsyncCtx5 | 0); //@line 9721
   $66 = $vararg_buffer + 12 | 0; //@line 9723
   HEAP32[$66 >> 2] = HEAP32[$54 >> 2]; //@line 9724
   $AsyncCtx19 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9725
   $67 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($59, $vararg_buffer, 5) | 0; //@line 9726
   if (___async) {
    HEAP32[$AsyncCtx19 >> 2] = 316; //@line 9729
    HEAP32[$AsyncCtx19 + 4 >> 2] = $66; //@line 9731
    HEAP32[$AsyncCtx19 + 8 >> 2] = $vararg_buffer; //@line 9733
    sp = STACKTOP; //@line 9734
    STACKTOP = sp; //@line 9735
    return;
   }
   _emscripten_free_async_context($AsyncCtx19 | 0); //@line 9737
   $70 = HEAP32[$66 >> 2] | 0; //@line 9738
   do {
    if ($70 | 0) {
     $73 = HEAP32[$70 + 8 >> 2] | 0; //@line 9743
     $AsyncCtx9 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9744
     FUNCTION_TABLE_vi[$73 & 1023]($vararg_buffer); //@line 9745
     if (___async) {
      HEAP32[$AsyncCtx9 >> 2] = 317; //@line 9748
      HEAP32[$AsyncCtx9 + 4 >> 2] = $67; //@line 9750
      HEAP32[$AsyncCtx9 + 8 >> 2] = $vararg_buffer; //@line 9752
      sp = STACKTOP; //@line 9753
      STACKTOP = sp; //@line 9754
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx9 | 0); //@line 9756
      break;
     }
    }
   } while (0);
   if (!$67) {
    $AsyncCtx27 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9763
    _mbed_assert_internal(12104, 12113, 775); //@line 9764
    if (___async) {
     HEAP32[$AsyncCtx27 >> 2] = 318; //@line 9767
     HEAP32[$AsyncCtx27 + 4 >> 2] = $vararg_buffer; //@line 9769
     sp = STACKTOP; //@line 9770
     STACKTOP = sp; //@line 9771
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx27 | 0); //@line 9773
     break;
    }
   }
  }
 } while (0);
 STACKTOP = sp; //@line 9779
 return;
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_247($0) {
 $0 = $0 | 0;
 var $$pre125 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 16456
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16458
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16460
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16462
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16464
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16466
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16468
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16470
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 16472
 $$pre125 = HEAP32[$2 >> 2] | 0; //@line 16473
 if ($$pre125 | 0) {
  $19 = HEAP32[$$pre125 + 4 >> 2] | 0; //@line 16477
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(32) | 0; //@line 16478
  FUNCTION_TABLE_vii[$19 & 15]($10, $12); //@line 16479
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 194; //@line 16482
   $20 = $ReallocAsyncCtx11 + 4 | 0; //@line 16483
   HEAP32[$20 >> 2] = $4; //@line 16484
   $21 = $ReallocAsyncCtx11 + 8 | 0; //@line 16485
   HEAP32[$21 >> 2] = $2; //@line 16486
   $22 = $ReallocAsyncCtx11 + 12 | 0; //@line 16487
   HEAP32[$22 >> 2] = $6; //@line 16488
   $23 = $ReallocAsyncCtx11 + 16 | 0; //@line 16489
   HEAP32[$23 >> 2] = $8; //@line 16490
   $24 = $ReallocAsyncCtx11 + 20 | 0; //@line 16491
   HEAP32[$24 >> 2] = $12; //@line 16492
   $25 = $ReallocAsyncCtx11 + 24 | 0; //@line 16493
   HEAP32[$25 >> 2] = $14; //@line 16494
   $26 = $ReallocAsyncCtx11 + 28 | 0; //@line 16495
   HEAP32[$26 >> 2] = $16; //@line 16496
   sp = STACKTOP; //@line 16497
   return;
  }
  ___async_unwind = 0; //@line 16500
  HEAP32[$ReallocAsyncCtx11 >> 2] = 194; //@line 16501
  $20 = $ReallocAsyncCtx11 + 4 | 0; //@line 16502
  HEAP32[$20 >> 2] = $4; //@line 16503
  $21 = $ReallocAsyncCtx11 + 8 | 0; //@line 16504
  HEAP32[$21 >> 2] = $2; //@line 16505
  $22 = $ReallocAsyncCtx11 + 12 | 0; //@line 16506
  HEAP32[$22 >> 2] = $6; //@line 16507
  $23 = $ReallocAsyncCtx11 + 16 | 0; //@line 16508
  HEAP32[$23 >> 2] = $8; //@line 16509
  $24 = $ReallocAsyncCtx11 + 20 | 0; //@line 16510
  HEAP32[$24 >> 2] = $12; //@line 16511
  $25 = $ReallocAsyncCtx11 + 24 | 0; //@line 16512
  HEAP32[$25 >> 2] = $14; //@line 16513
  $26 = $ReallocAsyncCtx11 + 28 | 0; //@line 16514
  HEAP32[$26 >> 2] = $16; //@line 16515
  sp = STACKTOP; //@line 16516
  return;
 }
 HEAP32[$6 >> 2] = 0; //@line 16519
 $27 = $14 + 12 | 0; //@line 16520
 HEAP32[$14 >> 2] = 196; //@line 16521
 HEAP32[$14 + 4 >> 2] = 0; //@line 16523
 HEAP32[$14 + 8 >> 2] = $8; //@line 16525
 HEAP32[$27 >> 2] = 824; //@line 16526
 $28 = $8 + 2432 | 0; //@line 16527
 if (($28 | 0) == ($14 | 0)) {
  $51 = HEAP32[208] | 0; //@line 16531
  $ReallocAsyncCtx15 = _emscripten_realloc_async_context(20) | 0; //@line 16532
  FUNCTION_TABLE_vi[$51 & 1023]($14); //@line 16533
  if (___async) {
   HEAP32[$ReallocAsyncCtx15 >> 2] = 199; //@line 16536
   $52 = $ReallocAsyncCtx15 + 4 | 0; //@line 16537
   HEAP32[$52 >> 2] = $14; //@line 16538
   $53 = $ReallocAsyncCtx15 + 8 | 0; //@line 16539
   HEAP32[$53 >> 2] = $8; //@line 16540
   $54 = $ReallocAsyncCtx15 + 12 | 0; //@line 16541
   HEAP32[$54 >> 2] = $4; //@line 16542
   $55 = $ReallocAsyncCtx15 + 16 | 0; //@line 16543
   HEAP32[$55 >> 2] = $16; //@line 16544
   sp = STACKTOP; //@line 16545
   return;
  }
  ___async_unwind = 0; //@line 16548
  HEAP32[$ReallocAsyncCtx15 >> 2] = 199; //@line 16549
  $52 = $ReallocAsyncCtx15 + 4 | 0; //@line 16550
  HEAP32[$52 >> 2] = $14; //@line 16551
  $53 = $ReallocAsyncCtx15 + 8 | 0; //@line 16552
  HEAP32[$53 >> 2] = $8; //@line 16553
  $54 = $ReallocAsyncCtx15 + 12 | 0; //@line 16554
  HEAP32[$54 >> 2] = $4; //@line 16555
  $55 = $ReallocAsyncCtx15 + 16 | 0; //@line 16556
  HEAP32[$55 >> 2] = $16; //@line 16557
  sp = STACKTOP; //@line 16558
  return;
 }
 $30 = $8 + 2444 | 0; //@line 16561
 $31 = HEAP32[$30 >> 2] | 0; //@line 16562
 if (!$31) {
  $43 = HEAP32[207] | 0; //@line 16566
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(28) | 0; //@line 16567
  FUNCTION_TABLE_vii[$43 & 15]($28, $14); //@line 16568
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 198; //@line 16571
   $44 = $ReallocAsyncCtx14 + 4 | 0; //@line 16572
   HEAP32[$44 >> 2] = $27; //@line 16573
   $45 = $ReallocAsyncCtx14 + 8 | 0; //@line 16574
   HEAP32[$45 >> 2] = $30; //@line 16575
   $46 = $ReallocAsyncCtx14 + 12 | 0; //@line 16576
   HEAP32[$46 >> 2] = $14; //@line 16577
   $47 = $ReallocAsyncCtx14 + 16 | 0; //@line 16578
   HEAP32[$47 >> 2] = $8; //@line 16579
   $48 = $ReallocAsyncCtx14 + 20 | 0; //@line 16580
   HEAP32[$48 >> 2] = $4; //@line 16581
   $49 = $ReallocAsyncCtx14 + 24 | 0; //@line 16582
   HEAP32[$49 >> 2] = $16; //@line 16583
   sp = STACKTOP; //@line 16584
   return;
  }
  ___async_unwind = 0; //@line 16587
  HEAP32[$ReallocAsyncCtx14 >> 2] = 198; //@line 16588
  $44 = $ReallocAsyncCtx14 + 4 | 0; //@line 16589
  HEAP32[$44 >> 2] = $27; //@line 16590
  $45 = $ReallocAsyncCtx14 + 8 | 0; //@line 16591
  HEAP32[$45 >> 2] = $30; //@line 16592
  $46 = $ReallocAsyncCtx14 + 12 | 0; //@line 16593
  HEAP32[$46 >> 2] = $14; //@line 16594
  $47 = $ReallocAsyncCtx14 + 16 | 0; //@line 16595
  HEAP32[$47 >> 2] = $8; //@line 16596
  $48 = $ReallocAsyncCtx14 + 20 | 0; //@line 16597
  HEAP32[$48 >> 2] = $4; //@line 16598
  $49 = $ReallocAsyncCtx14 + 24 | 0; //@line 16599
  HEAP32[$49 >> 2] = $16; //@line 16600
  sp = STACKTOP; //@line 16601
  return;
 } else {
  $34 = HEAP32[$31 + 8 >> 2] | 0; //@line 16605
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(32) | 0; //@line 16606
  FUNCTION_TABLE_vi[$34 & 1023]($28); //@line 16607
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 197; //@line 16610
   $35 = $ReallocAsyncCtx13 + 4 | 0; //@line 16611
   HEAP32[$35 >> 2] = $27; //@line 16612
   $36 = $ReallocAsyncCtx13 + 8 | 0; //@line 16613
   HEAP32[$36 >> 2] = $30; //@line 16614
   $37 = $ReallocAsyncCtx13 + 12 | 0; //@line 16615
   HEAP32[$37 >> 2] = $28; //@line 16616
   $38 = $ReallocAsyncCtx13 + 16 | 0; //@line 16617
   HEAP32[$38 >> 2] = $14; //@line 16618
   $39 = $ReallocAsyncCtx13 + 20 | 0; //@line 16619
   HEAP32[$39 >> 2] = $8; //@line 16620
   $40 = $ReallocAsyncCtx13 + 24 | 0; //@line 16621
   HEAP32[$40 >> 2] = $4; //@line 16622
   $41 = $ReallocAsyncCtx13 + 28 | 0; //@line 16623
   HEAP32[$41 >> 2] = $16; //@line 16624
   sp = STACKTOP; //@line 16625
   return;
  }
  ___async_unwind = 0; //@line 16628
  HEAP32[$ReallocAsyncCtx13 >> 2] = 197; //@line 16629
  $35 = $ReallocAsyncCtx13 + 4 | 0; //@line 16630
  HEAP32[$35 >> 2] = $27; //@line 16631
  $36 = $ReallocAsyncCtx13 + 8 | 0; //@line 16632
  HEAP32[$36 >> 2] = $30; //@line 16633
  $37 = $ReallocAsyncCtx13 + 12 | 0; //@line 16634
  HEAP32[$37 >> 2] = $28; //@line 16635
  $38 = $ReallocAsyncCtx13 + 16 | 0; //@line 16636
  HEAP32[$38 >> 2] = $14; //@line 16637
  $39 = $ReallocAsyncCtx13 + 20 | 0; //@line 16638
  HEAP32[$39 >> 2] = $8; //@line 16639
  $40 = $ReallocAsyncCtx13 + 24 | 0; //@line 16640
  HEAP32[$40 >> 2] = $4; //@line 16641
  $41 = $ReallocAsyncCtx13 + 28 | 0; //@line 16642
  HEAP32[$41 >> 2] = $16; //@line 16643
  sp = STACKTOP; //@line 16644
  return;
 }
}
function __ZN16SX1276_LoRaRadio7receiveEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $11 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $3 = 0, $30 = 0, $33 = 0, $38 = 0, $39 = 0, $4 = 0, $42 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $50 = 0, $51 = 0, $54 = 0, $6 = 0, $61 = 0, $66 = 0, $69 = 0, $74 = 0, $80 = 0, $81 = 0, $84 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx20 = 0, $AsyncCtx24 = 0, $AsyncCtx9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP; //@line 404
 STACKTOP = STACKTOP + 64 | 0; //@line 405
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 405
 $vararg_buffer5 = sp + 16 | 0; //@line 406
 $vararg_buffer2 = sp + 8 | 0; //@line 407
 $vararg_buffer = sp; //@line 408
 $2 = sp + 40 | 0; //@line 409
 $3 = sp + 24 | 0; //@line 410
 $4 = $0 + 783 | 0; //@line 411
 $6 = HEAPU8[$4 >> 0] | 0; //@line 413
 HEAP32[$vararg_buffer >> 2] = $1; //@line 414
 HEAP32[$vararg_buffer + 4 >> 2] = $6; //@line 416
 _mbed_tracef(16, 11040, 11110, $vararg_buffer); //@line 417
 _emscripten_asm_const_i(2) | 0; //@line 418
 HEAP8[$0 + 688 >> 0] = 1; //@line 420
 if (!(HEAP8[$4 >> 0] | 0)) {
  do {
   if ($1 | 0) {
    $44 = $0 + 1112 | 0; //@line 427
    $45 = $3 + 12 | 0; //@line 428
    HEAP32[$3 >> 2] = 55; //@line 429
    HEAP32[$3 + 4 >> 2] = 0; //@line 431
    HEAP32[$3 + 8 >> 2] = $0; //@line 433
    HEAP32[$45 >> 2] = 584; //@line 434
    $46 = ___muldi3($1 | 0, 0, 1e3, 0) | 0; //@line 435
    $47 = tempRet0; //@line 436
    $48 = $0 + 1152 | 0; //@line 437
    if (($48 | 0) != ($3 | 0)) {
     $50 = $0 + 1164 | 0; //@line 440
     $51 = HEAP32[$50 >> 2] | 0; //@line 441
     do {
      if ($51 | 0) {
       $54 = HEAP32[$51 + 8 >> 2] | 0; //@line 446
       $AsyncCtx17 = _emscripten_alloc_async_context(40, sp) | 0; //@line 447
       FUNCTION_TABLE_vi[$54 & 1023]($48); //@line 448
       if (___async) {
        HEAP32[$AsyncCtx17 >> 2] = 56; //@line 451
        HEAP32[$AsyncCtx17 + 4 >> 2] = $45; //@line 453
        HEAP32[$AsyncCtx17 + 8 >> 2] = $50; //@line 455
        HEAP32[$AsyncCtx17 + 12 >> 2] = $48; //@line 457
        HEAP32[$AsyncCtx17 + 16 >> 2] = $3; //@line 459
        HEAP32[$AsyncCtx17 + 20 >> 2] = $44; //@line 461
        $61 = $AsyncCtx17 + 24 | 0; //@line 463
        HEAP32[$61 >> 2] = $46; //@line 465
        HEAP32[$61 + 4 >> 2] = $47; //@line 468
        HEAP32[$AsyncCtx17 + 32 >> 2] = $0; //@line 470
        sp = STACKTOP; //@line 471
        STACKTOP = sp; //@line 472
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx17 | 0); //@line 474
        break;
       }
      }
     } while (0);
     $66 = HEAP32[$45 >> 2] | 0; //@line 479
     do {
      if (!$66) {
       $80 = 0; //@line 483
      } else {
       $69 = HEAP32[$66 + 4 >> 2] | 0; //@line 486
       $AsyncCtx20 = _emscripten_alloc_async_context(32, sp) | 0; //@line 487
       FUNCTION_TABLE_vii[$69 & 15]($48, $3); //@line 488
       if (___async) {
        HEAP32[$AsyncCtx20 >> 2] = 57; //@line 491
        HEAP32[$AsyncCtx20 + 4 >> 2] = $45; //@line 493
        HEAP32[$AsyncCtx20 + 8 >> 2] = $50; //@line 495
        HEAP32[$AsyncCtx20 + 12 >> 2] = $44; //@line 497
        $74 = $AsyncCtx20 + 16 | 0; //@line 499
        HEAP32[$74 >> 2] = $46; //@line 501
        HEAP32[$74 + 4 >> 2] = $47; //@line 504
        HEAP32[$AsyncCtx20 + 24 >> 2] = $0; //@line 506
        HEAP32[$AsyncCtx20 + 28 >> 2] = $3; //@line 508
        sp = STACKTOP; //@line 509
        STACKTOP = sp; //@line 510
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx20 | 0); //@line 512
        $80 = HEAP32[$45 >> 2] | 0; //@line 514
        break;
       }
      }
     } while (0);
     HEAP32[$50 >> 2] = $80; //@line 519
    }
    __ZN4mbed6Ticker5setupEy($44, $46, $47); //@line 521
    $81 = HEAP32[$45 >> 2] | 0; //@line 522
    if ($81 | 0) {
     $84 = HEAP32[$81 + 8 >> 2] | 0; //@line 526
     $AsyncCtx24 = _emscripten_alloc_async_context(8, sp) | 0; //@line 527
     FUNCTION_TABLE_vi[$84 & 1023]($3); //@line 528
     if (___async) {
      HEAP32[$AsyncCtx24 >> 2] = 58; //@line 531
      HEAP32[$AsyncCtx24 + 4 >> 2] = $0; //@line 533
      sp = STACKTOP; //@line 534
      STACKTOP = sp; //@line 535
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx24 | 0); //@line 537
      break;
     }
    }
   }
  } while (0);
  __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 543
  STACKTOP = sp; //@line 544
  return;
 }
 $11 = _emscripten_asm_const_i(3) | 0; //@line 546
 $14 = $11 - (HEAP32[$0 + 784 >> 2] | 0) | 0; //@line 549
 HEAP32[$vararg_buffer2 >> 2] = $14; //@line 550
 _mbed_tracef(16, 11040, 11210, $vararg_buffer2); //@line 551
 HEAP8[$4 >> 0] = 0; //@line 552
 if ($14 >>> 0 > 500) {
  HEAP32[$vararg_buffer5 >> 2] = $14; //@line 555
  _mbed_tracef(4, 11040, 11231, $vararg_buffer5); //@line 556
  STACKTOP = sp; //@line 557
  return;
 }
 $16 = $0 + 1112 | 0; //@line 559
 $17 = $2 + 12 | 0; //@line 560
 HEAP32[$2 >> 2] = 51; //@line 561
 HEAP32[$2 + 4 >> 2] = 0; //@line 563
 HEAP32[$2 + 8 >> 2] = $0; //@line 565
 HEAP32[$17 >> 2] = 584; //@line 566
 $18 = $0 + 1152 | 0; //@line 567
 if (($18 | 0) != ($2 | 0)) {
  $20 = $0 + 1164 | 0; //@line 570
  $21 = HEAP32[$20 >> 2] | 0; //@line 571
  do {
   if ($21 | 0) {
    $24 = HEAP32[$21 + 8 >> 2] | 0; //@line 576
    $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 577
    FUNCTION_TABLE_vi[$24 & 1023]($18); //@line 578
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 52; //@line 581
     HEAP32[$AsyncCtx + 4 >> 2] = $17; //@line 583
     HEAP32[$AsyncCtx + 8 >> 2] = $20; //@line 585
     HEAP32[$AsyncCtx + 12 >> 2] = $18; //@line 587
     HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 589
     HEAP32[$AsyncCtx + 20 >> 2] = $16; //@line 591
     sp = STACKTOP; //@line 592
     STACKTOP = sp; //@line 593
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 595
     break;
    }
   }
  } while (0);
  $30 = HEAP32[$17 >> 2] | 0; //@line 600
  do {
   if (!$30) {
    $38 = 0; //@line 604
   } else {
    $33 = HEAP32[$30 + 4 >> 2] | 0; //@line 607
    $AsyncCtx9 = _emscripten_alloc_async_context(20, sp) | 0; //@line 608
    FUNCTION_TABLE_vii[$33 & 15]($18, $2); //@line 609
    if (___async) {
     HEAP32[$AsyncCtx9 >> 2] = 53; //@line 612
     HEAP32[$AsyncCtx9 + 4 >> 2] = $17; //@line 614
     HEAP32[$AsyncCtx9 + 8 >> 2] = $20; //@line 616
     HEAP32[$AsyncCtx9 + 12 >> 2] = $16; //@line 618
     HEAP32[$AsyncCtx9 + 16 >> 2] = $2; //@line 620
     sp = STACKTOP; //@line 621
     STACKTOP = sp; //@line 622
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx9 | 0); //@line 624
     $38 = HEAP32[$17 >> 2] | 0; //@line 626
     break;
    }
   }
  } while (0);
  HEAP32[$20 >> 2] = $38; //@line 631
 }
 __ZN4mbed6Ticker5setupEy($16, 2e5, 0); //@line 633
 $39 = HEAP32[$17 >> 2] | 0; //@line 634
 if (!$39) {
  STACKTOP = sp; //@line 637
  return;
 }
 $42 = HEAP32[$39 + 8 >> 2] | 0; //@line 640
 $AsyncCtx13 = _emscripten_alloc_async_context(4, sp) | 0; //@line 641
 FUNCTION_TABLE_vi[$42 & 1023]($2); //@line 642
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 54; //@line 645
  sp = STACKTOP; //@line 646
  STACKTOP = sp; //@line 647
  return;
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 649
 STACKTOP = sp; //@line 650
 return;
}
function __ZN7LoRaPHY13apply_cf_listEPKhh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$01314 = 0, $$015 = 0, $$079$i = 0, $106 = 0, $124 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $31 = 0, $34 = 0, $49 = 0, $50 = 0, $56 = 0, $58 = 0, $78 = 0, $83 = 0, $86 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 19924
 STACKTOP = STACKTOP + 16 | 0; //@line 19925
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 19925
 $3 = sp; //@line 19926
 if (!(HEAP8[$0 + 15 >> 0] | 0)) {
  STACKTOP = sp; //@line 19931
  return;
 }
 $16 = $3 + 8 | 0; //@line 19942
 HEAP8[$16 >> 0] = HEAPU8[$0 + 31 >> 0] << 4 | HEAPU8[$0 + 30 >> 0]; //@line 19943
 L4 : do {
  if ($2 << 24 >> 24 == 16) {
   $18 = $0 + 18 | 0; //@line 19947
   $19 = HEAP8[$18 >> 0] | 0; //@line 19948
   $20 = $0 + 20 | 0; //@line 19949
   if (($19 & 255) < (HEAPU8[$20 >> 0] | 0)) {
    $23 = $0 + 19 | 0; //@line 19953
    $24 = $3 + 4 | 0; //@line 19954
    $25 = $0 + 76 | 0; //@line 19955
    $26 = $3 + 9 | 0; //@line 19956
    $$01314 = 0; //@line 19957
    $$015 = $19; //@line 19957
    $31 = $19; //@line 19957
    L7 : while (1) {
     if ((($31 & 255) + (HEAPU8[$23 >> 0] | 0) | 0) >>> 0 > ($$015 & 255) >>> 0) {
      $34 = $$01314 & 255; //@line 19966
      $49 = HEAPU8[$1 + ($34 + 2) >> 0] << 16 | (HEAPU8[$1 + ($34 + 1) >> 0] << 8 | HEAPU8[$1 + $34 >> 0]); //@line 19981
      $50 = $49 * 100 | 0; //@line 19982
      HEAP32[$3 >> 2] = $50; //@line 19983
      HEAP32[$24 >> 2] = 0; //@line 19984
      if (!$49) {
       label = 16; //@line 19987
      } else {
       L12 : do {
        if (!(HEAP8[$25 >> 0] | 0)) {
         $83 = -1; //@line 19993
        } else {
         $$079$i = 0; //@line 19995
         while (1) {
          $56 = HEAP32[(HEAP32[$0 >> 2] | 0) + 76 >> 2] | 0; //@line 19999
          $AsyncCtx = _emscripten_alloc_async_context(80, sp) | 0; //@line 20001
          $58 = FUNCTION_TABLE_iiii[$56 & 31]($0, $50, $$079$i & 255) | 0; //@line 20002
          if (___async) {
           label = 10; //@line 20005
           break L7;
          }
          _emscripten_free_async_context($AsyncCtx | 0); //@line 20008
          if ($58) {
           $83 = $$079$i; //@line 20010
           break L12;
          }
          $78 = $$079$i + 1 | 0; //@line 20013
          if (($78 | 0) < (HEAPU8[$25 >> 0] | 0)) {
           $$079$i = $78; //@line 20018
          } else {
           $83 = -1; //@line 20020
           break;
          }
         }
        }
       } while (0);
       HEAP8[$26 >> 0] = $83; //@line 20027
       $86 = HEAP32[(HEAP32[$0 >> 2] | 0) + 60 >> 2] | 0; //@line 20030
       $AsyncCtx2 = _emscripten_alloc_async_context(72, sp) | 0; //@line 20031
       FUNCTION_TABLE_iiii[$86 & 31]($0, $3, $$015) | 0; //@line 20032
       if (___async) {
        label = 14; //@line 20035
        break;
       }
       _emscripten_free_async_context($AsyncCtx2 | 0); //@line 20038
      }
     } else {
      HEAP32[$3 >> 2] = 0; //@line 20041
      HEAP8[$16 >> 0] = 0; //@line 20042
      HEAP32[$24 >> 2] = 0; //@line 20043
      label = 16; //@line 20044
     }
     if ((label | 0) == 16) {
      label = 0; //@line 20047
      $106 = HEAP32[(HEAP32[$0 >> 2] | 0) + 64 >> 2] | 0; //@line 20050
      $AsyncCtx5 = _emscripten_alloc_async_context(72, sp) | 0; //@line 20051
      FUNCTION_TABLE_iii[$106 & 31]($0, $$015) | 0; //@line 20052
      if (___async) {
       label = 17; //@line 20055
       break;
      }
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 20058
     }
     $124 = $$015 + 1 << 24 >> 24; //@line 20060
     if (($124 & 255) >= (HEAPU8[$20 >> 0] | 0)) {
      break L4;
     }
     $$01314 = ($$01314 & 255) + 3 & 255; //@line 20070
     $$015 = $124; //@line 20070
     $31 = HEAP8[$18 >> 0] | 0; //@line 20070
    }
    if ((label | 0) == 10) {
     HEAP32[$AsyncCtx >> 2] = 515; //@line 20073
     HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 20075
     HEAP8[$AsyncCtx + 8 >> 0] = $$01314; //@line 20077
     HEAP32[$AsyncCtx + 12 >> 2] = $18; //@line 20079
     HEAP8[$AsyncCtx + 16 >> 0] = $$015; //@line 20081
     HEAP32[$AsyncCtx + 20 >> 2] = $20; //@line 20083
     HEAP32[$AsyncCtx + 24 >> 2] = $25; //@line 20085
     HEAP32[$AsyncCtx + 28 >> 2] = $1; //@line 20087
     HEAP32[$AsyncCtx + 32 >> 2] = $3; //@line 20089
     HEAP32[$AsyncCtx + 36 >> 2] = $24; //@line 20091
     HEAP32[$AsyncCtx + 40 >> 2] = $16; //@line 20093
     HEAP32[$AsyncCtx + 44 >> 2] = $23; //@line 20095
     HEAP32[$AsyncCtx + 48 >> 2] = $0; //@line 20097
     HEAP32[$AsyncCtx + 52 >> 2] = $0; //@line 20099
     HEAP32[$AsyncCtx + 56 >> 2] = $$079$i; //@line 20101
     HEAP32[$AsyncCtx + 60 >> 2] = $26; //@line 20103
     HEAP32[$AsyncCtx + 64 >> 2] = $0; //@line 20105
     HEAP32[$AsyncCtx + 68 >> 2] = $3; //@line 20107
     HEAP32[$AsyncCtx + 72 >> 2] = $0; //@line 20109
     HEAP32[$AsyncCtx + 76 >> 2] = $50; //@line 20111
     sp = STACKTOP; //@line 20112
     STACKTOP = sp; //@line 20113
     return;
    } else if ((label | 0) == 14) {
     HEAP32[$AsyncCtx2 >> 2] = 516; //@line 20116
     HEAP32[$AsyncCtx2 + 4 >> 2] = $3; //@line 20118
     HEAP8[$AsyncCtx2 + 8 >> 0] = $$01314; //@line 20120
     HEAP32[$AsyncCtx2 + 12 >> 2] = $18; //@line 20122
     HEAP8[$AsyncCtx2 + 16 >> 0] = $$015; //@line 20124
     HEAP32[$AsyncCtx2 + 20 >> 2] = $20; //@line 20126
     HEAP32[$AsyncCtx2 + 24 >> 2] = $25; //@line 20128
     HEAP32[$AsyncCtx2 + 28 >> 2] = $1; //@line 20130
     HEAP32[$AsyncCtx2 + 32 >> 2] = $3; //@line 20132
     HEAP32[$AsyncCtx2 + 36 >> 2] = $24; //@line 20134
     HEAP32[$AsyncCtx2 + 40 >> 2] = $16; //@line 20136
     HEAP32[$AsyncCtx2 + 44 >> 2] = $23; //@line 20138
     HEAP32[$AsyncCtx2 + 48 >> 2] = $0; //@line 20140
     HEAP32[$AsyncCtx2 + 52 >> 2] = $0; //@line 20142
     HEAP32[$AsyncCtx2 + 56 >> 2] = $26; //@line 20144
     HEAP32[$AsyncCtx2 + 60 >> 2] = $0; //@line 20146
     HEAP32[$AsyncCtx2 + 64 >> 2] = $3; //@line 20148
     HEAP32[$AsyncCtx2 + 68 >> 2] = $0; //@line 20150
     sp = STACKTOP; //@line 20151
     STACKTOP = sp; //@line 20152
     return;
    } else if ((label | 0) == 17) {
     HEAP32[$AsyncCtx5 >> 2] = 517; //@line 20155
     HEAP32[$AsyncCtx5 + 4 >> 2] = $3; //@line 20157
     HEAP8[$AsyncCtx5 + 8 >> 0] = $$01314; //@line 20159
     HEAP32[$AsyncCtx5 + 12 >> 2] = $18; //@line 20161
     HEAP8[$AsyncCtx5 + 16 >> 0] = $$015; //@line 20163
     HEAP32[$AsyncCtx5 + 20 >> 2] = $20; //@line 20165
     HEAP32[$AsyncCtx5 + 24 >> 2] = $25; //@line 20167
     HEAP32[$AsyncCtx5 + 28 >> 2] = $1; //@line 20169
     HEAP32[$AsyncCtx5 + 32 >> 2] = $3; //@line 20171
     HEAP32[$AsyncCtx5 + 36 >> 2] = $24; //@line 20173
     HEAP32[$AsyncCtx5 + 40 >> 2] = $16; //@line 20175
     HEAP32[$AsyncCtx5 + 44 >> 2] = $23; //@line 20177
     HEAP32[$AsyncCtx5 + 48 >> 2] = $0; //@line 20179
     HEAP32[$AsyncCtx5 + 52 >> 2] = $0; //@line 20181
     HEAP32[$AsyncCtx5 + 56 >> 2] = $26; //@line 20183
     HEAP32[$AsyncCtx5 + 60 >> 2] = $0; //@line 20185
     HEAP32[$AsyncCtx5 + 64 >> 2] = $3; //@line 20187
     HEAP32[$AsyncCtx5 + 68 >> 2] = $0; //@line 20189
     sp = STACKTOP; //@line 20190
     STACKTOP = sp; //@line 20191
     return;
    }
   }
  }
 } while (0);
 STACKTOP = sp; //@line 20196
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i = 0, $$pre$i = 0, $11 = 0, $13 = 0, $22 = 0, $25 = 0, $35 = 0, $36 = 0, $37 = 0, $41 = 0, $43 = 0, $51 = 0, $54 = 0, $6 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $71 = 0, $74 = 0, $78 = 0, $8 = 0, $81 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx18 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 9218
 STACKTOP = STACKTOP + 48 | 0; //@line 9219
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 9219
 $6 = sp + 16 | 0; //@line 9220
 $7 = sp; //@line 9221
 $8 = $1 + 12 | 0; //@line 9222
 $9 = HEAP32[$8 >> 2] | 0; //@line 9223
 do {
  if (!$9) {
   $11 = $7 + 12 | 0; //@line 9227
   HEAP32[$11 >> 2] = 0; //@line 9228
   $36 = 0; //@line 9229
   $43 = $11; //@line 9229
  } else {
   $13 = HEAP32[$9 + 4 >> 2] | 0; //@line 9232
   $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 9233
   FUNCTION_TABLE_vii[$13 & 15]($7, $1); //@line 9234
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 298; //@line 9237
    HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 9239
    HEAP32[$AsyncCtx + 8 >> 2] = $6; //@line 9241
    HEAP32[$AsyncCtx + 12 >> 2] = $8; //@line 9243
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 9245
    HEAP16[$AsyncCtx + 20 >> 1] = $3; //@line 9247
    HEAP16[$AsyncCtx + 22 >> 1] = $4; //@line 9249
    HEAP8[$AsyncCtx + 24 >> 0] = $5; //@line 9251
    HEAP32[$AsyncCtx + 28 >> 2] = $0; //@line 9253
    sp = STACKTOP; //@line 9254
    STACKTOP = sp; //@line 9255
    return 0; //@line 9255
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 9257
   $$pre$i = HEAP32[$8 >> 2] | 0; //@line 9258
   $22 = $7 + 12 | 0; //@line 9259
   HEAP32[$22 >> 2] = $$pre$i; //@line 9260
   if (!$$pre$i) {
    $36 = 0; //@line 9263
    $43 = $22; //@line 9263
   } else {
    $25 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 9267
    $AsyncCtx2 = _emscripten_alloc_async_context(36, sp) | 0; //@line 9268
    FUNCTION_TABLE_vii[$25 & 15]($6, $7); //@line 9269
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 299; //@line 9272
     HEAP32[$AsyncCtx2 + 4 >> 2] = $22; //@line 9274
     HEAP32[$AsyncCtx2 + 8 >> 2] = $7; //@line 9276
     HEAP32[$AsyncCtx2 + 12 >> 2] = $6; //@line 9278
     HEAP32[$AsyncCtx2 + 16 >> 2] = $22; //@line 9280
     HEAP32[$AsyncCtx2 + 20 >> 2] = $2; //@line 9282
     HEAP16[$AsyncCtx2 + 24 >> 1] = $3; //@line 9284
     HEAP16[$AsyncCtx2 + 26 >> 1] = $4; //@line 9286
     HEAP8[$AsyncCtx2 + 28 >> 0] = $5; //@line 9288
     HEAP32[$AsyncCtx2 + 32 >> 2] = $0; //@line 9290
     sp = STACKTOP; //@line 9291
     STACKTOP = sp; //@line 9292
     return 0; //@line 9292
    } else {
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 9294
     $36 = HEAP32[$22 >> 2] | 0; //@line 9296
     $43 = $22; //@line 9296
     break;
    }
   }
  }
 } while (0);
 $35 = $6 + 12 | 0; //@line 9302
 HEAP32[$35 >> 2] = $36; //@line 9303
 $37 = $6 + 16 | 0; //@line 9304
 HEAP32[$37 >> 2] = $2; //@line 9305
 HEAP16[$6 + 20 >> 1] = $3; //@line 9307
 HEAP16[$6 + 22 >> 1] = $4; //@line 9309
 HEAP8[$6 + 24 >> 0] = $5; //@line 9311
 $AsyncCtx18 = _emscripten_alloc_async_context(32, sp) | 0; //@line 9312
 $41 = _equeue_alloc($0, 28) | 0; //@line 9313
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 300; //@line 9316
  HEAP32[$AsyncCtx18 + 4 >> 2] = $43; //@line 9318
  HEAP32[$AsyncCtx18 + 8 >> 2] = $7; //@line 9320
  HEAP32[$AsyncCtx18 + 12 >> 2] = $35; //@line 9322
  HEAP32[$AsyncCtx18 + 16 >> 2] = $6; //@line 9324
  HEAP32[$AsyncCtx18 + 20 >> 2] = $37; //@line 9326
  HEAP32[$AsyncCtx18 + 24 >> 2] = $0; //@line 9328
  HEAP32[$AsyncCtx18 + 28 >> 2] = $35; //@line 9330
  sp = STACKTOP; //@line 9331
  STACKTOP = sp; //@line 9332
  return 0; //@line 9332
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 9334
 do {
  if (!$41) {
   $$0$i = 0; //@line 9338
  } else {
   $51 = HEAP32[$35 >> 2] | 0; //@line 9340
   do {
    if (!$51) {
     $64 = 0; //@line 9344
    } else {
     $54 = HEAP32[$51 + 4 >> 2] | 0; //@line 9347
     $AsyncCtx5 = _emscripten_alloc_async_context(36, sp) | 0; //@line 9348
     FUNCTION_TABLE_vii[$54 & 15]($41, $6); //@line 9349
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 301; //@line 9352
      HEAP32[$AsyncCtx5 + 4 >> 2] = $35; //@line 9354
      HEAP32[$AsyncCtx5 + 8 >> 2] = $41; //@line 9356
      HEAP32[$AsyncCtx5 + 12 >> 2] = $37; //@line 9358
      HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 9360
      HEAP32[$AsyncCtx5 + 20 >> 2] = $35; //@line 9362
      HEAP32[$AsyncCtx5 + 24 >> 2] = $43; //@line 9364
      HEAP32[$AsyncCtx5 + 28 >> 2] = $6; //@line 9366
      HEAP32[$AsyncCtx5 + 32 >> 2] = $7; //@line 9368
      sp = STACKTOP; //@line 9369
      STACKTOP = sp; //@line 9370
      return 0; //@line 9370
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 9372
      $64 = HEAP32[$35 >> 2] | 0; //@line 9374
      break;
     }
    }
   } while (0);
   HEAP32[$41 + 12 >> 2] = $64; //@line 9380
   $65 = $41 + 16 | 0; //@line 9381
   HEAP32[$65 >> 2] = HEAP32[$37 >> 2]; //@line 9382
   HEAP32[$65 + 4 >> 2] = HEAP32[$37 + 4 >> 2]; //@line 9382
   HEAP8[$65 + 8 >> 0] = HEAP8[$37 + 8 >> 0] | 0; //@line 9382
   _equeue_event_dtor($41, 302); //@line 9383
   $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 9384
   $66 = _equeue_post($0, 303, $41) | 0; //@line 9385
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 304; //@line 9388
    HEAP32[$AsyncCtx15 + 4 >> 2] = $35; //@line 9390
    HEAP32[$AsyncCtx15 + 8 >> 2] = $43; //@line 9392
    HEAP32[$AsyncCtx15 + 12 >> 2] = $6; //@line 9394
    HEAP32[$AsyncCtx15 + 16 >> 2] = $7; //@line 9396
    sp = STACKTOP; //@line 9397
    STACKTOP = sp; //@line 9398
    return 0; //@line 9398
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 9400
    $$0$i = $66; //@line 9401
    break;
   }
  }
 } while (0);
 $71 = HEAP32[$35 >> 2] | 0; //@line 9406
 do {
  if ($71 | 0) {
   $74 = HEAP32[$71 + 8 >> 2] | 0; //@line 9411
   $AsyncCtx8 = _emscripten_alloc_async_context(16, sp) | 0; //@line 9412
   FUNCTION_TABLE_vi[$74 & 1023]($6); //@line 9413
   if (___async) {
    HEAP32[$AsyncCtx8 >> 2] = 305; //@line 9416
    HEAP32[$AsyncCtx8 + 4 >> 2] = $43; //@line 9418
    HEAP32[$AsyncCtx8 + 8 >> 2] = $$0$i; //@line 9420
    HEAP32[$AsyncCtx8 + 12 >> 2] = $7; //@line 9422
    sp = STACKTOP; //@line 9423
    STACKTOP = sp; //@line 9424
    return 0; //@line 9424
   } else {
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 9426
    break;
   }
  }
 } while (0);
 $78 = HEAP32[$43 >> 2] | 0; //@line 9431
 if (!$78) {
  STACKTOP = sp; //@line 9434
  return $$0$i | 0; //@line 9434
 }
 $81 = HEAP32[$78 + 8 >> 2] | 0; //@line 9437
 $AsyncCtx12 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9438
 FUNCTION_TABLE_vi[$81 & 1023]($7); //@line 9439
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 306; //@line 9442
  HEAP32[$AsyncCtx12 + 4 >> 2] = $$0$i; //@line 9444
  sp = STACKTOP; //@line 9445
  STACKTOP = sp; //@line 9446
  return 0; //@line 9446
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 9448
 STACKTOP = sp; //@line 9449
 return $$0$i | 0; //@line 9449
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_240($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 15057
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15059
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15061
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15063
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15065
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 15069
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 15071
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 15073
 $17 = $12 + 12 | 0; //@line 15074
 HEAP32[$12 >> 2] = 6; //@line 15075
 HEAP32[$12 + 4 >> 2] = 0; //@line 15077
 HEAP32[$12 + 8 >> 2] = $2; //@line 15079
 HEAP32[$17 >> 2] = 836; //@line 15080
 $18 = $2 + 2416 | 0; //@line 15081
 if (($18 | 0) == ($12 | 0)) {
  $47 = HEAP32[211] | 0; //@line 15085
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(32) | 0; //@line 15086
  FUNCTION_TABLE_vi[$47 & 1023]($12); //@line 15087
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 187; //@line 15090
   $48 = $ReallocAsyncCtx6 + 4 | 0; //@line 15091
   HEAP32[$48 >> 2] = $2; //@line 15092
   $49 = $ReallocAsyncCtx6 + 8 | 0; //@line 15093
   HEAP32[$49 >> 2] = $4; //@line 15094
   $50 = $ReallocAsyncCtx6 + 12 | 0; //@line 15095
   HEAP32[$50 >> 2] = $6; //@line 15096
   $51 = $ReallocAsyncCtx6 + 16 | 0; //@line 15097
   HEAP32[$51 >> 2] = $12; //@line 15098
   $52 = $ReallocAsyncCtx6 + 20 | 0; //@line 15099
   HEAP32[$52 >> 2] = $8; //@line 15100
   $53 = $ReallocAsyncCtx6 + 24 | 0; //@line 15101
   HEAP32[$53 >> 2] = $14; //@line 15102
   $54 = $ReallocAsyncCtx6 + 28 | 0; //@line 15103
   HEAP32[$54 >> 2] = $16; //@line 15104
   sp = STACKTOP; //@line 15105
   return;
  }
  ___async_unwind = 0; //@line 15108
  HEAP32[$ReallocAsyncCtx6 >> 2] = 187; //@line 15109
  $48 = $ReallocAsyncCtx6 + 4 | 0; //@line 15110
  HEAP32[$48 >> 2] = $2; //@line 15111
  $49 = $ReallocAsyncCtx6 + 8 | 0; //@line 15112
  HEAP32[$49 >> 2] = $4; //@line 15113
  $50 = $ReallocAsyncCtx6 + 12 | 0; //@line 15114
  HEAP32[$50 >> 2] = $6; //@line 15115
  $51 = $ReallocAsyncCtx6 + 16 | 0; //@line 15116
  HEAP32[$51 >> 2] = $12; //@line 15117
  $52 = $ReallocAsyncCtx6 + 20 | 0; //@line 15118
  HEAP32[$52 >> 2] = $8; //@line 15119
  $53 = $ReallocAsyncCtx6 + 24 | 0; //@line 15120
  HEAP32[$53 >> 2] = $14; //@line 15121
  $54 = $ReallocAsyncCtx6 + 28 | 0; //@line 15122
  HEAP32[$54 >> 2] = $16; //@line 15123
  sp = STACKTOP; //@line 15124
  return;
 }
 $20 = $2 + 2428 | 0; //@line 15127
 $21 = HEAP32[$20 >> 2] | 0; //@line 15128
 if (!$21) {
  $36 = HEAP32[210] | 0; //@line 15132
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(40) | 0; //@line 15133
  FUNCTION_TABLE_vii[$36 & 15]($18, $12); //@line 15134
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 186; //@line 15137
   $37 = $ReallocAsyncCtx5 + 4 | 0; //@line 15138
   HEAP32[$37 >> 2] = $2; //@line 15139
   $38 = $ReallocAsyncCtx5 + 8 | 0; //@line 15140
   HEAP32[$38 >> 2] = $4; //@line 15141
   $39 = $ReallocAsyncCtx5 + 12 | 0; //@line 15142
   HEAP32[$39 >> 2] = $6; //@line 15143
   $40 = $ReallocAsyncCtx5 + 16 | 0; //@line 15144
   HEAP32[$40 >> 2] = $17; //@line 15145
   $41 = $ReallocAsyncCtx5 + 20 | 0; //@line 15146
   HEAP32[$41 >> 2] = $20; //@line 15147
   $42 = $ReallocAsyncCtx5 + 24 | 0; //@line 15148
   HEAP32[$42 >> 2] = $12; //@line 15149
   $43 = $ReallocAsyncCtx5 + 28 | 0; //@line 15150
   HEAP32[$43 >> 2] = $8; //@line 15151
   $44 = $ReallocAsyncCtx5 + 32 | 0; //@line 15152
   HEAP32[$44 >> 2] = $14; //@line 15153
   $45 = $ReallocAsyncCtx5 + 36 | 0; //@line 15154
   HEAP32[$45 >> 2] = $16; //@line 15155
   sp = STACKTOP; //@line 15156
   return;
  }
  ___async_unwind = 0; //@line 15159
  HEAP32[$ReallocAsyncCtx5 >> 2] = 186; //@line 15160
  $37 = $ReallocAsyncCtx5 + 4 | 0; //@line 15161
  HEAP32[$37 >> 2] = $2; //@line 15162
  $38 = $ReallocAsyncCtx5 + 8 | 0; //@line 15163
  HEAP32[$38 >> 2] = $4; //@line 15164
  $39 = $ReallocAsyncCtx5 + 12 | 0; //@line 15165
  HEAP32[$39 >> 2] = $6; //@line 15166
  $40 = $ReallocAsyncCtx5 + 16 | 0; //@line 15167
  HEAP32[$40 >> 2] = $17; //@line 15168
  $41 = $ReallocAsyncCtx5 + 20 | 0; //@line 15169
  HEAP32[$41 >> 2] = $20; //@line 15170
  $42 = $ReallocAsyncCtx5 + 24 | 0; //@line 15171
  HEAP32[$42 >> 2] = $12; //@line 15172
  $43 = $ReallocAsyncCtx5 + 28 | 0; //@line 15173
  HEAP32[$43 >> 2] = $8; //@line 15174
  $44 = $ReallocAsyncCtx5 + 32 | 0; //@line 15175
  HEAP32[$44 >> 2] = $14; //@line 15176
  $45 = $ReallocAsyncCtx5 + 36 | 0; //@line 15177
  HEAP32[$45 >> 2] = $16; //@line 15178
  sp = STACKTOP; //@line 15179
  return;
 } else {
  $24 = HEAP32[$21 + 8 >> 2] | 0; //@line 15183
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(44) | 0; //@line 15184
  FUNCTION_TABLE_vi[$24 & 1023]($18); //@line 15185
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 185; //@line 15188
   $25 = $ReallocAsyncCtx4 + 4 | 0; //@line 15189
   HEAP32[$25 >> 2] = $17; //@line 15190
   $26 = $ReallocAsyncCtx4 + 8 | 0; //@line 15191
   HEAP32[$26 >> 2] = $2; //@line 15192
   $27 = $ReallocAsyncCtx4 + 12 | 0; //@line 15193
   HEAP32[$27 >> 2] = $4; //@line 15194
   $28 = $ReallocAsyncCtx4 + 16 | 0; //@line 15195
   HEAP32[$28 >> 2] = $6; //@line 15196
   $29 = $ReallocAsyncCtx4 + 20 | 0; //@line 15197
   HEAP32[$29 >> 2] = $20; //@line 15198
   $30 = $ReallocAsyncCtx4 + 24 | 0; //@line 15199
   HEAP32[$30 >> 2] = $18; //@line 15200
   $31 = $ReallocAsyncCtx4 + 28 | 0; //@line 15201
   HEAP32[$31 >> 2] = $12; //@line 15202
   $32 = $ReallocAsyncCtx4 + 32 | 0; //@line 15203
   HEAP32[$32 >> 2] = $8; //@line 15204
   $33 = $ReallocAsyncCtx4 + 36 | 0; //@line 15205
   HEAP32[$33 >> 2] = $14; //@line 15206
   $34 = $ReallocAsyncCtx4 + 40 | 0; //@line 15207
   HEAP32[$34 >> 2] = $16; //@line 15208
   sp = STACKTOP; //@line 15209
   return;
  }
  ___async_unwind = 0; //@line 15212
  HEAP32[$ReallocAsyncCtx4 >> 2] = 185; //@line 15213
  $25 = $ReallocAsyncCtx4 + 4 | 0; //@line 15214
  HEAP32[$25 >> 2] = $17; //@line 15215
  $26 = $ReallocAsyncCtx4 + 8 | 0; //@line 15216
  HEAP32[$26 >> 2] = $2; //@line 15217
  $27 = $ReallocAsyncCtx4 + 12 | 0; //@line 15218
  HEAP32[$27 >> 2] = $4; //@line 15219
  $28 = $ReallocAsyncCtx4 + 16 | 0; //@line 15220
  HEAP32[$28 >> 2] = $6; //@line 15221
  $29 = $ReallocAsyncCtx4 + 20 | 0; //@line 15222
  HEAP32[$29 >> 2] = $20; //@line 15223
  $30 = $ReallocAsyncCtx4 + 24 | 0; //@line 15224
  HEAP32[$30 >> 2] = $18; //@line 15225
  $31 = $ReallocAsyncCtx4 + 28 | 0; //@line 15226
  HEAP32[$31 >> 2] = $12; //@line 15227
  $32 = $ReallocAsyncCtx4 + 32 | 0; //@line 15228
  HEAP32[$32 >> 2] = $8; //@line 15229
  $33 = $ReallocAsyncCtx4 + 36 | 0; //@line 15230
  HEAP32[$33 >> 2] = $14; //@line 15231
  $34 = $ReallocAsyncCtx4 + 40 | 0; //@line 15232
  HEAP32[$34 >> 2] = $16; //@line 15233
  sp = STACKTOP; //@line 15234
  return;
 }
}
function _main__async_cb_389($0) {
 $0 = $0 | 0;
 var $$expand_i1_val = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $41 = 0, $45 = 0, $46 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 26909
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26911
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26913
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26915
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26917
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26919
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26921
 $14 = HEAP8[$0 + 28 >> 0] & 1; //@line 26924
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 26926
 $19 = HEAP32[HEAP32[$0 + 36 >> 2] >> 2] | 0; //@line 26929
 if ($19 | 0) {
  $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 26933
  $ReallocAsyncCtx = _emscripten_realloc_async_context(32) | 0; //@line 26934
  FUNCTION_TABLE_vi[$22 & 1023]($16); //@line 26935
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 674; //@line 26938
   $23 = $ReallocAsyncCtx + 4 | 0; //@line 26939
   HEAP32[$23 >> 2] = $2; //@line 26940
   $24 = $ReallocAsyncCtx + 8 | 0; //@line 26941
   HEAP32[$24 >> 2] = $4; //@line 26942
   $25 = $ReallocAsyncCtx + 12 | 0; //@line 26943
   HEAP32[$25 >> 2] = $6; //@line 26944
   $26 = $ReallocAsyncCtx + 16 | 0; //@line 26945
   $$expand_i1_val = $14 & 1; //@line 26946
   HEAP8[$26 >> 0] = $$expand_i1_val; //@line 26947
   $27 = $ReallocAsyncCtx + 20 | 0; //@line 26948
   HEAP32[$27 >> 2] = $8; //@line 26949
   $28 = $ReallocAsyncCtx + 24 | 0; //@line 26950
   HEAP32[$28 >> 2] = $10; //@line 26951
   $29 = $ReallocAsyncCtx + 28 | 0; //@line 26952
   HEAP32[$29 >> 2] = $12; //@line 26953
   sp = STACKTOP; //@line 26954
   return;
  }
  ___async_unwind = 0; //@line 26957
  HEAP32[$ReallocAsyncCtx >> 2] = 674; //@line 26958
  $23 = $ReallocAsyncCtx + 4 | 0; //@line 26959
  HEAP32[$23 >> 2] = $2; //@line 26960
  $24 = $ReallocAsyncCtx + 8 | 0; //@line 26961
  HEAP32[$24 >> 2] = $4; //@line 26962
  $25 = $ReallocAsyncCtx + 12 | 0; //@line 26963
  HEAP32[$25 >> 2] = $6; //@line 26964
  $26 = $ReallocAsyncCtx + 16 | 0; //@line 26965
  $$expand_i1_val = $14 & 1; //@line 26966
  HEAP8[$26 >> 0] = $$expand_i1_val; //@line 26967
  $27 = $ReallocAsyncCtx + 20 | 0; //@line 26968
  HEAP32[$27 >> 2] = $8; //@line 26969
  $28 = $ReallocAsyncCtx + 24 | 0; //@line 26970
  HEAP32[$28 >> 2] = $10; //@line 26971
  $29 = $ReallocAsyncCtx + 28 | 0; //@line 26972
  HEAP32[$29 >> 2] = $12; //@line 26973
  sp = STACKTOP; //@line 26974
  return;
 }
 if (!$14) {
  $31 = (HEAP32[$4 >> 2] | 0) + -1 | 0; //@line 26979
  HEAP32[$4 >> 2] = $31; //@line 26980
  if (!$31) {
   $34 = HEAP32[$4 + 24 >> 2] | 0; //@line 26984
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 26985
   FUNCTION_TABLE_vi[$34 & 1023]($6); //@line 26986
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 675; //@line 26989
    $35 = $ReallocAsyncCtx2 + 4 | 0; //@line 26990
    HEAP32[$35 >> 2] = $2; //@line 26991
    $36 = $ReallocAsyncCtx2 + 8 | 0; //@line 26992
    HEAP32[$36 >> 2] = $4; //@line 26993
    $37 = $ReallocAsyncCtx2 + 12 | 0; //@line 26994
    HEAP32[$37 >> 2] = $8; //@line 26995
    $38 = $ReallocAsyncCtx2 + 16 | 0; //@line 26996
    HEAP32[$38 >> 2] = $10; //@line 26997
    $39 = $ReallocAsyncCtx2 + 20 | 0; //@line 26998
    HEAP32[$39 >> 2] = $12; //@line 26999
    sp = STACKTOP; //@line 27000
    return;
   }
   ___async_unwind = 0; //@line 27003
   HEAP32[$ReallocAsyncCtx2 >> 2] = 675; //@line 27004
   $35 = $ReallocAsyncCtx2 + 4 | 0; //@line 27005
   HEAP32[$35 >> 2] = $2; //@line 27006
   $36 = $ReallocAsyncCtx2 + 8 | 0; //@line 27007
   HEAP32[$36 >> 2] = $4; //@line 27008
   $37 = $ReallocAsyncCtx2 + 12 | 0; //@line 27009
   HEAP32[$37 >> 2] = $8; //@line 27010
   $38 = $ReallocAsyncCtx2 + 16 | 0; //@line 27011
   HEAP32[$38 >> 2] = $10; //@line 27012
   $39 = $ReallocAsyncCtx2 + 20 | 0; //@line 27013
   HEAP32[$39 >> 2] = $12; //@line 27014
   sp = STACKTOP; //@line 27015
   return;
  }
 }
 $41 = $2 + 4 | 0; //@line 27020
 HEAP32[$41 >> 2] = 0; //@line 27022
 HEAP32[$41 + 4 >> 2] = 0; //@line 27025
 HEAP32[$2 >> 2] = 677; //@line 27026
 $45 = $2 + 12 | 0; //@line 27027
 HEAP32[$45 >> 2] = 10276; //@line 27028
 $46 = HEAP32[5960] | 0; //@line 27029
 if (!$46) {
  $56 = HEAP32[2570] | 0; //@line 27033
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 27034
  FUNCTION_TABLE_vii[$56 & 15](23828, $2); //@line 27035
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 679; //@line 27038
   $57 = $ReallocAsyncCtx4 + 4 | 0; //@line 27039
   HEAP32[$57 >> 2] = $45; //@line 27040
   $58 = $ReallocAsyncCtx4 + 8 | 0; //@line 27041
   HEAP32[$58 >> 2] = $2; //@line 27042
   $59 = $ReallocAsyncCtx4 + 12 | 0; //@line 27043
   HEAP32[$59 >> 2] = $8; //@line 27044
   $60 = $ReallocAsyncCtx4 + 16 | 0; //@line 27045
   HEAP32[$60 >> 2] = $10; //@line 27046
   $61 = $ReallocAsyncCtx4 + 20 | 0; //@line 27047
   HEAP32[$61 >> 2] = $12; //@line 27048
   sp = STACKTOP; //@line 27049
   return;
  }
  ___async_unwind = 0; //@line 27052
  HEAP32[$ReallocAsyncCtx4 >> 2] = 679; //@line 27053
  $57 = $ReallocAsyncCtx4 + 4 | 0; //@line 27054
  HEAP32[$57 >> 2] = $45; //@line 27055
  $58 = $ReallocAsyncCtx4 + 8 | 0; //@line 27056
  HEAP32[$58 >> 2] = $2; //@line 27057
  $59 = $ReallocAsyncCtx4 + 12 | 0; //@line 27058
  HEAP32[$59 >> 2] = $8; //@line 27059
  $60 = $ReallocAsyncCtx4 + 16 | 0; //@line 27060
  HEAP32[$60 >> 2] = $10; //@line 27061
  $61 = $ReallocAsyncCtx4 + 20 | 0; //@line 27062
  HEAP32[$61 >> 2] = $12; //@line 27063
  sp = STACKTOP; //@line 27064
  return;
 } else {
  $49 = HEAP32[$46 + 8 >> 2] | 0; //@line 27068
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 27069
  FUNCTION_TABLE_vi[$49 & 1023](23828); //@line 27070
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 678; //@line 27073
   $50 = $ReallocAsyncCtx3 + 4 | 0; //@line 27074
   HEAP32[$50 >> 2] = $45; //@line 27075
   $51 = $ReallocAsyncCtx3 + 8 | 0; //@line 27076
   HEAP32[$51 >> 2] = $2; //@line 27077
   $52 = $ReallocAsyncCtx3 + 12 | 0; //@line 27078
   HEAP32[$52 >> 2] = $8; //@line 27079
   $53 = $ReallocAsyncCtx3 + 16 | 0; //@line 27080
   HEAP32[$53 >> 2] = $10; //@line 27081
   $54 = $ReallocAsyncCtx3 + 20 | 0; //@line 27082
   HEAP32[$54 >> 2] = $12; //@line 27083
   sp = STACKTOP; //@line 27084
   return;
  }
  ___async_unwind = 0; //@line 27087
  HEAP32[$ReallocAsyncCtx3 >> 2] = 678; //@line 27088
  $50 = $ReallocAsyncCtx3 + 4 | 0; //@line 27089
  HEAP32[$50 >> 2] = $45; //@line 27090
  $51 = $ReallocAsyncCtx3 + 8 | 0; //@line 27091
  HEAP32[$51 >> 2] = $2; //@line 27092
  $52 = $ReallocAsyncCtx3 + 12 | 0; //@line 27093
  HEAP32[$52 >> 2] = $8; //@line 27094
  $53 = $ReallocAsyncCtx3 + 16 | 0; //@line 27095
  HEAP32[$53 >> 2] = $10; //@line 27096
  $54 = $ReallocAsyncCtx3 + 20 | 0; //@line 27097
  HEAP32[$54 >> 2] = $12; //@line 27098
  sp = STACKTOP; //@line 27099
  return;
 }
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_248($0) {
 $0 = $0 | 0;
 var $$pre$i$i54 = 0, $10 = 0, $12 = 0, $14 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $8 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 16654
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16656
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16662
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16664
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16666
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16668
 $$pre$i$i54 = HEAP32[HEAP32[$0 + 8 >> 2] >> 2] | 0; //@line 16669
 HEAP32[HEAP32[$0 + 12 >> 2] >> 2] = $$pre$i$i54; //@line 16671
 if ($$pre$i$i54 | 0) {
  $18 = HEAP32[$$pre$i$i54 + 8 >> 2] | 0; //@line 16675
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(24) | 0; //@line 16676
  FUNCTION_TABLE_vi[$18 & 1023]($10); //@line 16677
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 195; //@line 16680
   $19 = $ReallocAsyncCtx12 + 4 | 0; //@line 16681
   HEAP32[$19 >> 2] = $2; //@line 16682
   $20 = $ReallocAsyncCtx12 + 8 | 0; //@line 16683
   HEAP32[$20 >> 2] = $8; //@line 16684
   $21 = $ReallocAsyncCtx12 + 12 | 0; //@line 16685
   HEAP32[$21 >> 2] = $10; //@line 16686
   $22 = $ReallocAsyncCtx12 + 16 | 0; //@line 16687
   HEAP32[$22 >> 2] = $12; //@line 16688
   $23 = $ReallocAsyncCtx12 + 20 | 0; //@line 16689
   HEAP32[$23 >> 2] = $14; //@line 16690
   sp = STACKTOP; //@line 16691
   return;
  }
  ___async_unwind = 0; //@line 16694
  HEAP32[$ReallocAsyncCtx12 >> 2] = 195; //@line 16695
  $19 = $ReallocAsyncCtx12 + 4 | 0; //@line 16696
  HEAP32[$19 >> 2] = $2; //@line 16697
  $20 = $ReallocAsyncCtx12 + 8 | 0; //@line 16698
  HEAP32[$20 >> 2] = $8; //@line 16699
  $21 = $ReallocAsyncCtx12 + 12 | 0; //@line 16700
  HEAP32[$21 >> 2] = $10; //@line 16701
  $22 = $ReallocAsyncCtx12 + 16 | 0; //@line 16702
  HEAP32[$22 >> 2] = $12; //@line 16703
  $23 = $ReallocAsyncCtx12 + 20 | 0; //@line 16704
  HEAP32[$23 >> 2] = $14; //@line 16705
  sp = STACKTOP; //@line 16706
  return;
 }
 $24 = $12 + 12 | 0; //@line 16709
 HEAP32[$12 >> 2] = 196; //@line 16710
 HEAP32[$12 + 4 >> 2] = 0; //@line 16712
 HEAP32[$12 + 8 >> 2] = $8; //@line 16714
 HEAP32[$24 >> 2] = 824; //@line 16715
 $25 = $8 + 2432 | 0; //@line 16716
 if (($25 | 0) == ($12 | 0)) {
  $48 = HEAP32[208] | 0; //@line 16720
  $ReallocAsyncCtx15 = _emscripten_realloc_async_context(20) | 0; //@line 16721
  FUNCTION_TABLE_vi[$48 & 1023]($12); //@line 16722
  if (___async) {
   HEAP32[$ReallocAsyncCtx15 >> 2] = 199; //@line 16725
   $49 = $ReallocAsyncCtx15 + 4 | 0; //@line 16726
   HEAP32[$49 >> 2] = $12; //@line 16727
   $50 = $ReallocAsyncCtx15 + 8 | 0; //@line 16728
   HEAP32[$50 >> 2] = $8; //@line 16729
   $51 = $ReallocAsyncCtx15 + 12 | 0; //@line 16730
   HEAP32[$51 >> 2] = $2; //@line 16731
   $52 = $ReallocAsyncCtx15 + 16 | 0; //@line 16732
   HEAP32[$52 >> 2] = $14; //@line 16733
   sp = STACKTOP; //@line 16734
   return;
  }
  ___async_unwind = 0; //@line 16737
  HEAP32[$ReallocAsyncCtx15 >> 2] = 199; //@line 16738
  $49 = $ReallocAsyncCtx15 + 4 | 0; //@line 16739
  HEAP32[$49 >> 2] = $12; //@line 16740
  $50 = $ReallocAsyncCtx15 + 8 | 0; //@line 16741
  HEAP32[$50 >> 2] = $8; //@line 16742
  $51 = $ReallocAsyncCtx15 + 12 | 0; //@line 16743
  HEAP32[$51 >> 2] = $2; //@line 16744
  $52 = $ReallocAsyncCtx15 + 16 | 0; //@line 16745
  HEAP32[$52 >> 2] = $14; //@line 16746
  sp = STACKTOP; //@line 16747
  return;
 }
 $27 = $8 + 2444 | 0; //@line 16750
 $28 = HEAP32[$27 >> 2] | 0; //@line 16751
 if (!$28) {
  $40 = HEAP32[207] | 0; //@line 16755
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(28) | 0; //@line 16756
  FUNCTION_TABLE_vii[$40 & 15]($25, $12); //@line 16757
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 198; //@line 16760
   $41 = $ReallocAsyncCtx14 + 4 | 0; //@line 16761
   HEAP32[$41 >> 2] = $24; //@line 16762
   $42 = $ReallocAsyncCtx14 + 8 | 0; //@line 16763
   HEAP32[$42 >> 2] = $27; //@line 16764
   $43 = $ReallocAsyncCtx14 + 12 | 0; //@line 16765
   HEAP32[$43 >> 2] = $12; //@line 16766
   $44 = $ReallocAsyncCtx14 + 16 | 0; //@line 16767
   HEAP32[$44 >> 2] = $8; //@line 16768
   $45 = $ReallocAsyncCtx14 + 20 | 0; //@line 16769
   HEAP32[$45 >> 2] = $2; //@line 16770
   $46 = $ReallocAsyncCtx14 + 24 | 0; //@line 16771
   HEAP32[$46 >> 2] = $14; //@line 16772
   sp = STACKTOP; //@line 16773
   return;
  }
  ___async_unwind = 0; //@line 16776
  HEAP32[$ReallocAsyncCtx14 >> 2] = 198; //@line 16777
  $41 = $ReallocAsyncCtx14 + 4 | 0; //@line 16778
  HEAP32[$41 >> 2] = $24; //@line 16779
  $42 = $ReallocAsyncCtx14 + 8 | 0; //@line 16780
  HEAP32[$42 >> 2] = $27; //@line 16781
  $43 = $ReallocAsyncCtx14 + 12 | 0; //@line 16782
  HEAP32[$43 >> 2] = $12; //@line 16783
  $44 = $ReallocAsyncCtx14 + 16 | 0; //@line 16784
  HEAP32[$44 >> 2] = $8; //@line 16785
  $45 = $ReallocAsyncCtx14 + 20 | 0; //@line 16786
  HEAP32[$45 >> 2] = $2; //@line 16787
  $46 = $ReallocAsyncCtx14 + 24 | 0; //@line 16788
  HEAP32[$46 >> 2] = $14; //@line 16789
  sp = STACKTOP; //@line 16790
  return;
 } else {
  $31 = HEAP32[$28 + 8 >> 2] | 0; //@line 16794
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(32) | 0; //@line 16795
  FUNCTION_TABLE_vi[$31 & 1023]($25); //@line 16796
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 197; //@line 16799
   $32 = $ReallocAsyncCtx13 + 4 | 0; //@line 16800
   HEAP32[$32 >> 2] = $24; //@line 16801
   $33 = $ReallocAsyncCtx13 + 8 | 0; //@line 16802
   HEAP32[$33 >> 2] = $27; //@line 16803
   $34 = $ReallocAsyncCtx13 + 12 | 0; //@line 16804
   HEAP32[$34 >> 2] = $25; //@line 16805
   $35 = $ReallocAsyncCtx13 + 16 | 0; //@line 16806
   HEAP32[$35 >> 2] = $12; //@line 16807
   $36 = $ReallocAsyncCtx13 + 20 | 0; //@line 16808
   HEAP32[$36 >> 2] = $8; //@line 16809
   $37 = $ReallocAsyncCtx13 + 24 | 0; //@line 16810
   HEAP32[$37 >> 2] = $2; //@line 16811
   $38 = $ReallocAsyncCtx13 + 28 | 0; //@line 16812
   HEAP32[$38 >> 2] = $14; //@line 16813
   sp = STACKTOP; //@line 16814
   return;
  }
  ___async_unwind = 0; //@line 16817
  HEAP32[$ReallocAsyncCtx13 >> 2] = 197; //@line 16818
  $32 = $ReallocAsyncCtx13 + 4 | 0; //@line 16819
  HEAP32[$32 >> 2] = $24; //@line 16820
  $33 = $ReallocAsyncCtx13 + 8 | 0; //@line 16821
  HEAP32[$33 >> 2] = $27; //@line 16822
  $34 = $ReallocAsyncCtx13 + 12 | 0; //@line 16823
  HEAP32[$34 >> 2] = $25; //@line 16824
  $35 = $ReallocAsyncCtx13 + 16 | 0; //@line 16825
  HEAP32[$35 >> 2] = $12; //@line 16826
  $36 = $ReallocAsyncCtx13 + 20 | 0; //@line 16827
  HEAP32[$36 >> 2] = $8; //@line 16828
  $37 = $ReallocAsyncCtx13 + 24 | 0; //@line 16829
  HEAP32[$37 >> 2] = $2; //@line 16830
  $38 = $ReallocAsyncCtx13 + 28 | 0; //@line 16831
  HEAP32[$38 >> 2] = $14; //@line 16832
  sp = STACKTOP; //@line 16833
  return;
 }
}
function _mbedtls_cipher_cmac_update($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$06984 = 0, $$06984$us = 0, $$070 = 0, $$073 = 0, $$09$i = 0, $$09$i75 = 0, $$1$lcssa = 0, $$174$lcssa = 0, $$17481 = 0, $$182 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $22 = 0, $26 = 0, $3 = 0, $38 = 0, $43 = 0, $46 = 0, $5 = 0, $58 = 0, $62 = 0, $66 = 0, $79 = 0, $80 = 0, $81 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 3266
 STACKTOP = STACKTOP + 16 | 0; //@line 3267
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 3267
 $3 = sp; //@line 3268
 if (!$0) {
  $$0 = -24832; //@line 3271
  STACKTOP = sp; //@line 3272
  return $$0 | 0; //@line 3272
 }
 $5 = HEAP32[$0 >> 2] | 0; //@line 3274
 if (($1 | 0) == 0 | ($5 | 0) == 0) {
  $$0 = -24832; //@line 3279
  STACKTOP = sp; //@line 3280
  return $$0 | 0; //@line 3280
 }
 $9 = HEAP32[$0 + 64 >> 2] | 0; //@line 3283
 if (!$9) {
  $$0 = -24832; //@line 3286
  STACKTOP = sp; //@line 3287
  return $$0 | 0; //@line 3287
 }
 $12 = HEAP32[$5 + 24 >> 2] | 0; //@line 3290
 $13 = $9 + 32 | 0; //@line 3291
 $14 = HEAP32[$13 >> 2] | 0; //@line 3292
 do {
  if (!$14) {
   $$070 = $1; //@line 3296
   $$073 = $2; //@line 3296
  } else {
   $16 = $12 - $14 | 0; //@line 3298
   if ($16 >>> 0 < $2 >>> 0) {
    _memcpy($9 + 16 + $14 | 0, $1 | 0, $16 | 0) | 0; //@line 3302
    if ($12 | 0) {
     $$09$i = 0; //@line 3305
     do {
      $22 = $9 + $$09$i | 0; //@line 3309
      HEAP8[$22 >> 0] = HEAP8[$22 >> 0] ^ HEAP8[$9 + 16 + $$09$i >> 0]; //@line 3312
      $$09$i = $$09$i + 1 | 0; //@line 3313
     } while (($$09$i | 0) != ($12 | 0));
    }
    $AsyncCtx5 = _emscripten_alloc_async_context(40, sp) | 0; //@line 3322
    $26 = _mbedtls_cipher_update($0, $9, $12, $9, $3) | 0; //@line 3323
    if (___async) {
     HEAP32[$AsyncCtx5 >> 2] = 596; //@line 3326
     HEAP32[$AsyncCtx5 + 4 >> 2] = $3; //@line 3328
     HEAP32[$AsyncCtx5 + 8 >> 2] = $0; //@line 3330
     HEAP32[$AsyncCtx5 + 12 >> 2] = $9; //@line 3332
     HEAP32[$AsyncCtx5 + 16 >> 2] = $3; //@line 3334
     HEAP32[$AsyncCtx5 + 20 >> 2] = $13; //@line 3336
     HEAP32[$AsyncCtx5 + 24 >> 2] = $9; //@line 3338
     HEAP32[$AsyncCtx5 + 28 >> 2] = $12; //@line 3340
     HEAP32[$AsyncCtx5 + 32 >> 2] = $1; //@line 3342
     HEAP32[$AsyncCtx5 + 36 >> 2] = $2; //@line 3344
     sp = STACKTOP; //@line 3345
     STACKTOP = sp; //@line 3346
     return 0; //@line 3346
    }
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 3348
    if (!$26) {
     $38 = $12 - (HEAP32[$13 >> 2] | 0) | 0; //@line 3352
     HEAP32[$13 >> 2] = 0; //@line 3355
     $$070 = $1 + $38 | 0; //@line 3356
     $$073 = $2 - $38 | 0; //@line 3356
     break;
    } else {
     $$0 = $26; //@line 3359
     STACKTOP = sp; //@line 3360
     return $$0 | 0; //@line 3360
    }
   } else {
    $$070 = $1; //@line 3363
    $$073 = $2; //@line 3363
   }
  }
 } while (0);
 $43 = (($12 + -1 + $$073 | 0) >>> 0) / ($12 >>> 0) | 0; //@line 3369
 L24 : do {
  if ($43 >>> 0 > 1) {
   if (!$12) {
    $$06984$us = 1; //@line 3375
    while (1) {
     $AsyncCtx2 = _emscripten_alloc_async_context(44, sp) | 0; //@line 3377
     $46 = _mbedtls_cipher_update($0, $9, 0, $9, $3) | 0; //@line 3378
     if (___async) {
      label = 15; //@line 3381
      break;
     }
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 3384
     if ($46 | 0) {
      $$0 = $46; //@line 3387
      label = 26; //@line 3388
      break;
     }
     $58 = $$06984$us + 1 | 0; //@line 3391
     if ($58 >>> 0 < $43 >>> 0) {
      $$06984$us = $58; //@line 3394
     } else {
      $$1$lcssa = $$070; //@line 3396
      $$174$lcssa = $$073; //@line 3396
      break L24;
     }
    }
    if ((label | 0) == 15) {
     HEAP32[$AsyncCtx2 >> 2] = 597; //@line 3401
     HEAP32[$AsyncCtx2 + 4 >> 2] = $$06984$us; //@line 3403
     HEAP32[$AsyncCtx2 + 8 >> 2] = $43; //@line 3405
     HEAP32[$AsyncCtx2 + 12 >> 2] = $3; //@line 3407
     HEAP32[$AsyncCtx2 + 16 >> 2] = $0; //@line 3409
     HEAP32[$AsyncCtx2 + 20 >> 2] = $9; //@line 3411
     HEAP32[$AsyncCtx2 + 24 >> 2] = $3; //@line 3413
     HEAP32[$AsyncCtx2 + 28 >> 2] = $$073; //@line 3415
     HEAP32[$AsyncCtx2 + 32 >> 2] = $$070; //@line 3417
     HEAP32[$AsyncCtx2 + 36 >> 2] = $13; //@line 3419
     HEAP32[$AsyncCtx2 + 40 >> 2] = $9; //@line 3421
     sp = STACKTOP; //@line 3422
     STACKTOP = sp; //@line 3423
     return 0; //@line 3423
    } else if ((label | 0) == 26) {
     STACKTOP = sp; //@line 3426
     return $$0 | 0; //@line 3426
    }
   } else {
    $$06984 = 1; //@line 3429
    $$17481 = $$073; //@line 3429
    $$182 = $$070; //@line 3429
   }
   while (1) {
    $$09$i75 = 0; //@line 3432
    do {
     $62 = $9 + $$09$i75 | 0; //@line 3436
     HEAP8[$62 >> 0] = HEAP8[$62 >> 0] ^ HEAP8[$$182 + $$09$i75 >> 0]; //@line 3439
     $$09$i75 = $$09$i75 + 1 | 0; //@line 3440
    } while (($$09$i75 | 0) != ($12 | 0));
    $AsyncCtx = _emscripten_alloc_async_context(48, sp) | 0; //@line 3448
    $66 = _mbedtls_cipher_update($0, $9, $12, $9, $3) | 0; //@line 3449
    if (___async) {
     label = 21; //@line 3452
     break;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 3455
    if ($66 | 0) {
     $$0 = $66; //@line 3458
     label = 26; //@line 3459
     break;
    }
    $79 = $$17481 - $12 | 0; //@line 3462
    $80 = $$182 + $12 | 0; //@line 3463
    $81 = $$06984 + 1 | 0; //@line 3464
    if ($81 >>> 0 < $43 >>> 0) {
     $$06984 = $81; //@line 3467
     $$17481 = $79; //@line 3467
     $$182 = $80; //@line 3467
    } else {
     $$1$lcssa = $80; //@line 3469
     $$174$lcssa = $79; //@line 3469
     break L24;
    }
   }
   if ((label | 0) == 21) {
    HEAP32[$AsyncCtx >> 2] = 598; //@line 3474
    HEAP32[$AsyncCtx + 4 >> 2] = $$17481; //@line 3476
    HEAP32[$AsyncCtx + 8 >> 2] = $12; //@line 3478
    HEAP32[$AsyncCtx + 12 >> 2] = $$182; //@line 3480
    HEAP32[$AsyncCtx + 16 >> 2] = $$06984; //@line 3482
    HEAP32[$AsyncCtx + 20 >> 2] = $43; //@line 3484
    HEAP32[$AsyncCtx + 24 >> 2] = $3; //@line 3486
    HEAP32[$AsyncCtx + 28 >> 2] = $13; //@line 3488
    HEAP32[$AsyncCtx + 32 >> 2] = $9; //@line 3490
    HEAP32[$AsyncCtx + 36 >> 2] = $0; //@line 3492
    HEAP32[$AsyncCtx + 40 >> 2] = $9; //@line 3494
    HEAP32[$AsyncCtx + 44 >> 2] = $3; //@line 3496
    sp = STACKTOP; //@line 3497
    STACKTOP = sp; //@line 3498
    return 0; //@line 3498
   } else if ((label | 0) == 26) {
    STACKTOP = sp; //@line 3501
    return $$0 | 0; //@line 3501
   }
  } else {
   $$1$lcssa = $$070; //@line 3504
   $$174$lcssa = $$073; //@line 3504
  }
 } while (0);
 if (!$$174$lcssa) {
  $$0 = 0; //@line 3509
  STACKTOP = sp; //@line 3510
  return $$0 | 0; //@line 3510
 }
 _memcpy((HEAP32[$13 >> 2] | 0) + ($9 + 16) | 0, $$1$lcssa | 0, $$174$lcssa | 0) | 0; //@line 3514
 HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + $$174$lcssa; //@line 3517
 $$0 = 0; //@line 3518
 STACKTOP = sp; //@line 3519
 return $$0 | 0; //@line 3519
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0$i = 0, $$pre$i = 0, $11 = 0, $18 = 0, $21 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $36 = 0, $4 = 0, $43 = 0, $46 = 0, $5 = 0, $56 = 0, $59 = 0, $6 = 0, $64 = 0, $67 = 0, $7 = 0, $71 = 0, $74 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx18 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 9892
 STACKTOP = STACKTOP + 48 | 0; //@line 9893
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 9893
 $4 = sp + 16 | 0; //@line 9894
 $5 = sp; //@line 9895
 $6 = $1 + 12 | 0; //@line 9896
 $7 = HEAP32[$6 >> 2] | 0; //@line 9897
 do {
  if (!$7) {
   $9 = $5 + 12 | 0; //@line 9901
   HEAP32[$9 >> 2] = 0; //@line 9902
   $30 = 0; //@line 9903
   $36 = $9; //@line 9903
  } else {
   $11 = HEAP32[$7 + 4 >> 2] | 0; //@line 9906
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 9907
   FUNCTION_TABLE_vii[$11 & 15]($5, $1); //@line 9908
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 324; //@line 9911
    HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 9913
    HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 9915
    HEAP8[$AsyncCtx + 12 >> 0] = $2; //@line 9917
    HEAP8[$AsyncCtx + 13 >> 0] = $3; //@line 9919
    HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 9921
    HEAP32[$AsyncCtx + 20 >> 2] = $6; //@line 9923
    sp = STACKTOP; //@line 9924
    STACKTOP = sp; //@line 9925
    return 0; //@line 9925
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 9927
   $$pre$i = HEAP32[$6 >> 2] | 0; //@line 9928
   $18 = $5 + 12 | 0; //@line 9929
   HEAP32[$18 >> 2] = $$pre$i; //@line 9930
   if (!$$pre$i) {
    $30 = 0; //@line 9933
    $36 = $18; //@line 9933
   } else {
    $21 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 9937
    $AsyncCtx2 = _emscripten_alloc_async_context(28, sp) | 0; //@line 9938
    FUNCTION_TABLE_vii[$21 & 15]($4, $5); //@line 9939
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 325; //@line 9942
     HEAP32[$AsyncCtx2 + 4 >> 2] = $18; //@line 9944
     HEAP32[$AsyncCtx2 + 8 >> 2] = $4; //@line 9946
     HEAP8[$AsyncCtx2 + 12 >> 0] = $2; //@line 9948
     HEAP8[$AsyncCtx2 + 13 >> 0] = $3; //@line 9950
     HEAP32[$AsyncCtx2 + 16 >> 2] = $0; //@line 9952
     HEAP32[$AsyncCtx2 + 20 >> 2] = $18; //@line 9954
     HEAP32[$AsyncCtx2 + 24 >> 2] = $5; //@line 9956
     sp = STACKTOP; //@line 9957
     STACKTOP = sp; //@line 9958
     return 0; //@line 9958
    } else {
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 9960
     $30 = HEAP32[$18 >> 2] | 0; //@line 9962
     $36 = $18; //@line 9962
     break;
    }
   }
  }
 } while (0);
 $29 = $4 + 12 | 0; //@line 9968
 HEAP32[$29 >> 2] = $30; //@line 9969
 $31 = $4 + 16 | 0; //@line 9970
 HEAP8[$31 >> 0] = $2; //@line 9971
 HEAP8[$4 + 17 >> 0] = $3; //@line 9973
 $AsyncCtx18 = _emscripten_alloc_async_context(32, sp) | 0; //@line 9974
 $33 = _equeue_alloc($0, 20) | 0; //@line 9975
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 326; //@line 9978
  HEAP32[$AsyncCtx18 + 4 >> 2] = $29; //@line 9980
  HEAP32[$AsyncCtx18 + 8 >> 2] = $36; //@line 9982
  HEAP32[$AsyncCtx18 + 12 >> 2] = $5; //@line 9984
  HEAP32[$AsyncCtx18 + 16 >> 2] = $29; //@line 9986
  HEAP32[$AsyncCtx18 + 20 >> 2] = $31; //@line 9988
  HEAP32[$AsyncCtx18 + 24 >> 2] = $0; //@line 9990
  HEAP32[$AsyncCtx18 + 28 >> 2] = $4; //@line 9992
  sp = STACKTOP; //@line 9993
  STACKTOP = sp; //@line 9994
  return 0; //@line 9994
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 9996
 do {
  if (!$33) {
   $$0$i = 0; //@line 10000
  } else {
   $43 = HEAP32[$29 >> 2] | 0; //@line 10002
   do {
    if (!$43) {
     $56 = 0; //@line 10006
    } else {
     $46 = HEAP32[$43 + 4 >> 2] | 0; //@line 10009
     $AsyncCtx5 = _emscripten_alloc_async_context(36, sp) | 0; //@line 10010
     FUNCTION_TABLE_vii[$46 & 15]($33, $4); //@line 10011
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 327; //@line 10014
      HEAP32[$AsyncCtx5 + 4 >> 2] = $29; //@line 10016
      HEAP32[$AsyncCtx5 + 8 >> 2] = $33; //@line 10018
      HEAP32[$AsyncCtx5 + 12 >> 2] = $31; //@line 10020
      HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 10022
      HEAP32[$AsyncCtx5 + 20 >> 2] = $29; //@line 10024
      HEAP32[$AsyncCtx5 + 24 >> 2] = $36; //@line 10026
      HEAP32[$AsyncCtx5 + 28 >> 2] = $4; //@line 10028
      HEAP32[$AsyncCtx5 + 32 >> 2] = $5; //@line 10030
      sp = STACKTOP; //@line 10031
      STACKTOP = sp; //@line 10032
      return 0; //@line 10032
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 10034
      $56 = HEAP32[$29 >> 2] | 0; //@line 10036
      break;
     }
    }
   } while (0);
   HEAP32[$33 + 12 >> 2] = $56; //@line 10042
   HEAP16[$33 + 16 >> 1] = HEAP16[$31 >> 1] | 0; //@line 10045
   _equeue_event_dtor($33, 328); //@line 10046
   $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 10047
   $59 = _equeue_post($0, 329, $33) | 0; //@line 10048
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 330; //@line 10051
    HEAP32[$AsyncCtx15 + 4 >> 2] = $29; //@line 10053
    HEAP32[$AsyncCtx15 + 8 >> 2] = $36; //@line 10055
    HEAP32[$AsyncCtx15 + 12 >> 2] = $4; //@line 10057
    HEAP32[$AsyncCtx15 + 16 >> 2] = $5; //@line 10059
    sp = STACKTOP; //@line 10060
    STACKTOP = sp; //@line 10061
    return 0; //@line 10061
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 10063
    $$0$i = $59; //@line 10064
    break;
   }
  }
 } while (0);
 $64 = HEAP32[$29 >> 2] | 0; //@line 10069
 do {
  if ($64 | 0) {
   $67 = HEAP32[$64 + 8 >> 2] | 0; //@line 10074
   $AsyncCtx8 = _emscripten_alloc_async_context(16, sp) | 0; //@line 10075
   FUNCTION_TABLE_vi[$67 & 1023]($4); //@line 10076
   if (___async) {
    HEAP32[$AsyncCtx8 >> 2] = 331; //@line 10079
    HEAP32[$AsyncCtx8 + 4 >> 2] = $36; //@line 10081
    HEAP32[$AsyncCtx8 + 8 >> 2] = $$0$i; //@line 10083
    HEAP32[$AsyncCtx8 + 12 >> 2] = $5; //@line 10085
    sp = STACKTOP; //@line 10086
    STACKTOP = sp; //@line 10087
    return 0; //@line 10087
   } else {
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 10089
    break;
   }
  }
 } while (0);
 $71 = HEAP32[$36 >> 2] | 0; //@line 10094
 if (!$71) {
  STACKTOP = sp; //@line 10097
  return $$0$i | 0; //@line 10097
 }
 $74 = HEAP32[$71 + 8 >> 2] | 0; //@line 10100
 $AsyncCtx12 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10101
 FUNCTION_TABLE_vi[$74 & 1023]($5); //@line 10102
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 332; //@line 10105
  HEAP32[$AsyncCtx12 + 4 >> 2] = $$0$i; //@line 10107
  sp = STACKTOP; //@line 10108
  STACKTOP = sp; //@line 10109
  return 0; //@line 10109
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 10111
 STACKTOP = sp; //@line 10112
 return $$0$i | 0; //@line 10112
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$pre$i = 0, $11 = 0, $17 = 0, $18 = 0, $21 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $35 = 0, $4 = 0, $42 = 0, $45 = 0, $5 = 0, $55 = 0, $58 = 0, $6 = 0, $63 = 0, $66 = 0, $70 = 0, $73 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx18 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 7077
 STACKTOP = STACKTOP + 48 | 0; //@line 7078
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 7078
 $3 = sp + 16 | 0; //@line 7079
 $4 = sp; //@line 7080
 $5 = $1 + 12 | 0; //@line 7081
 $6 = HEAP32[$5 >> 2] | 0; //@line 7082
 do {
  if (!$6) {
   $8 = $4 + 12 | 0; //@line 7086
   HEAP32[$8 >> 2] = 0; //@line 7087
   $29 = 0; //@line 7089
   $31 = $2 & 1; //@line 7089
   $35 = $8; //@line 7089
  } else {
   $11 = HEAP32[$6 + 4 >> 2] | 0; //@line 7092
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 7093
   FUNCTION_TABLE_vii[$11 & 15]($4, $1); //@line 7094
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 221; //@line 7097
    HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 7099
    HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 7101
    HEAP32[$AsyncCtx + 12 >> 2] = $5; //@line 7103
    HEAP8[$AsyncCtx + 16 >> 0] = $2 & 1; //@line 7106
    HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 7108
    sp = STACKTOP; //@line 7109
    STACKTOP = sp; //@line 7110
    return 0; //@line 7110
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 7112
   $$pre$i = HEAP32[$5 >> 2] | 0; //@line 7113
   $17 = $4 + 12 | 0; //@line 7114
   HEAP32[$17 >> 2] = $$pre$i; //@line 7115
   $18 = $2 & 1; //@line 7116
   if (!$$pre$i) {
    $29 = 0; //@line 7119
    $31 = $18; //@line 7119
    $35 = $17; //@line 7119
   } else {
    $21 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 7123
    $AsyncCtx2 = _emscripten_alloc_async_context(28, sp) | 0; //@line 7124
    FUNCTION_TABLE_vii[$21 & 15]($3, $4); //@line 7125
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 222; //@line 7128
     HEAP32[$AsyncCtx2 + 4 >> 2] = $17; //@line 7130
     HEAP32[$AsyncCtx2 + 8 >> 2] = $4; //@line 7132
     HEAP32[$AsyncCtx2 + 12 >> 2] = $3; //@line 7134
     HEAP8[$AsyncCtx2 + 16 >> 0] = $18; //@line 7136
     HEAP32[$AsyncCtx2 + 20 >> 2] = $17; //@line 7138
     HEAP32[$AsyncCtx2 + 24 >> 2] = $0; //@line 7140
     sp = STACKTOP; //@line 7141
     STACKTOP = sp; //@line 7142
     return 0; //@line 7142
    } else {
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7144
     $29 = HEAP32[$17 >> 2] | 0; //@line 7146
     $31 = $18; //@line 7146
     $35 = $17; //@line 7146
     break;
    }
   }
  }
 } while (0);
 $28 = $3 + 12 | 0; //@line 7152
 HEAP32[$28 >> 2] = $29; //@line 7153
 $30 = $3 + 16 | 0; //@line 7154
 HEAP8[$30 >> 0] = $31; //@line 7155
 $AsyncCtx18 = _emscripten_alloc_async_context(32, sp) | 0; //@line 7156
 $32 = _equeue_alloc($0, 20) | 0; //@line 7157
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 223; //@line 7160
  HEAP32[$AsyncCtx18 + 4 >> 2] = $4; //@line 7162
  HEAP32[$AsyncCtx18 + 8 >> 2] = $35; //@line 7164
  HEAP32[$AsyncCtx18 + 12 >> 2] = $28; //@line 7166
  HEAP32[$AsyncCtx18 + 16 >> 2] = $3; //@line 7168
  HEAP32[$AsyncCtx18 + 20 >> 2] = $28; //@line 7170
  HEAP32[$AsyncCtx18 + 24 >> 2] = $30; //@line 7172
  HEAP32[$AsyncCtx18 + 28 >> 2] = $0; //@line 7174
  sp = STACKTOP; //@line 7175
  STACKTOP = sp; //@line 7176
  return 0; //@line 7176
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 7178
 do {
  if (!$32) {
   $$0$i = 0; //@line 7182
  } else {
   $42 = HEAP32[$28 >> 2] | 0; //@line 7184
   do {
    if (!$42) {
     $55 = 0; //@line 7188
    } else {
     $45 = HEAP32[$42 + 4 >> 2] | 0; //@line 7191
     $AsyncCtx5 = _emscripten_alloc_async_context(36, sp) | 0; //@line 7192
     FUNCTION_TABLE_vii[$45 & 15]($32, $3); //@line 7193
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 224; //@line 7196
      HEAP32[$AsyncCtx5 + 4 >> 2] = $28; //@line 7198
      HEAP32[$AsyncCtx5 + 8 >> 2] = $32; //@line 7200
      HEAP32[$AsyncCtx5 + 12 >> 2] = $30; //@line 7202
      HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 7204
      HEAP32[$AsyncCtx5 + 20 >> 2] = $28; //@line 7206
      HEAP32[$AsyncCtx5 + 24 >> 2] = $35; //@line 7208
      HEAP32[$AsyncCtx5 + 28 >> 2] = $3; //@line 7210
      HEAP32[$AsyncCtx5 + 32 >> 2] = $4; //@line 7212
      sp = STACKTOP; //@line 7213
      STACKTOP = sp; //@line 7214
      return 0; //@line 7214
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 7216
      $55 = HEAP32[$28 >> 2] | 0; //@line 7218
      break;
     }
    }
   } while (0);
   HEAP32[$32 + 12 >> 2] = $55; //@line 7224
   HEAP8[$32 + 16 >> 0] = HEAP8[$30 >> 0] | 0; //@line 7227
   _equeue_event_dtor($32, 225); //@line 7228
   $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 7229
   $58 = _equeue_post($0, 226, $32) | 0; //@line 7230
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 227; //@line 7233
    HEAP32[$AsyncCtx15 + 4 >> 2] = $28; //@line 7235
    HEAP32[$AsyncCtx15 + 8 >> 2] = $35; //@line 7237
    HEAP32[$AsyncCtx15 + 12 >> 2] = $3; //@line 7239
    HEAP32[$AsyncCtx15 + 16 >> 2] = $4; //@line 7241
    sp = STACKTOP; //@line 7242
    STACKTOP = sp; //@line 7243
    return 0; //@line 7243
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 7245
    $$0$i = $58; //@line 7246
    break;
   }
  }
 } while (0);
 $63 = HEAP32[$28 >> 2] | 0; //@line 7251
 do {
  if ($63 | 0) {
   $66 = HEAP32[$63 + 8 >> 2] | 0; //@line 7256
   $AsyncCtx8 = _emscripten_alloc_async_context(16, sp) | 0; //@line 7257
   FUNCTION_TABLE_vi[$66 & 1023]($3); //@line 7258
   if (___async) {
    HEAP32[$AsyncCtx8 >> 2] = 228; //@line 7261
    HEAP32[$AsyncCtx8 + 4 >> 2] = $35; //@line 7263
    HEAP32[$AsyncCtx8 + 8 >> 2] = $$0$i; //@line 7265
    HEAP32[$AsyncCtx8 + 12 >> 2] = $4; //@line 7267
    sp = STACKTOP; //@line 7268
    STACKTOP = sp; //@line 7269
    return 0; //@line 7269
   } else {
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 7271
    break;
   }
  }
 } while (0);
 $70 = HEAP32[$35 >> 2] | 0; //@line 7276
 if (!$70) {
  STACKTOP = sp; //@line 7279
  return $$0$i | 0; //@line 7279
 }
 $73 = HEAP32[$70 + 8 >> 2] | 0; //@line 7282
 $AsyncCtx12 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7283
 FUNCTION_TABLE_vi[$73 & 1023]($4); //@line 7284
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 229; //@line 7287
  HEAP32[$AsyncCtx12 + 4 >> 2] = $$0$i; //@line 7289
  sp = STACKTOP; //@line 7290
  STACKTOP = sp; //@line 7291
  return 0; //@line 7291
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 7293
 STACKTOP = sp; //@line 7294
 return $$0$i | 0; //@line 7294
}
function _mbedtls_cipher_cmac_update__async_cb_229($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$09$i75 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $27 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $44 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $66 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 13843
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13845
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13847
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13849
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13851
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13853
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13855
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 13857
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 13859
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 13861
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 13863
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 13866
  $66 = ___async_retval; //@line 13867
  HEAP32[$66 >> 2] = $$0; //@line 13868
  return;
 }
 $22 = $14 - (HEAP32[$10 >> 2] | 0) | 0; //@line 13872
 $23 = $16 + $22 | 0; //@line 13873
 $24 = $18 - $22 | 0; //@line 13874
 HEAP32[$10 >> 2] = 0; //@line 13875
 $27 = (($14 + -1 + $24 | 0) >>> 0) / ($14 >>> 0) | 0; //@line 13878
 if ($27 >>> 0 <= 1) {
  if (!$24) {
   $$0 = 0; //@line 13883
   $66 = ___async_retval; //@line 13884
   HEAP32[$66 >> 2] = $$0; //@line 13885
   return;
  }
  _memcpy((HEAP32[$10 >> 2] | 0) + ($12 + 16) | 0, $23 | 0, $24 | 0) | 0; //@line 13890
  HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + $24; //@line 13893
  $$0 = 0; //@line 13894
  $66 = ___async_retval; //@line 13895
  HEAP32[$66 >> 2] = $$0; //@line 13896
  return;
 }
 if (!$14) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(44) | 0; //@line 13901
  $30 = _mbedtls_cipher_update($4, $6, 0, $6, $8) | 0; //@line 13902
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 597; //@line 13905
   $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 13906
   HEAP32[$31 >> 2] = 1; //@line 13907
   $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 13908
   HEAP32[$32 >> 2] = $27; //@line 13909
   $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 13910
   HEAP32[$33 >> 2] = $2; //@line 13911
   $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 13912
   HEAP32[$34 >> 2] = $4; //@line 13913
   $35 = $ReallocAsyncCtx2 + 20 | 0; //@line 13914
   HEAP32[$35 >> 2] = $6; //@line 13915
   $36 = $ReallocAsyncCtx2 + 24 | 0; //@line 13916
   HEAP32[$36 >> 2] = $8; //@line 13917
   $37 = $ReallocAsyncCtx2 + 28 | 0; //@line 13918
   HEAP32[$37 >> 2] = $24; //@line 13919
   $38 = $ReallocAsyncCtx2 + 32 | 0; //@line 13920
   HEAP32[$38 >> 2] = $23; //@line 13921
   $39 = $ReallocAsyncCtx2 + 36 | 0; //@line 13922
   HEAP32[$39 >> 2] = $10; //@line 13923
   $40 = $ReallocAsyncCtx2 + 40 | 0; //@line 13924
   HEAP32[$40 >> 2] = $12; //@line 13925
   sp = STACKTOP; //@line 13926
   return;
  }
  HEAP32[___async_retval >> 2] = $30; //@line 13930
  ___async_unwind = 0; //@line 13931
  HEAP32[$ReallocAsyncCtx2 >> 2] = 597; //@line 13932
  $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 13933
  HEAP32[$31 >> 2] = 1; //@line 13934
  $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 13935
  HEAP32[$32 >> 2] = $27; //@line 13936
  $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 13937
  HEAP32[$33 >> 2] = $2; //@line 13938
  $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 13939
  HEAP32[$34 >> 2] = $4; //@line 13940
  $35 = $ReallocAsyncCtx2 + 20 | 0; //@line 13941
  HEAP32[$35 >> 2] = $6; //@line 13942
  $36 = $ReallocAsyncCtx2 + 24 | 0; //@line 13943
  HEAP32[$36 >> 2] = $8; //@line 13944
  $37 = $ReallocAsyncCtx2 + 28 | 0; //@line 13945
  HEAP32[$37 >> 2] = $24; //@line 13946
  $38 = $ReallocAsyncCtx2 + 32 | 0; //@line 13947
  HEAP32[$38 >> 2] = $23; //@line 13948
  $39 = $ReallocAsyncCtx2 + 36 | 0; //@line 13949
  HEAP32[$39 >> 2] = $10; //@line 13950
  $40 = $ReallocAsyncCtx2 + 40 | 0; //@line 13951
  HEAP32[$40 >> 2] = $12; //@line 13952
  sp = STACKTOP; //@line 13953
  return;
 }
 $$09$i75 = 0; //@line 13956
 do {
  $44 = $12 + $$09$i75 | 0; //@line 13960
  HEAP8[$44 >> 0] = HEAP8[$44 >> 0] ^ HEAP8[$23 + $$09$i75 >> 0]; //@line 13963
  $$09$i75 = $$09$i75 + 1 | 0; //@line 13964
 } while (($$09$i75 | 0) != ($14 | 0));
 $ReallocAsyncCtx = _emscripten_realloc_async_context(48) | 0; //@line 13972
 $48 = _mbedtls_cipher_update($4, $6, $14, $6, $8) | 0; //@line 13973
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 598; //@line 13976
  $49 = $ReallocAsyncCtx + 4 | 0; //@line 13977
  HEAP32[$49 >> 2] = $24; //@line 13978
  $50 = $ReallocAsyncCtx + 8 | 0; //@line 13979
  HEAP32[$50 >> 2] = $14; //@line 13980
  $51 = $ReallocAsyncCtx + 12 | 0; //@line 13981
  HEAP32[$51 >> 2] = $23; //@line 13982
  $52 = $ReallocAsyncCtx + 16 | 0; //@line 13983
  HEAP32[$52 >> 2] = 1; //@line 13984
  $53 = $ReallocAsyncCtx + 20 | 0; //@line 13985
  HEAP32[$53 >> 2] = $27; //@line 13986
  $54 = $ReallocAsyncCtx + 24 | 0; //@line 13987
  HEAP32[$54 >> 2] = $2; //@line 13988
  $55 = $ReallocAsyncCtx + 28 | 0; //@line 13989
  HEAP32[$55 >> 2] = $10; //@line 13990
  $56 = $ReallocAsyncCtx + 32 | 0; //@line 13991
  HEAP32[$56 >> 2] = $12; //@line 13992
  $57 = $ReallocAsyncCtx + 36 | 0; //@line 13993
  HEAP32[$57 >> 2] = $4; //@line 13994
  $58 = $ReallocAsyncCtx + 40 | 0; //@line 13995
  HEAP32[$58 >> 2] = $6; //@line 13996
  $59 = $ReallocAsyncCtx + 44 | 0; //@line 13997
  HEAP32[$59 >> 2] = $8; //@line 13998
  sp = STACKTOP; //@line 13999
  return;
 }
 HEAP32[___async_retval >> 2] = $48; //@line 14003
 ___async_unwind = 0; //@line 14004
 HEAP32[$ReallocAsyncCtx >> 2] = 598; //@line 14005
 $49 = $ReallocAsyncCtx + 4 | 0; //@line 14006
 HEAP32[$49 >> 2] = $24; //@line 14007
 $50 = $ReallocAsyncCtx + 8 | 0; //@line 14008
 HEAP32[$50 >> 2] = $14; //@line 14009
 $51 = $ReallocAsyncCtx + 12 | 0; //@line 14010
 HEAP32[$51 >> 2] = $23; //@line 14011
 $52 = $ReallocAsyncCtx + 16 | 0; //@line 14012
 HEAP32[$52 >> 2] = 1; //@line 14013
 $53 = $ReallocAsyncCtx + 20 | 0; //@line 14014
 HEAP32[$53 >> 2] = $27; //@line 14015
 $54 = $ReallocAsyncCtx + 24 | 0; //@line 14016
 HEAP32[$54 >> 2] = $2; //@line 14017
 $55 = $ReallocAsyncCtx + 28 | 0; //@line 14018
 HEAP32[$55 >> 2] = $10; //@line 14019
 $56 = $ReallocAsyncCtx + 32 | 0; //@line 14020
 HEAP32[$56 >> 2] = $12; //@line 14021
 $57 = $ReallocAsyncCtx + 36 | 0; //@line 14022
 HEAP32[$57 >> 2] = $4; //@line 14023
 $58 = $ReallocAsyncCtx + 40 | 0; //@line 14024
 HEAP32[$58 >> 2] = $6; //@line 14025
 $59 = $ReallocAsyncCtx + 44 | 0; //@line 14026
 HEAP32[$59 >> 2] = $8; //@line 14027
 sp = STACKTOP; //@line 14028
 return;
}
function __ZN7LoRaPHY13apply_cf_listEPKhh__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $42 = 0, $44 = 0, $45 = 0, $6 = 0, $70 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 27926
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27928
 $4 = HEAP8[$0 + 8 >> 0] | 0; //@line 27930
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27932
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 27934
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27936
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27938
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 27940
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 27942
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 27944
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 27946
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 27948
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 27950
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 27952
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 27954
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 27956
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 27958
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 27960
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 27962
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 27964
 if (HEAP8[___async_retval >> 0] & 1) {
  $70 = $28; //@line 27969
 } else {
  $44 = $28 + 1 | 0; //@line 27971
  if (($44 | 0) < (HEAPU8[$12 >> 0] | 0 | 0)) {
   $42 = HEAP32[(HEAP32[$36 >> 2] | 0) + 76 >> 2] | 0; //@line 27978
   $ReallocAsyncCtx = _emscripten_realloc_async_context(80) | 0; //@line 27980
   $45 = FUNCTION_TABLE_iiii[$42 & 31]($26, $38, $44 & 255) | 0; //@line 27981
   if (!___async) {
    HEAP8[___async_retval >> 0] = $45 & 1; //@line 27986
    ___async_unwind = 0; //@line 27987
   }
   HEAP32[$ReallocAsyncCtx >> 2] = 515; //@line 27989
   HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 27991
   HEAP8[$ReallocAsyncCtx + 8 >> 0] = $4; //@line 27993
   HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 27995
   HEAP8[$ReallocAsyncCtx + 16 >> 0] = $8; //@line 27997
   HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 27999
   HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 28001
   HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 28003
   HEAP32[$ReallocAsyncCtx + 32 >> 2] = $16; //@line 28005
   HEAP32[$ReallocAsyncCtx + 36 >> 2] = $18; //@line 28007
   HEAP32[$ReallocAsyncCtx + 40 >> 2] = $20; //@line 28009
   HEAP32[$ReallocAsyncCtx + 44 >> 2] = $22; //@line 28011
   HEAP32[$ReallocAsyncCtx + 48 >> 2] = $24; //@line 28013
   HEAP32[$ReallocAsyncCtx + 52 >> 2] = $26; //@line 28015
   HEAP32[$ReallocAsyncCtx + 56 >> 2] = $44; //@line 28017
   HEAP32[$ReallocAsyncCtx + 60 >> 2] = $30; //@line 28019
   HEAP32[$ReallocAsyncCtx + 64 >> 2] = $32; //@line 28021
   HEAP32[$ReallocAsyncCtx + 68 >> 2] = $34; //@line 28023
   HEAP32[$ReallocAsyncCtx + 72 >> 2] = $36; //@line 28025
   HEAP32[$ReallocAsyncCtx + 76 >> 2] = $38; //@line 28027
   sp = STACKTOP; //@line 28028
   return;
  } else {
   $70 = -1; //@line 28031
  }
 }
 HEAP8[$30 >> 0] = $70; //@line 28035
 $73 = HEAP32[(HEAP32[$32 >> 2] | 0) + 60 >> 2] | 0; //@line 28038
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(72) | 0; //@line 28039
 FUNCTION_TABLE_iiii[$73 & 31]($26, $34, $8) | 0; //@line 28040
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 516; //@line 28043
  $74 = $ReallocAsyncCtx2 + 4 | 0; //@line 28044
  HEAP32[$74 >> 2] = $2; //@line 28045
  $75 = $ReallocAsyncCtx2 + 8 | 0; //@line 28046
  HEAP8[$75 >> 0] = $4; //@line 28047
  $76 = $ReallocAsyncCtx2 + 12 | 0; //@line 28048
  HEAP32[$76 >> 2] = $6; //@line 28049
  $77 = $ReallocAsyncCtx2 + 16 | 0; //@line 28050
  HEAP8[$77 >> 0] = $8; //@line 28051
  $78 = $ReallocAsyncCtx2 + 20 | 0; //@line 28052
  HEAP32[$78 >> 2] = $10; //@line 28053
  $79 = $ReallocAsyncCtx2 + 24 | 0; //@line 28054
  HEAP32[$79 >> 2] = $12; //@line 28055
  $80 = $ReallocAsyncCtx2 + 28 | 0; //@line 28056
  HEAP32[$80 >> 2] = $14; //@line 28057
  $81 = $ReallocAsyncCtx2 + 32 | 0; //@line 28058
  HEAP32[$81 >> 2] = $16; //@line 28059
  $82 = $ReallocAsyncCtx2 + 36 | 0; //@line 28060
  HEAP32[$82 >> 2] = $18; //@line 28061
  $83 = $ReallocAsyncCtx2 + 40 | 0; //@line 28062
  HEAP32[$83 >> 2] = $20; //@line 28063
  $84 = $ReallocAsyncCtx2 + 44 | 0; //@line 28064
  HEAP32[$84 >> 2] = $22; //@line 28065
  $85 = $ReallocAsyncCtx2 + 48 | 0; //@line 28066
  HEAP32[$85 >> 2] = $24; //@line 28067
  $86 = $ReallocAsyncCtx2 + 52 | 0; //@line 28068
  HEAP32[$86 >> 2] = $26; //@line 28069
  $87 = $ReallocAsyncCtx2 + 56 | 0; //@line 28070
  HEAP32[$87 >> 2] = $30; //@line 28071
  $88 = $ReallocAsyncCtx2 + 60 | 0; //@line 28072
  HEAP32[$88 >> 2] = $32; //@line 28073
  $89 = $ReallocAsyncCtx2 + 64 | 0; //@line 28074
  HEAP32[$89 >> 2] = $34; //@line 28075
  $90 = $ReallocAsyncCtx2 + 68 | 0; //@line 28076
  HEAP32[$90 >> 2] = $36; //@line 28077
  sp = STACKTOP; //@line 28078
  return;
 }
 ___async_unwind = 0; //@line 28081
 HEAP32[$ReallocAsyncCtx2 >> 2] = 516; //@line 28082
 $74 = $ReallocAsyncCtx2 + 4 | 0; //@line 28083
 HEAP32[$74 >> 2] = $2; //@line 28084
 $75 = $ReallocAsyncCtx2 + 8 | 0; //@line 28085
 HEAP8[$75 >> 0] = $4; //@line 28086
 $76 = $ReallocAsyncCtx2 + 12 | 0; //@line 28087
 HEAP32[$76 >> 2] = $6; //@line 28088
 $77 = $ReallocAsyncCtx2 + 16 | 0; //@line 28089
 HEAP8[$77 >> 0] = $8; //@line 28090
 $78 = $ReallocAsyncCtx2 + 20 | 0; //@line 28091
 HEAP32[$78 >> 2] = $10; //@line 28092
 $79 = $ReallocAsyncCtx2 + 24 | 0; //@line 28093
 HEAP32[$79 >> 2] = $12; //@line 28094
 $80 = $ReallocAsyncCtx2 + 28 | 0; //@line 28095
 HEAP32[$80 >> 2] = $14; //@line 28096
 $81 = $ReallocAsyncCtx2 + 32 | 0; //@line 28097
 HEAP32[$81 >> 2] = $16; //@line 28098
 $82 = $ReallocAsyncCtx2 + 36 | 0; //@line 28099
 HEAP32[$82 >> 2] = $18; //@line 28100
 $83 = $ReallocAsyncCtx2 + 40 | 0; //@line 28101
 HEAP32[$83 >> 2] = $20; //@line 28102
 $84 = $ReallocAsyncCtx2 + 44 | 0; //@line 28103
 HEAP32[$84 >> 2] = $22; //@line 28104
 $85 = $ReallocAsyncCtx2 + 48 | 0; //@line 28105
 HEAP32[$85 >> 2] = $24; //@line 28106
 $86 = $ReallocAsyncCtx2 + 52 | 0; //@line 28107
 HEAP32[$86 >> 2] = $26; //@line 28108
 $87 = $ReallocAsyncCtx2 + 56 | 0; //@line 28109
 HEAP32[$87 >> 2] = $30; //@line 28110
 $88 = $ReallocAsyncCtx2 + 60 | 0; //@line 28111
 HEAP32[$88 >> 2] = $32; //@line 28112
 $89 = $ReallocAsyncCtx2 + 64 | 0; //@line 28113
 HEAP32[$89 >> 2] = $34; //@line 28114
 $90 = $ReallocAsyncCtx2 + 68 | 0; //@line 28115
 HEAP32[$90 >> 2] = $36; //@line 28116
 sp = STACKTOP; //@line 28117
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $13 = 0, $17 = 0, $21 = 0, $23 = 0, $27 = 0, $3 = 0, $31 = 0, $33 = 0, $37 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx20 = 0, $AsyncCtx23 = 0, $AsyncCtx26 = 0, $AsyncCtx3 = 0, $AsyncCtx30 = 0, $AsyncCtx34 = 0, $AsyncCtx38 = 0, $AsyncCtx42 = 0, $AsyncCtx46 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 1065
 HEAP32[$0 >> 2] = 496; //@line 1066
 $1 = $0 + 1240 | 0; //@line 1067
 HEAP32[$1 >> 2] = 10244; //@line 1068
 __ZN4mbed6Ticker6detachEv($1); //@line 1069
 $3 = HEAP32[$0 + 1292 >> 2] | 0; //@line 1071
 do {
  if ($3 | 0) {
   $7 = HEAP32[$3 + 8 >> 2] | 0; //@line 1077
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 1078
   FUNCTION_TABLE_vi[$7 & 1023]($0 + 1280 | 0); //@line 1079
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 69; //@line 1082
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 1084
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 1086
    sp = STACKTOP; //@line 1087
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 1090
    break;
   }
  }
 } while (0);
 $AsyncCtx23 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1095
 __ZN4mbed10TimerEventD2Ev($1); //@line 1096
 if (___async) {
  HEAP32[$AsyncCtx23 >> 2] = 70; //@line 1099
  HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 1101
  sp = STACKTOP; //@line 1102
  return;
 }
 _emscripten_free_async_context($AsyncCtx23 | 0); //@line 1105
 $11 = $0 + 1176 | 0; //@line 1106
 HEAP32[$11 >> 2] = 10244; //@line 1107
 __ZN4mbed6Ticker6detachEv($11); //@line 1108
 $13 = HEAP32[$0 + 1228 >> 2] | 0; //@line 1110
 do {
  if ($13 | 0) {
   $17 = HEAP32[$13 + 8 >> 2] | 0; //@line 1116
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 1117
   FUNCTION_TABLE_vi[$17 & 1023]($0 + 1216 | 0); //@line 1118
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 71; //@line 1121
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 1123
    HEAP32[$AsyncCtx3 + 8 >> 2] = $11; //@line 1125
    sp = STACKTOP; //@line 1126
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 1129
    break;
   }
  }
 } while (0);
 $AsyncCtx20 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1134
 __ZN4mbed10TimerEventD2Ev($11); //@line 1135
 if (___async) {
  HEAP32[$AsyncCtx20 >> 2] = 72; //@line 1138
  HEAP32[$AsyncCtx20 + 4 >> 2] = $0; //@line 1140
  sp = STACKTOP; //@line 1141
  return;
 }
 _emscripten_free_async_context($AsyncCtx20 | 0); //@line 1144
 $21 = $0 + 1112 | 0; //@line 1145
 HEAP32[$21 >> 2] = 10244; //@line 1146
 __ZN4mbed6Ticker6detachEv($21); //@line 1147
 $23 = HEAP32[$0 + 1164 >> 2] | 0; //@line 1149
 do {
  if ($23 | 0) {
   $27 = HEAP32[$23 + 8 >> 2] | 0; //@line 1155
   $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 1156
   FUNCTION_TABLE_vi[$27 & 1023]($0 + 1152 | 0); //@line 1157
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 73; //@line 1160
    HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 1162
    HEAP32[$AsyncCtx7 + 8 >> 2] = $21; //@line 1164
    sp = STACKTOP; //@line 1165
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 1168
    break;
   }
  }
 } while (0);
 $AsyncCtx17 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1173
 __ZN4mbed10TimerEventD2Ev($21); //@line 1174
 if (___async) {
  HEAP32[$AsyncCtx17 >> 2] = 74; //@line 1177
  HEAP32[$AsyncCtx17 + 4 >> 2] = $0; //@line 1179
  sp = STACKTOP; //@line 1180
  return;
 }
 _emscripten_free_async_context($AsyncCtx17 | 0); //@line 1183
 $31 = $0 + 1048 | 0; //@line 1184
 HEAP32[$31 >> 2] = 10244; //@line 1185
 __ZN4mbed6Ticker6detachEv($31); //@line 1186
 $33 = HEAP32[$0 + 1100 >> 2] | 0; //@line 1188
 do {
  if ($33 | 0) {
   $37 = HEAP32[$33 + 8 >> 2] | 0; //@line 1194
   $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 1195
   FUNCTION_TABLE_vi[$37 & 1023]($0 + 1088 | 0); //@line 1196
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 75; //@line 1199
    HEAP32[$AsyncCtx11 + 4 >> 2] = $31; //@line 1201
    HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 1203
    sp = STACKTOP; //@line 1204
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 1207
    break;
   }
  }
 } while (0);
 $AsyncCtx14 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1212
 __ZN4mbed10TimerEventD2Ev($31); //@line 1213
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 76; //@line 1216
  HEAP32[$AsyncCtx14 + 4 >> 2] = $0; //@line 1218
  sp = STACKTOP; //@line 1219
  return;
 }
 _emscripten_free_async_context($AsyncCtx14 | 0); //@line 1222
 $AsyncCtx46 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1224
 __ZN4mbed11InterruptInD2Ev($0 + 412 | 0); //@line 1225
 if (___async) {
  HEAP32[$AsyncCtx46 >> 2] = 77; //@line 1228
  HEAP32[$AsyncCtx46 + 4 >> 2] = $0; //@line 1230
  sp = STACKTOP; //@line 1231
  return;
 }
 _emscripten_free_async_context($AsyncCtx46 | 0); //@line 1234
 $AsyncCtx42 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1236
 __ZN4mbed11InterruptInD2Ev($0 + 340 | 0); //@line 1237
 if (___async) {
  HEAP32[$AsyncCtx42 >> 2] = 78; //@line 1240
  HEAP32[$AsyncCtx42 + 4 >> 2] = $0; //@line 1242
  sp = STACKTOP; //@line 1243
  return;
 }
 _emscripten_free_async_context($AsyncCtx42 | 0); //@line 1246
 $AsyncCtx38 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1248
 __ZN4mbed11InterruptInD2Ev($0 + 268 | 0); //@line 1249
 if (___async) {
  HEAP32[$AsyncCtx38 >> 2] = 79; //@line 1252
  HEAP32[$AsyncCtx38 + 4 >> 2] = $0; //@line 1254
  sp = STACKTOP; //@line 1255
  return;
 }
 _emscripten_free_async_context($AsyncCtx38 | 0); //@line 1258
 $AsyncCtx34 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1260
 __ZN4mbed11InterruptInD2Ev($0 + 196 | 0); //@line 1261
 if (___async) {
  HEAP32[$AsyncCtx34 >> 2] = 80; //@line 1264
  HEAP32[$AsyncCtx34 + 4 >> 2] = $0; //@line 1266
  sp = STACKTOP; //@line 1267
  return;
 }
 _emscripten_free_async_context($AsyncCtx34 | 0); //@line 1270
 $AsyncCtx30 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1272
 __ZN4mbed11InterruptInD2Ev($0 + 124 | 0); //@line 1273
 if (___async) {
  HEAP32[$AsyncCtx30 >> 2] = 81; //@line 1276
  HEAP32[$AsyncCtx30 + 4 >> 2] = $0; //@line 1278
  sp = STACKTOP; //@line 1279
  return;
 }
 _emscripten_free_async_context($AsyncCtx30 | 0); //@line 1282
 $AsyncCtx26 = _emscripten_alloc_async_context(4, sp) | 0; //@line 1284
 __ZN4mbed11InterruptInD2Ev($0 + 52 | 0); //@line 1285
 if (___async) {
  HEAP32[$AsyncCtx26 >> 2] = 82; //@line 1288
  sp = STACKTOP; //@line 1289
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx26 | 0); //@line 1292
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$pre$i = 0, $10 = 0, $16 = 0, $19 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $33 = 0, $39 = 0, $4 = 0, $42 = 0, $5 = 0, $52 = 0, $55 = 0, $6 = 0, $60 = 0, $63 = 0, $67 = 0, $70 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx18 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 8329
 STACKTOP = STACKTOP + 48 | 0; //@line 8330
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 8330
 $3 = sp + 16 | 0; //@line 8331
 $4 = sp; //@line 8332
 $5 = $1 + 12 | 0; //@line 8333
 $6 = HEAP32[$5 >> 2] | 0; //@line 8334
 do {
  if (!$6) {
   $8 = $4 + 12 | 0; //@line 8338
   HEAP32[$8 >> 2] = 0; //@line 8339
   $27 = 0; //@line 8340
   $33 = $8; //@line 8340
  } else {
   $10 = HEAP32[$6 + 4 >> 2] | 0; //@line 8343
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 8344
   FUNCTION_TABLE_vii[$10 & 15]($4, $1); //@line 8345
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 267; //@line 8348
    HEAP32[$AsyncCtx + 4 >> 2] = $5; //@line 8350
    HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 8352
    HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 8354
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 8356
    HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 8358
    sp = STACKTOP; //@line 8359
    STACKTOP = sp; //@line 8360
    return 0; //@line 8360
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 8362
   $$pre$i = HEAP32[$5 >> 2] | 0; //@line 8363
   $16 = $4 + 12 | 0; //@line 8364
   HEAP32[$16 >> 2] = $$pre$i; //@line 8365
   if (!$$pre$i) {
    $27 = 0; //@line 8368
    $33 = $16; //@line 8368
   } else {
    $19 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 8372
    $AsyncCtx2 = _emscripten_alloc_async_context(28, sp) | 0; //@line 8373
    FUNCTION_TABLE_vii[$19 & 15]($3, $4); //@line 8374
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 268; //@line 8377
     HEAP32[$AsyncCtx2 + 4 >> 2] = $4; //@line 8379
     HEAP32[$AsyncCtx2 + 8 >> 2] = $16; //@line 8381
     HEAP32[$AsyncCtx2 + 12 >> 2] = $3; //@line 8383
     HEAP32[$AsyncCtx2 + 16 >> 2] = $2; //@line 8385
     HEAP32[$AsyncCtx2 + 20 >> 2] = $0; //@line 8387
     HEAP32[$AsyncCtx2 + 24 >> 2] = $16; //@line 8389
     sp = STACKTOP; //@line 8390
     STACKTOP = sp; //@line 8391
     return 0; //@line 8391
    } else {
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 8393
     $27 = HEAP32[$16 >> 2] | 0; //@line 8395
     $33 = $16; //@line 8395
     break;
    }
   }
  }
 } while (0);
 $26 = $3 + 12 | 0; //@line 8401
 HEAP32[$26 >> 2] = $27; //@line 8402
 $28 = $3 + 16 | 0; //@line 8403
 HEAP32[$28 >> 2] = $2; //@line 8404
 $AsyncCtx18 = _emscripten_alloc_async_context(32, sp) | 0; //@line 8405
 $29 = _equeue_alloc($0, 20) | 0; //@line 8406
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 269; //@line 8409
  HEAP32[$AsyncCtx18 + 4 >> 2] = $4; //@line 8411
  HEAP32[$AsyncCtx18 + 8 >> 2] = $26; //@line 8413
  HEAP32[$AsyncCtx18 + 12 >> 2] = $33; //@line 8415
  HEAP32[$AsyncCtx18 + 16 >> 2] = $3; //@line 8417
  HEAP32[$AsyncCtx18 + 20 >> 2] = $26; //@line 8419
  HEAP32[$AsyncCtx18 + 24 >> 2] = $28; //@line 8421
  HEAP32[$AsyncCtx18 + 28 >> 2] = $0; //@line 8423
  sp = STACKTOP; //@line 8424
  STACKTOP = sp; //@line 8425
  return 0; //@line 8425
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 8427
 do {
  if (!$29) {
   $$0$i = 0; //@line 8431
  } else {
   $39 = HEAP32[$26 >> 2] | 0; //@line 8433
   do {
    if (!$39) {
     $52 = 0; //@line 8437
    } else {
     $42 = HEAP32[$39 + 4 >> 2] | 0; //@line 8440
     $AsyncCtx5 = _emscripten_alloc_async_context(36, sp) | 0; //@line 8441
     FUNCTION_TABLE_vii[$42 & 15]($29, $3); //@line 8442
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 270; //@line 8445
      HEAP32[$AsyncCtx5 + 4 >> 2] = $26; //@line 8447
      HEAP32[$AsyncCtx5 + 8 >> 2] = $29; //@line 8449
      HEAP32[$AsyncCtx5 + 12 >> 2] = $28; //@line 8451
      HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 8453
      HEAP32[$AsyncCtx5 + 20 >> 2] = $26; //@line 8455
      HEAP32[$AsyncCtx5 + 24 >> 2] = $33; //@line 8457
      HEAP32[$AsyncCtx5 + 28 >> 2] = $3; //@line 8459
      HEAP32[$AsyncCtx5 + 32 >> 2] = $4; //@line 8461
      sp = STACKTOP; //@line 8462
      STACKTOP = sp; //@line 8463
      return 0; //@line 8463
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 8465
      $52 = HEAP32[$26 >> 2] | 0; //@line 8467
      break;
     }
    }
   } while (0);
   HEAP32[$29 + 12 >> 2] = $52; //@line 8473
   HEAP32[$29 + 16 >> 2] = HEAP32[$28 >> 2]; //@line 8476
   _equeue_event_dtor($29, 271); //@line 8477
   $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 8478
   $55 = _equeue_post($0, 272, $29) | 0; //@line 8479
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 273; //@line 8482
    HEAP32[$AsyncCtx15 + 4 >> 2] = $26; //@line 8484
    HEAP32[$AsyncCtx15 + 8 >> 2] = $33; //@line 8486
    HEAP32[$AsyncCtx15 + 12 >> 2] = $3; //@line 8488
    HEAP32[$AsyncCtx15 + 16 >> 2] = $4; //@line 8490
    sp = STACKTOP; //@line 8491
    STACKTOP = sp; //@line 8492
    return 0; //@line 8492
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 8494
    $$0$i = $55; //@line 8495
    break;
   }
  }
 } while (0);
 $60 = HEAP32[$26 >> 2] | 0; //@line 8500
 do {
  if ($60 | 0) {
   $63 = HEAP32[$60 + 8 >> 2] | 0; //@line 8505
   $AsyncCtx8 = _emscripten_alloc_async_context(16, sp) | 0; //@line 8506
   FUNCTION_TABLE_vi[$63 & 1023]($3); //@line 8507
   if (___async) {
    HEAP32[$AsyncCtx8 >> 2] = 274; //@line 8510
    HEAP32[$AsyncCtx8 + 4 >> 2] = $33; //@line 8512
    HEAP32[$AsyncCtx8 + 8 >> 2] = $$0$i; //@line 8514
    HEAP32[$AsyncCtx8 + 12 >> 2] = $4; //@line 8516
    sp = STACKTOP; //@line 8517
    STACKTOP = sp; //@line 8518
    return 0; //@line 8518
   } else {
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 8520
    break;
   }
  }
 } while (0);
 $67 = HEAP32[$33 >> 2] | 0; //@line 8525
 if (!$67) {
  STACKTOP = sp; //@line 8528
  return $$0$i | 0; //@line 8528
 }
 $70 = HEAP32[$67 + 8 >> 2] | 0; //@line 8531
 $AsyncCtx12 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8532
 FUNCTION_TABLE_vi[$70 & 1023]($4); //@line 8533
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 275; //@line 8536
  HEAP32[$AsyncCtx12 + 4 >> 2] = $$0$i; //@line 8538
  sp = STACKTOP; //@line 8539
  STACKTOP = sp; //@line 8540
  return 0; //@line 8540
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 8542
 STACKTOP = sp; //@line 8543
 return $$0$i | 0; //@line 8543
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_243($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 15702
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15704
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15706
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15708
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15712
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 15714
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 15716
 $15 = $10 + 12 | 0; //@line 15717
 HEAP32[$10 >> 2] = 188; //@line 15718
 HEAP32[$10 + 4 >> 2] = 0; //@line 15720
 HEAP32[$10 + 8 >> 2] = $2; //@line 15722
 HEAP32[$15 >> 2] = 824; //@line 15723
 $16 = $2 + 2448 | 0; //@line 15724
 if (($16 | 0) == ($10 | 0)) {
  $43 = HEAP32[208] | 0; //@line 15728
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(28) | 0; //@line 15729
  FUNCTION_TABLE_vi[$43 & 1023]($10); //@line 15730
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 191; //@line 15733
   $44 = $ReallocAsyncCtx9 + 4 | 0; //@line 15734
   HEAP32[$44 >> 2] = $10; //@line 15735
   $45 = $ReallocAsyncCtx9 + 8 | 0; //@line 15736
   HEAP32[$45 >> 2] = $4; //@line 15737
   $46 = $ReallocAsyncCtx9 + 12 | 0; //@line 15738
   HEAP32[$46 >> 2] = $2; //@line 15739
   $47 = $ReallocAsyncCtx9 + 16 | 0; //@line 15740
   HEAP32[$47 >> 2] = $6; //@line 15741
   $48 = $ReallocAsyncCtx9 + 20 | 0; //@line 15742
   HEAP32[$48 >> 2] = $12; //@line 15743
   $49 = $ReallocAsyncCtx9 + 24 | 0; //@line 15744
   HEAP32[$49 >> 2] = $14; //@line 15745
   sp = STACKTOP; //@line 15746
   return;
  }
  ___async_unwind = 0; //@line 15749
  HEAP32[$ReallocAsyncCtx9 >> 2] = 191; //@line 15750
  $44 = $ReallocAsyncCtx9 + 4 | 0; //@line 15751
  HEAP32[$44 >> 2] = $10; //@line 15752
  $45 = $ReallocAsyncCtx9 + 8 | 0; //@line 15753
  HEAP32[$45 >> 2] = $4; //@line 15754
  $46 = $ReallocAsyncCtx9 + 12 | 0; //@line 15755
  HEAP32[$46 >> 2] = $2; //@line 15756
  $47 = $ReallocAsyncCtx9 + 16 | 0; //@line 15757
  HEAP32[$47 >> 2] = $6; //@line 15758
  $48 = $ReallocAsyncCtx9 + 20 | 0; //@line 15759
  HEAP32[$48 >> 2] = $12; //@line 15760
  $49 = $ReallocAsyncCtx9 + 24 | 0; //@line 15761
  HEAP32[$49 >> 2] = $14; //@line 15762
  sp = STACKTOP; //@line 15763
  return;
 }
 $18 = $2 + 2460 | 0; //@line 15766
 $19 = HEAP32[$18 >> 2] | 0; //@line 15767
 if (!$19) {
  $33 = HEAP32[207] | 0; //@line 15771
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(36) | 0; //@line 15772
  FUNCTION_TABLE_vii[$33 & 15]($16, $10); //@line 15773
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 190; //@line 15776
   $34 = $ReallocAsyncCtx8 + 4 | 0; //@line 15777
   HEAP32[$34 >> 2] = $10; //@line 15778
   $35 = $ReallocAsyncCtx8 + 8 | 0; //@line 15779
   HEAP32[$35 >> 2] = $4; //@line 15780
   $36 = $ReallocAsyncCtx8 + 12 | 0; //@line 15781
   HEAP32[$36 >> 2] = $2; //@line 15782
   $37 = $ReallocAsyncCtx8 + 16 | 0; //@line 15783
   HEAP32[$37 >> 2] = $6; //@line 15784
   $38 = $ReallocAsyncCtx8 + 20 | 0; //@line 15785
   HEAP32[$38 >> 2] = $15; //@line 15786
   $39 = $ReallocAsyncCtx8 + 24 | 0; //@line 15787
   HEAP32[$39 >> 2] = $18; //@line 15788
   $40 = $ReallocAsyncCtx8 + 28 | 0; //@line 15789
   HEAP32[$40 >> 2] = $12; //@line 15790
   $41 = $ReallocAsyncCtx8 + 32 | 0; //@line 15791
   HEAP32[$41 >> 2] = $14; //@line 15792
   sp = STACKTOP; //@line 15793
   return;
  }
  ___async_unwind = 0; //@line 15796
  HEAP32[$ReallocAsyncCtx8 >> 2] = 190; //@line 15797
  $34 = $ReallocAsyncCtx8 + 4 | 0; //@line 15798
  HEAP32[$34 >> 2] = $10; //@line 15799
  $35 = $ReallocAsyncCtx8 + 8 | 0; //@line 15800
  HEAP32[$35 >> 2] = $4; //@line 15801
  $36 = $ReallocAsyncCtx8 + 12 | 0; //@line 15802
  HEAP32[$36 >> 2] = $2; //@line 15803
  $37 = $ReallocAsyncCtx8 + 16 | 0; //@line 15804
  HEAP32[$37 >> 2] = $6; //@line 15805
  $38 = $ReallocAsyncCtx8 + 20 | 0; //@line 15806
  HEAP32[$38 >> 2] = $15; //@line 15807
  $39 = $ReallocAsyncCtx8 + 24 | 0; //@line 15808
  HEAP32[$39 >> 2] = $18; //@line 15809
  $40 = $ReallocAsyncCtx8 + 28 | 0; //@line 15810
  HEAP32[$40 >> 2] = $12; //@line 15811
  $41 = $ReallocAsyncCtx8 + 32 | 0; //@line 15812
  HEAP32[$41 >> 2] = $14; //@line 15813
  sp = STACKTOP; //@line 15814
  return;
 } else {
  $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 15818
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(40) | 0; //@line 15819
  FUNCTION_TABLE_vi[$22 & 1023]($16); //@line 15820
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 189; //@line 15823
   $23 = $ReallocAsyncCtx7 + 4 | 0; //@line 15824
   HEAP32[$23 >> 2] = $18; //@line 15825
   $24 = $ReallocAsyncCtx7 + 8 | 0; //@line 15826
   HEAP32[$24 >> 2] = $16; //@line 15827
   $25 = $ReallocAsyncCtx7 + 12 | 0; //@line 15828
   HEAP32[$25 >> 2] = $10; //@line 15829
   $26 = $ReallocAsyncCtx7 + 16 | 0; //@line 15830
   HEAP32[$26 >> 2] = $4; //@line 15831
   $27 = $ReallocAsyncCtx7 + 20 | 0; //@line 15832
   HEAP32[$27 >> 2] = $2; //@line 15833
   $28 = $ReallocAsyncCtx7 + 24 | 0; //@line 15834
   HEAP32[$28 >> 2] = $6; //@line 15835
   $29 = $ReallocAsyncCtx7 + 28 | 0; //@line 15836
   HEAP32[$29 >> 2] = $15; //@line 15837
   $30 = $ReallocAsyncCtx7 + 32 | 0; //@line 15838
   HEAP32[$30 >> 2] = $12; //@line 15839
   $31 = $ReallocAsyncCtx7 + 36 | 0; //@line 15840
   HEAP32[$31 >> 2] = $14; //@line 15841
   sp = STACKTOP; //@line 15842
   return;
  }
  ___async_unwind = 0; //@line 15845
  HEAP32[$ReallocAsyncCtx7 >> 2] = 189; //@line 15846
  $23 = $ReallocAsyncCtx7 + 4 | 0; //@line 15847
  HEAP32[$23 >> 2] = $18; //@line 15848
  $24 = $ReallocAsyncCtx7 + 8 | 0; //@line 15849
  HEAP32[$24 >> 2] = $16; //@line 15850
  $25 = $ReallocAsyncCtx7 + 12 | 0; //@line 15851
  HEAP32[$25 >> 2] = $10; //@line 15852
  $26 = $ReallocAsyncCtx7 + 16 | 0; //@line 15853
  HEAP32[$26 >> 2] = $4; //@line 15854
  $27 = $ReallocAsyncCtx7 + 20 | 0; //@line 15855
  HEAP32[$27 >> 2] = $2; //@line 15856
  $28 = $ReallocAsyncCtx7 + 24 | 0; //@line 15857
  HEAP32[$28 >> 2] = $6; //@line 15858
  $29 = $ReallocAsyncCtx7 + 28 | 0; //@line 15859
  HEAP32[$29 >> 2] = $15; //@line 15860
  $30 = $ReallocAsyncCtx7 + 32 | 0; //@line 15861
  HEAP32[$30 >> 2] = $12; //@line 15862
  $31 = $ReallocAsyncCtx7 + 36 | 0; //@line 15863
  HEAP32[$31 >> 2] = $14; //@line 15864
  sp = STACKTOP; //@line 15865
  return;
 }
}
function __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_28($0) {
 $0 = $0 | 0;
 var $$pre16 = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $29 = 0, $30 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 23115
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23117
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23119
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23121
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23123
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23125
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23127
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23129
 $$pre16 = HEAP32[$12 >> 2] | 0; //@line 23130
 if ($$pre16 | 0) {
  $17 = HEAP32[$$pre16 + 4 >> 2] | 0; //@line 23134
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 23135
  FUNCTION_TABLE_vii[$17 & 15]($8, $10); //@line 23136
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 356; //@line 23139
   $18 = $ReallocAsyncCtx4 + 4 | 0; //@line 23140
   HEAP32[$18 >> 2] = $2; //@line 23141
   $19 = $ReallocAsyncCtx4 + 8 | 0; //@line 23142
   HEAP32[$19 >> 2] = $4; //@line 23143
   $20 = $ReallocAsyncCtx4 + 12 | 0; //@line 23144
   HEAP32[$20 >> 2] = $6; //@line 23145
   $21 = $ReallocAsyncCtx4 + 16 | 0; //@line 23146
   HEAP32[$21 >> 2] = $12; //@line 23147
   $22 = $ReallocAsyncCtx4 + 20 | 0; //@line 23148
   HEAP32[$22 >> 2] = $14; //@line 23149
   sp = STACKTOP; //@line 23150
   return;
  }
  ___async_unwind = 0; //@line 23153
  HEAP32[$ReallocAsyncCtx4 >> 2] = 356; //@line 23154
  $18 = $ReallocAsyncCtx4 + 4 | 0; //@line 23155
  HEAP32[$18 >> 2] = $2; //@line 23156
  $19 = $ReallocAsyncCtx4 + 8 | 0; //@line 23157
  HEAP32[$19 >> 2] = $4; //@line 23158
  $20 = $ReallocAsyncCtx4 + 12 | 0; //@line 23159
  HEAP32[$20 >> 2] = $6; //@line 23160
  $21 = $ReallocAsyncCtx4 + 16 | 0; //@line 23161
  HEAP32[$21 >> 2] = $12; //@line 23162
  $22 = $ReallocAsyncCtx4 + 20 | 0; //@line 23163
  HEAP32[$22 >> 2] = $14; //@line 23164
  sp = STACKTOP; //@line 23165
  return;
 }
 HEAP32[$6 >> 2] = 0; //@line 23168
 $23 = $4 + 32 | 0; //@line 23169
 $24 = $4 + 44 | 0; //@line 23170
 $25 = HEAP32[$24 >> 2] | 0; //@line 23171
 if (!$25) {
  HEAP32[___async_retval >> 2] = 0; //@line 23175
  return;
 }
 $27 = $2 + 2532 | 0; //@line 23178
 if (($27 | 0) == ($23 | 0)) {
  $48 = HEAP32[$25 + 4 >> 2] | 0; //@line 23182
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 23183
  FUNCTION_TABLE_vii[$48 & 15]($14, $23); //@line 23184
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 359; //@line 23187
   $49 = $ReallocAsyncCtx7 + 4 | 0; //@line 23188
   HEAP32[$49 >> 2] = $24; //@line 23189
   $50 = $ReallocAsyncCtx7 + 8 | 0; //@line 23190
   HEAP32[$50 >> 2] = $2; //@line 23191
   $51 = $ReallocAsyncCtx7 + 12 | 0; //@line 23192
   HEAP32[$51 >> 2] = $14; //@line 23193
   sp = STACKTOP; //@line 23194
   return;
  }
  ___async_unwind = 0; //@line 23197
  HEAP32[$ReallocAsyncCtx7 >> 2] = 359; //@line 23198
  $49 = $ReallocAsyncCtx7 + 4 | 0; //@line 23199
  HEAP32[$49 >> 2] = $24; //@line 23200
  $50 = $ReallocAsyncCtx7 + 8 | 0; //@line 23201
  HEAP32[$50 >> 2] = $2; //@line 23202
  $51 = $ReallocAsyncCtx7 + 12 | 0; //@line 23203
  HEAP32[$51 >> 2] = $14; //@line 23204
  sp = STACKTOP; //@line 23205
  return;
 }
 $29 = $2 + 2544 | 0; //@line 23208
 $30 = HEAP32[$29 >> 2] | 0; //@line 23209
 if (!$30) {
  $41 = HEAP32[$25 + 4 >> 2] | 0; //@line 23213
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 23214
  FUNCTION_TABLE_vii[$41 & 15]($27, $23); //@line 23215
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 358; //@line 23218
   $42 = $ReallocAsyncCtx6 + 4 | 0; //@line 23219
   HEAP32[$42 >> 2] = $24; //@line 23220
   $43 = $ReallocAsyncCtx6 + 8 | 0; //@line 23221
   HEAP32[$43 >> 2] = $29; //@line 23222
   $44 = $ReallocAsyncCtx6 + 12 | 0; //@line 23223
   HEAP32[$44 >> 2] = $2; //@line 23224
   $45 = $ReallocAsyncCtx6 + 16 | 0; //@line 23225
   HEAP32[$45 >> 2] = $14; //@line 23226
   $46 = $ReallocAsyncCtx6 + 20 | 0; //@line 23227
   HEAP32[$46 >> 2] = $23; //@line 23228
   sp = STACKTOP; //@line 23229
   return;
  }
  ___async_unwind = 0; //@line 23232
  HEAP32[$ReallocAsyncCtx6 >> 2] = 358; //@line 23233
  $42 = $ReallocAsyncCtx6 + 4 | 0; //@line 23234
  HEAP32[$42 >> 2] = $24; //@line 23235
  $43 = $ReallocAsyncCtx6 + 8 | 0; //@line 23236
  HEAP32[$43 >> 2] = $29; //@line 23237
  $44 = $ReallocAsyncCtx6 + 12 | 0; //@line 23238
  HEAP32[$44 >> 2] = $2; //@line 23239
  $45 = $ReallocAsyncCtx6 + 16 | 0; //@line 23240
  HEAP32[$45 >> 2] = $14; //@line 23241
  $46 = $ReallocAsyncCtx6 + 20 | 0; //@line 23242
  HEAP32[$46 >> 2] = $23; //@line 23243
  sp = STACKTOP; //@line 23244
  return;
 } else {
  $33 = HEAP32[$30 + 8 >> 2] | 0; //@line 23248
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 23249
  FUNCTION_TABLE_vi[$33 & 1023]($27); //@line 23250
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 357; //@line 23253
   $34 = $ReallocAsyncCtx5 + 4 | 0; //@line 23254
   HEAP32[$34 >> 2] = $24; //@line 23255
   $35 = $ReallocAsyncCtx5 + 8 | 0; //@line 23256
   HEAP32[$35 >> 2] = $29; //@line 23257
   $36 = $ReallocAsyncCtx5 + 12 | 0; //@line 23258
   HEAP32[$36 >> 2] = $2; //@line 23259
   $37 = $ReallocAsyncCtx5 + 16 | 0; //@line 23260
   HEAP32[$37 >> 2] = $27; //@line 23261
   $38 = $ReallocAsyncCtx5 + 20 | 0; //@line 23262
   HEAP32[$38 >> 2] = $23; //@line 23263
   $39 = $ReallocAsyncCtx5 + 24 | 0; //@line 23264
   HEAP32[$39 >> 2] = $14; //@line 23265
   sp = STACKTOP; //@line 23266
   return;
  }
  ___async_unwind = 0; //@line 23269
  HEAP32[$ReallocAsyncCtx5 >> 2] = 357; //@line 23270
  $34 = $ReallocAsyncCtx5 + 4 | 0; //@line 23271
  HEAP32[$34 >> 2] = $24; //@line 23272
  $35 = $ReallocAsyncCtx5 + 8 | 0; //@line 23273
  HEAP32[$35 >> 2] = $29; //@line 23274
  $36 = $ReallocAsyncCtx5 + 12 | 0; //@line 23275
  HEAP32[$36 >> 2] = $2; //@line 23276
  $37 = $ReallocAsyncCtx5 + 16 | 0; //@line 23277
  HEAP32[$37 >> 2] = $27; //@line 23278
  $38 = $ReallocAsyncCtx5 + 20 | 0; //@line 23279
  HEAP32[$38 >> 2] = $23; //@line 23280
  $39 = $ReallocAsyncCtx5 + 24 | 0; //@line 23281
  HEAP32[$39 >> 2] = $14; //@line 23282
  sp = STACKTOP; //@line 23283
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_307($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $47 = 0, $48 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 21186
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21188
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21190
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21192
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21194
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21196
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21198
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21200
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 21202
 if ($AsyncRetVal | 0) {
  $17 = HEAP32[$6 >> 2] | 0; //@line 21205
  if (!$17) {
   HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 21209
   $30 = $AsyncRetVal + 16 | 0; //@line 21210
   HEAP32[$30 >> 2] = HEAP32[$10 >> 2]; //@line 21211
   HEAP32[$30 + 4 >> 2] = HEAP32[$10 + 4 >> 2]; //@line 21211
   HEAP8[$30 + 8 >> 0] = HEAP8[$10 + 8 >> 0] | 0; //@line 21211
   _equeue_event_dtor($AsyncRetVal, 302); //@line 21212
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 21213
   $31 = _equeue_post($12, 303, $AsyncRetVal) | 0; //@line 21214
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 304; //@line 21217
    $32 = $ReallocAsyncCtx6 + 4 | 0; //@line 21218
    HEAP32[$32 >> 2] = $6; //@line 21219
    $33 = $ReallocAsyncCtx6 + 8 | 0; //@line 21220
    HEAP32[$33 >> 2] = $2; //@line 21221
    $34 = $ReallocAsyncCtx6 + 12 | 0; //@line 21222
    HEAP32[$34 >> 2] = $8; //@line 21223
    $35 = $ReallocAsyncCtx6 + 16 | 0; //@line 21224
    HEAP32[$35 >> 2] = $4; //@line 21225
    sp = STACKTOP; //@line 21226
    return;
   }
   HEAP32[___async_retval >> 2] = $31; //@line 21230
   ___async_unwind = 0; //@line 21231
   HEAP32[$ReallocAsyncCtx6 >> 2] = 304; //@line 21232
   $32 = $ReallocAsyncCtx6 + 4 | 0; //@line 21233
   HEAP32[$32 >> 2] = $6; //@line 21234
   $33 = $ReallocAsyncCtx6 + 8 | 0; //@line 21235
   HEAP32[$33 >> 2] = $2; //@line 21236
   $34 = $ReallocAsyncCtx6 + 12 | 0; //@line 21237
   HEAP32[$34 >> 2] = $8; //@line 21238
   $35 = $ReallocAsyncCtx6 + 16 | 0; //@line 21239
   HEAP32[$35 >> 2] = $4; //@line 21240
   sp = STACKTOP; //@line 21241
   return;
  } else {
   $20 = HEAP32[$17 + 4 >> 2] | 0; //@line 21245
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 21246
   FUNCTION_TABLE_vii[$20 & 15]($AsyncRetVal, $8); //@line 21247
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 301; //@line 21250
    $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 21251
    HEAP32[$21 >> 2] = $14; //@line 21252
    $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 21253
    HEAP32[$22 >> 2] = $AsyncRetVal; //@line 21254
    $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 21255
    HEAP32[$23 >> 2] = $10; //@line 21256
    $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 21257
    HEAP32[$24 >> 2] = $12; //@line 21258
    $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 21259
    HEAP32[$25 >> 2] = $6; //@line 21260
    $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 21261
    HEAP32[$26 >> 2] = $2; //@line 21262
    $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 21263
    HEAP32[$27 >> 2] = $8; //@line 21264
    $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 21265
    HEAP32[$28 >> 2] = $4; //@line 21266
    sp = STACKTOP; //@line 21267
    return;
   }
   ___async_unwind = 0; //@line 21270
   HEAP32[$ReallocAsyncCtx3 >> 2] = 301; //@line 21271
   $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 21272
   HEAP32[$21 >> 2] = $14; //@line 21273
   $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 21274
   HEAP32[$22 >> 2] = $AsyncRetVal; //@line 21275
   $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 21276
   HEAP32[$23 >> 2] = $10; //@line 21277
   $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 21278
   HEAP32[$24 >> 2] = $12; //@line 21279
   $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 21280
   HEAP32[$25 >> 2] = $6; //@line 21281
   $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 21282
   HEAP32[$26 >> 2] = $2; //@line 21283
   $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 21284
   HEAP32[$27 >> 2] = $8; //@line 21285
   $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 21286
   HEAP32[$28 >> 2] = $4; //@line 21287
   sp = STACKTOP; //@line 21288
   return;
  }
 }
 $37 = HEAP32[$6 >> 2] | 0; //@line 21292
 if ($37 | 0) {
  $40 = HEAP32[$37 + 8 >> 2] | 0; //@line 21296
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 21297
  FUNCTION_TABLE_vi[$40 & 1023]($8); //@line 21298
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 305; //@line 21301
   $41 = $ReallocAsyncCtx4 + 4 | 0; //@line 21302
   HEAP32[$41 >> 2] = $2; //@line 21303
   $42 = $ReallocAsyncCtx4 + 8 | 0; //@line 21304
   HEAP32[$42 >> 2] = 0; //@line 21305
   $43 = $ReallocAsyncCtx4 + 12 | 0; //@line 21306
   HEAP32[$43 >> 2] = $4; //@line 21307
   sp = STACKTOP; //@line 21308
   return;
  }
  ___async_unwind = 0; //@line 21311
  HEAP32[$ReallocAsyncCtx4 >> 2] = 305; //@line 21312
  $41 = $ReallocAsyncCtx4 + 4 | 0; //@line 21313
  HEAP32[$41 >> 2] = $2; //@line 21314
  $42 = $ReallocAsyncCtx4 + 8 | 0; //@line 21315
  HEAP32[$42 >> 2] = 0; //@line 21316
  $43 = $ReallocAsyncCtx4 + 12 | 0; //@line 21317
  HEAP32[$43 >> 2] = $4; //@line 21318
  sp = STACKTOP; //@line 21319
  return;
 }
 $44 = HEAP32[$2 >> 2] | 0; //@line 21322
 if (!$44) {
  HEAP32[___async_retval >> 2] = 0; //@line 21326
  return;
 }
 $47 = HEAP32[$44 + 8 >> 2] | 0; //@line 21330
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 21331
 FUNCTION_TABLE_vi[$47 & 1023]($4); //@line 21332
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 306; //@line 21335
  $48 = $ReallocAsyncCtx5 + 4 | 0; //@line 21336
  HEAP32[$48 >> 2] = 0; //@line 21337
  sp = STACKTOP; //@line 21338
  return;
 }
 ___async_unwind = 0; //@line 21341
 HEAP32[$ReallocAsyncCtx5 >> 2] = 306; //@line 21342
 $48 = $ReallocAsyncCtx5 + 4 | 0; //@line 21343
 HEAP32[$48 >> 2] = 0; //@line 21344
 sp = STACKTOP; //@line 21345
 return;
}
function __ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 12800
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12802
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12804
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12806
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12808
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12810
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12812
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 12814
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 12816
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 12818
 $19 = $10 + 12 | 0; //@line 12819
 $20 = HEAP32[$19 >> 2] | 0; //@line 12820
 if ($20 | 0) {
  $23 = HEAP32[$20 + 4 >> 2] | 0; //@line 12824
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 12825
  FUNCTION_TABLE_vii[$23 & 15]($12, $10); //@line 12826
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 453; //@line 12829
   $24 = $ReallocAsyncCtx2 + 4 | 0; //@line 12830
   HEAP32[$24 >> 2] = $19; //@line 12831
   $25 = $ReallocAsyncCtx2 + 8 | 0; //@line 12832
   HEAP32[$25 >> 2] = $14; //@line 12833
   $26 = $ReallocAsyncCtx2 + 12 | 0; //@line 12834
   HEAP32[$26 >> 2] = $4; //@line 12835
   $27 = $ReallocAsyncCtx2 + 16 | 0; //@line 12836
   HEAP32[$27 >> 2] = $16; //@line 12837
   $28 = $ReallocAsyncCtx2 + 20 | 0; //@line 12838
   HEAP32[$28 >> 2] = $18; //@line 12839
   $29 = $ReallocAsyncCtx2 + 24 | 0; //@line 12840
   HEAP32[$29 >> 2] = $2; //@line 12841
   $30 = $ReallocAsyncCtx2 + 28 | 0; //@line 12842
   HEAP32[$30 >> 2] = $6; //@line 12843
   $31 = $ReallocAsyncCtx2 + 32 | 0; //@line 12844
   HEAP32[$31 >> 2] = $8; //@line 12845
   sp = STACKTOP; //@line 12846
   return;
  }
  ___async_unwind = 0; //@line 12849
  HEAP32[$ReallocAsyncCtx2 >> 2] = 453; //@line 12850
  $24 = $ReallocAsyncCtx2 + 4 | 0; //@line 12851
  HEAP32[$24 >> 2] = $19; //@line 12852
  $25 = $ReallocAsyncCtx2 + 8 | 0; //@line 12853
  HEAP32[$25 >> 2] = $14; //@line 12854
  $26 = $ReallocAsyncCtx2 + 12 | 0; //@line 12855
  HEAP32[$26 >> 2] = $4; //@line 12856
  $27 = $ReallocAsyncCtx2 + 16 | 0; //@line 12857
  HEAP32[$27 >> 2] = $16; //@line 12858
  $28 = $ReallocAsyncCtx2 + 20 | 0; //@line 12859
  HEAP32[$28 >> 2] = $18; //@line 12860
  $29 = $ReallocAsyncCtx2 + 24 | 0; //@line 12861
  HEAP32[$29 >> 2] = $2; //@line 12862
  $30 = $ReallocAsyncCtx2 + 28 | 0; //@line 12863
  HEAP32[$30 >> 2] = $6; //@line 12864
  $31 = $ReallocAsyncCtx2 + 32 | 0; //@line 12865
  HEAP32[$31 >> 2] = $8; //@line 12866
  sp = STACKTOP; //@line 12867
  return;
 }
 HEAP32[$14 >> 2] = 0; //@line 12870
 switch (HEAP32[$4 >> 2] | 0) {
 case 0:
  {
   _mbed_tracef(16, 12890, 13480, $16); //@line 12874
   $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 12876
   __ZN7LoRaPHY18put_radio_to_sleepEv($2 + 4 | 0); //@line 12877
   if (___async) {
    HEAP32[$ReallocAsyncCtx5 >> 2] = 454; //@line 12880
    $33 = $ReallocAsyncCtx5 + 4 | 0; //@line 12881
    HEAP32[$33 >> 2] = $4; //@line 12882
    $34 = $ReallocAsyncCtx5 + 8 | 0; //@line 12883
    HEAP32[$34 >> 2] = $6; //@line 12884
    $35 = $ReallocAsyncCtx5 + 12 | 0; //@line 12885
    HEAP32[$35 >> 2] = $8; //@line 12886
    $36 = $ReallocAsyncCtx5 + 16 | 0; //@line 12887
    HEAP32[$36 >> 2] = $2; //@line 12888
    sp = STACKTOP; //@line 12889
    return;
   }
   ___async_unwind = 0; //@line 12892
   HEAP32[$ReallocAsyncCtx5 >> 2] = 454; //@line 12893
   $33 = $ReallocAsyncCtx5 + 4 | 0; //@line 12894
   HEAP32[$33 >> 2] = $4; //@line 12895
   $34 = $ReallocAsyncCtx5 + 8 | 0; //@line 12896
   HEAP32[$34 >> 2] = $6; //@line 12897
   $35 = $ReallocAsyncCtx5 + 12 | 0; //@line 12898
   HEAP32[$35 >> 2] = $8; //@line 12899
   $36 = $ReallocAsyncCtx5 + 16 | 0; //@line 12900
   HEAP32[$36 >> 2] = $2; //@line 12901
   sp = STACKTOP; //@line 12902
   return;
  }
 case 2:
  {
   HEAP8[$2 + 1177 >> 0] = 0; //@line 12908
   $38 = $2 + 4 | 0; //@line 12909
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 12910
   __ZN7LoRaPHY18put_radio_to_sleepEv($38); //@line 12911
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 455; //@line 12914
    $39 = $ReallocAsyncCtx4 + 4 | 0; //@line 12915
    HEAP32[$39 >> 2] = $2; //@line 12916
    $40 = $ReallocAsyncCtx4 + 8 | 0; //@line 12917
    HEAP32[$40 >> 2] = $38; //@line 12918
    $41 = $ReallocAsyncCtx4 + 12 | 0; //@line 12919
    HEAP32[$41 >> 2] = $4; //@line 12920
    $42 = $ReallocAsyncCtx4 + 16 | 0; //@line 12921
    HEAP32[$42 >> 2] = $6; //@line 12922
    $43 = $ReallocAsyncCtx4 + 20 | 0; //@line 12923
    HEAP32[$43 >> 2] = $8; //@line 12924
    sp = STACKTOP; //@line 12925
    return;
   }
   ___async_unwind = 0; //@line 12928
   HEAP32[$ReallocAsyncCtx4 >> 2] = 455; //@line 12929
   $39 = $ReallocAsyncCtx4 + 4 | 0; //@line 12930
   HEAP32[$39 >> 2] = $2; //@line 12931
   $40 = $ReallocAsyncCtx4 + 8 | 0; //@line 12932
   HEAP32[$40 >> 2] = $38; //@line 12933
   $41 = $ReallocAsyncCtx4 + 12 | 0; //@line 12934
   HEAP32[$41 >> 2] = $4; //@line 12935
   $42 = $ReallocAsyncCtx4 + 16 | 0; //@line 12936
   HEAP32[$42 >> 2] = $6; //@line 12937
   $43 = $ReallocAsyncCtx4 + 20 | 0; //@line 12938
   HEAP32[$43 >> 2] = $8; //@line 12939
   sp = STACKTOP; //@line 12940
   return;
  }
 default:
  {
   if ((HEAP32[$4 >> 2] | 0) != 2) {
    return;
   }
   _mbed_tracef(16, 12890, 13516, $6); //@line 12950
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 12951
   __ZN7LoRaMac15open_rx2_windowEv($2); //@line 12952
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 456; //@line 12955
    sp = STACKTOP; //@line 12956
    return;
   }
   ___async_unwind = 0; //@line 12959
   HEAP32[$ReallocAsyncCtx3 >> 2] = 456; //@line 12960
   sp = STACKTOP; //@line 12961
   return;
  }
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_120($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $48 = 0, $49 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 27868
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27870
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27872
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27874
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27876
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27878
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27880
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 27882
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 27884
 if ($AsyncRetVal | 0) {
  $17 = HEAP32[$4 >> 2] | 0; //@line 27887
  if (!$17) {
   HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 27891
   HEAP32[$AsyncRetVal + 16 >> 2] = HEAP32[$12 >> 2]; //@line 27894
   _equeue_event_dtor($AsyncRetVal, 271); //@line 27895
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 27896
   $32 = _equeue_post($14, 272, $AsyncRetVal) | 0; //@line 27897
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 273; //@line 27900
    $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 27901
    HEAP32[$33 >> 2] = $4; //@line 27902
    $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 27903
    HEAP32[$34 >> 2] = $6; //@line 27904
    $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 27905
    HEAP32[$35 >> 2] = $8; //@line 27906
    $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 27907
    HEAP32[$36 >> 2] = $2; //@line 27908
    sp = STACKTOP; //@line 27909
    return;
   }
   HEAP32[___async_retval >> 2] = $32; //@line 27913
   ___async_unwind = 0; //@line 27914
   HEAP32[$ReallocAsyncCtx6 >> 2] = 273; //@line 27915
   $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 27916
   HEAP32[$33 >> 2] = $4; //@line 27917
   $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 27918
   HEAP32[$34 >> 2] = $6; //@line 27919
   $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 27920
   HEAP32[$35 >> 2] = $8; //@line 27921
   $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 27922
   HEAP32[$36 >> 2] = $2; //@line 27923
   sp = STACKTOP; //@line 27924
   return;
  } else {
   $20 = HEAP32[$17 + 4 >> 2] | 0; //@line 27928
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 27929
   FUNCTION_TABLE_vii[$20 & 15]($AsyncRetVal, $8); //@line 27930
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 270; //@line 27933
    $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 27934
    HEAP32[$21 >> 2] = $10; //@line 27935
    $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 27936
    HEAP32[$22 >> 2] = $AsyncRetVal; //@line 27937
    $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 27938
    HEAP32[$23 >> 2] = $12; //@line 27939
    $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 27940
    HEAP32[$24 >> 2] = $14; //@line 27941
    $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 27942
    HEAP32[$25 >> 2] = $4; //@line 27943
    $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 27944
    HEAP32[$26 >> 2] = $6; //@line 27945
    $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 27946
    HEAP32[$27 >> 2] = $8; //@line 27947
    $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 27948
    HEAP32[$28 >> 2] = $2; //@line 27949
    sp = STACKTOP; //@line 27950
    return;
   }
   ___async_unwind = 0; //@line 27953
   HEAP32[$ReallocAsyncCtx3 >> 2] = 270; //@line 27954
   $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 27955
   HEAP32[$21 >> 2] = $10; //@line 27956
   $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 27957
   HEAP32[$22 >> 2] = $AsyncRetVal; //@line 27958
   $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 27959
   HEAP32[$23 >> 2] = $12; //@line 27960
   $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 27961
   HEAP32[$24 >> 2] = $14; //@line 27962
   $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 27963
   HEAP32[$25 >> 2] = $4; //@line 27964
   $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 27965
   HEAP32[$26 >> 2] = $6; //@line 27966
   $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 27967
   HEAP32[$27 >> 2] = $8; //@line 27968
   $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 27969
   HEAP32[$28 >> 2] = $2; //@line 27970
   sp = STACKTOP; //@line 27971
   return;
  }
 }
 $38 = HEAP32[$4 >> 2] | 0; //@line 27975
 if ($38 | 0) {
  $41 = HEAP32[$38 + 8 >> 2] | 0; //@line 27979
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 27980
  FUNCTION_TABLE_vi[$41 & 1023]($8); //@line 27981
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 274; //@line 27984
   $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 27985
   HEAP32[$42 >> 2] = $6; //@line 27986
   $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 27987
   HEAP32[$43 >> 2] = 0; //@line 27988
   $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 27989
   HEAP32[$44 >> 2] = $2; //@line 27990
   sp = STACKTOP; //@line 27991
   return;
  }
  ___async_unwind = 0; //@line 27994
  HEAP32[$ReallocAsyncCtx4 >> 2] = 274; //@line 27995
  $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 27996
  HEAP32[$42 >> 2] = $6; //@line 27997
  $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 27998
  HEAP32[$43 >> 2] = 0; //@line 27999
  $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 28000
  HEAP32[$44 >> 2] = $2; //@line 28001
  sp = STACKTOP; //@line 28002
  return;
 }
 $45 = HEAP32[$6 >> 2] | 0; //@line 28005
 if (!$45) {
  HEAP32[___async_retval >> 2] = 0; //@line 28009
  return;
 }
 $48 = HEAP32[$45 + 8 >> 2] | 0; //@line 28013
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 28014
 FUNCTION_TABLE_vi[$48 & 1023]($2); //@line 28015
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 275; //@line 28018
  $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 28019
  HEAP32[$49 >> 2] = 0; //@line 28020
  sp = STACKTOP; //@line 28021
  return;
 }
 ___async_unwind = 0; //@line 28024
 HEAP32[$ReallocAsyncCtx5 >> 2] = 275; //@line 28025
 $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 28026
 HEAP32[$49 >> 2] = 0; //@line 28027
 sp = STACKTOP; //@line 28028
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_318($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $48 = 0, $49 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 22097
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22099
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22101
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22103
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22105
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22107
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22109
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22111
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 22113
 if ($AsyncRetVal | 0) {
  $17 = HEAP32[$2 >> 2] | 0; //@line 22116
  if (!$17) {
   HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 22120
   HEAP16[$AsyncRetVal + 16 >> 1] = HEAP16[$10 >> 1] | 0; //@line 22123
   _equeue_event_dtor($AsyncRetVal, 328); //@line 22124
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 22125
   $32 = _equeue_post($12, 329, $AsyncRetVal) | 0; //@line 22126
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 330; //@line 22129
    $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 22130
    HEAP32[$33 >> 2] = $2; //@line 22131
    $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 22132
    HEAP32[$34 >> 2] = $4; //@line 22133
    $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 22134
    HEAP32[$35 >> 2] = $14; //@line 22135
    $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 22136
    HEAP32[$36 >> 2] = $6; //@line 22137
    sp = STACKTOP; //@line 22138
    return;
   }
   HEAP32[___async_retval >> 2] = $32; //@line 22142
   ___async_unwind = 0; //@line 22143
   HEAP32[$ReallocAsyncCtx6 >> 2] = 330; //@line 22144
   $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 22145
   HEAP32[$33 >> 2] = $2; //@line 22146
   $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 22147
   HEAP32[$34 >> 2] = $4; //@line 22148
   $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 22149
   HEAP32[$35 >> 2] = $14; //@line 22150
   $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 22151
   HEAP32[$36 >> 2] = $6; //@line 22152
   sp = STACKTOP; //@line 22153
   return;
  } else {
   $20 = HEAP32[$17 + 4 >> 2] | 0; //@line 22157
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 22158
   FUNCTION_TABLE_vii[$20 & 15]($AsyncRetVal, $14); //@line 22159
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 327; //@line 22162
    $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 22163
    HEAP32[$21 >> 2] = $8; //@line 22164
    $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 22165
    HEAP32[$22 >> 2] = $AsyncRetVal; //@line 22166
    $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 22167
    HEAP32[$23 >> 2] = $10; //@line 22168
    $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 22169
    HEAP32[$24 >> 2] = $12; //@line 22170
    $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 22171
    HEAP32[$25 >> 2] = $2; //@line 22172
    $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 22173
    HEAP32[$26 >> 2] = $4; //@line 22174
    $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 22175
    HEAP32[$27 >> 2] = $14; //@line 22176
    $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 22177
    HEAP32[$28 >> 2] = $6; //@line 22178
    sp = STACKTOP; //@line 22179
    return;
   }
   ___async_unwind = 0; //@line 22182
   HEAP32[$ReallocAsyncCtx3 >> 2] = 327; //@line 22183
   $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 22184
   HEAP32[$21 >> 2] = $8; //@line 22185
   $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 22186
   HEAP32[$22 >> 2] = $AsyncRetVal; //@line 22187
   $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 22188
   HEAP32[$23 >> 2] = $10; //@line 22189
   $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 22190
   HEAP32[$24 >> 2] = $12; //@line 22191
   $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 22192
   HEAP32[$25 >> 2] = $2; //@line 22193
   $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 22194
   HEAP32[$26 >> 2] = $4; //@line 22195
   $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 22196
   HEAP32[$27 >> 2] = $14; //@line 22197
   $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 22198
   HEAP32[$28 >> 2] = $6; //@line 22199
   sp = STACKTOP; //@line 22200
   return;
  }
 }
 $38 = HEAP32[$2 >> 2] | 0; //@line 22204
 if ($38 | 0) {
  $41 = HEAP32[$38 + 8 >> 2] | 0; //@line 22208
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 22209
  FUNCTION_TABLE_vi[$41 & 1023]($14); //@line 22210
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 331; //@line 22213
   $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 22214
   HEAP32[$42 >> 2] = $4; //@line 22215
   $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 22216
   HEAP32[$43 >> 2] = 0; //@line 22217
   $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 22218
   HEAP32[$44 >> 2] = $6; //@line 22219
   sp = STACKTOP; //@line 22220
   return;
  }
  ___async_unwind = 0; //@line 22223
  HEAP32[$ReallocAsyncCtx4 >> 2] = 331; //@line 22224
  $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 22225
  HEAP32[$42 >> 2] = $4; //@line 22226
  $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 22227
  HEAP32[$43 >> 2] = 0; //@line 22228
  $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 22229
  HEAP32[$44 >> 2] = $6; //@line 22230
  sp = STACKTOP; //@line 22231
  return;
 }
 $45 = HEAP32[$4 >> 2] | 0; //@line 22234
 if (!$45) {
  HEAP32[___async_retval >> 2] = 0; //@line 22238
  return;
 }
 $48 = HEAP32[$45 + 8 >> 2] | 0; //@line 22242
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 22243
 FUNCTION_TABLE_vi[$48 & 1023]($6); //@line 22244
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 332; //@line 22247
  $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 22248
  HEAP32[$49 >> 2] = 0; //@line 22249
  sp = STACKTOP; //@line 22250
  return;
 }
 ___async_unwind = 0; //@line 22253
 HEAP32[$ReallocAsyncCtx5 >> 2] = 332; //@line 22254
 $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 22255
 HEAP32[$49 >> 2] = 0; //@line 22256
 sp = STACKTOP; //@line 22257
 return;
}
function __ZN13LoRaMacCrypto15encrypt_payloadEPKhtS1_jjhjPh($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 var $$046$lcssa$off0 = 0, $$04660 = 0, $$047$lcssa = 0, $$04759 = 0, $$050$lcssa = 0, $$1 = 0, $10 = 0, $101 = 0, $107 = 0, $113 = 0, $119 = 0, $12 = 0, $125 = 0, $131 = 0, $137 = 0, $143 = 0, $149 = 0, $155 = 0, $156 = 0, $157 = 0, $166 = 0, $168 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $57 = 0, $59 = 0, $65 = 0, $71 = 0, $77 = 0, $83 = 0, $89 = 0, $9 = 0, $95 = 0, $AsyncCtx = 0, $indvars$iv = 0, $wide$trip$count = 0, sp = 0;
 sp = STACKTOP; //@line 19177
 $9 = $0 + 64 | 0; //@line 19178
 _mbedtls_aes_init($9); //@line 19179
 $10 = _mbedtls_aes_setkey_enc($9, $3, $4) | 0; //@line 19180
 L1 : do {
  if (!$10) {
   $12 = $0 + 32 | 0; //@line 19184
   HEAP8[$0 + 37 >> 0] = $6; //@line 19186
   HEAP8[$0 + 38 >> 0] = $5; //@line 19189
   HEAP8[$0 + 39 >> 0] = $5 >>> 8; //@line 19193
   HEAP8[$0 + 40 >> 0] = $5 >>> 16; //@line 19197
   HEAP8[$0 + 41 >> 0] = $5 >>> 24; //@line 19201
   HEAP8[$0 + 42 >> 0] = $7; //@line 19204
   HEAP8[$0 + 43 >> 0] = $7 >>> 8; //@line 19208
   HEAP8[$0 + 44 >> 0] = $7 >>> 16; //@line 19212
   HEAP8[$0 + 45 >> 0] = $7 >>> 24; //@line 19216
   if (($2 & 65535) > 15) {
    $38 = $0 + 47 | 0; //@line 19220
    $39 = $0 + 48 | 0; //@line 19221
    $40 = $0 + 49 | 0; //@line 19222
    $41 = $0 + 50 | 0; //@line 19223
    $42 = $0 + 51 | 0; //@line 19224
    $43 = $0 + 52 | 0; //@line 19225
    $44 = $0 + 53 | 0; //@line 19226
    $45 = $0 + 54 | 0; //@line 19227
    $46 = $0 + 55 | 0; //@line 19228
    $47 = $0 + 56 | 0; //@line 19229
    $48 = $0 + 57 | 0; //@line 19230
    $49 = $0 + 58 | 0; //@line 19231
    $50 = $0 + 59 | 0; //@line 19232
    $51 = $0 + 60 | 0; //@line 19233
    $52 = $0 + 61 | 0; //@line 19234
    $53 = $0 + 62 | 0; //@line 19235
    $54 = $0 + 63 | 0; //@line 19236
    $$04660 = 1; //@line 19237
    $$04759 = 0; //@line 19237
    $156 = $2 & 65535; //@line 19237
    while (1) {
     HEAP8[$38 >> 0] = $$04660; //@line 19240
     $$04660 = $$04660 + 1 << 16 >> 16; //@line 19241
     $57 = _mbedtls_aes_crypt_ecb($9, 1, $12, $39) | 0; //@line 19242
     if ($57 | 0) {
      $$1 = $57; //@line 19245
      break L1;
     }
     $59 = $$04759 & 255; //@line 19248
     HEAP8[$8 + $59 >> 0] = HEAP8[$39 >> 0] ^ HEAP8[$1 + $59 >> 0]; //@line 19254
     $65 = $59 + 1 | 0; //@line 19255
     HEAP8[$8 + $65 >> 0] = HEAP8[$40 >> 0] ^ HEAP8[$1 + $65 >> 0]; //@line 19261
     $71 = $59 + 2 | 0; //@line 19262
     HEAP8[$8 + $71 >> 0] = HEAP8[$41 >> 0] ^ HEAP8[$1 + $71 >> 0]; //@line 19268
     $77 = $59 + 3 | 0; //@line 19269
     HEAP8[$8 + $77 >> 0] = HEAP8[$42 >> 0] ^ HEAP8[$1 + $77 >> 0]; //@line 19275
     $83 = $59 + 4 | 0; //@line 19276
     HEAP8[$8 + $83 >> 0] = HEAP8[$43 >> 0] ^ HEAP8[$1 + $83 >> 0]; //@line 19282
     $89 = $59 + 5 | 0; //@line 19283
     HEAP8[$8 + $89 >> 0] = HEAP8[$44 >> 0] ^ HEAP8[$1 + $89 >> 0]; //@line 19289
     $95 = $59 + 6 | 0; //@line 19290
     HEAP8[$8 + $95 >> 0] = HEAP8[$45 >> 0] ^ HEAP8[$1 + $95 >> 0]; //@line 19296
     $101 = $59 + 7 | 0; //@line 19297
     HEAP8[$8 + $101 >> 0] = HEAP8[$46 >> 0] ^ HEAP8[$1 + $101 >> 0]; //@line 19303
     $107 = $59 + 8 | 0; //@line 19304
     HEAP8[$8 + $107 >> 0] = HEAP8[$47 >> 0] ^ HEAP8[$1 + $107 >> 0]; //@line 19310
     $113 = $59 + 9 | 0; //@line 19311
     HEAP8[$8 + $113 >> 0] = HEAP8[$48 >> 0] ^ HEAP8[$1 + $113 >> 0]; //@line 19317
     $119 = $59 + 10 | 0; //@line 19318
     HEAP8[$8 + $119 >> 0] = HEAP8[$49 >> 0] ^ HEAP8[$1 + $119 >> 0]; //@line 19324
     $125 = $59 + 11 | 0; //@line 19325
     HEAP8[$8 + $125 >> 0] = HEAP8[$50 >> 0] ^ HEAP8[$1 + $125 >> 0]; //@line 19331
     $131 = $59 + 12 | 0; //@line 19332
     HEAP8[$8 + $131 >> 0] = HEAP8[$51 >> 0] ^ HEAP8[$1 + $131 >> 0]; //@line 19338
     $137 = $59 + 13 | 0; //@line 19339
     HEAP8[$8 + $137 >> 0] = HEAP8[$52 >> 0] ^ HEAP8[$1 + $137 >> 0]; //@line 19345
     $143 = $59 + 14 | 0; //@line 19346
     HEAP8[$8 + $143 >> 0] = HEAP8[$53 >> 0] ^ HEAP8[$1 + $143 >> 0]; //@line 19352
     $149 = $59 + 15 | 0; //@line 19353
     HEAP8[$8 + $149 >> 0] = HEAP8[$54 >> 0] ^ HEAP8[$1 + $149 >> 0]; //@line 19359
     $155 = $156 + 65520 | 0; //@line 19360
     $157 = $155 & 65535; //@line 19361
     if (($157 & 65535) <= 15) {
      break;
     } else {
      $$04759 = $59 + 16 & 255; //@line 19367
      $156 = $155 & 65535; //@line 19367
     }
    }
    $$046$lcssa$off0 = $$04660 & 255; //@line 19375
    $$047$lcssa = $$04759 + 16 & 255; //@line 19375
    $$050$lcssa = $157; //@line 19375
   } else {
    $$046$lcssa$off0 = 1; //@line 19377
    $$047$lcssa = 0; //@line 19377
    $$050$lcssa = $2; //@line 19377
   }
   if (!($$050$lcssa << 16 >> 16)) {
    $$1 = 0; //@line 19381
   } else {
    HEAP8[$0 + 47 >> 0] = $$046$lcssa$off0; //@line 19384
    $166 = _mbedtls_aes_crypt_ecb($9, 1, $12, $0 + 48 | 0) | 0; //@line 19386
    if (!$166) {
     $wide$trip$count = $$050$lcssa & 65535; //@line 19389
     $indvars$iv = 0; //@line 19390
     do {
      $168 = $indvars$iv + $$047$lcssa | 0; //@line 19392
      HEAP8[$8 + $168 >> 0] = HEAP8[$0 + 48 + $indvars$iv >> 0] ^ HEAP8[$1 + $168 >> 0]; //@line 19399
      $indvars$iv = $indvars$iv + 1 | 0; //@line 19400
     } while (($indvars$iv | 0) != ($wide$trip$count | 0));
     $$1 = 0; //@line 19403
    } else {
     $$1 = $166; //@line 19410
    }
   }
  } else {
   $$1 = $10; //@line 19414
  }
 } while (0);
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 19417
 _mbedtls_aes_free($9); //@line 19418
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 503; //@line 19421
  HEAP32[$AsyncCtx + 4 >> 2] = $$1; //@line 19423
  sp = STACKTOP; //@line 19424
  return 0; //@line 19425
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 19427
  return $$1 | 0; //@line 19428
 }
 return 0; //@line 19430
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_143($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $48 = 0, $49 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 29279
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29281
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29283
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29285
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29287
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29289
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29291
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29293
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29295
 if ($AsyncRetVal | 0) {
  $17 = HEAP32[$10 >> 2] | 0; //@line 29298
  if (!$17) {
   HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 29302
   HEAP8[$AsyncRetVal + 16 >> 0] = HEAP8[$12 >> 0] | 0; //@line 29305
   _equeue_event_dtor($AsyncRetVal, 225); //@line 29306
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 29307
   $32 = _equeue_post($14, 226, $AsyncRetVal) | 0; //@line 29308
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 227; //@line 29311
    $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 29312
    HEAP32[$33 >> 2] = $10; //@line 29313
    $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 29314
    HEAP32[$34 >> 2] = $4; //@line 29315
    $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 29316
    HEAP32[$35 >> 2] = $8; //@line 29317
    $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 29318
    HEAP32[$36 >> 2] = $2; //@line 29319
    sp = STACKTOP; //@line 29320
    return;
   }
   HEAP32[___async_retval >> 2] = $32; //@line 29324
   ___async_unwind = 0; //@line 29325
   HEAP32[$ReallocAsyncCtx6 >> 2] = 227; //@line 29326
   $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 29327
   HEAP32[$33 >> 2] = $10; //@line 29328
   $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 29329
   HEAP32[$34 >> 2] = $4; //@line 29330
   $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 29331
   HEAP32[$35 >> 2] = $8; //@line 29332
   $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 29333
   HEAP32[$36 >> 2] = $2; //@line 29334
   sp = STACKTOP; //@line 29335
   return;
  } else {
   $20 = HEAP32[$17 + 4 >> 2] | 0; //@line 29339
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 29340
   FUNCTION_TABLE_vii[$20 & 15]($AsyncRetVal, $8); //@line 29341
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 224; //@line 29344
    $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 29345
    HEAP32[$21 >> 2] = $6; //@line 29346
    $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 29347
    HEAP32[$22 >> 2] = $AsyncRetVal; //@line 29348
    $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 29349
    HEAP32[$23 >> 2] = $12; //@line 29350
    $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 29351
    HEAP32[$24 >> 2] = $14; //@line 29352
    $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 29353
    HEAP32[$25 >> 2] = $10; //@line 29354
    $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 29355
    HEAP32[$26 >> 2] = $4; //@line 29356
    $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 29357
    HEAP32[$27 >> 2] = $8; //@line 29358
    $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 29359
    HEAP32[$28 >> 2] = $2; //@line 29360
    sp = STACKTOP; //@line 29361
    return;
   }
   ___async_unwind = 0; //@line 29364
   HEAP32[$ReallocAsyncCtx3 >> 2] = 224; //@line 29365
   $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 29366
   HEAP32[$21 >> 2] = $6; //@line 29367
   $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 29368
   HEAP32[$22 >> 2] = $AsyncRetVal; //@line 29369
   $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 29370
   HEAP32[$23 >> 2] = $12; //@line 29371
   $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 29372
   HEAP32[$24 >> 2] = $14; //@line 29373
   $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 29374
   HEAP32[$25 >> 2] = $10; //@line 29375
   $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 29376
   HEAP32[$26 >> 2] = $4; //@line 29377
   $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 29378
   HEAP32[$27 >> 2] = $8; //@line 29379
   $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 29380
   HEAP32[$28 >> 2] = $2; //@line 29381
   sp = STACKTOP; //@line 29382
   return;
  }
 }
 $38 = HEAP32[$10 >> 2] | 0; //@line 29386
 if ($38 | 0) {
  $41 = HEAP32[$38 + 8 >> 2] | 0; //@line 29390
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 29391
  FUNCTION_TABLE_vi[$41 & 1023]($8); //@line 29392
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 228; //@line 29395
   $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 29396
   HEAP32[$42 >> 2] = $4; //@line 29397
   $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 29398
   HEAP32[$43 >> 2] = 0; //@line 29399
   $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 29400
   HEAP32[$44 >> 2] = $2; //@line 29401
   sp = STACKTOP; //@line 29402
   return;
  }
  ___async_unwind = 0; //@line 29405
  HEAP32[$ReallocAsyncCtx4 >> 2] = 228; //@line 29406
  $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 29407
  HEAP32[$42 >> 2] = $4; //@line 29408
  $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 29409
  HEAP32[$43 >> 2] = 0; //@line 29410
  $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 29411
  HEAP32[$44 >> 2] = $2; //@line 29412
  sp = STACKTOP; //@line 29413
  return;
 }
 $45 = HEAP32[$4 >> 2] | 0; //@line 29416
 if (!$45) {
  HEAP32[___async_retval >> 2] = 0; //@line 29420
  return;
 }
 $48 = HEAP32[$45 + 8 >> 2] | 0; //@line 29424
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 29425
 FUNCTION_TABLE_vi[$48 & 1023]($2); //@line 29426
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 229; //@line 29429
  $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 29430
  HEAP32[$49 >> 2] = 0; //@line 29431
  sp = STACKTOP; //@line 29432
  return;
 }
 ___async_unwind = 0; //@line 29435
 HEAP32[$ReallocAsyncCtx5 >> 2] = 229; //@line 29436
 $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 29437
 HEAP32[$49 >> 2] = 0; //@line 29438
 sp = STACKTOP; //@line 29439
 return;
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_246($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 16297
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16301
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16303
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16305
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16307
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16309
 $13 = $4 + 12 | 0; //@line 16310
 HEAP32[$4 >> 2] = 192; //@line 16311
 HEAP32[$4 + 4 >> 2] = 0; //@line 16313
 HEAP32[$4 + 8 >> 2] = $6; //@line 16315
 HEAP32[$13 >> 2] = 824; //@line 16316
 $14 = $6 + 2400 | 0; //@line 16317
 if (($14 | 0) == ($4 | 0)) {
  $39 = HEAP32[208] | 0; //@line 16321
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(24) | 0; //@line 16322
  FUNCTION_TABLE_vi[$39 & 1023]($4); //@line 16323
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 195; //@line 16326
   $40 = $ReallocAsyncCtx12 + 4 | 0; //@line 16327
   HEAP32[$40 >> 2] = $8; //@line 16328
   $41 = $ReallocAsyncCtx12 + 8 | 0; //@line 16329
   HEAP32[$41 >> 2] = $6; //@line 16330
   $42 = $ReallocAsyncCtx12 + 12 | 0; //@line 16331
   HEAP32[$42 >> 2] = $4; //@line 16332
   $43 = $ReallocAsyncCtx12 + 16 | 0; //@line 16333
   HEAP32[$43 >> 2] = $10; //@line 16334
   $44 = $ReallocAsyncCtx12 + 20 | 0; //@line 16335
   HEAP32[$44 >> 2] = $12; //@line 16336
   sp = STACKTOP; //@line 16337
   return;
  }
  ___async_unwind = 0; //@line 16340
  HEAP32[$ReallocAsyncCtx12 >> 2] = 195; //@line 16341
  $40 = $ReallocAsyncCtx12 + 4 | 0; //@line 16342
  HEAP32[$40 >> 2] = $8; //@line 16343
  $41 = $ReallocAsyncCtx12 + 8 | 0; //@line 16344
  HEAP32[$41 >> 2] = $6; //@line 16345
  $42 = $ReallocAsyncCtx12 + 12 | 0; //@line 16346
  HEAP32[$42 >> 2] = $4; //@line 16347
  $43 = $ReallocAsyncCtx12 + 16 | 0; //@line 16348
  HEAP32[$43 >> 2] = $10; //@line 16349
  $44 = $ReallocAsyncCtx12 + 20 | 0; //@line 16350
  HEAP32[$44 >> 2] = $12; //@line 16351
  sp = STACKTOP; //@line 16352
  return;
 }
 $16 = $6 + 2412 | 0; //@line 16355
 $17 = HEAP32[$16 >> 2] | 0; //@line 16356
 if (!$17) {
  $30 = HEAP32[207] | 0; //@line 16360
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(32) | 0; //@line 16361
  FUNCTION_TABLE_vii[$30 & 15]($14, $4); //@line 16362
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 194; //@line 16365
   $31 = $ReallocAsyncCtx11 + 4 | 0; //@line 16366
   HEAP32[$31 >> 2] = $8; //@line 16367
   $32 = $ReallocAsyncCtx11 + 8 | 0; //@line 16368
   HEAP32[$32 >> 2] = $13; //@line 16369
   $33 = $ReallocAsyncCtx11 + 12 | 0; //@line 16370
   HEAP32[$33 >> 2] = $16; //@line 16371
   $34 = $ReallocAsyncCtx11 + 16 | 0; //@line 16372
   HEAP32[$34 >> 2] = $6; //@line 16373
   $35 = $ReallocAsyncCtx11 + 20 | 0; //@line 16374
   HEAP32[$35 >> 2] = $4; //@line 16375
   $36 = $ReallocAsyncCtx11 + 24 | 0; //@line 16376
   HEAP32[$36 >> 2] = $10; //@line 16377
   $37 = $ReallocAsyncCtx11 + 28 | 0; //@line 16378
   HEAP32[$37 >> 2] = $12; //@line 16379
   sp = STACKTOP; //@line 16380
   return;
  }
  ___async_unwind = 0; //@line 16383
  HEAP32[$ReallocAsyncCtx11 >> 2] = 194; //@line 16384
  $31 = $ReallocAsyncCtx11 + 4 | 0; //@line 16385
  HEAP32[$31 >> 2] = $8; //@line 16386
  $32 = $ReallocAsyncCtx11 + 8 | 0; //@line 16387
  HEAP32[$32 >> 2] = $13; //@line 16388
  $33 = $ReallocAsyncCtx11 + 12 | 0; //@line 16389
  HEAP32[$33 >> 2] = $16; //@line 16390
  $34 = $ReallocAsyncCtx11 + 16 | 0; //@line 16391
  HEAP32[$34 >> 2] = $6; //@line 16392
  $35 = $ReallocAsyncCtx11 + 20 | 0; //@line 16393
  HEAP32[$35 >> 2] = $4; //@line 16394
  $36 = $ReallocAsyncCtx11 + 24 | 0; //@line 16395
  HEAP32[$36 >> 2] = $10; //@line 16396
  $37 = $ReallocAsyncCtx11 + 28 | 0; //@line 16397
  HEAP32[$37 >> 2] = $12; //@line 16398
  sp = STACKTOP; //@line 16399
  return;
 } else {
  $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 16403
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(36) | 0; //@line 16404
  FUNCTION_TABLE_vi[$20 & 1023]($14); //@line 16405
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 193; //@line 16408
   $21 = $ReallocAsyncCtx10 + 4 | 0; //@line 16409
   HEAP32[$21 >> 2] = $13; //@line 16410
   $22 = $ReallocAsyncCtx10 + 8 | 0; //@line 16411
   HEAP32[$22 >> 2] = $8; //@line 16412
   $23 = $ReallocAsyncCtx10 + 12 | 0; //@line 16413
   HEAP32[$23 >> 2] = $16; //@line 16414
   $24 = $ReallocAsyncCtx10 + 16 | 0; //@line 16415
   HEAP32[$24 >> 2] = $6; //@line 16416
   $25 = $ReallocAsyncCtx10 + 20 | 0; //@line 16417
   HEAP32[$25 >> 2] = $14; //@line 16418
   $26 = $ReallocAsyncCtx10 + 24 | 0; //@line 16419
   HEAP32[$26 >> 2] = $4; //@line 16420
   $27 = $ReallocAsyncCtx10 + 28 | 0; //@line 16421
   HEAP32[$27 >> 2] = $10; //@line 16422
   $28 = $ReallocAsyncCtx10 + 32 | 0; //@line 16423
   HEAP32[$28 >> 2] = $12; //@line 16424
   sp = STACKTOP; //@line 16425
   return;
  }
  ___async_unwind = 0; //@line 16428
  HEAP32[$ReallocAsyncCtx10 >> 2] = 193; //@line 16429
  $21 = $ReallocAsyncCtx10 + 4 | 0; //@line 16430
  HEAP32[$21 >> 2] = $13; //@line 16431
  $22 = $ReallocAsyncCtx10 + 8 | 0; //@line 16432
  HEAP32[$22 >> 2] = $8; //@line 16433
  $23 = $ReallocAsyncCtx10 + 12 | 0; //@line 16434
  HEAP32[$23 >> 2] = $16; //@line 16435
  $24 = $ReallocAsyncCtx10 + 16 | 0; //@line 16436
  HEAP32[$24 >> 2] = $6; //@line 16437
  $25 = $ReallocAsyncCtx10 + 20 | 0; //@line 16438
  HEAP32[$25 >> 2] = $14; //@line 16439
  $26 = $ReallocAsyncCtx10 + 24 | 0; //@line 16440
  HEAP32[$26 >> 2] = $4; //@line 16441
  $27 = $ReallocAsyncCtx10 + 28 | 0; //@line 16442
  HEAP32[$27 >> 2] = $10; //@line 16443
  $28 = $ReallocAsyncCtx10 + 32 | 0; //@line 16444
  HEAP32[$28 >> 2] = $12; //@line 16445
  sp = STACKTOP; //@line 16446
  return;
 }
}
function _mbedtls_cipher_cmac_finish__async_cb_283($0) {
 $0 = $0 | 0;
 var $$01720$i45 = 0, $$019$i = 0, $$019$i42 = 0, $$021$i44 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $37 = 0, $4 = 0, $40 = 0, $53 = 0, $56 = 0, $6 = 0, $64 = 0, $65 = 0, $78 = 0, $8 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $ReallocAsyncCtx5 = 0, sp = 0, $64$looptemp = 0;
 sp = STACKTOP; //@line 18521
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18523
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18525
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18527
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18529
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18531
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18533
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18535
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 18537
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 18539
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 18541
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 18543
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 18545
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 18547
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 18549
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 18551
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 18553
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 18555
 L2 : do {
  if (!(HEAP32[___async_retval >> 2] | 0)) {
   switch ($30 | 0) {
   case 16:
    {
     $$019$i42 = 135; //@line 18563
     break;
    }
   case 8:
    {
     $$019$i42 = 27; //@line 18567
     break;
    }
   default:
    {
     break L2;
    }
   }
   $37 = $30 + -1 | 0; //@line 18574
   $$01720$i45 = 0; //@line 18575
   $$021$i44 = $37; //@line 18575
   while (1) {
    $40 = HEAPU8[$34 + $$021$i44 >> 0] | 0; //@line 18579
    HEAP8[$24 + $$021$i44 >> 0] = $40 << 1 | $$01720$i45; //@line 18584
    if (($$021$i44 | 0) > 0) {
     $$01720$i45 = $40 >>> 7; //@line 18589
     $$021$i44 = $$021$i44 + -1 | 0; //@line 18589
    } else {
     break;
    }
   }
   $53 = $24 + $37 | 0; //@line 18599
   $56 = $$019$i42 & 0 - ((HEAPU8[$12 >> 0] | 0) >>> 7) ^ (HEAPU8[$53 >> 0] | 0); //@line 18602
   HEAP8[$53 >> 0] = $56; //@line 18604
   switch ($30 | 0) {
   case 16:
    {
     $$019$i = 135; //@line 18607
     break;
    }
   case 8:
    {
     $$019$i = 27; //@line 18611
     break;
    }
   default:
    {
     break L2;
    }
   }
   HEAP8[$8 + $37 >> 0] = $56 << 1; //@line 18621
   if (($37 | 0) > 0) {
    $64 = $56; //@line 18625
    $65 = $30 + -2 | 0; //@line 18625
    while (1) {
     $64$looptemp = $64;
     $64 = HEAPU8[$24 + $65 >> 0] | 0; //@line 18630
     HEAP8[$8 + $65 >> 0] = $64 << 1 | $64$looptemp >>> 7; //@line 18635
     if (($65 | 0) <= 0) {
      break;
     } else {
      $65 = $65 + -1 | 0; //@line 18639
     }
    }
   }
   $78 = $8 + $37 | 0; //@line 18650
   HEAP8[$78 >> 0] = $$019$i & 0 - ((HEAPU8[$10 >> 0] | 0) >>> 7) ^ (HEAPU8[$78 >> 0] | 0); //@line 18655
  }
 } while (0);
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(64) | 0; //@line 18658
 _mbedtls_platform_zeroize($12, 16); //@line 18659
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 603; //@line 18662
  $83 = $ReallocAsyncCtx5 + 4 | 0; //@line 18663
  HEAP32[$83 >> 2] = $2; //@line 18664
  $84 = $ReallocAsyncCtx5 + 8 | 0; //@line 18665
  HEAP32[$84 >> 2] = $4; //@line 18666
  $85 = $ReallocAsyncCtx5 + 12 | 0; //@line 18667
  HEAP32[$85 >> 2] = $6; //@line 18668
  $86 = $ReallocAsyncCtx5 + 16 | 0; //@line 18669
  HEAP32[$86 >> 2] = $8; //@line 18670
  $87 = $ReallocAsyncCtx5 + 20 | 0; //@line 18671
  HEAP32[$87 >> 2] = $14; //@line 18672
  $88 = $ReallocAsyncCtx5 + 24 | 0; //@line 18673
  HEAP32[$88 >> 2] = $16; //@line 18674
  $89 = $ReallocAsyncCtx5 + 28 | 0; //@line 18675
  HEAP32[$89 >> 2] = $18; //@line 18676
  $90 = $ReallocAsyncCtx5 + 32 | 0; //@line 18677
  HEAP32[$90 >> 2] = $10; //@line 18678
  $91 = $ReallocAsyncCtx5 + 36 | 0; //@line 18679
  HEAP32[$91 >> 2] = $20; //@line 18680
  $92 = $ReallocAsyncCtx5 + 40 | 0; //@line 18681
  HEAP32[$92 >> 2] = $22; //@line 18682
  $93 = $ReallocAsyncCtx5 + 44 | 0; //@line 18683
  HEAP32[$93 >> 2] = $24; //@line 18684
  $94 = $ReallocAsyncCtx5 + 48 | 0; //@line 18685
  HEAP32[$94 >> 2] = $26; //@line 18686
  $95 = $ReallocAsyncCtx5 + 52 | 0; //@line 18687
  HEAP32[$95 >> 2] = $28; //@line 18688
  $96 = $ReallocAsyncCtx5 + 56 | 0; //@line 18689
  HEAP32[$96 >> 2] = $32; //@line 18690
  $97 = $ReallocAsyncCtx5 + 60 | 0; //@line 18691
  HEAP32[$97 >> 2] = $12; //@line 18692
  sp = STACKTOP; //@line 18693
  return;
 }
 ___async_unwind = 0; //@line 18696
 HEAP32[$ReallocAsyncCtx5 >> 2] = 603; //@line 18697
 $83 = $ReallocAsyncCtx5 + 4 | 0; //@line 18698
 HEAP32[$83 >> 2] = $2; //@line 18699
 $84 = $ReallocAsyncCtx5 + 8 | 0; //@line 18700
 HEAP32[$84 >> 2] = $4; //@line 18701
 $85 = $ReallocAsyncCtx5 + 12 | 0; //@line 18702
 HEAP32[$85 >> 2] = $6; //@line 18703
 $86 = $ReallocAsyncCtx5 + 16 | 0; //@line 18704
 HEAP32[$86 >> 2] = $8; //@line 18705
 $87 = $ReallocAsyncCtx5 + 20 | 0; //@line 18706
 HEAP32[$87 >> 2] = $14; //@line 18707
 $88 = $ReallocAsyncCtx5 + 24 | 0; //@line 18708
 HEAP32[$88 >> 2] = $16; //@line 18709
 $89 = $ReallocAsyncCtx5 + 28 | 0; //@line 18710
 HEAP32[$89 >> 2] = $18; //@line 18711
 $90 = $ReallocAsyncCtx5 + 32 | 0; //@line 18712
 HEAP32[$90 >> 2] = $10; //@line 18713
 $91 = $ReallocAsyncCtx5 + 36 | 0; //@line 18714
 HEAP32[$91 >> 2] = $20; //@line 18715
 $92 = $ReallocAsyncCtx5 + 40 | 0; //@line 18716
 HEAP32[$92 >> 2] = $22; //@line 18717
 $93 = $ReallocAsyncCtx5 + 44 | 0; //@line 18718
 HEAP32[$93 >> 2] = $24; //@line 18719
 $94 = $ReallocAsyncCtx5 + 48 | 0; //@line 18720
 HEAP32[$94 >> 2] = $26; //@line 18721
 $95 = $ReallocAsyncCtx5 + 52 | 0; //@line 18722
 HEAP32[$95 >> 2] = $28; //@line 18723
 $96 = $ReallocAsyncCtx5 + 56 | 0; //@line 18724
 HEAP32[$96 >> 2] = $32; //@line 18725
 $97 = $ReallocAsyncCtx5 + 60 | 0; //@line 18726
 HEAP32[$97 >> 2] = $12; //@line 18727
 sp = STACKTOP; //@line 18728
 return;
}
function __ZN7LoRaMac24handle_join_accept_frameEPKht($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $118 = 0, $12 = 0, $128 = 0, $13 = 0, $132 = 0, $14 = 0, $15 = 0, $16 = 0, $29 = 0, $3 = 0, $31 = 0, $32 = 0, $7 = 0, $73 = 0, $75 = 0, $78 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 12532
 STACKTOP = STACKTOP + 16 | 0; //@line 12533
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 12533
 $3 = sp; //@line 12534
 HEAP32[$3 >> 2] = 0; //@line 12535
 HEAP8[$0 + 2102 >> 0] = HEAP8[$0 + 1701 >> 0] | 0; //@line 12539
 $7 = $0 + 756 | 0; //@line 12540
 $9 = $2 & 65535; //@line 12542
 $12 = $0 + 1712 | 0; //@line 12545
 $13 = HEAP32[$12 >> 2] | 0; //@line 12546
 $14 = $0 + 1442 | 0; //@line 12547
 $15 = $0 + 1443 | 0; //@line 12548
 $AsyncCtx = _emscripten_alloc_async_context(40, sp) | 0; //@line 12549
 $16 = __ZN13LoRaMacCrypto18decrypt_join_frameEPKhtS1_jPh($7, $1 + 1 | 0, $9 + 65535 & 65535, $13, 128, $15) | 0; //@line 12550
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 390; //@line 12553
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 12555
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 12557
  HEAP32[$AsyncCtx + 12 >> 2] = $9; //@line 12559
  HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 12561
  HEAP32[$AsyncCtx + 20 >> 2] = $14; //@line 12563
  HEAP32[$AsyncCtx + 24 >> 2] = $12; //@line 12565
  HEAP32[$AsyncCtx + 28 >> 2] = $7; //@line 12567
  HEAP32[$AsyncCtx + 32 >> 2] = $3; //@line 12569
  HEAP32[$AsyncCtx + 36 >> 2] = $15; //@line 12571
  sp = STACKTOP; //@line 12572
  STACKTOP = sp; //@line 12573
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 12575
 if ($16 | 0) {
  HEAP32[$0 + 2092 >> 2] = 13; //@line 12579
  STACKTOP = sp; //@line 12580
  return;
 }
 HEAP8[$14 >> 0] = HEAP8[$1 >> 0] | 0; //@line 12583
 $29 = $9 + -4 | 0; //@line 12584
 $31 = HEAP32[$12 >> 2] | 0; //@line 12586
 $AsyncCtx7 = _emscripten_alloc_async_context(36, sp) | 0; //@line 12587
 $32 = __ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj($7, $14, $29 & 65535, $31, 128, $3) | 0; //@line 12588
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 391; //@line 12591
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 12593
  HEAP32[$AsyncCtx7 + 8 >> 2] = $29; //@line 12595
  HEAP32[$AsyncCtx7 + 12 >> 2] = $9; //@line 12597
  HEAP32[$AsyncCtx7 + 16 >> 2] = $3; //@line 12599
  HEAP32[$AsyncCtx7 + 20 >> 2] = $3; //@line 12601
  HEAP32[$AsyncCtx7 + 24 >> 2] = $12; //@line 12603
  HEAP32[$AsyncCtx7 + 28 >> 2] = $7; //@line 12605
  HEAP32[$AsyncCtx7 + 32 >> 2] = $15; //@line 12607
  sp = STACKTOP; //@line 12608
  STACKTOP = sp; //@line 12609
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 12611
 if ($32 | 0) {
  HEAP32[$0 + 2092 >> 2] = 13; //@line 12615
  STACKTOP = sp; //@line 12616
  return;
 }
 if (((HEAPU8[$9 + -3 + ($0 + 1442) >> 0] | 0) << 8 | (HEAPU8[$0 + 1442 + $29 >> 0] | 0) | (HEAPU8[$9 + -2 + ($0 + 1442) >> 0] | 0) << 16 | (HEAPU8[$9 + -1 + ($0 + 1442) >> 0] | 0) << 24 | 0) != (HEAP32[$3 >> 2] | 0)) {
  HEAP32[$0 + 2092 >> 2] = 7; //@line 12643
  STACKTOP = sp; //@line 12644
  return;
 }
 $AsyncCtx15 = _emscripten_alloc_async_context(28, sp) | 0; //@line 12647
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1836 | 0); //@line 12648
 if (___async) {
  HEAP32[$AsyncCtx15 >> 2] = 392; //@line 12651
  HEAP32[$AsyncCtx15 + 4 >> 2] = $12; //@line 12653
  HEAP32[$AsyncCtx15 + 8 >> 2] = $0; //@line 12655
  HEAP32[$AsyncCtx15 + 12 >> 2] = $7; //@line 12657
  HEAP32[$AsyncCtx15 + 16 >> 2] = $15; //@line 12659
  HEAP32[$AsyncCtx15 + 20 >> 2] = $9; //@line 12661
  HEAP32[$AsyncCtx15 + 24 >> 2] = $3; //@line 12663
  sp = STACKTOP; //@line 12664
  STACKTOP = sp; //@line 12665
  return;
 }
 _emscripten_free_async_context($AsyncCtx15 | 0); //@line 12667
 $73 = HEAP32[$12 >> 2] | 0; //@line 12668
 $75 = HEAP16[$0 + 1748 >> 1] | 0; //@line 12670
 $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 12673
 $78 = __ZN13LoRaMacCrypto28compute_skeys_for_join_frameEPKhjS1_tPhS2_($7, $73, 128, $15, $75, $0 + 1716 | 0, $0 + 1732 | 0) | 0; //@line 12674
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 393; //@line 12677
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 12679
  HEAP32[$AsyncCtx3 + 8 >> 2] = $9; //@line 12681
  HEAP32[$AsyncCtx3 + 12 >> 2] = $3; //@line 12683
  sp = STACKTOP; //@line 12684
  STACKTOP = sp; //@line 12685
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 12687
 if ($78 | 0) {
  HEAP32[$0 + 2092 >> 2] = 13; //@line 12691
  STACKTOP = sp; //@line 12692
  return;
 }
 HEAP32[$0 + 1752 >> 2] = (HEAPU8[$0 + 1448 >> 0] | 0) << 16 | ((HEAPU8[$0 + 1447 >> 0] | 0) << 8 | (HEAPU8[$0 + 1446 >> 0] | 0)); //@line 12708
 HEAP32[$0 + 1756 >> 2] = (HEAPU8[$0 + 1452 >> 0] | 0) << 24 | ((HEAPU8[$0 + 1451 >> 0] | 0) << 16 | ((HEAPU8[$0 + 1450 >> 0] | 0) << 8 | (HEAPU8[$0 + 1449 >> 0] | 0))); //@line 12728
 $118 = HEAP8[$0 + 1453 >> 0] | 0; //@line 12730
 HEAP8[$0 + 1909 >> 0] = ($118 & 255) >>> 4 & 7; //@line 12736
 HEAP8[$0 + 1916 >> 0] = $118 & 15; //@line 12739
 $128 = HEAP8[$0 + 1454 >> 0] & 15; //@line 12742
 $132 = $128 << 24 >> 24 == 0 ? 1e3 : ($128 & 255) * 1e3 | 0; //@line 12747
 HEAP32[$0 + 1892 >> 2] = $132; //@line 12748
 HEAP32[$0 + 1896 >> 2] = $132 + 1e3; //@line 12751
 $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12756
 __ZN7LoRaPHY13apply_cf_listEPKhh($0 + 4 | 0, $0 + 1455 | 0, $9 + 239 & 255); //@line 12757
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 394; //@line 12760
  HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 12762
  HEAP32[$AsyncCtx11 + 8 >> 2] = $3; //@line 12764
  sp = STACKTOP; //@line 12765
  STACKTOP = sp; //@line 12766
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 12768
 HEAP32[$0 + 2092 >> 2] = 0; //@line 12770
 HEAP8[$0 + 2376 >> 0] = 1; //@line 12772
 HEAP32[$0 + 1760 >> 2] = 0; //@line 12774
 HEAP8[$0 + 1184 >> 0] = 0; //@line 12776
 STACKTOP = sp; //@line 12777
 return;
}
function _mbedtls_gcm_update__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$061 = 0, $$163 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $35 = 0, $36 = 0, $39 = 0, $4 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $67 = 0, $68 = 0, $75 = 0, $8 = 0, $84 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 21558
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21560
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21562
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21564
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21566
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21568
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21570
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21572
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 21574
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 21576
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 21578
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 21580
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 21582
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 21584
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 21586
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 21588
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 21590
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 21592
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 21595
  $84 = ___async_retval; //@line 21596
  HEAP32[$84 >> 2] = $$0; //@line 21597
  return;
 }
 if ($2 | 0) {
  $$163 = 0; //@line 21602
  do {
   $67 = $8 + 376 + $$163 | 0; //@line 21606
   $68 = $14 + $$163 | 0; //@line 21607
   if (!(HEAP32[$18 >> 2] | 0)) {
    HEAP8[$67 >> 0] = HEAP8[$67 >> 0] ^ HEAP8[$68 >> 0]; //@line 21612
   }
   $75 = HEAP8[$68 >> 0] ^ HEAP8[$20 + $$163 >> 0]; //@line 21617
   HEAP8[$16 + $$163 >> 0] = $75; //@line 21619
   if ((HEAP32[$18 >> 2] | 0) == 1) {
    HEAP8[$67 >> 0] = HEAP8[$67 >> 0] ^ $75; //@line 21625
   }
   $$163 = $$163 + 1 | 0; //@line 21627
  } while ($$163 >>> 0 < $2 >>> 0);
 }
 _gcm_mult($8, $10, $10); //@line 21636
 $35 = $12 - $2 | 0; //@line 21637
 $51 = $14 + $2 | 0; //@line 21638
 $53 = $16 + $2 | 0; //@line 21639
 if (!$35) {
  $$0 = 0; //@line 21642
  $84 = ___async_retval; //@line 21643
  HEAP32[$84 >> 2] = $$0; //@line 21644
  return;
 }
 $36 = $35 >>> 0 < 16 ? $35 : 16; //@line 21648
 $$061 = 16; //@line 21649
 do {
  if ($$061 >>> 0 <= 12) {
   break;
  }
  $$061 = $$061 + -1 | 0; //@line 21655
  $39 = $8 + 360 + $$061 | 0; //@line 21656
  $41 = (HEAP8[$39 >> 0] | 0) + 1 << 24 >> 24; //@line 21658
  HEAP8[$39 >> 0] = $41; //@line 21659
 } while (!($41 << 24 >> 24));
 $ReallocAsyncCtx = _emscripten_realloc_async_context(68) | 0; //@line 21667
 $43 = _mbedtls_cipher_update($28, $30, 16, $6, $32) | 0; //@line 21668
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 613; //@line 21671
  $44 = $ReallocAsyncCtx + 4 | 0; //@line 21672
  HEAP32[$44 >> 2] = $36; //@line 21673
  $45 = $ReallocAsyncCtx + 8 | 0; //@line 21674
  HEAP32[$45 >> 2] = $4; //@line 21675
  $46 = $ReallocAsyncCtx + 12 | 0; //@line 21676
  HEAP32[$46 >> 2] = $6; //@line 21677
  $47 = $ReallocAsyncCtx + 16 | 0; //@line 21678
  HEAP32[$47 >> 2] = $8; //@line 21679
  $48 = $ReallocAsyncCtx + 20 | 0; //@line 21680
  HEAP32[$48 >> 2] = $10; //@line 21681
  $49 = $ReallocAsyncCtx + 24 | 0; //@line 21682
  HEAP32[$49 >> 2] = $35; //@line 21683
  $50 = $ReallocAsyncCtx + 28 | 0; //@line 21684
  HEAP32[$50 >> 2] = $51; //@line 21685
  $52 = $ReallocAsyncCtx + 32 | 0; //@line 21686
  HEAP32[$52 >> 2] = $53; //@line 21687
  $54 = $ReallocAsyncCtx + 36 | 0; //@line 21688
  HEAP32[$54 >> 2] = $18; //@line 21689
  $55 = $ReallocAsyncCtx + 40 | 0; //@line 21690
  HEAP32[$55 >> 2] = $20; //@line 21691
  $56 = $ReallocAsyncCtx + 44 | 0; //@line 21692
  HEAP32[$56 >> 2] = $22; //@line 21693
  $57 = $ReallocAsyncCtx + 48 | 0; //@line 21694
  HEAP32[$57 >> 2] = $24; //@line 21695
  $58 = $ReallocAsyncCtx + 52 | 0; //@line 21696
  HEAP32[$58 >> 2] = $26; //@line 21697
  $59 = $ReallocAsyncCtx + 56 | 0; //@line 21698
  HEAP32[$59 >> 2] = $28; //@line 21699
  $60 = $ReallocAsyncCtx + 60 | 0; //@line 21700
  HEAP32[$60 >> 2] = $30; //@line 21701
  $61 = $ReallocAsyncCtx + 64 | 0; //@line 21702
  HEAP32[$61 >> 2] = $32; //@line 21703
  sp = STACKTOP; //@line 21704
  return;
 }
 HEAP32[___async_retval >> 2] = $43; //@line 21708
 ___async_unwind = 0; //@line 21709
 HEAP32[$ReallocAsyncCtx >> 2] = 613; //@line 21710
 $44 = $ReallocAsyncCtx + 4 | 0; //@line 21711
 HEAP32[$44 >> 2] = $36; //@line 21712
 $45 = $ReallocAsyncCtx + 8 | 0; //@line 21713
 HEAP32[$45 >> 2] = $4; //@line 21714
 $46 = $ReallocAsyncCtx + 12 | 0; //@line 21715
 HEAP32[$46 >> 2] = $6; //@line 21716
 $47 = $ReallocAsyncCtx + 16 | 0; //@line 21717
 HEAP32[$47 >> 2] = $8; //@line 21718
 $48 = $ReallocAsyncCtx + 20 | 0; //@line 21719
 HEAP32[$48 >> 2] = $10; //@line 21720
 $49 = $ReallocAsyncCtx + 24 | 0; //@line 21721
 HEAP32[$49 >> 2] = $35; //@line 21722
 $50 = $ReallocAsyncCtx + 28 | 0; //@line 21723
 HEAP32[$50 >> 2] = $51; //@line 21724
 $52 = $ReallocAsyncCtx + 32 | 0; //@line 21725
 HEAP32[$52 >> 2] = $53; //@line 21726
 $54 = $ReallocAsyncCtx + 36 | 0; //@line 21727
 HEAP32[$54 >> 2] = $18; //@line 21728
 $55 = $ReallocAsyncCtx + 40 | 0; //@line 21729
 HEAP32[$55 >> 2] = $20; //@line 21730
 $56 = $ReallocAsyncCtx + 44 | 0; //@line 21731
 HEAP32[$56 >> 2] = $22; //@line 21732
 $57 = $ReallocAsyncCtx + 48 | 0; //@line 21733
 HEAP32[$57 >> 2] = $24; //@line 21734
 $58 = $ReallocAsyncCtx + 52 | 0; //@line 21735
 HEAP32[$58 >> 2] = $26; //@line 21736
 $59 = $ReallocAsyncCtx + 56 | 0; //@line 21737
 HEAP32[$59 >> 2] = $28; //@line 21738
 $60 = $ReallocAsyncCtx + 60 | 0; //@line 21739
 HEAP32[$60 >> 2] = $30; //@line 21740
 $61 = $ReallocAsyncCtx + 64 | 0; //@line 21741
 HEAP32[$61 >> 2] = $32; //@line 21742
 sp = STACKTOP; //@line 21743
 return;
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $26 = 0, $33 = 0, $38 = 0, $41 = 0, $46 = 0, $52 = 0, $53 = 0, $56 = 0, $59 = 0, $62 = 0, $65 = 0, $67 = 0, $70 = 0, $73 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 1448
 STACKTOP = STACKTOP + 32 | 0; //@line 1449
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 1449
 $1 = sp + 8 | 0; //@line 1451
 _mbed_tracef(16, 11040, 11292, sp); //@line 1452
 $2 = $0 + 688 | 0; //@line 1453
 switch (HEAP8[$2 >> 0] | 0) {
 case 1:
  {
   do {
    if (!(HEAP8[$0 + 689 >> 0] | 0)) {
     HEAP8[$0 + 732 >> 0] = 0; //@line 1463
     HEAP8[$0 + 733 >> 0] = 0; //@line 1465
     HEAP16[$0 + 744 >> 1] = 0; //@line 1467
     HEAP16[$0 + 742 >> 1] = 0; //@line 1469
     if (!(HEAP8[$0 + 722 >> 0] | 0)) {
      HEAP8[$2 >> 0] = 0; //@line 1474
      $14 = $0 + 1176 | 0; //@line 1475
      $15 = $1 + 12 | 0; //@line 1476
      HEAP32[$1 >> 2] = 55; //@line 1477
      HEAP32[$1 + 4 >> 2] = 0; //@line 1479
      HEAP32[$1 + 8 >> 2] = $0; //@line 1481
      HEAP32[$15 >> 2] = 584; //@line 1482
      $18 = ___muldi3(HEAP32[$0 + 728 >> 2] | 0, 0, 1e3, 0) | 0; //@line 1485
      $19 = tempRet0; //@line 1486
      $20 = $0 + 1216 | 0; //@line 1487
      if (($20 | 0) != ($1 | 0)) {
       $22 = $0 + 1228 | 0; //@line 1490
       $23 = HEAP32[$22 >> 2] | 0; //@line 1491
       do {
        if ($23 | 0) {
         $26 = HEAP32[$23 + 8 >> 2] | 0; //@line 1496
         $AsyncCtx = _emscripten_alloc_async_context(40, sp) | 0; //@line 1497
         FUNCTION_TABLE_vi[$26 & 1023]($20); //@line 1498
         if (___async) {
          HEAP32[$AsyncCtx >> 2] = 86; //@line 1501
          HEAP32[$AsyncCtx + 4 >> 2] = $15; //@line 1503
          HEAP32[$AsyncCtx + 8 >> 2] = $22; //@line 1505
          HEAP32[$AsyncCtx + 12 >> 2] = $20; //@line 1507
          HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 1509
          HEAP32[$AsyncCtx + 20 >> 2] = $14; //@line 1511
          $33 = $AsyncCtx + 24 | 0; //@line 1513
          HEAP32[$33 >> 2] = $18; //@line 1515
          HEAP32[$33 + 4 >> 2] = $19; //@line 1518
          HEAP32[$AsyncCtx + 32 >> 2] = $0; //@line 1520
          sp = STACKTOP; //@line 1521
          STACKTOP = sp; //@line 1522
          return;
         } else {
          _emscripten_free_async_context($AsyncCtx | 0); //@line 1524
          break;
         }
        }
       } while (0);
       $38 = HEAP32[$15 >> 2] | 0; //@line 1529
       do {
        if (!$38) {
         $52 = 0; //@line 1533
        } else {
         $41 = HEAP32[$38 + 4 >> 2] | 0; //@line 1536
         $AsyncCtx2 = _emscripten_alloc_async_context(32, sp) | 0; //@line 1537
         FUNCTION_TABLE_vii[$41 & 15]($20, $1); //@line 1538
         if (___async) {
          HEAP32[$AsyncCtx2 >> 2] = 87; //@line 1541
          HEAP32[$AsyncCtx2 + 4 >> 2] = $15; //@line 1543
          HEAP32[$AsyncCtx2 + 8 >> 2] = $22; //@line 1545
          HEAP32[$AsyncCtx2 + 12 >> 2] = $14; //@line 1547
          $46 = $AsyncCtx2 + 16 | 0; //@line 1549
          HEAP32[$46 >> 2] = $18; //@line 1551
          HEAP32[$46 + 4 >> 2] = $19; //@line 1554
          HEAP32[$AsyncCtx2 + 24 >> 2] = $0; //@line 1556
          HEAP32[$AsyncCtx2 + 28 >> 2] = $1; //@line 1558
          sp = STACKTOP; //@line 1559
          STACKTOP = sp; //@line 1560
          return;
         } else {
          _emscripten_free_async_context($AsyncCtx2 | 0); //@line 1562
          $52 = HEAP32[$15 >> 2] | 0; //@line 1564
          break;
         }
        }
       } while (0);
       HEAP32[$22 >> 2] = $52; //@line 1569
      }
      __ZN4mbed6Ticker5setupEy($14, $18, $19); //@line 1571
      $53 = HEAP32[$15 >> 2] | 0; //@line 1572
      if ($53 | 0) {
       $56 = HEAP32[$53 + 8 >> 2] | 0; //@line 1576
       $AsyncCtx6 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1577
       FUNCTION_TABLE_vi[$56 & 1023]($1); //@line 1578
       if (___async) {
        HEAP32[$AsyncCtx6 >> 2] = 88; //@line 1581
        HEAP32[$AsyncCtx6 + 4 >> 2] = $0; //@line 1583
        sp = STACKTOP; //@line 1584
        STACKTOP = sp; //@line 1585
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx6 | 0); //@line 1587
        break;
       }
      }
     }
    }
   } while (0);
   $59 = HEAP32[$0 + 788 >> 2] | 0; //@line 1595
   if (!$59) {
    STACKTOP = sp; //@line 1598
    return;
   }
   $62 = HEAP32[$59 + 60 >> 2] | 0; //@line 1601
   if (!$62) {
    STACKTOP = sp; //@line 1604
    return;
   }
   $65 = HEAP32[$62 >> 2] | 0; //@line 1607
   $AsyncCtx9 = _emscripten_alloc_async_context(4, sp) | 0; //@line 1608
   FUNCTION_TABLE_vi[$65 & 1023]($59 + 48 | 0); //@line 1609
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 89; //@line 1612
    sp = STACKTOP; //@line 1613
    STACKTOP = sp; //@line 1614
    return;
   }
   _emscripten_free_async_context($AsyncCtx9 | 0); //@line 1616
   STACKTOP = sp; //@line 1617
   return;
  }
 case 2:
  {
   HEAP8[$2 >> 0] = 0; //@line 1621
   $67 = HEAP32[$0 + 788 >> 2] | 0; //@line 1623
   if (!$67) {
    STACKTOP = sp; //@line 1626
    return;
   }
   $70 = HEAP32[$67 + 28 >> 2] | 0; //@line 1629
   if (!$70) {
    STACKTOP = sp; //@line 1632
    return;
   }
   $73 = HEAP32[$70 >> 2] | 0; //@line 1635
   $AsyncCtx12 = _emscripten_alloc_async_context(4, sp) | 0; //@line 1636
   FUNCTION_TABLE_vi[$73 & 1023]($67 + 16 | 0); //@line 1637
   if (___async) {
    HEAP32[$AsyncCtx12 >> 2] = 90; //@line 1640
    sp = STACKTOP; //@line 1641
    STACKTOP = sp; //@line 1642
    return;
   }
   _emscripten_free_async_context($AsyncCtx12 | 0); //@line 1644
   STACKTOP = sp; //@line 1645
   return;
  }
 default:
  {
   STACKTOP = sp; //@line 1649
   return;
  }
 }
}
function _mbedtls_internal_aes_decrypt($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$in = 0, $$0136 = 0, $$0137 = 0, $$0138 = 0, $$0139 = 0, $$0140 = 0, $110 = 0, $130 = 0, $150 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $230 = 0, $250 = 0, $261 = 0, $268 = 0, $274 = 0, $276 = 0, $281 = 0, $288 = 0, $295 = 0, $301 = 0, $303 = 0, $308 = 0, $315 = 0, $322 = 0, $328 = 0, $329 = 0, $334 = 0, $341 = 0, $348 = 0, $354 = 0, $4 = 0;
 $4 = HEAP32[$0 + 4 >> 2] | 0; //@line 1258
 $$0$in = HEAP32[$0 >> 2] >> 1; //@line 1344
 $$0136 = $4 + 16 | 0; //@line 1344
 $$0137 = ((HEAPU8[$1 + 1 >> 0] | 0) << 8 | (HEAPU8[$1 >> 0] | 0) | (HEAPU8[$1 + 2 >> 0] | 0) << 16 | (HEAPU8[$1 + 3 >> 0] | 0) << 24) ^ HEAP32[$4 >> 2]; //@line 1344
 $$0138 = ((HEAPU8[$1 + 5 >> 0] | 0) << 8 | (HEAPU8[$1 + 4 >> 0] | 0) | (HEAPU8[$1 + 6 >> 0] | 0) << 16 | (HEAPU8[$1 + 7 >> 0] | 0) << 24) ^ HEAP32[$4 + 4 >> 2]; //@line 1344
 $$0139 = ((HEAPU8[$1 + 13 >> 0] | 0) << 8 | (HEAPU8[$1 + 12 >> 0] | 0) | (HEAPU8[$1 + 14 >> 0] | 0) << 16 | (HEAPU8[$1 + 15 >> 0] | 0) << 24) ^ HEAP32[$4 + 12 >> 2]; //@line 1344
 $$0140 = ((HEAPU8[$1 + 9 >> 0] | 0) << 8 | (HEAPU8[$1 + 8 >> 0] | 0) | (HEAPU8[$1 + 10 >> 0] | 0) << 16 | (HEAPU8[$1 + 11 >> 0] | 0) << 24) ^ HEAP32[$4 + 8 >> 2]; //@line 1344
 while (1) {
  $110 = HEAP32[1300 + (($$0137 & 255) << 2) >> 2] ^ HEAP32[$$0136 >> 2] ^ HEAP32[2324 + (($$0139 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($$0140 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($$0138 >>> 24 << 2) >> 2]; //@line 1366
  $130 = HEAP32[1300 + (($$0138 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 4 >> 2] ^ HEAP32[2324 + (($$0137 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($$0139 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($$0140 >>> 24 << 2) >> 2]; //@line 1386
  $150 = HEAP32[1300 + (($$0140 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 8 >> 2] ^ HEAP32[2324 + (($$0138 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($$0137 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($$0139 >>> 24 << 2) >> 2]; //@line 1406
  $170 = HEAP32[1300 + (($$0139 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 12 >> 2] ^ HEAP32[2324 + (($$0140 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($$0138 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($$0137 >>> 24 << 2) >> 2]; //@line 1426
  $171 = $$0136 + 20 | 0; //@line 1427
  $172 = HEAP32[$$0136 + 16 >> 2] | 0; //@line 1428
  $173 = $110 & 255; //@line 1429
  if (($$0$in | 0) <= 1) {
   break;
  }
  $230 = HEAP32[1300 + (($150 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 24 >> 2] ^ HEAP32[2324 + (($130 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($110 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($170 >>> 24 << 2) >> 2]; //@line 1490
  $250 = HEAP32[1300 + (($170 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 28 >> 2] ^ HEAP32[2324 + (($150 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($130 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($110 >>> 24 << 2) >> 2]; //@line 1510
  $$0$in = $$0$in + -1 | 0; //@line 1511
  $$0136 = $$0136 + 32 | 0; //@line 1511
  $$0137 = HEAP32[1300 + ($173 << 2) >> 2] ^ $172 ^ HEAP32[2324 + (($170 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($150 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($130 >>> 24 << 2) >> 2]; //@line 1511
  $$0138 = HEAP32[1300 + (($130 & 255) << 2) >> 2] ^ HEAP32[$171 >> 2] ^ HEAP32[2324 + (($110 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($170 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($150 >>> 24 << 2) >> 2]; //@line 1511
  $$0139 = $250; //@line 1511
  $$0140 = $230; //@line 1511
 }
 $261 = (HEAPU8[14026 + ($170 >>> 8 & 255) >> 0] | 0) << 8 ^ $172; //@line 1523
 $268 = (HEAPU8[14026 + ($150 >>> 16 & 255) >> 0] | 0) << 16 ^ $172; //@line 1530
 $274 = (HEAPU8[14026 + ($130 >>> 24) >> 0] | 0) << 24 ^ $172; //@line 1536
 $276 = HEAP32[$171 >> 2] | 0; //@line 1538
 $281 = $276 ^ (HEAPU8[14026 + ($130 & 255) >> 0] | 0); //@line 1543
 $288 = (HEAPU8[14026 + ($110 >>> 8 & 255) >> 0] | 0) << 8 ^ $276; //@line 1550
 $295 = (HEAPU8[14026 + ($170 >>> 16 & 255) >> 0] | 0) << 16 ^ $276; //@line 1557
 $301 = (HEAPU8[14026 + ($150 >>> 24) >> 0] | 0) << 24 ^ $276; //@line 1563
 $303 = HEAP32[$$0136 + 24 >> 2] | 0; //@line 1565
 $308 = $303 ^ (HEAPU8[14026 + ($150 & 255) >> 0] | 0); //@line 1570
 $315 = (HEAPU8[14026 + ($130 >>> 8 & 255) >> 0] | 0) << 8 ^ $303; //@line 1577
 $322 = (HEAPU8[14026 + ($110 >>> 16 & 255) >> 0] | 0) << 16 ^ $303; //@line 1584
 $328 = (HEAPU8[14026 + ($170 >>> 24) >> 0] | 0) << 24 ^ $303; //@line 1590
 $329 = HEAP32[$$0136 + 28 >> 2] | 0; //@line 1591
 $334 = $329 ^ (HEAPU8[14026 + ($170 & 255) >> 0] | 0); //@line 1596
 $341 = (HEAPU8[14026 + ($150 >>> 8 & 255) >> 0] | 0) << 8 ^ $329; //@line 1603
 $348 = (HEAPU8[14026 + ($130 >>> 16 & 255) >> 0] | 0) << 16 ^ $329; //@line 1610
 $354 = (HEAPU8[14026 + ($110 >>> 24) >> 0] | 0) << 24 ^ $329; //@line 1616
 HEAP8[$2 >> 0] = $172 ^ (HEAPU8[14026 + $173 >> 0] | 0); //@line 1618
 HEAP8[$2 + 1 >> 0] = $261 >>> 8; //@line 1622
 HEAP8[$2 + 2 >> 0] = $268 >>> 16; //@line 1626
 HEAP8[$2 + 3 >> 0] = $274 >>> 24; //@line 1630
 HEAP8[$2 + 4 >> 0] = $281; //@line 1633
 HEAP8[$2 + 5 >> 0] = $288 >>> 8; //@line 1637
 HEAP8[$2 + 6 >> 0] = $295 >>> 16; //@line 1641
 HEAP8[$2 + 7 >> 0] = $301 >>> 24; //@line 1645
 HEAP8[$2 + 8 >> 0] = $308; //@line 1648
 HEAP8[$2 + 9 >> 0] = $315 >>> 8; //@line 1652
 HEAP8[$2 + 10 >> 0] = $322 >>> 16; //@line 1656
 HEAP8[$2 + 11 >> 0] = $328 >>> 24; //@line 1660
 HEAP8[$2 + 12 >> 0] = $334; //@line 1663
 HEAP8[$2 + 13 >> 0] = $341 >>> 8; //@line 1667
 HEAP8[$2 + 14 >> 0] = $348 >>> 16; //@line 1671
 HEAP8[$2 + 15 >> 0] = $354 >>> 24; //@line 1675
 return 0; //@line 1676
}
function _mbedtls_internal_aes_encrypt($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$in = 0, $$0136 = 0, $$0137 = 0, $$0138 = 0, $$0139 = 0, $$0140 = 0, $110 = 0, $130 = 0, $150 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $230 = 0, $250 = 0, $261 = 0, $268 = 0, $274 = 0, $276 = 0, $281 = 0, $288 = 0, $295 = 0, $301 = 0, $303 = 0, $308 = 0, $315 = 0, $322 = 0, $328 = 0, $329 = 0, $334 = 0, $341 = 0, $348 = 0, $354 = 0, $4 = 0;
 $4 = HEAP32[$0 + 4 >> 2] | 0; //@line 811
 $$0$in = HEAP32[$0 >> 2] >> 1; //@line 897
 $$0136 = $4 + 16 | 0; //@line 897
 $$0137 = ((HEAPU8[$1 + 1 >> 0] | 0) << 8 | (HEAPU8[$1 >> 0] | 0) | (HEAPU8[$1 + 2 >> 0] | 0) << 16 | (HEAPU8[$1 + 3 >> 0] | 0) << 24) ^ HEAP32[$4 >> 2]; //@line 897
 $$0138 = ((HEAPU8[$1 + 5 >> 0] | 0) << 8 | (HEAPU8[$1 + 4 >> 0] | 0) | (HEAPU8[$1 + 6 >> 0] | 0) << 16 | (HEAPU8[$1 + 7 >> 0] | 0) << 24) ^ HEAP32[$4 + 4 >> 2]; //@line 897
 $$0139 = ((HEAPU8[$1 + 13 >> 0] | 0) << 8 | (HEAPU8[$1 + 12 >> 0] | 0) | (HEAPU8[$1 + 14 >> 0] | 0) << 16 | (HEAPU8[$1 + 15 >> 0] | 0) << 24) ^ HEAP32[$4 + 12 >> 2]; //@line 897
 $$0140 = ((HEAPU8[$1 + 9 >> 0] | 0) << 8 | (HEAPU8[$1 + 8 >> 0] | 0) | (HEAPU8[$1 + 10 >> 0] | 0) << 16 | (HEAPU8[$1 + 11 >> 0] | 0) << 24) ^ HEAP32[$4 + 8 >> 2]; //@line 897
 while (1) {
  $110 = HEAP32[5396 + (($$0137 & 255) << 2) >> 2] ^ HEAP32[$$0136 >> 2] ^ HEAP32[6420 + (($$0138 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($$0140 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($$0139 >>> 24 << 2) >> 2]; //@line 919
  $130 = HEAP32[5396 + (($$0138 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 4 >> 2] ^ HEAP32[6420 + (($$0140 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($$0139 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($$0137 >>> 24 << 2) >> 2]; //@line 939
  $150 = HEAP32[5396 + (($$0140 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 8 >> 2] ^ HEAP32[6420 + (($$0139 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($$0137 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($$0138 >>> 24 << 2) >> 2]; //@line 959
  $170 = HEAP32[5396 + (($$0139 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 12 >> 2] ^ HEAP32[6420 + (($$0137 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($$0138 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($$0140 >>> 24 << 2) >> 2]; //@line 979
  $171 = $$0136 + 20 | 0; //@line 980
  $172 = HEAP32[$$0136 + 16 >> 2] | 0; //@line 981
  $173 = $110 & 255; //@line 982
  if (($$0$in | 0) <= 1) {
   break;
  }
  $230 = HEAP32[5396 + (($150 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 24 >> 2] ^ HEAP32[6420 + (($170 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($110 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($130 >>> 24 << 2) >> 2]; //@line 1043
  $250 = HEAP32[5396 + (($170 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 28 >> 2] ^ HEAP32[6420 + (($110 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($130 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($150 >>> 24 << 2) >> 2]; //@line 1063
  $$0$in = $$0$in + -1 | 0; //@line 1064
  $$0136 = $$0136 + 32 | 0; //@line 1064
  $$0137 = HEAP32[5396 + ($173 << 2) >> 2] ^ $172 ^ HEAP32[6420 + (($130 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($150 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($170 >>> 24 << 2) >> 2]; //@line 1064
  $$0138 = HEAP32[5396 + (($130 & 255) << 2) >> 2] ^ HEAP32[$171 >> 2] ^ HEAP32[6420 + (($150 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($170 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($110 >>> 24 << 2) >> 2]; //@line 1064
  $$0139 = $250; //@line 1064
  $$0140 = $230; //@line 1064
 }
 $261 = (HEAPU8[13770 + ($130 >>> 8 & 255) >> 0] | 0) << 8 ^ $172; //@line 1076
 $268 = (HEAPU8[13770 + ($150 >>> 16 & 255) >> 0] | 0) << 16 ^ $172; //@line 1083
 $274 = (HEAPU8[13770 + ($170 >>> 24) >> 0] | 0) << 24 ^ $172; //@line 1089
 $276 = HEAP32[$171 >> 2] | 0; //@line 1091
 $281 = $276 ^ (HEAPU8[13770 + ($130 & 255) >> 0] | 0); //@line 1096
 $288 = (HEAPU8[13770 + ($150 >>> 8 & 255) >> 0] | 0) << 8 ^ $276; //@line 1103
 $295 = (HEAPU8[13770 + ($170 >>> 16 & 255) >> 0] | 0) << 16 ^ $276; //@line 1110
 $301 = (HEAPU8[13770 + ($110 >>> 24) >> 0] | 0) << 24 ^ $276; //@line 1116
 $303 = HEAP32[$$0136 + 24 >> 2] | 0; //@line 1118
 $308 = $303 ^ (HEAPU8[13770 + ($150 & 255) >> 0] | 0); //@line 1123
 $315 = (HEAPU8[13770 + ($170 >>> 8 & 255) >> 0] | 0) << 8 ^ $303; //@line 1130
 $322 = (HEAPU8[13770 + ($110 >>> 16 & 255) >> 0] | 0) << 16 ^ $303; //@line 1137
 $328 = (HEAPU8[13770 + ($130 >>> 24) >> 0] | 0) << 24 ^ $303; //@line 1143
 $329 = HEAP32[$$0136 + 28 >> 2] | 0; //@line 1144
 $334 = $329 ^ (HEAPU8[13770 + ($170 & 255) >> 0] | 0); //@line 1149
 $341 = (HEAPU8[13770 + ($110 >>> 8 & 255) >> 0] | 0) << 8 ^ $329; //@line 1156
 $348 = (HEAPU8[13770 + ($130 >>> 16 & 255) >> 0] | 0) << 16 ^ $329; //@line 1163
 $354 = (HEAPU8[13770 + ($150 >>> 24) >> 0] | 0) << 24 ^ $329; //@line 1169
 HEAP8[$2 >> 0] = $172 ^ (HEAPU8[13770 + $173 >> 0] | 0); //@line 1171
 HEAP8[$2 + 1 >> 0] = $261 >>> 8; //@line 1175
 HEAP8[$2 + 2 >> 0] = $268 >>> 16; //@line 1179
 HEAP8[$2 + 3 >> 0] = $274 >>> 24; //@line 1183
 HEAP8[$2 + 4 >> 0] = $281; //@line 1186
 HEAP8[$2 + 5 >> 0] = $288 >>> 8; //@line 1190
 HEAP8[$2 + 6 >> 0] = $295 >>> 16; //@line 1194
 HEAP8[$2 + 7 >> 0] = $301 >>> 24; //@line 1198
 HEAP8[$2 + 8 >> 0] = $308; //@line 1201
 HEAP8[$2 + 9 >> 0] = $315 >>> 8; //@line 1205
 HEAP8[$2 + 10 >> 0] = $322 >>> 16; //@line 1209
 HEAP8[$2 + 11 >> 0] = $328 >>> 24; //@line 1213
 HEAP8[$2 + 12 >> 0] = $334; //@line 1216
 HEAP8[$2 + 13 >> 0] = $341 >>> 8; //@line 1220
 HEAP8[$2 + 14 >> 0] = $348 >>> 16; //@line 1224
 HEAP8[$2 + 15 >> 0] = $354 >>> 24; //@line 1228
 return 0; //@line 1229
}
function __ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $21 = 0, $22 = 0, $25 = 0, $3 = 0, $34 = 0, $35 = 0, $4 = 0, $42 = 0, $5 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 15921
 STACKTOP = STACKTOP + 16 | 0; //@line 15922
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15922
 $vararg_buffer1 = sp + 8 | 0; //@line 15923
 $vararg_buffer = sp; //@line 15924
 $3 = HEAP32[$1 >> 2] | 0; //@line 15925
 $4 = $0 + 2380 | 0; //@line 15926
 HEAP32[$4 >> 2] = $3; //@line 15927
 $5 = $0 + 1996 | 0; //@line 15928
 if (($5 | 0) == ($2 | 0)) {
  $35 = $3; //@line 15931
 } else {
  $7 = $0 + 2008 | 0; //@line 15933
  $8 = HEAP32[$7 >> 2] | 0; //@line 15934
  do {
   if ($8 | 0) {
    $11 = HEAP32[$8 + 8 >> 2] | 0; //@line 15939
    $AsyncCtx = _emscripten_alloc_async_context(40, sp) | 0; //@line 15940
    FUNCTION_TABLE_vi[$11 & 1023]($5); //@line 15941
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 452; //@line 15944
     HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 15946
     HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 15948
     HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer1; //@line 15950
     HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer1; //@line 15952
     HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 15954
     HEAP32[$AsyncCtx + 24 >> 2] = $5; //@line 15956
     HEAP32[$AsyncCtx + 28 >> 2] = $7; //@line 15958
     HEAP32[$AsyncCtx + 32 >> 2] = $vararg_buffer; //@line 15960
     HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer; //@line 15962
     sp = STACKTOP; //@line 15963
     STACKTOP = sp; //@line 15964
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 15966
     break;
    }
   }
  } while (0);
  $21 = $2 + 12 | 0; //@line 15971
  $22 = HEAP32[$21 >> 2] | 0; //@line 15972
  do {
   if (!$22) {
    $34 = 0; //@line 15976
   } else {
    $25 = HEAP32[$22 + 4 >> 2] | 0; //@line 15979
    $AsyncCtx5 = _emscripten_alloc_async_context(36, sp) | 0; //@line 15980
    FUNCTION_TABLE_vii[$25 & 15]($5, $2); //@line 15981
    if (___async) {
     HEAP32[$AsyncCtx5 >> 2] = 453; //@line 15984
     HEAP32[$AsyncCtx5 + 4 >> 2] = $21; //@line 15986
     HEAP32[$AsyncCtx5 + 8 >> 2] = $7; //@line 15988
     HEAP32[$AsyncCtx5 + 12 >> 2] = $4; //@line 15990
     HEAP32[$AsyncCtx5 + 16 >> 2] = $vararg_buffer; //@line 15992
     HEAP32[$AsyncCtx5 + 20 >> 2] = $vararg_buffer; //@line 15994
     HEAP32[$AsyncCtx5 + 24 >> 2] = $0; //@line 15996
     HEAP32[$AsyncCtx5 + 28 >> 2] = $vararg_buffer1; //@line 15998
     HEAP32[$AsyncCtx5 + 32 >> 2] = $vararg_buffer1; //@line 16000
     sp = STACKTOP; //@line 16001
     STACKTOP = sp; //@line 16002
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx5 | 0); //@line 16004
     $34 = HEAP32[$21 >> 2] | 0; //@line 16006
     break;
    }
   }
  } while (0);
  HEAP32[$7 >> 2] = $34; //@line 16011
  $35 = HEAP32[$4 >> 2] | 0; //@line 16013
 }
 L16 : do {
  switch ($35 | 0) {
  case 0:
   {
    _mbed_tracef(16, 12890, 13480, $vararg_buffer); //@line 16018
    $AsyncCtx17 = _emscripten_alloc_async_context(20, sp) | 0; //@line 16020
    __ZN7LoRaPHY18put_radio_to_sleepEv($0 + 4 | 0); //@line 16021
    if (___async) {
     HEAP32[$AsyncCtx17 >> 2] = 454; //@line 16024
     HEAP32[$AsyncCtx17 + 4 >> 2] = $4; //@line 16026
     HEAP32[$AsyncCtx17 + 8 >> 2] = $vararg_buffer1; //@line 16028
     HEAP32[$AsyncCtx17 + 12 >> 2] = $vararg_buffer1; //@line 16030
     HEAP32[$AsyncCtx17 + 16 >> 2] = $0; //@line 16032
     sp = STACKTOP; //@line 16033
     STACKTOP = sp; //@line 16034
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx17 | 0); //@line 16036
     break L16;
    }
    break;
   }
  case 2:
   {
    HEAP8[$0 + 1177 >> 0] = 0; //@line 16043
    $42 = $0 + 4 | 0; //@line 16044
    $AsyncCtx13 = _emscripten_alloc_async_context(24, sp) | 0; //@line 16045
    __ZN7LoRaPHY18put_radio_to_sleepEv($42); //@line 16046
    if (___async) {
     HEAP32[$AsyncCtx13 >> 2] = 455; //@line 16049
     HEAP32[$AsyncCtx13 + 4 >> 2] = $0; //@line 16051
     HEAP32[$AsyncCtx13 + 8 >> 2] = $42; //@line 16053
     HEAP32[$AsyncCtx13 + 12 >> 2] = $4; //@line 16055
     HEAP32[$AsyncCtx13 + 16 >> 2] = $vararg_buffer1; //@line 16057
     HEAP32[$AsyncCtx13 + 20 >> 2] = $vararg_buffer1; //@line 16059
     sp = STACKTOP; //@line 16060
     STACKTOP = sp; //@line 16061
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx13 | 0); //@line 16063
     __ZN7LoRaPHY21compute_rx_win_paramsEahjP18rx_config_params_t($42, HEAP8[$0 + 1916 >> 0] | 0, HEAP8[$0 + 1884 >> 0] | 0, HEAP32[$0 + 1880 >> 2] | 0, $0 + 1964 | 0); //@line 16071
     break L16;
    }
    break;
   }
  default:
   {}
  }
 } while (0);
 if ((HEAP32[$4 >> 2] | 0) != 2) {
  STACKTOP = sp; //@line 16083
  return;
 }
 _mbed_tracef(16, 12890, 13516, $vararg_buffer1); //@line 16085
 $AsyncCtx9 = _emscripten_alloc_async_context(4, sp) | 0; //@line 16086
 __ZN7LoRaMac15open_rx2_windowEv($0); //@line 16087
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 456; //@line 16090
  sp = STACKTOP; //@line 16091
  STACKTOP = sp; //@line 16092
  return;
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 16094
 STACKTOP = sp; //@line 16095
 return;
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_249($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 16842
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16844
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16846
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16850
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16852
 $11 = $8 + 12 | 0; //@line 16853
 HEAP32[$8 >> 2] = 196; //@line 16854
 HEAP32[$8 + 4 >> 2] = 0; //@line 16856
 HEAP32[$8 + 8 >> 2] = $4; //@line 16858
 HEAP32[$11 >> 2] = 824; //@line 16859
 $12 = $4 + 2432 | 0; //@line 16860
 if (($12 | 0) == ($8 | 0)) {
  $35 = HEAP32[208] | 0; //@line 16864
  $ReallocAsyncCtx15 = _emscripten_realloc_async_context(20) | 0; //@line 16865
  FUNCTION_TABLE_vi[$35 & 1023]($8); //@line 16866
  if (___async) {
   HEAP32[$ReallocAsyncCtx15 >> 2] = 199; //@line 16869
   $36 = $ReallocAsyncCtx15 + 4 | 0; //@line 16870
   HEAP32[$36 >> 2] = $8; //@line 16871
   $37 = $ReallocAsyncCtx15 + 8 | 0; //@line 16872
   HEAP32[$37 >> 2] = $4; //@line 16873
   $38 = $ReallocAsyncCtx15 + 12 | 0; //@line 16874
   HEAP32[$38 >> 2] = $2; //@line 16875
   $39 = $ReallocAsyncCtx15 + 16 | 0; //@line 16876
   HEAP32[$39 >> 2] = $10; //@line 16877
   sp = STACKTOP; //@line 16878
   return;
  }
  ___async_unwind = 0; //@line 16881
  HEAP32[$ReallocAsyncCtx15 >> 2] = 199; //@line 16882
  $36 = $ReallocAsyncCtx15 + 4 | 0; //@line 16883
  HEAP32[$36 >> 2] = $8; //@line 16884
  $37 = $ReallocAsyncCtx15 + 8 | 0; //@line 16885
  HEAP32[$37 >> 2] = $4; //@line 16886
  $38 = $ReallocAsyncCtx15 + 12 | 0; //@line 16887
  HEAP32[$38 >> 2] = $2; //@line 16888
  $39 = $ReallocAsyncCtx15 + 16 | 0; //@line 16889
  HEAP32[$39 >> 2] = $10; //@line 16890
  sp = STACKTOP; //@line 16891
  return;
 }
 $14 = $4 + 2444 | 0; //@line 16894
 $15 = HEAP32[$14 >> 2] | 0; //@line 16895
 if (!$15) {
  $27 = HEAP32[207] | 0; //@line 16899
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(28) | 0; //@line 16900
  FUNCTION_TABLE_vii[$27 & 15]($12, $8); //@line 16901
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 198; //@line 16904
   $28 = $ReallocAsyncCtx14 + 4 | 0; //@line 16905
   HEAP32[$28 >> 2] = $11; //@line 16906
   $29 = $ReallocAsyncCtx14 + 8 | 0; //@line 16907
   HEAP32[$29 >> 2] = $14; //@line 16908
   $30 = $ReallocAsyncCtx14 + 12 | 0; //@line 16909
   HEAP32[$30 >> 2] = $8; //@line 16910
   $31 = $ReallocAsyncCtx14 + 16 | 0; //@line 16911
   HEAP32[$31 >> 2] = $4; //@line 16912
   $32 = $ReallocAsyncCtx14 + 20 | 0; //@line 16913
   HEAP32[$32 >> 2] = $2; //@line 16914
   $33 = $ReallocAsyncCtx14 + 24 | 0; //@line 16915
   HEAP32[$33 >> 2] = $10; //@line 16916
   sp = STACKTOP; //@line 16917
   return;
  }
  ___async_unwind = 0; //@line 16920
  HEAP32[$ReallocAsyncCtx14 >> 2] = 198; //@line 16921
  $28 = $ReallocAsyncCtx14 + 4 | 0; //@line 16922
  HEAP32[$28 >> 2] = $11; //@line 16923
  $29 = $ReallocAsyncCtx14 + 8 | 0; //@line 16924
  HEAP32[$29 >> 2] = $14; //@line 16925
  $30 = $ReallocAsyncCtx14 + 12 | 0; //@line 16926
  HEAP32[$30 >> 2] = $8; //@line 16927
  $31 = $ReallocAsyncCtx14 + 16 | 0; //@line 16928
  HEAP32[$31 >> 2] = $4; //@line 16929
  $32 = $ReallocAsyncCtx14 + 20 | 0; //@line 16930
  HEAP32[$32 >> 2] = $2; //@line 16931
  $33 = $ReallocAsyncCtx14 + 24 | 0; //@line 16932
  HEAP32[$33 >> 2] = $10; //@line 16933
  sp = STACKTOP; //@line 16934
  return;
 } else {
  $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 16938
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(32) | 0; //@line 16939
  FUNCTION_TABLE_vi[$18 & 1023]($12); //@line 16940
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 197; //@line 16943
   $19 = $ReallocAsyncCtx13 + 4 | 0; //@line 16944
   HEAP32[$19 >> 2] = $11; //@line 16945
   $20 = $ReallocAsyncCtx13 + 8 | 0; //@line 16946
   HEAP32[$20 >> 2] = $14; //@line 16947
   $21 = $ReallocAsyncCtx13 + 12 | 0; //@line 16948
   HEAP32[$21 >> 2] = $12; //@line 16949
   $22 = $ReallocAsyncCtx13 + 16 | 0; //@line 16950
   HEAP32[$22 >> 2] = $8; //@line 16951
   $23 = $ReallocAsyncCtx13 + 20 | 0; //@line 16952
   HEAP32[$23 >> 2] = $4; //@line 16953
   $24 = $ReallocAsyncCtx13 + 24 | 0; //@line 16954
   HEAP32[$24 >> 2] = $2; //@line 16955
   $25 = $ReallocAsyncCtx13 + 28 | 0; //@line 16956
   HEAP32[$25 >> 2] = $10; //@line 16957
   sp = STACKTOP; //@line 16958
   return;
  }
  ___async_unwind = 0; //@line 16961
  HEAP32[$ReallocAsyncCtx13 >> 2] = 197; //@line 16962
  $19 = $ReallocAsyncCtx13 + 4 | 0; //@line 16963
  HEAP32[$19 >> 2] = $11; //@line 16964
  $20 = $ReallocAsyncCtx13 + 8 | 0; //@line 16965
  HEAP32[$20 >> 2] = $14; //@line 16966
  $21 = $ReallocAsyncCtx13 + 12 | 0; //@line 16967
  HEAP32[$21 >> 2] = $12; //@line 16968
  $22 = $ReallocAsyncCtx13 + 16 | 0; //@line 16969
  HEAP32[$22 >> 2] = $8; //@line 16970
  $23 = $ReallocAsyncCtx13 + 20 | 0; //@line 16971
  HEAP32[$23 >> 2] = $4; //@line 16972
  $24 = $ReallocAsyncCtx13 + 24 | 0; //@line 16973
  HEAP32[$24 >> 2] = $2; //@line 16974
  $25 = $ReallocAsyncCtx13 + 28 | 0; //@line 16975
  HEAP32[$25 >> 2] = $10; //@line 16976
  sp = STACKTOP; //@line 16977
  return;
 }
}
function __ZN7LoRaPHY16set_next_channelEP26channel_selection_params_sPhPjS3_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$01722$i = 0, $$01821$i = 0, $$023$i = 0, $$2$i = 0, $$220$i = 0, $$sink = 0, $10 = 0, $11 = 0, $15 = 0, $22 = 0, $23 = 0, $25 = 0, $37 = 0, $39 = 0, $40 = 0, $42 = 0, $44 = 0, $45 = 0, $47 = 0, $5 = 0, $55 = 0, $57 = 0, $7 = 0, $73 = 0, $76 = 0, $8 = 0, $89 = 0, $9 = 0, $90 = 0, $indvars$iv$i = 0, $indvars$iv$i27 = 0, $wide$trip$count$i = 0, $wide$trip$count$i25 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 21426
 STACKTOP = STACKTOP + 16 | 0; //@line 21427
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 21427
 $5 = sp; //@line 21428
 dest = $5; //@line 21429
 stop = dest + 16 | 0; //@line 21429
 do {
  HEAP8[dest >> 0] = 255; //@line 21429
  dest = dest + 1 | 0; //@line 21429
 } while ((dest | 0) < (stop | 0));
 $7 = HEAP32[$0 + 72 >> 2] | 0; //@line 21431
 $8 = $0 + 116 | 0; //@line 21432
 $9 = HEAP32[$8 >> 2] | 0; //@line 21433
 $10 = $0 + 113 | 0; //@line 21434
 $11 = HEAP8[$10 >> 0] | 0; //@line 21435
 if (!((__ZN7LoRaPHY19num_active_channelsEPthh(0, $9, 0, $11) | 0) << 24 >> 24)) {
  $15 = HEAP32[$0 + 120 >> 2] | 0; //@line 21440
  if ($11 << 24 >> 24 != 0 & (($9 | 0) != 0 & ($15 | 0) != 0)) {
   $wide$trip$count$i = $11 & 255; //@line 21447
   $indvars$iv$i = 0; //@line 21448
   do {
    HEAP16[$9 + ($indvars$iv$i << 1) >> 1] = HEAP16[$15 + ($indvars$iv$i << 1) >> 1] | 0; //@line 21453
    $indvars$iv$i = $indvars$iv$i + 1 | 0; //@line 21454
   } while (($indvars$iv$i | 0) != ($wide$trip$count$i | 0));
  }
 }
 $22 = HEAP32[$1 >> 2] | 0; //@line 21464
 $23 = $0 + 8 | 0; //@line 21465
 $25 = $1 + 4 | 0; //@line 21467
 if ($22 >>> 0 > (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$23 >> 2] | 0, HEAP32[$25 >> 2] | 0) | 0) >>> 0) {
  $76 = HEAP32[$1 >> 2] | 0; //@line 21472
  $$0 = -1020; //@line 21477
  $$sink = $76 - (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$23 >> 2] | 0, HEAP32[$25 >> 2] | 0) | 0) | 0; //@line 21477
  HEAP32[$3 >> 2] = $$sink; //@line 21478
  STACKTOP = sp; //@line 21479
  return $$0 | 0; //@line 21479
 }
 HEAP32[$4 >> 2] = 0; //@line 21481
 $37 = __ZN7LoRaPHY19update_band_timeoffEbbP6band_th($0, (HEAP8[$1 + 9 >> 0] | 0) != 0, (HEAP8[$1 + 10 >> 0] | 0) != 0, $7, HEAP8[$0 + 76 >> 0] | 0) | 0; //@line 21490
 $39 = HEAP8[$1 + 8 >> 0] | 0; //@line 21492
 $40 = HEAP32[$8 >> 2] | 0; //@line 21493
 $42 = HEAP8[$0 + 20 >> 0] | 0; //@line 21495
 do {
  if ($42 << 24 >> 24) {
   $44 = $0 + 124 | 0; //@line 21499
   $45 = $0 + 72 | 0; //@line 21500
   $$01722$i = 0; //@line 21501
   $$01821$i = 0; //@line 21501
   $$023$i = 0; //@line 21501
   $47 = 0; //@line 21501
   while (1) {
    do {
     if (!(1 << ($47 & 15) & HEAPU16[$40 + ($47 >>> 4 << 1) >> 1])) {
      $$2$i = $$023$i; //@line 21513
      $$220$i = $$01821$i; //@line 21513
     } else {
      $55 = HEAP32[$44 >> 2] | 0; //@line 21515
      $57 = HEAP8[$55 + ($47 * 12 | 0) + 8 >> 0] | 0; //@line 21517
      if (($57 & 15) <= $39 << 24 >> 24 ? ($57 & 255) >>> 4 << 24 >> 24 >= $39 << 24 >> 24 : 0) {
       if (!(HEAP32[(HEAP32[$45 >> 2] | 0) + ((HEAPU8[$55 + ($47 * 12 | 0) + 9 >> 0] | 0) * 24 | 0) + 12 >> 2] | 0)) {
        HEAP8[$5 + ($$023$i & 255) >> 0] = $$01722$i; //@line 21535
        $$2$i = $$023$i + 1 << 24 >> 24; //@line 21536
        $$220$i = $$01821$i; //@line 21536
        break;
       } else {
        $$2$i = $$023$i; //@line 21540
        $$220$i = $$01821$i + 1 << 24 >> 24; //@line 21540
        break;
       }
      } else {
       $$2$i = $$023$i; //@line 21544
       $$220$i = $$01821$i; //@line 21544
      }
     }
    } while (0);
    $73 = $$01722$i + 1 << 24 >> 24; //@line 21548
    if (($73 & 255) < ($42 & 255)) {
     $$01722$i = $73; //@line 21552
     $$01821$i = $$220$i; //@line 21552
     $$023$i = $$2$i; //@line 21552
     $47 = $73 & 255; //@line 21552
    } else {
     break;
    }
   }
   if (!($$2$i << 24 >> 24)) {
    if (!($$220$i << 24 >> 24)) {
     break;
    } else {
     $$0 = -1020; //@line 21563
     $$sink = $37; //@line 21563
    }
    HEAP32[$3 >> 2] = $$sink; //@line 21565
    STACKTOP = sp; //@line 21566
    return $$0 | 0; //@line 21566
   } else {
    HEAP8[$2 >> 0] = HEAP8[$5 + ((_rand() | 0) % ($$2$i & 255 | 0) | 0) >> 0] | 0; //@line 21573
    $$0 = 0; //@line 21574
    $$sink = 0; //@line 21574
    HEAP32[$3 >> 2] = $$sink; //@line 21575
    STACKTOP = sp; //@line 21576
    return $$0 | 0; //@line 21576
   }
  }
 } while (0);
 $89 = HEAP32[$0 + 120 >> 2] | 0; //@line 21581
 $90 = HEAP8[$10 >> 0] | 0; //@line 21582
 if (!(($40 | 0) != 0 & ($89 | 0) != 0 & $90 << 24 >> 24 != 0)) {
  $$0 = -1021; //@line 21589
  $$sink = 0; //@line 21589
  HEAP32[$3 >> 2] = $$sink; //@line 21590
  STACKTOP = sp; //@line 21591
  return $$0 | 0; //@line 21591
 }
 $wide$trip$count$i25 = $90 & 255; //@line 21593
 $indvars$iv$i27 = 0; //@line 21594
 do {
  HEAP16[$40 + ($indvars$iv$i27 << 1) >> 1] = HEAP16[$89 + ($indvars$iv$i27 << 1) >> 1] | 0; //@line 21599
  $indvars$iv$i27 = $indvars$iv$i27 + 1 | 0; //@line 21600
 } while (($indvars$iv$i27 | 0) != ($wide$trip$count$i25 | 0));
 $$0 = -1021; //@line 21603
 $$sink = 0; //@line 21603
 HEAP32[$3 >> 2] = $$sink; //@line 21609
 STACKTOP = sp; //@line 21610
 return $$0 | 0; //@line 21610
}
function _mbedtls_aes_setkey_enc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0103117 = 0, $$0106 = 0, $$0112 = 0, $$1104111 = 0, $$1114 = 0, $$2105113 = 0, $$2116 = 0, $$3115 = 0, $$sink = 0, $107 = 0, $111 = 0, $115 = 0, $119 = 0, $127 = 0, $129 = 0, $158 = 0, $162 = 0, $166 = 0, $194 = 0, $198 = 0, $202 = 0, $3 = 0, $33 = 0, $35 = 0, $5 = 0, $6 = 0, $64 = 0, $68 = 0, $76 = 0, $78 = 0, $$0112$looptemp = 0, $$1114$looptemp = 0, $$2116$looptemp = 0;
 switch ($2 | 0) {
 case 128:
  {
   $$sink = 10; //@line 248
   break;
  }
 case 192:
  {
   $$sink = 12; //@line 252
   break;
  }
 case 256:
  {
   $$sink = 14; //@line 256
   break;
  }
 default:
  {
   $$0106 = -32; //@line 260
   return $$0106 | 0; //@line 261
  }
 }
 HEAP32[$0 >> 2] = $$sink; //@line 264
 $3 = $0 + 8 | 0; //@line 265
 HEAP32[$0 + 4 >> 2] = $3; //@line 267
 $5 = $2 >>> 5; //@line 268
 $$0103117 = 0; //@line 269
 do {
  $6 = $$0103117 << 2; //@line 271
  HEAP32[$0 + 8 + ($$0103117 << 2) >> 2] = (HEAPU8[$1 + ($6 | 1) >> 0] | 0) << 8 | (HEAPU8[$1 + $6 >> 0] | 0) | (HEAPU8[$1 + ($6 | 2) >> 0] | 0) << 16 | (HEAPU8[$1 + ($6 | 3) >> 0] | 0) << 24; //@line 294
  $$0103117 = $$0103117 + 1 | 0; //@line 295
 } while (($$0103117 | 0) != ($5 | 0));
 switch (HEAP32[$0 >> 2] | 0) {
 case 10:
  {
   $$0112 = $3; //@line 307
   $$1104111 = 0; //@line 307
   $33 = HEAP32[$3 >> 2] | 0; //@line 307
   do {
    $35 = HEAP32[$$0112 + 12 >> 2] | 0; //@line 313
    $33 = HEAP32[1260 + ($$1104111 << 2) >> 2] ^ $33 ^ (HEAPU8[13770 + ($35 >>> 8 & 255) >> 0] | 0) ^ (HEAPU8[13770 + ($35 >>> 16 & 255) >> 0] | 0) << 8 ^ (HEAPU8[13770 + ($35 >>> 24) >> 0] | 0) << 16 ^ (HEAPU8[13770 + ($35 & 255) >> 0] | 0) << 24; //@line 338
    $$0112$looptemp = $$0112;
    $$0112 = $$0112 + 16 | 0; //@line 339
    HEAP32[$$0112 >> 2] = $33; //@line 340
    $64 = $33 ^ HEAP32[$$0112$looptemp + 4 >> 2]; //@line 343
    HEAP32[$$0112$looptemp + 20 >> 2] = $64; //@line 345
    $68 = HEAP32[$$0112$looptemp + 8 >> 2] ^ $64; //@line 348
    HEAP32[$$0112$looptemp + 24 >> 2] = $68; //@line 350
    HEAP32[$$0112$looptemp + 28 >> 2] = $35 ^ $68; //@line 353
    $$1104111 = $$1104111 + 1 | 0; //@line 354
   } while (($$1104111 | 0) != 10);
   $$0106 = 0; //@line 357
   return $$0106 | 0; //@line 363
  }
 case 12:
  {
   $$1114 = $3; //@line 368
   $$2105113 = 0; //@line 368
   $76 = HEAP32[$3 >> 2] | 0; //@line 368
   do {
    $78 = HEAP32[$$1114 + 20 >> 2] | 0; //@line 374
    $76 = HEAP32[1260 + ($$2105113 << 2) >> 2] ^ $76 ^ (HEAPU8[13770 + ($78 >>> 8 & 255) >> 0] | 0) ^ (HEAPU8[13770 + ($78 >>> 16 & 255) >> 0] | 0) << 8 ^ (HEAPU8[13770 + ($78 >>> 24) >> 0] | 0) << 16 ^ (HEAPU8[13770 + ($78 & 255) >> 0] | 0) << 24; //@line 399
    $$1114$looptemp = $$1114;
    $$1114 = $$1114 + 24 | 0; //@line 400
    HEAP32[$$1114 >> 2] = $76; //@line 401
    $107 = $76 ^ HEAP32[$$1114$looptemp + 4 >> 2]; //@line 404
    HEAP32[$$1114$looptemp + 28 >> 2] = $107; //@line 406
    $111 = HEAP32[$$1114$looptemp + 8 >> 2] ^ $107; //@line 409
    HEAP32[$$1114$looptemp + 32 >> 2] = $111; //@line 411
    $115 = HEAP32[$$1114$looptemp + 12 >> 2] ^ $111; //@line 414
    HEAP32[$$1114$looptemp + 36 >> 2] = $115; //@line 416
    $119 = HEAP32[$$1114$looptemp + 16 >> 2] ^ $115; //@line 419
    HEAP32[$$1114$looptemp + 40 >> 2] = $119; //@line 421
    HEAP32[$$1114$looptemp + 44 >> 2] = $78 ^ $119; //@line 424
    $$2105113 = $$2105113 + 1 | 0; //@line 425
   } while (($$2105113 | 0) != 8);
   $$0106 = 0; //@line 428
   return $$0106 | 0; //@line 434
  }
 case 14:
  {
   $$2116 = $3; //@line 439
   $$3115 = 0; //@line 439
   $127 = HEAP32[$3 >> 2] | 0; //@line 439
   do {
    $129 = HEAP32[$$2116 + 28 >> 2] | 0; //@line 445
    $127 = HEAP32[1260 + ($$3115 << 2) >> 2] ^ $127 ^ (HEAPU8[13770 + ($129 >>> 8 & 255) >> 0] | 0) ^ (HEAPU8[13770 + ($129 >>> 16 & 255) >> 0] | 0) << 8 ^ (HEAPU8[13770 + ($129 >>> 24) >> 0] | 0) << 16 ^ (HEAPU8[13770 + ($129 & 255) >> 0] | 0) << 24; //@line 470
    $$2116$looptemp = $$2116;
    $$2116 = $$2116 + 32 | 0; //@line 471
    HEAP32[$$2116 >> 2] = $127; //@line 472
    $158 = $127 ^ HEAP32[$$2116$looptemp + 4 >> 2]; //@line 475
    HEAP32[$$2116$looptemp + 36 >> 2] = $158; //@line 477
    $162 = HEAP32[$$2116$looptemp + 8 >> 2] ^ $158; //@line 480
    HEAP32[$$2116$looptemp + 40 >> 2] = $162; //@line 482
    $166 = HEAP32[$$2116$looptemp + 12 >> 2] ^ $162; //@line 485
    HEAP32[$$2116$looptemp + 44 >> 2] = $166; //@line 487
    $194 = HEAP32[$$2116$looptemp + 16 >> 2] ^ (HEAPU8[13770 + ($166 & 255) >> 0] | 0) ^ (HEAPU8[13770 + ($166 >>> 8 & 255) >> 0] | 0) << 8 ^ (HEAPU8[13770 + ($166 >>> 16 & 255) >> 0] | 0) << 16 ^ (HEAPU8[13770 + ($166 >>> 24) >> 0] | 0) << 24; //@line 514
    HEAP32[$$2116$looptemp + 48 >> 2] = $194; //@line 516
    $198 = $194 ^ HEAP32[$$2116$looptemp + 20 >> 2]; //@line 519
    HEAP32[$$2116$looptemp + 52 >> 2] = $198; //@line 521
    $202 = HEAP32[$$2116$looptemp + 24 >> 2] ^ $198; //@line 524
    HEAP32[$$2116$looptemp + 56 >> 2] = $202; //@line 526
    HEAP32[$$2116$looptemp + 60 >> 2] = $129 ^ $202; //@line 529
    $$3115 = $$3115 + 1 | 0; //@line 530
   } while (($$3115 | 0) != 7);
   $$0106 = 0; //@line 533
   return $$0106 | 0; //@line 539
  }
 default:
  {
   $$0106 = 0; //@line 543
   return $$0106 | 0; //@line 544
  }
 }
 return 0; //@line 547
}
function __ZN12LoRaPHYEU868C2ER18LoRaWANTimeHandler($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $31 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 __ZN7LoRaPHYC2ER18LoRaWANTimeHandler($0, $1); //@line 23092
 HEAP32[$0 >> 2] = 968; //@line 23093
 $2 = $0 + 324 | 0; //@line 23094
 HEAP32[$2 >> 2] = HEAP32[262]; //@line 23095
 HEAP32[$2 + 4 >> 2] = HEAP32[263]; //@line 23095
 HEAP32[$2 + 8 >> 2] = HEAP32[264]; //@line 23095
 HEAP32[$2 + 12 >> 2] = HEAP32[265]; //@line 23095
 HEAP32[$2 + 16 >> 2] = HEAP32[266]; //@line 23095
 HEAP32[$2 + 20 >> 2] = HEAP32[267]; //@line 23095
 $3 = $0 + 348 | 0; //@line 23096
 HEAP32[$3 >> 2] = HEAP32[268]; //@line 23097
 HEAP32[$3 + 4 >> 2] = HEAP32[269]; //@line 23097
 HEAP32[$3 + 8 >> 2] = HEAP32[270]; //@line 23097
 HEAP32[$3 + 12 >> 2] = HEAP32[271]; //@line 23097
 HEAP32[$3 + 16 >> 2] = HEAP32[272]; //@line 23097
 HEAP32[$3 + 20 >> 2] = HEAP32[273]; //@line 23097
 $4 = $0 + 372 | 0; //@line 23098
 HEAP32[$4 >> 2] = HEAP32[274]; //@line 23099
 HEAP32[$4 + 4 >> 2] = HEAP32[275]; //@line 23099
 HEAP32[$4 + 8 >> 2] = HEAP32[276]; //@line 23099
 HEAP32[$4 + 12 >> 2] = HEAP32[277]; //@line 23099
 HEAP32[$4 + 16 >> 2] = HEAP32[278]; //@line 23099
 HEAP32[$4 + 20 >> 2] = HEAP32[279]; //@line 23099
 $5 = $0 + 396 | 0; //@line 23100
 HEAP32[$5 >> 2] = HEAP32[280]; //@line 23101
 HEAP32[$5 + 4 >> 2] = HEAP32[281]; //@line 23101
 HEAP32[$5 + 8 >> 2] = HEAP32[282]; //@line 23101
 HEAP32[$5 + 12 >> 2] = HEAP32[283]; //@line 23101
 HEAP32[$5 + 16 >> 2] = HEAP32[284]; //@line 23101
 HEAP32[$5 + 20 >> 2] = HEAP32[285]; //@line 23101
 $6 = $0 + 420 | 0; //@line 23102
 HEAP32[$6 >> 2] = HEAP32[286]; //@line 23103
 HEAP32[$6 + 4 >> 2] = HEAP32[287]; //@line 23103
 HEAP32[$6 + 8 >> 2] = HEAP32[288]; //@line 23103
 HEAP32[$6 + 12 >> 2] = HEAP32[289]; //@line 23103
 HEAP32[$6 + 16 >> 2] = HEAP32[290]; //@line 23103
 HEAP32[$6 + 20 >> 2] = HEAP32[291]; //@line 23103
 $7 = $0 + 444 | 0; //@line 23104
 HEAP32[$7 >> 2] = HEAP32[292]; //@line 23105
 HEAP32[$7 + 4 >> 2] = HEAP32[293]; //@line 23105
 HEAP32[$7 + 8 >> 2] = HEAP32[294]; //@line 23105
 HEAP32[$7 + 12 >> 2] = HEAP32[295]; //@line 23105
 HEAP32[$7 + 16 >> 2] = HEAP32[296]; //@line 23105
 HEAP32[$7 + 20 >> 2] = HEAP32[297]; //@line 23105
 $8 = $0 + 132 | 0; //@line 23106
 HEAP32[$8 >> 2] = HEAP32[298]; //@line 23107
 HEAP32[$8 + 4 >> 2] = HEAP32[299]; //@line 23107
 HEAP32[$8 + 8 >> 2] = HEAP32[300]; //@line 23107
 HEAP8[$0 + 141 >> 0] = 1; //@line 23109
 $10 = $0 + 144 | 0; //@line 23110
 HEAP32[$10 >> 2] = HEAP32[301]; //@line 23111
 HEAP32[$10 + 4 >> 2] = HEAP32[302]; //@line 23111
 HEAP32[$10 + 8 >> 2] = HEAP32[303]; //@line 23111
 HEAP8[$0 + 153 >> 0] = 1; //@line 23113
 $12 = $0 + 156 | 0; //@line 23114
 HEAP32[$12 >> 2] = HEAP32[304]; //@line 23115
 HEAP32[$12 + 4 >> 2] = HEAP32[305]; //@line 23115
 HEAP32[$12 + 8 >> 2] = HEAP32[306]; //@line 23115
 HEAP8[$0 + 165 >> 0] = 1; //@line 23117
 $14 = $0 + 470 | 0; //@line 23118
 HEAP16[$14 >> 1] = 7; //@line 23119
 $15 = $0 + 468 | 0; //@line 23120
 __ZN7LoRaPHY17copy_channel_maskEPtS0_h($0, $15, $14, 1); //@line 23121
 HEAP32[$0 + 124 >> 2] = $8; //@line 23123
 HEAP8[$0 + 112 >> 0] = 16; //@line 23125
 HEAP32[$0 + 116 >> 2] = $15; //@line 23127
 HEAP32[$0 + 120 >> 2] = $14; //@line 23129
 HEAP8[$0 + 113 >> 0] = 1; //@line 23131
 HEAP32[$0 + 72 >> 2] = $2; //@line 23133
 HEAP8[$0 + 76 >> 0] = 6; //@line 23135
 HEAP32[$0 + 80 >> 2] = 1228; //@line 23137
 HEAP8[$0 + 84 >> 0] = 8; //@line 23139
 HEAP32[$0 + 88 >> 2] = 13623; //@line 23141
 HEAP8[$0 + 92 >> 0] = 8; //@line 23143
 HEAP32[$0 + 96 >> 2] = 13631; //@line 23145
 HEAP8[$0 + 100 >> 0] = 8; //@line 23147
 HEAP32[$0 + 104 >> 2] = 13639; //@line 23149
 HEAP8[$0 + 108 >> 0] = 8; //@line 23151
 $31 = $0 + 128 | 0; //@line 23152
 HEAP8[$31 >> 0] = HEAP8[$31 >> 0] & -4; //@line 23155
 $34 = $0 + 12 | 0; //@line 23156
 $35 = $0 + 18 | 0; //@line 23157
 HEAP32[$34 >> 2] = 16843009; //@line 23158
 HEAP16[$34 + 4 >> 1] = 257; //@line 23158
 HEAP8[$35 >> 0] = 3; //@line 23159
 HEAP8[$0 + 20 >> 0] = 16; //@line 23161
 HEAP8[$0 + 19 >> 0] = 5; //@line 23163
 HEAP8[$0 + 26 >> 0] = 0; //@line 23165
 HEAP8[$0 + 27 >> 0] = 7; //@line 23167
 HEAP8[$0 + 28 >> 0] = 0; //@line 23169
 HEAP8[$0 + 29 >> 0] = 7; //@line 23171
 HEAP8[$0 + 30 >> 0] = 0; //@line 23173
 HEAP8[$0 + 31 >> 0] = 5; //@line 23175
 HEAP8[$0 + 32 >> 0] = 0; //@line 23177
 HEAP8[$0 + 33 >> 0] = 5; //@line 23179
 HEAP8[$0 + 34 >> 0] = 0; //@line 23181
 HEAP8[$0 + 21 >> 0] = 7; //@line 23183
 HEAP8[$0 + 22 >> 0] = 0; //@line 23185
 HEAP8[$0 + 23 >> 0] = 0; //@line 23187
 HEAPF32[$0 + 56 >> 2] = 16.0; //@line 23189
 HEAPF32[$0 + 60 >> 2] = 2.1500000953674316; //@line 23191
 HEAP8[$0 + 24 >> 0] = 64; //@line 23193
 HEAP8[$0 + 25 >> 0] = 32; //@line 23195
 HEAP16[$0 + 36 >> 1] = 3e3; //@line 23197
 HEAP16[$0 + 38 >> 1] = 1e3; //@line 23199
 HEAP16[$0 + 40 >> 1] = 2e3; //@line 23201
 HEAP16[$0 + 46 >> 1] = 7; //@line 23203
 HEAP16[$0 + 42 >> 1] = 5e3; //@line 23205
 HEAP16[$0 + 44 >> 1] = 6e3; //@line 23207
 HEAP16[$0 + 48 >> 1] = 16384; //@line 23209
 HEAP16[$0 + 50 >> 1] = 2e3; //@line 23211
 HEAP16[$0 + 52 >> 1] = 1e3; //@line 23213
 HEAP8[$0 + 64 >> 0] = 0; //@line 23215
 HEAP32[$0 + 68 >> 2] = 869525e3; //@line 23217
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_22($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $40 = 0, $41 = 0, $45 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 22301
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22303
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22305
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22307
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22309
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22311
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 22315
 $14 = HEAP32[HEAP32[$0 + 24 >> 2] >> 2] | 0; //@line 22316
 if ($14 | 0) {
  $17 = HEAP32[$14 + 8 >> 2] | 0; //@line 22320
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(28) | 0; //@line 22321
  FUNCTION_TABLE_vi[$17 & 1023]($2); //@line 22322
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 261; //@line 22325
   $18 = $ReallocAsyncCtx4 + 4 | 0; //@line 22326
   HEAP32[$18 >> 2] = $2; //@line 22327
   $19 = $ReallocAsyncCtx4 + 8 | 0; //@line 22328
   HEAP32[$19 >> 2] = $4; //@line 22329
   $20 = $ReallocAsyncCtx4 + 12 | 0; //@line 22330
   HEAP32[$20 >> 2] = $6; //@line 22331
   $21 = $ReallocAsyncCtx4 + 16 | 0; //@line 22332
   HEAP32[$21 >> 2] = $8; //@line 22333
   $22 = $ReallocAsyncCtx4 + 20 | 0; //@line 22334
   HEAP32[$22 >> 2] = $10; //@line 22335
   $23 = $ReallocAsyncCtx4 + 24 | 0; //@line 22336
   HEAP32[$23 >> 2] = $AsyncRetVal; //@line 22337
   sp = STACKTOP; //@line 22338
   return;
  }
  ___async_unwind = 0; //@line 22341
  HEAP32[$ReallocAsyncCtx4 >> 2] = 261; //@line 22342
  $18 = $ReallocAsyncCtx4 + 4 | 0; //@line 22343
  HEAP32[$18 >> 2] = $2; //@line 22344
  $19 = $ReallocAsyncCtx4 + 8 | 0; //@line 22345
  HEAP32[$19 >> 2] = $4; //@line 22346
  $20 = $ReallocAsyncCtx4 + 12 | 0; //@line 22347
  HEAP32[$20 >> 2] = $6; //@line 22348
  $21 = $ReallocAsyncCtx4 + 16 | 0; //@line 22349
  HEAP32[$21 >> 2] = $8; //@line 22350
  $22 = $ReallocAsyncCtx4 + 20 | 0; //@line 22351
  HEAP32[$22 >> 2] = $10; //@line 22352
  $23 = $ReallocAsyncCtx4 + 24 | 0; //@line 22353
  HEAP32[$23 >> 2] = $AsyncRetVal; //@line 22354
  sp = STACKTOP; //@line 22355
  return;
 }
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(24) | 0; //@line 22360
  _mbed_assert_internal(12104, 12113, 775); //@line 22361
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 262; //@line 22364
   $25 = $ReallocAsyncCtx11 + 4 | 0; //@line 22365
   HEAP32[$25 >> 2] = $2; //@line 22366
   $26 = $ReallocAsyncCtx11 + 8 | 0; //@line 22367
   HEAP32[$26 >> 2] = $4; //@line 22368
   $27 = $ReallocAsyncCtx11 + 12 | 0; //@line 22369
   HEAP32[$27 >> 2] = $6; //@line 22370
   $28 = $ReallocAsyncCtx11 + 16 | 0; //@line 22371
   HEAP32[$28 >> 2] = $8; //@line 22372
   $29 = $ReallocAsyncCtx11 + 20 | 0; //@line 22373
   HEAP32[$29 >> 2] = $10; //@line 22374
   sp = STACKTOP; //@line 22375
   return;
  }
  ___async_unwind = 0; //@line 22378
  HEAP32[$ReallocAsyncCtx11 >> 2] = 262; //@line 22379
  $25 = $ReallocAsyncCtx11 + 4 | 0; //@line 22380
  HEAP32[$25 >> 2] = $2; //@line 22381
  $26 = $ReallocAsyncCtx11 + 8 | 0; //@line 22382
  HEAP32[$26 >> 2] = $4; //@line 22383
  $27 = $ReallocAsyncCtx11 + 12 | 0; //@line 22384
  HEAP32[$27 >> 2] = $6; //@line 22385
  $28 = $ReallocAsyncCtx11 + 16 | 0; //@line 22386
  HEAP32[$28 >> 2] = $8; //@line 22387
  $29 = $ReallocAsyncCtx11 + 20 | 0; //@line 22388
  HEAP32[$29 >> 2] = $10; //@line 22389
  sp = STACKTOP; //@line 22390
  return;
 }
 if ((__ZNK7LoRaMac16get_device_classEv($6) | 0) == 2) {
  label = 13; //@line 22396
 } else {
  if (!(HEAP8[$4 + 15 >> 0] | 0)) {
   label = 13; //@line 22402
  }
 }
 if ((label | 0) == 13) {
  if ((__ZNK7LoRaMac16get_device_classEv($6) | 0) != 2) {
   return;
  }
  if ((HEAP32[$4 + 4 >> 2] | 0) != 1) {
   return;
  }
 }
 $40 = $8 + 2512 | 0; //@line 22418
 $41 = HEAP32[$40 >> 2] | 0; //@line 22419
 if (!$41) {
  return;
 }
 $45 = HEAP32[$8 + 3168 >> 2] | 0; //@line 22426
 $47 = HEAP32[$41 + 4 >> 2] | 0; //@line 22428
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 22429
 FUNCTION_TABLE_vii[$47 & 15]($10, $8 + 2500 | 0); //@line 22430
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 263; //@line 22433
  $48 = $ReallocAsyncCtx5 + 4 | 0; //@line 22434
  HEAP32[$48 >> 2] = $40; //@line 22435
  $49 = $ReallocAsyncCtx5 + 8 | 0; //@line 22436
  HEAP32[$49 >> 2] = $10; //@line 22437
  $50 = $ReallocAsyncCtx5 + 12 | 0; //@line 22438
  HEAP32[$50 >> 2] = $45; //@line 22439
  $51 = $ReallocAsyncCtx5 + 16 | 0; //@line 22440
  HEAP32[$51 >> 2] = $10; //@line 22441
  sp = STACKTOP; //@line 22442
  return;
 }
 ___async_unwind = 0; //@line 22445
 HEAP32[$ReallocAsyncCtx5 >> 2] = 263; //@line 22446
 $48 = $ReallocAsyncCtx5 + 4 | 0; //@line 22447
 HEAP32[$48 >> 2] = $40; //@line 22448
 $49 = $ReallocAsyncCtx5 + 8 | 0; //@line 22449
 HEAP32[$49 >> 2] = $10; //@line 22450
 $50 = $ReallocAsyncCtx5 + 12 | 0; //@line 22451
 HEAP32[$50 >> 2] = $45; //@line 22452
 $51 = $ReallocAsyncCtx5 + 16 | 0; //@line 22453
 HEAP32[$51 >> 2] = $10; //@line 22454
 sp = STACKTOP; //@line 22455
 return;
}
function __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$phi$trans$insert = 0, $$pre = 0, $$pre$i$i4 = 0, $$pre10 = 0, $12 = 0, $2 = 0, $20 = 0, $21 = 0, $25 = 0, $27 = 0, $29 = 0, $3 = 0, $30 = 0, $33 = 0, $4 = 0, $41 = 0, $49 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 2365
 STACKTOP = STACKTOP + 16 | 0; //@line 2366
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 2366
 $2 = sp; //@line 2367
 $3 = $1 + 12 | 0; //@line 2368
 $4 = HEAP32[$3 >> 2] | 0; //@line 2369
 if ($4 | 0) {
  $6 = $0 + 56 | 0; //@line 2372
  if (($6 | 0) != ($1 | 0)) {
   $8 = $0 + 68 | 0; //@line 2375
   $9 = HEAP32[$8 >> 2] | 0; //@line 2376
   do {
    if (!$9) {
     $20 = $4; //@line 2380
     label = 7; //@line 2381
    } else {
     $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 2384
     $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 2385
     FUNCTION_TABLE_vi[$12 & 1023]($6); //@line 2386
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 107; //@line 2389
      HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 2391
      HEAP32[$AsyncCtx + 8 >> 2] = $8; //@line 2393
      HEAP32[$AsyncCtx + 12 >> 2] = $6; //@line 2395
      HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 2397
      HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 2399
      sp = STACKTOP; //@line 2400
      STACKTOP = sp; //@line 2401
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 2403
      $$pre = HEAP32[$3 >> 2] | 0; //@line 2404
      if (!$$pre) {
       $25 = 0; //@line 2407
       break;
      } else {
       $20 = $$pre; //@line 2410
       label = 7; //@line 2411
       break;
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 7) {
     $21 = HEAP32[$20 + 4 >> 2] | 0; //@line 2420
     $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 2421
     FUNCTION_TABLE_vii[$21 & 15]($6, $1); //@line 2422
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 108; //@line 2425
      HEAP32[$AsyncCtx2 + 4 >> 2] = $3; //@line 2427
      HEAP32[$AsyncCtx2 + 8 >> 2] = $8; //@line 2429
      HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 2431
      sp = STACKTOP; //@line 2432
      STACKTOP = sp; //@line 2433
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx2 | 0); //@line 2435
      $25 = HEAP32[$3 >> 2] | 0; //@line 2437
      break;
     }
    }
   } while (0);
   HEAP32[$8 >> 2] = $25; //@line 2442
  }
  _gpio_irq_set($0 + 28 | 0, 2, 1); //@line 2445
  STACKTOP = sp; //@line 2446
  return;
 }
 HEAP32[$2 >> 2] = 0; //@line 2448
 HEAP32[$2 + 4 >> 2] = 0; //@line 2448
 HEAP32[$2 + 8 >> 2] = 0; //@line 2448
 HEAP32[$2 + 12 >> 2] = 0; //@line 2448
 $27 = $0 + 56 | 0; //@line 2449
 do {
  if (($27 | 0) != ($2 | 0)) {
   $29 = $0 + 68 | 0; //@line 2453
   $30 = HEAP32[$29 >> 2] | 0; //@line 2454
   if ($30 | 0) {
    $33 = HEAP32[$30 + 8 >> 2] | 0; //@line 2458
    $AsyncCtx5 = _emscripten_alloc_async_context(24, sp) | 0; //@line 2459
    FUNCTION_TABLE_vi[$33 & 1023]($27); //@line 2460
    if (___async) {
     HEAP32[$AsyncCtx5 >> 2] = 109; //@line 2463
     HEAP32[$AsyncCtx5 + 4 >> 2] = $2; //@line 2465
     HEAP32[$AsyncCtx5 + 8 >> 2] = $29; //@line 2467
     HEAP32[$AsyncCtx5 + 12 >> 2] = $27; //@line 2469
     HEAP32[$AsyncCtx5 + 16 >> 2] = $2; //@line 2471
     HEAP32[$AsyncCtx5 + 20 >> 2] = $0; //@line 2473
     sp = STACKTOP; //@line 2474
     STACKTOP = sp; //@line 2475
     return;
    }
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 2477
    $$phi$trans$insert = $2 + 12 | 0; //@line 2478
    $$pre10 = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 2479
    if ($$pre10 | 0) {
     $41 = HEAP32[$$pre10 + 4 >> 2] | 0; //@line 2483
     $AsyncCtx8 = _emscripten_alloc_async_context(20, sp) | 0; //@line 2484
     FUNCTION_TABLE_vii[$41 & 15]($27, $2); //@line 2485
     if (___async) {
      HEAP32[$AsyncCtx8 >> 2] = 110; //@line 2488
      HEAP32[$AsyncCtx8 + 4 >> 2] = $$phi$trans$insert; //@line 2490
      HEAP32[$AsyncCtx8 + 8 >> 2] = $29; //@line 2492
      HEAP32[$AsyncCtx8 + 12 >> 2] = $2; //@line 2494
      HEAP32[$AsyncCtx8 + 16 >> 2] = $0; //@line 2496
      sp = STACKTOP; //@line 2497
      STACKTOP = sp; //@line 2498
      return;
     }
     _emscripten_free_async_context($AsyncCtx8 | 0); //@line 2500
     $$pre$i$i4 = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 2501
     HEAP32[$29 >> 2] = $$pre$i$i4; //@line 2502
     if (!$$pre$i$i4) {
      break;
     }
     $49 = HEAP32[$$pre$i$i4 + 8 >> 2] | 0; //@line 2509
     $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 2510
     FUNCTION_TABLE_vi[$49 & 1023]($2); //@line 2511
     if (___async) {
      HEAP32[$AsyncCtx11 >> 2] = 111; //@line 2514
      HEAP32[$AsyncCtx11 + 4 >> 2] = $2; //@line 2516
      HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 2518
      sp = STACKTOP; //@line 2519
      STACKTOP = sp; //@line 2520
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx11 | 0); //@line 2522
      break;
     }
    }
   }
   HEAP32[$29 >> 2] = 0; //@line 2527
  }
 } while (0);
 _gpio_irq_set($0 + 28 | 0, 2, 0); //@line 2531
 STACKTOP = sp; //@line 2532
 return;
}
function _ticker_read_us($0) {
 $0 = $0 | 0;
 var $100 = 0, $101 = 0, $102 = 0, $104 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $14 = 0, $19 = 0, $2 = 0, $21 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $33 = 0, $35 = 0, $36 = 0, $42 = 0, $43 = 0, $44 = 0, $53 = 0, $54 = 0, $55 = 0, $57 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $65 = 0, $67 = 0, $68 = 0, $7 = 0, $74 = 0, $75 = 0, $76 = 0, $85 = 0, $86 = 0, $87 = 0, $89 = 0, $93 = 0, $94 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 6282
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6283
 _initialize($0); //@line 6284
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 633; //@line 6287
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 6289
  sp = STACKTOP; //@line 6290
  tempRet0 = 0; //@line 6291
  return 0; //@line 6292
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 6294
 $2 = $0 + 4 | 0; //@line 6295
 $3 = HEAP32[$2 >> 2] | 0; //@line 6296
 $6 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 6299
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 6300
 $7 = FUNCTION_TABLE_i[$6 & 7]() | 0; //@line 6301
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 634; //@line 6304
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 6306
  HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 6308
  sp = STACKTOP; //@line 6309
  tempRet0 = 0; //@line 6310
  return 0; //@line 6311
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 6313
 if (($7 | 0) == (HEAP32[(HEAP32[$2 >> 2] | 0) + 32 >> 2] | 0)) {
  $108 = HEAP32[$2 >> 2] | 0; //@line 6319
  $109 = $108 + 48 | 0; //@line 6320
  $110 = $109; //@line 6321
  $111 = $110; //@line 6322
  $112 = HEAP32[$111 >> 2] | 0; //@line 6323
  $113 = $110 + 4 | 0; //@line 6324
  $114 = $113; //@line 6325
  $115 = HEAP32[$114 >> 2] | 0; //@line 6326
  tempRet0 = $115; //@line 6327
  return $112 | 0; //@line 6328
 }
 $14 = $3 + 32 | 0; //@line 6330
 $19 = $7 - (HEAP32[$14 >> 2] | 0) & HEAP32[$3 + 12 >> 2]; //@line 6335
 HEAP32[$14 >> 2] = $7; //@line 6336
 $21 = HEAP32[$3 + 8 >> 2] | 0; //@line 6338
 do {
  if (($21 | 0) == 1e6) {
   $100 = $19; //@line 6342
   $101 = 0; //@line 6342
  } else {
   $24 = HEAP8[$3 + 57 >> 0] | 0; //@line 6345
   $26 = ___muldi3($19 | 0, 0, 1e6, 0) | 0; //@line 6347
   $27 = tempRet0; //@line 6348
   if (!($24 << 24 >> 24)) {
    $61 = ___udivdi3($26 | 0, $27 | 0, $21 | 0, 0) | 0; //@line 6350
    $62 = tempRet0; //@line 6351
    $63 = ___muldi3($61 | 0, $62 | 0, $21 | 0, 0) | 0; //@line 6352
    $65 = _i64Subtract($26 | 0, $27 | 0, $63 | 0, tempRet0 | 0) | 0; //@line 6354
    $67 = $3 + 40 | 0; //@line 6356
    $68 = $67; //@line 6357
    $74 = _i64Add($65 | 0, tempRet0 | 0, HEAP32[$68 >> 2] | 0, HEAP32[$68 + 4 >> 2] | 0) | 0; //@line 6363
    $75 = tempRet0; //@line 6364
    $76 = $67; //@line 6365
    HEAP32[$76 >> 2] = $74; //@line 6367
    HEAP32[$76 + 4 >> 2] = $75; //@line 6370
    if ($75 >>> 0 < 0 | ($75 | 0) == 0 & $74 >>> 0 < $21 >>> 0) {
     $100 = $61; //@line 6377
     $101 = $62; //@line 6377
     break;
    }
    $85 = _i64Add($61 | 0, $62 | 0, 1, 0) | 0; //@line 6380
    $86 = tempRet0; //@line 6381
    $87 = _i64Subtract($74 | 0, $75 | 0, $21 | 0, 0) | 0; //@line 6382
    $89 = $67; //@line 6384
    HEAP32[$89 >> 2] = $87; //@line 6386
    HEAP32[$89 + 4 >> 2] = tempRet0; //@line 6389
    $100 = $85; //@line 6390
    $101 = $86; //@line 6390
    break;
   } else {
    $28 = $24 & 255; //@line 6393
    $29 = _bitshift64Lshr($26 | 0, $27 | 0, $28 | 0) | 0; //@line 6394
    $30 = tempRet0; //@line 6395
    $31 = _bitshift64Shl($29 | 0, $30 | 0, $28 | 0) | 0; //@line 6396
    $33 = _i64Subtract($26 | 0, $27 | 0, $31 | 0, tempRet0 | 0) | 0; //@line 6398
    $35 = $3 + 40 | 0; //@line 6400
    $36 = $35; //@line 6401
    $42 = _i64Add(HEAP32[$36 >> 2] | 0, HEAP32[$36 + 4 >> 2] | 0, $33 | 0, tempRet0 | 0) | 0; //@line 6407
    $43 = tempRet0; //@line 6408
    $44 = $35; //@line 6409
    HEAP32[$44 >> 2] = $42; //@line 6411
    HEAP32[$44 + 4 >> 2] = $43; //@line 6414
    if ($43 >>> 0 < 0 | ($43 | 0) == 0 & $42 >>> 0 < $21 >>> 0) {
     $100 = $29; //@line 6421
     $101 = $30; //@line 6421
     break;
    }
    $53 = _i64Add($29 | 0, $30 | 0, 1, 0) | 0; //@line 6424
    $54 = tempRet0; //@line 6425
    $55 = _i64Subtract($42 | 0, $43 | 0, $21 | 0, 0) | 0; //@line 6426
    $57 = $35; //@line 6428
    HEAP32[$57 >> 2] = $55; //@line 6430
    HEAP32[$57 + 4 >> 2] = tempRet0; //@line 6433
    $100 = $53; //@line 6434
    $101 = $54; //@line 6434
    break;
   }
  }
 } while (0);
 $93 = $3 + 48 | 0; //@line 6439
 $94 = $93; //@line 6440
 $102 = _i64Add(HEAP32[$94 >> 2] | 0, HEAP32[$94 + 4 >> 2] | 0, $100 | 0, $101 | 0) | 0; //@line 6446
 $104 = $93; //@line 6448
 HEAP32[$104 >> 2] = $102; //@line 6450
 HEAP32[$104 + 4 >> 2] = tempRet0; //@line 6453
 $108 = HEAP32[$2 >> 2] | 0; //@line 6454
 $109 = $108 + 48 | 0; //@line 6455
 $110 = $109; //@line 6456
 $111 = $110; //@line 6457
 $112 = HEAP32[$111 >> 2] | 0; //@line 6458
 $113 = $110 + 4 | 0; //@line 6459
 $114 = $113; //@line 6460
 $115 = HEAP32[$114 >> 2] | 0; //@line 6461
 tempRet0 = $115; //@line 6462
 return $112 | 0; //@line 6463
}
function _main__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $30 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 26235
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26237
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26239
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26241
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26246
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26248
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26250
 if (!(HEAP8[$0 + 16 >> 0] & 1)) {
  $16 = (HEAP32[$4 >> 2] | 0) + -1 | 0; //@line 26253
  HEAP32[$4 >> 2] = $16; //@line 26254
  if (!$16) {
   $19 = HEAP32[$4 + 24 >> 2] | 0; //@line 26258
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 26259
   FUNCTION_TABLE_vi[$19 & 1023]($6); //@line 26260
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 675; //@line 26263
    $20 = $ReallocAsyncCtx2 + 4 | 0; //@line 26264
    HEAP32[$20 >> 2] = $2; //@line 26265
    $21 = $ReallocAsyncCtx2 + 8 | 0; //@line 26266
    HEAP32[$21 >> 2] = $4; //@line 26267
    $22 = $ReallocAsyncCtx2 + 12 | 0; //@line 26268
    HEAP32[$22 >> 2] = $10; //@line 26269
    $23 = $ReallocAsyncCtx2 + 16 | 0; //@line 26270
    HEAP32[$23 >> 2] = $12; //@line 26271
    $24 = $ReallocAsyncCtx2 + 20 | 0; //@line 26272
    HEAP32[$24 >> 2] = $14; //@line 26273
    sp = STACKTOP; //@line 26274
    return;
   }
   ___async_unwind = 0; //@line 26277
   HEAP32[$ReallocAsyncCtx2 >> 2] = 675; //@line 26278
   $20 = $ReallocAsyncCtx2 + 4 | 0; //@line 26279
   HEAP32[$20 >> 2] = $2; //@line 26280
   $21 = $ReallocAsyncCtx2 + 8 | 0; //@line 26281
   HEAP32[$21 >> 2] = $4; //@line 26282
   $22 = $ReallocAsyncCtx2 + 12 | 0; //@line 26283
   HEAP32[$22 >> 2] = $10; //@line 26284
   $23 = $ReallocAsyncCtx2 + 16 | 0; //@line 26285
   HEAP32[$23 >> 2] = $12; //@line 26286
   $24 = $ReallocAsyncCtx2 + 20 | 0; //@line 26287
   HEAP32[$24 >> 2] = $14; //@line 26288
   sp = STACKTOP; //@line 26289
   return;
  }
 }
 $26 = $2 + 4 | 0; //@line 26294
 HEAP32[$26 >> 2] = 0; //@line 26296
 HEAP32[$26 + 4 >> 2] = 0; //@line 26299
 HEAP32[$2 >> 2] = 677; //@line 26300
 $30 = $2 + 12 | 0; //@line 26301
 HEAP32[$30 >> 2] = 10276; //@line 26302
 $31 = HEAP32[5960] | 0; //@line 26303
 if (!$31) {
  $41 = HEAP32[2570] | 0; //@line 26307
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 26308
  FUNCTION_TABLE_vii[$41 & 15](23828, $2); //@line 26309
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 679; //@line 26312
   $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 26313
   HEAP32[$42 >> 2] = $30; //@line 26314
   $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 26315
   HEAP32[$43 >> 2] = $2; //@line 26316
   $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 26317
   HEAP32[$44 >> 2] = $10; //@line 26318
   $45 = $ReallocAsyncCtx4 + 16 | 0; //@line 26319
   HEAP32[$45 >> 2] = $12; //@line 26320
   $46 = $ReallocAsyncCtx4 + 20 | 0; //@line 26321
   HEAP32[$46 >> 2] = $14; //@line 26322
   sp = STACKTOP; //@line 26323
   return;
  }
  ___async_unwind = 0; //@line 26326
  HEAP32[$ReallocAsyncCtx4 >> 2] = 679; //@line 26327
  $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 26328
  HEAP32[$42 >> 2] = $30; //@line 26329
  $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 26330
  HEAP32[$43 >> 2] = $2; //@line 26331
  $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 26332
  HEAP32[$44 >> 2] = $10; //@line 26333
  $45 = $ReallocAsyncCtx4 + 16 | 0; //@line 26334
  HEAP32[$45 >> 2] = $12; //@line 26335
  $46 = $ReallocAsyncCtx4 + 20 | 0; //@line 26336
  HEAP32[$46 >> 2] = $14; //@line 26337
  sp = STACKTOP; //@line 26338
  return;
 } else {
  $34 = HEAP32[$31 + 8 >> 2] | 0; //@line 26342
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 26343
  FUNCTION_TABLE_vi[$34 & 1023](23828); //@line 26344
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 678; //@line 26347
   $35 = $ReallocAsyncCtx3 + 4 | 0; //@line 26348
   HEAP32[$35 >> 2] = $30; //@line 26349
   $36 = $ReallocAsyncCtx3 + 8 | 0; //@line 26350
   HEAP32[$36 >> 2] = $2; //@line 26351
   $37 = $ReallocAsyncCtx3 + 12 | 0; //@line 26352
   HEAP32[$37 >> 2] = $10; //@line 26353
   $38 = $ReallocAsyncCtx3 + 16 | 0; //@line 26354
   HEAP32[$38 >> 2] = $12; //@line 26355
   $39 = $ReallocAsyncCtx3 + 20 | 0; //@line 26356
   HEAP32[$39 >> 2] = $14; //@line 26357
   sp = STACKTOP; //@line 26358
   return;
  }
  ___async_unwind = 0; //@line 26361
  HEAP32[$ReallocAsyncCtx3 >> 2] = 678; //@line 26362
  $35 = $ReallocAsyncCtx3 + 4 | 0; //@line 26363
  HEAP32[$35 >> 2] = $30; //@line 26364
  $36 = $ReallocAsyncCtx3 + 8 | 0; //@line 26365
  HEAP32[$36 >> 2] = $2; //@line 26366
  $37 = $ReallocAsyncCtx3 + 12 | 0; //@line 26367
  HEAP32[$37 >> 2] = $10; //@line 26368
  $38 = $ReallocAsyncCtx3 + 16 | 0; //@line 26369
  HEAP32[$38 >> 2] = $12; //@line 26370
  $39 = $ReallocAsyncCtx3 + 20 | 0; //@line 26371
  HEAP32[$39 >> 2] = $14; //@line 26372
  sp = STACKTOP; //@line 26373
  return;
 }
}
function __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 var $$0 = 0, $33 = 0, $36 = 0, $37 = 0, $39 = 0, $48 = 0, $55 = 0, $62 = 0, $67 = 0, $68 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 18958
 HEAP8[$0 + 5 >> 0] = $6; //@line 18960
 HEAP8[$0 + 6 >> 0] = $5; //@line 18963
 HEAP8[$0 + 7 >> 0] = $5 >>> 8; //@line 18967
 HEAP8[$0 + 8 >> 0] = $5 >>> 16; //@line 18971
 HEAP8[$0 + 9 >> 0] = $5 >>> 24; //@line 18975
 HEAP8[$0 + 10 >> 0] = $7; //@line 18978
 HEAP8[$0 + 11 >> 0] = $7 >>> 8; //@line 18982
 HEAP8[$0 + 12 >> 0] = $7 >>> 16; //@line 18986
 HEAP8[$0 + 13 >> 0] = $7 >>> 24; //@line 18990
 $33 = $2 & 255; //@line 18992
 HEAP8[$0 + 15 >> 0] = $2; //@line 18995
 $36 = $0 + 344 | 0; //@line 18996
 _mbedtls_cipher_init($36); //@line 18997
 $37 = _mbedtls_cipher_info_from_type(2) | 0; //@line 18998
 if (!$37) {
  $$0 = -24960; //@line 19001
 } else {
  $AsyncCtx15 = _emscripten_alloc_async_context(32, sp) | 0; //@line 19003
  $39 = _mbedtls_cipher_setup($36, $37) | 0; //@line 19004
  if (___async) {
   HEAP32[$AsyncCtx15 >> 2] = 497; //@line 19007
   HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 19009
   HEAP32[$AsyncCtx15 + 8 >> 2] = $36; //@line 19011
   HEAP32[$AsyncCtx15 + 12 >> 2] = $8; //@line 19013
   HEAP32[$AsyncCtx15 + 16 >> 2] = $1; //@line 19015
   HEAP32[$AsyncCtx15 + 20 >> 2] = $33; //@line 19017
   HEAP32[$AsyncCtx15 + 24 >> 2] = $3; //@line 19019
   HEAP32[$AsyncCtx15 + 28 >> 2] = $4; //@line 19021
   sp = STACKTOP; //@line 19022
   return 0; //@line 19023
  }
  _emscripten_free_async_context($AsyncCtx15 | 0); //@line 19025
  if (!$39) {
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 19028
   $48 = _mbedtls_cipher_cmac_starts($36, $3, $4) | 0; //@line 19029
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 498; //@line 19032
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 19034
    HEAP32[$AsyncCtx + 8 >> 2] = $36; //@line 19036
    HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 19038
    HEAP32[$AsyncCtx + 16 >> 2] = $33; //@line 19040
    HEAP32[$AsyncCtx + 20 >> 2] = $8; //@line 19042
    sp = STACKTOP; //@line 19043
    return 0; //@line 19044
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 19046
   if (!$48) {
    $AsyncCtx11 = _emscripten_alloc_async_context(24, sp) | 0; //@line 19049
    $55 = _mbedtls_cipher_cmac_update($36, $0, 16) | 0; //@line 19050
    if (___async) {
     HEAP32[$AsyncCtx11 >> 2] = 499; //@line 19053
     HEAP32[$AsyncCtx11 + 4 >> 2] = $36; //@line 19055
     HEAP32[$AsyncCtx11 + 8 >> 2] = $1; //@line 19057
     HEAP32[$AsyncCtx11 + 12 >> 2] = $33; //@line 19059
     HEAP32[$AsyncCtx11 + 16 >> 2] = $0; //@line 19061
     HEAP32[$AsyncCtx11 + 20 >> 2] = $8; //@line 19063
     sp = STACKTOP; //@line 19064
     return 0; //@line 19065
    }
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 19067
    if (!$55) {
     $AsyncCtx7 = _emscripten_alloc_async_context(16, sp) | 0; //@line 19070
     $62 = _mbedtls_cipher_cmac_update($36, $1, $33) | 0; //@line 19071
     if (___async) {
      HEAP32[$AsyncCtx7 >> 2] = 500; //@line 19074
      HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 19076
      HEAP32[$AsyncCtx7 + 8 >> 2] = $36; //@line 19078
      HEAP32[$AsyncCtx7 + 12 >> 2] = $8; //@line 19080
      sp = STACKTOP; //@line 19081
      return 0; //@line 19082
     }
     _emscripten_free_async_context($AsyncCtx7 | 0); //@line 19084
     if (!$62) {
      $67 = $0 + 16 | 0; //@line 19087
      $AsyncCtx3 = _emscripten_alloc_async_context(20, sp) | 0; //@line 19088
      $68 = _mbedtls_cipher_cmac_finish($36, $67) | 0; //@line 19089
      if (___async) {
       HEAP32[$AsyncCtx3 >> 2] = 501; //@line 19092
       HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 19094
       HEAP32[$AsyncCtx3 + 8 >> 2] = $67; //@line 19096
       HEAP32[$AsyncCtx3 + 12 >> 2] = $8; //@line 19098
       HEAP32[$AsyncCtx3 + 16 >> 2] = $36; //@line 19100
       sp = STACKTOP; //@line 19101
       return 0; //@line 19102
      }
      _emscripten_free_async_context($AsyncCtx3 | 0); //@line 19104
      if (!$68) {
       HEAP32[$8 >> 2] = (HEAPU8[$0 + 18 >> 0] | 0) << 16 | (HEAPU8[$0 + 19 >> 0] | 0) << 24 | (HEAPU8[$0 + 17 >> 0] | 0) << 8 | (HEAPU8[$67 >> 0] | 0); //@line 19124
       $$0 = 0; //@line 19125
      } else {
       $$0 = $68; //@line 19127
      }
     } else {
      $$0 = $62; //@line 19130
     }
    } else {
     $$0 = $55; //@line 19133
    }
   } else {
    $$0 = $48; //@line 19136
   }
  } else {
   $$0 = $39; //@line 19139
  }
 }
 $AsyncCtx19 = _emscripten_alloc_async_context(8, sp) | 0; //@line 19142
 _mbedtls_cipher_free($36); //@line 19143
 if (___async) {
  HEAP32[$AsyncCtx19 >> 2] = 502; //@line 19146
  HEAP32[$AsyncCtx19 + 4 >> 2] = $$0; //@line 19148
  sp = STACKTOP; //@line 19149
  return 0; //@line 19150
 } else {
  _emscripten_free_async_context($AsyncCtx19 | 0); //@line 19152
  return $$0 | 0; //@line 19153
 }
 return 0; //@line 19155
}
function _mbed_vtracef__async_cb_163($0) {
 $0 = $0 | 0;
 var $$10 = 0, $$3147168 = 0, $$3169 = 0, $$5156 = 0, $$5156$ = 0, $$expand_i1_val = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $20 = 0, $24 = 0, $28 = 0, $32 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $46 = 0, $48 = 0, $50 = 0, $53 = 0, $54 = 0, $56 = 0, $6 = 0, $67 = 0, $68 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 30821
 $2 = HEAP8[$0 + 4 >> 0] & 1; //@line 30824
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30826
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30828
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30830
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30832
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30834
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 30836
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 30838
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 30842
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 30846
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 30850
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 30854
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 30858
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 30860
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 30862
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 30868
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 30870
 HEAP32[$40 >> 2] = HEAP32[___async_retval >> 2]; //@line 30873
 $50 = _snprintf($8, $10, 11988, $40) | 0; //@line 30874
 $$10 = ($50 | 0) >= ($10 | 0) ? 0 : $50; //@line 30876
 $53 = $8 + $$10 | 0; //@line 30878
 $54 = $10 - $$10 | 0; //@line 30879
 if (($$10 | 0) > 0) {
  if (($54 | 0) > 0) {
   $$3147168 = $54; //@line 30883
   $$3169 = $53; //@line 30883
   label = 4; //@line 30884
  }
 } else {
  $$3147168 = $10; //@line 30887
  $$3169 = $8; //@line 30887
  label = 4; //@line 30888
 }
 if ((label | 0) == 4) {
  $56 = $12 + -2 | 0; //@line 30891
  switch ($56 >>> 1 | $56 << 31 | 0) {
  case 0:
   {
    HEAP32[$14 >> 2] = $16; //@line 30897
    $$5156 = _snprintf($$3169, $$3147168, 11991, $14) | 0; //@line 30899
    break;
   }
  case 1:
   {
    HEAP32[$20 >> 2] = $16; //@line 30903
    $$5156 = _snprintf($$3169, $$3147168, 12006, $20) | 0; //@line 30905
    break;
   }
  case 3:
   {
    HEAP32[$24 >> 2] = $16; //@line 30909
    $$5156 = _snprintf($$3169, $$3147168, 12021, $24) | 0; //@line 30911
    break;
   }
  case 7:
   {
    HEAP32[$28 >> 2] = $16; //@line 30915
    $$5156 = _snprintf($$3169, $$3147168, 12036, $28) | 0; //@line 30917
    break;
   }
  default:
   {
    $$5156 = _snprintf($$3169, $$3147168, 12051, $32) | 0; //@line 30922
   }
  }
  $$5156$ = ($$5156 | 0) < ($$3147168 | 0) ? $$5156 : 0; //@line 30926
  $67 = $$3169 + $$5156$ | 0; //@line 30928
  $68 = $$3147168 - $$5156$ | 0; //@line 30929
  if (($$5156$ | 0) > 0 & ($68 | 0) > 0) {
   $ReallocAsyncCtx10 = _emscripten_realloc_async_context(32) | 0; //@line 30933
   $70 = _vsnprintf($67, $68, $36, $38) | 0; //@line 30934
   if (___async) {
    HEAP32[$ReallocAsyncCtx10 >> 2] = 148; //@line 30937
    $71 = $ReallocAsyncCtx10 + 4 | 0; //@line 30938
    $$expand_i1_val = $2 & 1; //@line 30939
    HEAP8[$71 >> 0] = $$expand_i1_val; //@line 30940
    $72 = $ReallocAsyncCtx10 + 8 | 0; //@line 30941
    HEAP32[$72 >> 2] = $4; //@line 30942
    $73 = $ReallocAsyncCtx10 + 12 | 0; //@line 30943
    HEAP32[$73 >> 2] = $6; //@line 30944
    $74 = $ReallocAsyncCtx10 + 16 | 0; //@line 30945
    HEAP32[$74 >> 2] = $46; //@line 30946
    $75 = $ReallocAsyncCtx10 + 20 | 0; //@line 30947
    HEAP32[$75 >> 2] = $48; //@line 30948
    $76 = $ReallocAsyncCtx10 + 24 | 0; //@line 30949
    HEAP32[$76 >> 2] = $68; //@line 30950
    $77 = $ReallocAsyncCtx10 + 28 | 0; //@line 30951
    HEAP32[$77 >> 2] = $67; //@line 30952
    sp = STACKTOP; //@line 30953
    return;
   }
   HEAP32[___async_retval >> 2] = $70; //@line 30957
   ___async_unwind = 0; //@line 30958
   HEAP32[$ReallocAsyncCtx10 >> 2] = 148; //@line 30959
   $71 = $ReallocAsyncCtx10 + 4 | 0; //@line 30960
   $$expand_i1_val = $2 & 1; //@line 30961
   HEAP8[$71 >> 0] = $$expand_i1_val; //@line 30962
   $72 = $ReallocAsyncCtx10 + 8 | 0; //@line 30963
   HEAP32[$72 >> 2] = $4; //@line 30964
   $73 = $ReallocAsyncCtx10 + 12 | 0; //@line 30965
   HEAP32[$73 >> 2] = $6; //@line 30966
   $74 = $ReallocAsyncCtx10 + 16 | 0; //@line 30967
   HEAP32[$74 >> 2] = $46; //@line 30968
   $75 = $ReallocAsyncCtx10 + 20 | 0; //@line 30969
   HEAP32[$75 >> 2] = $48; //@line 30970
   $76 = $ReallocAsyncCtx10 + 24 | 0; //@line 30971
   HEAP32[$76 >> 2] = $68; //@line 30972
   $77 = $ReallocAsyncCtx10 + 28 | 0; //@line 30973
   HEAP32[$77 >> 2] = $67; //@line 30974
   sp = STACKTOP; //@line 30975
   return;
  }
 }
 $79 = HEAP32[174] | 0; //@line 30979
 $80 = HEAP32[167] | 0; //@line 30980
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 30981
 FUNCTION_TABLE_vi[$79 & 1023]($80); //@line 30982
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 150; //@line 30985
  sp = STACKTOP; //@line 30986
  return;
 }
 ___async_unwind = 0; //@line 30989
 HEAP32[$ReallocAsyncCtx7 >> 2] = 150; //@line 30990
 sp = STACKTOP; //@line 30991
 return;
}
function __ZL18lora_event_handler11lora_events($0) {
 $0 = $0 | 0;
 var $$07$i = 0, $1 = 0, $10 = 0, $15 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx31 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 7885
 STACKTOP = STACKTOP + 96 | 0; //@line 7886
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96); //@line 7886
 $vararg_buffer11 = sp + 32 | 0; //@line 7887
 $vararg_buffer8 = sp + 24 | 0; //@line 7888
 $vararg_buffer4 = sp + 16 | 0; //@line 7889
 $vararg_buffer1 = sp + 8 | 0; //@line 7890
 $vararg_buffer = sp; //@line 7891
 $1 = sp + 36 | 0; //@line 7892
 switch ($0 | 0) {
 case 0:
  {
   $AsyncCtx31 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7895
   _puts(15474) | 0; //@line 7896
   if (___async) {
    HEAP32[$AsyncCtx31 >> 2] = 689; //@line 7899
    sp = STACKTOP; //@line 7900
    STACKTOP = sp; //@line 7901
    return;
   }
   _emscripten_free_async_context($AsyncCtx31 | 0); //@line 7903
   STACKTOP = sp; //@line 7904
   return;
  }
 case 1:
  {
   __ZN6events10EventQueue14break_dispatchEv(20448); //@line 7908
   $AsyncCtx27 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7909
   _puts(15498) | 0; //@line 7910
   if (___async) {
    HEAP32[$AsyncCtx27 >> 2] = 690; //@line 7913
    sp = STACKTOP; //@line 7914
    STACKTOP = sp; //@line 7915
    return;
   }
   _emscripten_free_async_context($AsyncCtx27 | 0); //@line 7917
   STACKTOP = sp; //@line 7918
   return;
  }
 case 2:
  {
   $AsyncCtx23 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7922
   _puts(15524) | 0; //@line 7923
   if (___async) {
    HEAP32[$AsyncCtx23 >> 2] = 691; //@line 7926
    sp = STACKTOP; //@line 7927
    STACKTOP = sp; //@line 7928
    return;
   }
   _emscripten_free_async_context($AsyncCtx23 | 0); //@line 7930
   STACKTOP = sp; //@line 7931
   return;
  }
 case 6:
 case 5:
 case 4:
 case 3:
  {
   HEAP32[$vararg_buffer >> 2] = $0; //@line 7935
   _printf(15555, $vararg_buffer) | 0; //@line 7936
   STACKTOP = sp; //@line 7937
   return;
  }
 case 7:
  {
   $AsyncCtx19 = _emscripten_alloc_async_context(32, sp) | 0; //@line 7941
   _puts(15592) | 0; //@line 7942
   if (___async) {
    HEAP32[$AsyncCtx19 >> 2] = 692; //@line 7945
    HEAP32[$AsyncCtx19 + 4 >> 2] = $1; //@line 7947
    HEAP32[$AsyncCtx19 + 8 >> 2] = $vararg_buffer1; //@line 7949
    HEAP32[$AsyncCtx19 + 12 >> 2] = $vararg_buffer1; //@line 7951
    HEAP32[$AsyncCtx19 + 16 >> 2] = $vararg_buffer4; //@line 7953
    HEAP32[$AsyncCtx19 + 20 >> 2] = $vararg_buffer4; //@line 7955
    HEAP32[$AsyncCtx19 + 24 >> 2] = $vararg_buffer8; //@line 7957
    HEAP32[$AsyncCtx19 + 28 >> 2] = $vararg_buffer8; //@line 7959
    sp = STACKTOP; //@line 7960
    STACKTOP = sp; //@line 7961
    return;
   }
   _emscripten_free_async_context($AsyncCtx19 | 0); //@line 7963
   dest = $1; //@line 7964
   stop = dest + 50 | 0; //@line 7964
   do {
    HEAP8[dest >> 0] = 0; //@line 7964
    dest = dest + 1 | 0; //@line 7964
   } while ((dest | 0) < (stop | 0));
   $9 = __ZN16LoRaWANInterface7receiveEhPhti(20652, 15, $1, 50, 3) | 0; //@line 7965
   $10 = $9 << 16 >> 16; //@line 7966
   do {
    if ($9 << 16 >> 16 < 0) {
     HEAP32[$vararg_buffer1 >> 2] = $10; //@line 7970
     _printf(15629, $vararg_buffer1) | 0; //@line 7971
    } else {
     HEAP32[$vararg_buffer4 >> 2] = 15; //@line 7973
     HEAP32[$vararg_buffer4 + 4 >> 2] = $10; //@line 7975
     _printf(15656, $vararg_buffer4) | 0; //@line 7976
     if ($9 << 16 >> 16) {
      $$07$i = 0; //@line 7979
      $15 = 0; //@line 7979
      do {
       HEAP32[$vararg_buffer8 >> 2] = HEAPU8[$1 + $15 >> 0]; //@line 7984
       _printf(15695, $vararg_buffer8) | 0; //@line 7985
       $$07$i = $$07$i + 1 << 24 >> 24; //@line 7986
       $15 = $$07$i & 255; //@line 7987
      } while (($15 | 0) < ($10 | 0));
     }
     $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 7996
     _putchar(10) | 0; //@line 7997
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 693; //@line 8000
      HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 8002
      sp = STACKTOP; //@line 8003
      STACKTOP = sp; //@line 8004
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 8006
      break;
     }
    }
   } while (0);
   STACKTOP = sp; //@line 8011
   return;
  }
 case 9:
 case 8:
  {
   HEAP32[$vararg_buffer11 >> 2] = $0; //@line 8015
   _printf(15701, $vararg_buffer11) | 0; //@line 8016
   STACKTOP = sp; //@line 8017
   return;
  }
 case 10:
  {
   $AsyncCtx15 = _emscripten_alloc_async_context(4, sp) | 0; //@line 8021
   _puts(15733) | 0; //@line 8022
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 694; //@line 8025
    sp = STACKTOP; //@line 8026
    STACKTOP = sp; //@line 8027
    return;
   }
   _emscripten_free_async_context($AsyncCtx15 | 0); //@line 8029
   STACKTOP = sp; //@line 8030
   return;
  }
 default:
  {
   STACKTOP = sp; //@line 8034
   return;
  }
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb($0) {
 $0 = $0 | 0;
 var $$pre$i = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 20801
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20803
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20805
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20809
 $10 = HEAP16[$0 + 20 >> 1] | 0; //@line 20811
 $12 = HEAP16[$0 + 22 >> 1] | 0; //@line 20813
 $14 = HEAP8[$0 + 24 >> 0] | 0; //@line 20815
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 20817
 $$pre$i = HEAP32[HEAP32[$0 + 12 >> 2] >> 2] | 0; //@line 20818
 $17 = $2 + 12 | 0; //@line 20819
 HEAP32[$17 >> 2] = $$pre$i; //@line 20820
 if (!$$pre$i) {
  $30 = $4 + 12 | 0; //@line 20823
  HEAP32[$30 >> 2] = 0; //@line 20824
  $31 = $4 + 16 | 0; //@line 20825
  HEAP32[$31 >> 2] = $8; //@line 20826
  HEAP16[$4 + 20 >> 1] = $10; //@line 20828
  HEAP16[$4 + 22 >> 1] = $12; //@line 20830
  HEAP8[$4 + 24 >> 0] = $14; //@line 20832
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 20833
  $35 = _equeue_alloc($16, 28) | 0; //@line 20834
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 300; //@line 20837
   $36 = $ReallocAsyncCtx7 + 4 | 0; //@line 20838
   HEAP32[$36 >> 2] = $17; //@line 20839
   $37 = $ReallocAsyncCtx7 + 8 | 0; //@line 20840
   HEAP32[$37 >> 2] = $2; //@line 20841
   $38 = $ReallocAsyncCtx7 + 12 | 0; //@line 20842
   HEAP32[$38 >> 2] = $30; //@line 20843
   $39 = $ReallocAsyncCtx7 + 16 | 0; //@line 20844
   HEAP32[$39 >> 2] = $4; //@line 20845
   $40 = $ReallocAsyncCtx7 + 20 | 0; //@line 20846
   HEAP32[$40 >> 2] = $31; //@line 20847
   $41 = $ReallocAsyncCtx7 + 24 | 0; //@line 20848
   HEAP32[$41 >> 2] = $16; //@line 20849
   $42 = $ReallocAsyncCtx7 + 28 | 0; //@line 20850
   HEAP32[$42 >> 2] = $30; //@line 20851
   sp = STACKTOP; //@line 20852
   return;
  }
  HEAP32[___async_retval >> 2] = $35; //@line 20856
  ___async_unwind = 0; //@line 20857
  HEAP32[$ReallocAsyncCtx7 >> 2] = 300; //@line 20858
  $36 = $ReallocAsyncCtx7 + 4 | 0; //@line 20859
  HEAP32[$36 >> 2] = $17; //@line 20860
  $37 = $ReallocAsyncCtx7 + 8 | 0; //@line 20861
  HEAP32[$37 >> 2] = $2; //@line 20862
  $38 = $ReallocAsyncCtx7 + 12 | 0; //@line 20863
  HEAP32[$38 >> 2] = $30; //@line 20864
  $39 = $ReallocAsyncCtx7 + 16 | 0; //@line 20865
  HEAP32[$39 >> 2] = $4; //@line 20866
  $40 = $ReallocAsyncCtx7 + 20 | 0; //@line 20867
  HEAP32[$40 >> 2] = $31; //@line 20868
  $41 = $ReallocAsyncCtx7 + 24 | 0; //@line 20869
  HEAP32[$41 >> 2] = $16; //@line 20870
  $42 = $ReallocAsyncCtx7 + 28 | 0; //@line 20871
  HEAP32[$42 >> 2] = $30; //@line 20872
  sp = STACKTOP; //@line 20873
  return;
 } else {
  $20 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 20878
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 20879
  FUNCTION_TABLE_vii[$20 & 15]($4, $2); //@line 20880
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 299; //@line 20883
   $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 20884
   HEAP32[$21 >> 2] = $17; //@line 20885
   $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 20886
   HEAP32[$22 >> 2] = $2; //@line 20887
   $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 20888
   HEAP32[$23 >> 2] = $4; //@line 20889
   $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 20890
   HEAP32[$24 >> 2] = $17; //@line 20891
   $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 20892
   HEAP32[$25 >> 2] = $8; //@line 20893
   $26 = $ReallocAsyncCtx2 + 24 | 0; //@line 20894
   HEAP16[$26 >> 1] = $10; //@line 20895
   $27 = $ReallocAsyncCtx2 + 26 | 0; //@line 20896
   HEAP16[$27 >> 1] = $12; //@line 20897
   $28 = $ReallocAsyncCtx2 + 28 | 0; //@line 20898
   HEAP8[$28 >> 0] = $14; //@line 20899
   $29 = $ReallocAsyncCtx2 + 32 | 0; //@line 20900
   HEAP32[$29 >> 2] = $16; //@line 20901
   sp = STACKTOP; //@line 20902
   return;
  }
  ___async_unwind = 0; //@line 20905
  HEAP32[$ReallocAsyncCtx2 >> 2] = 299; //@line 20906
  $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 20907
  HEAP32[$21 >> 2] = $17; //@line 20908
  $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 20909
  HEAP32[$22 >> 2] = $2; //@line 20910
  $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 20911
  HEAP32[$23 >> 2] = $4; //@line 20912
  $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 20913
  HEAP32[$24 >> 2] = $17; //@line 20914
  $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 20915
  HEAP32[$25 >> 2] = $8; //@line 20916
  $26 = $ReallocAsyncCtx2 + 24 | 0; //@line 20917
  HEAP16[$26 >> 1] = $10; //@line 20918
  $27 = $ReallocAsyncCtx2 + 26 | 0; //@line 20919
  HEAP16[$27 >> 1] = $12; //@line 20920
  $28 = $ReallocAsyncCtx2 + 28 | 0; //@line 20921
  HEAP8[$28 >> 0] = $14; //@line 20922
  $29 = $ReallocAsyncCtx2 + 32 | 0; //@line 20923
  HEAP32[$29 >> 2] = $16; //@line 20924
  sp = STACKTOP; //@line 20925
  return;
 }
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_235($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $32 = 0, $33 = 0, $36 = 0, $37 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 14312
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14314
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14316
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14318
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14320
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14322
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 14324
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 14326
 if ($AsyncRetVal | 0) {
  $15 = HEAP32[$10 >> 2] | 0; //@line 14329
  if (!$15) {
   HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 14333
   _equeue_event_delay($AsyncRetVal, $2); //@line 14334
   _equeue_event_dtor($AsyncRetVal, 283); //@line 14335
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 14336
   $27 = _equeue_post($4, 284, $AsyncRetVal) | 0; //@line 14337
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 566; //@line 14340
    $28 = $ReallocAsyncCtx4 + 4 | 0; //@line 14341
    HEAP32[$28 >> 2] = $12; //@line 14342
    $29 = $ReallocAsyncCtx4 + 8 | 0; //@line 14343
    HEAP32[$29 >> 2] = $10; //@line 14344
    $30 = $ReallocAsyncCtx4 + 12 | 0; //@line 14345
    HEAP32[$30 >> 2] = $6; //@line 14346
    sp = STACKTOP; //@line 14347
    return;
   }
   HEAP32[___async_retval >> 2] = $27; //@line 14351
   ___async_unwind = 0; //@line 14352
   HEAP32[$ReallocAsyncCtx4 >> 2] = 566; //@line 14353
   $28 = $ReallocAsyncCtx4 + 4 | 0; //@line 14354
   HEAP32[$28 >> 2] = $12; //@line 14355
   $29 = $ReallocAsyncCtx4 + 8 | 0; //@line 14356
   HEAP32[$29 >> 2] = $10; //@line 14357
   $30 = $ReallocAsyncCtx4 + 12 | 0; //@line 14358
   HEAP32[$30 >> 2] = $6; //@line 14359
   sp = STACKTOP; //@line 14360
   return;
  } else {
   $18 = HEAP32[$15 + 4 >> 2] | 0; //@line 14364
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 14365
   FUNCTION_TABLE_vii[$18 & 15]($AsyncRetVal, $6); //@line 14366
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 565; //@line 14369
    $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 14370
    HEAP32[$19 >> 2] = $8; //@line 14371
    $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 14372
    HEAP32[$20 >> 2] = $AsyncRetVal; //@line 14373
    $21 = $ReallocAsyncCtx2 + 12 | 0; //@line 14374
    HEAP32[$21 >> 2] = $2; //@line 14375
    $22 = $ReallocAsyncCtx2 + 16 | 0; //@line 14376
    HEAP32[$22 >> 2] = $4; //@line 14377
    $23 = $ReallocAsyncCtx2 + 20 | 0; //@line 14378
    HEAP32[$23 >> 2] = $12; //@line 14379
    $24 = $ReallocAsyncCtx2 + 24 | 0; //@line 14380
    HEAP32[$24 >> 2] = $10; //@line 14381
    $25 = $ReallocAsyncCtx2 + 28 | 0; //@line 14382
    HEAP32[$25 >> 2] = $6; //@line 14383
    sp = STACKTOP; //@line 14384
    return;
   }
   ___async_unwind = 0; //@line 14387
   HEAP32[$ReallocAsyncCtx2 >> 2] = 565; //@line 14388
   $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 14389
   HEAP32[$19 >> 2] = $8; //@line 14390
   $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 14391
   HEAP32[$20 >> 2] = $AsyncRetVal; //@line 14392
   $21 = $ReallocAsyncCtx2 + 12 | 0; //@line 14393
   HEAP32[$21 >> 2] = $2; //@line 14394
   $22 = $ReallocAsyncCtx2 + 16 | 0; //@line 14395
   HEAP32[$22 >> 2] = $4; //@line 14396
   $23 = $ReallocAsyncCtx2 + 20 | 0; //@line 14397
   HEAP32[$23 >> 2] = $12; //@line 14398
   $24 = $ReallocAsyncCtx2 + 24 | 0; //@line 14399
   HEAP32[$24 >> 2] = $10; //@line 14400
   $25 = $ReallocAsyncCtx2 + 28 | 0; //@line 14401
   HEAP32[$25 >> 2] = $6; //@line 14402
   sp = STACKTOP; //@line 14403
   return;
  }
 }
 $32 = $12 + 16 | 0; //@line 14407
 HEAP32[$32 >> 2] = 0; //@line 14408
 $33 = HEAP32[$10 >> 2] | 0; //@line 14409
 if ($33 | 0) {
  $36 = HEAP32[$33 + 8 >> 2] | 0; //@line 14413
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 14414
  FUNCTION_TABLE_vi[$36 & 1023]($6); //@line 14415
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 567; //@line 14418
   $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 14419
   HEAP32[$37 >> 2] = $32; //@line 14420
   sp = STACKTOP; //@line 14421
   return;
  }
  ___async_unwind = 0; //@line 14424
  HEAP32[$ReallocAsyncCtx3 >> 2] = 567; //@line 14425
  $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 14426
  HEAP32[$37 >> 2] = $32; //@line 14427
  sp = STACKTOP; //@line 14428
  return;
 }
 if (0) {
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 14435
 _mbed_assert_internal(13647, 13665, 57); //@line 14436
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 568; //@line 14439
  sp = STACKTOP; //@line 14440
  return;
 }
 ___async_unwind = 0; //@line 14443
 HEAP32[$ReallocAsyncCtx6 >> 2] = 568; //@line 14444
 sp = STACKTOP; //@line 14445
 return;
}
function _ticker_read_us__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $15 = 0, $17 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $31 = 0, $32 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $49 = 0, $50 = 0, $51 = 0, $53 = 0, $57 = 0, $58 = 0, $59 = 0, $61 = 0, $63 = 0, $64 = 0, $70 = 0, $71 = 0, $72 = 0, $81 = 0, $82 = 0, $83 = 0, $85 = 0, $89 = 0, $90 = 0, $96 = 0, $97 = 0, $98 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31362
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31364
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 31366
 if (($AsyncRetVal | 0) == (HEAP32[(HEAP32[$2 >> 2] | 0) + 32 >> 2] | 0)) {
  $104 = HEAP32[$2 >> 2] | 0; //@line 31372
  $105 = $104 + 48 | 0; //@line 31373
  $106 = $105; //@line 31374
  $107 = $106; //@line 31375
  $108 = HEAP32[$107 >> 2] | 0; //@line 31376
  $109 = $106 + 4 | 0; //@line 31377
  $110 = $109; //@line 31378
  $111 = HEAP32[$110 >> 2] | 0; //@line 31379
  $112 = ___async_retval; //@line 31380
  $113 = $112; //@line 31381
  $114 = $113; //@line 31382
  HEAP32[$114 >> 2] = $108; //@line 31383
  $115 = $113 + 4 | 0; //@line 31384
  $116 = $115; //@line 31385
  HEAP32[$116 >> 2] = $111; //@line 31386
  return;
 }
 $10 = $4 + 32 | 0; //@line 31389
 $15 = $AsyncRetVal - (HEAP32[$10 >> 2] | 0) & HEAP32[$4 + 12 >> 2]; //@line 31394
 HEAP32[$10 >> 2] = $AsyncRetVal; //@line 31395
 $17 = HEAP32[$4 + 8 >> 2] | 0; //@line 31397
 do {
  if (($17 | 0) == 1e6) {
   $96 = $15; //@line 31401
   $97 = 0; //@line 31401
  } else {
   $20 = HEAP8[$4 + 57 >> 0] | 0; //@line 31404
   $22 = ___muldi3($15 | 0, 0, 1e6, 0) | 0; //@line 31406
   $23 = tempRet0; //@line 31407
   if (!($20 << 24 >> 24)) {
    $57 = ___udivdi3($22 | 0, $23 | 0, $17 | 0, 0) | 0; //@line 31409
    $58 = tempRet0; //@line 31410
    $59 = ___muldi3($57 | 0, $58 | 0, $17 | 0, 0) | 0; //@line 31411
    $61 = _i64Subtract($22 | 0, $23 | 0, $59 | 0, tempRet0 | 0) | 0; //@line 31413
    $63 = $4 + 40 | 0; //@line 31415
    $64 = $63; //@line 31416
    $70 = _i64Add($61 | 0, tempRet0 | 0, HEAP32[$64 >> 2] | 0, HEAP32[$64 + 4 >> 2] | 0) | 0; //@line 31422
    $71 = tempRet0; //@line 31423
    $72 = $63; //@line 31424
    HEAP32[$72 >> 2] = $70; //@line 31426
    HEAP32[$72 + 4 >> 2] = $71; //@line 31429
    if ($71 >>> 0 < 0 | ($71 | 0) == 0 & $70 >>> 0 < $17 >>> 0) {
     $96 = $57; //@line 31436
     $97 = $58; //@line 31436
     break;
    }
    $81 = _i64Add($57 | 0, $58 | 0, 1, 0) | 0; //@line 31439
    $82 = tempRet0; //@line 31440
    $83 = _i64Subtract($70 | 0, $71 | 0, $17 | 0, 0) | 0; //@line 31441
    $85 = $63; //@line 31443
    HEAP32[$85 >> 2] = $83; //@line 31445
    HEAP32[$85 + 4 >> 2] = tempRet0; //@line 31448
    $96 = $81; //@line 31449
    $97 = $82; //@line 31449
    break;
   } else {
    $24 = $20 & 255; //@line 31452
    $25 = _bitshift64Lshr($22 | 0, $23 | 0, $24 | 0) | 0; //@line 31453
    $26 = tempRet0; //@line 31454
    $27 = _bitshift64Shl($25 | 0, $26 | 0, $24 | 0) | 0; //@line 31455
    $29 = _i64Subtract($22 | 0, $23 | 0, $27 | 0, tempRet0 | 0) | 0; //@line 31457
    $31 = $4 + 40 | 0; //@line 31459
    $32 = $31; //@line 31460
    $38 = _i64Add(HEAP32[$32 >> 2] | 0, HEAP32[$32 + 4 >> 2] | 0, $29 | 0, tempRet0 | 0) | 0; //@line 31466
    $39 = tempRet0; //@line 31467
    $40 = $31; //@line 31468
    HEAP32[$40 >> 2] = $38; //@line 31470
    HEAP32[$40 + 4 >> 2] = $39; //@line 31473
    if ($39 >>> 0 < 0 | ($39 | 0) == 0 & $38 >>> 0 < $17 >>> 0) {
     $96 = $25; //@line 31480
     $97 = $26; //@line 31480
     break;
    }
    $49 = _i64Add($25 | 0, $26 | 0, 1, 0) | 0; //@line 31483
    $50 = tempRet0; //@line 31484
    $51 = _i64Subtract($38 | 0, $39 | 0, $17 | 0, 0) | 0; //@line 31485
    $53 = $31; //@line 31487
    HEAP32[$53 >> 2] = $51; //@line 31489
    HEAP32[$53 + 4 >> 2] = tempRet0; //@line 31492
    $96 = $49; //@line 31493
    $97 = $50; //@line 31493
    break;
   }
  }
 } while (0);
 $89 = $4 + 48 | 0; //@line 31498
 $90 = $89; //@line 31499
 $98 = _i64Add(HEAP32[$90 >> 2] | 0, HEAP32[$90 + 4 >> 2] | 0, $96 | 0, $97 | 0) | 0; //@line 31505
 $100 = $89; //@line 31507
 HEAP32[$100 >> 2] = $98; //@line 31509
 HEAP32[$100 + 4 >> 2] = tempRet0; //@line 31512
 $104 = HEAP32[$2 >> 2] | 0; //@line 31513
 $105 = $104 + 48 | 0; //@line 31514
 $106 = $105; //@line 31515
 $107 = $106; //@line 31516
 $108 = HEAP32[$107 >> 2] | 0; //@line 31517
 $109 = $106 + 4 | 0; //@line 31518
 $110 = $109; //@line 31519
 $111 = HEAP32[$110 >> 2] | 0; //@line 31520
 $112 = ___async_retval; //@line 31521
 $113 = $112; //@line 31522
 $114 = $113; //@line 31523
 HEAP32[$114 >> 2] = $108; //@line 31524
 $115 = $113 + 4 | 0; //@line 31525
 $116 = $115; //@line 31526
 HEAP32[$116 >> 2] = $111; //@line 31527
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$off0 = 0, $10 = 0, $30 = 0, $36 = 0, $44 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx3 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 829
 STACKTOP = STACKTOP + 32 | 0; //@line 830
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 830
 $5 = sp; //@line 831
 HEAP8[$0 + 689 >> 0] = $1; //@line 834
 $10 = HEAP32[(HEAP32[$0 >> 2] | 0) + 32 >> 2] | 0; //@line 837
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 838
 FUNCTION_TABLE_vii[$10 & 15]($0, $2); //@line 839
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 60; //@line 842
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 844
  HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 846
  HEAP16[$AsyncCtx + 12 >> 1] = $3; //@line 848
  HEAP32[$AsyncCtx + 16 >> 2] = $4; //@line 850
  sp = STACKTOP; //@line 851
  STACKTOP = sp; //@line 852
  return 0; //@line 852
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 854
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 855
 $AsyncCtx19 = _emscripten_alloc_async_context(20, sp) | 0; //@line 856
 _wait_ms(1); //@line 857
 if (___async) {
  HEAP32[$AsyncCtx19 >> 2] = 61; //@line 860
  HEAP32[$AsyncCtx19 + 4 >> 2] = $5; //@line 862
  HEAP16[$AsyncCtx19 + 8 >> 1] = $3; //@line 864
  HEAP32[$AsyncCtx19 + 12 >> 2] = $4; //@line 866
  HEAP32[$AsyncCtx19 + 16 >> 2] = $0; //@line 868
  sp = STACKTOP; //@line 869
  STACKTOP = sp; //@line 870
  return 0; //@line 870
 }
 _emscripten_free_async_context($AsyncCtx19 | 0); //@line 872
 $AsyncCtx6 = _emscripten_alloc_async_context(24, sp) | 0; //@line 873
 __ZN4mbed5TimerC2Ev($5); //@line 874
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 62; //@line 877
  HEAP32[$AsyncCtx6 + 4 >> 2] = $5; //@line 879
  HEAP16[$AsyncCtx6 + 8 >> 1] = $3; //@line 881
  HEAP32[$AsyncCtx6 + 12 >> 2] = $4; //@line 883
  HEAP32[$AsyncCtx6 + 16 >> 2] = $0; //@line 885
  HEAP32[$AsyncCtx6 + 20 >> 2] = $5; //@line 887
  sp = STACKTOP; //@line 888
  STACKTOP = sp; //@line 889
  return 0; //@line 889
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 891
 $AsyncCtx9 = _emscripten_alloc_async_context(24, sp) | 0; //@line 892
 __ZN4mbed5Timer5startEv($5); //@line 893
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 63; //@line 896
  HEAP16[$AsyncCtx9 + 4 >> 1] = $3; //@line 898
  HEAP32[$AsyncCtx9 + 8 >> 2] = $5; //@line 900
  HEAP32[$AsyncCtx9 + 12 >> 2] = $4; //@line 902
  HEAP32[$AsyncCtx9 + 16 >> 2] = $0; //@line 904
  HEAP32[$AsyncCtx9 + 20 >> 2] = $5; //@line 906
  sp = STACKTOP; //@line 907
  STACKTOP = sp; //@line 908
  return 0; //@line 908
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 910
 L13 : do {
  if ($3 << 16 >> 16 < -1) {
   $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 914
   $30 = __ZN4mbed5Timer7read_msEv($5) | 0; //@line 915
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 64; //@line 918
    HEAP32[$AsyncCtx15 + 4 >> 2] = $4; //@line 920
    HEAP32[$AsyncCtx15 + 8 >> 2] = $0; //@line 922
    HEAP32[$AsyncCtx15 + 12 >> 2] = $5; //@line 924
    HEAP32[$AsyncCtx15 + 16 >> 2] = $5; //@line 926
    sp = STACKTOP; //@line 927
    STACKTOP = sp; //@line 928
    return 0; //@line 928
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 930
    $$0$off0 = ($30 | 0) >= ($4 | 0); //@line 932
    break;
   }
  } else {
   while (1) {
    $AsyncCtx12 = _emscripten_alloc_async_context(20, sp) | 0; //@line 937
    $36 = __ZN4mbed5Timer7read_msEv($5) | 0; //@line 938
    if (___async) {
     break;
    }
    _emscripten_free_async_context($AsyncCtx12 | 0); //@line 943
    if (($36 | 0) >= ($4 | 0)) {
     $$0$off0 = 1; //@line 946
     break L13;
    }
   }
   HEAP32[$AsyncCtx12 >> 2] = 65; //@line 950
   HEAP32[$AsyncCtx12 + 4 >> 2] = $4; //@line 952
   HEAP32[$AsyncCtx12 + 8 >> 2] = $5; //@line 954
   HEAP32[$AsyncCtx12 + 12 >> 2] = $0; //@line 956
   HEAP32[$AsyncCtx12 + 16 >> 2] = $5; //@line 958
   sp = STACKTOP; //@line 959
   STACKTOP = sp; //@line 960
   return 0; //@line 960
  }
 } while (0);
 $44 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0; //@line 965
 $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 966
 FUNCTION_TABLE_vi[$44 & 1023]($0); //@line 967
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 66; //@line 970
  HEAP32[$AsyncCtx3 + 4 >> 2] = $5; //@line 972
  HEAP32[$AsyncCtx3 + 8 >> 2] = $5; //@line 974
  HEAP8[$AsyncCtx3 + 12 >> 0] = $$0$off0 & 1; //@line 977
  sp = STACKTOP; //@line 978
  STACKTOP = sp; //@line 979
  return 0; //@line 979
 } else {
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 981
  __ZN4mbed5TimerD2Ev($5); //@line 982
  STACKTOP = sp; //@line 983
  return $$0$off0 | 0; //@line 983
 }
 return 0; //@line 985
}
function __ZN7LoRaMac26on_ack_timeout_timer_eventEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $16 = 0, $17 = 0, $23 = 0, $30 = 0, $33 = 0, $34 = 0, $35 = 0, $44 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx20 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 15271
 STACKTOP = STACKTOP + 16 | 0; //@line 15272
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15272
 $vararg_buffer1 = sp + 8 | 0; //@line 15273
 $vararg_buffer = sp; //@line 15274
 $1 = $0 + 1699 | 0; //@line 15275
 if ((HEAPU8[$1 >> 0] | 0) > (HEAPU8[$0 + 1698 >> 0] | 0)) {
  if ((HEAP32[$0 + 2380 >> 2] | 0) != 2) {
   STACKTOP = sp; //@line 15285
   return;
  }
  HEAP32[$0 + 2056 >> 2] = 1; //@line 15288
  $10 = $0 + 1996 | 0; //@line 15289
  $11 = $0 + 2008 | 0; //@line 15290
  $12 = HEAP32[$11 >> 2] | 0; //@line 15291
  do {
   if (!$12) {
    $AsyncCtx20 = _emscripten_alloc_async_context(12, sp) | 0; //@line 15295
    _mbed_assert_internal(15010, 15015, 528); //@line 15296
    if (___async) {
     HEAP32[$AsyncCtx20 >> 2] = 440; //@line 15299
     HEAP32[$AsyncCtx20 + 4 >> 2] = $11; //@line 15301
     HEAP32[$AsyncCtx20 + 8 >> 2] = $10; //@line 15303
     sp = STACKTOP; //@line 15304
     STACKTOP = sp; //@line 15305
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx20 | 0); //@line 15307
     $17 = HEAP32[$11 >> 2] | 0; //@line 15309
     break;
    }
   } else {
    $17 = $12; //@line 15313
   }
  } while (0);
  $16 = HEAP32[$17 >> 2] | 0; //@line 15316
  $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 15317
  FUNCTION_TABLE_vi[$16 & 1023]($10); //@line 15318
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 441; //@line 15321
   sp = STACKTOP; //@line 15322
   STACKTOP = sp; //@line 15323
   return;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 15325
  STACKTOP = sp; //@line 15326
  return;
 }
 _mbed_tracef(16, 12890, 13261, $vararg_buffer); //@line 15328
 $AsyncCtx13 = _emscripten_alloc_async_context(20, sp) | 0; //@line 15330
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1856 | 0); //@line 15331
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 442; //@line 15334
  HEAP32[$AsyncCtx13 + 4 >> 2] = $1; //@line 15336
  HEAP32[$AsyncCtx13 + 8 >> 2] = $0; //@line 15338
  HEAP32[$AsyncCtx13 + 12 >> 2] = $vararg_buffer1; //@line 15340
  HEAP32[$AsyncCtx13 + 16 >> 2] = $vararg_buffer1; //@line 15342
  sp = STACKTOP; //@line 15343
  STACKTOP = sp; //@line 15344
  return;
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 15346
 $23 = HEAP8[$1 >> 0] | 0; //@line 15347
 if (!($23 & 1)) {
  $34 = $23; //@line 15351
 } else {
  if (!(HEAP8[$0 + 1936 >> 0] | 0)) {
   $34 = $23; //@line 15357
  } else {
   _mbed_tracef(16, 12890, 13295, $vararg_buffer1); //@line 15359
   $30 = $0 + 1877 | 0; //@line 15361
   HEAP8[$30 >> 0] = __ZN7LoRaPHY26get_next_lower_tx_datarateEa($0 + 4 | 0, HEAP8[$30 >> 0] | 0) | 0; //@line 15364
   $34 = HEAP8[$1 >> 0] | 0; //@line 15366
  }
 }
 $33 = $0 + 2063 | 0; //@line 15369
 HEAP8[$33 >> 0] = $34; //@line 15370
 $AsyncCtx9 = _emscripten_alloc_async_context(16, sp) | 0; //@line 15371
 $35 = __ZN7LoRaMac21handle_retransmissionEv($0) | 0; //@line 15372
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 443; //@line 15375
  HEAP32[$AsyncCtx9 + 4 >> 2] = $1; //@line 15377
  HEAP32[$AsyncCtx9 + 8 >> 2] = $0; //@line 15379
  HEAP32[$AsyncCtx9 + 12 >> 2] = $33; //@line 15381
  sp = STACKTOP; //@line 15382
  STACKTOP = sp; //@line 15383
  return;
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 15385
 do {
  if ($35 | 0) {
   __ZN14LoRaMacCommand20clear_command_bufferEv($0 + 476 | 0); //@line 15390
   HEAP8[$0 + 1177 >> 0] = 0; //@line 15392
   HEAP8[$0 + 2062 >> 0] = 0; //@line 15394
   HEAP8[$33 >> 0] = HEAP8[$1 >> 0] | 0; //@line 15396
   $AsyncCtx5 = _emscripten_alloc_async_context(8, sp) | 0; //@line 15397
   $44 = __ZN7LoRaMac21handle_retransmissionEv($0) | 0; //@line 15398
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 444; //@line 15401
    HEAP32[$AsyncCtx5 + 4 >> 2] = $1; //@line 15403
    sp = STACKTOP; //@line 15404
    STACKTOP = sp; //@line 15405
    return;
   }
   _emscripten_free_async_context($AsyncCtx5 | 0); //@line 15407
   if ($44 | 0) {
    $AsyncCtx17 = _emscripten_alloc_async_context(8, sp) | 0; //@line 15410
    _mbed_assert_internal(13109, 13135, 958); //@line 15411
    if (___async) {
     HEAP32[$AsyncCtx17 >> 2] = 445; //@line 15414
     HEAP32[$AsyncCtx17 + 4 >> 2] = $1; //@line 15416
     sp = STACKTOP; //@line 15417
     STACKTOP = sp; //@line 15418
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx17 | 0); //@line 15420
     break;
    }
   }
  }
 } while (0);
 HEAP8[$1 >> 0] = (HEAP8[$1 >> 0] | 0) + 1 << 24 >> 24; //@line 15428
 STACKTOP = sp; //@line 15429
 return;
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $15 = 0, $16 = 0, $17 = 0, $25 = 0, $28 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $42 = 0, $43 = 0, $46 = 0, $49 = 0, $5 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx16 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 8
 STACKTOP = STACKTOP + 16 | 0; //@line 9
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 9
 $3 = sp; //@line 10
 $4 = HEAP32[$0 >> 2] | 0; //@line 11
 $5 = $1 + 12 | 0; //@line 12
 $6 = HEAP32[$5 >> 2] | 0; //@line 13
 do {
  if (!$6) {
   $16 = 0; //@line 17
  } else {
   $9 = HEAP32[$6 + 4 >> 2] | 0; //@line 20
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 21
   FUNCTION_TABLE_vii[$9 & 15]($3, $1); //@line 22
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 563; //@line 25
    HEAP32[$AsyncCtx + 4 >> 2] = $5; //@line 27
    HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 29
    HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 31
    HEAP32[$AsyncCtx + 16 >> 2] = $4; //@line 33
    HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 35
    sp = STACKTOP; //@line 36
    STACKTOP = sp; //@line 37
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 39
    $16 = HEAP32[$5 >> 2] | 0; //@line 41
    break;
   }
  }
 } while (0);
 $15 = $3 + 12 | 0; //@line 46
 HEAP32[$15 >> 2] = $16; //@line 47
 $AsyncCtx12 = _emscripten_alloc_async_context(28, sp) | 0; //@line 48
 $17 = _equeue_alloc($4, 16) | 0; //@line 49
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 564; //@line 52
  HEAP32[$AsyncCtx12 + 4 >> 2] = $2; //@line 54
  HEAP32[$AsyncCtx12 + 8 >> 2] = $4; //@line 56
  HEAP32[$AsyncCtx12 + 12 >> 2] = $3; //@line 58
  HEAP32[$AsyncCtx12 + 16 >> 2] = $15; //@line 60
  HEAP32[$AsyncCtx12 + 20 >> 2] = $15; //@line 62
  HEAP32[$AsyncCtx12 + 24 >> 2] = $1; //@line 64
  sp = STACKTOP; //@line 65
  STACKTOP = sp; //@line 66
  return;
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 68
 do {
  if (!$17) {
   $$0$i = 0; //@line 72
  } else {
   $25 = HEAP32[$15 >> 2] | 0; //@line 74
   do {
    if (!$25) {
     $37 = 0; //@line 78
    } else {
     $28 = HEAP32[$25 + 4 >> 2] | 0; //@line 81
     $AsyncCtx2 = _emscripten_alloc_async_context(32, sp) | 0; //@line 82
     FUNCTION_TABLE_vii[$28 & 15]($17, $3); //@line 83
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 565; //@line 86
      HEAP32[$AsyncCtx2 + 4 >> 2] = $15; //@line 88
      HEAP32[$AsyncCtx2 + 8 >> 2] = $17; //@line 90
      HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 92
      HEAP32[$AsyncCtx2 + 16 >> 2] = $4; //@line 94
      HEAP32[$AsyncCtx2 + 20 >> 2] = $1; //@line 96
      HEAP32[$AsyncCtx2 + 24 >> 2] = $15; //@line 98
      HEAP32[$AsyncCtx2 + 28 >> 2] = $3; //@line 100
      sp = STACKTOP; //@line 101
      STACKTOP = sp; //@line 102
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx2 | 0); //@line 104
      $37 = HEAP32[$15 >> 2] | 0; //@line 106
      break;
     }
    }
   } while (0);
   HEAP32[$17 + 12 >> 2] = $37; //@line 112
   _equeue_event_delay($17, $2); //@line 113
   _equeue_event_dtor($17, 283); //@line 114
   $AsyncCtx9 = _emscripten_alloc_async_context(16, sp) | 0; //@line 115
   $38 = _equeue_post($4, 284, $17) | 0; //@line 116
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 566; //@line 119
    HEAP32[$AsyncCtx9 + 4 >> 2] = $1; //@line 121
    HEAP32[$AsyncCtx9 + 8 >> 2] = $15; //@line 123
    HEAP32[$AsyncCtx9 + 12 >> 2] = $3; //@line 125
    sp = STACKTOP; //@line 126
    STACKTOP = sp; //@line 127
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx9 | 0); //@line 129
    $$0$i = $38; //@line 130
    break;
   }
  }
 } while (0);
 $42 = $1 + 16 | 0; //@line 135
 HEAP32[$42 >> 2] = $$0$i; //@line 136
 $43 = HEAP32[$15 >> 2] | 0; //@line 137
 do {
  if (!$43) {
   $49 = $$0$i; //@line 141
  } else {
   $46 = HEAP32[$43 + 8 >> 2] | 0; //@line 144
   $AsyncCtx6 = _emscripten_alloc_async_context(8, sp) | 0; //@line 145
   FUNCTION_TABLE_vi[$46 & 1023]($3); //@line 146
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 567; //@line 149
    HEAP32[$AsyncCtx6 + 4 >> 2] = $42; //@line 151
    sp = STACKTOP; //@line 152
    STACKTOP = sp; //@line 153
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx6 | 0); //@line 155
    $49 = HEAP32[$42 >> 2] | 0; //@line 157
    break;
   }
  }
 } while (0);
 if ($49 | 0) {
  STACKTOP = sp; //@line 164
  return;
 }
 $AsyncCtx16 = _emscripten_alloc_async_context(4, sp) | 0; //@line 166
 _mbed_assert_internal(13647, 13665, 57); //@line 167
 if (___async) {
  HEAP32[$AsyncCtx16 >> 2] = 568; //@line 170
  sp = STACKTOP; //@line 171
  STACKTOP = sp; //@line 172
  return;
 }
 _emscripten_free_async_context($AsyncCtx16 | 0); //@line 174
 STACKTOP = sp; //@line 175
 return;
}
function __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_29($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 23292
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23294
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23296
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23302
 HEAP32[HEAP32[$0 + 12 >> 2] >> 2] = HEAP32[HEAP32[$0 + 16 >> 2] >> 2]; //@line 23304
 $11 = $4 + 32 | 0; //@line 23305
 $12 = $4 + 44 | 0; //@line 23306
 $13 = HEAP32[$12 >> 2] | 0; //@line 23307
 if (!$13) {
  HEAP32[___async_retval >> 2] = 0; //@line 23311
  return;
 }
 $15 = $2 + 2532 | 0; //@line 23314
 if (($15 | 0) == ($11 | 0)) {
  $36 = HEAP32[$13 + 4 >> 2] | 0; //@line 23318
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 23319
  FUNCTION_TABLE_vii[$36 & 15]($10, $11); //@line 23320
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 359; //@line 23323
   $37 = $ReallocAsyncCtx7 + 4 | 0; //@line 23324
   HEAP32[$37 >> 2] = $12; //@line 23325
   $38 = $ReallocAsyncCtx7 + 8 | 0; //@line 23326
   HEAP32[$38 >> 2] = $2; //@line 23327
   $39 = $ReallocAsyncCtx7 + 12 | 0; //@line 23328
   HEAP32[$39 >> 2] = $10; //@line 23329
   sp = STACKTOP; //@line 23330
   return;
  }
  ___async_unwind = 0; //@line 23333
  HEAP32[$ReallocAsyncCtx7 >> 2] = 359; //@line 23334
  $37 = $ReallocAsyncCtx7 + 4 | 0; //@line 23335
  HEAP32[$37 >> 2] = $12; //@line 23336
  $38 = $ReallocAsyncCtx7 + 8 | 0; //@line 23337
  HEAP32[$38 >> 2] = $2; //@line 23338
  $39 = $ReallocAsyncCtx7 + 12 | 0; //@line 23339
  HEAP32[$39 >> 2] = $10; //@line 23340
  sp = STACKTOP; //@line 23341
  return;
 }
 $17 = $2 + 2544 | 0; //@line 23344
 $18 = HEAP32[$17 >> 2] | 0; //@line 23345
 if (!$18) {
  $29 = HEAP32[$13 + 4 >> 2] | 0; //@line 23349
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 23350
  FUNCTION_TABLE_vii[$29 & 15]($15, $11); //@line 23351
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 358; //@line 23354
   $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 23355
   HEAP32[$30 >> 2] = $12; //@line 23356
   $31 = $ReallocAsyncCtx6 + 8 | 0; //@line 23357
   HEAP32[$31 >> 2] = $17; //@line 23358
   $32 = $ReallocAsyncCtx6 + 12 | 0; //@line 23359
   HEAP32[$32 >> 2] = $2; //@line 23360
   $33 = $ReallocAsyncCtx6 + 16 | 0; //@line 23361
   HEAP32[$33 >> 2] = $10; //@line 23362
   $34 = $ReallocAsyncCtx6 + 20 | 0; //@line 23363
   HEAP32[$34 >> 2] = $11; //@line 23364
   sp = STACKTOP; //@line 23365
   return;
  }
  ___async_unwind = 0; //@line 23368
  HEAP32[$ReallocAsyncCtx6 >> 2] = 358; //@line 23369
  $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 23370
  HEAP32[$30 >> 2] = $12; //@line 23371
  $31 = $ReallocAsyncCtx6 + 8 | 0; //@line 23372
  HEAP32[$31 >> 2] = $17; //@line 23373
  $32 = $ReallocAsyncCtx6 + 12 | 0; //@line 23374
  HEAP32[$32 >> 2] = $2; //@line 23375
  $33 = $ReallocAsyncCtx6 + 16 | 0; //@line 23376
  HEAP32[$33 >> 2] = $10; //@line 23377
  $34 = $ReallocAsyncCtx6 + 20 | 0; //@line 23378
  HEAP32[$34 >> 2] = $11; //@line 23379
  sp = STACKTOP; //@line 23380
  return;
 } else {
  $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 23384
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 23385
  FUNCTION_TABLE_vi[$21 & 1023]($15); //@line 23386
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 357; //@line 23389
   $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 23390
   HEAP32[$22 >> 2] = $12; //@line 23391
   $23 = $ReallocAsyncCtx5 + 8 | 0; //@line 23392
   HEAP32[$23 >> 2] = $17; //@line 23393
   $24 = $ReallocAsyncCtx5 + 12 | 0; //@line 23394
   HEAP32[$24 >> 2] = $2; //@line 23395
   $25 = $ReallocAsyncCtx5 + 16 | 0; //@line 23396
   HEAP32[$25 >> 2] = $15; //@line 23397
   $26 = $ReallocAsyncCtx5 + 20 | 0; //@line 23398
   HEAP32[$26 >> 2] = $11; //@line 23399
   $27 = $ReallocAsyncCtx5 + 24 | 0; //@line 23400
   HEAP32[$27 >> 2] = $10; //@line 23401
   sp = STACKTOP; //@line 23402
   return;
  }
  ___async_unwind = 0; //@line 23405
  HEAP32[$ReallocAsyncCtx5 >> 2] = 357; //@line 23406
  $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 23407
  HEAP32[$22 >> 2] = $12; //@line 23408
  $23 = $ReallocAsyncCtx5 + 8 | 0; //@line 23409
  HEAP32[$23 >> 2] = $17; //@line 23410
  $24 = $ReallocAsyncCtx5 + 12 | 0; //@line 23411
  HEAP32[$24 >> 2] = $2; //@line 23412
  $25 = $ReallocAsyncCtx5 + 16 | 0; //@line 23413
  HEAP32[$25 >> 2] = $15; //@line 23414
  $26 = $ReallocAsyncCtx5 + 20 | 0; //@line 23415
  HEAP32[$26 >> 2] = $11; //@line 23416
  $27 = $ReallocAsyncCtx5 + 24 | 0; //@line 23417
  HEAP32[$27 >> 2] = $10; //@line 23418
  sp = STACKTOP; //@line 23419
  return;
 }
}
function __ZN12LoRaWANStack21process_joining_stateER14lorawan_status($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $11 = 0, $12 = 0, $16 = 0, $18 = 0, $2 = 0, $24 = 0, $25 = 0, $29 = 0, $3 = 0, $32 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 7423
 STACKTOP = STACKTOP + 32 | 0; //@line 7424
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 7424
 $2 = sp + 8 | 0; //@line 7426
 $3 = $0 + 2496 | 0; //@line 7427
 switch (HEAP32[$3 >> 2] | 0) {
 case 3:
  {
   HEAP32[$3 >> 2] = 1; //@line 7431
   _mbed_tracef(16, 12211, 12377, sp); //@line 7432
   $AsyncCtx10 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7433
   $5 = __ZN7LoRaMac4joinEb($0, 1) | 0; //@line 7434
   if (___async) {
    HEAP32[$AsyncCtx10 >> 2] = 234; //@line 7437
    HEAP32[$AsyncCtx10 + 4 >> 2] = $1; //@line 7439
    sp = STACKTOP; //@line 7440
    STACKTOP = sp; //@line 7441
    return;
   }
   _emscripten_free_async_context($AsyncCtx10 | 0); //@line 7443
   HEAP32[$1 >> 2] = $5; //@line 7444
   STACKTOP = sp; //@line 7445
   return;
  }
 case 4:
  {
   HEAP32[$3 >> 2] = 1; //@line 7449
   $AsyncCtx6 = _emscripten_alloc_async_context(16, sp) | 0; //@line 7450
   $7 = __ZN7LoRaMac24continue_joining_processEv($0) | 0; //@line 7451
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 235; //@line 7454
    HEAP32[$AsyncCtx6 + 4 >> 2] = $2; //@line 7456
    HEAP32[$AsyncCtx6 + 8 >> 2] = $0; //@line 7458
    HEAP32[$AsyncCtx6 + 12 >> 2] = $3; //@line 7460
    sp = STACKTOP; //@line 7461
    STACKTOP = sp; //@line 7462
    return;
   }
   _emscripten_free_async_context($AsyncCtx6 | 0); //@line 7464
   if ($7) {
    STACKTOP = sp; //@line 7466
    return;
   }
   $11 = $0 + 2512 | 0; //@line 7468
   $12 = HEAP32[$11 >> 2] | 0; //@line 7469
   do {
    if ($12 | 0) {
     $16 = HEAP32[$0 + 3168 >> 2] | 0; //@line 7475
     $18 = HEAP32[$12 + 4 >> 2] | 0; //@line 7477
     $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 7478
     FUNCTION_TABLE_vii[$18 & 15]($2, $0 + 2500 | 0); //@line 7479
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 236; //@line 7482
      HEAP32[$AsyncCtx + 4 >> 2] = $11; //@line 7484
      HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 7486
      HEAP32[$AsyncCtx + 12 >> 2] = $16; //@line 7488
      HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 7490
      HEAP32[$AsyncCtx + 20 >> 2] = $3; //@line 7492
      sp = STACKTOP; //@line 7493
      STACKTOP = sp; //@line 7494
      return;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 7496
     $24 = $2 + 12 | 0; //@line 7498
     HEAP32[$24 >> 2] = HEAP32[$11 >> 2]; //@line 7499
     $AsyncCtx13 = _emscripten_alloc_async_context(16, sp) | 0; //@line 7500
     $25 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($16, $2, 10) | 0; //@line 7501
     if (___async) {
      HEAP32[$AsyncCtx13 >> 2] = 237; //@line 7504
      HEAP32[$AsyncCtx13 + 4 >> 2] = $24; //@line 7506
      HEAP32[$AsyncCtx13 + 8 >> 2] = $2; //@line 7508
      HEAP32[$AsyncCtx13 + 12 >> 2] = $3; //@line 7510
      sp = STACKTOP; //@line 7511
      STACKTOP = sp; //@line 7512
      return;
     }
     _emscripten_free_async_context($AsyncCtx13 | 0); //@line 7514
     $29 = HEAP32[$24 >> 2] | 0; //@line 7515
     do {
      if ($29 | 0) {
       $32 = HEAP32[$29 + 8 >> 2] | 0; //@line 7520
       $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 7521
       FUNCTION_TABLE_vi[$32 & 1023]($2); //@line 7522
       if (___async) {
        HEAP32[$AsyncCtx2 >> 2] = 238; //@line 7525
        HEAP32[$AsyncCtx2 + 4 >> 2] = $25; //@line 7527
        HEAP32[$AsyncCtx2 + 8 >> 2] = $2; //@line 7529
        HEAP32[$AsyncCtx2 + 12 >> 2] = $3; //@line 7531
        sp = STACKTOP; //@line 7532
        STACKTOP = sp; //@line 7533
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7535
        break;
       }
      }
     } while (0);
     if (!$25) {
      $AsyncCtx17 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7542
      _mbed_assert_internal(12104, 12113, 775); //@line 7543
      if (___async) {
       HEAP32[$AsyncCtx17 >> 2] = 239; //@line 7546
       HEAP32[$AsyncCtx17 + 4 >> 2] = $2; //@line 7548
       HEAP32[$AsyncCtx17 + 8 >> 2] = $3; //@line 7550
       sp = STACKTOP; //@line 7551
       STACKTOP = sp; //@line 7552
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx17 | 0); //@line 7554
       break;
      }
     }
    }
   } while (0);
   HEAP32[$3 >> 2] = 2; //@line 7560
   STACKTOP = sp; //@line 7561
   return;
  }
 default:
  {
   STACKTOP = sp; //@line 7565
   return;
  }
 }
}
function __ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 var $13 = 0, $17 = 0, $18 = 0, $19 = 0, $22 = 0, $27 = 0, $28 = 0, $35 = 0, $39 = 0, $50 = 0, $56 = 0, $73 = 0, $74 = 0, $75 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 12905
 $13 = HEAP8[$1 + ($3 + 8 & 255) >> 0] | 0; //@line 12909
 $17 = $3 + 9 & 255; //@line 12913
 $18 = ($2 & 65535) + 252 - $17 | 0; //@line 12914
 $19 = $18 & 255; //@line 12915
 HEAP8[$0 + 2025 >> 0] = $13; //@line 12917
 $22 = $3 << 24 >> 24 == 0; //@line 12919
 if ($13 << 24 >> 24) {
  do {
   if (!$22) {
    $50 = $0 + 476 | 0; //@line 12923
    $AsyncCtx7 = _emscripten_alloc_async_context(36, sp) | 0; //@line 12929
    $56 = __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($50, $1, 8, $17 + 255 & 255, $9, $0 + 2084 | 0, $0 + 1876 | 0, $0 + 4 | 0) | 0; //@line 12930
    if (___async) {
     HEAP32[$AsyncCtx7 >> 2] = 398; //@line 12933
     HEAP32[$AsyncCtx7 + 4 >> 2] = $50; //@line 12935
     HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 12937
     HEAP32[$AsyncCtx7 + 12 >> 2] = $1; //@line 12939
     HEAP32[$AsyncCtx7 + 16 >> 2] = $17; //@line 12941
     HEAP32[$AsyncCtx7 + 20 >> 2] = $18; //@line 12943
     HEAP32[$AsyncCtx7 + 24 >> 2] = $5; //@line 12945
     HEAP32[$AsyncCtx7 + 28 >> 2] = $6; //@line 12947
     HEAP32[$AsyncCtx7 + 32 >> 2] = $7; //@line 12949
     sp = STACKTOP; //@line 12950
     return;
    }
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 12953
    if (!$56) {
     if (!(__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($50) | 0)) {
      break;
     }
     HEAP32[$0 + 2076 >> 2] = 4; //@line 12961
     HEAP8[$0 + 2080 >> 0] = 1; //@line 12963
     __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($50); //@line 12964
     break;
    } else {
     HEAP32[$0 + 2020 >> 2] = 1; //@line 12968
     return;
    }
   }
  } while (0);
  $73 = $18 & 255; //@line 12976
  $74 = $0 + 1442 | 0; //@line 12977
  $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 12978
  $75 = __ZN13LoRaMacCrypto15decrypt_payloadEPKhtS1_jjhjPh($0 + 756 | 0, $1 + $17 | 0, $73, $5, 128, $6, 1, $7, $74) | 0; //@line 12979
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 399; //@line 12982
   HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 12984
   HEAP32[$AsyncCtx + 8 >> 2] = $74; //@line 12986
   HEAP16[$AsyncCtx + 12 >> 1] = $73; //@line 12988
   sp = STACKTOP; //@line 12989
   return;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 12992
  if (!$75) {
   HEAP32[$0 + 2028 >> 2] = $74; //@line 12996
   HEAP16[$0 + 2032 >> 1] = $73; //@line 12998
   HEAP8[$0 + 2034 >> 0] = 1; //@line 13000
   return;
  } else {
   HEAP32[$0 + 2020 >> 2] = 13; //@line 13004
   return;
  }
 }
 if (!$22) {
  HEAP8[$0 + 2012 >> 0] = 0; //@line 13010
  HEAP8[$0 + 2062 >> 0] = 0; //@line 13012
  HEAP8[$0 + 2044 >> 0] = 0; //@line 13014
  return;
 }
 $27 = $0 + 1442 | 0; //@line 13021
 $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 13022
 $28 = __ZN13LoRaMacCrypto15decrypt_payloadEPKhtS1_jjhjPh($0 + 756 | 0, $1 + $17 | 0, $18 & 255, $4, 128, $6, 1, $7, $27) | 0; //@line 13023
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 396; //@line 13026
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 13028
  HEAP32[$AsyncCtx3 + 8 >> 2] = $27; //@line 13030
  HEAP8[$AsyncCtx3 + 12 >> 0] = $19; //@line 13032
  HEAP8[$AsyncCtx3 + 13 >> 0] = $9; //@line 13034
  sp = STACKTOP; //@line 13035
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 13038
 if ($28 | 0) {
  HEAP32[$0 + 2020 >> 2] = 13; //@line 13042
 }
 $35 = $0 + 476 | 0; //@line 13044
 $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 13048
 $39 = __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($35, $27, 0, $19, $9, $0 + 2084 | 0, $0 + 1876 | 0, $0 + 4 | 0) | 0; //@line 13049
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 397; //@line 13052
  HEAP32[$AsyncCtx11 + 4 >> 2] = $35; //@line 13054
  HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 13056
  sp = STACKTOP; //@line 13057
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 13060
 if ($39 | 0) {
  HEAP32[$0 + 2020 >> 2] = 1; //@line 13064
  return;
 }
 if (!(__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($35) | 0)) {
  return;
 }
 HEAP32[$0 + 2076 >> 2] = 4; //@line 13072
 HEAP8[$0 + 2080 >> 0] = 1; //@line 13074
 __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($35); //@line 13075
 return;
}
function _initialize__async_cb_419($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 30400
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30402
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30404
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30406
 $10 = HEAP32[(HEAP32[$0 + 16 >> 2] | 0) + 4 >> 2] | 0; //@line 30410
 if (($10 + -4 | 0) >>> 0 > 28) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 30414
  _mbed_assert_internal(14462, 14464, 55); //@line 30415
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 621; //@line 30418
   $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 30419
   HEAP32[$12 >> 2] = $2; //@line 30420
   $13 = $ReallocAsyncCtx6 + 8 | 0; //@line 30421
   HEAP32[$13 >> 2] = $4; //@line 30422
   $14 = $ReallocAsyncCtx6 + 12 | 0; //@line 30423
   HEAP32[$14 >> 2] = 1e6; //@line 30424
   $15 = $ReallocAsyncCtx6 + 16 | 0; //@line 30425
   HEAP32[$15 >> 2] = $6; //@line 30426
   $16 = $ReallocAsyncCtx6 + 20 | 0; //@line 30427
   HEAP8[$16 >> 0] = 0; //@line 30428
   sp = STACKTOP; //@line 30429
   return;
  }
  ___async_unwind = 0; //@line 30432
  HEAP32[$ReallocAsyncCtx6 >> 2] = 621; //@line 30433
  $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 30434
  HEAP32[$12 >> 2] = $2; //@line 30435
  $13 = $ReallocAsyncCtx6 + 8 | 0; //@line 30436
  HEAP32[$13 >> 2] = $4; //@line 30437
  $14 = $ReallocAsyncCtx6 + 12 | 0; //@line 30438
  HEAP32[$14 >> 2] = 1e6; //@line 30439
  $15 = $ReallocAsyncCtx6 + 16 | 0; //@line 30440
  HEAP32[$15 >> 2] = $6; //@line 30441
  $16 = $ReallocAsyncCtx6 + 20 | 0; //@line 30442
  HEAP8[$16 >> 0] = 0; //@line 30443
  sp = STACKTOP; //@line 30444
  return;
 } else {
  $18 = 7 << $10 + -4; //@line 30448
  $19 = ___muldi3($18 | 0, 0, 1e6, 0) | 0; //@line 30449
  $20 = tempRet0; //@line 30450
  $21 = _i64Add(1e6, 0, -1, -1) | 0; //@line 30451
  $23 = _i64Add($21 | 0, tempRet0 | 0, $19 | 0, $20 | 0) | 0; //@line 30453
  $25 = ___udivdi3($23 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 30455
  $26 = tempRet0; //@line 30456
  $27 = HEAP32[$2 >> 2] | 0; //@line 30457
  HEAP32[$27 >> 2] = 0; //@line 30458
  HEAP32[$27 + 4 >> 2] = 0; //@line 30460
  $31 = HEAP32[(HEAP32[$6 >> 2] | 0) + 4 >> 2] | 0; //@line 30463
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(40) | 0; //@line 30464
  $32 = FUNCTION_TABLE_i[$31 & 7]() | 0; //@line 30465
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 622; //@line 30468
   $33 = $ReallocAsyncCtx3 + 4 | 0; //@line 30469
   HEAP32[$33 >> 2] = $2; //@line 30470
   $34 = $ReallocAsyncCtx3 + 8 | 0; //@line 30471
   HEAP32[$34 >> 2] = 1e6; //@line 30472
   $35 = $ReallocAsyncCtx3 + 12 | 0; //@line 30473
   HEAP8[$35 >> 0] = 0; //@line 30474
   $36 = $ReallocAsyncCtx3 + 16 | 0; //@line 30475
   HEAP32[$36 >> 2] = $10; //@line 30476
   $37 = $ReallocAsyncCtx3 + 20 | 0; //@line 30477
   HEAP32[$37 >> 2] = $18; //@line 30478
   $38 = $ReallocAsyncCtx3 + 24 | 0; //@line 30479
   $39 = $38; //@line 30480
   $40 = $39; //@line 30481
   HEAP32[$40 >> 2] = $25; //@line 30482
   $41 = $39 + 4 | 0; //@line 30483
   $42 = $41; //@line 30484
   HEAP32[$42 >> 2] = $26; //@line 30485
   $43 = $ReallocAsyncCtx3 + 32 | 0; //@line 30486
   HEAP32[$43 >> 2] = $6; //@line 30487
   $44 = $ReallocAsyncCtx3 + 36 | 0; //@line 30488
   HEAP32[$44 >> 2] = $4; //@line 30489
   sp = STACKTOP; //@line 30490
   return;
  }
  HEAP32[___async_retval >> 2] = $32; //@line 30494
  ___async_unwind = 0; //@line 30495
  HEAP32[$ReallocAsyncCtx3 >> 2] = 622; //@line 30496
  $33 = $ReallocAsyncCtx3 + 4 | 0; //@line 30497
  HEAP32[$33 >> 2] = $2; //@line 30498
  $34 = $ReallocAsyncCtx3 + 8 | 0; //@line 30499
  HEAP32[$34 >> 2] = 1e6; //@line 30500
  $35 = $ReallocAsyncCtx3 + 12 | 0; //@line 30501
  HEAP8[$35 >> 0] = 0; //@line 30502
  $36 = $ReallocAsyncCtx3 + 16 | 0; //@line 30503
  HEAP32[$36 >> 2] = $10; //@line 30504
  $37 = $ReallocAsyncCtx3 + 20 | 0; //@line 30505
  HEAP32[$37 >> 2] = $18; //@line 30506
  $38 = $ReallocAsyncCtx3 + 24 | 0; //@line 30507
  $39 = $38; //@line 30508
  $40 = $39; //@line 30509
  HEAP32[$40 >> 2] = $25; //@line 30510
  $41 = $39 + 4 | 0; //@line 30511
  $42 = $41; //@line 30512
  HEAP32[$42 >> 2] = $26; //@line 30513
  $43 = $ReallocAsyncCtx3 + 32 | 0; //@line 30514
  HEAP32[$43 >> 2] = $6; //@line 30515
  $44 = $ReallocAsyncCtx3 + 36 | 0; //@line 30516
  HEAP32[$44 >> 2] = $4; //@line 30517
  sp = STACKTOP; //@line 30518
  return;
 }
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_186($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 32695
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32697
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32699
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32701
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32703
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32705
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 32707
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 32709
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 32711
 $19 = HEAP32[HEAP32[$0 + 36 >> 2] >> 2] | 0; //@line 32714
 if (!$19) {
  $31 = $10 + 12 | 0; //@line 32718
  HEAP32[$10 >> 2] = 465; //@line 32719
  HEAP32[$10 + 4 >> 2] = 0; //@line 32721
  HEAP32[$10 + 8 >> 2] = $4; //@line 32723
  HEAP32[$31 >> 2] = 860; //@line 32724
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(36) | 0; //@line 32725
  __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($2, $4 + 1816 | 0, $10); //@line 32726
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 466; //@line 32729
   $32 = $ReallocAsyncCtx7 + 4 | 0; //@line 32730
   HEAP32[$32 >> 2] = $2; //@line 32731
   $33 = $ReallocAsyncCtx7 + 8 | 0; //@line 32732
   HEAP32[$33 >> 2] = $4; //@line 32733
   $34 = $ReallocAsyncCtx7 + 12 | 0; //@line 32734
   HEAP32[$34 >> 2] = $6; //@line 32735
   $35 = $ReallocAsyncCtx7 + 16 | 0; //@line 32736
   HEAP32[$35 >> 2] = $8; //@line 32737
   $36 = $ReallocAsyncCtx7 + 20 | 0; //@line 32738
   HEAP32[$36 >> 2] = $31; //@line 32739
   $37 = $ReallocAsyncCtx7 + 24 | 0; //@line 32740
   HEAP32[$37 >> 2] = $14; //@line 32741
   $38 = $ReallocAsyncCtx7 + 28 | 0; //@line 32742
   HEAP32[$38 >> 2] = $12; //@line 32743
   $39 = $ReallocAsyncCtx7 + 32 | 0; //@line 32744
   HEAP32[$39 >> 2] = $10; //@line 32745
   sp = STACKTOP; //@line 32746
   return;
  }
  ___async_unwind = 0; //@line 32749
  HEAP32[$ReallocAsyncCtx7 >> 2] = 466; //@line 32750
  $32 = $ReallocAsyncCtx7 + 4 | 0; //@line 32751
  HEAP32[$32 >> 2] = $2; //@line 32752
  $33 = $ReallocAsyncCtx7 + 8 | 0; //@line 32753
  HEAP32[$33 >> 2] = $4; //@line 32754
  $34 = $ReallocAsyncCtx7 + 12 | 0; //@line 32755
  HEAP32[$34 >> 2] = $6; //@line 32756
  $35 = $ReallocAsyncCtx7 + 16 | 0; //@line 32757
  HEAP32[$35 >> 2] = $8; //@line 32758
  $36 = $ReallocAsyncCtx7 + 20 | 0; //@line 32759
  HEAP32[$36 >> 2] = $31; //@line 32760
  $37 = $ReallocAsyncCtx7 + 24 | 0; //@line 32761
  HEAP32[$37 >> 2] = $14; //@line 32762
  $38 = $ReallocAsyncCtx7 + 28 | 0; //@line 32763
  HEAP32[$38 >> 2] = $12; //@line 32764
  $39 = $ReallocAsyncCtx7 + 32 | 0; //@line 32765
  HEAP32[$39 >> 2] = $10; //@line 32766
  sp = STACKTOP; //@line 32767
  return;
 } else {
  $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 32771
  $ReallocAsyncCtx = _emscripten_realloc_async_context(32) | 0; //@line 32772
  FUNCTION_TABLE_vi[$22 & 1023]($16); //@line 32773
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 464; //@line 32776
   $23 = $ReallocAsyncCtx + 4 | 0; //@line 32777
   HEAP32[$23 >> 2] = $4; //@line 32778
   $24 = $ReallocAsyncCtx + 8 | 0; //@line 32779
   HEAP32[$24 >> 2] = $10; //@line 32780
   $25 = $ReallocAsyncCtx + 12 | 0; //@line 32781
   HEAP32[$25 >> 2] = $2; //@line 32782
   $26 = $ReallocAsyncCtx + 16 | 0; //@line 32783
   HEAP32[$26 >> 2] = $12; //@line 32784
   $27 = $ReallocAsyncCtx + 20 | 0; //@line 32785
   HEAP32[$27 >> 2] = $14; //@line 32786
   $28 = $ReallocAsyncCtx + 24 | 0; //@line 32787
   HEAP32[$28 >> 2] = $6; //@line 32788
   $29 = $ReallocAsyncCtx + 28 | 0; //@line 32789
   HEAP32[$29 >> 2] = $8; //@line 32790
   sp = STACKTOP; //@line 32791
   return;
  }
  ___async_unwind = 0; //@line 32794
  HEAP32[$ReallocAsyncCtx >> 2] = 464; //@line 32795
  $23 = $ReallocAsyncCtx + 4 | 0; //@line 32796
  HEAP32[$23 >> 2] = $4; //@line 32797
  $24 = $ReallocAsyncCtx + 8 | 0; //@line 32798
  HEAP32[$24 >> 2] = $10; //@line 32799
  $25 = $ReallocAsyncCtx + 12 | 0; //@line 32800
  HEAP32[$25 >> 2] = $2; //@line 32801
  $26 = $ReallocAsyncCtx + 16 | 0; //@line 32802
  HEAP32[$26 >> 2] = $12; //@line 32803
  $27 = $ReallocAsyncCtx + 20 | 0; //@line 32804
  HEAP32[$27 >> 2] = $14; //@line 32805
  $28 = $ReallocAsyncCtx + 24 | 0; //@line 32806
  HEAP32[$28 >> 2] = $6; //@line 32807
  $29 = $ReallocAsyncCtx + 28 | 0; //@line 32808
  HEAP32[$29 >> 2] = $8; //@line 32809
  sp = STACKTOP; //@line 32810
  return;
 }
}
function __ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_69($0) {
 $0 = $0 | 0;
 var $10 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $33 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $trunc = 0, sp = 0;
 sp = STACKTOP; //@line 25485
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25487
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25489
 $6 = HEAP16[$0 + 12 >> 1] | 0; //@line 25491
 $8 = HEAP16[$0 + 14 >> 1] | 0; //@line 25493
 $10 = HEAP8[$0 + 16 >> 0] | 0; //@line 25495
 if ((HEAP32[$4 + 2380 >> 2] | 0) != 2) {
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 25501
  __ZN7LoRaPHY18put_radio_to_sleepEv($4 + 4 | 0); //@line 25502
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 411; //@line 25505
   $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 25506
   HEAP32[$23 >> 2] = $2; //@line 25507
   $24 = $ReallocAsyncCtx4 + 8 | 0; //@line 25508
   HEAP32[$24 >> 2] = $4; //@line 25509
   $25 = $ReallocAsyncCtx4 + 12 | 0; //@line 25510
   HEAP16[$25 >> 1] = $6; //@line 25511
   $26 = $ReallocAsyncCtx4 + 14 | 0; //@line 25512
   HEAP16[$26 >> 1] = $8; //@line 25513
   $27 = $ReallocAsyncCtx4 + 16 | 0; //@line 25514
   HEAP8[$27 >> 0] = $10; //@line 25515
   sp = STACKTOP; //@line 25516
   return;
  }
  ___async_unwind = 0; //@line 25519
  HEAP32[$ReallocAsyncCtx4 >> 2] = 411; //@line 25520
  $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 25521
  HEAP32[$23 >> 2] = $2; //@line 25522
  $24 = $ReallocAsyncCtx4 + 8 | 0; //@line 25523
  HEAP32[$24 >> 2] = $4; //@line 25524
  $25 = $ReallocAsyncCtx4 + 12 | 0; //@line 25525
  HEAP16[$25 >> 1] = $6; //@line 25526
  $26 = $ReallocAsyncCtx4 + 14 | 0; //@line 25527
  HEAP16[$26 >> 1] = $8; //@line 25528
  $27 = $ReallocAsyncCtx4 + 16 | 0; //@line 25529
  HEAP8[$27 >> 0] = $10; //@line 25530
  sp = STACKTOP; //@line 25531
  return;
 }
 if (!(HEAP8[$4 + 2377 >> 0] | 0)) {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 25538
  __ZN7LoRaMac15open_rx2_windowEv($4); //@line 25539
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 410; //@line 25542
   $17 = $ReallocAsyncCtx3 + 4 | 0; //@line 25543
   HEAP32[$17 >> 2] = $2; //@line 25544
   $18 = $ReallocAsyncCtx3 + 8 | 0; //@line 25545
   HEAP32[$18 >> 2] = $4; //@line 25546
   $19 = $ReallocAsyncCtx3 + 12 | 0; //@line 25547
   HEAP16[$19 >> 1] = $6; //@line 25548
   $20 = $ReallocAsyncCtx3 + 14 | 0; //@line 25549
   HEAP16[$20 >> 1] = $8; //@line 25550
   $21 = $ReallocAsyncCtx3 + 16 | 0; //@line 25551
   HEAP8[$21 >> 0] = $10; //@line 25552
   sp = STACKTOP; //@line 25553
   return;
  }
  ___async_unwind = 0; //@line 25556
  HEAP32[$ReallocAsyncCtx3 >> 2] = 410; //@line 25557
  $17 = $ReallocAsyncCtx3 + 4 | 0; //@line 25558
  HEAP32[$17 >> 2] = $2; //@line 25559
  $18 = $ReallocAsyncCtx3 + 8 | 0; //@line 25560
  HEAP32[$18 >> 2] = $4; //@line 25561
  $19 = $ReallocAsyncCtx3 + 12 | 0; //@line 25562
  HEAP16[$19 >> 1] = $6; //@line 25563
  $20 = $ReallocAsyncCtx3 + 14 | 0; //@line 25564
  HEAP16[$20 >> 1] = $8; //@line 25565
  $21 = $ReallocAsyncCtx3 + 16 | 0; //@line 25566
  HEAP8[$21 >> 0] = $10; //@line 25567
  sp = STACKTOP; //@line 25568
  return;
 }
 $trunc = (HEAPU8[$2 >> 0] | 0) >>> 5; //@line 25572
 switch ($trunc & 7) {
 case 1:
  {
   if (HEAP8[$4 + 2376 >> 0] | 0) {
    HEAP8[$4 + 2084 >> 0] = 0; //@line 25581
    return;
   }
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 25584
   __ZN7LoRaMac24handle_join_accept_frameEPKht($4, $2, $6); //@line 25585
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 412; //@line 25588
    $33 = $ReallocAsyncCtx2 + 4 | 0; //@line 25589
    HEAP32[$33 >> 2] = $4; //@line 25590
    sp = STACKTOP; //@line 25591
    return;
   }
   ___async_unwind = 0; //@line 25594
   HEAP32[$ReallocAsyncCtx2 >> 2] = 412; //@line 25595
   $33 = $ReallocAsyncCtx2 + 4 | 0; //@line 25596
   HEAP32[$33 >> 2] = $4; //@line 25597
   sp = STACKTOP; //@line 25598
   return;
  }
 case 7:
 case 5:
 case 3:
  {
   $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 25603
   __ZN7LoRaMac17handle_data_frameEPKhthhsa($4, $2, $6, 1, $trunc, $8, $10); //@line 25604
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 413; //@line 25607
    sp = STACKTOP; //@line 25608
    return;
   }
   ___async_unwind = 0; //@line 25611
   HEAP32[$ReallocAsyncCtx >> 2] = 413; //@line 25612
   sp = STACKTOP; //@line 25613
   return;
  }
 default:
  {
   return;
  }
 }
}
function __ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_68($0) {
 $0 = $0 | 0;
 var $10 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $33 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $trunc = 0, sp = 0;
 sp = STACKTOP; //@line 25343
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25345
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25347
 $6 = HEAP16[$0 + 12 >> 1] | 0; //@line 25349
 $8 = HEAP16[$0 + 14 >> 1] | 0; //@line 25351
 $10 = HEAP8[$0 + 16 >> 0] | 0; //@line 25353
 if ((HEAP32[$4 + 2380 >> 2] | 0) != 2) {
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 25359
  __ZN7LoRaPHY18put_radio_to_sleepEv($4 + 4 | 0); //@line 25360
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 411; //@line 25363
   $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 25364
   HEAP32[$23 >> 2] = $2; //@line 25365
   $24 = $ReallocAsyncCtx4 + 8 | 0; //@line 25366
   HEAP32[$24 >> 2] = $4; //@line 25367
   $25 = $ReallocAsyncCtx4 + 12 | 0; //@line 25368
   HEAP16[$25 >> 1] = $6; //@line 25369
   $26 = $ReallocAsyncCtx4 + 14 | 0; //@line 25370
   HEAP16[$26 >> 1] = $8; //@line 25371
   $27 = $ReallocAsyncCtx4 + 16 | 0; //@line 25372
   HEAP8[$27 >> 0] = $10; //@line 25373
   sp = STACKTOP; //@line 25374
   return;
  }
  ___async_unwind = 0; //@line 25377
  HEAP32[$ReallocAsyncCtx4 >> 2] = 411; //@line 25378
  $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 25379
  HEAP32[$23 >> 2] = $2; //@line 25380
  $24 = $ReallocAsyncCtx4 + 8 | 0; //@line 25381
  HEAP32[$24 >> 2] = $4; //@line 25382
  $25 = $ReallocAsyncCtx4 + 12 | 0; //@line 25383
  HEAP16[$25 >> 1] = $6; //@line 25384
  $26 = $ReallocAsyncCtx4 + 14 | 0; //@line 25385
  HEAP16[$26 >> 1] = $8; //@line 25386
  $27 = $ReallocAsyncCtx4 + 16 | 0; //@line 25387
  HEAP8[$27 >> 0] = $10; //@line 25388
  sp = STACKTOP; //@line 25389
  return;
 }
 if (!(HEAP8[$4 + 2377 >> 0] | 0)) {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 25396
  __ZN7LoRaMac15open_rx2_windowEv($4); //@line 25397
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 410; //@line 25400
   $17 = $ReallocAsyncCtx3 + 4 | 0; //@line 25401
   HEAP32[$17 >> 2] = $2; //@line 25402
   $18 = $ReallocAsyncCtx3 + 8 | 0; //@line 25403
   HEAP32[$18 >> 2] = $4; //@line 25404
   $19 = $ReallocAsyncCtx3 + 12 | 0; //@line 25405
   HEAP16[$19 >> 1] = $6; //@line 25406
   $20 = $ReallocAsyncCtx3 + 14 | 0; //@line 25407
   HEAP16[$20 >> 1] = $8; //@line 25408
   $21 = $ReallocAsyncCtx3 + 16 | 0; //@line 25409
   HEAP8[$21 >> 0] = $10; //@line 25410
   sp = STACKTOP; //@line 25411
   return;
  }
  ___async_unwind = 0; //@line 25414
  HEAP32[$ReallocAsyncCtx3 >> 2] = 410; //@line 25415
  $17 = $ReallocAsyncCtx3 + 4 | 0; //@line 25416
  HEAP32[$17 >> 2] = $2; //@line 25417
  $18 = $ReallocAsyncCtx3 + 8 | 0; //@line 25418
  HEAP32[$18 >> 2] = $4; //@line 25419
  $19 = $ReallocAsyncCtx3 + 12 | 0; //@line 25420
  HEAP16[$19 >> 1] = $6; //@line 25421
  $20 = $ReallocAsyncCtx3 + 14 | 0; //@line 25422
  HEAP16[$20 >> 1] = $8; //@line 25423
  $21 = $ReallocAsyncCtx3 + 16 | 0; //@line 25424
  HEAP8[$21 >> 0] = $10; //@line 25425
  sp = STACKTOP; //@line 25426
  return;
 }
 $trunc = (HEAPU8[$2 >> 0] | 0) >>> 5; //@line 25430
 switch ($trunc & 7) {
 case 1:
  {
   if (HEAP8[$4 + 2376 >> 0] | 0) {
    HEAP8[$4 + 2084 >> 0] = 0; //@line 25439
    return;
   }
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 25442
   __ZN7LoRaMac24handle_join_accept_frameEPKht($4, $2, $6); //@line 25443
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 412; //@line 25446
    $33 = $ReallocAsyncCtx2 + 4 | 0; //@line 25447
    HEAP32[$33 >> 2] = $4; //@line 25448
    sp = STACKTOP; //@line 25449
    return;
   }
   ___async_unwind = 0; //@line 25452
   HEAP32[$ReallocAsyncCtx2 >> 2] = 412; //@line 25453
   $33 = $ReallocAsyncCtx2 + 4 | 0; //@line 25454
   HEAP32[$33 >> 2] = $4; //@line 25455
   sp = STACKTOP; //@line 25456
   return;
  }
 case 7:
 case 5:
 case 3:
  {
   $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 25461
   __ZN7LoRaMac17handle_data_frameEPKhthhsa($4, $2, $6, 1, $trunc, $8, $10); //@line 25462
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 413; //@line 25465
    sp = STACKTOP; //@line 25466
    return;
   }
   ___async_unwind = 0; //@line 25469
   HEAP32[$ReallocAsyncCtx >> 2] = 413; //@line 25470
   sp = STACKTOP; //@line 25471
   return;
  }
 default:
  {
   return;
  }
 }
}
function _equeue_cancel($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$sink$in$i$i = 0, $$sink$in$in$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $24 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $42 = 0, $44 = 0, $46 = 0, $49 = 0, $5 = 0, $56 = 0, $57 = 0, $59 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $70 = 0, $72 = 0, $73 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 3570
 if (!$1) {
  return;
 }
 $5 = $0 + 16 | 0; //@line 3577
 $10 = (HEAP32[$0 + 12 >> 2] | 0) + ((1 << HEAP32[$5 >> 2]) + -1 & $1) | 0; //@line 3582
 $11 = $0 + 128 | 0; //@line 3583
 _equeue_mutex_lock($11); //@line 3584
 $12 = $10 + 4 | 0; //@line 3585
 $13 = HEAP8[$12 >> 0] | 0; //@line 3586
 $14 = $13 & 255; //@line 3587
 $15 = HEAP32[$5 >> 2] | 0; //@line 3588
 if (($1 >> $15 | 0) != ($14 | 0)) {
  _equeue_mutex_unlock($11); //@line 3592
  return;
 }
 HEAP32[$10 + 32 >> 2] = 0; //@line 3596
 HEAP32[$10 + 24 >> 2] = -1; //@line 3598
 $24 = (HEAP32[$10 + 20 >> 2] | 0) - (HEAP32[$0 + 4 >> 2] | 0) | 0; //@line 3603
 do {
  if (($24 | 0) >= 0) {
   if (!$24) {
    if ((HEAP8[$10 + 5 >> 0] | 0) != (HEAP8[$0 + 9 >> 0] | 0)) {
     break;
    }
   }
   $32 = $10 + 12 | 0; //@line 3618
   $33 = HEAP32[$32 >> 2] | 0; //@line 3619
   $35 = $10 + 8 | 0; //@line 3621
   $36 = HEAP32[$35 >> 2] | 0; //@line 3622
   $37 = $33; //@line 3623
   if (!$33) {
    $44 = $10 + 16 | 0; //@line 3625
    HEAP32[HEAP32[$44 >> 2] >> 2] = $36; //@line 3627
    $46 = HEAP32[$35 >> 2] | 0; //@line 3628
    if ($46 | 0) {
     $$sink$in$in$i = $44; //@line 3631
     $49 = $46; //@line 3631
     label = 13; //@line 3632
    }
   } else {
    $38 = $33 + 8 | 0; //@line 3635
    HEAP32[$38 >> 2] = $36; //@line 3636
    if ($36 | 0) {
     HEAP32[$36 + 16 >> 2] = $38; //@line 3641
    }
    $42 = $10 + 16 | 0; //@line 3643
    HEAP32[HEAP32[$42 >> 2] >> 2] = $37; //@line 3645
    $$sink$in$in$i = $42; //@line 3647
    $49 = HEAP32[$32 >> 2] | 0; //@line 3647
    label = 13; //@line 3648
   }
   if ((label | 0) == 13) {
    HEAP32[$49 + 16 >> 2] = HEAP32[$$sink$in$in$i >> 2]; //@line 3653
   }
   HEAP8[$12 >> 0] = (($13 + 1 & 255) << $15 | 0) == 0 ? 1 : $14 + 1 & 255; //@line 3662
   _equeue_mutex_unlock($11); //@line 3663
   $56 = $10 + 36 | 0; //@line 3664
   $57 = $56 + -36 | 0; //@line 3665
   $59 = HEAP32[$56 + -8 >> 2] | 0; //@line 3667
   do {
    if ($59 | 0) {
     $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 3671
     FUNCTION_TABLE_vi[$59 & 1023]($56); //@line 3672
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 133; //@line 3675
      HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 3677
      HEAP32[$AsyncCtx + 8 >> 2] = $56; //@line 3679
      HEAP32[$AsyncCtx + 12 >> 2] = $57; //@line 3681
      sp = STACKTOP; //@line 3682
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 3685
      break;
     }
    }
   } while (0);
   $64 = $0 + 156 | 0; //@line 3690
   _equeue_mutex_lock($64); //@line 3691
   $65 = $0 + 24 | 0; //@line 3692
   $66 = HEAP32[$65 >> 2] | 0; //@line 3693
   L28 : do {
    if (!$66) {
     $$02329$i$i = $65; //@line 3697
     label = 24; //@line 3698
    } else {
     $68 = HEAP32[$57 >> 2] | 0; //@line 3700
     $$025$i$i = $65; //@line 3701
     $70 = $66; //@line 3701
     while (1) {
      $69 = HEAP32[$70 >> 2] | 0; //@line 3703
      if ($69 >>> 0 >= $68 >>> 0) {
       break;
      }
      $72 = $70 + 8 | 0; //@line 3708
      $73 = HEAP32[$72 >> 2] | 0; //@line 3709
      if (!$73) {
       $$02329$i$i = $72; //@line 3712
       label = 24; //@line 3713
       break L28;
      } else {
       $$025$i$i = $72; //@line 3716
       $70 = $73; //@line 3716
      }
     }
     if (($69 | 0) == ($68 | 0)) {
      HEAP32[$56 + -24 >> 2] = $70; //@line 3722
      $$02330$i$i = $$025$i$i; //@line 3725
      $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 3725
     } else {
      $$02329$i$i = $$025$i$i; //@line 3727
      label = 24; //@line 3728
     }
    }
   } while (0);
   if ((label | 0) == 24) {
    HEAP32[$56 + -24 >> 2] = 0; //@line 3734
    $$02330$i$i = $$02329$i$i; //@line 3735
    $$sink$in$i$i = $$02329$i$i; //@line 3735
   }
   HEAP32[$56 + -28 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 3739
   HEAP32[$$02330$i$i >> 2] = $57; //@line 3740
   _equeue_mutex_unlock($64); //@line 3741
   return;
  }
 } while (0);
 _equeue_mutex_unlock($11); //@line 3745
 return;
}
function _mbedtls_cipher_cmac_finish__async_cb_278($0) {
 $0 = $0 | 0;
 var $$013$i = 0, $$09$i = 0, $$09$i53 = 0, $$09$i58 = 0, $$sink$sink$i = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $41 = 0, $58 = 0, $6 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $8 = 0, $ReallocAsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 18032
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18034
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18036
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18038
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18040
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18042
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18044
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18046
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 18048
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 18050
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 18052
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 18054
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 18056
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 18058
 $31 = $18 + 16 | 0; //@line 18063
 $32 = $18 + 32 | 0; //@line 18064
 $33 = HEAP32[$32 >> 2] | 0; //@line 18065
 if ($33 >>> 0 < $6 >>> 0) {
  $$013$i = 0; //@line 18068
  do {
   if ($$013$i >>> 0 < $33 >>> 0) {
    $$sink$sink$i = HEAP8[$18 + 16 + $$013$i >> 0] | 0; //@line 18074
   } else {
    $$sink$sink$i = ($$013$i | 0) == ($33 | 0) ? -128 : 0; //@line 18078
   }
   HEAP8[$4 + $$013$i >> 0] = $$sink$sink$i; //@line 18081
   $$013$i = $$013$i + 1 | 0; //@line 18082
  } while (($$013$i | 0) != ($6 | 0));
  $$09$i = 0; //@line 18085
  do {
   $41 = $4 + $$09$i | 0; //@line 18092
   HEAP8[$41 >> 0] = HEAP8[$8 + $$09$i >> 0] ^ HEAP8[$41 >> 0]; //@line 18097
   $$09$i = $$09$i + 1 | 0; //@line 18098
  } while (($$09$i | 0) != ($6 | 0));
  label = 10; //@line 18101
 } else {
  if ($6 | 0) {
   $$09$i53 = 0; //@line 18110
   do {
    HEAP8[$4 + $$09$i53 >> 0] = HEAP8[$22 + $$09$i53 >> 0] ^ HEAP8[$18 + 16 + $$09$i53 >> 0]; //@line 18118
    $$09$i53 = $$09$i53 + 1 | 0; //@line 18119
   } while (($$09$i53 | 0) != ($6 | 0));
   label = 10; //@line 18122
  }
 }
 if ((label | 0) == 10) {
  if ($6 | 0) {
   $$09$i58 = 0; //@line 18133
   do {
    $58 = $18 + $$09$i58 | 0; //@line 18137
    HEAP8[$58 >> 0] = HEAP8[$58 >> 0] ^ HEAP8[$4 + $$09$i58 >> 0]; //@line 18140
    $$09$i58 = $$09$i58 + 1 | 0; //@line 18141
   } while (($$09$i58 | 0) != ($6 | 0));
  }
 }
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(40) | 0; //@line 18151
 $62 = _mbedtls_cipher_update($24, $2, $6, $2, $26) | 0; //@line 18152
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 604; //@line 18155
  $63 = $ReallocAsyncCtx9 + 4 | 0; //@line 18156
  HEAP32[$63 >> 2] = $20; //@line 18157
  $64 = $ReallocAsyncCtx9 + 8 | 0; //@line 18158
  HEAP32[$64 >> 2] = $2; //@line 18159
  $65 = $ReallocAsyncCtx9 + 12 | 0; //@line 18160
  HEAP32[$65 >> 2] = $6; //@line 18161
  $66 = $ReallocAsyncCtx9 + 16 | 0; //@line 18162
  HEAP32[$66 >> 2] = $16; //@line 18163
  $67 = $ReallocAsyncCtx9 + 20 | 0; //@line 18164
  HEAP32[$67 >> 2] = $14; //@line 18165
  $68 = $ReallocAsyncCtx9 + 24 | 0; //@line 18166
  HEAP32[$68 >> 2] = $32; //@line 18167
  $69 = $ReallocAsyncCtx9 + 28 | 0; //@line 18168
  HEAP32[$69 >> 2] = $31; //@line 18169
  $70 = $ReallocAsyncCtx9 + 32 | 0; //@line 18170
  HEAP32[$70 >> 2] = $10; //@line 18171
  $71 = $ReallocAsyncCtx9 + 36 | 0; //@line 18172
  HEAP32[$71 >> 2] = $12; //@line 18173
  sp = STACKTOP; //@line 18174
  return;
 }
 HEAP32[___async_retval >> 2] = $62; //@line 18178
 ___async_unwind = 0; //@line 18179
 HEAP32[$ReallocAsyncCtx9 >> 2] = 604; //@line 18180
 $63 = $ReallocAsyncCtx9 + 4 | 0; //@line 18181
 HEAP32[$63 >> 2] = $20; //@line 18182
 $64 = $ReallocAsyncCtx9 + 8 | 0; //@line 18183
 HEAP32[$64 >> 2] = $2; //@line 18184
 $65 = $ReallocAsyncCtx9 + 12 | 0; //@line 18185
 HEAP32[$65 >> 2] = $6; //@line 18186
 $66 = $ReallocAsyncCtx9 + 16 | 0; //@line 18187
 HEAP32[$66 >> 2] = $16; //@line 18188
 $67 = $ReallocAsyncCtx9 + 20 | 0; //@line 18189
 HEAP32[$67 >> 2] = $14; //@line 18190
 $68 = $ReallocAsyncCtx9 + 24 | 0; //@line 18191
 HEAP32[$68 >> 2] = $32; //@line 18192
 $69 = $ReallocAsyncCtx9 + 28 | 0; //@line 18193
 HEAP32[$69 >> 2] = $31; //@line 18194
 $70 = $ReallocAsyncCtx9 + 32 | 0; //@line 18195
 HEAP32[$70 >> 2] = $10; //@line 18196
 $71 = $ReallocAsyncCtx9 + 36 | 0; //@line 18197
 HEAP32[$71 >> 2] = $12; //@line 18198
 sp = STACKTOP; //@line 18199
 return;
}
function _gcm_mult($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$07475 = 0, $100 = 0, $101 = 0, $103 = 0, $109 = 0, $110 = 0, $111 = 0, $113 = 0, $116 = 0, $120 = 0, $126 = 0, $130 = 0, $134 = 0, $140 = 0, $144 = 0, $148 = 0, $15 = 0, $154 = 0, $158 = 0, $162 = 0, $22 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $46 = 0, $51 = 0, $6 = 0, $60 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $82 = 0, $88 = 0, $92 = 0, $94 = 0;
 $4 = HEAP8[$1 + 15 >> 0] | 0; //@line 4632
 $6 = $4 & 15; //@line 4634
 $8 = $0 + 200 + ($6 << 3) | 0; //@line 4636
 $15 = $0 + 72 + ($6 << 3) | 0; //@line 4643
 $$07475 = 15; //@line 4649
 $22 = $4; //@line 4649
 $27 = HEAP32[$15 >> 2] | 0; //@line 4649
 $28 = HEAP32[$8 >> 2] | 0; //@line 4649
 $29 = HEAP32[$8 + 4 >> 2] | 0; //@line 4649
 $32 = HEAP32[$15 + 4 >> 2] | 0; //@line 4649
 while (1) {
  if (($$07475 | 0) == 15) {
   $69 = $27; //@line 4654
   $70 = $28; //@line 4654
   $71 = $29; //@line 4654
   $74 = $32; //@line 4654
  } else {
   $25 = $22 & 15; //@line 4657
   $30 = _bitshift64Shl($28 | 0, $29 | 0, 60) | 0; //@line 4659
   $31 = tempRet0; //@line 4660
   $33 = _bitshift64Lshr($27 | 0, $32 | 0, 4) | 0; //@line 4661
   $36 = tempRet0 | $31; //@line 4664
   $37 = _bitshift64Lshr($28 | 0, $29 | 0, 4) | 0; //@line 4665
   $38 = tempRet0; //@line 4666
   $40 = 208 + (($27 & 15) << 3) | 0; //@line 4668
   $46 = _bitshift64Shl(HEAP32[$40 >> 2] | 0, HEAP32[$40 + 4 >> 2] | 0, 48) | 0; //@line 4674
   $51 = $0 + 200 + ($25 << 3) | 0; //@line 4679
   $60 = $0 + 72 + ($25 << 3) | 0; //@line 4688
   $69 = HEAP32[$60 >> 2] ^ ($33 | $30); //@line 4696
   $70 = $46 ^ $37 ^ HEAP32[$51 >> 2]; //@line 4696
   $71 = tempRet0 ^ $38 ^ HEAP32[$51 + 4 >> 2]; //@line 4696
   $74 = HEAP32[$60 + 4 >> 2] ^ $36; //@line 4696
  }
  $72 = _bitshift64Shl($70 | 0, $71 | 0, 60) | 0; //@line 4699
  $73 = tempRet0; //@line 4700
  $75 = _bitshift64Lshr($69 | 0, $74 | 0, 4) | 0; //@line 4701
  $78 = tempRet0 | $73; //@line 4704
  $79 = _bitshift64Lshr($70 | 0, $71 | 0, 4) | 0; //@line 4705
  $80 = tempRet0; //@line 4706
  $82 = 208 + (($69 & 15) << 3) | 0; //@line 4708
  $88 = _bitshift64Shl(HEAP32[$82 >> 2] | 0, HEAP32[$82 + 4 >> 2] | 0, 48) | 0; //@line 4714
  $92 = ($22 & 255) >>> 4 & 255; //@line 4718
  $94 = $0 + 200 + ($92 << 3) | 0; //@line 4720
  $100 = $88 ^ $79 ^ HEAP32[$94 >> 2]; //@line 4726
  $101 = tempRet0 ^ $80 ^ HEAP32[$94 + 4 >> 2]; //@line 4727
  $103 = $0 + 72 + ($92 << 3) | 0; //@line 4729
  $109 = HEAP32[$103 >> 2] ^ ($75 | $72); //@line 4735
  $110 = HEAP32[$103 + 4 >> 2] ^ $78; //@line 4736
  $111 = $$07475 + -1 | 0; //@line 4737
  if (($$07475 | 0) <= 0) {
   break;
  }
  $$07475 = $111; //@line 4744
  $22 = HEAP8[$1 + $111 >> 0] | 0; //@line 4744
  $27 = $109; //@line 4744
  $28 = $100; //@line 4744
  $29 = $101; //@line 4744
  $32 = $110; //@line 4744
 }
 $113 = _bitshift64Lshr($100 | 0, $101 | 0, 56) | 0; //@line 4746
 HEAP8[$2 >> 0] = $113; //@line 4749
 $116 = _bitshift64Lshr($100 | 0, $101 | 0, 48) | 0; //@line 4750
 HEAP8[$2 + 1 >> 0] = $116; //@line 4754
 $120 = _bitshift64Lshr($100 | 0, $101 | 0, 40) | 0; //@line 4755
 HEAP8[$2 + 2 >> 0] = $120; //@line 4759
 HEAP8[$2 + 3 >> 0] = $101; //@line 4762
 $126 = _bitshift64Lshr($100 | 0, $101 | 0, 24) | 0; //@line 4763
 HEAP8[$2 + 4 >> 0] = $126; //@line 4767
 $130 = _bitshift64Lshr($100 | 0, $101 | 0, 16) | 0; //@line 4768
 HEAP8[$2 + 5 >> 0] = $130; //@line 4772
 $134 = _bitshift64Lshr($100 | 0, $101 | 0, 8) | 0; //@line 4773
 HEAP8[$2 + 6 >> 0] = $134; //@line 4777
 HEAP8[$2 + 7 >> 0] = $100; //@line 4780
 $140 = _bitshift64Lshr($109 | 0, $110 | 0, 56) | 0; //@line 4781
 HEAP8[$2 + 8 >> 0] = $140; //@line 4785
 $144 = _bitshift64Lshr($109 | 0, $110 | 0, 48) | 0; //@line 4786
 HEAP8[$2 + 9 >> 0] = $144; //@line 4790
 $148 = _bitshift64Lshr($109 | 0, $110 | 0, 40) | 0; //@line 4791
 HEAP8[$2 + 10 >> 0] = $148; //@line 4795
 HEAP8[$2 + 11 >> 0] = $110; //@line 4798
 $154 = _bitshift64Lshr($109 | 0, $110 | 0, 24) | 0; //@line 4799
 HEAP8[$2 + 12 >> 0] = $154; //@line 4803
 $158 = _bitshift64Lshr($109 | 0, $110 | 0, 16) | 0; //@line 4804
 HEAP8[$2 + 13 >> 0] = $158; //@line 4808
 $162 = _bitshift64Lshr($109 | 0, $110 | 0, 8) | 0; //@line 4809
 HEAP8[$2 + 14 >> 0] = $162; //@line 4813
 HEAP8[$2 + 15 >> 0] = $109; //@line 4816
 return;
}
function _mbedtls_aes_setkey_dec($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$043$lcssa = 0, $$04352 = 0, $$04554$in = 0, $$050 = 0, $$053 = 0, $$pn$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $128 = 0, $13 = 0, $16 = 0, $19 = 0, $22 = 0, $24 = 0, $26 = 0, $3 = 0, $31 = 0, $32 = 0, $4 = 0, $6 = 0, $64 = 0, $8 = 0, $96 = 0, $AsyncCtx = 0, sp = 0, $$04352$looptemp = 0;
 sp = STACKTOP; //@line 563
 STACKTOP = STACKTOP + 288 | 0; //@line 564
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(288); //@line 564
 $3 = sp; //@line 565
 _memset($3 | 0, 0, 280) | 0; //@line 566
 $4 = $0 + 8 | 0; //@line 567
 HEAP32[$0 + 4 >> 2] = $4; //@line 569
 $6 = _mbedtls_aes_setkey_enc($3, $1, $2) | 0; //@line 570
 if (!$6) {
  $8 = HEAP32[$3 >> 2] | 0; //@line 573
  HEAP32[$0 >> 2] = $8; //@line 574
  $10 = HEAP32[$3 + 4 >> 2] | 0; //@line 576
  $11 = $8 << 2; //@line 577
  $12 = $10 + ($11 << 2) | 0; //@line 578
  $13 = $12 + 4 | 0; //@line 579
  HEAP32[$4 >> 2] = HEAP32[$12 >> 2]; //@line 582
  $16 = $13 + 4 | 0; //@line 583
  HEAP32[$0 + 12 >> 2] = HEAP32[$13 >> 2]; //@line 586
  $19 = $16 + 4 | 0; //@line 587
  HEAP32[$0 + 16 >> 2] = HEAP32[$16 >> 2]; //@line 590
  $22 = $19 + 4 | 0; //@line 591
  $24 = $0 + 24 | 0; //@line 593
  HEAP32[$0 + 20 >> 2] = HEAP32[$19 >> 2]; //@line 594
  $$050 = $22 + -32 | 0; //@line 595
  if (($8 | 0) > 1) {
   $26 = ~$8; //@line 598
   $31 = $11 + -4 - ($8 + (($26 | 0) > -3 ? $26 : -3) << 2) | 0; //@line 604
   $$04352 = $24; //@line 605
   $$04554$in = $8; //@line 605
   $$053 = $$050; //@line 605
   while (1) {
    $$04352$looptemp = $$04352;
    $$04352 = $$04352 + 16 | 0; //@line 608
    $32 = HEAP32[$$053 >> 2] | 0; //@line 609
    HEAP32[$$04352$looptemp >> 2] = HEAP32[2324 + ((HEAPU8[13770 + ($32 >>> 8 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[1300 + ((HEAPU8[13770 + ($32 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[3348 + ((HEAPU8[13770 + ($32 >>> 16 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[4372 + ((HEAPU8[13770 + ($32 >>> 24) >> 0] | 0) << 2) >> 2]; //@line 640
    $64 = HEAP32[$$053 + 4 >> 2] | 0; //@line 642
    HEAP32[$$04352$looptemp + 4 >> 2] = HEAP32[2324 + ((HEAPU8[13770 + ($64 >>> 8 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[1300 + ((HEAPU8[13770 + ($64 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[3348 + ((HEAPU8[13770 + ($64 >>> 16 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[4372 + ((HEAPU8[13770 + ($64 >>> 24) >> 0] | 0) << 2) >> 2]; //@line 673
    $96 = HEAP32[$$053 + 8 >> 2] | 0; //@line 675
    HEAP32[$$04352$looptemp + 8 >> 2] = HEAP32[2324 + ((HEAPU8[13770 + ($96 >>> 8 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[1300 + ((HEAPU8[13770 + ($96 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[3348 + ((HEAPU8[13770 + ($96 >>> 16 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[4372 + ((HEAPU8[13770 + ($96 >>> 24) >> 0] | 0) << 2) >> 2]; //@line 706
    $128 = HEAP32[$$053 + 12 >> 2] | 0; //@line 708
    HEAP32[$$04352$looptemp + 12 >> 2] = HEAP32[2324 + ((HEAPU8[13770 + ($128 >>> 8 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[1300 + ((HEAPU8[13770 + ($128 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[3348 + ((HEAPU8[13770 + ($128 >>> 16 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[4372 + ((HEAPU8[13770 + ($128 >>> 24) >> 0] | 0) << 2) >> 2]; //@line 738
    $$053 = $$053 + -16 | 0; //@line 739
    if (($$04554$in | 0) <= 2) {
     break;
    } else {
     $$04554$in = $$04554$in + -1 | 0; //@line 742
    }
   }
   $$0$lcssa = $$053; //@line 748
   $$043$lcssa = $$04352; //@line 748
   $$pn$lcssa = $10 + ($31 << 2) | 0; //@line 748
  } else {
   $$0$lcssa = $$050; //@line 750
   $$043$lcssa = $24; //@line 750
   $$pn$lcssa = $22; //@line 750
  }
  HEAP32[$$043$lcssa >> 2] = HEAP32[$$0$lcssa >> 2]; //@line 755
  HEAP32[$$043$lcssa + 4 >> 2] = HEAP32[$$pn$lcssa + -28 >> 2]; //@line 759
  HEAP32[$$043$lcssa + 8 >> 2] = HEAP32[$$pn$lcssa + -24 >> 2]; //@line 763
  HEAP32[$$043$lcssa + 12 >> 2] = HEAP32[$$pn$lcssa + -20 >> 2]; //@line 765
 }
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 767
 _mbedtls_platform_zeroize($3, 280); //@line 768
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 571; //@line 771
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 773
  HEAP32[$AsyncCtx + 8 >> 2] = $6; //@line 775
  sp = STACKTOP; //@line 776
  STACKTOP = sp; //@line 777
  return 0; //@line 777
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 779
  STACKTOP = sp; //@line 780
  return $6 | 0; //@line 780
 }
 return 0; //@line 782
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb($0) {
 $0 = $0 | 0;
 var $$pre$i = 0, $10 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 21751
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21753
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21755
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 21757
 $8 = HEAP8[$0 + 13 >> 0] | 0; //@line 21759
 $10 = HEAP32[$0 + 16 >> 2] | 0; //@line 21761
 $$pre$i = HEAP32[HEAP32[$0 + 20 >> 2] >> 2] | 0; //@line 21764
 $13 = $4 + 12 | 0; //@line 21765
 HEAP32[$13 >> 2] = $$pre$i; //@line 21766
 if (!$$pre$i) {
  $24 = $2 + 12 | 0; //@line 21769
  HEAP32[$24 >> 2] = 0; //@line 21770
  $25 = $2 + 16 | 0; //@line 21771
  HEAP8[$25 >> 0] = $6; //@line 21772
  HEAP8[$2 + 17 >> 0] = $8; //@line 21774
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 21775
  $27 = _equeue_alloc($10, 20) | 0; //@line 21776
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 326; //@line 21779
   $28 = $ReallocAsyncCtx7 + 4 | 0; //@line 21780
   HEAP32[$28 >> 2] = $24; //@line 21781
   $29 = $ReallocAsyncCtx7 + 8 | 0; //@line 21782
   HEAP32[$29 >> 2] = $13; //@line 21783
   $30 = $ReallocAsyncCtx7 + 12 | 0; //@line 21784
   HEAP32[$30 >> 2] = $4; //@line 21785
   $31 = $ReallocAsyncCtx7 + 16 | 0; //@line 21786
   HEAP32[$31 >> 2] = $24; //@line 21787
   $32 = $ReallocAsyncCtx7 + 20 | 0; //@line 21788
   HEAP32[$32 >> 2] = $25; //@line 21789
   $33 = $ReallocAsyncCtx7 + 24 | 0; //@line 21790
   HEAP32[$33 >> 2] = $10; //@line 21791
   $34 = $ReallocAsyncCtx7 + 28 | 0; //@line 21792
   HEAP32[$34 >> 2] = $2; //@line 21793
   sp = STACKTOP; //@line 21794
   return;
  }
  HEAP32[___async_retval >> 2] = $27; //@line 21798
  ___async_unwind = 0; //@line 21799
  HEAP32[$ReallocAsyncCtx7 >> 2] = 326; //@line 21800
  $28 = $ReallocAsyncCtx7 + 4 | 0; //@line 21801
  HEAP32[$28 >> 2] = $24; //@line 21802
  $29 = $ReallocAsyncCtx7 + 8 | 0; //@line 21803
  HEAP32[$29 >> 2] = $13; //@line 21804
  $30 = $ReallocAsyncCtx7 + 12 | 0; //@line 21805
  HEAP32[$30 >> 2] = $4; //@line 21806
  $31 = $ReallocAsyncCtx7 + 16 | 0; //@line 21807
  HEAP32[$31 >> 2] = $24; //@line 21808
  $32 = $ReallocAsyncCtx7 + 20 | 0; //@line 21809
  HEAP32[$32 >> 2] = $25; //@line 21810
  $33 = $ReallocAsyncCtx7 + 24 | 0; //@line 21811
  HEAP32[$33 >> 2] = $10; //@line 21812
  $34 = $ReallocAsyncCtx7 + 28 | 0; //@line 21813
  HEAP32[$34 >> 2] = $2; //@line 21814
  sp = STACKTOP; //@line 21815
  return;
 } else {
  $16 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 21820
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 21821
  FUNCTION_TABLE_vii[$16 & 15]($2, $4); //@line 21822
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 325; //@line 21825
   $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 21826
   HEAP32[$17 >> 2] = $13; //@line 21827
   $18 = $ReallocAsyncCtx2 + 8 | 0; //@line 21828
   HEAP32[$18 >> 2] = $2; //@line 21829
   $19 = $ReallocAsyncCtx2 + 12 | 0; //@line 21830
   HEAP8[$19 >> 0] = $6; //@line 21831
   $20 = $ReallocAsyncCtx2 + 13 | 0; //@line 21832
   HEAP8[$20 >> 0] = $8; //@line 21833
   $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 21834
   HEAP32[$21 >> 2] = $10; //@line 21835
   $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 21836
   HEAP32[$22 >> 2] = $13; //@line 21837
   $23 = $ReallocAsyncCtx2 + 24 | 0; //@line 21838
   HEAP32[$23 >> 2] = $4; //@line 21839
   sp = STACKTOP; //@line 21840
   return;
  }
  ___async_unwind = 0; //@line 21843
  HEAP32[$ReallocAsyncCtx2 >> 2] = 325; //@line 21844
  $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 21845
  HEAP32[$17 >> 2] = $13; //@line 21846
  $18 = $ReallocAsyncCtx2 + 8 | 0; //@line 21847
  HEAP32[$18 >> 2] = $2; //@line 21848
  $19 = $ReallocAsyncCtx2 + 12 | 0; //@line 21849
  HEAP8[$19 >> 0] = $6; //@line 21850
  $20 = $ReallocAsyncCtx2 + 13 | 0; //@line 21851
  HEAP8[$20 >> 0] = $8; //@line 21852
  $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 21853
  HEAP32[$21 >> 2] = $10; //@line 21854
  $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 21855
  HEAP32[$22 >> 2] = $13; //@line 21856
  $23 = $ReallocAsyncCtx2 + 24 | 0; //@line 21857
  HEAP32[$23 >> 2] = $4; //@line 21858
  sp = STACKTOP; //@line 21859
  return;
 }
}
function __ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $16 = 0, $19 = 0, $2 = 0, $20 = 0, $24 = 0, $26 = 0, $3 = 0, $31 = 0, $32 = 0, $35 = 0, $38 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx16 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 10593
 STACKTOP = STACKTOP + 16 | 0; //@line 10594
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10594
 $2 = sp; //@line 10595
 $3 = $0 + 2496 | 0; //@line 10596
 do {
  if (HEAP32[$3 >> 2] | 0) {
   $AsyncCtx9 = _emscripten_alloc_async_context(24, sp) | 0; //@line 10601
   __ZN7LoRaMac19remove_channel_planEv($0) | 0; //@line 10602
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 347; //@line 10605
    HEAP32[$AsyncCtx9 + 4 >> 2] = $2; //@line 10607
    HEAP32[$AsyncCtx9 + 8 >> 2] = $0; //@line 10609
    HEAP32[$AsyncCtx9 + 12 >> 2] = $3; //@line 10611
    HEAP32[$AsyncCtx9 + 16 >> 2] = $1; //@line 10613
    HEAP32[$AsyncCtx9 + 20 >> 2] = $0; //@line 10615
    sp = STACKTOP; //@line 10616
    STACKTOP = sp; //@line 10617
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx9 | 0); //@line 10619
    break;
   }
  }
 } while (0);
 $AsyncCtx5 = _emscripten_alloc_async_context(20, sp) | 0; //@line 10624
 __ZN7LoRaMac10disconnectEv($0); //@line 10625
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 348; //@line 10628
  HEAP32[$AsyncCtx5 + 4 >> 2] = $0; //@line 10630
  HEAP32[$AsyncCtx5 + 8 >> 2] = $3; //@line 10632
  HEAP32[$AsyncCtx5 + 12 >> 2] = $1; //@line 10634
  HEAP32[$AsyncCtx5 + 16 >> 2] = $2; //@line 10636
  sp = STACKTOP; //@line 10637
  STACKTOP = sp; //@line 10638
  return;
 }
 _emscripten_free_async_context($AsyncCtx5 | 0); //@line 10640
 HEAP8[$0 + 2548 >> 0] = 0; //@line 10642
 HEAP32[$3 >> 2] = 11; //@line 10643
 HEAP32[$1 >> 2] = -1011; //@line 10644
 $16 = $0 + 2904 | 0; //@line 10645
 HEAP32[$16 >> 2] = HEAP32[$16 >> 2] & -5; //@line 10648
 $19 = $0 + 2512 | 0; //@line 10649
 $20 = HEAP32[$19 >> 2] | 0; //@line 10650
 if (!$20) {
  STACKTOP = sp; //@line 10653
  return;
 }
 $24 = HEAP32[$0 + 3168 >> 2] | 0; //@line 10657
 $26 = HEAP32[$20 + 4 >> 2] | 0; //@line 10659
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 10660
 FUNCTION_TABLE_vii[$26 & 15]($2, $0 + 2500 | 0); //@line 10661
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 349; //@line 10664
  HEAP32[$AsyncCtx + 4 >> 2] = $19; //@line 10666
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 10668
  HEAP32[$AsyncCtx + 12 >> 2] = $24; //@line 10670
  HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 10672
  sp = STACKTOP; //@line 10673
  STACKTOP = sp; //@line 10674
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 10676
 $31 = $2 + 12 | 0; //@line 10678
 HEAP32[$31 >> 2] = HEAP32[$19 >> 2]; //@line 10679
 $AsyncCtx12 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10680
 $32 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($24, $2, 1) | 0; //@line 10681
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 350; //@line 10684
  HEAP32[$AsyncCtx12 + 4 >> 2] = $31; //@line 10686
  HEAP32[$AsyncCtx12 + 8 >> 2] = $2; //@line 10688
  sp = STACKTOP; //@line 10689
  STACKTOP = sp; //@line 10690
  return;
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 10692
 $35 = HEAP32[$31 >> 2] | 0; //@line 10693
 do {
  if ($35 | 0) {
   $38 = HEAP32[$35 + 8 >> 2] | 0; //@line 10698
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10699
   FUNCTION_TABLE_vi[$38 & 1023]($2); //@line 10700
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 351; //@line 10703
    HEAP32[$AsyncCtx2 + 4 >> 2] = $32; //@line 10705
    HEAP32[$AsyncCtx2 + 8 >> 2] = $2; //@line 10707
    sp = STACKTOP; //@line 10708
    STACKTOP = sp; //@line 10709
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 10711
    break;
   }
  }
 } while (0);
 if ($32 | 0) {
  STACKTOP = sp; //@line 10718
  return;
 }
 $AsyncCtx16 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10720
 _mbed_assert_internal(12104, 12113, 775); //@line 10721
 if (___async) {
  HEAP32[$AsyncCtx16 >> 2] = 352; //@line 10724
  HEAP32[$AsyncCtx16 + 4 >> 2] = $2; //@line 10726
  sp = STACKTOP; //@line 10727
  STACKTOP = sp; //@line 10728
  return;
 }
 _emscripten_free_async_context($AsyncCtx16 | 0); //@line 10730
 STACKTOP = sp; //@line 10731
 return;
}
function __ZN12LoRaWANStack9handle_rxEPhtRhRib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i = 0, $$0$off0 = 0, $$031 = 0, $$1 = 0, $$pre$phi39Z2D = 0, $13 = 0, $26 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $40 = 0, $43 = 0, $44 = 0, $48 = 0, $9 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11582
 STACKTOP = STACKTOP + 16 | 0; //@line 11583
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 11583
 if (!(HEAP8[$0 + 2548 >> 0] | 0)) {
  $$1 = -1017; //@line 11589
  STACKTOP = sp; //@line 11590
  return $$1 | 0; //@line 11590
 }
 $9 = $0 + 2832 | 0; //@line 11592
 if (!(HEAP8[$9 >> 0] | 0)) {
  $$1 = -1001; //@line 11596
  STACKTOP = sp; //@line 11597
  return $$1 | 0; //@line 11597
 }
 if (!$1) {
  $$1 = -1003; //@line 11601
  STACKTOP = sp; //@line 11602
  return $$1 | 0; //@line 11602
 }
 $13 = $2 & 65535; //@line 11604
 if (!($2 << 16 >> 16)) {
  $$1 = -1003; //@line 11607
  STACKTOP = sp; //@line 11608
  return $$1 | 0; //@line 11608
 }
 L13 : do {
  switch (HEAP32[$0 + 2844 >> 2] | 0) {
  case 0:
   {
    $$0$i = 1; //@line 11615
    break;
   }
  case 1:
   {
    $$0$i = 2; //@line 11619
    break;
   }
  case 2:
   {
    $$0$i = 4; //@line 11623
    break;
   }
  case 3:
   {
    $$0$i = 8; //@line 11627
    break;
   }
  default:
   {
    _mbed_tracef(2, 12211, 12831, sp); //@line 11631
    $AsyncCtx = _emscripten_alloc_async_context(36, sp) | 0; //@line 11632
    _mbed_assert_internal(14462, 12113, 811); //@line 11633
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 370; //@line 11636
     HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 11638
     HEAP8[$AsyncCtx + 8 >> 0] = $5 & 1; //@line 11641
     HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 11643
     HEAP32[$AsyncCtx + 16 >> 2] = $4; //@line 11645
     HEAP16[$AsyncCtx + 20 >> 1] = $2; //@line 11647
     HEAP32[$AsyncCtx + 24 >> 2] = $1; //@line 11649
     HEAP32[$AsyncCtx + 28 >> 2] = $9; //@line 11651
     HEAP32[$AsyncCtx + 32 >> 2] = $13; //@line 11653
     sp = STACKTOP; //@line 11654
     STACKTOP = sp; //@line 11655
     return 0; //@line 11655
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 11657
     $$0$i = 1; //@line 11658
     break L13;
    }
   }
  }
 } while (0);
 $26 = HEAP8[$0 + 2853 >> 0] | 0; //@line 11665
 if ($5) {
  if ($26 << 24 >> 24 != (HEAP8[$3 >> 0] | 0)) {
   $$1 = -1001; //@line 11670
   STACKTOP = sp; //@line 11671
   return $$1 | 0; //@line 11671
  }
  if (!(HEAP32[$4 >> 2] & $$0$i)) {
   $$1 = -1001; //@line 11677
   STACKTOP = sp; //@line 11678
   return $$1 | 0; //@line 11678
  }
 }
 HEAP8[$3 >> 0] = $26; //@line 11681
 HEAP32[$4 >> 2] = $$0$i; //@line 11682
 $32 = $0 + 2856 | 0; //@line 11683
 $33 = HEAP32[$32 >> 2] | 0; //@line 11684
 $34 = $0 + 2860 | 0; //@line 11685
 $35 = HEAP16[$34 >> 1] | 0; //@line 11686
 $36 = $35 & 65535; //@line 11687
 $38 = $0 + 2882 | 0; //@line 11689
 $40 = (HEAP16[$38 >> 1] | 0) == 0; //@line 11691
 if (($35 & 65535) > ($2 & 65535)) {
  if ($40) {
   $43 = $0 + 2880 | 0; //@line 11696
   HEAP16[$43 >> 1] = $36 - $13; //@line 11697
   HEAP16[$38 >> 1] = $2; //@line 11698
   _memcpy($1 | 0, $33 | 0, $13 | 0) | 0; //@line 11699
   $$0$off0 = 0; //@line 11700
   $$031 = $2; //@line 11700
   $$pre$phi39Z2D = $43; //@line 11700
  } else {
   label = 19; //@line 11702
  }
 } else {
  if ($40) {
   $44 = $0 + 2880 | 0; //@line 11706
   HEAP16[$44 >> 1] = 0; //@line 11707
   HEAP16[$38 >> 1] = 0; //@line 11708
   _memcpy($1 | 0, $33 | 0, $36 | 0) | 0; //@line 11709
   $$0$off0 = 1; //@line 11710
   $$031 = $35; //@line 11710
   $$pre$phi39Z2D = $44; //@line 11710
  } else {
   label = 19; //@line 11712
  }
 }
 if ((label | 0) == 19) {
  $$0$off0 = 0; //@line 11717
  $$031 = $35; //@line 11717
  $$pre$phi39Z2D = $0 + 2880 | 0; //@line 11717
 }
 if (HEAP16[$$pre$phi39Z2D >> 1] | 0) {
  $48 = HEAP16[$0 + 2882 >> 1] | 0; //@line 11723
  if ($48 << 16 >> 16) {
   _memcpy($1 | 0, $33 + ($48 & 65535) | 0, $$031 & 65535 | 0) | 0; //@line 11729
  }
 }
 if (!$$0$off0) {
  $$1 = $$031; //@line 11733
  STACKTOP = sp; //@line 11734
  return $$1 | 0; //@line 11734
 }
 HEAP32[$32 >> 2] = 0; //@line 11736
 HEAP16[$34 >> 1] = 0; //@line 11737
 HEAP8[$9 >> 0] = 0; //@line 11738
 $$1 = $$031; //@line 11739
 STACKTOP = sp; //@line 11740
 return $$1 | 0; //@line 11740
}
function __ZN7LoRaMac16on_radio_tx_doneEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $22 = 0, $31 = 0, $40 = 0, $43 = 0, $49 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 12272
 STACKTOP = STACKTOP + 16 | 0; //@line 12273
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 12273
 _mbed_tracef(8, 12890, 12895, sp); //@line 12275
 $1 = __ZN18LoRaWANTimeHandler16get_current_timeEv($0) | 0; //@line 12276
 $2 = $0 + 2380 | 0; //@line 12277
 do {
  if ((HEAP32[$2 >> 2] | 0) == 2) {
   if (!(HEAP8[$0 + 2377 >> 0] | 0)) {
    $AsyncCtx11 = _emscripten_alloc_async_context(20, sp) | 0; //@line 12286
    __ZN7LoRaMac15open_rx2_windowEv($0); //@line 12287
    if (___async) {
     HEAP32[$AsyncCtx11 >> 2] = 383; //@line 12290
     HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 12292
     HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 12294
     HEAP32[$AsyncCtx11 + 12 >> 2] = $2; //@line 12296
     HEAP32[$AsyncCtx11 + 16 >> 2] = $1; //@line 12298
     sp = STACKTOP; //@line 12299
     STACKTOP = sp; //@line 12300
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx11 | 0); //@line 12302
     break;
    }
   }
  } else {
   $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 12308
   __ZN7LoRaPHY18put_radio_to_sleepEv($0 + 4 | 0); //@line 12309
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 382; //@line 12312
    HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 12314
    HEAP32[$AsyncCtx15 + 8 >> 2] = $0; //@line 12316
    HEAP32[$AsyncCtx15 + 12 >> 2] = $2; //@line 12318
    HEAP32[$AsyncCtx15 + 16 >> 2] = $1; //@line 12320
    sp = STACKTOP; //@line 12321
    STACKTOP = sp; //@line 12322
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 12324
    break;
   }
  }
 } while (0);
 do {
  if (!(HEAP8[$0 + 1175 >> 0] | 0)) {
   HEAP32[$0 + 2056 >> 2] = 0; //@line 12335
   HEAP32[$0 + 2092 >> 2] = 4; //@line 12337
  } else {
   $22 = HEAP32[$0 + 1772 >> 2] | 0; //@line 12341
   $AsyncCtx7 = _emscripten_alloc_async_context(20, sp) | 0; //@line 12342
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($0, $0 + 1816 | 0, $22); //@line 12343
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 384; //@line 12346
    HEAP32[$AsyncCtx7 + 4 >> 2] = $2; //@line 12348
    HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 12350
    HEAP32[$AsyncCtx7 + 12 >> 2] = $0; //@line 12352
    HEAP32[$AsyncCtx7 + 16 >> 2] = $1; //@line 12354
    sp = STACKTOP; //@line 12355
    STACKTOP = sp; //@line 12356
    return;
   }
   _emscripten_free_async_context($AsyncCtx7 | 0); //@line 12358
   do {
    if ((HEAP32[$2 >> 2] | 0) != 2) {
     $31 = HEAP32[$0 + 1776 >> 2] | 0; //@line 12365
     $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 12366
     __ZN18LoRaWANTimeHandler5startER13timer_event_tj($0, $0 + 1836 | 0, $31); //@line 12367
     if (___async) {
      HEAP32[$AsyncCtx3 >> 2] = 385; //@line 12370
      HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 12372
      HEAP32[$AsyncCtx3 + 8 >> 2] = $1; //@line 12374
      HEAP32[$AsyncCtx3 + 12 >> 2] = $0; //@line 12376
      sp = STACKTOP; //@line 12377
      STACKTOP = sp; //@line 12378
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx3 | 0); //@line 12380
      break;
     }
    }
   } while (0);
   if (HEAP8[$0 + 1177 >> 0] | 0) {
    $40 = HEAP32[$0 + 1776 >> 2] | 0; //@line 12391
    $43 = (__ZN7LoRaPHY15get_ack_timeoutEv($0 + 4 | 0) | 0) + $40 | 0; //@line 12394
    $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 12395
    __ZN18LoRaWANTimeHandler5startER13timer_event_tj($0, $0 + 1856 | 0, $43); //@line 12396
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 386; //@line 12399
     HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 12401
     HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 12403
     sp = STACKTOP; //@line 12404
     STACKTOP = sp; //@line 12405
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 12407
     break;
    }
   }
  }
 } while (0);
 $49 = HEAP8[$0 + 1182 >> 0] | 0; //@line 12414
 HEAP8[$0 + 1183 >> 0] = $49; //@line 12416
 __ZN7LoRaPHY16set_last_tx_doneEhbj($0 + 4 | 0, $49, (HEAP8[$0 + 2376 >> 0] | 0) != 0, $1); //@line 12421
 HEAP32[$0 + 1780 >> 2] = $1; //@line 12423
 STACKTOP = sp; //@line 12424
 return;
}
function __ZN12radio_eventsD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $29 = 0, $30 = 0, $32 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $42 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 19162
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19164
 $4 = HEAP32[$2 + 92 >> 2] | 0; //@line 19166
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 19171
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 19172
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 80 | 0); //@line 19173
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 174; //@line 19176
   $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 19177
   HEAP32[$9 >> 2] = $2; //@line 19178
   sp = STACKTOP; //@line 19179
   return;
  }
  ___async_unwind = 0; //@line 19182
  HEAP32[$ReallocAsyncCtx2 >> 2] = 174; //@line 19183
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 19184
  HEAP32[$9 >> 2] = $2; //@line 19185
  sp = STACKTOP; //@line 19186
  return;
 }
 $11 = HEAP32[$2 + 76 >> 2] | 0; //@line 19190
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 19195
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 19196
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 64 | 0); //@line 19197
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 175; //@line 19200
   $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 19201
   HEAP32[$16 >> 2] = $2; //@line 19202
   sp = STACKTOP; //@line 19203
   return;
  }
  ___async_unwind = 0; //@line 19206
  HEAP32[$ReallocAsyncCtx3 >> 2] = 175; //@line 19207
  $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 19208
  HEAP32[$16 >> 2] = $2; //@line 19209
  sp = STACKTOP; //@line 19210
  return;
 }
 $18 = HEAP32[$2 + 60 >> 2] | 0; //@line 19214
 if ($18 | 0) {
  $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 19219
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 19220
  FUNCTION_TABLE_vi[$22 & 1023]($2 + 48 | 0); //@line 19221
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 176; //@line 19224
   $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 19225
   HEAP32[$23 >> 2] = $2; //@line 19226
   sp = STACKTOP; //@line 19227
   return;
  }
  ___async_unwind = 0; //@line 19230
  HEAP32[$ReallocAsyncCtx4 >> 2] = 176; //@line 19231
  $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 19232
  HEAP32[$23 >> 2] = $2; //@line 19233
  sp = STACKTOP; //@line 19234
  return;
 }
 $25 = HEAP32[$2 + 44 >> 2] | 0; //@line 19238
 if ($25 | 0) {
  $29 = HEAP32[$25 + 8 >> 2] | 0; //@line 19243
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 19244
  FUNCTION_TABLE_vi[$29 & 1023]($2 + 32 | 0); //@line 19245
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 177; //@line 19248
   $30 = $ReallocAsyncCtx5 + 4 | 0; //@line 19249
   HEAP32[$30 >> 2] = $2; //@line 19250
   sp = STACKTOP; //@line 19251
   return;
  }
  ___async_unwind = 0; //@line 19254
  HEAP32[$ReallocAsyncCtx5 >> 2] = 177; //@line 19255
  $30 = $ReallocAsyncCtx5 + 4 | 0; //@line 19256
  HEAP32[$30 >> 2] = $2; //@line 19257
  sp = STACKTOP; //@line 19258
  return;
 }
 $32 = HEAP32[$2 + 28 >> 2] | 0; //@line 19262
 if ($32 | 0) {
  $36 = HEAP32[$32 + 8 >> 2] | 0; //@line 19267
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 19268
  FUNCTION_TABLE_vi[$36 & 1023]($2 + 16 | 0); //@line 19269
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 178; //@line 19272
   $37 = $ReallocAsyncCtx6 + 4 | 0; //@line 19273
   HEAP32[$37 >> 2] = $2; //@line 19274
   sp = STACKTOP; //@line 19275
   return;
  }
  ___async_unwind = 0; //@line 19278
  HEAP32[$ReallocAsyncCtx6 >> 2] = 178; //@line 19279
  $37 = $ReallocAsyncCtx6 + 4 | 0; //@line 19280
  HEAP32[$37 >> 2] = $2; //@line 19281
  sp = STACKTOP; //@line 19282
  return;
 }
 $39 = HEAP32[$2 + 12 >> 2] | 0; //@line 19286
 if (!$39) {
  return;
 }
 $42 = HEAP32[$39 + 8 >> 2] | 0; //@line 19292
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 19293
 FUNCTION_TABLE_vi[$42 & 1023]($2); //@line 19294
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 179; //@line 19297
  sp = STACKTOP; //@line 19298
  return;
 }
 ___async_unwind = 0; //@line 19301
 HEAP32[$ReallocAsyncCtx7 >> 2] = 179; //@line 19302
 sp = STACKTOP; //@line 19303
 return;
}
function _mbedtls_cipher_cmac_update__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$09$i75 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $27 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $53 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13619
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13621
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13623
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13625
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13627
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13629
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13631
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 13633
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 13635
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 13637
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 13639
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 13641
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 13643
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 13646
  $53 = ___async_retval; //@line 13647
  HEAP32[$53 >> 2] = $$0; //@line 13648
  return;
 }
 $33 = $2 - $4 | 0; //@line 13651
 $25 = $6 + $4 | 0; //@line 13652
 $37 = $8 + 1 | 0; //@line 13653
 if ($37 >>> 0 >= $10 >>> 0) {
  if (!$33) {
   $$0 = 0; //@line 13658
   $53 = ___async_retval; //@line 13659
   HEAP32[$53 >> 2] = $$0; //@line 13660
   return;
  }
  _memcpy((HEAP32[$14 >> 2] | 0) + ($16 + 16) | 0, $25 | 0, $33 | 0) | 0; //@line 13665
  HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + $33; //@line 13668
  $$0 = 0; //@line 13669
  $53 = ___async_retval; //@line 13670
  HEAP32[$53 >> 2] = $$0; //@line 13671
  return;
 }
 $$09$i75 = 0; //@line 13674
 do {
  $27 = $16 + $$09$i75 | 0; //@line 13678
  HEAP8[$27 >> 0] = HEAP8[$27 >> 0] ^ HEAP8[$25 + $$09$i75 >> 0]; //@line 13681
  $$09$i75 = $$09$i75 + 1 | 0; //@line 13682
 } while (($$09$i75 | 0) != ($4 | 0));
 $ReallocAsyncCtx = _emscripten_realloc_async_context(48) | 0; //@line 13690
 $31 = _mbedtls_cipher_update($18, $20, $4, $20, $22) | 0; //@line 13691
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 598; //@line 13694
  $32 = $ReallocAsyncCtx + 4 | 0; //@line 13695
  HEAP32[$32 >> 2] = $33; //@line 13696
  $34 = $ReallocAsyncCtx + 8 | 0; //@line 13697
  HEAP32[$34 >> 2] = $4; //@line 13698
  $35 = $ReallocAsyncCtx + 12 | 0; //@line 13699
  HEAP32[$35 >> 2] = $25; //@line 13700
  $36 = $ReallocAsyncCtx + 16 | 0; //@line 13701
  HEAP32[$36 >> 2] = $37; //@line 13702
  $38 = $ReallocAsyncCtx + 20 | 0; //@line 13703
  HEAP32[$38 >> 2] = $10; //@line 13704
  $39 = $ReallocAsyncCtx + 24 | 0; //@line 13705
  HEAP32[$39 >> 2] = $12; //@line 13706
  $40 = $ReallocAsyncCtx + 28 | 0; //@line 13707
  HEAP32[$40 >> 2] = $14; //@line 13708
  $41 = $ReallocAsyncCtx + 32 | 0; //@line 13709
  HEAP32[$41 >> 2] = $16; //@line 13710
  $42 = $ReallocAsyncCtx + 36 | 0; //@line 13711
  HEAP32[$42 >> 2] = $18; //@line 13712
  $43 = $ReallocAsyncCtx + 40 | 0; //@line 13713
  HEAP32[$43 >> 2] = $20; //@line 13714
  $44 = $ReallocAsyncCtx + 44 | 0; //@line 13715
  HEAP32[$44 >> 2] = $22; //@line 13716
  sp = STACKTOP; //@line 13717
  return;
 }
 HEAP32[___async_retval >> 2] = $31; //@line 13721
 ___async_unwind = 0; //@line 13722
 HEAP32[$ReallocAsyncCtx >> 2] = 598; //@line 13723
 $32 = $ReallocAsyncCtx + 4 | 0; //@line 13724
 HEAP32[$32 >> 2] = $33; //@line 13725
 $34 = $ReallocAsyncCtx + 8 | 0; //@line 13726
 HEAP32[$34 >> 2] = $4; //@line 13727
 $35 = $ReallocAsyncCtx + 12 | 0; //@line 13728
 HEAP32[$35 >> 2] = $25; //@line 13729
 $36 = $ReallocAsyncCtx + 16 | 0; //@line 13730
 HEAP32[$36 >> 2] = $37; //@line 13731
 $38 = $ReallocAsyncCtx + 20 | 0; //@line 13732
 HEAP32[$38 >> 2] = $10; //@line 13733
 $39 = $ReallocAsyncCtx + 24 | 0; //@line 13734
 HEAP32[$39 >> 2] = $12; //@line 13735
 $40 = $ReallocAsyncCtx + 28 | 0; //@line 13736
 HEAP32[$40 >> 2] = $14; //@line 13737
 $41 = $ReallocAsyncCtx + 32 | 0; //@line 13738
 HEAP32[$41 >> 2] = $16; //@line 13739
 $42 = $ReallocAsyncCtx + 36 | 0; //@line 13740
 HEAP32[$42 >> 2] = $18; //@line 13741
 $43 = $ReallocAsyncCtx + 40 | 0; //@line 13742
 HEAP32[$43 >> 2] = $20; //@line 13743
 $44 = $ReallocAsyncCtx + 44 | 0; //@line 13744
 HEAP32[$44 >> 2] = $22; //@line 13745
 sp = STACKTOP; //@line 13746
 return;
}
function _mbedtls_gcm_update($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$05966 = 0, $$06065 = 0, $$061 = 0, $$06264 = 0, $$163 = 0, $11 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $30 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $42 = 0, $44 = 0, $46 = 0, $5 = 0, $67 = 0, $68 = 0, $75 = 0, $83 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4829
 STACKTOP = STACKTOP + 32 | 0; //@line 4830
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 4830
 $4 = sp + 8 | 0; //@line 4831
 $5 = sp; //@line 4832
 HEAP32[$5 >> 2] = 0; //@line 4833
 if ($3 >>> 0 > $2 >>> 0) {
  if (($3 - $2 | 0) >>> 0 < $1 >>> 0) {
   $$0 = -20; //@line 4841
   STACKTOP = sp; //@line 4842
   return $$0 | 0; //@line 4842
  }
 }
 $11 = $0 + 328 | 0; //@line 4845
 $12 = $11; //@line 4846
 $14 = HEAP32[$12 >> 2] | 0; //@line 4848
 $17 = HEAP32[$12 + 4 >> 2] | 0; //@line 4851
 $18 = _i64Add($14 | 0, $17 | 0, $1 | 0, 0) | 0; //@line 4852
 $19 = tempRet0; //@line 4853
 if ($19 >>> 0 < $17 >>> 0 | ($19 | 0) == ($17 | 0) & $18 >>> 0 < $14 >>> 0 | ($19 >>> 0 > 15 | ($19 | 0) == 15 & $18 >>> 0 > 4294967264)) {
  $$0 = -20; //@line 4866
  STACKTOP = sp; //@line 4867
  return $$0 | 0; //@line 4867
 }
 $30 = $11; //@line 4869
 HEAP32[$30 >> 2] = $18; //@line 4871
 HEAP32[$30 + 4 >> 2] = $19; //@line 4874
 if (!$1) {
  $$0 = 0; //@line 4877
  STACKTOP = sp; //@line 4878
  return $$0 | 0; //@line 4878
 }
 $35 = $0 + 360 | 0; //@line 4880
 $36 = $0 + 376 | 0; //@line 4881
 $37 = $0 + 392 | 0; //@line 4882
 $$05966 = $3; //@line 4883
 $$06065 = $2; //@line 4883
 $$06264 = $1; //@line 4883
 while (1) {
  $39 = $$06264 >>> 0 < 16 ? $$06264 : 16; //@line 4886
  $$061 = 16; //@line 4887
  do {
   if ($$061 >>> 0 <= 12) {
    break;
   }
   $$061 = $$061 + -1 | 0; //@line 4893
   $42 = $0 + 360 + $$061 | 0; //@line 4894
   $44 = (HEAP8[$42 >> 0] | 0) + 1 << 24 >> 24; //@line 4896
   HEAP8[$42 >> 0] = $44; //@line 4897
  } while (!($44 << 24 >> 24));
  $AsyncCtx = _emscripten_alloc_async_context(68, sp) | 0; //@line 4905
  $46 = _mbedtls_cipher_update($0, $35, 16, $4, $5) | 0; //@line 4906
  if (___async) {
   label = 10; //@line 4909
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4912
  if ($46 | 0) {
   $$0 = $46; //@line 4915
   label = 19; //@line 4916
   break;
  }
  if ($39 | 0) {
   $$163 = 0; //@line 4921
   do {
    $67 = $0 + 376 + $$163 | 0; //@line 4925
    $68 = $$06065 + $$163 | 0; //@line 4926
    if (!(HEAP32[$37 >> 2] | 0)) {
     HEAP8[$67 >> 0] = HEAP8[$67 >> 0] ^ HEAP8[$68 >> 0]; //@line 4931
    }
    $75 = HEAP8[$68 >> 0] ^ HEAP8[$4 + $$163 >> 0]; //@line 4936
    HEAP8[$$05966 + $$163 >> 0] = $75; //@line 4938
    if ((HEAP32[$37 >> 2] | 0) == 1) {
     HEAP8[$67 >> 0] = HEAP8[$67 >> 0] ^ $75; //@line 4944
    }
    $$163 = $$163 + 1 | 0; //@line 4946
   } while ($$163 >>> 0 < $39 >>> 0);
  }
  _gcm_mult($0, $36, $36); //@line 4955
  $83 = $$06264 - $39 | 0; //@line 4956
  if (!$83) {
   $$0 = 0; //@line 4961
   label = 19; //@line 4962
   break;
  } else {
   $$05966 = $$05966 + $39 | 0; //@line 4965
   $$06065 = $$06065 + $39 | 0; //@line 4965
   $$06264 = $83; //@line 4965
  }
 }
 if ((label | 0) == 10) {
  HEAP32[$AsyncCtx >> 2] = 613; //@line 4969
  HEAP32[$AsyncCtx + 4 >> 2] = $39; //@line 4971
  HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 4973
  HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 4975
  HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 4977
  HEAP32[$AsyncCtx + 20 >> 2] = $36; //@line 4979
  HEAP32[$AsyncCtx + 24 >> 2] = $$06264; //@line 4981
  HEAP32[$AsyncCtx + 28 >> 2] = $$06065; //@line 4983
  HEAP32[$AsyncCtx + 32 >> 2] = $$05966; //@line 4985
  HEAP32[$AsyncCtx + 36 >> 2] = $37; //@line 4987
  HEAP32[$AsyncCtx + 40 >> 2] = $4; //@line 4989
  HEAP32[$AsyncCtx + 44 >> 2] = $3; //@line 4991
  HEAP32[$AsyncCtx + 48 >> 2] = $2; //@line 4993
  HEAP32[$AsyncCtx + 52 >> 2] = $1; //@line 4995
  HEAP32[$AsyncCtx + 56 >> 2] = $0; //@line 4997
  HEAP32[$AsyncCtx + 60 >> 2] = $35; //@line 4999
  HEAP32[$AsyncCtx + 64 >> 2] = $5; //@line 5001
  sp = STACKTOP; //@line 5002
  STACKTOP = sp; //@line 5003
  return 0; //@line 5003
 } else if ((label | 0) == 19) {
  STACKTOP = sp; //@line 5006
  return $$0 | 0; //@line 5006
 }
 return 0; //@line 5008
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_179($0) {
 $0 = $0 | 0;
 var $$085$off0$reg2mem$0 = 0, $$182$off0 = 0, $$186$off0 = 0, $$283$off0 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $4 = 0, $59 = 0, $6 = 0, $67 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 32057
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32059
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32061
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32063
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32065
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32067
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 32069
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 32071
 $16 = HEAP8[$0 + 32 >> 0] & 1; //@line 32074
 $18 = HEAP8[$0 + 33 >> 0] & 1; //@line 32077
 $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 32079
 $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 32081
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 32083
 $26 = HEAP8[$0 + 48 >> 0] & 1; //@line 32086
 $28 = HEAP32[$0 + 52 >> 2] | 0; //@line 32088
 L2 : do {
  if (!(HEAP8[$2 >> 0] | 0)) {
   do {
    if (!(HEAP8[$22 >> 0] | 0)) {
     $$182$off0 = $16; //@line 32097
     $$186$off0 = $18; //@line 32097
    } else {
     if (!(HEAP8[$24 >> 0] | 0)) {
      if (!(HEAP32[$14 >> 2] & 1)) {
       $$085$off0$reg2mem$0 = $18; //@line 32106
       $$283$off0 = 1; //@line 32106
       label = 13; //@line 32107
       break L2;
      } else {
       $$182$off0 = 1; //@line 32110
       $$186$off0 = $18; //@line 32110
       break;
      }
     }
     if ((HEAP32[$6 >> 2] | 0) == 1) {
      label = 18; //@line 32117
      break L2;
     }
     if (!(HEAP32[$14 >> 2] & 2)) {
      label = 18; //@line 32124
      break L2;
     } else {
      $$182$off0 = 1; //@line 32127
      $$186$off0 = 1; //@line 32127
     }
    }
   } while (0);
   $30 = $20 + 8 | 0; //@line 32131
   if ($30 >>> 0 < $28 >>> 0) {
    HEAP8[$24 >> 0] = 0; //@line 32134
    HEAP8[$22 >> 0] = 0; //@line 32135
    $ReallocAsyncCtx5 = _emscripten_realloc_async_context(56) | 0; //@line 32136
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($30, $12, $8, $8, 1, $26); //@line 32137
    if (!___async) {
     ___async_unwind = 0; //@line 32140
    }
    HEAP32[$ReallocAsyncCtx5 >> 2] = 736; //@line 32142
    HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 32144
    HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 32146
    HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $6; //@line 32148
    HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $8; //@line 32150
    HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $10; //@line 32152
    HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $12; //@line 32154
    HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $14; //@line 32156
    HEAP8[$ReallocAsyncCtx5 + 32 >> 0] = $$182$off0 & 1; //@line 32159
    HEAP8[$ReallocAsyncCtx5 + 33 >> 0] = $$186$off0 & 1; //@line 32162
    HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $30; //@line 32164
    HEAP32[$ReallocAsyncCtx5 + 40 >> 2] = $22; //@line 32166
    HEAP32[$ReallocAsyncCtx5 + 44 >> 2] = $24; //@line 32168
    HEAP8[$ReallocAsyncCtx5 + 48 >> 0] = $26 & 1; //@line 32171
    HEAP32[$ReallocAsyncCtx5 + 52 >> 2] = $28; //@line 32173
    sp = STACKTOP; //@line 32174
    return;
   } else {
    $$085$off0$reg2mem$0 = $$186$off0; //@line 32177
    $$283$off0 = $$182$off0; //@line 32177
    label = 13; //@line 32178
   }
  } else {
   $$085$off0$reg2mem$0 = $18; //@line 32181
   $$283$off0 = $16; //@line 32181
   label = 13; //@line 32182
  }
 } while (0);
 do {
  if ((label | 0) == 13) {
   if (!$$085$off0$reg2mem$0) {
    HEAP32[$10 >> 2] = $8; //@line 32188
    $59 = $12 + 40 | 0; //@line 32189
    HEAP32[$59 >> 2] = (HEAP32[$59 >> 2] | 0) + 1; //@line 32192
    if ((HEAP32[$12 + 36 >> 2] | 0) == 1) {
     if ((HEAP32[$6 >> 2] | 0) == 2) {
      HEAP8[$2 >> 0] = 1; //@line 32200
      if ($$283$off0) {
       label = 18; //@line 32202
       break;
      } else {
       $67 = 4; //@line 32205
       break;
      }
     }
    }
   }
   if ($$283$off0) {
    label = 18; //@line 32212
   } else {
    $67 = 4; //@line 32214
   }
  }
 } while (0);
 if ((label | 0) == 18) {
  $67 = 3; //@line 32219
 }
 HEAP32[$4 >> 2] = $67; //@line 32221
 return;
}
function _initialize__async_cb_416($0) {
 $0 = $0 | 0;
 var $10 = 0, $101 = 0, $102 = 0, $103 = 0, $105 = 0, $12 = 0, $14 = 0, $16 = 0, $25 = 0, $26 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $39 = 0, $4 = 0, $45 = 0, $46 = 0, $47 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $60 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $70 = 0, $76 = 0, $77 = 0, $78 = 0, $87 = 0, $88 = 0, $89 = 0, $91 = 0, $95 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 30144
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30148
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30150
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30154
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30156
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 30158
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 30160
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 30162
 if (($AsyncRetVal | 0) != (HEAP32[(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) + 32 >> 2] | 0)) {
  $25 = $AsyncRetVal - (HEAP32[$6 >> 2] | 0) & HEAP32[HEAP32[$0 + 16 >> 2] >> 2]; //@line 30171
  HEAP32[$6 >> 2] = $AsyncRetVal; //@line 30172
  $26 = HEAP32[$10 >> 2] | 0; //@line 30173
  do {
   if (($26 | 0) == 1e6) {
    $101 = $25; //@line 30177
    $102 = 0; //@line 30177
   } else {
    $28 = HEAP8[$14 >> 0] | 0; //@line 30179
    $30 = ___muldi3($25 | 0, 0, 1e6, 0) | 0; //@line 30181
    $31 = tempRet0; //@line 30182
    if (!($28 << 24 >> 24)) {
     $64 = ___udivdi3($30 | 0, $31 | 0, $26 | 0, 0) | 0; //@line 30184
     $65 = tempRet0; //@line 30185
     $66 = ___muldi3($64 | 0, $65 | 0, $26 | 0, 0) | 0; //@line 30186
     $68 = _i64Subtract($30 | 0, $31 | 0, $66 | 0, tempRet0 | 0) | 0; //@line 30188
     $70 = $16; //@line 30190
     $76 = _i64Add($68 | 0, tempRet0 | 0, HEAP32[$70 >> 2] | 0, HEAP32[$70 + 4 >> 2] | 0) | 0; //@line 30196
     $77 = tempRet0; //@line 30197
     $78 = $16; //@line 30198
     HEAP32[$78 >> 2] = $76; //@line 30200
     HEAP32[$78 + 4 >> 2] = $77; //@line 30203
     if ($77 >>> 0 < 0 | ($77 | 0) == 0 & $76 >>> 0 < $26 >>> 0) {
      $101 = $64; //@line 30210
      $102 = $65; //@line 30210
      break;
     }
     $87 = _i64Add($64 | 0, $65 | 0, 1, 0) | 0; //@line 30213
     $88 = tempRet0; //@line 30214
     $89 = _i64Subtract($76 | 0, $77 | 0, $26 | 0, 0) | 0; //@line 30215
     $91 = $16; //@line 30217
     HEAP32[$91 >> 2] = $89; //@line 30219
     HEAP32[$91 + 4 >> 2] = tempRet0; //@line 30222
     $101 = $87; //@line 30223
     $102 = $88; //@line 30223
     break;
    } else {
     $32 = $28 & 255; //@line 30226
     $33 = _bitshift64Lshr($30 | 0, $31 | 0, $32 | 0) | 0; //@line 30227
     $34 = tempRet0; //@line 30228
     $35 = _bitshift64Shl($33 | 0, $34 | 0, $32 | 0) | 0; //@line 30229
     $37 = _i64Subtract($30 | 0, $31 | 0, $35 | 0, tempRet0 | 0) | 0; //@line 30231
     $39 = $16; //@line 30233
     $45 = _i64Add(HEAP32[$39 >> 2] | 0, HEAP32[$39 + 4 >> 2] | 0, $37 | 0, tempRet0 | 0) | 0; //@line 30239
     $46 = tempRet0; //@line 30240
     $47 = $16; //@line 30241
     HEAP32[$47 >> 2] = $45; //@line 30243
     HEAP32[$47 + 4 >> 2] = $46; //@line 30246
     if ($46 >>> 0 < 0 | ($46 | 0) == 0 & $45 >>> 0 < $26 >>> 0) {
      $101 = $33; //@line 30253
      $102 = $34; //@line 30253
      break;
     }
     $56 = _i64Add($33 | 0, $34 | 0, 1, 0) | 0; //@line 30256
     $57 = tempRet0; //@line 30257
     $58 = _i64Subtract($45 | 0, $46 | 0, $26 | 0, 0) | 0; //@line 30258
     $60 = $16; //@line 30260
     HEAP32[$60 >> 2] = $58; //@line 30262
     HEAP32[$60 + 4 >> 2] = tempRet0; //@line 30265
     $101 = $56; //@line 30266
     $102 = $57; //@line 30266
     break;
    }
   }
  } while (0);
  $95 = $12; //@line 30271
  $103 = _i64Add(HEAP32[$95 >> 2] | 0, HEAP32[$95 + 4 >> 2] | 0, $101 | 0, $102 | 0) | 0; //@line 30277
  $105 = $12; //@line 30279
  HEAP32[$105 >> 2] = $103; //@line 30281
  HEAP32[$105 + 4 >> 2] = tempRet0; //@line 30284
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 30286
 _schedule_interrupt($4); //@line 30287
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 624; //@line 30290
  sp = STACKTOP; //@line 30291
  return;
 }
 ___async_unwind = 0; //@line 30294
 HEAP32[$ReallocAsyncCtx5 >> 2] = 624; //@line 30295
 sp = STACKTOP; //@line 30296
 return;
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_185($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $16 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 32581
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32583
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32585
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32587
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32589
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 32593
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 32595
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 32597
 $17 = HEAP32[HEAP32[$0 + 20 >> 2] >> 2] | 0; //@line 32598
 if (!$17) {
  $28 = $14 + 12 | 0; //@line 32602
  HEAP32[$14 >> 2] = 468; //@line 32603
  HEAP32[$14 + 4 >> 2] = 0; //@line 32605
  HEAP32[$14 + 8 >> 2] = $4; //@line 32607
  HEAP32[$28 >> 2] = 860; //@line 32608
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(32) | 0; //@line 32609
  __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($2, $4 + 1836 | 0, $14); //@line 32610
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 469; //@line 32613
   $29 = $ReallocAsyncCtx6 + 4 | 0; //@line 32614
   HEAP32[$29 >> 2] = $28; //@line 32615
   $30 = $ReallocAsyncCtx6 + 8 | 0; //@line 32616
   HEAP32[$30 >> 2] = $4; //@line 32617
   $31 = $ReallocAsyncCtx6 + 12 | 0; //@line 32618
   HEAP32[$31 >> 2] = $12; //@line 32619
   $32 = $ReallocAsyncCtx6 + 16 | 0; //@line 32620
   HEAP32[$32 >> 2] = $2; //@line 32621
   $33 = $ReallocAsyncCtx6 + 20 | 0; //@line 32622
   HEAP32[$33 >> 2] = $14; //@line 32623
   $34 = $ReallocAsyncCtx6 + 24 | 0; //@line 32624
   HEAP32[$34 >> 2] = $6; //@line 32625
   $35 = $ReallocAsyncCtx6 + 28 | 0; //@line 32626
   HEAP32[$35 >> 2] = $8; //@line 32627
   sp = STACKTOP; //@line 32628
   return;
  }
  ___async_unwind = 0; //@line 32631
  HEAP32[$ReallocAsyncCtx6 >> 2] = 469; //@line 32632
  $29 = $ReallocAsyncCtx6 + 4 | 0; //@line 32633
  HEAP32[$29 >> 2] = $28; //@line 32634
  $30 = $ReallocAsyncCtx6 + 8 | 0; //@line 32635
  HEAP32[$30 >> 2] = $4; //@line 32636
  $31 = $ReallocAsyncCtx6 + 12 | 0; //@line 32637
  HEAP32[$31 >> 2] = $12; //@line 32638
  $32 = $ReallocAsyncCtx6 + 16 | 0; //@line 32639
  HEAP32[$32 >> 2] = $2; //@line 32640
  $33 = $ReallocAsyncCtx6 + 20 | 0; //@line 32641
  HEAP32[$33 >> 2] = $14; //@line 32642
  $34 = $ReallocAsyncCtx6 + 24 | 0; //@line 32643
  HEAP32[$34 >> 2] = $6; //@line 32644
  $35 = $ReallocAsyncCtx6 + 28 | 0; //@line 32645
  HEAP32[$35 >> 2] = $8; //@line 32646
  sp = STACKTOP; //@line 32647
  return;
 } else {
  $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 32651
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 32652
  FUNCTION_TABLE_vi[$20 & 1023]($16); //@line 32653
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 467; //@line 32656
   $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 32657
   HEAP32[$21 >> 2] = $4; //@line 32658
   $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 32659
   HEAP32[$22 >> 2] = $14; //@line 32660
   $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 32661
   HEAP32[$23 >> 2] = $2; //@line 32662
   $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 32663
   HEAP32[$24 >> 2] = $12; //@line 32664
   $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 32665
   HEAP32[$25 >> 2] = $6; //@line 32666
   $26 = $ReallocAsyncCtx2 + 24 | 0; //@line 32667
   HEAP32[$26 >> 2] = $8; //@line 32668
   sp = STACKTOP; //@line 32669
   return;
  }
  ___async_unwind = 0; //@line 32672
  HEAP32[$ReallocAsyncCtx2 >> 2] = 467; //@line 32673
  $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 32674
  HEAP32[$21 >> 2] = $4; //@line 32675
  $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 32676
  HEAP32[$22 >> 2] = $14; //@line 32677
  $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 32678
  HEAP32[$23 >> 2] = $2; //@line 32679
  $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 32680
  HEAP32[$24 >> 2] = $12; //@line 32681
  $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 32682
  HEAP32[$25 >> 2] = $6; //@line 32683
  $26 = $ReallocAsyncCtx2 + 24 | 0; //@line 32684
  HEAP32[$26 >> 2] = $8; //@line 32685
  sp = STACKTOP; //@line 32686
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb($0) {
 $0 = $0 | 0;
 var $$pre$i = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 28943
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28945
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28947
 $8 = HEAP8[$0 + 16 >> 0] & 1; //@line 28952
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28954
 $$pre$i = HEAP32[HEAP32[$0 + 12 >> 2] >> 2] | 0; //@line 28955
 $11 = $2 + 12 | 0; //@line 28956
 HEAP32[$11 >> 2] = $$pre$i; //@line 28957
 $12 = $8 & 1; //@line 28958
 if (!$$pre$i) {
  $22 = $4 + 12 | 0; //@line 28961
  HEAP32[$22 >> 2] = 0; //@line 28962
  $23 = $4 + 16 | 0; //@line 28963
  HEAP8[$23 >> 0] = $12; //@line 28964
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 28965
  $24 = _equeue_alloc($10, 20) | 0; //@line 28966
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 223; //@line 28969
   $25 = $ReallocAsyncCtx7 + 4 | 0; //@line 28970
   HEAP32[$25 >> 2] = $2; //@line 28971
   $26 = $ReallocAsyncCtx7 + 8 | 0; //@line 28972
   HEAP32[$26 >> 2] = $11; //@line 28973
   $27 = $ReallocAsyncCtx7 + 12 | 0; //@line 28974
   HEAP32[$27 >> 2] = $22; //@line 28975
   $28 = $ReallocAsyncCtx7 + 16 | 0; //@line 28976
   HEAP32[$28 >> 2] = $4; //@line 28977
   $29 = $ReallocAsyncCtx7 + 20 | 0; //@line 28978
   HEAP32[$29 >> 2] = $22; //@line 28979
   $30 = $ReallocAsyncCtx7 + 24 | 0; //@line 28980
   HEAP32[$30 >> 2] = $23; //@line 28981
   $31 = $ReallocAsyncCtx7 + 28 | 0; //@line 28982
   HEAP32[$31 >> 2] = $10; //@line 28983
   sp = STACKTOP; //@line 28984
   return;
  }
  HEAP32[___async_retval >> 2] = $24; //@line 28988
  ___async_unwind = 0; //@line 28989
  HEAP32[$ReallocAsyncCtx7 >> 2] = 223; //@line 28990
  $25 = $ReallocAsyncCtx7 + 4 | 0; //@line 28991
  HEAP32[$25 >> 2] = $2; //@line 28992
  $26 = $ReallocAsyncCtx7 + 8 | 0; //@line 28993
  HEAP32[$26 >> 2] = $11; //@line 28994
  $27 = $ReallocAsyncCtx7 + 12 | 0; //@line 28995
  HEAP32[$27 >> 2] = $22; //@line 28996
  $28 = $ReallocAsyncCtx7 + 16 | 0; //@line 28997
  HEAP32[$28 >> 2] = $4; //@line 28998
  $29 = $ReallocAsyncCtx7 + 20 | 0; //@line 28999
  HEAP32[$29 >> 2] = $22; //@line 29000
  $30 = $ReallocAsyncCtx7 + 24 | 0; //@line 29001
  HEAP32[$30 >> 2] = $23; //@line 29002
  $31 = $ReallocAsyncCtx7 + 28 | 0; //@line 29003
  HEAP32[$31 >> 2] = $10; //@line 29004
  sp = STACKTOP; //@line 29005
  return;
 } else {
  $15 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 29010
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 29011
  FUNCTION_TABLE_vii[$15 & 15]($4, $2); //@line 29012
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 222; //@line 29015
   $16 = $ReallocAsyncCtx2 + 4 | 0; //@line 29016
   HEAP32[$16 >> 2] = $11; //@line 29017
   $17 = $ReallocAsyncCtx2 + 8 | 0; //@line 29018
   HEAP32[$17 >> 2] = $2; //@line 29019
   $18 = $ReallocAsyncCtx2 + 12 | 0; //@line 29020
   HEAP32[$18 >> 2] = $4; //@line 29021
   $19 = $ReallocAsyncCtx2 + 16 | 0; //@line 29022
   HEAP8[$19 >> 0] = $12; //@line 29023
   $20 = $ReallocAsyncCtx2 + 20 | 0; //@line 29024
   HEAP32[$20 >> 2] = $11; //@line 29025
   $21 = $ReallocAsyncCtx2 + 24 | 0; //@line 29026
   HEAP32[$21 >> 2] = $10; //@line 29027
   sp = STACKTOP; //@line 29028
   return;
  }
  ___async_unwind = 0; //@line 29031
  HEAP32[$ReallocAsyncCtx2 >> 2] = 222; //@line 29032
  $16 = $ReallocAsyncCtx2 + 4 | 0; //@line 29033
  HEAP32[$16 >> 2] = $11; //@line 29034
  $17 = $ReallocAsyncCtx2 + 8 | 0; //@line 29035
  HEAP32[$17 >> 2] = $2; //@line 29036
  $18 = $ReallocAsyncCtx2 + 12 | 0; //@line 29037
  HEAP32[$18 >> 2] = $4; //@line 29038
  $19 = $ReallocAsyncCtx2 + 16 | 0; //@line 29039
  HEAP8[$19 >> 0] = $12; //@line 29040
  $20 = $ReallocAsyncCtx2 + 20 | 0; //@line 29041
  HEAP32[$20 >> 2] = $11; //@line 29042
  $21 = $ReallocAsyncCtx2 + 24 | 0; //@line 29043
  HEAP32[$21 >> 2] = $10; //@line 29044
  sp = STACKTOP; //@line 29045
  return;
 }
}
function __ZN7LoRaMac16on_radio_rx_doneEPKhtsa($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, $trunc = 0, sp = 0;
 sp = STACKTOP; //@line 13660
 L1 : do {
  switch (HEAP32[$0 + 1168 >> 2] | 0) {
  case 0:
   {
    $AsyncCtx19 = _emscripten_alloc_async_context(20, sp) | 0; //@line 13667
    __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1816 | 0); //@line 13668
    if (___async) {
     HEAP32[$AsyncCtx19 >> 2] = 408; //@line 13671
     HEAP32[$AsyncCtx19 + 4 >> 2] = $1; //@line 13673
     HEAP32[$AsyncCtx19 + 8 >> 2] = $0; //@line 13675
     HEAP16[$AsyncCtx19 + 12 >> 1] = $2; //@line 13677
     HEAP16[$AsyncCtx19 + 14 >> 1] = $3; //@line 13679
     HEAP8[$AsyncCtx19 + 16 >> 0] = $4; //@line 13681
     sp = STACKTOP; //@line 13682
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx19 | 0); //@line 13685
     break L1;
    }
    break;
   }
  case 1:
   {
    $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 13692
    __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1836 | 0); //@line 13693
    if (___async) {
     HEAP32[$AsyncCtx15 >> 2] = 409; //@line 13696
     HEAP32[$AsyncCtx15 + 4 >> 2] = $1; //@line 13698
     HEAP32[$AsyncCtx15 + 8 >> 2] = $0; //@line 13700
     HEAP16[$AsyncCtx15 + 12 >> 1] = $2; //@line 13702
     HEAP16[$AsyncCtx15 + 14 >> 1] = $3; //@line 13704
     HEAP8[$AsyncCtx15 + 16 >> 0] = $4; //@line 13706
     sp = STACKTOP; //@line 13707
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx15 | 0); //@line 13710
     break L1;
    }
    break;
   }
  default:
   {}
  }
 } while (0);
 do {
  if ((HEAP32[$0 + 2380 >> 2] | 0) == 2) {
   if (!(HEAP8[$0 + 2377 >> 0] | 0)) {
    $AsyncCtx7 = _emscripten_alloc_async_context(20, sp) | 0; //@line 13728
    __ZN7LoRaMac15open_rx2_windowEv($0); //@line 13729
    if (___async) {
     HEAP32[$AsyncCtx7 >> 2] = 410; //@line 13732
     HEAP32[$AsyncCtx7 + 4 >> 2] = $1; //@line 13734
     HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 13736
     HEAP16[$AsyncCtx7 + 12 >> 1] = $2; //@line 13738
     HEAP16[$AsyncCtx7 + 14 >> 1] = $3; //@line 13740
     HEAP8[$AsyncCtx7 + 16 >> 0] = $4; //@line 13742
     sp = STACKTOP; //@line 13743
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx7 | 0); //@line 13746
     break;
    }
   }
  } else {
   $AsyncCtx11 = _emscripten_alloc_async_context(20, sp) | 0; //@line 13752
   __ZN7LoRaPHY18put_radio_to_sleepEv($0 + 4 | 0); //@line 13753
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 411; //@line 13756
    HEAP32[$AsyncCtx11 + 4 >> 2] = $1; //@line 13758
    HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 13760
    HEAP16[$AsyncCtx11 + 12 >> 1] = $2; //@line 13762
    HEAP16[$AsyncCtx11 + 14 >> 1] = $3; //@line 13764
    HEAP8[$AsyncCtx11 + 16 >> 0] = $4; //@line 13766
    sp = STACKTOP; //@line 13767
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 13770
    break;
   }
  }
 } while (0);
 $trunc = (HEAPU8[$1 >> 0] | 0) >>> 5; //@line 13776
 switch ($trunc & 7) {
 case 1:
  {
   if (HEAP8[$0 + 2376 >> 0] | 0) {
    HEAP8[$0 + 2084 >> 0] = 0; //@line 13785
    return;
   }
   $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 13788
   __ZN7LoRaMac24handle_join_accept_frameEPKht($0, $1, $2); //@line 13789
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 412; //@line 13792
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 13794
    sp = STACKTOP; //@line 13795
    return;
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 13798
   HEAP8[$0 + 2084 >> 0] = 1; //@line 13800
   return;
  }
 case 7:
 case 5:
 case 3:
  {
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 13805
   __ZN7LoRaMac17handle_data_frameEPKhthhsa($0, $1, $2, 1, $trunc, $3, $4); //@line 13806
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 413; //@line 13809
    sp = STACKTOP; //@line 13810
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 13813
   return;
  }
 default:
  {
   return;
  }
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb($0) {
 $0 = $0 | 0;
 var $$pre$i = 0, $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 27534
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27538
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27540
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27542
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27544
 $$pre$i = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 27545
 $11 = $4 + 12 | 0; //@line 27546
 HEAP32[$11 >> 2] = $$pre$i; //@line 27547
 if (!$$pre$i) {
  $21 = $6 + 12 | 0; //@line 27550
  HEAP32[$21 >> 2] = 0; //@line 27551
  $22 = $6 + 16 | 0; //@line 27552
  HEAP32[$22 >> 2] = $8; //@line 27553
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 27554
  $23 = _equeue_alloc($10, 20) | 0; //@line 27555
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 269; //@line 27558
   $24 = $ReallocAsyncCtx7 + 4 | 0; //@line 27559
   HEAP32[$24 >> 2] = $4; //@line 27560
   $25 = $ReallocAsyncCtx7 + 8 | 0; //@line 27561
   HEAP32[$25 >> 2] = $21; //@line 27562
   $26 = $ReallocAsyncCtx7 + 12 | 0; //@line 27563
   HEAP32[$26 >> 2] = $11; //@line 27564
   $27 = $ReallocAsyncCtx7 + 16 | 0; //@line 27565
   HEAP32[$27 >> 2] = $6; //@line 27566
   $28 = $ReallocAsyncCtx7 + 20 | 0; //@line 27567
   HEAP32[$28 >> 2] = $21; //@line 27568
   $29 = $ReallocAsyncCtx7 + 24 | 0; //@line 27569
   HEAP32[$29 >> 2] = $22; //@line 27570
   $30 = $ReallocAsyncCtx7 + 28 | 0; //@line 27571
   HEAP32[$30 >> 2] = $10; //@line 27572
   sp = STACKTOP; //@line 27573
   return;
  }
  HEAP32[___async_retval >> 2] = $23; //@line 27577
  ___async_unwind = 0; //@line 27578
  HEAP32[$ReallocAsyncCtx7 >> 2] = 269; //@line 27579
  $24 = $ReallocAsyncCtx7 + 4 | 0; //@line 27580
  HEAP32[$24 >> 2] = $4; //@line 27581
  $25 = $ReallocAsyncCtx7 + 8 | 0; //@line 27582
  HEAP32[$25 >> 2] = $21; //@line 27583
  $26 = $ReallocAsyncCtx7 + 12 | 0; //@line 27584
  HEAP32[$26 >> 2] = $11; //@line 27585
  $27 = $ReallocAsyncCtx7 + 16 | 0; //@line 27586
  HEAP32[$27 >> 2] = $6; //@line 27587
  $28 = $ReallocAsyncCtx7 + 20 | 0; //@line 27588
  HEAP32[$28 >> 2] = $21; //@line 27589
  $29 = $ReallocAsyncCtx7 + 24 | 0; //@line 27590
  HEAP32[$29 >> 2] = $22; //@line 27591
  $30 = $ReallocAsyncCtx7 + 28 | 0; //@line 27592
  HEAP32[$30 >> 2] = $10; //@line 27593
  sp = STACKTOP; //@line 27594
  return;
 } else {
  $14 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 27599
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 27600
  FUNCTION_TABLE_vii[$14 & 15]($6, $4); //@line 27601
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 268; //@line 27604
   $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 27605
   HEAP32[$15 >> 2] = $4; //@line 27606
   $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 27607
   HEAP32[$16 >> 2] = $11; //@line 27608
   $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 27609
   HEAP32[$17 >> 2] = $6; //@line 27610
   $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 27611
   HEAP32[$18 >> 2] = $8; //@line 27612
   $19 = $ReallocAsyncCtx2 + 20 | 0; //@line 27613
   HEAP32[$19 >> 2] = $10; //@line 27614
   $20 = $ReallocAsyncCtx2 + 24 | 0; //@line 27615
   HEAP32[$20 >> 2] = $11; //@line 27616
   sp = STACKTOP; //@line 27617
   return;
  }
  ___async_unwind = 0; //@line 27620
  HEAP32[$ReallocAsyncCtx2 >> 2] = 268; //@line 27621
  $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 27622
  HEAP32[$15 >> 2] = $4; //@line 27623
  $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 27624
  HEAP32[$16 >> 2] = $11; //@line 27625
  $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 27626
  HEAP32[$17 >> 2] = $6; //@line 27627
  $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 27628
  HEAP32[$18 >> 2] = $8; //@line 27629
  $19 = $ReallocAsyncCtx2 + 20 | 0; //@line 27630
  HEAP32[$19 >> 2] = $10; //@line 27631
  $20 = $ReallocAsyncCtx2 + 24 | 0; //@line 27632
  HEAP32[$20 >> 2] = $11; //@line 27633
  sp = STACKTOP; //@line 27634
  return;
 }
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $43 = 0, $46 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 25340
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25342
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25344
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25346
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25348
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25350
 $12 = $0 + 24 | 0; //@line 25352
 $14 = HEAP32[$12 >> 2] | 0; //@line 25354
 $17 = HEAP32[$12 + 4 >> 2] | 0; //@line 25357
 $19 = HEAP32[$0 + 32 >> 2] | 0; //@line 25359
 $20 = HEAP32[$2 >> 2] | 0; //@line 25360
 if ($20 | 0) {
  $23 = HEAP32[$20 + 4 >> 2] | 0; //@line 25364
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 25365
  FUNCTION_TABLE_vii[$23 & 15]($6, $8); //@line 25366
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 87; //@line 25369
   $24 = $ReallocAsyncCtx2 + 4 | 0; //@line 25370
   HEAP32[$24 >> 2] = $2; //@line 25371
   $25 = $ReallocAsyncCtx2 + 8 | 0; //@line 25372
   HEAP32[$25 >> 2] = $4; //@line 25373
   $26 = $ReallocAsyncCtx2 + 12 | 0; //@line 25374
   HEAP32[$26 >> 2] = $10; //@line 25375
   $27 = $ReallocAsyncCtx2 + 16 | 0; //@line 25376
   $28 = $27; //@line 25377
   $29 = $28; //@line 25378
   HEAP32[$29 >> 2] = $14; //@line 25379
   $30 = $28 + 4 | 0; //@line 25380
   $31 = $30; //@line 25381
   HEAP32[$31 >> 2] = $17; //@line 25382
   $32 = $ReallocAsyncCtx2 + 24 | 0; //@line 25383
   HEAP32[$32 >> 2] = $19; //@line 25384
   $33 = $ReallocAsyncCtx2 + 28 | 0; //@line 25385
   HEAP32[$33 >> 2] = $8; //@line 25386
   sp = STACKTOP; //@line 25387
   return;
  }
  ___async_unwind = 0; //@line 25390
  HEAP32[$ReallocAsyncCtx2 >> 2] = 87; //@line 25391
  $24 = $ReallocAsyncCtx2 + 4 | 0; //@line 25392
  HEAP32[$24 >> 2] = $2; //@line 25393
  $25 = $ReallocAsyncCtx2 + 8 | 0; //@line 25394
  HEAP32[$25 >> 2] = $4; //@line 25395
  $26 = $ReallocAsyncCtx2 + 12 | 0; //@line 25396
  HEAP32[$26 >> 2] = $10; //@line 25397
  $27 = $ReallocAsyncCtx2 + 16 | 0; //@line 25398
  $28 = $27; //@line 25399
  $29 = $28; //@line 25400
  HEAP32[$29 >> 2] = $14; //@line 25401
  $30 = $28 + 4 | 0; //@line 25402
  $31 = $30; //@line 25403
  HEAP32[$31 >> 2] = $17; //@line 25404
  $32 = $ReallocAsyncCtx2 + 24 | 0; //@line 25405
  HEAP32[$32 >> 2] = $19; //@line 25406
  $33 = $ReallocAsyncCtx2 + 28 | 0; //@line 25407
  HEAP32[$33 >> 2] = $8; //@line 25408
  sp = STACKTOP; //@line 25409
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 25412
 __ZN4mbed6Ticker5setupEy($10, $14, $17); //@line 25413
 $34 = HEAP32[$2 >> 2] | 0; //@line 25414
 if ($34 | 0) {
  $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 25418
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 25419
  FUNCTION_TABLE_vi[$37 & 1023]($8); //@line 25420
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 88; //@line 25423
   $38 = $ReallocAsyncCtx3 + 4 | 0; //@line 25424
   HEAP32[$38 >> 2] = $19; //@line 25425
   sp = STACKTOP; //@line 25426
   return;
  }
  ___async_unwind = 0; //@line 25429
  HEAP32[$ReallocAsyncCtx3 >> 2] = 88; //@line 25430
  $38 = $ReallocAsyncCtx3 + 4 | 0; //@line 25431
  HEAP32[$38 >> 2] = $19; //@line 25432
  sp = STACKTOP; //@line 25433
  return;
 }
 $40 = HEAP32[$19 + 788 >> 2] | 0; //@line 25437
 if (!$40) {
  return;
 }
 $43 = HEAP32[$40 + 60 >> 2] | 0; //@line 25443
 if (!$43) {
  return;
 }
 $46 = HEAP32[$43 >> 2] | 0; //@line 25449
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 25450
 FUNCTION_TABLE_vi[$46 & 1023]($40 + 48 | 0); //@line 25451
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 89; //@line 25454
  sp = STACKTOP; //@line 25455
  return;
 }
 ___async_unwind = 0; //@line 25458
 HEAP32[$ReallocAsyncCtx4 >> 2] = 89; //@line 25459
 sp = STACKTOP; //@line 25460
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_178($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $18 = 0, $2 = 0, $21 = 0, $24 = 0, $36 = 0, $37 = 0, $38 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 31901
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31903
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31907
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31909
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31911
 $12 = HEAP8[$0 + 24 >> 0] & 1; //@line 31914
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 31916
 $15 = $2 + 24 | 0; //@line 31917
 do {
  if ((HEAP32[$0 + 8 >> 2] | 0) > 1) {
   $18 = HEAP32[$2 + 8 >> 2] | 0; //@line 31922
   if (!($18 & 2)) {
    $21 = $6 + 36 | 0; //@line 31926
    if ((HEAP32[$21 >> 2] | 0) != 1) {
     if (!($18 & 1)) {
      $38 = $6 + 54 | 0; //@line 31933
      if (HEAP8[$38 >> 0] | 0) {
       break;
      }
      if ((HEAP32[$21 >> 2] | 0) == 1) {
       break;
      }
      $ReallocAsyncCtx = _emscripten_realloc_async_context(36) | 0; //@line 31944
      __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $6, $8, $10, $12); //@line 31945
      if (!___async) {
       ___async_unwind = 0; //@line 31948
      }
      HEAP32[$ReallocAsyncCtx >> 2] = 740; //@line 31950
      HEAP32[$ReallocAsyncCtx + 4 >> 2] = $15; //@line 31952
      HEAP32[$ReallocAsyncCtx + 8 >> 2] = $14; //@line 31954
      HEAP32[$ReallocAsyncCtx + 12 >> 2] = $38; //@line 31956
      HEAP32[$ReallocAsyncCtx + 16 >> 2] = $21; //@line 31958
      HEAP32[$ReallocAsyncCtx + 20 >> 2] = $6; //@line 31960
      HEAP32[$ReallocAsyncCtx + 24 >> 2] = $8; //@line 31962
      HEAP32[$ReallocAsyncCtx + 28 >> 2] = $10; //@line 31964
      HEAP8[$ReallocAsyncCtx + 32 >> 0] = $12 & 1; //@line 31967
      sp = STACKTOP; //@line 31968
      return;
     }
     $36 = $6 + 24 | 0; //@line 31971
     $37 = $6 + 54 | 0; //@line 31972
     if (HEAP8[$37 >> 0] | 0) {
      break;
     }
     if ((HEAP32[$21 >> 2] | 0) == 1) {
      if ((HEAP32[$36 >> 2] | 0) == 1) {
       break;
      }
     }
     $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 31987
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $6, $8, $10, $12); //@line 31988
     if (!___async) {
      ___async_unwind = 0; //@line 31991
     }
     HEAP32[$ReallocAsyncCtx2 >> 2] = 739; //@line 31993
     HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $15; //@line 31995
     HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $14; //@line 31997
     HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $37; //@line 31999
     HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $21; //@line 32001
     HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $36; //@line 32003
     HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $6; //@line 32005
     HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $8; //@line 32007
     HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $10; //@line 32009
     HEAP8[$ReallocAsyncCtx2 + 36 >> 0] = $12 & 1; //@line 32012
     sp = STACKTOP; //@line 32013
     return;
    }
   }
   $24 = $6 + 54 | 0; //@line 32017
   if (!(HEAP8[$24 >> 0] | 0)) {
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 32021
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $6, $8, $10, $12); //@line 32022
    if (!___async) {
     ___async_unwind = 0; //@line 32025
    }
    HEAP32[$ReallocAsyncCtx3 >> 2] = 738; //@line 32027
    HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $15; //@line 32029
    HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $14; //@line 32031
    HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $24; //@line 32033
    HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $6; //@line 32035
    HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $8; //@line 32037
    HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $10; //@line 32039
    HEAP8[$ReallocAsyncCtx3 + 28 >> 0] = $12 & 1; //@line 32042
    sp = STACKTOP; //@line 32043
    return;
   }
  }
 } while (0);
 return;
}
function __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_30($0) {
 $0 = $0 | 0;
 var $$pr = 0, $$pre17 = 0, $10 = 0, $12 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 23427
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23429
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23431
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23433
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23435
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23437
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23439
 $$pre17 = HEAP32[$2 >> 2] | 0; //@line 23440
 if ($$pre17 | 0) {
  $15 = HEAP32[$$pre17 + 4 >> 2] | 0; //@line 23444
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 23445
  FUNCTION_TABLE_vii[$15 & 15]($8, $10); //@line 23446
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 358; //@line 23449
   $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 23450
   HEAP32[$16 >> 2] = $2; //@line 23451
   $17 = $ReallocAsyncCtx6 + 8 | 0; //@line 23452
   HEAP32[$17 >> 2] = $4; //@line 23453
   $18 = $ReallocAsyncCtx6 + 12 | 0; //@line 23454
   HEAP32[$18 >> 2] = $6; //@line 23455
   $19 = $ReallocAsyncCtx6 + 16 | 0; //@line 23456
   HEAP32[$19 >> 2] = $12; //@line 23457
   $20 = $ReallocAsyncCtx6 + 20 | 0; //@line 23458
   HEAP32[$20 >> 2] = $10; //@line 23459
   sp = STACKTOP; //@line 23460
   return;
  }
  ___async_unwind = 0; //@line 23463
  HEAP32[$ReallocAsyncCtx6 >> 2] = 358; //@line 23464
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 23465
  HEAP32[$16 >> 2] = $2; //@line 23466
  $17 = $ReallocAsyncCtx6 + 8 | 0; //@line 23467
  HEAP32[$17 >> 2] = $4; //@line 23468
  $18 = $ReallocAsyncCtx6 + 12 | 0; //@line 23469
  HEAP32[$18 >> 2] = $6; //@line 23470
  $19 = $ReallocAsyncCtx6 + 16 | 0; //@line 23471
  HEAP32[$19 >> 2] = $12; //@line 23472
  $20 = $ReallocAsyncCtx6 + 20 | 0; //@line 23473
  HEAP32[$20 >> 2] = $10; //@line 23474
  sp = STACKTOP; //@line 23475
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 23478
 $$pr = HEAP32[$2 >> 2] | 0; //@line 23479
 if (!$$pr) {
  $27 = $12 + 12 | 0; //@line 23482
  HEAP32[$27 >> 2] = 0; //@line 23483
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 23484
  __ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE($6, $12); //@line 23485
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 360; //@line 23488
   $28 = $ReallocAsyncCtx9 + 4 | 0; //@line 23489
   HEAP32[$28 >> 2] = $27; //@line 23490
   $29 = $ReallocAsyncCtx9 + 8 | 0; //@line 23491
   HEAP32[$29 >> 2] = $12; //@line 23492
   sp = STACKTOP; //@line 23493
   return;
  }
  ___async_unwind = 0; //@line 23496
  HEAP32[$ReallocAsyncCtx9 >> 2] = 360; //@line 23497
  $28 = $ReallocAsyncCtx9 + 4 | 0; //@line 23498
  HEAP32[$28 >> 2] = $27; //@line 23499
  $29 = $ReallocAsyncCtx9 + 8 | 0; //@line 23500
  HEAP32[$29 >> 2] = $12; //@line 23501
  sp = STACKTOP; //@line 23502
  return;
 } else {
  $23 = HEAP32[$$pr + 4 >> 2] | 0; //@line 23506
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 23507
  FUNCTION_TABLE_vii[$23 & 15]($12, $10); //@line 23508
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 359; //@line 23511
   $24 = $ReallocAsyncCtx7 + 4 | 0; //@line 23512
   HEAP32[$24 >> 2] = $2; //@line 23513
   $25 = $ReallocAsyncCtx7 + 8 | 0; //@line 23514
   HEAP32[$25 >> 2] = $6; //@line 23515
   $26 = $ReallocAsyncCtx7 + 12 | 0; //@line 23516
   HEAP32[$26 >> 2] = $12; //@line 23517
   sp = STACKTOP; //@line 23518
   return;
  }
  ___async_unwind = 0; //@line 23521
  HEAP32[$ReallocAsyncCtx7 >> 2] = 359; //@line 23522
  $24 = $ReallocAsyncCtx7 + 4 | 0; //@line 23523
  HEAP32[$24 >> 2] = $2; //@line 23524
  $25 = $ReallocAsyncCtx7 + 8 | 0; //@line 23525
  HEAP32[$25 >> 2] = $6; //@line 23526
  $26 = $ReallocAsyncCtx7 + 12 | 0; //@line 23527
  HEAP32[$26 >> 2] = $12; //@line 23528
  sp = STACKTOP; //@line 23529
  return;
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $31 = 0, $32 = 0, $33 = 0, $62 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 17475
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 17480
 } else {
  $9 = $1 + 52 | 0; //@line 17482
  $10 = HEAP8[$9 >> 0] | 0; //@line 17483
  $11 = $1 + 53 | 0; //@line 17484
  $12 = HEAP8[$11 >> 0] | 0; //@line 17485
  $15 = HEAP32[$0 + 12 >> 2] | 0; //@line 17488
  $16 = $0 + 16 + ($15 << 3) | 0; //@line 17489
  HEAP8[$9 >> 0] = 0; //@line 17490
  HEAP8[$11 >> 0] = 0; //@line 17491
  $AsyncCtx3 = _emscripten_alloc_async_context(52, sp) | 0; //@line 17492
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0 + 16 | 0, $1, $2, $3, $4, $5); //@line 17493
  if (___async) {
   HEAP32[$AsyncCtx3 >> 2] = 734; //@line 17496
   HEAP32[$AsyncCtx3 + 4 >> 2] = $15; //@line 17498
   HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 17500
   HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 17502
   HEAP8[$AsyncCtx3 + 16 >> 0] = $10; //@line 17504
   HEAP32[$AsyncCtx3 + 20 >> 2] = $9; //@line 17506
   HEAP8[$AsyncCtx3 + 24 >> 0] = $12; //@line 17508
   HEAP32[$AsyncCtx3 + 28 >> 2] = $11; //@line 17510
   HEAP32[$AsyncCtx3 + 32 >> 2] = $2; //@line 17512
   HEAP32[$AsyncCtx3 + 36 >> 2] = $3; //@line 17514
   HEAP32[$AsyncCtx3 + 40 >> 2] = $4; //@line 17516
   HEAP8[$AsyncCtx3 + 44 >> 0] = $5 & 1; //@line 17519
   HEAP32[$AsyncCtx3 + 48 >> 2] = $16; //@line 17521
   sp = STACKTOP; //@line 17522
   return;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 17525
  L7 : do {
   if (($15 | 0) > 1) {
    $31 = $1 + 24 | 0; //@line 17530
    $32 = $0 + 8 | 0; //@line 17531
    $33 = $1 + 54 | 0; //@line 17532
    $$0 = $0 + 24 | 0; //@line 17533
    while (1) {
     if (HEAP8[$33 >> 0] | 0) {
      break L7;
     }
     if (!(HEAP8[$9 >> 0] | 0)) {
      if (HEAP8[$11 >> 0] | 0) {
       if (!(HEAP32[$32 >> 2] & 1)) {
        break L7;
       }
      }
     } else {
      if ((HEAP32[$31 >> 2] | 0) == 1) {
       break L7;
      }
      if (!(HEAP32[$32 >> 2] & 2)) {
       break L7;
      }
     }
     HEAP8[$9 >> 0] = 0; //@line 17566
     HEAP8[$11 >> 0] = 0; //@line 17567
     $AsyncCtx = _emscripten_alloc_async_context(60, sp) | 0; //@line 17568
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$0, $1, $2, $3, $4, $5); //@line 17569
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 17574
     $62 = $$0 + 8 | 0; //@line 17575
     if ($62 >>> 0 < $16 >>> 0) {
      $$0 = $62; //@line 17578
     } else {
      break L7;
     }
    }
    HEAP32[$AsyncCtx >> 2] = 735; //@line 17583
    HEAP32[$AsyncCtx + 4 >> 2] = $$0; //@line 17585
    HEAP32[$AsyncCtx + 8 >> 2] = $16; //@line 17587
    HEAP32[$AsyncCtx + 12 >> 2] = $33; //@line 17589
    HEAP8[$AsyncCtx + 16 >> 0] = $10; //@line 17591
    HEAP32[$AsyncCtx + 20 >> 2] = $9; //@line 17593
    HEAP8[$AsyncCtx + 24 >> 0] = $12; //@line 17595
    HEAP32[$AsyncCtx + 28 >> 2] = $11; //@line 17597
    HEAP32[$AsyncCtx + 32 >> 2] = $31; //@line 17599
    HEAP32[$AsyncCtx + 36 >> 2] = $32; //@line 17601
    HEAP32[$AsyncCtx + 40 >> 2] = $1; //@line 17603
    HEAP32[$AsyncCtx + 44 >> 2] = $2; //@line 17605
    HEAP32[$AsyncCtx + 48 >> 2] = $3; //@line 17607
    HEAP32[$AsyncCtx + 52 >> 2] = $4; //@line 17609
    HEAP8[$AsyncCtx + 56 >> 0] = $5 & 1; //@line 17612
    sp = STACKTOP; //@line 17613
    return;
   }
  } while (0);
  HEAP8[$9 >> 0] = $10; //@line 17617
  HEAP8[$11 >> 0] = $12; //@line 17618
 }
 return;
}
function _pop_arg_673($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $108 = 0, $109 = 0.0, $115 = 0, $116 = 0.0, $16 = 0, $17 = 0, $20 = 0, $29 = 0, $30 = 0, $31 = 0, $40 = 0, $41 = 0, $43 = 0, $46 = 0, $47 = 0, $56 = 0, $57 = 0, $59 = 0, $62 = 0, $71 = 0, $72 = 0, $73 = 0, $82 = 0, $83 = 0, $85 = 0, $88 = 0, $9 = 0, $97 = 0, $98 = 0, $99 = 0;
 L1 : do {
  if ($1 >>> 0 <= 20) {
   do {
    switch ($1 | 0) {
    case 9:
     {
      $9 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 13813
      $10 = HEAP32[$9 >> 2] | 0; //@line 13814
      HEAP32[$2 >> 2] = $9 + 4; //@line 13816
      HEAP32[$0 >> 2] = $10; //@line 13817
      break L1;
      break;
     }
    case 10:
     {
      $16 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 13833
      $17 = HEAP32[$16 >> 2] | 0; //@line 13834
      HEAP32[$2 >> 2] = $16 + 4; //@line 13836
      $20 = $0; //@line 13839
      HEAP32[$20 >> 2] = $17; //@line 13841
      HEAP32[$20 + 4 >> 2] = (($17 | 0) < 0) << 31 >> 31; //@line 13844
      break L1;
      break;
     }
    case 11:
     {
      $29 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 13860
      $30 = HEAP32[$29 >> 2] | 0; //@line 13861
      HEAP32[$2 >> 2] = $29 + 4; //@line 13863
      $31 = $0; //@line 13864
      HEAP32[$31 >> 2] = $30; //@line 13866
      HEAP32[$31 + 4 >> 2] = 0; //@line 13869
      break L1;
      break;
     }
    case 12:
     {
      $40 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 13885
      $41 = $40; //@line 13886
      $43 = HEAP32[$41 >> 2] | 0; //@line 13888
      $46 = HEAP32[$41 + 4 >> 2] | 0; //@line 13891
      HEAP32[$2 >> 2] = $40 + 8; //@line 13893
      $47 = $0; //@line 13894
      HEAP32[$47 >> 2] = $43; //@line 13896
      HEAP32[$47 + 4 >> 2] = $46; //@line 13899
      break L1;
      break;
     }
    case 13:
     {
      $56 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 13915
      $57 = HEAP32[$56 >> 2] | 0; //@line 13916
      HEAP32[$2 >> 2] = $56 + 4; //@line 13918
      $59 = ($57 & 65535) << 16 >> 16; //@line 13920
      $62 = $0; //@line 13923
      HEAP32[$62 >> 2] = $59; //@line 13925
      HEAP32[$62 + 4 >> 2] = (($59 | 0) < 0) << 31 >> 31; //@line 13928
      break L1;
      break;
     }
    case 14:
     {
      $71 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 13944
      $72 = HEAP32[$71 >> 2] | 0; //@line 13945
      HEAP32[$2 >> 2] = $71 + 4; //@line 13947
      $73 = $0; //@line 13949
      HEAP32[$73 >> 2] = $72 & 65535; //@line 13951
      HEAP32[$73 + 4 >> 2] = 0; //@line 13954
      break L1;
      break;
     }
    case 15:
     {
      $82 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 13970
      $83 = HEAP32[$82 >> 2] | 0; //@line 13971
      HEAP32[$2 >> 2] = $82 + 4; //@line 13973
      $85 = ($83 & 255) << 24 >> 24; //@line 13975
      $88 = $0; //@line 13978
      HEAP32[$88 >> 2] = $85; //@line 13980
      HEAP32[$88 + 4 >> 2] = (($85 | 0) < 0) << 31 >> 31; //@line 13983
      break L1;
      break;
     }
    case 16:
     {
      $97 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 13999
      $98 = HEAP32[$97 >> 2] | 0; //@line 14000
      HEAP32[$2 >> 2] = $97 + 4; //@line 14002
      $99 = $0; //@line 14004
      HEAP32[$99 >> 2] = $98 & 255; //@line 14006
      HEAP32[$99 + 4 >> 2] = 0; //@line 14009
      break L1;
      break;
     }
    case 17:
     {
      $108 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 14025
      $109 = +HEAPF64[$108 >> 3]; //@line 14026
      HEAP32[$2 >> 2] = $108 + 8; //@line 14028
      HEAPF64[$0 >> 3] = $109; //@line 14029
      break L1;
      break;
     }
    case 18:
     {
      $115 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 14045
      $116 = +HEAPF64[$115 >> 3]; //@line 14046
      HEAP32[$2 >> 2] = $115 + 8; //@line 14048
      HEAPF64[$0 >> 3] = $116; //@line 14049
      break L1;
      break;
     }
    default:
     {
      break L1;
     }
    }
   } while (0);
  }
 } while (0);
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_409($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $21 = 0, $24 = 0, $29 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $41 = 0, $44 = 0, $48 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 29198
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29204
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29206
 $10 = HEAP8[$0 + 20 >> 0] | 0; //@line 29208
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29210
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29212
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 29214
 if ((HEAP8[$0 + 4 >> 0] | 0) == 7) {
  if (HEAP8[(HEAP32[$0 + 8 >> 2] | 0) + 14 >> 0] | 0) {
   $21 = HEAP32[$6 >> 2] | 0; //@line 29221
   $24 = HEAP32[(HEAP32[$21 >> 2] | 0) + 16 >> 2] | 0; //@line 29224
   $29 = HEAP32[$8 + 8 >> 2] & 65535; //@line 29229
   $32 = (HEAP8[$8 + 18 >> 0] | 0) != 0; //@line 29232
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 29233
   FUNCTION_TABLE_viiiiiiiiiiiiiii[$24 & 1]($21, 0, 5e4, ($10 & 255) * 1e3 | 0, 0, 83333, 5, $29, 0, 0, 1, 0, 0, 0, $32); //@line 29234
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 523; //@line 29237
    $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 29238
    HEAP32[$33 >> 2] = $8; //@line 29239
    $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 29240
    HEAP32[$34 >> 2] = $12; //@line 29241
    $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 29242
    HEAP32[$35 >> 2] = $14; //@line 29243
    $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 29244
    HEAP32[$36 >> 2] = $16; //@line 29245
    $37 = $ReallocAsyncCtx6 + 20 | 0; //@line 29246
    HEAP32[$37 >> 2] = $6; //@line 29247
    sp = STACKTOP; //@line 29248
    return;
   }
   ___async_unwind = 0; //@line 29251
   HEAP32[$ReallocAsyncCtx6 >> 2] = 523; //@line 29252
   $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 29253
   HEAP32[$33 >> 2] = $8; //@line 29254
   $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 29255
   HEAP32[$34 >> 2] = $12; //@line 29256
   $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 29257
   HEAP32[$35 >> 2] = $14; //@line 29258
   $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 29259
   HEAP32[$36 >> 2] = $16; //@line 29260
   $37 = $ReallocAsyncCtx6 + 20 | 0; //@line 29261
   HEAP32[$37 >> 2] = $6; //@line 29262
   sp = STACKTOP; //@line 29263
   return;
  }
 }
 $38 = HEAP32[$6 >> 2] | 0; //@line 29267
 $41 = HEAP32[(HEAP32[$38 >> 2] | 0) + 16 >> 2] | 0; //@line 29270
 $44 = HEAPU8[$8 + 2 >> 0] | 0; //@line 29273
 $48 = HEAP32[$8 + 8 >> 2] & 65535; //@line 29277
 $51 = (HEAP8[$8 + 18 >> 0] | 0) != 0; //@line 29280
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(24) | 0; //@line 29281
 FUNCTION_TABLE_viiiiiiiiiiiiiii[$41 & 1]($38, 1, $44, $10 & 255, 1, 0, 8, $48, 0, 0, 0, 0, 0, 1, $51); //@line 29282
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 524; //@line 29285
  $52 = $ReallocAsyncCtx7 + 4 | 0; //@line 29286
  HEAP32[$52 >> 2] = $8; //@line 29287
  $53 = $ReallocAsyncCtx7 + 8 | 0; //@line 29288
  HEAP32[$53 >> 2] = $12; //@line 29289
  $54 = $ReallocAsyncCtx7 + 12 | 0; //@line 29290
  HEAP32[$54 >> 2] = $14; //@line 29291
  $55 = $ReallocAsyncCtx7 + 16 | 0; //@line 29292
  HEAP32[$55 >> 2] = $16; //@line 29293
  $56 = $ReallocAsyncCtx7 + 20 | 0; //@line 29294
  HEAP32[$56 >> 2] = $6; //@line 29295
  sp = STACKTOP; //@line 29296
  return;
 }
 ___async_unwind = 0; //@line 29299
 HEAP32[$ReallocAsyncCtx7 >> 2] = 524; //@line 29300
 $52 = $ReallocAsyncCtx7 + 4 | 0; //@line 29301
 HEAP32[$52 >> 2] = $8; //@line 29302
 $53 = $ReallocAsyncCtx7 + 8 | 0; //@line 29303
 HEAP32[$53 >> 2] = $12; //@line 29304
 $54 = $ReallocAsyncCtx7 + 12 | 0; //@line 29305
 HEAP32[$54 >> 2] = $14; //@line 29306
 $55 = $ReallocAsyncCtx7 + 16 | 0; //@line 29307
 HEAP32[$55 >> 2] = $16; //@line 29308
 $56 = $ReallocAsyncCtx7 + 20 | 0; //@line 29309
 HEAP32[$56 >> 2] = $6; //@line 29310
 sp = STACKTOP; //@line 29311
 return;
}
function __ZN7LoRaMac15send_ongoing_txEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $10 = 0, $13 = 0, $14 = 0, $18 = 0, $2 = 0, $21 = 0, $24 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 15780
 STACKTOP = STACKTOP + 16 | 0; //@line 15781
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15781
 $1 = sp + 1 | 0; //@line 15782
 $2 = sp; //@line 15783
 HEAP8[$0 + 1180 >> 0] = 0; //@line 15785
 $4 = $0 + 1877 | 0; //@line 15786
 $5 = HEAP8[$4 >> 0] | 0; //@line 15787
 $6 = $0 + 4 | 0; //@line 15788
 if ($5 << 24 >> 24 > (__ZN7LoRaPHY23get_minimum_tx_datarateEv($6) | 0) << 24 >> 24) {
  $21 = $5; //@line 15792
 } else {
  $21 = __ZN7LoRaPHY23get_minimum_tx_datarateEv($6) | 0; //@line 15795
 }
 HEAP8[$2 >> 0] = 0; //@line 15797
 $10 = $0 + 2052 | 0; //@line 15798
 HEAP32[$10 >> 2] = 0; //@line 15799
 HEAP32[$10 + 4 >> 2] = 0; //@line 15799
 HEAP32[$10 + 8 >> 2] = 0; //@line 15799
 HEAP32[$10 + 12 >> 2] = 0; //@line 15799
 HEAP32[$10 + 16 >> 2] = 0; //@line 15799
 HEAP32[$10 + 20 >> 2] = 0; //@line 15799
 HEAP32[$0 + 2056 >> 2] = 1; //@line 15801
 HEAP8[$0 + 1699 >> 0] = 1; //@line 15803
 $13 = $0 + 1698 | 0; //@line 15804
 HEAP8[$13 >> 0] = 1; //@line 15805
 $14 = $0 + 2108 | 0; //@line 15806
 switch (HEAP32[$14 >> 2] | 0) {
 case 0:
  {
   HEAP8[$2 >> 0] = 64; //@line 15810
   break;
  }
 case 1:
  {
   HEAP8[$2 >> 0] = -128; //@line 15814
   HEAP8[$13 >> 0] = HEAP8[$0 + 2114 >> 0] | 0; //@line 15817
   break;
  }
 case 3:
  {
   HEAP8[$2 >> 0] = -32; //@line 15821
   break;
  }
 default:
  {
   $$0 = -1002; //@line 15825
   STACKTOP = sp; //@line 15826
   return $$0 | 0; //@line 15826
  }
 }
 $18 = $0 + 1936 | 0; //@line 15829
 do {
  if (!(HEAP8[$18 >> 0] | 0)) {
   if (__ZN7LoRaPHY18verify_tx_datarateEhb($6, $21, 0) | 0) {
    HEAP8[$4 >> 0] = $21; //@line 15836
    $28 = HEAP8[$18 >> 0] << 7 & 255; //@line 15839
    break;
   } else {
    $$0 = -1003; //@line 15842
    STACKTOP = sp; //@line 15843
    return $$0 | 0; //@line 15843
   }
  } else {
   $28 = -128; //@line 15846
  }
 } while (0);
 $24 = HEAP8[$0 + 2112 >> 0] | 0; //@line 15850
 $27 = HEAP16[$0 + 2370 >> 1] | 0; //@line 15853
 HEAP8[$1 >> 0] = $28; //@line 15854
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 15855
 $29 = __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt($0, $2, $1, $24, $0 + 2115 | 0, $27) | 0; //@line 15856
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 450; //@line 15859
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 15861
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 15863
  HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 15865
  HEAP32[$AsyncCtx + 16 >> 2] = $14; //@line 15867
  sp = STACKTOP; //@line 15868
  STACKTOP = sp; //@line 15869
  return 0; //@line 15869
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 15871
 if ($29 | 0) {
  $$0 = $29; //@line 15874
  STACKTOP = sp; //@line 15875
  return $$0 | 0; //@line 15875
 }
 HEAP8[$0 + 2063 >> 0] = 0; //@line 15878
 HEAP8[$0 + 2062 >> 0] = 0; //@line 15880
 HEAP32[$0 + 2068 >> 2] = HEAP32[$0 + 1760 >> 2]; //@line 15884
 $AsyncCtx2 = _emscripten_alloc_async_context(20, sp) | 0; //@line 15885
 $40 = __ZN7LoRaMac11schedule_txEv($0) | 0; //@line 15886
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 451; //@line 15889
  HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 15891
  HEAP32[$AsyncCtx2 + 8 >> 2] = $14; //@line 15893
  HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 15895
  HEAP32[$AsyncCtx2 + 16 >> 2] = $2; //@line 15897
  sp = STACKTOP; //@line 15898
  STACKTOP = sp; //@line 15899
  return 0; //@line 15899
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 15901
 if ($40 | 0) {
  $$0 = $40; //@line 15904
  STACKTOP = sp; //@line 15905
  return $$0 | 0; //@line 15905
 }
 HEAP32[$0 + 2052 >> 2] = HEAP32[$14 >> 2]; //@line 15909
 $$0 = 0; //@line 15910
 STACKTOP = sp; //@line 15911
 return $$0 | 0; //@line 15911
}
function __ZN12radio_eventsD2Ev($0) {
 $0 = $0 | 0;
 var $13 = 0, $16 = 0, $2 = 0, $20 = 0, $23 = 0, $27 = 0, $30 = 0, $34 = 0, $37 = 0, $41 = 0, $44 = 0, $47 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 5782
 $2 = HEAP32[$0 + 108 >> 2] | 0; //@line 5784
 do {
  if ($2 | 0) {
   $6 = HEAP32[$2 + 8 >> 2] | 0; //@line 5790
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 5791
   FUNCTION_TABLE_vi[$6 & 1023]($0 + 96 | 0); //@line 5792
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 173; //@line 5795
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 5797
    sp = STACKTOP; //@line 5798
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 5801
    break;
   }
  }
 } while (0);
 $9 = HEAP32[$0 + 92 >> 2] | 0; //@line 5807
 do {
  if ($9 | 0) {
   $13 = HEAP32[$9 + 8 >> 2] | 0; //@line 5813
   $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5814
   FUNCTION_TABLE_vi[$13 & 1023]($0 + 80 | 0); //@line 5815
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 174; //@line 5818
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 5820
    sp = STACKTOP; //@line 5821
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5824
    break;
   }
  }
 } while (0);
 $16 = HEAP32[$0 + 76 >> 2] | 0; //@line 5830
 do {
  if ($16 | 0) {
   $20 = HEAP32[$16 + 8 >> 2] | 0; //@line 5836
   $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5837
   FUNCTION_TABLE_vi[$20 & 1023]($0 + 64 | 0); //@line 5838
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 175; //@line 5841
    HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 5843
    sp = STACKTOP; //@line 5844
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 5847
    break;
   }
  }
 } while (0);
 $23 = HEAP32[$0 + 60 >> 2] | 0; //@line 5853
 do {
  if ($23 | 0) {
   $27 = HEAP32[$23 + 8 >> 2] | 0; //@line 5859
   $AsyncCtx11 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5860
   FUNCTION_TABLE_vi[$27 & 1023]($0 + 48 | 0); //@line 5861
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 176; //@line 5864
    HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 5866
    sp = STACKTOP; //@line 5867
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 5870
    break;
   }
  }
 } while (0);
 $30 = HEAP32[$0 + 44 >> 2] | 0; //@line 5876
 do {
  if ($30 | 0) {
   $34 = HEAP32[$30 + 8 >> 2] | 0; //@line 5882
   $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5883
   FUNCTION_TABLE_vi[$34 & 1023]($0 + 32 | 0); //@line 5884
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 177; //@line 5887
    HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 5889
    sp = STACKTOP; //@line 5890
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 5893
    break;
   }
  }
 } while (0);
 $37 = HEAP32[$0 + 28 >> 2] | 0; //@line 5899
 do {
  if ($37 | 0) {
   $41 = HEAP32[$37 + 8 >> 2] | 0; //@line 5905
   $AsyncCtx19 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5906
   FUNCTION_TABLE_vi[$41 & 1023]($0 + 16 | 0); //@line 5907
   if (___async) {
    HEAP32[$AsyncCtx19 >> 2] = 178; //@line 5910
    HEAP32[$AsyncCtx19 + 4 >> 2] = $0; //@line 5912
    sp = STACKTOP; //@line 5913
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx19 | 0); //@line 5916
    break;
   }
  }
 } while (0);
 $44 = HEAP32[$0 + 12 >> 2] | 0; //@line 5922
 if (!$44) {
  return;
 }
 $47 = HEAP32[$44 + 8 >> 2] | 0; //@line 5928
 $AsyncCtx23 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5929
 FUNCTION_TABLE_vi[$47 & 1023]($0); //@line 5930
 if (___async) {
  HEAP32[$AsyncCtx23 >> 2] = 179; //@line 5933
  sp = STACKTOP; //@line 5934
  return;
 }
 _emscripten_free_async_context($AsyncCtx23 | 0); //@line 5937
 return;
}
function __ZN12LoRaWANStack9handle_txEhPKhthbb($0, $1, $2, $3, $trunc, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $trunc = $trunc | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$1 = 0, $24 = 0, $25 = 0, $28 = 0, $32 = 0, $38 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx7 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11402
 STACKTOP = STACKTOP + 32 | 0; //@line 11403
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 11403
 $vararg_buffer3 = sp + 16 | 0; //@line 11404
 $vararg_buffer1 = sp + 8 | 0; //@line 11405
 $vararg_buffer = sp; //@line 11406
 if (!(($2 | 0) != 0 | $4)) {
  $$1 = -1003; //@line 11410
  STACKTOP = sp; //@line 11411
  return $$1 | 0; //@line 11411
 }
 $7 = $0 + 2909 | 0; //@line 11413
 do {
  if (HEAP8[$7 >> 0] | 0) {
   if (HEAP32[$0 + 2496 >> 2] | 0) {
    HEAP8[$7 >> 0] = 1; //@line 11422
    if (!(HEAP32[$0 + 2528 >> 2] | 0)) {
     _mbed_tracef(2, 12211, 12718, $vararg_buffer); //@line 11427
     break;
    } else {
     __ZN7LoRaMac24setup_link_check_requestEv($0); //@line 11430
     break;
    }
   }
  }
 } while (0);
 if (!(HEAP8[$0 + 2548 >> 0] | 0)) {
  $$1 = -1017; //@line 11440
  STACKTOP = sp; //@line 11441
  return $$1 | 0; //@line 11441
 }
 if (__ZN7LoRaMac10tx_ongoingEv($0) | 0) {
  $$1 = -1001; //@line 11445
  STACKTOP = sp; //@line 11446
  return $$1 | 0; //@line 11446
 }
 if (!(__ZN7LoRaMac10nwk_joinedEv($0) | 0)) {
  $$1 = -1009; //@line 11450
  STACKTOP = sp; //@line 11451
  return $$1 | 0; //@line 11451
 }
 if (!($1 << 24 >> 24 != 0 | $5)) {
  _mbed_tracef(2, 12211, 12775, $vararg_buffer1); //@line 11456
  $$1 = -1015; //@line 11457
  STACKTOP = sp; //@line 11458
  return $$1 | 0; //@line 11458
 }
 HEAP8[$0 + 2908 >> 0] = $1; //@line 11461
 switch ($trunc & 15) {
 case 8:
 case 2:
 case 1:
  {
   break;
  }
 default:
  {
   _mbed_tracef(2, 12211, 12812, $vararg_buffer3); //@line 11468
   $$1 = -1003; //@line 11469
   STACKTOP = sp; //@line 11470
   return $$1 | 0; //@line 11470
  }
 }
 $24 = HEAP8[$0 + 2902 >> 0] | 0; //@line 11474
 $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 11475
 $25 = __ZN7LoRaMac18prepare_ongoing_txEhPKhthh($0, $1, $2, $3, $trunc, $24) | 0; //@line 11476
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 368; //@line 11479
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 11481
  HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 11483
  sp = STACKTOP; //@line 11484
  STACKTOP = sp; //@line 11485
  return 0; //@line 11485
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 11487
 $28 = $0 + 2496 | 0; //@line 11488
 switch (HEAP32[$28 >> 2] | 0) {
 case 5:
 case 2:
  {
   label = 18; //@line 11492
   break;
  }
 default:
  {
   if ((__ZNK7LoRaMac16get_device_classEv($0) | 0) == 2) {
    label = 18; //@line 11499
   } else {
    $$0 = -1e3; //@line 11501
   }
  }
 }
 if ((label | 0) == 18) {
  $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 11506
  $32 = __ZN7LoRaMac15send_ongoing_txEv($0) | 0; //@line 11507
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 369; //@line 11510
   HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 11512
   HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 11514
   HEAP32[$AsyncCtx + 12 >> 2] = $28; //@line 11516
   HEAP16[$AsyncCtx + 16 >> 1] = $25; //@line 11518
   sp = STACKTOP; //@line 11519
   STACKTOP = sp; //@line 11520
   return 0; //@line 11520
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 11522
  if (!$32) {
   $38 = $0 + 2904 | 0; //@line 11525
   HEAP32[$38 >> 2] = HEAP32[$38 >> 2] & -18 | 1; //@line 11529
   __ZN7LoRaMac14set_tx_ongoingEb($0, 1); //@line 11530
   HEAP32[$28 >> 2] = 8; //@line 11531
   $$0 = 0; //@line 11532
  } else {
   $$0 = $32; //@line 11534
  }
 }
 $$1 = ($$0 | 0) == 0 ? $25 : $$0 & 65535; //@line 11540
 STACKTOP = sp; //@line 11541
 return $$1 | 0; //@line 11541
}
function __ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE__async_cb_217($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 12970
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12976
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12978
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12982
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 12984
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 12986
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 12988
 switch (HEAP32[$6 >> 2] | 0) {
 case 0:
  {
   _mbed_tracef(16, 12890, 13480, $8); //@line 12992
   $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 12994
   __ZN7LoRaPHY18put_radio_to_sleepEv($12 + 4 | 0); //@line 12995
   if (___async) {
    HEAP32[$ReallocAsyncCtx5 >> 2] = 454; //@line 12998
    $18 = $ReallocAsyncCtx5 + 4 | 0; //@line 12999
    HEAP32[$18 >> 2] = $6; //@line 13000
    $19 = $ReallocAsyncCtx5 + 8 | 0; //@line 13001
    HEAP32[$19 >> 2] = $14; //@line 13002
    $20 = $ReallocAsyncCtx5 + 12 | 0; //@line 13003
    HEAP32[$20 >> 2] = $16; //@line 13004
    $21 = $ReallocAsyncCtx5 + 16 | 0; //@line 13005
    HEAP32[$21 >> 2] = $12; //@line 13006
    sp = STACKTOP; //@line 13007
    return;
   }
   ___async_unwind = 0; //@line 13010
   HEAP32[$ReallocAsyncCtx5 >> 2] = 454; //@line 13011
   $18 = $ReallocAsyncCtx5 + 4 | 0; //@line 13012
   HEAP32[$18 >> 2] = $6; //@line 13013
   $19 = $ReallocAsyncCtx5 + 8 | 0; //@line 13014
   HEAP32[$19 >> 2] = $14; //@line 13015
   $20 = $ReallocAsyncCtx5 + 12 | 0; //@line 13016
   HEAP32[$20 >> 2] = $16; //@line 13017
   $21 = $ReallocAsyncCtx5 + 16 | 0; //@line 13018
   HEAP32[$21 >> 2] = $12; //@line 13019
   sp = STACKTOP; //@line 13020
   return;
  }
 case 2:
  {
   HEAP8[$12 + 1177 >> 0] = 0; //@line 13026
   $23 = $12 + 4 | 0; //@line 13027
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 13028
   __ZN7LoRaPHY18put_radio_to_sleepEv($23); //@line 13029
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 455; //@line 13032
    $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 13033
    HEAP32[$24 >> 2] = $12; //@line 13034
    $25 = $ReallocAsyncCtx4 + 8 | 0; //@line 13035
    HEAP32[$25 >> 2] = $23; //@line 13036
    $26 = $ReallocAsyncCtx4 + 12 | 0; //@line 13037
    HEAP32[$26 >> 2] = $6; //@line 13038
    $27 = $ReallocAsyncCtx4 + 16 | 0; //@line 13039
    HEAP32[$27 >> 2] = $14; //@line 13040
    $28 = $ReallocAsyncCtx4 + 20 | 0; //@line 13041
    HEAP32[$28 >> 2] = $16; //@line 13042
    sp = STACKTOP; //@line 13043
    return;
   }
   ___async_unwind = 0; //@line 13046
   HEAP32[$ReallocAsyncCtx4 >> 2] = 455; //@line 13047
   $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 13048
   HEAP32[$24 >> 2] = $12; //@line 13049
   $25 = $ReallocAsyncCtx4 + 8 | 0; //@line 13050
   HEAP32[$25 >> 2] = $23; //@line 13051
   $26 = $ReallocAsyncCtx4 + 12 | 0; //@line 13052
   HEAP32[$26 >> 2] = $6; //@line 13053
   $27 = $ReallocAsyncCtx4 + 16 | 0; //@line 13054
   HEAP32[$27 >> 2] = $14; //@line 13055
   $28 = $ReallocAsyncCtx4 + 20 | 0; //@line 13056
   HEAP32[$28 >> 2] = $16; //@line 13057
   sp = STACKTOP; //@line 13058
   return;
  }
 default:
  {
   if ((HEAP32[$6 >> 2] | 0) != 2) {
    return;
   }
   _mbed_tracef(16, 12890, 13516, $14); //@line 13068
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 13069
   __ZN7LoRaMac15open_rx2_windowEv($12); //@line 13070
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 456; //@line 13073
    sp = STACKTOP; //@line 13074
    return;
   }
   ___async_unwind = 0; //@line 13077
   HEAP32[$ReallocAsyncCtx3 >> 2] = 456; //@line 13078
   sp = STACKTOP; //@line 13079
   return;
  }
 }
}
function __ZN7LoRaMacD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $29 = 0, $30 = 0, $32 = 0, $36 = 0, $37 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 18736
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18738
 $4 = HEAP32[$2 + 1868 >> 2] | 0; //@line 18740
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 18745
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 18746
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 1856 | 0); //@line 18747
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 377; //@line 18750
   $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 18751
   HEAP32[$9 >> 2] = $2; //@line 18752
   sp = STACKTOP; //@line 18753
   return;
  }
  ___async_unwind = 0; //@line 18756
  HEAP32[$ReallocAsyncCtx2 >> 2] = 377; //@line 18757
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 18758
  HEAP32[$9 >> 2] = $2; //@line 18759
  sp = STACKTOP; //@line 18760
  return;
 }
 $11 = HEAP32[$2 + 1848 >> 2] | 0; //@line 18764
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 18769
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 18770
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 1836 | 0); //@line 18771
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 378; //@line 18774
   $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 18775
   HEAP32[$16 >> 2] = $2; //@line 18776
   sp = STACKTOP; //@line 18777
   return;
  }
  ___async_unwind = 0; //@line 18780
  HEAP32[$ReallocAsyncCtx3 >> 2] = 378; //@line 18781
  $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 18782
  HEAP32[$16 >> 2] = $2; //@line 18783
  sp = STACKTOP; //@line 18784
  return;
 }
 $18 = HEAP32[$2 + 1828 >> 2] | 0; //@line 18788
 if ($18 | 0) {
  $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 18793
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 18794
  FUNCTION_TABLE_vi[$22 & 1023]($2 + 1816 | 0); //@line 18795
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 379; //@line 18798
   $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 18799
   HEAP32[$23 >> 2] = $2; //@line 18800
   sp = STACKTOP; //@line 18801
   return;
  }
  ___async_unwind = 0; //@line 18804
  HEAP32[$ReallocAsyncCtx4 >> 2] = 379; //@line 18805
  $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 18806
  HEAP32[$23 >> 2] = $2; //@line 18807
  sp = STACKTOP; //@line 18808
  return;
 }
 $25 = HEAP32[$2 + 1808 >> 2] | 0; //@line 18812
 if ($25 | 0) {
  $29 = HEAP32[$25 + 8 >> 2] | 0; //@line 18817
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 18818
  FUNCTION_TABLE_vi[$29 & 1023]($2 + 1796 | 0); //@line 18819
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 380; //@line 18822
   $30 = $ReallocAsyncCtx5 + 4 | 0; //@line 18823
   HEAP32[$30 >> 2] = $2; //@line 18824
   sp = STACKTOP; //@line 18825
   return;
  }
  ___async_unwind = 0; //@line 18828
  HEAP32[$ReallocAsyncCtx5 >> 2] = 380; //@line 18829
  $30 = $ReallocAsyncCtx5 + 4 | 0; //@line 18830
  HEAP32[$30 >> 2] = $2; //@line 18831
  sp = STACKTOP; //@line 18832
  return;
 }
 $32 = HEAP32[$2 + 748 >> 2] | 0; //@line 18836
 if (!$32) {
  __ZN12LoRaPHYEU868D2Ev($2 + 4 | 0); //@line 18840
  return;
 }
 $36 = HEAP32[$32 + 8 >> 2] | 0; //@line 18845
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 18846
 FUNCTION_TABLE_vi[$36 & 1023]($2 + 736 | 0); //@line 18847
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 381; //@line 18850
  $37 = $ReallocAsyncCtx6 + 4 | 0; //@line 18851
  HEAP32[$37 >> 2] = $2; //@line 18852
  sp = STACKTOP; //@line 18853
  return;
 }
 ___async_unwind = 0; //@line 18856
 HEAP32[$ReallocAsyncCtx6 >> 2] = 381; //@line 18857
 $37 = $ReallocAsyncCtx6 + 4 | 0; //@line 18858
 HEAP32[$37 >> 2] = $2; //@line 18859
 sp = STACKTOP; //@line 18860
 return;
}
function __ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $18 = 0, $27 = 0, $32 = 0, $33 = 0, $6 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 19468
 $6 = $0 + 344 | 0; //@line 19469
 _mbedtls_cipher_init($6); //@line 19470
 $7 = _mbedtls_cipher_info_from_type(2) | 0; //@line 19471
 if (!$7) {
  $$0 = -24960; //@line 19474
 } else {
  $AsyncCtx11 = _emscripten_alloc_async_context(32, sp) | 0; //@line 19476
  $9 = _mbedtls_cipher_setup($6, $7) | 0; //@line 19477
  if (___async) {
   HEAP32[$AsyncCtx11 >> 2] = 505; //@line 19480
   HEAP32[$AsyncCtx11 + 4 >> 2] = $6; //@line 19482
   HEAP32[$AsyncCtx11 + 8 >> 2] = $3; //@line 19484
   HEAP32[$AsyncCtx11 + 12 >> 2] = $4; //@line 19486
   HEAP16[$AsyncCtx11 + 16 >> 1] = $2; //@line 19488
   HEAP32[$AsyncCtx11 + 20 >> 2] = $1; //@line 19490
   HEAP32[$AsyncCtx11 + 24 >> 2] = $0; //@line 19492
   HEAP32[$AsyncCtx11 + 28 >> 2] = $5; //@line 19494
   sp = STACKTOP; //@line 19495
   return 0; //@line 19496
  }
  _emscripten_free_async_context($AsyncCtx11 | 0); //@line 19498
  if (!$9) {
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 19501
   $18 = _mbedtls_cipher_cmac_starts($6, $3, $4) | 0; //@line 19502
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 506; //@line 19505
    HEAP16[$AsyncCtx + 4 >> 1] = $2; //@line 19507
    HEAP32[$AsyncCtx + 8 >> 2] = $6; //@line 19509
    HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 19511
    HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 19513
    HEAP32[$AsyncCtx + 20 >> 2] = $5; //@line 19515
    sp = STACKTOP; //@line 19516
    return 0; //@line 19517
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 19519
   if (!$18) {
    $AsyncCtx7 = _emscripten_alloc_async_context(16, sp) | 0; //@line 19524
    $27 = _mbedtls_cipher_cmac_update($6, $1, $2 & 255) | 0; //@line 19525
    if (___async) {
     HEAP32[$AsyncCtx7 >> 2] = 507; //@line 19528
     HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 19530
     HEAP32[$AsyncCtx7 + 8 >> 2] = $6; //@line 19532
     HEAP32[$AsyncCtx7 + 12 >> 2] = $5; //@line 19534
     sp = STACKTOP; //@line 19535
     return 0; //@line 19536
    }
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 19538
    if (!$27) {
     $32 = $0 + 16 | 0; //@line 19541
     $AsyncCtx3 = _emscripten_alloc_async_context(20, sp) | 0; //@line 19542
     $33 = _mbedtls_cipher_cmac_finish($6, $32) | 0; //@line 19543
     if (___async) {
      HEAP32[$AsyncCtx3 >> 2] = 508; //@line 19546
      HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 19548
      HEAP32[$AsyncCtx3 + 8 >> 2] = $32; //@line 19550
      HEAP32[$AsyncCtx3 + 12 >> 2] = $5; //@line 19552
      HEAP32[$AsyncCtx3 + 16 >> 2] = $6; //@line 19554
      sp = STACKTOP; //@line 19555
      return 0; //@line 19556
     }
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 19558
     if (!$33) {
      HEAP32[$5 >> 2] = (HEAPU8[$0 + 18 >> 0] | 0) << 16 | (HEAPU8[$0 + 19 >> 0] | 0) << 24 | (HEAPU8[$0 + 17 >> 0] | 0) << 8 | (HEAPU8[$32 >> 0] | 0); //@line 19578
      $$0 = 0; //@line 19579
     } else {
      $$0 = $33; //@line 19581
     }
    } else {
     $$0 = $27; //@line 19584
    }
   } else {
    $$0 = $18; //@line 19587
   }
  } else {
   $$0 = $9; //@line 19590
  }
 }
 $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 19593
 _mbedtls_cipher_free($6); //@line 19594
 if (___async) {
  HEAP32[$AsyncCtx15 >> 2] = 509; //@line 19597
  HEAP32[$AsyncCtx15 + 4 >> 2] = $$0; //@line 19599
  sp = STACKTOP; //@line 19600
  return 0; //@line 19601
 } else {
  _emscripten_free_async_context($AsyncCtx15 | 0); //@line 19603
  return $$0 | 0; //@line 19604
 }
 return 0; //@line 19606
}
function _main__async_cb_390($0) {
 $0 = $0 | 0;
 var $$expand_i1_val = 0, $10 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 27107
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27109
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27111
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27113
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27115
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27117
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 27119
 if (!$AsyncRetVal) {
  HEAP32[$10 >> 2] = 0; //@line 27122
  HEAP32[$10 + 4 >> 2] = 0; //@line 27122
  HEAP32[$10 + 8 >> 2] = 0; //@line 27122
  HEAP32[$10 + 12 >> 2] = 0; //@line 27122
  $31 = 1; //@line 27123
  $33 = $10; //@line 27123
 } else {
  HEAP32[$AsyncRetVal + 4 >> 2] = 20448; //@line 27126
  HEAP32[$AsyncRetVal + 8 >> 2] = 0; //@line 27128
  HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 27130
  HEAP32[$AsyncRetVal + 16 >> 2] = -1; //@line 27132
  HEAP32[$AsyncRetVal + 20 >> 2] = 11; //@line 27134
  HEAP32[$AsyncRetVal + 24 >> 2] = 672; //@line 27136
  HEAP32[$AsyncRetVal + 28 >> 2] = 7; //@line 27138
  HEAP32[$AsyncRetVal >> 2] = 1; //@line 27139
  $20 = $10 + 4 | 0; //@line 27140
  HEAP32[$20 >> 2] = 0; //@line 27141
  HEAP32[$20 + 4 >> 2] = 0; //@line 27141
  HEAP32[$20 + 8 >> 2] = 0; //@line 27141
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 27142
  HEAP32[$AsyncRetVal >> 2] = (HEAP32[$AsyncRetVal >> 2] | 0) + 1; //@line 27145
  $31 = 0; //@line 27146
  $33 = $10; //@line 27146
 }
 $23 = $10 + 12 | 0; //@line 27148
 HEAP32[$23 >> 2] = 10264; //@line 27149
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(40) | 0; //@line 27150
 __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE(20376, $10); //@line 27151
 if (___async) {
  HEAP32[$ReallocAsyncCtx13 >> 2] = 673; //@line 27154
  $24 = $ReallocAsyncCtx13 + 4 | 0; //@line 27155
  HEAP32[$24 >> 2] = $2; //@line 27156
  $25 = $ReallocAsyncCtx13 + 8 | 0; //@line 27157
  HEAP32[$25 >> 2] = $AsyncRetVal; //@line 27158
  $26 = $ReallocAsyncCtx13 + 12 | 0; //@line 27159
  HEAP32[$26 >> 2] = $AsyncRetVal; //@line 27160
  $27 = $ReallocAsyncCtx13 + 16 | 0; //@line 27161
  HEAP32[$27 >> 2] = $4; //@line 27162
  $28 = $ReallocAsyncCtx13 + 20 | 0; //@line 27163
  HEAP32[$28 >> 2] = $6; //@line 27164
  $29 = $ReallocAsyncCtx13 + 24 | 0; //@line 27165
  HEAP32[$29 >> 2] = $8; //@line 27166
  $30 = $ReallocAsyncCtx13 + 28 | 0; //@line 27167
  $$expand_i1_val = $31 & 1; //@line 27168
  HEAP8[$30 >> 0] = $$expand_i1_val; //@line 27169
  $32 = $ReallocAsyncCtx13 + 32 | 0; //@line 27170
  HEAP32[$32 >> 2] = $33; //@line 27171
  $34 = $ReallocAsyncCtx13 + 36 | 0; //@line 27172
  HEAP32[$34 >> 2] = $23; //@line 27173
  sp = STACKTOP; //@line 27174
  return;
 }
 ___async_unwind = 0; //@line 27177
 HEAP32[$ReallocAsyncCtx13 >> 2] = 673; //@line 27178
 $24 = $ReallocAsyncCtx13 + 4 | 0; //@line 27179
 HEAP32[$24 >> 2] = $2; //@line 27180
 $25 = $ReallocAsyncCtx13 + 8 | 0; //@line 27181
 HEAP32[$25 >> 2] = $AsyncRetVal; //@line 27182
 $26 = $ReallocAsyncCtx13 + 12 | 0; //@line 27183
 HEAP32[$26 >> 2] = $AsyncRetVal; //@line 27184
 $27 = $ReallocAsyncCtx13 + 16 | 0; //@line 27185
 HEAP32[$27 >> 2] = $4; //@line 27186
 $28 = $ReallocAsyncCtx13 + 20 | 0; //@line 27187
 HEAP32[$28 >> 2] = $6; //@line 27188
 $29 = $ReallocAsyncCtx13 + 24 | 0; //@line 27189
 HEAP32[$29 >> 2] = $8; //@line 27190
 $30 = $ReallocAsyncCtx13 + 28 | 0; //@line 27191
 $$expand_i1_val = $31 & 1; //@line 27192
 HEAP8[$30 >> 0] = $$expand_i1_val; //@line 27193
 $32 = $ReallocAsyncCtx13 + 32 | 0; //@line 27194
 HEAP32[$32 >> 2] = $33; //@line 27195
 $34 = $ReallocAsyncCtx13 + 36 | 0; //@line 27196
 HEAP32[$34 >> 2] = $23; //@line 27197
 sp = STACKTOP; //@line 27198
 return;
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_184($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 32477
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32481
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32483
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32485
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32487
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 32489
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 32491
 $15 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 32492
 if (!$15) {
  $25 = $6 + 12 | 0; //@line 32496
  HEAP32[$6 >> 2] = 471; //@line 32497
  HEAP32[$6 + 4 >> 2] = 0; //@line 32499
  HEAP32[$6 + 8 >> 2] = $4; //@line 32501
  HEAP32[$25 >> 2] = 860; //@line 32502
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 32503
  __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($8, $4 + 1856 | 0, $6); //@line 32504
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 472; //@line 32507
   $26 = $ReallocAsyncCtx5 + 4 | 0; //@line 32508
   HEAP32[$26 >> 2] = $25; //@line 32509
   $27 = $ReallocAsyncCtx5 + 8 | 0; //@line 32510
   HEAP32[$27 >> 2] = $8; //@line 32511
   $28 = $ReallocAsyncCtx5 + 12 | 0; //@line 32512
   HEAP32[$28 >> 2] = $4; //@line 32513
   $29 = $ReallocAsyncCtx5 + 16 | 0; //@line 32514
   HEAP32[$29 >> 2] = $12; //@line 32515
   $30 = $ReallocAsyncCtx5 + 20 | 0; //@line 32516
   HEAP32[$30 >> 2] = $14; //@line 32517
   $31 = $ReallocAsyncCtx5 + 24 | 0; //@line 32518
   HEAP32[$31 >> 2] = $6; //@line 32519
   sp = STACKTOP; //@line 32520
   return;
  }
  ___async_unwind = 0; //@line 32523
  HEAP32[$ReallocAsyncCtx5 >> 2] = 472; //@line 32524
  $26 = $ReallocAsyncCtx5 + 4 | 0; //@line 32525
  HEAP32[$26 >> 2] = $25; //@line 32526
  $27 = $ReallocAsyncCtx5 + 8 | 0; //@line 32527
  HEAP32[$27 >> 2] = $8; //@line 32528
  $28 = $ReallocAsyncCtx5 + 12 | 0; //@line 32529
  HEAP32[$28 >> 2] = $4; //@line 32530
  $29 = $ReallocAsyncCtx5 + 16 | 0; //@line 32531
  HEAP32[$29 >> 2] = $12; //@line 32532
  $30 = $ReallocAsyncCtx5 + 20 | 0; //@line 32533
  HEAP32[$30 >> 2] = $14; //@line 32534
  $31 = $ReallocAsyncCtx5 + 24 | 0; //@line 32535
  HEAP32[$31 >> 2] = $6; //@line 32536
  sp = STACKTOP; //@line 32537
  return;
 } else {
  $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 32541
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 32542
  FUNCTION_TABLE_vi[$18 & 1023]($10); //@line 32543
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 470; //@line 32546
   $19 = $ReallocAsyncCtx3 + 4 | 0; //@line 32547
   HEAP32[$19 >> 2] = $4; //@line 32548
   $20 = $ReallocAsyncCtx3 + 8 | 0; //@line 32549
   HEAP32[$20 >> 2] = $6; //@line 32550
   $21 = $ReallocAsyncCtx3 + 12 | 0; //@line 32551
   HEAP32[$21 >> 2] = $8; //@line 32552
   $22 = $ReallocAsyncCtx3 + 16 | 0; //@line 32553
   HEAP32[$22 >> 2] = $12; //@line 32554
   $23 = $ReallocAsyncCtx3 + 20 | 0; //@line 32555
   HEAP32[$23 >> 2] = $14; //@line 32556
   sp = STACKTOP; //@line 32557
   return;
  }
  ___async_unwind = 0; //@line 32560
  HEAP32[$ReallocAsyncCtx3 >> 2] = 470; //@line 32561
  $19 = $ReallocAsyncCtx3 + 4 | 0; //@line 32562
  HEAP32[$19 >> 2] = $4; //@line 32563
  $20 = $ReallocAsyncCtx3 + 8 | 0; //@line 32564
  HEAP32[$20 >> 2] = $6; //@line 32565
  $21 = $ReallocAsyncCtx3 + 12 | 0; //@line 32566
  HEAP32[$21 >> 2] = $8; //@line 32567
  $22 = $ReallocAsyncCtx3 + 16 | 0; //@line 32568
  HEAP32[$22 >> 2] = $12; //@line 32569
  $23 = $ReallocAsyncCtx3 + 20 | 0; //@line 32570
  HEAP32[$23 >> 2] = $14; //@line 32571
  sp = STACKTOP; //@line 32572
  return;
 }
}
function __ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_300($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $34 = 0, $39 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 20663
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20665
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20667
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20669
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20671
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20673
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20675
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20677
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20679
 if (HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($2) | 0) >> 0] | 0) {
  __ZN7LoRaMac21post_process_mcps_indEv($2); //@line 20684
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2; //@line 20687
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(36) | 0; //@line 20688
  __ZN12LoRaWANStack26process_status_check_stateEv($6); //@line 20689
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 296; //@line 20692
   $22 = $ReallocAsyncCtx4 + 4 | 0; //@line 20693
   HEAP32[$22 >> 2] = $4; //@line 20694
   $23 = $ReallocAsyncCtx4 + 8 | 0; //@line 20695
   HEAP32[$23 >> 2] = $2; //@line 20696
   $24 = $ReallocAsyncCtx4 + 12 | 0; //@line 20697
   HEAP32[$24 >> 2] = $8; //@line 20698
   $25 = $ReallocAsyncCtx4 + 16 | 0; //@line 20699
   HEAP32[$25 >> 2] = $6; //@line 20700
   $26 = $ReallocAsyncCtx4 + 20 | 0; //@line 20701
   HEAP32[$26 >> 2] = $10; //@line 20702
   $27 = $ReallocAsyncCtx4 + 24 | 0; //@line 20703
   HEAP32[$27 >> 2] = $12; //@line 20704
   $28 = $ReallocAsyncCtx4 + 28 | 0; //@line 20705
   HEAP32[$28 >> 2] = $14; //@line 20706
   $29 = $ReallocAsyncCtx4 + 32 | 0; //@line 20707
   HEAP32[$29 >> 2] = $16; //@line 20708
   sp = STACKTOP; //@line 20709
   return;
  }
  ___async_unwind = 0; //@line 20712
  HEAP32[$ReallocAsyncCtx4 >> 2] = 296; //@line 20713
  $22 = $ReallocAsyncCtx4 + 4 | 0; //@line 20714
  HEAP32[$22 >> 2] = $4; //@line 20715
  $23 = $ReallocAsyncCtx4 + 8 | 0; //@line 20716
  HEAP32[$23 >> 2] = $2; //@line 20717
  $24 = $ReallocAsyncCtx4 + 12 | 0; //@line 20718
  HEAP32[$24 >> 2] = $8; //@line 20719
  $25 = $ReallocAsyncCtx4 + 16 | 0; //@line 20720
  HEAP32[$25 >> 2] = $6; //@line 20721
  $26 = $ReallocAsyncCtx4 + 20 | 0; //@line 20722
  HEAP32[$26 >> 2] = $10; //@line 20723
  $27 = $ReallocAsyncCtx4 + 24 | 0; //@line 20724
  HEAP32[$27 >> 2] = $12; //@line 20725
  $28 = $ReallocAsyncCtx4 + 28 | 0; //@line 20726
  HEAP32[$28 >> 2] = $14; //@line 20727
  $29 = $ReallocAsyncCtx4 + 32 | 0; //@line 20728
  HEAP32[$29 >> 2] = $16; //@line 20729
  sp = STACKTOP; //@line 20730
  return;
 }
 if (!(HEAP32[$4 >> 2] & 1)) {
  $34 = (__ZNK7LoRaMac16get_device_classEv($2) | 0) == 2; //@line 20738
  HEAP32[$8 >> 2] = $34 ? 5 : 2; //@line 20740
 }
 if (!(HEAP8[(__ZNK7LoRaMac19get_mlme_indicationEv($2) | 0) + 4 >> 0] | 0)) {
  HEAP8[$6 + 2911 >> 0] = 1; //@line 20748
  return;
 }
 _mbed_tracef(16, 12211, 12433, $10); //@line 20751
 __ZN7LoRaMac21post_process_mlme_indEv($2); //@line 20752
 _mbed_tracef(16, 12211, 12457, $14); //@line 20753
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 20754
 __ZN12LoRaWANStack23mlme_indication_handlerEv($6); //@line 20755
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 297; //@line 20758
  $39 = $ReallocAsyncCtx2 + 4 | 0; //@line 20759
  HEAP32[$39 >> 2] = $6; //@line 20760
  sp = STACKTOP; //@line 20761
  return;
 }
 ___async_unwind = 0; //@line 20764
 HEAP32[$ReallocAsyncCtx2 >> 2] = 297; //@line 20765
 $39 = $ReallocAsyncCtx2 + 4 | 0; //@line 20766
 HEAP32[$39 >> 2] = $6; //@line 20767
 sp = STACKTOP; //@line 20768
 return;
}
function __ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_299($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $34 = 0, $39 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 20550
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20552
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20554
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20556
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20558
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20560
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20562
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20564
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20566
 if (HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($2) | 0) >> 0] | 0) {
  __ZN7LoRaMac21post_process_mcps_indEv($2); //@line 20571
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2; //@line 20574
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(36) | 0; //@line 20575
  __ZN12LoRaWANStack26process_status_check_stateEv($6); //@line 20576
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 296; //@line 20579
   $22 = $ReallocAsyncCtx4 + 4 | 0; //@line 20580
   HEAP32[$22 >> 2] = $4; //@line 20581
   $23 = $ReallocAsyncCtx4 + 8 | 0; //@line 20582
   HEAP32[$23 >> 2] = $2; //@line 20583
   $24 = $ReallocAsyncCtx4 + 12 | 0; //@line 20584
   HEAP32[$24 >> 2] = $8; //@line 20585
   $25 = $ReallocAsyncCtx4 + 16 | 0; //@line 20586
   HEAP32[$25 >> 2] = $6; //@line 20587
   $26 = $ReallocAsyncCtx4 + 20 | 0; //@line 20588
   HEAP32[$26 >> 2] = $10; //@line 20589
   $27 = $ReallocAsyncCtx4 + 24 | 0; //@line 20590
   HEAP32[$27 >> 2] = $12; //@line 20591
   $28 = $ReallocAsyncCtx4 + 28 | 0; //@line 20592
   HEAP32[$28 >> 2] = $14; //@line 20593
   $29 = $ReallocAsyncCtx4 + 32 | 0; //@line 20594
   HEAP32[$29 >> 2] = $16; //@line 20595
   sp = STACKTOP; //@line 20596
   return;
  }
  ___async_unwind = 0; //@line 20599
  HEAP32[$ReallocAsyncCtx4 >> 2] = 296; //@line 20600
  $22 = $ReallocAsyncCtx4 + 4 | 0; //@line 20601
  HEAP32[$22 >> 2] = $4; //@line 20602
  $23 = $ReallocAsyncCtx4 + 8 | 0; //@line 20603
  HEAP32[$23 >> 2] = $2; //@line 20604
  $24 = $ReallocAsyncCtx4 + 12 | 0; //@line 20605
  HEAP32[$24 >> 2] = $8; //@line 20606
  $25 = $ReallocAsyncCtx4 + 16 | 0; //@line 20607
  HEAP32[$25 >> 2] = $6; //@line 20608
  $26 = $ReallocAsyncCtx4 + 20 | 0; //@line 20609
  HEAP32[$26 >> 2] = $10; //@line 20610
  $27 = $ReallocAsyncCtx4 + 24 | 0; //@line 20611
  HEAP32[$27 >> 2] = $12; //@line 20612
  $28 = $ReallocAsyncCtx4 + 28 | 0; //@line 20613
  HEAP32[$28 >> 2] = $14; //@line 20614
  $29 = $ReallocAsyncCtx4 + 32 | 0; //@line 20615
  HEAP32[$29 >> 2] = $16; //@line 20616
  sp = STACKTOP; //@line 20617
  return;
 }
 if (!(HEAP32[$4 >> 2] & 1)) {
  $34 = (__ZNK7LoRaMac16get_device_classEv($2) | 0) == 2; //@line 20625
  HEAP32[$8 >> 2] = $34 ? 5 : 2; //@line 20627
 }
 if (!(HEAP8[(__ZNK7LoRaMac19get_mlme_indicationEv($2) | 0) + 4 >> 0] | 0)) {
  HEAP8[$6 + 2911 >> 0] = 1; //@line 20635
  return;
 }
 _mbed_tracef(16, 12211, 12433, $10); //@line 20638
 __ZN7LoRaMac21post_process_mlme_indEv($2); //@line 20639
 _mbed_tracef(16, 12211, 12457, $14); //@line 20640
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 20641
 __ZN12LoRaWANStack23mlme_indication_handlerEv($6); //@line 20642
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 297; //@line 20645
  $39 = $ReallocAsyncCtx2 + 4 | 0; //@line 20646
  HEAP32[$39 >> 2] = $6; //@line 20647
  sp = STACKTOP; //@line 20648
  return;
 }
 ___async_unwind = 0; //@line 20651
 HEAP32[$ReallocAsyncCtx2 >> 2] = 297; //@line 20652
 $39 = $ReallocAsyncCtx2 + 4 | 0; //@line 20653
 HEAP32[$39 >> 2] = $6; //@line 20654
 sp = STACKTOP; //@line 20655
 return;
}
function __ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_298($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $34 = 0, $39 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 20437
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20439
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20441
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20443
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20445
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20447
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20449
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20451
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20453
 if (HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($2) | 0) >> 0] | 0) {
  __ZN7LoRaMac21post_process_mcps_indEv($2); //@line 20458
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2; //@line 20461
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(36) | 0; //@line 20462
  __ZN12LoRaWANStack26process_status_check_stateEv($6); //@line 20463
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 296; //@line 20466
   $22 = $ReallocAsyncCtx4 + 4 | 0; //@line 20467
   HEAP32[$22 >> 2] = $4; //@line 20468
   $23 = $ReallocAsyncCtx4 + 8 | 0; //@line 20469
   HEAP32[$23 >> 2] = $2; //@line 20470
   $24 = $ReallocAsyncCtx4 + 12 | 0; //@line 20471
   HEAP32[$24 >> 2] = $8; //@line 20472
   $25 = $ReallocAsyncCtx4 + 16 | 0; //@line 20473
   HEAP32[$25 >> 2] = $6; //@line 20474
   $26 = $ReallocAsyncCtx4 + 20 | 0; //@line 20475
   HEAP32[$26 >> 2] = $10; //@line 20476
   $27 = $ReallocAsyncCtx4 + 24 | 0; //@line 20477
   HEAP32[$27 >> 2] = $12; //@line 20478
   $28 = $ReallocAsyncCtx4 + 28 | 0; //@line 20479
   HEAP32[$28 >> 2] = $14; //@line 20480
   $29 = $ReallocAsyncCtx4 + 32 | 0; //@line 20481
   HEAP32[$29 >> 2] = $16; //@line 20482
   sp = STACKTOP; //@line 20483
   return;
  }
  ___async_unwind = 0; //@line 20486
  HEAP32[$ReallocAsyncCtx4 >> 2] = 296; //@line 20487
  $22 = $ReallocAsyncCtx4 + 4 | 0; //@line 20488
  HEAP32[$22 >> 2] = $4; //@line 20489
  $23 = $ReallocAsyncCtx4 + 8 | 0; //@line 20490
  HEAP32[$23 >> 2] = $2; //@line 20491
  $24 = $ReallocAsyncCtx4 + 12 | 0; //@line 20492
  HEAP32[$24 >> 2] = $8; //@line 20493
  $25 = $ReallocAsyncCtx4 + 16 | 0; //@line 20494
  HEAP32[$25 >> 2] = $6; //@line 20495
  $26 = $ReallocAsyncCtx4 + 20 | 0; //@line 20496
  HEAP32[$26 >> 2] = $10; //@line 20497
  $27 = $ReallocAsyncCtx4 + 24 | 0; //@line 20498
  HEAP32[$27 >> 2] = $12; //@line 20499
  $28 = $ReallocAsyncCtx4 + 28 | 0; //@line 20500
  HEAP32[$28 >> 2] = $14; //@line 20501
  $29 = $ReallocAsyncCtx4 + 32 | 0; //@line 20502
  HEAP32[$29 >> 2] = $16; //@line 20503
  sp = STACKTOP; //@line 20504
  return;
 }
 if (!(HEAP32[$4 >> 2] & 1)) {
  $34 = (__ZNK7LoRaMac16get_device_classEv($2) | 0) == 2; //@line 20512
  HEAP32[$8 >> 2] = $34 ? 5 : 2; //@line 20514
 }
 if (!(HEAP8[(__ZNK7LoRaMac19get_mlme_indicationEv($2) | 0) + 4 >> 0] | 0)) {
  HEAP8[$6 + 2911 >> 0] = 1; //@line 20522
  return;
 }
 _mbed_tracef(16, 12211, 12433, $10); //@line 20525
 __ZN7LoRaMac21post_process_mlme_indEv($2); //@line 20526
 _mbed_tracef(16, 12211, 12457, $14); //@line 20527
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 20528
 __ZN12LoRaWANStack23mlme_indication_handlerEv($6); //@line 20529
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 297; //@line 20532
  $39 = $ReallocAsyncCtx2 + 4 | 0; //@line 20533
  HEAP32[$39 >> 2] = $6; //@line 20534
  sp = STACKTOP; //@line 20535
  return;
 }
 ___async_unwind = 0; //@line 20538
 HEAP32[$ReallocAsyncCtx2 >> 2] = 297; //@line 20539
 $39 = $ReallocAsyncCtx2 + 4 | 0; //@line 20540
 HEAP32[$39 >> 2] = $6; //@line 20541
 sp = STACKTOP; //@line 20542
 return;
}
function _vfprintf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$0 = 0, $$1 = 0, $13 = 0, $14 = 0, $19 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $3 = 0, $32 = 0, $4 = 0, $43 = 0, $5 = 0, $51 = 0, $6 = 0, $AsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 12713
 STACKTOP = STACKTOP + 224 | 0; //@line 12714
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224); //@line 12714
 $3 = sp + 120 | 0; //@line 12715
 $4 = sp + 80 | 0; //@line 12716
 $5 = sp; //@line 12717
 $6 = sp + 136 | 0; //@line 12718
 dest = $4; //@line 12719
 stop = dest + 40 | 0; //@line 12719
 do {
  HEAP32[dest >> 2] = 0; //@line 12719
  dest = dest + 4 | 0; //@line 12719
 } while ((dest | 0) < (stop | 0));
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 12721
 if ((_printf_core(0, $1, $3, $5, $4) | 0) < 0) {
  $$0 = -1; //@line 12725
 } else {
  if ((HEAP32[$0 + 76 >> 2] | 0) > -1) {
   $43 = ___lockfile($0) | 0; //@line 12732
  } else {
   $43 = 0; //@line 12734
  }
  $13 = HEAP32[$0 >> 2] | 0; //@line 12736
  $14 = $13 & 32; //@line 12737
  if ((HEAP8[$0 + 74 >> 0] | 0) < 1) {
   HEAP32[$0 >> 2] = $13 & -33; //@line 12743
  }
  $19 = $0 + 48 | 0; //@line 12745
  do {
   if (!(HEAP32[$19 >> 2] | 0)) {
    $23 = $0 + 44 | 0; //@line 12750
    $24 = HEAP32[$23 >> 2] | 0; //@line 12751
    HEAP32[$23 >> 2] = $6; //@line 12752
    $25 = $0 + 28 | 0; //@line 12753
    HEAP32[$25 >> 2] = $6; //@line 12754
    $26 = $0 + 20 | 0; //@line 12755
    HEAP32[$26 >> 2] = $6; //@line 12756
    HEAP32[$19 >> 2] = 80; //@line 12757
    $28 = $0 + 16 | 0; //@line 12759
    HEAP32[$28 >> 2] = $6 + 80; //@line 12760
    $29 = _printf_core($0, $1, $3, $5, $4) | 0; //@line 12761
    if (!$24) {
     $$1 = $29; //@line 12764
    } else {
     $32 = HEAP32[$0 + 36 >> 2] | 0; //@line 12767
     $AsyncCtx = _emscripten_alloc_async_context(64, sp) | 0; //@line 12768
     FUNCTION_TABLE_iiii[$32 & 31]($0, 0, 0) | 0; //@line 12769
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 710; //@line 12772
      HEAP32[$AsyncCtx + 4 >> 2] = $26; //@line 12774
      HEAP32[$AsyncCtx + 8 >> 2] = $29; //@line 12776
      HEAP32[$AsyncCtx + 12 >> 2] = $24; //@line 12778
      HEAP32[$AsyncCtx + 16 >> 2] = $23; //@line 12780
      HEAP32[$AsyncCtx + 20 >> 2] = $19; //@line 12782
      HEAP32[$AsyncCtx + 24 >> 2] = $28; //@line 12784
      HEAP32[$AsyncCtx + 28 >> 2] = $25; //@line 12786
      HEAP32[$AsyncCtx + 32 >> 2] = $0; //@line 12788
      HEAP32[$AsyncCtx + 36 >> 2] = $14; //@line 12790
      HEAP32[$AsyncCtx + 40 >> 2] = $43; //@line 12792
      HEAP32[$AsyncCtx + 44 >> 2] = $0; //@line 12794
      HEAP32[$AsyncCtx + 48 >> 2] = $6; //@line 12796
      HEAP32[$AsyncCtx + 52 >> 2] = $5; //@line 12798
      HEAP32[$AsyncCtx + 56 >> 2] = $4; //@line 12800
      HEAP32[$AsyncCtx + 60 >> 2] = $3; //@line 12802
      sp = STACKTOP; //@line 12803
      STACKTOP = sp; //@line 12804
      return 0; //@line 12804
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 12806
      $$ = (HEAP32[$26 >> 2] | 0) == 0 ? -1 : $29; //@line 12809
      HEAP32[$23 >> 2] = $24; //@line 12810
      HEAP32[$19 >> 2] = 0; //@line 12811
      HEAP32[$28 >> 2] = 0; //@line 12812
      HEAP32[$25 >> 2] = 0; //@line 12813
      HEAP32[$26 >> 2] = 0; //@line 12814
      $$1 = $$; //@line 12815
      break;
     }
    }
   } else {
    $$1 = _printf_core($0, $1, $3, $5, $4) | 0; //@line 12821
   }
  } while (0);
  $51 = HEAP32[$0 >> 2] | 0; //@line 12824
  HEAP32[$0 >> 2] = $51 | $14; //@line 12829
  if ($43 | 0) {
   ___unlockfile($0); //@line 12832
  }
  $$0 = ($51 & 32 | 0) == 0 ? $$1 : -1; //@line 12834
 }
 STACKTOP = sp; //@line 12836
 return $$0 | 0; //@line 12836
}
function _initialize__async_cb_415($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $19 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $36 = 0, $39 = 0, $4 = 0, $43 = 0, $44 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 30024
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30026
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30028
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 30030
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30032
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30034
 $12 = $0 + 24 | 0; //@line 30036
 $14 = HEAP32[$12 >> 2] | 0; //@line 30038
 $17 = HEAP32[$12 + 4 >> 2] | 0; //@line 30041
 $19 = HEAP32[$0 + 32 >> 2] | 0; //@line 30043
 $21 = HEAP32[$0 + 36 >> 2] | 0; //@line 30045
 $23 = HEAP32[$2 >> 2] | 0; //@line 30048
 $24 = $23 + 32 | 0; //@line 30049
 HEAP32[$24 >> 2] = HEAP32[___async_retval >> 2]; //@line 30050
 $25 = $23 + 40 | 0; //@line 30051
 $26 = $25; //@line 30052
 HEAP32[$26 >> 2] = 0; //@line 30054
 HEAP32[$26 + 4 >> 2] = 0; //@line 30057
 $30 = $23 + 8 | 0; //@line 30058
 HEAP32[$30 >> 2] = $4; //@line 30059
 $31 = $23 + 57 | 0; //@line 30060
 HEAP8[$31 >> 0] = $6; //@line 30061
 $32 = _bitshift64Shl(1, 0, $8 | 0) | 0; //@line 30062
 $34 = _i64Add($32 | 0, tempRet0 | 0, -1, 0) | 0; //@line 30064
 $36 = $23 + 12 | 0; //@line 30066
 HEAP32[$36 >> 2] = $34; //@line 30067
 HEAP32[$23 + 16 >> 2] = $10; //@line 30069
 $39 = $23 + 24 | 0; //@line 30071
 HEAP32[$39 >> 2] = $14; //@line 30073
 HEAP32[$39 + 4 >> 2] = $17; //@line 30076
 $43 = $23 + 48 | 0; //@line 30077
 $44 = $43; //@line 30078
 HEAP32[$44 >> 2] = 0; //@line 30080
 HEAP32[$44 + 4 >> 2] = 0; //@line 30083
 HEAP8[$23 + 56 >> 0] = 1; //@line 30085
 $51 = HEAP32[(HEAP32[$19 >> 2] | 0) + 4 >> 2] | 0; //@line 30088
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(36) | 0; //@line 30089
 $52 = FUNCTION_TABLE_i[$51 & 7]() | 0; //@line 30090
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 623; //@line 30093
  $53 = $ReallocAsyncCtx4 + 4 | 0; //@line 30094
  HEAP32[$53 >> 2] = $2; //@line 30095
  $54 = $ReallocAsyncCtx4 + 8 | 0; //@line 30096
  HEAP32[$54 >> 2] = $21; //@line 30097
  $55 = $ReallocAsyncCtx4 + 12 | 0; //@line 30098
  HEAP32[$55 >> 2] = $24; //@line 30099
  $56 = $ReallocAsyncCtx4 + 16 | 0; //@line 30100
  HEAP32[$56 >> 2] = $36; //@line 30101
  $57 = $ReallocAsyncCtx4 + 20 | 0; //@line 30102
  HEAP32[$57 >> 2] = $30; //@line 30103
  $58 = $ReallocAsyncCtx4 + 24 | 0; //@line 30104
  HEAP32[$58 >> 2] = $43; //@line 30105
  $59 = $ReallocAsyncCtx4 + 28 | 0; //@line 30106
  HEAP32[$59 >> 2] = $31; //@line 30107
  $60 = $ReallocAsyncCtx4 + 32 | 0; //@line 30108
  HEAP32[$60 >> 2] = $25; //@line 30109
  sp = STACKTOP; //@line 30110
  return;
 }
 HEAP32[___async_retval >> 2] = $52; //@line 30114
 ___async_unwind = 0; //@line 30115
 HEAP32[$ReallocAsyncCtx4 >> 2] = 623; //@line 30116
 $53 = $ReallocAsyncCtx4 + 4 | 0; //@line 30117
 HEAP32[$53 >> 2] = $2; //@line 30118
 $54 = $ReallocAsyncCtx4 + 8 | 0; //@line 30119
 HEAP32[$54 >> 2] = $21; //@line 30120
 $55 = $ReallocAsyncCtx4 + 12 | 0; //@line 30121
 HEAP32[$55 >> 2] = $24; //@line 30122
 $56 = $ReallocAsyncCtx4 + 16 | 0; //@line 30123
 HEAP32[$56 >> 2] = $36; //@line 30124
 $57 = $ReallocAsyncCtx4 + 20 | 0; //@line 30125
 HEAP32[$57 >> 2] = $30; //@line 30126
 $58 = $ReallocAsyncCtx4 + 24 | 0; //@line 30127
 HEAP32[$58 >> 2] = $43; //@line 30128
 $59 = $ReallocAsyncCtx4 + 28 | 0; //@line 30129
 HEAP32[$59 >> 2] = $31; //@line 30130
 $60 = $ReallocAsyncCtx4 + 32 | 0; //@line 30131
 HEAP32[$60 >> 2] = $25; //@line 30132
 sp = STACKTOP; //@line 30133
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_370($0) {
 $0 = $0 | 0;
 var $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $29 = 0, $32 = 0, $34 = 0, $35 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 25751
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25757
 $14 = HEAP8[$0 + 19 >> 0] | 0; //@line 25767
 $16 = HEAP32[$0 + 20 >> 2] | 0; //@line 25769
 $18 = HEAP32[$0 + 24 >> 2] | 0; //@line 25771
 $20 = HEAP32[$0 + 28 >> 2] | 0; //@line 25773
 $22 = HEAP32[$0 + 32 >> 2] | 0; //@line 25775
 $29 = HEAP32[$6 >> 2] | 0; //@line 25782
 $32 = HEAP32[(HEAP32[$29 >> 2] | 0) + 20 >> 2] | 0; //@line 25785
 $34 = HEAP8[$0 + 17 >> 0] & 1 ? 2 : HEAP8[$0 + 16 >> 0] & 1; //@line 25787
 $35 = HEAP8[$0 + 18 >> 0] | 0; //@line 25788
 if ((HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0) == (HEAPU8[(HEAP32[$0 + 8 >> 2] | 0) + 27 >> 0] | 0)) {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 25791
  FUNCTION_TABLE_viiiiiiiiiiiiii[$32 & 1]($29, 0, $14, 25e3, $34, $35 * 1e3 | 0, 0, 5, 0, 1, 0, 0, 0, 3e3); //@line 25792
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 529; //@line 25795
   $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 25796
   HEAP32[$37 >> 2] = $6; //@line 25797
   $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 25798
   HEAP32[$38 >> 2] = $16; //@line 25799
   $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 25800
   HEAP32[$39 >> 2] = $18; //@line 25801
   $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 25802
   HEAP32[$40 >> 2] = $20; //@line 25803
   $41 = $ReallocAsyncCtx3 + 20 | 0; //@line 25804
   HEAP32[$41 >> 2] = $22; //@line 25805
   sp = STACKTOP; //@line 25806
   return;
  }
  ___async_unwind = 0; //@line 25809
  HEAP32[$ReallocAsyncCtx3 >> 2] = 529; //@line 25810
  $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 25811
  HEAP32[$37 >> 2] = $6; //@line 25812
  $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 25813
  HEAP32[$38 >> 2] = $16; //@line 25814
  $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 25815
  HEAP32[$39 >> 2] = $18; //@line 25816
  $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 25817
  HEAP32[$40 >> 2] = $20; //@line 25818
  $41 = $ReallocAsyncCtx3 + 20 | 0; //@line 25819
  HEAP32[$41 >> 2] = $22; //@line 25820
  sp = STACKTOP; //@line 25821
  return;
 } else {
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 25824
  FUNCTION_TABLE_viiiiiiiiiiiiii[$32 & 1]($29, 1, $14, 0, $34, $35, 1, 8, 0, 1, 0, 0, 0, 3e3); //@line 25825
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 530; //@line 25828
   $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 25829
   HEAP32[$42 >> 2] = $6; //@line 25830
   $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 25831
   HEAP32[$43 >> 2] = $16; //@line 25832
   $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 25833
   HEAP32[$44 >> 2] = $18; //@line 25834
   $45 = $ReallocAsyncCtx4 + 16 | 0; //@line 25835
   HEAP32[$45 >> 2] = $20; //@line 25836
   $46 = $ReallocAsyncCtx4 + 20 | 0; //@line 25837
   HEAP32[$46 >> 2] = $22; //@line 25838
   sp = STACKTOP; //@line 25839
   return;
  }
  ___async_unwind = 0; //@line 25842
  HEAP32[$ReallocAsyncCtx4 >> 2] = 530; //@line 25843
  $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 25844
  HEAP32[$42 >> 2] = $6; //@line 25845
  $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 25846
  HEAP32[$43 >> 2] = $16; //@line 25847
  $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 25848
  HEAP32[$44 >> 2] = $18; //@line 25849
  $45 = $ReallocAsyncCtx4 + 16 | 0; //@line 25850
  HEAP32[$45 >> 2] = $20; //@line 25851
  $46 = $ReallocAsyncCtx4 + 20 | 0; //@line 25852
  HEAP32[$46 >> 2] = $22; //@line 25853
  sp = STACKTOP; //@line 25854
  return;
 }
}
function __ZN12LoRaWANStack23process_connected_stateEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $12 = 0, $14 = 0, $2 = 0, $21 = 0, $22 = 0, $27 = 0, $30 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 10119
 STACKTOP = STACKTOP + 32 | 0; //@line 10120
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 10120
 $1 = sp + 8 | 0; //@line 10122
 $2 = $0 + 2904 | 0; //@line 10123
 if (HEAP32[$2 >> 2] & 8 | 0) {
  _mbed_tracef(16, 12211, 12532, sp); //@line 10128
 }
 HEAP8[$0 + 2548 >> 0] = 1; //@line 10131
 $7 = $0 + 2512 | 0; //@line 10132
 $8 = HEAP32[$7 >> 2] | 0; //@line 10133
 do {
  if ($8 | 0) {
   $12 = HEAP32[$0 + 3168 >> 2] | 0; //@line 10139
   $14 = HEAP32[$8 + 4 >> 2] | 0; //@line 10141
   $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 10142
   FUNCTION_TABLE_vii[$14 & 15]($1, $0 + 2500 | 0); //@line 10143
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 333; //@line 10146
    HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 10148
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 10150
    HEAP32[$AsyncCtx + 12 >> 2] = $12; //@line 10152
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 10154
    HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 10156
    HEAP32[$AsyncCtx + 24 >> 2] = $0; //@line 10158
    sp = STACKTOP; //@line 10159
    STACKTOP = sp; //@line 10160
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 10162
   $21 = $1 + 12 | 0; //@line 10164
   HEAP32[$21 >> 2] = HEAP32[$7 >> 2]; //@line 10165
   $AsyncCtx5 = _emscripten_alloc_async_context(20, sp) | 0; //@line 10166
   $22 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($12, $1, 0) | 0; //@line 10167
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 334; //@line 10170
    HEAP32[$AsyncCtx5 + 4 >> 2] = $21; //@line 10172
    HEAP32[$AsyncCtx5 + 8 >> 2] = $1; //@line 10174
    HEAP32[$AsyncCtx5 + 12 >> 2] = $2; //@line 10176
    HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 10178
    sp = STACKTOP; //@line 10179
    STACKTOP = sp; //@line 10180
    return;
   }
   _emscripten_free_async_context($AsyncCtx5 | 0); //@line 10182
   $27 = HEAP32[$21 >> 2] | 0; //@line 10183
   do {
    if ($27 | 0) {
     $30 = HEAP32[$27 + 8 >> 2] | 0; //@line 10188
     $AsyncCtx2 = _emscripten_alloc_async_context(20, sp) | 0; //@line 10189
     FUNCTION_TABLE_vi[$30 & 1023]($1); //@line 10190
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 335; //@line 10193
      HEAP32[$AsyncCtx2 + 4 >> 2] = $22; //@line 10195
      HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 10197
      HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 10199
      HEAP32[$AsyncCtx2 + 16 >> 2] = $0; //@line 10201
      sp = STACKTOP; //@line 10202
      STACKTOP = sp; //@line 10203
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx2 | 0); //@line 10205
      break;
     }
    }
   } while (0);
   if (!$22) {
    $AsyncCtx9 = _emscripten_alloc_async_context(16, sp) | 0; //@line 10212
    _mbed_assert_internal(12104, 12113, 775); //@line 10213
    if (___async) {
     HEAP32[$AsyncCtx9 >> 2] = 336; //@line 10216
     HEAP32[$AsyncCtx9 + 4 >> 2] = $1; //@line 10218
     HEAP32[$AsyncCtx9 + 8 >> 2] = $2; //@line 10220
     HEAP32[$AsyncCtx9 + 12 >> 2] = $0; //@line 10222
     sp = STACKTOP; //@line 10223
     STACKTOP = sp; //@line 10224
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx9 | 0); //@line 10226
     break;
    }
   }
  }
 } while (0);
 HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | 4; //@line 10234
 HEAP32[$0 + 2496 >> 2] = 2; //@line 10236
 STACKTOP = sp; //@line 10237
 return;
}
function ___dynamic_cast($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $24 = 0, $30 = 0, $33 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 17010
 STACKTOP = STACKTOP + 64 | 0; //@line 17011
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 17011
 $4 = sp; //@line 17012
 $5 = HEAP32[$0 >> 2] | 0; //@line 17013
 $8 = $0 + (HEAP32[$5 + -8 >> 2] | 0) | 0; //@line 17016
 $10 = HEAP32[$5 + -4 >> 2] | 0; //@line 17018
 HEAP32[$4 >> 2] = $2; //@line 17019
 HEAP32[$4 + 4 >> 2] = $0; //@line 17021
 HEAP32[$4 + 8 >> 2] = $1; //@line 17023
 HEAP32[$4 + 12 >> 2] = $3; //@line 17025
 $14 = $4 + 16 | 0; //@line 17026
 $15 = $4 + 20 | 0; //@line 17027
 $16 = $4 + 24 | 0; //@line 17028
 $17 = $4 + 28 | 0; //@line 17029
 $18 = $4 + 32 | 0; //@line 17030
 $19 = $4 + 40 | 0; //@line 17031
 dest = $14; //@line 17032
 stop = dest + 36 | 0; //@line 17032
 do {
  HEAP32[dest >> 2] = 0; //@line 17032
  dest = dest + 4 | 0; //@line 17032
 } while ((dest | 0) < (stop | 0));
 HEAP16[$14 + 36 >> 1] = 0; //@line 17032
 HEAP8[$14 + 38 >> 0] = 0; //@line 17032
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($10, $2, 0) | 0) {
   HEAP32[$4 + 48 >> 2] = 1; //@line 17037
   $24 = HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] | 0; //@line 17040
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 17041
   FUNCTION_TABLE_viiiiii[$24 & 3]($10, $4, $8, $8, 1, 0); //@line 17042
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 726; //@line 17045
    HEAP32[$AsyncCtx + 4 >> 2] = $16; //@line 17047
    HEAP32[$AsyncCtx + 8 >> 2] = $8; //@line 17049
    HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 17051
    sp = STACKTOP; //@line 17052
    STACKTOP = sp; //@line 17053
    return 0; //@line 17053
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 17055
    $$0 = (HEAP32[$16 >> 2] | 0) == 1 ? $8 : 0; //@line 17059
    break;
   }
  } else {
   $30 = $4 + 36 | 0; //@line 17063
   $33 = HEAP32[(HEAP32[$10 >> 2] | 0) + 24 >> 2] | 0; //@line 17066
   $AsyncCtx3 = _emscripten_alloc_async_context(36, sp) | 0; //@line 17067
   FUNCTION_TABLE_viiiii[$33 & 7]($10, $4, $8, 1, 0); //@line 17068
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 727; //@line 17071
    HEAP32[$AsyncCtx3 + 4 >> 2] = $30; //@line 17073
    HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 17075
    HEAP32[$AsyncCtx3 + 12 >> 2] = $19; //@line 17077
    HEAP32[$AsyncCtx3 + 16 >> 2] = $17; //@line 17079
    HEAP32[$AsyncCtx3 + 20 >> 2] = $18; //@line 17081
    HEAP32[$AsyncCtx3 + 24 >> 2] = $15; //@line 17083
    HEAP32[$AsyncCtx3 + 28 >> 2] = $16; //@line 17085
    HEAP32[$AsyncCtx3 + 32 >> 2] = $14; //@line 17087
    sp = STACKTOP; //@line 17088
    STACKTOP = sp; //@line 17089
    return 0; //@line 17089
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 17091
   switch (HEAP32[$30 >> 2] | 0) {
   case 0:
    {
     $$0 = (HEAP32[$19 >> 2] | 0) == 1 & (HEAP32[$17 >> 2] | 0) == 1 & (HEAP32[$18 >> 2] | 0) == 1 ? HEAP32[$15 >> 2] | 0 : 0; //@line 17105
     break L1;
     break;
    }
   case 1:
    {
     break;
    }
   default:
    {
     $$0 = 0; //@line 17113
     break L1;
    }
   }
   if ((HEAP32[$16 >> 2] | 0) != 1) {
    if (!((HEAP32[$19 >> 2] | 0) == 0 & (HEAP32[$17 >> 2] | 0) == 1 & (HEAP32[$18 >> 2] | 0) == 1)) {
     $$0 = 0; //@line 17129
     break;
    }
   }
   $$0 = HEAP32[$14 >> 2] | 0; //@line 17134
  }
 } while (0);
 STACKTOP = sp; //@line 17137
 return $$0 | 0; //@line 17137
}
function __ZN7LoRaMacD2Ev($0) {
 $0 = $0 | 0;
 var $13 = 0, $16 = 0, $2 = 0, $20 = 0, $23 = 0, $27 = 0, $30 = 0, $34 = 0, $37 = 0, $41 = 0, $43 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 12024
 $2 = HEAP32[$0 + 2008 >> 2] | 0; //@line 12026
 do {
  if ($2 | 0) {
   $6 = HEAP32[$2 + 8 >> 2] | 0; //@line 12032
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 12033
   FUNCTION_TABLE_vi[$6 & 1023]($0 + 1996 | 0); //@line 12034
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 376; //@line 12037
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 12039
    sp = STACKTOP; //@line 12040
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 12043
    break;
   }
  }
 } while (0);
 $9 = HEAP32[$0 + 1868 >> 2] | 0; //@line 12049
 do {
  if ($9 | 0) {
   $13 = HEAP32[$9 + 8 >> 2] | 0; //@line 12055
   $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12056
   FUNCTION_TABLE_vi[$13 & 1023]($0 + 1856 | 0); //@line 12057
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 377; //@line 12060
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 12062
    sp = STACKTOP; //@line 12063
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 12066
    break;
   }
  }
 } while (0);
 $16 = HEAP32[$0 + 1848 >> 2] | 0; //@line 12072
 do {
  if ($16 | 0) {
   $20 = HEAP32[$16 + 8 >> 2] | 0; //@line 12078
   $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12079
   FUNCTION_TABLE_vi[$20 & 1023]($0 + 1836 | 0); //@line 12080
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 378; //@line 12083
    HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 12085
    sp = STACKTOP; //@line 12086
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 12089
    break;
   }
  }
 } while (0);
 $23 = HEAP32[$0 + 1828 >> 2] | 0; //@line 12095
 do {
  if ($23 | 0) {
   $27 = HEAP32[$23 + 8 >> 2] | 0; //@line 12101
   $AsyncCtx11 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12102
   FUNCTION_TABLE_vi[$27 & 1023]($0 + 1816 | 0); //@line 12103
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 379; //@line 12106
    HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 12108
    sp = STACKTOP; //@line 12109
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 12112
    break;
   }
  }
 } while (0);
 $30 = HEAP32[$0 + 1808 >> 2] | 0; //@line 12118
 do {
  if ($30 | 0) {
   $34 = HEAP32[$30 + 8 >> 2] | 0; //@line 12124
   $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12125
   FUNCTION_TABLE_vi[$34 & 1023]($0 + 1796 | 0); //@line 12126
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 380; //@line 12129
    HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 12131
    sp = STACKTOP; //@line 12132
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 12135
    break;
   }
  }
 } while (0);
 $37 = HEAP32[$0 + 748 >> 2] | 0; //@line 12141
 if (!$37) {
  $43 = $0 + 4 | 0; //@line 12144
  __ZN12LoRaPHYEU868D2Ev($43); //@line 12145
  return;
 }
 $41 = HEAP32[$37 + 8 >> 2] | 0; //@line 12150
 $AsyncCtx19 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12151
 FUNCTION_TABLE_vi[$41 & 1023]($0 + 736 | 0); //@line 12152
 if (___async) {
  HEAP32[$AsyncCtx19 >> 2] = 381; //@line 12155
  HEAP32[$AsyncCtx19 + 4 >> 2] = $0; //@line 12157
  sp = STACKTOP; //@line 12158
  return;
 }
 _emscripten_free_async_context($AsyncCtx19 | 0); //@line 12161
 $43 = $0 + 4 | 0; //@line 12162
 __ZN12LoRaPHYEU868D2Ev($43); //@line 12163
 return;
}
function _main__async_cb_379($0) {
 $0 = $0 | 0;
 var $$pr = 0, $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 26415
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26417
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26419
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26421
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26423
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26425
 $$pr = HEAP32[$2 >> 2] | 0; //@line 26426
 if ($$pr | 0) {
  $13 = HEAP32[$$pr + 4 >> 2] | 0; //@line 26430
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 26431
  FUNCTION_TABLE_vii[$13 & 15](23828, $4); //@line 26432
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 679; //@line 26435
   $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 26436
   HEAP32[$14 >> 2] = $2; //@line 26437
   $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 26438
   HEAP32[$15 >> 2] = $4; //@line 26439
   $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 26440
   HEAP32[$16 >> 2] = $6; //@line 26441
   $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 26442
   HEAP32[$17 >> 2] = $8; //@line 26443
   $18 = $ReallocAsyncCtx4 + 20 | 0; //@line 26444
   HEAP32[$18 >> 2] = $10; //@line 26445
   sp = STACKTOP; //@line 26446
   return;
  }
  ___async_unwind = 0; //@line 26449
  HEAP32[$ReallocAsyncCtx4 >> 2] = 679; //@line 26450
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 26451
  HEAP32[$14 >> 2] = $2; //@line 26452
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 26453
  HEAP32[$15 >> 2] = $4; //@line 26454
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 26455
  HEAP32[$16 >> 2] = $6; //@line 26456
  $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 26457
  HEAP32[$17 >> 2] = $8; //@line 26458
  $18 = $ReallocAsyncCtx4 + 20 | 0; //@line 26459
  HEAP32[$18 >> 2] = $10; //@line 26460
  sp = STACKTOP; //@line 26461
  return;
 }
 HEAP32[5960] = 0; //@line 26464
 __ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t(20652, 23828) | 0; //@line 26465
 if (__ZN16LoRaWANInterface25disable_adaptive_datarateEv(20652) | 0) {
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 26469
  _puts(15381) | 0; //@line 26470
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 681; //@line 26473
   sp = STACKTOP; //@line 26474
   return;
  }
  ___async_unwind = 0; //@line 26477
  HEAP32[$ReallocAsyncCtx7 >> 2] = 681; //@line 26478
  sp = STACKTOP; //@line 26479
  return;
 }
 __ZN16LoRaWANInterface12set_datarateEh(20652, 5) | 0; //@line 26482
 HEAP8[$10 >> 0] = 0; //@line 26483
 HEAP32[$10 + 4 >> 2] = 24461; //@line 26485
 HEAP32[$10 + 8 >> 2] = 24469; //@line 26487
 HEAP32[$10 + 12 >> 2] = 24477; //@line 26489
 HEAP8[$10 + 16 >> 0] = 3; //@line 26491
 $25 = __ZN16LoRaWANInterface7connectERK15lorawan_connect(20652, $10) | 0; //@line 26492
 switch ($25 | 0) {
 case 0:
 case -1016:
  {
   break;
  }
 default:
  {
   HEAP32[$6 >> 2] = $25; //@line 26498
   _printf(15415, $6) | 0; //@line 26499
   HEAP32[___async_retval >> 2] = -1; //@line 26501
   return;
  }
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 26505
 _puts(15444) | 0; //@line 26506
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 682; //@line 26509
  $26 = $ReallocAsyncCtx6 + 4 | 0; //@line 26510
  HEAP32[$26 >> 2] = $10; //@line 26511
  sp = STACKTOP; //@line 26512
  return;
 }
 ___async_unwind = 0; //@line 26515
 HEAP32[$ReallocAsyncCtx6 >> 2] = 682; //@line 26516
 $26 = $ReallocAsyncCtx6 + 4 | 0; //@line 26517
 HEAP32[$26 >> 2] = $10; //@line 26518
 sp = STACKTOP; //@line 26519
 return;
}
function __ZN12radio_eventsD2Ev__async_cb_289($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $29 = 0, $30 = 0, $32 = 0, $35 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 19311
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19313
 $4 = HEAP32[$2 + 76 >> 2] | 0; //@line 19315
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 19320
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 19321
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 64 | 0); //@line 19322
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 175; //@line 19325
   $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 19326
   HEAP32[$9 >> 2] = $2; //@line 19327
   sp = STACKTOP; //@line 19328
   return;
  }
  ___async_unwind = 0; //@line 19331
  HEAP32[$ReallocAsyncCtx3 >> 2] = 175; //@line 19332
  $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 19333
  HEAP32[$9 >> 2] = $2; //@line 19334
  sp = STACKTOP; //@line 19335
  return;
 }
 $11 = HEAP32[$2 + 60 >> 2] | 0; //@line 19339
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 19344
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 19345
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 48 | 0); //@line 19346
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 176; //@line 19349
   $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 19350
   HEAP32[$16 >> 2] = $2; //@line 19351
   sp = STACKTOP; //@line 19352
   return;
  }
  ___async_unwind = 0; //@line 19355
  HEAP32[$ReallocAsyncCtx4 >> 2] = 176; //@line 19356
  $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 19357
  HEAP32[$16 >> 2] = $2; //@line 19358
  sp = STACKTOP; //@line 19359
  return;
 }
 $18 = HEAP32[$2 + 44 >> 2] | 0; //@line 19363
 if ($18 | 0) {
  $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 19368
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 19369
  FUNCTION_TABLE_vi[$22 & 1023]($2 + 32 | 0); //@line 19370
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 177; //@line 19373
   $23 = $ReallocAsyncCtx5 + 4 | 0; //@line 19374
   HEAP32[$23 >> 2] = $2; //@line 19375
   sp = STACKTOP; //@line 19376
   return;
  }
  ___async_unwind = 0; //@line 19379
  HEAP32[$ReallocAsyncCtx5 >> 2] = 177; //@line 19380
  $23 = $ReallocAsyncCtx5 + 4 | 0; //@line 19381
  HEAP32[$23 >> 2] = $2; //@line 19382
  sp = STACKTOP; //@line 19383
  return;
 }
 $25 = HEAP32[$2 + 28 >> 2] | 0; //@line 19387
 if ($25 | 0) {
  $29 = HEAP32[$25 + 8 >> 2] | 0; //@line 19392
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 19393
  FUNCTION_TABLE_vi[$29 & 1023]($2 + 16 | 0); //@line 19394
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 178; //@line 19397
   $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 19398
   HEAP32[$30 >> 2] = $2; //@line 19399
   sp = STACKTOP; //@line 19400
   return;
  }
  ___async_unwind = 0; //@line 19403
  HEAP32[$ReallocAsyncCtx6 >> 2] = 178; //@line 19404
  $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 19405
  HEAP32[$30 >> 2] = $2; //@line 19406
  sp = STACKTOP; //@line 19407
  return;
 }
 $32 = HEAP32[$2 + 12 >> 2] | 0; //@line 19411
 if (!$32) {
  return;
 }
 $35 = HEAP32[$32 + 8 >> 2] | 0; //@line 19417
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 19418
 FUNCTION_TABLE_vi[$35 & 1023]($2); //@line 19419
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 179; //@line 19422
  sp = STACKTOP; //@line 19423
  return;
 }
 ___async_unwind = 0; //@line 19426
 HEAP32[$ReallocAsyncCtx7 >> 2] = 179; //@line 19427
 sp = STACKTOP; //@line 19428
 return;
}
function __ZN7LoRaMac10disconnectEv($0) {
 $0 = $0 | 0;
 var $19 = 0, $20 = 0, $22 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 16801
 $AsyncCtx15 = _emscripten_alloc_async_context(12, sp) | 0; //@line 16803
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1796 | 0); //@line 16804
 if (___async) {
  HEAP32[$AsyncCtx15 >> 2] = 476; //@line 16807
  HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 16809
  HEAP32[$AsyncCtx15 + 8 >> 2] = $0; //@line 16811
  sp = STACKTOP; //@line 16812
  return;
 }
 _emscripten_free_async_context($AsyncCtx15 | 0); //@line 16815
 $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 16817
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1816 | 0); //@line 16818
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 477; //@line 16821
  HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 16823
  HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 16825
  sp = STACKTOP; //@line 16826
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 16829
 $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 16831
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1836 | 0); //@line 16832
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 478; //@line 16835
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 16837
  HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 16839
  sp = STACKTOP; //@line 16840
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 16843
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 16845
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1856 | 0); //@line 16846
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 479; //@line 16849
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 16851
  sp = STACKTOP; //@line 16852
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 16855
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 16857
 __ZN7LoRaPHY18put_radio_to_sleepEv($0 + 4 | 0); //@line 16858
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 480; //@line 16861
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 16863
  sp = STACKTOP; //@line 16864
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 16867
  HEAP8[$0 + 2376 >> 0] = 0; //@line 16869
  HEAP8[$0 + 1181 >> 0] = 0; //@line 16871
  HEAP8[$0 + 1175 >> 0] = 1; //@line 16873
  HEAP8[$0 + 1177 >> 0] = 0; //@line 16875
  HEAP8[$0 + 1178 >> 0] = 0; //@line 16877
  $19 = $0 + 476 | 0; //@line 16878
  __ZN14LoRaMacCommand20clear_command_bufferEv($19); //@line 16879
  __ZN14LoRaMacCommand19clear_repeat_bufferEv($19); //@line 16880
  __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($19); //@line 16881
  $20 = $0 + 2052 | 0; //@line 16882
  HEAP32[$20 >> 2] = 0; //@line 16883
  HEAP32[$20 + 4 >> 2] = 0; //@line 16883
  HEAP32[$20 + 8 >> 2] = 0; //@line 16883
  HEAP32[$20 + 12 >> 2] = 0; //@line 16883
  HEAP32[$20 + 16 >> 2] = 0; //@line 16883
  HEAP32[$20 + 20 >> 2] = 0; //@line 16883
  HEAP32[$0 + 2056 >> 2] = 1; //@line 16885
  $22 = $0 + 2084 | 0; //@line 16886
  HEAP32[$22 >> 2] = 0; //@line 16887
  HEAP32[$22 + 4 >> 2] = 0; //@line 16887
  HEAP32[$22 + 8 >> 2] = 0; //@line 16887
  HEAP32[$22 + 12 >> 2] = 0; //@line 16887
  HEAP32[$22 + 16 >> 2] = 0; //@line 16887
  HEAP32[$0 + 2092 >> 2] = 1; //@line 16889
  dest = $0 + 2012 | 0; //@line 16891
  stop = dest + 40 | 0; //@line 16891
  do {
   HEAP32[dest >> 2] = 0; //@line 16891
   dest = dest + 4 | 0; //@line 16891
  } while ((dest | 0) < (stop | 0));
  HEAP32[$0 + 2020 >> 2] = 1; //@line 16893
  return;
 }
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_18($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $29 = 0, $30 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 22059
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22061
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22063
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22065
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22067
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22069
 if (!(HEAP32[$0 + 24 >> 2] | 0)) {
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(24) | 0; //@line 22074
  _mbed_assert_internal(12104, 12113, 775); //@line 22075
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 262; //@line 22078
   $14 = $ReallocAsyncCtx11 + 4 | 0; //@line 22079
   HEAP32[$14 >> 2] = $2; //@line 22080
   $15 = $ReallocAsyncCtx11 + 8 | 0; //@line 22081
   HEAP32[$15 >> 2] = $4; //@line 22082
   $16 = $ReallocAsyncCtx11 + 12 | 0; //@line 22083
   HEAP32[$16 >> 2] = $6; //@line 22084
   $17 = $ReallocAsyncCtx11 + 16 | 0; //@line 22085
   HEAP32[$17 >> 2] = $8; //@line 22086
   $18 = $ReallocAsyncCtx11 + 20 | 0; //@line 22087
   HEAP32[$18 >> 2] = $10; //@line 22088
   sp = STACKTOP; //@line 22089
   return;
  }
  ___async_unwind = 0; //@line 22092
  HEAP32[$ReallocAsyncCtx11 >> 2] = 262; //@line 22093
  $14 = $ReallocAsyncCtx11 + 4 | 0; //@line 22094
  HEAP32[$14 >> 2] = $2; //@line 22095
  $15 = $ReallocAsyncCtx11 + 8 | 0; //@line 22096
  HEAP32[$15 >> 2] = $4; //@line 22097
  $16 = $ReallocAsyncCtx11 + 12 | 0; //@line 22098
  HEAP32[$16 >> 2] = $6; //@line 22099
  $17 = $ReallocAsyncCtx11 + 16 | 0; //@line 22100
  HEAP32[$17 >> 2] = $8; //@line 22101
  $18 = $ReallocAsyncCtx11 + 20 | 0; //@line 22102
  HEAP32[$18 >> 2] = $10; //@line 22103
  sp = STACKTOP; //@line 22104
  return;
 }
 if ((__ZNK7LoRaMac16get_device_classEv($6) | 0) == 2) {
  label = 10; //@line 22110
 } else {
  if (!(HEAP8[$4 + 15 >> 0] | 0)) {
   label = 10; //@line 22116
  }
 }
 if ((label | 0) == 10) {
  if ((__ZNK7LoRaMac16get_device_classEv($6) | 0) != 2) {
   return;
  }
  if ((HEAP32[$4 + 4 >> 2] | 0) != 1) {
   return;
  }
 }
 $29 = $8 + 2512 | 0; //@line 22132
 $30 = HEAP32[$29 >> 2] | 0; //@line 22133
 if (!$30) {
  return;
 }
 $34 = HEAP32[$8 + 3168 >> 2] | 0; //@line 22140
 $36 = HEAP32[$30 + 4 >> 2] | 0; //@line 22142
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 22143
 FUNCTION_TABLE_vii[$36 & 15]($10, $8 + 2500 | 0); //@line 22144
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 263; //@line 22147
  $37 = $ReallocAsyncCtx5 + 4 | 0; //@line 22148
  HEAP32[$37 >> 2] = $29; //@line 22149
  $38 = $ReallocAsyncCtx5 + 8 | 0; //@line 22150
  HEAP32[$38 >> 2] = $10; //@line 22151
  $39 = $ReallocAsyncCtx5 + 12 | 0; //@line 22152
  HEAP32[$39 >> 2] = $34; //@line 22153
  $40 = $ReallocAsyncCtx5 + 16 | 0; //@line 22154
  HEAP32[$40 >> 2] = $10; //@line 22155
  sp = STACKTOP; //@line 22156
  return;
 }
 ___async_unwind = 0; //@line 22159
 HEAP32[$ReallocAsyncCtx5 >> 2] = 263; //@line 22160
 $37 = $ReallocAsyncCtx5 + 4 | 0; //@line 22161
 HEAP32[$37 >> 2] = $29; //@line 22162
 $38 = $ReallocAsyncCtx5 + 8 | 0; //@line 22163
 HEAP32[$38 >> 2] = $10; //@line 22164
 $39 = $ReallocAsyncCtx5 + 12 | 0; //@line 22165
 HEAP32[$39 >> 2] = $34; //@line 22166
 $40 = $ReallocAsyncCtx5 + 16 | 0; //@line 22167
 HEAP32[$40 >> 2] = $10; //@line 22168
 sp = STACKTOP; //@line 22169
 return;
}
function _memchr($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $11 = 0, $12 = 0, $16 = 0, $18 = 0, $20 = 0, $23 = 0, $29 = 0, $3 = 0, $30 = 0, $35 = 0, $7 = 0, $8 = 0, label = 0;
 $3 = $1 & 255; //@line 12585
 $7 = ($2 | 0) != 0; //@line 12589
 L1 : do {
  if ($7 & ($0 & 3 | 0) != 0) {
   $8 = $1 & 255; //@line 12593
   $$03555 = $0; //@line 12594
   $$03654 = $2; //@line 12594
   while (1) {
    if ((HEAP8[$$03555 >> 0] | 0) == $8 << 24 >> 24) {
     $$035$lcssa65 = $$03555; //@line 12599
     $$036$lcssa64 = $$03654; //@line 12599
     label = 6; //@line 12600
     break L1;
    }
    $11 = $$03555 + 1 | 0; //@line 12603
    $12 = $$03654 + -1 | 0; //@line 12604
    $16 = ($12 | 0) != 0; //@line 12608
    if ($16 & ($11 & 3 | 0) != 0) {
     $$03555 = $11; //@line 12611
     $$03654 = $12; //@line 12611
    } else {
     $$035$lcssa = $11; //@line 12613
     $$036$lcssa = $12; //@line 12613
     $$lcssa = $16; //@line 12613
     label = 5; //@line 12614
     break;
    }
   }
  } else {
   $$035$lcssa = $0; //@line 12619
   $$036$lcssa = $2; //@line 12619
   $$lcssa = $7; //@line 12619
   label = 5; //@line 12620
  }
 } while (0);
 if ((label | 0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa; //@line 12625
   $$036$lcssa64 = $$036$lcssa; //@line 12625
   label = 6; //@line 12626
  } else {
   $$2 = $$035$lcssa; //@line 12628
   $$3 = 0; //@line 12628
  }
 }
 L8 : do {
  if ((label | 0) == 6) {
   $18 = $1 & 255; //@line 12634
   if ((HEAP8[$$035$lcssa65 >> 0] | 0) == $18 << 24 >> 24) {
    $$2 = $$035$lcssa65; //@line 12637
    $$3 = $$036$lcssa64; //@line 12637
   } else {
    $20 = Math_imul($3, 16843009) | 0; //@line 12639
    L11 : do {
     if ($$036$lcssa64 >>> 0 > 3) {
      $$046 = $$035$lcssa65; //@line 12643
      $$13745 = $$036$lcssa64; //@line 12643
      while (1) {
       $23 = HEAP32[$$046 >> 2] ^ $20; //@line 12646
       if (($23 & -2139062144 ^ -2139062144) & $23 + -16843009 | 0) {
        break;
       }
       $29 = $$046 + 4 | 0; //@line 12655
       $30 = $$13745 + -4 | 0; //@line 12656
       if ($30 >>> 0 > 3) {
        $$046 = $29; //@line 12659
        $$13745 = $30; //@line 12659
       } else {
        $$0$lcssa = $29; //@line 12661
        $$137$lcssa = $30; //@line 12661
        label = 11; //@line 12662
        break L11;
       }
      }
      $$140 = $$046; //@line 12666
      $$23839 = $$13745; //@line 12666
     } else {
      $$0$lcssa = $$035$lcssa65; //@line 12668
      $$137$lcssa = $$036$lcssa64; //@line 12668
      label = 11; //@line 12669
     }
    } while (0);
    if ((label | 0) == 11) {
     if (!$$137$lcssa) {
      $$2 = $$0$lcssa; //@line 12675
      $$3 = 0; //@line 12675
      break;
     } else {
      $$140 = $$0$lcssa; //@line 12678
      $$23839 = $$137$lcssa; //@line 12678
     }
    }
    while (1) {
     if ((HEAP8[$$140 >> 0] | 0) == $18 << 24 >> 24) {
      $$2 = $$140; //@line 12685
      $$3 = $$23839; //@line 12685
      break L8;
     }
     $35 = $$140 + 1 | 0; //@line 12688
     $$23839 = $$23839 + -1 | 0; //@line 12689
     if (!$$23839) {
      $$2 = $35; //@line 12692
      $$3 = 0; //@line 12692
      break;
     } else {
      $$140 = $35; //@line 12695
     }
    }
   }
  }
 } while (0);
 return ($$3 | 0 ? $$2 : 0) | 0; //@line 12703
}
function _fflush($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $12 = 0, $13 = 0, $25 = 0, $28 = 0, $34 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx3 = 0, $AsyncCtx6 = 0, $phitmp = 0, sp = 0;
 sp = STACKTOP; //@line 12356
 do {
  if (!$0) {
   do {
    if (!(HEAP32[2636] | 0)) {
     $34 = 0; //@line 12364
    } else {
     $12 = HEAP32[2636] | 0; //@line 12366
     $AsyncCtx10 = _emscripten_alloc_async_context(4, sp) | 0; //@line 12367
     $13 = _fflush($12) | 0; //@line 12368
     if (___async) {
      HEAP32[$AsyncCtx10 >> 2] = 706; //@line 12371
      sp = STACKTOP; //@line 12372
      return 0; //@line 12373
     } else {
      _emscripten_free_async_context($AsyncCtx10 | 0); //@line 12375
      $34 = $13; //@line 12376
      break;
     }
    }
   } while (0);
   $$02325 = HEAP32[(___ofl_lock() | 0) >> 2] | 0; //@line 12382
   L9 : do {
    if (!$$02325) {
     $$024$lcssa = $34; //@line 12386
    } else {
     $$02327 = $$02325; //@line 12388
     $$02426 = $34; //@line 12388
     while (1) {
      if ((HEAP32[$$02327 + 76 >> 2] | 0) > -1) {
       $28 = ___lockfile($$02327) | 0; //@line 12395
      } else {
       $28 = 0; //@line 12397
      }
      if ((HEAP32[$$02327 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327 + 28 >> 2] | 0) >>> 0) {
       $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 12405
       $25 = ___fflush_unlocked($$02327) | 0; //@line 12406
       if (___async) {
        break;
       }
       _emscripten_free_async_context($AsyncCtx | 0); //@line 12411
       $$1 = $25 | $$02426; //@line 12413
      } else {
       $$1 = $$02426; //@line 12415
      }
      if ($28 | 0) {
       ___unlockfile($$02327); //@line 12419
      }
      $$023 = HEAP32[$$02327 + 56 >> 2] | 0; //@line 12422
      if (!$$023) {
       $$024$lcssa = $$1; //@line 12425
       break L9;
      } else {
       $$02327 = $$023; //@line 12428
       $$02426 = $$1; //@line 12428
      }
     }
     HEAP32[$AsyncCtx >> 2] = 707; //@line 12431
     HEAP32[$AsyncCtx + 4 >> 2] = $$02426; //@line 12433
     HEAP32[$AsyncCtx + 8 >> 2] = $28; //@line 12435
     HEAP32[$AsyncCtx + 12 >> 2] = $$02327; //@line 12437
     sp = STACKTOP; //@line 12438
     return 0; //@line 12439
    }
   } while (0);
   ___ofl_unlock(); //@line 12442
   $$0 = $$024$lcssa; //@line 12443
  } else {
   if ((HEAP32[$0 + 76 >> 2] | 0) <= -1) {
    $AsyncCtx6 = _emscripten_alloc_async_context(4, sp) | 0; //@line 12449
    $5 = ___fflush_unlocked($0) | 0; //@line 12450
    if (___async) {
     HEAP32[$AsyncCtx6 >> 2] = 704; //@line 12453
     sp = STACKTOP; //@line 12454
     return 0; //@line 12455
    } else {
     _emscripten_free_async_context($AsyncCtx6 | 0); //@line 12457
     $$0 = $5; //@line 12458
     break;
    }
   }
   $phitmp = (___lockfile($0) | 0) == 0; //@line 12463
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12464
   $7 = ___fflush_unlocked($0) | 0; //@line 12465
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 705; //@line 12468
    HEAP8[$AsyncCtx3 + 4 >> 0] = $phitmp & 1; //@line 12471
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 12473
    sp = STACKTOP; //@line 12474
    return 0; //@line 12475
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 12477
   if ($phitmp) {
    $$0 = $7; //@line 12479
   } else {
    ___unlockfile($0); //@line 12481
    $$0 = $7; //@line 12482
   }
  }
 } while (0);
 return $$0 | 0; //@line 12486
}
function __ZN7LoRaPHY18dl_channel_requestEhj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 23715
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23717
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23719
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23721
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23723
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23725
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 23727
 if (HEAP8[___async_retval >> 0] & 1) {
  $31 = $2; //@line 23732
 } else {
  $18 = $2 + 1 | 0; //@line 23734
  if (($18 | 0) < (HEAPU8[$10 >> 0] | 0 | 0)) {
   $16 = HEAP32[(HEAP32[$4 >> 2] | 0) + 76 >> 2] | 0; //@line 23741
   $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 23743
   $19 = FUNCTION_TABLE_iiii[$16 & 31]($6, $8, $18 & 255) | 0; //@line 23744
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 535; //@line 23747
    $20 = $ReallocAsyncCtx + 4 | 0; //@line 23748
    HEAP32[$20 >> 2] = $18; //@line 23749
    $21 = $ReallocAsyncCtx + 8 | 0; //@line 23750
    HEAP32[$21 >> 2] = $4; //@line 23751
    $22 = $ReallocAsyncCtx + 12 | 0; //@line 23752
    HEAP32[$22 >> 2] = $6; //@line 23753
    $23 = $ReallocAsyncCtx + 16 | 0; //@line 23754
    HEAP32[$23 >> 2] = $8; //@line 23755
    $24 = $ReallocAsyncCtx + 20 | 0; //@line 23756
    HEAP32[$24 >> 2] = $10; //@line 23757
    $25 = $ReallocAsyncCtx + 24 | 0; //@line 23758
    HEAP8[$25 >> 0] = $12; //@line 23759
    sp = STACKTOP; //@line 23760
    return;
   }
   HEAP8[___async_retval >> 0] = $19 & 1; //@line 23765
   ___async_unwind = 0; //@line 23766
   HEAP32[$ReallocAsyncCtx >> 2] = 535; //@line 23767
   $20 = $ReallocAsyncCtx + 4 | 0; //@line 23768
   HEAP32[$20 >> 2] = $18; //@line 23769
   $21 = $ReallocAsyncCtx + 8 | 0; //@line 23770
   HEAP32[$21 >> 2] = $4; //@line 23771
   $22 = $ReallocAsyncCtx + 12 | 0; //@line 23772
   HEAP32[$22 >> 2] = $6; //@line 23773
   $23 = $ReallocAsyncCtx + 16 | 0; //@line 23774
   HEAP32[$23 >> 2] = $8; //@line 23775
   $24 = $ReallocAsyncCtx + 20 | 0; //@line 23776
   HEAP32[$24 >> 2] = $10; //@line 23777
   $25 = $ReallocAsyncCtx + 24 | 0; //@line 23778
   HEAP8[$25 >> 0] = $12; //@line 23779
   sp = STACKTOP; //@line 23780
   return;
  } else {
   $31 = -1; //@line 23783
  }
 }
 $34 = HEAP32[(HEAP32[$4 >> 2] | 0) + 76 >> 2] | 0; //@line 23789
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 23790
 $35 = FUNCTION_TABLE_iiii[$34 & 31]($6, $8, $31 & 255) | 0; //@line 23791
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 536; //@line 23794
  $36 = $ReallocAsyncCtx2 + 4 | 0; //@line 23795
  HEAP32[$36 >> 2] = $6; //@line 23796
  $37 = $ReallocAsyncCtx2 + 8 | 0; //@line 23797
  HEAP8[$37 >> 0] = $12; //@line 23798
  $38 = $ReallocAsyncCtx2 + 12 | 0; //@line 23799
  HEAP32[$38 >> 2] = $8; //@line 23800
  sp = STACKTOP; //@line 23801
  return;
 }
 HEAP8[___async_retval >> 0] = $35 & 1; //@line 23806
 ___async_unwind = 0; //@line 23807
 HEAP32[$ReallocAsyncCtx2 >> 2] = 536; //@line 23808
 $36 = $ReallocAsyncCtx2 + 4 | 0; //@line 23809
 HEAP32[$36 >> 2] = $6; //@line 23810
 $37 = $ReallocAsyncCtx2 + 8 | 0; //@line 23811
 HEAP8[$37 >> 0] = $12; //@line 23812
 $38 = $ReallocAsyncCtx2 + 12 | 0; //@line 23813
 HEAP32[$38 >> 2] = $8; //@line 23814
 sp = STACKTOP; //@line 23815
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_37($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 23793
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23795
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23797
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23799
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23801
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23803
 $12 = $0 + 24 | 0; //@line 23805
 $14 = HEAP32[$12 >> 2] | 0; //@line 23807
 $17 = HEAP32[$12 + 4 >> 2] | 0; //@line 23810
 $19 = HEAP32[$0 + 32 >> 2] | 0; //@line 23812
 $20 = HEAP32[$2 >> 2] | 0; //@line 23813
 if ($20 | 0) {
  $23 = HEAP32[$20 + 4 >> 2] | 0; //@line 23817
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(32) | 0; //@line 23818
  FUNCTION_TABLE_vii[$23 & 15]($6, $8); //@line 23819
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 57; //@line 23822
   $24 = $ReallocAsyncCtx5 + 4 | 0; //@line 23823
   HEAP32[$24 >> 2] = $2; //@line 23824
   $25 = $ReallocAsyncCtx5 + 8 | 0; //@line 23825
   HEAP32[$25 >> 2] = $4; //@line 23826
   $26 = $ReallocAsyncCtx5 + 12 | 0; //@line 23827
   HEAP32[$26 >> 2] = $10; //@line 23828
   $27 = $ReallocAsyncCtx5 + 16 | 0; //@line 23829
   $28 = $27; //@line 23830
   $29 = $28; //@line 23831
   HEAP32[$29 >> 2] = $14; //@line 23832
   $30 = $28 + 4 | 0; //@line 23833
   $31 = $30; //@line 23834
   HEAP32[$31 >> 2] = $17; //@line 23835
   $32 = $ReallocAsyncCtx5 + 24 | 0; //@line 23836
   HEAP32[$32 >> 2] = $19; //@line 23837
   $33 = $ReallocAsyncCtx5 + 28 | 0; //@line 23838
   HEAP32[$33 >> 2] = $8; //@line 23839
   sp = STACKTOP; //@line 23840
   return;
  }
  ___async_unwind = 0; //@line 23843
  HEAP32[$ReallocAsyncCtx5 >> 2] = 57; //@line 23844
  $24 = $ReallocAsyncCtx5 + 4 | 0; //@line 23845
  HEAP32[$24 >> 2] = $2; //@line 23846
  $25 = $ReallocAsyncCtx5 + 8 | 0; //@line 23847
  HEAP32[$25 >> 2] = $4; //@line 23848
  $26 = $ReallocAsyncCtx5 + 12 | 0; //@line 23849
  HEAP32[$26 >> 2] = $10; //@line 23850
  $27 = $ReallocAsyncCtx5 + 16 | 0; //@line 23851
  $28 = $27; //@line 23852
  $29 = $28; //@line 23853
  HEAP32[$29 >> 2] = $14; //@line 23854
  $30 = $28 + 4 | 0; //@line 23855
  $31 = $30; //@line 23856
  HEAP32[$31 >> 2] = $17; //@line 23857
  $32 = $ReallocAsyncCtx5 + 24 | 0; //@line 23858
  HEAP32[$32 >> 2] = $19; //@line 23859
  $33 = $ReallocAsyncCtx5 + 28 | 0; //@line 23860
  HEAP32[$33 >> 2] = $8; //@line 23861
  sp = STACKTOP; //@line 23862
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 23865
 __ZN4mbed6Ticker5setupEy($10, $14, $17); //@line 23866
 $34 = HEAP32[$2 >> 2] | 0; //@line 23867
 if (!$34) {
  __ZN16SX1276_LoRaRadio18set_low_power_modeEv($19); //@line 23870
  return;
 }
 $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 23874
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 23875
 FUNCTION_TABLE_vi[$37 & 1023]($8); //@line 23876
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 58; //@line 23879
  $38 = $ReallocAsyncCtx6 + 4 | 0; //@line 23880
  HEAP32[$38 >> 2] = $19; //@line 23881
  sp = STACKTOP; //@line 23882
  return;
 }
 ___async_unwind = 0; //@line 23885
 HEAP32[$ReallocAsyncCtx6 >> 2] = 58; //@line 23886
 $38 = $ReallocAsyncCtx6 + 4 | 0; //@line 23887
 HEAP32[$38 >> 2] = $19; //@line 23888
 sp = STACKTOP; //@line 23889
 return;
}
function __ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb_359($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 24831
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24833
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24835
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24837
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 24839
 if (!$AsyncRetVal) {
  $22 = HEAP32[$2 >> 2] | 0; //@line 24842
  if (!$22) {
   HEAP32[___async_retval >> 2] = 0; //@line 24846
   return;
  }
  $25 = HEAP32[$22 + 8 >> 2] | 0; //@line 24850
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 24851
  FUNCTION_TABLE_vi[$25 & 1023]($6); //@line 24852
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 286; //@line 24855
   $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 24856
   HEAP32[$26 >> 2] = 0; //@line 24857
   sp = STACKTOP; //@line 24858
   return;
  }
  ___async_unwind = 0; //@line 24861
  HEAP32[$ReallocAsyncCtx2 >> 2] = 286; //@line 24862
  $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 24863
  HEAP32[$26 >> 2] = 0; //@line 24864
  sp = STACKTOP; //@line 24865
  return;
 }
 $9 = HEAP32[$2 >> 2] | 0; //@line 24868
 if (!$9) {
  HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 24872
  _equeue_event_dtor($AsyncRetVal, 283); //@line 24873
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 24874
  $18 = _equeue_post($4, 284, $AsyncRetVal) | 0; //@line 24875
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 285; //@line 24878
   $19 = $ReallocAsyncCtx3 + 4 | 0; //@line 24879
   HEAP32[$19 >> 2] = $2; //@line 24880
   $20 = $ReallocAsyncCtx3 + 8 | 0; //@line 24881
   HEAP32[$20 >> 2] = $6; //@line 24882
   sp = STACKTOP; //@line 24883
   return;
  }
  HEAP32[___async_retval >> 2] = $18; //@line 24887
  ___async_unwind = 0; //@line 24888
  HEAP32[$ReallocAsyncCtx3 >> 2] = 285; //@line 24889
  $19 = $ReallocAsyncCtx3 + 4 | 0; //@line 24890
  HEAP32[$19 >> 2] = $2; //@line 24891
  $20 = $ReallocAsyncCtx3 + 8 | 0; //@line 24892
  HEAP32[$20 >> 2] = $6; //@line 24893
  sp = STACKTOP; //@line 24894
  return;
 } else {
  $12 = HEAP32[$9 + 4 >> 2] | 0; //@line 24898
  $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 24899
  FUNCTION_TABLE_vii[$12 & 15]($AsyncRetVal, $6); //@line 24900
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 282; //@line 24903
   $13 = $ReallocAsyncCtx + 4 | 0; //@line 24904
   HEAP32[$13 >> 2] = $2; //@line 24905
   $14 = $ReallocAsyncCtx + 8 | 0; //@line 24906
   HEAP32[$14 >> 2] = $AsyncRetVal; //@line 24907
   $15 = $ReallocAsyncCtx + 12 | 0; //@line 24908
   HEAP32[$15 >> 2] = $4; //@line 24909
   $16 = $ReallocAsyncCtx + 16 | 0; //@line 24910
   HEAP32[$16 >> 2] = $6; //@line 24911
   sp = STACKTOP; //@line 24912
   return;
  }
  ___async_unwind = 0; //@line 24915
  HEAP32[$ReallocAsyncCtx >> 2] = 282; //@line 24916
  $13 = $ReallocAsyncCtx + 4 | 0; //@line 24917
  HEAP32[$13 >> 2] = $2; //@line 24918
  $14 = $ReallocAsyncCtx + 8 | 0; //@line 24919
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 24920
  $15 = $ReallocAsyncCtx + 12 | 0; //@line 24921
  HEAP32[$15 >> 2] = $4; //@line 24922
  $16 = $ReallocAsyncCtx + 16 | 0; //@line 24923
  HEAP32[$16 >> 2] = $6; //@line 24924
  sp = STACKTOP; //@line 24925
  return;
 }
}
function _mbed_vtracef__async_cb_168($0) {
 $0 = $0 | 0;
 var $$13 = 0, $$expand_i1_val = 0, $10 = 0, $12 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $34 = 0, $35 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 31151
 $2 = HEAP8[$0 + 4 >> 0] & 1; //@line 31154
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31156
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31158
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31160
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31162
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31164
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 31168
 $$13 = ($AsyncRetVal | 0) >= ($12 | 0) ? 0 : $AsyncRetVal; //@line 31170
 $18 = (HEAP32[$0 + 28 >> 2] | 0) + $$13 | 0; //@line 31172
 $19 = $12 - $$13 | 0; //@line 31173
 do {
  if (($$13 | 0) > 0) {
   $21 = HEAP32[173] | 0; //@line 31177
   if (!(($19 | 0) > 0 & ($21 | 0) != 0)) {
    if (($$13 | 0) < 1 | ($19 | 0) < 1 | $2 ^ 1) {
     break;
    }
    _snprintf($18, $19, 12066, $4) | 0; //@line 31189
    break;
   }
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(32) | 0; //@line 31192
   $23 = FUNCTION_TABLE_i[$21 & 7]() | 0; //@line 31193
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 149; //@line 31196
    $24 = $ReallocAsyncCtx6 + 4 | 0; //@line 31197
    HEAP32[$24 >> 2] = $8; //@line 31198
    $25 = $ReallocAsyncCtx6 + 8 | 0; //@line 31199
    HEAP32[$25 >> 2] = $18; //@line 31200
    $26 = $ReallocAsyncCtx6 + 12 | 0; //@line 31201
    HEAP32[$26 >> 2] = $19; //@line 31202
    $27 = $ReallocAsyncCtx6 + 16 | 0; //@line 31203
    HEAP32[$27 >> 2] = $10; //@line 31204
    $28 = $ReallocAsyncCtx6 + 20 | 0; //@line 31205
    $$expand_i1_val = $2 & 1; //@line 31206
    HEAP8[$28 >> 0] = $$expand_i1_val; //@line 31207
    $29 = $ReallocAsyncCtx6 + 24 | 0; //@line 31208
    HEAP32[$29 >> 2] = $4; //@line 31209
    $30 = $ReallocAsyncCtx6 + 28 | 0; //@line 31210
    HEAP32[$30 >> 2] = $6; //@line 31211
    sp = STACKTOP; //@line 31212
    return;
   }
   HEAP32[___async_retval >> 2] = $23; //@line 31216
   ___async_unwind = 0; //@line 31217
   HEAP32[$ReallocAsyncCtx6 >> 2] = 149; //@line 31218
   $24 = $ReallocAsyncCtx6 + 4 | 0; //@line 31219
   HEAP32[$24 >> 2] = $8; //@line 31220
   $25 = $ReallocAsyncCtx6 + 8 | 0; //@line 31221
   HEAP32[$25 >> 2] = $18; //@line 31222
   $26 = $ReallocAsyncCtx6 + 12 | 0; //@line 31223
   HEAP32[$26 >> 2] = $19; //@line 31224
   $27 = $ReallocAsyncCtx6 + 16 | 0; //@line 31225
   HEAP32[$27 >> 2] = $10; //@line 31226
   $28 = $ReallocAsyncCtx6 + 20 | 0; //@line 31227
   $$expand_i1_val = $2 & 1; //@line 31228
   HEAP8[$28 >> 0] = $$expand_i1_val; //@line 31229
   $29 = $ReallocAsyncCtx6 + 24 | 0; //@line 31230
   HEAP32[$29 >> 2] = $4; //@line 31231
   $30 = $ReallocAsyncCtx6 + 28 | 0; //@line 31232
   HEAP32[$30 >> 2] = $6; //@line 31233
   sp = STACKTOP; //@line 31234
   return;
  }
 } while (0);
 $34 = HEAP32[174] | 0; //@line 31238
 $35 = HEAP32[167] | 0; //@line 31239
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 31240
 FUNCTION_TABLE_vi[$34 & 1023]($35); //@line 31241
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 150; //@line 31244
  sp = STACKTOP; //@line 31245
  return;
 }
 ___async_unwind = 0; //@line 31248
 HEAP32[$ReallocAsyncCtx7 >> 2] = 150; //@line 31249
 sp = STACKTOP; //@line 31250
 return;
}
function __ZN7LoRaPHY19update_band_timeoffEbbP6band_th($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$lcssa = 0, $$060 = 0, $$060$us = 0, $$2 = 0, $$2$us = 0, $$pr$us = 0, $$sink2 = 0, $10 = 0, $20 = 0, $26 = 0, $28 = 0, $34 = 0, $38 = 0, $39 = 0, $41 = 0, $42 = 0, $6 = 0, $7 = 0, $8 = 0, $indvars$iv = 0, $indvars$iv62 = 0, $wide$trip$count = 0, label = 0;
 if (!($4 << 24 >> 24)) {
  $$0$lcssa = -1; //@line 22056
  return $$0$lcssa | 0; //@line 22057
 }
 $6 = $0 + 8 | 0; //@line 22059
 $wide$trip$count = $4 & 255; //@line 22060
 if ($1) {
  $$060$us = -1; //@line 22062
  $indvars$iv = 0; //@line 22062
  while (1) {
   $7 = $3 + ($indvars$iv * 24 | 0) + 12 | 0; //@line 22064
   do {
    if ($2) {
     $8 = HEAP32[$7 >> 2] | 0; //@line 22067
     $10 = $3 + ($indvars$iv * 24 | 0) + 8 | 0; //@line 22069
     if ($8 >>> 0 <= (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$10 >> 2] | 0) | 0) >>> 0) {
      HEAP32[$7 >> 2] = 0; //@line 22074
      $$2$us = $$060$us; //@line 22075
      break;
     }
     $$pr$us = HEAP32[$7 >> 2] | 0; //@line 22078
     if (!$$pr$us) {
      $$2$us = $$060$us; //@line 22081
     } else {
      if (($$pr$us - (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$10 >> 2] | 0) | 0) | 0) >>> 0 < $$060$us >>> 0) {
       $20 = HEAP32[$7 >> 2] | 0; //@line 22089
       $$2$us = $20 - (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$10 >> 2] | 0) | 0) | 0; //@line 22094
      } else {
       $$2$us = $$060$us; //@line 22096
      }
     }
    } else {
     HEAP32[$7 >> 2] = 0; //@line 22100
     $$2$us = 0; //@line 22101
    }
   } while (0);
   $indvars$iv = $indvars$iv + 1 | 0; //@line 22104
   if (($indvars$iv | 0) == ($wide$trip$count | 0)) {
    $$0$lcssa = $$2$us; //@line 22107
    break;
   } else {
    $$060$us = $$2$us; //@line 22110
   }
  }
  return $$0$lcssa | 0; //@line 22113
 } else {
  $$060 = -1; //@line 22115
  $indvars$iv62 = 0; //@line 22115
 }
 while (1) {
  $26 = $3 + ($indvars$iv62 * 24 | 0) + 4 | 0; //@line 22119
  $28 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$26 >> 2] | 0) | 0; //@line 22121
  if ($2) {
   $34 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$3 + ($indvars$iv62 * 24 | 0) + 8 >> 2] | 0) | 0; //@line 22127
  } else {
   $34 = 0; //@line 22129
  }
  if ($28 >>> 0 > $34 >>> 0) {
   $$sink2 = $26; //@line 22133
   label = 17; //@line 22134
  } else {
   if ($2) {
    $$sink2 = $3 + ($indvars$iv62 * 24 | 0) + 8 | 0; //@line 22138
    label = 17; //@line 22139
   } else {
    $41 = 0; //@line 22141
   }
  }
  if ((label | 0) == 17) {
   label = 0; //@line 22145
   $41 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$$sink2 >> 2] | 0) | 0; //@line 22149
  }
  $38 = $3 + ($indvars$iv62 * 24 | 0) + 12 | 0; //@line 22151
  $39 = HEAP32[$38 >> 2] | 0; //@line 22152
  if ($39 >>> 0 > $41 >>> 0) {
   $42 = $39 - $41 | 0; //@line 22155
   $$2 = $42 >>> 0 < $$060 >>> 0 ? $42 : $$060; //@line 22158
  } else {
   HEAP32[$38 >> 2] = 0; //@line 22160
   $$2 = $$060; //@line 22161
  }
  $indvars$iv62 = $indvars$iv62 + 1 | 0; //@line 22163
  if (($indvars$iv62 | 0) == ($wide$trip$count | 0)) {
   $$0$lcssa = $$2; //@line 22166
   break;
  } else {
   $$060 = $$2; //@line 22169
  }
 }
 return $$0$lcssa | 0; //@line 22172
}
function _main__async_cb_388($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 26810
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26812
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26814
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26816
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26818
 $10 = $2 + 4 | 0; //@line 26820
 HEAP32[$10 >> 2] = 0; //@line 26822
 HEAP32[$10 + 4 >> 2] = 0; //@line 26825
 HEAP32[$2 >> 2] = 677; //@line 26826
 $14 = $2 + 12 | 0; //@line 26827
 HEAP32[$14 >> 2] = 10276; //@line 26828
 $15 = HEAP32[5960] | 0; //@line 26829
 if (!$15) {
  $25 = HEAP32[2570] | 0; //@line 26833
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 26834
  FUNCTION_TABLE_vii[$25 & 15](23828, $2); //@line 26835
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 679; //@line 26838
   $26 = $ReallocAsyncCtx4 + 4 | 0; //@line 26839
   HEAP32[$26 >> 2] = $14; //@line 26840
   $27 = $ReallocAsyncCtx4 + 8 | 0; //@line 26841
   HEAP32[$27 >> 2] = $2; //@line 26842
   $28 = $ReallocAsyncCtx4 + 12 | 0; //@line 26843
   HEAP32[$28 >> 2] = $6; //@line 26844
   $29 = $ReallocAsyncCtx4 + 16 | 0; //@line 26845
   HEAP32[$29 >> 2] = $8; //@line 26846
   $30 = $ReallocAsyncCtx4 + 20 | 0; //@line 26847
   HEAP32[$30 >> 2] = $4; //@line 26848
   sp = STACKTOP; //@line 26849
   return;
  }
  ___async_unwind = 0; //@line 26852
  HEAP32[$ReallocAsyncCtx4 >> 2] = 679; //@line 26853
  $26 = $ReallocAsyncCtx4 + 4 | 0; //@line 26854
  HEAP32[$26 >> 2] = $14; //@line 26855
  $27 = $ReallocAsyncCtx4 + 8 | 0; //@line 26856
  HEAP32[$27 >> 2] = $2; //@line 26857
  $28 = $ReallocAsyncCtx4 + 12 | 0; //@line 26858
  HEAP32[$28 >> 2] = $6; //@line 26859
  $29 = $ReallocAsyncCtx4 + 16 | 0; //@line 26860
  HEAP32[$29 >> 2] = $8; //@line 26861
  $30 = $ReallocAsyncCtx4 + 20 | 0; //@line 26862
  HEAP32[$30 >> 2] = $4; //@line 26863
  sp = STACKTOP; //@line 26864
  return;
 } else {
  $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 26868
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 26869
  FUNCTION_TABLE_vi[$18 & 1023](23828); //@line 26870
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 678; //@line 26873
   $19 = $ReallocAsyncCtx3 + 4 | 0; //@line 26874
   HEAP32[$19 >> 2] = $14; //@line 26875
   $20 = $ReallocAsyncCtx3 + 8 | 0; //@line 26876
   HEAP32[$20 >> 2] = $2; //@line 26877
   $21 = $ReallocAsyncCtx3 + 12 | 0; //@line 26878
   HEAP32[$21 >> 2] = $6; //@line 26879
   $22 = $ReallocAsyncCtx3 + 16 | 0; //@line 26880
   HEAP32[$22 >> 2] = $8; //@line 26881
   $23 = $ReallocAsyncCtx3 + 20 | 0; //@line 26882
   HEAP32[$23 >> 2] = $4; //@line 26883
   sp = STACKTOP; //@line 26884
   return;
  }
  ___async_unwind = 0; //@line 26887
  HEAP32[$ReallocAsyncCtx3 >> 2] = 678; //@line 26888
  $19 = $ReallocAsyncCtx3 + 4 | 0; //@line 26889
  HEAP32[$19 >> 2] = $14; //@line 26890
  $20 = $ReallocAsyncCtx3 + 8 | 0; //@line 26891
  HEAP32[$20 >> 2] = $2; //@line 26892
  $21 = $ReallocAsyncCtx3 + 12 | 0; //@line 26893
  HEAP32[$21 >> 2] = $6; //@line 26894
  $22 = $ReallocAsyncCtx3 + 16 | 0; //@line 26895
  HEAP32[$22 >> 2] = $8; //@line 26896
  $23 = $ReallocAsyncCtx3 + 20 | 0; //@line 26897
  HEAP32[$23 >> 2] = $4; //@line 26898
  sp = STACKTOP; //@line 26899
  return;
 }
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$037$off038 = 0, $$037$off039 = 0, $13 = 0, $19 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $39 = 0, $50 = 0, $53 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 17192
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 17198
  } else {
   if (!(__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0)) {
    $50 = HEAP32[$0 + 8 >> 2] | 0; //@line 17204
    $53 = HEAP32[(HEAP32[$50 >> 2] | 0) + 24 >> 2] | 0; //@line 17207
    $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 17208
    FUNCTION_TABLE_viiiii[$53 & 7]($50, $1, $2, $3, $4); //@line 17209
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 730; //@line 17212
     sp = STACKTOP; //@line 17213
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 17216
     break;
    }
   }
   if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
    $13 = $1 + 20 | 0; //@line 17224
    if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
     HEAP32[$1 + 32 >> 2] = $3; //@line 17229
     $19 = $1 + 44 | 0; //@line 17230
     if ((HEAP32[$19 >> 2] | 0) == 4) {
      break;
     }
     $22 = $1 + 52 | 0; //@line 17236
     HEAP8[$22 >> 0] = 0; //@line 17237
     $23 = $1 + 53 | 0; //@line 17238
     HEAP8[$23 >> 0] = 0; //@line 17239
     $25 = HEAP32[$0 + 8 >> 2] | 0; //@line 17241
     $28 = HEAP32[(HEAP32[$25 >> 2] | 0) + 20 >> 2] | 0; //@line 17244
     $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 17245
     FUNCTION_TABLE_viiiiii[$28 & 3]($25, $1, $2, $2, 1, $4); //@line 17246
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 729; //@line 17249
      HEAP32[$AsyncCtx + 4 >> 2] = $23; //@line 17251
      HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 17253
      HEAP32[$AsyncCtx + 12 >> 2] = $13; //@line 17255
      HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 17257
      HEAP32[$AsyncCtx + 20 >> 2] = $22; //@line 17259
      HEAP32[$AsyncCtx + 24 >> 2] = $19; //@line 17261
      sp = STACKTOP; //@line 17262
      return;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 17265
     if (!(HEAP8[$23 >> 0] | 0)) {
      $$037$off038 = 4; //@line 17269
      label = 13; //@line 17270
     } else {
      if (!(HEAP8[$22 >> 0] | 0)) {
       $$037$off038 = 3; //@line 17275
       label = 13; //@line 17276
      } else {
       $$037$off039 = 3; //@line 17278
      }
     }
     if ((label | 0) == 13) {
      HEAP32[$13 >> 2] = $2; //@line 17282
      $39 = $1 + 40 | 0; //@line 17283
      HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + 1; //@line 17286
      if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
       if ((HEAP32[$1 + 24 >> 2] | 0) == 2) {
        HEAP8[$1 + 54 >> 0] = 1; //@line 17296
        $$037$off039 = $$037$off038; //@line 17297
       } else {
        $$037$off039 = $$037$off038; //@line 17299
       }
      } else {
       $$037$off039 = $$037$off038; //@line 17302
      }
     }
     HEAP32[$19 >> 2] = $$037$off039; //@line 17305
     break;
    }
   }
   if (($3 | 0) == 1) {
    HEAP32[$1 + 32 >> 2] = 1; //@line 17312
   }
  }
 } while (0);
 return;
}
function _main__async_cb_380($0) {
 $0 = $0 | 0;
 var $$pre$i$i = 0, $10 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 26526
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26530
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26532
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26534
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26536
 $$pre$i$i = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 26537
 HEAP32[5960] = $$pre$i$i; //@line 26538
 if ($$pre$i$i | 0) {
  $14 = HEAP32[$$pre$i$i + 8 >> 2] | 0; //@line 26543
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 26544
  FUNCTION_TABLE_vi[$14 & 1023]($4); //@line 26545
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 680; //@line 26548
   $15 = $ReallocAsyncCtx5 + 4 | 0; //@line 26549
   HEAP32[$15 >> 2] = $4; //@line 26550
   $16 = $ReallocAsyncCtx5 + 8 | 0; //@line 26551
   HEAP32[$16 >> 2] = $10; //@line 26552
   $17 = $ReallocAsyncCtx5 + 12 | 0; //@line 26553
   HEAP32[$17 >> 2] = $6; //@line 26554
   $18 = $ReallocAsyncCtx5 + 16 | 0; //@line 26555
   HEAP32[$18 >> 2] = $8; //@line 26556
   sp = STACKTOP; //@line 26557
   return;
  }
  ___async_unwind = 0; //@line 26560
  HEAP32[$ReallocAsyncCtx5 >> 2] = 680; //@line 26561
  $15 = $ReallocAsyncCtx5 + 4 | 0; //@line 26562
  HEAP32[$15 >> 2] = $4; //@line 26563
  $16 = $ReallocAsyncCtx5 + 8 | 0; //@line 26564
  HEAP32[$16 >> 2] = $10; //@line 26565
  $17 = $ReallocAsyncCtx5 + 12 | 0; //@line 26566
  HEAP32[$17 >> 2] = $6; //@line 26567
  $18 = $ReallocAsyncCtx5 + 16 | 0; //@line 26568
  HEAP32[$18 >> 2] = $8; //@line 26569
  sp = STACKTOP; //@line 26570
  return;
 }
 __ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t(20652, 23828) | 0; //@line 26573
 if (__ZN16LoRaWANInterface25disable_adaptive_datarateEv(20652) | 0) {
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 26577
  _puts(15381) | 0; //@line 26578
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 681; //@line 26581
   sp = STACKTOP; //@line 26582
   return;
  }
  ___async_unwind = 0; //@line 26585
  HEAP32[$ReallocAsyncCtx7 >> 2] = 681; //@line 26586
  sp = STACKTOP; //@line 26587
  return;
 }
 __ZN16LoRaWANInterface12set_datarateEh(20652, 5) | 0; //@line 26590
 HEAP8[$10 >> 0] = 0; //@line 26591
 HEAP32[$10 + 4 >> 2] = 24461; //@line 26593
 HEAP32[$10 + 8 >> 2] = 24469; //@line 26595
 HEAP32[$10 + 12 >> 2] = 24477; //@line 26597
 HEAP8[$10 + 16 >> 0] = 3; //@line 26599
 $25 = __ZN16LoRaWANInterface7connectERK15lorawan_connect(20652, $10) | 0; //@line 26600
 switch ($25 | 0) {
 case 0:
 case -1016:
  {
   break;
  }
 default:
  {
   HEAP32[$6 >> 2] = $25; //@line 26606
   _printf(15415, $6) | 0; //@line 26607
   HEAP32[___async_retval >> 2] = -1; //@line 26609
   return;
  }
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 26613
 _puts(15444) | 0; //@line 26614
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 682; //@line 26617
  $26 = $ReallocAsyncCtx6 + 4 | 0; //@line 26618
  HEAP32[$26 >> 2] = $10; //@line 26619
  sp = STACKTOP; //@line 26620
  return;
 }
 ___async_unwind = 0; //@line 26623
 HEAP32[$ReallocAsyncCtx6 >> 2] = 682; //@line 26624
 $26 = $ReallocAsyncCtx6 + 4 | 0; //@line 26625
 HEAP32[$26 >> 2] = $10; //@line 26626
 sp = STACKTOP; //@line 26627
 return;
}
function _mbed_vtracef__async_cb_169($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 31260
 $2 = HEAP8[$0 + 4 >> 0] & 1; //@line 31263
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31265
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31267
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31269
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31271
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31273
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 31275
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 31277
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 31279
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 31281
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 31283
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 31285
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 31287
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 31289
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 31291
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 31293
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 31295
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 31297
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 31299
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 31301
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 31303
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 31305
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 31307
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 31309
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 31311
 $55 = ($50 | 0 ? 4 : 0) + $50 + (HEAP32[___async_retval >> 2] | 0) | 0; //@line 31317
 $56 = HEAP32[172] | 0; //@line 31318
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(100) | 0; //@line 31319
 $57 = FUNCTION_TABLE_ii[$56 & 15]($55) | 0; //@line 31320
 if (!___async) {
  HEAP32[___async_retval >> 2] = $57; //@line 31324
  ___async_unwind = 0; //@line 31325
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 147; //@line 31327
 HEAP8[$ReallocAsyncCtx5 + 4 >> 0] = $2 & 1; //@line 31330
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 31332
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $6; //@line 31334
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $12; //@line 31336
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $14; //@line 31338
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $16; //@line 31340
 HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $18; //@line 31342
 HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $20; //@line 31344
 HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $22; //@line 31346
 HEAP32[$ReallocAsyncCtx5 + 40 >> 2] = $24; //@line 31348
 HEAP32[$ReallocAsyncCtx5 + 44 >> 2] = $26; //@line 31350
 HEAP32[$ReallocAsyncCtx5 + 48 >> 2] = $28; //@line 31352
 HEAP32[$ReallocAsyncCtx5 + 52 >> 2] = $30; //@line 31354
 HEAP32[$ReallocAsyncCtx5 + 56 >> 2] = $32; //@line 31356
 HEAP32[$ReallocAsyncCtx5 + 60 >> 2] = $34; //@line 31358
 HEAP32[$ReallocAsyncCtx5 + 64 >> 2] = $36; //@line 31360
 HEAP32[$ReallocAsyncCtx5 + 68 >> 2] = $38; //@line 31362
 HEAP32[$ReallocAsyncCtx5 + 72 >> 2] = $40; //@line 31364
 HEAP32[$ReallocAsyncCtx5 + 76 >> 2] = $42; //@line 31366
 HEAP32[$ReallocAsyncCtx5 + 80 >> 2] = $44; //@line 31368
 HEAP32[$ReallocAsyncCtx5 + 84 >> 2] = $46; //@line 31370
 HEAP32[$ReallocAsyncCtx5 + 88 >> 2] = $48; //@line 31372
 HEAP32[$ReallocAsyncCtx5 + 92 >> 2] = $8; //@line 31374
 HEAP32[$ReallocAsyncCtx5 + 96 >> 2] = $10; //@line 31376
 sp = STACKTOP; //@line 31377
 return;
}
function __ZN7LoRaMacC2Ev($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $19 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, stop = 0;
 __ZN18LoRaWANTimeHandlerC2Ev($0); //@line 11948
 __ZN12LoRaPHYEU868C2ER18LoRaWANTimeHandler($0 + 4 | 0, $0); //@line 11950
 __ZN14LoRaMacCommandC2Ev($0 + 476 | 0); //@line 11952
 __ZN18LoRaMacChannelPlanC2Ev($0 + 752 | 0); //@line 11954
 __ZN13LoRaMacCryptoC2Ev($0 + 756 | 0); //@line 11956
 $5 = $0 + 1796 | 0; //@line 11957
 HEAP32[$5 >> 2] = 0; //@line 11958
 HEAP32[$5 + 4 >> 2] = 0; //@line 11958
 HEAP32[$5 + 8 >> 2] = 0; //@line 11958
 HEAP32[$5 + 12 >> 2] = 0; //@line 11958
 $6 = $0 + 1816 | 0; //@line 11959
 HEAP32[$6 >> 2] = 0; //@line 11960
 HEAP32[$6 + 4 >> 2] = 0; //@line 11960
 HEAP32[$6 + 8 >> 2] = 0; //@line 11960
 HEAP32[$6 + 12 >> 2] = 0; //@line 11960
 $7 = $0 + 1836 | 0; //@line 11961
 HEAP32[$7 >> 2] = 0; //@line 11962
 HEAP32[$7 + 4 >> 2] = 0; //@line 11962
 HEAP32[$7 + 8 >> 2] = 0; //@line 11962
 HEAP32[$7 + 12 >> 2] = 0; //@line 11962
 $8 = $0 + 1856 | 0; //@line 11963
 HEAP32[$8 >> 2] = 0; //@line 11964
 HEAP32[$8 + 4 >> 2] = 0; //@line 11964
 HEAP32[$8 + 8 >> 2] = 0; //@line 11964
 HEAP32[$8 + 12 >> 2] = 0; //@line 11964
 $9 = $0 + 1992 | 0; //@line 11965
 $10 = $0 + 2012 | 0; //@line 11966
 $11 = $0 + 2052 | 0; //@line 11967
 $12 = $0 + 2084 | 0; //@line 11968
 HEAP32[$0 + 2380 >> 2] = 0; //@line 11970
 $14 = $0 + 1704 | 0; //@line 11971
 $15 = $0 + 1752 | 0; //@line 11972
 HEAP16[$0 + 1440 >> 1] = 0; //@line 11974
 HEAP8[$0 + 1697 >> 0] = 0; //@line 11976
 HEAP8[$0 + 1174 >> 0] = 0; //@line 11978
 $19 = $0 + 1175 | 0; //@line 11979
 dest = $14; //@line 11980
 stop = dest + 44 | 0; //@line 11980
 do {
  HEAP32[dest >> 2] = 0; //@line 11980
  dest = dest + 4 | 0; //@line 11980
 } while ((dest | 0) < (stop | 0));
 HEAP16[$14 + 44 >> 1] = 0; //@line 11980
 HEAP32[$15 >> 2] = 0; //@line 11981
 HEAP32[$15 + 4 >> 2] = 0; //@line 11981
 HEAP32[$15 + 8 >> 2] = 0; //@line 11981
 HEAP32[$15 + 12 >> 2] = 0; //@line 11981
 _memset($9 | 0, 0, 386) | 0; //@line 11982
 HEAP8[$19 >> 0] = 1; //@line 11983
 HEAP32[$0 + 1768 >> 2] = 0; //@line 11985
 HEAP8[$0 + 1177 >> 0] = 0; //@line 11987
 HEAP8[$0 + 1178 >> 0] = 0; //@line 11989
 HEAP8[$0 + 1184 >> 0] = 0; //@line 11991
 HEAP32[$0 + 1788 >> 2] = 0; //@line 11993
 HEAP8[$0 + 1698 >> 0] = 1; //@line 11995
 HEAP8[$0 + 1699 >> 0] = 1; //@line 11997
 HEAP8[$0 + 1181 >> 0] = 0; //@line 11999
 HEAP32[$0 + 1792 >> 2] = 0; //@line 12001
 HEAP32[$0 + 1988 >> 2] = 0; //@line 12003
 HEAP8[$0 + 1936 >> 0] = 0; //@line 12005
 HEAP8[$0 + 1932 >> 0] = 0; //@line 12007
 HEAP32[$11 >> 2] = 0; //@line 12008
 HEAP32[$11 + 4 >> 2] = 0; //@line 12008
 HEAP32[$11 + 8 >> 2] = 0; //@line 12008
 HEAP32[$11 + 12 >> 2] = 0; //@line 12008
 HEAP32[$11 + 16 >> 2] = 0; //@line 12008
 HEAP32[$11 + 20 >> 2] = 0; //@line 12008
 HEAP32[$0 + 2056 >> 2] = 1; //@line 12010
 HEAP32[$12 >> 2] = 0; //@line 12011
 HEAP32[$12 + 4 >> 2] = 0; //@line 12011
 HEAP32[$12 + 8 >> 2] = 0; //@line 12011
 HEAP32[$12 + 12 >> 2] = 0; //@line 12011
 HEAP32[$12 + 16 >> 2] = 0; //@line 12011
 HEAP32[$0 + 2092 >> 2] = 1; //@line 12013
 dest = $10; //@line 12014
 stop = dest + 40 | 0; //@line 12014
 do {
  HEAP32[dest >> 2] = 0; //@line 12014
  dest = dest + 4 | 0; //@line 12014
 } while ((dest | 0) < (stop | 0));
 HEAP32[$0 + 2020 >> 2] = 1; //@line 12016
 return;
}
function _equeue_enqueue($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$051$ph = 0, $$05157 = 0, $$0515859 = 0, $$053 = 0, $13 = 0, $14 = 0, $16 = 0, $24 = 0, $25 = 0, $27 = 0, $29 = 0, $33 = 0, $34 = 0, $42 = 0, $43 = 0, $46 = 0, $47 = 0, $49 = 0, $54 = 0, $65 = 0, $67 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 3414
 $13 = $1 - (HEAP32[$0 + 12 >> 2] | 0) | HEAPU8[$1 + 4 >> 0] << HEAP32[$0 + 16 >> 2]; //@line 3425
 $14 = $1 + 20 | 0; //@line 3426
 $16 = (HEAP32[$14 >> 2] | 0) - $2 | 0; //@line 3428
 HEAP32[$14 >> 2] = ($16 & ~($16 >> 31)) + $2; //@line 3433
 HEAP8[$1 + 5 >> 0] = HEAP8[$0 + 9 >> 0] | 0; //@line 3437
 $24 = $0 + 128 | 0; //@line 3438
 _equeue_mutex_lock($24); //@line 3439
 $25 = HEAP32[$0 >> 2] | 0; //@line 3440
 L1 : do {
  if (!$25) {
   $$051$ph = $0; //@line 3444
   label = 5; //@line 3445
  } else {
   $27 = HEAP32[$14 >> 2] | 0; //@line 3447
   $$053 = $0; //@line 3448
   $29 = $25; //@line 3448
   while (1) {
    if (((HEAP32[$29 + 20 >> 2] | 0) - $27 | 0) >= 0) {
     break;
    }
    $33 = $29 + 8 | 0; //@line 3457
    $34 = HEAP32[$33 >> 2] | 0; //@line 3458
    if (!$34) {
     $$051$ph = $33; //@line 3461
     label = 5; //@line 3462
     break L1;
    } else {
     $$053 = $33; //@line 3465
     $29 = $34; //@line 3465
    }
   }
   if ((HEAP32[$29 + 20 >> 2] | 0) != (HEAP32[$14 >> 2] | 0)) {
    $49 = $1 + 8 | 0; //@line 3473
    HEAP32[$49 >> 2] = $29; //@line 3474
    HEAP32[$29 + 16 >> 2] = $49; //@line 3476
    $$0515859 = $$053; //@line 3477
    label = 11; //@line 3478
    break;
   }
   $42 = HEAP32[$29 + 8 >> 2] | 0; //@line 3482
   $43 = $1 + 8 | 0; //@line 3483
   HEAP32[$43 >> 2] = $42; //@line 3484
   if ($42 | 0) {
    HEAP32[$42 + 16 >> 2] = $43; //@line 3488
   }
   $46 = HEAP32[$$053 >> 2] | 0; //@line 3490
   $47 = $1 + 12 | 0; //@line 3491
   HEAP32[$47 >> 2] = $46; //@line 3492
   HEAP32[$46 + 16 >> 2] = $47; //@line 3494
   $$05157 = $$053; //@line 3495
  }
 } while (0);
 if ((label | 0) == 5) {
  HEAP32[$1 + 8 >> 2] = 0; //@line 3500
  $$0515859 = $$051$ph; //@line 3501
  label = 11; //@line 3502
 }
 if ((label | 0) == 11) {
  HEAP32[$1 + 12 >> 2] = 0; //@line 3506
  $$05157 = $$0515859; //@line 3507
 }
 HEAP32[$$05157 >> 2] = $1; //@line 3509
 HEAP32[$1 + 16 >> 2] = $$05157; //@line 3511
 $54 = HEAP32[$0 + 40 >> 2] | 0; //@line 3513
 if (!$54) {
  _equeue_mutex_unlock($24); //@line 3516
  return $13 | 0; //@line 3517
 }
 if (!(HEAP8[$0 + 36 >> 0] | 0)) {
  _equeue_mutex_unlock($24); //@line 3523
  return $13 | 0; //@line 3524
 }
 if ((HEAP32[$0 >> 2] | 0) != ($1 | 0)) {
  _equeue_mutex_unlock($24); //@line 3529
  return $13 | 0; //@line 3530
 }
 if (HEAP32[$1 + 12 >> 2] | 0) {
  _equeue_mutex_unlock($24); //@line 3536
  return $13 | 0; //@line 3537
 }
 $65 = HEAP32[$0 + 44 >> 2] | 0; //@line 3540
 $67 = (HEAP32[$14 >> 2] | 0) - $2 | 0; //@line 3542
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 3546
 FUNCTION_TABLE_vii[$54 & 15]($65, $67 & ~($67 >> 31)); //@line 3547
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 132; //@line 3550
  HEAP32[$AsyncCtx + 4 >> 2] = $24; //@line 3552
  HEAP32[$AsyncCtx + 8 >> 2] = $13; //@line 3554
  sp = STACKTOP; //@line 3555
  return 0; //@line 3556
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 3558
 _equeue_mutex_unlock($24); //@line 3559
 return $13 | 0; //@line 3560
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_250($0) {
 $0 = $0 | 0;
 var $$pre126 = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx16 = 0, sp = 0;
 sp = STACKTOP; //@line 16985
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16987
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16989
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16991
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16993
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16995
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16997
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16999
 $$pre126 = HEAP32[$2 >> 2] | 0; //@line 17000
 if ($$pre126 | 0) {
  $17 = HEAP32[$$pre126 + 4 >> 2] | 0; //@line 17004
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(28) | 0; //@line 17005
  FUNCTION_TABLE_vii[$17 & 15]($6, $8); //@line 17006
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 198; //@line 17009
   $18 = $ReallocAsyncCtx14 + 4 | 0; //@line 17010
   HEAP32[$18 >> 2] = $2; //@line 17011
   $19 = $ReallocAsyncCtx14 + 8 | 0; //@line 17012
   HEAP32[$19 >> 2] = $4; //@line 17013
   $20 = $ReallocAsyncCtx14 + 12 | 0; //@line 17014
   HEAP32[$20 >> 2] = $8; //@line 17015
   $21 = $ReallocAsyncCtx14 + 16 | 0; //@line 17016
   HEAP32[$21 >> 2] = $10; //@line 17017
   $22 = $ReallocAsyncCtx14 + 20 | 0; //@line 17018
   HEAP32[$22 >> 2] = $12; //@line 17019
   $23 = $ReallocAsyncCtx14 + 24 | 0; //@line 17020
   HEAP32[$23 >> 2] = $14; //@line 17021
   sp = STACKTOP; //@line 17022
   return;
  }
  ___async_unwind = 0; //@line 17025
  HEAP32[$ReallocAsyncCtx14 >> 2] = 198; //@line 17026
  $18 = $ReallocAsyncCtx14 + 4 | 0; //@line 17027
  HEAP32[$18 >> 2] = $2; //@line 17028
  $19 = $ReallocAsyncCtx14 + 8 | 0; //@line 17029
  HEAP32[$19 >> 2] = $4; //@line 17030
  $20 = $ReallocAsyncCtx14 + 12 | 0; //@line 17031
  HEAP32[$20 >> 2] = $8; //@line 17032
  $21 = $ReallocAsyncCtx14 + 16 | 0; //@line 17033
  HEAP32[$21 >> 2] = $10; //@line 17034
  $22 = $ReallocAsyncCtx14 + 20 | 0; //@line 17035
  HEAP32[$22 >> 2] = $12; //@line 17036
  $23 = $ReallocAsyncCtx14 + 24 | 0; //@line 17037
  HEAP32[$23 >> 2] = $14; //@line 17038
  sp = STACKTOP; //@line 17039
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 17042
 __ZN7LoRaMac17bind_radio_driverER9LoRaRadio($10, $12); //@line 17043
 $26 = HEAP32[(HEAP32[$12 >> 2] | 0) + 72 >> 2] | 0; //@line 17046
 $ReallocAsyncCtx16 = _emscripten_realloc_async_context(16) | 0; //@line 17047
 FUNCTION_TABLE_vi[$26 & 1023]($12); //@line 17048
 if (___async) {
  HEAP32[$ReallocAsyncCtx16 >> 2] = 200; //@line 17051
  $27 = $ReallocAsyncCtx16 + 4 | 0; //@line 17052
  HEAP32[$27 >> 2] = $12; //@line 17053
  $28 = $ReallocAsyncCtx16 + 8 | 0; //@line 17054
  HEAP32[$28 >> 2] = $14; //@line 17055
  $29 = $ReallocAsyncCtx16 + 12 | 0; //@line 17056
  HEAP32[$29 >> 2] = $12; //@line 17057
  sp = STACKTOP; //@line 17058
  return;
 }
 ___async_unwind = 0; //@line 17061
 HEAP32[$ReallocAsyncCtx16 >> 2] = 200; //@line 17062
 $27 = $ReallocAsyncCtx16 + 4 | 0; //@line 17063
 HEAP32[$27 >> 2] = $12; //@line 17064
 $28 = $ReallocAsyncCtx16 + 8 | 0; //@line 17065
 HEAP32[$28 >> 2] = $14; //@line 17066
 $29 = $ReallocAsyncCtx16 + 12 | 0; //@line 17067
 HEAP32[$29 >> 2] = $12; //@line 17068
 sp = STACKTOP; //@line 17069
 return;
}
function __ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_2($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 18476
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18478
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18480
 $10 = HEAP8[$0 + 20 >> 0] & 1; //@line 18487
 $12 = HEAP8[$0 + 21 >> 0] | 0; //@line 18489
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 18491
 $16 = HEAP16[$0 + 28 >> 1] | 0; //@line 18493
 $18 = HEAP8[$0 + 30 >> 0] | 0; //@line 18495
 $20 = HEAP32[$0 + 32 >> 2] | 0; //@line 18497
 $22 = HEAP8[$0 + 36 >> 0] | 0; //@line 18499
 $24 = HEAP32[$0 + 40 >> 2] | 0; //@line 18501
 $26 = HEAP8[$0 + 44 >> 0] | 0; //@line 18503
 $28 = HEAP8[$0 + 45 >> 0] | 0; //@line 18505
 $30 = HEAP32[$0 + 48 >> 2] | 0; //@line 18507
 $32 = HEAP32[$0 + 52 >> 2] | 0; //@line 18509
 $34 = HEAP16[$0 + 56 >> 1] | 0; //@line 18511
 $36 = HEAP32[$0 + 60 >> 2] | 0; //@line 18513
 $38 = HEAP32[$0 + 64 >> 2] | 0; //@line 18515
 $40 = HEAP32[$0 + 68 >> 2] | 0; //@line 18517
 $42 = HEAP32[$0 + 72 >> 2] | 0; //@line 18519
 $44 = HEAP32[$0 + 76 >> 2] | 0; //@line 18521
 $46 = HEAP32[$0 + 80 >> 2] | 0; //@line 18523
 $48 = HEAP32[$0 + 84 >> 2] | 0; //@line 18525
 $50 = HEAP32[$0 + 88 >> 2] | 0; //@line 18527
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  _mbed_tracef(2, 12890, 12941, HEAP32[$0 + 12 >> 2] | 0); //@line 18532
  HEAP32[$2 + 2020 >> 2] = 12; //@line 18534
  HEAP8[$2 + 2012 >> 0] = 0; //@line 18536
  return;
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(88) | 0; //@line 18540
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($2, $2 + 1836 | 0); //@line 18541
 if (!___async) {
  ___async_unwind = 0; //@line 18544
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 401; //@line 18546
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 18548
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 18550
 HEAP8[$ReallocAsyncCtx5 + 12 >> 0] = $10 & 1; //@line 18553
 HEAP8[$ReallocAsyncCtx5 + 13 >> 0] = $12; //@line 18555
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $14; //@line 18557
 HEAP16[$ReallocAsyncCtx5 + 20 >> 1] = $16; //@line 18559
 HEAP8[$ReallocAsyncCtx5 + 22 >> 0] = $18; //@line 18561
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $20; //@line 18563
 HEAP8[$ReallocAsyncCtx5 + 28 >> 0] = $22; //@line 18565
 HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $24; //@line 18567
 HEAP8[$ReallocAsyncCtx5 + 36 >> 0] = $26; //@line 18569
 HEAP8[$ReallocAsyncCtx5 + 37 >> 0] = $28; //@line 18571
 HEAP32[$ReallocAsyncCtx5 + 40 >> 2] = $30; //@line 18573
 HEAP32[$ReallocAsyncCtx5 + 44 >> 2] = $32; //@line 18575
 HEAP16[$ReallocAsyncCtx5 + 48 >> 1] = $34; //@line 18577
 HEAP32[$ReallocAsyncCtx5 + 52 >> 2] = $36; //@line 18579
 HEAP32[$ReallocAsyncCtx5 + 56 >> 2] = $38; //@line 18581
 HEAP32[$ReallocAsyncCtx5 + 60 >> 2] = $40; //@line 18583
 HEAP32[$ReallocAsyncCtx5 + 64 >> 2] = $2; //@line 18585
 HEAP32[$ReallocAsyncCtx5 + 68 >> 2] = $42; //@line 18587
 HEAP32[$ReallocAsyncCtx5 + 72 >> 2] = $44; //@line 18589
 HEAP32[$ReallocAsyncCtx5 + 76 >> 2] = $46; //@line 18591
 HEAP32[$ReallocAsyncCtx5 + 80 >> 2] = $48; //@line 18593
 HEAP32[$ReallocAsyncCtx5 + 84 >> 2] = $50; //@line 18595
 sp = STACKTOP; //@line 18596
 return;
}
function __ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$unpack10 = 0, $10 = 0, $13 = 0, $19 = 0, $20 = 0, $23 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 8668
 STACKTOP = STACKTOP + 16 | 0; //@line 8669
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 8669
 $3 = sp; //@line 8670
 $$unpack10 = HEAP32[$2 + 4 >> 2] | 0; //@line 8673
 $4 = $3 + 12 | 0; //@line 8674
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 8675
 HEAP32[$3 + 4 >> 2] = $$unpack10; //@line 8677
 HEAP32[$3 + 8 >> 2] = $1; //@line 8679
 HEAP32[$4 >> 2] = 824; //@line 8680
 $AsyncCtx8 = _emscripten_alloc_async_context(16, sp) | 0; //@line 8681
 $5 = _equeue_alloc($0, 16) | 0; //@line 8682
 if (___async) {
  HEAP32[$AsyncCtx8 >> 2] = 281; //@line 8685
  HEAP32[$AsyncCtx8 + 4 >> 2] = $4; //@line 8687
  HEAP32[$AsyncCtx8 + 8 >> 2] = $0; //@line 8689
  HEAP32[$AsyncCtx8 + 12 >> 2] = $3; //@line 8691
  sp = STACKTOP; //@line 8692
  STACKTOP = sp; //@line 8693
  return 0; //@line 8693
 }
 _emscripten_free_async_context($AsyncCtx8 | 0); //@line 8695
 do {
  if (!$5) {
   $$0$i = 0; //@line 8699
  } else {
   $10 = HEAP32[$4 >> 2] | 0; //@line 8701
   do {
    if (!$10) {
     $19 = 0; //@line 8705
    } else {
     $13 = HEAP32[$10 + 4 >> 2] | 0; //@line 8708
     $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 8709
     FUNCTION_TABLE_vii[$13 & 15]($5, $3); //@line 8710
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 282; //@line 8713
      HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 8715
      HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 8717
      HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 8719
      HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 8721
      sp = STACKTOP; //@line 8722
      STACKTOP = sp; //@line 8723
      return 0; //@line 8723
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 8725
      $19 = HEAP32[$4 >> 2] | 0; //@line 8727
      break;
     }
    }
   } while (0);
   HEAP32[$5 + 12 >> 2] = $19; //@line 8733
   _equeue_event_dtor($5, 283); //@line 8734
   $AsyncCtx5 = _emscripten_alloc_async_context(12, sp) | 0; //@line 8735
   $20 = _equeue_post($0, 284, $5) | 0; //@line 8736
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 285; //@line 8739
    HEAP32[$AsyncCtx5 + 4 >> 2] = $4; //@line 8741
    HEAP32[$AsyncCtx5 + 8 >> 2] = $3; //@line 8743
    sp = STACKTOP; //@line 8744
    STACKTOP = sp; //@line 8745
    return 0; //@line 8745
   } else {
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 8747
    $$0$i = $20; //@line 8748
    break;
   }
  }
 } while (0);
 $23 = HEAP32[$4 >> 2] | 0; //@line 8753
 if (!$23) {
  STACKTOP = sp; //@line 8756
  return $$0$i | 0; //@line 8756
 }
 $26 = HEAP32[$23 + 8 >> 2] | 0; //@line 8759
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8760
 FUNCTION_TABLE_vi[$26 & 1023]($3); //@line 8761
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 286; //@line 8764
  HEAP32[$AsyncCtx2 + 4 >> 2] = $$0$i; //@line 8766
  sp = STACKTOP; //@line 8767
  STACKTOP = sp; //@line 8768
  return 0; //@line 8768
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 8770
 STACKTOP = sp; //@line 8771
 return $$0$i | 0; //@line 8771
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $12 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $29 = 0, $3 = 0, $36 = 0, $39 = 0, $40 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx14 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, sp = 0;
 sp = STACKTOP; //@line 16504
 STACKTOP = STACKTOP + 48 | 0; //@line 16505
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 16505
 $vararg_buffer10 = sp + 32 | 0; //@line 16506
 $vararg_buffer7 = sp + 24 | 0; //@line 16507
 $vararg_buffer3 = sp + 16 | 0; //@line 16508
 $vararg_buffer = sp; //@line 16509
 $0 = sp + 36 | 0; //@line 16510
 $1 = ___cxa_get_globals_fast() | 0; //@line 16511
 if ($1 | 0) {
  $3 = HEAP32[$1 >> 2] | 0; //@line 16514
  if ($3 | 0) {
   $7 = $3 + 48 | 0; //@line 16519
   $9 = HEAP32[$7 >> 2] | 0; //@line 16521
   $12 = HEAP32[$7 + 4 >> 2] | 0; //@line 16524
   if (!(($9 & -256 | 0) == 1126902528 & ($12 | 0) == 1129074247)) {
    HEAP32[$vararg_buffer7 >> 2] = 18535; //@line 16530
    _abort_message(18485, $vararg_buffer7); //@line 16531
   }
   if (($9 | 0) == 1126902529 & ($12 | 0) == 1129074247) {
    $22 = HEAP32[$3 + 44 >> 2] | 0; //@line 16540
   } else {
    $22 = $3 + 80 | 0; //@line 16542
   }
   HEAP32[$0 >> 2] = $22; //@line 16544
   $23 = HEAP32[$3 >> 2] | 0; //@line 16545
   $25 = HEAP32[$23 + 4 >> 2] | 0; //@line 16547
   $28 = HEAP32[(HEAP32[94] | 0) + 16 >> 2] | 0; //@line 16550
   $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 16551
   $29 = FUNCTION_TABLE_iiii[$28 & 31](376, $23, $0) | 0; //@line 16552
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 720; //@line 16555
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 16557
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer3; //@line 16559
    HEAP32[$AsyncCtx + 12 >> 2] = $25; //@line 16561
    HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer3; //@line 16563
    HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer; //@line 16565
    HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer; //@line 16567
    sp = STACKTOP; //@line 16568
    STACKTOP = sp; //@line 16569
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 16571
   if (!$29) {
    HEAP32[$vararg_buffer3 >> 2] = 18535; //@line 16573
    HEAP32[$vararg_buffer3 + 4 >> 2] = $25; //@line 16575
    _abort_message(18444, $vararg_buffer3); //@line 16576
   }
   $36 = HEAP32[$0 >> 2] | 0; //@line 16579
   $39 = HEAP32[(HEAP32[$36 >> 2] | 0) + 8 >> 2] | 0; //@line 16582
   $AsyncCtx14 = _emscripten_alloc_async_context(16, sp) | 0; //@line 16583
   $40 = FUNCTION_TABLE_ii[$39 & 15]($36) | 0; //@line 16584
   if (___async) {
    HEAP32[$AsyncCtx14 >> 2] = 721; //@line 16587
    HEAP32[$AsyncCtx14 + 4 >> 2] = $vararg_buffer; //@line 16589
    HEAP32[$AsyncCtx14 + 8 >> 2] = $25; //@line 16591
    HEAP32[$AsyncCtx14 + 12 >> 2] = $vararg_buffer; //@line 16593
    sp = STACKTOP; //@line 16594
    STACKTOP = sp; //@line 16595
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 16597
    HEAP32[$vararg_buffer >> 2] = 18535; //@line 16598
    HEAP32[$vararg_buffer + 4 >> 2] = $25; //@line 16600
    HEAP32[$vararg_buffer + 8 >> 2] = $40; //@line 16602
    _abort_message(18399, $vararg_buffer); //@line 16603
   }
  }
 }
 _abort_message(18523, $vararg_buffer10); //@line 16608
}
function __ZN7LoRaPHY11add_channelEPK16channel_params_th($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$$125$off0 = 0, $$026 = 0, $$4$off0 = 0, $$5$off039 = 0, $$5$off040$ph = 0, $11 = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $21 = 0, $37 = 0, $43 = 0, $44 = 0, $45 = 0, $50 = 0, $52 = 0, $6 = 0, $62 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 21621
 if (!(HEAP8[$0 + 16 >> 0] | 0)) {
  $$026 = -1003; //@line 21626
  return $$026 | 0; //@line 21627
 }
 $6 = $2 & 255; //@line 21629
 if ((HEAPU8[$0 + 20 >> 0] | 0) <= ($2 & 255)) {
  $$026 = -1003; //@line 21634
  return $$026 | 0; //@line 21635
 }
 $11 = HEAP8[$1 + 8 >> 0] | 0; //@line 21638
 $12 = $11 & 15; //@line 21639
 $14 = HEAP8[$0 + 26 >> 0] | 0; //@line 21641
 $16 = HEAP8[$0 + 27 >> 0] | 0; //@line 21643
 $19 = ($11 & 255) >>> 4; //@line 21647
 $21 = $19 << 24 >> 24 <= $16 << 24 >> 24; //@line 21649
 $$$125$off0 = ($12 & 255) > ($19 & 255) | (($12 << 24 >> 24 < $14 << 24 >> 24 ? 1 : $12 << 24 >> 24 > $16 << 24 >> 24) | $19 << 24 >> 24 >= $14 << 24 >> 24 & $21 ^ 1); //@line 21654
 if ((HEAPU8[$0 + 18 >> 0] | 0) > ($2 & 255)) {
  $$4$off0 = ($12 & 255) > ($14 & 255) | $$$125$off0 | $21 & $19 << 24 >> 24 >= (HEAP8[$0 + 31 >> 0] | 0) ^ 1; //@line 21666
  if ((HEAP32[$1 >> 2] | 0) == (HEAP32[(HEAP32[$0 + 124 >> 2] | 0) + ($6 * 12 | 0) >> 2] | 0)) {
   $$5$off039 = $$4$off0; //@line 21674
   label = 5; //@line 21675
  } else {
   $$5$off040$ph = $$4$off0; //@line 21677
  }
 } else {
  $$5$off039 = $$$125$off0; //@line 21680
  label = 5; //@line 21681
 }
 if ((label | 0) == 5) {
  $37 = HEAP8[$1 + 9 >> 0] | 0; //@line 21685
  if (($37 & 255) < (HEAPU8[$0 + 76 >> 0] | 0)) {
   $43 = HEAP32[(HEAP32[$0 >> 2] | 0) + 76 >> 2] | 0; //@line 21692
   $44 = HEAP32[$1 >> 2] | 0; //@line 21693
   $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 21694
   $45 = FUNCTION_TABLE_iiii[$43 & 31]($0, $44, $37) | 0; //@line 21695
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 537; //@line 21698
    HEAP8[$AsyncCtx + 4 >> 0] = $$5$off039 & 1; //@line 21701
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 21703
    HEAP32[$AsyncCtx + 12 >> 2] = $6; //@line 21705
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 21707
    sp = STACKTOP; //@line 21708
    return 0; //@line 21709
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 21711
   if ($45) {
    if ($$5$off039) {
     $$026 = $$5$off039 ? -1005 : -1004; //@line 21715
     return $$026 | 0; //@line 21716
    }
    $50 = $0 + 124 | 0; //@line 21718
    $52 = (HEAP32[$50 >> 2] | 0) + ($6 * 12 | 0) | 0; //@line 21720
    HEAP32[$52 >> 2] = HEAP32[$1 >> 2]; //@line 21721
    HEAP32[$52 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 21721
    HEAP32[$52 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 21721
    HEAP8[(HEAP32[$50 >> 2] | 0) + ($6 * 12 | 0) + 9 >> 0] = HEAP8[$1 + 9 >> 0] | 0; //@line 21726
    $62 = (HEAP32[$0 + 116 >> 2] | 0) + ($6 >>> 4 << 1) | 0; //@line 21732
    HEAP16[$62 >> 1] = 1 << ($6 & 15) | HEAPU16[$62 >> 1]; //@line 21737
    $$026 = 0; //@line 21738
    return $$026 | 0; //@line 21739
   } else {
    $$5$off040$ph = $$5$off039; //@line 21741
   }
  } else {
   $$5$off040$ph = $$5$off039; //@line 21744
  }
 }
 $$026 = $$5$off040$ph ? -1006 : -1004; //@line 21748
 return $$026 | 0; //@line 21749
}
function __ZN18LoRaMacChannelPlan11remove_planEv($0) {
 $0 = $0 | 0;
 var $10 = 0, $21 = 0, $24 = 0, $26 = 0, $32 = 0, $39 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $indvars$iv = 0, $indvars$iv$next = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 17183
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
  $39 = -1002; //@line 17187
  return $39 | 0; //@line 17188
 }
 $4 = __ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0; //@line 17191
 $6 = __ZN7LoRaPHY16get_channel_maskEb(HEAP32[$0 >> 2] | 0, 0) | 0; //@line 17193
 $8 = __ZN7LoRaPHY16get_channel_maskEb(HEAP32[$0 >> 2] | 0, 1) | 0; //@line 17195
 if (!($4 << 24 >> 24)) {
  $39 = 0; //@line 17198
  return $39 | 0; //@line 17199
 }
 $10 = $4 & 255; //@line 17201
 $indvars$iv = 0; //@line 17202
 while (1) {
  if (!(__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$0 >> 2] | 0, $8, $indvars$iv) | 0)) {
   if (__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$0 >> 2] | 0, $6, $indvars$iv) | 0) {
    if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
     $39 = -1002; //@line 17213
     label = 15; //@line 17214
     break;
    }
    if ($indvars$iv >>> 0 >= ((__ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0) & 255) >>> 0) {
     $39 = -1003; //@line 17222
     label = 15; //@line 17223
     break;
    }
    $21 = HEAP32[$0 >> 2] | 0; //@line 17226
    $24 = HEAP32[(HEAP32[$21 >> 2] | 0) + 64 >> 2] | 0; //@line 17229
    $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 17231
    $26 = FUNCTION_TABLE_iii[$24 & 31]($21, $indvars$iv & 255) | 0; //@line 17232
    if (___async) {
     label = 9; //@line 17235
     break;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 17238
    if (!$26) {
     $39 = -1003; //@line 17240
     label = 15; //@line 17241
     break;
    }
    $32 = HEAP32[$0 >> 2] | 0; //@line 17244
    $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 17245
    __ZN7LoRaPHY18put_radio_to_sleepEv($32); //@line 17246
    if (___async) {
     label = 12; //@line 17249
     break;
    }
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 17252
   }
  }
  $indvars$iv$next = $indvars$iv + 1 | 0; //@line 17255
  if ($indvars$iv$next >>> 0 < $10 >>> 0) {
   $indvars$iv = $indvars$iv$next; //@line 17258
  } else {
   $39 = 0; //@line 17260
   label = 15; //@line 17261
   break;
  }
 }
 if ((label | 0) == 9) {
  HEAP32[$AsyncCtx >> 2] = 485; //@line 17266
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 17268
  HEAP32[$AsyncCtx + 8 >> 2] = $indvars$iv; //@line 17270
  HEAP32[$AsyncCtx + 12 >> 2] = $10; //@line 17272
  HEAP32[$AsyncCtx + 16 >> 2] = $8; //@line 17274
  HEAP32[$AsyncCtx + 20 >> 2] = $6; //@line 17276
  sp = STACKTOP; //@line 17277
  return 0; //@line 17278
 } else if ((label | 0) == 12) {
  HEAP32[$AsyncCtx2 >> 2] = 486; //@line 17281
  HEAP32[$AsyncCtx2 + 4 >> 2] = $indvars$iv; //@line 17283
  HEAP32[$AsyncCtx2 + 8 >> 2] = $10; //@line 17285
  HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 17287
  HEAP32[$AsyncCtx2 + 16 >> 2] = $8; //@line 17289
  HEAP32[$AsyncCtx2 + 20 >> 2] = $6; //@line 17291
  sp = STACKTOP; //@line 17292
  return 0; //@line 17293
 } else if ((label | 0) == 15) {
  return $39 | 0; //@line 17296
 }
 return 0; //@line 17298
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb($0) {
 $0 = $0 | 0;
 var $$69 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 30686
 $2 = HEAP8[$0 + 4 >> 0] | 0; //@line 30688
 $6 = HEAP32[$0 + 8 >> 2] | 0; //@line 30692
 $8 = HEAP32[$0 + 12 >> 2] | 0; //@line 30694
 $10 = HEAP32[$0 + 16 >> 2] | 0; //@line 30696
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 30698
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 30700
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 30702
 $18 = HEAP8[$0 + 32 >> 0] | 0; //@line 30704
 $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 30706
 $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 30708
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 30710
 $$69 = (HEAP32[___async_retval >> 2] | 0) == 0 ? 0 : -1014; //@line 30714
 $31 = (HEAPU16[$6 >> 1] | 0) + (HEAPU8[$0 + 5 >> 0] | 0) & 65535; //@line 30719
 HEAP16[$6 >> 1] = $31; //@line 30720
 $34 = HEAP32[$10 >> 2] | 0; //@line 30723
 $35 = HEAP32[$12 >> 2] | 0; //@line 30724
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 30725
 $36 = __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj($8 + 756 | 0, $14, $31, $8 + 1716 | 0, 128, $34, 0, $35, $16) | 0; //@line 30726
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 430; //@line 30729
  $37 = $ReallocAsyncCtx2 + 4 | 0; //@line 30730
  HEAP32[$37 >> 2] = $$69; //@line 30731
  $38 = $ReallocAsyncCtx2 + 8 | 0; //@line 30732
  HEAP32[$38 >> 2] = $16; //@line 30733
  $39 = $ReallocAsyncCtx2 + 12 | 0; //@line 30734
  HEAP32[$39 >> 2] = $6; //@line 30735
  $40 = $ReallocAsyncCtx2 + 16 | 0; //@line 30736
  HEAP32[$40 >> 2] = $8; //@line 30737
  $41 = $ReallocAsyncCtx2 + 20 | 0; //@line 30738
  HEAP8[$41 >> 0] = $18; //@line 30739
  $42 = $ReallocAsyncCtx2 + 21 | 0; //@line 30740
  HEAP8[$42 >> 0] = $2; //@line 30741
  $43 = $ReallocAsyncCtx2 + 24 | 0; //@line 30742
  HEAP32[$43 >> 2] = $20; //@line 30743
  $44 = $ReallocAsyncCtx2 + 28 | 0; //@line 30744
  HEAP32[$44 >> 2] = $22; //@line 30745
  $45 = $ReallocAsyncCtx2 + 32 | 0; //@line 30746
  HEAP32[$45 >> 2] = $24; //@line 30747
  sp = STACKTOP; //@line 30748
  return;
 }
 HEAP32[___async_retval >> 2] = $36; //@line 30752
 ___async_unwind = 0; //@line 30753
 HEAP32[$ReallocAsyncCtx2 >> 2] = 430; //@line 30754
 $37 = $ReallocAsyncCtx2 + 4 | 0; //@line 30755
 HEAP32[$37 >> 2] = $$69; //@line 30756
 $38 = $ReallocAsyncCtx2 + 8 | 0; //@line 30757
 HEAP32[$38 >> 2] = $16; //@line 30758
 $39 = $ReallocAsyncCtx2 + 12 | 0; //@line 30759
 HEAP32[$39 >> 2] = $6; //@line 30760
 $40 = $ReallocAsyncCtx2 + 16 | 0; //@line 30761
 HEAP32[$40 >> 2] = $8; //@line 30762
 $41 = $ReallocAsyncCtx2 + 20 | 0; //@line 30763
 HEAP8[$41 >> 0] = $18; //@line 30764
 $42 = $ReallocAsyncCtx2 + 21 | 0; //@line 30765
 HEAP8[$42 >> 0] = $2; //@line 30766
 $43 = $ReallocAsyncCtx2 + 24 | 0; //@line 30767
 HEAP32[$43 >> 2] = $20; //@line 30768
 $44 = $ReallocAsyncCtx2 + 28 | 0; //@line 30769
 HEAP32[$44 >> 2] = $22; //@line 30770
 $45 = $ReallocAsyncCtx2 + 32 | 0; //@line 30771
 HEAP32[$45 >> 2] = $24; //@line 30772
 sp = STACKTOP; //@line 30773
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_407($0) {
 $0 = $0 | 0;
 var $$038 = 0, $10 = 0, $17 = 0, $19 = 0, $2 = 0, $23 = 0, $28 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 29039
 $2 = HEAP8[$0 + 4 >> 0] | 0; //@line 29041
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29043
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29045
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29047
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29049
 if (!(HEAP8[$0 + 24 >> 0] & 1)) {
  HEAP8[___async_retval >> 0] = 0; //@line 29056
  return;
 }
 if (!(HEAP32[$4 + 20 >> 2] | 0)) {
  $17 = HEAP32[$10 + 124 >> 2] | 0; //@line 29064
  $19 = HEAPU8[$4 >> 0] | 0; //@line 29066
  $23 = HEAP32[$17 + ($19 * 12 | 0) + 4 >> 2] | 0; //@line 29070
  $$038 = ($23 | 0) == 0 ? HEAP32[$17 + ($19 * 12 | 0) >> 2] | 0 : $23; //@line 29073
 } else {
  $$038 = $8; //@line 29075
 }
 $28 = HEAP32[$10 + 96 >> 2] | 0; //@line 29080
 $30 = HEAP32[$10 + 104 >> 2] | 0; //@line 29082
 $31 = $2 & 255; //@line 29083
 $33 = HEAP8[(HEAP32[$10 + 88 >> 2] | 0) + $31 >> 0] | 0; //@line 29085
 $34 = HEAP32[$6 >> 2] | 0; //@line 29086
 $37 = HEAP32[(HEAP32[$34 >> 2] | 0) + 72 >> 2] | 0; //@line 29089
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(40) | 0; //@line 29090
 FUNCTION_TABLE_vi[$37 & 1023]($34); //@line 29091
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 521; //@line 29094
  $38 = $ReallocAsyncCtx4 + 4 | 0; //@line 29095
  HEAP32[$38 >> 2] = $6; //@line 29096
  $39 = $ReallocAsyncCtx4 + 8 | 0; //@line 29097
  HEAP32[$39 >> 2] = $$038; //@line 29098
  $40 = $ReallocAsyncCtx4 + 12 | 0; //@line 29099
  HEAP8[$40 >> 0] = $2; //@line 29100
  $41 = $ReallocAsyncCtx4 + 16 | 0; //@line 29101
  HEAP32[$41 >> 2] = $10; //@line 29102
  $42 = $ReallocAsyncCtx4 + 20 | 0; //@line 29103
  HEAP32[$42 >> 2] = $4; //@line 29104
  $43 = $ReallocAsyncCtx4 + 24 | 0; //@line 29105
  HEAP8[$43 >> 0] = $33; //@line 29106
  $44 = $ReallocAsyncCtx4 + 28 | 0; //@line 29107
  HEAP32[$44 >> 2] = $28; //@line 29108
  $45 = $ReallocAsyncCtx4 + 32 | 0; //@line 29109
  HEAP32[$45 >> 2] = $30; //@line 29110
  $46 = $ReallocAsyncCtx4 + 36 | 0; //@line 29111
  HEAP32[$46 >> 2] = $31; //@line 29112
  sp = STACKTOP; //@line 29113
  return;
 }
 ___async_unwind = 0; //@line 29116
 HEAP32[$ReallocAsyncCtx4 >> 2] = 521; //@line 29117
 $38 = $ReallocAsyncCtx4 + 4 | 0; //@line 29118
 HEAP32[$38 >> 2] = $6; //@line 29119
 $39 = $ReallocAsyncCtx4 + 8 | 0; //@line 29120
 HEAP32[$39 >> 2] = $$038; //@line 29121
 $40 = $ReallocAsyncCtx4 + 12 | 0; //@line 29122
 HEAP8[$40 >> 0] = $2; //@line 29123
 $41 = $ReallocAsyncCtx4 + 16 | 0; //@line 29124
 HEAP32[$41 >> 2] = $10; //@line 29125
 $42 = $ReallocAsyncCtx4 + 20 | 0; //@line 29126
 HEAP32[$42 >> 2] = $4; //@line 29127
 $43 = $ReallocAsyncCtx4 + 24 | 0; //@line 29128
 HEAP8[$43 >> 0] = $33; //@line 29129
 $44 = $ReallocAsyncCtx4 + 28 | 0; //@line 29130
 HEAP32[$44 >> 2] = $28; //@line 29131
 $45 = $ReallocAsyncCtx4 + 32 | 0; //@line 29132
 HEAP32[$45 >> 2] = $30; //@line 29133
 $46 = $ReallocAsyncCtx4 + 36 | 0; //@line 29134
 HEAP32[$46 >> 2] = $31; //@line 29135
 sp = STACKTOP; //@line 29136
 return;
}
function __ZN7LoRaPHY19request_new_channelEaP16channel_params_t__async_cb_44($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $34 = 0, $38 = 0, $39 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 24111
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24113
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24115
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24117
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 24119
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24121
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24123
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 24125
 if (HEAP8[___async_retval >> 0] & 1) {
  $34 = $2; //@line 24130
 } else {
  $20 = $2 + 1 | 0; //@line 24132
  if (($20 | 0) < (HEAPU8[$10 >> 0] | 0 | 0)) {
   $18 = HEAP32[(HEAP32[$12 >> 2] | 0) + 76 >> 2] | 0; //@line 24139
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 24141
   $21 = FUNCTION_TABLE_iiii[$18 & 31]($6, $14, $20 & 255) | 0; //@line 24142
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 513; //@line 24145
    $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 24146
    HEAP32[$22 >> 2] = $20; //@line 24147
    $23 = $ReallocAsyncCtx3 + 8 | 0; //@line 24148
    HEAP32[$23 >> 2] = $4; //@line 24149
    $24 = $ReallocAsyncCtx3 + 12 | 0; //@line 24150
    HEAP32[$24 >> 2] = $6; //@line 24151
    $25 = $ReallocAsyncCtx3 + 16 | 0; //@line 24152
    HEAP8[$25 >> 0] = $8; //@line 24153
    $26 = $ReallocAsyncCtx3 + 20 | 0; //@line 24154
    HEAP32[$26 >> 2] = $10; //@line 24155
    $27 = $ReallocAsyncCtx3 + 24 | 0; //@line 24156
    HEAP32[$27 >> 2] = $12; //@line 24157
    $28 = $ReallocAsyncCtx3 + 28 | 0; //@line 24158
    HEAP32[$28 >> 2] = $14; //@line 24159
    sp = STACKTOP; //@line 24160
    return;
   }
   HEAP8[___async_retval >> 0] = $21 & 1; //@line 24165
   ___async_unwind = 0; //@line 24166
   HEAP32[$ReallocAsyncCtx3 >> 2] = 513; //@line 24167
   $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 24168
   HEAP32[$22 >> 2] = $20; //@line 24169
   $23 = $ReallocAsyncCtx3 + 8 | 0; //@line 24170
   HEAP32[$23 >> 2] = $4; //@line 24171
   $24 = $ReallocAsyncCtx3 + 12 | 0; //@line 24172
   HEAP32[$24 >> 2] = $6; //@line 24173
   $25 = $ReallocAsyncCtx3 + 16 | 0; //@line 24174
   HEAP8[$25 >> 0] = $8; //@line 24175
   $26 = $ReallocAsyncCtx3 + 20 | 0; //@line 24176
   HEAP32[$26 >> 2] = $10; //@line 24177
   $27 = $ReallocAsyncCtx3 + 24 | 0; //@line 24178
   HEAP32[$27 >> 2] = $12; //@line 24179
   $28 = $ReallocAsyncCtx3 + 28 | 0; //@line 24180
   HEAP32[$28 >> 2] = $14; //@line 24181
   sp = STACKTOP; //@line 24182
   return;
  } else {
   $34 = -1; //@line 24185
  }
 }
 HEAP8[$4 + 9 >> 0] = $34; //@line 24190
 $38 = HEAP32[(HEAP32[$6 >> 2] | 0) + 60 >> 2] | 0; //@line 24193
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 24194
 $39 = FUNCTION_TABLE_iiii[$38 & 31]($6, $4, $8) | 0; //@line 24195
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 514; //@line 24198
  sp = STACKTOP; //@line 24199
  return;
 }
 HEAP32[___async_retval >> 2] = $39; //@line 24203
 ___async_unwind = 0; //@line 24204
 HEAP32[$ReallocAsyncCtx4 >> 2] = 514; //@line 24205
 sp = STACKTOP; //@line 24206
 return;
}
function _initialize__async_cb_418($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 30310
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30312
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30314
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30316
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30318
 $10 = HEAP8[$0 + 20 >> 0] | 0; //@line 30320
 $12 = 7 << 32 + -4; //@line 30322
 $13 = ___muldi3($12 | 0, 0, 1e6, 0) | 0; //@line 30323
 $14 = tempRet0; //@line 30324
 $15 = _i64Add($6 | 0, 0, -1, -1) | 0; //@line 30325
 $17 = _i64Add($15 | 0, tempRet0 | 0, $13 | 0, $14 | 0) | 0; //@line 30327
 $19 = ___udivdi3($17 | 0, tempRet0 | 0, $6 | 0, 0) | 0; //@line 30329
 $20 = tempRet0; //@line 30330
 $21 = HEAP32[$2 >> 2] | 0; //@line 30331
 HEAP32[$21 >> 2] = 0; //@line 30332
 HEAP32[$21 + 4 >> 2] = 0; //@line 30334
 $25 = HEAP32[(HEAP32[$8 >> 2] | 0) + 4 >> 2] | 0; //@line 30337
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(40) | 0; //@line 30338
 $26 = FUNCTION_TABLE_i[$25 & 7]() | 0; //@line 30339
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 622; //@line 30342
  $27 = $ReallocAsyncCtx3 + 4 | 0; //@line 30343
  HEAP32[$27 >> 2] = $2; //@line 30344
  $28 = $ReallocAsyncCtx3 + 8 | 0; //@line 30345
  HEAP32[$28 >> 2] = $6; //@line 30346
  $29 = $ReallocAsyncCtx3 + 12 | 0; //@line 30347
  HEAP8[$29 >> 0] = $10; //@line 30348
  $30 = $ReallocAsyncCtx3 + 16 | 0; //@line 30349
  HEAP32[$30 >> 2] = 32; //@line 30350
  $31 = $ReallocAsyncCtx3 + 20 | 0; //@line 30351
  HEAP32[$31 >> 2] = $12; //@line 30352
  $32 = $ReallocAsyncCtx3 + 24 | 0; //@line 30353
  $33 = $32; //@line 30354
  $34 = $33; //@line 30355
  HEAP32[$34 >> 2] = $19; //@line 30356
  $35 = $33 + 4 | 0; //@line 30357
  $36 = $35; //@line 30358
  HEAP32[$36 >> 2] = $20; //@line 30359
  $37 = $ReallocAsyncCtx3 + 32 | 0; //@line 30360
  HEAP32[$37 >> 2] = $8; //@line 30361
  $38 = $ReallocAsyncCtx3 + 36 | 0; //@line 30362
  HEAP32[$38 >> 2] = $4; //@line 30363
  sp = STACKTOP; //@line 30364
  return;
 }
 HEAP32[___async_retval >> 2] = $26; //@line 30368
 ___async_unwind = 0; //@line 30369
 HEAP32[$ReallocAsyncCtx3 >> 2] = 622; //@line 30370
 $27 = $ReallocAsyncCtx3 + 4 | 0; //@line 30371
 HEAP32[$27 >> 2] = $2; //@line 30372
 $28 = $ReallocAsyncCtx3 + 8 | 0; //@line 30373
 HEAP32[$28 >> 2] = $6; //@line 30374
 $29 = $ReallocAsyncCtx3 + 12 | 0; //@line 30375
 HEAP8[$29 >> 0] = $10; //@line 30376
 $30 = $ReallocAsyncCtx3 + 16 | 0; //@line 30377
 HEAP32[$30 >> 2] = 32; //@line 30378
 $31 = $ReallocAsyncCtx3 + 20 | 0; //@line 30379
 HEAP32[$31 >> 2] = $12; //@line 30380
 $32 = $ReallocAsyncCtx3 + 24 | 0; //@line 30381
 $33 = $32; //@line 30382
 $34 = $33; //@line 30383
 HEAP32[$34 >> 2] = $19; //@line 30384
 $35 = $33 + 4 | 0; //@line 30385
 $36 = $35; //@line 30386
 HEAP32[$36 >> 2] = $20; //@line 30387
 $37 = $ReallocAsyncCtx3 + 32 | 0; //@line 30388
 HEAP32[$37 >> 2] = $8; //@line 30389
 $38 = $ReallocAsyncCtx3 + 36 | 0; //@line 30390
 HEAP32[$38 >> 2] = $4; //@line 30391
 sp = STACKTOP; //@line 30392
 return;
}
function _mbed_error_vfprintf__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 19086
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19088
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19090
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 19092
 if (($AsyncRetVal | 0) <= 0) {
  return;
 }
 if (!(HEAP32[5091] | 0)) {
  _serial_init(20368, 2, 3); //@line 19100
 }
 $9 = HEAP8[$4 >> 0] | 0; //@line 19102
 if (0 == 13 | $9 << 24 >> 24 != 10) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 19108
  _serial_putc(20368, $9 << 24 >> 24); //@line 19109
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 655; //@line 19112
   $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 19113
   HEAP32[$18 >> 2] = 0; //@line 19114
   $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 19115
   HEAP32[$19 >> 2] = $AsyncRetVal; //@line 19116
   $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 19117
   HEAP32[$20 >> 2] = $2; //@line 19118
   $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 19119
   HEAP8[$21 >> 0] = $9; //@line 19120
   $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 19121
   HEAP32[$22 >> 2] = $4; //@line 19122
   sp = STACKTOP; //@line 19123
   return;
  }
  ___async_unwind = 0; //@line 19126
  HEAP32[$ReallocAsyncCtx2 >> 2] = 655; //@line 19127
  $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 19128
  HEAP32[$18 >> 2] = 0; //@line 19129
  $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 19130
  HEAP32[$19 >> 2] = $AsyncRetVal; //@line 19131
  $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 19132
  HEAP32[$20 >> 2] = $2; //@line 19133
  $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 19134
  HEAP8[$21 >> 0] = $9; //@line 19135
  $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 19136
  HEAP32[$22 >> 2] = $4; //@line 19137
  sp = STACKTOP; //@line 19138
  return;
 } else {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 19141
  _serial_putc(20368, 13); //@line 19142
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 654; //@line 19145
   $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 19146
   HEAP8[$12 >> 0] = $9; //@line 19147
   $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 19148
   HEAP32[$13 >> 2] = 0; //@line 19149
   $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 19150
   HEAP32[$14 >> 2] = $AsyncRetVal; //@line 19151
   $15 = $ReallocAsyncCtx3 + 16 | 0; //@line 19152
   HEAP32[$15 >> 2] = $2; //@line 19153
   $16 = $ReallocAsyncCtx3 + 20 | 0; //@line 19154
   HEAP32[$16 >> 2] = $4; //@line 19155
   sp = STACKTOP; //@line 19156
   return;
  }
  ___async_unwind = 0; //@line 19159
  HEAP32[$ReallocAsyncCtx3 >> 2] = 654; //@line 19160
  $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 19161
  HEAP8[$12 >> 0] = $9; //@line 19162
  $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 19163
  HEAP32[$13 >> 2] = 0; //@line 19164
  $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 19165
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 19166
  $15 = $ReallocAsyncCtx3 + 16 | 0; //@line 19167
  HEAP32[$15 >> 2] = $2; //@line 19168
  $16 = $ReallocAsyncCtx3 + 20 | 0; //@line 19169
  HEAP32[$16 >> 2] = $4; //@line 19170
  sp = STACKTOP; //@line 19171
  return;
 }
}
function _mbed_error_vfprintf__async_cb_8($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 19179
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19183
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19185
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19189
 $12 = (HEAP32[$0 + 4 >> 2] | 0) + 1 | 0; //@line 19190
 if (($12 | 0) == ($4 | 0)) {
  return;
 }
 $13 = HEAP8[$10 + $12 >> 0] | 0; //@line 19196
 if ((HEAP8[$0 + 16 >> 0] | 0) == 13 | $13 << 24 >> 24 != 10) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 19202
  _serial_putc(20368, $13 << 24 >> 24); //@line 19203
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 655; //@line 19206
   $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 19207
   HEAP32[$22 >> 2] = $12; //@line 19208
   $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 19209
   HEAP32[$23 >> 2] = $4; //@line 19210
   $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 19211
   HEAP32[$24 >> 2] = $6; //@line 19212
   $25 = $ReallocAsyncCtx2 + 16 | 0; //@line 19213
   HEAP8[$25 >> 0] = $13; //@line 19214
   $26 = $ReallocAsyncCtx2 + 20 | 0; //@line 19215
   HEAP32[$26 >> 2] = $10; //@line 19216
   sp = STACKTOP; //@line 19217
   return;
  }
  ___async_unwind = 0; //@line 19220
  HEAP32[$ReallocAsyncCtx2 >> 2] = 655; //@line 19221
  $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 19222
  HEAP32[$22 >> 2] = $12; //@line 19223
  $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 19224
  HEAP32[$23 >> 2] = $4; //@line 19225
  $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 19226
  HEAP32[$24 >> 2] = $6; //@line 19227
  $25 = $ReallocAsyncCtx2 + 16 | 0; //@line 19228
  HEAP8[$25 >> 0] = $13; //@line 19229
  $26 = $ReallocAsyncCtx2 + 20 | 0; //@line 19230
  HEAP32[$26 >> 2] = $10; //@line 19231
  sp = STACKTOP; //@line 19232
  return;
 } else {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 19235
  _serial_putc(20368, 13); //@line 19236
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 654; //@line 19239
   $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 19240
   HEAP8[$16 >> 0] = $13; //@line 19241
   $17 = $ReallocAsyncCtx3 + 8 | 0; //@line 19242
   HEAP32[$17 >> 2] = $12; //@line 19243
   $18 = $ReallocAsyncCtx3 + 12 | 0; //@line 19244
   HEAP32[$18 >> 2] = $4; //@line 19245
   $19 = $ReallocAsyncCtx3 + 16 | 0; //@line 19246
   HEAP32[$19 >> 2] = $6; //@line 19247
   $20 = $ReallocAsyncCtx3 + 20 | 0; //@line 19248
   HEAP32[$20 >> 2] = $10; //@line 19249
   sp = STACKTOP; //@line 19250
   return;
  }
  ___async_unwind = 0; //@line 19253
  HEAP32[$ReallocAsyncCtx3 >> 2] = 654; //@line 19254
  $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 19255
  HEAP8[$16 >> 0] = $13; //@line 19256
  $17 = $ReallocAsyncCtx3 + 8 | 0; //@line 19257
  HEAP32[$17 >> 2] = $12; //@line 19258
  $18 = $ReallocAsyncCtx3 + 12 | 0; //@line 19259
  HEAP32[$18 >> 2] = $4; //@line 19260
  $19 = $ReallocAsyncCtx3 + 16 | 0; //@line 19261
  HEAP32[$19 >> 2] = $6; //@line 19262
  $20 = $ReallocAsyncCtx3 + 20 | 0; //@line 19263
  HEAP32[$20 >> 2] = $10; //@line 19264
  sp = STACKTOP; //@line 19265
  return;
 }
}
function __ZN18LoRaMacChannelPlan11remove_planEv__async_cb_346($0) {
 $0 = $0 | 0;
 var $10 = 0, $21 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $34 = 0, $35 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $indvars$iv$reg2mem$0 = 0, label = 0, sp = 0, $indvars$iv$reg2mem$0$looptemp = 0;
 sp = STACKTOP; //@line 24062
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24066
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24068
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24070
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24072
 $indvars$iv$reg2mem$0 = HEAP32[$0 + 4 >> 2] | 0; //@line 24073
 while (1) {
  $indvars$iv$reg2mem$0$looptemp = $indvars$iv$reg2mem$0;
  $indvars$iv$reg2mem$0 = $indvars$iv$reg2mem$0 + 1 | 0; //@line 24075
  if ($indvars$iv$reg2mem$0 >>> 0 >= $4 >>> 0) {
   $35 = 0; //@line 24078
   label = 11; //@line 24079
   break;
  }
  if (__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$6 >> 2] | 0, $8, $indvars$iv$reg2mem$0) | 0) {
   $indvars$iv$reg2mem$0 = $indvars$iv$reg2mem$0; //@line 24085
   continue;
  }
  if (__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$6 >> 2] | 0, $10, $indvars$iv$reg2mem$0) | 0) {
   break;
  }
 }
 if ((label | 0) == 11) {
  $34 = ___async_retval; //@line 24097
  HEAP32[$34 >> 2] = $35; //@line 24098
  return;
 }
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$6 >> 2] | 0) | 0)) {
  $35 = -1002; //@line 24104
  $34 = ___async_retval; //@line 24105
  HEAP32[$34 >> 2] = $35; //@line 24106
  return;
 }
 if ($indvars$iv$reg2mem$0 >>> 0 >= ((__ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$6 >> 2] | 0) | 0) & 255) >>> 0) {
  $35 = -1003; //@line 24114
  $34 = ___async_retval; //@line 24115
  HEAP32[$34 >> 2] = $35; //@line 24116
  return;
 }
 $21 = HEAP32[$6 >> 2] | 0; //@line 24119
 $24 = HEAP32[(HEAP32[$21 >> 2] | 0) + 64 >> 2] | 0; //@line 24122
 $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 24124
 $26 = FUNCTION_TABLE_iii[$24 & 31]($21, $indvars$iv$reg2mem$0 & 255) | 0; //@line 24125
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 485; //@line 24128
  $27 = $ReallocAsyncCtx + 4 | 0; //@line 24129
  HEAP32[$27 >> 2] = $6; //@line 24130
  $28 = $ReallocAsyncCtx + 8 | 0; //@line 24131
  HEAP32[$28 >> 2] = $indvars$iv$reg2mem$0; //@line 24132
  $29 = $ReallocAsyncCtx + 12 | 0; //@line 24133
  HEAP32[$29 >> 2] = $4; //@line 24134
  $30 = $ReallocAsyncCtx + 16 | 0; //@line 24135
  HEAP32[$30 >> 2] = $8; //@line 24136
  $31 = $ReallocAsyncCtx + 20 | 0; //@line 24137
  HEAP32[$31 >> 2] = $10; //@line 24138
  sp = STACKTOP; //@line 24139
  return;
 }
 HEAP8[___async_retval >> 0] = $26 & 1; //@line 24144
 ___async_unwind = 0; //@line 24145
 HEAP32[$ReallocAsyncCtx >> 2] = 485; //@line 24146
 $27 = $ReallocAsyncCtx + 4 | 0; //@line 24147
 HEAP32[$27 >> 2] = $6; //@line 24148
 $28 = $ReallocAsyncCtx + 8 | 0; //@line 24149
 HEAP32[$28 >> 2] = $indvars$iv$reg2mem$0; //@line 24150
 $29 = $ReallocAsyncCtx + 12 | 0; //@line 24151
 HEAP32[$29 >> 2] = $4; //@line 24152
 $30 = $ReallocAsyncCtx + 16 | 0; //@line 24153
 HEAP32[$30 >> 2] = $8; //@line 24154
 $31 = $ReallocAsyncCtx + 20 | 0; //@line 24155
 HEAP32[$31 >> 2] = $10; //@line 24156
 sp = STACKTOP; //@line 24157
 return;
}
function __ZN16SX1276_LoRaRadio8transmitEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $18 = 0, $2 = 0, $21 = 0, $26 = 0, $27 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 1707
 STACKTOP = STACKTOP + 32 | 0; //@line 1708
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 1708
 $vararg_buffer = sp; //@line 1709
 $2 = sp + 8 | 0; //@line 1710
 HEAP32[$vararg_buffer >> 2] = $1; //@line 1711
 _mbed_tracef(16, 11040, 11442, $vararg_buffer); //@line 1712
 HEAP8[$0 + 688 >> 0] = 2; //@line 1714
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 1715
 $4 = $0 + 1240 | 0; //@line 1716
 $5 = $2 + 12 | 0; //@line 1717
 HEAP32[$2 >> 2] = 92; //@line 1718
 HEAP32[$2 + 4 >> 2] = 0; //@line 1720
 HEAP32[$2 + 8 >> 2] = $0; //@line 1722
 HEAP32[$5 >> 2] = 584; //@line 1723
 $6 = $0 + 1280 | 0; //@line 1724
 if (($6 | 0) != ($2 | 0)) {
  $8 = $0 + 1292 | 0; //@line 1727
  $9 = HEAP32[$8 >> 2] | 0; //@line 1728
  do {
   if ($9 | 0) {
    $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 1733
    $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 1734
    FUNCTION_TABLE_vi[$12 & 1023]($6); //@line 1735
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 93; //@line 1738
     HEAP32[$AsyncCtx + 4 >> 2] = $5; //@line 1740
     HEAP32[$AsyncCtx + 8 >> 2] = $8; //@line 1742
     HEAP32[$AsyncCtx + 12 >> 2] = $6; //@line 1744
     HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 1746
     HEAP32[$AsyncCtx + 20 >> 2] = $4; //@line 1748
     sp = STACKTOP; //@line 1749
     STACKTOP = sp; //@line 1750
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 1752
     break;
    }
   }
  } while (0);
  $18 = HEAP32[$5 >> 2] | 0; //@line 1757
  do {
   if (!$18) {
    $26 = 0; //@line 1761
   } else {
    $21 = HEAP32[$18 + 4 >> 2] | 0; //@line 1764
    $AsyncCtx2 = _emscripten_alloc_async_context(20, sp) | 0; //@line 1765
    FUNCTION_TABLE_vii[$21 & 15]($6, $2); //@line 1766
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 94; //@line 1769
     HEAP32[$AsyncCtx2 + 4 >> 2] = $5; //@line 1771
     HEAP32[$AsyncCtx2 + 8 >> 2] = $8; //@line 1773
     HEAP32[$AsyncCtx2 + 12 >> 2] = $4; //@line 1775
     HEAP32[$AsyncCtx2 + 16 >> 2] = $2; //@line 1777
     sp = STACKTOP; //@line 1778
     STACKTOP = sp; //@line 1779
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 1781
     $26 = HEAP32[$5 >> 2] | 0; //@line 1783
     break;
    }
   }
  } while (0);
  HEAP32[$8 >> 2] = $26; //@line 1788
 }
 __ZN4mbed6Ticker5setupEy($4, 1e5, 0); //@line 1790
 $27 = HEAP32[$5 >> 2] | 0; //@line 1791
 if (!$27) {
  STACKTOP = sp; //@line 1794
  return;
 }
 $30 = HEAP32[$27 + 8 >> 2] | 0; //@line 1797
 $AsyncCtx6 = _emscripten_alloc_async_context(4, sp) | 0; //@line 1798
 FUNCTION_TABLE_vi[$30 & 1023]($2); //@line 1799
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 95; //@line 1802
  sp = STACKTOP; //@line 1803
  STACKTOP = sp; //@line 1804
  return;
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 1806
 STACKTOP = sp; //@line 1807
 return;
}
function __ZN13LoRaMacCrypto28compute_skeys_for_join_frameEPKhjS1_tPhS2_($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $$0$$sroa_idx14 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 19661
 STACKTOP = STACKTOP + 16 | 0; //@line 19662
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 19662
 $7 = sp; //@line 19663
 $8 = $0 + 64 | 0; //@line 19664
 _mbedtls_aes_init($8); //@line 19665
 $9 = _mbedtls_aes_setkey_enc($8, $1, $2) | 0; //@line 19666
 if (!$9) {
  $11 = $7 + 9 | 0; //@line 19669
  HEAP8[$11 >> 0] = 0; //@line 19670
  HEAP8[$11 + 1 >> 0] = 0; //@line 19670
  HEAP8[$11 + 2 >> 0] = 0; //@line 19670
  HEAP8[$11 + 3 >> 0] = 0; //@line 19670
  HEAP8[$11 + 4 >> 0] = 0; //@line 19670
  HEAP8[$11 + 5 >> 0] = 0; //@line 19670
  HEAP8[$11 + 6 >> 0] = 0; //@line 19670
  HEAP8[$7 >> 0] = 1; //@line 19671
  $12 = $7 + 1 | 0; //@line 19672
  HEAP8[$12 >> 0] = HEAP8[$3 >> 0] | 0; //@line 19673
  HEAP8[$12 + 1 >> 0] = HEAP8[$3 + 1 >> 0] | 0; //@line 19673
  HEAP8[$12 + 2 >> 0] = HEAP8[$3 + 2 >> 0] | 0; //@line 19673
  HEAP8[$12 + 3 >> 0] = HEAP8[$3 + 3 >> 0] | 0; //@line 19673
  HEAP8[$12 + 4 >> 0] = HEAP8[$3 + 4 >> 0] | 0; //@line 19673
  HEAP8[$12 + 5 >> 0] = HEAP8[$3 + 5 >> 0] | 0; //@line 19673
  $$0$$sroa_idx14 = $7 + 7 | 0; //@line 19674
  HEAP8[$$0$$sroa_idx14 >> 0] = $4; //@line 19675
  HEAP8[$$0$$sroa_idx14 + 1 >> 0] = $4 >> 8; //@line 19675
  $13 = _mbedtls_aes_crypt_ecb($8, 1, $7, $5) | 0; //@line 19676
  if (!$13) {
   $15 = $7 + 9 | 0; //@line 19679
   HEAP8[$15 >> 0] = 0; //@line 19680
   HEAP8[$15 + 1 >> 0] = 0; //@line 19680
   HEAP8[$15 + 2 >> 0] = 0; //@line 19680
   HEAP8[$15 + 3 >> 0] = 0; //@line 19680
   HEAP8[$15 + 4 >> 0] = 0; //@line 19680
   HEAP8[$15 + 5 >> 0] = 0; //@line 19680
   HEAP8[$15 + 6 >> 0] = 0; //@line 19680
   HEAP8[$7 >> 0] = 2; //@line 19681
   HEAP8[$12 >> 0] = HEAP8[$3 >> 0] | 0; //@line 19682
   HEAP8[$12 + 1 >> 0] = HEAP8[$3 + 1 >> 0] | 0; //@line 19682
   HEAP8[$12 + 2 >> 0] = HEAP8[$3 + 2 >> 0] | 0; //@line 19682
   HEAP8[$12 + 3 >> 0] = HEAP8[$3 + 3 >> 0] | 0; //@line 19682
   HEAP8[$12 + 4 >> 0] = HEAP8[$3 + 4 >> 0] | 0; //@line 19682
   HEAP8[$12 + 5 >> 0] = HEAP8[$3 + 5 >> 0] | 0; //@line 19682
   HEAP8[$$0$$sroa_idx14 >> 0] = $4; //@line 19683
   HEAP8[$$0$$sroa_idx14 + 1 >> 0] = $4 >> 8; //@line 19683
   $$0 = _mbedtls_aes_crypt_ecb($8, 1, $7, $6) | 0; //@line 19685
  } else {
   $$0 = $13; //@line 19687
  }
 } else {
  $$0 = $9; //@line 19690
 }
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 19692
 _mbedtls_aes_free($8); //@line 19693
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 511; //@line 19696
  HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 19698
  HEAP32[$AsyncCtx + 8 >> 2] = $$0; //@line 19700
  sp = STACKTOP; //@line 19701
  STACKTOP = sp; //@line 19702
  return 0; //@line 19702
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 19704
  STACKTOP = sp; //@line 19705
  return $$0 | 0; //@line 19705
 }
 return 0; //@line 19707
}
function ___stdio_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $12 = 0, $13 = 0, $17 = 0, $20 = 0, $25 = 0, $27 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $44 = 0, $5 = 0, $7 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11397
 STACKTOP = STACKTOP + 48 | 0; //@line 11398
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 11398
 $vararg_buffer3 = sp + 16 | 0; //@line 11399
 $vararg_buffer = sp; //@line 11400
 $3 = sp + 32 | 0; //@line 11401
 $4 = $0 + 28 | 0; //@line 11402
 $5 = HEAP32[$4 >> 2] | 0; //@line 11403
 HEAP32[$3 >> 2] = $5; //@line 11404
 $7 = $0 + 20 | 0; //@line 11406
 $9 = (HEAP32[$7 >> 2] | 0) - $5 | 0; //@line 11408
 HEAP32[$3 + 4 >> 2] = $9; //@line 11409
 HEAP32[$3 + 8 >> 2] = $1; //@line 11411
 HEAP32[$3 + 12 >> 2] = $2; //@line 11413
 $12 = $9 + $2 | 0; //@line 11414
 $13 = $0 + 60 | 0; //@line 11415
 HEAP32[$vararg_buffer >> 2] = HEAP32[$13 >> 2]; //@line 11418
 HEAP32[$vararg_buffer + 4 >> 2] = $3; //@line 11420
 HEAP32[$vararg_buffer + 8 >> 2] = 2; //@line 11422
 $17 = ___syscall_ret(___syscall146(146, $vararg_buffer | 0) | 0) | 0; //@line 11424
 L1 : do {
  if (($12 | 0) == ($17 | 0)) {
   label = 3; //@line 11428
  } else {
   $$04756 = 2; //@line 11430
   $$04855 = $12; //@line 11430
   $$04954 = $3; //@line 11430
   $27 = $17; //@line 11430
   while (1) {
    if (($27 | 0) < 0) {
     break;
    }
    $$04855 = $$04855 - $27 | 0; //@line 11436
    $37 = HEAP32[$$04954 + 4 >> 2] | 0; //@line 11438
    $38 = $27 >>> 0 > $37 >>> 0; //@line 11439
    $$150 = $38 ? $$04954 + 8 | 0 : $$04954; //@line 11441
    $$1 = $$04756 + ($38 << 31 >> 31) | 0; //@line 11443
    $$0 = $27 - ($38 ? $37 : 0) | 0; //@line 11445
    HEAP32[$$150 >> 2] = (HEAP32[$$150 >> 2] | 0) + $$0; //@line 11448
    $44 = $$150 + 4 | 0; //@line 11449
    HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) - $$0; //@line 11452
    HEAP32[$vararg_buffer3 >> 2] = HEAP32[$13 >> 2]; //@line 11455
    HEAP32[$vararg_buffer3 + 4 >> 2] = $$150; //@line 11457
    HEAP32[$vararg_buffer3 + 8 >> 2] = $$1; //@line 11459
    $27 = ___syscall_ret(___syscall146(146, $vararg_buffer3 | 0) | 0) | 0; //@line 11461
    if (($$04855 | 0) == ($27 | 0)) {
     label = 3; //@line 11464
     break L1;
    } else {
     $$04756 = $$1; //@line 11467
     $$04954 = $$150; //@line 11467
    }
   }
   HEAP32[$0 + 16 >> 2] = 0; //@line 11471
   HEAP32[$4 >> 2] = 0; //@line 11472
   HEAP32[$7 >> 2] = 0; //@line 11473
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 32; //@line 11476
   if (($$04756 | 0) == 2) {
    $$051 = 0; //@line 11479
   } else {
    $$051 = $2 - (HEAP32[$$04954 + 4 >> 2] | 0) | 0; //@line 11484
   }
  }
 } while (0);
 if ((label | 0) == 3) {
  $20 = HEAP32[$0 + 44 >> 2] | 0; //@line 11490
  HEAP32[$0 + 16 >> 2] = $20 + (HEAP32[$0 + 48 >> 2] | 0); //@line 11495
  $25 = $20; //@line 11496
  HEAP32[$4 >> 2] = $25; //@line 11497
  HEAP32[$7 >> 2] = $25; //@line 11498
  $$051 = $2; //@line 11499
 }
 STACKTOP = sp; //@line 11501
 return $$051 | 0; //@line 11501
}
function __ZN7LoRaMacD2Ev__async_cb_284($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $29 = 0, $30 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 18868
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18870
 $4 = HEAP32[$2 + 1848 >> 2] | 0; //@line 18872
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 18877
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 18878
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 1836 | 0); //@line 18879
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 378; //@line 18882
   $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 18883
   HEAP32[$9 >> 2] = $2; //@line 18884
   sp = STACKTOP; //@line 18885
   return;
  }
  ___async_unwind = 0; //@line 18888
  HEAP32[$ReallocAsyncCtx3 >> 2] = 378; //@line 18889
  $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 18890
  HEAP32[$9 >> 2] = $2; //@line 18891
  sp = STACKTOP; //@line 18892
  return;
 }
 $11 = HEAP32[$2 + 1828 >> 2] | 0; //@line 18896
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 18901
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 18902
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 1816 | 0); //@line 18903
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 379; //@line 18906
   $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 18907
   HEAP32[$16 >> 2] = $2; //@line 18908
   sp = STACKTOP; //@line 18909
   return;
  }
  ___async_unwind = 0; //@line 18912
  HEAP32[$ReallocAsyncCtx4 >> 2] = 379; //@line 18913
  $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 18914
  HEAP32[$16 >> 2] = $2; //@line 18915
  sp = STACKTOP; //@line 18916
  return;
 }
 $18 = HEAP32[$2 + 1808 >> 2] | 0; //@line 18920
 if ($18 | 0) {
  $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 18925
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 18926
  FUNCTION_TABLE_vi[$22 & 1023]($2 + 1796 | 0); //@line 18927
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 380; //@line 18930
   $23 = $ReallocAsyncCtx5 + 4 | 0; //@line 18931
   HEAP32[$23 >> 2] = $2; //@line 18932
   sp = STACKTOP; //@line 18933
   return;
  }
  ___async_unwind = 0; //@line 18936
  HEAP32[$ReallocAsyncCtx5 >> 2] = 380; //@line 18937
  $23 = $ReallocAsyncCtx5 + 4 | 0; //@line 18938
  HEAP32[$23 >> 2] = $2; //@line 18939
  sp = STACKTOP; //@line 18940
  return;
 }
 $25 = HEAP32[$2 + 748 >> 2] | 0; //@line 18944
 if (!$25) {
  __ZN12LoRaPHYEU868D2Ev($2 + 4 | 0); //@line 18948
  return;
 }
 $29 = HEAP32[$25 + 8 >> 2] | 0; //@line 18953
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 18954
 FUNCTION_TABLE_vi[$29 & 1023]($2 + 736 | 0); //@line 18955
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 381; //@line 18958
  $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 18959
  HEAP32[$30 >> 2] = $2; //@line 18960
  sp = STACKTOP; //@line 18961
  return;
 }
 ___async_unwind = 0; //@line 18964
 HEAP32[$ReallocAsyncCtx6 >> 2] = 381; //@line 18965
 $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 18966
 HEAP32[$30 >> 2] = $2; //@line 18967
 sp = STACKTOP; //@line 18968
 return;
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_426($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $21 = 0, $27 = 0, $28 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 31250
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31252
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31254
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31256
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31258
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31260
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 31262
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 31264
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 31266
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 31268
 $19 = $2 + 1748 | 0; //@line 31270
 HEAP16[$19 >> 1] = $AsyncRetVal; //@line 31271
 $21 = HEAP16[$4 >> 1] | 0; //@line 31273
 HEAP16[$4 >> 1] = $21 + 1 << 16 >> 16; //@line 31275
 HEAP8[($21 & 65535) + ($2 + 1185) >> 0] = $AsyncRetVal; //@line 31278
 $27 = (HEAPU16[$19 >> 1] | 0) >>> 8 & 255; //@line 31281
 $28 = HEAP16[$4 >> 1] | 0; //@line 31282
 HEAP16[$4 >> 1] = $28 + 1 << 16 >> 16; //@line 31284
 HEAP8[($28 & 65535) + ($2 + 1185) >> 0] = $27; //@line 31287
 $34 = HEAP16[$4 >> 1] & 255; //@line 31290
 $36 = HEAP32[$2 + 1712 >> 2] | 0; //@line 31292
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 31293
 $37 = __ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj($2 + 756 | 0, $6, $34, $36, 128, $8) | 0; //@line 31294
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 427; //@line 31297
  $38 = $ReallocAsyncCtx3 + 4 | 0; //@line 31298
  HEAP32[$38 >> 2] = $8; //@line 31299
  $39 = $ReallocAsyncCtx3 + 8 | 0; //@line 31300
  HEAP32[$39 >> 2] = $4; //@line 31301
  $40 = $ReallocAsyncCtx3 + 12 | 0; //@line 31302
  HEAP32[$40 >> 2] = $2; //@line 31303
  $41 = $ReallocAsyncCtx3 + 16 | 0; //@line 31304
  HEAP32[$41 >> 2] = $10; //@line 31305
  $42 = $ReallocAsyncCtx3 + 20 | 0; //@line 31306
  HEAP8[$42 >> 0] = $12; //@line 31307
  $43 = $ReallocAsyncCtx3 + 24 | 0; //@line 31308
  HEAP32[$43 >> 2] = $14; //@line 31309
  $44 = $ReallocAsyncCtx3 + 28 | 0; //@line 31310
  HEAP32[$44 >> 2] = $16; //@line 31311
  sp = STACKTOP; //@line 31312
  return;
 }
 HEAP32[___async_retval >> 2] = $37; //@line 31316
 ___async_unwind = 0; //@line 31317
 HEAP32[$ReallocAsyncCtx3 >> 2] = 427; //@line 31318
 $38 = $ReallocAsyncCtx3 + 4 | 0; //@line 31319
 HEAP32[$38 >> 2] = $8; //@line 31320
 $39 = $ReallocAsyncCtx3 + 8 | 0; //@line 31321
 HEAP32[$39 >> 2] = $4; //@line 31322
 $40 = $ReallocAsyncCtx3 + 12 | 0; //@line 31323
 HEAP32[$40 >> 2] = $2; //@line 31324
 $41 = $ReallocAsyncCtx3 + 16 | 0; //@line 31325
 HEAP32[$41 >> 2] = $10; //@line 31326
 $42 = $ReallocAsyncCtx3 + 20 | 0; //@line 31327
 HEAP8[$42 >> 0] = $12; //@line 31328
 $43 = $ReallocAsyncCtx3 + 24 | 0; //@line 31329
 HEAP32[$43 >> 2] = $14; //@line 31330
 $44 = $ReallocAsyncCtx3 + 28 | 0; //@line 31331
 HEAP32[$44 >> 2] = $16; //@line 31332
 sp = STACKTOP; //@line 31333
 return;
}
function __ZN7LoRaMac18prepare_ongoing_txEhPKhthh($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $19 = 0, $20 = 0, $32 = 0, $48 = 0, $53 = 0, $55 = 0, $8 = 0, $AsyncCtx = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, sp = 0;
 sp = STACKTOP; //@line 15582
 STACKTOP = STACKTOP + 32 | 0; //@line 15583
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 15583
 $vararg_buffer2 = sp + 8 | 0; //@line 15584
 $vararg_buffer = sp; //@line 15585
 HEAP8[$0 + 2105 >> 0] = $1; //@line 15587
 $AsyncCtx = _emscripten_alloc_async_context(36, sp) | 0; //@line 15589
 $8 = __ZN7LoRaMac24get_max_possible_tx_sizeEh($0, $3 & 255) | 0; //@line 15590
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 448; //@line 15593
  HEAP16[$AsyncCtx + 4 >> 1] = $3; //@line 15595
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 15597
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer; //@line 15599
  HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 15601
  HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 15603
  HEAP8[$AsyncCtx + 24 >> 0] = $4; //@line 15605
  HEAP8[$AsyncCtx + 25 >> 0] = $1; //@line 15607
  HEAP8[$AsyncCtx + 26 >> 0] = $5; //@line 15609
  HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer2; //@line 15611
  HEAP32[$AsyncCtx + 32 >> 2] = $vararg_buffer2; //@line 15613
  sp = STACKTOP; //@line 15614
  STACKTOP = sp; //@line 15615
  return 0; //@line 15615
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 15617
 $19 = $8 & 255; //@line 15618
 $20 = $3 & 65535; //@line 15619
 if ($20 >>> 0 > $19 >>> 0) {
  HEAP32[$vararg_buffer >> 2] = $20; //@line 15622
  HEAP32[$vararg_buffer + 4 >> 2] = $19; //@line 15624
  _mbed_tracef(8, 12890, 13389, $vararg_buffer); //@line 15625
  HEAP16[$0 + 2372 >> 1] = $20 - $19; //@line 15629
  HEAP16[$0 + 2370 >> 1] = $8 & 255; //@line 15632
  _memcpy($0 + 2115 | 0, $2 | 0, $19 | 0) | 0; //@line 15634
 } else {
  HEAP16[$0 + 2370 >> 1] = $3; //@line 15637
  HEAP16[$0 + 2372 >> 1] = 0; //@line 15639
  if ($3 << 16 >> 16) {
   _memcpy($0 + 2115 | 0, $2 | 0, $20 | 0) | 0; //@line 15643
  }
 }
 $32 = $4 & 255; //@line 15646
 if ($32 & 1 | 0) {
  HEAP32[$0 + 2108 >> 2] = 0; //@line 15651
  HEAP8[$0 + 2112 >> 0] = $1; //@line 15653
  HEAP8[$0 + 2114 >> 0] = 1; //@line 15655
 }
 if ($32 & 2 | 0) {
  HEAP32[$0 + 2108 >> 2] = 1; //@line 15661
  HEAP8[$0 + 2112 >> 0] = $1; //@line 15663
  HEAP8[$0 + 2114 >> 0] = $5; //@line 15665
 }
 if (!($32 & 8)) {
  $55 = HEAP8[$0 + 2112 >> 0] | 0; //@line 15672
 } else {
  HEAP32[$0 + 2108 >> 2] = 3; //@line 15675
  HEAP8[$0 + 2112 >> 0] = $1; //@line 15677
  HEAP8[$0 + 2114 >> 0] = 1; //@line 15679
  $55 = $1; //@line 15680
 }
 $48 = $0 + 2370 | 0; //@line 15682
 $53 = HEAPU16[$0 + 2372 >> 1] | 0; //@line 15687
 HEAP32[$vararg_buffer2 >> 2] = HEAPU16[$48 >> 1]; //@line 15689
 HEAP32[$vararg_buffer2 + 4 >> 2] = $53; //@line 15691
 HEAP32[$vararg_buffer2 + 8 >> 2] = $55 & 255; //@line 15693
 _mbed_tracef(8, 12890, 13444, $vararg_buffer2); //@line 15694
 STACKTOP = sp; //@line 15696
 return HEAP16[$48 >> 1] | 0; //@line 15696
}
function __ZN7LoRaPHY19request_new_channelEaP16channel_params_t($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$013 = 0, $$079$i = 0, $10 = 0, $11 = 0, $12 = 0, $17 = 0, $19 = 0, $27 = 0, $32 = 0, $36 = 0, $37 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 19732
 if (!(HEAP8[$0 + 16 >> 0] | 0)) {
  $$013 = 0; //@line 19737
  return $$013 | 0; //@line 19738
 }
 $6 = HEAP32[$2 >> 2] | 0; //@line 19740
 if (!$6) {
  $10 = HEAP32[(HEAP32[$0 >> 2] | 0) + 64 >> 2] | 0; //@line 19745
  $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 19746
  $11 = FUNCTION_TABLE_iii[$10 & 31]($0, $1) | 0; //@line 19747
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 512; //@line 19750
   sp = STACKTOP; //@line 19751
   return 0; //@line 19752
  } else {
   _emscripten_free_async_context($AsyncCtx | 0); //@line 19754
   return ($11 ? 3 : 0) | 0; //@line 19756
  }
 }
 $12 = $0 + 76 | 0; //@line 19759
 L10 : do {
  if (!(HEAP8[$12 >> 0] | 0)) {
   $32 = -1; //@line 19764
  } else {
   $$079$i = 0; //@line 19766
   while (1) {
    $17 = HEAP32[(HEAP32[$0 >> 2] | 0) + 76 >> 2] | 0; //@line 19770
    $AsyncCtx3 = _emscripten_alloc_async_context(32, sp) | 0; //@line 19772
    $19 = FUNCTION_TABLE_iiii[$17 & 31]($0, $6, $$079$i & 255) | 0; //@line 19773
    if (___async) {
     break;
    }
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 19778
    if ($19) {
     $32 = $$079$i; //@line 19780
     break L10;
    }
    $27 = $$079$i + 1 | 0; //@line 19783
    if (($27 | 0) < (HEAPU8[$12 >> 0] | 0)) {
     $$079$i = $27; //@line 19788
    } else {
     $32 = -1; //@line 19790
     break L10;
    }
   }
   HEAP32[$AsyncCtx3 >> 2] = 513; //@line 19794
   HEAP32[$AsyncCtx3 + 4 >> 2] = $$079$i; //@line 19796
   HEAP32[$AsyncCtx3 + 8 >> 2] = $2; //@line 19798
   HEAP32[$AsyncCtx3 + 12 >> 2] = $0; //@line 19800
   HEAP8[$AsyncCtx3 + 16 >> 0] = $1; //@line 19802
   HEAP32[$AsyncCtx3 + 20 >> 2] = $12; //@line 19804
   HEAP32[$AsyncCtx3 + 24 >> 2] = $0; //@line 19806
   HEAP32[$AsyncCtx3 + 28 >> 2] = $6; //@line 19808
   sp = STACKTOP; //@line 19809
   return 0; //@line 19810
  }
 } while (0);
 HEAP8[$2 + 9 >> 0] = $32; //@line 19815
 $36 = HEAP32[(HEAP32[$0 >> 2] | 0) + 60 >> 2] | 0; //@line 19818
 $AsyncCtx6 = _emscripten_alloc_async_context(4, sp) | 0; //@line 19819
 $37 = FUNCTION_TABLE_iiii[$36 & 31]($0, $2, $1) | 0; //@line 19820
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 514; //@line 19823
  sp = STACKTOP; //@line 19824
  return 0; //@line 19825
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 19827
 switch ($37 | 0) {
 case -1004:
  {
   $$013 = 2; //@line 19830
   return $$013 | 0; //@line 19831
  }
 case -1005:
  {
   $$013 = 1; //@line 19835
   return $$013 | 0; //@line 19836
  }
 case -1006:
  {
   $$013 = 0; //@line 19840
   return $$013 | 0; //@line 19841
  }
 case 0:
  {
   $$013 = 3; //@line 19845
   return $$013 | 0; //@line 19846
  }
 default:
  {
   $$013 = 0; //@line 19850
   return $$013 | 0; //@line 19851
  }
 }
 return 0; //@line 19854
}
function __ZN12LoRaWANStack20process_transmissionEv($0) {
 $0 = $0 | 0;
 var $26 = 0, $30 = 0, $31 = 0, $33 = 0, $41 = 0, $AsyncCtx = 0, $AsyncCtx5 = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 10366
 STACKTOP = STACKTOP + 16 | 0; //@line 10367
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10367
 $vararg_buffer1 = sp + 8 | 0; //@line 10368
 _mbed_tracef(16, 12211, 12552, sp); //@line 10370
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 10371
 __ZN7LoRaMac16on_radio_tx_doneEv($0); //@line 10372
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 341; //@line 10375
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 10377
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 10379
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer1; //@line 10381
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer1; //@line 10383
  sp = STACKTOP; //@line 10384
  STACKTOP = sp; //@line 10385
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 10387
 HEAP8[$0 + 2895 >> 0] = 0; //@line 10389
 HEAP32[$0 + 2888 >> 2] = HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($0) | 0) + 20 >> 2]; //@line 10394
 HEAP8[$0 + 2893 >> 0] = HEAP8[(__ZNK7LoRaMac21get_mcps_confirmationEv($0) | 0) + 8 >> 0] | 0; //@line 10399
 HEAP8[$0 + 2892 >> 0] = HEAP8[(__ZNK7LoRaMac21get_mcps_confirmationEv($0) | 0) + 9 >> 0] | 0; //@line 10404
 HEAP32[$0 + 2884 >> 2] = HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($0) | 0) + 12 >> 2]; //@line 10409
 HEAP8[$0 + 2894 >> 0] = HEAP8[(__ZNK7LoRaMac21get_mcps_confirmationEv($0) | 0) + 11 >> 0] | 0; //@line 10414
 $26 = $0 + 2496 | 0; //@line 10415
 switch (HEAP32[$26 >> 2] | 0) {
 case 1:
  {
   HEAP32[$26 >> 2] = 4; //@line 10419
   STACKTOP = sp; //@line 10420
   return;
  }
 case 8:
  {
   $30 = (HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($0) | 0) >> 2] | 0) == 1; //@line 10426
   $31 = $0 + 2904 | 0; //@line 10427
   $33 = HEAP32[$31 >> 2] & -18; //@line 10429
   if ($30) {
    HEAP32[$31 >> 2] = $33 | 1; //@line 10432
    _mbed_tracef(16, 12211, 12575, $vararg_buffer1); //@line 10433
    HEAP32[$26 >> 2] = 9; //@line 10434
    STACKTOP = sp; //@line 10435
    return;
   }
   HEAP32[$31 >> 2] = $33 | 16; //@line 10438
   if ((__ZNK7LoRaMac16get_device_classEv($0) | 0) != 2) {
    STACKTOP = sp; //@line 10442
    return;
   }
   __ZN7LoRaMac21post_process_mcps_reqEv($0); //@line 10444
   $AsyncCtx5 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10445
   __ZN12LoRaWANStack26process_status_check_stateEv($0); //@line 10446
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 342; //@line 10449
    HEAP32[$AsyncCtx5 + 4 >> 2] = $0; //@line 10451
    HEAP32[$AsyncCtx5 + 8 >> 2] = $26; //@line 10453
    sp = STACKTOP; //@line 10454
    STACKTOP = sp; //@line 10455
    return;
   }
   _emscripten_free_async_context($AsyncCtx5 | 0); //@line 10457
   $41 = (__ZNK7LoRaMac16get_device_classEv($0) | 0) == 2; //@line 10459
   HEAP32[$26 >> 2] = $41 ? 5 : 2; //@line 10461
   STACKTOP = sp; //@line 10462
   return;
  }
 default:
  {
   STACKTOP = sp; //@line 10466
   return;
  }
 }
}
function __ZN12LoRaWANStack23mlme_indication_handlerEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $12 = 0, $17 = 0, $18 = 0, $21 = 0, $24 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 9785
 STACKTOP = STACKTOP + 32 | 0; //@line 9786
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 9786
 $1 = sp + 8 | 0; //@line 9788
 if ((HEAP32[(__ZNK7LoRaMac19get_mlme_indicationEv($0) | 0) >> 2] | 0) != 4) {
  _mbed_tracef(2, 12211, 12484, sp); //@line 9793
  STACKTOP = sp; //@line 9794
  return;
 }
 $5 = $0 + 2512 | 0; //@line 9796
 $6 = HEAP32[$5 >> 2] | 0; //@line 9797
 do {
  if ($6 | 0) {
   $10 = HEAP32[$0 + 3168 >> 2] | 0; //@line 9803
   $12 = HEAP32[$6 + 4 >> 2] | 0; //@line 9805
   $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 9806
   FUNCTION_TABLE_vii[$12 & 15]($1, $0 + 2500 | 0); //@line 9807
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 320; //@line 9810
    HEAP32[$AsyncCtx + 4 >> 2] = $5; //@line 9812
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 9814
    HEAP32[$AsyncCtx + 12 >> 2] = $10; //@line 9816
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 9818
    sp = STACKTOP; //@line 9819
    STACKTOP = sp; //@line 9820
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 9822
   $17 = $1 + 12 | 0; //@line 9824
   HEAP32[$17 >> 2] = HEAP32[$5 >> 2]; //@line 9825
   $AsyncCtx5 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9826
   $18 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($10, $1, 11) | 0; //@line 9827
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 321; //@line 9830
    HEAP32[$AsyncCtx5 + 4 >> 2] = $17; //@line 9832
    HEAP32[$AsyncCtx5 + 8 >> 2] = $1; //@line 9834
    sp = STACKTOP; //@line 9835
    STACKTOP = sp; //@line 9836
    return;
   }
   _emscripten_free_async_context($AsyncCtx5 | 0); //@line 9838
   $21 = HEAP32[$17 >> 2] | 0; //@line 9839
   do {
    if ($21 | 0) {
     $24 = HEAP32[$21 + 8 >> 2] | 0; //@line 9844
     $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9845
     FUNCTION_TABLE_vi[$24 & 1023]($1); //@line 9846
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 322; //@line 9849
      HEAP32[$AsyncCtx2 + 4 >> 2] = $18; //@line 9851
      HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 9853
      sp = STACKTOP; //@line 9854
      STACKTOP = sp; //@line 9855
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx2 | 0); //@line 9857
      break;
     }
    }
   } while (0);
   if (!$18) {
    $AsyncCtx9 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9864
    _mbed_assert_internal(12104, 12113, 775); //@line 9865
    if (___async) {
     HEAP32[$AsyncCtx9 >> 2] = 323; //@line 9868
     HEAP32[$AsyncCtx9 + 4 >> 2] = $1; //@line 9870
     sp = STACKTOP; //@line 9871
     STACKTOP = sp; //@line 9872
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx9 | 0); //@line 9874
     break;
    }
   }
  }
 } while (0);
 STACKTOP = sp; //@line 9880
 return;
}
function __ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb_376($0) {
 $0 = $0 | 0;
 var $$pre$phi6Z2D = 0, $$pre$phiZ2D = 0, $12 = 0, $14 = 0, $2 = 0, $20 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $32 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 26071
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26073
 $4 = HEAP8[$0 + 8 >> 0] & 1; //@line 26076
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26078
 $7 = $2 + 1168 | 0; //@line 26079
 $12 = (HEAP8[$2 + 1177 >> 0] | 0) != 0; //@line 26084
 if (!(HEAP32[$7 >> 2] | 0)) {
  if ($12) {
   $14 = $4 ? 3 : 5; //@line 26088
   HEAP32[$2 + 2056 >> 2] = $14; //@line 26089
   $$pre$phiZ2D = $14; //@line 26090
  } else {
   $$pre$phiZ2D = $4 ? 3 : 5; //@line 26093
  }
  HEAP32[$2 + 2092 >> 2] = $$pre$phiZ2D; //@line 26096
  if ((HEAP32[$6 >> 2] | 0) != 2) {
   $20 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj($2, HEAP32[$2 + 1780 >> 2] | 0) | 0; //@line 26102
   if ($20 >>> 0 < (HEAP32[$2 + 1776 >> 2] | 0) >>> 0) {
    label = 16; //@line 26107
   } else {
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 26110
    __ZN18LoRaWANTimeHandler4stopER13timer_event_t($2, $2 + 1836 | 0); //@line 26111
    if (___async) {
     HEAP32[$ReallocAsyncCtx3 >> 2] = 420; //@line 26114
     $25 = $ReallocAsyncCtx3 + 4 | 0; //@line 26115
     HEAP32[$25 >> 2] = $6; //@line 26116
     $26 = $ReallocAsyncCtx3 + 8 | 0; //@line 26117
     HEAP32[$26 >> 2] = $2; //@line 26118
     $27 = $ReallocAsyncCtx3 + 12 | 0; //@line 26119
     HEAP32[$27 >> 2] = $7; //@line 26120
     sp = STACKTOP; //@line 26121
     return;
    }
    ___async_unwind = 0; //@line 26124
    HEAP32[$ReallocAsyncCtx3 >> 2] = 420; //@line 26125
    $25 = $ReallocAsyncCtx3 + 4 | 0; //@line 26126
    HEAP32[$25 >> 2] = $6; //@line 26127
    $26 = $ReallocAsyncCtx3 + 8 | 0; //@line 26128
    HEAP32[$26 >> 2] = $2; //@line 26129
    $27 = $ReallocAsyncCtx3 + 12 | 0; //@line 26130
    HEAP32[$27 >> 2] = $7; //@line 26131
    sp = STACKTOP; //@line 26132
    return;
   }
  }
 } else {
  if ($12) {
   $29 = $4 ? 4 : 6; //@line 26139
   HEAP32[$2 + 2056 >> 2] = $29; //@line 26140
   $$pre$phi6Z2D = $29; //@line 26141
  } else {
   $$pre$phi6Z2D = $4 ? 4 : 6; //@line 26144
  }
  HEAP32[$2 + 2092 >> 2] = $$pre$phi6Z2D; //@line 26147
  label = 16; //@line 26148
 }
 if ((label | 0) == 16) {
  if ((HEAP32[$6 >> 2] | 0) != 2) {
   HEAP32[___async_retval >> 2] = HEAP32[$7 >> 2]; //@line 26156
   return;
  }
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 26160
 __ZN7LoRaMac15open_rx2_windowEv($2); //@line 26161
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 421; //@line 26164
  $32 = $ReallocAsyncCtx + 4 | 0; //@line 26165
  HEAP32[$32 >> 2] = $7; //@line 26166
  sp = STACKTOP; //@line 26167
  return;
 }
 ___async_unwind = 0; //@line 26170
 HEAP32[$ReallocAsyncCtx >> 2] = 421; //@line 26171
 $32 = $ReallocAsyncCtx + 4 | 0; //@line 26172
 HEAP32[$32 >> 2] = $7; //@line 26173
 sp = STACKTOP; //@line 26174
 return;
}
function __ZN7LoRaMac12prepare_joinEPK15lorawan_connectb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $10 = 0, $13 = 0, $21 = 0, $22 = 0, $25 = 0, $27 = 0, $30 = 0, $32 = 0, $35 = 0, $4 = 0, $5 = 0, $7 = 0, dest = 0, src = 0, stop = 0;
 if (!$1) {
  HEAP32[$0 + 1752 >> 2] = 0; //@line 16123
  HEAP32[$0 + 1756 >> 2] = 0; //@line 16125
  dest = $0 + 1716 | 0; //@line 16127
  stop = dest + 32 | 0; //@line 16127
  do {
   HEAP8[dest >> 0] = 0; //@line 16127
   dest = dest + 1 | 0; //@line 16127
  } while ((dest | 0) < (stop | 0));
  $$0 = 0; //@line 16128
  return $$0 | 0; //@line 16129
 }
 $4 = $1 + 4 | 0; //@line 16131
 if ($2) {
  $5 = HEAP32[$4 >> 2] | 0; //@line 16133
  if (!$5) {
   $$0 = -1003; //@line 16136
   return $$0 | 0; //@line 16137
  }
  $7 = $1 + 8 | 0; //@line 16139
  if (!(HEAP32[$7 >> 2] | 0)) {
   $$0 = -1003; //@line 16143
   return $$0 | 0; //@line 16144
  }
  $10 = $1 + 12 | 0; //@line 16146
  if (!(HEAP32[$10 >> 2] | 0)) {
   $$0 = -1003; //@line 16150
   return $$0 | 0; //@line 16151
  }
  $13 = $1 + 16 | 0; //@line 16153
  if (!(HEAP8[$13 >> 0] | 0)) {
   $$0 = -1003; //@line 16157
   return $$0 | 0; //@line 16158
  }
  HEAP32[$0 + 1704 >> 2] = $5; //@line 16161
  HEAP32[$0 + 1708 >> 2] = HEAP32[$7 >> 2]; //@line 16164
  HEAP32[$0 + 1712 >> 2] = HEAP32[$10 >> 2]; //@line 16167
  $21 = HEAP8[$13 >> 0] | 0; //@line 16168
  $22 = $0 + 1700 | 0; //@line 16169
  HEAP8[$22 >> 0] = $21; //@line 16170
  $25 = __ZN7LoRaPHY21verify_nb_join_trialsEh($0 + 4 | 0, HEAP8[$13 >> 0] | 0) | 0; //@line 16173
  HEAP8[$22 >> 0] = $25 ? $21 : 12; //@line 16175
  HEAP8[$0 + 1701 >> 0] = 0; //@line 16177
  $$0 = 0; //@line 16178
  return $$0 | 0; //@line 16179
 } else {
  $27 = $1 + 8 | 0; //@line 16181
  if (!(HEAP32[$27 >> 2] | 0)) {
   $$0 = -1003; //@line 16185
   return $$0 | 0; //@line 16186
  }
  $30 = HEAP32[$4 >> 2] | 0; //@line 16188
  if (!$30) {
   $$0 = -1003; //@line 16191
   return $$0 | 0; //@line 16192
  }
  $32 = $1 + 12 | 0; //@line 16194
  if (!(HEAP32[$32 >> 2] | 0)) {
   $$0 = -1003; //@line 16198
   return $$0 | 0; //@line 16199
  }
  $35 = $1 + 16 | 0; //@line 16201
  if (!(HEAP32[$35 >> 2] | 0)) {
   $$0 = -1003; //@line 16205
   return $$0 | 0; //@line 16206
  }
  HEAP32[$0 + 1752 >> 2] = $30; //@line 16209
  HEAP32[$0 + 1756 >> 2] = HEAP32[$27 >> 2]; //@line 16212
  dest = $0 + 1716 | 0; //@line 16215
  src = HEAP32[$32 >> 2] | 0; //@line 16215
  stop = dest + 16 | 0; //@line 16215
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 16215
   dest = dest + 1 | 0; //@line 16215
   src = src + 1 | 0; //@line 16215
  } while ((dest | 0) < (stop | 0));
  dest = $0 + 1732 | 0; //@line 16218
  src = HEAP32[$35 >> 2] | 0; //@line 16218
  stop = dest + 16 | 0; //@line 16218
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 16218
   dest = dest + 1 | 0; //@line 16218
   src = src + 1 | 0; //@line 16218
  } while ((dest | 0) < (stop | 0));
  $$0 = 0; //@line 16219
  return $$0 | 0; //@line 16220
 }
 return 0; //@line 16222
}
function __ZN7LoRaMac15open_rx1_windowEv($0) {
 $0 = $0 | 0;
 var $17 = 0, $22 = 0, $34 = 0, $36 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 15155
 STACKTOP = STACKTOP + 16 | 0; //@line 15156
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15156
 _mbed_tracef(16, 12890, 13242, sp); //@line 15158
 HEAP8[$0 + 2377 >> 0] = 0; //@line 15160
 $AsyncCtx10 = _emscripten_alloc_async_context(8, sp) | 0; //@line 15162
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1816 | 0); //@line 15163
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 436; //@line 15166
  HEAP32[$AsyncCtx10 + 4 >> 2] = $0; //@line 15168
  sp = STACKTOP; //@line 15169
  STACKTOP = sp; //@line 15170
  return;
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 15172
 HEAP32[$0 + 1168 >> 2] = 0; //@line 15174
 $7 = $0 + 1940 | 0; //@line 15177
 HEAP8[$7 >> 0] = HEAP8[$0 + 1182 >> 0] | 0; //@line 15178
 HEAP8[$0 + 1943 >> 0] = HEAP8[$0 + 1909 >> 0] | 0; //@line 15182
 HEAP8[$0 + 1956 >> 0] = HEAP8[$0 + 1921 >> 0] | 0; //@line 15186
 HEAP8[$0 + 1957 >> 0] = HEAP8[$0 + 1173 >> 0] | 0; //@line 15190
 $17 = $0 + 1958 | 0; //@line 15191
 HEAP8[$17 >> 0] = 0; //@line 15192
 HEAP32[$0 + 1960 >> 2] = 0; //@line 15194
 $22 = $0 + 4 | 0; //@line 15198
 do {
  if ((HEAP32[$0 + 2380 >> 2] | 0) == 2) {
   $AsyncCtx2 = _emscripten_alloc_async_context(20, sp) | 0; //@line 15201
   __ZN7LoRaPHY20put_radio_to_standbyEv($22); //@line 15202
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 437; //@line 15205
    HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 15207
    HEAP32[$AsyncCtx2 + 8 >> 2] = $22; //@line 15209
    HEAP32[$AsyncCtx2 + 12 >> 2] = $7; //@line 15211
    HEAP32[$AsyncCtx2 + 16 >> 2] = $17; //@line 15213
    sp = STACKTOP; //@line 15214
    STACKTOP = sp; //@line 15215
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 15217
    break;
   }
  }
 } while (0);
 HEAP8[$0 + 2026 >> 0] = HEAP8[$0 + 1941 >> 0] | 0; //@line 15225
 $AsyncCtx6 = _emscripten_alloc_async_context(16, sp) | 0; //@line 15226
 __ZN7LoRaPHY9rx_configEP18rx_config_params_t($22, $7) | 0; //@line 15227
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 438; //@line 15230
  HEAP32[$AsyncCtx6 + 4 >> 2] = $17; //@line 15232
  HEAP32[$AsyncCtx6 + 8 >> 2] = $0; //@line 15234
  HEAP32[$AsyncCtx6 + 12 >> 2] = $22; //@line 15236
  sp = STACKTOP; //@line 15237
  STACKTOP = sp; //@line 15238
  return;
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 15240
 $34 = (HEAP8[$17 >> 0] | 0) != 0; //@line 15242
 $36 = HEAP32[$0 + 1888 >> 2] | 0; //@line 15244
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 15245
 __ZN7LoRaPHY15setup_rx_windowEbj($22, $34, $36); //@line 15246
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 439; //@line 15249
  sp = STACKTOP; //@line 15250
  STACKTOP = sp; //@line 15251
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 15253
  STACKTOP = sp; //@line 15254
  return;
 }
}
function __ZN7LoRaMac19on_radio_rx_timeoutEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$pre$phi6Z2D = 0, $$pre$phiZ2D = 0, $14 = 0, $16 = 0, $2 = 0, $22 = 0, $31 = 0, $35 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 13953
 $2 = $0 + 2380 | 0; //@line 13954
 do {
  if ((HEAP32[$2 >> 2] | 0) != 2) {
   $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 13960
   __ZN7LoRaPHY18put_radio_to_sleepEv($0 + 4 | 0); //@line 13961
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 419; //@line 13964
    HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 13966
    HEAP8[$AsyncCtx2 + 8 >> 0] = $1 & 1; //@line 13969
    HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 13971
    sp = STACKTOP; //@line 13972
    return 0; //@line 13973
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 13975
    break;
   }
  }
 } while (0);
 $9 = $0 + 1168 | 0; //@line 13980
 $14 = (HEAP8[$0 + 1177 >> 0] | 0) != 0; //@line 13985
 do {
  if (!(HEAP32[$9 >> 2] | 0)) {
   if ($14) {
    $16 = $1 ? 3 : 5; //@line 13990
    HEAP32[$0 + 2056 >> 2] = $16; //@line 13991
    $$pre$phiZ2D = $16; //@line 13992
   } else {
    $$pre$phiZ2D = $1 ? 3 : 5; //@line 13995
   }
   HEAP32[$0 + 2092 >> 2] = $$pre$phiZ2D; //@line 13998
   if ((HEAP32[$2 >> 2] | 0) != 2) {
    $22 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj($0, HEAP32[$0 + 1780 >> 2] | 0) | 0; //@line 14004
    if ($22 >>> 0 < (HEAP32[$0 + 1776 >> 2] | 0) >>> 0) {
     label = 18; //@line 14009
    } else {
     $AsyncCtx6 = _emscripten_alloc_async_context(16, sp) | 0; //@line 14012
     __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1836 | 0); //@line 14013
     if (___async) {
      HEAP32[$AsyncCtx6 >> 2] = 420; //@line 14016
      HEAP32[$AsyncCtx6 + 4 >> 2] = $2; //@line 14018
      HEAP32[$AsyncCtx6 + 8 >> 2] = $0; //@line 14020
      HEAP32[$AsyncCtx6 + 12 >> 2] = $9; //@line 14022
      sp = STACKTOP; //@line 14023
      return 0; //@line 14024
     } else {
      _emscripten_free_async_context($AsyncCtx6 | 0); //@line 14026
      label = 18; //@line 14027
      break;
     }
    }
   }
  } else {
   if ($14) {
    $31 = $1 ? 4 : 6; //@line 14035
    HEAP32[$0 + 2056 >> 2] = $31; //@line 14036
    $$pre$phi6Z2D = $31; //@line 14037
   } else {
    $$pre$phi6Z2D = $1 ? 4 : 6; //@line 14040
   }
   HEAP32[$0 + 2092 >> 2] = $$pre$phi6Z2D; //@line 14043
   label = 18; //@line 14044
  }
 } while (0);
 if ((label | 0) == 18) {
  if ((HEAP32[$2 >> 2] | 0) != 2) {
   $35 = HEAP32[$9 >> 2] | 0; //@line 14051
   return $35 | 0; //@line 14052
  }
 }
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 14055
 __ZN7LoRaMac15open_rx2_windowEv($0); //@line 14056
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 421; //@line 14059
  HEAP32[$AsyncCtx + 4 >> 2] = $9; //@line 14061
  sp = STACKTOP; //@line 14062
  return 0; //@line 14063
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 14065
 $35 = HEAP32[$9 >> 2] | 0; //@line 14066
 return $35 | 0; //@line 14067
}
function __ZN7LoRaMac15open_rx1_windowEv__async_cb_362($0) {
 $0 = $0 | 0;
 var $16 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $29 = 0, $30 = 0, $31 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 25017
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25019
 HEAP32[$2 + 1168 >> 2] = 0; //@line 25021
 $6 = $2 + 1940 | 0; //@line 25024
 HEAP8[$6 >> 0] = HEAP8[$2 + 1182 >> 0] | 0; //@line 25025
 HEAP8[$2 + 1943 >> 0] = HEAP8[$2 + 1909 >> 0] | 0; //@line 25029
 HEAP8[$2 + 1956 >> 0] = HEAP8[$2 + 1921 >> 0] | 0; //@line 25033
 HEAP8[$2 + 1957 >> 0] = HEAP8[$2 + 1173 >> 0] | 0; //@line 25037
 $16 = $2 + 1958 | 0; //@line 25038
 HEAP8[$16 >> 0] = 0; //@line 25039
 HEAP32[$2 + 1960 >> 2] = 0; //@line 25041
 $21 = $2 + 4 | 0; //@line 25045
 if ((HEAP32[$2 + 2380 >> 2] | 0) == 2) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 25047
  __ZN7LoRaPHY20put_radio_to_standbyEv($21); //@line 25048
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 437; //@line 25051
   $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 25052
   HEAP32[$22 >> 2] = $2; //@line 25053
   $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 25054
   HEAP32[$23 >> 2] = $21; //@line 25055
   $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 25056
   HEAP32[$24 >> 2] = $6; //@line 25057
   $25 = $ReallocAsyncCtx2 + 16 | 0; //@line 25058
   HEAP32[$25 >> 2] = $16; //@line 25059
   sp = STACKTOP; //@line 25060
   return;
  }
  ___async_unwind = 0; //@line 25063
  HEAP32[$ReallocAsyncCtx2 >> 2] = 437; //@line 25064
  $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 25065
  HEAP32[$22 >> 2] = $2; //@line 25066
  $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 25067
  HEAP32[$23 >> 2] = $21; //@line 25068
  $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 25069
  HEAP32[$24 >> 2] = $6; //@line 25070
  $25 = $ReallocAsyncCtx2 + 16 | 0; //@line 25071
  HEAP32[$25 >> 2] = $16; //@line 25072
  sp = STACKTOP; //@line 25073
  return;
 } else {
  HEAP8[$2 + 2026 >> 0] = HEAP8[$2 + 1941 >> 0] | 0; //@line 25079
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 25080
  __ZN7LoRaPHY9rx_configEP18rx_config_params_t($21, $6) | 0; //@line 25081
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 438; //@line 25084
   $29 = $ReallocAsyncCtx3 + 4 | 0; //@line 25085
   HEAP32[$29 >> 2] = $16; //@line 25086
   $30 = $ReallocAsyncCtx3 + 8 | 0; //@line 25087
   HEAP32[$30 >> 2] = $2; //@line 25088
   $31 = $ReallocAsyncCtx3 + 12 | 0; //@line 25089
   HEAP32[$31 >> 2] = $21; //@line 25090
   sp = STACKTOP; //@line 25091
   return;
  }
  ___async_unwind = 0; //@line 25094
  HEAP32[$ReallocAsyncCtx3 >> 2] = 438; //@line 25095
  $29 = $ReallocAsyncCtx3 + 4 | 0; //@line 25096
  HEAP32[$29 >> 2] = $16; //@line 25097
  $30 = $ReallocAsyncCtx3 + 8 | 0; //@line 25098
  HEAP32[$30 >> 2] = $2; //@line 25099
  $31 = $ReallocAsyncCtx3 + 12 | 0; //@line 25100
  HEAP32[$31 >> 2] = $21; //@line 25101
  sp = STACKTOP; //@line 25102
  return;
 }
}
function __ZN4mbed7Timeout7handlerEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $12 = 0, $13 = 0, $14 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $25 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 2623
 STACKTOP = STACKTOP + 16 | 0; //@line 2624
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 2624
 $1 = sp; //@line 2625
 $2 = $0 + 52 | 0; //@line 2626
 $3 = HEAP32[$2 >> 2] | 0; //@line 2627
 do {
  if (!$3) {
   $13 = 0; //@line 2631
  } else {
   $7 = HEAP32[$3 + 4 >> 2] | 0; //@line 2635
   $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 2636
   FUNCTION_TABLE_vii[$7 & 15]($1, $0 + 40 | 0); //@line 2637
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 116; //@line 2640
    HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 2642
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 2644
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 2646
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 2648
    sp = STACKTOP; //@line 2649
    STACKTOP = sp; //@line 2650
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 2652
    $13 = HEAP32[$2 >> 2] | 0; //@line 2654
    break;
   }
  }
 } while (0);
 $12 = $1 + 12 | 0; //@line 2659
 HEAP32[$12 >> 2] = $13; //@line 2660
 __ZN4mbed6Ticker6detachEv($0); //@line 2661
 $14 = HEAP32[$12 >> 2] | 0; //@line 2662
 do {
  if (!$14) {
   $AsyncCtx9 = _emscripten_alloc_async_context(12, sp) | 0; //@line 2666
   _mbed_assert_internal(15010, 15015, 528); //@line 2667
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 117; //@line 2670
    HEAP32[$AsyncCtx9 + 4 >> 2] = $12; //@line 2672
    HEAP32[$AsyncCtx9 + 8 >> 2] = $1; //@line 2674
    sp = STACKTOP; //@line 2675
    STACKTOP = sp; //@line 2676
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx9 | 0); //@line 2678
    $19 = HEAP32[$12 >> 2] | 0; //@line 2680
    break;
   }
  } else {
   $19 = $14; //@line 2684
  }
 } while (0);
 $18 = HEAP32[$19 >> 2] | 0; //@line 2687
 $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 2688
 FUNCTION_TABLE_vi[$18 & 1023]($1); //@line 2689
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 118; //@line 2692
  HEAP32[$AsyncCtx2 + 4 >> 2] = $12; //@line 2694
  HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 2696
  sp = STACKTOP; //@line 2697
  STACKTOP = sp; //@line 2698
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 2700
 $22 = HEAP32[$12 >> 2] | 0; //@line 2701
 if (!$22) {
  STACKTOP = sp; //@line 2704
  return;
 }
 $25 = HEAP32[$22 + 8 >> 2] | 0; //@line 2707
 $AsyncCtx6 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2708
 FUNCTION_TABLE_vi[$25 & 1023]($1); //@line 2709
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 119; //@line 2712
  HEAP32[$AsyncCtx6 + 4 >> 2] = $1; //@line 2714
  sp = STACKTOP; //@line 2715
  STACKTOP = sp; //@line 2716
  return;
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 2718
 STACKTOP = sp; //@line 2719
 return;
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_251($0) {
 $0 = $0 | 0;
 var $$pre$i$i70 = 0, $10 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, sp = 0;
 sp = STACKTOP; //@line 17076
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17082
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17084
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17086
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17088
 $$pre$i$i70 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 17089
 $13 = $$pre$i$i70; //@line 17090
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = $$pre$i$i70; //@line 17091
 if (!$$pre$i$i70) {
  __ZN7LoRaMac17bind_radio_driverER9LoRaRadio($8, $10); //@line 17094
  $23 = HEAP32[(HEAP32[$10 >> 2] | 0) + 72 >> 2] | 0; //@line 17097
  $ReallocAsyncCtx16 = _emscripten_realloc_async_context(16) | 0; //@line 17098
  FUNCTION_TABLE_vi[$23 & 1023]($10); //@line 17099
  if (___async) {
   HEAP32[$ReallocAsyncCtx16 >> 2] = 200; //@line 17102
   $24 = $ReallocAsyncCtx16 + 4 | 0; //@line 17103
   HEAP32[$24 >> 2] = $10; //@line 17104
   $25 = $ReallocAsyncCtx16 + 8 | 0; //@line 17105
   HEAP32[$25 >> 2] = $12; //@line 17106
   $26 = $ReallocAsyncCtx16 + 12 | 0; //@line 17107
   HEAP32[$26 >> 2] = $10; //@line 17108
   sp = STACKTOP; //@line 17109
   return;
  }
  ___async_unwind = 0; //@line 17112
  HEAP32[$ReallocAsyncCtx16 >> 2] = 200; //@line 17113
  $24 = $ReallocAsyncCtx16 + 4 | 0; //@line 17114
  HEAP32[$24 >> 2] = $10; //@line 17115
  $25 = $ReallocAsyncCtx16 + 8 | 0; //@line 17116
  HEAP32[$25 >> 2] = $12; //@line 17117
  $26 = $ReallocAsyncCtx16 + 12 | 0; //@line 17118
  HEAP32[$26 >> 2] = $10; //@line 17119
  sp = STACKTOP; //@line 17120
  return;
 } else {
  $16 = HEAP32[$13 + 8 >> 2] | 0; //@line 17124
  $ReallocAsyncCtx15 = _emscripten_realloc_async_context(20) | 0; //@line 17125
  FUNCTION_TABLE_vi[$16 & 1023]($6); //@line 17126
  if (___async) {
   HEAP32[$ReallocAsyncCtx15 >> 2] = 199; //@line 17129
   $17 = $ReallocAsyncCtx15 + 4 | 0; //@line 17130
   HEAP32[$17 >> 2] = $6; //@line 17131
   $18 = $ReallocAsyncCtx15 + 8 | 0; //@line 17132
   HEAP32[$18 >> 2] = $8; //@line 17133
   $19 = $ReallocAsyncCtx15 + 12 | 0; //@line 17134
   HEAP32[$19 >> 2] = $10; //@line 17135
   $20 = $ReallocAsyncCtx15 + 16 | 0; //@line 17136
   HEAP32[$20 >> 2] = $12; //@line 17137
   sp = STACKTOP; //@line 17138
   return;
  }
  ___async_unwind = 0; //@line 17141
  HEAP32[$ReallocAsyncCtx15 >> 2] = 199; //@line 17142
  $17 = $ReallocAsyncCtx15 + 4 | 0; //@line 17143
  HEAP32[$17 >> 2] = $6; //@line 17144
  $18 = $ReallocAsyncCtx15 + 8 | 0; //@line 17145
  HEAP32[$18 >> 2] = $8; //@line 17146
  $19 = $ReallocAsyncCtx15 + 12 | 0; //@line 17147
  HEAP32[$19 >> 2] = $10; //@line 17148
  $20 = $ReallocAsyncCtx15 + 16 | 0; //@line 17149
  HEAP32[$20 >> 2] = $12; //@line 17150
  sp = STACKTOP; //@line 17151
  return;
 }
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv($0) {
 $0 = $0 | 0;
 var $15 = 0, $30 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 13836
 $AsyncCtx15 = _emscripten_alloc_async_context(12, sp) | 0; //@line 13838
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1816 | 0); //@line 13839
 if (___async) {
  HEAP32[$AsyncCtx15 >> 2] = 414; //@line 13842
  HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 13844
  HEAP32[$AsyncCtx15 + 8 >> 2] = $0; //@line 13846
  sp = STACKTOP; //@line 13847
  return;
 }
 _emscripten_free_async_context($AsyncCtx15 | 0); //@line 13850
 $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 13852
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1836 | 0); //@line 13853
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 415; //@line 13856
  HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 13858
  HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 13860
  sp = STACKTOP; //@line 13861
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 13864
 $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 13866
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1856 | 0); //@line 13867
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 416; //@line 13870
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 13872
  sp = STACKTOP; //@line 13873
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 13876
 do {
  if ((HEAP32[$0 + 2380 >> 2] | 0) == 2) {
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 13882
   __ZN7LoRaMac15open_rx2_windowEv($0); //@line 13883
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 417; //@line 13886
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 13888
    sp = STACKTOP; //@line 13889
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 13892
    break;
   }
  } else {
   $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 13897
   __ZN7LoRaPHY18put_radio_to_sleepEv($0 + 4 | 0); //@line 13898
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 418; //@line 13901
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 13903
    sp = STACKTOP; //@line 13904
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 13907
    break;
   }
  }
 } while (0);
 $15 = $0 + 2056 | 0; //@line 13912
 HEAP32[$15 >> 2] = 2; //@line 13913
 HEAP32[$0 + 2092 >> 2] = 2; //@line 13915
 __ZN14LoRaMacCommand20clear_command_bufferEv($0 + 476 | 0); //@line 13917
 HEAP8[$0 + 2063 >> 0] = HEAP8[$0 + 1699 >> 0] | 0; //@line 13921
 HEAP8[$0 + 2062 >> 0] = 0; //@line 13923
 HEAP32[$0 + 2064 >> 2] = 0; //@line 13925
 HEAP8[$0 + 1180 >> 0] = 0; //@line 13927
 HEAP32[$15 >> 2] = 0; //@line 13928
 if ((HEAP32[$0 + 2052 >> 2] | 0) == 1) {
  return;
 }
 if (HEAP8[$0 + 1174 >> 0] | 0) {
  return;
 }
 $30 = $0 + 1760 | 0; //@line 13941
 HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + 1; //@line 13944
 return;
}
function _mbedtls_cipher_update__async_cb_110($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$1 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $37 = 0, $4 = 0, $46 = 0, $48 = 0, $49 = 0, $51 = 0, $52 = 0, $53 = 0, $55 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 27330
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27332
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27334
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27336
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27338
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27340
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27342
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 27344
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 27346
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 27348
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 27350
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 27352
 if ($AsyncRetVal | 0) {
  $$1 = $AsyncRetVal; //@line 27355
  $55 = ___async_retval; //@line 27356
  HEAP32[$55 >> 2] = $$1; //@line 27357
  return;
 }
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + $4; //@line 27362
 $25 = $6 + $4 | 0; //@line 27363
 HEAP32[$8 >> 2] = 0; //@line 27364
 $26 = $10 + $12 | 0; //@line 27365
 $27 = $14 - $12 | 0; //@line 27366
 if (!$27) {
  $$1 = 0; //@line 27369
  $55 = ___async_retval; //@line 27370
  HEAP32[$55 >> 2] = $$1; //@line 27371
  return;
 }
 $29 = ($27 >>> 0) % ($4 >>> 0) | 0; //@line 27374
 if (!$29) {
  if (!(HEAP32[$16 >> 2] | 0)) {
   $$0 = (HEAP32[$18 + 12 >> 2] | 0) == 0 ? 0 : $4; //@line 27384
  } else {
   $$0 = 0; //@line 27386
  }
 } else {
  $$0 = $29; //@line 27389
 }
 $37 = $27 - $$0 | 0; //@line 27392
 _memcpy($18 + 20 | 0, $26 + $37 | 0, $$0 | 0) | 0; //@line 27394
 HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + $$0; //@line 27397
 if (!$37) {
  $$1 = 0; //@line 27400
  $55 = ___async_retval; //@line 27401
  HEAP32[$55 >> 2] = $$1; //@line 27402
  return;
 }
 $46 = HEAP32[(HEAP32[(HEAP32[$20 >> 2] | 0) + 28 >> 2] | 0) + 8 >> 2] | 0; //@line 27409
 $48 = HEAP32[$18 + 60 >> 2] | 0; //@line 27411
 $49 = HEAP32[$16 >> 2] | 0; //@line 27412
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 27414
 $51 = FUNCTION_TABLE_iiiiiii[$46 & 3]($48, $49, $37, $18 + 40 | 0, $26, $25) | 0; //@line 27415
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 586; //@line 27418
  $52 = $ReallocAsyncCtx3 + 4 | 0; //@line 27419
  HEAP32[$52 >> 2] = $2; //@line 27420
  $53 = $ReallocAsyncCtx3 + 8 | 0; //@line 27421
  HEAP32[$53 >> 2] = $37; //@line 27422
  sp = STACKTOP; //@line 27423
  return;
 }
 HEAP32[___async_retval >> 2] = $51; //@line 27427
 ___async_unwind = 0; //@line 27428
 HEAP32[$ReallocAsyncCtx3 >> 2] = 586; //@line 27429
 $52 = $ReallocAsyncCtx3 + 4 | 0; //@line 27430
 HEAP32[$52 >> 2] = $2; //@line 27431
 $53 = $ReallocAsyncCtx3 + 8 | 0; //@line 27432
 HEAP32[$53 >> 2] = $37; //@line 27433
 sp = STACKTOP; //@line 27434
 return;
}
function __ZN12radio_eventsD2Ev__async_cb_290($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 19435
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19437
 $4 = HEAP32[$2 + 60 >> 2] | 0; //@line 19439
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 19444
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 19445
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 48 | 0); //@line 19446
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 176; //@line 19449
   $9 = $ReallocAsyncCtx4 + 4 | 0; //@line 19450
   HEAP32[$9 >> 2] = $2; //@line 19451
   sp = STACKTOP; //@line 19452
   return;
  }
  ___async_unwind = 0; //@line 19455
  HEAP32[$ReallocAsyncCtx4 >> 2] = 176; //@line 19456
  $9 = $ReallocAsyncCtx4 + 4 | 0; //@line 19457
  HEAP32[$9 >> 2] = $2; //@line 19458
  sp = STACKTOP; //@line 19459
  return;
 }
 $11 = HEAP32[$2 + 44 >> 2] | 0; //@line 19463
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 19468
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 19469
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 32 | 0); //@line 19470
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 177; //@line 19473
   $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 19474
   HEAP32[$16 >> 2] = $2; //@line 19475
   sp = STACKTOP; //@line 19476
   return;
  }
  ___async_unwind = 0; //@line 19479
  HEAP32[$ReallocAsyncCtx5 >> 2] = 177; //@line 19480
  $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 19481
  HEAP32[$16 >> 2] = $2; //@line 19482
  sp = STACKTOP; //@line 19483
  return;
 }
 $18 = HEAP32[$2 + 28 >> 2] | 0; //@line 19487
 if ($18 | 0) {
  $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 19492
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 19493
  FUNCTION_TABLE_vi[$22 & 1023]($2 + 16 | 0); //@line 19494
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 178; //@line 19497
   $23 = $ReallocAsyncCtx6 + 4 | 0; //@line 19498
   HEAP32[$23 >> 2] = $2; //@line 19499
   sp = STACKTOP; //@line 19500
   return;
  }
  ___async_unwind = 0; //@line 19503
  HEAP32[$ReallocAsyncCtx6 >> 2] = 178; //@line 19504
  $23 = $ReallocAsyncCtx6 + 4 | 0; //@line 19505
  HEAP32[$23 >> 2] = $2; //@line 19506
  sp = STACKTOP; //@line 19507
  return;
 }
 $25 = HEAP32[$2 + 12 >> 2] | 0; //@line 19511
 if (!$25) {
  return;
 }
 $28 = HEAP32[$25 + 8 >> 2] | 0; //@line 19517
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 19518
 FUNCTION_TABLE_vi[$28 & 1023]($2); //@line 19519
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 179; //@line 19522
  sp = STACKTOP; //@line 19523
  return;
 }
 ___async_unwind = 0; //@line 19526
 HEAP32[$ReallocAsyncCtx7 >> 2] = 179; //@line 19527
 sp = STACKTOP; //@line 19528
 return;
}
function __ZN12LoRaWANStack9handle_rxEPhtRhRib__async_cb($0) {
 $0 = $0 | 0;
 var $$0$off0 = 0, $$031 = 0, $$1 = 0, $$pre$phi39Z2D = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $32 = 0, $35 = 0, $36 = 0, $40 = 0, $45 = 0, $6 = 0, $8 = 0, label = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25162
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25167
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25169
 $10 = HEAP16[$0 + 20 >> 1] | 0; //@line 25171
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25173
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 25175
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 25177
 $18 = HEAP8[$2 + 2853 >> 0] | 0; //@line 25179
 if (HEAP8[$0 + 8 >> 0] & 1) {
  if ($18 << 24 >> 24 != (HEAP8[$6 >> 0] | 0)) {
   $$1 = -1001; //@line 25184
   $45 = ___async_retval; //@line 25185
   HEAP16[$45 >> 1] = $$1; //@line 25186
   return;
  }
  if (!(HEAP32[$8 >> 2] & 1)) {
   $$1 = -1001; //@line 25193
   $45 = ___async_retval; //@line 25194
   HEAP16[$45 >> 1] = $$1; //@line 25195
   return;
  }
 }
 HEAP8[$6 >> 0] = $18; //@line 25199
 HEAP32[$8 >> 2] = 1; //@line 25200
 $24 = $2 + 2856 | 0; //@line 25201
 $25 = HEAP32[$24 >> 2] | 0; //@line 25202
 $26 = $2 + 2860 | 0; //@line 25203
 $27 = HEAP16[$26 >> 1] | 0; //@line 25204
 $28 = $27 & 65535; //@line 25205
 $30 = $2 + 2882 | 0; //@line 25207
 $32 = (HEAP16[$30 >> 1] | 0) == 0; //@line 25209
 if (($27 & 65535) > ($10 & 65535)) {
  if ($32) {
   $35 = $2 + 2880 | 0; //@line 25214
   HEAP16[$35 >> 1] = $28 - $16; //@line 25215
   HEAP16[$30 >> 1] = $10; //@line 25216
   _memcpy($12 | 0, $25 | 0, $16 | 0) | 0; //@line 25217
   $$0$off0 = 0; //@line 25218
   $$031 = $10; //@line 25218
   $$pre$phi39Z2D = $35; //@line 25218
  } else {
   label = 10; //@line 25220
  }
 } else {
  if ($32) {
   $36 = $2 + 2880 | 0; //@line 25224
   HEAP16[$36 >> 1] = 0; //@line 25225
   HEAP16[$30 >> 1] = 0; //@line 25226
   _memcpy($12 | 0, $25 | 0, $28 | 0) | 0; //@line 25227
   $$0$off0 = 1; //@line 25228
   $$031 = $27; //@line 25228
   $$pre$phi39Z2D = $36; //@line 25228
  } else {
   label = 10; //@line 25230
  }
 }
 if ((label | 0) == 10) {
  $$0$off0 = 0; //@line 25235
  $$031 = $27; //@line 25235
  $$pre$phi39Z2D = $2 + 2880 | 0; //@line 25235
 }
 if (HEAP16[$$pre$phi39Z2D >> 1] | 0) {
  $40 = HEAP16[$2 + 2882 >> 1] | 0; //@line 25241
  if ($40 << 16 >> 16) {
   _memcpy($12 | 0, $25 + ($40 & 65535) | 0, $$031 & 65535 | 0) | 0; //@line 25247
  }
 }
 if (!$$0$off0) {
  $$1 = $$031; //@line 25251
  $45 = ___async_retval; //@line 25252
  HEAP16[$45 >> 1] = $$1; //@line 25253
  return;
 }
 HEAP32[$24 >> 2] = 0; //@line 25256
 HEAP16[$26 >> 1] = 0; //@line 25257
 HEAP8[$14 >> 0] = 0; //@line 25258
 $$1 = $$031; //@line 25259
 $45 = ___async_retval; //@line 25260
 HEAP16[$45 >> 1] = $$1; //@line 25261
 return;
}
function __ZN7LoRaMac21handle_retransmissionEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$0$i = 0, $1 = 0, $2 = 0, $21 = 0, $28 = 0, $31 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 14100
 STACKTOP = STACKTOP + 16 | 0; //@line 14101
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14101
 $vararg_buffer = sp; //@line 14102
 $1 = sp + 5 | 0; //@line 14103
 $2 = sp + 4 | 0; //@line 14104
 if (!(HEAP8[$0 + 2376 >> 0] | 0)) {
  if (!(HEAP32[$0 + 2088 >> 2] | 0)) {
   HEAP8[$0 + 1877 >> 0] = __ZN7LoRaPHY16get_alternate_DREh($0 + 4 | 0, (HEAPU8[$0 + 1701 >> 0] | 0) + 1 & 255) | 0; //@line 14121
   HEAP8[$1 >> 0] = 0; //@line 14122
   HEAP8[$2 >> 0] = HEAP8[$0 + 1936 >> 0] << 7; //@line 14126
   HEAP8[$0 + 1180 >> 0] = 1; //@line 14128
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 14129
   $21 = __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt($0, $1, $2, 0, 0, 0) | 0; //@line 14130
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 423; //@line 14133
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 14135
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 14137
    HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer; //@line 14139
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 14141
    HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 14143
    sp = STACKTOP; //@line 14144
    STACKTOP = sp; //@line 14145
    return 0; //@line 14145
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 14147
   do {
    if (!$21) {
     $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 14151
     $28 = __ZN7LoRaMac11schedule_txEv($0) | 0; //@line 14152
     if (___async) {
      HEAP32[$AsyncCtx7 >> 2] = 424; //@line 14155
      HEAP32[$AsyncCtx7 + 4 >> 2] = $2; //@line 14157
      HEAP32[$AsyncCtx7 + 8 >> 2] = $1; //@line 14159
      sp = STACKTOP; //@line 14160
      STACKTOP = sp; //@line 14161
      return 0; //@line 14161
     } else {
      _emscripten_free_async_context($AsyncCtx7 | 0); //@line 14163
      $$0$i = $28; //@line 14164
      break;
     }
    } else {
     HEAP32[$vararg_buffer >> 2] = $21; //@line 14168
     _mbed_tracef(2, 12890, 12979, $vararg_buffer); //@line 14169
     $$0$i = $21; //@line 14170
    }
   } while (0);
   $$0 = $$0$i; //@line 14173
   STACKTOP = sp; //@line 14174
   return $$0 | 0; //@line 14174
  }
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 14177
 $31 = __ZN7LoRaMac11schedule_txEv($0) | 0; //@line 14178
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 425; //@line 14181
  sp = STACKTOP; //@line 14182
  STACKTOP = sp; //@line 14183
  return 0; //@line 14183
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 14185
 $$0 = $31; //@line 14186
 STACKTOP = sp; //@line 14187
 return $$0 | 0; //@line 14187
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_147($0) {
 $0 = $0 | 0;
 var $$expand_i1_val = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 29586
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29588
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29590
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29592
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29594
 if ((HEAP32[___async_retval >> 2] | 0) < ($2 | 0)) {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 29599
  $10 = __ZN4mbed5Timer7read_msEv($4) | 0; //@line 29600
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 65; //@line 29603
   $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 29604
   HEAP32[$11 >> 2] = $2; //@line 29605
   $12 = $ReallocAsyncCtx5 + 8 | 0; //@line 29606
   HEAP32[$12 >> 2] = $4; //@line 29607
   $13 = $ReallocAsyncCtx5 + 12 | 0; //@line 29608
   HEAP32[$13 >> 2] = $6; //@line 29609
   $14 = $ReallocAsyncCtx5 + 16 | 0; //@line 29610
   HEAP32[$14 >> 2] = $8; //@line 29611
   sp = STACKTOP; //@line 29612
   return;
  }
  HEAP32[___async_retval >> 2] = $10; //@line 29616
  ___async_unwind = 0; //@line 29617
  HEAP32[$ReallocAsyncCtx5 >> 2] = 65; //@line 29618
  $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 29619
  HEAP32[$11 >> 2] = $2; //@line 29620
  $12 = $ReallocAsyncCtx5 + 8 | 0; //@line 29621
  HEAP32[$12 >> 2] = $4; //@line 29622
  $13 = $ReallocAsyncCtx5 + 12 | 0; //@line 29623
  HEAP32[$13 >> 2] = $6; //@line 29624
  $14 = $ReallocAsyncCtx5 + 16 | 0; //@line 29625
  HEAP32[$14 >> 2] = $8; //@line 29626
  sp = STACKTOP; //@line 29627
  return;
 } else {
  $19 = HEAP32[(HEAP32[$6 >> 2] | 0) + 8 >> 2] | 0; //@line 29632
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 29633
  FUNCTION_TABLE_vi[$19 & 1023]($6); //@line 29634
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 66; //@line 29637
   $20 = $ReallocAsyncCtx2 + 4 | 0; //@line 29638
   HEAP32[$20 >> 2] = $4; //@line 29639
   $21 = $ReallocAsyncCtx2 + 8 | 0; //@line 29640
   HEAP32[$21 >> 2] = $8; //@line 29641
   $22 = $ReallocAsyncCtx2 + 12 | 0; //@line 29642
   $$expand_i1_val = 1; //@line 29643
   HEAP8[$22 >> 0] = $$expand_i1_val; //@line 29644
   sp = STACKTOP; //@line 29645
   return;
  }
  ___async_unwind = 0; //@line 29648
  HEAP32[$ReallocAsyncCtx2 >> 2] = 66; //@line 29649
  $20 = $ReallocAsyncCtx2 + 4 | 0; //@line 29650
  HEAP32[$20 >> 2] = $4; //@line 29651
  $21 = $ReallocAsyncCtx2 + 8 | 0; //@line 29652
  HEAP32[$21 >> 2] = $8; //@line 29653
  $22 = $ReallocAsyncCtx2 + 12 | 0; //@line 29654
  $$expand_i1_val = 1; //@line 29655
  HEAP8[$22 >> 0] = $$expand_i1_val; //@line 29656
  sp = STACKTOP; //@line 29657
  return;
 }
}
function __ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$026 = 0, $10 = 0, $15 = 0, $21 = 0.0, $24 = 0.0, $27 = 0, $34 = 0, $35 = 0, $38 = 0, $43 = 0, $46 = 0, $48 = 0, $50 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 21808
 $6 = HEAP32[$0 + 124 >> 2] | 0; //@line 21812
 $7 = $1 + 2 | 0; //@line 21813
 $8 = HEAP8[$7 >> 0] | 0; //@line 21814
 $10 = HEAPU8[$1 >> 0] | 0; //@line 21816
 $15 = HEAP8[(HEAP32[$0 + 72 >> 2] | 0) + ((HEAPU8[$6 + ($10 * 12 | 0) + 9 >> 0] | 0) * 24 | 0) + 2 >> 0] | 0; //@line 21821
 if ($8 << 24 >> 24 > $15 << 24 >> 24) {
  HEAP8[$7 >> 0] = $15; //@line 21824
  $27 = $15; //@line 21825
 } else {
  $27 = $8; //@line 21827
 }
 if (!$2) {
  $$0 = HEAP32[$6 + ($10 * 12 | 0) >> 2] | 0; //@line 21833
 } else {
  $$0 = $2; //@line 21835
 }
 $21 = +HEAPF32[$1 + 4 >> 2]; //@line 21838
 if ($21 > 0.0) {
  $24 = +HEAPF32[$1 + 8 >> 2]; //@line 21842
  if ($24 > 0.0) {
   $$026 = ~~+Math_floor(+($21 - +($27 << 24 >> 24 << 1 >>> 0) - $24)); //@line 21852
  } else {
   $$026 = $27; //@line 21854
  }
 } else {
  $$026 = $27; //@line 21857
 }
 $34 = $0 + 4 | 0; //@line 21859
 $35 = HEAP32[$34 >> 2] | 0; //@line 21860
 $38 = HEAP32[(HEAP32[$35 >> 2] | 0) + 72 >> 2] | 0; //@line 21863
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 21864
 FUNCTION_TABLE_vi[$38 & 1023]($35); //@line 21865
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 538; //@line 21868
  HEAP32[$AsyncCtx + 4 >> 2] = $34; //@line 21870
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 21872
  HEAP32[$AsyncCtx + 12 >> 2] = $$0; //@line 21874
  HEAP8[$AsyncCtx + 16 >> 0] = $$026; //@line 21876
  sp = STACKTOP; //@line 21877
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 21880
 $43 = HEAP32[$34 >> 2] | 0; //@line 21881
 $46 = HEAP32[(HEAP32[$43 >> 2] | 0) + 68 >> 2] | 0; //@line 21884
 $48 = HEAP16[$1 + 12 >> 1] | 0; //@line 21886
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 21887
 FUNCTION_TABLE_viiii[$46 & 7]($43, $$0, $$026, $48); //@line 21888
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 539; //@line 21891
  HEAP32[$AsyncCtx2 + 4 >> 2] = $34; //@line 21893
  sp = STACKTOP; //@line 21894
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 21897
 $50 = HEAP32[$34 >> 2] | 0; //@line 21898
 $53 = HEAP32[(HEAP32[$50 >> 2] | 0) + 76 >> 2] | 0; //@line 21901
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 21902
 FUNCTION_TABLE_vi[$53 & 1023]($50); //@line 21903
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 540; //@line 21906
  sp = STACKTOP; //@line 21907
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 21910
  return;
 }
}
function __ZN12LoRaWANStack23process_connected_stateEv__async_cb_199($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 33501
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33505
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33507
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33509
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 33511
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 33512
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 33516
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 33517
  FUNCTION_TABLE_vi[$13 & 1023]($4); //@line 33518
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 335; //@line 33521
   $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 33522
   HEAP32[$14 >> 2] = $AsyncRetVal; //@line 33523
   $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 33524
   HEAP32[$15 >> 2] = $4; //@line 33525
   $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 33526
   HEAP32[$16 >> 2] = $6; //@line 33527
   $17 = $ReallocAsyncCtx2 + 16 | 0; //@line 33528
   HEAP32[$17 >> 2] = $8; //@line 33529
   sp = STACKTOP; //@line 33530
   return;
  }
  ___async_unwind = 0; //@line 33533
  HEAP32[$ReallocAsyncCtx2 >> 2] = 335; //@line 33534
  $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 33535
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 33536
  $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 33537
  HEAP32[$15 >> 2] = $4; //@line 33538
  $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 33539
  HEAP32[$16 >> 2] = $6; //@line 33540
  $17 = $ReallocAsyncCtx2 + 16 | 0; //@line 33541
  HEAP32[$17 >> 2] = $8; //@line 33542
  sp = STACKTOP; //@line 33543
  return;
 }
 if ($AsyncRetVal | 0) {
  HEAP32[$6 >> 2] = HEAP32[$6 >> 2] | 4; //@line 33550
  HEAP32[$8 + 2496 >> 2] = 2; //@line 33552
  return;
 }
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 33555
 _mbed_assert_internal(12104, 12113, 775); //@line 33556
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 336; //@line 33559
  $19 = $ReallocAsyncCtx4 + 4 | 0; //@line 33560
  HEAP32[$19 >> 2] = $4; //@line 33561
  $20 = $ReallocAsyncCtx4 + 8 | 0; //@line 33562
  HEAP32[$20 >> 2] = $6; //@line 33563
  $21 = $ReallocAsyncCtx4 + 12 | 0; //@line 33564
  HEAP32[$21 >> 2] = $8; //@line 33565
  sp = STACKTOP; //@line 33566
  return;
 }
 ___async_unwind = 0; //@line 33569
 HEAP32[$ReallocAsyncCtx4 >> 2] = 336; //@line 33570
 $19 = $ReallocAsyncCtx4 + 4 | 0; //@line 33571
 HEAP32[$19 >> 2] = $4; //@line 33572
 $20 = $ReallocAsyncCtx4 + 8 | 0; //@line 33573
 HEAP32[$20 >> 2] = $6; //@line 33574
 $21 = $ReallocAsyncCtx4 + 12 | 0; //@line 33575
 HEAP32[$21 >> 2] = $8; //@line 33576
 sp = STACKTOP; //@line 33577
 return;
}
function __ZN7LoRaPHY12get_next_ADREbRaS0_Rj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$1$i$i = 0, $$1$lcssa$i$i = 0, $$18$i$i = 0, $$19$i$i = 0, $11 = 0, $14 = 0, $22 = 0, $28 = 0, $34 = 0, $35 = 0, $36 = 0, $44 = 0, $45 = 0, $47 = 0, $60 = 0, $63 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 22910
 $7 = HEAPU8[$0 + 24 >> 0] | 0; //@line 22913
 $8 = $0 + 25 | 0; //@line 22914
 $11 = (HEAPU8[$8 >> 0] | 0) + $7 | 0; //@line 22917
 $14 = $0 + 26 | 0; //@line 22920
 if ((HEAP8[$2 >> 0] | 0) == (HEAPU8[$14 >> 0] | 0)) {
  HEAP32[$4 >> 2] = 0; //@line 22925
  $$0 = 0; //@line 22926
  return $$0 | 0; //@line 22927
 }
 if ((HEAP32[$4 >> 2] | 0) >>> 0 < $7 >>> 0) {
  $$0 = 0; //@line 22932
  return $$0 | 0; //@line 22933
 }
 HEAP8[$3 >> 0] = HEAP8[$0 + 22 >> 0] | 0; //@line 22937
 $22 = HEAP32[$4 >> 2] | 0; //@line 22938
 if ($22 >>> 0 < $11 >>> 0) {
  $$0 = 1; //@line 22941
  return $$0 | 0; //@line 22942
 }
 if ((($22 >>> 0) % ((HEAPU8[$8 >> 0] | 0) >>> 0) | 0 | 0) != 1) {
  $$0 = 1; //@line 22949
  return $$0 | 0; //@line 22950
 }
 $28 = HEAP8[$2 >> 0] | 0; //@line 22952
 $34 = $0 + 88 | 0; //@line 22960
 $35 = $28 & 255; //@line 22961
 $36 = HEAP8[((HEAP8[$0 + 128 >> 0] & 1) == 0 ? $14 : $0 + 35 | 0) >> 0] | 0; //@line 22962
 $$18$i$i = ($35 | 0) == ($36 | 0) ? $28 : $35 + 255 & 255; //@line 22966
 L14 : do {
  if (($$18$i$i & 255 | 0) == ($36 | 0)) {
   $$1$lcssa$i$i = $$18$i$i; //@line 22971
  } else {
   $44 = HEAPU8[$0 + 92 >> 0] | 0; //@line 22975
   $$19$i$i = $$18$i$i; //@line 22976
   while (1) {
    $45 = $$19$i$i << 24 >> 24; //@line 22978
    if (($45 | 0) < ($44 | 0)) {
     if (HEAP8[(HEAP32[$34 >> 2] | 0) + $45 >> 0] | 0) {
      $$1$lcssa$i$i = $$19$i$i; //@line 22986
      break L14;
     }
    }
    $47 = $$19$i$i & 255; //@line 22990
    $$1$i$i = ($47 | 0) == ($36 | 0) ? $$19$i$i : $47 + 255 & 255; //@line 22994
    if (($$1$i$i & 255 | 0) == ($36 | 0)) {
     $$1$lcssa$i$i = $$1$i$i; //@line 22998
     break;
    } else {
     $$19$i$i = $$1$i$i; //@line 23001
    }
   }
  }
 } while (0);
 HEAP8[$2 >> 0] = $$1$lcssa$i$i; //@line 23006
 $60 = ($$1$lcssa$i$i << 24 >> 24 | 0) != (HEAPU8[$14 >> 0] | 0); //@line 23010
 if ($60 | $1 ^ 1) {
  $$0 = $60; //@line 23014
  return $$0 | 0; //@line 23015
 }
 $63 = HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0; //@line 23019
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 23020
 FUNCTION_TABLE_vi[$63 & 1023]($0); //@line 23021
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 560; //@line 23024
  sp = STACKTOP; //@line 23025
  return 0; //@line 23026
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 23028
 $$0 = 0; //@line 23029
 return $$0 | 0; //@line 23030
}
function _mbed_error_vfprintf($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$01213 = 0, $$014 = 0, $2 = 0, $24 = 0, $3 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0, $$01213$looptemp = 0;
 sp = STACKTOP; //@line 6826
 STACKTOP = STACKTOP + 128 | 0; //@line 6827
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 6827
 $2 = sp; //@line 6828
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 6829
 $3 = _vsnprintf($2, 128, $0, $1) | 0; //@line 6830
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 653; //@line 6833
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 6835
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 6837
  sp = STACKTOP; //@line 6838
  STACKTOP = sp; //@line 6839
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 6841
 if (($3 | 0) <= 0) {
  STACKTOP = sp; //@line 6844
  return;
 }
 if (!(HEAP32[5091] | 0)) {
  _serial_init(20368, 2, 3); //@line 6849
  $$01213 = 0; //@line 6850
  $$014 = 0; //@line 6850
 } else {
  $$01213 = 0; //@line 6852
  $$014 = 0; //@line 6852
 }
 while (1) {
  $$01213$looptemp = $$01213;
  $$01213 = HEAP8[$2 + $$014 >> 0] | 0; //@line 6856
  if (!($$01213$looptemp << 24 >> 24 == 13 | $$01213 << 24 >> 24 != 10)) {
   $AsyncCtx7 = _emscripten_alloc_async_context(24, sp) | 0; //@line 6861
   _serial_putc(20368, 13); //@line 6862
   if (___async) {
    label = 8; //@line 6865
    break;
   }
   _emscripten_free_async_context($AsyncCtx7 | 0); //@line 6868
  }
  $AsyncCtx3 = _emscripten_alloc_async_context(24, sp) | 0; //@line 6871
  _serial_putc(20368, $$01213 << 24 >> 24); //@line 6872
  if (___async) {
   label = 11; //@line 6875
   break;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 6878
  $24 = $$014 + 1 | 0; //@line 6879
  if (($24 | 0) == ($3 | 0)) {
   label = 13; //@line 6882
   break;
  } else {
   $$014 = $24; //@line 6885
  }
 }
 if ((label | 0) == 8) {
  HEAP32[$AsyncCtx7 >> 2] = 654; //@line 6889
  HEAP8[$AsyncCtx7 + 4 >> 0] = $$01213; //@line 6891
  HEAP32[$AsyncCtx7 + 8 >> 2] = $$014; //@line 6893
  HEAP32[$AsyncCtx7 + 12 >> 2] = $3; //@line 6895
  HEAP32[$AsyncCtx7 + 16 >> 2] = $2; //@line 6897
  HEAP32[$AsyncCtx7 + 20 >> 2] = $2; //@line 6899
  sp = STACKTOP; //@line 6900
  STACKTOP = sp; //@line 6901
  return;
 } else if ((label | 0) == 11) {
  HEAP32[$AsyncCtx3 >> 2] = 655; //@line 6904
  HEAP32[$AsyncCtx3 + 4 >> 2] = $$014; //@line 6906
  HEAP32[$AsyncCtx3 + 8 >> 2] = $3; //@line 6908
  HEAP32[$AsyncCtx3 + 12 >> 2] = $2; //@line 6910
  HEAP8[$AsyncCtx3 + 16 >> 0] = $$01213; //@line 6912
  HEAP32[$AsyncCtx3 + 20 >> 2] = $2; //@line 6914
  sp = STACKTOP; //@line 6915
  STACKTOP = sp; //@line 6916
  return;
 } else if ((label | 0) == 13) {
  STACKTOP = sp; //@line 6919
  return;
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_215($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 12449
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12453
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12455
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 12457
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12459
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 12461
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 12463
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 12465
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 12467
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 12469
 $22 = HEAP8[$0 + 44 >> 0] & 1; //@line 12472
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 12474
 do {
  if ((HEAP32[$0 + 4 >> 2] | 0) > 1) {
   $26 = $4 + 24 | 0; //@line 12478
   $27 = $6 + 24 | 0; //@line 12479
   $28 = $4 + 8 | 0; //@line 12480
   $29 = $6 + 54 | 0; //@line 12481
   if (!(HEAP8[$29 >> 0] | 0)) {
    if (!(HEAP8[$10 >> 0] | 0)) {
     if (HEAP8[$14 >> 0] | 0) {
      if (!(HEAP32[$28 >> 2] & 1)) {
       break;
      }
     }
    } else {
     if ((HEAP32[$27 >> 2] | 0) == 1) {
      break;
     }
     if (!(HEAP32[$28 >> 2] & 2)) {
      break;
     }
    }
    HEAP8[$10 >> 0] = 0; //@line 12511
    HEAP8[$14 >> 0] = 0; //@line 12512
    $ReallocAsyncCtx = _emscripten_realloc_async_context(60) | 0; //@line 12513
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($26, $6, $16, $18, $20, $22); //@line 12514
    if (!___async) {
     ___async_unwind = 0; //@line 12517
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 735; //@line 12519
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $26; //@line 12521
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $24; //@line 12523
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $29; //@line 12525
    HEAP8[$ReallocAsyncCtx + 16 >> 0] = $8; //@line 12527
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 12529
    HEAP8[$ReallocAsyncCtx + 24 >> 0] = $12; //@line 12531
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 12533
    HEAP32[$ReallocAsyncCtx + 32 >> 2] = $27; //@line 12535
    HEAP32[$ReallocAsyncCtx + 36 >> 2] = $28; //@line 12537
    HEAP32[$ReallocAsyncCtx + 40 >> 2] = $6; //@line 12539
    HEAP32[$ReallocAsyncCtx + 44 >> 2] = $16; //@line 12541
    HEAP32[$ReallocAsyncCtx + 48 >> 2] = $18; //@line 12543
    HEAP32[$ReallocAsyncCtx + 52 >> 2] = $20; //@line 12545
    HEAP8[$ReallocAsyncCtx + 56 >> 0] = $22 & 1; //@line 12548
    sp = STACKTOP; //@line 12549
    return;
   }
  }
 } while (0);
 HEAP8[$10 >> 0] = $8; //@line 12554
 HEAP8[$14 >> 0] = $12; //@line 12555
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $4 = 0, $43 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 12333
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12337
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12339
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 12341
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12343
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 12345
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 12347
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 12349
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 12351
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 12353
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 12355
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 12357
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 12359
 $28 = HEAP8[$0 + 56 >> 0] & 1; //@line 12362
 $43 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 12363
 do {
  if ($43 >>> 0 < $4 >>> 0) {
   if (!(HEAP8[$6 >> 0] | 0)) {
    if (!(HEAP8[$10 >> 0] | 0)) {
     if (HEAP8[$14 >> 0] | 0) {
      if (!(HEAP32[$18 >> 2] & 1)) {
       break;
      }
     }
    } else {
     if ((HEAP32[$16 >> 2] | 0) == 1) {
      break;
     }
     if (!(HEAP32[$18 >> 2] & 2)) {
      break;
     }
    }
    HEAP8[$10 >> 0] = 0; //@line 12396
    HEAP8[$14 >> 0] = 0; //@line 12397
    $ReallocAsyncCtx = _emscripten_realloc_async_context(60) | 0; //@line 12398
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($43, $20, $22, $24, $26, $28); //@line 12399
    if (!___async) {
     ___async_unwind = 0; //@line 12402
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 735; //@line 12404
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $43; //@line 12406
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 12408
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 12410
    HEAP8[$ReallocAsyncCtx + 16 >> 0] = $8; //@line 12412
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 12414
    HEAP8[$ReallocAsyncCtx + 24 >> 0] = $12; //@line 12416
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 12418
    HEAP32[$ReallocAsyncCtx + 32 >> 2] = $16; //@line 12420
    HEAP32[$ReallocAsyncCtx + 36 >> 2] = $18; //@line 12422
    HEAP32[$ReallocAsyncCtx + 40 >> 2] = $20; //@line 12424
    HEAP32[$ReallocAsyncCtx + 44 >> 2] = $22; //@line 12426
    HEAP32[$ReallocAsyncCtx + 48 >> 2] = $24; //@line 12428
    HEAP32[$ReallocAsyncCtx + 52 >> 2] = $26; //@line 12430
    HEAP8[$ReallocAsyncCtx + 56 >> 0] = $28 & 1; //@line 12433
    sp = STACKTOP; //@line 12434
    return;
   }
  }
 } while (0);
 HEAP8[$10 >> 0] = $8; //@line 12439
 HEAP8[$14 >> 0] = $12; //@line 12440
 return;
}
function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0, aligned_dest_end = 0, block_aligned_dest_end = 0, dest_end = 0;
 if ((num | 0) >= 8192) {
  return _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0; //@line 32019
 }
 ret = dest | 0; //@line 32022
 dest_end = dest + num | 0; //@line 32023
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if (!num) return ret | 0; //@line 32027
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 32028
   dest = dest + 1 | 0; //@line 32029
   src = src + 1 | 0; //@line 32030
   num = num - 1 | 0; //@line 32031
  }
  aligned_dest_end = dest_end & -4 | 0; //@line 32033
  block_aligned_dest_end = aligned_dest_end - 64 | 0; //@line 32034
  while ((dest | 0) <= (block_aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 32036
   HEAP32[dest + 4 >> 2] = HEAP32[src + 4 >> 2]; //@line 32037
   HEAP32[dest + 8 >> 2] = HEAP32[src + 8 >> 2]; //@line 32038
   HEAP32[dest + 12 >> 2] = HEAP32[src + 12 >> 2]; //@line 32039
   HEAP32[dest + 16 >> 2] = HEAP32[src + 16 >> 2]; //@line 32040
   HEAP32[dest + 20 >> 2] = HEAP32[src + 20 >> 2]; //@line 32041
   HEAP32[dest + 24 >> 2] = HEAP32[src + 24 >> 2]; //@line 32042
   HEAP32[dest + 28 >> 2] = HEAP32[src + 28 >> 2]; //@line 32043
   HEAP32[dest + 32 >> 2] = HEAP32[src + 32 >> 2]; //@line 32044
   HEAP32[dest + 36 >> 2] = HEAP32[src + 36 >> 2]; //@line 32045
   HEAP32[dest + 40 >> 2] = HEAP32[src + 40 >> 2]; //@line 32046
   HEAP32[dest + 44 >> 2] = HEAP32[src + 44 >> 2]; //@line 32047
   HEAP32[dest + 48 >> 2] = HEAP32[src + 48 >> 2]; //@line 32048
   HEAP32[dest + 52 >> 2] = HEAP32[src + 52 >> 2]; //@line 32049
   HEAP32[dest + 56 >> 2] = HEAP32[src + 56 >> 2]; //@line 32050
   HEAP32[dest + 60 >> 2] = HEAP32[src + 60 >> 2]; //@line 32051
   dest = dest + 64 | 0; //@line 32052
   src = src + 64 | 0; //@line 32053
  }
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 32056
   dest = dest + 4 | 0; //@line 32057
   src = src + 4 | 0; //@line 32058
  }
 } else {
  aligned_dest_end = dest_end - 4 | 0; //@line 32062
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 32064
   HEAP8[dest + 1 >> 0] = HEAP8[src + 1 >> 0] | 0; //@line 32065
   HEAP8[dest + 2 >> 0] = HEAP8[src + 2 >> 0] | 0; //@line 32066
   HEAP8[dest + 3 >> 0] = HEAP8[src + 3 >> 0] | 0; //@line 32067
   dest = dest + 4 | 0; //@line 32068
   src = src + 4 | 0; //@line 32069
  }
 }
 while ((dest | 0) < (dest_end | 0)) {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 32074
  dest = dest + 1 | 0; //@line 32075
  src = src + 1 | 0; //@line 32076
 }
 return ret | 0; //@line 32078
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_302($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 20933
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20937
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20939
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20941
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20943
 $12 = HEAP16[$0 + 24 >> 1] | 0; //@line 20945
 $14 = HEAP16[$0 + 26 >> 1] | 0; //@line 20947
 $16 = HEAP8[$0 + 28 >> 0] | 0; //@line 20949
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 20951
 $19 = $6 + 12 | 0; //@line 20953
 HEAP32[$19 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 20954
 $20 = $6 + 16 | 0; //@line 20955
 HEAP32[$20 >> 2] = $10; //@line 20956
 HEAP16[$6 + 20 >> 1] = $12; //@line 20958
 HEAP16[$6 + 22 >> 1] = $14; //@line 20960
 HEAP8[$6 + 24 >> 0] = $16; //@line 20962
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 20963
 $24 = _equeue_alloc($18, 28) | 0; //@line 20964
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 300; //@line 20967
  $25 = $ReallocAsyncCtx7 + 4 | 0; //@line 20968
  HEAP32[$25 >> 2] = $8; //@line 20969
  $26 = $ReallocAsyncCtx7 + 8 | 0; //@line 20970
  HEAP32[$26 >> 2] = $4; //@line 20971
  $27 = $ReallocAsyncCtx7 + 12 | 0; //@line 20972
  HEAP32[$27 >> 2] = $19; //@line 20973
  $28 = $ReallocAsyncCtx7 + 16 | 0; //@line 20974
  HEAP32[$28 >> 2] = $6; //@line 20975
  $29 = $ReallocAsyncCtx7 + 20 | 0; //@line 20976
  HEAP32[$29 >> 2] = $20; //@line 20977
  $30 = $ReallocAsyncCtx7 + 24 | 0; //@line 20978
  HEAP32[$30 >> 2] = $18; //@line 20979
  $31 = $ReallocAsyncCtx7 + 28 | 0; //@line 20980
  HEAP32[$31 >> 2] = $19; //@line 20981
  sp = STACKTOP; //@line 20982
  return;
 }
 HEAP32[___async_retval >> 2] = $24; //@line 20986
 ___async_unwind = 0; //@line 20987
 HEAP32[$ReallocAsyncCtx7 >> 2] = 300; //@line 20988
 $25 = $ReallocAsyncCtx7 + 4 | 0; //@line 20989
 HEAP32[$25 >> 2] = $8; //@line 20990
 $26 = $ReallocAsyncCtx7 + 8 | 0; //@line 20991
 HEAP32[$26 >> 2] = $4; //@line 20992
 $27 = $ReallocAsyncCtx7 + 12 | 0; //@line 20993
 HEAP32[$27 >> 2] = $19; //@line 20994
 $28 = $ReallocAsyncCtx7 + 16 | 0; //@line 20995
 HEAP32[$28 >> 2] = $6; //@line 20996
 $29 = $ReallocAsyncCtx7 + 20 | 0; //@line 20997
 HEAP32[$29 >> 2] = $20; //@line 20998
 $30 = $ReallocAsyncCtx7 + 24 | 0; //@line 20999
 HEAP32[$30 >> 2] = $18; //@line 21000
 $31 = $ReallocAsyncCtx7 + 28 | 0; //@line 21001
 HEAP32[$31 >> 2] = $19; //@line 21002
 sp = STACKTOP; //@line 21003
 return;
}
function _equeue_alloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$038$sink$i = 0, $$03842$i = 0, $$1$i9 = 0, $10 = 0, $11 = 0, $14 = 0, $17 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 3180
 do {
  if (HEAP8[$0 + 184 >> 0] | 0) {
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 3186
   _wait_ms(10); //@line 3187
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 129; //@line 3190
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 3192
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 3194
    sp = STACKTOP; //@line 3195
    return 0; //@line 3196
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 3198
    break;
   }
  }
 } while (0);
 $8 = $1 + 39 & -4; //@line 3204
 $9 = $0 + 156 | 0; //@line 3205
 _equeue_mutex_lock($9); //@line 3206
 $10 = $0 + 24 | 0; //@line 3207
 $11 = HEAP32[$10 >> 2] | 0; //@line 3208
 L7 : do {
  if (!$11) {
   label = 11; //@line 3212
  } else {
   $$03842$i = $10; //@line 3214
   $14 = $11; //@line 3214
   while (1) {
    if ((HEAP32[$14 >> 2] | 0) >>> 0 >= $8 >>> 0) {
     break;
    }
    $20 = $14 + 8 | 0; //@line 3221
    $21 = HEAP32[$20 >> 2] | 0; //@line 3222
    if (!$21) {
     label = 11; //@line 3225
     break L7;
    } else {
     $$03842$i = $20; //@line 3228
     $14 = $21; //@line 3228
    }
   }
   $17 = HEAP32[$14 + 12 >> 2] | 0; //@line 3232
   if (!$17) {
    $$038$sink$i = $$03842$i; //@line 3235
   } else {
    HEAP32[$$03842$i >> 2] = $17; //@line 3237
    $$038$sink$i = $17 + 8 | 0; //@line 3239
   }
   HEAP32[$$038$sink$i >> 2] = HEAP32[$14 + 8 >> 2]; //@line 3243
   _equeue_mutex_unlock($9); //@line 3244
   $$1$i9 = $14; //@line 3245
  }
 } while (0);
 do {
  if ((label | 0) == 11) {
   $23 = $0 + 28 | 0; //@line 3250
   $24 = HEAP32[$23 >> 2] | 0; //@line 3251
   if ($24 >>> 0 < $8 >>> 0) {
    _equeue_mutex_unlock($9); //@line 3254
    $$0 = 0; //@line 3255
    return $$0 | 0; //@line 3256
   } else {
    $26 = $0 + 32 | 0; //@line 3258
    $27 = HEAP32[$26 >> 2] | 0; //@line 3259
    HEAP32[$26 >> 2] = $27 + $8; //@line 3261
    HEAP32[$23 >> 2] = $24 - $8; //@line 3263
    HEAP32[$27 >> 2] = $8; //@line 3264
    HEAP8[$27 + 4 >> 0] = 1; //@line 3266
    _equeue_mutex_unlock($9); //@line 3267
    if (!$27) {
     $$0 = 0; //@line 3270
    } else {
     $$1$i9 = $27; //@line 3272
     break;
    }
    return $$0 | 0; //@line 3275
   }
  }
 } while (0);
 HEAP32[$$1$i9 + 20 >> 2] = 0; //@line 3280
 HEAP32[$$1$i9 + 24 >> 2] = -1; //@line 3282
 HEAP32[$$1$i9 + 28 >> 2] = 0; //@line 3284
 $$0 = $$1$i9 + 36 | 0; //@line 3286
 return $$0 | 0; //@line 3287
}
function __ZN7LoRaMac4joinEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$0$i = 0, $2 = 0, $20 = 0, $27 = 0, $3 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 16229
 STACKTOP = STACKTOP + 16 | 0; //@line 16230
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16230
 $vararg_buffer = sp; //@line 16231
 $2 = sp + 5 | 0; //@line 16232
 $3 = sp + 4 | 0; //@line 16233
 if (!$1) {
  HEAP8[$0 + 2376 >> 0] = 1; //@line 16236
  $$0 = 0; //@line 16237
  STACKTOP = sp; //@line 16238
  return $$0 | 0; //@line 16238
 }
 $5 = $0 + 2084 | 0; //@line 16240
 HEAP32[$5 >> 2] = 0; //@line 16241
 HEAP32[$5 + 4 >> 2] = 0; //@line 16241
 HEAP32[$5 + 8 >> 2] = 0; //@line 16241
 HEAP32[$5 + 12 >> 2] = 0; //@line 16241
 HEAP32[$5 + 16 >> 2] = 0; //@line 16241
 HEAP32[$0 + 2092 >> 2] = 1; //@line 16243
 HEAP32[$0 + 2088 >> 2] = 0; //@line 16245
 HEAP8[$0 + 1877 >> 0] = __ZN7LoRaPHY16get_alternate_DREh($0 + 4 | 0, (HEAPU8[$0 + 1701 >> 0] | 0) + 1 & 255) | 0; //@line 16254
 HEAP8[$2 >> 0] = 0; //@line 16255
 HEAP8[$3 >> 0] = HEAP8[$0 + 1936 >> 0] << 7; //@line 16259
 HEAP8[$0 + 1180 >> 0] = 1; //@line 16261
 $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 16262
 $20 = __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt($0, $2, $3, 0, 0, 0) | 0; //@line 16263
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 457; //@line 16266
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 16268
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 16270
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer; //@line 16272
  HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 16274
  HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 16276
  sp = STACKTOP; //@line 16277
  STACKTOP = sp; //@line 16278
  return 0; //@line 16278
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 16280
 do {
  if (!$20) {
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 16284
   $27 = __ZN7LoRaMac11schedule_txEv($0) | 0; //@line 16285
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 458; //@line 16288
    HEAP32[$AsyncCtx3 + 4 >> 2] = $3; //@line 16290
    HEAP32[$AsyncCtx3 + 8 >> 2] = $2; //@line 16292
    sp = STACKTOP; //@line 16293
    STACKTOP = sp; //@line 16294
    return 0; //@line 16294
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 16296
    $$0$i = $27; //@line 16297
    break;
   }
  } else {
   HEAP32[$vararg_buffer >> 2] = $20; //@line 16301
   _mbed_tracef(2, 12890, 12979, $vararg_buffer); //@line 16302
   $$0$i = $20; //@line 16303
  }
 } while (0);
 $$0 = $$0$i; //@line 16306
 STACKTOP = sp; //@line 16307
 return $$0 | 0; //@line 16307
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_194($0) {
 $0 = $0 | 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $22 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 33157
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33161
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33163
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33165
 if ((HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) != 2) {
  $13 = HEAP32[$4 + 1776 >> 2] | 0; //@line 33171
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 33172
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($6, $4 + 1836 | 0, $13); //@line 33173
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 385; //@line 33176
   $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 33177
   HEAP32[$14 >> 2] = $4; //@line 33178
   $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 33179
   HEAP32[$15 >> 2] = $8; //@line 33180
   $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 33181
   HEAP32[$16 >> 2] = $6; //@line 33182
   sp = STACKTOP; //@line 33183
   return;
  }
  ___async_unwind = 0; //@line 33186
  HEAP32[$ReallocAsyncCtx2 >> 2] = 385; //@line 33187
  $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 33188
  HEAP32[$14 >> 2] = $4; //@line 33189
  $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 33190
  HEAP32[$15 >> 2] = $8; //@line 33191
  $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 33192
  HEAP32[$16 >> 2] = $6; //@line 33193
  sp = STACKTOP; //@line 33194
  return;
 }
 if (!(HEAP8[$4 + 1177 >> 0] | 0)) {
  $29 = HEAP8[$4 + 1182 >> 0] | 0; //@line 33202
  HEAP8[$4 + 1183 >> 0] = $29; //@line 33204
  __ZN7LoRaPHY16set_last_tx_doneEhbj($4 + 4 | 0, $29, (HEAP8[$4 + 2376 >> 0] | 0) != 0, $8); //@line 33209
  HEAP32[$4 + 1780 >> 2] = $8; //@line 33211
  return;
 }
 $22 = HEAP32[$4 + 1776 >> 2] | 0; //@line 33216
 $25 = (__ZN7LoRaPHY15get_ack_timeoutEv($4 + 4 | 0) | 0) + $22 | 0; //@line 33219
 $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 33220
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($6, $4 + 1856 | 0, $25); //@line 33221
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 386; //@line 33224
  $26 = $ReallocAsyncCtx + 4 | 0; //@line 33225
  HEAP32[$26 >> 2] = $4; //@line 33226
  $27 = $ReallocAsyncCtx + 8 | 0; //@line 33227
  HEAP32[$27 >> 2] = $8; //@line 33228
  sp = STACKTOP; //@line 33229
  return;
 }
 ___async_unwind = 0; //@line 33232
 HEAP32[$ReallocAsyncCtx >> 2] = 386; //@line 33233
 $26 = $ReallocAsyncCtx + 4 | 0; //@line 33234
 HEAP32[$26 >> 2] = $4; //@line 33235
 $27 = $ReallocAsyncCtx + 8 | 0; //@line 33236
 HEAP32[$27 >> 2] = $8; //@line 33237
 sp = STACKTOP; //@line 33238
 return;
}
function __ZN7LoRaMac15open_rx2_windowEv($0) {
 $0 = $0 | 0;
 var $$sink4 = 0, $20 = 0, $24 = 0, $25 = 0, $30 = 0, $32 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 12431
 STACKTOP = STACKTOP + 16 | 0; //@line 12432
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 12432
 _mbed_tracef(16, 12890, 12903, sp); //@line 12434
 $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12436
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1836 | 0); //@line 12437
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 387; //@line 12440
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 12442
  sp = STACKTOP; //@line 12443
  STACKTOP = sp; //@line 12444
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 12446
 $5 = $0 + 1964 | 0; //@line 12449
 HEAP8[$5 >> 0] = HEAP8[$0 + 1182 >> 0] | 0; //@line 12450
 HEAP32[$0 + 1968 >> 2] = HEAP32[$0 + 1912 >> 2]; //@line 12454
 HEAP8[$0 + 1980 >> 0] = HEAP8[$0 + 1921 >> 0] | 0; //@line 12458
 HEAP8[$0 + 1981 >> 0] = HEAP8[$0 + 1173 >> 0] | 0; //@line 12462
 HEAP32[$0 + 1984 >> 2] = 1; //@line 12464
 $$sink4 = (HEAP32[$0 + 2380 >> 2] | 0) == 2 & 1; //@line 12468
 HEAP8[$0 + 2377 >> 0] = $$sink4; //@line 12470
 $20 = $0 + 1982 | 0; //@line 12471
 HEAP8[$20 >> 0] = $$sink4; //@line 12472
 HEAP8[$0 + 2026 >> 0] = HEAP8[$0 + 1965 >> 0] | 0; //@line 12476
 $24 = $0 + 4 | 0; //@line 12477
 $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 12478
 $25 = __ZN7LoRaPHY9rx_configEP18rx_config_params_t($24, $5) | 0; //@line 12479
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 388; //@line 12482
  HEAP32[$AsyncCtx3 + 4 >> 2] = $20; //@line 12484
  HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 12486
  HEAP32[$AsyncCtx3 + 12 >> 2] = $24; //@line 12488
  sp = STACKTOP; //@line 12489
  STACKTOP = sp; //@line 12490
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 12492
 if (!$25) {
  STACKTOP = sp; //@line 12494
  return;
 }
 $30 = (HEAP8[$20 >> 0] | 0) != 0; //@line 12497
 $32 = HEAP32[$0 + 1888 >> 2] | 0; //@line 12499
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 12500
 __ZN7LoRaPHY15setup_rx_windowEbj($24, $30, $32); //@line 12501
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 389; //@line 12504
  HEAP32[$AsyncCtx + 4 >> 2] = $20; //@line 12506
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 12508
  sp = STACKTOP; //@line 12509
  STACKTOP = sp; //@line 12510
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 12512
 HEAP32[$0 + 1168 >> 2] = HEAP8[$20 >> 0] | 0 ? 2 : 1; //@line 12517
 STACKTOP = sp; //@line 12518
 return;
}
function __ZN7LoRaMac23message_integrity_checkEPKhtPhjPjS1_($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$ = 0, $$0 = 0, $12 = 0, $20 = 0, $21 = 0, $22 = 0, $43 = 0, $44 = 0, $47 = 0, $48 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 12791
 STACKTOP = STACKTOP + 16 | 0; //@line 12792
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 12792
 $7 = sp; //@line 12793
 HEAP32[$7 >> 2] = 0; //@line 12794
 $8 = HEAP8[$3 >> 0] | 0; //@line 12795
 $9 = $8 + 1 << 24 >> 24; //@line 12796
 HEAP8[$3 >> 0] = $9; //@line 12797
 $12 = HEAP8[$1 + ($8 & 255) >> 0] | 0; //@line 12800
 HEAP8[$3 >> 0] = $8 + 2 << 24 >> 24; //@line 12802
 $20 = (HEAPU8[$1 + ($9 & 255) >> 0] | 0) << 8 | $12 & 255; //@line 12809
 $21 = $2 & 65535; //@line 12810
 $22 = $21 + -4 | 0; //@line 12811
 $43 = (HEAPU8[$1 + ($21 + -3) >> 0] | 0) << 8 | (HEAPU8[$1 + $22 >> 0] | 0) | (HEAPU8[$1 + ($21 + -2) >> 0] | 0) << 16 | (HEAPU8[$1 + ($21 + -1) >> 0] | 0) << 24; //@line 12832
 $44 = HEAP32[$5 >> 2] | 0; //@line 12833
 $47 = $20 - $44 & 65535; //@line 12836
 $48 = $47 + $44 | 0; //@line 12837
 $$ = $20 >>> 0 < ($44 & 65535) >>> 0 ? $48 + 65536 | 0 : $48; //@line 12840
 HEAP32[$5 >> 2] = $$; //@line 12841
 $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 12844
 __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj($0 + 756 | 0, $1, $22 & 65535, $6, 128, $4, 1, $$, $7) | 0; //@line 12845
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 395; //@line 12848
  HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 12850
  HEAP32[$AsyncCtx + 8 >> 2] = $43; //@line 12852
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 12854
  HEAP32[$AsyncCtx + 16 >> 2] = $47; //@line 12856
  HEAP32[$AsyncCtx + 20 >> 2] = $7; //@line 12858
  HEAP32[$AsyncCtx + 24 >> 2] = $5; //@line 12860
  sp = STACKTOP; //@line 12861
  STACKTOP = sp; //@line 12862
  return 0; //@line 12862
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 12864
 if (($43 | 0) != (HEAP32[$7 >> 2] | 0)) {
  HEAP32[$0 + 2020 >> 2] = 12; //@line 12869
  $$0 = 0; //@line 12870
  STACKTOP = sp; //@line 12871
  return $$0 | 0; //@line 12871
 }
 if ($47 >>> 0 < ((__ZN7LoRaPHY29get_maximum_frame_counter_gapEv($0 + 4 | 0) | 0) & 65535) >>> 0) {
  $$0 = 1; //@line 12878
  STACKTOP = sp; //@line 12879
  return $$0 | 0; //@line 12879
 }
 HEAP32[$0 + 2020 >> 2] = 10; //@line 12882
 HEAP32[$0 + 2048 >> 2] = HEAP32[$5 >> 2]; //@line 12885
 $$0 = 0; //@line 12886
 STACKTOP = sp; //@line 12887
 return $$0 | 0; //@line 12887
}
function __ZN12LoRaWANStackD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $15 = 0, $19 = 0, $22 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx14 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 5678
 $1 = $0 + 2500 | 0; //@line 5679
 $3 = HEAP32[$0 + 2544 >> 2] | 0; //@line 5681
 do {
  if ($3 | 0) {
   $7 = HEAP32[$3 + 8 >> 2] | 0; //@line 5687
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 5688
   FUNCTION_TABLE_vi[$7 & 1023]($0 + 2532 | 0); //@line 5689
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 168; //@line 5692
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 5694
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 5696
    sp = STACKTOP; //@line 5697
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 5700
    break;
   }
  }
 } while (0);
 $11 = HEAP32[$0 + 2528 >> 2] | 0; //@line 5706
 do {
  if ($11 | 0) {
   $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 5712
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 5713
   FUNCTION_TABLE_vi[$15 & 1023]($0 + 2516 | 0); //@line 5714
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 169; //@line 5717
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 5719
    HEAP32[$AsyncCtx3 + 8 >> 2] = $1; //@line 5721
    sp = STACKTOP; //@line 5722
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5725
    break;
   }
  }
 } while (0);
 $19 = HEAP32[$0 + 2512 >> 2] | 0; //@line 5731
 do {
  if ($19 | 0) {
   $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 5736
   $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5737
   FUNCTION_TABLE_vi[$22 & 1023]($1); //@line 5738
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 170; //@line 5741
    HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 5743
    sp = STACKTOP; //@line 5744
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 5747
    break;
   }
  }
 } while (0);
 $AsyncCtx14 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5753
 __ZN12radio_eventsD2Ev($0 + 2384 | 0); //@line 5754
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 171; //@line 5757
  HEAP32[$AsyncCtx14 + 4 >> 2] = $0; //@line 5759
  sp = STACKTOP; //@line 5760
  return;
 }
 _emscripten_free_async_context($AsyncCtx14 | 0); //@line 5763
 $AsyncCtx10 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5764
 __ZN7LoRaMacD2Ev($0); //@line 5765
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 172; //@line 5768
  sp = STACKTOP; //@line 5769
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx10 | 0); //@line 5772
  return;
 }
}
function __ZN12LoRaWANStack25process_reception_timeoutEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $19 = 0, $2 = 0, $3 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 6990
 STACKTOP = STACKTOP + 16 | 0; //@line 6991
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 6991
 $vararg_buffer = sp; //@line 6992
 $2 = sp + 4 | 0; //@line 6993
 $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 6994
 $3 = __ZN7LoRaMac19on_radio_rx_timeoutEb($0, $1) | 0; //@line 6995
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 218; //@line 6998
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 7000
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 7002
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 7004
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer; //@line 7006
  HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer; //@line 7008
  sp = STACKTOP; //@line 7009
  STACKTOP = sp; //@line 7010
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 7012
 if (($3 | 0) != 1) {
  STACKTOP = sp; //@line 7015
  return;
 }
 if (!(__ZN7LoRaMac10nwk_joinedEv($0) | 0)) {
  HEAP32[$2 >> 2] = 0; //@line 7019
  $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7020
  __ZN12LoRaWANStack21process_joining_stateER14lorawan_status($0, $2); //@line 7021
  if (___async) {
   HEAP32[$AsyncCtx7 >> 2] = 219; //@line 7024
   HEAP32[$AsyncCtx7 + 4 >> 2] = $2; //@line 7026
   sp = STACKTOP; //@line 7027
   STACKTOP = sp; //@line 7028
   return;
  }
  _emscripten_free_async_context($AsyncCtx7 | 0); //@line 7030
  STACKTOP = sp; //@line 7031
  return;
 }
 __ZN7LoRaMac21post_process_mcps_reqEv($0); //@line 7033
 do {
  if ((HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($0) | 0) >> 2] | 0) == 1) {
   if (__ZN7LoRaMac24continue_sending_processEv($0) | 0) {
    STACKTOP = sp; //@line 7041
    return;
   } else {
    _mbed_tracef(2, 12211, 12216, $vararg_buffer); //@line 7043
    break;
   }
  }
 } while (0);
 $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7048
 __ZN12LoRaWANStack26process_status_check_stateEv($0); //@line 7049
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 220; //@line 7052
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 7054
  HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 7056
  sp = STACKTOP; //@line 7057
  STACKTOP = sp; //@line 7058
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 7060
 $19 = (__ZNK7LoRaMac16get_device_classEv($0) | 0) == 2; //@line 7062
 HEAP32[$0 + 2496 >> 2] = $19 ? 5 : 2; //@line 7065
 STACKTOP = sp; //@line 7066
 return;
}
function _mbedtls_cipher_cmac_finish__async_cb_279($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $39 = 0, $4 = 0, $40 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 18208
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18210
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18212
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18214
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18216
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18218
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18222
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 18224
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 18226
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 18228
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 18230
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 18232
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 18234
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 18236
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 18238
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 18240
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 18242
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 18244
 $39 = HEAP32[(HEAP32[HEAP32[$0 + 24 >> 2] >> 2] | 0) + 24 >> 2] | 0; //@line 18247
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(72) | 0; //@line 18248
 $40 = _mbedtls_cipher_update($14, $16, $39, $16, $18) | 0; //@line 18249
 if (!___async) {
  HEAP32[___async_retval >> 2] = $40; //@line 18253
  ___async_unwind = 0; //@line 18254
 }
 HEAP32[$ReallocAsyncCtx10 >> 2] = 602; //@line 18256
 HEAP32[$ReallocAsyncCtx10 + 4 >> 2] = $2; //@line 18258
 HEAP32[$ReallocAsyncCtx10 + 8 >> 2] = $4; //@line 18260
 HEAP32[$ReallocAsyncCtx10 + 12 >> 2] = $6; //@line 18262
 HEAP32[$ReallocAsyncCtx10 + 16 >> 2] = $8; //@line 18264
 HEAP32[$ReallocAsyncCtx10 + 20 >> 2] = $10; //@line 18266
 HEAP32[$ReallocAsyncCtx10 + 24 >> 2] = $16; //@line 18268
 HEAP32[$ReallocAsyncCtx10 + 28 >> 2] = $20; //@line 18270
 HEAP32[$ReallocAsyncCtx10 + 32 >> 2] = $22; //@line 18272
 HEAP32[$ReallocAsyncCtx10 + 36 >> 2] = $24; //@line 18274
 HEAP32[$ReallocAsyncCtx10 + 40 >> 2] = $26; //@line 18276
 HEAP32[$ReallocAsyncCtx10 + 44 >> 2] = $28; //@line 18278
 HEAP32[$ReallocAsyncCtx10 + 48 >> 2] = $30; //@line 18280
 HEAP32[$ReallocAsyncCtx10 + 52 >> 2] = $14; //@line 18282
 HEAP32[$ReallocAsyncCtx10 + 56 >> 2] = $32; //@line 18284
 HEAP32[$ReallocAsyncCtx10 + 60 >> 2] = $39; //@line 18286
 HEAP32[$ReallocAsyncCtx10 + 64 >> 2] = $34; //@line 18288
 HEAP32[$ReallocAsyncCtx10 + 68 >> 2] = $36; //@line 18290
 sp = STACKTOP; //@line 18291
 return;
}
function __ZN7LoRaPHY18dl_channel_requestEhj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$0 = 0, $$079$i = 0, $$1 = 0, $11 = 0, $13 = 0, $20 = 0, $25 = 0, $28 = 0, $29 = 0, $34 = 0, $35 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 21279
 if (!(HEAP8[$0 + 17 >> 0] | 0)) {
  $$0 = 0; //@line 21284
  return $$0 | 0; //@line 21285
 }
 $6 = $0 + 76 | 0; //@line 21287
 L4 : do {
  if (!(HEAP8[$6 >> 0] | 0)) {
   $25 = -1; //@line 21292
  } else {
   $$079$i = 0; //@line 21294
   while (1) {
    $11 = HEAP32[(HEAP32[$0 >> 2] | 0) + 76 >> 2] | 0; //@line 21298
    $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 21300
    $13 = FUNCTION_TABLE_iiii[$11 & 31]($0, $2, $$079$i & 255) | 0; //@line 21301
    if (___async) {
     break;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 21306
    if ($13) {
     $25 = $$079$i; //@line 21308
     break L4;
    }
    $20 = $$079$i + 1 | 0; //@line 21311
    if (($20 | 0) < (HEAPU8[$6 >> 0] | 0)) {
     $$079$i = $20; //@line 21316
    } else {
     $25 = -1; //@line 21318
     break L4;
    }
   }
   HEAP32[$AsyncCtx >> 2] = 535; //@line 21322
   HEAP32[$AsyncCtx + 4 >> 2] = $$079$i; //@line 21324
   HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 21326
   HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 21328
   HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 21330
   HEAP32[$AsyncCtx + 20 >> 2] = $6; //@line 21332
   HEAP8[$AsyncCtx + 24 >> 0] = $1; //@line 21334
   sp = STACKTOP; //@line 21335
   return 0; //@line 21336
  }
 } while (0);
 $28 = HEAP32[(HEAP32[$0 >> 2] | 0) + 76 >> 2] | 0; //@line 21342
 $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 21343
 $29 = FUNCTION_TABLE_iiii[$28 & 31]($0, $2, $25 & 255) | 0; //@line 21344
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 536; //@line 21347
  HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 21349
  HEAP8[$AsyncCtx2 + 8 >> 0] = $1; //@line 21351
  HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 21353
  sp = STACKTOP; //@line 21354
  return 0; //@line 21355
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 21357
 $$ = $29 ? 3 : 2; //@line 21358
 $34 = HEAP32[$0 + 124 >> 2] | 0; //@line 21360
 $35 = $1 & 255; //@line 21361
 $$1 = (HEAP32[$34 + ($35 * 12 | 0) >> 2] | 0) == 0 ? $$ & 1 : $$; //@line 21366
 if ($$1 << 24 >> 24 != 3) {
  $$0 = $$1; //@line 21369
  return $$0 | 0; //@line 21370
 }
 HEAP32[$34 + ($35 * 12 | 0) + 4 >> 2] = $2; //@line 21373
 $$0 = 3; //@line 21374
 return $$0 | 0; //@line 21375
}
function __ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb_107($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 27156
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27158
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27160
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27162
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27164
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27166
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27168
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 27170
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 27172
 if (HEAP32[___async_retval >> 2] | 0) {
  HEAP32[$2 + 2092 >> 2] = 13; //@line 27178
  return;
 }
 if (((HEAPU8[$6 + -3 + ($2 + 1442) >> 0] | 0) << 8 | (HEAPU8[$2 + 1442 + $4 >> 0] | 0) | (HEAPU8[$6 + -2 + ($2 + 1442) >> 0] | 0) << 16 | (HEAPU8[$6 + -1 + ($2 + 1442) >> 0] | 0) << 24 | 0) != (HEAP32[$8 >> 2] | 0)) {
  HEAP32[$2 + 2092 >> 2] = 7; //@line 27206
  return;
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 27210
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($2, $2 + 1836 | 0); //@line 27211
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 392; //@line 27214
  $44 = $ReallocAsyncCtx5 + 4 | 0; //@line 27215
  HEAP32[$44 >> 2] = $12; //@line 27216
  $45 = $ReallocAsyncCtx5 + 8 | 0; //@line 27217
  HEAP32[$45 >> 2] = $2; //@line 27218
  $46 = $ReallocAsyncCtx5 + 12 | 0; //@line 27219
  HEAP32[$46 >> 2] = $14; //@line 27220
  $47 = $ReallocAsyncCtx5 + 16 | 0; //@line 27221
  HEAP32[$47 >> 2] = $16; //@line 27222
  $48 = $ReallocAsyncCtx5 + 20 | 0; //@line 27223
  HEAP32[$48 >> 2] = $6; //@line 27224
  $49 = $ReallocAsyncCtx5 + 24 | 0; //@line 27225
  HEAP32[$49 >> 2] = $10; //@line 27226
  sp = STACKTOP; //@line 27227
  return;
 }
 ___async_unwind = 0; //@line 27230
 HEAP32[$ReallocAsyncCtx5 >> 2] = 392; //@line 27231
 $44 = $ReallocAsyncCtx5 + 4 | 0; //@line 27232
 HEAP32[$44 >> 2] = $12; //@line 27233
 $45 = $ReallocAsyncCtx5 + 8 | 0; //@line 27234
 HEAP32[$45 >> 2] = $2; //@line 27235
 $46 = $ReallocAsyncCtx5 + 12 | 0; //@line 27236
 HEAP32[$46 >> 2] = $14; //@line 27237
 $47 = $ReallocAsyncCtx5 + 16 | 0; //@line 27238
 HEAP32[$47 >> 2] = $16; //@line 27239
 $48 = $ReallocAsyncCtx5 + 20 | 0; //@line 27240
 HEAP32[$48 >> 2] = $6; //@line 27241
 $49 = $ReallocAsyncCtx5 + 24 | 0; //@line 27242
 HEAP32[$49 >> 2] = $10; //@line 27243
 sp = STACKTOP; //@line 27244
 return;
}
function __ZN7LoRaMac11schedule_txEv__async_cb_353($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $31 = 0, $36 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 24418
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24420
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24422
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24424
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 24426
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24428
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24430
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 24432
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 24434
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 24436
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 24438
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 24440
 HEAP32[$2 + 2092 >> 2] = 1; //@line 24442
 HEAP32[$2 + 2056 >> 2] = 1; //@line 24444
 HEAP8[$2 + 2060 >> 0] = HEAP8[$4 >> 0] | 0; //@line 24447
 HEAP8[$2 + 2061 >> 0] = HEAP8[$6 >> 0] | 0; //@line 24450
 HEAP32[$2 + 2072 >> 2] = $8 & 255; //@line 24453
 $31 = HEAP32[$10 >> 2] | 0; //@line 24454
 HEAP32[$2 + 2064 >> 2] = $31; //@line 24456
 HEAP32[$2 + 2096 >> 2] = $31; //@line 24458
 if (!(HEAP8[$12 >> 0] | 0)) {
  $36 = $2 + 1701 | 0; //@line 24462
  HEAP8[$36 >> 0] = (HEAP8[$36 >> 0] | 0) + 1 << 24 >> 24; //@line 24465
 }
 $41 = HEAP16[$14 >> 1] & 255; //@line 24469
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 24470
 __ZN7LoRaPHY11handle_sendEPhh($16, $2 + 1185 | 0, $41); //@line 24471
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 433; //@line 24474
  $42 = $ReallocAsyncCtx2 + 4 | 0; //@line 24475
  HEAP32[$42 >> 2] = $6; //@line 24476
  $43 = $ReallocAsyncCtx2 + 8 | 0; //@line 24477
  HEAP32[$43 >> 2] = $18; //@line 24478
  $44 = $ReallocAsyncCtx2 + 12 | 0; //@line 24479
  HEAP32[$44 >> 2] = $20; //@line 24480
  $45 = $ReallocAsyncCtx2 + 16 | 0; //@line 24481
  HEAP32[$45 >> 2] = $22; //@line 24482
  sp = STACKTOP; //@line 24483
  return;
 }
 ___async_unwind = 0; //@line 24486
 HEAP32[$ReallocAsyncCtx2 >> 2] = 433; //@line 24487
 $42 = $ReallocAsyncCtx2 + 4 | 0; //@line 24488
 HEAP32[$42 >> 2] = $6; //@line 24489
 $43 = $ReallocAsyncCtx2 + 8 | 0; //@line 24490
 HEAP32[$43 >> 2] = $18; //@line 24491
 $44 = $ReallocAsyncCtx2 + 12 | 0; //@line 24492
 HEAP32[$44 >> 2] = $20; //@line 24493
 $45 = $ReallocAsyncCtx2 + 16 | 0; //@line 24494
 HEAP32[$45 >> 2] = $22; //@line 24495
 sp = STACKTOP; //@line 24496
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$2 = 0, $17 = 0, $18 = 0, $3 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 16693
 STACKTOP = STACKTOP + 64 | 0; //@line 16694
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 16694
 $3 = sp; //@line 16695
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, 0) | 0) {
  $$2 = 1; //@line 16698
 } else {
  if (!$1) {
   $$2 = 0; //@line 16702
  } else {
   $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 16704
   $6 = ___dynamic_cast($1, 400, 384, 0) | 0; //@line 16705
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 724; //@line 16708
    HEAP32[$AsyncCtx3 + 4 >> 2] = $3; //@line 16710
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 16712
    HEAP32[$AsyncCtx3 + 12 >> 2] = $2; //@line 16714
    sp = STACKTOP; //@line 16715
    STACKTOP = sp; //@line 16716
    return 0; //@line 16716
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 16718
   if (!$6) {
    $$2 = 0; //@line 16721
   } else {
    dest = $3 + 4 | 0; //@line 16724
    stop = dest + 52 | 0; //@line 16724
    do {
     HEAP32[dest >> 2] = 0; //@line 16724
     dest = dest + 4 | 0; //@line 16724
    } while ((dest | 0) < (stop | 0));
    HEAP32[$3 >> 2] = $6; //@line 16725
    HEAP32[$3 + 8 >> 2] = $0; //@line 16727
    HEAP32[$3 + 12 >> 2] = -1; //@line 16729
    HEAP32[$3 + 48 >> 2] = 1; //@line 16731
    $17 = HEAP32[(HEAP32[$6 >> 2] | 0) + 28 >> 2] | 0; //@line 16734
    $18 = HEAP32[$2 >> 2] | 0; //@line 16735
    $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 16736
    FUNCTION_TABLE_viiii[$17 & 7]($6, $3, $18, 1); //@line 16737
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 725; //@line 16740
     HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 16742
     HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 16744
     HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 16746
     sp = STACKTOP; //@line 16747
     STACKTOP = sp; //@line 16748
     return 0; //@line 16748
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 16750
    if ((HEAP32[$3 + 24 >> 2] | 0) == 1) {
     HEAP32[$2 >> 2] = HEAP32[$3 + 16 >> 2]; //@line 16757
     $$0 = 1; //@line 16758
    } else {
     $$0 = 0; //@line 16760
    }
    $$2 = $$0; //@line 16762
   }
  }
 }
 STACKTOP = sp; //@line 16766
 return $$2 | 0; //@line 16766
}
function __ZN12LoRaWANStackD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 17320
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17322
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17324
 $6 = HEAP32[$2 + 2528 >> 2] | 0; //@line 17326
 if ($6 | 0) {
  $10 = HEAP32[$6 + 8 >> 2] | 0; //@line 17331
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 17332
  FUNCTION_TABLE_vi[$10 & 1023]($2 + 2516 | 0); //@line 17333
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 169; //@line 17336
   $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 17337
   HEAP32[$11 >> 2] = $2; //@line 17338
   $12 = $ReallocAsyncCtx2 + 8 | 0; //@line 17339
   HEAP32[$12 >> 2] = $4; //@line 17340
   sp = STACKTOP; //@line 17341
   return;
  }
  ___async_unwind = 0; //@line 17344
  HEAP32[$ReallocAsyncCtx2 >> 2] = 169; //@line 17345
  $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 17346
  HEAP32[$11 >> 2] = $2; //@line 17347
  $12 = $ReallocAsyncCtx2 + 8 | 0; //@line 17348
  HEAP32[$12 >> 2] = $4; //@line 17349
  sp = STACKTOP; //@line 17350
  return;
 }
 $14 = HEAP32[$2 + 2512 >> 2] | 0; //@line 17354
 if (!$14) {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 17358
  __ZN12radio_eventsD2Ev($2 + 2384 | 0); //@line 17359
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 171; //@line 17362
   $20 = $ReallocAsyncCtx5 + 4 | 0; //@line 17363
   HEAP32[$20 >> 2] = $2; //@line 17364
   sp = STACKTOP; //@line 17365
   return;
  }
  ___async_unwind = 0; //@line 17368
  HEAP32[$ReallocAsyncCtx5 >> 2] = 171; //@line 17369
  $20 = $ReallocAsyncCtx5 + 4 | 0; //@line 17370
  HEAP32[$20 >> 2] = $2; //@line 17371
  sp = STACKTOP; //@line 17372
  return;
 } else {
  $17 = HEAP32[$14 + 8 >> 2] | 0; //@line 17376
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 17377
  FUNCTION_TABLE_vi[$17 & 1023]($4); //@line 17378
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 170; //@line 17381
   $18 = $ReallocAsyncCtx3 + 4 | 0; //@line 17382
   HEAP32[$18 >> 2] = $2; //@line 17383
   sp = STACKTOP; //@line 17384
   return;
  }
  ___async_unwind = 0; //@line 17387
  HEAP32[$ReallocAsyncCtx3 >> 2] = 170; //@line 17388
  $18 = $ReallocAsyncCtx3 + 4 | 0; //@line 17389
  HEAP32[$18 >> 2] = $2; //@line 17390
  sp = STACKTOP; //@line 17391
  return;
 }
}
function __ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $11 = 0, $13 = 0, $14 = 0, $15 = 0, $18 = 0, $21 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 6739
 STACKTOP = STACKTOP + 16 | 0; //@line 6740
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 6740
 $5 = sp; //@line 6741
 $6 = $0 + 2911 | 0; //@line 6742
 if (($2 & 65535) > 255 | (HEAP8[$6 >> 0] | 0) == 0) {
  STACKTOP = sp; //@line 6748
  return;
 }
 HEAP8[$6 >> 0] = 0; //@line 6751
 $11 = $0 + 2912 | 0; //@line 6752
 _memcpy($11 | 0, $1 | 0, $2 & 65535 | 0) | 0; //@line 6753
 $13 = HEAP32[$0 + 3168 >> 2] | 0; //@line 6755
 $14 = $5 + 12 | 0; //@line 6756
 HEAP32[$5 >> 2] = 7; //@line 6757
 HEAP32[$5 + 4 >> 2] = 0; //@line 6759
 HEAP32[$5 + 8 >> 2] = $0; //@line 6761
 HEAP32[$14 >> 2] = 836; //@line 6762
 $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6763
 $15 = __ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3_($13, $5, $11, $2, $3, $4) | 0; //@line 6764
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 206; //@line 6767
  HEAP32[$AsyncCtx3 + 4 >> 2] = $14; //@line 6769
  HEAP32[$AsyncCtx3 + 8 >> 2] = $5; //@line 6771
  sp = STACKTOP; //@line 6772
  STACKTOP = sp; //@line 6773
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 6775
 $18 = HEAP32[$14 >> 2] | 0; //@line 6776
 do {
  if ($18 | 0) {
   $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 6781
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 6782
   FUNCTION_TABLE_vi[$21 & 1023]($5); //@line 6783
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 207; //@line 6786
    HEAP32[$AsyncCtx + 4 >> 2] = $5; //@line 6788
    HEAP32[$AsyncCtx + 8 >> 2] = $15; //@line 6790
    sp = STACKTOP; //@line 6791
    STACKTOP = sp; //@line 6792
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 6794
    break;
   }
  }
 } while (0);
 if ($15 | 0) {
  STACKTOP = sp; //@line 6801
  return;
 }
 $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6803
 _mbed_assert_internal(12104, 12113, 524); //@line 6804
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 208; //@line 6807
  sp = STACKTOP; //@line 6808
  STACKTOP = sp; //@line 6809
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 6811
 STACKTOP = sp; //@line 6812
 return;
}
function __ZN12LoRaWANStack20process_transmissionEv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $30 = 0, $34 = 0, $35 = 0, $37 = 0, $4 = 0, $42 = 0, $43 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 12099
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12101
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12103
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12105
 HEAP8[$2 + 2895 >> 0] = 0; //@line 12109
 HEAP32[$2 + 2888 >> 2] = HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($4) | 0) + 20 >> 2]; //@line 12114
 HEAP8[$2 + 2893 >> 0] = HEAP8[(__ZNK7LoRaMac21get_mcps_confirmationEv($4) | 0) + 8 >> 0] | 0; //@line 12119
 HEAP8[$2 + 2892 >> 0] = HEAP8[(__ZNK7LoRaMac21get_mcps_confirmationEv($4) | 0) + 9 >> 0] | 0; //@line 12124
 HEAP32[$2 + 2884 >> 2] = HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($4) | 0) + 12 >> 2]; //@line 12129
 HEAP8[$2 + 2894 >> 0] = HEAP8[(__ZNK7LoRaMac21get_mcps_confirmationEv($4) | 0) + 11 >> 0] | 0; //@line 12134
 $30 = $2 + 2496 | 0; //@line 12135
 switch (HEAP32[$30 >> 2] | 0) {
 case 1:
  {
   HEAP32[$30 >> 2] = 4; //@line 12139
   return;
  }
 case 8:
  {
   $34 = (HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($4) | 0) >> 2] | 0) == 1; //@line 12146
   $35 = $2 + 2904 | 0; //@line 12147
   $37 = HEAP32[$35 >> 2] & -18; //@line 12149
   if ($34) {
    HEAP32[$35 >> 2] = $37 | 1; //@line 12152
    _mbed_tracef(16, 12211, 12575, $6); //@line 12153
    HEAP32[$30 >> 2] = 9; //@line 12154
    return;
   }
   HEAP32[$35 >> 2] = $37 | 16; //@line 12158
   if ((__ZNK7LoRaMac16get_device_classEv($4) | 0) != 2) {
    return;
   }
   __ZN7LoRaMac21post_process_mcps_reqEv($4); //@line 12164
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 12165
   __ZN12LoRaWANStack26process_status_check_stateEv($2); //@line 12166
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 342; //@line 12169
    $42 = $ReallocAsyncCtx2 + 4 | 0; //@line 12170
    HEAP32[$42 >> 2] = $4; //@line 12171
    $43 = $ReallocAsyncCtx2 + 8 | 0; //@line 12172
    HEAP32[$43 >> 2] = $30; //@line 12173
    sp = STACKTOP; //@line 12174
    return;
   }
   ___async_unwind = 0; //@line 12177
   HEAP32[$ReallocAsyncCtx2 >> 2] = 342; //@line 12178
   $42 = $ReallocAsyncCtx2 + 4 | 0; //@line 12179
   HEAP32[$42 >> 2] = $4; //@line 12180
   $43 = $ReallocAsyncCtx2 + 8 | 0; //@line 12181
   HEAP32[$43 >> 2] = $30; //@line 12182
   sp = STACKTOP; //@line 12183
   return;
  }
 default:
  {
   return;
  }
 }
}
function __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_31($0) {
 $0 = $0 | 0;
 var $$pr = 0, $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 23537
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23539
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23543
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23545
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23547
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 >> 2]; //@line 23549
 $$pr = HEAP32[$2 >> 2] | 0; //@line 23550
 if (!$$pr) {
  $17 = $8 + 12 | 0; //@line 23553
  HEAP32[$17 >> 2] = 0; //@line 23554
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 23555
  __ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE($6, $8); //@line 23556
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 360; //@line 23559
   $18 = $ReallocAsyncCtx9 + 4 | 0; //@line 23560
   HEAP32[$18 >> 2] = $17; //@line 23561
   $19 = $ReallocAsyncCtx9 + 8 | 0; //@line 23562
   HEAP32[$19 >> 2] = $8; //@line 23563
   sp = STACKTOP; //@line 23564
   return;
  }
  ___async_unwind = 0; //@line 23567
  HEAP32[$ReallocAsyncCtx9 >> 2] = 360; //@line 23568
  $18 = $ReallocAsyncCtx9 + 4 | 0; //@line 23569
  HEAP32[$18 >> 2] = $17; //@line 23570
  $19 = $ReallocAsyncCtx9 + 8 | 0; //@line 23571
  HEAP32[$19 >> 2] = $8; //@line 23572
  sp = STACKTOP; //@line 23573
  return;
 } else {
  $13 = HEAP32[$$pr + 4 >> 2] | 0; //@line 23577
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 23578
  FUNCTION_TABLE_vii[$13 & 15]($8, $10); //@line 23579
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 359; //@line 23582
   $14 = $ReallocAsyncCtx7 + 4 | 0; //@line 23583
   HEAP32[$14 >> 2] = $2; //@line 23584
   $15 = $ReallocAsyncCtx7 + 8 | 0; //@line 23585
   HEAP32[$15 >> 2] = $6; //@line 23586
   $16 = $ReallocAsyncCtx7 + 12 | 0; //@line 23587
   HEAP32[$16 >> 2] = $8; //@line 23588
   sp = STACKTOP; //@line 23589
   return;
  }
  ___async_unwind = 0; //@line 23592
  HEAP32[$ReallocAsyncCtx7 >> 2] = 359; //@line 23593
  $14 = $ReallocAsyncCtx7 + 4 | 0; //@line 23594
  HEAP32[$14 >> 2] = $2; //@line 23595
  $15 = $ReallocAsyncCtx7 + 8 | 0; //@line 23596
  HEAP32[$15 >> 2] = $6; //@line 23597
  $16 = $ReallocAsyncCtx7 + 12 | 0; //@line 23598
  HEAP32[$16 >> 2] = $8; //@line 23599
  sp = STACKTOP; //@line 23600
  return;
 }
}
function _vsnprintf($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$$015 = 0, $$0 = 0, $$014 = 0, $$015 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $19 = 0, $26 = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 16118
 STACKTOP = STACKTOP + 128 | 0; //@line 16119
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 16119
 $4 = sp + 124 | 0; //@line 16120
 $5 = sp; //@line 16121
 dest = $5; //@line 16122
 src = 10792; //@line 16122
 stop = dest + 124 | 0; //@line 16122
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 16122
  dest = dest + 4 | 0; //@line 16122
  src = src + 4 | 0; //@line 16122
 } while ((dest | 0) < (stop | 0));
 if (($1 + -1 | 0) >>> 0 > 2147483646) {
  if (!$1) {
   $$014 = $4; //@line 16128
   $$015 = 1; //@line 16128
   label = 4; //@line 16129
  } else {
   HEAP32[(___errno_location() | 0) >> 2] = 75; //@line 16132
   $$0 = -1; //@line 16133
  }
 } else {
  $$014 = $0; //@line 16136
  $$015 = $1; //@line 16136
  label = 4; //@line 16137
 }
 if ((label | 0) == 4) {
  $11 = -2 - $$014 | 0; //@line 16141
  $$$015 = $$015 >>> 0 > $11 >>> 0 ? $11 : $$015; //@line 16143
  HEAP32[$5 + 48 >> 2] = $$$015; //@line 16145
  $14 = $5 + 20 | 0; //@line 16146
  HEAP32[$14 >> 2] = $$014; //@line 16147
  HEAP32[$5 + 44 >> 2] = $$014; //@line 16149
  $16 = $$014 + $$$015 | 0; //@line 16150
  $17 = $5 + 16 | 0; //@line 16151
  HEAP32[$17 >> 2] = $16; //@line 16152
  HEAP32[$5 + 28 >> 2] = $16; //@line 16154
  $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 16155
  $19 = _vfprintf($5, $2, $3) | 0; //@line 16156
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 712; //@line 16159
   HEAP32[$AsyncCtx + 4 >> 2] = $$$015; //@line 16161
   HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 16163
   HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 16165
   HEAP32[$AsyncCtx + 16 >> 2] = $14; //@line 16167
   HEAP32[$AsyncCtx + 20 >> 2] = $17; //@line 16169
   sp = STACKTOP; //@line 16170
   STACKTOP = sp; //@line 16171
   return 0; //@line 16171
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 16173
  if (!$$$015) {
   $$0 = $19; //@line 16176
  } else {
   $26 = HEAP32[$14 >> 2] | 0; //@line 16178
   HEAP8[$26 + ((($26 | 0) == (HEAP32[$17 >> 2] | 0)) << 31 >> 31) >> 0] = 0; //@line 16183
   $$0 = $19; //@line 16184
  }
 }
 STACKTOP = sp; //@line 16187
 return $$0 | 0; //@line 16187
}
function _equeue_alloc__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$038$sink$i = 0, $$03842$i = 0, $$1$i9 = 0, $12 = 0, $15 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $34 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12702
 $6 = (HEAP32[$0 + 4 >> 2] | 0) + 39 & -4; //@line 12704
 $7 = $4 + 156 | 0; //@line 12705
 _equeue_mutex_lock($7); //@line 12706
 $8 = $4 + 24 | 0; //@line 12707
 $9 = HEAP32[$8 >> 2] | 0; //@line 12708
 L3 : do {
  if (!$9) {
   label = 9; //@line 12712
  } else {
   $$03842$i = $8; //@line 12714
   $12 = $9; //@line 12714
   while (1) {
    if ((HEAP32[$12 >> 2] | 0) >>> 0 >= $6 >>> 0) {
     break;
    }
    $18 = $12 + 8 | 0; //@line 12721
    $19 = HEAP32[$18 >> 2] | 0; //@line 12722
    if (!$19) {
     label = 9; //@line 12725
     break L3;
    } else {
     $$03842$i = $18; //@line 12728
     $12 = $19; //@line 12728
    }
   }
   $15 = HEAP32[$12 + 12 >> 2] | 0; //@line 12732
   if (!$15) {
    $$038$sink$i = $$03842$i; //@line 12735
   } else {
    HEAP32[$$03842$i >> 2] = $15; //@line 12737
    $$038$sink$i = $15 + 8 | 0; //@line 12739
   }
   HEAP32[$$038$sink$i >> 2] = HEAP32[$12 + 8 >> 2]; //@line 12743
   _equeue_mutex_unlock($7); //@line 12744
   $$1$i9 = $12; //@line 12745
  }
 } while (0);
 do {
  if ((label | 0) == 9) {
   $21 = $4 + 28 | 0; //@line 12750
   $22 = HEAP32[$21 >> 2] | 0; //@line 12751
   if ($22 >>> 0 < $6 >>> 0) {
    _equeue_mutex_unlock($7); //@line 12754
    $$0 = 0; //@line 12755
    $34 = ___async_retval; //@line 12756
    HEAP32[$34 >> 2] = $$0; //@line 12757
    return;
   } else {
    $24 = $4 + 32 | 0; //@line 12760
    $25 = HEAP32[$24 >> 2] | 0; //@line 12761
    HEAP32[$24 >> 2] = $25 + $6; //@line 12763
    HEAP32[$21 >> 2] = $22 - $6; //@line 12765
    HEAP32[$25 >> 2] = $6; //@line 12766
    HEAP8[$25 + 4 >> 0] = 1; //@line 12768
    _equeue_mutex_unlock($7); //@line 12769
    if (!$25) {
     $$0 = 0; //@line 12772
    } else {
     $$1$i9 = $25; //@line 12774
     break;
    }
    $34 = ___async_retval; //@line 12777
    HEAP32[$34 >> 2] = $$0; //@line 12778
    return;
   }
  }
 } while (0);
 HEAP32[$$1$i9 + 20 >> 2] = 0; //@line 12784
 HEAP32[$$1$i9 + 24 >> 2] = -1; //@line 12786
 HEAP32[$$1$i9 + 28 >> 2] = 0; //@line 12788
 $$0 = $$1$i9 + 36 | 0; //@line 12790
 $34 = ___async_retval; //@line 12791
 HEAP32[$34 >> 2] = $$0; //@line 12792
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $19 = 0, $28 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 18025
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 18031
  } else {
   $9 = HEAP32[$0 + 12 >> 2] | 0; //@line 18035
   $10 = $0 + 16 + ($9 << 3) | 0; //@line 18036
   $AsyncCtx3 = _emscripten_alloc_async_context(28, sp) | 0; //@line 18037
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0 + 16 | 0, $1, $2, $3); //@line 18038
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 741; //@line 18041
    HEAP32[$AsyncCtx3 + 4 >> 2] = $9; //@line 18043
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 18045
    HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 18047
    HEAP32[$AsyncCtx3 + 16 >> 2] = $2; //@line 18049
    HEAP32[$AsyncCtx3 + 20 >> 2] = $3; //@line 18051
    HEAP32[$AsyncCtx3 + 24 >> 2] = $10; //@line 18053
    sp = STACKTOP; //@line 18054
    return;
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 18057
   if (($9 | 0) > 1) {
    $19 = $1 + 54 | 0; //@line 18061
    $$0 = $0 + 24 | 0; //@line 18062
    while (1) {
     $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 18064
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($$0, $1, $2, $3); //@line 18065
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 18070
     if (HEAP8[$19 >> 0] | 0) {
      break L1;
     }
     $28 = $$0 + 8 | 0; //@line 18076
     if ($28 >>> 0 < $10 >>> 0) {
      $$0 = $28; //@line 18079
     } else {
      break L1;
     }
    }
    HEAP32[$AsyncCtx >> 2] = 742; //@line 18084
    HEAP32[$AsyncCtx + 4 >> 2] = $19; //@line 18086
    HEAP32[$AsyncCtx + 8 >> 2] = $$0; //@line 18088
    HEAP32[$AsyncCtx + 12 >> 2] = $10; //@line 18090
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 18092
    HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 18094
    HEAP32[$AsyncCtx + 24 >> 2] = $3; //@line 18096
    sp = STACKTOP; //@line 18097
    return;
   }
  }
 } while (0);
 return;
}
function _equeue_dealloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$02329$i = 0, $$02330$i = 0, $$025$i = 0, $$sink$in$i = 0, $$sink21$i = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $2 = 0, $25 = 0, $4 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3294
 $2 = $1 + -36 | 0; //@line 3295
 $4 = HEAP32[$1 + -8 >> 2] | 0; //@line 3297
 do {
  if ($4 | 0) {
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 3301
   FUNCTION_TABLE_vi[$4 & 1023]($1); //@line 3302
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 130; //@line 3305
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 3307
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 3309
    HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 3311
    sp = STACKTOP; //@line 3312
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 3315
    break;
   }
  }
 } while (0);
 $9 = $0 + 156 | 0; //@line 3320
 _equeue_mutex_lock($9); //@line 3321
 $10 = $0 + 24 | 0; //@line 3322
 $11 = HEAP32[$10 >> 2] | 0; //@line 3323
 L7 : do {
  if (!$11) {
   $$02329$i = $10; //@line 3327
  } else {
   $13 = HEAP32[$2 >> 2] | 0; //@line 3329
   $$025$i = $10; //@line 3330
   $15 = $11; //@line 3330
   while (1) {
    $14 = HEAP32[$15 >> 2] | 0; //@line 3332
    if ($14 >>> 0 >= $13 >>> 0) {
     break;
    }
    $17 = $15 + 8 | 0; //@line 3337
    $18 = HEAP32[$17 >> 2] | 0; //@line 3338
    if (!$18) {
     $$02329$i = $17; //@line 3341
     break L7;
    } else {
     $$025$i = $17; //@line 3344
     $15 = $18; //@line 3344
    }
   }
   if (($14 | 0) == ($13 | 0)) {
    HEAP32[$1 + -24 >> 2] = $15; //@line 3350
    $$02330$i = $$025$i; //@line 3353
    $$sink$in$i = (HEAP32[$$025$i >> 2] | 0) + 8 | 0; //@line 3353
    $$sink21$i = HEAP32[$$sink$in$i >> 2] | 0; //@line 3354
    $25 = $1 + -28 | 0; //@line 3355
    HEAP32[$25 >> 2] = $$sink21$i; //@line 3356
    HEAP32[$$02330$i >> 2] = $2; //@line 3357
    _equeue_mutex_unlock($9); //@line 3358
    return;
   } else {
    $$02329$i = $$025$i; //@line 3361
   }
  }
 } while (0);
 HEAP32[$1 + -24 >> 2] = 0; //@line 3366
 $$02330$i = $$02329$i; //@line 3367
 $$sink$in$i = $$02329$i; //@line 3367
 $$sink21$i = HEAP32[$$sink$in$i >> 2] | 0; //@line 3368
 $25 = $1 + -28 | 0; //@line 3369
 HEAP32[$25 >> 2] = $$sink21$i; //@line 3370
 HEAP32[$$02330$i >> 2] = $2; //@line 3371
 _equeue_mutex_unlock($9); //@line 3372
 return;
}
function __ZN7LoRaMacD2Ev__async_cb_285($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 18975
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18977
 $4 = HEAP32[$2 + 1828 >> 2] | 0; //@line 18979
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 18984
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 18985
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 1816 | 0); //@line 18986
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 379; //@line 18989
   $9 = $ReallocAsyncCtx4 + 4 | 0; //@line 18990
   HEAP32[$9 >> 2] = $2; //@line 18991
   sp = STACKTOP; //@line 18992
   return;
  }
  ___async_unwind = 0; //@line 18995
  HEAP32[$ReallocAsyncCtx4 >> 2] = 379; //@line 18996
  $9 = $ReallocAsyncCtx4 + 4 | 0; //@line 18997
  HEAP32[$9 >> 2] = $2; //@line 18998
  sp = STACKTOP; //@line 18999
  return;
 }
 $11 = HEAP32[$2 + 1808 >> 2] | 0; //@line 19003
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 19008
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 19009
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 1796 | 0); //@line 19010
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 380; //@line 19013
   $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 19014
   HEAP32[$16 >> 2] = $2; //@line 19015
   sp = STACKTOP; //@line 19016
   return;
  }
  ___async_unwind = 0; //@line 19019
  HEAP32[$ReallocAsyncCtx5 >> 2] = 380; //@line 19020
  $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 19021
  HEAP32[$16 >> 2] = $2; //@line 19022
  sp = STACKTOP; //@line 19023
  return;
 }
 $18 = HEAP32[$2 + 748 >> 2] | 0; //@line 19027
 if (!$18) {
  __ZN12LoRaPHYEU868D2Ev($2 + 4 | 0); //@line 19031
  return;
 }
 $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 19036
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 19037
 FUNCTION_TABLE_vi[$22 & 1023]($2 + 736 | 0); //@line 19038
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 381; //@line 19041
  $23 = $ReallocAsyncCtx6 + 4 | 0; //@line 19042
  HEAP32[$23 >> 2] = $2; //@line 19043
  sp = STACKTOP; //@line 19044
  return;
 }
 ___async_unwind = 0; //@line 19047
 HEAP32[$ReallocAsyncCtx6 >> 2] = 381; //@line 19048
 $23 = $ReallocAsyncCtx6 + 4 | 0; //@line 19049
 HEAP32[$23 >> 2] = $2; //@line 19050
 sp = STACKTOP; //@line 19051
 return;
}
function __ZN12LoRaWANStack24process_connecting_stateER14lorawan_status($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $2 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx4 = 0, $AsyncCtx8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 10518
 STACKTOP = STACKTOP + 16 | 0; //@line 10519
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10519
 $vararg_buffer1 = sp + 8 | 0; //@line 10520
 $vararg_buffer = sp; //@line 10521
 $2 = $0 + 2496 | 0; //@line 10522
 switch (HEAP32[$2 >> 2] | 0) {
 case 11:
 case 2:
  {
   break;
  }
 default:
  {
   HEAP32[$1 >> 2] = -1e3; //@line 10529
   STACKTOP = sp; //@line 10530
   return;
  }
 }
 $5 = HEAP32[$0 + 2904 >> 2] | 0; //@line 10534
 if ($5 & 4 | 0) {
  _mbed_tracef(16, 12211, 12611, $vararg_buffer); //@line 10538
  HEAP32[$1 >> 2] = 0; //@line 10539
  STACKTOP = sp; //@line 10540
  return;
 }
 HEAP32[$2 >> 2] = 3; //@line 10542
 if ($5 & 8 | 0) {
  $AsyncCtx8 = _emscripten_alloc_async_context(4, sp) | 0; //@line 10546
  __ZN12LoRaWANStack21process_joining_stateER14lorawan_status($0, $1); //@line 10547
  if (___async) {
   HEAP32[$AsyncCtx8 >> 2] = 344; //@line 10550
   sp = STACKTOP; //@line 10551
   STACKTOP = sp; //@line 10552
   return;
  }
  _emscripten_free_async_context($AsyncCtx8 | 0); //@line 10554
  STACKTOP = sp; //@line 10555
  return;
 }
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 10557
 $10 = __ZN7LoRaMac4joinEb($0, 0) | 0; //@line 10558
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 345; //@line 10561
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 10563
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer1; //@line 10565
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer1; //@line 10567
  HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 10569
  sp = STACKTOP; //@line 10570
  STACKTOP = sp; //@line 10571
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 10573
 HEAP32[$1 >> 2] = $10; //@line 10574
 _mbed_tracef(16, 12211, 12629, $vararg_buffer1); //@line 10575
 $AsyncCtx4 = _emscripten_alloc_async_context(4, sp) | 0; //@line 10576
 __ZN12LoRaWANStack23process_connected_stateEv($0); //@line 10577
 if (___async) {
  HEAP32[$AsyncCtx4 >> 2] = 346; //@line 10580
  sp = STACKTOP; //@line 10581
  STACKTOP = sp; //@line 10582
  return;
 }
 _emscripten_free_async_context($AsyncCtx4 | 0); //@line 10584
 STACKTOP = sp; //@line 10585
 return;
}
function _mbedtls_cipher_cmac_update__async_cb_228($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $4 = 0, $42 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 13754
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13756
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13758
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13760
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13762
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13764
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13766
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 13768
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 13770
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 13772
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 13774
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 13776
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 13779
  $42 = ___async_retval; //@line 13780
  HEAP32[$42 >> 2] = $$0; //@line 13781
  return;
 }
 $24 = $2 + 1 | 0; //@line 13784
 if ($24 >>> 0 < $4 >>> 0) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(44) | 0; //@line 13787
  $22 = _mbedtls_cipher_update($8, $10, 0, $10, $12) | 0; //@line 13788
  if (!___async) {
   HEAP32[___async_retval >> 2] = $22; //@line 13792
   ___async_unwind = 0; //@line 13793
  }
  HEAP32[$ReallocAsyncCtx2 >> 2] = 597; //@line 13795
  HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $24; //@line 13797
  HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 13799
  HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 13801
  HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 13803
  HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 13805
  HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 13807
  HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $14; //@line 13809
  HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $16; //@line 13811
  HEAP32[$ReallocAsyncCtx2 + 36 >> 2] = $18; //@line 13813
  HEAP32[$ReallocAsyncCtx2 + 40 >> 2] = $20; //@line 13815
  sp = STACKTOP; //@line 13816
  return;
 }
 if (!$14) {
  $$0 = 0; //@line 13821
  $42 = ___async_retval; //@line 13822
  HEAP32[$42 >> 2] = $$0; //@line 13823
  return;
 }
 _memcpy((HEAP32[$18 >> 2] | 0) + ($20 + 16) | 0, $16 | 0, $14 | 0) | 0; //@line 13828
 HEAP32[$18 >> 2] = (HEAP32[$18 >> 2] | 0) + $14; //@line 13831
 $$0 = 0; //@line 13832
 $42 = ___async_retval; //@line 13833
 HEAP32[$42 >> 2] = $$0; //@line 13834
 return;
}
function _mbedtls_cipher_cmac_finish__async_cb_280($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 18299
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18301
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18303
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18305
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18307
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18309
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18311
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18313
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 18315
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 18317
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 18319
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 18321
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 18323
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 18325
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 18327
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 18329
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 18331
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(76) | 0; //@line 18332
 _mbedtls_platform_zeroize($32, 16); //@line 18333
 if (!___async) {
  ___async_unwind = 0; //@line 18336
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 601; //@line 18338
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $2; //@line 18340
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $4; //@line 18342
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $6; //@line 18344
 HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $8; //@line 18346
 HEAP32[$ReallocAsyncCtx6 + 20 >> 2] = $10; //@line 18348
 HEAP32[$ReallocAsyncCtx6 + 24 >> 2] = $12; //@line 18350
 HEAP32[$ReallocAsyncCtx6 + 28 >> 2] = $14; //@line 18352
 HEAP32[$ReallocAsyncCtx6 + 32 >> 2] = $32; //@line 18354
 HEAP32[$ReallocAsyncCtx6 + 36 >> 2] = $16; //@line 18356
 HEAP32[$ReallocAsyncCtx6 + 40 >> 2] = $18; //@line 18358
 HEAP32[$ReallocAsyncCtx6 + 44 >> 2] = $20; //@line 18360
 HEAP32[$ReallocAsyncCtx6 + 48 >> 2] = $22; //@line 18362
 HEAP32[$ReallocAsyncCtx6 + 52 >> 2] = $24; //@line 18364
 HEAP32[$ReallocAsyncCtx6 + 56 >> 2] = $26; //@line 18366
 HEAP32[$ReallocAsyncCtx6 + 60 >> 2] = $28; //@line 18368
 HEAP32[$ReallocAsyncCtx6 + 64 >> 2] = $30; //@line 18370
 HEAP32[$ReallocAsyncCtx6 + 68 >> 2] = $16; //@line 18372
 HEAP32[$ReallocAsyncCtx6 + 72 >> 2] = $32; //@line 18374
 sp = STACKTOP; //@line 18375
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_306($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 21114
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21118
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21120
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21122
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 21124
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 21125
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 21129
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 21130
  FUNCTION_TABLE_vi[$13 & 1023]($6); //@line 21131
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 305; //@line 21134
   $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 21135
   HEAP32[$14 >> 2] = $4; //@line 21136
   $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 21137
   HEAP32[$15 >> 2] = $AsyncRetVal; //@line 21138
   $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 21139
   HEAP32[$16 >> 2] = $8; //@line 21140
   sp = STACKTOP; //@line 21141
   return;
  }
  ___async_unwind = 0; //@line 21144
  HEAP32[$ReallocAsyncCtx4 >> 2] = 305; //@line 21145
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 21146
  HEAP32[$14 >> 2] = $4; //@line 21147
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 21148
  HEAP32[$15 >> 2] = $AsyncRetVal; //@line 21149
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 21150
  HEAP32[$16 >> 2] = $8; //@line 21151
  sp = STACKTOP; //@line 21152
  return;
 }
 $17 = HEAP32[$4 >> 2] | 0; //@line 21155
 if (!$17) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 21159
  return;
 }
 $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 21163
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 21164
 FUNCTION_TABLE_vi[$20 & 1023]($8); //@line 21165
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 306; //@line 21168
  $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 21169
  HEAP32[$21 >> 2] = $AsyncRetVal; //@line 21170
  sp = STACKTOP; //@line 21171
  return;
 }
 ___async_unwind = 0; //@line 21174
 HEAP32[$ReallocAsyncCtx5 >> 2] = 306; //@line 21175
 $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 21176
 HEAP32[$21 >> 2] = $AsyncRetVal; //@line 21177
 sp = STACKTOP; //@line 21178
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_119($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 27795
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27799
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27801
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27803
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 27805
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 27806
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 27810
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 27811
  FUNCTION_TABLE_vi[$13 & 1023]($6); //@line 27812
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 274; //@line 27815
   $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 27816
   HEAP32[$14 >> 2] = $4; //@line 27817
   $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 27818
   HEAP32[$15 >> 2] = $AsyncRetVal; //@line 27819
   $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 27820
   HEAP32[$16 >> 2] = $8; //@line 27821
   sp = STACKTOP; //@line 27822
   return;
  }
  ___async_unwind = 0; //@line 27825
  HEAP32[$ReallocAsyncCtx4 >> 2] = 274; //@line 27826
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 27827
  HEAP32[$14 >> 2] = $4; //@line 27828
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 27829
  HEAP32[$15 >> 2] = $AsyncRetVal; //@line 27830
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 27831
  HEAP32[$16 >> 2] = $8; //@line 27832
  sp = STACKTOP; //@line 27833
  return;
 }
 $17 = HEAP32[$4 >> 2] | 0; //@line 27836
 if (!$17) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 27840
  return;
 }
 $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 27844
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 27845
 FUNCTION_TABLE_vi[$20 & 1023]($8); //@line 27846
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 275; //@line 27849
  $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 27850
  HEAP32[$21 >> 2] = $AsyncRetVal; //@line 27851
  sp = STACKTOP; //@line 27852
  return;
 }
 ___async_unwind = 0; //@line 27855
 HEAP32[$ReallocAsyncCtx5 >> 2] = 275; //@line 27856
 $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 27857
 HEAP32[$21 >> 2] = $AsyncRetVal; //@line 27858
 sp = STACKTOP; //@line 27859
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_317($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 22024
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22028
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22030
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22032
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 22034
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 22035
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 22039
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 22040
  FUNCTION_TABLE_vi[$13 & 1023]($6); //@line 22041
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 331; //@line 22044
   $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 22045
   HEAP32[$14 >> 2] = $4; //@line 22046
   $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 22047
   HEAP32[$15 >> 2] = $AsyncRetVal; //@line 22048
   $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 22049
   HEAP32[$16 >> 2] = $8; //@line 22050
   sp = STACKTOP; //@line 22051
   return;
  }
  ___async_unwind = 0; //@line 22054
  HEAP32[$ReallocAsyncCtx4 >> 2] = 331; //@line 22055
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 22056
  HEAP32[$14 >> 2] = $4; //@line 22057
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 22058
  HEAP32[$15 >> 2] = $AsyncRetVal; //@line 22059
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 22060
  HEAP32[$16 >> 2] = $8; //@line 22061
  sp = STACKTOP; //@line 22062
  return;
 }
 $17 = HEAP32[$4 >> 2] | 0; //@line 22065
 if (!$17) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 22069
  return;
 }
 $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 22073
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 22074
 FUNCTION_TABLE_vi[$20 & 1023]($8); //@line 22075
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 332; //@line 22078
  $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 22079
  HEAP32[$21 >> 2] = $AsyncRetVal; //@line 22080
  sp = STACKTOP; //@line 22081
  return;
 }
 ___async_unwind = 0; //@line 22084
 HEAP32[$ReallocAsyncCtx5 >> 2] = 332; //@line 22085
 $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 22086
 HEAP32[$21 >> 2] = $AsyncRetVal; //@line 22087
 sp = STACKTOP; //@line 22088
 return;
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_183($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 32406
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32410
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32412
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32414
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32416
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 32418
 $13 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 32419
 if (!$13) {
  HEAP32[$6 + 1788 >> 2] = __ZN18LoRaWANTimeHandler16get_current_timeEv($4) | 0; //@line 32424
  HEAP8[$6 + 1936 >> 0] = 1; //@line 32426
  HEAP8[$8 >> 0] = 1; //@line 32427
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(4) | 0; //@line 32428
  __ZN7LoRaPHY25setup_public_network_modeEb($10, 1); //@line 32429
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 474; //@line 32432
   sp = STACKTOP; //@line 32433
   return;
  }
  ___async_unwind = 0; //@line 32436
  HEAP32[$ReallocAsyncCtx10 >> 2] = 474; //@line 32437
  sp = STACKTOP; //@line 32438
  return;
 } else {
  $16 = HEAP32[$13 + 8 >> 2] | 0; //@line 32442
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 32443
  FUNCTION_TABLE_vi[$16 & 1023]($12); //@line 32444
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 473; //@line 32447
   $17 = $ReallocAsyncCtx4 + 4 | 0; //@line 32448
   HEAP32[$17 >> 2] = $4; //@line 32449
   $18 = $ReallocAsyncCtx4 + 8 | 0; //@line 32450
   HEAP32[$18 >> 2] = $6; //@line 32451
   $19 = $ReallocAsyncCtx4 + 12 | 0; //@line 32452
   HEAP32[$19 >> 2] = $8; //@line 32453
   $20 = $ReallocAsyncCtx4 + 16 | 0; //@line 32454
   HEAP32[$20 >> 2] = $10; //@line 32455
   sp = STACKTOP; //@line 32456
   return;
  }
  ___async_unwind = 0; //@line 32459
  HEAP32[$ReallocAsyncCtx4 >> 2] = 473; //@line 32460
  $17 = $ReallocAsyncCtx4 + 4 | 0; //@line 32461
  HEAP32[$17 >> 2] = $4; //@line 32462
  $18 = $ReallocAsyncCtx4 + 8 | 0; //@line 32463
  HEAP32[$18 >> 2] = $6; //@line 32464
  $19 = $ReallocAsyncCtx4 + 12 | 0; //@line 32465
  HEAP32[$19 >> 2] = $8; //@line 32466
  $20 = $ReallocAsyncCtx4 + 16 | 0; //@line 32467
  HEAP32[$20 >> 2] = $10; //@line 32468
  sp = STACKTOP; //@line 32469
  return;
 }
}
function ___mo_lookup($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$090 = 0, $$094 = 0, $$4 = 0, $10 = 0, $13 = 0, $17 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $31 = 0, $35 = 0, $4 = 0, $44 = 0, $46 = 0, $49 = 0, $53 = 0, $63 = 0, $7 = 0;
 $4 = (HEAP32[$0 >> 2] | 0) + 1794895138 | 0; //@line 12107
 $7 = _swapc(HEAP32[$0 + 8 >> 2] | 0, $4) | 0; //@line 12110
 $10 = _swapc(HEAP32[$0 + 12 >> 2] | 0, $4) | 0; //@line 12113
 $13 = _swapc(HEAP32[$0 + 16 >> 2] | 0, $4) | 0; //@line 12116
 L1 : do {
  if ($7 >>> 0 < $1 >>> 2 >>> 0) {
   $17 = $1 - ($7 << 2) | 0; //@line 12122
   if ($10 >>> 0 < $17 >>> 0 & $13 >>> 0 < $17 >>> 0) {
    if (!(($13 | $10) & 3)) {
     $23 = $10 >>> 2; //@line 12131
     $24 = $13 >>> 2; //@line 12132
     $$090 = 0; //@line 12133
     $$094 = $7; //@line 12133
     while (1) {
      $25 = $$094 >>> 1; //@line 12135
      $26 = $$090 + $25 | 0; //@line 12136
      $27 = $26 << 1; //@line 12137
      $28 = $27 + $23 | 0; //@line 12138
      $31 = _swapc(HEAP32[$0 + ($28 << 2) >> 2] | 0, $4) | 0; //@line 12141
      $35 = _swapc(HEAP32[$0 + ($28 + 1 << 2) >> 2] | 0, $4) | 0; //@line 12145
      if (!($35 >>> 0 < $1 >>> 0 & $31 >>> 0 < ($1 - $35 | 0) >>> 0)) {
       $$4 = 0; //@line 12151
       break L1;
      }
      if (HEAP8[$0 + ($35 + $31) >> 0] | 0) {
       $$4 = 0; //@line 12159
       break L1;
      }
      $44 = _strcmp($2, $0 + $35 | 0) | 0; //@line 12163
      if (!$44) {
       break;
      }
      $63 = ($44 | 0) < 0; //@line 12169
      if (($$094 | 0) == 1) {
       $$4 = 0; //@line 12174
       break L1;
      } else {
       $$090 = $63 ? $$090 : $26; //@line 12177
       $$094 = $63 ? $25 : $$094 - $25 | 0; //@line 12177
      }
     }
     $46 = $27 + $24 | 0; //@line 12180
     $49 = _swapc(HEAP32[$0 + ($46 << 2) >> 2] | 0, $4) | 0; //@line 12183
     $53 = _swapc(HEAP32[$0 + ($46 + 1 << 2) >> 2] | 0, $4) | 0; //@line 12187
     if ($53 >>> 0 < $1 >>> 0 & $49 >>> 0 < ($1 - $53 | 0) >>> 0) {
      $$4 = (HEAP8[$0 + ($53 + $49) >> 0] | 0) == 0 ? $0 + $53 | 0 : 0; //@line 12199
     } else {
      $$4 = 0; //@line 12201
     }
    } else {
     $$4 = 0; //@line 12204
    }
   } else {
    $$4 = 0; //@line 12207
   }
  } else {
   $$4 = 0; //@line 12210
  }
 } while (0);
 return $$4 | 0; //@line 12213
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_142($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 29206
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29210
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29212
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29214
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29216
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 29217
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 29221
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 29222
  FUNCTION_TABLE_vi[$13 & 1023]($6); //@line 29223
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 228; //@line 29226
   $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 29227
   HEAP32[$14 >> 2] = $4; //@line 29228
   $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 29229
   HEAP32[$15 >> 2] = $AsyncRetVal; //@line 29230
   $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 29231
   HEAP32[$16 >> 2] = $8; //@line 29232
   sp = STACKTOP; //@line 29233
   return;
  }
  ___async_unwind = 0; //@line 29236
  HEAP32[$ReallocAsyncCtx4 >> 2] = 228; //@line 29237
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 29238
  HEAP32[$14 >> 2] = $4; //@line 29239
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 29240
  HEAP32[$15 >> 2] = $AsyncRetVal; //@line 29241
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 29242
  HEAP32[$16 >> 2] = $8; //@line 29243
  sp = STACKTOP; //@line 29244
  return;
 }
 $17 = HEAP32[$4 >> 2] | 0; //@line 29247
 if (!$17) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 29251
  return;
 }
 $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 29255
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 29256
 FUNCTION_TABLE_vi[$20 & 1023]($8); //@line 29257
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 229; //@line 29260
  $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 29261
  HEAP32[$21 >> 2] = $AsyncRetVal; //@line 29262
  sp = STACKTOP; //@line 29263
  return;
 }
 ___async_unwind = 0; //@line 29266
 HEAP32[$ReallocAsyncCtx5 >> 2] = 229; //@line 29267
 $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 29268
 HEAP32[$21 >> 2] = $AsyncRetVal; //@line 29269
 sp = STACKTOP; //@line 29270
 return;
}
function __ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_95($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 26305
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26309
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26311
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 26313
 $8 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 26314
 if ($8 | 0) {
  $11 = HEAP32[$8 + 8 >> 2] | 0; //@line 26318
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 26319
  FUNCTION_TABLE_vi[$11 & 1023]($4); //@line 26320
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 238; //@line 26323
   $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 26324
   HEAP32[$12 >> 2] = $AsyncRetVal; //@line 26325
   $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 26326
   HEAP32[$13 >> 2] = $4; //@line 26327
   $14 = $ReallocAsyncCtx2 + 12 | 0; //@line 26328
   HEAP32[$14 >> 2] = $6; //@line 26329
   sp = STACKTOP; //@line 26330
   return;
  }
  ___async_unwind = 0; //@line 26333
  HEAP32[$ReallocAsyncCtx2 >> 2] = 238; //@line 26334
  $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 26335
  HEAP32[$12 >> 2] = $AsyncRetVal; //@line 26336
  $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 26337
  HEAP32[$13 >> 2] = $4; //@line 26338
  $14 = $ReallocAsyncCtx2 + 12 | 0; //@line 26339
  HEAP32[$14 >> 2] = $6; //@line 26340
  sp = STACKTOP; //@line 26341
  return;
 }
 if ($AsyncRetVal | 0) {
  HEAP32[$6 >> 2] = 2; //@line 26346
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 26349
 _mbed_assert_internal(12104, 12113, 775); //@line 26350
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 239; //@line 26353
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 26354
  HEAP32[$16 >> 2] = $4; //@line 26355
  $17 = $ReallocAsyncCtx6 + 8 | 0; //@line 26356
  HEAP32[$17 >> 2] = $6; //@line 26357
  sp = STACKTOP; //@line 26358
  return;
 }
 ___async_unwind = 0; //@line 26361
 HEAP32[$ReallocAsyncCtx6 >> 2] = 239; //@line 26362
 $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 26363
 HEAP32[$16 >> 2] = $4; //@line 26364
 $17 = $ReallocAsyncCtx6 + 8 | 0; //@line 26365
 HEAP32[$17 >> 2] = $6; //@line 26366
 sp = STACKTOP; //@line 26367
 return;
}
function __ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_98($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 26572
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26574
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26576
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26578
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 26580
 if (!$AsyncRetVal) {
  $9 = $2 + 16 | 0; //@line 26583
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 26584
  $10 = _mbedtls_cipher_cmac_finish($4, $9) | 0; //@line 26585
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 508; //@line 26588
   $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 26589
   HEAP32[$11 >> 2] = $2; //@line 26590
   $12 = $ReallocAsyncCtx2 + 8 | 0; //@line 26591
   HEAP32[$12 >> 2] = $9; //@line 26592
   $13 = $ReallocAsyncCtx2 + 12 | 0; //@line 26593
   HEAP32[$13 >> 2] = $6; //@line 26594
   $14 = $ReallocAsyncCtx2 + 16 | 0; //@line 26595
   HEAP32[$14 >> 2] = $4; //@line 26596
   sp = STACKTOP; //@line 26597
   return;
  }
  HEAP32[___async_retval >> 2] = $10; //@line 26601
  ___async_unwind = 0; //@line 26602
  HEAP32[$ReallocAsyncCtx2 >> 2] = 508; //@line 26603
  $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 26604
  HEAP32[$11 >> 2] = $2; //@line 26605
  $12 = $ReallocAsyncCtx2 + 8 | 0; //@line 26606
  HEAP32[$12 >> 2] = $9; //@line 26607
  $13 = $ReallocAsyncCtx2 + 12 | 0; //@line 26608
  HEAP32[$13 >> 2] = $6; //@line 26609
  $14 = $ReallocAsyncCtx2 + 16 | 0; //@line 26610
  HEAP32[$14 >> 2] = $4; //@line 26611
  sp = STACKTOP; //@line 26612
  return;
 } else {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 26615
  _mbedtls_cipher_free($4); //@line 26616
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 509; //@line 26619
   $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 26620
   HEAP32[$16 >> 2] = $AsyncRetVal; //@line 26621
   sp = STACKTOP; //@line 26622
   return;
  }
  ___async_unwind = 0; //@line 26625
  HEAP32[$ReallocAsyncCtx5 >> 2] = 509; //@line 26626
  $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 26627
  HEAP32[$16 >> 2] = $AsyncRetVal; //@line 26628
  sp = STACKTOP; //@line 26629
  return;
 }
}
function __ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $17 = 0, $18 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $29 = 0, $30 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 24675
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24679
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24681
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24683
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 24685
 $12 = (HEAP8[$0 + 4 >> 0] | 0) + 1 << 24 >> 24; //@line 24687
 if ($AsyncRetVal | 0) {
  $30 = $AsyncRetVal; //@line 24689
  $29 = ___async_retval; //@line 24690
  HEAP32[$29 >> 2] = $30; //@line 24691
  return;
 }
 if (($12 & 255) >= (HEAPU8[$4 >> 0] | 0)) {
  $30 = 0; //@line 24697
  $29 = ___async_retval; //@line 24698
  HEAP32[$29 >> 2] = $30; //@line 24699
  return;
 }
 $13 = $12 & 255; //@line 24702
 $14 = HEAP32[$6 >> 2] | 0; //@line 24703
 $17 = HEAP32[(HEAP32[$14 >> 2] | 0) + 60 >> 2] | 0; //@line 24706
 $18 = HEAP32[$8 >> 2] | 0; //@line 24707
 $21 = HEAP8[$18 + ($13 << 4) >> 0] | 0; //@line 24710
 $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 24711
 $22 = FUNCTION_TABLE_iiii[$17 & 31]($14, $18 + ($13 << 4) + 4 | 0, $21) | 0; //@line 24712
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 484; //@line 24715
  $23 = $ReallocAsyncCtx + 4 | 0; //@line 24716
  HEAP8[$23 >> 0] = $12; //@line 24717
  $24 = $ReallocAsyncCtx + 8 | 0; //@line 24718
  HEAP32[$24 >> 2] = $4; //@line 24719
  $25 = $ReallocAsyncCtx + 12 | 0; //@line 24720
  HEAP32[$25 >> 2] = $6; //@line 24721
  $26 = $ReallocAsyncCtx + 16 | 0; //@line 24722
  HEAP32[$26 >> 2] = $8; //@line 24723
  sp = STACKTOP; //@line 24724
  return;
 }
 HEAP32[___async_retval >> 2] = $22; //@line 24728
 ___async_unwind = 0; //@line 24729
 HEAP32[$ReallocAsyncCtx >> 2] = 484; //@line 24730
 $23 = $ReallocAsyncCtx + 4 | 0; //@line 24731
 HEAP8[$23 >> 0] = $12; //@line 24732
 $24 = $ReallocAsyncCtx + 8 | 0; //@line 24733
 HEAP32[$24 >> 2] = $4; //@line 24734
 $25 = $ReallocAsyncCtx + 12 | 0; //@line 24735
 HEAP32[$25 >> 2] = $6; //@line 24736
 $26 = $ReallocAsyncCtx + 16 | 0; //@line 24737
 HEAP32[$26 >> 2] = $8; //@line 24738
 sp = STACKTOP; //@line 24739
 return;
}
function __ZN16SX1276_LoRaRadio8transmitEj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 28110
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28112
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28114
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28116
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28118
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28120
 $11 = HEAP32[$2 >> 2] | 0; //@line 28121
 if ($11 | 0) {
  $14 = HEAP32[$11 + 4 >> 2] | 0; //@line 28125
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 28126
  FUNCTION_TABLE_vii[$14 & 15]($6, $8); //@line 28127
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 94; //@line 28130
   $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 28131
   HEAP32[$15 >> 2] = $2; //@line 28132
   $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 28133
   HEAP32[$16 >> 2] = $4; //@line 28134
   $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 28135
   HEAP32[$17 >> 2] = $10; //@line 28136
   $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 28137
   HEAP32[$18 >> 2] = $8; //@line 28138
   sp = STACKTOP; //@line 28139
   return;
  }
  ___async_unwind = 0; //@line 28142
  HEAP32[$ReallocAsyncCtx2 >> 2] = 94; //@line 28143
  $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 28144
  HEAP32[$15 >> 2] = $2; //@line 28145
  $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 28146
  HEAP32[$16 >> 2] = $4; //@line 28147
  $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 28148
  HEAP32[$17 >> 2] = $10; //@line 28149
  $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 28150
  HEAP32[$18 >> 2] = $8; //@line 28151
  sp = STACKTOP; //@line 28152
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 28155
 __ZN4mbed6Ticker5setupEy($10, 1e5, 0); //@line 28156
 $19 = HEAP32[$2 >> 2] | 0; //@line 28157
 if (!$19) {
  return;
 }
 $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 28163
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 28164
 FUNCTION_TABLE_vi[$22 & 1023]($8); //@line 28165
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 95; //@line 28168
  sp = STACKTOP; //@line 28169
  return;
 }
 ___async_unwind = 0; //@line 28172
 HEAP32[$ReallocAsyncCtx3 >> 2] = 95; //@line 28173
 sp = STACKTOP; //@line 28174
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 23680
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23682
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23684
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23686
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23688
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23690
 $11 = HEAP32[$2 >> 2] | 0; //@line 23691
 if ($11 | 0) {
  $14 = HEAP32[$11 + 4 >> 2] | 0; //@line 23695
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 23696
  FUNCTION_TABLE_vii[$14 & 15]($6, $8); //@line 23697
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 53; //@line 23700
   $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 23701
   HEAP32[$15 >> 2] = $2; //@line 23702
   $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 23703
   HEAP32[$16 >> 2] = $4; //@line 23704
   $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 23705
   HEAP32[$17 >> 2] = $10; //@line 23706
   $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 23707
   HEAP32[$18 >> 2] = $8; //@line 23708
   sp = STACKTOP; //@line 23709
   return;
  }
  ___async_unwind = 0; //@line 23712
  HEAP32[$ReallocAsyncCtx2 >> 2] = 53; //@line 23713
  $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 23714
  HEAP32[$15 >> 2] = $2; //@line 23715
  $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 23716
  HEAP32[$16 >> 2] = $4; //@line 23717
  $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 23718
  HEAP32[$17 >> 2] = $10; //@line 23719
  $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 23720
  HEAP32[$18 >> 2] = $8; //@line 23721
  sp = STACKTOP; //@line 23722
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 23725
 __ZN4mbed6Ticker5setupEy($10, 2e5, 0); //@line 23726
 $19 = HEAP32[$2 >> 2] | 0; //@line 23727
 if (!$19) {
  return;
 }
 $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 23733
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 23734
 FUNCTION_TABLE_vi[$22 & 1023]($8); //@line 23735
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 54; //@line 23738
  sp = STACKTOP; //@line 23739
  return;
 }
 ___async_unwind = 0; //@line 23742
 HEAP32[$ReallocAsyncCtx3 >> 2] = 54; //@line 23743
 sp = STACKTOP; //@line 23744
 return;
}
function _fputc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $19 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $32 = 0, $34 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 16335
 if ((HEAP32[$1 + 76 >> 2] | 0) < 0) {
  label = 3; //@line 16340
 } else {
  if (!(___lockfile($1) | 0)) {
   label = 3; //@line 16345
  } else {
   $20 = $0 & 255; //@line 16347
   $21 = $0 & 255; //@line 16348
   if (($21 | 0) == (HEAP8[$1 + 75 >> 0] | 0)) {
    label = 12; //@line 16354
   } else {
    $26 = $1 + 20 | 0; //@line 16356
    $27 = HEAP32[$26 >> 2] | 0; //@line 16357
    if ($27 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$26 >> 2] = $27 + 1; //@line 16363
     HEAP8[$27 >> 0] = $20; //@line 16364
     $34 = $21; //@line 16365
    } else {
     label = 12; //@line 16367
    }
   }
   do {
    if ((label | 0) == 12) {
     $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 16372
     $32 = ___overflow($1, $0) | 0; //@line 16373
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 718; //@line 16376
      HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 16378
      sp = STACKTOP; //@line 16379
      return 0; //@line 16380
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 16382
      $34 = $32; //@line 16383
      break;
     }
    }
   } while (0);
   ___unlockfile($1); //@line 16388
   $$0 = $34; //@line 16389
  }
 }
 do {
  if ((label | 0) == 3) {
   $7 = $0 & 255; //@line 16394
   $8 = $0 & 255; //@line 16395
   if (($8 | 0) != (HEAP8[$1 + 75 >> 0] | 0)) {
    $13 = $1 + 20 | 0; //@line 16401
    $14 = HEAP32[$13 >> 2] | 0; //@line 16402
    if ($14 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$13 >> 2] = $14 + 1; //@line 16408
     HEAP8[$14 >> 0] = $7; //@line 16409
     $$0 = $8; //@line 16410
     break;
    }
   }
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 16414
   $19 = ___overflow($1, $0) | 0; //@line 16415
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 717; //@line 16418
    sp = STACKTOP; //@line 16419
    return 0; //@line 16420
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 16422
    $$0 = $19; //@line 16423
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 16428
}
function __ZN18LoRaMacChannelPlan8get_planER16lora_channelplanPK16channel_params_t($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$037$lcssa = 0, $$03739 = 0, $$038 = 0, $$1 = 0, $10 = 0, $13 = 0, $14 = 0, $20 = 0, $26 = 0, $33 = 0, $39 = 0, $6 = 0, $8 = 0, $indvars$iv = 0, $wide$trip$count = 0;
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
  $$038 = -1002; //@line 17103
  return $$038 | 0; //@line 17104
 }
 $6 = __ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0; //@line 17107
 $8 = __ZN7LoRaPHY16get_channel_maskEb(HEAP32[$0 >> 2] | 0, 0) | 0; //@line 17109
 if (!($6 << 24 >> 24)) {
  $$037$lcssa = 0; //@line 17112
 } else {
  $10 = $1 + 4 | 0; //@line 17114
  $wide$trip$count = $6 & 255; //@line 17115
  $$03739 = 0; //@line 17116
  $indvars$iv = 0; //@line 17116
  while (1) {
   if (__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$0 >> 2] | 0, $8, $indvars$iv) | 0) {
    $13 = HEAP32[$10 >> 2] | 0; //@line 17121
    $14 = $$03739 & 255; //@line 17122
    HEAP8[$13 + ($14 << 4) >> 0] = $indvars$iv; //@line 17125
    HEAP32[$13 + ($14 << 4) + 4 >> 2] = HEAP32[$2 + ($indvars$iv * 12 | 0) >> 2]; //@line 17129
    $20 = $2 + ($indvars$iv * 12 | 0) + 8 | 0; //@line 17130
    HEAP8[$13 + ($14 << 4) + 12 >> 0] = HEAP8[$20 >> 0] | 0; //@line 17133
    $26 = (HEAP32[$10 >> 2] | 0) + ($14 << 4) + 12 | 0; //@line 17137
    HEAP8[$26 >> 0] = HEAP8[$26 >> 0] & -16 | HEAP8[$20 >> 0] & 15; //@line 17141
    $33 = (HEAP32[$10 >> 2] | 0) + ($14 << 4) + 12 | 0; //@line 17145
    HEAP8[$33 >> 0] = HEAP8[$33 >> 0] & 15 | HEAP8[$20 >> 0] & -16; //@line 17149
    $39 = HEAP32[$10 >> 2] | 0; //@line 17152
    HEAP8[$39 + ($14 << 4) + 13 >> 0] = HEAP8[$2 + ($indvars$iv * 12 | 0) + 9 >> 0] | 0; //@line 17154
    HEAP32[$39 + ($14 << 4) + 8 >> 2] = HEAP32[$2 + ($indvars$iv * 12 | 0) + 4 >> 2]; //@line 17158
    $$1 = $$03739 + 1 << 24 >> 24; //@line 17160
   } else {
    $$1 = $$03739; //@line 17162
   }
   $indvars$iv = $indvars$iv + 1 | 0; //@line 17164
   if (($indvars$iv | 0) == ($wide$trip$count | 0)) {
    $$037$lcssa = $$1; //@line 17167
    break;
   } else {
    $$03739 = $$1; //@line 17170
   }
  }
 }
 HEAP8[$1 >> 0] = $$037$lcssa; //@line 17174
 $$038 = 0; //@line 17175
 return $$038 | 0; //@line 17176
}
function __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_153($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 29913
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29915
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29917
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29919
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29921
 if (!$AsyncRetVal) {
  $9 = $2 + 16 | 0; //@line 29924
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 29925
  $10 = _mbedtls_cipher_cmac_finish($4, $9) | 0; //@line 29926
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 501; //@line 29929
   $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 29930
   HEAP32[$11 >> 2] = $2; //@line 29931
   $12 = $ReallocAsyncCtx2 + 8 | 0; //@line 29932
   HEAP32[$12 >> 2] = $9; //@line 29933
   $13 = $ReallocAsyncCtx2 + 12 | 0; //@line 29934
   HEAP32[$13 >> 2] = $6; //@line 29935
   $14 = $ReallocAsyncCtx2 + 16 | 0; //@line 29936
   HEAP32[$14 >> 2] = $4; //@line 29937
   sp = STACKTOP; //@line 29938
   return;
  }
  HEAP32[___async_retval >> 2] = $10; //@line 29942
  ___async_unwind = 0; //@line 29943
  HEAP32[$ReallocAsyncCtx2 >> 2] = 501; //@line 29944
  $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 29945
  HEAP32[$11 >> 2] = $2; //@line 29946
  $12 = $ReallocAsyncCtx2 + 8 | 0; //@line 29947
  HEAP32[$12 >> 2] = $9; //@line 29948
  $13 = $ReallocAsyncCtx2 + 12 | 0; //@line 29949
  HEAP32[$13 >> 2] = $6; //@line 29950
  $14 = $ReallocAsyncCtx2 + 16 | 0; //@line 29951
  HEAP32[$14 >> 2] = $4; //@line 29952
  sp = STACKTOP; //@line 29953
  return;
 } else {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 29956
  _mbedtls_cipher_free($4); //@line 29957
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 502; //@line 29960
   $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 29961
   HEAP32[$16 >> 2] = $AsyncRetVal; //@line 29962
   sp = STACKTOP; //@line 29963
   return;
  }
  ___async_unwind = 0; //@line 29966
  HEAP32[$ReallocAsyncCtx6 >> 2] = 502; //@line 29967
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 29968
  HEAP32[$16 >> 2] = $AsyncRetVal; //@line 29969
  sp = STACKTOP; //@line 29970
  return;
 }
}
function _putc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $19 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $32 = 0, $34 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11772
 if ((HEAP32[$1 + 76 >> 2] | 0) < 0) {
  label = 3; //@line 11777
 } else {
  if (!(___lockfile($1) | 0)) {
   label = 3; //@line 11782
  } else {
   $20 = $0 & 255; //@line 11784
   $21 = $0 & 255; //@line 11785
   if (($21 | 0) == (HEAP8[$1 + 75 >> 0] | 0)) {
    label = 12; //@line 11791
   } else {
    $26 = $1 + 20 | 0; //@line 11793
    $27 = HEAP32[$26 >> 2] | 0; //@line 11794
    if ($27 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$26 >> 2] = $27 + 1; //@line 11800
     HEAP8[$27 >> 0] = $20; //@line 11801
     $34 = $21; //@line 11802
    } else {
     label = 12; //@line 11804
    }
   }
   do {
    if ((label | 0) == 12) {
     $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 11809
     $32 = ___overflow($1, $0) | 0; //@line 11810
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 702; //@line 11813
      HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 11815
      sp = STACKTOP; //@line 11816
      return 0; //@line 11817
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 11819
      $34 = $32; //@line 11820
      break;
     }
    }
   } while (0);
   ___unlockfile($1); //@line 11825
   $$0 = $34; //@line 11826
  }
 }
 do {
  if ((label | 0) == 3) {
   $7 = $0 & 255; //@line 11831
   $8 = $0 & 255; //@line 11832
   if (($8 | 0) != (HEAP8[$1 + 75 >> 0] | 0)) {
    $13 = $1 + 20 | 0; //@line 11838
    $14 = HEAP32[$13 >> 2] | 0; //@line 11839
    if ($14 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$13 >> 2] = $14 + 1; //@line 11845
     HEAP8[$14 >> 0] = $7; //@line 11846
     $$0 = $8; //@line 11847
     break;
    }
   }
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 11851
   $19 = ___overflow($1, $0) | 0; //@line 11852
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 701; //@line 11855
    sp = STACKTOP; //@line 11856
    return 0; //@line 11857
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 11859
    $$0 = $19; //@line 11860
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 11865
}
function ___fflush_unlocked($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $22 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12492
 $1 = $0 + 20 | 0; //@line 12493
 $3 = $0 + 28 | 0; //@line 12495
 do {
  if ((HEAP32[$1 >> 2] | 0) >>> 0 > (HEAP32[$3 >> 2] | 0) >>> 0) {
   $7 = HEAP32[$0 + 36 >> 2] | 0; //@line 12501
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 12502
   FUNCTION_TABLE_iiii[$7 & 31]($0, 0, 0) | 0; //@line 12503
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 708; //@line 12506
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 12508
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 12510
    HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 12512
    sp = STACKTOP; //@line 12513
    return 0; //@line 12514
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 12516
    if (!(HEAP32[$1 >> 2] | 0)) {
     $$0 = -1; //@line 12520
     break;
    } else {
     label = 5; //@line 12523
     break;
    }
   }
  } else {
   label = 5; //@line 12528
  }
 } while (0);
 if ((label | 0) == 5) {
  $13 = $0 + 4 | 0; //@line 12532
  $14 = HEAP32[$13 >> 2] | 0; //@line 12533
  $15 = $0 + 8 | 0; //@line 12534
  $16 = HEAP32[$15 >> 2] | 0; //@line 12535
  do {
   if ($14 >>> 0 < $16 >>> 0) {
    $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 12543
    $AsyncCtx3 = _emscripten_alloc_async_context(24, sp) | 0; //@line 12544
    FUNCTION_TABLE_iiii[$22 & 31]($0, $14 - $16 | 0, 1) | 0; //@line 12545
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 709; //@line 12548
     HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 12550
     HEAP32[$AsyncCtx3 + 8 >> 2] = $3; //@line 12552
     HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 12554
     HEAP32[$AsyncCtx3 + 16 >> 2] = $15; //@line 12556
     HEAP32[$AsyncCtx3 + 20 >> 2] = $13; //@line 12558
     sp = STACKTOP; //@line 12559
     return 0; //@line 12560
    } else {
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 12562
     break;
    }
   }
  } while (0);
  HEAP32[$0 + 16 >> 2] = 0; //@line 12568
  HEAP32[$3 >> 2] = 0; //@line 12569
  HEAP32[$1 >> 2] = 0; //@line 12570
  HEAP32[$15 >> 2] = 0; //@line 12571
  HEAP32[$13 >> 2] = 0; //@line 12572
  $$0 = 0; //@line 12573
 }
 return $$0 | 0; //@line 12575
}
function __ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $13 = 0, $16 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 13584
 STACKTOP = STACKTOP + 16 | 0; //@line 13585
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 13585
 $2 = sp; //@line 13586
 $3 = $0 + 476 | 0; //@line 13587
 $4 = $1 + 12 | 0; //@line 13588
 $5 = HEAP32[$4 >> 2] | 0; //@line 13589
 do {
  if (!$5) {
   $13 = 0; //@line 13593
  } else {
   $8 = HEAP32[$5 + 4 >> 2] | 0; //@line 13596
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 13597
   FUNCTION_TABLE_vii[$8 & 15]($2, $1); //@line 13598
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 405; //@line 13601
    HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 13603
    HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 13605
    HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 13607
    sp = STACKTOP; //@line 13608
    STACKTOP = sp; //@line 13609
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 13611
    $13 = HEAP32[$4 >> 2] | 0; //@line 13613
    break;
   }
  }
 } while (0);
 $12 = $2 + 12 | 0; //@line 13618
 HEAP32[$12 >> 2] = $13; //@line 13619
 $AsyncCtx6 = _emscripten_alloc_async_context(12, sp) | 0; //@line 13620
 __ZN14LoRaMacCommand25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE($3, $2); //@line 13621
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 406; //@line 13624
  HEAP32[$AsyncCtx6 + 4 >> 2] = $12; //@line 13626
  HEAP32[$AsyncCtx6 + 8 >> 2] = $2; //@line 13628
  sp = STACKTOP; //@line 13629
  STACKTOP = sp; //@line 13630
  return;
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 13632
 $16 = HEAP32[$12 >> 2] | 0; //@line 13633
 if (!$16) {
  STACKTOP = sp; //@line 13636
  return;
 }
 $19 = HEAP32[$16 + 8 >> 2] | 0; //@line 13639
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 13640
 FUNCTION_TABLE_vi[$19 & 1023]($2); //@line 13641
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 407; //@line 13644
  sp = STACKTOP; //@line 13645
  STACKTOP = sp; //@line 13646
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 13648
 STACKTOP = sp; //@line 13649
 return;
}
function __ZN12LoRaWANStack7connectERK15lorawan_connect($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $12 = 0, $18 = 0, $19 = 0, $2 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $vararg_buffer3 = 0, sp = 0;
 sp = STACKTOP; //@line 11143
 STACKTOP = STACKTOP + 32 | 0; //@line 11144
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 11144
 $vararg_buffer3 = sp + 16 | 0; //@line 11145
 $2 = sp + 24 | 0; //@line 11148
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$1 = -1012; //@line 11153
  STACKTOP = sp; //@line 11154
  return $$1 | 0; //@line 11154
 }
 $6 = HEAP8[$1 >> 0] | 0; //@line 11156
 if (($6 & 255) >= 2) {
  $$1 = -1003; //@line 11159
  STACKTOP = sp; //@line 11160
  return $$1 | 0; //@line 11160
 }
 $7 = $6 << 24 >> 24 == 0; //@line 11162
 $8 = __ZN7LoRaMac12prepare_joinEPK15lorawan_connectb($0, $1, $7) | 0; //@line 11163
 if ($8 | 0) {
  $$1 = $8; //@line 11166
  STACKTOP = sp; //@line 11167
  return $$1 | 0; //@line 11167
 }
 if ($7) {
  _mbed_tracef(16, 12211, 12702, sp); //@line 11170
  HEAP32[$0 + 2556 >> 2] = 0; //@line 11172
  HEAP32[$0 + 2552 >> 2] = 0; //@line 11174
  $12 = $0 + 2904 | 0; //@line 11175
  HEAP32[$12 >> 2] = HEAP32[$12 >> 2] | 8; //@line 11178
 } else {
  _mbed_tracef(16, 12211, 12648, sp + 8 | 0); //@line 11180
  $18 = HEAP32[$0 + 2556 >> 2] | 0; //@line 11184
  HEAP32[$vararg_buffer3 >> 2] = HEAP32[$0 + 2552 >> 2]; //@line 11185
  HEAP32[$vararg_buffer3 + 4 >> 2] = $18; //@line 11187
  _mbed_tracef(16, 12211, 12663, $vararg_buffer3); //@line 11188
  $19 = $0 + 2904 | 0; //@line 11189
  HEAP32[$19 >> 2] = HEAP32[$19 >> 2] & -9; //@line 11192
 }
 HEAP32[$2 >> 2] = 0; //@line 11194
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 11195
 __ZN12LoRaWANStack24process_connecting_stateER14lorawan_status($0, $2); //@line 11196
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 363; //@line 11199
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 11201
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 11203
  sp = STACKTOP; //@line 11204
  STACKTOP = sp; //@line 11205
  return 0; //@line 11205
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 11207
 $$1 = HEAP32[$2 >> 2] | 0; //@line 11209
 STACKTOP = sp; //@line 11210
 return $$1 | 0; //@line 11210
}
function _mbedtls_cipher_cmac_finish__async_cb_281($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 18383
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18385
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18387
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18389
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18391
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18393
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18395
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18397
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 18399
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 18401
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 18403
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 18405
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 18407
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 18409
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 18411
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 18413
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 18415
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(68) | 0; //@line 18416
 _mbedtls_platform_zeroize($22, 16); //@line 18417
 if (!___async) {
  ___async_unwind = 0; //@line 18420
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 600; //@line 18422
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $2; //@line 18424
 HEAP32[$ReallocAsyncCtx7 + 8 >> 2] = $4; //@line 18426
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $6; //@line 18428
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $8; //@line 18430
 HEAP32[$ReallocAsyncCtx7 + 20 >> 2] = $10; //@line 18432
 HEAP32[$ReallocAsyncCtx7 + 24 >> 2] = $12; //@line 18434
 HEAP32[$ReallocAsyncCtx7 + 28 >> 2] = $14; //@line 18436
 HEAP32[$ReallocAsyncCtx7 + 32 >> 2] = $16; //@line 18438
 HEAP32[$ReallocAsyncCtx7 + 36 >> 2] = $18; //@line 18440
 HEAP32[$ReallocAsyncCtx7 + 40 >> 2] = $20; //@line 18442
 HEAP32[$ReallocAsyncCtx7 + 44 >> 2] = $22; //@line 18444
 HEAP32[$ReallocAsyncCtx7 + 48 >> 2] = $24; //@line 18446
 HEAP32[$ReallocAsyncCtx7 + 52 >> 2] = $26; //@line 18448
 HEAP32[$ReallocAsyncCtx7 + 56 >> 2] = $28; //@line 18450
 HEAP32[$ReallocAsyncCtx7 + 60 >> 2] = $30; //@line 18452
 HEAP32[$ReallocAsyncCtx7 + 64 >> 2] = $32; //@line 18454
 sp = STACKTOP; //@line 18455
 return;
}
function __ZN12LoRaWANStack25process_reception_timeoutEb__async_cb($0) {
 $0 = $0 | 0;
 var $14 = 0, $19 = 0, $2 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 32980
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32982
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32984
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32986
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32988
 if ((HEAP32[___async_retval >> 2] | 0) != 1) {
  return;
 }
 if (!(__ZN7LoRaMac10nwk_joinedEv($2) | 0)) {
  HEAP32[$4 >> 2] = 0; //@line 32999
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 33000
  __ZN12LoRaWANStack21process_joining_stateER14lorawan_status($6, $4); //@line 33001
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 219; //@line 33004
   $14 = $ReallocAsyncCtx3 + 4 | 0; //@line 33005
   HEAP32[$14 >> 2] = $4; //@line 33006
   sp = STACKTOP; //@line 33007
   return;
  }
  ___async_unwind = 0; //@line 33010
  HEAP32[$ReallocAsyncCtx3 >> 2] = 219; //@line 33011
  $14 = $ReallocAsyncCtx3 + 4 | 0; //@line 33012
  HEAP32[$14 >> 2] = $4; //@line 33013
  sp = STACKTOP; //@line 33014
  return;
 }
 __ZN7LoRaMac21post_process_mcps_reqEv($2); //@line 33017
 do {
  if ((HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($2) | 0) >> 2] | 0) == 1) {
   if (__ZN7LoRaMac24continue_sending_processEv($2) | 0) {
    return;
   } else {
    _mbed_tracef(2, 12211, 12216, $8); //@line 33027
    break;
   }
  }
 } while (0);
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 33032
 __ZN12LoRaWANStack26process_status_check_stateEv($6); //@line 33033
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 220; //@line 33036
  $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 33037
  HEAP32[$19 >> 2] = $2; //@line 33038
  $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 33039
  HEAP32[$20 >> 2] = $6; //@line 33040
  sp = STACKTOP; //@line 33041
  return;
 }
 ___async_unwind = 0; //@line 33044
 HEAP32[$ReallocAsyncCtx2 >> 2] = 220; //@line 33045
 $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 33046
 HEAP32[$19 >> 2] = $2; //@line 33047
 $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 33048
 HEAP32[$20 >> 2] = $6; //@line 33049
 sp = STACKTOP; //@line 33050
 return;
}
function __ZN16SX1276_LoRaRadio8rx_frameEPhjjhh($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $13 = 0, $16 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, sp = 0;
 sp = STACKTOP; //@line 1867
 STACKTOP = STACKTOP + 48 | 0; //@line 1868
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 1868
 $vararg_buffer12 = sp + 32 | 0; //@line 1869
 $vararg_buffer8 = sp + 24 | 0; //@line 1870
 $vararg_buffer4 = sp + 16 | 0; //@line 1871
 $vararg_buffer = sp; //@line 1872
 $6 = $4 & 255; //@line 1873
 $7 = $5 & 255; //@line 1874
 HEAP32[$vararg_buffer >> 2] = $2; //@line 1875
 HEAP32[$vararg_buffer + 4 >> 2] = $3; //@line 1877
 HEAP32[$vararg_buffer + 8 >> 2] = $6; //@line 1879
 HEAP32[$vararg_buffer + 12 >> 2] = $7; //@line 1881
 _mbed_tracef(16, 11040, 11524, $vararg_buffer); //@line 1882
 _emscripten_asm_const_i(6) | 0; //@line 1883
 $10 = HEAP32[$0 + 752 >> 2] | 0; //@line 1885
 if (($10 | 0) != ($6 | 0)) {
  HEAP32[$vararg_buffer4 >> 2] = $10; //@line 1888
  HEAP32[$vararg_buffer4 + 4 >> 2] = $6; //@line 1890
  _mbed_tracef(16, 11040, 11606, $vararg_buffer4); //@line 1891
  STACKTOP = sp; //@line 1892
  return;
 }
 $13 = HEAP32[$0 + 756 >> 2] | 0; //@line 1895
 if (($13 | 0) != ($7 | 0)) {
  HEAP32[$vararg_buffer8 >> 2] = $13; //@line 1898
  HEAP32[$vararg_buffer8 + 4 >> 2] = $7; //@line 1900
  _mbed_tracef(16, 11040, 11653, $vararg_buffer8); //@line 1901
  STACKTOP = sp; //@line 1902
  return;
 }
 $16 = HEAP32[$0 + 692 >> 2] | 0; //@line 1905
 if (($16 | 0) == ($3 | 0)) {
  _memcpy($0 + 792 | 0, $1 | 0, $2 | 0) | 0; //@line 1909
  HEAP8[$0 + 782 >> 0] = $2; //@line 1912
  HEAP8[$0 + 781 >> 0] = -35; //@line 1914
  HEAP8[$0 + 780 >> 0] = -5; //@line 1916
  HEAP8[$0 + 783 >> 0] = 1; //@line 1918
  HEAP32[$0 + 784 >> 2] = _emscripten_asm_const_i(3) | 0; //@line 1921
  STACKTOP = sp; //@line 1922
  return;
 } else {
  HEAP32[$vararg_buffer12 >> 2] = $16; //@line 1924
  HEAP32[$vararg_buffer12 + 4 >> 2] = $3; //@line 1926
  _mbed_tracef(16, 11040, 11700, $vararg_buffer12); //@line 1927
  STACKTOP = sp; //@line 1928
  return;
 }
}
function __ZN7LoRaMac18prepare_ongoing_txEhPKhthh__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $35 = 0, $4 = 0, $51 = 0, $56 = 0, $58 = 0, $8 = 0, $AsyncRetVal = 0;
 $2 = HEAP16[$0 + 4 >> 1] | 0; //@line 12214
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12216
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12220
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12222
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 12224
 $14 = HEAP8[$0 + 25 >> 0] | 0; //@line 12226
 $16 = HEAP8[$0 + 26 >> 0] | 0; //@line 12228
 $18 = HEAP32[$0 + 28 >> 2] | 0; //@line 12230
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 12234
 $22 = $AsyncRetVal & 255; //@line 12235
 $23 = $2 & 65535; //@line 12236
 if ($23 >>> 0 > $22 >>> 0) {
  HEAP32[$4 >> 2] = $23; //@line 12239
  HEAP32[$4 + 4 >> 2] = $22; //@line 12241
  _mbed_tracef(8, 12890, 13389, $4); //@line 12242
  HEAP16[$8 + 2372 >> 1] = $23 - $22; //@line 12246
  HEAP16[$8 + 2370 >> 1] = $AsyncRetVal & 255; //@line 12249
  _memcpy($8 + 2115 | 0, $10 | 0, $22 | 0) | 0; //@line 12251
 } else {
  HEAP16[$8 + 2370 >> 1] = $2; //@line 12254
  HEAP16[$8 + 2372 >> 1] = 0; //@line 12256
  if ($2 << 16 >> 16) {
   _memcpy($8 + 2115 | 0, $10 | 0, $23 | 0) | 0; //@line 12260
  }
 }
 $35 = $12 & 255; //@line 12263
 if ($35 & 1 | 0) {
  HEAP32[$8 + 2108 >> 2] = 0; //@line 12268
  HEAP8[$8 + 2112 >> 0] = $14; //@line 12270
  HEAP8[$8 + 2114 >> 0] = 1; //@line 12272
 }
 if ($35 & 2 | 0) {
  HEAP32[$8 + 2108 >> 2] = 1; //@line 12278
  HEAP8[$8 + 2112 >> 0] = $14; //@line 12280
  HEAP8[$8 + 2114 >> 0] = $16; //@line 12282
 }
 if (!($35 & 8)) {
  $58 = HEAP8[$8 + 2112 >> 0] | 0; //@line 12289
 } else {
  HEAP32[$8 + 2108 >> 2] = 3; //@line 12292
  HEAP8[$8 + 2112 >> 0] = $14; //@line 12294
  HEAP8[$8 + 2114 >> 0] = 1; //@line 12296
  $58 = $14; //@line 12297
 }
 $51 = $8 + 2370 | 0; //@line 12299
 $56 = HEAPU16[$8 + 2372 >> 1] | 0; //@line 12304
 HEAP32[$18 >> 2] = HEAPU16[$51 >> 1]; //@line 12306
 HEAP32[$18 + 4 >> 2] = $56; //@line 12308
 HEAP32[$18 + 8 >> 2] = $58 & 255; //@line 12310
 _mbed_tracef(8, 12890, 13444, $18); //@line 12311
 HEAP16[___async_retval >> 1] = HEAP16[$51 >> 1] | 0; //@line 12314
 return;
}
function __ZN7LoRaPHY15setup_rx_windowEbj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $14 = 0, $17 = 0, $20 = 0, $3 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 22379
 $3 = $0 + 4 | 0; //@line 22380
 $4 = HEAP32[$3 >> 2] | 0; //@line 22381
 $7 = HEAP32[(HEAP32[$4 >> 2] | 0) + 72 >> 2] | 0; //@line 22384
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 22385
 FUNCTION_TABLE_vi[$7 & 1023]($4); //@line 22386
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 550; //@line 22389
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 22391
  HEAP8[$AsyncCtx + 8 >> 0] = $1 & 1; //@line 22394
  HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 22396
  sp = STACKTOP; //@line 22397
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 22400
 $11 = HEAP32[$3 >> 2] | 0; //@line 22401
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 28 >> 2] | 0; //@line 22404
 do {
  if ($1) {
   $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 22407
   FUNCTION_TABLE_vii[$14 & 15]($11, 0); //@line 22408
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 552; //@line 22411
    HEAP32[$AsyncCtx7 + 4 >> 2] = $3; //@line 22413
    sp = STACKTOP; //@line 22414
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 22417
    break;
   }
  } else {
   $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 22421
   FUNCTION_TABLE_vii[$14 & 15]($11, $2); //@line 22422
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 551; //@line 22425
    HEAP32[$AsyncCtx3 + 4 >> 2] = $3; //@line 22427
    sp = STACKTOP; //@line 22428
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 22431
    break;
   }
  }
 } while (0);
 $17 = HEAP32[$3 >> 2] | 0; //@line 22436
 $20 = HEAP32[(HEAP32[$17 >> 2] | 0) + 76 >> 2] | 0; //@line 22439
 $AsyncCtx11 = _emscripten_alloc_async_context(4, sp) | 0; //@line 22440
 FUNCTION_TABLE_vi[$20 & 1023]($17); //@line 22441
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 553; //@line 22444
  sp = STACKTOP; //@line 22445
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx11 | 0); //@line 22448
  return;
 }
}
function __ZN12LoRaWANStack26process_status_check_stateEv($0) {
 $0 = $0 | 0;
 var $11 = 0, $16 = 0, $3 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 7573
 switch (HEAP32[$0 + 2496 >> 2] | 0) {
 case 9:
 case 8:
  {
   $3 = $0 + 2904 | 0; //@line 7578
   HEAP32[$3 >> 2] = HEAP32[$3 >> 2] & -18; //@line 7581
   __ZN7LoRaMac14set_tx_ongoingEb($0, 0); //@line 7582
   __ZN7LoRaMac16reset_ongoing_txEb($0, 0); //@line 7583
   $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7584
   __ZN12LoRaWANStack20mcps_confirm_handlerEv($0); //@line 7585
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 240; //@line 7588
    sp = STACKTOP; //@line 7589
    return;
   }
   _emscripten_free_async_context($AsyncCtx7 | 0); //@line 7592
   return;
  }
 case 5:
  {
   $6 = $0 + 2904 | 0; //@line 7597
   $7 = HEAP32[$6 >> 2] | 0; //@line 7598
   do {
    if ($7 & 17 | 0) {
     HEAP32[$6 >> 2] = $7 & -18; //@line 7604
     __ZN7LoRaMac14set_tx_ongoingEb($0, 0); //@line 7605
     __ZN7LoRaMac16reset_ongoing_txEb($0, 0); //@line 7606
     $11 = $0 + 2910 | 0; //@line 7607
     if (HEAP8[$11 >> 0] | 0) {
      HEAP8[$11 >> 0] = 0; //@line 7611
      break;
     }
     $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7614
     __ZN12LoRaWANStack20mcps_confirm_handlerEv($0); //@line 7615
     if (___async) {
      HEAP32[$AsyncCtx3 >> 2] = 241; //@line 7618
      HEAP32[$AsyncCtx3 + 4 >> 2] = $6; //@line 7620
      HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 7622
      sp = STACKTOP; //@line 7623
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx3 | 0); //@line 7626
      break;
     }
    }
   } while (0);
   $16 = HEAP32[$6 >> 2] | 0; //@line 7631
   if (!($16 & 2)) {
    return;
   }
   HEAP32[$6 >> 2] = $16 & -3; //@line 7638
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7639
   __ZN12LoRaWANStack23mcps_indication_handlerEv($0); //@line 7640
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 242; //@line 7643
    sp = STACKTOP; //@line 7644
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 7647
   return;
  }
 default:
  {
   return;
  }
 }
}
function __ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 26450
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26454
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26456
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26458
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26460
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 26462
 if (!$AsyncRetVal) {
  $14 = HEAP16[$0 + 4 >> 1] & 255; //@line 26466
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 26467
  $15 = _mbedtls_cipher_cmac_update($4, $6, $14) | 0; //@line 26468
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 507; //@line 26471
   $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 26472
   HEAP32[$16 >> 2] = $8; //@line 26473
   $17 = $ReallocAsyncCtx3 + 8 | 0; //@line 26474
   HEAP32[$17 >> 2] = $4; //@line 26475
   $18 = $ReallocAsyncCtx3 + 12 | 0; //@line 26476
   HEAP32[$18 >> 2] = $10; //@line 26477
   sp = STACKTOP; //@line 26478
   return;
  }
  HEAP32[___async_retval >> 2] = $15; //@line 26482
  ___async_unwind = 0; //@line 26483
  HEAP32[$ReallocAsyncCtx3 >> 2] = 507; //@line 26484
  $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 26485
  HEAP32[$16 >> 2] = $8; //@line 26486
  $17 = $ReallocAsyncCtx3 + 8 | 0; //@line 26487
  HEAP32[$17 >> 2] = $4; //@line 26488
  $18 = $ReallocAsyncCtx3 + 12 | 0; //@line 26489
  HEAP32[$18 >> 2] = $10; //@line 26490
  sp = STACKTOP; //@line 26491
  return;
 } else {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 26494
  _mbedtls_cipher_free($4); //@line 26495
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 509; //@line 26498
   $20 = $ReallocAsyncCtx5 + 4 | 0; //@line 26499
   HEAP32[$20 >> 2] = $AsyncRetVal; //@line 26500
   sp = STACKTOP; //@line 26501
   return;
  }
  ___async_unwind = 0; //@line 26504
  HEAP32[$ReallocAsyncCtx5 >> 2] = 509; //@line 26505
  $20 = $ReallocAsyncCtx5 + 4 | 0; //@line 26506
  HEAP32[$20 >> 2] = $AsyncRetVal; //@line 26507
  sp = STACKTOP; //@line 26508
  return;
 }
}
function __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_154($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 29978
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29980
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29982
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29984
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29986
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29988
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29990
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 29993
  $13 = _mbedtls_cipher_cmac_update($2, $4, $6) | 0; //@line 29994
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 500; //@line 29997
   $14 = $ReallocAsyncCtx3 + 4 | 0; //@line 29998
   HEAP32[$14 >> 2] = $8; //@line 29999
   $15 = $ReallocAsyncCtx3 + 8 | 0; //@line 30000
   HEAP32[$15 >> 2] = $2; //@line 30001
   $16 = $ReallocAsyncCtx3 + 12 | 0; //@line 30002
   HEAP32[$16 >> 2] = $10; //@line 30003
   sp = STACKTOP; //@line 30004
   return;
  }
  HEAP32[___async_retval >> 2] = $13; //@line 30008
  ___async_unwind = 0; //@line 30009
  HEAP32[$ReallocAsyncCtx3 >> 2] = 500; //@line 30010
  $14 = $ReallocAsyncCtx3 + 4 | 0; //@line 30011
  HEAP32[$14 >> 2] = $8; //@line 30012
  $15 = $ReallocAsyncCtx3 + 8 | 0; //@line 30013
  HEAP32[$15 >> 2] = $2; //@line 30014
  $16 = $ReallocAsyncCtx3 + 12 | 0; //@line 30015
  HEAP32[$16 >> 2] = $10; //@line 30016
  sp = STACKTOP; //@line 30017
  return;
 } else {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 30020
  _mbedtls_cipher_free($2); //@line 30021
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 502; //@line 30024
   $18 = $ReallocAsyncCtx6 + 4 | 0; //@line 30025
   HEAP32[$18 >> 2] = $AsyncRetVal; //@line 30026
   sp = STACKTOP; //@line 30027
   return;
  }
  ___async_unwind = 0; //@line 30030
  HEAP32[$ReallocAsyncCtx6 >> 2] = 502; //@line 30031
  $18 = $ReallocAsyncCtx6 + 4 | 0; //@line 30032
  HEAP32[$18 >> 2] = $AsyncRetVal; //@line 30033
  sp = STACKTOP; //@line 30034
  return;
 }
}
function __ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 $14 = $14 | 0;
 var $$ = 0, $$sink = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $40 = 0, label = 0;
 $15 = $8 & 1; //@line 129
 $16 = $10 & 1; //@line 130
 $17 = $11 & 1; //@line 131
 $18 = $13 & 1; //@line 132
 $19 = $14 & 1; //@line 133
 HEAP8[$0 + 689 >> 0] = $1; //@line 136
 switch ($1 | 0) {
 case 0:
  {
   HEAP32[$0 + 704 >> 2] = $2; //@line 140
   HEAP32[$0 + 712 >> 2] = $3; //@line 142
   HEAP32[$0 + 708 >> 2] = $5; //@line 144
   HEAP8[$0 + 718 >> 0] = $15; //@line 146
   HEAP8[$0 + 719 >> 0] = $9; //@line 148
   HEAP8[$0 + 720 >> 0] = $16; //@line 150
   HEAP8[$0 + 721 >> 0] = $18; //@line 152
   HEAP8[$0 + 722 >> 0] = $19; //@line 154
   HEAP16[$0 + 716 >> 1] = $6; //@line 156
   HEAP32[$0 + 728 >> 2] = ~~(1.0 / +($3 >>> 0) * 8.0 * +($7 & 65535) * 1.0e3) >>> 0; //@line 165
   return;
  }
 case 1:
  {
   if ($2 >>> 0 > 2) {
    while (1) {}
   }
   $40 = $2 + 7 | 0; //@line 175
   HEAP32[$0 + 752 >> 2] = $40; //@line 177
   HEAP32[$0 + 756 >> 2] = $3; //@line 179
   HEAP8[$0 + 761 >> 0] = $4; //@line 181
   HEAP16[$0 + 762 >> 1] = $6; //@line 183
   HEAP8[$0 + 764 >> 0] = $15; //@line 185
   HEAP8[$0 + 765 >> 0] = $9; //@line 187
   HEAP8[$0 + 766 >> 0] = $16; //@line 189
   HEAP8[$0 + 767 >> 0] = $17; //@line 191
   HEAP8[$0 + 768 >> 0] = $12; //@line 193
   HEAP8[$0 + 769 >> 0] = $18; //@line 195
   HEAP8[$0 + 770 >> 0] = $19; //@line 197
   $$ = $3 >>> 0 > 6 ? $3 : 6; //@line 199
   if (($2 | 0) == 0 & (($$ >>> 0 < 12 ? $$ : 12) + -11 | 0) >>> 0 < 2) {
    label = 7; //@line 207
   } else {
    if (($40 | 0) == 8 & $$ >>> 0 > 11) {
     label = 7; //@line 213
    } else {
     $$sink = 0; //@line 215
    }
   }
   if ((label | 0) == 7) {
    $$sink = 1; //@line 219
   }
   HEAP8[$0 + 760 >> 0] = $$sink; //@line 222
   return;
  }
 default:
  {
   return;
  }
 }
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_59($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 24852
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24854
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24856
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24858
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24860
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24862
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24864
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 24866
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 24868
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 24870
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 24872
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 24874
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 24876
 $25 = $4 + 1088 | 0; //@line 24877
 HEAP32[$25 >> 2] = 0; //@line 24878
 HEAP32[$25 + 4 >> 2] = 0; //@line 24878
 HEAP32[$25 + 8 >> 2] = 0; //@line 24878
 HEAP32[$25 + 12 >> 2] = 0; //@line 24878
 HEAP8[$4 + 1104 >> 0] = 1; //@line 24880
 HEAP32[$2 >> 2] = 620; //@line 24881
 $27 = $4 + 1112 | 0; //@line 24882
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(52) | 0; //@line 24883
 __ZN4mbed10TimerEventC2Ev($27); //@line 24884
 if (!___async) {
  ___async_unwind = 0; //@line 24887
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 98; //@line 24889
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $27; //@line 24891
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 24893
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 24895
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 24897
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 24899
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 24901
 HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $14; //@line 24903
 HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $16; //@line 24905
 HEAP32[$ReallocAsyncCtx3 + 36 >> 2] = $18; //@line 24907
 HEAP32[$ReallocAsyncCtx3 + 40 >> 2] = $20; //@line 24909
 HEAP32[$ReallocAsyncCtx3 + 44 >> 2] = $22; //@line 24911
 HEAP32[$ReallocAsyncCtx3 + 48 >> 2] = $24; //@line 24913
 sp = STACKTOP; //@line 24914
 return;
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_58($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 24782
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24784
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24786
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24788
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24790
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24792
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24794
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 24796
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 24798
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 24800
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 24802
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 24804
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 24806
 $25 = $4 + 1152 | 0; //@line 24807
 HEAP32[$25 >> 2] = 0; //@line 24808
 HEAP32[$25 + 4 >> 2] = 0; //@line 24808
 HEAP32[$25 + 8 >> 2] = 0; //@line 24808
 HEAP32[$25 + 12 >> 2] = 0; //@line 24808
 HEAP8[$4 + 1168 >> 0] = 1; //@line 24810
 HEAP32[$2 >> 2] = 620; //@line 24811
 $27 = $4 + 1176 | 0; //@line 24812
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(52) | 0; //@line 24813
 __ZN4mbed10TimerEventC2Ev($27); //@line 24814
 if (!___async) {
  ___async_unwind = 0; //@line 24817
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 99; //@line 24819
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $27; //@line 24821
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 24823
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 24825
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 24827
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 24829
 HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 24831
 HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $14; //@line 24833
 HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $16; //@line 24835
 HEAP32[$ReallocAsyncCtx2 + 36 >> 2] = $18; //@line 24837
 HEAP32[$ReallocAsyncCtx2 + 40 >> 2] = $20; //@line 24839
 HEAP32[$ReallocAsyncCtx2 + 44 >> 2] = $22; //@line 24841
 HEAP32[$ReallocAsyncCtx2 + 48 >> 2] = $24; //@line 24843
 sp = STACKTOP; //@line 24844
 return;
}
function __ZN12radio_eventsD2Ev__async_cb_291($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 19535
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19537
 $4 = HEAP32[$2 + 44 >> 2] | 0; //@line 19539
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 19544
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 19545
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 32 | 0); //@line 19546
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 177; //@line 19549
   $9 = $ReallocAsyncCtx5 + 4 | 0; //@line 19550
   HEAP32[$9 >> 2] = $2; //@line 19551
   sp = STACKTOP; //@line 19552
   return;
  }
  ___async_unwind = 0; //@line 19555
  HEAP32[$ReallocAsyncCtx5 >> 2] = 177; //@line 19556
  $9 = $ReallocAsyncCtx5 + 4 | 0; //@line 19557
  HEAP32[$9 >> 2] = $2; //@line 19558
  sp = STACKTOP; //@line 19559
  return;
 }
 $11 = HEAP32[$2 + 28 >> 2] | 0; //@line 19563
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 19568
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 19569
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 16 | 0); //@line 19570
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 178; //@line 19573
   $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 19574
   HEAP32[$16 >> 2] = $2; //@line 19575
   sp = STACKTOP; //@line 19576
   return;
  }
  ___async_unwind = 0; //@line 19579
  HEAP32[$ReallocAsyncCtx6 >> 2] = 178; //@line 19580
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 19581
  HEAP32[$16 >> 2] = $2; //@line 19582
  sp = STACKTOP; //@line 19583
  return;
 }
 $18 = HEAP32[$2 + 12 >> 2] | 0; //@line 19587
 if (!$18) {
  return;
 }
 $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 19593
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 19594
 FUNCTION_TABLE_vi[$21 & 1023]($2); //@line 19595
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 179; //@line 19598
  sp = STACKTOP; //@line 19599
  return;
 }
 ___async_unwind = 0; //@line 19602
 HEAP32[$ReallocAsyncCtx7 >> 2] = 179; //@line 19603
 sp = STACKTOP; //@line 19604
 return;
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_57($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 24712
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24714
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24716
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24718
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24720
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24722
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24724
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 24726
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 24728
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 24730
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 24732
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 24734
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 24736
 $25 = $4 + 1216 | 0; //@line 24737
 HEAP32[$25 >> 2] = 0; //@line 24738
 HEAP32[$25 + 4 >> 2] = 0; //@line 24738
 HEAP32[$25 + 8 >> 2] = 0; //@line 24738
 HEAP32[$25 + 12 >> 2] = 0; //@line 24738
 HEAP8[$4 + 1232 >> 0] = 1; //@line 24740
 HEAP32[$2 >> 2] = 620; //@line 24741
 $27 = $4 + 1240 | 0; //@line 24742
 $ReallocAsyncCtx = _emscripten_realloc_async_context(52) | 0; //@line 24743
 __ZN4mbed10TimerEventC2Ev($27); //@line 24744
 if (!___async) {
  ___async_unwind = 0; //@line 24747
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 100; //@line 24749
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $27; //@line 24751
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 24753
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 24755
 HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 24757
 HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 24759
 HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 24761
 HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 24763
 HEAP32[$ReallocAsyncCtx + 32 >> 2] = $16; //@line 24765
 HEAP32[$ReallocAsyncCtx + 36 >> 2] = $18; //@line 24767
 HEAP32[$ReallocAsyncCtx + 40 >> 2] = $20; //@line 24769
 HEAP32[$ReallocAsyncCtx + 44 >> 2] = $22; //@line 24771
 HEAP32[$ReallocAsyncCtx + 48 >> 2] = $24; //@line 24773
 sp = STACKTOP; //@line 24774
 return;
}
function __ZN7LoRaMac24get_max_possible_tx_sizeEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$09 = 0, $$pre = 0, $$pre11 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $34 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $or$cond$i = 0, sp = 0;
 sp = STACKTOP; //@line 15704
 $2 = $0 + 476 | 0; //@line 15705
 $4 = (__ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($2) | 0) & 255; //@line 15707
 $7 = ((__ZNK14LoRaMacCommand26get_repeat_commands_lengthEv($2) | 0) & 255) + $4 | 0; //@line 15710
 $$pre = $0 + 4 | 0; //@line 15714
 $$pre11 = $0 + 1877 | 0; //@line 15715
 do {
  if (HEAP8[$0 + 1936 >> 0] | 0) {
   $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 15720
   __ZN7LoRaPHY12get_next_ADREbRaS0_Rj($$pre, 0, $$pre11, $0 + 1876 | 0, $0 + 1768 | 0) | 0; //@line 15721
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 449; //@line 15724
    HEAP32[$AsyncCtx + 4 >> 2] = $$pre11; //@line 15726
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 15728
    HEAP32[$AsyncCtx + 12 >> 2] = $$pre; //@line 15730
    HEAP32[$AsyncCtx + 16 >> 2] = $7; //@line 15732
    HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 15734
    HEAP8[$AsyncCtx + 24 >> 0] = $1; //@line 15736
    sp = STACKTOP; //@line 15737
    return 0; //@line 15738
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 15740
    break;
   }
  }
 } while (0);
 $20 = $0 + 1173 | 0; //@line 15746
 $23 = __ZN7LoRaPHY15get_max_payloadEhb($$pre, HEAP8[$$pre11 >> 0] | 0, (HEAP8[$20 >> 0] | 0) != 0) | 0; //@line 15749
 $24 = $23 & 255; //@line 15750
 $25 = $7 & 255; //@line 15751
 if ($25 >>> 0 > $24 >>> 0) {
  __ZN14LoRaMacCommand20clear_command_bufferEv($2); //@line 15754
  __ZN14LoRaMacCommand19clear_repeat_bufferEv($2); //@line 15755
  $$0 = 0; //@line 15756
  $$09 = $23; //@line 15756
 } else {
  $$0 = $25; //@line 15760
  $$09 = $24 - $7 & 255; //@line 15760
 }
 $34 = $$0 + ($1 & 255) | 0; //@line 15767
 $or$cond$i = $34 >>> 0 < 256 & $34 >>> 0 <= ((__ZN7LoRaPHY15get_max_payloadEhb($$pre, HEAP8[$$pre11 >> 0] | 0, (HEAP8[$20 >> 0] | 0) != 0) | 0) & 255) >>> 0; //@line 15771
 return ($or$cond$i ? $23 : $$09) | 0; //@line 15773
}
function __ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_3($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $31 = 0, $33 = 0, $4 = 0, $41 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 18604
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18606
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18608
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 18610
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18612
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18614
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18616
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18618
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 18620
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 18622
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 18624
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 18626
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 18628
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  if (__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($2) | 0) {
   HEAP32[$8 + 2076 >> 2] = 4; //@line 18636
   HEAP8[$8 + 2080 >> 0] = 1; //@line 18638
   __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($2); //@line 18639
  }
 } else {
  HEAP32[$4 >> 2] = 1; //@line 18642
 }
 if ($6 << 24 >> 24 == 7) {
  $31 = $8 + 1442 | 0; //@line 18646
  $33 = HEAPU8[$10 >> 0] | 0; //@line 18648
  _memcpy($31 | 0, $12 + $33 | 0, $14 | 0) | 0; //@line 18650
  HEAP32[$8 + 2016 >> 2] = 3; //@line 18652
  HEAP32[$4 >> 2] = 0; //@line 18653
  HEAP32[$16 >> 2] = $31; //@line 18654
  HEAP16[$18 >> 1] = $14 - $33; //@line 18657
 }
 if (!(HEAP8[$20 >> 0] | 0)) {
  return;
 }
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 18665
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($24, $8 + 1856 | 0); //@line 18666
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 404; //@line 18669
  $41 = $ReallocAsyncCtx4 + 4 | 0; //@line 18670
  HEAP32[$41 >> 2] = $22; //@line 18671
  sp = STACKTOP; //@line 18672
  return;
 }
 ___async_unwind = 0; //@line 18675
 HEAP32[$ReallocAsyncCtx4 >> 2] = 404; //@line 18676
 $41 = $ReallocAsyncCtx4 + 4 | 0; //@line 18677
 HEAP32[$41 >> 2] = $22; //@line 18678
 sp = STACKTOP; //@line 18679
 return;
}
function __ZN4mbed7Timeout7handlerEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 24541
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24547
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24549
 $9 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 24551
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 24552
 __ZN4mbed6Ticker6detachEv($6); //@line 24553
 $10 = HEAP32[$9 >> 2] | 0; //@line 24554
 if (!$10) {
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 24557
  _mbed_assert_internal(15010, 15015, 528); //@line 24558
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 117; //@line 24561
   $12 = $ReallocAsyncCtx4 + 4 | 0; //@line 24562
   HEAP32[$12 >> 2] = $9; //@line 24563
   $13 = $ReallocAsyncCtx4 + 8 | 0; //@line 24564
   HEAP32[$13 >> 2] = $8; //@line 24565
   sp = STACKTOP; //@line 24566
   return;
  }
  ___async_unwind = 0; //@line 24569
  HEAP32[$ReallocAsyncCtx4 >> 2] = 117; //@line 24570
  $12 = $ReallocAsyncCtx4 + 4 | 0; //@line 24571
  HEAP32[$12 >> 2] = $9; //@line 24572
  $13 = $ReallocAsyncCtx4 + 8 | 0; //@line 24573
  HEAP32[$13 >> 2] = $8; //@line 24574
  sp = STACKTOP; //@line 24575
  return;
 } else {
  $14 = HEAP32[$10 >> 2] | 0; //@line 24578
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 24579
  FUNCTION_TABLE_vi[$14 & 1023]($8); //@line 24580
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 118; //@line 24583
   $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 24584
   HEAP32[$15 >> 2] = $9; //@line 24585
   $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 24586
   HEAP32[$16 >> 2] = $8; //@line 24587
   sp = STACKTOP; //@line 24588
   return;
  }
  ___async_unwind = 0; //@line 24591
  HEAP32[$ReallocAsyncCtx2 >> 2] = 118; //@line 24592
  $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 24593
  HEAP32[$15 >> 2] = $9; //@line 24594
  $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 24595
  HEAP32[$16 >> 2] = $8; //@line 24596
  sp = STACKTOP; //@line 24597
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_303($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 21010
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21014
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21016
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21018
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21020
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21022
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21024
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 21026
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 21029
 $18 = $4 + 16 | 0; //@line 21030
 HEAP32[$18 >> 2] = HEAP32[$6 >> 2]; //@line 21031
 HEAP32[$18 + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 21031
 HEAP8[$18 + 8 >> 0] = HEAP8[$6 + 8 >> 0] | 0; //@line 21031
 _equeue_event_dtor($4, 302); //@line 21032
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 21033
 $19 = _equeue_post($8, 303, $4) | 0; //@line 21034
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 304; //@line 21037
  $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 21038
  HEAP32[$20 >> 2] = $10; //@line 21039
  $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 21040
  HEAP32[$21 >> 2] = $12; //@line 21041
  $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 21042
  HEAP32[$22 >> 2] = $14; //@line 21043
  $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 21044
  HEAP32[$23 >> 2] = $16; //@line 21045
  sp = STACKTOP; //@line 21046
  return;
 }
 HEAP32[___async_retval >> 2] = $19; //@line 21050
 ___async_unwind = 0; //@line 21051
 HEAP32[$ReallocAsyncCtx6 >> 2] = 304; //@line 21052
 $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 21053
 HEAP32[$20 >> 2] = $10; //@line 21054
 $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 21055
 HEAP32[$21 >> 2] = $12; //@line 21056
 $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 21057
 HEAP32[$22 >> 2] = $14; //@line 21058
 $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 21059
 HEAP32[$23 >> 2] = $16; //@line 21060
 sp = STACKTOP; //@line 21061
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_25($0) {
 $0 = $0 | 0;
 var $10 = 0, $21 = 0, $22 = 0, $26 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 22527
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22531
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22533
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22535
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22537
 if ((__ZNK7LoRaMac16get_device_classEv($6) | 0) == 2) {
  label = 6; //@line 22541
 } else {
  if (!(HEAP8[$4 + 15 >> 0] | 0)) {
   label = 6; //@line 22547
  }
 }
 if ((label | 0) == 6) {
  if ((__ZNK7LoRaMac16get_device_classEv($6) | 0) != 2) {
   return;
  }
  if ((HEAP32[$4 + 4 >> 2] | 0) != 1) {
   return;
  }
 }
 $21 = $8 + 2512 | 0; //@line 22563
 $22 = HEAP32[$21 >> 2] | 0; //@line 22564
 if (!$22) {
  return;
 }
 $26 = HEAP32[$8 + 3168 >> 2] | 0; //@line 22571
 $28 = HEAP32[$22 + 4 >> 2] | 0; //@line 22573
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 22574
 FUNCTION_TABLE_vii[$28 & 15]($10, $8 + 2500 | 0); //@line 22575
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 263; //@line 22578
  $29 = $ReallocAsyncCtx5 + 4 | 0; //@line 22579
  HEAP32[$29 >> 2] = $21; //@line 22580
  $30 = $ReallocAsyncCtx5 + 8 | 0; //@line 22581
  HEAP32[$30 >> 2] = $10; //@line 22582
  $31 = $ReallocAsyncCtx5 + 12 | 0; //@line 22583
  HEAP32[$31 >> 2] = $26; //@line 22584
  $32 = $ReallocAsyncCtx5 + 16 | 0; //@line 22585
  HEAP32[$32 >> 2] = $10; //@line 22586
  sp = STACKTOP; //@line 22587
  return;
 }
 ___async_unwind = 0; //@line 22590
 HEAP32[$ReallocAsyncCtx5 >> 2] = 263; //@line 22591
 $29 = $ReallocAsyncCtx5 + 4 | 0; //@line 22592
 HEAP32[$29 >> 2] = $21; //@line 22593
 $30 = $ReallocAsyncCtx5 + 8 | 0; //@line 22594
 HEAP32[$30 >> 2] = $10; //@line 22595
 $31 = $ReallocAsyncCtx5 + 12 | 0; //@line 22596
 HEAP32[$31 >> 2] = $26; //@line 22597
 $32 = $ReallocAsyncCtx5 + 16 | 0; //@line 22598
 HEAP32[$32 >> 2] = $10; //@line 22599
 sp = STACKTOP; //@line 22600
 return;
}
function _mbed_trace_init() {
 var $$0 = 0, $0 = 0, $10 = 0, $13 = 0, $14 = 0, $17 = 0, $19 = 0, $22 = 0, $24 = 0, $3 = 0, $4 = 0, $7 = 0, $9 = 0;
 $0 = HEAP32[167] | 0; //@line 4485
 if (!$0) {
  $3 = _malloc(HEAP32[168] | 0) | 0; //@line 4489
  HEAP32[167] = $3; //@line 4490
  $19 = $3; //@line 4491
 } else {
  $19 = $0; //@line 4493
 }
 $4 = HEAP32[169] | 0; //@line 4495
 if (!$4) {
  $7 = _malloc(HEAP32[170] | 0) | 0; //@line 4499
  HEAP32[169] = $7; //@line 4500
  $9 = $7; //@line 4501
 } else {
  $9 = $4; //@line 4503
 }
 HEAP32[171] = $9; //@line 4506
 $10 = HEAP32[164] | 0; //@line 4507
 if (!$10) {
  $13 = _malloc(HEAP32[166] | 0) | 0; //@line 4511
  HEAP32[164] = $13; //@line 4512
  $22 = $13; //@line 4513
 } else {
  $22 = $10; //@line 4515
 }
 $14 = HEAP32[165] | 0; //@line 4517
 if (!$14) {
  $17 = _malloc(HEAP32[166] | 0) | 0; //@line 4521
  HEAP32[165] = $17; //@line 4522
  $24 = $17; //@line 4523
 } else {
  $24 = $14; //@line 4525
 }
 if (($19 | 0) == 0 | ($9 | 0) == 0 | ($22 | 0) == 0 | ($24 | 0) == 0) {
  _free($19); //@line 4535
  _free(HEAP32[169] | 0); //@line 4537
  _free(HEAP32[164] | 0); //@line 4539
  _free(HEAP32[165] | 0); //@line 4541
  HEAP8[652] = 127; //@line 4542
  HEAP32[164] = 0; //@line 4543
  HEAP32[165] = 0; //@line 4544
  HEAP32[166] = 24; //@line 4545
  HEAP32[167] = 0; //@line 4546
  HEAP32[168] = 1024; //@line 4547
  HEAP32[169] = 0; //@line 4548
  HEAP32[170] = 128; //@line 4549
  HEAP32[172] = 0; //@line 4550
  HEAP32[173] = 0; //@line 4551
  HEAP32[174] = 18; //@line 4552
  HEAP32[175] = 0; //@line 4553
  HEAP32[176] = 0; //@line 4553
  HEAP32[177] = 0; //@line 4553
  HEAP32[178] = 0; //@line 4553
  $$0 = -1; //@line 4554
  return $$0 | 0; //@line 4555
 } else {
  _memset($9 | 0, 0, HEAP32[170] | 0) | 0; //@line 4558
  _memset(HEAP32[164] | 0, 0, HEAP32[166] | 0) | 0; //@line 4561
  _memset(HEAP32[165] | 0, 0, HEAP32[166] | 0) | 0; //@line 4564
  _memset(HEAP32[167] | 0, 0, HEAP32[168] | 0) | 0; //@line 4567
  $$0 = 0; //@line 4568
  return $$0 | 0; //@line 4569
 }
 return 0; //@line 4571
}
function __ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa__async_cb_134($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 28734
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28736
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28738
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28740
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28742
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28744
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28746
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28748
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28750
 if (HEAP32[___async_retval >> 2] | 0) {
  HEAP32[$4 + 2020 >> 2] = 1; //@line 28756
  return;
 }
 if (__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($2) | 0) {
  HEAP32[$4 + 2076 >> 2] = 4; //@line 28762
  HEAP8[$4 + 2080 >> 0] = 1; //@line 28764
  __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($2); //@line 28765
 }
 $26 = $10 & 255; //@line 28770
 $27 = $4 + 1442 | 0; //@line 28771
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 28772
 $28 = __ZN13LoRaMacCrypto15decrypt_payloadEPKhtS1_jjhjPh($4 + 756 | 0, $6 + $8 | 0, $26, $12, 128, $14, 1, $16, $27) | 0; //@line 28773
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 399; //@line 28776
  $29 = $ReallocAsyncCtx + 4 | 0; //@line 28777
  HEAP32[$29 >> 2] = $4; //@line 28778
  $30 = $ReallocAsyncCtx + 8 | 0; //@line 28779
  HEAP32[$30 >> 2] = $27; //@line 28780
  $31 = $ReallocAsyncCtx + 12 | 0; //@line 28781
  HEAP16[$31 >> 1] = $26; //@line 28782
  sp = STACKTOP; //@line 28783
  return;
 }
 HEAP32[___async_retval >> 2] = $28; //@line 28787
 ___async_unwind = 0; //@line 28788
 HEAP32[$ReallocAsyncCtx >> 2] = 399; //@line 28789
 $29 = $ReallocAsyncCtx + 4 | 0; //@line 28790
 HEAP32[$29 >> 2] = $4; //@line 28791
 $30 = $ReallocAsyncCtx + 8 | 0; //@line 28792
 HEAP32[$30 >> 2] = $27; //@line 28793
 $31 = $ReallocAsyncCtx + 12 | 0; //@line 28794
 HEAP16[$31 >> 1] = $26; //@line 28795
 sp = STACKTOP; //@line 28796
 return;
}
function __ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 6922
 STACKTOP = STACKTOP + 16 | 0; //@line 6923
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 6923
 $1 = sp; //@line 6924
 $3 = HEAP32[$0 + 3168 >> 2] | 0; //@line 6926
 $4 = $1 + 12 | 0; //@line 6927
 HEAP32[$1 >> 2] = 15; //@line 6928
 HEAP32[$1 + 4 >> 2] = 0; //@line 6930
 HEAP32[$1 + 8 >> 2] = $0; //@line 6932
 HEAP32[$4 >> 2] = 848; //@line 6933
 $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6934
 $5 = __ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0_($3, $1, 1) | 0; //@line 6935
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 215; //@line 6938
  HEAP32[$AsyncCtx3 + 4 >> 2] = $4; //@line 6940
  HEAP32[$AsyncCtx3 + 8 >> 2] = $1; //@line 6942
  sp = STACKTOP; //@line 6943
  STACKTOP = sp; //@line 6944
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 6946
 $8 = HEAP32[$4 >> 2] | 0; //@line 6947
 do {
  if ($8 | 0) {
   $11 = HEAP32[$8 + 8 >> 2] | 0; //@line 6952
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 6953
   FUNCTION_TABLE_vi[$11 & 1023]($1); //@line 6954
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 216; //@line 6957
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 6959
    HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 6961
    sp = STACKTOP; //@line 6962
    STACKTOP = sp; //@line 6963
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 6965
    break;
   }
  }
 } while (0);
 if ($5 | 0) {
  STACKTOP = sp; //@line 6972
  return;
 }
 $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6974
 _mbed_assert_internal(12104, 12113, 547); //@line 6975
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 217; //@line 6978
  sp = STACKTOP; //@line 6979
  STACKTOP = sp; //@line 6980
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 6982
 STACKTOP = sp; //@line 6983
 return;
}
function __ZN12LoRaWANStack26rx_error_interrupt_handlerEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 6818
 STACKTOP = STACKTOP + 16 | 0; //@line 6819
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 6819
 $1 = sp; //@line 6820
 $3 = HEAP32[$0 + 3168 >> 2] | 0; //@line 6822
 $4 = $1 + 12 | 0; //@line 6823
 HEAP32[$1 >> 2] = 15; //@line 6824
 HEAP32[$1 + 4 >> 2] = 0; //@line 6826
 HEAP32[$1 + 8 >> 2] = $0; //@line 6828
 HEAP32[$4 >> 2] = 848; //@line 6829
 $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6830
 $5 = __ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0_($3, $1, 0) | 0; //@line 6831
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 209; //@line 6834
  HEAP32[$AsyncCtx3 + 4 >> 2] = $4; //@line 6836
  HEAP32[$AsyncCtx3 + 8 >> 2] = $1; //@line 6838
  sp = STACKTOP; //@line 6839
  STACKTOP = sp; //@line 6840
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 6842
 $8 = HEAP32[$4 >> 2] | 0; //@line 6843
 do {
  if ($8 | 0) {
   $11 = HEAP32[$8 + 8 >> 2] | 0; //@line 6848
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 6849
   FUNCTION_TABLE_vi[$11 & 1023]($1); //@line 6850
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 210; //@line 6853
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 6855
    HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 6857
    sp = STACKTOP; //@line 6858
    STACKTOP = sp; //@line 6859
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 6861
    break;
   }
  }
 } while (0);
 if ($5 | 0) {
  STACKTOP = sp; //@line 6868
  return;
 }
 $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6870
 _mbed_assert_internal(12104, 12113, 532); //@line 6871
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 211; //@line 6874
  sp = STACKTOP; //@line 6875
  STACKTOP = sp; //@line 6876
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 6878
 STACKTOP = sp; //@line 6879
 return;
}
function __ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$016 = 0, $12 = 0, $13 = 0, $14 = 0, $17 = 0, $18 = 0, $21 = 0, $22 = 0, $28 = 0, $5 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 17017
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
  $28 = -1002; //@line 17021
  return $28 | 0; //@line 17022
 }
 $5 = __ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0; //@line 17025
 $6 = HEAP8[$1 >> 0] | 0; //@line 17026
 if (($6 & 255) > ($5 & 255)) {
  $28 = -1003; //@line 17029
  return $28 | 0; //@line 17030
 }
 if (!($6 << 24 >> 24)) {
  $28 = 0; //@line 17034
  return $28 | 0; //@line 17035
 }
 $9 = $1 + 4 | 0; //@line 17037
 $$016 = 0; //@line 17038
 while (1) {
  $13 = $$016 & 255; //@line 17040
  $14 = HEAP32[$0 >> 2] | 0; //@line 17041
  $17 = HEAP32[(HEAP32[$14 >> 2] | 0) + 60 >> 2] | 0; //@line 17044
  $18 = HEAP32[$9 >> 2] | 0; //@line 17045
  $21 = HEAP8[$18 + ($13 << 4) >> 0] | 0; //@line 17048
  $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 17049
  $22 = FUNCTION_TABLE_iiii[$17 & 31]($14, $18 + ($13 << 4) + 4 | 0, $21) | 0; //@line 17050
  if (___async) {
   label = 7; //@line 17053
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 17056
  $12 = $$016 + 1 << 24 >> 24; //@line 17058
  if ($22 | 0) {
   $28 = $22; //@line 17060
   label = 9; //@line 17061
   break;
  }
  if (($12 & 255) < (HEAPU8[$1 >> 0] | 0)) {
   $$016 = $12; //@line 17067
  } else {
   $28 = 0; //@line 17069
   label = 9; //@line 17070
   break;
  }
 }
 if ((label | 0) == 7) {
  HEAP32[$AsyncCtx >> 2] = 484; //@line 17075
  HEAP8[$AsyncCtx + 4 >> 0] = $$016; //@line 17077
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 17079
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 17081
  HEAP32[$AsyncCtx + 16 >> 2] = $9; //@line 17083
  sp = STACKTOP; //@line 17084
  return 0; //@line 17085
 } else if ((label | 0) == 9) {
  return $28 | 0; //@line 17088
 }
 return 0; //@line 17090
}
function ___strchrnul($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $13 = 0, $17 = 0, $18 = 0, $2 = 0, $24 = 0, $25 = 0, $31 = 0, $38 = 0, $39 = 0, $7 = 0;
 $2 = $1 & 255; //@line 12256
 L1 : do {
  if (!$2) {
   $$0 = $0 + (_strlen($0) | 0) | 0; //@line 12262
  } else {
   if (!($0 & 3)) {
    $$030$lcssa = $0; //@line 12268
   } else {
    $7 = $1 & 255; //@line 12270
    $$03039 = $0; //@line 12271
    while (1) {
     $10 = HEAP8[$$03039 >> 0] | 0; //@line 12273
     if ($10 << 24 >> 24 == 0 ? 1 : $10 << 24 >> 24 == $7 << 24 >> 24) {
      $$0 = $$03039; //@line 12278
      break L1;
     }
     $13 = $$03039 + 1 | 0; //@line 12281
     if (!($13 & 3)) {
      $$030$lcssa = $13; //@line 12286
      break;
     } else {
      $$03039 = $13; //@line 12289
     }
    }
   }
   $17 = Math_imul($2, 16843009) | 0; //@line 12293
   $18 = HEAP32[$$030$lcssa >> 2] | 0; //@line 12294
   L10 : do {
    if (!(($18 & -2139062144 ^ -2139062144) & $18 + -16843009)) {
     $$02936 = $$030$lcssa; //@line 12302
     $25 = $18; //@line 12302
     while (1) {
      $24 = $25 ^ $17; //@line 12304
      if (($24 & -2139062144 ^ -2139062144) & $24 + -16843009 | 0) {
       $$029$lcssa = $$02936; //@line 12311
       break L10;
      }
      $31 = $$02936 + 4 | 0; //@line 12314
      $25 = HEAP32[$31 >> 2] | 0; //@line 12315
      if (($25 & -2139062144 ^ -2139062144) & $25 + -16843009 | 0) {
       $$029$lcssa = $31; //@line 12324
       break;
      } else {
       $$02936 = $31; //@line 12322
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa; //@line 12329
    }
   } while (0);
   $38 = $1 & 255; //@line 12332
   $$1 = $$029$lcssa; //@line 12333
   while (1) {
    $39 = HEAP8[$$1 >> 0] | 0; //@line 12335
    if ($39 << 24 >> 24 == 0 ? 1 : $39 << 24 >> 24 == $38 << 24 >> 24) {
     $$0 = $$1; //@line 12341
     break;
    } else {
     $$1 = $$1 + 1 | 0; //@line 12344
    }
   }
  }
 } while (0);
 return $$0 | 0; //@line 12349
}
function __ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 var $$ = 0, $$sink = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $31 = 0, label = 0;
 $14 = $8 & 1; //@line 250
 $15 = $9 & 1; //@line 251
 $16 = $10 & 1; //@line 252
 $17 = $12 & 1; //@line 253
 HEAP8[$0 + 689 >> 0] = $1; //@line 256
 switch ($1 | 0) {
 case 0:
  {
   HEAP8[$0 + 696 >> 0] = $2; //@line 260
   HEAP32[$0 + 700 >> 2] = $3; //@line 262
   HEAP32[$0 + 704 >> 2] = $4; //@line 264
   HEAP32[$0 + 712 >> 2] = $5; //@line 266
   HEAP16[$0 + 716 >> 1] = $7; //@line 268
   HEAP8[$0 + 718 >> 0] = $14; //@line 270
   HEAP8[$0 + 720 >> 0] = $15; //@line 272
   HEAP8[$0 + 721 >> 0] = $17; //@line 274
   HEAP32[$0 + 724 >> 2] = $13; //@line 276
   return;
  }
 case 1:
  {
   HEAP8[$0 + 748 >> 0] = $2; //@line 282
   if ($4 >>> 0 > 2) {
    while (1) {}
   }
   $31 = $4 + 7 | 0; //@line 288
   HEAP32[$0 + 752 >> 2] = $31; //@line 290
   HEAP32[$0 + 756 >> 2] = $5; //@line 292
   HEAP8[$0 + 761 >> 0] = $6; //@line 294
   HEAP16[$0 + 762 >> 1] = $7; //@line 296
   HEAP8[$0 + 764 >> 0] = $14; //@line 298
   HEAP8[$0 + 767 >> 0] = $16; //@line 300
   HEAP8[$0 + 768 >> 0] = $11; //@line 302
   HEAP8[$0 + 766 >> 0] = $15; //@line 304
   HEAP8[$0 + 769 >> 0] = $17; //@line 306
   HEAP32[$0 + 772 >> 2] = $13; //@line 308
   $$ = $5 >>> 0 > 6 ? $5 : 6; //@line 310
   if (($4 | 0) == 0 & (($$ >>> 0 < 12 ? $$ : 12) + -11 | 0) >>> 0 < 2) {
    label = 7; //@line 318
   } else {
    if (($31 | 0) == 8 & $$ >>> 0 > 11) {
     label = 7; //@line 324
    } else {
     $$sink = 0; //@line 326
    }
   }
   if ((label | 0) == 7) {
    $$sink = 1; //@line 330
   }
   HEAP8[$0 + 760 >> 0] = $$sink; //@line 333
   return;
  }
 default:
  {
   return;
  }
 }
}
function __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($0) {
 $0 = $0 | 0;
 var $$0$lcssa = 0, $$01315 = 0, $$016 = 0, $$1 = 0, $$114 = 0, $$sink = 0, $2 = 0, $23 = 0, $26 = 0, $27 = 0, $5 = 0, $6 = 0, $7 = 0;
 $2 = HEAP8[$0 + 2 >> 0] | 0; //@line 17386
 if (!($2 << 24 >> 24)) {
  $$0$lcssa = 0; //@line 17389
  $26 = $$0$lcssa << 24 >> 24 != 0; //@line 17390
  $$sink = $26 & 1; //@line 17391
  HEAP8[$0 >> 0] = $$sink; //@line 17392
  $27 = $0 + 3 | 0; //@line 17393
  HEAP8[$27 >> 0] = $$0$lcssa; //@line 17394
  return;
 } else {
  $$01315 = 0; //@line 17397
  $$016 = 0; //@line 17397
  $5 = 0; //@line 17397
 }
 while (1) {
  $6 = HEAP8[$0 + 4 + $5 >> 0] | 0; //@line 17401
  switch ($6 << 24 >> 24) {
  case 5:
  case 10:
   {
    $7 = $$01315 + 1 << 24 >> 24; //@line 17404
    HEAP8[($$016 & 255) + ($0 + 132) >> 0] = $6; //@line 17408
    HEAP8[($$016 + 1 & 255) + ($0 + 132) >> 0] = HEAP8[($7 & 255) + ($0 + 4) >> 0] | 0; //@line 17415
    $$1 = $$016 + 2 << 24 >> 24; //@line 17416
    $$114 = $7; //@line 17416
    break;
   }
  case 8:
   {
    HEAP8[($$016 & 255) + ($0 + 132) >> 0] = 8; //@line 17423
    $$1 = $$016 + 1 << 24 >> 24; //@line 17424
    $$114 = $$01315; //@line 17424
    break;
   }
  case 6:
   {
    $$1 = $$016; //@line 17430
    $$114 = $5 + 2 & 255; //@line 17430
    break;
   }
  case 7:
  case 3:
   {
    $$1 = $$016; //@line 17435
    $$114 = $$01315 + 1 << 24 >> 24; //@line 17435
    break;
   }
  default:
   {
    $$1 = $$016; //@line 17439
    $$114 = $$01315; //@line 17439
   }
  }
  $23 = $$114 + 1 << 24 >> 24; //@line 17442
  if (($23 & 255) < ($2 & 255)) {
   $$01315 = $23; //@line 17446
   $$016 = $$1; //@line 17446
   $5 = $23 & 255; //@line 17446
  } else {
   $$0$lcssa = $$1; //@line 17448
   break;
  }
 }
 $26 = $$0$lcssa << 24 >> 24 != 0; //@line 17452
 $$sink = $26 & 1; //@line 17453
 HEAP8[$0 >> 0] = $$sink; //@line 17454
 $27 = $0 + 3 | 0; //@line 17455
 HEAP8[$27 >> 0] = $$0$lcssa; //@line 17456
 return;
}
function ___fwritex($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$038 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $10 = 0, $12 = 0, $14 = 0, $22 = 0, $28 = 0, $3 = 0, $31 = 0, $4 = 0, $9 = 0, label = 0;
 $3 = $2 + 16 | 0; //@line 11998
 $4 = HEAP32[$3 >> 2] | 0; //@line 11999
 if (!$4) {
  if (!(___towrite($2) | 0)) {
   $12 = HEAP32[$3 >> 2] | 0; //@line 12006
   label = 5; //@line 12007
  } else {
   $$1 = 0; //@line 12009
  }
 } else {
  $12 = $4; //@line 12013
  label = 5; //@line 12014
 }
 L5 : do {
  if ((label | 0) == 5) {
   $9 = $2 + 20 | 0; //@line 12018
   $10 = HEAP32[$9 >> 2] | 0; //@line 12019
   $14 = $10; //@line 12022
   if (($12 - $10 | 0) >>> 0 < $1 >>> 0) {
    $$1 = FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 31]($2, $0, $1) | 0; //@line 12027
    break;
   }
   L10 : do {
    if ((HEAP8[$2 + 75 >> 0] | 0) > -1) {
     $$038 = $1; //@line 12035
     while (1) {
      if (!$$038) {
       $$139 = 0; //@line 12039
       $$141 = $0; //@line 12039
       $$143 = $1; //@line 12039
       $31 = $14; //@line 12039
       break L10;
      }
      $22 = $$038 + -1 | 0; //@line 12042
      if ((HEAP8[$0 + $22 >> 0] | 0) == 10) {
       break;
      } else {
       $$038 = $22; //@line 12049
      }
     }
     $28 = FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 31]($2, $0, $$038) | 0; //@line 12054
     if ($28 >>> 0 < $$038 >>> 0) {
      $$1 = $28; //@line 12057
      break L5;
     }
     $$139 = $$038; //@line 12063
     $$141 = $0 + $$038 | 0; //@line 12063
     $$143 = $1 - $$038 | 0; //@line 12063
     $31 = HEAP32[$9 >> 2] | 0; //@line 12063
    } else {
     $$139 = 0; //@line 12065
     $$141 = $0; //@line 12065
     $$143 = $1; //@line 12065
     $31 = $14; //@line 12065
    }
   } while (0);
   _memcpy($31 | 0, $$141 | 0, $$143 | 0) | 0; //@line 12068
   HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + $$143; //@line 12071
   $$1 = $$139 + $$143 | 0; //@line 12073
  }
 } while (0);
 return $$1 | 0; //@line 12076
}
function __ZN7LoRaMac13clear_tx_pipeEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 15443
 STACKTOP = STACKTOP + 16 | 0; //@line 15444
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15444
 $vararg_buffer = sp; //@line 15445
 if ((__ZN6events10EventQueue9time_leftEi(HEAP32[$0 + 1992 >> 2] | 0, HEAP32[$0 + 1812 >> 2] | 0) | 0) <= 0) {
  $$0 = -1e3; //@line 15453
  STACKTOP = sp; //@line 15454
  return $$0 | 0; //@line 15454
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(20, sp) | 0; //@line 15457
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1796 | 0); //@line 15458
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 446; //@line 15461
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 15463
  HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 15465
  HEAP32[$AsyncCtx3 + 12 >> 2] = $vararg_buffer; //@line 15467
  HEAP32[$AsyncCtx3 + 16 >> 2] = $vararg_buffer; //@line 15469
  sp = STACKTOP; //@line 15470
  STACKTOP = sp; //@line 15471
  return 0; //@line 15471
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15473
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 15475
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1856 | 0); //@line 15476
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 447; //@line 15479
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 15481
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 15483
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer; //@line 15485
  sp = STACKTOP; //@line 15486
  STACKTOP = sp; //@line 15487
  return 0; //@line 15487
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 15489
 HEAP8[$0 + 2104 >> 0] = 0; //@line 15492
 _memset($0 + 1185 | 0, 0, 257) | 0; //@line 15494
 _memset($0 + 2115 | 0, 0, 259) | 0; //@line 15495
 _mbed_tracef(16, 12890, 13322, $vararg_buffer); //@line 15496
 $$0 = 0; //@line 15497
 STACKTOP = sp; //@line 15498
 return $$0 | 0; //@line 15498
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_364($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $24 = 0, $27 = 0, $30 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 25467
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25469
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25473
 $8 = $0 + 16 | 0; //@line 25475
 $10 = HEAP32[$8 >> 2] | 0; //@line 25477
 $13 = HEAP32[$8 + 4 >> 2] | 0; //@line 25480
 $15 = HEAP32[$0 + 24 >> 2] | 0; //@line 25482
 $17 = HEAP32[$0 + 28 >> 2] | 0; //@line 25484
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 >> 2]; //@line 25486
 __ZN4mbed6Ticker5setupEy($6, $10, $13); //@line 25487
 $18 = HEAP32[$2 >> 2] | 0; //@line 25488
 if ($18 | 0) {
  $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 25492
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 25493
  FUNCTION_TABLE_vi[$21 & 1023]($17); //@line 25494
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 88; //@line 25497
   $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 25498
   HEAP32[$22 >> 2] = $15; //@line 25499
   sp = STACKTOP; //@line 25500
   return;
  }
  ___async_unwind = 0; //@line 25503
  HEAP32[$ReallocAsyncCtx3 >> 2] = 88; //@line 25504
  $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 25505
  HEAP32[$22 >> 2] = $15; //@line 25506
  sp = STACKTOP; //@line 25507
  return;
 }
 $24 = HEAP32[$15 + 788 >> 2] | 0; //@line 25511
 if (!$24) {
  return;
 }
 $27 = HEAP32[$24 + 60 >> 2] | 0; //@line 25517
 if (!$27) {
  return;
 }
 $30 = HEAP32[$27 >> 2] | 0; //@line 25523
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 25524
 FUNCTION_TABLE_vi[$30 & 1023]($24 + 48 | 0); //@line 25525
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 89; //@line 25528
  sp = STACKTOP; //@line 25529
  return;
 }
 ___async_unwind = 0; //@line 25532
 HEAP32[$ReallocAsyncCtx4 >> 2] = 89; //@line 25533
 sp = STACKTOP; //@line 25534
 return;
}
function __ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_61($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 24988
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24990
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24992
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24994
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24996
 HEAP8[$2 + 2548 >> 0] = 0; //@line 24998
 HEAP32[$4 >> 2] = 11; //@line 24999
 HEAP32[$6 >> 2] = -1011; //@line 25000
 $10 = $2 + 2904 | 0; //@line 25001
 HEAP32[$10 >> 2] = HEAP32[$10 >> 2] & -5; //@line 25004
 $13 = $2 + 2512 | 0; //@line 25005
 $14 = HEAP32[$13 >> 2] | 0; //@line 25006
 if (!$14) {
  return;
 }
 $18 = HEAP32[$2 + 3168 >> 2] | 0; //@line 25013
 $20 = HEAP32[$14 + 4 >> 2] | 0; //@line 25015
 $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 25016
 FUNCTION_TABLE_vii[$20 & 15]($8, $2 + 2500 | 0); //@line 25017
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 349; //@line 25020
  $21 = $ReallocAsyncCtx + 4 | 0; //@line 25021
  HEAP32[$21 >> 2] = $13; //@line 25022
  $22 = $ReallocAsyncCtx + 8 | 0; //@line 25023
  HEAP32[$22 >> 2] = $8; //@line 25024
  $23 = $ReallocAsyncCtx + 12 | 0; //@line 25025
  HEAP32[$23 >> 2] = $18; //@line 25026
  $24 = $ReallocAsyncCtx + 16 | 0; //@line 25027
  HEAP32[$24 >> 2] = $8; //@line 25028
  sp = STACKTOP; //@line 25029
  return;
 }
 ___async_unwind = 0; //@line 25032
 HEAP32[$ReallocAsyncCtx >> 2] = 349; //@line 25033
 $21 = $ReallocAsyncCtx + 4 | 0; //@line 25034
 HEAP32[$21 >> 2] = $13; //@line 25035
 $22 = $ReallocAsyncCtx + 8 | 0; //@line 25036
 HEAP32[$22 >> 2] = $8; //@line 25037
 $23 = $ReallocAsyncCtx + 12 | 0; //@line 25038
 HEAP32[$23 >> 2] = $18; //@line 25039
 $24 = $ReallocAsyncCtx + 16 | 0; //@line 25040
 HEAP32[$24 >> 2] = $8; //@line 25041
 sp = STACKTOP; //@line 25042
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_196($0) {
 $0 = $0 | 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 33311
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 33313
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33315
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33317
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33319
 if (!(HEAP8[$2 + 1175 >> 0] | 0)) {
  HEAP32[$2 + 2056 >> 2] = 0; //@line 33325
  HEAP32[$2 + 2092 >> 2] = 4; //@line 33327
  $22 = HEAP8[$2 + 1182 >> 0] | 0; //@line 33329
  HEAP8[$2 + 1183 >> 0] = $22; //@line 33331
  __ZN7LoRaPHY16set_last_tx_doneEhbj($2 + 4 | 0, $22, (HEAP8[$2 + 2376 >> 0] | 0) != 0, $8); //@line 33336
  HEAP32[$2 + 1780 >> 2] = $8; //@line 33338
  return;
 }
 $14 = HEAP32[$2 + 1772 >> 2] | 0; //@line 33343
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 33344
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($4, $2 + 1816 | 0, $14); //@line 33345
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 384; //@line 33348
  $15 = $ReallocAsyncCtx3 + 4 | 0; //@line 33349
  HEAP32[$15 >> 2] = $6; //@line 33350
  $16 = $ReallocAsyncCtx3 + 8 | 0; //@line 33351
  HEAP32[$16 >> 2] = $2; //@line 33352
  $17 = $ReallocAsyncCtx3 + 12 | 0; //@line 33353
  HEAP32[$17 >> 2] = $4; //@line 33354
  $18 = $ReallocAsyncCtx3 + 16 | 0; //@line 33355
  HEAP32[$18 >> 2] = $8; //@line 33356
  sp = STACKTOP; //@line 33357
  return;
 }
 ___async_unwind = 0; //@line 33360
 HEAP32[$ReallocAsyncCtx3 >> 2] = 384; //@line 33361
 $15 = $ReallocAsyncCtx3 + 4 | 0; //@line 33362
 HEAP32[$15 >> 2] = $6; //@line 33363
 $16 = $ReallocAsyncCtx3 + 8 | 0; //@line 33364
 HEAP32[$16 >> 2] = $2; //@line 33365
 $17 = $ReallocAsyncCtx3 + 12 | 0; //@line 33366
 HEAP32[$17 >> 2] = $4; //@line 33367
 $18 = $ReallocAsyncCtx3 + 16 | 0; //@line 33368
 HEAP32[$18 >> 2] = $8; //@line 33369
 sp = STACKTOP; //@line 33370
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_195($0) {
 $0 = $0 | 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 33245
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 33247
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33249
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33251
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33253
 if (!(HEAP8[$2 + 1175 >> 0] | 0)) {
  HEAP32[$2 + 2056 >> 2] = 0; //@line 33259
  HEAP32[$2 + 2092 >> 2] = 4; //@line 33261
  $22 = HEAP8[$2 + 1182 >> 0] | 0; //@line 33263
  HEAP8[$2 + 1183 >> 0] = $22; //@line 33265
  __ZN7LoRaPHY16set_last_tx_doneEhbj($2 + 4 | 0, $22, (HEAP8[$2 + 2376 >> 0] | 0) != 0, $8); //@line 33270
  HEAP32[$2 + 1780 >> 2] = $8; //@line 33272
  return;
 }
 $14 = HEAP32[$2 + 1772 >> 2] | 0; //@line 33277
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 33278
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($4, $2 + 1816 | 0, $14); //@line 33279
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 384; //@line 33282
  $15 = $ReallocAsyncCtx3 + 4 | 0; //@line 33283
  HEAP32[$15 >> 2] = $6; //@line 33284
  $16 = $ReallocAsyncCtx3 + 8 | 0; //@line 33285
  HEAP32[$16 >> 2] = $2; //@line 33286
  $17 = $ReallocAsyncCtx3 + 12 | 0; //@line 33287
  HEAP32[$17 >> 2] = $4; //@line 33288
  $18 = $ReallocAsyncCtx3 + 16 | 0; //@line 33289
  HEAP32[$18 >> 2] = $8; //@line 33290
  sp = STACKTOP; //@line 33291
  return;
 }
 ___async_unwind = 0; //@line 33294
 HEAP32[$ReallocAsyncCtx3 >> 2] = 384; //@line 33295
 $15 = $ReallocAsyncCtx3 + 4 | 0; //@line 33296
 HEAP32[$15 >> 2] = $6; //@line 33297
 $16 = $ReallocAsyncCtx3 + 8 | 0; //@line 33298
 HEAP32[$16 >> 2] = $2; //@line 33299
 $17 = $ReallocAsyncCtx3 + 12 | 0; //@line 33300
 HEAP32[$17 >> 2] = $4; //@line 33301
 $18 = $ReallocAsyncCtx3 + 16 | 0; //@line 33302
 HEAP32[$18 >> 2] = $8; //@line 33303
 sp = STACKTOP; //@line 33304
 return;
}
function _mbedtls_cipher_setkey($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $22 = 0, $24 = 0, $25 = 0, $30 = 0, $32 = 0, $33 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 2565
 if (!$0) {
  $$0 = -24832; //@line 2568
  return $$0 | 0; //@line 2569
 }
 $5 = HEAP32[$0 >> 2] | 0; //@line 2571
 if (!$5) {
  $$0 = -24832; //@line 2574
  return $$0 | 0; //@line 2575
 }
 if (!(HEAP32[$5 + 20 >> 2] & 2)) {
  if ((HEAP32[$5 + 8 >> 2] | 0) != ($2 | 0)) {
   $$0 = -24832; //@line 2586
   return $$0 | 0; //@line 2587
  }
 }
 HEAP32[$0 + 4 >> 2] = $2; //@line 2591
 HEAP32[$0 + 8 >> 2] = $3; //@line 2593
 L11 : do {
  if (($3 | 0) != 1) {
   switch (HEAP32[$5 + 4 >> 2] | 0) {
   case 5:
   case 3:
    {
     break L11;
     break;
    }
   default:
    {}
   }
   if ($3 | 0) {
    $$0 = -24832; //@line 2609
    return $$0 | 0; //@line 2610
   }
   $30 = HEAP32[(HEAP32[$5 + 28 >> 2] | 0) + 20 >> 2] | 0; //@line 2615
   $32 = HEAP32[$0 + 60 >> 2] | 0; //@line 2617
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2618
   $33 = FUNCTION_TABLE_iiii[$30 & 31]($32, $1, $2) | 0; //@line 2619
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 582; //@line 2622
    sp = STACKTOP; //@line 2623
    return 0; //@line 2624
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2626
   $$0 = $33; //@line 2627
   return $$0 | 0; //@line 2628
  }
 } while (0);
 $22 = HEAP32[(HEAP32[$5 + 28 >> 2] | 0) + 16 >> 2] | 0; //@line 2634
 $24 = HEAP32[$0 + 60 >> 2] | 0; //@line 2636
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2637
 $25 = FUNCTION_TABLE_iiii[$22 & 31]($24, $1, $2) | 0; //@line 2638
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 581; //@line 2641
  sp = STACKTOP; //@line 2642
  return 0; //@line 2643
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2645
 $$0 = $25; //@line 2646
 return $$0 | 0; //@line 2647
}
function __ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_93($0) {
 $0 = $0 | 0;
 var $13 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 26232
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26234
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26236
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26238
 if (HEAP8[___async_retval >> 0] & 1) {
  return;
 }
 $8 = $4 + 2512 | 0; //@line 26245
 $9 = HEAP32[$8 >> 2] | 0; //@line 26246
 if (!$9) {
  HEAP32[$6 >> 2] = 2; //@line 26249
  return;
 }
 $13 = HEAP32[$4 + 3168 >> 2] | 0; //@line 26254
 $15 = HEAP32[$9 + 4 >> 2] | 0; //@line 26256
 $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 26257
 FUNCTION_TABLE_vii[$15 & 15]($2, $4 + 2500 | 0); //@line 26258
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 236; //@line 26261
  $16 = $ReallocAsyncCtx + 4 | 0; //@line 26262
  HEAP32[$16 >> 2] = $8; //@line 26263
  $17 = $ReallocAsyncCtx + 8 | 0; //@line 26264
  HEAP32[$17 >> 2] = $2; //@line 26265
  $18 = $ReallocAsyncCtx + 12 | 0; //@line 26266
  HEAP32[$18 >> 2] = $13; //@line 26267
  $19 = $ReallocAsyncCtx + 16 | 0; //@line 26268
  HEAP32[$19 >> 2] = $2; //@line 26269
  $20 = $ReallocAsyncCtx + 20 | 0; //@line 26270
  HEAP32[$20 >> 2] = $6; //@line 26271
  sp = STACKTOP; //@line 26272
  return;
 }
 ___async_unwind = 0; //@line 26275
 HEAP32[$ReallocAsyncCtx >> 2] = 236; //@line 26276
 $16 = $ReallocAsyncCtx + 4 | 0; //@line 26277
 HEAP32[$16 >> 2] = $8; //@line 26278
 $17 = $ReallocAsyncCtx + 8 | 0; //@line 26279
 HEAP32[$17 >> 2] = $2; //@line 26280
 $18 = $ReallocAsyncCtx + 12 | 0; //@line 26281
 HEAP32[$18 >> 2] = $13; //@line 26282
 $19 = $ReallocAsyncCtx + 16 | 0; //@line 26283
 HEAP32[$19 >> 2] = $2; //@line 26284
 $20 = $ReallocAsyncCtx + 20 | 0; //@line 26285
 HEAP32[$20 >> 2] = $6; //@line 26286
 sp = STACKTOP; //@line 26287
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $30 = 0, $34 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 25675
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25677
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25683
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25685
 $12 = HEAP8[$0 + 24 >> 0] & 1; //@line 25688
 $14 = HEAP8[$0 + 25 >> 0] & 1; //@line 25691
 $16 = HEAP8[$0 + 26 >> 0] | 0; //@line 25693
 $18 = HEAP8[$0 + 27 >> 0] | 0; //@line 25695
 $20 = HEAP32[$0 + 28 >> 2] | 0; //@line 25697
 $22 = HEAP32[$0 + 32 >> 2] | 0; //@line 25699
 $24 = HEAP32[$0 + 36 >> 2] | 0; //@line 25701
 $26 = HEAP32[$0 + 40 >> 2] | 0; //@line 25703
 $27 = HEAP32[$2 >> 2] | 0; //@line 25704
 $30 = HEAP32[(HEAP32[$27 >> 2] | 0) + 32 >> 2] | 0; //@line 25707
 $34 = HEAP32[(HEAP32[$0 + 12 >> 2] | 0) + ((HEAPU8[HEAP32[$0 + 8 >> 2] >> 0] | 0) * 12 | 0) >> 2] | 0; //@line 25711
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 25712
 FUNCTION_TABLE_vii[$30 & 15]($27, $34); //@line 25713
 if (!___async) {
  ___async_unwind = 0; //@line 25716
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 528; //@line 25718
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $8; //@line 25720
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $10; //@line 25722
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 25724
 HEAP8[$ReallocAsyncCtx2 + 16 >> 0] = $12 & 1; //@line 25727
 HEAP8[$ReallocAsyncCtx2 + 17 >> 0] = $14 & 1; //@line 25730
 HEAP8[$ReallocAsyncCtx2 + 18 >> 0] = $16; //@line 25732
 HEAP8[$ReallocAsyncCtx2 + 19 >> 0] = $18; //@line 25734
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $20; //@line 25736
 HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $22; //@line 25738
 HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $24; //@line 25740
 HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $26; //@line 25742
 sp = STACKTOP; //@line 25743
 return;
}
function _mbedtls_gcm_setkey__async_cb_324($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 23007
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23009
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23011
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23013
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23015
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 23017
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 23021
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 23024
 dest = $2; //@line 23025
 stop = dest + 16 | 0; //@line 23025
 do {
  HEAP8[dest >> 0] = 0; //@line 23025
  dest = dest + 1 | 0; //@line 23025
 } while ((dest | 0) < (stop | 0));
 $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 23026
 $11 = _mbedtls_cipher_update($6, $2, 16, $2, $4) | 0; //@line 23027
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 612; //@line 23030
  $12 = $ReallocAsyncCtx + 4 | 0; //@line 23031
  HEAP32[$12 >> 2] = $2; //@line 23032
  $13 = $ReallocAsyncCtx + 8 | 0; //@line 23033
  HEAP32[$13 >> 2] = $2; //@line 23034
  $14 = $ReallocAsyncCtx + 12 | 0; //@line 23035
  HEAP32[$14 >> 2] = $8; //@line 23036
  $15 = $ReallocAsyncCtx + 16 | 0; //@line 23037
  HEAP32[$15 >> 2] = $4; //@line 23038
  sp = STACKTOP; //@line 23039
  return;
 }
 HEAP32[___async_retval >> 2] = $11; //@line 23043
 ___async_unwind = 0; //@line 23044
 HEAP32[$ReallocAsyncCtx >> 2] = 612; //@line 23045
 $12 = $ReallocAsyncCtx + 4 | 0; //@line 23046
 HEAP32[$12 >> 2] = $2; //@line 23047
 $13 = $ReallocAsyncCtx + 8 | 0; //@line 23048
 HEAP32[$13 >> 2] = $2; //@line 23049
 $14 = $ReallocAsyncCtx + 12 | 0; //@line 23050
 HEAP32[$14 >> 2] = $8; //@line 23051
 $15 = $ReallocAsyncCtx + 16 | 0; //@line 23052
 HEAP32[$15 >> 2] = $4; //@line 23053
 sp = STACKTOP; //@line 23054
 return;
}
function __ZN12LoRaWANStack16set_device_classERK14device_class_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $11 = 0, $14 = 0, $2 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 11786
 STACKTOP = STACKTOP + 16 | 0; //@line 11787
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 11787
 $2 = sp; //@line 11788
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$0 = -1012; //@line 11793
  STACKTOP = sp; //@line 11794
  return $$0 | 0; //@line 11794
 }
 if ((HEAP32[$1 >> 2] | 0) == 1) {
  $$0 = -1013; //@line 11799
  STACKTOP = sp; //@line 11800
  return $$0 | 0; //@line 11800
 }
 $8 = $2 + 12 | 0; //@line 11802
 HEAP32[$2 >> 2] = 372; //@line 11803
 HEAP32[$2 + 4 >> 2] = 0; //@line 11805
 HEAP32[$2 + 8 >> 2] = $0; //@line 11807
 HEAP32[$8 >> 2] = 824; //@line 11808
 $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 11809
 __ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE($0, $1, $2); //@line 11810
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 373; //@line 11813
  HEAP32[$AsyncCtx3 + 4 >> 2] = $8; //@line 11815
  HEAP32[$AsyncCtx3 + 8 >> 2] = $2; //@line 11817
  sp = STACKTOP; //@line 11818
  STACKTOP = sp; //@line 11819
  return 0; //@line 11819
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 11821
 $11 = HEAP32[$8 >> 2] | 0; //@line 11822
 if (!$11) {
  $$0 = 0; //@line 11825
  STACKTOP = sp; //@line 11826
  return $$0 | 0; //@line 11826
 }
 $14 = HEAP32[$11 + 8 >> 2] | 0; //@line 11829
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 11830
 FUNCTION_TABLE_vi[$14 & 1023]($2); //@line 11831
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 374; //@line 11834
  sp = STACKTOP; //@line 11835
  STACKTOP = sp; //@line 11836
  return 0; //@line 11836
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 11838
 $$0 = 0; //@line 11839
 STACKTOP = sp; //@line 11840
 return $$0 | 0; //@line 11840
}
function __ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb_106($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $44 = 0, $54 = 0, $58 = 0, $6 = 0, $65 = 0, $66 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 27053
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27055
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27057
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27059
 if (HEAP32[___async_retval >> 2] | 0) {
  HEAP32[$2 + 2092 >> 2] = 13; //@line 27065
  return;
 }
 HEAP32[$2 + 1752 >> 2] = (HEAPU8[$2 + 1448 >> 0] | 0) << 16 | ((HEAPU8[$2 + 1447 >> 0] | 0) << 8 | (HEAPU8[$2 + 1446 >> 0] | 0)); //@line 27082
 HEAP32[$2 + 1756 >> 2] = (HEAPU8[$2 + 1452 >> 0] | 0) << 24 | ((HEAPU8[$2 + 1451 >> 0] | 0) << 16 | ((HEAPU8[$2 + 1450 >> 0] | 0) << 8 | (HEAPU8[$2 + 1449 >> 0] | 0))); //@line 27102
 $44 = HEAP8[$2 + 1453 >> 0] | 0; //@line 27104
 HEAP8[$2 + 1909 >> 0] = ($44 & 255) >>> 4 & 7; //@line 27110
 HEAP8[$2 + 1916 >> 0] = $44 & 15; //@line 27113
 $54 = HEAP8[$2 + 1454 >> 0] & 15; //@line 27116
 $58 = $54 << 24 >> 24 == 0 ? 1e3 : ($54 & 255) * 1e3 | 0; //@line 27121
 HEAP32[$2 + 1892 >> 2] = $58; //@line 27122
 HEAP32[$2 + 1896 >> 2] = $58 + 1e3; //@line 27125
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 27130
 __ZN7LoRaPHY13apply_cf_listEPKhh($2 + 4 | 0, $2 + 1455 | 0, $4 + 239 & 255); //@line 27131
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 394; //@line 27134
  $65 = $ReallocAsyncCtx4 + 4 | 0; //@line 27135
  HEAP32[$65 >> 2] = $2; //@line 27136
  $66 = $ReallocAsyncCtx4 + 8 | 0; //@line 27137
  HEAP32[$66 >> 2] = $6; //@line 27138
  sp = STACKTOP; //@line 27139
  return;
 }
 ___async_unwind = 0; //@line 27142
 HEAP32[$ReallocAsyncCtx4 >> 2] = 394; //@line 27143
 $65 = $ReallocAsyncCtx4 + 4 | 0; //@line 27144
 HEAP32[$65 >> 2] = $2; //@line 27145
 $66 = $ReallocAsyncCtx4 + 8 | 0; //@line 27146
 HEAP32[$66 >> 2] = $6; //@line 27147
 sp = STACKTOP; //@line 27148
 return;
}
function _main__async_cb_381($0) {
 $0 = $0 | 0;
 var $15 = 0, $16 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 26634
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26638
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26640
 __ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t(20652, 23828) | 0; //@line 26643
 if (__ZN16LoRaWANInterface25disable_adaptive_datarateEv(20652) | 0) {
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 26647
  _puts(15381) | 0; //@line 26648
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 681; //@line 26651
   sp = STACKTOP; //@line 26652
   return;
  }
  ___async_unwind = 0; //@line 26655
  HEAP32[$ReallocAsyncCtx7 >> 2] = 681; //@line 26656
  sp = STACKTOP; //@line 26657
  return;
 }
 __ZN16LoRaWANInterface12set_datarateEh(20652, 5) | 0; //@line 26660
 HEAP8[$4 >> 0] = 0; //@line 26661
 HEAP32[$4 + 4 >> 2] = 24461; //@line 26663
 HEAP32[$4 + 8 >> 2] = 24469; //@line 26665
 HEAP32[$4 + 12 >> 2] = 24477; //@line 26667
 HEAP8[$4 + 16 >> 0] = 3; //@line 26669
 $15 = __ZN16LoRaWANInterface7connectERK15lorawan_connect(20652, $4) | 0; //@line 26670
 switch ($15 | 0) {
 case 0:
 case -1016:
  {
   break;
  }
 default:
  {
   HEAP32[$6 >> 2] = $15; //@line 26676
   _printf(15415, $6) | 0; //@line 26677
   HEAP32[___async_retval >> 2] = -1; //@line 26679
   return;
  }
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 26683
 _puts(15444) | 0; //@line 26684
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 682; //@line 26687
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 26688
  HEAP32[$16 >> 2] = $4; //@line 26689
  sp = STACKTOP; //@line 26690
  return;
 }
 ___async_unwind = 0; //@line 26693
 HEAP32[$ReallocAsyncCtx6 >> 2] = 682; //@line 26694
 $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 26695
 HEAP32[$16 >> 2] = $4; //@line 26696
 sp = STACKTOP; //@line 26697
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_116($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 27690
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27694
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27696
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27698
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27700
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27702
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 27704
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 27706
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 27709
 HEAP32[$4 + 16 >> 2] = HEAP32[$6 >> 2]; //@line 27712
 _equeue_event_dtor($4, 271); //@line 27713
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 27714
 $20 = _equeue_post($8, 272, $4) | 0; //@line 27715
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 273; //@line 27718
  $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 27719
  HEAP32[$21 >> 2] = $10; //@line 27720
  $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 27721
  HEAP32[$22 >> 2] = $12; //@line 27722
  $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 27723
  HEAP32[$23 >> 2] = $14; //@line 27724
  $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 27725
  HEAP32[$24 >> 2] = $16; //@line 27726
  sp = STACKTOP; //@line 27727
  return;
 }
 HEAP32[___async_retval >> 2] = $20; //@line 27731
 ___async_unwind = 0; //@line 27732
 HEAP32[$ReallocAsyncCtx6 >> 2] = 273; //@line 27733
 $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 27734
 HEAP32[$21 >> 2] = $10; //@line 27735
 $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 27736
 HEAP32[$22 >> 2] = $12; //@line 27737
 $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 27738
 HEAP32[$23 >> 2] = $14; //@line 27739
 $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 27740
 HEAP32[$24 >> 2] = $16; //@line 27741
 sp = STACKTOP; //@line 27742
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_314($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 21919
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21923
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21925
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21927
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21929
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21931
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21933
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 21935
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 21938
 HEAP16[$4 + 16 >> 1] = HEAP16[$6 >> 1] | 0; //@line 21941
 _equeue_event_dtor($4, 328); //@line 21942
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 21943
 $20 = _equeue_post($8, 329, $4) | 0; //@line 21944
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 330; //@line 21947
  $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 21948
  HEAP32[$21 >> 2] = $10; //@line 21949
  $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 21950
  HEAP32[$22 >> 2] = $12; //@line 21951
  $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 21952
  HEAP32[$23 >> 2] = $14; //@line 21953
  $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 21954
  HEAP32[$24 >> 2] = $16; //@line 21955
  sp = STACKTOP; //@line 21956
  return;
 }
 HEAP32[___async_retval >> 2] = $20; //@line 21960
 ___async_unwind = 0; //@line 21961
 HEAP32[$ReallocAsyncCtx6 >> 2] = 330; //@line 21962
 $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 21963
 HEAP32[$21 >> 2] = $10; //@line 21964
 $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 21965
 HEAP32[$22 >> 2] = $12; //@line 21966
 $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 21967
 HEAP32[$23 >> 2] = $14; //@line 21968
 $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 21969
 HEAP32[$24 >> 2] = $16; //@line 21970
 sp = STACKTOP; //@line 21971
 return;
}
function __ZL12send_messagev() {
 var $0 = 0, $3 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 7781
 STACKTOP = STACKTOP + 80 | 0; //@line 7782
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80); //@line 7782
 $vararg_buffer8 = sp + 24 | 0; //@line 7783
 $vararg_buffer5 = sp + 16 | 0; //@line 7784
 $vararg_buffer1 = sp + 8 | 0; //@line 7785
 $vararg_buffer = sp; //@line 7786
 $0 = sp + 28 | 0; //@line 7787
 dest = $0; //@line 7788
 stop = dest + 50 | 0; //@line 7788
 do {
  HEAP8[dest >> 0] = 0; //@line 7788
  dest = dest + 1 | 0; //@line 7788
 } while ((dest | 0) < (stop | 0));
 HEAPF64[$vararg_buffer >> 3] = +__ZN5Sht3115readTemperatureEv(24460); //@line 7791
 _sprintf($0, 15840, $vararg_buffer) | 0; //@line 7792
 $3 = _strlen($0) | 0; //@line 7793
 HEAP32[$vararg_buffer1 >> 2] = $3; //@line 7794
 HEAP32[$vararg_buffer1 + 4 >> 2] = $0; //@line 7796
 _printf(15860, $vararg_buffer1) | 0; //@line 7797
 $5 = __ZN16LoRaWANInterface4sendEhPKhti(20652, 15, $0, $3 & 65535, 1) | 0; //@line 7799
 $6 = $5 << 16 >> 16; //@line 7800
 if ($5 << 16 >> 16 >= 0) {
  HEAP32[$vararg_buffer8 >> 2] = $6; //@line 7803
  _printf(15936, $vararg_buffer8) | 0; //@line 7804
  STACKTOP = sp; //@line 7805
  return;
 }
 if ($5 << 16 >> 16 != -1001) {
  HEAP32[$vararg_buffer5 >> 2] = $6; //@line 7809
  _printf(15912, $vararg_buffer5) | 0; //@line 7810
  STACKTOP = sp; //@line 7811
  return;
 }
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 7813
 _puts(15884) | 0; //@line 7814
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 684; //@line 7817
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 7819
  sp = STACKTOP; //@line 7820
  STACKTOP = sp; //@line 7821
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 7823
 STACKTOP = sp; //@line 7824
 return;
}
function _equeue_dealloc__async_cb($0) {
 $0 = $0 | 0;
 var $$02329$i = 0, $$02330$i = 0, $$025$i = 0, $$sink$in$i = 0, $$sink21$i = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $2 = 0, $23 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12596
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12598
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12600
 $7 = $2 + 156 | 0; //@line 12601
 _equeue_mutex_lock($7); //@line 12602
 $8 = $2 + 24 | 0; //@line 12603
 $9 = HEAP32[$8 >> 2] | 0; //@line 12604
 L3 : do {
  if (!$9) {
   $$02329$i = $8; //@line 12608
  } else {
   $11 = HEAP32[$6 >> 2] | 0; //@line 12610
   $$025$i = $8; //@line 12611
   $13 = $9; //@line 12611
   while (1) {
    $12 = HEAP32[$13 >> 2] | 0; //@line 12613
    if ($12 >>> 0 >= $11 >>> 0) {
     break;
    }
    $15 = $13 + 8 | 0; //@line 12618
    $16 = HEAP32[$15 >> 2] | 0; //@line 12619
    if (!$16) {
     $$02329$i = $15; //@line 12622
     break L3;
    } else {
     $$025$i = $15; //@line 12625
     $13 = $16; //@line 12625
    }
   }
   if (($12 | 0) == ($11 | 0)) {
    HEAP32[$4 + -24 >> 2] = $13; //@line 12631
    $$02330$i = $$025$i; //@line 12634
    $$sink$in$i = (HEAP32[$$025$i >> 2] | 0) + 8 | 0; //@line 12634
    $$sink21$i = HEAP32[$$sink$in$i >> 2] | 0; //@line 12635
    $23 = $4 + -28 | 0; //@line 12636
    HEAP32[$23 >> 2] = $$sink21$i; //@line 12637
    HEAP32[$$02330$i >> 2] = $6; //@line 12638
    _equeue_mutex_unlock($7); //@line 12639
    return;
   } else {
    $$02329$i = $$025$i; //@line 12642
   }
  }
 } while (0);
 HEAP32[$4 + -24 >> 2] = 0; //@line 12647
 $$02330$i = $$02329$i; //@line 12648
 $$sink$in$i = $$02329$i; //@line 12648
 $$sink21$i = HEAP32[$$sink$in$i >> 2] | 0; //@line 12649
 $23 = $4 + -28 | 0; //@line 12650
 HEAP32[$23 >> 2] = $$sink21$i; //@line 12651
 HEAP32[$$02330$i >> 2] = $6; //@line 12652
 _equeue_mutex_unlock($7); //@line 12653
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_139($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 29101
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29105
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29107
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29109
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29111
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29113
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29115
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 29117
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 29120
 HEAP8[$4 + 16 >> 0] = HEAP8[$6 >> 0] | 0; //@line 29123
 _equeue_event_dtor($4, 225); //@line 29124
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 29125
 $20 = _equeue_post($8, 226, $4) | 0; //@line 29126
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 227; //@line 29129
  $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 29130
  HEAP32[$21 >> 2] = $10; //@line 29131
  $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 29132
  HEAP32[$22 >> 2] = $12; //@line 29133
  $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 29134
  HEAP32[$23 >> 2] = $14; //@line 29135
  $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 29136
  HEAP32[$24 >> 2] = $16; //@line 29137
  sp = STACKTOP; //@line 29138
  return;
 }
 HEAP32[___async_retval >> 2] = $20; //@line 29142
 ___async_unwind = 0; //@line 29143
 HEAP32[$ReallocAsyncCtx6 >> 2] = 227; //@line 29144
 $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 29145
 HEAP32[$21 >> 2] = $10; //@line 29146
 $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 29147
 HEAP32[$22 >> 2] = $12; //@line 29148
 $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 29149
 HEAP32[$23 >> 2] = $14; //@line 29150
 $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 29151
 HEAP32[$24 >> 2] = $16; //@line 29152
 sp = STACKTOP; //@line 29153
 return;
}
function __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $12 = 0, $13 = 0, $16 = 0, $20 = 0, $21 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 23265
 if (($1 | 0) == ($2 | 0)) {
  $21 = $1 + 16 | 0; //@line 23268
  HEAP32[$21 >> 2] = 0; //@line 23269
  return;
 }
 $4 = $1 + 12 | 0; //@line 23272
 $5 = HEAP32[$4 >> 2] | 0; //@line 23273
 do {
  if ($5 | 0) {
   $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 23278
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 23279
   FUNCTION_TABLE_vi[$8 & 1023]($1); //@line 23280
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 561; //@line 23283
    HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 23285
    HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 23287
    HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 23289
    sp = STACKTOP; //@line 23290
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 23293
    break;
   }
  }
 } while (0);
 $12 = $2 + 12 | 0; //@line 23298
 $13 = HEAP32[$12 >> 2] | 0; //@line 23299
 do {
  if (!$13) {
   $20 = 0; //@line 23303
  } else {
   $16 = HEAP32[$13 + 4 >> 2] | 0; //@line 23306
   $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 23307
   FUNCTION_TABLE_vii[$16 & 15]($1, $2); //@line 23308
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 562; //@line 23311
    HEAP32[$AsyncCtx3 + 4 >> 2] = $12; //@line 23313
    HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 23315
    HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 23317
    sp = STACKTOP; //@line 23318
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 23321
    $20 = HEAP32[$12 >> 2] | 0; //@line 23323
    break;
   }
  }
 } while (0);
 HEAP32[$4 >> 2] = $20; //@line 23328
 $21 = $1 + 16 | 0; //@line 23329
 HEAP32[$21 >> 2] = 0; //@line 23330
 return;
}
function __ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_99($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 26637
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26639
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26641
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26643
 $8 = HEAP16[$0 + 16 >> 1] | 0; //@line 26645
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26647
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26649
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26651
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 26653
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 26656
  $17 = _mbedtls_cipher_cmac_starts($2, $4, $6) | 0; //@line 26657
  if (!___async) {
   HEAP32[___async_retval >> 2] = $17; //@line 26661
   ___async_unwind = 0; //@line 26662
  }
  HEAP32[$ReallocAsyncCtx >> 2] = 506; //@line 26664
  HEAP16[$ReallocAsyncCtx + 4 >> 1] = $8; //@line 26666
  HEAP32[$ReallocAsyncCtx + 8 >> 2] = $2; //@line 26668
  HEAP32[$ReallocAsyncCtx + 12 >> 2] = $10; //@line 26670
  HEAP32[$ReallocAsyncCtx + 16 >> 2] = $12; //@line 26672
  HEAP32[$ReallocAsyncCtx + 20 >> 2] = $14; //@line 26674
  sp = STACKTOP; //@line 26675
  return;
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 26678
 _mbedtls_cipher_free($2); //@line 26679
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 509; //@line 26682
  $24 = $ReallocAsyncCtx5 + 4 | 0; //@line 26683
  HEAP32[$24 >> 2] = $AsyncRetVal; //@line 26684
  sp = STACKTOP; //@line 26685
  return;
 }
 ___async_unwind = 0; //@line 26688
 HEAP32[$ReallocAsyncCtx5 >> 2] = 509; //@line 26689
 $24 = $ReallocAsyncCtx5 + 4 | 0; //@line 26690
 HEAP32[$24 >> 2] = $AsyncRetVal; //@line 26691
 sp = STACKTOP; //@line 26692
 return;
}
function __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_155($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 30042
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30044
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30046
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30048
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30050
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30052
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30054
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 30056
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 30058
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 30061
  $17 = _mbedtls_cipher_cmac_starts($4, $12, $14) | 0; //@line 30062
  if (!___async) {
   HEAP32[___async_retval >> 2] = $17; //@line 30066
   ___async_unwind = 0; //@line 30067
  }
  HEAP32[$ReallocAsyncCtx >> 2] = 498; //@line 30069
  HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 30071
  HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 30073
  HEAP32[$ReallocAsyncCtx + 12 >> 2] = $8; //@line 30075
  HEAP32[$ReallocAsyncCtx + 16 >> 2] = $10; //@line 30077
  HEAP32[$ReallocAsyncCtx + 20 >> 2] = $6; //@line 30079
  sp = STACKTOP; //@line 30080
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 30083
 _mbedtls_cipher_free($4); //@line 30084
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 502; //@line 30087
  $24 = $ReallocAsyncCtx6 + 4 | 0; //@line 30088
  HEAP32[$24 >> 2] = $AsyncRetVal; //@line 30089
  sp = STACKTOP; //@line 30090
  return;
 }
 ___async_unwind = 0; //@line 30093
 HEAP32[$ReallocAsyncCtx6 >> 2] = 502; //@line 30094
 $24 = $ReallocAsyncCtx6 + 4 | 0; //@line 30095
 HEAP32[$24 >> 2] = $AsyncRetVal; //@line 30096
 sp = STACKTOP; //@line 30097
 return;
}
function __ZN7LoRaMac15open_rx2_windowEv__async_cb_102($0) {
 $0 = $0 | 0;
 var $$sink4 = 0, $2 = 0, $20 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $5 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 26765
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26767
 $5 = $2 + 1964 | 0; //@line 26770
 HEAP8[$5 >> 0] = HEAP8[$2 + 1182 >> 0] | 0; //@line 26771
 HEAP32[$2 + 1968 >> 2] = HEAP32[$2 + 1912 >> 2]; //@line 26775
 HEAP8[$2 + 1980 >> 0] = HEAP8[$2 + 1921 >> 0] | 0; //@line 26779
 HEAP8[$2 + 1981 >> 0] = HEAP8[$2 + 1173 >> 0] | 0; //@line 26783
 HEAP32[$2 + 1984 >> 2] = 1; //@line 26785
 $$sink4 = (HEAP32[$2 + 2380 >> 2] | 0) == 2 & 1; //@line 26789
 HEAP8[$2 + 2377 >> 0] = $$sink4; //@line 26791
 $20 = $2 + 1982 | 0; //@line 26792
 HEAP8[$20 >> 0] = $$sink4; //@line 26793
 HEAP8[$2 + 2026 >> 0] = HEAP8[$2 + 1965 >> 0] | 0; //@line 26797
 $24 = $2 + 4 | 0; //@line 26798
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 26799
 $25 = __ZN7LoRaPHY9rx_configEP18rx_config_params_t($24, $5) | 0; //@line 26800
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 388; //@line 26803
  $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 26804
  HEAP32[$26 >> 2] = $20; //@line 26805
  $27 = $ReallocAsyncCtx2 + 8 | 0; //@line 26806
  HEAP32[$27 >> 2] = $2; //@line 26807
  $28 = $ReallocAsyncCtx2 + 12 | 0; //@line 26808
  HEAP32[$28 >> 2] = $24; //@line 26809
  sp = STACKTOP; //@line 26810
  return;
 }
 HEAP8[___async_retval >> 0] = $25 & 1; //@line 26815
 ___async_unwind = 0; //@line 26816
 HEAP32[$ReallocAsyncCtx2 >> 2] = 388; //@line 26817
 $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 26818
 HEAP32[$26 >> 2] = $20; //@line 26819
 $27 = $ReallocAsyncCtx2 + 8 | 0; //@line 26820
 HEAP32[$27 >> 2] = $2; //@line 26821
 $28 = $ReallocAsyncCtx2 + 12 | 0; //@line 26822
 HEAP32[$28 >> 2] = $24; //@line 26823
 sp = STACKTOP; //@line 26824
 return;
}
function __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_205($0) {
 $0 = $0 | 0;
 var $$phi$trans$insert = 0, $$pre10 = 0, $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 33845
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33849
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33851
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33853
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 33855
 $$phi$trans$insert = (HEAP32[$0 + 4 >> 2] | 0) + 12 | 0; //@line 33856
 $$pre10 = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 33857
 if (!$$pre10) {
  HEAP32[$4 >> 2] = 0; //@line 33860
  _gpio_irq_set($10 + 28 | 0, 2, 0); //@line 33862
  return;
 }
 $13 = HEAP32[$$pre10 + 4 >> 2] | 0; //@line 33866
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 33867
 FUNCTION_TABLE_vii[$13 & 15]($6, $8); //@line 33868
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 110; //@line 33871
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 33872
  HEAP32[$14 >> 2] = $$phi$trans$insert; //@line 33873
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 33874
  HEAP32[$15 >> 2] = $4; //@line 33875
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 33876
  HEAP32[$16 >> 2] = $8; //@line 33877
  $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 33878
  HEAP32[$17 >> 2] = $10; //@line 33879
  sp = STACKTOP; //@line 33880
  return;
 }
 ___async_unwind = 0; //@line 33883
 HEAP32[$ReallocAsyncCtx4 >> 2] = 110; //@line 33884
 $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 33885
 HEAP32[$14 >> 2] = $$phi$trans$insert; //@line 33886
 $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 33887
 HEAP32[$15 >> 2] = $4; //@line 33888
 $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 33889
 HEAP32[$16 >> 2] = $8; //@line 33890
 $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 33891
 HEAP32[$17 >> 2] = $10; //@line 33892
 sp = STACKTOP; //@line 33893
 return;
}
function _mbedtls_ccm_setkey($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $13 = 0, $18 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 2172
 $4 = _mbedtls_cipher_info_from_values($1, $3, 1) | 0; //@line 2173
 if (!$4) {
  $$0 = -13; //@line 2176
  return $$0 | 0; //@line 2177
 }
 if ((HEAP32[$4 + 24 >> 2] | 0) != 16) {
  $$0 = -13; //@line 2183
  return $$0 | 0; //@line 2184
 }
 $AsyncCtx7 = _emscripten_alloc_async_context(20, sp) | 0; //@line 2186
 _mbedtls_cipher_free($0); //@line 2187
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 572; //@line 2190
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 2192
  HEAP32[$AsyncCtx7 + 8 >> 2] = $4; //@line 2194
  HEAP32[$AsyncCtx7 + 12 >> 2] = $2; //@line 2196
  HEAP32[$AsyncCtx7 + 16 >> 2] = $3; //@line 2198
  sp = STACKTOP; //@line 2199
  return 0; //@line 2200
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 2202
 $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 2203
 $13 = _mbedtls_cipher_setup($0, $4) | 0; //@line 2204
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 573; //@line 2207
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 2209
  HEAP32[$AsyncCtx3 + 8 >> 2] = $2; //@line 2211
  HEAP32[$AsyncCtx3 + 12 >> 2] = $3; //@line 2213
  sp = STACKTOP; //@line 2214
  return 0; //@line 2215
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2217
 if ($13 | 0) {
  $$0 = $13; //@line 2220
  return $$0 | 0; //@line 2221
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2223
 $18 = _mbedtls_cipher_setkey($0, $2, $3, 1) | 0; //@line 2224
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 574; //@line 2227
  sp = STACKTOP; //@line 2228
  return 0; //@line 2229
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2231
 $$0 = $18; //@line 2232
 return $$0 | 0; //@line 2233
}
function __ZN16SX1276_LoRaRadio11time_on_airE10modem_typeh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$031 = 0.0, $10 = 0.0, $45 = 0.0, $6 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 722
 STACKTOP = STACKTOP + 16 | 0; //@line 723
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 723
 $vararg_buffer = sp; //@line 724
 switch ($1 | 0) {
 case 0:
  {
   $$0 = 1; //@line 727
   HEAP32[$vararg_buffer >> 2] = $$0; //@line 728
   _mbed_tracef(16, 11040, 11045, $vararg_buffer); //@line 729
   STACKTOP = sp; //@line 730
   return $$0 | 0; //@line 730
  }
 case 1:
  {
   switch (HEAP32[$0 + 752 >> 2] | 0) {
   case 7:
    {
     $$031 = 125.0e3; //@line 738
     break;
    }
   case 8:
    {
     $$031 = 25.0e4; //@line 742
     break;
    }
   case 9:
    {
     $$031 = 5.0e5; //@line 746
     break;
    }
   default:
    {
     $$031 = 0.0; //@line 750
    }
   }
   $6 = HEAP32[$0 + 756 >> 2] | 0; //@line 754
   $10 = 1.0 / ($$031 / +(1 << $6 | 0)); //@line 758
   $45 = +Math_ceil(+(+(((($2 & 255) << 3) + 28 - ($6 << 2) + (HEAP8[$0 + 766 >> 0] << 4 & 255) + (HEAP8[$0 + 764 >> 0] | 0 ? -20 : 0) | 0) >>> 0) / +($6 - (HEAP8[$0 + 760 >> 0] | 0 ? 2 : 0) << 2 >>> 0))) * +((HEAPU8[$0 + 761 >> 0] | 0) + 4 | 0); //@line 794
   $$0 = ~~+Math_floor(+(((+(HEAPU16[$0 + 762 >> 1] | 0) + 4.25) * $10 + $10 * (($45 > 0.0 ? $45 : 0.0) + 8.0)) * 1.0e3 + .999)) >>> 0; //@line 804
   HEAP32[$vararg_buffer >> 2] = $$0; //@line 805
   _mbed_tracef(16, 11040, 11045, $vararg_buffer); //@line 806
   STACKTOP = sp; //@line 807
   return $$0 | 0; //@line 807
  }
 default:
  {
   $$0 = 0; //@line 811
   HEAP32[$vararg_buffer >> 2] = $$0; //@line 812
   _mbed_tracef(16, 11040, 11045, $vararg_buffer); //@line 813
   STACKTOP = sp; //@line 814
   return $$0 | 0; //@line 814
  }
 }
 return 0; //@line 817
}
function __ZN7LoRaMac15send_ongoing_txEv__async_cb($0) {
 $0 = $0 | 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 13167
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13169
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13171
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13173
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13175
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 13177
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 13181
  return;
 }
 HEAP8[$2 + 2063 >> 0] = 0; //@line 13185
 HEAP8[$2 + 2062 >> 0] = 0; //@line 13187
 HEAP32[$2 + 2068 >> 2] = HEAP32[$2 + 1760 >> 2]; //@line 13191
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 13192
 $16 = __ZN7LoRaMac11schedule_txEv($2) | 0; //@line 13193
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 451; //@line 13196
  $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 13197
  HEAP32[$17 >> 2] = $4; //@line 13198
  $18 = $ReallocAsyncCtx2 + 8 | 0; //@line 13199
  HEAP32[$18 >> 2] = $8; //@line 13200
  $19 = $ReallocAsyncCtx2 + 12 | 0; //@line 13201
  HEAP32[$19 >> 2] = $2; //@line 13202
  $20 = $ReallocAsyncCtx2 + 16 | 0; //@line 13203
  HEAP32[$20 >> 2] = $6; //@line 13204
  sp = STACKTOP; //@line 13205
  return;
 }
 HEAP32[___async_retval >> 2] = $16; //@line 13209
 ___async_unwind = 0; //@line 13210
 HEAP32[$ReallocAsyncCtx2 >> 2] = 451; //@line 13211
 $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 13212
 HEAP32[$17 >> 2] = $4; //@line 13213
 $18 = $ReallocAsyncCtx2 + 8 | 0; //@line 13214
 HEAP32[$18 >> 2] = $8; //@line 13215
 $19 = $ReallocAsyncCtx2 + 12 | 0; //@line 13216
 HEAP32[$19 >> 2] = $2; //@line 13217
 $20 = $ReallocAsyncCtx2 + 16 | 0; //@line 13218
 HEAP32[$20 >> 2] = $6; //@line 13219
 sp = STACKTOP; //@line 13220
 return;
}
function __ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_310($0) {
 $0 = $0 | 0;
 var $16 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 21457
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21459
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21461
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21463
 $9 = HEAP8[$2 >> 0] | 0; //@line 21466
 if (!($9 & 1)) {
  $20 = $9; //@line 21470
 } else {
  if (!(HEAP8[$4 + 1936 >> 0] | 0)) {
   $20 = $9; //@line 21476
  } else {
   _mbed_tracef(16, 12890, 13295, $6); //@line 21478
   $16 = $4 + 1877 | 0; //@line 21480
   HEAP8[$16 >> 0] = __ZN7LoRaPHY26get_next_lower_tx_datarateEa($4 + 4 | 0, HEAP8[$16 >> 0] | 0) | 0; //@line 21483
   $20 = HEAP8[$2 >> 0] | 0; //@line 21485
  }
 }
 $19 = $4 + 2063 | 0; //@line 21488
 HEAP8[$19 >> 0] = $20; //@line 21489
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 21490
 $21 = __ZN7LoRaMac21handle_retransmissionEv($4) | 0; //@line 21491
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 443; //@line 21494
  $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 21495
  HEAP32[$22 >> 2] = $2; //@line 21496
  $23 = $ReallocAsyncCtx3 + 8 | 0; //@line 21497
  HEAP32[$23 >> 2] = $4; //@line 21498
  $24 = $ReallocAsyncCtx3 + 12 | 0; //@line 21499
  HEAP32[$24 >> 2] = $19; //@line 21500
  sp = STACKTOP; //@line 21501
  return;
 }
 HEAP32[___async_retval >> 2] = $21; //@line 21505
 ___async_unwind = 0; //@line 21506
 HEAP32[$ReallocAsyncCtx3 >> 2] = 443; //@line 21507
 $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 21508
 HEAP32[$22 >> 2] = $2; //@line 21509
 $23 = $ReallocAsyncCtx3 + 8 | 0; //@line 21510
 HEAP32[$23 >> 2] = $4; //@line 21511
 $24 = $ReallocAsyncCtx3 + 12 | 0; //@line 21512
 HEAP32[$24 >> 2] = $19; //@line 21513
 sp = STACKTOP; //@line 21514
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_176($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $25 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 31772
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31776
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31778
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31780
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31782
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31784
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 31786
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 31788
 $18 = HEAP8[$0 + 36 >> 0] & 1; //@line 31791
 $25 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 31792
 do {
  if ($25 >>> 0 < $4 >>> 0) {
   if (!(HEAP8[$6 >> 0] | 0)) {
    if ((HEAP32[$8 >> 2] | 0) == 1) {
     if ((HEAP32[$10 >> 2] | 0) == 1) {
      break;
     }
    }
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 31808
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($25, $12, $14, $16, $18); //@line 31809
    if (!___async) {
     ___async_unwind = 0; //@line 31812
    }
    HEAP32[$ReallocAsyncCtx2 >> 2] = 739; //@line 31814
    HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $25; //@line 31816
    HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 31818
    HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 31820
    HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 31822
    HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 31824
    HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 31826
    HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $14; //@line 31828
    HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $16; //@line 31830
    HEAP8[$ReallocAsyncCtx2 + 36 >> 0] = $18 & 1; //@line 31833
    sp = STACKTOP; //@line 31834
    return;
   }
  }
 } while (0);
 return;
}
function __ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_63($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 25080
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25084
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 25086
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 25087
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 25091
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 25092
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 25093
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 351; //@line 25096
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 25097
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 25098
   $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 25099
   HEAP32[$11 >> 2] = $4; //@line 25100
   sp = STACKTOP; //@line 25101
   return;
  }
  ___async_unwind = 0; //@line 25104
  HEAP32[$ReallocAsyncCtx2 >> 2] = 351; //@line 25105
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 25106
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 25107
  $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 25108
  HEAP32[$11 >> 2] = $4; //@line 25109
  sp = STACKTOP; //@line 25110
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 25117
 _mbed_assert_internal(12104, 12113, 775); //@line 25118
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 352; //@line 25121
  $13 = $ReallocAsyncCtx6 + 4 | 0; //@line 25122
  HEAP32[$13 >> 2] = $4; //@line 25123
  sp = STACKTOP; //@line 25124
  return;
 }
 ___async_unwind = 0; //@line 25127
 HEAP32[$ReallocAsyncCtx6 >> 2] = 352; //@line 25128
 $13 = $ReallocAsyncCtx6 + 4 | 0; //@line 25129
 HEAP32[$13 >> 2] = $4; //@line 25130
 sp = STACKTOP; //@line 25131
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_23($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 22461
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22465
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 22467
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 22468
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 22472
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 22473
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 22474
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 257; //@line 22477
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 22478
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 22479
   $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 22480
   HEAP32[$11 >> 2] = $4; //@line 22481
   sp = STACKTOP; //@line 22482
   return;
  }
  ___async_unwind = 0; //@line 22485
  HEAP32[$ReallocAsyncCtx2 >> 2] = 257; //@line 22486
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 22487
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 22488
  $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 22489
  HEAP32[$11 >> 2] = $4; //@line 22490
  sp = STACKTOP; //@line 22491
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 22498
 _mbed_assert_internal(12104, 12113, 775); //@line 22499
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 258; //@line 22502
  $13 = $ReallocAsyncCtx12 + 4 | 0; //@line 22503
  HEAP32[$13 >> 2] = $4; //@line 22504
  sp = STACKTOP; //@line 22505
  return;
 }
 ___async_unwind = 0; //@line 22508
 HEAP32[$ReallocAsyncCtx12 >> 2] = 258; //@line 22509
 $13 = $ReallocAsyncCtx12 + 4 | 0; //@line 22510
 HEAP32[$13 >> 2] = $4; //@line 22511
 sp = STACKTOP; //@line 22512
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_21($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 22242
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22246
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 22248
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 22249
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 22253
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 22254
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 22255
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 265; //@line 22258
   $10 = $ReallocAsyncCtx6 + 4 | 0; //@line 22259
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 22260
   $11 = $ReallocAsyncCtx6 + 8 | 0; //@line 22261
   HEAP32[$11 >> 2] = $4; //@line 22262
   sp = STACKTOP; //@line 22263
   return;
  }
  ___async_unwind = 0; //@line 22266
  HEAP32[$ReallocAsyncCtx6 >> 2] = 265; //@line 22267
  $10 = $ReallocAsyncCtx6 + 4 | 0; //@line 22268
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 22269
  $11 = $ReallocAsyncCtx6 + 8 | 0; //@line 22270
  HEAP32[$11 >> 2] = $4; //@line 22271
  sp = STACKTOP; //@line 22272
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 22279
 _mbed_assert_internal(12104, 12113, 775); //@line 22280
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 266; //@line 22283
  $13 = $ReallocAsyncCtx10 + 4 | 0; //@line 22284
  HEAP32[$13 >> 2] = $4; //@line 22285
  sp = STACKTOP; //@line 22286
  return;
 }
 ___async_unwind = 0; //@line 22289
 HEAP32[$ReallocAsyncCtx10 >> 2] = 266; //@line 22290
 $13 = $ReallocAsyncCtx10 + 4 | 0; //@line 22291
 HEAP32[$13 >> 2] = $4; //@line 22292
 sp = STACKTOP; //@line 22293
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_53($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 24558
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24562
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 24564
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 24565
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 24569
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 24570
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 24571
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 245; //@line 24574
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 24575
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 24576
   $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 24577
   HEAP32[$11 >> 2] = $4; //@line 24578
   sp = STACKTOP; //@line 24579
   return;
  }
  ___async_unwind = 0; //@line 24582
  HEAP32[$ReallocAsyncCtx2 >> 2] = 245; //@line 24583
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 24584
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 24585
  $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 24586
  HEAP32[$11 >> 2] = $4; //@line 24587
  sp = STACKTOP; //@line 24588
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 24595
 _mbed_assert_internal(12104, 12113, 775); //@line 24596
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 246; //@line 24599
  $13 = $ReallocAsyncCtx12 + 4 | 0; //@line 24600
  HEAP32[$13 >> 2] = $4; //@line 24601
  sp = STACKTOP; //@line 24602
  return;
 }
 ___async_unwind = 0; //@line 24605
 HEAP32[$ReallocAsyncCtx12 >> 2] = 246; //@line 24606
 $13 = $ReallocAsyncCtx12 + 4 | 0; //@line 24607
 HEAP32[$13 >> 2] = $4; //@line 24608
 sp = STACKTOP; //@line 24609
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_52($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 24501
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24505
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 24507
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 24508
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 24512
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 24513
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 24514
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 249; //@line 24517
   $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 24518
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 24519
   $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 24520
   HEAP32[$11 >> 2] = $4; //@line 24521
   sp = STACKTOP; //@line 24522
   return;
  }
  ___async_unwind = 0; //@line 24525
  HEAP32[$ReallocAsyncCtx4 >> 2] = 249; //@line 24526
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 24527
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 24528
  $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 24529
  HEAP32[$11 >> 2] = $4; //@line 24530
  sp = STACKTOP; //@line 24531
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(8) | 0; //@line 24538
 _mbed_assert_internal(12104, 12113, 775); //@line 24539
 if (___async) {
  HEAP32[$ReallocAsyncCtx11 >> 2] = 250; //@line 24542
  $13 = $ReallocAsyncCtx11 + 4 | 0; //@line 24543
  HEAP32[$13 >> 2] = $4; //@line 24544
  sp = STACKTOP; //@line 24545
  return;
 }
 ___async_unwind = 0; //@line 24548
 HEAP32[$ReallocAsyncCtx11 >> 2] = 250; //@line 24549
 $13 = $ReallocAsyncCtx11 + 4 | 0; //@line 24550
 HEAP32[$13 >> 2] = $4; //@line 24551
 sp = STACKTOP; //@line 24552
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_51($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 24444
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24448
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 24450
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 24451
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 24455
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 24456
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 24457
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 253; //@line 24460
   $10 = $ReallocAsyncCtx6 + 4 | 0; //@line 24461
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 24462
   $11 = $ReallocAsyncCtx6 + 8 | 0; //@line 24463
   HEAP32[$11 >> 2] = $4; //@line 24464
   sp = STACKTOP; //@line 24465
   return;
  }
  ___async_unwind = 0; //@line 24468
  HEAP32[$ReallocAsyncCtx6 >> 2] = 253; //@line 24469
  $10 = $ReallocAsyncCtx6 + 4 | 0; //@line 24470
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 24471
  $11 = $ReallocAsyncCtx6 + 8 | 0; //@line 24472
  HEAP32[$11 >> 2] = $4; //@line 24473
  sp = STACKTOP; //@line 24474
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 24481
 _mbed_assert_internal(12104, 12113, 775); //@line 24482
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 254; //@line 24485
  $13 = $ReallocAsyncCtx10 + 4 | 0; //@line 24486
  HEAP32[$13 >> 2] = $4; //@line 24487
  sp = STACKTOP; //@line 24488
  return;
 }
 ___async_unwind = 0; //@line 24491
 HEAP32[$ReallocAsyncCtx10 >> 2] = 254; //@line 24492
 $13 = $ReallocAsyncCtx10 + 4 | 0; //@line 24493
 HEAP32[$13 >> 2] = $4; //@line 24494
 sp = STACKTOP; //@line 24495
 return;
}
function __ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb_322($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 22511
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22515
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 22517
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 22518
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 22522
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 22523
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 22524
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 322; //@line 22527
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 22528
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 22529
   $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 22530
   HEAP32[$11 >> 2] = $4; //@line 22531
   sp = STACKTOP; //@line 22532
   return;
  }
  ___async_unwind = 0; //@line 22535
  HEAP32[$ReallocAsyncCtx2 >> 2] = 322; //@line 22536
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 22537
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 22538
  $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 22539
  HEAP32[$11 >> 2] = $4; //@line 22540
  sp = STACKTOP; //@line 22541
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 22548
 _mbed_assert_internal(12104, 12113, 775); //@line 22549
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 323; //@line 22552
  $13 = $ReallocAsyncCtx4 + 4 | 0; //@line 22553
  HEAP32[$13 >> 2] = $4; //@line 22554
  sp = STACKTOP; //@line 22555
  return;
 }
 ___async_unwind = 0; //@line 22558
 HEAP32[$ReallocAsyncCtx4 >> 2] = 323; //@line 22559
 $13 = $ReallocAsyncCtx4 + 4 | 0; //@line 22560
 HEAP32[$13 >> 2] = $4; //@line 22561
 sp = STACKTOP; //@line 22562
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_335($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 23469
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23473
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 23475
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 23476
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 23480
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 23481
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 23482
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 317; //@line 23485
   $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 23486
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 23487
   $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 23488
   HEAP32[$11 >> 2] = $4; //@line 23489
   sp = STACKTOP; //@line 23490
   return;
  }
  ___async_unwind = 0; //@line 23493
  HEAP32[$ReallocAsyncCtx4 >> 2] = 317; //@line 23494
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 23495
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 23496
  $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 23497
  HEAP32[$11 >> 2] = $4; //@line 23498
  sp = STACKTOP; //@line 23499
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(8) | 0; //@line 23506
 _mbed_assert_internal(12104, 12113, 775); //@line 23507
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 318; //@line 23510
  $13 = $ReallocAsyncCtx9 + 4 | 0; //@line 23511
  HEAP32[$13 >> 2] = $4; //@line 23512
  sp = STACKTOP; //@line 23513
  return;
 }
 ___async_unwind = 0; //@line 23516
 HEAP32[$ReallocAsyncCtx9 >> 2] = 318; //@line 23517
 $13 = $ReallocAsyncCtx9 + 4 | 0; //@line 23518
 HEAP32[$13 >> 2] = $4; //@line 23519
 sp = STACKTOP; //@line 23520
 return;
}
function __ZN12LoRaWANStack9handle_txEhPKhthbb__async_cb_351($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 24322
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24324
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24326
 $AsyncRetVal = HEAP16[___async_retval >> 1] | 0; //@line 24328
 $6 = $2 + 2496 | 0; //@line 24329
 switch (HEAP32[$6 >> 2] | 0) {
 case 5:
 case 2:
  {
   break;
  }
 default:
  {
   if ((__ZNK7LoRaMac16get_device_classEv($4) | 0) != 2) {
    HEAP16[___async_retval >> 1] = -1e3 == 0 ? $AsyncRetVal : -1e3 & 65535; //@line 24343
    return;
   }
  }
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 24348
 $10 = __ZN7LoRaMac15send_ongoing_txEv($4) | 0; //@line 24349
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 369; //@line 24352
  $11 = $ReallocAsyncCtx + 4 | 0; //@line 24353
  HEAP32[$11 >> 2] = $2; //@line 24354
  $12 = $ReallocAsyncCtx + 8 | 0; //@line 24355
  HEAP32[$12 >> 2] = $4; //@line 24356
  $13 = $ReallocAsyncCtx + 12 | 0; //@line 24357
  HEAP32[$13 >> 2] = $6; //@line 24358
  $14 = $ReallocAsyncCtx + 16 | 0; //@line 24359
  HEAP16[$14 >> 1] = $AsyncRetVal; //@line 24360
  sp = STACKTOP; //@line 24361
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 24365
 ___async_unwind = 0; //@line 24366
 HEAP32[$ReallocAsyncCtx >> 2] = 369; //@line 24367
 $11 = $ReallocAsyncCtx + 4 | 0; //@line 24368
 HEAP32[$11 >> 2] = $2; //@line 24369
 $12 = $ReallocAsyncCtx + 8 | 0; //@line 24370
 HEAP32[$12 >> 2] = $4; //@line 24371
 $13 = $ReallocAsyncCtx + 12 | 0; //@line 24372
 HEAP32[$13 >> 2] = $6; //@line 24373
 $14 = $ReallocAsyncCtx + 16 | 0; //@line 24374
 HEAP16[$14 >> 1] = $AsyncRetVal; //@line 24375
 sp = STACKTOP; //@line 24376
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_373($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 25950
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25952
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25956
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25958
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25960
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25962
 $13 = HEAP32[$2 >> 2] | 0; //@line 25963
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 52 >> 2] | 0; //@line 25966
 $18 = HEAP16[HEAP32[$0 + 8 >> 2] >> 1] & 255; //@line 25968
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 25969
 $19 = FUNCTION_TABLE_iiii[$16 & 31]($13, $6, $18) | 0; //@line 25970
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 532; //@line 25973
  $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 25974
  HEAP32[$20 >> 2] = $8; //@line 25975
  $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 25976
  HEAP32[$21 >> 2] = $2; //@line 25977
  $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 25978
  HEAP32[$22 >> 2] = $10; //@line 25979
  $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 25980
  HEAP32[$23 >> 2] = $12; //@line 25981
  sp = STACKTOP; //@line 25982
  return;
 }
 HEAP32[___async_retval >> 2] = $19; //@line 25986
 ___async_unwind = 0; //@line 25987
 HEAP32[$ReallocAsyncCtx6 >> 2] = 532; //@line 25988
 $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 25989
 HEAP32[$20 >> 2] = $8; //@line 25990
 $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 25991
 HEAP32[$21 >> 2] = $2; //@line 25992
 $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 25993
 HEAP32[$22 >> 2] = $10; //@line 25994
 $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 25995
 HEAP32[$23 >> 2] = $12; //@line 25996
 sp = STACKTOP; //@line 25997
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_268($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $5 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 17725
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17727
 $3 = $2 + 1176 | 0; //@line 17728
 HEAP32[$3 >> 2] = 10244; //@line 17729
 __ZN4mbed6Ticker6detachEv($3); //@line 17730
 $5 = HEAP32[$2 + 1228 >> 2] | 0; //@line 17732
 if (!$5) {
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(8) | 0; //@line 17735
  __ZN4mbed10TimerEventD2Ev($3); //@line 17736
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 72; //@line 17739
   $12 = $ReallocAsyncCtx7 + 4 | 0; //@line 17740
   HEAP32[$12 >> 2] = $2; //@line 17741
   sp = STACKTOP; //@line 17742
   return;
  }
  ___async_unwind = 0; //@line 17745
  HEAP32[$ReallocAsyncCtx7 >> 2] = 72; //@line 17746
  $12 = $ReallocAsyncCtx7 + 4 | 0; //@line 17747
  HEAP32[$12 >> 2] = $2; //@line 17748
  sp = STACKTOP; //@line 17749
  return;
 } else {
  $9 = HEAP32[$5 + 8 >> 2] | 0; //@line 17754
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 17755
  FUNCTION_TABLE_vi[$9 & 1023]($2 + 1216 | 0); //@line 17756
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 71; //@line 17759
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 17760
   HEAP32[$10 >> 2] = $2; //@line 17761
   $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 17762
   HEAP32[$11 >> 2] = $3; //@line 17763
   sp = STACKTOP; //@line 17764
   return;
  }
  ___async_unwind = 0; //@line 17767
  HEAP32[$ReallocAsyncCtx2 >> 2] = 71; //@line 17768
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 17769
  HEAP32[$10 >> 2] = $2; //@line 17770
  $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 17771
  HEAP32[$11 >> 2] = $3; //@line 17772
  sp = STACKTOP; //@line 17773
  return;
 }
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_267($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $5 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 17670
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17672
 $3 = $2 + 1112 | 0; //@line 17673
 HEAP32[$3 >> 2] = 10244; //@line 17674
 __ZN4mbed6Ticker6detachEv($3); //@line 17675
 $5 = HEAP32[$2 + 1164 >> 2] | 0; //@line 17677
 if (!$5) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 17680
  __ZN4mbed10TimerEventD2Ev($3); //@line 17681
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 74; //@line 17684
   $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 17685
   HEAP32[$12 >> 2] = $2; //@line 17686
   sp = STACKTOP; //@line 17687
   return;
  }
  ___async_unwind = 0; //@line 17690
  HEAP32[$ReallocAsyncCtx6 >> 2] = 74; //@line 17691
  $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 17692
  HEAP32[$12 >> 2] = $2; //@line 17693
  sp = STACKTOP; //@line 17694
  return;
 } else {
  $9 = HEAP32[$5 + 8 >> 2] | 0; //@line 17699
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 17700
  FUNCTION_TABLE_vi[$9 & 1023]($2 + 1152 | 0); //@line 17701
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 73; //@line 17704
   $10 = $ReallocAsyncCtx3 + 4 | 0; //@line 17705
   HEAP32[$10 >> 2] = $2; //@line 17706
   $11 = $ReallocAsyncCtx3 + 8 | 0; //@line 17707
   HEAP32[$11 >> 2] = $3; //@line 17708
   sp = STACKTOP; //@line 17709
   return;
  }
  ___async_unwind = 0; //@line 17712
  HEAP32[$ReallocAsyncCtx3 >> 2] = 73; //@line 17713
  $10 = $ReallocAsyncCtx3 + 4 | 0; //@line 17714
  HEAP32[$10 >> 2] = $2; //@line 17715
  $11 = $ReallocAsyncCtx3 + 8 | 0; //@line 17716
  HEAP32[$11 >> 2] = $3; //@line 17717
  sp = STACKTOP; //@line 17718
  return;
 }
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_266($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $5 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 17615
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17617
 $3 = $2 + 1048 | 0; //@line 17618
 HEAP32[$3 >> 2] = 10244; //@line 17619
 __ZN4mbed6Ticker6detachEv($3); //@line 17620
 $5 = HEAP32[$2 + 1100 >> 2] | 0; //@line 17622
 if (!$5) {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 17625
  __ZN4mbed10TimerEventD2Ev($3); //@line 17626
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 76; //@line 17629
   $12 = $ReallocAsyncCtx5 + 4 | 0; //@line 17630
   HEAP32[$12 >> 2] = $2; //@line 17631
   sp = STACKTOP; //@line 17632
   return;
  }
  ___async_unwind = 0; //@line 17635
  HEAP32[$ReallocAsyncCtx5 >> 2] = 76; //@line 17636
  $12 = $ReallocAsyncCtx5 + 4 | 0; //@line 17637
  HEAP32[$12 >> 2] = $2; //@line 17638
  sp = STACKTOP; //@line 17639
  return;
 } else {
  $9 = HEAP32[$5 + 8 >> 2] | 0; //@line 17644
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 17645
  FUNCTION_TABLE_vi[$9 & 1023]($2 + 1088 | 0); //@line 17646
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 75; //@line 17649
   $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 17650
   HEAP32[$10 >> 2] = $3; //@line 17651
   $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 17652
   HEAP32[$11 >> 2] = $2; //@line 17653
   sp = STACKTOP; //@line 17654
   return;
  }
  ___async_unwind = 0; //@line 17657
  HEAP32[$ReallocAsyncCtx4 >> 2] = 75; //@line 17658
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 17659
  HEAP32[$10 >> 2] = $3; //@line 17660
  $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 17661
  HEAP32[$11 >> 2] = $2; //@line 17662
  sp = STACKTOP; //@line 17663
  return;
 }
}
function __ZL18lora_event_handler11lora_events__async_cb_71($0) {
 $0 = $0 | 0;
 var $$07$i = 0, $12 = 0, $15 = 0, $16 = 0, $19 = 0, $2 = 0, $21 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 25640
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25642
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25644
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25648
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25652
 dest = $2; //@line 25655
 stop = dest + 50 | 0; //@line 25655
 do {
  HEAP8[dest >> 0] = 0; //@line 25655
  dest = dest + 1 | 0; //@line 25655
 } while ((dest | 0) < (stop | 0));
 $15 = __ZN16LoRaWANInterface7receiveEhPhti(20652, 15, $2, 50, 3) | 0; //@line 25656
 $16 = $15 << 16 >> 16; //@line 25657
 if ($15 << 16 >> 16 < 0) {
  HEAP32[$4 >> 2] = $16; //@line 25660
  _printf(15629, $4) | 0; //@line 25661
  return;
 }
 HEAP32[$8 >> 2] = 15; //@line 25664
 HEAP32[$8 + 4 >> 2] = $16; //@line 25666
 _printf(15656, $8) | 0; //@line 25667
 if ($15 << 16 >> 16) {
  $$07$i = 0; //@line 25670
  $21 = 0; //@line 25670
  do {
   HEAP32[$12 >> 2] = HEAPU8[$2 + $21 >> 0]; //@line 25675
   _printf(15695, $12) | 0; //@line 25676
   $$07$i = $$07$i + 1 << 24 >> 24; //@line 25677
   $21 = $$07$i & 255; //@line 25678
  } while (($21 | 0) < ($16 | 0));
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 25687
 _putchar(10) | 0; //@line 25688
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 693; //@line 25691
  $19 = $ReallocAsyncCtx + 4 | 0; //@line 25692
  HEAP32[$19 >> 2] = $2; //@line 25693
  sp = STACKTOP; //@line 25694
  return;
 }
 ___async_unwind = 0; //@line 25697
 HEAP32[$ReallocAsyncCtx >> 2] = 693; //@line 25698
 $19 = $ReallocAsyncCtx + 4 | 0; //@line 25699
 HEAP32[$19 >> 2] = $2; //@line 25700
 sp = STACKTOP; //@line 25701
 return;
}
function __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $2 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 29799
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29801
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29803
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29805
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29807
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29809
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29811
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 29814
  $13 = _mbedtls_cipher_cmac_update($4, $2, 16) | 0; //@line 29815
  if (!___async) {
   HEAP32[___async_retval >> 2] = $13; //@line 29819
   ___async_unwind = 0; //@line 29820
  }
  HEAP32[$ReallocAsyncCtx4 >> 2] = 499; //@line 29822
  HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $4; //@line 29824
  HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $6; //@line 29826
  HEAP32[$ReallocAsyncCtx4 + 12 >> 2] = $8; //@line 29828
  HEAP32[$ReallocAsyncCtx4 + 16 >> 2] = $2; //@line 29830
  HEAP32[$ReallocAsyncCtx4 + 20 >> 2] = $10; //@line 29832
  sp = STACKTOP; //@line 29833
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 29836
 _mbedtls_cipher_free($4); //@line 29837
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 502; //@line 29840
  $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 29841
  HEAP32[$20 >> 2] = $AsyncRetVal; //@line 29842
  sp = STACKTOP; //@line 29843
  return;
 }
 ___async_unwind = 0; //@line 29846
 HEAP32[$ReallocAsyncCtx6 >> 2] = 502; //@line 29847
 $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 29848
 HEAP32[$20 >> 2] = $AsyncRetVal; //@line 29849
 sp = STACKTOP; //@line 29850
 return;
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $39 = 0, $4 = 0, $6 = 0, $8 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24649
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24651
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24653
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24655
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24657
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24659
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 24661
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 24663
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 24665
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 24667
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 24669
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 24671
 $25 = $4 + 1280 | 0; //@line 24672
 HEAP32[$25 >> 2] = 0; //@line 24673
 HEAP32[$25 + 4 >> 2] = 0; //@line 24673
 HEAP32[$25 + 8 >> 2] = 0; //@line 24673
 HEAP32[$25 + 12 >> 2] = 0; //@line 24673
 HEAP8[$4 + 1296 >> 0] = 1; //@line 24675
 HEAP32[$2 >> 2] = 620; //@line 24676
 HEAP32[$4 + 668 >> 2] = $6; //@line 24678
 HEAP32[$4 + 672 >> 2] = $8; //@line 24680
 HEAP32[$4 + 652 >> 2] = $10; //@line 24682
 HEAP32[$4 + 656 >> 2] = $12; //@line 24684
 HEAP32[$4 + 664 >> 2] = $14; //@line 24686
 HEAP32[$4 + 660 >> 2] = $16; //@line 24688
 HEAP32[$4 + 676 >> 2] = $18; //@line 24690
 HEAP32[$4 + 680 >> 2] = $20; //@line 24692
 HEAP32[$4 + 684 >> 2] = $22; //@line 24694
 HEAP32[$4 + 788 >> 2] = 0; //@line 24696
 if (($18 | 0) == -1) {
  $39 = _emscripten_asm_const_ii(7, $4 | 0) | 0; //@line 24699
  return;
 }
 _emscripten_asm_const_iii(5, HEAP32[$24 >> 2] | 0, 1) | 0; //@line 24703
 $39 = _emscripten_asm_const_ii(7, $4 | 0) | 0; //@line 24704
 return;
}
function ___overflow($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $13 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $9 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11884
 STACKTOP = STACKTOP + 16 | 0; //@line 11885
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 11885
 $2 = sp; //@line 11886
 $3 = $1 & 255; //@line 11887
 HEAP8[$2 >> 0] = $3; //@line 11888
 $4 = $0 + 16 | 0; //@line 11889
 $5 = HEAP32[$4 >> 2] | 0; //@line 11890
 if (!$5) {
  if (!(___towrite($0) | 0)) {
   $12 = HEAP32[$4 >> 2] | 0; //@line 11897
   label = 4; //@line 11898
  } else {
   $$0 = -1; //@line 11900
  }
 } else {
  $12 = $5; //@line 11903
  label = 4; //@line 11904
 }
 do {
  if ((label | 0) == 4) {
   $9 = $0 + 20 | 0; //@line 11908
   $10 = HEAP32[$9 >> 2] | 0; //@line 11909
   if ($10 >>> 0 < $12 >>> 0) {
    $13 = $1 & 255; //@line 11912
    if (($13 | 0) != (HEAP8[$0 + 75 >> 0] | 0)) {
     HEAP32[$9 >> 2] = $10 + 1; //@line 11919
     HEAP8[$10 >> 0] = $3; //@line 11920
     $$0 = $13; //@line 11921
     break;
    }
   }
   $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 11926
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 11927
   $21 = FUNCTION_TABLE_iiii[$20 & 31]($0, $2, 1) | 0; //@line 11928
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 703; //@line 11931
    HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 11933
    sp = STACKTOP; //@line 11934
    STACKTOP = sp; //@line 11935
    return 0; //@line 11935
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 11937
   if (($21 | 0) == 1) {
    $$0 = HEAPU8[$2 >> 0] | 0; //@line 11942
   } else {
    $$0 = -1; //@line 11944
   }
  }
 } while (0);
 STACKTOP = sp; //@line 11948
 return $$0 | 0; //@line 11948
}
function __ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $23 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 26987
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26989
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26991
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26993
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26995
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26997
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26999
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 27001
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 27003
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 27005
 if (HEAP32[___async_retval >> 2] | 0) {
  HEAP32[$4 + 2092 >> 2] = 13; //@line 27011
  return;
 }
 HEAP8[$10 >> 0] = HEAP8[$8 >> 0] | 0; //@line 27015
 $23 = $6 + -4 | 0; //@line 27016
 $25 = HEAP32[$12 >> 2] | 0; //@line 27018
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 27019
 $26 = __ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj($14, $10, $23 & 65535, $25, 128, $16) | 0; //@line 27020
 if (!___async) {
  HEAP32[___async_retval >> 2] = $26; //@line 27024
  ___async_unwind = 0; //@line 27025
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 391; //@line 27027
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $4; //@line 27029
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $23; //@line 27031
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 27033
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $16; //@line 27035
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $2; //@line 27037
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 27039
 HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $14; //@line 27041
 HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $18; //@line 27043
 sp = STACKTOP; //@line 27044
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_67($0) {
 $0 = $0 | 0;
 var $10 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $trunc = 0, sp = 0;
 sp = STACKTOP; //@line 25276
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25278
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25280
 $6 = HEAP16[$0 + 12 >> 1] | 0; //@line 25282
 $8 = HEAP16[$0 + 14 >> 1] | 0; //@line 25284
 $10 = HEAP8[$0 + 16 >> 0] | 0; //@line 25286
 $trunc = (HEAPU8[$2 >> 0] | 0) >>> 5; //@line 25288
 switch ($trunc & 7) {
 case 1:
  {
   if (HEAP8[$4 + 2376 >> 0] | 0) {
    HEAP8[$4 + 2084 >> 0] = 0; //@line 25297
    return;
   }
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 25300
   __ZN7LoRaMac24handle_join_accept_frameEPKht($4, $2, $6); //@line 25301
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 412; //@line 25304
    $16 = $ReallocAsyncCtx2 + 4 | 0; //@line 25305
    HEAP32[$16 >> 2] = $4; //@line 25306
    sp = STACKTOP; //@line 25307
    return;
   }
   ___async_unwind = 0; //@line 25310
   HEAP32[$ReallocAsyncCtx2 >> 2] = 412; //@line 25311
   $16 = $ReallocAsyncCtx2 + 4 | 0; //@line 25312
   HEAP32[$16 >> 2] = $4; //@line 25313
   sp = STACKTOP; //@line 25314
   return;
  }
 case 7:
 case 5:
 case 3:
  {
   $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 25319
   __ZN7LoRaMac17handle_data_frameEPKhthhsa($4, $2, $6, 1, $trunc, $8, $10); //@line 25320
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 413; //@line 25323
    sp = STACKTOP; //@line 25324
    return;
   }
   ___async_unwind = 0; //@line 25327
   HEAP32[$ReallocAsyncCtx >> 2] = 413; //@line 25328
   sp = STACKTOP; //@line 25329
   return;
  }
 default:
  {
   return;
  }
 }
}
function __ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_66($0) {
 $0 = $0 | 0;
 var $10 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $trunc = 0, sp = 0;
 sp = STACKTOP; //@line 25210
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25212
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25214
 $6 = HEAP16[$0 + 12 >> 1] | 0; //@line 25216
 $8 = HEAP16[$0 + 14 >> 1] | 0; //@line 25218
 $10 = HEAP8[$0 + 16 >> 0] | 0; //@line 25220
 $trunc = (HEAPU8[$2 >> 0] | 0) >>> 5; //@line 25222
 switch ($trunc & 7) {
 case 1:
  {
   if (HEAP8[$4 + 2376 >> 0] | 0) {
    HEAP8[$4 + 2084 >> 0] = 0; //@line 25231
    return;
   }
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 25234
   __ZN7LoRaMac24handle_join_accept_frameEPKht($4, $2, $6); //@line 25235
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 412; //@line 25238
    $16 = $ReallocAsyncCtx2 + 4 | 0; //@line 25239
    HEAP32[$16 >> 2] = $4; //@line 25240
    sp = STACKTOP; //@line 25241
    return;
   }
   ___async_unwind = 0; //@line 25244
   HEAP32[$ReallocAsyncCtx2 >> 2] = 412; //@line 25245
   $16 = $ReallocAsyncCtx2 + 4 | 0; //@line 25246
   HEAP32[$16 >> 2] = $4; //@line 25247
   sp = STACKTOP; //@line 25248
   return;
  }
 case 7:
 case 5:
 case 3:
  {
   $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 25253
   __ZN7LoRaMac17handle_data_frameEPKhthhsa($4, $2, $6, 1, $trunc, $8, $10); //@line 25254
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 413; //@line 25257
    sp = STACKTOP; //@line 25258
    return;
   }
   ___async_unwind = 0; //@line 25261
   HEAP32[$ReallocAsyncCtx >> 2] = 413; //@line 25262
   sp = STACKTOP; //@line 25263
   return;
  }
 default:
  {
   return;
  }
 }
}
function _equeue_cancel__async_cb($0) {
 $0 = $0 | 0;
 var $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$sink$in$i$i = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26387
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26389
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26391
 $7 = $2 + 156 | 0; //@line 26392
 _equeue_mutex_lock($7); //@line 26393
 $8 = $2 + 24 | 0; //@line 26394
 $9 = HEAP32[$8 >> 2] | 0; //@line 26395
 L3 : do {
  if (!$9) {
   $$02329$i$i = $8; //@line 26399
   label = 9; //@line 26400
  } else {
   $11 = HEAP32[$6 >> 2] | 0; //@line 26402
   $$025$i$i = $8; //@line 26403
   $13 = $9; //@line 26403
   while (1) {
    $12 = HEAP32[$13 >> 2] | 0; //@line 26405
    if ($12 >>> 0 >= $11 >>> 0) {
     break;
    }
    $15 = $13 + 8 | 0; //@line 26410
    $16 = HEAP32[$15 >> 2] | 0; //@line 26411
    if (!$16) {
     $$02329$i$i = $15; //@line 26414
     label = 9; //@line 26415
     break L3;
    } else {
     $$025$i$i = $15; //@line 26418
     $13 = $16; //@line 26418
    }
   }
   if (($12 | 0) == ($11 | 0)) {
    HEAP32[$4 + -24 >> 2] = $13; //@line 26424
    $$02330$i$i = $$025$i$i; //@line 26427
    $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 26427
   } else {
    $$02329$i$i = $$025$i$i; //@line 26429
    label = 9; //@line 26430
   }
  }
 } while (0);
 if ((label | 0) == 9) {
  HEAP32[$4 + -24 >> 2] = 0; //@line 26436
  $$02330$i$i = $$02329$i$i; //@line 26437
  $$sink$in$i$i = $$02329$i$i; //@line 26437
 }
 HEAP32[$4 + -28 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 26441
 HEAP32[$$02330$i$i >> 2] = $6; //@line 26442
 _equeue_mutex_unlock($7); //@line 26443
 return;
}
function __ZN7LoRaPHY13get_radio_rngEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $13 = 0, $16 = 0, $2 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 22456
 $1 = $0 + 4 | 0; //@line 22457
 $2 = HEAP32[$1 >> 2] | 0; //@line 22458
 $5 = HEAP32[(HEAP32[$2 >> 2] | 0) + 72 >> 2] | 0; //@line 22461
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 22462
 FUNCTION_TABLE_vi[$5 & 1023]($2); //@line 22463
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 554; //@line 22466
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 22468
  sp = STACKTOP; //@line 22469
  return 0; //@line 22470
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 22472
 $7 = HEAP32[$1 >> 2] | 0; //@line 22473
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 36 >> 2] | 0; //@line 22476
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 22477
 $11 = FUNCTION_TABLE_ii[$10 & 15]($7) | 0; //@line 22478
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 555; //@line 22481
  HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 22483
  sp = STACKTOP; //@line 22484
  return 0; //@line 22485
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 22487
 $13 = HEAP32[$1 >> 2] | 0; //@line 22488
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 76 >> 2] | 0; //@line 22491
 $AsyncCtx5 = _emscripten_alloc_async_context(8, sp) | 0; //@line 22492
 FUNCTION_TABLE_vi[$16 & 1023]($13); //@line 22493
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 556; //@line 22496
  HEAP32[$AsyncCtx5 + 4 >> 2] = $11; //@line 22498
  sp = STACKTOP; //@line 22499
  return 0; //@line 22500
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 22502
  return $11 | 0; //@line 22503
 }
 return 0; //@line 22505
}
function __ZN12LoRaWANStack7connectEv($0) {
 $0 = $0 | 0;
 var $$1 = 0, $10 = 0, $4 = 0, $9 = 0, $AsyncCtx = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 11090
 STACKTOP = STACKTOP + 16 | 0; //@line 11091
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 11091
 $vararg_buffer1 = sp + 8 | 0; //@line 11092
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$1 = -1012; //@line 11098
  STACKTOP = sp; //@line 11099
  return $$1 | 0; //@line 11099
 }
 $4 = __ZN7LoRaMac12prepare_joinEPK15lorawan_connectb($0, 0, 0) | 0; //@line 11101
 if ($4 | 0) {
  $$1 = $4; //@line 11104
  STACKTOP = sp; //@line 11105
  return $$1 | 0; //@line 11105
 }
 _mbed_tracef(16, 12211, 12648, sp); //@line 11107
 $9 = HEAP32[$0 + 2556 >> 2] | 0; //@line 11111
 HEAP32[$vararg_buffer1 >> 2] = HEAP32[$0 + 2552 >> 2]; //@line 11112
 HEAP32[$vararg_buffer1 + 4 >> 2] = $9; //@line 11114
 _mbed_tracef(16, 12211, 12663, $vararg_buffer1); //@line 11115
 $10 = $0 + 2904 | 0; //@line 11116
 HEAP32[$10 >> 2] = HEAP32[$10 >> 2] & -9; //@line 11119
 HEAP32[$vararg_buffer1 >> 2] = 0; //@line 11120
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 11121
 __ZN12LoRaWANStack24process_connecting_stateER14lorawan_status($0, $vararg_buffer1); //@line 11122
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 362; //@line 11125
  HEAP32[$AsyncCtx + 4 >> 2] = $vararg_buffer1; //@line 11127
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer1; //@line 11129
  sp = STACKTOP; //@line 11130
  STACKTOP = sp; //@line 11131
  return 0; //@line 11131
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 11133
 $$1 = HEAP32[$vararg_buffer1 >> 2] | 0; //@line 11135
 STACKTOP = sp; //@line 11136
 return $$1 | 0; //@line 11136
}
function __ZN14LoRaMacCommand25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $13 = 0, $16 = 0, $19 = 0, $2 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 18846
 $2 = $0 + 260 | 0; //@line 18847
 if (($2 | 0) == ($1 | 0)) {
  return;
 }
 $4 = $0 + 272 | 0; //@line 18852
 $5 = HEAP32[$4 >> 2] | 0; //@line 18853
 do {
  if ($5 | 0) {
   $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 18858
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 18859
   FUNCTION_TABLE_vi[$8 & 1023]($2); //@line 18860
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 495; //@line 18863
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 18865
    HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 18867
    HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 18869
    sp = STACKTOP; //@line 18870
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 18873
    break;
   }
  }
 } while (0);
 $12 = $1 + 12 | 0; //@line 18878
 $13 = HEAP32[$12 >> 2] | 0; //@line 18879
 do {
  if (!$13) {
   $19 = 0; //@line 18883
  } else {
   $16 = HEAP32[$13 + 4 >> 2] | 0; //@line 18886
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 18887
   FUNCTION_TABLE_vii[$16 & 15]($2, $1); //@line 18888
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 496; //@line 18891
    HEAP32[$AsyncCtx3 + 4 >> 2] = $12; //@line 18893
    HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 18895
    sp = STACKTOP; //@line 18896
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 18899
    $19 = HEAP32[$12 >> 2] | 0; //@line 18901
    break;
   }
  }
 } while (0);
 HEAP32[$4 >> 2] = $19; //@line 18906
 return;
}
function __ZN7LoRaPHY11handle_sendEPhh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $14 = 0, $16 = 0, $19 = 0, $3 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 22513
 $3 = $0 + 4 | 0; //@line 22514
 $4 = HEAP32[$3 >> 2] | 0; //@line 22515
 $7 = HEAP32[(HEAP32[$4 >> 2] | 0) + 72 >> 2] | 0; //@line 22518
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 22519
 FUNCTION_TABLE_vi[$7 & 1023]($4); //@line 22520
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 557; //@line 22523
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 22525
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 22527
  HEAP8[$AsyncCtx + 12 >> 0] = $2; //@line 22529
  sp = STACKTOP; //@line 22530
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 22533
 $11 = HEAP32[$3 >> 2] | 0; //@line 22534
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 24 >> 2] | 0; //@line 22537
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 22538
 FUNCTION_TABLE_viii[$14 & 7]($11, $1, $2); //@line 22539
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 558; //@line 22542
  HEAP32[$AsyncCtx2 + 4 >> 2] = $3; //@line 22544
  sp = STACKTOP; //@line 22545
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 22548
 $16 = HEAP32[$3 >> 2] | 0; //@line 22549
 $19 = HEAP32[(HEAP32[$16 >> 2] | 0) + 76 >> 2] | 0; //@line 22552
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 22553
 FUNCTION_TABLE_vi[$19 & 1023]($16); //@line 22554
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 559; //@line 22557
  sp = STACKTOP; //@line 22558
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 22561
  return;
 }
}
function _mbedtls_cipher_cmac_starts($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $13 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 3189
 L1 : do {
  if (!$0) {
   $$0 = -24832; //@line 3193
  } else {
   if (($1 | 0) == 0 | (HEAP32[$0 >> 2] | 0) == 0) {
    $$0 = -24832; //@line 3200
   } else {
    $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 3202
    $7 = _mbedtls_cipher_setkey($0, $1, $2, 1) | 0; //@line 3203
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 594; //@line 3206
     HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 3208
     HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 3210
     sp = STACKTOP; //@line 3211
     return 0; //@line 3212
    }
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 3214
    if (!$7) {
     switch (HEAP32[HEAP32[$0 >> 2] >> 2] | 0) {
     case 36:
     case 4:
     case 3:
     case 2:
      {
       break;
      }
     default:
      {
       $$0 = -24832; //@line 3224
       break L1;
      }
     }
     $13 = _calloc(1, 36) | 0; //@line 3228
     if (!$13) {
      $$0 = -24960; //@line 3231
     } else {
      HEAP32[$0 + 64 >> 2] = $13; //@line 3234
      $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3235
      _mbedtls_platform_zeroize($13, 16); //@line 3236
      if (___async) {
       HEAP32[$AsyncCtx >> 2] = 595; //@line 3239
       sp = STACKTOP; //@line 3240
       return 0; //@line 3241
      } else {
       _emscripten_free_async_context($AsyncCtx | 0); //@line 3243
       $$0 = 0; //@line 3244
       break;
      }
     }
    } else {
     $$0 = $7; //@line 3249
    }
   }
  }
 } while (0);
 return $$0 | 0; //@line 3254
}
function _fflush__async_cb_224($0) {
 $0 = $0 | 0;
 var $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $13 = 0, $16 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13381
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 13383
 $$02325 = HEAP32[(___ofl_lock() | 0) >> 2] | 0; //@line 13385
 L3 : do {
  if (!$$02325) {
   $$024$lcssa = $AsyncRetVal; //@line 13389
  } else {
   $$02327 = $$02325; //@line 13391
   $$02426 = $AsyncRetVal; //@line 13391
   while (1) {
    if ((HEAP32[$$02327 + 76 >> 2] | 0) > -1) {
     $16 = ___lockfile($$02327) | 0; //@line 13398
    } else {
     $16 = 0; //@line 13400
    }
    if ((HEAP32[$$02327 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327 + 28 >> 2] | 0) >>> 0) {
     break;
    }
    if ($16 | 0) {
     ___unlockfile($$02327); //@line 13412
    }
    $$023 = HEAP32[$$02327 + 56 >> 2] | 0; //@line 13415
    if (!$$023) {
     $$024$lcssa = $$02426; //@line 13418
     break L3;
    } else {
     $$02327 = $$023; //@line 13421
    }
   }
   $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 13424
   $13 = ___fflush_unlocked($$02327) | 0; //@line 13425
   if (!___async) {
    HEAP32[___async_retval >> 2] = $13; //@line 13429
    ___async_unwind = 0; //@line 13430
   }
   HEAP32[$ReallocAsyncCtx >> 2] = 707; //@line 13432
   HEAP32[$ReallocAsyncCtx + 4 >> 2] = $$02426; //@line 13434
   HEAP32[$ReallocAsyncCtx + 8 >> 2] = $16; //@line 13436
   HEAP32[$ReallocAsyncCtx + 12 >> 2] = $$02327; //@line 13438
   sp = STACKTOP; //@line 13439
   return;
  }
 } while (0);
 ___ofl_unlock(); //@line 13443
 HEAP32[___async_retval >> 2] = $$024$lcssa; //@line 13445
 return;
}
function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
 end = ptr + num | 0; //@line 32083
 value = value & 255; //@line 32085
 if ((num | 0) >= 67) {
  while (ptr & 3) {
   HEAP8[ptr >> 0] = value; //@line 32088
   ptr = ptr + 1 | 0; //@line 32089
  }
  aligned_end = end & -4 | 0; //@line 32092
  block_aligned_end = aligned_end - 64 | 0; //@line 32093
  value4 = value | value << 8 | value << 16 | value << 24; //@line 32094
  while ((ptr | 0) <= (block_aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4; //@line 32097
   HEAP32[ptr + 4 >> 2] = value4; //@line 32098
   HEAP32[ptr + 8 >> 2] = value4; //@line 32099
   HEAP32[ptr + 12 >> 2] = value4; //@line 32100
   HEAP32[ptr + 16 >> 2] = value4; //@line 32101
   HEAP32[ptr + 20 >> 2] = value4; //@line 32102
   HEAP32[ptr + 24 >> 2] = value4; //@line 32103
   HEAP32[ptr + 28 >> 2] = value4; //@line 32104
   HEAP32[ptr + 32 >> 2] = value4; //@line 32105
   HEAP32[ptr + 36 >> 2] = value4; //@line 32106
   HEAP32[ptr + 40 >> 2] = value4; //@line 32107
   HEAP32[ptr + 44 >> 2] = value4; //@line 32108
   HEAP32[ptr + 48 >> 2] = value4; //@line 32109
   HEAP32[ptr + 52 >> 2] = value4; //@line 32110
   HEAP32[ptr + 56 >> 2] = value4; //@line 32111
   HEAP32[ptr + 60 >> 2] = value4; //@line 32112
   ptr = ptr + 64 | 0; //@line 32113
  }
  while ((ptr | 0) < (aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4; //@line 32117
   ptr = ptr + 4 | 0; //@line 32118
  }
 }
 while ((ptr | 0) < (end | 0)) {
  HEAP8[ptr >> 0] = value; //@line 32123
  ptr = ptr + 1 | 0; //@line 32124
 }
 return end - num | 0; //@line 32126
}
function __ZN7LoRaMacD2Ev__async_cb_286($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 19058
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19060
 $4 = HEAP32[$2 + 1808 >> 2] | 0; //@line 19062
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 19067
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 19068
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 1796 | 0); //@line 19069
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 380; //@line 19072
   $9 = $ReallocAsyncCtx5 + 4 | 0; //@line 19073
   HEAP32[$9 >> 2] = $2; //@line 19074
   sp = STACKTOP; //@line 19075
   return;
  }
  ___async_unwind = 0; //@line 19078
  HEAP32[$ReallocAsyncCtx5 >> 2] = 380; //@line 19079
  $9 = $ReallocAsyncCtx5 + 4 | 0; //@line 19080
  HEAP32[$9 >> 2] = $2; //@line 19081
  sp = STACKTOP; //@line 19082
  return;
 }
 $11 = HEAP32[$2 + 748 >> 2] | 0; //@line 19086
 if (!$11) {
  __ZN12LoRaPHYEU868D2Ev($2 + 4 | 0); //@line 19090
  return;
 }
 $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 19095
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 19096
 FUNCTION_TABLE_vi[$15 & 1023]($2 + 736 | 0); //@line 19097
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 381; //@line 19100
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 19101
  HEAP32[$16 >> 2] = $2; //@line 19102
  sp = STACKTOP; //@line 19103
  return;
 }
 ___async_unwind = 0; //@line 19106
 HEAP32[$ReallocAsyncCtx6 >> 2] = 381; //@line 19107
 $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 19108
 HEAP32[$16 >> 2] = $2; //@line 19109
 sp = STACKTOP; //@line 19110
 return;
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_190($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 32923
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32925
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32927
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32929
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32931
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32933
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 32935
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 32937
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 32939
 $18 = $16 + 12 | 0; //@line 32941
 HEAP32[$16 >> 2] = 462; //@line 32942
 HEAP32[$16 + 4 >> 2] = 0; //@line 32944
 HEAP32[$16 + 8 >> 2] = $4; //@line 32946
 HEAP32[$18 >> 2] = 860; //@line 32947
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(40) | 0; //@line 32948
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($2, $4 + 1796 | 0, $16); //@line 32949
 if (!___async) {
  ___async_unwind = 0; //@line 32952
 }
 HEAP32[$ReallocAsyncCtx8 >> 2] = 463; //@line 32954
 HEAP32[$ReallocAsyncCtx8 + 4 >> 2] = $2; //@line 32956
 HEAP32[$ReallocAsyncCtx8 + 8 >> 2] = $4; //@line 32958
 HEAP32[$ReallocAsyncCtx8 + 12 >> 2] = $6; //@line 32960
 HEAP32[$ReallocAsyncCtx8 + 16 >> 2] = $8; //@line 32962
 HEAP32[$ReallocAsyncCtx8 + 20 >> 2] = $10; //@line 32964
 HEAP32[$ReallocAsyncCtx8 + 24 >> 2] = $12; //@line 32966
 HEAP32[$ReallocAsyncCtx8 + 28 >> 2] = $14; //@line 32968
 HEAP32[$ReallocAsyncCtx8 + 32 >> 2] = $16; //@line 32970
 HEAP32[$ReallocAsyncCtx8 + 36 >> 2] = $18; //@line 32972
 sp = STACKTOP; //@line 32973
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv($0) {
 $0 = $0 | 0;
 var $10 = 0, $18 = 0, $19 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 9478
 $2 = HEAP32[$0 + 16 >> 2] | 0; //@line 9480
 $4 = HEAP16[$0 + 20 >> 1] | 0; //@line 9482
 $6 = HEAP16[$0 + 22 >> 1] | 0; //@line 9484
 $8 = HEAP8[$0 + 24 >> 0] | 0; //@line 9486
 $9 = $0 + 12 | 0; //@line 9487
 $10 = HEAP32[$9 >> 2] | 0; //@line 9488
 do {
  if (!$10) {
   $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 9492
   _mbed_assert_internal(15010, 15015, 2830); //@line 9493
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 308; //@line 9496
    HEAP32[$AsyncCtx2 + 4 >> 2] = $9; //@line 9498
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 9500
    HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 9502
    HEAP16[$AsyncCtx2 + 16 >> 1] = $4; //@line 9504
    HEAP16[$AsyncCtx2 + 18 >> 1] = $6; //@line 9506
    HEAP8[$AsyncCtx2 + 20 >> 0] = $8; //@line 9508
    sp = STACKTOP; //@line 9509
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 9512
    $19 = HEAP32[$9 >> 2] | 0; //@line 9514
    break;
   }
  } else {
   $19 = $10; //@line 9518
  }
 } while (0);
 $18 = HEAP32[$19 >> 2] | 0; //@line 9521
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 9522
 FUNCTION_TABLE_viiiii[$18 & 7]($0, $2, $4, $6, $8); //@line 9523
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 309; //@line 9526
  sp = STACKTOP; //@line 9527
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 9530
  return;
 }
}
function __ZN7LoRaPHY25setup_public_network_modeEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $14 = 0, $17 = 0, $2 = 0, $3 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 22322
 $2 = $0 + 4 | 0; //@line 22323
 $3 = HEAP32[$2 >> 2] | 0; //@line 22324
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 72 >> 2] | 0; //@line 22327
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 22328
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 22329
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 547; //@line 22332
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 22334
  HEAP8[$AsyncCtx + 8 >> 0] = $1 & 1; //@line 22337
  sp = STACKTOP; //@line 22338
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 22341
 $9 = HEAP32[$2 >> 2] | 0; //@line 22342
 $12 = HEAP32[(HEAP32[$9 >> 2] | 0) + 48 >> 2] | 0; //@line 22345
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 22346
 FUNCTION_TABLE_vii[$12 & 15]($9, $1); //@line 22347
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 548; //@line 22350
  HEAP32[$AsyncCtx2 + 4 >> 2] = $2; //@line 22352
  sp = STACKTOP; //@line 22353
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 22356
 $14 = HEAP32[$2 >> 2] | 0; //@line 22357
 $17 = HEAP32[(HEAP32[$14 >> 2] | 0) + 76 >> 2] | 0; //@line 22360
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 22361
 FUNCTION_TABLE_vi[$17 & 1023]($14); //@line 22362
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 549; //@line 22365
  sp = STACKTOP; //@line 22366
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 22369
  return;
 }
}
function __ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv__async_cb_171($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 31513
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31517
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 31519
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 31520
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 31524
  $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 31525
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 31526
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 216; //@line 31529
   $10 = $ReallocAsyncCtx + 4 | 0; //@line 31530
   HEAP32[$10 >> 2] = $4; //@line 31531
   $11 = $ReallocAsyncCtx + 8 | 0; //@line 31532
   HEAP32[$11 >> 2] = $AsyncRetVal; //@line 31533
   sp = STACKTOP; //@line 31534
   return;
  }
  ___async_unwind = 0; //@line 31537
  HEAP32[$ReallocAsyncCtx >> 2] = 216; //@line 31538
  $10 = $ReallocAsyncCtx + 4 | 0; //@line 31539
  HEAP32[$10 >> 2] = $4; //@line 31540
  $11 = $ReallocAsyncCtx + 8 | 0; //@line 31541
  HEAP32[$11 >> 2] = $AsyncRetVal; //@line 31542
  sp = STACKTOP; //@line 31543
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 31550
 _mbed_assert_internal(12104, 12113, 547); //@line 31551
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 217; //@line 31554
  sp = STACKTOP; //@line 31555
  return;
 }
 ___async_unwind = 0; //@line 31558
 HEAP32[$ReallocAsyncCtx3 >> 2] = 217; //@line 31559
 sp = STACKTOP; //@line 31560
 return;
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_232($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 14182
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14186
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14188
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14190
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14192
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 14194
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 14196
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 14199
 _equeue_event_delay($4, $6); //@line 14200
 _equeue_event_dtor($4, 283); //@line 14201
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 14202
 $16 = _equeue_post($8, 284, $4) | 0; //@line 14203
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 566; //@line 14206
  $17 = $ReallocAsyncCtx4 + 4 | 0; //@line 14207
  HEAP32[$17 >> 2] = $10; //@line 14208
  $18 = $ReallocAsyncCtx4 + 8 | 0; //@line 14209
  HEAP32[$18 >> 2] = $12; //@line 14210
  $19 = $ReallocAsyncCtx4 + 12 | 0; //@line 14211
  HEAP32[$19 >> 2] = $14; //@line 14212
  sp = STACKTOP; //@line 14213
  return;
 }
 HEAP32[___async_retval >> 2] = $16; //@line 14217
 ___async_unwind = 0; //@line 14218
 HEAP32[$ReallocAsyncCtx4 >> 2] = 566; //@line 14219
 $17 = $ReallocAsyncCtx4 + 4 | 0; //@line 14220
 HEAP32[$17 >> 2] = $10; //@line 14221
 $18 = $ReallocAsyncCtx4 + 8 | 0; //@line 14222
 HEAP32[$18 >> 2] = $12; //@line 14223
 $19 = $ReallocAsyncCtx4 + 12 | 0; //@line 14224
 HEAP32[$19 >> 2] = $14; //@line 14225
 sp = STACKTOP; //@line 14226
 return;
}
function __ZN12LoRaWANStack26rx_error_interrupt_handlerEv__async_cb_319($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 22301
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22305
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 22307
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 22308
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 22312
  $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 22313
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 22314
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 210; //@line 22317
   $10 = $ReallocAsyncCtx + 4 | 0; //@line 22318
   HEAP32[$10 >> 2] = $4; //@line 22319
   $11 = $ReallocAsyncCtx + 8 | 0; //@line 22320
   HEAP32[$11 >> 2] = $AsyncRetVal; //@line 22321
   sp = STACKTOP; //@line 22322
   return;
  }
  ___async_unwind = 0; //@line 22325
  HEAP32[$ReallocAsyncCtx >> 2] = 210; //@line 22326
  $10 = $ReallocAsyncCtx + 4 | 0; //@line 22327
  HEAP32[$10 >> 2] = $4; //@line 22328
  $11 = $ReallocAsyncCtx + 8 | 0; //@line 22329
  HEAP32[$11 >> 2] = $AsyncRetVal; //@line 22330
  sp = STACKTOP; //@line 22331
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 22338
 _mbed_assert_internal(12104, 12113, 532); //@line 22339
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 211; //@line 22342
  sp = STACKTOP; //@line 22343
  return;
 }
 ___async_unwind = 0; //@line 22346
 HEAP32[$ReallocAsyncCtx3 >> 2] = 211; //@line 22347
 sp = STACKTOP; //@line 22348
 return;
}
function __ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa__async_cb_344($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 23908
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23912
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 23914
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 23915
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 23919
  $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 23920
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 23921
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 207; //@line 23924
   $10 = $ReallocAsyncCtx + 4 | 0; //@line 23925
   HEAP32[$10 >> 2] = $4; //@line 23926
   $11 = $ReallocAsyncCtx + 8 | 0; //@line 23927
   HEAP32[$11 >> 2] = $AsyncRetVal; //@line 23928
   sp = STACKTOP; //@line 23929
   return;
  }
  ___async_unwind = 0; //@line 23932
  HEAP32[$ReallocAsyncCtx >> 2] = 207; //@line 23933
  $10 = $ReallocAsyncCtx + 4 | 0; //@line 23934
  HEAP32[$10 >> 2] = $4; //@line 23935
  $11 = $ReallocAsyncCtx + 8 | 0; //@line 23936
  HEAP32[$11 >> 2] = $AsyncRetVal; //@line 23937
  sp = STACKTOP; //@line 23938
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 23945
 _mbed_assert_internal(12104, 12113, 524); //@line 23946
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 208; //@line 23949
  sp = STACKTOP; //@line 23950
  return;
 }
 ___async_unwind = 0; //@line 23953
 HEAP32[$ReallocAsyncCtx3 >> 2] = 208; //@line 23954
 sp = STACKTOP; //@line 23955
 return;
}
function _mbedtls_cipher_free($0) {
 $0 = $0 | 0;
 var $15 = 0, $2 = 0, $3 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 2358
 if (!$0) {
  return;
 }
 $2 = $0 + 64 | 0; //@line 2363
 $3 = HEAP32[$2 >> 2] | 0; //@line 2364
 do {
  if ($3 | 0) {
   $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 2368
   _mbedtls_platform_zeroize($3, 36); //@line 2369
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 577; //@line 2372
    HEAP32[$AsyncCtx7 + 4 >> 2] = $2; //@line 2374
    HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 2376
    sp = STACKTOP; //@line 2377
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 2380
    _free(HEAP32[$2 >> 2] | 0); //@line 2382
    break;
   }
  }
 } while (0);
 $9 = HEAP32[$0 + 60 >> 2] | 0; //@line 2388
 do {
  if ($9 | 0) {
   $15 = HEAP32[(HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] | 0) + 28 >> 2] | 0; //@line 2396
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2397
   FUNCTION_TABLE_vi[$15 & 1023]($9); //@line 2398
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 578; //@line 2401
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2403
    sp = STACKTOP; //@line 2404
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 2407
    break;
   }
  }
 } while (0);
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2412
 _mbedtls_platform_zeroize($0, 68); //@line 2413
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 579; //@line 2416
  sp = STACKTOP; //@line 2417
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2420
 return;
}
function __ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $34 = 0, $4 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 18408
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18412
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18418
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18420
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18422
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 18424
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 18426
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 18428
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 18430
 if ((HEAP8[$0 + 4 >> 0] | 0) == 7) {
  $24 = $4 + 1442 | 0; //@line 18433
  $26 = HEAPU8[HEAP32[$0 + 12 >> 2] >> 0] | 0; //@line 18435
  _memcpy($24 | 0, (HEAP32[$0 + 16 >> 2] | 0) + $26 | 0, $10 | 0) | 0; //@line 18437
  HEAP32[$4 + 2016 >> 2] = 3; //@line 18439
  HEAP32[$12 >> 2] = 0; //@line 18440
  HEAP32[$14 >> 2] = $24; //@line 18441
  HEAP16[$16 >> 1] = $10 - $26; //@line 18444
 }
 if (!(HEAP8[$18 >> 0] | 0)) {
  return;
 }
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 18452
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($22, $4 + 1856 | 0); //@line 18453
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 404; //@line 18456
  $34 = $ReallocAsyncCtx4 + 4 | 0; //@line 18457
  HEAP32[$34 >> 2] = $20; //@line 18458
  sp = STACKTOP; //@line 18459
  return;
 }
 ___async_unwind = 0; //@line 18462
 HEAP32[$ReallocAsyncCtx4 >> 2] = 404; //@line 18463
 $34 = $ReallocAsyncCtx4 + 4 | 0; //@line 18464
 HEAP32[$34 >> 2] = $20; //@line 18465
 sp = STACKTOP; //@line 18466
 return;
}
function __ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb_109($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $15 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 27269
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27273
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27275
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27277
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27279
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27281
 $13 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 27282
 $15 = HEAP16[$4 + 1748 >> 1] | 0; //@line 27284
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 27287
 $18 = __ZN13LoRaMacCrypto28compute_skeys_for_join_frameEPKhjS1_tPhS2_($6, $13, 128, $8, $15, $4 + 1716 | 0, $4 + 1732 | 0) | 0; //@line 27288
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 393; //@line 27291
  $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 27292
  HEAP32[$19 >> 2] = $4; //@line 27293
  $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 27294
  HEAP32[$20 >> 2] = $10; //@line 27295
  $21 = $ReallocAsyncCtx2 + 12 | 0; //@line 27296
  HEAP32[$21 >> 2] = $12; //@line 27297
  sp = STACKTOP; //@line 27298
  return;
 }
 HEAP32[___async_retval >> 2] = $18; //@line 27302
 ___async_unwind = 0; //@line 27303
 HEAP32[$ReallocAsyncCtx2 >> 2] = 393; //@line 27304
 $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 27305
 HEAP32[$19 >> 2] = $4; //@line 27306
 $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 27307
 HEAP32[$20 >> 2] = $10; //@line 27308
 $21 = $ReallocAsyncCtx2 + 12 | 0; //@line 27309
 HEAP32[$21 >> 2] = $12; //@line 27310
 sp = STACKTOP; //@line 27311
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_146($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $18 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 29528
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29532
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29534
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29536
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29538
 if ((HEAP16[$0 + 4 >> 1] | 0) < -1) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 29541
  $12 = __ZN4mbed5Timer7read_msEv($4) | 0; //@line 29542
  if (!___async) {
   HEAP32[___async_retval >> 2] = $12; //@line 29546
   ___async_unwind = 0; //@line 29547
  }
  HEAP32[$ReallocAsyncCtx6 >> 2] = 64; //@line 29549
  HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $6; //@line 29551
  HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $8; //@line 29553
  HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $4; //@line 29555
  HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $10; //@line 29557
  sp = STACKTOP; //@line 29558
  return;
 } else {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 29561
  $18 = __ZN4mbed5Timer7read_msEv($4) | 0; //@line 29562
  if (!___async) {
   HEAP32[___async_retval >> 2] = $18; //@line 29566
   ___async_unwind = 0; //@line 29567
  }
  HEAP32[$ReallocAsyncCtx5 >> 2] = 65; //@line 29569
  HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $6; //@line 29571
  HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 29573
  HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $8; //@line 29575
  HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $10; //@line 29577
  sp = STACKTOP; //@line 29578
  return;
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 31709
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31713
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31715
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31717
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31719
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31721
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 31723
 $16 = HEAP8[$0 + 32 >> 0] & 1; //@line 31726
 $21 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 31727
 if ($21 >>> 0 < $4 >>> 0) {
  if (!(HEAP8[$6 >> 0] | 0)) {
   if ((HEAP32[$8 >> 2] | 0) != 1) {
    $ReallocAsyncCtx = _emscripten_realloc_async_context(36) | 0; //@line 31736
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($21, $10, $12, $14, $16); //@line 31737
    if (!___async) {
     ___async_unwind = 0; //@line 31740
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 740; //@line 31742
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $21; //@line 31744
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 31746
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 31748
    HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 31750
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 31752
    HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 31754
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 31756
    HEAP8[$ReallocAsyncCtx + 32 >> 0] = $16 & 1; //@line 31759
    sp = STACKTOP; //@line 31760
    return;
   }
  }
 }
 return;
}
function __ZN4mbed5Timer7read_msEv($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $16 = 0, $2 = 0, $21 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2827
 $2 = $0 + 16 | 0; //@line 2829
 $4 = HEAP32[$2 >> 2] | 0; //@line 2831
 $7 = HEAP32[$2 + 4 >> 2] | 0; //@line 2834
 if (!(HEAP32[$0 >> 2] | 0)) {
  $29 = 0; //@line 2838
  $30 = 0; //@line 2838
  $31 = _i64Add($29 | 0, $30 | 0, $4 | 0, $7 | 0) | 0; //@line 2839
  $32 = tempRet0; //@line 2840
  $33 = ___udivdi3($31 | 0, $32 | 0, 1e3, 0) | 0; //@line 2841
  $34 = tempRet0; //@line 2842
  return $33 | 0; //@line 2843
 }
 $11 = HEAP32[$0 + 24 >> 2] | 0; //@line 2846
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 2847
 $12 = _ticker_read_us($11) | 0; //@line 2848
 $13 = tempRet0; //@line 2849
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 122; //@line 2852
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2854
  $16 = $AsyncCtx + 8 | 0; //@line 2856
  HEAP32[$16 >> 2] = $4; //@line 2858
  HEAP32[$16 + 4 >> 2] = $7; //@line 2861
  sp = STACKTOP; //@line 2862
  return 0; //@line 2863
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2865
 $21 = $0 + 8 | 0; //@line 2867
 $27 = _i64Subtract($12 | 0, $13 | 0, HEAP32[$21 >> 2] | 0, HEAP32[$21 + 4 >> 2] | 0) | 0; //@line 2873
 $29 = $27; //@line 2875
 $30 = tempRet0; //@line 2875
 $31 = _i64Add($29 | 0, $30 | 0, $4 | 0, $7 | 0) | 0; //@line 2876
 $32 = tempRet0; //@line 2877
 $33 = ___udivdi3($31 | 0, $32 | 0, 1e3, 0) | 0; //@line 2878
 $34 = tempRet0; //@line 2879
 return $33 | 0; //@line 2880
}
function _fflush__async_cb($0) {
 $0 = $0 | 0;
 var $$02327$reg2mem$0 = 0, $$1 = 0, $$reg2mem$0 = 0, $17 = 0, $20 = 0, $ReallocAsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 13282
 $$02327$reg2mem$0 = HEAP32[$0 + 12 >> 2] | 0; //@line 13292
 $$1 = HEAP32[___async_retval >> 2] | HEAP32[$0 + 4 >> 2]; //@line 13292
 $$reg2mem$0 = HEAP32[$0 + 8 >> 2] | 0; //@line 13292
 while (1) {
  if ($$reg2mem$0 | 0) {
   ___unlockfile($$02327$reg2mem$0); //@line 13296
  }
  $$02327$reg2mem$0 = HEAP32[$$02327$reg2mem$0 + 56 >> 2] | 0; //@line 13299
  if (!$$02327$reg2mem$0) {
   label = 12; //@line 13302
   break;
  }
  if ((HEAP32[$$02327$reg2mem$0 + 76 >> 2] | 0) > -1) {
   $20 = ___lockfile($$02327$reg2mem$0) | 0; //@line 13310
  } else {
   $20 = 0; //@line 13312
  }
  if ((HEAP32[$$02327$reg2mem$0 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327$reg2mem$0 + 28 >> 2] | 0) >>> 0) {
   break;
  } else {
   $$reg2mem$0 = $20; //@line 13322
  }
 }
 if ((label | 0) == 12) {
  ___ofl_unlock(); //@line 13326
  HEAP32[___async_retval >> 2] = $$1; //@line 13328
  return;
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 13331
 $17 = ___fflush_unlocked($$02327$reg2mem$0) | 0; //@line 13332
 if (!___async) {
  HEAP32[___async_retval >> 2] = $17; //@line 13336
  ___async_unwind = 0; //@line 13337
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 707; //@line 13339
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $$1; //@line 13341
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $20; //@line 13343
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $$02327$reg2mem$0; //@line 13345
 sp = STACKTOP; //@line 13346
 return;
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_234($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 14257
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14261
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14263
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 14265
 $8 = (HEAP32[$0 + 4 >> 2] | 0) + 16 | 0; //@line 14266
 HEAP32[$8 >> 2] = $AsyncRetVal; //@line 14267
 $9 = HEAP32[$4 >> 2] | 0; //@line 14268
 if ($9 | 0) {
  $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 14272
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 14273
  FUNCTION_TABLE_vi[$12 & 1023]($6); //@line 14274
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 567; //@line 14277
   $13 = $ReallocAsyncCtx3 + 4 | 0; //@line 14278
   HEAP32[$13 >> 2] = $8; //@line 14279
   sp = STACKTOP; //@line 14280
   return;
  }
  ___async_unwind = 0; //@line 14283
  HEAP32[$ReallocAsyncCtx3 >> 2] = 567; //@line 14284
  $13 = $ReallocAsyncCtx3 + 4 | 0; //@line 14285
  HEAP32[$13 >> 2] = $8; //@line 14286
  sp = STACKTOP; //@line 14287
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 14294
 _mbed_assert_internal(13647, 13665, 57); //@line 14295
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 568; //@line 14298
  sp = STACKTOP; //@line 14299
  return;
 }
 ___async_unwind = 0; //@line 14302
 HEAP32[$ReallocAsyncCtx6 >> 2] = 568; //@line 14303
 sp = STACKTOP; //@line 14304
 return;
}
function ___fflush_unlocked__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 13489
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13491
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13493
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13495
 do {
  if (!(HEAP32[$2 >> 2] | 0)) {
   $$0 = -1; //@line 13500
  } else {
   $9 = $4 + 4 | 0; //@line 13502
   $10 = HEAP32[$9 >> 2] | 0; //@line 13503
   $11 = $4 + 8 | 0; //@line 13504
   $12 = HEAP32[$11 >> 2] | 0; //@line 13505
   if ($10 >>> 0 >= $12 >>> 0) {
    HEAP32[$4 + 16 >> 2] = 0; //@line 13509
    HEAP32[$6 >> 2] = 0; //@line 13510
    HEAP32[$2 >> 2] = 0; //@line 13511
    HEAP32[$11 >> 2] = 0; //@line 13512
    HEAP32[$9 >> 2] = 0; //@line 13513
    $$0 = 0; //@line 13514
    break;
   }
   $18 = HEAP32[$4 + 40 >> 2] | 0; //@line 13521
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 13522
   FUNCTION_TABLE_iiii[$18 & 31]($4, $10 - $12 | 0, 1) | 0; //@line 13523
   if (!___async) {
    ___async_unwind = 0; //@line 13526
   }
   HEAP32[$ReallocAsyncCtx2 >> 2] = 709; //@line 13528
   HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $4; //@line 13530
   HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 13532
   HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 13534
   HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $11; //@line 13536
   HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $9; //@line 13538
   sp = STACKTOP; //@line 13539
   return;
  }
 } while (0);
 HEAP32[___async_retval >> 2] = $$0; //@line 13544
 return;
}
function __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 33779
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 33781
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33783
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33785
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33787
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 33789
 $$pre = HEAP32[$2 >> 2] | 0; //@line 33790
 if (!$$pre) {
  HEAP32[$4 >> 2] = 0; //@line 33793
  _gpio_irq_set($10 + 28 | 0, 2, 1); //@line 33795
  return;
 }
 $13 = HEAP32[$$pre + 4 >> 2] | 0; //@line 33799
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 33800
 FUNCTION_TABLE_vii[$13 & 15]($6, $8); //@line 33801
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 108; //@line 33804
  $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 33805
  HEAP32[$14 >> 2] = $2; //@line 33806
  $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 33807
  HEAP32[$15 >> 2] = $4; //@line 33808
  $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 33809
  HEAP32[$16 >> 2] = $10; //@line 33810
  sp = STACKTOP; //@line 33811
  return;
 }
 ___async_unwind = 0; //@line 33814
 HEAP32[$ReallocAsyncCtx2 >> 2] = 108; //@line 33815
 $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 33816
 HEAP32[$14 >> 2] = $2; //@line 33817
 $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 33818
 HEAP32[$15 >> 2] = $4; //@line 33819
 $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 33820
 HEAP32[$16 >> 2] = $10; //@line 33821
 sp = STACKTOP; //@line 33822
 return;
}
function _equeue_create($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$033$i = 0, $$034$i = 0, $2 = 0, $21 = 0, $23 = 0, $27 = 0, $30 = 0, $5 = 0, $6 = 0;
 $2 = _malloc($1) | 0; //@line 3031
 if (!$2) {
  $$0 = -1; //@line 3034
  return $$0 | 0; //@line 3035
 }
 HEAP32[$0 + 12 >> 2] = $2; //@line 3038
 $5 = $0 + 20 | 0; //@line 3039
 HEAP32[$5 >> 2] = 0; //@line 3040
 $6 = $0 + 16 | 0; //@line 3041
 HEAP32[$6 >> 2] = 0; //@line 3042
 if ($1 | 0) {
  $$034$i = $1; //@line 3045
  $23 = 0; //@line 3045
  do {
   $23 = $23 + 1 | 0; //@line 3047
   $$034$i = $$034$i >>> 1; //@line 3048
  } while (($$034$i | 0) != 0);
  HEAP32[$6 >> 2] = $23; //@line 3056
 }
 HEAP32[$0 + 24 >> 2] = 0; //@line 3059
 HEAP32[$0 + 28 >> 2] = $1; //@line 3061
 HEAP32[$0 + 32 >> 2] = $2; //@line 3063
 HEAP32[$0 >> 2] = 0; //@line 3064
 HEAP32[$0 + 4 >> 2] = _equeue_tick() | 0; //@line 3067
 HEAP8[$0 + 9 >> 0] = 0; //@line 3069
 HEAP8[$0 + 8 >> 0] = 0; //@line 3071
 HEAP8[$0 + 36 >> 0] = 0; //@line 3073
 HEAP32[$0 + 40 >> 2] = 0; //@line 3075
 HEAP32[$0 + 44 >> 2] = 0; //@line 3077
 HEAP8[$0 + 184 >> 0] = 0; //@line 3079
 $21 = _equeue_sema_create($0 + 48 | 0) | 0; //@line 3081
 if (($21 | 0) < 0) {
  $$033$i = $21; //@line 3084
 } else {
  $27 = _equeue_mutex_create($0 + 128 | 0) | 0; //@line 3087
  if (($27 | 0) < 0) {
   $$033$i = $27; //@line 3090
  } else {
   $30 = _equeue_mutex_create($0 + 156 | 0) | 0; //@line 3093
   $$033$i = ($30 | 0) < 0 ? $30 : 0; //@line 3096
  }
 }
 HEAP32[$5 >> 2] = $2; //@line 3099
 $$0 = $$033$i; //@line 3100
 return $$0 | 0; //@line 3101
}
function __ZN7LoRaPHY15setup_rx_windowEbj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 28523
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28525
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28530
 $7 = HEAP32[$2 >> 2] | 0; //@line 28531
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 28 >> 2] | 0; //@line 28534
 if (HEAP8[$0 + 8 >> 0] & 1) {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 28536
  FUNCTION_TABLE_vii[$10 & 15]($7, 0); //@line 28537
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 552; //@line 28540
   $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 28541
   HEAP32[$12 >> 2] = $2; //@line 28542
   sp = STACKTOP; //@line 28543
   return;
  }
  ___async_unwind = 0; //@line 28546
  HEAP32[$ReallocAsyncCtx3 >> 2] = 552; //@line 28547
  $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 28548
  HEAP32[$12 >> 2] = $2; //@line 28549
  sp = STACKTOP; //@line 28550
  return;
 } else {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 28553
  FUNCTION_TABLE_vii[$10 & 15]($7, $6); //@line 28554
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 551; //@line 28557
   $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 28558
   HEAP32[$11 >> 2] = $2; //@line 28559
   sp = STACKTOP; //@line 28560
   return;
  }
  ___async_unwind = 0; //@line 28563
  HEAP32[$ReallocAsyncCtx2 >> 2] = 551; //@line 28564
  $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 28565
  HEAP32[$11 >> 2] = $2; //@line 28566
  sp = STACKTOP; //@line 28567
  return;
 }
}
function __ZN7LoRaPHY20put_radio_to_standbyEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $12 = 0, $15 = 0, $2 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 22269
 $1 = $0 + 4 | 0; //@line 22270
 $2 = HEAP32[$1 >> 2] | 0; //@line 22271
 $5 = HEAP32[(HEAP32[$2 >> 2] | 0) + 72 >> 2] | 0; //@line 22274
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 22275
 FUNCTION_TABLE_vi[$5 & 1023]($2); //@line 22276
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 544; //@line 22279
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 22281
  sp = STACKTOP; //@line 22282
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 22285
 $7 = HEAP32[$1 >> 2] | 0; //@line 22286
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 12 >> 2] | 0; //@line 22289
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 22290
 FUNCTION_TABLE_vi[$10 & 1023]($7); //@line 22291
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 545; //@line 22294
  HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 22296
  sp = STACKTOP; //@line 22297
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 22300
 $12 = HEAP32[$1 >> 2] | 0; //@line 22301
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 76 >> 2] | 0; //@line 22304
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 22305
 FUNCTION_TABLE_vi[$15 & 1023]($12); //@line 22306
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 546; //@line 22309
  sp = STACKTOP; //@line 22310
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 22313
  return;
 }
}
function __ZN7LoRaPHY18put_radio_to_sleepEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $12 = 0, $15 = 0, $2 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 22217
 $1 = $0 + 4 | 0; //@line 22218
 $2 = HEAP32[$1 >> 2] | 0; //@line 22219
 $5 = HEAP32[(HEAP32[$2 >> 2] | 0) + 72 >> 2] | 0; //@line 22222
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 22223
 FUNCTION_TABLE_vi[$5 & 1023]($2); //@line 22224
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 541; //@line 22227
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 22229
  sp = STACKTOP; //@line 22230
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 22233
 $7 = HEAP32[$1 >> 2] | 0; //@line 22234
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0; //@line 22237
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 22238
 FUNCTION_TABLE_vi[$10 & 1023]($7); //@line 22239
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 542; //@line 22242
  HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 22244
  sp = STACKTOP; //@line 22245
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 22248
 $12 = HEAP32[$1 >> 2] | 0; //@line 22249
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 76 >> 2] | 0; //@line 22252
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 22253
 FUNCTION_TABLE_vi[$15 & 1023]($12); //@line 22254
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 543; //@line 22257
  sp = STACKTOP; //@line 22258
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 22261
  return;
 }
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 23278
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23282
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23284
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23286
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23288
 $11 = $4 + 12 | 0; //@line 23290
 HEAP32[$11 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 23291
 $14 = HEAP8[(__ZNK7LoRaMac21get_mlme_confirmationEv($6) | 0) + 16 >> 0] | 0; //@line 23294
 $17 = HEAP8[(__ZNK7LoRaMac21get_mlme_confirmationEv($6) | 0) + 17 >> 0] | 0; //@line 23297
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 23298
 $18 = __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1_($8, $4, $14, $17) | 0; //@line 23299
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 311; //@line 23302
  $19 = $ReallocAsyncCtx6 + 4 | 0; //@line 23303
  HEAP32[$19 >> 2] = $11; //@line 23304
  $20 = $ReallocAsyncCtx6 + 8 | 0; //@line 23305
  HEAP32[$20 >> 2] = $10; //@line 23306
  sp = STACKTOP; //@line 23307
  return;
 }
 HEAP32[___async_retval >> 2] = $18; //@line 23311
 ___async_unwind = 0; //@line 23312
 HEAP32[$ReallocAsyncCtx6 >> 2] = 311; //@line 23313
 $19 = $ReallocAsyncCtx6 + 4 | 0; //@line 23314
 HEAP32[$19 >> 2] = $11; //@line 23315
 $20 = $ReallocAsyncCtx6 + 8 | 0; //@line 23316
 HEAP32[$20 >> 2] = $10; //@line 23317
 sp = STACKTOP; //@line 23318
 return;
}
function _main__async_cb_385($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 26738
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26740
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26742
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26744
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26746
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26748
 _mbed_trace_init() | 0; //@line 26749
 if (!(__ZN16LoRaWANInterface10initializeEPN6events10EventQueueE(20652, 20448) | 0)) {
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(24) | 0; //@line 26753
  $13 = _equeue_alloc(20448, 32) | 0; //@line 26754
  if (!___async) {
   HEAP32[___async_retval >> 2] = $13; //@line 26758
   ___async_unwind = 0; //@line 26759
  }
  HEAP32[$ReallocAsyncCtx14 >> 2] = 671; //@line 26761
  HEAP32[$ReallocAsyncCtx14 + 4 >> 2] = $2; //@line 26763
  HEAP32[$ReallocAsyncCtx14 + 8 >> 2] = $4; //@line 26765
  HEAP32[$ReallocAsyncCtx14 + 12 >> 2] = $6; //@line 26767
  HEAP32[$ReallocAsyncCtx14 + 16 >> 2] = $8; //@line 26769
  HEAP32[$ReallocAsyncCtx14 + 20 >> 2] = $10; //@line 26771
  sp = STACKTOP; //@line 26772
  return;
 }
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(4) | 0; //@line 26775
 _puts(15353) | 0; //@line 26776
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 670; //@line 26779
  sp = STACKTOP; //@line 26780
  return;
 }
 ___async_unwind = 0; //@line 26783
 HEAP32[$ReallocAsyncCtx8 >> 2] = 670; //@line 26784
 sp = STACKTOP; //@line 26785
 return;
}
function __ZN12LoRaWANStackD2Ev__async_cb_258($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 17398
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17400
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17402
 $6 = HEAP32[$2 + 2512 >> 2] | 0; //@line 17404
 if (!$6) {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 17408
  __ZN12radio_eventsD2Ev($2 + 2384 | 0); //@line 17409
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 171; //@line 17412
   $12 = $ReallocAsyncCtx5 + 4 | 0; //@line 17413
   HEAP32[$12 >> 2] = $2; //@line 17414
   sp = STACKTOP; //@line 17415
   return;
  }
  ___async_unwind = 0; //@line 17418
  HEAP32[$ReallocAsyncCtx5 >> 2] = 171; //@line 17419
  $12 = $ReallocAsyncCtx5 + 4 | 0; //@line 17420
  HEAP32[$12 >> 2] = $2; //@line 17421
  sp = STACKTOP; //@line 17422
  return;
 } else {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 17426
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 17427
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 17428
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 170; //@line 17431
   $10 = $ReallocAsyncCtx3 + 4 | 0; //@line 17432
   HEAP32[$10 >> 2] = $2; //@line 17433
   sp = STACKTOP; //@line 17434
   return;
  }
  ___async_unwind = 0; //@line 17437
  HEAP32[$ReallocAsyncCtx3 >> 2] = 170; //@line 17438
  $10 = $ReallocAsyncCtx3 + 4 | 0; //@line 17439
  HEAP32[$10 >> 2] = $2; //@line 17440
  sp = STACKTOP; //@line 17441
  return;
 }
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 32228
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32230
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32232
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32234
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32236
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32238
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 32240
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 32242
 $16 = $4 + 12 | 0; //@line 32244
 HEAP32[$4 >> 2] = 465; //@line 32245
 HEAP32[$4 + 4 >> 2] = 0; //@line 32247
 HEAP32[$4 + 8 >> 2] = $2; //@line 32249
 HEAP32[$16 >> 2] = 860; //@line 32250
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(36) | 0; //@line 32251
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($6, $2 + 1816 | 0, $4); //@line 32252
 if (!___async) {
  ___async_unwind = 0; //@line 32255
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 466; //@line 32257
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $6; //@line 32259
 HEAP32[$ReallocAsyncCtx7 + 8 >> 2] = $2; //@line 32261
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $12; //@line 32263
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $14; //@line 32265
 HEAP32[$ReallocAsyncCtx7 + 20 >> 2] = $16; //@line 32267
 HEAP32[$ReallocAsyncCtx7 + 24 >> 2] = $10; //@line 32269
 HEAP32[$ReallocAsyncCtx7 + 28 >> 2] = $8; //@line 32271
 HEAP32[$ReallocAsyncCtx7 + 32 >> 2] = $4; //@line 32273
 sp = STACKTOP; //@line 32274
 return;
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_424($0) {
 $0 = $0 | 0;
 var $$059 = 0, $10 = 0, $12 = 0, $17 = 0, $19 = 0, $2 = 0, $25 = 0, $31 = 0, $37 = 0, $4 = 0, $42 = 0, $6 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30848
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30850
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30852
 $10 = HEAP8[$0 + 20 >> 0] | 0; //@line 30856
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30858
 if (HEAP32[___async_retval >> 2] | 0) {
  $$059 = -1014; //@line 30865
  $42 = ___async_retval; //@line 30866
  HEAP32[$42 >> 2] = $$059; //@line 30867
  return;
 }
 $17 = HEAP32[$2 >> 2] | 0; //@line 30870
 $19 = HEAP16[$4 >> 1] | 0; //@line 30872
 HEAP16[$4 >> 1] = $19 + 1 << 16 >> 16; //@line 30874
 HEAP8[($19 & 65535) + ($6 + 1185) >> 0] = $17; //@line 30877
 $25 = HEAP16[$4 >> 1] | 0; //@line 30880
 HEAP16[$4 >> 1] = $25 + 1 << 16 >> 16; //@line 30882
 HEAP8[($25 & 65535) + ($6 + 1185) >> 0] = $17 >>> 8; //@line 30885
 $31 = HEAP16[$4 >> 1] | 0; //@line 30888
 HEAP16[$4 >> 1] = $31 + 1 << 16 >> 16; //@line 30890
 HEAP8[($31 & 65535) + ($6 + 1185) >> 0] = $17 >>> 16; //@line 30893
 $37 = HEAP16[$4 >> 1] | 0; //@line 30896
 HEAP16[$4 >> 1] = $37 + 1 << 16 >> 16; //@line 30898
 HEAP8[($37 & 65535) + ($6 + 1185) >> 0] = $17 >>> 24; //@line 30901
 HEAP32[$12 >> 2] = $10 & 255; //@line 30903
 _mbed_tracef(16, 12890, 13075, $12); //@line 30904
 $$059 = 0; //@line 30905
 $42 = ___async_retval; //@line 30906
 HEAP32[$42 >> 2] = $$059; //@line 30907
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_193($0) {
 $0 = $0 | 0;
 var $12 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $2 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 33101
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 33103
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33105
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33107
 if (!(HEAP8[$2 + 1177 >> 0] | 0)) {
  $19 = HEAP8[$2 + 1182 >> 0] | 0; //@line 33113
  HEAP8[$2 + 1183 >> 0] = $19; //@line 33115
  __ZN7LoRaPHY16set_last_tx_doneEhbj($2 + 4 | 0, $19, (HEAP8[$2 + 2376 >> 0] | 0) != 0, $4); //@line 33120
  HEAP32[$2 + 1780 >> 2] = $4; //@line 33122
  return;
 }
 $12 = HEAP32[$2 + 1776 >> 2] | 0; //@line 33127
 $15 = (__ZN7LoRaPHY15get_ack_timeoutEv($2 + 4 | 0) | 0) + $12 | 0; //@line 33130
 $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 33131
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($6, $2 + 1856 | 0, $15); //@line 33132
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 386; //@line 33135
  $16 = $ReallocAsyncCtx + 4 | 0; //@line 33136
  HEAP32[$16 >> 2] = $2; //@line 33137
  $17 = $ReallocAsyncCtx + 8 | 0; //@line 33138
  HEAP32[$17 >> 2] = $4; //@line 33139
  sp = STACKTOP; //@line 33140
  return;
 }
 ___async_unwind = 0; //@line 33143
 HEAP32[$ReallocAsyncCtx >> 2] = 386; //@line 33144
 $16 = $ReallocAsyncCtx + 4 | 0; //@line 33145
 HEAP32[$16 >> 2] = $2; //@line 33146
 $17 = $ReallocAsyncCtx + 8 | 0; //@line 33147
 HEAP32[$17 >> 2] = $4; //@line 33148
 sp = STACKTOP; //@line 33149
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_408($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 29143
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29145
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29147
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 29149
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29151
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29153
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 29155
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29157
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 29159
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 29161
 $19 = HEAP32[$2 >> 2] | 0; //@line 29162
 $22 = HEAP32[(HEAP32[$19 >> 2] | 0) + 32 >> 2] | 0; //@line 29165
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(36) | 0; //@line 29166
 FUNCTION_TABLE_vii[$22 & 15]($19, $4); //@line 29167
 if (!___async) {
  ___async_unwind = 0; //@line 29170
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 522; //@line 29172
 HEAP8[$ReallocAsyncCtx5 + 4 >> 0] = $6; //@line 29174
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $8; //@line 29176
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $2; //@line 29178
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $10; //@line 29180
 HEAP8[$ReallocAsyncCtx5 + 20 >> 0] = $12; //@line 29182
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $14; //@line 29184
 HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $16; //@line 29186
 HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $18; //@line 29188
 sp = STACKTOP; //@line 29189
 return;
}
function __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 14077
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14079
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14081
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14083
 $7 = $2 + 12 | 0; //@line 14084
 $8 = HEAP32[$7 >> 2] | 0; //@line 14085
 if (!$8) {
  HEAP32[$4 >> 2] = 0; //@line 14088
  HEAP32[$6 + 16 >> 2] = 0; //@line 14090
  return;
 }
 $11 = HEAP32[$8 + 4 >> 2] | 0; //@line 14094
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 14095
 FUNCTION_TABLE_vii[$11 & 15]($6, $2); //@line 14096
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 562; //@line 14099
  $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 14100
  HEAP32[$12 >> 2] = $7; //@line 14101
  $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 14102
  HEAP32[$13 >> 2] = $4; //@line 14103
  $14 = $ReallocAsyncCtx2 + 12 | 0; //@line 14104
  HEAP32[$14 >> 2] = $6; //@line 14105
  sp = STACKTOP; //@line 14106
  return;
 }
 ___async_unwind = 0; //@line 14109
 HEAP32[$ReallocAsyncCtx2 >> 2] = 562; //@line 14110
 $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 14111
 HEAP32[$12 >> 2] = $7; //@line 14112
 $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 14113
 HEAP32[$13 >> 2] = $4; //@line 14114
 $14 = $ReallocAsyncCtx2 + 12 | 0; //@line 14115
 HEAP32[$14 >> 2] = $6; //@line 14116
 sp = STACKTOP; //@line 14117
 return;
}
function _mbedtls_aes_crypt_ctr($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0$lcssa = 0, $$023 = 0, $$024 = 0, $$02529 = 0, $$02628 = 0, $$030 = 0, $$in = 0, $14 = 0, $16 = 0, $25 = 0, $7 = 0;
 $7 = HEAP32[$2 >> 2] | 0; //@line 2099
 if ($7 >>> 0 > 15) {
  $$024 = -33; //@line 2102
  return $$024 | 0; //@line 2103
 }
 if (!$1) {
  $$0$lcssa = $7; //@line 2107
 } else {
  $$02529 = $6; //@line 2109
  $$02628 = $5; //@line 2109
  $$030 = $7; //@line 2109
  $$in = $1; //@line 2109
  while (1) {
   $$in = $$in + -1 | 0; //@line 2111
   L7 : do {
    if (!$$030) {
     _mbedtls_internal_aes_encrypt($0, $3, $4) | 0; //@line 2115
     $$023 = 16; //@line 2116
     do {
      if (($$023 | 0) <= 0) {
       break L7;
      }
      $$023 = $$023 + -1 | 0; //@line 2122
      $14 = $3 + $$023 | 0; //@line 2123
      $16 = (HEAP8[$14 >> 0] | 0) + 1 << 24 >> 24; //@line 2125
      HEAP8[$14 >> 0] = $16; //@line 2126
     } while (!($16 << 24 >> 24));
    }
   } while (0);
   HEAP8[$$02529 >> 0] = HEAP8[$4 + $$030 >> 0] ^ HEAP8[$$02628 >> 0]; //@line 2142
   $25 = $$030 + 1 & 15; //@line 2144
   if (!$$in) {
    $$0$lcssa = $25; //@line 2147
    break;
   } else {
    $$02529 = $$02529 + 1 | 0; //@line 2150
    $$02628 = $$02628 + 1 | 0; //@line 2150
    $$030 = $25; //@line 2150
   }
  }
 }
 HEAP32[$2 >> 2] = $$0$lcssa; //@line 2154
 $$024 = 0; //@line 2155
 return $$024 | 0; //@line 2156
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_341($0) {
 $0 = $0 | 0;
 var $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 23665
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23667
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23669
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23671
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 23673
 if (!$AsyncRetVal) {
  HEAP8[___async_retval >> 0] = 0; //@line 23678
  return;
 }
 dest = $2 + 4 | 0; //@line 23682
 stop = dest + 52 | 0; //@line 23682
 do {
  HEAP32[dest >> 2] = 0; //@line 23682
  dest = dest + 4 | 0; //@line 23682
 } while ((dest | 0) < (stop | 0));
 HEAP32[$2 >> 2] = $AsyncRetVal; //@line 23683
 HEAP32[$2 + 8 >> 2] = $4; //@line 23685
 HEAP32[$2 + 12 >> 2] = -1; //@line 23687
 HEAP32[$2 + 48 >> 2] = 1; //@line 23689
 $15 = HEAP32[(HEAP32[$AsyncRetVal >> 2] | 0) + 28 >> 2] | 0; //@line 23692
 $16 = HEAP32[$6 >> 2] | 0; //@line 23693
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 23694
 FUNCTION_TABLE_viiii[$15 & 7]($AsyncRetVal, $2, $16, 1); //@line 23695
 if (!___async) {
  ___async_unwind = 0; //@line 23698
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 725; //@line 23700
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 23702
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $6; //@line 23704
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $2; //@line 23706
 sp = STACKTOP; //@line 23707
 return;
}
function _wcrtomb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0;
 do {
  if (!$0) {
   $$0 = 1; //@line 15264
  } else {
   if ($1 >>> 0 < 128) {
    HEAP8[$0 >> 0] = $1; //@line 15269
    $$0 = 1; //@line 15270
    break;
   }
   if (!(HEAP32[HEAP32[(___pthread_self_910() | 0) + 188 >> 2] >> 2] | 0)) {
    if (($1 & -128 | 0) == 57216) {
     HEAP8[$0 >> 0] = $1; //@line 15283
     $$0 = 1; //@line 15284
     break;
    } else {
     HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 15288
     $$0 = -1; //@line 15289
     break;
    }
   }
   if ($1 >>> 0 < 2048) {
    HEAP8[$0 >> 0] = $1 >>> 6 | 192; //@line 15299
    HEAP8[$0 + 1 >> 0] = $1 & 63 | 128; //@line 15303
    $$0 = 2; //@line 15304
    break;
   }
   if ($1 >>> 0 < 55296 | ($1 & -8192 | 0) == 57344) {
    HEAP8[$0 >> 0] = $1 >>> 12 | 224; //@line 15316
    HEAP8[$0 + 1 >> 0] = $1 >>> 6 & 63 | 128; //@line 15322
    HEAP8[$0 + 2 >> 0] = $1 & 63 | 128; //@line 15326
    $$0 = 3; //@line 15327
    break;
   }
   if (($1 + -65536 | 0) >>> 0 < 1048576) {
    HEAP8[$0 >> 0] = $1 >>> 18 | 240; //@line 15337
    HEAP8[$0 + 1 >> 0] = $1 >>> 12 & 63 | 128; //@line 15343
    HEAP8[$0 + 2 >> 0] = $1 >>> 6 & 63 | 128; //@line 15349
    HEAP8[$0 + 3 >> 0] = $1 & 63 | 128; //@line 15353
    $$0 = 4; //@line 15354
    break;
   } else {
    HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 15358
    $$0 = -1; //@line 15359
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 15364
}
function __ZN18LoRaMacChannelPlan21remove_single_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $13 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 17304
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
  $$0 = -1002; //@line 17308
  return $$0 | 0; //@line 17309
 }
 if (((__ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0) & 255) <= ($1 & 255)) {
  $$0 = -1003; //@line 17315
  return $$0 | 0; //@line 17316
 }
 $7 = HEAP32[$0 >> 2] | 0; //@line 17318
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 64 >> 2] | 0; //@line 17321
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 17322
 $11 = FUNCTION_TABLE_iii[$10 & 31]($7, $1) | 0; //@line 17323
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 487; //@line 17326
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 17328
  sp = STACKTOP; //@line 17329
  return 0; //@line 17330
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 17332
 if (!$11) {
  $$0 = -1003; //@line 17334
  return $$0 | 0; //@line 17335
 }
 $13 = HEAP32[$0 >> 2] | 0; //@line 17337
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 17338
 __ZN7LoRaPHY18put_radio_to_sleepEv($13); //@line 17339
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 488; //@line 17342
  sp = STACKTOP; //@line 17343
  return 0; //@line 17344
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 17346
 $$0 = 0; //@line 17347
 return $$0 | 0; //@line 17348
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_313($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 21867
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21869
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21871
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 21873
 $8 = HEAP8[$0 + 13 >> 0] | 0; //@line 21875
 $10 = HEAP32[$0 + 16 >> 2] | 0; //@line 21877
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 21881
 $15 = $4 + 12 | 0; //@line 21883
 HEAP32[$15 >> 2] = HEAP32[HEAP32[$0 + 20 >> 2] >> 2]; //@line 21884
 $16 = $4 + 16 | 0; //@line 21885
 HEAP8[$16 >> 0] = $6; //@line 21886
 HEAP8[$4 + 17 >> 0] = $8; //@line 21888
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 21889
 $18 = _equeue_alloc($10, 20) | 0; //@line 21890
 if (!___async) {
  HEAP32[___async_retval >> 2] = $18; //@line 21894
  ___async_unwind = 0; //@line 21895
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 326; //@line 21897
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $15; //@line 21899
 HEAP32[$ReallocAsyncCtx7 + 8 >> 2] = $2; //@line 21901
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $14; //@line 21903
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $15; //@line 21905
 HEAP32[$ReallocAsyncCtx7 + 20 >> 2] = $16; //@line 21907
 HEAP32[$ReallocAsyncCtx7 + 24 >> 2] = $10; //@line 21909
 HEAP32[$ReallocAsyncCtx7 + 28 >> 2] = $4; //@line 21911
 sp = STACKTOP; //@line 21912
 return;
}
function __ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_297($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $21 = 0, $26 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 20377
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20381
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20383
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20385
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20387
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20391
 if (!(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] & 1)) {
  $21 = (__ZNK7LoRaMac16get_device_classEv($4) | 0) == 2; //@line 20399
  HEAP32[$6 >> 2] = $21 ? 5 : 2; //@line 20401
 }
 if (!(HEAP8[(__ZNK7LoRaMac19get_mlme_indicationEv($4) | 0) + 4 >> 0] | 0)) {
  HEAP8[$8 + 2911 >> 0] = 1; //@line 20409
  return;
 }
 _mbed_tracef(16, 12211, 12433, $10); //@line 20412
 __ZN7LoRaMac21post_process_mlme_indEv($4); //@line 20413
 _mbed_tracef(16, 12211, 12457, $14); //@line 20414
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 20415
 __ZN12LoRaWANStack23mlme_indication_handlerEv($8); //@line 20416
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 297; //@line 20419
  $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 20420
  HEAP32[$26 >> 2] = $8; //@line 20421
  sp = STACKTOP; //@line 20422
  return;
 }
 ___async_unwind = 0; //@line 20425
 HEAP32[$ReallocAsyncCtx2 >> 2] = 297; //@line 20426
 $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 20427
 HEAP32[$26 >> 2] = $8; //@line 20428
 sp = STACKTOP; //@line 20429
 return;
}
function _mbedtls_cipher_cmac_finish__async_cb_282($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $4 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 18462
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18466
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18470
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18472
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18474
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18476
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 18478
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 18480
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 18482
 if (!$AsyncRetVal) {
  _memcpy(HEAP32[$0 + 4 >> 2] | 0, $4 | 0, HEAP32[$0 + 12 >> 2] | 0) | 0; //@line 18485
 }
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(36) | 0; //@line 18487
 _mbedtls_platform_zeroize($8, 16); //@line 18488
 if (!___async) {
  ___async_unwind = 0; //@line 18491
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 605; //@line 18493
 HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $10; //@line 18495
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $12; //@line 18497
 HEAP32[$ReallocAsyncCtx4 + 12 >> 2] = $14; //@line 18499
 HEAP32[$ReallocAsyncCtx4 + 16 >> 2] = $4; //@line 18501
 HEAP32[$ReallocAsyncCtx4 + 20 >> 2] = $AsyncRetVal; //@line 18503
 HEAP32[$ReallocAsyncCtx4 + 24 >> 2] = $16; //@line 18505
 HEAP32[$ReallocAsyncCtx4 + 28 >> 2] = $18; //@line 18507
 HEAP32[$ReallocAsyncCtx4 + 32 >> 2] = $8; //@line 18509
 sp = STACKTOP; //@line 18510
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_177($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 31845
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31849
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31851
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31853
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31855
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31857
 $14 = HEAP8[$0 + 28 >> 0] & 1; //@line 31860
 $17 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 31861
 if ($17 >>> 0 < $4 >>> 0) {
  if (!(HEAP8[$6 >> 0] | 0)) {
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 31867
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($17, $8, $10, $12, $14); //@line 31868
   if (!___async) {
    ___async_unwind = 0; //@line 31871
   }
   HEAP32[$ReallocAsyncCtx3 >> 2] = 738; //@line 31873
   HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $17; //@line 31875
   HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 31877
   HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 31879
   HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 31881
   HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 31883
   HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 31885
   HEAP8[$ReallocAsyncCtx3 + 28 >> 0] = $14 & 1; //@line 31888
   sp = STACKTOP; //@line 31889
   return;
  }
 }
 return;
}
function __ZN12LoRaWANStack28process_transmission_timeoutEv($0) {
 $0 = $0 | 0;
 var $10 = 0, $3 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 8618
 STACKTOP = STACKTOP + 16 | 0; //@line 8619
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 8619
 _mbed_tracef(16, 12211, 12402, sp); //@line 8621
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 8622
 __ZN7LoRaMac19on_radio_tx_timeoutEv($0); //@line 8623
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 279; //@line 8626
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 8628
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 8630
  sp = STACKTOP; //@line 8631
  STACKTOP = sp; //@line 8632
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 8634
 $3 = $0 + 2904 | 0; //@line 8635
 HEAP32[$3 >> 2] = HEAP32[$3 >> 2] & -18 | 1; //@line 8639
 $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 8640
 __ZN12LoRaWANStack26process_status_check_stateEv($0); //@line 8641
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 280; //@line 8644
  HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 8646
  HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 8648
  sp = STACKTOP; //@line 8649
  STACKTOP = sp; //@line 8650
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 8652
  $10 = (__ZNK7LoRaMac16get_device_classEv($0) | 0) == 2; //@line 8654
  HEAP32[$0 + 2496 >> 2] = $10 ? 5 : 2; //@line 8657
  STACKTOP = sp; //@line 8658
  return;
 }
}
function __ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa__async_cb_133($0) {
 $0 = $0 | 0;
 var $12 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 28687
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28689
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28691
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 28693
 $8 = HEAP8[$0 + 13 >> 0] | 0; //@line 28695
 if (HEAP32[___async_retval >> 2] | 0) {
  HEAP32[$2 + 2020 >> 2] = 13; //@line 28701
 }
 $12 = $2 + 476 | 0; //@line 28703
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 28707
 $16 = __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($12, $4, 0, $6, $8, $2 + 2084 | 0, $2 + 1876 | 0, $2 + 4 | 0) | 0; //@line 28708
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 397; //@line 28711
  $17 = $ReallocAsyncCtx4 + 4 | 0; //@line 28712
  HEAP32[$17 >> 2] = $12; //@line 28713
  $18 = $ReallocAsyncCtx4 + 8 | 0; //@line 28714
  HEAP32[$18 >> 2] = $2; //@line 28715
  sp = STACKTOP; //@line 28716
  return;
 }
 HEAP32[___async_retval >> 2] = $16; //@line 28720
 ___async_unwind = 0; //@line 28721
 HEAP32[$ReallocAsyncCtx4 >> 2] = 397; //@line 28722
 $17 = $ReallocAsyncCtx4 + 4 | 0; //@line 28723
 HEAP32[$17 >> 2] = $12; //@line 28724
 $18 = $ReallocAsyncCtx4 + 8 | 0; //@line 28725
 HEAP32[$18 >> 2] = $2; //@line 28726
 sp = STACKTOP; //@line 28727
 return;
}
function __ZN7LoRaMac10disconnectEv__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $2 = 0, $8 = 0, $9 = 0, dest = 0, stop = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28367
 HEAP8[$2 + 2376 >> 0] = 0; //@line 28369
 HEAP8[$2 + 1181 >> 0] = 0; //@line 28371
 HEAP8[$2 + 1175 >> 0] = 1; //@line 28373
 HEAP8[$2 + 1177 >> 0] = 0; //@line 28375
 HEAP8[$2 + 1178 >> 0] = 0; //@line 28377
 $8 = $2 + 476 | 0; //@line 28378
 __ZN14LoRaMacCommand20clear_command_bufferEv($8); //@line 28379
 __ZN14LoRaMacCommand19clear_repeat_bufferEv($8); //@line 28380
 __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($8); //@line 28381
 $9 = $2 + 2052 | 0; //@line 28382
 HEAP32[$9 >> 2] = 0; //@line 28383
 HEAP32[$9 + 4 >> 2] = 0; //@line 28383
 HEAP32[$9 + 8 >> 2] = 0; //@line 28383
 HEAP32[$9 + 12 >> 2] = 0; //@line 28383
 HEAP32[$9 + 16 >> 2] = 0; //@line 28383
 HEAP32[$9 + 20 >> 2] = 0; //@line 28383
 HEAP32[$2 + 2056 >> 2] = 1; //@line 28385
 $11 = $2 + 2084 | 0; //@line 28386
 HEAP32[$11 >> 2] = 0; //@line 28387
 HEAP32[$11 + 4 >> 2] = 0; //@line 28387
 HEAP32[$11 + 8 >> 2] = 0; //@line 28387
 HEAP32[$11 + 12 >> 2] = 0; //@line 28387
 HEAP32[$11 + 16 >> 2] = 0; //@line 28387
 HEAP32[$2 + 2092 >> 2] = 1; //@line 28389
 dest = $2 + 2012 | 0; //@line 28391
 stop = dest + 40 | 0; //@line 28391
 do {
  HEAP32[dest >> 2] = 0; //@line 28391
  dest = dest + 4 | 0; //@line 28391
 } while ((dest | 0) < (stop | 0));
 HEAP32[$2 + 2020 >> 2] = 1; //@line 28393
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_334($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 23420
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23424
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 23426
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 23427
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 23431
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 23432
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 23433
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 312; //@line 23436
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 23437
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 23438
   sp = STACKTOP; //@line 23439
   return;
  }
  ___async_unwind = 0; //@line 23442
  HEAP32[$ReallocAsyncCtx2 >> 2] = 312; //@line 23443
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 23444
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 23445
  sp = STACKTOP; //@line 23446
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(4) | 0; //@line 23453
 _mbed_assert_internal(12104, 12113, 881); //@line 23454
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 313; //@line 23457
  sp = STACKTOP; //@line 23458
  return;
 }
 ___async_unwind = 0; //@line 23461
 HEAP32[$ReallocAsyncCtx10 >> 2] = 313; //@line 23462
 sp = STACKTOP; //@line 23463
 return;
}
function __ZN7LoRaMac21handle_retransmissionEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 31578
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31580
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31582
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31586
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31588
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 31590
 if ($AsyncRetVal | 0) {
  HEAP32[$4 >> 2] = $AsyncRetVal; //@line 31593
  _mbed_tracef(2, 12890, 12979, $4); //@line 31594
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 31596
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 31599
 $13 = __ZN7LoRaMac11schedule_txEv($2) | 0; //@line 31600
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 424; //@line 31603
  $14 = $ReallocAsyncCtx3 + 4 | 0; //@line 31604
  HEAP32[$14 >> 2] = $8; //@line 31605
  $15 = $ReallocAsyncCtx3 + 8 | 0; //@line 31606
  HEAP32[$15 >> 2] = $10; //@line 31607
  sp = STACKTOP; //@line 31608
  return;
 }
 HEAP32[___async_retval >> 2] = $13; //@line 31612
 ___async_unwind = 0; //@line 31613
 HEAP32[$ReallocAsyncCtx3 >> 2] = 424; //@line 31614
 $14 = $ReallocAsyncCtx3 + 4 | 0; //@line 31615
 HEAP32[$14 >> 2] = $8; //@line 31616
 $15 = $ReallocAsyncCtx3 + 8 | 0; //@line 31617
 HEAP32[$15 >> 2] = $10; //@line 31618
 sp = STACKTOP; //@line 31619
 return;
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_187($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 32818
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32820
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32822
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32824
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32826
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32828
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 32830
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 32832
 _srand(HEAP32[___async_retval >> 2] | 0); //@line 32835
 $16 = $6 + 1172 | 0; //@line 32836
 HEAP8[$16 >> 0] = 1; //@line 32837
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(36) | 0; //@line 32838
 __ZN7LoRaPHY25setup_public_network_modeEb($2, 1); //@line 32839
 if (!___async) {
  ___async_unwind = 0; //@line 32842
 }
 HEAP32[$ReallocAsyncCtx11 >> 2] = 460; //@line 32844
 HEAP32[$ReallocAsyncCtx11 + 4 >> 2] = $2; //@line 32846
 HEAP32[$ReallocAsyncCtx11 + 8 >> 2] = $4; //@line 32848
 HEAP32[$ReallocAsyncCtx11 + 12 >> 2] = $6; //@line 32850
 HEAP32[$ReallocAsyncCtx11 + 16 >> 2] = $16; //@line 32852
 HEAP32[$ReallocAsyncCtx11 + 20 >> 2] = $8; //@line 32854
 HEAP32[$ReallocAsyncCtx11 + 24 >> 2] = $10; //@line 32856
 HEAP32[$ReallocAsyncCtx11 + 28 >> 2] = $12; //@line 32858
 HEAP32[$ReallocAsyncCtx11 + 32 >> 2] = $14; //@line 32860
 sp = STACKTOP; //@line 32861
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 10265
 $2 = HEAP8[$0 + 16 >> 0] | 0; //@line 10267
 $4 = HEAP8[$0 + 17 >> 0] | 0; //@line 10269
 $5 = $0 + 12 | 0; //@line 10270
 $6 = HEAP32[$5 >> 2] | 0; //@line 10271
 do {
  if (!$6) {
   $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 10275
   _mbed_assert_internal(15010, 15015, 1677); //@line 10276
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 338; //@line 10279
    HEAP32[$AsyncCtx2 + 4 >> 2] = $5; //@line 10281
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 10283
    HEAP8[$AsyncCtx2 + 12 >> 0] = $2; //@line 10285
    HEAP8[$AsyncCtx2 + 13 >> 0] = $4; //@line 10287
    sp = STACKTOP; //@line 10288
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 10291
    $13 = HEAP32[$5 >> 2] | 0; //@line 10293
    break;
   }
  } else {
   $13 = $6; //@line 10297
  }
 } while (0);
 $12 = HEAP32[$13 >> 2] | 0; //@line 10300
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10301
 FUNCTION_TABLE_viii[$12 & 7]($0, $2, $4); //@line 10302
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 339; //@line 10305
  sp = STACKTOP; //@line 10306
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10309
  return;
 }
}
function __ZN7LoRaMac4joinEb__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 33694
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 33696
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33698
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33702
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 33704
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 33706
 if ($AsyncRetVal | 0) {
  HEAP32[$4 >> 2] = $AsyncRetVal; //@line 33709
  _mbed_tracef(2, 12890, 12979, $4); //@line 33710
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 33712
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 33715
 $13 = __ZN7LoRaMac11schedule_txEv($2) | 0; //@line 33716
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 458; //@line 33719
  $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 33720
  HEAP32[$14 >> 2] = $8; //@line 33721
  $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 33722
  HEAP32[$15 >> 2] = $10; //@line 33723
  sp = STACKTOP; //@line 33724
  return;
 }
 HEAP32[___async_retval >> 2] = $13; //@line 33728
 ___async_unwind = 0; //@line 33729
 HEAP32[$ReallocAsyncCtx2 >> 2] = 458; //@line 33730
 $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 33731
 HEAP32[$14 >> 2] = $8; //@line 33732
 $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 33733
 HEAP32[$15 >> 2] = $10; //@line 33734
 sp = STACKTOP; //@line 33735
 return;
}
function __ZN12LoRaWANStack28tx_timeout_interrupt_handlerEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 6884
 STACKTOP = STACKTOP + 16 | 0; //@line 6885
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 6885
 $$byval_copy = sp + 8 | 0; //@line 6886
 $1 = sp; //@line 6887
 $3 = HEAP32[$0 + 3168 >> 2] | 0; //@line 6889
 HEAP32[$1 >> 2] = 212; //@line 6890
 HEAP32[$1 + 4 >> 2] = 0; //@line 6892
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6893
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 6894
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 6894
 $4 = __ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 6895
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 213; //@line 6898
  sp = STACKTOP; //@line 6899
  STACKTOP = sp; //@line 6900
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 6902
 if ($4 | 0) {
  STACKTOP = sp; //@line 6905
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6907
 _mbed_assert_internal(12104, 12113, 539); //@line 6908
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 214; //@line 6911
  sp = STACKTOP; //@line 6912
  STACKTOP = sp; //@line 6913
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 6915
 STACKTOP = sp; //@line 6916
 return;
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_180($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 32281
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32283
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32285
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32287
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32289
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32291
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 32293
 $14 = $4 + 12 | 0; //@line 32295
 HEAP32[$4 >> 2] = 468; //@line 32296
 HEAP32[$4 + 4 >> 2] = 0; //@line 32298
 HEAP32[$4 + 8 >> 2] = $2; //@line 32300
 HEAP32[$14 >> 2] = 860; //@line 32301
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(32) | 0; //@line 32302
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($6, $2 + 1836 | 0, $4); //@line 32303
 if (!___async) {
  ___async_unwind = 0; //@line 32306
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 469; //@line 32308
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $14; //@line 32310
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $2; //@line 32312
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $8; //@line 32314
 HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $6; //@line 32316
 HEAP32[$ReallocAsyncCtx6 + 20 >> 2] = $4; //@line 32318
 HEAP32[$ReallocAsyncCtx6 + 24 >> 2] = $10; //@line 32320
 HEAP32[$ReallocAsyncCtx6 + 28 >> 2] = $12; //@line 32322
 sp = STACKTOP; //@line 32323
 return;
}
function __ZN12LoRaWANStack20tx_interrupt_handlerEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 6697
 STACKTOP = STACKTOP + 16 | 0; //@line 6698
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 6698
 $$byval_copy = sp + 8 | 0; //@line 6699
 $1 = sp; //@line 6700
 $3 = HEAP32[$0 + 3168 >> 2] | 0; //@line 6702
 HEAP32[$1 >> 2] = 203; //@line 6703
 HEAP32[$1 + 4 >> 2] = 0; //@line 6705
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6706
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 6707
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 6707
 $4 = __ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 6708
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 204; //@line 6711
  sp = STACKTOP; //@line 6712
  STACKTOP = sp; //@line 6713
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 6715
 if ($4 | 0) {
  STACKTOP = sp; //@line 6718
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6720
 _mbed_assert_internal(12104, 12113, 507); //@line 6721
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 205; //@line 6724
  sp = STACKTOP; //@line 6725
  STACKTOP = sp; //@line 6726
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 6728
 STACKTOP = sp; //@line 6729
 return;
}
function __ZN12radio_eventsD2Ev__async_cb_292($0) {
 $0 = $0 | 0;
 var $11 = 0, $14 = 0, $2 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 19610
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19612
 $4 = HEAP32[$2 + 28 >> 2] | 0; //@line 19614
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 19619
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 19620
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 16 | 0); //@line 19621
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 178; //@line 19624
   $9 = $ReallocAsyncCtx6 + 4 | 0; //@line 19625
   HEAP32[$9 >> 2] = $2; //@line 19626
   sp = STACKTOP; //@line 19627
   return;
  }
  ___async_unwind = 0; //@line 19630
  HEAP32[$ReallocAsyncCtx6 >> 2] = 178; //@line 19631
  $9 = $ReallocAsyncCtx6 + 4 | 0; //@line 19632
  HEAP32[$9 >> 2] = $2; //@line 19633
  sp = STACKTOP; //@line 19634
  return;
 }
 $11 = HEAP32[$2 + 12 >> 2] | 0; //@line 19638
 if (!$11) {
  return;
 }
 $14 = HEAP32[$11 + 8 >> 2] | 0; //@line 19644
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 19645
 FUNCTION_TABLE_vi[$14 & 1023]($2); //@line 19646
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 179; //@line 19649
  sp = STACKTOP; //@line 19650
  return;
 }
 ___async_unwind = 0; //@line 19653
 HEAP32[$ReallocAsyncCtx7 >> 2] = 179; //@line 19654
 sp = STACKTOP; //@line 19655
 return;
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_400($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 27827
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27829
 if ((HEAP32[$2 + 2380 >> 2] | 0) == 2) {
  $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 27834
  __ZN7LoRaMac15open_rx2_windowEv($2); //@line 27835
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 417; //@line 27838
   $6 = $ReallocAsyncCtx + 4 | 0; //@line 27839
   HEAP32[$6 >> 2] = $2; //@line 27840
   sp = STACKTOP; //@line 27841
   return;
  }
  ___async_unwind = 0; //@line 27844
  HEAP32[$ReallocAsyncCtx >> 2] = 417; //@line 27845
  $6 = $ReallocAsyncCtx + 4 | 0; //@line 27846
  HEAP32[$6 >> 2] = $2; //@line 27847
  sp = STACKTOP; //@line 27848
  return;
 } else {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 27852
  __ZN7LoRaPHY18put_radio_to_sleepEv($2 + 4 | 0); //@line 27853
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 418; //@line 27856
   $8 = $ReallocAsyncCtx2 + 4 | 0; //@line 27857
   HEAP32[$8 >> 2] = $2; //@line 27858
   sp = STACKTOP; //@line 27859
   return;
  }
  ___async_unwind = 0; //@line 27862
  HEAP32[$ReallocAsyncCtx2 >> 2] = 418; //@line 27863
  $8 = $ReallocAsyncCtx2 + 4 | 0; //@line 27864
  HEAP32[$8 >> 2] = $2; //@line 27865
  sp = STACKTOP; //@line 27866
  return;
 }
}
function _equeue_create_inplace($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$033 = 0, $$034 = 0, $20 = 0, $22 = 0, $26 = 0, $29 = 0, $5 = 0;
 HEAP32[$0 + 12 >> 2] = $2; //@line 3111
 HEAP32[$0 + 20 >> 2] = 0; //@line 3113
 $5 = $0 + 16 | 0; //@line 3114
 HEAP32[$5 >> 2] = 0; //@line 3115
 if ($1 | 0) {
  $$034 = $1; //@line 3118
  $22 = 0; //@line 3118
  do {
   $22 = $22 + 1 | 0; //@line 3120
   $$034 = $$034 >>> 1; //@line 3121
  } while (($$034 | 0) != 0);
  HEAP32[$5 >> 2] = $22; //@line 3129
 }
 HEAP32[$0 + 24 >> 2] = 0; //@line 3132
 HEAP32[$0 + 28 >> 2] = $1; //@line 3134
 HEAP32[$0 + 32 >> 2] = $2; //@line 3136
 HEAP32[$0 >> 2] = 0; //@line 3137
 HEAP32[$0 + 4 >> 2] = _equeue_tick() | 0; //@line 3140
 HEAP8[$0 + 9 >> 0] = 0; //@line 3142
 HEAP8[$0 + 8 >> 0] = 0; //@line 3144
 HEAP8[$0 + 36 >> 0] = 0; //@line 3146
 HEAP32[$0 + 40 >> 2] = 0; //@line 3148
 HEAP32[$0 + 44 >> 2] = 0; //@line 3150
 HEAP8[$0 + 184 >> 0] = 0; //@line 3152
 $20 = _equeue_sema_create($0 + 48 | 0) | 0; //@line 3154
 if (($20 | 0) < 0) {
  $$033 = $20; //@line 3157
  return $$033 | 0; //@line 3158
 }
 $26 = _equeue_mutex_create($0 + 128 | 0) | 0; //@line 3161
 if (($26 | 0) < 0) {
  $$033 = $26; //@line 3164
  return $$033 | 0; //@line 3165
 }
 $29 = _equeue_mutex_create($0 + 156 | 0) | 0; //@line 3168
 $$033 = ($29 | 0) < 0 ? $29 : 0; //@line 3171
 return $$033 | 0; //@line 3172
}
function _fmt_u($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $26 = 0, $8 = 0, $9 = 0, $8$looptemp = 0;
 if ($1 >>> 0 > 0 | ($1 | 0) == 0 & $0 >>> 0 > 4294967295) {
  $$0914 = $2; //@line 14148
  $8 = $0; //@line 14148
  $9 = $1; //@line 14148
  while (1) {
   $10 = ___uremdi3($8 | 0, $9 | 0, 10, 0) | 0; //@line 14150
   $$0914 = $$0914 + -1 | 0; //@line 14154
   HEAP8[$$0914 >> 0] = $10 & 255 | 48; //@line 14155
   $8$looptemp = $8;
   $8 = ___udivdi3($8 | 0, $9 | 0, 10, 0) | 0; //@line 14156
   if (!($9 >>> 0 > 9 | ($9 | 0) == 9 & $8$looptemp >>> 0 > 4294967295)) {
    break;
   } else {
    $9 = tempRet0; //@line 14164
   }
  }
  $$010$lcssa$off0 = $8; //@line 14169
  $$09$lcssa = $$0914; //@line 14169
 } else {
  $$010$lcssa$off0 = $0; //@line 14171
  $$09$lcssa = $2; //@line 14171
 }
 if (!$$010$lcssa$off0) {
  $$1$lcssa = $$09$lcssa; //@line 14175
 } else {
  $$012 = $$010$lcssa$off0; //@line 14177
  $$111 = $$09$lcssa; //@line 14177
  while (1) {
   $26 = $$111 + -1 | 0; //@line 14182
   HEAP8[$26 >> 0] = ($$012 >>> 0) % 10 | 0 | 48; //@line 14183
   if ($$012 >>> 0 < 10) {
    $$1$lcssa = $26; //@line 14187
    break;
   } else {
    $$012 = ($$012 >>> 0) / 10 | 0; //@line 14190
    $$111 = $26; //@line 14190
   }
  }
 }
 return $$1$lcssa | 0; //@line 14194
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_17($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 22010
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22012
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22014
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22016
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22018
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22020
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22024
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 22026
 $17 = $14 + 12 | 0; //@line 22028
 HEAP32[$17 >> 2] = HEAP32[HEAP32[$0 + 24 >> 2] >> 2]; //@line 22029
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(28) | 0; //@line 22030
 $18 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($16, $14, 7) | 0; //@line 22031
 if (!___async) {
  HEAP32[___async_retval >> 2] = $18; //@line 22035
  ___async_unwind = 0; //@line 22036
 }
 HEAP32[$ReallocAsyncCtx8 >> 2] = 260; //@line 22038
 HEAP32[$ReallocAsyncCtx8 + 4 >> 2] = $2; //@line 22040
 HEAP32[$ReallocAsyncCtx8 + 8 >> 2] = $4; //@line 22042
 HEAP32[$ReallocAsyncCtx8 + 12 >> 2] = $6; //@line 22044
 HEAP32[$ReallocAsyncCtx8 + 16 >> 2] = $8; //@line 22046
 HEAP32[$ReallocAsyncCtx8 + 20 >> 2] = $10; //@line 22048
 HEAP32[$ReallocAsyncCtx8 + 24 >> 2] = $17; //@line 22050
 sp = STACKTOP; //@line 22051
 return;
}
function __ZN12LoRaWANStack23process_connected_stateEv__async_cb_198($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 33454
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33458
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33460
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33462
 if (HEAP32[$0 + 4 >> 2] | 0) {
  HEAP32[$6 >> 2] = HEAP32[$6 >> 2] | 4; //@line 33467
  HEAP32[$8 + 2496 >> 2] = 2; //@line 33469
  return;
 }
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 33472
 _mbed_assert_internal(12104, 12113, 775); //@line 33473
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 336; //@line 33476
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 33477
  HEAP32[$10 >> 2] = $4; //@line 33478
  $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 33479
  HEAP32[$11 >> 2] = $6; //@line 33480
  $12 = $ReallocAsyncCtx4 + 12 | 0; //@line 33481
  HEAP32[$12 >> 2] = $8; //@line 33482
  sp = STACKTOP; //@line 33483
  return;
 }
 ___async_unwind = 0; //@line 33486
 HEAP32[$ReallocAsyncCtx4 >> 2] = 336; //@line 33487
 $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 33488
 HEAP32[$10 >> 2] = $4; //@line 33489
 $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 33490
 HEAP32[$11 >> 2] = $6; //@line 33491
 $12 = $ReallocAsyncCtx4 + 12 | 0; //@line 33492
 HEAP32[$12 >> 2] = $8; //@line 33493
 sp = STACKTOP; //@line 33494
 return;
}
function _mbedtls_cipher_free__async_cb_41($0) {
 $0 = $0 | 0;
 var $13 = 0, $14 = 0, $4 = 0, $7 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 23979
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23983
 _free(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0); //@line 23985
 $7 = HEAP32[$4 + 60 >> 2] | 0; //@line 23987
 if (!$7) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 23990
  _mbedtls_platform_zeroize($4, 68); //@line 23991
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 579; //@line 23994
   sp = STACKTOP; //@line 23995
   return;
  }
  ___async_unwind = 0; //@line 23998
  HEAP32[$ReallocAsyncCtx2 >> 2] = 579; //@line 23999
  sp = STACKTOP; //@line 24000
  return;
 } else {
  $13 = HEAP32[(HEAP32[(HEAP32[$4 >> 2] | 0) + 28 >> 2] | 0) + 28 >> 2] | 0; //@line 24007
  $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 24008
  FUNCTION_TABLE_vi[$13 & 1023]($7); //@line 24009
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 578; //@line 24012
   $14 = $ReallocAsyncCtx + 4 | 0; //@line 24013
   HEAP32[$14 >> 2] = $4; //@line 24014
   sp = STACKTOP; //@line 24015
   return;
  }
  ___async_unwind = 0; //@line 24018
  HEAP32[$ReallocAsyncCtx >> 2] = 578; //@line 24019
  $14 = $ReallocAsyncCtx + 4 | 0; //@line 24020
  HEAP32[$14 >> 2] = $4; //@line 24021
  sp = STACKTOP; //@line 24022
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_115($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 27642
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27644
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27646
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27648
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27650
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27652
 $13 = $6 + 12 | 0; //@line 27656
 HEAP32[$13 >> 2] = HEAP32[HEAP32[$0 + 24 >> 2] >> 2]; //@line 27657
 $14 = $6 + 16 | 0; //@line 27658
 HEAP32[$14 >> 2] = $8; //@line 27659
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 27660
 $15 = _equeue_alloc($10, 20) | 0; //@line 27661
 if (!___async) {
  HEAP32[___async_retval >> 2] = $15; //@line 27665
  ___async_unwind = 0; //@line 27666
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 269; //@line 27668
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $2; //@line 27670
 HEAP32[$ReallocAsyncCtx7 + 8 >> 2] = $13; //@line 27672
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $4; //@line 27674
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $6; //@line 27676
 HEAP32[$ReallocAsyncCtx7 + 20 >> 2] = $13; //@line 27678
 HEAP32[$ReallocAsyncCtx7 + 24 >> 2] = $14; //@line 27680
 HEAP32[$ReallocAsyncCtx7 + 28 >> 2] = $10; //@line 27682
 sp = STACKTOP; //@line 27683
 return;
}
function __ZN7LoRaPHY21compute_rx_win_paramsEahjP18rx_config_params_t($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$ = 0, $$$i = 0, $$0 = 0.0, $10 = 0, $13 = 0, $16 = 0, $23 = 0, $28 = 0, $41 = 0, $5 = 0, $51 = 0, $7 = 0, $8 = 0;
 $5 = $1 << 24 >> 24; //@line 20519
 $7 = HEAP8[$0 + 29 >> 0] | 0; //@line 20521
 $8 = $7 & 255; //@line 20522
 $$ = ($5 | 0) < ($8 | 0) ? $5 : $8; //@line 20524
 $10 = $$ & 255; //@line 20525
 HEAP8[$4 + 1 >> 0] = $10; //@line 20527
 $13 = HEAP32[$0 + 80 >> 2] | 0; //@line 20529
 $16 = HEAP32[$13 + (($$ & 255) << 2) >> 2] | 0; //@line 20532
 HEAP8[$4 + 2 >> 0] = ($16 | 0) == 5e5 ? 2 : ($16 | 0) == 25e4 & 1; //@line 20538
 $23 = HEAP32[$0 + 88 >> 2] | 0; //@line 20545
 if (HEAP8[$0 + 14 >> 0] | 0 ? $7 << 24 >> 24 == $10 << 24 >> 24 : 0) {
  $$0 = 8.0 / +(HEAPU8[$23 + $8 >> 0] | 0); //@line 20551
 } else {
  $28 = $$ & 255; //@line 20553
  $$0 = +(1 << HEAPU8[$23 + $28 >> 0] | 0) / +((HEAP32[$13 + ($28 << 2) >> 2] | 0) >>> 0) * 1.0e3; //@line 20564
 }
 $41 = $2 & 255; //@line 20568
 $51 = ~~+Math_ceil(+(($$0 * +(($41 << 1) + -8 | 0) + +($3 << 1 >>> 0)) / $$0)) >>> 0; //@line 20578
 $$$i = $51 >>> 0 > $41 >>> 0 ? $51 : $41; //@line 20580
 HEAP32[$4 + 8 >> 2] = $$$i; //@line 20581
 HEAP32[$4 + 12 >> 2] = ~~+Math_ceil(+($$0 * 4.0 - $$0 * +($$$i >>> 0) * .5 + -1.0)); //@line 20590
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_38($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 23896
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23898
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23902
 $8 = $0 + 16 | 0; //@line 23904
 $10 = HEAP32[$8 >> 2] | 0; //@line 23906
 $13 = HEAP32[$8 + 4 >> 2] | 0; //@line 23909
 $15 = HEAP32[$0 + 24 >> 2] | 0; //@line 23911
 $17 = HEAP32[$0 + 28 >> 2] | 0; //@line 23913
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 >> 2]; //@line 23915
 __ZN4mbed6Ticker5setupEy($6, $10, $13); //@line 23916
 $18 = HEAP32[$2 >> 2] | 0; //@line 23917
 if (!$18) {
  __ZN16SX1276_LoRaRadio18set_low_power_modeEv($15); //@line 23920
  return;
 }
 $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 23924
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 23925
 FUNCTION_TABLE_vi[$21 & 1023]($17); //@line 23926
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 58; //@line 23929
  $22 = $ReallocAsyncCtx6 + 4 | 0; //@line 23930
  HEAP32[$22 >> 2] = $15; //@line 23931
  sp = STACKTOP; //@line 23932
  return;
 }
 ___async_unwind = 0; //@line 23935
 HEAP32[$ReallocAsyncCtx6 >> 2] = 58; //@line 23936
 $22 = $ReallocAsyncCtx6 + 4 | 0; //@line 23937
 HEAP32[$22 >> 2] = $15; //@line 23938
 sp = STACKTOP; //@line 23939
 return;
}
function __ZN6events5EventIFvvEE10event_postIPS1_EEiPNS2_5eventE($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 7830
 $1 = $0 + 4 | 0; //@line 7831
 $2 = HEAP32[$1 >> 2] | 0; //@line 7832
 $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7833
 $3 = _equeue_alloc($2, 4) | 0; //@line 7834
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 685; //@line 7837
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 7839
  HEAP32[$AsyncCtx3 + 8 >> 2] = $1; //@line 7841
  sp = STACKTOP; //@line 7842
  return 0; //@line 7843
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 7845
 if (!$3) {
  $$0 = 0; //@line 7848
  return $$0 | 0; //@line 7849
 }
 HEAP32[$3 >> 2] = HEAP32[$0 + 28 >> 2]; //@line 7853
 _equeue_event_delay($3, HEAP32[$0 + 12 >> 2] | 0); //@line 7856
 _equeue_event_period($3, HEAP32[$0 + 16 >> 2] | 0); //@line 7859
 _equeue_event_dtor($3, 686); //@line 7860
 $13 = HEAP32[$1 >> 2] | 0; //@line 7861
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7862
 $14 = _equeue_post($13, 687, $3) | 0; //@line 7863
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 688; //@line 7866
  sp = STACKTOP; //@line 7867
  return 0; //@line 7868
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 7870
 $$0 = $14; //@line 7871
 return $$0 | 0; //@line 7872
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_138($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 29053
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29057
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29059
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 29061
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29063
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29065
 $13 = $6 + 12 | 0; //@line 29067
 HEAP32[$13 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 29068
 $14 = $6 + 16 | 0; //@line 29069
 HEAP8[$14 >> 0] = $8; //@line 29070
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 29071
 $15 = _equeue_alloc($12, 20) | 0; //@line 29072
 if (!___async) {
  HEAP32[___async_retval >> 2] = $15; //@line 29076
  ___async_unwind = 0; //@line 29077
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 223; //@line 29079
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $4; //@line 29081
 HEAP32[$ReallocAsyncCtx7 + 8 >> 2] = $10; //@line 29083
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $13; //@line 29085
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $6; //@line 29087
 HEAP32[$ReallocAsyncCtx7 + 20 >> 2] = $13; //@line 29089
 HEAP32[$ReallocAsyncCtx7 + 24 >> 2] = $14; //@line 29091
 HEAP32[$ReallocAsyncCtx7 + 28 >> 2] = $12; //@line 29093
 sp = STACKTOP; //@line 29094
 return;
}
function __ZN7LoRaMac15open_rx1_windowEv__async_cb_360($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 24948
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24950
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24952
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24954
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24956
 HEAP8[$2 + 2026 >> 0] = HEAP8[$2 + 1941 >> 0] | 0; //@line 24960
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 24961
 __ZN7LoRaPHY9rx_configEP18rx_config_params_t($4, $6) | 0; //@line 24962
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 438; //@line 24965
  $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 24966
  HEAP32[$12 >> 2] = $8; //@line 24967
  $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 24968
  HEAP32[$13 >> 2] = $2; //@line 24969
  $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 24970
  HEAP32[$14 >> 2] = $4; //@line 24971
  sp = STACKTOP; //@line 24972
  return;
 }
 ___async_unwind = 0; //@line 24975
 HEAP32[$ReallocAsyncCtx3 >> 2] = 438; //@line 24976
 $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 24977
 HEAP32[$12 >> 2] = $8; //@line 24978
 $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 24979
 HEAP32[$13 >> 2] = $2; //@line 24980
 $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 24981
 HEAP32[$14 >> 2] = $4; //@line 24982
 sp = STACKTOP; //@line 24983
 return;
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_252($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx16 = 0, sp = 0;
 sp = STACKTOP; //@line 17158
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17164
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17166
 __ZN7LoRaMac17bind_radio_driverER9LoRaRadio(HEAP32[$0 + 8 >> 2] | 0, $6); //@line 17167
 $11 = HEAP32[(HEAP32[$6 >> 2] | 0) + 72 >> 2] | 0; //@line 17170
 $ReallocAsyncCtx16 = _emscripten_realloc_async_context(16) | 0; //@line 17171
 FUNCTION_TABLE_vi[$11 & 1023]($6); //@line 17172
 if (___async) {
  HEAP32[$ReallocAsyncCtx16 >> 2] = 200; //@line 17175
  $12 = $ReallocAsyncCtx16 + 4 | 0; //@line 17176
  HEAP32[$12 >> 2] = $6; //@line 17177
  $13 = $ReallocAsyncCtx16 + 8 | 0; //@line 17178
  HEAP32[$13 >> 2] = $8; //@line 17179
  $14 = $ReallocAsyncCtx16 + 12 | 0; //@line 17180
  HEAP32[$14 >> 2] = $6; //@line 17181
  sp = STACKTOP; //@line 17182
  return;
 }
 ___async_unwind = 0; //@line 17185
 HEAP32[$ReallocAsyncCtx16 >> 2] = 200; //@line 17186
 $12 = $ReallocAsyncCtx16 + 4 | 0; //@line 17187
 HEAP32[$12 >> 2] = $6; //@line 17188
 $13 = $ReallocAsyncCtx16 + 8 | 0; //@line 17189
 HEAP32[$13 >> 2] = $8; //@line 17190
 $14 = $ReallocAsyncCtx16 + 12 | 0; //@line 17191
 HEAP32[$14 >> 2] = $6; //@line 17192
 sp = STACKTOP; //@line 17193
 return;
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_189($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 32876
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32878
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32880
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32882
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32884
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32886
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 32888
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 32890
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 32892
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(36) | 0; //@line 32893
 __ZN7LoRaPHY18put_radio_to_sleepEv($2); //@line 32894
 if (!___async) {
  ___async_unwind = 0; //@line 32897
 }
 HEAP32[$ReallocAsyncCtx12 >> 2] = 461; //@line 32899
 HEAP32[$ReallocAsyncCtx12 + 4 >> 2] = $4; //@line 32901
 HEAP32[$ReallocAsyncCtx12 + 8 >> 2] = $6; //@line 32903
 HEAP32[$ReallocAsyncCtx12 + 12 >> 2] = $8; //@line 32905
 HEAP32[$ReallocAsyncCtx12 + 16 >> 2] = $2; //@line 32907
 HEAP32[$ReallocAsyncCtx12 + 20 >> 2] = $10; //@line 32909
 HEAP32[$ReallocAsyncCtx12 + 24 >> 2] = $12; //@line 32911
 HEAP32[$ReallocAsyncCtx12 + 28 >> 2] = $14; //@line 32913
 HEAP32[$ReallocAsyncCtx12 + 32 >> 2] = $16; //@line 32915
 sp = STACKTOP; //@line 32916
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 33601
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 33603
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33607
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33609
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 33611
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 33613
 if (!(HEAP8[$2 >> 0] | 0)) {
  $13 = (HEAP32[$0 + 8 >> 2] | 0) + 8 | 0; //@line 33617
  if ($13 >>> 0 < $6 >>> 0) {
   $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 33620
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($13, $8, $10, $12); //@line 33621
   if (!___async) {
    ___async_unwind = 0; //@line 33624
   }
   HEAP32[$ReallocAsyncCtx >> 2] = 742; //@line 33626
   HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 33628
   HEAP32[$ReallocAsyncCtx + 8 >> 2] = $13; //@line 33630
   HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 33632
   HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 33634
   HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 33636
   HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 33638
   sp = STACKTOP; //@line 33639
   return;
  }
 }
 return;
}
function _strlen($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$015$lcssa = 0, $$01519 = 0, $$1$lcssa = 0, $$pn = 0, $$sink = 0, $1 = 0, $10 = 0, $19 = 0, $23 = 0, $6 = 0, label = 0;
 $1 = $0; //@line 11650
 L1 : do {
  if (!($1 & 3)) {
   $$015$lcssa = $0; //@line 11655
   label = 4; //@line 11656
  } else {
   $$01519 = $0; //@line 11658
   $23 = $1; //@line 11658
   while (1) {
    if (!(HEAP8[$$01519 >> 0] | 0)) {
     $$sink = $23; //@line 11663
     break L1;
    }
    $6 = $$01519 + 1 | 0; //@line 11666
    $23 = $6; //@line 11667
    if (!($23 & 3)) {
     $$015$lcssa = $6; //@line 11671
     label = 4; //@line 11672
     break;
    } else {
     $$01519 = $6; //@line 11675
    }
   }
  }
 } while (0);
 if ((label | 0) == 4) {
  $$0 = $$015$lcssa; //@line 11681
  while (1) {
   $10 = HEAP32[$$0 >> 2] | 0; //@line 11683
   if (!(($10 & -2139062144 ^ -2139062144) & $10 + -16843009)) {
    $$0 = $$0 + 4 | 0; //@line 11691
   } else {
    break;
   }
  }
  if (!(($10 & 255) << 24 >> 24)) {
   $$1$lcssa = $$0; //@line 11699
  } else {
   $$pn = $$0; //@line 11701
   while (1) {
    $19 = $$pn + 1 | 0; //@line 11703
    if (!(HEAP8[$19 >> 0] | 0)) {
     $$1$lcssa = $19; //@line 11707
     break;
    } else {
     $$pn = $19; //@line 11710
    }
   }
  }
  $$sink = $$1$lcssa; //@line 11715
 }
 return $$sink - $1 | 0; //@line 11718
}
function __ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $2 = 0, $4 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2306
 $2 = $0; //@line 2307
 L1 : do {
  switch ($1 | 0) {
  case 1:
   {
    $4 = HEAP32[$2 + 52 >> 2] | 0; //@line 2312
    if ($4 | 0) {
     $7 = HEAP32[$4 >> 2] | 0; //@line 2316
     $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2317
     FUNCTION_TABLE_vi[$7 & 1023]($2 + 40 | 0); //@line 2318
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 105; //@line 2321
      sp = STACKTOP; //@line 2322
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 2325
      break L1;
     }
    }
    break;
   }
  case 2:
   {
    $9 = HEAP32[$2 + 68 >> 2] | 0; //@line 2333
    if ($9 | 0) {
     $12 = HEAP32[$9 >> 2] | 0; //@line 2337
     $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2338
     FUNCTION_TABLE_vi[$12 & 1023]($2 + 56 | 0); //@line 2339
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 106; //@line 2342
      sp = STACKTOP; //@line 2343
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx2 | 0); //@line 2346
      break L1;
     }
    }
    break;
   }
  default:
   {}
  }
 } while (0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $21 = 0, $22 = 0, $28 = 0, $30 = 0;
 HEAP8[$1 + 53 >> 0] = 1; //@line 16940
 do {
  if ((HEAP32[$1 + 4 >> 2] | 0) == ($3 | 0)) {
   HEAP8[$1 + 52 >> 0] = 1; //@line 16947
   $10 = $1 + 16 | 0; //@line 16948
   $11 = HEAP32[$10 >> 2] | 0; //@line 16949
   if (!$11) {
    HEAP32[$10 >> 2] = $2; //@line 16952
    HEAP32[$1 + 24 >> 2] = $4; //@line 16954
    HEAP32[$1 + 36 >> 2] = 1; //@line 16956
    if (!(($4 | 0) == 1 ? (HEAP32[$1 + 48 >> 2] | 0) == 1 : 0)) {
     break;
    }
    HEAP8[$1 + 54 >> 0] = 1; //@line 16966
    break;
   }
   if (($11 | 0) != ($2 | 0)) {
    $30 = $1 + 36 | 0; //@line 16971
    HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + 1; //@line 16974
    HEAP8[$1 + 54 >> 0] = 1; //@line 16976
    break;
   }
   $21 = $1 + 24 | 0; //@line 16979
   $22 = HEAP32[$21 >> 2] | 0; //@line 16980
   if (($22 | 0) == 2) {
    HEAP32[$21 >> 2] = $4; //@line 16983
    $28 = $4; //@line 16984
   } else {
    $28 = $22; //@line 16986
   }
   if (($28 | 0) == 1 ? (HEAP32[$1 + 48 >> 2] | 0) == 1 : 0) {
    HEAP8[$1 + 54 >> 0] = 1; //@line 16995
   }
  }
 } while (0);
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 8571
 $2 = HEAP32[$0 + 16 >> 2] | 0; //@line 8573
 $3 = $0 + 12 | 0; //@line 8574
 $4 = HEAP32[$3 >> 2] | 0; //@line 8575
 do {
  if (!$4) {
   $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 8579
   _mbed_assert_internal(15010, 15015, 1102); //@line 8580
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 277; //@line 8583
    HEAP32[$AsyncCtx2 + 4 >> 2] = $3; //@line 8585
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 8587
    HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 8589
    sp = STACKTOP; //@line 8590
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 8593
    $10 = HEAP32[$3 >> 2] | 0; //@line 8595
    break;
   }
  } else {
   $10 = $4; //@line 8599
  }
 } while (0);
 $9 = HEAP32[$10 >> 2] | 0; //@line 8602
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8603
 FUNCTION_TABLE_vii[$9 & 15]($0, $2); //@line 8604
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 278; //@line 8607
  sp = STACKTOP; //@line 8608
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 8611
  return;
 }
}
function __ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 7322
 $3 = (HEAP8[$0 + 16 >> 0] | 0) != 0; //@line 7325
 $4 = $0 + 12 | 0; //@line 7326
 $5 = HEAP32[$4 >> 2] | 0; //@line 7327
 do {
  if (!$5) {
   $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 7331
   _mbed_assert_internal(15010, 15015, 1102); //@line 7332
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 231; //@line 7335
    HEAP32[$AsyncCtx2 + 4 >> 2] = $4; //@line 7337
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 7339
    HEAP8[$AsyncCtx2 + 12 >> 0] = $3 & 1; //@line 7342
    sp = STACKTOP; //@line 7343
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7346
    $11 = HEAP32[$4 >> 2] | 0; //@line 7348
    break;
   }
  } else {
   $11 = $5; //@line 7352
  }
 } while (0);
 $10 = HEAP32[$11 >> 2] | 0; //@line 7355
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7356
 FUNCTION_TABLE_vii[$10 & 15]($0, $3); //@line 7357
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 232; //@line 7360
  sp = STACKTOP; //@line 7361
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7364
  return;
 }
}
function _mbedtls_cipher_cmac_finish__async_cb_277($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 17982
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17984
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17986
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17988
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17990
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17992
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17994
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 17996
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 17998
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 17999
 _mbedtls_platform_zeroize($2, 16); //@line 18000
 if (!___async) {
  ___async_unwind = 0; //@line 18003
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 606; //@line 18005
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $4; //@line 18007
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $6; //@line 18009
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $8; //@line 18011
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $10; //@line 18013
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $12; //@line 18015
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $14; //@line 18017
 HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $2; //@line 18019
 HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $16; //@line 18021
 sp = STACKTOP; //@line 18022
 return;
}
function __ZN7LoRaPHY11add_channelEPK16channel_params_th__async_cb($0) {
 $0 = $0 | 0;
 var $$026 = 0, $10 = 0, $12 = 0, $2 = 0, $22 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0;
 $2 = HEAP8[$0 + 4 >> 0] & 1; //@line 22364
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22366
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22368
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22370
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  $$026 = $2 ? -1006 : -1004; //@line 22376
  $27 = ___async_retval; //@line 22377
  HEAP32[$27 >> 2] = $$026; //@line 22378
  return;
 }
 if ($2) {
  $$026 = $2 ? -1005 : -1004; //@line 22383
  $27 = ___async_retval; //@line 22384
  HEAP32[$27 >> 2] = $$026; //@line 22385
  return;
 }
 $10 = $4 + 124 | 0; //@line 22388
 $12 = (HEAP32[$10 >> 2] | 0) + ($6 * 12 | 0) | 0; //@line 22390
 HEAP32[$12 >> 2] = HEAP32[$8 >> 2]; //@line 22391
 HEAP32[$12 + 4 >> 2] = HEAP32[$8 + 4 >> 2]; //@line 22391
 HEAP32[$12 + 8 >> 2] = HEAP32[$8 + 8 >> 2]; //@line 22391
 HEAP8[(HEAP32[$10 >> 2] | 0) + ($6 * 12 | 0) + 9 >> 0] = HEAP8[$8 + 9 >> 0] | 0; //@line 22396
 $22 = (HEAP32[$4 + 116 >> 2] | 0) + ($6 >>> 4 << 1) | 0; //@line 22402
 HEAP16[$22 >> 1] = 1 << ($6 & 15) | (HEAPU16[$22 >> 1] | 0); //@line 22407
 $$026 = 0; //@line 22408
 $27 = ___async_retval; //@line 22409
 HEAP32[$27 >> 2] = $$026; //@line 22410
 return;
}
function __ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $12 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 1006
 $6 = HEAP32[(HEAP32[$0 >> 2] | 0) + 32 >> 2] | 0; //@line 1009
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 1010
 FUNCTION_TABLE_vii[$6 & 15]($0, $1); //@line 1011
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 67; //@line 1014
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 1016
  HEAP16[$AsyncCtx + 8 >> 1] = $3; //@line 1018
  HEAP8[$AsyncCtx + 10 >> 0] = $2; //@line 1020
  sp = STACKTOP; //@line 1021
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 1024
 $12 = HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] | 0; //@line 1027
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1029
 FUNCTION_TABLE_viiiiiiiiiiiiii[$12 & 1]($0, 0, $2, 0, 0, 4800, 0, 5, 0, 0, 0, 0, 0, $3 & 65535); //@line 1030
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 68; //@line 1033
  HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 1035
  sp = STACKTOP; //@line 1036
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 1039
  HEAP8[$0 + 688 >> 0] = 2; //@line 1041
  __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 1042
  return;
 }
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_181($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 32330
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32332
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32334
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32336
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32338
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32340
 $12 = $4 + 12 | 0; //@line 32342
 HEAP32[$4 >> 2] = 471; //@line 32343
 HEAP32[$4 + 4 >> 2] = 0; //@line 32345
 HEAP32[$4 + 8 >> 2] = $2; //@line 32347
 HEAP32[$12 >> 2] = 860; //@line 32348
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 32349
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($6, $2 + 1856 | 0, $4); //@line 32350
 if (!___async) {
  ___async_unwind = 0; //@line 32353
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 472; //@line 32355
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $12; //@line 32357
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $6; //@line 32359
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $2; //@line 32361
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $8; //@line 32363
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $10; //@line 32365
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $4; //@line 32367
 sp = STACKTOP; //@line 32368
 return;
}
function _mbedtls_cipher_setup($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 2428
 if (($0 | 0) == 0 | ($1 | 0) == 0) {
  $$0 = -24832; //@line 2433
  return $$0 | 0; //@line 2434
 }
 dest = $0; //@line 2436
 stop = dest + 68 | 0; //@line 2436
 do {
  HEAP32[dest >> 2] = 0; //@line 2436
  dest = dest + 4 | 0; //@line 2436
 } while ((dest | 0) < (stop | 0));
 $7 = HEAP32[(HEAP32[$1 + 28 >> 2] | 0) + 24 >> 2] | 0; //@line 2440
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 2441
 $8 = FUNCTION_TABLE_i[$7 & 7]() | 0; //@line 2442
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 580; //@line 2445
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2447
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 2449
  sp = STACKTOP; //@line 2450
  return 0; //@line 2451
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2453
 HEAP32[$0 + 60 >> 2] = $8; //@line 2455
 if (!$8) {
  $$0 = -24960; //@line 2458
  return $$0 | 0; //@line 2459
 }
 HEAP32[$0 >> 2] = $1; //@line 2461
 if ((HEAP32[$1 + 4 >> 2] | 0) != 2) {
  $$0 = 0; //@line 2466
  return $$0 | 0; //@line 2467
 }
 HEAP32[$0 + 12 >> 2] = 5; //@line 2470
 HEAP32[$0 + 16 >> 2] = 18; //@line 2472
 $$0 = 0; //@line 2473
 return $$0 | 0; //@line 2474
}
function __ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 24920
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24924
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24926
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24928
 $9 = $4 + 12 | 0; //@line 24930
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 24931
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 24932
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 1) | 0; //@line 24933
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 350; //@line 24936
  $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 24937
  HEAP32[$11 >> 2] = $9; //@line 24938
  $12 = $ReallocAsyncCtx5 + 8 | 0; //@line 24939
  HEAP32[$12 >> 2] = $8; //@line 24940
  sp = STACKTOP; //@line 24941
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 24945
 ___async_unwind = 0; //@line 24946
 HEAP32[$ReallocAsyncCtx5 >> 2] = 350; //@line 24947
 $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 24948
 HEAP32[$11 >> 2] = $9; //@line 24949
 $12 = $ReallocAsyncCtx5 + 8 | 0; //@line 24950
 HEAP32[$12 >> 2] = $8; //@line 24951
 sp = STACKTOP; //@line 24952
 return;
}
function _puts($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $12 = 0, $17 = 0, $19 = 0, $22 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16434
 $1 = HEAP32[2604] | 0; //@line 16435
 if ((HEAP32[$1 + 76 >> 2] | 0) > -1) {
  $19 = ___lockfile($1) | 0; //@line 16441
 } else {
  $19 = 0; //@line 16443
 }
 do {
  if ((_fputs($0, $1) | 0) < 0) {
   $22 = -1; //@line 16449
  } else {
   if ((HEAP8[$1 + 75 >> 0] | 0) != 10) {
    $11 = $1 + 20 | 0; //@line 16455
    $12 = HEAP32[$11 >> 2] | 0; //@line 16456
    if ($12 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$11 >> 2] = $12 + 1; //@line 16462
     HEAP8[$12 >> 0] = 10; //@line 16463
     $22 = 0; //@line 16464
     break;
    }
   }
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 16468
   $17 = ___overflow($1, 10) | 0; //@line 16469
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 719; //@line 16472
    HEAP32[$AsyncCtx + 4 >> 2] = $19; //@line 16474
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 16476
    sp = STACKTOP; //@line 16477
    return 0; //@line 16478
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 16480
    $22 = $17 >> 31; //@line 16482
    break;
   }
  }
 } while (0);
 if ($19 | 0) {
  ___unlockfile($1); //@line 16489
 }
 return $22 | 0; //@line 16491
}
function __ZN4mbed11InterruptInD0Ev($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 2237
 HEAP32[$0 >> 2] = 604; //@line 2238
 _gpio_irq_free($0 + 28 | 0); //@line 2240
 $3 = HEAP32[$0 + 68 >> 2] | 0; //@line 2242
 do {
  if ($3 | 0) {
   $7 = HEAP32[$3 + 8 >> 2] | 0; //@line 2248
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2249
   FUNCTION_TABLE_vi[$7 & 1023]($0 + 56 | 0); //@line 2250
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 103; //@line 2253
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2255
    sp = STACKTOP; //@line 2256
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 2259
    break;
   }
  }
 } while (0);
 $10 = HEAP32[$0 + 52 >> 2] | 0; //@line 2265
 if (!$10) {
  __ZdlPv($0); //@line 2268
  return;
 }
 $14 = HEAP32[$10 + 8 >> 2] | 0; //@line 2273
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2274
 FUNCTION_TABLE_vi[$14 & 1023]($0 + 40 | 0); //@line 2275
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 104; //@line 2278
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 2280
  sp = STACKTOP; //@line 2281
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2284
 __ZdlPv($0); //@line 2285
 return;
}
function __ZN14LoRaMacCommand25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 31650
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31652
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31654
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31656
 $7 = $2 + 12 | 0; //@line 31657
 $8 = HEAP32[$7 >> 2] | 0; //@line 31658
 if (!$8) {
  HEAP32[$4 >> 2] = 0; //@line 31661
  return;
 }
 $11 = HEAP32[$8 + 4 >> 2] | 0; //@line 31665
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 31666
 FUNCTION_TABLE_vii[$11 & 15]($6, $2); //@line 31667
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 496; //@line 31670
  $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 31671
  HEAP32[$12 >> 2] = $7; //@line 31672
  $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 31673
  HEAP32[$13 >> 2] = $4; //@line 31674
  sp = STACKTOP; //@line 31675
  return;
 }
 ___async_unwind = 0; //@line 31678
 HEAP32[$ReallocAsyncCtx2 >> 2] = 496; //@line 31679
 $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 31680
 HEAP32[$12 >> 2] = $7; //@line 31681
 $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 31682
 HEAP32[$13 >> 2] = $4; //@line 31683
 sp = STACKTOP; //@line 31684
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_19($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 22175
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22179
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22181
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22183
 $9 = $4 + 12 | 0; //@line 22185
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 22186
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 22187
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 11) | 0; //@line 22188
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 264; //@line 22191
  $11 = $ReallocAsyncCtx7 + 4 | 0; //@line 22192
  HEAP32[$11 >> 2] = $9; //@line 22193
  $12 = $ReallocAsyncCtx7 + 8 | 0; //@line 22194
  HEAP32[$12 >> 2] = $8; //@line 22195
  sp = STACKTOP; //@line 22196
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 22200
 ___async_unwind = 0; //@line 22201
 HEAP32[$ReallocAsyncCtx7 >> 2] = 264; //@line 22202
 $11 = $ReallocAsyncCtx7 + 4 | 0; //@line 22203
 HEAP32[$11 >> 2] = $9; //@line 22204
 $12 = $ReallocAsyncCtx7 + 8 | 0; //@line 22205
 HEAP32[$12 >> 2] = $8; //@line 22206
 sp = STACKTOP; //@line 22207
 return;
}
function __ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_309($0) {
 $0 = $0 | 0;
 var $13 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 21410
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21412
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21414
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21416
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  HEAP8[$2 >> 0] = (HEAP8[$2 >> 0] | 0) + 1 << 24 >> 24; //@line 21423
  return;
 }
 __ZN14LoRaMacCommand20clear_command_bufferEv($4 + 476 | 0); //@line 21427
 HEAP8[$4 + 1177 >> 0] = 0; //@line 21429
 HEAP8[$4 + 2062 >> 0] = 0; //@line 21431
 HEAP8[$6 >> 0] = HEAP8[$2 >> 0] | 0; //@line 21433
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 21434
 $13 = __ZN7LoRaMac21handle_retransmissionEv($4) | 0; //@line 21435
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 444; //@line 21438
  $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 21439
  HEAP32[$14 >> 2] = $2; //@line 21440
  sp = STACKTOP; //@line 21441
  return;
 }
 HEAP32[___async_retval >> 2] = $13; //@line 21445
 ___async_unwind = 0; //@line 21446
 HEAP32[$ReallocAsyncCtx2 >> 2] = 444; //@line 21447
 $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 21448
 HEAP32[$14 >> 2] = $2; //@line 21449
 sp = STACKTOP; //@line 21450
 return;
}
function __ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 22444
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22448
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22450
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22452
 $9 = $4 + 12 | 0; //@line 22454
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 22455
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 22456
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 11) | 0; //@line 22457
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 321; //@line 22460
  $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 22461
  HEAP32[$11 >> 2] = $9; //@line 22462
  $12 = $ReallocAsyncCtx3 + 8 | 0; //@line 22463
  HEAP32[$12 >> 2] = $8; //@line 22464
  sp = STACKTOP; //@line 22465
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 22469
 ___async_unwind = 0; //@line 22470
 HEAP32[$ReallocAsyncCtx3 >> 2] = 321; //@line 22471
 $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 22472
 HEAP32[$11 >> 2] = $9; //@line 22473
 $12 = $ReallocAsyncCtx3 + 8 | 0; //@line 22474
 HEAP32[$12 >> 2] = $8; //@line 22475
 sp = STACKTOP; //@line 22476
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_331($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 23347
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23351
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23353
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23355
 $9 = $4 + 12 | 0; //@line 23357
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 23358
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 23359
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 5) | 0; //@line 23360
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 316; //@line 23363
  $11 = $ReallocAsyncCtx7 + 4 | 0; //@line 23364
  HEAP32[$11 >> 2] = $9; //@line 23365
  $12 = $ReallocAsyncCtx7 + 8 | 0; //@line 23366
  HEAP32[$12 >> 2] = $8; //@line 23367
  sp = STACKTOP; //@line 23368
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 23372
 ___async_unwind = 0; //@line 23373
 HEAP32[$ReallocAsyncCtx7 >> 2] = 316; //@line 23374
 $11 = $ReallocAsyncCtx7 + 4 | 0; //@line 23375
 HEAP32[$11 >> 2] = $9; //@line 23376
 $12 = $ReallocAsyncCtx7 + 8 | 0; //@line 23377
 HEAP32[$12 >> 2] = $8; //@line 23378
 sp = STACKTOP; //@line 23379
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 21942
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21946
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21948
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21950
 $9 = $4 + 12 | 0; //@line 21952
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 21953
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 21954
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 9) | 0; //@line 21955
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 256; //@line 21958
  $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 21959
  HEAP32[$11 >> 2] = $9; //@line 21960
  $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 21961
  HEAP32[$12 >> 2] = $8; //@line 21962
  sp = STACKTOP; //@line 21963
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 21967
 ___async_unwind = 0; //@line 21968
 HEAP32[$ReallocAsyncCtx9 >> 2] = 256; //@line 21969
 $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 21970
 HEAP32[$11 >> 2] = $9; //@line 21971
 $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 21972
 HEAP32[$12 >> 2] = $8; //@line 21973
 sp = STACKTOP; //@line 21974
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_49($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 24377
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24381
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24383
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24385
 $9 = $4 + 12 | 0; //@line 24387
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 24388
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 24389
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 4) | 0; //@line 24390
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 252; //@line 24393
  $11 = $ReallocAsyncCtx7 + 4 | 0; //@line 24394
  HEAP32[$11 >> 2] = $9; //@line 24395
  $12 = $ReallocAsyncCtx7 + 8 | 0; //@line 24396
  HEAP32[$12 >> 2] = $8; //@line 24397
  sp = STACKTOP; //@line 24398
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 24402
 ___async_unwind = 0; //@line 24403
 HEAP32[$ReallocAsyncCtx7 >> 2] = 252; //@line 24404
 $11 = $ReallocAsyncCtx7 + 4 | 0; //@line 24405
 HEAP32[$11 >> 2] = $9; //@line 24406
 $12 = $ReallocAsyncCtx7 + 8 | 0; //@line 24407
 HEAP32[$12 >> 2] = $8; //@line 24408
 sp = STACKTOP; //@line 24409
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_47($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 24310
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24314
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24316
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24318
 $9 = $4 + 12 | 0; //@line 24320
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 24321
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(12) | 0; //@line 24322
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 3) | 0; //@line 24323
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 248; //@line 24326
  $11 = $ReallocAsyncCtx8 + 4 | 0; //@line 24327
  HEAP32[$11 >> 2] = $9; //@line 24328
  $12 = $ReallocAsyncCtx8 + 8 | 0; //@line 24329
  HEAP32[$12 >> 2] = $8; //@line 24330
  sp = STACKTOP; //@line 24331
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 24335
 ___async_unwind = 0; //@line 24336
 HEAP32[$ReallocAsyncCtx8 >> 2] = 248; //@line 24337
 $11 = $ReallocAsyncCtx8 + 4 | 0; //@line 24338
 HEAP32[$11 >> 2] = $9; //@line 24339
 $12 = $ReallocAsyncCtx8 + 8 | 0; //@line 24340
 HEAP32[$12 >> 2] = $8; //@line 24341
 sp = STACKTOP; //@line 24342
 return;
}
function _mbed_vtracef__async_cb_164($0) {
 $0 = $0 | 0;
 var $$18 = 0, $10 = 0, $12 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 30998
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31000
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31002
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31004
 $10 = HEAP8[$0 + 20 >> 0] & 1; //@line 31009
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31011
 HEAP32[$2 >> 2] = HEAP32[___async_retval >> 2]; //@line 31016
 $16 = _snprintf($4, $6, 11988, $2) | 0; //@line 31017
 $$18 = ($16 | 0) >= ($6 | 0) ? 0 : $16; //@line 31019
 $19 = $4 + $$18 | 0; //@line 31021
 $20 = $6 - $$18 | 0; //@line 31022
 if (($$18 | 0) > 0) {
  if (!(($$18 | 0) < 1 | ($20 | 0) < 1 | $10 ^ 1)) {
   _snprintf($19, $20, 12066, $12) | 0; //@line 31030
  }
 }
 $23 = HEAP32[174] | 0; //@line 31033
 $24 = HEAP32[167] | 0; //@line 31034
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 31035
 FUNCTION_TABLE_vi[$23 & 1023]($24); //@line 31036
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 150; //@line 31039
  sp = STACKTOP; //@line 31040
  return;
 }
 ___async_unwind = 0; //@line 31043
 HEAP32[$ReallocAsyncCtx7 >> 2] = 150; //@line 31044
 sp = STACKTOP; //@line 31045
 return;
}
function __ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 24745
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24747
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24749
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24751
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24753
 HEAP32[$4 + 12 >> 2] = HEAP32[$2 >> 2]; //@line 24756
 _equeue_event_dtor($4, 283); //@line 24757
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 24758
 $10 = _equeue_post($6, 284, $4) | 0; //@line 24759
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 285; //@line 24762
  $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 24763
  HEAP32[$11 >> 2] = $2; //@line 24764
  $12 = $ReallocAsyncCtx3 + 8 | 0; //@line 24765
  HEAP32[$12 >> 2] = $8; //@line 24766
  sp = STACKTOP; //@line 24767
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 24771
 ___async_unwind = 0; //@line 24772
 HEAP32[$ReallocAsyncCtx3 >> 2] = 285; //@line 24773
 $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 24774
 HEAP32[$11 >> 2] = $2; //@line 24775
 $12 = $ReallocAsyncCtx3 + 8 | 0; //@line 24776
 HEAP32[$12 >> 2] = $8; //@line 24777
 sp = STACKTOP; //@line 24778
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 24243
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24247
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24249
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24251
 $9 = $4 + 12 | 0; //@line 24253
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 24254
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 24255
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 2) | 0; //@line 24256
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 244; //@line 24259
  $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 24260
  HEAP32[$11 >> 2] = $9; //@line 24261
  $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 24262
  HEAP32[$12 >> 2] = $8; //@line 24263
  sp = STACKTOP; //@line 24264
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 24268
 ___async_unwind = 0; //@line 24269
 HEAP32[$ReallocAsyncCtx9 >> 2] = 244; //@line 24270
 $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 24271
 HEAP32[$11 >> 2] = $9; //@line 24272
 $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 24273
 HEAP32[$12 >> 2] = $8; //@line 24274
 sp = STACKTOP; //@line 24275
 return;
}
function __ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $4 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10474
 STACKTOP = STACKTOP + 16 | 0; //@line 10475
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10475
 if (!$1) {
  $$0 = -1003; //@line 10479
 } else {
  _mbed_tracef(16, 12211, 12588, sp); //@line 10481
  HEAP32[$0 + 3168 >> 2] = $1; //@line 10483
  $4 = $0 + 2496 | 0; //@line 10484
  $6 = (HEAP32[$4 >> 2] | 0) == 0; //@line 10486
  HEAP32[$4 >> 2] = 2; //@line 10487
  if ($6) {
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 10489
   $7 = __ZN7LoRaMac10initializeEPN6events10EventQueueE($0, $1) | 0; //@line 10490
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 343; //@line 10493
    HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 10495
    sp = STACKTOP; //@line 10496
    STACKTOP = sp; //@line 10497
    return 0; //@line 10497
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 10499
   if (!$7) {
    HEAP32[$4 >> 2] = 2; //@line 10502
    $$0 = 0; //@line 10503
   } else {
    $$0 = $7; //@line 10505
   }
  } else {
   $$0 = 0; //@line 10508
  }
 }
 STACKTOP = sp; //@line 10511
 return $$0 | 0; //@line 10511
}
function __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$pre$phiZ2D = 0, $26 = 0;
 if ($2) {
  HEAP8[$1 + 11 >> 0] = HEAP8[$0 + 12 >> 0] | 0; //@line 22609
  HEAP32[$1 + 720 >> 2] = HEAPU16[$0 + 36 >> 1]; //@line 22614
  HEAP32[$1 + 724 >> 2] = HEAPU16[$0 + 38 >> 1]; //@line 22619
  HEAP32[$1 + 728 >> 2] = HEAPU16[$0 + 40 >> 1]; //@line 22624
  HEAP32[$1 + 732 >> 2] = HEAPU16[$0 + 42 >> 1]; //@line 22629
  HEAP32[$1 + 736 >> 2] = HEAPU16[$0 + 44 >> 1]; //@line 22634
  $26 = $0 + 128 | 0; //@line 22635
  HEAP8[$1 + 753 >> 0] = (HEAPU8[$26 >> 0] | 0) >>> 1 & 1; //@line 22640
  $$pre$phiZ2D = $26; //@line 22641
 } else {
  $$pre$phiZ2D = $0 + 128 | 0; //@line 22644
 }
 HEAP8[$1 + 708 >> 0] = HEAP8[$0 + 23 >> 0] | 0; //@line 22649
 HEAP8[$1 + 709 >> 0] = HEAP8[$0 + 30 >> 0] | 0; //@line 22653
 HEAP8[$1 + 741 >> 0] = HEAP8[$0 + 34 >> 0] | 0; //@line 22657
 HEAP32[$1 + 744 >> 2] = HEAP32[$0 + 68 >> 2]; //@line 22661
 HEAP8[$1 + 748 >> 0] = HEAP8[$0 + 64 >> 0] | 0; //@line 22665
 HEAP8[$1 + 752 >> 0] = HEAP8[$$pre$phiZ2D >> 0] & 1; //@line 22669
 HEAP32[$1 + 756 >> 2] = HEAP32[$0 + 56 >> 2]; //@line 22673
 HEAP32[$1 + 760 >> 2] = HEAP32[$0 + 60 >> 2]; //@line 22677
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_374($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 26003
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26007
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26009
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26011
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = HEAP32[___async_retval >> 2]; //@line 26014
 $10 = HEAP32[$4 >> 2] | 0; //@line 26015
 $13 = HEAP32[(HEAP32[$10 >> 2] | 0) + 76 >> 2] | 0; //@line 26018
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 26019
 FUNCTION_TABLE_vi[$13 & 1023]($10); //@line 26020
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 533; //@line 26023
  $14 = $ReallocAsyncCtx7 + 4 | 0; //@line 26024
  HEAP32[$14 >> 2] = $6; //@line 26025
  $15 = $ReallocAsyncCtx7 + 8 | 0; //@line 26026
  HEAP32[$15 >> 2] = $8; //@line 26027
  sp = STACKTOP; //@line 26028
  return;
 }
 ___async_unwind = 0; //@line 26031
 HEAP32[$ReallocAsyncCtx7 >> 2] = 533; //@line 26032
 $14 = $ReallocAsyncCtx7 + 4 | 0; //@line 26033
 HEAP32[$14 >> 2] = $6; //@line 26034
 $15 = $ReallocAsyncCtx7 + 8 | 0; //@line 26035
 HEAP32[$15 >> 2] = $8; //@line 26036
 sp = STACKTOP; //@line 26037
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_201($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 33649
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33655
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33657
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 33659
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 33661
 if ((HEAP32[$0 + 4 >> 2] | 0) <= 1) {
  return;
 }
 $14 = (HEAP32[$0 + 8 >> 2] | 0) + 24 | 0; //@line 33666
 $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 33668
 __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($14, $6, $8, $10); //@line 33669
 if (!___async) {
  ___async_unwind = 0; //@line 33672
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 742; //@line 33674
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $6 + 54; //@line 33676
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $14; //@line 33678
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $12; //@line 33680
 HEAP32[$ReallocAsyncCtx + 16 >> 2] = $6; //@line 33682
 HEAP32[$ReallocAsyncCtx + 20 >> 2] = $8; //@line 33684
 HEAP32[$ReallocAsyncCtx + 24 >> 2] = $10; //@line 33686
 sp = STACKTOP; //@line 33687
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_372($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $17 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 25906
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25908
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25912
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25914
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25916
 $11 = HEAP32[$2 >> 2] | 0; //@line 25917
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 44 >> 2] | 0; //@line 25920
 $15 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 25921
 $17 = HEAP16[$15 >> 1] & 255; //@line 25923
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 25924
 FUNCTION_TABLE_viii[$14 & 7]($11, 1, $17); //@line 25925
 if (!___async) {
  ___async_unwind = 0; //@line 25928
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 531; //@line 25930
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 25932
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $15; //@line 25934
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = 1; //@line 25936
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $6; //@line 25938
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $8; //@line 25940
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $10; //@line 25942
 sp = STACKTOP; //@line 25943
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_371($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $17 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 25862
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25864
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25868
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25870
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25872
 $11 = HEAP32[$2 >> 2] | 0; //@line 25873
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 44 >> 2] | 0; //@line 25876
 $15 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 25877
 $17 = HEAP16[$15 >> 1] & 255; //@line 25879
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 25880
 FUNCTION_TABLE_viii[$14 & 7]($11, 0, $17); //@line 25881
 if (!___async) {
  ___async_unwind = 0; //@line 25884
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 531; //@line 25886
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 25888
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $15; //@line 25890
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = 0; //@line 25892
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $6; //@line 25894
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $8; //@line 25896
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $10; //@line 25898
 sp = STACKTOP; //@line 25899
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_406($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 28993
 $2 = HEAP8[$0 + 4 >> 0] | 0; //@line 28995
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28997
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28999
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29001
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29003
 $12 = (HEAP8[___async_retval >> 0] | 0) == 0; //@line 29006
 $13 = HEAP32[$6 >> 2] | 0; //@line 29007
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 76 >> 2] | 0; //@line 29010
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(28) | 0; //@line 29011
 FUNCTION_TABLE_vi[$16 & 1023]($13); //@line 29012
 if (!___async) {
  ___async_unwind = 0; //@line 29015
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 520; //@line 29017
 HEAP8[$ReallocAsyncCtx3 + 4 >> 0] = $2; //@line 29019
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 29021
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 29023
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 29025
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 29027
 HEAP8[$ReallocAsyncCtx3 + 24 >> 0] = $12 & 1; //@line 29030
 sp = STACKTOP; //@line 29031
 return;
}
function __ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$ = 0, $$1 = 0, $12 = 0, $21 = 0, $3 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 21200
 $3 = HEAP32[$0 + 4 >> 2] | 0; //@line 21202
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 64 >> 2] | 0; //@line 21205
 $8 = HEAP32[$1 + 4 >> 2] | 0; //@line 21207
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 21208
 $9 = FUNCTION_TABLE_iii[$6 & 31]($3, $8) | 0; //@line 21209
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 534; //@line 21212
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 21214
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 21216
  sp = STACKTOP; //@line 21217
  return 0; //@line 21218
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 21220
  $$ = $9 ? 7 : 6; //@line 21221
  $12 = HEAP8[$1 >> 0] | 0; //@line 21222
  $$1 = ($12 << 24 >> 24 >= (HEAP8[$0 + 28 >> 0] | 0) ? $12 << 24 >> 24 <= (HEAP8[$0 + 29 >> 0] | 0) : 0) ? $$ : $$ & 5; //@line 21231
  $21 = HEAP8[$1 + 1 >> 0] | 0; //@line 21233
  return (($21 << 24 >> 24 >= (HEAP8[$0 + 32 >> 0] | 0) ? $21 << 24 >> 24 <= (HEAP8[$0 + 33 >> 0] | 0) : 0) ? $$1 : $$1 & 3) | 0; //@line 21243
 }
 return 0; //@line 21245
}
function __ZN7LoRaPHY26get_next_lower_tx_datarateEa($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1$i = 0, $$1$lcssa$i = 0, $$18$i = 0, $$19$i = 0, $10 = 0, $18 = 0, $19 = 0, $21 = 0, $8 = 0, $9 = 0, label = 0;
 $8 = $0 + 88 | 0; //@line 22694
 $9 = $1 & 255; //@line 22695
 $10 = HEAP8[((HEAP8[$0 + 128 >> 0] & 1) == 0 ? $0 + 26 | 0 : $0 + 35 | 0) >> 0] | 0; //@line 22696
 $$18$i = ($9 | 0) == ($10 | 0) ? $1 : $9 + 255 & 255; //@line 22700
 if (($$18$i & 255 | 0) == ($10 | 0)) {
  $$1$lcssa$i = $$18$i; //@line 22704
  return $$1$lcssa$i | 0; //@line 22705
 }
 $18 = HEAPU8[$0 + 92 >> 0] | 0; //@line 22709
 $$19$i = $$18$i; //@line 22710
 while (1) {
  $19 = $$19$i << 24 >> 24; //@line 22712
  if (($19 | 0) < ($18 | 0)) {
   if (HEAP8[(HEAP32[$8 >> 2] | 0) + $19 >> 0] | 0) {
    $$1$lcssa$i = $$19$i; //@line 22720
    label = 6; //@line 22721
    break;
   }
  }
  $21 = $$19$i & 255; //@line 22725
  $$1$i = ($21 | 0) == ($10 | 0) ? $$19$i : $21 + 255 & 255; //@line 22729
  if (($$1$i & 255 | 0) == ($10 | 0)) {
   $$1$lcssa$i = $$1$i; //@line 22733
   label = 6; //@line 22734
   break;
  } else {
   $$19$i = $$1$i; //@line 22737
  }
 }
 if ((label | 0) == 6) {
  return $$1$lcssa$i | 0; //@line 22741
 }
 return 0; //@line 22743
}
function __ZN4mbed5TimerC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2725
 HEAP32[$0 >> 2] = 0; //@line 2726
 $1 = $0 + 8 | 0; //@line 2727
 $2 = $0 + 16 | 0; //@line 2728
 HEAP32[$1 >> 2] = 0; //@line 2729
 HEAP32[$1 + 4 >> 2] = 0; //@line 2729
 HEAP32[$1 + 8 >> 2] = 0; //@line 2729
 HEAP32[$1 + 12 >> 2] = 0; //@line 2729
 $4 = $0 + 24 | 0; //@line 2731
 HEAP32[$4 >> 2] = _get_us_ticker_data() | 0; //@line 2732
 HEAP8[$0 + 28 >> 0] = 1; //@line 2734
 $6 = HEAP32[$4 >> 2] | 0; //@line 2735
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 2736
 $7 = _ticker_read_us($6) | 0; //@line 2737
 $8 = tempRet0; //@line 2738
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 120; //@line 2741
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 2743
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 2745
  sp = STACKTOP; //@line 2746
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2749
  $11 = $1; //@line 2750
  HEAP32[$11 >> 2] = $7; //@line 2752
  HEAP32[$11 + 4 >> 2] = $8; //@line 2755
  $15 = $2; //@line 2756
  HEAP32[$15 >> 2] = 0; //@line 2758
  HEAP32[$15 + 4 >> 2] = 0; //@line 2761
  return;
 }
}
function __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_206($0) {
 $0 = $0 | 0;
 var $$pre$i$i4 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 3
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11
 $$pre$i$i4 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 12
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = $$pre$i$i4; //@line 13
 if (!$$pre$i$i4) {
  _gpio_irq_set($8 + 28 | 0, 2, 0); //@line 17
  return;
 }
 $12 = HEAP32[$$pre$i$i4 + 8 >> 2] | 0; //@line 22
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 23
 FUNCTION_TABLE_vi[$12 & 1023]($6); //@line 24
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 111; //@line 27
  $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 28
  HEAP32[$13 >> 2] = $6; //@line 29
  $14 = $ReallocAsyncCtx5 + 8 | 0; //@line 30
  HEAP32[$14 >> 2] = $8; //@line 31
  sp = STACKTOP; //@line 32
  return;
 }
 ___async_unwind = 0; //@line 35
 HEAP32[$ReallocAsyncCtx5 >> 2] = 111; //@line 36
 $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 37
 HEAP32[$13 >> 2] = $6; //@line 38
 $14 = $ReallocAsyncCtx5 + 8 | 0; //@line 39
 HEAP32[$14 >> 2] = $8; //@line 40
 sp = STACKTOP; //@line 41
 return;
}
function __ZL25default_terminate_handlerv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 30184
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30186
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30188
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30190
 $8 = HEAP32[$0 + 20 >> 2] | 0; //@line 30192
 $10 = HEAP32[$0 + 24 >> 2] | 0; //@line 30194
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  HEAP32[$4 >> 2] = 18535; //@line 30199
  HEAP32[$4 + 4 >> 2] = $6; //@line 30201
  _abort_message(18444, $4); //@line 30202
 }
 $12 = HEAP32[$2 >> 2] | 0; //@line 30205
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 8 >> 2] | 0; //@line 30208
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 30209
 $16 = FUNCTION_TABLE_ii[$15 & 15]($12) | 0; //@line 30210
 if (!___async) {
  HEAP32[___async_retval >> 2] = $16; //@line 30214
  ___async_unwind = 0; //@line 30215
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 721; //@line 30217
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $8; //@line 30219
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 30221
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $10; //@line 30223
 sp = STACKTOP; //@line 30224
 return;
}
function _mbedtls_gcm_setkey__async_cb_325($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 23061
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23063
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23065
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23067
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23069
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23071
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23073
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 23075
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 23079
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 23082
 $15 = _mbedtls_cipher_setkey($2, $4, $6, 1) | 0; //@line 23083
 if (!___async) {
  HEAP32[___async_retval >> 2] = $15; //@line 23087
  ___async_unwind = 0; //@line 23088
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 611; //@line 23090
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $8; //@line 23092
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $10; //@line 23094
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 23096
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $12; //@line 23098
 sp = STACKTOP; //@line 23099
 return;
}
function __ZN16SX1276_LoRaRadio11rx_done_irqEv($0) {
 $0 = $0 | 0;
 var $13 = 0, $16 = 0, $18 = 0, $19 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1383
 STACKTOP = STACKTOP + 16 | 0; //@line 1384
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 1384
 _mbed_tracef(16, 11040, 11311, sp); //@line 1386
 __ZN4mbed6Ticker6detachEv($0 + 1112 | 0); //@line 1388
 HEAP8[$0 + 688 >> 0] = 0; //@line 1390
 $4 = HEAP32[$0 + 788 >> 2] | 0; //@line 1392
 if (!$4) {
  STACKTOP = sp; //@line 1395
  return;
 }
 $7 = HEAP32[$4 + 44 >> 2] | 0; //@line 1398
 if (!$7) {
  STACKTOP = sp; //@line 1401
  return;
 }
 $13 = HEAPU8[$0 + 782 >> 0] | 0; //@line 1407
 $16 = HEAP8[$0 + 781 >> 0] | 0; //@line 1410
 $18 = HEAP8[$0 + 780 >> 0] | 0; //@line 1412
 $19 = HEAP32[$7 >> 2] | 0; //@line 1413
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 1414
 FUNCTION_TABLE_viiiii[$19 & 7]($4 + 32 | 0, $0 + 792 | 0, $13, $16, $18); //@line 1415
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 84; //@line 1418
  sp = STACKTOP; //@line 1419
  STACKTOP = sp; //@line 1420
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 1422
 STACKTOP = sp; //@line 1423
 return;
}
function __ZN7LoRaMac15open_rx2_windowEv__async_cb_101($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 26723
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26725
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26727
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26729
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  return;
 }
 $9 = (HEAP8[$2 >> 0] | 0) != 0; //@line 26737
 $11 = HEAP32[$4 + 1888 >> 2] | 0; //@line 26739
 $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 26740
 __ZN7LoRaPHY15setup_rx_windowEbj($6, $9, $11); //@line 26741
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 389; //@line 26744
  $12 = $ReallocAsyncCtx + 4 | 0; //@line 26745
  HEAP32[$12 >> 2] = $2; //@line 26746
  $13 = $ReallocAsyncCtx + 8 | 0; //@line 26747
  HEAP32[$13 >> 2] = $4; //@line 26748
  sp = STACKTOP; //@line 26749
  return;
 }
 ___async_unwind = 0; //@line 26752
 HEAP32[$ReallocAsyncCtx >> 2] = 389; //@line 26753
 $12 = $ReallocAsyncCtx + 4 | 0; //@line 26754
 HEAP32[$12 >> 2] = $2; //@line 26755
 $13 = $ReallocAsyncCtx + 8 | 0; //@line 26756
 HEAP32[$13 >> 2] = $4; //@line 26757
 sp = STACKTOP; //@line 26758
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 var $$037$off038 = 0, $$037$off039 = 0, $12 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, label = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25278
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25280
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25282
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25286
 if (!(HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0)) {
  $$037$off038 = 4; //@line 25290
  label = 4; //@line 25291
 } else {
  if (!(HEAP8[HEAP32[$0 + 20 >> 2] >> 0] | 0)) {
   $$037$off038 = 3; //@line 25296
   label = 4; //@line 25297
  } else {
   $$037$off039 = 3; //@line 25299
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$6 >> 2] = $4; //@line 25303
  $17 = $8 + 40 | 0; //@line 25304
  HEAP32[$17 >> 2] = (HEAP32[$17 >> 2] | 0) + 1; //@line 25307
  if ((HEAP32[$8 + 36 >> 2] | 0) == 1) {
   if ((HEAP32[$8 + 24 >> 2] | 0) == 2) {
    HEAP8[$8 + 54 >> 0] = 1; //@line 25317
    $$037$off039 = $$037$off038; //@line 25318
   } else {
    $$037$off039 = $$037$off038; //@line 25320
   }
  } else {
   $$037$off039 = $$037$off038; //@line 25323
  }
 }
 HEAP32[$12 >> 2] = $$037$off039; //@line 25326
 return;
}
function _mbedtls_cipher_cmac_starts__async_cb_237($0) {
 $0 = $0 | 0;
 var $$0 = 0, $4 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14471
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14475
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 14477
 L2 : do {
  if (!$AsyncRetVal) {
   switch (HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0) {
   case 36:
   case 4:
   case 3:
   case 2:
    {
     break;
    }
   default:
    {
     $$0 = -24832; //@line 14488
     break L2;
    }
   }
   $9 = _calloc(1, 36) | 0; //@line 14492
   if (!$9) {
    $$0 = -24960; //@line 14495
   } else {
    HEAP32[$4 + 64 >> 2] = $9; //@line 14498
    $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 14499
    _mbedtls_platform_zeroize($9, 16); //@line 14500
    if (___async) {
     HEAP32[$ReallocAsyncCtx >> 2] = 595; //@line 14503
     sp = STACKTOP; //@line 14504
     return;
    }
    ___async_unwind = 0; //@line 14507
    HEAP32[$ReallocAsyncCtx >> 2] = 595; //@line 14508
    sp = STACKTOP; //@line 14509
    return;
   }
  } else {
   $$0 = $AsyncRetVal; //@line 14513
  }
 } while (0);
 HEAP32[___async_retval >> 2] = $$0; //@line 14517
 return;
}
function ___strerror_l($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $7 = 0, label = 0, $$113$looptemp = 0;
 $$016 = 0; //@line 15384
 while (1) {
  if ((HEAPU8[16507 + $$016 >> 0] | 0) == ($0 | 0)) {
   label = 2; //@line 15391
   break;
  }
  $7 = $$016 + 1 | 0; //@line 15394
  if (($7 | 0) == 87) {
   $$01214 = 16595; //@line 15397
   $$115 = 87; //@line 15397
   label = 5; //@line 15398
   break;
  } else {
   $$016 = $7; //@line 15401
  }
 }
 if ((label | 0) == 2) {
  if (!$$016) {
   $$012$lcssa = 16595; //@line 15407
  } else {
   $$01214 = 16595; //@line 15409
   $$115 = $$016; //@line 15409
   label = 5; //@line 15410
  }
 }
 if ((label | 0) == 5) {
  while (1) {
   label = 0; //@line 15415
   $$113 = $$01214; //@line 15416
   do {
    $$113$looptemp = $$113;
    $$113 = $$113 + 1 | 0; //@line 15420
   } while ((HEAP8[$$113$looptemp >> 0] | 0) != 0);
   $$115 = $$115 + -1 | 0; //@line 15427
   if (!$$115) {
    $$012$lcssa = $$113; //@line 15430
    break;
   } else {
    $$01214 = $$113; //@line 15433
    label = 5; //@line 15434
   }
  }
 }
 return ___lctrans($$012$lcssa, HEAP32[$1 + 20 >> 2] | 0) | 0; //@line 15441
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $13 = 0, $19 = 0;
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 16799
  } else {
   if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0) {
    if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
     $13 = $1 + 20 | 0; //@line 16808
     if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
      HEAP32[$1 + 32 >> 2] = $3; //@line 16813
      HEAP32[$13 >> 2] = $2; //@line 16814
      $19 = $1 + 40 | 0; //@line 16815
      HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + 1; //@line 16818
      if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
       if ((HEAP32[$1 + 24 >> 2] | 0) == 2) {
        HEAP8[$1 + 54 >> 0] = 1; //@line 16828
       }
      }
      HEAP32[$1 + 44 >> 2] = 4; //@line 16832
      break;
     }
    }
    if (($3 | 0) == 1) {
     HEAP32[$1 + 32 >> 2] = 1; //@line 16839
    }
   }
  }
 } while (0);
 return;
}
function __ZN7LoRaMac24get_max_possible_tx_sizeEh__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$09 = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $28 = 0, $6 = 0, $8 = 0, $or$cond$i = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 72
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 76
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 78
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 80
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 82
 $14 = (HEAP32[$0 + 8 >> 2] | 0) + 1173 | 0; //@line 84
 $17 = __ZN7LoRaPHY15get_max_payloadEhb($6, HEAP8[$2 >> 0] | 0, (HEAP8[$14 >> 0] | 0) != 0) | 0; //@line 87
 $18 = $17 & 255; //@line 88
 $19 = $8 & 255; //@line 89
 if ($19 >>> 0 > $18 >>> 0) {
  __ZN14LoRaMacCommand20clear_command_bufferEv($10); //@line 92
  __ZN14LoRaMacCommand19clear_repeat_bufferEv($10); //@line 93
  $$0 = 0; //@line 94
  $$09 = $17; //@line 94
 } else {
  $$0 = $19; //@line 98
  $$09 = $18 - $8 & 255; //@line 98
 }
 $28 = $$0 + ($12 & 255) | 0; //@line 105
 $or$cond$i = $28 >>> 0 < 256 & $28 >>> 0 <= ((__ZN7LoRaPHY15get_max_payloadEhb($6, HEAP8[$2 >> 0] | 0, (HEAP8[$14 >> 0] | 0) != 0) | 0) & 255) >>> 0; //@line 109
 HEAP8[___async_retval >> 0] = $or$cond$i ? $17 : $$09; //@line 112
 return;
}
function __ZN6events5EventIFvvEE10event_postIPS1_EEiPNS2_5eventE__async_cb_405($0) {
 $0 = $0 | 0;
 var $13 = 0, $14 = 0, $2 = 0, $4 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 28900
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28902
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28904
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 28906
 if (!$AsyncRetVal) {
  HEAP32[___async_retval >> 2] = 0; //@line 28910
  return;
 }
 HEAP32[$AsyncRetVal >> 2] = HEAP32[$2 + 28 >> 2]; //@line 28915
 _equeue_event_delay($AsyncRetVal, HEAP32[$2 + 12 >> 2] | 0); //@line 28918
 _equeue_event_period($AsyncRetVal, HEAP32[$2 + 16 >> 2] | 0); //@line 28921
 _equeue_event_dtor($AsyncRetVal, 686); //@line 28922
 $13 = HEAP32[$4 >> 2] | 0; //@line 28923
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 28924
 $14 = _equeue_post($13, 687, $AsyncRetVal) | 0; //@line 28925
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 688; //@line 28928
  sp = STACKTOP; //@line 28929
  return;
 }
 HEAP32[___async_retval >> 2] = $14; //@line 28933
 ___async_unwind = 0; //@line 28934
 HEAP32[$ReallocAsyncCtx >> 2] = 688; //@line 28935
 sp = STACKTOP; //@line 28936
 return;
}
function _mbedtls_gcm_setkey__async_cb_326($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 23106
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23108
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23110
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23112
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23114
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23116
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23118
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23120
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(28) | 0; //@line 23121
 $15 = _mbedtls_cipher_setup($2, $4) | 0; //@line 23122
 if (!___async) {
  HEAP32[___async_retval >> 2] = $15; //@line 23126
  ___async_unwind = 0; //@line 23127
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 610; //@line 23129
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 23131
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $6; //@line 23133
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $8; //@line 23135
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $10; //@line 23137
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $12; //@line 23139
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $14; //@line 23141
 sp = STACKTOP; //@line 23142
 return;
}
function __ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_97($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0, $28 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 26516
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26518
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26524
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 26526
 if (!$AsyncRetVal) {
  HEAP32[HEAP32[$0 + 12 >> 2] >> 2] = (HEAPU8[$2 + 18 >> 0] | 0) << 16 | (HEAPU8[$2 + 19 >> 0] | 0) << 24 | (HEAPU8[$2 + 17 >> 0] | 0) << 8 | (HEAPU8[HEAP32[$0 + 8 >> 2] >> 0] | 0); //@line 26546
  $$0 = 0; //@line 26547
 } else {
  $$0 = $AsyncRetVal; //@line 26549
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 26551
 _mbedtls_cipher_free($8); //@line 26552
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 509; //@line 26555
  $28 = $ReallocAsyncCtx5 + 4 | 0; //@line 26556
  HEAP32[$28 >> 2] = $$0; //@line 26557
  sp = STACKTOP; //@line 26558
  return;
 }
 ___async_unwind = 0; //@line 26561
 HEAP32[$ReallocAsyncCtx5 >> 2] = 509; //@line 26562
 $28 = $ReallocAsyncCtx5 + 4 | 0; //@line 26563
 HEAP32[$28 >> 2] = $$0; //@line 26564
 sp = STACKTOP; //@line 26565
 return;
}
function _mbedtls_cipher_cmac_finish__async_cb_276($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 17938
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17942
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17944
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17946
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17948
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17950
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 17952
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 17954
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 0; //@line 17955
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 17956
 _mbedtls_platform_zeroize($4, 16); //@line 17957
 if (!___async) {
  ___async_unwind = 0; //@line 17960
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 607; //@line 17962
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $6; //@line 17964
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $8; //@line 17966
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $10; //@line 17968
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $12; //@line 17970
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $14; //@line 17972
 HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $16; //@line 17974
 sp = STACKTOP; //@line 17975
 return;
}
function __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_152($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0, $28 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 29857
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29859
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29865
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29867
 if (!$AsyncRetVal) {
  HEAP32[HEAP32[$0 + 12 >> 2] >> 2] = (HEAPU8[$2 + 18 >> 0] | 0) << 16 | (HEAPU8[$2 + 19 >> 0] | 0) << 24 | (HEAPU8[$2 + 17 >> 0] | 0) << 8 | (HEAPU8[HEAP32[$0 + 8 >> 2] >> 0] | 0); //@line 29887
  $$0 = 0; //@line 29888
 } else {
  $$0 = $AsyncRetVal; //@line 29890
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 29892
 _mbedtls_cipher_free($8); //@line 29893
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 502; //@line 29896
  $28 = $ReallocAsyncCtx6 + 4 | 0; //@line 29897
  HEAP32[$28 >> 2] = $$0; //@line 29898
  sp = STACKTOP; //@line 29899
  return;
 }
 ___async_unwind = 0; //@line 29902
 HEAP32[$ReallocAsyncCtx6 >> 2] = 502; //@line 29903
 $28 = $ReallocAsyncCtx6 + 4 | 0; //@line 29904
 HEAP32[$28 >> 2] = $$0; //@line 29905
 sp = STACKTOP; //@line 29906
 return;
}
function __ZN4mbed11InterruptInD2Ev($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 2186
 HEAP32[$0 >> 2] = 604; //@line 2187
 _gpio_irq_free($0 + 28 | 0); //@line 2189
 $3 = HEAP32[$0 + 68 >> 2] | 0; //@line 2191
 do {
  if ($3 | 0) {
   $7 = HEAP32[$3 + 8 >> 2] | 0; //@line 2197
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2198
   FUNCTION_TABLE_vi[$7 & 1023]($0 + 56 | 0); //@line 2199
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 101; //@line 2202
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2204
    sp = STACKTOP; //@line 2205
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 2208
    break;
   }
  }
 } while (0);
 $10 = HEAP32[$0 + 52 >> 2] | 0; //@line 2214
 if (!$10) {
  return;
 }
 $14 = HEAP32[$10 + 8 >> 2] | 0; //@line 2221
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2222
 FUNCTION_TABLE_vi[$14 & 1023]($0 + 40 | 0); //@line 2223
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 102; //@line 2226
  sp = STACKTOP; //@line 2227
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2230
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 28952
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28954
 $4 = HEAP8[$0 + 8 >> 0] | 0; //@line 28956
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28958
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28960
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28962
 $11 = HEAP32[$2 >> 2] | 0; //@line 28963
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 40 >> 2] | 0; //@line 28966
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 28967
 $15 = FUNCTION_TABLE_ii[$14 & 15]($11) | 0; //@line 28968
 if (!___async) {
  HEAP8[___async_retval >> 0] = $15; //@line 28972
  ___async_unwind = 0; //@line 28973
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 519; //@line 28975
 HEAP8[$ReallocAsyncCtx2 + 4 >> 0] = $4; //@line 28977
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 28979
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 28981
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 28983
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 28985
 sp = STACKTOP; //@line 28986
 return;
}
function _strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $2 = 0, $5 = 0;
 $2 = HEAP8[$1 >> 0] | 0; //@line 15457
 do {
  if (!($2 << 24 >> 24)) {
   $$0 = $0; //@line 15461
  } else {
   $5 = _strchr($0, $2 << 24 >> 24) | 0; //@line 15464
   if (!$5) {
    $$0 = 0; //@line 15467
   } else {
    if (!(HEAP8[$1 + 1 >> 0] | 0)) {
     $$0 = $5; //@line 15473
    } else {
     if (!(HEAP8[$5 + 1 >> 0] | 0)) {
      $$0 = 0; //@line 15479
     } else {
      if (!(HEAP8[$1 + 2 >> 0] | 0)) {
       $$0 = _twobyte_strstr($5, $1) | 0; //@line 15486
       break;
      }
      if (!(HEAP8[$5 + 2 >> 0] | 0)) {
       $$0 = 0; //@line 15493
      } else {
       if (!(HEAP8[$1 + 3 >> 0] | 0)) {
        $$0 = _threebyte_strstr($5, $1) | 0; //@line 15500
        break;
       }
       if (!(HEAP8[$5 + 3 >> 0] | 0)) {
        $$0 = 0; //@line 15507
       } else {
        if (!(HEAP8[$1 + 4 >> 0] | 0)) {
         $$0 = _fourbyte_strstr($5, $1) | 0; //@line 15514
         break;
        } else {
         $$0 = _twoway_strstr($5, $1) | 0; //@line 15518
         break;
        }
       }
      }
     }
    }
   }
  }
 } while (0);
 return $$0 | 0; //@line 15528
}
function __ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 8799
 $1 = $0 + 12 | 0; //@line 8800
 $2 = HEAP32[$1 >> 2] | 0; //@line 8801
 do {
  if (!$2) {
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 8805
   _mbed_assert_internal(15010, 15015, 528); //@line 8806
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 288; //@line 8809
    HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 8811
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 8813
    sp = STACKTOP; //@line 8814
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 8817
    $7 = HEAP32[$1 >> 2] | 0; //@line 8819
    break;
   }
  } else {
   $7 = $2; //@line 8823
  }
 } while (0);
 $6 = HEAP32[$7 >> 2] | 0; //@line 8826
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8827
 FUNCTION_TABLE_vi[$6 & 1023]($0); //@line 8828
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 289; //@line 8831
  sp = STACKTOP; //@line 8832
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 8835
  return;
 }
}
function __ZN12LoRaWANStack23process_connected_stateEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 33415
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33419
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33421
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33423
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 33425
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 33427
 $13 = $4 + 12 | 0; //@line 33429
 HEAP32[$13 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 33430
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 33431
 $14 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 0) | 0; //@line 33432
 if (!___async) {
  HEAP32[___async_retval >> 2] = $14; //@line 33436
  ___async_unwind = 0; //@line 33437
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 334; //@line 33439
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $13; //@line 33441
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $8; //@line 33443
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $10; //@line 33445
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $12; //@line 33447
 sp = STACKTOP; //@line 33448
 return;
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 14140
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14144
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14146
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14148
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14150
 $11 = $6 + 12 | 0; //@line 14152
 HEAP32[$11 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 14153
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 14154
 $12 = _equeue_alloc($8, 16) | 0; //@line 14155
 if (!___async) {
  HEAP32[___async_retval >> 2] = $12; //@line 14159
  ___async_unwind = 0; //@line 14160
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 564; //@line 14162
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $4; //@line 14164
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $8; //@line 14166
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $6; //@line 14168
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $11; //@line 14170
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $11; //@line 14172
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $10; //@line 14174
 sp = STACKTOP; //@line 14175
 return;
}
function __ZN4mbed6TickerD0Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 7174
 HEAP32[$0 >> 2] = 10244; //@line 7175
 $1 = $0 + 40 | 0; //@line 7176
 _emscripten_asm_const_ii(15, $1 | 0) | 0; //@line 7177
 $4 = HEAP32[$0 + 52 >> 2] | 0; //@line 7179
 do {
  if ($4 | 0) {
   $7 = HEAP32[$4 + 8 >> 2] | 0; //@line 7184
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 7185
   FUNCTION_TABLE_vi[$7 & 1023]($1); //@line 7186
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 661; //@line 7189
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 7191
    sp = STACKTOP; //@line 7192
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 7195
    break;
   }
  }
 } while (0);
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7200
 __ZN4mbed10TimerEventD2Ev($0); //@line 7201
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 662; //@line 7204
  HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 7206
  sp = STACKTOP; //@line 7207
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7210
  __ZdlPv($0); //@line 7211
  return;
 }
}
function __ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 24029
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24033
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24035
 $7 = $4 + 12 | 0; //@line 24037
 HEAP32[$7 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 24038
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 24039
 __ZN14LoRaMacCommand25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE($6, $4); //@line 24040
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 406; //@line 24043
  $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 24044
  HEAP32[$8 >> 2] = $7; //@line 24045
  $9 = $ReallocAsyncCtx3 + 8 | 0; //@line 24046
  HEAP32[$9 >> 2] = $4; //@line 24047
  sp = STACKTOP; //@line 24048
  return;
 }
 ___async_unwind = 0; //@line 24051
 HEAP32[$ReallocAsyncCtx3 >> 2] = 406; //@line 24052
 $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 24053
 HEAP32[$8 >> 2] = $7; //@line 24054
 $9 = $ReallocAsyncCtx3 + 8 | 0; //@line 24055
 HEAP32[$9 >> 2] = $4; //@line 24056
 sp = STACKTOP; //@line 24057
 return;
}
function __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_32($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 23607
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23611
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23613
 $7 = $6 + 12 | 0; //@line 23615
 HEAP32[$7 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 23616
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 23617
 __ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE($4, $6); //@line 23618
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 360; //@line 23621
  $8 = $ReallocAsyncCtx9 + 4 | 0; //@line 23622
  HEAP32[$8 >> 2] = $7; //@line 23623
  $9 = $ReallocAsyncCtx9 + 8 | 0; //@line 23624
  HEAP32[$9 >> 2] = $6; //@line 23625
  sp = STACKTOP; //@line 23626
  return;
 }
 ___async_unwind = 0; //@line 23629
 HEAP32[$ReallocAsyncCtx9 >> 2] = 360; //@line 23630
 $8 = $ReallocAsyncCtx9 + 4 | 0; //@line 23631
 HEAP32[$8 >> 2] = $7; //@line 23632
 $9 = $ReallocAsyncCtx9 + 8 | 0; //@line 23633
 HEAP32[$9 >> 2] = $6; //@line 23634
 sp = STACKTOP; //@line 23635
 return;
}
function _mbed_vtracef__async_cb_170($0) {
 $0 = $0 | 0;
 var $3 = 0, $5 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 31383
 $3 = HEAP32[175] | 0; //@line 31387
 if (HEAP8[$0 + 4 >> 0] & 1 & ($3 | 0) != 0) {
  $5 = HEAP32[167] | 0; //@line 31391
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 31392
  FUNCTION_TABLE_vi[$3 & 1023]($5); //@line 31393
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 143; //@line 31396
   sp = STACKTOP; //@line 31397
   return;
  }
  ___async_unwind = 0; //@line 31400
  HEAP32[$ReallocAsyncCtx2 >> 2] = 143; //@line 31401
  sp = STACKTOP; //@line 31402
  return;
 } else {
  $6 = HEAP32[174] | 0; //@line 31405
  $7 = HEAP32[167] | 0; //@line 31406
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 31407
  FUNCTION_TABLE_vi[$6 & 1023]($7); //@line 31408
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 145; //@line 31411
   sp = STACKTOP; //@line 31412
   return;
  }
  ___async_unwind = 0; //@line 31415
  HEAP32[$ReallocAsyncCtx4 >> 2] = 145; //@line 31416
  sp = STACKTOP; //@line 31417
  return;
 }
}
function _fourbyte_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$lcssa = 0, $$sink21$lcssa = 0, $$sink2123 = 0, $18 = 0, $32 = 0, $33 = 0, $35 = 0, $39 = 0, $40 = 0, $41 = 0;
 $18 = (HEAPU8[$1 + 1 >> 0] | 0) << 16 | (HEAPU8[$1 >> 0] | 0) << 24 | (HEAPU8[$1 + 2 >> 0] | 0) << 8 | (HEAPU8[$1 + 3 >> 0] | 0); //@line 15653
 $32 = $0 + 3 | 0; //@line 15667
 $33 = HEAP8[$32 >> 0] | 0; //@line 15668
 $35 = (HEAPU8[$0 + 1 >> 0] | 0) << 16 | (HEAPU8[$0 >> 0] | 0) << 24 | (HEAPU8[$0 + 2 >> 0] | 0) << 8 | $33 & 255; //@line 15670
 if ($33 << 24 >> 24 == 0 | ($35 | 0) == ($18 | 0)) {
  $$lcssa = $33; //@line 15675
  $$sink21$lcssa = $32; //@line 15675
 } else {
  $$sink2123 = $32; //@line 15677
  $39 = $35; //@line 15677
  while (1) {
   $40 = $$sink2123 + 1 | 0; //@line 15680
   $41 = HEAP8[$40 >> 0] | 0; //@line 15681
   $39 = $39 << 8 | $41 & 255; //@line 15683
   if ($41 << 24 >> 24 == 0 | ($39 | 0) == ($18 | 0)) {
    $$lcssa = $41; //@line 15688
    $$sink21$lcssa = $40; //@line 15688
    break;
   } else {
    $$sink2123 = $40; //@line 15691
   }
  }
 }
 return ($$lcssa << 24 >> 24 ? $$sink21$lcssa + -3 | 0 : 0) | 0; //@line 15698
}
function __ZN18LoRaMacChannelPlan11remove_planEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 24017
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24019
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24021
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24023
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24025
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24027
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  HEAP32[___async_retval >> 2] = -1003; //@line 24033
  return;
 }
 $12 = HEAP32[$2 >> 2] | 0; //@line 24036
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 24037
 __ZN7LoRaPHY18put_radio_to_sleepEv($12); //@line 24038
 if (!___async) {
  ___async_unwind = 0; //@line 24041
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 486; //@line 24043
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $4; //@line 24045
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 24047
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 24049
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 24051
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 24053
 sp = STACKTOP; //@line 24054
 return;
}
function __ZN7LoRaMac23message_integrity_checkEPKhtPhjPjS1___async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$0$expand_i1_val = 0, $12 = 0, $23 = 0, $6 = 0, $8 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28066
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28068
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28072
 if ((HEAP32[$0 + 8 >> 2] | 0) != (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0)) {
  HEAP32[$6 + 2020 >> 2] = 12; //@line 28077
  $$0 = 0; //@line 28078
  $23 = ___async_retval; //@line 28079
  $$0$expand_i1_val = $$0 & 1; //@line 28080
  HEAP8[$23 >> 0] = $$0$expand_i1_val; //@line 28081
  return;
 }
 if ($8 >>> 0 < ((__ZN7LoRaPHY29get_maximum_frame_counter_gapEv($6 + 4 | 0) | 0) & 65535) >>> 0) {
  $$0 = 1; //@line 28089
  $23 = ___async_retval; //@line 28090
  $$0$expand_i1_val = $$0 & 1; //@line 28091
  HEAP8[$23 >> 0] = $$0$expand_i1_val; //@line 28092
  return;
 }
 HEAP32[$6 + 2020 >> 2] = 10; //@line 28096
 HEAP32[$6 + 2048 >> 2] = HEAP32[$12 >> 2]; //@line 28099
 $$0 = 0; //@line 28100
 $23 = ___async_retval; //@line 28101
 $$0$expand_i1_val = $$0 & 1; //@line 28102
 HEAP8[$23 >> 0] = $$0$expand_i1_val; //@line 28103
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_dtorIN6events5EventIS1_EEEEvPv($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $4 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 8130
 $1 = HEAP32[$0 >> 2] | 0; //@line 8131
 if (!$1) {
  return;
 }
 $4 = (HEAP32[$1 >> 2] | 0) + -1 | 0; //@line 8137
 HEAP32[$1 >> 2] = $4; //@line 8138
 if ($4 | 0) {
  return;
 }
 $7 = HEAP32[$1 + 24 >> 2] | 0; //@line 8144
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 8145
 FUNCTION_TABLE_vi[$7 & 1023]($1); //@line 8146
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 698; //@line 8149
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 8151
  sp = STACKTOP; //@line 8152
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 8155
 $9 = HEAP32[$0 >> 2] | 0; //@line 8156
 $11 = HEAP32[$9 + 4 >> 2] | 0; //@line 8158
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 8159
 _equeue_dealloc($11, $9); //@line 8160
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 699; //@line 8163
  sp = STACKTOP; //@line 8164
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 8167
 return;
}
function _ticker_read_us__async_cb_427($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $7 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 31533
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31535
 $3 = $2 + 4 | 0; //@line 31536
 $4 = HEAP32[$3 >> 2] | 0; //@line 31537
 $7 = HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0; //@line 31540
 $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 31541
 $8 = FUNCTION_TABLE_i[$7 & 7]() | 0; //@line 31542
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 634; //@line 31545
  $9 = $ReallocAsyncCtx + 4 | 0; //@line 31546
  HEAP32[$9 >> 2] = $3; //@line 31547
  $10 = $ReallocAsyncCtx + 8 | 0; //@line 31548
  HEAP32[$10 >> 2] = $4; //@line 31549
  sp = STACKTOP; //@line 31550
  return;
 }
 HEAP32[___async_retval >> 2] = $8; //@line 31554
 ___async_unwind = 0; //@line 31555
 HEAP32[$ReallocAsyncCtx >> 2] = 634; //@line 31556
 $9 = $ReallocAsyncCtx + 4 | 0; //@line 31557
 HEAP32[$9 >> 2] = $3; //@line 31558
 $10 = $ReallocAsyncCtx + 8 | 0; //@line 31559
 HEAP32[$10 >> 2] = $4; //@line 31560
 sp = STACKTOP; //@line 31561
 return;
}
function _invoke_ticker($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 7241
 $2 = $0 + 12 | 0; //@line 7243
 $3 = HEAP32[$2 >> 2] | 0; //@line 7244
 do {
  if (!$3) {
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7248
   _mbed_assert_internal(15010, 15015, 528); //@line 7249
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 664; //@line 7252
    HEAP32[$AsyncCtx2 + 4 >> 2] = $2; //@line 7254
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 7256
    sp = STACKTOP; //@line 7257
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7260
    $8 = HEAP32[$2 >> 2] | 0; //@line 7262
    break;
   }
  } else {
   $8 = $3; //@line 7266
  }
 } while (0);
 $7 = HEAP32[$8 >> 2] | 0; //@line 7269
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7271
 FUNCTION_TABLE_vi[$7 & 1023]($0); //@line 7272
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 665; //@line 7275
  sp = STACKTOP; //@line 7276
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7279
  return;
 }
}
function __ZN4mbed7TimeoutD0Ev($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2578
 HEAP32[$0 >> 2] = 10244; //@line 2579
 __ZN4mbed6Ticker6detachEv($0); //@line 2580
 $2 = HEAP32[$0 + 52 >> 2] | 0; //@line 2582
 do {
  if ($2 | 0) {
   $6 = HEAP32[$2 + 8 >> 2] | 0; //@line 2588
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2589
   FUNCTION_TABLE_vi[$6 & 1023]($0 + 40 | 0); //@line 2590
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 114; //@line 2593
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2595
    sp = STACKTOP; //@line 2596
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 2599
    break;
   }
  }
 } while (0);
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2604
 __ZN4mbed10TimerEventD2Ev($0); //@line 2605
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 115; //@line 2608
  HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 2610
  sp = STACKTOP; //@line 2611
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 2614
  __ZdlPv($0); //@line 2615
  return;
 }
}
function __ZN12LoRaWANStack28process_transmission_timeoutEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $5 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 25585
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25587
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25589
 $5 = $2 + 2904 | 0; //@line 25590
 HEAP32[$5 >> 2] = HEAP32[$5 >> 2] & -18 | 1; //@line 25594
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 25595
 __ZN12LoRaWANStack26process_status_check_stateEv($2); //@line 25596
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 280; //@line 25599
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 25600
  HEAP32[$9 >> 2] = $4; //@line 25601
  $10 = $ReallocAsyncCtx2 + 8 | 0; //@line 25602
  HEAP32[$10 >> 2] = $2; //@line 25603
  sp = STACKTOP; //@line 25604
  return;
 }
 ___async_unwind = 0; //@line 25607
 HEAP32[$ReallocAsyncCtx2 >> 2] = 280; //@line 25608
 $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 25609
 HEAP32[$9 >> 2] = $4; //@line 25610
 $10 = $ReallocAsyncCtx2 + 8 | 0; //@line 25611
 HEAP32[$10 >> 2] = $2; //@line 25612
 sp = STACKTOP; //@line 25613
 return;
}
function _abort_message($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $2 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 16632
 STACKTOP = STACKTOP + 16 | 0; //@line 16633
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16633
 $1 = sp; //@line 16634
 HEAP32[$1 >> 2] = $varargs; //@line 16635
 $2 = HEAP32[2572] | 0; //@line 16636
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 16637
 _vfprintf($2, $0, $1) | 0; //@line 16638
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 722; //@line 16641
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 16643
  sp = STACKTOP; //@line 16644
  STACKTOP = sp; //@line 16645
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 16647
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 16648
 _fputc(10, $2) | 0; //@line 16649
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 723; //@line 16652
  sp = STACKTOP; //@line 16653
  STACKTOP = sp; //@line 16654
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 16656
  _abort(); //@line 16657
 }
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_411($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $17 = 0, $20 = 0, $21 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 29363
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29373
 $14 = HEAP32[$10 >> 2] | 0; //@line 29380
 $17 = HEAP32[(HEAP32[$14 >> 2] | 0) + 44 >> 2] | 0; //@line 29383
 $20 = (HEAPU8[((HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 17 >> 0] | 0) == 0 ? HEAP32[$0 + 8 >> 2] | 0 : HEAP32[$0 + 12 >> 2] | 0) + (HEAP32[$0 + 16 >> 2] | 0) >> 0] | 0) + 13 & 255; //@line 29386
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 29387
 FUNCTION_TABLE_viii[$17 & 7]($14, 1, $20); //@line 29388
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 525; //@line 29391
  $21 = $ReallocAsyncCtx8 + 4 | 0; //@line 29392
  HEAP32[$21 >> 2] = $10; //@line 29393
  sp = STACKTOP; //@line 29394
  return;
 }
 ___async_unwind = 0; //@line 29397
 HEAP32[$ReallocAsyncCtx8 >> 2] = 525; //@line 29398
 $21 = $ReallocAsyncCtx8 + 4 | 0; //@line 29399
 HEAP32[$21 >> 2] = $10; //@line 29400
 sp = STACKTOP; //@line 29401
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_410($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $17 = 0, $20 = 0, $21 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 29318
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29328
 $14 = HEAP32[$10 >> 2] | 0; //@line 29335
 $17 = HEAP32[(HEAP32[$14 >> 2] | 0) + 44 >> 2] | 0; //@line 29338
 $20 = (HEAPU8[((HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 17 >> 0] | 0) == 0 ? HEAP32[$0 + 8 >> 2] | 0 : HEAP32[$0 + 12 >> 2] | 0) + (HEAP32[$0 + 16 >> 2] | 0) >> 0] | 0) + 13 & 255; //@line 29341
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 29342
 FUNCTION_TABLE_viii[$17 & 7]($14, 0, $20); //@line 29343
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 525; //@line 29346
  $21 = $ReallocAsyncCtx8 + 4 | 0; //@line 29347
  HEAP32[$21 >> 2] = $10; //@line 29348
  sp = STACKTOP; //@line 29349
  return;
 }
 ___async_unwind = 0; //@line 29352
 HEAP32[$ReallocAsyncCtx8 >> 2] = 525; //@line 29353
 $21 = $ReallocAsyncCtx8 + 4 | 0; //@line 29354
 HEAP32[$21 >> 2] = $10; //@line 29355
 sp = STACKTOP; //@line 29356
 return;
}
function __ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $15 = 0, $2 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 17255
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17257
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17261
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 17263
 $9 = HEAP32[$2 >> 2] | 0; //@line 17264
 $12 = HEAP32[(HEAP32[$9 >> 2] | 0) + 68 >> 2] | 0; //@line 17267
 $14 = HEAP16[(HEAP32[$0 + 8 >> 2] | 0) + 12 >> 1] | 0; //@line 17269
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 17270
 FUNCTION_TABLE_viiii[$12 & 7]($9, $6, $8, $14); //@line 17271
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 539; //@line 17274
  $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 17275
  HEAP32[$15 >> 2] = $2; //@line 17276
  sp = STACKTOP; //@line 17277
  return;
 }
 ___async_unwind = 0; //@line 17280
 HEAP32[$ReallocAsyncCtx2 >> 2] = 539; //@line 17281
 $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 17282
 HEAP32[$15 >> 2] = $2; //@line 17283
 sp = STACKTOP; //@line 17284
 return;
}
function __ZN13LoRaMacCrypto18decrypt_join_frameEPKhtS1_jPh($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $6 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 19616
 $6 = $0 + 64 | 0; //@line 19617
 _mbedtls_aes_init($6); //@line 19618
 $7 = _mbedtls_aes_setkey_enc($6, $3, $4) | 0; //@line 19619
 if (!$7) {
  $9 = _mbedtls_aes_crypt_ecb($6, 1, $1, $5) | 0; //@line 19622
  if (($2 & 65535) > 15 & ($9 | 0) == 0) {
   $$0 = _mbedtls_aes_crypt_ecb($6, 1, $1 + 16 | 0, $5 + 16 | 0) | 0; //@line 19630
  } else {
   $$0 = $9; //@line 19632
  }
 } else {
  $$0 = $7; //@line 19635
 }
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 19637
 _mbedtls_aes_free($6); //@line 19638
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 510; //@line 19641
  HEAP32[$AsyncCtx + 4 >> 2] = $$0; //@line 19643
  sp = STACKTOP; //@line 19644
  return 0; //@line 19645
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 19647
  return $$0 | 0; //@line 19648
 }
 return 0; //@line 19650
}
function _threebyte_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$016$lcssa = 0, $$01618 = 0, $$019 = 0, $$lcssa = 0, $14 = 0, $23 = 0, $24 = 0, $27 = 0, $30 = 0, $31 = 0;
 $14 = (HEAPU8[$1 + 1 >> 0] | 0) << 16 | (HEAPU8[$1 >> 0] | 0) << 24 | (HEAPU8[$1 + 2 >> 0] | 0) << 8; //@line 15587
 $23 = $0 + 2 | 0; //@line 15596
 $24 = HEAP8[$23 >> 0] | 0; //@line 15597
 $27 = (HEAPU8[$0 + 1 >> 0] | 0) << 16 | (HEAPU8[$0 >> 0] | 0) << 24 | ($24 & 255) << 8; //@line 15600
 if (($27 | 0) == ($14 | 0) | $24 << 24 >> 24 == 0) {
  $$016$lcssa = $23; //@line 15605
  $$lcssa = $24; //@line 15605
 } else {
  $$01618 = $23; //@line 15607
  $$019 = $27; //@line 15607
  while (1) {
   $30 = $$01618 + 1 | 0; //@line 15609
   $31 = HEAP8[$30 >> 0] | 0; //@line 15610
   $$019 = ($$019 | $31 & 255) << 8; //@line 15613
   if (($$019 | 0) == ($14 | 0) | $31 << 24 >> 24 == 0) {
    $$016$lcssa = $30; //@line 15618
    $$lcssa = $31; //@line 15618
    break;
   } else {
    $$01618 = $30; //@line 15621
   }
  }
 }
 return ($$lcssa << 24 >> 24 ? $$016$lcssa + -2 | 0 : 0) | 0; //@line 15628
}
function __ZN4mbed6TickerD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 7133
 HEAP32[$0 >> 2] = 10244; //@line 7134
 $1 = $0 + 40 | 0; //@line 7135
 _emscripten_asm_const_ii(15, $1 | 0) | 0; //@line 7136
 $4 = HEAP32[$0 + 52 >> 2] | 0; //@line 7138
 do {
  if ($4 | 0) {
   $7 = HEAP32[$4 + 8 >> 2] | 0; //@line 7143
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 7144
   FUNCTION_TABLE_vi[$7 & 1023]($1); //@line 7145
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 659; //@line 7148
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 7150
    sp = STACKTOP; //@line 7151
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 7154
    break;
   }
  }
 } while (0);
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7159
 __ZN4mbed10TimerEventD2Ev($0); //@line 7160
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 660; //@line 7163
  sp = STACKTOP; //@line 7164
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7167
  return;
 }
}
function __ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb_358($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 24794
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24798
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 24800
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 24801
 if (!$6) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 24805
  return;
 }
 $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 24809
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 24810
 FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 24811
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 286; //@line 24814
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 24815
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 24816
  sp = STACKTOP; //@line 24817
  return;
 }
 ___async_unwind = 0; //@line 24820
 HEAP32[$ReallocAsyncCtx2 >> 2] = 286; //@line 24821
 $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 24822
 HEAP32[$10 >> 2] = $AsyncRetVal; //@line 24823
 sp = STACKTOP; //@line 24824
 return;
}
function _frexp($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $$0 = 0.0, $$016 = 0.0, $2 = 0, $3 = 0, $4 = 0, $9 = 0.0, $storemerge = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 15215
 $2 = HEAP32[tempDoublePtr >> 2] | 0; //@line 15215
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 15216
 $4 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0; //@line 15217
 switch ($4 & 2047) {
 case 0:
  {
   if ($0 != 0.0) {
    $9 = +_frexp($0 * 18446744073709552000.0, $1); //@line 15226
    $$016 = $9; //@line 15229
    $storemerge = (HEAP32[$1 >> 2] | 0) + -64 | 0; //@line 15229
   } else {
    $$016 = $0; //@line 15231
    $storemerge = 0; //@line 15231
   }
   HEAP32[$1 >> 2] = $storemerge; //@line 15233
   $$0 = $$016; //@line 15234
   break;
  }
 case 2047:
  {
   $$0 = $0; //@line 15238
   break;
  }
 default:
  {
   HEAP32[$1 >> 2] = ($4 & 2047) + -1022; //@line 15244
   HEAP32[tempDoublePtr >> 2] = $2; //@line 15247
   HEAP32[tempDoublePtr + 4 >> 2] = $3 & -2146435073 | 1071644672; //@line 15247
   $$0 = +HEAPF64[tempDoublePtr >> 3]; //@line 15248
  }
 }
 return +$$0;
}
function __ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 26167
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26171
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26173
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26175
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26177
 $11 = $4 + 12 | 0; //@line 26179
 HEAP32[$11 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 26180
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(16) | 0; //@line 26181
 $12 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 10) | 0; //@line 26182
 if (!___async) {
  HEAP32[___async_retval >> 2] = $12; //@line 26186
  ___async_unwind = 0; //@line 26187
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 237; //@line 26189
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $11; //@line 26191
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $8; //@line 26193
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $10; //@line 26195
 sp = STACKTOP; //@line 26196
 return;
}
function _equeue_sema_wait($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $20 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP; //@line 4440
 STACKTOP = STACKTOP + 16 | 0; //@line 4441
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 4441
 $2 = sp + 8 | 0; //@line 4442
 $3 = sp; //@line 4443
 _pthread_mutex_lock($0 | 0) | 0; //@line 4444
 $4 = $0 + 76 | 0; //@line 4445
 do {
  if (!(HEAP8[$4 >> 0] | 0)) {
   if (($1 | 0) < 0) {
    _pthread_cond_wait($0 + 28 | 0, $0 | 0) | 0; //@line 4453
    break;
   } else {
    _gettimeofday($2 | 0, 0) | 0; //@line 4456
    HEAP32[$3 >> 2] = (HEAP32[$2 >> 2] | 0) + (($1 >>> 0) / 1e3 | 0); //@line 4460
    HEAP32[$3 + 4 >> 2] = ((HEAP32[$2 + 4 >> 2] | 0) * 1e3 | 0) + ($1 * 1e6 | 0); //@line 4467
    _pthread_cond_timedwait($0 + 28 | 0, $0 | 0, $3 | 0) | 0; //@line 4469
    break;
   }
  }
 } while (0);
 $20 = (HEAP8[$4 >> 0] | 0) != 0; //@line 4475
 HEAP8[$4 >> 0] = 0; //@line 4476
 _pthread_mutex_unlock($0 | 0) | 0; //@line 4477
 STACKTOP = sp; //@line 4478
 return $20 | 0; //@line 4478
}
function ___cxa_can_catch($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 18235
 STACKTOP = STACKTOP + 16 | 0; //@line 18236
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 18236
 $3 = sp; //@line 18237
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 18239
 $7 = HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0; //@line 18242
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 18243
 $8 = FUNCTION_TABLE_iiii[$7 & 31]($0, $1, $3) | 0; //@line 18244
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 746; //@line 18247
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 18249
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 18251
  HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 18253
  sp = STACKTOP; //@line 18254
  STACKTOP = sp; //@line 18255
  return 0; //@line 18255
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 18257
 if ($8) {
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2]; //@line 18261
 }
 STACKTOP = sp; //@line 18263
 return $8 & 1 | 0; //@line 18263
}
function __ZN7LoRaPHY19num_active_channelsEPthh($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$01012 = 0, $$011 = 0, $8 = 0, $9 = 0, $indvars$iv = 0, $wide$trip$count = 0;
 if (!(($1 | 0) != 0 & ($2 & 255) < ($3 & 255))) {
  $$011 = 0; //@line 21973
  return $$011 | 0; //@line 21974
 }
 $wide$trip$count = $3 & 255; //@line 21977
 $$01012 = 0; //@line 21978
 $indvars$iv = $2 & 255; //@line 21978
 do {
  $8 = HEAP16[$1 + ($indvars$iv << 1) >> 1] | 0; //@line 21981
  $9 = $8 & 65535; //@line 21982
  $$01012 = ($$01012 & 255) + (($9 & 1) + ($9 >>> 1 & 1) + ($9 >>> 2 & 1) + ($9 >>> 3 & 1) + ($9 >>> 4 & 1) + ($9 >>> 5 & 1) + ($9 >>> 6 & 1) + ($9 >>> 7 & 1) + ($9 >>> 8 & 1) + ($9 >>> 9 & 1) + ($9 >>> 10 & 1) + ($9 >>> 11 & 1) + ($9 >>> 12 & 1) + ($9 >>> 13 & 1) + ($9 >>> 14 & 1) + (($8 & 65535) >>> 15 & 65535) & 255) | 0; //@line 22031
  $indvars$iv = $indvars$iv + 1 | 0; //@line 22032
 } while (($indvars$iv | 0) != ($wide$trip$count | 0));
 $$011 = $$01012 & 255; //@line 22041
 return $$011 | 0; //@line 22042
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_423($0) {
 $0 = $0 | 0;
 var $$1$ = 0, $10 = 0, $12 = 0, $19 = 0, $6 = 0, $8 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30787
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30789
 $10 = HEAP8[$0 + 21 >> 0] | 0; //@line 30791
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30793
 $$1$ = (HEAP32[___async_retval >> 2] | 0) == 0 ? HEAP32[$0 + 4 >> 2] | 0 : -1014; //@line 30801
 $19 = HEAP32[HEAP32[$0 + 8 >> 2] >> 2] | 0; //@line 30802
 HEAP8[(HEAPU16[$6 >> 1] | 0) + ($8 + 1185) >> 0] = $19; //@line 30807
 HEAP8[(HEAPU16[$6 >> 1] | 0) + 1 + ($8 + 1185) >> 0] = $19 >>> 8; //@line 30814
 HEAP8[(HEAPU16[$6 >> 1] | 0) + 2 + ($8 + 1185) >> 0] = $19 >>> 16; //@line 30821
 HEAP8[(HEAPU16[$6 >> 1] | 0) + 3 + ($8 + 1185) >> 0] = $19 >>> 24; //@line 30828
 HEAP16[$6 >> 1] = (HEAPU16[$6 >> 1] | 0) + 4; //@line 30833
 HEAP32[$12 >> 2] = $10 & 255; //@line 30835
 _mbed_tracef(16, 12890, 13075, $12); //@line 30836
 HEAP32[___async_retval >> 2] = $$1$; //@line 30838
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_304($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 21067
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21071
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21073
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 21074
 if (!$7) {
  HEAP32[___async_retval >> 2] = $4; //@line 21078
  return;
 }
 $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 21082
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 21083
 FUNCTION_TABLE_vi[$10 & 1023]($6); //@line 21084
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 306; //@line 21087
  $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 21088
  HEAP32[$11 >> 2] = $4; //@line 21089
  sp = STACKTOP; //@line 21090
  return;
 }
 ___async_unwind = 0; //@line 21093
 HEAP32[$ReallocAsyncCtx5 >> 2] = 306; //@line 21094
 $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 21095
 HEAP32[$11 >> 2] = $4; //@line 21096
 sp = STACKTOP; //@line 21097
 return;
}
function _schedule_interrupt__async_cb_396($0) {
 $0 = $0 | 0;
 var $16 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 27680
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27684
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27686
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 27688
 $8 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 27689
 if ($4 >>> 0 > $8 >>> 0) {
  if (!($AsyncRetVal >>> 0 >= $4 >>> 0 | $AsyncRetVal >>> 0 < $8 >>> 0)) {
   return;
  }
 } else {
  if (!($AsyncRetVal >>> 0 >= $4 >>> 0 & $AsyncRetVal >>> 0 < $8 >>> 0)) {
   return;
  }
 }
 $16 = HEAP32[(HEAP32[$6 >> 2] | 0) + 20 >> 2] | 0; //@line 27708
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 27709
 FUNCTION_TABLE_v[$16 & 15](); //@line 27710
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 630; //@line 27713
  sp = STACKTOP; //@line 27714
  return;
 }
 ___async_unwind = 0; //@line 27717
 HEAP32[$ReallocAsyncCtx6 >> 2] = 630; //@line 27718
 sp = STACKTOP; //@line 27719
 return;
}
function _vfprintf__async_cb($0) {
 $0 = $0 | 0;
 var $$ = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $33 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31434
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31442
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31444
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 31446
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 31448
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 31450
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 31452
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 31454
 $$ = (HEAP32[$2 >> 2] | 0) == 0 ? -1 : HEAP32[$0 + 8 >> 2] | 0; //@line 31465
 HEAP32[HEAP32[$0 + 16 >> 2] >> 2] = HEAP32[$0 + 12 >> 2]; //@line 31466
 HEAP32[$10 >> 2] = 0; //@line 31467
 HEAP32[$12 >> 2] = 0; //@line 31468
 HEAP32[$14 >> 2] = 0; //@line 31469
 HEAP32[$2 >> 2] = 0; //@line 31470
 $33 = HEAP32[$16 >> 2] | 0; //@line 31471
 HEAP32[$16 >> 2] = $33 | $18; //@line 31476
 if ($20 | 0) {
  ___unlockfile($22); //@line 31479
 }
 HEAP32[___async_retval >> 2] = ($33 & 32 | 0) == 0 ? $$ : -1; //@line 31482
 return;
}
function _mbed_vtracef__async_cb_167($0) {
 $0 = $0 | 0;
 var $$pre = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 31114
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31118
 if ((HEAP32[$0 + 4 >> 2] | 0) <= 2) {
  return;
 }
 $5 = $4 + -1 | 0; //@line 31123
 $$pre = HEAP32[177] | 0; //@line 31124
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 31125
 FUNCTION_TABLE_v[$$pre & 15](); //@line 31126
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 152; //@line 31129
  $6 = $ReallocAsyncCtx9 + 4 | 0; //@line 31130
  HEAP32[$6 >> 2] = $4; //@line 31131
  $7 = $ReallocAsyncCtx9 + 8 | 0; //@line 31132
  HEAP32[$7 >> 2] = $5; //@line 31133
  sp = STACKTOP; //@line 31134
  return;
 }
 ___async_unwind = 0; //@line 31137
 HEAP32[$ReallocAsyncCtx9 >> 2] = 152; //@line 31138
 $6 = $ReallocAsyncCtx9 + 4 | 0; //@line 31139
 HEAP32[$6 >> 2] = $4; //@line 31140
 $7 = $ReallocAsyncCtx9 + 8 | 0; //@line 31141
 HEAP32[$7 >> 2] = $5; //@line 31142
 sp = STACKTOP; //@line 31143
 return;
}
function __ZN4mbed7TimeoutD2Ev($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2537
 HEAP32[$0 >> 2] = 10244; //@line 2538
 __ZN4mbed6Ticker6detachEv($0); //@line 2539
 $2 = HEAP32[$0 + 52 >> 2] | 0; //@line 2541
 do {
  if ($2 | 0) {
   $6 = HEAP32[$2 + 8 >> 2] | 0; //@line 2547
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2548
   FUNCTION_TABLE_vi[$6 & 1023]($0 + 40 | 0); //@line 2549
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 112; //@line 2552
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2554
    sp = STACKTOP; //@line 2555
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 2558
    break;
   }
  }
 } while (0);
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2563
 __ZN4mbed10TimerEventD2Ev($0); //@line 2564
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 113; //@line 2567
  sp = STACKTOP; //@line 2568
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 2571
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_117($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 27748
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27752
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27754
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 27755
 if (!$7) {
  HEAP32[___async_retval >> 2] = $4; //@line 27759
  return;
 }
 $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 27763
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 27764
 FUNCTION_TABLE_vi[$10 & 1023]($6); //@line 27765
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 275; //@line 27768
  $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 27769
  HEAP32[$11 >> 2] = $4; //@line 27770
  sp = STACKTOP; //@line 27771
  return;
 }
 ___async_unwind = 0; //@line 27774
 HEAP32[$ReallocAsyncCtx5 >> 2] = 275; //@line 27775
 $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 27776
 HEAP32[$11 >> 2] = $4; //@line 27777
 sp = STACKTOP; //@line 27778
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callIN6events5EventIS1_EEEEvPKv($0) {
 $0 = $0 | 0;
 var $1 = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 8074
 $1 = HEAP32[$0 >> 2] | 0; //@line 8075
 if ($1 | 0) {
  $4 = HEAP32[$1 + 20 >> 2] | 0; //@line 8079
  $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 8080
  $5 = FUNCTION_TABLE_ii[$4 & 15]($1) | 0; //@line 8081
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 696; //@line 8084
   HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 8086
   sp = STACKTOP; //@line 8087
   return;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 8090
  HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] = $5; //@line 8093
  if ($5 | 0) {
   return;
  }
 }
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 8099
 _mbed_assert_internal(15758, 15761, 149); //@line 8100
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 697; //@line 8103
  sp = STACKTOP; //@line 8104
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 8107
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $13 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17155
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 17161
  } else {
   $10 = HEAP32[$0 + 8 >> 2] | 0; //@line 17164
   $13 = HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] | 0; //@line 17167
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 17168
   FUNCTION_TABLE_viiiiii[$13 & 3]($10, $1, $2, $3, $4, $5); //@line 17169
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 728; //@line 17172
    sp = STACKTOP; //@line 17173
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 17176
    break;
   }
  }
 } while (0);
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_315($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 21977
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21981
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21983
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 21984
 if (!$7) {
  HEAP32[___async_retval >> 2] = $4; //@line 21988
  return;
 }
 $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 21992
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 21993
 FUNCTION_TABLE_vi[$10 & 1023]($6); //@line 21994
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 332; //@line 21997
  $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 21998
  HEAP32[$11 >> 2] = $4; //@line 21999
  sp = STACKTOP; //@line 22000
  return;
 }
 ___async_unwind = 0; //@line 22003
 HEAP32[$ReallocAsyncCtx5 >> 2] = 332; //@line 22004
 $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 22005
 HEAP32[$11 >> 2] = $4; //@line 22006
 sp = STACKTOP; //@line 22007
 return;
}
function _mbed_vtracef__async_cb_166($0) {
 $0 = $0 | 0;
 var $$pre = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 31081
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31083
 if (($2 | 0) <= 1) {
  return;
 }
 $4 = $2 + -1 | 0; //@line 31088
 $$pre = HEAP32[177] | 0; //@line 31089
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 31090
 FUNCTION_TABLE_v[$$pre & 15](); //@line 31091
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 152; //@line 31094
  $5 = $ReallocAsyncCtx9 + 4 | 0; //@line 31095
  HEAP32[$5 >> 2] = $2; //@line 31096
  $6 = $ReallocAsyncCtx9 + 8 | 0; //@line 31097
  HEAP32[$6 >> 2] = $4; //@line 31098
  sp = STACKTOP; //@line 31099
  return;
 }
 ___async_unwind = 0; //@line 31102
 HEAP32[$ReallocAsyncCtx9 >> 2] = 152; //@line 31103
 $5 = $ReallocAsyncCtx9 + 4 | 0; //@line 31104
 HEAP32[$5 >> 2] = $2; //@line 31105
 $6 = $ReallocAsyncCtx9 + 8 | 0; //@line 31106
 HEAP32[$6 >> 2] = $4; //@line 31107
 sp = STACKTOP; //@line 31108
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_140($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 29159
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29163
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29165
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 29166
 if (!$7) {
  HEAP32[___async_retval >> 2] = $4; //@line 29170
  return;
 }
 $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 29174
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 29175
 FUNCTION_TABLE_vi[$10 & 1023]($6); //@line 29176
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 229; //@line 29179
  $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 29180
  HEAP32[$11 >> 2] = $4; //@line 29181
  sp = STACKTOP; //@line 29182
  return;
 }
 ___async_unwind = 0; //@line 29185
 HEAP32[$ReallocAsyncCtx5 >> 2] = 229; //@line 29186
 $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 29187
 HEAP32[$11 >> 2] = $4; //@line 29188
 sp = STACKTOP; //@line 29189
 return;
}
function __ZN12LoRaWANStack8shutdownEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 11753
 STACKTOP = STACKTOP + 16 | 0; //@line 11754
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 11754
 $1 = sp; //@line 11755
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$0 = -1012; //@line 11760
  STACKTOP = sp; //@line 11761
  return $$0 | 0; //@line 11761
 }
 HEAP32[$1 >> 2] = 0; //@line 11763
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 11764
 __ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status($0, $1); //@line 11765
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 371; //@line 11768
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 11770
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 11772
  sp = STACKTOP; //@line 11773
  STACKTOP = sp; //@line 11774
  return 0; //@line 11774
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 11776
 $$0 = HEAP32[$1 >> 2] | 0; //@line 11778
 STACKTOP = sp; //@line 11779
 return $$0 | 0; //@line 11779
}
function _mbedtls_cipher_cmac_finish__async_cb_275($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17901
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17903
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17905
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17907
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17909
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17911
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17913
 $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 17914
 _mbedtls_platform_zeroize($2, 16); //@line 17915
 if (!___async) {
  ___async_unwind = 0; //@line 17918
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 608; //@line 17920
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $4; //@line 17922
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $6; //@line 17924
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $8; //@line 17926
 HEAP32[$ReallocAsyncCtx + 16 >> 2] = $10; //@line 17928
 HEAP32[$ReallocAsyncCtx + 20 >> 2] = $12; //@line 17930
 sp = STACKTOP; //@line 17931
 return;
}
function __ZN12LoRaWANStack12stop_sendingEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 11356
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 11357
 $1 = __ZN7LoRaMac13clear_tx_pipeEv($0) | 0; //@line 11358
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 367; //@line 11361
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 11363
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 11365
  sp = STACKTOP; //@line 11366
  return 0; //@line 11367
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 11369
 if ($1 | 0) {
  $$0 = -1e3; //@line 11372
  return $$0 | 0; //@line 11373
 }
 $5 = $0 + 2496 | 0; //@line 11375
 if ((HEAP32[$5 >> 2] | 0) != 8) {
  $$0 = -1e3; //@line 11379
  return $$0 | 0; //@line 11380
 }
 $8 = $0 + 2904 | 0; //@line 11382
 HEAP32[$8 >> 2] = HEAP32[$8 >> 2] & -18; //@line 11385
 __ZN7LoRaMac14set_tx_ongoingEb($0, 0); //@line 11386
 HEAP32[$5 >> 2] = 2; //@line 11387
 $$0 = 0; //@line 11388
 return $$0 | 0; //@line 11389
}
function __ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE__async_cb_219($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 13094
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13096
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13100
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13102
 __ZN7LoRaPHY21compute_rx_win_paramsEahjP18rx_config_params_t(HEAP32[$0 + 8 >> 2] | 0, HEAP8[$2 + 1916 >> 0] | 0, HEAP8[$2 + 1884 >> 0] | 0, HEAP32[$2 + 1880 >> 2] | 0, $2 + 1964 | 0); //@line 13112
 if ((HEAP32[$6 >> 2] | 0) != 2) {
  return;
 }
 _mbed_tracef(16, 12890, 13516, $8); //@line 13118
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 13119
 __ZN7LoRaMac15open_rx2_windowEv($2); //@line 13120
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 456; //@line 13123
  sp = STACKTOP; //@line 13124
  return;
 }
 ___async_unwind = 0; //@line 13127
 HEAP32[$ReallocAsyncCtx3 >> 2] = 456; //@line 13128
 sp = STACKTOP; //@line 13129
 return;
}
function _get_pkcs_padding($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$028 = 0, $$02930 = 0, $$031 = 0, $13 = 0, $23 = 0, $7 = 0, $8 = 0, $9 = 0;
 if (($0 | 0) == 0 | ($2 | 0) == 0) {
  $$028 = -24832; //@line 2515
  return $$028 | 0; //@line 2516
 }
 $7 = HEAP8[$0 + ($1 + -1) >> 0] | 0; //@line 2520
 $8 = $7 & 255; //@line 2521
 $9 = $1 - $8 | 0; //@line 2522
 HEAP32[$2 >> 2] = $9; //@line 2523
 $13 = ($7 << 24 >> 24 == 0 | $8 >>> 0 > $1 >>> 0) & 1; //@line 2527
 if (!$1) {
  $$0$lcssa = $13; //@line 2530
 } else {
  $$02930 = 0; //@line 2532
  $$031 = $13; //@line 2532
  while (1) {
   $23 = (($$02930 >>> 0 >= $9 >>> 0 ? (HEAP8[$0 + $$02930 >> 0] ^ $7) & 255 : 0) | $$031 & 255) & 255; //@line 2542
   $$02930 = $$02930 + 1 | 0; //@line 2543
   if (($$02930 | 0) == ($1 | 0)) {
    $$0$lcssa = $23; //@line 2546
    break;
   } else {
    $$031 = $23; //@line 2549
   }
  }
 }
 $$028 = $$0$lcssa << 24 >> 24 ? -25088 : 0; //@line 2555
 return $$028 | 0; //@line 2556
}
function __ZN16SX1276_LoRaRadio11tx_done_irqEv($0) {
 $0 = $0 | 0;
 var $4 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1812
 STACKTOP = STACKTOP + 16 | 0; //@line 1813
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 1813
 __ZN4mbed6Ticker6detachEv($0 + 1240 | 0); //@line 1816
 HEAP8[$0 + 688 >> 0] = 0; //@line 1818
 _mbed_tracef(8, 11040, 11464, sp); //@line 1819
 $4 = HEAP32[$0 + 788 >> 2] | 0; //@line 1821
 if (!$4) {
  STACKTOP = sp; //@line 1824
  return;
 }
 $7 = HEAP32[$4 + 12 >> 2] | 0; //@line 1827
 if (!$7) {
  STACKTOP = sp; //@line 1830
  return;
 }
 $9 = HEAP32[$7 >> 2] | 0; //@line 1832
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 1833
 FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 1834
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 96; //@line 1837
  sp = STACKTOP; //@line 1838
  STACKTOP = sp; //@line 1839
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 1841
 STACKTOP = sp; //@line 1842
 return;
}
function __ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $2 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 13574
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13576
 $6 = HEAP8[$0 + 10 >> 0] | 0; //@line 13580
 $9 = HEAP32[(HEAP32[$2 >> 2] | 0) + 20 >> 2] | 0; //@line 13583
 $10 = HEAPU16[$0 + 8 >> 1] | 0; //@line 13584
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 13585
 FUNCTION_TABLE_viiiiiiiiiiiiii[$9 & 1]($2, 0, $6, 0, 0, 4800, 0, 5, 0, 0, 0, 0, 0, $10); //@line 13586
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 68; //@line 13589
  $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 13590
  HEAP32[$11 >> 2] = $2; //@line 13591
  sp = STACKTOP; //@line 13592
  return;
 }
 ___async_unwind = 0; //@line 13595
 HEAP32[$ReallocAsyncCtx2 >> 2] = 68; //@line 13596
 $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 13597
 HEAP32[$11 >> 2] = $2; //@line 13598
 sp = STACKTOP; //@line 13599
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_145($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 29493
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29495
 $4 = HEAP16[$0 + 8 >> 1] | 0; //@line 29497
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29499
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29501
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29503
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 29504
 __ZN4mbed5Timer5startEv($2); //@line 29505
 if (!___async) {
  ___async_unwind = 0; //@line 29508
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 63; //@line 29510
 HEAP16[$ReallocAsyncCtx4 + 4 >> 1] = $4; //@line 29512
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $2; //@line 29514
 HEAP32[$ReallocAsyncCtx4 + 12 >> 2] = $6; //@line 29516
 HEAP32[$ReallocAsyncCtx4 + 16 >> 2] = $8; //@line 29518
 HEAP32[$ReallocAsyncCtx4 + 20 >> 2] = $10; //@line 29520
 sp = STACKTOP; //@line 29521
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $14 = 0, $17 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 18154
 $7 = HEAP32[$0 + 4 >> 2] | 0; //@line 18156
 $8 = $7 >> 8; //@line 18157
 if (!($7 & 1)) {
  $$0 = $8; //@line 18161
 } else {
  $$0 = HEAP32[(HEAP32[$3 >> 2] | 0) + $8 >> 2] | 0; //@line 18166
 }
 $14 = HEAP32[$0 >> 2] | 0; //@line 18168
 $17 = HEAP32[(HEAP32[$14 >> 2] | 0) + 20 >> 2] | 0; //@line 18171
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 18176
 FUNCTION_TABLE_viiiiii[$17 & 3]($14, $1, $2, $3 + $$0 | 0, $7 & 2 | 0 ? $4 : 2, $5); //@line 18177
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 744; //@line 18180
  sp = STACKTOP; //@line 18181
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 18184
  return;
 }
}
function __ZN7LoRaPHY11handle_sendEPhh__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 26926
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26928
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26930
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 26932
 $7 = HEAP32[$2 >> 2] | 0; //@line 26933
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 24 >> 2] | 0; //@line 26936
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 26937
 FUNCTION_TABLE_viii[$10 & 7]($7, $4, $6); //@line 26938
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 558; //@line 26941
  $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 26942
  HEAP32[$11 >> 2] = $2; //@line 26943
  sp = STACKTOP; //@line 26944
  return;
 }
 ___async_unwind = 0; //@line 26947
 HEAP32[$ReallocAsyncCtx2 >> 2] = 558; //@line 26948
 $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 26949
 HEAP32[$11 >> 2] = $2; //@line 26950
 sp = STACKTOP; //@line 26951
 return;
}
function __GLOBAL__sub_I_main_cpp() {
 var $AsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 7354
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7355
 __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_(19040, 9, 8, 7, 6, 23, 4, 5, 66, 67, 0, 1, -1, -1, -1, -1, 62, -1, -1); //@line 7356
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 667; //@line 7359
  sp = STACKTOP; //@line 7360
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7363
  __ZN5Sht31C2E7PinNameS0_(24460, 10, 11); //@line 7364
  __ZN4mbed11InterruptInC2E7PinName(20376, 1337); //@line 7365
  __ZN6events10EventQueueC2EjPh(20448, 1664, 0); //@line 7366
  __ZN16LoRaWANInterfaceC2ER9LoRaRadio(20652, 19040); //@line 7367
  dest = 23828; //@line 7368
  stop = dest + 48 | 0; //@line 7368
  do {
   HEAP32[dest >> 2] = 0; //@line 7368
   dest = dest + 4 | 0; //@line 7368
  } while ((dest | 0) < (stop | 0));
  return;
 }
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $11 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17324
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 17330
  } else {
   $8 = HEAP32[$0 + 8 >> 2] | 0; //@line 17333
   $11 = HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] | 0; //@line 17336
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 17337
   FUNCTION_TABLE_viiii[$11 & 7]($8, $1, $2, $3); //@line 17338
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 731; //@line 17341
    sp = STACKTOP; //@line 17342
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 17345
    break;
   }
  }
 } while (0);
 return;
}
function _mbed_error_vfprintf__async_cb_9($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 19272
 $2 = HEAP8[$0 + 4 >> 0] | 0; //@line 19274
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19276
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19278
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19280
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19282
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 19284
 _serial_putc(20368, $2 << 24 >> 24); //@line 19285
 if (!___async) {
  ___async_unwind = 0; //@line 19288
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 655; //@line 19290
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $4; //@line 19292
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 19294
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $8; //@line 19296
 HEAP8[$ReallocAsyncCtx2 + 16 >> 0] = $2; //@line 19298
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 19300
 sp = STACKTOP; //@line 19301
 return;
}
function ___dynamic_cast__async_cb_420($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $16 = 0, $6 = 0, $8 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30550
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30552
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30554
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 30560
 L2 : do {
  switch (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) {
  case 0:
   {
    $$0 = (HEAP32[$6 >> 2] | 0) == 1 & (HEAP32[$8 >> 2] | 0) == 1 & (HEAP32[$10 >> 2] | 0) == 1 ? HEAP32[HEAP32[$0 + 24 >> 2] >> 2] | 0 : 0; //@line 30575
    break;
   }
  case 1:
   {
    if ((HEAP32[HEAP32[$0 + 28 >> 2] >> 2] | 0) != 1) {
     if (!((HEAP32[$6 >> 2] | 0) == 0 & (HEAP32[$8 >> 2] | 0) == 1 & (HEAP32[$10 >> 2] | 0) == 1)) {
      $$0 = 0; //@line 30591
      break L2;
     }
    }
    $$0 = HEAP32[$16 >> 2] | 0; //@line 30596
    break;
   }
  default:
   {
    $$0 = 0; //@line 30600
   }
  }
 } while (0);
 HEAP32[___async_retval >> 2] = $$0; //@line 30605
 return;
}
function __ZN4mbed8CallbackIFvPKhtsaEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPKvS2_tsa($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$unpack$i = 0, $$unpack5$i = 0, $15 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8846
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 8849
 $$unpack5$i = HEAP32[$0 + 4 >> 2] | 0; //@line 8851
 $8 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack5$i >> 1) | 0; //@line 8853
 if (!($$unpack5$i & 1)) {
  $15 = $$unpack$i; //@line 8858
 } else {
  $15 = HEAP32[(HEAP32[$8 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 8863
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8865
 FUNCTION_TABLE_viiiii[$15 & 7]($8, $1, $2, $3, $4); //@line 8866
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 290; //@line 8869
  sp = STACKTOP; //@line 8870
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 8873
  return;
 }
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $13 = 0, $16 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 18196
 $6 = HEAP32[$0 + 4 >> 2] | 0; //@line 18198
 $7 = $6 >> 8; //@line 18199
 if (!($6 & 1)) {
  $$0 = $7; //@line 18203
 } else {
  $$0 = HEAP32[(HEAP32[$2 >> 2] | 0) + $7 >> 2] | 0; //@line 18208
 }
 $13 = HEAP32[$0 >> 2] | 0; //@line 18210
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 24 >> 2] | 0; //@line 18213
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 18218
 FUNCTION_TABLE_viiiii[$16 & 7]($13, $1, $2 + $$0 | 0, $6 & 2 | 0 ? $3 : 2, $4); //@line 18219
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 745; //@line 18222
  sp = STACKTOP; //@line 18223
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 18226
  return;
 }
}
function _ticker_remove_event($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6227
 $4 = (HEAP32[$0 + 4 >> 2] | 0) + 4 | 0; //@line 6230
 $5 = HEAP32[$4 >> 2] | 0; //@line 6231
 if (($5 | 0) == ($1 | 0)) {
  HEAP32[$4 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 6236
  $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6237
  _schedule_interrupt($0); //@line 6238
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 632; //@line 6241
   sp = STACKTOP; //@line 6242
   return;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6245
  return;
 } else {
  $$0 = $5; //@line 6248
 }
 do {
  if (!$$0) {
   label = 8; //@line 6253
   break;
  }
  $10 = $$0 + 12 | 0; //@line 6256
  $$0 = HEAP32[$10 >> 2] | 0; //@line 6257
 } while (($$0 | 0) != ($1 | 0));
 if ((label | 0) == 8) {
  return;
 }
 HEAP32[$10 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 6270
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_148($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 29665
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29669
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29671
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29673
 $10 = (HEAP32[___async_retval >> 2] | 0) >= (HEAP32[$0 + 4 >> 2] | 0); //@line 29676
 $13 = HEAP32[(HEAP32[$4 >> 2] | 0) + 8 >> 2] | 0; //@line 29679
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 29680
 FUNCTION_TABLE_vi[$13 & 1023]($4); //@line 29681
 if (!___async) {
  ___async_unwind = 0; //@line 29684
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 66; //@line 29686
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $6; //@line 29688
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $8; //@line 29690
 HEAP8[$ReallocAsyncCtx2 + 12 >> 0] = $10 & 1; //@line 29693
 sp = STACKTOP; //@line 29694
 return;
}
function _main__async_cb_378($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 26380
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26382
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26384
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26386
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26388
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26390
 $12 = HEAP32[$4 + 4 >> 2] | 0; //@line 26392
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 26393
 _equeue_dealloc($12, $4); //@line 26394
 if (!___async) {
  ___async_unwind = 0; //@line 26397
 }
 HEAP32[$ReallocAsyncCtx12 >> 2] = 676; //@line 26399
 HEAP32[$ReallocAsyncCtx12 + 4 >> 2] = $2; //@line 26401
 HEAP32[$ReallocAsyncCtx12 + 8 >> 2] = $10; //@line 26403
 HEAP32[$ReallocAsyncCtx12 + 12 >> 2] = $6; //@line 26405
 HEAP32[$ReallocAsyncCtx12 + 16 >> 2] = $8; //@line 26407
 sp = STACKTOP; //@line 26408
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $12 = 0, $15 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 18111
 $5 = HEAP32[$0 + 4 >> 2] | 0; //@line 18113
 $6 = $5 >> 8; //@line 18114
 if (!($5 & 1)) {
  $$0 = $6; //@line 18118
 } else {
  $$0 = HEAP32[(HEAP32[$2 >> 2] | 0) + $6 >> 2] | 0; //@line 18123
 }
 $12 = HEAP32[$0 >> 2] | 0; //@line 18125
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 28 >> 2] | 0; //@line 18128
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 18133
 FUNCTION_TABLE_viiii[$15 & 7]($12, $1, $2 + $$0 | 0, $5 & 2 | 0 ? $3 : 2); //@line 18134
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 743; //@line 18137
  sp = STACKTOP; //@line 18138
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 18141
  return;
 }
}
function __ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv__async_cb_340($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 23607
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23611
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23613
 $8 = HEAP16[$0 + 16 >> 1] | 0; //@line 23615
 $10 = HEAP16[$0 + 18 >> 1] | 0; //@line 23617
 $12 = HEAP8[$0 + 20 >> 0] | 0; //@line 23619
 $13 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 23621
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 23622
 FUNCTION_TABLE_viiiii[$13 & 7]($4, $6, $8, $10, $12); //@line 23623
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 309; //@line 23626
  sp = STACKTOP; //@line 23627
  return;
 }
 ___async_unwind = 0; //@line 23630
 HEAP32[$ReallocAsyncCtx >> 2] = 309; //@line 23631
 sp = STACKTOP; //@line 23632
 return;
}
function __ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_62($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 25048
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25050
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25052
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25054
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25056
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25058
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 25059
 __ZN7LoRaMac10disconnectEv($10); //@line 25060
 if (!___async) {
  ___async_unwind = 0; //@line 25063
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 348; //@line 25065
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $4; //@line 25067
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $6; //@line 25069
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $8; //@line 25071
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $2; //@line 25073
 sp = STACKTOP; //@line 25074
 return;
}
function __ZN7LoRaPHY18verify_tx_datarateEhb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$sink$in = 0, $$sink6 = 0, $3 = 0;
 $3 = $1 << 24 >> 24; //@line 22843
 if (($3 | 0) >= (HEAPU8[$0 + 92 >> 0] | 0)) {
  $$0 = 0; //@line 22849
  return $$0 | 0; //@line 22850
 }
 if (!(HEAP8[(HEAP32[$0 + 88 >> 2] | 0) + $3 >> 0] | 0)) {
  $$0 = 0; //@line 22858
  return $$0 | 0; //@line 22859
 }
 do {
  if ($2) {
   $$sink$in = $0 + 30 | 0; //@line 22865
   $$sink6 = $0 + 31 | 0; //@line 22865
  } else {
   if (!(HEAP8[$0 + 128 >> 0] & 1)) {
    $$sink$in = $0 + 26 | 0; //@line 22874
    $$sink6 = $0 + 27 | 0; //@line 22874
    break;
   } else {
    $$sink$in = $0 + 35 | 0; //@line 22879
    $$sink6 = $0 + 27 | 0; //@line 22879
    break;
   }
  }
 } while (0);
 $$0 = (HEAP8[$$sink$in >> 0] | 0) <= $1 << 24 >> 24 ? (HEAP8[$$sink6 >> 0] | 0) >= $1 << 24 >> 24 : 0; //@line 22889
 return $$0 | 0; //@line 22890
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_149($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 29700
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29702
 $4 = HEAP16[$0 + 8 >> 1] | 0; //@line 29704
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29706
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29708
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 29709
 __ZN4mbed5TimerC2Ev($2); //@line 29710
 if (!___async) {
  ___async_unwind = 0; //@line 29713
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 62; //@line 29715
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 29717
 HEAP16[$ReallocAsyncCtx3 + 8 >> 1] = $4; //@line 29719
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 29721
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 29723
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $2; //@line 29725
 sp = STACKTOP; //@line 29726
 return;
}
function __ZN16LoRaWANInterface7receiveEhPhti($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5507
 STACKTOP = STACKTOP + 16 | 0; //@line 5508
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 5508
 $5 = sp + 4 | 0; //@line 5509
 $6 = sp; //@line 5510
 HEAP8[$5 >> 0] = $1; //@line 5511
 HEAP32[$6 >> 2] = $4; //@line 5512
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5514
 $8 = __ZN12LoRaWANStack9handle_rxEPhtRhRib($0 + 4 | 0, $2, $3, $5, $6, 1) | 0; //@line 5515
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 161; //@line 5518
  sp = STACKTOP; //@line 5519
  STACKTOP = sp; //@line 5520
  return 0; //@line 5520
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5522
  STACKTOP = sp; //@line 5523
  return $8 | 0; //@line 5523
 }
 return 0; //@line 5525
}
function __ZN16SX1276_LoRaRadio4sendEPhh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 348
 switch (HEAP8[$0 + 689 >> 0] | 0) {
 case 0:
  {
   _emscripten_asm_const_iiiiiii(0, HEAP32[$0 + 692 >> 2] | 0, HEAP8[$0 + 696 >> 0] | 0, HEAP32[$0 + 704 >> 2] | 0, HEAP32[$0 + 712 >> 2] | 0, $1 | 0, $2 & 255 | 0) | 0; //@line 363
   break;
  }
 case 1:
  {
   _emscripten_asm_const_iiiiiii(1, HEAP32[$0 + 692 >> 2] | 0, HEAP8[$0 + 748 >> 0] | 0, HEAP32[$0 + 752 >> 2] | 0, HEAP32[$0 + 756 >> 2] | 0, $1 | 0, $2 & 255 | 0) | 0; //@line 377
   break;
  }
 default:
  {}
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 383
 __ZN16SX1276_LoRaRadio8transmitEj($0, 0); //@line 384
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 50; //@line 387
  sp = STACKTOP; //@line 388
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 391
  return;
 }
}
function __ZN7LoRaPHY14remove_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $15 = 0, $25 = 0, $4 = 0, $5 = 0;
 $4 = $1 & 255; //@line 21759
 $5 = $4 >>> 4; //@line 21760
 $10 = 1 << ($4 & 15); //@line 21765
 if ($10 & (HEAPU16[(HEAP32[$0 + 120 >> 2] | 0) + ($5 << 1) >> 1] | 0) | 0) {
  $$0 = 0; //@line 21769
  return $$0 | 0; //@line 21770
 }
 $15 = (HEAP32[$0 + 124 >> 2] | 0) + ($4 * 12 | 0) | 0; //@line 21774
 HEAP32[$15 >> 2] = 0; //@line 21775
 HEAP32[$15 + 4 >> 2] = 0; //@line 21775
 HEAP32[$15 + 8 >> 2] = 0; //@line 21775
 if (!((HEAPU8[$0 + 20 >> 0] | 0) > ($1 & 255) ? (($1 & 255) >>> 4 & 255) <= (HEAPU8[$0 + 113 >> 0] | 0) : 0)) {
  $$0 = 0; //@line 21785
  return $$0 | 0; //@line 21786
 }
 $25 = (HEAP32[$0 + 116 >> 2] | 0) + ($5 << 1) | 0; //@line 21791
 HEAP16[$25 >> 1] = ($10 ^ 65535) & (HEAPU16[$25 >> 1] | 0); //@line 21796
 $$0 = 1; //@line 21797
 return $$0 | 0; //@line 21798
}
function __ZN7LoRaPHY13get_radio_rngEv__async_cb_123($0) {
 $0 = $0 | 0;
 var $4 = 0, $7 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 28250
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 28254
 $4 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 28255
 $7 = HEAP32[(HEAP32[$4 >> 2] | 0) + 76 >> 2] | 0; //@line 28258
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 28259
 FUNCTION_TABLE_vi[$7 & 1023]($4); //@line 28260
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 556; //@line 28263
  $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 28264
  HEAP32[$8 >> 2] = $AsyncRetVal; //@line 28265
  sp = STACKTOP; //@line 28266
  return;
 }
 ___async_unwind = 0; //@line 28269
 HEAP32[$ReallocAsyncCtx3 >> 2] = 556; //@line 28270
 $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 28271
 HEAP32[$8 >> 2] = $AsyncRetVal; //@line 28272
 sp = STACKTOP; //@line 28273
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 29445
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29447
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29449
 $6 = HEAP16[$0 + 12 >> 1] | 0; //@line 29451
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29453
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($2); //@line 29454
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(20) | 0; //@line 29455
 _wait_ms(1); //@line 29456
 if (!___async) {
  ___async_unwind = 0; //@line 29459
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 61; //@line 29461
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $4; //@line 29463
 HEAP16[$ReallocAsyncCtx7 + 8 >> 1] = $6; //@line 29465
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $8; //@line 29467
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $2; //@line 29469
 sp = STACKTOP; //@line 29470
 return;
}
function __ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb_377($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 26180
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26184
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26186
 if ((HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) != 2) {
  HEAP32[___async_retval >> 2] = HEAP32[$6 >> 2]; //@line 26192
  return;
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 26195
 __ZN7LoRaMac15open_rx2_windowEv($4); //@line 26196
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 421; //@line 26199
  $8 = $ReallocAsyncCtx + 4 | 0; //@line 26200
  HEAP32[$8 >> 2] = $6; //@line 26201
  sp = STACKTOP; //@line 26202
  return;
 }
 ___async_unwind = 0; //@line 26205
 HEAP32[$ReallocAsyncCtx >> 2] = 421; //@line 26206
 $8 = $ReallocAsyncCtx + 4 | 0; //@line 26207
 HEAP32[$8 >> 2] = $6; //@line 26208
 sp = STACKTOP; //@line 26209
 return;
}
function __ZN7LoRaPHY25setup_public_network_modeEb__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 28839
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28841
 $4 = HEAP8[$0 + 8 >> 0] & 1; //@line 28844
 $5 = HEAP32[$2 >> 2] | 0; //@line 28845
 $8 = HEAP32[(HEAP32[$5 >> 2] | 0) + 48 >> 2] | 0; //@line 28848
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 28849
 FUNCTION_TABLE_vii[$8 & 15]($5, $4); //@line 28850
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 548; //@line 28853
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 28854
  HEAP32[$9 >> 2] = $2; //@line 28855
  sp = STACKTOP; //@line 28856
  return;
 }
 ___async_unwind = 0; //@line 28859
 HEAP32[$ReallocAsyncCtx2 >> 2] = 548; //@line 28860
 $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 28861
 HEAP32[$9 >> 2] = $2; //@line 28862
 sp = STACKTOP; //@line 28863
 return;
}
function __ZN7LoRaPHY13get_radio_rngEv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 28221
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28223
 $3 = HEAP32[$2 >> 2] | 0; //@line 28224
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 36 >> 2] | 0; //@line 28227
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 28228
 $7 = FUNCTION_TABLE_ii[$6 & 15]($3) | 0; //@line 28229
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 555; //@line 28232
  $8 = $ReallocAsyncCtx2 + 4 | 0; //@line 28233
  HEAP32[$8 >> 2] = $2; //@line 28234
  sp = STACKTOP; //@line 28235
  return;
 }
 HEAP32[___async_retval >> 2] = $7; //@line 28239
 ___async_unwind = 0; //@line 28240
 HEAP32[$ReallocAsyncCtx2 >> 2] = 555; //@line 28241
 $8 = $ReallocAsyncCtx2 + 4 | 0; //@line 28242
 HEAP32[$8 >> 2] = $2; //@line 28243
 sp = STACKTOP; //@line 28244
 return;
}
function __ZN7LoRaMacD2Ev__async_cb_287($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 19116
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19118
 $4 = HEAP32[$2 + 748 >> 2] | 0; //@line 19120
 if (!$4) {
  __ZN12LoRaPHYEU868D2Ev($2 + 4 | 0); //@line 19124
  return;
 }
 $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 19129
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 19130
 FUNCTION_TABLE_vi[$8 & 1023]($2 + 736 | 0); //@line 19131
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 381; //@line 19134
  $9 = $ReallocAsyncCtx6 + 4 | 0; //@line 19135
  HEAP32[$9 >> 2] = $2; //@line 19136
  sp = STACKTOP; //@line 19137
  return;
 }
 ___async_unwind = 0; //@line 19140
 HEAP32[$ReallocAsyncCtx6 >> 2] = 381; //@line 19141
 $9 = $ReallocAsyncCtx6 + 4 | 0; //@line 19142
 HEAP32[$9 >> 2] = $2; //@line 19143
 sp = STACKTOP; //@line 19144
 return;
}
function __ZN16SX1276_LoRaRadio8transmitEj__async_cb_121($0) {
 $0 = $0 | 0;
 var $12 = 0, $2 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 28180
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28182
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28186
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28188
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 >> 2]; //@line 28190
 __ZN4mbed6Ticker5setupEy($6, 1e5, 0); //@line 28191
 $9 = HEAP32[$2 >> 2] | 0; //@line 28192
 if (!$9) {
  return;
 }
 $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 28198
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 28199
 FUNCTION_TABLE_vi[$12 & 1023]($8); //@line 28200
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 95; //@line 28203
  sp = STACKTOP; //@line 28204
  return;
 }
 ___async_unwind = 0; //@line 28207
 HEAP32[$ReallocAsyncCtx3 >> 2] = 95; //@line 28208
 sp = STACKTOP; //@line 28209
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_35($0) {
 $0 = $0 | 0;
 var $12 = 0, $2 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 23750
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23752
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23756
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23758
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 >> 2]; //@line 23760
 __ZN4mbed6Ticker5setupEy($6, 2e5, 0); //@line 23761
 $9 = HEAP32[$2 >> 2] | 0; //@line 23762
 if (!$9) {
  return;
 }
 $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 23768
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 23769
 FUNCTION_TABLE_vi[$12 & 1023]($8); //@line 23770
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 54; //@line 23773
  sp = STACKTOP; //@line 23774
  return;
 }
 ___async_unwind = 0; //@line 23777
 HEAP32[$ReallocAsyncCtx3 >> 2] = 54; //@line 23778
 sp = STACKTOP; //@line 23779
 return;
}
function _pad_676($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$lcssa = 0, $$011 = 0, $14 = 0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 14213
 STACKTOP = STACKTOP + 256 | 0; //@line 14214
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256); //@line 14214
 $5 = sp; //@line 14215
 if (($2 | 0) > ($3 | 0) & ($4 & 73728 | 0) == 0) {
  $9 = $2 - $3 | 0; //@line 14221
  _memset($5 | 0, $1 << 24 >> 24 | 0, ($9 >>> 0 < 256 ? $9 : 256) | 0) | 0; //@line 14225
  if ($9 >>> 0 > 255) {
   $14 = $2 - $3 | 0; //@line 14228
   $$011 = $9; //@line 14229
   do {
    _out_670($0, $5, 256); //@line 14231
    $$011 = $$011 + -256 | 0; //@line 14232
   } while ($$011 >>> 0 > 255);
   $$0$lcssa = $14 & 255; //@line 14241
  } else {
   $$0$lcssa = $9; //@line 14243
  }
  _out_670($0, $5, $$0$lcssa); //@line 14245
 }
 STACKTOP = sp; //@line 14247
 return;
}
function _mbedtls_ccm_setkey__async_cb_391($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 27239
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27241
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27243
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27245
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 27247
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 27251
  return;
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 27254
 $9 = _mbedtls_cipher_setkey($2, $4, $6, 1) | 0; //@line 27255
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 574; //@line 27258
  sp = STACKTOP; //@line 27259
  return;
 }
 HEAP32[___async_retval >> 2] = $9; //@line 27263
 ___async_unwind = 0; //@line 27264
 HEAP32[$ReallocAsyncCtx >> 2] = 574; //@line 27265
 sp = STACKTOP; //@line 27266
 return;
}
function __ZN4mbed11InterruptInD0Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 18295
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18297
 $4 = HEAP32[$2 + 52 >> 2] | 0; //@line 18299
 if (!$4) {
  __ZdlPv($2); //@line 18302
  return;
 }
 $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 18307
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 18308
 FUNCTION_TABLE_vi[$8 & 1023]($2 + 40 | 0); //@line 18309
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 104; //@line 18312
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 18313
  HEAP32[$9 >> 2] = $2; //@line 18314
  sp = STACKTOP; //@line 18315
  return;
 }
 ___async_unwind = 0; //@line 18318
 HEAP32[$ReallocAsyncCtx2 >> 2] = 104; //@line 18319
 $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 18320
 HEAP32[$9 >> 2] = $2; //@line 18321
 sp = STACKTOP; //@line 18322
 return;
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_182($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 32374
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32378
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32380
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32382
 HEAP32[$4 + 1788 >> 2] = __ZN18LoRaWANTimeHandler16get_current_timeEv(HEAP32[$0 + 4 >> 2] | 0) | 0; //@line 32385
 HEAP8[$4 + 1936 >> 0] = 1; //@line 32387
 HEAP8[$6 >> 0] = 1; //@line 32388
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(4) | 0; //@line 32389
 __ZN7LoRaPHY25setup_public_network_modeEb($8, 1); //@line 32390
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 474; //@line 32393
  sp = STACKTOP; //@line 32394
  return;
 }
 ___async_unwind = 0; //@line 32397
 HEAP32[$ReallocAsyncCtx10 >> 2] = 474; //@line 32398
 sp = STACKTOP; //@line 32399
 return;
}
function ___stdio_seek($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $3 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 11508
 STACKTOP = STACKTOP + 32 | 0; //@line 11509
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 11509
 $vararg_buffer = sp; //@line 11510
 $3 = sp + 20 | 0; //@line 11511
 HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2]; //@line 11515
 HEAP32[$vararg_buffer + 4 >> 2] = 0; //@line 11517
 HEAP32[$vararg_buffer + 8 >> 2] = $1; //@line 11519
 HEAP32[$vararg_buffer + 12 >> 2] = $3; //@line 11521
 HEAP32[$vararg_buffer + 16 >> 2] = $2; //@line 11523
 if ((___syscall_ret(___syscall140(140, $vararg_buffer | 0) | 0) | 0) < 0) {
  HEAP32[$3 >> 2] = -1; //@line 11528
  $10 = -1; //@line 11529
 } else {
  $10 = HEAP32[$3 >> 2] | 0; //@line 11532
 }
 STACKTOP = sp; //@line 11534
 return $10 | 0; //@line 11534
}
function __ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_308($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 21377
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21379
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  HEAP8[$2 >> 0] = (HEAP8[$2 >> 0] | 0) + 1 << 24 >> 24; //@line 21386
  return;
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 21389
 _mbed_assert_internal(13109, 13135, 958); //@line 21390
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 445; //@line 21393
  $5 = $ReallocAsyncCtx5 + 4 | 0; //@line 21394
  HEAP32[$5 >> 2] = $2; //@line 21395
  sp = STACKTOP; //@line 21396
  return;
 }
 ___async_unwind = 0; //@line 21399
 HEAP32[$ReallocAsyncCtx5 >> 2] = 445; //@line 21400
 $5 = $ReallocAsyncCtx5 + 4 | 0; //@line 21401
 HEAP32[$5 >> 2] = $2; //@line 21402
 sp = STACKTOP; //@line 21403
 return;
}
function __ZN4mbed5Timer5startEv($0) {
 $0 = $0 | 0;
 var $13 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2785
 if (HEAP32[$0 >> 2] | 0) {
  return;
 }
 if (HEAP8[$0 + 28 >> 0] | 0) {
  _sleep_manager_lock_deep_sleep_internal(); //@line 2795
 }
 $7 = HEAP32[$0 + 24 >> 2] | 0; //@line 2798
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 2799
 $8 = _ticker_read_us($7) | 0; //@line 2800
 $9 = tempRet0; //@line 2801
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 121; //@line 2804
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2806
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 2808
  sp = STACKTOP; //@line 2809
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2812
 $13 = $0 + 8 | 0; //@line 2814
 HEAP32[$13 >> 2] = $8; //@line 2816
 HEAP32[$13 + 4 >> 2] = $9; //@line 2819
 HEAP32[$0 >> 2] = 1; //@line 2820
 return;
}
function __ZN4mbed7Timeout7handlerEv__async_cb_354($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 24604
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24608
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 24609
 if (!$5) {
  return;
 }
 $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 24615
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 24616
 FUNCTION_TABLE_vi[$8 & 1023]($4); //@line 24617
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 119; //@line 24620
  $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 24621
  HEAP32[$9 >> 2] = $4; //@line 24622
  sp = STACKTOP; //@line 24623
  return;
 }
 ___async_unwind = 0; //@line 24626
 HEAP32[$ReallocAsyncCtx3 >> 2] = 119; //@line 24627
 $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 24628
 HEAP32[$9 >> 2] = $4; //@line 24629
 sp = STACKTOP; //@line 24630
 return;
}
function __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0) {
 $0 = $0 | 0;
 var $13 = 0;
 if ((HEAP32[$0 + 652 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(5, HEAP32[$0 + 484 >> 2] | 0, 0) | 0; //@line 1335
 }
 if ((HEAP32[$0 + 656 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(5, HEAP32[$0 + 508 >> 2] | 0, 0) | 0; //@line 1343
 }
 if ((HEAP32[$0 + 672 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(5, HEAP32[$0 + 604 >> 2] | 0, 0) | 0; //@line 1351
 }
 $13 = $0 + 660 | 0; //@line 1353
 if ((HEAP32[$13 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(5, HEAP32[$0 + 532 >> 2] | 0, 0) | 0; //@line 1359
  if ((HEAP32[$13 >> 2] | 0) != -1) {
   _emscripten_asm_const_iii(5, HEAP32[$0 + 556 >> 2] | 0, 0) | 0; //@line 1365
  }
 }
 if ((HEAP32[$0 + 668 >> 2] | 0) == -1) {
  return;
 }
 _emscripten_asm_const_iii(5, HEAP32[$0 + 580 >> 2] | 0, 0) | 0; //@line 1376
 return;
}
function __ZN4mbed8CallbackIFvbEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPKvb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$unpack$i = 0, $$unpack2$i = 0, $12 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7372
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 7375
 $$unpack2$i = HEAP32[$0 + 4 >> 2] | 0; //@line 7377
 $5 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack2$i >> 1) | 0; //@line 7379
 if (!($$unpack2$i & 1)) {
  $12 = $$unpack$i; //@line 7384
 } else {
  $12 = HEAP32[(HEAP32[$5 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 7389
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7391
 FUNCTION_TABLE_vii[$12 & 15]($5, $1); //@line 7392
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 233; //@line 7395
  sp = STACKTOP; //@line 7396
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7399
  return;
 }
}
function _mbed_assert_internal($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $AsyncCtx = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 6475
 STACKTOP = STACKTOP + 16 | 0; //@line 6476
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 6476
 $vararg_buffer = sp; //@line 6477
 HEAP32[$vararg_buffer >> 2] = $0; //@line 6478
 HEAP32[$vararg_buffer + 4 >> 2] = $1; //@line 6480
 HEAP32[$vararg_buffer + 8 >> 2] = $2; //@line 6482
 _mbed_error_printf(14550, $vararg_buffer); //@line 6483
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6484
 _mbed_die(); //@line 6485
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 635; //@line 6488
  sp = STACKTOP; //@line 6489
  STACKTOP = sp; //@line 6490
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6492
  STACKTOP = sp; //@line 6493
  return;
 }
}
function _schedule_interrupt__async_cb_395($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 27648
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27650
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27652
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27654
 $9 = HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0; //@line 27657
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(16) | 0; //@line 27658
 $10 = FUNCTION_TABLE_i[$9 & 7]() | 0; //@line 27659
 if (!___async) {
  HEAP32[___async_retval >> 2] = $10; //@line 27663
  ___async_unwind = 0; //@line 27664
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 629; //@line 27666
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $4; //@line 27668
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $6; //@line 27670
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $2; //@line 27672
 sp = STACKTOP; //@line 27673
 return;
}
function __ZN12LoRaWANStack12stop_sendingEv__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $13 = 0, $2 = 0, $4 = 0, $7 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23981
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23983
 if (HEAP32[___async_retval >> 2] | 0) {
  $$0 = -1e3; //@line 23988
  $13 = ___async_retval; //@line 23989
  HEAP32[$13 >> 2] = $$0; //@line 23990
  return;
 }
 $7 = $2 + 2496 | 0; //@line 23993
 if ((HEAP32[$7 >> 2] | 0) != 8) {
  $$0 = -1e3; //@line 23997
  $13 = ___async_retval; //@line 23998
  HEAP32[$13 >> 2] = $$0; //@line 23999
  return;
 }
 $10 = $2 + 2904 | 0; //@line 24002
 HEAP32[$10 >> 2] = HEAP32[$10 >> 2] & -18; //@line 24005
 __ZN7LoRaMac14set_tx_ongoingEb($4, 0); //@line 24006
 HEAP32[$7 >> 2] = 2; //@line 24007
 $$0 = 0; //@line 24008
 $13 = ___async_retval; //@line 24009
 HEAP32[$13 >> 2] = $$0; //@line 24010
 return;
}
function _printf($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $2 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16292
 STACKTOP = STACKTOP + 16 | 0; //@line 16293
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16293
 $1 = sp; //@line 16294
 HEAP32[$1 >> 2] = $varargs; //@line 16295
 $2 = HEAP32[2604] | 0; //@line 16296
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 16297
 $3 = _vfprintf($2, $0, $1) | 0; //@line 16298
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 715; //@line 16301
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 16303
  sp = STACKTOP; //@line 16304
  STACKTOP = sp; //@line 16305
  return 0; //@line 16305
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 16307
  STACKTOP = sp; //@line 16308
  return $3 | 0; //@line 16308
 }
 return 0; //@line 16310
}
function __ZN7LoRaPHY20put_radio_to_standbyEv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 29742
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29744
 $3 = HEAP32[$2 >> 2] | 0; //@line 29745
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] | 0; //@line 29748
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 29749
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 29750
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 545; //@line 29753
  $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 29754
  HEAP32[$7 >> 2] = $2; //@line 29755
  sp = STACKTOP; //@line 29756
  return;
 }
 ___async_unwind = 0; //@line 29759
 HEAP32[$ReallocAsyncCtx2 >> 2] = 545; //@line 29760
 $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 29761
 HEAP32[$7 >> 2] = $2; //@line 29762
 sp = STACKTOP; //@line 29763
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPKv($0) {
 $0 = $0 | 0;
 var $$unpack$i = 0, $$unpack2$i = 0, $11 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10316
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 10319
 $$unpack2$i = HEAP32[$0 + 4 >> 2] | 0; //@line 10321
 $4 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack2$i >> 1) | 0; //@line 10323
 if (!($$unpack2$i & 1)) {
  $11 = $$unpack$i; //@line 10328
 } else {
  $11 = HEAP32[(HEAP32[$4 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 10333
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10335
 FUNCTION_TABLE_vi[$11 & 1023]($4); //@line 10336
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 340; //@line 10339
  sp = STACKTOP; //@line 10340
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10343
  return;
 }
}
function _snprintf($0, $1, $2, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $varargs = $varargs | 0;
 var $3 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16092
 STACKTOP = STACKTOP + 16 | 0; //@line 16093
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16093
 $3 = sp; //@line 16094
 HEAP32[$3 >> 2] = $varargs; //@line 16095
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 16096
 $4 = _vsnprintf($0, $1, $2, $3) | 0; //@line 16097
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 711; //@line 16100
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 16102
  sp = STACKTOP; //@line 16103
  STACKTOP = sp; //@line 16104
  return 0; //@line 16104
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 16106
  STACKTOP = sp; //@line 16107
  return $4 | 0; //@line 16107
 }
 return 0; //@line 16109
}
function _initialize__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 29439
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29441
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29443
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29445
 $9 = HEAP32[(HEAP32[$4 >> 2] | 0) + 24 >> 2] | 0; //@line 29448
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 29449
 $10 = FUNCTION_TABLE_i[$9 & 7]() | 0; //@line 29450
 if (!___async) {
  HEAP32[___async_retval >> 2] = $10; //@line 29454
  ___async_unwind = 0; //@line 29455
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 619; //@line 29457
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 29459
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 29461
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 29463
 sp = STACKTOP; //@line 29464
 return;
}
function __ZN7LoRaPHY18put_radio_to_sleepEv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 31572
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31574
 $3 = HEAP32[$2 >> 2] | 0; //@line 31575
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] | 0; //@line 31578
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 31579
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 31580
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 542; //@line 31583
  $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 31584
  HEAP32[$7 >> 2] = $2; //@line 31585
  sp = STACKTOP; //@line 31586
  return;
 }
 ___async_unwind = 0; //@line 31589
 HEAP32[$ReallocAsyncCtx2 >> 2] = 542; //@line 31590
 $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 31591
 HEAP32[$7 >> 2] = $2; //@line 31592
 sp = STACKTOP; //@line 31593
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv($0) {
 $0 = $0 | 0;
 var $$unpack$i = 0, $$unpack2$i = 0, $11 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16752
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 16755
 $$unpack2$i = HEAP32[$0 + 4 >> 2] | 0; //@line 16757
 $4 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack2$i >> 1) | 0; //@line 16759
 if (!($$unpack2$i & 1)) {
  $11 = $$unpack$i; //@line 16764
 } else {
  $11 = HEAP32[(HEAP32[$4 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 16769
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 16771
 FUNCTION_TABLE_vi[$11 & 1023]($4); //@line 16772
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 475; //@line 16775
  sp = STACKTOP; //@line 16776
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 16779
  return;
 }
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv($0) {
 $0 = $0 | 0;
 var $$unpack$i = 0, $$unpack2$i = 0, $11 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1656
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 1659
 $$unpack2$i = HEAP32[$0 + 4 >> 2] | 0; //@line 1661
 $4 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack2$i >> 1) | 0; //@line 1663
 if (!($$unpack2$i & 1)) {
  $11 = $$unpack$i; //@line 1668
 } else {
  $11 = HEAP32[(HEAP32[$4 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 1673
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 1675
 FUNCTION_TABLE_vi[$11 & 1023]($4); //@line 1676
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 91; //@line 1679
  sp = STACKTOP; //@line 1680
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1683
  return;
 }
}
function _mbedtls_ccm_setkey__async_cb_392($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 27272
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27274
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27276
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27278
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27280
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 27281
 $9 = _mbedtls_cipher_setup($2, $4) | 0; //@line 27282
 if (!___async) {
  HEAP32[___async_retval >> 2] = $9; //@line 27286
  ___async_unwind = 0; //@line 27287
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 573; //@line 27289
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 27291
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 27293
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $8; //@line 27295
 sp = STACKTOP; //@line 27296
 return;
}
function _mbed_vtracef__async_cb_165($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 31051
 HEAP32[171] = HEAP32[169]; //@line 31053
 $2 = HEAP32[177] | 0; //@line 31054
 if (!$2) {
  return;
 }
 $4 = HEAP32[178] | 0; //@line 31059
 HEAP32[178] = 0; //@line 31060
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 31061
 FUNCTION_TABLE_v[$2 & 15](); //@line 31062
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 151; //@line 31065
  $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 31066
  HEAP32[$5 >> 2] = $4; //@line 31067
  sp = STACKTOP; //@line 31068
  return;
 }
 ___async_unwind = 0; //@line 31071
 HEAP32[$ReallocAsyncCtx8 >> 2] = 151; //@line 31072
 $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 31073
 HEAP32[$5 >> 2] = $4; //@line 31074
 sp = STACKTOP; //@line 31075
 return;
}
function _mbed_vtracef__async_cb_162($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 30787
 HEAP32[171] = HEAP32[169]; //@line 30789
 $2 = HEAP32[177] | 0; //@line 30790
 if (!$2) {
  return;
 }
 $4 = HEAP32[178] | 0; //@line 30795
 HEAP32[178] = 0; //@line 30796
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 30797
 FUNCTION_TABLE_v[$2 & 15](); //@line 30798
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 151; //@line 30801
  $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 30802
  HEAP32[$5 >> 2] = $4; //@line 30803
  sp = STACKTOP; //@line 30804
  return;
 }
 ___async_unwind = 0; //@line 30807
 HEAP32[$ReallocAsyncCtx8 >> 2] = 151; //@line 30808
 $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 30809
 HEAP32[$5 >> 2] = $4; //@line 30810
 sp = STACKTOP; //@line 30811
 return;
}
function _mbed_vtracef__async_cb_161($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 30757
 HEAP32[171] = HEAP32[169]; //@line 30759
 $2 = HEAP32[177] | 0; //@line 30760
 if (!$2) {
  return;
 }
 $4 = HEAP32[178] | 0; //@line 30765
 HEAP32[178] = 0; //@line 30766
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 30767
 FUNCTION_TABLE_v[$2 & 15](); //@line 30768
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 151; //@line 30771
  $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 30772
  HEAP32[$5 >> 2] = $4; //@line 30773
  sp = STACKTOP; //@line 30774
  return;
 }
 ___async_unwind = 0; //@line 30777
 HEAP32[$ReallocAsyncCtx8 >> 2] = 151; //@line 30778
 $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 30779
 HEAP32[$5 >> 2] = $4; //@line 30780
 sp = STACKTOP; //@line 30781
 return;
}
function _mbedtls_cipher_info_from_values($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$010 = 0, $$011 = 0, $3 = 0, $6 = 0, label = 0;
 $3 = HEAP32[2374] | 0; //@line 2302
 if (!$3) {
  $$010 = 0; //@line 2305
  return $$010 | 0; //@line 2306
 } else {
  $$011 = 9492; //@line 2308
  $6 = $3; //@line 2308
 }
 while (1) {
  if ((HEAP32[HEAP32[$6 + 28 >> 2] >> 2] | 0) == ($0 | 0)) {
   if ((HEAP32[$6 + 8 >> 2] | 0) == ($1 | 0)) {
    if ((HEAP32[$6 + 4 >> 2] | 0) == ($2 | 0)) {
     $$010 = $6; //@line 2324
     label = 6; //@line 2325
     break;
    }
   }
  }
  $6 = HEAP32[$$011 + 12 >> 2] | 0; //@line 2332
  if (!$6) {
   $$010 = 0; //@line 2335
   label = 6; //@line 2336
   break;
  } else {
   $$011 = $$011 + 8 | 0; //@line 2339
  }
 }
 if ((label | 0) == 6) {
  return $$010 | 0; //@line 2343
 }
 return 0; //@line 2345
}
function _sprintf($0, $1, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $varargs = $varargs | 0;
 var $2 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16214
 STACKTOP = STACKTOP + 16 | 0; //@line 16215
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16215
 $2 = sp; //@line 16216
 HEAP32[$2 >> 2] = $varargs; //@line 16217
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 16218
 $3 = _vsprintf($0, $1, $2) | 0; //@line 16219
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 713; //@line 16222
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 16224
  sp = STACKTOP; //@line 16225
  STACKTOP = sp; //@line 16226
  return 0; //@line 16226
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 16228
  STACKTOP = sp; //@line 16229
  return $3 | 0; //@line 16229
 }
 return 0; //@line 16231
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_401($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 27873
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27875
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27877
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 27879
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($4, $2 + 1856 | 0); //@line 27880
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 416; //@line 27883
  $6 = $ReallocAsyncCtx3 + 4 | 0; //@line 27884
  HEAP32[$6 >> 2] = $2; //@line 27885
  sp = STACKTOP; //@line 27886
  return;
 }
 ___async_unwind = 0; //@line 27889
 HEAP32[$ReallocAsyncCtx3 >> 2] = 416; //@line 27890
 $6 = $ReallocAsyncCtx3 + 4 | 0; //@line 27891
 HEAP32[$6 >> 2] = $2; //@line 27892
 sp = STACKTOP; //@line 27893
 return;
}
function __ZN16LoRaWANInterface16set_device_classE14device_class_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5572
 STACKTOP = STACKTOP + 16 | 0; //@line 5573
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 5573
 $2 = sp; //@line 5574
 HEAP32[$2 >> 2] = $1; //@line 5575
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5577
 $4 = __ZN12LoRaWANStack16set_device_classERK14device_class_t($0 + 4 | 0, $2) | 0; //@line 5578
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 164; //@line 5581
  sp = STACKTOP; //@line 5582
  STACKTOP = sp; //@line 5583
  return 0; //@line 5583
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5585
  STACKTOP = sp; //@line 5586
  return $4 | 0; //@line 5586
 }
 return 0; //@line 5588
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $13 = 0, $4 = 0, $5 = 0;
 $4 = $1 + 16 | 0; //@line 16877
 $5 = HEAP32[$4 >> 2] | 0; //@line 16878
 do {
  if (!$5) {
   HEAP32[$4 >> 2] = $2; //@line 16882
   HEAP32[$1 + 24 >> 2] = $3; //@line 16884
   HEAP32[$1 + 36 >> 2] = 1; //@line 16886
  } else {
   if (($5 | 0) != ($2 | 0)) {
    $13 = $1 + 36 | 0; //@line 16890
    HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + 1; //@line 16893
    HEAP32[$1 + 24 >> 2] = 2; //@line 16895
    HEAP8[$1 + 54 >> 0] = 1; //@line 16897
    break;
   }
   $10 = $1 + 24 | 0; //@line 16900
   if ((HEAP32[$10 >> 2] | 0) == 2) {
    HEAP32[$10 >> 2] = $3; //@line 16904
   }
  }
 } while (0);
 return;
}
function __ZN7LoRaMac13clear_tx_pipeEv__async_cb_328($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 23213
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23215
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23217
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23219
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23221
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 23223
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($4, $2 + 1856 | 0); //@line 23224
 if (!___async) {
  ___async_unwind = 0; //@line 23227
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 447; //@line 23229
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 23231
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $6; //@line 23233
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $8; //@line 23235
 sp = STACKTOP; //@line 23236
 return;
}
function __ZN7LoRaMac10disconnectEv__async_cb_127($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 28418
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28420
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28422
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 28424
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($4, $2 + 1856 | 0); //@line 28425
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 479; //@line 28428
  $6 = $ReallocAsyncCtx2 + 4 | 0; //@line 28429
  HEAP32[$6 >> 2] = $2; //@line 28430
  sp = STACKTOP; //@line 28431
  return;
 }
 ___async_unwind = 0; //@line 28434
 HEAP32[$ReallocAsyncCtx2 >> 2] = 479; //@line 28435
 $6 = $ReallocAsyncCtx2 + 4 | 0; //@line 28436
 HEAP32[$6 >> 2] = $2; //@line 28437
 sp = STACKTOP; //@line 28438
 return;
}
function __ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_60($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 24958
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24962
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 24967
 _mbed_assert_internal(12104, 12113, 775); //@line 24968
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 352; //@line 24971
  $6 = $ReallocAsyncCtx6 + 4 | 0; //@line 24972
  HEAP32[$6 >> 2] = $4; //@line 24973
  sp = STACKTOP; //@line 24974
  return;
 }
 ___async_unwind = 0; //@line 24977
 HEAP32[$ReallocAsyncCtx6 >> 2] = 352; //@line 24978
 $6 = $ReallocAsyncCtx6 + 4 | 0; //@line 24979
 HEAP32[$6 >> 2] = $4; //@line 24980
 sp = STACKTOP; //@line 24981
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_20($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 22213
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22217
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 22222
 _mbed_assert_internal(12104, 12113, 775); //@line 22223
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 266; //@line 22226
  $6 = $ReallocAsyncCtx10 + 4 | 0; //@line 22227
  HEAP32[$6 >> 2] = $4; //@line 22228
  sp = STACKTOP; //@line 22229
  return;
 }
 ___async_unwind = 0; //@line 22232
 HEAP32[$ReallocAsyncCtx10 >> 2] = 266; //@line 22233
 $6 = $ReallocAsyncCtx10 + 4 | 0; //@line 22234
 HEAP32[$6 >> 2] = $4; //@line 22235
 sp = STACKTOP; //@line 22236
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_16($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 21980
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21984
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 21989
 _mbed_assert_internal(12104, 12113, 775); //@line 21990
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 258; //@line 21993
  $6 = $ReallocAsyncCtx12 + 4 | 0; //@line 21994
  HEAP32[$6 >> 2] = $4; //@line 21995
  sp = STACKTOP; //@line 21996
  return;
 }
 ___async_unwind = 0; //@line 21999
 HEAP32[$ReallocAsyncCtx12 >> 2] = 258; //@line 22000
 $6 = $ReallocAsyncCtx12 + 4 | 0; //@line 22001
 HEAP32[$6 >> 2] = $4; //@line 22002
 sp = STACKTOP; //@line 22003
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_50($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 24415
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24419
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 24424
 _mbed_assert_internal(12104, 12113, 775); //@line 24425
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 254; //@line 24428
  $6 = $ReallocAsyncCtx10 + 4 | 0; //@line 24429
  HEAP32[$6 >> 2] = $4; //@line 24430
  sp = STACKTOP; //@line 24431
  return;
 }
 ___async_unwind = 0; //@line 24434
 HEAP32[$ReallocAsyncCtx10 >> 2] = 254; //@line 24435
 $6 = $ReallocAsyncCtx10 + 4 | 0; //@line 24436
 HEAP32[$6 >> 2] = $4; //@line 24437
 sp = STACKTOP; //@line 24438
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_48($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 24348
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24352
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(8) | 0; //@line 24357
 _mbed_assert_internal(12104, 12113, 775); //@line 24358
 if (___async) {
  HEAP32[$ReallocAsyncCtx11 >> 2] = 250; //@line 24361
  $6 = $ReallocAsyncCtx11 + 4 | 0; //@line 24362
  HEAP32[$6 >> 2] = $4; //@line 24363
  sp = STACKTOP; //@line 24364
  return;
 }
 ___async_unwind = 0; //@line 24367
 HEAP32[$ReallocAsyncCtx11 >> 2] = 250; //@line 24368
 $6 = $ReallocAsyncCtx11 + 4 | 0; //@line 24369
 HEAP32[$6 >> 2] = $4; //@line 24370
 sp = STACKTOP; //@line 24371
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_46($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 24281
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24285
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 24290
 _mbed_assert_internal(12104, 12113, 775); //@line 24291
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 246; //@line 24294
  $6 = $ReallocAsyncCtx12 + 4 | 0; //@line 24295
  HEAP32[$6 >> 2] = $4; //@line 24296
  sp = STACKTOP; //@line 24297
  return;
 }
 ___async_unwind = 0; //@line 24300
 HEAP32[$ReallocAsyncCtx12 >> 2] = 246; //@line 24301
 $6 = $ReallocAsyncCtx12 + 4 | 0; //@line 24302
 HEAP32[$6 >> 2] = $4; //@line 24303
 sp = STACKTOP; //@line 24304
 return;
}
function __ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb_321($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 22482
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22486
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 22491
 _mbed_assert_internal(12104, 12113, 775); //@line 22492
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 323; //@line 22495
  $6 = $ReallocAsyncCtx4 + 4 | 0; //@line 22496
  HEAP32[$6 >> 2] = $4; //@line 22497
  sp = STACKTOP; //@line 22498
  return;
 }
 ___async_unwind = 0; //@line 22501
 HEAP32[$ReallocAsyncCtx4 >> 2] = 323; //@line 22502
 $6 = $ReallocAsyncCtx4 + 4 | 0; //@line 22503
 HEAP32[$6 >> 2] = $4; //@line 22504
 sp = STACKTOP; //@line 22505
 return;
}
function _equeue_post($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $4 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3380
 $4 = _equeue_tick() | 0; //@line 3382
 HEAP32[$2 + -4 >> 2] = $1; //@line 3384
 $6 = $2 + -16 | 0; //@line 3385
 HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + $4; //@line 3388
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 3389
 $9 = _equeue_enqueue($0, $2 + -36 | 0, $4) | 0; //@line 3390
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 131; //@line 3393
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 3395
  sp = STACKTOP; //@line 3396
  return 0; //@line 3397
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3399
  _equeue_sema_signal($0 + 48 | 0); //@line 3401
  return $9 | 0; //@line 3402
 }
 return 0; //@line 3404
}
function __ZN12LoRaWANStack29handle_ack_expiry_for_class_cEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 11845
 STACKTOP = STACKTOP + 16 | 0; //@line 11846
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 11846
 $1 = $0 + 2904 | 0; //@line 11848
 HEAP32[$1 >> 2] = HEAP32[$1 >> 2] & -18 | 1; //@line 11852
 _mbed_tracef(2, 12211, 12853, sp); //@line 11853
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 11854
 __ZN12LoRaWANStack26process_status_check_stateEv($0); //@line 11855
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 375; //@line 11858
  sp = STACKTOP; //@line 11859
  STACKTOP = sp; //@line 11860
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 11862
  STACKTOP = sp; //@line 11863
  return;
 }
}
function __ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb_158($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 30156
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30160
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 30162
 $8 = HEAP8[$0 + 13 >> 0] | 0; //@line 30164
 $9 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 30166
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 30167
 FUNCTION_TABLE_viii[$9 & 7]($4, $6, $8); //@line 30168
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 339; //@line 30171
  sp = STACKTOP; //@line 30172
  return;
 }
 ___async_unwind = 0; //@line 30175
 HEAP32[$ReallocAsyncCtx >> 2] = 339; //@line 30176
 sp = STACKTOP; //@line 30177
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_332($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 23385
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23389
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(8) | 0; //@line 23394
 _mbed_assert_internal(12104, 12113, 775); //@line 23395
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 318; //@line 23398
  $6 = $ReallocAsyncCtx9 + 4 | 0; //@line 23399
  HEAP32[$6 >> 2] = $4; //@line 23400
  sp = STACKTOP; //@line 23401
  return;
 }
 ___async_unwind = 0; //@line 23404
 HEAP32[$ReallocAsyncCtx9 >> 2] = 318; //@line 23405
 $6 = $ReallocAsyncCtx9 + 4 | 0; //@line 23406
 HEAP32[$6 >> 2] = $4; //@line 23407
 sp = STACKTOP; //@line 23408
 return;
}
function _strcmp($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $2 = 0, $3 = 0, $8 = 0, $9 = 0;
 $2 = HEAP8[$0 >> 0] | 0; //@line 11615
 $3 = HEAP8[$1 >> 0] | 0; //@line 11616
 if ($2 << 24 >> 24 == 0 ? 1 : $2 << 24 >> 24 != $3 << 24 >> 24) {
  $$lcssa = $3; //@line 11621
  $$lcssa8 = $2; //@line 11621
 } else {
  $$011 = $1; //@line 11623
  $$0710 = $0; //@line 11623
  do {
   $$0710 = $$0710 + 1 | 0; //@line 11625
   $$011 = $$011 + 1 | 0; //@line 11626
   $8 = HEAP8[$$0710 >> 0] | 0; //@line 11627
   $9 = HEAP8[$$011 >> 0] | 0; //@line 11628
  } while (!($8 << 24 >> 24 == 0 ? 1 : $8 << 24 >> 24 != $9 << 24 >> 24));
  $$lcssa = $9; //@line 11633
  $$lcssa8 = $8; //@line 11633
 }
 return ($$lcssa8 & 255) - ($$lcssa & 255) | 0; //@line 11643
}
function __ZSt11__terminatePFvvE($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 17427
 STACKTOP = STACKTOP + 16 | 0; //@line 17428
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 17428
 $vararg_buffer = sp; //@line 17429
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 17430
 FUNCTION_TABLE_v[$0 & 15](); //@line 17431
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 733; //@line 17434
  HEAP32[$AsyncCtx + 4 >> 2] = $vararg_buffer; //@line 17436
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 17438
  sp = STACKTOP; //@line 17439
  STACKTOP = sp; //@line 17440
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 17442
  _abort_message(18826, $vararg_buffer); //@line 17443
 }
}
function __ZN12LoRaWANStack22set_link_check_requestEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, sp = 0;
 sp = STACKTOP; //@line 11546
 STACKTOP = STACKTOP + 16 | 0; //@line 11547
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 11547
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$0 = -1012; //@line 11553
  STACKTOP = sp; //@line 11554
  return $$0 | 0; //@line 11554
 }
 HEAP8[$0 + 2909 >> 0] = 1; //@line 11557
 if (!(HEAP32[$0 + 2528 >> 2] | 0)) {
  _mbed_tracef(2, 12211, 12718, sp); //@line 11562
  $$0 = -1003; //@line 11563
  STACKTOP = sp; //@line 11564
  return $$0 | 0; //@line 11564
 } else {
  __ZN7LoRaMac24setup_link_check_requestEv($0); //@line 11566
  $$0 = 0; //@line 11567
  STACKTOP = sp; //@line 11568
  return $$0 | 0; //@line 11568
 }
 return 0; //@line 11570
}
function __ZN12LoRaWANStack24process_connecting_stateER14lorawan_status__async_cb($0) {
 $0 = $0 | 0;
 var $4 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 26125
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26129
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26133
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = HEAP32[___async_retval >> 2]; //@line 26136
 _mbed_tracef(16, 12211, 12629, $4); //@line 26137
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 26138
 __ZN12LoRaWANStack23process_connected_stateEv($8); //@line 26139
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 346; //@line 26142
  sp = STACKTOP; //@line 26143
  return;
 }
 ___async_unwind = 0; //@line 26146
 HEAP32[$ReallocAsyncCtx2 >> 2] = 346; //@line 26147
 sp = STACKTOP; //@line 26148
 return;
}
function __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_34($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $8 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 23649
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23653
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 23654
 if (!$5) {
  HEAP32[___async_retval >> 2] = 0; //@line 23658
  return;
 }
 $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 23662
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(4) | 0; //@line 23663
 FUNCTION_TABLE_vi[$8 & 1023]($4); //@line 23664
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 361; //@line 23667
  sp = STACKTOP; //@line 23668
  return;
 }
 ___async_unwind = 0; //@line 23671
 HEAP32[$ReallocAsyncCtx8 >> 2] = 361; //@line 23672
 sp = STACKTOP; //@line 23673
 return;
}
function _serial_putc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 7074
 $2 = HEAP32[2604] | 0; //@line 7075
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7076
 _putc($1, $2) | 0; //@line 7077
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 657; //@line 7080
  HEAP32[$AsyncCtx3 + 4 >> 2] = $2; //@line 7082
  sp = STACKTOP; //@line 7083
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 7086
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7087
 _fflush($2) | 0; //@line 7088
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 658; //@line 7091
  sp = STACKTOP; //@line 7092
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7095
  return;
 }
}
function _memcmp($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $14 = 0, $4 = 0, $5 = 0;
 L1 : do {
  if (!$2) {
   $14 = 0; //@line 16057
  } else {
   $$01318 = $0; //@line 16059
   $$01417 = $2; //@line 16059
   $$019 = $1; //@line 16059
   while (1) {
    $4 = HEAP8[$$01318 >> 0] | 0; //@line 16061
    $5 = HEAP8[$$019 >> 0] | 0; //@line 16062
    if ($4 << 24 >> 24 != $5 << 24 >> 24) {
     break;
    }
    $$01417 = $$01417 + -1 | 0; //@line 16067
    if (!$$01417) {
     $14 = 0; //@line 16072
     break L1;
    } else {
     $$01318 = $$01318 + 1 | 0; //@line 16075
     $$019 = $$019 + 1 | 0; //@line 16075
    }
   }
   $14 = ($4 & 255) - ($5 & 255) | 0; //@line 16081
  }
 } while (0);
 return $14 | 0; //@line 16084
}
function ___stdout_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $14 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 11567
 STACKTOP = STACKTOP + 32 | 0; //@line 11568
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 11568
 $vararg_buffer = sp; //@line 11569
 HEAP32[$0 + 36 >> 2] = 13; //@line 11572
 if (!(HEAP32[$0 >> 2] & 64)) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2]; //@line 11580
  HEAP32[$vararg_buffer + 4 >> 2] = 21523; //@line 11582
  HEAP32[$vararg_buffer + 8 >> 2] = sp + 16; //@line 11584
  if (___syscall54(54, $vararg_buffer | 0) | 0) {
   HEAP8[$0 + 75 >> 0] = -1; //@line 11589
  }
 }
 $14 = ___stdio_write($0, $1, $2) | 0; //@line 11592
 STACKTOP = sp; //@line 11593
 return $14 | 0; //@line 11593
}
function __ZN7LoRaMac23on_backoff_timer_expiryEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 15125
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 15126
 $1 = __ZN7LoRaMac11schedule_txEv($0) | 0; //@line 15127
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 434; //@line 15130
  sp = STACKTOP; //@line 15131
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 15134
 if (!$1) {
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 15139
 _mbed_assert_internal(13109, 13135, 855); //@line 15140
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 435; //@line 15143
  sp = STACKTOP; //@line 15144
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15147
 return;
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_399($0) {
 $0 = $0 | 0;
 var $18 = 0, $2 = 0, $3 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27788
 $3 = $2 + 2056 | 0; //@line 27789
 HEAP32[$3 >> 2] = 2; //@line 27790
 HEAP32[$2 + 2092 >> 2] = 2; //@line 27792
 __ZN14LoRaMacCommand20clear_command_bufferEv($2 + 476 | 0); //@line 27794
 HEAP8[$2 + 2063 >> 0] = HEAP8[$2 + 1699 >> 0] | 0; //@line 27798
 HEAP8[$2 + 2062 >> 0] = 0; //@line 27800
 HEAP32[$2 + 2064 >> 2] = 0; //@line 27802
 HEAP8[$2 + 1180 >> 0] = 0; //@line 27804
 HEAP32[$3 >> 2] = 0; //@line 27805
 if ((HEAP32[$2 + 2052 >> 2] | 0) == 1) {
  return;
 }
 if (HEAP8[$2 + 1174 >> 0] | 0) {
  return;
 }
 $18 = $2 + 1760 | 0; //@line 27818
 HEAP32[$18 >> 2] = (HEAP32[$18 >> 2] | 0) + 1; //@line 27821
 return;
}
function _mbed_die__async_cb_88($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 26080
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26082
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 26084
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(8) | 0; //@line 26085
 _wait_ms(150); //@line 26086
 if (___async) {
  HEAP32[$ReallocAsyncCtx14 >> 2] = 638; //@line 26089
  $4 = $ReallocAsyncCtx14 + 4 | 0; //@line 26090
  HEAP32[$4 >> 2] = $2; //@line 26091
  sp = STACKTOP; //@line 26092
  return;
 }
 ___async_unwind = 0; //@line 26095
 HEAP32[$ReallocAsyncCtx14 >> 2] = 638; //@line 26096
 $4 = $ReallocAsyncCtx14 + 4 | 0; //@line 26097
 HEAP32[$4 >> 2] = $2; //@line 26098
 sp = STACKTOP; //@line 26099
 return;
}
function _mbed_die__async_cb_87($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 26055
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26057
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 26059
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(8) | 0; //@line 26060
 _wait_ms(150); //@line 26061
 if (___async) {
  HEAP32[$ReallocAsyncCtx13 >> 2] = 639; //@line 26064
  $4 = $ReallocAsyncCtx13 + 4 | 0; //@line 26065
  HEAP32[$4 >> 2] = $2; //@line 26066
  sp = STACKTOP; //@line 26067
  return;
 }
 ___async_unwind = 0; //@line 26070
 HEAP32[$ReallocAsyncCtx13 >> 2] = 639; //@line 26071
 $4 = $ReallocAsyncCtx13 + 4 | 0; //@line 26072
 HEAP32[$4 >> 2] = $2; //@line 26073
 sp = STACKTOP; //@line 26074
 return;
}
function _mbed_die__async_cb_86($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 26030
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26032
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 26034
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 26035
 _wait_ms(150); //@line 26036
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 640; //@line 26039
  $4 = $ReallocAsyncCtx12 + 4 | 0; //@line 26040
  HEAP32[$4 >> 2] = $2; //@line 26041
  sp = STACKTOP; //@line 26042
  return;
 }
 ___async_unwind = 0; //@line 26045
 HEAP32[$ReallocAsyncCtx12 >> 2] = 640; //@line 26046
 $4 = $ReallocAsyncCtx12 + 4 | 0; //@line 26047
 HEAP32[$4 >> 2] = $2; //@line 26048
 sp = STACKTOP; //@line 26049
 return;
}
function _mbed_die__async_cb_85($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 26005
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26007
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 26009
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(8) | 0; //@line 26010
 _wait_ms(150); //@line 26011
 if (___async) {
  HEAP32[$ReallocAsyncCtx11 >> 2] = 641; //@line 26014
  $4 = $ReallocAsyncCtx11 + 4 | 0; //@line 26015
  HEAP32[$4 >> 2] = $2; //@line 26016
  sp = STACKTOP; //@line 26017
  return;
 }
 ___async_unwind = 0; //@line 26020
 HEAP32[$ReallocAsyncCtx11 >> 2] = 641; //@line 26021
 $4 = $ReallocAsyncCtx11 + 4 | 0; //@line 26022
 HEAP32[$4 >> 2] = $2; //@line 26023
 sp = STACKTOP; //@line 26024
 return;
}
function _mbed_die__async_cb_84($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 25980
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25982
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 25984
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 25985
 _wait_ms(150); //@line 25986
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 642; //@line 25989
  $4 = $ReallocAsyncCtx10 + 4 | 0; //@line 25990
  HEAP32[$4 >> 2] = $2; //@line 25991
  sp = STACKTOP; //@line 25992
  return;
 }
 ___async_unwind = 0; //@line 25995
 HEAP32[$ReallocAsyncCtx10 >> 2] = 642; //@line 25996
 $4 = $ReallocAsyncCtx10 + 4 | 0; //@line 25997
 HEAP32[$4 >> 2] = $2; //@line 25998
 sp = STACKTOP; //@line 25999
 return;
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_253($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx17 = 0, sp = 0;
 sp = STACKTOP; //@line 17199
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17201
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17203
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17205
 $8 = HEAP32[HEAP32[$2 >> 2] >> 2] | 0; //@line 17207
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 17208
 FUNCTION_TABLE_vii[$8 & 15]($2, $4); //@line 17209
 if (!___async) {
  ___async_unwind = 0; //@line 17212
 }
 HEAP32[$ReallocAsyncCtx17 >> 2] = 201; //@line 17214
 HEAP32[$ReallocAsyncCtx17 + 4 >> 2] = $6; //@line 17216
 HEAP32[$ReallocAsyncCtx17 + 8 >> 2] = $2; //@line 17218
 sp = STACKTOP; //@line 17219
 return;
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb($0) {
 $0 = $0 | 0;
 var $18 = 0, $2 = 0, $3 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27746
 $3 = $2 + 2056 | 0; //@line 27747
 HEAP32[$3 >> 2] = 2; //@line 27748
 HEAP32[$2 + 2092 >> 2] = 2; //@line 27750
 __ZN14LoRaMacCommand20clear_command_bufferEv($2 + 476 | 0); //@line 27752
 HEAP8[$2 + 2063 >> 0] = HEAP8[$2 + 1699 >> 0] | 0; //@line 27756
 HEAP8[$2 + 2062 >> 0] = 0; //@line 27758
 HEAP32[$2 + 2064 >> 2] = 0; //@line 27760
 HEAP8[$2 + 1180 >> 0] = 0; //@line 27762
 HEAP32[$3 >> 2] = 0; //@line 27763
 if ((HEAP32[$2 + 2052 >> 2] | 0) == 1) {
  return;
 }
 if (HEAP8[$2 + 1174 >> 0] | 0) {
  return;
 }
 $18 = $2 + 1760 | 0; //@line 27776
 HEAP32[$18 >> 2] = (HEAP32[$18 >> 2] | 0) + 1; //@line 27779
 return;
}
function __ZN12LoRaWANStack16set_device_classERK14device_class_t__async_cb_327($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 23156
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23160
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 23161
 if (!$5) {
  HEAP32[___async_retval >> 2] = 0; //@line 23165
  return;
 }
 $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 23169
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 23170
 FUNCTION_TABLE_vi[$8 & 1023]($4); //@line 23171
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 374; //@line 23174
  sp = STACKTOP; //@line 23175
  return;
 }
 ___async_unwind = 0; //@line 23178
 HEAP32[$ReallocAsyncCtx >> 2] = 374; //@line 23179
 sp = STACKTOP; //@line 23180
 return;
}
function _mbed_tracef($0, $1, $2, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $varargs = $varargs | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4595
 STACKTOP = STACKTOP + 16 | 0; //@line 4596
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 4596
 $3 = sp; //@line 4597
 HEAP32[$3 >> 2] = $varargs; //@line 4598
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 4599
 _mbed_vtracef($0, $1, $2, $3); //@line 4600
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 140; //@line 4603
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 4605
  sp = STACKTOP; //@line 4606
  STACKTOP = sp; //@line 4607
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4609
  STACKTOP = sp; //@line 4610
  return;
 }
}
function _mbed_die__async_cb_83($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 25955
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25957
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 25959
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(8) | 0; //@line 25960
 _wait_ms(150); //@line 25961
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 643; //@line 25964
  $4 = $ReallocAsyncCtx9 + 4 | 0; //@line 25965
  HEAP32[$4 >> 2] = $2; //@line 25966
  sp = STACKTOP; //@line 25967
  return;
 }
 ___async_unwind = 0; //@line 25970
 HEAP32[$ReallocAsyncCtx9 >> 2] = 643; //@line 25971
 $4 = $ReallocAsyncCtx9 + 4 | 0; //@line 25972
 HEAP32[$4 >> 2] = $2; //@line 25973
 sp = STACKTOP; //@line 25974
 return;
}
function _mbed_die__async_cb_82($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 25930
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25932
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 25934
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 25935
 _wait_ms(400); //@line 25936
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 644; //@line 25939
  $4 = $ReallocAsyncCtx8 + 4 | 0; //@line 25940
  HEAP32[$4 >> 2] = $2; //@line 25941
  sp = STACKTOP; //@line 25942
  return;
 }
 ___async_unwind = 0; //@line 25945
 HEAP32[$ReallocAsyncCtx8 >> 2] = 644; //@line 25946
 $4 = $ReallocAsyncCtx8 + 4 | 0; //@line 25947
 HEAP32[$4 >> 2] = $2; //@line 25948
 sp = STACKTOP; //@line 25949
 return;
}
function _mbed_die__async_cb_81($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 25905
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25907
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 25909
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(8) | 0; //@line 25910
 _wait_ms(400); //@line 25911
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 645; //@line 25914
  $4 = $ReallocAsyncCtx7 + 4 | 0; //@line 25915
  HEAP32[$4 >> 2] = $2; //@line 25916
  sp = STACKTOP; //@line 25917
  return;
 }
 ___async_unwind = 0; //@line 25920
 HEAP32[$ReallocAsyncCtx7 >> 2] = 645; //@line 25921
 $4 = $ReallocAsyncCtx7 + 4 | 0; //@line 25922
 HEAP32[$4 >> 2] = $2; //@line 25923
 sp = STACKTOP; //@line 25924
 return;
}
function _mbed_die__async_cb_80($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 25880
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25882
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 25884
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 25885
 _wait_ms(400); //@line 25886
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 646; //@line 25889
  $4 = $ReallocAsyncCtx6 + 4 | 0; //@line 25890
  HEAP32[$4 >> 2] = $2; //@line 25891
  sp = STACKTOP; //@line 25892
  return;
 }
 ___async_unwind = 0; //@line 25895
 HEAP32[$ReallocAsyncCtx6 >> 2] = 646; //@line 25896
 $4 = $ReallocAsyncCtx6 + 4 | 0; //@line 25897
 HEAP32[$4 >> 2] = $2; //@line 25898
 sp = STACKTOP; //@line 25899
 return;
}
function _mbed_die__async_cb_79($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 25855
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25857
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 25859
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 25860
 _wait_ms(400); //@line 25861
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 647; //@line 25864
  $4 = $ReallocAsyncCtx5 + 4 | 0; //@line 25865
  HEAP32[$4 >> 2] = $2; //@line 25866
  sp = STACKTOP; //@line 25867
  return;
 }
 ___async_unwind = 0; //@line 25870
 HEAP32[$ReallocAsyncCtx5 >> 2] = 647; //@line 25871
 $4 = $ReallocAsyncCtx5 + 4 | 0; //@line 25872
 HEAP32[$4 >> 2] = $2; //@line 25873
 sp = STACKTOP; //@line 25874
 return;
}
function _mbed_die__async_cb_78($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 25830
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25832
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 25834
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 25835
 _wait_ms(400); //@line 25836
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 648; //@line 25839
  $4 = $ReallocAsyncCtx4 + 4 | 0; //@line 25840
  HEAP32[$4 >> 2] = $2; //@line 25841
  sp = STACKTOP; //@line 25842
  return;
 }
 ___async_unwind = 0; //@line 25845
 HEAP32[$ReallocAsyncCtx4 >> 2] = 648; //@line 25846
 $4 = $ReallocAsyncCtx4 + 4 | 0; //@line 25847
 HEAP32[$4 >> 2] = $2; //@line 25848
 sp = STACKTOP; //@line 25849
 return;
}
function _mbed_die__async_cb_77($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 25805
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25807
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 25809
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 25810
 _wait_ms(400); //@line 25811
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 649; //@line 25814
  $4 = $ReallocAsyncCtx3 + 4 | 0; //@line 25815
  HEAP32[$4 >> 2] = $2; //@line 25816
  sp = STACKTOP; //@line 25817
  return;
 }
 ___async_unwind = 0; //@line 25820
 HEAP32[$ReallocAsyncCtx3 >> 2] = 649; //@line 25821
 $4 = $ReallocAsyncCtx3 + 4 | 0; //@line 25822
 HEAP32[$4 >> 2] = $2; //@line 25823
 sp = STACKTOP; //@line 25824
 return;
}
function _mbed_die__async_cb_76($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 25780
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25782
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 25784
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 25785
 _wait_ms(400); //@line 25786
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 650; //@line 25789
  $4 = $ReallocAsyncCtx2 + 4 | 0; //@line 25790
  HEAP32[$4 >> 2] = $2; //@line 25791
  sp = STACKTOP; //@line 25792
  return;
 }
 ___async_unwind = 0; //@line 25795
 HEAP32[$ReallocAsyncCtx2 >> 2] = 650; //@line 25796
 $4 = $ReallocAsyncCtx2 + 4 | 0; //@line 25797
 HEAP32[$4 >> 2] = $2; //@line 25798
 sp = STACKTOP; //@line 25799
 return;
}
function _mbed_die__async_cb_75($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 25755
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25757
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 25759
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 25760
 _wait_ms(400); //@line 25761
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 651; //@line 25764
  $4 = $ReallocAsyncCtx + 4 | 0; //@line 25765
  HEAP32[$4 >> 2] = $2; //@line 25766
  sp = STACKTOP; //@line 25767
  return;
 }
 ___async_unwind = 0; //@line 25770
 HEAP32[$ReallocAsyncCtx >> 2] = 651; //@line 25771
 $4 = $ReallocAsyncCtx + 4 | 0; //@line 25772
 HEAP32[$4 >> 2] = $2; //@line 25773
 sp = STACKTOP; //@line 25774
 return;
}
function __ZN12LoRaWANStack26process_status_check_stateEv__async_cb_6($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 19044
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19046
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19048
 $5 = HEAP32[$2 >> 2] | 0; //@line 19049
 if (!($5 & 2)) {
  return;
 }
 HEAP32[$2 >> 2] = $5 & -3; //@line 19056
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 19057
 __ZN12LoRaWANStack23mcps_indication_handlerEv($4); //@line 19058
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 242; //@line 19061
  sp = STACKTOP; //@line 19062
  return;
 }
 ___async_unwind = 0; //@line 19065
 HEAP32[$ReallocAsyncCtx >> 2] = 242; //@line 19066
 sp = STACKTOP; //@line 19067
 return;
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_365($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $7 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 25540
 $4 = HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 788 >> 2] | 0; //@line 25544
 if (!$4) {
  return;
 }
 $7 = HEAP32[$4 + 60 >> 2] | 0; //@line 25550
 if (!$7) {
  return;
 }
 $10 = HEAP32[$7 >> 2] | 0; //@line 25556
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 25557
 FUNCTION_TABLE_vi[$10 & 1023]($4 + 48 | 0); //@line 25558
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 89; //@line 25561
  sp = STACKTOP; //@line 25562
  return;
 }
 ___async_unwind = 0; //@line 25565
 HEAP32[$ReallocAsyncCtx4 >> 2] = 89; //@line 25566
 sp = STACKTOP; //@line 25567
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb_114($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 27502
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27506
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27508
 $7 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 27510
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 27511
 FUNCTION_TABLE_vii[$7 & 15]($4, $6); //@line 27512
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 278; //@line 27515
  sp = STACKTOP; //@line 27516
  return;
 }
 ___async_unwind = 0; //@line 27519
 HEAP32[$ReallocAsyncCtx >> 2] = 278; //@line 27520
 sp = STACKTOP; //@line 27521
 return;
}
function __ZN7LoRaPHY18dl_channel_requestEhj__async_cb_342($0) {
 $0 = $0 | 0;
 var $$ = 0, $$0 = 0, $$1 = 0, $10 = 0, $17 = 0, $6 = 0, $9 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23828
 $$ = HEAP8[___async_retval >> 0] & 1 ? 3 : 2; //@line 23832
 $9 = HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 124 >> 2] | 0; //@line 23834
 $10 = HEAPU8[$0 + 8 >> 0] | 0; //@line 23835
 $$1 = (HEAP32[$9 + ($10 * 12 | 0) >> 2] | 0) == 0 ? $$ & 1 : $$; //@line 23840
 if ($$1 << 24 >> 24 != 3) {
  $$0 = $$1; //@line 23843
  $17 = ___async_retval; //@line 23844
  HEAP8[$17 >> 0] = $$0; //@line 23845
  return;
 }
 HEAP32[$9 + ($10 * 12 | 0) + 4 >> 2] = $6; //@line 23849
 $$0 = 3; //@line 23850
 $17 = ___async_retval; //@line 23851
 HEAP8[$17 >> 0] = $$0; //@line 23852
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callIN6events5EventIS1_EEEEvPKv__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 28331
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 28335
 HEAP32[(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) + 8 >> 2] = $AsyncRetVal; //@line 28338
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 28343
 _mbed_assert_internal(15758, 15761, 149); //@line 28344
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 697; //@line 28347
  sp = STACKTOP; //@line 28348
  return;
 }
 ___async_unwind = 0; //@line 28351
 HEAP32[$ReallocAsyncCtx2 >> 2] = 697; //@line 28352
 sp = STACKTOP; //@line 28353
 return;
}
function _mbedtls_gcm_free($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 5013
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5014
 _mbedtls_cipher_free($0); //@line 5015
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 614; //@line 5018
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 5020
  sp = STACKTOP; //@line 5021
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5024
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5025
 _mbedtls_platform_zeroize($0, 400); //@line 5026
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 615; //@line 5029
  sp = STACKTOP; //@line 5030
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5033
  return;
 }
}
function _mbedtls_ccm_free($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 2238
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2239
 _mbedtls_cipher_free($0); //@line 2240
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 575; //@line 2243
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 2245
  sp = STACKTOP; //@line 2246
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2249
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2250
 _mbedtls_platform_zeroize($0, 68); //@line 2251
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 576; //@line 2254
  sp = STACKTOP; //@line 2255
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2258
  return;
 }
}
function __ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_92($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 26202
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26206
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26208
 if (HEAP32[$0 + 4 >> 2] | 0) {
  HEAP32[$6 >> 2] = 2; //@line 26211
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 26214
 _mbed_assert_internal(12104, 12113, 775); //@line 26215
 if (!___async) {
  ___async_unwind = 0; //@line 26218
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 239; //@line 26220
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $4; //@line 26222
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $6; //@line 26224
 sp = STACKTOP; //@line 26225
 return;
}
function _equeue_timeleft($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$014 = 0, $10 = 0, $11 = 0, $19 = 0, $21 = 0, $5 = 0;
 if (!$1) {
  $$0 = -1; //@line 3756
  return $$0 | 0; //@line 3757
 }
 $5 = $0 + 16 | 0; //@line 3761
 $10 = (HEAP32[$0 + 12 >> 2] | 0) + ((1 << HEAP32[$5 >> 2]) + -1 & $1) | 0; //@line 3766
 $11 = $0 + 128 | 0; //@line 3767
 _equeue_mutex_lock($11); //@line 3768
 if (($1 >> HEAP32[$5 >> 2] | 0) == (HEAPU8[$10 + 4 >> 0] | 0 | 0)) {
  $19 = HEAP32[$10 + 20 >> 2] | 0; //@line 3777
  $21 = $19 - (_equeue_tick() | 0) | 0; //@line 3779
  $$014 = $21 & ~($21 >> 31); //@line 3783
 } else {
  $$014 = -1; //@line 3785
 }
 _equeue_mutex_unlock($11); //@line 3787
 $$0 = $$014; //@line 3788
 return $$0 | 0; //@line 3789
}
function __ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv__async_cb_216($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 12567
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12571
 $6 = HEAP8[$0 + 12 >> 0] & 1; //@line 12574
 $7 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 12576
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 12577
 FUNCTION_TABLE_vii[$7 & 15]($4, $6); //@line 12578
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 232; //@line 12581
  sp = STACKTOP; //@line 12582
  return;
 }
 ___async_unwind = 0; //@line 12585
 HEAP32[$ReallocAsyncCtx >> 2] = 232; //@line 12586
 sp = STACKTOP; //@line 12587
 return;
}
function _mbed_error_printf($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6803
 STACKTOP = STACKTOP + 16 | 0; //@line 6804
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 6804
 $1 = sp; //@line 6805
 HEAP32[$1 >> 2] = $varargs; //@line 6806
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 6807
 _mbed_error_vfprintf($0, $1); //@line 6808
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 652; //@line 6811
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 6813
  sp = STACKTOP; //@line 6814
  STACKTOP = sp; //@line 6815
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6817
  STACKTOP = sp; //@line 6818
  return;
 }
}
function __ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE__async_cb_220($0) {
 $0 = $0 | 0;
 var $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 13135
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13143
 if ((HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) != 2) {
  return;
 }
 _mbed_tracef(16, 12890, 13516, HEAP32[$0 + 8 >> 2] | 0); //@line 13149
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 13150
 __ZN7LoRaMac15open_rx2_windowEv($8); //@line 13151
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 456; //@line 13154
  sp = STACKTOP; //@line 13155
  return;
 }
 ___async_unwind = 0; //@line 13158
 HEAP32[$ReallocAsyncCtx3 >> 2] = 456; //@line 13159
 sp = STACKTOP; //@line 13160
 return;
}
function __ZN12LoRaWANStack9handle_txEhPKhthbb__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $11 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24291
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24293
 $8 = HEAP16[$0 + 16 >> 1] | 0; //@line 24295
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 24297
 if (!$AsyncRetVal) {
  $11 = (HEAP32[$0 + 4 >> 2] | 0) + 2904 | 0; //@line 24300
  HEAP32[$11 >> 2] = HEAP32[$11 >> 2] & -18 | 1; //@line 24304
  __ZN7LoRaMac14set_tx_ongoingEb($4, 1); //@line 24305
  HEAP32[$6 >> 2] = 8; //@line 24306
  $$0 = 0; //@line 24307
 } else {
  $$0 = $AsyncRetVal; //@line 24309
 }
 HEAP16[___async_retval >> 1] = ($$0 | 0) == 0 ? $8 : $$0 & 65535; //@line 24315
 return;
}
function __ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 24250
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24252
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  HEAP32[___async_retval >> 2] = -1003; //@line 24258
  return;
 }
 $4 = HEAP32[$2 >> 2] | 0; //@line 24261
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 24262
 __ZN7LoRaPHY18put_radio_to_sleepEv($4); //@line 24263
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 488; //@line 24266
  sp = STACKTOP; //@line 24267
  return;
 }
 ___async_unwind = 0; //@line 24270
 HEAP32[$ReallocAsyncCtx2 >> 2] = 488; //@line 24271
 sp = STACKTOP; //@line 24272
 return;
}
function __ZN7LoRaMac21post_process_mcps_reqEv($0) {
 $0 = $0 | 0;
 var $14 = 0, $20 = 0, $6 = 0;
 HEAP8[$0 + 1180 >> 0] = 0; //@line 12208
 HEAP32[$0 + 2056 >> 2] = 0; //@line 12210
 if ((HEAP32[$0 + 2052 >> 2] | 0) != 1) {
  if (HEAP8[$0 + 1174 >> 0] | 0) {
   return;
  }
  $20 = $0 + 1760 | 0; //@line 12221
  HEAP32[$20 >> 2] = (HEAP32[$20 >> 2] | 0) + 1; //@line 12224
  return;
 }
 $6 = $0 + 2062 | 0; //@line 12227
 if (!(HEAP8[$6 >> 0] | 0)) {
  return;
 }
 HEAP8[$0 + 1177 >> 0] = 0; //@line 12234
 HEAP8[$6 >> 0] = 0; //@line 12235
 HEAP8[$0 + 2044 >> 0] = 0; //@line 12237
 if (HEAP8[$0 + 1174 >> 0] | 0) {
  return;
 }
 $14 = $0 + 1760 | 0; //@line 12244
 HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + 1; //@line 12247
 return;
}
function __ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb_43($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 24069
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24073
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 24074
 if (!$5) {
  return;
 }
 $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 24080
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 24081
 FUNCTION_TABLE_vi[$8 & 1023]($4); //@line 24082
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 407; //@line 24085
  sp = STACKTOP; //@line 24086
  return;
 }
 ___async_unwind = 0; //@line 24089
 HEAP32[$ReallocAsyncCtx2 >> 2] = 407; //@line 24090
 sp = STACKTOP; //@line 24091
 return;
}
function __ZN4mbed10TimerEventC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2912
 HEAP32[$0 >> 2] = 640; //@line 2913
 $1 = $0 + 8 | 0; //@line 2914
 HEAP32[$1 >> 2] = 0; //@line 2915
 HEAP32[$1 + 4 >> 2] = 0; //@line 2915
 HEAP32[$1 + 8 >> 2] = 0; //@line 2915
 HEAP32[$1 + 12 >> 2] = 0; //@line 2915
 $2 = _get_us_ticker_data() | 0; //@line 2916
 HEAP32[$0 + 24 >> 2] = $2; //@line 2918
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2919
 _ticker_set_handler($2, 124); //@line 2920
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 125; //@line 2923
  sp = STACKTOP; //@line 2924
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2927
  return;
 }
}
function __ZN7LoRaMac15open_rx1_windowEv__async_cb_361($0) {
 $0 = $0 | 0;
 var $10 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 24989
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24995
 $8 = (HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0) != 0; //@line 24997
 $10 = HEAP32[(HEAP32[$0 + 8 >> 2] | 0) + 1888 >> 2] | 0; //@line 24999
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 25000
 __ZN7LoRaPHY15setup_rx_windowEbj($6, $8, $10); //@line 25001
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 439; //@line 25004
  sp = STACKTOP; //@line 25005
  return;
 }
 ___async_unwind = 0; //@line 25008
 HEAP32[$ReallocAsyncCtx >> 2] = 439; //@line 25009
 sp = STACKTOP; //@line 25010
 return;
}
function __ZN13LoRaMacCrypto15decrypt_payloadEPKhtS1_jjhjPh($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 var $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 19443
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 19444
 $9 = __ZN13LoRaMacCrypto15encrypt_payloadEPKhtS1_jjhjPh($0, $1, $2, $3, $4, $5, $6, $7, $8) | 0; //@line 19445
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 504; //@line 19448
  sp = STACKTOP; //@line 19449
  return 0; //@line 19450
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 19452
  return $9 | 0; //@line 19453
 }
 return 0; //@line 19455
}
function _sbrk(increment) {
 increment = increment | 0;
 var oldDynamicTop = 0, newDynamicTop = 0;
 oldDynamicTop = HEAP32[DYNAMICTOP_PTR >> 2] | 0; //@line 32142
 newDynamicTop = oldDynamicTop + increment | 0; //@line 32143
 if ((increment | 0) > 0 & (newDynamicTop | 0) < (oldDynamicTop | 0) | (newDynamicTop | 0) < 0) {
  abortOnCannotGrowMemory() | 0; //@line 32147
  ___setErrNo(12); //@line 32148
  return -1;
 }
 HEAP32[DYNAMICTOP_PTR >> 2] = newDynamicTop; //@line 32152
 if ((newDynamicTop | 0) > (getTotalMemory() | 0)) {
  if (!(enlargeMemory() | 0)) {
   HEAP32[DYNAMICTOP_PTR >> 2] = oldDynamicTop; //@line 32156
   ___setErrNo(12); //@line 32157
   return -1;
  }
 }
 return oldDynamicTop | 0; //@line 32161
}
function _fwrite($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $11 = 0, $13 = 0, $15 = 0, $4 = 0, $phitmp = 0;
 $4 = Math_imul($2, $1) | 0; //@line 11738
 $$ = ($1 | 0) == 0 ? 0 : $2; //@line 11740
 if ((HEAP32[$3 + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($3) | 0) == 0; //@line 11746
  $11 = ___fwritex($0, $4, $3) | 0; //@line 11747
  if ($phitmp) {
   $13 = $11; //@line 11749
  } else {
   ___unlockfile($3); //@line 11751
   $13 = $11; //@line 11752
  }
 } else {
  $13 = ___fwritex($0, $4, $3) | 0; //@line 11756
 }
 if (($13 | 0) == ($4 | 0)) {
  $15 = $$; //@line 11760
 } else {
  $15 = ($13 >>> 0) / ($1 >>> 0) | 0; //@line 11763
 }
 return $15 | 0; //@line 11765
}
function _fmt_x($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$05$lcssa = 0, $$056 = 0, $14 = 0, $15 = 0, $8 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) {
  $$05$lcssa = $2; //@line 14074
 } else {
  $$056 = $2; //@line 14076
  $15 = $1; //@line 14076
  $8 = $0; //@line 14076
  while (1) {
   $14 = $$056 + -1 | 0; //@line 14084
   HEAP8[$14 >> 0] = HEAPU8[16489 + ($8 & 15) >> 0] | 0 | $3; //@line 14085
   $8 = _bitshift64Lshr($8 | 0, $15 | 0, 4) | 0; //@line 14086
   $15 = tempRet0; //@line 14087
   if (($8 | 0) == 0 & ($15 | 0) == 0) {
    $$05$lcssa = $14; //@line 14092
    break;
   } else {
    $$056 = $14; //@line 14095
   }
  }
 }
 return $$05$lcssa | 0; //@line 14099
}
function __ZN7LoRaMac21set_channel_data_rateEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 15530
 STACKTOP = STACKTOP + 16 | 0; //@line 15531
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15531
 $vararg_buffer = sp; //@line 15532
 if (!(HEAP8[$0 + 1936 >> 0] | 0)) {
  if (__ZN7LoRaPHY18verify_tx_datarateEhb($0 + 4 | 0, $1, 0) | 0) {
   HEAP8[$0 + 1877 >> 0] = $1; //@line 15541
   $$0 = 0; //@line 15542
  } else {
   $$0 = -1003; //@line 15544
  }
 } else {
  _mbed_tracef(2, 12890, 13340, $vararg_buffer); //@line 15547
  $$0 = -1003; //@line 15548
 }
 STACKTOP = sp; //@line 15550
 return $$0 | 0; //@line 15550
}
function __ZSt9terminatev() {
 var $0 = 0, $16 = 0, $17 = 0, $2 = 0, $5 = 0, sp = 0;
 sp = STACKTOP; //@line 17392
 $0 = ___cxa_get_globals_fast() | 0; //@line 17393
 if ($0 | 0) {
  $2 = HEAP32[$0 >> 2] | 0; //@line 17396
  if ($2 | 0) {
   $5 = $2 + 48 | 0; //@line 17400
   if ((HEAP32[$5 >> 2] & -256 | 0) == 1126902528 ? (HEAP32[$5 + 4 >> 2] | 0) == 1129074247 : 0) {
    $16 = HEAP32[$2 + 12 >> 2] | 0; //@line 17412
    _emscripten_alloc_async_context(4, sp) | 0; //@line 17413
    __ZSt11__terminatePFvvE($16); //@line 17414
   }
  }
 }
 $17 = __ZSt13get_terminatev() | 0; //@line 17419
 _emscripten_alloc_async_context(4, sp) | 0; //@line 17420
 __ZSt11__terminatePFvvE($17); //@line 17421
}
function ___towrite($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $14 = 0, $3 = 0, $7 = 0;
 $1 = $0 + 74 | 0; //@line 11955
 $3 = HEAP8[$1 >> 0] | 0; //@line 11957
 HEAP8[$1 >> 0] = $3 + 255 | $3; //@line 11961
 $7 = HEAP32[$0 >> 2] | 0; //@line 11962
 if (!($7 & 8)) {
  HEAP32[$0 + 8 >> 2] = 0; //@line 11967
  HEAP32[$0 + 4 >> 2] = 0; //@line 11969
  $14 = HEAP32[$0 + 44 >> 2] | 0; //@line 11971
  HEAP32[$0 + 28 >> 2] = $14; //@line 11973
  HEAP32[$0 + 20 >> 2] = $14; //@line 11975
  HEAP32[$0 + 16 >> 2] = $14 + (HEAP32[$0 + 48 >> 2] | 0); //@line 11981
  $$0 = 0; //@line 11982
 } else {
  HEAP32[$0 >> 2] = $7 | 32; //@line 11985
  $$0 = -1; //@line 11986
 }
 return $$0 | 0; //@line 11988
}
function __ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s__async_cb($0) {
 $0 = $0 | 0;
 var $$ = 0, $$1 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24505
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24507
 $$ = HEAP8[___async_retval >> 0] & 1 ? 7 : 6; //@line 24511
 $6 = HEAP8[$2 >> 0] | 0; //@line 24512
 $$1 = ($6 << 24 >> 24 >= (HEAP8[$4 + 28 >> 0] | 0) ? $6 << 24 >> 24 <= (HEAP8[$4 + 29 >> 0] | 0) : 0) ? $$ : $$ & 5; //@line 24521
 $15 = HEAP8[$2 + 1 >> 0] | 0; //@line 24523
 HEAP8[___async_retval >> 0] = ($15 << 24 >> 24 >= (HEAP8[$4 + 32 >> 0] | 0) ? $15 << 24 >> 24 <= (HEAP8[$4 + 33 >> 0] | 0) : 0) ? $$1 : $$1 & 3; //@line 24534
 return;
}
function __ZN4mbed11InterruptInD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 19307
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19309
 $4 = HEAP32[$2 + 52 >> 2] | 0; //@line 19311
 if (!$4) {
  return;
 }
 $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 19318
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 19319
 FUNCTION_TABLE_vi[$8 & 1023]($2 + 40 | 0); //@line 19320
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 102; //@line 19323
  sp = STACKTOP; //@line 19324
  return;
 }
 ___async_unwind = 0; //@line 19327
 HEAP32[$ReallocAsyncCtx2 >> 2] = 102; //@line 19328
 sp = STACKTOP; //@line 19329
 return;
}
function __ZN4mbed7Timeout7handlerEv__async_cb_356($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 24644
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24646
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24648
 $5 = HEAP32[HEAP32[$2 >> 2] >> 2] | 0; //@line 24650
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 24651
 FUNCTION_TABLE_vi[$5 & 1023]($4); //@line 24652
 if (!___async) {
  ___async_unwind = 0; //@line 24655
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 118; //@line 24657
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 24659
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 24661
 sp = STACKTOP; //@line 24662
 return;
}
function __ZN7LoRaPHY17calculate_backoffEbbbhjj($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $14 = 0, $16 = 0, $24 = 0, $8 = 0;
 $8 = HEAP32[$0 + 72 >> 2] | 0; //@line 23044
 $14 = HEAPU8[(HEAP32[$0 + 124 >> 2] | 0) + (($4 & 255) * 12 | 0) + 9 >> 0] | 0; //@line 23050
 $16 = HEAP16[$8 + ($14 * 24 | 0) >> 1] | 0; //@line 23052
 $$0 = $5 >>> 0 < 36e5 ? 100 : $5 >>> 0 < 396e5 ? 1e3 : 1e4; //@line 23057
 $24 = (Math_imul((($16 & 65535) > ($$0 & 65535) | $1 ? $16 : $$0) & 65535, $6) | 0) - $6 | 0; //@line 23064
 HEAP32[$8 + ($14 * 24 | 0) + 12 >> 2] = $2 | $3 ? $24 : 0; //@line 23066
 return;
}
function __ZN12LoRaWANStack24acquire_backoff_metadataERi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$1 = 0, $5 = 0, $storemerge = 0;
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$1 = -1012; //@line 11925
  return $$1 | 0; //@line 11926
 }
 $5 = __ZN7LoRaMac26get_backoff_timer_event_idEv($0) | 0; //@line 11928
 if ((__ZN7LoRaMac26get_backoff_timer_event_idEv($0) | 0) > 0) {
  $$0 = 0; //@line 11935
  $storemerge = __ZN6events10EventQueue9time_leftEi(HEAP32[$0 + 3168 >> 2] | 0, $5) | 0; //@line 11935
 } else {
  $$0 = -1023; //@line 11937
  $storemerge = -1; //@line 11937
 }
 HEAP32[$1 >> 2] = $storemerge; //@line 11939
 $$1 = $$0; //@line 11940
 return $$1 | 0; //@line 11941
}
function __ZN4mbed5Timer7read_msEv__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $18 = 0, $24 = 0, $26 = 0, $28 = 0, $4 = 0, $6 = 0, $9 = 0;
 $4 = $0 + 8 | 0; //@line 28856
 $6 = HEAP32[$4 >> 2] | 0; //@line 28858
 $9 = HEAP32[$4 + 4 >> 2] | 0; //@line 28861
 $11 = ___async_retval; //@line 28863
 $18 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 28870
 $24 = _i64Subtract(HEAP32[$11 >> 2] | 0, HEAP32[$11 + 4 >> 2] | 0, HEAP32[$18 >> 2] | 0, HEAP32[$18 + 4 >> 2] | 0) | 0; //@line 28876
 $26 = _i64Add($24 | 0, tempRet0 | 0, $6 | 0, $9 | 0) | 0; //@line 28878
 $28 = ___udivdi3($26 | 0, tempRet0 | 0, 1e3, 0) | 0; //@line 28880
 HEAP32[___async_retval >> 2] = $28; //@line 28883
 return;
}
function __ZN12radio_eventsD2Ev__async_cb_293($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $7 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 19661
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19663
 $4 = HEAP32[$2 + 12 >> 2] | 0; //@line 19665
 if (!$4) {
  return;
 }
 $7 = HEAP32[$4 + 8 >> 2] | 0; //@line 19671
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 19672
 FUNCTION_TABLE_vi[$7 & 1023]($2); //@line 19673
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 179; //@line 19676
  sp = STACKTOP; //@line 19677
  return;
 }
 ___async_unwind = 0; //@line 19680
 HEAP32[$ReallocAsyncCtx7 >> 2] = 179; //@line 19681
 sp = STACKTOP; //@line 19682
 return;
}
function __ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_256($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 17290
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 17293
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 17296
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 17297
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 17298
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 540; //@line 17301
  sp = STACKTOP; //@line 17302
  return;
 }
 ___async_unwind = 0; //@line 17305
 HEAP32[$ReallocAsyncCtx3 >> 2] = 540; //@line 17306
 sp = STACKTOP; //@line 17307
 return;
}
function __ZN7LoRaMac16add_channel_planERK16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16901
 if (HEAP8[$0 + 2104 >> 0] | 0) {
  $$0 = -1e3; //@line 16906
  return $$0 | 0; //@line 16907
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 16910
 $6 = __ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan($0 + 752 | 0, $1) | 0; //@line 16911
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 481; //@line 16914
  sp = STACKTOP; //@line 16915
  return 0; //@line 16916
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 16918
 $$0 = $6; //@line 16919
 return $$0 | 0; //@line 16920
}
function __ZN16SX1276_LoRaRadio10init_radioEP12radio_events($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 49
 HEAP32[$0 + 788 >> 2] = $1; //@line 51
 $5 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 54
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 55
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 56
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 49; //@line 59
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 61
  sp = STACKTOP; //@line 62
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 65
  HEAP8[$0 + 689 >> 0] = 0; //@line 67
  HEAP8[$0 + 688 >> 0] = 0; //@line 69
  return;
 }
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_254($0) {
 $0 = $0 | 0;
 var $4 = 0, $7 = 0, $ReallocAsyncCtx18 = 0, sp = 0;
 sp = STACKTOP; //@line 17225
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17229
 $7 = HEAP32[(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) + 76 >> 2] | 0; //@line 17232
 $ReallocAsyncCtx18 = _emscripten_realloc_async_context(4) | 0; //@line 17233
 FUNCTION_TABLE_vi[$7 & 1023]($4); //@line 17234
 if (___async) {
  HEAP32[$ReallocAsyncCtx18 >> 2] = 202; //@line 17237
  sp = STACKTOP; //@line 17238
  return;
 }
 ___async_unwind = 0; //@line 17241
 HEAP32[$ReallocAsyncCtx18 >> 2] = 202; //@line 17242
 sp = STACKTOP; //@line 17243
 return;
}
function __ZN12LoRaWANStack12add_channelsERK16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 11216
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$0 = -1012; //@line 11221
  return $$0 | 0; //@line 11222
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 11224
 $5 = __ZN7LoRaMac16add_channel_planERK16lora_channelplan($0, $1) | 0; //@line 11225
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 364; //@line 11228
  sp = STACKTOP; //@line 11229
  return 0; //@line 11230
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 11232
 $$0 = $5; //@line 11233
 return $$0 | 0; //@line 11234
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_402($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 27899
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27901
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27903
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 27905
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($4, $2 + 1836 | 0); //@line 27906
 if (!___async) {
  ___async_unwind = 0; //@line 27909
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 415; //@line 27911
 HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $2; //@line 27913
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $4; //@line 27915
 sp = STACKTOP; //@line 27916
 return;
}
function __ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb_348($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 24194
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24198
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 24200
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 24201
 FUNCTION_TABLE_vi[$5 & 1023]($4); //@line 24202
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 289; //@line 24205
  sp = STACKTOP; //@line 24206
  return;
 }
 ___async_unwind = 0; //@line 24209
 HEAP32[$ReallocAsyncCtx >> 2] = 289; //@line 24210
 sp = STACKTOP; //@line 24211
 return;
}
function __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 181
 $2 = HEAP32[$0 >> 2] | 0; //@line 182
 $3 = $1 + 16 | 0; //@line 183
 $4 = HEAP32[$3 >> 2] | 0; //@line 184
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 185
 __ZN6events10EventQueue6cancelEi($2, $4); //@line 186
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 569; //@line 189
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 191
  sp = STACKTOP; //@line 192
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 195
  HEAP32[$3 >> 2] = 0; //@line 196
  return;
 }
}
function _mbedtls_cipher_setup__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0, $4 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18352
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18354
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 18356
 HEAP32[$2 + 60 >> 2] = $AsyncRetVal; //@line 18358
 if (!$AsyncRetVal) {
  $$0 = -24960; //@line 18361
 } else {
  HEAP32[$2 >> 2] = $4; //@line 18363
  if ((HEAP32[$4 + 4 >> 2] | 0) == 2) {
   HEAP32[$2 + 12 >> 2] = 5; //@line 18369
   HEAP32[$2 + 16 >> 2] = 18; //@line 18371
   $$0 = 0; //@line 18372
  } else {
   $$0 = 0; //@line 18374
  }
 }
 HEAP32[___async_retval >> 2] = $$0; //@line 18378
 return;
}
function __ZN12LoRaWANStack19acquire_rx_metadataER19lorawan_rx_metadata($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $5 = 0, $8 = 0;
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$0 = -1012; //@line 11900
  return $$0 | 0; //@line 11901
 }
 $5 = $0 + 2900 | 0; //@line 11903
 if (HEAP8[$5 >> 0] | 0) {
  $$0 = -1023; //@line 11907
  return $$0 | 0; //@line 11908
 }
 $8 = $0 + 2896 | 0; //@line 11910
 HEAP16[$1 >> 1] = HEAP16[$8 >> 1] | 0; //@line 11911
 HEAP16[$1 + 2 >> 1] = HEAP16[$8 + 2 >> 1] | 0; //@line 11911
 HEAP16[$1 + 4 >> 1] = HEAP16[$8 + 4 >> 1] | 0; //@line 11911
 HEAP8[$5 >> 0] = 1; //@line 11912
 $$0 = 0; //@line 11913
 return $$0 | 0; //@line 11914
}
function __ZN7LoRaMac24continue_joining_processEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14072
 if ((HEAPU8[$0 + 1701 >> 0] | 0) >= (HEAPU8[$0 + 1700 >> 0] | 0)) {
  $$0 = 0; //@line 14079
  return $$0 | 0; //@line 14080
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 14082
 $6 = __ZN7LoRaMac21handle_retransmissionEv($0) | 0; //@line 14083
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 422; //@line 14086
  sp = STACKTOP; //@line 14087
  return 0; //@line 14088
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 14090
 $$0 = ($6 | 0) == 0; //@line 14092
 return $$0 | 0; //@line 14093
}
function __ZN7LoRaMac10disconnectEv__async_cb_129($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 28467
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28469
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28471
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 28473
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($4, $2 + 1816 | 0); //@line 28474
 if (!___async) {
  ___async_unwind = 0; //@line 28477
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 28479
 HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $2; //@line 28481
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $4; //@line 28483
 sp = STACKTOP; //@line 28484
 return;
}
function __ZN7LoRaMac10disconnectEv__async_cb_128($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 28444
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28446
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28448
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 28450
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($4, $2 + 1836 | 0); //@line 28451
 if (!___async) {
  ___async_unwind = 0; //@line 28454
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 478; //@line 28456
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 28458
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 28460
 sp = STACKTOP; //@line 28461
 return;
}
function _twobyte_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$sink$in = 0, $$sink17$sink = 0, $11 = 0, $12 = 0, $8 = 0;
 $8 = (HEAPU8[$1 >> 0] | 0) << 8 | (HEAPU8[$1 + 1 >> 0] | 0); //@line 15542
 $$sink$in = HEAPU8[$0 >> 0] | 0; //@line 15545
 $$sink17$sink = $0; //@line 15545
 while (1) {
  $11 = $$sink17$sink + 1 | 0; //@line 15547
  $12 = HEAP8[$11 >> 0] | 0; //@line 15548
  if (!($12 << 24 >> 24)) {
   break;
  }
  $$sink$in = $$sink$in << 8 & 65280 | $12 & 255; //@line 15556
  if (($$sink$in | 0) == ($8 | 0)) {
   break;
  } else {
   $$sink17$sink = $11; //@line 15561
  }
 }
 return ($12 << 24 >> 24 ? $$sink17$sink : 0) | 0; //@line 15566
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_412($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 29407
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 29410
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 29413
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(4) | 0; //@line 29414
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 29415
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 526; //@line 29418
  sp = STACKTOP; //@line 29419
  return;
 }
 ___async_unwind = 0; //@line 29422
 HEAP32[$ReallocAsyncCtx9 >> 2] = 526; //@line 29423
 sp = STACKTOP; //@line 29424
 return;
}
function __ZN7LoRaMac21remove_single_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16961
 if (HEAP8[$0 + 2104 >> 0] | 0) {
  $$0 = -1e3; //@line 16966
  return $$0 | 0; //@line 16967
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 16970
 $6 = __ZN18LoRaMacChannelPlan21remove_single_channelEh($0 + 752 | 0, $1) | 0; //@line 16971
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 483; //@line 16974
  sp = STACKTOP; //@line 16975
  return 0; //@line 16976
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 16978
 $$0 = $6; //@line 16979
 return $$0 | 0; //@line 16980
}
function _fmt_o($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $7 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) {
  $$0$lcssa = $2; //@line 14111
 } else {
  $$06 = $2; //@line 14113
  $11 = $1; //@line 14113
  $7 = $0; //@line 14113
  while (1) {
   $10 = $$06 + -1 | 0; //@line 14118
   HEAP8[$10 >> 0] = $7 & 7 | 48; //@line 14119
   $7 = _bitshift64Lshr($7 | 0, $11 | 0, 3) | 0; //@line 14120
   $11 = tempRet0; //@line 14121
   if (($7 | 0) == 0 & ($11 | 0) == 0) {
    $$0$lcssa = $10; //@line 14126
    break;
   } else {
    $$06 = $10; //@line 14129
   }
  }
 }
 return $$0$lcssa | 0; //@line 14133
}
function __ZN7LoRaPHY25setup_public_network_modeEb__async_cb_136($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 28869
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 28872
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 28875
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 28876
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 28877
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 549; //@line 28880
  sp = STACKTOP; //@line 28881
  return;
 }
 ___async_unwind = 0; //@line 28884
 HEAP32[$ReallocAsyncCtx3 >> 2] = 549; //@line 28885
 sp = STACKTOP; //@line 28886
 return;
}
function __ZN12LoRaWANStack19acquire_tx_metadataER19lorawan_tx_metadata($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $5 = 0, $8 = 0;
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$0 = -1012; //@line 11875
  return $$0 | 0; //@line 11876
 }
 $5 = $0 + 2895 | 0; //@line 11878
 if (HEAP8[$5 >> 0] | 0) {
  $$0 = -1023; //@line 11882
  return $$0 | 0; //@line 11883
 }
 $8 = $0 + 2884 | 0; //@line 11885
 HEAP32[$1 >> 2] = HEAP32[$8 >> 2]; //@line 11886
 HEAP32[$1 + 4 >> 2] = HEAP32[$8 + 4 >> 2]; //@line 11886
 HEAP32[$1 + 8 >> 2] = HEAP32[$8 + 8 >> 2]; //@line 11886
 HEAP8[$5 >> 0] = 1; //@line 11887
 $$0 = 0; //@line 11888
 return $$0 | 0; //@line 11889
}
function __ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_150($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 29769
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 29772
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 29775
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 29776
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 29777
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 546; //@line 29780
  sp = STACKTOP; //@line 29781
  return;
 }
 ___async_unwind = 0; //@line 29784
 HEAP32[$ReallocAsyncCtx3 >> 2] = 546; //@line 29785
 sp = STACKTOP; //@line 29786
 return;
}
function __ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_173($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 31599
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 31602
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 31605
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 31606
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 31607
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 543; //@line 31610
  sp = STACKTOP; //@line 31611
  return;
 }
 ___async_unwind = 0; //@line 31614
 HEAP32[$ReallocAsyncCtx3 >> 2] = 543; //@line 31615
 sp = STACKTOP; //@line 31616
 return;
}
function __ZN7LoRaPHY15setup_rx_windowEbj__async_cb_131($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 28597
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 28600
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 28603
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 28604
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 28605
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 553; //@line 28608
  sp = STACKTOP; //@line 28609
  return;
 }
 ___async_unwind = 0; //@line 28612
 HEAP32[$ReallocAsyncCtx4 >> 2] = 553; //@line 28613
 sp = STACKTOP; //@line 28614
 return;
}
function __ZN7LoRaPHY15setup_rx_windowEbj__async_cb_130($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 28574
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 28577
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 28580
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 28581
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 28582
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 553; //@line 28585
  sp = STACKTOP; //@line 28586
  return;
 }
 ___async_unwind = 0; //@line 28589
 HEAP32[$ReallocAsyncCtx4 >> 2] = 553; //@line 28590
 sp = STACKTOP; //@line 28591
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_dtorIN6events5EventIS1_EEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 var $3 = 0, $5 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 33376
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 33379
 $5 = HEAP32[$3 + 4 >> 2] | 0; //@line 33381
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 33382
 _equeue_dealloc($5, $3); //@line 33383
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 699; //@line 33386
  sp = STACKTOP; //@line 33387
  return;
 }
 ___async_unwind = 0; //@line 33390
 HEAP32[$ReallocAsyncCtx2 >> 2] = 699; //@line 33391
 sp = STACKTOP; //@line 33392
 return;
}
function __ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_312($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 21531
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21535
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 21537
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 21538
 FUNCTION_TABLE_vi[$5 & 1023]($4); //@line 21539
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 441; //@line 21542
  sp = STACKTOP; //@line 21543
  return;
 }
 ___async_unwind = 0; //@line 21546
 HEAP32[$ReallocAsyncCtx >> 2] = 441; //@line 21547
 sp = STACKTOP; //@line 21548
 return;
}
function __ZN7LoRaPHY11handle_sendEPhh__async_cb_104($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 26957
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 26960
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 26963
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 26964
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 26965
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 559; //@line 26968
  sp = STACKTOP; //@line 26969
  return;
 }
 ___async_unwind = 0; //@line 26972
 HEAP32[$ReallocAsyncCtx3 >> 2] = 559; //@line 26973
 sp = STACKTOP; //@line 26974
 return;
}
function __ZN16SX1276_LoRaRadio6randomEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 664
 $1 = _emscripten_asm_const_i(4) | 0; //@line 665
 $4 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0; //@line 668
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 669
 FUNCTION_TABLE_vi[$4 & 1023]($0); //@line 670
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 59; //@line 673
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 675
  sp = STACKTOP; //@line 676
  return 0; //@line 677
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 679
  return $1 | 0; //@line 680
 }
 return 0; //@line 682
}
function __ZN12LoRaWANStack16remove_a_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 11240
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$0 = -1012; //@line 11245
  return $$0 | 0; //@line 11246
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 11248
 $5 = __ZN7LoRaMac21remove_single_channelEh($0, $1) | 0; //@line 11249
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 365; //@line 11252
  sp = STACKTOP; //@line 11253
  return 0; //@line 11254
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 11256
 $$0 = $5; //@line 11257
 return $$0 | 0; //@line 11258
}
function __ZN7LoRaPHY16get_alternate_DREh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $12 = 0, $3 = 0, $6 = 0, $8 = 0;
 $3 = HEAP8[$0 + 31 >> 0] | 0; //@line 21383
 $6 = HEAP8[$0 + 26 >> 0] | 0; //@line 21386
 $8 = ($3 & 255) + 1 | 0; //@line 21388
 $12 = (($1 & 255) >>> 0) % (($8 - ($6 & 255) & 255) >>> 0) | 0; //@line 21392
 switch (($12 & 255) << 24 >> 24) {
 case 1:
  {
   $$0 = $3; //@line 21396
   return $$0 | 0; //@line 21397
  }
 case 0:
  {
   $$0 = $6; //@line 21401
   return $$0 | 0; //@line 21402
  }
 default:
  {
   $$0 = $8 - $12 & 255; //@line 21408
   return $$0 | 0; //@line 21409
  }
 }
 return 0; //@line 21412
}
function __ZN7LoRaMac19remove_channel_planEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16925
 if (HEAP8[$0 + 2104 >> 0] | 0) {
  $$0 = -1e3; //@line 16930
  return $$0 | 0; //@line 16931
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 16934
 $5 = __ZN18LoRaMacChannelPlan11remove_planEv($0 + 752 | 0) | 0; //@line 16935
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 482; //@line 16938
  sp = STACKTOP; //@line 16939
  return 0; //@line 16940
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 16942
 $$0 = $5; //@line 16943
 return $$0 | 0; //@line 16944
}
function ___cxa_is_pointer_type($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 18268
 do {
  if (!$0) {
   $3 = 0; //@line 18272
  } else {
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 18274
   $2 = ___dynamic_cast($0, 400, 456, 0) | 0; //@line 18275
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 747; //@line 18278
    sp = STACKTOP; //@line 18279
    return 0; //@line 18280
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 18282
    $3 = ($2 | 0) != 0 & 1; //@line 18285
    break;
   }
  }
 } while (0);
 return $3 | 0; //@line 18290
}
function __ZN7LoRaPHY24restore_default_channelsEv($0) {
 $0 = $0 | 0;
 var $11 = 0, $2 = 0, $5 = 0, $7 = 0, $8 = 0, $indvars$iv = 0;
 $2 = HEAP8[$0 + 113 >> 0] | 0; //@line 19885
 if (!($2 << 24 >> 24)) {
  return;
 }
 $5 = HEAP32[$0 + 120 >> 2] | 0; //@line 19891
 $7 = HEAP32[$0 + 116 >> 2] | 0; //@line 19893
 $8 = $2 & 255; //@line 19894
 $indvars$iv = 0; //@line 19895
 do {
  $11 = $7 + ($indvars$iv << 1) | 0; //@line 19899
  HEAP16[$11 >> 1] = HEAP16[$11 >> 1] | HEAP16[$5 + ($indvars$iv << 1) >> 1]; //@line 19902
  $indvars$iv = $indvars$iv + 1 | 0; //@line 19903
 } while ($indvars$iv >>> 0 < $8 >>> 0);
 return;
}
function __ZN12LoRaWANStack17drop_channel_listEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 11263
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$0 = -1012; //@line 11268
  return $$0 | 0; //@line 11269
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 11271
 $4 = __ZN7LoRaMac19remove_channel_planEv($0) | 0; //@line 11272
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 366; //@line 11275
  sp = STACKTOP; //@line 11276
  return 0; //@line 11277
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 11279
 $$0 = $4; //@line 11280
 return $$0 | 0; //@line 11281
}
function _invoke_ticker__async_cb_238($0) {
 $0 = $0 | 0;
 var $5 = 0, $6 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14529
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 14535
 $6 = HEAP32[$0 + 8 >> 2] | 0; //@line 14536
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 14537
 FUNCTION_TABLE_vi[$5 & 1023]($6); //@line 14538
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 665; //@line 14541
  sp = STACKTOP; //@line 14542
  return;
 }
 ___async_unwind = 0; //@line 14545
 HEAP32[$ReallocAsyncCtx >> 2] = 665; //@line 14546
 sp = STACKTOP; //@line 14547
 return;
}
function __ZN16LoRaWANInterface4sendEhPKhti($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5484
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5487
 $7 = __ZN12LoRaWANStack9handle_txEhPKhthbb($0 + 4 | 0, $1, $2, $3, $4 & 255, 0, 0) | 0; //@line 5488
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 160; //@line 5491
  sp = STACKTOP; //@line 5492
  return 0; //@line 5493
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5495
  return $7 | 0; //@line 5496
 }
 return 0; //@line 5498
}
function __ZN16LoRaWANInterface7receiveEPhtRhRi($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5534
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5536
 $6 = __ZN12LoRaWANStack9handle_rxEPhtRhRib($0 + 4 | 0, $1, $2, $3, $4, 0) | 0; //@line 5537
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 162; //@line 5540
  sp = STACKTOP; //@line 5541
  return 0; //@line 5542
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5544
  return $6 | 0; //@line 5545
 }
 return 0; //@line 5547
}
function _getint_671($0) {
 $0 = $0 | 0;
 var $$0$lcssa = 0, $$04 = 0, $11 = 0, $12 = 0, $7 = 0;
 if (!(_isdigit(HEAP8[HEAP32[$0 >> 2] >> 0] | 0) | 0)) {
  $$0$lcssa = 0; //@line 13755
 } else {
  $$04 = 0; //@line 13757
  while (1) {
   $7 = HEAP32[$0 >> 2] | 0; //@line 13760
   $11 = ($$04 * 10 | 0) + -48 + (HEAP8[$7 >> 0] | 0) | 0; //@line 13764
   $12 = $7 + 1 | 0; //@line 13765
   HEAP32[$0 >> 2] = $12; //@line 13766
   if (!(_isdigit(HEAP8[$12 >> 0] | 0) | 0)) {
    $$0$lcssa = $11; //@line 13772
    break;
   } else {
    $$04 = $11; //@line 13775
   }
  }
 }
 return $$0$lcssa | 0; //@line 13779
}
function __ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8548
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 8550
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 8556
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8557
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 8558
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 276; //@line 8561
  sp = STACKTOP; //@line 8562
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 8565
 return;
}
function __ZN7LoRaMac15send_ongoing_txEv__async_cb_221($0) {
 $0 = $0 | 0;
 var $$0 = 0, $13 = 0, $4 = 0, $6 = 0, $AsyncRetVal = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13230
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13232
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 13236
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 13239
  $13 = ___async_retval; //@line 13240
  HEAP32[$13 >> 2] = $$0; //@line 13241
  return;
 }
 HEAP32[$6 + 2052 >> 2] = HEAP32[$4 >> 2]; //@line 13246
 $$0 = 0; //@line 13247
 $13 = ___async_retval; //@line 13248
 HEAP32[$13 >> 2] = $$0; //@line 13249
 return;
}
function __ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 9454
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 9456
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 9462
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 9463
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 9464
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 307; //@line 9467
  sp = STACKTOP; //@line 9468
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 9471
 return;
}
function __ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10242
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 10244
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 10250
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10251
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 10252
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 337; //@line 10255
  sp = STACKTOP; //@line 10256
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 10259
 return;
}
function __ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5553
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5555
 $3 = __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t($0 + 4 | 0, $1) | 0; //@line 5556
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 163; //@line 5559
  sp = STACKTOP; //@line 5560
  return 0; //@line 5561
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5563
  return $3 | 0; //@line 5564
 }
 return 0; //@line 5566
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0;
 $x_sroa_0_0_extract_trunc = $a$0; //@line 31667
 $y_sroa_0_0_extract_trunc = $b$0; //@line 31668
 $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0; //@line 31669
 $1$1 = tempRet0; //@line 31670
 return (tempRet0 = (Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0) + (Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $1$1 | $1$1 & 0, $1$0 | 0 | 0) | 0; //@line 31672
}
function _mbedtls_cipher_update__async_cb_111($0) {
 $0 = $0 | 0;
 var $$1 = 0, $2 = 0, $4 = 0, $9 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27442
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27444
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 27446
 if ($AsyncRetVal | 0) {
  $$1 = $AsyncRetVal; //@line 27449
  $9 = ___async_retval; //@line 27450
  HEAP32[$9 >> 2] = $$1; //@line 27451
  return;
 }
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + $4; //@line 27456
 $$1 = 0; //@line 27457
 $9 = ___async_retval; //@line 27458
 HEAP32[$9 >> 2] = $$1; //@line 27459
 return;
}
function __ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7299
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 7301
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 7307
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7308
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 7309
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 230; //@line 7312
  sp = STACKTOP; //@line 7313
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 7316
 return;
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_233($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 14232
 if (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 14240
 _mbed_assert_internal(13647, 13665, 57); //@line 14241
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 568; //@line 14244
  sp = STACKTOP; //@line 14245
  return;
 }
 ___async_unwind = 0; //@line 14248
 HEAP32[$ReallocAsyncCtx6 >> 2] = 568; //@line 14249
 sp = STACKTOP; //@line 14250
 return;
}
function __ZN16LoRaWANInterface10initializeEPN6events10EventQueueE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5292
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5294
 $3 = __ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE($0 + 4 | 0, $1) | 0; //@line 5295
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 153; //@line 5298
  sp = STACKTOP; //@line 5299
  return 0; //@line 5300
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5302
  return $3 | 0; //@line 5303
 }
 return 0; //@line 5305
}
function __ZN16LoRaWANInterfaceC2ER9LoRaRadio($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5944
 HEAP32[$0 >> 2] = 724; //@line 5945
 $2 = $0 + 4 | 0; //@line 5946
 __ZN12LoRaWANStackC2Ev($2); //@line 5947
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5948
 __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio($2, $1); //@line 5949
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 180; //@line 5952
  sp = STACKTOP; //@line 5953
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5956
  return;
 }
}
function __ZN12LoRaWANStack28tx_timeout_interrupt_handlerEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 23242
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 23249
 _mbed_assert_internal(12104, 12113, 539); //@line 23250
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 214; //@line 23253
  sp = STACKTOP; //@line 23254
  return;
 }
 ___async_unwind = 0; //@line 23257
 HEAP32[$ReallocAsyncCtx2 >> 2] = 214; //@line 23258
 sp = STACKTOP; //@line 23259
 return;
}
function __ZN16LoRaWANInterface16set_channel_planERK16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5416
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5418
 $3 = __ZN12LoRaWANStack12add_channelsERK16lora_channelplan($0 + 4 | 0, $1) | 0; //@line 5419
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 157; //@line 5422
  sp = STACKTOP; //@line 5423
  return 0; //@line 5424
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5426
  return $3 | 0; //@line 5427
 }
 return 0; //@line 5429
}
function _mbedtls_cipher_info_from_type($0) {
 $0 = $0 | 0;
 var $$05 = 0, $$06 = 0, $1 = 0, $9 = 0;
 $1 = HEAP32[2374] | 0; //@line 2266
 L1 : do {
  if (!$1) {
   $$05 = 0; //@line 2270
  } else {
   $$06 = 9492; //@line 2272
   $9 = $1; //@line 2272
   while (1) {
    if ((HEAP32[$$06 >> 2] | 0) == ($0 | 0)) {
     $$05 = $9; //@line 2277
     break L1;
    }
    $9 = HEAP32[$$06 + 12 >> 2] | 0; //@line 2282
    if (!$9) {
     $$05 = 0; //@line 2285
     break;
    } else {
     $$06 = $$06 + 8 | 0; //@line 2288
    }
   }
  }
 } while (0);
 return $$05 | 0; //@line 2293
}
function __ZN7LoRaMac23on_backoff_timer_expiryEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 25634
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 25641
 _mbed_assert_internal(13109, 13135, 855); //@line 25642
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 435; //@line 25645
  sp = STACKTOP; //@line 25646
  return;
 }
 ___async_unwind = 0; //@line 25649
 HEAP32[$ReallocAsyncCtx2 >> 2] = 435; //@line 25650
 sp = STACKTOP; //@line 25651
 return;
}
function __ZN12LoRaWANStack20tx_interrupt_handlerEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 23566
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 23573
 _mbed_assert_internal(12104, 12113, 507); //@line 23574
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 205; //@line 23577
  sp = STACKTOP; //@line 23578
  return;
 }
 ___async_unwind = 0; //@line 23581
 HEAP32[$ReallocAsyncCtx2 >> 2] = 205; //@line 23582
 sp = STACKTOP; //@line 23583
 return;
}
function __ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 31488
 if (HEAP32[$0 + 8 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 31497
 _mbed_assert_internal(12104, 12113, 547); //@line 31498
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 217; //@line 31501
  sp = STACKTOP; //@line 31502
  return;
 }
 ___async_unwind = 0; //@line 31505
 HEAP32[$ReallocAsyncCtx3 >> 2] = 217; //@line 31506
 sp = STACKTOP; //@line 31507
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_330($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 23324
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(4) | 0; //@line 23331
 _mbed_assert_internal(12104, 12113, 881); //@line 23332
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 313; //@line 23335
  sp = STACKTOP; //@line 23336
  return;
 }
 ___async_unwind = 0; //@line 23339
 HEAP32[$ReallocAsyncCtx10 >> 2] = 313; //@line 23340
 sp = STACKTOP; //@line 23341
 return;
}
function runPostSets() {}
function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535; //@line 31652
 $2 = $b & 65535; //@line 31653
 $3 = Math_imul($2, $1) | 0; //@line 31654
 $6 = $a >>> 16; //@line 31655
 $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0; //@line 31656
 $11 = $b >>> 16; //@line 31657
 $12 = Math_imul($11, $1) | 0; //@line 31658
 return (tempRet0 = ($8 >>> 16) + (Math_imul($11, $6) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, $8 + $12 << 16 | $3 & 65535 | 0) | 0; //@line 31659
}
function __ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8776
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 8778
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 8784
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8785
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 8786
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 287; //@line 8789
  sp = STACKTOP; //@line 8790
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 8793
 return;
}
function __ZN12LoRaWANStack26rx_error_interrupt_handlerEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 22276
 if (HEAP32[$0 + 8 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 22285
 _mbed_assert_internal(12104, 12113, 532); //@line 22286
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 211; //@line 22289
  sp = STACKTOP; //@line 22290
  return;
 }
 ___async_unwind = 0; //@line 22293
 HEAP32[$ReallocAsyncCtx3 >> 2] = 211; //@line 22294
 sp = STACKTOP; //@line 22295
 return;
}
function __ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 23883
 if (HEAP32[$0 + 8 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 23892
 _mbed_assert_internal(12104, 12113, 524); //@line 23893
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 208; //@line 23896
  sp = STACKTOP; //@line 23897
  return;
 }
 ___async_unwind = 0; //@line 23900
 HEAP32[$ReallocAsyncCtx3 >> 2] = 208; //@line 23901
 sp = STACKTOP; //@line 23902
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_264($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 17576
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17578
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17580
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 17581
 __ZN4mbed10TimerEventD2Ev($2); //@line 17582
 if (!___async) {
  ___async_unwind = 0; //@line 17585
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 76; //@line 17587
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $4; //@line 17589
 sp = STACKTOP; //@line 17590
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_263($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 17556
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17558
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17560
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 17561
 __ZN4mbed10TimerEventD2Ev($4); //@line 17562
 if (!___async) {
  ___async_unwind = 0; //@line 17565
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 74; //@line 17567
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $2; //@line 17569
 sp = STACKTOP; //@line 17570
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_262($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 17536
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17538
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17540
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(8) | 0; //@line 17541
 __ZN4mbed10TimerEventD2Ev($4); //@line 17542
 if (!___async) {
  ___async_unwind = 0; //@line 17545
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 72; //@line 17547
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $2; //@line 17549
 sp = STACKTOP; //@line 17550
 return;
}
function _calloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $3 = 0, $8 = 0;
 if (!$0) {
  $$0 = 0; //@line 11346
 } else {
  $3 = Math_imul($1, $0) | 0; //@line 11348
  if (($1 | $0) >>> 0 > 65535) {
   $$0 = (($3 >>> 0) / ($0 >>> 0) | 0 | 0) == ($1 | 0) ? $3 : -1; //@line 11355
  } else {
   $$0 = $3; //@line 11357
  }
 }
 $8 = _malloc($$0) | 0; //@line 11360
 if (!$8) {
  return $8 | 0; //@line 11363
 }
 if (!(HEAP32[$8 + -4 >> 2] & 3)) {
  return $8 | 0; //@line 11370
 }
 _memset($8 | 0, 0, $$0 | 0) | 0; //@line 11372
 return $8 | 0; //@line 11373
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 17516
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17518
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17520
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 17521
 __ZN4mbed10TimerEventD2Ev($4); //@line 17522
 if (!___async) {
  ___async_unwind = 0; //@line 17525
 }
 HEAP32[$ReallocAsyncCtx8 >> 2] = 70; //@line 17527
 HEAP32[$ReallocAsyncCtx8 + 4 >> 2] = $2; //@line 17529
 sp = STACKTOP; //@line 17530
 return;
}
function __ZN16LoRaWANInterface7connectERK15lorawan_connect($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5329
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5331
 $3 = __ZN12LoRaWANStack7connectERK15lorawan_connect($0 + 4 | 0, $1) | 0; //@line 5332
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 155; //@line 5335
  sp = STACKTOP; //@line 5336
  return 0; //@line 5337
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5339
  return $3 | 0; //@line 5340
 }
 return 0; //@line 5342
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_270($0) {
 $0 = $0 | 0;
 var $3 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 17786
 $3 = (HEAP32[$0 + 4 >> 2] | 0) + 52 | 0; //@line 17789
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(4) | 0; //@line 17790
 __ZN4mbed11InterruptInD2Ev($3); //@line 17791
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 82; //@line 17794
  sp = STACKTOP; //@line 17795
  return;
 }
 ___async_unwind = 0; //@line 17798
 HEAP32[$ReallocAsyncCtx9 >> 2] = 82; //@line 17799
 sp = STACKTOP; //@line 17800
 return;
}
function _ticker_set_handler($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5059
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 5060
 _initialize($0); //@line 5061
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 617; //@line 5064
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 5066
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 5068
  sp = STACKTOP; //@line 5069
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5072
  HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = $1; //@line 5075
  return;
 }
}
function _mbed_die__async_cb_89($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 26105
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26107
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 26109
 $ReallocAsyncCtx15 = _emscripten_realloc_async_context(8) | 0; //@line 26110
 _wait_ms(150); //@line 26111
 if (!___async) {
  ___async_unwind = 0; //@line 26114
 }
 HEAP32[$ReallocAsyncCtx15 >> 2] = 637; //@line 26116
 HEAP32[$ReallocAsyncCtx15 + 4 >> 2] = $2; //@line 26118
 sp = STACKTOP; //@line 26119
 return;
}
function _mbed_die__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx16 = 0, sp = 0;
 sp = STACKTOP; //@line 25735
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25737
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 25739
 $ReallocAsyncCtx16 = _emscripten_realloc_async_context(8) | 0; //@line 25740
 _wait_ms(150); //@line 25741
 if (!___async) {
  ___async_unwind = 0; //@line 25744
 }
 HEAP32[$ReallocAsyncCtx16 >> 2] = 636; //@line 25746
 HEAP32[$ReallocAsyncCtx16 + 4 >> 2] = $2; //@line 25748
 sp = STACKTOP; //@line 25749
 return;
}
function ___fflush_unlocked__async_cb_226($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $8 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13554
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13556
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13558
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13560
 HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 16 >> 2] = 0; //@line 13562
 HEAP32[$4 >> 2] = 0; //@line 13563
 HEAP32[$6 >> 2] = 0; //@line 13564
 HEAP32[$8 >> 2] = 0; //@line 13565
 HEAP32[$10 >> 2] = 0; //@line 13566
 HEAP32[___async_retval >> 2] = 0; //@line 13568
 return;
}
function _mbedtls_cipher_free__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 23954
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23956
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 23957
 _mbedtls_platform_zeroize($2, 68); //@line 23958
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 579; //@line 23961
  sp = STACKTOP; //@line 23962
  return;
 }
 ___async_unwind = 0; //@line 23965
 HEAP32[$ReallocAsyncCtx2 >> 2] = 579; //@line 23966
 sp = STACKTOP; //@line 23967
 return;
}
function __ZN16LoRaWANInterface14remove_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5462
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5464
 $3 = __ZN12LoRaWANStack16remove_a_channelEh($0 + 4 | 0, $1) | 0; //@line 5465
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 159; //@line 5468
  sp = STACKTOP; //@line 5469
  return 0; //@line 5470
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5472
  return $3 | 0; //@line 5473
 }
 return 0; //@line 5475
}
function _mbedtls_gcm_free__async_cb_343($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 23864
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23866
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 23867
 _mbedtls_platform_zeroize($2, 400); //@line 23868
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 615; //@line 23871
  sp = STACKTOP; //@line 23872
  return;
 }
 ___async_unwind = 0; //@line 23875
 HEAP32[$ReallocAsyncCtx >> 2] = 615; //@line 23876
 sp = STACKTOP; //@line 23877
 return;
}
function _mbedtls_ccm_free__async_cb_422($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 30648
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30650
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 30651
 _mbedtls_platform_zeroize($2, 68); //@line 30652
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 576; //@line 30655
  sp = STACKTOP; //@line 30656
  return;
 }
 ___async_unwind = 0; //@line 30659
 HEAP32[$ReallocAsyncCtx >> 2] = 576; //@line 30660
 sp = STACKTOP; //@line 30661
 return;
}
function __ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa__async_cb_135($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28804
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28806
 if (HEAP32[___async_retval >> 2] | 0) {
  HEAP32[$4 + 2020 >> 2] = 1; //@line 28812
  return;
 }
 if (!(__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($2) | 0)) {
  return;
 }
 HEAP32[$4 + 2076 >> 2] = 4; //@line 28820
 HEAP8[$4 + 2080 >> 0] = 1; //@line 28822
 __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($2); //@line 28823
 return;
}
function __ZN4mbed7TimeoutD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 24163
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24165
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 24166
 __ZN4mbed10TimerEventD2Ev($2); //@line 24167
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 113; //@line 24170
  sp = STACKTOP; //@line 24171
  return;
 }
 ___async_unwind = 0; //@line 24174
 HEAP32[$ReallocAsyncCtx2 >> 2] = 113; //@line 24175
 sp = STACKTOP; //@line 24176
 return;
}
function __ZN4mbed6TickerD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 20774
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20776
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 20777
 __ZN4mbed10TimerEventD2Ev($2); //@line 20778
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 660; //@line 20781
  sp = STACKTOP; //@line 20782
  return;
 }
 ___async_unwind = 0; //@line 20785
 HEAP32[$ReallocAsyncCtx2 >> 2] = 660; //@line 20786
 sp = STACKTOP; //@line 20787
 return;
}
function __ZN12LoRaWANStackD2Ev__async_cb_261($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 17473
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17475
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 17476
 __ZN7LoRaMacD2Ev($2); //@line 17477
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 172; //@line 17480
  sp = STACKTOP; //@line 17481
  return;
 }
 ___async_unwind = 0; //@line 17484
 HEAP32[$ReallocAsyncCtx4 >> 2] = 172; //@line 17485
 sp = STACKTOP; //@line 17486
 return;
}
function __ZN4mbed6Ticker7handlerEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7218
 $2 = HEAP32[$0 + 52 >> 2] | 0; //@line 7220
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 >> 2] | 0; //@line 7226
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7227
 FUNCTION_TABLE_vi[$5 & 1023]($0 + 40 | 0); //@line 7228
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 663; //@line 7231
  sp = STACKTOP; //@line 7232
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 7235
 return;
}
function _mbed_vtracef__async_cb_160($0) {
 $0 = $0 | 0;
 var $1 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 30739
 $1 = HEAP32[175] | 0; //@line 30740
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 30741
 FUNCTION_TABLE_vi[$1 & 1023](11956); //@line 30742
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 144; //@line 30745
  sp = STACKTOP; //@line 30746
  return;
 }
 ___async_unwind = 0; //@line 30749
 HEAP32[$ReallocAsyncCtx3 >> 2] = 144; //@line 30750
 sp = STACKTOP; //@line 30751
 return;
}
function __ZN7LoRaPHY17copy_channel_maskEPtS0_h($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $indvars$iv = 0, $wide$trip$count = 0;
 if (!(($1 | 0) != 0 & ($2 | 0) != 0 & $3 << 24 >> 24 != 0)) {
  return;
 }
 $wide$trip$count = $3 & 255; //@line 22580
 $indvars$iv = 0; //@line 22581
 do {
  HEAP16[$1 + ($indvars$iv << 1) >> 1] = HEAP16[$2 + ($indvars$iv << 1) >> 1] | 0; //@line 22586
  $indvars$iv = $indvars$iv + 1 | 0; //@line 22587
 } while (($indvars$iv | 0) != ($wide$trip$count | 0));
 return;
}
function dynCall_viiiiiiiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 a9 = a9 | 0;
 a10 = a10 | 0;
 a11 = a11 | 0;
 a12 = a12 | 0;
 a13 = a13 | 0;
 a14 = a14 | 0;
 a15 = a15 | 0;
 FUNCTION_TABLE_viiiiiiiiiiiiiii[index & 1](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0, a9 | 0, a10 | 0, a11 | 0, a12 | 0, a13 | 0, a14 | 0, a15 | 0); //@line 32280
}
function __ZN16LoRaWANInterfaceD0Ev($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5656
 HEAP32[$0 >> 2] = 724; //@line 5657
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 5659
 __ZN12LoRaWANStackD2Ev($0 + 4 | 0); //@line 5660
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 167; //@line 5663
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 5665
  sp = STACKTOP; //@line 5666
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5669
  __ZdlPv($0); //@line 5670
  return;
 }
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_274($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 17863
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17865
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(8) | 0; //@line 17867
 __ZN4mbed11InterruptInD2Ev($2 + 340 | 0); //@line 17868
 if (!___async) {
  ___async_unwind = 0; //@line 17871
 }
 HEAP32[$ReallocAsyncCtx13 >> 2] = 78; //@line 17873
 HEAP32[$ReallocAsyncCtx13 + 4 >> 2] = $2; //@line 17875
 sp = STACKTOP; //@line 17876
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_273($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 17844
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17846
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 17848
 __ZN4mbed11InterruptInD2Ev($2 + 268 | 0); //@line 17849
 if (!___async) {
  ___async_unwind = 0; //@line 17852
 }
 HEAP32[$ReallocAsyncCtx12 >> 2] = 79; //@line 17854
 HEAP32[$ReallocAsyncCtx12 + 4 >> 2] = $2; //@line 17856
 sp = STACKTOP; //@line 17857
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_272($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 17825
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17827
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(8) | 0; //@line 17829
 __ZN4mbed11InterruptInD2Ev($2 + 196 | 0); //@line 17830
 if (!___async) {
  ___async_unwind = 0; //@line 17833
 }
 HEAP32[$ReallocAsyncCtx11 >> 2] = 80; //@line 17835
 HEAP32[$ReallocAsyncCtx11 + 4 >> 2] = $2; //@line 17837
 sp = STACKTOP; //@line 17838
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_271($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 17806
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17808
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 17810
 __ZN4mbed11InterruptInD2Ev($2 + 124 | 0); //@line 17811
 if (!___async) {
  ___async_unwind = 0; //@line 17814
 }
 HEAP32[$ReallocAsyncCtx10 >> 2] = 81; //@line 17816
 HEAP32[$ReallocAsyncCtx10 + 4 >> 2] = $2; //@line 17818
 sp = STACKTOP; //@line 17819
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_265($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 17596
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17598
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(8) | 0; //@line 17600
 __ZN4mbed11InterruptInD2Ev($2 + 412 | 0); //@line 17601
 if (!___async) {
  ___async_unwind = 0; //@line 17604
 }
 HEAP32[$ReallocAsyncCtx14 >> 2] = 77; //@line 17606
 HEAP32[$ReallocAsyncCtx14 + 4 >> 2] = $2; //@line 17608
 sp = STACKTOP; //@line 17609
 return;
}
function __ZN16LoRaWANInterface19remove_channel_planEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5443
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5445
 $2 = __ZN12LoRaWANStack17drop_channel_listEv($0 + 4 | 0) | 0; //@line 5446
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 158; //@line 5449
  sp = STACKTOP; //@line 5450
  return 0; //@line 5451
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5453
  return $2 | 0; //@line 5454
 }
 return 0; //@line 5456
}
function __ZN7LoRaMac10disconnectEv__async_cb_126($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 28399
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28401
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 28403
 __ZN7LoRaPHY18put_radio_to_sleepEv($2 + 4 | 0); //@line 28404
 if (!___async) {
  ___async_unwind = 0; //@line 28407
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 480; //@line 28409
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 28411
 sp = STACKTOP; //@line 28412
 return;
}
function __GLOBAL__sub_I_main_cpp__async_cb($0) {
 $0 = $0 | 0;
 var dest = 0, stop = 0;
 __ZN5Sht31C2E7PinNameS0_(24460, 10, 11); //@line 30674
 __ZN4mbed11InterruptInC2E7PinName(20376, 1337); //@line 30675
 __ZN6events10EventQueueC2EjPh(20448, 1664, 0); //@line 30676
 __ZN16LoRaWANInterfaceC2ER9LoRaRadio(20652, 19040); //@line 30677
 dest = 23828; //@line 30678
 stop = dest + 48 | 0; //@line 30678
 do {
  HEAP32[dest >> 2] = 0; //@line 30678
  dest = dest + 4 | 0; //@line 30678
 } while ((dest | 0) < (stop | 0));
 return;
}
function _aes_setkey_dec_wrap($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3137
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3138
 $3 = _mbedtls_aes_setkey_dec($0, $1, $2) | 0; //@line 3139
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 592; //@line 3142
  sp = STACKTOP; //@line 3143
  return 0; //@line 3144
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3146
  return $3 | 0; //@line 3147
 }
 return 0; //@line 3149
}
function _gcm_aes_setkey_wrap($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3045
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3046
 $3 = _mbedtls_gcm_setkey($0, 2, $1, $2) | 0; //@line 3047
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 590; //@line 3050
  sp = STACKTOP; //@line 3051
  return 0; //@line 3052
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3054
  return $3 | 0; //@line 3055
 }
 return 0; //@line 3057
}
function _ccm_aes_setkey_wrap($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2997
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2998
 $3 = _mbedtls_ccm_setkey($0, 2, $1, $2) | 0; //@line 2999
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 588; //@line 3002
  sp = STACKTOP; //@line 3003
  return 0; //@line 3004
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3006
  return $3 | 0; //@line 3007
 }
 return 0; //@line 3009
}
function __ZN4mbed11InterruptInC2E7PinName($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, dest = 0, stop = 0;
 HEAP32[$0 >> 2] = 604; //@line 2293
 $2 = $0 + 4 | 0; //@line 2294
 $3 = $0 + 28 | 0; //@line 2295
 $4 = $0; //@line 2296
 dest = $2; //@line 2297
 stop = dest + 68 | 0; //@line 2297
 do {
  HEAP32[dest >> 2] = 0; //@line 2297
  dest = dest + 4 | 0; //@line 2297
 } while ((dest | 0) < (stop | 0));
 _gpio_irq_init($3, $1, 14, $4) | 0; //@line 2298
 _gpio_init_in($2, $1); //@line 2299
 return;
}
function _vsprintf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16238
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 16239
 $3 = _vsnprintf($0, 2147483647, $1, $2) | 0; //@line 16240
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 714; //@line 16243
  sp = STACKTOP; //@line 16244
  return 0; //@line 16245
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 16247
  return $3 | 0; //@line 16248
 }
 return 0; //@line 16250
}
function _serial_putc__async_cb_157($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 30125
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30127
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 30128
 _fflush($2) | 0; //@line 30129
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 658; //@line 30132
  sp = STACKTOP; //@line 30133
  return;
 }
 ___async_unwind = 0; //@line 30136
 HEAP32[$ReallocAsyncCtx >> 2] = 658; //@line 30137
 sp = STACKTOP; //@line 30138
 return;
}
function __ZN7LoRaMac24setup_link_check_requestEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = $0 + 2084 | 0; //@line 16101
 HEAP32[$1 >> 2] = 0; //@line 16102
 HEAP32[$1 + 4 >> 2] = 0; //@line 16102
 HEAP32[$1 + 8 >> 2] = 0; //@line 16102
 HEAP32[$1 + 12 >> 2] = 0; //@line 16102
 HEAP32[$1 + 16 >> 2] = 0; //@line 16102
 HEAP32[$0 + 2092 >> 2] = 1; //@line 16104
 HEAP32[$0 + 2088 >> 2] = 1; //@line 16106
 HEAP8[$1 >> 0] = 1; //@line 16107
 __ZN14LoRaMacCommand18add_link_check_reqEv($0 + 476 | 0) | 0; //@line 16109
 return;
}
function __ZN4mbed8CallbackIFv11lora_eventsEE13function_callIPS2_EEvPKvS1_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8042
 $2 = HEAP32[$0 >> 2] | 0; //@line 8043
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8044
 FUNCTION_TABLE_vi[$2 & 1023]($1); //@line 8045
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 695; //@line 8048
  sp = STACKTOP; //@line 8049
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 8052
  return;
 }
}
function __ZN16LoRaWANInterface14cancel_sendingEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5620
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5622
 $2 = __ZN12LoRaWANStack12stop_sendingEv($0 + 4 | 0) | 0; //@line 5623
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 165; //@line 5626
  sp = STACKTOP; //@line 5627
  return 0; //@line 5628
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5630
  return $2 | 0; //@line 5631
 }
 return 0; //@line 5633
}
function __ZN12LoRaWANStackD2Ev__async_cb_259($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 17448
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17450
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 17452
 __ZN12radio_eventsD2Ev($2 + 2384 | 0); //@line 17453
 if (!___async) {
  ___async_unwind = 0; //@line 17456
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 171; //@line 17458
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 17460
 sp = STACKTOP; //@line 17461
 return;
}
function __ZN14LoRaMacCommand18add_link_check_reqEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $5 = 0, $6 = 0, $7 = 0;
 $5 = $0 + 2 | 0; //@line 18917
 $6 = HEAP8[$5 >> 0] | 0; //@line 18918
 $7 = $6 & 255; //@line 18919
 if ((128 - (HEAPU8[$0 + 3 >> 0] | 0) | 0) <= ($7 | 0)) {
  $$0 = -1010; //@line 18922
  return $$0 | 0; //@line 18923
 }
 HEAP8[$5 >> 0] = $6 + 1 << 24 >> 24; //@line 18927
 HEAP8[$0 + 4 + $7 >> 0] = 2; //@line 18928
 HEAP8[$0 >> 0] = 1; //@line 18929
 $$0 = 0; //@line 18930
 return $$0 | 0; //@line 18931
}
function __ZN12LoRaWANStackC2Ev($0) {
 $0 = $0 | 0;
 __ZN7LoRaMacC2Ev($0); //@line 5964
 _memset($0 + 2384 | 0, 0, 518) | 0; //@line 5967
 HEAP8[$0 + 2902 >> 0] = 1; //@line 5968
 HEAP32[$0 + 2904 >> 2] = 0; //@line 5970
 HEAP8[$0 + 2909 >> 0] = 0; //@line 5973
 HEAP8[$0 + 2910 >> 0] = 0; //@line 5975
 HEAP8[$0 + 2911 >> 0] = 1; //@line 5977
 HEAP32[$0 + 3168 >> 2] = 0; //@line 5979
 HEAP8[$0 + 2895 >> 0] = 1; //@line 5981
 HEAP8[$0 + 2900 >> 0] = 1; //@line 5983
 HEAP8[$0 + 2908 >> 0] = 15; //@line 5984
 return;
}
function _main__async_cb_382($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 26703
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26705
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(8) | 0; //@line 26706
 __ZN6events10EventQueue8dispatchEi(20448, -1); //@line 26707
 if (!___async) {
  ___async_unwind = 0; //@line 26710
 }
 HEAP32[$ReallocAsyncCtx11 >> 2] = 683; //@line 26712
 HEAP32[$ReallocAsyncCtx11 + 4 >> 2] = $2; //@line 26714
 sp = STACKTOP; //@line 26715
 return;
}
function _putchar($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16315
 $1 = HEAP32[2604] | 0; //@line 16316
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 16317
 $2 = _fputc($0, $1) | 0; //@line 16318
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 716; //@line 16321
  sp = STACKTOP; //@line 16322
  return 0; //@line 16323
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 16325
  return $2 | 0; //@line 16326
 }
 return 0; //@line 16328
}
function __ZN16LoRaWANInterface10disconnectEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5347
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5349
 $2 = __ZN12LoRaWANStack8shutdownEv($0 + 4 | 0) | 0; //@line 5350
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 156; //@line 5353
  sp = STACKTOP; //@line 5354
  return 0; //@line 5355
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5357
  return $2 | 0; //@line 5358
 }
 return 0; //@line 5360
}
function __ZN4mbed10TimerEventD2Ev($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2885
 HEAP32[$0 >> 2] = 640; //@line 2886
 $2 = HEAP32[$0 + 24 >> 2] | 0; //@line 2888
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2890
 _ticker_remove_event($2, $0 + 8 | 0); //@line 2891
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 123; //@line 2894
  sp = STACKTOP; //@line 2895
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2898
  return;
 }
}
function __ZN4mbed7TimeoutD0Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 24223
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24225
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 24226
 __ZN4mbed10TimerEventD2Ev($2); //@line 24227
 if (!___async) {
  ___async_unwind = 0; //@line 24230
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 115; //@line 24232
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 24234
 sp = STACKTOP; //@line 24235
 return;
}
function __ZN4mbed6TickerD0Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 14050
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14052
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 14053
 __ZN4mbed10TimerEventD2Ev($2); //@line 14054
 if (!___async) {
  ___async_unwind = 0; //@line 14057
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 662; //@line 14059
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 14061
 sp = STACKTOP; //@line 14062
 return;
}
function __ZN16LoRaWANInterface7connectEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5310
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5312
 $2 = __ZN12LoRaWANStack7connectEv($0 + 4 | 0) | 0; //@line 5313
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 154; //@line 5316
  sp = STACKTOP; //@line 5317
  return 0; //@line 5318
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5320
  return $2 | 0; //@line 5321
 }
 return 0; //@line 5323
}
function dynCall_viiiiiiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 a9 = a9 | 0;
 a10 = a10 | 0;
 a11 = a11 | 0;
 a12 = a12 | 0;
 a13 = a13 | 0;
 a14 = a14 | 0;
 FUNCTION_TABLE_viiiiiiiiiiiiii[index & 1](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0, a9 | 0, a10 | 0, a11 | 0, a12 | 0, a13 | 0, a14 | 0); //@line 32273
}
function _emscripten_async_resume() {
 ___async = 0; //@line 31985
 ___async_unwind = 1; //@line 31986
 while (1) {
  if (!___async_cur_frame) return;
  dynCall_vi(HEAP32[___async_cur_frame + 8 >> 2] | 0, ___async_cur_frame + 8 | 0); //@line 31992
  if (___async) return;
  if (!___async_unwind) {
   ___async_unwind = 1; //@line 31996
   continue;
  }
  stackRestore(HEAP32[___async_cur_frame + 4 >> 2] | 0); //@line 32000
  ___async_cur_frame = HEAP32[___async_cur_frame >> 2] | 0; //@line 32002
 }
}
function __ZN6events10EventQueue13function_callINS0_9context00IPFvvEEEEEvPv($0) {
 $0 = $0 | 0;
 var $1 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8179
 $1 = HEAP32[$0 >> 2] | 0; //@line 8180
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8181
 FUNCTION_TABLE_v[$1 & 15](); //@line 8182
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 700; //@line 8185
  sp = STACKTOP; //@line 8186
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 8189
  return;
 }
}
function __ZN7LoRaPHY19request_new_channelEaP16channel_params_t__async_cb_45($0) {
 $0 = $0 | 0;
 var $$013 = 0;
 switch (HEAP32[___async_retval >> 2] | 0) {
 case 0:
  {
   $$013 = 3; //@line 24217
   break;
  }
 case -1004:
  {
   $$013 = 2; //@line 24221
   break;
  }
 case -1005:
  {
   $$013 = 1; //@line 24225
   break;
  }
 case -1006:
  {
   $$013 = 0; //@line 24229
   break;
  }
 default:
  {
   $$013 = 0; //@line 24233
  }
 }
 HEAP8[___async_retval >> 0] = $$013; //@line 24237
 return;
}
function _rand() {
 var $0 = 0, $10 = 0, $14 = 0, $6 = 0, $8 = 0, $9 = 0;
 $0 = 20352; //@line 16268
 $6 = ___muldi3(HEAP32[$0 >> 2] | 0, HEAP32[$0 + 4 >> 2] | 0, 1284865837, 1481765933) | 0; //@line 16274
 $8 = _i64Add($6 | 0, tempRet0 | 0, 1, 0) | 0; //@line 16276
 $9 = tempRet0; //@line 16277
 $10 = 20352; //@line 16278
 HEAP32[$10 >> 2] = $8; //@line 16280
 HEAP32[$10 + 4 >> 2] = $9; //@line 16283
 $14 = _bitshift64Lshr($8 | 0, $9 | 0, 33) | 0; //@line 16284
 return $14 | 0; //@line 16286
}
function ___stdio_close($0) {
 $0 = $0 | 0;
 var $5 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 11378
 STACKTOP = STACKTOP + 16 | 0; //@line 11379
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 11379
 $vararg_buffer = sp; //@line 11380
 HEAP32[$vararg_buffer >> 2] = _dummy(HEAP32[$0 + 60 >> 2] | 0) | 0; //@line 11384
 $5 = ___syscall_ret(___syscall6(6, $vararg_buffer | 0) | 0) | 0; //@line 11386
 STACKTOP = sp; //@line 11387
 return $5 | 0; //@line 11387
}
function _mbedtls_platform_zeroize($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5041
 $2 = HEAP32[2549] | 0; //@line 5042
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5043
 FUNCTION_TABLE_iiii[$2 & 31]($0, 0, $1) | 0; //@line 5044
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 616; //@line 5047
  sp = STACKTOP; //@line 5048
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5051
  return;
 }
}
function __ZN16SX1276_LoRaRadioD0Ev($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1299
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 1300
 __ZN16SX1276_LoRaRadioD2Ev($0); //@line 1301
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 83; //@line 1304
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 1306
  sp = STACKTOP; //@line 1307
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1310
  __ZdlPv($0); //@line 1311
  return;
 }
}
function __ZN4mbed10TimerEvent3irqEj($0) {
 $0 = $0 | 0;
 var $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2934
 $5 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0; //@line 2939
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2940
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 2941
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 126; //@line 2944
  sp = STACKTOP; //@line 2945
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2948
  return;
 }
}
function __ZN4mbed5TimerC2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $16 = 0, $4 = 0, $6 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25120
 $6 = ___async_retval; //@line 25122
 $11 = HEAP32[$6 + 4 >> 2] | 0; //@line 25127
 $12 = HEAP32[$0 + 4 >> 2] | 0; //@line 25128
 HEAP32[$12 >> 2] = HEAP32[$6 >> 2]; //@line 25130
 HEAP32[$12 + 4 >> 2] = $11; //@line 25133
 $16 = $4; //@line 25134
 HEAP32[$16 >> 2] = 0; //@line 25136
 HEAP32[$16 + 4 >> 2] = 0; //@line 25139
 return;
}
function __ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28661
 $6 = HEAP16[$0 + 12 >> 1] | 0; //@line 28665
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  HEAP32[$2 + 2028 >> 2] = HEAP32[$0 + 8 >> 2]; //@line 28671
  HEAP16[$2 + 2032 >> 1] = $6; //@line 28673
  HEAP8[$2 + 2034 >> 0] = 1; //@line 28675
  return;
 } else {
  HEAP32[$2 + 2020 >> 2] = 13; //@line 28679
  return;
 }
}
function _handle_interrupt_in($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6990
 $2 = HEAP32[5090] | 0; //@line 6991
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6992
 FUNCTION_TABLE_vii[$2 & 15]($0, $1); //@line 6993
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 656; //@line 6996
  sp = STACKTOP; //@line 6997
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7000
  return;
 }
}
function __ZNK7LoRaPHY25verify_frequency_for_bandEjh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $4 = 0, $5 = 0;
 $4 = HEAP32[$0 + 72 >> 2] | 0; //@line 21942
 $5 = $2 & 255; //@line 21943
 if ((HEAP32[$4 + ($5 * 24 | 0) + 20 >> 2] | 0) >>> 0 >= $1 >>> 0) {
  if ((HEAP32[$4 + ($5 * 24 | 0) + 16 >> 2] | 0) >>> 0 <= $1 >>> 0) {
   $$0 = 1; //@line 21952
   return $$0 | 0; //@line 21953
  }
 }
 $$0 = 0; //@line 21956
 return $$0 | 0; //@line 21957
}
function _mbedtls_aes_free($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 210
 do {
  if ($0 | 0) {
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 214
   _mbedtls_platform_zeroize($0, 280); //@line 215
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 570; //@line 218
    sp = STACKTOP; //@line 219
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 222
    break;
   }
  }
 } while (0);
 return;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP; //@line 31927
 STACKTOP = STACKTOP + 16 | 0; //@line 31928
 $rem = __stackBase__ | 0; //@line 31929
 ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0; //@line 31930
 STACKTOP = __stackBase__; //@line 31931
 return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0; //@line 31932
}
function __ZN16SX1276_LoRaRadio5sleepEv($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 85
 STACKTOP = STACKTOP + 16 | 0; //@line 86
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 86
 _mbed_tracef(16, 11040, 11476, sp); //@line 88
 __ZN4mbed6Ticker6detachEv($0 + 1048 | 0); //@line 90
 __ZN4mbed6Ticker6detachEv($0 + 1112 | 0); //@line 92
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 93
 STACKTOP = sp; //@line 94
 return;
}
function _llvm_cttz_i32(x) {
 x = x | 0;
 var ret = 0;
 ret = HEAP8[cttz_i8 + (x & 255) >> 0] | 0; //@line 31697
 if ((ret | 0) < 8) return ret | 0; //@line 31698
 ret = HEAP8[cttz_i8 + (x >> 8 & 255) >> 0] | 0; //@line 31699
 if ((ret | 0) < 8) return ret + 8 | 0; //@line 31700
 ret = HEAP8[cttz_i8 + (x >> 16 & 255) >> 0] | 0; //@line 31701
 if ((ret | 0) < 8) return ret + 16 | 0; //@line 31702
 return (HEAP8[cttz_i8 + (x >>> 24) >> 0] | 0) + 24 | 0; //@line 31703
}
function __ZN7LoRaPHY25accept_tx_param_setup_reqEhh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $14 = 0, $4 = 0, $6 = 0;
 $4 = HEAP8[$0 + 13 >> 0] | 0; //@line 21254
 if (!($4 << 24 >> 24)) {
  $14 = $4 << 24 >> 24 != 0; //@line 21257
  return $14 | 0; //@line 21258
 }
 $6 = $0 + 128 | 0; //@line 21260
 HEAP8[$6 >> 0] = $2 << 1 & 2 | $1 & 1 | HEAP8[$6 >> 0] & -4; //@line 21268
 $14 = $4 << 24 >> 24 != 0; //@line 21269
 return $14 | 0; //@line 21270
}
function _gcm_ctx_free($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3072
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 3073
 _mbedtls_gcm_free($0); //@line 3074
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 591; //@line 3077
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 3079
  sp = STACKTOP; //@line 3080
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3083
  _free($0); //@line 3084
  return;
 }
}
function _ccm_ctx_free($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3024
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 3025
 _mbedtls_ccm_free($0); //@line 3026
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 589; //@line 3029
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 3031
  sp = STACKTOP; //@line 3032
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3035
  _free($0); //@line 3036
  return;
 }
}
function _aes_ctx_free($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3167
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 3168
 _mbedtls_aes_free($0); //@line 3169
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 593; //@line 3172
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 3174
  sp = STACKTOP; //@line 3175
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3178
  _free($0); //@line 3179
  return;
 }
}
function ___cxa_get_globals_fast() {
 var $3 = 0, sp = 0;
 sp = STACKTOP; //@line 16613
 STACKTOP = STACKTOP + 16 | 0; //@line 16614
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16614
 if (!(_pthread_once(24452, 8) | 0)) {
  $3 = _pthread_getspecific(HEAP32[6114] | 0) | 0; //@line 16620
  STACKTOP = sp; //@line 16621
  return $3 | 0; //@line 16621
 } else {
  _abort_message(18674, sp); //@line 16623
 }
 return 0; //@line 16626
}
function __ZN16LoRaWANInterfaceD2Ev($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5638
 HEAP32[$0 >> 2] = 724; //@line 5639
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5641
 __ZN12LoRaWANStackD2Ev($0 + 4 | 0); //@line 5642
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 166; //@line 5645
  sp = STACKTOP; //@line 5646
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5649
  return;
 }
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 16781
 }
 return;
}
function __ZN16SX1276_LoRaRadio15timeout_irq_isrEv($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1428
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 1429
 __ZN16SX1276_LoRaRadio18handle_timeout_irqEv($0); //@line 1430
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 85; //@line 1433
  sp = STACKTOP; //@line 1434
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1437
  return;
 }
}
function __ZN7LoRaMac24continue_sending_processEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $7 = 0;
 if ((HEAPU8[$0 + 1699 >> 0] | 0) <= (HEAPU8[$0 + 1698 >> 0] | 0)) {
  $$0 = 1; //@line 15110
  return $$0 | 0; //@line 15111
 }
 __ZN14LoRaMacCommand20clear_command_bufferEv($0 + 476 | 0); //@line 15114
 $7 = $0 + 1768 | 0; //@line 15115
 HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + 1; //@line 15118
 $$0 = 0; //@line 15119
 return $$0 | 0; //@line 15120
}
function __ZL25default_terminate_handlerv__async_cb_159($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30232
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30234
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 30236
 HEAP32[$2 >> 2] = 18535; //@line 30237
 HEAP32[$2 + 4 >> 2] = $4; //@line 30239
 HEAP32[$2 + 8 >> 2] = $AsyncRetVal; //@line 30241
 _abort_message(18399, $2); //@line 30242
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 33081
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33083
 $6 = HEAP8[$2 + 1182 >> 0] | 0; //@line 33085
 HEAP8[$2 + 1183 >> 0] = $6; //@line 33087
 __ZN7LoRaPHY16set_last_tx_doneEhbj($2 + 4 | 0, $6, (HEAP8[$2 + 2376 >> 0] | 0) != 0, $4); //@line 33092
 HEAP32[$2 + 1780 >> 2] = $4; //@line 33094
 return;
}
function _sn_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $5 = 0, $6 = 0, $7 = 0;
 $5 = $0 + 20 | 0; //@line 16197
 $6 = HEAP32[$5 >> 2] | 0; //@line 16198
 $7 = (HEAP32[$0 + 16 >> 2] | 0) - $6 | 0; //@line 16199
 $$ = $7 >>> 0 > $2 >>> 0 ? $2 : $7; //@line 16201
 _memcpy($6 | 0, $1 | 0, $$ | 0) | 0; //@line 16203
 HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $$; //@line 16206
 return $2 | 0; //@line 16207
}
function __ZN6events10EventQueueC2EjPh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = $0 + 188 | 0; //@line 2958
 HEAP32[$3 >> 2] = 0; //@line 2959
 HEAP32[$3 + 4 >> 2] = 0; //@line 2959
 HEAP32[$3 + 8 >> 2] = 0; //@line 2959
 HEAP32[$3 + 12 >> 2] = 0; //@line 2959
 if (!$2) {
  _equeue_create($0, $1) | 0; //@line 2962
  return;
 } else {
  _equeue_create_inplace($0, $1, $2) | 0; //@line 2965
  return;
 }
}
function __ZN6events10EventQueue8dispatchEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2973
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2974
 _equeue_dispatch($0, $1); //@line 2975
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 127; //@line 2978
  sp = STACKTOP; //@line 2979
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2982
  return;
 }
}
function _abort_message__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 33755
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 33757
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 33758
 _fputc(10, $2) | 0; //@line 33759
 if (!___async) {
  ___async_unwind = 0; //@line 33762
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 723; //@line 33764
 sp = STACKTOP; //@line 33765
 return;
}
function __ZN7LoRaMac13clear_tx_pipeEv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23194
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23196
 HEAP8[$2 + 2104 >> 0] = 0; //@line 23201
 _memset($2 + 1185 | 0, 0, 257) | 0; //@line 23203
 _memset($2 + 2115 | 0, 0, 259) | 0; //@line 23204
 _mbed_tracef(16, 12890, 13322, $4); //@line 23205
 HEAP32[___async_retval >> 2] = 0; //@line 23207
 return;
}
function __ZN6events10EventQueue6cancelEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3004
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3005
 _equeue_cancel($0, $1); //@line 3006
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 128; //@line 3009
  sp = STACKTOP; //@line 3010
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3013
  return;
 }
}
function __ZN7LoRaPHY16set_last_tx_doneEhbj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $11 = 0, $5 = 0;
 $5 = HEAP32[$0 + 72 >> 2] | 0; //@line 19864
 $11 = HEAPU8[(HEAP32[$0 + 124 >> 2] | 0) + (($1 & 255) * 12 | 0) + 9 >> 0] | 0; //@line 19870
 HEAP32[$5 + ($11 * 24 | 0) + 8 >> 2] = $3; //@line 19872
 if ($2) {
  return;
 }
 HEAP32[$5 + ($11 * 24 | 0) + 4 >> 2] = $3; //@line 19877
 return;
}
function __ZN7LoRaPHYC2ER18LoRaWANTimeHandler($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var dest = 0, stop = 0;
 HEAP32[$0 >> 2] = 880; //@line 22179
 HEAP32[$0 + 4 >> 2] = 0; //@line 22181
 HEAP32[$0 + 8 >> 2] = $1; //@line 22183
 dest = $0 + 12 | 0; //@line 22185
 stop = dest + 120 | 0; //@line 22185
 do {
  HEAP32[dest >> 2] = 0; //@line 22185
  dest = dest + 4 | 0; //@line 22185
 } while ((dest | 0) < (stop | 0));
 return;
}
function _add_pkcs_padding($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$09 = 0, $3 = 0, $5 = 0, $7 = 0;
 $3 = $1 - $2 | 0; //@line 2482
 if (!$3) {
  return;
 }
 $5 = $3 & 255; //@line 2487
 $$09 = 0; //@line 2488
 $7 = 0; //@line 2488
 do {
  HEAP8[$0 + ($7 + $2) >> 0] = $5; //@line 2492
  $$09 = $$09 + 1 << 24 >> 24; //@line 2493
  $7 = $$09 & 255; //@line 2494
 } while ($3 >>> 0 > $7 >>> 0);
 return;
}
function __ZN4mbed5Timer5startEv__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $13 = 0, $4 = 0, $6 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27208
 $6 = ___async_retval; //@line 27210
 $11 = HEAP32[$6 + 4 >> 2] | 0; //@line 27215
 $13 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 27217
 HEAP32[$13 >> 2] = HEAP32[$6 >> 2]; //@line 27219
 HEAP32[$13 + 4 >> 2] = $11; //@line 27222
 HEAP32[$4 >> 2] = 1; //@line 27223
 return;
}
function _gpio_irq_init($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0;
 if (($1 | 0) == -1) {
  $$0 = -1; //@line 7013
  return $$0 | 0; //@line 7014
 }
 HEAP32[5090] = $2; //@line 7016
 HEAP32[$0 >> 2] = $1; //@line 7017
 HEAP32[$0 + 4 >> 2] = $1; //@line 7019
 _emscripten_asm_const_iii(12, $3 | 0, $1 | 0) | 0; //@line 7020
 $$0 = 0; //@line 7021
 return $$0 | 0; //@line 7022
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23640
 if ((HEAP32[$2 + 24 >> 2] | 0) == 1) {
  HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 + 16 >> 2]; //@line 23651
  $$0 = 1; //@line 23652
 } else {
  $$0 = 0; //@line 23654
 }
 HEAP8[___async_retval >> 0] = $$0 & 1; //@line 23658
 return;
}
function _vsnprintf__async_cb($0) {
 $0 = $0 | 0;
 var $13 = 0, $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 28302
 if (HEAP32[$0 + 4 >> 2] | 0) {
  $13 = HEAP32[HEAP32[$0 + 16 >> 2] >> 2] | 0; //@line 28305
  HEAP8[$13 + ((($13 | 0) == (HEAP32[HEAP32[$0 + 20 >> 2] >> 2] | 0)) << 31 >> 31) >> 0] = 0; //@line 28310
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 28313
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 17375
 STACKTOP = STACKTOP + 16 | 0; //@line 17376
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 17376
 _free($0); //@line 17378
 if (!(_pthread_setspecific(HEAP32[6114] | 0, 0) | 0)) {
  STACKTOP = sp; //@line 17383
  return;
 } else {
  _abort_message(18773, sp); //@line 17385
 }
}
function _serial_init($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $4 = 0, $9 = 0;
 HEAP32[$0 + 4 >> 2] = $2; //@line 7053
 HEAP32[$0 >> 2] = $1; //@line 7054
 HEAP32[5091] = 1; //@line 7055
 $4 = $0; //@line 7056
 $9 = HEAP32[$4 + 4 >> 2] | 0; //@line 7061
 $10 = 20368; //@line 7062
 HEAP32[$10 >> 2] = HEAP32[$4 >> 2]; //@line 7064
 HEAP32[$10 + 4 >> 2] = $9; //@line 7067
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 16857
 }
 return;
}
function __ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 122
 if (!$AsyncRetVal) {
  HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 2; //@line 125
  $$0 = 0; //@line 126
 } else {
  $$0 = $AsyncRetVal; //@line 128
 }
 HEAP32[___async_retval >> 2] = $$0; //@line 131
 return;
}
function _mbed_trace_default_print($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4576
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4577
 _puts($0) | 0; //@line 4578
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 139; //@line 4581
  sp = STACKTOP; //@line 4582
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4585
  return;
 }
}
function _equeue_sema_create($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $4 = 0;
 $1 = _pthread_mutex_init($0 | 0, 0) | 0; //@line 4405
 if (!$1) {
  $4 = _pthread_cond_init($0 + 28 | 0, 0) | 0; //@line 4409
  if (!$4) {
   HEAP8[$0 + 76 >> 0] = 0; //@line 4413
   $$0 = 0; //@line 4414
  } else {
   $$0 = $4; //@line 4416
  }
 } else {
  $$0 = $1; //@line 4419
 }
 return $$0 | 0; //@line 4421
}
function _wait_ms($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7321
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7322
 _emscripten_sleep($0 | 0); //@line 7323
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 666; //@line 7326
  sp = STACKTOP; //@line 7327
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7330
  return;
 }
}
function _equeue_tick() {
 var $0 = 0, sp = 0;
 sp = STACKTOP; //@line 4368
 STACKTOP = STACKTOP + 16 | 0; //@line 4369
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 4369
 $0 = sp; //@line 4370
 _gettimeofday($0 | 0, 0) | 0; //@line 4371
 STACKTOP = sp; //@line 4378
 return ((HEAP32[$0 + 4 >> 2] | 0) / 1e3 | 0) + ((HEAP32[$0 >> 2] | 0) * 1e3 | 0) | 0; //@line 4378
}
function _mbedtls_cipher_update__async_cb_112($0) {
 $0 = $0 | 0;
 var $$1 = 0, $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 27471
 if (!$AsyncRetVal) {
  HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$0 + 4 >> 2]; //@line 27474
  $$1 = 0; //@line 27475
 } else {
  $$1 = $AsyncRetVal; //@line 27477
 }
 HEAP32[___async_retval >> 2] = $$1; //@line 27480
 return;
}
function __ZN13LoRaMacCryptoC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, dest = 0, stop = 0;
 $1 = $0 + 32 | 0; //@line 18937
 dest = $0; //@line 18938
 stop = dest + 64 | 0; //@line 18938
 do {
  HEAP32[dest >> 2] = 0; //@line 18938
  dest = dest + 4 | 0; //@line 18938
 } while ((dest | 0) < (stop | 0));
 HEAP8[$0 >> 0] = 73; //@line 18939
 HEAP8[$1 >> 0] = 1; //@line 18940
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var sp = 0;
 sp = STACKTOP; //@line 17360
 STACKTOP = STACKTOP + 16 | 0; //@line 17361
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 17361
 if (!(_pthread_key_create(24456, 732) | 0)) {
  STACKTOP = sp; //@line 17366
  return;
 } else {
  _abort_message(18723, sp); //@line 17368
 }
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $7 = 0;
 if ((HEAP32[$1 + 4 >> 2] | 0) == ($2 | 0)) {
  $7 = $1 + 28 | 0; //@line 16921
  if ((HEAP32[$7 >> 2] | 0) != 1) {
   HEAP32[$7 >> 2] = $3; //@line 16925
  }
 }
 return;
}
function __ZN12LoRaWANStack23set_confirmed_msg_retryEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$0 = -1012; //@line 11308
 } else {
  if ($1 << 24 >> 24 == -1) {
   $$0 = -1003; //@line 11312
  } else {
   HEAP8[$0 + 2902 >> 0] = $1; //@line 11315
   $$0 = 0; //@line 11316
  }
 }
 return $$0 | 0; //@line 11319
}
function _emscripten_alloc_async_context(len, sp) {
 len = len | 0;
 sp = sp | 0;
 var new_frame = 0;
 new_frame = stackAlloc(len + 8 | 0) | 0; //@line 31961
 HEAP32[new_frame + 4 >> 2] = sp; //@line 31963
 HEAP32[new_frame >> 2] = ___async_cur_frame; //@line 31965
 ___async_cur_frame = new_frame; //@line 31966
 return ___async_cur_frame + 8 | 0; //@line 31967
}
function __ZN14LoRaMacCommand30copy_repeat_commands_to_bufferEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $3 = 0, $8 = 0;
 $1 = $0 + 2 | 0; //@line 17471
 $3 = HEAPU8[$1 >> 0] | 0; //@line 17473
 $8 = HEAPU8[$0 + 3 >> 0] | 0; //@line 17478
 _memcpy($0 + 4 + $3 | 0, $0 + 132 | 0, $8 | 0) | 0; //@line 17479
 HEAP8[$1 >> 0] = $3 + $8; //@line 17482
 return;
}
function b357(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 p8 = p8 | 0;
 p9 = p9 | 0;
 p10 = p10 | 0;
 p11 = p11 | 0;
 p12 = p12 | 0;
 p13 = p13 | 0;
 p14 = p14 | 0;
 nullFunc_viiiiiiiiiiiiiii(0); //@line 43
}
function __ZN12LoRaWANStack20get_enabled_channelsER16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$0 = -1012; //@line 11292
  return $$0 | 0; //@line 11293
 }
 $$0 = __ZN7LoRaMac16get_channel_planER16lora_channelplan($0, $1) | 0; //@line 11296
 return $$0 | 0; //@line 11297
}
function __ZN7LoRaPHY15apply_DR_offsetEaa($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $5 = 0;
 $5 = ($1 & 255) - ($2 & 255) | 0; //@line 21922
 if (!($5 & 128)) {
  $$0 = $5 & 255; //@line 21927
  return $$0 | 0; //@line 21928
 }
 $$0 = HEAP8[$0 + 26 >> 0] | 0; //@line 21932
 return $$0 | 0; //@line 21933
}
function __ZN4mbed8CallbackIFvvEE13function_moveIN6events5EventIS1_EEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 HEAP32[$0 >> 2] = 0; //@line 8115
 $2 = HEAP32[$1 >> 2] | 0; //@line 8116
 if (!$2) {
  return;
 }
 HEAP32[$0 >> 2] = $2; //@line 8121
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + 1; //@line 8124
 return;
}
function _gpio_init_inout($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 HEAP32[$0 >> 2] = $1; //@line 6976
 if (($1 | 0) == -1) {
  return;
 }
 HEAP32[$0 + 4 >> 2] = $1; //@line 6982
 _emscripten_asm_const_iiiiii(11, $0 | 0, $1 | 0, $2 | 0, $3 | 0, $4 | 0) | 0; //@line 6983
 return;
}
function __ZN12LoRaWANStack24enable_adaptive_datarateEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$0 = -1012; //@line 11346
  return $$0 | 0; //@line 11347
 }
 __ZN7LoRaMac24enable_adaptive_datarateEb($0, $1); //@line 11349
 $$0 = 0; //@line 11350
 return $$0 | 0; //@line 11351
}
function ___cxa_can_catch__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP8[___async_retval >> 0] & 1; //@line 22425
 if ($AsyncRetVal) {
  HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 22429
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal & 1; //@line 22432
 return;
}
function __ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb_108($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27252
 HEAP32[$2 + 2092 >> 2] = 0; //@line 27256
 HEAP8[$2 + 2376 >> 0] = 1; //@line 27258
 HEAP32[$2 + 1760 >> 2] = 0; //@line 27260
 HEAP8[$2 + 1184 >> 0] = 0; //@line 27262
 return;
}
function __ZN4mbed8CallbackIFvPKhtsaEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 8882
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 8882
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 8882
 return;
}
function b355(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 p8 = p8 | 0;
 p9 = p9 | 0;
 p10 = p10 | 0;
 p11 = p11 | 0;
 p12 = p12 | 0;
 p13 = p13 | 0;
 nullFunc_viiiiiiiiiiiiii(0); //@line 40
}
function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high << bits | (low & (1 << bits) - 1 << 32 - bits) >>> 32 - bits; //@line 31950
  return low << bits; //@line 31951
 }
 tempRet0 = low << bits - 32; //@line 31953
 return 0; //@line 31954
}
function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >>> bits; //@line 31939
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits; //@line 31940
 }
 tempRet0 = 0; //@line 31942
 return high >>> bits - 32 | 0; //@line 31943
}
function __ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 1692
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 1692
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 1692
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 10352
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 10352
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 10352
 return;
}
function __ZN4mbed8CallbackIFvbEE13function_moveINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 7408
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 7408
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 7408
 return;
}
function __ZN12LoRaWANStack28process_transmission_timeoutEv__async_cb_368($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25623
 $6 = (__ZNK7LoRaMac16get_device_classEv(HEAP32[$0 + 4 >> 2] | 0) | 0) == 2; //@line 25625
 HEAP32[$4 + 2496 >> 2] = $6 ? 5 : 2; //@line 25628
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 16788
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 16788
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 16788
 return;
}
function __ZN12LoRaWANStack21set_channel_data_rateEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$0 = -1012; //@line 11330
  return $$0 | 0; //@line 11331
 }
 $$0 = __ZN7LoRaMac21set_channel_data_rateEh($0, $1) | 0; //@line 11334
 return $$0 | 0; //@line 11335
}
function __ZN12LoRaWANStack25process_reception_timeoutEb__async_cb_191($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33060
 $6 = (__ZNK7LoRaMac16get_device_classEv(HEAP32[$0 + 4 >> 2] | 0) | 0) == 2; //@line 33062
 HEAP32[$4 + 2496 >> 2] = $6 ? 5 : 2; //@line 33065
 return;
}
function _equeue_dispatch__async_cb_13($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20603
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20605
 HEAP8[HEAP32[$0 + 4 >> 2] >> 0] = 1; //@line 20606
 _equeue_mutex_unlock($4); //@line 20607
 HEAP8[$6 >> 0] = 0; //@line 20608
 return;
}
function __ZN16SX1276_LoRaRadio11radio_resetEv($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 76
 STACKTOP = STACKTOP + 16 | 0; //@line 77
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 77
 _mbed_tracef(16, 11040, 11482, sp); //@line 79
 STACKTOP = sp; //@line 80
 return;
}
function __ZN12LoRaWANStack23process_connected_stateEv__async_cb_200($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33587
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33589
 HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 4; //@line 33592
 HEAP32[$6 + 2496 >> 2] = 2; //@line 33594
 return;
}
function __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb_231($0) {
 $0 = $0 | 0;
 var $6 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14129
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 14131
 HEAP32[$6 + 16 >> 2] = 0; //@line 14133
 return;
}
function _fflush__async_cb_222($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 13359
 if (!(HEAP8[$0 + 4 >> 0] & 1)) {
  ___unlockfile(HEAP32[$0 + 8 >> 2] | 0); //@line 13361
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 13364
 return;
}
function dynCall_iiiiiiii(index, a1, a2, a3, a4, a5, a6, a7) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 return FUNCTION_TABLE_iiiiiiii[index & 1](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0) | 0; //@line 32217
}
function __ZN12LoRaWANStack20process_transmissionEv__async_cb_214($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12199
 $6 = (__ZNK7LoRaMac16get_device_classEv(HEAP32[$0 + 4 >> 2] | 0) | 0) == 2; //@line 12201
 HEAP32[$4 >> 2] = $6 ? 5 : 2; //@line 12203
 return;
}
function __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_204($0) {
 $0 = $0 | 0;
 var $6 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33834
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 33836
 _gpio_irq_set($6 + 28 | 0, 2, 1); //@line 33838
 return;
}
function _mbedtls_aes_crypt_ecb($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 if (($1 | 0) == 1) {
  _mbedtls_internal_aes_encrypt($0, $2, $3) | 0; //@line 1687
 } else {
  _mbedtls_internal_aes_decrypt($0, $2, $3) | 0; //@line 1689
 }
 return 0; //@line 1691
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_144($0) {
 $0 = $0 | 0;
 var $6 = 0;
 $6 = HEAP8[$0 + 12 >> 0] & 1; //@line 29483
 __ZN4mbed5TimerD2Ev(HEAP32[$0 + 4 >> 2] | 0); //@line 29484
 HEAP8[___async_retval >> 0] = $6 & 1; //@line 29487
 return;
}
function __ZN16SX1276_LoRaRadio7standbyEv($0) {
 $0 = $0 | 0;
 __ZN4mbed6Ticker6detachEv($0 + 1048 | 0); //@line 101
 __ZN4mbed6Ticker6detachEv($0 + 1112 | 0); //@line 103
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 104
 HEAP8[$0 + 688 >> 0] = 0; //@line 106
 return;
}
function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP; //@line 4
 STACKTOP = STACKTOP + size | 0; //@line 5
 STACKTOP = STACKTOP + 15 & -16; //@line 6
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(size | 0); //@line 7
 return ret | 0; //@line 9
}
function _equeue_post__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 13478
 _equeue_sema_signal((HEAP32[$0 + 4 >> 2] | 0) + 48 | 0); //@line 13480
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 13482
 return;
}
function _puts__async_cb($0) {
 $0 = $0 | 0;
 var $$lobit = 0;
 $$lobit = HEAP32[___async_retval >> 2] >> 31; //@line 12675
 if (HEAP32[$0 + 4 >> 2] | 0) {
  ___unlockfile(HEAP32[$0 + 8 >> 2] | 0); //@line 12678
 }
 HEAP32[___async_retval >> 2] = $$lobit; //@line 12681
 return;
}
function _gpio_init_out_ex($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 HEAP32[$0 >> 2] = $1; //@line 6958
 if (($1 | 0) == -1) {
  return;
 }
 HEAP32[$0 + 4 >> 2] = $1; //@line 6964
 _emscripten_asm_const_iiii(10, $0 | 0, $1 | 0, $2 | 0) | 0; //@line 6965
 return;
}
function ___overflow__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ((HEAP32[___async_retval >> 2] | 0) == 1) {
  $$0 = HEAPU8[HEAP32[$0 + 4 >> 2] >> 0] | 0; //@line 26839
 } else {
  $$0 = -1; //@line 26841
 }
 HEAP32[___async_retval >> 2] = $$0; //@line 26844
 return;
}
function dynCall_iiiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 return FUNCTION_TABLE_iiiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0; //@line 32210
}
function __ZN7LoRaMac16get_channel_planER16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN18LoRaMacChannelPlan8get_planER16lora_channelplanPK16channel_params_t($0 + 752 | 0, $1, __ZN7LoRaPHY16get_phy_channelsEv($0 + 4 | 0) | 0) | 0; //@line 16955
}
function __ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_227($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13607
 HEAP8[$2 + 688 >> 0] = 2; //@line 13609
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($2); //@line 13610
 return;
}
function ___lctrans_impl($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$1) {
  $$0 = 0; //@line 12085
 } else {
  $$0 = ___mo_lookup(HEAP32[$1 >> 2] | 0, HEAP32[$1 + 4 >> 2] | 0, $0) | 0; //@line 12091
 }
 return ($$0 | 0 ? $$0 : $0) | 0; //@line 12095
}
function _equeue_break($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = $0 + 128 | 0; //@line 3795
 _equeue_mutex_lock($1); //@line 3796
 HEAP8[$0 + 8 >> 0] = 1; //@line 3798
 _equeue_mutex_unlock($1); //@line 3799
 _equeue_sema_signal($0 + 48 | 0); //@line 3801
 return;
}
function _mbedtls_cipher_init($0) {
 $0 = $0 | 0;
 var dest = 0, stop = 0;
 dest = $0; //@line 2351
 stop = dest + 68 | 0; //@line 2351
 do {
  HEAP32[dest >> 2] = 0; //@line 2351
  dest = dest + 4 | 0; //@line 2351
 } while ((dest | 0) < (stop | 0));
 return;
}
function dynCall_viiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 FUNCTION_TABLE_viiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0); //@line 32266
}
function _emscripten_free_async_context(ctx) {
 ctx = ctx | 0;
 assert((___async_cur_frame + 8 | 0) == (ctx | 0) | 0); //@line 31973
 stackRestore(___async_cur_frame | 0); //@line 31974
 ___async_cur_frame = HEAP32[___async_cur_frame >> 2] | 0; //@line 31975
}
function _mbedtls_ccm_init($0) {
 $0 = $0 | 0;
 var dest = 0, stop = 0;
 dest = $0; //@line 2162
 stop = dest + 68 | 0; //@line 2162
 do {
  HEAP32[dest >> 2] = 0; //@line 2162
  dest = dest + 4 | 0; //@line 2162
 } while ((dest | 0) < (stop | 0));
 return;
}
function _fputc__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 13455
 ___unlockfile(HEAP32[$0 + 4 >> 2] | 0); //@line 13456
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 13458
 return;
}
function _putc__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 30623
 ___unlockfile(HEAP32[$0 + 4 >> 2] | 0); //@line 30624
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 30626
 return;
}
function __ZN7LoRaPHY15get_ack_timeoutEv($0) {
 $0 = $0 | 0;
 var $5 = 0, $6 = 0;
 $5 = HEAPU16[$0 + 50 >> 1] | 0; //@line 22790
 $6 = HEAPU16[$0 + 52 >> 1] | 0; //@line 22791
 return $5 - $6 + ((_rand() | 0) % ($6 << 1 | 1 | 0) | 0) | 0; //@line 22798
}
function ___DOUBLE_BITS_677($0) {
 $0 = +$0;
 var $1 = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 15196
 $1 = HEAP32[tempDoublePtr >> 2] | 0; //@line 15196
 tempRet0 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 15198
 return $1 | 0; //@line 15199
}
function __ZN7LoRaMac16reset_ongoing_txEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 + 2104 >> 0] = 0; //@line 15506
 _memset($0 + 2115 | 0, 0, 257) | 0; //@line 15508
 if (!$1) {
  return;
 }
 HEAP16[$0 + 2372 >> 1] = 0; //@line 15513
 return;
}
function ___syscall_ret($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ($0 >>> 0 > 4294963200) {
  HEAP32[(___errno_location() | 0) >> 2] = 0 - $0; //@line 11544
  $$0 = -1; //@line 11545
 } else {
  $$0 = $0; //@line 11547
 }
 return $$0 | 0; //@line 11549
}
function _gpio_init_out($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 6942
 if (($1 | 0) == -1) {
  return;
 }
 HEAP32[$0 + 4 >> 2] = $1; //@line 6948
 _emscripten_asm_const_iii(9, $0 | 0, $1 | 0) | 0; //@line 6949
 return;
}
function _gpio_init_in($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 6927
 if (($1 | 0) == -1) {
  return;
 }
 HEAP32[$0 + 4 >> 2] = $1; //@line 6933
 _emscripten_asm_const_iii(8, $0 | 0, $1 | 0) | 0; //@line 6934
 return;
}
function _equeue_sema_signal($0) {
 $0 = $0 | 0;
 _pthread_mutex_lock($0 | 0) | 0; //@line 4427
 HEAP8[$0 + 76 >> 0] = 1; //@line 4429
 _pthread_cond_signal($0 + 28 | 0) | 0; //@line 4431
 _pthread_mutex_unlock($0 | 0) | 0; //@line 4432
 return;
}
function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var h = 0;
 h = b - d >>> 0; //@line 31690
 h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0; //@line 31691
 return (tempRet0 = h, a - c >>> 0 | 0) | 0; //@line 31692
}
function dynCall_iiiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return FUNCTION_TABLE_iiiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0; //@line 32203
}
function __ZN4mbed6Ticker5setupEy($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $4 = 0;
 $4 = ___udivdi3($1 | 0, $2 | 0, 1e3, 0) | 0; //@line 7290
 _emscripten_asm_const_iii(16, $0 + 40 | 0, $4 | 0) | 0; //@line 7292
 return;
}
function __ZN16SX1276_LoRaRadio10init_radioEP12radio_events__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28321
 HEAP8[$2 + 689 >> 0] = 0; //@line 28323
 HEAP8[$2 + 688 >> 0] = 0; //@line 28325
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_375($0) {
 $0 = $0 | 0;
 HEAP8[HEAP32[$0 + 8 >> 2] >> 0] = HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0; //@line 26049
 HEAP8[___async_retval >> 0] = 1; //@line 26052
 return;
}
function _equeue_enqueue__async_cb($0) {
 $0 = $0 | 0;
 var $4 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18341
 _equeue_mutex_unlock(HEAP32[$0 + 4 >> 2] | 0); //@line 18342
 HEAP32[___async_retval >> 2] = $4; //@line 18344
 return;
}
function _aes_crypt_ctr_wrap($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 return _mbedtls_aes_crypt_ctr($0, $1, $2, $3, $4, $5, $6) | 0; //@line 3121
}
function ___clang_call_terminate($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 1318
 ___cxa_begin_catch($0 | 0) | 0; //@line 1319
 _emscripten_alloc_async_context(4, sp) | 0; //@line 1320
 __ZSt9terminatev(); //@line 1321
}
function dynCall_viiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 FUNCTION_TABLE_viiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0); //@line 32259
}
function _aes_ctx_alloc() {
 var $$0 = 0, $0 = 0;
 $0 = _calloc(1, 280) | 0; //@line 3154
 if (!$0) {
  $$0 = 0; //@line 3157
 } else {
  _mbedtls_aes_init($0); //@line 3159
  $$0 = $0; //@line 3160
 }
 return $$0 | 0; //@line 3162
}
function _handle_lora_downlink($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 __ZN16SX1276_LoRaRadio8rx_frameEPhjjhh($0, $1, $2, $3, $4, $5); //@line 1855
 return;
}
function __ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_311($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21522
 HEAP8[$2 >> 0] = (HEAP8[$2 >> 0] | 0) + 1 << 24 >> 24; //@line 21525
 return;
}
function __ZN4mbed5TimerD2Ev($0) {
 $0 = $0 | 0;
 if (HEAP32[$0 >> 2] | 0) {
  if (HEAP8[$0 + 28 >> 0] | 0) {
   _sleep_manager_unlock_deep_sleep_internal(); //@line 2776
  }
 }
 HEAP32[$0 >> 2] = 0; //@line 2779
 return;
}
function dynCall_iiiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return FUNCTION_TABLE_iiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0; //@line 32196
}
function __ZN16LoRaWANInterface15get_tx_metadataER19lorawan_tx_metadata($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack19acquire_tx_metadataER19lorawan_tx_metadata($0 + 4 | 0, $1) | 0; //@line 5597
}
function __ZN16LoRaWANInterface15get_rx_metadataER19lorawan_rx_metadata($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack19acquire_rx_metadataER19lorawan_rx_metadata($0 + 4 | 0, $1) | 0; //@line 5606
}
function _aes_crypt_cbc_wrap($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return _mbedtls_aes_crypt_cbc($0, $1, $2, $3, $4, $5) | 0; //@line 3108
}
function __ZN16LoRaWANInterface16get_channel_planER16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack20get_enabled_channelsER16lora_channelplan($0 + 4 | 0, $1) | 0; //@line 5438
}
function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0;
 l = a + c >>> 0; //@line 31682
 return (tempRet0 = b + d + (l >>> 0 < a >>> 0 | 0) >>> 0, l | 0) | 0; //@line 31684
}
function __ZN14LoRaMacCommand25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb_175($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 31696
 return;
}
function dynCall_viiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 FUNCTION_TABLE_viiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0); //@line 32252
}
function b52(p0, p1, p2, p3, p4, p5, p6) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 nullFunc_iiiiiiii(0); //@line 32419
 return 0; //@line 32419
}
function __ZN7LoRaPHY15get_max_payloadEhb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return HEAP8[(HEAP32[($2 ? $0 + 104 | 0 : $0 + 96 | 0) >> 2] | 0) + ($1 & 255) >> 0] | 0; //@line 22772
}
function _strchr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = ___strchrnul($0, $1) | 0; //@line 12230
 return ((HEAP8[$2 >> 0] | 0) == ($1 & 255) << 24 >> 24 ? $2 : 0) | 0; //@line 12235
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_305($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 21107
 return;
}
function _wctomb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$0) {
  $$0 = 0; //@line 14256
 } else {
  $$0 = _wcrtomb($0, $1, 0) | 0; //@line 14259
 }
 return $$0 | 0; //@line 14261
}
function __ZN7LoRaPHY13mask_bit_testEPKtj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return (1 << ($2 & 15) & (HEAPU16[$1 + ($2 >>> 4 << 1) >> 1] | 0) | 0) != 0 | 0; //@line 22202
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_118($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 27788
 return;
}
function __ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 24936
 return;
}
function __ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_94($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = HEAP32[___async_retval >> 2]; //@line 26298
 return;
}
function __ZN7LoRaPHY19request_new_channelEaP16channel_params_t__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[___async_retval >> 0] = HEAP8[___async_retval >> 0] & 1 ? 3 : 0; //@line 24103
 return;
}
function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[index & 31](a1 | 0, a2 | 0, a3 | 0) | 0; //@line 32189
}
function __ZN7LoRaMac15open_rx2_windowEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[(HEAP32[$0 + 8 >> 2] | 0) + 1168 >> 2] = HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0 ? 2 : 1; //@line 26717
 return;
}
function __ZN16LoRaWANInterface25set_confirmed_msg_retriesEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack23set_confirmed_msg_retryEh($0 + 4 | 0, $1) | 0; //@line 5410
}
function _fputs($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = _strlen($0) | 0; //@line 11725
 return ((_fwrite($0, 1, $2, $1) | 0) != ($2 | 0)) << 31 >> 31 | 0; //@line 11729
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 return ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0; //@line 31919
}
function __ZN16LoRaWANInterface16set_channel_planERK16lora_channelplan__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 25187
 return;
}
function ___dynamic_cast__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) == 1 ? HEAP32[$0 + 8 >> 2] | 0 : 0; //@line 30536
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_316($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 22017
 return;
}
function __ZN16LoRaWANInterface20get_backoff_metadataERi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack24acquire_backoff_metadataERi($0 + 4 | 0, $1) | 0; //@line 5615
}
function b50(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(3); //@line 32416
 return 0; //@line 32416
}
function b49(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(0); //@line 32413
 return 0; //@line 32413
}
function __ZN16SX1276_LoRaRadio18set_public_networkEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 + 689 >> 0] = 1; //@line 710
 HEAP8[$0 + 776 >> 0] = $1 & 1; //@line 712
 return;
}
function __ZN18LoRaWANTimeHandler16get_elapsed_timeEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return (__ZN6events10EventQueue4tickEv(HEAP32[$0 >> 2] | 0) | 0) - $1 | 0; //@line 23257
}
function __ZN16LoRaWANInterface16set_device_classE14device_class_t__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 25667
 return;
}
function __ZN16LoRaWANInterface10initializeEPN6events10EventQueueE__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 28902
 return;
}
function _emscripten_realloc_async_context(len) {
 len = len | 0;
 stackRestore(___async_cur_frame | 0); //@line 31980
 return (stackAlloc(len + 8 | 0) | 0) + 8 | 0; //@line 31981
}
function __ZN6events5EventIFvvEE10event_postIPS1_EEiPNS2_5eventE__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 28893
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_141($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 29199
 return;
}
function __ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb_357($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 24788
 return;
}
function _gpio_irq_set($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 _emscripten_asm_const_iiii(14, HEAP32[$0 + 4 >> 2] | 0, $1 | 0, $2 | 0) | 0; //@line 7043
 return;
}
function __ZN7LoRaMac24continue_joining_processEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[___async_retval >> 0] = (HEAP32[___async_retval >> 2] | 0) == 0 & 1; //@line 27308
 return;
}
function __ZN13LoRaMacCrypto28compute_skeys_for_join_frameEPKhjS1_tPhS2___async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 8 >> 2]; //@line 25157
 return;
}
function __ZN12LoRaWANStack12add_channelsERK16lora_channelplan__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 28494
 return;
}
function __ZN7LoRaMac17bind_radio_driverER9LoRaRadio($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZN7LoRaPHY18set_radio_instanceER9LoRaRadio($0 + 4 | 0, $1); //@line 16988
 return;
}
function dynCall_viii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 FUNCTION_TABLE_viii[index & 7](a1 | 0, a2 | 0, a3 | 0); //@line 32245
}
function __ZN7LoRaMac16add_channel_planERK16lora_channelplan__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 25167
 return;
}
function __ZN16SX1276_LoRaRadio22set_max_payload_lengthE10modem_typeh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 HEAP8[$0 + 689 >> 0] = $1; //@line 700
 return;
}
function __ZN16LoRaWANInterface7connectERK15lorawan_connect__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 31644
 return;
}
function __ZN13LoRaMacCrypto15decrypt_payloadEPKhtS1_jjhjPh__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 28630
 return;
}
function __ZN12LoRaWANStack7connectERK15lorawan_connect__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 28643
 return;
}
function establishStackSpace(stackBase, stackMax) {
 stackBase = stackBase | 0;
 stackMax = stackMax | 0;
 STACKTOP = stackBase; //@line 21
 STACK_MAX = stackMax; //@line 22
}
function __ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_100($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 26702
 return;
}
function __ZN5Sht31C2E7PinNameS0_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 _emscripten_asm_const_iiii(17, $0 | 0, $1 | 0, $2 | 0) | 0; //@line 7340
 return;
}
function __ZN16LoRaWANInterface12set_datarateEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack21set_channel_data_rateEh($0 + 4 | 0, $1) | 0; //@line 5385
}
function __ZN7LoRaPHY23get_minimum_tx_datarateEv($0) {
 $0 = $0 | 0;
 return HEAP8[((HEAP8[$0 + 128 >> 0] & 1) == 0 ? $0 + 26 | 0 : $0 + 35 | 0) >> 0] | 0; //@line 22757
}
function __ZN4mbed8CallbackIFv11lora_eventsEE13function_moveIPS2_EEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 8062
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_39($0) {
 $0 = $0 | 0;
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv(HEAP32[$0 + 4 >> 2] | 0); //@line 23948
 return;
}
function __ZN16LoRaWANInterface19remove_channel_planEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 26864
 return;
}
function _swapc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0;
 $3 = _llvm_bswap_i32($0 | 0) | 0; //@line 12221
 return (($1 | 0) == 0 ? $0 : $3) | 0; //@line 12223
}
function __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_207($0) {
 $0 = $0 | 0;
 _gpio_irq_set((HEAP32[$0 + 8 >> 2] | 0) + 28 | 0, 2, 0); //@line 53
 return;
}
function __ZN16LoRaWANInterface25disable_adaptive_datarateEv($0) {
 $0 = $0 | 0;
 return __ZN12LoRaWANStack24enable_adaptive_datarateEb($0 + 4 | 0, 0) | 0; //@line 5401
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 17460
 __ZdlPv($0); //@line 17461
 return;
}
function _aes_crypt_ecb_wrap($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 return _mbedtls_aes_crypt_ecb($0, $1, $2, $3) | 0; //@line 3096
}
function __ZN16LoRaWANInterface24enable_adaptive_datarateEv($0) {
 $0 = $0 | 0;
 return __ZN12LoRaWANStack24enable_adaptive_datarateEb($0 + 4 | 0, 1) | 0; //@line 5393
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 17143
 __ZdlPv($0); //@line 17144
 return;
}
function _srand($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = 20352; //@line 16257
 HEAP32[$2 >> 2] = $0 + -1; //@line 16259
 HEAP32[$2 + 4 >> 2] = 0; //@line 16262
 return;
}
function __ZN18LoRaWANTimeHandler24activate_timer_subsystemEPN6events10EventQueueE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 23238
 return;
}
function __ZN16LoRaWANInterface7receiveEPhtRhRi__async_cb($0) {
 $0 = $0 | 0;
 HEAP16[___async_retval >> 1] = HEAP16[___async_retval >> 1] | 0; //@line 28833
 return;
}
function __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_33($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 23643
 return;
}
function _gcm_ctx_alloc() {
 var $0 = 0;
 $0 = _calloc(1, 400) | 0; //@line 3062
 if ($0 | 0) {
  _mbedtls_gcm_init($0); //@line 3065
 }
 return $0 | 0; //@line 3067
}
function __ZN7LoRaMac21handle_retransmissionEv__async_cb_429($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 31643
 return;
}
function __ZN7LoRaMac21handle_retransmissionEv__async_cb_428($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 31629
 return;
}
function __ZN13LoRaMacCrypto18decrypt_join_frameEPKhtS1_jPh__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 26910
 return;
}
function __ZN13LoRaMacCrypto15encrypt_payloadEPKhtS1_jjhjPh__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 28044
 return;
}
function __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_156($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 30107
 return;
}
function b47(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(7); //@line 32410
 return 0; //@line 32410
}
function b46(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(6); //@line 32407
 return 0; //@line 32407
}
function b45(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(0); //@line 32404
 return 0; //@line 32404
}
function _ccm_ctx_alloc() {
 var $0 = 0;
 $0 = _calloc(1, 68) | 0; //@line 3014
 if ($0 | 0) {
  _mbedtls_ccm_init($0); //@line 3017
 }
 return $0 | 0; //@line 3019
}
function __ZN16LoRaWANInterface7receiveEhPhti__async_cb($0) {
 $0 = $0 | 0;
 HEAP16[___async_retval >> 1] = HEAP16[___async_retval >> 1] | 0; //@line 28653
 return;
}
function __ZN16LoRaWANInterface25remove_link_check_requestEv($0) {
 $0 = $0 | 0;
 __ZN12LoRaWANStack25remove_link_check_requestEv($0 + 4 | 0); //@line 5375
 return;
}
function __ZN16LoRaWANInterface14remove_channelEh__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 31343
 return;
}
function __ZN16LoRaWANInterface14cancel_sendingEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 31571
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 16671
 __ZdlPv($0); //@line 16672
 return;
}
function __ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 26063
 return;
}
function __ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_96($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = 2; //@line 26378
 return;
}
function __ZN12LoRaWANStack17drop_channel_listEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 26854
 return;
}
function __ZN16LoRaWANInterface4sendEhPKhti__async_cb($0) {
 $0 = $0 | 0;
 HEAP16[___async_retval >> 1] = HEAP16[___async_retval >> 1] | 0; //@line 14038
 return;
}
function __ZN12LoRaWANStack16remove_a_channelEh__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 26920
 return;
}
function _ticker_set_handler__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 4 >> 2] >> 2] = HEAP32[$0 + 8 >> 2]; //@line 25152
 return;
}
function _out_670($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 if (!(HEAP32[$0 >> 2] & 32)) {
  ___fwritex($1, $2, $0) | 0; //@line 13741
 }
 return;
}
function ___cxa_is_pointer_type__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = (HEAP32[___async_retval >> 2] | 0) != 0 & 1; //@line 22582
 return;
}
function __ZN7LoRaMac21remove_single_channelEh__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 25177
 return;
}
function __ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_295($0) {
 $0 = $0 | 0;
 HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 2911 >> 0] = 1; //@line 20076
 return;
}
function setThrew(threw, value) {
 threw = threw | 0;
 value = value | 0;
 if (!__THREW__) {
  __THREW__ = threw; //@line 32
  threwValue = value; //@line 33
 }
}
function __ZN16LoRaWANInterface22add_link_check_requestEv($0) {
 $0 = $0 | 0;
 return __ZN12LoRaWANStack22set_link_check_requestEv($0 + 4 | 0) | 0; //@line 5368
}
function __ZN16LoRaWANInterface10disconnectEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 12324
 return;
}
function dynCall_iii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return FUNCTION_TABLE_iii[index & 31](a1 | 0, a2 | 0) | 0; //@line 32182
}
function __ZN7LoRaMac19remove_channel_planEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 18401
 return;
}
function __ZN18LoRaMacChannelPlan30activate_channelplan_subsystemEP7LoRaPHY($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 17009
 return;
}
function __ZN12LoRaWANStack8shutdownEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 22270
 return;
}
function __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return ($0 | 0) == ($1 | 0) | 0; //@line 16868
}
function b353(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_viiiiii(0); //@line 37
}
function __ZN16LoRaWANInterface7connectEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 33408
 return;
}
function __ZN12LoRaWANStack7connectEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 18391
 return;
}
function __ZN4mbed8CallbackIFvPKhtsaEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPKvS2_tsa__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY16get_channel_maskEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return HEAP32[($1 ? $0 + 120 | 0 : $0 + 116 | 0) >> 2] | 0; //@line 22809
}
function __ZSt13get_terminatev() {
 var $0 = 0;
 $0 = HEAP32[2729] | 0; //@line 17450
 HEAP32[2729] = $0 + 0; //@line 17452
 return $0 | 0; //@line 17454
}
function __ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_65($0) {
 $0 = $0 | 0;
 HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 2084 >> 0] = 1; //@line 25203
 return;
}
function __ZN18LoRaWANTimeHandler16get_current_timeEv($0) {
 $0 = $0 | 0;
 return __ZN6events10EventQueue4tickEv(HEAP32[$0 >> 2] | 0) | 0; //@line 23247
}
function __ZN12LoRaWANStack16set_device_classERK14device_class_t__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 23150
 return;
}
function _gpio_irq_free($0) {
 $0 = $0 | 0;
 _emscripten_asm_const_iii(13, HEAP32[$0 + 4 >> 2] | 0, HEAP32[$0 + 8 >> 2] | 0) | 0; //@line 7032
 return;
}
function _mbedtls_cipher_update__async_cb_113($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 27490
 return;
}
function _mbedtls_cipher_setkey__async_cb_103($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 26894
 return;
}
function __ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb_350($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 24280
 return;
}
function dynCall_vii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 FUNCTION_TABLE_vii[index & 15](a1 | 0, a2 | 0); //@line 32238
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY13get_radio_rngEv__async_cb_124($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 28283
 return;
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_188($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 32869
 return;
}
function _aes_setkey_enc_wrap($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return _mbedtls_aes_setkey_enc($0, $1, $2) | 0; //@line 3130
}
function __ZN7LoRaMac4joinEb__async_cb_202($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 33749
 return;
}
function __ZN18LoRaWANTimeHandler4stopER13timer_event_t__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 0; //@line 17510
 return;
}
function _mbedtls_cipher_update__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 27321
 return;
}
function _mbedtls_cipher_setkey__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 26884
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio6randomEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 13275
 return;
}
function b43(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(3); //@line 32401
 return 0; //@line 32401
}
function b42(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(0); //@line 32398
 return 0; //@line 32398
}
function _gcm_aes_setkey_wrap__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 29736
 return;
}
function _ccm_aes_setkey_wrap__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 26874
 return;
}
function _aes_setkey_dec_wrap__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 13265
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_413($0) {
 $0 = $0 | 0;
 HEAP8[___async_retval >> 0] = 1; //@line 29433
 return;
}
function _mbedtls_ccm_setkey__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 27233
 return;
}
function __ZN7LoRaMac24enable_adaptive_datarateEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 + 1936 >> 0] = $1 & 1; //@line 15523
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _mbedtls_cipher_cmac_finish__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 17894
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMacD2Ev__async_cb_288($0) {
 $0 = $0 | 0;
 __ZN12LoRaPHYEU868D2Ev((HEAP32[$0 + 4 >> 2] | 0) + 4 | 0); //@line 19154
 return;
}
function __ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _llvm_bswap_i32(x) {
 x = x | 0;
 return (x & 255) << 24 | (x >> 8 & 255) << 16 | (x >> 16 & 255) << 8 | x >>> 24 | 0; //@line 32007
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_363($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY18set_radio_instanceER9LoRaRadio($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + 4 >> 2] = $1; //@line 22210
 return;
}
function _memset__wrapper(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 return _memset(p0 | 0, p1 | 0, p2 | 0) | 0; //@line 32356
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvbEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPKvb__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _mbedtls_aes_setkey_dec__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 8 >> 2]; //@line 23560
 return;
}
function __ZN4mbed8CallbackIFvPKhtsaEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function b351(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(0); //@line 34
}
function _fflush__async_cb_223($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 13374
 return;
}
function __ZN7LoRaPHY32is_custom_channel_plan_supportedEv($0) {
 $0 = $0 | 0;
 return (HEAP8[$0 + 16 >> 0] | 0) != 0 | 0; //@line 22834
}
function _strerror($0) {
 $0 = $0 | 0;
 return ___strerror_l($0, HEAP32[(___pthread_self_85() | 0) + 188 >> 2] | 0) | 0; //@line 14204
}
function _fputc__async_cb_225($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 13468
 return;
}
function __ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio11set_channelEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + 692 >> 2] = $1; //@line 658
 return;
}
function _vsprintf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 25729
 return;
}
function _snprintf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 28845
 return;
}
function _putc__async_cb_421($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 30636
 return;
}
function __ZN7LoRaMac14set_tx_ongoingEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 + 2104 >> 0] = $1 & 1; //@line 15568
 return;
}
function __ZN6events10EventQueue9time_leftEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return _equeue_timeleft($0, $1) | 0; //@line 3023
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _sprintf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 31634
 return;
}
function __ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($0) {
 $0 = $0 | 0;
 return (HEAP8[$0 >> 0] | 0) != 0 | 0; //@line 17506
}
function __ZN7LoRaPHYD2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 880; //@line 19713
 HEAP32[$0 + 4 >> 2] = 0; //@line 19715
 return;
}
function __ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[index & 15](a1 | 0) | 0; //@line 32175
}
function _printf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 28920
 return;
}
function __ZN7LoRaPHY12get_next_ADREbRaS0_Rj__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[___async_retval >> 0] = 0; //@line 28503
 return;
}
function _putchar__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 63
 return;
}
function __ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($0) {
 $0 = $0 | 0;
 return (HEAP8[$0 + 1 >> 0] | 0) != 0 | 0; //@line 17523
}
function __ZN7LoRaMac11schedule_txEv__async_cb_352($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 24410
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvbEE13function_dtorINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function b40(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(31); //@line 32395
 return 0; //@line 32395
}
function b39(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(30); //@line 32392
 return 0; //@line 32392
}
function b38(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(29); //@line 32389
 return 0; //@line 32389
}
function b37(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(28); //@line 32386
 return 0; //@line 32386
}
function b36(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(27); //@line 32383
 return 0; //@line 32383
}
function b35(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(26); //@line 32380
 return 0; //@line 32380
}
function b34(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(25); //@line 32377
 return 0; //@line 32377
}
function b33(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(24); //@line 32374
 return 0; //@line 32374
}
function b32(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(23); //@line 32371
 return 0; //@line 32371
}
function b31(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(22); //@line 32368
 return 0; //@line 32368
}
function b30(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(21); //@line 32365
 return 0; //@line 32365
}
function b29(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(20); //@line 32362
 return 0; //@line 32362
}
function b28(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(19); //@line 32359
 return 0; //@line 32359
}
function __ZN7LoRaPHY21verify_nb_join_trialsEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ($1 & 255) > 11 | 0; //@line 22898
}
function __ZN12LoRaWANStack25remove_link_check_requestEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 2909 >> 0] = 0; //@line 11747
 return;
}
function b27(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(0); //@line 32353
 return 0; //@line 32353
}
function __ZNK14LoRaMacCommand26get_repeat_commands_lengthEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 3 >> 0] | 0; //@line 17491
}
function __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 >> 0] = 0; //@line 17497
 return;
}
function __ZSt11__terminatePFvvE__async_cb($0) {
 $0 = $0 | 0;
 _abort_message(18826, HEAP32[$0 + 4 >> 2] | 0); //@line 12662
}
function __ZN4mbed11InterruptInD0Ev__async_cb_1($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 18331
 return;
}
function __ZN12LoRaPHYEU868D0Ev($0) {
 $0 = $0 | 0;
 __ZN7LoRaPHYD2Ev($0); //@line 23080
 __ZdlPv($0); //@line 23081
 return;
}
function _mbedtls_cipher_cmac_starts__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 14465
 return;
}
function __ZN7LoRaMac11schedule_txEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 24394
 return;
}
function __ZN4mbed6Ticker6detachEv($0) {
 $0 = $0 | 0;
 _emscripten_asm_const_ii(15, $0 + 40 | 0) | 0; //@line 7300
 return;
}
function __ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE__async_cb_218($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadioD0Ev__async_cb($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 17495
 return;
}
function __ZN16LoRaWANInterfaceD0Ev__async_cb($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 28945
 return;
}
function dynCall_vi(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 FUNCTION_TABLE_vi[index & 1023](a1 | 0); //@line 32231
}
function __ZN7LoRaPHY29get_maximum_frame_counter_gapEv($0) {
 $0 = $0 | 0;
 return HEAP16[$0 + 48 >> 1] | 0; //@line 22780
}
function __ZN5Sht3115readTemperatureEv($0) {
 $0 = $0 | 0;
 return +(+(_emscripten_asm_const_ii(18, $0 | 0) | 0) / 100.0);
}
function __ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed7TimeoutD0Ev__async_cb_349($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 24244
 return;
}
function __ZN7LoRaMac26get_backoff_timer_event_idEv($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 1812 >> 2] | 0; //@line 15437
}
function __ZN7LoRaMac25post_process_mlme_requestEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 2084 >> 0] = 0; //@line 12199
 return;
}
function __ZN4mbed6TickerD0Ev__async_cb_230($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 14071
 return;
}
function __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 1 >> 0] = 0; //@line 17513
 return;
}
function __ZN14LoRaMacCommand20clear_command_bufferEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 2 >> 0] = 0; //@line 17362
 return;
}
function __ZN14LoRaMacCommand19clear_repeat_bufferEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 3 >> 0] = 0; //@line 17464
 return;
}
function b349(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(7); //@line 31
}
function b348(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(6); //@line 28
}
function b347(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(0); //@line 25
}
function _equeue_event_period($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + -12 >> 2] = $1; //@line 4354
 return;
}
function __ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 2 >> 0] | 0; //@line 17371
}
function __ZN4mbed8CallbackIFvvEE13function_callIN6events5EventIS1_EEEEvPKv__async_cb_125($0) {
 $0 = $0 | 0;
 return;
}
function _equeue_event_delay($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + -16 >> 2] = $1; //@line 4345
 return;
}
function __ZN7LoRaMac21post_process_mlme_indEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 2080 >> 0] = 0; //@line 12263
 return;
}
function __ZN7LoRaMac21post_process_mcps_indEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 2012 >> 0] = 0; //@line 12255
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_dtorIN6events5EventIS1_EEEEvPv__async_cb_197($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_257($0) {
 $0 = $0 | 0;
 return;
}
function _equeue_event_dtor($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + -8 >> 2] = $1; //@line 4363
 return;
}
function __ZN7LoRaMac10tx_ongoingEv($0) {
 $0 = $0 | 0;
 return (HEAP8[$0 + 2104 >> 0] | 0) != 0 | 0; //@line 15559
}
function __ZN7LoRaMac10nwk_joinedEv($0) {
 $0 = $0 | 0;
 return (HEAP8[$0 + 2376 >> 0] | 0) != 0 | 0; //@line 13829
}
function __ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context00IPFvvEEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio18check_rf_frequencyEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return 1; //@line 998
}
function __ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb_42($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFv11lora_eventsEE13function_callIPS2_EEvPKvS1___async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack24process_connecting_stateER14lorawan_status__async_cb_91($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack24process_connecting_stateER14lorawan_status__async_cb_90($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK7LoRaMac16get_device_classEv($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 2380 >> 2] | 0; //@line 15263
}
function __ZN6events10EventQueue14break_dispatchEv($0) {
 $0 = $0 | 0;
 _equeue_break($0); //@line 2990
 return;
}
function __ZN7LoRaPHY19get_max_nb_channelsEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 20 >> 0] | 0; //@line 22817
}
function __ZN16SX1276_LoRaRadio10get_statusEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 688 >> 0] | 0; //@line 690
}
function __ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_64($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY16get_phy_channelsEv($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 124 >> 2] | 0; //@line 22825
}
function __ZN14LoRaMacCommand23get_mac_commands_bufferEv($0) {
 $0 = $0 | 0;
 return $0 + 4 | 0; //@line 17378
}
function b25(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(31); //@line 32350
 return 0; //@line 32350
}
function b24(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(30); //@line 32347
 return 0; //@line 32347
}
function b23(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(29); //@line 32344
 return 0; //@line 32344
}
function b22(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(28); //@line 32341
 return 0; //@line 32341
}
function b21(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(27); //@line 32338
 return 0; //@line 32338
}
function b20(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(26); //@line 32335
 return 0; //@line 32335
}
function b19(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(25); //@line 32332
 return 0; //@line 32332
}
function b18(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(24); //@line 32329
 return 0; //@line 32329
}
function b17(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(23); //@line 32326
 return 0; //@line 32326
}
function b16(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(22); //@line 32323
 return 0; //@line 32323
}
function b15(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(21); //@line 32320
 return 0; //@line 32320
}
function b14(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(20); //@line 32317
 return 0; //@line 32317
}
function b13(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(19); //@line 32314
 return 0; //@line 32314
}
function b12(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(18); //@line 32311
 return 0; //@line 32311
}
function _gcm_ctx_free__async_cb($0) {
 $0 = $0 | 0;
 _free(HEAP32[$0 + 4 >> 2] | 0); //@line 28929
 return;
}
function _ccm_ctx_free__async_cb($0) {
 $0 = $0 | 0;
 _free(HEAP32[$0 + 4 >> 2] | 0); //@line 28053
 return;
}
function _aes_ctx_free__async_cb($0) {
 $0 = $0 | 0;
 _free(HEAP32[$0 + 4 >> 2] | 0); //@line 12690
 return;
}
function ___lctrans($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ___lctrans_impl($0, $1) | 0; //@line 15449
}
function b11(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(0); //@line 32308
 return 0; //@line 32308
}
function _main__async_cb_386($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1; //@line 26793
 return;
}
function _main__async_cb_384($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1; //@line 26731
 return;
}
function _main__async_cb_383($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1; //@line 26723
 return;
}
function _equeue_mutex_unlock($0) {
 $0 = $0 | 0;
 _pthread_mutex_unlock($0 | 0) | 0; //@line 4398
 return;
}
function _main__async_cb_387($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 26803
 return;
}
function _equeue_mutex_create($0) {
 $0 = $0 | 0;
 return _pthread_mutex_init($0 | 0, 0) | 0; //@line 4385
}
function __ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb_213($0) {
 $0 = $0 | 0;
 return;
}
function __ZN14LoRaMacCommandC2Ev($0) {
 $0 = $0 | 0;
 _memset($0 | 0, 0, 276) | 0; //@line 17354
 return;
}
function dynCall_i(index) {
 index = index | 0;
 return FUNCTION_TABLE_i[index & 7]() | 0; //@line 32168
}
function __ZNK7LoRaMac21get_mlme_confirmationEv($0) {
 $0 = $0 | 0;
 return $0 + 2084 | 0; //@line 12185
}
function __ZNK7LoRaMac21get_mcps_confirmationEv($0) {
 $0 = $0 | 0;
 return $0 + 2052 | 0; //@line 12171
}
function __ZN6events10EventQueue13function_dtorINS0_9context00IPFvvEEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function _equeue_mutex_lock($0) {
 $0 = $0 | 0;
 _pthread_mutex_lock($0 | 0) | 0; //@line 4391
 return;
}
function __ZNK7LoRaMac19get_mlme_indicationEv($0) {
 $0 = $0 | 0;
 return $0 + 2076 | 0; //@line 12192
}
function __ZNK7LoRaMac19get_mcps_indicationEv($0) {
 $0 = $0 | 0;
 return $0 + 2012 | 0; //@line 12178
}
function __ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN18LoRaWANTimeHandlerC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 0; //@line 23224
 return;
}
function __ZN18LoRaMacChannelPlanC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 0; //@line 16995
 return;
}
function __ZN12LoRaWANStack28tx_timeout_interrupt_handlerEv__async_cb_329($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv__async_cb_172($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_255($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue4tickEv($0) {
 $0 = $0 | 0;
 return _equeue_tick() | 0; //@line 2998
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_236($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack26rx_error_interrupt_handlerEv__async_cb_320($0) {
 $0 = $0 | 0;
 return;
}
function b345(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(7); //@line 22
}
function b344(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(6); //@line 19
}
function b343(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(0); //@line 16
}
function __ZN4mbed8CallbackIFv11lora_eventsEE13function_dtorIPS2_EEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack29handle_ack_expiry_for_class_cEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack25process_reception_timeoutEb__async_cb_192($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa__async_cb_345($0) {
 $0 = $0 | 0;
 return;
}
function _mbedtls_gcm_init($0) {
 $0 = $0 | 0;
 _memset($0 | 0, 0, 400) | 0; //@line 4096
 return;
}
function __ZN12LoRaWANStack26process_status_check_stateEv__async_cb_7($0) {
 $0 = $0 | 0;
 return;
}
function _mbedtls_aes_init($0) {
 $0 = $0 | 0;
 _memset($0 | 0, 0, 280) | 0; //@line 204
 return;
}
function __ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb_323($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaPHYEU868D2Ev($0) {
 $0 = $0 | 0;
 __ZN7LoRaPHYD2Ev($0); //@line 23073
 return;
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_367($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_366($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack26process_status_check_stateEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_26($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_24($0) {
 $0 = $0 | 0;
 return;
}
function dynCall_v(index) {
 index = index | 0;
 FUNCTION_TABLE_v[index & 15](); //@line 32224
}
function __ZN12LoRaWANStack20tx_interrupt_handlerEv__async_cb_339($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_338($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_337($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_336($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_333($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY25setup_public_network_modeEb__async_cb_137($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events5EventIFvvEE10event_dtorIPS1_EEvPNS2_5eventE($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_56($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_55($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_54($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac23on_backoff_timer_expiryEv__async_cb_369($0) {
 $0 = $0 | 0;
 return;
}
function _isdigit($0) {
 $0 = $0 | 0;
 return ($0 + -48 | 0) >>> 0 < 10 | 0; //@line 11602
}
function __ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_4($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio15timeout_irq_isrEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function b9(p0) {
 p0 = p0 | 0;
 nullFunc_ii(15); //@line 32305
 return 0; //@line 32305
}
function b8(p0) {
 p0 = p0 | 0;
 nullFunc_ii(14); //@line 32302
 return 0; //@line 32302
}
function b7(p0) {
 p0 = p0 | 0;
 nullFunc_ii(13); //@line 32299
 return 0; //@line 32299
}
function b6(p0) {
 p0 = p0 | 0;
 nullFunc_ii(12); //@line 32296
 return 0; //@line 32296
}
function __ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_151($0) {
 $0 = $0 | 0;
 return;
}
function __ZL18lora_event_handler11lora_events__async_cb_74($0) {
 $0 = $0 | 0;
 return;
}
function __ZL18lora_event_handler11lora_events__async_cb_73($0) {
 $0 = $0 | 0;
 return;
}
function __ZL18lora_event_handler11lora_events__async_cb_72($0) {
 $0 = $0 | 0;
 return;
}
function __ZL18lora_event_handler11lora_events__async_cb_70($0) {
 $0 = $0 | 0;
 return;
}
function b5(p0) {
 p0 = p0 | 0;
 nullFunc_ii(0); //@line 32293
 return 0; //@line 32293
}
function __ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_174($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio8transmitEj__async_cb_122($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio11tx_done_irqEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio11rx_done_irqEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZL18lora_event_handler11lora_events__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___ofl_lock() {
 ___lock(24440); //@line 12240
 return 24448; //@line 12241
}
function __ZN7LoRaPHY15setup_rx_windowEbj__async_cb_132($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_36($0) {
 $0 = $0 | 0;
 return;
}
function _abort_message__async_cb_203($0) {
 $0 = $0 | 0;
 _abort(); //@line 33772
}
function __ZN7LoRaPHYD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 19722
 return;
}
function __ZN6events10EventQueue8dispatchEi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed10TimerEventD0Ev($0) {
 $0 = $0 | 0;
 _llvm_trap(); //@line 2906
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY11handle_sendEPhh__async_cb_105($0) {
 $0 = $0 | 0;
 return;
}
function b341(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(0); //@line 13
}
function __ZN6events10EventQueue6cancelEi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function setTempRet0(value) {
 value = value | 0;
 tempRet0 = value; //@line 39
}
function _frexpl($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 return +(+_frexp($0, $1));
}
function ___cxa_pure_virtual__wrapper() {
 ___cxa_pure_virtual(); //@line 32425
}
function __ZN7LoRaMac15open_rx1_windowEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed7Timeout7handlerEv__async_cb_355($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio4sendEPhh__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_269($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed11InterruptInD2Ev__async_cb_10($0) {
 $0 = $0 | 0;
 return;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function ___pthread_self_910() {
 return _pthread_self() | 0; //@line 15370
}
function __ZN4mbed10TimerEvent3irqEj__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___pthread_self_85() {
 return _pthread_self() | 0; //@line 15376
}
function __ZN4mbed6Ticker7handlerEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16LoRaWANInterfaceD2Ev__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12radio_eventsD2Ev__async_cb_294($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStackD2Ev__async_cb_260($0) {
 $0 = $0 | 0;
 return;
}
function _mbedtls_platform_zeroize__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _mbed_trace_default_print__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed7TimeoutD2Ev__async_cb_347($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed10TimerEventD2Ev__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed10TimerEventC2Ev__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function stackRestore(top) {
 top = top | 0;
 STACKTOP = top; //@line 16
}
function _pthread_mutex_unlock(x) {
 x = x | 0;
 return 0; //@line 32134
}
function __ZN4mbed6TickerD2Ev__async_cb_301($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio9start_cadEv($0) {
 $0 = $0 | 0;
 return;
}
function _schedule_interrupt__async_cb_398($0) {
 $0 = $0 | 0;
 return;
}
function _schedule_interrupt__async_cb_397($0) {
 $0 = $0 | 0;
 return;
}
function _schedule_interrupt__async_cb_394($0) {
 $0 = $0 | 0;
 return;
}
function _schedule_interrupt__async_cb_393($0) {
 $0 = $0 | 0;
 return;
}
function _mbedtls_cipher_free__async_cb_40($0) {
 $0 = $0 | 0;
 return;
}
function __ZdlPv($0) {
 $0 = $0 | 0;
 _free($0); //@line 16497
 return;
}
function b3() {
 nullFunc_i(7); //@line 32290
 return 0; //@line 32290
}
function b2() {
 nullFunc_i(6); //@line 32287
 return 0; //@line 32287
}
function b1() {
 nullFunc_i(0); //@line 32284
 return 0; //@line 32284
}
function _pthread_mutex_lock(x) {
 x = x | 0;
 return 0; //@line 32130
}
function _mbed_assert_internal__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio6unlockEv($0) {
 $0 = $0 | 0;
 return;
}
function _ticker_remove_event__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _handle_interrupt_in__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___ofl_unlock() {
 ___unlock(24440); //@line 12246
 return;
}
function b335(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1019); //@line 33265
}
function b334(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1018); //@line 33262
}
function b333(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1017); //@line 33259
}
function b332(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1016); //@line 33256
}
function b331(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1015); //@line 33253
}
function b330(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1014); //@line 33250
}
function b329(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1013); //@line 33247
}
function b328(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1012); //@line 33244
}
function b327(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1011); //@line 33241
}
function b326(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1010); //@line 33238
}
function b325(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1009); //@line 33235
}
function b324(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1008); //@line 33232
}
function b323(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1007); //@line 33229
}
function b322(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1006); //@line 33226
}
function b321(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1005); //@line 33223
}
function b320(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1004); //@line 33220
}
function b319(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1003); //@line 33217
}
function b318(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1002); //@line 33214
}
function b317(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1001); //@line 33211
}
function __ZN16SX1276_LoRaRadio4lockEv($0) {
 $0 = $0 | 0;
 return;
}
function __ZL12send_messagev__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function b316(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1e3); //@line 33208
}
function b315(p0) {
 p0 = p0 | 0;
 nullFunc_vi(999); //@line 33205
}
function b314(p0) {
 p0 = p0 | 0;
 nullFunc_vi(998); //@line 33202
}
function b313(p0) {
 p0 = p0 | 0;
 nullFunc_vi(997); //@line 33199
}
function b312(p0) {
 p0 = p0 | 0;
 nullFunc_vi(996); //@line 33196
}
function b311(p0) {
 p0 = p0 | 0;
 nullFunc_vi(995); //@line 33193
}
function b310(p0) {
 p0 = p0 | 0;
 nullFunc_vi(994); //@line 33190
}
function b309(p0) {
 p0 = p0 | 0;
 nullFunc_vi(993); //@line 33187
}
function b308(p0) {
 p0 = p0 | 0;
 nullFunc_vi(992); //@line 33184
}
function b307(p0) {
 p0 = p0 | 0;
 nullFunc_vi(991); //@line 33181
}
function b306(p0) {
 p0 = p0 | 0;
 nullFunc_vi(990); //@line 33178
}
function b305(p0) {
 p0 = p0 | 0;
 nullFunc_vi(989); //@line 33175
}
function b304(p0) {
 p0 = p0 | 0;
 nullFunc_vi(988); //@line 33172
}
function b303(p0) {
 p0 = p0 | 0;
 nullFunc_vi(987); //@line 33169
}
function b302(p0) {
 p0 = p0 | 0;
 nullFunc_vi(986); //@line 33166
}
function b301(p0) {
 p0 = p0 | 0;
 nullFunc_vi(985); //@line 33163
}
function b300(p0) {
 p0 = p0 | 0;
 nullFunc_vi(984); //@line 33160
}
function b299(p0) {
 p0 = p0 | 0;
 nullFunc_vi(983); //@line 33157
}
function b298(p0) {
 p0 = p0 | 0;
 nullFunc_vi(982); //@line 33154
}
function b297(p0) {
 p0 = p0 | 0;
 nullFunc_vi(981); //@line 33151
}
function b296(p0) {
 p0 = p0 | 0;
 nullFunc_vi(980); //@line 33148
}
function b295(p0) {
 p0 = p0 | 0;
 nullFunc_vi(979); //@line 33145
}
function b294(p0) {
 p0 = p0 | 0;
 nullFunc_vi(978); //@line 33142
}
function b293(p0) {
 p0 = p0 | 0;
 nullFunc_vi(977); //@line 33139
}
function b292(p0) {
 p0 = p0 | 0;
 nullFunc_vi(976); //@line 33136
}
function b291(p0) {
 p0 = p0 | 0;
 nullFunc_vi(975); //@line 33133
}
function b290(p0) {
 p0 = p0 | 0;
 nullFunc_vi(974); //@line 33130
}
function b289(p0) {
 p0 = p0 | 0;
 nullFunc_vi(973); //@line 33127
}
function b288(p0) {
 p0 = p0 | 0;
 nullFunc_vi(972); //@line 33124
}
function b287(p0) {
 p0 = p0 | 0;
 nullFunc_vi(971); //@line 33121
}
function b286(p0) {
 p0 = p0 | 0;
 nullFunc_vi(970); //@line 33118
}
function b285(p0) {
 p0 = p0 | 0;
 nullFunc_vi(969); //@line 33115
}
function b284(p0) {
 p0 = p0 | 0;
 nullFunc_vi(968); //@line 33112
}
function b283(p0) {
 p0 = p0 | 0;
 nullFunc_vi(967); //@line 33109
}
function b282(p0) {
 p0 = p0 | 0;
 nullFunc_vi(966); //@line 33106
}
function b281(p0) {
 p0 = p0 | 0;
 nullFunc_vi(965); //@line 33103
}
function b280(p0) {
 p0 = p0 | 0;
 nullFunc_vi(964); //@line 33100
}
function b279(p0) {
 p0 = p0 | 0;
 nullFunc_vi(963); //@line 33097
}
function b278(p0) {
 p0 = p0 | 0;
 nullFunc_vi(962); //@line 33094
}
function b277(p0) {
 p0 = p0 | 0;
 nullFunc_vi(961); //@line 33091
}
function b276(p0) {
 p0 = p0 | 0;
 nullFunc_vi(960); //@line 33088
}
function b275(p0) {
 p0 = p0 | 0;
 nullFunc_vi(959); //@line 33085
}
function b274(p0) {
 p0 = p0 | 0;
 nullFunc_vi(958); //@line 33082
}
function b273(p0) {
 p0 = p0 | 0;
 nullFunc_vi(957); //@line 33079
}
function b272(p0) {
 p0 = p0 | 0;
 nullFunc_vi(956); //@line 33076
}
function b271(p0) {
 p0 = p0 | 0;
 nullFunc_vi(955); //@line 33073
}
function b270(p0) {
 p0 = p0 | 0;
 nullFunc_vi(954); //@line 33070
}
function b269(p0) {
 p0 = p0 | 0;
 nullFunc_vi(953); //@line 33067
}
function b268(p0) {
 p0 = p0 | 0;
 nullFunc_vi(952); //@line 33064
}
function b267(p0) {
 p0 = p0 | 0;
 nullFunc_vi(951); //@line 33061
}
function b266(p0) {
 p0 = p0 | 0;
 nullFunc_vi(950); //@line 33058
}
function b265(p0) {
 p0 = p0 | 0;
 nullFunc_vi(949); //@line 33055
}
function b264(p0) {
 p0 = p0 | 0;
 nullFunc_vi(948); //@line 33052
}
function b263(p0) {
 p0 = p0 | 0;
 nullFunc_vi(947); //@line 33049
}
function b262(p0) {
 p0 = p0 | 0;
 nullFunc_vi(946); //@line 33046
}
function b261(p0) {
 p0 = p0 | 0;
 nullFunc_vi(945); //@line 33043
}
function b260(p0) {
 p0 = p0 | 0;
 nullFunc_vi(944); //@line 33040
}
function b259(p0) {
 p0 = p0 | 0;
 nullFunc_vi(943); //@line 33037
}
function b258(p0) {
 p0 = p0 | 0;
 nullFunc_vi(942); //@line 33034
}
function b257(p0) {
 p0 = p0 | 0;
 nullFunc_vi(941); //@line 33031
}
function b256(p0) {
 p0 = p0 | 0;
 nullFunc_vi(940); //@line 33028
}
function b255(p0) {
 p0 = p0 | 0;
 nullFunc_vi(939); //@line 33025
}
function b254(p0) {
 p0 = p0 | 0;
 nullFunc_vi(938); //@line 33022
}
function b253(p0) {
 p0 = p0 | 0;
 nullFunc_vi(937); //@line 33019
}
function b252(p0) {
 p0 = p0 | 0;
 nullFunc_vi(936); //@line 33016
}
function b251(p0) {
 p0 = p0 | 0;
 nullFunc_vi(935); //@line 33013
}
function b250(p0) {
 p0 = p0 | 0;
 nullFunc_vi(934); //@line 33010
}
function b249(p0) {
 p0 = p0 | 0;
 nullFunc_vi(933); //@line 33007
}
function b248(p0) {
 p0 = p0 | 0;
 nullFunc_vi(932); //@line 33004
}
function b247(p0) {
 p0 = p0 | 0;
 nullFunc_vi(931); //@line 33001
}
function b246(p0) {
 p0 = p0 | 0;
 nullFunc_vi(930); //@line 32998
}
function b245(p0) {
 p0 = p0 | 0;
 nullFunc_vi(929); //@line 32995
}
function b244(p0) {
 p0 = p0 | 0;
 nullFunc_vi(928); //@line 32992
}
function b243(p0) {
 p0 = p0 | 0;
 nullFunc_vi(927); //@line 32989
}
function b242(p0) {
 p0 = p0 | 0;
 nullFunc_vi(926); //@line 32986
}
function b241(p0) {
 p0 = p0 | 0;
 nullFunc_vi(925); //@line 32983
}
function b240(p0) {
 p0 = p0 | 0;
 nullFunc_vi(924); //@line 32980
}
function b239(p0) {
 p0 = p0 | 0;
 nullFunc_vi(923); //@line 32977
}
function b238(p0) {
 p0 = p0 | 0;
 nullFunc_vi(922); //@line 32974
}
function b237(p0) {
 p0 = p0 | 0;
 nullFunc_vi(921); //@line 32971
}
function b236(p0) {
 p0 = p0 | 0;
 nullFunc_vi(920); //@line 32968
}
function b235(p0) {
 p0 = p0 | 0;
 nullFunc_vi(919); //@line 32965
}
function b234(p0) {
 p0 = p0 | 0;
 nullFunc_vi(918); //@line 32962
}
function b233(p0) {
 p0 = p0 | 0;
 nullFunc_vi(917); //@line 32959
}
function b232(p0) {
 p0 = p0 | 0;
 nullFunc_vi(916); //@line 32956
}
function b231(p0) {
 p0 = p0 | 0;
 nullFunc_vi(915); //@line 32953
}
function b230(p0) {
 p0 = p0 | 0;
 nullFunc_vi(914); //@line 32950
}
function b229(p0) {
 p0 = p0 | 0;
 nullFunc_vi(913); //@line 32947
}
function b228(p0) {
 p0 = p0 | 0;
 nullFunc_vi(912); //@line 32944
}
function b227(p0) {
 p0 = p0 | 0;
 nullFunc_vi(911); //@line 32941
}
function b226(p0) {
 p0 = p0 | 0;
 nullFunc_vi(910); //@line 32938
}
function b225(p0) {
 p0 = p0 | 0;
 nullFunc_vi(909); //@line 32935
}
function b224(p0) {
 p0 = p0 | 0;
 nullFunc_vi(908); //@line 32932
}
function b223(p0) {
 p0 = p0 | 0;
 nullFunc_vi(907); //@line 32929
}
function b222(p0) {
 p0 = p0 | 0;
 nullFunc_vi(906); //@line 32926
}
function b221(p0) {
 p0 = p0 | 0;
 nullFunc_vi(905); //@line 32923
}
function b220(p0) {
 p0 = p0 | 0;
 nullFunc_vi(904); //@line 32920
}
function b219(p0) {
 p0 = p0 | 0;
 nullFunc_vi(903); //@line 32917
}
function b218(p0) {
 p0 = p0 | 0;
 nullFunc_vi(902); //@line 32914
}
function b217(p0) {
 p0 = p0 | 0;
 nullFunc_vi(901); //@line 32911
}
function b216(p0) {
 p0 = p0 | 0;
 nullFunc_vi(900); //@line 32908
}
function b215(p0) {
 p0 = p0 | 0;
 nullFunc_vi(899); //@line 32905
}
function b214(p0) {
 p0 = p0 | 0;
 nullFunc_vi(898); //@line 32902
}
function b213(p0) {
 p0 = p0 | 0;
 nullFunc_vi(897); //@line 32899
}
function b212(p0) {
 p0 = p0 | 0;
 nullFunc_vi(896); //@line 32896
}
function b211(p0) {
 p0 = p0 | 0;
 nullFunc_vi(895); //@line 32893
}
function b210(p0) {
 p0 = p0 | 0;
 nullFunc_vi(894); //@line 32890
}
function b209(p0) {
 p0 = p0 | 0;
 nullFunc_vi(893); //@line 32887
}
function b208(p0) {
 p0 = p0 | 0;
 nullFunc_vi(892); //@line 32884
}
function b207(p0) {
 p0 = p0 | 0;
 nullFunc_vi(891); //@line 32881
}
function b206(p0) {
 p0 = p0 | 0;
 nullFunc_vi(890); //@line 32878
}
function b205(p0) {
 p0 = p0 | 0;
 nullFunc_vi(889); //@line 32875
}
function b204(p0) {
 p0 = p0 | 0;
 nullFunc_vi(888); //@line 32872
}
function b203(p0) {
 p0 = p0 | 0;
 nullFunc_vi(887); //@line 32869
}
function b202(p0) {
 p0 = p0 | 0;
 nullFunc_vi(886); //@line 32866
}
function b201(p0) {
 p0 = p0 | 0;
 nullFunc_vi(885); //@line 32863
}
function b200(p0) {
 p0 = p0 | 0;
 nullFunc_vi(884); //@line 32860
}
function b199(p0) {
 p0 = p0 | 0;
 nullFunc_vi(883); //@line 32857
}
function b198(p0) {
 p0 = p0 | 0;
 nullFunc_vi(882); //@line 32854
}
function b197(p0) {
 p0 = p0 | 0;
 nullFunc_vi(881); //@line 32851
}
function b196(p0) {
 p0 = p0 | 0;
 nullFunc_vi(880); //@line 32848
}
function b195(p0) {
 p0 = p0 | 0;
 nullFunc_vi(879); //@line 32845
}
function b194(p0) {
 p0 = p0 | 0;
 nullFunc_vi(878); //@line 32842
}
function b193(p0) {
 p0 = p0 | 0;
 nullFunc_vi(877); //@line 32839
}
function b192(p0) {
 p0 = p0 | 0;
 nullFunc_vi(876); //@line 32836
}
function b191(p0) {
 p0 = p0 | 0;
 nullFunc_vi(875); //@line 32833
}
function b190(p0) {
 p0 = p0 | 0;
 nullFunc_vi(874); //@line 32830
}
function b189(p0) {
 p0 = p0 | 0;
 nullFunc_vi(873); //@line 32827
}
function b188(p0) {
 p0 = p0 | 0;
 nullFunc_vi(872); //@line 32824
}
function b187(p0) {
 p0 = p0 | 0;
 nullFunc_vi(871); //@line 32821
}
function b186(p0) {
 p0 = p0 | 0;
 nullFunc_vi(870); //@line 32818
}
function b185(p0) {
 p0 = p0 | 0;
 nullFunc_vi(869); //@line 32815
}
function b184(p0) {
 p0 = p0 | 0;
 nullFunc_vi(868); //@line 32812
}
function b183(p0) {
 p0 = p0 | 0;
 nullFunc_vi(867); //@line 32809
}
function b182(p0) {
 p0 = p0 | 0;
 nullFunc_vi(866); //@line 32806
}
function b181(p0) {
 p0 = p0 | 0;
 nullFunc_vi(865); //@line 32803
}
function b180(p0) {
 p0 = p0 | 0;
 nullFunc_vi(864); //@line 32800
}
function b179(p0) {
 p0 = p0 | 0;
 nullFunc_vi(863); //@line 32797
}
function b178(p0) {
 p0 = p0 | 0;
 nullFunc_vi(862); //@line 32794
}
function b177(p0) {
 p0 = p0 | 0;
 nullFunc_vi(861); //@line 32791
}
function b176(p0) {
 p0 = p0 | 0;
 nullFunc_vi(860); //@line 32788
}
function b175(p0) {
 p0 = p0 | 0;
 nullFunc_vi(859); //@line 32785
}
function b174(p0) {
 p0 = p0 | 0;
 nullFunc_vi(858); //@line 32782
}
function b173(p0) {
 p0 = p0 | 0;
 nullFunc_vi(857); //@line 32779
}
function b172(p0) {
 p0 = p0 | 0;
 nullFunc_vi(856); //@line 32776
}
function b171(p0) {
 p0 = p0 | 0;
 nullFunc_vi(855); //@line 32773
}
function b170(p0) {
 p0 = p0 | 0;
 nullFunc_vi(854); //@line 32770
}
function b169(p0) {
 p0 = p0 | 0;
 nullFunc_vi(853); //@line 32767
}
function b168(p0) {
 p0 = p0 | 0;
 nullFunc_vi(852); //@line 32764
}
function b167(p0) {
 p0 = p0 | 0;
 nullFunc_vi(851); //@line 32761
}
function b166(p0) {
 p0 = p0 | 0;
 nullFunc_vi(850); //@line 32758
}
function b165(p0) {
 p0 = p0 | 0;
 nullFunc_vi(849); //@line 32755
}
function b164(p0) {
 p0 = p0 | 0;
 nullFunc_vi(848); //@line 32752
}
function b163(p0) {
 p0 = p0 | 0;
 nullFunc_vi(847); //@line 32749
}
function b162(p0) {
 p0 = p0 | 0;
 nullFunc_vi(846); //@line 32746
}
function b161(p0) {
 p0 = p0 | 0;
 nullFunc_vi(845); //@line 32743
}
function b160(p0) {
 p0 = p0 | 0;
 nullFunc_vi(844); //@line 32740
}
function b159(p0) {
 p0 = p0 | 0;
 nullFunc_vi(843); //@line 32737
}
function b158(p0) {
 p0 = p0 | 0;
 nullFunc_vi(842); //@line 32734
}
function b157(p0) {
 p0 = p0 | 0;
 nullFunc_vi(841); //@line 32731
}
function b156(p0) {
 p0 = p0 | 0;
 nullFunc_vi(840); //@line 32728
}
function b155(p0) {
 p0 = p0 | 0;
 nullFunc_vi(839); //@line 32725
}
function b154(p0) {
 p0 = p0 | 0;
 nullFunc_vi(838); //@line 32722
}
function b153(p0) {
 p0 = p0 | 0;
 nullFunc_vi(837); //@line 32719
}
function b152(p0) {
 p0 = p0 | 0;
 nullFunc_vi(836); //@line 32716
}
function b151(p0) {
 p0 = p0 | 0;
 nullFunc_vi(835); //@line 32713
}
function b150(p0) {
 p0 = p0 | 0;
 nullFunc_vi(834); //@line 32710
}
function b149(p0) {
 p0 = p0 | 0;
 nullFunc_vi(833); //@line 32707
}
function b148(p0) {
 p0 = p0 | 0;
 nullFunc_vi(832); //@line 32704
}
function b147(p0) {
 p0 = p0 | 0;
 nullFunc_vi(831); //@line 32701
}
function b146(p0) {
 p0 = p0 | 0;
 nullFunc_vi(830); //@line 32698
}
function b145(p0) {
 p0 = p0 | 0;
 nullFunc_vi(829); //@line 32695
}
function b144(p0) {
 p0 = p0 | 0;
 nullFunc_vi(828); //@line 32692
}
function b143(p0) {
 p0 = p0 | 0;
 nullFunc_vi(827); //@line 32689
}
function b142(p0) {
 p0 = p0 | 0;
 nullFunc_vi(826); //@line 32686
}
function b141(p0) {
 p0 = p0 | 0;
 nullFunc_vi(825); //@line 32683
}
function b140(p0) {
 p0 = p0 | 0;
 nullFunc_vi(824); //@line 32680
}
function b139(p0) {
 p0 = p0 | 0;
 nullFunc_vi(823); //@line 32677
}
function b138(p0) {
 p0 = p0 | 0;
 nullFunc_vi(822); //@line 32674
}
function b137(p0) {
 p0 = p0 | 0;
 nullFunc_vi(821); //@line 32671
}
function b136(p0) {
 p0 = p0 | 0;
 nullFunc_vi(820); //@line 32668
}
function b135(p0) {
 p0 = p0 | 0;
 nullFunc_vi(819); //@line 32665
}
function b134(p0) {
 p0 = p0 | 0;
 nullFunc_vi(818); //@line 32662
}
function b133(p0) {
 p0 = p0 | 0;
 nullFunc_vi(817); //@line 32659
}
function b132(p0) {
 p0 = p0 | 0;
 nullFunc_vi(816); //@line 32656
}
function b131(p0) {
 p0 = p0 | 0;
 nullFunc_vi(815); //@line 32653
}
function b130(p0) {
 p0 = p0 | 0;
 nullFunc_vi(814); //@line 32650
}
function b129(p0) {
 p0 = p0 | 0;
 nullFunc_vi(813); //@line 32647
}
function b128(p0) {
 p0 = p0 | 0;
 nullFunc_vi(812); //@line 32644
}
function b127(p0) {
 p0 = p0 | 0;
 nullFunc_vi(811); //@line 32641
}
function b126(p0) {
 p0 = p0 | 0;
 nullFunc_vi(810); //@line 32638
}
function b125(p0) {
 p0 = p0 | 0;
 nullFunc_vi(809); //@line 32635
}
function b124(p0) {
 p0 = p0 | 0;
 nullFunc_vi(808); //@line 32632
}
function b123(p0) {
 p0 = p0 | 0;
 nullFunc_vi(807); //@line 32629
}
function b122(p0) {
 p0 = p0 | 0;
 nullFunc_vi(806); //@line 32626
}
function b121(p0) {
 p0 = p0 | 0;
 nullFunc_vi(805); //@line 32623
}
function b120(p0) {
 p0 = p0 | 0;
 nullFunc_vi(804); //@line 32620
}
function b119(p0) {
 p0 = p0 | 0;
 nullFunc_vi(803); //@line 32617
}
function b118(p0) {
 p0 = p0 | 0;
 nullFunc_vi(802); //@line 32614
}
function b117(p0) {
 p0 = p0 | 0;
 nullFunc_vi(801); //@line 32611
}
function b116(p0) {
 p0 = p0 | 0;
 nullFunc_vi(800); //@line 32608
}
function b115(p0) {
 p0 = p0 | 0;
 nullFunc_vi(799); //@line 32605
}
function b114(p0) {
 p0 = p0 | 0;
 nullFunc_vi(798); //@line 32602
}
function b113(p0) {
 p0 = p0 | 0;
 nullFunc_vi(797); //@line 32599
}
function b112(p0) {
 p0 = p0 | 0;
 nullFunc_vi(796); //@line 32596
}
function b111(p0) {
 p0 = p0 | 0;
 nullFunc_vi(795); //@line 32593
}
function b110(p0) {
 p0 = p0 | 0;
 nullFunc_vi(794); //@line 32590
}
function b109(p0) {
 p0 = p0 | 0;
 nullFunc_vi(793); //@line 32587
}
function b108(p0) {
 p0 = p0 | 0;
 nullFunc_vi(792); //@line 32584
}
function b107(p0) {
 p0 = p0 | 0;
 nullFunc_vi(791); //@line 32581
}
function b106(p0) {
 p0 = p0 | 0;
 nullFunc_vi(790); //@line 32578
}
function b105(p0) {
 p0 = p0 | 0;
 nullFunc_vi(789); //@line 32575
}
function b104(p0) {
 p0 = p0 | 0;
 nullFunc_vi(788); //@line 32572
}
function b103(p0) {
 p0 = p0 | 0;
 nullFunc_vi(787); //@line 32569
}
function b102(p0) {
 p0 = p0 | 0;
 nullFunc_vi(786); //@line 32566
}
function b101(p0) {
 p0 = p0 | 0;
 nullFunc_vi(785); //@line 32563
}
function b100(p0) {
 p0 = p0 | 0;
 nullFunc_vi(784); //@line 32560
}
function _mbed_error_printf__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN18LoRaWANTimeHandlerD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN18LoRaMacChannelPlanD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function b99(p0) {
 p0 = p0 | 0;
 nullFunc_vi(783); //@line 32557
}
function b98(p0) {
 p0 = p0 | 0;
 nullFunc_vi(782); //@line 32554
}
function b97(p0) {
 p0 = p0 | 0;
 nullFunc_vi(781); //@line 32551
}
function b96(p0) {
 p0 = p0 | 0;
 nullFunc_vi(780); //@line 32548
}
function b95(p0) {
 p0 = p0 | 0;
 nullFunc_vi(779); //@line 32545
}
function b94(p0) {
 p0 = p0 | 0;
 nullFunc_vi(778); //@line 32542
}
function b93(p0) {
 p0 = p0 | 0;
 nullFunc_vi(777); //@line 32539
}
function b92(p0) {
 p0 = p0 | 0;
 nullFunc_vi(776); //@line 32536
}
function b91(p0) {
 p0 = p0 | 0;
 nullFunc_vi(775); //@line 32533
}
function b90(p0) {
 p0 = p0 | 0;
 nullFunc_vi(774); //@line 32530
}
function b89(p0) {
 p0 = p0 | 0;
 nullFunc_vi(773); //@line 32527
}
function b88(p0) {
 p0 = p0 | 0;
 nullFunc_vi(772); //@line 32524
}
function b87(p0) {
 p0 = p0 | 0;
 nullFunc_vi(771); //@line 32521
}
function b86(p0) {
 p0 = p0 | 0;
 nullFunc_vi(770); //@line 32518
}
function b85(p0) {
 p0 = p0 | 0;
 nullFunc_vi(769); //@line 32515
}
function b84(p0) {
 p0 = p0 | 0;
 nullFunc_vi(768); //@line 32512
}
function b83(p0) {
 p0 = p0 | 0;
 nullFunc_vi(767); //@line 32509
}
function b82(p0) {
 p0 = p0 | 0;
 nullFunc_vi(766); //@line 32506
}
function b81(p0) {
 p0 = p0 | 0;
 nullFunc_vi(765); //@line 32503
}
function b80(p0) {
 p0 = p0 | 0;
 nullFunc_vi(764); //@line 32500
}
function b79(p0) {
 p0 = p0 | 0;
 nullFunc_vi(763); //@line 32497
}
function b78(p0) {
 p0 = p0 | 0;
 nullFunc_vi(762); //@line 32494
}
function b77(p0) {
 p0 = p0 | 0;
 nullFunc_vi(761); //@line 32491
}
function b76(p0) {
 p0 = p0 | 0;
 nullFunc_vi(760); //@line 32488
}
function b75(p0) {
 p0 = p0 | 0;
 nullFunc_vi(759); //@line 32485
}
function b74(p0) {
 p0 = p0 | 0;
 nullFunc_vi(758); //@line 32482
}
function b73(p0) {
 p0 = p0 | 0;
 nullFunc_vi(757); //@line 32479
}
function b72(p0) {
 p0 = p0 | 0;
 nullFunc_vi(756); //@line 32476
}
function b71(p0) {
 p0 = p0 | 0;
 nullFunc_vi(755); //@line 32473
}
function b70(p0) {
 p0 = p0 | 0;
 nullFunc_vi(754); //@line 32470
}
function b69(p0) {
 p0 = p0 | 0;
 nullFunc_vi(753); //@line 32467
}
function b68(p0) {
 p0 = p0 | 0;
 nullFunc_vi(752); //@line 32464
}
function b67(p0) {
 p0 = p0 | 0;
 nullFunc_vi(751); //@line 32461
}
function b66(p0) {
 p0 = p0 | 0;
 nullFunc_vi(750); //@line 32458
}
function b65(p0) {
 p0 = p0 | 0;
 nullFunc_vi(749); //@line 32455
}
function b64(p0) {
 p0 = p0 | 0;
 nullFunc_vi(748); //@line 32452
}
function _mbedtls_gcm_free__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _mbedtls_ccm_free__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _mbedtls_aes_free__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _dummy($0) {
 $0 = $0 | 0;
 return $0 | 0; //@line 11560
}
function ___lockfile($0) {
 $0 = $0 | 0;
 return 0; //@line 11877
}
function b339(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1023); //@line 10
}
function b63(p0) {
 p0 = p0 | 0;
 nullFunc_vi(0); //@line 32449
}
function b338(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1022); //@line 7
}
function b337(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1021); //@line 4
}
function b336(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1020); //@line 1
}
function _initialize__async_cb_417($0) {
 $0 = $0 | 0;
 return;
}
function _us_ticker_set_interrupt($0) {
 $0 = $0 | 0;
 return;
}
function _invoke_ticker__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___clang_call_terminate__async_cb($0) {
 $0 = $0 | 0;
}
function _us_ticker_get_info() {
 return 10256; //@line 7316
}
function _serial_putc__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _mbed_tracef__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _get_us_ticker_data() {
 return 10200; //@line 6468
}
function ___errno_location() {
 return 24436; //@line 11554
}
function __ZSt9terminatev__async_cb_11($0) {
 $0 = $0 | 0;
}
function __ZNSt9type_infoD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function getTempRet0() {
 return tempRet0 | 0; //@line 42
}
function _wait_ms__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function stackSave() {
 return STACKTOP | 0; //@line 12
}
function _pthread_self() {
 return 10548; //@line 11607
}
function _core_util_critical_section_enter() {
 return;
}
function __ZSt9terminatev__async_cb($0) {
 $0 = $0 | 0;
}
function _core_util_critical_section_exit() {
 return;
}
function _us_ticker_read() {
 return 0; //@line 7107
}
function ___unlockfile($0) {
 $0 = $0 | 0;
 return;
}
function _us_ticker_disable_interrupt() {
 return;
}
function _us_ticker_clear_interrupt() {
 return;
}
function setAsync() {
 ___async = 1; //@line 26
}
function b61() {
 nullFunc_v(15); //@line 32446
}
function b60() {
 nullFunc_v(14); //@line 32443
}
function b59() {
 nullFunc_v(13); //@line 32440
}
function b58() {
 nullFunc_v(12); //@line 32437
}
function b57() {
 nullFunc_v(11); //@line 32434
}
function b56() {
 nullFunc_v(10); //@line 32431
}
function _us_ticker_fire_interrupt() {
 return;
}
function b55() {
 nullFunc_v(9); //@line 32428
}
function b54() {
 nullFunc_v(0); //@line 32422
}
function _us_ticker_init() {
 return;
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_i = [b1,_ccm_ctx_alloc,_gcm_ctx_alloc,_aes_ctx_alloc,_us_ticker_read,_us_ticker_get_info,b2,b3];
var FUNCTION_TABLE_ii = [b5,__ZN16SX1276_LoRaRadio6randomEv,__ZN16SX1276_LoRaRadio10get_statusEv,__ZN16LoRaWANInterface7connectEv,__ZN16LoRaWANInterface10disconnectEv,__ZN16LoRaWANInterface22add_link_check_requestEv,__ZN16LoRaWANInterface24enable_adaptive_datarateEv,__ZN16LoRaWANInterface25disable_adaptive_datarateEv,__ZN16LoRaWANInterface19remove_channel_planEv,__ZN16LoRaWANInterface14cancel_sendingEv,___stdio_close,__ZN6events5EventIFvvEE10event_postIPS1_EEiPNS2_5eventE,b6,b7,b8,b9];
var FUNCTION_TABLE_iii = [b11,__ZN16SX1276_LoRaRadio18check_rf_frequencyEj,__ZN16LoRaWANInterface10initializeEPN6events10EventQueueE,__ZN16LoRaWANInterface7connectERK15lorawan_connect,__ZN16LoRaWANInterface12set_datarateEh,__ZN16LoRaWANInterface25set_confirmed_msg_retriesEh,__ZN16LoRaWANInterface16set_channel_planERK16lora_channelplan,__ZN16LoRaWANInterface16get_channel_planER16lora_channelplan,__ZN16LoRaWANInterface14remove_channelEh,__ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t,__ZN16LoRaWANInterface16set_device_classE14device_class_t,__ZN16LoRaWANInterface15get_tx_metadataER19lorawan_tx_metadata,__ZN16LoRaWANInterface15get_rx_metadataER19lorawan_rx_metadata,__ZN16LoRaWANInterface20get_backoff_metadataERi,__ZN7LoRaPHY9rx_configEP18rx_config_params_t,__ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s,__ZN7LoRaPHY16get_alternate_DREh,__ZN7LoRaPHY14remove_channelEh,b12,b13,b14,b15,b16,b17,b18,b19,b20,b21,b22
,b23,b24,b25];
var FUNCTION_TABLE_iiii = [b27,__ZN16SX1276_LoRaRadio11time_on_airE10modem_typeh,__ZN7LoRaPHY19request_new_channelEaP16channel_params_t,__ZN7LoRaPHY25accept_tx_param_setup_reqEhh,__ZN7LoRaPHY18dl_channel_requestEhj,__ZN7LoRaPHY11add_channelEPK16channel_params_th,__ZN7LoRaPHY15apply_DR_offsetEaa,__ZNK7LoRaPHY25verify_frequency_for_bandEjh,_ccm_aes_setkey_wrap,_gcm_aes_setkey_wrap,_aes_setkey_enc_wrap,_aes_setkey_dec_wrap,_memset__wrapper,___stdio_write,___stdio_seek,___stdout_write,_sn_write,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,_get_pkcs_padding,b28,b29,b30,b31,b32,b33,b34,b35,b36,b37
,b38,b39,b40];
var FUNCTION_TABLE_iiiii = [b42,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj,_aes_crypt_ecb_wrap,b43];
var FUNCTION_TABLE_iiiiii = [b45,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj,__ZN16LoRaWANInterface4sendEhPKhti,__ZN16LoRaWANInterface7receiveEhPhti,__ZN16LoRaWANInterface7receiveEPhtRhRi,__ZN7LoRaPHY16set_next_channelEP26channel_selection_params_sPhPjS3_,b46,b47];
var FUNCTION_TABLE_iiiiiii = [b49,__ZN7LoRaPHY16link_ADR_requestEP16adr_req_params_tPaS2_PhS3_,_aes_crypt_cbc_wrap,b50];
var FUNCTION_TABLE_iiiiiiii = [b52,_aes_crypt_ctr_wrap];
var FUNCTION_TABLE_v = [b54,___cxa_pure_virtual__wrapper,_us_ticker_init,_us_ticker_disable_interrupt,_us_ticker_clear_interrupt,_us_ticker_fire_interrupt,__ZL25default_terminate_handlerv,__ZL12send_messagev,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b55,b56,b57,b58,b59,b60,b61];
var FUNCTION_TABLE_vi = [b63,__ZN16SX1276_LoRaRadio11radio_resetEv,__ZN16SX1276_LoRaRadio5sleepEv,__ZN16SX1276_LoRaRadio7standbyEv,__ZN16SX1276_LoRaRadio9start_cadEv,__ZN16SX1276_LoRaRadio4lockEv,__ZN16SX1276_LoRaRadio6unlockEv,__ZN16SX1276_LoRaRadioD2Ev,__ZN16SX1276_LoRaRadioD0Ev,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPv,__ZN4mbed11InterruptInD2Ev,__ZN4mbed11InterruptInD0Ev,__ZN4mbed7TimeoutD2Ev,__ZN4mbed7TimeoutD0Ev,__ZN4mbed7Timeout7handlerEv,__ZN4mbed10TimerEventD2Ev,__ZN4mbed10TimerEventD0Ev,_mbed_trace_default_print,__ZN16LoRaWANInterface25remove_link_check_requestEv,__ZN16LoRaWANInterfaceD2Ev,__ZN16LoRaWANInterfaceD0Ev,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPv,__ZN4mbed8CallbackIFvPKhtsaEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPv,__ZN4mbed8CallbackIFvbEE13function_dtorINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPv,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPv,__ZN7LoRaPHYD2Ev
,__ZN7LoRaPHYD0Ev,__ZN7LoRaPHY24restore_default_channelsEv,__ZN12LoRaPHYEU868D2Ev,__ZN12LoRaPHYEU868D0Ev,_ccm_ctx_free,_gcm_ctx_free,_aes_ctx_free,_us_ticker_set_interrupt,__ZN4mbed6TickerD2Ev,__ZN4mbed6TickerD0Ev,__ZN4mbed6Ticker7handlerEv,__ZN4mbed8CallbackIFvvEE13function_callIN6events5EventIS1_EEEEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorIN6events5EventIS1_EEEEvPv,__ZN4mbed8CallbackIFv11lora_eventsEE13function_dtorIPS2_EEvPv,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,__ZN16SX1276_LoRaRadio10init_radioEP12radio_events__async_cb,__ZN16SX1276_LoRaRadio4sendEPhh__async_cb,__ZN16SX1276_LoRaRadio11rx_done_irqEv,__ZN16SX1276_LoRaRadio7receiveEj__async_cb,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_35,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_36,__ZN16SX1276_LoRaRadio15timeout_irq_isrEv,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_37,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_38,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_39
,__ZN16SX1276_LoRaRadio6randomEv__async_cb,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_149,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_145,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_146,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_148,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_147,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_144,__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb,__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_227,__ZN16SX1276_LoRaRadioD2Ev__async_cb,__ZN16SX1276_LoRaRadioD2Ev__async_cb_268,__ZN16SX1276_LoRaRadioD2Ev__async_cb_262,__ZN16SX1276_LoRaRadioD2Ev__async_cb_267,__ZN16SX1276_LoRaRadioD2Ev__async_cb_263,__ZN16SX1276_LoRaRadioD2Ev__async_cb_266,__ZN16SX1276_LoRaRadioD2Ev__async_cb_264,__ZN16SX1276_LoRaRadioD2Ev__async_cb_265,__ZN16SX1276_LoRaRadioD2Ev__async_cb_274,__ZN16SX1276_LoRaRadioD2Ev__async_cb_273,__ZN16SX1276_LoRaRadioD2Ev__async_cb_272,__ZN16SX1276_LoRaRadioD2Ev__async_cb_271,__ZN16SX1276_LoRaRadioD2Ev__async_cb_270,__ZN16SX1276_LoRaRadioD2Ev__async_cb_269,__ZN16SX1276_LoRaRadioD0Ev__async_cb,__ZN16SX1276_LoRaRadio11rx_done_irqEv__async_cb,__ZN16SX1276_LoRaRadio15timeout_irq_isrEv__async_cb,__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb,__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_364,__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_365
,__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_366,__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_367,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv__async_cb,__ZN16SX1276_LoRaRadio11tx_done_irqEv,__ZN16SX1276_LoRaRadio8transmitEj__async_cb,__ZN16SX1276_LoRaRadio8transmitEj__async_cb_121,__ZN16SX1276_LoRaRadio8transmitEj__async_cb_122,__ZN16SX1276_LoRaRadio11tx_done_irqEv__async_cb,__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_59,__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_58,__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_57,__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb,__ZN4mbed11InterruptInD2Ev__async_cb,__ZN4mbed11InterruptInD2Ev__async_cb_10,__ZN4mbed11InterruptInD0Ev__async_cb,__ZN4mbed11InterruptInD0Ev__async_cb_1,__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb,__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb_213,__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb,__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_204,__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_205,__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_206,__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_207,__ZN4mbed7TimeoutD2Ev__async_cb,__ZN4mbed7TimeoutD2Ev__async_cb_347,__ZN4mbed7TimeoutD0Ev__async_cb,__ZN4mbed7TimeoutD0Ev__async_cb_349,__ZN4mbed7Timeout7handlerEv__async_cb,__ZN4mbed7Timeout7handlerEv__async_cb_356,__ZN4mbed7Timeout7handlerEv__async_cb_354
,__ZN4mbed7Timeout7handlerEv__async_cb_355,__ZN4mbed5TimerC2Ev__async_cb,__ZN4mbed5Timer5startEv__async_cb,__ZN4mbed5Timer7read_msEv__async_cb,__ZN4mbed10TimerEventD2Ev__async_cb,__ZN4mbed10TimerEvent3irqEj,__ZN4mbed10TimerEventC2Ev__async_cb,__ZN4mbed10TimerEvent3irqEj__async_cb,__ZN6events10EventQueue8dispatchEi__async_cb,__ZN6events10EventQueue6cancelEi__async_cb,_equeue_alloc__async_cb,_equeue_dealloc__async_cb,_equeue_post__async_cb,_equeue_enqueue__async_cb,_equeue_cancel__async_cb,_equeue_dispatch__async_cb,_equeue_dispatch__async_cb_14,_equeue_dispatch__async_cb_12,_equeue_dispatch__async_cb_13,_equeue_dispatch__async_cb_15,_mbed_trace_default_print__async_cb,_mbed_tracef__async_cb,_mbed_vtracef__async_cb,_mbed_vtracef__async_cb_170,_mbed_vtracef__async_cb_160,_mbed_vtracef__async_cb_161,_mbed_vtracef__async_cb_162,_mbed_vtracef__async_cb_169,_mbed_vtracef__async_cb_163,_mbed_vtracef__async_cb_168
,_mbed_vtracef__async_cb_164,_mbed_vtracef__async_cb_165,_mbed_vtracef__async_cb_166,_mbed_vtracef__async_cb_167,__ZN16LoRaWANInterface10initializeEPN6events10EventQueueE__async_cb,__ZN16LoRaWANInterface7connectEv__async_cb,__ZN16LoRaWANInterface7connectERK15lorawan_connect__async_cb,__ZN16LoRaWANInterface10disconnectEv__async_cb,__ZN16LoRaWANInterface16set_channel_planERK16lora_channelplan__async_cb,__ZN16LoRaWANInterface19remove_channel_planEv__async_cb,__ZN16LoRaWANInterface14remove_channelEh__async_cb,__ZN16LoRaWANInterface4sendEhPKhti__async_cb,__ZN16LoRaWANInterface7receiveEhPhti__async_cb,__ZN16LoRaWANInterface7receiveEPhtRhRi__async_cb,__ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t__async_cb,__ZN16LoRaWANInterface16set_device_classE14device_class_t__async_cb,__ZN16LoRaWANInterface14cancel_sendingEv__async_cb,__ZN16LoRaWANInterfaceD2Ev__async_cb,__ZN16LoRaWANInterfaceD0Ev__async_cb,__ZN12LoRaWANStackD2Ev__async_cb,__ZN12LoRaWANStackD2Ev__async_cb_258,__ZN12LoRaWANStackD2Ev__async_cb_259,__ZN12LoRaWANStackD2Ev__async_cb_261,__ZN12LoRaWANStackD2Ev__async_cb_260,__ZN12radio_eventsD2Ev__async_cb,__ZN12radio_eventsD2Ev__async_cb_289,__ZN12radio_eventsD2Ev__async_cb_290,__ZN12radio_eventsD2Ev__async_cb_291,__ZN12radio_eventsD2Ev__async_cb_292,__ZN12radio_eventsD2Ev__async_cb_293
,__ZN12radio_eventsD2Ev__async_cb_294,__ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb,__ZN12LoRaWANStack20tx_interrupt_handlerEv,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_239,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_240,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_241,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_242,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_243,__ZN12LoRaWANStack26rx_error_interrupt_handlerEv,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_244,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_245,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_246,__ZN12LoRaWANStack28tx_timeout_interrupt_handlerEv,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_247,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_248,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_249,__ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_250,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_251,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_252,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_253,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_254,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_255,__ZN12LoRaWANStack20process_transmissionEv,__ZN12LoRaWANStack20tx_interrupt_handlerEv__async_cb,__ZN12LoRaWANStack20tx_interrupt_handlerEv__async_cb_339,__ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa__async_cb_344,__ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa__async_cb,__ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa__async_cb_345
,__ZN12LoRaWANStack26rx_error_interrupt_handlerEv__async_cb_319,__ZN12LoRaWANStack26rx_error_interrupt_handlerEv__async_cb,__ZN12LoRaWANStack26rx_error_interrupt_handlerEv__async_cb_320,__ZN12LoRaWANStack28process_transmission_timeoutEv,__ZN12LoRaWANStack28tx_timeout_interrupt_handlerEv__async_cb,__ZN12LoRaWANStack28tx_timeout_interrupt_handlerEv__async_cb_329,__ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv__async_cb_171,__ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv__async_cb,__ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv__async_cb_172,__ZN12LoRaWANStack25process_reception_timeoutEb__async_cb,__ZN12LoRaWANStack25process_reception_timeoutEb__async_cb_192,__ZN12LoRaWANStack25process_reception_timeoutEb__async_cb_191,__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb,__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_138,__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_143,__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_139,__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv,__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv,__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_142,__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_140,__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_141,__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv__async_cb,__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv__async_cb_216,__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv__async_cb,__ZN4mbed8CallbackIFvbEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPKvb__async_cb,__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_94,__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_93,__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb,__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_95,__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_92
,__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_96,__ZN12LoRaWANStack26process_status_check_stateEv__async_cb_7,__ZN12LoRaWANStack26process_status_check_stateEv__async_cb_6,__ZN12LoRaWANStack26process_status_check_stateEv__async_cb,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_53,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_46,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_56,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_47,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_52,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_48,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_55,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_49,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_51,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_50,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_54,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_23,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_16,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_26,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_17,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_22,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_18,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_25,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_19,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_21,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_20,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_24,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_115
,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_120,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_116,__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv,__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_119,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_117,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_118,__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb,__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb_114,__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb,__ZN12LoRaWANStack28process_transmission_timeoutEv__async_cb,__ZN12LoRaWANStack28process_transmission_timeoutEv__async_cb_368,__ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb_359,__ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb,__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv,__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv,__ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb_358,__ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb_357,__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv__async_cb,__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb_348,__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb,__ZN4mbed8CallbackIFvPKhtsaEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPKvS2_tsa__async_cb,__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb,__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_296,__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_300,__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_299,__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_298,__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_297,__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_295,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb
,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_302,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_307,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_303,__ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv,__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_306,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_304,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_305,__ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv__async_cb,__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv__async_cb_340,__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv__async_cb,__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb,__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_334,__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_330,__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_338,__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_333,__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_331,__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_335,__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_332,__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_337,__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_336,__ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb,__ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb_322,__ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb_321,__ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb_323,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_313,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_318,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_314,__ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv
,__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_317,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_315,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_316,__ZN12LoRaWANStack23process_connected_stateEv__async_cb,__ZN12LoRaWANStack23process_connected_stateEv__async_cb_199,__ZN12LoRaWANStack23process_connected_stateEv__async_cb_198,__ZN12LoRaWANStack23process_connected_stateEv__async_cb_200,__ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb,__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb_158,__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPKv__async_cb,__ZN12LoRaWANStack20process_transmissionEv__async_cb,__ZN12LoRaWANStack20process_transmissionEv__async_cb_214,__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb,__ZN12LoRaWANStack24process_connecting_stateER14lorawan_status__async_cb_91,__ZN12LoRaWANStack24process_connecting_stateER14lorawan_status__async_cb,__ZN12LoRaWANStack24process_connecting_stateER14lorawan_status__async_cb_90,__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_62,__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_61,__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb,__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_63,__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_60,__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_64,__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb,__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_27,__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_28,__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_29,__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_30,__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_31
,__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_32,__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_34,__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_33,__ZN12LoRaWANStack7connectEv__async_cb,__ZN12LoRaWANStack7connectERK15lorawan_connect__async_cb,__ZN12LoRaWANStack12add_channelsERK16lora_channelplan__async_cb,__ZN12LoRaWANStack16remove_a_channelEh__async_cb,__ZN12LoRaWANStack17drop_channel_listEv__async_cb,__ZN12LoRaWANStack12stop_sendingEv__async_cb,__ZN12LoRaWANStack9handle_txEhPKhthbb__async_cb_351,__ZN12LoRaWANStack9handle_txEhPKhthbb__async_cb,__ZN12LoRaWANStack9handle_rxEPhtRhRib__async_cb,__ZN12LoRaWANStack8shutdownEv__async_cb,__ZN12LoRaWANStack29handle_ack_expiry_for_class_cEv,__ZN12LoRaWANStack16set_device_classERK14device_class_t__async_cb_327,__ZN12LoRaWANStack16set_device_classERK14device_class_t__async_cb,__ZN12LoRaWANStack29handle_ack_expiry_for_class_cEv__async_cb,__ZN7LoRaMacD2Ev__async_cb,__ZN7LoRaMacD2Ev__async_cb_284,__ZN7LoRaMacD2Ev__async_cb_285,__ZN7LoRaMacD2Ev__async_cb_286,__ZN7LoRaMacD2Ev__async_cb_287,__ZN7LoRaMacD2Ev__async_cb_288,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_196,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_195,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_194,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_193,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb,__ZN7LoRaMac15open_rx2_windowEv__async_cb_102,__ZN7LoRaMac15open_rx2_windowEv__async_cb_101
,__ZN7LoRaMac15open_rx2_windowEv__async_cb,__ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb,__ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb_107,__ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb_109,__ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb_106,__ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb_108,__ZN7LoRaMac23message_integrity_checkEPKhtPhjPjS1___async_cb,__ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa__async_cb_133,__ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa__async_cb_135,__ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa__async_cb_134,__ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa__async_cb,__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_2,__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_5,__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb,__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_3,__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_4,__ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb,__ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb_43,__ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb_42,__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_69,__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_68,__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_66,__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_67,__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_65,__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb,__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_402,__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_401,__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_400,__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb,__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_399
,__ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb_376,__ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb_377,__ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb,__ZN7LoRaMac24continue_joining_processEv__async_cb,__ZN7LoRaMac21handle_retransmissionEv__async_cb,__ZN7LoRaMac21handle_retransmissionEv__async_cb_429,__ZN7LoRaMac21handle_retransmissionEv__async_cb_428,__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_426,__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_424,__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_425,__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb,__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_423,__ZN7LoRaMac11schedule_txEv__async_cb,__ZN7LoRaMac11schedule_txEv__async_cb_353,__ZN7LoRaMac11schedule_txEv__async_cb_352,__ZN7LoRaMac23on_backoff_timer_expiryEv__async_cb,__ZN7LoRaMac23on_backoff_timer_expiryEv__async_cb_369,__ZN7LoRaMac15open_rx1_windowEv__async_cb_362,__ZN7LoRaMac15open_rx1_windowEv__async_cb_360,__ZN7LoRaMac15open_rx1_windowEv__async_cb_361,__ZN7LoRaMac15open_rx1_windowEv__async_cb,__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_312,__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb,__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_310,__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_309,__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_308,__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_311,__ZN7LoRaMac13clear_tx_pipeEv__async_cb_328,__ZN7LoRaMac13clear_tx_pipeEv__async_cb,__ZN7LoRaMac18prepare_ongoing_txEhPKhthh__async_cb
,__ZN7LoRaMac24get_max_possible_tx_sizeEh__async_cb,__ZN7LoRaMac15send_ongoing_txEv__async_cb,__ZN7LoRaMac15send_ongoing_txEv__async_cb_221,__ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE__async_cb,__ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE__async_cb_217,__ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE__async_cb_220,__ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE__async_cb_219,__ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE__async_cb_218,__ZN7LoRaMac4joinEb__async_cb,__ZN7LoRaMac4joinEb__async_cb_202,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_187,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_189,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_190,__ZN7LoRaMac23on_backoff_timer_expiryEv,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_186,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb,__ZN7LoRaMac15open_rx1_windowEv,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_185,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_180,__ZN7LoRaMac15open_rx2_windowEv,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_184,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_181,__ZN7LoRaMac26on_ack_timeout_timer_eventEv,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_183,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_182,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_188,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv__async_cb,__ZN7LoRaMac10disconnectEv__async_cb_129,__ZN7LoRaMac10disconnectEv__async_cb_128,__ZN7LoRaMac10disconnectEv__async_cb_127
,__ZN7LoRaMac10disconnectEv__async_cb_126,__ZN7LoRaMac10disconnectEv__async_cb,__ZN7LoRaMac16add_channel_planERK16lora_channelplan__async_cb,__ZN7LoRaMac19remove_channel_planEv__async_cb,__ZN7LoRaMac21remove_single_channelEh__async_cb,__ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan__async_cb,__ZN18LoRaMacChannelPlan11remove_planEv__async_cb,__ZN18LoRaMacChannelPlan11remove_planEv__async_cb_346,__ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb,__ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb_350,__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb,__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_208,__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_209,__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_210,__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_211,__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_212,__ZN14LoRaMacCommand25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb,__ZN14LoRaMacCommand25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb_175,__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_155,__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb,__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_154,__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_153,__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_152,__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_156,__ZN13LoRaMacCrypto15encrypt_payloadEPKhtS1_jjhjPh__async_cb,__ZN13LoRaMacCrypto15decrypt_payloadEPKhtS1_jjhjPh__async_cb,__ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_99,__ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb,__ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_98,__ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_97
,__ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_100,__ZN13LoRaMacCrypto18decrypt_join_frameEPKhtS1_jPh__async_cb,__ZN13LoRaMacCrypto28compute_skeys_for_join_frameEPKhjS1_tPhS2___async_cb,__ZN7LoRaPHY19request_new_channelEaP16channel_params_t__async_cb,__ZN7LoRaPHY19request_new_channelEaP16channel_params_t__async_cb_44,__ZN7LoRaPHY19request_new_channelEaP16channel_params_t__async_cb_45,__ZN7LoRaPHY13apply_cf_listEPKhh__async_cb,__ZN7LoRaPHY13apply_cf_listEPKhh__async_cb_403,__ZN7LoRaPHY13apply_cf_listEPKhh__async_cb_404,__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb,__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_406,__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_407,__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_408,__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_409,__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_410,__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_411,__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_412,__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_413,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_370,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_371,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_372,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_373,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_374,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_375,__ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s__async_cb,__ZN7LoRaPHY18dl_channel_requestEhj__async_cb,__ZN7LoRaPHY18dl_channel_requestEhj__async_cb_342,__ZN7LoRaPHY11add_channelEPK16channel_params_th__async_cb,__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb
,__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_256,__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_257,__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb,__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_173,__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_174,__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb,__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_150,__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_151,__ZN7LoRaPHY25setup_public_network_modeEb__async_cb,__ZN7LoRaPHY25setup_public_network_modeEb__async_cb_136,__ZN7LoRaPHY25setup_public_network_modeEb__async_cb_137,__ZN7LoRaPHY15setup_rx_windowEbj__async_cb,__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_130,__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_131,__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_132,__ZN7LoRaPHY13get_radio_rngEv__async_cb,__ZN7LoRaPHY13get_radio_rngEv__async_cb_123,__ZN7LoRaPHY13get_radio_rngEv__async_cb_124,__ZN7LoRaPHY11handle_sendEPhh__async_cb,__ZN7LoRaPHY11handle_sendEPhh__async_cb_104,__ZN7LoRaPHY11handle_sendEPhh__async_cb_105,__ZN7LoRaPHY12get_next_ADREbRaS0_Rj__async_cb,__ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb,__ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb_231,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_235,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_232,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_234,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_233,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_236
,__ZN18LoRaWANTimeHandler4stopER13timer_event_t__async_cb,_mbedtls_aes_free__async_cb,_mbedtls_aes_setkey_dec__async_cb,_mbedtls_ccm_setkey__async_cb_392,_mbedtls_ccm_setkey__async_cb_391,_mbedtls_ccm_setkey__async_cb,_mbedtls_ccm_free__async_cb_422,_mbedtls_ccm_free__async_cb,_mbedtls_cipher_free__async_cb_41,_mbedtls_cipher_free__async_cb,_mbedtls_cipher_free__async_cb_40,_mbedtls_cipher_setup__async_cb,_mbedtls_cipher_setkey__async_cb,_mbedtls_cipher_setkey__async_cb_103,_mbedtls_cipher_update__async_cb,_mbedtls_cipher_update__async_cb_113,_mbedtls_cipher_update__async_cb_110,_mbedtls_cipher_update__async_cb_111,_mbedtls_cipher_update__async_cb_112,_ccm_aes_setkey_wrap__async_cb,_ccm_ctx_free__async_cb,_gcm_aes_setkey_wrap__async_cb,_gcm_ctx_free__async_cb,_aes_setkey_dec_wrap__async_cb,_aes_ctx_free__async_cb,_mbedtls_cipher_cmac_starts__async_cb_237,_mbedtls_cipher_cmac_starts__async_cb,_mbedtls_cipher_cmac_update__async_cb_229,_mbedtls_cipher_cmac_update__async_cb_228,_mbedtls_cipher_cmac_update__async_cb
,_mbedtls_cipher_cmac_finish__async_cb_281,_mbedtls_cipher_cmac_finish__async_cb_280,_mbedtls_cipher_cmac_finish__async_cb_279,_mbedtls_cipher_cmac_finish__async_cb_283,_mbedtls_cipher_cmac_finish__async_cb_278,_mbedtls_cipher_cmac_finish__async_cb_282,_mbedtls_cipher_cmac_finish__async_cb_277,_mbedtls_cipher_cmac_finish__async_cb_276,_mbedtls_cipher_cmac_finish__async_cb_275,_mbedtls_cipher_cmac_finish__async_cb,_mbedtls_gcm_setkey__async_cb_326,_mbedtls_gcm_setkey__async_cb_325,_mbedtls_gcm_setkey__async_cb_324,_mbedtls_gcm_setkey__async_cb,_mbedtls_gcm_update__async_cb,_mbedtls_gcm_free__async_cb_343,_mbedtls_gcm_free__async_cb,_mbedtls_platform_zeroize__async_cb,_ticker_set_handler__async_cb,_initialize__async_cb,_initialize__async_cb_414,_initialize__async_cb_419,_initialize__async_cb_418,_initialize__async_cb_415,_initialize__async_cb_416,_initialize__async_cb_417,_schedule_interrupt__async_cb,_schedule_interrupt__async_cb_393,_schedule_interrupt__async_cb_394,_schedule_interrupt__async_cb_395
,_schedule_interrupt__async_cb_396,_schedule_interrupt__async_cb_397,_schedule_interrupt__async_cb_398,_ticker_remove_event__async_cb,_ticker_read_us__async_cb_427,_ticker_read_us__async_cb,_mbed_assert_internal__async_cb,_mbed_die__async_cb_89,_mbed_die__async_cb_88,_mbed_die__async_cb_87,_mbed_die__async_cb_86,_mbed_die__async_cb_85,_mbed_die__async_cb_84,_mbed_die__async_cb_83,_mbed_die__async_cb_82,_mbed_die__async_cb_81,_mbed_die__async_cb_80,_mbed_die__async_cb_79,_mbed_die__async_cb_78,_mbed_die__async_cb_77,_mbed_die__async_cb_76,_mbed_die__async_cb_75,_mbed_die__async_cb,_mbed_error_printf__async_cb,_mbed_error_vfprintf__async_cb,_mbed_error_vfprintf__async_cb_9,_mbed_error_vfprintf__async_cb_8,_handle_interrupt_in__async_cb,_serial_putc__async_cb_157,_serial_putc__async_cb
,__ZN4mbed6TickerD2Ev__async_cb,__ZN4mbed6TickerD2Ev__async_cb_301,__ZN4mbed6TickerD0Ev__async_cb,__ZN4mbed6TickerD0Ev__async_cb_230,__ZN4mbed6Ticker7handlerEv__async_cb,_invoke_ticker__async_cb_238,_invoke_ticker__async_cb,_wait_ms__async_cb,__GLOBAL__sub_I_main_cpp__async_cb,_main__async_cb_386,_main__async_cb_385,_main__async_cb_384,_main__async_cb_390,__ZN6events5EventIFvvEE10event_dtorIPS1_EEvPNS2_5eventE,_main__async_cb_389,_main__async_cb,_main__async_cb_378,_main__async_cb_388,__ZL18lora_event_handler11lora_events,_main__async_cb_379,_main__async_cb_380,_main__async_cb_381,_main__async_cb_383,_main__async_cb_382,_main__async_cb_387,__ZL12send_messagev__async_cb,__ZN6events5EventIFvvEE10event_postIPS1_EEiPNS2_5eventE__async_cb_405,__ZN6events10EventQueue13function_dtorINS0_9context00IPFvvEEEEEvPv,__ZN6events10EventQueue13function_callINS0_9context00IPFvvEEEEEvPv,__ZN6events5EventIFvvEE10event_postIPS1_EEiPNS2_5eventE__async_cb
,__ZL18lora_event_handler11lora_events__async_cb_74,__ZL18lora_event_handler11lora_events__async_cb_73,__ZL18lora_event_handler11lora_events__async_cb_72,__ZL18lora_event_handler11lora_events__async_cb_71,__ZL18lora_event_handler11lora_events__async_cb,__ZL18lora_event_handler11lora_events__async_cb_70,__ZN4mbed8CallbackIFv11lora_eventsEE13function_callIPS2_EEvPKvS1___async_cb,__ZN4mbed8CallbackIFvvEE13function_callIN6events5EventIS1_EEEEvPKv__async_cb,__ZN4mbed8CallbackIFvvEE13function_callIN6events5EventIS1_EEEEvPKv__async_cb_125,__ZN4mbed8CallbackIFvvEE13function_dtorIN6events5EventIS1_EEEEvPv__async_cb,__ZN4mbed8CallbackIFvvEE13function_dtorIN6events5EventIS1_EEEEvPv__async_cb_197,__ZN6events10EventQueue13function_callINS0_9context00IPFvvEEEEEvPv__async_cb,_putc__async_cb_421,_putc__async_cb,___overflow__async_cb,_fflush__async_cb_223,_fflush__async_cb_222,_fflush__async_cb_224,_fflush__async_cb,___fflush_unlocked__async_cb,___fflush_unlocked__async_cb_226,_vfprintf__async_cb,_snprintf__async_cb,_vsnprintf__async_cb,_sprintf__async_cb,_vsprintf__async_cb,_printf__async_cb,_putchar__async_cb,_fputc__async_cb_225,_fputc__async_cb
,_puts__async_cb,__ZL25default_terminate_handlerv__async_cb,__ZL25default_terminate_handlerv__async_cb_159,_abort_message__async_cb,_abort_message__async_cb_203,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_341,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb,___dynamic_cast__async_cb,___dynamic_cast__async_cb_420,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_363,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,__ZSt11__terminatePFvvE__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_215,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_179,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_178,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_177,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_176,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_201,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,___cxa_can_catch__async_cb,___cxa_is_pointer_type__async_cb,b64
,b65,b66,b67,b68,b69,b70,b71,b72,b73,b74,b75,b76,b77,b78,b79,b80,b81,b82,b83,b84,b85,b86,b87,b88,b89,b90,b91,b92,b93,b94
,b95,b96,b97,b98,b99,b100,b101,b102,b103,b104,b105,b106,b107,b108,b109,b110,b111,b112,b113,b114,b115,b116,b117,b118,b119,b120,b121,b122,b123,b124
,b125,b126,b127,b128,b129,b130,b131,b132,b133,b134,b135,b136,b137,b138,b139,b140,b141,b142,b143,b144,b145,b146,b147,b148,b149,b150,b151,b152,b153,b154
,b155,b156,b157,b158,b159,b160,b161,b162,b163,b164,b165,b166,b167,b168,b169,b170,b171,b172,b173,b174,b175,b176,b177,b178,b179,b180,b181,b182,b183,b184
,b185,b186,b187,b188,b189,b190,b191,b192,b193,b194,b195,b196,b197,b198,b199,b200,b201,b202,b203,b204,b205,b206,b207,b208,b209,b210,b211,b212,b213,b214
,b215,b216,b217,b218,b219,b220,b221,b222,b223,b224,b225,b226,b227,b228,b229,b230,b231,b232,b233,b234,b235,b236,b237,b238,b239,b240,b241,b242,b243,b244
,b245,b246,b247,b248,b249,b250,b251,b252,b253,b254,b255,b256,b257,b258,b259,b260,b261,b262,b263,b264,b265,b266,b267,b268,b269,b270,b271,b272,b273,b274
,b275,b276,b277,b278,b279,b280,b281,b282,b283,b284,b285,b286,b287,b288,b289,b290,b291,b292,b293,b294,b295,b296,b297,b298,b299,b300,b301,b302,b303,b304
,b305,b306,b307,b308,b309,b310,b311,b312,b313,b314,b315,b316,b317,b318,b319,b320,b321,b322,b323,b324,b325,b326,b327,b328,b329,b330,b331,b332,b333,b334
,b335,b336,b337,b338,b339];
var FUNCTION_TABLE_vii = [b341,__ZN16SX1276_LoRaRadio10init_radioEP12radio_events,__ZN16SX1276_LoRaRadio7receiveEj,__ZN16SX1276_LoRaRadio11set_channelEj,__ZN16SX1276_LoRaRadio18set_public_networkEb,__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPvPKv,__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPvPKv,__ZN4mbed8CallbackIFvPKhtsaEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPvPKv,__ZN4mbed8CallbackIFvbEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPKvb,__ZN4mbed8CallbackIFvbEE13function_moveINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPvPKv,__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPvPKv,__ZN4mbed8CallbackIFvvEE13function_moveIN6events5EventIS1_EEEEvPvPKv,__ZN4mbed8CallbackIFv11lora_eventsEE13function_callIPS2_EEvPKvS1_,__ZN4mbed8CallbackIFv11lora_eventsEE13function_moveIPS2_EEvPvPKv,__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event,__ZN12LoRaWANStack25process_reception_timeoutEb];
var FUNCTION_TABLE_viii = [b343,__ZN16SX1276_LoRaRadio4sendEPhh,__ZN16SX1276_LoRaRadio22set_max_payload_lengthE10modem_typeh,__ZN7LoRaPHY13apply_cf_listEPKhh,__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj,_add_pkcs_padding,b344,b345];
var FUNCTION_TABLE_viiii = [b347,__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat,__ZN7LoRaPHY16set_last_tx_doneEhbj,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b348,b349];
var FUNCTION_TABLE_viiiii = [b351,__ZN4mbed8CallbackIFvPKhtsaEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPKvS2_tsa,__ZN7LoRaPHY21compute_rx_win_paramsEahjP18rx_config_params_t,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa,__ZN12LoRaWANStack17process_receptionEPKhtsa];
var FUNCTION_TABLE_viiiiii = [b353,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib];
var FUNCTION_TABLE_viiiiiiiiiiiiii = [b355,__ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj];
var FUNCTION_TABLE_viiiiiiiiiiiiiii = [b357,__ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb];

  return { __GLOBAL__sub_I_main_cpp: __GLOBAL__sub_I_main_cpp, ___cxa_can_catch: ___cxa_can_catch, ___cxa_is_pointer_type: ___cxa_is_pointer_type, ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, ___uremdi3: ___uremdi3, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _emscripten_alloc_async_context: _emscripten_alloc_async_context, _emscripten_async_resume: _emscripten_async_resume, _emscripten_free_async_context: _emscripten_free_async_context, _emscripten_realloc_async_context: _emscripten_realloc_async_context, _fflush: _fflush, _free: _free, _handle_interrupt_in: _handle_interrupt_in, _handle_lora_downlink: _handle_lora_downlink, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _invoke_ticker: _invoke_ticker, _llvm_bswap_i32: _llvm_bswap_i32, _main: _main, _malloc: _malloc, _memcpy: _memcpy, _memset: _memset, _pthread_mutex_lock: _pthread_mutex_lock, _pthread_mutex_unlock: _pthread_mutex_unlock, _sbrk: _sbrk, dynCall_i: dynCall_i, dynCall_ii: dynCall_ii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_iiiiii: dynCall_iiiiii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_v: dynCall_v, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_viii: dynCall_viii, dynCall_viiii: dynCall_viiii, dynCall_viiiii: dynCall_viiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_viiiiiiiiiiiiii: dynCall_viiiiiiiiiiiiii, dynCall_viiiiiiiiiiiiiii: dynCall_viiiiiiiiiiiiiii, establishStackSpace: establishStackSpace, getTempRet0: getTempRet0, runPostSets: runPostSets, setAsync: setAsync, setTempRet0: setTempRet0, setThrew: setThrew, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real___GLOBAL__sub_I_main_cpp = asm["__GLOBAL__sub_I_main_cpp"]; asm["__GLOBAL__sub_I_main_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_main_cpp.apply(null, arguments);
};

var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_can_catch.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_is_pointer_type.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____uremdi3.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__emscripten_alloc_async_context = asm["_emscripten_alloc_async_context"]; asm["_emscripten_alloc_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_alloc_async_context.apply(null, arguments);
};

var real__emscripten_async_resume = asm["_emscripten_async_resume"]; asm["_emscripten_async_resume"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_async_resume.apply(null, arguments);
};

var real__emscripten_free_async_context = asm["_emscripten_free_async_context"]; asm["_emscripten_free_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_free_async_context.apply(null, arguments);
};

var real__emscripten_realloc_async_context = asm["_emscripten_realloc_async_context"]; asm["_emscripten_realloc_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_realloc_async_context.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__handle_interrupt_in = asm["_handle_interrupt_in"]; asm["_handle_interrupt_in"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__handle_interrupt_in.apply(null, arguments);
};

var real__handle_lora_downlink = asm["_handle_lora_downlink"]; asm["_handle_lora_downlink"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__handle_lora_downlink.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__invoke_ticker = asm["_invoke_ticker"]; asm["_invoke_ticker"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__invoke_ticker.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__main.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__pthread_mutex_lock = asm["_pthread_mutex_lock"]; asm["_pthread_mutex_lock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_lock.apply(null, arguments);
};

var real__pthread_mutex_unlock = asm["_pthread_mutex_unlock"]; asm["_pthread_mutex_unlock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_unlock.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_getTempRet0.apply(null, arguments);
};

var real_setAsync = asm["setAsync"]; asm["setAsync"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setAsync.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setTempRet0.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
var __GLOBAL__sub_I_main_cpp = Module["__GLOBAL__sub_I_main_cpp"] = asm["__GLOBAL__sub_I_main_cpp"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _emscripten_alloc_async_context = Module["_emscripten_alloc_async_context"] = asm["_emscripten_alloc_async_context"];
var _emscripten_async_resume = Module["_emscripten_async_resume"] = asm["_emscripten_async_resume"];
var _emscripten_free_async_context = Module["_emscripten_free_async_context"] = asm["_emscripten_free_async_context"];
var _emscripten_realloc_async_context = Module["_emscripten_realloc_async_context"] = asm["_emscripten_realloc_async_context"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _free = Module["_free"] = asm["_free"];
var _handle_interrupt_in = Module["_handle_interrupt_in"] = asm["_handle_interrupt_in"];
var _handle_lora_downlink = Module["_handle_lora_downlink"] = asm["_handle_lora_downlink"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _invoke_ticker = Module["_invoke_ticker"] = asm["_invoke_ticker"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _main = Module["_main"] = asm["_main"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memset = Module["_memset"] = asm["_memset"];
var _pthread_mutex_lock = Module["_pthread_mutex_lock"] = asm["_pthread_mutex_lock"];
var _pthread_mutex_unlock = Module["_pthread_mutex_unlock"] = asm["_pthread_mutex_unlock"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var setAsync = Module["setAsync"] = asm["setAsync"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_viiiiiiiiiiiiii = Module["dynCall_viiiiiiiiiiiiii"] = asm["dynCall_viiiiiiiiiiiiii"];
var dynCall_viiiiiiiiiiiiiii = Module["dynCall_viiiiiiiiiiiiiii"] = asm["dynCall_viiiiiiiiiiiiiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Module["intArrayFromString"]) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["ccall"]) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["cwrap"]) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setValue"]) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getValue"]) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocate"]) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getMemory"]) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["Pointer_stringify"]) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF8"]) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocateUTF8"]) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addRunDependency"]) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["removeRunDependency"]) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS"]) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS_createFolder"]) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPath"]) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDataFile"]) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPreloadedFile"]) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLazyFile"]) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLink"]) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDevice"]) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_unlink"]) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["staticAlloc"]) Module["staticAlloc"] = function() { abort("'staticAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynamicAlloc"]) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["warnOnce"]) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadDynamicLibrary"]) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadWebAssemblyModule"]) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getLEB"]) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFunctionTables"]) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["alignFunctionTables"]) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["registerFunctions"]) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addFunction"]) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["removeFunction"]) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFuncWrapper"]) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["prettyPrint"]) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["makeBigInt"]) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynCall"]) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getCompilerSetting"]) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Module["ALLOC_NORMAL"]) Object.defineProperty(Module, "ALLOC_NORMAL", { get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STACK"]) Object.defineProperty(Module, "ALLOC_STACK", { get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STATIC"]) Object.defineProperty(Module, "ALLOC_STATIC", { get: function() { abort("'ALLOC_STATIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_DYNAMIC"]) Object.defineProperty(Module, "ALLOC_DYNAMIC", { get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_NONE"]) Object.defineProperty(Module, "ALLOC_NONE", { get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    if (typeof Module['locateFile'] === 'function') {
      memoryInitializer = Module['locateFile'](memoryInitializer);
    } else if (Module['memoryInitializerPrefixURL']) {
      memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
    }
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    function doBrowserLoad() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      function useRequest() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
            // If you see this warning, the issue may be that you are using locateFile or memoryInitializerPrefixURL, and defining them in JS. That
            // means that the HTML file doesn't know about them, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}



/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(Module['thisProgram']);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      Module.printErr('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in NO_FILESYSTEM
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = Module['print'];
  var printErr = Module['printErr'];
  var has = false;
  Module['print'] = Module['printErr'] = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = flush_NO_FILESYSTEM;
    if (flush) flush(0);
  } catch(e) {}
  Module['print'] = print;
  Module['printErr'] = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set NO_EXIT_RUNTIME to 0 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      Module.printErr('exit(' + status + ') called, but NO_EXIT_RUNTIME is set, so halting execution but not exiting the runtime or preventing further async execution (build with NO_EXIT_RUNTIME=0, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = exit;

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}






//# sourceMappingURL=lorawan.js.map