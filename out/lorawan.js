// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('Module[\'ENVIRONMENT\'] value is not valid. must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', function(reason, p) {
    Module['printErr']('node.js exiting due to unhandled promise rejection');
    process['exit'](1);
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  Module['setWindowTitle'] = function(title) { document.title = title };
}
else {
  // Unreachable because SHELL is dependent on the others
  throw new Error('unknown runtime environment');
}

// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
Module['print'] = typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null);
Module['printErr'] = typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || Module['print']);

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = setTempRet0 = getTempRet0 = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  assert(!staticSealed);
  var ret = STATICTOP;
  STATICTOP = (STATICTOP + size + 15) & -16;
  return ret;
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  if (end >= TOTAL_MEMORY) {
    var success = enlargeMemory();
    if (!success) {
      HEAP32[DYNAMICTOP_PTR>>2] = ret;
      return 0;
    }
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  var ret = size = Math.ceil(size / factor) * factor;
  return ret;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    Module.printErr(text);
  }
}



var jsCallStartIndex = 1;
var functionPointers = new Array(0);

// 'sig' parameter is only used on LLVM wasm backend
function addFunction(func, sig) {
  if (typeof sig === 'undefined') {
    Module.printErr('Warning: addFunction: Provide a wasm function signature ' +
                    'string as a second argument');
  }
  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
}

function removeFunction(index) {
  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}


function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // FIXME backwards compatibility layer for ports. Support some Runtime.*
  //       for now, fix it there, then remove it from here. That way we
  //       can minimize any period of breakage.
  dynCall: dynCall, // for SDL2 port
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

var JSfuncs = {
  // Helpers for cwrap -- it can't refer to Runtime directly because it might
  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
  // out what the minified function name is.
  'stackSave': function() {
    stackSave()
  },
  'stackRestore': function() {
    stackRestore()
  },
  // type conversion from js to c
  'arrayToC' : function(arr) {
    var ret = stackAlloc(arr.length);
    writeArrayToMemory(arr, ret);
    return ret;
  },
  'stringToC' : function(str) {
    var ret = 0;
    if (str !== null && str !== undefined && str !== 0) { // null string
      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
      var len = (str.length << 2) + 1;
      ret = stackAlloc(len);
      stringToUTF8(str, ret, len);
    }
    return ret;
  }
};
// For fast lookup of conversion functions
var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

// C calling interface.
function ccall (ident, returnType, argTypes, args, opts) {
  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  if (returnType === 'string') ret = Pointer_stringify(ret);
  if (stack !== 0) {
    stackRestore(stack);
  }
  return ret;
}

function cwrap (ident, returnType, argTypes) {
  argTypes = argTypes || [];
  var cfunc = getCFunc(ident);
  // When the function takes numbers and returns a number, we can just return
  // the original function
  var numericArgs = argTypes.every(function(type){ return type === 'number'});
  var numericRet = returnType !== 'string';
  if (numericRet && numericArgs) {
    return cfunc;
  }
  return function() {
    return ccall(ident, returnType, argTypes, arguments);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return staticAlloc(size);
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return UTF8ToString(ptr);
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

function demangle(func) {
  warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
  Module['buffer'] = buffer;
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

assert(Math['imul'] && Math['fround'] && Math['clz32'] && Math['trunc'], 'this is a legacy browser, build with LEGACY_VM_SUPPORT');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



var /* show errors on likely calls to FS when it was not included */ FS = {
  error: function() {
    abort('Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with  -s FORCE_FILESYSTEM=1');
  },
  init: function() { FS.error() },
  createDataFile: function() { FS.error() },
  createPreloadedFile: function() { FS.error() },
  createLazyFile: function() { FS.error() },
  open: function() { FS.error() },
  mkdev: function() { FS.error() },
  registerDevice: function() { FS.error() },
  analyzePath: function() { FS.error() },
  loadFilesFromDB: function() { FS.error() },

  ErrnoError: function ErrnoError() { FS.error() },
};
Module['FS_createDataFile'] = FS.createDataFile;
Module['FS_createPreloadedFile'] = FS.createPreloadedFile;



// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [function($0, $1, $2, $3, $4, $5) { window.MbedJSHal.lora.sendFsk($0, $1, $2, $3, $4, $5); },
 function($0, $1, $2, $3, $4, $5) { window.MbedJSHal.lora.sendLoRa($0, $1, $2, $3, $4, $5); },
 function() { console.log('receive', Date.now()); },
 function() { return Date.now(); },
 function() { return Math.random() * 0x8000000 | 0; },
 function($0, $1) { MbedJSHal.gpio.write($0, $1); },
 function() { console.log('rx_frame', Date.now()); },
 function($0) { window.MbedJSHal.lora.init($0); },
 function($0, $1) { MbedJSHal.gpio.init_in($0, $1, 3); },
 function($0, $1) { MbedJSHal.gpio.init_out($0, $1, 0); },
 function($0, $1, $2) { MbedJSHal.gpio.init_out($0, $1, $2); },
 function($0, $1, $2, $3, $4) { MbedJSHal.gpio.init_inout($0, $1, $2, $3, $4); },
 function($0, $1) { MbedJSHal.gpio.irq_init($0, $1); },
 function($0, $1) { MbedJSHal.gpio.irq_free($0); },
 function($0, $1, $2) { MbedJSHal.gpio.irq_set($0, $1, $2); },
 function($0) { window.MbedJSHal.timers.ticker_detach($0); },
 function($0, $1) { window.MbedJSHal.timers.ticker_setup($0, $1); },
 function($0, $1, $2) { window.MbedJSHal.sht31.init($0, $1, $2); },
 function($0) { return window.MbedJSHal.sht31.read_temperature($0); }];

function _emscripten_asm_const_iii(code, a0, a1) {
  return ASM_CONSTS[code](a0, a1);
}

function _emscripten_asm_const_iiiiii(code, a0, a1, a2, a3, a4) {
  return ASM_CONSTS[code](a0, a1, a2, a3, a4);
}

function _emscripten_asm_const_iiii(code, a0, a1, a2) {
  return ASM_CONSTS[code](a0, a1, a2);
}

function _emscripten_asm_const_i(code) {
  return ASM_CONSTS[code]();
}

function _emscripten_asm_const_ii(code, a0) {
  return ASM_CONSTS[code](a0);
}

function _emscripten_asm_const_iiiiiii(code, a0, a1, a2, a3, a4, a5) {
  return ASM_CONSTS[code](a0, a1, a2, a3, a4, a5);
}




STATIC_BASE = GLOBAL_BASE;

STATICTOP = STATIC_BASE + 25616;
/* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__sub_I_main_cpp() } });


memoryInitializer = "lorawan.js.mem";





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};function ___cxa_begin_catch(ptr) {
      var info = EXCEPTIONS.infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exception--;
      }
      if (info) info.rethrown = false;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  
  
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((setTempRet0(0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((setTempRet0(throwntype),thrown)|0);
    }function ___gxx_personality_v0() {
    }

  function ___lock() {}

  
    

  
  var SYSCALLS={varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function flush_NO_FILESYSTEM() {
      // flush anything remaining in the buffers during shutdown
      var fflush = Module["_fflush"];
      if (fflush) fflush(0);
      var printChar = ___syscall146.printChar;
      if (!printChar) return;
      var buffers = ___syscall146.buffers;
      if (buffers[1].length) printChar(1, 10);
      if (buffers[2].length) printChar(2, 10);
    }function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      // hack to support printf in NO_FILESYSTEM
      var stream = SYSCALLS.get(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      var ret = 0;
      if (!___syscall146.buffers) {
        ___syscall146.buffers = [null, [], []]; // 1 => stdout, 2 => stderr
        ___syscall146.printChar = function(stream, curr) {
          var buffer = ___syscall146.buffers[stream];
          assert(buffer);
          if (curr === 0 || curr === 10) {
            (stream === 1 ? Module['print'] : Module['printErr'])(UTF8ArrayToString(buffer, 0));
            buffer.length = 0;
          } else {
            buffer.push(curr);
          }
        };
      }
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAP32[(((iov)+(i*8))>>2)];
        var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
        for (var j = 0; j < len; j++) {
          ___syscall146.printChar(stream, HEAPU8[ptr+j]);
        }
        ret += len;
      }
      return ret;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC);   

  function ___unlock() {}

   

  function _abort() {
      Module['abort']();
    }

   

   

  
  var ___async_cur_frame=0; 

  var _emscripten_asm_const_int=true;

   

   

  
  
  var ___async=0;
  
  var ___async_unwind=1;
  
  var ___async_retval=STATICTOP; STATICTOP += 16;; 
  
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now())|0;
          setTimeout(Browser.mainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (typeof setImmediate === 'undefined') {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = 'setimmediate';
          function Browser_setImmediate_messageHandler(event) {
            // When called in current thread or Worker, the main loop ID is structured slightly different to accommodate for --proxy-to-worker runtime listening to Worker events,
            // so check for both cases.
            if (event.data === emscriptenMainLoopMessageId || event.data.target === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          addEventListener("message", Browser_setImmediate_messageHandler, true);
          setImmediate = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            if (ENVIRONMENT_IS_WORKER) {
              if (Module['setImmediates'] === undefined) Module['setImmediates'] = [];
              Module['setImmediates'].push(func);
              postMessage({target: emscriptenMainLoopMessageId}); // In --proxy-to-worker, route the message via proxyClient.js
            } else postMessage(emscriptenMainLoopMessageId, "*"); // On the main thread, can just send the message to itself.
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          setImmediate(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }
  
  function _emscripten_get_now() { abort() }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var browserIterationFunc;
      if (typeof arg !== 'undefined') {
        browserIterationFunc = function() {
          Module['dynCall_vi'](func, arg);
        };
      } else {
        browserIterationFunc = function() {
          Module['dynCall_v'](func);
        };
      }
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          
          // catches pause/resume main loop from blocker execution
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
          
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        } else if (Browser.mainLoop.timingMode == 0/*EM_TIMING_SETTIMEOUT*/) {
          Browser.mainLoop.tickStartTime = _emscripten_get_now();
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(browserIterationFunc);
  
        checkStackCookie();
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullscreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === Module['canvas'] ||
                                document['mozPointerLockElement'] === Module['canvas'] ||
                                document['webkitPointerLockElement'] === Module['canvas'] ||
                                document['msPointerLockElement'] === Module['canvas'];
        }
        var canvas = Module['canvas'];
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
                Module['canvas'].requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullscreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullscreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['fullscreenElement'] || document['mozFullScreenElement'] ||
               document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.exitFullscreen = document['exitFullscreen'] ||
                                    document['cancelFullScreen'] ||
                                    document['mozCancelFullScreen'] ||
                                    document['msExitFullscreen'] ||
                                    document['webkitCancelFullScreen'] ||
                                    function() {};
            canvas.exitFullscreen = canvas.exitFullscreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullscreen = true;
            if (Browser.resizeCanvas) Browser.setFullscreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullscreen);
          if (Module['onFullscreen']) Module['onFullscreen'](Browser.isFullscreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullscreenChange, false);
          document.addEventListener('mozfullscreenchange', fullscreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullscreenChange, false);
          document.addEventListener('MSFullscreenChange', fullscreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullscreen = canvasContainer['requestFullscreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullscreen'] ? function() { canvasContainer['webkitRequestFullscreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null) ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullscreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullscreen();
        }
      },requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
          Module.printErr('Browser.requestFullScreen() is deprecated. Please call Browser.requestFullscreen instead.');
          Browser.requestFullScreen = function(lockPointer, resizeCanvas, vrDevice) {
            return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
          }
          return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
            Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
            Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
            // just add the mouse delta to the current absolut mouse position
            // FIXME: ideally this should be clamped against the canvas size and zero
            Browser.mouseX += Browser.mouseMovementX;
            Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';
        Module['readAsync'](url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (dep) removeRunDependency(dep);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (dep) addRunDependency(dep);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullscreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['fullscreenElement'] || document['mozFullScreenElement'] ||
             document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};function _emscripten_sleep(ms) {
      Module['setAsync'](); // tell the scheduler that we have a callback on hold
      Browser.safeSetTimeout(_emscripten_async_resume, ms);
    }

  function _gettimeofday(ptr) {
      var now = Date.now();
      HEAP32[((ptr)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((ptr)+(4))>>2)]=((now % 1000)*1000)|0; // microseconds
      return 0;
    }



   

  var _llvm_ceil_f64=Math_ceil;

  var _llvm_floor_f64=Math_floor;

  function _llvm_trap() {
      abort('trap!');
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

   

  function _pthread_cond_init() { return 0; }

  function _pthread_cond_signal() { return 0; }

  function _pthread_cond_timedwait() { return 0; }

  function _pthread_cond_wait() { return 0; }

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function _pthread_mutex_init() {}

   

   

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Module['dynCall_v'](func);
      _pthread_once.seen[ptr] = 1;
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    } 
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Module.printErr("Module.requestFullScreen is deprecated. Please call Module.requestFullscreen instead."); Module["requestFullScreen"] = Module["requestFullscreen"]; Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) };
if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function _emscripten_get_now_actual() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
    _emscripten_get_now = function() { return self['performance']['now'](); };
  } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
    _emscripten_get_now = function() { return performance['now'](); };
  } else {
    _emscripten_get_now = Date.now;
  };
DYNAMICTOP_PTR = staticAlloc(4);

STACK_BASE = STACKTOP = alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

var ASSERTIONS = true;

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}



var debug_table_i = ["0", "_ccm_ctx_alloc", "_gcm_ctx_alloc", "_aes_ctx_alloc", "_us_ticker_read", "_us_ticker_get_info", "0", "0"];
var debug_table_ii = ["0", "__ZN16SX1276_LoRaRadio6randomEv", "__ZN16SX1276_LoRaRadio10get_statusEv", "__ZN16LoRaWANInterface7connectEv", "__ZN16LoRaWANInterface10disconnectEv", "__ZN16LoRaWANInterface22add_link_check_requestEv", "__ZN16LoRaWANInterface24enable_adaptive_datarateEv", "__ZN16LoRaWANInterface25disable_adaptive_datarateEv", "__ZN16LoRaWANInterface19remove_channel_planEv", "___stdio_close", "0", "0", "0", "0", "0", "0"];
var debug_table_iii = ["0", "__ZN16SX1276_LoRaRadio18check_rf_frequencyEj", "__ZN16LoRaWANInterface10initializeEPN6events10EventQueueE", "__ZN16LoRaWANInterface7connectERK15lorawan_connect", "__ZN16LoRaWANInterface12set_datarateEh", "__ZN16LoRaWANInterface25set_confirmed_msg_retriesEh", "__ZN16LoRaWANInterface16set_channel_planERK16lora_channelplan", "__ZN16LoRaWANInterface16get_channel_planER16lora_channelplan", "__ZN16LoRaWANInterface14remove_channelEh", "__ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t", "__ZN7LoRaPHY19request_new_channelEP24new_channel_req_params_s", "__ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s", "__ZN7LoRaPHY25accept_tx_param_setup_reqEP20tx_param_setup_req_s", "__ZN7LoRaPHY18dl_channel_requestEP23dl_channel_req_params_s", "__ZN7LoRaPHY16get_alternate_DREh", "__ZN7LoRaPHY14remove_channelEh", "__ZN7LoRaPHY16verify_frequencyEj", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_iiii = ["0", "__ZN16SX1276_LoRaRadio11time_on_airE10modem_typeh", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa", "__ZN7LoRaPHY11add_channelEP16channel_params_th", "__ZN7LoRaPHY15apply_DR_offsetEaa", "_ccm_aes_setkey_wrap", "_gcm_aes_setkey_wrap", "_aes_setkey_enc_wrap", "_aes_setkey_dec_wrap", "___stdio_write", "___stdio_seek", "___stdout_write", "_sn_write", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv", "_get_pkcs_padding", "0"];
var debug_table_iiiii = ["0", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj", "_aes_crypt_ecb_wrap", "0"];
var debug_table_iiiiii = ["0", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj", "__ZN16LoRaWANInterface4sendEhPKhti", "__ZN16LoRaWANInterface7receiveEhPhti", "__ZN7LoRaPHY16set_next_channelEP26channel_selection_params_sPhPjS3_", "0", "0", "0"];
var debug_table_iiiiiii = ["0", "__ZN7LoRaPHY16link_ADR_requestEP16adr_req_params_tPaS2_PhS3_", "_aes_crypt_cbc_wrap", "0"];
var debug_table_v = ["0", "___cxa_pure_virtual", "_us_ticker_init", "_us_ticker_disable_interrupt", "_us_ticker_clear_interrupt", "_us_ticker_fire_interrupt", "__ZL25default_terminate_handlerv", "__ZL12send_messagev", "__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_vi = ["0", "__ZN16SX1276_LoRaRadio11radio_resetEv", "__ZN16SX1276_LoRaRadio5sleepEv", "__ZN16SX1276_LoRaRadio7standbyEv", "__ZN16SX1276_LoRaRadio9start_cadEv", "__ZN16SX1276_LoRaRadio4lockEv", "__ZN16SX1276_LoRaRadio6unlockEv", "__ZN16SX1276_LoRaRadioD2Ev", "__ZN16SX1276_LoRaRadioD0Ev", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPv", "__ZN4mbed11InterruptInD2Ev", "__ZN4mbed11InterruptInD0Ev", "__ZN4mbed7TimeoutD2Ev", "__ZN4mbed7TimeoutD0Ev", "__ZN4mbed7Timeout7handlerEv", "__ZN4mbed10TimerEventD2Ev", "__ZN4mbed10TimerEventD0Ev", "_mbed_trace_default_print", "__ZN16LoRaWANInterface25remove_link_check_requestEv", "__ZN16LoRaWANInterfaceD2Ev", "__ZN16LoRaWANInterfaceD0Ev", "__ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv", "__ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv", "__ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv", "__ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPv", "__ZN4mbed8CallbackIFvPhtsaEE13function_dtorINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPv", "__ZN7LoRaPHYD2Ev", "__ZN7LoRaPHYD0Ev", "__ZN7LoRaPHY24restore_default_channelsEv", "__ZN12LoRaPHYEU868D2Ev", "__ZN12LoRaPHYEU868D0Ev", "_ccm_ctx_free", "_gcm_ctx_free", "_aes_ctx_free", "_us_ticker_set_interrupt", "__ZN4mbed10TimerEvent3irqEj", "__ZN4mbed6TickerD2Ev", "__ZN4mbed6TickerD0Ev", "__ZN4mbed6Ticker7handlerEv", "__ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv", "__ZN4mbed8CallbackIFv11lora_eventsEE13function_dtorIPS2_EEvPv", "__ZN10__cxxabiv116__shim_type_infoD2Ev", "__ZN10__cxxabiv117__class_type_infoD0Ev", "__ZNK10__cxxabiv116__shim_type_info5noop1Ev", "__ZNK10__cxxabiv116__shim_type_info5noop2Ev", "__ZN10__cxxabiv120__si_class_type_infoD0Ev", "__ZN10__cxxabiv121__vmi_class_type_infoD0Ev", "__ZN16SX1276_LoRaRadio10init_radioEP12radio_events__async_cb", "__ZN16SX1276_LoRaRadio4sendEPhh__async_cb", "__ZN16SX1276_LoRaRadio11rx_done_irqEv", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_277", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_278", "__ZN16SX1276_LoRaRadio15timeout_irq_isrEv", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_279", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_280", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_281", "__ZN16SX1276_LoRaRadio6randomEv__async_cb", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_395", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_391", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_392", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_394", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_393", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_390", "__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb", "__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_300", "__ZN16SX1276_LoRaRadioD2Ev__async_cb", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_45", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_39", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_44", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_40", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_43", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_41", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_42", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_51", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_50", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_49", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_48", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_47", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_46", "__ZN16SX1276_LoRaRadioD0Ev__async_cb", "__ZN16SX1276_LoRaRadio11rx_done_irqEv__async_cb", "__ZN16SX1276_LoRaRadio15timeout_irq_isrEv__async_cb", "__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb", "__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_208", "__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_209", "__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_210", "__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_211", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv__async_cb", "__ZN16SX1276_LoRaRadio11tx_done_irqEv", "__ZN16SX1276_LoRaRadio8transmitEj__async_cb", "__ZN16SX1276_LoRaRadio8transmitEj__async_cb_248", "__ZN16SX1276_LoRaRadio8transmitEj__async_cb_249", "__ZN16SX1276_LoRaRadio11tx_done_irqEv__async_cb", "__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_297", "__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_296", "__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_295", "__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb", "__ZN4mbed11InterruptInD2Ev__async_cb", "__ZN4mbed11InterruptInD2Ev__async_cb_267", "__ZN4mbed11InterruptInD0Ev__async_cb", "__ZN4mbed11InterruptInD0Ev__async_cb_271", "__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb", "__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb_323", "__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb", "__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_383", "__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_384", "__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_385", "__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_386", "__ZN4mbed7TimeoutD2Ev__async_cb", "__ZN4mbed7TimeoutD2Ev__async_cb_355", "__ZN4mbed7TimeoutD0Ev__async_cb", "__ZN4mbed7TimeoutD0Ev__async_cb_382", "__ZN4mbed7Timeout7handlerEv__async_cb_9", "__ZN4mbed7Timeout7handlerEv__async_cb", "__ZN4mbed5TimerC2Ev__async_cb", "__ZN4mbed5Timer5startEv__async_cb", "__ZN4mbed5Timer7read_msEv__async_cb", "__ZN4mbed10TimerEventD2Ev__async_cb", "__ZN4mbed10TimerEventC2Ev__async_cb", "__ZN4mbed10TimerEvent3irqEj__async_cb", "__ZN6events10EventQueue8dispatchEi__async_cb", "__ZN6events10EventQueue6cancelEi__async_cb", "_equeue_alloc__async_cb", "_equeue_post__async_cb", "_equeue_enqueue__async_cb", "_equeue_cancel__async_cb", "_equeue_dispatch__async_cb", "_equeue_dispatch__async_cb_241", "_equeue_dispatch__async_cb_239", "_equeue_dispatch__async_cb_240", "_equeue_dispatch__async_cb_242", "_mbed_trace_default_print__async_cb", "_mbed_tracef__async_cb", "_mbed_vtracef__async_cb", "_mbed_vtracef__async_cb_131", "_mbed_vtracef__async_cb_121", "_mbed_vtracef__async_cb_122", "_mbed_vtracef__async_cb_123", "_mbed_vtracef__async_cb_130", "_mbed_vtracef__async_cb_124", "_mbed_vtracef__async_cb_129", "_mbed_vtracef__async_cb_125", "_mbed_vtracef__async_cb_126", "_mbed_vtracef__async_cb_127", "_mbed_vtracef__async_cb_128", "__ZN16LoRaWANInterface7connectEv__async_cb", "__ZN16LoRaWANInterface4sendEhPKhti__async_cb", "__ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb", "__ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb_338", "__ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb_339", "__ZN12LoRaWANStackC2Ev__async_cb", "__ZN12LoRaWANStackC2Ev__async_cb_28", "__ZN12LoRaWANStackC2Ev__async_cb_29", "__ZN12LoRaWANStackC2Ev__async_cb_30", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_27", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_23", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_16", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_26", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_17", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_22", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_18", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_25", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_19", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_21", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_20", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_24", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_65", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_60", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_67", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_61", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_64", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_62", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_66", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_63", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_88", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_85", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_84", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_83", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_79", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_87", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_80", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_82", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_81", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_86", "__ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb", "__ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_107", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_100", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_106", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_113", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_90", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_118", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_108", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_91", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_112", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_92", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_117", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_105", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_104", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_103", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_102", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_101", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_93", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_111", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_94", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_116", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_99", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_95", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_110", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_96", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_115", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_97", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_109", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_98", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_114", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_133", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_138", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_134", "__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv", "__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_137", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_135", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_136", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_149", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_154", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_150", "__ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv", "__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_153", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_151", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_152", "__ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb", "__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb_272", "__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb", "__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb", "__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb_273", "__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb", "__ZN12LoRaWANStack17send_frame_to_macEv__async_cb", "__ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb", "__ZN12LoRaWANStack9handle_txEhPKhth__async_cb", "__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_347", "__ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb", "__ZN12LoRaWANStack17get_lorawan_stackEv__async_cb", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb", "__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb_33", "__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb_32", "__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb", "__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb_34", "__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb", "__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_68", "__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_69", "__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_70", "__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_71", "__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_72", "__ZN12LoRaWANStack12add_channelsERK16lora_channelplan__async_cb", "__ZN12LoRaWANStack17drop_channel_listEv__async_cb", "__ZN12LoRaWANStack16remove_a_channelEh__async_cb", "__ZN12LoRaWANStack24enable_adaptive_datarateEb__async_cb", "__ZN12LoRaWANStack21set_channel_data_rateEh__async_cb", "__ZN12LoRaWANStack20join_request_by_otaaERK15lorawan_connect__async_cb", "__ZN12LoRaWANStack29activation_by_personalizationERK15lorawan_connect__async_cb", "__ZN12LoRaWANStack22set_link_check_requestEv__async_cb", "__ZN12LoRaWANStack8shutdownEv__async_cb", "__ZN7LoRaMacD2Ev__async_cb_159", "__ZN7LoRaMacD2Ev__async_cb", "__ZN12radio_eventsD2Ev__async_cb", "__ZN12radio_eventsD2Ev__async_cb_141", "__ZN12radio_eventsD2Ev__async_cb_142", "__ZN12radio_eventsD2Ev__async_cb_143", "__ZN12radio_eventsD2Ev__async_cb_144", "__ZN12radio_eventsD2Ev__async_cb_145", "__ZN12radio_eventsD2Ev__async_cb_146", "__ZN14lorawan_timersD2Ev__async_cb", "__ZN14lorawan_timersD2Ev__async_cb_282", "__ZN14lorawan_timersD2Ev__async_cb_283", "__ZN14lorawan_timersD2Ev__async_cb_284", "__ZN14lorawan_timersD2Ev__async_cb_285", "__ZN7LoRaMac16on_radio_tx_doneEv", "__ZN7LoRaMac14handle_tx_doneEv__async_cb", "__ZN7LoRaMac14handle_tx_doneEv__async_cb_175", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_163", "__ZN7LoRaMac25on_rx_window2_timer_eventEv", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_164", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_165", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_162", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_161", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_160", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb", "__ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_293", "__ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb", "__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv", "__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv", "__ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_292", "__ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_291", "__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv__async_cb", "__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb_268", "__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv__async_cb", "__ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_238", "__ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb", "__ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_237", "__ZN7LoRaMac14handle_rx_doneEPhtsa__async_cb_387", "__ZN7LoRaMac14handle_rx_doneEPhtsa__async_cb", "__ZN7LoRaMac14handle_rx_doneEPhtsa__async_cb_388", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_410", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_424", "__ZN7LoRaMac26on_ack_timeout_timer_eventEv", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_421", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_432", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_409", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_400", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_420", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_431", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_408", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_419", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_430", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_407", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_399", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_398", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_418", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_429", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_406", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_417", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_428", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_405", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_416", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_427", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_404", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_413", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_412", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_411", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_423", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_422", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_415", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_426", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_403", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_414", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_425", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_402", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_401", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_349", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_354", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_350", "__ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv", "__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_353", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_351", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_352", "__ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv__async_cb", "__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv__async_cb_344", "__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv__async_cb", "__ZN4mbed8CallbackIFvPhtsaEE13function_callINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPKvS1_tsa__async_cb", "__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb", "__ZN7LoRaMac17on_radio_rx_errorEv", "__ZN7LoRaMac15handle_rx_errorEv__async_cb", "__ZN7LoRaMac15handle_rx_errorEv__async_cb_52", "__ZN7LoRaMac17on_radio_rx_errorEv__async_cb_10", "__ZN7LoRaMac17on_radio_rx_errorEv__async_cb_12", "__ZN7LoRaMac17on_radio_rx_errorEv__async_cb", "__ZN7LoRaMac17on_radio_rx_errorEv__async_cb_11", "__ZN7LoRaMac19on_radio_rx_timeoutEv", "__ZN7LoRaMac17handle_rx_timeoutEv__async_cb", "__ZN7LoRaMac17handle_rx_timeoutEv__async_cb_15", "__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_1", "__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_3", "__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb", "__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_2", "__ZN7LoRaMac19on_radio_tx_timeoutEv", "__ZN7LoRaMac17handle_tx_timeoutEv__async_cb", "__ZN7LoRaMac17handle_tx_timeoutEv__async_cb_6", "__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb", "__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_219", "__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_220", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv", "__ZN7LoRaMac34handle_mac_state_check_timer_eventEv__async_cb", "__ZN7LoRaMac34handle_mac_state_check_timer_eventEv__async_cb_232", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_190", "__ZN7LoRaMac25on_tx_delayed_timer_eventEv", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_189", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_197", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_188", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_196", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_186", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_195", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_181", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_194", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_182", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_185", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_187", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_193", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_192", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_183", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_191", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_184", "__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_178", "__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb", "__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_176", "__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_177", "__ZN7LoRaMac11schedule_txEv__async_cb", "__ZN7LoRaMac11schedule_txEv__async_cb_201", "__ZN7LoRaMac11schedule_txEv__async_cb_202", "__ZN7LoRaMac11schedule_txEv__async_cb_203", "__ZN7LoRaMac11schedule_txEv__async_cb_204", "__ZN7LoRaMac11schedule_txEv__async_cb_206", "__ZN7LoRaMac11schedule_txEv__async_cb_205", "__ZN7LoRaMac21send_frame_on_channelEh__async_cb", "__ZN7LoRaMac21send_frame_on_channelEh__async_cb_147", "__ZN7LoRaMac21send_frame_on_channelEh__async_cb_148", "__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb_168", "__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb_166", "__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb_167", "__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb", "__ZN7LoRaMac29handle_delayed_tx_timer_eventEv__async_cb", "__ZN7LoRaMac29handle_delayed_tx_timer_eventEv__async_cb_89", "__ZN7LoRaMac18handle_ack_timeoutEv__async_cb", "__ZN7LoRaMac18handle_ack_timeoutEv__async_cb_139", "__ZN7LoRaMac25on_rx_window1_timer_eventEv", "__ZN7LoRaMac22handle_rx1_timer_eventEv__async_cb", "__ZN7LoRaMac22handle_rx1_timer_eventEv__async_cb_298", "__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_276", "__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_275", "__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb", "__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_274", "__ZN7LoRaMac22handle_rx2_timer_eventEv__async_cb", "__ZN7LoRaMac22handle_rx2_timer_eventEv__async_cb_270", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_264", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_265", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_266", "__ZN7LoRaMac34handle_mac_state_check_timer_eventEv", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_263", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb", "__ZN7LoRaMac29handle_delayed_tx_timer_eventEv", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_262", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_255", "__ZN7LoRaMac22handle_rx1_timer_eventEv", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_261", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_256", "__ZN7LoRaMac22handle_rx2_timer_eventEv", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_260", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_257", "__ZN7LoRaMac18handle_ack_timeoutEv", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_259", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_258", "__ZN7LoRaMac10disconnectEv__async_cb_254", "__ZN7LoRaMac10disconnectEv__async_cb_253", "__ZN7LoRaMac10disconnectEv__async_cb_252", "__ZN7LoRaMac10disconnectEv__async_cb_251", "__ZN7LoRaMac10disconnectEv__async_cb_250", "__ZN7LoRaMac10disconnectEv__async_cb", "__ZN7LoRaMac17query_tx_possibleEhP17loramac_tx_info_t__async_cb", "__ZN7LoRaMac16add_channel_planERK16lora_channelplan__async_cb", "__ZN7LoRaMac19remove_channel_planEv__async_cb", "__ZN7LoRaMac21remove_single_channelEh__async_cb", "__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb", "__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_356", "__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_361", "__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_360", "__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_358", "__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_359", "__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_357", "__ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t__async_cb", "__ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t__async_cb_348", "__ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb", "__ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_336", "__ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_337", "__ZN7LoRaMac14handle_tx_doneEv", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_309", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_310", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_311", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_312", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_313", "__ZN7LoRaMac15handle_rx_errorEv", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_314", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_315", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_316", "__ZN7LoRaMac17handle_tx_timeoutEv", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_317", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_318", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_319", "__ZN7LoRaMac17handle_rx_timeoutEv", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_320", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_321", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_322", "__ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan__async_cb", "__ZN18LoRaMacChannelPlan11remove_planEv__async_cb", "__ZN18LoRaMacChannelPlan11remove_planEv__async_cb_14", "__ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb", "__ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb_8", "__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb", "__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_340", "__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_341", "__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_342", "__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_343", "__Z11compute_micPKhtS0_jhjPj__async_cb_365", "__Z11compute_micPKhtS0_jhjPj__async_cb_364", "__Z11compute_micPKhtS0_jhjPj__async_cb_362", "__Z11compute_micPKhtS0_jhjPj__async_cb", "__Z11compute_micPKhtS0_jhjPj__async_cb_363", "__Z11compute_micPKhtS0_jhjPj__async_cb_366", "__Z22compute_join_frame_micPKhtS0_Pj__async_cb_235", "__Z22compute_join_frame_micPKhtS0_Pj__async_cb_234", "__Z22compute_join_frame_micPKhtS0_Pj__async_cb", "__Z22compute_join_frame_micPKhtS0_Pj__async_cb_233", "__Z22compute_join_frame_micPKhtS0_Pj__async_cb_236", "__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_173", "__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_172", "__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb", "__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_170", "__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_171", "__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_169", "__ZN11LoRaMacMlme22set_tx_continuous_waveEhaafft__async_cb", "__ZN7LoRaPHY19request_new_channelEP24new_channel_req_params_s__async_cb", "__ZN7LoRaPHY19request_new_channelEP24new_channel_req_params_s__async_cb_38", "__ZN7LoRaPHY13apply_cf_listEP15cflist_params_t__async_cb", "__ZN7LoRaPHY13apply_cf_listEP15cflist_params_t__async_cb_324", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_301", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_302", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_303", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_304", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_305", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_306", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_307", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_308", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_330", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_331", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_332", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_333", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_334", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_335", "__ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s__async_cb", "__ZN7LoRaPHY18dl_channel_requestEP23dl_channel_req_params_s__async_cb", "__ZN7LoRaPHY11add_channelEP16channel_params_th__async_cb", "__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb", "__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_243", "__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_244", "__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb", "__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_212", "__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_213", "__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb", "__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_179", "__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_180", "__ZN7LoRaPHY25setup_public_network_modeEb__async_cb", "__ZN7LoRaPHY25setup_public_network_modeEb__async_cb_230", "__ZN7LoRaPHY25setup_public_network_modeEb__async_cb_231", "__ZN7LoRaPHY15setup_rx_windowEbj__async_cb", "__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_226", "__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_227", "__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_228", "__ZN7LoRaPHY13get_radio_rngEv__async_cb", "__ZN7LoRaPHY13get_radio_rngEv__async_cb_216", "__ZN7LoRaPHY13get_radio_rngEv__async_cb_217", "__ZN7LoRaPHY11handle_sendEPhh__async_cb", "__ZN7LoRaPHY11handle_sendEPhh__async_cb_4", "__ZN7LoRaPHY11handle_sendEPhh__async_cb_5", "__ZN7LoRaPHY12get_next_ADREbRaS0_Rj__async_cb", "__ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb", "__ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb_214", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_224", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_221", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_223", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_222", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_225", "__ZN18LoRaWANTimeHandler4stopER13timer_event_t__async_cb", "_mbedtls_ccm_setkey__async_cb_37", "_mbedtls_ccm_setkey__async_cb_36", "_mbedtls_ccm_setkey__async_cb", "_mbedtls_ccm_free__async_cb", "_mbedtls_cipher_free__async_cb", "_mbedtls_cipher_setup__async_cb", "_mbedtls_cipher_setkey__async_cb", "_mbedtls_cipher_setkey__async_cb_345", "_mbedtls_cipher_update__async_cb", "_mbedtls_cipher_update__async_cb_247", "_mbedtls_cipher_update__async_cb_245", "_mbedtls_cipher_update__async_cb_246", "_ccm_aes_setkey_wrap__async_cb", "_ccm_ctx_free__async_cb", "_gcm_aes_setkey_wrap__async_cb", "_gcm_ctx_free__async_cb", "_mbedtls_cipher_cmac_starts__async_cb", "_mbedtls_cipher_cmac_update__async_cb_120", "_mbedtls_cipher_cmac_update__async_cb_119", "_mbedtls_cipher_cmac_update__async_cb", "_mbedtls_cipher_cmac_finish__async_cb_229", "_mbedtls_cipher_cmac_finish__async_cb", "_mbedtls_gcm_setkey__async_cb_200", "_mbedtls_gcm_setkey__async_cb_199", "_mbedtls_gcm_setkey__async_cb_198", "_mbedtls_gcm_setkey__async_cb", "_mbedtls_gcm_update__async_cb", "_mbedtls_gcm_free__async_cb", "_ticker_set_handler__async_cb", "_initialize__async_cb", "_initialize__async_cb_73", "_initialize__async_cb_78", "_initialize__async_cb_77", "_initialize__async_cb_74", "_initialize__async_cb_75", "_initialize__async_cb_76", "_schedule_interrupt__async_cb", "_schedule_interrupt__async_cb_54", "_schedule_interrupt__async_cb_55", "_schedule_interrupt__async_cb_56", "_schedule_interrupt__async_cb_57", "_schedule_interrupt__async_cb_58", "_schedule_interrupt__async_cb_59", "_ticker_remove_event__async_cb", "_ticker_read_us__async_cb_31", "_ticker_read_us__async_cb", "_mbed_assert_internal__async_cb", "_mbed_die__async_cb_381", "_mbed_die__async_cb_380", "_mbed_die__async_cb_379", "_mbed_die__async_cb_378", "_mbed_die__async_cb_377", "_mbed_die__async_cb_376", "_mbed_die__async_cb_375", "_mbed_die__async_cb_374", "_mbed_die__async_cb_373", "_mbed_die__async_cb_372", "_mbed_die__async_cb_371", "_mbed_die__async_cb_370", "_mbed_die__async_cb_369", "_mbed_die__async_cb_368", "_mbed_die__async_cb_367", "_mbed_die__async_cb", "_mbed_error_printf__async_cb", "_mbed_error_vfprintf__async_cb", "_mbed_error_vfprintf__async_cb_397", "_mbed_error_vfprintf__async_cb_396", "_handle_interrupt_in__async_cb", "_serial_putc__async_cb_299", "_serial_putc__async_cb", "__ZN4mbed6TickerD2Ev__async_cb", "__ZN4mbed6TickerD2Ev__async_cb_207", "__ZN4mbed6TickerD0Ev__async_cb", "__ZN4mbed6TickerD0Ev__async_cb_215", "__ZN4mbed6Ticker7handlerEv__async_cb", "_invoke_ticker__async_cb_132", "_invoke_ticker__async_cb", "__ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv__async_cb", "_wait_ms__async_cb", "__GLOBAL__sub_I_main_cpp__async_cb", "__GLOBAL__sub_I_main_cpp__async_cb_346", "_main__async_cb_440", "_main__async_cb_439", "_main__async_cb_438", "_main__async_cb_442", "_main__async_cb", "__ZL18lora_event_handler11lora_events", "_main__async_cb_433", "_main__async_cb_434", "_main__async_cb_435", "_main__async_cb_437", "_main__async_cb_436", "_main__async_cb_441", "__ZL12send_messagev__async_cb_389", "__ZL12send_messagev__async_cb", "__ZL18lora_event_handler11lora_events__async_cb_329", "__ZL18lora_event_handler11lora_events__async_cb_328", "__ZL18lora_event_handler11lora_events__async_cb_327", "__ZL18lora_event_handler11lora_events__async_cb_326", "__ZL18lora_event_handler11lora_events__async_cb", "__ZL18lora_event_handler11lora_events__async_cb_325", "__ZN4mbed8CallbackIFv11lora_eventsEE13function_callIPS2_EEvPKvS1___async_cb", "_putc__async_cb_7", "_putc__async_cb", "___overflow__async_cb", "_fflush__async_cb_289", "_fflush__async_cb_288", "_fflush__async_cb_290", "_fflush__async_cb", "___fflush_unlocked__async_cb", "___fflush_unlocked__async_cb_294", "_vfprintf__async_cb", "_snprintf__async_cb", "_vsnprintf__async_cb", "_sprintf__async_cb", "_vsprintf__async_cb", "_printf__async_cb", "_putchar__async_cb", "_fputc__async_cb_287", "_fputc__async_cb", "_puts__async_cb", "__ZL25default_terminate_handlerv__async_cb", "__ZL25default_terminate_handlerv__async_cb_269", "_abort_message__async_cb", "_abort_message__async_cb_286", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_218", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb", "___dynamic_cast__async_cb", "___dynamic_cast__async_cb_53", "__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_13", "__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv", "__ZSt11__terminatePFvvE__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_140", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_158", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_157", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_156", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_155", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_174", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "___cxa_can_catch__async_cb", "___cxa_is_pointer_type__async_cb
var debug_table_vii = ["0", "__ZN16SX1276_LoRaRadio10init_radioEP12radio_events", "__ZN16SX1276_LoRaRadio7receiveEj", "__ZN16SX1276_LoRaRadio11set_channelEj", "__ZN16SX1276_LoRaRadio18set_public_networkEb", "__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPvPKv", "__ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_", "__ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv", "__ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_", "__ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv", "__ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_", "__ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv", "__ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_", "__ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv", "__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPvPKv", "__ZN4mbed8CallbackIFvPhtsaEE13function_moveINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPvPKv", "__ZN7LoRaPHY16set_last_tx_doneEP24set_band_txdone_params_t", "__ZN7LoRaPHY13apply_cf_listEP15cflist_params_t", "__ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv", "__ZN4mbed8CallbackIFv11lora_eventsEE13function_callIPS2_EEvPKvS1_", "__ZN4mbed8CallbackIFv11lora_eventsEE13function_moveIPS2_EEvPvPKv", "__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t", "__ZN12LoRaWANStack23mlme_indication_handlerEP25loramac_mlme_indication_t", "0", "0", "0", "0", "0", "0"];
var debug_table_viii = ["0", "__ZN16SX1276_LoRaRadio4sendEPhh", "__ZN16SX1276_LoRaRadio22set_max_payload_lengthE10modem_typeh", "__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj", "_add_pkcs_padding", "0", "0", "0"];
var debug_table_viiii = ["0", "__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat", "__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "0", "0", "0"];
var debug_table_viiiii = ["0", "__ZN4mbed8CallbackIFvPhtsaEE13function_callINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPKvS1_tsa", "__ZN7LoRaPHY21compute_rx_win_paramsEahjP18rx_config_params_t", "__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa", "__ZN7LoRaMac14handle_rx_doneEPhtsa"];
var debug_table_viiiiii = ["0", "__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib", "__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"];
var debug_table_viiiiiiiiiiiiii = ["0", "__ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj"];
var debug_table_viiiiiiiiiiiiiii = ["0", "__ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb"];
function nullFunc_i(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: i: " + debug_table_i[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viii: " + debug_table_viii[x] + "  v: " + debug_table_v[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: ii: " + debug_table_ii[x] + "  iiii: " + debug_table_iiii[x] + "  i: " + debug_table_i[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  viii: " + debug_table_viii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  v: " + debug_table_v[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiii: " + debug_table_iiiii[x] + "  i: " + debug_table_i[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vi: " + debug_table_vi[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  i: " + debug_table_i[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: v: " + debug_table_v[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  i: " + debug_table_i[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vi: " + debug_table_vi[x] + "  viii: " + debug_table_viii[x] + "  v: " + debug_table_v[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  i: " + debug_table_i[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiii: " + debug_table_viiii[x] + "  v: " + debug_table_v[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  i: " + debug_table_i[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  i: " + debug_table_i[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function nullFunc_viiiiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  v: " + debug_table_v[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function nullFunc_viiiiiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiiiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  v: " + debug_table_v[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14) {
  try {
    Module["dynCall_viiiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
  try {
    Module["dynCall_viiiiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_i": nullFunc_i, "nullFunc_ii": nullFunc_ii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_v": nullFunc_v, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_viii": nullFunc_viii, "nullFunc_viiii": nullFunc_viiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_viiiiiiiiiiiiii": nullFunc_viiiiiiiiiiiiii, "nullFunc_viiiiiiiiiiiiiii": nullFunc_viiiiiiiiiiiiiii, "invoke_i": invoke_i, "invoke_ii": invoke_ii, "invoke_iii": invoke_iii, "invoke_iiii": invoke_iiii, "invoke_iiiii": invoke_iiiii, "invoke_iiiiii": invoke_iiiiii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_v": invoke_v, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_viii": invoke_viii, "invoke_viiii": invoke_viiii, "invoke_viiiii": invoke_viiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_viiiiiiiiiiiiii": invoke_viiiiiiiiiiiiii, "invoke_viiiiiiiiiiiiiii": invoke_viiiiiiiiiiiiiii, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "___cxa_begin_catch": ___cxa_begin_catch, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___cxa_pure_virtual": ___cxa_pure_virtual, "___gxx_personality_v0": ___gxx_personality_v0, "___lock": ___lock, "___resumeException": ___resumeException, "___setErrNo": ___setErrNo, "___syscall140": ___syscall140, "___syscall146": ___syscall146, "___syscall54": ___syscall54, "___syscall6": ___syscall6, "___unlock": ___unlock, "_abort": _abort, "_emscripten_asm_const_i": _emscripten_asm_const_i, "_emscripten_asm_const_ii": _emscripten_asm_const_ii, "_emscripten_asm_const_iii": _emscripten_asm_const_iii, "_emscripten_asm_const_iiii": _emscripten_asm_const_iiii, "_emscripten_asm_const_iiiiii": _emscripten_asm_const_iiiiii, "_emscripten_asm_const_iiiiiii": _emscripten_asm_const_iiiiiii, "_emscripten_get_now": _emscripten_get_now, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_emscripten_sleep": _emscripten_sleep, "_gettimeofday": _gettimeofday, "_llvm_ceil_f64": _llvm_ceil_f64, "_llvm_floor_f64": _llvm_floor_f64, "_llvm_trap": _llvm_trap, "_pthread_cond_init": _pthread_cond_init, "_pthread_cond_signal": _pthread_cond_signal, "_pthread_cond_timedwait": _pthread_cond_timedwait, "_pthread_cond_wait": _pthread_cond_wait, "_pthread_getspecific": _pthread_getspecific, "_pthread_key_create": _pthread_key_create, "_pthread_mutex_init": _pthread_mutex_init, "_pthread_once": _pthread_once, "_pthread_setspecific": _pthread_setspecific, "flush_NO_FILESYSTEM": flush_NO_FILESYSTEM, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8, "___async": ___async, "___async_unwind": ___async_unwind, "___async_retval": ___async_retval, "___async_cur_frame": ___async_cur_frame };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'use asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;
  var ___async=env.___async|0;
  var ___async_unwind=env.___async_unwind|0;
  var ___async_retval=env.___async_retval|0;
  var ___async_cur_frame=env.___async_cur_frame|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_iiiiiii=env.nullFunc_iiiiiii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_viiiiiiiiiiiiii=env.nullFunc_viiiiiiiiiiiiii;
  var nullFunc_viiiiiiiiiiiiiii=env.nullFunc_viiiiiiiiiiiiiii;
  var invoke_i=env.invoke_i;
  var invoke_ii=env.invoke_ii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_v=env.invoke_v;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_viii=env.invoke_viii;
  var invoke_viiii=env.invoke_viiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_viiiiiiiiiiiiii=env.invoke_viiiiiiiiiiiiii;
  var invoke_viiiiiiiiiiiiiii=env.invoke_viiiiiiiiiiiiiii;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var ___lock=env.___lock;
  var ___resumeException=env.___resumeException;
  var ___setErrNo=env.___setErrNo;
  var ___syscall140=env.___syscall140;
  var ___syscall146=env.___syscall146;
  var ___syscall54=env.___syscall54;
  var ___syscall6=env.___syscall6;
  var ___unlock=env.___unlock;
  var _abort=env._abort;
  var _emscripten_asm_const_i=env._emscripten_asm_const_i;
  var _emscripten_asm_const_ii=env._emscripten_asm_const_ii;
  var _emscripten_asm_const_iii=env._emscripten_asm_const_iii;
  var _emscripten_asm_const_iiii=env._emscripten_asm_const_iiii;
  var _emscripten_asm_const_iiiiii=env._emscripten_asm_const_iiiiii;
  var _emscripten_asm_const_iiiiiii=env._emscripten_asm_const_iiiiiii;
  var _emscripten_get_now=env._emscripten_get_now;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _emscripten_sleep=env._emscripten_sleep;
  var _gettimeofday=env._gettimeofday;
  var _llvm_ceil_f64=env._llvm_ceil_f64;
  var _llvm_floor_f64=env._llvm_floor_f64;
  var _llvm_trap=env._llvm_trap;
  var _pthread_cond_init=env._pthread_cond_init;
  var _pthread_cond_signal=env._pthread_cond_signal;
  var _pthread_cond_timedwait=env._pthread_cond_timedwait;
  var _pthread_cond_wait=env._pthread_cond_wait;
  var _pthread_getspecific=env._pthread_getspecific;
  var _pthread_key_create=env._pthread_key_create;
  var _pthread_mutex_init=env._pthread_mutex_init;
  var _pthread_once=env._pthread_once;
  var _pthread_setspecific=env._pthread_setspecific;
  var flush_NO_FILESYSTEM=env.flush_NO_FILESYSTEM;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0$i = 0, $$095113 = 0, $$096$be = 0, $$1$lcssa = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $130 = 0, $132 = 0, $134 = 0, $136 = 0, $139 = 0, $14 = 0, $150 = 0, $151 = 0, $16 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $238 = 0, $24 = 0, $242 = 0, $247 = 0, $248 = 0, $251 = 0, $257 = 0, $26 = 0, $260 = 0, $265 = 0, $273 = 0, $28 = 0, $292 = 0, $30 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $373 = 0, $374 = 0, $38 = 0, $4 = 0, $40 = 0, $411 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $487 = 0, $491 = 0, $495 = 0, $498 = 0, $50 = 0, $504 = 0, $507 = 0, $508 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $6 = 0, $60 = 0, $604 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $686 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $div = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 16272
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16274
 $4 = HEAP8[$0 + 8 >> 0] | 0; //@line 16276
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16278
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16280
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16282
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16284
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16286
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 16288
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 16290
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 16292
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 16294
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 16296
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 16298
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 16300
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 16302
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 16304
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 16306
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 16308
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 16310
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 16312
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 16314
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 16316
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 16318
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 16320
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 16322
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 16324
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 16326
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 16328
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 16330
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 16332
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 16334
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 16336
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 16338
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 16340
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 16342
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 16344
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 16346
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 16348
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 16350
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 16352
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 16354
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 16356
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 16358
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 16360
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 16362
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 16364
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 16366
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 16368
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 16370
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 16372
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 16374
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 16376
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 16378
 $108 = HEAP8[$0 + 216 >> 0] | 0; //@line 16380
 $110 = HEAP8[$0 + 217 >> 0] | 0; //@line 16382
 $112 = HEAP32[$0 + 220 >> 2] | 0; //@line 16384
 $114 = HEAP32[$0 + 224 >> 2] | 0; //@line 16386
 $116 = HEAP32[$0 + 228 >> 2] | 0; //@line 16388
 $118 = HEAP32[$0 + 232 >> 2] | 0; //@line 16390
 $120 = HEAP32[$0 + 236 >> 2] | 0; //@line 16392
 $122 = HEAP32[$0 + 240 >> 2] | 0; //@line 16394
 $124 = HEAP32[$0 + 244 >> 2] | 0; //@line 16396
 $126 = HEAP32[$0 + 248 >> 2] | 0; //@line 16398
 $128 = HEAP32[$0 + 252 >> 2] | 0; //@line 16400
 $130 = HEAP32[$0 + 256 >> 2] | 0; //@line 16402
 $132 = HEAP32[$0 + 260 >> 2] | 0; //@line 16404
 $134 = HEAP32[$0 + 264 >> 2] | 0; //@line 16406
 $136 = HEAP32[$0 + 268 >> 2] | 0; //@line 16408
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 16410
 if (($AsyncRetVal & 7) == 7) {
  HEAP8[$50 >> 0] = HEAP8[$10 >> 0] | 0; //@line 16415
  HEAP8[$18 >> 0] = HEAP8[$64 >> 0] | 0; //@line 16417
  HEAP8[$26 >> 0] = HEAP8[$82 >> 0] | 0; //@line 16419
 }
 $238 = HEAP8[$88 >> 0] | 0; //@line 16421
 if (($238 & 255) > 4) {
  $div = ($238 & 255) / 5 | 0; //@line 16424
  $242 = (-128 - (HEAP8[$136 >> 0] | 0) & 255) + -1 | 0; //@line 16429
  $$095113 = 0; //@line 16430
  $248 = HEAP8[$102 >> 0] | 0; //@line 16430
  while (1) {
   $247 = $248 & 255; //@line 16432
   if (($242 | 0) > ($247 | 0)) {
    $251 = $248 + 2 << 24 >> 24; //@line 16436
    HEAP8[$124 + 4 + $247 >> 0] = 3; //@line 16440
    HEAP8[$102 >> 0] = $251; //@line 16441
    HEAP8[($248 + 1 & 255) + ($124 + 4) >> 0] = $AsyncRetVal; //@line 16442
    HEAP8[$74 >> 0] = 1; //@line 16443
    $$0$i = 0; //@line 16444
    $686 = $251; //@line 16444
   } else {
    $$0$i = -1e3; //@line 16446
    $686 = $248; //@line 16446
   }
   $$095113 = $$095113 + 1 << 24 >> 24; //@line 16448
   if (($$095113 & 255) >= ($div & 255)) {
    $$1$lcssa = $$0$i; //@line 16453
    break;
   } else {
    $248 = $686; //@line 16451
   }
  }
 } else {
  $$1$lcssa = $76; //@line 16458
 }
 $$0$be = $100 + 255 + ($238 & 255) & 255; //@line 16464
 $$096$be = $$1$lcssa; //@line 16464
 L13 : while (1) {
  if (($$0$be & 255) >= ($110 & 255)) {
   label = 36; //@line 16468
   break;
  }
  $139 = $$0$be + 1 << 24 >> 24; //@line 16472
  switch (HEAP8[$120 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 16477
    break L13;
    break;
   }
  case 5:
   {
    label = 17; //@line 16482
    break L13;
    break;
   }
  case 7:
   {
    label = 22; //@line 16487
    break L13;
    break;
   }
  case 9:
   {
    label = 27; //@line 16492
    break L13;
    break;
   }
  case 10:
   {
    label = 32; //@line 16497
    break L13;
    break;
   }
  case 2:
   {
    HEAP32[$24 >> 2] = 0; //@line 16502
    HEAP8[$104 >> 0] = HEAP8[$120 + ($139 & 255) >> 0] | 0; //@line 16507
    HEAP8[$130 >> 0] = HEAP8[$120 + ($$0$be + 2 & 255) >> 0] | 0; //@line 16512
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 16513
    continue L13;
    break;
   }
  case 4:
   {
    $257 = $$0$be + 2 << 24 >> 24; //@line 16518
    $260 = HEAP8[$120 + ($139 & 255) >> 0] | 0; //@line 16521
    HEAP8[$84 >> 0] = $260; //@line 16522
    HEAP16[$62 >> 1] = 1 << ($260 & 255); //@line 16526
    $265 = HEAP8[$102 >> 0] | 0; //@line 16528
    if (($265 & 255) >= (-128 - (HEAP8[$136 >> 0] | 0) & 255)) {
     $$0$be = $257; //@line 16532
     $$096$be = -1e3; //@line 16532
     continue L13;
    }
    HEAP8[$102 >> 0] = $265 + 1 << 24 >> 24; //@line 16538
    HEAP8[($265 & 255) + ($124 + 4) >> 0] = 4; //@line 16539
    HEAP8[$74 >> 0] = 1; //@line 16540
    $$0$be = $257; //@line 16541
    $$096$be = 0; //@line 16541
    continue L13;
    break;
   }
  case 6:
   {
    $373 = HEAP8[$102 >> 0] | 0; //@line 16547
    $374 = $373 & 255; //@line 16548
    if (((-128 - (HEAP8[$136 >> 0] | 0) & 255) + -2 | 0) <= ($374 | 0)) {
     $$0$be = $139; //@line 16554
     $$096$be = -1e3; //@line 16554
     continue L13;
    }
    HEAP8[$124 + 4 + $374 >> 0] = 6; //@line 16559
    HEAP8[($373 + 1 & 255) + ($124 + 4) >> 0] = -1; //@line 16563
    HEAP8[$102 >> 0] = $373 + 3 << 24 >> 24; //@line 16565
    HEAP8[($373 + 2 & 255) + ($124 + 4) >> 0] = $108; //@line 16568
    HEAP8[$74 >> 0] = 1; //@line 16569
    $$0$be = $139; //@line 16570
    $$096$be = 0; //@line 16570
    continue L13;
    break;
   }
  case 8:
   {
    $487 = $$0$be + 2 << 24 >> 24; //@line 16575
    $491 = HEAP8[$120 + ($139 & 255) >> 0] & 15; //@line 16579
    $495 = ($491 + ($491 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 16584
    HEAP32[$46 >> 2] = $495; //@line 16585
    HEAP32[$56 >> 2] = $495 + 1e3; //@line 16587
    $498 = HEAP8[$102 >> 0] | 0; //@line 16589
    if (($498 & 255) >= (-128 - (HEAP8[$136 >> 0] | 0) & 255)) {
     $$0$be = $487; //@line 16593
     $$096$be = -1e3; //@line 16593
     continue L13;
    }
    HEAP8[$102 >> 0] = $498 + 1 << 24 >> 24; //@line 16599
    HEAP8[($498 & 255) + ($124 + 4) >> 0] = 8; //@line 16600
    HEAP8[$12 >> 0] = 1; //@line 16601
    HEAP8[$74 >> 0] = 1; //@line 16602
    $$0$be = $487; //@line 16603
    $$096$be = 0; //@line 16603
    continue L13;
    break;
   }
  default:
   {
    $$0$be = $139; //@line 16608
    $$096$be = -1013; //@line 16608
    continue L13;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$10 >> 0] = 0; //@line 16614
  HEAP8[$64 >> 0] = 0; //@line 16615
  HEAP8[$82 >> 0] = 0; //@line 16616
  HEAP8[$88 >> 0] = 0; //@line 16617
  $150 = $139 & 255; //@line 16618
  $151 = $150 + -1 | 0; //@line 16619
  HEAP32[$116 >> 2] = $120 + $151; //@line 16621
  HEAP8[$68 >> 0] = $14 - $151; //@line 16624
  HEAP8[$78 >> 0] = HEAP8[$90 >> 0] | 0; //@line 16626
  HEAP8[$34 >> 0] = HEAP8[$40 >> 0] | 0; //@line 16628
  HEAP8[$44 >> 0] = HEAP8[$50 >> 0] | 0; //@line 16630
  HEAP8[$2 >> 0] = HEAP8[$18 >> 0] | 0; //@line 16632
  HEAP8[$112 >> 0] = HEAP8[$26 >> 0] | 0; //@line 16634
  $162 = HEAP32[(HEAP32[$132 >> 2] | 0) + 36 >> 2] | 0; //@line 16637
  $ReallocAsyncCtx = _emscripten_realloc_async_context(272) | 0; //@line 16638
  $163 = FUNCTION_TABLE_iiiiiii[$162 & 3]($98, $20, $10, $64, $82, $88) | 0; //@line 16639
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 504; //@line 16642
   $164 = $ReallocAsyncCtx + 4 | 0; //@line 16643
   HEAP32[$164 >> 2] = $2; //@line 16644
   $165 = $ReallocAsyncCtx + 8 | 0; //@line 16645
   HEAP8[$165 >> 0] = $4; //@line 16646
   $166 = $ReallocAsyncCtx + 12 | 0; //@line 16647
   HEAP32[$166 >> 2] = $6; //@line 16648
   $167 = $ReallocAsyncCtx + 16 | 0; //@line 16649
   HEAP32[$167 >> 2] = $8; //@line 16650
   $168 = $ReallocAsyncCtx + 20 | 0; //@line 16651
   HEAP32[$168 >> 2] = $10; //@line 16652
   $169 = $ReallocAsyncCtx + 24 | 0; //@line 16653
   HEAP32[$169 >> 2] = $12; //@line 16654
   $170 = $ReallocAsyncCtx + 28 | 0; //@line 16655
   HEAP32[$170 >> 2] = $14; //@line 16656
   $171 = $ReallocAsyncCtx + 32 | 0; //@line 16657
   HEAP32[$171 >> 2] = $16; //@line 16658
   $172 = $ReallocAsyncCtx + 36 | 0; //@line 16659
   HEAP32[$172 >> 2] = $18; //@line 16660
   $173 = $ReallocAsyncCtx + 40 | 0; //@line 16661
   HEAP32[$173 >> 2] = $20; //@line 16662
   $174 = $ReallocAsyncCtx + 44 | 0; //@line 16663
   HEAP32[$174 >> 2] = $22; //@line 16664
   $175 = $ReallocAsyncCtx + 48 | 0; //@line 16665
   HEAP32[$175 >> 2] = $24; //@line 16666
   $176 = $ReallocAsyncCtx + 52 | 0; //@line 16667
   HEAP32[$176 >> 2] = $26; //@line 16668
   $177 = $ReallocAsyncCtx + 56 | 0; //@line 16669
   HEAP32[$177 >> 2] = $28; //@line 16670
   $178 = $ReallocAsyncCtx + 60 | 0; //@line 16671
   HEAP32[$178 >> 2] = $30; //@line 16672
   $179 = $ReallocAsyncCtx + 64 | 0; //@line 16673
   HEAP32[$179 >> 2] = $32; //@line 16674
   $180 = $ReallocAsyncCtx + 68 | 0; //@line 16675
   HEAP32[$180 >> 2] = $34; //@line 16676
   $181 = $ReallocAsyncCtx + 72 | 0; //@line 16677
   HEAP32[$181 >> 2] = $36; //@line 16678
   $182 = $ReallocAsyncCtx + 76 | 0; //@line 16679
   HEAP32[$182 >> 2] = $38; //@line 16680
   $183 = $ReallocAsyncCtx + 80 | 0; //@line 16681
   HEAP32[$183 >> 2] = $40; //@line 16682
   $184 = $ReallocAsyncCtx + 84 | 0; //@line 16683
   HEAP32[$184 >> 2] = $42; //@line 16684
   $185 = $ReallocAsyncCtx + 88 | 0; //@line 16685
   HEAP32[$185 >> 2] = $44; //@line 16686
   $186 = $ReallocAsyncCtx + 92 | 0; //@line 16687
   HEAP32[$186 >> 2] = $46; //@line 16688
   $187 = $ReallocAsyncCtx + 96 | 0; //@line 16689
   HEAP32[$187 >> 2] = $48; //@line 16690
   $188 = $ReallocAsyncCtx + 100 | 0; //@line 16691
   HEAP32[$188 >> 2] = $50; //@line 16692
   $189 = $ReallocAsyncCtx + 104 | 0; //@line 16693
   HEAP32[$189 >> 2] = $52; //@line 16694
   $190 = $ReallocAsyncCtx + 108 | 0; //@line 16695
   HEAP32[$190 >> 2] = $54; //@line 16696
   $191 = $ReallocAsyncCtx + 112 | 0; //@line 16697
   HEAP32[$191 >> 2] = $56; //@line 16698
   $192 = $ReallocAsyncCtx + 116 | 0; //@line 16699
   HEAP32[$192 >> 2] = $58; //@line 16700
   $193 = $ReallocAsyncCtx + 120 | 0; //@line 16701
   HEAP32[$193 >> 2] = $60; //@line 16702
   $194 = $ReallocAsyncCtx + 124 | 0; //@line 16703
   HEAP32[$194 >> 2] = $62; //@line 16704
   $195 = $ReallocAsyncCtx + 128 | 0; //@line 16705
   HEAP32[$195 >> 2] = $64; //@line 16706
   $196 = $ReallocAsyncCtx + 132 | 0; //@line 16707
   HEAP32[$196 >> 2] = $66; //@line 16708
   $197 = $ReallocAsyncCtx + 136 | 0; //@line 16709
   HEAP32[$197 >> 2] = $68; //@line 16710
   $198 = $ReallocAsyncCtx + 140 | 0; //@line 16711
   HEAP32[$198 >> 2] = $70; //@line 16712
   $199 = $ReallocAsyncCtx + 144 | 0; //@line 16713
   HEAP32[$199 >> 2] = $72; //@line 16714
   $200 = $ReallocAsyncCtx + 148 | 0; //@line 16715
   HEAP32[$200 >> 2] = $74; //@line 16716
   $201 = $ReallocAsyncCtx + 152 | 0; //@line 16717
   HEAP32[$201 >> 2] = $$096$be; //@line 16718
   $202 = $ReallocAsyncCtx + 156 | 0; //@line 16719
   HEAP32[$202 >> 2] = $78; //@line 16720
   $203 = $ReallocAsyncCtx + 160 | 0; //@line 16721
   HEAP32[$203 >> 2] = $80; //@line 16722
   $204 = $ReallocAsyncCtx + 164 | 0; //@line 16723
   HEAP32[$204 >> 2] = $82; //@line 16724
   $205 = $ReallocAsyncCtx + 168 | 0; //@line 16725
   HEAP32[$205 >> 2] = $84; //@line 16726
   $206 = $ReallocAsyncCtx + 172 | 0; //@line 16727
   HEAP32[$206 >> 2] = $86; //@line 16728
   $207 = $ReallocAsyncCtx + 176 | 0; //@line 16729
   HEAP32[$207 >> 2] = $88; //@line 16730
   $208 = $ReallocAsyncCtx + 180 | 0; //@line 16731
   HEAP32[$208 >> 2] = $90; //@line 16732
   $209 = $ReallocAsyncCtx + 184 | 0; //@line 16733
   HEAP32[$209 >> 2] = $92; //@line 16734
   $210 = $ReallocAsyncCtx + 188 | 0; //@line 16735
   HEAP32[$210 >> 2] = $94; //@line 16736
   $211 = $ReallocAsyncCtx + 192 | 0; //@line 16737
   HEAP32[$211 >> 2] = $96; //@line 16738
   $212 = $ReallocAsyncCtx + 196 | 0; //@line 16739
   HEAP32[$212 >> 2] = $98; //@line 16740
   $213 = $ReallocAsyncCtx + 200 | 0; //@line 16741
   HEAP32[$213 >> 2] = $150; //@line 16742
   $214 = $ReallocAsyncCtx + 204 | 0; //@line 16743
   HEAP32[$214 >> 2] = $102; //@line 16744
   $215 = $ReallocAsyncCtx + 208 | 0; //@line 16745
   HEAP32[$215 >> 2] = $104; //@line 16746
   $216 = $ReallocAsyncCtx + 212 | 0; //@line 16747
   HEAP32[$216 >> 2] = $106; //@line 16748
   $217 = $ReallocAsyncCtx + 216 | 0; //@line 16749
   HEAP8[$217 >> 0] = $108; //@line 16750
   $218 = $ReallocAsyncCtx + 217 | 0; //@line 16751
   HEAP8[$218 >> 0] = $110; //@line 16752
   $219 = $ReallocAsyncCtx + 220 | 0; //@line 16753
   HEAP32[$219 >> 2] = $112; //@line 16754
   $220 = $ReallocAsyncCtx + 224 | 0; //@line 16755
   HEAP32[$220 >> 2] = $114; //@line 16756
   $221 = $ReallocAsyncCtx + 228 | 0; //@line 16757
   HEAP32[$221 >> 2] = $116; //@line 16758
   $222 = $ReallocAsyncCtx + 232 | 0; //@line 16759
   HEAP32[$222 >> 2] = $118; //@line 16760
   $223 = $ReallocAsyncCtx + 236 | 0; //@line 16761
   HEAP32[$223 >> 2] = $120; //@line 16762
   $224 = $ReallocAsyncCtx + 240 | 0; //@line 16763
   HEAP32[$224 >> 2] = $122; //@line 16764
   $225 = $ReallocAsyncCtx + 244 | 0; //@line 16765
   HEAP32[$225 >> 2] = $124; //@line 16766
   $226 = $ReallocAsyncCtx + 248 | 0; //@line 16767
   HEAP32[$226 >> 2] = $126; //@line 16768
   $227 = $ReallocAsyncCtx + 252 | 0; //@line 16769
   HEAP32[$227 >> 2] = $128; //@line 16770
   $228 = $ReallocAsyncCtx + 256 | 0; //@line 16771
   HEAP32[$228 >> 2] = $130; //@line 16772
   $229 = $ReallocAsyncCtx + 260 | 0; //@line 16773
   HEAP32[$229 >> 2] = $132; //@line 16774
   $230 = $ReallocAsyncCtx + 264 | 0; //@line 16775
   HEAP32[$230 >> 2] = $134; //@line 16776
   $231 = $ReallocAsyncCtx + 268 | 0; //@line 16777
   HEAP32[$231 >> 2] = $136; //@line 16778
   sp = STACKTOP; //@line 16779
   return;
  }
  HEAP8[___async_retval >> 0] = $163; //@line 16783
  ___async_unwind = 0; //@line 16784
  HEAP32[$ReallocAsyncCtx >> 2] = 504; //@line 16785
  $164 = $ReallocAsyncCtx + 4 | 0; //@line 16786
  HEAP32[$164 >> 2] = $2; //@line 16787
  $165 = $ReallocAsyncCtx + 8 | 0; //@line 16788
  HEAP8[$165 >> 0] = $4; //@line 16789
  $166 = $ReallocAsyncCtx + 12 | 0; //@line 16790
  HEAP32[$166 >> 2] = $6; //@line 16791
  $167 = $ReallocAsyncCtx + 16 | 0; //@line 16792
  HEAP32[$167 >> 2] = $8; //@line 16793
  $168 = $ReallocAsyncCtx + 20 | 0; //@line 16794
  HEAP32[$168 >> 2] = $10; //@line 16795
  $169 = $ReallocAsyncCtx + 24 | 0; //@line 16796
  HEAP32[$169 >> 2] = $12; //@line 16797
  $170 = $ReallocAsyncCtx + 28 | 0; //@line 16798
  HEAP32[$170 >> 2] = $14; //@line 16799
  $171 = $ReallocAsyncCtx + 32 | 0; //@line 16800
  HEAP32[$171 >> 2] = $16; //@line 16801
  $172 = $ReallocAsyncCtx + 36 | 0; //@line 16802
  HEAP32[$172 >> 2] = $18; //@line 16803
  $173 = $ReallocAsyncCtx + 40 | 0; //@line 16804
  HEAP32[$173 >> 2] = $20; //@line 16805
  $174 = $ReallocAsyncCtx + 44 | 0; //@line 16806
  HEAP32[$174 >> 2] = $22; //@line 16807
  $175 = $ReallocAsyncCtx + 48 | 0; //@line 16808
  HEAP32[$175 >> 2] = $24; //@line 16809
  $176 = $ReallocAsyncCtx + 52 | 0; //@line 16810
  HEAP32[$176 >> 2] = $26; //@line 16811
  $177 = $ReallocAsyncCtx + 56 | 0; //@line 16812
  HEAP32[$177 >> 2] = $28; //@line 16813
  $178 = $ReallocAsyncCtx + 60 | 0; //@line 16814
  HEAP32[$178 >> 2] = $30; //@line 16815
  $179 = $ReallocAsyncCtx + 64 | 0; //@line 16816
  HEAP32[$179 >> 2] = $32; //@line 16817
  $180 = $ReallocAsyncCtx + 68 | 0; //@line 16818
  HEAP32[$180 >> 2] = $34; //@line 16819
  $181 = $ReallocAsyncCtx + 72 | 0; //@line 16820
  HEAP32[$181 >> 2] = $36; //@line 16821
  $182 = $ReallocAsyncCtx + 76 | 0; //@line 16822
  HEAP32[$182 >> 2] = $38; //@line 16823
  $183 = $ReallocAsyncCtx + 80 | 0; //@line 16824
  HEAP32[$183 >> 2] = $40; //@line 16825
  $184 = $ReallocAsyncCtx + 84 | 0; //@line 16826
  HEAP32[$184 >> 2] = $42; //@line 16827
  $185 = $ReallocAsyncCtx + 88 | 0; //@line 16828
  HEAP32[$185 >> 2] = $44; //@line 16829
  $186 = $ReallocAsyncCtx + 92 | 0; //@line 16830
  HEAP32[$186 >> 2] = $46; //@line 16831
  $187 = $ReallocAsyncCtx + 96 | 0; //@line 16832
  HEAP32[$187 >> 2] = $48; //@line 16833
  $188 = $ReallocAsyncCtx + 100 | 0; //@line 16834
  HEAP32[$188 >> 2] = $50; //@line 16835
  $189 = $ReallocAsyncCtx + 104 | 0; //@line 16836
  HEAP32[$189 >> 2] = $52; //@line 16837
  $190 = $ReallocAsyncCtx + 108 | 0; //@line 16838
  HEAP32[$190 >> 2] = $54; //@line 16839
  $191 = $ReallocAsyncCtx + 112 | 0; //@line 16840
  HEAP32[$191 >> 2] = $56; //@line 16841
  $192 = $ReallocAsyncCtx + 116 | 0; //@line 16842
  HEAP32[$192 >> 2] = $58; //@line 16843
  $193 = $ReallocAsyncCtx + 120 | 0; //@line 16844
  HEAP32[$193 >> 2] = $60; //@line 16845
  $194 = $ReallocAsyncCtx + 124 | 0; //@line 16846
  HEAP32[$194 >> 2] = $62; //@line 16847
  $195 = $ReallocAsyncCtx + 128 | 0; //@line 16848
  HEAP32[$195 >> 2] = $64; //@line 16849
  $196 = $ReallocAsyncCtx + 132 | 0; //@line 16850
  HEAP32[$196 >> 2] = $66; //@line 16851
  $197 = $ReallocAsyncCtx + 136 | 0; //@line 16852
  HEAP32[$197 >> 2] = $68; //@line 16853
  $198 = $ReallocAsyncCtx + 140 | 0; //@line 16854
  HEAP32[$198 >> 2] = $70; //@line 16855
  $199 = $ReallocAsyncCtx + 144 | 0; //@line 16856
  HEAP32[$199 >> 2] = $72; //@line 16857
  $200 = $ReallocAsyncCtx + 148 | 0; //@line 16858
  HEAP32[$200 >> 2] = $74; //@line 16859
  $201 = $ReallocAsyncCtx + 152 | 0; //@line 16860
  HEAP32[$201 >> 2] = $$096$be; //@line 16861
  $202 = $ReallocAsyncCtx + 156 | 0; //@line 16862
  HEAP32[$202 >> 2] = $78; //@line 16863
  $203 = $ReallocAsyncCtx + 160 | 0; //@line 16864
  HEAP32[$203 >> 2] = $80; //@line 16865
  $204 = $ReallocAsyncCtx + 164 | 0; //@line 16866
  HEAP32[$204 >> 2] = $82; //@line 16867
  $205 = $ReallocAsyncCtx + 168 | 0; //@line 16868
  HEAP32[$205 >> 2] = $84; //@line 16869
  $206 = $ReallocAsyncCtx + 172 | 0; //@line 16870
  HEAP32[$206 >> 2] = $86; //@line 16871
  $207 = $ReallocAsyncCtx + 176 | 0; //@line 16872
  HEAP32[$207 >> 2] = $88; //@line 16873
  $208 = $ReallocAsyncCtx + 180 | 0; //@line 16874
  HEAP32[$208 >> 2] = $90; //@line 16875
  $209 = $ReallocAsyncCtx + 184 | 0; //@line 16876
  HEAP32[$209 >> 2] = $92; //@line 16877
  $210 = $ReallocAsyncCtx + 188 | 0; //@line 16878
  HEAP32[$210 >> 2] = $94; //@line 16879
  $211 = $ReallocAsyncCtx + 192 | 0; //@line 16880
  HEAP32[$211 >> 2] = $96; //@line 16881
  $212 = $ReallocAsyncCtx + 196 | 0; //@line 16882
  HEAP32[$212 >> 2] = $98; //@line 16883
  $213 = $ReallocAsyncCtx + 200 | 0; //@line 16884
  HEAP32[$213 >> 2] = $150; //@line 16885
  $214 = $ReallocAsyncCtx + 204 | 0; //@line 16886
  HEAP32[$214 >> 2] = $102; //@line 16887
  $215 = $ReallocAsyncCtx + 208 | 0; //@line 16888
  HEAP32[$215 >> 2] = $104; //@line 16889
  $216 = $ReallocAsyncCtx + 212 | 0; //@line 16890
  HEAP32[$216 >> 2] = $106; //@line 16891
  $217 = $ReallocAsyncCtx + 216 | 0; //@line 16892
  HEAP8[$217 >> 0] = $108; //@line 16893
  $218 = $ReallocAsyncCtx + 217 | 0; //@line 16894
  HEAP8[$218 >> 0] = $110; //@line 16895
  $219 = $ReallocAsyncCtx + 220 | 0; //@line 16896
  HEAP32[$219 >> 2] = $112; //@line 16897
  $220 = $ReallocAsyncCtx + 224 | 0; //@line 16898
  HEAP32[$220 >> 2] = $114; //@line 16899
  $221 = $ReallocAsyncCtx + 228 | 0; //@line 16900
  HEAP32[$221 >> 2] = $116; //@line 16901
  $222 = $ReallocAsyncCtx + 232 | 0; //@line 16902
  HEAP32[$222 >> 2] = $118; //@line 16903
  $223 = $ReallocAsyncCtx + 236 | 0; //@line 16904
  HEAP32[$223 >> 2] = $120; //@line 16905
  $224 = $ReallocAsyncCtx + 240 | 0; //@line 16906
  HEAP32[$224 >> 2] = $122; //@line 16907
  $225 = $ReallocAsyncCtx + 244 | 0; //@line 16908
  HEAP32[$225 >> 2] = $124; //@line 16909
  $226 = $ReallocAsyncCtx + 248 | 0; //@line 16910
  HEAP32[$226 >> 2] = $126; //@line 16911
  $227 = $ReallocAsyncCtx + 252 | 0; //@line 16912
  HEAP32[$227 >> 2] = $128; //@line 16913
  $228 = $ReallocAsyncCtx + 256 | 0; //@line 16914
  HEAP32[$228 >> 2] = $130; //@line 16915
  $229 = $ReallocAsyncCtx + 260 | 0; //@line 16916
  HEAP32[$229 >> 2] = $132; //@line 16917
  $230 = $ReallocAsyncCtx + 264 | 0; //@line 16918
  HEAP32[$230 >> 2] = $134; //@line 16919
  $231 = $ReallocAsyncCtx + 268 | 0; //@line 16920
  HEAP32[$231 >> 2] = $136; //@line 16921
  sp = STACKTOP; //@line 16922
  return;
 } else if ((label | 0) == 17) {
  $273 = HEAP8[$120 + ($139 & 255) >> 0] | 0; //@line 16928
  HEAP8[$48 >> 0] = ($273 & 255) >>> 4 & 7; //@line 16933
  HEAP8[$70 >> 0] = $273 & 15; //@line 16935
  $292 = $$0$be + 5 << 24 >> 24; //@line 16949
  HEAP32[$54 >> 2] = (HEAPU8[$120 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$120 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$120 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 16957
  $302 = HEAP32[(HEAP32[$36 >> 2] | 0) + 40 >> 2] | 0; //@line 16960
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(268) | 0; //@line 16961
  $303 = FUNCTION_TABLE_iii[$302 & 31]($98, $94) | 0; //@line 16962
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 505; //@line 16965
   $304 = $ReallocAsyncCtx2 + 4 | 0; //@line 16966
   HEAP32[$304 >> 2] = $2; //@line 16967
   $305 = $ReallocAsyncCtx2 + 8 | 0; //@line 16968
   HEAP32[$305 >> 2] = $6; //@line 16969
   $306 = $ReallocAsyncCtx2 + 12 | 0; //@line 16970
   HEAP32[$306 >> 2] = $8; //@line 16971
   $307 = $ReallocAsyncCtx2 + 16 | 0; //@line 16972
   HEAP32[$307 >> 2] = $132; //@line 16973
   $308 = $ReallocAsyncCtx2 + 20 | 0; //@line 16974
   HEAP32[$308 >> 2] = $10; //@line 16975
   $309 = $ReallocAsyncCtx2 + 24 | 0; //@line 16976
   HEAP32[$309 >> 2] = $12; //@line 16977
   $310 = $ReallocAsyncCtx2 + 28 | 0; //@line 16978
   HEAP32[$310 >> 2] = $14; //@line 16979
   $311 = $ReallocAsyncCtx2 + 32 | 0; //@line 16980
   HEAP32[$311 >> 2] = $16; //@line 16981
   $312 = $ReallocAsyncCtx2 + 36 | 0; //@line 16982
   HEAP32[$312 >> 2] = $18; //@line 16983
   $313 = $ReallocAsyncCtx2 + 40 | 0; //@line 16984
   HEAP32[$313 >> 2] = $20; //@line 16985
   $314 = $ReallocAsyncCtx2 + 44 | 0; //@line 16986
   HEAP32[$314 >> 2] = $22; //@line 16987
   $315 = $ReallocAsyncCtx2 + 48 | 0; //@line 16988
   HEAP8[$315 >> 0] = $292; //@line 16989
   $316 = $ReallocAsyncCtx2 + 52 | 0; //@line 16990
   HEAP32[$316 >> 2] = $24; //@line 16991
   $317 = $ReallocAsyncCtx2 + 56 | 0; //@line 16992
   HEAP32[$317 >> 2] = $26; //@line 16993
   $318 = $ReallocAsyncCtx2 + 60 | 0; //@line 16994
   HEAP32[$318 >> 2] = $28; //@line 16995
   $319 = $ReallocAsyncCtx2 + 64 | 0; //@line 16996
   HEAP32[$319 >> 2] = $30; //@line 16997
   $320 = $ReallocAsyncCtx2 + 68 | 0; //@line 16998
   HEAP32[$320 >> 2] = $32; //@line 16999
   $321 = $ReallocAsyncCtx2 + 72 | 0; //@line 17000
   HEAP32[$321 >> 2] = $34; //@line 17001
   $322 = $ReallocAsyncCtx2 + 76 | 0; //@line 17002
   HEAP32[$322 >> 2] = $36; //@line 17003
   $323 = $ReallocAsyncCtx2 + 80 | 0; //@line 17004
   HEAP32[$323 >> 2] = $38; //@line 17005
   $324 = $ReallocAsyncCtx2 + 84 | 0; //@line 17006
   HEAP32[$324 >> 2] = $40; //@line 17007
   $325 = $ReallocAsyncCtx2 + 88 | 0; //@line 17008
   HEAP32[$325 >> 2] = $42; //@line 17009
   $326 = $ReallocAsyncCtx2 + 92 | 0; //@line 17010
   HEAP32[$326 >> 2] = $44; //@line 17011
   $327 = $ReallocAsyncCtx2 + 96 | 0; //@line 17012
   HEAP32[$327 >> 2] = $46; //@line 17013
   $328 = $ReallocAsyncCtx2 + 100 | 0; //@line 17014
   HEAP32[$328 >> 2] = $48; //@line 17015
   $329 = $ReallocAsyncCtx2 + 104 | 0; //@line 17016
   HEAP32[$329 >> 2] = $50; //@line 17017
   $330 = $ReallocAsyncCtx2 + 108 | 0; //@line 17018
   HEAP32[$330 >> 2] = $52; //@line 17019
   $331 = $ReallocAsyncCtx2 + 112 | 0; //@line 17020
   HEAP32[$331 >> 2] = $54; //@line 17021
   $332 = $ReallocAsyncCtx2 + 116 | 0; //@line 17022
   HEAP32[$332 >> 2] = $56; //@line 17023
   $333 = $ReallocAsyncCtx2 + 120 | 0; //@line 17024
   HEAP32[$333 >> 2] = $58; //@line 17025
   $334 = $ReallocAsyncCtx2 + 124 | 0; //@line 17026
   HEAP32[$334 >> 2] = $60; //@line 17027
   $335 = $ReallocAsyncCtx2 + 128 | 0; //@line 17028
   HEAP32[$335 >> 2] = $62; //@line 17029
   $336 = $ReallocAsyncCtx2 + 132 | 0; //@line 17030
   HEAP32[$336 >> 2] = $64; //@line 17031
   $337 = $ReallocAsyncCtx2 + 136 | 0; //@line 17032
   HEAP32[$337 >> 2] = $66; //@line 17033
   $338 = $ReallocAsyncCtx2 + 140 | 0; //@line 17034
   HEAP32[$338 >> 2] = $68; //@line 17035
   $339 = $ReallocAsyncCtx2 + 144 | 0; //@line 17036
   HEAP32[$339 >> 2] = $70; //@line 17037
   $340 = $ReallocAsyncCtx2 + 148 | 0; //@line 17038
   HEAP32[$340 >> 2] = $72; //@line 17039
   $341 = $ReallocAsyncCtx2 + 152 | 0; //@line 17040
   HEAP32[$341 >> 2] = $74; //@line 17041
   $342 = $ReallocAsyncCtx2 + 156 | 0; //@line 17042
   HEAP32[$342 >> 2] = $78; //@line 17043
   $343 = $ReallocAsyncCtx2 + 160 | 0; //@line 17044
   HEAP32[$343 >> 2] = $80; //@line 17045
   $344 = $ReallocAsyncCtx2 + 164 | 0; //@line 17046
   HEAP32[$344 >> 2] = $82; //@line 17047
   $345 = $ReallocAsyncCtx2 + 168 | 0; //@line 17048
   HEAP32[$345 >> 2] = $84; //@line 17049
   $346 = $ReallocAsyncCtx2 + 172 | 0; //@line 17050
   HEAP32[$346 >> 2] = $86; //@line 17051
   $347 = $ReallocAsyncCtx2 + 176 | 0; //@line 17052
   HEAP32[$347 >> 2] = $88; //@line 17053
   $348 = $ReallocAsyncCtx2 + 180 | 0; //@line 17054
   HEAP32[$348 >> 2] = $90; //@line 17055
   $349 = $ReallocAsyncCtx2 + 184 | 0; //@line 17056
   HEAP32[$349 >> 2] = $92; //@line 17057
   $350 = $ReallocAsyncCtx2 + 188 | 0; //@line 17058
   HEAP32[$350 >> 2] = $94; //@line 17059
   $351 = $ReallocAsyncCtx2 + 192 | 0; //@line 17060
   HEAP32[$351 >> 2] = $96; //@line 17061
   $352 = $ReallocAsyncCtx2 + 196 | 0; //@line 17062
   HEAP32[$352 >> 2] = $98; //@line 17063
   $353 = $ReallocAsyncCtx2 + 200 | 0; //@line 17064
   HEAP32[$353 >> 2] = $102; //@line 17065
   $354 = $ReallocAsyncCtx2 + 204 | 0; //@line 17066
   HEAP32[$354 >> 2] = $104; //@line 17067
   $355 = $ReallocAsyncCtx2 + 208 | 0; //@line 17068
   HEAP32[$355 >> 2] = $106; //@line 17069
   $356 = $ReallocAsyncCtx2 + 212 | 0; //@line 17070
   HEAP8[$356 >> 0] = $108; //@line 17071
   $357 = $ReallocAsyncCtx2 + 213 | 0; //@line 17072
   HEAP8[$357 >> 0] = $110; //@line 17073
   $358 = $ReallocAsyncCtx2 + 216 | 0; //@line 17074
   HEAP32[$358 >> 2] = $112; //@line 17075
   $359 = $ReallocAsyncCtx2 + 220 | 0; //@line 17076
   HEAP32[$359 >> 2] = $114; //@line 17077
   $360 = $ReallocAsyncCtx2 + 224 | 0; //@line 17078
   HEAP8[$360 >> 0] = $4; //@line 17079
   $361 = $ReallocAsyncCtx2 + 228 | 0; //@line 17080
   HEAP32[$361 >> 2] = $118; //@line 17081
   $362 = $ReallocAsyncCtx2 + 232 | 0; //@line 17082
   HEAP32[$362 >> 2] = $120; //@line 17083
   $363 = $ReallocAsyncCtx2 + 236 | 0; //@line 17084
   HEAP32[$363 >> 2] = $116; //@line 17085
   $364 = $ReallocAsyncCtx2 + 240 | 0; //@line 17086
   HEAP32[$364 >> 2] = $124; //@line 17087
   $365 = $ReallocAsyncCtx2 + 244 | 0; //@line 17088
   HEAP32[$365 >> 2] = $126; //@line 17089
   $366 = $ReallocAsyncCtx2 + 248 | 0; //@line 17090
   HEAP32[$366 >> 2] = $128; //@line 17091
   $367 = $ReallocAsyncCtx2 + 252 | 0; //@line 17092
   HEAP32[$367 >> 2] = $130; //@line 17093
   $368 = $ReallocAsyncCtx2 + 256 | 0; //@line 17094
   HEAP32[$368 >> 2] = $122; //@line 17095
   $369 = $ReallocAsyncCtx2 + 260 | 0; //@line 17096
   HEAP32[$369 >> 2] = $134; //@line 17097
   $370 = $ReallocAsyncCtx2 + 264 | 0; //@line 17098
   HEAP32[$370 >> 2] = $136; //@line 17099
   sp = STACKTOP; //@line 17100
   return;
  }
  HEAP8[___async_retval >> 0] = $303; //@line 17104
  ___async_unwind = 0; //@line 17105
  HEAP32[$ReallocAsyncCtx2 >> 2] = 505; //@line 17106
  $304 = $ReallocAsyncCtx2 + 4 | 0; //@line 17107
  HEAP32[$304 >> 2] = $2; //@line 17108
  $305 = $ReallocAsyncCtx2 + 8 | 0; //@line 17109
  HEAP32[$305 >> 2] = $6; //@line 17110
  $306 = $ReallocAsyncCtx2 + 12 | 0; //@line 17111
  HEAP32[$306 >> 2] = $8; //@line 17112
  $307 = $ReallocAsyncCtx2 + 16 | 0; //@line 17113
  HEAP32[$307 >> 2] = $132; //@line 17114
  $308 = $ReallocAsyncCtx2 + 20 | 0; //@line 17115
  HEAP32[$308 >> 2] = $10; //@line 17116
  $309 = $ReallocAsyncCtx2 + 24 | 0; //@line 17117
  HEAP32[$309 >> 2] = $12; //@line 17118
  $310 = $ReallocAsyncCtx2 + 28 | 0; //@line 17119
  HEAP32[$310 >> 2] = $14; //@line 17120
  $311 = $ReallocAsyncCtx2 + 32 | 0; //@line 17121
  HEAP32[$311 >> 2] = $16; //@line 17122
  $312 = $ReallocAsyncCtx2 + 36 | 0; //@line 17123
  HEAP32[$312 >> 2] = $18; //@line 17124
  $313 = $ReallocAsyncCtx2 + 40 | 0; //@line 17125
  HEAP32[$313 >> 2] = $20; //@line 17126
  $314 = $ReallocAsyncCtx2 + 44 | 0; //@line 17127
  HEAP32[$314 >> 2] = $22; //@line 17128
  $315 = $ReallocAsyncCtx2 + 48 | 0; //@line 17129
  HEAP8[$315 >> 0] = $292; //@line 17130
  $316 = $ReallocAsyncCtx2 + 52 | 0; //@line 17131
  HEAP32[$316 >> 2] = $24; //@line 17132
  $317 = $ReallocAsyncCtx2 + 56 | 0; //@line 17133
  HEAP32[$317 >> 2] = $26; //@line 17134
  $318 = $ReallocAsyncCtx2 + 60 | 0; //@line 17135
  HEAP32[$318 >> 2] = $28; //@line 17136
  $319 = $ReallocAsyncCtx2 + 64 | 0; //@line 17137
  HEAP32[$319 >> 2] = $30; //@line 17138
  $320 = $ReallocAsyncCtx2 + 68 | 0; //@line 17139
  HEAP32[$320 >> 2] = $32; //@line 17140
  $321 = $ReallocAsyncCtx2 + 72 | 0; //@line 17141
  HEAP32[$321 >> 2] = $34; //@line 17142
  $322 = $ReallocAsyncCtx2 + 76 | 0; //@line 17143
  HEAP32[$322 >> 2] = $36; //@line 17144
  $323 = $ReallocAsyncCtx2 + 80 | 0; //@line 17145
  HEAP32[$323 >> 2] = $38; //@line 17146
  $324 = $ReallocAsyncCtx2 + 84 | 0; //@line 17147
  HEAP32[$324 >> 2] = $40; //@line 17148
  $325 = $ReallocAsyncCtx2 + 88 | 0; //@line 17149
  HEAP32[$325 >> 2] = $42; //@line 17150
  $326 = $ReallocAsyncCtx2 + 92 | 0; //@line 17151
  HEAP32[$326 >> 2] = $44; //@line 17152
  $327 = $ReallocAsyncCtx2 + 96 | 0; //@line 17153
  HEAP32[$327 >> 2] = $46; //@line 17154
  $328 = $ReallocAsyncCtx2 + 100 | 0; //@line 17155
  HEAP32[$328 >> 2] = $48; //@line 17156
  $329 = $ReallocAsyncCtx2 + 104 | 0; //@line 17157
  HEAP32[$329 >> 2] = $50; //@line 17158
  $330 = $ReallocAsyncCtx2 + 108 | 0; //@line 17159
  HEAP32[$330 >> 2] = $52; //@line 17160
  $331 = $ReallocAsyncCtx2 + 112 | 0; //@line 17161
  HEAP32[$331 >> 2] = $54; //@line 17162
  $332 = $ReallocAsyncCtx2 + 116 | 0; //@line 17163
  HEAP32[$332 >> 2] = $56; //@line 17164
  $333 = $ReallocAsyncCtx2 + 120 | 0; //@line 17165
  HEAP32[$333 >> 2] = $58; //@line 17166
  $334 = $ReallocAsyncCtx2 + 124 | 0; //@line 17167
  HEAP32[$334 >> 2] = $60; //@line 17168
  $335 = $ReallocAsyncCtx2 + 128 | 0; //@line 17169
  HEAP32[$335 >> 2] = $62; //@line 17170
  $336 = $ReallocAsyncCtx2 + 132 | 0; //@line 17171
  HEAP32[$336 >> 2] = $64; //@line 17172
  $337 = $ReallocAsyncCtx2 + 136 | 0; //@line 17173
  HEAP32[$337 >> 2] = $66; //@line 17174
  $338 = $ReallocAsyncCtx2 + 140 | 0; //@line 17175
  HEAP32[$338 >> 2] = $68; //@line 17176
  $339 = $ReallocAsyncCtx2 + 144 | 0; //@line 17177
  HEAP32[$339 >> 2] = $70; //@line 17178
  $340 = $ReallocAsyncCtx2 + 148 | 0; //@line 17179
  HEAP32[$340 >> 2] = $72; //@line 17180
  $341 = $ReallocAsyncCtx2 + 152 | 0; //@line 17181
  HEAP32[$341 >> 2] = $74; //@line 17182
  $342 = $ReallocAsyncCtx2 + 156 | 0; //@line 17183
  HEAP32[$342 >> 2] = $78; //@line 17184
  $343 = $ReallocAsyncCtx2 + 160 | 0; //@line 17185
  HEAP32[$343 >> 2] = $80; //@line 17186
  $344 = $ReallocAsyncCtx2 + 164 | 0; //@line 17187
  HEAP32[$344 >> 2] = $82; //@line 17188
  $345 = $ReallocAsyncCtx2 + 168 | 0; //@line 17189
  HEAP32[$345 >> 2] = $84; //@line 17190
  $346 = $ReallocAsyncCtx2 + 172 | 0; //@line 17191
  HEAP32[$346 >> 2] = $86; //@line 17192
  $347 = $ReallocAsyncCtx2 + 176 | 0; //@line 17193
  HEAP32[$347 >> 2] = $88; //@line 17194
  $348 = $ReallocAsyncCtx2 + 180 | 0; //@line 17195
  HEAP32[$348 >> 2] = $90; //@line 17196
  $349 = $ReallocAsyncCtx2 + 184 | 0; //@line 17197
  HEAP32[$349 >> 2] = $92; //@line 17198
  $350 = $ReallocAsyncCtx2 + 188 | 0; //@line 17199
  HEAP32[$350 >> 2] = $94; //@line 17200
  $351 = $ReallocAsyncCtx2 + 192 | 0; //@line 17201
  HEAP32[$351 >> 2] = $96; //@line 17202
  $352 = $ReallocAsyncCtx2 + 196 | 0; //@line 17203
  HEAP32[$352 >> 2] = $98; //@line 17204
  $353 = $ReallocAsyncCtx2 + 200 | 0; //@line 17205
  HEAP32[$353 >> 2] = $102; //@line 17206
  $354 = $ReallocAsyncCtx2 + 204 | 0; //@line 17207
  HEAP32[$354 >> 2] = $104; //@line 17208
  $355 = $ReallocAsyncCtx2 + 208 | 0; //@line 17209
  HEAP32[$355 >> 2] = $106; //@line 17210
  $356 = $ReallocAsyncCtx2 + 212 | 0; //@line 17211
  HEAP8[$356 >> 0] = $108; //@line 17212
  $357 = $ReallocAsyncCtx2 + 213 | 0; //@line 17213
  HEAP8[$357 >> 0] = $110; //@line 17214
  $358 = $ReallocAsyncCtx2 + 216 | 0; //@line 17215
  HEAP32[$358 >> 2] = $112; //@line 17216
  $359 = $ReallocAsyncCtx2 + 220 | 0; //@line 17217
  HEAP32[$359 >> 2] = $114; //@line 17218
  $360 = $ReallocAsyncCtx2 + 224 | 0; //@line 17219
  HEAP8[$360 >> 0] = $4; //@line 17220
  $361 = $ReallocAsyncCtx2 + 228 | 0; //@line 17221
  HEAP32[$361 >> 2] = $118; //@line 17222
  $362 = $ReallocAsyncCtx2 + 232 | 0; //@line 17223
  HEAP32[$362 >> 2] = $120; //@line 17224
  $363 = $ReallocAsyncCtx2 + 236 | 0; //@line 17225
  HEAP32[$363 >> 2] = $116; //@line 17226
  $364 = $ReallocAsyncCtx2 + 240 | 0; //@line 17227
  HEAP32[$364 >> 2] = $124; //@line 17228
  $365 = $ReallocAsyncCtx2 + 244 | 0; //@line 17229
  HEAP32[$365 >> 2] = $126; //@line 17230
  $366 = $ReallocAsyncCtx2 + 248 | 0; //@line 17231
  HEAP32[$366 >> 2] = $128; //@line 17232
  $367 = $ReallocAsyncCtx2 + 252 | 0; //@line 17233
  HEAP32[$367 >> 2] = $130; //@line 17234
  $368 = $ReallocAsyncCtx2 + 256 | 0; //@line 17235
  HEAP32[$368 >> 2] = $122; //@line 17236
  $369 = $ReallocAsyncCtx2 + 260 | 0; //@line 17237
  HEAP32[$369 >> 2] = $134; //@line 17238
  $370 = $ReallocAsyncCtx2 + 264 | 0; //@line 17239
  HEAP32[$370 >> 2] = $136; //@line 17240
  sp = STACKTOP; //@line 17241
  return;
 } else if ((label | 0) == 22) {
  HEAP8[$126 >> 0] = HEAP8[$120 + ($139 & 255) >> 0] | 0; //@line 17249
  HEAP32[$96 >> 2] = $52; //@line 17250
  HEAP32[$80 >> 2] = (HEAPU8[$120 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$120 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$120 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 17271
  HEAP32[$86 >> 2] = 0; //@line 17272
  $411 = $$0$be + 6 << 24 >> 24; //@line 17273
  HEAP8[$60 >> 0] = HEAP8[$120 + ($$0$be + 5 & 255) >> 0] | 0; //@line 17277
  $417 = HEAP32[(HEAP32[$72 >> 2] | 0) + 8 >> 2] | 0; //@line 17280
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(268) | 0; //@line 17281
  $418 = FUNCTION_TABLE_iii[$417 & 31]($98, $92) | 0; //@line 17282
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 506; //@line 17285
   $419 = $ReallocAsyncCtx3 + 4 | 0; //@line 17286
   HEAP32[$419 >> 2] = $2; //@line 17287
   $420 = $ReallocAsyncCtx3 + 8 | 0; //@line 17288
   HEAP32[$420 >> 2] = $6; //@line 17289
   $421 = $ReallocAsyncCtx3 + 12 | 0; //@line 17290
   HEAP32[$421 >> 2] = $8; //@line 17291
   $422 = $ReallocAsyncCtx3 + 16 | 0; //@line 17292
   HEAP32[$422 >> 2] = $132; //@line 17293
   $423 = $ReallocAsyncCtx3 + 20 | 0; //@line 17294
   HEAP32[$423 >> 2] = $10; //@line 17295
   $424 = $ReallocAsyncCtx3 + 24 | 0; //@line 17296
   HEAP32[$424 >> 2] = $12; //@line 17297
   $425 = $ReallocAsyncCtx3 + 28 | 0; //@line 17298
   HEAP32[$425 >> 2] = $14; //@line 17299
   $426 = $ReallocAsyncCtx3 + 32 | 0; //@line 17300
   HEAP32[$426 >> 2] = $16; //@line 17301
   $427 = $ReallocAsyncCtx3 + 36 | 0; //@line 17302
   HEAP32[$427 >> 2] = $18; //@line 17303
   $428 = $ReallocAsyncCtx3 + 40 | 0; //@line 17304
   HEAP32[$428 >> 2] = $20; //@line 17305
   $429 = $ReallocAsyncCtx3 + 44 | 0; //@line 17306
   HEAP32[$429 >> 2] = $22; //@line 17307
   $430 = $ReallocAsyncCtx3 + 48 | 0; //@line 17308
   HEAP32[$430 >> 2] = $24; //@line 17309
   $431 = $ReallocAsyncCtx3 + 52 | 0; //@line 17310
   HEAP32[$431 >> 2] = $26; //@line 17311
   $432 = $ReallocAsyncCtx3 + 56 | 0; //@line 17312
   HEAP32[$432 >> 2] = $28; //@line 17313
   $433 = $ReallocAsyncCtx3 + 60 | 0; //@line 17314
   HEAP32[$433 >> 2] = $30; //@line 17315
   $434 = $ReallocAsyncCtx3 + 64 | 0; //@line 17316
   HEAP32[$434 >> 2] = $32; //@line 17317
   $435 = $ReallocAsyncCtx3 + 68 | 0; //@line 17318
   HEAP32[$435 >> 2] = $34; //@line 17319
   $436 = $ReallocAsyncCtx3 + 72 | 0; //@line 17320
   HEAP32[$436 >> 2] = $36; //@line 17321
   $437 = $ReallocAsyncCtx3 + 76 | 0; //@line 17322
   HEAP32[$437 >> 2] = $38; //@line 17323
   $438 = $ReallocAsyncCtx3 + 80 | 0; //@line 17324
   HEAP32[$438 >> 2] = $40; //@line 17325
   $439 = $ReallocAsyncCtx3 + 84 | 0; //@line 17326
   HEAP32[$439 >> 2] = $42; //@line 17327
   $440 = $ReallocAsyncCtx3 + 88 | 0; //@line 17328
   HEAP8[$440 >> 0] = $411; //@line 17329
   $441 = $ReallocAsyncCtx3 + 92 | 0; //@line 17330
   HEAP32[$441 >> 2] = $44; //@line 17331
   $442 = $ReallocAsyncCtx3 + 96 | 0; //@line 17332
   HEAP32[$442 >> 2] = $46; //@line 17333
   $443 = $ReallocAsyncCtx3 + 100 | 0; //@line 17334
   HEAP32[$443 >> 2] = $48; //@line 17335
   $444 = $ReallocAsyncCtx3 + 104 | 0; //@line 17336
   HEAP32[$444 >> 2] = $50; //@line 17337
   $445 = $ReallocAsyncCtx3 + 108 | 0; //@line 17338
   HEAP32[$445 >> 2] = $52; //@line 17339
   $446 = $ReallocAsyncCtx3 + 112 | 0; //@line 17340
   HEAP32[$446 >> 2] = $54; //@line 17341
   $447 = $ReallocAsyncCtx3 + 116 | 0; //@line 17342
   HEAP32[$447 >> 2] = $56; //@line 17343
   $448 = $ReallocAsyncCtx3 + 120 | 0; //@line 17344
   HEAP32[$448 >> 2] = $58; //@line 17345
   $449 = $ReallocAsyncCtx3 + 124 | 0; //@line 17346
   HEAP32[$449 >> 2] = $60; //@line 17347
   $450 = $ReallocAsyncCtx3 + 128 | 0; //@line 17348
   HEAP32[$450 >> 2] = $62; //@line 17349
   $451 = $ReallocAsyncCtx3 + 132 | 0; //@line 17350
   HEAP32[$451 >> 2] = $64; //@line 17351
   $452 = $ReallocAsyncCtx3 + 136 | 0; //@line 17352
   HEAP32[$452 >> 2] = $66; //@line 17353
   $453 = $ReallocAsyncCtx3 + 140 | 0; //@line 17354
   HEAP32[$453 >> 2] = $68; //@line 17355
   $454 = $ReallocAsyncCtx3 + 144 | 0; //@line 17356
   HEAP32[$454 >> 2] = $70; //@line 17357
   $455 = $ReallocAsyncCtx3 + 148 | 0; //@line 17358
   HEAP32[$455 >> 2] = $72; //@line 17359
   $456 = $ReallocAsyncCtx3 + 152 | 0; //@line 17360
   HEAP32[$456 >> 2] = $74; //@line 17361
   $457 = $ReallocAsyncCtx3 + 156 | 0; //@line 17362
   HEAP32[$457 >> 2] = $78; //@line 17363
   $458 = $ReallocAsyncCtx3 + 160 | 0; //@line 17364
   HEAP32[$458 >> 2] = $80; //@line 17365
   $459 = $ReallocAsyncCtx3 + 164 | 0; //@line 17366
   HEAP32[$459 >> 2] = $82; //@line 17367
   $460 = $ReallocAsyncCtx3 + 168 | 0; //@line 17368
   HEAP32[$460 >> 2] = $84; //@line 17369
   $461 = $ReallocAsyncCtx3 + 172 | 0; //@line 17370
   HEAP32[$461 >> 2] = $86; //@line 17371
   $462 = $ReallocAsyncCtx3 + 176 | 0; //@line 17372
   HEAP32[$462 >> 2] = $88; //@line 17373
   $463 = $ReallocAsyncCtx3 + 180 | 0; //@line 17374
   HEAP32[$463 >> 2] = $90; //@line 17375
   $464 = $ReallocAsyncCtx3 + 184 | 0; //@line 17376
   HEAP32[$464 >> 2] = $92; //@line 17377
   $465 = $ReallocAsyncCtx3 + 188 | 0; //@line 17378
   HEAP32[$465 >> 2] = $94; //@line 17379
   $466 = $ReallocAsyncCtx3 + 192 | 0; //@line 17380
   HEAP32[$466 >> 2] = $96; //@line 17381
   $467 = $ReallocAsyncCtx3 + 196 | 0; //@line 17382
   HEAP32[$467 >> 2] = $98; //@line 17383
   $468 = $ReallocAsyncCtx3 + 200 | 0; //@line 17384
   HEAP32[$468 >> 2] = $102; //@line 17385
   $469 = $ReallocAsyncCtx3 + 204 | 0; //@line 17386
   HEAP32[$469 >> 2] = $104; //@line 17387
   $470 = $ReallocAsyncCtx3 + 208 | 0; //@line 17388
   HEAP32[$470 >> 2] = $106; //@line 17389
   $471 = $ReallocAsyncCtx3 + 212 | 0; //@line 17390
   HEAP8[$471 >> 0] = $108; //@line 17391
   $472 = $ReallocAsyncCtx3 + 213 | 0; //@line 17392
   HEAP8[$472 >> 0] = $110; //@line 17393
   $473 = $ReallocAsyncCtx3 + 216 | 0; //@line 17394
   HEAP32[$473 >> 2] = $112; //@line 17395
   $474 = $ReallocAsyncCtx3 + 220 | 0; //@line 17396
   HEAP32[$474 >> 2] = $114; //@line 17397
   $475 = $ReallocAsyncCtx3 + 224 | 0; //@line 17398
   HEAP8[$475 >> 0] = $4; //@line 17399
   $476 = $ReallocAsyncCtx3 + 228 | 0; //@line 17400
   HEAP32[$476 >> 2] = $118; //@line 17401
   $477 = $ReallocAsyncCtx3 + 232 | 0; //@line 17402
   HEAP32[$477 >> 2] = $120; //@line 17403
   $478 = $ReallocAsyncCtx3 + 236 | 0; //@line 17404
   HEAP32[$478 >> 2] = $116; //@line 17405
   $479 = $ReallocAsyncCtx3 + 240 | 0; //@line 17406
   HEAP32[$479 >> 2] = $124; //@line 17407
   $480 = $ReallocAsyncCtx3 + 244 | 0; //@line 17408
   HEAP32[$480 >> 2] = $126; //@line 17409
   $481 = $ReallocAsyncCtx3 + 248 | 0; //@line 17410
   HEAP32[$481 >> 2] = $128; //@line 17411
   $482 = $ReallocAsyncCtx3 + 252 | 0; //@line 17412
   HEAP32[$482 >> 2] = $130; //@line 17413
   $483 = $ReallocAsyncCtx3 + 256 | 0; //@line 17414
   HEAP32[$483 >> 2] = $122; //@line 17415
   $484 = $ReallocAsyncCtx3 + 260 | 0; //@line 17416
   HEAP32[$484 >> 2] = $134; //@line 17417
   $485 = $ReallocAsyncCtx3 + 264 | 0; //@line 17418
   HEAP32[$485 >> 2] = $136; //@line 17419
   sp = STACKTOP; //@line 17420
   return;
  }
  HEAP8[___async_retval >> 0] = $418; //@line 17424
  ___async_unwind = 0; //@line 17425
  HEAP32[$ReallocAsyncCtx3 >> 2] = 506; //@line 17426
  $419 = $ReallocAsyncCtx3 + 4 | 0; //@line 17427
  HEAP32[$419 >> 2] = $2; //@line 17428
  $420 = $ReallocAsyncCtx3 + 8 | 0; //@line 17429
  HEAP32[$420 >> 2] = $6; //@line 17430
  $421 = $ReallocAsyncCtx3 + 12 | 0; //@line 17431
  HEAP32[$421 >> 2] = $8; //@line 17432
  $422 = $ReallocAsyncCtx3 + 16 | 0; //@line 17433
  HEAP32[$422 >> 2] = $132; //@line 17434
  $423 = $ReallocAsyncCtx3 + 20 | 0; //@line 17435
  HEAP32[$423 >> 2] = $10; //@line 17436
  $424 = $ReallocAsyncCtx3 + 24 | 0; //@line 17437
  HEAP32[$424 >> 2] = $12; //@line 17438
  $425 = $ReallocAsyncCtx3 + 28 | 0; //@line 17439
  HEAP32[$425 >> 2] = $14; //@line 17440
  $426 = $ReallocAsyncCtx3 + 32 | 0; //@line 17441
  HEAP32[$426 >> 2] = $16; //@line 17442
  $427 = $ReallocAsyncCtx3 + 36 | 0; //@line 17443
  HEAP32[$427 >> 2] = $18; //@line 17444
  $428 = $ReallocAsyncCtx3 + 40 | 0; //@line 17445
  HEAP32[$428 >> 2] = $20; //@line 17446
  $429 = $ReallocAsyncCtx3 + 44 | 0; //@line 17447
  HEAP32[$429 >> 2] = $22; //@line 17448
  $430 = $ReallocAsyncCtx3 + 48 | 0; //@line 17449
  HEAP32[$430 >> 2] = $24; //@line 17450
  $431 = $ReallocAsyncCtx3 + 52 | 0; //@line 17451
  HEAP32[$431 >> 2] = $26; //@line 17452
  $432 = $ReallocAsyncCtx3 + 56 | 0; //@line 17453
  HEAP32[$432 >> 2] = $28; //@line 17454
  $433 = $ReallocAsyncCtx3 + 60 | 0; //@line 17455
  HEAP32[$433 >> 2] = $30; //@line 17456
  $434 = $ReallocAsyncCtx3 + 64 | 0; //@line 17457
  HEAP32[$434 >> 2] = $32; //@line 17458
  $435 = $ReallocAsyncCtx3 + 68 | 0; //@line 17459
  HEAP32[$435 >> 2] = $34; //@line 17460
  $436 = $ReallocAsyncCtx3 + 72 | 0; //@line 17461
  HEAP32[$436 >> 2] = $36; //@line 17462
  $437 = $ReallocAsyncCtx3 + 76 | 0; //@line 17463
  HEAP32[$437 >> 2] = $38; //@line 17464
  $438 = $ReallocAsyncCtx3 + 80 | 0; //@line 17465
  HEAP32[$438 >> 2] = $40; //@line 17466
  $439 = $ReallocAsyncCtx3 + 84 | 0; //@line 17467
  HEAP32[$439 >> 2] = $42; //@line 17468
  $440 = $ReallocAsyncCtx3 + 88 | 0; //@line 17469
  HEAP8[$440 >> 0] = $411; //@line 17470
  $441 = $ReallocAsyncCtx3 + 92 | 0; //@line 17471
  HEAP32[$441 >> 2] = $44; //@line 17472
  $442 = $ReallocAsyncCtx3 + 96 | 0; //@line 17473
  HEAP32[$442 >> 2] = $46; //@line 17474
  $443 = $ReallocAsyncCtx3 + 100 | 0; //@line 17475
  HEAP32[$443 >> 2] = $48; //@line 17476
  $444 = $ReallocAsyncCtx3 + 104 | 0; //@line 17477
  HEAP32[$444 >> 2] = $50; //@line 17478
  $445 = $ReallocAsyncCtx3 + 108 | 0; //@line 17479
  HEAP32[$445 >> 2] = $52; //@line 17480
  $446 = $ReallocAsyncCtx3 + 112 | 0; //@line 17481
  HEAP32[$446 >> 2] = $54; //@line 17482
  $447 = $ReallocAsyncCtx3 + 116 | 0; //@line 17483
  HEAP32[$447 >> 2] = $56; //@line 17484
  $448 = $ReallocAsyncCtx3 + 120 | 0; //@line 17485
  HEAP32[$448 >> 2] = $58; //@line 17486
  $449 = $ReallocAsyncCtx3 + 124 | 0; //@line 17487
  HEAP32[$449 >> 2] = $60; //@line 17488
  $450 = $ReallocAsyncCtx3 + 128 | 0; //@line 17489
  HEAP32[$450 >> 2] = $62; //@line 17490
  $451 = $ReallocAsyncCtx3 + 132 | 0; //@line 17491
  HEAP32[$451 >> 2] = $64; //@line 17492
  $452 = $ReallocAsyncCtx3 + 136 | 0; //@line 17493
  HEAP32[$452 >> 2] = $66; //@line 17494
  $453 = $ReallocAsyncCtx3 + 140 | 0; //@line 17495
  HEAP32[$453 >> 2] = $68; //@line 17496
  $454 = $ReallocAsyncCtx3 + 144 | 0; //@line 17497
  HEAP32[$454 >> 2] = $70; //@line 17498
  $455 = $ReallocAsyncCtx3 + 148 | 0; //@line 17499
  HEAP32[$455 >> 2] = $72; //@line 17500
  $456 = $ReallocAsyncCtx3 + 152 | 0; //@line 17501
  HEAP32[$456 >> 2] = $74; //@line 17502
  $457 = $ReallocAsyncCtx3 + 156 | 0; //@line 17503
  HEAP32[$457 >> 2] = $78; //@line 17504
  $458 = $ReallocAsyncCtx3 + 160 | 0; //@line 17505
  HEAP32[$458 >> 2] = $80; //@line 17506
  $459 = $ReallocAsyncCtx3 + 164 | 0; //@line 17507
  HEAP32[$459 >> 2] = $82; //@line 17508
  $460 = $ReallocAsyncCtx3 + 168 | 0; //@line 17509
  HEAP32[$460 >> 2] = $84; //@line 17510
  $461 = $ReallocAsyncCtx3 + 172 | 0; //@line 17511
  HEAP32[$461 >> 2] = $86; //@line 17512
  $462 = $ReallocAsyncCtx3 + 176 | 0; //@line 17513
  HEAP32[$462 >> 2] = $88; //@line 17514
  $463 = $ReallocAsyncCtx3 + 180 | 0; //@line 17515
  HEAP32[$463 >> 2] = $90; //@line 17516
  $464 = $ReallocAsyncCtx3 + 184 | 0; //@line 17517
  HEAP32[$464 >> 2] = $92; //@line 17518
  $465 = $ReallocAsyncCtx3 + 188 | 0; //@line 17519
  HEAP32[$465 >> 2] = $94; //@line 17520
  $466 = $ReallocAsyncCtx3 + 192 | 0; //@line 17521
  HEAP32[$466 >> 2] = $96; //@line 17522
  $467 = $ReallocAsyncCtx3 + 196 | 0; //@line 17523
  HEAP32[$467 >> 2] = $98; //@line 17524
  $468 = $ReallocAsyncCtx3 + 200 | 0; //@line 17525
  HEAP32[$468 >> 2] = $102; //@line 17526
  $469 = $ReallocAsyncCtx3 + 204 | 0; //@line 17527
  HEAP32[$469 >> 2] = $104; //@line 17528
  $470 = $ReallocAsyncCtx3 + 208 | 0; //@line 17529
  HEAP32[$470 >> 2] = $106; //@line 17530
  $471 = $ReallocAsyncCtx3 + 212 | 0; //@line 17531
  HEAP8[$471 >> 0] = $108; //@line 17532
  $472 = $ReallocAsyncCtx3 + 213 | 0; //@line 17533
  HEAP8[$472 >> 0] = $110; //@line 17534
  $473 = $ReallocAsyncCtx3 + 216 | 0; //@line 17535
  HEAP32[$473 >> 2] = $112; //@line 17536
  $474 = $ReallocAsyncCtx3 + 220 | 0; //@line 17537
  HEAP32[$474 >> 2] = $114; //@line 17538
  $475 = $ReallocAsyncCtx3 + 224 | 0; //@line 17539
  HEAP8[$475 >> 0] = $4; //@line 17540
  $476 = $ReallocAsyncCtx3 + 228 | 0; //@line 17541
  HEAP32[$476 >> 2] = $118; //@line 17542
  $477 = $ReallocAsyncCtx3 + 232 | 0; //@line 17543
  HEAP32[$477 >> 2] = $120; //@line 17544
  $478 = $ReallocAsyncCtx3 + 236 | 0; //@line 17545
  HEAP32[$478 >> 2] = $116; //@line 17546
  $479 = $ReallocAsyncCtx3 + 240 | 0; //@line 17547
  HEAP32[$479 >> 2] = $124; //@line 17548
  $480 = $ReallocAsyncCtx3 + 244 | 0; //@line 17549
  HEAP32[$480 >> 2] = $126; //@line 17550
  $481 = $ReallocAsyncCtx3 + 248 | 0; //@line 17551
  HEAP32[$481 >> 2] = $128; //@line 17552
  $482 = $ReallocAsyncCtx3 + 252 | 0; //@line 17553
  HEAP32[$482 >> 2] = $130; //@line 17554
  $483 = $ReallocAsyncCtx3 + 256 | 0; //@line 17555
  HEAP32[$483 >> 2] = $122; //@line 17556
  $484 = $ReallocAsyncCtx3 + 260 | 0; //@line 17557
  HEAP32[$484 >> 2] = $134; //@line 17558
  $485 = $ReallocAsyncCtx3 + 264 | 0; //@line 17559
  HEAP32[$485 >> 2] = $136; //@line 17560
  sp = STACKTOP; //@line 17561
  return;
 } else if ((label | 0) == 27) {
  $504 = $$0$be + 2 << 24 >> 24; //@line 17565
  $507 = HEAP8[$120 + ($139 & 255) >> 0] | 0; //@line 17568
  HEAP8[$32 >> 0] = 0; //@line 17569
  $508 = $507 & 255; //@line 17570
  HEAP8[$38 >> 0] = $508 >>> 5 & 1; //@line 17574
  if ($508 & 16 | 0) {
   HEAP8[$32 >> 0] = 1; //@line 17578
  }
  HEAP8[$22 >> 0] = $508 & 15; //@line 17582
  $517 = HEAP32[(HEAP32[$30 >> 2] | 0) + 44 >> 2] | 0; //@line 17585
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(272) | 0; //@line 17586
  $518 = FUNCTION_TABLE_iii[$517 & 31]($98, $66) | 0; //@line 17587
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 507; //@line 17590
   $519 = $ReallocAsyncCtx4 + 4 | 0; //@line 17591
   HEAP32[$519 >> 2] = $2; //@line 17592
   $520 = $ReallocAsyncCtx4 + 8 | 0; //@line 17593
   HEAP32[$520 >> 2] = $6; //@line 17594
   $521 = $ReallocAsyncCtx4 + 12 | 0; //@line 17595
   HEAP32[$521 >> 2] = $8; //@line 17596
   $522 = $ReallocAsyncCtx4 + 16 | 0; //@line 17597
   HEAP32[$522 >> 2] = $132; //@line 17598
   $523 = $ReallocAsyncCtx4 + 20 | 0; //@line 17599
   HEAP32[$523 >> 2] = $10; //@line 17600
   $524 = $ReallocAsyncCtx4 + 24 | 0; //@line 17601
   HEAP32[$524 >> 2] = $12; //@line 17602
   $525 = $ReallocAsyncCtx4 + 28 | 0; //@line 17603
   HEAP32[$525 >> 2] = $14; //@line 17604
   $526 = $ReallocAsyncCtx4 + 32 | 0; //@line 17605
   HEAP32[$526 >> 2] = $16; //@line 17606
   $527 = $ReallocAsyncCtx4 + 36 | 0; //@line 17607
   HEAP32[$527 >> 2] = $18; //@line 17608
   $528 = $ReallocAsyncCtx4 + 40 | 0; //@line 17609
   HEAP32[$528 >> 2] = $20; //@line 17610
   $529 = $ReallocAsyncCtx4 + 44 | 0; //@line 17611
   HEAP32[$529 >> 2] = $22; //@line 17612
   $530 = $ReallocAsyncCtx4 + 48 | 0; //@line 17613
   HEAP32[$530 >> 2] = $24; //@line 17614
   $531 = $ReallocAsyncCtx4 + 52 | 0; //@line 17615
   HEAP8[$531 >> 0] = $504; //@line 17616
   $532 = $ReallocAsyncCtx4 + 56 | 0; //@line 17617
   HEAP32[$532 >> 2] = $26; //@line 17618
   $533 = $ReallocAsyncCtx4 + 60 | 0; //@line 17619
   HEAP32[$533 >> 2] = $28; //@line 17620
   $534 = $ReallocAsyncCtx4 + 64 | 0; //@line 17621
   HEAP32[$534 >> 2] = $30; //@line 17622
   $535 = $ReallocAsyncCtx4 + 68 | 0; //@line 17623
   HEAP32[$535 >> 2] = $32; //@line 17624
   $536 = $ReallocAsyncCtx4 + 72 | 0; //@line 17625
   HEAP32[$536 >> 2] = $34; //@line 17626
   $537 = $ReallocAsyncCtx4 + 76 | 0; //@line 17627
   HEAP32[$537 >> 2] = $36; //@line 17628
   $538 = $ReallocAsyncCtx4 + 80 | 0; //@line 17629
   HEAP32[$538 >> 2] = $38; //@line 17630
   $539 = $ReallocAsyncCtx4 + 84 | 0; //@line 17631
   HEAP32[$539 >> 2] = $40; //@line 17632
   $540 = $ReallocAsyncCtx4 + 88 | 0; //@line 17633
   HEAP32[$540 >> 2] = $42; //@line 17634
   $541 = $ReallocAsyncCtx4 + 92 | 0; //@line 17635
   HEAP32[$541 >> 2] = $44; //@line 17636
   $542 = $ReallocAsyncCtx4 + 96 | 0; //@line 17637
   HEAP32[$542 >> 2] = $46; //@line 17638
   $543 = $ReallocAsyncCtx4 + 100 | 0; //@line 17639
   HEAP32[$543 >> 2] = $48; //@line 17640
   $544 = $ReallocAsyncCtx4 + 104 | 0; //@line 17641
   HEAP32[$544 >> 2] = $50; //@line 17642
   $545 = $ReallocAsyncCtx4 + 108 | 0; //@line 17643
   HEAP32[$545 >> 2] = $52; //@line 17644
   $546 = $ReallocAsyncCtx4 + 112 | 0; //@line 17645
   HEAP32[$546 >> 2] = $54; //@line 17646
   $547 = $ReallocAsyncCtx4 + 116 | 0; //@line 17647
   HEAP32[$547 >> 2] = $56; //@line 17648
   $548 = $ReallocAsyncCtx4 + 120 | 0; //@line 17649
   HEAP32[$548 >> 2] = $58; //@line 17650
   $549 = $ReallocAsyncCtx4 + 124 | 0; //@line 17651
   HEAP32[$549 >> 2] = $60; //@line 17652
   $550 = $ReallocAsyncCtx4 + 128 | 0; //@line 17653
   HEAP32[$550 >> 2] = $62; //@line 17654
   $551 = $ReallocAsyncCtx4 + 132 | 0; //@line 17655
   HEAP32[$551 >> 2] = $64; //@line 17656
   $552 = $ReallocAsyncCtx4 + 136 | 0; //@line 17657
   HEAP32[$552 >> 2] = $66; //@line 17658
   $553 = $ReallocAsyncCtx4 + 140 | 0; //@line 17659
   HEAP32[$553 >> 2] = $68; //@line 17660
   $554 = $ReallocAsyncCtx4 + 144 | 0; //@line 17661
   HEAP32[$554 >> 2] = $70; //@line 17662
   $555 = $ReallocAsyncCtx4 + 148 | 0; //@line 17663
   HEAP32[$555 >> 2] = $72; //@line 17664
   $556 = $ReallocAsyncCtx4 + 152 | 0; //@line 17665
   HEAP32[$556 >> 2] = $74; //@line 17666
   $557 = $ReallocAsyncCtx4 + 156 | 0; //@line 17667
   HEAP32[$557 >> 2] = $$096$be; //@line 17668
   $558 = $ReallocAsyncCtx4 + 160 | 0; //@line 17669
   HEAP32[$558 >> 2] = $78; //@line 17670
   $559 = $ReallocAsyncCtx4 + 164 | 0; //@line 17671
   HEAP32[$559 >> 2] = $80; //@line 17672
   $560 = $ReallocAsyncCtx4 + 168 | 0; //@line 17673
   HEAP32[$560 >> 2] = $82; //@line 17674
   $561 = $ReallocAsyncCtx4 + 172 | 0; //@line 17675
   HEAP32[$561 >> 2] = $84; //@line 17676
   $562 = $ReallocAsyncCtx4 + 176 | 0; //@line 17677
   HEAP32[$562 >> 2] = $86; //@line 17678
   $563 = $ReallocAsyncCtx4 + 180 | 0; //@line 17679
   HEAP32[$563 >> 2] = $88; //@line 17680
   $564 = $ReallocAsyncCtx4 + 184 | 0; //@line 17681
   HEAP32[$564 >> 2] = $90; //@line 17682
   $565 = $ReallocAsyncCtx4 + 188 | 0; //@line 17683
   HEAP32[$565 >> 2] = $92; //@line 17684
   $566 = $ReallocAsyncCtx4 + 192 | 0; //@line 17685
   HEAP32[$566 >> 2] = $94; //@line 17686
   $567 = $ReallocAsyncCtx4 + 196 | 0; //@line 17687
   HEAP32[$567 >> 2] = $96; //@line 17688
   $568 = $ReallocAsyncCtx4 + 200 | 0; //@line 17689
   HEAP32[$568 >> 2] = $98; //@line 17690
   $569 = $ReallocAsyncCtx4 + 204 | 0; //@line 17691
   HEAP32[$569 >> 2] = $102; //@line 17692
   $570 = $ReallocAsyncCtx4 + 208 | 0; //@line 17693
   HEAP32[$570 >> 2] = $104; //@line 17694
   $571 = $ReallocAsyncCtx4 + 212 | 0; //@line 17695
   HEAP32[$571 >> 2] = $106; //@line 17696
   $572 = $ReallocAsyncCtx4 + 216 | 0; //@line 17697
   HEAP8[$572 >> 0] = $108; //@line 17698
   $573 = $ReallocAsyncCtx4 + 217 | 0; //@line 17699
   HEAP8[$573 >> 0] = $110; //@line 17700
   $574 = $ReallocAsyncCtx4 + 220 | 0; //@line 17701
   HEAP32[$574 >> 2] = $112; //@line 17702
   $575 = $ReallocAsyncCtx4 + 224 | 0; //@line 17703
   HEAP32[$575 >> 2] = $114; //@line 17704
   $576 = $ReallocAsyncCtx4 + 228 | 0; //@line 17705
   HEAP8[$576 >> 0] = $4; //@line 17706
   $577 = $ReallocAsyncCtx4 + 232 | 0; //@line 17707
   HEAP32[$577 >> 2] = $118; //@line 17708
   $578 = $ReallocAsyncCtx4 + 236 | 0; //@line 17709
   HEAP32[$578 >> 2] = $120; //@line 17710
   $579 = $ReallocAsyncCtx4 + 240 | 0; //@line 17711
   HEAP32[$579 >> 2] = $116; //@line 17712
   $580 = $ReallocAsyncCtx4 + 244 | 0; //@line 17713
   HEAP32[$580 >> 2] = $124; //@line 17714
   $581 = $ReallocAsyncCtx4 + 248 | 0; //@line 17715
   HEAP32[$581 >> 2] = $126; //@line 17716
   $582 = $ReallocAsyncCtx4 + 252 | 0; //@line 17717
   HEAP32[$582 >> 2] = $128; //@line 17718
   $583 = $ReallocAsyncCtx4 + 256 | 0; //@line 17719
   HEAP32[$583 >> 2] = $130; //@line 17720
   $584 = $ReallocAsyncCtx4 + 260 | 0; //@line 17721
   HEAP32[$584 >> 2] = $122; //@line 17722
   $585 = $ReallocAsyncCtx4 + 264 | 0; //@line 17723
   HEAP32[$585 >> 2] = $134; //@line 17724
   $586 = $ReallocAsyncCtx4 + 268 | 0; //@line 17725
   HEAP32[$586 >> 2] = $136; //@line 17726
   sp = STACKTOP; //@line 17727
   return;
  }
  HEAP8[___async_retval >> 0] = $518 & 1; //@line 17732
  ___async_unwind = 0; //@line 17733
  HEAP32[$ReallocAsyncCtx4 >> 2] = 507; //@line 17734
  $519 = $ReallocAsyncCtx4 + 4 | 0; //@line 17735
  HEAP32[$519 >> 2] = $2; //@line 17736
  $520 = $ReallocAsyncCtx4 + 8 | 0; //@line 17737
  HEAP32[$520 >> 2] = $6; //@line 17738
  $521 = $ReallocAsyncCtx4 + 12 | 0; //@line 17739
  HEAP32[$521 >> 2] = $8; //@line 17740
  $522 = $ReallocAsyncCtx4 + 16 | 0; //@line 17741
  HEAP32[$522 >> 2] = $132; //@line 17742
  $523 = $ReallocAsyncCtx4 + 20 | 0; //@line 17743
  HEAP32[$523 >> 2] = $10; //@line 17744
  $524 = $ReallocAsyncCtx4 + 24 | 0; //@line 17745
  HEAP32[$524 >> 2] = $12; //@line 17746
  $525 = $ReallocAsyncCtx4 + 28 | 0; //@line 17747
  HEAP32[$525 >> 2] = $14; //@line 17748
  $526 = $ReallocAsyncCtx4 + 32 | 0; //@line 17749
  HEAP32[$526 >> 2] = $16; //@line 17750
  $527 = $ReallocAsyncCtx4 + 36 | 0; //@line 17751
  HEAP32[$527 >> 2] = $18; //@line 17752
  $528 = $ReallocAsyncCtx4 + 40 | 0; //@line 17753
  HEAP32[$528 >> 2] = $20; //@line 17754
  $529 = $ReallocAsyncCtx4 + 44 | 0; //@line 17755
  HEAP32[$529 >> 2] = $22; //@line 17756
  $530 = $ReallocAsyncCtx4 + 48 | 0; //@line 17757
  HEAP32[$530 >> 2] = $24; //@line 17758
  $531 = $ReallocAsyncCtx4 + 52 | 0; //@line 17759
  HEAP8[$531 >> 0] = $504; //@line 17760
  $532 = $ReallocAsyncCtx4 + 56 | 0; //@line 17761
  HEAP32[$532 >> 2] = $26; //@line 17762
  $533 = $ReallocAsyncCtx4 + 60 | 0; //@line 17763
  HEAP32[$533 >> 2] = $28; //@line 17764
  $534 = $ReallocAsyncCtx4 + 64 | 0; //@line 17765
  HEAP32[$534 >> 2] = $30; //@line 17766
  $535 = $ReallocAsyncCtx4 + 68 | 0; //@line 17767
  HEAP32[$535 >> 2] = $32; //@line 17768
  $536 = $ReallocAsyncCtx4 + 72 | 0; //@line 17769
  HEAP32[$536 >> 2] = $34; //@line 17770
  $537 = $ReallocAsyncCtx4 + 76 | 0; //@line 17771
  HEAP32[$537 >> 2] = $36; //@line 17772
  $538 = $ReallocAsyncCtx4 + 80 | 0; //@line 17773
  HEAP32[$538 >> 2] = $38; //@line 17774
  $539 = $ReallocAsyncCtx4 + 84 | 0; //@line 17775
  HEAP32[$539 >> 2] = $40; //@line 17776
  $540 = $ReallocAsyncCtx4 + 88 | 0; //@line 17777
  HEAP32[$540 >> 2] = $42; //@line 17778
  $541 = $ReallocAsyncCtx4 + 92 | 0; //@line 17779
  HEAP32[$541 >> 2] = $44; //@line 17780
  $542 = $ReallocAsyncCtx4 + 96 | 0; //@line 17781
  HEAP32[$542 >> 2] = $46; //@line 17782
  $543 = $ReallocAsyncCtx4 + 100 | 0; //@line 17783
  HEAP32[$543 >> 2] = $48; //@line 17784
  $544 = $ReallocAsyncCtx4 + 104 | 0; //@line 17785
  HEAP32[$544 >> 2] = $50; //@line 17786
  $545 = $ReallocAsyncCtx4 + 108 | 0; //@line 17787
  HEAP32[$545 >> 2] = $52; //@line 17788
  $546 = $ReallocAsyncCtx4 + 112 | 0; //@line 17789
  HEAP32[$546 >> 2] = $54; //@line 17790
  $547 = $ReallocAsyncCtx4 + 116 | 0; //@line 17791
  HEAP32[$547 >> 2] = $56; //@line 17792
  $548 = $ReallocAsyncCtx4 + 120 | 0; //@line 17793
  HEAP32[$548 >> 2] = $58; //@line 17794
  $549 = $ReallocAsyncCtx4 + 124 | 0; //@line 17795
  HEAP32[$549 >> 2] = $60; //@line 17796
  $550 = $ReallocAsyncCtx4 + 128 | 0; //@line 17797
  HEAP32[$550 >> 2] = $62; //@line 17798
  $551 = $ReallocAsyncCtx4 + 132 | 0; //@line 17799
  HEAP32[$551 >> 2] = $64; //@line 17800
  $552 = $ReallocAsyncCtx4 + 136 | 0; //@line 17801
  HEAP32[$552 >> 2] = $66; //@line 17802
  $553 = $ReallocAsyncCtx4 + 140 | 0; //@line 17803
  HEAP32[$553 >> 2] = $68; //@line 17804
  $554 = $ReallocAsyncCtx4 + 144 | 0; //@line 17805
  HEAP32[$554 >> 2] = $70; //@line 17806
  $555 = $ReallocAsyncCtx4 + 148 | 0; //@line 17807
  HEAP32[$555 >> 2] = $72; //@line 17808
  $556 = $ReallocAsyncCtx4 + 152 | 0; //@line 17809
  HEAP32[$556 >> 2] = $74; //@line 17810
  $557 = $ReallocAsyncCtx4 + 156 | 0; //@line 17811
  HEAP32[$557 >> 2] = $$096$be; //@line 17812
  $558 = $ReallocAsyncCtx4 + 160 | 0; //@line 17813
  HEAP32[$558 >> 2] = $78; //@line 17814
  $559 = $ReallocAsyncCtx4 + 164 | 0; //@line 17815
  HEAP32[$559 >> 2] = $80; //@line 17816
  $560 = $ReallocAsyncCtx4 + 168 | 0; //@line 17817
  HEAP32[$560 >> 2] = $82; //@line 17818
  $561 = $ReallocAsyncCtx4 + 172 | 0; //@line 17819
  HEAP32[$561 >> 2] = $84; //@line 17820
  $562 = $ReallocAsyncCtx4 + 176 | 0; //@line 17821
  HEAP32[$562 >> 2] = $86; //@line 17822
  $563 = $ReallocAsyncCtx4 + 180 | 0; //@line 17823
  HEAP32[$563 >> 2] = $88; //@line 17824
  $564 = $ReallocAsyncCtx4 + 184 | 0; //@line 17825
  HEAP32[$564 >> 2] = $90; //@line 17826
  $565 = $ReallocAsyncCtx4 + 188 | 0; //@line 17827
  HEAP32[$565 >> 2] = $92; //@line 17828
  $566 = $ReallocAsyncCtx4 + 192 | 0; //@line 17829
  HEAP32[$566 >> 2] = $94; //@line 17830
  $567 = $ReallocAsyncCtx4 + 196 | 0; //@line 17831
  HEAP32[$567 >> 2] = $96; //@line 17832
  $568 = $ReallocAsyncCtx4 + 200 | 0; //@line 17833
  HEAP32[$568 >> 2] = $98; //@line 17834
  $569 = $ReallocAsyncCtx4 + 204 | 0; //@line 17835
  HEAP32[$569 >> 2] = $102; //@line 17836
  $570 = $ReallocAsyncCtx4 + 208 | 0; //@line 17837
  HEAP32[$570 >> 2] = $104; //@line 17838
  $571 = $ReallocAsyncCtx4 + 212 | 0; //@line 17839
  HEAP32[$571 >> 2] = $106; //@line 17840
  $572 = $ReallocAsyncCtx4 + 216 | 0; //@line 17841
  HEAP8[$572 >> 0] = $108; //@line 17842
  $573 = $ReallocAsyncCtx4 + 217 | 0; //@line 17843
  HEAP8[$573 >> 0] = $110; //@line 17844
  $574 = $ReallocAsyncCtx4 + 220 | 0; //@line 17845
  HEAP32[$574 >> 2] = $112; //@line 17846
  $575 = $ReallocAsyncCtx4 + 224 | 0; //@line 17847
  HEAP32[$575 >> 2] = $114; //@line 17848
  $576 = $ReallocAsyncCtx4 + 228 | 0; //@line 17849
  HEAP8[$576 >> 0] = $4; //@line 17850
  $577 = $ReallocAsyncCtx4 + 232 | 0; //@line 17851
  HEAP32[$577 >> 2] = $118; //@line 17852
  $578 = $ReallocAsyncCtx4 + 236 | 0; //@line 17853
  HEAP32[$578 >> 2] = $120; //@line 17854
  $579 = $ReallocAsyncCtx4 + 240 | 0; //@line 17855
  HEAP32[$579 >> 2] = $116; //@line 17856
  $580 = $ReallocAsyncCtx4 + 244 | 0; //@line 17857
  HEAP32[$580 >> 2] = $124; //@line 17858
  $581 = $ReallocAsyncCtx4 + 248 | 0; //@line 17859
  HEAP32[$581 >> 2] = $126; //@line 17860
  $582 = $ReallocAsyncCtx4 + 252 | 0; //@line 17861
  HEAP32[$582 >> 2] = $128; //@line 17862
  $583 = $ReallocAsyncCtx4 + 256 | 0; //@line 17863
  HEAP32[$583 >> 2] = $130; //@line 17864
  $584 = $ReallocAsyncCtx4 + 260 | 0; //@line 17865
  HEAP32[$584 >> 2] = $122; //@line 17866
  $585 = $ReallocAsyncCtx4 + 264 | 0; //@line 17867
  HEAP32[$585 >> 2] = $134; //@line 17868
  $586 = $ReallocAsyncCtx4 + 268 | 0; //@line 17869
  HEAP32[$586 >> 2] = $136; //@line 17870
  sp = STACKTOP; //@line 17871
  return;
 } else if ((label | 0) == 32) {
  HEAP8[$134 >> 0] = HEAP8[$120 + ($139 & 255) >> 0] | 0; //@line 17879
  $604 = $$0$be + 5 << 24 >> 24; //@line 17892
  HEAP32[$122 >> 2] = (HEAPU8[$120 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$120 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$120 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 17900
  $614 = HEAP32[(HEAP32[$106 >> 2] | 0) + 48 >> 2] | 0; //@line 17903
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(268) | 0; //@line 17904
  $615 = FUNCTION_TABLE_iii[$614 & 31]($98, $58) | 0; //@line 17905
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 508; //@line 17908
   $616 = $ReallocAsyncCtx5 + 4 | 0; //@line 17909
   HEAP32[$616 >> 2] = $2; //@line 17910
   $617 = $ReallocAsyncCtx5 + 8 | 0; //@line 17911
   HEAP32[$617 >> 2] = $6; //@line 17912
   $618 = $ReallocAsyncCtx5 + 12 | 0; //@line 17913
   HEAP32[$618 >> 2] = $8; //@line 17914
   $619 = $ReallocAsyncCtx5 + 16 | 0; //@line 17915
   HEAP32[$619 >> 2] = $132; //@line 17916
   $620 = $ReallocAsyncCtx5 + 20 | 0; //@line 17917
   HEAP32[$620 >> 2] = $10; //@line 17918
   $621 = $ReallocAsyncCtx5 + 24 | 0; //@line 17919
   HEAP32[$621 >> 2] = $12; //@line 17920
   $622 = $ReallocAsyncCtx5 + 28 | 0; //@line 17921
   HEAP32[$622 >> 2] = $14; //@line 17922
   $623 = $ReallocAsyncCtx5 + 32 | 0; //@line 17923
   HEAP32[$623 >> 2] = $16; //@line 17924
   $624 = $ReallocAsyncCtx5 + 36 | 0; //@line 17925
   HEAP32[$624 >> 2] = $18; //@line 17926
   $625 = $ReallocAsyncCtx5 + 40 | 0; //@line 17927
   HEAP32[$625 >> 2] = $20; //@line 17928
   $626 = $ReallocAsyncCtx5 + 44 | 0; //@line 17929
   HEAP32[$626 >> 2] = $22; //@line 17930
   $627 = $ReallocAsyncCtx5 + 48 | 0; //@line 17931
   HEAP32[$627 >> 2] = $24; //@line 17932
   $628 = $ReallocAsyncCtx5 + 52 | 0; //@line 17933
   HEAP32[$628 >> 2] = $26; //@line 17934
   $629 = $ReallocAsyncCtx5 + 56 | 0; //@line 17935
   HEAP32[$629 >> 2] = $28; //@line 17936
   $630 = $ReallocAsyncCtx5 + 60 | 0; //@line 17937
   HEAP32[$630 >> 2] = $30; //@line 17938
   $631 = $ReallocAsyncCtx5 + 64 | 0; //@line 17939
   HEAP32[$631 >> 2] = $32; //@line 17940
   $632 = $ReallocAsyncCtx5 + 68 | 0; //@line 17941
   HEAP32[$632 >> 2] = $34; //@line 17942
   $633 = $ReallocAsyncCtx5 + 72 | 0; //@line 17943
   HEAP32[$633 >> 2] = $36; //@line 17944
   $634 = $ReallocAsyncCtx5 + 76 | 0; //@line 17945
   HEAP32[$634 >> 2] = $38; //@line 17946
   $635 = $ReallocAsyncCtx5 + 80 | 0; //@line 17947
   HEAP32[$635 >> 2] = $40; //@line 17948
   $636 = $ReallocAsyncCtx5 + 84 | 0; //@line 17949
   HEAP32[$636 >> 2] = $42; //@line 17950
   $637 = $ReallocAsyncCtx5 + 88 | 0; //@line 17951
   HEAP32[$637 >> 2] = $44; //@line 17952
   $638 = $ReallocAsyncCtx5 + 92 | 0; //@line 17953
   HEAP32[$638 >> 2] = $46; //@line 17954
   $639 = $ReallocAsyncCtx5 + 96 | 0; //@line 17955
   HEAP32[$639 >> 2] = $48; //@line 17956
   $640 = $ReallocAsyncCtx5 + 100 | 0; //@line 17957
   HEAP32[$640 >> 2] = $50; //@line 17958
   $641 = $ReallocAsyncCtx5 + 104 | 0; //@line 17959
   HEAP32[$641 >> 2] = $52; //@line 17960
   $642 = $ReallocAsyncCtx5 + 108 | 0; //@line 17961
   HEAP32[$642 >> 2] = $54; //@line 17962
   $643 = $ReallocAsyncCtx5 + 112 | 0; //@line 17963
   HEAP32[$643 >> 2] = $56; //@line 17964
   $644 = $ReallocAsyncCtx5 + 116 | 0; //@line 17965
   HEAP32[$644 >> 2] = $58; //@line 17966
   $645 = $ReallocAsyncCtx5 + 120 | 0; //@line 17967
   HEAP32[$645 >> 2] = $60; //@line 17968
   $646 = $ReallocAsyncCtx5 + 124 | 0; //@line 17969
   HEAP32[$646 >> 2] = $62; //@line 17970
   $647 = $ReallocAsyncCtx5 + 128 | 0; //@line 17971
   HEAP8[$647 >> 0] = $604; //@line 17972
   $648 = $ReallocAsyncCtx5 + 132 | 0; //@line 17973
   HEAP32[$648 >> 2] = $64; //@line 17974
   $649 = $ReallocAsyncCtx5 + 136 | 0; //@line 17975
   HEAP32[$649 >> 2] = $66; //@line 17976
   $650 = $ReallocAsyncCtx5 + 140 | 0; //@line 17977
   HEAP32[$650 >> 2] = $68; //@line 17978
   $651 = $ReallocAsyncCtx5 + 144 | 0; //@line 17979
   HEAP32[$651 >> 2] = $70; //@line 17980
   $652 = $ReallocAsyncCtx5 + 148 | 0; //@line 17981
   HEAP32[$652 >> 2] = $72; //@line 17982
   $653 = $ReallocAsyncCtx5 + 152 | 0; //@line 17983
   HEAP32[$653 >> 2] = $74; //@line 17984
   $654 = $ReallocAsyncCtx5 + 156 | 0; //@line 17985
   HEAP32[$654 >> 2] = $78; //@line 17986
   $655 = $ReallocAsyncCtx5 + 160 | 0; //@line 17987
   HEAP32[$655 >> 2] = $80; //@line 17988
   $656 = $ReallocAsyncCtx5 + 164 | 0; //@line 17989
   HEAP32[$656 >> 2] = $82; //@line 17990
   $657 = $ReallocAsyncCtx5 + 168 | 0; //@line 17991
   HEAP32[$657 >> 2] = $84; //@line 17992
   $658 = $ReallocAsyncCtx5 + 172 | 0; //@line 17993
   HEAP32[$658 >> 2] = $86; //@line 17994
   $659 = $ReallocAsyncCtx5 + 176 | 0; //@line 17995
   HEAP32[$659 >> 2] = $88; //@line 17996
   $660 = $ReallocAsyncCtx5 + 180 | 0; //@line 17997
   HEAP32[$660 >> 2] = $90; //@line 17998
   $661 = $ReallocAsyncCtx5 + 184 | 0; //@line 17999
   HEAP32[$661 >> 2] = $92; //@line 18000
   $662 = $ReallocAsyncCtx5 + 188 | 0; //@line 18001
   HEAP32[$662 >> 2] = $94; //@line 18002
   $663 = $ReallocAsyncCtx5 + 192 | 0; //@line 18003
   HEAP32[$663 >> 2] = $96; //@line 18004
   $664 = $ReallocAsyncCtx5 + 196 | 0; //@line 18005
   HEAP32[$664 >> 2] = $98; //@line 18006
   $665 = $ReallocAsyncCtx5 + 200 | 0; //@line 18007
   HEAP32[$665 >> 2] = $102; //@line 18008
   $666 = $ReallocAsyncCtx5 + 204 | 0; //@line 18009
   HEAP32[$666 >> 2] = $104; //@line 18010
   $667 = $ReallocAsyncCtx5 + 208 | 0; //@line 18011
   HEAP32[$667 >> 2] = $106; //@line 18012
   $668 = $ReallocAsyncCtx5 + 212 | 0; //@line 18013
   HEAP8[$668 >> 0] = $108; //@line 18014
   $669 = $ReallocAsyncCtx5 + 213 | 0; //@line 18015
   HEAP8[$669 >> 0] = $110; //@line 18016
   $670 = $ReallocAsyncCtx5 + 216 | 0; //@line 18017
   HEAP32[$670 >> 2] = $112; //@line 18018
   $671 = $ReallocAsyncCtx5 + 220 | 0; //@line 18019
   HEAP32[$671 >> 2] = $114; //@line 18020
   $672 = $ReallocAsyncCtx5 + 224 | 0; //@line 18021
   HEAP8[$672 >> 0] = $4; //@line 18022
   $673 = $ReallocAsyncCtx5 + 228 | 0; //@line 18023
   HEAP32[$673 >> 2] = $118; //@line 18024
   $674 = $ReallocAsyncCtx5 + 232 | 0; //@line 18025
   HEAP32[$674 >> 2] = $120; //@line 18026
   $675 = $ReallocAsyncCtx5 + 236 | 0; //@line 18027
   HEAP32[$675 >> 2] = $116; //@line 18028
   $676 = $ReallocAsyncCtx5 + 240 | 0; //@line 18029
   HEAP32[$676 >> 2] = $124; //@line 18030
   $677 = $ReallocAsyncCtx5 + 244 | 0; //@line 18031
   HEAP32[$677 >> 2] = $126; //@line 18032
   $678 = $ReallocAsyncCtx5 + 248 | 0; //@line 18033
   HEAP32[$678 >> 2] = $128; //@line 18034
   $679 = $ReallocAsyncCtx5 + 252 | 0; //@line 18035
   HEAP32[$679 >> 2] = $130; //@line 18036
   $680 = $ReallocAsyncCtx5 + 256 | 0; //@line 18037
   HEAP32[$680 >> 2] = $122; //@line 18038
   $681 = $ReallocAsyncCtx5 + 260 | 0; //@line 18039
   HEAP32[$681 >> 2] = $134; //@line 18040
   $682 = $ReallocAsyncCtx5 + 264 | 0; //@line 18041
   HEAP32[$682 >> 2] = $136; //@line 18042
   sp = STACKTOP; //@line 18043
   return;
  }
  HEAP8[___async_retval >> 0] = $615; //@line 18047
  ___async_unwind = 0; //@line 18048
  HEAP32[$ReallocAsyncCtx5 >> 2] = 508; //@line 18049
  $616 = $ReallocAsyncCtx5 + 4 | 0; //@line 18050
  HEAP32[$616 >> 2] = $2; //@line 18051
  $617 = $ReallocAsyncCtx5 + 8 | 0; //@line 18052
  HEAP32[$617 >> 2] = $6; //@line 18053
  $618 = $ReallocAsyncCtx5 + 12 | 0; //@line 18054
  HEAP32[$618 >> 2] = $8; //@line 18055
  $619 = $ReallocAsyncCtx5 + 16 | 0; //@line 18056
  HEAP32[$619 >> 2] = $132; //@line 18057
  $620 = $ReallocAsyncCtx5 + 20 | 0; //@line 18058
  HEAP32[$620 >> 2] = $10; //@line 18059
  $621 = $ReallocAsyncCtx5 + 24 | 0; //@line 18060
  HEAP32[$621 >> 2] = $12; //@line 18061
  $622 = $ReallocAsyncCtx5 + 28 | 0; //@line 18062
  HEAP32[$622 >> 2] = $14; //@line 18063
  $623 = $ReallocAsyncCtx5 + 32 | 0; //@line 18064
  HEAP32[$623 >> 2] = $16; //@line 18065
  $624 = $ReallocAsyncCtx5 + 36 | 0; //@line 18066
  HEAP32[$624 >> 2] = $18; //@line 18067
  $625 = $ReallocAsyncCtx5 + 40 | 0; //@line 18068
  HEAP32[$625 >> 2] = $20; //@line 18069
  $626 = $ReallocAsyncCtx5 + 44 | 0; //@line 18070
  HEAP32[$626 >> 2] = $22; //@line 18071
  $627 = $ReallocAsyncCtx5 + 48 | 0; //@line 18072
  HEAP32[$627 >> 2] = $24; //@line 18073
  $628 = $ReallocAsyncCtx5 + 52 | 0; //@line 18074
  HEAP32[$628 >> 2] = $26; //@line 18075
  $629 = $ReallocAsyncCtx5 + 56 | 0; //@line 18076
  HEAP32[$629 >> 2] = $28; //@line 18077
  $630 = $ReallocAsyncCtx5 + 60 | 0; //@line 18078
  HEAP32[$630 >> 2] = $30; //@line 18079
  $631 = $ReallocAsyncCtx5 + 64 | 0; //@line 18080
  HEAP32[$631 >> 2] = $32; //@line 18081
  $632 = $ReallocAsyncCtx5 + 68 | 0; //@line 18082
  HEAP32[$632 >> 2] = $34; //@line 18083
  $633 = $ReallocAsyncCtx5 + 72 | 0; //@line 18084
  HEAP32[$633 >> 2] = $36; //@line 18085
  $634 = $ReallocAsyncCtx5 + 76 | 0; //@line 18086
  HEAP32[$634 >> 2] = $38; //@line 18087
  $635 = $ReallocAsyncCtx5 + 80 | 0; //@line 18088
  HEAP32[$635 >> 2] = $40; //@line 18089
  $636 = $ReallocAsyncCtx5 + 84 | 0; //@line 18090
  HEAP32[$636 >> 2] = $42; //@line 18091
  $637 = $ReallocAsyncCtx5 + 88 | 0; //@line 18092
  HEAP32[$637 >> 2] = $44; //@line 18093
  $638 = $ReallocAsyncCtx5 + 92 | 0; //@line 18094
  HEAP32[$638 >> 2] = $46; //@line 18095
  $639 = $ReallocAsyncCtx5 + 96 | 0; //@line 18096
  HEAP32[$639 >> 2] = $48; //@line 18097
  $640 = $ReallocAsyncCtx5 + 100 | 0; //@line 18098
  HEAP32[$640 >> 2] = $50; //@line 18099
  $641 = $ReallocAsyncCtx5 + 104 | 0; //@line 18100
  HEAP32[$641 >> 2] = $52; //@line 18101
  $642 = $ReallocAsyncCtx5 + 108 | 0; //@line 18102
  HEAP32[$642 >> 2] = $54; //@line 18103
  $643 = $ReallocAsyncCtx5 + 112 | 0; //@line 18104
  HEAP32[$643 >> 2] = $56; //@line 18105
  $644 = $ReallocAsyncCtx5 + 116 | 0; //@line 18106
  HEAP32[$644 >> 2] = $58; //@line 18107
  $645 = $ReallocAsyncCtx5 + 120 | 0; //@line 18108
  HEAP32[$645 >> 2] = $60; //@line 18109
  $646 = $ReallocAsyncCtx5 + 124 | 0; //@line 18110
  HEAP32[$646 >> 2] = $62; //@line 18111
  $647 = $ReallocAsyncCtx5 + 128 | 0; //@line 18112
  HEAP8[$647 >> 0] = $604; //@line 18113
  $648 = $ReallocAsyncCtx5 + 132 | 0; //@line 18114
  HEAP32[$648 >> 2] = $64; //@line 18115
  $649 = $ReallocAsyncCtx5 + 136 | 0; //@line 18116
  HEAP32[$649 >> 2] = $66; //@line 18117
  $650 = $ReallocAsyncCtx5 + 140 | 0; //@line 18118
  HEAP32[$650 >> 2] = $68; //@line 18119
  $651 = $ReallocAsyncCtx5 + 144 | 0; //@line 18120
  HEAP32[$651 >> 2] = $70; //@line 18121
  $652 = $ReallocAsyncCtx5 + 148 | 0; //@line 18122
  HEAP32[$652 >> 2] = $72; //@line 18123
  $653 = $ReallocAsyncCtx5 + 152 | 0; //@line 18124
  HEAP32[$653 >> 2] = $74; //@line 18125
  $654 = $ReallocAsyncCtx5 + 156 | 0; //@line 18126
  HEAP32[$654 >> 2] = $78; //@line 18127
  $655 = $ReallocAsyncCtx5 + 160 | 0; //@line 18128
  HEAP32[$655 >> 2] = $80; //@line 18129
  $656 = $ReallocAsyncCtx5 + 164 | 0; //@line 18130
  HEAP32[$656 >> 2] = $82; //@line 18131
  $657 = $ReallocAsyncCtx5 + 168 | 0; //@line 18132
  HEAP32[$657 >> 2] = $84; //@line 18133
  $658 = $ReallocAsyncCtx5 + 172 | 0; //@line 18134
  HEAP32[$658 >> 2] = $86; //@line 18135
  $659 = $ReallocAsyncCtx5 + 176 | 0; //@line 18136
  HEAP32[$659 >> 2] = $88; //@line 18137
  $660 = $ReallocAsyncCtx5 + 180 | 0; //@line 18138
  HEAP32[$660 >> 2] = $90; //@line 18139
  $661 = $ReallocAsyncCtx5 + 184 | 0; //@line 18140
  HEAP32[$661 >> 2] = $92; //@line 18141
  $662 = $ReallocAsyncCtx5 + 188 | 0; //@line 18142
  HEAP32[$662 >> 2] = $94; //@line 18143
  $663 = $ReallocAsyncCtx5 + 192 | 0; //@line 18144
  HEAP32[$663 >> 2] = $96; //@line 18145
  $664 = $ReallocAsyncCtx5 + 196 | 0; //@line 18146
  HEAP32[$664 >> 2] = $98; //@line 18147
  $665 = $ReallocAsyncCtx5 + 200 | 0; //@line 18148
  HEAP32[$665 >> 2] = $102; //@line 18149
  $666 = $ReallocAsyncCtx5 + 204 | 0; //@line 18150
  HEAP32[$666 >> 2] = $104; //@line 18151
  $667 = $ReallocAsyncCtx5 + 208 | 0; //@line 18152
  HEAP32[$667 >> 2] = $106; //@line 18153
  $668 = $ReallocAsyncCtx5 + 212 | 0; //@line 18154
  HEAP8[$668 >> 0] = $108; //@line 18155
  $669 = $ReallocAsyncCtx5 + 213 | 0; //@line 18156
  HEAP8[$669 >> 0] = $110; //@line 18157
  $670 = $ReallocAsyncCtx5 + 216 | 0; //@line 18158
  HEAP32[$670 >> 2] = $112; //@line 18159
  $671 = $ReallocAsyncCtx5 + 220 | 0; //@line 18160
  HEAP32[$671 >> 2] = $114; //@line 18161
  $672 = $ReallocAsyncCtx5 + 224 | 0; //@line 18162
  HEAP8[$672 >> 0] = $4; //@line 18163
  $673 = $ReallocAsyncCtx5 + 228 | 0; //@line 18164
  HEAP32[$673 >> 2] = $118; //@line 18165
  $674 = $ReallocAsyncCtx5 + 232 | 0; //@line 18166
  HEAP32[$674 >> 2] = $120; //@line 18167
  $675 = $ReallocAsyncCtx5 + 236 | 0; //@line 18168
  HEAP32[$675 >> 2] = $116; //@line 18169
  $676 = $ReallocAsyncCtx5 + 240 | 0; //@line 18170
  HEAP32[$676 >> 2] = $124; //@line 18171
  $677 = $ReallocAsyncCtx5 + 244 | 0; //@line 18172
  HEAP32[$677 >> 2] = $126; //@line 18173
  $678 = $ReallocAsyncCtx5 + 248 | 0; //@line 18174
  HEAP32[$678 >> 2] = $128; //@line 18175
  $679 = $ReallocAsyncCtx5 + 252 | 0; //@line 18176
  HEAP32[$679 >> 2] = $130; //@line 18177
  $680 = $ReallocAsyncCtx5 + 256 | 0; //@line 18178
  HEAP32[$680 >> 2] = $122; //@line 18179
  $681 = $ReallocAsyncCtx5 + 260 | 0; //@line 18180
  HEAP32[$681 >> 2] = $134; //@line 18181
  $682 = $ReallocAsyncCtx5 + 264 | 0; //@line 18182
  HEAP32[$682 >> 2] = $136; //@line 18183
  sp = STACKTOP; //@line 18184
  return;
 } else if ((label | 0) == 36) {
  HEAP32[___async_retval >> 2] = $$096$be; //@line 18189
  return;
 }
}
function __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_340($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0$i104 = 0, $$096$be = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $130 = 0, $132 = 0, $134 = 0, $137 = 0, $14 = 0, $148 = 0, $149 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $231 = 0, $234 = 0, $239 = 0, $24 = 0, $247 = 0, $26 = 0, $266 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $352 = 0, $353 = 0, $36 = 0, $364 = 0, $365 = 0, $38 = 0, $4 = 0, $40 = 0, $402 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $478 = 0, $48 = 0, $482 = 0, $486 = 0, $489 = 0, $495 = 0, $498 = 0, $499 = 0, $50 = 0, $508 = 0, $509 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $58 = 0, $595 = 0, $6 = 0, $60 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 18230
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18232
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18234
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18236
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18238
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18240
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18242
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18244
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 18246
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 18248
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 18250
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 18252
 $24 = HEAP8[$0 + 48 >> 0] | 0; //@line 18254
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 18256
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 18258
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 18260
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 18262
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 18264
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 18266
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 18268
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 18270
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 18272
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 18274
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 18276
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 18278
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 18280
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 18282
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 18284
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 18286
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 18288
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 18290
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 18292
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 18294
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 18296
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 18298
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 18300
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 18302
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 18304
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 18306
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 18308
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 18310
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 18312
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 18314
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 18316
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 18318
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 18320
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 18322
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 18324
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 18326
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 18328
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 18330
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 18332
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 18334
 $106 = HEAP8[$0 + 212 >> 0] | 0; //@line 18336
 $108 = HEAP8[$0 + 213 >> 0] | 0; //@line 18338
 $110 = HEAP32[$0 + 216 >> 2] | 0; //@line 18340
 $112 = HEAP32[$0 + 220 >> 2] | 0; //@line 18342
 $114 = HEAP8[$0 + 224 >> 0] | 0; //@line 18344
 $116 = HEAP32[$0 + 228 >> 2] | 0; //@line 18346
 $118 = HEAP32[$0 + 232 >> 2] | 0; //@line 18348
 $120 = HEAP32[$0 + 236 >> 2] | 0; //@line 18350
 $122 = HEAP32[$0 + 240 >> 2] | 0; //@line 18352
 $124 = HEAP32[$0 + 244 >> 2] | 0; //@line 18354
 $126 = HEAP32[$0 + 248 >> 2] | 0; //@line 18356
 $128 = HEAP32[$0 + 252 >> 2] | 0; //@line 18358
 $130 = HEAP32[$0 + 256 >> 2] | 0; //@line 18360
 $132 = HEAP32[$0 + 260 >> 2] | 0; //@line 18362
 $134 = HEAP32[$0 + 264 >> 2] | 0; //@line 18364
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 18366
 if (($AsyncRetVal & 7) == 7) {
  HEAP8[$44 >> 0] = HEAP8[$72 >> 0] | 0; //@line 18371
  HEAP32[$30 >> 2] = HEAP32[$56 >> 2]; //@line 18373
  HEAP8[$4 >> 0] = HEAP8[$50 >> 0] | 0; //@line 18375
 }
 $352 = HEAP8[$100 >> 0] | 0; //@line 18378
 $353 = $352 & 255; //@line 18379
 if (((-128 - (HEAP8[$134 >> 0] | 0) & 255) + -1 | 0) > ($353 | 0)) {
  HEAP8[$122 + 4 + $353 >> 0] = 5; //@line 18387
  HEAP8[$100 >> 0] = $352 + 2 << 24 >> 24; //@line 18389
  HEAP8[($352 + 1 & 255) + ($122 + 4) >> 0] = $AsyncRetVal; //@line 18392
  HEAP8[$12 >> 0] = 1; //@line 18393
  HEAP8[$76 >> 0] = 1; //@line 18394
  $$0$i104 = 0; //@line 18395
 } else {
  $$0$i104 = -1e3; //@line 18397
 }
 $$0$be = $24; //@line 18399
 $$096$be = $$0$i104; //@line 18399
 L8 : while (1) {
  if (($$0$be & 255) >= ($108 & 255)) {
   label = 33; //@line 18403
   break;
  }
  $137 = $$0$be + 1 << 24 >> 24; //@line 18407
  switch (HEAP8[$118 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 18412
    break L8;
    break;
   }
  case 5:
   {
    label = 9; //@line 18417
    break L8;
    break;
   }
  case 7:
   {
    label = 19; //@line 18422
    break L8;
    break;
   }
  case 9:
   {
    label = 24; //@line 18427
    break L8;
    break;
   }
  case 10:
   {
    label = 29; //@line 18432
    break L8;
    break;
   }
  case 2:
   {
    HEAP32[$26 >> 2] = 0; //@line 18437
    HEAP8[$102 >> 0] = HEAP8[$118 + ($137 & 255) >> 0] | 0; //@line 18442
    HEAP8[$128 >> 0] = HEAP8[$118 + ($$0$be + 2 & 255) >> 0] | 0; //@line 18447
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 18448
    continue L8;
    break;
   }
  case 4:
   {
    $231 = $$0$be + 2 << 24 >> 24; //@line 18453
    $234 = HEAP8[$118 + ($137 & 255) >> 0] | 0; //@line 18456
    HEAP8[$84 >> 0] = $234; //@line 18457
    HEAP16[$64 >> 1] = 1 << ($234 & 255); //@line 18461
    $239 = HEAP8[$100 >> 0] | 0; //@line 18463
    if (($239 & 255) >= (-128 - (HEAP8[$134 >> 0] | 0) & 255)) {
     $$0$be = $231; //@line 18467
     $$096$be = -1e3; //@line 18467
     continue L8;
    }
    HEAP8[$100 >> 0] = $239 + 1 << 24 >> 24; //@line 18473
    HEAP8[($239 & 255) + ($122 + 4) >> 0] = 4; //@line 18474
    HEAP8[$76 >> 0] = 1; //@line 18475
    $$0$be = $231; //@line 18476
    $$096$be = 0; //@line 18476
    continue L8;
    break;
   }
  case 6:
   {
    $364 = HEAP8[$100 >> 0] | 0; //@line 18482
    $365 = $364 & 255; //@line 18483
    if (((-128 - (HEAP8[$134 >> 0] | 0) & 255) + -2 | 0) <= ($365 | 0)) {
     $$0$be = $137; //@line 18489
     $$096$be = -1e3; //@line 18489
     continue L8;
    }
    HEAP8[$122 + 4 + $365 >> 0] = 6; //@line 18494
    HEAP8[($364 + 1 & 255) + ($122 + 4) >> 0] = -1; //@line 18498
    HEAP8[$100 >> 0] = $364 + 3 << 24 >> 24; //@line 18500
    HEAP8[($364 + 2 & 255) + ($122 + 4) >> 0] = $106; //@line 18503
    HEAP8[$76 >> 0] = 1; //@line 18504
    $$0$be = $137; //@line 18505
    $$096$be = 0; //@line 18505
    continue L8;
    break;
   }
  case 8:
   {
    $478 = $$0$be + 2 << 24 >> 24; //@line 18510
    $482 = HEAP8[$118 + ($137 & 255) >> 0] & 15; //@line 18514
    $486 = ($482 + ($482 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 18519
    HEAP32[$48 >> 2] = $486; //@line 18520
    HEAP32[$58 >> 2] = $486 + 1e3; //@line 18522
    $489 = HEAP8[$100 >> 0] | 0; //@line 18524
    if (($489 & 255) >= (-128 - (HEAP8[$134 >> 0] | 0) & 255)) {
     $$0$be = $478; //@line 18528
     $$096$be = -1e3; //@line 18528
     continue L8;
    }
    HEAP8[$100 >> 0] = $489 + 1 << 24 >> 24; //@line 18534
    HEAP8[($489 & 255) + ($122 + 4) >> 0] = 8; //@line 18535
    HEAP8[$12 >> 0] = 1; //@line 18536
    HEAP8[$76 >> 0] = 1; //@line 18537
    $$0$be = $478; //@line 18538
    $$096$be = 0; //@line 18538
    continue L8;
    break;
   }
  default:
   {
    $$0$be = $137; //@line 18543
    $$096$be = -1013; //@line 18543
    continue L8;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$10 >> 0] = 0; //@line 18549
  HEAP8[$66 >> 0] = 0; //@line 18550
  HEAP8[$82 >> 0] = 0; //@line 18551
  HEAP8[$88 >> 0] = 0; //@line 18552
  $148 = $137 & 255; //@line 18553
  $149 = $148 + -1 | 0; //@line 18554
  HEAP32[$120 >> 2] = $118 + $149; //@line 18556
  HEAP8[$70 >> 0] = $14 - $149; //@line 18559
  HEAP8[$78 >> 0] = HEAP8[$90 >> 0] | 0; //@line 18561
  HEAP8[$36 >> 0] = HEAP8[$42 >> 0] | 0; //@line 18563
  HEAP8[$46 >> 0] = HEAP8[$52 >> 0] | 0; //@line 18565
  HEAP8[$2 >> 0] = HEAP8[$18 >> 0] | 0; //@line 18567
  HEAP8[$110 >> 0] = HEAP8[$28 >> 0] | 0; //@line 18569
  $160 = HEAP32[(HEAP32[$8 >> 2] | 0) + 36 >> 2] | 0; //@line 18572
  $ReallocAsyncCtx = _emscripten_realloc_async_context(272) | 0; //@line 18573
  $161 = FUNCTION_TABLE_iiiiiii[$160 & 3]($98, $20, $10, $66, $82, $88) | 0; //@line 18574
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 504; //@line 18577
   $162 = $ReallocAsyncCtx + 4 | 0; //@line 18578
   HEAP32[$162 >> 2] = $2; //@line 18579
   $163 = $ReallocAsyncCtx + 8 | 0; //@line 18580
   HEAP8[$163 >> 0] = $114; //@line 18581
   $164 = $ReallocAsyncCtx + 12 | 0; //@line 18582
   HEAP32[$164 >> 2] = $4; //@line 18583
   $165 = $ReallocAsyncCtx + 16 | 0; //@line 18584
   HEAP32[$165 >> 2] = $6; //@line 18585
   $166 = $ReallocAsyncCtx + 20 | 0; //@line 18586
   HEAP32[$166 >> 2] = $10; //@line 18587
   $167 = $ReallocAsyncCtx + 24 | 0; //@line 18588
   HEAP32[$167 >> 2] = $12; //@line 18589
   $168 = $ReallocAsyncCtx + 28 | 0; //@line 18590
   HEAP32[$168 >> 2] = $14; //@line 18591
   $169 = $ReallocAsyncCtx + 32 | 0; //@line 18592
   HEAP32[$169 >> 2] = $16; //@line 18593
   $170 = $ReallocAsyncCtx + 36 | 0; //@line 18594
   HEAP32[$170 >> 2] = $18; //@line 18595
   $171 = $ReallocAsyncCtx + 40 | 0; //@line 18596
   HEAP32[$171 >> 2] = $20; //@line 18597
   $172 = $ReallocAsyncCtx + 44 | 0; //@line 18598
   HEAP32[$172 >> 2] = $22; //@line 18599
   $173 = $ReallocAsyncCtx + 48 | 0; //@line 18600
   HEAP32[$173 >> 2] = $26; //@line 18601
   $174 = $ReallocAsyncCtx + 52 | 0; //@line 18602
   HEAP32[$174 >> 2] = $28; //@line 18603
   $175 = $ReallocAsyncCtx + 56 | 0; //@line 18604
   HEAP32[$175 >> 2] = $30; //@line 18605
   $176 = $ReallocAsyncCtx + 60 | 0; //@line 18606
   HEAP32[$176 >> 2] = $32; //@line 18607
   $177 = $ReallocAsyncCtx + 64 | 0; //@line 18608
   HEAP32[$177 >> 2] = $34; //@line 18609
   $178 = $ReallocAsyncCtx + 68 | 0; //@line 18610
   HEAP32[$178 >> 2] = $36; //@line 18611
   $179 = $ReallocAsyncCtx + 72 | 0; //@line 18612
   HEAP32[$179 >> 2] = $38; //@line 18613
   $180 = $ReallocAsyncCtx + 76 | 0; //@line 18614
   HEAP32[$180 >> 2] = $40; //@line 18615
   $181 = $ReallocAsyncCtx + 80 | 0; //@line 18616
   HEAP32[$181 >> 2] = $42; //@line 18617
   $182 = $ReallocAsyncCtx + 84 | 0; //@line 18618
   HEAP32[$182 >> 2] = $44; //@line 18619
   $183 = $ReallocAsyncCtx + 88 | 0; //@line 18620
   HEAP32[$183 >> 2] = $46; //@line 18621
   $184 = $ReallocAsyncCtx + 92 | 0; //@line 18622
   HEAP32[$184 >> 2] = $48; //@line 18623
   $185 = $ReallocAsyncCtx + 96 | 0; //@line 18624
   HEAP32[$185 >> 2] = $50; //@line 18625
   $186 = $ReallocAsyncCtx + 100 | 0; //@line 18626
   HEAP32[$186 >> 2] = $52; //@line 18627
   $187 = $ReallocAsyncCtx + 104 | 0; //@line 18628
   HEAP32[$187 >> 2] = $54; //@line 18629
   $188 = $ReallocAsyncCtx + 108 | 0; //@line 18630
   HEAP32[$188 >> 2] = $56; //@line 18631
   $189 = $ReallocAsyncCtx + 112 | 0; //@line 18632
   HEAP32[$189 >> 2] = $58; //@line 18633
   $190 = $ReallocAsyncCtx + 116 | 0; //@line 18634
   HEAP32[$190 >> 2] = $60; //@line 18635
   $191 = $ReallocAsyncCtx + 120 | 0; //@line 18636
   HEAP32[$191 >> 2] = $62; //@line 18637
   $192 = $ReallocAsyncCtx + 124 | 0; //@line 18638
   HEAP32[$192 >> 2] = $64; //@line 18639
   $193 = $ReallocAsyncCtx + 128 | 0; //@line 18640
   HEAP32[$193 >> 2] = $66; //@line 18641
   $194 = $ReallocAsyncCtx + 132 | 0; //@line 18642
   HEAP32[$194 >> 2] = $68; //@line 18643
   $195 = $ReallocAsyncCtx + 136 | 0; //@line 18644
   HEAP32[$195 >> 2] = $70; //@line 18645
   $196 = $ReallocAsyncCtx + 140 | 0; //@line 18646
   HEAP32[$196 >> 2] = $72; //@line 18647
   $197 = $ReallocAsyncCtx + 144 | 0; //@line 18648
   HEAP32[$197 >> 2] = $74; //@line 18649
   $198 = $ReallocAsyncCtx + 148 | 0; //@line 18650
   HEAP32[$198 >> 2] = $76; //@line 18651
   $199 = $ReallocAsyncCtx + 152 | 0; //@line 18652
   HEAP32[$199 >> 2] = $$096$be; //@line 18653
   $200 = $ReallocAsyncCtx + 156 | 0; //@line 18654
   HEAP32[$200 >> 2] = $78; //@line 18655
   $201 = $ReallocAsyncCtx + 160 | 0; //@line 18656
   HEAP32[$201 >> 2] = $80; //@line 18657
   $202 = $ReallocAsyncCtx + 164 | 0; //@line 18658
   HEAP32[$202 >> 2] = $82; //@line 18659
   $203 = $ReallocAsyncCtx + 168 | 0; //@line 18660
   HEAP32[$203 >> 2] = $84; //@line 18661
   $204 = $ReallocAsyncCtx + 172 | 0; //@line 18662
   HEAP32[$204 >> 2] = $86; //@line 18663
   $205 = $ReallocAsyncCtx + 176 | 0; //@line 18664
   HEAP32[$205 >> 2] = $88; //@line 18665
   $206 = $ReallocAsyncCtx + 180 | 0; //@line 18666
   HEAP32[$206 >> 2] = $90; //@line 18667
   $207 = $ReallocAsyncCtx + 184 | 0; //@line 18668
   HEAP32[$207 >> 2] = $92; //@line 18669
   $208 = $ReallocAsyncCtx + 188 | 0; //@line 18670
   HEAP32[$208 >> 2] = $94; //@line 18671
   $209 = $ReallocAsyncCtx + 192 | 0; //@line 18672
   HEAP32[$209 >> 2] = $96; //@line 18673
   $210 = $ReallocAsyncCtx + 196 | 0; //@line 18674
   HEAP32[$210 >> 2] = $98; //@line 18675
   $211 = $ReallocAsyncCtx + 200 | 0; //@line 18676
   HEAP32[$211 >> 2] = $148; //@line 18677
   $212 = $ReallocAsyncCtx + 204 | 0; //@line 18678
   HEAP32[$212 >> 2] = $100; //@line 18679
   $213 = $ReallocAsyncCtx + 208 | 0; //@line 18680
   HEAP32[$213 >> 2] = $102; //@line 18681
   $214 = $ReallocAsyncCtx + 212 | 0; //@line 18682
   HEAP32[$214 >> 2] = $104; //@line 18683
   $215 = $ReallocAsyncCtx + 216 | 0; //@line 18684
   HEAP8[$215 >> 0] = $106; //@line 18685
   $216 = $ReallocAsyncCtx + 217 | 0; //@line 18686
   HEAP8[$216 >> 0] = $108; //@line 18687
   $217 = $ReallocAsyncCtx + 220 | 0; //@line 18688
   HEAP32[$217 >> 2] = $110; //@line 18689
   $218 = $ReallocAsyncCtx + 224 | 0; //@line 18690
   HEAP32[$218 >> 2] = $112; //@line 18691
   $219 = $ReallocAsyncCtx + 228 | 0; //@line 18692
   HEAP32[$219 >> 2] = $120; //@line 18693
   $220 = $ReallocAsyncCtx + 232 | 0; //@line 18694
   HEAP32[$220 >> 2] = $116; //@line 18695
   $221 = $ReallocAsyncCtx + 236 | 0; //@line 18696
   HEAP32[$221 >> 2] = $118; //@line 18697
   $222 = $ReallocAsyncCtx + 240 | 0; //@line 18698
   HEAP32[$222 >> 2] = $130; //@line 18699
   $223 = $ReallocAsyncCtx + 244 | 0; //@line 18700
   HEAP32[$223 >> 2] = $122; //@line 18701
   $224 = $ReallocAsyncCtx + 248 | 0; //@line 18702
   HEAP32[$224 >> 2] = $124; //@line 18703
   $225 = $ReallocAsyncCtx + 252 | 0; //@line 18704
   HEAP32[$225 >> 2] = $126; //@line 18705
   $226 = $ReallocAsyncCtx + 256 | 0; //@line 18706
   HEAP32[$226 >> 2] = $128; //@line 18707
   $227 = $ReallocAsyncCtx + 260 | 0; //@line 18708
   HEAP32[$227 >> 2] = $8; //@line 18709
   $228 = $ReallocAsyncCtx + 264 | 0; //@line 18710
   HEAP32[$228 >> 2] = $132; //@line 18711
   $229 = $ReallocAsyncCtx + 268 | 0; //@line 18712
   HEAP32[$229 >> 2] = $134; //@line 18713
   sp = STACKTOP; //@line 18714
   return;
  }
  HEAP8[___async_retval >> 0] = $161; //@line 18718
  ___async_unwind = 0; //@line 18719
  HEAP32[$ReallocAsyncCtx >> 2] = 504; //@line 18720
  $162 = $ReallocAsyncCtx + 4 | 0; //@line 18721
  HEAP32[$162 >> 2] = $2; //@line 18722
  $163 = $ReallocAsyncCtx + 8 | 0; //@line 18723
  HEAP8[$163 >> 0] = $114; //@line 18724
  $164 = $ReallocAsyncCtx + 12 | 0; //@line 18725
  HEAP32[$164 >> 2] = $4; //@line 18726
  $165 = $ReallocAsyncCtx + 16 | 0; //@line 18727
  HEAP32[$165 >> 2] = $6; //@line 18728
  $166 = $ReallocAsyncCtx + 20 | 0; //@line 18729
  HEAP32[$166 >> 2] = $10; //@line 18730
  $167 = $ReallocAsyncCtx + 24 | 0; //@line 18731
  HEAP32[$167 >> 2] = $12; //@line 18732
  $168 = $ReallocAsyncCtx + 28 | 0; //@line 18733
  HEAP32[$168 >> 2] = $14; //@line 18734
  $169 = $ReallocAsyncCtx + 32 | 0; //@line 18735
  HEAP32[$169 >> 2] = $16; //@line 18736
  $170 = $ReallocAsyncCtx + 36 | 0; //@line 18737
  HEAP32[$170 >> 2] = $18; //@line 18738
  $171 = $ReallocAsyncCtx + 40 | 0; //@line 18739
  HEAP32[$171 >> 2] = $20; //@line 18740
  $172 = $ReallocAsyncCtx + 44 | 0; //@line 18741
  HEAP32[$172 >> 2] = $22; //@line 18742
  $173 = $ReallocAsyncCtx + 48 | 0; //@line 18743
  HEAP32[$173 >> 2] = $26; //@line 18744
  $174 = $ReallocAsyncCtx + 52 | 0; //@line 18745
  HEAP32[$174 >> 2] = $28; //@line 18746
  $175 = $ReallocAsyncCtx + 56 | 0; //@line 18747
  HEAP32[$175 >> 2] = $30; //@line 18748
  $176 = $ReallocAsyncCtx + 60 | 0; //@line 18749
  HEAP32[$176 >> 2] = $32; //@line 18750
  $177 = $ReallocAsyncCtx + 64 | 0; //@line 18751
  HEAP32[$177 >> 2] = $34; //@line 18752
  $178 = $ReallocAsyncCtx + 68 | 0; //@line 18753
  HEAP32[$178 >> 2] = $36; //@line 18754
  $179 = $ReallocAsyncCtx + 72 | 0; //@line 18755
  HEAP32[$179 >> 2] = $38; //@line 18756
  $180 = $ReallocAsyncCtx + 76 | 0; //@line 18757
  HEAP32[$180 >> 2] = $40; //@line 18758
  $181 = $ReallocAsyncCtx + 80 | 0; //@line 18759
  HEAP32[$181 >> 2] = $42; //@line 18760
  $182 = $ReallocAsyncCtx + 84 | 0; //@line 18761
  HEAP32[$182 >> 2] = $44; //@line 18762
  $183 = $ReallocAsyncCtx + 88 | 0; //@line 18763
  HEAP32[$183 >> 2] = $46; //@line 18764
  $184 = $ReallocAsyncCtx + 92 | 0; //@line 18765
  HEAP32[$184 >> 2] = $48; //@line 18766
  $185 = $ReallocAsyncCtx + 96 | 0; //@line 18767
  HEAP32[$185 >> 2] = $50; //@line 18768
  $186 = $ReallocAsyncCtx + 100 | 0; //@line 18769
  HEAP32[$186 >> 2] = $52; //@line 18770
  $187 = $ReallocAsyncCtx + 104 | 0; //@line 18771
  HEAP32[$187 >> 2] = $54; //@line 18772
  $188 = $ReallocAsyncCtx + 108 | 0; //@line 18773
  HEAP32[$188 >> 2] = $56; //@line 18774
  $189 = $ReallocAsyncCtx + 112 | 0; //@line 18775
  HEAP32[$189 >> 2] = $58; //@line 18776
  $190 = $ReallocAsyncCtx + 116 | 0; //@line 18777
  HEAP32[$190 >> 2] = $60; //@line 18778
  $191 = $ReallocAsyncCtx + 120 | 0; //@line 18779
  HEAP32[$191 >> 2] = $62; //@line 18780
  $192 = $ReallocAsyncCtx + 124 | 0; //@line 18781
  HEAP32[$192 >> 2] = $64; //@line 18782
  $193 = $ReallocAsyncCtx + 128 | 0; //@line 18783
  HEAP32[$193 >> 2] = $66; //@line 18784
  $194 = $ReallocAsyncCtx + 132 | 0; //@line 18785
  HEAP32[$194 >> 2] = $68; //@line 18786
  $195 = $ReallocAsyncCtx + 136 | 0; //@line 18787
  HEAP32[$195 >> 2] = $70; //@line 18788
  $196 = $ReallocAsyncCtx + 140 | 0; //@line 18789
  HEAP32[$196 >> 2] = $72; //@line 18790
  $197 = $ReallocAsyncCtx + 144 | 0; //@line 18791
  HEAP32[$197 >> 2] = $74; //@line 18792
  $198 = $ReallocAsyncCtx + 148 | 0; //@line 18793
  HEAP32[$198 >> 2] = $76; //@line 18794
  $199 = $ReallocAsyncCtx + 152 | 0; //@line 18795
  HEAP32[$199 >> 2] = $$096$be; //@line 18796
  $200 = $ReallocAsyncCtx + 156 | 0; //@line 18797
  HEAP32[$200 >> 2] = $78; //@line 18798
  $201 = $ReallocAsyncCtx + 160 | 0; //@line 18799
  HEAP32[$201 >> 2] = $80; //@line 18800
  $202 = $ReallocAsyncCtx + 164 | 0; //@line 18801
  HEAP32[$202 >> 2] = $82; //@line 18802
  $203 = $ReallocAsyncCtx + 168 | 0; //@line 18803
  HEAP32[$203 >> 2] = $84; //@line 18804
  $204 = $ReallocAsyncCtx + 172 | 0; //@line 18805
  HEAP32[$204 >> 2] = $86; //@line 18806
  $205 = $ReallocAsyncCtx + 176 | 0; //@line 18807
  HEAP32[$205 >> 2] = $88; //@line 18808
  $206 = $ReallocAsyncCtx + 180 | 0; //@line 18809
  HEAP32[$206 >> 2] = $90; //@line 18810
  $207 = $ReallocAsyncCtx + 184 | 0; //@line 18811
  HEAP32[$207 >> 2] = $92; //@line 18812
  $208 = $ReallocAsyncCtx + 188 | 0; //@line 18813
  HEAP32[$208 >> 2] = $94; //@line 18814
  $209 = $ReallocAsyncCtx + 192 | 0; //@line 18815
  HEAP32[$209 >> 2] = $96; //@line 18816
  $210 = $ReallocAsyncCtx + 196 | 0; //@line 18817
  HEAP32[$210 >> 2] = $98; //@line 18818
  $211 = $ReallocAsyncCtx + 200 | 0; //@line 18819
  HEAP32[$211 >> 2] = $148; //@line 18820
  $212 = $ReallocAsyncCtx + 204 | 0; //@line 18821
  HEAP32[$212 >> 2] = $100; //@line 18822
  $213 = $ReallocAsyncCtx + 208 | 0; //@line 18823
  HEAP32[$213 >> 2] = $102; //@line 18824
  $214 = $ReallocAsyncCtx + 212 | 0; //@line 18825
  HEAP32[$214 >> 2] = $104; //@line 18826
  $215 = $ReallocAsyncCtx + 216 | 0; //@line 18827
  HEAP8[$215 >> 0] = $106; //@line 18828
  $216 = $ReallocAsyncCtx + 217 | 0; //@line 18829
  HEAP8[$216 >> 0] = $108; //@line 18830
  $217 = $ReallocAsyncCtx + 220 | 0; //@line 18831
  HEAP32[$217 >> 2] = $110; //@line 18832
  $218 = $ReallocAsyncCtx + 224 | 0; //@line 18833
  HEAP32[$218 >> 2] = $112; //@line 18834
  $219 = $ReallocAsyncCtx + 228 | 0; //@line 18835
  HEAP32[$219 >> 2] = $120; //@line 18836
  $220 = $ReallocAsyncCtx + 232 | 0; //@line 18837
  HEAP32[$220 >> 2] = $116; //@line 18838
  $221 = $ReallocAsyncCtx + 236 | 0; //@line 18839
  HEAP32[$221 >> 2] = $118; //@line 18840
  $222 = $ReallocAsyncCtx + 240 | 0; //@line 18841
  HEAP32[$222 >> 2] = $130; //@line 18842
  $223 = $ReallocAsyncCtx + 244 | 0; //@line 18843
  HEAP32[$223 >> 2] = $122; //@line 18844
  $224 = $ReallocAsyncCtx + 248 | 0; //@line 18845
  HEAP32[$224 >> 2] = $124; //@line 18846
  $225 = $ReallocAsyncCtx + 252 | 0; //@line 18847
  HEAP32[$225 >> 2] = $126; //@line 18848
  $226 = $ReallocAsyncCtx + 256 | 0; //@line 18849
  HEAP32[$226 >> 2] = $128; //@line 18850
  $227 = $ReallocAsyncCtx + 260 | 0; //@line 18851
  HEAP32[$227 >> 2] = $8; //@line 18852
  $228 = $ReallocAsyncCtx + 264 | 0; //@line 18853
  HEAP32[$228 >> 2] = $132; //@line 18854
  $229 = $ReallocAsyncCtx + 268 | 0; //@line 18855
  HEAP32[$229 >> 2] = $134; //@line 18856
  sp = STACKTOP; //@line 18857
  return;
 } else if ((label | 0) == 9) {
  $247 = HEAP8[$118 + ($137 & 255) >> 0] | 0; //@line 18863
  HEAP8[$50 >> 0] = ($247 & 255) >>> 4 & 7; //@line 18868
  HEAP8[$72 >> 0] = $247 & 15; //@line 18870
  $266 = $$0$be + 5 << 24 >> 24; //@line 18884
  HEAP32[$56 >> 2] = (HEAPU8[$118 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$118 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$118 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 18892
  $276 = HEAP32[(HEAP32[$38 >> 2] | 0) + 40 >> 2] | 0; //@line 18895
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(268) | 0; //@line 18896
  $277 = FUNCTION_TABLE_iii[$276 & 31]($98, $94) | 0; //@line 18897
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 505; //@line 18900
   $278 = $ReallocAsyncCtx2 + 4 | 0; //@line 18901
   HEAP32[$278 >> 2] = $2; //@line 18902
   $279 = $ReallocAsyncCtx2 + 8 | 0; //@line 18903
   HEAP32[$279 >> 2] = $4; //@line 18904
   $280 = $ReallocAsyncCtx2 + 12 | 0; //@line 18905
   HEAP32[$280 >> 2] = $6; //@line 18906
   $281 = $ReallocAsyncCtx2 + 16 | 0; //@line 18907
   HEAP32[$281 >> 2] = $8; //@line 18908
   $282 = $ReallocAsyncCtx2 + 20 | 0; //@line 18909
   HEAP32[$282 >> 2] = $10; //@line 18910
   $283 = $ReallocAsyncCtx2 + 24 | 0; //@line 18911
   HEAP32[$283 >> 2] = $12; //@line 18912
   $284 = $ReallocAsyncCtx2 + 28 | 0; //@line 18913
   HEAP32[$284 >> 2] = $14; //@line 18914
   $285 = $ReallocAsyncCtx2 + 32 | 0; //@line 18915
   HEAP32[$285 >> 2] = $16; //@line 18916
   $286 = $ReallocAsyncCtx2 + 36 | 0; //@line 18917
   HEAP32[$286 >> 2] = $18; //@line 18918
   $287 = $ReallocAsyncCtx2 + 40 | 0; //@line 18919
   HEAP32[$287 >> 2] = $20; //@line 18920
   $288 = $ReallocAsyncCtx2 + 44 | 0; //@line 18921
   HEAP32[$288 >> 2] = $22; //@line 18922
   $289 = $ReallocAsyncCtx2 + 48 | 0; //@line 18923
   HEAP8[$289 >> 0] = $266; //@line 18924
   $290 = $ReallocAsyncCtx2 + 52 | 0; //@line 18925
   HEAP32[$290 >> 2] = $26; //@line 18926
   $291 = $ReallocAsyncCtx2 + 56 | 0; //@line 18927
   HEAP32[$291 >> 2] = $28; //@line 18928
   $292 = $ReallocAsyncCtx2 + 60 | 0; //@line 18929
   HEAP32[$292 >> 2] = $30; //@line 18930
   $293 = $ReallocAsyncCtx2 + 64 | 0; //@line 18931
   HEAP32[$293 >> 2] = $32; //@line 18932
   $294 = $ReallocAsyncCtx2 + 68 | 0; //@line 18933
   HEAP32[$294 >> 2] = $34; //@line 18934
   $295 = $ReallocAsyncCtx2 + 72 | 0; //@line 18935
   HEAP32[$295 >> 2] = $36; //@line 18936
   $296 = $ReallocAsyncCtx2 + 76 | 0; //@line 18937
   HEAP32[$296 >> 2] = $38; //@line 18938
   $297 = $ReallocAsyncCtx2 + 80 | 0; //@line 18939
   HEAP32[$297 >> 2] = $40; //@line 18940
   $298 = $ReallocAsyncCtx2 + 84 | 0; //@line 18941
   HEAP32[$298 >> 2] = $42; //@line 18942
   $299 = $ReallocAsyncCtx2 + 88 | 0; //@line 18943
   HEAP32[$299 >> 2] = $44; //@line 18944
   $300 = $ReallocAsyncCtx2 + 92 | 0; //@line 18945
   HEAP32[$300 >> 2] = $46; //@line 18946
   $301 = $ReallocAsyncCtx2 + 96 | 0; //@line 18947
   HEAP32[$301 >> 2] = $48; //@line 18948
   $302 = $ReallocAsyncCtx2 + 100 | 0; //@line 18949
   HEAP32[$302 >> 2] = $50; //@line 18950
   $303 = $ReallocAsyncCtx2 + 104 | 0; //@line 18951
   HEAP32[$303 >> 2] = $52; //@line 18952
   $304 = $ReallocAsyncCtx2 + 108 | 0; //@line 18953
   HEAP32[$304 >> 2] = $54; //@line 18954
   $305 = $ReallocAsyncCtx2 + 112 | 0; //@line 18955
   HEAP32[$305 >> 2] = $56; //@line 18956
   $306 = $ReallocAsyncCtx2 + 116 | 0; //@line 18957
   HEAP32[$306 >> 2] = $58; //@line 18958
   $307 = $ReallocAsyncCtx2 + 120 | 0; //@line 18959
   HEAP32[$307 >> 2] = $60; //@line 18960
   $308 = $ReallocAsyncCtx2 + 124 | 0; //@line 18961
   HEAP32[$308 >> 2] = $62; //@line 18962
   $309 = $ReallocAsyncCtx2 + 128 | 0; //@line 18963
   HEAP32[$309 >> 2] = $64; //@line 18964
   $310 = $ReallocAsyncCtx2 + 132 | 0; //@line 18965
   HEAP32[$310 >> 2] = $66; //@line 18966
   $311 = $ReallocAsyncCtx2 + 136 | 0; //@line 18967
   HEAP32[$311 >> 2] = $68; //@line 18968
   $312 = $ReallocAsyncCtx2 + 140 | 0; //@line 18969
   HEAP32[$312 >> 2] = $70; //@line 18970
   $313 = $ReallocAsyncCtx2 + 144 | 0; //@line 18971
   HEAP32[$313 >> 2] = $72; //@line 18972
   $314 = $ReallocAsyncCtx2 + 148 | 0; //@line 18973
   HEAP32[$314 >> 2] = $74; //@line 18974
   $315 = $ReallocAsyncCtx2 + 152 | 0; //@line 18975
   HEAP32[$315 >> 2] = $76; //@line 18976
   $316 = $ReallocAsyncCtx2 + 156 | 0; //@line 18977
   HEAP32[$316 >> 2] = $78; //@line 18978
   $317 = $ReallocAsyncCtx2 + 160 | 0; //@line 18979
   HEAP32[$317 >> 2] = $80; //@line 18980
   $318 = $ReallocAsyncCtx2 + 164 | 0; //@line 18981
   HEAP32[$318 >> 2] = $82; //@line 18982
   $319 = $ReallocAsyncCtx2 + 168 | 0; //@line 18983
   HEAP32[$319 >> 2] = $84; //@line 18984
   $320 = $ReallocAsyncCtx2 + 172 | 0; //@line 18985
   HEAP32[$320 >> 2] = $86; //@line 18986
   $321 = $ReallocAsyncCtx2 + 176 | 0; //@line 18987
   HEAP32[$321 >> 2] = $88; //@line 18988
   $322 = $ReallocAsyncCtx2 + 180 | 0; //@line 18989
   HEAP32[$322 >> 2] = $90; //@line 18990
   $323 = $ReallocAsyncCtx2 + 184 | 0; //@line 18991
   HEAP32[$323 >> 2] = $92; //@line 18992
   $324 = $ReallocAsyncCtx2 + 188 | 0; //@line 18993
   HEAP32[$324 >> 2] = $94; //@line 18994
   $325 = $ReallocAsyncCtx2 + 192 | 0; //@line 18995
   HEAP32[$325 >> 2] = $96; //@line 18996
   $326 = $ReallocAsyncCtx2 + 196 | 0; //@line 18997
   HEAP32[$326 >> 2] = $98; //@line 18998
   $327 = $ReallocAsyncCtx2 + 200 | 0; //@line 18999
   HEAP32[$327 >> 2] = $100; //@line 19000
   $328 = $ReallocAsyncCtx2 + 204 | 0; //@line 19001
   HEAP32[$328 >> 2] = $102; //@line 19002
   $329 = $ReallocAsyncCtx2 + 208 | 0; //@line 19003
   HEAP32[$329 >> 2] = $104; //@line 19004
   $330 = $ReallocAsyncCtx2 + 212 | 0; //@line 19005
   HEAP8[$330 >> 0] = $106; //@line 19006
   $331 = $ReallocAsyncCtx2 + 213 | 0; //@line 19007
   HEAP8[$331 >> 0] = $108; //@line 19008
   $332 = $ReallocAsyncCtx2 + 216 | 0; //@line 19009
   HEAP32[$332 >> 2] = $110; //@line 19010
   $333 = $ReallocAsyncCtx2 + 220 | 0; //@line 19011
   HEAP32[$333 >> 2] = $112; //@line 19012
   $334 = $ReallocAsyncCtx2 + 224 | 0; //@line 19013
   HEAP8[$334 >> 0] = $114; //@line 19014
   $335 = $ReallocAsyncCtx2 + 228 | 0; //@line 19015
   HEAP32[$335 >> 2] = $116; //@line 19016
   $336 = $ReallocAsyncCtx2 + 232 | 0; //@line 19017
   HEAP32[$336 >> 2] = $118; //@line 19018
   $337 = $ReallocAsyncCtx2 + 236 | 0; //@line 19019
   HEAP32[$337 >> 2] = $120; //@line 19020
   $338 = $ReallocAsyncCtx2 + 240 | 0; //@line 19021
   HEAP32[$338 >> 2] = $122; //@line 19022
   $339 = $ReallocAsyncCtx2 + 244 | 0; //@line 19023
   HEAP32[$339 >> 2] = $124; //@line 19024
   $340 = $ReallocAsyncCtx2 + 248 | 0; //@line 19025
   HEAP32[$340 >> 2] = $126; //@line 19026
   $341 = $ReallocAsyncCtx2 + 252 | 0; //@line 19027
   HEAP32[$341 >> 2] = $128; //@line 19028
   $342 = $ReallocAsyncCtx2 + 256 | 0; //@line 19029
   HEAP32[$342 >> 2] = $130; //@line 19030
   $343 = $ReallocAsyncCtx2 + 260 | 0; //@line 19031
   HEAP32[$343 >> 2] = $132; //@line 19032
   $344 = $ReallocAsyncCtx2 + 264 | 0; //@line 19033
   HEAP32[$344 >> 2] = $134; //@line 19034
   sp = STACKTOP; //@line 19035
   return;
  }
  HEAP8[___async_retval >> 0] = $277; //@line 19039
  ___async_unwind = 0; //@line 19040
  HEAP32[$ReallocAsyncCtx2 >> 2] = 505; //@line 19041
  $278 = $ReallocAsyncCtx2 + 4 | 0; //@line 19042
  HEAP32[$278 >> 2] = $2; //@line 19043
  $279 = $ReallocAsyncCtx2 + 8 | 0; //@line 19044
  HEAP32[$279 >> 2] = $4; //@line 19045
  $280 = $ReallocAsyncCtx2 + 12 | 0; //@line 19046
  HEAP32[$280 >> 2] = $6; //@line 19047
  $281 = $ReallocAsyncCtx2 + 16 | 0; //@line 19048
  HEAP32[$281 >> 2] = $8; //@line 19049
  $282 = $ReallocAsyncCtx2 + 20 | 0; //@line 19050
  HEAP32[$282 >> 2] = $10; //@line 19051
  $283 = $ReallocAsyncCtx2 + 24 | 0; //@line 19052
  HEAP32[$283 >> 2] = $12; //@line 19053
  $284 = $ReallocAsyncCtx2 + 28 | 0; //@line 19054
  HEAP32[$284 >> 2] = $14; //@line 19055
  $285 = $ReallocAsyncCtx2 + 32 | 0; //@line 19056
  HEAP32[$285 >> 2] = $16; //@line 19057
  $286 = $ReallocAsyncCtx2 + 36 | 0; //@line 19058
  HEAP32[$286 >> 2] = $18; //@line 19059
  $287 = $ReallocAsyncCtx2 + 40 | 0; //@line 19060
  HEAP32[$287 >> 2] = $20; //@line 19061
  $288 = $ReallocAsyncCtx2 + 44 | 0; //@line 19062
  HEAP32[$288 >> 2] = $22; //@line 19063
  $289 = $ReallocAsyncCtx2 + 48 | 0; //@line 19064
  HEAP8[$289 >> 0] = $266; //@line 19065
  $290 = $ReallocAsyncCtx2 + 52 | 0; //@line 19066
  HEAP32[$290 >> 2] = $26; //@line 19067
  $291 = $ReallocAsyncCtx2 + 56 | 0; //@line 19068
  HEAP32[$291 >> 2] = $28; //@line 19069
  $292 = $ReallocAsyncCtx2 + 60 | 0; //@line 19070
  HEAP32[$292 >> 2] = $30; //@line 19071
  $293 = $ReallocAsyncCtx2 + 64 | 0; //@line 19072
  HEAP32[$293 >> 2] = $32; //@line 19073
  $294 = $ReallocAsyncCtx2 + 68 | 0; //@line 19074
  HEAP32[$294 >> 2] = $34; //@line 19075
  $295 = $ReallocAsyncCtx2 + 72 | 0; //@line 19076
  HEAP32[$295 >> 2] = $36; //@line 19077
  $296 = $ReallocAsyncCtx2 + 76 | 0; //@line 19078
  HEAP32[$296 >> 2] = $38; //@line 19079
  $297 = $ReallocAsyncCtx2 + 80 | 0; //@line 19080
  HEAP32[$297 >> 2] = $40; //@line 19081
  $298 = $ReallocAsyncCtx2 + 84 | 0; //@line 19082
  HEAP32[$298 >> 2] = $42; //@line 19083
  $299 = $ReallocAsyncCtx2 + 88 | 0; //@line 19084
  HEAP32[$299 >> 2] = $44; //@line 19085
  $300 = $ReallocAsyncCtx2 + 92 | 0; //@line 19086
  HEAP32[$300 >> 2] = $46; //@line 19087
  $301 = $ReallocAsyncCtx2 + 96 | 0; //@line 19088
  HEAP32[$301 >> 2] = $48; //@line 19089
  $302 = $ReallocAsyncCtx2 + 100 | 0; //@line 19090
  HEAP32[$302 >> 2] = $50; //@line 19091
  $303 = $ReallocAsyncCtx2 + 104 | 0; //@line 19092
  HEAP32[$303 >> 2] = $52; //@line 19093
  $304 = $ReallocAsyncCtx2 + 108 | 0; //@line 19094
  HEAP32[$304 >> 2] = $54; //@line 19095
  $305 = $ReallocAsyncCtx2 + 112 | 0; //@line 19096
  HEAP32[$305 >> 2] = $56; //@line 19097
  $306 = $ReallocAsyncCtx2 + 116 | 0; //@line 19098
  HEAP32[$306 >> 2] = $58; //@line 19099
  $307 = $ReallocAsyncCtx2 + 120 | 0; //@line 19100
  HEAP32[$307 >> 2] = $60; //@line 19101
  $308 = $ReallocAsyncCtx2 + 124 | 0; //@line 19102
  HEAP32[$308 >> 2] = $62; //@line 19103
  $309 = $ReallocAsyncCtx2 + 128 | 0; //@line 19104
  HEAP32[$309 >> 2] = $64; //@line 19105
  $310 = $ReallocAsyncCtx2 + 132 | 0; //@line 19106
  HEAP32[$310 >> 2] = $66; //@line 19107
  $311 = $ReallocAsyncCtx2 + 136 | 0; //@line 19108
  HEAP32[$311 >> 2] = $68; //@line 19109
  $312 = $ReallocAsyncCtx2 + 140 | 0; //@line 19110
  HEAP32[$312 >> 2] = $70; //@line 19111
  $313 = $ReallocAsyncCtx2 + 144 | 0; //@line 19112
  HEAP32[$313 >> 2] = $72; //@line 19113
  $314 = $ReallocAsyncCtx2 + 148 | 0; //@line 19114
  HEAP32[$314 >> 2] = $74; //@line 19115
  $315 = $ReallocAsyncCtx2 + 152 | 0; //@line 19116
  HEAP32[$315 >> 2] = $76; //@line 19117
  $316 = $ReallocAsyncCtx2 + 156 | 0; //@line 19118
  HEAP32[$316 >> 2] = $78; //@line 19119
  $317 = $ReallocAsyncCtx2 + 160 | 0; //@line 19120
  HEAP32[$317 >> 2] = $80; //@line 19121
  $318 = $ReallocAsyncCtx2 + 164 | 0; //@line 19122
  HEAP32[$318 >> 2] = $82; //@line 19123
  $319 = $ReallocAsyncCtx2 + 168 | 0; //@line 19124
  HEAP32[$319 >> 2] = $84; //@line 19125
  $320 = $ReallocAsyncCtx2 + 172 | 0; //@line 19126
  HEAP32[$320 >> 2] = $86; //@line 19127
  $321 = $ReallocAsyncCtx2 + 176 | 0; //@line 19128
  HEAP32[$321 >> 2] = $88; //@line 19129
  $322 = $ReallocAsyncCtx2 + 180 | 0; //@line 19130
  HEAP32[$322 >> 2] = $90; //@line 19131
  $323 = $ReallocAsyncCtx2 + 184 | 0; //@line 19132
  HEAP32[$323 >> 2] = $92; //@line 19133
  $324 = $ReallocAsyncCtx2 + 188 | 0; //@line 19134
  HEAP32[$324 >> 2] = $94; //@line 19135
  $325 = $ReallocAsyncCtx2 + 192 | 0; //@line 19136
  HEAP32[$325 >> 2] = $96; //@line 19137
  $326 = $ReallocAsyncCtx2 + 196 | 0; //@line 19138
  HEAP32[$326 >> 2] = $98; //@line 19139
  $327 = $ReallocAsyncCtx2 + 200 | 0; //@line 19140
  HEAP32[$327 >> 2] = $100; //@line 19141
  $328 = $ReallocAsyncCtx2 + 204 | 0; //@line 19142
  HEAP32[$328 >> 2] = $102; //@line 19143
  $329 = $ReallocAsyncCtx2 + 208 | 0; //@line 19144
  HEAP32[$329 >> 2] = $104; //@line 19145
  $330 = $ReallocAsyncCtx2 + 212 | 0; //@line 19146
  HEAP8[$330 >> 0] = $106; //@line 19147
  $331 = $ReallocAsyncCtx2 + 213 | 0; //@line 19148
  HEAP8[$331 >> 0] = $108; //@line 19149
  $332 = $ReallocAsyncCtx2 + 216 | 0; //@line 19150
  HEAP32[$332 >> 2] = $110; //@line 19151
  $333 = $ReallocAsyncCtx2 + 220 | 0; //@line 19152
  HEAP32[$333 >> 2] = $112; //@line 19153
  $334 = $ReallocAsyncCtx2 + 224 | 0; //@line 19154
  HEAP8[$334 >> 0] = $114; //@line 19155
  $335 = $ReallocAsyncCtx2 + 228 | 0; //@line 19156
  HEAP32[$335 >> 2] = $116; //@line 19157
  $336 = $ReallocAsyncCtx2 + 232 | 0; //@line 19158
  HEAP32[$336 >> 2] = $118; //@line 19159
  $337 = $ReallocAsyncCtx2 + 236 | 0; //@line 19160
  HEAP32[$337 >> 2] = $120; //@line 19161
  $338 = $ReallocAsyncCtx2 + 240 | 0; //@line 19162
  HEAP32[$338 >> 2] = $122; //@line 19163
  $339 = $ReallocAsyncCtx2 + 244 | 0; //@line 19164
  HEAP32[$339 >> 2] = $124; //@line 19165
  $340 = $ReallocAsyncCtx2 + 248 | 0; //@line 19166
  HEAP32[$340 >> 2] = $126; //@line 19167
  $341 = $ReallocAsyncCtx2 + 252 | 0; //@line 19168
  HEAP32[$341 >> 2] = $128; //@line 19169
  $342 = $ReallocAsyncCtx2 + 256 | 0; //@line 19170
  HEAP32[$342 >> 2] = $130; //@line 19171
  $343 = $ReallocAsyncCtx2 + 260 | 0; //@line 19172
  HEAP32[$343 >> 2] = $132; //@line 19173
  $344 = $ReallocAsyncCtx2 + 264 | 0; //@line 19174
  HEAP32[$344 >> 2] = $134; //@line 19175
  sp = STACKTOP; //@line 19176
  return;
 } else if ((label | 0) == 19) {
  HEAP8[$124 >> 0] = HEAP8[$118 + ($137 & 255) >> 0] | 0; //@line 19184
  HEAP32[$96 >> 2] = $54; //@line 19185
  HEAP32[$80 >> 2] = (HEAPU8[$118 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$118 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$118 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 19206
  HEAP32[$86 >> 2] = 0; //@line 19207
  $402 = $$0$be + 6 << 24 >> 24; //@line 19208
  HEAP8[$62 >> 0] = HEAP8[$118 + ($$0$be + 5 & 255) >> 0] | 0; //@line 19212
  $408 = HEAP32[(HEAP32[$74 >> 2] | 0) + 8 >> 2] | 0; //@line 19215
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(268) | 0; //@line 19216
  $409 = FUNCTION_TABLE_iii[$408 & 31]($98, $92) | 0; //@line 19217
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 506; //@line 19220
   $410 = $ReallocAsyncCtx3 + 4 | 0; //@line 19221
   HEAP32[$410 >> 2] = $2; //@line 19222
   $411 = $ReallocAsyncCtx3 + 8 | 0; //@line 19223
   HEAP32[$411 >> 2] = $4; //@line 19224
   $412 = $ReallocAsyncCtx3 + 12 | 0; //@line 19225
   HEAP32[$412 >> 2] = $6; //@line 19226
   $413 = $ReallocAsyncCtx3 + 16 | 0; //@line 19227
   HEAP32[$413 >> 2] = $8; //@line 19228
   $414 = $ReallocAsyncCtx3 + 20 | 0; //@line 19229
   HEAP32[$414 >> 2] = $10; //@line 19230
   $415 = $ReallocAsyncCtx3 + 24 | 0; //@line 19231
   HEAP32[$415 >> 2] = $12; //@line 19232
   $416 = $ReallocAsyncCtx3 + 28 | 0; //@line 19233
   HEAP32[$416 >> 2] = $14; //@line 19234
   $417 = $ReallocAsyncCtx3 + 32 | 0; //@line 19235
   HEAP32[$417 >> 2] = $16; //@line 19236
   $418 = $ReallocAsyncCtx3 + 36 | 0; //@line 19237
   HEAP32[$418 >> 2] = $18; //@line 19238
   $419 = $ReallocAsyncCtx3 + 40 | 0; //@line 19239
   HEAP32[$419 >> 2] = $20; //@line 19240
   $420 = $ReallocAsyncCtx3 + 44 | 0; //@line 19241
   HEAP32[$420 >> 2] = $22; //@line 19242
   $421 = $ReallocAsyncCtx3 + 48 | 0; //@line 19243
   HEAP32[$421 >> 2] = $26; //@line 19244
   $422 = $ReallocAsyncCtx3 + 52 | 0; //@line 19245
   HEAP32[$422 >> 2] = $28; //@line 19246
   $423 = $ReallocAsyncCtx3 + 56 | 0; //@line 19247
   HEAP32[$423 >> 2] = $30; //@line 19248
   $424 = $ReallocAsyncCtx3 + 60 | 0; //@line 19249
   HEAP32[$424 >> 2] = $32; //@line 19250
   $425 = $ReallocAsyncCtx3 + 64 | 0; //@line 19251
   HEAP32[$425 >> 2] = $34; //@line 19252
   $426 = $ReallocAsyncCtx3 + 68 | 0; //@line 19253
   HEAP32[$426 >> 2] = $36; //@line 19254
   $427 = $ReallocAsyncCtx3 + 72 | 0; //@line 19255
   HEAP32[$427 >> 2] = $38; //@line 19256
   $428 = $ReallocAsyncCtx3 + 76 | 0; //@line 19257
   HEAP32[$428 >> 2] = $40; //@line 19258
   $429 = $ReallocAsyncCtx3 + 80 | 0; //@line 19259
   HEAP32[$429 >> 2] = $42; //@line 19260
   $430 = $ReallocAsyncCtx3 + 84 | 0; //@line 19261
   HEAP32[$430 >> 2] = $44; //@line 19262
   $431 = $ReallocAsyncCtx3 + 88 | 0; //@line 19263
   HEAP8[$431 >> 0] = $402; //@line 19264
   $432 = $ReallocAsyncCtx3 + 92 | 0; //@line 19265
   HEAP32[$432 >> 2] = $46; //@line 19266
   $433 = $ReallocAsyncCtx3 + 96 | 0; //@line 19267
   HEAP32[$433 >> 2] = $48; //@line 19268
   $434 = $ReallocAsyncCtx3 + 100 | 0; //@line 19269
   HEAP32[$434 >> 2] = $50; //@line 19270
   $435 = $ReallocAsyncCtx3 + 104 | 0; //@line 19271
   HEAP32[$435 >> 2] = $52; //@line 19272
   $436 = $ReallocAsyncCtx3 + 108 | 0; //@line 19273
   HEAP32[$436 >> 2] = $54; //@line 19274
   $437 = $ReallocAsyncCtx3 + 112 | 0; //@line 19275
   HEAP32[$437 >> 2] = $56; //@line 19276
   $438 = $ReallocAsyncCtx3 + 116 | 0; //@line 19277
   HEAP32[$438 >> 2] = $58; //@line 19278
   $439 = $ReallocAsyncCtx3 + 120 | 0; //@line 19279
   HEAP32[$439 >> 2] = $60; //@line 19280
   $440 = $ReallocAsyncCtx3 + 124 | 0; //@line 19281
   HEAP32[$440 >> 2] = $62; //@line 19282
   $441 = $ReallocAsyncCtx3 + 128 | 0; //@line 19283
   HEAP32[$441 >> 2] = $64; //@line 19284
   $442 = $ReallocAsyncCtx3 + 132 | 0; //@line 19285
   HEAP32[$442 >> 2] = $66; //@line 19286
   $443 = $ReallocAsyncCtx3 + 136 | 0; //@line 19287
   HEAP32[$443 >> 2] = $68; //@line 19288
   $444 = $ReallocAsyncCtx3 + 140 | 0; //@line 19289
   HEAP32[$444 >> 2] = $70; //@line 19290
   $445 = $ReallocAsyncCtx3 + 144 | 0; //@line 19291
   HEAP32[$445 >> 2] = $72; //@line 19292
   $446 = $ReallocAsyncCtx3 + 148 | 0; //@line 19293
   HEAP32[$446 >> 2] = $74; //@line 19294
   $447 = $ReallocAsyncCtx3 + 152 | 0; //@line 19295
   HEAP32[$447 >> 2] = $76; //@line 19296
   $448 = $ReallocAsyncCtx3 + 156 | 0; //@line 19297
   HEAP32[$448 >> 2] = $78; //@line 19298
   $449 = $ReallocAsyncCtx3 + 160 | 0; //@line 19299
   HEAP32[$449 >> 2] = $80; //@line 19300
   $450 = $ReallocAsyncCtx3 + 164 | 0; //@line 19301
   HEAP32[$450 >> 2] = $82; //@line 19302
   $451 = $ReallocAsyncCtx3 + 168 | 0; //@line 19303
   HEAP32[$451 >> 2] = $84; //@line 19304
   $452 = $ReallocAsyncCtx3 + 172 | 0; //@line 19305
   HEAP32[$452 >> 2] = $86; //@line 19306
   $453 = $ReallocAsyncCtx3 + 176 | 0; //@line 19307
   HEAP32[$453 >> 2] = $88; //@line 19308
   $454 = $ReallocAsyncCtx3 + 180 | 0; //@line 19309
   HEAP32[$454 >> 2] = $90; //@line 19310
   $455 = $ReallocAsyncCtx3 + 184 | 0; //@line 19311
   HEAP32[$455 >> 2] = $92; //@line 19312
   $456 = $ReallocAsyncCtx3 + 188 | 0; //@line 19313
   HEAP32[$456 >> 2] = $94; //@line 19314
   $457 = $ReallocAsyncCtx3 + 192 | 0; //@line 19315
   HEAP32[$457 >> 2] = $96; //@line 19316
   $458 = $ReallocAsyncCtx3 + 196 | 0; //@line 19317
   HEAP32[$458 >> 2] = $98; //@line 19318
   $459 = $ReallocAsyncCtx3 + 200 | 0; //@line 19319
   HEAP32[$459 >> 2] = $100; //@line 19320
   $460 = $ReallocAsyncCtx3 + 204 | 0; //@line 19321
   HEAP32[$460 >> 2] = $102; //@line 19322
   $461 = $ReallocAsyncCtx3 + 208 | 0; //@line 19323
   HEAP32[$461 >> 2] = $104; //@line 19324
   $462 = $ReallocAsyncCtx3 + 212 | 0; //@line 19325
   HEAP8[$462 >> 0] = $106; //@line 19326
   $463 = $ReallocAsyncCtx3 + 213 | 0; //@line 19327
   HEAP8[$463 >> 0] = $108; //@line 19328
   $464 = $ReallocAsyncCtx3 + 216 | 0; //@line 19329
   HEAP32[$464 >> 2] = $110; //@line 19330
   $465 = $ReallocAsyncCtx3 + 220 | 0; //@line 19331
   HEAP32[$465 >> 2] = $112; //@line 19332
   $466 = $ReallocAsyncCtx3 + 224 | 0; //@line 19333
   HEAP8[$466 >> 0] = $114; //@line 19334
   $467 = $ReallocAsyncCtx3 + 228 | 0; //@line 19335
   HEAP32[$467 >> 2] = $116; //@line 19336
   $468 = $ReallocAsyncCtx3 + 232 | 0; //@line 19337
   HEAP32[$468 >> 2] = $118; //@line 19338
   $469 = $ReallocAsyncCtx3 + 236 | 0; //@line 19339
   HEAP32[$469 >> 2] = $120; //@line 19340
   $470 = $ReallocAsyncCtx3 + 240 | 0; //@line 19341
   HEAP32[$470 >> 2] = $122; //@line 19342
   $471 = $ReallocAsyncCtx3 + 244 | 0; //@line 19343
   HEAP32[$471 >> 2] = $124; //@line 19344
   $472 = $ReallocAsyncCtx3 + 248 | 0; //@line 19345
   HEAP32[$472 >> 2] = $126; //@line 19346
   $473 = $ReallocAsyncCtx3 + 252 | 0; //@line 19347
   HEAP32[$473 >> 2] = $128; //@line 19348
   $474 = $ReallocAsyncCtx3 + 256 | 0; //@line 19349
   HEAP32[$474 >> 2] = $130; //@line 19350
   $475 = $ReallocAsyncCtx3 + 260 | 0; //@line 19351
   HEAP32[$475 >> 2] = $132; //@line 19352
   $476 = $ReallocAsyncCtx3 + 264 | 0; //@line 19353
   HEAP32[$476 >> 2] = $134; //@line 19354
   sp = STACKTOP; //@line 19355
   return;
  }
  HEAP8[___async_retval >> 0] = $409; //@line 19359
  ___async_unwind = 0; //@line 19360
  HEAP32[$ReallocAsyncCtx3 >> 2] = 506; //@line 19361
  $410 = $ReallocAsyncCtx3 + 4 | 0; //@line 19362
  HEAP32[$410 >> 2] = $2; //@line 19363
  $411 = $ReallocAsyncCtx3 + 8 | 0; //@line 19364
  HEAP32[$411 >> 2] = $4; //@line 19365
  $412 = $ReallocAsyncCtx3 + 12 | 0; //@line 19366
  HEAP32[$412 >> 2] = $6; //@line 19367
  $413 = $ReallocAsyncCtx3 + 16 | 0; //@line 19368
  HEAP32[$413 >> 2] = $8; //@line 19369
  $414 = $ReallocAsyncCtx3 + 20 | 0; //@line 19370
  HEAP32[$414 >> 2] = $10; //@line 19371
  $415 = $ReallocAsyncCtx3 + 24 | 0; //@line 19372
  HEAP32[$415 >> 2] = $12; //@line 19373
  $416 = $ReallocAsyncCtx3 + 28 | 0; //@line 19374
  HEAP32[$416 >> 2] = $14; //@line 19375
  $417 = $ReallocAsyncCtx3 + 32 | 0; //@line 19376
  HEAP32[$417 >> 2] = $16; //@line 19377
  $418 = $ReallocAsyncCtx3 + 36 | 0; //@line 19378
  HEAP32[$418 >> 2] = $18; //@line 19379
  $419 = $ReallocAsyncCtx3 + 40 | 0; //@line 19380
  HEAP32[$419 >> 2] = $20; //@line 19381
  $420 = $ReallocAsyncCtx3 + 44 | 0; //@line 19382
  HEAP32[$420 >> 2] = $22; //@line 19383
  $421 = $ReallocAsyncCtx3 + 48 | 0; //@line 19384
  HEAP32[$421 >> 2] = $26; //@line 19385
  $422 = $ReallocAsyncCtx3 + 52 | 0; //@line 19386
  HEAP32[$422 >> 2] = $28; //@line 19387
  $423 = $ReallocAsyncCtx3 + 56 | 0; //@line 19388
  HEAP32[$423 >> 2] = $30; //@line 19389
  $424 = $ReallocAsyncCtx3 + 60 | 0; //@line 19390
  HEAP32[$424 >> 2] = $32; //@line 19391
  $425 = $ReallocAsyncCtx3 + 64 | 0; //@line 19392
  HEAP32[$425 >> 2] = $34; //@line 19393
  $426 = $ReallocAsyncCtx3 + 68 | 0; //@line 19394
  HEAP32[$426 >> 2] = $36; //@line 19395
  $427 = $ReallocAsyncCtx3 + 72 | 0; //@line 19396
  HEAP32[$427 >> 2] = $38; //@line 19397
  $428 = $ReallocAsyncCtx3 + 76 | 0; //@line 19398
  HEAP32[$428 >> 2] = $40; //@line 19399
  $429 = $ReallocAsyncCtx3 + 80 | 0; //@line 19400
  HEAP32[$429 >> 2] = $42; //@line 19401
  $430 = $ReallocAsyncCtx3 + 84 | 0; //@line 19402
  HEAP32[$430 >> 2] = $44; //@line 19403
  $431 = $ReallocAsyncCtx3 + 88 | 0; //@line 19404
  HEAP8[$431 >> 0] = $402; //@line 19405
  $432 = $ReallocAsyncCtx3 + 92 | 0; //@line 19406
  HEAP32[$432 >> 2] = $46; //@line 19407
  $433 = $ReallocAsyncCtx3 + 96 | 0; //@line 19408
  HEAP32[$433 >> 2] = $48; //@line 19409
  $434 = $ReallocAsyncCtx3 + 100 | 0; //@line 19410
  HEAP32[$434 >> 2] = $50; //@line 19411
  $435 = $ReallocAsyncCtx3 + 104 | 0; //@line 19412
  HEAP32[$435 >> 2] = $52; //@line 19413
  $436 = $ReallocAsyncCtx3 + 108 | 0; //@line 19414
  HEAP32[$436 >> 2] = $54; //@line 19415
  $437 = $ReallocAsyncCtx3 + 112 | 0; //@line 19416
  HEAP32[$437 >> 2] = $56; //@line 19417
  $438 = $ReallocAsyncCtx3 + 116 | 0; //@line 19418
  HEAP32[$438 >> 2] = $58; //@line 19419
  $439 = $ReallocAsyncCtx3 + 120 | 0; //@line 19420
  HEAP32[$439 >> 2] = $60; //@line 19421
  $440 = $ReallocAsyncCtx3 + 124 | 0; //@line 19422
  HEAP32[$440 >> 2] = $62; //@line 19423
  $441 = $ReallocAsyncCtx3 + 128 | 0; //@line 19424
  HEAP32[$441 >> 2] = $64; //@line 19425
  $442 = $ReallocAsyncCtx3 + 132 | 0; //@line 19426
  HEAP32[$442 >> 2] = $66; //@line 19427
  $443 = $ReallocAsyncCtx3 + 136 | 0; //@line 19428
  HEAP32[$443 >> 2] = $68; //@line 19429
  $444 = $ReallocAsyncCtx3 + 140 | 0; //@line 19430
  HEAP32[$444 >> 2] = $70; //@line 19431
  $445 = $ReallocAsyncCtx3 + 144 | 0; //@line 19432
  HEAP32[$445 >> 2] = $72; //@line 19433
  $446 = $ReallocAsyncCtx3 + 148 | 0; //@line 19434
  HEAP32[$446 >> 2] = $74; //@line 19435
  $447 = $ReallocAsyncCtx3 + 152 | 0; //@line 19436
  HEAP32[$447 >> 2] = $76; //@line 19437
  $448 = $ReallocAsyncCtx3 + 156 | 0; //@line 19438
  HEAP32[$448 >> 2] = $78; //@line 19439
  $449 = $ReallocAsyncCtx3 + 160 | 0; //@line 19440
  HEAP32[$449 >> 2] = $80; //@line 19441
  $450 = $ReallocAsyncCtx3 + 164 | 0; //@line 19442
  HEAP32[$450 >> 2] = $82; //@line 19443
  $451 = $ReallocAsyncCtx3 + 168 | 0; //@line 19444
  HEAP32[$451 >> 2] = $84; //@line 19445
  $452 = $ReallocAsyncCtx3 + 172 | 0; //@line 19446
  HEAP32[$452 >> 2] = $86; //@line 19447
  $453 = $ReallocAsyncCtx3 + 176 | 0; //@line 19448
  HEAP32[$453 >> 2] = $88; //@line 19449
  $454 = $ReallocAsyncCtx3 + 180 | 0; //@line 19450
  HEAP32[$454 >> 2] = $90; //@line 19451
  $455 = $ReallocAsyncCtx3 + 184 | 0; //@line 19452
  HEAP32[$455 >> 2] = $92; //@line 19453
  $456 = $ReallocAsyncCtx3 + 188 | 0; //@line 19454
  HEAP32[$456 >> 2] = $94; //@line 19455
  $457 = $ReallocAsyncCtx3 + 192 | 0; //@line 19456
  HEAP32[$457 >> 2] = $96; //@line 19457
  $458 = $ReallocAsyncCtx3 + 196 | 0; //@line 19458
  HEAP32[$458 >> 2] = $98; //@line 19459
  $459 = $ReallocAsyncCtx3 + 200 | 0; //@line 19460
  HEAP32[$459 >> 2] = $100; //@line 19461
  $460 = $ReallocAsyncCtx3 + 204 | 0; //@line 19462
  HEAP32[$460 >> 2] = $102; //@line 19463
  $461 = $ReallocAsyncCtx3 + 208 | 0; //@line 19464
  HEAP32[$461 >> 2] = $104; //@line 19465
  $462 = $ReallocAsyncCtx3 + 212 | 0; //@line 19466
  HEAP8[$462 >> 0] = $106; //@line 19467
  $463 = $ReallocAsyncCtx3 + 213 | 0; //@line 19468
  HEAP8[$463 >> 0] = $108; //@line 19469
  $464 = $ReallocAsyncCtx3 + 216 | 0; //@line 19470
  HEAP32[$464 >> 2] = $110; //@line 19471
  $465 = $ReallocAsyncCtx3 + 220 | 0; //@line 19472
  HEAP32[$465 >> 2] = $112; //@line 19473
  $466 = $ReallocAsyncCtx3 + 224 | 0; //@line 19474
  HEAP8[$466 >> 0] = $114; //@line 19475
  $467 = $ReallocAsyncCtx3 + 228 | 0; //@line 19476
  HEAP32[$467 >> 2] = $116; //@line 19477
  $468 = $ReallocAsyncCtx3 + 232 | 0; //@line 19478
  HEAP32[$468 >> 2] = $118; //@line 19479
  $469 = $ReallocAsyncCtx3 + 236 | 0; //@line 19480
  HEAP32[$469 >> 2] = $120; //@line 19481
  $470 = $ReallocAsyncCtx3 + 240 | 0; //@line 19482
  HEAP32[$470 >> 2] = $122; //@line 19483
  $471 = $ReallocAsyncCtx3 + 244 | 0; //@line 19484
  HEAP32[$471 >> 2] = $124; //@line 19485
  $472 = $ReallocAsyncCtx3 + 248 | 0; //@line 19486
  HEAP32[$472 >> 2] = $126; //@line 19487
  $473 = $ReallocAsyncCtx3 + 252 | 0; //@line 19488
  HEAP32[$473 >> 2] = $128; //@line 19489
  $474 = $ReallocAsyncCtx3 + 256 | 0; //@line 19490
  HEAP32[$474 >> 2] = $130; //@line 19491
  $475 = $ReallocAsyncCtx3 + 260 | 0; //@line 19492
  HEAP32[$475 >> 2] = $132; //@line 19493
  $476 = $ReallocAsyncCtx3 + 264 | 0; //@line 19494
  HEAP32[$476 >> 2] = $134; //@line 19495
  sp = STACKTOP; //@line 19496
  return;
 } else if ((label | 0) == 24) {
  $495 = $$0$be + 2 << 24 >> 24; //@line 19500
  $498 = HEAP8[$118 + ($137 & 255) >> 0] | 0; //@line 19503
  HEAP8[$34 >> 0] = 0; //@line 19504
  $499 = $498 & 255; //@line 19505
  HEAP8[$40 >> 0] = $499 >>> 5 & 1; //@line 19509
  if ($499 & 16 | 0) {
   HEAP8[$34 >> 0] = 1; //@line 19513
  }
  HEAP8[$22 >> 0] = $499 & 15; //@line 19517
  $508 = HEAP32[(HEAP32[$32 >> 2] | 0) + 44 >> 2] | 0; //@line 19520
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(272) | 0; //@line 19521
  $509 = FUNCTION_TABLE_iii[$508 & 31]($98, $68) | 0; //@line 19522
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 507; //@line 19525
   $510 = $ReallocAsyncCtx4 + 4 | 0; //@line 19526
   HEAP32[$510 >> 2] = $2; //@line 19527
   $511 = $ReallocAsyncCtx4 + 8 | 0; //@line 19528
   HEAP32[$511 >> 2] = $4; //@line 19529
   $512 = $ReallocAsyncCtx4 + 12 | 0; //@line 19530
   HEAP32[$512 >> 2] = $6; //@line 19531
   $513 = $ReallocAsyncCtx4 + 16 | 0; //@line 19532
   HEAP32[$513 >> 2] = $8; //@line 19533
   $514 = $ReallocAsyncCtx4 + 20 | 0; //@line 19534
   HEAP32[$514 >> 2] = $10; //@line 19535
   $515 = $ReallocAsyncCtx4 + 24 | 0; //@line 19536
   HEAP32[$515 >> 2] = $12; //@line 19537
   $516 = $ReallocAsyncCtx4 + 28 | 0; //@line 19538
   HEAP32[$516 >> 2] = $14; //@line 19539
   $517 = $ReallocAsyncCtx4 + 32 | 0; //@line 19540
   HEAP32[$517 >> 2] = $16; //@line 19541
   $518 = $ReallocAsyncCtx4 + 36 | 0; //@line 19542
   HEAP32[$518 >> 2] = $18; //@line 19543
   $519 = $ReallocAsyncCtx4 + 40 | 0; //@line 19544
   HEAP32[$519 >> 2] = $20; //@line 19545
   $520 = $ReallocAsyncCtx4 + 44 | 0; //@line 19546
   HEAP32[$520 >> 2] = $22; //@line 19547
   $521 = $ReallocAsyncCtx4 + 48 | 0; //@line 19548
   HEAP32[$521 >> 2] = $26; //@line 19549
   $522 = $ReallocAsyncCtx4 + 52 | 0; //@line 19550
   HEAP8[$522 >> 0] = $495; //@line 19551
   $523 = $ReallocAsyncCtx4 + 56 | 0; //@line 19552
   HEAP32[$523 >> 2] = $28; //@line 19553
   $524 = $ReallocAsyncCtx4 + 60 | 0; //@line 19554
   HEAP32[$524 >> 2] = $30; //@line 19555
   $525 = $ReallocAsyncCtx4 + 64 | 0; //@line 19556
   HEAP32[$525 >> 2] = $32; //@line 19557
   $526 = $ReallocAsyncCtx4 + 68 | 0; //@line 19558
   HEAP32[$526 >> 2] = $34; //@line 19559
   $527 = $ReallocAsyncCtx4 + 72 | 0; //@line 19560
   HEAP32[$527 >> 2] = $36; //@line 19561
   $528 = $ReallocAsyncCtx4 + 76 | 0; //@line 19562
   HEAP32[$528 >> 2] = $38; //@line 19563
   $529 = $ReallocAsyncCtx4 + 80 | 0; //@line 19564
   HEAP32[$529 >> 2] = $40; //@line 19565
   $530 = $ReallocAsyncCtx4 + 84 | 0; //@line 19566
   HEAP32[$530 >> 2] = $42; //@line 19567
   $531 = $ReallocAsyncCtx4 + 88 | 0; //@line 19568
   HEAP32[$531 >> 2] = $44; //@line 19569
   $532 = $ReallocAsyncCtx4 + 92 | 0; //@line 19570
   HEAP32[$532 >> 2] = $46; //@line 19571
   $533 = $ReallocAsyncCtx4 + 96 | 0; //@line 19572
   HEAP32[$533 >> 2] = $48; //@line 19573
   $534 = $ReallocAsyncCtx4 + 100 | 0; //@line 19574
   HEAP32[$534 >> 2] = $50; //@line 19575
   $535 = $ReallocAsyncCtx4 + 104 | 0; //@line 19576
   HEAP32[$535 >> 2] = $52; //@line 19577
   $536 = $ReallocAsyncCtx4 + 108 | 0; //@line 19578
   HEAP32[$536 >> 2] = $54; //@line 19579
   $537 = $ReallocAsyncCtx4 + 112 | 0; //@line 19580
   HEAP32[$537 >> 2] = $56; //@line 19581
   $538 = $ReallocAsyncCtx4 + 116 | 0; //@line 19582
   HEAP32[$538 >> 2] = $58; //@line 19583
   $539 = $ReallocAsyncCtx4 + 120 | 0; //@line 19584
   HEAP32[$539 >> 2] = $60; //@line 19585
   $540 = $ReallocAsyncCtx4 + 124 | 0; //@line 19586
   HEAP32[$540 >> 2] = $62; //@line 19587
   $541 = $ReallocAsyncCtx4 + 128 | 0; //@line 19588
   HEAP32[$541 >> 2] = $64; //@line 19589
   $542 = $ReallocAsyncCtx4 + 132 | 0; //@line 19590
   HEAP32[$542 >> 2] = $66; //@line 19591
   $543 = $ReallocAsyncCtx4 + 136 | 0; //@line 19592
   HEAP32[$543 >> 2] = $68; //@line 19593
   $544 = $ReallocAsyncCtx4 + 140 | 0; //@line 19594
   HEAP32[$544 >> 2] = $70; //@line 19595
   $545 = $ReallocAsyncCtx4 + 144 | 0; //@line 19596
   HEAP32[$545 >> 2] = $72; //@line 19597
   $546 = $ReallocAsyncCtx4 + 148 | 0; //@line 19598
   HEAP32[$546 >> 2] = $74; //@line 19599
   $547 = $ReallocAsyncCtx4 + 152 | 0; //@line 19600
   HEAP32[$547 >> 2] = $76; //@line 19601
   $548 = $ReallocAsyncCtx4 + 156 | 0; //@line 19602
   HEAP32[$548 >> 2] = $$096$be; //@line 19603
   $549 = $ReallocAsyncCtx4 + 160 | 0; //@line 19604
   HEAP32[$549 >> 2] = $78; //@line 19605
   $550 = $ReallocAsyncCtx4 + 164 | 0; //@line 19606
   HEAP32[$550 >> 2] = $80; //@line 19607
   $551 = $ReallocAsyncCtx4 + 168 | 0; //@line 19608
   HEAP32[$551 >> 2] = $82; //@line 19609
   $552 = $ReallocAsyncCtx4 + 172 | 0; //@line 19610
   HEAP32[$552 >> 2] = $84; //@line 19611
   $553 = $ReallocAsyncCtx4 + 176 | 0; //@line 19612
   HEAP32[$553 >> 2] = $86; //@line 19613
   $554 = $ReallocAsyncCtx4 + 180 | 0; //@line 19614
   HEAP32[$554 >> 2] = $88; //@line 19615
   $555 = $ReallocAsyncCtx4 + 184 | 0; //@line 19616
   HEAP32[$555 >> 2] = $90; //@line 19617
   $556 = $ReallocAsyncCtx4 + 188 | 0; //@line 19618
   HEAP32[$556 >> 2] = $92; //@line 19619
   $557 = $ReallocAsyncCtx4 + 192 | 0; //@line 19620
   HEAP32[$557 >> 2] = $94; //@line 19621
   $558 = $ReallocAsyncCtx4 + 196 | 0; //@line 19622
   HEAP32[$558 >> 2] = $96; //@line 19623
   $559 = $ReallocAsyncCtx4 + 200 | 0; //@line 19624
   HEAP32[$559 >> 2] = $98; //@line 19625
   $560 = $ReallocAsyncCtx4 + 204 | 0; //@line 19626
   HEAP32[$560 >> 2] = $100; //@line 19627
   $561 = $ReallocAsyncCtx4 + 208 | 0; //@line 19628
   HEAP32[$561 >> 2] = $102; //@line 19629
   $562 = $ReallocAsyncCtx4 + 212 | 0; //@line 19630
   HEAP32[$562 >> 2] = $104; //@line 19631
   $563 = $ReallocAsyncCtx4 + 216 | 0; //@line 19632
   HEAP8[$563 >> 0] = $106; //@line 19633
   $564 = $ReallocAsyncCtx4 + 217 | 0; //@line 19634
   HEAP8[$564 >> 0] = $108; //@line 19635
   $565 = $ReallocAsyncCtx4 + 220 | 0; //@line 19636
   HEAP32[$565 >> 2] = $110; //@line 19637
   $566 = $ReallocAsyncCtx4 + 224 | 0; //@line 19638
   HEAP32[$566 >> 2] = $112; //@line 19639
   $567 = $ReallocAsyncCtx4 + 228 | 0; //@line 19640
   HEAP8[$567 >> 0] = $114; //@line 19641
   $568 = $ReallocAsyncCtx4 + 232 | 0; //@line 19642
   HEAP32[$568 >> 2] = $116; //@line 19643
   $569 = $ReallocAsyncCtx4 + 236 | 0; //@line 19644
   HEAP32[$569 >> 2] = $118; //@line 19645
   $570 = $ReallocAsyncCtx4 + 240 | 0; //@line 19646
   HEAP32[$570 >> 2] = $120; //@line 19647
   $571 = $ReallocAsyncCtx4 + 244 | 0; //@line 19648
   HEAP32[$571 >> 2] = $122; //@line 19649
   $572 = $ReallocAsyncCtx4 + 248 | 0; //@line 19650
   HEAP32[$572 >> 2] = $124; //@line 19651
   $573 = $ReallocAsyncCtx4 + 252 | 0; //@line 19652
   HEAP32[$573 >> 2] = $126; //@line 19653
   $574 = $ReallocAsyncCtx4 + 256 | 0; //@line 19654
   HEAP32[$574 >> 2] = $128; //@line 19655
   $575 = $ReallocAsyncCtx4 + 260 | 0; //@line 19656
   HEAP32[$575 >> 2] = $130; //@line 19657
   $576 = $ReallocAsyncCtx4 + 264 | 0; //@line 19658
   HEAP32[$576 >> 2] = $132; //@line 19659
   $577 = $ReallocAsyncCtx4 + 268 | 0; //@line 19660
   HEAP32[$577 >> 2] = $134; //@line 19661
   sp = STACKTOP; //@line 19662
   return;
  }
  HEAP8[___async_retval >> 0] = $509 & 1; //@line 19667
  ___async_unwind = 0; //@line 19668
  HEAP32[$ReallocAsyncCtx4 >> 2] = 507; //@line 19669
  $510 = $ReallocAsyncCtx4 + 4 | 0; //@line 19670
  HEAP32[$510 >> 2] = $2; //@line 19671
  $511 = $ReallocAsyncCtx4 + 8 | 0; //@line 19672
  HEAP32[$511 >> 2] = $4; //@line 19673
  $512 = $ReallocAsyncCtx4 + 12 | 0; //@line 19674
  HEAP32[$512 >> 2] = $6; //@line 19675
  $513 = $ReallocAsyncCtx4 + 16 | 0; //@line 19676
  HEAP32[$513 >> 2] = $8; //@line 19677
  $514 = $ReallocAsyncCtx4 + 20 | 0; //@line 19678
  HEAP32[$514 >> 2] = $10; //@line 19679
  $515 = $ReallocAsyncCtx4 + 24 | 0; //@line 19680
  HEAP32[$515 >> 2] = $12; //@line 19681
  $516 = $ReallocAsyncCtx4 + 28 | 0; //@line 19682
  HEAP32[$516 >> 2] = $14; //@line 19683
  $517 = $ReallocAsyncCtx4 + 32 | 0; //@line 19684
  HEAP32[$517 >> 2] = $16; //@line 19685
  $518 = $ReallocAsyncCtx4 + 36 | 0; //@line 19686
  HEAP32[$518 >> 2] = $18; //@line 19687
  $519 = $ReallocAsyncCtx4 + 40 | 0; //@line 19688
  HEAP32[$519 >> 2] = $20; //@line 19689
  $520 = $ReallocAsyncCtx4 + 44 | 0; //@line 19690
  HEAP32[$520 >> 2] = $22; //@line 19691
  $521 = $ReallocAsyncCtx4 + 48 | 0; //@line 19692
  HEAP32[$521 >> 2] = $26; //@line 19693
  $522 = $ReallocAsyncCtx4 + 52 | 0; //@line 19694
  HEAP8[$522 >> 0] = $495; //@line 19695
  $523 = $ReallocAsyncCtx4 + 56 | 0; //@line 19696
  HEAP32[$523 >> 2] = $28; //@line 19697
  $524 = $ReallocAsyncCtx4 + 60 | 0; //@line 19698
  HEAP32[$524 >> 2] = $30; //@line 19699
  $525 = $ReallocAsyncCtx4 + 64 | 0; //@line 19700
  HEAP32[$525 >> 2] = $32; //@line 19701
  $526 = $ReallocAsyncCtx4 + 68 | 0; //@line 19702
  HEAP32[$526 >> 2] = $34; //@line 19703
  $527 = $ReallocAsyncCtx4 + 72 | 0; //@line 19704
  HEAP32[$527 >> 2] = $36; //@line 19705
  $528 = $ReallocAsyncCtx4 + 76 | 0; //@line 19706
  HEAP32[$528 >> 2] = $38; //@line 19707
  $529 = $ReallocAsyncCtx4 + 80 | 0; //@line 19708
  HEAP32[$529 >> 2] = $40; //@line 19709
  $530 = $ReallocAsyncCtx4 + 84 | 0; //@line 19710
  HEAP32[$530 >> 2] = $42; //@line 19711
  $531 = $ReallocAsyncCtx4 + 88 | 0; //@line 19712
  HEAP32[$531 >> 2] = $44; //@line 19713
  $532 = $ReallocAsyncCtx4 + 92 | 0; //@line 19714
  HEAP32[$532 >> 2] = $46; //@line 19715
  $533 = $ReallocAsyncCtx4 + 96 | 0; //@line 19716
  HEAP32[$533 >> 2] = $48; //@line 19717
  $534 = $ReallocAsyncCtx4 + 100 | 0; //@line 19718
  HEAP32[$534 >> 2] = $50; //@line 19719
  $535 = $ReallocAsyncCtx4 + 104 | 0; //@line 19720
  HEAP32[$535 >> 2] = $52; //@line 19721
  $536 = $ReallocAsyncCtx4 + 108 | 0; //@line 19722
  HEAP32[$536 >> 2] = $54; //@line 19723
  $537 = $ReallocAsyncCtx4 + 112 | 0; //@line 19724
  HEAP32[$537 >> 2] = $56; //@line 19725
  $538 = $ReallocAsyncCtx4 + 116 | 0; //@line 19726
  HEAP32[$538 >> 2] = $58; //@line 19727
  $539 = $ReallocAsyncCtx4 + 120 | 0; //@line 19728
  HEAP32[$539 >> 2] = $60; //@line 19729
  $540 = $ReallocAsyncCtx4 + 124 | 0; //@line 19730
  HEAP32[$540 >> 2] = $62; //@line 19731
  $541 = $ReallocAsyncCtx4 + 128 | 0; //@line 19732
  HEAP32[$541 >> 2] = $64; //@line 19733
  $542 = $ReallocAsyncCtx4 + 132 | 0; //@line 19734
  HEAP32[$542 >> 2] = $66; //@line 19735
  $543 = $ReallocAsyncCtx4 + 136 | 0; //@line 19736
  HEAP32[$543 >> 2] = $68; //@line 19737
  $544 = $ReallocAsyncCtx4 + 140 | 0; //@line 19738
  HEAP32[$544 >> 2] = $70; //@line 19739
  $545 = $ReallocAsyncCtx4 + 144 | 0; //@line 19740
  HEAP32[$545 >> 2] = $72; //@line 19741
  $546 = $ReallocAsyncCtx4 + 148 | 0; //@line 19742
  HEAP32[$546 >> 2] = $74; //@line 19743
  $547 = $ReallocAsyncCtx4 + 152 | 0; //@line 19744
  HEAP32[$547 >> 2] = $76; //@line 19745
  $548 = $ReallocAsyncCtx4 + 156 | 0; //@line 19746
  HEAP32[$548 >> 2] = $$096$be; //@line 19747
  $549 = $ReallocAsyncCtx4 + 160 | 0; //@line 19748
  HEAP32[$549 >> 2] = $78; //@line 19749
  $550 = $ReallocAsyncCtx4 + 164 | 0; //@line 19750
  HEAP32[$550 >> 2] = $80; //@line 19751
  $551 = $ReallocAsyncCtx4 + 168 | 0; //@line 19752
  HEAP32[$551 >> 2] = $82; //@line 19753
  $552 = $ReallocAsyncCtx4 + 172 | 0; //@line 19754
  HEAP32[$552 >> 2] = $84; //@line 19755
  $553 = $ReallocAsyncCtx4 + 176 | 0; //@line 19756
  HEAP32[$553 >> 2] = $86; //@line 19757
  $554 = $ReallocAsyncCtx4 + 180 | 0; //@line 19758
  HEAP32[$554 >> 2] = $88; //@line 19759
  $555 = $ReallocAsyncCtx4 + 184 | 0; //@line 19760
  HEAP32[$555 >> 2] = $90; //@line 19761
  $556 = $ReallocAsyncCtx4 + 188 | 0; //@line 19762
  HEAP32[$556 >> 2] = $92; //@line 19763
  $557 = $ReallocAsyncCtx4 + 192 | 0; //@line 19764
  HEAP32[$557 >> 2] = $94; //@line 19765
  $558 = $ReallocAsyncCtx4 + 196 | 0; //@line 19766
  HEAP32[$558 >> 2] = $96; //@line 19767
  $559 = $ReallocAsyncCtx4 + 200 | 0; //@line 19768
  HEAP32[$559 >> 2] = $98; //@line 19769
  $560 = $ReallocAsyncCtx4 + 204 | 0; //@line 19770
  HEAP32[$560 >> 2] = $100; //@line 19771
  $561 = $ReallocAsyncCtx4 + 208 | 0; //@line 19772
  HEAP32[$561 >> 2] = $102; //@line 19773
  $562 = $ReallocAsyncCtx4 + 212 | 0; //@line 19774
  HEAP32[$562 >> 2] = $104; //@line 19775
  $563 = $ReallocAsyncCtx4 + 216 | 0; //@line 19776
  HEAP8[$563 >> 0] = $106; //@line 19777
  $564 = $ReallocAsyncCtx4 + 217 | 0; //@line 19778
  HEAP8[$564 >> 0] = $108; //@line 19779
  $565 = $ReallocAsyncCtx4 + 220 | 0; //@line 19780
  HEAP32[$565 >> 2] = $110; //@line 19781
  $566 = $ReallocAsyncCtx4 + 224 | 0; //@line 19782
  HEAP32[$566 >> 2] = $112; //@line 19783
  $567 = $ReallocAsyncCtx4 + 228 | 0; //@line 19784
  HEAP8[$567 >> 0] = $114; //@line 19785
  $568 = $ReallocAsyncCtx4 + 232 | 0; //@line 19786
  HEAP32[$568 >> 2] = $116; //@line 19787
  $569 = $ReallocAsyncCtx4 + 236 | 0; //@line 19788
  HEAP32[$569 >> 2] = $118; //@line 19789
  $570 = $ReallocAsyncCtx4 + 240 | 0; //@line 19790
  HEAP32[$570 >> 2] = $120; //@line 19791
  $571 = $ReallocAsyncCtx4 + 244 | 0; //@line 19792
  HEAP32[$571 >> 2] = $122; //@line 19793
  $572 = $ReallocAsyncCtx4 + 248 | 0; //@line 19794
  HEAP32[$572 >> 2] = $124; //@line 19795
  $573 = $ReallocAsyncCtx4 + 252 | 0; //@line 19796
  HEAP32[$573 >> 2] = $126; //@line 19797
  $574 = $ReallocAsyncCtx4 + 256 | 0; //@line 19798
  HEAP32[$574 >> 2] = $128; //@line 19799
  $575 = $ReallocAsyncCtx4 + 260 | 0; //@line 19800
  HEAP32[$575 >> 2] = $130; //@line 19801
  $576 = $ReallocAsyncCtx4 + 264 | 0; //@line 19802
  HEAP32[$576 >> 2] = $132; //@line 19803
  $577 = $ReallocAsyncCtx4 + 268 | 0; //@line 19804
  HEAP32[$577 >> 2] = $134; //@line 19805
  sp = STACKTOP; //@line 19806
  return;
 } else if ((label | 0) == 29) {
  HEAP8[$132 >> 0] = HEAP8[$118 + ($137 & 255) >> 0] | 0; //@line 19814
  $595 = $$0$be + 5 << 24 >> 24; //@line 19827
  HEAP32[$130 >> 2] = (HEAPU8[$118 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$118 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$118 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 19835
  $605 = HEAP32[(HEAP32[$104 >> 2] | 0) + 48 >> 2] | 0; //@line 19838
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(268) | 0; //@line 19839
  $606 = FUNCTION_TABLE_iii[$605 & 31]($98, $60) | 0; //@line 19840
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 508; //@line 19843
   $607 = $ReallocAsyncCtx5 + 4 | 0; //@line 19844
   HEAP32[$607 >> 2] = $2; //@line 19845
   $608 = $ReallocAsyncCtx5 + 8 | 0; //@line 19846
   HEAP32[$608 >> 2] = $4; //@line 19847
   $609 = $ReallocAsyncCtx5 + 12 | 0; //@line 19848
   HEAP32[$609 >> 2] = $6; //@line 19849
   $610 = $ReallocAsyncCtx5 + 16 | 0; //@line 19850
   HEAP32[$610 >> 2] = $8; //@line 19851
   $611 = $ReallocAsyncCtx5 + 20 | 0; //@line 19852
   HEAP32[$611 >> 2] = $10; //@line 19853
   $612 = $ReallocAsyncCtx5 + 24 | 0; //@line 19854
   HEAP32[$612 >> 2] = $12; //@line 19855
   $613 = $ReallocAsyncCtx5 + 28 | 0; //@line 19856
   HEAP32[$613 >> 2] = $14; //@line 19857
   $614 = $ReallocAsyncCtx5 + 32 | 0; //@line 19858
   HEAP32[$614 >> 2] = $16; //@line 19859
   $615 = $ReallocAsyncCtx5 + 36 | 0; //@line 19860
   HEAP32[$615 >> 2] = $18; //@line 19861
   $616 = $ReallocAsyncCtx5 + 40 | 0; //@line 19862
   HEAP32[$616 >> 2] = $20; //@line 19863
   $617 = $ReallocAsyncCtx5 + 44 | 0; //@line 19864
   HEAP32[$617 >> 2] = $22; //@line 19865
   $618 = $ReallocAsyncCtx5 + 48 | 0; //@line 19866
   HEAP32[$618 >> 2] = $26; //@line 19867
   $619 = $ReallocAsyncCtx5 + 52 | 0; //@line 19868
   HEAP32[$619 >> 2] = $28; //@line 19869
   $620 = $ReallocAsyncCtx5 + 56 | 0; //@line 19870
   HEAP32[$620 >> 2] = $30; //@line 19871
   $621 = $ReallocAsyncCtx5 + 60 | 0; //@line 19872
   HEAP32[$621 >> 2] = $32; //@line 19873
   $622 = $ReallocAsyncCtx5 + 64 | 0; //@line 19874
   HEAP32[$622 >> 2] = $34; //@line 19875
   $623 = $ReallocAsyncCtx5 + 68 | 0; //@line 19876
   HEAP32[$623 >> 2] = $36; //@line 19877
   $624 = $ReallocAsyncCtx5 + 72 | 0; //@line 19878
   HEAP32[$624 >> 2] = $38; //@line 19879
   $625 = $ReallocAsyncCtx5 + 76 | 0; //@line 19880
   HEAP32[$625 >> 2] = $40; //@line 19881
   $626 = $ReallocAsyncCtx5 + 80 | 0; //@line 19882
   HEAP32[$626 >> 2] = $42; //@line 19883
   $627 = $ReallocAsyncCtx5 + 84 | 0; //@line 19884
   HEAP32[$627 >> 2] = $44; //@line 19885
   $628 = $ReallocAsyncCtx5 + 88 | 0; //@line 19886
   HEAP32[$628 >> 2] = $46; //@line 19887
   $629 = $ReallocAsyncCtx5 + 92 | 0; //@line 19888
   HEAP32[$629 >> 2] = $48; //@line 19889
   $630 = $ReallocAsyncCtx5 + 96 | 0; //@line 19890
   HEAP32[$630 >> 2] = $50; //@line 19891
   $631 = $ReallocAsyncCtx5 + 100 | 0; //@line 19892
   HEAP32[$631 >> 2] = $52; //@line 19893
   $632 = $ReallocAsyncCtx5 + 104 | 0; //@line 19894
   HEAP32[$632 >> 2] = $54; //@line 19895
   $633 = $ReallocAsyncCtx5 + 108 | 0; //@line 19896
   HEAP32[$633 >> 2] = $56; //@line 19897
   $634 = $ReallocAsyncCtx5 + 112 | 0; //@line 19898
   HEAP32[$634 >> 2] = $58; //@line 19899
   $635 = $ReallocAsyncCtx5 + 116 | 0; //@line 19900
   HEAP32[$635 >> 2] = $60; //@line 19901
   $636 = $ReallocAsyncCtx5 + 120 | 0; //@line 19902
   HEAP32[$636 >> 2] = $62; //@line 19903
   $637 = $ReallocAsyncCtx5 + 124 | 0; //@line 19904
   HEAP32[$637 >> 2] = $64; //@line 19905
   $638 = $ReallocAsyncCtx5 + 128 | 0; //@line 19906
   HEAP8[$638 >> 0] = $595; //@line 19907
   $639 = $ReallocAsyncCtx5 + 132 | 0; //@line 19908
   HEAP32[$639 >> 2] = $66; //@line 19909
   $640 = $ReallocAsyncCtx5 + 136 | 0; //@line 19910
   HEAP32[$640 >> 2] = $68; //@line 19911
   $641 = $ReallocAsyncCtx5 + 140 | 0; //@line 19912
   HEAP32[$641 >> 2] = $70; //@line 19913
   $642 = $ReallocAsyncCtx5 + 144 | 0; //@line 19914
   HEAP32[$642 >> 2] = $72; //@line 19915
   $643 = $ReallocAsyncCtx5 + 148 | 0; //@line 19916
   HEAP32[$643 >> 2] = $74; //@line 19917
   $644 = $ReallocAsyncCtx5 + 152 | 0; //@line 19918
   HEAP32[$644 >> 2] = $76; //@line 19919
   $645 = $ReallocAsyncCtx5 + 156 | 0; //@line 19920
   HEAP32[$645 >> 2] = $78; //@line 19921
   $646 = $ReallocAsyncCtx5 + 160 | 0; //@line 19922
   HEAP32[$646 >> 2] = $80; //@line 19923
   $647 = $ReallocAsyncCtx5 + 164 | 0; //@line 19924
   HEAP32[$647 >> 2] = $82; //@line 19925
   $648 = $ReallocAsyncCtx5 + 168 | 0; //@line 19926
   HEAP32[$648 >> 2] = $84; //@line 19927
   $649 = $ReallocAsyncCtx5 + 172 | 0; //@line 19928
   HEAP32[$649 >> 2] = $86; //@line 19929
   $650 = $ReallocAsyncCtx5 + 176 | 0; //@line 19930
   HEAP32[$650 >> 2] = $88; //@line 19931
   $651 = $ReallocAsyncCtx5 + 180 | 0; //@line 19932
   HEAP32[$651 >> 2] = $90; //@line 19933
   $652 = $ReallocAsyncCtx5 + 184 | 0; //@line 19934
   HEAP32[$652 >> 2] = $92; //@line 19935
   $653 = $ReallocAsyncCtx5 + 188 | 0; //@line 19936
   HEAP32[$653 >> 2] = $94; //@line 19937
   $654 = $ReallocAsyncCtx5 + 192 | 0; //@line 19938
   HEAP32[$654 >> 2] = $96; //@line 19939
   $655 = $ReallocAsyncCtx5 + 196 | 0; //@line 19940
   HEAP32[$655 >> 2] = $98; //@line 19941
   $656 = $ReallocAsyncCtx5 + 200 | 0; //@line 19942
   HEAP32[$656 >> 2] = $100; //@line 19943
   $657 = $ReallocAsyncCtx5 + 204 | 0; //@line 19944
   HEAP32[$657 >> 2] = $102; //@line 19945
   $658 = $ReallocAsyncCtx5 + 208 | 0; //@line 19946
   HEAP32[$658 >> 2] = $104; //@line 19947
   $659 = $ReallocAsyncCtx5 + 212 | 0; //@line 19948
   HEAP8[$659 >> 0] = $106; //@line 19949
   $660 = $ReallocAsyncCtx5 + 213 | 0; //@line 19950
   HEAP8[$660 >> 0] = $108; //@line 19951
   $661 = $ReallocAsyncCtx5 + 216 | 0; //@line 19952
   HEAP32[$661 >> 2] = $110; //@line 19953
   $662 = $ReallocAsyncCtx5 + 220 | 0; //@line 19954
   HEAP32[$662 >> 2] = $112; //@line 19955
   $663 = $ReallocAsyncCtx5 + 224 | 0; //@line 19956
   HEAP8[$663 >> 0] = $114; //@line 19957
   $664 = $ReallocAsyncCtx5 + 228 | 0; //@line 19958
   HEAP32[$664 >> 2] = $116; //@line 19959
   $665 = $ReallocAsyncCtx5 + 232 | 0; //@line 19960
   HEAP32[$665 >> 2] = $118; //@line 19961
   $666 = $ReallocAsyncCtx5 + 236 | 0; //@line 19962
   HEAP32[$666 >> 2] = $120; //@line 19963
   $667 = $ReallocAsyncCtx5 + 240 | 0; //@line 19964
   HEAP32[$667 >> 2] = $122; //@line 19965
   $668 = $ReallocAsyncCtx5 + 244 | 0; //@line 19966
   HEAP32[$668 >> 2] = $124; //@line 19967
   $669 = $ReallocAsyncCtx5 + 248 | 0; //@line 19968
   HEAP32[$669 >> 2] = $126; //@line 19969
   $670 = $ReallocAsyncCtx5 + 252 | 0; //@line 19970
   HEAP32[$670 >> 2] = $128; //@line 19971
   $671 = $ReallocAsyncCtx5 + 256 | 0; //@line 19972
   HEAP32[$671 >> 2] = $130; //@line 19973
   $672 = $ReallocAsyncCtx5 + 260 | 0; //@line 19974
   HEAP32[$672 >> 2] = $132; //@line 19975
   $673 = $ReallocAsyncCtx5 + 264 | 0; //@line 19976
   HEAP32[$673 >> 2] = $134; //@line 19977
   sp = STACKTOP; //@line 19978
   return;
  }
  HEAP8[___async_retval >> 0] = $606; //@line 19982
  ___async_unwind = 0; //@line 19983
  HEAP32[$ReallocAsyncCtx5 >> 2] = 508; //@line 19984
  $607 = $ReallocAsyncCtx5 + 4 | 0; //@line 19985
  HEAP32[$607 >> 2] = $2; //@line 19986
  $608 = $ReallocAsyncCtx5 + 8 | 0; //@line 19987
  HEAP32[$608 >> 2] = $4; //@line 19988
  $609 = $ReallocAsyncCtx5 + 12 | 0; //@line 19989
  HEAP32[$609 >> 2] = $6; //@line 19990
  $610 = $ReallocAsyncCtx5 + 16 | 0; //@line 19991
  HEAP32[$610 >> 2] = $8; //@line 19992
  $611 = $ReallocAsyncCtx5 + 20 | 0; //@line 19993
  HEAP32[$611 >> 2] = $10; //@line 19994
  $612 = $ReallocAsyncCtx5 + 24 | 0; //@line 19995
  HEAP32[$612 >> 2] = $12; //@line 19996
  $613 = $ReallocAsyncCtx5 + 28 | 0; //@line 19997
  HEAP32[$613 >> 2] = $14; //@line 19998
  $614 = $ReallocAsyncCtx5 + 32 | 0; //@line 19999
  HEAP32[$614 >> 2] = $16; //@line 20000
  $615 = $ReallocAsyncCtx5 + 36 | 0; //@line 20001
  HEAP32[$615 >> 2] = $18; //@line 20002
  $616 = $ReallocAsyncCtx5 + 40 | 0; //@line 20003
  HEAP32[$616 >> 2] = $20; //@line 20004
  $617 = $ReallocAsyncCtx5 + 44 | 0; //@line 20005
  HEAP32[$617 >> 2] = $22; //@line 20006
  $618 = $ReallocAsyncCtx5 + 48 | 0; //@line 20007
  HEAP32[$618 >> 2] = $26; //@line 20008
  $619 = $ReallocAsyncCtx5 + 52 | 0; //@line 20009
  HEAP32[$619 >> 2] = $28; //@line 20010
  $620 = $ReallocAsyncCtx5 + 56 | 0; //@line 20011
  HEAP32[$620 >> 2] = $30; //@line 20012
  $621 = $ReallocAsyncCtx5 + 60 | 0; //@line 20013
  HEAP32[$621 >> 2] = $32; //@line 20014
  $622 = $ReallocAsyncCtx5 + 64 | 0; //@line 20015
  HEAP32[$622 >> 2] = $34; //@line 20016
  $623 = $ReallocAsyncCtx5 + 68 | 0; //@line 20017
  HEAP32[$623 >> 2] = $36; //@line 20018
  $624 = $ReallocAsyncCtx5 + 72 | 0; //@line 20019
  HEAP32[$624 >> 2] = $38; //@line 20020
  $625 = $ReallocAsyncCtx5 + 76 | 0; //@line 20021
  HEAP32[$625 >> 2] = $40; //@line 20022
  $626 = $ReallocAsyncCtx5 + 80 | 0; //@line 20023
  HEAP32[$626 >> 2] = $42; //@line 20024
  $627 = $ReallocAsyncCtx5 + 84 | 0; //@line 20025
  HEAP32[$627 >> 2] = $44; //@line 20026
  $628 = $ReallocAsyncCtx5 + 88 | 0; //@line 20027
  HEAP32[$628 >> 2] = $46; //@line 20028
  $629 = $ReallocAsyncCtx5 + 92 | 0; //@line 20029
  HEAP32[$629 >> 2] = $48; //@line 20030
  $630 = $ReallocAsyncCtx5 + 96 | 0; //@line 20031
  HEAP32[$630 >> 2] = $50; //@line 20032
  $631 = $ReallocAsyncCtx5 + 100 | 0; //@line 20033
  HEAP32[$631 >> 2] = $52; //@line 20034
  $632 = $ReallocAsyncCtx5 + 104 | 0; //@line 20035
  HEAP32[$632 >> 2] = $54; //@line 20036
  $633 = $ReallocAsyncCtx5 + 108 | 0; //@line 20037
  HEAP32[$633 >> 2] = $56; //@line 20038
  $634 = $ReallocAsyncCtx5 + 112 | 0; //@line 20039
  HEAP32[$634 >> 2] = $58; //@line 20040
  $635 = $ReallocAsyncCtx5 + 116 | 0; //@line 20041
  HEAP32[$635 >> 2] = $60; //@line 20042
  $636 = $ReallocAsyncCtx5 + 120 | 0; //@line 20043
  HEAP32[$636 >> 2] = $62; //@line 20044
  $637 = $ReallocAsyncCtx5 + 124 | 0; //@line 20045
  HEAP32[$637 >> 2] = $64; //@line 20046
  $638 = $ReallocAsyncCtx5 + 128 | 0; //@line 20047
  HEAP8[$638 >> 0] = $595; //@line 20048
  $639 = $ReallocAsyncCtx5 + 132 | 0; //@line 20049
  HEAP32[$639 >> 2] = $66; //@line 20050
  $640 = $ReallocAsyncCtx5 + 136 | 0; //@line 20051
  HEAP32[$640 >> 2] = $68; //@line 20052
  $641 = $ReallocAsyncCtx5 + 140 | 0; //@line 20053
  HEAP32[$641 >> 2] = $70; //@line 20054
  $642 = $ReallocAsyncCtx5 + 144 | 0; //@line 20055
  HEAP32[$642 >> 2] = $72; //@line 20056
  $643 = $ReallocAsyncCtx5 + 148 | 0; //@line 20057
  HEAP32[$643 >> 2] = $74; //@line 20058
  $644 = $ReallocAsyncCtx5 + 152 | 0; //@line 20059
  HEAP32[$644 >> 2] = $76; //@line 20060
  $645 = $ReallocAsyncCtx5 + 156 | 0; //@line 20061
  HEAP32[$645 >> 2] = $78; //@line 20062
  $646 = $ReallocAsyncCtx5 + 160 | 0; //@line 20063
  HEAP32[$646 >> 2] = $80; //@line 20064
  $647 = $ReallocAsyncCtx5 + 164 | 0; //@line 20065
  HEAP32[$647 >> 2] = $82; //@line 20066
  $648 = $ReallocAsyncCtx5 + 168 | 0; //@line 20067
  HEAP32[$648 >> 2] = $84; //@line 20068
  $649 = $ReallocAsyncCtx5 + 172 | 0; //@line 20069
  HEAP32[$649 >> 2] = $86; //@line 20070
  $650 = $ReallocAsyncCtx5 + 176 | 0; //@line 20071
  HEAP32[$650 >> 2] = $88; //@line 20072
  $651 = $ReallocAsyncCtx5 + 180 | 0; //@line 20073
  HEAP32[$651 >> 2] = $90; //@line 20074
  $652 = $ReallocAsyncCtx5 + 184 | 0; //@line 20075
  HEAP32[$652 >> 2] = $92; //@line 20076
  $653 = $ReallocAsyncCtx5 + 188 | 0; //@line 20077
  HEAP32[$653 >> 2] = $94; //@line 20078
  $654 = $ReallocAsyncCtx5 + 192 | 0; //@line 20079
  HEAP32[$654 >> 2] = $96; //@line 20080
  $655 = $ReallocAsyncCtx5 + 196 | 0; //@line 20081
  HEAP32[$655 >> 2] = $98; //@line 20082
  $656 = $ReallocAsyncCtx5 + 200 | 0; //@line 20083
  HEAP32[$656 >> 2] = $100; //@line 20084
  $657 = $ReallocAsyncCtx5 + 204 | 0; //@line 20085
  HEAP32[$657 >> 2] = $102; //@line 20086
  $658 = $ReallocAsyncCtx5 + 208 | 0; //@line 20087
  HEAP32[$658 >> 2] = $104; //@line 20088
  $659 = $ReallocAsyncCtx5 + 212 | 0; //@line 20089
  HEAP8[$659 >> 0] = $106; //@line 20090
  $660 = $ReallocAsyncCtx5 + 213 | 0; //@line 20091
  HEAP8[$660 >> 0] = $108; //@line 20092
  $661 = $ReallocAsyncCtx5 + 216 | 0; //@line 20093
  HEAP32[$661 >> 2] = $110; //@line 20094
  $662 = $ReallocAsyncCtx5 + 220 | 0; //@line 20095
  HEAP32[$662 >> 2] = $112; //@line 20096
  $663 = $ReallocAsyncCtx5 + 224 | 0; //@line 20097
  HEAP8[$663 >> 0] = $114; //@line 20098
  $664 = $ReallocAsyncCtx5 + 228 | 0; //@line 20099
  HEAP32[$664 >> 2] = $116; //@line 20100
  $665 = $ReallocAsyncCtx5 + 232 | 0; //@line 20101
  HEAP32[$665 >> 2] = $118; //@line 20102
  $666 = $ReallocAsyncCtx5 + 236 | 0; //@line 20103
  HEAP32[$666 >> 2] = $120; //@line 20104
  $667 = $ReallocAsyncCtx5 + 240 | 0; //@line 20105
  HEAP32[$667 >> 2] = $122; //@line 20106
  $668 = $ReallocAsyncCtx5 + 244 | 0; //@line 20107
  HEAP32[$668 >> 2] = $124; //@line 20108
  $669 = $ReallocAsyncCtx5 + 248 | 0; //@line 20109
  HEAP32[$669 >> 2] = $126; //@line 20110
  $670 = $ReallocAsyncCtx5 + 252 | 0; //@line 20111
  HEAP32[$670 >> 2] = $128; //@line 20112
  $671 = $ReallocAsyncCtx5 + 256 | 0; //@line 20113
  HEAP32[$671 >> 2] = $130; //@line 20114
  $672 = $ReallocAsyncCtx5 + 260 | 0; //@line 20115
  HEAP32[$672 >> 2] = $132; //@line 20116
  $673 = $ReallocAsyncCtx5 + 264 | 0; //@line 20117
  HEAP32[$673 >> 2] = $134; //@line 20118
  sp = STACKTOP; //@line 20119
  return;
 } else if ((label | 0) == 33) {
  HEAP32[___async_retval >> 2] = $$096$be; //@line 20124
  return;
 }
}
function __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_342($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$096$be = 0, $$2 = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $130 = 0, $132 = 0, $134 = 0, $136 = 0, $139 = 0, $14 = 0, $150 = 0, $151 = 0, $16 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $233 = 0, $236 = 0, $24 = 0, $241 = 0, $249 = 0, $26 = 0, $268 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $349 = 0, $350 = 0, $36 = 0, $38 = 0, $387 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $463 = 0, $467 = 0, $471 = 0, $474 = 0, $48 = 0, $480 = 0, $483 = 0, $484 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $572 = 0, $58 = 0, $594 = 0, $6 = 0, $60 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $671 = 0, $672 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 22089
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22091
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22093
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22095
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22097
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22099
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22101
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22103
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 22105
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 22107
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 22109
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 22111
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 22113
 $26 = HEAP8[$0 + 52 >> 0] | 0; //@line 22115
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 22117
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 22119
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 22121
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 22123
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 22125
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 22127
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 22129
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 22131
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 22133
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 22135
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 22137
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 22139
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 22141
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 22143
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 22145
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 22147
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 22149
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 22151
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 22153
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 22155
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 22157
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 22159
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 22161
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 22163
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 22165
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 22167
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 22169
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 22171
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 22173
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 22175
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 22177
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 22179
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 22181
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 22183
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 22185
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 22187
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 22189
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 22191
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 22193
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 22195
 $108 = HEAP8[$0 + 216 >> 0] | 0; //@line 22197
 $110 = HEAP8[$0 + 217 >> 0] | 0; //@line 22199
 $112 = HEAP32[$0 + 220 >> 2] | 0; //@line 22201
 $114 = HEAP32[$0 + 224 >> 2] | 0; //@line 22203
 $116 = HEAP8[$0 + 228 >> 0] | 0; //@line 22205
 $118 = HEAP32[$0 + 232 >> 2] | 0; //@line 22207
 $120 = HEAP32[$0 + 236 >> 2] | 0; //@line 22209
 $122 = HEAP32[$0 + 240 >> 2] | 0; //@line 22211
 $124 = HEAP32[$0 + 244 >> 2] | 0; //@line 22213
 $126 = HEAP32[$0 + 248 >> 2] | 0; //@line 22215
 $128 = HEAP32[$0 + 252 >> 2] | 0; //@line 22217
 $130 = HEAP32[$0 + 256 >> 2] | 0; //@line 22219
 $132 = HEAP32[$0 + 260 >> 2] | 0; //@line 22221
 $134 = HEAP32[$0 + 264 >> 2] | 0; //@line 22223
 $136 = HEAP32[$0 + 268 >> 2] | 0; //@line 22225
 if (HEAP8[___async_retval >> 0] & 1) {
  HEAP8[$42 >> 0] = HEAP8[$34 >> 0] | 0; //@line 22231
  HEAP8[$6 >> 0] = HEAP8[$40 >> 0] | 0; //@line 22233
  HEAPF32[$16 >> 2] = +(HEAPU8[14225 + (HEAPU8[$22 >> 0] | 0) >> 0] | 0); //@line 22239
  $572 = HEAP8[$102 >> 0] | 0; //@line 22241
  if (($572 & 255) < (-128 - (HEAP8[$136 >> 0] | 0) & 255)) {
   HEAP8[$102 >> 0] = $572 + 1 << 24 >> 24; //@line 22248
   HEAP8[($572 & 255) + ($124 + 4) >> 0] = 9; //@line 22249
   HEAP8[$76 >> 0] = 1; //@line 22250
   $$2 = 0; //@line 22251
  } else {
   $$2 = -1e3; //@line 22253
  }
 } else {
  $$2 = $78; //@line 22256
 }
 $$0$be = $26; //@line 22258
 $$096$be = $$2; //@line 22258
 L6 : while (1) {
  if (($$0$be & 255) >= ($110 & 255)) {
   label = 32; //@line 22262
   break;
  }
  $139 = $$0$be + 1 << 24 >> 24; //@line 22266
  switch (HEAP8[$120 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 22271
    break L6;
    break;
   }
  case 5:
   {
    label = 9; //@line 22276
    break L6;
    break;
   }
  case 7:
   {
    label = 14; //@line 22281
    break L6;
    break;
   }
  case 9:
   {
    label = 19; //@line 22286
    break L6;
    break;
   }
  case 10:
   {
    label = 28; //@line 22291
    break L6;
    break;
   }
  case 2:
   {
    HEAP32[$24 >> 2] = 0; //@line 22296
    HEAP8[$104 >> 0] = HEAP8[$120 + ($139 & 255) >> 0] | 0; //@line 22301
    HEAP8[$130 >> 0] = HEAP8[$120 + ($$0$be + 2 & 255) >> 0] | 0; //@line 22306
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 22307
    continue L6;
    break;
   }
  case 4:
   {
    $233 = $$0$be + 2 << 24 >> 24; //@line 22312
    $236 = HEAP8[$120 + ($139 & 255) >> 0] | 0; //@line 22315
    HEAP8[$86 >> 0] = $236; //@line 22316
    HEAP16[$64 >> 1] = 1 << ($236 & 255); //@line 22320
    $241 = HEAP8[$102 >> 0] | 0; //@line 22322
    if (($241 & 255) >= (-128 - (HEAP8[$136 >> 0] | 0) & 255)) {
     $$0$be = $233; //@line 22326
     $$096$be = -1e3; //@line 22326
     continue L6;
    }
    HEAP8[$102 >> 0] = $241 + 1 << 24 >> 24; //@line 22332
    HEAP8[($241 & 255) + ($124 + 4) >> 0] = 4; //@line 22333
    HEAP8[$76 >> 0] = 1; //@line 22334
    $$0$be = $233; //@line 22335
    $$096$be = 0; //@line 22335
    continue L6;
    break;
   }
  case 6:
   {
    $349 = HEAP8[$102 >> 0] | 0; //@line 22341
    $350 = $349 & 255; //@line 22342
    if (((-128 - (HEAP8[$136 >> 0] | 0) & 255) + -2 | 0) <= ($350 | 0)) {
     $$0$be = $139; //@line 22348
     $$096$be = -1e3; //@line 22348
     continue L6;
    }
    HEAP8[$124 + 4 + $350 >> 0] = 6; //@line 22353
    HEAP8[($349 + 1 & 255) + ($124 + 4) >> 0] = -1; //@line 22357
    HEAP8[$102 >> 0] = $349 + 3 << 24 >> 24; //@line 22359
    HEAP8[($349 + 2 & 255) + ($124 + 4) >> 0] = $108; //@line 22362
    HEAP8[$76 >> 0] = 1; //@line 22363
    $$0$be = $139; //@line 22364
    $$096$be = 0; //@line 22364
    continue L6;
    break;
   }
  case 8:
   {
    $463 = $$0$be + 2 << 24 >> 24; //@line 22369
    $467 = HEAP8[$120 + ($139 & 255) >> 0] & 15; //@line 22373
    $471 = ($467 + ($467 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 22378
    HEAP32[$48 >> 2] = $471; //@line 22379
    HEAP32[$58 >> 2] = $471 + 1e3; //@line 22381
    $474 = HEAP8[$102 >> 0] | 0; //@line 22383
    if (($474 & 255) >= (-128 - (HEAP8[$136 >> 0] | 0) & 255)) {
     $$0$be = $463; //@line 22387
     $$096$be = -1e3; //@line 22387
     continue L6;
    }
    HEAP8[$102 >> 0] = $474 + 1 << 24 >> 24; //@line 22393
    HEAP8[($474 & 255) + ($124 + 4) >> 0] = 8; //@line 22394
    HEAP8[$12 >> 0] = 1; //@line 22395
    HEAP8[$76 >> 0] = 1; //@line 22396
    $$0$be = $463; //@line 22397
    $$096$be = 0; //@line 22397
    continue L6;
    break;
   }
  default:
   {
    $$0$be = $139; //@line 22402
    $$096$be = -1013; //@line 22402
    continue L6;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$10 >> 0] = 0; //@line 22408
  HEAP8[$66 >> 0] = 0; //@line 22409
  HEAP8[$84 >> 0] = 0; //@line 22410
  HEAP8[$90 >> 0] = 0; //@line 22411
  $150 = $139 & 255; //@line 22412
  $151 = $150 + -1 | 0; //@line 22413
  HEAP32[$122 >> 2] = $120 + $151; //@line 22415
  HEAP8[$70 >> 0] = $14 - $151; //@line 22418
  HEAP8[$80 >> 0] = HEAP8[$92 >> 0] | 0; //@line 22420
  HEAP8[$36 >> 0] = HEAP8[$42 >> 0] | 0; //@line 22422
  HEAP8[$46 >> 0] = HEAP8[$52 >> 0] | 0; //@line 22424
  HEAP8[$2 >> 0] = HEAP8[$18 >> 0] | 0; //@line 22426
  HEAP8[$112 >> 0] = HEAP8[$28 >> 0] | 0; //@line 22428
  $162 = HEAP32[(HEAP32[$8 >> 2] | 0) + 36 >> 2] | 0; //@line 22431
  $ReallocAsyncCtx = _emscripten_realloc_async_context(272) | 0; //@line 22432
  $163 = FUNCTION_TABLE_iiiiiii[$162 & 3]($100, $20, $10, $66, $84, $90) | 0; //@line 22433
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 504; //@line 22436
   $164 = $ReallocAsyncCtx + 4 | 0; //@line 22437
   HEAP32[$164 >> 2] = $2; //@line 22438
   $165 = $ReallocAsyncCtx + 8 | 0; //@line 22439
   HEAP8[$165 >> 0] = $116; //@line 22440
   $166 = $ReallocAsyncCtx + 12 | 0; //@line 22441
   HEAP32[$166 >> 2] = $4; //@line 22442
   $167 = $ReallocAsyncCtx + 16 | 0; //@line 22443
   HEAP32[$167 >> 2] = $6; //@line 22444
   $168 = $ReallocAsyncCtx + 20 | 0; //@line 22445
   HEAP32[$168 >> 2] = $10; //@line 22446
   $169 = $ReallocAsyncCtx + 24 | 0; //@line 22447
   HEAP32[$169 >> 2] = $12; //@line 22448
   $170 = $ReallocAsyncCtx + 28 | 0; //@line 22449
   HEAP32[$170 >> 2] = $14; //@line 22450
   $171 = $ReallocAsyncCtx + 32 | 0; //@line 22451
   HEAP32[$171 >> 2] = $16; //@line 22452
   $172 = $ReallocAsyncCtx + 36 | 0; //@line 22453
   HEAP32[$172 >> 2] = $18; //@line 22454
   $173 = $ReallocAsyncCtx + 40 | 0; //@line 22455
   HEAP32[$173 >> 2] = $20; //@line 22456
   $174 = $ReallocAsyncCtx + 44 | 0; //@line 22457
   HEAP32[$174 >> 2] = $22; //@line 22458
   $175 = $ReallocAsyncCtx + 48 | 0; //@line 22459
   HEAP32[$175 >> 2] = $24; //@line 22460
   $176 = $ReallocAsyncCtx + 52 | 0; //@line 22461
   HEAP32[$176 >> 2] = $28; //@line 22462
   $177 = $ReallocAsyncCtx + 56 | 0; //@line 22463
   HEAP32[$177 >> 2] = $30; //@line 22464
   $178 = $ReallocAsyncCtx + 60 | 0; //@line 22465
   HEAP32[$178 >> 2] = $32; //@line 22466
   $179 = $ReallocAsyncCtx + 64 | 0; //@line 22467
   HEAP32[$179 >> 2] = $34; //@line 22468
   $180 = $ReallocAsyncCtx + 68 | 0; //@line 22469
   HEAP32[$180 >> 2] = $36; //@line 22470
   $181 = $ReallocAsyncCtx + 72 | 0; //@line 22471
   HEAP32[$181 >> 2] = $38; //@line 22472
   $182 = $ReallocAsyncCtx + 76 | 0; //@line 22473
   HEAP32[$182 >> 2] = $40; //@line 22474
   $183 = $ReallocAsyncCtx + 80 | 0; //@line 22475
   HEAP32[$183 >> 2] = $42; //@line 22476
   $184 = $ReallocAsyncCtx + 84 | 0; //@line 22477
   HEAP32[$184 >> 2] = $44; //@line 22478
   $185 = $ReallocAsyncCtx + 88 | 0; //@line 22479
   HEAP32[$185 >> 2] = $46; //@line 22480
   $186 = $ReallocAsyncCtx + 92 | 0; //@line 22481
   HEAP32[$186 >> 2] = $48; //@line 22482
   $187 = $ReallocAsyncCtx + 96 | 0; //@line 22483
   HEAP32[$187 >> 2] = $50; //@line 22484
   $188 = $ReallocAsyncCtx + 100 | 0; //@line 22485
   HEAP32[$188 >> 2] = $52; //@line 22486
   $189 = $ReallocAsyncCtx + 104 | 0; //@line 22487
   HEAP32[$189 >> 2] = $54; //@line 22488
   $190 = $ReallocAsyncCtx + 108 | 0; //@line 22489
   HEAP32[$190 >> 2] = $56; //@line 22490
   $191 = $ReallocAsyncCtx + 112 | 0; //@line 22491
   HEAP32[$191 >> 2] = $58; //@line 22492
   $192 = $ReallocAsyncCtx + 116 | 0; //@line 22493
   HEAP32[$192 >> 2] = $60; //@line 22494
   $193 = $ReallocAsyncCtx + 120 | 0; //@line 22495
   HEAP32[$193 >> 2] = $62; //@line 22496
   $194 = $ReallocAsyncCtx + 124 | 0; //@line 22497
   HEAP32[$194 >> 2] = $64; //@line 22498
   $195 = $ReallocAsyncCtx + 128 | 0; //@line 22499
   HEAP32[$195 >> 2] = $66; //@line 22500
   $196 = $ReallocAsyncCtx + 132 | 0; //@line 22501
   HEAP32[$196 >> 2] = $68; //@line 22502
   $197 = $ReallocAsyncCtx + 136 | 0; //@line 22503
   HEAP32[$197 >> 2] = $70; //@line 22504
   $198 = $ReallocAsyncCtx + 140 | 0; //@line 22505
   HEAP32[$198 >> 2] = $72; //@line 22506
   $199 = $ReallocAsyncCtx + 144 | 0; //@line 22507
   HEAP32[$199 >> 2] = $74; //@line 22508
   $200 = $ReallocAsyncCtx + 148 | 0; //@line 22509
   HEAP32[$200 >> 2] = $76; //@line 22510
   $201 = $ReallocAsyncCtx + 152 | 0; //@line 22511
   HEAP32[$201 >> 2] = $$096$be; //@line 22512
   $202 = $ReallocAsyncCtx + 156 | 0; //@line 22513
   HEAP32[$202 >> 2] = $80; //@line 22514
   $203 = $ReallocAsyncCtx + 160 | 0; //@line 22515
   HEAP32[$203 >> 2] = $82; //@line 22516
   $204 = $ReallocAsyncCtx + 164 | 0; //@line 22517
   HEAP32[$204 >> 2] = $84; //@line 22518
   $205 = $ReallocAsyncCtx + 168 | 0; //@line 22519
   HEAP32[$205 >> 2] = $86; //@line 22520
   $206 = $ReallocAsyncCtx + 172 | 0; //@line 22521
   HEAP32[$206 >> 2] = $88; //@line 22522
   $207 = $ReallocAsyncCtx + 176 | 0; //@line 22523
   HEAP32[$207 >> 2] = $90; //@line 22524
   $208 = $ReallocAsyncCtx + 180 | 0; //@line 22525
   HEAP32[$208 >> 2] = $92; //@line 22526
   $209 = $ReallocAsyncCtx + 184 | 0; //@line 22527
   HEAP32[$209 >> 2] = $94; //@line 22528
   $210 = $ReallocAsyncCtx + 188 | 0; //@line 22529
   HEAP32[$210 >> 2] = $96; //@line 22530
   $211 = $ReallocAsyncCtx + 192 | 0; //@line 22531
   HEAP32[$211 >> 2] = $98; //@line 22532
   $212 = $ReallocAsyncCtx + 196 | 0; //@line 22533
   HEAP32[$212 >> 2] = $100; //@line 22534
   $213 = $ReallocAsyncCtx + 200 | 0; //@line 22535
   HEAP32[$213 >> 2] = $150; //@line 22536
   $214 = $ReallocAsyncCtx + 204 | 0; //@line 22537
   HEAP32[$214 >> 2] = $102; //@line 22538
   $215 = $ReallocAsyncCtx + 208 | 0; //@line 22539
   HEAP32[$215 >> 2] = $104; //@line 22540
   $216 = $ReallocAsyncCtx + 212 | 0; //@line 22541
   HEAP32[$216 >> 2] = $106; //@line 22542
   $217 = $ReallocAsyncCtx + 216 | 0; //@line 22543
   HEAP8[$217 >> 0] = $108; //@line 22544
   $218 = $ReallocAsyncCtx + 217 | 0; //@line 22545
   HEAP8[$218 >> 0] = $110; //@line 22546
   $219 = $ReallocAsyncCtx + 220 | 0; //@line 22547
   HEAP32[$219 >> 2] = $112; //@line 22548
   $220 = $ReallocAsyncCtx + 224 | 0; //@line 22549
   HEAP32[$220 >> 2] = $114; //@line 22550
   $221 = $ReallocAsyncCtx + 228 | 0; //@line 22551
   HEAP32[$221 >> 2] = $122; //@line 22552
   $222 = $ReallocAsyncCtx + 232 | 0; //@line 22553
   HEAP32[$222 >> 2] = $118; //@line 22554
   $223 = $ReallocAsyncCtx + 236 | 0; //@line 22555
   HEAP32[$223 >> 2] = $120; //@line 22556
   $224 = $ReallocAsyncCtx + 240 | 0; //@line 22557
   HEAP32[$224 >> 2] = $132; //@line 22558
   $225 = $ReallocAsyncCtx + 244 | 0; //@line 22559
   HEAP32[$225 >> 2] = $124; //@line 22560
   $226 = $ReallocAsyncCtx + 248 | 0; //@line 22561
   HEAP32[$226 >> 2] = $126; //@line 22562
   $227 = $ReallocAsyncCtx + 252 | 0; //@line 22563
   HEAP32[$227 >> 2] = $128; //@line 22564
   $228 = $ReallocAsyncCtx + 256 | 0; //@line 22565
   HEAP32[$228 >> 2] = $130; //@line 22566
   $229 = $ReallocAsyncCtx + 260 | 0; //@line 22567
   HEAP32[$229 >> 2] = $8; //@line 22568
   $230 = $ReallocAsyncCtx + 264 | 0; //@line 22569
   HEAP32[$230 >> 2] = $134; //@line 22570
   $231 = $ReallocAsyncCtx + 268 | 0; //@line 22571
   HEAP32[$231 >> 2] = $136; //@line 22572
   sp = STACKTOP; //@line 22573
   return;
  }
  HEAP8[___async_retval >> 0] = $163; //@line 22577
  ___async_unwind = 0; //@line 22578
  HEAP32[$ReallocAsyncCtx >> 2] = 504; //@line 22579
  $164 = $ReallocAsyncCtx + 4 | 0; //@line 22580
  HEAP32[$164 >> 2] = $2; //@line 22581
  $165 = $ReallocAsyncCtx + 8 | 0; //@line 22582
  HEAP8[$165 >> 0] = $116; //@line 22583
  $166 = $ReallocAsyncCtx + 12 | 0; //@line 22584
  HEAP32[$166 >> 2] = $4; //@line 22585
  $167 = $ReallocAsyncCtx + 16 | 0; //@line 22586
  HEAP32[$167 >> 2] = $6; //@line 22587
  $168 = $ReallocAsyncCtx + 20 | 0; //@line 22588
  HEAP32[$168 >> 2] = $10; //@line 22589
  $169 = $ReallocAsyncCtx + 24 | 0; //@line 22590
  HEAP32[$169 >> 2] = $12; //@line 22591
  $170 = $ReallocAsyncCtx + 28 | 0; //@line 22592
  HEAP32[$170 >> 2] = $14; //@line 22593
  $171 = $ReallocAsyncCtx + 32 | 0; //@line 22594
  HEAP32[$171 >> 2] = $16; //@line 22595
  $172 = $ReallocAsyncCtx + 36 | 0; //@line 22596
  HEAP32[$172 >> 2] = $18; //@line 22597
  $173 = $ReallocAsyncCtx + 40 | 0; //@line 22598
  HEAP32[$173 >> 2] = $20; //@line 22599
  $174 = $ReallocAsyncCtx + 44 | 0; //@line 22600
  HEAP32[$174 >> 2] = $22; //@line 22601
  $175 = $ReallocAsyncCtx + 48 | 0; //@line 22602
  HEAP32[$175 >> 2] = $24; //@line 22603
  $176 = $ReallocAsyncCtx + 52 | 0; //@line 22604
  HEAP32[$176 >> 2] = $28; //@line 22605
  $177 = $ReallocAsyncCtx + 56 | 0; //@line 22606
  HEAP32[$177 >> 2] = $30; //@line 22607
  $178 = $ReallocAsyncCtx + 60 | 0; //@line 22608
  HEAP32[$178 >> 2] = $32; //@line 22609
  $179 = $ReallocAsyncCtx + 64 | 0; //@line 22610
  HEAP32[$179 >> 2] = $34; //@line 22611
  $180 = $ReallocAsyncCtx + 68 | 0; //@line 22612
  HEAP32[$180 >> 2] = $36; //@line 22613
  $181 = $ReallocAsyncCtx + 72 | 0; //@line 22614
  HEAP32[$181 >> 2] = $38; //@line 22615
  $182 = $ReallocAsyncCtx + 76 | 0; //@line 22616
  HEAP32[$182 >> 2] = $40; //@line 22617
  $183 = $ReallocAsyncCtx + 80 | 0; //@line 22618
  HEAP32[$183 >> 2] = $42; //@line 22619
  $184 = $ReallocAsyncCtx + 84 | 0; //@line 22620
  HEAP32[$184 >> 2] = $44; //@line 22621
  $185 = $ReallocAsyncCtx + 88 | 0; //@line 22622
  HEAP32[$185 >> 2] = $46; //@line 22623
  $186 = $ReallocAsyncCtx + 92 | 0; //@line 22624
  HEAP32[$186 >> 2] = $48; //@line 22625
  $187 = $ReallocAsyncCtx + 96 | 0; //@line 22626
  HEAP32[$187 >> 2] = $50; //@line 22627
  $188 = $ReallocAsyncCtx + 100 | 0; //@line 22628
  HEAP32[$188 >> 2] = $52; //@line 22629
  $189 = $ReallocAsyncCtx + 104 | 0; //@line 22630
  HEAP32[$189 >> 2] = $54; //@line 22631
  $190 = $ReallocAsyncCtx + 108 | 0; //@line 22632
  HEAP32[$190 >> 2] = $56; //@line 22633
  $191 = $ReallocAsyncCtx + 112 | 0; //@line 22634
  HEAP32[$191 >> 2] = $58; //@line 22635
  $192 = $ReallocAsyncCtx + 116 | 0; //@line 22636
  HEAP32[$192 >> 2] = $60; //@line 22637
  $193 = $ReallocAsyncCtx + 120 | 0; //@line 22638
  HEAP32[$193 >> 2] = $62; //@line 22639
  $194 = $ReallocAsyncCtx + 124 | 0; //@line 22640
  HEAP32[$194 >> 2] = $64; //@line 22641
  $195 = $ReallocAsyncCtx + 128 | 0; //@line 22642
  HEAP32[$195 >> 2] = $66; //@line 22643
  $196 = $ReallocAsyncCtx + 132 | 0; //@line 22644
  HEAP32[$196 >> 2] = $68; //@line 22645
  $197 = $ReallocAsyncCtx + 136 | 0; //@line 22646
  HEAP32[$197 >> 2] = $70; //@line 22647
  $198 = $ReallocAsyncCtx + 140 | 0; //@line 22648
  HEAP32[$198 >> 2] = $72; //@line 22649
  $199 = $ReallocAsyncCtx + 144 | 0; //@line 22650
  HEAP32[$199 >> 2] = $74; //@line 22651
  $200 = $ReallocAsyncCtx + 148 | 0; //@line 22652
  HEAP32[$200 >> 2] = $76; //@line 22653
  $201 = $ReallocAsyncCtx + 152 | 0; //@line 22654
  HEAP32[$201 >> 2] = $$096$be; //@line 22655
  $202 = $ReallocAsyncCtx + 156 | 0; //@line 22656
  HEAP32[$202 >> 2] = $80; //@line 22657
  $203 = $ReallocAsyncCtx + 160 | 0; //@line 22658
  HEAP32[$203 >> 2] = $82; //@line 22659
  $204 = $ReallocAsyncCtx + 164 | 0; //@line 22660
  HEAP32[$204 >> 2] = $84; //@line 22661
  $205 = $ReallocAsyncCtx + 168 | 0; //@line 22662
  HEAP32[$205 >> 2] = $86; //@line 22663
  $206 = $ReallocAsyncCtx + 172 | 0; //@line 22664
  HEAP32[$206 >> 2] = $88; //@line 22665
  $207 = $ReallocAsyncCtx + 176 | 0; //@line 22666
  HEAP32[$207 >> 2] = $90; //@line 22667
  $208 = $ReallocAsyncCtx + 180 | 0; //@line 22668
  HEAP32[$208 >> 2] = $92; //@line 22669
  $209 = $ReallocAsyncCtx + 184 | 0; //@line 22670
  HEAP32[$209 >> 2] = $94; //@line 22671
  $210 = $ReallocAsyncCtx + 188 | 0; //@line 22672
  HEAP32[$210 >> 2] = $96; //@line 22673
  $211 = $ReallocAsyncCtx + 192 | 0; //@line 22674
  HEAP32[$211 >> 2] = $98; //@line 22675
  $212 = $ReallocAsyncCtx + 196 | 0; //@line 22676
  HEAP32[$212 >> 2] = $100; //@line 22677
  $213 = $ReallocAsyncCtx + 200 | 0; //@line 22678
  HEAP32[$213 >> 2] = $150; //@line 22679
  $214 = $ReallocAsyncCtx + 204 | 0; //@line 22680
  HEAP32[$214 >> 2] = $102; //@line 22681
  $215 = $ReallocAsyncCtx + 208 | 0; //@line 22682
  HEAP32[$215 >> 2] = $104; //@line 22683
  $216 = $ReallocAsyncCtx + 212 | 0; //@line 22684
  HEAP32[$216 >> 2] = $106; //@line 22685
  $217 = $ReallocAsyncCtx + 216 | 0; //@line 22686
  HEAP8[$217 >> 0] = $108; //@line 22687
  $218 = $ReallocAsyncCtx + 217 | 0; //@line 22688
  HEAP8[$218 >> 0] = $110; //@line 22689
  $219 = $ReallocAsyncCtx + 220 | 0; //@line 22690
  HEAP32[$219 >> 2] = $112; //@line 22691
  $220 = $ReallocAsyncCtx + 224 | 0; //@line 22692
  HEAP32[$220 >> 2] = $114; //@line 22693
  $221 = $ReallocAsyncCtx + 228 | 0; //@line 22694
  HEAP32[$221 >> 2] = $122; //@line 22695
  $222 = $ReallocAsyncCtx + 232 | 0; //@line 22696
  HEAP32[$222 >> 2] = $118; //@line 22697
  $223 = $ReallocAsyncCtx + 236 | 0; //@line 22698
  HEAP32[$223 >> 2] = $120; //@line 22699
  $224 = $ReallocAsyncCtx + 240 | 0; //@line 22700
  HEAP32[$224 >> 2] = $132; //@line 22701
  $225 = $ReallocAsyncCtx + 244 | 0; //@line 22702
  HEAP32[$225 >> 2] = $124; //@line 22703
  $226 = $ReallocAsyncCtx + 248 | 0; //@line 22704
  HEAP32[$226 >> 2] = $126; //@line 22705
  $227 = $ReallocAsyncCtx + 252 | 0; //@line 22706
  HEAP32[$227 >> 2] = $128; //@line 22707
  $228 = $ReallocAsyncCtx + 256 | 0; //@line 22708
  HEAP32[$228 >> 2] = $130; //@line 22709
  $229 = $ReallocAsyncCtx + 260 | 0; //@line 22710
  HEAP32[$229 >> 2] = $8; //@line 22711
  $230 = $ReallocAsyncCtx + 264 | 0; //@line 22712
  HEAP32[$230 >> 2] = $134; //@line 22713
  $231 = $ReallocAsyncCtx + 268 | 0; //@line 22714
  HEAP32[$231 >> 2] = $136; //@line 22715
  sp = STACKTOP; //@line 22716
  return;
 } else if ((label | 0) == 9) {
  $249 = HEAP8[$120 + ($139 & 255) >> 0] | 0; //@line 22722
  HEAP8[$50 >> 0] = ($249 & 255) >>> 4 & 7; //@line 22727
  HEAP8[$72 >> 0] = $249 & 15; //@line 22729
  $268 = $$0$be + 5 << 24 >> 24; //@line 22743
  HEAP32[$56 >> 2] = (HEAPU8[$120 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$120 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$120 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 22751
  $278 = HEAP32[(HEAP32[$38 >> 2] | 0) + 40 >> 2] | 0; //@line 22754
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(268) | 0; //@line 22755
  $279 = FUNCTION_TABLE_iii[$278 & 31]($100, $96) | 0; //@line 22756
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 505; //@line 22759
   $280 = $ReallocAsyncCtx2 + 4 | 0; //@line 22760
   HEAP32[$280 >> 2] = $2; //@line 22761
   $281 = $ReallocAsyncCtx2 + 8 | 0; //@line 22762
   HEAP32[$281 >> 2] = $4; //@line 22763
   $282 = $ReallocAsyncCtx2 + 12 | 0; //@line 22764
   HEAP32[$282 >> 2] = $6; //@line 22765
   $283 = $ReallocAsyncCtx2 + 16 | 0; //@line 22766
   HEAP32[$283 >> 2] = $8; //@line 22767
   $284 = $ReallocAsyncCtx2 + 20 | 0; //@line 22768
   HEAP32[$284 >> 2] = $10; //@line 22769
   $285 = $ReallocAsyncCtx2 + 24 | 0; //@line 22770
   HEAP32[$285 >> 2] = $12; //@line 22771
   $286 = $ReallocAsyncCtx2 + 28 | 0; //@line 22772
   HEAP32[$286 >> 2] = $14; //@line 22773
   $287 = $ReallocAsyncCtx2 + 32 | 0; //@line 22774
   HEAP32[$287 >> 2] = $16; //@line 22775
   $288 = $ReallocAsyncCtx2 + 36 | 0; //@line 22776
   HEAP32[$288 >> 2] = $18; //@line 22777
   $289 = $ReallocAsyncCtx2 + 40 | 0; //@line 22778
   HEAP32[$289 >> 2] = $20; //@line 22779
   $290 = $ReallocAsyncCtx2 + 44 | 0; //@line 22780
   HEAP32[$290 >> 2] = $22; //@line 22781
   $291 = $ReallocAsyncCtx2 + 48 | 0; //@line 22782
   HEAP8[$291 >> 0] = $268; //@line 22783
   $292 = $ReallocAsyncCtx2 + 52 | 0; //@line 22784
   HEAP32[$292 >> 2] = $24; //@line 22785
   $293 = $ReallocAsyncCtx2 + 56 | 0; //@line 22786
   HEAP32[$293 >> 2] = $28; //@line 22787
   $294 = $ReallocAsyncCtx2 + 60 | 0; //@line 22788
   HEAP32[$294 >> 2] = $30; //@line 22789
   $295 = $ReallocAsyncCtx2 + 64 | 0; //@line 22790
   HEAP32[$295 >> 2] = $32; //@line 22791
   $296 = $ReallocAsyncCtx2 + 68 | 0; //@line 22792
   HEAP32[$296 >> 2] = $34; //@line 22793
   $297 = $ReallocAsyncCtx2 + 72 | 0; //@line 22794
   HEAP32[$297 >> 2] = $36; //@line 22795
   $298 = $ReallocAsyncCtx2 + 76 | 0; //@line 22796
   HEAP32[$298 >> 2] = $38; //@line 22797
   $299 = $ReallocAsyncCtx2 + 80 | 0; //@line 22798
   HEAP32[$299 >> 2] = $40; //@line 22799
   $300 = $ReallocAsyncCtx2 + 84 | 0; //@line 22800
   HEAP32[$300 >> 2] = $42; //@line 22801
   $301 = $ReallocAsyncCtx2 + 88 | 0; //@line 22802
   HEAP32[$301 >> 2] = $44; //@line 22803
   $302 = $ReallocAsyncCtx2 + 92 | 0; //@line 22804
   HEAP32[$302 >> 2] = $46; //@line 22805
   $303 = $ReallocAsyncCtx2 + 96 | 0; //@line 22806
   HEAP32[$303 >> 2] = $48; //@line 22807
   $304 = $ReallocAsyncCtx2 + 100 | 0; //@line 22808
   HEAP32[$304 >> 2] = $50; //@line 22809
   $305 = $ReallocAsyncCtx2 + 104 | 0; //@line 22810
   HEAP32[$305 >> 2] = $52; //@line 22811
   $306 = $ReallocAsyncCtx2 + 108 | 0; //@line 22812
   HEAP32[$306 >> 2] = $54; //@line 22813
   $307 = $ReallocAsyncCtx2 + 112 | 0; //@line 22814
   HEAP32[$307 >> 2] = $56; //@line 22815
   $308 = $ReallocAsyncCtx2 + 116 | 0; //@line 22816
   HEAP32[$308 >> 2] = $58; //@line 22817
   $309 = $ReallocAsyncCtx2 + 120 | 0; //@line 22818
   HEAP32[$309 >> 2] = $60; //@line 22819
   $310 = $ReallocAsyncCtx2 + 124 | 0; //@line 22820
   HEAP32[$310 >> 2] = $62; //@line 22821
   $311 = $ReallocAsyncCtx2 + 128 | 0; //@line 22822
   HEAP32[$311 >> 2] = $64; //@line 22823
   $312 = $ReallocAsyncCtx2 + 132 | 0; //@line 22824
   HEAP32[$312 >> 2] = $66; //@line 22825
   $313 = $ReallocAsyncCtx2 + 136 | 0; //@line 22826
   HEAP32[$313 >> 2] = $68; //@line 22827
   $314 = $ReallocAsyncCtx2 + 140 | 0; //@line 22828
   HEAP32[$314 >> 2] = $70; //@line 22829
   $315 = $ReallocAsyncCtx2 + 144 | 0; //@line 22830
   HEAP32[$315 >> 2] = $72; //@line 22831
   $316 = $ReallocAsyncCtx2 + 148 | 0; //@line 22832
   HEAP32[$316 >> 2] = $74; //@line 22833
   $317 = $ReallocAsyncCtx2 + 152 | 0; //@line 22834
   HEAP32[$317 >> 2] = $76; //@line 22835
   $318 = $ReallocAsyncCtx2 + 156 | 0; //@line 22836
   HEAP32[$318 >> 2] = $80; //@line 22837
   $319 = $ReallocAsyncCtx2 + 160 | 0; //@line 22838
   HEAP32[$319 >> 2] = $82; //@line 22839
   $320 = $ReallocAsyncCtx2 + 164 | 0; //@line 22840
   HEAP32[$320 >> 2] = $84; //@line 22841
   $321 = $ReallocAsyncCtx2 + 168 | 0; //@line 22842
   HEAP32[$321 >> 2] = $86; //@line 22843
   $322 = $ReallocAsyncCtx2 + 172 | 0; //@line 22844
   HEAP32[$322 >> 2] = $88; //@line 22845
   $323 = $ReallocAsyncCtx2 + 176 | 0; //@line 22846
   HEAP32[$323 >> 2] = $90; //@line 22847
   $324 = $ReallocAsyncCtx2 + 180 | 0; //@line 22848
   HEAP32[$324 >> 2] = $92; //@line 22849
   $325 = $ReallocAsyncCtx2 + 184 | 0; //@line 22850
   HEAP32[$325 >> 2] = $94; //@line 22851
   $326 = $ReallocAsyncCtx2 + 188 | 0; //@line 22852
   HEAP32[$326 >> 2] = $96; //@line 22853
   $327 = $ReallocAsyncCtx2 + 192 | 0; //@line 22854
   HEAP32[$327 >> 2] = $98; //@line 22855
   $328 = $ReallocAsyncCtx2 + 196 | 0; //@line 22856
   HEAP32[$328 >> 2] = $100; //@line 22857
   $329 = $ReallocAsyncCtx2 + 200 | 0; //@line 22858
   HEAP32[$329 >> 2] = $102; //@line 22859
   $330 = $ReallocAsyncCtx2 + 204 | 0; //@line 22860
   HEAP32[$330 >> 2] = $104; //@line 22861
   $331 = $ReallocAsyncCtx2 + 208 | 0; //@line 22862
   HEAP32[$331 >> 2] = $106; //@line 22863
   $332 = $ReallocAsyncCtx2 + 212 | 0; //@line 22864
   HEAP8[$332 >> 0] = $108; //@line 22865
   $333 = $ReallocAsyncCtx2 + 213 | 0; //@line 22866
   HEAP8[$333 >> 0] = $110; //@line 22867
   $334 = $ReallocAsyncCtx2 + 216 | 0; //@line 22868
   HEAP32[$334 >> 2] = $112; //@line 22869
   $335 = $ReallocAsyncCtx2 + 220 | 0; //@line 22870
   HEAP32[$335 >> 2] = $114; //@line 22871
   $336 = $ReallocAsyncCtx2 + 224 | 0; //@line 22872
   HEAP8[$336 >> 0] = $116; //@line 22873
   $337 = $ReallocAsyncCtx2 + 228 | 0; //@line 22874
   HEAP32[$337 >> 2] = $118; //@line 22875
   $338 = $ReallocAsyncCtx2 + 232 | 0; //@line 22876
   HEAP32[$338 >> 2] = $120; //@line 22877
   $339 = $ReallocAsyncCtx2 + 236 | 0; //@line 22878
   HEAP32[$339 >> 2] = $122; //@line 22879
   $340 = $ReallocAsyncCtx2 + 240 | 0; //@line 22880
   HEAP32[$340 >> 2] = $124; //@line 22881
   $341 = $ReallocAsyncCtx2 + 244 | 0; //@line 22882
   HEAP32[$341 >> 2] = $126; //@line 22883
   $342 = $ReallocAsyncCtx2 + 248 | 0; //@line 22884
   HEAP32[$342 >> 2] = $128; //@line 22885
   $343 = $ReallocAsyncCtx2 + 252 | 0; //@line 22886
   HEAP32[$343 >> 2] = $130; //@line 22887
   $344 = $ReallocAsyncCtx2 + 256 | 0; //@line 22888
   HEAP32[$344 >> 2] = $132; //@line 22889
   $345 = $ReallocAsyncCtx2 + 260 | 0; //@line 22890
   HEAP32[$345 >> 2] = $134; //@line 22891
   $346 = $ReallocAsyncCtx2 + 264 | 0; //@line 22892
   HEAP32[$346 >> 2] = $136; //@line 22893
   sp = STACKTOP; //@line 22894
   return;
  }
  HEAP8[___async_retval >> 0] = $279; //@line 22898
  ___async_unwind = 0; //@line 22899
  HEAP32[$ReallocAsyncCtx2 >> 2] = 505; //@line 22900
  $280 = $ReallocAsyncCtx2 + 4 | 0; //@line 22901
  HEAP32[$280 >> 2] = $2; //@line 22902
  $281 = $ReallocAsyncCtx2 + 8 | 0; //@line 22903
  HEAP32[$281 >> 2] = $4; //@line 22904
  $282 = $ReallocAsyncCtx2 + 12 | 0; //@line 22905
  HEAP32[$282 >> 2] = $6; //@line 22906
  $283 = $ReallocAsyncCtx2 + 16 | 0; //@line 22907
  HEAP32[$283 >> 2] = $8; //@line 22908
  $284 = $ReallocAsyncCtx2 + 20 | 0; //@line 22909
  HEAP32[$284 >> 2] = $10; //@line 22910
  $285 = $ReallocAsyncCtx2 + 24 | 0; //@line 22911
  HEAP32[$285 >> 2] = $12; //@line 22912
  $286 = $ReallocAsyncCtx2 + 28 | 0; //@line 22913
  HEAP32[$286 >> 2] = $14; //@line 22914
  $287 = $ReallocAsyncCtx2 + 32 | 0; //@line 22915
  HEAP32[$287 >> 2] = $16; //@line 22916
  $288 = $ReallocAsyncCtx2 + 36 | 0; //@line 22917
  HEAP32[$288 >> 2] = $18; //@line 22918
  $289 = $ReallocAsyncCtx2 + 40 | 0; //@line 22919
  HEAP32[$289 >> 2] = $20; //@line 22920
  $290 = $ReallocAsyncCtx2 + 44 | 0; //@line 22921
  HEAP32[$290 >> 2] = $22; //@line 22922
  $291 = $ReallocAsyncCtx2 + 48 | 0; //@line 22923
  HEAP8[$291 >> 0] = $268; //@line 22924
  $292 = $ReallocAsyncCtx2 + 52 | 0; //@line 22925
  HEAP32[$292 >> 2] = $24; //@line 22926
  $293 = $ReallocAsyncCtx2 + 56 | 0; //@line 22927
  HEAP32[$293 >> 2] = $28; //@line 22928
  $294 = $ReallocAsyncCtx2 + 60 | 0; //@line 22929
  HEAP32[$294 >> 2] = $30; //@line 22930
  $295 = $ReallocAsyncCtx2 + 64 | 0; //@line 22931
  HEAP32[$295 >> 2] = $32; //@line 22932
  $296 = $ReallocAsyncCtx2 + 68 | 0; //@line 22933
  HEAP32[$296 >> 2] = $34; //@line 22934
  $297 = $ReallocAsyncCtx2 + 72 | 0; //@line 22935
  HEAP32[$297 >> 2] = $36; //@line 22936
  $298 = $ReallocAsyncCtx2 + 76 | 0; //@line 22937
  HEAP32[$298 >> 2] = $38; //@line 22938
  $299 = $ReallocAsyncCtx2 + 80 | 0; //@line 22939
  HEAP32[$299 >> 2] = $40; //@line 22940
  $300 = $ReallocAsyncCtx2 + 84 | 0; //@line 22941
  HEAP32[$300 >> 2] = $42; //@line 22942
  $301 = $ReallocAsyncCtx2 + 88 | 0; //@line 22943
  HEAP32[$301 >> 2] = $44; //@line 22944
  $302 = $ReallocAsyncCtx2 + 92 | 0; //@line 22945
  HEAP32[$302 >> 2] = $46; //@line 22946
  $303 = $ReallocAsyncCtx2 + 96 | 0; //@line 22947
  HEAP32[$303 >> 2] = $48; //@line 22948
  $304 = $ReallocAsyncCtx2 + 100 | 0; //@line 22949
  HEAP32[$304 >> 2] = $50; //@line 22950
  $305 = $ReallocAsyncCtx2 + 104 | 0; //@line 22951
  HEAP32[$305 >> 2] = $52; //@line 22952
  $306 = $ReallocAsyncCtx2 + 108 | 0; //@line 22953
  HEAP32[$306 >> 2] = $54; //@line 22954
  $307 = $ReallocAsyncCtx2 + 112 | 0; //@line 22955
  HEAP32[$307 >> 2] = $56; //@line 22956
  $308 = $ReallocAsyncCtx2 + 116 | 0; //@line 22957
  HEAP32[$308 >> 2] = $58; //@line 22958
  $309 = $ReallocAsyncCtx2 + 120 | 0; //@line 22959
  HEAP32[$309 >> 2] = $60; //@line 22960
  $310 = $ReallocAsyncCtx2 + 124 | 0; //@line 22961
  HEAP32[$310 >> 2] = $62; //@line 22962
  $311 = $ReallocAsyncCtx2 + 128 | 0; //@line 22963
  HEAP32[$311 >> 2] = $64; //@line 22964
  $312 = $ReallocAsyncCtx2 + 132 | 0; //@line 22965
  HEAP32[$312 >> 2] = $66; //@line 22966
  $313 = $ReallocAsyncCtx2 + 136 | 0; //@line 22967
  HEAP32[$313 >> 2] = $68; //@line 22968
  $314 = $ReallocAsyncCtx2 + 140 | 0; //@line 22969
  HEAP32[$314 >> 2] = $70; //@line 22970
  $315 = $ReallocAsyncCtx2 + 144 | 0; //@line 22971
  HEAP32[$315 >> 2] = $72; //@line 22972
  $316 = $ReallocAsyncCtx2 + 148 | 0; //@line 22973
  HEAP32[$316 >> 2] = $74; //@line 22974
  $317 = $ReallocAsyncCtx2 + 152 | 0; //@line 22975
  HEAP32[$317 >> 2] = $76; //@line 22976
  $318 = $ReallocAsyncCtx2 + 156 | 0; //@line 22977
  HEAP32[$318 >> 2] = $80; //@line 22978
  $319 = $ReallocAsyncCtx2 + 160 | 0; //@line 22979
  HEAP32[$319 >> 2] = $82; //@line 22980
  $320 = $ReallocAsyncCtx2 + 164 | 0; //@line 22981
  HEAP32[$320 >> 2] = $84; //@line 22982
  $321 = $ReallocAsyncCtx2 + 168 | 0; //@line 22983
  HEAP32[$321 >> 2] = $86; //@line 22984
  $322 = $ReallocAsyncCtx2 + 172 | 0; //@line 22985
  HEAP32[$322 >> 2] = $88; //@line 22986
  $323 = $ReallocAsyncCtx2 + 176 | 0; //@line 22987
  HEAP32[$323 >> 2] = $90; //@line 22988
  $324 = $ReallocAsyncCtx2 + 180 | 0; //@line 22989
  HEAP32[$324 >> 2] = $92; //@line 22990
  $325 = $ReallocAsyncCtx2 + 184 | 0; //@line 22991
  HEAP32[$325 >> 2] = $94; //@line 22992
  $326 = $ReallocAsyncCtx2 + 188 | 0; //@line 22993
  HEAP32[$326 >> 2] = $96; //@line 22994
  $327 = $ReallocAsyncCtx2 + 192 | 0; //@line 22995
  HEAP32[$327 >> 2] = $98; //@line 22996
  $328 = $ReallocAsyncCtx2 + 196 | 0; //@line 22997
  HEAP32[$328 >> 2] = $100; //@line 22998
  $329 = $ReallocAsyncCtx2 + 200 | 0; //@line 22999
  HEAP32[$329 >> 2] = $102; //@line 23000
  $330 = $ReallocAsyncCtx2 + 204 | 0; //@line 23001
  HEAP32[$330 >> 2] = $104; //@line 23002
  $331 = $ReallocAsyncCtx2 + 208 | 0; //@line 23003
  HEAP32[$331 >> 2] = $106; //@line 23004
  $332 = $ReallocAsyncCtx2 + 212 | 0; //@line 23005
  HEAP8[$332 >> 0] = $108; //@line 23006
  $333 = $ReallocAsyncCtx2 + 213 | 0; //@line 23007
  HEAP8[$333 >> 0] = $110; //@line 23008
  $334 = $ReallocAsyncCtx2 + 216 | 0; //@line 23009
  HEAP32[$334 >> 2] = $112; //@line 23010
  $335 = $ReallocAsyncCtx2 + 220 | 0; //@line 23011
  HEAP32[$335 >> 2] = $114; //@line 23012
  $336 = $ReallocAsyncCtx2 + 224 | 0; //@line 23013
  HEAP8[$336 >> 0] = $116; //@line 23014
  $337 = $ReallocAsyncCtx2 + 228 | 0; //@line 23015
  HEAP32[$337 >> 2] = $118; //@line 23016
  $338 = $ReallocAsyncCtx2 + 232 | 0; //@line 23017
  HEAP32[$338 >> 2] = $120; //@line 23018
  $339 = $ReallocAsyncCtx2 + 236 | 0; //@line 23019
  HEAP32[$339 >> 2] = $122; //@line 23020
  $340 = $ReallocAsyncCtx2 + 240 | 0; //@line 23021
  HEAP32[$340 >> 2] = $124; //@line 23022
  $341 = $ReallocAsyncCtx2 + 244 | 0; //@line 23023
  HEAP32[$341 >> 2] = $126; //@line 23024
  $342 = $ReallocAsyncCtx2 + 248 | 0; //@line 23025
  HEAP32[$342 >> 2] = $128; //@line 23026
  $343 = $ReallocAsyncCtx2 + 252 | 0; //@line 23027
  HEAP32[$343 >> 2] = $130; //@line 23028
  $344 = $ReallocAsyncCtx2 + 256 | 0; //@line 23029
  HEAP32[$344 >> 2] = $132; //@line 23030
  $345 = $ReallocAsyncCtx2 + 260 | 0; //@line 23031
  HEAP32[$345 >> 2] = $134; //@line 23032
  $346 = $ReallocAsyncCtx2 + 264 | 0; //@line 23033
  HEAP32[$346 >> 2] = $136; //@line 23034
  sp = STACKTOP; //@line 23035
  return;
 } else if ((label | 0) == 14) {
  HEAP8[$126 >> 0] = HEAP8[$120 + ($139 & 255) >> 0] | 0; //@line 23043
  HEAP32[$98 >> 2] = $54; //@line 23044
  HEAP32[$82 >> 2] = (HEAPU8[$120 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$120 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$120 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 23065
  HEAP32[$88 >> 2] = 0; //@line 23066
  $387 = $$0$be + 6 << 24 >> 24; //@line 23067
  HEAP8[$62 >> 0] = HEAP8[$120 + ($$0$be + 5 & 255) >> 0] | 0; //@line 23071
  $393 = HEAP32[(HEAP32[$74 >> 2] | 0) + 8 >> 2] | 0; //@line 23074
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(268) | 0; //@line 23075
  $394 = FUNCTION_TABLE_iii[$393 & 31]($100, $94) | 0; //@line 23076
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 506; //@line 23079
   $395 = $ReallocAsyncCtx3 + 4 | 0; //@line 23080
   HEAP32[$395 >> 2] = $2; //@line 23081
   $396 = $ReallocAsyncCtx3 + 8 | 0; //@line 23082
   HEAP32[$396 >> 2] = $4; //@line 23083
   $397 = $ReallocAsyncCtx3 + 12 | 0; //@line 23084
   HEAP32[$397 >> 2] = $6; //@line 23085
   $398 = $ReallocAsyncCtx3 + 16 | 0; //@line 23086
   HEAP32[$398 >> 2] = $8; //@line 23087
   $399 = $ReallocAsyncCtx3 + 20 | 0; //@line 23088
   HEAP32[$399 >> 2] = $10; //@line 23089
   $400 = $ReallocAsyncCtx3 + 24 | 0; //@line 23090
   HEAP32[$400 >> 2] = $12; //@line 23091
   $401 = $ReallocAsyncCtx3 + 28 | 0; //@line 23092
   HEAP32[$401 >> 2] = $14; //@line 23093
   $402 = $ReallocAsyncCtx3 + 32 | 0; //@line 23094
   HEAP32[$402 >> 2] = $16; //@line 23095
   $403 = $ReallocAsyncCtx3 + 36 | 0; //@line 23096
   HEAP32[$403 >> 2] = $18; //@line 23097
   $404 = $ReallocAsyncCtx3 + 40 | 0; //@line 23098
   HEAP32[$404 >> 2] = $20; //@line 23099
   $405 = $ReallocAsyncCtx3 + 44 | 0; //@line 23100
   HEAP32[$405 >> 2] = $22; //@line 23101
   $406 = $ReallocAsyncCtx3 + 48 | 0; //@line 23102
   HEAP32[$406 >> 2] = $24; //@line 23103
   $407 = $ReallocAsyncCtx3 + 52 | 0; //@line 23104
   HEAP32[$407 >> 2] = $28; //@line 23105
   $408 = $ReallocAsyncCtx3 + 56 | 0; //@line 23106
   HEAP32[$408 >> 2] = $30; //@line 23107
   $409 = $ReallocAsyncCtx3 + 60 | 0; //@line 23108
   HEAP32[$409 >> 2] = $32; //@line 23109
   $410 = $ReallocAsyncCtx3 + 64 | 0; //@line 23110
   HEAP32[$410 >> 2] = $34; //@line 23111
   $411 = $ReallocAsyncCtx3 + 68 | 0; //@line 23112
   HEAP32[$411 >> 2] = $36; //@line 23113
   $412 = $ReallocAsyncCtx3 + 72 | 0; //@line 23114
   HEAP32[$412 >> 2] = $38; //@line 23115
   $413 = $ReallocAsyncCtx3 + 76 | 0; //@line 23116
   HEAP32[$413 >> 2] = $40; //@line 23117
   $414 = $ReallocAsyncCtx3 + 80 | 0; //@line 23118
   HEAP32[$414 >> 2] = $42; //@line 23119
   $415 = $ReallocAsyncCtx3 + 84 | 0; //@line 23120
   HEAP32[$415 >> 2] = $44; //@line 23121
   $416 = $ReallocAsyncCtx3 + 88 | 0; //@line 23122
   HEAP8[$416 >> 0] = $387; //@line 23123
   $417 = $ReallocAsyncCtx3 + 92 | 0; //@line 23124
   HEAP32[$417 >> 2] = $46; //@line 23125
   $418 = $ReallocAsyncCtx3 + 96 | 0; //@line 23126
   HEAP32[$418 >> 2] = $48; //@line 23127
   $419 = $ReallocAsyncCtx3 + 100 | 0; //@line 23128
   HEAP32[$419 >> 2] = $50; //@line 23129
   $420 = $ReallocAsyncCtx3 + 104 | 0; //@line 23130
   HEAP32[$420 >> 2] = $52; //@line 23131
   $421 = $ReallocAsyncCtx3 + 108 | 0; //@line 23132
   HEAP32[$421 >> 2] = $54; //@line 23133
   $422 = $ReallocAsyncCtx3 + 112 | 0; //@line 23134
   HEAP32[$422 >> 2] = $56; //@line 23135
   $423 = $ReallocAsyncCtx3 + 116 | 0; //@line 23136
   HEAP32[$423 >> 2] = $58; //@line 23137
   $424 = $ReallocAsyncCtx3 + 120 | 0; //@line 23138
   HEAP32[$424 >> 2] = $60; //@line 23139
   $425 = $ReallocAsyncCtx3 + 124 | 0; //@line 23140
   HEAP32[$425 >> 2] = $62; //@line 23141
   $426 = $ReallocAsyncCtx3 + 128 | 0; //@line 23142
   HEAP32[$426 >> 2] = $64; //@line 23143
   $427 = $ReallocAsyncCtx3 + 132 | 0; //@line 23144
   HEAP32[$427 >> 2] = $66; //@line 23145
   $428 = $ReallocAsyncCtx3 + 136 | 0; //@line 23146
   HEAP32[$428 >> 2] = $68; //@line 23147
   $429 = $ReallocAsyncCtx3 + 140 | 0; //@line 23148
   HEAP32[$429 >> 2] = $70; //@line 23149
   $430 = $ReallocAsyncCtx3 + 144 | 0; //@line 23150
   HEAP32[$430 >> 2] = $72; //@line 23151
   $431 = $ReallocAsyncCtx3 + 148 | 0; //@line 23152
   HEAP32[$431 >> 2] = $74; //@line 23153
   $432 = $ReallocAsyncCtx3 + 152 | 0; //@line 23154
   HEAP32[$432 >> 2] = $76; //@line 23155
   $433 = $ReallocAsyncCtx3 + 156 | 0; //@line 23156
   HEAP32[$433 >> 2] = $80; //@line 23157
   $434 = $ReallocAsyncCtx3 + 160 | 0; //@line 23158
   HEAP32[$434 >> 2] = $82; //@line 23159
   $435 = $ReallocAsyncCtx3 + 164 | 0; //@line 23160
   HEAP32[$435 >> 2] = $84; //@line 23161
   $436 = $ReallocAsyncCtx3 + 168 | 0; //@line 23162
   HEAP32[$436 >> 2] = $86; //@line 23163
   $437 = $ReallocAsyncCtx3 + 172 | 0; //@line 23164
   HEAP32[$437 >> 2] = $88; //@line 23165
   $438 = $ReallocAsyncCtx3 + 176 | 0; //@line 23166
   HEAP32[$438 >> 2] = $90; //@line 23167
   $439 = $ReallocAsyncCtx3 + 180 | 0; //@line 23168
   HEAP32[$439 >> 2] = $92; //@line 23169
   $440 = $ReallocAsyncCtx3 + 184 | 0; //@line 23170
   HEAP32[$440 >> 2] = $94; //@line 23171
   $441 = $ReallocAsyncCtx3 + 188 | 0; //@line 23172
   HEAP32[$441 >> 2] = $96; //@line 23173
   $442 = $ReallocAsyncCtx3 + 192 | 0; //@line 23174
   HEAP32[$442 >> 2] = $98; //@line 23175
   $443 = $ReallocAsyncCtx3 + 196 | 0; //@line 23176
   HEAP32[$443 >> 2] = $100; //@line 23177
   $444 = $ReallocAsyncCtx3 + 200 | 0; //@line 23178
   HEAP32[$444 >> 2] = $102; //@line 23179
   $445 = $ReallocAsyncCtx3 + 204 | 0; //@line 23180
   HEAP32[$445 >> 2] = $104; //@line 23181
   $446 = $ReallocAsyncCtx3 + 208 | 0; //@line 23182
   HEAP32[$446 >> 2] = $106; //@line 23183
   $447 = $ReallocAsyncCtx3 + 212 | 0; //@line 23184
   HEAP8[$447 >> 0] = $108; //@line 23185
   $448 = $ReallocAsyncCtx3 + 213 | 0; //@line 23186
   HEAP8[$448 >> 0] = $110; //@line 23187
   $449 = $ReallocAsyncCtx3 + 216 | 0; //@line 23188
   HEAP32[$449 >> 2] = $112; //@line 23189
   $450 = $ReallocAsyncCtx3 + 220 | 0; //@line 23190
   HEAP32[$450 >> 2] = $114; //@line 23191
   $451 = $ReallocAsyncCtx3 + 224 | 0; //@line 23192
   HEAP8[$451 >> 0] = $116; //@line 23193
   $452 = $ReallocAsyncCtx3 + 228 | 0; //@line 23194
   HEAP32[$452 >> 2] = $118; //@line 23195
   $453 = $ReallocAsyncCtx3 + 232 | 0; //@line 23196
   HEAP32[$453 >> 2] = $120; //@line 23197
   $454 = $ReallocAsyncCtx3 + 236 | 0; //@line 23198
   HEAP32[$454 >> 2] = $122; //@line 23199
   $455 = $ReallocAsyncCtx3 + 240 | 0; //@line 23200
   HEAP32[$455 >> 2] = $124; //@line 23201
   $456 = $ReallocAsyncCtx3 + 244 | 0; //@line 23202
   HEAP32[$456 >> 2] = $126; //@line 23203
   $457 = $ReallocAsyncCtx3 + 248 | 0; //@line 23204
   HEAP32[$457 >> 2] = $128; //@line 23205
   $458 = $ReallocAsyncCtx3 + 252 | 0; //@line 23206
   HEAP32[$458 >> 2] = $130; //@line 23207
   $459 = $ReallocAsyncCtx3 + 256 | 0; //@line 23208
   HEAP32[$459 >> 2] = $132; //@line 23209
   $460 = $ReallocAsyncCtx3 + 260 | 0; //@line 23210
   HEAP32[$460 >> 2] = $134; //@line 23211
   $461 = $ReallocAsyncCtx3 + 264 | 0; //@line 23212
   HEAP32[$461 >> 2] = $136; //@line 23213
   sp = STACKTOP; //@line 23214
   return;
  }
  HEAP8[___async_retval >> 0] = $394; //@line 23218
  ___async_unwind = 0; //@line 23219
  HEAP32[$ReallocAsyncCtx3 >> 2] = 506; //@line 23220
  $395 = $ReallocAsyncCtx3 + 4 | 0; //@line 23221
  HEAP32[$395 >> 2] = $2; //@line 23222
  $396 = $ReallocAsyncCtx3 + 8 | 0; //@line 23223
  HEAP32[$396 >> 2] = $4; //@line 23224
  $397 = $ReallocAsyncCtx3 + 12 | 0; //@line 23225
  HEAP32[$397 >> 2] = $6; //@line 23226
  $398 = $ReallocAsyncCtx3 + 16 | 0; //@line 23227
  HEAP32[$398 >> 2] = $8; //@line 23228
  $399 = $ReallocAsyncCtx3 + 20 | 0; //@line 23229
  HEAP32[$399 >> 2] = $10; //@line 23230
  $400 = $ReallocAsyncCtx3 + 24 | 0; //@line 23231
  HEAP32[$400 >> 2] = $12; //@line 23232
  $401 = $ReallocAsyncCtx3 + 28 | 0; //@line 23233
  HEAP32[$401 >> 2] = $14; //@line 23234
  $402 = $ReallocAsyncCtx3 + 32 | 0; //@line 23235
  HEAP32[$402 >> 2] = $16; //@line 23236
  $403 = $ReallocAsyncCtx3 + 36 | 0; //@line 23237
  HEAP32[$403 >> 2] = $18; //@line 23238
  $404 = $ReallocAsyncCtx3 + 40 | 0; //@line 23239
  HEAP32[$404 >> 2] = $20; //@line 23240
  $405 = $ReallocAsyncCtx3 + 44 | 0; //@line 23241
  HEAP32[$405 >> 2] = $22; //@line 23242
  $406 = $ReallocAsyncCtx3 + 48 | 0; //@line 23243
  HEAP32[$406 >> 2] = $24; //@line 23244
  $407 = $ReallocAsyncCtx3 + 52 | 0; //@line 23245
  HEAP32[$407 >> 2] = $28; //@line 23246
  $408 = $ReallocAsyncCtx3 + 56 | 0; //@line 23247
  HEAP32[$408 >> 2] = $30; //@line 23248
  $409 = $ReallocAsyncCtx3 + 60 | 0; //@line 23249
  HEAP32[$409 >> 2] = $32; //@line 23250
  $410 = $ReallocAsyncCtx3 + 64 | 0; //@line 23251
  HEAP32[$410 >> 2] = $34; //@line 23252
  $411 = $ReallocAsyncCtx3 + 68 | 0; //@line 23253
  HEAP32[$411 >> 2] = $36; //@line 23254
  $412 = $ReallocAsyncCtx3 + 72 | 0; //@line 23255
  HEAP32[$412 >> 2] = $38; //@line 23256
  $413 = $ReallocAsyncCtx3 + 76 | 0; //@line 23257
  HEAP32[$413 >> 2] = $40; //@line 23258
  $414 = $ReallocAsyncCtx3 + 80 | 0; //@line 23259
  HEAP32[$414 >> 2] = $42; //@line 23260
  $415 = $ReallocAsyncCtx3 + 84 | 0; //@line 23261
  HEAP32[$415 >> 2] = $44; //@line 23262
  $416 = $ReallocAsyncCtx3 + 88 | 0; //@line 23263
  HEAP8[$416 >> 0] = $387; //@line 23264
  $417 = $ReallocAsyncCtx3 + 92 | 0; //@line 23265
  HEAP32[$417 >> 2] = $46; //@line 23266
  $418 = $ReallocAsyncCtx3 + 96 | 0; //@line 23267
  HEAP32[$418 >> 2] = $48; //@line 23268
  $419 = $ReallocAsyncCtx3 + 100 | 0; //@line 23269
  HEAP32[$419 >> 2] = $50; //@line 23270
  $420 = $ReallocAsyncCtx3 + 104 | 0; //@line 23271
  HEAP32[$420 >> 2] = $52; //@line 23272
  $421 = $ReallocAsyncCtx3 + 108 | 0; //@line 23273
  HEAP32[$421 >> 2] = $54; //@line 23274
  $422 = $ReallocAsyncCtx3 + 112 | 0; //@line 23275
  HEAP32[$422 >> 2] = $56; //@line 23276
  $423 = $ReallocAsyncCtx3 + 116 | 0; //@line 23277
  HEAP32[$423 >> 2] = $58; //@line 23278
  $424 = $ReallocAsyncCtx3 + 120 | 0; //@line 23279
  HEAP32[$424 >> 2] = $60; //@line 23280
  $425 = $ReallocAsyncCtx3 + 124 | 0; //@line 23281
  HEAP32[$425 >> 2] = $62; //@line 23282
  $426 = $ReallocAsyncCtx3 + 128 | 0; //@line 23283
  HEAP32[$426 >> 2] = $64; //@line 23284
  $427 = $ReallocAsyncCtx3 + 132 | 0; //@line 23285
  HEAP32[$427 >> 2] = $66; //@line 23286
  $428 = $ReallocAsyncCtx3 + 136 | 0; //@line 23287
  HEAP32[$428 >> 2] = $68; //@line 23288
  $429 = $ReallocAsyncCtx3 + 140 | 0; //@line 23289
  HEAP32[$429 >> 2] = $70; //@line 23290
  $430 = $ReallocAsyncCtx3 + 144 | 0; //@line 23291
  HEAP32[$430 >> 2] = $72; //@line 23292
  $431 = $ReallocAsyncCtx3 + 148 | 0; //@line 23293
  HEAP32[$431 >> 2] = $74; //@line 23294
  $432 = $ReallocAsyncCtx3 + 152 | 0; //@line 23295
  HEAP32[$432 >> 2] = $76; //@line 23296
  $433 = $ReallocAsyncCtx3 + 156 | 0; //@line 23297
  HEAP32[$433 >> 2] = $80; //@line 23298
  $434 = $ReallocAsyncCtx3 + 160 | 0; //@line 23299
  HEAP32[$434 >> 2] = $82; //@line 23300
  $435 = $ReallocAsyncCtx3 + 164 | 0; //@line 23301
  HEAP32[$435 >> 2] = $84; //@line 23302
  $436 = $ReallocAsyncCtx3 + 168 | 0; //@line 23303
  HEAP32[$436 >> 2] = $86; //@line 23304
  $437 = $ReallocAsyncCtx3 + 172 | 0; //@line 23305
  HEAP32[$437 >> 2] = $88; //@line 23306
  $438 = $ReallocAsyncCtx3 + 176 | 0; //@line 23307
  HEAP32[$438 >> 2] = $90; //@line 23308
  $439 = $ReallocAsyncCtx3 + 180 | 0; //@line 23309
  HEAP32[$439 >> 2] = $92; //@line 23310
  $440 = $ReallocAsyncCtx3 + 184 | 0; //@line 23311
  HEAP32[$440 >> 2] = $94; //@line 23312
  $441 = $ReallocAsyncCtx3 + 188 | 0; //@line 23313
  HEAP32[$441 >> 2] = $96; //@line 23314
  $442 = $ReallocAsyncCtx3 + 192 | 0; //@line 23315
  HEAP32[$442 >> 2] = $98; //@line 23316
  $443 = $ReallocAsyncCtx3 + 196 | 0; //@line 23317
  HEAP32[$443 >> 2] = $100; //@line 23318
  $444 = $ReallocAsyncCtx3 + 200 | 0; //@line 23319
  HEAP32[$444 >> 2] = $102; //@line 23320
  $445 = $ReallocAsyncCtx3 + 204 | 0; //@line 23321
  HEAP32[$445 >> 2] = $104; //@line 23322
  $446 = $ReallocAsyncCtx3 + 208 | 0; //@line 23323
  HEAP32[$446 >> 2] = $106; //@line 23324
  $447 = $ReallocAsyncCtx3 + 212 | 0; //@line 23325
  HEAP8[$447 >> 0] = $108; //@line 23326
  $448 = $ReallocAsyncCtx3 + 213 | 0; //@line 23327
  HEAP8[$448 >> 0] = $110; //@line 23328
  $449 = $ReallocAsyncCtx3 + 216 | 0; //@line 23329
  HEAP32[$449 >> 2] = $112; //@line 23330
  $450 = $ReallocAsyncCtx3 + 220 | 0; //@line 23331
  HEAP32[$450 >> 2] = $114; //@line 23332
  $451 = $ReallocAsyncCtx3 + 224 | 0; //@line 23333
  HEAP8[$451 >> 0] = $116; //@line 23334
  $452 = $ReallocAsyncCtx3 + 228 | 0; //@line 23335
  HEAP32[$452 >> 2] = $118; //@line 23336
  $453 = $ReallocAsyncCtx3 + 232 | 0; //@line 23337
  HEAP32[$453 >> 2] = $120; //@line 23338
  $454 = $ReallocAsyncCtx3 + 236 | 0; //@line 23339
  HEAP32[$454 >> 2] = $122; //@line 23340
  $455 = $ReallocAsyncCtx3 + 240 | 0; //@line 23341
  HEAP32[$455 >> 2] = $124; //@line 23342
  $456 = $ReallocAsyncCtx3 + 244 | 0; //@line 23343
  HEAP32[$456 >> 2] = $126; //@line 23344
  $457 = $ReallocAsyncCtx3 + 248 | 0; //@line 23345
  HEAP32[$457 >> 2] = $128; //@line 23346
  $458 = $ReallocAsyncCtx3 + 252 | 0; //@line 23347
  HEAP32[$458 >> 2] = $130; //@line 23348
  $459 = $ReallocAsyncCtx3 + 256 | 0; //@line 23349
  HEAP32[$459 >> 2] = $132; //@line 23350
  $460 = $ReallocAsyncCtx3 + 260 | 0; //@line 23351
  HEAP32[$460 >> 2] = $134; //@line 23352
  $461 = $ReallocAsyncCtx3 + 264 | 0; //@line 23353
  HEAP32[$461 >> 2] = $136; //@line 23354
  sp = STACKTOP; //@line 23355
  return;
 } else if ((label | 0) == 19) {
  $480 = $$0$be + 2 << 24 >> 24; //@line 23359
  $483 = HEAP8[$120 + ($139 & 255) >> 0] | 0; //@line 23362
  HEAP8[$34 >> 0] = 0; //@line 23363
  $484 = $483 & 255; //@line 23364
  HEAP8[$40 >> 0] = $484 >>> 5 & 1; //@line 23368
  if ($484 & 16 | 0) {
   HEAP8[$34 >> 0] = 1; //@line 23372
  }
  HEAP8[$22 >> 0] = $484 & 15; //@line 23376
  $493 = HEAP32[(HEAP32[$32 >> 2] | 0) + 44 >> 2] | 0; //@line 23379
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(272) | 0; //@line 23380
  $494 = FUNCTION_TABLE_iii[$493 & 31]($100, $68) | 0; //@line 23381
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 507; //@line 23384
   $495 = $ReallocAsyncCtx4 + 4 | 0; //@line 23385
   HEAP32[$495 >> 2] = $2; //@line 23386
   $496 = $ReallocAsyncCtx4 + 8 | 0; //@line 23387
   HEAP32[$496 >> 2] = $4; //@line 23388
   $497 = $ReallocAsyncCtx4 + 12 | 0; //@line 23389
   HEAP32[$497 >> 2] = $6; //@line 23390
   $498 = $ReallocAsyncCtx4 + 16 | 0; //@line 23391
   HEAP32[$498 >> 2] = $8; //@line 23392
   $499 = $ReallocAsyncCtx4 + 20 | 0; //@line 23393
   HEAP32[$499 >> 2] = $10; //@line 23394
   $500 = $ReallocAsyncCtx4 + 24 | 0; //@line 23395
   HEAP32[$500 >> 2] = $12; //@line 23396
   $501 = $ReallocAsyncCtx4 + 28 | 0; //@line 23397
   HEAP32[$501 >> 2] = $14; //@line 23398
   $502 = $ReallocAsyncCtx4 + 32 | 0; //@line 23399
   HEAP32[$502 >> 2] = $16; //@line 23400
   $503 = $ReallocAsyncCtx4 + 36 | 0; //@line 23401
   HEAP32[$503 >> 2] = $18; //@line 23402
   $504 = $ReallocAsyncCtx4 + 40 | 0; //@line 23403
   HEAP32[$504 >> 2] = $20; //@line 23404
   $505 = $ReallocAsyncCtx4 + 44 | 0; //@line 23405
   HEAP32[$505 >> 2] = $22; //@line 23406
   $506 = $ReallocAsyncCtx4 + 48 | 0; //@line 23407
   HEAP32[$506 >> 2] = $24; //@line 23408
   $507 = $ReallocAsyncCtx4 + 52 | 0; //@line 23409
   HEAP8[$507 >> 0] = $480; //@line 23410
   $508 = $ReallocAsyncCtx4 + 56 | 0; //@line 23411
   HEAP32[$508 >> 2] = $28; //@line 23412
   $509 = $ReallocAsyncCtx4 + 60 | 0; //@line 23413
   HEAP32[$509 >> 2] = $30; //@line 23414
   $510 = $ReallocAsyncCtx4 + 64 | 0; //@line 23415
   HEAP32[$510 >> 2] = $32; //@line 23416
   $511 = $ReallocAsyncCtx4 + 68 | 0; //@line 23417
   HEAP32[$511 >> 2] = $34; //@line 23418
   $512 = $ReallocAsyncCtx4 + 72 | 0; //@line 23419
   HEAP32[$512 >> 2] = $36; //@line 23420
   $513 = $ReallocAsyncCtx4 + 76 | 0; //@line 23421
   HEAP32[$513 >> 2] = $38; //@line 23422
   $514 = $ReallocAsyncCtx4 + 80 | 0; //@line 23423
   HEAP32[$514 >> 2] = $40; //@line 23424
   $515 = $ReallocAsyncCtx4 + 84 | 0; //@line 23425
   HEAP32[$515 >> 2] = $42; //@line 23426
   $516 = $ReallocAsyncCtx4 + 88 | 0; //@line 23427
   HEAP32[$516 >> 2] = $44; //@line 23428
   $517 = $ReallocAsyncCtx4 + 92 | 0; //@line 23429
   HEAP32[$517 >> 2] = $46; //@line 23430
   $518 = $ReallocAsyncCtx4 + 96 | 0; //@line 23431
   HEAP32[$518 >> 2] = $48; //@line 23432
   $519 = $ReallocAsyncCtx4 + 100 | 0; //@line 23433
   HEAP32[$519 >> 2] = $50; //@line 23434
   $520 = $ReallocAsyncCtx4 + 104 | 0; //@line 23435
   HEAP32[$520 >> 2] = $52; //@line 23436
   $521 = $ReallocAsyncCtx4 + 108 | 0; //@line 23437
   HEAP32[$521 >> 2] = $54; //@line 23438
   $522 = $ReallocAsyncCtx4 + 112 | 0; //@line 23439
   HEAP32[$522 >> 2] = $56; //@line 23440
   $523 = $ReallocAsyncCtx4 + 116 | 0; //@line 23441
   HEAP32[$523 >> 2] = $58; //@line 23442
   $524 = $ReallocAsyncCtx4 + 120 | 0; //@line 23443
   HEAP32[$524 >> 2] = $60; //@line 23444
   $525 = $ReallocAsyncCtx4 + 124 | 0; //@line 23445
   HEAP32[$525 >> 2] = $62; //@line 23446
   $526 = $ReallocAsyncCtx4 + 128 | 0; //@line 23447
   HEAP32[$526 >> 2] = $64; //@line 23448
   $527 = $ReallocAsyncCtx4 + 132 | 0; //@line 23449
   HEAP32[$527 >> 2] = $66; //@line 23450
   $528 = $ReallocAsyncCtx4 + 136 | 0; //@line 23451
   HEAP32[$528 >> 2] = $68; //@line 23452
   $529 = $ReallocAsyncCtx4 + 140 | 0; //@line 23453
   HEAP32[$529 >> 2] = $70; //@line 23454
   $530 = $ReallocAsyncCtx4 + 144 | 0; //@line 23455
   HEAP32[$530 >> 2] = $72; //@line 23456
   $531 = $ReallocAsyncCtx4 + 148 | 0; //@line 23457
   HEAP32[$531 >> 2] = $74; //@line 23458
   $532 = $ReallocAsyncCtx4 + 152 | 0; //@line 23459
   HEAP32[$532 >> 2] = $76; //@line 23460
   $533 = $ReallocAsyncCtx4 + 156 | 0; //@line 23461
   HEAP32[$533 >> 2] = $$096$be; //@line 23462
   $534 = $ReallocAsyncCtx4 + 160 | 0; //@line 23463
   HEAP32[$534 >> 2] = $80; //@line 23464
   $535 = $ReallocAsyncCtx4 + 164 | 0; //@line 23465
   HEAP32[$535 >> 2] = $82; //@line 23466
   $536 = $ReallocAsyncCtx4 + 168 | 0; //@line 23467
   HEAP32[$536 >> 2] = $84; //@line 23468
   $537 = $ReallocAsyncCtx4 + 172 | 0; //@line 23469
   HEAP32[$537 >> 2] = $86; //@line 23470
   $538 = $ReallocAsyncCtx4 + 176 | 0; //@line 23471
   HEAP32[$538 >> 2] = $88; //@line 23472
   $539 = $ReallocAsyncCtx4 + 180 | 0; //@line 23473
   HEAP32[$539 >> 2] = $90; //@line 23474
   $540 = $ReallocAsyncCtx4 + 184 | 0; //@line 23475
   HEAP32[$540 >> 2] = $92; //@line 23476
   $541 = $ReallocAsyncCtx4 + 188 | 0; //@line 23477
   HEAP32[$541 >> 2] = $94; //@line 23478
   $542 = $ReallocAsyncCtx4 + 192 | 0; //@line 23479
   HEAP32[$542 >> 2] = $96; //@line 23480
   $543 = $ReallocAsyncCtx4 + 196 | 0; //@line 23481
   HEAP32[$543 >> 2] = $98; //@line 23482
   $544 = $ReallocAsyncCtx4 + 200 | 0; //@line 23483
   HEAP32[$544 >> 2] = $100; //@line 23484
   $545 = $ReallocAsyncCtx4 + 204 | 0; //@line 23485
   HEAP32[$545 >> 2] = $102; //@line 23486
   $546 = $ReallocAsyncCtx4 + 208 | 0; //@line 23487
   HEAP32[$546 >> 2] = $104; //@line 23488
   $547 = $ReallocAsyncCtx4 + 212 | 0; //@line 23489
   HEAP32[$547 >> 2] = $106; //@line 23490
   $548 = $ReallocAsyncCtx4 + 216 | 0; //@line 23491
   HEAP8[$548 >> 0] = $108; //@line 23492
   $549 = $ReallocAsyncCtx4 + 217 | 0; //@line 23493
   HEAP8[$549 >> 0] = $110; //@line 23494
   $550 = $ReallocAsyncCtx4 + 220 | 0; //@line 23495
   HEAP32[$550 >> 2] = $112; //@line 23496
   $551 = $ReallocAsyncCtx4 + 224 | 0; //@line 23497
   HEAP32[$551 >> 2] = $114; //@line 23498
   $552 = $ReallocAsyncCtx4 + 228 | 0; //@line 23499
   HEAP8[$552 >> 0] = $116; //@line 23500
   $553 = $ReallocAsyncCtx4 + 232 | 0; //@line 23501
   HEAP32[$553 >> 2] = $118; //@line 23502
   $554 = $ReallocAsyncCtx4 + 236 | 0; //@line 23503
   HEAP32[$554 >> 2] = $120; //@line 23504
   $555 = $ReallocAsyncCtx4 + 240 | 0; //@line 23505
   HEAP32[$555 >> 2] = $122; //@line 23506
   $556 = $ReallocAsyncCtx4 + 244 | 0; //@line 23507
   HEAP32[$556 >> 2] = $124; //@line 23508
   $557 = $ReallocAsyncCtx4 + 248 | 0; //@line 23509
   HEAP32[$557 >> 2] = $126; //@line 23510
   $558 = $ReallocAsyncCtx4 + 252 | 0; //@line 23511
   HEAP32[$558 >> 2] = $128; //@line 23512
   $559 = $ReallocAsyncCtx4 + 256 | 0; //@line 23513
   HEAP32[$559 >> 2] = $130; //@line 23514
   $560 = $ReallocAsyncCtx4 + 260 | 0; //@line 23515
   HEAP32[$560 >> 2] = $132; //@line 23516
   $561 = $ReallocAsyncCtx4 + 264 | 0; //@line 23517
   HEAP32[$561 >> 2] = $134; //@line 23518
   $562 = $ReallocAsyncCtx4 + 268 | 0; //@line 23519
   HEAP32[$562 >> 2] = $136; //@line 23520
   sp = STACKTOP; //@line 23521
   return;
  }
  HEAP8[___async_retval >> 0] = $494 & 1; //@line 23526
  ___async_unwind = 0; //@line 23527
  HEAP32[$ReallocAsyncCtx4 >> 2] = 507; //@line 23528
  $495 = $ReallocAsyncCtx4 + 4 | 0; //@line 23529
  HEAP32[$495 >> 2] = $2; //@line 23530
  $496 = $ReallocAsyncCtx4 + 8 | 0; //@line 23531
  HEAP32[$496 >> 2] = $4; //@line 23532
  $497 = $ReallocAsyncCtx4 + 12 | 0; //@line 23533
  HEAP32[$497 >> 2] = $6; //@line 23534
  $498 = $ReallocAsyncCtx4 + 16 | 0; //@line 23535
  HEAP32[$498 >> 2] = $8; //@line 23536
  $499 = $ReallocAsyncCtx4 + 20 | 0; //@line 23537
  HEAP32[$499 >> 2] = $10; //@line 23538
  $500 = $ReallocAsyncCtx4 + 24 | 0; //@line 23539
  HEAP32[$500 >> 2] = $12; //@line 23540
  $501 = $ReallocAsyncCtx4 + 28 | 0; //@line 23541
  HEAP32[$501 >> 2] = $14; //@line 23542
  $502 = $ReallocAsyncCtx4 + 32 | 0; //@line 23543
  HEAP32[$502 >> 2] = $16; //@line 23544
  $503 = $ReallocAsyncCtx4 + 36 | 0; //@line 23545
  HEAP32[$503 >> 2] = $18; //@line 23546
  $504 = $ReallocAsyncCtx4 + 40 | 0; //@line 23547
  HEAP32[$504 >> 2] = $20; //@line 23548
  $505 = $ReallocAsyncCtx4 + 44 | 0; //@line 23549
  HEAP32[$505 >> 2] = $22; //@line 23550
  $506 = $ReallocAsyncCtx4 + 48 | 0; //@line 23551
  HEAP32[$506 >> 2] = $24; //@line 23552
  $507 = $ReallocAsyncCtx4 + 52 | 0; //@line 23553
  HEAP8[$507 >> 0] = $480; //@line 23554
  $508 = $ReallocAsyncCtx4 + 56 | 0; //@line 23555
  HEAP32[$508 >> 2] = $28; //@line 23556
  $509 = $ReallocAsyncCtx4 + 60 | 0; //@line 23557
  HEAP32[$509 >> 2] = $30; //@line 23558
  $510 = $ReallocAsyncCtx4 + 64 | 0; //@line 23559
  HEAP32[$510 >> 2] = $32; //@line 23560
  $511 = $ReallocAsyncCtx4 + 68 | 0; //@line 23561
  HEAP32[$511 >> 2] = $34; //@line 23562
  $512 = $ReallocAsyncCtx4 + 72 | 0; //@line 23563
  HEAP32[$512 >> 2] = $36; //@line 23564
  $513 = $ReallocAsyncCtx4 + 76 | 0; //@line 23565
  HEAP32[$513 >> 2] = $38; //@line 23566
  $514 = $ReallocAsyncCtx4 + 80 | 0; //@line 23567
  HEAP32[$514 >> 2] = $40; //@line 23568
  $515 = $ReallocAsyncCtx4 + 84 | 0; //@line 23569
  HEAP32[$515 >> 2] = $42; //@line 23570
  $516 = $ReallocAsyncCtx4 + 88 | 0; //@line 23571
  HEAP32[$516 >> 2] = $44; //@line 23572
  $517 = $ReallocAsyncCtx4 + 92 | 0; //@line 23573
  HEAP32[$517 >> 2] = $46; //@line 23574
  $518 = $ReallocAsyncCtx4 + 96 | 0; //@line 23575
  HEAP32[$518 >> 2] = $48; //@line 23576
  $519 = $ReallocAsyncCtx4 + 100 | 0; //@line 23577
  HEAP32[$519 >> 2] = $50; //@line 23578
  $520 = $ReallocAsyncCtx4 + 104 | 0; //@line 23579
  HEAP32[$520 >> 2] = $52; //@line 23580
  $521 = $ReallocAsyncCtx4 + 108 | 0; //@line 23581
  HEAP32[$521 >> 2] = $54; //@line 23582
  $522 = $ReallocAsyncCtx4 + 112 | 0; //@line 23583
  HEAP32[$522 >> 2] = $56; //@line 23584
  $523 = $ReallocAsyncCtx4 + 116 | 0; //@line 23585
  HEAP32[$523 >> 2] = $58; //@line 23586
  $524 = $ReallocAsyncCtx4 + 120 | 0; //@line 23587
  HEAP32[$524 >> 2] = $60; //@line 23588
  $525 = $ReallocAsyncCtx4 + 124 | 0; //@line 23589
  HEAP32[$525 >> 2] = $62; //@line 23590
  $526 = $ReallocAsyncCtx4 + 128 | 0; //@line 23591
  HEAP32[$526 >> 2] = $64; //@line 23592
  $527 = $ReallocAsyncCtx4 + 132 | 0; //@line 23593
  HEAP32[$527 >> 2] = $66; //@line 23594
  $528 = $ReallocAsyncCtx4 + 136 | 0; //@line 23595
  HEAP32[$528 >> 2] = $68; //@line 23596
  $529 = $ReallocAsyncCtx4 + 140 | 0; //@line 23597
  HEAP32[$529 >> 2] = $70; //@line 23598
  $530 = $ReallocAsyncCtx4 + 144 | 0; //@line 23599
  HEAP32[$530 >> 2] = $72; //@line 23600
  $531 = $ReallocAsyncCtx4 + 148 | 0; //@line 23601
  HEAP32[$531 >> 2] = $74; //@line 23602
  $532 = $ReallocAsyncCtx4 + 152 | 0; //@line 23603
  HEAP32[$532 >> 2] = $76; //@line 23604
  $533 = $ReallocAsyncCtx4 + 156 | 0; //@line 23605
  HEAP32[$533 >> 2] = $$096$be; //@line 23606
  $534 = $ReallocAsyncCtx4 + 160 | 0; //@line 23607
  HEAP32[$534 >> 2] = $80; //@line 23608
  $535 = $ReallocAsyncCtx4 + 164 | 0; //@line 23609
  HEAP32[$535 >> 2] = $82; //@line 23610
  $536 = $ReallocAsyncCtx4 + 168 | 0; //@line 23611
  HEAP32[$536 >> 2] = $84; //@line 23612
  $537 = $ReallocAsyncCtx4 + 172 | 0; //@line 23613
  HEAP32[$537 >> 2] = $86; //@line 23614
  $538 = $ReallocAsyncCtx4 + 176 | 0; //@line 23615
  HEAP32[$538 >> 2] = $88; //@line 23616
  $539 = $ReallocAsyncCtx4 + 180 | 0; //@line 23617
  HEAP32[$539 >> 2] = $90; //@line 23618
  $540 = $ReallocAsyncCtx4 + 184 | 0; //@line 23619
  HEAP32[$540 >> 2] = $92; //@line 23620
  $541 = $ReallocAsyncCtx4 + 188 | 0; //@line 23621
  HEAP32[$541 >> 2] = $94; //@line 23622
  $542 = $ReallocAsyncCtx4 + 192 | 0; //@line 23623
  HEAP32[$542 >> 2] = $96; //@line 23624
  $543 = $ReallocAsyncCtx4 + 196 | 0; //@line 23625
  HEAP32[$543 >> 2] = $98; //@line 23626
  $544 = $ReallocAsyncCtx4 + 200 | 0; //@line 23627
  HEAP32[$544 >> 2] = $100; //@line 23628
  $545 = $ReallocAsyncCtx4 + 204 | 0; //@line 23629
  HEAP32[$545 >> 2] = $102; //@line 23630
  $546 = $ReallocAsyncCtx4 + 208 | 0; //@line 23631
  HEAP32[$546 >> 2] = $104; //@line 23632
  $547 = $ReallocAsyncCtx4 + 212 | 0; //@line 23633
  HEAP32[$547 >> 2] = $106; //@line 23634
  $548 = $ReallocAsyncCtx4 + 216 | 0; //@line 23635
  HEAP8[$548 >> 0] = $108; //@line 23636
  $549 = $ReallocAsyncCtx4 + 217 | 0; //@line 23637
  HEAP8[$549 >> 0] = $110; //@line 23638
  $550 = $ReallocAsyncCtx4 + 220 | 0; //@line 23639
  HEAP32[$550 >> 2] = $112; //@line 23640
  $551 = $ReallocAsyncCtx4 + 224 | 0; //@line 23641
  HEAP32[$551 >> 2] = $114; //@line 23642
  $552 = $ReallocAsyncCtx4 + 228 | 0; //@line 23643
  HEAP8[$552 >> 0] = $116; //@line 23644
  $553 = $ReallocAsyncCtx4 + 232 | 0; //@line 23645
  HEAP32[$553 >> 2] = $118; //@line 23646
  $554 = $ReallocAsyncCtx4 + 236 | 0; //@line 23647
  HEAP32[$554 >> 2] = $120; //@line 23648
  $555 = $ReallocAsyncCtx4 + 240 | 0; //@line 23649
  HEAP32[$555 >> 2] = $122; //@line 23650
  $556 = $ReallocAsyncCtx4 + 244 | 0; //@line 23651
  HEAP32[$556 >> 2] = $124; //@line 23652
  $557 = $ReallocAsyncCtx4 + 248 | 0; //@line 23653
  HEAP32[$557 >> 2] = $126; //@line 23654
  $558 = $ReallocAsyncCtx4 + 252 | 0; //@line 23655
  HEAP32[$558 >> 2] = $128; //@line 23656
  $559 = $ReallocAsyncCtx4 + 256 | 0; //@line 23657
  HEAP32[$559 >> 2] = $130; //@line 23658
  $560 = $ReallocAsyncCtx4 + 260 | 0; //@line 23659
  HEAP32[$560 >> 2] = $132; //@line 23660
  $561 = $ReallocAsyncCtx4 + 264 | 0; //@line 23661
  HEAP32[$561 >> 2] = $134; //@line 23662
  $562 = $ReallocAsyncCtx4 + 268 | 0; //@line 23663
  HEAP32[$562 >> 2] = $136; //@line 23664
  sp = STACKTOP; //@line 23665
  return;
 } else if ((label | 0) == 28) {
  HEAP8[$134 >> 0] = HEAP8[$120 + ($139 & 255) >> 0] | 0; //@line 23673
  $594 = $$0$be + 5 << 24 >> 24; //@line 23686
  HEAP32[$132 >> 2] = (HEAPU8[$120 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$120 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$120 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 23694
  $604 = HEAP32[(HEAP32[$106 >> 2] | 0) + 48 >> 2] | 0; //@line 23697
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(268) | 0; //@line 23698
  $605 = FUNCTION_TABLE_iii[$604 & 31]($100, $60) | 0; //@line 23699
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 508; //@line 23702
   $606 = $ReallocAsyncCtx5 + 4 | 0; //@line 23703
   HEAP32[$606 >> 2] = $2; //@line 23704
   $607 = $ReallocAsyncCtx5 + 8 | 0; //@line 23705
   HEAP32[$607 >> 2] = $4; //@line 23706
   $608 = $ReallocAsyncCtx5 + 12 | 0; //@line 23707
   HEAP32[$608 >> 2] = $6; //@line 23708
   $609 = $ReallocAsyncCtx5 + 16 | 0; //@line 23709
   HEAP32[$609 >> 2] = $8; //@line 23710
   $610 = $ReallocAsyncCtx5 + 20 | 0; //@line 23711
   HEAP32[$610 >> 2] = $10; //@line 23712
   $611 = $ReallocAsyncCtx5 + 24 | 0; //@line 23713
   HEAP32[$611 >> 2] = $12; //@line 23714
   $612 = $ReallocAsyncCtx5 + 28 | 0; //@line 23715
   HEAP32[$612 >> 2] = $14; //@line 23716
   $613 = $ReallocAsyncCtx5 + 32 | 0; //@line 23717
   HEAP32[$613 >> 2] = $16; //@line 23718
   $614 = $ReallocAsyncCtx5 + 36 | 0; //@line 23719
   HEAP32[$614 >> 2] = $18; //@line 23720
   $615 = $ReallocAsyncCtx5 + 40 | 0; //@line 23721
   HEAP32[$615 >> 2] = $20; //@line 23722
   $616 = $ReallocAsyncCtx5 + 44 | 0; //@line 23723
   HEAP32[$616 >> 2] = $22; //@line 23724
   $617 = $ReallocAsyncCtx5 + 48 | 0; //@line 23725
   HEAP32[$617 >> 2] = $24; //@line 23726
   $618 = $ReallocAsyncCtx5 + 52 | 0; //@line 23727
   HEAP32[$618 >> 2] = $28; //@line 23728
   $619 = $ReallocAsyncCtx5 + 56 | 0; //@line 23729
   HEAP32[$619 >> 2] = $30; //@line 23730
   $620 = $ReallocAsyncCtx5 + 60 | 0; //@line 23731
   HEAP32[$620 >> 2] = $32; //@line 23732
   $621 = $ReallocAsyncCtx5 + 64 | 0; //@line 23733
   HEAP32[$621 >> 2] = $34; //@line 23734
   $622 = $ReallocAsyncCtx5 + 68 | 0; //@line 23735
   HEAP32[$622 >> 2] = $36; //@line 23736
   $623 = $ReallocAsyncCtx5 + 72 | 0; //@line 23737
   HEAP32[$623 >> 2] = $38; //@line 23738
   $624 = $ReallocAsyncCtx5 + 76 | 0; //@line 23739
   HEAP32[$624 >> 2] = $40; //@line 23740
   $625 = $ReallocAsyncCtx5 + 80 | 0; //@line 23741
   HEAP32[$625 >> 2] = $42; //@line 23742
   $626 = $ReallocAsyncCtx5 + 84 | 0; //@line 23743
   HEAP32[$626 >> 2] = $44; //@line 23744
   $627 = $ReallocAsyncCtx5 + 88 | 0; //@line 23745
   HEAP32[$627 >> 2] = $46; //@line 23746
   $628 = $ReallocAsyncCtx5 + 92 | 0; //@line 23747
   HEAP32[$628 >> 2] = $48; //@line 23748
   $629 = $ReallocAsyncCtx5 + 96 | 0; //@line 23749
   HEAP32[$629 >> 2] = $50; //@line 23750
   $630 = $ReallocAsyncCtx5 + 100 | 0; //@line 23751
   HEAP32[$630 >> 2] = $52; //@line 23752
   $631 = $ReallocAsyncCtx5 + 104 | 0; //@line 23753
   HEAP32[$631 >> 2] = $54; //@line 23754
   $632 = $ReallocAsyncCtx5 + 108 | 0; //@line 23755
   HEAP32[$632 >> 2] = $56; //@line 23756
   $633 = $ReallocAsyncCtx5 + 112 | 0; //@line 23757
   HEAP32[$633 >> 2] = $58; //@line 23758
   $634 = $ReallocAsyncCtx5 + 116 | 0; //@line 23759
   HEAP32[$634 >> 2] = $60; //@line 23760
   $635 = $ReallocAsyncCtx5 + 120 | 0; //@line 23761
   HEAP32[$635 >> 2] = $62; //@line 23762
   $636 = $ReallocAsyncCtx5 + 124 | 0; //@line 23763
   HEAP32[$636 >> 2] = $64; //@line 23764
   $637 = $ReallocAsyncCtx5 + 128 | 0; //@line 23765
   HEAP8[$637 >> 0] = $594; //@line 23766
   $638 = $ReallocAsyncCtx5 + 132 | 0; //@line 23767
   HEAP32[$638 >> 2] = $66; //@line 23768
   $639 = $ReallocAsyncCtx5 + 136 | 0; //@line 23769
   HEAP32[$639 >> 2] = $68; //@line 23770
   $640 = $ReallocAsyncCtx5 + 140 | 0; //@line 23771
   HEAP32[$640 >> 2] = $70; //@line 23772
   $641 = $ReallocAsyncCtx5 + 144 | 0; //@line 23773
   HEAP32[$641 >> 2] = $72; //@line 23774
   $642 = $ReallocAsyncCtx5 + 148 | 0; //@line 23775
   HEAP32[$642 >> 2] = $74; //@line 23776
   $643 = $ReallocAsyncCtx5 + 152 | 0; //@line 23777
   HEAP32[$643 >> 2] = $76; //@line 23778
   $644 = $ReallocAsyncCtx5 + 156 | 0; //@line 23779
   HEAP32[$644 >> 2] = $80; //@line 23780
   $645 = $ReallocAsyncCtx5 + 160 | 0; //@line 23781
   HEAP32[$645 >> 2] = $82; //@line 23782
   $646 = $ReallocAsyncCtx5 + 164 | 0; //@line 23783
   HEAP32[$646 >> 2] = $84; //@line 23784
   $647 = $ReallocAsyncCtx5 + 168 | 0; //@line 23785
   HEAP32[$647 >> 2] = $86; //@line 23786
   $648 = $ReallocAsyncCtx5 + 172 | 0; //@line 23787
   HEAP32[$648 >> 2] = $88; //@line 23788
   $649 = $ReallocAsyncCtx5 + 176 | 0; //@line 23789
   HEAP32[$649 >> 2] = $90; //@line 23790
   $650 = $ReallocAsyncCtx5 + 180 | 0; //@line 23791
   HEAP32[$650 >> 2] = $92; //@line 23792
   $651 = $ReallocAsyncCtx5 + 184 | 0; //@line 23793
   HEAP32[$651 >> 2] = $94; //@line 23794
   $652 = $ReallocAsyncCtx5 + 188 | 0; //@line 23795
   HEAP32[$652 >> 2] = $96; //@line 23796
   $653 = $ReallocAsyncCtx5 + 192 | 0; //@line 23797
   HEAP32[$653 >> 2] = $98; //@line 23798
   $654 = $ReallocAsyncCtx5 + 196 | 0; //@line 23799
   HEAP32[$654 >> 2] = $100; //@line 23800
   $655 = $ReallocAsyncCtx5 + 200 | 0; //@line 23801
   HEAP32[$655 >> 2] = $102; //@line 23802
   $656 = $ReallocAsyncCtx5 + 204 | 0; //@line 23803
   HEAP32[$656 >> 2] = $104; //@line 23804
   $657 = $ReallocAsyncCtx5 + 208 | 0; //@line 23805
   HEAP32[$657 >> 2] = $106; //@line 23806
   $658 = $ReallocAsyncCtx5 + 212 | 0; //@line 23807
   HEAP8[$658 >> 0] = $108; //@line 23808
   $659 = $ReallocAsyncCtx5 + 213 | 0; //@line 23809
   HEAP8[$659 >> 0] = $110; //@line 23810
   $660 = $ReallocAsyncCtx5 + 216 | 0; //@line 23811
   HEAP32[$660 >> 2] = $112; //@line 23812
   $661 = $ReallocAsyncCtx5 + 220 | 0; //@line 23813
   HEAP32[$661 >> 2] = $114; //@line 23814
   $662 = $ReallocAsyncCtx5 + 224 | 0; //@line 23815
   HEAP8[$662 >> 0] = $116; //@line 23816
   $663 = $ReallocAsyncCtx5 + 228 | 0; //@line 23817
   HEAP32[$663 >> 2] = $118; //@line 23818
   $664 = $ReallocAsyncCtx5 + 232 | 0; //@line 23819
   HEAP32[$664 >> 2] = $120; //@line 23820
   $665 = $ReallocAsyncCtx5 + 236 | 0; //@line 23821
   HEAP32[$665 >> 2] = $122; //@line 23822
   $666 = $ReallocAsyncCtx5 + 240 | 0; //@line 23823
   HEAP32[$666 >> 2] = $124; //@line 23824
   $667 = $ReallocAsyncCtx5 + 244 | 0; //@line 23825
   HEAP32[$667 >> 2] = $126; //@line 23826
   $668 = $ReallocAsyncCtx5 + 248 | 0; //@line 23827
   HEAP32[$668 >> 2] = $128; //@line 23828
   $669 = $ReallocAsyncCtx5 + 252 | 0; //@line 23829
   HEAP32[$669 >> 2] = $130; //@line 23830
   $670 = $ReallocAsyncCtx5 + 256 | 0; //@line 23831
   HEAP32[$670 >> 2] = $132; //@line 23832
   $671 = $ReallocAsyncCtx5 + 260 | 0; //@line 23833
   HEAP32[$671 >> 2] = $134; //@line 23834
   $672 = $ReallocAsyncCtx5 + 264 | 0; //@line 23835
   HEAP32[$672 >> 2] = $136; //@line 23836
   sp = STACKTOP; //@line 23837
   return;
  }
  HEAP8[___async_retval >> 0] = $605; //@line 23841
  ___async_unwind = 0; //@line 23842
  HEAP32[$ReallocAsyncCtx5 >> 2] = 508; //@line 23843
  $606 = $ReallocAsyncCtx5 + 4 | 0; //@line 23844
  HEAP32[$606 >> 2] = $2; //@line 23845
  $607 = $ReallocAsyncCtx5 + 8 | 0; //@line 23846
  HEAP32[$607 >> 2] = $4; //@line 23847
  $608 = $ReallocAsyncCtx5 + 12 | 0; //@line 23848
  HEAP32[$608 >> 2] = $6; //@line 23849
  $609 = $ReallocAsyncCtx5 + 16 | 0; //@line 23850
  HEAP32[$609 >> 2] = $8; //@line 23851
  $610 = $ReallocAsyncCtx5 + 20 | 0; //@line 23852
  HEAP32[$610 >> 2] = $10; //@line 23853
  $611 = $ReallocAsyncCtx5 + 24 | 0; //@line 23854
  HEAP32[$611 >> 2] = $12; //@line 23855
  $612 = $ReallocAsyncCtx5 + 28 | 0; //@line 23856
  HEAP32[$612 >> 2] = $14; //@line 23857
  $613 = $ReallocAsyncCtx5 + 32 | 0; //@line 23858
  HEAP32[$613 >> 2] = $16; //@line 23859
  $614 = $ReallocAsyncCtx5 + 36 | 0; //@line 23860
  HEAP32[$614 >> 2] = $18; //@line 23861
  $615 = $ReallocAsyncCtx5 + 40 | 0; //@line 23862
  HEAP32[$615 >> 2] = $20; //@line 23863
  $616 = $ReallocAsyncCtx5 + 44 | 0; //@line 23864
  HEAP32[$616 >> 2] = $22; //@line 23865
  $617 = $ReallocAsyncCtx5 + 48 | 0; //@line 23866
  HEAP32[$617 >> 2] = $24; //@line 23867
  $618 = $ReallocAsyncCtx5 + 52 | 0; //@line 23868
  HEAP32[$618 >> 2] = $28; //@line 23869
  $619 = $ReallocAsyncCtx5 + 56 | 0; //@line 23870
  HEAP32[$619 >> 2] = $30; //@line 23871
  $620 = $ReallocAsyncCtx5 + 60 | 0; //@line 23872
  HEAP32[$620 >> 2] = $32; //@line 23873
  $621 = $ReallocAsyncCtx5 + 64 | 0; //@line 23874
  HEAP32[$621 >> 2] = $34; //@line 23875
  $622 = $ReallocAsyncCtx5 + 68 | 0; //@line 23876
  HEAP32[$622 >> 2] = $36; //@line 23877
  $623 = $ReallocAsyncCtx5 + 72 | 0; //@line 23878
  HEAP32[$623 >> 2] = $38; //@line 23879
  $624 = $ReallocAsyncCtx5 + 76 | 0; //@line 23880
  HEAP32[$624 >> 2] = $40; //@line 23881
  $625 = $ReallocAsyncCtx5 + 80 | 0; //@line 23882
  HEAP32[$625 >> 2] = $42; //@line 23883
  $626 = $ReallocAsyncCtx5 + 84 | 0; //@line 23884
  HEAP32[$626 >> 2] = $44; //@line 23885
  $627 = $ReallocAsyncCtx5 + 88 | 0; //@line 23886
  HEAP32[$627 >> 2] = $46; //@line 23887
  $628 = $ReallocAsyncCtx5 + 92 | 0; //@line 23888
  HEAP32[$628 >> 2] = $48; //@line 23889
  $629 = $ReallocAsyncCtx5 + 96 | 0; //@line 23890
  HEAP32[$629 >> 2] = $50; //@line 23891
  $630 = $ReallocAsyncCtx5 + 100 | 0; //@line 23892
  HEAP32[$630 >> 2] = $52; //@line 23893
  $631 = $ReallocAsyncCtx5 + 104 | 0; //@line 23894
  HEAP32[$631 >> 2] = $54; //@line 23895
  $632 = $ReallocAsyncCtx5 + 108 | 0; //@line 23896
  HEAP32[$632 >> 2] = $56; //@line 23897
  $633 = $ReallocAsyncCtx5 + 112 | 0; //@line 23898
  HEAP32[$633 >> 2] = $58; //@line 23899
  $634 = $ReallocAsyncCtx5 + 116 | 0; //@line 23900
  HEAP32[$634 >> 2] = $60; //@line 23901
  $635 = $ReallocAsyncCtx5 + 120 | 0; //@line 23902
  HEAP32[$635 >> 2] = $62; //@line 23903
  $636 = $ReallocAsyncCtx5 + 124 | 0; //@line 23904
  HEAP32[$636 >> 2] = $64; //@line 23905
  $637 = $ReallocAsyncCtx5 + 128 | 0; //@line 23906
  HEAP8[$637 >> 0] = $594; //@line 23907
  $638 = $ReallocAsyncCtx5 + 132 | 0; //@line 23908
  HEAP32[$638 >> 2] = $66; //@line 23909
  $639 = $ReallocAsyncCtx5 + 136 | 0; //@line 23910
  HEAP32[$639 >> 2] = $68; //@line 23911
  $640 = $ReallocAsyncCtx5 + 140 | 0; //@line 23912
  HEAP32[$640 >> 2] = $70; //@line 23913
  $641 = $ReallocAsyncCtx5 + 144 | 0; //@line 23914
  HEAP32[$641 >> 2] = $72; //@line 23915
  $642 = $ReallocAsyncCtx5 + 148 | 0; //@line 23916
  HEAP32[$642 >> 2] = $74; //@line 23917
  $643 = $ReallocAsyncCtx5 + 152 | 0; //@line 23918
  HEAP32[$643 >> 2] = $76; //@line 23919
  $644 = $ReallocAsyncCtx5 + 156 | 0; //@line 23920
  HEAP32[$644 >> 2] = $80; //@line 23921
  $645 = $ReallocAsyncCtx5 + 160 | 0; //@line 23922
  HEAP32[$645 >> 2] = $82; //@line 23923
  $646 = $ReallocAsyncCtx5 + 164 | 0; //@line 23924
  HEAP32[$646 >> 2] = $84; //@line 23925
  $647 = $ReallocAsyncCtx5 + 168 | 0; //@line 23926
  HEAP32[$647 >> 2] = $86; //@line 23927
  $648 = $ReallocAsyncCtx5 + 172 | 0; //@line 23928
  HEAP32[$648 >> 2] = $88; //@line 23929
  $649 = $ReallocAsyncCtx5 + 176 | 0; //@line 23930
  HEAP32[$649 >> 2] = $90; //@line 23931
  $650 = $ReallocAsyncCtx5 + 180 | 0; //@line 23932
  HEAP32[$650 >> 2] = $92; //@line 23933
  $651 = $ReallocAsyncCtx5 + 184 | 0; //@line 23934
  HEAP32[$651 >> 2] = $94; //@line 23935
  $652 = $ReallocAsyncCtx5 + 188 | 0; //@line 23936
  HEAP32[$652 >> 2] = $96; //@line 23937
  $653 = $ReallocAsyncCtx5 + 192 | 0; //@line 23938
  HEAP32[$653 >> 2] = $98; //@line 23939
  $654 = $ReallocAsyncCtx5 + 196 | 0; //@line 23940
  HEAP32[$654 >> 2] = $100; //@line 23941
  $655 = $ReallocAsyncCtx5 + 200 | 0; //@line 23942
  HEAP32[$655 >> 2] = $102; //@line 23943
  $656 = $ReallocAsyncCtx5 + 204 | 0; //@line 23944
  HEAP32[$656 >> 2] = $104; //@line 23945
  $657 = $ReallocAsyncCtx5 + 208 | 0; //@line 23946
  HEAP32[$657 >> 2] = $106; //@line 23947
  $658 = $ReallocAsyncCtx5 + 212 | 0; //@line 23948
  HEAP8[$658 >> 0] = $108; //@line 23949
  $659 = $ReallocAsyncCtx5 + 213 | 0; //@line 23950
  HEAP8[$659 >> 0] = $110; //@line 23951
  $660 = $ReallocAsyncCtx5 + 216 | 0; //@line 23952
  HEAP32[$660 >> 2] = $112; //@line 23953
  $661 = $ReallocAsyncCtx5 + 220 | 0; //@line 23954
  HEAP32[$661 >> 2] = $114; //@line 23955
  $662 = $ReallocAsyncCtx5 + 224 | 0; //@line 23956
  HEAP8[$662 >> 0] = $116; //@line 23957
  $663 = $ReallocAsyncCtx5 + 228 | 0; //@line 23958
  HEAP32[$663 >> 2] = $118; //@line 23959
  $664 = $ReallocAsyncCtx5 + 232 | 0; //@line 23960
  HEAP32[$664 >> 2] = $120; //@line 23961
  $665 = $ReallocAsyncCtx5 + 236 | 0; //@line 23962
  HEAP32[$665 >> 2] = $122; //@line 23963
  $666 = $ReallocAsyncCtx5 + 240 | 0; //@line 23964
  HEAP32[$666 >> 2] = $124; //@line 23965
  $667 = $ReallocAsyncCtx5 + 244 | 0; //@line 23966
  HEAP32[$667 >> 2] = $126; //@line 23967
  $668 = $ReallocAsyncCtx5 + 248 | 0; //@line 23968
  HEAP32[$668 >> 2] = $128; //@line 23969
  $669 = $ReallocAsyncCtx5 + 252 | 0; //@line 23970
  HEAP32[$669 >> 2] = $130; //@line 23971
  $670 = $ReallocAsyncCtx5 + 256 | 0; //@line 23972
  HEAP32[$670 >> 2] = $132; //@line 23973
  $671 = $ReallocAsyncCtx5 + 260 | 0; //@line 23974
  HEAP32[$671 >> 2] = $134; //@line 23975
  $672 = $ReallocAsyncCtx5 + 264 | 0; //@line 23976
  HEAP32[$672 >> 2] = $136; //@line 23977
  sp = STACKTOP; //@line 23978
  return;
 } else if ((label | 0) == 32) {
  HEAP32[___async_retval >> 2] = $$096$be; //@line 23983
  return;
 }
}
function __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_341($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0$i108 = 0, $$096$be = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $130 = 0, $132 = 0, $134 = 0, $137 = 0, $14 = 0, $148 = 0, $149 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $231 = 0, $234 = 0, $239 = 0, $24 = 0, $247 = 0, $26 = 0, $266 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $347 = 0, $348 = 0, $36 = 0, $38 = 0, $385 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $462 = 0, $463 = 0, $473 = 0, $477 = 0, $48 = 0, $481 = 0, $484 = 0, $490 = 0, $493 = 0, $494 = 0, $50 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $58 = 0, $590 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 20165
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20167
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20169
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20171
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20173
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20175
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20177
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20179
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20181
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 20183
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 20185
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 20187
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 20189
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 20191
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 20193
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 20195
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 20197
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 20199
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 20201
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 20203
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 20205
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 20207
 $44 = HEAP8[$0 + 88 >> 0] | 0; //@line 20209
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 20211
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 20213
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 20215
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 20217
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 20219
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 20221
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 20223
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 20225
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 20227
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 20229
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 20231
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 20233
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 20235
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 20237
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 20239
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 20241
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 20243
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 20245
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 20247
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 20249
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 20251
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 20253
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 20255
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 20257
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 20259
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 20261
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 20263
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 20265
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 20267
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 20269
 $106 = HEAP8[$0 + 212 >> 0] | 0; //@line 20271
 $108 = HEAP8[$0 + 213 >> 0] | 0; //@line 20273
 $110 = HEAP32[$0 + 216 >> 2] | 0; //@line 20275
 $112 = HEAP32[$0 + 220 >> 2] | 0; //@line 20277
 $114 = HEAP8[$0 + 224 >> 0] | 0; //@line 20279
 $116 = HEAP32[$0 + 228 >> 2] | 0; //@line 20281
 $118 = HEAP32[$0 + 232 >> 2] | 0; //@line 20283
 $120 = HEAP32[$0 + 236 >> 2] | 0; //@line 20285
 $122 = HEAP32[$0 + 240 >> 2] | 0; //@line 20287
 $124 = HEAP32[$0 + 244 >> 2] | 0; //@line 20289
 $126 = HEAP32[$0 + 248 >> 2] | 0; //@line 20291
 $128 = HEAP32[$0 + 252 >> 2] | 0; //@line 20293
 $130 = HEAP32[$0 + 256 >> 2] | 0; //@line 20295
 $132 = HEAP32[$0 + 260 >> 2] | 0; //@line 20297
 $134 = HEAP32[$0 + 264 >> 2] | 0; //@line 20299
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 20301
 $462 = HEAP8[$100 >> 0] | 0; //@line 20303
 $463 = $462 & 255; //@line 20304
 if (((-128 - (HEAP8[$134 >> 0] | 0) & 255) + -1 | 0) > ($463 | 0)) {
  HEAP8[$122 + 4 + $463 >> 0] = 7; //@line 20315
  HEAP8[$100 >> 0] = $462 + 2 << 24 >> 24; //@line 20316
  HEAP8[($462 + 1 & 255) + ($122 + 4) >> 0] = $AsyncRetVal; //@line 20317
  HEAP8[$76 >> 0] = 1; //@line 20318
  $$0$i108 = 0; //@line 20319
 } else {
  $$0$i108 = -1e3; //@line 20321
 }
 $$0$be = $44; //@line 20323
 $$096$be = $$0$i108; //@line 20323
 L5 : while (1) {
  if (($$0$be & 255) >= ($108 & 255)) {
   label = 31; //@line 20327
   break;
  }
  $137 = $$0$be + 1 << 24 >> 24; //@line 20331
  switch (HEAP8[$118 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 20336
    break L5;
    break;
   }
  case 5:
   {
    label = 9; //@line 20341
    break L5;
    break;
   }
  case 7:
   {
    label = 14; //@line 20346
    break L5;
    break;
   }
  case 9:
   {
    label = 22; //@line 20351
    break L5;
    break;
   }
  case 10:
   {
    label = 27; //@line 20356
    break L5;
    break;
   }
  case 2:
   {
    HEAP32[$24 >> 2] = 0; //@line 20361
    HEAP8[$102 >> 0] = HEAP8[$118 + ($137 & 255) >> 0] | 0; //@line 20366
    HEAP8[$128 >> 0] = HEAP8[$118 + ($$0$be + 2 & 255) >> 0] | 0; //@line 20371
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 20372
    continue L5;
    break;
   }
  case 4:
   {
    $231 = $$0$be + 2 << 24 >> 24; //@line 20377
    $234 = HEAP8[$118 + ($137 & 255) >> 0] | 0; //@line 20380
    HEAP8[$84 >> 0] = $234; //@line 20381
    HEAP16[$64 >> 1] = 1 << ($234 & 255); //@line 20385
    $239 = HEAP8[$100 >> 0] | 0; //@line 20387
    if (($239 & 255) >= (-128 - (HEAP8[$134 >> 0] | 0) & 255)) {
     $$0$be = $231; //@line 20391
     $$096$be = -1e3; //@line 20391
     continue L5;
    }
    HEAP8[$100 >> 0] = $239 + 1 << 24 >> 24; //@line 20397
    HEAP8[($239 & 255) + ($122 + 4) >> 0] = 4; //@line 20398
    HEAP8[$76 >> 0] = 1; //@line 20399
    $$0$be = $231; //@line 20400
    $$096$be = 0; //@line 20400
    continue L5;
    break;
   }
  case 6:
   {
    $347 = HEAP8[$100 >> 0] | 0; //@line 20406
    $348 = $347 & 255; //@line 20407
    if (((-128 - (HEAP8[$134 >> 0] | 0) & 255) + -2 | 0) <= ($348 | 0)) {
     $$0$be = $137; //@line 20413
     $$096$be = -1e3; //@line 20413
     continue L5;
    }
    HEAP8[$122 + 4 + $348 >> 0] = 6; //@line 20418
    HEAP8[($347 + 1 & 255) + ($122 + 4) >> 0] = -1; //@line 20422
    HEAP8[$100 >> 0] = $347 + 3 << 24 >> 24; //@line 20424
    HEAP8[($347 + 2 & 255) + ($122 + 4) >> 0] = $106; //@line 20427
    HEAP8[$76 >> 0] = 1; //@line 20428
    $$0$be = $137; //@line 20429
    $$096$be = 0; //@line 20429
    continue L5;
    break;
   }
  case 8:
   {
    $473 = $$0$be + 2 << 24 >> 24; //@line 20434
    $477 = HEAP8[$118 + ($137 & 255) >> 0] & 15; //@line 20438
    $481 = ($477 + ($477 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 20443
    HEAP32[$48 >> 2] = $481; //@line 20444
    HEAP32[$58 >> 2] = $481 + 1e3; //@line 20446
    $484 = HEAP8[$100 >> 0] | 0; //@line 20448
    if (($484 & 255) >= (-128 - (HEAP8[$134 >> 0] | 0) & 255)) {
     $$0$be = $473; //@line 20452
     $$096$be = -1e3; //@line 20452
     continue L5;
    }
    HEAP8[$100 >> 0] = $484 + 1 << 24 >> 24; //@line 20458
    HEAP8[($484 & 255) + ($122 + 4) >> 0] = 8; //@line 20459
    HEAP8[$12 >> 0] = 1; //@line 20460
    HEAP8[$76 >> 0] = 1; //@line 20461
    $$0$be = $473; //@line 20462
    $$096$be = 0; //@line 20462
    continue L5;
    break;
   }
  default:
   {
    $$0$be = $137; //@line 20467
    $$096$be = -1013; //@line 20467
    continue L5;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$10 >> 0] = 0; //@line 20473
  HEAP8[$66 >> 0] = 0; //@line 20474
  HEAP8[$82 >> 0] = 0; //@line 20475
  HEAP8[$88 >> 0] = 0; //@line 20476
  $148 = $137 & 255; //@line 20477
  $149 = $148 + -1 | 0; //@line 20478
  HEAP32[$120 >> 2] = $118 + $149; //@line 20480
  HEAP8[$70 >> 0] = $14 - $149; //@line 20483
  HEAP8[$78 >> 0] = HEAP8[$90 >> 0] | 0; //@line 20485
  HEAP8[$34 >> 0] = HEAP8[$40 >> 0] | 0; //@line 20487
  HEAP8[$46 >> 0] = HEAP8[$52 >> 0] | 0; //@line 20489
  HEAP8[$2 >> 0] = HEAP8[$18 >> 0] | 0; //@line 20491
  HEAP8[$110 >> 0] = HEAP8[$26 >> 0] | 0; //@line 20493
  $160 = HEAP32[(HEAP32[$8 >> 2] | 0) + 36 >> 2] | 0; //@line 20496
  $ReallocAsyncCtx = _emscripten_realloc_async_context(272) | 0; //@line 20497
  $161 = FUNCTION_TABLE_iiiiiii[$160 & 3]($98, $20, $10, $66, $82, $88) | 0; //@line 20498
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 504; //@line 20501
   $162 = $ReallocAsyncCtx + 4 | 0; //@line 20502
   HEAP32[$162 >> 2] = $2; //@line 20503
   $163 = $ReallocAsyncCtx + 8 | 0; //@line 20504
   HEAP8[$163 >> 0] = $114; //@line 20505
   $164 = $ReallocAsyncCtx + 12 | 0; //@line 20506
   HEAP32[$164 >> 2] = $4; //@line 20507
   $165 = $ReallocAsyncCtx + 16 | 0; //@line 20508
   HEAP32[$165 >> 2] = $6; //@line 20509
   $166 = $ReallocAsyncCtx + 20 | 0; //@line 20510
   HEAP32[$166 >> 2] = $10; //@line 20511
   $167 = $ReallocAsyncCtx + 24 | 0; //@line 20512
   HEAP32[$167 >> 2] = $12; //@line 20513
   $168 = $ReallocAsyncCtx + 28 | 0; //@line 20514
   HEAP32[$168 >> 2] = $14; //@line 20515
   $169 = $ReallocAsyncCtx + 32 | 0; //@line 20516
   HEAP32[$169 >> 2] = $16; //@line 20517
   $170 = $ReallocAsyncCtx + 36 | 0; //@line 20518
   HEAP32[$170 >> 2] = $18; //@line 20519
   $171 = $ReallocAsyncCtx + 40 | 0; //@line 20520
   HEAP32[$171 >> 2] = $20; //@line 20521
   $172 = $ReallocAsyncCtx + 44 | 0; //@line 20522
   HEAP32[$172 >> 2] = $22; //@line 20523
   $173 = $ReallocAsyncCtx + 48 | 0; //@line 20524
   HEAP32[$173 >> 2] = $24; //@line 20525
   $174 = $ReallocAsyncCtx + 52 | 0; //@line 20526
   HEAP32[$174 >> 2] = $26; //@line 20527
   $175 = $ReallocAsyncCtx + 56 | 0; //@line 20528
   HEAP32[$175 >> 2] = $28; //@line 20529
   $176 = $ReallocAsyncCtx + 60 | 0; //@line 20530
   HEAP32[$176 >> 2] = $30; //@line 20531
   $177 = $ReallocAsyncCtx + 64 | 0; //@line 20532
   HEAP32[$177 >> 2] = $32; //@line 20533
   $178 = $ReallocAsyncCtx + 68 | 0; //@line 20534
   HEAP32[$178 >> 2] = $34; //@line 20535
   $179 = $ReallocAsyncCtx + 72 | 0; //@line 20536
   HEAP32[$179 >> 2] = $36; //@line 20537
   $180 = $ReallocAsyncCtx + 76 | 0; //@line 20538
   HEAP32[$180 >> 2] = $38; //@line 20539
   $181 = $ReallocAsyncCtx + 80 | 0; //@line 20540
   HEAP32[$181 >> 2] = $40; //@line 20541
   $182 = $ReallocAsyncCtx + 84 | 0; //@line 20542
   HEAP32[$182 >> 2] = $42; //@line 20543
   $183 = $ReallocAsyncCtx + 88 | 0; //@line 20544
   HEAP32[$183 >> 2] = $46; //@line 20545
   $184 = $ReallocAsyncCtx + 92 | 0; //@line 20546
   HEAP32[$184 >> 2] = $48; //@line 20547
   $185 = $ReallocAsyncCtx + 96 | 0; //@line 20548
   HEAP32[$185 >> 2] = $50; //@line 20549
   $186 = $ReallocAsyncCtx + 100 | 0; //@line 20550
   HEAP32[$186 >> 2] = $52; //@line 20551
   $187 = $ReallocAsyncCtx + 104 | 0; //@line 20552
   HEAP32[$187 >> 2] = $54; //@line 20553
   $188 = $ReallocAsyncCtx + 108 | 0; //@line 20554
   HEAP32[$188 >> 2] = $56; //@line 20555
   $189 = $ReallocAsyncCtx + 112 | 0; //@line 20556
   HEAP32[$189 >> 2] = $58; //@line 20557
   $190 = $ReallocAsyncCtx + 116 | 0; //@line 20558
   HEAP32[$190 >> 2] = $60; //@line 20559
   $191 = $ReallocAsyncCtx + 120 | 0; //@line 20560
   HEAP32[$191 >> 2] = $62; //@line 20561
   $192 = $ReallocAsyncCtx + 124 | 0; //@line 20562
   HEAP32[$192 >> 2] = $64; //@line 20563
   $193 = $ReallocAsyncCtx + 128 | 0; //@line 20564
   HEAP32[$193 >> 2] = $66; //@line 20565
   $194 = $ReallocAsyncCtx + 132 | 0; //@line 20566
   HEAP32[$194 >> 2] = $68; //@line 20567
   $195 = $ReallocAsyncCtx + 136 | 0; //@line 20568
   HEAP32[$195 >> 2] = $70; //@line 20569
   $196 = $ReallocAsyncCtx + 140 | 0; //@line 20570
   HEAP32[$196 >> 2] = $72; //@line 20571
   $197 = $ReallocAsyncCtx + 144 | 0; //@line 20572
   HEAP32[$197 >> 2] = $74; //@line 20573
   $198 = $ReallocAsyncCtx + 148 | 0; //@line 20574
   HEAP32[$198 >> 2] = $76; //@line 20575
   $199 = $ReallocAsyncCtx + 152 | 0; //@line 20576
   HEAP32[$199 >> 2] = $$096$be; //@line 20577
   $200 = $ReallocAsyncCtx + 156 | 0; //@line 20578
   HEAP32[$200 >> 2] = $78; //@line 20579
   $201 = $ReallocAsyncCtx + 160 | 0; //@line 20580
   HEAP32[$201 >> 2] = $80; //@line 20581
   $202 = $ReallocAsyncCtx + 164 | 0; //@line 20582
   HEAP32[$202 >> 2] = $82; //@line 20583
   $203 = $ReallocAsyncCtx + 168 | 0; //@line 20584
   HEAP32[$203 >> 2] = $84; //@line 20585
   $204 = $ReallocAsyncCtx + 172 | 0; //@line 20586
   HEAP32[$204 >> 2] = $86; //@line 20587
   $205 = $ReallocAsyncCtx + 176 | 0; //@line 20588
   HEAP32[$205 >> 2] = $88; //@line 20589
   $206 = $ReallocAsyncCtx + 180 | 0; //@line 20590
   HEAP32[$206 >> 2] = $90; //@line 20591
   $207 = $ReallocAsyncCtx + 184 | 0; //@line 20592
   HEAP32[$207 >> 2] = $92; //@line 20593
   $208 = $ReallocAsyncCtx + 188 | 0; //@line 20594
   HEAP32[$208 >> 2] = $94; //@line 20595
   $209 = $ReallocAsyncCtx + 192 | 0; //@line 20596
   HEAP32[$209 >> 2] = $96; //@line 20597
   $210 = $ReallocAsyncCtx + 196 | 0; //@line 20598
   HEAP32[$210 >> 2] = $98; //@line 20599
   $211 = $ReallocAsyncCtx + 200 | 0; //@line 20600
   HEAP32[$211 >> 2] = $148; //@line 20601
   $212 = $ReallocAsyncCtx + 204 | 0; //@line 20602
   HEAP32[$212 >> 2] = $100; //@line 20603
   $213 = $ReallocAsyncCtx + 208 | 0; //@line 20604
   HEAP32[$213 >> 2] = $102; //@line 20605
   $214 = $ReallocAsyncCtx + 212 | 0; //@line 20606
   HEAP32[$214 >> 2] = $104; //@line 20607
   $215 = $ReallocAsyncCtx + 216 | 0; //@line 20608
   HEAP8[$215 >> 0] = $106; //@line 20609
   $216 = $ReallocAsyncCtx + 217 | 0; //@line 20610
   HEAP8[$216 >> 0] = $108; //@line 20611
   $217 = $ReallocAsyncCtx + 220 | 0; //@line 20612
   HEAP32[$217 >> 2] = $110; //@line 20613
   $218 = $ReallocAsyncCtx + 224 | 0; //@line 20614
   HEAP32[$218 >> 2] = $112; //@line 20615
   $219 = $ReallocAsyncCtx + 228 | 0; //@line 20616
   HEAP32[$219 >> 2] = $120; //@line 20617
   $220 = $ReallocAsyncCtx + 232 | 0; //@line 20618
   HEAP32[$220 >> 2] = $116; //@line 20619
   $221 = $ReallocAsyncCtx + 236 | 0; //@line 20620
   HEAP32[$221 >> 2] = $118; //@line 20621
   $222 = $ReallocAsyncCtx + 240 | 0; //@line 20622
   HEAP32[$222 >> 2] = $130; //@line 20623
   $223 = $ReallocAsyncCtx + 244 | 0; //@line 20624
   HEAP32[$223 >> 2] = $122; //@line 20625
   $224 = $ReallocAsyncCtx + 248 | 0; //@line 20626
   HEAP32[$224 >> 2] = $124; //@line 20627
   $225 = $ReallocAsyncCtx + 252 | 0; //@line 20628
   HEAP32[$225 >> 2] = $126; //@line 20629
   $226 = $ReallocAsyncCtx + 256 | 0; //@line 20630
   HEAP32[$226 >> 2] = $128; //@line 20631
   $227 = $ReallocAsyncCtx + 260 | 0; //@line 20632
   HEAP32[$227 >> 2] = $8; //@line 20633
   $228 = $ReallocAsyncCtx + 264 | 0; //@line 20634
   HEAP32[$228 >> 2] = $132; //@line 20635
   $229 = $ReallocAsyncCtx + 268 | 0; //@line 20636
   HEAP32[$229 >> 2] = $134; //@line 20637
   sp = STACKTOP; //@line 20638
   return;
  }
  HEAP8[___async_retval >> 0] = $161; //@line 20642
  ___async_unwind = 0; //@line 20643
  HEAP32[$ReallocAsyncCtx >> 2] = 504; //@line 20644
  $162 = $ReallocAsyncCtx + 4 | 0; //@line 20645
  HEAP32[$162 >> 2] = $2; //@line 20646
  $163 = $ReallocAsyncCtx + 8 | 0; //@line 20647
  HEAP8[$163 >> 0] = $114; //@line 20648
  $164 = $ReallocAsyncCtx + 12 | 0; //@line 20649
  HEAP32[$164 >> 2] = $4; //@line 20650
  $165 = $ReallocAsyncCtx + 16 | 0; //@line 20651
  HEAP32[$165 >> 2] = $6; //@line 20652
  $166 = $ReallocAsyncCtx + 20 | 0; //@line 20653
  HEAP32[$166 >> 2] = $10; //@line 20654
  $167 = $ReallocAsyncCtx + 24 | 0; //@line 20655
  HEAP32[$167 >> 2] = $12; //@line 20656
  $168 = $ReallocAsyncCtx + 28 | 0; //@line 20657
  HEAP32[$168 >> 2] = $14; //@line 20658
  $169 = $ReallocAsyncCtx + 32 | 0; //@line 20659
  HEAP32[$169 >> 2] = $16; //@line 20660
  $170 = $ReallocAsyncCtx + 36 | 0; //@line 20661
  HEAP32[$170 >> 2] = $18; //@line 20662
  $171 = $ReallocAsyncCtx + 40 | 0; //@line 20663
  HEAP32[$171 >> 2] = $20; //@line 20664
  $172 = $ReallocAsyncCtx + 44 | 0; //@line 20665
  HEAP32[$172 >> 2] = $22; //@line 20666
  $173 = $ReallocAsyncCtx + 48 | 0; //@line 20667
  HEAP32[$173 >> 2] = $24; //@line 20668
  $174 = $ReallocAsyncCtx + 52 | 0; //@line 20669
  HEAP32[$174 >> 2] = $26; //@line 20670
  $175 = $ReallocAsyncCtx + 56 | 0; //@line 20671
  HEAP32[$175 >> 2] = $28; //@line 20672
  $176 = $ReallocAsyncCtx + 60 | 0; //@line 20673
  HEAP32[$176 >> 2] = $30; //@line 20674
  $177 = $ReallocAsyncCtx + 64 | 0; //@line 20675
  HEAP32[$177 >> 2] = $32; //@line 20676
  $178 = $ReallocAsyncCtx + 68 | 0; //@line 20677
  HEAP32[$178 >> 2] = $34; //@line 20678
  $179 = $ReallocAsyncCtx + 72 | 0; //@line 20679
  HEAP32[$179 >> 2] = $36; //@line 20680
  $180 = $ReallocAsyncCtx + 76 | 0; //@line 20681
  HEAP32[$180 >> 2] = $38; //@line 20682
  $181 = $ReallocAsyncCtx + 80 | 0; //@line 20683
  HEAP32[$181 >> 2] = $40; //@line 20684
  $182 = $ReallocAsyncCtx + 84 | 0; //@line 20685
  HEAP32[$182 >> 2] = $42; //@line 20686
  $183 = $ReallocAsyncCtx + 88 | 0; //@line 20687
  HEAP32[$183 >> 2] = $46; //@line 20688
  $184 = $ReallocAsyncCtx + 92 | 0; //@line 20689
  HEAP32[$184 >> 2] = $48; //@line 20690
  $185 = $ReallocAsyncCtx + 96 | 0; //@line 20691
  HEAP32[$185 >> 2] = $50; //@line 20692
  $186 = $ReallocAsyncCtx + 100 | 0; //@line 20693
  HEAP32[$186 >> 2] = $52; //@line 20694
  $187 = $ReallocAsyncCtx + 104 | 0; //@line 20695
  HEAP32[$187 >> 2] = $54; //@line 20696
  $188 = $ReallocAsyncCtx + 108 | 0; //@line 20697
  HEAP32[$188 >> 2] = $56; //@line 20698
  $189 = $ReallocAsyncCtx + 112 | 0; //@line 20699
  HEAP32[$189 >> 2] = $58; //@line 20700
  $190 = $ReallocAsyncCtx + 116 | 0; //@line 20701
  HEAP32[$190 >> 2] = $60; //@line 20702
  $191 = $ReallocAsyncCtx + 120 | 0; //@line 20703
  HEAP32[$191 >> 2] = $62; //@line 20704
  $192 = $ReallocAsyncCtx + 124 | 0; //@line 20705
  HEAP32[$192 >> 2] = $64; //@line 20706
  $193 = $ReallocAsyncCtx + 128 | 0; //@line 20707
  HEAP32[$193 >> 2] = $66; //@line 20708
  $194 = $ReallocAsyncCtx + 132 | 0; //@line 20709
  HEAP32[$194 >> 2] = $68; //@line 20710
  $195 = $ReallocAsyncCtx + 136 | 0; //@line 20711
  HEAP32[$195 >> 2] = $70; //@line 20712
  $196 = $ReallocAsyncCtx + 140 | 0; //@line 20713
  HEAP32[$196 >> 2] = $72; //@line 20714
  $197 = $ReallocAsyncCtx + 144 | 0; //@line 20715
  HEAP32[$197 >> 2] = $74; //@line 20716
  $198 = $ReallocAsyncCtx + 148 | 0; //@line 20717
  HEAP32[$198 >> 2] = $76; //@line 20718
  $199 = $ReallocAsyncCtx + 152 | 0; //@line 20719
  HEAP32[$199 >> 2] = $$096$be; //@line 20720
  $200 = $ReallocAsyncCtx + 156 | 0; //@line 20721
  HEAP32[$200 >> 2] = $78; //@line 20722
  $201 = $ReallocAsyncCtx + 160 | 0; //@line 20723
  HEAP32[$201 >> 2] = $80; //@line 20724
  $202 = $ReallocAsyncCtx + 164 | 0; //@line 20725
  HEAP32[$202 >> 2] = $82; //@line 20726
  $203 = $ReallocAsyncCtx + 168 | 0; //@line 20727
  HEAP32[$203 >> 2] = $84; //@line 20728
  $204 = $ReallocAsyncCtx + 172 | 0; //@line 20729
  HEAP32[$204 >> 2] = $86; //@line 20730
  $205 = $ReallocAsyncCtx + 176 | 0; //@line 20731
  HEAP32[$205 >> 2] = $88; //@line 20732
  $206 = $ReallocAsyncCtx + 180 | 0; //@line 20733
  HEAP32[$206 >> 2] = $90; //@line 20734
  $207 = $ReallocAsyncCtx + 184 | 0; //@line 20735
  HEAP32[$207 >> 2] = $92; //@line 20736
  $208 = $ReallocAsyncCtx + 188 | 0; //@line 20737
  HEAP32[$208 >> 2] = $94; //@line 20738
  $209 = $ReallocAsyncCtx + 192 | 0; //@line 20739
  HEAP32[$209 >> 2] = $96; //@line 20740
  $210 = $ReallocAsyncCtx + 196 | 0; //@line 20741
  HEAP32[$210 >> 2] = $98; //@line 20742
  $211 = $ReallocAsyncCtx + 200 | 0; //@line 20743
  HEAP32[$211 >> 2] = $148; //@line 20744
  $212 = $ReallocAsyncCtx + 204 | 0; //@line 20745
  HEAP32[$212 >> 2] = $100; //@line 20746
  $213 = $ReallocAsyncCtx + 208 | 0; //@line 20747
  HEAP32[$213 >> 2] = $102; //@line 20748
  $214 = $ReallocAsyncCtx + 212 | 0; //@line 20749
  HEAP32[$214 >> 2] = $104; //@line 20750
  $215 = $ReallocAsyncCtx + 216 | 0; //@line 20751
  HEAP8[$215 >> 0] = $106; //@line 20752
  $216 = $ReallocAsyncCtx + 217 | 0; //@line 20753
  HEAP8[$216 >> 0] = $108; //@line 20754
  $217 = $ReallocAsyncCtx + 220 | 0; //@line 20755
  HEAP32[$217 >> 2] = $110; //@line 20756
  $218 = $ReallocAsyncCtx + 224 | 0; //@line 20757
  HEAP32[$218 >> 2] = $112; //@line 20758
  $219 = $ReallocAsyncCtx + 228 | 0; //@line 20759
  HEAP32[$219 >> 2] = $120; //@line 20760
  $220 = $ReallocAsyncCtx + 232 | 0; //@line 20761
  HEAP32[$220 >> 2] = $116; //@line 20762
  $221 = $ReallocAsyncCtx + 236 | 0; //@line 20763
  HEAP32[$221 >> 2] = $118; //@line 20764
  $222 = $ReallocAsyncCtx + 240 | 0; //@line 20765
  HEAP32[$222 >> 2] = $130; //@line 20766
  $223 = $ReallocAsyncCtx + 244 | 0; //@line 20767
  HEAP32[$223 >> 2] = $122; //@line 20768
  $224 = $ReallocAsyncCtx + 248 | 0; //@line 20769
  HEAP32[$224 >> 2] = $124; //@line 20770
  $225 = $ReallocAsyncCtx + 252 | 0; //@line 20771
  HEAP32[$225 >> 2] = $126; //@line 20772
  $226 = $ReallocAsyncCtx + 256 | 0; //@line 20773
  HEAP32[$226 >> 2] = $128; //@line 20774
  $227 = $ReallocAsyncCtx + 260 | 0; //@line 20775
  HEAP32[$227 >> 2] = $8; //@line 20776
  $228 = $ReallocAsyncCtx + 264 | 0; //@line 20777
  HEAP32[$228 >> 2] = $132; //@line 20778
  $229 = $ReallocAsyncCtx + 268 | 0; //@line 20779
  HEAP32[$229 >> 2] = $134; //@line 20780
  sp = STACKTOP; //@line 20781
  return;
 } else if ((label | 0) == 9) {
  $247 = HEAP8[$118 + ($137 & 255) >> 0] | 0; //@line 20787
  HEAP8[$50 >> 0] = ($247 & 255) >>> 4 & 7; //@line 20792
  HEAP8[$72 >> 0] = $247 & 15; //@line 20794
  $266 = $$0$be + 5 << 24 >> 24; //@line 20808
  HEAP32[$56 >> 2] = (HEAPU8[$118 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$118 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$118 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 20816
  $276 = HEAP32[(HEAP32[$36 >> 2] | 0) + 40 >> 2] | 0; //@line 20819
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(268) | 0; //@line 20820
  $277 = FUNCTION_TABLE_iii[$276 & 31]($98, $94) | 0; //@line 20821
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 505; //@line 20824
   $278 = $ReallocAsyncCtx2 + 4 | 0; //@line 20825
   HEAP32[$278 >> 2] = $2; //@line 20826
   $279 = $ReallocAsyncCtx2 + 8 | 0; //@line 20827
   HEAP32[$279 >> 2] = $4; //@line 20828
   $280 = $ReallocAsyncCtx2 + 12 | 0; //@line 20829
   HEAP32[$280 >> 2] = $6; //@line 20830
   $281 = $ReallocAsyncCtx2 + 16 | 0; //@line 20831
   HEAP32[$281 >> 2] = $8; //@line 20832
   $282 = $ReallocAsyncCtx2 + 20 | 0; //@line 20833
   HEAP32[$282 >> 2] = $10; //@line 20834
   $283 = $ReallocAsyncCtx2 + 24 | 0; //@line 20835
   HEAP32[$283 >> 2] = $12; //@line 20836
   $284 = $ReallocAsyncCtx2 + 28 | 0; //@line 20837
   HEAP32[$284 >> 2] = $14; //@line 20838
   $285 = $ReallocAsyncCtx2 + 32 | 0; //@line 20839
   HEAP32[$285 >> 2] = $16; //@line 20840
   $286 = $ReallocAsyncCtx2 + 36 | 0; //@line 20841
   HEAP32[$286 >> 2] = $18; //@line 20842
   $287 = $ReallocAsyncCtx2 + 40 | 0; //@line 20843
   HEAP32[$287 >> 2] = $20; //@line 20844
   $288 = $ReallocAsyncCtx2 + 44 | 0; //@line 20845
   HEAP32[$288 >> 2] = $22; //@line 20846
   $289 = $ReallocAsyncCtx2 + 48 | 0; //@line 20847
   HEAP8[$289 >> 0] = $266; //@line 20848
   $290 = $ReallocAsyncCtx2 + 52 | 0; //@line 20849
   HEAP32[$290 >> 2] = $24; //@line 20850
   $291 = $ReallocAsyncCtx2 + 56 | 0; //@line 20851
   HEAP32[$291 >> 2] = $26; //@line 20852
   $292 = $ReallocAsyncCtx2 + 60 | 0; //@line 20853
   HEAP32[$292 >> 2] = $28; //@line 20854
   $293 = $ReallocAsyncCtx2 + 64 | 0; //@line 20855
   HEAP32[$293 >> 2] = $30; //@line 20856
   $294 = $ReallocAsyncCtx2 + 68 | 0; //@line 20857
   HEAP32[$294 >> 2] = $32; //@line 20858
   $295 = $ReallocAsyncCtx2 + 72 | 0; //@line 20859
   HEAP32[$295 >> 2] = $34; //@line 20860
   $296 = $ReallocAsyncCtx2 + 76 | 0; //@line 20861
   HEAP32[$296 >> 2] = $36; //@line 20862
   $297 = $ReallocAsyncCtx2 + 80 | 0; //@line 20863
   HEAP32[$297 >> 2] = $38; //@line 20864
   $298 = $ReallocAsyncCtx2 + 84 | 0; //@line 20865
   HEAP32[$298 >> 2] = $40; //@line 20866
   $299 = $ReallocAsyncCtx2 + 88 | 0; //@line 20867
   HEAP32[$299 >> 2] = $42; //@line 20868
   $300 = $ReallocAsyncCtx2 + 92 | 0; //@line 20869
   HEAP32[$300 >> 2] = $46; //@line 20870
   $301 = $ReallocAsyncCtx2 + 96 | 0; //@line 20871
   HEAP32[$301 >> 2] = $48; //@line 20872
   $302 = $ReallocAsyncCtx2 + 100 | 0; //@line 20873
   HEAP32[$302 >> 2] = $50; //@line 20874
   $303 = $ReallocAsyncCtx2 + 104 | 0; //@line 20875
   HEAP32[$303 >> 2] = $52; //@line 20876
   $304 = $ReallocAsyncCtx2 + 108 | 0; //@line 20877
   HEAP32[$304 >> 2] = $54; //@line 20878
   $305 = $ReallocAsyncCtx2 + 112 | 0; //@line 20879
   HEAP32[$305 >> 2] = $56; //@line 20880
   $306 = $ReallocAsyncCtx2 + 116 | 0; //@line 20881
   HEAP32[$306 >> 2] = $58; //@line 20882
   $307 = $ReallocAsyncCtx2 + 120 | 0; //@line 20883
   HEAP32[$307 >> 2] = $60; //@line 20884
   $308 = $ReallocAsyncCtx2 + 124 | 0; //@line 20885
   HEAP32[$308 >> 2] = $62; //@line 20886
   $309 = $ReallocAsyncCtx2 + 128 | 0; //@line 20887
   HEAP32[$309 >> 2] = $64; //@line 20888
   $310 = $ReallocAsyncCtx2 + 132 | 0; //@line 20889
   HEAP32[$310 >> 2] = $66; //@line 20890
   $311 = $ReallocAsyncCtx2 + 136 | 0; //@line 20891
   HEAP32[$311 >> 2] = $68; //@line 20892
   $312 = $ReallocAsyncCtx2 + 140 | 0; //@line 20893
   HEAP32[$312 >> 2] = $70; //@line 20894
   $313 = $ReallocAsyncCtx2 + 144 | 0; //@line 20895
   HEAP32[$313 >> 2] = $72; //@line 20896
   $314 = $ReallocAsyncCtx2 + 148 | 0; //@line 20897
   HEAP32[$314 >> 2] = $74; //@line 20898
   $315 = $ReallocAsyncCtx2 + 152 | 0; //@line 20899
   HEAP32[$315 >> 2] = $76; //@line 20900
   $316 = $ReallocAsyncCtx2 + 156 | 0; //@line 20901
   HEAP32[$316 >> 2] = $78; //@line 20902
   $317 = $ReallocAsyncCtx2 + 160 | 0; //@line 20903
   HEAP32[$317 >> 2] = $80; //@line 20904
   $318 = $ReallocAsyncCtx2 + 164 | 0; //@line 20905
   HEAP32[$318 >> 2] = $82; //@line 20906
   $319 = $ReallocAsyncCtx2 + 168 | 0; //@line 20907
   HEAP32[$319 >> 2] = $84; //@line 20908
   $320 = $ReallocAsyncCtx2 + 172 | 0; //@line 20909
   HEAP32[$320 >> 2] = $86; //@line 20910
   $321 = $ReallocAsyncCtx2 + 176 | 0; //@line 20911
   HEAP32[$321 >> 2] = $88; //@line 20912
   $322 = $ReallocAsyncCtx2 + 180 | 0; //@line 20913
   HEAP32[$322 >> 2] = $90; //@line 20914
   $323 = $ReallocAsyncCtx2 + 184 | 0; //@line 20915
   HEAP32[$323 >> 2] = $92; //@line 20916
   $324 = $ReallocAsyncCtx2 + 188 | 0; //@line 20917
   HEAP32[$324 >> 2] = $94; //@line 20918
   $325 = $ReallocAsyncCtx2 + 192 | 0; //@line 20919
   HEAP32[$325 >> 2] = $96; //@line 20920
   $326 = $ReallocAsyncCtx2 + 196 | 0; //@line 20921
   HEAP32[$326 >> 2] = $98; //@line 20922
   $327 = $ReallocAsyncCtx2 + 200 | 0; //@line 20923
   HEAP32[$327 >> 2] = $100; //@line 20924
   $328 = $ReallocAsyncCtx2 + 204 | 0; //@line 20925
   HEAP32[$328 >> 2] = $102; //@line 20926
   $329 = $ReallocAsyncCtx2 + 208 | 0; //@line 20927
   HEAP32[$329 >> 2] = $104; //@line 20928
   $330 = $ReallocAsyncCtx2 + 212 | 0; //@line 20929
   HEAP8[$330 >> 0] = $106; //@line 20930
   $331 = $ReallocAsyncCtx2 + 213 | 0; //@line 20931
   HEAP8[$331 >> 0] = $108; //@line 20932
   $332 = $ReallocAsyncCtx2 + 216 | 0; //@line 20933
   HEAP32[$332 >> 2] = $110; //@line 20934
   $333 = $ReallocAsyncCtx2 + 220 | 0; //@line 20935
   HEAP32[$333 >> 2] = $112; //@line 20936
   $334 = $ReallocAsyncCtx2 + 224 | 0; //@line 20937
   HEAP8[$334 >> 0] = $114; //@line 20938
   $335 = $ReallocAsyncCtx2 + 228 | 0; //@line 20939
   HEAP32[$335 >> 2] = $116; //@line 20940
   $336 = $ReallocAsyncCtx2 + 232 | 0; //@line 20941
   HEAP32[$336 >> 2] = $118; //@line 20942
   $337 = $ReallocAsyncCtx2 + 236 | 0; //@line 20943
   HEAP32[$337 >> 2] = $120; //@line 20944
   $338 = $ReallocAsyncCtx2 + 240 | 0; //@line 20945
   HEAP32[$338 >> 2] = $122; //@line 20946
   $339 = $ReallocAsyncCtx2 + 244 | 0; //@line 20947
   HEAP32[$339 >> 2] = $124; //@line 20948
   $340 = $ReallocAsyncCtx2 + 248 | 0; //@line 20949
   HEAP32[$340 >> 2] = $126; //@line 20950
   $341 = $ReallocAsyncCtx2 + 252 | 0; //@line 20951
   HEAP32[$341 >> 2] = $128; //@line 20952
   $342 = $ReallocAsyncCtx2 + 256 | 0; //@line 20953
   HEAP32[$342 >> 2] = $130; //@line 20954
   $343 = $ReallocAsyncCtx2 + 260 | 0; //@line 20955
   HEAP32[$343 >> 2] = $132; //@line 20956
   $344 = $ReallocAsyncCtx2 + 264 | 0; //@line 20957
   HEAP32[$344 >> 2] = $134; //@line 20958
   sp = STACKTOP; //@line 20959
   return;
  }
  HEAP8[___async_retval >> 0] = $277; //@line 20963
  ___async_unwind = 0; //@line 20964
  HEAP32[$ReallocAsyncCtx2 >> 2] = 505; //@line 20965
  $278 = $ReallocAsyncCtx2 + 4 | 0; //@line 20966
  HEAP32[$278 >> 2] = $2; //@line 20967
  $279 = $ReallocAsyncCtx2 + 8 | 0; //@line 20968
  HEAP32[$279 >> 2] = $4; //@line 20969
  $280 = $ReallocAsyncCtx2 + 12 | 0; //@line 20970
  HEAP32[$280 >> 2] = $6; //@line 20971
  $281 = $ReallocAsyncCtx2 + 16 | 0; //@line 20972
  HEAP32[$281 >> 2] = $8; //@line 20973
  $282 = $ReallocAsyncCtx2 + 20 | 0; //@line 20974
  HEAP32[$282 >> 2] = $10; //@line 20975
  $283 = $ReallocAsyncCtx2 + 24 | 0; //@line 20976
  HEAP32[$283 >> 2] = $12; //@line 20977
  $284 = $ReallocAsyncCtx2 + 28 | 0; //@line 20978
  HEAP32[$284 >> 2] = $14; //@line 20979
  $285 = $ReallocAsyncCtx2 + 32 | 0; //@line 20980
  HEAP32[$285 >> 2] = $16; //@line 20981
  $286 = $ReallocAsyncCtx2 + 36 | 0; //@line 20982
  HEAP32[$286 >> 2] = $18; //@line 20983
  $287 = $ReallocAsyncCtx2 + 40 | 0; //@line 20984
  HEAP32[$287 >> 2] = $20; //@line 20985
  $288 = $ReallocAsyncCtx2 + 44 | 0; //@line 20986
  HEAP32[$288 >> 2] = $22; //@line 20987
  $289 = $ReallocAsyncCtx2 + 48 | 0; //@line 20988
  HEAP8[$289 >> 0] = $266; //@line 20989
  $290 = $ReallocAsyncCtx2 + 52 | 0; //@line 20990
  HEAP32[$290 >> 2] = $24; //@line 20991
  $291 = $ReallocAsyncCtx2 + 56 | 0; //@line 20992
  HEAP32[$291 >> 2] = $26; //@line 20993
  $292 = $ReallocAsyncCtx2 + 60 | 0; //@line 20994
  HEAP32[$292 >> 2] = $28; //@line 20995
  $293 = $ReallocAsyncCtx2 + 64 | 0; //@line 20996
  HEAP32[$293 >> 2] = $30; //@line 20997
  $294 = $ReallocAsyncCtx2 + 68 | 0; //@line 20998
  HEAP32[$294 >> 2] = $32; //@line 20999
  $295 = $ReallocAsyncCtx2 + 72 | 0; //@line 21000
  HEAP32[$295 >> 2] = $34; //@line 21001
  $296 = $ReallocAsyncCtx2 + 76 | 0; //@line 21002
  HEAP32[$296 >> 2] = $36; //@line 21003
  $297 = $ReallocAsyncCtx2 + 80 | 0; //@line 21004
  HEAP32[$297 >> 2] = $38; //@line 21005
  $298 = $ReallocAsyncCtx2 + 84 | 0; //@line 21006
  HEAP32[$298 >> 2] = $40; //@line 21007
  $299 = $ReallocAsyncCtx2 + 88 | 0; //@line 21008
  HEAP32[$299 >> 2] = $42; //@line 21009
  $300 = $ReallocAsyncCtx2 + 92 | 0; //@line 21010
  HEAP32[$300 >> 2] = $46; //@line 21011
  $301 = $ReallocAsyncCtx2 + 96 | 0; //@line 21012
  HEAP32[$301 >> 2] = $48; //@line 21013
  $302 = $ReallocAsyncCtx2 + 100 | 0; //@line 21014
  HEAP32[$302 >> 2] = $50; //@line 21015
  $303 = $ReallocAsyncCtx2 + 104 | 0; //@line 21016
  HEAP32[$303 >> 2] = $52; //@line 21017
  $304 = $ReallocAsyncCtx2 + 108 | 0; //@line 21018
  HEAP32[$304 >> 2] = $54; //@line 21019
  $305 = $ReallocAsyncCtx2 + 112 | 0; //@line 21020
  HEAP32[$305 >> 2] = $56; //@line 21021
  $306 = $ReallocAsyncCtx2 + 116 | 0; //@line 21022
  HEAP32[$306 >> 2] = $58; //@line 21023
  $307 = $ReallocAsyncCtx2 + 120 | 0; //@line 21024
  HEAP32[$307 >> 2] = $60; //@line 21025
  $308 = $ReallocAsyncCtx2 + 124 | 0; //@line 21026
  HEAP32[$308 >> 2] = $62; //@line 21027
  $309 = $ReallocAsyncCtx2 + 128 | 0; //@line 21028
  HEAP32[$309 >> 2] = $64; //@line 21029
  $310 = $ReallocAsyncCtx2 + 132 | 0; //@line 21030
  HEAP32[$310 >> 2] = $66; //@line 21031
  $311 = $ReallocAsyncCtx2 + 136 | 0; //@line 21032
  HEAP32[$311 >> 2] = $68; //@line 21033
  $312 = $ReallocAsyncCtx2 + 140 | 0; //@line 21034
  HEAP32[$312 >> 2] = $70; //@line 21035
  $313 = $ReallocAsyncCtx2 + 144 | 0; //@line 21036
  HEAP32[$313 >> 2] = $72; //@line 21037
  $314 = $ReallocAsyncCtx2 + 148 | 0; //@line 21038
  HEAP32[$314 >> 2] = $74; //@line 21039
  $315 = $ReallocAsyncCtx2 + 152 | 0; //@line 21040
  HEAP32[$315 >> 2] = $76; //@line 21041
  $316 = $ReallocAsyncCtx2 + 156 | 0; //@line 21042
  HEAP32[$316 >> 2] = $78; //@line 21043
  $317 = $ReallocAsyncCtx2 + 160 | 0; //@line 21044
  HEAP32[$317 >> 2] = $80; //@line 21045
  $318 = $ReallocAsyncCtx2 + 164 | 0; //@line 21046
  HEAP32[$318 >> 2] = $82; //@line 21047
  $319 = $ReallocAsyncCtx2 + 168 | 0; //@line 21048
  HEAP32[$319 >> 2] = $84; //@line 21049
  $320 = $ReallocAsyncCtx2 + 172 | 0; //@line 21050
  HEAP32[$320 >> 2] = $86; //@line 21051
  $321 = $ReallocAsyncCtx2 + 176 | 0; //@line 21052
  HEAP32[$321 >> 2] = $88; //@line 21053
  $322 = $ReallocAsyncCtx2 + 180 | 0; //@line 21054
  HEAP32[$322 >> 2] = $90; //@line 21055
  $323 = $ReallocAsyncCtx2 + 184 | 0; //@line 21056
  HEAP32[$323 >> 2] = $92; //@line 21057
  $324 = $ReallocAsyncCtx2 + 188 | 0; //@line 21058
  HEAP32[$324 >> 2] = $94; //@line 21059
  $325 = $ReallocAsyncCtx2 + 192 | 0; //@line 21060
  HEAP32[$325 >> 2] = $96; //@line 21061
  $326 = $ReallocAsyncCtx2 + 196 | 0; //@line 21062
  HEAP32[$326 >> 2] = $98; //@line 21063
  $327 = $ReallocAsyncCtx2 + 200 | 0; //@line 21064
  HEAP32[$327 >> 2] = $100; //@line 21065
  $328 = $ReallocAsyncCtx2 + 204 | 0; //@line 21066
  HEAP32[$328 >> 2] = $102; //@line 21067
  $329 = $ReallocAsyncCtx2 + 208 | 0; //@line 21068
  HEAP32[$329 >> 2] = $104; //@line 21069
  $330 = $ReallocAsyncCtx2 + 212 | 0; //@line 21070
  HEAP8[$330 >> 0] = $106; //@line 21071
  $331 = $ReallocAsyncCtx2 + 213 | 0; //@line 21072
  HEAP8[$331 >> 0] = $108; //@line 21073
  $332 = $ReallocAsyncCtx2 + 216 | 0; //@line 21074
  HEAP32[$332 >> 2] = $110; //@line 21075
  $333 = $ReallocAsyncCtx2 + 220 | 0; //@line 21076
  HEAP32[$333 >> 2] = $112; //@line 21077
  $334 = $ReallocAsyncCtx2 + 224 | 0; //@line 21078
  HEAP8[$334 >> 0] = $114; //@line 21079
  $335 = $ReallocAsyncCtx2 + 228 | 0; //@line 21080
  HEAP32[$335 >> 2] = $116; //@line 21081
  $336 = $ReallocAsyncCtx2 + 232 | 0; //@line 21082
  HEAP32[$336 >> 2] = $118; //@line 21083
  $337 = $ReallocAsyncCtx2 + 236 | 0; //@line 21084
  HEAP32[$337 >> 2] = $120; //@line 21085
  $338 = $ReallocAsyncCtx2 + 240 | 0; //@line 21086
  HEAP32[$338 >> 2] = $122; //@line 21087
  $339 = $ReallocAsyncCtx2 + 244 | 0; //@line 21088
  HEAP32[$339 >> 2] = $124; //@line 21089
  $340 = $ReallocAsyncCtx2 + 248 | 0; //@line 21090
  HEAP32[$340 >> 2] = $126; //@line 21091
  $341 = $ReallocAsyncCtx2 + 252 | 0; //@line 21092
  HEAP32[$341 >> 2] = $128; //@line 21093
  $342 = $ReallocAsyncCtx2 + 256 | 0; //@line 21094
  HEAP32[$342 >> 2] = $130; //@line 21095
  $343 = $ReallocAsyncCtx2 + 260 | 0; //@line 21096
  HEAP32[$343 >> 2] = $132; //@line 21097
  $344 = $ReallocAsyncCtx2 + 264 | 0; //@line 21098
  HEAP32[$344 >> 2] = $134; //@line 21099
  sp = STACKTOP; //@line 21100
  return;
 } else if ((label | 0) == 14) {
  HEAP8[$124 >> 0] = HEAP8[$118 + ($137 & 255) >> 0] | 0; //@line 21108
  HEAP32[$96 >> 2] = $54; //@line 21109
  HEAP32[$80 >> 2] = (HEAPU8[$118 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$118 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$118 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 21130
  HEAP32[$86 >> 2] = 0; //@line 21131
  $385 = $$0$be + 6 << 24 >> 24; //@line 21132
  HEAP8[$62 >> 0] = HEAP8[$118 + ($$0$be + 5 & 255) >> 0] | 0; //@line 21136
  $391 = HEAP32[(HEAP32[$74 >> 2] | 0) + 8 >> 2] | 0; //@line 21139
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(268) | 0; //@line 21140
  $392 = FUNCTION_TABLE_iii[$391 & 31]($98, $92) | 0; //@line 21141
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 506; //@line 21144
   $393 = $ReallocAsyncCtx3 + 4 | 0; //@line 21145
   HEAP32[$393 >> 2] = $2; //@line 21146
   $394 = $ReallocAsyncCtx3 + 8 | 0; //@line 21147
   HEAP32[$394 >> 2] = $4; //@line 21148
   $395 = $ReallocAsyncCtx3 + 12 | 0; //@line 21149
   HEAP32[$395 >> 2] = $6; //@line 21150
   $396 = $ReallocAsyncCtx3 + 16 | 0; //@line 21151
   HEAP32[$396 >> 2] = $8; //@line 21152
   $397 = $ReallocAsyncCtx3 + 20 | 0; //@line 21153
   HEAP32[$397 >> 2] = $10; //@line 21154
   $398 = $ReallocAsyncCtx3 + 24 | 0; //@line 21155
   HEAP32[$398 >> 2] = $12; //@line 21156
   $399 = $ReallocAsyncCtx3 + 28 | 0; //@line 21157
   HEAP32[$399 >> 2] = $14; //@line 21158
   $400 = $ReallocAsyncCtx3 + 32 | 0; //@line 21159
   HEAP32[$400 >> 2] = $16; //@line 21160
   $401 = $ReallocAsyncCtx3 + 36 | 0; //@line 21161
   HEAP32[$401 >> 2] = $18; //@line 21162
   $402 = $ReallocAsyncCtx3 + 40 | 0; //@line 21163
   HEAP32[$402 >> 2] = $20; //@line 21164
   $403 = $ReallocAsyncCtx3 + 44 | 0; //@line 21165
   HEAP32[$403 >> 2] = $22; //@line 21166
   $404 = $ReallocAsyncCtx3 + 48 | 0; //@line 21167
   HEAP32[$404 >> 2] = $24; //@line 21168
   $405 = $ReallocAsyncCtx3 + 52 | 0; //@line 21169
   HEAP32[$405 >> 2] = $26; //@line 21170
   $406 = $ReallocAsyncCtx3 + 56 | 0; //@line 21171
   HEAP32[$406 >> 2] = $28; //@line 21172
   $407 = $ReallocAsyncCtx3 + 60 | 0; //@line 21173
   HEAP32[$407 >> 2] = $30; //@line 21174
   $408 = $ReallocAsyncCtx3 + 64 | 0; //@line 21175
   HEAP32[$408 >> 2] = $32; //@line 21176
   $409 = $ReallocAsyncCtx3 + 68 | 0; //@line 21177
   HEAP32[$409 >> 2] = $34; //@line 21178
   $410 = $ReallocAsyncCtx3 + 72 | 0; //@line 21179
   HEAP32[$410 >> 2] = $36; //@line 21180
   $411 = $ReallocAsyncCtx3 + 76 | 0; //@line 21181
   HEAP32[$411 >> 2] = $38; //@line 21182
   $412 = $ReallocAsyncCtx3 + 80 | 0; //@line 21183
   HEAP32[$412 >> 2] = $40; //@line 21184
   $413 = $ReallocAsyncCtx3 + 84 | 0; //@line 21185
   HEAP32[$413 >> 2] = $42; //@line 21186
   $414 = $ReallocAsyncCtx3 + 88 | 0; //@line 21187
   HEAP8[$414 >> 0] = $385; //@line 21188
   $415 = $ReallocAsyncCtx3 + 92 | 0; //@line 21189
   HEAP32[$415 >> 2] = $46; //@line 21190
   $416 = $ReallocAsyncCtx3 + 96 | 0; //@line 21191
   HEAP32[$416 >> 2] = $48; //@line 21192
   $417 = $ReallocAsyncCtx3 + 100 | 0; //@line 21193
   HEAP32[$417 >> 2] = $50; //@line 21194
   $418 = $ReallocAsyncCtx3 + 104 | 0; //@line 21195
   HEAP32[$418 >> 2] = $52; //@line 21196
   $419 = $ReallocAsyncCtx3 + 108 | 0; //@line 21197
   HEAP32[$419 >> 2] = $54; //@line 21198
   $420 = $ReallocAsyncCtx3 + 112 | 0; //@line 21199
   HEAP32[$420 >> 2] = $56; //@line 21200
   $421 = $ReallocAsyncCtx3 + 116 | 0; //@line 21201
   HEAP32[$421 >> 2] = $58; //@line 21202
   $422 = $ReallocAsyncCtx3 + 120 | 0; //@line 21203
   HEAP32[$422 >> 2] = $60; //@line 21204
   $423 = $ReallocAsyncCtx3 + 124 | 0; //@line 21205
   HEAP32[$423 >> 2] = $62; //@line 21206
   $424 = $ReallocAsyncCtx3 + 128 | 0; //@line 21207
   HEAP32[$424 >> 2] = $64; //@line 21208
   $425 = $ReallocAsyncCtx3 + 132 | 0; //@line 21209
   HEAP32[$425 >> 2] = $66; //@line 21210
   $426 = $ReallocAsyncCtx3 + 136 | 0; //@line 21211
   HEAP32[$426 >> 2] = $68; //@line 21212
   $427 = $ReallocAsyncCtx3 + 140 | 0; //@line 21213
   HEAP32[$427 >> 2] = $70; //@line 21214
   $428 = $ReallocAsyncCtx3 + 144 | 0; //@line 21215
   HEAP32[$428 >> 2] = $72; //@line 21216
   $429 = $ReallocAsyncCtx3 + 148 | 0; //@line 21217
   HEAP32[$429 >> 2] = $74; //@line 21218
   $430 = $ReallocAsyncCtx3 + 152 | 0; //@line 21219
   HEAP32[$430 >> 2] = $76; //@line 21220
   $431 = $ReallocAsyncCtx3 + 156 | 0; //@line 21221
   HEAP32[$431 >> 2] = $78; //@line 21222
   $432 = $ReallocAsyncCtx3 + 160 | 0; //@line 21223
   HEAP32[$432 >> 2] = $80; //@line 21224
   $433 = $ReallocAsyncCtx3 + 164 | 0; //@line 21225
   HEAP32[$433 >> 2] = $82; //@line 21226
   $434 = $ReallocAsyncCtx3 + 168 | 0; //@line 21227
   HEAP32[$434 >> 2] = $84; //@line 21228
   $435 = $ReallocAsyncCtx3 + 172 | 0; //@line 21229
   HEAP32[$435 >> 2] = $86; //@line 21230
   $436 = $ReallocAsyncCtx3 + 176 | 0; //@line 21231
   HEAP32[$436 >> 2] = $88; //@line 21232
   $437 = $ReallocAsyncCtx3 + 180 | 0; //@line 21233
   HEAP32[$437 >> 2] = $90; //@line 21234
   $438 = $ReallocAsyncCtx3 + 184 | 0; //@line 21235
   HEAP32[$438 >> 2] = $92; //@line 21236
   $439 = $ReallocAsyncCtx3 + 188 | 0; //@line 21237
   HEAP32[$439 >> 2] = $94; //@line 21238
   $440 = $ReallocAsyncCtx3 + 192 | 0; //@line 21239
   HEAP32[$440 >> 2] = $96; //@line 21240
   $441 = $ReallocAsyncCtx3 + 196 | 0; //@line 21241
   HEAP32[$441 >> 2] = $98; //@line 21242
   $442 = $ReallocAsyncCtx3 + 200 | 0; //@line 21243
   HEAP32[$442 >> 2] = $100; //@line 21244
   $443 = $ReallocAsyncCtx3 + 204 | 0; //@line 21245
   HEAP32[$443 >> 2] = $102; //@line 21246
   $444 = $ReallocAsyncCtx3 + 208 | 0; //@line 21247
   HEAP32[$444 >> 2] = $104; //@line 21248
   $445 = $ReallocAsyncCtx3 + 212 | 0; //@line 21249
   HEAP8[$445 >> 0] = $106; //@line 21250
   $446 = $ReallocAsyncCtx3 + 213 | 0; //@line 21251
   HEAP8[$446 >> 0] = $108; //@line 21252
   $447 = $ReallocAsyncCtx3 + 216 | 0; //@line 21253
   HEAP32[$447 >> 2] = $110; //@line 21254
   $448 = $ReallocAsyncCtx3 + 220 | 0; //@line 21255
   HEAP32[$448 >> 2] = $112; //@line 21256
   $449 = $ReallocAsyncCtx3 + 224 | 0; //@line 21257
   HEAP8[$449 >> 0] = $114; //@line 21258
   $450 = $ReallocAsyncCtx3 + 228 | 0; //@line 21259
   HEAP32[$450 >> 2] = $116; //@line 21260
   $451 = $ReallocAsyncCtx3 + 232 | 0; //@line 21261
   HEAP32[$451 >> 2] = $118; //@line 21262
   $452 = $ReallocAsyncCtx3 + 236 | 0; //@line 21263
   HEAP32[$452 >> 2] = $120; //@line 21264
   $453 = $ReallocAsyncCtx3 + 240 | 0; //@line 21265
   HEAP32[$453 >> 2] = $122; //@line 21266
   $454 = $ReallocAsyncCtx3 + 244 | 0; //@line 21267
   HEAP32[$454 >> 2] = $124; //@line 21268
   $455 = $ReallocAsyncCtx3 + 248 | 0; //@line 21269
   HEAP32[$455 >> 2] = $126; //@line 21270
   $456 = $ReallocAsyncCtx3 + 252 | 0; //@line 21271
   HEAP32[$456 >> 2] = $128; //@line 21272
   $457 = $ReallocAsyncCtx3 + 256 | 0; //@line 21273
   HEAP32[$457 >> 2] = $130; //@line 21274
   $458 = $ReallocAsyncCtx3 + 260 | 0; //@line 21275
   HEAP32[$458 >> 2] = $132; //@line 21276
   $459 = $ReallocAsyncCtx3 + 264 | 0; //@line 21277
   HEAP32[$459 >> 2] = $134; //@line 21278
   sp = STACKTOP; //@line 21279
   return;
  }
  HEAP8[___async_retval >> 0] = $392; //@line 21283
  ___async_unwind = 0; //@line 21284
  HEAP32[$ReallocAsyncCtx3 >> 2] = 506; //@line 21285
  $393 = $ReallocAsyncCtx3 + 4 | 0; //@line 21286
  HEAP32[$393 >> 2] = $2; //@line 21287
  $394 = $ReallocAsyncCtx3 + 8 | 0; //@line 21288
  HEAP32[$394 >> 2] = $4; //@line 21289
  $395 = $ReallocAsyncCtx3 + 12 | 0; //@line 21290
  HEAP32[$395 >> 2] = $6; //@line 21291
  $396 = $ReallocAsyncCtx3 + 16 | 0; //@line 21292
  HEAP32[$396 >> 2] = $8; //@line 21293
  $397 = $ReallocAsyncCtx3 + 20 | 0; //@line 21294
  HEAP32[$397 >> 2] = $10; //@line 21295
  $398 = $ReallocAsyncCtx3 + 24 | 0; //@line 21296
  HEAP32[$398 >> 2] = $12; //@line 21297
  $399 = $ReallocAsyncCtx3 + 28 | 0; //@line 21298
  HEAP32[$399 >> 2] = $14; //@line 21299
  $400 = $ReallocAsyncCtx3 + 32 | 0; //@line 21300
  HEAP32[$400 >> 2] = $16; //@line 21301
  $401 = $ReallocAsyncCtx3 + 36 | 0; //@line 21302
  HEAP32[$401 >> 2] = $18; //@line 21303
  $402 = $ReallocAsyncCtx3 + 40 | 0; //@line 21304
  HEAP32[$402 >> 2] = $20; //@line 21305
  $403 = $ReallocAsyncCtx3 + 44 | 0; //@line 21306
  HEAP32[$403 >> 2] = $22; //@line 21307
  $404 = $ReallocAsyncCtx3 + 48 | 0; //@line 21308
  HEAP32[$404 >> 2] = $24; //@line 21309
  $405 = $ReallocAsyncCtx3 + 52 | 0; //@line 21310
  HEAP32[$405 >> 2] = $26; //@line 21311
  $406 = $ReallocAsyncCtx3 + 56 | 0; //@line 21312
  HEAP32[$406 >> 2] = $28; //@line 21313
  $407 = $ReallocAsyncCtx3 + 60 | 0; //@line 21314
  HEAP32[$407 >> 2] = $30; //@line 21315
  $408 = $ReallocAsyncCtx3 + 64 | 0; //@line 21316
  HEAP32[$408 >> 2] = $32; //@line 21317
  $409 = $ReallocAsyncCtx3 + 68 | 0; //@line 21318
  HEAP32[$409 >> 2] = $34; //@line 21319
  $410 = $ReallocAsyncCtx3 + 72 | 0; //@line 21320
  HEAP32[$410 >> 2] = $36; //@line 21321
  $411 = $ReallocAsyncCtx3 + 76 | 0; //@line 21322
  HEAP32[$411 >> 2] = $38; //@line 21323
  $412 = $ReallocAsyncCtx3 + 80 | 0; //@line 21324
  HEAP32[$412 >> 2] = $40; //@line 21325
  $413 = $ReallocAsyncCtx3 + 84 | 0; //@line 21326
  HEAP32[$413 >> 2] = $42; //@line 21327
  $414 = $ReallocAsyncCtx3 + 88 | 0; //@line 21328
  HEAP8[$414 >> 0] = $385; //@line 21329
  $415 = $ReallocAsyncCtx3 + 92 | 0; //@line 21330
  HEAP32[$415 >> 2] = $46; //@line 21331
  $416 = $ReallocAsyncCtx3 + 96 | 0; //@line 21332
  HEAP32[$416 >> 2] = $48; //@line 21333
  $417 = $ReallocAsyncCtx3 + 100 | 0; //@line 21334
  HEAP32[$417 >> 2] = $50; //@line 21335
  $418 = $ReallocAsyncCtx3 + 104 | 0; //@line 21336
  HEAP32[$418 >> 2] = $52; //@line 21337
  $419 = $ReallocAsyncCtx3 + 108 | 0; //@line 21338
  HEAP32[$419 >> 2] = $54; //@line 21339
  $420 = $ReallocAsyncCtx3 + 112 | 0; //@line 21340
  HEAP32[$420 >> 2] = $56; //@line 21341
  $421 = $ReallocAsyncCtx3 + 116 | 0; //@line 21342
  HEAP32[$421 >> 2] = $58; //@line 21343
  $422 = $ReallocAsyncCtx3 + 120 | 0; //@line 21344
  HEAP32[$422 >> 2] = $60; //@line 21345
  $423 = $ReallocAsyncCtx3 + 124 | 0; //@line 21346
  HEAP32[$423 >> 2] = $62; //@line 21347
  $424 = $ReallocAsyncCtx3 + 128 | 0; //@line 21348
  HEAP32[$424 >> 2] = $64; //@line 21349
  $425 = $ReallocAsyncCtx3 + 132 | 0; //@line 21350
  HEAP32[$425 >> 2] = $66; //@line 21351
  $426 = $ReallocAsyncCtx3 + 136 | 0; //@line 21352
  HEAP32[$426 >> 2] = $68; //@line 21353
  $427 = $ReallocAsyncCtx3 + 140 | 0; //@line 21354
  HEAP32[$427 >> 2] = $70; //@line 21355
  $428 = $ReallocAsyncCtx3 + 144 | 0; //@line 21356
  HEAP32[$428 >> 2] = $72; //@line 21357
  $429 = $ReallocAsyncCtx3 + 148 | 0; //@line 21358
  HEAP32[$429 >> 2] = $74; //@line 21359
  $430 = $ReallocAsyncCtx3 + 152 | 0; //@line 21360
  HEAP32[$430 >> 2] = $76; //@line 21361
  $431 = $ReallocAsyncCtx3 + 156 | 0; //@line 21362
  HEAP32[$431 >> 2] = $78; //@line 21363
  $432 = $ReallocAsyncCtx3 + 160 | 0; //@line 21364
  HEAP32[$432 >> 2] = $80; //@line 21365
  $433 = $ReallocAsyncCtx3 + 164 | 0; //@line 21366
  HEAP32[$433 >> 2] = $82; //@line 21367
  $434 = $ReallocAsyncCtx3 + 168 | 0; //@line 21368
  HEAP32[$434 >> 2] = $84; //@line 21369
  $435 = $ReallocAsyncCtx3 + 172 | 0; //@line 21370
  HEAP32[$435 >> 2] = $86; //@line 21371
  $436 = $ReallocAsyncCtx3 + 176 | 0; //@line 21372
  HEAP32[$436 >> 2] = $88; //@line 21373
  $437 = $ReallocAsyncCtx3 + 180 | 0; //@line 21374
  HEAP32[$437 >> 2] = $90; //@line 21375
  $438 = $ReallocAsyncCtx3 + 184 | 0; //@line 21376
  HEAP32[$438 >> 2] = $92; //@line 21377
  $439 = $ReallocAsyncCtx3 + 188 | 0; //@line 21378
  HEAP32[$439 >> 2] = $94; //@line 21379
  $440 = $ReallocAsyncCtx3 + 192 | 0; //@line 21380
  HEAP32[$440 >> 2] = $96; //@line 21381
  $441 = $ReallocAsyncCtx3 + 196 | 0; //@line 21382
  HEAP32[$441 >> 2] = $98; //@line 21383
  $442 = $ReallocAsyncCtx3 + 200 | 0; //@line 21384
  HEAP32[$442 >> 2] = $100; //@line 21385
  $443 = $ReallocAsyncCtx3 + 204 | 0; //@line 21386
  HEAP32[$443 >> 2] = $102; //@line 21387
  $444 = $ReallocAsyncCtx3 + 208 | 0; //@line 21388
  HEAP32[$444 >> 2] = $104; //@line 21389
  $445 = $ReallocAsyncCtx3 + 212 | 0; //@line 21390
  HEAP8[$445 >> 0] = $106; //@line 21391
  $446 = $ReallocAsyncCtx3 + 213 | 0; //@line 21392
  HEAP8[$446 >> 0] = $108; //@line 21393
  $447 = $ReallocAsyncCtx3 + 216 | 0; //@line 21394
  HEAP32[$447 >> 2] = $110; //@line 21395
  $448 = $ReallocAsyncCtx3 + 220 | 0; //@line 21396
  HEAP32[$448 >> 2] = $112; //@line 21397
  $449 = $ReallocAsyncCtx3 + 224 | 0; //@line 21398
  HEAP8[$449 >> 0] = $114; //@line 21399
  $450 = $ReallocAsyncCtx3 + 228 | 0; //@line 21400
  HEAP32[$450 >> 2] = $116; //@line 21401
  $451 = $ReallocAsyncCtx3 + 232 | 0; //@line 21402
  HEAP32[$451 >> 2] = $118; //@line 21403
  $452 = $ReallocAsyncCtx3 + 236 | 0; //@line 21404
  HEAP32[$452 >> 2] = $120; //@line 21405
  $453 = $ReallocAsyncCtx3 + 240 | 0; //@line 21406
  HEAP32[$453 >> 2] = $122; //@line 21407
  $454 = $ReallocAsyncCtx3 + 244 | 0; //@line 21408
  HEAP32[$454 >> 2] = $124; //@line 21409
  $455 = $ReallocAsyncCtx3 + 248 | 0; //@line 21410
  HEAP32[$455 >> 2] = $126; //@line 21411
  $456 = $ReallocAsyncCtx3 + 252 | 0; //@line 21412
  HEAP32[$456 >> 2] = $128; //@line 21413
  $457 = $ReallocAsyncCtx3 + 256 | 0; //@line 21414
  HEAP32[$457 >> 2] = $130; //@line 21415
  $458 = $ReallocAsyncCtx3 + 260 | 0; //@line 21416
  HEAP32[$458 >> 2] = $132; //@line 21417
  $459 = $ReallocAsyncCtx3 + 264 | 0; //@line 21418
  HEAP32[$459 >> 2] = $134; //@line 21419
  sp = STACKTOP; //@line 21420
  return;
 } else if ((label | 0) == 22) {
  $490 = $$0$be + 2 << 24 >> 24; //@line 21424
  $493 = HEAP8[$118 + ($137 & 255) >> 0] | 0; //@line 21427
  HEAP8[$32 >> 0] = 0; //@line 21428
  $494 = $493 & 255; //@line 21429
  HEAP8[$38 >> 0] = $494 >>> 5 & 1; //@line 21433
  if ($494 & 16 | 0) {
   HEAP8[$32 >> 0] = 1; //@line 21437
  }
  HEAP8[$22 >> 0] = $494 & 15; //@line 21441
  $503 = HEAP32[(HEAP32[$30 >> 2] | 0) + 44 >> 2] | 0; //@line 21444
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(272) | 0; //@line 21445
  $504 = FUNCTION_TABLE_iii[$503 & 31]($98, $68) | 0; //@line 21446
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 507; //@line 21449
   $505 = $ReallocAsyncCtx4 + 4 | 0; //@line 21450
   HEAP32[$505 >> 2] = $2; //@line 21451
   $506 = $ReallocAsyncCtx4 + 8 | 0; //@line 21452
   HEAP32[$506 >> 2] = $4; //@line 21453
   $507 = $ReallocAsyncCtx4 + 12 | 0; //@line 21454
   HEAP32[$507 >> 2] = $6; //@line 21455
   $508 = $ReallocAsyncCtx4 + 16 | 0; //@line 21456
   HEAP32[$508 >> 2] = $8; //@line 21457
   $509 = $ReallocAsyncCtx4 + 20 | 0; //@line 21458
   HEAP32[$509 >> 2] = $10; //@line 21459
   $510 = $ReallocAsyncCtx4 + 24 | 0; //@line 21460
   HEAP32[$510 >> 2] = $12; //@line 21461
   $511 = $ReallocAsyncCtx4 + 28 | 0; //@line 21462
   HEAP32[$511 >> 2] = $14; //@line 21463
   $512 = $ReallocAsyncCtx4 + 32 | 0; //@line 21464
   HEAP32[$512 >> 2] = $16; //@line 21465
   $513 = $ReallocAsyncCtx4 + 36 | 0; //@line 21466
   HEAP32[$513 >> 2] = $18; //@line 21467
   $514 = $ReallocAsyncCtx4 + 40 | 0; //@line 21468
   HEAP32[$514 >> 2] = $20; //@line 21469
   $515 = $ReallocAsyncCtx4 + 44 | 0; //@line 21470
   HEAP32[$515 >> 2] = $22; //@line 21471
   $516 = $ReallocAsyncCtx4 + 48 | 0; //@line 21472
   HEAP32[$516 >> 2] = $24; //@line 21473
   $517 = $ReallocAsyncCtx4 + 52 | 0; //@line 21474
   HEAP8[$517 >> 0] = $490; //@line 21475
   $518 = $ReallocAsyncCtx4 + 56 | 0; //@line 21476
   HEAP32[$518 >> 2] = $26; //@line 21477
   $519 = $ReallocAsyncCtx4 + 60 | 0; //@line 21478
   HEAP32[$519 >> 2] = $28; //@line 21479
   $520 = $ReallocAsyncCtx4 + 64 | 0; //@line 21480
   HEAP32[$520 >> 2] = $30; //@line 21481
   $521 = $ReallocAsyncCtx4 + 68 | 0; //@line 21482
   HEAP32[$521 >> 2] = $32; //@line 21483
   $522 = $ReallocAsyncCtx4 + 72 | 0; //@line 21484
   HEAP32[$522 >> 2] = $34; //@line 21485
   $523 = $ReallocAsyncCtx4 + 76 | 0; //@line 21486
   HEAP32[$523 >> 2] = $36; //@line 21487
   $524 = $ReallocAsyncCtx4 + 80 | 0; //@line 21488
   HEAP32[$524 >> 2] = $38; //@line 21489
   $525 = $ReallocAsyncCtx4 + 84 | 0; //@line 21490
   HEAP32[$525 >> 2] = $40; //@line 21491
   $526 = $ReallocAsyncCtx4 + 88 | 0; //@line 21492
   HEAP32[$526 >> 2] = $42; //@line 21493
   $527 = $ReallocAsyncCtx4 + 92 | 0; //@line 21494
   HEAP32[$527 >> 2] = $46; //@line 21495
   $528 = $ReallocAsyncCtx4 + 96 | 0; //@line 21496
   HEAP32[$528 >> 2] = $48; //@line 21497
   $529 = $ReallocAsyncCtx4 + 100 | 0; //@line 21498
   HEAP32[$529 >> 2] = $50; //@line 21499
   $530 = $ReallocAsyncCtx4 + 104 | 0; //@line 21500
   HEAP32[$530 >> 2] = $52; //@line 21501
   $531 = $ReallocAsyncCtx4 + 108 | 0; //@line 21502
   HEAP32[$531 >> 2] = $54; //@line 21503
   $532 = $ReallocAsyncCtx4 + 112 | 0; //@line 21504
   HEAP32[$532 >> 2] = $56; //@line 21505
   $533 = $ReallocAsyncCtx4 + 116 | 0; //@line 21506
   HEAP32[$533 >> 2] = $58; //@line 21507
   $534 = $ReallocAsyncCtx4 + 120 | 0; //@line 21508
   HEAP32[$534 >> 2] = $60; //@line 21509
   $535 = $ReallocAsyncCtx4 + 124 | 0; //@line 21510
   HEAP32[$535 >> 2] = $62; //@line 21511
   $536 = $ReallocAsyncCtx4 + 128 | 0; //@line 21512
   HEAP32[$536 >> 2] = $64; //@line 21513
   $537 = $ReallocAsyncCtx4 + 132 | 0; //@line 21514
   HEAP32[$537 >> 2] = $66; //@line 21515
   $538 = $ReallocAsyncCtx4 + 136 | 0; //@line 21516
   HEAP32[$538 >> 2] = $68; //@line 21517
   $539 = $ReallocAsyncCtx4 + 140 | 0; //@line 21518
   HEAP32[$539 >> 2] = $70; //@line 21519
   $540 = $ReallocAsyncCtx4 + 144 | 0; //@line 21520
   HEAP32[$540 >> 2] = $72; //@line 21521
   $541 = $ReallocAsyncCtx4 + 148 | 0; //@line 21522
   HEAP32[$541 >> 2] = $74; //@line 21523
   $542 = $ReallocAsyncCtx4 + 152 | 0; //@line 21524
   HEAP32[$542 >> 2] = $76; //@line 21525
   $543 = $ReallocAsyncCtx4 + 156 | 0; //@line 21526
   HEAP32[$543 >> 2] = $$096$be; //@line 21527
   $544 = $ReallocAsyncCtx4 + 160 | 0; //@line 21528
   HEAP32[$544 >> 2] = $78; //@line 21529
   $545 = $ReallocAsyncCtx4 + 164 | 0; //@line 21530
   HEAP32[$545 >> 2] = $80; //@line 21531
   $546 = $ReallocAsyncCtx4 + 168 | 0; //@line 21532
   HEAP32[$546 >> 2] = $82; //@line 21533
   $547 = $ReallocAsyncCtx4 + 172 | 0; //@line 21534
   HEAP32[$547 >> 2] = $84; //@line 21535
   $548 = $ReallocAsyncCtx4 + 176 | 0; //@line 21536
   HEAP32[$548 >> 2] = $86; //@line 21537
   $549 = $ReallocAsyncCtx4 + 180 | 0; //@line 21538
   HEAP32[$549 >> 2] = $88; //@line 21539
   $550 = $ReallocAsyncCtx4 + 184 | 0; //@line 21540
   HEAP32[$550 >> 2] = $90; //@line 21541
   $551 = $ReallocAsyncCtx4 + 188 | 0; //@line 21542
   HEAP32[$551 >> 2] = $92; //@line 21543
   $552 = $ReallocAsyncCtx4 + 192 | 0; //@line 21544
   HEAP32[$552 >> 2] = $94; //@line 21545
   $553 = $ReallocAsyncCtx4 + 196 | 0; //@line 21546
   HEAP32[$553 >> 2] = $96; //@line 21547
   $554 = $ReallocAsyncCtx4 + 200 | 0; //@line 21548
   HEAP32[$554 >> 2] = $98; //@line 21549
   $555 = $ReallocAsyncCtx4 + 204 | 0; //@line 21550
   HEAP32[$555 >> 2] = $100; //@line 21551
   $556 = $ReallocAsyncCtx4 + 208 | 0; //@line 21552
   HEAP32[$556 >> 2] = $102; //@line 21553
   $557 = $ReallocAsyncCtx4 + 212 | 0; //@line 21554
   HEAP32[$557 >> 2] = $104; //@line 21555
   $558 = $ReallocAsyncCtx4 + 216 | 0; //@line 21556
   HEAP8[$558 >> 0] = $106; //@line 21557
   $559 = $ReallocAsyncCtx4 + 217 | 0; //@line 21558
   HEAP8[$559 >> 0] = $108; //@line 21559
   $560 = $ReallocAsyncCtx4 + 220 | 0; //@line 21560
   HEAP32[$560 >> 2] = $110; //@line 21561
   $561 = $ReallocAsyncCtx4 + 224 | 0; //@line 21562
   HEAP32[$561 >> 2] = $112; //@line 21563
   $562 = $ReallocAsyncCtx4 + 228 | 0; //@line 21564
   HEAP8[$562 >> 0] = $114; //@line 21565
   $563 = $ReallocAsyncCtx4 + 232 | 0; //@line 21566
   HEAP32[$563 >> 2] = $116; //@line 21567
   $564 = $ReallocAsyncCtx4 + 236 | 0; //@line 21568
   HEAP32[$564 >> 2] = $118; //@line 21569
   $565 = $ReallocAsyncCtx4 + 240 | 0; //@line 21570
   HEAP32[$565 >> 2] = $120; //@line 21571
   $566 = $ReallocAsyncCtx4 + 244 | 0; //@line 21572
   HEAP32[$566 >> 2] = $122; //@line 21573
   $567 = $ReallocAsyncCtx4 + 248 | 0; //@line 21574
   HEAP32[$567 >> 2] = $124; //@line 21575
   $568 = $ReallocAsyncCtx4 + 252 | 0; //@line 21576
   HEAP32[$568 >> 2] = $126; //@line 21577
   $569 = $ReallocAsyncCtx4 + 256 | 0; //@line 21578
   HEAP32[$569 >> 2] = $128; //@line 21579
   $570 = $ReallocAsyncCtx4 + 260 | 0; //@line 21580
   HEAP32[$570 >> 2] = $130; //@line 21581
   $571 = $ReallocAsyncCtx4 + 264 | 0; //@line 21582
   HEAP32[$571 >> 2] = $132; //@line 21583
   $572 = $ReallocAsyncCtx4 + 268 | 0; //@line 21584
   HEAP32[$572 >> 2] = $134; //@line 21585
   sp = STACKTOP; //@line 21586
   return;
  }
  HEAP8[___async_retval >> 0] = $504 & 1; //@line 21591
  ___async_unwind = 0; //@line 21592
  HEAP32[$ReallocAsyncCtx4 >> 2] = 507; //@line 21593
  $505 = $ReallocAsyncCtx4 + 4 | 0; //@line 21594
  HEAP32[$505 >> 2] = $2; //@line 21595
  $506 = $ReallocAsyncCtx4 + 8 | 0; //@line 21596
  HEAP32[$506 >> 2] = $4; //@line 21597
  $507 = $ReallocAsyncCtx4 + 12 | 0; //@line 21598
  HEAP32[$507 >> 2] = $6; //@line 21599
  $508 = $ReallocAsyncCtx4 + 16 | 0; //@line 21600
  HEAP32[$508 >> 2] = $8; //@line 21601
  $509 = $ReallocAsyncCtx4 + 20 | 0; //@line 21602
  HEAP32[$509 >> 2] = $10; //@line 21603
  $510 = $ReallocAsyncCtx4 + 24 | 0; //@line 21604
  HEAP32[$510 >> 2] = $12; //@line 21605
  $511 = $ReallocAsyncCtx4 + 28 | 0; //@line 21606
  HEAP32[$511 >> 2] = $14; //@line 21607
  $512 = $ReallocAsyncCtx4 + 32 | 0; //@line 21608
  HEAP32[$512 >> 2] = $16; //@line 21609
  $513 = $ReallocAsyncCtx4 + 36 | 0; //@line 21610
  HEAP32[$513 >> 2] = $18; //@line 21611
  $514 = $ReallocAsyncCtx4 + 40 | 0; //@line 21612
  HEAP32[$514 >> 2] = $20; //@line 21613
  $515 = $ReallocAsyncCtx4 + 44 | 0; //@line 21614
  HEAP32[$515 >> 2] = $22; //@line 21615
  $516 = $ReallocAsyncCtx4 + 48 | 0; //@line 21616
  HEAP32[$516 >> 2] = $24; //@line 21617
  $517 = $ReallocAsyncCtx4 + 52 | 0; //@line 21618
  HEAP8[$517 >> 0] = $490; //@line 21619
  $518 = $ReallocAsyncCtx4 + 56 | 0; //@line 21620
  HEAP32[$518 >> 2] = $26; //@line 21621
  $519 = $ReallocAsyncCtx4 + 60 | 0; //@line 21622
  HEAP32[$519 >> 2] = $28; //@line 21623
  $520 = $ReallocAsyncCtx4 + 64 | 0; //@line 21624
  HEAP32[$520 >> 2] = $30; //@line 21625
  $521 = $ReallocAsyncCtx4 + 68 | 0; //@line 21626
  HEAP32[$521 >> 2] = $32; //@line 21627
  $522 = $ReallocAsyncCtx4 + 72 | 0; //@line 21628
  HEAP32[$522 >> 2] = $34; //@line 21629
  $523 = $ReallocAsyncCtx4 + 76 | 0; //@line 21630
  HEAP32[$523 >> 2] = $36; //@line 21631
  $524 = $ReallocAsyncCtx4 + 80 | 0; //@line 21632
  HEAP32[$524 >> 2] = $38; //@line 21633
  $525 = $ReallocAsyncCtx4 + 84 | 0; //@line 21634
  HEAP32[$525 >> 2] = $40; //@line 21635
  $526 = $ReallocAsyncCtx4 + 88 | 0; //@line 21636
  HEAP32[$526 >> 2] = $42; //@line 21637
  $527 = $ReallocAsyncCtx4 + 92 | 0; //@line 21638
  HEAP32[$527 >> 2] = $46; //@line 21639
  $528 = $ReallocAsyncCtx4 + 96 | 0; //@line 21640
  HEAP32[$528 >> 2] = $48; //@line 21641
  $529 = $ReallocAsyncCtx4 + 100 | 0; //@line 21642
  HEAP32[$529 >> 2] = $50; //@line 21643
  $530 = $ReallocAsyncCtx4 + 104 | 0; //@line 21644
  HEAP32[$530 >> 2] = $52; //@line 21645
  $531 = $ReallocAsyncCtx4 + 108 | 0; //@line 21646
  HEAP32[$531 >> 2] = $54; //@line 21647
  $532 = $ReallocAsyncCtx4 + 112 | 0; //@line 21648
  HEAP32[$532 >> 2] = $56; //@line 21649
  $533 = $ReallocAsyncCtx4 + 116 | 0; //@line 21650
  HEAP32[$533 >> 2] = $58; //@line 21651
  $534 = $ReallocAsyncCtx4 + 120 | 0; //@line 21652
  HEAP32[$534 >> 2] = $60; //@line 21653
  $535 = $ReallocAsyncCtx4 + 124 | 0; //@line 21654
  HEAP32[$535 >> 2] = $62; //@line 21655
  $536 = $ReallocAsyncCtx4 + 128 | 0; //@line 21656
  HEAP32[$536 >> 2] = $64; //@line 21657
  $537 = $ReallocAsyncCtx4 + 132 | 0; //@line 21658
  HEAP32[$537 >> 2] = $66; //@line 21659
  $538 = $ReallocAsyncCtx4 + 136 | 0; //@line 21660
  HEAP32[$538 >> 2] = $68; //@line 21661
  $539 = $ReallocAsyncCtx4 + 140 | 0; //@line 21662
  HEAP32[$539 >> 2] = $70; //@line 21663
  $540 = $ReallocAsyncCtx4 + 144 | 0; //@line 21664
  HEAP32[$540 >> 2] = $72; //@line 21665
  $541 = $ReallocAsyncCtx4 + 148 | 0; //@line 21666
  HEAP32[$541 >> 2] = $74; //@line 21667
  $542 = $ReallocAsyncCtx4 + 152 | 0; //@line 21668
  HEAP32[$542 >> 2] = $76; //@line 21669
  $543 = $ReallocAsyncCtx4 + 156 | 0; //@line 21670
  HEAP32[$543 >> 2] = $$096$be; //@line 21671
  $544 = $ReallocAsyncCtx4 + 160 | 0; //@line 21672
  HEAP32[$544 >> 2] = $78; //@line 21673
  $545 = $ReallocAsyncCtx4 + 164 | 0; //@line 21674
  HEAP32[$545 >> 2] = $80; //@line 21675
  $546 = $ReallocAsyncCtx4 + 168 | 0; //@line 21676
  HEAP32[$546 >> 2] = $82; //@line 21677
  $547 = $ReallocAsyncCtx4 + 172 | 0; //@line 21678
  HEAP32[$547 >> 2] = $84; //@line 21679
  $548 = $ReallocAsyncCtx4 + 176 | 0; //@line 21680
  HEAP32[$548 >> 2] = $86; //@line 21681
  $549 = $ReallocAsyncCtx4 + 180 | 0; //@line 21682
  HEAP32[$549 >> 2] = $88; //@line 21683
  $550 = $ReallocAsyncCtx4 + 184 | 0; //@line 21684
  HEAP32[$550 >> 2] = $90; //@line 21685
  $551 = $ReallocAsyncCtx4 + 188 | 0; //@line 21686
  HEAP32[$551 >> 2] = $92; //@line 21687
  $552 = $ReallocAsyncCtx4 + 192 | 0; //@line 21688
  HEAP32[$552 >> 2] = $94; //@line 21689
  $553 = $ReallocAsyncCtx4 + 196 | 0; //@line 21690
  HEAP32[$553 >> 2] = $96; //@line 21691
  $554 = $ReallocAsyncCtx4 + 200 | 0; //@line 21692
  HEAP32[$554 >> 2] = $98; //@line 21693
  $555 = $ReallocAsyncCtx4 + 204 | 0; //@line 21694
  HEAP32[$555 >> 2] = $100; //@line 21695
  $556 = $ReallocAsyncCtx4 + 208 | 0; //@line 21696
  HEAP32[$556 >> 2] = $102; //@line 21697
  $557 = $ReallocAsyncCtx4 + 212 | 0; //@line 21698
  HEAP32[$557 >> 2] = $104; //@line 21699
  $558 = $ReallocAsyncCtx4 + 216 | 0; //@line 21700
  HEAP8[$558 >> 0] = $106; //@line 21701
  $559 = $ReallocAsyncCtx4 + 217 | 0; //@line 21702
  HEAP8[$559 >> 0] = $108; //@line 21703
  $560 = $ReallocAsyncCtx4 + 220 | 0; //@line 21704
  HEAP32[$560 >> 2] = $110; //@line 21705
  $561 = $ReallocAsyncCtx4 + 224 | 0; //@line 21706
  HEAP32[$561 >> 2] = $112; //@line 21707
  $562 = $ReallocAsyncCtx4 + 228 | 0; //@line 21708
  HEAP8[$562 >> 0] = $114; //@line 21709
  $563 = $ReallocAsyncCtx4 + 232 | 0; //@line 21710
  HEAP32[$563 >> 2] = $116; //@line 21711
  $564 = $ReallocAsyncCtx4 + 236 | 0; //@line 21712
  HEAP32[$564 >> 2] = $118; //@line 21713
  $565 = $ReallocAsyncCtx4 + 240 | 0; //@line 21714
  HEAP32[$565 >> 2] = $120; //@line 21715
  $566 = $ReallocAsyncCtx4 + 244 | 0; //@line 21716
  HEAP32[$566 >> 2] = $122; //@line 21717
  $567 = $ReallocAsyncCtx4 + 248 | 0; //@line 21718
  HEAP32[$567 >> 2] = $124; //@line 21719
  $568 = $ReallocAsyncCtx4 + 252 | 0; //@line 21720
  HEAP32[$568 >> 2] = $126; //@line 21721
  $569 = $ReallocAsyncCtx4 + 256 | 0; //@line 21722
  HEAP32[$569 >> 2] = $128; //@line 21723
  $570 = $ReallocAsyncCtx4 + 260 | 0; //@line 21724
  HEAP32[$570 >> 2] = $130; //@line 21725
  $571 = $ReallocAsyncCtx4 + 264 | 0; //@line 21726
  HEAP32[$571 >> 2] = $132; //@line 21727
  $572 = $ReallocAsyncCtx4 + 268 | 0; //@line 21728
  HEAP32[$572 >> 2] = $134; //@line 21729
  sp = STACKTOP; //@line 21730
  return;
 } else if ((label | 0) == 27) {
  HEAP8[$132 >> 0] = HEAP8[$118 + ($137 & 255) >> 0] | 0; //@line 21738
  $590 = $$0$be + 5 << 24 >> 24; //@line 21751
  HEAP32[$130 >> 2] = (HEAPU8[$118 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$118 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$118 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 21759
  $600 = HEAP32[(HEAP32[$104 >> 2] | 0) + 48 >> 2] | 0; //@line 21762
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(268) | 0; //@line 21763
  $601 = FUNCTION_TABLE_iii[$600 & 31]($98, $60) | 0; //@line 21764
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 508; //@line 21767
   $602 = $ReallocAsyncCtx5 + 4 | 0; //@line 21768
   HEAP32[$602 >> 2] = $2; //@line 21769
   $603 = $ReallocAsyncCtx5 + 8 | 0; //@line 21770
   HEAP32[$603 >> 2] = $4; //@line 21771
   $604 = $ReallocAsyncCtx5 + 12 | 0; //@line 21772
   HEAP32[$604 >> 2] = $6; //@line 21773
   $605 = $ReallocAsyncCtx5 + 16 | 0; //@line 21774
   HEAP32[$605 >> 2] = $8; //@line 21775
   $606 = $ReallocAsyncCtx5 + 20 | 0; //@line 21776
   HEAP32[$606 >> 2] = $10; //@line 21777
   $607 = $ReallocAsyncCtx5 + 24 | 0; //@line 21778
   HEAP32[$607 >> 2] = $12; //@line 21779
   $608 = $ReallocAsyncCtx5 + 28 | 0; //@line 21780
   HEAP32[$608 >> 2] = $14; //@line 21781
   $609 = $ReallocAsyncCtx5 + 32 | 0; //@line 21782
   HEAP32[$609 >> 2] = $16; //@line 21783
   $610 = $ReallocAsyncCtx5 + 36 | 0; //@line 21784
   HEAP32[$610 >> 2] = $18; //@line 21785
   $611 = $ReallocAsyncCtx5 + 40 | 0; //@line 21786
   HEAP32[$611 >> 2] = $20; //@line 21787
   $612 = $ReallocAsyncCtx5 + 44 | 0; //@line 21788
   HEAP32[$612 >> 2] = $22; //@line 21789
   $613 = $ReallocAsyncCtx5 + 48 | 0; //@line 21790
   HEAP32[$613 >> 2] = $24; //@line 21791
   $614 = $ReallocAsyncCtx5 + 52 | 0; //@line 21792
   HEAP32[$614 >> 2] = $26; //@line 21793
   $615 = $ReallocAsyncCtx5 + 56 | 0; //@line 21794
   HEAP32[$615 >> 2] = $28; //@line 21795
   $616 = $ReallocAsyncCtx5 + 60 | 0; //@line 21796
   HEAP32[$616 >> 2] = $30; //@line 21797
   $617 = $ReallocAsyncCtx5 + 64 | 0; //@line 21798
   HEAP32[$617 >> 2] = $32; //@line 21799
   $618 = $ReallocAsyncCtx5 + 68 | 0; //@line 21800
   HEAP32[$618 >> 2] = $34; //@line 21801
   $619 = $ReallocAsyncCtx5 + 72 | 0; //@line 21802
   HEAP32[$619 >> 2] = $36; //@line 21803
   $620 = $ReallocAsyncCtx5 + 76 | 0; //@line 21804
   HEAP32[$620 >> 2] = $38; //@line 21805
   $621 = $ReallocAsyncCtx5 + 80 | 0; //@line 21806
   HEAP32[$621 >> 2] = $40; //@line 21807
   $622 = $ReallocAsyncCtx5 + 84 | 0; //@line 21808
   HEAP32[$622 >> 2] = $42; //@line 21809
   $623 = $ReallocAsyncCtx5 + 88 | 0; //@line 21810
   HEAP32[$623 >> 2] = $46; //@line 21811
   $624 = $ReallocAsyncCtx5 + 92 | 0; //@line 21812
   HEAP32[$624 >> 2] = $48; //@line 21813
   $625 = $ReallocAsyncCtx5 + 96 | 0; //@line 21814
   HEAP32[$625 >> 2] = $50; //@line 21815
   $626 = $ReallocAsyncCtx5 + 100 | 0; //@line 21816
   HEAP32[$626 >> 2] = $52; //@line 21817
   $627 = $ReallocAsyncCtx5 + 104 | 0; //@line 21818
   HEAP32[$627 >> 2] = $54; //@line 21819
   $628 = $ReallocAsyncCtx5 + 108 | 0; //@line 21820
   HEAP32[$628 >> 2] = $56; //@line 21821
   $629 = $ReallocAsyncCtx5 + 112 | 0; //@line 21822
   HEAP32[$629 >> 2] = $58; //@line 21823
   $630 = $ReallocAsyncCtx5 + 116 | 0; //@line 21824
   HEAP32[$630 >> 2] = $60; //@line 21825
   $631 = $ReallocAsyncCtx5 + 120 | 0; //@line 21826
   HEAP32[$631 >> 2] = $62; //@line 21827
   $632 = $ReallocAsyncCtx5 + 124 | 0; //@line 21828
   HEAP32[$632 >> 2] = $64; //@line 21829
   $633 = $ReallocAsyncCtx5 + 128 | 0; //@line 21830
   HEAP8[$633 >> 0] = $590; //@line 21831
   $634 = $ReallocAsyncCtx5 + 132 | 0; //@line 21832
   HEAP32[$634 >> 2] = $66; //@line 21833
   $635 = $ReallocAsyncCtx5 + 136 | 0; //@line 21834
   HEAP32[$635 >> 2] = $68; //@line 21835
   $636 = $ReallocAsyncCtx5 + 140 | 0; //@line 21836
   HEAP32[$636 >> 2] = $70; //@line 21837
   $637 = $ReallocAsyncCtx5 + 144 | 0; //@line 21838
   HEAP32[$637 >> 2] = $72; //@line 21839
   $638 = $ReallocAsyncCtx5 + 148 | 0; //@line 21840
   HEAP32[$638 >> 2] = $74; //@line 21841
   $639 = $ReallocAsyncCtx5 + 152 | 0; //@line 21842
   HEAP32[$639 >> 2] = $76; //@line 21843
   $640 = $ReallocAsyncCtx5 + 156 | 0; //@line 21844
   HEAP32[$640 >> 2] = $78; //@line 21845
   $641 = $ReallocAsyncCtx5 + 160 | 0; //@line 21846
   HEAP32[$641 >> 2] = $80; //@line 21847
   $642 = $ReallocAsyncCtx5 + 164 | 0; //@line 21848
   HEAP32[$642 >> 2] = $82; //@line 21849
   $643 = $ReallocAsyncCtx5 + 168 | 0; //@line 21850
   HEAP32[$643 >> 2] = $84; //@line 21851
   $644 = $ReallocAsyncCtx5 + 172 | 0; //@line 21852
   HEAP32[$644 >> 2] = $86; //@line 21853
   $645 = $ReallocAsyncCtx5 + 176 | 0; //@line 21854
   HEAP32[$645 >> 2] = $88; //@line 21855
   $646 = $ReallocAsyncCtx5 + 180 | 0; //@line 21856
   HEAP32[$646 >> 2] = $90; //@line 21857
   $647 = $ReallocAsyncCtx5 + 184 | 0; //@line 21858
   HEAP32[$647 >> 2] = $92; //@line 21859
   $648 = $ReallocAsyncCtx5 + 188 | 0; //@line 21860
   HEAP32[$648 >> 2] = $94; //@line 21861
   $649 = $ReallocAsyncCtx5 + 192 | 0; //@line 21862
   HEAP32[$649 >> 2] = $96; //@line 21863
   $650 = $ReallocAsyncCtx5 + 196 | 0; //@line 21864
   HEAP32[$650 >> 2] = $98; //@line 21865
   $651 = $ReallocAsyncCtx5 + 200 | 0; //@line 21866
   HEAP32[$651 >> 2] = $100; //@line 21867
   $652 = $ReallocAsyncCtx5 + 204 | 0; //@line 21868
   HEAP32[$652 >> 2] = $102; //@line 21869
   $653 = $ReallocAsyncCtx5 + 208 | 0; //@line 21870
   HEAP32[$653 >> 2] = $104; //@line 21871
   $654 = $ReallocAsyncCtx5 + 212 | 0; //@line 21872
   HEAP8[$654 >> 0] = $106; //@line 21873
   $655 = $ReallocAsyncCtx5 + 213 | 0; //@line 21874
   HEAP8[$655 >> 0] = $108; //@line 21875
   $656 = $ReallocAsyncCtx5 + 216 | 0; //@line 21876
   HEAP32[$656 >> 2] = $110; //@line 21877
   $657 = $ReallocAsyncCtx5 + 220 | 0; //@line 21878
   HEAP32[$657 >> 2] = $112; //@line 21879
   $658 = $ReallocAsyncCtx5 + 224 | 0; //@line 21880
   HEAP8[$658 >> 0] = $114; //@line 21881
   $659 = $ReallocAsyncCtx5 + 228 | 0; //@line 21882
   HEAP32[$659 >> 2] = $116; //@line 21883
   $660 = $ReallocAsyncCtx5 + 232 | 0; //@line 21884
   HEAP32[$660 >> 2] = $118; //@line 21885
   $661 = $ReallocAsyncCtx5 + 236 | 0; //@line 21886
   HEAP32[$661 >> 2] = $120; //@line 21887
   $662 = $ReallocAsyncCtx5 + 240 | 0; //@line 21888
   HEAP32[$662 >> 2] = $122; //@line 21889
   $663 = $ReallocAsyncCtx5 + 244 | 0; //@line 21890
   HEAP32[$663 >> 2] = $124; //@line 21891
   $664 = $ReallocAsyncCtx5 + 248 | 0; //@line 21892
   HEAP32[$664 >> 2] = $126; //@line 21893
   $665 = $ReallocAsyncCtx5 + 252 | 0; //@line 21894
   HEAP32[$665 >> 2] = $128; //@line 21895
   $666 = $ReallocAsyncCtx5 + 256 | 0; //@line 21896
   HEAP32[$666 >> 2] = $130; //@line 21897
   $667 = $ReallocAsyncCtx5 + 260 | 0; //@line 21898
   HEAP32[$667 >> 2] = $132; //@line 21899
   $668 = $ReallocAsyncCtx5 + 264 | 0; //@line 21900
   HEAP32[$668 >> 2] = $134; //@line 21901
   sp = STACKTOP; //@line 21902
   return;
  }
  HEAP8[___async_retval >> 0] = $601; //@line 21906
  ___async_unwind = 0; //@line 21907
  HEAP32[$ReallocAsyncCtx5 >> 2] = 508; //@line 21908
  $602 = $ReallocAsyncCtx5 + 4 | 0; //@line 21909
  HEAP32[$602 >> 2] = $2; //@line 21910
  $603 = $ReallocAsyncCtx5 + 8 | 0; //@line 21911
  HEAP32[$603 >> 2] = $4; //@line 21912
  $604 = $ReallocAsyncCtx5 + 12 | 0; //@line 21913
  HEAP32[$604 >> 2] = $6; //@line 21914
  $605 = $ReallocAsyncCtx5 + 16 | 0; //@line 21915
  HEAP32[$605 >> 2] = $8; //@line 21916
  $606 = $ReallocAsyncCtx5 + 20 | 0; //@line 21917
  HEAP32[$606 >> 2] = $10; //@line 21918
  $607 = $ReallocAsyncCtx5 + 24 | 0; //@line 21919
  HEAP32[$607 >> 2] = $12; //@line 21920
  $608 = $ReallocAsyncCtx5 + 28 | 0; //@line 21921
  HEAP32[$608 >> 2] = $14; //@line 21922
  $609 = $ReallocAsyncCtx5 + 32 | 0; //@line 21923
  HEAP32[$609 >> 2] = $16; //@line 21924
  $610 = $ReallocAsyncCtx5 + 36 | 0; //@line 21925
  HEAP32[$610 >> 2] = $18; //@line 21926
  $611 = $ReallocAsyncCtx5 + 40 | 0; //@line 21927
  HEAP32[$611 >> 2] = $20; //@line 21928
  $612 = $ReallocAsyncCtx5 + 44 | 0; //@line 21929
  HEAP32[$612 >> 2] = $22; //@line 21930
  $613 = $ReallocAsyncCtx5 + 48 | 0; //@line 21931
  HEAP32[$613 >> 2] = $24; //@line 21932
  $614 = $ReallocAsyncCtx5 + 52 | 0; //@line 21933
  HEAP32[$614 >> 2] = $26; //@line 21934
  $615 = $ReallocAsyncCtx5 + 56 | 0; //@line 21935
  HEAP32[$615 >> 2] = $28; //@line 21936
  $616 = $ReallocAsyncCtx5 + 60 | 0; //@line 21937
  HEAP32[$616 >> 2] = $30; //@line 21938
  $617 = $ReallocAsyncCtx5 + 64 | 0; //@line 21939
  HEAP32[$617 >> 2] = $32; //@line 21940
  $618 = $ReallocAsyncCtx5 + 68 | 0; //@line 21941
  HEAP32[$618 >> 2] = $34; //@line 21942
  $619 = $ReallocAsyncCtx5 + 72 | 0; //@line 21943
  HEAP32[$619 >> 2] = $36; //@line 21944
  $620 = $ReallocAsyncCtx5 + 76 | 0; //@line 21945
  HEAP32[$620 >> 2] = $38; //@line 21946
  $621 = $ReallocAsyncCtx5 + 80 | 0; //@line 21947
  HEAP32[$621 >> 2] = $40; //@line 21948
  $622 = $ReallocAsyncCtx5 + 84 | 0; //@line 21949
  HEAP32[$622 >> 2] = $42; //@line 21950
  $623 = $ReallocAsyncCtx5 + 88 | 0; //@line 21951
  HEAP32[$623 >> 2] = $46; //@line 21952
  $624 = $ReallocAsyncCtx5 + 92 | 0; //@line 21953
  HEAP32[$624 >> 2] = $48; //@line 21954
  $625 = $ReallocAsyncCtx5 + 96 | 0; //@line 21955
  HEAP32[$625 >> 2] = $50; //@line 21956
  $626 = $ReallocAsyncCtx5 + 100 | 0; //@line 21957
  HEAP32[$626 >> 2] = $52; //@line 21958
  $627 = $ReallocAsyncCtx5 + 104 | 0; //@line 21959
  HEAP32[$627 >> 2] = $54; //@line 21960
  $628 = $ReallocAsyncCtx5 + 108 | 0; //@line 21961
  HEAP32[$628 >> 2] = $56; //@line 21962
  $629 = $ReallocAsyncCtx5 + 112 | 0; //@line 21963
  HEAP32[$629 >> 2] = $58; //@line 21964
  $630 = $ReallocAsyncCtx5 + 116 | 0; //@line 21965
  HEAP32[$630 >> 2] = $60; //@line 21966
  $631 = $ReallocAsyncCtx5 + 120 | 0; //@line 21967
  HEAP32[$631 >> 2] = $62; //@line 21968
  $632 = $ReallocAsyncCtx5 + 124 | 0; //@line 21969
  HEAP32[$632 >> 2] = $64; //@line 21970
  $633 = $ReallocAsyncCtx5 + 128 | 0; //@line 21971
  HEAP8[$633 >> 0] = $590; //@line 21972
  $634 = $ReallocAsyncCtx5 + 132 | 0; //@line 21973
  HEAP32[$634 >> 2] = $66; //@line 21974
  $635 = $ReallocAsyncCtx5 + 136 | 0; //@line 21975
  HEAP32[$635 >> 2] = $68; //@line 21976
  $636 = $ReallocAsyncCtx5 + 140 | 0; //@line 21977
  HEAP32[$636 >> 2] = $70; //@line 21978
  $637 = $ReallocAsyncCtx5 + 144 | 0; //@line 21979
  HEAP32[$637 >> 2] = $72; //@line 21980
  $638 = $ReallocAsyncCtx5 + 148 | 0; //@line 21981
  HEAP32[$638 >> 2] = $74; //@line 21982
  $639 = $ReallocAsyncCtx5 + 152 | 0; //@line 21983
  HEAP32[$639 >> 2] = $76; //@line 21984
  $640 = $ReallocAsyncCtx5 + 156 | 0; //@line 21985
  HEAP32[$640 >> 2] = $78; //@line 21986
  $641 = $ReallocAsyncCtx5 + 160 | 0; //@line 21987
  HEAP32[$641 >> 2] = $80; //@line 21988
  $642 = $ReallocAsyncCtx5 + 164 | 0; //@line 21989
  HEAP32[$642 >> 2] = $82; //@line 21990
  $643 = $ReallocAsyncCtx5 + 168 | 0; //@line 21991
  HEAP32[$643 >> 2] = $84; //@line 21992
  $644 = $ReallocAsyncCtx5 + 172 | 0; //@line 21993
  HEAP32[$644 >> 2] = $86; //@line 21994
  $645 = $ReallocAsyncCtx5 + 176 | 0; //@line 21995
  HEAP32[$645 >> 2] = $88; //@line 21996
  $646 = $ReallocAsyncCtx5 + 180 | 0; //@line 21997
  HEAP32[$646 >> 2] = $90; //@line 21998
  $647 = $ReallocAsyncCtx5 + 184 | 0; //@line 21999
  HEAP32[$647 >> 2] = $92; //@line 22000
  $648 = $ReallocAsyncCtx5 + 188 | 0; //@line 22001
  HEAP32[$648 >> 2] = $94; //@line 22002
  $649 = $ReallocAsyncCtx5 + 192 | 0; //@line 22003
  HEAP32[$649 >> 2] = $96; //@line 22004
  $650 = $ReallocAsyncCtx5 + 196 | 0; //@line 22005
  HEAP32[$650 >> 2] = $98; //@line 22006
  $651 = $ReallocAsyncCtx5 + 200 | 0; //@line 22007
  HEAP32[$651 >> 2] = $100; //@line 22008
  $652 = $ReallocAsyncCtx5 + 204 | 0; //@line 22009
  HEAP32[$652 >> 2] = $102; //@line 22010
  $653 = $ReallocAsyncCtx5 + 208 | 0; //@line 22011
  HEAP32[$653 >> 2] = $104; //@line 22012
  $654 = $ReallocAsyncCtx5 + 212 | 0; //@line 22013
  HEAP8[$654 >> 0] = $106; //@line 22014
  $655 = $ReallocAsyncCtx5 + 213 | 0; //@line 22015
  HEAP8[$655 >> 0] = $108; //@line 22016
  $656 = $ReallocAsyncCtx5 + 216 | 0; //@line 22017
  HEAP32[$656 >> 2] = $110; //@line 22018
  $657 = $ReallocAsyncCtx5 + 220 | 0; //@line 22019
  HEAP32[$657 >> 2] = $112; //@line 22020
  $658 = $ReallocAsyncCtx5 + 224 | 0; //@line 22021
  HEAP8[$658 >> 0] = $114; //@line 22022
  $659 = $ReallocAsyncCtx5 + 228 | 0; //@line 22023
  HEAP32[$659 >> 2] = $116; //@line 22024
  $660 = $ReallocAsyncCtx5 + 232 | 0; //@line 22025
  HEAP32[$660 >> 2] = $118; //@line 22026
  $661 = $ReallocAsyncCtx5 + 236 | 0; //@line 22027
  HEAP32[$661 >> 2] = $120; //@line 22028
  $662 = $ReallocAsyncCtx5 + 240 | 0; //@line 22029
  HEAP32[$662 >> 2] = $122; //@line 22030
  $663 = $ReallocAsyncCtx5 + 244 | 0; //@line 22031
  HEAP32[$663 >> 2] = $124; //@line 22032
  $664 = $ReallocAsyncCtx5 + 248 | 0; //@line 22033
  HEAP32[$664 >> 2] = $126; //@line 22034
  $665 = $ReallocAsyncCtx5 + 252 | 0; //@line 22035
  HEAP32[$665 >> 2] = $128; //@line 22036
  $666 = $ReallocAsyncCtx5 + 256 | 0; //@line 22037
  HEAP32[$666 >> 2] = $130; //@line 22038
  $667 = $ReallocAsyncCtx5 + 260 | 0; //@line 22039
  HEAP32[$667 >> 2] = $132; //@line 22040
  $668 = $ReallocAsyncCtx5 + 264 | 0; //@line 22041
  HEAP32[$668 >> 2] = $134; //@line 22042
  sp = STACKTOP; //@line 22043
  return;
 } else if ((label | 0) == 31) {
  HEAP32[___async_retval >> 2] = $$096$be; //@line 22048
  return;
 }
}
function __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_343($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0$i98 = 0, $$096$be = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $130 = 0, $132 = 0, $134 = 0, $137 = 0, $14 = 0, $148 = 0, $149 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $231 = 0, $234 = 0, $239 = 0, $24 = 0, $247 = 0, $26 = 0, $266 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $347 = 0, $348 = 0, $36 = 0, $38 = 0, $385 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $461 = 0, $465 = 0, $469 = 0, $472 = 0, $478 = 0, $48 = 0, $481 = 0, $482 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $578 = 0, $58 = 0, $588 = 0, $589 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $659 = 0, $66 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 24024
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24026
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24028
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24030
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24032
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24034
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24036
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 24038
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 24040
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 24042
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 24044
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 24046
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 24048
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 24050
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 24052
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 24054
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 24056
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 24058
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 24060
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 24062
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 24064
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 24066
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 24068
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 24070
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 24072
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 24074
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 24076
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 24078
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 24080
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 24082
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 24084
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 24086
 $64 = HEAP8[$0 + 128 >> 0] | 0; //@line 24088
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 24090
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 24092
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 24094
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 24096
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 24098
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 24100
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 24102
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 24104
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 24106
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 24108
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 24110
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 24112
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 24114
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 24116
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 24118
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 24120
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 24122
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 24124
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 24126
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 24128
 $106 = HEAP8[$0 + 212 >> 0] | 0; //@line 24130
 $108 = HEAP8[$0 + 213 >> 0] | 0; //@line 24132
 $110 = HEAP32[$0 + 216 >> 2] | 0; //@line 24134
 $112 = HEAP32[$0 + 220 >> 2] | 0; //@line 24136
 $114 = HEAP8[$0 + 224 >> 0] | 0; //@line 24138
 $116 = HEAP32[$0 + 228 >> 2] | 0; //@line 24140
 $118 = HEAP32[$0 + 232 >> 2] | 0; //@line 24142
 $120 = HEAP32[$0 + 236 >> 2] | 0; //@line 24144
 $122 = HEAP32[$0 + 240 >> 2] | 0; //@line 24146
 $124 = HEAP32[$0 + 244 >> 2] | 0; //@line 24148
 $126 = HEAP32[$0 + 248 >> 2] | 0; //@line 24150
 $128 = HEAP32[$0 + 252 >> 2] | 0; //@line 24152
 $130 = HEAP32[$0 + 256 >> 2] | 0; //@line 24154
 $132 = HEAP32[$0 + 260 >> 2] | 0; //@line 24156
 $134 = HEAP32[$0 + 264 >> 2] | 0; //@line 24158
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 24160
 $659 = HEAP8[$100 >> 0] | 0; //@line 24162
 if (($659 & 255) < (-128 - (HEAP8[$134 >> 0] | 0) & 255)) {
  HEAP8[($659 & 255) + ($122 + 4) >> 0] = 10; //@line 24169
  HEAP8[$100 >> 0] = $659 + 2 << 24 >> 24; //@line 24171
  HEAP8[($659 + 1 & 255) + ($122 + 4) >> 0] = $AsyncRetVal; //@line 24174
  HEAP8[$12 >> 0] = 1; //@line 24175
  HEAP8[$76 >> 0] = 1; //@line 24176
  $$0$i98 = 0; //@line 24177
 } else {
  $$0$i98 = -1e3; //@line 24179
 }
 $$0$be = $64; //@line 24181
 $$096$be = $$0$i98; //@line 24181
 L5 : while (1) {
  if (($$0$be & 255) >= ($108 & 255)) {
   label = 31; //@line 24185
   break;
  }
  $137 = $$0$be + 1 << 24 >> 24; //@line 24189
  switch (HEAP8[$118 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 24194
    break L5;
    break;
   }
  case 5:
   {
    label = 9; //@line 24199
    break L5;
    break;
   }
  case 7:
   {
    label = 14; //@line 24204
    break L5;
    break;
   }
  case 9:
   {
    label = 19; //@line 24209
    break L5;
    break;
   }
  case 10:
   {
    label = 24; //@line 24214
    break L5;
    break;
   }
  case 2:
   {
    HEAP32[$24 >> 2] = 0; //@line 24219
    HEAP8[$102 >> 0] = HEAP8[$118 + ($137 & 255) >> 0] | 0; //@line 24224
    HEAP8[$128 >> 0] = HEAP8[$118 + ($$0$be + 2 & 255) >> 0] | 0; //@line 24229
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 24230
    continue L5;
    break;
   }
  case 4:
   {
    $231 = $$0$be + 2 << 24 >> 24; //@line 24235
    $234 = HEAP8[$118 + ($137 & 255) >> 0] | 0; //@line 24238
    HEAP8[$84 >> 0] = $234; //@line 24239
    HEAP16[$62 >> 1] = 1 << ($234 & 255); //@line 24243
    $239 = HEAP8[$100 >> 0] | 0; //@line 24245
    if (($239 & 255) >= (-128 - (HEAP8[$134 >> 0] | 0) & 255)) {
     $$0$be = $231; //@line 24249
     $$096$be = -1e3; //@line 24249
     continue L5;
    }
    HEAP8[$100 >> 0] = $239 + 1 << 24 >> 24; //@line 24255
    HEAP8[($239 & 255) + ($122 + 4) >> 0] = 4; //@line 24256
    HEAP8[$76 >> 0] = 1; //@line 24257
    $$0$be = $231; //@line 24258
    $$096$be = 0; //@line 24258
    continue L5;
    break;
   }
  case 6:
   {
    $347 = HEAP8[$100 >> 0] | 0; //@line 24264
    $348 = $347 & 255; //@line 24265
    if (((-128 - (HEAP8[$134 >> 0] | 0) & 255) + -2 | 0) <= ($348 | 0)) {
     $$0$be = $137; //@line 24271
     $$096$be = -1e3; //@line 24271
     continue L5;
    }
    HEAP8[$122 + 4 + $348 >> 0] = 6; //@line 24276
    HEAP8[($347 + 1 & 255) + ($122 + 4) >> 0] = -1; //@line 24280
    HEAP8[$100 >> 0] = $347 + 3 << 24 >> 24; //@line 24282
    HEAP8[($347 + 2 & 255) + ($122 + 4) >> 0] = $106; //@line 24285
    HEAP8[$76 >> 0] = 1; //@line 24286
    $$0$be = $137; //@line 24287
    $$096$be = 0; //@line 24287
    continue L5;
    break;
   }
  case 8:
   {
    $461 = $$0$be + 2 << 24 >> 24; //@line 24292
    $465 = HEAP8[$118 + ($137 & 255) >> 0] & 15; //@line 24296
    $469 = ($465 + ($465 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 24301
    HEAP32[$46 >> 2] = $469; //@line 24302
    HEAP32[$56 >> 2] = $469 + 1e3; //@line 24304
    $472 = HEAP8[$100 >> 0] | 0; //@line 24306
    if (($472 & 255) >= (-128 - (HEAP8[$134 >> 0] | 0) & 255)) {
     $$0$be = $461; //@line 24310
     $$096$be = -1e3; //@line 24310
     continue L5;
    }
    HEAP8[$100 >> 0] = $472 + 1 << 24 >> 24; //@line 24316
    HEAP8[($472 & 255) + ($122 + 4) >> 0] = 8; //@line 24317
    HEAP8[$12 >> 0] = 1; //@line 24318
    HEAP8[$76 >> 0] = 1; //@line 24319
    $$0$be = $461; //@line 24320
    $$096$be = 0; //@line 24320
    continue L5;
    break;
   }
  default:
   {
    $$0$be = $137; //@line 24325
    $$096$be = -1013; //@line 24325
    continue L5;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$10 >> 0] = 0; //@line 24331
  HEAP8[$66 >> 0] = 0; //@line 24332
  HEAP8[$82 >> 0] = 0; //@line 24333
  HEAP8[$88 >> 0] = 0; //@line 24334
  $148 = $137 & 255; //@line 24335
  $149 = $148 + -1 | 0; //@line 24336
  HEAP32[$120 >> 2] = $118 + $149; //@line 24338
  HEAP8[$70 >> 0] = $14 - $149; //@line 24341
  HEAP8[$78 >> 0] = HEAP8[$90 >> 0] | 0; //@line 24343
  HEAP8[$34 >> 0] = HEAP8[$40 >> 0] | 0; //@line 24345
  HEAP8[$44 >> 0] = HEAP8[$50 >> 0] | 0; //@line 24347
  HEAP8[$2 >> 0] = HEAP8[$18 >> 0] | 0; //@line 24349
  HEAP8[$110 >> 0] = HEAP8[$26 >> 0] | 0; //@line 24351
  $160 = HEAP32[(HEAP32[$8 >> 2] | 0) + 36 >> 2] | 0; //@line 24354
  $ReallocAsyncCtx = _emscripten_realloc_async_context(272) | 0; //@line 24355
  $161 = FUNCTION_TABLE_iiiiiii[$160 & 3]($98, $20, $10, $66, $82, $88) | 0; //@line 24356
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 504; //@line 24359
   $162 = $ReallocAsyncCtx + 4 | 0; //@line 24360
   HEAP32[$162 >> 2] = $2; //@line 24361
   $163 = $ReallocAsyncCtx + 8 | 0; //@line 24362
   HEAP8[$163 >> 0] = $114; //@line 24363
   $164 = $ReallocAsyncCtx + 12 | 0; //@line 24364
   HEAP32[$164 >> 2] = $4; //@line 24365
   $165 = $ReallocAsyncCtx + 16 | 0; //@line 24366
   HEAP32[$165 >> 2] = $6; //@line 24367
   $166 = $ReallocAsyncCtx + 20 | 0; //@line 24368
   HEAP32[$166 >> 2] = $10; //@line 24369
   $167 = $ReallocAsyncCtx + 24 | 0; //@line 24370
   HEAP32[$167 >> 2] = $12; //@line 24371
   $168 = $ReallocAsyncCtx + 28 | 0; //@line 24372
   HEAP32[$168 >> 2] = $14; //@line 24373
   $169 = $ReallocAsyncCtx + 32 | 0; //@line 24374
   HEAP32[$169 >> 2] = $16; //@line 24375
   $170 = $ReallocAsyncCtx + 36 | 0; //@line 24376
   HEAP32[$170 >> 2] = $18; //@line 24377
   $171 = $ReallocAsyncCtx + 40 | 0; //@line 24378
   HEAP32[$171 >> 2] = $20; //@line 24379
   $172 = $ReallocAsyncCtx + 44 | 0; //@line 24380
   HEAP32[$172 >> 2] = $22; //@line 24381
   $173 = $ReallocAsyncCtx + 48 | 0; //@line 24382
   HEAP32[$173 >> 2] = $24; //@line 24383
   $174 = $ReallocAsyncCtx + 52 | 0; //@line 24384
   HEAP32[$174 >> 2] = $26; //@line 24385
   $175 = $ReallocAsyncCtx + 56 | 0; //@line 24386
   HEAP32[$175 >> 2] = $28; //@line 24387
   $176 = $ReallocAsyncCtx + 60 | 0; //@line 24388
   HEAP32[$176 >> 2] = $30; //@line 24389
   $177 = $ReallocAsyncCtx + 64 | 0; //@line 24390
   HEAP32[$177 >> 2] = $32; //@line 24391
   $178 = $ReallocAsyncCtx + 68 | 0; //@line 24392
   HEAP32[$178 >> 2] = $34; //@line 24393
   $179 = $ReallocAsyncCtx + 72 | 0; //@line 24394
   HEAP32[$179 >> 2] = $36; //@line 24395
   $180 = $ReallocAsyncCtx + 76 | 0; //@line 24396
   HEAP32[$180 >> 2] = $38; //@line 24397
   $181 = $ReallocAsyncCtx + 80 | 0; //@line 24398
   HEAP32[$181 >> 2] = $40; //@line 24399
   $182 = $ReallocAsyncCtx + 84 | 0; //@line 24400
   HEAP32[$182 >> 2] = $42; //@line 24401
   $183 = $ReallocAsyncCtx + 88 | 0; //@line 24402
   HEAP32[$183 >> 2] = $44; //@line 24403
   $184 = $ReallocAsyncCtx + 92 | 0; //@line 24404
   HEAP32[$184 >> 2] = $46; //@line 24405
   $185 = $ReallocAsyncCtx + 96 | 0; //@line 24406
   HEAP32[$185 >> 2] = $48; //@line 24407
   $186 = $ReallocAsyncCtx + 100 | 0; //@line 24408
   HEAP32[$186 >> 2] = $50; //@line 24409
   $187 = $ReallocAsyncCtx + 104 | 0; //@line 24410
   HEAP32[$187 >> 2] = $52; //@line 24411
   $188 = $ReallocAsyncCtx + 108 | 0; //@line 24412
   HEAP32[$188 >> 2] = $54; //@line 24413
   $189 = $ReallocAsyncCtx + 112 | 0; //@line 24414
   HEAP32[$189 >> 2] = $56; //@line 24415
   $190 = $ReallocAsyncCtx + 116 | 0; //@line 24416
   HEAP32[$190 >> 2] = $58; //@line 24417
   $191 = $ReallocAsyncCtx + 120 | 0; //@line 24418
   HEAP32[$191 >> 2] = $60; //@line 24419
   $192 = $ReallocAsyncCtx + 124 | 0; //@line 24420
   HEAP32[$192 >> 2] = $62; //@line 24421
   $193 = $ReallocAsyncCtx + 128 | 0; //@line 24422
   HEAP32[$193 >> 2] = $66; //@line 24423
   $194 = $ReallocAsyncCtx + 132 | 0; //@line 24424
   HEAP32[$194 >> 2] = $68; //@line 24425
   $195 = $ReallocAsyncCtx + 136 | 0; //@line 24426
   HEAP32[$195 >> 2] = $70; //@line 24427
   $196 = $ReallocAsyncCtx + 140 | 0; //@line 24428
   HEAP32[$196 >> 2] = $72; //@line 24429
   $197 = $ReallocAsyncCtx + 144 | 0; //@line 24430
   HEAP32[$197 >> 2] = $74; //@line 24431
   $198 = $ReallocAsyncCtx + 148 | 0; //@line 24432
   HEAP32[$198 >> 2] = $76; //@line 24433
   $199 = $ReallocAsyncCtx + 152 | 0; //@line 24434
   HEAP32[$199 >> 2] = $$096$be; //@line 24435
   $200 = $ReallocAsyncCtx + 156 | 0; //@line 24436
   HEAP32[$200 >> 2] = $78; //@line 24437
   $201 = $ReallocAsyncCtx + 160 | 0; //@line 24438
   HEAP32[$201 >> 2] = $80; //@line 24439
   $202 = $ReallocAsyncCtx + 164 | 0; //@line 24440
   HEAP32[$202 >> 2] = $82; //@line 24441
   $203 = $ReallocAsyncCtx + 168 | 0; //@line 24442
   HEAP32[$203 >> 2] = $84; //@line 24443
   $204 = $ReallocAsyncCtx + 172 | 0; //@line 24444
   HEAP32[$204 >> 2] = $86; //@line 24445
   $205 = $ReallocAsyncCtx + 176 | 0; //@line 24446
   HEAP32[$205 >> 2] = $88; //@line 24447
   $206 = $ReallocAsyncCtx + 180 | 0; //@line 24448
   HEAP32[$206 >> 2] = $90; //@line 24449
   $207 = $ReallocAsyncCtx + 184 | 0; //@line 24450
   HEAP32[$207 >> 2] = $92; //@line 24451
   $208 = $ReallocAsyncCtx + 188 | 0; //@line 24452
   HEAP32[$208 >> 2] = $94; //@line 24453
   $209 = $ReallocAsyncCtx + 192 | 0; //@line 24454
   HEAP32[$209 >> 2] = $96; //@line 24455
   $210 = $ReallocAsyncCtx + 196 | 0; //@line 24456
   HEAP32[$210 >> 2] = $98; //@line 24457
   $211 = $ReallocAsyncCtx + 200 | 0; //@line 24458
   HEAP32[$211 >> 2] = $148; //@line 24459
   $212 = $ReallocAsyncCtx + 204 | 0; //@line 24460
   HEAP32[$212 >> 2] = $100; //@line 24461
   $213 = $ReallocAsyncCtx + 208 | 0; //@line 24462
   HEAP32[$213 >> 2] = $102; //@line 24463
   $214 = $ReallocAsyncCtx + 212 | 0; //@line 24464
   HEAP32[$214 >> 2] = $104; //@line 24465
   $215 = $ReallocAsyncCtx + 216 | 0; //@line 24466
   HEAP8[$215 >> 0] = $106; //@line 24467
   $216 = $ReallocAsyncCtx + 217 | 0; //@line 24468
   HEAP8[$216 >> 0] = $108; //@line 24469
   $217 = $ReallocAsyncCtx + 220 | 0; //@line 24470
   HEAP32[$217 >> 2] = $110; //@line 24471
   $218 = $ReallocAsyncCtx + 224 | 0; //@line 24472
   HEAP32[$218 >> 2] = $112; //@line 24473
   $219 = $ReallocAsyncCtx + 228 | 0; //@line 24474
   HEAP32[$219 >> 2] = $120; //@line 24475
   $220 = $ReallocAsyncCtx + 232 | 0; //@line 24476
   HEAP32[$220 >> 2] = $116; //@line 24477
   $221 = $ReallocAsyncCtx + 236 | 0; //@line 24478
   HEAP32[$221 >> 2] = $118; //@line 24479
   $222 = $ReallocAsyncCtx + 240 | 0; //@line 24480
   HEAP32[$222 >> 2] = $130; //@line 24481
   $223 = $ReallocAsyncCtx + 244 | 0; //@line 24482
   HEAP32[$223 >> 2] = $122; //@line 24483
   $224 = $ReallocAsyncCtx + 248 | 0; //@line 24484
   HEAP32[$224 >> 2] = $124; //@line 24485
   $225 = $ReallocAsyncCtx + 252 | 0; //@line 24486
   HEAP32[$225 >> 2] = $126; //@line 24487
   $226 = $ReallocAsyncCtx + 256 | 0; //@line 24488
   HEAP32[$226 >> 2] = $128; //@line 24489
   $227 = $ReallocAsyncCtx + 260 | 0; //@line 24490
   HEAP32[$227 >> 2] = $8; //@line 24491
   $228 = $ReallocAsyncCtx + 264 | 0; //@line 24492
   HEAP32[$228 >> 2] = $132; //@line 24493
   $229 = $ReallocAsyncCtx + 268 | 0; //@line 24494
   HEAP32[$229 >> 2] = $134; //@line 24495
   sp = STACKTOP; //@line 24496
   return;
  }
  HEAP8[___async_retval >> 0] = $161; //@line 24500
  ___async_unwind = 0; //@line 24501
  HEAP32[$ReallocAsyncCtx >> 2] = 504; //@line 24502
  $162 = $ReallocAsyncCtx + 4 | 0; //@line 24503
  HEAP32[$162 >> 2] = $2; //@line 24504
  $163 = $ReallocAsyncCtx + 8 | 0; //@line 24505
  HEAP8[$163 >> 0] = $114; //@line 24506
  $164 = $ReallocAsyncCtx + 12 | 0; //@line 24507
  HEAP32[$164 >> 2] = $4; //@line 24508
  $165 = $ReallocAsyncCtx + 16 | 0; //@line 24509
  HEAP32[$165 >> 2] = $6; //@line 24510
  $166 = $ReallocAsyncCtx + 20 | 0; //@line 24511
  HEAP32[$166 >> 2] = $10; //@line 24512
  $167 = $ReallocAsyncCtx + 24 | 0; //@line 24513
  HEAP32[$167 >> 2] = $12; //@line 24514
  $168 = $ReallocAsyncCtx + 28 | 0; //@line 24515
  HEAP32[$168 >> 2] = $14; //@line 24516
  $169 = $ReallocAsyncCtx + 32 | 0; //@line 24517
  HEAP32[$169 >> 2] = $16; //@line 24518
  $170 = $ReallocAsyncCtx + 36 | 0; //@line 24519
  HEAP32[$170 >> 2] = $18; //@line 24520
  $171 = $ReallocAsyncCtx + 40 | 0; //@line 24521
  HEAP32[$171 >> 2] = $20; //@line 24522
  $172 = $ReallocAsyncCtx + 44 | 0; //@line 24523
  HEAP32[$172 >> 2] = $22; //@line 24524
  $173 = $ReallocAsyncCtx + 48 | 0; //@line 24525
  HEAP32[$173 >> 2] = $24; //@line 24526
  $174 = $ReallocAsyncCtx + 52 | 0; //@line 24527
  HEAP32[$174 >> 2] = $26; //@line 24528
  $175 = $ReallocAsyncCtx + 56 | 0; //@line 24529
  HEAP32[$175 >> 2] = $28; //@line 24530
  $176 = $ReallocAsyncCtx + 60 | 0; //@line 24531
  HEAP32[$176 >> 2] = $30; //@line 24532
  $177 = $ReallocAsyncCtx + 64 | 0; //@line 24533
  HEAP32[$177 >> 2] = $32; //@line 24534
  $178 = $ReallocAsyncCtx + 68 | 0; //@line 24535
  HEAP32[$178 >> 2] = $34; //@line 24536
  $179 = $ReallocAsyncCtx + 72 | 0; //@line 24537
  HEAP32[$179 >> 2] = $36; //@line 24538
  $180 = $ReallocAsyncCtx + 76 | 0; //@line 24539
  HEAP32[$180 >> 2] = $38; //@line 24540
  $181 = $ReallocAsyncCtx + 80 | 0; //@line 24541
  HEAP32[$181 >> 2] = $40; //@line 24542
  $182 = $ReallocAsyncCtx + 84 | 0; //@line 24543
  HEAP32[$182 >> 2] = $42; //@line 24544
  $183 = $ReallocAsyncCtx + 88 | 0; //@line 24545
  HEAP32[$183 >> 2] = $44; //@line 24546
  $184 = $ReallocAsyncCtx + 92 | 0; //@line 24547
  HEAP32[$184 >> 2] = $46; //@line 24548
  $185 = $ReallocAsyncCtx + 96 | 0; //@line 24549
  HEAP32[$185 >> 2] = $48; //@line 24550
  $186 = $ReallocAsyncCtx + 100 | 0; //@line 24551
  HEAP32[$186 >> 2] = $50; //@line 24552
  $187 = $ReallocAsyncCtx + 104 | 0; //@line 24553
  HEAP32[$187 >> 2] = $52; //@line 24554
  $188 = $ReallocAsyncCtx + 108 | 0; //@line 24555
  HEAP32[$188 >> 2] = $54; //@line 24556
  $189 = $ReallocAsyncCtx + 112 | 0; //@line 24557
  HEAP32[$189 >> 2] = $56; //@line 24558
  $190 = $ReallocAsyncCtx + 116 | 0; //@line 24559
  HEAP32[$190 >> 2] = $58; //@line 24560
  $191 = $ReallocAsyncCtx + 120 | 0; //@line 24561
  HEAP32[$191 >> 2] = $60; //@line 24562
  $192 = $ReallocAsyncCtx + 124 | 0; //@line 24563
  HEAP32[$192 >> 2] = $62; //@line 24564
  $193 = $ReallocAsyncCtx + 128 | 0; //@line 24565
  HEAP32[$193 >> 2] = $66; //@line 24566
  $194 = $ReallocAsyncCtx + 132 | 0; //@line 24567
  HEAP32[$194 >> 2] = $68; //@line 24568
  $195 = $ReallocAsyncCtx + 136 | 0; //@line 24569
  HEAP32[$195 >> 2] = $70; //@line 24570
  $196 = $ReallocAsyncCtx + 140 | 0; //@line 24571
  HEAP32[$196 >> 2] = $72; //@line 24572
  $197 = $ReallocAsyncCtx + 144 | 0; //@line 24573
  HEAP32[$197 >> 2] = $74; //@line 24574
  $198 = $ReallocAsyncCtx + 148 | 0; //@line 24575
  HEAP32[$198 >> 2] = $76; //@line 24576
  $199 = $ReallocAsyncCtx + 152 | 0; //@line 24577
  HEAP32[$199 >> 2] = $$096$be; //@line 24578
  $200 = $ReallocAsyncCtx + 156 | 0; //@line 24579
  HEAP32[$200 >> 2] = $78; //@line 24580
  $201 = $ReallocAsyncCtx + 160 | 0; //@line 24581
  HEAP32[$201 >> 2] = $80; //@line 24582
  $202 = $ReallocAsyncCtx + 164 | 0; //@line 24583
  HEAP32[$202 >> 2] = $82; //@line 24584
  $203 = $ReallocAsyncCtx + 168 | 0; //@line 24585
  HEAP32[$203 >> 2] = $84; //@line 24586
  $204 = $ReallocAsyncCtx + 172 | 0; //@line 24587
  HEAP32[$204 >> 2] = $86; //@line 24588
  $205 = $ReallocAsyncCtx + 176 | 0; //@line 24589
  HEAP32[$205 >> 2] = $88; //@line 24590
  $206 = $ReallocAsyncCtx + 180 | 0; //@line 24591
  HEAP32[$206 >> 2] = $90; //@line 24592
  $207 = $ReallocAsyncCtx + 184 | 0; //@line 24593
  HEAP32[$207 >> 2] = $92; //@line 24594
  $208 = $ReallocAsyncCtx + 188 | 0; //@line 24595
  HEAP32[$208 >> 2] = $94; //@line 24596
  $209 = $ReallocAsyncCtx + 192 | 0; //@line 24597
  HEAP32[$209 >> 2] = $96; //@line 24598
  $210 = $ReallocAsyncCtx + 196 | 0; //@line 24599
  HEAP32[$210 >> 2] = $98; //@line 24600
  $211 = $ReallocAsyncCtx + 200 | 0; //@line 24601
  HEAP32[$211 >> 2] = $148; //@line 24602
  $212 = $ReallocAsyncCtx + 204 | 0; //@line 24603
  HEAP32[$212 >> 2] = $100; //@line 24604
  $213 = $ReallocAsyncCtx + 208 | 0; //@line 24605
  HEAP32[$213 >> 2] = $102; //@line 24606
  $214 = $ReallocAsyncCtx + 212 | 0; //@line 24607
  HEAP32[$214 >> 2] = $104; //@line 24608
  $215 = $ReallocAsyncCtx + 216 | 0; //@line 24609
  HEAP8[$215 >> 0] = $106; //@line 24610
  $216 = $ReallocAsyncCtx + 217 | 0; //@line 24611
  HEAP8[$216 >> 0] = $108; //@line 24612
  $217 = $ReallocAsyncCtx + 220 | 0; //@line 24613
  HEAP32[$217 >> 2] = $110; //@line 24614
  $218 = $ReallocAsyncCtx + 224 | 0; //@line 24615
  HEAP32[$218 >> 2] = $112; //@line 24616
  $219 = $ReallocAsyncCtx + 228 | 0; //@line 24617
  HEAP32[$219 >> 2] = $120; //@line 24618
  $220 = $ReallocAsyncCtx + 232 | 0; //@line 24619
  HEAP32[$220 >> 2] = $116; //@line 24620
  $221 = $ReallocAsyncCtx + 236 | 0; //@line 24621
  HEAP32[$221 >> 2] = $118; //@line 24622
  $222 = $ReallocAsyncCtx + 240 | 0; //@line 24623
  HEAP32[$222 >> 2] = $130; //@line 24624
  $223 = $ReallocAsyncCtx + 244 | 0; //@line 24625
  HEAP32[$223 >> 2] = $122; //@line 24626
  $224 = $ReallocAsyncCtx + 248 | 0; //@line 24627
  HEAP32[$224 >> 2] = $124; //@line 24628
  $225 = $ReallocAsyncCtx + 252 | 0; //@line 24629
  HEAP32[$225 >> 2] = $126; //@line 24630
  $226 = $ReallocAsyncCtx + 256 | 0; //@line 24631
  HEAP32[$226 >> 2] = $128; //@line 24632
  $227 = $ReallocAsyncCtx + 260 | 0; //@line 24633
  HEAP32[$227 >> 2] = $8; //@line 24634
  $228 = $ReallocAsyncCtx + 264 | 0; //@line 24635
  HEAP32[$228 >> 2] = $132; //@line 24636
  $229 = $ReallocAsyncCtx + 268 | 0; //@line 24637
  HEAP32[$229 >> 2] = $134; //@line 24638
  sp = STACKTOP; //@line 24639
  return;
 } else if ((label | 0) == 9) {
  $247 = HEAP8[$118 + ($137 & 255) >> 0] | 0; //@line 24645
  HEAP8[$48 >> 0] = ($247 & 255) >>> 4 & 7; //@line 24650
  HEAP8[$72 >> 0] = $247 & 15; //@line 24652
  $266 = $$0$be + 5 << 24 >> 24; //@line 24666
  HEAP32[$54 >> 2] = (HEAPU8[$118 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$118 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$118 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 24674
  $276 = HEAP32[(HEAP32[$36 >> 2] | 0) + 40 >> 2] | 0; //@line 24677
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(268) | 0; //@line 24678
  $277 = FUNCTION_TABLE_iii[$276 & 31]($98, $94) | 0; //@line 24679
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 505; //@line 24682
   $278 = $ReallocAsyncCtx2 + 4 | 0; //@line 24683
   HEAP32[$278 >> 2] = $2; //@line 24684
   $279 = $ReallocAsyncCtx2 + 8 | 0; //@line 24685
   HEAP32[$279 >> 2] = $4; //@line 24686
   $280 = $ReallocAsyncCtx2 + 12 | 0; //@line 24687
   HEAP32[$280 >> 2] = $6; //@line 24688
   $281 = $ReallocAsyncCtx2 + 16 | 0; //@line 24689
   HEAP32[$281 >> 2] = $8; //@line 24690
   $282 = $ReallocAsyncCtx2 + 20 | 0; //@line 24691
   HEAP32[$282 >> 2] = $10; //@line 24692
   $283 = $ReallocAsyncCtx2 + 24 | 0; //@line 24693
   HEAP32[$283 >> 2] = $12; //@line 24694
   $284 = $ReallocAsyncCtx2 + 28 | 0; //@line 24695
   HEAP32[$284 >> 2] = $14; //@line 24696
   $285 = $ReallocAsyncCtx2 + 32 | 0; //@line 24697
   HEAP32[$285 >> 2] = $16; //@line 24698
   $286 = $ReallocAsyncCtx2 + 36 | 0; //@line 24699
   HEAP32[$286 >> 2] = $18; //@line 24700
   $287 = $ReallocAsyncCtx2 + 40 | 0; //@line 24701
   HEAP32[$287 >> 2] = $20; //@line 24702
   $288 = $ReallocAsyncCtx2 + 44 | 0; //@line 24703
   HEAP32[$288 >> 2] = $22; //@line 24704
   $289 = $ReallocAsyncCtx2 + 48 | 0; //@line 24705
   HEAP8[$289 >> 0] = $266; //@line 24706
   $290 = $ReallocAsyncCtx2 + 52 | 0; //@line 24707
   HEAP32[$290 >> 2] = $24; //@line 24708
   $291 = $ReallocAsyncCtx2 + 56 | 0; //@line 24709
   HEAP32[$291 >> 2] = $26; //@line 24710
   $292 = $ReallocAsyncCtx2 + 60 | 0; //@line 24711
   HEAP32[$292 >> 2] = $28; //@line 24712
   $293 = $ReallocAsyncCtx2 + 64 | 0; //@line 24713
   HEAP32[$293 >> 2] = $30; //@line 24714
   $294 = $ReallocAsyncCtx2 + 68 | 0; //@line 24715
   HEAP32[$294 >> 2] = $32; //@line 24716
   $295 = $ReallocAsyncCtx2 + 72 | 0; //@line 24717
   HEAP32[$295 >> 2] = $34; //@line 24718
   $296 = $ReallocAsyncCtx2 + 76 | 0; //@line 24719
   HEAP32[$296 >> 2] = $36; //@line 24720
   $297 = $ReallocAsyncCtx2 + 80 | 0; //@line 24721
   HEAP32[$297 >> 2] = $38; //@line 24722
   $298 = $ReallocAsyncCtx2 + 84 | 0; //@line 24723
   HEAP32[$298 >> 2] = $40; //@line 24724
   $299 = $ReallocAsyncCtx2 + 88 | 0; //@line 24725
   HEAP32[$299 >> 2] = $42; //@line 24726
   $300 = $ReallocAsyncCtx2 + 92 | 0; //@line 24727
   HEAP32[$300 >> 2] = $44; //@line 24728
   $301 = $ReallocAsyncCtx2 + 96 | 0; //@line 24729
   HEAP32[$301 >> 2] = $46; //@line 24730
   $302 = $ReallocAsyncCtx2 + 100 | 0; //@line 24731
   HEAP32[$302 >> 2] = $48; //@line 24732
   $303 = $ReallocAsyncCtx2 + 104 | 0; //@line 24733
   HEAP32[$303 >> 2] = $50; //@line 24734
   $304 = $ReallocAsyncCtx2 + 108 | 0; //@line 24735
   HEAP32[$304 >> 2] = $52; //@line 24736
   $305 = $ReallocAsyncCtx2 + 112 | 0; //@line 24737
   HEAP32[$305 >> 2] = $54; //@line 24738
   $306 = $ReallocAsyncCtx2 + 116 | 0; //@line 24739
   HEAP32[$306 >> 2] = $56; //@line 24740
   $307 = $ReallocAsyncCtx2 + 120 | 0; //@line 24741
   HEAP32[$307 >> 2] = $58; //@line 24742
   $308 = $ReallocAsyncCtx2 + 124 | 0; //@line 24743
   HEAP32[$308 >> 2] = $60; //@line 24744
   $309 = $ReallocAsyncCtx2 + 128 | 0; //@line 24745
   HEAP32[$309 >> 2] = $62; //@line 24746
   $310 = $ReallocAsyncCtx2 + 132 | 0; //@line 24747
   HEAP32[$310 >> 2] = $66; //@line 24748
   $311 = $ReallocAsyncCtx2 + 136 | 0; //@line 24749
   HEAP32[$311 >> 2] = $68; //@line 24750
   $312 = $ReallocAsyncCtx2 + 140 | 0; //@line 24751
   HEAP32[$312 >> 2] = $70; //@line 24752
   $313 = $ReallocAsyncCtx2 + 144 | 0; //@line 24753
   HEAP32[$313 >> 2] = $72; //@line 24754
   $314 = $ReallocAsyncCtx2 + 148 | 0; //@line 24755
   HEAP32[$314 >> 2] = $74; //@line 24756
   $315 = $ReallocAsyncCtx2 + 152 | 0; //@line 24757
   HEAP32[$315 >> 2] = $76; //@line 24758
   $316 = $ReallocAsyncCtx2 + 156 | 0; //@line 24759
   HEAP32[$316 >> 2] = $78; //@line 24760
   $317 = $ReallocAsyncCtx2 + 160 | 0; //@line 24761
   HEAP32[$317 >> 2] = $80; //@line 24762
   $318 = $ReallocAsyncCtx2 + 164 | 0; //@line 24763
   HEAP32[$318 >> 2] = $82; //@line 24764
   $319 = $ReallocAsyncCtx2 + 168 | 0; //@line 24765
   HEAP32[$319 >> 2] = $84; //@line 24766
   $320 = $ReallocAsyncCtx2 + 172 | 0; //@line 24767
   HEAP32[$320 >> 2] = $86; //@line 24768
   $321 = $ReallocAsyncCtx2 + 176 | 0; //@line 24769
   HEAP32[$321 >> 2] = $88; //@line 24770
   $322 = $ReallocAsyncCtx2 + 180 | 0; //@line 24771
   HEAP32[$322 >> 2] = $90; //@line 24772
   $323 = $ReallocAsyncCtx2 + 184 | 0; //@line 24773
   HEAP32[$323 >> 2] = $92; //@line 24774
   $324 = $ReallocAsyncCtx2 + 188 | 0; //@line 24775
   HEAP32[$324 >> 2] = $94; //@line 24776
   $325 = $ReallocAsyncCtx2 + 192 | 0; //@line 24777
   HEAP32[$325 >> 2] = $96; //@line 24778
   $326 = $ReallocAsyncCtx2 + 196 | 0; //@line 24779
   HEAP32[$326 >> 2] = $98; //@line 24780
   $327 = $ReallocAsyncCtx2 + 200 | 0; //@line 24781
   HEAP32[$327 >> 2] = $100; //@line 24782
   $328 = $ReallocAsyncCtx2 + 204 | 0; //@line 24783
   HEAP32[$328 >> 2] = $102; //@line 24784
   $329 = $ReallocAsyncCtx2 + 208 | 0; //@line 24785
   HEAP32[$329 >> 2] = $104; //@line 24786
   $330 = $ReallocAsyncCtx2 + 212 | 0; //@line 24787
   HEAP8[$330 >> 0] = $106; //@line 24788
   $331 = $ReallocAsyncCtx2 + 213 | 0; //@line 24789
   HEAP8[$331 >> 0] = $108; //@line 24790
   $332 = $ReallocAsyncCtx2 + 216 | 0; //@line 24791
   HEAP32[$332 >> 2] = $110; //@line 24792
   $333 = $ReallocAsyncCtx2 + 220 | 0; //@line 24793
   HEAP32[$333 >> 2] = $112; //@line 24794
   $334 = $ReallocAsyncCtx2 + 224 | 0; //@line 24795
   HEAP8[$334 >> 0] = $114; //@line 24796
   $335 = $ReallocAsyncCtx2 + 228 | 0; //@line 24797
   HEAP32[$335 >> 2] = $116; //@line 24798
   $336 = $ReallocAsyncCtx2 + 232 | 0; //@line 24799
   HEAP32[$336 >> 2] = $118; //@line 24800
   $337 = $ReallocAsyncCtx2 + 236 | 0; //@line 24801
   HEAP32[$337 >> 2] = $120; //@line 24802
   $338 = $ReallocAsyncCtx2 + 240 | 0; //@line 24803
   HEAP32[$338 >> 2] = $122; //@line 24804
   $339 = $ReallocAsyncCtx2 + 244 | 0; //@line 24805
   HEAP32[$339 >> 2] = $124; //@line 24806
   $340 = $ReallocAsyncCtx2 + 248 | 0; //@line 24807
   HEAP32[$340 >> 2] = $126; //@line 24808
   $341 = $ReallocAsyncCtx2 + 252 | 0; //@line 24809
   HEAP32[$341 >> 2] = $128; //@line 24810
   $342 = $ReallocAsyncCtx2 + 256 | 0; //@line 24811
   HEAP32[$342 >> 2] = $130; //@line 24812
   $343 = $ReallocAsyncCtx2 + 260 | 0; //@line 24813
   HEAP32[$343 >> 2] = $132; //@line 24814
   $344 = $ReallocAsyncCtx2 + 264 | 0; //@line 24815
   HEAP32[$344 >> 2] = $134; //@line 24816
   sp = STACKTOP; //@line 24817
   return;
  }
  HEAP8[___async_retval >> 0] = $277; //@line 24821
  ___async_unwind = 0; //@line 24822
  HEAP32[$ReallocAsyncCtx2 >> 2] = 505; //@line 24823
  $278 = $ReallocAsyncCtx2 + 4 | 0; //@line 24824
  HEAP32[$278 >> 2] = $2; //@line 24825
  $279 = $ReallocAsyncCtx2 + 8 | 0; //@line 24826
  HEAP32[$279 >> 2] = $4; //@line 24827
  $280 = $ReallocAsyncCtx2 + 12 | 0; //@line 24828
  HEAP32[$280 >> 2] = $6; //@line 24829
  $281 = $ReallocAsyncCtx2 + 16 | 0; //@line 24830
  HEAP32[$281 >> 2] = $8; //@line 24831
  $282 = $ReallocAsyncCtx2 + 20 | 0; //@line 24832
  HEAP32[$282 >> 2] = $10; //@line 24833
  $283 = $ReallocAsyncCtx2 + 24 | 0; //@line 24834
  HEAP32[$283 >> 2] = $12; //@line 24835
  $284 = $ReallocAsyncCtx2 + 28 | 0; //@line 24836
  HEAP32[$284 >> 2] = $14; //@line 24837
  $285 = $ReallocAsyncCtx2 + 32 | 0; //@line 24838
  HEAP32[$285 >> 2] = $16; //@line 24839
  $286 = $ReallocAsyncCtx2 + 36 | 0; //@line 24840
  HEAP32[$286 >> 2] = $18; //@line 24841
  $287 = $ReallocAsyncCtx2 + 40 | 0; //@line 24842
  HEAP32[$287 >> 2] = $20; //@line 24843
  $288 = $ReallocAsyncCtx2 + 44 | 0; //@line 24844
  HEAP32[$288 >> 2] = $22; //@line 24845
  $289 = $ReallocAsyncCtx2 + 48 | 0; //@line 24846
  HEAP8[$289 >> 0] = $266; //@line 24847
  $290 = $ReallocAsyncCtx2 + 52 | 0; //@line 24848
  HEAP32[$290 >> 2] = $24; //@line 24849
  $291 = $ReallocAsyncCtx2 + 56 | 0; //@line 24850
  HEAP32[$291 >> 2] = $26; //@line 24851
  $292 = $ReallocAsyncCtx2 + 60 | 0; //@line 24852
  HEAP32[$292 >> 2] = $28; //@line 24853
  $293 = $ReallocAsyncCtx2 + 64 | 0; //@line 24854
  HEAP32[$293 >> 2] = $30; //@line 24855
  $294 = $ReallocAsyncCtx2 + 68 | 0; //@line 24856
  HEAP32[$294 >> 2] = $32; //@line 24857
  $295 = $ReallocAsyncCtx2 + 72 | 0; //@line 24858
  HEAP32[$295 >> 2] = $34; //@line 24859
  $296 = $ReallocAsyncCtx2 + 76 | 0; //@line 24860
  HEAP32[$296 >> 2] = $36; //@line 24861
  $297 = $ReallocAsyncCtx2 + 80 | 0; //@line 24862
  HEAP32[$297 >> 2] = $38; //@line 24863
  $298 = $ReallocAsyncCtx2 + 84 | 0; //@line 24864
  HEAP32[$298 >> 2] = $40; //@line 24865
  $299 = $ReallocAsyncCtx2 + 88 | 0; //@line 24866
  HEAP32[$299 >> 2] = $42; //@line 24867
  $300 = $ReallocAsyncCtx2 + 92 | 0; //@line 24868
  HEAP32[$300 >> 2] = $44; //@line 24869
  $301 = $ReallocAsyncCtx2 + 96 | 0; //@line 24870
  HEAP32[$301 >> 2] = $46; //@line 24871
  $302 = $ReallocAsyncCtx2 + 100 | 0; //@line 24872
  HEAP32[$302 >> 2] = $48; //@line 24873
  $303 = $ReallocAsyncCtx2 + 104 | 0; //@line 24874
  HEAP32[$303 >> 2] = $50; //@line 24875
  $304 = $ReallocAsyncCtx2 + 108 | 0; //@line 24876
  HEAP32[$304 >> 2] = $52; //@line 24877
  $305 = $ReallocAsyncCtx2 + 112 | 0; //@line 24878
  HEAP32[$305 >> 2] = $54; //@line 24879
  $306 = $ReallocAsyncCtx2 + 116 | 0; //@line 24880
  HEAP32[$306 >> 2] = $56; //@line 24881
  $307 = $ReallocAsyncCtx2 + 120 | 0; //@line 24882
  HEAP32[$307 >> 2] = $58; //@line 24883
  $308 = $ReallocAsyncCtx2 + 124 | 0; //@line 24884
  HEAP32[$308 >> 2] = $60; //@line 24885
  $309 = $ReallocAsyncCtx2 + 128 | 0; //@line 24886
  HEAP32[$309 >> 2] = $62; //@line 24887
  $310 = $ReallocAsyncCtx2 + 132 | 0; //@line 24888
  HEAP32[$310 >> 2] = $66; //@line 24889
  $311 = $ReallocAsyncCtx2 + 136 | 0; //@line 24890
  HEAP32[$311 >> 2] = $68; //@line 24891
  $312 = $ReallocAsyncCtx2 + 140 | 0; //@line 24892
  HEAP32[$312 >> 2] = $70; //@line 24893
  $313 = $ReallocAsyncCtx2 + 144 | 0; //@line 24894
  HEAP32[$313 >> 2] = $72; //@line 24895
  $314 = $ReallocAsyncCtx2 + 148 | 0; //@line 24896
  HEAP32[$314 >> 2] = $74; //@line 24897
  $315 = $ReallocAsyncCtx2 + 152 | 0; //@line 24898
  HEAP32[$315 >> 2] = $76; //@line 24899
  $316 = $ReallocAsyncCtx2 + 156 | 0; //@line 24900
  HEAP32[$316 >> 2] = $78; //@line 24901
  $317 = $ReallocAsyncCtx2 + 160 | 0; //@line 24902
  HEAP32[$317 >> 2] = $80; //@line 24903
  $318 = $ReallocAsyncCtx2 + 164 | 0; //@line 24904
  HEAP32[$318 >> 2] = $82; //@line 24905
  $319 = $ReallocAsyncCtx2 + 168 | 0; //@line 24906
  HEAP32[$319 >> 2] = $84; //@line 24907
  $320 = $ReallocAsyncCtx2 + 172 | 0; //@line 24908
  HEAP32[$320 >> 2] = $86; //@line 24909
  $321 = $ReallocAsyncCtx2 + 176 | 0; //@line 24910
  HEAP32[$321 >> 2] = $88; //@line 24911
  $322 = $ReallocAsyncCtx2 + 180 | 0; //@line 24912
  HEAP32[$322 >> 2] = $90; //@line 24913
  $323 = $ReallocAsyncCtx2 + 184 | 0; //@line 24914
  HEAP32[$323 >> 2] = $92; //@line 24915
  $324 = $ReallocAsyncCtx2 + 188 | 0; //@line 24916
  HEAP32[$324 >> 2] = $94; //@line 24917
  $325 = $ReallocAsyncCtx2 + 192 | 0; //@line 24918
  HEAP32[$325 >> 2] = $96; //@line 24919
  $326 = $ReallocAsyncCtx2 + 196 | 0; //@line 24920
  HEAP32[$326 >> 2] = $98; //@line 24921
  $327 = $ReallocAsyncCtx2 + 200 | 0; //@line 24922
  HEAP32[$327 >> 2] = $100; //@line 24923
  $328 = $ReallocAsyncCtx2 + 204 | 0; //@line 24924
  HEAP32[$328 >> 2] = $102; //@line 24925
  $329 = $ReallocAsyncCtx2 + 208 | 0; //@line 24926
  HEAP32[$329 >> 2] = $104; //@line 24927
  $330 = $ReallocAsyncCtx2 + 212 | 0; //@line 24928
  HEAP8[$330 >> 0] = $106; //@line 24929
  $331 = $ReallocAsyncCtx2 + 213 | 0; //@line 24930
  HEAP8[$331 >> 0] = $108; //@line 24931
  $332 = $ReallocAsyncCtx2 + 216 | 0; //@line 24932
  HEAP32[$332 >> 2] = $110; //@line 24933
  $333 = $ReallocAsyncCtx2 + 220 | 0; //@line 24934
  HEAP32[$333 >> 2] = $112; //@line 24935
  $334 = $ReallocAsyncCtx2 + 224 | 0; //@line 24936
  HEAP8[$334 >> 0] = $114; //@line 24937
  $335 = $ReallocAsyncCtx2 + 228 | 0; //@line 24938
  HEAP32[$335 >> 2] = $116; //@line 24939
  $336 = $ReallocAsyncCtx2 + 232 | 0; //@line 24940
  HEAP32[$336 >> 2] = $118; //@line 24941
  $337 = $ReallocAsyncCtx2 + 236 | 0; //@line 24942
  HEAP32[$337 >> 2] = $120; //@line 24943
  $338 = $ReallocAsyncCtx2 + 240 | 0; //@line 24944
  HEAP32[$338 >> 2] = $122; //@line 24945
  $339 = $ReallocAsyncCtx2 + 244 | 0; //@line 24946
  HEAP32[$339 >> 2] = $124; //@line 24947
  $340 = $ReallocAsyncCtx2 + 248 | 0; //@line 24948
  HEAP32[$340 >> 2] = $126; //@line 24949
  $341 = $ReallocAsyncCtx2 + 252 | 0; //@line 24950
  HEAP32[$341 >> 2] = $128; //@line 24951
  $342 = $ReallocAsyncCtx2 + 256 | 0; //@line 24952
  HEAP32[$342 >> 2] = $130; //@line 24953
  $343 = $ReallocAsyncCtx2 + 260 | 0; //@line 24954
  HEAP32[$343 >> 2] = $132; //@line 24955
  $344 = $ReallocAsyncCtx2 + 264 | 0; //@line 24956
  HEAP32[$344 >> 2] = $134; //@line 24957
  sp = STACKTOP; //@line 24958
  return;
 } else if ((label | 0) == 14) {
  HEAP8[$124 >> 0] = HEAP8[$118 + ($137 & 255) >> 0] | 0; //@line 24966
  HEAP32[$96 >> 2] = $52; //@line 24967
  HEAP32[$80 >> 2] = (HEAPU8[$118 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$118 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$118 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 24988
  HEAP32[$86 >> 2] = 0; //@line 24989
  $385 = $$0$be + 6 << 24 >> 24; //@line 24990
  HEAP8[$60 >> 0] = HEAP8[$118 + ($$0$be + 5 & 255) >> 0] | 0; //@line 24994
  $391 = HEAP32[(HEAP32[$74 >> 2] | 0) + 8 >> 2] | 0; //@line 24997
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(268) | 0; //@line 24998
  $392 = FUNCTION_TABLE_iii[$391 & 31]($98, $92) | 0; //@line 24999
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 506; //@line 25002
   $393 = $ReallocAsyncCtx3 + 4 | 0; //@line 25003
   HEAP32[$393 >> 2] = $2; //@line 25004
   $394 = $ReallocAsyncCtx3 + 8 | 0; //@line 25005
   HEAP32[$394 >> 2] = $4; //@line 25006
   $395 = $ReallocAsyncCtx3 + 12 | 0; //@line 25007
   HEAP32[$395 >> 2] = $6; //@line 25008
   $396 = $ReallocAsyncCtx3 + 16 | 0; //@line 25009
   HEAP32[$396 >> 2] = $8; //@line 25010
   $397 = $ReallocAsyncCtx3 + 20 | 0; //@line 25011
   HEAP32[$397 >> 2] = $10; //@line 25012
   $398 = $ReallocAsyncCtx3 + 24 | 0; //@line 25013
   HEAP32[$398 >> 2] = $12; //@line 25014
   $399 = $ReallocAsyncCtx3 + 28 | 0; //@line 25015
   HEAP32[$399 >> 2] = $14; //@line 25016
   $400 = $ReallocAsyncCtx3 + 32 | 0; //@line 25017
   HEAP32[$400 >> 2] = $16; //@line 25018
   $401 = $ReallocAsyncCtx3 + 36 | 0; //@line 25019
   HEAP32[$401 >> 2] = $18; //@line 25020
   $402 = $ReallocAsyncCtx3 + 40 | 0; //@line 25021
   HEAP32[$402 >> 2] = $20; //@line 25022
   $403 = $ReallocAsyncCtx3 + 44 | 0; //@line 25023
   HEAP32[$403 >> 2] = $22; //@line 25024
   $404 = $ReallocAsyncCtx3 + 48 | 0; //@line 25025
   HEAP32[$404 >> 2] = $24; //@line 25026
   $405 = $ReallocAsyncCtx3 + 52 | 0; //@line 25027
   HEAP32[$405 >> 2] = $26; //@line 25028
   $406 = $ReallocAsyncCtx3 + 56 | 0; //@line 25029
   HEAP32[$406 >> 2] = $28; //@line 25030
   $407 = $ReallocAsyncCtx3 + 60 | 0; //@line 25031
   HEAP32[$407 >> 2] = $30; //@line 25032
   $408 = $ReallocAsyncCtx3 + 64 | 0; //@line 25033
   HEAP32[$408 >> 2] = $32; //@line 25034
   $409 = $ReallocAsyncCtx3 + 68 | 0; //@line 25035
   HEAP32[$409 >> 2] = $34; //@line 25036
   $410 = $ReallocAsyncCtx3 + 72 | 0; //@line 25037
   HEAP32[$410 >> 2] = $36; //@line 25038
   $411 = $ReallocAsyncCtx3 + 76 | 0; //@line 25039
   HEAP32[$411 >> 2] = $38; //@line 25040
   $412 = $ReallocAsyncCtx3 + 80 | 0; //@line 25041
   HEAP32[$412 >> 2] = $40; //@line 25042
   $413 = $ReallocAsyncCtx3 + 84 | 0; //@line 25043
   HEAP32[$413 >> 2] = $42; //@line 25044
   $414 = $ReallocAsyncCtx3 + 88 | 0; //@line 25045
   HEAP8[$414 >> 0] = $385; //@line 25046
   $415 = $ReallocAsyncCtx3 + 92 | 0; //@line 25047
   HEAP32[$415 >> 2] = $44; //@line 25048
   $416 = $ReallocAsyncCtx3 + 96 | 0; //@line 25049
   HEAP32[$416 >> 2] = $46; //@line 25050
   $417 = $ReallocAsyncCtx3 + 100 | 0; //@line 25051
   HEAP32[$417 >> 2] = $48; //@line 25052
   $418 = $ReallocAsyncCtx3 + 104 | 0; //@line 25053
   HEAP32[$418 >> 2] = $50; //@line 25054
   $419 = $ReallocAsyncCtx3 + 108 | 0; //@line 25055
   HEAP32[$419 >> 2] = $52; //@line 25056
   $420 = $ReallocAsyncCtx3 + 112 | 0; //@line 25057
   HEAP32[$420 >> 2] = $54; //@line 25058
   $421 = $ReallocAsyncCtx3 + 116 | 0; //@line 25059
   HEAP32[$421 >> 2] = $56; //@line 25060
   $422 = $ReallocAsyncCtx3 + 120 | 0; //@line 25061
   HEAP32[$422 >> 2] = $58; //@line 25062
   $423 = $ReallocAsyncCtx3 + 124 | 0; //@line 25063
   HEAP32[$423 >> 2] = $60; //@line 25064
   $424 = $ReallocAsyncCtx3 + 128 | 0; //@line 25065
   HEAP32[$424 >> 2] = $62; //@line 25066
   $425 = $ReallocAsyncCtx3 + 132 | 0; //@line 25067
   HEAP32[$425 >> 2] = $66; //@line 25068
   $426 = $ReallocAsyncCtx3 + 136 | 0; //@line 25069
   HEAP32[$426 >> 2] = $68; //@line 25070
   $427 = $ReallocAsyncCtx3 + 140 | 0; //@line 25071
   HEAP32[$427 >> 2] = $70; //@line 25072
   $428 = $ReallocAsyncCtx3 + 144 | 0; //@line 25073
   HEAP32[$428 >> 2] = $72; //@line 25074
   $429 = $ReallocAsyncCtx3 + 148 | 0; //@line 25075
   HEAP32[$429 >> 2] = $74; //@line 25076
   $430 = $ReallocAsyncCtx3 + 152 | 0; //@line 25077
   HEAP32[$430 >> 2] = $76; //@line 25078
   $431 = $ReallocAsyncCtx3 + 156 | 0; //@line 25079
   HEAP32[$431 >> 2] = $78; //@line 25080
   $432 = $ReallocAsyncCtx3 + 160 | 0; //@line 25081
   HEAP32[$432 >> 2] = $80; //@line 25082
   $433 = $ReallocAsyncCtx3 + 164 | 0; //@line 25083
   HEAP32[$433 >> 2] = $82; //@line 25084
   $434 = $ReallocAsyncCtx3 + 168 | 0; //@line 25085
   HEAP32[$434 >> 2] = $84; //@line 25086
   $435 = $ReallocAsyncCtx3 + 172 | 0; //@line 25087
   HEAP32[$435 >> 2] = $86; //@line 25088
   $436 = $ReallocAsyncCtx3 + 176 | 0; //@line 25089
   HEAP32[$436 >> 2] = $88; //@line 25090
   $437 = $ReallocAsyncCtx3 + 180 | 0; //@line 25091
   HEAP32[$437 >> 2] = $90; //@line 25092
   $438 = $ReallocAsyncCtx3 + 184 | 0; //@line 25093
   HEAP32[$438 >> 2] = $92; //@line 25094
   $439 = $ReallocAsyncCtx3 + 188 | 0; //@line 25095
   HEAP32[$439 >> 2] = $94; //@line 25096
   $440 = $ReallocAsyncCtx3 + 192 | 0; //@line 25097
   HEAP32[$440 >> 2] = $96; //@line 25098
   $441 = $ReallocAsyncCtx3 + 196 | 0; //@line 25099
   HEAP32[$441 >> 2] = $98; //@line 25100
   $442 = $ReallocAsyncCtx3 + 200 | 0; //@line 25101
   HEAP32[$442 >> 2] = $100; //@line 25102
   $443 = $ReallocAsyncCtx3 + 204 | 0; //@line 25103
   HEAP32[$443 >> 2] = $102; //@line 25104
   $444 = $ReallocAsyncCtx3 + 208 | 0; //@line 25105
   HEAP32[$444 >> 2] = $104; //@line 25106
   $445 = $ReallocAsyncCtx3 + 212 | 0; //@line 25107
   HEAP8[$445 >> 0] = $106; //@line 25108
   $446 = $ReallocAsyncCtx3 + 213 | 0; //@line 25109
   HEAP8[$446 >> 0] = $108; //@line 25110
   $447 = $ReallocAsyncCtx3 + 216 | 0; //@line 25111
   HEAP32[$447 >> 2] = $110; //@line 25112
   $448 = $ReallocAsyncCtx3 + 220 | 0; //@line 25113
   HEAP32[$448 >> 2] = $112; //@line 25114
   $449 = $ReallocAsyncCtx3 + 224 | 0; //@line 25115
   HEAP8[$449 >> 0] = $114; //@line 25116
   $450 = $ReallocAsyncCtx3 + 228 | 0; //@line 25117
   HEAP32[$450 >> 2] = $116; //@line 25118
   $451 = $ReallocAsyncCtx3 + 232 | 0; //@line 25119
   HEAP32[$451 >> 2] = $118; //@line 25120
   $452 = $ReallocAsyncCtx3 + 236 | 0; //@line 25121
   HEAP32[$452 >> 2] = $120; //@line 25122
   $453 = $ReallocAsyncCtx3 + 240 | 0; //@line 25123
   HEAP32[$453 >> 2] = $122; //@line 25124
   $454 = $ReallocAsyncCtx3 + 244 | 0; //@line 25125
   HEAP32[$454 >> 2] = $124; //@line 25126
   $455 = $ReallocAsyncCtx3 + 248 | 0; //@line 25127
   HEAP32[$455 >> 2] = $126; //@line 25128
   $456 = $ReallocAsyncCtx3 + 252 | 0; //@line 25129
   HEAP32[$456 >> 2] = $128; //@line 25130
   $457 = $ReallocAsyncCtx3 + 256 | 0; //@line 25131
   HEAP32[$457 >> 2] = $130; //@line 25132
   $458 = $ReallocAsyncCtx3 + 260 | 0; //@line 25133
   HEAP32[$458 >> 2] = $132; //@line 25134
   $459 = $ReallocAsyncCtx3 + 264 | 0; //@line 25135
   HEAP32[$459 >> 2] = $134; //@line 25136
   sp = STACKTOP; //@line 25137
   return;
  }
  HEAP8[___async_retval >> 0] = $392; //@line 25141
  ___async_unwind = 0; //@line 25142
  HEAP32[$ReallocAsyncCtx3 >> 2] = 506; //@line 25143
  $393 = $ReallocAsyncCtx3 + 4 | 0; //@line 25144
  HEAP32[$393 >> 2] = $2; //@line 25145
  $394 = $ReallocAsyncCtx3 + 8 | 0; //@line 25146
  HEAP32[$394 >> 2] = $4; //@line 25147
  $395 = $ReallocAsyncCtx3 + 12 | 0; //@line 25148
  HEAP32[$395 >> 2] = $6; //@line 25149
  $396 = $ReallocAsyncCtx3 + 16 | 0; //@line 25150
  HEAP32[$396 >> 2] = $8; //@line 25151
  $397 = $ReallocAsyncCtx3 + 20 | 0; //@line 25152
  HEAP32[$397 >> 2] = $10; //@line 25153
  $398 = $ReallocAsyncCtx3 + 24 | 0; //@line 25154
  HEAP32[$398 >> 2] = $12; //@line 25155
  $399 = $ReallocAsyncCtx3 + 28 | 0; //@line 25156
  HEAP32[$399 >> 2] = $14; //@line 25157
  $400 = $ReallocAsyncCtx3 + 32 | 0; //@line 25158
  HEAP32[$400 >> 2] = $16; //@line 25159
  $401 = $ReallocAsyncCtx3 + 36 | 0; //@line 25160
  HEAP32[$401 >> 2] = $18; //@line 25161
  $402 = $ReallocAsyncCtx3 + 40 | 0; //@line 25162
  HEAP32[$402 >> 2] = $20; //@line 25163
  $403 = $ReallocAsyncCtx3 + 44 | 0; //@line 25164
  HEAP32[$403 >> 2] = $22; //@line 25165
  $404 = $ReallocAsyncCtx3 + 48 | 0; //@line 25166
  HEAP32[$404 >> 2] = $24; //@line 25167
  $405 = $ReallocAsyncCtx3 + 52 | 0; //@line 25168
  HEAP32[$405 >> 2] = $26; //@line 25169
  $406 = $ReallocAsyncCtx3 + 56 | 0; //@line 25170
  HEAP32[$406 >> 2] = $28; //@line 25171
  $407 = $ReallocAsyncCtx3 + 60 | 0; //@line 25172
  HEAP32[$407 >> 2] = $30; //@line 25173
  $408 = $ReallocAsyncCtx3 + 64 | 0; //@line 25174
  HEAP32[$408 >> 2] = $32; //@line 25175
  $409 = $ReallocAsyncCtx3 + 68 | 0; //@line 25176
  HEAP32[$409 >> 2] = $34; //@line 25177
  $410 = $ReallocAsyncCtx3 + 72 | 0; //@line 25178
  HEAP32[$410 >> 2] = $36; //@line 25179
  $411 = $ReallocAsyncCtx3 + 76 | 0; //@line 25180
  HEAP32[$411 >> 2] = $38; //@line 25181
  $412 = $ReallocAsyncCtx3 + 80 | 0; //@line 25182
  HEAP32[$412 >> 2] = $40; //@line 25183
  $413 = $ReallocAsyncCtx3 + 84 | 0; //@line 25184
  HEAP32[$413 >> 2] = $42; //@line 25185
  $414 = $ReallocAsyncCtx3 + 88 | 0; //@line 25186
  HEAP8[$414 >> 0] = $385; //@line 25187
  $415 = $ReallocAsyncCtx3 + 92 | 0; //@line 25188
  HEAP32[$415 >> 2] = $44; //@line 25189
  $416 = $ReallocAsyncCtx3 + 96 | 0; //@line 25190
  HEAP32[$416 >> 2] = $46; //@line 25191
  $417 = $ReallocAsyncCtx3 + 100 | 0; //@line 25192
  HEAP32[$417 >> 2] = $48; //@line 25193
  $418 = $ReallocAsyncCtx3 + 104 | 0; //@line 25194
  HEAP32[$418 >> 2] = $50; //@line 25195
  $419 = $ReallocAsyncCtx3 + 108 | 0; //@line 25196
  HEAP32[$419 >> 2] = $52; //@line 25197
  $420 = $ReallocAsyncCtx3 + 112 | 0; //@line 25198
  HEAP32[$420 >> 2] = $54; //@line 25199
  $421 = $ReallocAsyncCtx3 + 116 | 0; //@line 25200
  HEAP32[$421 >> 2] = $56; //@line 25201
  $422 = $ReallocAsyncCtx3 + 120 | 0; //@line 25202
  HEAP32[$422 >> 2] = $58; //@line 25203
  $423 = $ReallocAsyncCtx3 + 124 | 0; //@line 25204
  HEAP32[$423 >> 2] = $60; //@line 25205
  $424 = $ReallocAsyncCtx3 + 128 | 0; //@line 25206
  HEAP32[$424 >> 2] = $62; //@line 25207
  $425 = $ReallocAsyncCtx3 + 132 | 0; //@line 25208
  HEAP32[$425 >> 2] = $66; //@line 25209
  $426 = $ReallocAsyncCtx3 + 136 | 0; //@line 25210
  HEAP32[$426 >> 2] = $68; //@line 25211
  $427 = $ReallocAsyncCtx3 + 140 | 0; //@line 25212
  HEAP32[$427 >> 2] = $70; //@line 25213
  $428 = $ReallocAsyncCtx3 + 144 | 0; //@line 25214
  HEAP32[$428 >> 2] = $72; //@line 25215
  $429 = $ReallocAsyncCtx3 + 148 | 0; //@line 25216
  HEAP32[$429 >> 2] = $74; //@line 25217
  $430 = $ReallocAsyncCtx3 + 152 | 0; //@line 25218
  HEAP32[$430 >> 2] = $76; //@line 25219
  $431 = $ReallocAsyncCtx3 + 156 | 0; //@line 25220
  HEAP32[$431 >> 2] = $78; //@line 25221
  $432 = $ReallocAsyncCtx3 + 160 | 0; //@line 25222
  HEAP32[$432 >> 2] = $80; //@line 25223
  $433 = $ReallocAsyncCtx3 + 164 | 0; //@line 25224
  HEAP32[$433 >> 2] = $82; //@line 25225
  $434 = $ReallocAsyncCtx3 + 168 | 0; //@line 25226
  HEAP32[$434 >> 2] = $84; //@line 25227
  $435 = $ReallocAsyncCtx3 + 172 | 0; //@line 25228
  HEAP32[$435 >> 2] = $86; //@line 25229
  $436 = $ReallocAsyncCtx3 + 176 | 0; //@line 25230
  HEAP32[$436 >> 2] = $88; //@line 25231
  $437 = $ReallocAsyncCtx3 + 180 | 0; //@line 25232
  HEAP32[$437 >> 2] = $90; //@line 25233
  $438 = $ReallocAsyncCtx3 + 184 | 0; //@line 25234
  HEAP32[$438 >> 2] = $92; //@line 25235
  $439 = $ReallocAsyncCtx3 + 188 | 0; //@line 25236
  HEAP32[$439 >> 2] = $94; //@line 25237
  $440 = $ReallocAsyncCtx3 + 192 | 0; //@line 25238
  HEAP32[$440 >> 2] = $96; //@line 25239
  $441 = $ReallocAsyncCtx3 + 196 | 0; //@line 25240
  HEAP32[$441 >> 2] = $98; //@line 25241
  $442 = $ReallocAsyncCtx3 + 200 | 0; //@line 25242
  HEAP32[$442 >> 2] = $100; //@line 25243
  $443 = $ReallocAsyncCtx3 + 204 | 0; //@line 25244
  HEAP32[$443 >> 2] = $102; //@line 25245
  $444 = $ReallocAsyncCtx3 + 208 | 0; //@line 25246
  HEAP32[$444 >> 2] = $104; //@line 25247
  $445 = $ReallocAsyncCtx3 + 212 | 0; //@line 25248
  HEAP8[$445 >> 0] = $106; //@line 25249
  $446 = $ReallocAsyncCtx3 + 213 | 0; //@line 25250
  HEAP8[$446 >> 0] = $108; //@line 25251
  $447 = $ReallocAsyncCtx3 + 216 | 0; //@line 25252
  HEAP32[$447 >> 2] = $110; //@line 25253
  $448 = $ReallocAsyncCtx3 + 220 | 0; //@line 25254
  HEAP32[$448 >> 2] = $112; //@line 25255
  $449 = $ReallocAsyncCtx3 + 224 | 0; //@line 25256
  HEAP8[$449 >> 0] = $114; //@line 25257
  $450 = $ReallocAsyncCtx3 + 228 | 0; //@line 25258
  HEAP32[$450 >> 2] = $116; //@line 25259
  $451 = $ReallocAsyncCtx3 + 232 | 0; //@line 25260
  HEAP32[$451 >> 2] = $118; //@line 25261
  $452 = $ReallocAsyncCtx3 + 236 | 0; //@line 25262
  HEAP32[$452 >> 2] = $120; //@line 25263
  $453 = $ReallocAsyncCtx3 + 240 | 0; //@line 25264
  HEAP32[$453 >> 2] = $122; //@line 25265
  $454 = $ReallocAsyncCtx3 + 244 | 0; //@line 25266
  HEAP32[$454 >> 2] = $124; //@line 25267
  $455 = $ReallocAsyncCtx3 + 248 | 0; //@line 25268
  HEAP32[$455 >> 2] = $126; //@line 25269
  $456 = $ReallocAsyncCtx3 + 252 | 0; //@line 25270
  HEAP32[$456 >> 2] = $128; //@line 25271
  $457 = $ReallocAsyncCtx3 + 256 | 0; //@line 25272
  HEAP32[$457 >> 2] = $130; //@line 25273
  $458 = $ReallocAsyncCtx3 + 260 | 0; //@line 25274
  HEAP32[$458 >> 2] = $132; //@line 25275
  $459 = $ReallocAsyncCtx3 + 264 | 0; //@line 25276
  HEAP32[$459 >> 2] = $134; //@line 25277
  sp = STACKTOP; //@line 25278
  return;
 } else if ((label | 0) == 19) {
  $478 = $$0$be + 2 << 24 >> 24; //@line 25282
  $481 = HEAP8[$118 + ($137 & 255) >> 0] | 0; //@line 25285
  HEAP8[$32 >> 0] = 0; //@line 25286
  $482 = $481 & 255; //@line 25287
  HEAP8[$38 >> 0] = $482 >>> 5 & 1; //@line 25291
  if ($482 & 16 | 0) {
   HEAP8[$32 >> 0] = 1; //@line 25295
  }
  HEAP8[$22 >> 0] = $482 & 15; //@line 25299
  $491 = HEAP32[(HEAP32[$30 >> 2] | 0) + 44 >> 2] | 0; //@line 25302
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(272) | 0; //@line 25303
  $492 = FUNCTION_TABLE_iii[$491 & 31]($98, $68) | 0; //@line 25304
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 507; //@line 25307
   $493 = $ReallocAsyncCtx4 + 4 | 0; //@line 25308
   HEAP32[$493 >> 2] = $2; //@line 25309
   $494 = $ReallocAsyncCtx4 + 8 | 0; //@line 25310
   HEAP32[$494 >> 2] = $4; //@line 25311
   $495 = $ReallocAsyncCtx4 + 12 | 0; //@line 25312
   HEAP32[$495 >> 2] = $6; //@line 25313
   $496 = $ReallocAsyncCtx4 + 16 | 0; //@line 25314
   HEAP32[$496 >> 2] = $8; //@line 25315
   $497 = $ReallocAsyncCtx4 + 20 | 0; //@line 25316
   HEAP32[$497 >> 2] = $10; //@line 25317
   $498 = $ReallocAsyncCtx4 + 24 | 0; //@line 25318
   HEAP32[$498 >> 2] = $12; //@line 25319
   $499 = $ReallocAsyncCtx4 + 28 | 0; //@line 25320
   HEAP32[$499 >> 2] = $14; //@line 25321
   $500 = $ReallocAsyncCtx4 + 32 | 0; //@line 25322
   HEAP32[$500 >> 2] = $16; //@line 25323
   $501 = $ReallocAsyncCtx4 + 36 | 0; //@line 25324
   HEAP32[$501 >> 2] = $18; //@line 25325
   $502 = $ReallocAsyncCtx4 + 40 | 0; //@line 25326
   HEAP32[$502 >> 2] = $20; //@line 25327
   $503 = $ReallocAsyncCtx4 + 44 | 0; //@line 25328
   HEAP32[$503 >> 2] = $22; //@line 25329
   $504 = $ReallocAsyncCtx4 + 48 | 0; //@line 25330
   HEAP32[$504 >> 2] = $24; //@line 25331
   $505 = $ReallocAsyncCtx4 + 52 | 0; //@line 25332
   HEAP8[$505 >> 0] = $478; //@line 25333
   $506 = $ReallocAsyncCtx4 + 56 | 0; //@line 25334
   HEAP32[$506 >> 2] = $26; //@line 25335
   $507 = $ReallocAsyncCtx4 + 60 | 0; //@line 25336
   HEAP32[$507 >> 2] = $28; //@line 25337
   $508 = $ReallocAsyncCtx4 + 64 | 0; //@line 25338
   HEAP32[$508 >> 2] = $30; //@line 25339
   $509 = $ReallocAsyncCtx4 + 68 | 0; //@line 25340
   HEAP32[$509 >> 2] = $32; //@line 25341
   $510 = $ReallocAsyncCtx4 + 72 | 0; //@line 25342
   HEAP32[$510 >> 2] = $34; //@line 25343
   $511 = $ReallocAsyncCtx4 + 76 | 0; //@line 25344
   HEAP32[$511 >> 2] = $36; //@line 25345
   $512 = $ReallocAsyncCtx4 + 80 | 0; //@line 25346
   HEAP32[$512 >> 2] = $38; //@line 25347
   $513 = $ReallocAsyncCtx4 + 84 | 0; //@line 25348
   HEAP32[$513 >> 2] = $40; //@line 25349
   $514 = $ReallocAsyncCtx4 + 88 | 0; //@line 25350
   HEAP32[$514 >> 2] = $42; //@line 25351
   $515 = $ReallocAsyncCtx4 + 92 | 0; //@line 25352
   HEAP32[$515 >> 2] = $44; //@line 25353
   $516 = $ReallocAsyncCtx4 + 96 | 0; //@line 25354
   HEAP32[$516 >> 2] = $46; //@line 25355
   $517 = $ReallocAsyncCtx4 + 100 | 0; //@line 25356
   HEAP32[$517 >> 2] = $48; //@line 25357
   $518 = $ReallocAsyncCtx4 + 104 | 0; //@line 25358
   HEAP32[$518 >> 2] = $50; //@line 25359
   $519 = $ReallocAsyncCtx4 + 108 | 0; //@line 25360
   HEAP32[$519 >> 2] = $52; //@line 25361
   $520 = $ReallocAsyncCtx4 + 112 | 0; //@line 25362
   HEAP32[$520 >> 2] = $54; //@line 25363
   $521 = $ReallocAsyncCtx4 + 116 | 0; //@line 25364
   HEAP32[$521 >> 2] = $56; //@line 25365
   $522 = $ReallocAsyncCtx4 + 120 | 0; //@line 25366
   HEAP32[$522 >> 2] = $58; //@line 25367
   $523 = $ReallocAsyncCtx4 + 124 | 0; //@line 25368
   HEAP32[$523 >> 2] = $60; //@line 25369
   $524 = $ReallocAsyncCtx4 + 128 | 0; //@line 25370
   HEAP32[$524 >> 2] = $62; //@line 25371
   $525 = $ReallocAsyncCtx4 + 132 | 0; //@line 25372
   HEAP32[$525 >> 2] = $66; //@line 25373
   $526 = $ReallocAsyncCtx4 + 136 | 0; //@line 25374
   HEAP32[$526 >> 2] = $68; //@line 25375
   $527 = $ReallocAsyncCtx4 + 140 | 0; //@line 25376
   HEAP32[$527 >> 2] = $70; //@line 25377
   $528 = $ReallocAsyncCtx4 + 144 | 0; //@line 25378
   HEAP32[$528 >> 2] = $72; //@line 25379
   $529 = $ReallocAsyncCtx4 + 148 | 0; //@line 25380
   HEAP32[$529 >> 2] = $74; //@line 25381
   $530 = $ReallocAsyncCtx4 + 152 | 0; //@line 25382
   HEAP32[$530 >> 2] = $76; //@line 25383
   $531 = $ReallocAsyncCtx4 + 156 | 0; //@line 25384
   HEAP32[$531 >> 2] = $$096$be; //@line 25385
   $532 = $ReallocAsyncCtx4 + 160 | 0; //@line 25386
   HEAP32[$532 >> 2] = $78; //@line 25387
   $533 = $ReallocAsyncCtx4 + 164 | 0; //@line 25388
   HEAP32[$533 >> 2] = $80; //@line 25389
   $534 = $ReallocAsyncCtx4 + 168 | 0; //@line 25390
   HEAP32[$534 >> 2] = $82; //@line 25391
   $535 = $ReallocAsyncCtx4 + 172 | 0; //@line 25392
   HEAP32[$535 >> 2] = $84; //@line 25393
   $536 = $ReallocAsyncCtx4 + 176 | 0; //@line 25394
   HEAP32[$536 >> 2] = $86; //@line 25395
   $537 = $ReallocAsyncCtx4 + 180 | 0; //@line 25396
   HEAP32[$537 >> 2] = $88; //@line 25397
   $538 = $ReallocAsyncCtx4 + 184 | 0; //@line 25398
   HEAP32[$538 >> 2] = $90; //@line 25399
   $539 = $ReallocAsyncCtx4 + 188 | 0; //@line 25400
   HEAP32[$539 >> 2] = $92; //@line 25401
   $540 = $ReallocAsyncCtx4 + 192 | 0; //@line 25402
   HEAP32[$540 >> 2] = $94; //@line 25403
   $541 = $ReallocAsyncCtx4 + 196 | 0; //@line 25404
   HEAP32[$541 >> 2] = $96; //@line 25405
   $542 = $ReallocAsyncCtx4 + 200 | 0; //@line 25406
   HEAP32[$542 >> 2] = $98; //@line 25407
   $543 = $ReallocAsyncCtx4 + 204 | 0; //@line 25408
   HEAP32[$543 >> 2] = $100; //@line 25409
   $544 = $ReallocAsyncCtx4 + 208 | 0; //@line 25410
   HEAP32[$544 >> 2] = $102; //@line 25411
   $545 = $ReallocAsyncCtx4 + 212 | 0; //@line 25412
   HEAP32[$545 >> 2] = $104; //@line 25413
   $546 = $ReallocAsyncCtx4 + 216 | 0; //@line 25414
   HEAP8[$546 >> 0] = $106; //@line 25415
   $547 = $ReallocAsyncCtx4 + 217 | 0; //@line 25416
   HEAP8[$547 >> 0] = $108; //@line 25417
   $548 = $ReallocAsyncCtx4 + 220 | 0; //@line 25418
   HEAP32[$548 >> 2] = $110; //@line 25419
   $549 = $ReallocAsyncCtx4 + 224 | 0; //@line 25420
   HEAP32[$549 >> 2] = $112; //@line 25421
   $550 = $ReallocAsyncCtx4 + 228 | 0; //@line 25422
   HEAP8[$550 >> 0] = $114; //@line 25423
   $551 = $ReallocAsyncCtx4 + 232 | 0; //@line 25424
   HEAP32[$551 >> 2] = $116; //@line 25425
   $552 = $ReallocAsyncCtx4 + 236 | 0; //@line 25426
   HEAP32[$552 >> 2] = $118; //@line 25427
   $553 = $ReallocAsyncCtx4 + 240 | 0; //@line 25428
   HEAP32[$553 >> 2] = $120; //@line 25429
   $554 = $ReallocAsyncCtx4 + 244 | 0; //@line 25430
   HEAP32[$554 >> 2] = $122; //@line 25431
   $555 = $ReallocAsyncCtx4 + 248 | 0; //@line 25432
   HEAP32[$555 >> 2] = $124; //@line 25433
   $556 = $ReallocAsyncCtx4 + 252 | 0; //@line 25434
   HEAP32[$556 >> 2] = $126; //@line 25435
   $557 = $ReallocAsyncCtx4 + 256 | 0; //@line 25436
   HEAP32[$557 >> 2] = $128; //@line 25437
   $558 = $ReallocAsyncCtx4 + 260 | 0; //@line 25438
   HEAP32[$558 >> 2] = $130; //@line 25439
   $559 = $ReallocAsyncCtx4 + 264 | 0; //@line 25440
   HEAP32[$559 >> 2] = $132; //@line 25441
   $560 = $ReallocAsyncCtx4 + 268 | 0; //@line 25442
   HEAP32[$560 >> 2] = $134; //@line 25443
   sp = STACKTOP; //@line 25444
   return;
  }
  HEAP8[___async_retval >> 0] = $492 & 1; //@line 25449
  ___async_unwind = 0; //@line 25450
  HEAP32[$ReallocAsyncCtx4 >> 2] = 507; //@line 25451
  $493 = $ReallocAsyncCtx4 + 4 | 0; //@line 25452
  HEAP32[$493 >> 2] = $2; //@line 25453
  $494 = $ReallocAsyncCtx4 + 8 | 0; //@line 25454
  HEAP32[$494 >> 2] = $4; //@line 25455
  $495 = $ReallocAsyncCtx4 + 12 | 0; //@line 25456
  HEAP32[$495 >> 2] = $6; //@line 25457
  $496 = $ReallocAsyncCtx4 + 16 | 0; //@line 25458
  HEAP32[$496 >> 2] = $8; //@line 25459
  $497 = $ReallocAsyncCtx4 + 20 | 0; //@line 25460
  HEAP32[$497 >> 2] = $10; //@line 25461
  $498 = $ReallocAsyncCtx4 + 24 | 0; //@line 25462
  HEAP32[$498 >> 2] = $12; //@line 25463
  $499 = $ReallocAsyncCtx4 + 28 | 0; //@line 25464
  HEAP32[$499 >> 2] = $14; //@line 25465
  $500 = $ReallocAsyncCtx4 + 32 | 0; //@line 25466
  HEAP32[$500 >> 2] = $16; //@line 25467
  $501 = $ReallocAsyncCtx4 + 36 | 0; //@line 25468
  HEAP32[$501 >> 2] = $18; //@line 25469
  $502 = $ReallocAsyncCtx4 + 40 | 0; //@line 25470
  HEAP32[$502 >> 2] = $20; //@line 25471
  $503 = $ReallocAsyncCtx4 + 44 | 0; //@line 25472
  HEAP32[$503 >> 2] = $22; //@line 25473
  $504 = $ReallocAsyncCtx4 + 48 | 0; //@line 25474
  HEAP32[$504 >> 2] = $24; //@line 25475
  $505 = $ReallocAsyncCtx4 + 52 | 0; //@line 25476
  HEAP8[$505 >> 0] = $478; //@line 25477
  $506 = $ReallocAsyncCtx4 + 56 | 0; //@line 25478
  HEAP32[$506 >> 2] = $26; //@line 25479
  $507 = $ReallocAsyncCtx4 + 60 | 0; //@line 25480
  HEAP32[$507 >> 2] = $28; //@line 25481
  $508 = $ReallocAsyncCtx4 + 64 | 0; //@line 25482
  HEAP32[$508 >> 2] = $30; //@line 25483
  $509 = $ReallocAsyncCtx4 + 68 | 0; //@line 25484
  HEAP32[$509 >> 2] = $32; //@line 25485
  $510 = $ReallocAsyncCtx4 + 72 | 0; //@line 25486
  HEAP32[$510 >> 2] = $34; //@line 25487
  $511 = $ReallocAsyncCtx4 + 76 | 0; //@line 25488
  HEAP32[$511 >> 2] = $36; //@line 25489
  $512 = $ReallocAsyncCtx4 + 80 | 0; //@line 25490
  HEAP32[$512 >> 2] = $38; //@line 25491
  $513 = $ReallocAsyncCtx4 + 84 | 0; //@line 25492
  HEAP32[$513 >> 2] = $40; //@line 25493
  $514 = $ReallocAsyncCtx4 + 88 | 0; //@line 25494
  HEAP32[$514 >> 2] = $42; //@line 25495
  $515 = $ReallocAsyncCtx4 + 92 | 0; //@line 25496
  HEAP32[$515 >> 2] = $44; //@line 25497
  $516 = $ReallocAsyncCtx4 + 96 | 0; //@line 25498
  HEAP32[$516 >> 2] = $46; //@line 25499
  $517 = $ReallocAsyncCtx4 + 100 | 0; //@line 25500
  HEAP32[$517 >> 2] = $48; //@line 25501
  $518 = $ReallocAsyncCtx4 + 104 | 0; //@line 25502
  HEAP32[$518 >> 2] = $50; //@line 25503
  $519 = $ReallocAsyncCtx4 + 108 | 0; //@line 25504
  HEAP32[$519 >> 2] = $52; //@line 25505
  $520 = $ReallocAsyncCtx4 + 112 | 0; //@line 25506
  HEAP32[$520 >> 2] = $54; //@line 25507
  $521 = $ReallocAsyncCtx4 + 116 | 0; //@line 25508
  HEAP32[$521 >> 2] = $56; //@line 25509
  $522 = $ReallocAsyncCtx4 + 120 | 0; //@line 25510
  HEAP32[$522 >> 2] = $58; //@line 25511
  $523 = $ReallocAsyncCtx4 + 124 | 0; //@line 25512
  HEAP32[$523 >> 2] = $60; //@line 25513
  $524 = $ReallocAsyncCtx4 + 128 | 0; //@line 25514
  HEAP32[$524 >> 2] = $62; //@line 25515
  $525 = $ReallocAsyncCtx4 + 132 | 0; //@line 25516
  HEAP32[$525 >> 2] = $66; //@line 25517
  $526 = $ReallocAsyncCtx4 + 136 | 0; //@line 25518
  HEAP32[$526 >> 2] = $68; //@line 25519
  $527 = $ReallocAsyncCtx4 + 140 | 0; //@line 25520
  HEAP32[$527 >> 2] = $70; //@line 25521
  $528 = $ReallocAsyncCtx4 + 144 | 0; //@line 25522
  HEAP32[$528 >> 2] = $72; //@line 25523
  $529 = $ReallocAsyncCtx4 + 148 | 0; //@line 25524
  HEAP32[$529 >> 2] = $74; //@line 25525
  $530 = $ReallocAsyncCtx4 + 152 | 0; //@line 25526
  HEAP32[$530 >> 2] = $76; //@line 25527
  $531 = $ReallocAsyncCtx4 + 156 | 0; //@line 25528
  HEAP32[$531 >> 2] = $$096$be; //@line 25529
  $532 = $ReallocAsyncCtx4 + 160 | 0; //@line 25530
  HEAP32[$532 >> 2] = $78; //@line 25531
  $533 = $ReallocAsyncCtx4 + 164 | 0; //@line 25532
  HEAP32[$533 >> 2] = $80; //@line 25533
  $534 = $ReallocAsyncCtx4 + 168 | 0; //@line 25534
  HEAP32[$534 >> 2] = $82; //@line 25535
  $535 = $ReallocAsyncCtx4 + 172 | 0; //@line 25536
  HEAP32[$535 >> 2] = $84; //@line 25537
  $536 = $ReallocAsyncCtx4 + 176 | 0; //@line 25538
  HEAP32[$536 >> 2] = $86; //@line 25539
  $537 = $ReallocAsyncCtx4 + 180 | 0; //@line 25540
  HEAP32[$537 >> 2] = $88; //@line 25541
  $538 = $ReallocAsyncCtx4 + 184 | 0; //@line 25542
  HEAP32[$538 >> 2] = $90; //@line 25543
  $539 = $ReallocAsyncCtx4 + 188 | 0; //@line 25544
  HEAP32[$539 >> 2] = $92; //@line 25545
  $540 = $ReallocAsyncCtx4 + 192 | 0; //@line 25546
  HEAP32[$540 >> 2] = $94; //@line 25547
  $541 = $ReallocAsyncCtx4 + 196 | 0; //@line 25548
  HEAP32[$541 >> 2] = $96; //@line 25549
  $542 = $ReallocAsyncCtx4 + 200 | 0; //@line 25550
  HEAP32[$542 >> 2] = $98; //@line 25551
  $543 = $ReallocAsyncCtx4 + 204 | 0; //@line 25552
  HEAP32[$543 >> 2] = $100; //@line 25553
  $544 = $ReallocAsyncCtx4 + 208 | 0; //@line 25554
  HEAP32[$544 >> 2] = $102; //@line 25555
  $545 = $ReallocAsyncCtx4 + 212 | 0; //@line 25556
  HEAP32[$545 >> 2] = $104; //@line 25557
  $546 = $ReallocAsyncCtx4 + 216 | 0; //@line 25558
  HEAP8[$546 >> 0] = $106; //@line 25559
  $547 = $ReallocAsyncCtx4 + 217 | 0; //@line 25560
  HEAP8[$547 >> 0] = $108; //@line 25561
  $548 = $ReallocAsyncCtx4 + 220 | 0; //@line 25562
  HEAP32[$548 >> 2] = $110; //@line 25563
  $549 = $ReallocAsyncCtx4 + 224 | 0; //@line 25564
  HEAP32[$549 >> 2] = $112; //@line 25565
  $550 = $ReallocAsyncCtx4 + 228 | 0; //@line 25566
  HEAP8[$550 >> 0] = $114; //@line 25567
  $551 = $ReallocAsyncCtx4 + 232 | 0; //@line 25568
  HEAP32[$551 >> 2] = $116; //@line 25569
  $552 = $ReallocAsyncCtx4 + 236 | 0; //@line 25570
  HEAP32[$552 >> 2] = $118; //@line 25571
  $553 = $ReallocAsyncCtx4 + 240 | 0; //@line 25572
  HEAP32[$553 >> 2] = $120; //@line 25573
  $554 = $ReallocAsyncCtx4 + 244 | 0; //@line 25574
  HEAP32[$554 >> 2] = $122; //@line 25575
  $555 = $ReallocAsyncCtx4 + 248 | 0; //@line 25576
  HEAP32[$555 >> 2] = $124; //@line 25577
  $556 = $ReallocAsyncCtx4 + 252 | 0; //@line 25578
  HEAP32[$556 >> 2] = $126; //@line 25579
  $557 = $ReallocAsyncCtx4 + 256 | 0; //@line 25580
  HEAP32[$557 >> 2] = $128; //@line 25581
  $558 = $ReallocAsyncCtx4 + 260 | 0; //@line 25582
  HEAP32[$558 >> 2] = $130; //@line 25583
  $559 = $ReallocAsyncCtx4 + 264 | 0; //@line 25584
  HEAP32[$559 >> 2] = $132; //@line 25585
  $560 = $ReallocAsyncCtx4 + 268 | 0; //@line 25586
  HEAP32[$560 >> 2] = $134; //@line 25587
  sp = STACKTOP; //@line 25588
  return;
 } else if ((label | 0) == 24) {
  HEAP8[$132 >> 0] = HEAP8[$118 + ($137 & 255) >> 0] | 0; //@line 25596
  $578 = $$0$be + 5 << 24 >> 24; //@line 25609
  HEAP32[$130 >> 2] = (HEAPU8[$118 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$118 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$118 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 25617
  $588 = HEAP32[(HEAP32[$104 >> 2] | 0) + 48 >> 2] | 0; //@line 25620
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(268) | 0; //@line 25621
  $589 = FUNCTION_TABLE_iii[$588 & 31]($98, $58) | 0; //@line 25622
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 508; //@line 25625
   $590 = $ReallocAsyncCtx5 + 4 | 0; //@line 25626
   HEAP32[$590 >> 2] = $2; //@line 25627
   $591 = $ReallocAsyncCtx5 + 8 | 0; //@line 25628
   HEAP32[$591 >> 2] = $4; //@line 25629
   $592 = $ReallocAsyncCtx5 + 12 | 0; //@line 25630
   HEAP32[$592 >> 2] = $6; //@line 25631
   $593 = $ReallocAsyncCtx5 + 16 | 0; //@line 25632
   HEAP32[$593 >> 2] = $8; //@line 25633
   $594 = $ReallocAsyncCtx5 + 20 | 0; //@line 25634
   HEAP32[$594 >> 2] = $10; //@line 25635
   $595 = $ReallocAsyncCtx5 + 24 | 0; //@line 25636
   HEAP32[$595 >> 2] = $12; //@line 25637
   $596 = $ReallocAsyncCtx5 + 28 | 0; //@line 25638
   HEAP32[$596 >> 2] = $14; //@line 25639
   $597 = $ReallocAsyncCtx5 + 32 | 0; //@line 25640
   HEAP32[$597 >> 2] = $16; //@line 25641
   $598 = $ReallocAsyncCtx5 + 36 | 0; //@line 25642
   HEAP32[$598 >> 2] = $18; //@line 25643
   $599 = $ReallocAsyncCtx5 + 40 | 0; //@line 25644
   HEAP32[$599 >> 2] = $20; //@line 25645
   $600 = $ReallocAsyncCtx5 + 44 | 0; //@line 25646
   HEAP32[$600 >> 2] = $22; //@line 25647
   $601 = $ReallocAsyncCtx5 + 48 | 0; //@line 25648
   HEAP32[$601 >> 2] = $24; //@line 25649
   $602 = $ReallocAsyncCtx5 + 52 | 0; //@line 25650
   HEAP32[$602 >> 2] = $26; //@line 25651
   $603 = $ReallocAsyncCtx5 + 56 | 0; //@line 25652
   HEAP32[$603 >> 2] = $28; //@line 25653
   $604 = $ReallocAsyncCtx5 + 60 | 0; //@line 25654
   HEAP32[$604 >> 2] = $30; //@line 25655
   $605 = $ReallocAsyncCtx5 + 64 | 0; //@line 25656
   HEAP32[$605 >> 2] = $32; //@line 25657
   $606 = $ReallocAsyncCtx5 + 68 | 0; //@line 25658
   HEAP32[$606 >> 2] = $34; //@line 25659
   $607 = $ReallocAsyncCtx5 + 72 | 0; //@line 25660
   HEAP32[$607 >> 2] = $36; //@line 25661
   $608 = $ReallocAsyncCtx5 + 76 | 0; //@line 25662
   HEAP32[$608 >> 2] = $38; //@line 25663
   $609 = $ReallocAsyncCtx5 + 80 | 0; //@line 25664
   HEAP32[$609 >> 2] = $40; //@line 25665
   $610 = $ReallocAsyncCtx5 + 84 | 0; //@line 25666
   HEAP32[$610 >> 2] = $42; //@line 25667
   $611 = $ReallocAsyncCtx5 + 88 | 0; //@line 25668
   HEAP32[$611 >> 2] = $44; //@line 25669
   $612 = $ReallocAsyncCtx5 + 92 | 0; //@line 25670
   HEAP32[$612 >> 2] = $46; //@line 25671
   $613 = $ReallocAsyncCtx5 + 96 | 0; //@line 25672
   HEAP32[$613 >> 2] = $48; //@line 25673
   $614 = $ReallocAsyncCtx5 + 100 | 0; //@line 25674
   HEAP32[$614 >> 2] = $50; //@line 25675
   $615 = $ReallocAsyncCtx5 + 104 | 0; //@line 25676
   HEAP32[$615 >> 2] = $52; //@line 25677
   $616 = $ReallocAsyncCtx5 + 108 | 0; //@line 25678
   HEAP32[$616 >> 2] = $54; //@line 25679
   $617 = $ReallocAsyncCtx5 + 112 | 0; //@line 25680
   HEAP32[$617 >> 2] = $56; //@line 25681
   $618 = $ReallocAsyncCtx5 + 116 | 0; //@line 25682
   HEAP32[$618 >> 2] = $58; //@line 25683
   $619 = $ReallocAsyncCtx5 + 120 | 0; //@line 25684
   HEAP32[$619 >> 2] = $60; //@line 25685
   $620 = $ReallocAsyncCtx5 + 124 | 0; //@line 25686
   HEAP32[$620 >> 2] = $62; //@line 25687
   $621 = $ReallocAsyncCtx5 + 128 | 0; //@line 25688
   HEAP8[$621 >> 0] = $578; //@line 25689
   $622 = $ReallocAsyncCtx5 + 132 | 0; //@line 25690
   HEAP32[$622 >> 2] = $66; //@line 25691
   $623 = $ReallocAsyncCtx5 + 136 | 0; //@line 25692
   HEAP32[$623 >> 2] = $68; //@line 25693
   $624 = $ReallocAsyncCtx5 + 140 | 0; //@line 25694
   HEAP32[$624 >> 2] = $70; //@line 25695
   $625 = $ReallocAsyncCtx5 + 144 | 0; //@line 25696
   HEAP32[$625 >> 2] = $72; //@line 25697
   $626 = $ReallocAsyncCtx5 + 148 | 0; //@line 25698
   HEAP32[$626 >> 2] = $74; //@line 25699
   $627 = $ReallocAsyncCtx5 + 152 | 0; //@line 25700
   HEAP32[$627 >> 2] = $76; //@line 25701
   $628 = $ReallocAsyncCtx5 + 156 | 0; //@line 25702
   HEAP32[$628 >> 2] = $78; //@line 25703
   $629 = $ReallocAsyncCtx5 + 160 | 0; //@line 25704
   HEAP32[$629 >> 2] = $80; //@line 25705
   $630 = $ReallocAsyncCtx5 + 164 | 0; //@line 25706
   HEAP32[$630 >> 2] = $82; //@line 25707
   $631 = $ReallocAsyncCtx5 + 168 | 0; //@line 25708
   HEAP32[$631 >> 2] = $84; //@line 25709
   $632 = $ReallocAsyncCtx5 + 172 | 0; //@line 25710
   HEAP32[$632 >> 2] = $86; //@line 25711
   $633 = $ReallocAsyncCtx5 + 176 | 0; //@line 25712
   HEAP32[$633 >> 2] = $88; //@line 25713
   $634 = $ReallocAsyncCtx5 + 180 | 0; //@line 25714
   HEAP32[$634 >> 2] = $90; //@line 25715
   $635 = $ReallocAsyncCtx5 + 184 | 0; //@line 25716
   HEAP32[$635 >> 2] = $92; //@line 25717
   $636 = $ReallocAsyncCtx5 + 188 | 0; //@line 25718
   HEAP32[$636 >> 2] = $94; //@line 25719
   $637 = $ReallocAsyncCtx5 + 192 | 0; //@line 25720
   HEAP32[$637 >> 2] = $96; //@line 25721
   $638 = $ReallocAsyncCtx5 + 196 | 0; //@line 25722
   HEAP32[$638 >> 2] = $98; //@line 25723
   $639 = $ReallocAsyncCtx5 + 200 | 0; //@line 25724
   HEAP32[$639 >> 2] = $100; //@line 25725
   $640 = $ReallocAsyncCtx5 + 204 | 0; //@line 25726
   HEAP32[$640 >> 2] = $102; //@line 25727
   $641 = $ReallocAsyncCtx5 + 208 | 0; //@line 25728
   HEAP32[$641 >> 2] = $104; //@line 25729
   $642 = $ReallocAsyncCtx5 + 212 | 0; //@line 25730
   HEAP8[$642 >> 0] = $106; //@line 25731
   $643 = $ReallocAsyncCtx5 + 213 | 0; //@line 25732
   HEAP8[$643 >> 0] = $108; //@line 25733
   $644 = $ReallocAsyncCtx5 + 216 | 0; //@line 25734
   HEAP32[$644 >> 2] = $110; //@line 25735
   $645 = $ReallocAsyncCtx5 + 220 | 0; //@line 25736
   HEAP32[$645 >> 2] = $112; //@line 25737
   $646 = $ReallocAsyncCtx5 + 224 | 0; //@line 25738
   HEAP8[$646 >> 0] = $114; //@line 25739
   $647 = $ReallocAsyncCtx5 + 228 | 0; //@line 25740
   HEAP32[$647 >> 2] = $116; //@line 25741
   $648 = $ReallocAsyncCtx5 + 232 | 0; //@line 25742
   HEAP32[$648 >> 2] = $118; //@line 25743
   $649 = $ReallocAsyncCtx5 + 236 | 0; //@line 25744
   HEAP32[$649 >> 2] = $120; //@line 25745
   $650 = $ReallocAsyncCtx5 + 240 | 0; //@line 25746
   HEAP32[$650 >> 2] = $122; //@line 25747
   $651 = $ReallocAsyncCtx5 + 244 | 0; //@line 25748
   HEAP32[$651 >> 2] = $124; //@line 25749
   $652 = $ReallocAsyncCtx5 + 248 | 0; //@line 25750
   HEAP32[$652 >> 2] = $126; //@line 25751
   $653 = $ReallocAsyncCtx5 + 252 | 0; //@line 25752
   HEAP32[$653 >> 2] = $128; //@line 25753
   $654 = $ReallocAsyncCtx5 + 256 | 0; //@line 25754
   HEAP32[$654 >> 2] = $130; //@line 25755
   $655 = $ReallocAsyncCtx5 + 260 | 0; //@line 25756
   HEAP32[$655 >> 2] = $132; //@line 25757
   $656 = $ReallocAsyncCtx5 + 264 | 0; //@line 25758
   HEAP32[$656 >> 2] = $134; //@line 25759
   sp = STACKTOP; //@line 25760
   return;
  }
  HEAP8[___async_retval >> 0] = $589; //@line 25764
  ___async_unwind = 0; //@line 25765
  HEAP32[$ReallocAsyncCtx5 >> 2] = 508; //@line 25766
  $590 = $ReallocAsyncCtx5 + 4 | 0; //@line 25767
  HEAP32[$590 >> 2] = $2; //@line 25768
  $591 = $ReallocAsyncCtx5 + 8 | 0; //@line 25769
  HEAP32[$591 >> 2] = $4; //@line 25770
  $592 = $ReallocAsyncCtx5 + 12 | 0; //@line 25771
  HEAP32[$592 >> 2] = $6; //@line 25772
  $593 = $ReallocAsyncCtx5 + 16 | 0; //@line 25773
  HEAP32[$593 >> 2] = $8; //@line 25774
  $594 = $ReallocAsyncCtx5 + 20 | 0; //@line 25775
  HEAP32[$594 >> 2] = $10; //@line 25776
  $595 = $ReallocAsyncCtx5 + 24 | 0; //@line 25777
  HEAP32[$595 >> 2] = $12; //@line 25778
  $596 = $ReallocAsyncCtx5 + 28 | 0; //@line 25779
  HEAP32[$596 >> 2] = $14; //@line 25780
  $597 = $ReallocAsyncCtx5 + 32 | 0; //@line 25781
  HEAP32[$597 >> 2] = $16; //@line 25782
  $598 = $ReallocAsyncCtx5 + 36 | 0; //@line 25783
  HEAP32[$598 >> 2] = $18; //@line 25784
  $599 = $ReallocAsyncCtx5 + 40 | 0; //@line 25785
  HEAP32[$599 >> 2] = $20; //@line 25786
  $600 = $ReallocAsyncCtx5 + 44 | 0; //@line 25787
  HEAP32[$600 >> 2] = $22; //@line 25788
  $601 = $ReallocAsyncCtx5 + 48 | 0; //@line 25789
  HEAP32[$601 >> 2] = $24; //@line 25790
  $602 = $ReallocAsyncCtx5 + 52 | 0; //@line 25791
  HEAP32[$602 >> 2] = $26; //@line 25792
  $603 = $ReallocAsyncCtx5 + 56 | 0; //@line 25793
  HEAP32[$603 >> 2] = $28; //@line 25794
  $604 = $ReallocAsyncCtx5 + 60 | 0; //@line 25795
  HEAP32[$604 >> 2] = $30; //@line 25796
  $605 = $ReallocAsyncCtx5 + 64 | 0; //@line 25797
  HEAP32[$605 >> 2] = $32; //@line 25798
  $606 = $ReallocAsyncCtx5 + 68 | 0; //@line 25799
  HEAP32[$606 >> 2] = $34; //@line 25800
  $607 = $ReallocAsyncCtx5 + 72 | 0; //@line 25801
  HEAP32[$607 >> 2] = $36; //@line 25802
  $608 = $ReallocAsyncCtx5 + 76 | 0; //@line 25803
  HEAP32[$608 >> 2] = $38; //@line 25804
  $609 = $ReallocAsyncCtx5 + 80 | 0; //@line 25805
  HEAP32[$609 >> 2] = $40; //@line 25806
  $610 = $ReallocAsyncCtx5 + 84 | 0; //@line 25807
  HEAP32[$610 >> 2] = $42; //@line 25808
  $611 = $ReallocAsyncCtx5 + 88 | 0; //@line 25809
  HEAP32[$611 >> 2] = $44; //@line 25810
  $612 = $ReallocAsyncCtx5 + 92 | 0; //@line 25811
  HEAP32[$612 >> 2] = $46; //@line 25812
  $613 = $ReallocAsyncCtx5 + 96 | 0; //@line 25813
  HEAP32[$613 >> 2] = $48; //@line 25814
  $614 = $ReallocAsyncCtx5 + 100 | 0; //@line 25815
  HEAP32[$614 >> 2] = $50; //@line 25816
  $615 = $ReallocAsyncCtx5 + 104 | 0; //@line 25817
  HEAP32[$615 >> 2] = $52; //@line 25818
  $616 = $ReallocAsyncCtx5 + 108 | 0; //@line 25819
  HEAP32[$616 >> 2] = $54; //@line 25820
  $617 = $ReallocAsyncCtx5 + 112 | 0; //@line 25821
  HEAP32[$617 >> 2] = $56; //@line 25822
  $618 = $ReallocAsyncCtx5 + 116 | 0; //@line 25823
  HEAP32[$618 >> 2] = $58; //@line 25824
  $619 = $ReallocAsyncCtx5 + 120 | 0; //@line 25825
  HEAP32[$619 >> 2] = $60; //@line 25826
  $620 = $ReallocAsyncCtx5 + 124 | 0; //@line 25827
  HEAP32[$620 >> 2] = $62; //@line 25828
  $621 = $ReallocAsyncCtx5 + 128 | 0; //@line 25829
  HEAP8[$621 >> 0] = $578; //@line 25830
  $622 = $ReallocAsyncCtx5 + 132 | 0; //@line 25831
  HEAP32[$622 >> 2] = $66; //@line 25832
  $623 = $ReallocAsyncCtx5 + 136 | 0; //@line 25833
  HEAP32[$623 >> 2] = $68; //@line 25834
  $624 = $ReallocAsyncCtx5 + 140 | 0; //@line 25835
  HEAP32[$624 >> 2] = $70; //@line 25836
  $625 = $ReallocAsyncCtx5 + 144 | 0; //@line 25837
  HEAP32[$625 >> 2] = $72; //@line 25838
  $626 = $ReallocAsyncCtx5 + 148 | 0; //@line 25839
  HEAP32[$626 >> 2] = $74; //@line 25840
  $627 = $ReallocAsyncCtx5 + 152 | 0; //@line 25841
  HEAP32[$627 >> 2] = $76; //@line 25842
  $628 = $ReallocAsyncCtx5 + 156 | 0; //@line 25843
  HEAP32[$628 >> 2] = $78; //@line 25844
  $629 = $ReallocAsyncCtx5 + 160 | 0; //@line 25845
  HEAP32[$629 >> 2] = $80; //@line 25846
  $630 = $ReallocAsyncCtx5 + 164 | 0; //@line 25847
  HEAP32[$630 >> 2] = $82; //@line 25848
  $631 = $ReallocAsyncCtx5 + 168 | 0; //@line 25849
  HEAP32[$631 >> 2] = $84; //@line 25850
  $632 = $ReallocAsyncCtx5 + 172 | 0; //@line 25851
  HEAP32[$632 >> 2] = $86; //@line 25852
  $633 = $ReallocAsyncCtx5 + 176 | 0; //@line 25853
  HEAP32[$633 >> 2] = $88; //@line 25854
  $634 = $ReallocAsyncCtx5 + 180 | 0; //@line 25855
  HEAP32[$634 >> 2] = $90; //@line 25856
  $635 = $ReallocAsyncCtx5 + 184 | 0; //@line 25857
  HEAP32[$635 >> 2] = $92; //@line 25858
  $636 = $ReallocAsyncCtx5 + 188 | 0; //@line 25859
  HEAP32[$636 >> 2] = $94; //@line 25860
  $637 = $ReallocAsyncCtx5 + 192 | 0; //@line 25861
  HEAP32[$637 >> 2] = $96; //@line 25862
  $638 = $ReallocAsyncCtx5 + 196 | 0; //@line 25863
  HEAP32[$638 >> 2] = $98; //@line 25864
  $639 = $ReallocAsyncCtx5 + 200 | 0; //@line 25865
  HEAP32[$639 >> 2] = $100; //@line 25866
  $640 = $ReallocAsyncCtx5 + 204 | 0; //@line 25867
  HEAP32[$640 >> 2] = $102; //@line 25868
  $641 = $ReallocAsyncCtx5 + 208 | 0; //@line 25869
  HEAP32[$641 >> 2] = $104; //@line 25870
  $642 = $ReallocAsyncCtx5 + 212 | 0; //@line 25871
  HEAP8[$642 >> 0] = $106; //@line 25872
  $643 = $ReallocAsyncCtx5 + 213 | 0; //@line 25873
  HEAP8[$643 >> 0] = $108; //@line 25874
  $644 = $ReallocAsyncCtx5 + 216 | 0; //@line 25875
  HEAP32[$644 >> 2] = $110; //@line 25876
  $645 = $ReallocAsyncCtx5 + 220 | 0; //@line 25877
  HEAP32[$645 >> 2] = $112; //@line 25878
  $646 = $ReallocAsyncCtx5 + 224 | 0; //@line 25879
  HEAP8[$646 >> 0] = $114; //@line 25880
  $647 = $ReallocAsyncCtx5 + 228 | 0; //@line 25881
  HEAP32[$647 >> 2] = $116; //@line 25882
  $648 = $ReallocAsyncCtx5 + 232 | 0; //@line 25883
  HEAP32[$648 >> 2] = $118; //@line 25884
  $649 = $ReallocAsyncCtx5 + 236 | 0; //@line 25885
  HEAP32[$649 >> 2] = $120; //@line 25886
  $650 = $ReallocAsyncCtx5 + 240 | 0; //@line 25887
  HEAP32[$650 >> 2] = $122; //@line 25888
  $651 = $ReallocAsyncCtx5 + 244 | 0; //@line 25889
  HEAP32[$651 >> 2] = $124; //@line 25890
  $652 = $ReallocAsyncCtx5 + 248 | 0; //@line 25891
  HEAP32[$652 >> 2] = $126; //@line 25892
  $653 = $ReallocAsyncCtx5 + 252 | 0; //@line 25893
  HEAP32[$653 >> 2] = $128; //@line 25894
  $654 = $ReallocAsyncCtx5 + 256 | 0; //@line 25895
  HEAP32[$654 >> 2] = $130; //@line 25896
  $655 = $ReallocAsyncCtx5 + 260 | 0; //@line 25897
  HEAP32[$655 >> 2] = $132; //@line 25898
  $656 = $ReallocAsyncCtx5 + 264 | 0; //@line 25899
  HEAP32[$656 >> 2] = $134; //@line 25900
  sp = STACKTOP; //@line 25901
  return;
 } else if ((label | 0) == 31) {
  HEAP32[___async_retval >> 2] = $$096$be; //@line 25906
  return;
 }
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0174 = 0, $$0174235 = 0, $$0174236 = 0, $$1$off0 = 0, $$1169 = 0, $$1171 = 0, $$1173 = 0, $$1175 = 0, $$3$off0230 = 0, $$3179 = 0, $$byval_copy198 = 0, $$sink = 0, $$sink200 = 0, $$sink233 = 0, $10 = 0, $11 = 0, $12 = 0, $129 = 0, $130 = 0, $135 = 0, $142 = 0, $143 = 0, $155 = 0, $158 = 0, $165 = 0, $167 = 0, $168 = 0, $173 = 0, $175 = 0, $176 = 0, $20 = 0, $259 = 0, $269 = 0, $273 = 0, $280 = 0, $283 = 0, $302 = 0, $310 = 0, $317 = 0, $318 = 0, $330 = 0, $333 = 0, $354 = 0, $369 = 0, $376 = 0, $377 = 0, $389 = 0, $392 = 0, $397 = 0, $399 = 0, $40 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $433 = 0, $434 = 0, $435 = 0, $437 = 0, $485 = 0, $5 = 0, $531 = 0, $535 = 0, $537 = 0, $540 = 0, $547 = 0, $548 = 0, $560 = 0, $563 = 0, $582 = 0, $585 = 0, $586 = 0, $593 = 0, $6 = 0, $600 = 0, $601 = 0, $613 = 0, $616 = 0, $621 = 0, $623 = 0, $624 = 0, $628 = 0, $629 = 0, $636 = 0, $643 = 0, $644 = 0, $656 = 0, $659 = 0, $669 = 0, $671 = 0, $672 = 0, $673 = 0, $677 = 0, $681 = 0, $686 = 0, $687 = 0, $689 = 0, $690 = 0, $7 = 0, $707 = 0, $710 = 0, $711 = 0, $713 = 0, $714 = 0, $737 = 0, $742 = 0, $743 = 0, $755 = 0, $756 = 0, $758 = 0, $759 = 0, $776 = 0, $782 = 0, $785 = 0, $796 = 0, $802 = 0, $806 = 0, $813 = 0, $814 = 0, $826 = 0, $829 = 0, $83 = 0, $833 = 0, $84 = 0, $844 = 0, $849 = 0, $856 = 0, $857 = 0, $869 = 0, $872 = 0, $878 = 0, $881 = 0, $AsyncCtx = 0, $AsyncCtx100 = 0, $AsyncCtx104 = 0, $AsyncCtx108 = 0, $AsyncCtx112 = 0, $AsyncCtx116 = 0, $AsyncCtx120 = 0, $AsyncCtx123 = 0, $AsyncCtx127 = 0, $AsyncCtx131 = 0, $AsyncCtx135 = 0, $AsyncCtx139 = 0, $AsyncCtx143 = 0, $AsyncCtx147 = 0, $AsyncCtx151 = 0, $AsyncCtx155 = 0, $AsyncCtx28 = 0, $AsyncCtx32 = 0, $AsyncCtx36 = 0, $AsyncCtx40 = 0, $AsyncCtx43 = 0, $AsyncCtx46 = 0, $AsyncCtx49 = 0, $AsyncCtx52 = 0, $AsyncCtx55 = 0, $AsyncCtx58 = 0, $AsyncCtx61 = 0, $AsyncCtx64 = 0, $AsyncCtx68 = 0, $AsyncCtx72 = 0, $AsyncCtx76 = 0, $AsyncCtx80 = 0, $AsyncCtx84 = 0, $AsyncCtx88 = 0, $AsyncCtx92 = 0, $AsyncCtx96 = 0, $sext = 0, $trunc = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer22 = 0, $vararg_buffer24 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10828
 STACKTOP = STACKTOP + 128 | 0; //@line 10829
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 10829
 $$byval_copy198 = sp + 88 | 0; //@line 10830
 $vararg_buffer24 = sp + 80 | 0; //@line 10831
 $vararg_buffer22 = sp + 72 | 0; //@line 10832
 $vararg_buffer20 = sp + 64 | 0; //@line 10833
 $vararg_buffer18 = sp + 56 | 0; //@line 10834
 $vararg_buffer16 = sp + 48 | 0; //@line 10835
 $vararg_buffer14 = sp + 40 | 0; //@line 10836
 $vararg_buffer12 = sp + 32 | 0; //@line 10837
 $vararg_buffer10 = sp + 24 | 0; //@line 10838
 $vararg_buffer8 = sp + 16 | 0; //@line 10839
 $vararg_buffer6 = sp + 8 | 0; //@line 10840
 $vararg_buffer4 = sp; //@line 10841
 $5 = sp + 112 | 0; //@line 10842
 $6 = sp + 104 | 0; //@line 10843
 $7 = $2 & 65535; //@line 10844
 HEAP32[$$byval_copy198 >> 2] = $1; //@line 10847
 HEAP32[$$byval_copy198 + 4 >> 2] = $7; //@line 10849
 HEAP32[$$byval_copy198 + 8 >> 2] = $3 << 16 >> 16; //@line 10851
 HEAP32[$$byval_copy198 + 12 >> 2] = $4 << 24 >> 24; //@line 10853
 _mbed_tracef(16, 13728, 13812, $$byval_copy198); //@line 10854
 HEAP32[$6 >> 2] = 0; //@line 10855
 $10 = $0 + 912 | 0; //@line 10856
 $11 = $0 + 928 | 0; //@line 10857
 $12 = $0 + 288 | 0; //@line 10858
 HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($12) | 0) + 10 >> 0] = 0; //@line 10861
 HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 20 >> 1] = $3; //@line 10864
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 22 >> 0] = $4; //@line 10867
 $20 = HEAP32[$0 + 364 >> 2] | 0; //@line 10869
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 24 >> 2] = $20; //@line 10872
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 9 >> 0] = 0; //@line 10875
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 8 >> 0] = 0; //@line 10878
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 11 >> 0] = 0; //@line 10881
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 12 >> 2] = 0; //@line 10884
 HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 16 >> 1] = 0; //@line 10887
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 18 >> 0] = 0; //@line 10890
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 28 >> 0] = 0; //@line 10893
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 32 >> 2] = 0; //@line 10896
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) >> 2] = 0; //@line 10898
 $40 = HEAP32[$0 >> 2] | 0; //@line 10899
 $AsyncCtx68 = _emscripten_alloc_async_context(172, sp) | 0; //@line 10900
 __ZN7LoRaPHY18put_radio_to_sleepEv($40); //@line 10901
 if (___async) {
  HEAP32[$AsyncCtx68 >> 2] = 316; //@line 10904
  HEAP32[$AsyncCtx68 + 4 >> 2] = $vararg_buffer24; //@line 10906
  HEAP32[$AsyncCtx68 + 8 >> 2] = $vararg_buffer22; //@line 10908
  HEAP32[$AsyncCtx68 + 12 >> 2] = $vararg_buffer12; //@line 10910
  HEAP32[$AsyncCtx68 + 16 >> 2] = $vararg_buffer24; //@line 10912
  HEAP32[$AsyncCtx68 + 20 >> 2] = $vararg_buffer12; //@line 10914
  HEAP32[$AsyncCtx68 + 24 >> 2] = $vararg_buffer6; //@line 10916
  HEAP32[$AsyncCtx68 + 28 >> 2] = $11; //@line 10918
  HEAP32[$AsyncCtx68 + 32 >> 2] = $vararg_buffer6; //@line 10920
  HEAP32[$AsyncCtx68 + 36 >> 2] = $vararg_buffer24; //@line 10922
  HEAP32[$AsyncCtx68 + 40 >> 2] = $vararg_buffer20; //@line 10924
  HEAP32[$AsyncCtx68 + 44 >> 2] = $vararg_buffer20; //@line 10926
  HEAP32[$AsyncCtx68 + 48 >> 2] = $7; //@line 10928
  HEAP32[$AsyncCtx68 + 52 >> 2] = $vararg_buffer10; //@line 10930
  HEAP32[$AsyncCtx68 + 56 >> 2] = $1; //@line 10932
  HEAP32[$AsyncCtx68 + 60 >> 2] = $5; //@line 10934
  HEAP32[$AsyncCtx68 + 64 >> 2] = $0; //@line 10936
  HEAP32[$AsyncCtx68 + 68 >> 2] = $vararg_buffer10; //@line 10938
  HEAP32[$AsyncCtx68 + 72 >> 2] = $vararg_buffer4; //@line 10940
  HEAP32[$AsyncCtx68 + 76 >> 2] = $vararg_buffer16; //@line 10942
  HEAP8[$AsyncCtx68 + 80 >> 0] = $4; //@line 10944
  HEAP32[$AsyncCtx68 + 84 >> 2] = $6; //@line 10946
  HEAP32[$AsyncCtx68 + 88 >> 2] = $vararg_buffer4; //@line 10948
  HEAP32[$AsyncCtx68 + 92 >> 2] = $0; //@line 10950
  HEAP32[$AsyncCtx68 + 96 >> 2] = $vararg_buffer4; //@line 10952
  HEAP32[$AsyncCtx68 + 100 >> 2] = $vararg_buffer16; //@line 10954
  HEAP32[$AsyncCtx68 + 104 >> 2] = $vararg_buffer12; //@line 10956
  HEAP32[$AsyncCtx68 + 108 >> 2] = $vararg_buffer14; //@line 10958
  HEAP32[$AsyncCtx68 + 112 >> 2] = $vararg_buffer22; //@line 10960
  HEAP32[$AsyncCtx68 + 116 >> 2] = $6; //@line 10962
  HEAP32[$AsyncCtx68 + 120 >> 2] = $vararg_buffer10; //@line 10964
  HEAP32[$AsyncCtx68 + 124 >> 2] = $12; //@line 10966
  HEAP32[$AsyncCtx68 + 128 >> 2] = $vararg_buffer14; //@line 10968
  HEAP32[$AsyncCtx68 + 132 >> 2] = $vararg_buffer22; //@line 10970
  HEAP32[$AsyncCtx68 + 136 >> 2] = $vararg_buffer8; //@line 10972
  HEAP32[$AsyncCtx68 + 140 >> 2] = $vararg_buffer14; //@line 10974
  HEAP32[$AsyncCtx68 + 144 >> 2] = $vararg_buffer8; //@line 10976
  HEAP32[$AsyncCtx68 + 148 >> 2] = $vararg_buffer8; //@line 10978
  HEAP32[$AsyncCtx68 + 152 >> 2] = $vararg_buffer6; //@line 10980
  HEAP32[$AsyncCtx68 + 156 >> 2] = $5; //@line 10982
  HEAP32[$AsyncCtx68 + 160 >> 2] = $vararg_buffer18; //@line 10984
  HEAP32[$AsyncCtx68 + 164 >> 2] = $10; //@line 10986
  HEAP32[$AsyncCtx68 + 168 >> 2] = $vararg_buffer18; //@line 10988
  sp = STACKTOP; //@line 10989
  STACKTOP = sp; //@line 10990
  return;
 }
 _emscripten_free_async_context($AsyncCtx68 | 0); //@line 10992
 $83 = $0 + 356 | 0; //@line 10993
 $84 = HEAP32[$83 >> 2] | 0; //@line 10994
 $AsyncCtx123 = _emscripten_alloc_async_context(176, sp) | 0; //@line 10996
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($84, $0 + 1056 | 0); //@line 10997
 if (___async) {
  HEAP32[$AsyncCtx123 >> 2] = 317; //@line 11000
  HEAP32[$AsyncCtx123 + 4 >> 2] = $vararg_buffer24; //@line 11002
  HEAP32[$AsyncCtx123 + 8 >> 2] = $vararg_buffer22; //@line 11004
  HEAP32[$AsyncCtx123 + 12 >> 2] = $vararg_buffer12; //@line 11006
  HEAP32[$AsyncCtx123 + 16 >> 2] = $vararg_buffer24; //@line 11008
  HEAP32[$AsyncCtx123 + 20 >> 2] = $vararg_buffer12; //@line 11010
  HEAP32[$AsyncCtx123 + 24 >> 2] = $vararg_buffer6; //@line 11012
  HEAP32[$AsyncCtx123 + 28 >> 2] = $11; //@line 11014
  HEAP32[$AsyncCtx123 + 32 >> 2] = $vararg_buffer6; //@line 11016
  HEAP32[$AsyncCtx123 + 36 >> 2] = $vararg_buffer24; //@line 11018
  HEAP32[$AsyncCtx123 + 40 >> 2] = $vararg_buffer20; //@line 11020
  HEAP32[$AsyncCtx123 + 44 >> 2] = $83; //@line 11022
  HEAP32[$AsyncCtx123 + 48 >> 2] = $vararg_buffer20; //@line 11024
  HEAP32[$AsyncCtx123 + 52 >> 2] = $7; //@line 11026
  HEAP32[$AsyncCtx123 + 56 >> 2] = $vararg_buffer10; //@line 11028
  HEAP32[$AsyncCtx123 + 60 >> 2] = $1; //@line 11030
  HEAP32[$AsyncCtx123 + 64 >> 2] = $5; //@line 11032
  HEAP32[$AsyncCtx123 + 68 >> 2] = $0; //@line 11034
  HEAP32[$AsyncCtx123 + 72 >> 2] = $vararg_buffer10; //@line 11036
  HEAP32[$AsyncCtx123 + 76 >> 2] = $vararg_buffer4; //@line 11038
  HEAP32[$AsyncCtx123 + 80 >> 2] = $vararg_buffer16; //@line 11040
  HEAP32[$AsyncCtx123 + 84 >> 2] = $6; //@line 11042
  HEAP8[$AsyncCtx123 + 88 >> 0] = $4; //@line 11044
  HEAP32[$AsyncCtx123 + 92 >> 2] = $vararg_buffer4; //@line 11046
  HEAP32[$AsyncCtx123 + 96 >> 2] = $0; //@line 11048
  HEAP32[$AsyncCtx123 + 100 >> 2] = $vararg_buffer4; //@line 11050
  HEAP32[$AsyncCtx123 + 104 >> 2] = $vararg_buffer16; //@line 11052
  HEAP32[$AsyncCtx123 + 108 >> 2] = $vararg_buffer12; //@line 11054
  HEAP32[$AsyncCtx123 + 112 >> 2] = $vararg_buffer14; //@line 11056
  HEAP32[$AsyncCtx123 + 116 >> 2] = $vararg_buffer22; //@line 11058
  HEAP32[$AsyncCtx123 + 120 >> 2] = $6; //@line 11060
  HEAP32[$AsyncCtx123 + 124 >> 2] = $vararg_buffer10; //@line 11062
  HEAP32[$AsyncCtx123 + 128 >> 2] = $12; //@line 11064
  HEAP32[$AsyncCtx123 + 132 >> 2] = $vararg_buffer14; //@line 11066
  HEAP32[$AsyncCtx123 + 136 >> 2] = $vararg_buffer22; //@line 11068
  HEAP32[$AsyncCtx123 + 140 >> 2] = $vararg_buffer8; //@line 11070
  HEAP32[$AsyncCtx123 + 144 >> 2] = $vararg_buffer14; //@line 11072
  HEAP32[$AsyncCtx123 + 148 >> 2] = $vararg_buffer8; //@line 11074
  HEAP32[$AsyncCtx123 + 152 >> 2] = $vararg_buffer8; //@line 11076
  HEAP32[$AsyncCtx123 + 156 >> 2] = $vararg_buffer6; //@line 11078
  HEAP32[$AsyncCtx123 + 160 >> 2] = $5; //@line 11080
  HEAP32[$AsyncCtx123 + 164 >> 2] = $vararg_buffer18; //@line 11082
  HEAP32[$AsyncCtx123 + 168 >> 2] = $10; //@line 11084
  HEAP32[$AsyncCtx123 + 172 >> 2] = $vararg_buffer18; //@line 11086
  sp = STACKTOP; //@line 11087
  STACKTOP = sp; //@line 11088
  return;
 }
 _emscripten_free_async_context($AsyncCtx123 | 0); //@line 11090
 $129 = HEAP8[$1 >> 0] | 0; //@line 11091
 $trunc = ($129 & 255) >>> 5; //@line 11092
 L7 : do {
  switch ($trunc & 7) {
  case 1:
   {
    $130 = $0 + 372 | 0; //@line 11097
    if (HEAP8[$130 >> 0] | 0) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 4 >> 2] = 1; //@line 11103
     _mbed_tracef(16, 13728, 13867, $vararg_buffer4); //@line 11104
     $135 = $0 + 968 | 0; //@line 11105
     HEAP32[$135 >> 2] = HEAP32[$135 >> 2] | 64; //@line 11108
     if (HEAP8[$0 + 373 >> 0] | 0) {
      $142 = HEAP32[$0 + 1328 >> 2] | 0; //@line 11114
      HEAP32[$vararg_buffer4 >> 2] = 318; //@line 11115
      HEAP32[$vararg_buffer4 + 4 >> 2] = 0; //@line 11117
      $AsyncCtx112 = _emscripten_alloc_async_context(24, sp) | 0; //@line 11118
      HEAP32[$$byval_copy198 >> 2] = HEAP32[$vararg_buffer4 >> 2]; //@line 11119
      HEAP32[$$byval_copy198 + 4 >> 2] = HEAP32[$vararg_buffer4 + 4 >> 2]; //@line 11119
      $143 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($142, $0, $$byval_copy198) | 0; //@line 11120
      if (___async) {
       HEAP32[$AsyncCtx112 >> 2] = 319; //@line 11123
       HEAP32[$AsyncCtx112 + 4 >> 2] = $vararg_buffer4; //@line 11125
       HEAP32[$AsyncCtx112 + 8 >> 2] = $0; //@line 11127
       HEAP32[$AsyncCtx112 + 12 >> 2] = $83; //@line 11129
       HEAP32[$AsyncCtx112 + 16 >> 2] = $6; //@line 11131
       HEAP32[$AsyncCtx112 + 20 >> 2] = $5; //@line 11133
       sp = STACKTOP; //@line 11134
       STACKTOP = sp; //@line 11135
       return;
      }
      _emscripten_free_async_context($AsyncCtx112 | 0); //@line 11137
      do {
       if (!$143) {
        $AsyncCtx155 = _emscripten_alloc_async_context(24, sp) | 0; //@line 11141
        _mbed_assert_internal(13612, 13621, 199); //@line 11142
        if (___async) {
         HEAP32[$AsyncCtx155 >> 2] = 320; //@line 11145
         HEAP32[$AsyncCtx155 + 4 >> 2] = $vararg_buffer4; //@line 11147
         HEAP32[$AsyncCtx155 + 8 >> 2] = $0; //@line 11149
         HEAP32[$AsyncCtx155 + 12 >> 2] = $83; //@line 11151
         HEAP32[$AsyncCtx155 + 16 >> 2] = $6; //@line 11153
         HEAP32[$AsyncCtx155 + 20 >> 2] = $5; //@line 11155
         sp = STACKTOP; //@line 11156
         STACKTOP = sp; //@line 11157
         return;
        } else {
         _emscripten_free_async_context($AsyncCtx155 | 0); //@line 11159
         break;
        }
       }
      } while (0);
     }
     $155 = $0 + 944 | 0; //@line 11165
     HEAP8[$155 >> 0] = HEAP8[$155 >> 0] | 34; //@line 11168
     $158 = HEAP32[$83 >> 2] | 0; //@line 11169
     $AsyncCtx64 = _emscripten_alloc_async_context(12, sp) | 0; //@line 11171
     __ZN18LoRaWANTimeHandler5startER13timer_event_tj($158, $0 + 996 | 0, 1); //@line 11172
     if (___async) {
      HEAP32[$AsyncCtx64 >> 2] = 321; //@line 11175
      HEAP32[$AsyncCtx64 + 4 >> 2] = $6; //@line 11177
      HEAP32[$AsyncCtx64 + 8 >> 2] = $5; //@line 11179
      sp = STACKTOP; //@line 11180
      STACKTOP = sp; //@line 11181
      return;
     }
     _emscripten_free_async_context($AsyncCtx64 | 0); //@line 11183
     STACKTOP = sp; //@line 11184
     return;
    }
    $165 = $0 + 908 | 0; //@line 11189
    $167 = $0 + 638 | 0; //@line 11191
    $168 = $0 + 639 | 0; //@line 11192
    if (__Z18decrypt_join_framePKhtS0_Ph($1 + 1 | 0, $7 + 65535 & 65535, HEAP32[$165 >> 2] | 0, $168) | 0) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 4 >> 2] = 13; //@line 11198
     STACKTOP = sp; //@line 11199
     return;
    }
    HEAP8[$167 >> 0] = $129; //@line 11201
    $173 = $7 + -4 | 0; //@line 11202
    $175 = HEAP32[$165 >> 2] | 0; //@line 11204
    $AsyncCtx36 = _emscripten_alloc_async_context(64, sp) | 0; //@line 11205
    $176 = __Z22compute_join_frame_micPKhtS0_Pj($167, $173 & 65535, $175, $6) | 0; //@line 11206
    if (___async) {
     HEAP32[$AsyncCtx36 >> 2] = 322; //@line 11209
     HEAP32[$AsyncCtx36 + 4 >> 2] = $0; //@line 11211
     HEAP32[$AsyncCtx36 + 8 >> 2] = $173; //@line 11213
     HEAP32[$AsyncCtx36 + 12 >> 2] = $7; //@line 11215
     HEAP32[$AsyncCtx36 + 16 >> 2] = $6; //@line 11217
     HEAP32[$AsyncCtx36 + 20 >> 2] = $12; //@line 11219
     HEAP32[$AsyncCtx36 + 24 >> 2] = $6; //@line 11221
     HEAP32[$AsyncCtx36 + 28 >> 2] = $5; //@line 11223
     HEAP32[$AsyncCtx36 + 32 >> 2] = $165; //@line 11225
     HEAP32[$AsyncCtx36 + 36 >> 2] = $168; //@line 11227
     HEAP32[$AsyncCtx36 + 40 >> 2] = $10; //@line 11229
     HEAP32[$AsyncCtx36 + 44 >> 2] = $11; //@line 11231
     HEAP32[$AsyncCtx36 + 48 >> 2] = $83; //@line 11233
     HEAP32[$AsyncCtx36 + 52 >> 2] = $5; //@line 11235
     HEAP32[$AsyncCtx36 + 56 >> 2] = $0; //@line 11237
     HEAP32[$AsyncCtx36 + 60 >> 2] = $130; //@line 11239
     sp = STACKTOP; //@line 11240
     STACKTOP = sp; //@line 11241
     return;
    }
    _emscripten_free_async_context($AsyncCtx36 | 0); //@line 11243
    if ($176 | 0) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 4 >> 2] = 13; //@line 11248
     STACKTOP = sp; //@line 11249
     return;
    }
    if ((HEAPU8[$7 + -3 + ($0 + 638) >> 0] << 8 | HEAPU8[$0 + 638 + $173 >> 0] | HEAPU8[$7 + -2 + ($0 + 638) >> 0] << 16 | HEAPU8[$7 + -1 + ($0 + 638) >> 0] << 24 | 0) != (HEAP32[$6 >> 2] | 0)) {
     HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) + 4 >> 2] = 7; //@line 11278
     break L7;
    }
    if (__Z28compute_skeys_for_join_framePKhS0_tPhS1_(HEAP32[$165 >> 2] | 0, $168, HEAP16[$0 + 946 >> 1] | 0, $10, $11) | 0) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 4 >> 2] = 13; //@line 11289
     STACKTOP = sp; //@line 11290
     return;
    }
    HEAP32[$0 + 948 >> 2] = HEAPU8[$0 + 644 >> 0] << 16 | (HEAPU8[$0 + 643 >> 0] << 8 | HEAPU8[$0 + 642 >> 0]); //@line 11306
    HEAP32[$0 + 952 >> 2] = HEAPU8[$0 + 648 >> 0] << 24 | (HEAPU8[$0 + 647 >> 0] << 16 | (HEAPU8[$0 + 646 >> 0] << 8 | HEAPU8[$0 + 645 >> 0])); //@line 11326
    $259 = HEAP8[$0 + 649 >> 0] | 0; //@line 11328
    HEAP8[$0 + 1129 >> 0] = ($259 & 255) >>> 4 & 7; //@line 11334
    HEAP8[$0 + 1136 >> 0] = $259 & 15; //@line 11337
    $269 = HEAP8[$0 + 650 >> 0] & 15; //@line 11340
    $273 = $269 << 24 >> 24 == 0 ? 1e3 : ($269 & 255) * 1e3 | 0; //@line 11345
    HEAP32[$0 + 1112 >> 2] = $273; //@line 11346
    HEAP32[$0 + 1116 >> 2] = $273 + 1e3; //@line 11349
    HEAP32[$5 >> 2] = $0 + 651; //@line 11351
    HEAP8[$5 + 4 >> 0] = $7 + 239; //@line 11355
    $280 = HEAP32[$0 >> 2] | 0; //@line 11356
    $283 = HEAP32[(HEAP32[$280 >> 2] | 0) + 20 >> 2] | 0; //@line 11359
    $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 11360
    FUNCTION_TABLE_vii[$283 & 31]($280, $5); //@line 11361
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 323; //@line 11364
     HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 11366
     HEAP32[$AsyncCtx + 8 >> 2] = $130; //@line 11368
     HEAP32[$AsyncCtx + 12 >> 2] = $83; //@line 11370
     HEAP32[$AsyncCtx + 16 >> 2] = $6; //@line 11372
     HEAP32[$AsyncCtx + 20 >> 2] = $5; //@line 11374
     sp = STACKTOP; //@line 11375
     STACKTOP = sp; //@line 11376
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 11378
     HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) + 4 >> 2] = 0; //@line 11382
     HEAP8[$130 >> 0] = 1; //@line 11383
     break L7;
    }
    break;
   }
  case 3:
  case 5:
   {
    $302 = __ZN7LoRaPHY15get_max_payloadEhb(HEAP32[$0 >> 2] | 0, HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 10 >> 0] | 0, (HEAP8[$0 + 369 >> 0] | 0) != 0) | 0; //@line 11396
    $sext = ($7 << 16) + -851968 | 0; //@line 11398
    if (((($sext | 0) < 0 ? 0 : $sext >> 16) | 0) > ($302 & 255 | 0)) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 4 >> 2] = 1; //@line 11407
     _mbed_tracef(16, 13728, 13867, $vararg_buffer6); //@line 11408
     $310 = $0 + 968 | 0; //@line 11409
     HEAP32[$310 >> 2] = HEAP32[$310 >> 2] | 64; //@line 11412
     if (HEAP8[$0 + 373 >> 0] | 0) {
      $317 = HEAP32[$0 + 1328 >> 2] | 0; //@line 11418
      HEAP32[$vararg_buffer6 >> 2] = 318; //@line 11419
      HEAP32[$vararg_buffer6 + 4 >> 2] = 0; //@line 11421
      $AsyncCtx108 = _emscripten_alloc_async_context(24, sp) | 0; //@line 11422
      HEAP32[$$byval_copy198 >> 2] = HEAP32[$vararg_buffer6 >> 2]; //@line 11423
      HEAP32[$$byval_copy198 + 4 >> 2] = HEAP32[$vararg_buffer6 + 4 >> 2]; //@line 11423
      $318 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($317, $0, $$byval_copy198) | 0; //@line 11424
      if (___async) {
       HEAP32[$AsyncCtx108 >> 2] = 324; //@line 11427
       HEAP32[$AsyncCtx108 + 4 >> 2] = $vararg_buffer6; //@line 11429
       HEAP32[$AsyncCtx108 + 8 >> 2] = $0; //@line 11431
       HEAP32[$AsyncCtx108 + 12 >> 2] = $83; //@line 11433
       HEAP32[$AsyncCtx108 + 16 >> 2] = $6; //@line 11435
       HEAP32[$AsyncCtx108 + 20 >> 2] = $5; //@line 11437
       sp = STACKTOP; //@line 11438
       STACKTOP = sp; //@line 11439
       return;
      }
      _emscripten_free_async_context($AsyncCtx108 | 0); //@line 11441
      do {
       if (!$318) {
        $AsyncCtx151 = _emscripten_alloc_async_context(24, sp) | 0; //@line 11445
        _mbed_assert_internal(13612, 13621, 199); //@line 11446
        if (___async) {
         HEAP32[$AsyncCtx151 >> 2] = 325; //@line 11449
         HEAP32[$AsyncCtx151 + 4 >> 2] = $vararg_buffer6; //@line 11451
         HEAP32[$AsyncCtx151 + 8 >> 2] = $0; //@line 11453
         HEAP32[$AsyncCtx151 + 12 >> 2] = $83; //@line 11455
         HEAP32[$AsyncCtx151 + 16 >> 2] = $6; //@line 11457
         HEAP32[$AsyncCtx151 + 20 >> 2] = $5; //@line 11459
         sp = STACKTOP; //@line 11460
         STACKTOP = sp; //@line 11461
         return;
        } else {
         _emscripten_free_async_context($AsyncCtx151 | 0); //@line 11463
         break;
        }
       }
      } while (0);
     }
     $330 = $0 + 944 | 0; //@line 11469
     HEAP8[$330 >> 0] = HEAP8[$330 >> 0] | 34; //@line 11472
     $333 = HEAP32[$83 >> 2] | 0; //@line 11473
     $AsyncCtx61 = _emscripten_alloc_async_context(12, sp) | 0; //@line 11475
     __ZN18LoRaWANTimeHandler5startER13timer_event_tj($333, $0 + 996 | 0, 1); //@line 11476
     if (___async) {
      HEAP32[$AsyncCtx61 >> 2] = 326; //@line 11479
      HEAP32[$AsyncCtx61 + 4 >> 2] = $6; //@line 11481
      HEAP32[$AsyncCtx61 + 8 >> 2] = $5; //@line 11483
      sp = STACKTOP; //@line 11484
      STACKTOP = sp; //@line 11485
      return;
     }
     _emscripten_free_async_context($AsyncCtx61 | 0); //@line 11487
     STACKTOP = sp; //@line 11488
     return;
    }
    $354 = HEAPU8[$1 + 2 >> 0] << 8 | HEAPU8[$1 + 1 >> 0] | HEAPU8[$1 + 3 >> 0] << 16 | HEAPU8[$1 + 4 >> 0] << 24; //@line 11507
    L85 : do {
     if (($354 | 0) == (HEAP32[$0 + 952 >> 2] | 0)) {
      $$1169 = 0; //@line 11514
      $$1171 = $11; //@line 11514
      $$1173 = $10; //@line 11514
      $$1175 = 0; //@line 11514
      $$sink233 = $0 + 960 | 0; //@line 11514
     } else {
      $$0174235 = HEAP32[$0 + 1208 >> 2] | 0; //@line 11517
      L88 : do {
       if ($$0174235 | 0) {
        $$0174236 = $$0174235; //@line 11521
        while (1) {
         if (($354 | 0) == (HEAP32[$$0174236 >> 2] | 0)) {
          break;
         }
         $$0174 = HEAP32[$$0174236 + 40 >> 2] | 0; //@line 11529
         if (!$$0174) {
          break L88;
         } else {
          $$0174236 = $$0174; //@line 11534
         }
        }
        $$1169 = 1; //@line 11540
        $$1171 = $$0174236 + 20 | 0; //@line 11540
        $$1173 = $$0174236 + 4 | 0; //@line 11540
        $$1175 = $$0174236; //@line 11540
        $$sink233 = $$0174236 + 36 | 0; //@line 11540
        break L85;
       }
      } while (0);
      HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 4 >> 2] = 11; //@line 11546
      _mbed_tracef(16, 13728, 13867, $vararg_buffer8); //@line 11547
      $369 = $0 + 968 | 0; //@line 11548
      HEAP32[$369 >> 2] = HEAP32[$369 >> 2] | 64; //@line 11551
      if (HEAP8[$0 + 373 >> 0] | 0) {
       $376 = HEAP32[$0 + 1328 >> 2] | 0; //@line 11557
       HEAP32[$vararg_buffer8 >> 2] = 318; //@line 11558
       HEAP32[$vararg_buffer8 + 4 >> 2] = 0; //@line 11560
       $AsyncCtx104 = _emscripten_alloc_async_context(24, sp) | 0; //@line 11561
       HEAP32[$$byval_copy198 >> 2] = HEAP32[$vararg_buffer8 >> 2]; //@line 11562
       HEAP32[$$byval_copy198 + 4 >> 2] = HEAP32[$vararg_buffer8 + 4 >> 2]; //@line 11562
       $377 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($376, $0, $$byval_copy198) | 0; //@line 11563
       if (___async) {
        HEAP32[$AsyncCtx104 >> 2] = 327; //@line 11566
        HEAP32[$AsyncCtx104 + 4 >> 2] = $vararg_buffer8; //@line 11568
        HEAP32[$AsyncCtx104 + 8 >> 2] = $0; //@line 11570
        HEAP32[$AsyncCtx104 + 12 >> 2] = $83; //@line 11572
        HEAP32[$AsyncCtx104 + 16 >> 2] = $6; //@line 11574
        HEAP32[$AsyncCtx104 + 20 >> 2] = $5; //@line 11576
        sp = STACKTOP; //@line 11577
        STACKTOP = sp; //@line 11578
        return;
       }
       _emscripten_free_async_context($AsyncCtx104 | 0); //@line 11580
       do {
        if (!$377) {
         $AsyncCtx147 = _emscripten_alloc_async_context(24, sp) | 0; //@line 11584
         _mbed_assert_internal(13612, 13621, 199); //@line 11585
         if (___async) {
          HEAP32[$AsyncCtx147 >> 2] = 328; //@line 11588
          HEAP32[$AsyncCtx147 + 4 >> 2] = $vararg_buffer8; //@line 11590
          HEAP32[$AsyncCtx147 + 8 >> 2] = $0; //@line 11592
          HEAP32[$AsyncCtx147 + 12 >> 2] = $83; //@line 11594
          HEAP32[$AsyncCtx147 + 16 >> 2] = $6; //@line 11596
          HEAP32[$AsyncCtx147 + 20 >> 2] = $5; //@line 11598
          sp = STACKTOP; //@line 11599
          STACKTOP = sp; //@line 11600
          return;
         } else {
          _emscripten_free_async_context($AsyncCtx147 | 0); //@line 11602
          break;
         }
        }
       } while (0);
      }
      $389 = $0 + 944 | 0; //@line 11608
      HEAP8[$389 >> 0] = HEAP8[$389 >> 0] | 34; //@line 11611
      $392 = HEAP32[$83 >> 2] | 0; //@line 11612
      $AsyncCtx58 = _emscripten_alloc_async_context(12, sp) | 0; //@line 11614
      __ZN18LoRaWANTimeHandler5startER13timer_event_tj($392, $0 + 996 | 0, 1); //@line 11615
      if (___async) {
       HEAP32[$AsyncCtx58 >> 2] = 329; //@line 11618
       HEAP32[$AsyncCtx58 + 4 >> 2] = $6; //@line 11620
       HEAP32[$AsyncCtx58 + 8 >> 2] = $5; //@line 11622
       sp = STACKTOP; //@line 11623
       STACKTOP = sp; //@line 11624
       return;
      }
      _emscripten_free_async_context($AsyncCtx58 | 0); //@line 11626
      STACKTOP = sp; //@line 11627
      return;
     }
    } while (0);
    $397 = HEAP32[$$sink233 >> 2] | 0; //@line 11630
    $399 = HEAP8[$1 + 5 >> 0] | 0; //@line 11632
    $408 = $399 & 15; //@line 11641
    $409 = $408 & 255; //@line 11642
    $410 = $409 + 8 | 0; //@line 11643
    $411 = $410 & 255; //@line 11644
    $412 = $7 + -4 | 0; //@line 11645
    $433 = HEAPU8[$1 + ($7 + -3) >> 0] << 8 | HEAPU8[$1 + $412 >> 0] | HEAPU8[$1 + ($7 + -2) >> 0] << 16 | HEAPU8[$1 + ($7 + -1) >> 0] << 24; //@line 11666
    $434 = (HEAPU8[$1 + 7 >> 0] << 8 | HEAPU8[$1 + 6 >> 0]) - $397 | 0; //@line 11667
    $435 = $434 & 65535; //@line 11668
    do {
     if ($435 >>> 0 < 32768) {
      $437 = $435 + $397 | 0; //@line 11672
      $AsyncCtx32 = _emscripten_alloc_async_context(172, sp) | 0; //@line 11674
      __Z11compute_micPKhtS0_jhjPj($1, $412 & 65535, $$1173, $354, 1, $437, $6) | 0; //@line 11675
      if (___async) {
       HEAP32[$AsyncCtx32 >> 2] = 330; //@line 11678
       HEAP32[$AsyncCtx32 + 4 >> 2] = $437; //@line 11680
       HEAP8[$AsyncCtx32 + 8 >> 0] = $399; //@line 11682
       HEAP32[$AsyncCtx32 + 12 >> 2] = $vararg_buffer22; //@line 11684
       HEAP32[$AsyncCtx32 + 16 >> 2] = $vararg_buffer12; //@line 11686
       HEAP32[$AsyncCtx32 + 20 >> 2] = $$1175; //@line 11688
       HEAP8[$AsyncCtx32 + 24 >> 0] = $411; //@line 11690
       HEAP32[$AsyncCtx32 + 28 >> 2] = $410; //@line 11692
       HEAP32[$AsyncCtx32 + 32 >> 2] = $vararg_buffer12; //@line 11694
       HEAP32[$AsyncCtx32 + 36 >> 2] = $409; //@line 11696
       HEAP32[$AsyncCtx32 + 40 >> 2] = $$1171; //@line 11698
       HEAP32[$AsyncCtx32 + 44 >> 2] = $vararg_buffer20; //@line 11700
       HEAP8[$AsyncCtx32 + 48 >> 0] = $$1169; //@line 11702
       HEAP32[$AsyncCtx32 + 52 >> 2] = $83; //@line 11704
       HEAP32[$AsyncCtx32 + 56 >> 2] = $354; //@line 11706
       HEAP32[$AsyncCtx32 + 60 >> 2] = $vararg_buffer20; //@line 11708
       HEAP32[$AsyncCtx32 + 64 >> 2] = $435; //@line 11710
       HEAP32[$AsyncCtx32 + 68 >> 2] = $412; //@line 11712
       HEAP32[$AsyncCtx32 + 72 >> 2] = $vararg_buffer10; //@line 11714
       HEAP32[$AsyncCtx32 + 76 >> 2] = $$1173; //@line 11716
       HEAP32[$AsyncCtx32 + 80 >> 2] = $1; //@line 11718
       HEAP32[$AsyncCtx32 + 84 >> 2] = $0; //@line 11720
       HEAP32[$AsyncCtx32 + 88 >> 2] = $vararg_buffer10; //@line 11722
       HEAP32[$AsyncCtx32 + 92 >> 2] = $vararg_buffer16; //@line 11724
       HEAP8[$AsyncCtx32 + 96 >> 0] = $4; //@line 11726
       HEAP32[$AsyncCtx32 + 100 >> 2] = $6; //@line 11728
       HEAP32[$AsyncCtx32 + 104 >> 2] = $0; //@line 11730
       HEAP32[$AsyncCtx32 + 108 >> 2] = $433; //@line 11732
       HEAP32[$AsyncCtx32 + 112 >> 2] = $vararg_buffer16; //@line 11734
       HEAP32[$AsyncCtx32 + 116 >> 2] = $vararg_buffer12; //@line 11736
       HEAP32[$AsyncCtx32 + 120 >> 2] = $vararg_buffer14; //@line 11738
       HEAP32[$AsyncCtx32 + 124 >> 2] = $vararg_buffer22; //@line 11740
       HEAP32[$AsyncCtx32 + 128 >> 2] = $6; //@line 11742
       HEAP32[$AsyncCtx32 + 132 >> 2] = $vararg_buffer10; //@line 11744
       HEAP32[$AsyncCtx32 + 136 >> 2] = $12; //@line 11746
       HEAP32[$AsyncCtx32 + 140 >> 2] = $vararg_buffer14; //@line 11748
       HEAP32[$AsyncCtx32 + 144 >> 2] = $vararg_buffer22; //@line 11750
       HEAP8[$AsyncCtx32 + 148 >> 0] = $trunc; //@line 11752
       HEAP32[$AsyncCtx32 + 152 >> 2] = $vararg_buffer14; //@line 11754
       HEAP8[$AsyncCtx32 + 156 >> 0] = $408; //@line 11756
       HEAP32[$AsyncCtx32 + 160 >> 2] = $5; //@line 11758
       HEAP32[$AsyncCtx32 + 164 >> 2] = $vararg_buffer18; //@line 11760
       HEAP32[$AsyncCtx32 + 168 >> 2] = $vararg_buffer18; //@line 11762
       sp = STACKTOP; //@line 11763
       STACKTOP = sp; //@line 11764
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx32 | 0); //@line 11766
       $$3179 = $437; //@line 11769
       $$sink200 = ($433 | 0) == (HEAP32[$6 >> 2] | 0); //@line 11769
       break;
      }
     } else {
      $485 = $397 + 65536 + ($434 << 16 >> 16) | 0; //@line 11776
      $AsyncCtx28 = _emscripten_alloc_async_context(176, sp) | 0; //@line 11778
      __Z11compute_micPKhtS0_jhjPj($1, $412 & 65535, $$1173, $354, 1, $485, $6) | 0; //@line 11779
      if (___async) {
       HEAP32[$AsyncCtx28 >> 2] = 331; //@line 11782
       HEAP32[$AsyncCtx28 + 4 >> 2] = $485; //@line 11784
       HEAP8[$AsyncCtx28 + 8 >> 0] = $399; //@line 11786
       HEAP32[$AsyncCtx28 + 12 >> 2] = $vararg_buffer22; //@line 11788
       HEAP32[$AsyncCtx28 + 16 >> 2] = $vararg_buffer12; //@line 11790
       HEAP32[$AsyncCtx28 + 20 >> 2] = $$1175; //@line 11792
       HEAP8[$AsyncCtx28 + 24 >> 0] = $411; //@line 11794
       HEAP32[$AsyncCtx28 + 28 >> 2] = $410; //@line 11796
       HEAP32[$AsyncCtx28 + 32 >> 2] = $vararg_buffer12; //@line 11798
       HEAP32[$AsyncCtx28 + 36 >> 2] = $409; //@line 11800
       HEAP32[$AsyncCtx28 + 40 >> 2] = $$1171; //@line 11802
       HEAP32[$AsyncCtx28 + 44 >> 2] = $vararg_buffer20; //@line 11804
       HEAP8[$AsyncCtx28 + 48 >> 0] = $$1169; //@line 11806
       HEAP32[$AsyncCtx28 + 52 >> 2] = $83; //@line 11808
       HEAP32[$AsyncCtx28 + 56 >> 2] = $354; //@line 11810
       HEAP32[$AsyncCtx28 + 60 >> 2] = $vararg_buffer20; //@line 11812
       HEAP32[$AsyncCtx28 + 64 >> 2] = $435; //@line 11814
       HEAP32[$AsyncCtx28 + 68 >> 2] = $412; //@line 11816
       HEAP32[$AsyncCtx28 + 72 >> 2] = $vararg_buffer10; //@line 11818
       HEAP32[$AsyncCtx28 + 76 >> 2] = $$1173; //@line 11820
       HEAP32[$AsyncCtx28 + 80 >> 2] = $1; //@line 11822
       HEAP32[$AsyncCtx28 + 84 >> 2] = $0; //@line 11824
       HEAP32[$AsyncCtx28 + 88 >> 2] = $vararg_buffer10; //@line 11826
       HEAP32[$AsyncCtx28 + 92 >> 2] = $vararg_buffer16; //@line 11828
       HEAP8[$AsyncCtx28 + 96 >> 0] = $4; //@line 11830
       HEAP32[$AsyncCtx28 + 100 >> 2] = $6; //@line 11832
       HEAP32[$AsyncCtx28 + 104 >> 2] = $0; //@line 11834
       HEAP32[$AsyncCtx28 + 108 >> 2] = $433; //@line 11836
       HEAP32[$AsyncCtx28 + 112 >> 2] = $vararg_buffer16; //@line 11838
       HEAP32[$AsyncCtx28 + 116 >> 2] = $vararg_buffer12; //@line 11840
       HEAP32[$AsyncCtx28 + 120 >> 2] = $vararg_buffer14; //@line 11842
       HEAP32[$AsyncCtx28 + 124 >> 2] = $vararg_buffer22; //@line 11844
       HEAP32[$AsyncCtx28 + 128 >> 2] = $6; //@line 11846
       HEAP32[$AsyncCtx28 + 132 >> 2] = $vararg_buffer10; //@line 11848
       HEAP32[$AsyncCtx28 + 136 >> 2] = $12; //@line 11850
       HEAP32[$AsyncCtx28 + 140 >> 2] = $vararg_buffer14; //@line 11852
       HEAP32[$AsyncCtx28 + 144 >> 2] = $vararg_buffer22; //@line 11854
       HEAP8[$AsyncCtx28 + 148 >> 0] = $trunc; //@line 11856
       HEAP32[$AsyncCtx28 + 152 >> 2] = $vararg_buffer14; //@line 11858
       HEAP8[$AsyncCtx28 + 156 >> 0] = $408; //@line 11860
       HEAP32[$AsyncCtx28 + 160 >> 2] = $397; //@line 11862
       HEAP32[$AsyncCtx28 + 164 >> 2] = $5; //@line 11864
       HEAP32[$AsyncCtx28 + 168 >> 2] = $vararg_buffer18; //@line 11866
       HEAP32[$AsyncCtx28 + 172 >> 2] = $vararg_buffer18; //@line 11868
       sp = STACKTOP; //@line 11869
       STACKTOP = sp; //@line 11870
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx28 | 0); //@line 11872
       $531 = ($433 | 0) == (HEAP32[$6 >> 2] | 0); //@line 11874
       $$3179 = $531 ? $485 : $397; //@line 11876
       $$sink200 = $531; //@line 11876
       break;
      }
     }
    } while (0);
    $535 = $435 >>> 0 < ((__ZN7LoRaPHY29get_maximum_frame_counter_gapEv(HEAP32[$0 >> 2] | 0) | 0) & 65535) >>> 0; //@line 11884
    $537 = (__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 4 | 0; //@line 11886
    if (!$535) {
     HEAP32[$537 >> 2] = 10; //@line 11888
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 32 >> 2] = $$3179; //@line 11891
     _mbed_tracef(16, 13728, 13867, $vararg_buffer10); //@line 11892
     $540 = $0 + 968 | 0; //@line 11893
     HEAP32[$540 >> 2] = HEAP32[$540 >> 2] | 64; //@line 11896
     if (HEAP8[$0 + 373 >> 0] | 0) {
      $547 = HEAP32[$0 + 1328 >> 2] | 0; //@line 11902
      HEAP32[$vararg_buffer10 >> 2] = 318; //@line 11903
      HEAP32[$vararg_buffer10 + 4 >> 2] = 0; //@line 11905
      $AsyncCtx100 = _emscripten_alloc_async_context(24, sp) | 0; //@line 11906
      HEAP32[$$byval_copy198 >> 2] = HEAP32[$vararg_buffer10 >> 2]; //@line 11907
      HEAP32[$$byval_copy198 + 4 >> 2] = HEAP32[$vararg_buffer10 + 4 >> 2]; //@line 11907
      $548 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($547, $0, $$byval_copy198) | 0; //@line 11908
      if (___async) {
       HEAP32[$AsyncCtx100 >> 2] = 332; //@line 11911
       HEAP32[$AsyncCtx100 + 4 >> 2] = $vararg_buffer10; //@line 11913
       HEAP32[$AsyncCtx100 + 8 >> 2] = $0; //@line 11915
       HEAP32[$AsyncCtx100 + 12 >> 2] = $83; //@line 11917
       HEAP32[$AsyncCtx100 + 16 >> 2] = $6; //@line 11919
       HEAP32[$AsyncCtx100 + 20 >> 2] = $5; //@line 11921
       sp = STACKTOP; //@line 11922
       STACKTOP = sp; //@line 11923
       return;
      }
      _emscripten_free_async_context($AsyncCtx100 | 0); //@line 11925
      do {
       if (!$548) {
        $AsyncCtx143 = _emscripten_alloc_async_context(24, sp) | 0; //@line 11929
        _mbed_assert_internal(13612, 13621, 199); //@line 11930
        if (___async) {
         HEAP32[$AsyncCtx143 >> 2] = 333; //@line 11933
         HEAP32[$AsyncCtx143 + 4 >> 2] = $vararg_buffer10; //@line 11935
         HEAP32[$AsyncCtx143 + 8 >> 2] = $0; //@line 11937
         HEAP32[$AsyncCtx143 + 12 >> 2] = $83; //@line 11939
         HEAP32[$AsyncCtx143 + 16 >> 2] = $6; //@line 11941
         HEAP32[$AsyncCtx143 + 20 >> 2] = $5; //@line 11943
         sp = STACKTOP; //@line 11944
         STACKTOP = sp; //@line 11945
         return;
        } else {
         _emscripten_free_async_context($AsyncCtx143 | 0); //@line 11947
         break;
        }
       }
      } while (0);
     }
     $560 = $0 + 944 | 0; //@line 11953
     HEAP8[$560 >> 0] = HEAP8[$560 >> 0] | 34; //@line 11956
     $563 = HEAP32[$83 >> 2] | 0; //@line 11957
     $AsyncCtx55 = _emscripten_alloc_async_context(12, sp) | 0; //@line 11959
     __ZN18LoRaWANTimeHandler5startER13timer_event_tj($563, $0 + 996 | 0, 1); //@line 11960
     if (___async) {
      HEAP32[$AsyncCtx55 >> 2] = 334; //@line 11963
      HEAP32[$AsyncCtx55 + 4 >> 2] = $6; //@line 11965
      HEAP32[$AsyncCtx55 + 8 >> 2] = $5; //@line 11967
      sp = STACKTOP; //@line 11968
      STACKTOP = sp; //@line 11969
      return;
     }
     _emscripten_free_async_context($AsyncCtx55 | 0); //@line 11971
     STACKTOP = sp; //@line 11972
     return;
    }
    if (!$$sink200) {
     HEAP32[$537 >> 2] = 12; //@line 11975
     _mbed_tracef(16, 13728, 13867, $vararg_buffer22); //@line 11976
     $806 = $0 + 968 | 0; //@line 11977
     HEAP32[$806 >> 2] = HEAP32[$806 >> 2] | 64; //@line 11980
     if (HEAP8[$0 + 373 >> 0] | 0) {
      $813 = HEAP32[$0 + 1328 >> 2] | 0; //@line 11986
      HEAP32[$vararg_buffer22 >> 2] = 318; //@line 11987
      HEAP32[$vararg_buffer22 + 4 >> 2] = 0; //@line 11989
      $AsyncCtx88 = _emscripten_alloc_async_context(24, sp) | 0; //@line 11990
      HEAP32[$$byval_copy198 >> 2] = HEAP32[$vararg_buffer22 >> 2]; //@line 11991
      HEAP32[$$byval_copy198 + 4 >> 2] = HEAP32[$vararg_buffer22 + 4 >> 2]; //@line 11991
      $814 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($813, $0, $$byval_copy198) | 0; //@line 11992
      if (___async) {
       HEAP32[$AsyncCtx88 >> 2] = 346; //@line 11995
       HEAP32[$AsyncCtx88 + 4 >> 2] = $vararg_buffer22; //@line 11997
       HEAP32[$AsyncCtx88 + 8 >> 2] = $0; //@line 11999
       HEAP32[$AsyncCtx88 + 12 >> 2] = $83; //@line 12001
       HEAP32[$AsyncCtx88 + 16 >> 2] = $6; //@line 12003
       HEAP32[$AsyncCtx88 + 20 >> 2] = $5; //@line 12005
       sp = STACKTOP; //@line 12006
       STACKTOP = sp; //@line 12007
       return;
      }
      _emscripten_free_async_context($AsyncCtx88 | 0); //@line 12009
      do {
       if (!$814) {
        $AsyncCtx131 = _emscripten_alloc_async_context(24, sp) | 0; //@line 12013
        _mbed_assert_internal(13612, 13621, 199); //@line 12014
        if (___async) {
         HEAP32[$AsyncCtx131 >> 2] = 347; //@line 12017
         HEAP32[$AsyncCtx131 + 4 >> 2] = $vararg_buffer22; //@line 12019
         HEAP32[$AsyncCtx131 + 8 >> 2] = $0; //@line 12021
         HEAP32[$AsyncCtx131 + 12 >> 2] = $83; //@line 12023
         HEAP32[$AsyncCtx131 + 16 >> 2] = $6; //@line 12025
         HEAP32[$AsyncCtx131 + 20 >> 2] = $5; //@line 12027
         sp = STACKTOP; //@line 12028
         STACKTOP = sp; //@line 12029
         return;
        } else {
         _emscripten_free_async_context($AsyncCtx131 | 0); //@line 12031
         break;
        }
       }
      } while (0);
     }
     $826 = $0 + 944 | 0; //@line 12037
     HEAP8[$826 >> 0] = HEAP8[$826 >> 0] | 34; //@line 12040
     $829 = HEAP32[$83 >> 2] | 0; //@line 12041
     $AsyncCtx46 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12043
     __ZN18LoRaWANTimeHandler5startER13timer_event_tj($829, $0 + 996 | 0, 1); //@line 12044
     if (___async) {
      HEAP32[$AsyncCtx46 >> 2] = 348; //@line 12047
      HEAP32[$AsyncCtx46 + 4 >> 2] = $6; //@line 12049
      HEAP32[$AsyncCtx46 + 8 >> 2] = $5; //@line 12051
      sp = STACKTOP; //@line 12052
      STACKTOP = sp; //@line 12053
      return;
     }
     _emscripten_free_async_context($AsyncCtx46 | 0); //@line 12055
     STACKTOP = sp; //@line 12056
     return;
    }
    HEAP32[$537 >> 2] = 0; //@line 12058
    HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 8 >> 0] = $$1169; //@line 12061
    HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 11 >> 0] = ($399 & 255) >>> 4 & 1; //@line 12066
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 12 >> 2] = 0; //@line 12069
    HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 16 >> 1] = 0; //@line 12072
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 32 >> 2] = $$3179; //@line 12075
    HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($12) | 0) + 4 >> 2] = 0; //@line 12078
    HEAP32[$0 + 964 >> 2] = 0; //@line 12080
    $582 = $0 + 4 | 0; //@line 12081
    __ZN14LoRaMacCommand19clear_repeat_bufferEv($582); //@line 12082
    do {
     if ($$1169 << 24 >> 24 == 1) {
      HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) >> 2] = 2; //@line 12087
      $585 = $$1175 + 36 | 0; //@line 12088
      $586 = HEAP32[$585 >> 2] | 0; //@line 12089
      if (($586 | 0) != ($$3179 | 0) | ($586 | 0) == 0) {
       $$1$off0 = 0; //@line 12094
       $$sink = $585; //@line 12094
      } else {
       HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 4 >> 2] = 8; //@line 12098
       HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 32 >> 2] = $$3179; //@line 12101
       _mbed_tracef(16, 13728, 13867, $vararg_buffer12); //@line 12102
       $593 = $0 + 968 | 0; //@line 12103
       HEAP32[$593 >> 2] = HEAP32[$593 >> 2] | 64; //@line 12106
       if (HEAP8[$0 + 373 >> 0] | 0) {
        $600 = HEAP32[$0 + 1328 >> 2] | 0; //@line 12112
        HEAP32[$vararg_buffer12 >> 2] = 318; //@line 12113
        HEAP32[$vararg_buffer12 + 4 >> 2] = 0; //@line 12115
        $AsyncCtx96 = _emscripten_alloc_async_context(24, sp) | 0; //@line 12116
        HEAP32[$$byval_copy198 >> 2] = HEAP32[$vararg_buffer12 >> 2]; //@line 12117
        HEAP32[$$byval_copy198 + 4 >> 2] = HEAP32[$vararg_buffer12 + 4 >> 2]; //@line 12117
        $601 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($600, $0, $$byval_copy198) | 0; //@line 12118
        if (___async) {
         HEAP32[$AsyncCtx96 >> 2] = 335; //@line 12121
         HEAP32[$AsyncCtx96 + 4 >> 2] = $vararg_buffer12; //@line 12123
         HEAP32[$AsyncCtx96 + 8 >> 2] = $0; //@line 12125
         HEAP32[$AsyncCtx96 + 12 >> 2] = $83; //@line 12127
         HEAP32[$AsyncCtx96 + 16 >> 2] = $6; //@line 12129
         HEAP32[$AsyncCtx96 + 20 >> 2] = $5; //@line 12131
         sp = STACKTOP; //@line 12132
         STACKTOP = sp; //@line 12133
         return;
        }
        _emscripten_free_async_context($AsyncCtx96 | 0); //@line 12135
        do {
         if (!$601) {
          $AsyncCtx139 = _emscripten_alloc_async_context(24, sp) | 0; //@line 12139
          _mbed_assert_internal(13612, 13621, 199); //@line 12140
          if (___async) {
           HEAP32[$AsyncCtx139 >> 2] = 336; //@line 12143
           HEAP32[$AsyncCtx139 + 4 >> 2] = $vararg_buffer12; //@line 12145
           HEAP32[$AsyncCtx139 + 8 >> 2] = $0; //@line 12147
           HEAP32[$AsyncCtx139 + 12 >> 2] = $83; //@line 12149
           HEAP32[$AsyncCtx139 + 16 >> 2] = $6; //@line 12151
           HEAP32[$AsyncCtx139 + 20 >> 2] = $5; //@line 12153
           sp = STACKTOP; //@line 12154
           STACKTOP = sp; //@line 12155
           return;
          } else {
           _emscripten_free_async_context($AsyncCtx139 | 0); //@line 12157
           break;
          }
         }
        } while (0);
       }
       $613 = $0 + 944 | 0; //@line 12163
       HEAP8[$613 >> 0] = HEAP8[$613 >> 0] | 34; //@line 12166
       $616 = HEAP32[$83 >> 2] | 0; //@line 12167
       $AsyncCtx52 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12169
       __ZN18LoRaWANTimeHandler5startER13timer_event_tj($616, $0 + 996 | 0, 1); //@line 12170
       if (___async) {
        HEAP32[$AsyncCtx52 >> 2] = 337; //@line 12173
        HEAP32[$AsyncCtx52 + 4 >> 2] = $6; //@line 12175
        HEAP32[$AsyncCtx52 + 8 >> 2] = $5; //@line 12177
        sp = STACKTOP; //@line 12178
        STACKTOP = sp; //@line 12179
        return;
       }
       _emscripten_free_async_context($AsyncCtx52 | 0); //@line 12181
       STACKTOP = sp; //@line 12182
       return;
      }
     } else {
      $621 = $0 + 374 | 0; //@line 12186
      if ($trunc << 24 >> 24 == 5) {
       HEAP8[$621 >> 0] = 1; //@line 12188
       HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) >> 2] = 1; //@line 12190
       $623 = $0 + 960 | 0; //@line 12191
       $624 = HEAP32[$623 >> 2] | 0; //@line 12192
       $$1$off0 = ($624 | 0) != 0 & ($624 | 0) == ($$3179 | 0); //@line 12196
       $$sink = $623; //@line 12196
       break;
      }
      HEAP8[$621 >> 0] = 0; //@line 12199
      HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) >> 2] = 0; //@line 12201
      $628 = $0 + 960 | 0; //@line 12202
      $629 = HEAP32[$628 >> 2] | 0; //@line 12203
      if (($629 | 0) != ($$3179 | 0) | ($629 | 0) == 0) {
       $$1$off0 = 0; //@line 12208
       $$sink = $628; //@line 12208
      } else {
       HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 4 >> 2] = 8; //@line 12212
       HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 32 >> 2] = $$3179; //@line 12215
       _mbed_tracef(16, 13728, 13867, $vararg_buffer14); //@line 12216
       $636 = $0 + 968 | 0; //@line 12217
       HEAP32[$636 >> 2] = HEAP32[$636 >> 2] | 64; //@line 12220
       if (HEAP8[$0 + 373 >> 0] | 0) {
        $643 = HEAP32[$0 + 1328 >> 2] | 0; //@line 12226
        HEAP32[$vararg_buffer14 >> 2] = 318; //@line 12227
        HEAP32[$vararg_buffer14 + 4 >> 2] = 0; //@line 12229
        $AsyncCtx92 = _emscripten_alloc_async_context(24, sp) | 0; //@line 12230
        HEAP32[$$byval_copy198 >> 2] = HEAP32[$vararg_buffer14 >> 2]; //@line 12231
        HEAP32[$$byval_copy198 + 4 >> 2] = HEAP32[$vararg_buffer14 + 4 >> 2]; //@line 12231
        $644 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($643, $0, $$byval_copy198) | 0; //@line 12232
        if (___async) {
         HEAP32[$AsyncCtx92 >> 2] = 338; //@line 12235
         HEAP32[$AsyncCtx92 + 4 >> 2] = $vararg_buffer14; //@line 12237
         HEAP32[$AsyncCtx92 + 8 >> 2] = $0; //@line 12239
         HEAP32[$AsyncCtx92 + 12 >> 2] = $83; //@line 12241
         HEAP32[$AsyncCtx92 + 16 >> 2] = $6; //@line 12243
         HEAP32[$AsyncCtx92 + 20 >> 2] = $5; //@line 12245
         sp = STACKTOP; //@line 12246
         STACKTOP = sp; //@line 12247
         return;
        }
        _emscripten_free_async_context($AsyncCtx92 | 0); //@line 12249
        do {
         if (!$644) {
          $AsyncCtx135 = _emscripten_alloc_async_context(24, sp) | 0; //@line 12253
          _mbed_assert_internal(13612, 13621, 199); //@line 12254
          if (___async) {
           HEAP32[$AsyncCtx135 >> 2] = 339; //@line 12257
           HEAP32[$AsyncCtx135 + 4 >> 2] = $vararg_buffer14; //@line 12259
           HEAP32[$AsyncCtx135 + 8 >> 2] = $0; //@line 12261
           HEAP32[$AsyncCtx135 + 12 >> 2] = $83; //@line 12263
           HEAP32[$AsyncCtx135 + 16 >> 2] = $6; //@line 12265
           HEAP32[$AsyncCtx135 + 20 >> 2] = $5; //@line 12267
           sp = STACKTOP; //@line 12268
           STACKTOP = sp; //@line 12269
           return;
          } else {
           _emscripten_free_async_context($AsyncCtx135 | 0); //@line 12271
           break;
          }
         }
        } while (0);
       }
       $656 = $0 + 944 | 0; //@line 12277
       HEAP8[$656 >> 0] = HEAP8[$656 >> 0] | 34; //@line 12280
       $659 = HEAP32[$83 >> 2] | 0; //@line 12281
       $AsyncCtx49 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12283
       __ZN18LoRaWANTimeHandler5startER13timer_event_tj($659, $0 + 996 | 0, 1); //@line 12284
       if (___async) {
        HEAP32[$AsyncCtx49 >> 2] = 340; //@line 12287
        HEAP32[$AsyncCtx49 + 4 >> 2] = $6; //@line 12289
        HEAP32[$AsyncCtx49 + 8 >> 2] = $5; //@line 12291
        sp = STACKTOP; //@line 12292
        STACKTOP = sp; //@line 12293
        return;
       }
       _emscripten_free_async_context($AsyncCtx49 | 0); //@line 12295
       STACKTOP = sp; //@line 12296
       return;
      }
     }
    } while (0);
    HEAP32[$$sink >> 2] = $$3179; //@line 12300
    if ((HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($12) | 0) >> 2] | 0) == 1) {
     if ($399 & 32) {
      __ZN14LoRaMacCommand20clear_command_bufferEv($582); //@line 12308
     }
    } else {
     __ZN14LoRaMacCommand20clear_command_bufferEv($582); //@line 12311
    }
    do {
     if (($412 | 0) > ($410 | 0)) {
      $669 = $409 + 9 | 0; //@line 12316
      $671 = HEAP8[$1 + $410 >> 0] | 0; //@line 12318
      $672 = $412 - $669 | 0; //@line 12319
      $673 = $672 & 255; //@line 12320
      HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 9 >> 0] = $671; //@line 12323
      $677 = $408 << 24 >> 24 == 0; //@line 12325
      if (!($671 << 24 >> 24)) {
       if (!$677) {
        $$3$off0230 = 6; //@line 12328
        break;
       }
       $681 = $0 + 638 | 0; //@line 12334
       if (__Z15decrypt_payloadPKhtS0_jhjPh($1 + $669 | 0, $672 & 255, $$1173, $354, 1, $$3179, $681) | 0) {
        HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 4 >> 2] = 13; //@line 12340
       }
       $686 = $0 + 264 | 0; //@line 12342
       $687 = __ZN11LoRaMacMlme16get_confirmationEv($686) | 0; //@line 12343
       $689 = HEAP32[$0 >> 2] | 0; //@line 12345
       $AsyncCtx80 = _emscripten_alloc_async_context(48, sp) | 0; //@line 12346
       $690 = __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($582, $681, 0, $673, $4, $687, $0 + 1096 | 0, $689) | 0; //@line 12347
       if (___async) {
        HEAP32[$AsyncCtx80 >> 2] = 341; //@line 12350
        HEAP32[$AsyncCtx80 + 4 >> 2] = $12; //@line 12352
        HEAP8[$AsyncCtx80 + 8 >> 0] = $$1$off0 & 1; //@line 12355
        HEAP32[$AsyncCtx80 + 12 >> 2] = $0; //@line 12357
        HEAP32[$AsyncCtx80 + 16 >> 2] = $83; //@line 12359
        HEAP32[$AsyncCtx80 + 20 >> 2] = $6; //@line 12361
        HEAP32[$AsyncCtx80 + 24 >> 2] = $5; //@line 12363
        HEAP8[$AsyncCtx80 + 28 >> 0] = $399; //@line 12365
        HEAP32[$AsyncCtx80 + 32 >> 2] = $vararg_buffer16; //@line 12367
        HEAP32[$AsyncCtx80 + 36 >> 2] = $vararg_buffer16; //@line 12369
        HEAP32[$AsyncCtx80 + 40 >> 2] = $686; //@line 12371
        HEAP32[$AsyncCtx80 + 44 >> 2] = $582; //@line 12373
        sp = STACKTOP; //@line 12374
        STACKTOP = sp; //@line 12375
        return;
       }
       _emscripten_free_async_context($AsyncCtx80 | 0); //@line 12377
       if ($690 | 0) {
        HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 4 >> 2] = 1; //@line 12382
        if ($$1$off0) {
         $$3$off0230 = 6; //@line 12384
         break;
        } else {
         label = 141; //@line 12387
         break;
        }
       }
       if (!(__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($582) | 0)) {
        label = 140; //@line 12393
        break;
       }
       _mbed_tracef(16, 13728, 13889, $vararg_buffer16); //@line 12396
       HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($686) | 0) >> 2] = 4; //@line 12398
       $707 = $0 + 944 | 0; //@line 12399
       HEAP8[$707 >> 0] = HEAP8[$707 >> 0] | 16; //@line 12402
       __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($582); //@line 12403
       if ($$1$off0) {
        $$3$off0230 = 6; //@line 12405
        break;
       } else {
        label = 141; //@line 12408
        break;
       }
      }
      do {
       if (!$677) {
        $710 = $0 + 264 | 0; //@line 12414
        $711 = __ZN11LoRaMacMlme16get_confirmationEv($710) | 0; //@line 12415
        $713 = HEAP32[$0 >> 2] | 0; //@line 12417
        $AsyncCtx76 = _emscripten_alloc_async_context(72, sp) | 0; //@line 12418
        $714 = __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($582, $1, 8, $411, $4, $711, $0 + 1096 | 0, $713) | 0; //@line 12419
        if (___async) {
         HEAP32[$AsyncCtx76 >> 2] = 342; //@line 12422
         HEAP32[$AsyncCtx76 + 4 >> 2] = $0; //@line 12424
         HEAP32[$AsyncCtx76 + 8 >> 2] = $83; //@line 12426
         HEAP32[$AsyncCtx76 + 12 >> 2] = $6; //@line 12428
         HEAP32[$AsyncCtx76 + 16 >> 2] = $5; //@line 12430
         HEAP8[$AsyncCtx76 + 20 >> 0] = $399; //@line 12432
         HEAP32[$AsyncCtx76 + 24 >> 2] = $12; //@line 12434
         HEAP8[$AsyncCtx76 + 28 >> 0] = $$1$off0 & 1; //@line 12437
         HEAP32[$AsyncCtx76 + 32 >> 2] = $1; //@line 12439
         HEAP32[$AsyncCtx76 + 36 >> 2] = $669; //@line 12441
         HEAP32[$AsyncCtx76 + 40 >> 2] = $672; //@line 12443
         HEAP32[$AsyncCtx76 + 44 >> 2] = $$1171; //@line 12445
         HEAP32[$AsyncCtx76 + 48 >> 2] = $354; //@line 12447
         HEAP32[$AsyncCtx76 + 52 >> 2] = $$3179; //@line 12449
         HEAP32[$AsyncCtx76 + 56 >> 2] = $vararg_buffer18; //@line 12451
         HEAP32[$AsyncCtx76 + 60 >> 2] = $vararg_buffer18; //@line 12453
         HEAP32[$AsyncCtx76 + 64 >> 2] = $710; //@line 12455
         HEAP32[$AsyncCtx76 + 68 >> 2] = $582; //@line 12457
         sp = STACKTOP; //@line 12458
         STACKTOP = sp; //@line 12459
         return;
        }
        _emscripten_free_async_context($AsyncCtx76 | 0); //@line 12461
        if ($714 | 0) {
         HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 4 >> 2] = 1; //@line 12466
         break;
        }
        if (__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($582) | 0) {
         _mbed_tracef(16, 13728, 13889, $vararg_buffer18); //@line 12471
         HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($710) | 0) >> 2] = 4; //@line 12473
         $737 = $0 + 944 | 0; //@line 12474
         HEAP8[$737 >> 0] = HEAP8[$737 >> 0] | 16; //@line 12477
         __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($582); //@line 12478
        }
       }
      } while (0);
      $742 = $672 & 255; //@line 12484
      $743 = $0 + 638 | 0; //@line 12485
      if (__Z15decrypt_payloadPKhtS0_jhjPh($1 + $669 | 0, $742, $$1171, $354, 1, $$3179, $743) | 0) {
       HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 4 >> 2] = 13; //@line 12491
      }
      if ($$1$off0) {
       $$3$off0230 = 6; //@line 12494
      } else {
       HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 12 >> 2] = $743; //@line 12498
       HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 16 >> 1] = $742; //@line 12501
       HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 18 >> 0] = 1; //@line 12504
       label = 141; //@line 12505
      }
     } else {
      if (!($408 << 24 >> 24)) {
       label = 140; //@line 12510
      } else {
       $755 = $0 + 264 | 0; //@line 12512
       $756 = __ZN11LoRaMacMlme16get_confirmationEv($755) | 0; //@line 12513
       $758 = HEAP32[$0 >> 2] | 0; //@line 12515
       $AsyncCtx72 = _emscripten_alloc_async_context(48, sp) | 0; //@line 12516
       $759 = __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($582, $1, 8, $411, $4, $756, $0 + 1096 | 0, $758) | 0; //@line 12517
       if (___async) {
        HEAP32[$AsyncCtx72 >> 2] = 343; //@line 12520
        HEAP32[$AsyncCtx72 + 4 >> 2] = $0; //@line 12522
        HEAP32[$AsyncCtx72 + 8 >> 2] = $83; //@line 12524
        HEAP32[$AsyncCtx72 + 12 >> 2] = $6; //@line 12526
        HEAP32[$AsyncCtx72 + 16 >> 2] = $5; //@line 12528
        HEAP8[$AsyncCtx72 + 20 >> 0] = $$1$off0 & 1; //@line 12531
        HEAP32[$AsyncCtx72 + 24 >> 2] = $vararg_buffer20; //@line 12533
        HEAP32[$AsyncCtx72 + 28 >> 2] = $vararg_buffer20; //@line 12535
        HEAP32[$AsyncCtx72 + 32 >> 2] = $755; //@line 12537
        HEAP32[$AsyncCtx72 + 36 >> 2] = $582; //@line 12539
        HEAP8[$AsyncCtx72 + 40 >> 0] = $399; //@line 12541
        HEAP32[$AsyncCtx72 + 44 >> 2] = $12; //@line 12543
        sp = STACKTOP; //@line 12544
        STACKTOP = sp; //@line 12545
        return;
       }
       _emscripten_free_async_context($AsyncCtx72 | 0); //@line 12547
       if ($759 | 0) {
        HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 4 >> 2] = 1; //@line 12552
        if ($$1$off0) {
         $$3$off0230 = 6; //@line 12554
         break;
        } else {
         label = 141; //@line 12557
         break;
        }
       }
       if (__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($582) | 0) {
        _mbed_tracef(16, 13728, 13889, $vararg_buffer20); //@line 12563
        HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($755) | 0) >> 2] = 4; //@line 12565
        $776 = $0 + 944 | 0; //@line 12566
        HEAP8[$776 >> 0] = HEAP8[$776 >> 0] | 16; //@line 12569
        __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($582); //@line 12570
        if ($$1$off0) {
         $$3$off0230 = 6; //@line 12572
        } else {
         label = 141; //@line 12574
        }
       } else {
        label = 140; //@line 12577
       }
      }
     }
    } while (0);
    if ((label | 0) == 140) {
     if ($$1$off0) {
      $$3$off0230 = 6; //@line 12584
     } else {
      label = 141; //@line 12586
     }
    }
    do {
     if ((label | 0) == 141) {
      $782 = (__ZN11LoRaMacMcps16get_confirmationEv($12) | 0) + 10 | 0; //@line 12594
      if ($399 & 32) {
       HEAP8[$782 >> 0] = 1; //@line 12596
       HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 28 >> 0] = 1; //@line 12599
       $785 = HEAP32[$83 >> 2] | 0; //@line 12600
       $AsyncCtx120 = _emscripten_alloc_async_context(20, sp) | 0; //@line 12602
       __ZN18LoRaWANTimeHandler4stopER13timer_event_t($785, $0 + 1076 | 0); //@line 12603
       if (___async) {
        HEAP32[$AsyncCtx120 >> 2] = 344; //@line 12606
        HEAP32[$AsyncCtx120 + 4 >> 2] = $0; //@line 12608
        HEAP32[$AsyncCtx120 + 8 >> 2] = $83; //@line 12610
        HEAP32[$AsyncCtx120 + 12 >> 2] = $6; //@line 12612
        HEAP32[$AsyncCtx120 + 16 >> 2] = $5; //@line 12614
        sp = STACKTOP; //@line 12615
        STACKTOP = sp; //@line 12616
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx120 | 0); //@line 12618
        $$3$off0230 = 2; //@line 12619
        break;
       }
      }
      HEAP8[$782 >> 0] = 0; //@line 12623
      if ((HEAPU8[$0 + 895 >> 0] | 0) > (HEAPU8[$0 + 894 >> 0] | 0)) {
       $796 = HEAP32[$83 >> 2] | 0; //@line 12630
       $AsyncCtx116 = _emscripten_alloc_async_context(20, sp) | 0; //@line 12632
       __ZN18LoRaWANTimeHandler4stopER13timer_event_t($796, $0 + 1076 | 0); //@line 12633
       if (___async) {
        HEAP32[$AsyncCtx116 >> 2] = 345; //@line 12636
        HEAP32[$AsyncCtx116 + 4 >> 2] = $0; //@line 12638
        HEAP32[$AsyncCtx116 + 8 >> 2] = $83; //@line 12640
        HEAP32[$AsyncCtx116 + 12 >> 2] = $6; //@line 12642
        HEAP32[$AsyncCtx116 + 16 >> 2] = $5; //@line 12644
        sp = STACKTOP; //@line 12645
        STACKTOP = sp; //@line 12646
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx116 | 0); //@line 12648
        $$3$off0230 = 2; //@line 12649
        break;
       }
      } else {
       $$3$off0230 = 2; //@line 12653
      }
     }
    } while (0);
    $802 = $0 + 944 | 0; //@line 12657
    HEAP8[$802 >> 0] = $$3$off0230 | HEAP8[$802 >> 0] & -7; //@line 12661
    break;
   }
  case 7:
   {
    $833 = $0 + 638 | 0; //@line 12665
    _memcpy($833 | 0, $1 + 1 | 0, $7 | 0) | 0; //@line 12667
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) >> 2] = 3; //@line 12669
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 4 >> 2] = 0; //@line 12672
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 12 >> 2] = $833; //@line 12675
    HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 16 >> 1] = $7 + 65535; //@line 12680
    $844 = $0 + 944 | 0; //@line 12681
    HEAP8[$844 >> 0] = HEAP8[$844 >> 0] | 2; //@line 12684
    break;
   }
  default:
   {
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 4 >> 2] = 1; //@line 12690
    _mbed_tracef(16, 13728, 13867, $vararg_buffer24); //@line 12691
    $849 = $0 + 968 | 0; //@line 12692
    HEAP32[$849 >> 2] = HEAP32[$849 >> 2] | 64; //@line 12695
    if (HEAP8[$0 + 373 >> 0] | 0) {
     $856 = HEAP32[$0 + 1328 >> 2] | 0; //@line 12701
     HEAP32[$vararg_buffer24 >> 2] = 318; //@line 12702
     HEAP32[$vararg_buffer24 + 4 >> 2] = 0; //@line 12704
     $AsyncCtx84 = _emscripten_alloc_async_context(24, sp) | 0; //@line 12705
     HEAP32[$$byval_copy198 >> 2] = HEAP32[$vararg_buffer24 >> 2]; //@line 12706
     HEAP32[$$byval_copy198 + 4 >> 2] = HEAP32[$vararg_buffer24 + 4 >> 2]; //@line 12706
     $857 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($856, $0, $$byval_copy198) | 0; //@line 12707
     if (___async) {
      HEAP32[$AsyncCtx84 >> 2] = 349; //@line 12710
      HEAP32[$AsyncCtx84 + 4 >> 2] = $vararg_buffer24; //@line 12712
      HEAP32[$AsyncCtx84 + 8 >> 2] = $0; //@line 12714
      HEAP32[$AsyncCtx84 + 12 >> 2] = $83; //@line 12716
      HEAP32[$AsyncCtx84 + 16 >> 2] = $6; //@line 12718
      HEAP32[$AsyncCtx84 + 20 >> 2] = $5; //@line 12720
      sp = STACKTOP; //@line 12721
      STACKTOP = sp; //@line 12722
      return;
     }
     _emscripten_free_async_context($AsyncCtx84 | 0); //@line 12724
     do {
      if (!$857) {
       $AsyncCtx127 = _emscripten_alloc_async_context(24, sp) | 0; //@line 12728
       _mbed_assert_internal(13612, 13621, 199); //@line 12729
       if (___async) {
        HEAP32[$AsyncCtx127 >> 2] = 350; //@line 12732
        HEAP32[$AsyncCtx127 + 4 >> 2] = $vararg_buffer24; //@line 12734
        HEAP32[$AsyncCtx127 + 8 >> 2] = $0; //@line 12736
        HEAP32[$AsyncCtx127 + 12 >> 2] = $83; //@line 12738
        HEAP32[$AsyncCtx127 + 16 >> 2] = $6; //@line 12740
        HEAP32[$AsyncCtx127 + 20 >> 2] = $5; //@line 12742
        sp = STACKTOP; //@line 12743
        STACKTOP = sp; //@line 12744
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx127 | 0); //@line 12746
        break;
       }
      }
     } while (0);
    }
    $869 = $0 + 944 | 0; //@line 12752
    HEAP8[$869 >> 0] = HEAP8[$869 >> 0] | 34; //@line 12755
    $872 = HEAP32[$83 >> 2] | 0; //@line 12756
    $AsyncCtx43 = _emscripten_alloc_async_context(20, sp) | 0; //@line 12758
    __ZN18LoRaWANTimeHandler5startER13timer_event_tj($872, $0 + 996 | 0, 1); //@line 12759
    if (___async) {
     HEAP32[$AsyncCtx43 >> 2] = 351; //@line 12762
     HEAP32[$AsyncCtx43 + 4 >> 2] = $0; //@line 12764
     HEAP32[$AsyncCtx43 + 8 >> 2] = $83; //@line 12766
     HEAP32[$AsyncCtx43 + 12 >> 2] = $6; //@line 12768
     HEAP32[$AsyncCtx43 + 16 >> 2] = $5; //@line 12770
     sp = STACKTOP; //@line 12771
     STACKTOP = sp; //@line 12772
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx43 | 0); //@line 12774
     break L7;
    }
   }
  }
 } while (0);
 $878 = $0 + 944 | 0; //@line 12780
 HEAP8[$878 >> 0] = HEAP8[$878 >> 0] | 32; //@line 12783
 $881 = HEAP32[$83 >> 2] | 0; //@line 12784
 $AsyncCtx40 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12786
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($881, $0 + 996 | 0, 1); //@line 12787
 if (___async) {
  HEAP32[$AsyncCtx40 >> 2] = 352; //@line 12790
  HEAP32[$AsyncCtx40 + 4 >> 2] = $6; //@line 12792
  HEAP32[$AsyncCtx40 + 8 >> 2] = $5; //@line 12794
  sp = STACKTOP; //@line 12795
  STACKTOP = sp; //@line 12796
  return;
 }
 _emscripten_free_async_context($AsyncCtx40 | 0); //@line 12798
 STACKTOP = sp; //@line 12799
 return;
}
function _malloc($0) {
 $0 = $0 | 0;
 var $$$0192$i = 0, $$$0193$i = 0, $$$4351$i = 0, $$$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i17$i = 0, $$0189$i = 0, $$0192$lcssa$i = 0, $$01926$i = 0, $$0193$lcssa$i = 0, $$01935$i = 0, $$0197 = 0, $$0199 = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$0211$i$i = 0, $$0212$i$i = 0, $$024367$i = 0, $$0287$i$i = 0, $$0288$i$i = 0, $$0289$i$i = 0, $$0295$i$i = 0, $$0296$i$i = 0, $$0342$i = 0, $$0344$i = 0, $$0345$i = 0, $$0347$i = 0, $$0353$i = 0, $$0358$i = 0, $$0359$i = 0, $$0361$i = 0, $$0362$i = 0, $$0368$i = 0, $$1196$i = 0, $$1198$i = 0, $$124466$i = 0, $$1291$i$i = 0, $$1293$i$i = 0, $$1343$i = 0, $$1348$i = 0, $$1363$i = 0, $$1370$i = 0, $$1374$i = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2355$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i203 = 0, $$3350$i = 0, $$3372$i = 0, $$4$lcssa$i = 0, $$4$ph$i = 0, $$414$i = 0, $$4236$i = 0, $$4351$lcssa$i = 0, $$435113$i = 0, $$4357$$4$i = 0, $$4357$ph$i = 0, $$435712$i = 0, $$723947$i = 0, $$748$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i19$iZ2D = 0, $$pre$phi$i211Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi11$i$iZ2D = 0, $$pre$phiZ2D = 0, $1 = 0, $1004 = 0, $101 = 0, $1010 = 0, $1013 = 0, $1014 = 0, $102 = 0, $1032 = 0, $1034 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1052 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $108 = 0, $112 = 0, $114 = 0, $115 = 0, $117 = 0, $119 = 0, $121 = 0, $123 = 0, $125 = 0, $127 = 0, $129 = 0, $134 = 0, $138 = 0, $14 = 0, $143 = 0, $146 = 0, $149 = 0, $150 = 0, $157 = 0, $159 = 0, $16 = 0, $162 = 0, $164 = 0, $167 = 0, $169 = 0, $17 = 0, $172 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $18 = 0, $181 = 0, $182 = 0, $184 = 0, $185 = 0, $19 = 0, $190 = 0, $191 = 0, $20 = 0, $204 = 0, $208 = 0, $214 = 0, $221 = 0, $225 = 0, $234 = 0, $235 = 0, $237 = 0, $238 = 0, $242 = 0, $243 = 0, $251 = 0, $252 = 0, $253 = 0, $255 = 0, $256 = 0, $261 = 0, $262 = 0, $265 = 0, $267 = 0, $27 = 0, $270 = 0, $275 = 0, $282 = 0, $292 = 0, $296 = 0, $30 = 0, $302 = 0, $306 = 0, $309 = 0, $313 = 0, $315 = 0, $316 = 0, $318 = 0, $320 = 0, $322 = 0, $324 = 0, $326 = 0, $328 = 0, $330 = 0, $34 = 0, $340 = 0, $341 = 0, $352 = 0, $354 = 0, $357 = 0, $359 = 0, $362 = 0, $364 = 0, $367 = 0, $37 = 0, $370 = 0, $371 = 0, $373 = 0, $374 = 0, $376 = 0, $377 = 0, $379 = 0, $380 = 0, $385 = 0, $386 = 0, $391 = 0, $399 = 0, $403 = 0, $409 = 0, $41 = 0, $416 = 0, $420 = 0, $428 = 0, $431 = 0, $432 = 0, $433 = 0, $437 = 0, $438 = 0, $44 = 0, $444 = 0, $449 = 0, $450 = 0, $453 = 0, $455 = 0, $458 = 0, $463 = 0, $469 = 0, $47 = 0, $471 = 0, $473 = 0, $475 = 0, $49 = 0, $492 = 0, $494 = 0, $50 = 0, $501 = 0, $502 = 0, $503 = 0, $512 = 0, $514 = 0, $515 = 0, $517 = 0, $52 = 0, $526 = 0, $530 = 0, $532 = 0, $533 = 0, $534 = 0, $54 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $552 = 0, $554 = 0, $555 = 0, $56 = 0, $561 = 0, $563 = 0, $565 = 0, $570 = 0, $572 = 0, $574 = 0, $575 = 0, $576 = 0, $58 = 0, $584 = 0, $585 = 0, $588 = 0, $592 = 0, $595 = 0, $597 = 0, $6 = 0, $60 = 0, $603 = 0, $607 = 0, $611 = 0, $62 = 0, $620 = 0, $621 = 0, $627 = 0, $629 = 0, $633 = 0, $636 = 0, $638 = 0, $64 = 0, $642 = 0, $644 = 0, $649 = 0, $650 = 0, $651 = 0, $657 = 0, $658 = 0, $659 = 0, $663 = 0, $67 = 0, $673 = 0, $675 = 0, $680 = 0, $681 = 0, $682 = 0, $688 = 0, $69 = 0, $690 = 0, $694 = 0, $7 = 0, $70 = 0, $700 = 0, $704 = 0, $71 = 0, $710 = 0, $712 = 0, $718 = 0, $72 = 0, $722 = 0, $723 = 0, $728 = 0, $73 = 0, $734 = 0, $739 = 0, $742 = 0, $743 = 0, $746 = 0, $748 = 0, $750 = 0, $753 = 0, $764 = 0, $769 = 0, $77 = 0, $771 = 0, $774 = 0, $776 = 0, $779 = 0, $782 = 0, $783 = 0, $784 = 0, $786 = 0, $788 = 0, $789 = 0, $791 = 0, $792 = 0, $797 = 0, $798 = 0, $8 = 0, $80 = 0, $812 = 0, $815 = 0, $816 = 0, $822 = 0, $83 = 0, $830 = 0, $836 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $845 = 0, $846 = 0, $852 = 0, $857 = 0, $858 = 0, $861 = 0, $863 = 0, $866 = 0, $87 = 0, $871 = 0, $877 = 0, $879 = 0, $881 = 0, $882 = 0, $9 = 0, $900 = 0, $902 = 0, $909 = 0, $910 = 0, $911 = 0, $919 = 0, $92 = 0, $923 = 0, $927 = 0, $929 = 0, $93 = 0, $935 = 0, $936 = 0, $938 = 0, $939 = 0, $940 = 0, $941 = 0, $943 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $956 = 0, $958 = 0, $96 = 0, $964 = 0, $969 = 0, $972 = 0, $973 = 0, $974 = 0, $978 = 0, $979 = 0, $98 = 0, $985 = 0, $990 = 0, $991 = 0, $994 = 0, $996 = 0, $999 = 0, label = 0, sp = 0, $958$looptemp = 0;
 sp = STACKTOP; //@line 7729
 STACKTOP = STACKTOP + 16 | 0; //@line 7730
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 7730
 $1 = sp; //@line 7731
 do {
  if ($0 >>> 0 < 245) {
   $6 = $0 >>> 0 < 11 ? 16 : $0 + 11 & -8; //@line 7738
   $7 = $6 >>> 3; //@line 7739
   $8 = HEAP32[5971] | 0; //@line 7740
   $9 = $8 >>> $7; //@line 7741
   if ($9 & 3 | 0) {
    $14 = ($9 & 1 ^ 1) + $7 | 0; //@line 7747
    $16 = 23924 + ($14 << 1 << 2) | 0; //@line 7749
    $17 = $16 + 8 | 0; //@line 7750
    $18 = HEAP32[$17 >> 2] | 0; //@line 7751
    $19 = $18 + 8 | 0; //@line 7752
    $20 = HEAP32[$19 >> 2] | 0; //@line 7753
    do {
     if (($20 | 0) == ($16 | 0)) {
      HEAP32[5971] = $8 & ~(1 << $14); //@line 7760
     } else {
      if ((HEAP32[5975] | 0) >>> 0 > $20 >>> 0) {
       _abort(); //@line 7765
      }
      $27 = $20 + 12 | 0; //@line 7768
      if ((HEAP32[$27 >> 2] | 0) == ($18 | 0)) {
       HEAP32[$27 >> 2] = $16; //@line 7772
       HEAP32[$17 >> 2] = $20; //@line 7773
       break;
      } else {
       _abort(); //@line 7776
      }
     }
    } while (0);
    $30 = $14 << 3; //@line 7781
    HEAP32[$18 + 4 >> 2] = $30 | 3; //@line 7784
    $34 = $18 + $30 + 4 | 0; //@line 7786
    HEAP32[$34 >> 2] = HEAP32[$34 >> 2] | 1; //@line 7789
    $$0 = $19; //@line 7790
    STACKTOP = sp; //@line 7791
    return $$0 | 0; //@line 7791
   }
   $37 = HEAP32[5973] | 0; //@line 7793
   if ($6 >>> 0 > $37 >>> 0) {
    if ($9 | 0) {
     $41 = 2 << $7; //@line 7799
     $44 = $9 << $7 & ($41 | 0 - $41); //@line 7802
     $47 = ($44 & 0 - $44) + -1 | 0; //@line 7805
     $49 = $47 >>> 12 & 16; //@line 7807
     $50 = $47 >>> $49; //@line 7808
     $52 = $50 >>> 5 & 8; //@line 7810
     $54 = $50 >>> $52; //@line 7812
     $56 = $54 >>> 2 & 4; //@line 7814
     $58 = $54 >>> $56; //@line 7816
     $60 = $58 >>> 1 & 2; //@line 7818
     $62 = $58 >>> $60; //@line 7820
     $64 = $62 >>> 1 & 1; //@line 7822
     $67 = ($52 | $49 | $56 | $60 | $64) + ($62 >>> $64) | 0; //@line 7825
     $69 = 23924 + ($67 << 1 << 2) | 0; //@line 7827
     $70 = $69 + 8 | 0; //@line 7828
     $71 = HEAP32[$70 >> 2] | 0; //@line 7829
     $72 = $71 + 8 | 0; //@line 7830
     $73 = HEAP32[$72 >> 2] | 0; //@line 7831
     do {
      if (($73 | 0) == ($69 | 0)) {
       $77 = $8 & ~(1 << $67); //@line 7837
       HEAP32[5971] = $77; //@line 7838
       $98 = $77; //@line 7839
      } else {
       if ((HEAP32[5975] | 0) >>> 0 > $73 >>> 0) {
        _abort(); //@line 7844
       }
       $80 = $73 + 12 | 0; //@line 7847
       if ((HEAP32[$80 >> 2] | 0) == ($71 | 0)) {
        HEAP32[$80 >> 2] = $69; //@line 7851
        HEAP32[$70 >> 2] = $73; //@line 7852
        $98 = $8; //@line 7853
        break;
       } else {
        _abort(); //@line 7856
       }
      }
     } while (0);
     $83 = $67 << 3; //@line 7861
     $84 = $83 - $6 | 0; //@line 7862
     HEAP32[$71 + 4 >> 2] = $6 | 3; //@line 7865
     $87 = $71 + $6 | 0; //@line 7866
     HEAP32[$87 + 4 >> 2] = $84 | 1; //@line 7869
     HEAP32[$71 + $83 >> 2] = $84; //@line 7871
     if ($37 | 0) {
      $92 = HEAP32[5976] | 0; //@line 7874
      $93 = $37 >>> 3; //@line 7875
      $95 = 23924 + ($93 << 1 << 2) | 0; //@line 7877
      $96 = 1 << $93; //@line 7878
      if (!($98 & $96)) {
       HEAP32[5971] = $98 | $96; //@line 7883
       $$0199 = $95; //@line 7885
       $$pre$phiZ2D = $95 + 8 | 0; //@line 7885
      } else {
       $101 = $95 + 8 | 0; //@line 7887
       $102 = HEAP32[$101 >> 2] | 0; //@line 7888
       if ((HEAP32[5975] | 0) >>> 0 > $102 >>> 0) {
        _abort(); //@line 7892
       } else {
        $$0199 = $102; //@line 7895
        $$pre$phiZ2D = $101; //@line 7895
       }
      }
      HEAP32[$$pre$phiZ2D >> 2] = $92; //@line 7898
      HEAP32[$$0199 + 12 >> 2] = $92; //@line 7900
      HEAP32[$92 + 8 >> 2] = $$0199; //@line 7902
      HEAP32[$92 + 12 >> 2] = $95; //@line 7904
     }
     HEAP32[5973] = $84; //@line 7906
     HEAP32[5976] = $87; //@line 7907
     $$0 = $72; //@line 7908
     STACKTOP = sp; //@line 7909
     return $$0 | 0; //@line 7909
    }
    $108 = HEAP32[5972] | 0; //@line 7911
    if (!$108) {
     $$0197 = $6; //@line 7914
    } else {
     $112 = ($108 & 0 - $108) + -1 | 0; //@line 7918
     $114 = $112 >>> 12 & 16; //@line 7920
     $115 = $112 >>> $114; //@line 7921
     $117 = $115 >>> 5 & 8; //@line 7923
     $119 = $115 >>> $117; //@line 7925
     $121 = $119 >>> 2 & 4; //@line 7927
     $123 = $119 >>> $121; //@line 7929
     $125 = $123 >>> 1 & 2; //@line 7931
     $127 = $123 >>> $125; //@line 7933
     $129 = $127 >>> 1 & 1; //@line 7935
     $134 = HEAP32[24188 + (($117 | $114 | $121 | $125 | $129) + ($127 >>> $129) << 2) >> 2] | 0; //@line 7940
     $138 = (HEAP32[$134 + 4 >> 2] & -8) - $6 | 0; //@line 7944
     $143 = HEAP32[$134 + 16 + (((HEAP32[$134 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 7950
     if (!$143) {
      $$0192$lcssa$i = $134; //@line 7953
      $$0193$lcssa$i = $138; //@line 7953
     } else {
      $$01926$i = $134; //@line 7955
      $$01935$i = $138; //@line 7955
      $146 = $143; //@line 7955
      while (1) {
       $149 = (HEAP32[$146 + 4 >> 2] & -8) - $6 | 0; //@line 7960
       $150 = $149 >>> 0 < $$01935$i >>> 0; //@line 7961
       $$$0193$i = $150 ? $149 : $$01935$i; //@line 7962
       $$$0192$i = $150 ? $146 : $$01926$i; //@line 7963
       $146 = HEAP32[$146 + 16 + (((HEAP32[$146 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 7969
       if (!$146) {
        $$0192$lcssa$i = $$$0192$i; //@line 7972
        $$0193$lcssa$i = $$$0193$i; //@line 7972
        break;
       } else {
        $$01926$i = $$$0192$i; //@line 7975
        $$01935$i = $$$0193$i; //@line 7975
       }
      }
     }
     $157 = HEAP32[5975] | 0; //@line 7979
     if ($157 >>> 0 > $$0192$lcssa$i >>> 0) {
      _abort(); //@line 7982
     }
     $159 = $$0192$lcssa$i + $6 | 0; //@line 7985
     if ($159 >>> 0 <= $$0192$lcssa$i >>> 0) {
      _abort(); //@line 7988
     }
     $162 = HEAP32[$$0192$lcssa$i + 24 >> 2] | 0; //@line 7992
     $164 = HEAP32[$$0192$lcssa$i + 12 >> 2] | 0; //@line 7994
     do {
      if (($164 | 0) == ($$0192$lcssa$i | 0)) {
       $175 = $$0192$lcssa$i + 20 | 0; //@line 7998
       $176 = HEAP32[$175 >> 2] | 0; //@line 7999
       if (!$176) {
        $178 = $$0192$lcssa$i + 16 | 0; //@line 8002
        $179 = HEAP32[$178 >> 2] | 0; //@line 8003
        if (!$179) {
         $$3$i = 0; //@line 8006
         break;
        } else {
         $$1196$i = $179; //@line 8009
         $$1198$i = $178; //@line 8009
        }
       } else {
        $$1196$i = $176; //@line 8012
        $$1198$i = $175; //@line 8012
       }
       while (1) {
        $181 = $$1196$i + 20 | 0; //@line 8015
        $182 = HEAP32[$181 >> 2] | 0; //@line 8016
        if ($182 | 0) {
         $$1196$i = $182; //@line 8019
         $$1198$i = $181; //@line 8019
         continue;
        }
        $184 = $$1196$i + 16 | 0; //@line 8022
        $185 = HEAP32[$184 >> 2] | 0; //@line 8023
        if (!$185) {
         break;
        } else {
         $$1196$i = $185; //@line 8028
         $$1198$i = $184; //@line 8028
        }
       }
       if ($157 >>> 0 > $$1198$i >>> 0) {
        _abort(); //@line 8033
       } else {
        HEAP32[$$1198$i >> 2] = 0; //@line 8036
        $$3$i = $$1196$i; //@line 8037
        break;
       }
      } else {
       $167 = HEAP32[$$0192$lcssa$i + 8 >> 2] | 0; //@line 8042
       if ($157 >>> 0 > $167 >>> 0) {
        _abort(); //@line 8045
       }
       $169 = $167 + 12 | 0; //@line 8048
       if ((HEAP32[$169 >> 2] | 0) != ($$0192$lcssa$i | 0)) {
        _abort(); //@line 8052
       }
       $172 = $164 + 8 | 0; //@line 8055
       if ((HEAP32[$172 >> 2] | 0) == ($$0192$lcssa$i | 0)) {
        HEAP32[$169 >> 2] = $164; //@line 8059
        HEAP32[$172 >> 2] = $167; //@line 8060
        $$3$i = $164; //@line 8061
        break;
       } else {
        _abort(); //@line 8064
       }
      }
     } while (0);
     L73 : do {
      if ($162 | 0) {
       $190 = HEAP32[$$0192$lcssa$i + 28 >> 2] | 0; //@line 8073
       $191 = 24188 + ($190 << 2) | 0; //@line 8074
       do {
        if (($$0192$lcssa$i | 0) == (HEAP32[$191 >> 2] | 0)) {
         HEAP32[$191 >> 2] = $$3$i; //@line 8079
         if (!$$3$i) {
          HEAP32[5972] = $108 & ~(1 << $190); //@line 8085
          break L73;
         }
        } else {
         if ((HEAP32[5975] | 0) >>> 0 > $162 >>> 0) {
          _abort(); //@line 8092
         } else {
          HEAP32[$162 + 16 + (((HEAP32[$162 + 16 >> 2] | 0) != ($$0192$lcssa$i | 0) & 1) << 2) >> 2] = $$3$i; //@line 8100
          if (!$$3$i) {
           break L73;
          } else {
           break;
          }
         }
        }
       } while (0);
       $204 = HEAP32[5975] | 0; //@line 8110
       if ($204 >>> 0 > $$3$i >>> 0) {
        _abort(); //@line 8113
       }
       HEAP32[$$3$i + 24 >> 2] = $162; //@line 8117
       $208 = HEAP32[$$0192$lcssa$i + 16 >> 2] | 0; //@line 8119
       do {
        if ($208 | 0) {
         if ($204 >>> 0 > $208 >>> 0) {
          _abort(); //@line 8125
         } else {
          HEAP32[$$3$i + 16 >> 2] = $208; //@line 8129
          HEAP32[$208 + 24 >> 2] = $$3$i; //@line 8131
          break;
         }
        }
       } while (0);
       $214 = HEAP32[$$0192$lcssa$i + 20 >> 2] | 0; //@line 8137
       if ($214 | 0) {
        if ((HEAP32[5975] | 0) >>> 0 > $214 >>> 0) {
         _abort(); //@line 8143
        } else {
         HEAP32[$$3$i + 20 >> 2] = $214; //@line 8147
         HEAP32[$214 + 24 >> 2] = $$3$i; //@line 8149
         break;
        }
       }
      }
     } while (0);
     if ($$0193$lcssa$i >>> 0 < 16) {
      $221 = $$0193$lcssa$i + $6 | 0; //@line 8157
      HEAP32[$$0192$lcssa$i + 4 >> 2] = $221 | 3; //@line 8160
      $225 = $$0192$lcssa$i + $221 + 4 | 0; //@line 8162
      HEAP32[$225 >> 2] = HEAP32[$225 >> 2] | 1; //@line 8165
     } else {
      HEAP32[$$0192$lcssa$i + 4 >> 2] = $6 | 3; //@line 8169
      HEAP32[$159 + 4 >> 2] = $$0193$lcssa$i | 1; //@line 8172
      HEAP32[$159 + $$0193$lcssa$i >> 2] = $$0193$lcssa$i; //@line 8174
      if ($37 | 0) {
       $234 = HEAP32[5976] | 0; //@line 8177
       $235 = $37 >>> 3; //@line 8178
       $237 = 23924 + ($235 << 1 << 2) | 0; //@line 8180
       $238 = 1 << $235; //@line 8181
       if (!($8 & $238)) {
        HEAP32[5971] = $8 | $238; //@line 8186
        $$0189$i = $237; //@line 8188
        $$pre$phi$iZ2D = $237 + 8 | 0; //@line 8188
       } else {
        $242 = $237 + 8 | 0; //@line 8190
        $243 = HEAP32[$242 >> 2] | 0; //@line 8191
        if ((HEAP32[5975] | 0) >>> 0 > $243 >>> 0) {
         _abort(); //@line 8195
        } else {
         $$0189$i = $243; //@line 8198
         $$pre$phi$iZ2D = $242; //@line 8198
        }
       }
       HEAP32[$$pre$phi$iZ2D >> 2] = $234; //@line 8201
       HEAP32[$$0189$i + 12 >> 2] = $234; //@line 8203
       HEAP32[$234 + 8 >> 2] = $$0189$i; //@line 8205
       HEAP32[$234 + 12 >> 2] = $237; //@line 8207
      }
      HEAP32[5973] = $$0193$lcssa$i; //@line 8209
      HEAP32[5976] = $159; //@line 8210
     }
     $$0 = $$0192$lcssa$i + 8 | 0; //@line 8213
     STACKTOP = sp; //@line 8214
     return $$0 | 0; //@line 8214
    }
   } else {
    $$0197 = $6; //@line 8217
   }
  } else {
   if ($0 >>> 0 > 4294967231) {
    $$0197 = -1; //@line 8222
   } else {
    $251 = $0 + 11 | 0; //@line 8224
    $252 = $251 & -8; //@line 8225
    $253 = HEAP32[5972] | 0; //@line 8226
    if (!$253) {
     $$0197 = $252; //@line 8229
    } else {
     $255 = 0 - $252 | 0; //@line 8231
     $256 = $251 >>> 8; //@line 8232
     if (!$256) {
      $$0358$i = 0; //@line 8235
     } else {
      if ($252 >>> 0 > 16777215) {
       $$0358$i = 31; //@line 8239
      } else {
       $261 = ($256 + 1048320 | 0) >>> 16 & 8; //@line 8243
       $262 = $256 << $261; //@line 8244
       $265 = ($262 + 520192 | 0) >>> 16 & 4; //@line 8247
       $267 = $262 << $265; //@line 8249
       $270 = ($267 + 245760 | 0) >>> 16 & 2; //@line 8252
       $275 = 14 - ($265 | $261 | $270) + ($267 << $270 >>> 15) | 0; //@line 8257
       $$0358$i = $252 >>> ($275 + 7 | 0) & 1 | $275 << 1; //@line 8263
      }
     }
     $282 = HEAP32[24188 + ($$0358$i << 2) >> 2] | 0; //@line 8267
     L117 : do {
      if (!$282) {
       $$2355$i = 0; //@line 8271
       $$3$i203 = 0; //@line 8271
       $$3350$i = $255; //@line 8271
       label = 81; //@line 8272
      } else {
       $$0342$i = 0; //@line 8279
       $$0347$i = $255; //@line 8279
       $$0353$i = $282; //@line 8279
       $$0359$i = $252 << (($$0358$i | 0) == 31 ? 0 : 25 - ($$0358$i >>> 1) | 0); //@line 8279
       $$0362$i = 0; //@line 8279
       while (1) {
        $292 = (HEAP32[$$0353$i + 4 >> 2] & -8) - $252 | 0; //@line 8284
        if ($292 >>> 0 < $$0347$i >>> 0) {
         if (!$292) {
          $$414$i = $$0353$i; //@line 8289
          $$435113$i = 0; //@line 8289
          $$435712$i = $$0353$i; //@line 8289
          label = 85; //@line 8290
          break L117;
         } else {
          $$1343$i = $$0353$i; //@line 8293
          $$1348$i = $292; //@line 8293
         }
        } else {
         $$1343$i = $$0342$i; //@line 8296
         $$1348$i = $$0347$i; //@line 8296
        }
        $296 = HEAP32[$$0353$i + 20 >> 2] | 0; //@line 8299
        $$0353$i = HEAP32[$$0353$i + 16 + ($$0359$i >>> 31 << 2) >> 2] | 0; //@line 8302
        $$1363$i = ($296 | 0) == 0 | ($296 | 0) == ($$0353$i | 0) ? $$0362$i : $296; //@line 8306
        $302 = ($$0353$i | 0) == 0; //@line 8307
        if ($302) {
         $$2355$i = $$1363$i; //@line 8312
         $$3$i203 = $$1343$i; //@line 8312
         $$3350$i = $$1348$i; //@line 8312
         label = 81; //@line 8313
         break;
        } else {
         $$0342$i = $$1343$i; //@line 8316
         $$0347$i = $$1348$i; //@line 8316
         $$0359$i = $$0359$i << (($302 ^ 1) & 1); //@line 8316
         $$0362$i = $$1363$i; //@line 8316
        }
       }
      }
     } while (0);
     if ((label | 0) == 81) {
      if (($$2355$i | 0) == 0 & ($$3$i203 | 0) == 0) {
       $306 = 2 << $$0358$i; //@line 8326
       $309 = $253 & ($306 | 0 - $306); //@line 8329
       if (!$309) {
        $$0197 = $252; //@line 8332
        break;
       }
       $313 = ($309 & 0 - $309) + -1 | 0; //@line 8337
       $315 = $313 >>> 12 & 16; //@line 8339
       $316 = $313 >>> $315; //@line 8340
       $318 = $316 >>> 5 & 8; //@line 8342
       $320 = $316 >>> $318; //@line 8344
       $322 = $320 >>> 2 & 4; //@line 8346
       $324 = $320 >>> $322; //@line 8348
       $326 = $324 >>> 1 & 2; //@line 8350
       $328 = $324 >>> $326; //@line 8352
       $330 = $328 >>> 1 & 1; //@line 8354
       $$4$ph$i = 0; //@line 8360
       $$4357$ph$i = HEAP32[24188 + (($318 | $315 | $322 | $326 | $330) + ($328 >>> $330) << 2) >> 2] | 0; //@line 8360
      } else {
       $$4$ph$i = $$3$i203; //@line 8362
       $$4357$ph$i = $$2355$i; //@line 8362
      }
      if (!$$4357$ph$i) {
       $$4$lcssa$i = $$4$ph$i; //@line 8366
       $$4351$lcssa$i = $$3350$i; //@line 8366
      } else {
       $$414$i = $$4$ph$i; //@line 8368
       $$435113$i = $$3350$i; //@line 8368
       $$435712$i = $$4357$ph$i; //@line 8368
       label = 85; //@line 8369
      }
     }
     if ((label | 0) == 85) {
      while (1) {
       label = 0; //@line 8374
       $340 = (HEAP32[$$435712$i + 4 >> 2] & -8) - $252 | 0; //@line 8378
       $341 = $340 >>> 0 < $$435113$i >>> 0; //@line 8379
       $$$4351$i = $341 ? $340 : $$435113$i; //@line 8380
       $$4357$$4$i = $341 ? $$435712$i : $$414$i; //@line 8381
       $$435712$i = HEAP32[$$435712$i + 16 + (((HEAP32[$$435712$i + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 8387
       if (!$$435712$i) {
        $$4$lcssa$i = $$4357$$4$i; //@line 8390
        $$4351$lcssa$i = $$$4351$i; //@line 8390
        break;
       } else {
        $$414$i = $$4357$$4$i; //@line 8393
        $$435113$i = $$$4351$i; //@line 8393
        label = 85; //@line 8394
       }
      }
     }
     if (!$$4$lcssa$i) {
      $$0197 = $252; //@line 8400
     } else {
      if ($$4351$lcssa$i >>> 0 < ((HEAP32[5973] | 0) - $252 | 0) >>> 0) {
       $352 = HEAP32[5975] | 0; //@line 8406
       if ($352 >>> 0 > $$4$lcssa$i >>> 0) {
        _abort(); //@line 8409
       }
       $354 = $$4$lcssa$i + $252 | 0; //@line 8412
       if ($354 >>> 0 <= $$4$lcssa$i >>> 0) {
        _abort(); //@line 8415
       }
       $357 = HEAP32[$$4$lcssa$i + 24 >> 2] | 0; //@line 8419
       $359 = HEAP32[$$4$lcssa$i + 12 >> 2] | 0; //@line 8421
       do {
        if (($359 | 0) == ($$4$lcssa$i | 0)) {
         $370 = $$4$lcssa$i + 20 | 0; //@line 8425
         $371 = HEAP32[$370 >> 2] | 0; //@line 8426
         if (!$371) {
          $373 = $$4$lcssa$i + 16 | 0; //@line 8429
          $374 = HEAP32[$373 >> 2] | 0; //@line 8430
          if (!$374) {
           $$3372$i = 0; //@line 8433
           break;
          } else {
           $$1370$i = $374; //@line 8436
           $$1374$i = $373; //@line 8436
          }
         } else {
          $$1370$i = $371; //@line 8439
          $$1374$i = $370; //@line 8439
         }
         while (1) {
          $376 = $$1370$i + 20 | 0; //@line 8442
          $377 = HEAP32[$376 >> 2] | 0; //@line 8443
          if ($377 | 0) {
           $$1370$i = $377; //@line 8446
           $$1374$i = $376; //@line 8446
           continue;
          }
          $379 = $$1370$i + 16 | 0; //@line 8449
          $380 = HEAP32[$379 >> 2] | 0; //@line 8450
          if (!$380) {
           break;
          } else {
           $$1370$i = $380; //@line 8455
           $$1374$i = $379; //@line 8455
          }
         }
         if ($352 >>> 0 > $$1374$i >>> 0) {
          _abort(); //@line 8460
         } else {
          HEAP32[$$1374$i >> 2] = 0; //@line 8463
          $$3372$i = $$1370$i; //@line 8464
          break;
         }
        } else {
         $362 = HEAP32[$$4$lcssa$i + 8 >> 2] | 0; //@line 8469
         if ($352 >>> 0 > $362 >>> 0) {
          _abort(); //@line 8472
         }
         $364 = $362 + 12 | 0; //@line 8475
         if ((HEAP32[$364 >> 2] | 0) != ($$4$lcssa$i | 0)) {
          _abort(); //@line 8479
         }
         $367 = $359 + 8 | 0; //@line 8482
         if ((HEAP32[$367 >> 2] | 0) == ($$4$lcssa$i | 0)) {
          HEAP32[$364 >> 2] = $359; //@line 8486
          HEAP32[$367 >> 2] = $362; //@line 8487
          $$3372$i = $359; //@line 8488
          break;
         } else {
          _abort(); //@line 8491
         }
        }
       } while (0);
       L164 : do {
        if (!$357) {
         $475 = $253; //@line 8499
        } else {
         $385 = HEAP32[$$4$lcssa$i + 28 >> 2] | 0; //@line 8502
         $386 = 24188 + ($385 << 2) | 0; //@line 8503
         do {
          if (($$4$lcssa$i | 0) == (HEAP32[$386 >> 2] | 0)) {
           HEAP32[$386 >> 2] = $$3372$i; //@line 8508
           if (!$$3372$i) {
            $391 = $253 & ~(1 << $385); //@line 8513
            HEAP32[5972] = $391; //@line 8514
            $475 = $391; //@line 8515
            break L164;
           }
          } else {
           if ((HEAP32[5975] | 0) >>> 0 > $357 >>> 0) {
            _abort(); //@line 8522
           } else {
            HEAP32[$357 + 16 + (((HEAP32[$357 + 16 >> 2] | 0) != ($$4$lcssa$i | 0) & 1) << 2) >> 2] = $$3372$i; //@line 8530
            if (!$$3372$i) {
             $475 = $253; //@line 8533
             break L164;
            } else {
             break;
            }
           }
          }
         } while (0);
         $399 = HEAP32[5975] | 0; //@line 8541
         if ($399 >>> 0 > $$3372$i >>> 0) {
          _abort(); //@line 8544
         }
         HEAP32[$$3372$i + 24 >> 2] = $357; //@line 8548
         $403 = HEAP32[$$4$lcssa$i + 16 >> 2] | 0; //@line 8550
         do {
          if ($403 | 0) {
           if ($399 >>> 0 > $403 >>> 0) {
            _abort(); //@line 8556
           } else {
            HEAP32[$$3372$i + 16 >> 2] = $403; //@line 8560
            HEAP32[$403 + 24 >> 2] = $$3372$i; //@line 8562
            break;
           }
          }
         } while (0);
         $409 = HEAP32[$$4$lcssa$i + 20 >> 2] | 0; //@line 8568
         if (!$409) {
          $475 = $253; //@line 8571
         } else {
          if ((HEAP32[5975] | 0) >>> 0 > $409 >>> 0) {
           _abort(); //@line 8576
          } else {
           HEAP32[$$3372$i + 20 >> 2] = $409; //@line 8580
           HEAP32[$409 + 24 >> 2] = $$3372$i; //@line 8582
           $475 = $253; //@line 8583
           break;
          }
         }
        }
       } while (0);
       do {
        if ($$4351$lcssa$i >>> 0 < 16) {
         $416 = $$4351$lcssa$i + $252 | 0; //@line 8592
         HEAP32[$$4$lcssa$i + 4 >> 2] = $416 | 3; //@line 8595
         $420 = $$4$lcssa$i + $416 + 4 | 0; //@line 8597
         HEAP32[$420 >> 2] = HEAP32[$420 >> 2] | 1; //@line 8600
        } else {
         HEAP32[$$4$lcssa$i + 4 >> 2] = $252 | 3; //@line 8604
         HEAP32[$354 + 4 >> 2] = $$4351$lcssa$i | 1; //@line 8607
         HEAP32[$354 + $$4351$lcssa$i >> 2] = $$4351$lcssa$i; //@line 8609
         $428 = $$4351$lcssa$i >>> 3; //@line 8610
         if ($$4351$lcssa$i >>> 0 < 256) {
          $431 = 23924 + ($428 << 1 << 2) | 0; //@line 8614
          $432 = HEAP32[5971] | 0; //@line 8615
          $433 = 1 << $428; //@line 8616
          if (!($432 & $433)) {
           HEAP32[5971] = $432 | $433; //@line 8621
           $$0368$i = $431; //@line 8623
           $$pre$phi$i211Z2D = $431 + 8 | 0; //@line 8623
          } else {
           $437 = $431 + 8 | 0; //@line 8625
           $438 = HEAP32[$437 >> 2] | 0; //@line 8626
           if ((HEAP32[5975] | 0) >>> 0 > $438 >>> 0) {
            _abort(); //@line 8630
           } else {
            $$0368$i = $438; //@line 8633
            $$pre$phi$i211Z2D = $437; //@line 8633
           }
          }
          HEAP32[$$pre$phi$i211Z2D >> 2] = $354; //@line 8636
          HEAP32[$$0368$i + 12 >> 2] = $354; //@line 8638
          HEAP32[$354 + 8 >> 2] = $$0368$i; //@line 8640
          HEAP32[$354 + 12 >> 2] = $431; //@line 8642
          break;
         }
         $444 = $$4351$lcssa$i >>> 8; //@line 8645
         if (!$444) {
          $$0361$i = 0; //@line 8648
         } else {
          if ($$4351$lcssa$i >>> 0 > 16777215) {
           $$0361$i = 31; //@line 8652
          } else {
           $449 = ($444 + 1048320 | 0) >>> 16 & 8; //@line 8656
           $450 = $444 << $449; //@line 8657
           $453 = ($450 + 520192 | 0) >>> 16 & 4; //@line 8660
           $455 = $450 << $453; //@line 8662
           $458 = ($455 + 245760 | 0) >>> 16 & 2; //@line 8665
           $463 = 14 - ($453 | $449 | $458) + ($455 << $458 >>> 15) | 0; //@line 8670
           $$0361$i = $$4351$lcssa$i >>> ($463 + 7 | 0) & 1 | $463 << 1; //@line 8676
          }
         }
         $469 = 24188 + ($$0361$i << 2) | 0; //@line 8679
         HEAP32[$354 + 28 >> 2] = $$0361$i; //@line 8681
         $471 = $354 + 16 | 0; //@line 8682
         HEAP32[$471 + 4 >> 2] = 0; //@line 8684
         HEAP32[$471 >> 2] = 0; //@line 8685
         $473 = 1 << $$0361$i; //@line 8686
         if (!($475 & $473)) {
          HEAP32[5972] = $475 | $473; //@line 8691
          HEAP32[$469 >> 2] = $354; //@line 8692
          HEAP32[$354 + 24 >> 2] = $469; //@line 8694
          HEAP32[$354 + 12 >> 2] = $354; //@line 8696
          HEAP32[$354 + 8 >> 2] = $354; //@line 8698
          break;
         }
         $$0344$i = $$4351$lcssa$i << (($$0361$i | 0) == 31 ? 0 : 25 - ($$0361$i >>> 1) | 0); //@line 8707
         $$0345$i = HEAP32[$469 >> 2] | 0; //@line 8707
         while (1) {
          if ((HEAP32[$$0345$i + 4 >> 2] & -8 | 0) == ($$4351$lcssa$i | 0)) {
           label = 139; //@line 8714
           break;
          }
          $492 = $$0345$i + 16 + ($$0344$i >>> 31 << 2) | 0; //@line 8718
          $494 = HEAP32[$492 >> 2] | 0; //@line 8720
          if (!$494) {
           label = 136; //@line 8723
           break;
          } else {
           $$0344$i = $$0344$i << 1; //@line 8726
           $$0345$i = $494; //@line 8726
          }
         }
         if ((label | 0) == 136) {
          if ((HEAP32[5975] | 0) >>> 0 > $492 >>> 0) {
           _abort(); //@line 8733
          } else {
           HEAP32[$492 >> 2] = $354; //@line 8736
           HEAP32[$354 + 24 >> 2] = $$0345$i; //@line 8738
           HEAP32[$354 + 12 >> 2] = $354; //@line 8740
           HEAP32[$354 + 8 >> 2] = $354; //@line 8742
           break;
          }
         } else if ((label | 0) == 139) {
          $501 = $$0345$i + 8 | 0; //@line 8747
          $502 = HEAP32[$501 >> 2] | 0; //@line 8748
          $503 = HEAP32[5975] | 0; //@line 8749
          if ($503 >>> 0 <= $502 >>> 0 & $503 >>> 0 <= $$0345$i >>> 0) {
           HEAP32[$502 + 12 >> 2] = $354; //@line 8755
           HEAP32[$501 >> 2] = $354; //@line 8756
           HEAP32[$354 + 8 >> 2] = $502; //@line 8758
           HEAP32[$354 + 12 >> 2] = $$0345$i; //@line 8760
           HEAP32[$354 + 24 >> 2] = 0; //@line 8762
           break;
          } else {
           _abort(); //@line 8765
          }
         }
        }
       } while (0);
       $$0 = $$4$lcssa$i + 8 | 0; //@line 8772
       STACKTOP = sp; //@line 8773
       return $$0 | 0; //@line 8773
      } else {
       $$0197 = $252; //@line 8775
      }
     }
    }
   }
  }
 } while (0);
 $512 = HEAP32[5973] | 0; //@line 8782
 if ($512 >>> 0 >= $$0197 >>> 0) {
  $514 = $512 - $$0197 | 0; //@line 8785
  $515 = HEAP32[5976] | 0; //@line 8786
  if ($514 >>> 0 > 15) {
   $517 = $515 + $$0197 | 0; //@line 8789
   HEAP32[5976] = $517; //@line 8790
   HEAP32[5973] = $514; //@line 8791
   HEAP32[$517 + 4 >> 2] = $514 | 1; //@line 8794
   HEAP32[$515 + $512 >> 2] = $514; //@line 8796
   HEAP32[$515 + 4 >> 2] = $$0197 | 3; //@line 8799
  } else {
   HEAP32[5973] = 0; //@line 8801
   HEAP32[5976] = 0; //@line 8802
   HEAP32[$515 + 4 >> 2] = $512 | 3; //@line 8805
   $526 = $515 + $512 + 4 | 0; //@line 8807
   HEAP32[$526 >> 2] = HEAP32[$526 >> 2] | 1; //@line 8810
  }
  $$0 = $515 + 8 | 0; //@line 8813
  STACKTOP = sp; //@line 8814
  return $$0 | 0; //@line 8814
 }
 $530 = HEAP32[5974] | 0; //@line 8816
 if ($530 >>> 0 > $$0197 >>> 0) {
  $532 = $530 - $$0197 | 0; //@line 8819
  HEAP32[5974] = $532; //@line 8820
  $533 = HEAP32[5977] | 0; //@line 8821
  $534 = $533 + $$0197 | 0; //@line 8822
  HEAP32[5977] = $534; //@line 8823
  HEAP32[$534 + 4 >> 2] = $532 | 1; //@line 8826
  HEAP32[$533 + 4 >> 2] = $$0197 | 3; //@line 8829
  $$0 = $533 + 8 | 0; //@line 8831
  STACKTOP = sp; //@line 8832
  return $$0 | 0; //@line 8832
 }
 if (!(HEAP32[6089] | 0)) {
  HEAP32[6091] = 4096; //@line 8837
  HEAP32[6090] = 4096; //@line 8838
  HEAP32[6092] = -1; //@line 8839
  HEAP32[6093] = -1; //@line 8840
  HEAP32[6094] = 0; //@line 8841
  HEAP32[6082] = 0; //@line 8842
  HEAP32[6089] = $1 & -16 ^ 1431655768; //@line 8846
  $548 = 4096; //@line 8847
 } else {
  $548 = HEAP32[6091] | 0; //@line 8850
 }
 $545 = $$0197 + 48 | 0; //@line 8852
 $546 = $$0197 + 47 | 0; //@line 8853
 $547 = $548 + $546 | 0; //@line 8854
 $549 = 0 - $548 | 0; //@line 8855
 $550 = $547 & $549; //@line 8856
 if ($550 >>> 0 <= $$0197 >>> 0) {
  $$0 = 0; //@line 8859
  STACKTOP = sp; //@line 8860
  return $$0 | 0; //@line 8860
 }
 $552 = HEAP32[6081] | 0; //@line 8862
 if ($552 | 0) {
  $554 = HEAP32[6079] | 0; //@line 8865
  $555 = $554 + $550 | 0; //@line 8866
  if ($555 >>> 0 <= $554 >>> 0 | $555 >>> 0 > $552 >>> 0) {
   $$0 = 0; //@line 8871
   STACKTOP = sp; //@line 8872
   return $$0 | 0; //@line 8872
  }
 }
 L244 : do {
  if (!(HEAP32[6082] & 4)) {
   $561 = HEAP32[5977] | 0; //@line 8880
   L246 : do {
    if (!$561) {
     label = 163; //@line 8884
    } else {
     $$0$i$i = 24332; //@line 8886
     while (1) {
      $563 = HEAP32[$$0$i$i >> 2] | 0; //@line 8888
      if ($563 >>> 0 <= $561 >>> 0) {
       $565 = $$0$i$i + 4 | 0; //@line 8891
       if (($563 + (HEAP32[$565 >> 2] | 0) | 0) >>> 0 > $561 >>> 0) {
        break;
       }
      }
      $570 = HEAP32[$$0$i$i + 8 >> 2] | 0; //@line 8900
      if (!$570) {
       label = 163; //@line 8903
       break L246;
      } else {
       $$0$i$i = $570; //@line 8906
      }
     }
     $595 = $547 - $530 & $549; //@line 8910
     if ($595 >>> 0 < 2147483647) {
      $597 = _sbrk($595 | 0) | 0; //@line 8913
      if (($597 | 0) == ((HEAP32[$$0$i$i >> 2] | 0) + (HEAP32[$565 >> 2] | 0) | 0)) {
       if (($597 | 0) == (-1 | 0)) {
        $$2234243136$i = $595; //@line 8921
       } else {
        $$723947$i = $595; //@line 8923
        $$748$i = $597; //@line 8923
        label = 180; //@line 8924
        break L244;
       }
      } else {
       $$2247$ph$i = $597; //@line 8928
       $$2253$ph$i = $595; //@line 8928
       label = 171; //@line 8929
      }
     } else {
      $$2234243136$i = 0; //@line 8932
     }
    }
   } while (0);
   do {
    if ((label | 0) == 163) {
     $572 = _sbrk(0) | 0; //@line 8938
     if (($572 | 0) == (-1 | 0)) {
      $$2234243136$i = 0; //@line 8941
     } else {
      $574 = $572; //@line 8943
      $575 = HEAP32[6090] | 0; //@line 8944
      $576 = $575 + -1 | 0; //@line 8945
      $$$i = (($576 & $574 | 0) == 0 ? 0 : ($576 + $574 & 0 - $575) - $574 | 0) + $550 | 0; //@line 8953
      $584 = HEAP32[6079] | 0; //@line 8954
      $585 = $$$i + $584 | 0; //@line 8955
      if ($$$i >>> 0 > $$0197 >>> 0 & $$$i >>> 0 < 2147483647) {
       $588 = HEAP32[6081] | 0; //@line 8960
       if ($588 | 0) {
        if ($585 >>> 0 <= $584 >>> 0 | $585 >>> 0 > $588 >>> 0) {
         $$2234243136$i = 0; //@line 8967
         break;
        }
       }
       $592 = _sbrk($$$i | 0) | 0; //@line 8971
       if (($592 | 0) == ($572 | 0)) {
        $$723947$i = $$$i; //@line 8974
        $$748$i = $572; //@line 8974
        label = 180; //@line 8975
        break L244;
       } else {
        $$2247$ph$i = $592; //@line 8978
        $$2253$ph$i = $$$i; //@line 8978
        label = 171; //@line 8979
       }
      } else {
       $$2234243136$i = 0; //@line 8982
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 171) {
     $603 = 0 - $$2253$ph$i | 0; //@line 8989
     if (!($545 >>> 0 > $$2253$ph$i >>> 0 & ($$2253$ph$i >>> 0 < 2147483647 & ($$2247$ph$i | 0) != (-1 | 0)))) {
      if (($$2247$ph$i | 0) == (-1 | 0)) {
       $$2234243136$i = 0; //@line 8998
       break;
      } else {
       $$723947$i = $$2253$ph$i; //@line 9001
       $$748$i = $$2247$ph$i; //@line 9001
       label = 180; //@line 9002
       break L244;
      }
     }
     $607 = HEAP32[6091] | 0; //@line 9006
     $611 = $546 - $$2253$ph$i + $607 & 0 - $607; //@line 9010
     if ($611 >>> 0 >= 2147483647) {
      $$723947$i = $$2253$ph$i; //@line 9013
      $$748$i = $$2247$ph$i; //@line 9013
      label = 180; //@line 9014
      break L244;
     }
     if ((_sbrk($611 | 0) | 0) == (-1 | 0)) {
      _sbrk($603 | 0) | 0; //@line 9020
      $$2234243136$i = 0; //@line 9021
      break;
     } else {
      $$723947$i = $611 + $$2253$ph$i | 0; //@line 9025
      $$748$i = $$2247$ph$i; //@line 9025
      label = 180; //@line 9026
      break L244;
     }
    }
   } while (0);
   HEAP32[6082] = HEAP32[6082] | 4; //@line 9033
   $$4236$i = $$2234243136$i; //@line 9034
   label = 178; //@line 9035
  } else {
   $$4236$i = 0; //@line 9037
   label = 178; //@line 9038
  }
 } while (0);
 if ((label | 0) == 178) {
  if ($550 >>> 0 < 2147483647) {
   $620 = _sbrk($550 | 0) | 0; //@line 9044
   $621 = _sbrk(0) | 0; //@line 9045
   $627 = $621 - $620 | 0; //@line 9053
   $629 = $627 >>> 0 > ($$0197 + 40 | 0) >>> 0; //@line 9055
   if (!(($620 | 0) == (-1 | 0) | $629 ^ 1 | $620 >>> 0 < $621 >>> 0 & (($620 | 0) != (-1 | 0) & ($621 | 0) != (-1 | 0)) ^ 1)) {
    $$723947$i = $629 ? $627 : $$4236$i; //@line 9063
    $$748$i = $620; //@line 9063
    label = 180; //@line 9064
   }
  }
 }
 if ((label | 0) == 180) {
  $633 = (HEAP32[6079] | 0) + $$723947$i | 0; //@line 9070
  HEAP32[6079] = $633; //@line 9071
  if ($633 >>> 0 > (HEAP32[6080] | 0) >>> 0) {
   HEAP32[6080] = $633; //@line 9075
  }
  $636 = HEAP32[5977] | 0; //@line 9077
  do {
   if (!$636) {
    $638 = HEAP32[5975] | 0; //@line 9081
    if (($638 | 0) == 0 | $$748$i >>> 0 < $638 >>> 0) {
     HEAP32[5975] = $$748$i; //@line 9086
    }
    HEAP32[6083] = $$748$i; //@line 9088
    HEAP32[6084] = $$723947$i; //@line 9089
    HEAP32[6086] = 0; //@line 9090
    HEAP32[5980] = HEAP32[6089]; //@line 9092
    HEAP32[5979] = -1; //@line 9093
    HEAP32[5984] = 23924; //@line 9094
    HEAP32[5983] = 23924; //@line 9095
    HEAP32[5986] = 23932; //@line 9096
    HEAP32[5985] = 23932; //@line 9097
    HEAP32[5988] = 23940; //@line 9098
    HEAP32[5987] = 23940; //@line 9099
    HEAP32[5990] = 23948; //@line 9100
    HEAP32[5989] = 23948; //@line 9101
    HEAP32[5992] = 23956; //@line 9102
    HEAP32[5991] = 23956; //@line 9103
    HEAP32[5994] = 23964; //@line 9104
    HEAP32[5993] = 23964; //@line 9105
    HEAP32[5996] = 23972; //@line 9106
    HEAP32[5995] = 23972; //@line 9107
    HEAP32[5998] = 23980; //@line 9108
    HEAP32[5997] = 23980; //@line 9109
    HEAP32[6e3] = 23988; //@line 9110
    HEAP32[5999] = 23988; //@line 9111
    HEAP32[6002] = 23996; //@line 9112
    HEAP32[6001] = 23996; //@line 9113
    HEAP32[6004] = 24004; //@line 9114
    HEAP32[6003] = 24004; //@line 9115
    HEAP32[6006] = 24012; //@line 9116
    HEAP32[6005] = 24012; //@line 9117
    HEAP32[6008] = 24020; //@line 9118
    HEAP32[6007] = 24020; //@line 9119
    HEAP32[6010] = 24028; //@line 9120
    HEAP32[6009] = 24028; //@line 9121
    HEAP32[6012] = 24036; //@line 9122
    HEAP32[6011] = 24036; //@line 9123
    HEAP32[6014] = 24044; //@line 9124
    HEAP32[6013] = 24044; //@line 9125
    HEAP32[6016] = 24052; //@line 9126
    HEAP32[6015] = 24052; //@line 9127
    HEAP32[6018] = 24060; //@line 9128
    HEAP32[6017] = 24060; //@line 9129
    HEAP32[6020] = 24068; //@line 9130
    HEAP32[6019] = 24068; //@line 9131
    HEAP32[6022] = 24076; //@line 9132
    HEAP32[6021] = 24076; //@line 9133
    HEAP32[6024] = 24084; //@line 9134
    HEAP32[6023] = 24084; //@line 9135
    HEAP32[6026] = 24092; //@line 9136
    HEAP32[6025] = 24092; //@line 9137
    HEAP32[6028] = 24100; //@line 9138
    HEAP32[6027] = 24100; //@line 9139
    HEAP32[6030] = 24108; //@line 9140
    HEAP32[6029] = 24108; //@line 9141
    HEAP32[6032] = 24116; //@line 9142
    HEAP32[6031] = 24116; //@line 9143
    HEAP32[6034] = 24124; //@line 9144
    HEAP32[6033] = 24124; //@line 9145
    HEAP32[6036] = 24132; //@line 9146
    HEAP32[6035] = 24132; //@line 9147
    HEAP32[6038] = 24140; //@line 9148
    HEAP32[6037] = 24140; //@line 9149
    HEAP32[6040] = 24148; //@line 9150
    HEAP32[6039] = 24148; //@line 9151
    HEAP32[6042] = 24156; //@line 9152
    HEAP32[6041] = 24156; //@line 9153
    HEAP32[6044] = 24164; //@line 9154
    HEAP32[6043] = 24164; //@line 9155
    HEAP32[6046] = 24172; //@line 9156
    HEAP32[6045] = 24172; //@line 9157
    $642 = $$723947$i + -40 | 0; //@line 9158
    $644 = $$748$i + 8 | 0; //@line 9160
    $649 = ($644 & 7 | 0) == 0 ? 0 : 0 - $644 & 7; //@line 9165
    $650 = $$748$i + $649 | 0; //@line 9166
    $651 = $642 - $649 | 0; //@line 9167
    HEAP32[5977] = $650; //@line 9168
    HEAP32[5974] = $651; //@line 9169
    HEAP32[$650 + 4 >> 2] = $651 | 1; //@line 9172
    HEAP32[$$748$i + $642 + 4 >> 2] = 40; //@line 9175
    HEAP32[5978] = HEAP32[6093]; //@line 9177
   } else {
    $$024367$i = 24332; //@line 9179
    while (1) {
     $657 = HEAP32[$$024367$i >> 2] | 0; //@line 9181
     $658 = $$024367$i + 4 | 0; //@line 9182
     $659 = HEAP32[$658 >> 2] | 0; //@line 9183
     if (($$748$i | 0) == ($657 + $659 | 0)) {
      label = 188; //@line 9187
      break;
     }
     $663 = HEAP32[$$024367$i + 8 >> 2] | 0; //@line 9191
     if (!$663) {
      break;
     } else {
      $$024367$i = $663; //@line 9196
     }
    }
    if ((label | 0) == 188) {
     if (!(HEAP32[$$024367$i + 12 >> 2] & 8)) {
      if ($$748$i >>> 0 > $636 >>> 0 & $657 >>> 0 <= $636 >>> 0) {
       HEAP32[$658 >> 2] = $659 + $$723947$i; //@line 9210
       $673 = (HEAP32[5974] | 0) + $$723947$i | 0; //@line 9212
       $675 = $636 + 8 | 0; //@line 9214
       $680 = ($675 & 7 | 0) == 0 ? 0 : 0 - $675 & 7; //@line 9219
       $681 = $636 + $680 | 0; //@line 9220
       $682 = $673 - $680 | 0; //@line 9221
       HEAP32[5977] = $681; //@line 9222
       HEAP32[5974] = $682; //@line 9223
       HEAP32[$681 + 4 >> 2] = $682 | 1; //@line 9226
       HEAP32[$636 + $673 + 4 >> 2] = 40; //@line 9229
       HEAP32[5978] = HEAP32[6093]; //@line 9231
       break;
      }
     }
    }
    $688 = HEAP32[5975] | 0; //@line 9236
    if ($$748$i >>> 0 < $688 >>> 0) {
     HEAP32[5975] = $$748$i; //@line 9239
     $753 = $$748$i; //@line 9240
    } else {
     $753 = $688; //@line 9242
    }
    $690 = $$748$i + $$723947$i | 0; //@line 9244
    $$124466$i = 24332; //@line 9245
    while (1) {
     if ((HEAP32[$$124466$i >> 2] | 0) == ($690 | 0)) {
      label = 196; //@line 9250
      break;
     }
     $694 = HEAP32[$$124466$i + 8 >> 2] | 0; //@line 9254
     if (!$694) {
      $$0$i$i$i = 24332; //@line 9257
      break;
     } else {
      $$124466$i = $694; //@line 9260
     }
    }
    if ((label | 0) == 196) {
     if (!(HEAP32[$$124466$i + 12 >> 2] & 8)) {
      HEAP32[$$124466$i >> 2] = $$748$i; //@line 9269
      $700 = $$124466$i + 4 | 0; //@line 9270
      HEAP32[$700 >> 2] = (HEAP32[$700 >> 2] | 0) + $$723947$i; //@line 9273
      $704 = $$748$i + 8 | 0; //@line 9275
      $710 = $$748$i + (($704 & 7 | 0) == 0 ? 0 : 0 - $704 & 7) | 0; //@line 9281
      $712 = $690 + 8 | 0; //@line 9283
      $718 = $690 + (($712 & 7 | 0) == 0 ? 0 : 0 - $712 & 7) | 0; //@line 9289
      $722 = $710 + $$0197 | 0; //@line 9293
      $723 = $718 - $710 - $$0197 | 0; //@line 9294
      HEAP32[$710 + 4 >> 2] = $$0197 | 3; //@line 9297
      do {
       if (($636 | 0) == ($718 | 0)) {
        $728 = (HEAP32[5974] | 0) + $723 | 0; //@line 9302
        HEAP32[5974] = $728; //@line 9303
        HEAP32[5977] = $722; //@line 9304
        HEAP32[$722 + 4 >> 2] = $728 | 1; //@line 9307
       } else {
        if ((HEAP32[5976] | 0) == ($718 | 0)) {
         $734 = (HEAP32[5973] | 0) + $723 | 0; //@line 9313
         HEAP32[5973] = $734; //@line 9314
         HEAP32[5976] = $722; //@line 9315
         HEAP32[$722 + 4 >> 2] = $734 | 1; //@line 9318
         HEAP32[$722 + $734 >> 2] = $734; //@line 9320
         break;
        }
        $739 = HEAP32[$718 + 4 >> 2] | 0; //@line 9324
        if (($739 & 3 | 0) == 1) {
         $742 = $739 & -8; //@line 9328
         $743 = $739 >>> 3; //@line 9329
         L311 : do {
          if ($739 >>> 0 < 256) {
           $746 = HEAP32[$718 + 8 >> 2] | 0; //@line 9334
           $748 = HEAP32[$718 + 12 >> 2] | 0; //@line 9336
           $750 = 23924 + ($743 << 1 << 2) | 0; //@line 9338
           do {
            if (($746 | 0) != ($750 | 0)) {
             if ($753 >>> 0 > $746 >>> 0) {
              _abort(); //@line 9344
             }
             if ((HEAP32[$746 + 12 >> 2] | 0) == ($718 | 0)) {
              break;
             }
             _abort(); //@line 9353
            }
           } while (0);
           if (($748 | 0) == ($746 | 0)) {
            HEAP32[5971] = HEAP32[5971] & ~(1 << $743); //@line 9363
            break;
           }
           do {
            if (($748 | 0) == ($750 | 0)) {
             $$pre$phi11$i$iZ2D = $748 + 8 | 0; //@line 9370
            } else {
             if ($753 >>> 0 > $748 >>> 0) {
              _abort(); //@line 9374
             }
             $764 = $748 + 8 | 0; //@line 9377
             if ((HEAP32[$764 >> 2] | 0) == ($718 | 0)) {
              $$pre$phi11$i$iZ2D = $764; //@line 9381
              break;
             }
             _abort(); //@line 9384
            }
           } while (0);
           HEAP32[$746 + 12 >> 2] = $748; //@line 9389
           HEAP32[$$pre$phi11$i$iZ2D >> 2] = $746; //@line 9390
          } else {
           $769 = HEAP32[$718 + 24 >> 2] | 0; //@line 9393
           $771 = HEAP32[$718 + 12 >> 2] | 0; //@line 9395
           do {
            if (($771 | 0) == ($718 | 0)) {
             $782 = $718 + 16 | 0; //@line 9399
             $783 = $782 + 4 | 0; //@line 9400
             $784 = HEAP32[$783 >> 2] | 0; //@line 9401
             if (!$784) {
              $786 = HEAP32[$782 >> 2] | 0; //@line 9404
              if (!$786) {
               $$3$i$i = 0; //@line 9407
               break;
              } else {
               $$1291$i$i = $786; //@line 9410
               $$1293$i$i = $782; //@line 9410
              }
             } else {
              $$1291$i$i = $784; //@line 9413
              $$1293$i$i = $783; //@line 9413
             }
             while (1) {
              $788 = $$1291$i$i + 20 | 0; //@line 9416
              $789 = HEAP32[$788 >> 2] | 0; //@line 9417
              if ($789 | 0) {
               $$1291$i$i = $789; //@line 9420
               $$1293$i$i = $788; //@line 9420
               continue;
              }
              $791 = $$1291$i$i + 16 | 0; //@line 9423
              $792 = HEAP32[$791 >> 2] | 0; //@line 9424
              if (!$792) {
               break;
              } else {
               $$1291$i$i = $792; //@line 9429
               $$1293$i$i = $791; //@line 9429
              }
             }
             if ($753 >>> 0 > $$1293$i$i >>> 0) {
              _abort(); //@line 9434
             } else {
              HEAP32[$$1293$i$i >> 2] = 0; //@line 9437
              $$3$i$i = $$1291$i$i; //@line 9438
              break;
             }
            } else {
             $774 = HEAP32[$718 + 8 >> 2] | 0; //@line 9443
             if ($753 >>> 0 > $774 >>> 0) {
              _abort(); //@line 9446
             }
             $776 = $774 + 12 | 0; //@line 9449
             if ((HEAP32[$776 >> 2] | 0) != ($718 | 0)) {
              _abort(); //@line 9453
             }
             $779 = $771 + 8 | 0; //@line 9456
             if ((HEAP32[$779 >> 2] | 0) == ($718 | 0)) {
              HEAP32[$776 >> 2] = $771; //@line 9460
              HEAP32[$779 >> 2] = $774; //@line 9461
              $$3$i$i = $771; //@line 9462
              break;
             } else {
              _abort(); //@line 9465
             }
            }
           } while (0);
           if (!$769) {
            break;
           }
           $797 = HEAP32[$718 + 28 >> 2] | 0; //@line 9475
           $798 = 24188 + ($797 << 2) | 0; //@line 9476
           do {
            if ((HEAP32[$798 >> 2] | 0) == ($718 | 0)) {
             HEAP32[$798 >> 2] = $$3$i$i; //@line 9481
             if ($$3$i$i | 0) {
              break;
             }
             HEAP32[5972] = HEAP32[5972] & ~(1 << $797); //@line 9490
             break L311;
            } else {
             if ((HEAP32[5975] | 0) >>> 0 > $769 >>> 0) {
              _abort(); //@line 9496
             } else {
              HEAP32[$769 + 16 + (((HEAP32[$769 + 16 >> 2] | 0) != ($718 | 0) & 1) << 2) >> 2] = $$3$i$i; //@line 9504
              if (!$$3$i$i) {
               break L311;
              } else {
               break;
              }
             }
            }
           } while (0);
           $812 = HEAP32[5975] | 0; //@line 9514
           if ($812 >>> 0 > $$3$i$i >>> 0) {
            _abort(); //@line 9517
           }
           HEAP32[$$3$i$i + 24 >> 2] = $769; //@line 9521
           $815 = $718 + 16 | 0; //@line 9522
           $816 = HEAP32[$815 >> 2] | 0; //@line 9523
           do {
            if ($816 | 0) {
             if ($812 >>> 0 > $816 >>> 0) {
              _abort(); //@line 9529
             } else {
              HEAP32[$$3$i$i + 16 >> 2] = $816; //@line 9533
              HEAP32[$816 + 24 >> 2] = $$3$i$i; //@line 9535
              break;
             }
            }
           } while (0);
           $822 = HEAP32[$815 + 4 >> 2] | 0; //@line 9541
           if (!$822) {
            break;
           }
           if ((HEAP32[5975] | 0) >>> 0 > $822 >>> 0) {
            _abort(); //@line 9549
           } else {
            HEAP32[$$3$i$i + 20 >> 2] = $822; //@line 9553
            HEAP32[$822 + 24 >> 2] = $$3$i$i; //@line 9555
            break;
           }
          }
         } while (0);
         $$0$i17$i = $718 + $742 | 0; //@line 9562
         $$0287$i$i = $742 + $723 | 0; //@line 9562
        } else {
         $$0$i17$i = $718; //@line 9564
         $$0287$i$i = $723; //@line 9564
        }
        $830 = $$0$i17$i + 4 | 0; //@line 9566
        HEAP32[$830 >> 2] = HEAP32[$830 >> 2] & -2; //@line 9569
        HEAP32[$722 + 4 >> 2] = $$0287$i$i | 1; //@line 9572
        HEAP32[$722 + $$0287$i$i >> 2] = $$0287$i$i; //@line 9574
        $836 = $$0287$i$i >>> 3; //@line 9575
        if ($$0287$i$i >>> 0 < 256) {
         $839 = 23924 + ($836 << 1 << 2) | 0; //@line 9579
         $840 = HEAP32[5971] | 0; //@line 9580
         $841 = 1 << $836; //@line 9581
         do {
          if (!($840 & $841)) {
           HEAP32[5971] = $840 | $841; //@line 9587
           $$0295$i$i = $839; //@line 9589
           $$pre$phi$i19$iZ2D = $839 + 8 | 0; //@line 9589
          } else {
           $845 = $839 + 8 | 0; //@line 9591
           $846 = HEAP32[$845 >> 2] | 0; //@line 9592
           if ((HEAP32[5975] | 0) >>> 0 <= $846 >>> 0) {
            $$0295$i$i = $846; //@line 9596
            $$pre$phi$i19$iZ2D = $845; //@line 9596
            break;
           }
           _abort(); //@line 9599
          }
         } while (0);
         HEAP32[$$pre$phi$i19$iZ2D >> 2] = $722; //@line 9603
         HEAP32[$$0295$i$i + 12 >> 2] = $722; //@line 9605
         HEAP32[$722 + 8 >> 2] = $$0295$i$i; //@line 9607
         HEAP32[$722 + 12 >> 2] = $839; //@line 9609
         break;
        }
        $852 = $$0287$i$i >>> 8; //@line 9612
        do {
         if (!$852) {
          $$0296$i$i = 0; //@line 9616
         } else {
          if ($$0287$i$i >>> 0 > 16777215) {
           $$0296$i$i = 31; //@line 9620
           break;
          }
          $857 = ($852 + 1048320 | 0) >>> 16 & 8; //@line 9625
          $858 = $852 << $857; //@line 9626
          $861 = ($858 + 520192 | 0) >>> 16 & 4; //@line 9629
          $863 = $858 << $861; //@line 9631
          $866 = ($863 + 245760 | 0) >>> 16 & 2; //@line 9634
          $871 = 14 - ($861 | $857 | $866) + ($863 << $866 >>> 15) | 0; //@line 9639
          $$0296$i$i = $$0287$i$i >>> ($871 + 7 | 0) & 1 | $871 << 1; //@line 9645
         }
        } while (0);
        $877 = 24188 + ($$0296$i$i << 2) | 0; //@line 9648
        HEAP32[$722 + 28 >> 2] = $$0296$i$i; //@line 9650
        $879 = $722 + 16 | 0; //@line 9651
        HEAP32[$879 + 4 >> 2] = 0; //@line 9653
        HEAP32[$879 >> 2] = 0; //@line 9654
        $881 = HEAP32[5972] | 0; //@line 9655
        $882 = 1 << $$0296$i$i; //@line 9656
        if (!($881 & $882)) {
         HEAP32[5972] = $881 | $882; //@line 9661
         HEAP32[$877 >> 2] = $722; //@line 9662
         HEAP32[$722 + 24 >> 2] = $877; //@line 9664
         HEAP32[$722 + 12 >> 2] = $722; //@line 9666
         HEAP32[$722 + 8 >> 2] = $722; //@line 9668
         break;
        }
        $$0288$i$i = $$0287$i$i << (($$0296$i$i | 0) == 31 ? 0 : 25 - ($$0296$i$i >>> 1) | 0); //@line 9677
        $$0289$i$i = HEAP32[$877 >> 2] | 0; //@line 9677
        while (1) {
         if ((HEAP32[$$0289$i$i + 4 >> 2] & -8 | 0) == ($$0287$i$i | 0)) {
          label = 263; //@line 9684
          break;
         }
         $900 = $$0289$i$i + 16 + ($$0288$i$i >>> 31 << 2) | 0; //@line 9688
         $902 = HEAP32[$900 >> 2] | 0; //@line 9690
         if (!$902) {
          label = 260; //@line 9693
          break;
         } else {
          $$0288$i$i = $$0288$i$i << 1; //@line 9696
          $$0289$i$i = $902; //@line 9696
         }
        }
        if ((label | 0) == 260) {
         if ((HEAP32[5975] | 0) >>> 0 > $900 >>> 0) {
          _abort(); //@line 9703
         } else {
          HEAP32[$900 >> 2] = $722; //@line 9706
          HEAP32[$722 + 24 >> 2] = $$0289$i$i; //@line 9708
          HEAP32[$722 + 12 >> 2] = $722; //@line 9710
          HEAP32[$722 + 8 >> 2] = $722; //@line 9712
          break;
         }
        } else if ((label | 0) == 263) {
         $909 = $$0289$i$i + 8 | 0; //@line 9717
         $910 = HEAP32[$909 >> 2] | 0; //@line 9718
         $911 = HEAP32[5975] | 0; //@line 9719
         if ($911 >>> 0 <= $910 >>> 0 & $911 >>> 0 <= $$0289$i$i >>> 0) {
          HEAP32[$910 + 12 >> 2] = $722; //@line 9725
          HEAP32[$909 >> 2] = $722; //@line 9726
          HEAP32[$722 + 8 >> 2] = $910; //@line 9728
          HEAP32[$722 + 12 >> 2] = $$0289$i$i; //@line 9730
          HEAP32[$722 + 24 >> 2] = 0; //@line 9732
          break;
         } else {
          _abort(); //@line 9735
         }
        }
       }
      } while (0);
      $$0 = $710 + 8 | 0; //@line 9742
      STACKTOP = sp; //@line 9743
      return $$0 | 0; //@line 9743
     } else {
      $$0$i$i$i = 24332; //@line 9745
     }
    }
    while (1) {
     $919 = HEAP32[$$0$i$i$i >> 2] | 0; //@line 9749
     if ($919 >>> 0 <= $636 >>> 0) {
      $923 = $919 + (HEAP32[$$0$i$i$i + 4 >> 2] | 0) | 0; //@line 9754
      if ($923 >>> 0 > $636 >>> 0) {
       break;
      }
     }
     $$0$i$i$i = HEAP32[$$0$i$i$i + 8 >> 2] | 0; //@line 9762
    }
    $927 = $923 + -47 | 0; //@line 9764
    $929 = $927 + 8 | 0; //@line 9766
    $935 = $927 + (($929 & 7 | 0) == 0 ? 0 : 0 - $929 & 7) | 0; //@line 9772
    $936 = $636 + 16 | 0; //@line 9773
    $938 = $935 >>> 0 < $936 >>> 0 ? $636 : $935; //@line 9775
    $939 = $938 + 8 | 0; //@line 9776
    $940 = $938 + 24 | 0; //@line 9777
    $941 = $$723947$i + -40 | 0; //@line 9778
    $943 = $$748$i + 8 | 0; //@line 9780
    $948 = ($943 & 7 | 0) == 0 ? 0 : 0 - $943 & 7; //@line 9785
    $949 = $$748$i + $948 | 0; //@line 9786
    $950 = $941 - $948 | 0; //@line 9787
    HEAP32[5977] = $949; //@line 9788
    HEAP32[5974] = $950; //@line 9789
    HEAP32[$949 + 4 >> 2] = $950 | 1; //@line 9792
    HEAP32[$$748$i + $941 + 4 >> 2] = 40; //@line 9795
    HEAP32[5978] = HEAP32[6093]; //@line 9797
    $956 = $938 + 4 | 0; //@line 9798
    HEAP32[$956 >> 2] = 27; //@line 9799
    HEAP32[$939 >> 2] = HEAP32[6083]; //@line 9800
    HEAP32[$939 + 4 >> 2] = HEAP32[6084]; //@line 9800
    HEAP32[$939 + 8 >> 2] = HEAP32[6085]; //@line 9800
    HEAP32[$939 + 12 >> 2] = HEAP32[6086]; //@line 9800
    HEAP32[6083] = $$748$i; //@line 9801
    HEAP32[6084] = $$723947$i; //@line 9802
    HEAP32[6086] = 0; //@line 9803
    HEAP32[6085] = $939; //@line 9804
    $958 = $940; //@line 9805
    do {
     $958$looptemp = $958;
     $958 = $958 + 4 | 0; //@line 9807
     HEAP32[$958 >> 2] = 7; //@line 9808
    } while (($958$looptemp + 8 | 0) >>> 0 < $923 >>> 0);
    if (($938 | 0) != ($636 | 0)) {
     $964 = $938 - $636 | 0; //@line 9821
     HEAP32[$956 >> 2] = HEAP32[$956 >> 2] & -2; //@line 9824
     HEAP32[$636 + 4 >> 2] = $964 | 1; //@line 9827
     HEAP32[$938 >> 2] = $964; //@line 9828
     $969 = $964 >>> 3; //@line 9829
     if ($964 >>> 0 < 256) {
      $972 = 23924 + ($969 << 1 << 2) | 0; //@line 9833
      $973 = HEAP32[5971] | 0; //@line 9834
      $974 = 1 << $969; //@line 9835
      if (!($973 & $974)) {
       HEAP32[5971] = $973 | $974; //@line 9840
       $$0211$i$i = $972; //@line 9842
       $$pre$phi$i$iZ2D = $972 + 8 | 0; //@line 9842
      } else {
       $978 = $972 + 8 | 0; //@line 9844
       $979 = HEAP32[$978 >> 2] | 0; //@line 9845
       if ((HEAP32[5975] | 0) >>> 0 > $979 >>> 0) {
        _abort(); //@line 9849
       } else {
        $$0211$i$i = $979; //@line 9852
        $$pre$phi$i$iZ2D = $978; //@line 9852
       }
      }
      HEAP32[$$pre$phi$i$iZ2D >> 2] = $636; //@line 9855
      HEAP32[$$0211$i$i + 12 >> 2] = $636; //@line 9857
      HEAP32[$636 + 8 >> 2] = $$0211$i$i; //@line 9859
      HEAP32[$636 + 12 >> 2] = $972; //@line 9861
      break;
     }
     $985 = $964 >>> 8; //@line 9864
     if (!$985) {
      $$0212$i$i = 0; //@line 9867
     } else {
      if ($964 >>> 0 > 16777215) {
       $$0212$i$i = 31; //@line 9871
      } else {
       $990 = ($985 + 1048320 | 0) >>> 16 & 8; //@line 9875
       $991 = $985 << $990; //@line 9876
       $994 = ($991 + 520192 | 0) >>> 16 & 4; //@line 9879
       $996 = $991 << $994; //@line 9881
       $999 = ($996 + 245760 | 0) >>> 16 & 2; //@line 9884
       $1004 = 14 - ($994 | $990 | $999) + ($996 << $999 >>> 15) | 0; //@line 9889
       $$0212$i$i = $964 >>> ($1004 + 7 | 0) & 1 | $1004 << 1; //@line 9895
      }
     }
     $1010 = 24188 + ($$0212$i$i << 2) | 0; //@line 9898
     HEAP32[$636 + 28 >> 2] = $$0212$i$i; //@line 9900
     HEAP32[$636 + 20 >> 2] = 0; //@line 9902
     HEAP32[$936 >> 2] = 0; //@line 9903
     $1013 = HEAP32[5972] | 0; //@line 9904
     $1014 = 1 << $$0212$i$i; //@line 9905
     if (!($1013 & $1014)) {
      HEAP32[5972] = $1013 | $1014; //@line 9910
      HEAP32[$1010 >> 2] = $636; //@line 9911
      HEAP32[$636 + 24 >> 2] = $1010; //@line 9913
      HEAP32[$636 + 12 >> 2] = $636; //@line 9915
      HEAP32[$636 + 8 >> 2] = $636; //@line 9917
      break;
     }
     $$0206$i$i = $964 << (($$0212$i$i | 0) == 31 ? 0 : 25 - ($$0212$i$i >>> 1) | 0); //@line 9926
     $$0207$i$i = HEAP32[$1010 >> 2] | 0; //@line 9926
     while (1) {
      if ((HEAP32[$$0207$i$i + 4 >> 2] & -8 | 0) == ($964 | 0)) {
       label = 289; //@line 9933
       break;
      }
      $1032 = $$0207$i$i + 16 + ($$0206$i$i >>> 31 << 2) | 0; //@line 9937
      $1034 = HEAP32[$1032 >> 2] | 0; //@line 9939
      if (!$1034) {
       label = 286; //@line 9942
       break;
      } else {
       $$0206$i$i = $$0206$i$i << 1; //@line 9945
       $$0207$i$i = $1034; //@line 9945
      }
     }
     if ((label | 0) == 286) {
      if ((HEAP32[5975] | 0) >>> 0 > $1032 >>> 0) {
       _abort(); //@line 9952
      } else {
       HEAP32[$1032 >> 2] = $636; //@line 9955
       HEAP32[$636 + 24 >> 2] = $$0207$i$i; //@line 9957
       HEAP32[$636 + 12 >> 2] = $636; //@line 9959
       HEAP32[$636 + 8 >> 2] = $636; //@line 9961
       break;
      }
     } else if ((label | 0) == 289) {
      $1041 = $$0207$i$i + 8 | 0; //@line 9966
      $1042 = HEAP32[$1041 >> 2] | 0; //@line 9967
      $1043 = HEAP32[5975] | 0; //@line 9968
      if ($1043 >>> 0 <= $1042 >>> 0 & $1043 >>> 0 <= $$0207$i$i >>> 0) {
       HEAP32[$1042 + 12 >> 2] = $636; //@line 9974
       HEAP32[$1041 >> 2] = $636; //@line 9975
       HEAP32[$636 + 8 >> 2] = $1042; //@line 9977
       HEAP32[$636 + 12 >> 2] = $$0207$i$i; //@line 9979
       HEAP32[$636 + 24 >> 2] = 0; //@line 9981
       break;
      } else {
       _abort(); //@line 9984
      }
     }
    }
   }
  } while (0);
  $1052 = HEAP32[5974] | 0; //@line 9991
  if ($1052 >>> 0 > $$0197 >>> 0) {
   $1054 = $1052 - $$0197 | 0; //@line 9994
   HEAP32[5974] = $1054; //@line 9995
   $1055 = HEAP32[5977] | 0; //@line 9996
   $1056 = $1055 + $$0197 | 0; //@line 9997
   HEAP32[5977] = $1056; //@line 9998
   HEAP32[$1056 + 4 >> 2] = $1054 | 1; //@line 10001
   HEAP32[$1055 + 4 >> 2] = $$0197 | 3; //@line 10004
   $$0 = $1055 + 8 | 0; //@line 10006
   STACKTOP = sp; //@line 10007
   return $$0 | 0; //@line 10007
  }
 }
 HEAP32[(___errno_location() | 0) >> 2] = 12; //@line 10011
 $$0 = 0; //@line 10012
 STACKTOP = sp; //@line 10013
 return $$0 | 0; //@line 10013
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_424($0) {
 $0 = $0 | 0;
 var $$0174 = 0, $$0174235 = 0, $$0174236 = 0, $$1169 = 0, $$1171 = 0, $$1173 = 0, $$1175 = 0, $$byval_copy = 0, $$byval_copy48 = 0, $$byval_copy49 = 0, $$byval_copy50 = 0, $$sink233 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $108 = 0, $111 = 0, $113 = 0, $114 = 0, $118 = 0, $120 = 0, $121 = 0, $126 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $146 = 0, $153 = 0, $16 = 0, $161 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $176 = 0, $179 = 0, $18 = 0, $181 = 0, $182 = 0, $2 = 0, $20 = 0, $200 = 0, $215 = 0, $22 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $230 = 0, $233 = 0, $235 = 0, $236 = 0, $238 = 0, $24 = 0, $240 = 0, $249 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $26 = 0, $274 = 0, $275 = 0, $276 = 0, $278 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $324 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $38 = 0, $380 = 0, $385 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $4 = 0, $40 = 0, $400 = 0, $403 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $412 = 0, $414 = 0, $415 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $52 = 0, $54 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $64 = 0, $66 = 0, $68 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $87 = 0, $88 = 0, $93 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx18 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx24 = 0, $ReallocAsyncCtx25 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $sext = 0, $trunc = 0, sp = 0;
 sp = STACKTOP; //@line 32686
 STACKTOP = STACKTOP + 32 | 0; //@line 32687
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 32687
 $$byval_copy50 = sp + 24 | 0; //@line 32688
 $$byval_copy49 = sp + 16 | 0; //@line 32689
 $$byval_copy48 = sp + 8 | 0; //@line 32690
 $$byval_copy = sp; //@line 32691
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32693
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32695
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32697
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32701
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 32705
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 32707
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 32709
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 32711
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 32713
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 32715
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 32717
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 32719
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 32721
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 32723
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 32725
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 32727
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 32729
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 32731
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 32733
 $44 = HEAP8[$0 + 88 >> 0] | 0; //@line 32735
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 32737
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 32739
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 32743
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 32745
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 32747
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 32749
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 32751
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 32753
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 32755
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 32757
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 32759
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 32763
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 32765
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 32767
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 32769
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 32771
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 32773
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 32775
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 32777
 $87 = HEAP8[$30 >> 0] | 0; //@line 32778
 $trunc = ($87 & 255) >>> 5; //@line 32779
 switch ($trunc & 7) {
 case 1:
  {
   $88 = $34 + 372 | 0; //@line 32783
   if (!(HEAP8[$88 >> 0] | 0)) {
    $118 = $34 + 908 | 0; //@line 32790
    $120 = $34 + 638 | 0; //@line 32792
    $121 = $34 + 639 | 0; //@line 32793
    if (__Z18decrypt_join_framePKhtS0_Ph($30 + 1 | 0, $26 + 65535 & 65535, HEAP32[$118 >> 2] | 0, $121) | 0) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($64) | 0) + 4 >> 2] = 13; //@line 32799
     STACKTOP = sp; //@line 32800
     return;
    }
    HEAP8[$120 >> 0] = $87; //@line 32802
    $126 = $26 + -4 | 0; //@line 32803
    $128 = HEAP32[$118 >> 2] | 0; //@line 32805
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(64) | 0; //@line 32806
    $129 = __Z22compute_join_frame_micPKhtS0_Pj($120, $126 & 65535, $128, $60) | 0; //@line 32807
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 322; //@line 32810
     $130 = $ReallocAsyncCtx4 + 4 | 0; //@line 32811
     HEAP32[$130 >> 2] = $34; //@line 32812
     $131 = $ReallocAsyncCtx4 + 8 | 0; //@line 32813
     HEAP32[$131 >> 2] = $126; //@line 32814
     $132 = $ReallocAsyncCtx4 + 12 | 0; //@line 32815
     HEAP32[$132 >> 2] = $26; //@line 32816
     $133 = $ReallocAsyncCtx4 + 16 | 0; //@line 32817
     HEAP32[$133 >> 2] = $60; //@line 32818
     $134 = $ReallocAsyncCtx4 + 20 | 0; //@line 32819
     HEAP32[$134 >> 2] = $64; //@line 32820
     $135 = $ReallocAsyncCtx4 + 24 | 0; //@line 32821
     HEAP32[$135 >> 2] = $42; //@line 32822
     $136 = $ReallocAsyncCtx4 + 28 | 0; //@line 32823
     HEAP32[$136 >> 2] = $80; //@line 32824
     $137 = $ReallocAsyncCtx4 + 32 | 0; //@line 32825
     HEAP32[$137 >> 2] = $118; //@line 32826
     $138 = $ReallocAsyncCtx4 + 36 | 0; //@line 32827
     HEAP32[$138 >> 2] = $121; //@line 32828
     $139 = $ReallocAsyncCtx4 + 40 | 0; //@line 32829
     HEAP32[$139 >> 2] = $84; //@line 32830
     $140 = $ReallocAsyncCtx4 + 44 | 0; //@line 32831
     HEAP32[$140 >> 2] = $14; //@line 32832
     $141 = $ReallocAsyncCtx4 + 48 | 0; //@line 32833
     HEAP32[$141 >> 2] = $22; //@line 32834
     $142 = $ReallocAsyncCtx4 + 52 | 0; //@line 32835
     HEAP32[$142 >> 2] = $32; //@line 32836
     $143 = $ReallocAsyncCtx4 + 56 | 0; //@line 32837
     HEAP32[$143 >> 2] = $48; //@line 32838
     $144 = $ReallocAsyncCtx4 + 60 | 0; //@line 32839
     HEAP32[$144 >> 2] = $88; //@line 32840
     sp = STACKTOP; //@line 32841
     STACKTOP = sp; //@line 32842
     return;
    }
    HEAP32[___async_retval >> 2] = $129; //@line 32845
    ___async_unwind = 0; //@line 32846
    HEAP32[$ReallocAsyncCtx4 >> 2] = 322; //@line 32847
    $130 = $ReallocAsyncCtx4 + 4 | 0; //@line 32848
    HEAP32[$130 >> 2] = $34; //@line 32849
    $131 = $ReallocAsyncCtx4 + 8 | 0; //@line 32850
    HEAP32[$131 >> 2] = $126; //@line 32851
    $132 = $ReallocAsyncCtx4 + 12 | 0; //@line 32852
    HEAP32[$132 >> 2] = $26; //@line 32853
    $133 = $ReallocAsyncCtx4 + 16 | 0; //@line 32854
    HEAP32[$133 >> 2] = $60; //@line 32855
    $134 = $ReallocAsyncCtx4 + 20 | 0; //@line 32856
    HEAP32[$134 >> 2] = $64; //@line 32857
    $135 = $ReallocAsyncCtx4 + 24 | 0; //@line 32858
    HEAP32[$135 >> 2] = $42; //@line 32859
    $136 = $ReallocAsyncCtx4 + 28 | 0; //@line 32860
    HEAP32[$136 >> 2] = $80; //@line 32861
    $137 = $ReallocAsyncCtx4 + 32 | 0; //@line 32862
    HEAP32[$137 >> 2] = $118; //@line 32863
    $138 = $ReallocAsyncCtx4 + 36 | 0; //@line 32864
    HEAP32[$138 >> 2] = $121; //@line 32865
    $139 = $ReallocAsyncCtx4 + 40 | 0; //@line 32866
    HEAP32[$139 >> 2] = $84; //@line 32867
    $140 = $ReallocAsyncCtx4 + 44 | 0; //@line 32868
    HEAP32[$140 >> 2] = $14; //@line 32869
    $141 = $ReallocAsyncCtx4 + 48 | 0; //@line 32870
    HEAP32[$141 >> 2] = $22; //@line 32871
    $142 = $ReallocAsyncCtx4 + 52 | 0; //@line 32872
    HEAP32[$142 >> 2] = $32; //@line 32873
    $143 = $ReallocAsyncCtx4 + 56 | 0; //@line 32874
    HEAP32[$143 >> 2] = $48; //@line 32875
    $144 = $ReallocAsyncCtx4 + 60 | 0; //@line 32876
    HEAP32[$144 >> 2] = $88; //@line 32877
    sp = STACKTOP; //@line 32878
    STACKTOP = sp; //@line 32879
    return;
   }
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($64) | 0) + 4 >> 2] = 1; //@line 32883
   _mbed_tracef(16, 13728, 13867, $38); //@line 32884
   $93 = $34 + 968 | 0; //@line 32885
   HEAP32[$93 >> 2] = HEAP32[$93 >> 2] | 64; //@line 32888
   if (!(HEAP8[$34 + 373 >> 0] | 0)) {
    $108 = $34 + 944 | 0; //@line 32893
    HEAP8[$108 >> 0] = HEAP8[$108 >> 0] | 34; //@line 32896
    $111 = HEAP32[$22 >> 2] | 0; //@line 32897
    $ReallocAsyncCtx13 = _emscripten_realloc_async_context(12) | 0; //@line 32899
    __ZN18LoRaWANTimeHandler5startER13timer_event_tj($111, $34 + 996 | 0, 1); //@line 32900
    if (___async) {
     HEAP32[$ReallocAsyncCtx13 >> 2] = 321; //@line 32903
     $113 = $ReallocAsyncCtx13 + 4 | 0; //@line 32904
     HEAP32[$113 >> 2] = $42; //@line 32905
     $114 = $ReallocAsyncCtx13 + 8 | 0; //@line 32906
     HEAP32[$114 >> 2] = $80; //@line 32907
     sp = STACKTOP; //@line 32908
     STACKTOP = sp; //@line 32909
     return;
    }
    ___async_unwind = 0; //@line 32911
    HEAP32[$ReallocAsyncCtx13 >> 2] = 321; //@line 32912
    $113 = $ReallocAsyncCtx13 + 4 | 0; //@line 32913
    HEAP32[$113 >> 2] = $42; //@line 32914
    $114 = $ReallocAsyncCtx13 + 8 | 0; //@line 32915
    HEAP32[$114 >> 2] = $80; //@line 32916
    sp = STACKTOP; //@line 32917
    STACKTOP = sp; //@line 32918
    return;
   } else {
    $100 = HEAP32[$34 + 1328 >> 2] | 0; //@line 32921
    HEAP32[$46 >> 2] = 318; //@line 32922
    HEAP32[$46 + 4 >> 2] = 0; //@line 32924
    $ReallocAsyncCtx25 = _emscripten_realloc_async_context(24) | 0; //@line 32925
    HEAP32[$$byval_copy >> 2] = HEAP32[$46 >> 2]; //@line 32926
    HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$46 + 4 >> 2]; //@line 32926
    $101 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($100, $34, $$byval_copy) | 0; //@line 32927
    if (___async) {
     HEAP32[$ReallocAsyncCtx25 >> 2] = 319; //@line 32930
     $102 = $ReallocAsyncCtx25 + 4 | 0; //@line 32931
     HEAP32[$102 >> 2] = $46; //@line 32932
     $103 = $ReallocAsyncCtx25 + 8 | 0; //@line 32933
     HEAP32[$103 >> 2] = $34; //@line 32934
     $104 = $ReallocAsyncCtx25 + 12 | 0; //@line 32935
     HEAP32[$104 >> 2] = $22; //@line 32936
     $105 = $ReallocAsyncCtx25 + 16 | 0; //@line 32937
     HEAP32[$105 >> 2] = $42; //@line 32938
     $106 = $ReallocAsyncCtx25 + 20 | 0; //@line 32939
     HEAP32[$106 >> 2] = $80; //@line 32940
     sp = STACKTOP; //@line 32941
     STACKTOP = sp; //@line 32942
     return;
    }
    HEAP32[___async_retval >> 2] = $101; //@line 32945
    ___async_unwind = 0; //@line 32946
    HEAP32[$ReallocAsyncCtx25 >> 2] = 319; //@line 32947
    $102 = $ReallocAsyncCtx25 + 4 | 0; //@line 32948
    HEAP32[$102 >> 2] = $46; //@line 32949
    $103 = $ReallocAsyncCtx25 + 8 | 0; //@line 32950
    HEAP32[$103 >> 2] = $34; //@line 32951
    $104 = $ReallocAsyncCtx25 + 12 | 0; //@line 32952
    HEAP32[$104 >> 2] = $22; //@line 32953
    $105 = $ReallocAsyncCtx25 + 16 | 0; //@line 32954
    HEAP32[$105 >> 2] = $42; //@line 32955
    $106 = $ReallocAsyncCtx25 + 20 | 0; //@line 32956
    HEAP32[$106 >> 2] = $80; //@line 32957
    sp = STACKTOP; //@line 32958
    STACKTOP = sp; //@line 32959
    return;
   }
   break;
  }
 case 3:
 case 5:
  {
   $146 = HEAP32[$48 >> 2] | 0; //@line 32964
   $153 = __ZN7LoRaPHY15get_max_payloadEhb($146, HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($64) | 0) + 10 >> 0] | 0, (HEAP8[$34 + 369 >> 0] | 0) != 0) | 0; //@line 32971
   $sext = ($26 << 16) + -851968 | 0; //@line 32973
   if (((($sext | 0) < 0 ? 0 : $sext >> 16) | 0) > ($153 & 255 | 0)) {
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($64) | 0) + 4 >> 2] = 1; //@line 32982
    _mbed_tracef(16, 13728, 13867, $16); //@line 32983
    $161 = $34 + 968 | 0; //@line 32984
    HEAP32[$161 >> 2] = HEAP32[$161 >> 2] | 64; //@line 32987
    if (!(HEAP8[$34 + 373 >> 0] | 0)) {
     $176 = $34 + 944 | 0; //@line 32992
     HEAP8[$176 >> 0] = HEAP8[$176 >> 0] | 34; //@line 32995
     $179 = HEAP32[$22 >> 2] | 0; //@line 32996
     $ReallocAsyncCtx12 = _emscripten_realloc_async_context(12) | 0; //@line 32998
     __ZN18LoRaWANTimeHandler5startER13timer_event_tj($179, $34 + 996 | 0, 1); //@line 32999
     if (___async) {
      HEAP32[$ReallocAsyncCtx12 >> 2] = 326; //@line 33002
      $181 = $ReallocAsyncCtx12 + 4 | 0; //@line 33003
      HEAP32[$181 >> 2] = $42; //@line 33004
      $182 = $ReallocAsyncCtx12 + 8 | 0; //@line 33005
      HEAP32[$182 >> 2] = $80; //@line 33006
      sp = STACKTOP; //@line 33007
      STACKTOP = sp; //@line 33008
      return;
     }
     ___async_unwind = 0; //@line 33010
     HEAP32[$ReallocAsyncCtx12 >> 2] = 326; //@line 33011
     $181 = $ReallocAsyncCtx12 + 4 | 0; //@line 33012
     HEAP32[$181 >> 2] = $42; //@line 33013
     $182 = $ReallocAsyncCtx12 + 8 | 0; //@line 33014
     HEAP32[$182 >> 2] = $80; //@line 33015
     sp = STACKTOP; //@line 33016
     STACKTOP = sp; //@line 33017
     return;
    } else {
     $168 = HEAP32[$34 + 1328 >> 2] | 0; //@line 33020
     HEAP32[$78 >> 2] = 318; //@line 33021
     HEAP32[$78 + 4 >> 2] = 0; //@line 33023
     $ReallocAsyncCtx24 = _emscripten_realloc_async_context(24) | 0; //@line 33024
     HEAP32[$$byval_copy48 >> 2] = HEAP32[$78 >> 2]; //@line 33025
     HEAP32[$$byval_copy48 + 4 >> 2] = HEAP32[$78 + 4 >> 2]; //@line 33025
     $169 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($168, $34, $$byval_copy48) | 0; //@line 33026
     if (___async) {
      HEAP32[$ReallocAsyncCtx24 >> 2] = 324; //@line 33029
      $170 = $ReallocAsyncCtx24 + 4 | 0; //@line 33030
      HEAP32[$170 >> 2] = $78; //@line 33031
      $171 = $ReallocAsyncCtx24 + 8 | 0; //@line 33032
      HEAP32[$171 >> 2] = $34; //@line 33033
      $172 = $ReallocAsyncCtx24 + 12 | 0; //@line 33034
      HEAP32[$172 >> 2] = $22; //@line 33035
      $173 = $ReallocAsyncCtx24 + 16 | 0; //@line 33036
      HEAP32[$173 >> 2] = $42; //@line 33037
      $174 = $ReallocAsyncCtx24 + 20 | 0; //@line 33038
      HEAP32[$174 >> 2] = $80; //@line 33039
      sp = STACKTOP; //@line 33040
      STACKTOP = sp; //@line 33041
      return;
     }
     HEAP32[___async_retval >> 2] = $169; //@line 33044
     ___async_unwind = 0; //@line 33045
     HEAP32[$ReallocAsyncCtx24 >> 2] = 324; //@line 33046
     $170 = $ReallocAsyncCtx24 + 4 | 0; //@line 33047
     HEAP32[$170 >> 2] = $78; //@line 33048
     $171 = $ReallocAsyncCtx24 + 8 | 0; //@line 33049
     HEAP32[$171 >> 2] = $34; //@line 33050
     $172 = $ReallocAsyncCtx24 + 12 | 0; //@line 33051
     HEAP32[$172 >> 2] = $22; //@line 33052
     $173 = $ReallocAsyncCtx24 + 16 | 0; //@line 33053
     HEAP32[$173 >> 2] = $42; //@line 33054
     $174 = $ReallocAsyncCtx24 + 20 | 0; //@line 33055
     HEAP32[$174 >> 2] = $80; //@line 33056
     sp = STACKTOP; //@line 33057
     STACKTOP = sp; //@line 33058
     return;
    }
   }
   $200 = HEAPU8[$30 + 2 >> 0] << 8 | HEAPU8[$30 + 1 >> 0] | HEAPU8[$30 + 3 >> 0] << 16 | HEAPU8[$30 + 4 >> 0] << 24; //@line 33078
   L53 : do {
    if (($200 | 0) == (HEAP32[$34 + 952 >> 2] | 0)) {
     $$1169 = 0; //@line 33085
     $$1171 = $14; //@line 33085
     $$1173 = $84; //@line 33085
     $$1175 = 0; //@line 33085
     $$sink233 = $34 + 960 | 0; //@line 33085
    } else {
     $$0174235 = HEAP32[$34 + 1208 >> 2] | 0; //@line 33088
     L56 : do {
      if ($$0174235 | 0) {
       $$0174236 = $$0174235; //@line 33092
       while (1) {
        if (($200 | 0) == (HEAP32[$$0174236 >> 2] | 0)) {
         break;
        }
        $$0174 = HEAP32[$$0174236 + 40 >> 2] | 0; //@line 33100
        if (!$$0174) {
         break L56;
        } else {
         $$0174236 = $$0174; //@line 33105
        }
       }
       $$1169 = 1; //@line 33111
       $$1171 = $$0174236 + 20 | 0; //@line 33111
       $$1173 = $$0174236 + 4 | 0; //@line 33111
       $$1175 = $$0174236; //@line 33111
       $$sink233 = $$0174236 + 36 | 0; //@line 33111
       break L53;
      }
     } while (0);
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($64) | 0) + 4 >> 2] = 11; //@line 33117
     _mbed_tracef(16, 13728, 13867, $76); //@line 33118
     $215 = $34 + 968 | 0; //@line 33119
     HEAP32[$215 >> 2] = HEAP32[$215 >> 2] | 64; //@line 33122
     if (!(HEAP8[$34 + 373 >> 0] | 0)) {
      $230 = $34 + 944 | 0; //@line 33127
      HEAP8[$230 >> 0] = HEAP8[$230 >> 0] | 34; //@line 33130
      $233 = HEAP32[$22 >> 2] | 0; //@line 33131
      $ReallocAsyncCtx11 = _emscripten_realloc_async_context(12) | 0; //@line 33133
      __ZN18LoRaWANTimeHandler5startER13timer_event_tj($233, $34 + 996 | 0, 1); //@line 33134
      if (___async) {
       HEAP32[$ReallocAsyncCtx11 >> 2] = 329; //@line 33137
       $235 = $ReallocAsyncCtx11 + 4 | 0; //@line 33138
       HEAP32[$235 >> 2] = $42; //@line 33139
       $236 = $ReallocAsyncCtx11 + 8 | 0; //@line 33140
       HEAP32[$236 >> 2] = $80; //@line 33141
       sp = STACKTOP; //@line 33142
       STACKTOP = sp; //@line 33143
       return;
      }
      ___async_unwind = 0; //@line 33145
      HEAP32[$ReallocAsyncCtx11 >> 2] = 329; //@line 33146
      $235 = $ReallocAsyncCtx11 + 4 | 0; //@line 33147
      HEAP32[$235 >> 2] = $42; //@line 33148
      $236 = $ReallocAsyncCtx11 + 8 | 0; //@line 33149
      HEAP32[$236 >> 2] = $80; //@line 33150
      sp = STACKTOP; //@line 33151
      STACKTOP = sp; //@line 33152
      return;
     } else {
      $222 = HEAP32[$34 + 1328 >> 2] | 0; //@line 33155
      HEAP32[$74 >> 2] = 318; //@line 33156
      HEAP32[$74 + 4 >> 2] = 0; //@line 33158
      $ReallocAsyncCtx23 = _emscripten_realloc_async_context(24) | 0; //@line 33159
      HEAP32[$$byval_copy49 >> 2] = HEAP32[$74 >> 2]; //@line 33160
      HEAP32[$$byval_copy49 + 4 >> 2] = HEAP32[$74 + 4 >> 2]; //@line 33160
      $223 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($222, $34, $$byval_copy49) | 0; //@line 33161
      if (___async) {
       HEAP32[$ReallocAsyncCtx23 >> 2] = 327; //@line 33164
       $224 = $ReallocAsyncCtx23 + 4 | 0; //@line 33165
       HEAP32[$224 >> 2] = $74; //@line 33166
       $225 = $ReallocAsyncCtx23 + 8 | 0; //@line 33167
       HEAP32[$225 >> 2] = $34; //@line 33168
       $226 = $ReallocAsyncCtx23 + 12 | 0; //@line 33169
       HEAP32[$226 >> 2] = $22; //@line 33170
       $227 = $ReallocAsyncCtx23 + 16 | 0; //@line 33171
       HEAP32[$227 >> 2] = $42; //@line 33172
       $228 = $ReallocAsyncCtx23 + 20 | 0; //@line 33173
       HEAP32[$228 >> 2] = $80; //@line 33174
       sp = STACKTOP; //@line 33175
       STACKTOP = sp; //@line 33176
       return;
      }
      HEAP32[___async_retval >> 2] = $223; //@line 33179
      ___async_unwind = 0; //@line 33180
      HEAP32[$ReallocAsyncCtx23 >> 2] = 327; //@line 33181
      $224 = $ReallocAsyncCtx23 + 4 | 0; //@line 33182
      HEAP32[$224 >> 2] = $74; //@line 33183
      $225 = $ReallocAsyncCtx23 + 8 | 0; //@line 33184
      HEAP32[$225 >> 2] = $34; //@line 33185
      $226 = $ReallocAsyncCtx23 + 12 | 0; //@line 33186
      HEAP32[$226 >> 2] = $22; //@line 33187
      $227 = $ReallocAsyncCtx23 + 16 | 0; //@line 33188
      HEAP32[$227 >> 2] = $42; //@line 33189
      $228 = $ReallocAsyncCtx23 + 20 | 0; //@line 33190
      HEAP32[$228 >> 2] = $80; //@line 33191
      sp = STACKTOP; //@line 33192
      STACKTOP = sp; //@line 33193
      return;
     }
    }
   } while (0);
   $238 = HEAP32[$$sink233 >> 2] | 0; //@line 33197
   $240 = HEAP8[$30 + 5 >> 0] | 0; //@line 33199
   $249 = $240 & 15; //@line 33208
   $250 = $249 & 255; //@line 33209
   $251 = $250 + 8 | 0; //@line 33210
   $252 = $251 & 255; //@line 33211
   $253 = $26 + -4 | 0; //@line 33212
   $274 = HEAPU8[$30 + ($26 + -3) >> 0] << 8 | HEAPU8[$30 + $253 >> 0] | HEAPU8[$30 + ($26 + -2) >> 0] << 16 | HEAPU8[$30 + ($26 + -1) >> 0] << 24; //@line 33233
   $275 = (HEAPU8[$30 + 7 >> 0] << 8 | HEAPU8[$30 + 6 >> 0]) - $238 | 0; //@line 33234
   $276 = $275 & 65535; //@line 33235
   if ($276 >>> 0 < 32768) {
    $278 = $276 + $238 | 0; //@line 33238
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(172) | 0; //@line 33240
    __Z11compute_micPKhtS0_jhjPj($30, $253 & 65535, $$1173, $200, 1, $278, $60) | 0; //@line 33241
    if (___async) {
     HEAP32[$ReallocAsyncCtx3 >> 2] = 330; //@line 33244
     $280 = $ReallocAsyncCtx3 + 4 | 0; //@line 33245
     HEAP32[$280 >> 2] = $278; //@line 33246
     $281 = $ReallocAsyncCtx3 + 8 | 0; //@line 33247
     HEAP8[$281 >> 0] = $240; //@line 33248
     $282 = $ReallocAsyncCtx3 + 12 | 0; //@line 33249
     HEAP32[$282 >> 2] = $4; //@line 33250
     $283 = $ReallocAsyncCtx3 + 16 | 0; //@line 33251
     HEAP32[$283 >> 2] = $6; //@line 33252
     $284 = $ReallocAsyncCtx3 + 20 | 0; //@line 33253
     HEAP32[$284 >> 2] = $$1175; //@line 33254
     $285 = $ReallocAsyncCtx3 + 24 | 0; //@line 33255
     HEAP8[$285 >> 0] = $252; //@line 33256
     $286 = $ReallocAsyncCtx3 + 28 | 0; //@line 33257
     HEAP32[$286 >> 2] = $251; //@line 33258
     $287 = $ReallocAsyncCtx3 + 32 | 0; //@line 33259
     HEAP32[$287 >> 2] = $10; //@line 33260
     $288 = $ReallocAsyncCtx3 + 36 | 0; //@line 33261
     HEAP32[$288 >> 2] = $250; //@line 33262
     $289 = $ReallocAsyncCtx3 + 40 | 0; //@line 33263
     HEAP32[$289 >> 2] = $$1171; //@line 33264
     $290 = $ReallocAsyncCtx3 + 44 | 0; //@line 33265
     HEAP32[$290 >> 2] = $20; //@line 33266
     $291 = $ReallocAsyncCtx3 + 48 | 0; //@line 33267
     HEAP8[$291 >> 0] = $$1169; //@line 33268
     $292 = $ReallocAsyncCtx3 + 52 | 0; //@line 33269
     HEAP32[$292 >> 2] = $22; //@line 33270
     $293 = $ReallocAsyncCtx3 + 56 | 0; //@line 33271
     HEAP32[$293 >> 2] = $200; //@line 33272
     $294 = $ReallocAsyncCtx3 + 60 | 0; //@line 33273
     HEAP32[$294 >> 2] = $24; //@line 33274
     $295 = $ReallocAsyncCtx3 + 64 | 0; //@line 33275
     HEAP32[$295 >> 2] = $276; //@line 33276
     $296 = $ReallocAsyncCtx3 + 68 | 0; //@line 33277
     HEAP32[$296 >> 2] = $253; //@line 33278
     $297 = $ReallocAsyncCtx3 + 72 | 0; //@line 33279
     HEAP32[$297 >> 2] = $28; //@line 33280
     $298 = $ReallocAsyncCtx3 + 76 | 0; //@line 33281
     HEAP32[$298 >> 2] = $$1173; //@line 33282
     $299 = $ReallocAsyncCtx3 + 80 | 0; //@line 33283
     HEAP32[$299 >> 2] = $30; //@line 33284
     $300 = $ReallocAsyncCtx3 + 84 | 0; //@line 33285
     HEAP32[$300 >> 2] = $34; //@line 33286
     $301 = $ReallocAsyncCtx3 + 88 | 0; //@line 33287
     HEAP32[$301 >> 2] = $36; //@line 33288
     $302 = $ReallocAsyncCtx3 + 92 | 0; //@line 33289
     HEAP32[$302 >> 2] = $40; //@line 33290
     $303 = $ReallocAsyncCtx3 + 96 | 0; //@line 33291
     HEAP8[$303 >> 0] = $44; //@line 33292
     $304 = $ReallocAsyncCtx3 + 100 | 0; //@line 33293
     HEAP32[$304 >> 2] = $42; //@line 33294
     $305 = $ReallocAsyncCtx3 + 104 | 0; //@line 33295
     HEAP32[$305 >> 2] = $48; //@line 33296
     $306 = $ReallocAsyncCtx3 + 108 | 0; //@line 33297
     HEAP32[$306 >> 2] = $274; //@line 33298
     $307 = $ReallocAsyncCtx3 + 112 | 0; //@line 33299
     HEAP32[$307 >> 2] = $52; //@line 33300
     $308 = $ReallocAsyncCtx3 + 116 | 0; //@line 33301
     HEAP32[$308 >> 2] = $54; //@line 33302
     $309 = $ReallocAsyncCtx3 + 120 | 0; //@line 33303
     HEAP32[$309 >> 2] = $56; //@line 33304
     $310 = $ReallocAsyncCtx3 + 124 | 0; //@line 33305
     HEAP32[$310 >> 2] = $58; //@line 33306
     $311 = $ReallocAsyncCtx3 + 128 | 0; //@line 33307
     HEAP32[$311 >> 2] = $60; //@line 33308
     $312 = $ReallocAsyncCtx3 + 132 | 0; //@line 33309
     HEAP32[$312 >> 2] = $62; //@line 33310
     $313 = $ReallocAsyncCtx3 + 136 | 0; //@line 33311
     HEAP32[$313 >> 2] = $64; //@line 33312
     $314 = $ReallocAsyncCtx3 + 140 | 0; //@line 33313
     HEAP32[$314 >> 2] = $66; //@line 33314
     $315 = $ReallocAsyncCtx3 + 144 | 0; //@line 33315
     HEAP32[$315 >> 2] = $68; //@line 33316
     $316 = $ReallocAsyncCtx3 + 148 | 0; //@line 33317
     HEAP8[$316 >> 0] = $trunc; //@line 33318
     $317 = $ReallocAsyncCtx3 + 152 | 0; //@line 33319
     HEAP32[$317 >> 2] = $72; //@line 33320
     $318 = $ReallocAsyncCtx3 + 156 | 0; //@line 33321
     HEAP8[$318 >> 0] = $249; //@line 33322
     $319 = $ReallocAsyncCtx3 + 160 | 0; //@line 33323
     HEAP32[$319 >> 2] = $80; //@line 33324
     $320 = $ReallocAsyncCtx3 + 164 | 0; //@line 33325
     HEAP32[$320 >> 2] = $82; //@line 33326
     $321 = $ReallocAsyncCtx3 + 168 | 0; //@line 33327
     HEAP32[$321 >> 2] = $86; //@line 33328
     sp = STACKTOP; //@line 33329
     STACKTOP = sp; //@line 33330
     return;
    }
    ___async_unwind = 0; //@line 33332
    HEAP32[$ReallocAsyncCtx3 >> 2] = 330; //@line 33333
    $280 = $ReallocAsyncCtx3 + 4 | 0; //@line 33334
    HEAP32[$280 >> 2] = $278; //@line 33335
    $281 = $ReallocAsyncCtx3 + 8 | 0; //@line 33336
    HEAP8[$281 >> 0] = $240; //@line 33337
    $282 = $ReallocAsyncCtx3 + 12 | 0; //@line 33338
    HEAP32[$282 >> 2] = $4; //@line 33339
    $283 = $ReallocAsyncCtx3 + 16 | 0; //@line 33340
    HEAP32[$283 >> 2] = $6; //@line 33341
    $284 = $ReallocAsyncCtx3 + 20 | 0; //@line 33342
    HEAP32[$284 >> 2] = $$1175; //@line 33343
    $285 = $ReallocAsyncCtx3 + 24 | 0; //@line 33344
    HEAP8[$285 >> 0] = $252; //@line 33345
    $286 = $ReallocAsyncCtx3 + 28 | 0; //@line 33346
    HEAP32[$286 >> 2] = $251; //@line 33347
    $287 = $ReallocAsyncCtx3 + 32 | 0; //@line 33348
    HEAP32[$287 >> 2] = $10; //@line 33349
    $288 = $ReallocAsyncCtx3 + 36 | 0; //@line 33350
    HEAP32[$288 >> 2] = $250; //@line 33351
    $289 = $ReallocAsyncCtx3 + 40 | 0; //@line 33352
    HEAP32[$289 >> 2] = $$1171; //@line 33353
    $290 = $ReallocAsyncCtx3 + 44 | 0; //@line 33354
    HEAP32[$290 >> 2] = $20; //@line 33355
    $291 = $ReallocAsyncCtx3 + 48 | 0; //@line 33356
    HEAP8[$291 >> 0] = $$1169; //@line 33357
    $292 = $ReallocAsyncCtx3 + 52 | 0; //@line 33358
    HEAP32[$292 >> 2] = $22; //@line 33359
    $293 = $ReallocAsyncCtx3 + 56 | 0; //@line 33360
    HEAP32[$293 >> 2] = $200; //@line 33361
    $294 = $ReallocAsyncCtx3 + 60 | 0; //@line 33362
    HEAP32[$294 >> 2] = $24; //@line 33363
    $295 = $ReallocAsyncCtx3 + 64 | 0; //@line 33364
    HEAP32[$295 >> 2] = $276; //@line 33365
    $296 = $ReallocAsyncCtx3 + 68 | 0; //@line 33366
    HEAP32[$296 >> 2] = $253; //@line 33367
    $297 = $ReallocAsyncCtx3 + 72 | 0; //@line 33368
    HEAP32[$297 >> 2] = $28; //@line 33369
    $298 = $ReallocAsyncCtx3 + 76 | 0; //@line 33370
    HEAP32[$298 >> 2] = $$1173; //@line 33371
    $299 = $ReallocAsyncCtx3 + 80 | 0; //@line 33372
    HEAP32[$299 >> 2] = $30; //@line 33373
    $300 = $ReallocAsyncCtx3 + 84 | 0; //@line 33374
    HEAP32[$300 >> 2] = $34; //@line 33375
    $301 = $ReallocAsyncCtx3 + 88 | 0; //@line 33376
    HEAP32[$301 >> 2] = $36; //@line 33377
    $302 = $ReallocAsyncCtx3 + 92 | 0; //@line 33378
    HEAP32[$302 >> 2] = $40; //@line 33379
    $303 = $ReallocAsyncCtx3 + 96 | 0; //@line 33380
    HEAP8[$303 >> 0] = $44; //@line 33381
    $304 = $ReallocAsyncCtx3 + 100 | 0; //@line 33382
    HEAP32[$304 >> 2] = $42; //@line 33383
    $305 = $ReallocAsyncCtx3 + 104 | 0; //@line 33384
    HEAP32[$305 >> 2] = $48; //@line 33385
    $306 = $ReallocAsyncCtx3 + 108 | 0; //@line 33386
    HEAP32[$306 >> 2] = $274; //@line 33387
    $307 = $ReallocAsyncCtx3 + 112 | 0; //@line 33388
    HEAP32[$307 >> 2] = $52; //@line 33389
    $308 = $ReallocAsyncCtx3 + 116 | 0; //@line 33390
    HEAP32[$308 >> 2] = $54; //@line 33391
    $309 = $ReallocAsyncCtx3 + 120 | 0; //@line 33392
    HEAP32[$309 >> 2] = $56; //@line 33393
    $310 = $ReallocAsyncCtx3 + 124 | 0; //@line 33394
    HEAP32[$310 >> 2] = $58; //@line 33395
    $311 = $ReallocAsyncCtx3 + 128 | 0; //@line 33396
    HEAP32[$311 >> 2] = $60; //@line 33397
    $312 = $ReallocAsyncCtx3 + 132 | 0; //@line 33398
    HEAP32[$312 >> 2] = $62; //@line 33399
    $313 = $ReallocAsyncCtx3 + 136 | 0; //@line 33400
    HEAP32[$313 >> 2] = $64; //@line 33401
    $314 = $ReallocAsyncCtx3 + 140 | 0; //@line 33402
    HEAP32[$314 >> 2] = $66; //@line 33403
    $315 = $ReallocAsyncCtx3 + 144 | 0; //@line 33404
    HEAP32[$315 >> 2] = $68; //@line 33405
    $316 = $ReallocAsyncCtx3 + 148 | 0; //@line 33406
    HEAP8[$316 >> 0] = $trunc; //@line 33407
    $317 = $ReallocAsyncCtx3 + 152 | 0; //@line 33408
    HEAP32[$317 >> 2] = $72; //@line 33409
    $318 = $ReallocAsyncCtx3 + 156 | 0; //@line 33410
    HEAP8[$318 >> 0] = $249; //@line 33411
    $319 = $ReallocAsyncCtx3 + 160 | 0; //@line 33412
    HEAP32[$319 >> 2] = $80; //@line 33413
    $320 = $ReallocAsyncCtx3 + 164 | 0; //@line 33414
    HEAP32[$320 >> 2] = $82; //@line 33415
    $321 = $ReallocAsyncCtx3 + 168 | 0; //@line 33416
    HEAP32[$321 >> 2] = $86; //@line 33417
    sp = STACKTOP; //@line 33418
    STACKTOP = sp; //@line 33419
    return;
   } else {
    $324 = $238 + 65536 + ($275 << 16 >> 16) | 0; //@line 33424
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(176) | 0; //@line 33426
    __Z11compute_micPKhtS0_jhjPj($30, $253 & 65535, $$1173, $200, 1, $324, $60) | 0; //@line 33427
    if (___async) {
     HEAP32[$ReallocAsyncCtx2 >> 2] = 331; //@line 33430
     $326 = $ReallocAsyncCtx2 + 4 | 0; //@line 33431
     HEAP32[$326 >> 2] = $324; //@line 33432
     $327 = $ReallocAsyncCtx2 + 8 | 0; //@line 33433
     HEAP8[$327 >> 0] = $240; //@line 33434
     $328 = $ReallocAsyncCtx2 + 12 | 0; //@line 33435
     HEAP32[$328 >> 2] = $4; //@line 33436
     $329 = $ReallocAsyncCtx2 + 16 | 0; //@line 33437
     HEAP32[$329 >> 2] = $6; //@line 33438
     $330 = $ReallocAsyncCtx2 + 20 | 0; //@line 33439
     HEAP32[$330 >> 2] = $$1175; //@line 33440
     $331 = $ReallocAsyncCtx2 + 24 | 0; //@line 33441
     HEAP8[$331 >> 0] = $252; //@line 33442
     $332 = $ReallocAsyncCtx2 + 28 | 0; //@line 33443
     HEAP32[$332 >> 2] = $251; //@line 33444
     $333 = $ReallocAsyncCtx2 + 32 | 0; //@line 33445
     HEAP32[$333 >> 2] = $10; //@line 33446
     $334 = $ReallocAsyncCtx2 + 36 | 0; //@line 33447
     HEAP32[$334 >> 2] = $250; //@line 33448
     $335 = $ReallocAsyncCtx2 + 40 | 0; //@line 33449
     HEAP32[$335 >> 2] = $$1171; //@line 33450
     $336 = $ReallocAsyncCtx2 + 44 | 0; //@line 33451
     HEAP32[$336 >> 2] = $20; //@line 33452
     $337 = $ReallocAsyncCtx2 + 48 | 0; //@line 33453
     HEAP8[$337 >> 0] = $$1169; //@line 33454
     $338 = $ReallocAsyncCtx2 + 52 | 0; //@line 33455
     HEAP32[$338 >> 2] = $22; //@line 33456
     $339 = $ReallocAsyncCtx2 + 56 | 0; //@line 33457
     HEAP32[$339 >> 2] = $200; //@line 33458
     $340 = $ReallocAsyncCtx2 + 60 | 0; //@line 33459
     HEAP32[$340 >> 2] = $24; //@line 33460
     $341 = $ReallocAsyncCtx2 + 64 | 0; //@line 33461
     HEAP32[$341 >> 2] = $276; //@line 33462
     $342 = $ReallocAsyncCtx2 + 68 | 0; //@line 33463
     HEAP32[$342 >> 2] = $253; //@line 33464
     $343 = $ReallocAsyncCtx2 + 72 | 0; //@line 33465
     HEAP32[$343 >> 2] = $28; //@line 33466
     $344 = $ReallocAsyncCtx2 + 76 | 0; //@line 33467
     HEAP32[$344 >> 2] = $$1173; //@line 33468
     $345 = $ReallocAsyncCtx2 + 80 | 0; //@line 33469
     HEAP32[$345 >> 2] = $30; //@line 33470
     $346 = $ReallocAsyncCtx2 + 84 | 0; //@line 33471
     HEAP32[$346 >> 2] = $34; //@line 33472
     $347 = $ReallocAsyncCtx2 + 88 | 0; //@line 33473
     HEAP32[$347 >> 2] = $36; //@line 33474
     $348 = $ReallocAsyncCtx2 + 92 | 0; //@line 33475
     HEAP32[$348 >> 2] = $40; //@line 33476
     $349 = $ReallocAsyncCtx2 + 96 | 0; //@line 33477
     HEAP8[$349 >> 0] = $44; //@line 33478
     $350 = $ReallocAsyncCtx2 + 100 | 0; //@line 33479
     HEAP32[$350 >> 2] = $42; //@line 33480
     $351 = $ReallocAsyncCtx2 + 104 | 0; //@line 33481
     HEAP32[$351 >> 2] = $48; //@line 33482
     $352 = $ReallocAsyncCtx2 + 108 | 0; //@line 33483
     HEAP32[$352 >> 2] = $274; //@line 33484
     $353 = $ReallocAsyncCtx2 + 112 | 0; //@line 33485
     HEAP32[$353 >> 2] = $52; //@line 33486
     $354 = $ReallocAsyncCtx2 + 116 | 0; //@line 33487
     HEAP32[$354 >> 2] = $54; //@line 33488
     $355 = $ReallocAsyncCtx2 + 120 | 0; //@line 33489
     HEAP32[$355 >> 2] = $56; //@line 33490
     $356 = $ReallocAsyncCtx2 + 124 | 0; //@line 33491
     HEAP32[$356 >> 2] = $58; //@line 33492
     $357 = $ReallocAsyncCtx2 + 128 | 0; //@line 33493
     HEAP32[$357 >> 2] = $60; //@line 33494
     $358 = $ReallocAsyncCtx2 + 132 | 0; //@line 33495
     HEAP32[$358 >> 2] = $62; //@line 33496
     $359 = $ReallocAsyncCtx2 + 136 | 0; //@line 33497
     HEAP32[$359 >> 2] = $64; //@line 33498
     $360 = $ReallocAsyncCtx2 + 140 | 0; //@line 33499
     HEAP32[$360 >> 2] = $66; //@line 33500
     $361 = $ReallocAsyncCtx2 + 144 | 0; //@line 33501
     HEAP32[$361 >> 2] = $68; //@line 33502
     $362 = $ReallocAsyncCtx2 + 148 | 0; //@line 33503
     HEAP8[$362 >> 0] = $trunc; //@line 33504
     $363 = $ReallocAsyncCtx2 + 152 | 0; //@line 33505
     HEAP32[$363 >> 2] = $72; //@line 33506
     $364 = $ReallocAsyncCtx2 + 156 | 0; //@line 33507
     HEAP8[$364 >> 0] = $249; //@line 33508
     $365 = $ReallocAsyncCtx2 + 160 | 0; //@line 33509
     HEAP32[$365 >> 2] = $238; //@line 33510
     $366 = $ReallocAsyncCtx2 + 164 | 0; //@line 33511
     HEAP32[$366 >> 2] = $80; //@line 33512
     $367 = $ReallocAsyncCtx2 + 168 | 0; //@line 33513
     HEAP32[$367 >> 2] = $82; //@line 33514
     $368 = $ReallocAsyncCtx2 + 172 | 0; //@line 33515
     HEAP32[$368 >> 2] = $86; //@line 33516
     sp = STACKTOP; //@line 33517
     STACKTOP = sp; //@line 33518
     return;
    }
    ___async_unwind = 0; //@line 33520
    HEAP32[$ReallocAsyncCtx2 >> 2] = 331; //@line 33521
    $326 = $ReallocAsyncCtx2 + 4 | 0; //@line 33522
    HEAP32[$326 >> 2] = $324; //@line 33523
    $327 = $ReallocAsyncCtx2 + 8 | 0; //@line 33524
    HEAP8[$327 >> 0] = $240; //@line 33525
    $328 = $ReallocAsyncCtx2 + 12 | 0; //@line 33526
    HEAP32[$328 >> 2] = $4; //@line 33527
    $329 = $ReallocAsyncCtx2 + 16 | 0; //@line 33528
    HEAP32[$329 >> 2] = $6; //@line 33529
    $330 = $ReallocAsyncCtx2 + 20 | 0; //@line 33530
    HEAP32[$330 >> 2] = $$1175; //@line 33531
    $331 = $ReallocAsyncCtx2 + 24 | 0; //@line 33532
    HEAP8[$331 >> 0] = $252; //@line 33533
    $332 = $ReallocAsyncCtx2 + 28 | 0; //@line 33534
    HEAP32[$332 >> 2] = $251; //@line 33535
    $333 = $ReallocAsyncCtx2 + 32 | 0; //@line 33536
    HEAP32[$333 >> 2] = $10; //@line 33537
    $334 = $ReallocAsyncCtx2 + 36 | 0; //@line 33538
    HEAP32[$334 >> 2] = $250; //@line 33539
    $335 = $ReallocAsyncCtx2 + 40 | 0; //@line 33540
    HEAP32[$335 >> 2] = $$1171; //@line 33541
    $336 = $ReallocAsyncCtx2 + 44 | 0; //@line 33542
    HEAP32[$336 >> 2] = $20; //@line 33543
    $337 = $ReallocAsyncCtx2 + 48 | 0; //@line 33544
    HEAP8[$337 >> 0] = $$1169; //@line 33545
    $338 = $ReallocAsyncCtx2 + 52 | 0; //@line 33546
    HEAP32[$338 >> 2] = $22; //@line 33547
    $339 = $ReallocAsyncCtx2 + 56 | 0; //@line 33548
    HEAP32[$339 >> 2] = $200; //@line 33549
    $340 = $ReallocAsyncCtx2 + 60 | 0; //@line 33550
    HEAP32[$340 >> 2] = $24; //@line 33551
    $341 = $ReallocAsyncCtx2 + 64 | 0; //@line 33552
    HEAP32[$341 >> 2] = $276; //@line 33553
    $342 = $ReallocAsyncCtx2 + 68 | 0; //@line 33554
    HEAP32[$342 >> 2] = $253; //@line 33555
    $343 = $ReallocAsyncCtx2 + 72 | 0; //@line 33556
    HEAP32[$343 >> 2] = $28; //@line 33557
    $344 = $ReallocAsyncCtx2 + 76 | 0; //@line 33558
    HEAP32[$344 >> 2] = $$1173; //@line 33559
    $345 = $ReallocAsyncCtx2 + 80 | 0; //@line 33560
    HEAP32[$345 >> 2] = $30; //@line 33561
    $346 = $ReallocAsyncCtx2 + 84 | 0; //@line 33562
    HEAP32[$346 >> 2] = $34; //@line 33563
    $347 = $ReallocAsyncCtx2 + 88 | 0; //@line 33564
    HEAP32[$347 >> 2] = $36; //@line 33565
    $348 = $ReallocAsyncCtx2 + 92 | 0; //@line 33566
    HEAP32[$348 >> 2] = $40; //@line 33567
    $349 = $ReallocAsyncCtx2 + 96 | 0; //@line 33568
    HEAP8[$349 >> 0] = $44; //@line 33569
    $350 = $ReallocAsyncCtx2 + 100 | 0; //@line 33570
    HEAP32[$350 >> 2] = $42; //@line 33571
    $351 = $ReallocAsyncCtx2 + 104 | 0; //@line 33572
    HEAP32[$351 >> 2] = $48; //@line 33573
    $352 = $ReallocAsyncCtx2 + 108 | 0; //@line 33574
    HEAP32[$352 >> 2] = $274; //@line 33575
    $353 = $ReallocAsyncCtx2 + 112 | 0; //@line 33576
    HEAP32[$353 >> 2] = $52; //@line 33577
    $354 = $ReallocAsyncCtx2 + 116 | 0; //@line 33578
    HEAP32[$354 >> 2] = $54; //@line 33579
    $355 = $ReallocAsyncCtx2 + 120 | 0; //@line 33580
    HEAP32[$355 >> 2] = $56; //@line 33581
    $356 = $ReallocAsyncCtx2 + 124 | 0; //@line 33582
    HEAP32[$356 >> 2] = $58; //@line 33583
    $357 = $ReallocAsyncCtx2 + 128 | 0; //@line 33584
    HEAP32[$357 >> 2] = $60; //@line 33585
    $358 = $ReallocAsyncCtx2 + 132 | 0; //@line 33586
    HEAP32[$358 >> 2] = $62; //@line 33587
    $359 = $ReallocAsyncCtx2 + 136 | 0; //@line 33588
    HEAP32[$359 >> 2] = $64; //@line 33589
    $360 = $ReallocAsyncCtx2 + 140 | 0; //@line 33590
    HEAP32[$360 >> 2] = $66; //@line 33591
    $361 = $ReallocAsyncCtx2 + 144 | 0; //@line 33592
    HEAP32[$361 >> 2] = $68; //@line 33593
    $362 = $ReallocAsyncCtx2 + 148 | 0; //@line 33594
    HEAP8[$362 >> 0] = $trunc; //@line 33595
    $363 = $ReallocAsyncCtx2 + 152 | 0; //@line 33596
    HEAP32[$363 >> 2] = $72; //@line 33597
    $364 = $ReallocAsyncCtx2 + 156 | 0; //@line 33598
    HEAP8[$364 >> 0] = $249; //@line 33599
    $365 = $ReallocAsyncCtx2 + 160 | 0; //@line 33600
    HEAP32[$365 >> 2] = $238; //@line 33601
    $366 = $ReallocAsyncCtx2 + 164 | 0; //@line 33602
    HEAP32[$366 >> 2] = $80; //@line 33603
    $367 = $ReallocAsyncCtx2 + 168 | 0; //@line 33604
    HEAP32[$367 >> 2] = $82; //@line 33605
    $368 = $ReallocAsyncCtx2 + 172 | 0; //@line 33606
    HEAP32[$368 >> 2] = $86; //@line 33607
    sp = STACKTOP; //@line 33608
    STACKTOP = sp; //@line 33609
    return;
   }
   break;
  }
 case 7:
  {
   $369 = $34 + 638 | 0; //@line 33614
   _memcpy($369 | 0, $30 + 1 | 0, $26 | 0) | 0; //@line 33616
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($64) | 0) >> 2] = 3; //@line 33618
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($64) | 0) + 4 >> 2] = 0; //@line 33621
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($64) | 0) + 12 >> 2] = $369; //@line 33624
   HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($64) | 0) + 16 >> 1] = $26 + 65535; //@line 33629
   $380 = $34 + 944 | 0; //@line 33630
   HEAP8[$380 >> 0] = HEAP8[$380 >> 0] | 2; //@line 33633
   $409 = $34 + 944 | 0; //@line 33634
   HEAP8[$409 >> 0] = HEAP8[$409 >> 0] | 32; //@line 33637
   $412 = HEAP32[$22 >> 2] | 0; //@line 33638
   $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 33640
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($412, $34 + 996 | 0, 1); //@line 33641
   if (___async) {
    HEAP32[$ReallocAsyncCtx5 >> 2] = 352; //@line 33644
    $414 = $ReallocAsyncCtx5 + 4 | 0; //@line 33645
    HEAP32[$414 >> 2] = $42; //@line 33646
    $415 = $ReallocAsyncCtx5 + 8 | 0; //@line 33647
    HEAP32[$415 >> 2] = $80; //@line 33648
    sp = STACKTOP; //@line 33649
    STACKTOP = sp; //@line 33650
    return;
   }
   ___async_unwind = 0; //@line 33652
   HEAP32[$ReallocAsyncCtx5 >> 2] = 352; //@line 33653
   $414 = $ReallocAsyncCtx5 + 4 | 0; //@line 33654
   HEAP32[$414 >> 2] = $42; //@line 33655
   $415 = $ReallocAsyncCtx5 + 8 | 0; //@line 33656
   HEAP32[$415 >> 2] = $80; //@line 33657
   sp = STACKTOP; //@line 33658
   STACKTOP = sp; //@line 33659
   return;
  }
 default:
  {
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($64) | 0) + 4 >> 2] = 1; //@line 33665
   _mbed_tracef(16, 13728, 13867, $2); //@line 33666
   $385 = $34 + 968 | 0; //@line 33667
   HEAP32[$385 >> 2] = HEAP32[$385 >> 2] | 64; //@line 33670
   if (!(HEAP8[$34 + 373 >> 0] | 0)) {
    $400 = $34 + 944 | 0; //@line 33675
    HEAP8[$400 >> 0] = HEAP8[$400 >> 0] | 34; //@line 33678
    $403 = HEAP32[$22 >> 2] | 0; //@line 33679
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 33681
    __ZN18LoRaWANTimeHandler5startER13timer_event_tj($403, $34 + 996 | 0, 1); //@line 33682
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 351; //@line 33685
     $405 = $ReallocAsyncCtx6 + 4 | 0; //@line 33686
     HEAP32[$405 >> 2] = $34; //@line 33687
     $406 = $ReallocAsyncCtx6 + 8 | 0; //@line 33688
     HEAP32[$406 >> 2] = $22; //@line 33689
     $407 = $ReallocAsyncCtx6 + 12 | 0; //@line 33690
     HEAP32[$407 >> 2] = $42; //@line 33691
     $408 = $ReallocAsyncCtx6 + 16 | 0; //@line 33692
     HEAP32[$408 >> 2] = $80; //@line 33693
     sp = STACKTOP; //@line 33694
     STACKTOP = sp; //@line 33695
     return;
    }
    ___async_unwind = 0; //@line 33697
    HEAP32[$ReallocAsyncCtx6 >> 2] = 351; //@line 33698
    $405 = $ReallocAsyncCtx6 + 4 | 0; //@line 33699
    HEAP32[$405 >> 2] = $34; //@line 33700
    $406 = $ReallocAsyncCtx6 + 8 | 0; //@line 33701
    HEAP32[$406 >> 2] = $22; //@line 33702
    $407 = $ReallocAsyncCtx6 + 12 | 0; //@line 33703
    HEAP32[$407 >> 2] = $42; //@line 33704
    $408 = $ReallocAsyncCtx6 + 16 | 0; //@line 33705
    HEAP32[$408 >> 2] = $80; //@line 33706
    sp = STACKTOP; //@line 33707
    STACKTOP = sp; //@line 33708
    return;
   } else {
    $392 = HEAP32[$34 + 1328 >> 2] | 0; //@line 33711
    HEAP32[$18 >> 2] = 318; //@line 33712
    HEAP32[$18 + 4 >> 2] = 0; //@line 33714
    $ReallocAsyncCtx18 = _emscripten_realloc_async_context(24) | 0; //@line 33715
    HEAP32[$$byval_copy50 >> 2] = HEAP32[$18 >> 2]; //@line 33716
    HEAP32[$$byval_copy50 + 4 >> 2] = HEAP32[$18 + 4 >> 2]; //@line 33716
    $393 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($392, $34, $$byval_copy50) | 0; //@line 33717
    if (___async) {
     HEAP32[$ReallocAsyncCtx18 >> 2] = 349; //@line 33720
     $394 = $ReallocAsyncCtx18 + 4 | 0; //@line 33721
     HEAP32[$394 >> 2] = $18; //@line 33722
     $395 = $ReallocAsyncCtx18 + 8 | 0; //@line 33723
     HEAP32[$395 >> 2] = $34; //@line 33724
     $396 = $ReallocAsyncCtx18 + 12 | 0; //@line 33725
     HEAP32[$396 >> 2] = $22; //@line 33726
     $397 = $ReallocAsyncCtx18 + 16 | 0; //@line 33727
     HEAP32[$397 >> 2] = $42; //@line 33728
     $398 = $ReallocAsyncCtx18 + 20 | 0; //@line 33729
     HEAP32[$398 >> 2] = $80; //@line 33730
     sp = STACKTOP; //@line 33731
     STACKTOP = sp; //@line 33732
     return;
    }
    HEAP32[___async_retval >> 2] = $393; //@line 33735
    ___async_unwind = 0; //@line 33736
    HEAP32[$ReallocAsyncCtx18 >> 2] = 349; //@line 33737
    $394 = $ReallocAsyncCtx18 + 4 | 0; //@line 33738
    HEAP32[$394 >> 2] = $18; //@line 33739
    $395 = $ReallocAsyncCtx18 + 8 | 0; //@line 33740
    HEAP32[$395 >> 2] = $34; //@line 33741
    $396 = $ReallocAsyncCtx18 + 12 | 0; //@line 33742
    HEAP32[$396 >> 2] = $22; //@line 33743
    $397 = $ReallocAsyncCtx18 + 16 | 0; //@line 33744
    HEAP32[$397 >> 2] = $42; //@line 33745
    $398 = $ReallocAsyncCtx18 + 20 | 0; //@line 33746
    HEAP32[$398 >> 2] = $80; //@line 33747
    sp = STACKTOP; //@line 33748
    STACKTOP = sp; //@line 33749
    return;
   }
  }
 }
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_190($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $$byval_copy22 = 0, $$byval_copy23 = 0, $$pre20 = 0, $10 = 0, $101 = 0, $106 = 0, $112 = 0, $118 = 0, $12 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $143 = 0, $154 = 0, $158 = 0, $16 = 0, $162 = 0, $167 = 0, $173 = 0, $174 = 0, $179 = 0, $18 = 0, $183 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $2 = 0, $20 = 0, $200 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $219 = 0, $22 = 0, $221 = 0, $222 = 0, $227 = 0, $229 = 0, $230 = 0, $231 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $255 = 0, $256 = 0, $258 = 0, $259 = 0, $260 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $296 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $31 = 0, $310 = 0, $311 = 0, $313 = 0, $314 = 0, $315 = 0, $317 = 0, $318 = 0, $319 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $327 = 0, $331 = 0, $332 = 0, $334 = 0, $335 = 0, $336 = 0, $338 = 0, $339 = 0, $340 = 0, $341 = 0, $4 = 0, $45 = 0, $53 = 0, $56 = 0, $6 = 0, $61 = 0, $65 = 0, $66 = 0, $8 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 34173
 STACKTOP = STACKTOP + 32 | 0; //@line 34174
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 34174
 $$byval_copy23 = sp + 16 | 0; //@line 34175
 $$byval_copy22 = sp + 8 | 0; //@line 34176
 $$byval_copy = sp; //@line 34177
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34179
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34181
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 34183
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 34185
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 34187
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 34189
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 34191
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 34193
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 34195
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 34197
 $21 = $2 + 944 | 0; //@line 34198
 $22 = HEAP8[$21 >> 0] | 0; //@line 34199
 $$pre20 = $2 + 968 | 0; //@line 34202
 if ($22 & 32) {
  $25 = HEAP32[$$pre20 >> 2] | 0; //@line 34204
  if ($25 & 64 | 0) {
   HEAP32[$$pre20 >> 2] = $25 & -66; //@line 34209
  }
  do {
   if (!($22 & 9)) {
    label = 9; //@line 34215
   } else {
    $31 = $2 + 288 | 0; //@line 34217
    if ((HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($31) | 0) + 4 >> 2] | 0) != 2) {
     if ((HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) + 4 >> 2] | 0) != 2) {
      label = 9; //@line 34229
      break;
     }
    }
    HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 34235
    __ZN14LoRaMacCommand20clear_command_bufferEv($2 + 4 | 0); //@line 34237
    $45 = HEAP8[$2 + 895 >> 0] | 0; //@line 34239
    HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($31) | 0) + 11 >> 0] = $45; //@line 34242
    HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($31) | 0) + 10 >> 0] = 0; //@line 34245
    HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($31) | 0) + 12 >> 2] = 0; //@line 34248
    $154 = $2 + 373 | 0; //@line 34250
   }
  } while (0);
  do {
   if ((label | 0) == 9) {
    $53 = $2 + 373 | 0; //@line 34255
    if (!(HEAP8[$53 >> 0] | 0)) {
     $56 = HEAP8[$21 >> 0] | 0; //@line 34259
     if (!($56 & 9)) {
      $154 = $53; //@line 34263
     } else {
      if ($56 & 8) {
       $61 = $2 + 264 | 0; //@line 34268
       if (!(HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($61) | 0) >> 2] | 0)) {
        $65 = $2 + 897 | 0; //@line 34273
        $66 = HEAP8[$65 >> 0] | 0; //@line 34274
        HEAP8[(__ZN11LoRaMacMlme16get_confirmationEv($61) | 0) + 14 >> 0] = $66; //@line 34277
        if (!(HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($61) | 0) + 4 >> 2] | 0)) {
         HEAP32[$2 + 956 >> 2] = 0; //@line 34284
         HEAP8[$2 + 380 >> 0] = 0; //@line 34286
         HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 34289
         $154 = $53; //@line 34290
         break;
        }
        if ((HEAPU8[$65 >> 0] | 0) >= (HEAPU8[$2 + 896 >> 0] | 0)) {
         HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 34300
         $154 = $53; //@line 34301
         break;
        }
        HEAP8[$21 >> 0] = HEAP8[$21 >> 0] & -33; //@line 34306
        $86 = HEAP32[$2 + 1328 >> 2] | 0; //@line 34308
        HEAP32[$4 >> 2] = 391; //@line 34309
        HEAP32[$4 + 4 >> 2] = 0; //@line 34311
        $ReallocAsyncCtx10 = _emscripten_realloc_async_context(52) | 0; //@line 34312
        HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2]; //@line 34313
        HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 34313
        $87 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($86, $2, $$byval_copy) | 0; //@line 34314
        if (___async) {
         HEAP32[$ReallocAsyncCtx10 >> 2] = 392; //@line 34317
         $88 = $ReallocAsyncCtx10 + 4 | 0; //@line 34318
         HEAP32[$88 >> 2] = $21; //@line 34319
         $89 = $ReallocAsyncCtx10 + 8 | 0; //@line 34320
         HEAP32[$89 >> 2] = $2; //@line 34321
         $90 = $ReallocAsyncCtx10 + 12 | 0; //@line 34322
         HEAP32[$90 >> 2] = $6; //@line 34323
         $91 = $ReallocAsyncCtx10 + 16 | 0; //@line 34324
         HEAP32[$91 >> 2] = $8; //@line 34325
         $92 = $ReallocAsyncCtx10 + 20 | 0; //@line 34326
         HEAP32[$92 >> 2] = $10; //@line 34327
         $93 = $ReallocAsyncCtx10 + 24 | 0; //@line 34328
         HEAP32[$93 >> 2] = $14; //@line 34329
         $94 = $ReallocAsyncCtx10 + 28 | 0; //@line 34330
         HEAP32[$94 >> 2] = $16; //@line 34331
         $95 = $ReallocAsyncCtx10 + 32 | 0; //@line 34332
         HEAP32[$95 >> 2] = $4; //@line 34333
         $96 = $ReallocAsyncCtx10 + 36 | 0; //@line 34334
         HEAP32[$96 >> 2] = $$pre20; //@line 34335
         $97 = $ReallocAsyncCtx10 + 40 | 0; //@line 34336
         HEAP32[$97 >> 2] = $18; //@line 34337
         $98 = $ReallocAsyncCtx10 + 44 | 0; //@line 34338
         HEAP32[$98 >> 2] = $20; //@line 34339
         $99 = $ReallocAsyncCtx10 + 48 | 0; //@line 34340
         HEAP32[$99 >> 2] = $53; //@line 34341
         sp = STACKTOP; //@line 34342
         STACKTOP = sp; //@line 34343
         return;
        }
        HEAP32[___async_retval >> 2] = $87; //@line 34346
        ___async_unwind = 0; //@line 34347
        HEAP32[$ReallocAsyncCtx10 >> 2] = 392; //@line 34348
        $88 = $ReallocAsyncCtx10 + 4 | 0; //@line 34349
        HEAP32[$88 >> 2] = $21; //@line 34350
        $89 = $ReallocAsyncCtx10 + 8 | 0; //@line 34351
        HEAP32[$89 >> 2] = $2; //@line 34352
        $90 = $ReallocAsyncCtx10 + 12 | 0; //@line 34353
        HEAP32[$90 >> 2] = $6; //@line 34354
        $91 = $ReallocAsyncCtx10 + 16 | 0; //@line 34355
        HEAP32[$91 >> 2] = $8; //@line 34356
        $92 = $ReallocAsyncCtx10 + 20 | 0; //@line 34357
        HEAP32[$92 >> 2] = $10; //@line 34358
        $93 = $ReallocAsyncCtx10 + 24 | 0; //@line 34359
        HEAP32[$93 >> 2] = $14; //@line 34360
        $94 = $ReallocAsyncCtx10 + 28 | 0; //@line 34361
        HEAP32[$94 >> 2] = $16; //@line 34362
        $95 = $ReallocAsyncCtx10 + 32 | 0; //@line 34363
        HEAP32[$95 >> 2] = $4; //@line 34364
        $96 = $ReallocAsyncCtx10 + 36 | 0; //@line 34365
        HEAP32[$96 >> 2] = $$pre20; //@line 34366
        $97 = $ReallocAsyncCtx10 + 40 | 0; //@line 34367
        HEAP32[$97 >> 2] = $18; //@line 34368
        $98 = $ReallocAsyncCtx10 + 44 | 0; //@line 34369
        HEAP32[$98 >> 2] = $20; //@line 34370
        $99 = $ReallocAsyncCtx10 + 48 | 0; //@line 34371
        HEAP32[$99 >> 2] = $53; //@line 34372
        sp = STACKTOP; //@line 34373
        STACKTOP = sp; //@line 34374
        return;
       }
      }
      $101 = $2 + 380 | 0; //@line 34377
      $106 = HEAP8[$21 >> 0] | 0; //@line 34382
      if (($106 & 2) == 0 ? (HEAPU8[$101 >> 0] | 0) < (HEAPU8[$2 + 1128 >> 0] | 0) : 0) {
       HEAP8[$21 >> 0] = $106 & -33; //@line 34388
       $125 = HEAP32[$2 + 1328 >> 2] | 0; //@line 34390
       HEAP32[$12 >> 2] = 391; //@line 34391
       HEAP32[$12 + 4 >> 2] = 0; //@line 34393
       $ReallocAsyncCtx9 = _emscripten_realloc_async_context(52) | 0; //@line 34394
       HEAP32[$$byval_copy22 >> 2] = HEAP32[$12 >> 2]; //@line 34395
       HEAP32[$$byval_copy22 + 4 >> 2] = HEAP32[$12 + 4 >> 2]; //@line 34395
       $126 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($125, $2, $$byval_copy22) | 0; //@line 34396
       if (___async) {
        HEAP32[$ReallocAsyncCtx9 >> 2] = 394; //@line 34399
        $127 = $ReallocAsyncCtx9 + 4 | 0; //@line 34400
        HEAP32[$127 >> 2] = $21; //@line 34401
        $128 = $ReallocAsyncCtx9 + 8 | 0; //@line 34402
        HEAP32[$128 >> 2] = $2; //@line 34403
        $129 = $ReallocAsyncCtx9 + 12 | 0; //@line 34404
        HEAP32[$129 >> 2] = $6; //@line 34405
        $130 = $ReallocAsyncCtx9 + 16 | 0; //@line 34406
        HEAP32[$130 >> 2] = $8; //@line 34407
        $131 = $ReallocAsyncCtx9 + 20 | 0; //@line 34408
        HEAP32[$131 >> 2] = $10; //@line 34409
        $132 = $ReallocAsyncCtx9 + 24 | 0; //@line 34410
        HEAP32[$132 >> 2] = $14; //@line 34411
        $133 = $ReallocAsyncCtx9 + 28 | 0; //@line 34412
        HEAP32[$133 >> 2] = $16; //@line 34413
        $134 = $ReallocAsyncCtx9 + 32 | 0; //@line 34414
        HEAP32[$134 >> 2] = $$pre20; //@line 34415
        $135 = $ReallocAsyncCtx9 + 36 | 0; //@line 34416
        HEAP32[$135 >> 2] = $18; //@line 34417
        $136 = $ReallocAsyncCtx9 + 40 | 0; //@line 34418
        HEAP32[$136 >> 2] = $20; //@line 34419
        $137 = $ReallocAsyncCtx9 + 44 | 0; //@line 34420
        HEAP32[$137 >> 2] = $12; //@line 34421
        $138 = $ReallocAsyncCtx9 + 48 | 0; //@line 34422
        HEAP32[$138 >> 2] = $53; //@line 34423
        sp = STACKTOP; //@line 34424
        STACKTOP = sp; //@line 34425
        return;
       }
       HEAP32[___async_retval >> 2] = $126; //@line 34428
       ___async_unwind = 0; //@line 34429
       HEAP32[$ReallocAsyncCtx9 >> 2] = 394; //@line 34430
       $127 = $ReallocAsyncCtx9 + 4 | 0; //@line 34431
       HEAP32[$127 >> 2] = $21; //@line 34432
       $128 = $ReallocAsyncCtx9 + 8 | 0; //@line 34433
       HEAP32[$128 >> 2] = $2; //@line 34434
       $129 = $ReallocAsyncCtx9 + 12 | 0; //@line 34435
       HEAP32[$129 >> 2] = $6; //@line 34436
       $130 = $ReallocAsyncCtx9 + 16 | 0; //@line 34437
       HEAP32[$130 >> 2] = $8; //@line 34438
       $131 = $ReallocAsyncCtx9 + 20 | 0; //@line 34439
       HEAP32[$131 >> 2] = $10; //@line 34440
       $132 = $ReallocAsyncCtx9 + 24 | 0; //@line 34441
       HEAP32[$132 >> 2] = $14; //@line 34442
       $133 = $ReallocAsyncCtx9 + 28 | 0; //@line 34443
       HEAP32[$133 >> 2] = $16; //@line 34444
       $134 = $ReallocAsyncCtx9 + 32 | 0; //@line 34445
       HEAP32[$134 >> 2] = $$pre20; //@line 34446
       $135 = $ReallocAsyncCtx9 + 36 | 0; //@line 34447
       HEAP32[$135 >> 2] = $18; //@line 34448
       $136 = $ReallocAsyncCtx9 + 40 | 0; //@line 34449
       HEAP32[$136 >> 2] = $20; //@line 34450
       $137 = $ReallocAsyncCtx9 + 44 | 0; //@line 34451
       HEAP32[$137 >> 2] = $12; //@line 34452
       $138 = $ReallocAsyncCtx9 + 48 | 0; //@line 34453
       HEAP32[$138 >> 2] = $53; //@line 34454
       sp = STACKTOP; //@line 34455
       STACKTOP = sp; //@line 34456
       return;
      }
      if (!($106 & 2)) {
       __ZN14LoRaMacCommand20clear_command_bufferEv($2 + 4 | 0); //@line 34462
       $112 = $2 + 964 | 0; //@line 34463
       HEAP32[$112 >> 2] = (HEAP32[$112 >> 2] | 0) + 1; //@line 34466
      }
      HEAP8[$101 >> 0] = 0; //@line 34468
      if (!(HEAP8[$2 + 370 >> 0] | 0)) {
       $118 = $2 + 956 | 0; //@line 34473
       HEAP32[$118 >> 2] = (HEAP32[$118 >> 2] | 0) + 1; //@line 34476
      }
      HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 34480
      $154 = $53; //@line 34481
     }
    } else {
     $154 = $53; //@line 34484
    }
   }
  } while (0);
  do {
   if (HEAP8[$21 >> 0] & 2) {
    $143 = $2 + 288 | 0; //@line 34493
    if (!(HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($143) | 0) + 10 >> 0] | 0)) {
     if ((HEAPU8[$2 + 895 >> 0] | 0) <= (HEAPU8[$2 + 894 >> 0] | 0)) {
      break;
     }
    }
    HEAP8[$2 + 377 >> 0] = 0; //@line 34509
    HEAP8[$154 >> 0] = 0; //@line 34510
    if (!(HEAP8[$2 + 370 >> 0] | 0)) {
     $158 = $2 + 956 | 0; //@line 34515
     HEAP32[$158 >> 2] = (HEAP32[$158 >> 2] | 0) + 1; //@line 34518
    }
    $162 = HEAP8[$2 + 895 >> 0] | 0; //@line 34521
    HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($143) | 0) + 11 >> 0] = $162; //@line 34524
    HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 34527
   }
  } while (0);
  $167 = $2 + 377 | 0; //@line 34530
  if (HEAP8[$167 >> 0] | 0) {
   if (!(HEAP32[$$pre20 >> 2] & 16)) {
    HEAP8[$167 >> 0] = 0; //@line 34538
    $173 = $2 + 895 | 0; //@line 34539
    $174 = HEAP8[$173 >> 0] | 0; //@line 34540
    if (!(($174 & 255) < 9 ? ($174 & 255) < (HEAPU8[$2 + 894 >> 0] | 0) : 0)) {
     $200 = HEAP32[$2 >> 2] | 0; //@line 34547
     $203 = HEAP32[(HEAP32[$200 >> 2] | 0) + 16 >> 2] | 0; //@line 34550
     $ReallocAsyncCtx = _emscripten_realloc_async_context(52) | 0; //@line 34551
     FUNCTION_TABLE_vi[$203 & 1023]($200); //@line 34552
     if (___async) {
      HEAP32[$ReallocAsyncCtx >> 2] = 397; //@line 34555
      $204 = $ReallocAsyncCtx + 4 | 0; //@line 34556
      HEAP32[$204 >> 2] = $21; //@line 34557
      $205 = $ReallocAsyncCtx + 8 | 0; //@line 34558
      HEAP32[$205 >> 2] = $2; //@line 34559
      $206 = $ReallocAsyncCtx + 12 | 0; //@line 34560
      HEAP32[$206 >> 2] = $$pre20; //@line 34561
      $207 = $ReallocAsyncCtx + 16 | 0; //@line 34562
      HEAP32[$207 >> 2] = $154; //@line 34563
      $208 = $ReallocAsyncCtx + 20 | 0; //@line 34564
      HEAP32[$208 >> 2] = $173; //@line 34565
      $209 = $ReallocAsyncCtx + 24 | 0; //@line 34566
      HEAP32[$209 >> 2] = $6; //@line 34567
      $210 = $ReallocAsyncCtx + 28 | 0; //@line 34568
      HEAP32[$210 >> 2] = $8; //@line 34569
      $211 = $ReallocAsyncCtx + 32 | 0; //@line 34570
      HEAP32[$211 >> 2] = $10; //@line 34571
      $212 = $ReallocAsyncCtx + 36 | 0; //@line 34572
      HEAP32[$212 >> 2] = $14; //@line 34573
      $213 = $ReallocAsyncCtx + 40 | 0; //@line 34574
      HEAP32[$213 >> 2] = $16; //@line 34575
      $214 = $ReallocAsyncCtx + 44 | 0; //@line 34576
      HEAP32[$214 >> 2] = $18; //@line 34577
      $215 = $ReallocAsyncCtx + 48 | 0; //@line 34578
      HEAP32[$215 >> 2] = $20; //@line 34579
      sp = STACKTOP; //@line 34580
      STACKTOP = sp; //@line 34581
      return;
     }
     ___async_unwind = 0; //@line 34583
     HEAP32[$ReallocAsyncCtx >> 2] = 397; //@line 34584
     $204 = $ReallocAsyncCtx + 4 | 0; //@line 34585
     HEAP32[$204 >> 2] = $21; //@line 34586
     $205 = $ReallocAsyncCtx + 8 | 0; //@line 34587
     HEAP32[$205 >> 2] = $2; //@line 34588
     $206 = $ReallocAsyncCtx + 12 | 0; //@line 34589
     HEAP32[$206 >> 2] = $$pre20; //@line 34590
     $207 = $ReallocAsyncCtx + 16 | 0; //@line 34591
     HEAP32[$207 >> 2] = $154; //@line 34592
     $208 = $ReallocAsyncCtx + 20 | 0; //@line 34593
     HEAP32[$208 >> 2] = $173; //@line 34594
     $209 = $ReallocAsyncCtx + 24 | 0; //@line 34595
     HEAP32[$209 >> 2] = $6; //@line 34596
     $210 = $ReallocAsyncCtx + 28 | 0; //@line 34597
     HEAP32[$210 >> 2] = $8; //@line 34598
     $211 = $ReallocAsyncCtx + 32 | 0; //@line 34599
     HEAP32[$211 >> 2] = $10; //@line 34600
     $212 = $ReallocAsyncCtx + 36 | 0; //@line 34601
     HEAP32[$212 >> 2] = $14; //@line 34602
     $213 = $ReallocAsyncCtx + 40 | 0; //@line 34603
     HEAP32[$213 >> 2] = $16; //@line 34604
     $214 = $ReallocAsyncCtx + 44 | 0; //@line 34605
     HEAP32[$214 >> 2] = $18; //@line 34606
     $215 = $ReallocAsyncCtx + 48 | 0; //@line 34607
     HEAP32[$215 >> 2] = $20; //@line 34608
     sp = STACKTOP; //@line 34609
     STACKTOP = sp; //@line 34610
     return;
    }
    $179 = $174 + 1 << 24 >> 24; //@line 34612
    HEAP8[$173 >> 0] = $179; //@line 34613
    if ($179 & 1) {
     $183 = $2 + 1097 | 0; //@line 34618
     HEAP8[$183 >> 0] = __ZN7LoRaPHY26get_next_lower_tx_datarateEa(HEAP32[$2 >> 2] | 0, HEAP8[$183 >> 0] | 0) | 0; //@line 34621
    }
    $ReallocAsyncCtx7 = _emscripten_realloc_async_context(52) | 0; //@line 34623
    $186 = __ZN7LoRaMac11schedule_txEv($2) | 0; //@line 34624
    if (___async) {
     HEAP32[$ReallocAsyncCtx7 >> 2] = 396; //@line 34627
     $187 = $ReallocAsyncCtx7 + 4 | 0; //@line 34628
     HEAP32[$187 >> 2] = $21; //@line 34629
     $188 = $ReallocAsyncCtx7 + 8 | 0; //@line 34630
     HEAP32[$188 >> 2] = $2; //@line 34631
     $189 = $ReallocAsyncCtx7 + 12 | 0; //@line 34632
     HEAP32[$189 >> 2] = $$pre20; //@line 34633
     $190 = $ReallocAsyncCtx7 + 16 | 0; //@line 34634
     HEAP32[$190 >> 2] = $154; //@line 34635
     $191 = $ReallocAsyncCtx7 + 20 | 0; //@line 34636
     HEAP32[$191 >> 2] = $173; //@line 34637
     $192 = $ReallocAsyncCtx7 + 24 | 0; //@line 34638
     HEAP32[$192 >> 2] = $6; //@line 34639
     $193 = $ReallocAsyncCtx7 + 28 | 0; //@line 34640
     HEAP32[$193 >> 2] = $8; //@line 34641
     $194 = $ReallocAsyncCtx7 + 32 | 0; //@line 34642
     HEAP32[$194 >> 2] = $10; //@line 34643
     $195 = $ReallocAsyncCtx7 + 36 | 0; //@line 34644
     HEAP32[$195 >> 2] = $14; //@line 34645
     $196 = $ReallocAsyncCtx7 + 40 | 0; //@line 34646
     HEAP32[$196 >> 2] = $16; //@line 34647
     $197 = $ReallocAsyncCtx7 + 44 | 0; //@line 34648
     HEAP32[$197 >> 2] = $18; //@line 34649
     $198 = $ReallocAsyncCtx7 + 48 | 0; //@line 34650
     HEAP32[$198 >> 2] = $20; //@line 34651
     sp = STACKTOP; //@line 34652
     STACKTOP = sp; //@line 34653
     return;
    }
    HEAP32[___async_retval >> 2] = $186; //@line 34656
    ___async_unwind = 0; //@line 34657
    HEAP32[$ReallocAsyncCtx7 >> 2] = 396; //@line 34658
    $187 = $ReallocAsyncCtx7 + 4 | 0; //@line 34659
    HEAP32[$187 >> 2] = $21; //@line 34660
    $188 = $ReallocAsyncCtx7 + 8 | 0; //@line 34661
    HEAP32[$188 >> 2] = $2; //@line 34662
    $189 = $ReallocAsyncCtx7 + 12 | 0; //@line 34663
    HEAP32[$189 >> 2] = $$pre20; //@line 34664
    $190 = $ReallocAsyncCtx7 + 16 | 0; //@line 34665
    HEAP32[$190 >> 2] = $154; //@line 34666
    $191 = $ReallocAsyncCtx7 + 20 | 0; //@line 34667
    HEAP32[$191 >> 2] = $173; //@line 34668
    $192 = $ReallocAsyncCtx7 + 24 | 0; //@line 34669
    HEAP32[$192 >> 2] = $6; //@line 34670
    $193 = $ReallocAsyncCtx7 + 28 | 0; //@line 34671
    HEAP32[$193 >> 2] = $8; //@line 34672
    $194 = $ReallocAsyncCtx7 + 32 | 0; //@line 34673
    HEAP32[$194 >> 2] = $10; //@line 34674
    $195 = $ReallocAsyncCtx7 + 36 | 0; //@line 34675
    HEAP32[$195 >> 2] = $14; //@line 34676
    $196 = $ReallocAsyncCtx7 + 40 | 0; //@line 34677
    HEAP32[$196 >> 2] = $16; //@line 34678
    $197 = $ReallocAsyncCtx7 + 44 | 0; //@line 34679
    HEAP32[$197 >> 2] = $18; //@line 34680
    $198 = $ReallocAsyncCtx7 + 48 | 0; //@line 34681
    HEAP32[$198 >> 2] = $20; //@line 34682
    sp = STACKTOP; //@line 34683
    STACKTOP = sp; //@line 34684
    return;
   }
  }
 }
 $216 = HEAP32[$$pre20 >> 2] | 0; //@line 34688
 $219 = $216 & -3; //@line 34691
 if (!($216 & 2)) {
  $221 = $216; //@line 34693
 } else {
  HEAP32[$$pre20 >> 2] = $219; //@line 34695
  $221 = $219; //@line 34696
 }
 if ($221 | 0) {
  $288 = HEAP32[$18 >> 2] | 0; //@line 34700
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 34701
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($288, $20, 1e3); //@line 34702
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 402; //@line 34705
   $289 = $ReallocAsyncCtx6 + 4 | 0; //@line 34706
   HEAP32[$289 >> 2] = $21; //@line 34707
   $290 = $ReallocAsyncCtx6 + 8 | 0; //@line 34708
   HEAP32[$290 >> 2] = $2; //@line 34709
   $291 = $ReallocAsyncCtx6 + 12 | 0; //@line 34710
   HEAP32[$291 >> 2] = $6; //@line 34711
   $292 = $ReallocAsyncCtx6 + 16 | 0; //@line 34712
   HEAP32[$292 >> 2] = $8; //@line 34713
   $293 = $ReallocAsyncCtx6 + 20 | 0; //@line 34714
   HEAP32[$293 >> 2] = $10; //@line 34715
   sp = STACKTOP; //@line 34716
   STACKTOP = sp; //@line 34717
   return;
  }
  ___async_unwind = 0; //@line 34719
  HEAP32[$ReallocAsyncCtx6 >> 2] = 402; //@line 34720
  $289 = $ReallocAsyncCtx6 + 4 | 0; //@line 34721
  HEAP32[$289 >> 2] = $21; //@line 34722
  $290 = $ReallocAsyncCtx6 + 8 | 0; //@line 34723
  HEAP32[$290 >> 2] = $2; //@line 34724
  $291 = $ReallocAsyncCtx6 + 12 | 0; //@line 34725
  HEAP32[$291 >> 2] = $6; //@line 34726
  $292 = $ReallocAsyncCtx6 + 16 | 0; //@line 34727
  HEAP32[$292 >> 2] = $8; //@line 34728
  $293 = $ReallocAsyncCtx6 + 20 | 0; //@line 34729
  HEAP32[$293 >> 2] = $10; //@line 34730
  sp = STACKTOP; //@line 34731
  STACKTOP = sp; //@line 34732
  return;
 }
 $222 = HEAP8[$21 >> 0] | 0; //@line 34734
 if ($222 & 1) {
  HEAP8[$21 >> 0] = $222 & -2; //@line 34739
  $227 = HEAP32[$2 + 1324 >> 2] | 0; //@line 34741
  $229 = __ZN11LoRaMacMcps16get_confirmationEv($2 + 288 | 0) | 0; //@line 34743
  $230 = $227 + 12 | 0; //@line 34744
  $231 = HEAP32[$230 >> 2] | 0; //@line 34745
  if (!$231) {
   $ReallocAsyncCtx16 = _emscripten_realloc_async_context(44) | 0; //@line 34748
   _mbed_assert_internal(15679, 15684, 1102); //@line 34749
   if (___async) {
    HEAP32[$ReallocAsyncCtx16 >> 2] = 398; //@line 34752
    $233 = $ReallocAsyncCtx16 + 4 | 0; //@line 34753
    HEAP32[$233 >> 2] = $21; //@line 34754
    $234 = $ReallocAsyncCtx16 + 8 | 0; //@line 34755
    HEAP32[$234 >> 2] = $2; //@line 34756
    $235 = $ReallocAsyncCtx16 + 12 | 0; //@line 34757
    HEAP32[$235 >> 2] = $227; //@line 34758
    $236 = $ReallocAsyncCtx16 + 16 | 0; //@line 34759
    HEAP32[$236 >> 2] = $229; //@line 34760
    $237 = $ReallocAsyncCtx16 + 20 | 0; //@line 34761
    HEAP32[$237 >> 2] = $230; //@line 34762
    $238 = $ReallocAsyncCtx16 + 24 | 0; //@line 34763
    HEAP32[$238 >> 2] = $6; //@line 34764
    $239 = $ReallocAsyncCtx16 + 28 | 0; //@line 34765
    HEAP32[$239 >> 2] = $8; //@line 34766
    $240 = $ReallocAsyncCtx16 + 32 | 0; //@line 34767
    HEAP32[$240 >> 2] = $10; //@line 34768
    $241 = $ReallocAsyncCtx16 + 36 | 0; //@line 34769
    HEAP32[$241 >> 2] = $14; //@line 34770
    $242 = $ReallocAsyncCtx16 + 40 | 0; //@line 34771
    HEAP32[$242 >> 2] = $16; //@line 34772
    sp = STACKTOP; //@line 34773
    STACKTOP = sp; //@line 34774
    return;
   }
   ___async_unwind = 0; //@line 34776
   HEAP32[$ReallocAsyncCtx16 >> 2] = 398; //@line 34777
   $233 = $ReallocAsyncCtx16 + 4 | 0; //@line 34778
   HEAP32[$233 >> 2] = $21; //@line 34779
   $234 = $ReallocAsyncCtx16 + 8 | 0; //@line 34780
   HEAP32[$234 >> 2] = $2; //@line 34781
   $235 = $ReallocAsyncCtx16 + 12 | 0; //@line 34782
   HEAP32[$235 >> 2] = $227; //@line 34783
   $236 = $ReallocAsyncCtx16 + 16 | 0; //@line 34784
   HEAP32[$236 >> 2] = $229; //@line 34785
   $237 = $ReallocAsyncCtx16 + 20 | 0; //@line 34786
   HEAP32[$237 >> 2] = $230; //@line 34787
   $238 = $ReallocAsyncCtx16 + 24 | 0; //@line 34788
   HEAP32[$238 >> 2] = $6; //@line 34789
   $239 = $ReallocAsyncCtx16 + 28 | 0; //@line 34790
   HEAP32[$239 >> 2] = $8; //@line 34791
   $240 = $ReallocAsyncCtx16 + 32 | 0; //@line 34792
   HEAP32[$240 >> 2] = $10; //@line 34793
   $241 = $ReallocAsyncCtx16 + 36 | 0; //@line 34794
   HEAP32[$241 >> 2] = $14; //@line 34795
   $242 = $ReallocAsyncCtx16 + 40 | 0; //@line 34796
   HEAP32[$242 >> 2] = $16; //@line 34797
   sp = STACKTOP; //@line 34798
   STACKTOP = sp; //@line 34799
   return;
  } else {
   $243 = HEAP32[$231 >> 2] | 0; //@line 34801
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 34802
   FUNCTION_TABLE_vii[$243 & 31]($227, $229); //@line 34803
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 399; //@line 34806
    $244 = $ReallocAsyncCtx2 + 4 | 0; //@line 34807
    HEAP32[$244 >> 2] = $21; //@line 34808
    $245 = $ReallocAsyncCtx2 + 8 | 0; //@line 34809
    HEAP32[$245 >> 2] = $2; //@line 34810
    $246 = $ReallocAsyncCtx2 + 12 | 0; //@line 34811
    HEAP32[$246 >> 2] = $6; //@line 34812
    $247 = $ReallocAsyncCtx2 + 16 | 0; //@line 34813
    HEAP32[$247 >> 2] = $8; //@line 34814
    $248 = $ReallocAsyncCtx2 + 20 | 0; //@line 34815
    HEAP32[$248 >> 2] = $10; //@line 34816
    $249 = $ReallocAsyncCtx2 + 24 | 0; //@line 34817
    HEAP32[$249 >> 2] = $14; //@line 34818
    $250 = $ReallocAsyncCtx2 + 28 | 0; //@line 34819
    HEAP32[$250 >> 2] = $16; //@line 34820
    sp = STACKTOP; //@line 34821
    STACKTOP = sp; //@line 34822
    return;
   }
   ___async_unwind = 0; //@line 34824
   HEAP32[$ReallocAsyncCtx2 >> 2] = 399; //@line 34825
   $244 = $ReallocAsyncCtx2 + 4 | 0; //@line 34826
   HEAP32[$244 >> 2] = $21; //@line 34827
   $245 = $ReallocAsyncCtx2 + 8 | 0; //@line 34828
   HEAP32[$245 >> 2] = $2; //@line 34829
   $246 = $ReallocAsyncCtx2 + 12 | 0; //@line 34830
   HEAP32[$246 >> 2] = $6; //@line 34831
   $247 = $ReallocAsyncCtx2 + 16 | 0; //@line 34832
   HEAP32[$247 >> 2] = $8; //@line 34833
   $248 = $ReallocAsyncCtx2 + 20 | 0; //@line 34834
   HEAP32[$248 >> 2] = $10; //@line 34835
   $249 = $ReallocAsyncCtx2 + 24 | 0; //@line 34836
   HEAP32[$249 >> 2] = $14; //@line 34837
   $250 = $ReallocAsyncCtx2 + 28 | 0; //@line 34838
   HEAP32[$250 >> 2] = $16; //@line 34839
   sp = STACKTOP; //@line 34840
   STACKTOP = sp; //@line 34841
   return;
  }
 }
 if ($222 & 8) {
  HEAP8[$21 >> 0] = $222 & -9; //@line 34848
  $255 = HEAP32[$2 + 1324 >> 2] | 0; //@line 34850
  $256 = $255 + 32 | 0; //@line 34851
  $258 = __ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0; //@line 34853
  $259 = $255 + 44 | 0; //@line 34854
  $260 = HEAP32[$259 >> 2] | 0; //@line 34855
  if (!$260) {
   $ReallocAsyncCtx15 = _emscripten_realloc_async_context(44) | 0; //@line 34858
   _mbed_assert_internal(15679, 15684, 1102); //@line 34859
   if (___async) {
    HEAP32[$ReallocAsyncCtx15 >> 2] = 400; //@line 34862
    $262 = $ReallocAsyncCtx15 + 4 | 0; //@line 34863
    HEAP32[$262 >> 2] = $21; //@line 34864
    $263 = $ReallocAsyncCtx15 + 8 | 0; //@line 34865
    HEAP32[$263 >> 2] = $2; //@line 34866
    $264 = $ReallocAsyncCtx15 + 12 | 0; //@line 34867
    HEAP32[$264 >> 2] = $256; //@line 34868
    $265 = $ReallocAsyncCtx15 + 16 | 0; //@line 34869
    HEAP32[$265 >> 2] = $258; //@line 34870
    $266 = $ReallocAsyncCtx15 + 20 | 0; //@line 34871
    HEAP32[$266 >> 2] = $6; //@line 34872
    $267 = $ReallocAsyncCtx15 + 24 | 0; //@line 34873
    HEAP32[$267 >> 2] = $8; //@line 34874
    $268 = $ReallocAsyncCtx15 + 28 | 0; //@line 34875
    HEAP32[$268 >> 2] = $10; //@line 34876
    $269 = $ReallocAsyncCtx15 + 32 | 0; //@line 34877
    HEAP32[$269 >> 2] = $14; //@line 34878
    $270 = $ReallocAsyncCtx15 + 36 | 0; //@line 34879
    HEAP32[$270 >> 2] = $16; //@line 34880
    $271 = $ReallocAsyncCtx15 + 40 | 0; //@line 34881
    HEAP32[$271 >> 2] = $259; //@line 34882
    sp = STACKTOP; //@line 34883
    STACKTOP = sp; //@line 34884
    return;
   }
   ___async_unwind = 0; //@line 34886
   HEAP32[$ReallocAsyncCtx15 >> 2] = 400; //@line 34887
   $262 = $ReallocAsyncCtx15 + 4 | 0; //@line 34888
   HEAP32[$262 >> 2] = $21; //@line 34889
   $263 = $ReallocAsyncCtx15 + 8 | 0; //@line 34890
   HEAP32[$263 >> 2] = $2; //@line 34891
   $264 = $ReallocAsyncCtx15 + 12 | 0; //@line 34892
   HEAP32[$264 >> 2] = $256; //@line 34893
   $265 = $ReallocAsyncCtx15 + 16 | 0; //@line 34894
   HEAP32[$265 >> 2] = $258; //@line 34895
   $266 = $ReallocAsyncCtx15 + 20 | 0; //@line 34896
   HEAP32[$266 >> 2] = $6; //@line 34897
   $267 = $ReallocAsyncCtx15 + 24 | 0; //@line 34898
   HEAP32[$267 >> 2] = $8; //@line 34899
   $268 = $ReallocAsyncCtx15 + 28 | 0; //@line 34900
   HEAP32[$268 >> 2] = $10; //@line 34901
   $269 = $ReallocAsyncCtx15 + 32 | 0; //@line 34902
   HEAP32[$269 >> 2] = $14; //@line 34903
   $270 = $ReallocAsyncCtx15 + 36 | 0; //@line 34904
   HEAP32[$270 >> 2] = $16; //@line 34905
   $271 = $ReallocAsyncCtx15 + 40 | 0; //@line 34906
   HEAP32[$271 >> 2] = $259; //@line 34907
   sp = STACKTOP; //@line 34908
   STACKTOP = sp; //@line 34909
   return;
  } else {
   $272 = HEAP32[$260 >> 2] | 0; //@line 34911
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 34912
   FUNCTION_TABLE_vii[$272 & 31]($256, $258); //@line 34913
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 401; //@line 34916
    $273 = $ReallocAsyncCtx3 + 4 | 0; //@line 34917
    HEAP32[$273 >> 2] = $2; //@line 34918
    $274 = $ReallocAsyncCtx3 + 8 | 0; //@line 34919
    HEAP32[$274 >> 2] = $21; //@line 34920
    $275 = $ReallocAsyncCtx3 + 12 | 0; //@line 34921
    HEAP32[$275 >> 2] = $6; //@line 34922
    $276 = $ReallocAsyncCtx3 + 16 | 0; //@line 34923
    HEAP32[$276 >> 2] = $8; //@line 34924
    $277 = $ReallocAsyncCtx3 + 20 | 0; //@line 34925
    HEAP32[$277 >> 2] = $10; //@line 34926
    $278 = $ReallocAsyncCtx3 + 24 | 0; //@line 34927
    HEAP32[$278 >> 2] = $14; //@line 34928
    $279 = $ReallocAsyncCtx3 + 28 | 0; //@line 34929
    HEAP32[$279 >> 2] = $16; //@line 34930
    sp = STACKTOP; //@line 34931
    STACKTOP = sp; //@line 34932
    return;
   }
   ___async_unwind = 0; //@line 34934
   HEAP32[$ReallocAsyncCtx3 >> 2] = 401; //@line 34935
   $273 = $ReallocAsyncCtx3 + 4 | 0; //@line 34936
   HEAP32[$273 >> 2] = $2; //@line 34937
   $274 = $ReallocAsyncCtx3 + 8 | 0; //@line 34938
   HEAP32[$274 >> 2] = $21; //@line 34939
   $275 = $ReallocAsyncCtx3 + 12 | 0; //@line 34940
   HEAP32[$275 >> 2] = $6; //@line 34941
   $276 = $ReallocAsyncCtx3 + 16 | 0; //@line 34942
   HEAP32[$276 >> 2] = $8; //@line 34943
   $277 = $ReallocAsyncCtx3 + 20 | 0; //@line 34944
   HEAP32[$277 >> 2] = $10; //@line 34945
   $278 = $ReallocAsyncCtx3 + 24 | 0; //@line 34946
   HEAP32[$278 >> 2] = $14; //@line 34947
   $279 = $ReallocAsyncCtx3 + 28 | 0; //@line 34948
   HEAP32[$279 >> 2] = $16; //@line 34949
   sp = STACKTOP; //@line 34950
   STACKTOP = sp; //@line 34951
   return;
  }
 }
 if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($2 + 4 | 0) | 0) {
  _mbed_tracef(16, 13728, 13889, $14); //@line 34957
  HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($2 + 264 | 0) | 0) >> 2] = 4; //@line 34960
  $285 = HEAP8[$21 >> 0] | 16; //@line 34962
  HEAP8[$21 >> 0] = $285; //@line 34963
  $287 = $285; //@line 34964
 } else {
  $287 = HEAP8[$21 >> 0] | 0; //@line 34967
 }
 $286 = $287 & -33; //@line 34969
 HEAP8[$21 >> 0] = $286; //@line 34970
 do {
  if (!($286 & 2)) {
   $327 = $286; //@line 34975
  } else {
   $296 = $286 & -3; //@line 34977
   HEAP8[$21 >> 0] = $296; //@line 34978
   if ((HEAP32[$2 + 360 >> 2] | 0) == 2) {
    _mbed_tracef(16, 13728, 13747, $8); //@line 34983
    $301 = HEAP32[$2 + 1328 >> 2] | 0; //@line 34985
    HEAP32[$6 >> 2] = 293; //@line 34986
    HEAP32[$6 + 4 >> 2] = 0; //@line 34988
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 34989
    HEAP32[$$byval_copy23 >> 2] = HEAP32[$6 >> 2]; //@line 34990
    HEAP32[$$byval_copy23 + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 34990
    $302 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($301, $2, $$byval_copy23) | 0; //@line 34991
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 403; //@line 34994
     $303 = $ReallocAsyncCtx8 + 4 | 0; //@line 34995
     HEAP32[$303 >> 2] = $21; //@line 34996
     $304 = $ReallocAsyncCtx8 + 8 | 0; //@line 34997
     HEAP32[$304 >> 2] = $2; //@line 34998
     $305 = $ReallocAsyncCtx8 + 12 | 0; //@line 34999
     HEAP32[$305 >> 2] = $6; //@line 35000
     sp = STACKTOP; //@line 35001
     STACKTOP = sp; //@line 35002
     return;
    }
    HEAP32[___async_retval >> 2] = $302; //@line 35005
    ___async_unwind = 0; //@line 35006
    HEAP32[$ReallocAsyncCtx8 >> 2] = 403; //@line 35007
    $303 = $ReallocAsyncCtx8 + 4 | 0; //@line 35008
    HEAP32[$303 >> 2] = $21; //@line 35009
    $304 = $ReallocAsyncCtx8 + 8 | 0; //@line 35010
    HEAP32[$304 >> 2] = $2; //@line 35011
    $305 = $ReallocAsyncCtx8 + 12 | 0; //@line 35012
    HEAP32[$305 >> 2] = $6; //@line 35013
    sp = STACKTOP; //@line 35014
    STACKTOP = sp; //@line 35015
    return;
   }
   if ($296 & 4) {
    $325 = $296 & -5; //@line 35020
    HEAP8[$21 >> 0] = $325; //@line 35021
    $327 = $325; //@line 35022
    break;
   }
   $310 = HEAP32[$2 + 1324 >> 2] | 0; //@line 35026
   $311 = $310 + 16 | 0; //@line 35027
   $313 = __ZN11LoRaMacMcps14get_indicationEv($2 + 288 | 0) | 0; //@line 35029
   $314 = $310 + 28 | 0; //@line 35030
   $315 = HEAP32[$314 >> 2] | 0; //@line 35031
   if (!$315) {
    $ReallocAsyncCtx13 = _emscripten_realloc_async_context(24) | 0; //@line 35034
    _mbed_assert_internal(15679, 15684, 1102); //@line 35035
    if (___async) {
     HEAP32[$ReallocAsyncCtx13 >> 2] = 405; //@line 35038
     $317 = $ReallocAsyncCtx13 + 4 | 0; //@line 35039
     HEAP32[$317 >> 2] = $314; //@line 35040
     $318 = $ReallocAsyncCtx13 + 8 | 0; //@line 35041
     HEAP32[$318 >> 2] = $311; //@line 35042
     $319 = $ReallocAsyncCtx13 + 12 | 0; //@line 35043
     HEAP32[$319 >> 2] = $313; //@line 35044
     $320 = $ReallocAsyncCtx13 + 16 | 0; //@line 35045
     HEAP32[$320 >> 2] = $21; //@line 35046
     $321 = $ReallocAsyncCtx13 + 20 | 0; //@line 35047
     HEAP32[$321 >> 2] = $2; //@line 35048
     sp = STACKTOP; //@line 35049
     STACKTOP = sp; //@line 35050
     return;
    }
    ___async_unwind = 0; //@line 35052
    HEAP32[$ReallocAsyncCtx13 >> 2] = 405; //@line 35053
    $317 = $ReallocAsyncCtx13 + 4 | 0; //@line 35054
    HEAP32[$317 >> 2] = $314; //@line 35055
    $318 = $ReallocAsyncCtx13 + 8 | 0; //@line 35056
    HEAP32[$318 >> 2] = $311; //@line 35057
    $319 = $ReallocAsyncCtx13 + 12 | 0; //@line 35058
    HEAP32[$319 >> 2] = $313; //@line 35059
    $320 = $ReallocAsyncCtx13 + 16 | 0; //@line 35060
    HEAP32[$320 >> 2] = $21; //@line 35061
    $321 = $ReallocAsyncCtx13 + 20 | 0; //@line 35062
    HEAP32[$321 >> 2] = $2; //@line 35063
    sp = STACKTOP; //@line 35064
    STACKTOP = sp; //@line 35065
    return;
   } else {
    $322 = HEAP32[$315 >> 2] | 0; //@line 35067
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 35068
    FUNCTION_TABLE_vii[$322 & 31]($311, $313); //@line 35069
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 406; //@line 35072
     $323 = $ReallocAsyncCtx4 + 4 | 0; //@line 35073
     HEAP32[$323 >> 2] = $21; //@line 35074
     $324 = $ReallocAsyncCtx4 + 8 | 0; //@line 35075
     HEAP32[$324 >> 2] = $2; //@line 35076
     sp = STACKTOP; //@line 35077
     STACKTOP = sp; //@line 35078
     return;
    }
    ___async_unwind = 0; //@line 35080
    HEAP32[$ReallocAsyncCtx4 >> 2] = 406; //@line 35081
    $323 = $ReallocAsyncCtx4 + 4 | 0; //@line 35082
    HEAP32[$323 >> 2] = $21; //@line 35083
    $324 = $ReallocAsyncCtx4 + 8 | 0; //@line 35084
    HEAP32[$324 >> 2] = $2; //@line 35085
    sp = STACKTOP; //@line 35086
    STACKTOP = sp; //@line 35087
    return;
   }
  }
 } while (0);
 if (!($327 & 16)) {
  STACKTOP = sp; //@line 35094
  return;
 }
 HEAP8[$21 >> 0] = $327 & -17; //@line 35097
 $331 = HEAP32[$2 + 1324 >> 2] | 0; //@line 35099
 $332 = $331 + 48 | 0; //@line 35100
 $334 = __ZN11LoRaMacMlme14get_indicationEv($2 + 264 | 0) | 0; //@line 35102
 $335 = $331 + 60 | 0; //@line 35103
 $336 = HEAP32[$335 >> 2] | 0; //@line 35104
 if (!$336) {
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(16) | 0; //@line 35107
  _mbed_assert_internal(15679, 15684, 1102); //@line 35108
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 407; //@line 35111
   $338 = $ReallocAsyncCtx12 + 4 | 0; //@line 35112
   HEAP32[$338 >> 2] = $335; //@line 35113
   $339 = $ReallocAsyncCtx12 + 8 | 0; //@line 35114
   HEAP32[$339 >> 2] = $332; //@line 35115
   $340 = $ReallocAsyncCtx12 + 12 | 0; //@line 35116
   HEAP32[$340 >> 2] = $334; //@line 35117
   sp = STACKTOP; //@line 35118
   STACKTOP = sp; //@line 35119
   return;
  }
  ___async_unwind = 0; //@line 35121
  HEAP32[$ReallocAsyncCtx12 >> 2] = 407; //@line 35122
  $338 = $ReallocAsyncCtx12 + 4 | 0; //@line 35123
  HEAP32[$338 >> 2] = $335; //@line 35124
  $339 = $ReallocAsyncCtx12 + 8 | 0; //@line 35125
  HEAP32[$339 >> 2] = $332; //@line 35126
  $340 = $ReallocAsyncCtx12 + 12 | 0; //@line 35127
  HEAP32[$340 >> 2] = $334; //@line 35128
  sp = STACKTOP; //@line 35129
  STACKTOP = sp; //@line 35130
  return;
 } else {
  $341 = HEAP32[$336 >> 2] | 0; //@line 35132
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 35133
  FUNCTION_TABLE_vii[$341 & 31]($332, $334); //@line 35134
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 408; //@line 35137
   sp = STACKTOP; //@line 35138
   STACKTOP = sp; //@line 35139
   return;
  }
  ___async_unwind = 0; //@line 35141
  HEAP32[$ReallocAsyncCtx5 >> 2] = 408; //@line 35142
  sp = STACKTOP; //@line 35143
  STACKTOP = sp; //@line 35144
  return;
 }
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_398($0) {
 $0 = $0 | 0;
 var $$$1177 = 0, $$1$off0 = 0, $$1$off0$expand_i1_val = 0, $$1$off0$expand_i1_val52 = 0, $$1$off0$expand_i1_val54 = 0, $$3$off0230 = 0, $$byval_copy = 0, $$byval_copy48 = 0, $$byval_copy49 = 0, $$byval_copy50 = 0, $$sink = 0, $10 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $112 = 0, $115 = 0, $117 = 0, $118 = 0, $12 = 0, $134 = 0, $137 = 0, $138 = 0, $14 = 0, $145 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $160 = 0, $163 = 0, $165 = 0, $166 = 0, $168 = 0, $170 = 0, $171 = 0, $175 = 0, $176 = 0, $18 = 0, $183 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $198 = 0, $20 = 0, $201 = 0, $203 = 0, $204 = 0, $211 = 0, $213 = 0, $214 = 0, $215 = 0, $219 = 0, $22 = 0, $223 = 0, $228 = 0, $229 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $245 = 0, $246 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $270 = 0, $271 = 0, $28 = 0, $283 = 0, $284 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $30 = 0, $303 = 0, $306 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $317 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $327 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $342 = 0, $345 = 0, $347 = 0, $348 = 0, $349 = 0, $352 = 0, $354 = 0, $355 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $66 = 0, $68 = 0, $74 = 0, $76 = 0, $78 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $92 = 0, $94 = 0, $97 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx19 = 0, $ReallocAsyncCtx20 = 0, $ReallocAsyncCtx21 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx26 = 0, $ReallocAsyncCtx27 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 28984
 STACKTOP = STACKTOP + 32 | 0; //@line 28985
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 28985
 $$byval_copy50 = sp + 24 | 0; //@line 28986
 $$byval_copy49 = sp + 16 | 0; //@line 28987
 $$byval_copy48 = sp + 8 | 0; //@line 28988
 $$byval_copy = sp; //@line 28989
 $4 = HEAP8[$0 + 8 >> 0] | 0; //@line 28993
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28995
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28999
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 29001
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29003
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 29005
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 29007
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 29009
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 29011
 $24 = HEAP8[$0 + 48 >> 0] | 0; //@line 29013
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 29015
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 29017
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 29019
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 29021
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 29023
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 29027
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 29029
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 29031
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 29033
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 29035
 $48 = HEAP8[$0 + 96 >> 0] | 0; //@line 29037
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 29039
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 29041
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 29045
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 29047
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 29049
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 29051
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 29055
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 29057
 $74 = HEAP8[$0 + 148 >> 0] | 0; //@line 29063
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 29065
 $78 = HEAP8[$0 + 156 >> 0] | 0; //@line 29067
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 29071
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 29073
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 29075
 $88 = (HEAP32[$0 + 108 >> 2] | 0) == (HEAP32[HEAP32[$0 + 128 >> 2] >> 2] | 0); //@line 29077
 $$$1177 = $88 ? HEAP32[$0 + 4 >> 2] | 0 : HEAP32[$0 + 160 >> 2] | 0; //@line 29078
 $92 = $32 >>> 0 < ((__ZN7LoRaPHY29get_maximum_frame_counter_gapEv(HEAP32[$52 >> 2] | 0) | 0) & 65535) >>> 0; //@line 29082
 $94 = (__ZN11LoRaMacMcps14get_indicationEv($68) | 0) + 4 | 0; //@line 29084
 if (!$92) {
  HEAP32[$94 >> 2] = 10; //@line 29086
  HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($68) | 0) + 32 >> 2] = $$$1177; //@line 29089
  _mbed_tracef(16, 13728, 13867, $44); //@line 29090
  $97 = $42 + 968 | 0; //@line 29091
  HEAP32[$97 >> 2] = HEAP32[$97 >> 2] | 64; //@line 29094
  if (!(HEAP8[$42 + 373 >> 0] | 0)) {
   $112 = $42 + 944 | 0; //@line 29099
   HEAP8[$112 >> 0] = HEAP8[$112 >> 0] | 34; //@line 29102
   $115 = HEAP32[$26 >> 2] | 0; //@line 29103
   $ReallocAsyncCtx10 = _emscripten_realloc_async_context(12) | 0; //@line 29105
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($115, $42 + 996 | 0, 1); //@line 29106
   if (___async) {
    HEAP32[$ReallocAsyncCtx10 >> 2] = 334; //@line 29109
    $117 = $ReallocAsyncCtx10 + 4 | 0; //@line 29110
    HEAP32[$117 >> 2] = $50; //@line 29111
    $118 = $ReallocAsyncCtx10 + 8 | 0; //@line 29112
    HEAP32[$118 >> 2] = $82; //@line 29113
    sp = STACKTOP; //@line 29114
    STACKTOP = sp; //@line 29115
    return;
   }
   ___async_unwind = 0; //@line 29117
   HEAP32[$ReallocAsyncCtx10 >> 2] = 334; //@line 29118
   $117 = $ReallocAsyncCtx10 + 4 | 0; //@line 29119
   HEAP32[$117 >> 2] = $50; //@line 29120
   $118 = $ReallocAsyncCtx10 + 8 | 0; //@line 29121
   HEAP32[$118 >> 2] = $82; //@line 29122
   sp = STACKTOP; //@line 29123
   STACKTOP = sp; //@line 29124
   return;
  } else {
   $104 = HEAP32[$42 + 1328 >> 2] | 0; //@line 29127
   HEAP32[$66 >> 2] = 318; //@line 29128
   HEAP32[$66 + 4 >> 2] = 0; //@line 29130
   $ReallocAsyncCtx22 = _emscripten_realloc_async_context(24) | 0; //@line 29131
   HEAP32[$$byval_copy >> 2] = HEAP32[$66 >> 2]; //@line 29132
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$66 + 4 >> 2]; //@line 29132
   $105 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($104, $42, $$byval_copy) | 0; //@line 29133
   if (___async) {
    HEAP32[$ReallocAsyncCtx22 >> 2] = 332; //@line 29136
    $106 = $ReallocAsyncCtx22 + 4 | 0; //@line 29137
    HEAP32[$106 >> 2] = $66; //@line 29138
    $107 = $ReallocAsyncCtx22 + 8 | 0; //@line 29139
    HEAP32[$107 >> 2] = $42; //@line 29140
    $108 = $ReallocAsyncCtx22 + 12 | 0; //@line 29141
    HEAP32[$108 >> 2] = $26; //@line 29142
    $109 = $ReallocAsyncCtx22 + 16 | 0; //@line 29143
    HEAP32[$109 >> 2] = $50; //@line 29144
    $110 = $ReallocAsyncCtx22 + 20 | 0; //@line 29145
    HEAP32[$110 >> 2] = $82; //@line 29146
    sp = STACKTOP; //@line 29147
    STACKTOP = sp; //@line 29148
    return;
   }
   HEAP32[___async_retval >> 2] = $105; //@line 29151
   ___async_unwind = 0; //@line 29152
   HEAP32[$ReallocAsyncCtx22 >> 2] = 332; //@line 29153
   $106 = $ReallocAsyncCtx22 + 4 | 0; //@line 29154
   HEAP32[$106 >> 2] = $66; //@line 29155
   $107 = $ReallocAsyncCtx22 + 8 | 0; //@line 29156
   HEAP32[$107 >> 2] = $42; //@line 29157
   $108 = $ReallocAsyncCtx22 + 12 | 0; //@line 29158
   HEAP32[$108 >> 2] = $26; //@line 29159
   $109 = $ReallocAsyncCtx22 + 16 | 0; //@line 29160
   HEAP32[$109 >> 2] = $50; //@line 29161
   $110 = $ReallocAsyncCtx22 + 20 | 0; //@line 29162
   HEAP32[$110 >> 2] = $82; //@line 29163
   sp = STACKTOP; //@line 29164
   STACKTOP = sp; //@line 29165
   return;
  }
 }
 if (!$88) {
  HEAP32[$94 >> 2] = 12; //@line 29169
  _mbed_tracef(16, 13728, 13867, $62); //@line 29170
  $327 = $42 + 968 | 0; //@line 29171
  HEAP32[$327 >> 2] = HEAP32[$327 >> 2] | 64; //@line 29174
  if (!(HEAP8[$42 + 373 >> 0] | 0)) {
   $342 = $42 + 944 | 0; //@line 29179
   HEAP8[$342 >> 0] = HEAP8[$342 >> 0] | 34; //@line 29182
   $345 = HEAP32[$26 >> 2] | 0; //@line 29183
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 29185
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($345, $42 + 996 | 0, 1); //@line 29186
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 348; //@line 29189
    $347 = $ReallocAsyncCtx7 + 4 | 0; //@line 29190
    HEAP32[$347 >> 2] = $50; //@line 29191
    $348 = $ReallocAsyncCtx7 + 8 | 0; //@line 29192
    HEAP32[$348 >> 2] = $82; //@line 29193
    sp = STACKTOP; //@line 29194
    STACKTOP = sp; //@line 29195
    return;
   }
   ___async_unwind = 0; //@line 29197
   HEAP32[$ReallocAsyncCtx7 >> 2] = 348; //@line 29198
   $347 = $ReallocAsyncCtx7 + 4 | 0; //@line 29199
   HEAP32[$347 >> 2] = $50; //@line 29200
   $348 = $ReallocAsyncCtx7 + 8 | 0; //@line 29201
   HEAP32[$348 >> 2] = $82; //@line 29202
   sp = STACKTOP; //@line 29203
   STACKTOP = sp; //@line 29204
   return;
  } else {
   $334 = HEAP32[$42 + 1328 >> 2] | 0; //@line 29207
   HEAP32[$6 >> 2] = 318; //@line 29208
   HEAP32[$6 + 4 >> 2] = 0; //@line 29210
   $ReallocAsyncCtx19 = _emscripten_realloc_async_context(24) | 0; //@line 29211
   HEAP32[$$byval_copy50 >> 2] = HEAP32[$6 >> 2]; //@line 29212
   HEAP32[$$byval_copy50 + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 29212
   $335 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($334, $42, $$byval_copy50) | 0; //@line 29213
   if (___async) {
    HEAP32[$ReallocAsyncCtx19 >> 2] = 346; //@line 29216
    $336 = $ReallocAsyncCtx19 + 4 | 0; //@line 29217
    HEAP32[$336 >> 2] = $6; //@line 29218
    $337 = $ReallocAsyncCtx19 + 8 | 0; //@line 29219
    HEAP32[$337 >> 2] = $42; //@line 29220
    $338 = $ReallocAsyncCtx19 + 12 | 0; //@line 29221
    HEAP32[$338 >> 2] = $26; //@line 29222
    $339 = $ReallocAsyncCtx19 + 16 | 0; //@line 29223
    HEAP32[$339 >> 2] = $50; //@line 29224
    $340 = $ReallocAsyncCtx19 + 20 | 0; //@line 29225
    HEAP32[$340 >> 2] = $82; //@line 29226
    sp = STACKTOP; //@line 29227
    STACKTOP = sp; //@line 29228
    return;
   }
   HEAP32[___async_retval >> 2] = $335; //@line 29231
   ___async_unwind = 0; //@line 29232
   HEAP32[$ReallocAsyncCtx19 >> 2] = 346; //@line 29233
   $336 = $ReallocAsyncCtx19 + 4 | 0; //@line 29234
   HEAP32[$336 >> 2] = $6; //@line 29235
   $337 = $ReallocAsyncCtx19 + 8 | 0; //@line 29236
   HEAP32[$337 >> 2] = $42; //@line 29237
   $338 = $ReallocAsyncCtx19 + 12 | 0; //@line 29238
   HEAP32[$338 >> 2] = $26; //@line 29239
   $339 = $ReallocAsyncCtx19 + 16 | 0; //@line 29240
   HEAP32[$339 >> 2] = $50; //@line 29241
   $340 = $ReallocAsyncCtx19 + 20 | 0; //@line 29242
   HEAP32[$340 >> 2] = $82; //@line 29243
   sp = STACKTOP; //@line 29244
   STACKTOP = sp; //@line 29245
   return;
  }
 }
 HEAP32[$94 >> 2] = 0; //@line 29248
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($68) | 0) + 8 >> 0] = $24; //@line 29251
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($68) | 0) + 11 >> 0] = ($4 & 255) >>> 4 & 1; //@line 29256
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($68) | 0) + 12 >> 2] = 0; //@line 29259
 HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($68) | 0) + 16 >> 1] = 0; //@line 29262
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($68) | 0) + 32 >> 2] = $$$1177; //@line 29265
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($68) | 0) + 4 >> 2] = 0; //@line 29268
 HEAP32[$42 + 964 >> 2] = 0; //@line 29270
 $134 = $42 + 4 | 0; //@line 29271
 __ZN14LoRaMacCommand19clear_repeat_bufferEv($134); //@line 29272
 do {
  if ($24 << 24 >> 24 == 1) {
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($68) | 0) >> 2] = 2; //@line 29277
   $137 = $10 + 36 | 0; //@line 29278
   $138 = HEAP32[$137 >> 2] | 0; //@line 29279
   if (($138 | 0) != ($$$1177 | 0) | ($138 | 0) == 0) {
    $$1$off0 = 0; //@line 29284
    $$sink = $137; //@line 29284
   } else {
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($68) | 0) + 4 >> 2] = 8; //@line 29288
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($68) | 0) + 32 >> 2] = $$$1177; //@line 29291
    _mbed_tracef(16, 13728, 13867, $16); //@line 29292
    $145 = $42 + 968 | 0; //@line 29293
    HEAP32[$145 >> 2] = HEAP32[$145 >> 2] | 64; //@line 29296
    if (!(HEAP8[$42 + 373 >> 0] | 0)) {
     $160 = $42 + 944 | 0; //@line 29301
     HEAP8[$160 >> 0] = HEAP8[$160 >> 0] | 34; //@line 29304
     $163 = HEAP32[$26 >> 2] | 0; //@line 29305
     $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 29307
     __ZN18LoRaWANTimeHandler5startER13timer_event_tj($163, $42 + 996 | 0, 1); //@line 29308
     if (___async) {
      HEAP32[$ReallocAsyncCtx9 >> 2] = 337; //@line 29311
      $165 = $ReallocAsyncCtx9 + 4 | 0; //@line 29312
      HEAP32[$165 >> 2] = $50; //@line 29313
      $166 = $ReallocAsyncCtx9 + 8 | 0; //@line 29314
      HEAP32[$166 >> 2] = $82; //@line 29315
      sp = STACKTOP; //@line 29316
      STACKTOP = sp; //@line 29317
      return;
     }
     ___async_unwind = 0; //@line 29319
     HEAP32[$ReallocAsyncCtx9 >> 2] = 337; //@line 29320
     $165 = $ReallocAsyncCtx9 + 4 | 0; //@line 29321
     HEAP32[$165 >> 2] = $50; //@line 29322
     $166 = $ReallocAsyncCtx9 + 8 | 0; //@line 29323
     HEAP32[$166 >> 2] = $82; //@line 29324
     sp = STACKTOP; //@line 29325
     STACKTOP = sp; //@line 29326
     return;
    } else {
     $152 = HEAP32[$42 + 1328 >> 2] | 0; //@line 29329
     HEAP32[$58 >> 2] = 318; //@line 29330
     HEAP32[$58 + 4 >> 2] = 0; //@line 29332
     $ReallocAsyncCtx21 = _emscripten_realloc_async_context(24) | 0; //@line 29333
     HEAP32[$$byval_copy48 >> 2] = HEAP32[$58 >> 2]; //@line 29334
     HEAP32[$$byval_copy48 + 4 >> 2] = HEAP32[$58 + 4 >> 2]; //@line 29334
     $153 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($152, $42, $$byval_copy48) | 0; //@line 29335
     if (___async) {
      HEAP32[$ReallocAsyncCtx21 >> 2] = 335; //@line 29338
      $154 = $ReallocAsyncCtx21 + 4 | 0; //@line 29339
      HEAP32[$154 >> 2] = $58; //@line 29340
      $155 = $ReallocAsyncCtx21 + 8 | 0; //@line 29341
      HEAP32[$155 >> 2] = $42; //@line 29342
      $156 = $ReallocAsyncCtx21 + 12 | 0; //@line 29343
      HEAP32[$156 >> 2] = $26; //@line 29344
      $157 = $ReallocAsyncCtx21 + 16 | 0; //@line 29345
      HEAP32[$157 >> 2] = $50; //@line 29346
      $158 = $ReallocAsyncCtx21 + 20 | 0; //@line 29347
      HEAP32[$158 >> 2] = $82; //@line 29348
      sp = STACKTOP; //@line 29349
      STACKTOP = sp; //@line 29350
      return;
     }
     HEAP32[___async_retval >> 2] = $153; //@line 29353
     ___async_unwind = 0; //@line 29354
     HEAP32[$ReallocAsyncCtx21 >> 2] = 335; //@line 29355
     $154 = $ReallocAsyncCtx21 + 4 | 0; //@line 29356
     HEAP32[$154 >> 2] = $58; //@line 29357
     $155 = $ReallocAsyncCtx21 + 8 | 0; //@line 29358
     HEAP32[$155 >> 2] = $42; //@line 29359
     $156 = $ReallocAsyncCtx21 + 12 | 0; //@line 29360
     HEAP32[$156 >> 2] = $26; //@line 29361
     $157 = $ReallocAsyncCtx21 + 16 | 0; //@line 29362
     HEAP32[$157 >> 2] = $50; //@line 29363
     $158 = $ReallocAsyncCtx21 + 20 | 0; //@line 29364
     HEAP32[$158 >> 2] = $82; //@line 29365
     sp = STACKTOP; //@line 29366
     STACKTOP = sp; //@line 29367
     return;
    }
   }
  } else {
   $168 = $42 + 374 | 0; //@line 29372
   if ($74 << 24 >> 24 == 5) {
    HEAP8[$168 >> 0] = 1; //@line 29374
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($68) | 0) >> 2] = 1; //@line 29376
    $170 = $42 + 960 | 0; //@line 29377
    $171 = HEAP32[$170 >> 2] | 0; //@line 29378
    $$1$off0 = ($171 | 0) != 0 & ($171 | 0) == ($$$1177 | 0); //@line 29382
    $$sink = $170; //@line 29382
    break;
   }
   HEAP8[$168 >> 0] = 0; //@line 29385
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($68) | 0) >> 2] = 0; //@line 29387
   $175 = $42 + 960 | 0; //@line 29388
   $176 = HEAP32[$175 >> 2] | 0; //@line 29389
   if (($176 | 0) != ($$$1177 | 0) | ($176 | 0) == 0) {
    $$1$off0 = 0; //@line 29394
    $$sink = $175; //@line 29394
   } else {
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($68) | 0) + 4 >> 2] = 8; //@line 29398
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($68) | 0) + 32 >> 2] = $$$1177; //@line 29401
    _mbed_tracef(16, 13728, 13867, $76); //@line 29402
    $183 = $42 + 968 | 0; //@line 29403
    HEAP32[$183 >> 2] = HEAP32[$183 >> 2] | 64; //@line 29406
    if (!(HEAP8[$42 + 373 >> 0] | 0)) {
     $198 = $42 + 944 | 0; //@line 29411
     HEAP8[$198 >> 0] = HEAP8[$198 >> 0] | 34; //@line 29414
     $201 = HEAP32[$26 >> 2] | 0; //@line 29415
     $ReallocAsyncCtx8 = _emscripten_realloc_async_context(12) | 0; //@line 29417
     __ZN18LoRaWANTimeHandler5startER13timer_event_tj($201, $42 + 996 | 0, 1); //@line 29418
     if (___async) {
      HEAP32[$ReallocAsyncCtx8 >> 2] = 340; //@line 29421
      $203 = $ReallocAsyncCtx8 + 4 | 0; //@line 29422
      HEAP32[$203 >> 2] = $50; //@line 29423
      $204 = $ReallocAsyncCtx8 + 8 | 0; //@line 29424
      HEAP32[$204 >> 2] = $82; //@line 29425
      sp = STACKTOP; //@line 29426
      STACKTOP = sp; //@line 29427
      return;
     }
     ___async_unwind = 0; //@line 29429
     HEAP32[$ReallocAsyncCtx8 >> 2] = 340; //@line 29430
     $203 = $ReallocAsyncCtx8 + 4 | 0; //@line 29431
     HEAP32[$203 >> 2] = $50; //@line 29432
     $204 = $ReallocAsyncCtx8 + 8 | 0; //@line 29433
     HEAP32[$204 >> 2] = $82; //@line 29434
     sp = STACKTOP; //@line 29435
     STACKTOP = sp; //@line 29436
     return;
    } else {
     $190 = HEAP32[$42 + 1328 >> 2] | 0; //@line 29439
     HEAP32[$60 >> 2] = 318; //@line 29440
     HEAP32[$60 + 4 >> 2] = 0; //@line 29442
     $ReallocAsyncCtx20 = _emscripten_realloc_async_context(24) | 0; //@line 29443
     HEAP32[$$byval_copy49 >> 2] = HEAP32[$60 >> 2]; //@line 29444
     HEAP32[$$byval_copy49 + 4 >> 2] = HEAP32[$60 + 4 >> 2]; //@line 29444
     $191 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($190, $42, $$byval_copy49) | 0; //@line 29445
     if (___async) {
      HEAP32[$ReallocAsyncCtx20 >> 2] = 338; //@line 29448
      $192 = $ReallocAsyncCtx20 + 4 | 0; //@line 29449
      HEAP32[$192 >> 2] = $60; //@line 29450
      $193 = $ReallocAsyncCtx20 + 8 | 0; //@line 29451
      HEAP32[$193 >> 2] = $42; //@line 29452
      $194 = $ReallocAsyncCtx20 + 12 | 0; //@line 29453
      HEAP32[$194 >> 2] = $26; //@line 29454
      $195 = $ReallocAsyncCtx20 + 16 | 0; //@line 29455
      HEAP32[$195 >> 2] = $50; //@line 29456
      $196 = $ReallocAsyncCtx20 + 20 | 0; //@line 29457
      HEAP32[$196 >> 2] = $82; //@line 29458
      sp = STACKTOP; //@line 29459
      STACKTOP = sp; //@line 29460
      return;
     }
     HEAP32[___async_retval >> 2] = $191; //@line 29463
     ___async_unwind = 0; //@line 29464
     HEAP32[$ReallocAsyncCtx20 >> 2] = 338; //@line 29465
     $192 = $ReallocAsyncCtx20 + 4 | 0; //@line 29466
     HEAP32[$192 >> 2] = $60; //@line 29467
     $193 = $ReallocAsyncCtx20 + 8 | 0; //@line 29468
     HEAP32[$193 >> 2] = $42; //@line 29469
     $194 = $ReallocAsyncCtx20 + 12 | 0; //@line 29470
     HEAP32[$194 >> 2] = $26; //@line 29471
     $195 = $ReallocAsyncCtx20 + 16 | 0; //@line 29472
     HEAP32[$195 >> 2] = $50; //@line 29473
     $196 = $ReallocAsyncCtx20 + 20 | 0; //@line 29474
     HEAP32[$196 >> 2] = $82; //@line 29475
     sp = STACKTOP; //@line 29476
     STACKTOP = sp; //@line 29477
     return;
    }
   }
  }
 } while (0);
 HEAP32[$$sink >> 2] = $$$1177; //@line 29482
 if ((HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($68) | 0) >> 2] | 0) == 1) {
  if ($4 & 32) {
   __ZN14LoRaMacCommand20clear_command_bufferEv($134); //@line 29490
  }
 } else {
  __ZN14LoRaMacCommand20clear_command_bufferEv($134); //@line 29493
 }
 do {
  if (($34 | 0) > ($14 | 0)) {
   $211 = $18 + 9 | 0; //@line 29498
   $213 = HEAP8[$40 + $14 >> 0] | 0; //@line 29500
   $214 = $34 - $211 | 0; //@line 29501
   $215 = $214 & 255; //@line 29502
   HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($68) | 0) + 9 >> 0] = $213; //@line 29505
   $219 = $78 << 24 >> 24 == 0; //@line 29507
   if (!($213 << 24 >> 24)) {
    if (!$219) {
     $$3$off0230 = 6; //@line 29510
     break;
    }
    $223 = $42 + 638 | 0; //@line 29516
    if (__Z15decrypt_payloadPKhtS0_jhjPh($40 + $211 | 0, $214 & 255, $38, $28, 1, $$$1177, $223) | 0) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($68) | 0) + 4 >> 2] = 13; //@line 29522
    }
    $228 = $42 + 264 | 0; //@line 29524
    $229 = __ZN11LoRaMacMlme16get_confirmationEv($228) | 0; //@line 29525
    $231 = HEAP32[$52 >> 2] | 0; //@line 29527
    $ReallocAsyncCtx17 = _emscripten_realloc_async_context(48) | 0; //@line 29528
    $232 = __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($134, $223, 0, $215, $48, $229, $42 + 1096 | 0, $231) | 0; //@line 29529
    if (___async) {
     HEAP32[$ReallocAsyncCtx17 >> 2] = 341; //@line 29532
     $233 = $ReallocAsyncCtx17 + 4 | 0; //@line 29533
     HEAP32[$233 >> 2] = $68; //@line 29534
     $234 = $ReallocAsyncCtx17 + 8 | 0; //@line 29535
     $$1$off0$expand_i1_val = $$1$off0 & 1; //@line 29536
     HEAP8[$234 >> 0] = $$1$off0$expand_i1_val; //@line 29537
     $235 = $ReallocAsyncCtx17 + 12 | 0; //@line 29538
     HEAP32[$235 >> 2] = $42; //@line 29539
     $236 = $ReallocAsyncCtx17 + 16 | 0; //@line 29540
     HEAP32[$236 >> 2] = $26; //@line 29541
     $237 = $ReallocAsyncCtx17 + 20 | 0; //@line 29542
     HEAP32[$237 >> 2] = $50; //@line 29543
     $238 = $ReallocAsyncCtx17 + 24 | 0; //@line 29544
     HEAP32[$238 >> 2] = $82; //@line 29545
     $239 = $ReallocAsyncCtx17 + 28 | 0; //@line 29546
     HEAP8[$239 >> 0] = $4; //@line 29547
     $240 = $ReallocAsyncCtx17 + 32 | 0; //@line 29548
     HEAP32[$240 >> 2] = $46; //@line 29549
     $241 = $ReallocAsyncCtx17 + 36 | 0; //@line 29550
     HEAP32[$241 >> 2] = $56; //@line 29551
     $242 = $ReallocAsyncCtx17 + 40 | 0; //@line 29552
     HEAP32[$242 >> 2] = $228; //@line 29553
     $243 = $ReallocAsyncCtx17 + 44 | 0; //@line 29554
     HEAP32[$243 >> 2] = $134; //@line 29555
     sp = STACKTOP; //@line 29556
     STACKTOP = sp; //@line 29557
     return;
    }
    HEAP32[___async_retval >> 2] = $232; //@line 29560
    ___async_unwind = 0; //@line 29561
    HEAP32[$ReallocAsyncCtx17 >> 2] = 341; //@line 29562
    $233 = $ReallocAsyncCtx17 + 4 | 0; //@line 29563
    HEAP32[$233 >> 2] = $68; //@line 29564
    $234 = $ReallocAsyncCtx17 + 8 | 0; //@line 29565
    $$1$off0$expand_i1_val = $$1$off0 & 1; //@line 29566
    HEAP8[$234 >> 0] = $$1$off0$expand_i1_val; //@line 29567
    $235 = $ReallocAsyncCtx17 + 12 | 0; //@line 29568
    HEAP32[$235 >> 2] = $42; //@line 29569
    $236 = $ReallocAsyncCtx17 + 16 | 0; //@line 29570
    HEAP32[$236 >> 2] = $26; //@line 29571
    $237 = $ReallocAsyncCtx17 + 20 | 0; //@line 29572
    HEAP32[$237 >> 2] = $50; //@line 29573
    $238 = $ReallocAsyncCtx17 + 24 | 0; //@line 29574
    HEAP32[$238 >> 2] = $82; //@line 29575
    $239 = $ReallocAsyncCtx17 + 28 | 0; //@line 29576
    HEAP8[$239 >> 0] = $4; //@line 29577
    $240 = $ReallocAsyncCtx17 + 32 | 0; //@line 29578
    HEAP32[$240 >> 2] = $46; //@line 29579
    $241 = $ReallocAsyncCtx17 + 36 | 0; //@line 29580
    HEAP32[$241 >> 2] = $56; //@line 29581
    $242 = $ReallocAsyncCtx17 + 40 | 0; //@line 29582
    HEAP32[$242 >> 2] = $228; //@line 29583
    $243 = $ReallocAsyncCtx17 + 44 | 0; //@line 29584
    HEAP32[$243 >> 2] = $134; //@line 29585
    sp = STACKTOP; //@line 29586
    STACKTOP = sp; //@line 29587
    return;
   }
   if ($219) {
    $270 = $214 & 255; //@line 29592
    $271 = $42 + 638 | 0; //@line 29593
    if (__Z15decrypt_payloadPKhtS0_jhjPh($40 + $211 | 0, $270, $20, $28, 1, $$$1177, $271) | 0) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($68) | 0) + 4 >> 2] = 13; //@line 29599
    }
    if ($$1$off0) {
     $$3$off0230 = 6; //@line 29602
     break;
    }
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($68) | 0) + 12 >> 2] = $271; //@line 29607
    HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($68) | 0) + 16 >> 1] = $270; //@line 29610
    HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($68) | 0) + 18 >> 0] = 1; //@line 29613
    label = 56; //@line 29614
    break;
   } else {
    $245 = $42 + 264 | 0; //@line 29617
    $246 = __ZN11LoRaMacMlme16get_confirmationEv($245) | 0; //@line 29618
    $248 = HEAP32[$52 >> 2] | 0; //@line 29620
    $ReallocAsyncCtx16 = _emscripten_realloc_async_context(72) | 0; //@line 29621
    $249 = __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($134, $40, 8, $12, $48, $246, $42 + 1096 | 0, $248) | 0; //@line 29622
    if (___async) {
     HEAP32[$ReallocAsyncCtx16 >> 2] = 342; //@line 29625
     $250 = $ReallocAsyncCtx16 + 4 | 0; //@line 29626
     HEAP32[$250 >> 2] = $42; //@line 29627
     $251 = $ReallocAsyncCtx16 + 8 | 0; //@line 29628
     HEAP32[$251 >> 2] = $26; //@line 29629
     $252 = $ReallocAsyncCtx16 + 12 | 0; //@line 29630
     HEAP32[$252 >> 2] = $50; //@line 29631
     $253 = $ReallocAsyncCtx16 + 16 | 0; //@line 29632
     HEAP32[$253 >> 2] = $82; //@line 29633
     $254 = $ReallocAsyncCtx16 + 20 | 0; //@line 29634
     HEAP8[$254 >> 0] = $4; //@line 29635
     $255 = $ReallocAsyncCtx16 + 24 | 0; //@line 29636
     HEAP32[$255 >> 2] = $68; //@line 29637
     $256 = $ReallocAsyncCtx16 + 28 | 0; //@line 29638
     $$1$off0$expand_i1_val52 = $$1$off0 & 1; //@line 29639
     HEAP8[$256 >> 0] = $$1$off0$expand_i1_val52; //@line 29640
     $257 = $ReallocAsyncCtx16 + 32 | 0; //@line 29641
     HEAP32[$257 >> 2] = $40; //@line 29642
     $258 = $ReallocAsyncCtx16 + 36 | 0; //@line 29643
     HEAP32[$258 >> 2] = $211; //@line 29644
     $259 = $ReallocAsyncCtx16 + 40 | 0; //@line 29645
     HEAP32[$259 >> 2] = $214; //@line 29646
     $260 = $ReallocAsyncCtx16 + 44 | 0; //@line 29647
     HEAP32[$260 >> 2] = $20; //@line 29648
     $261 = $ReallocAsyncCtx16 + 48 | 0; //@line 29649
     HEAP32[$261 >> 2] = $28; //@line 29650
     $262 = $ReallocAsyncCtx16 + 52 | 0; //@line 29651
     HEAP32[$262 >> 2] = $$$1177; //@line 29652
     $263 = $ReallocAsyncCtx16 + 56 | 0; //@line 29653
     HEAP32[$263 >> 2] = $84; //@line 29654
     $264 = $ReallocAsyncCtx16 + 60 | 0; //@line 29655
     HEAP32[$264 >> 2] = $86; //@line 29656
     $265 = $ReallocAsyncCtx16 + 64 | 0; //@line 29657
     HEAP32[$265 >> 2] = $245; //@line 29658
     $266 = $ReallocAsyncCtx16 + 68 | 0; //@line 29659
     HEAP32[$266 >> 2] = $134; //@line 29660
     sp = STACKTOP; //@line 29661
     STACKTOP = sp; //@line 29662
     return;
    }
    HEAP32[___async_retval >> 2] = $249; //@line 29665
    ___async_unwind = 0; //@line 29666
    HEAP32[$ReallocAsyncCtx16 >> 2] = 342; //@line 29667
    $250 = $ReallocAsyncCtx16 + 4 | 0; //@line 29668
    HEAP32[$250 >> 2] = $42; //@line 29669
    $251 = $ReallocAsyncCtx16 + 8 | 0; //@line 29670
    HEAP32[$251 >> 2] = $26; //@line 29671
    $252 = $ReallocAsyncCtx16 + 12 | 0; //@line 29672
    HEAP32[$252 >> 2] = $50; //@line 29673
    $253 = $ReallocAsyncCtx16 + 16 | 0; //@line 29674
    HEAP32[$253 >> 2] = $82; //@line 29675
    $254 = $ReallocAsyncCtx16 + 20 | 0; //@line 29676
    HEAP8[$254 >> 0] = $4; //@line 29677
    $255 = $ReallocAsyncCtx16 + 24 | 0; //@line 29678
    HEAP32[$255 >> 2] = $68; //@line 29679
    $256 = $ReallocAsyncCtx16 + 28 | 0; //@line 29680
    $$1$off0$expand_i1_val52 = $$1$off0 & 1; //@line 29681
    HEAP8[$256 >> 0] = $$1$off0$expand_i1_val52; //@line 29682
    $257 = $ReallocAsyncCtx16 + 32 | 0; //@line 29683
    HEAP32[$257 >> 2] = $40; //@line 29684
    $258 = $ReallocAsyncCtx16 + 36 | 0; //@line 29685
    HEAP32[$258 >> 2] = $211; //@line 29686
    $259 = $ReallocAsyncCtx16 + 40 | 0; //@line 29687
    HEAP32[$259 >> 2] = $214; //@line 29688
    $260 = $ReallocAsyncCtx16 + 44 | 0; //@line 29689
    HEAP32[$260 >> 2] = $20; //@line 29690
    $261 = $ReallocAsyncCtx16 + 48 | 0; //@line 29691
    HEAP32[$261 >> 2] = $28; //@line 29692
    $262 = $ReallocAsyncCtx16 + 52 | 0; //@line 29693
    HEAP32[$262 >> 2] = $$$1177; //@line 29694
    $263 = $ReallocAsyncCtx16 + 56 | 0; //@line 29695
    HEAP32[$263 >> 2] = $84; //@line 29696
    $264 = $ReallocAsyncCtx16 + 60 | 0; //@line 29697
    HEAP32[$264 >> 2] = $86; //@line 29698
    $265 = $ReallocAsyncCtx16 + 64 | 0; //@line 29699
    HEAP32[$265 >> 2] = $245; //@line 29700
    $266 = $ReallocAsyncCtx16 + 68 | 0; //@line 29701
    HEAP32[$266 >> 2] = $134; //@line 29702
    sp = STACKTOP; //@line 29703
    STACKTOP = sp; //@line 29704
    return;
   }
  } else {
   if (!($78 << 24 >> 24)) {
    if ($$1$off0) {
     $$3$off0230 = 6; //@line 29710
     break;
    } else {
     label = 56; //@line 29713
     break;
    }
   }
   $283 = $42 + 264 | 0; //@line 29717
   $284 = __ZN11LoRaMacMlme16get_confirmationEv($283) | 0; //@line 29718
   $286 = HEAP32[$52 >> 2] | 0; //@line 29720
   $ReallocAsyncCtx15 = _emscripten_realloc_async_context(48) | 0; //@line 29721
   $287 = __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($134, $40, 8, $12, $48, $284, $42 + 1096 | 0, $286) | 0; //@line 29722
   if (___async) {
    HEAP32[$ReallocAsyncCtx15 >> 2] = 343; //@line 29725
    $288 = $ReallocAsyncCtx15 + 4 | 0; //@line 29726
    HEAP32[$288 >> 2] = $42; //@line 29727
    $289 = $ReallocAsyncCtx15 + 8 | 0; //@line 29728
    HEAP32[$289 >> 2] = $26; //@line 29729
    $290 = $ReallocAsyncCtx15 + 12 | 0; //@line 29730
    HEAP32[$290 >> 2] = $50; //@line 29731
    $291 = $ReallocAsyncCtx15 + 16 | 0; //@line 29732
    HEAP32[$291 >> 2] = $82; //@line 29733
    $292 = $ReallocAsyncCtx15 + 20 | 0; //@line 29734
    $$1$off0$expand_i1_val54 = $$1$off0 & 1; //@line 29735
    HEAP8[$292 >> 0] = $$1$off0$expand_i1_val54; //@line 29736
    $293 = $ReallocAsyncCtx15 + 24 | 0; //@line 29737
    HEAP32[$293 >> 2] = $22; //@line 29738
    $294 = $ReallocAsyncCtx15 + 28 | 0; //@line 29739
    HEAP32[$294 >> 2] = $30; //@line 29740
    $295 = $ReallocAsyncCtx15 + 32 | 0; //@line 29741
    HEAP32[$295 >> 2] = $283; //@line 29742
    $296 = $ReallocAsyncCtx15 + 36 | 0; //@line 29743
    HEAP32[$296 >> 2] = $134; //@line 29744
    $297 = $ReallocAsyncCtx15 + 40 | 0; //@line 29745
    HEAP8[$297 >> 0] = $4; //@line 29746
    $298 = $ReallocAsyncCtx15 + 44 | 0; //@line 29747
    HEAP32[$298 >> 2] = $68; //@line 29748
    sp = STACKTOP; //@line 29749
    STACKTOP = sp; //@line 29750
    return;
   }
   HEAP32[___async_retval >> 2] = $287; //@line 29753
   ___async_unwind = 0; //@line 29754
   HEAP32[$ReallocAsyncCtx15 >> 2] = 343; //@line 29755
   $288 = $ReallocAsyncCtx15 + 4 | 0; //@line 29756
   HEAP32[$288 >> 2] = $42; //@line 29757
   $289 = $ReallocAsyncCtx15 + 8 | 0; //@line 29758
   HEAP32[$289 >> 2] = $26; //@line 29759
   $290 = $ReallocAsyncCtx15 + 12 | 0; //@line 29760
   HEAP32[$290 >> 2] = $50; //@line 29761
   $291 = $ReallocAsyncCtx15 + 16 | 0; //@line 29762
   HEAP32[$291 >> 2] = $82; //@line 29763
   $292 = $ReallocAsyncCtx15 + 20 | 0; //@line 29764
   $$1$off0$expand_i1_val54 = $$1$off0 & 1; //@line 29765
   HEAP8[$292 >> 0] = $$1$off0$expand_i1_val54; //@line 29766
   $293 = $ReallocAsyncCtx15 + 24 | 0; //@line 29767
   HEAP32[$293 >> 2] = $22; //@line 29768
   $294 = $ReallocAsyncCtx15 + 28 | 0; //@line 29769
   HEAP32[$294 >> 2] = $30; //@line 29770
   $295 = $ReallocAsyncCtx15 + 32 | 0; //@line 29771
   HEAP32[$295 >> 2] = $283; //@line 29772
   $296 = $ReallocAsyncCtx15 + 36 | 0; //@line 29773
   HEAP32[$296 >> 2] = $134; //@line 29774
   $297 = $ReallocAsyncCtx15 + 40 | 0; //@line 29775
   HEAP8[$297 >> 0] = $4; //@line 29776
   $298 = $ReallocAsyncCtx15 + 44 | 0; //@line 29777
   HEAP32[$298 >> 2] = $68; //@line 29778
   sp = STACKTOP; //@line 29779
   STACKTOP = sp; //@line 29780
   return;
  }
 } while (0);
 if ((label | 0) == 56) {
  $303 = (__ZN11LoRaMacMcps16get_confirmationEv($68) | 0) + 10 | 0; //@line 29787
  if ($4 & 32) {
   HEAP8[$303 >> 0] = 1; //@line 29789
   HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($68) | 0) + 28 >> 0] = 1; //@line 29792
   $306 = HEAP32[$26 >> 2] | 0; //@line 29793
   $ReallocAsyncCtx27 = _emscripten_realloc_async_context(20) | 0; //@line 29795
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($306, $42 + 1076 | 0); //@line 29796
   if (___async) {
    HEAP32[$ReallocAsyncCtx27 >> 2] = 344; //@line 29799
    $308 = $ReallocAsyncCtx27 + 4 | 0; //@line 29800
    HEAP32[$308 >> 2] = $42; //@line 29801
    $309 = $ReallocAsyncCtx27 + 8 | 0; //@line 29802
    HEAP32[$309 >> 2] = $26; //@line 29803
    $310 = $ReallocAsyncCtx27 + 12 | 0; //@line 29804
    HEAP32[$310 >> 2] = $50; //@line 29805
    $311 = $ReallocAsyncCtx27 + 16 | 0; //@line 29806
    HEAP32[$311 >> 2] = $82; //@line 29807
    sp = STACKTOP; //@line 29808
    STACKTOP = sp; //@line 29809
    return;
   }
   ___async_unwind = 0; //@line 29811
   HEAP32[$ReallocAsyncCtx27 >> 2] = 344; //@line 29812
   $308 = $ReallocAsyncCtx27 + 4 | 0; //@line 29813
   HEAP32[$308 >> 2] = $42; //@line 29814
   $309 = $ReallocAsyncCtx27 + 8 | 0; //@line 29815
   HEAP32[$309 >> 2] = $26; //@line 29816
   $310 = $ReallocAsyncCtx27 + 12 | 0; //@line 29817
   HEAP32[$310 >> 2] = $50; //@line 29818
   $311 = $ReallocAsyncCtx27 + 16 | 0; //@line 29819
   HEAP32[$311 >> 2] = $82; //@line 29820
   sp = STACKTOP; //@line 29821
   STACKTOP = sp; //@line 29822
   return;
  }
  HEAP8[$303 >> 0] = 0; //@line 29824
  if ((HEAPU8[$42 + 895 >> 0] | 0) > (HEAPU8[$42 + 894 >> 0] | 0)) {
   $317 = HEAP32[$26 >> 2] | 0; //@line 29831
   $ReallocAsyncCtx26 = _emscripten_realloc_async_context(20) | 0; //@line 29833
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($317, $42 + 1076 | 0); //@line 29834
   if (___async) {
    HEAP32[$ReallocAsyncCtx26 >> 2] = 345; //@line 29837
    $319 = $ReallocAsyncCtx26 + 4 | 0; //@line 29838
    HEAP32[$319 >> 2] = $42; //@line 29839
    $320 = $ReallocAsyncCtx26 + 8 | 0; //@line 29840
    HEAP32[$320 >> 2] = $26; //@line 29841
    $321 = $ReallocAsyncCtx26 + 12 | 0; //@line 29842
    HEAP32[$321 >> 2] = $50; //@line 29843
    $322 = $ReallocAsyncCtx26 + 16 | 0; //@line 29844
    HEAP32[$322 >> 2] = $82; //@line 29845
    sp = STACKTOP; //@line 29846
    STACKTOP = sp; //@line 29847
    return;
   }
   ___async_unwind = 0; //@line 29849
   HEAP32[$ReallocAsyncCtx26 >> 2] = 345; //@line 29850
   $319 = $ReallocAsyncCtx26 + 4 | 0; //@line 29851
   HEAP32[$319 >> 2] = $42; //@line 29852
   $320 = $ReallocAsyncCtx26 + 8 | 0; //@line 29853
   HEAP32[$320 >> 2] = $26; //@line 29854
   $321 = $ReallocAsyncCtx26 + 12 | 0; //@line 29855
   HEAP32[$321 >> 2] = $50; //@line 29856
   $322 = $ReallocAsyncCtx26 + 16 | 0; //@line 29857
   HEAP32[$322 >> 2] = $82; //@line 29858
   sp = STACKTOP; //@line 29859
   STACKTOP = sp; //@line 29860
   return;
  } else {
   $$3$off0230 = 2; //@line 29862
  }
 }
 $323 = $42 + 944 | 0; //@line 29865
 HEAP8[$323 >> 0] = $$3$off0230 | HEAP8[$323 >> 0] & -7; //@line 29869
 $349 = $42 + 944 | 0; //@line 29870
 HEAP8[$349 >> 0] = HEAP8[$349 >> 0] | 32; //@line 29873
 $352 = HEAP32[$26 >> 2] | 0; //@line 29874
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 29876
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($352, $42 + 996 | 0, 1); //@line 29877
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 352; //@line 29880
  $354 = $ReallocAsyncCtx5 + 4 | 0; //@line 29881
  HEAP32[$354 >> 2] = $50; //@line 29882
  $355 = $ReallocAsyncCtx5 + 8 | 0; //@line 29883
  HEAP32[$355 >> 2] = $82; //@line 29884
  sp = STACKTOP; //@line 29885
  STACKTOP = sp; //@line 29886
  return;
 }
 ___async_unwind = 0; //@line 29888
 HEAP32[$ReallocAsyncCtx5 >> 2] = 352; //@line 29889
 $354 = $ReallocAsyncCtx5 + 4 | 0; //@line 29890
 HEAP32[$354 >> 2] = $50; //@line 29891
 $355 = $ReallocAsyncCtx5 + 8 | 0; //@line 29892
 HEAP32[$355 >> 2] = $82; //@line 29893
 sp = STACKTOP; //@line 29894
 STACKTOP = sp; //@line 29895
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_399($0) {
 $0 = $0 | 0;
 var $$1$off0 = 0, $$1$off0$expand_i1_val = 0, $$1$off0$expand_i1_val52 = 0, $$1$off0$expand_i1_val54 = 0, $$3$off0230 = 0, $$byval_copy = 0, $$byval_copy48 = 0, $$byval_copy49 = 0, $$byval_copy50 = 0, $$sink = 0, $10 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $110 = 0, $113 = 0, $115 = 0, $116 = 0, $12 = 0, $132 = 0, $135 = 0, $136 = 0, $14 = 0, $143 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $158 = 0, $16 = 0, $161 = 0, $163 = 0, $164 = 0, $166 = 0, $168 = 0, $169 = 0, $173 = 0, $174 = 0, $18 = 0, $181 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $196 = 0, $199 = 0, $2 = 0, $20 = 0, $201 = 0, $202 = 0, $209 = 0, $211 = 0, $212 = 0, $213 = 0, $217 = 0, $22 = 0, $221 = 0, $226 = 0, $227 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $243 = 0, $244 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $268 = 0, $269 = 0, $28 = 0, $281 = 0, $282 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $30 = 0, $301 = 0, $304 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $315 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $325 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $34 = 0, $340 = 0, $343 = 0, $345 = 0, $346 = 0, $347 = 0, $350 = 0, $352 = 0, $353 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $66 = 0, $68 = 0, $74 = 0, $76 = 0, $78 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $90 = 0, $92 = 0, $95 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx19 = 0, $ReallocAsyncCtx20 = 0, $ReallocAsyncCtx21 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx26 = 0, $ReallocAsyncCtx27 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 29919
 STACKTOP = STACKTOP + 32 | 0; //@line 29920
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 29920
 $$byval_copy50 = sp + 24 | 0; //@line 29921
 $$byval_copy49 = sp + 16 | 0; //@line 29922
 $$byval_copy48 = sp + 8 | 0; //@line 29923
 $$byval_copy = sp; //@line 29924
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29926
 $4 = HEAP8[$0 + 8 >> 0] | 0; //@line 29928
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29930
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29934
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 29936
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29938
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 29940
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 29942
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 29944
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 29946
 $24 = HEAP8[$0 + 48 >> 0] | 0; //@line 29948
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 29950
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 29952
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 29954
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 29956
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 29958
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 29962
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 29964
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 29966
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 29968
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 29970
 $48 = HEAP8[$0 + 96 >> 0] | 0; //@line 29972
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 29974
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 29976
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 29980
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 29982
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 29984
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 29986
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 29990
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 29992
 $74 = HEAP8[$0 + 148 >> 0] | 0; //@line 29998
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 30000
 $78 = HEAP8[$0 + 156 >> 0] | 0; //@line 30002
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 30004
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 30006
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 30008
 $86 = (HEAP32[$0 + 108 >> 2] | 0) == (HEAP32[HEAP32[$0 + 128 >> 2] >> 2] | 0); //@line 30010
 $90 = $32 >>> 0 < ((__ZN7LoRaPHY29get_maximum_frame_counter_gapEv(HEAP32[$52 >> 2] | 0) | 0) & 65535) >>> 0; //@line 30014
 $92 = (__ZN11LoRaMacMcps14get_indicationEv($68) | 0) + 4 | 0; //@line 30016
 if (!$90) {
  HEAP32[$92 >> 2] = 10; //@line 30018
  HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($68) | 0) + 32 >> 2] = $2; //@line 30021
  _mbed_tracef(16, 13728, 13867, $44); //@line 30022
  $95 = $42 + 968 | 0; //@line 30023
  HEAP32[$95 >> 2] = HEAP32[$95 >> 2] | 64; //@line 30026
  if (!(HEAP8[$42 + 373 >> 0] | 0)) {
   $110 = $42 + 944 | 0; //@line 30031
   HEAP8[$110 >> 0] = HEAP8[$110 >> 0] | 34; //@line 30034
   $113 = HEAP32[$26 >> 2] | 0; //@line 30035
   $ReallocAsyncCtx10 = _emscripten_realloc_async_context(12) | 0; //@line 30037
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($113, $42 + 996 | 0, 1); //@line 30038
   if (___async) {
    HEAP32[$ReallocAsyncCtx10 >> 2] = 334; //@line 30041
    $115 = $ReallocAsyncCtx10 + 4 | 0; //@line 30042
    HEAP32[$115 >> 2] = $50; //@line 30043
    $116 = $ReallocAsyncCtx10 + 8 | 0; //@line 30044
    HEAP32[$116 >> 2] = $80; //@line 30045
    sp = STACKTOP; //@line 30046
    STACKTOP = sp; //@line 30047
    return;
   }
   ___async_unwind = 0; //@line 30049
   HEAP32[$ReallocAsyncCtx10 >> 2] = 334; //@line 30050
   $115 = $ReallocAsyncCtx10 + 4 | 0; //@line 30051
   HEAP32[$115 >> 2] = $50; //@line 30052
   $116 = $ReallocAsyncCtx10 + 8 | 0; //@line 30053
   HEAP32[$116 >> 2] = $80; //@line 30054
   sp = STACKTOP; //@line 30055
   STACKTOP = sp; //@line 30056
   return;
  } else {
   $102 = HEAP32[$42 + 1328 >> 2] | 0; //@line 30059
   HEAP32[$66 >> 2] = 318; //@line 30060
   HEAP32[$66 + 4 >> 2] = 0; //@line 30062
   $ReallocAsyncCtx22 = _emscripten_realloc_async_context(24) | 0; //@line 30063
   HEAP32[$$byval_copy >> 2] = HEAP32[$66 >> 2]; //@line 30064
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$66 + 4 >> 2]; //@line 30064
   $103 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($102, $42, $$byval_copy) | 0; //@line 30065
   if (___async) {
    HEAP32[$ReallocAsyncCtx22 >> 2] = 332; //@line 30068
    $104 = $ReallocAsyncCtx22 + 4 | 0; //@line 30069
    HEAP32[$104 >> 2] = $66; //@line 30070
    $105 = $ReallocAsyncCtx22 + 8 | 0; //@line 30071
    HEAP32[$105 >> 2] = $42; //@line 30072
    $106 = $ReallocAsyncCtx22 + 12 | 0; //@line 30073
    HEAP32[$106 >> 2] = $26; //@line 30074
    $107 = $ReallocAsyncCtx22 + 16 | 0; //@line 30075
    HEAP32[$107 >> 2] = $50; //@line 30076
    $108 = $ReallocAsyncCtx22 + 20 | 0; //@line 30077
    HEAP32[$108 >> 2] = $80; //@line 30078
    sp = STACKTOP; //@line 30079
    STACKTOP = sp; //@line 30080
    return;
   }
   HEAP32[___async_retval >> 2] = $103; //@line 30083
   ___async_unwind = 0; //@line 30084
   HEAP32[$ReallocAsyncCtx22 >> 2] = 332; //@line 30085
   $104 = $ReallocAsyncCtx22 + 4 | 0; //@line 30086
   HEAP32[$104 >> 2] = $66; //@line 30087
   $105 = $ReallocAsyncCtx22 + 8 | 0; //@line 30088
   HEAP32[$105 >> 2] = $42; //@line 30089
   $106 = $ReallocAsyncCtx22 + 12 | 0; //@line 30090
   HEAP32[$106 >> 2] = $26; //@line 30091
   $107 = $ReallocAsyncCtx22 + 16 | 0; //@line 30092
   HEAP32[$107 >> 2] = $50; //@line 30093
   $108 = $ReallocAsyncCtx22 + 20 | 0; //@line 30094
   HEAP32[$108 >> 2] = $80; //@line 30095
   sp = STACKTOP; //@line 30096
   STACKTOP = sp; //@line 30097
   return;
  }
 }
 if (!$86) {
  HEAP32[$92 >> 2] = 12; //@line 30101
  _mbed_tracef(16, 13728, 13867, $62); //@line 30102
  $325 = $42 + 968 | 0; //@line 30103
  HEAP32[$325 >> 2] = HEAP32[$325 >> 2] | 64; //@line 30106
  if (!(HEAP8[$42 + 373 >> 0] | 0)) {
   $340 = $42 + 944 | 0; //@line 30111
   HEAP8[$340 >> 0] = HEAP8[$340 >> 0] | 34; //@line 30114
   $343 = HEAP32[$26 >> 2] | 0; //@line 30115
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 30117
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($343, $42 + 996 | 0, 1); //@line 30118
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 348; //@line 30121
    $345 = $ReallocAsyncCtx7 + 4 | 0; //@line 30122
    HEAP32[$345 >> 2] = $50; //@line 30123
    $346 = $ReallocAsyncCtx7 + 8 | 0; //@line 30124
    HEAP32[$346 >> 2] = $80; //@line 30125
    sp = STACKTOP; //@line 30126
    STACKTOP = sp; //@line 30127
    return;
   }
   ___async_unwind = 0; //@line 30129
   HEAP32[$ReallocAsyncCtx7 >> 2] = 348; //@line 30130
   $345 = $ReallocAsyncCtx7 + 4 | 0; //@line 30131
   HEAP32[$345 >> 2] = $50; //@line 30132
   $346 = $ReallocAsyncCtx7 + 8 | 0; //@line 30133
   HEAP32[$346 >> 2] = $80; //@line 30134
   sp = STACKTOP; //@line 30135
   STACKTOP = sp; //@line 30136
   return;
  } else {
   $332 = HEAP32[$42 + 1328 >> 2] | 0; //@line 30139
   HEAP32[$6 >> 2] = 318; //@line 30140
   HEAP32[$6 + 4 >> 2] = 0; //@line 30142
   $ReallocAsyncCtx19 = _emscripten_realloc_async_context(24) | 0; //@line 30143
   HEAP32[$$byval_copy50 >> 2] = HEAP32[$6 >> 2]; //@line 30144
   HEAP32[$$byval_copy50 + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 30144
   $333 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($332, $42, $$byval_copy50) | 0; //@line 30145
   if (___async) {
    HEAP32[$ReallocAsyncCtx19 >> 2] = 346; //@line 30148
    $334 = $ReallocAsyncCtx19 + 4 | 0; //@line 30149
    HEAP32[$334 >> 2] = $6; //@line 30150
    $335 = $ReallocAsyncCtx19 + 8 | 0; //@line 30151
    HEAP32[$335 >> 2] = $42; //@line 30152
    $336 = $ReallocAsyncCtx19 + 12 | 0; //@line 30153
    HEAP32[$336 >> 2] = $26; //@line 30154
    $337 = $ReallocAsyncCtx19 + 16 | 0; //@line 30155
    HEAP32[$337 >> 2] = $50; //@line 30156
    $338 = $ReallocAsyncCtx19 + 20 | 0; //@line 30157
    HEAP32[$338 >> 2] = $80; //@line 30158
    sp = STACKTOP; //@line 30159
    STACKTOP = sp; //@line 30160
    return;
   }
   HEAP32[___async_retval >> 2] = $333; //@line 30163
   ___async_unwind = 0; //@line 30164
   HEAP32[$ReallocAsyncCtx19 >> 2] = 346; //@line 30165
   $334 = $ReallocAsyncCtx19 + 4 | 0; //@line 30166
   HEAP32[$334 >> 2] = $6; //@line 30167
   $335 = $ReallocAsyncCtx19 + 8 | 0; //@line 30168
   HEAP32[$335 >> 2] = $42; //@line 30169
   $336 = $ReallocAsyncCtx19 + 12 | 0; //@line 30170
   HEAP32[$336 >> 2] = $26; //@line 30171
   $337 = $ReallocAsyncCtx19 + 16 | 0; //@line 30172
   HEAP32[$337 >> 2] = $50; //@line 30173
   $338 = $ReallocAsyncCtx19 + 20 | 0; //@line 30174
   HEAP32[$338 >> 2] = $80; //@line 30175
   sp = STACKTOP; //@line 30176
   STACKTOP = sp; //@line 30177
   return;
  }
 }
 HEAP32[$92 >> 2] = 0; //@line 30180
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($68) | 0) + 8 >> 0] = $24; //@line 30183
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($68) | 0) + 11 >> 0] = ($4 & 255) >>> 4 & 1; //@line 30188
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($68) | 0) + 12 >> 2] = 0; //@line 30191
 HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($68) | 0) + 16 >> 1] = 0; //@line 30194
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($68) | 0) + 32 >> 2] = $2; //@line 30197
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($68) | 0) + 4 >> 2] = 0; //@line 30200
 HEAP32[$42 + 964 >> 2] = 0; //@line 30202
 $132 = $42 + 4 | 0; //@line 30203
 __ZN14LoRaMacCommand19clear_repeat_bufferEv($132); //@line 30204
 do {
  if ($24 << 24 >> 24 == 1) {
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($68) | 0) >> 2] = 2; //@line 30209
   $135 = $10 + 36 | 0; //@line 30210
   $136 = HEAP32[$135 >> 2] | 0; //@line 30211
   if (($136 | 0) != ($2 | 0) | ($136 | 0) == 0) {
    $$1$off0 = 0; //@line 30216
    $$sink = $135; //@line 30216
   } else {
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($68) | 0) + 4 >> 2] = 8; //@line 30220
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($68) | 0) + 32 >> 2] = $2; //@line 30223
    _mbed_tracef(16, 13728, 13867, $16); //@line 30224
    $143 = $42 + 968 | 0; //@line 30225
    HEAP32[$143 >> 2] = HEAP32[$143 >> 2] | 64; //@line 30228
    if (!(HEAP8[$42 + 373 >> 0] | 0)) {
     $158 = $42 + 944 | 0; //@line 30233
     HEAP8[$158 >> 0] = HEAP8[$158 >> 0] | 34; //@line 30236
     $161 = HEAP32[$26 >> 2] | 0; //@line 30237
     $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 30239
     __ZN18LoRaWANTimeHandler5startER13timer_event_tj($161, $42 + 996 | 0, 1); //@line 30240
     if (___async) {
      HEAP32[$ReallocAsyncCtx9 >> 2] = 337; //@line 30243
      $163 = $ReallocAsyncCtx9 + 4 | 0; //@line 30244
      HEAP32[$163 >> 2] = $50; //@line 30245
      $164 = $ReallocAsyncCtx9 + 8 | 0; //@line 30246
      HEAP32[$164 >> 2] = $80; //@line 30247
      sp = STACKTOP; //@line 30248
      STACKTOP = sp; //@line 30249
      return;
     }
     ___async_unwind = 0; //@line 30251
     HEAP32[$ReallocAsyncCtx9 >> 2] = 337; //@line 30252
     $163 = $ReallocAsyncCtx9 + 4 | 0; //@line 30253
     HEAP32[$163 >> 2] = $50; //@line 30254
     $164 = $ReallocAsyncCtx9 + 8 | 0; //@line 30255
     HEAP32[$164 >> 2] = $80; //@line 30256
     sp = STACKTOP; //@line 30257
     STACKTOP = sp; //@line 30258
     return;
    } else {
     $150 = HEAP32[$42 + 1328 >> 2] | 0; //@line 30261
     HEAP32[$58 >> 2] = 318; //@line 30262
     HEAP32[$58 + 4 >> 2] = 0; //@line 30264
     $ReallocAsyncCtx21 = _emscripten_realloc_async_context(24) | 0; //@line 30265
     HEAP32[$$byval_copy48 >> 2] = HEAP32[$58 >> 2]; //@line 30266
     HEAP32[$$byval_copy48 + 4 >> 2] = HEAP32[$58 + 4 >> 2]; //@line 30266
     $151 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($150, $42, $$byval_copy48) | 0; //@line 30267
     if (___async) {
      HEAP32[$ReallocAsyncCtx21 >> 2] = 335; //@line 30270
      $152 = $ReallocAsyncCtx21 + 4 | 0; //@line 30271
      HEAP32[$152 >> 2] = $58; //@line 30272
      $153 = $ReallocAsyncCtx21 + 8 | 0; //@line 30273
      HEAP32[$153 >> 2] = $42; //@line 30274
      $154 = $ReallocAsyncCtx21 + 12 | 0; //@line 30275
      HEAP32[$154 >> 2] = $26; //@line 30276
      $155 = $ReallocAsyncCtx21 + 16 | 0; //@line 30277
      HEAP32[$155 >> 2] = $50; //@line 30278
      $156 = $ReallocAsyncCtx21 + 20 | 0; //@line 30279
      HEAP32[$156 >> 2] = $80; //@line 30280
      sp = STACKTOP; //@line 30281
      STACKTOP = sp; //@line 30282
      return;
     }
     HEAP32[___async_retval >> 2] = $151; //@line 30285
     ___async_unwind = 0; //@line 30286
     HEAP32[$ReallocAsyncCtx21 >> 2] = 335; //@line 30287
     $152 = $ReallocAsyncCtx21 + 4 | 0; //@line 30288
     HEAP32[$152 >> 2] = $58; //@line 30289
     $153 = $ReallocAsyncCtx21 + 8 | 0; //@line 30290
     HEAP32[$153 >> 2] = $42; //@line 30291
     $154 = $ReallocAsyncCtx21 + 12 | 0; //@line 30292
     HEAP32[$154 >> 2] = $26; //@line 30293
     $155 = $ReallocAsyncCtx21 + 16 | 0; //@line 30294
     HEAP32[$155 >> 2] = $50; //@line 30295
     $156 = $ReallocAsyncCtx21 + 20 | 0; //@line 30296
     HEAP32[$156 >> 2] = $80; //@line 30297
     sp = STACKTOP; //@line 30298
     STACKTOP = sp; //@line 30299
     return;
    }
   }
  } else {
   $166 = $42 + 374 | 0; //@line 30304
   if ($74 << 24 >> 24 == 5) {
    HEAP8[$166 >> 0] = 1; //@line 30306
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($68) | 0) >> 2] = 1; //@line 30308
    $168 = $42 + 960 | 0; //@line 30309
    $169 = HEAP32[$168 >> 2] | 0; //@line 30310
    $$1$off0 = ($169 | 0) != 0 & ($169 | 0) == ($2 | 0); //@line 30314
    $$sink = $168; //@line 30314
    break;
   }
   HEAP8[$166 >> 0] = 0; //@line 30317
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($68) | 0) >> 2] = 0; //@line 30319
   $173 = $42 + 960 | 0; //@line 30320
   $174 = HEAP32[$173 >> 2] | 0; //@line 30321
   if (($174 | 0) != ($2 | 0) | ($174 | 0) == 0) {
    $$1$off0 = 0; //@line 30326
    $$sink = $173; //@line 30326
   } else {
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($68) | 0) + 4 >> 2] = 8; //@line 30330
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($68) | 0) + 32 >> 2] = $2; //@line 30333
    _mbed_tracef(16, 13728, 13867, $76); //@line 30334
    $181 = $42 + 968 | 0; //@line 30335
    HEAP32[$181 >> 2] = HEAP32[$181 >> 2] | 64; //@line 30338
    if (!(HEAP8[$42 + 373 >> 0] | 0)) {
     $196 = $42 + 944 | 0; //@line 30343
     HEAP8[$196 >> 0] = HEAP8[$196 >> 0] | 34; //@line 30346
     $199 = HEAP32[$26 >> 2] | 0; //@line 30347
     $ReallocAsyncCtx8 = _emscripten_realloc_async_context(12) | 0; //@line 30349
     __ZN18LoRaWANTimeHandler5startER13timer_event_tj($199, $42 + 996 | 0, 1); //@line 30350
     if (___async) {
      HEAP32[$ReallocAsyncCtx8 >> 2] = 340; //@line 30353
      $201 = $ReallocAsyncCtx8 + 4 | 0; //@line 30354
      HEAP32[$201 >> 2] = $50; //@line 30355
      $202 = $ReallocAsyncCtx8 + 8 | 0; //@line 30356
      HEAP32[$202 >> 2] = $80; //@line 30357
      sp = STACKTOP; //@line 30358
      STACKTOP = sp; //@line 30359
      return;
     }
     ___async_unwind = 0; //@line 30361
     HEAP32[$ReallocAsyncCtx8 >> 2] = 340; //@line 30362
     $201 = $ReallocAsyncCtx8 + 4 | 0; //@line 30363
     HEAP32[$201 >> 2] = $50; //@line 30364
     $202 = $ReallocAsyncCtx8 + 8 | 0; //@line 30365
     HEAP32[$202 >> 2] = $80; //@line 30366
     sp = STACKTOP; //@line 30367
     STACKTOP = sp; //@line 30368
     return;
    } else {
     $188 = HEAP32[$42 + 1328 >> 2] | 0; //@line 30371
     HEAP32[$60 >> 2] = 318; //@line 30372
     HEAP32[$60 + 4 >> 2] = 0; //@line 30374
     $ReallocAsyncCtx20 = _emscripten_realloc_async_context(24) | 0; //@line 30375
     HEAP32[$$byval_copy49 >> 2] = HEAP32[$60 >> 2]; //@line 30376
     HEAP32[$$byval_copy49 + 4 >> 2] = HEAP32[$60 + 4 >> 2]; //@line 30376
     $189 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($188, $42, $$byval_copy49) | 0; //@line 30377
     if (___async) {
      HEAP32[$ReallocAsyncCtx20 >> 2] = 338; //@line 30380
      $190 = $ReallocAsyncCtx20 + 4 | 0; //@line 30381
      HEAP32[$190 >> 2] = $60; //@line 30382
      $191 = $ReallocAsyncCtx20 + 8 | 0; //@line 30383
      HEAP32[$191 >> 2] = $42; //@line 30384
      $192 = $ReallocAsyncCtx20 + 12 | 0; //@line 30385
      HEAP32[$192 >> 2] = $26; //@line 30386
      $193 = $ReallocAsyncCtx20 + 16 | 0; //@line 30387
      HEAP32[$193 >> 2] = $50; //@line 30388
      $194 = $ReallocAsyncCtx20 + 20 | 0; //@line 30389
      HEAP32[$194 >> 2] = $80; //@line 30390
      sp = STACKTOP; //@line 30391
      STACKTOP = sp; //@line 30392
      return;
     }
     HEAP32[___async_retval >> 2] = $189; //@line 30395
     ___async_unwind = 0; //@line 30396
     HEAP32[$ReallocAsyncCtx20 >> 2] = 338; //@line 30397
     $190 = $ReallocAsyncCtx20 + 4 | 0; //@line 30398
     HEAP32[$190 >> 2] = $60; //@line 30399
     $191 = $ReallocAsyncCtx20 + 8 | 0; //@line 30400
     HEAP32[$191 >> 2] = $42; //@line 30401
     $192 = $ReallocAsyncCtx20 + 12 | 0; //@line 30402
     HEAP32[$192 >> 2] = $26; //@line 30403
     $193 = $ReallocAsyncCtx20 + 16 | 0; //@line 30404
     HEAP32[$193 >> 2] = $50; //@line 30405
     $194 = $ReallocAsyncCtx20 + 20 | 0; //@line 30406
     HEAP32[$194 >> 2] = $80; //@line 30407
     sp = STACKTOP; //@line 30408
     STACKTOP = sp; //@line 30409
     return;
    }
   }
  }
 } while (0);
 HEAP32[$$sink >> 2] = $2; //@line 30414
 if ((HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($68) | 0) >> 2] | 0) == 1) {
  if ($4 & 32) {
   __ZN14LoRaMacCommand20clear_command_bufferEv($132); //@line 30422
  }
 } else {
  __ZN14LoRaMacCommand20clear_command_bufferEv($132); //@line 30425
 }
 do {
  if (($34 | 0) > ($14 | 0)) {
   $209 = $18 + 9 | 0; //@line 30430
   $211 = HEAP8[$40 + $14 >> 0] | 0; //@line 30432
   $212 = $34 - $209 | 0; //@line 30433
   $213 = $212 & 255; //@line 30434
   HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($68) | 0) + 9 >> 0] = $211; //@line 30437
   $217 = $78 << 24 >> 24 == 0; //@line 30439
   if (!($211 << 24 >> 24)) {
    if (!$217) {
     $$3$off0230 = 6; //@line 30442
     break;
    }
    $221 = $42 + 638 | 0; //@line 30448
    if (__Z15decrypt_payloadPKhtS0_jhjPh($40 + $209 | 0, $212 & 255, $38, $28, 1, $2, $221) | 0) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($68) | 0) + 4 >> 2] = 13; //@line 30454
    }
    $226 = $42 + 264 | 0; //@line 30456
    $227 = __ZN11LoRaMacMlme16get_confirmationEv($226) | 0; //@line 30457
    $229 = HEAP32[$52 >> 2] | 0; //@line 30459
    $ReallocAsyncCtx17 = _emscripten_realloc_async_context(48) | 0; //@line 30460
    $230 = __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($132, $221, 0, $213, $48, $227, $42 + 1096 | 0, $229) | 0; //@line 30461
    if (___async) {
     HEAP32[$ReallocAsyncCtx17 >> 2] = 341; //@line 30464
     $231 = $ReallocAsyncCtx17 + 4 | 0; //@line 30465
     HEAP32[$231 >> 2] = $68; //@line 30466
     $232 = $ReallocAsyncCtx17 + 8 | 0; //@line 30467
     $$1$off0$expand_i1_val = $$1$off0 & 1; //@line 30468
     HEAP8[$232 >> 0] = $$1$off0$expand_i1_val; //@line 30469
     $233 = $ReallocAsyncCtx17 + 12 | 0; //@line 30470
     HEAP32[$233 >> 2] = $42; //@line 30471
     $234 = $ReallocAsyncCtx17 + 16 | 0; //@line 30472
     HEAP32[$234 >> 2] = $26; //@line 30473
     $235 = $ReallocAsyncCtx17 + 20 | 0; //@line 30474
     HEAP32[$235 >> 2] = $50; //@line 30475
     $236 = $ReallocAsyncCtx17 + 24 | 0; //@line 30476
     HEAP32[$236 >> 2] = $80; //@line 30477
     $237 = $ReallocAsyncCtx17 + 28 | 0; //@line 30478
     HEAP8[$237 >> 0] = $4; //@line 30479
     $238 = $ReallocAsyncCtx17 + 32 | 0; //@line 30480
     HEAP32[$238 >> 2] = $46; //@line 30481
     $239 = $ReallocAsyncCtx17 + 36 | 0; //@line 30482
     HEAP32[$239 >> 2] = $56; //@line 30483
     $240 = $ReallocAsyncCtx17 + 40 | 0; //@line 30484
     HEAP32[$240 >> 2] = $226; //@line 30485
     $241 = $ReallocAsyncCtx17 + 44 | 0; //@line 30486
     HEAP32[$241 >> 2] = $132; //@line 30487
     sp = STACKTOP; //@line 30488
     STACKTOP = sp; //@line 30489
     return;
    }
    HEAP32[___async_retval >> 2] = $230; //@line 30492
    ___async_unwind = 0; //@line 30493
    HEAP32[$ReallocAsyncCtx17 >> 2] = 341; //@line 30494
    $231 = $ReallocAsyncCtx17 + 4 | 0; //@line 30495
    HEAP32[$231 >> 2] = $68; //@line 30496
    $232 = $ReallocAsyncCtx17 + 8 | 0; //@line 30497
    $$1$off0$expand_i1_val = $$1$off0 & 1; //@line 30498
    HEAP8[$232 >> 0] = $$1$off0$expand_i1_val; //@line 30499
    $233 = $ReallocAsyncCtx17 + 12 | 0; //@line 30500
    HEAP32[$233 >> 2] = $42; //@line 30501
    $234 = $ReallocAsyncCtx17 + 16 | 0; //@line 30502
    HEAP32[$234 >> 2] = $26; //@line 30503
    $235 = $ReallocAsyncCtx17 + 20 | 0; //@line 30504
    HEAP32[$235 >> 2] = $50; //@line 30505
    $236 = $ReallocAsyncCtx17 + 24 | 0; //@line 30506
    HEAP32[$236 >> 2] = $80; //@line 30507
    $237 = $ReallocAsyncCtx17 + 28 | 0; //@line 30508
    HEAP8[$237 >> 0] = $4; //@line 30509
    $238 = $ReallocAsyncCtx17 + 32 | 0; //@line 30510
    HEAP32[$238 >> 2] = $46; //@line 30511
    $239 = $ReallocAsyncCtx17 + 36 | 0; //@line 30512
    HEAP32[$239 >> 2] = $56; //@line 30513
    $240 = $ReallocAsyncCtx17 + 40 | 0; //@line 30514
    HEAP32[$240 >> 2] = $226; //@line 30515
    $241 = $ReallocAsyncCtx17 + 44 | 0; //@line 30516
    HEAP32[$241 >> 2] = $132; //@line 30517
    sp = STACKTOP; //@line 30518
    STACKTOP = sp; //@line 30519
    return;
   }
   if ($217) {
    $268 = $212 & 255; //@line 30524
    $269 = $42 + 638 | 0; //@line 30525
    if (__Z15decrypt_payloadPKhtS0_jhjPh($40 + $209 | 0, $268, $20, $28, 1, $2, $269) | 0) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($68) | 0) + 4 >> 2] = 13; //@line 30531
    }
    if ($$1$off0) {
     $$3$off0230 = 6; //@line 30534
     break;
    }
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($68) | 0) + 12 >> 2] = $269; //@line 30539
    HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($68) | 0) + 16 >> 1] = $268; //@line 30542
    HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($68) | 0) + 18 >> 0] = 1; //@line 30545
    label = 56; //@line 30546
    break;
   } else {
    $243 = $42 + 264 | 0; //@line 30549
    $244 = __ZN11LoRaMacMlme16get_confirmationEv($243) | 0; //@line 30550
    $246 = HEAP32[$52 >> 2] | 0; //@line 30552
    $ReallocAsyncCtx16 = _emscripten_realloc_async_context(72) | 0; //@line 30553
    $247 = __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($132, $40, 8, $12, $48, $244, $42 + 1096 | 0, $246) | 0; //@line 30554
    if (___async) {
     HEAP32[$ReallocAsyncCtx16 >> 2] = 342; //@line 30557
     $248 = $ReallocAsyncCtx16 + 4 | 0; //@line 30558
     HEAP32[$248 >> 2] = $42; //@line 30559
     $249 = $ReallocAsyncCtx16 + 8 | 0; //@line 30560
     HEAP32[$249 >> 2] = $26; //@line 30561
     $250 = $ReallocAsyncCtx16 + 12 | 0; //@line 30562
     HEAP32[$250 >> 2] = $50; //@line 30563
     $251 = $ReallocAsyncCtx16 + 16 | 0; //@line 30564
     HEAP32[$251 >> 2] = $80; //@line 30565
     $252 = $ReallocAsyncCtx16 + 20 | 0; //@line 30566
     HEAP8[$252 >> 0] = $4; //@line 30567
     $253 = $ReallocAsyncCtx16 + 24 | 0; //@line 30568
     HEAP32[$253 >> 2] = $68; //@line 30569
     $254 = $ReallocAsyncCtx16 + 28 | 0; //@line 30570
     $$1$off0$expand_i1_val52 = $$1$off0 & 1; //@line 30571
     HEAP8[$254 >> 0] = $$1$off0$expand_i1_val52; //@line 30572
     $255 = $ReallocAsyncCtx16 + 32 | 0; //@line 30573
     HEAP32[$255 >> 2] = $40; //@line 30574
     $256 = $ReallocAsyncCtx16 + 36 | 0; //@line 30575
     HEAP32[$256 >> 2] = $209; //@line 30576
     $257 = $ReallocAsyncCtx16 + 40 | 0; //@line 30577
     HEAP32[$257 >> 2] = $212; //@line 30578
     $258 = $ReallocAsyncCtx16 + 44 | 0; //@line 30579
     HEAP32[$258 >> 2] = $20; //@line 30580
     $259 = $ReallocAsyncCtx16 + 48 | 0; //@line 30581
     HEAP32[$259 >> 2] = $28; //@line 30582
     $260 = $ReallocAsyncCtx16 + 52 | 0; //@line 30583
     HEAP32[$260 >> 2] = $2; //@line 30584
     $261 = $ReallocAsyncCtx16 + 56 | 0; //@line 30585
     HEAP32[$261 >> 2] = $82; //@line 30586
     $262 = $ReallocAsyncCtx16 + 60 | 0; //@line 30587
     HEAP32[$262 >> 2] = $84; //@line 30588
     $263 = $ReallocAsyncCtx16 + 64 | 0; //@line 30589
     HEAP32[$263 >> 2] = $243; //@line 30590
     $264 = $ReallocAsyncCtx16 + 68 | 0; //@line 30591
     HEAP32[$264 >> 2] = $132; //@line 30592
     sp = STACKTOP; //@line 30593
     STACKTOP = sp; //@line 30594
     return;
    }
    HEAP32[___async_retval >> 2] = $247; //@line 30597
    ___async_unwind = 0; //@line 30598
    HEAP32[$ReallocAsyncCtx16 >> 2] = 342; //@line 30599
    $248 = $ReallocAsyncCtx16 + 4 | 0; //@line 30600
    HEAP32[$248 >> 2] = $42; //@line 30601
    $249 = $ReallocAsyncCtx16 + 8 | 0; //@line 30602
    HEAP32[$249 >> 2] = $26; //@line 30603
    $250 = $ReallocAsyncCtx16 + 12 | 0; //@line 30604
    HEAP32[$250 >> 2] = $50; //@line 30605
    $251 = $ReallocAsyncCtx16 + 16 | 0; //@line 30606
    HEAP32[$251 >> 2] = $80; //@line 30607
    $252 = $ReallocAsyncCtx16 + 20 | 0; //@line 30608
    HEAP8[$252 >> 0] = $4; //@line 30609
    $253 = $ReallocAsyncCtx16 + 24 | 0; //@line 30610
    HEAP32[$253 >> 2] = $68; //@line 30611
    $254 = $ReallocAsyncCtx16 + 28 | 0; //@line 30612
    $$1$off0$expand_i1_val52 = $$1$off0 & 1; //@line 30613
    HEAP8[$254 >> 0] = $$1$off0$expand_i1_val52; //@line 30614
    $255 = $ReallocAsyncCtx16 + 32 | 0; //@line 30615
    HEAP32[$255 >> 2] = $40; //@line 30616
    $256 = $ReallocAsyncCtx16 + 36 | 0; //@line 30617
    HEAP32[$256 >> 2] = $209; //@line 30618
    $257 = $ReallocAsyncCtx16 + 40 | 0; //@line 30619
    HEAP32[$257 >> 2] = $212; //@line 30620
    $258 = $ReallocAsyncCtx16 + 44 | 0; //@line 30621
    HEAP32[$258 >> 2] = $20; //@line 30622
    $259 = $ReallocAsyncCtx16 + 48 | 0; //@line 30623
    HEAP32[$259 >> 2] = $28; //@line 30624
    $260 = $ReallocAsyncCtx16 + 52 | 0; //@line 30625
    HEAP32[$260 >> 2] = $2; //@line 30626
    $261 = $ReallocAsyncCtx16 + 56 | 0; //@line 30627
    HEAP32[$261 >> 2] = $82; //@line 30628
    $262 = $ReallocAsyncCtx16 + 60 | 0; //@line 30629
    HEAP32[$262 >> 2] = $84; //@line 30630
    $263 = $ReallocAsyncCtx16 + 64 | 0; //@line 30631
    HEAP32[$263 >> 2] = $243; //@line 30632
    $264 = $ReallocAsyncCtx16 + 68 | 0; //@line 30633
    HEAP32[$264 >> 2] = $132; //@line 30634
    sp = STACKTOP; //@line 30635
    STACKTOP = sp; //@line 30636
    return;
   }
  } else {
   if (!($78 << 24 >> 24)) {
    if ($$1$off0) {
     $$3$off0230 = 6; //@line 30642
     break;
    } else {
     label = 56; //@line 30645
     break;
    }
   }
   $281 = $42 + 264 | 0; //@line 30649
   $282 = __ZN11LoRaMacMlme16get_confirmationEv($281) | 0; //@line 30650
   $284 = HEAP32[$52 >> 2] | 0; //@line 30652
   $ReallocAsyncCtx15 = _emscripten_realloc_async_context(48) | 0; //@line 30653
   $285 = __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($132, $40, 8, $12, $48, $282, $42 + 1096 | 0, $284) | 0; //@line 30654
   if (___async) {
    HEAP32[$ReallocAsyncCtx15 >> 2] = 343; //@line 30657
    $286 = $ReallocAsyncCtx15 + 4 | 0; //@line 30658
    HEAP32[$286 >> 2] = $42; //@line 30659
    $287 = $ReallocAsyncCtx15 + 8 | 0; //@line 30660
    HEAP32[$287 >> 2] = $26; //@line 30661
    $288 = $ReallocAsyncCtx15 + 12 | 0; //@line 30662
    HEAP32[$288 >> 2] = $50; //@line 30663
    $289 = $ReallocAsyncCtx15 + 16 | 0; //@line 30664
    HEAP32[$289 >> 2] = $80; //@line 30665
    $290 = $ReallocAsyncCtx15 + 20 | 0; //@line 30666
    $$1$off0$expand_i1_val54 = $$1$off0 & 1; //@line 30667
    HEAP8[$290 >> 0] = $$1$off0$expand_i1_val54; //@line 30668
    $291 = $ReallocAsyncCtx15 + 24 | 0; //@line 30669
    HEAP32[$291 >> 2] = $22; //@line 30670
    $292 = $ReallocAsyncCtx15 + 28 | 0; //@line 30671
    HEAP32[$292 >> 2] = $30; //@line 30672
    $293 = $ReallocAsyncCtx15 + 32 | 0; //@line 30673
    HEAP32[$293 >> 2] = $281; //@line 30674
    $294 = $ReallocAsyncCtx15 + 36 | 0; //@line 30675
    HEAP32[$294 >> 2] = $132; //@line 30676
    $295 = $ReallocAsyncCtx15 + 40 | 0; //@line 30677
    HEAP8[$295 >> 0] = $4; //@line 30678
    $296 = $ReallocAsyncCtx15 + 44 | 0; //@line 30679
    HEAP32[$296 >> 2] = $68; //@line 30680
    sp = STACKTOP; //@line 30681
    STACKTOP = sp; //@line 30682
    return;
   }
   HEAP32[___async_retval >> 2] = $285; //@line 30685
   ___async_unwind = 0; //@line 30686
   HEAP32[$ReallocAsyncCtx15 >> 2] = 343; //@line 30687
   $286 = $ReallocAsyncCtx15 + 4 | 0; //@line 30688
   HEAP32[$286 >> 2] = $42; //@line 30689
   $287 = $ReallocAsyncCtx15 + 8 | 0; //@line 30690
   HEAP32[$287 >> 2] = $26; //@line 30691
   $288 = $ReallocAsyncCtx15 + 12 | 0; //@line 30692
   HEAP32[$288 >> 2] = $50; //@line 30693
   $289 = $ReallocAsyncCtx15 + 16 | 0; //@line 30694
   HEAP32[$289 >> 2] = $80; //@line 30695
   $290 = $ReallocAsyncCtx15 + 20 | 0; //@line 30696
   $$1$off0$expand_i1_val54 = $$1$off0 & 1; //@line 30697
   HEAP8[$290 >> 0] = $$1$off0$expand_i1_val54; //@line 30698
   $291 = $ReallocAsyncCtx15 + 24 | 0; //@line 30699
   HEAP32[$291 >> 2] = $22; //@line 30700
   $292 = $ReallocAsyncCtx15 + 28 | 0; //@line 30701
   HEAP32[$292 >> 2] = $30; //@line 30702
   $293 = $ReallocAsyncCtx15 + 32 | 0; //@line 30703
   HEAP32[$293 >> 2] = $281; //@line 30704
   $294 = $ReallocAsyncCtx15 + 36 | 0; //@line 30705
   HEAP32[$294 >> 2] = $132; //@line 30706
   $295 = $ReallocAsyncCtx15 + 40 | 0; //@line 30707
   HEAP8[$295 >> 0] = $4; //@line 30708
   $296 = $ReallocAsyncCtx15 + 44 | 0; //@line 30709
   HEAP32[$296 >> 2] = $68; //@line 30710
   sp = STACKTOP; //@line 30711
   STACKTOP = sp; //@line 30712
   return;
  }
 } while (0);
 if ((label | 0) == 56) {
  $301 = (__ZN11LoRaMacMcps16get_confirmationEv($68) | 0) + 10 | 0; //@line 30719
  if ($4 & 32) {
   HEAP8[$301 >> 0] = 1; //@line 30721
   HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($68) | 0) + 28 >> 0] = 1; //@line 30724
   $304 = HEAP32[$26 >> 2] | 0; //@line 30725
   $ReallocAsyncCtx27 = _emscripten_realloc_async_context(20) | 0; //@line 30727
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($304, $42 + 1076 | 0); //@line 30728
   if (___async) {
    HEAP32[$ReallocAsyncCtx27 >> 2] = 344; //@line 30731
    $306 = $ReallocAsyncCtx27 + 4 | 0; //@line 30732
    HEAP32[$306 >> 2] = $42; //@line 30733
    $307 = $ReallocAsyncCtx27 + 8 | 0; //@line 30734
    HEAP32[$307 >> 2] = $26; //@line 30735
    $308 = $ReallocAsyncCtx27 + 12 | 0; //@line 30736
    HEAP32[$308 >> 2] = $50; //@line 30737
    $309 = $ReallocAsyncCtx27 + 16 | 0; //@line 30738
    HEAP32[$309 >> 2] = $80; //@line 30739
    sp = STACKTOP; //@line 30740
    STACKTOP = sp; //@line 30741
    return;
   }
   ___async_unwind = 0; //@line 30743
   HEAP32[$ReallocAsyncCtx27 >> 2] = 344; //@line 30744
   $306 = $ReallocAsyncCtx27 + 4 | 0; //@line 30745
   HEAP32[$306 >> 2] = $42; //@line 30746
   $307 = $ReallocAsyncCtx27 + 8 | 0; //@line 30747
   HEAP32[$307 >> 2] = $26; //@line 30748
   $308 = $ReallocAsyncCtx27 + 12 | 0; //@line 30749
   HEAP32[$308 >> 2] = $50; //@line 30750
   $309 = $ReallocAsyncCtx27 + 16 | 0; //@line 30751
   HEAP32[$309 >> 2] = $80; //@line 30752
   sp = STACKTOP; //@line 30753
   STACKTOP = sp; //@line 30754
   return;
  }
  HEAP8[$301 >> 0] = 0; //@line 30756
  if ((HEAPU8[$42 + 895 >> 0] | 0) > (HEAPU8[$42 + 894 >> 0] | 0)) {
   $315 = HEAP32[$26 >> 2] | 0; //@line 30763
   $ReallocAsyncCtx26 = _emscripten_realloc_async_context(20) | 0; //@line 30765
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($315, $42 + 1076 | 0); //@line 30766
   if (___async) {
    HEAP32[$ReallocAsyncCtx26 >> 2] = 345; //@line 30769
    $317 = $ReallocAsyncCtx26 + 4 | 0; //@line 30770
    HEAP32[$317 >> 2] = $42; //@line 30771
    $318 = $ReallocAsyncCtx26 + 8 | 0; //@line 30772
    HEAP32[$318 >> 2] = $26; //@line 30773
    $319 = $ReallocAsyncCtx26 + 12 | 0; //@line 30774
    HEAP32[$319 >> 2] = $50; //@line 30775
    $320 = $ReallocAsyncCtx26 + 16 | 0; //@line 30776
    HEAP32[$320 >> 2] = $80; //@line 30777
    sp = STACKTOP; //@line 30778
    STACKTOP = sp; //@line 30779
    return;
   }
   ___async_unwind = 0; //@line 30781
   HEAP32[$ReallocAsyncCtx26 >> 2] = 345; //@line 30782
   $317 = $ReallocAsyncCtx26 + 4 | 0; //@line 30783
   HEAP32[$317 >> 2] = $42; //@line 30784
   $318 = $ReallocAsyncCtx26 + 8 | 0; //@line 30785
   HEAP32[$318 >> 2] = $26; //@line 30786
   $319 = $ReallocAsyncCtx26 + 12 | 0; //@line 30787
   HEAP32[$319 >> 2] = $50; //@line 30788
   $320 = $ReallocAsyncCtx26 + 16 | 0; //@line 30789
   HEAP32[$320 >> 2] = $80; //@line 30790
   sp = STACKTOP; //@line 30791
   STACKTOP = sp; //@line 30792
   return;
  } else {
   $$3$off0230 = 2; //@line 30794
  }
 }
 $321 = $42 + 944 | 0; //@line 30797
 HEAP8[$321 >> 0] = $$3$off0230 | HEAP8[$321 >> 0] & -7; //@line 30801
 $347 = $42 + 944 | 0; //@line 30802
 HEAP8[$347 >> 0] = HEAP8[$347 >> 0] | 32; //@line 30805
 $350 = HEAP32[$26 >> 2] | 0; //@line 30806
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 30808
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($350, $42 + 996 | 0, 1); //@line 30809
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 352; //@line 30812
  $352 = $ReallocAsyncCtx5 + 4 | 0; //@line 30813
  HEAP32[$352 >> 2] = $50; //@line 30814
  $353 = $ReallocAsyncCtx5 + 8 | 0; //@line 30815
  HEAP32[$353 >> 2] = $80; //@line 30816
  sp = STACKTOP; //@line 30817
  STACKTOP = sp; //@line 30818
  return;
 }
 ___async_unwind = 0; //@line 30820
 HEAP32[$ReallocAsyncCtx5 >> 2] = 352; //@line 30821
 $352 = $ReallocAsyncCtx5 + 4 | 0; //@line 30822
 HEAP32[$352 >> 2] = $50; //@line 30823
 $353 = $ReallocAsyncCtx5 + 8 | 0; //@line 30824
 HEAP32[$353 >> 2] = $80; //@line 30825
 sp = STACKTOP; //@line 30826
 STACKTOP = sp; //@line 30827
 return;
}
function __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$0$be = 0, $$0$i = 0, $$0$i104 = 0, $$0$i108 = 0, $$0$i98 = 0, $$0116 = 0, $$095113 = 0, $$096$be = 0, $$096$lcssa = 0, $$096115 = 0, $$1$lcssa = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $147 = 0, $15 = 0, $151 = 0, $156 = 0, $157 = 0, $16 = 0, $160 = 0, $166 = 0, $169 = 0, $17 = 0, $174 = 0, $18 = 0, $182 = 0, $19 = 0, $20 = 0, $201 = 0, $21 = 0, $211 = 0, $212 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $286 = 0, $287 = 0, $29 = 0, $298 = 0, $299 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $336 = 0, $34 = 0, $342 = 0, $343 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $412 = 0, $413 = 0, $42 = 0, $423 = 0, $427 = 0, $43 = 0, $431 = 0, $434 = 0, $44 = 0, $440 = 0, $443 = 0, $444 = 0, $45 = 0, $453 = 0, $454 = 0, $46 = 0, $47 = 0, $49 = 0, $531 = 0, $553 = 0, $563 = 0, $564 = 0, $60 = 0, $61 = 0, $633 = 0, $643 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, $div = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 19271
 STACKTOP = STACKTOP + 32 | 0; //@line 19272
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 19272
 $8 = sp + 12 | 0; //@line 19273
 $9 = sp; //@line 19274
 $10 = sp + 26 | 0; //@line 19275
 $11 = sp + 25 | 0; //@line 19276
 $12 = sp + 24 | 0; //@line 19277
 $13 = $3 & 255; //@line 19278
 if (($2 & 255) >= ($3 & 255)) {
  $$096$lcssa = 0; //@line 19281
  STACKTOP = sp; //@line 19282
  return $$096$lcssa | 0; //@line 19282
 }
 $15 = $5 + 4 | 0; //@line 19284
 $16 = $5 + 12 | 0; //@line 19285
 $17 = $5 + 13 | 0; //@line 19286
 $18 = $8 + 4 | 0; //@line 19287
 $19 = $6 + 60 | 0; //@line 19288
 $20 = $8 + 6 | 0; //@line 19289
 $21 = $6 + 44 | 0; //@line 19290
 $22 = $8 + 5 | 0; //@line 19291
 $23 = $6 + 1 | 0; //@line 19292
 $24 = $8 + 7 | 0; //@line 19293
 $25 = $8 + 8 | 0; //@line 19294
 $26 = $6 + 32 | 0; //@line 19295
 $27 = $8 + 9 | 0; //@line 19296
 $28 = $0 + 3 | 0; //@line 19297
 $29 = $0 + 2 | 0; //@line 19298
 $30 = $6 + 56 | 0; //@line 19299
 $31 = $6 + 58 | 0; //@line 19300
 $32 = $8 + 1 | 0; //@line 19301
 $33 = $8 + 4 | 0; //@line 19302
 $34 = $6 + 40 | 0; //@line 19303
 $35 = $6 + 36 | 0; //@line 19304
 $36 = $6 + 33 | 0; //@line 19305
 $37 = $0 + 1 | 0; //@line 19306
 $38 = $8 + 4 | 0; //@line 19307
 $39 = $9 + 4 | 0; //@line 19308
 $40 = $9 + 8 | 0; //@line 19309
 $41 = $6 + 16 | 0; //@line 19310
 $42 = $6 + 20 | 0; //@line 19311
 $43 = $8 + 1 | 0; //@line 19312
 $44 = $8 + 2 | 0; //@line 19313
 $45 = $6 + 45 | 0; //@line 19314
 $46 = $6 + 48 | 0; //@line 19315
 $47 = $8 + 4 | 0; //@line 19316
 $$0116 = $2; //@line 19317
 $$096115 = 0; //@line 19317
 L4 : while (1) {
  $49 = $$0116 + 1 << 24 >> 24; //@line 19320
  switch (HEAP8[$1 + ($$0116 & 255) >> 0] | 0) {
  case 2:
   {
    HEAP32[$15 >> 2] = 0; //@line 19325
    HEAP8[$16 >> 0] = HEAP8[$1 + ($49 & 255) >> 0] | 0; //@line 19330
    HEAP8[$17 >> 0] = HEAP8[$1 + ($$0116 + 2 & 255) >> 0] | 0; //@line 19335
    $$0$be = $$0116 + 3 << 24 >> 24; //@line 19336
    $$096$be = $$096115; //@line 19336
    break;
   }
  case 3:
   {
    HEAP8[$9 >> 0] = 0; //@line 19340
    HEAP8[$10 >> 0] = 0; //@line 19341
    HEAP8[$11 >> 0] = 0; //@line 19342
    HEAP8[$12 >> 0] = 0; //@line 19343
    $60 = $49 & 255; //@line 19344
    $61 = $60 + -1 | 0; //@line 19345
    HEAP32[$8 >> 2] = $1 + $61; //@line 19347
    HEAP8[$18 >> 0] = $13 - $61; //@line 19350
    HEAP8[$20 >> 0] = HEAP8[$19 >> 0] | 0; //@line 19352
    HEAP8[$22 >> 0] = HEAP8[$21 >> 0] | 0; //@line 19354
    HEAP8[$24 >> 0] = HEAP8[$23 >> 0] | 0; //@line 19356
    HEAP8[$25 >> 0] = HEAP8[$6 >> 0] | 0; //@line 19358
    HEAP8[$27 >> 0] = HEAP8[$26 >> 0] | 0; //@line 19360
    $72 = HEAP32[(HEAP32[$7 >> 2] | 0) + 36 >> 2] | 0; //@line 19363
    $AsyncCtx = _emscripten_alloc_async_context(272, sp) | 0; //@line 19364
    $73 = FUNCTION_TABLE_iiiiiii[$72 & 3]($7, $8, $9, $10, $11, $12) | 0; //@line 19365
    if (___async) {
     label = 6; //@line 19368
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 19371
    if (($73 & 7) == 7) {
     HEAP8[$23 >> 0] = HEAP8[$9 >> 0] | 0; //@line 19376
     HEAP8[$6 >> 0] = HEAP8[$10 >> 0] | 0; //@line 19378
     HEAP8[$26 >> 0] = HEAP8[$11 >> 0] | 0; //@line 19380
    }
    $147 = HEAP8[$12 >> 0] | 0; //@line 19382
    if (($147 & 255) > 4) {
     $div = ($147 & 255) / 5 | 0; //@line 19385
     $151 = (-128 - (HEAP8[$28 >> 0] | 0) & 255) + -1 | 0; //@line 19390
     $$095113 = 0; //@line 19391
     $157 = HEAP8[$29 >> 0] | 0; //@line 19391
     while (1) {
      $156 = $157 & 255; //@line 19393
      if (($151 | 0) > ($156 | 0)) {
       $160 = $157 + 2 << 24 >> 24; //@line 19397
       HEAP8[$0 + 4 + $156 >> 0] = 3; //@line 19401
       HEAP8[$29 >> 0] = $160; //@line 19402
       HEAP8[($157 + 1 & 255) + ($0 + 4) >> 0] = $73; //@line 19403
       HEAP8[$0 >> 0] = 1; //@line 19404
       $$0$i = 0; //@line 19405
       $643 = $160; //@line 19405
      } else {
       $$0$i = -1e3; //@line 19407
       $643 = $157; //@line 19407
      }
      $$095113 = $$095113 + 1 << 24 >> 24; //@line 19409
      if (($$095113 & 255) >= ($div & 255)) {
       $$1$lcssa = $$0$i; //@line 19414
       break;
      } else {
       $157 = $643; //@line 19412
      }
     }
    } else {
     $$1$lcssa = $$096115; //@line 19419
    }
    $$0$be = $60 + 255 + ($147 & 255) & 255; //@line 19425
    $$096$be = $$1$lcssa; //@line 19425
    break;
   }
  case 4:
   {
    $166 = $$0116 + 2 << 24 >> 24; //@line 19429
    $169 = HEAP8[$1 + ($49 & 255) >> 0] | 0; //@line 19432
    HEAP8[$30 >> 0] = $169; //@line 19433
    HEAP16[$31 >> 1] = 1 << ($169 & 255); //@line 19437
    $174 = HEAP8[$29 >> 0] | 0; //@line 19439
    if (($174 & 255) < (-128 - (HEAP8[$28 >> 0] | 0) & 255)) {
     HEAP8[$29 >> 0] = $174 + 1 << 24 >> 24; //@line 19446
     HEAP8[($174 & 255) + ($0 + 4) >> 0] = 4; //@line 19447
     HEAP8[$0 >> 0] = 1; //@line 19448
     $$0$be = $166; //@line 19449
     $$096$be = 0; //@line 19449
    } else {
     $$0$be = $166; //@line 19451
     $$096$be = -1e3; //@line 19451
    }
    break;
   }
  case 5:
   {
    $182 = HEAP8[$1 + ($49 & 255) >> 0] | 0; //@line 19458
    HEAP8[$32 >> 0] = ($182 & 255) >>> 4 & 7; //@line 19463
    HEAP8[$8 >> 0] = $182 & 15; //@line 19465
    $201 = $$0116 + 5 << 24 >> 24; //@line 19479
    HEAP32[$33 >> 2] = (HEAPU8[$1 + ($$0116 + 4 & 255) >> 0] << 16 | (HEAPU8[$1 + ($$0116 + 3 & 255) >> 0] << 8 | HEAPU8[$1 + ($$0116 + 2 & 255) >> 0])) * 100; //@line 19487
    $211 = HEAP32[(HEAP32[$7 >> 2] | 0) + 40 >> 2] | 0; //@line 19490
    $AsyncCtx3 = _emscripten_alloc_async_context(268, sp) | 0; //@line 19491
    $212 = FUNCTION_TABLE_iii[$211 & 31]($7, $8) | 0; //@line 19492
    if (___async) {
     label = 18; //@line 19495
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 19498
    if (($212 & 7) == 7) {
     HEAP8[$34 >> 0] = HEAP8[$8 >> 0] | 0; //@line 19503
     HEAP32[$35 >> 2] = HEAP32[$33 >> 2]; //@line 19505
     HEAP8[$36 >> 0] = HEAP8[$32 >> 0] | 0; //@line 19507
    }
    $286 = HEAP8[$29 >> 0] | 0; //@line 19510
    $287 = $286 & 255; //@line 19511
    if (((-128 - (HEAP8[$28 >> 0] | 0) & 255) + -1 | 0) > ($287 | 0)) {
     HEAP8[$0 + 4 + $287 >> 0] = 5; //@line 19519
     HEAP8[$29 >> 0] = $286 + 2 << 24 >> 24; //@line 19521
     HEAP8[($286 + 1 & 255) + ($0 + 4) >> 0] = $212; //@line 19524
     HEAP8[$37 >> 0] = 1; //@line 19525
     HEAP8[$0 >> 0] = 1; //@line 19526
     $$0$i104 = 0; //@line 19527
    } else {
     $$0$i104 = -1e3; //@line 19529
    }
    $$0$be = $201; //@line 19531
    $$096$be = $$0$i104; //@line 19531
    break;
   }
  case 6:
   {
    $298 = HEAP8[$29 >> 0] | 0; //@line 19536
    $299 = $298 & 255; //@line 19537
    if (((-128 - (HEAP8[$28 >> 0] | 0) & 255) + -2 | 0) > ($299 | 0)) {
     HEAP8[$0 + 4 + $299 >> 0] = 6; //@line 19545
     HEAP8[($298 + 1 & 255) + ($0 + 4) >> 0] = -1; //@line 19549
     HEAP8[$29 >> 0] = $298 + 3 << 24 >> 24; //@line 19551
     HEAP8[($298 + 2 & 255) + ($0 + 4) >> 0] = $4; //@line 19554
     HEAP8[$0 >> 0] = 1; //@line 19555
     $$0$be = $49; //@line 19556
     $$096$be = 0; //@line 19556
    } else {
     $$0$be = $49; //@line 19558
     $$096$be = -1e3; //@line 19558
    }
    break;
   }
  case 7:
   {
    HEAP8[$38 >> 0] = HEAP8[$1 + ($49 & 255) >> 0] | 0; //@line 19567
    HEAP32[$8 >> 2] = $9; //@line 19568
    HEAP32[$9 >> 2] = (HEAPU8[$1 + ($$0116 + 4 & 255) >> 0] << 16 | (HEAPU8[$1 + ($$0116 + 3 & 255) >> 0] << 8 | HEAPU8[$1 + ($$0116 + 2 & 255) >> 0])) * 100; //@line 19589
    HEAP32[$39 >> 2] = 0; //@line 19590
    $336 = $$0116 + 6 << 24 >> 24; //@line 19591
    HEAP8[$40 >> 0] = HEAP8[$1 + ($$0116 + 5 & 255) >> 0] | 0; //@line 19595
    $342 = HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0; //@line 19598
    $AsyncCtx7 = _emscripten_alloc_async_context(268, sp) | 0; //@line 19599
    $343 = FUNCTION_TABLE_iii[$342 & 31]($7, $8) | 0; //@line 19600
    if (___async) {
     label = 27; //@line 19603
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 19606
    $412 = HEAP8[$29 >> 0] | 0; //@line 19608
    $413 = $412 & 255; //@line 19609
    if (((-128 - (HEAP8[$28 >> 0] | 0) & 255) + -1 | 0) > ($413 | 0)) {
     HEAP8[$0 + 4 + $413 >> 0] = 7; //@line 19620
     HEAP8[$29 >> 0] = $412 + 2 << 24 >> 24; //@line 19621
     HEAP8[($412 + 1 & 255) + ($0 + 4) >> 0] = $343; //@line 19622
     HEAP8[$0 >> 0] = 1; //@line 19623
     $$0$i108 = 0; //@line 19624
    } else {
     $$0$i108 = -1e3; //@line 19626
    }
    $$0$be = $336; //@line 19628
    $$096$be = $$0$i108; //@line 19628
    break;
   }
  case 8:
   {
    $423 = $$0116 + 2 << 24 >> 24; //@line 19632
    $427 = HEAP8[$1 + ($49 & 255) >> 0] & 15; //@line 19636
    $431 = ($427 + ($427 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 19641
    HEAP32[$41 >> 2] = $431; //@line 19642
    HEAP32[$42 >> 2] = $431 + 1e3; //@line 19644
    $434 = HEAP8[$29 >> 0] | 0; //@line 19646
    if (($434 & 255) < (-128 - (HEAP8[$28 >> 0] | 0) & 255)) {
     HEAP8[$29 >> 0] = $434 + 1 << 24 >> 24; //@line 19653
     HEAP8[($434 & 255) + ($0 + 4) >> 0] = 8; //@line 19654
     HEAP8[$37 >> 0] = 1; //@line 19655
     HEAP8[$0 >> 0] = 1; //@line 19656
     $$0$be = $423; //@line 19657
     $$096$be = 0; //@line 19657
    } else {
     $$0$be = $423; //@line 19659
     $$096$be = -1e3; //@line 19659
    }
    break;
   }
  case 9:
   {
    $440 = $$0116 + 2 << 24 >> 24; //@line 19664
    $443 = HEAP8[$1 + ($49 & 255) >> 0] | 0; //@line 19667
    HEAP8[$8 >> 0] = 0; //@line 19668
    $444 = $443 & 255; //@line 19669
    HEAP8[$43 >> 0] = $444 >>> 5 & 1; //@line 19673
    if ($444 & 16 | 0) {
     HEAP8[$8 >> 0] = 1; //@line 19677
    }
    HEAP8[$44 >> 0] = $444 & 15; //@line 19681
    $453 = HEAP32[(HEAP32[$7 >> 2] | 0) + 44 >> 2] | 0; //@line 19684
    $AsyncCtx11 = _emscripten_alloc_async_context(272, sp) | 0; //@line 19685
    $454 = FUNCTION_TABLE_iii[$453 & 31]($7, $8) | 0; //@line 19686
    if (___async) {
     label = 36; //@line 19689
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 19692
    if ($454) {
     HEAP8[$21 >> 0] = HEAP8[$8 >> 0] | 0; //@line 19695
     HEAP8[$45 >> 0] = HEAP8[$43 >> 0] | 0; //@line 19697
     HEAPF32[$46 >> 2] = +(HEAPU8[14225 + (HEAPU8[$44 >> 0] | 0) >> 0] | 0); //@line 19703
     $531 = HEAP8[$29 >> 0] | 0; //@line 19705
     if (($531 & 255) < (-128 - (HEAP8[$28 >> 0] | 0) & 255)) {
      HEAP8[$29 >> 0] = $531 + 1 << 24 >> 24; //@line 19712
      HEAP8[($531 & 255) + ($0 + 4) >> 0] = 9; //@line 19713
      HEAP8[$0 >> 0] = 1; //@line 19714
      $$2 = 0; //@line 19715
     } else {
      $$2 = -1e3; //@line 19717
     }
    } else {
     $$2 = $$096115; //@line 19720
    }
    $$0$be = $440; //@line 19722
    $$096$be = $$2; //@line 19722
    break;
   }
  case 10:
   {
    HEAP8[$8 >> 0] = HEAP8[$1 + ($49 & 255) >> 0] | 0; //@line 19730
    $553 = $$0116 + 5 << 24 >> 24; //@line 19743
    HEAP32[$47 >> 2] = (HEAPU8[$1 + ($$0116 + 4 & 255) >> 0] << 16 | (HEAPU8[$1 + ($$0116 + 3 & 255) >> 0] << 8 | HEAPU8[$1 + ($$0116 + 2 & 255) >> 0])) * 100; //@line 19751
    $563 = HEAP32[(HEAP32[$7 >> 2] | 0) + 48 >> 2] | 0; //@line 19754
    $AsyncCtx15 = _emscripten_alloc_async_context(268, sp) | 0; //@line 19755
    $564 = FUNCTION_TABLE_iii[$563 & 31]($7, $8) | 0; //@line 19756
    if (___async) {
     label = 42; //@line 19759
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 19762
    $633 = HEAP8[$29 >> 0] | 0; //@line 19764
    if (($633 & 255) < (-128 - (HEAP8[$28 >> 0] | 0) & 255)) {
     HEAP8[($633 & 255) + ($0 + 4) >> 0] = 10; //@line 19771
     HEAP8[$29 >> 0] = $633 + 2 << 24 >> 24; //@line 19773
     HEAP8[($633 + 1 & 255) + ($0 + 4) >> 0] = $564; //@line 19776
     HEAP8[$37 >> 0] = 1; //@line 19777
     HEAP8[$0 >> 0] = 1; //@line 19778
     $$0$i98 = 0; //@line 19779
    } else {
     $$0$i98 = -1e3; //@line 19781
    }
    $$0$be = $553; //@line 19783
    $$096$be = $$0$i98; //@line 19783
    break;
   }
  default:
   {
    $$0$be = $49; //@line 19787
    $$096$be = -1013; //@line 19787
   }
  }
  if (($$0$be & 255) < ($3 & 255)) {
   $$0116 = $$0$be; //@line 19792
   $$096115 = $$096$be; //@line 19792
  } else {
   $$096$lcssa = $$096$be; //@line 19794
   label = 47; //@line 19795
   break;
  }
 }
 if ((label | 0) == 6) {
  HEAP32[$AsyncCtx >> 2] = 504; //@line 19800
  HEAP32[$AsyncCtx + 4 >> 2] = $25; //@line 19802
  HEAP8[$AsyncCtx + 8 >> 0] = $2; //@line 19804
  HEAP32[$AsyncCtx + 12 >> 2] = $36; //@line 19806
  HEAP32[$AsyncCtx + 16 >> 2] = $45; //@line 19808
  HEAP32[$AsyncCtx + 20 >> 2] = $9; //@line 19810
  HEAP32[$AsyncCtx + 24 >> 2] = $37; //@line 19812
  HEAP32[$AsyncCtx + 28 >> 2] = $13; //@line 19814
  HEAP32[$AsyncCtx + 32 >> 2] = $46; //@line 19816
  HEAP32[$AsyncCtx + 36 >> 2] = $6; //@line 19818
  HEAP32[$AsyncCtx + 40 >> 2] = $8; //@line 19820
  HEAP32[$AsyncCtx + 44 >> 2] = $44; //@line 19822
  HEAP32[$AsyncCtx + 48 >> 2] = $15; //@line 19824
  HEAP32[$AsyncCtx + 52 >> 2] = $26; //@line 19826
  HEAP32[$AsyncCtx + 56 >> 2] = $35; //@line 19828
  HEAP32[$AsyncCtx + 60 >> 2] = $7; //@line 19830
  HEAP32[$AsyncCtx + 64 >> 2] = $8; //@line 19832
  HEAP32[$AsyncCtx + 68 >> 2] = $22; //@line 19834
  HEAP32[$AsyncCtx + 72 >> 2] = $7; //@line 19836
  HEAP32[$AsyncCtx + 76 >> 2] = $43; //@line 19838
  HEAP32[$AsyncCtx + 80 >> 2] = $21; //@line 19840
  HEAP32[$AsyncCtx + 84 >> 2] = $34; //@line 19842
  HEAP32[$AsyncCtx + 88 >> 2] = $24; //@line 19844
  HEAP32[$AsyncCtx + 92 >> 2] = $41; //@line 19846
  HEAP32[$AsyncCtx + 96 >> 2] = $32; //@line 19848
  HEAP32[$AsyncCtx + 100 >> 2] = $23; //@line 19850
  HEAP32[$AsyncCtx + 104 >> 2] = $9; //@line 19852
  HEAP32[$AsyncCtx + 108 >> 2] = $33; //@line 19854
  HEAP32[$AsyncCtx + 112 >> 2] = $42; //@line 19856
  HEAP32[$AsyncCtx + 116 >> 2] = $8; //@line 19858
  HEAP32[$AsyncCtx + 120 >> 2] = $40; //@line 19860
  HEAP32[$AsyncCtx + 124 >> 2] = $31; //@line 19862
  HEAP32[$AsyncCtx + 128 >> 2] = $10; //@line 19864
  HEAP32[$AsyncCtx + 132 >> 2] = $8; //@line 19866
  HEAP32[$AsyncCtx + 136 >> 2] = $18; //@line 19868
  HEAP32[$AsyncCtx + 140 >> 2] = $8; //@line 19870
  HEAP32[$AsyncCtx + 144 >> 2] = $7; //@line 19872
  HEAP32[$AsyncCtx + 148 >> 2] = $0; //@line 19874
  HEAP32[$AsyncCtx + 152 >> 2] = $$096115; //@line 19876
  HEAP32[$AsyncCtx + 156 >> 2] = $20; //@line 19878
  HEAP32[$AsyncCtx + 160 >> 2] = $9; //@line 19880
  HEAP32[$AsyncCtx + 164 >> 2] = $11; //@line 19882
  HEAP32[$AsyncCtx + 168 >> 2] = $30; //@line 19884
  HEAP32[$AsyncCtx + 172 >> 2] = $39; //@line 19886
  HEAP32[$AsyncCtx + 176 >> 2] = $12; //@line 19888
  HEAP32[$AsyncCtx + 180 >> 2] = $19; //@line 19890
  HEAP32[$AsyncCtx + 184 >> 2] = $8; //@line 19892
  HEAP32[$AsyncCtx + 188 >> 2] = $8; //@line 19894
  HEAP32[$AsyncCtx + 192 >> 2] = $8; //@line 19896
  HEAP32[$AsyncCtx + 196 >> 2] = $7; //@line 19898
  HEAP32[$AsyncCtx + 200 >> 2] = $60; //@line 19900
  HEAP32[$AsyncCtx + 204 >> 2] = $29; //@line 19902
  HEAP32[$AsyncCtx + 208 >> 2] = $16; //@line 19904
  HEAP32[$AsyncCtx + 212 >> 2] = $7; //@line 19906
  HEAP8[$AsyncCtx + 216 >> 0] = $4; //@line 19908
  HEAP8[$AsyncCtx + 217 >> 0] = $3; //@line 19910
  HEAP32[$AsyncCtx + 220 >> 2] = $27; //@line 19912
  HEAP32[$AsyncCtx + 224 >> 2] = $9; //@line 19914
  HEAP32[$AsyncCtx + 228 >> 2] = $8; //@line 19916
  HEAP32[$AsyncCtx + 232 >> 2] = $8; //@line 19918
  HEAP32[$AsyncCtx + 236 >> 2] = $1; //@line 19920
  HEAP32[$AsyncCtx + 240 >> 2] = $47; //@line 19922
  HEAP32[$AsyncCtx + 244 >> 2] = $0; //@line 19924
  HEAP32[$AsyncCtx + 248 >> 2] = $38; //@line 19926
  HEAP32[$AsyncCtx + 252 >> 2] = $8; //@line 19928
  HEAP32[$AsyncCtx + 256 >> 2] = $17; //@line 19930
  HEAP32[$AsyncCtx + 260 >> 2] = $7; //@line 19932
  HEAP32[$AsyncCtx + 264 >> 2] = $8; //@line 19934
  HEAP32[$AsyncCtx + 268 >> 2] = $28; //@line 19936
  sp = STACKTOP; //@line 19937
  STACKTOP = sp; //@line 19938
  return 0; //@line 19938
 } else if ((label | 0) == 18) {
  HEAP32[$AsyncCtx3 >> 2] = 505; //@line 19941
  HEAP32[$AsyncCtx3 + 4 >> 2] = $25; //@line 19943
  HEAP32[$AsyncCtx3 + 8 >> 2] = $36; //@line 19945
  HEAP32[$AsyncCtx3 + 12 >> 2] = $45; //@line 19947
  HEAP32[$AsyncCtx3 + 16 >> 2] = $7; //@line 19949
  HEAP32[$AsyncCtx3 + 20 >> 2] = $9; //@line 19951
  HEAP32[$AsyncCtx3 + 24 >> 2] = $37; //@line 19953
  HEAP32[$AsyncCtx3 + 28 >> 2] = $13; //@line 19955
  HEAP32[$AsyncCtx3 + 32 >> 2] = $46; //@line 19957
  HEAP32[$AsyncCtx3 + 36 >> 2] = $6; //@line 19959
  HEAP32[$AsyncCtx3 + 40 >> 2] = $8; //@line 19961
  HEAP32[$AsyncCtx3 + 44 >> 2] = $44; //@line 19963
  HEAP8[$AsyncCtx3 + 48 >> 0] = $201; //@line 19965
  HEAP32[$AsyncCtx3 + 52 >> 2] = $15; //@line 19967
  HEAP32[$AsyncCtx3 + 56 >> 2] = $26; //@line 19969
  HEAP32[$AsyncCtx3 + 60 >> 2] = $35; //@line 19971
  HEAP32[$AsyncCtx3 + 64 >> 2] = $7; //@line 19973
  HEAP32[$AsyncCtx3 + 68 >> 2] = $8; //@line 19975
  HEAP32[$AsyncCtx3 + 72 >> 2] = $22; //@line 19977
  HEAP32[$AsyncCtx3 + 76 >> 2] = $7; //@line 19979
  HEAP32[$AsyncCtx3 + 80 >> 2] = $43; //@line 19981
  HEAP32[$AsyncCtx3 + 84 >> 2] = $21; //@line 19983
  HEAP32[$AsyncCtx3 + 88 >> 2] = $34; //@line 19985
  HEAP32[$AsyncCtx3 + 92 >> 2] = $24; //@line 19987
  HEAP32[$AsyncCtx3 + 96 >> 2] = $41; //@line 19989
  HEAP32[$AsyncCtx3 + 100 >> 2] = $32; //@line 19991
  HEAP32[$AsyncCtx3 + 104 >> 2] = $23; //@line 19993
  HEAP32[$AsyncCtx3 + 108 >> 2] = $9; //@line 19995
  HEAP32[$AsyncCtx3 + 112 >> 2] = $33; //@line 19997
  HEAP32[$AsyncCtx3 + 116 >> 2] = $42; //@line 19999
  HEAP32[$AsyncCtx3 + 120 >> 2] = $8; //@line 20001
  HEAP32[$AsyncCtx3 + 124 >> 2] = $40; //@line 20003
  HEAP32[$AsyncCtx3 + 128 >> 2] = $31; //@line 20005
  HEAP32[$AsyncCtx3 + 132 >> 2] = $10; //@line 20007
  HEAP32[$AsyncCtx3 + 136 >> 2] = $8; //@line 20009
  HEAP32[$AsyncCtx3 + 140 >> 2] = $18; //@line 20011
  HEAP32[$AsyncCtx3 + 144 >> 2] = $8; //@line 20013
  HEAP32[$AsyncCtx3 + 148 >> 2] = $7; //@line 20015
  HEAP32[$AsyncCtx3 + 152 >> 2] = $0; //@line 20017
  HEAP32[$AsyncCtx3 + 156 >> 2] = $20; //@line 20019
  HEAP32[$AsyncCtx3 + 160 >> 2] = $9; //@line 20021
  HEAP32[$AsyncCtx3 + 164 >> 2] = $11; //@line 20023
  HEAP32[$AsyncCtx3 + 168 >> 2] = $30; //@line 20025
  HEAP32[$AsyncCtx3 + 172 >> 2] = $39; //@line 20027
  HEAP32[$AsyncCtx3 + 176 >> 2] = $12; //@line 20029
  HEAP32[$AsyncCtx3 + 180 >> 2] = $19; //@line 20031
  HEAP32[$AsyncCtx3 + 184 >> 2] = $8; //@line 20033
  HEAP32[$AsyncCtx3 + 188 >> 2] = $8; //@line 20035
  HEAP32[$AsyncCtx3 + 192 >> 2] = $8; //@line 20037
  HEAP32[$AsyncCtx3 + 196 >> 2] = $7; //@line 20039
  HEAP32[$AsyncCtx3 + 200 >> 2] = $29; //@line 20041
  HEAP32[$AsyncCtx3 + 204 >> 2] = $16; //@line 20043
  HEAP32[$AsyncCtx3 + 208 >> 2] = $7; //@line 20045
  HEAP8[$AsyncCtx3 + 212 >> 0] = $4; //@line 20047
  HEAP8[$AsyncCtx3 + 213 >> 0] = $3; //@line 20049
  HEAP32[$AsyncCtx3 + 216 >> 2] = $27; //@line 20051
  HEAP32[$AsyncCtx3 + 220 >> 2] = $9; //@line 20053
  HEAP8[$AsyncCtx3 + 224 >> 0] = $2; //@line 20055
  HEAP32[$AsyncCtx3 + 228 >> 2] = $8; //@line 20057
  HEAP32[$AsyncCtx3 + 232 >> 2] = $1; //@line 20059
  HEAP32[$AsyncCtx3 + 236 >> 2] = $8; //@line 20061
  HEAP32[$AsyncCtx3 + 240 >> 2] = $0; //@line 20063
  HEAP32[$AsyncCtx3 + 244 >> 2] = $38; //@line 20065
  HEAP32[$AsyncCtx3 + 248 >> 2] = $8; //@line 20067
  HEAP32[$AsyncCtx3 + 252 >> 2] = $17; //@line 20069
  HEAP32[$AsyncCtx3 + 256 >> 2] = $47; //@line 20071
  HEAP32[$AsyncCtx3 + 260 >> 2] = $8; //@line 20073
  HEAP32[$AsyncCtx3 + 264 >> 2] = $28; //@line 20075
  sp = STACKTOP; //@line 20076
  STACKTOP = sp; //@line 20077
  return 0; //@line 20077
 } else if ((label | 0) == 27) {
  HEAP32[$AsyncCtx7 >> 2] = 506; //@line 20080
  HEAP32[$AsyncCtx7 + 4 >> 2] = $25; //@line 20082
  HEAP32[$AsyncCtx7 + 8 >> 2] = $36; //@line 20084
  HEAP32[$AsyncCtx7 + 12 >> 2] = $45; //@line 20086
  HEAP32[$AsyncCtx7 + 16 >> 2] = $7; //@line 20088
  HEAP32[$AsyncCtx7 + 20 >> 2] = $9; //@line 20090
  HEAP32[$AsyncCtx7 + 24 >> 2] = $37; //@line 20092
  HEAP32[$AsyncCtx7 + 28 >> 2] = $13; //@line 20094
  HEAP32[$AsyncCtx7 + 32 >> 2] = $46; //@line 20096
  HEAP32[$AsyncCtx7 + 36 >> 2] = $6; //@line 20098
  HEAP32[$AsyncCtx7 + 40 >> 2] = $8; //@line 20100
  HEAP32[$AsyncCtx7 + 44 >> 2] = $44; //@line 20102
  HEAP32[$AsyncCtx7 + 48 >> 2] = $15; //@line 20104
  HEAP32[$AsyncCtx7 + 52 >> 2] = $26; //@line 20106
  HEAP32[$AsyncCtx7 + 56 >> 2] = $35; //@line 20108
  HEAP32[$AsyncCtx7 + 60 >> 2] = $7; //@line 20110
  HEAP32[$AsyncCtx7 + 64 >> 2] = $8; //@line 20112
  HEAP32[$AsyncCtx7 + 68 >> 2] = $22; //@line 20114
  HEAP32[$AsyncCtx7 + 72 >> 2] = $7; //@line 20116
  HEAP32[$AsyncCtx7 + 76 >> 2] = $43; //@line 20118
  HEAP32[$AsyncCtx7 + 80 >> 2] = $21; //@line 20120
  HEAP32[$AsyncCtx7 + 84 >> 2] = $34; //@line 20122
  HEAP8[$AsyncCtx7 + 88 >> 0] = $336; //@line 20124
  HEAP32[$AsyncCtx7 + 92 >> 2] = $24; //@line 20126
  HEAP32[$AsyncCtx7 + 96 >> 2] = $41; //@line 20128
  HEAP32[$AsyncCtx7 + 100 >> 2] = $32; //@line 20130
  HEAP32[$AsyncCtx7 + 104 >> 2] = $23; //@line 20132
  HEAP32[$AsyncCtx7 + 108 >> 2] = $9; //@line 20134
  HEAP32[$AsyncCtx7 + 112 >> 2] = $33; //@line 20136
  HEAP32[$AsyncCtx7 + 116 >> 2] = $42; //@line 20138
  HEAP32[$AsyncCtx7 + 120 >> 2] = $8; //@line 20140
  HEAP32[$AsyncCtx7 + 124 >> 2] = $40; //@line 20142
  HEAP32[$AsyncCtx7 + 128 >> 2] = $31; //@line 20144
  HEAP32[$AsyncCtx7 + 132 >> 2] = $10; //@line 20146
  HEAP32[$AsyncCtx7 + 136 >> 2] = $8; //@line 20148
  HEAP32[$AsyncCtx7 + 140 >> 2] = $18; //@line 20150
  HEAP32[$AsyncCtx7 + 144 >> 2] = $8; //@line 20152
  HEAP32[$AsyncCtx7 + 148 >> 2] = $7; //@line 20154
  HEAP32[$AsyncCtx7 + 152 >> 2] = $0; //@line 20156
  HEAP32[$AsyncCtx7 + 156 >> 2] = $20; //@line 20158
  HEAP32[$AsyncCtx7 + 160 >> 2] = $9; //@line 20160
  HEAP32[$AsyncCtx7 + 164 >> 2] = $11; //@line 20162
  HEAP32[$AsyncCtx7 + 168 >> 2] = $30; //@line 20164
  HEAP32[$AsyncCtx7 + 172 >> 2] = $39; //@line 20166
  HEAP32[$AsyncCtx7 + 176 >> 2] = $12; //@line 20168
  HEAP32[$AsyncCtx7 + 180 >> 2] = $19; //@line 20170
  HEAP32[$AsyncCtx7 + 184 >> 2] = $8; //@line 20172
  HEAP32[$AsyncCtx7 + 188 >> 2] = $8; //@line 20174
  HEAP32[$AsyncCtx7 + 192 >> 2] = $8; //@line 20176
  HEAP32[$AsyncCtx7 + 196 >> 2] = $7; //@line 20178
  HEAP32[$AsyncCtx7 + 200 >> 2] = $29; //@line 20180
  HEAP32[$AsyncCtx7 + 204 >> 2] = $16; //@line 20182
  HEAP32[$AsyncCtx7 + 208 >> 2] = $7; //@line 20184
  HEAP8[$AsyncCtx7 + 212 >> 0] = $4; //@line 20186
  HEAP8[$AsyncCtx7 + 213 >> 0] = $3; //@line 20188
  HEAP32[$AsyncCtx7 + 216 >> 2] = $27; //@line 20190
  HEAP32[$AsyncCtx7 + 220 >> 2] = $9; //@line 20192
  HEAP8[$AsyncCtx7 + 224 >> 0] = $2; //@line 20194
  HEAP32[$AsyncCtx7 + 228 >> 2] = $8; //@line 20196
  HEAP32[$AsyncCtx7 + 232 >> 2] = $1; //@line 20198
  HEAP32[$AsyncCtx7 + 236 >> 2] = $8; //@line 20200
  HEAP32[$AsyncCtx7 + 240 >> 2] = $0; //@line 20202
  HEAP32[$AsyncCtx7 + 244 >> 2] = $38; //@line 20204
  HEAP32[$AsyncCtx7 + 248 >> 2] = $8; //@line 20206
  HEAP32[$AsyncCtx7 + 252 >> 2] = $17; //@line 20208
  HEAP32[$AsyncCtx7 + 256 >> 2] = $47; //@line 20210
  HEAP32[$AsyncCtx7 + 260 >> 2] = $8; //@line 20212
  HEAP32[$AsyncCtx7 + 264 >> 2] = $28; //@line 20214
  sp = STACKTOP; //@line 20215
  STACKTOP = sp; //@line 20216
  return 0; //@line 20216
 } else if ((label | 0) == 36) {
  HEAP32[$AsyncCtx11 >> 2] = 507; //@line 20219
  HEAP32[$AsyncCtx11 + 4 >> 2] = $25; //@line 20221
  HEAP32[$AsyncCtx11 + 8 >> 2] = $36; //@line 20223
  HEAP32[$AsyncCtx11 + 12 >> 2] = $45; //@line 20225
  HEAP32[$AsyncCtx11 + 16 >> 2] = $7; //@line 20227
  HEAP32[$AsyncCtx11 + 20 >> 2] = $9; //@line 20229
  HEAP32[$AsyncCtx11 + 24 >> 2] = $37; //@line 20231
  HEAP32[$AsyncCtx11 + 28 >> 2] = $13; //@line 20233
  HEAP32[$AsyncCtx11 + 32 >> 2] = $46; //@line 20235
  HEAP32[$AsyncCtx11 + 36 >> 2] = $6; //@line 20237
  HEAP32[$AsyncCtx11 + 40 >> 2] = $8; //@line 20239
  HEAP32[$AsyncCtx11 + 44 >> 2] = $44; //@line 20241
  HEAP32[$AsyncCtx11 + 48 >> 2] = $15; //@line 20243
  HEAP8[$AsyncCtx11 + 52 >> 0] = $440; //@line 20245
  HEAP32[$AsyncCtx11 + 56 >> 2] = $26; //@line 20247
  HEAP32[$AsyncCtx11 + 60 >> 2] = $35; //@line 20249
  HEAP32[$AsyncCtx11 + 64 >> 2] = $7; //@line 20251
  HEAP32[$AsyncCtx11 + 68 >> 2] = $8; //@line 20253
  HEAP32[$AsyncCtx11 + 72 >> 2] = $22; //@line 20255
  HEAP32[$AsyncCtx11 + 76 >> 2] = $7; //@line 20257
  HEAP32[$AsyncCtx11 + 80 >> 2] = $43; //@line 20259
  HEAP32[$AsyncCtx11 + 84 >> 2] = $21; //@line 20261
  HEAP32[$AsyncCtx11 + 88 >> 2] = $34; //@line 20263
  HEAP32[$AsyncCtx11 + 92 >> 2] = $24; //@line 20265
  HEAP32[$AsyncCtx11 + 96 >> 2] = $41; //@line 20267
  HEAP32[$AsyncCtx11 + 100 >> 2] = $32; //@line 20269
  HEAP32[$AsyncCtx11 + 104 >> 2] = $23; //@line 20271
  HEAP32[$AsyncCtx11 + 108 >> 2] = $9; //@line 20273
  HEAP32[$AsyncCtx11 + 112 >> 2] = $33; //@line 20275
  HEAP32[$AsyncCtx11 + 116 >> 2] = $42; //@line 20277
  HEAP32[$AsyncCtx11 + 120 >> 2] = $8; //@line 20279
  HEAP32[$AsyncCtx11 + 124 >> 2] = $40; //@line 20281
  HEAP32[$AsyncCtx11 + 128 >> 2] = $31; //@line 20283
  HEAP32[$AsyncCtx11 + 132 >> 2] = $10; //@line 20285
  HEAP32[$AsyncCtx11 + 136 >> 2] = $8; //@line 20287
  HEAP32[$AsyncCtx11 + 140 >> 2] = $18; //@line 20289
  HEAP32[$AsyncCtx11 + 144 >> 2] = $8; //@line 20291
  HEAP32[$AsyncCtx11 + 148 >> 2] = $7; //@line 20293
  HEAP32[$AsyncCtx11 + 152 >> 2] = $0; //@line 20295
  HEAP32[$AsyncCtx11 + 156 >> 2] = $$096115; //@line 20297
  HEAP32[$AsyncCtx11 + 160 >> 2] = $20; //@line 20299
  HEAP32[$AsyncCtx11 + 164 >> 2] = $9; //@line 20301
  HEAP32[$AsyncCtx11 + 168 >> 2] = $11; //@line 20303
  HEAP32[$AsyncCtx11 + 172 >> 2] = $30; //@line 20305
  HEAP32[$AsyncCtx11 + 176 >> 2] = $39; //@line 20307
  HEAP32[$AsyncCtx11 + 180 >> 2] = $12; //@line 20309
  HEAP32[$AsyncCtx11 + 184 >> 2] = $19; //@line 20311
  HEAP32[$AsyncCtx11 + 188 >> 2] = $8; //@line 20313
  HEAP32[$AsyncCtx11 + 192 >> 2] = $8; //@line 20315
  HEAP32[$AsyncCtx11 + 196 >> 2] = $8; //@line 20317
  HEAP32[$AsyncCtx11 + 200 >> 2] = $7; //@line 20319
  HEAP32[$AsyncCtx11 + 204 >> 2] = $29; //@line 20321
  HEAP32[$AsyncCtx11 + 208 >> 2] = $16; //@line 20323
  HEAP32[$AsyncCtx11 + 212 >> 2] = $7; //@line 20325
  HEAP8[$AsyncCtx11 + 216 >> 0] = $4; //@line 20327
  HEAP8[$AsyncCtx11 + 217 >> 0] = $3; //@line 20329
  HEAP32[$AsyncCtx11 + 220 >> 2] = $27; //@line 20331
  HEAP32[$AsyncCtx11 + 224 >> 2] = $9; //@line 20333
  HEAP8[$AsyncCtx11 + 228 >> 0] = $2; //@line 20335
  HEAP32[$AsyncCtx11 + 232 >> 2] = $8; //@line 20337
  HEAP32[$AsyncCtx11 + 236 >> 2] = $1; //@line 20339
  HEAP32[$AsyncCtx11 + 240 >> 2] = $8; //@line 20341
  HEAP32[$AsyncCtx11 + 244 >> 2] = $0; //@line 20343
  HEAP32[$AsyncCtx11 + 248 >> 2] = $38; //@line 20345
  HEAP32[$AsyncCtx11 + 252 >> 2] = $8; //@line 20347
  HEAP32[$AsyncCtx11 + 256 >> 2] = $17; //@line 20349
  HEAP32[$AsyncCtx11 + 260 >> 2] = $47; //@line 20351
  HEAP32[$AsyncCtx11 + 264 >> 2] = $8; //@line 20353
  HEAP32[$AsyncCtx11 + 268 >> 2] = $28; //@line 20355
  sp = STACKTOP; //@line 20356
  STACKTOP = sp; //@line 20357
  return 0; //@line 20357
 } else if ((label | 0) == 42) {
  HEAP32[$AsyncCtx15 >> 2] = 508; //@line 20360
  HEAP32[$AsyncCtx15 + 4 >> 2] = $25; //@line 20362
  HEAP32[$AsyncCtx15 + 8 >> 2] = $36; //@line 20364
  HEAP32[$AsyncCtx15 + 12 >> 2] = $45; //@line 20366
  HEAP32[$AsyncCtx15 + 16 >> 2] = $7; //@line 20368
  HEAP32[$AsyncCtx15 + 20 >> 2] = $9; //@line 20370
  HEAP32[$AsyncCtx15 + 24 >> 2] = $37; //@line 20372
  HEAP32[$AsyncCtx15 + 28 >> 2] = $13; //@line 20374
  HEAP32[$AsyncCtx15 + 32 >> 2] = $46; //@line 20376
  HEAP32[$AsyncCtx15 + 36 >> 2] = $6; //@line 20378
  HEAP32[$AsyncCtx15 + 40 >> 2] = $8; //@line 20380
  HEAP32[$AsyncCtx15 + 44 >> 2] = $44; //@line 20382
  HEAP32[$AsyncCtx15 + 48 >> 2] = $15; //@line 20384
  HEAP32[$AsyncCtx15 + 52 >> 2] = $26; //@line 20386
  HEAP32[$AsyncCtx15 + 56 >> 2] = $35; //@line 20388
  HEAP32[$AsyncCtx15 + 60 >> 2] = $7; //@line 20390
  HEAP32[$AsyncCtx15 + 64 >> 2] = $8; //@line 20392
  HEAP32[$AsyncCtx15 + 68 >> 2] = $22; //@line 20394
  HEAP32[$AsyncCtx15 + 72 >> 2] = $7; //@line 20396
  HEAP32[$AsyncCtx15 + 76 >> 2] = $43; //@line 20398
  HEAP32[$AsyncCtx15 + 80 >> 2] = $21; //@line 20400
  HEAP32[$AsyncCtx15 + 84 >> 2] = $34; //@line 20402
  HEAP32[$AsyncCtx15 + 88 >> 2] = $24; //@line 20404
  HEAP32[$AsyncCtx15 + 92 >> 2] = $41; //@line 20406
  HEAP32[$AsyncCtx15 + 96 >> 2] = $32; //@line 20408
  HEAP32[$AsyncCtx15 + 100 >> 2] = $23; //@line 20410
  HEAP32[$AsyncCtx15 + 104 >> 2] = $9; //@line 20412
  HEAP32[$AsyncCtx15 + 108 >> 2] = $33; //@line 20414
  HEAP32[$AsyncCtx15 + 112 >> 2] = $42; //@line 20416
  HEAP32[$AsyncCtx15 + 116 >> 2] = $8; //@line 20418
  HEAP32[$AsyncCtx15 + 120 >> 2] = $40; //@line 20420
  HEAP32[$AsyncCtx15 + 124 >> 2] = $31; //@line 20422
  HEAP8[$AsyncCtx15 + 128 >> 0] = $553; //@line 20424
  HEAP32[$AsyncCtx15 + 132 >> 2] = $10; //@line 20426
  HEAP32[$AsyncCtx15 + 136 >> 2] = $8; //@line 20428
  HEAP32[$AsyncCtx15 + 140 >> 2] = $18; //@line 20430
  HEAP32[$AsyncCtx15 + 144 >> 2] = $8; //@line 20432
  HEAP32[$AsyncCtx15 + 148 >> 2] = $7; //@line 20434
  HEAP32[$AsyncCtx15 + 152 >> 2] = $0; //@line 20436
  HEAP32[$AsyncCtx15 + 156 >> 2] = $20; //@line 20438
  HEAP32[$AsyncCtx15 + 160 >> 2] = $9; //@line 20440
  HEAP32[$AsyncCtx15 + 164 >> 2] = $11; //@line 20442
  HEAP32[$AsyncCtx15 + 168 >> 2] = $30; //@line 20444
  HEAP32[$AsyncCtx15 + 172 >> 2] = $39; //@line 20446
  HEAP32[$AsyncCtx15 + 176 >> 2] = $12; //@line 20448
  HEAP32[$AsyncCtx15 + 180 >> 2] = $19; //@line 20450
  HEAP32[$AsyncCtx15 + 184 >> 2] = $8; //@line 20452
  HEAP32[$AsyncCtx15 + 188 >> 2] = $8; //@line 20454
  HEAP32[$AsyncCtx15 + 192 >> 2] = $8; //@line 20456
  HEAP32[$AsyncCtx15 + 196 >> 2] = $7; //@line 20458
  HEAP32[$AsyncCtx15 + 200 >> 2] = $29; //@line 20460
  HEAP32[$AsyncCtx15 + 204 >> 2] = $16; //@line 20462
  HEAP32[$AsyncCtx15 + 208 >> 2] = $7; //@line 20464
  HEAP8[$AsyncCtx15 + 212 >> 0] = $4; //@line 20466
  HEAP8[$AsyncCtx15 + 213 >> 0] = $3; //@line 20468
  HEAP32[$AsyncCtx15 + 216 >> 2] = $27; //@line 20470
  HEAP32[$AsyncCtx15 + 220 >> 2] = $9; //@line 20472
  HEAP8[$AsyncCtx15 + 224 >> 0] = $2; //@line 20474
  HEAP32[$AsyncCtx15 + 228 >> 2] = $8; //@line 20476
  HEAP32[$AsyncCtx15 + 232 >> 2] = $1; //@line 20478
  HEAP32[$AsyncCtx15 + 236 >> 2] = $8; //@line 20480
  HEAP32[$AsyncCtx15 + 240 >> 2] = $0; //@line 20482
  HEAP32[$AsyncCtx15 + 244 >> 2] = $38; //@line 20484
  HEAP32[$AsyncCtx15 + 248 >> 2] = $8; //@line 20486
  HEAP32[$AsyncCtx15 + 252 >> 2] = $17; //@line 20488
  HEAP32[$AsyncCtx15 + 256 >> 2] = $47; //@line 20490
  HEAP32[$AsyncCtx15 + 260 >> 2] = $8; //@line 20492
  HEAP32[$AsyncCtx15 + 264 >> 2] = $28; //@line 20494
  sp = STACKTOP; //@line 20495
  STACKTOP = sp; //@line 20496
  return 0; //@line 20496
 } else if ((label | 0) == 47) {
  STACKTOP = sp; //@line 20499
  return $$096$lcssa | 0; //@line 20499
 }
 return 0; //@line 20501
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_189($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $10 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $117 = 0, $119 = 0, $12 = 0, $120 = 0, $125 = 0, $127 = 0, $128 = 0, $129 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $153 = 0, $154 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $194 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $208 = 0, $209 = 0, $211 = 0, $212 = 0, $213 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $225 = 0, $229 = 0, $230 = 0, $232 = 0, $233 = 0, $234 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $42 = 0, $56 = 0, $6 = 0, $60 = 0, $65 = 0, $71 = 0, $72 = 0, $77 = 0, $8 = 0, $81 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $98 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx18 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 33401
 STACKTOP = STACKTOP + 16 | 0; //@line 33402
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 33402
 $$byval_copy = sp; //@line 33403
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 33405
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33407
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33409
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33411
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 33413
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 33415
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 33417
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 33419
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 33421
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 33423
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 33425
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 33427
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx18 = _emscripten_realloc_async_context(52) | 0; //@line 33432
  _mbed_assert_internal(13612, 13621, 192); //@line 33433
  if (___async) {
   HEAP32[$ReallocAsyncCtx18 >> 2] = 393; //@line 33436
   $27 = $ReallocAsyncCtx18 + 4 | 0; //@line 33437
   HEAP32[$27 >> 2] = $2; //@line 33438
   $28 = $ReallocAsyncCtx18 + 8 | 0; //@line 33439
   HEAP32[$28 >> 2] = $4; //@line 33440
   $29 = $ReallocAsyncCtx18 + 12 | 0; //@line 33441
   HEAP32[$29 >> 2] = $6; //@line 33442
   $30 = $ReallocAsyncCtx18 + 16 | 0; //@line 33443
   HEAP32[$30 >> 2] = $8; //@line 33444
   $31 = $ReallocAsyncCtx18 + 20 | 0; //@line 33445
   HEAP32[$31 >> 2] = $10; //@line 33446
   $32 = $ReallocAsyncCtx18 + 24 | 0; //@line 33447
   HEAP32[$32 >> 2] = $12; //@line 33448
   $33 = $ReallocAsyncCtx18 + 28 | 0; //@line 33449
   HEAP32[$33 >> 2] = $14; //@line 33450
   $34 = $ReallocAsyncCtx18 + 32 | 0; //@line 33451
   HEAP32[$34 >> 2] = $16; //@line 33452
   $35 = $ReallocAsyncCtx18 + 36 | 0; //@line 33453
   HEAP32[$35 >> 2] = $18; //@line 33454
   $36 = $ReallocAsyncCtx18 + 40 | 0; //@line 33455
   HEAP32[$36 >> 2] = $20; //@line 33456
   $37 = $ReallocAsyncCtx18 + 44 | 0; //@line 33457
   HEAP32[$37 >> 2] = $22; //@line 33458
   $38 = $ReallocAsyncCtx18 + 48 | 0; //@line 33459
   HEAP32[$38 >> 2] = $24; //@line 33460
   sp = STACKTOP; //@line 33461
   STACKTOP = sp; //@line 33462
   return;
  }
  ___async_unwind = 0; //@line 33464
  HEAP32[$ReallocAsyncCtx18 >> 2] = 393; //@line 33465
  $27 = $ReallocAsyncCtx18 + 4 | 0; //@line 33466
  HEAP32[$27 >> 2] = $2; //@line 33467
  $28 = $ReallocAsyncCtx18 + 8 | 0; //@line 33468
  HEAP32[$28 >> 2] = $4; //@line 33469
  $29 = $ReallocAsyncCtx18 + 12 | 0; //@line 33470
  HEAP32[$29 >> 2] = $6; //@line 33471
  $30 = $ReallocAsyncCtx18 + 16 | 0; //@line 33472
  HEAP32[$30 >> 2] = $8; //@line 33473
  $31 = $ReallocAsyncCtx18 + 20 | 0; //@line 33474
  HEAP32[$31 >> 2] = $10; //@line 33475
  $32 = $ReallocAsyncCtx18 + 24 | 0; //@line 33476
  HEAP32[$32 >> 2] = $12; //@line 33477
  $33 = $ReallocAsyncCtx18 + 28 | 0; //@line 33478
  HEAP32[$33 >> 2] = $14; //@line 33479
  $34 = $ReallocAsyncCtx18 + 32 | 0; //@line 33480
  HEAP32[$34 >> 2] = $16; //@line 33481
  $35 = $ReallocAsyncCtx18 + 36 | 0; //@line 33482
  HEAP32[$35 >> 2] = $18; //@line 33483
  $36 = $ReallocAsyncCtx18 + 40 | 0; //@line 33484
  HEAP32[$36 >> 2] = $20; //@line 33485
  $37 = $ReallocAsyncCtx18 + 44 | 0; //@line 33486
  HEAP32[$37 >> 2] = $22; //@line 33487
  $38 = $ReallocAsyncCtx18 + 48 | 0; //@line 33488
  HEAP32[$38 >> 2] = $24; //@line 33489
  sp = STACKTOP; //@line 33490
  STACKTOP = sp; //@line 33491
  return;
 }
 do {
  if (HEAP8[$2 >> 0] & 2) {
   $42 = $4 + 288 | 0; //@line 33498
   if (!(HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($42) | 0) + 10 >> 0] | 0)) {
    if ((HEAPU8[$4 + 895 >> 0] | 0) <= (HEAPU8[$4 + 894 >> 0] | 0)) {
     break;
    }
   }
   HEAP8[$4 + 377 >> 0] = 0; //@line 33514
   HEAP8[$24 >> 0] = 0; //@line 33515
   if (!(HEAP8[$4 + 370 >> 0] | 0)) {
    $56 = $4 + 956 | 0; //@line 33520
    HEAP32[$56 >> 2] = (HEAP32[$56 >> 2] | 0) + 1; //@line 33523
   }
   $60 = HEAP8[$4 + 895 >> 0] | 0; //@line 33526
   HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($42) | 0) + 11 >> 0] = $60; //@line 33529
   HEAP32[$18 >> 2] = HEAP32[$18 >> 2] & -2; //@line 33532
  }
 } while (0);
 $65 = $4 + 377 | 0; //@line 33535
 if (HEAP8[$65 >> 0] | 0) {
  if (!(HEAP32[$18 >> 2] & 16)) {
   HEAP8[$65 >> 0] = 0; //@line 33543
   $71 = $4 + 895 | 0; //@line 33544
   $72 = HEAP8[$71 >> 0] | 0; //@line 33545
   if (!(($72 & 255) < 9 ? ($72 & 255) < (HEAPU8[$4 + 894 >> 0] | 0) : 0)) {
    $98 = HEAP32[$4 >> 2] | 0; //@line 33552
    $101 = HEAP32[(HEAP32[$98 >> 2] | 0) + 16 >> 2] | 0; //@line 33555
    $ReallocAsyncCtx = _emscripten_realloc_async_context(52) | 0; //@line 33556
    FUNCTION_TABLE_vi[$101 & 1023]($98); //@line 33557
    if (___async) {
     HEAP32[$ReallocAsyncCtx >> 2] = 397; //@line 33560
     $102 = $ReallocAsyncCtx + 4 | 0; //@line 33561
     HEAP32[$102 >> 2] = $2; //@line 33562
     $103 = $ReallocAsyncCtx + 8 | 0; //@line 33563
     HEAP32[$103 >> 2] = $4; //@line 33564
     $104 = $ReallocAsyncCtx + 12 | 0; //@line 33565
     HEAP32[$104 >> 2] = $18; //@line 33566
     $105 = $ReallocAsyncCtx + 16 | 0; //@line 33567
     HEAP32[$105 >> 2] = $24; //@line 33568
     $106 = $ReallocAsyncCtx + 20 | 0; //@line 33569
     HEAP32[$106 >> 2] = $71; //@line 33570
     $107 = $ReallocAsyncCtx + 24 | 0; //@line 33571
     HEAP32[$107 >> 2] = $6; //@line 33572
     $108 = $ReallocAsyncCtx + 28 | 0; //@line 33573
     HEAP32[$108 >> 2] = $8; //@line 33574
     $109 = $ReallocAsyncCtx + 32 | 0; //@line 33575
     HEAP32[$109 >> 2] = $10; //@line 33576
     $110 = $ReallocAsyncCtx + 36 | 0; //@line 33577
     HEAP32[$110 >> 2] = $12; //@line 33578
     $111 = $ReallocAsyncCtx + 40 | 0; //@line 33579
     HEAP32[$111 >> 2] = $14; //@line 33580
     $112 = $ReallocAsyncCtx + 44 | 0; //@line 33581
     HEAP32[$112 >> 2] = $20; //@line 33582
     $113 = $ReallocAsyncCtx + 48 | 0; //@line 33583
     HEAP32[$113 >> 2] = $22; //@line 33584
     sp = STACKTOP; //@line 33585
     STACKTOP = sp; //@line 33586
     return;
    }
    ___async_unwind = 0; //@line 33588
    HEAP32[$ReallocAsyncCtx >> 2] = 397; //@line 33589
    $102 = $ReallocAsyncCtx + 4 | 0; //@line 33590
    HEAP32[$102 >> 2] = $2; //@line 33591
    $103 = $ReallocAsyncCtx + 8 | 0; //@line 33592
    HEAP32[$103 >> 2] = $4; //@line 33593
    $104 = $ReallocAsyncCtx + 12 | 0; //@line 33594
    HEAP32[$104 >> 2] = $18; //@line 33595
    $105 = $ReallocAsyncCtx + 16 | 0; //@line 33596
    HEAP32[$105 >> 2] = $24; //@line 33597
    $106 = $ReallocAsyncCtx + 20 | 0; //@line 33598
    HEAP32[$106 >> 2] = $71; //@line 33599
    $107 = $ReallocAsyncCtx + 24 | 0; //@line 33600
    HEAP32[$107 >> 2] = $6; //@line 33601
    $108 = $ReallocAsyncCtx + 28 | 0; //@line 33602
    HEAP32[$108 >> 2] = $8; //@line 33603
    $109 = $ReallocAsyncCtx + 32 | 0; //@line 33604
    HEAP32[$109 >> 2] = $10; //@line 33605
    $110 = $ReallocAsyncCtx + 36 | 0; //@line 33606
    HEAP32[$110 >> 2] = $12; //@line 33607
    $111 = $ReallocAsyncCtx + 40 | 0; //@line 33608
    HEAP32[$111 >> 2] = $14; //@line 33609
    $112 = $ReallocAsyncCtx + 44 | 0; //@line 33610
    HEAP32[$112 >> 2] = $20; //@line 33611
    $113 = $ReallocAsyncCtx + 48 | 0; //@line 33612
    HEAP32[$113 >> 2] = $22; //@line 33613
    sp = STACKTOP; //@line 33614
    STACKTOP = sp; //@line 33615
    return;
   }
   $77 = $72 + 1 << 24 >> 24; //@line 33617
   HEAP8[$71 >> 0] = $77; //@line 33618
   if ($77 & 1) {
    $81 = $4 + 1097 | 0; //@line 33623
    HEAP8[$81 >> 0] = __ZN7LoRaPHY26get_next_lower_tx_datarateEa(HEAP32[$4 >> 2] | 0, HEAP8[$81 >> 0] | 0) | 0; //@line 33626
   }
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(52) | 0; //@line 33628
   $84 = __ZN7LoRaMac11schedule_txEv($4) | 0; //@line 33629
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 396; //@line 33632
    $85 = $ReallocAsyncCtx7 + 4 | 0; //@line 33633
    HEAP32[$85 >> 2] = $2; //@line 33634
    $86 = $ReallocAsyncCtx7 + 8 | 0; //@line 33635
    HEAP32[$86 >> 2] = $4; //@line 33636
    $87 = $ReallocAsyncCtx7 + 12 | 0; //@line 33637
    HEAP32[$87 >> 2] = $18; //@line 33638
    $88 = $ReallocAsyncCtx7 + 16 | 0; //@line 33639
    HEAP32[$88 >> 2] = $24; //@line 33640
    $89 = $ReallocAsyncCtx7 + 20 | 0; //@line 33641
    HEAP32[$89 >> 2] = $71; //@line 33642
    $90 = $ReallocAsyncCtx7 + 24 | 0; //@line 33643
    HEAP32[$90 >> 2] = $6; //@line 33644
    $91 = $ReallocAsyncCtx7 + 28 | 0; //@line 33645
    HEAP32[$91 >> 2] = $8; //@line 33646
    $92 = $ReallocAsyncCtx7 + 32 | 0; //@line 33647
    HEAP32[$92 >> 2] = $10; //@line 33648
    $93 = $ReallocAsyncCtx7 + 36 | 0; //@line 33649
    HEAP32[$93 >> 2] = $12; //@line 33650
    $94 = $ReallocAsyncCtx7 + 40 | 0; //@line 33651
    HEAP32[$94 >> 2] = $14; //@line 33652
    $95 = $ReallocAsyncCtx7 + 44 | 0; //@line 33653
    HEAP32[$95 >> 2] = $20; //@line 33654
    $96 = $ReallocAsyncCtx7 + 48 | 0; //@line 33655
    HEAP32[$96 >> 2] = $22; //@line 33656
    sp = STACKTOP; //@line 33657
    STACKTOP = sp; //@line 33658
    return;
   }
   HEAP32[___async_retval >> 2] = $84; //@line 33661
   ___async_unwind = 0; //@line 33662
   HEAP32[$ReallocAsyncCtx7 >> 2] = 396; //@line 33663
   $85 = $ReallocAsyncCtx7 + 4 | 0; //@line 33664
   HEAP32[$85 >> 2] = $2; //@line 33665
   $86 = $ReallocAsyncCtx7 + 8 | 0; //@line 33666
   HEAP32[$86 >> 2] = $4; //@line 33667
   $87 = $ReallocAsyncCtx7 + 12 | 0; //@line 33668
   HEAP32[$87 >> 2] = $18; //@line 33669
   $88 = $ReallocAsyncCtx7 + 16 | 0; //@line 33670
   HEAP32[$88 >> 2] = $24; //@line 33671
   $89 = $ReallocAsyncCtx7 + 20 | 0; //@line 33672
   HEAP32[$89 >> 2] = $71; //@line 33673
   $90 = $ReallocAsyncCtx7 + 24 | 0; //@line 33674
   HEAP32[$90 >> 2] = $6; //@line 33675
   $91 = $ReallocAsyncCtx7 + 28 | 0; //@line 33676
   HEAP32[$91 >> 2] = $8; //@line 33677
   $92 = $ReallocAsyncCtx7 + 32 | 0; //@line 33678
   HEAP32[$92 >> 2] = $10; //@line 33679
   $93 = $ReallocAsyncCtx7 + 36 | 0; //@line 33680
   HEAP32[$93 >> 2] = $12; //@line 33681
   $94 = $ReallocAsyncCtx7 + 40 | 0; //@line 33682
   HEAP32[$94 >> 2] = $14; //@line 33683
   $95 = $ReallocAsyncCtx7 + 44 | 0; //@line 33684
   HEAP32[$95 >> 2] = $20; //@line 33685
   $96 = $ReallocAsyncCtx7 + 48 | 0; //@line 33686
   HEAP32[$96 >> 2] = $22; //@line 33687
   sp = STACKTOP; //@line 33688
   STACKTOP = sp; //@line 33689
   return;
  }
 }
 $114 = HEAP32[$18 >> 2] | 0; //@line 33692
 $117 = $114 & -3; //@line 33695
 if (!($114 & 2)) {
  $119 = $114; //@line 33697
 } else {
  HEAP32[$18 >> 2] = $117; //@line 33699
  $119 = $117; //@line 33700
 }
 if ($119 | 0) {
  $186 = HEAP32[$20 >> 2] | 0; //@line 33704
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 33705
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($186, $22, 1e3); //@line 33706
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 402; //@line 33709
   $187 = $ReallocAsyncCtx6 + 4 | 0; //@line 33710
   HEAP32[$187 >> 2] = $2; //@line 33711
   $188 = $ReallocAsyncCtx6 + 8 | 0; //@line 33712
   HEAP32[$188 >> 2] = $4; //@line 33713
   $189 = $ReallocAsyncCtx6 + 12 | 0; //@line 33714
   HEAP32[$189 >> 2] = $6; //@line 33715
   $190 = $ReallocAsyncCtx6 + 16 | 0; //@line 33716
   HEAP32[$190 >> 2] = $8; //@line 33717
   $191 = $ReallocAsyncCtx6 + 20 | 0; //@line 33718
   HEAP32[$191 >> 2] = $10; //@line 33719
   sp = STACKTOP; //@line 33720
   STACKTOP = sp; //@line 33721
   return;
  }
  ___async_unwind = 0; //@line 33723
  HEAP32[$ReallocAsyncCtx6 >> 2] = 402; //@line 33724
  $187 = $ReallocAsyncCtx6 + 4 | 0; //@line 33725
  HEAP32[$187 >> 2] = $2; //@line 33726
  $188 = $ReallocAsyncCtx6 + 8 | 0; //@line 33727
  HEAP32[$188 >> 2] = $4; //@line 33728
  $189 = $ReallocAsyncCtx6 + 12 | 0; //@line 33729
  HEAP32[$189 >> 2] = $6; //@line 33730
  $190 = $ReallocAsyncCtx6 + 16 | 0; //@line 33731
  HEAP32[$190 >> 2] = $8; //@line 33732
  $191 = $ReallocAsyncCtx6 + 20 | 0; //@line 33733
  HEAP32[$191 >> 2] = $10; //@line 33734
  sp = STACKTOP; //@line 33735
  STACKTOP = sp; //@line 33736
  return;
 }
 $120 = HEAP8[$2 >> 0] | 0; //@line 33738
 if ($120 & 1) {
  HEAP8[$2 >> 0] = $120 & -2; //@line 33743
  $125 = HEAP32[$4 + 1324 >> 2] | 0; //@line 33745
  $127 = __ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0; //@line 33747
  $128 = $125 + 12 | 0; //@line 33748
  $129 = HEAP32[$128 >> 2] | 0; //@line 33749
  if (!$129) {
   $ReallocAsyncCtx16 = _emscripten_realloc_async_context(44) | 0; //@line 33752
   _mbed_assert_internal(15679, 15684, 1102); //@line 33753
   if (___async) {
    HEAP32[$ReallocAsyncCtx16 >> 2] = 398; //@line 33756
    $131 = $ReallocAsyncCtx16 + 4 | 0; //@line 33757
    HEAP32[$131 >> 2] = $2; //@line 33758
    $132 = $ReallocAsyncCtx16 + 8 | 0; //@line 33759
    HEAP32[$132 >> 2] = $4; //@line 33760
    $133 = $ReallocAsyncCtx16 + 12 | 0; //@line 33761
    HEAP32[$133 >> 2] = $125; //@line 33762
    $134 = $ReallocAsyncCtx16 + 16 | 0; //@line 33763
    HEAP32[$134 >> 2] = $127; //@line 33764
    $135 = $ReallocAsyncCtx16 + 20 | 0; //@line 33765
    HEAP32[$135 >> 2] = $128; //@line 33766
    $136 = $ReallocAsyncCtx16 + 24 | 0; //@line 33767
    HEAP32[$136 >> 2] = $6; //@line 33768
    $137 = $ReallocAsyncCtx16 + 28 | 0; //@line 33769
    HEAP32[$137 >> 2] = $8; //@line 33770
    $138 = $ReallocAsyncCtx16 + 32 | 0; //@line 33771
    HEAP32[$138 >> 2] = $10; //@line 33772
    $139 = $ReallocAsyncCtx16 + 36 | 0; //@line 33773
    HEAP32[$139 >> 2] = $12; //@line 33774
    $140 = $ReallocAsyncCtx16 + 40 | 0; //@line 33775
    HEAP32[$140 >> 2] = $14; //@line 33776
    sp = STACKTOP; //@line 33777
    STACKTOP = sp; //@line 33778
    return;
   }
   ___async_unwind = 0; //@line 33780
   HEAP32[$ReallocAsyncCtx16 >> 2] = 398; //@line 33781
   $131 = $ReallocAsyncCtx16 + 4 | 0; //@line 33782
   HEAP32[$131 >> 2] = $2; //@line 33783
   $132 = $ReallocAsyncCtx16 + 8 | 0; //@line 33784
   HEAP32[$132 >> 2] = $4; //@line 33785
   $133 = $ReallocAsyncCtx16 + 12 | 0; //@line 33786
   HEAP32[$133 >> 2] = $125; //@line 33787
   $134 = $ReallocAsyncCtx16 + 16 | 0; //@line 33788
   HEAP32[$134 >> 2] = $127; //@line 33789
   $135 = $ReallocAsyncCtx16 + 20 | 0; //@line 33790
   HEAP32[$135 >> 2] = $128; //@line 33791
   $136 = $ReallocAsyncCtx16 + 24 | 0; //@line 33792
   HEAP32[$136 >> 2] = $6; //@line 33793
   $137 = $ReallocAsyncCtx16 + 28 | 0; //@line 33794
   HEAP32[$137 >> 2] = $8; //@line 33795
   $138 = $ReallocAsyncCtx16 + 32 | 0; //@line 33796
   HEAP32[$138 >> 2] = $10; //@line 33797
   $139 = $ReallocAsyncCtx16 + 36 | 0; //@line 33798
   HEAP32[$139 >> 2] = $12; //@line 33799
   $140 = $ReallocAsyncCtx16 + 40 | 0; //@line 33800
   HEAP32[$140 >> 2] = $14; //@line 33801
   sp = STACKTOP; //@line 33802
   STACKTOP = sp; //@line 33803
   return;
  } else {
   $141 = HEAP32[$129 >> 2] | 0; //@line 33805
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 33806
   FUNCTION_TABLE_vii[$141 & 31]($125, $127); //@line 33807
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 399; //@line 33810
    $142 = $ReallocAsyncCtx2 + 4 | 0; //@line 33811
    HEAP32[$142 >> 2] = $2; //@line 33812
    $143 = $ReallocAsyncCtx2 + 8 | 0; //@line 33813
    HEAP32[$143 >> 2] = $4; //@line 33814
    $144 = $ReallocAsyncCtx2 + 12 | 0; //@line 33815
    HEAP32[$144 >> 2] = $6; //@line 33816
    $145 = $ReallocAsyncCtx2 + 16 | 0; //@line 33817
    HEAP32[$145 >> 2] = $8; //@line 33818
    $146 = $ReallocAsyncCtx2 + 20 | 0; //@line 33819
    HEAP32[$146 >> 2] = $10; //@line 33820
    $147 = $ReallocAsyncCtx2 + 24 | 0; //@line 33821
    HEAP32[$147 >> 2] = $12; //@line 33822
    $148 = $ReallocAsyncCtx2 + 28 | 0; //@line 33823
    HEAP32[$148 >> 2] = $14; //@line 33824
    sp = STACKTOP; //@line 33825
    STACKTOP = sp; //@line 33826
    return;
   }
   ___async_unwind = 0; //@line 33828
   HEAP32[$ReallocAsyncCtx2 >> 2] = 399; //@line 33829
   $142 = $ReallocAsyncCtx2 + 4 | 0; //@line 33830
   HEAP32[$142 >> 2] = $2; //@line 33831
   $143 = $ReallocAsyncCtx2 + 8 | 0; //@line 33832
   HEAP32[$143 >> 2] = $4; //@line 33833
   $144 = $ReallocAsyncCtx2 + 12 | 0; //@line 33834
   HEAP32[$144 >> 2] = $6; //@line 33835
   $145 = $ReallocAsyncCtx2 + 16 | 0; //@line 33836
   HEAP32[$145 >> 2] = $8; //@line 33837
   $146 = $ReallocAsyncCtx2 + 20 | 0; //@line 33838
   HEAP32[$146 >> 2] = $10; //@line 33839
   $147 = $ReallocAsyncCtx2 + 24 | 0; //@line 33840
   HEAP32[$147 >> 2] = $12; //@line 33841
   $148 = $ReallocAsyncCtx2 + 28 | 0; //@line 33842
   HEAP32[$148 >> 2] = $14; //@line 33843
   sp = STACKTOP; //@line 33844
   STACKTOP = sp; //@line 33845
   return;
  }
 }
 if ($120 & 8) {
  HEAP8[$2 >> 0] = $120 & -9; //@line 33852
  $153 = HEAP32[$4 + 1324 >> 2] | 0; //@line 33854
  $154 = $153 + 32 | 0; //@line 33855
  $156 = __ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0; //@line 33857
  $157 = $153 + 44 | 0; //@line 33858
  $158 = HEAP32[$157 >> 2] | 0; //@line 33859
  if (!$158) {
   $ReallocAsyncCtx15 = _emscripten_realloc_async_context(44) | 0; //@line 33862
   _mbed_assert_internal(15679, 15684, 1102); //@line 33863
   if (___async) {
    HEAP32[$ReallocAsyncCtx15 >> 2] = 400; //@line 33866
    $160 = $ReallocAsyncCtx15 + 4 | 0; //@line 33867
    HEAP32[$160 >> 2] = $2; //@line 33868
    $161 = $ReallocAsyncCtx15 + 8 | 0; //@line 33869
    HEAP32[$161 >> 2] = $4; //@line 33870
    $162 = $ReallocAsyncCtx15 + 12 | 0; //@line 33871
    HEAP32[$162 >> 2] = $154; //@line 33872
    $163 = $ReallocAsyncCtx15 + 16 | 0; //@line 33873
    HEAP32[$163 >> 2] = $156; //@line 33874
    $164 = $ReallocAsyncCtx15 + 20 | 0; //@line 33875
    HEAP32[$164 >> 2] = $6; //@line 33876
    $165 = $ReallocAsyncCtx15 + 24 | 0; //@line 33877
    HEAP32[$165 >> 2] = $8; //@line 33878
    $166 = $ReallocAsyncCtx15 + 28 | 0; //@line 33879
    HEAP32[$166 >> 2] = $10; //@line 33880
    $167 = $ReallocAsyncCtx15 + 32 | 0; //@line 33881
    HEAP32[$167 >> 2] = $12; //@line 33882
    $168 = $ReallocAsyncCtx15 + 36 | 0; //@line 33883
    HEAP32[$168 >> 2] = $14; //@line 33884
    $169 = $ReallocAsyncCtx15 + 40 | 0; //@line 33885
    HEAP32[$169 >> 2] = $157; //@line 33886
    sp = STACKTOP; //@line 33887
    STACKTOP = sp; //@line 33888
    return;
   }
   ___async_unwind = 0; //@line 33890
   HEAP32[$ReallocAsyncCtx15 >> 2] = 400; //@line 33891
   $160 = $ReallocAsyncCtx15 + 4 | 0; //@line 33892
   HEAP32[$160 >> 2] = $2; //@line 33893
   $161 = $ReallocAsyncCtx15 + 8 | 0; //@line 33894
   HEAP32[$161 >> 2] = $4; //@line 33895
   $162 = $ReallocAsyncCtx15 + 12 | 0; //@line 33896
   HEAP32[$162 >> 2] = $154; //@line 33897
   $163 = $ReallocAsyncCtx15 + 16 | 0; //@line 33898
   HEAP32[$163 >> 2] = $156; //@line 33899
   $164 = $ReallocAsyncCtx15 + 20 | 0; //@line 33900
   HEAP32[$164 >> 2] = $6; //@line 33901
   $165 = $ReallocAsyncCtx15 + 24 | 0; //@line 33902
   HEAP32[$165 >> 2] = $8; //@line 33903
   $166 = $ReallocAsyncCtx15 + 28 | 0; //@line 33904
   HEAP32[$166 >> 2] = $10; //@line 33905
   $167 = $ReallocAsyncCtx15 + 32 | 0; //@line 33906
   HEAP32[$167 >> 2] = $12; //@line 33907
   $168 = $ReallocAsyncCtx15 + 36 | 0; //@line 33908
   HEAP32[$168 >> 2] = $14; //@line 33909
   $169 = $ReallocAsyncCtx15 + 40 | 0; //@line 33910
   HEAP32[$169 >> 2] = $157; //@line 33911
   sp = STACKTOP; //@line 33912
   STACKTOP = sp; //@line 33913
   return;
  } else {
   $170 = HEAP32[$158 >> 2] | 0; //@line 33915
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 33916
   FUNCTION_TABLE_vii[$170 & 31]($154, $156); //@line 33917
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 401; //@line 33920
    $171 = $ReallocAsyncCtx3 + 4 | 0; //@line 33921
    HEAP32[$171 >> 2] = $4; //@line 33922
    $172 = $ReallocAsyncCtx3 + 8 | 0; //@line 33923
    HEAP32[$172 >> 2] = $2; //@line 33924
    $173 = $ReallocAsyncCtx3 + 12 | 0; //@line 33925
    HEAP32[$173 >> 2] = $6; //@line 33926
    $174 = $ReallocAsyncCtx3 + 16 | 0; //@line 33927
    HEAP32[$174 >> 2] = $8; //@line 33928
    $175 = $ReallocAsyncCtx3 + 20 | 0; //@line 33929
    HEAP32[$175 >> 2] = $10; //@line 33930
    $176 = $ReallocAsyncCtx3 + 24 | 0; //@line 33931
    HEAP32[$176 >> 2] = $12; //@line 33932
    $177 = $ReallocAsyncCtx3 + 28 | 0; //@line 33933
    HEAP32[$177 >> 2] = $14; //@line 33934
    sp = STACKTOP; //@line 33935
    STACKTOP = sp; //@line 33936
    return;
   }
   ___async_unwind = 0; //@line 33938
   HEAP32[$ReallocAsyncCtx3 >> 2] = 401; //@line 33939
   $171 = $ReallocAsyncCtx3 + 4 | 0; //@line 33940
   HEAP32[$171 >> 2] = $4; //@line 33941
   $172 = $ReallocAsyncCtx3 + 8 | 0; //@line 33942
   HEAP32[$172 >> 2] = $2; //@line 33943
   $173 = $ReallocAsyncCtx3 + 12 | 0; //@line 33944
   HEAP32[$173 >> 2] = $6; //@line 33945
   $174 = $ReallocAsyncCtx3 + 16 | 0; //@line 33946
   HEAP32[$174 >> 2] = $8; //@line 33947
   $175 = $ReallocAsyncCtx3 + 20 | 0; //@line 33948
   HEAP32[$175 >> 2] = $10; //@line 33949
   $176 = $ReallocAsyncCtx3 + 24 | 0; //@line 33950
   HEAP32[$176 >> 2] = $12; //@line 33951
   $177 = $ReallocAsyncCtx3 + 28 | 0; //@line 33952
   HEAP32[$177 >> 2] = $14; //@line 33953
   sp = STACKTOP; //@line 33954
   STACKTOP = sp; //@line 33955
   return;
  }
 }
 if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($4 + 4 | 0) | 0) {
  _mbed_tracef(16, 13728, 13889, $12); //@line 33961
  HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0) >> 2] = 4; //@line 33964
  $183 = HEAP8[$2 >> 0] | 16; //@line 33966
  HEAP8[$2 >> 0] = $183; //@line 33967
  $185 = $183; //@line 33968
 } else {
  $185 = HEAP8[$2 >> 0] | 0; //@line 33971
 }
 $184 = $185 & -33; //@line 33973
 HEAP8[$2 >> 0] = $184; //@line 33974
 do {
  if (!($184 & 2)) {
   $225 = $184; //@line 33979
  } else {
   $194 = $184 & -3; //@line 33981
   HEAP8[$2 >> 0] = $194; //@line 33982
   if ((HEAP32[$4 + 360 >> 2] | 0) == 2) {
    _mbed_tracef(16, 13728, 13747, $8); //@line 33987
    $199 = HEAP32[$4 + 1328 >> 2] | 0; //@line 33989
    HEAP32[$6 >> 2] = 293; //@line 33990
    HEAP32[$6 + 4 >> 2] = 0; //@line 33992
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 33993
    HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 33994
    HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 33994
    $200 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($199, $4, $$byval_copy) | 0; //@line 33995
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 403; //@line 33998
     $201 = $ReallocAsyncCtx8 + 4 | 0; //@line 33999
     HEAP32[$201 >> 2] = $2; //@line 34000
     $202 = $ReallocAsyncCtx8 + 8 | 0; //@line 34001
     HEAP32[$202 >> 2] = $4; //@line 34002
     $203 = $ReallocAsyncCtx8 + 12 | 0; //@line 34003
     HEAP32[$203 >> 2] = $6; //@line 34004
     sp = STACKTOP; //@line 34005
     STACKTOP = sp; //@line 34006
     return;
    }
    HEAP32[___async_retval >> 2] = $200; //@line 34009
    ___async_unwind = 0; //@line 34010
    HEAP32[$ReallocAsyncCtx8 >> 2] = 403; //@line 34011
    $201 = $ReallocAsyncCtx8 + 4 | 0; //@line 34012
    HEAP32[$201 >> 2] = $2; //@line 34013
    $202 = $ReallocAsyncCtx8 + 8 | 0; //@line 34014
    HEAP32[$202 >> 2] = $4; //@line 34015
    $203 = $ReallocAsyncCtx8 + 12 | 0; //@line 34016
    HEAP32[$203 >> 2] = $6; //@line 34017
    sp = STACKTOP; //@line 34018
    STACKTOP = sp; //@line 34019
    return;
   }
   if ($194 & 4) {
    $223 = $194 & -5; //@line 34024
    HEAP8[$2 >> 0] = $223; //@line 34025
    $225 = $223; //@line 34026
    break;
   }
   $208 = HEAP32[$4 + 1324 >> 2] | 0; //@line 34030
   $209 = $208 + 16 | 0; //@line 34031
   $211 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 34033
   $212 = $208 + 28 | 0; //@line 34034
   $213 = HEAP32[$212 >> 2] | 0; //@line 34035
   if (!$213) {
    $ReallocAsyncCtx13 = _emscripten_realloc_async_context(24) | 0; //@line 34038
    _mbed_assert_internal(15679, 15684, 1102); //@line 34039
    if (___async) {
     HEAP32[$ReallocAsyncCtx13 >> 2] = 405; //@line 34042
     $215 = $ReallocAsyncCtx13 + 4 | 0; //@line 34043
     HEAP32[$215 >> 2] = $212; //@line 34044
     $216 = $ReallocAsyncCtx13 + 8 | 0; //@line 34045
     HEAP32[$216 >> 2] = $209; //@line 34046
     $217 = $ReallocAsyncCtx13 + 12 | 0; //@line 34047
     HEAP32[$217 >> 2] = $211; //@line 34048
     $218 = $ReallocAsyncCtx13 + 16 | 0; //@line 34049
     HEAP32[$218 >> 2] = $2; //@line 34050
     $219 = $ReallocAsyncCtx13 + 20 | 0; //@line 34051
     HEAP32[$219 >> 2] = $4; //@line 34052
     sp = STACKTOP; //@line 34053
     STACKTOP = sp; //@line 34054
     return;
    }
    ___async_unwind = 0; //@line 34056
    HEAP32[$ReallocAsyncCtx13 >> 2] = 405; //@line 34057
    $215 = $ReallocAsyncCtx13 + 4 | 0; //@line 34058
    HEAP32[$215 >> 2] = $212; //@line 34059
    $216 = $ReallocAsyncCtx13 + 8 | 0; //@line 34060
    HEAP32[$216 >> 2] = $209; //@line 34061
    $217 = $ReallocAsyncCtx13 + 12 | 0; //@line 34062
    HEAP32[$217 >> 2] = $211; //@line 34063
    $218 = $ReallocAsyncCtx13 + 16 | 0; //@line 34064
    HEAP32[$218 >> 2] = $2; //@line 34065
    $219 = $ReallocAsyncCtx13 + 20 | 0; //@line 34066
    HEAP32[$219 >> 2] = $4; //@line 34067
    sp = STACKTOP; //@line 34068
    STACKTOP = sp; //@line 34069
    return;
   } else {
    $220 = HEAP32[$213 >> 2] | 0; //@line 34071
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 34072
    FUNCTION_TABLE_vii[$220 & 31]($209, $211); //@line 34073
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 406; //@line 34076
     $221 = $ReallocAsyncCtx4 + 4 | 0; //@line 34077
     HEAP32[$221 >> 2] = $2; //@line 34078
     $222 = $ReallocAsyncCtx4 + 8 | 0; //@line 34079
     HEAP32[$222 >> 2] = $4; //@line 34080
     sp = STACKTOP; //@line 34081
     STACKTOP = sp; //@line 34082
     return;
    }
    ___async_unwind = 0; //@line 34084
    HEAP32[$ReallocAsyncCtx4 >> 2] = 406; //@line 34085
    $221 = $ReallocAsyncCtx4 + 4 | 0; //@line 34086
    HEAP32[$221 >> 2] = $2; //@line 34087
    $222 = $ReallocAsyncCtx4 + 8 | 0; //@line 34088
    HEAP32[$222 >> 2] = $4; //@line 34089
    sp = STACKTOP; //@line 34090
    STACKTOP = sp; //@line 34091
    return;
   }
  }
 } while (0);
 if (!($225 & 16)) {
  STACKTOP = sp; //@line 34098
  return;
 }
 HEAP8[$2 >> 0] = $225 & -17; //@line 34101
 $229 = HEAP32[$4 + 1324 >> 2] | 0; //@line 34103
 $230 = $229 + 48 | 0; //@line 34104
 $232 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 34106
 $233 = $229 + 60 | 0; //@line 34107
 $234 = HEAP32[$233 >> 2] | 0; //@line 34108
 if (!$234) {
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(16) | 0; //@line 34111
  _mbed_assert_internal(15679, 15684, 1102); //@line 34112
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 407; //@line 34115
   $236 = $ReallocAsyncCtx12 + 4 | 0; //@line 34116
   HEAP32[$236 >> 2] = $233; //@line 34117
   $237 = $ReallocAsyncCtx12 + 8 | 0; //@line 34118
   HEAP32[$237 >> 2] = $230; //@line 34119
   $238 = $ReallocAsyncCtx12 + 12 | 0; //@line 34120
   HEAP32[$238 >> 2] = $232; //@line 34121
   sp = STACKTOP; //@line 34122
   STACKTOP = sp; //@line 34123
   return;
  }
  ___async_unwind = 0; //@line 34125
  HEAP32[$ReallocAsyncCtx12 >> 2] = 407; //@line 34126
  $236 = $ReallocAsyncCtx12 + 4 | 0; //@line 34127
  HEAP32[$236 >> 2] = $233; //@line 34128
  $237 = $ReallocAsyncCtx12 + 8 | 0; //@line 34129
  HEAP32[$237 >> 2] = $230; //@line 34130
  $238 = $ReallocAsyncCtx12 + 12 | 0; //@line 34131
  HEAP32[$238 >> 2] = $232; //@line 34132
  sp = STACKTOP; //@line 34133
  STACKTOP = sp; //@line 34134
  return;
 } else {
  $239 = HEAP32[$234 >> 2] | 0; //@line 34136
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 34137
  FUNCTION_TABLE_vii[$239 & 31]($230, $232); //@line 34138
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 408; //@line 34141
   sp = STACKTOP; //@line 34142
   STACKTOP = sp; //@line 34143
   return;
  }
  ___async_unwind = 0; //@line 34145
  HEAP32[$ReallocAsyncCtx5 >> 2] = 408; //@line 34146
  sp = STACKTOP; //@line 34147
  STACKTOP = sp; //@line 34148
  return;
 }
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_188($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $10 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $117 = 0, $119 = 0, $12 = 0, $120 = 0, $125 = 0, $127 = 0, $128 = 0, $129 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $153 = 0, $154 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $194 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $208 = 0, $209 = 0, $211 = 0, $212 = 0, $213 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $225 = 0, $229 = 0, $230 = 0, $232 = 0, $233 = 0, $234 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $42 = 0, $56 = 0, $6 = 0, $60 = 0, $65 = 0, $71 = 0, $72 = 0, $77 = 0, $8 = 0, $81 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $98 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 32635
 STACKTOP = STACKTOP + 16 | 0; //@line 32636
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 32636
 $$byval_copy = sp; //@line 32637
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32639
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32641
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32643
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32645
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32647
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 32649
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 32651
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 32653
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 32655
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 32657
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 32659
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 32661
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx17 = _emscripten_realloc_async_context(52) | 0; //@line 32666
  _mbed_assert_internal(13612, 13621, 192); //@line 32667
  if (___async) {
   HEAP32[$ReallocAsyncCtx17 >> 2] = 395; //@line 32670
   $27 = $ReallocAsyncCtx17 + 4 | 0; //@line 32671
   HEAP32[$27 >> 2] = $2; //@line 32672
   $28 = $ReallocAsyncCtx17 + 8 | 0; //@line 32673
   HEAP32[$28 >> 2] = $4; //@line 32674
   $29 = $ReallocAsyncCtx17 + 12 | 0; //@line 32675
   HEAP32[$29 >> 2] = $6; //@line 32676
   $30 = $ReallocAsyncCtx17 + 16 | 0; //@line 32677
   HEAP32[$30 >> 2] = $8; //@line 32678
   $31 = $ReallocAsyncCtx17 + 20 | 0; //@line 32679
   HEAP32[$31 >> 2] = $10; //@line 32680
   $32 = $ReallocAsyncCtx17 + 24 | 0; //@line 32681
   HEAP32[$32 >> 2] = $12; //@line 32682
   $33 = $ReallocAsyncCtx17 + 28 | 0; //@line 32683
   HEAP32[$33 >> 2] = $14; //@line 32684
   $34 = $ReallocAsyncCtx17 + 32 | 0; //@line 32685
   HEAP32[$34 >> 2] = $16; //@line 32686
   $35 = $ReallocAsyncCtx17 + 36 | 0; //@line 32687
   HEAP32[$35 >> 2] = $18; //@line 32688
   $36 = $ReallocAsyncCtx17 + 40 | 0; //@line 32689
   HEAP32[$36 >> 2] = $20; //@line 32690
   $37 = $ReallocAsyncCtx17 + 44 | 0; //@line 32691
   HEAP32[$37 >> 2] = $22; //@line 32692
   $38 = $ReallocAsyncCtx17 + 48 | 0; //@line 32693
   HEAP32[$38 >> 2] = $24; //@line 32694
   sp = STACKTOP; //@line 32695
   STACKTOP = sp; //@line 32696
   return;
  }
  ___async_unwind = 0; //@line 32698
  HEAP32[$ReallocAsyncCtx17 >> 2] = 395; //@line 32699
  $27 = $ReallocAsyncCtx17 + 4 | 0; //@line 32700
  HEAP32[$27 >> 2] = $2; //@line 32701
  $28 = $ReallocAsyncCtx17 + 8 | 0; //@line 32702
  HEAP32[$28 >> 2] = $4; //@line 32703
  $29 = $ReallocAsyncCtx17 + 12 | 0; //@line 32704
  HEAP32[$29 >> 2] = $6; //@line 32705
  $30 = $ReallocAsyncCtx17 + 16 | 0; //@line 32706
  HEAP32[$30 >> 2] = $8; //@line 32707
  $31 = $ReallocAsyncCtx17 + 20 | 0; //@line 32708
  HEAP32[$31 >> 2] = $10; //@line 32709
  $32 = $ReallocAsyncCtx17 + 24 | 0; //@line 32710
  HEAP32[$32 >> 2] = $12; //@line 32711
  $33 = $ReallocAsyncCtx17 + 28 | 0; //@line 32712
  HEAP32[$33 >> 2] = $14; //@line 32713
  $34 = $ReallocAsyncCtx17 + 32 | 0; //@line 32714
  HEAP32[$34 >> 2] = $16; //@line 32715
  $35 = $ReallocAsyncCtx17 + 36 | 0; //@line 32716
  HEAP32[$35 >> 2] = $18; //@line 32717
  $36 = $ReallocAsyncCtx17 + 40 | 0; //@line 32718
  HEAP32[$36 >> 2] = $20; //@line 32719
  $37 = $ReallocAsyncCtx17 + 44 | 0; //@line 32720
  HEAP32[$37 >> 2] = $22; //@line 32721
  $38 = $ReallocAsyncCtx17 + 48 | 0; //@line 32722
  HEAP32[$38 >> 2] = $24; //@line 32723
  sp = STACKTOP; //@line 32724
  STACKTOP = sp; //@line 32725
  return;
 }
 do {
  if (HEAP8[$2 >> 0] & 2) {
   $42 = $4 + 288 | 0; //@line 32732
   if (!(HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($42) | 0) + 10 >> 0] | 0)) {
    if ((HEAPU8[$4 + 895 >> 0] | 0) <= (HEAPU8[$4 + 894 >> 0] | 0)) {
     break;
    }
   }
   HEAP8[$4 + 377 >> 0] = 0; //@line 32748
   HEAP8[$24 >> 0] = 0; //@line 32749
   if (!(HEAP8[$4 + 370 >> 0] | 0)) {
    $56 = $4 + 956 | 0; //@line 32754
    HEAP32[$56 >> 2] = (HEAP32[$56 >> 2] | 0) + 1; //@line 32757
   }
   $60 = HEAP8[$4 + 895 >> 0] | 0; //@line 32760
   HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($42) | 0) + 11 >> 0] = $60; //@line 32763
   HEAP32[$16 >> 2] = HEAP32[$16 >> 2] & -2; //@line 32766
  }
 } while (0);
 $65 = $4 + 377 | 0; //@line 32769
 if (HEAP8[$65 >> 0] | 0) {
  if (!(HEAP32[$16 >> 2] & 16)) {
   HEAP8[$65 >> 0] = 0; //@line 32777
   $71 = $4 + 895 | 0; //@line 32778
   $72 = HEAP8[$71 >> 0] | 0; //@line 32779
   if (!(($72 & 255) < 9 ? ($72 & 255) < (HEAPU8[$4 + 894 >> 0] | 0) : 0)) {
    $98 = HEAP32[$4 >> 2] | 0; //@line 32786
    $101 = HEAP32[(HEAP32[$98 >> 2] | 0) + 16 >> 2] | 0; //@line 32789
    $ReallocAsyncCtx = _emscripten_realloc_async_context(52) | 0; //@line 32790
    FUNCTION_TABLE_vi[$101 & 1023]($98); //@line 32791
    if (___async) {
     HEAP32[$ReallocAsyncCtx >> 2] = 397; //@line 32794
     $102 = $ReallocAsyncCtx + 4 | 0; //@line 32795
     HEAP32[$102 >> 2] = $2; //@line 32796
     $103 = $ReallocAsyncCtx + 8 | 0; //@line 32797
     HEAP32[$103 >> 2] = $4; //@line 32798
     $104 = $ReallocAsyncCtx + 12 | 0; //@line 32799
     HEAP32[$104 >> 2] = $16; //@line 32800
     $105 = $ReallocAsyncCtx + 16 | 0; //@line 32801
     HEAP32[$105 >> 2] = $24; //@line 32802
     $106 = $ReallocAsyncCtx + 20 | 0; //@line 32803
     HEAP32[$106 >> 2] = $71; //@line 32804
     $107 = $ReallocAsyncCtx + 24 | 0; //@line 32805
     HEAP32[$107 >> 2] = $6; //@line 32806
     $108 = $ReallocAsyncCtx + 28 | 0; //@line 32807
     HEAP32[$108 >> 2] = $8; //@line 32808
     $109 = $ReallocAsyncCtx + 32 | 0; //@line 32809
     HEAP32[$109 >> 2] = $10; //@line 32810
     $110 = $ReallocAsyncCtx + 36 | 0; //@line 32811
     HEAP32[$110 >> 2] = $12; //@line 32812
     $111 = $ReallocAsyncCtx + 40 | 0; //@line 32813
     HEAP32[$111 >> 2] = $14; //@line 32814
     $112 = $ReallocAsyncCtx + 44 | 0; //@line 32815
     HEAP32[$112 >> 2] = $18; //@line 32816
     $113 = $ReallocAsyncCtx + 48 | 0; //@line 32817
     HEAP32[$113 >> 2] = $20; //@line 32818
     sp = STACKTOP; //@line 32819
     STACKTOP = sp; //@line 32820
     return;
    }
    ___async_unwind = 0; //@line 32822
    HEAP32[$ReallocAsyncCtx >> 2] = 397; //@line 32823
    $102 = $ReallocAsyncCtx + 4 | 0; //@line 32824
    HEAP32[$102 >> 2] = $2; //@line 32825
    $103 = $ReallocAsyncCtx + 8 | 0; //@line 32826
    HEAP32[$103 >> 2] = $4; //@line 32827
    $104 = $ReallocAsyncCtx + 12 | 0; //@line 32828
    HEAP32[$104 >> 2] = $16; //@line 32829
    $105 = $ReallocAsyncCtx + 16 | 0; //@line 32830
    HEAP32[$105 >> 2] = $24; //@line 32831
    $106 = $ReallocAsyncCtx + 20 | 0; //@line 32832
    HEAP32[$106 >> 2] = $71; //@line 32833
    $107 = $ReallocAsyncCtx + 24 | 0; //@line 32834
    HEAP32[$107 >> 2] = $6; //@line 32835
    $108 = $ReallocAsyncCtx + 28 | 0; //@line 32836
    HEAP32[$108 >> 2] = $8; //@line 32837
    $109 = $ReallocAsyncCtx + 32 | 0; //@line 32838
    HEAP32[$109 >> 2] = $10; //@line 32839
    $110 = $ReallocAsyncCtx + 36 | 0; //@line 32840
    HEAP32[$110 >> 2] = $12; //@line 32841
    $111 = $ReallocAsyncCtx + 40 | 0; //@line 32842
    HEAP32[$111 >> 2] = $14; //@line 32843
    $112 = $ReallocAsyncCtx + 44 | 0; //@line 32844
    HEAP32[$112 >> 2] = $18; //@line 32845
    $113 = $ReallocAsyncCtx + 48 | 0; //@line 32846
    HEAP32[$113 >> 2] = $20; //@line 32847
    sp = STACKTOP; //@line 32848
    STACKTOP = sp; //@line 32849
    return;
   }
   $77 = $72 + 1 << 24 >> 24; //@line 32851
   HEAP8[$71 >> 0] = $77; //@line 32852
   if ($77 & 1) {
    $81 = $4 + 1097 | 0; //@line 32857
    HEAP8[$81 >> 0] = __ZN7LoRaPHY26get_next_lower_tx_datarateEa(HEAP32[$4 >> 2] | 0, HEAP8[$81 >> 0] | 0) | 0; //@line 32860
   }
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(52) | 0; //@line 32862
   $84 = __ZN7LoRaMac11schedule_txEv($4) | 0; //@line 32863
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 396; //@line 32866
    $85 = $ReallocAsyncCtx7 + 4 | 0; //@line 32867
    HEAP32[$85 >> 2] = $2; //@line 32868
    $86 = $ReallocAsyncCtx7 + 8 | 0; //@line 32869
    HEAP32[$86 >> 2] = $4; //@line 32870
    $87 = $ReallocAsyncCtx7 + 12 | 0; //@line 32871
    HEAP32[$87 >> 2] = $16; //@line 32872
    $88 = $ReallocAsyncCtx7 + 16 | 0; //@line 32873
    HEAP32[$88 >> 2] = $24; //@line 32874
    $89 = $ReallocAsyncCtx7 + 20 | 0; //@line 32875
    HEAP32[$89 >> 2] = $71; //@line 32876
    $90 = $ReallocAsyncCtx7 + 24 | 0; //@line 32877
    HEAP32[$90 >> 2] = $6; //@line 32878
    $91 = $ReallocAsyncCtx7 + 28 | 0; //@line 32879
    HEAP32[$91 >> 2] = $8; //@line 32880
    $92 = $ReallocAsyncCtx7 + 32 | 0; //@line 32881
    HEAP32[$92 >> 2] = $10; //@line 32882
    $93 = $ReallocAsyncCtx7 + 36 | 0; //@line 32883
    HEAP32[$93 >> 2] = $12; //@line 32884
    $94 = $ReallocAsyncCtx7 + 40 | 0; //@line 32885
    HEAP32[$94 >> 2] = $14; //@line 32886
    $95 = $ReallocAsyncCtx7 + 44 | 0; //@line 32887
    HEAP32[$95 >> 2] = $18; //@line 32888
    $96 = $ReallocAsyncCtx7 + 48 | 0; //@line 32889
    HEAP32[$96 >> 2] = $20; //@line 32890
    sp = STACKTOP; //@line 32891
    STACKTOP = sp; //@line 32892
    return;
   }
   HEAP32[___async_retval >> 2] = $84; //@line 32895
   ___async_unwind = 0; //@line 32896
   HEAP32[$ReallocAsyncCtx7 >> 2] = 396; //@line 32897
   $85 = $ReallocAsyncCtx7 + 4 | 0; //@line 32898
   HEAP32[$85 >> 2] = $2; //@line 32899
   $86 = $ReallocAsyncCtx7 + 8 | 0; //@line 32900
   HEAP32[$86 >> 2] = $4; //@line 32901
   $87 = $ReallocAsyncCtx7 + 12 | 0; //@line 32902
   HEAP32[$87 >> 2] = $16; //@line 32903
   $88 = $ReallocAsyncCtx7 + 16 | 0; //@line 32904
   HEAP32[$88 >> 2] = $24; //@line 32905
   $89 = $ReallocAsyncCtx7 + 20 | 0; //@line 32906
   HEAP32[$89 >> 2] = $71; //@line 32907
   $90 = $ReallocAsyncCtx7 + 24 | 0; //@line 32908
   HEAP32[$90 >> 2] = $6; //@line 32909
   $91 = $ReallocAsyncCtx7 + 28 | 0; //@line 32910
   HEAP32[$91 >> 2] = $8; //@line 32911
   $92 = $ReallocAsyncCtx7 + 32 | 0; //@line 32912
   HEAP32[$92 >> 2] = $10; //@line 32913
   $93 = $ReallocAsyncCtx7 + 36 | 0; //@line 32914
   HEAP32[$93 >> 2] = $12; //@line 32915
   $94 = $ReallocAsyncCtx7 + 40 | 0; //@line 32916
   HEAP32[$94 >> 2] = $14; //@line 32917
   $95 = $ReallocAsyncCtx7 + 44 | 0; //@line 32918
   HEAP32[$95 >> 2] = $18; //@line 32919
   $96 = $ReallocAsyncCtx7 + 48 | 0; //@line 32920
   HEAP32[$96 >> 2] = $20; //@line 32921
   sp = STACKTOP; //@line 32922
   STACKTOP = sp; //@line 32923
   return;
  }
 }
 $114 = HEAP32[$16 >> 2] | 0; //@line 32926
 $117 = $114 & -3; //@line 32929
 if (!($114 & 2)) {
  $119 = $114; //@line 32931
 } else {
  HEAP32[$16 >> 2] = $117; //@line 32933
  $119 = $117; //@line 32934
 }
 if ($119 | 0) {
  $186 = HEAP32[$18 >> 2] | 0; //@line 32938
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 32939
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($186, $20, 1e3); //@line 32940
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 402; //@line 32943
   $187 = $ReallocAsyncCtx6 + 4 | 0; //@line 32944
   HEAP32[$187 >> 2] = $2; //@line 32945
   $188 = $ReallocAsyncCtx6 + 8 | 0; //@line 32946
   HEAP32[$188 >> 2] = $4; //@line 32947
   $189 = $ReallocAsyncCtx6 + 12 | 0; //@line 32948
   HEAP32[$189 >> 2] = $6; //@line 32949
   $190 = $ReallocAsyncCtx6 + 16 | 0; //@line 32950
   HEAP32[$190 >> 2] = $8; //@line 32951
   $191 = $ReallocAsyncCtx6 + 20 | 0; //@line 32952
   HEAP32[$191 >> 2] = $10; //@line 32953
   sp = STACKTOP; //@line 32954
   STACKTOP = sp; //@line 32955
   return;
  }
  ___async_unwind = 0; //@line 32957
  HEAP32[$ReallocAsyncCtx6 >> 2] = 402; //@line 32958
  $187 = $ReallocAsyncCtx6 + 4 | 0; //@line 32959
  HEAP32[$187 >> 2] = $2; //@line 32960
  $188 = $ReallocAsyncCtx6 + 8 | 0; //@line 32961
  HEAP32[$188 >> 2] = $4; //@line 32962
  $189 = $ReallocAsyncCtx6 + 12 | 0; //@line 32963
  HEAP32[$189 >> 2] = $6; //@line 32964
  $190 = $ReallocAsyncCtx6 + 16 | 0; //@line 32965
  HEAP32[$190 >> 2] = $8; //@line 32966
  $191 = $ReallocAsyncCtx6 + 20 | 0; //@line 32967
  HEAP32[$191 >> 2] = $10; //@line 32968
  sp = STACKTOP; //@line 32969
  STACKTOP = sp; //@line 32970
  return;
 }
 $120 = HEAP8[$2 >> 0] | 0; //@line 32972
 if ($120 & 1) {
  HEAP8[$2 >> 0] = $120 & -2; //@line 32977
  $125 = HEAP32[$4 + 1324 >> 2] | 0; //@line 32979
  $127 = __ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0; //@line 32981
  $128 = $125 + 12 | 0; //@line 32982
  $129 = HEAP32[$128 >> 2] | 0; //@line 32983
  if (!$129) {
   $ReallocAsyncCtx16 = _emscripten_realloc_async_context(44) | 0; //@line 32986
   _mbed_assert_internal(15679, 15684, 1102); //@line 32987
   if (___async) {
    HEAP32[$ReallocAsyncCtx16 >> 2] = 398; //@line 32990
    $131 = $ReallocAsyncCtx16 + 4 | 0; //@line 32991
    HEAP32[$131 >> 2] = $2; //@line 32992
    $132 = $ReallocAsyncCtx16 + 8 | 0; //@line 32993
    HEAP32[$132 >> 2] = $4; //@line 32994
    $133 = $ReallocAsyncCtx16 + 12 | 0; //@line 32995
    HEAP32[$133 >> 2] = $125; //@line 32996
    $134 = $ReallocAsyncCtx16 + 16 | 0; //@line 32997
    HEAP32[$134 >> 2] = $127; //@line 32998
    $135 = $ReallocAsyncCtx16 + 20 | 0; //@line 32999
    HEAP32[$135 >> 2] = $128; //@line 33000
    $136 = $ReallocAsyncCtx16 + 24 | 0; //@line 33001
    HEAP32[$136 >> 2] = $6; //@line 33002
    $137 = $ReallocAsyncCtx16 + 28 | 0; //@line 33003
    HEAP32[$137 >> 2] = $8; //@line 33004
    $138 = $ReallocAsyncCtx16 + 32 | 0; //@line 33005
    HEAP32[$138 >> 2] = $10; //@line 33006
    $139 = $ReallocAsyncCtx16 + 36 | 0; //@line 33007
    HEAP32[$139 >> 2] = $12; //@line 33008
    $140 = $ReallocAsyncCtx16 + 40 | 0; //@line 33009
    HEAP32[$140 >> 2] = $14; //@line 33010
    sp = STACKTOP; //@line 33011
    STACKTOP = sp; //@line 33012
    return;
   }
   ___async_unwind = 0; //@line 33014
   HEAP32[$ReallocAsyncCtx16 >> 2] = 398; //@line 33015
   $131 = $ReallocAsyncCtx16 + 4 | 0; //@line 33016
   HEAP32[$131 >> 2] = $2; //@line 33017
   $132 = $ReallocAsyncCtx16 + 8 | 0; //@line 33018
   HEAP32[$132 >> 2] = $4; //@line 33019
   $133 = $ReallocAsyncCtx16 + 12 | 0; //@line 33020
   HEAP32[$133 >> 2] = $125; //@line 33021
   $134 = $ReallocAsyncCtx16 + 16 | 0; //@line 33022
   HEAP32[$134 >> 2] = $127; //@line 33023
   $135 = $ReallocAsyncCtx16 + 20 | 0; //@line 33024
   HEAP32[$135 >> 2] = $128; //@line 33025
   $136 = $ReallocAsyncCtx16 + 24 | 0; //@line 33026
   HEAP32[$136 >> 2] = $6; //@line 33027
   $137 = $ReallocAsyncCtx16 + 28 | 0; //@line 33028
   HEAP32[$137 >> 2] = $8; //@line 33029
   $138 = $ReallocAsyncCtx16 + 32 | 0; //@line 33030
   HEAP32[$138 >> 2] = $10; //@line 33031
   $139 = $ReallocAsyncCtx16 + 36 | 0; //@line 33032
   HEAP32[$139 >> 2] = $12; //@line 33033
   $140 = $ReallocAsyncCtx16 + 40 | 0; //@line 33034
   HEAP32[$140 >> 2] = $14; //@line 33035
   sp = STACKTOP; //@line 33036
   STACKTOP = sp; //@line 33037
   return;
  } else {
   $141 = HEAP32[$129 >> 2] | 0; //@line 33039
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 33040
   FUNCTION_TABLE_vii[$141 & 31]($125, $127); //@line 33041
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 399; //@line 33044
    $142 = $ReallocAsyncCtx2 + 4 | 0; //@line 33045
    HEAP32[$142 >> 2] = $2; //@line 33046
    $143 = $ReallocAsyncCtx2 + 8 | 0; //@line 33047
    HEAP32[$143 >> 2] = $4; //@line 33048
    $144 = $ReallocAsyncCtx2 + 12 | 0; //@line 33049
    HEAP32[$144 >> 2] = $6; //@line 33050
    $145 = $ReallocAsyncCtx2 + 16 | 0; //@line 33051
    HEAP32[$145 >> 2] = $8; //@line 33052
    $146 = $ReallocAsyncCtx2 + 20 | 0; //@line 33053
    HEAP32[$146 >> 2] = $10; //@line 33054
    $147 = $ReallocAsyncCtx2 + 24 | 0; //@line 33055
    HEAP32[$147 >> 2] = $12; //@line 33056
    $148 = $ReallocAsyncCtx2 + 28 | 0; //@line 33057
    HEAP32[$148 >> 2] = $14; //@line 33058
    sp = STACKTOP; //@line 33059
    STACKTOP = sp; //@line 33060
    return;
   }
   ___async_unwind = 0; //@line 33062
   HEAP32[$ReallocAsyncCtx2 >> 2] = 399; //@line 33063
   $142 = $ReallocAsyncCtx2 + 4 | 0; //@line 33064
   HEAP32[$142 >> 2] = $2; //@line 33065
   $143 = $ReallocAsyncCtx2 + 8 | 0; //@line 33066
   HEAP32[$143 >> 2] = $4; //@line 33067
   $144 = $ReallocAsyncCtx2 + 12 | 0; //@line 33068
   HEAP32[$144 >> 2] = $6; //@line 33069
   $145 = $ReallocAsyncCtx2 + 16 | 0; //@line 33070
   HEAP32[$145 >> 2] = $8; //@line 33071
   $146 = $ReallocAsyncCtx2 + 20 | 0; //@line 33072
   HEAP32[$146 >> 2] = $10; //@line 33073
   $147 = $ReallocAsyncCtx2 + 24 | 0; //@line 33074
   HEAP32[$147 >> 2] = $12; //@line 33075
   $148 = $ReallocAsyncCtx2 + 28 | 0; //@line 33076
   HEAP32[$148 >> 2] = $14; //@line 33077
   sp = STACKTOP; //@line 33078
   STACKTOP = sp; //@line 33079
   return;
  }
 }
 if ($120 & 8) {
  HEAP8[$2 >> 0] = $120 & -9; //@line 33086
  $153 = HEAP32[$4 + 1324 >> 2] | 0; //@line 33088
  $154 = $153 + 32 | 0; //@line 33089
  $156 = __ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0; //@line 33091
  $157 = $153 + 44 | 0; //@line 33092
  $158 = HEAP32[$157 >> 2] | 0; //@line 33093
  if (!$158) {
   $ReallocAsyncCtx15 = _emscripten_realloc_async_context(44) | 0; //@line 33096
   _mbed_assert_internal(15679, 15684, 1102); //@line 33097
   if (___async) {
    HEAP32[$ReallocAsyncCtx15 >> 2] = 400; //@line 33100
    $160 = $ReallocAsyncCtx15 + 4 | 0; //@line 33101
    HEAP32[$160 >> 2] = $2; //@line 33102
    $161 = $ReallocAsyncCtx15 + 8 | 0; //@line 33103
    HEAP32[$161 >> 2] = $4; //@line 33104
    $162 = $ReallocAsyncCtx15 + 12 | 0; //@line 33105
    HEAP32[$162 >> 2] = $154; //@line 33106
    $163 = $ReallocAsyncCtx15 + 16 | 0; //@line 33107
    HEAP32[$163 >> 2] = $156; //@line 33108
    $164 = $ReallocAsyncCtx15 + 20 | 0; //@line 33109
    HEAP32[$164 >> 2] = $6; //@line 33110
    $165 = $ReallocAsyncCtx15 + 24 | 0; //@line 33111
    HEAP32[$165 >> 2] = $8; //@line 33112
    $166 = $ReallocAsyncCtx15 + 28 | 0; //@line 33113
    HEAP32[$166 >> 2] = $10; //@line 33114
    $167 = $ReallocAsyncCtx15 + 32 | 0; //@line 33115
    HEAP32[$167 >> 2] = $12; //@line 33116
    $168 = $ReallocAsyncCtx15 + 36 | 0; //@line 33117
    HEAP32[$168 >> 2] = $14; //@line 33118
    $169 = $ReallocAsyncCtx15 + 40 | 0; //@line 33119
    HEAP32[$169 >> 2] = $157; //@line 33120
    sp = STACKTOP; //@line 33121
    STACKTOP = sp; //@line 33122
    return;
   }
   ___async_unwind = 0; //@line 33124
   HEAP32[$ReallocAsyncCtx15 >> 2] = 400; //@line 33125
   $160 = $ReallocAsyncCtx15 + 4 | 0; //@line 33126
   HEAP32[$160 >> 2] = $2; //@line 33127
   $161 = $ReallocAsyncCtx15 + 8 | 0; //@line 33128
   HEAP32[$161 >> 2] = $4; //@line 33129
   $162 = $ReallocAsyncCtx15 + 12 | 0; //@line 33130
   HEAP32[$162 >> 2] = $154; //@line 33131
   $163 = $ReallocAsyncCtx15 + 16 | 0; //@line 33132
   HEAP32[$163 >> 2] = $156; //@line 33133
   $164 = $ReallocAsyncCtx15 + 20 | 0; //@line 33134
   HEAP32[$164 >> 2] = $6; //@line 33135
   $165 = $ReallocAsyncCtx15 + 24 | 0; //@line 33136
   HEAP32[$165 >> 2] = $8; //@line 33137
   $166 = $ReallocAsyncCtx15 + 28 | 0; //@line 33138
   HEAP32[$166 >> 2] = $10; //@line 33139
   $167 = $ReallocAsyncCtx15 + 32 | 0; //@line 33140
   HEAP32[$167 >> 2] = $12; //@line 33141
   $168 = $ReallocAsyncCtx15 + 36 | 0; //@line 33142
   HEAP32[$168 >> 2] = $14; //@line 33143
   $169 = $ReallocAsyncCtx15 + 40 | 0; //@line 33144
   HEAP32[$169 >> 2] = $157; //@line 33145
   sp = STACKTOP; //@line 33146
   STACKTOP = sp; //@line 33147
   return;
  } else {
   $170 = HEAP32[$158 >> 2] | 0; //@line 33149
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 33150
   FUNCTION_TABLE_vii[$170 & 31]($154, $156); //@line 33151
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 401; //@line 33154
    $171 = $ReallocAsyncCtx3 + 4 | 0; //@line 33155
    HEAP32[$171 >> 2] = $4; //@line 33156
    $172 = $ReallocAsyncCtx3 + 8 | 0; //@line 33157
    HEAP32[$172 >> 2] = $2; //@line 33158
    $173 = $ReallocAsyncCtx3 + 12 | 0; //@line 33159
    HEAP32[$173 >> 2] = $6; //@line 33160
    $174 = $ReallocAsyncCtx3 + 16 | 0; //@line 33161
    HEAP32[$174 >> 2] = $8; //@line 33162
    $175 = $ReallocAsyncCtx3 + 20 | 0; //@line 33163
    HEAP32[$175 >> 2] = $10; //@line 33164
    $176 = $ReallocAsyncCtx3 + 24 | 0; //@line 33165
    HEAP32[$176 >> 2] = $12; //@line 33166
    $177 = $ReallocAsyncCtx3 + 28 | 0; //@line 33167
    HEAP32[$177 >> 2] = $14; //@line 33168
    sp = STACKTOP; //@line 33169
    STACKTOP = sp; //@line 33170
    return;
   }
   ___async_unwind = 0; //@line 33172
   HEAP32[$ReallocAsyncCtx3 >> 2] = 401; //@line 33173
   $171 = $ReallocAsyncCtx3 + 4 | 0; //@line 33174
   HEAP32[$171 >> 2] = $4; //@line 33175
   $172 = $ReallocAsyncCtx3 + 8 | 0; //@line 33176
   HEAP32[$172 >> 2] = $2; //@line 33177
   $173 = $ReallocAsyncCtx3 + 12 | 0; //@line 33178
   HEAP32[$173 >> 2] = $6; //@line 33179
   $174 = $ReallocAsyncCtx3 + 16 | 0; //@line 33180
   HEAP32[$174 >> 2] = $8; //@line 33181
   $175 = $ReallocAsyncCtx3 + 20 | 0; //@line 33182
   HEAP32[$175 >> 2] = $10; //@line 33183
   $176 = $ReallocAsyncCtx3 + 24 | 0; //@line 33184
   HEAP32[$176 >> 2] = $12; //@line 33185
   $177 = $ReallocAsyncCtx3 + 28 | 0; //@line 33186
   HEAP32[$177 >> 2] = $14; //@line 33187
   sp = STACKTOP; //@line 33188
   STACKTOP = sp; //@line 33189
   return;
  }
 }
 if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($4 + 4 | 0) | 0) {
  _mbed_tracef(16, 13728, 13889, $12); //@line 33195
  HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0) >> 2] = 4; //@line 33198
  $183 = HEAP8[$2 >> 0] | 16; //@line 33200
  HEAP8[$2 >> 0] = $183; //@line 33201
  $185 = $183; //@line 33202
 } else {
  $185 = HEAP8[$2 >> 0] | 0; //@line 33205
 }
 $184 = $185 & -33; //@line 33207
 HEAP8[$2 >> 0] = $184; //@line 33208
 do {
  if (!($184 & 2)) {
   $225 = $184; //@line 33213
  } else {
   $194 = $184 & -3; //@line 33215
   HEAP8[$2 >> 0] = $194; //@line 33216
   if ((HEAP32[$4 + 360 >> 2] | 0) == 2) {
    _mbed_tracef(16, 13728, 13747, $8); //@line 33221
    $199 = HEAP32[$4 + 1328 >> 2] | 0; //@line 33223
    HEAP32[$6 >> 2] = 293; //@line 33224
    HEAP32[$6 + 4 >> 2] = 0; //@line 33226
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 33227
    HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 33228
    HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 33228
    $200 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($199, $4, $$byval_copy) | 0; //@line 33229
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 403; //@line 33232
     $201 = $ReallocAsyncCtx8 + 4 | 0; //@line 33233
     HEAP32[$201 >> 2] = $2; //@line 33234
     $202 = $ReallocAsyncCtx8 + 8 | 0; //@line 33235
     HEAP32[$202 >> 2] = $4; //@line 33236
     $203 = $ReallocAsyncCtx8 + 12 | 0; //@line 33237
     HEAP32[$203 >> 2] = $6; //@line 33238
     sp = STACKTOP; //@line 33239
     STACKTOP = sp; //@line 33240
     return;
    }
    HEAP32[___async_retval >> 2] = $200; //@line 33243
    ___async_unwind = 0; //@line 33244
    HEAP32[$ReallocAsyncCtx8 >> 2] = 403; //@line 33245
    $201 = $ReallocAsyncCtx8 + 4 | 0; //@line 33246
    HEAP32[$201 >> 2] = $2; //@line 33247
    $202 = $ReallocAsyncCtx8 + 8 | 0; //@line 33248
    HEAP32[$202 >> 2] = $4; //@line 33249
    $203 = $ReallocAsyncCtx8 + 12 | 0; //@line 33250
    HEAP32[$203 >> 2] = $6; //@line 33251
    sp = STACKTOP; //@line 33252
    STACKTOP = sp; //@line 33253
    return;
   }
   if ($194 & 4) {
    $223 = $194 & -5; //@line 33258
    HEAP8[$2 >> 0] = $223; //@line 33259
    $225 = $223; //@line 33260
    break;
   }
   $208 = HEAP32[$4 + 1324 >> 2] | 0; //@line 33264
   $209 = $208 + 16 | 0; //@line 33265
   $211 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 33267
   $212 = $208 + 28 | 0; //@line 33268
   $213 = HEAP32[$212 >> 2] | 0; //@line 33269
   if (!$213) {
    $ReallocAsyncCtx13 = _emscripten_realloc_async_context(24) | 0; //@line 33272
    _mbed_assert_internal(15679, 15684, 1102); //@line 33273
    if (___async) {
     HEAP32[$ReallocAsyncCtx13 >> 2] = 405; //@line 33276
     $215 = $ReallocAsyncCtx13 + 4 | 0; //@line 33277
     HEAP32[$215 >> 2] = $212; //@line 33278
     $216 = $ReallocAsyncCtx13 + 8 | 0; //@line 33279
     HEAP32[$216 >> 2] = $209; //@line 33280
     $217 = $ReallocAsyncCtx13 + 12 | 0; //@line 33281
     HEAP32[$217 >> 2] = $211; //@line 33282
     $218 = $ReallocAsyncCtx13 + 16 | 0; //@line 33283
     HEAP32[$218 >> 2] = $2; //@line 33284
     $219 = $ReallocAsyncCtx13 + 20 | 0; //@line 33285
     HEAP32[$219 >> 2] = $4; //@line 33286
     sp = STACKTOP; //@line 33287
     STACKTOP = sp; //@line 33288
     return;
    }
    ___async_unwind = 0; //@line 33290
    HEAP32[$ReallocAsyncCtx13 >> 2] = 405; //@line 33291
    $215 = $ReallocAsyncCtx13 + 4 | 0; //@line 33292
    HEAP32[$215 >> 2] = $212; //@line 33293
    $216 = $ReallocAsyncCtx13 + 8 | 0; //@line 33294
    HEAP32[$216 >> 2] = $209; //@line 33295
    $217 = $ReallocAsyncCtx13 + 12 | 0; //@line 33296
    HEAP32[$217 >> 2] = $211; //@line 33297
    $218 = $ReallocAsyncCtx13 + 16 | 0; //@line 33298
    HEAP32[$218 >> 2] = $2; //@line 33299
    $219 = $ReallocAsyncCtx13 + 20 | 0; //@line 33300
    HEAP32[$219 >> 2] = $4; //@line 33301
    sp = STACKTOP; //@line 33302
    STACKTOP = sp; //@line 33303
    return;
   } else {
    $220 = HEAP32[$213 >> 2] | 0; //@line 33305
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 33306
    FUNCTION_TABLE_vii[$220 & 31]($209, $211); //@line 33307
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 406; //@line 33310
     $221 = $ReallocAsyncCtx4 + 4 | 0; //@line 33311
     HEAP32[$221 >> 2] = $2; //@line 33312
     $222 = $ReallocAsyncCtx4 + 8 | 0; //@line 33313
     HEAP32[$222 >> 2] = $4; //@line 33314
     sp = STACKTOP; //@line 33315
     STACKTOP = sp; //@line 33316
     return;
    }
    ___async_unwind = 0; //@line 33318
    HEAP32[$ReallocAsyncCtx4 >> 2] = 406; //@line 33319
    $221 = $ReallocAsyncCtx4 + 4 | 0; //@line 33320
    HEAP32[$221 >> 2] = $2; //@line 33321
    $222 = $ReallocAsyncCtx4 + 8 | 0; //@line 33322
    HEAP32[$222 >> 2] = $4; //@line 33323
    sp = STACKTOP; //@line 33324
    STACKTOP = sp; //@line 33325
    return;
   }
  }
 } while (0);
 if (!($225 & 16)) {
  STACKTOP = sp; //@line 33332
  return;
 }
 HEAP8[$2 >> 0] = $225 & -17; //@line 33335
 $229 = HEAP32[$4 + 1324 >> 2] | 0; //@line 33337
 $230 = $229 + 48 | 0; //@line 33338
 $232 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 33340
 $233 = $229 + 60 | 0; //@line 33341
 $234 = HEAP32[$233 >> 2] | 0; //@line 33342
 if (!$234) {
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(16) | 0; //@line 33345
  _mbed_assert_internal(15679, 15684, 1102); //@line 33346
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 407; //@line 33349
   $236 = $ReallocAsyncCtx12 + 4 | 0; //@line 33350
   HEAP32[$236 >> 2] = $233; //@line 33351
   $237 = $ReallocAsyncCtx12 + 8 | 0; //@line 33352
   HEAP32[$237 >> 2] = $230; //@line 33353
   $238 = $ReallocAsyncCtx12 + 12 | 0; //@line 33354
   HEAP32[$238 >> 2] = $232; //@line 33355
   sp = STACKTOP; //@line 33356
   STACKTOP = sp; //@line 33357
   return;
  }
  ___async_unwind = 0; //@line 33359
  HEAP32[$ReallocAsyncCtx12 >> 2] = 407; //@line 33360
  $236 = $ReallocAsyncCtx12 + 4 | 0; //@line 33361
  HEAP32[$236 >> 2] = $233; //@line 33362
  $237 = $ReallocAsyncCtx12 + 8 | 0; //@line 33363
  HEAP32[$237 >> 2] = $230; //@line 33364
  $238 = $ReallocAsyncCtx12 + 12 | 0; //@line 33365
  HEAP32[$238 >> 2] = $232; //@line 33366
  sp = STACKTOP; //@line 33367
  STACKTOP = sp; //@line 33368
  return;
 } else {
  $239 = HEAP32[$234 >> 2] | 0; //@line 33370
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 33371
  FUNCTION_TABLE_vii[$239 & 31]($230, $232); //@line 33372
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 408; //@line 33375
   sp = STACKTOP; //@line 33376
   STACKTOP = sp; //@line 33377
   return;
  }
  ___async_unwind = 0; //@line 33379
  HEAP32[$ReallocAsyncCtx5 >> 2] = 408; //@line 33380
  sp = STACKTOP; //@line 33381
  STACKTOP = sp; //@line 33382
  return;
 }
}
function __ZN12LoRaWANStack18lora_state_machineEv($0) {
 $0 = $0 | 0;
 var $$029 = 0, $$1 = 0, $1 = 0, $10 = 0, $103 = 0, $106 = 0, $113 = 0, $114 = 0, $166 = 0, $167 = 0, $171 = 0, $173 = 0, $179 = 0, $180 = 0, $184 = 0, $187 = 0, $192 = 0, $195 = 0, $2 = 0, $207 = 0, $208 = 0, $212 = 0, $214 = 0, $221 = 0, $222 = 0, $227 = 0, $230 = 0, $237 = 0, $238 = 0, $242 = 0, $244 = 0, $252 = 0, $253 = 0, $259 = 0, $262 = 0, $3 = 0, $38 = 0, $39 = 0, $4 = 0, $43 = 0, $45 = 0, $5 = 0, $51 = 0, $52 = 0, $56 = 0, $59 = 0, $6 = 0, $7 = 0, $80 = 0, $85 = 0, $86 = 0, $90 = 0, $92 = 0, $98 = 0, $99 = 0, $AsyncCtx = 0, $AsyncCtx101 = 0, $AsyncCtx105 = 0, $AsyncCtx109 = 0, $AsyncCtx113 = 0, $AsyncCtx117 = 0, $AsyncCtx16 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx26 = 0, $AsyncCtx30 = 0, $AsyncCtx33 = 0, $AsyncCtx37 = 0, $AsyncCtx40 = 0, $AsyncCtx44 = 0, $AsyncCtx48 = 0, $AsyncCtx51 = 0, $AsyncCtx55 = 0, $AsyncCtx59 = 0, $AsyncCtx63 = 0, $AsyncCtx67 = 0, $AsyncCtx71 = 0, $AsyncCtx74 = 0, $AsyncCtx78 = 0, $AsyncCtx82 = 0, $AsyncCtx85 = 0, $AsyncCtx88 = 0, $AsyncCtx91 = 0, $AsyncCtx94 = 0, $AsyncCtx97 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, sp = 0;
 sp = STACKTOP; //@line 6773
 STACKTOP = STACKTOP + 176 | 0; //@line 6774
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(176); //@line 6774
 $vararg_buffer13 = sp + 72 | 0; //@line 6775
 $vararg_buffer11 = sp + 64 | 0; //@line 6776
 $vararg_buffer9 = sp + 56 | 0; //@line 6777
 $vararg_buffer7 = sp + 48 | 0; //@line 6778
 $vararg_buffer5 = sp + 40 | 0; //@line 6779
 $vararg_buffer3 = sp + 16 | 0; //@line 6780
 $vararg_buffer1 = sp + 8 | 0; //@line 6781
 $vararg_buffer = sp; //@line 6782
 $1 = sp + 160 | 0; //@line 6783
 $2 = sp + 144 | 0; //@line 6784
 $3 = sp + 128 | 0; //@line 6785
 $4 = sp + 112 | 0; //@line 6786
 $5 = sp + 96 | 0; //@line 6787
 $6 = sp + 80 | 0; //@line 6788
 $7 = $0 + 1876 | 0; //@line 6789
 HEAP32[$vararg_buffer >> 2] = HEAP32[$7 >> 2]; //@line 6791
 _mbed_tracef(16, 12356, 12600, $vararg_buffer); //@line 6792
 switch (HEAP32[$7 >> 2] | 0) {
 case 7:
  {
   $10 = $0 + 4 | 0; //@line 6796
   $AsyncCtx78 = _emscripten_alloc_async_context(32, sp) | 0; //@line 6797
   __ZN7LoRaMac19remove_channel_planEv($10) | 0; //@line 6798
   if (___async) {
    HEAP32[$AsyncCtx78 >> 2] = 195; //@line 6801
    HEAP32[$AsyncCtx78 + 4 >> 2] = $1; //@line 6803
    HEAP32[$AsyncCtx78 + 8 >> 2] = $10; //@line 6805
    HEAP32[$AsyncCtx78 + 12 >> 2] = $1; //@line 6807
    HEAP32[$AsyncCtx78 + 16 >> 2] = $0; //@line 6809
    HEAP32[$AsyncCtx78 + 20 >> 2] = $vararg_buffer1; //@line 6811
    HEAP32[$AsyncCtx78 + 24 >> 2] = $vararg_buffer1; //@line 6813
    HEAP32[$AsyncCtx78 + 28 >> 2] = $2; //@line 6815
    sp = STACKTOP; //@line 6816
    STACKTOP = sp; //@line 6817
    return 0; //@line 6817
   }
   _emscripten_free_async_context($AsyncCtx78 | 0); //@line 6819
   $AsyncCtx51 = _emscripten_alloc_async_context(32, sp) | 0; //@line 6820
   __ZN7LoRaMac10disconnectEv($10); //@line 6821
   if (___async) {
    HEAP32[$AsyncCtx51 >> 2] = 196; //@line 6824
    HEAP32[$AsyncCtx51 + 4 >> 2] = $1; //@line 6826
    HEAP32[$AsyncCtx51 + 8 >> 2] = $10; //@line 6828
    HEAP32[$AsyncCtx51 + 12 >> 2] = $0; //@line 6830
    HEAP32[$AsyncCtx51 + 16 >> 2] = $vararg_buffer1; //@line 6832
    HEAP32[$AsyncCtx51 + 20 >> 2] = $vararg_buffer1; //@line 6834
    HEAP32[$AsyncCtx51 + 24 >> 2] = $1; //@line 6836
    HEAP32[$AsyncCtx51 + 28 >> 2] = $2; //@line 6838
    sp = STACKTOP; //@line 6839
    STACKTOP = sp; //@line 6840
    return 0; //@line 6840
   }
   _emscripten_free_async_context($AsyncCtx51 | 0); //@line 6842
   HEAP32[$1 >> 2] = 1; //@line 6843
   HEAP8[$1 + 4 >> 0] = 0; //@line 6845
   $AsyncCtx74 = _emscripten_alloc_async_context(24, sp) | 0; //@line 6846
   __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($10, $1) | 0; //@line 6847
   if (___async) {
    HEAP32[$AsyncCtx74 >> 2] = 197; //@line 6850
    HEAP32[$AsyncCtx74 + 4 >> 2] = $0; //@line 6852
    HEAP32[$AsyncCtx74 + 8 >> 2] = $vararg_buffer1; //@line 6854
    HEAP32[$AsyncCtx74 + 12 >> 2] = $vararg_buffer1; //@line 6856
    HEAP32[$AsyncCtx74 + 16 >> 2] = $1; //@line 6858
    HEAP32[$AsyncCtx74 + 20 >> 2] = $2; //@line 6860
    sp = STACKTOP; //@line 6861
    STACKTOP = sp; //@line 6862
    return 0; //@line 6862
   }
   _emscripten_free_async_context($AsyncCtx74 | 0); //@line 6864
   HEAP8[$0 + 1964 >> 0] = 0; //@line 6867
   HEAP32[$0 + 2256 >> 2] = 0; //@line 6869
   HEAP8[$0 + 2236 >> 0] = 0; //@line 6871
   HEAP16[$0 + 2282 >> 1] = 0; //@line 6873
   HEAP16[$0 + 2260 >> 1] = 0; //@line 6875
   HEAP8[$0 + 1932 >> 0] = 0; //@line 6877
   _memset($0 + 1975 | 0, 0, 259) | 0; //@line 6878
   _mbed_tracef(16, 12356, 12622, $vararg_buffer1); //@line 6879
   $38 = $0 + 1892 | 0; //@line 6880
   $39 = HEAP32[$38 >> 2] | 0; //@line 6881
   if (!$39) {
    $$1 = -1011; //@line 6884
    STACKTOP = sp; //@line 6885
    return $$1 | 0; //@line 6885
   }
   $43 = HEAP32[$0 + 2288 >> 2] | 0; //@line 6889
   $45 = HEAP32[$39 + 4 >> 2] | 0; //@line 6891
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 6892
   FUNCTION_TABLE_vii[$45 & 31]($2, $0 + 1880 | 0); //@line 6893
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 198; //@line 6896
    HEAP32[$AsyncCtx + 4 >> 2] = $38; //@line 6898
    HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 6900
    HEAP32[$AsyncCtx + 12 >> 2] = $43; //@line 6902
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 6904
    HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 6906
    sp = STACKTOP; //@line 6907
    STACKTOP = sp; //@line 6908
    return 0; //@line 6908
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 6910
   $51 = $2 + 12 | 0; //@line 6912
   HEAP32[$51 >> 2] = HEAP32[$38 >> 2]; //@line 6913
   $AsyncCtx97 = _emscripten_alloc_async_context(16, sp) | 0; //@line 6914
   $52 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($43, $2, 1) | 0; //@line 6915
   if (___async) {
    HEAP32[$AsyncCtx97 >> 2] = 199; //@line 6918
    HEAP32[$AsyncCtx97 + 4 >> 2] = $51; //@line 6920
    HEAP32[$AsyncCtx97 + 8 >> 2] = $2; //@line 6922
    HEAP32[$AsyncCtx97 + 12 >> 2] = $1; //@line 6924
    sp = STACKTOP; //@line 6925
    STACKTOP = sp; //@line 6926
    return 0; //@line 6926
   }
   _emscripten_free_async_context($AsyncCtx97 | 0); //@line 6928
   $56 = HEAP32[$51 >> 2] | 0; //@line 6929
   do {
    if ($56 | 0) {
     $59 = HEAP32[$56 + 8 >> 2] | 0; //@line 6934
     $AsyncCtx16 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6935
     FUNCTION_TABLE_vi[$59 & 1023]($2); //@line 6936
     if (___async) {
      HEAP32[$AsyncCtx16 >> 2] = 200; //@line 6939
      HEAP32[$AsyncCtx16 + 4 >> 2] = $52; //@line 6941
      HEAP32[$AsyncCtx16 + 8 >> 2] = $1; //@line 6943
      sp = STACKTOP; //@line 6944
      STACKTOP = sp; //@line 6945
      return 0; //@line 6945
     } else {
      _emscripten_free_async_context($AsyncCtx16 | 0); //@line 6947
      break;
     }
    }
   } while (0);
   if ($52 | 0) {
    $$1 = -1011; //@line 6954
    STACKTOP = sp; //@line 6955
    return $$1 | 0; //@line 6955
   }
   $AsyncCtx117 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6957
   _mbed_assert_internal(13612, 12396, 1135); //@line 6958
   if (___async) {
    HEAP32[$AsyncCtx117 >> 2] = 201; //@line 6961
    HEAP32[$AsyncCtx117 + 4 >> 2] = $1; //@line 6963
    sp = STACKTOP; //@line 6964
    STACKTOP = sp; //@line 6965
    return 0; //@line 6965
   }
   _emscripten_free_async_context($AsyncCtx117 | 0); //@line 6967
   $$1 = -1011; //@line 6968
   STACKTOP = sp; //@line 6969
   return $$1 | 0; //@line 6969
  }
 case 1:
  {
   $$1 = 0; //@line 6973
   STACKTOP = sp; //@line 6974
   return $$1 | 0; //@line 6974
  }
 case 2:
  {
   if (HEAP8[$0 + 1936 >> 0] | 0) {
    $$1 = -1003; //@line 6982
    STACKTOP = sp; //@line 6983
    return $$1 | 0; //@line 6983
   }
   _mbed_tracef(16, 12356, 12659, $vararg_buffer3); //@line 6985
   HEAP32[$vararg_buffer3 >> 2] = 0; //@line 6986
   HEAP32[$vararg_buffer3 + 4 >> 2] = HEAP32[$0 + 1940 >> 2]; //@line 6990
   HEAP32[$vararg_buffer3 + 8 >> 2] = HEAP32[$0 + 1944 >> 2]; //@line 6994
   HEAP32[$vararg_buffer3 + 12 >> 2] = HEAP32[$0 + 1948 >> 2]; //@line 6998
   HEAP8[$vararg_buffer3 + 16 >> 0] = HEAP8[$0 + 1952 >> 0] | 0; //@line 7002
   $AsyncCtx82 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7004
   $80 = __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t($0 + 4 | 0, $vararg_buffer3) | 0; //@line 7005
   if (___async) {
    HEAP32[$AsyncCtx82 >> 2] = 202; //@line 7008
    HEAP32[$AsyncCtx82 + 4 >> 2] = $vararg_buffer3; //@line 7010
    HEAP32[$AsyncCtx82 + 8 >> 2] = $1; //@line 7012
    sp = STACKTOP; //@line 7013
    STACKTOP = sp; //@line 7014
    return 0; //@line 7014
   }
   _emscripten_free_async_context($AsyncCtx82 | 0); //@line 7016
   $$1 = ($80 | 0) == 0 ? -1016 : $80; //@line 7019
   STACKTOP = sp; //@line 7020
   return $$1 | 0; //@line 7020
  }
 case 4:
  {
   _mbed_tracef(16, 12356, 12679, $vararg_buffer5); //@line 7024
   HEAP8[$0 + 1932 >> 0] = 1; //@line 7026
   $85 = $0 + 1892 | 0; //@line 7027
   $86 = HEAP32[$85 >> 2] | 0; //@line 7028
   if (!$86) {
    $$1 = 0; //@line 7031
    STACKTOP = sp; //@line 7032
    return $$1 | 0; //@line 7032
   }
   $90 = HEAP32[$0 + 2288 >> 2] | 0; //@line 7036
   $92 = HEAP32[$86 + 4 >> 2] | 0; //@line 7038
   $AsyncCtx19 = _emscripten_alloc_async_context(24, sp) | 0; //@line 7039
   FUNCTION_TABLE_vii[$92 & 31]($3, $0 + 1880 | 0); //@line 7040
   if (___async) {
    HEAP32[$AsyncCtx19 >> 2] = 203; //@line 7043
    HEAP32[$AsyncCtx19 + 4 >> 2] = $85; //@line 7045
    HEAP32[$AsyncCtx19 + 8 >> 2] = $3; //@line 7047
    HEAP32[$AsyncCtx19 + 12 >> 2] = $90; //@line 7049
    HEAP32[$AsyncCtx19 + 16 >> 2] = $3; //@line 7051
    HEAP32[$AsyncCtx19 + 20 >> 2] = $1; //@line 7053
    sp = STACKTOP; //@line 7054
    STACKTOP = sp; //@line 7055
    return 0; //@line 7055
   }
   _emscripten_free_async_context($AsyncCtx19 | 0); //@line 7057
   $98 = $3 + 12 | 0; //@line 7059
   HEAP32[$98 >> 2] = HEAP32[$85 >> 2]; //@line 7060
   $AsyncCtx94 = _emscripten_alloc_async_context(16, sp) | 0; //@line 7061
   $99 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($90, $3, 0) | 0; //@line 7062
   if (___async) {
    HEAP32[$AsyncCtx94 >> 2] = 204; //@line 7065
    HEAP32[$AsyncCtx94 + 4 >> 2] = $98; //@line 7067
    HEAP32[$AsyncCtx94 + 8 >> 2] = $3; //@line 7069
    HEAP32[$AsyncCtx94 + 12 >> 2] = $1; //@line 7071
    sp = STACKTOP; //@line 7072
    STACKTOP = sp; //@line 7073
    return 0; //@line 7073
   }
   _emscripten_free_async_context($AsyncCtx94 | 0); //@line 7075
   $103 = HEAP32[$98 >> 2] | 0; //@line 7076
   do {
    if ($103 | 0) {
     $106 = HEAP32[$103 + 8 >> 2] | 0; //@line 7081
     $AsyncCtx23 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7082
     FUNCTION_TABLE_vi[$106 & 1023]($3); //@line 7083
     if (___async) {
      HEAP32[$AsyncCtx23 >> 2] = 205; //@line 7086
      HEAP32[$AsyncCtx23 + 4 >> 2] = $99; //@line 7088
      HEAP32[$AsyncCtx23 + 8 >> 2] = $1; //@line 7090
      sp = STACKTOP; //@line 7091
      STACKTOP = sp; //@line 7092
      return 0; //@line 7092
     } else {
      _emscripten_free_async_context($AsyncCtx23 | 0); //@line 7094
      break;
     }
    }
   } while (0);
   if ($99 | 0) {
    $$1 = 0; //@line 7101
    STACKTOP = sp; //@line 7102
    return $$1 | 0; //@line 7102
   }
   $AsyncCtx113 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7104
   _mbed_assert_internal(13612, 12396, 1180); //@line 7105
   if (___async) {
    HEAP32[$AsyncCtx113 >> 2] = 206; //@line 7108
    HEAP32[$AsyncCtx113 + 4 >> 2] = $1; //@line 7110
    sp = STACKTOP; //@line 7111
    STACKTOP = sp; //@line 7112
    return 0; //@line 7112
   }
   _emscripten_free_async_context($AsyncCtx113 | 0); //@line 7114
   $$1 = 0; //@line 7115
   STACKTOP = sp; //@line 7116
   return $$1 | 0; //@line 7116
  }
 case 3:
  {
   HEAP32[$1 >> 2] = 3; //@line 7120
   $113 = $1 + 4 | 0; //@line 7123
   HEAP32[$113 >> 2] = HEAP32[$0 + 1940 >> 2]; //@line 7124
   $114 = $0 + 4 | 0; //@line 7125
   $AsyncCtx71 = _emscripten_alloc_async_context(44, sp) | 0; //@line 7126
   __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($114, $1) | 0; //@line 7127
   if (___async) {
    HEAP32[$AsyncCtx71 >> 2] = 207; //@line 7130
    HEAP32[$AsyncCtx71 + 4 >> 2] = $0; //@line 7132
    HEAP32[$AsyncCtx71 + 8 >> 2] = $4; //@line 7134
    HEAP32[$AsyncCtx71 + 12 >> 2] = $vararg_buffer7; //@line 7136
    HEAP32[$AsyncCtx71 + 16 >> 2] = $vararg_buffer7; //@line 7138
    HEAP32[$AsyncCtx71 + 20 >> 2] = $1; //@line 7140
    HEAP32[$AsyncCtx71 + 24 >> 2] = $1; //@line 7142
    HEAP32[$AsyncCtx71 + 28 >> 2] = $113; //@line 7144
    HEAP32[$AsyncCtx71 + 32 >> 2] = $114; //@line 7146
    HEAP32[$AsyncCtx71 + 36 >> 2] = $1; //@line 7148
    HEAP32[$AsyncCtx71 + 40 >> 2] = $113; //@line 7150
    sp = STACKTOP; //@line 7151
    STACKTOP = sp; //@line 7152
    return 0; //@line 7152
   }
   _emscripten_free_async_context($AsyncCtx71 | 0); //@line 7154
   HEAP32[$1 >> 2] = 4; //@line 7155
   HEAP32[$113 >> 2] = HEAP32[$0 + 1944 >> 2]; //@line 7158
   $AsyncCtx67 = _emscripten_alloc_async_context(44, sp) | 0; //@line 7159
   __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($114, $1) | 0; //@line 7160
   if (___async) {
    HEAP32[$AsyncCtx67 >> 2] = 208; //@line 7163
    HEAP32[$AsyncCtx67 + 4 >> 2] = $0; //@line 7165
    HEAP32[$AsyncCtx67 + 8 >> 2] = $4; //@line 7167
    HEAP32[$AsyncCtx67 + 12 >> 2] = $vararg_buffer7; //@line 7169
    HEAP32[$AsyncCtx67 + 16 >> 2] = $vararg_buffer7; //@line 7171
    HEAP32[$AsyncCtx67 + 20 >> 2] = $1; //@line 7173
    HEAP32[$AsyncCtx67 + 24 >> 2] = $1; //@line 7175
    HEAP32[$AsyncCtx67 + 28 >> 2] = $113; //@line 7177
    HEAP32[$AsyncCtx67 + 32 >> 2] = $114; //@line 7179
    HEAP32[$AsyncCtx67 + 36 >> 2] = $1; //@line 7181
    HEAP32[$AsyncCtx67 + 40 >> 2] = $113; //@line 7183
    sp = STACKTOP; //@line 7184
    STACKTOP = sp; //@line 7185
    return 0; //@line 7185
   }
   _emscripten_free_async_context($AsyncCtx67 | 0); //@line 7187
   HEAP32[$1 >> 2] = 5; //@line 7188
   HEAP32[$113 >> 2] = HEAP32[$0 + 1948 >> 2]; //@line 7191
   $AsyncCtx63 = _emscripten_alloc_async_context(44, sp) | 0; //@line 7192
   __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($114, $1) | 0; //@line 7193
   if (___async) {
    HEAP32[$AsyncCtx63 >> 2] = 209; //@line 7196
    HEAP32[$AsyncCtx63 + 4 >> 2] = $0; //@line 7198
    HEAP32[$AsyncCtx63 + 8 >> 2] = $4; //@line 7200
    HEAP32[$AsyncCtx63 + 12 >> 2] = $vararg_buffer7; //@line 7202
    HEAP32[$AsyncCtx63 + 16 >> 2] = $vararg_buffer7; //@line 7204
    HEAP32[$AsyncCtx63 + 20 >> 2] = $1; //@line 7206
    HEAP32[$AsyncCtx63 + 24 >> 2] = $1; //@line 7208
    HEAP32[$AsyncCtx63 + 28 >> 2] = $113; //@line 7210
    HEAP32[$AsyncCtx63 + 32 >> 2] = $114; //@line 7212
    HEAP32[$AsyncCtx63 + 36 >> 2] = $1; //@line 7214
    HEAP32[$AsyncCtx63 + 40 >> 2] = $113; //@line 7216
    sp = STACKTOP; //@line 7217
    STACKTOP = sp; //@line 7218
    return 0; //@line 7218
   }
   _emscripten_free_async_context($AsyncCtx63 | 0); //@line 7220
   HEAP32[$1 >> 2] = 6; //@line 7221
   HEAP32[$113 >> 2] = HEAP32[$0 + 1952 >> 2]; //@line 7224
   $AsyncCtx59 = _emscripten_alloc_async_context(40, sp) | 0; //@line 7225
   __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($114, $1) | 0; //@line 7226
   if (___async) {
    HEAP32[$AsyncCtx59 >> 2] = 210; //@line 7229
    HEAP32[$AsyncCtx59 + 4 >> 2] = $1; //@line 7231
    HEAP32[$AsyncCtx59 + 8 >> 2] = $113; //@line 7233
    HEAP32[$AsyncCtx59 + 12 >> 2] = $114; //@line 7235
    HEAP32[$AsyncCtx59 + 16 >> 2] = $1; //@line 7237
    HEAP32[$AsyncCtx59 + 20 >> 2] = $vararg_buffer7; //@line 7239
    HEAP32[$AsyncCtx59 + 24 >> 2] = $vararg_buffer7; //@line 7241
    HEAP32[$AsyncCtx59 + 28 >> 2] = $0; //@line 7243
    HEAP32[$AsyncCtx59 + 32 >> 2] = $1; //@line 7245
    HEAP32[$AsyncCtx59 + 36 >> 2] = $4; //@line 7247
    sp = STACKTOP; //@line 7248
    STACKTOP = sp; //@line 7249
    return 0; //@line 7249
   }
   _emscripten_free_async_context($AsyncCtx59 | 0); //@line 7251
   HEAP32[$1 >> 2] = 1; //@line 7252
   HEAP8[$113 >> 0] = 1; //@line 7253
   $AsyncCtx55 = _emscripten_alloc_async_context(24, sp) | 0; //@line 7254
   __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($114, $1) | 0; //@line 7255
   if (___async) {
    HEAP32[$AsyncCtx55 >> 2] = 211; //@line 7258
    HEAP32[$AsyncCtx55 + 4 >> 2] = $vararg_buffer7; //@line 7260
    HEAP32[$AsyncCtx55 + 8 >> 2] = $vararg_buffer7; //@line 7262
    HEAP32[$AsyncCtx55 + 12 >> 2] = $0; //@line 7264
    HEAP32[$AsyncCtx55 + 16 >> 2] = $1; //@line 7266
    HEAP32[$AsyncCtx55 + 20 >> 2] = $4; //@line 7268
    sp = STACKTOP; //@line 7269
    STACKTOP = sp; //@line 7270
    return 0; //@line 7270
   }
   _emscripten_free_async_context($AsyncCtx55 | 0); //@line 7272
   _mbed_tracef(16, 12356, 12688, $vararg_buffer7); //@line 7273
   HEAP8[$0 + 1932 >> 0] = 1; //@line 7275
   $166 = $0 + 1892 | 0; //@line 7276
   $167 = HEAP32[$166 >> 2] | 0; //@line 7277
   if (!$167) {
    $$1 = 0; //@line 7280
    STACKTOP = sp; //@line 7281
    return $$1 | 0; //@line 7281
   }
   $171 = HEAP32[$0 + 2288 >> 2] | 0; //@line 7285
   $173 = HEAP32[$167 + 4 >> 2] | 0; //@line 7287
   $AsyncCtx26 = _emscripten_alloc_async_context(24, sp) | 0; //@line 7288
   FUNCTION_TABLE_vii[$173 & 31]($4, $0 + 1880 | 0); //@line 7289
   if (___async) {
    HEAP32[$AsyncCtx26 >> 2] = 212; //@line 7292
    HEAP32[$AsyncCtx26 + 4 >> 2] = $166; //@line 7294
    HEAP32[$AsyncCtx26 + 8 >> 2] = $4; //@line 7296
    HEAP32[$AsyncCtx26 + 12 >> 2] = $171; //@line 7298
    HEAP32[$AsyncCtx26 + 16 >> 2] = $4; //@line 7300
    HEAP32[$AsyncCtx26 + 20 >> 2] = $1; //@line 7302
    sp = STACKTOP; //@line 7303
    STACKTOP = sp; //@line 7304
    return 0; //@line 7304
   }
   _emscripten_free_async_context($AsyncCtx26 | 0); //@line 7306
   $179 = $4 + 12 | 0; //@line 7308
   HEAP32[$179 >> 2] = HEAP32[$166 >> 2]; //@line 7309
   $AsyncCtx91 = _emscripten_alloc_async_context(16, sp) | 0; //@line 7310
   $180 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($171, $4, 0) | 0; //@line 7311
   if (___async) {
    HEAP32[$AsyncCtx91 >> 2] = 213; //@line 7314
    HEAP32[$AsyncCtx91 + 4 >> 2] = $179; //@line 7316
    HEAP32[$AsyncCtx91 + 8 >> 2] = $4; //@line 7318
    HEAP32[$AsyncCtx91 + 12 >> 2] = $1; //@line 7320
    sp = STACKTOP; //@line 7321
    STACKTOP = sp; //@line 7322
    return 0; //@line 7322
   }
   _emscripten_free_async_context($AsyncCtx91 | 0); //@line 7324
   $184 = HEAP32[$179 >> 2] | 0; //@line 7325
   do {
    if ($184 | 0) {
     $187 = HEAP32[$184 + 8 >> 2] | 0; //@line 7330
     $AsyncCtx30 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7331
     FUNCTION_TABLE_vi[$187 & 1023]($4); //@line 7332
     if (___async) {
      HEAP32[$AsyncCtx30 >> 2] = 214; //@line 7335
      HEAP32[$AsyncCtx30 + 4 >> 2] = $180; //@line 7337
      HEAP32[$AsyncCtx30 + 8 >> 2] = $1; //@line 7339
      sp = STACKTOP; //@line 7340
      STACKTOP = sp; //@line 7341
      return 0; //@line 7341
     } else {
      _emscripten_free_async_context($AsyncCtx30 | 0); //@line 7343
      break;
     }
    }
   } while (0);
   if ($180 | 0) {
    $$1 = 0; //@line 7350
    STACKTOP = sp; //@line 7351
    return $$1 | 0; //@line 7351
   }
   $AsyncCtx109 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7353
   _mbed_assert_internal(13612, 12396, 1217); //@line 7354
   if (___async) {
    HEAP32[$AsyncCtx109 >> 2] = 215; //@line 7357
    HEAP32[$AsyncCtx109 + 4 >> 2] = $1; //@line 7359
    sp = STACKTOP; //@line 7360
    STACKTOP = sp; //@line 7361
    return 0; //@line 7361
   }
   _emscripten_free_async_context($AsyncCtx109 | 0); //@line 7363
   $$1 = 0; //@line 7364
   STACKTOP = sp; //@line 7365
   return $$1 | 0; //@line 7365
  }
 case 5:
  {
   $192 = $0 + 1964 | 0; //@line 7369
   L108 : do {
    if (!(HEAP8[$192 >> 0] | 0)) {
     HEAP8[$192 >> 0] = 1; //@line 7374
     $AsyncCtx48 = _emscripten_alloc_async_context(48, sp) | 0; //@line 7375
     $195 = __ZN12LoRaWANStack17send_frame_to_macEv($0) | 0; //@line 7376
     if (___async) {
      HEAP32[$AsyncCtx48 >> 2] = 216; //@line 7379
      HEAP32[$AsyncCtx48 + 4 >> 2] = $0; //@line 7381
      HEAP32[$AsyncCtx48 + 8 >> 2] = $6; //@line 7383
      HEAP32[$AsyncCtx48 + 12 >> 2] = $7; //@line 7385
      HEAP32[$AsyncCtx48 + 16 >> 2] = $1; //@line 7387
      HEAP32[$AsyncCtx48 + 20 >> 2] = $vararg_buffer13; //@line 7389
      HEAP32[$AsyncCtx48 + 24 >> 2] = $vararg_buffer13; //@line 7391
      HEAP32[$AsyncCtx48 + 28 >> 2] = $5; //@line 7393
      HEAP32[$AsyncCtx48 + 32 >> 2] = $vararg_buffer9; //@line 7395
      HEAP32[$AsyncCtx48 + 36 >> 2] = $vararg_buffer9; //@line 7397
      HEAP32[$AsyncCtx48 + 40 >> 2] = $vararg_buffer11; //@line 7399
      HEAP32[$AsyncCtx48 + 44 >> 2] = $vararg_buffer11; //@line 7401
      sp = STACKTOP; //@line 7402
      STACKTOP = sp; //@line 7403
      return 0; //@line 7403
     }
     _emscripten_free_async_context($AsyncCtx48 | 0); //@line 7405
     switch ($195 | 0) {
     case 0:
      {
       _mbed_tracef(16, 12356, 12707, $vararg_buffer9); //@line 7408
       $$029 = 0; //@line 7409
       break L108;
       break;
      }
     case -1014:
      {
       _mbed_tracef(2, 12356, 12731, $vararg_buffer11); //@line 7414
       $207 = $0 + 1892 | 0; //@line 7415
       $208 = HEAP32[$207 >> 2] | 0; //@line 7416
       if (!$208) {
        $$029 = -1014; //@line 7419
        break L108;
       }
       $212 = HEAP32[$0 + 2288 >> 2] | 0; //@line 7424
       $214 = HEAP32[$208 + 4 >> 2] | 0; //@line 7426
       $AsyncCtx33 = _emscripten_alloc_async_context(28, sp) | 0; //@line 7427
       FUNCTION_TABLE_vii[$214 & 31]($5, $0 + 1880 | 0); //@line 7428
       if (___async) {
        HEAP32[$AsyncCtx33 >> 2] = 217; //@line 7431
        HEAP32[$AsyncCtx33 + 4 >> 2] = $207; //@line 7433
        HEAP32[$AsyncCtx33 + 8 >> 2] = $5; //@line 7435
        HEAP32[$AsyncCtx33 + 12 >> 2] = $212; //@line 7437
        HEAP32[$AsyncCtx33 + 16 >> 2] = $5; //@line 7439
        HEAP32[$AsyncCtx33 + 20 >> 2] = $7; //@line 7441
        HEAP32[$AsyncCtx33 + 24 >> 2] = $1; //@line 7443
        sp = STACKTOP; //@line 7444
        STACKTOP = sp; //@line 7445
        return 0; //@line 7445
       }
       _emscripten_free_async_context($AsyncCtx33 | 0); //@line 7447
       $221 = $5 + 12 | 0; //@line 7449
       HEAP32[$221 >> 2] = HEAP32[$207 >> 2]; //@line 7450
       $AsyncCtx88 = _emscripten_alloc_async_context(20, sp) | 0; //@line 7451
       $222 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($212, $5, 5) | 0; //@line 7452
       if (___async) {
        HEAP32[$AsyncCtx88 >> 2] = 218; //@line 7455
        HEAP32[$AsyncCtx88 + 4 >> 2] = $221; //@line 7457
        HEAP32[$AsyncCtx88 + 8 >> 2] = $5; //@line 7459
        HEAP32[$AsyncCtx88 + 12 >> 2] = $7; //@line 7461
        HEAP32[$AsyncCtx88 + 16 >> 2] = $1; //@line 7463
        sp = STACKTOP; //@line 7464
        STACKTOP = sp; //@line 7465
        return 0; //@line 7465
       }
       _emscripten_free_async_context($AsyncCtx88 | 0); //@line 7467
       $227 = HEAP32[$221 >> 2] | 0; //@line 7468
       do {
        if ($227 | 0) {
         $230 = HEAP32[$227 + 8 >> 2] | 0; //@line 7473
         $AsyncCtx37 = _emscripten_alloc_async_context(16, sp) | 0; //@line 7474
         FUNCTION_TABLE_vi[$230 & 1023]($5); //@line 7475
         if (___async) {
          HEAP32[$AsyncCtx37 >> 2] = 219; //@line 7478
          HEAP32[$AsyncCtx37 + 4 >> 2] = $222; //@line 7480
          HEAP32[$AsyncCtx37 + 8 >> 2] = $7; //@line 7482
          HEAP32[$AsyncCtx37 + 12 >> 2] = $1; //@line 7484
          sp = STACKTOP; //@line 7485
          STACKTOP = sp; //@line 7486
          return 0; //@line 7486
         } else {
          _emscripten_free_async_context($AsyncCtx37 | 0); //@line 7488
          break;
         }
        }
       } while (0);
       if ($222 | 0) {
        $$029 = -1014; //@line 7495
        break L108;
       }
       $AsyncCtx105 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7498
       _mbed_assert_internal(13612, 12396, 1237); //@line 7499
       if (___async) {
        HEAP32[$AsyncCtx105 >> 2] = 220; //@line 7502
        HEAP32[$AsyncCtx105 + 4 >> 2] = $7; //@line 7504
        HEAP32[$AsyncCtx105 + 8 >> 2] = $1; //@line 7506
        sp = STACKTOP; //@line 7507
        STACKTOP = sp; //@line 7508
        return 0; //@line 7508
       } else {
        _emscripten_free_async_context($AsyncCtx105 | 0); //@line 7510
        $$029 = -1014; //@line 7511
        break L108;
       }
       break;
      }
     default:
      {
       _mbed_tracef(2, 12356, 12766, $vararg_buffer13); //@line 7517
       $237 = $0 + 1892 | 0; //@line 7518
       $238 = HEAP32[$237 >> 2] | 0; //@line 7519
       if (!$238) {
        $$029 = $195; //@line 7522
        break L108;
       }
       $242 = HEAP32[$0 + 2288 >> 2] | 0; //@line 7527
       $244 = HEAP32[$238 + 4 >> 2] | 0; //@line 7529
       $AsyncCtx40 = _emscripten_alloc_async_context(32, sp) | 0; //@line 7530
       FUNCTION_TABLE_vii[$244 & 31]($6, $0 + 1880 | 0); //@line 7531
       if (___async) {
        HEAP32[$AsyncCtx40 >> 2] = 221; //@line 7534
        HEAP32[$AsyncCtx40 + 4 >> 2] = $237; //@line 7536
        HEAP32[$AsyncCtx40 + 8 >> 2] = $6; //@line 7538
        HEAP32[$AsyncCtx40 + 12 >> 2] = $242; //@line 7540
        HEAP32[$AsyncCtx40 + 16 >> 2] = $6; //@line 7542
        HEAP32[$AsyncCtx40 + 20 >> 2] = $195; //@line 7544
        HEAP32[$AsyncCtx40 + 24 >> 2] = $7; //@line 7546
        HEAP32[$AsyncCtx40 + 28 >> 2] = $1; //@line 7548
        sp = STACKTOP; //@line 7549
        STACKTOP = sp; //@line 7550
        return 0; //@line 7550
       }
       _emscripten_free_async_context($AsyncCtx40 | 0); //@line 7552
       $252 = $6 + 12 | 0; //@line 7554
       HEAP32[$252 >> 2] = HEAP32[$237 >> 2]; //@line 7555
       $AsyncCtx85 = _emscripten_alloc_async_context(24, sp) | 0; //@line 7556
       $253 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($242, $6, 6) | 0; //@line 7557
       if (___async) {
        HEAP32[$AsyncCtx85 >> 2] = 222; //@line 7560
        HEAP32[$AsyncCtx85 + 4 >> 2] = $252; //@line 7562
        HEAP32[$AsyncCtx85 + 8 >> 2] = $6; //@line 7564
        HEAP32[$AsyncCtx85 + 12 >> 2] = $195; //@line 7566
        HEAP32[$AsyncCtx85 + 16 >> 2] = $7; //@line 7568
        HEAP32[$AsyncCtx85 + 20 >> 2] = $1; //@line 7570
        sp = STACKTOP; //@line 7571
        STACKTOP = sp; //@line 7572
        return 0; //@line 7572
       }
       _emscripten_free_async_context($AsyncCtx85 | 0); //@line 7574
       $259 = HEAP32[$252 >> 2] | 0; //@line 7575
       do {
        if ($259 | 0) {
         $262 = HEAP32[$259 + 8 >> 2] | 0; //@line 7580
         $AsyncCtx44 = _emscripten_alloc_async_context(20, sp) | 0; //@line 7581
         FUNCTION_TABLE_vi[$262 & 1023]($6); //@line 7582
         if (___async) {
          HEAP32[$AsyncCtx44 >> 2] = 223; //@line 7585
          HEAP32[$AsyncCtx44 + 4 >> 2] = $253; //@line 7587
          HEAP32[$AsyncCtx44 + 8 >> 2] = $195; //@line 7589
          HEAP32[$AsyncCtx44 + 12 >> 2] = $7; //@line 7591
          HEAP32[$AsyncCtx44 + 16 >> 2] = $1; //@line 7593
          sp = STACKTOP; //@line 7594
          STACKTOP = sp; //@line 7595
          return 0; //@line 7595
         } else {
          _emscripten_free_async_context($AsyncCtx44 | 0); //@line 7597
          break;
         }
        }
       } while (0);
       if ($253 | 0) {
        $$029 = $195; //@line 7604
        break L108;
       }
       $AsyncCtx101 = _emscripten_alloc_async_context(16, sp) | 0; //@line 7607
       _mbed_assert_internal(13612, 12396, 1245); //@line 7608
       if (___async) {
        HEAP32[$AsyncCtx101 >> 2] = 224; //@line 7611
        HEAP32[$AsyncCtx101 + 4 >> 2] = $195; //@line 7613
        HEAP32[$AsyncCtx101 + 8 >> 2] = $7; //@line 7615
        HEAP32[$AsyncCtx101 + 12 >> 2] = $1; //@line 7617
        sp = STACKTOP; //@line 7618
        STACKTOP = sp; //@line 7619
        return 0; //@line 7619
       } else {
        _emscripten_free_async_context($AsyncCtx101 | 0); //@line 7621
        $$029 = $195; //@line 7622
        break L108;
       }
      }
     }
    } else {
     $$029 = 0; //@line 7628
    }
   } while (0);
   HEAP32[$7 >> 2] = 6; //@line 7631
   $$1 = $$029; //@line 7632
   STACKTOP = sp; //@line 7633
   return $$1 | 0; //@line 7633
  }
 case 6:
  {
   $$1 = -1018; //@line 7637
   STACKTOP = sp; //@line 7638
   return $$1 | 0; //@line 7638
  }
 case 0:
  {
   $$1 = -1011; //@line 7642
   STACKTOP = sp; //@line 7643
   return $$1 | 0; //@line 7643
  }
 default:
  {
   $$1 = -1002; //@line 7647
   STACKTOP = sp; //@line 7648
   return $$1 | 0; //@line 7648
  }
 }
 return 0; //@line 7651
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv($0) {
 $0 = $0 | 0;
 var $$byval_copy85 = 0, $$pre20 = 0, $1 = 0, $107 = 0, $112 = 0, $118 = 0, $124 = 0, $131 = 0, $132 = 0, $15 = 0, $16 = 0, $161 = 0, $172 = 0, $176 = 0, $180 = 0, $185 = 0, $19 = 0, $191 = 0, $192 = 0, $197 = 0, $2 = 0, $201 = 0, $204 = 0, $220 = 0, $228 = 0, $232 = 0, $238 = 0, $241 = 0, $244 = 0, $25 = 0, $260 = 0, $263 = 0, $269 = 0, $272 = 0, $275 = 0, $277 = 0, $278 = 0, $283 = 0, $285 = 0, $286 = 0, $287 = 0, $299 = 0, $3 = 0, $300 = 0, $309 = 0, $313 = 0, $314 = 0, $316 = 0, $317 = 0, $318 = 0, $330 = 0, $331 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $354 = 0, $356 = 0, $361 = 0, $362 = 0, $372 = 0, $375 = 0, $376 = 0, $378 = 0, $379 = 0, $380 = 0, $387 = 0, $388 = 0, $39 = 0, $391 = 0, $392 = 0, $394 = 0, $398 = 0, $399 = 0, $4 = 0, $401 = 0, $402 = 0, $403 = 0, $408 = 0, $409 = 0, $47 = 0, $50 = 0, $55 = 0, $59 = 0, $60 = 0, $80 = 0, $81 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx21 = 0, $AsyncCtx25 = 0, $AsyncCtx29 = 0, $AsyncCtx33 = 0, $AsyncCtx37 = 0, $AsyncCtx4 = 0, $AsyncCtx41 = 0, $AsyncCtx45 = 0, $AsyncCtx49 = 0, $AsyncCtx53 = 0, $AsyncCtx57 = 0, $AsyncCtx61 = 0, $AsyncCtx65 = 0, $AsyncCtx7 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 13797
 STACKTOP = STACKTOP + 32 | 0; //@line 13798
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 13798
 $$byval_copy85 = sp + 24 | 0; //@line 13799
 $vararg_buffer1 = sp + 8 | 0; //@line 13800
 $vararg_buffer = sp; //@line 13801
 $1 = sp + 16 | 0; //@line 13802
 $2 = $0 + 356 | 0; //@line 13803
 $3 = HEAP32[$2 >> 2] | 0; //@line 13804
 $4 = $0 + 996 | 0; //@line 13805
 $AsyncCtx37 = _emscripten_alloc_async_context(44, sp) | 0; //@line 13806
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($3, $4); //@line 13807
 if (___async) {
  HEAP32[$AsyncCtx37 >> 2] = 390; //@line 13810
  HEAP32[$AsyncCtx37 + 4 >> 2] = $0; //@line 13812
  HEAP32[$AsyncCtx37 + 8 >> 2] = $1; //@line 13814
  HEAP32[$AsyncCtx37 + 12 >> 2] = $1; //@line 13816
  HEAP32[$AsyncCtx37 + 16 >> 2] = $vararg_buffer1; //@line 13818
  HEAP32[$AsyncCtx37 + 20 >> 2] = $vararg_buffer1; //@line 13820
  HEAP32[$AsyncCtx37 + 24 >> 2] = $1; //@line 13822
  HEAP32[$AsyncCtx37 + 28 >> 2] = $vararg_buffer; //@line 13824
  HEAP32[$AsyncCtx37 + 32 >> 2] = $vararg_buffer; //@line 13826
  HEAP32[$AsyncCtx37 + 36 >> 2] = $2; //@line 13828
  HEAP32[$AsyncCtx37 + 40 >> 2] = $4; //@line 13830
  sp = STACKTOP; //@line 13831
  STACKTOP = sp; //@line 13832
  return;
 }
 _emscripten_free_async_context($AsyncCtx37 | 0); //@line 13834
 $15 = $0 + 944 | 0; //@line 13835
 $16 = HEAP8[$15 >> 0] | 0; //@line 13836
 $$pre20 = $0 + 968 | 0; //@line 13839
 do {
  if ($16 & 32) {
   $19 = HEAP32[$$pre20 >> 2] | 0; //@line 13842
   if ($19 & 64 | 0) {
    HEAP32[$$pre20 >> 2] = $19 & -66; //@line 13847
   }
   do {
    if (!($16 & 9)) {
     label = 10; //@line 13853
    } else {
     $25 = $0 + 288 | 0; //@line 13855
     if ((HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($25) | 0) + 4 >> 2] | 0) != 2) {
      if ((HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) + 4 >> 2] | 0) != 2) {
       label = 10; //@line 13867
       break;
      }
     }
     HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 13873
     __ZN14LoRaMacCommand20clear_command_bufferEv($0 + 4 | 0); //@line 13875
     $39 = HEAP8[$0 + 895 >> 0] | 0; //@line 13877
     HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($25) | 0) + 11 >> 0] = $39; //@line 13880
     HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($25) | 0) + 10 >> 0] = 0; //@line 13883
     HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($25) | 0) + 12 >> 2] = 0; //@line 13886
     $172 = $0 + 373 | 0; //@line 13888
    }
   } while (0);
   do {
    if ((label | 0) == 10) {
     $47 = $0 + 373 | 0; //@line 13893
     if (!(HEAP8[$47 >> 0] | 0)) {
      $50 = HEAP8[$15 >> 0] | 0; //@line 13897
      if (!($50 & 9)) {
       $172 = $47; //@line 13901
      } else {
       if ($50 & 8) {
        $55 = $0 + 264 | 0; //@line 13906
        if (!(HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($55) | 0) >> 2] | 0)) {
         $59 = $0 + 897 | 0; //@line 13911
         $60 = HEAP8[$59 >> 0] | 0; //@line 13912
         HEAP8[(__ZN11LoRaMacMlme16get_confirmationEv($55) | 0) + 14 >> 0] = $60; //@line 13915
         if (!(HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($55) | 0) + 4 >> 2] | 0)) {
          HEAP32[$0 + 956 >> 2] = 0; //@line 13922
          HEAP8[$0 + 380 >> 0] = 0; //@line 13924
          HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 13927
          $172 = $47; //@line 13928
          break;
         }
         if ((HEAPU8[$59 >> 0] | 0) >= (HEAPU8[$0 + 896 >> 0] | 0)) {
          HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 13938
          $172 = $47; //@line 13939
          break;
         }
         HEAP8[$15 >> 0] = HEAP8[$15 >> 0] & -33; //@line 13944
         $80 = HEAP32[$0 + 1328 >> 2] | 0; //@line 13946
         HEAP32[$1 >> 2] = 391; //@line 13947
         HEAP32[$1 + 4 >> 2] = 0; //@line 13949
         $AsyncCtx33 = _emscripten_alloc_async_context(52, sp) | 0; //@line 13950
         HEAP32[$$byval_copy85 >> 2] = HEAP32[$1 >> 2]; //@line 13951
         HEAP32[$$byval_copy85 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 13951
         $81 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($80, $0, $$byval_copy85) | 0; //@line 13952
         if (___async) {
          HEAP32[$AsyncCtx33 >> 2] = 392; //@line 13955
          HEAP32[$AsyncCtx33 + 4 >> 2] = $15; //@line 13957
          HEAP32[$AsyncCtx33 + 8 >> 2] = $0; //@line 13959
          HEAP32[$AsyncCtx33 + 12 >> 2] = $1; //@line 13961
          HEAP32[$AsyncCtx33 + 16 >> 2] = $vararg_buffer1; //@line 13963
          HEAP32[$AsyncCtx33 + 20 >> 2] = $vararg_buffer1; //@line 13965
          HEAP32[$AsyncCtx33 + 24 >> 2] = $vararg_buffer; //@line 13967
          HEAP32[$AsyncCtx33 + 28 >> 2] = $vararg_buffer; //@line 13969
          HEAP32[$AsyncCtx33 + 32 >> 2] = $1; //@line 13971
          HEAP32[$AsyncCtx33 + 36 >> 2] = $$pre20; //@line 13973
          HEAP32[$AsyncCtx33 + 40 >> 2] = $2; //@line 13975
          HEAP32[$AsyncCtx33 + 44 >> 2] = $4; //@line 13977
          HEAP32[$AsyncCtx33 + 48 >> 2] = $47; //@line 13979
          sp = STACKTOP; //@line 13980
          STACKTOP = sp; //@line 13981
          return;
         }
         _emscripten_free_async_context($AsyncCtx33 | 0); //@line 13983
         do {
          if (!$81) {
           $AsyncCtx65 = _emscripten_alloc_async_context(52, sp) | 0; //@line 13987
           _mbed_assert_internal(13612, 13621, 192); //@line 13988
           if (___async) {
            HEAP32[$AsyncCtx65 >> 2] = 393; //@line 13991
            HEAP32[$AsyncCtx65 + 4 >> 2] = $15; //@line 13993
            HEAP32[$AsyncCtx65 + 8 >> 2] = $0; //@line 13995
            HEAP32[$AsyncCtx65 + 12 >> 2] = $1; //@line 13997
            HEAP32[$AsyncCtx65 + 16 >> 2] = $vararg_buffer1; //@line 13999
            HEAP32[$AsyncCtx65 + 20 >> 2] = $vararg_buffer1; //@line 14001
            HEAP32[$AsyncCtx65 + 24 >> 2] = $vararg_buffer; //@line 14003
            HEAP32[$AsyncCtx65 + 28 >> 2] = $vararg_buffer; //@line 14005
            HEAP32[$AsyncCtx65 + 32 >> 2] = $1; //@line 14007
            HEAP32[$AsyncCtx65 + 36 >> 2] = $$pre20; //@line 14009
            HEAP32[$AsyncCtx65 + 40 >> 2] = $2; //@line 14011
            HEAP32[$AsyncCtx65 + 44 >> 2] = $4; //@line 14013
            HEAP32[$AsyncCtx65 + 48 >> 2] = $47; //@line 14015
            sp = STACKTOP; //@line 14016
            STACKTOP = sp; //@line 14017
            return;
           } else {
            _emscripten_free_async_context($AsyncCtx65 | 0); //@line 14019
            break;
           }
          }
         } while (0);
         $172 = $47; //@line 14024
         break;
        }
       }
       $107 = $0 + 380 | 0; //@line 14028
       $112 = HEAP8[$15 >> 0] | 0; //@line 14033
       if (!(($112 & 2) == 0 ? (HEAPU8[$107 >> 0] | 0) < (HEAPU8[$0 + 1128 >> 0] | 0) : 0)) {
        if (!($112 & 2)) {
         __ZN14LoRaMacCommand20clear_command_bufferEv($0 + 4 | 0); //@line 14042
         $118 = $0 + 964 | 0; //@line 14043
         HEAP32[$118 >> 2] = (HEAP32[$118 >> 2] | 0) + 1; //@line 14046
        }
        HEAP8[$107 >> 0] = 0; //@line 14048
        if (!(HEAP8[$0 + 370 >> 0] | 0)) {
         $124 = $0 + 956 | 0; //@line 14053
         HEAP32[$124 >> 2] = (HEAP32[$124 >> 2] | 0) + 1; //@line 14056
        }
        HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 14060
        $172 = $47; //@line 14061
        break;
       }
       HEAP8[$15 >> 0] = $112 & -33; //@line 14065
       $131 = HEAP32[$0 + 1328 >> 2] | 0; //@line 14067
       HEAP32[$1 >> 2] = 391; //@line 14068
       HEAP32[$1 + 4 >> 2] = 0; //@line 14070
       $AsyncCtx29 = _emscripten_alloc_async_context(52, sp) | 0; //@line 14071
       HEAP32[$$byval_copy85 >> 2] = HEAP32[$1 >> 2]; //@line 14072
       HEAP32[$$byval_copy85 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 14072
       $132 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($131, $0, $$byval_copy85) | 0; //@line 14073
       if (___async) {
        HEAP32[$AsyncCtx29 >> 2] = 394; //@line 14076
        HEAP32[$AsyncCtx29 + 4 >> 2] = $15; //@line 14078
        HEAP32[$AsyncCtx29 + 8 >> 2] = $0; //@line 14080
        HEAP32[$AsyncCtx29 + 12 >> 2] = $1; //@line 14082
        HEAP32[$AsyncCtx29 + 16 >> 2] = $vararg_buffer1; //@line 14084
        HEAP32[$AsyncCtx29 + 20 >> 2] = $vararg_buffer1; //@line 14086
        HEAP32[$AsyncCtx29 + 24 >> 2] = $vararg_buffer; //@line 14088
        HEAP32[$AsyncCtx29 + 28 >> 2] = $vararg_buffer; //@line 14090
        HEAP32[$AsyncCtx29 + 32 >> 2] = $$pre20; //@line 14092
        HEAP32[$AsyncCtx29 + 36 >> 2] = $2; //@line 14094
        HEAP32[$AsyncCtx29 + 40 >> 2] = $4; //@line 14096
        HEAP32[$AsyncCtx29 + 44 >> 2] = $1; //@line 14098
        HEAP32[$AsyncCtx29 + 48 >> 2] = $47; //@line 14100
        sp = STACKTOP; //@line 14101
        STACKTOP = sp; //@line 14102
        return;
       }
       _emscripten_free_async_context($AsyncCtx29 | 0); //@line 14104
       do {
        if (!$132) {
         $AsyncCtx61 = _emscripten_alloc_async_context(52, sp) | 0; //@line 14108
         _mbed_assert_internal(13612, 13621, 192); //@line 14109
         if (___async) {
          HEAP32[$AsyncCtx61 >> 2] = 395; //@line 14112
          HEAP32[$AsyncCtx61 + 4 >> 2] = $15; //@line 14114
          HEAP32[$AsyncCtx61 + 8 >> 2] = $0; //@line 14116
          HEAP32[$AsyncCtx61 + 12 >> 2] = $1; //@line 14118
          HEAP32[$AsyncCtx61 + 16 >> 2] = $vararg_buffer1; //@line 14120
          HEAP32[$AsyncCtx61 + 20 >> 2] = $vararg_buffer1; //@line 14122
          HEAP32[$AsyncCtx61 + 24 >> 2] = $vararg_buffer; //@line 14124
          HEAP32[$AsyncCtx61 + 28 >> 2] = $vararg_buffer; //@line 14126
          HEAP32[$AsyncCtx61 + 32 >> 2] = $$pre20; //@line 14128
          HEAP32[$AsyncCtx61 + 36 >> 2] = $2; //@line 14130
          HEAP32[$AsyncCtx61 + 40 >> 2] = $4; //@line 14132
          HEAP32[$AsyncCtx61 + 44 >> 2] = $1; //@line 14134
          HEAP32[$AsyncCtx61 + 48 >> 2] = $47; //@line 14136
          sp = STACKTOP; //@line 14137
          STACKTOP = sp; //@line 14138
          return;
         } else {
          _emscripten_free_async_context($AsyncCtx61 | 0); //@line 14140
          break;
         }
        }
       } while (0);
       $172 = $47; //@line 14145
      }
     } else {
      $172 = $47; //@line 14148
     }
    }
   } while (0);
   do {
    if (HEAP8[$15 >> 0] & 2) {
     $161 = $0 + 288 | 0; //@line 14157
     if (!(HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($161) | 0) + 10 >> 0] | 0)) {
      if ((HEAPU8[$0 + 895 >> 0] | 0) <= (HEAPU8[$0 + 894 >> 0] | 0)) {
       break;
      }
     }
     HEAP8[$0 + 377 >> 0] = 0; //@line 14173
     HEAP8[$172 >> 0] = 0; //@line 14174
     if (!(HEAP8[$0 + 370 >> 0] | 0)) {
      $176 = $0 + 956 | 0; //@line 14179
      HEAP32[$176 >> 2] = (HEAP32[$176 >> 2] | 0) + 1; //@line 14182
     }
     $180 = HEAP8[$0 + 895 >> 0] | 0; //@line 14185
     HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($161) | 0) + 11 >> 0] = $180; //@line 14188
     HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 14191
    }
   } while (0);
   $185 = $0 + 377 | 0; //@line 14194
   if (HEAP8[$185 >> 0] | 0) {
    if (!(HEAP32[$$pre20 >> 2] & 16)) {
     HEAP8[$185 >> 0] = 0; //@line 14202
     $191 = $0 + 895 | 0; //@line 14203
     $192 = HEAP8[$191 >> 0] | 0; //@line 14204
     if (!(($192 & 255) < 9 ? ($192 & 255) < (HEAPU8[$0 + 894 >> 0] | 0) : 0)) {
      $241 = HEAP32[$0 >> 2] | 0; //@line 14211
      $244 = HEAP32[(HEAP32[$241 >> 2] | 0) + 16 >> 2] | 0; //@line 14214
      $AsyncCtx = _emscripten_alloc_async_context(52, sp) | 0; //@line 14215
      FUNCTION_TABLE_vi[$244 & 1023]($241); //@line 14216
      if (___async) {
       HEAP32[$AsyncCtx >> 2] = 397; //@line 14219
       HEAP32[$AsyncCtx + 4 >> 2] = $15; //@line 14221
       HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 14223
       HEAP32[$AsyncCtx + 12 >> 2] = $$pre20; //@line 14225
       HEAP32[$AsyncCtx + 16 >> 2] = $172; //@line 14227
       HEAP32[$AsyncCtx + 20 >> 2] = $191; //@line 14229
       HEAP32[$AsyncCtx + 24 >> 2] = $1; //@line 14231
       HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer1; //@line 14233
       HEAP32[$AsyncCtx + 32 >> 2] = $vararg_buffer1; //@line 14235
       HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer; //@line 14237
       HEAP32[$AsyncCtx + 40 >> 2] = $vararg_buffer; //@line 14239
       HEAP32[$AsyncCtx + 44 >> 2] = $2; //@line 14241
       HEAP32[$AsyncCtx + 48 >> 2] = $4; //@line 14243
       sp = STACKTOP; //@line 14244
       STACKTOP = sp; //@line 14245
       return;
      }
      _emscripten_free_async_context($AsyncCtx | 0); //@line 14247
      HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 14250
      __ZN14LoRaMacCommand20clear_command_bufferEv($0 + 4 | 0); //@line 14252
      HEAP8[$172 >> 0] = 0; //@line 14253
      $260 = $0 + 288 | 0; //@line 14254
      HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($260) | 0) + 10 >> 0] = 0; //@line 14257
      $263 = HEAP8[$191 >> 0] | 0; //@line 14258
      HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($260) | 0) + 11 >> 0] = $263; //@line 14261
      if (HEAP8[$0 + 370 >> 0] | 0) {
       break;
      }
      $269 = $0 + 956 | 0; //@line 14268
      HEAP32[$269 >> 2] = (HEAP32[$269 >> 2] | 0) + 1; //@line 14271
      break;
     }
     $197 = $192 + 1 << 24 >> 24; //@line 14274
     HEAP8[$191 >> 0] = $197; //@line 14275
     if ($197 & 1) {
      $201 = $0 + 1097 | 0; //@line 14280
      HEAP8[$201 >> 0] = __ZN7LoRaPHY26get_next_lower_tx_datarateEa(HEAP32[$0 >> 2] | 0, HEAP8[$201 >> 0] | 0) | 0; //@line 14283
     }
     $AsyncCtx21 = _emscripten_alloc_async_context(52, sp) | 0; //@line 14285
     $204 = __ZN7LoRaMac11schedule_txEv($0) | 0; //@line 14286
     if (___async) {
      HEAP32[$AsyncCtx21 >> 2] = 396; //@line 14289
      HEAP32[$AsyncCtx21 + 4 >> 2] = $15; //@line 14291
      HEAP32[$AsyncCtx21 + 8 >> 2] = $0; //@line 14293
      HEAP32[$AsyncCtx21 + 12 >> 2] = $$pre20; //@line 14295
      HEAP32[$AsyncCtx21 + 16 >> 2] = $172; //@line 14297
      HEAP32[$AsyncCtx21 + 20 >> 2] = $191; //@line 14299
      HEAP32[$AsyncCtx21 + 24 >> 2] = $1; //@line 14301
      HEAP32[$AsyncCtx21 + 28 >> 2] = $vararg_buffer1; //@line 14303
      HEAP32[$AsyncCtx21 + 32 >> 2] = $vararg_buffer1; //@line 14305
      HEAP32[$AsyncCtx21 + 36 >> 2] = $vararg_buffer; //@line 14307
      HEAP32[$AsyncCtx21 + 40 >> 2] = $vararg_buffer; //@line 14309
      HEAP32[$AsyncCtx21 + 44 >> 2] = $2; //@line 14311
      HEAP32[$AsyncCtx21 + 48 >> 2] = $4; //@line 14313
      sp = STACKTOP; //@line 14314
      STACKTOP = sp; //@line 14315
      return;
     }
     _emscripten_free_async_context($AsyncCtx21 | 0); //@line 14317
     if (!$204) {
      HEAP8[$15 >> 0] = HEAP8[$15 >> 0] & -33; //@line 14322
      break;
     }
     $220 = $0 + 288 | 0; //@line 14325
     HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($220) | 0) + 4 >> 2] = 9; //@line 14328
     __ZN14LoRaMacCommand20clear_command_bufferEv($0 + 4 | 0); //@line 14330
     HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 14333
     HEAP8[$172 >> 0] = 0; //@line 14334
     HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($220) | 0) + 10 >> 0] = 0; //@line 14337
     $228 = HEAP8[$191 >> 0] | 0; //@line 14338
     HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($220) | 0) + 11 >> 0] = $228; //@line 14341
     $232 = HEAP8[$0 + 1097 >> 0] | 0; //@line 14343
     HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($220) | 0) + 8 >> 0] = $232; //@line 14346
     if (!(HEAP8[$0 + 370 >> 0] | 0)) {
      $238 = $0 + 956 | 0; //@line 14351
      HEAP32[$238 >> 2] = (HEAP32[$238 >> 2] | 0) + 1; //@line 14354
     }
    }
   }
  }
 } while (0);
 $272 = HEAP32[$$pre20 >> 2] | 0; //@line 14360
 $275 = $272 & -3; //@line 14363
 if (!($272 & 2)) {
  $277 = $272; //@line 14365
 } else {
  HEAP32[$$pre20 >> 2] = $275; //@line 14367
  $277 = $275; //@line 14368
 }
 do {
  if (!$277) {
   $278 = HEAP8[$15 >> 0] | 0; //@line 14373
   do {
    if (!($278 & 1)) {
     $309 = $278; //@line 14378
    } else {
     HEAP8[$15 >> 0] = $278 & -2; //@line 14381
     $283 = HEAP32[$0 + 1324 >> 2] | 0; //@line 14383
     $285 = __ZN11LoRaMacMcps16get_confirmationEv($0 + 288 | 0) | 0; //@line 14385
     $286 = $283 + 12 | 0; //@line 14386
     $287 = HEAP32[$286 >> 2] | 0; //@line 14387
     do {
      if (!$287) {
       $AsyncCtx57 = _emscripten_alloc_async_context(44, sp) | 0; //@line 14391
       _mbed_assert_internal(15679, 15684, 1102); //@line 14392
       if (___async) {
        HEAP32[$AsyncCtx57 >> 2] = 398; //@line 14395
        HEAP32[$AsyncCtx57 + 4 >> 2] = $15; //@line 14397
        HEAP32[$AsyncCtx57 + 8 >> 2] = $0; //@line 14399
        HEAP32[$AsyncCtx57 + 12 >> 2] = $283; //@line 14401
        HEAP32[$AsyncCtx57 + 16 >> 2] = $285; //@line 14403
        HEAP32[$AsyncCtx57 + 20 >> 2] = $286; //@line 14405
        HEAP32[$AsyncCtx57 + 24 >> 2] = $1; //@line 14407
        HEAP32[$AsyncCtx57 + 28 >> 2] = $vararg_buffer1; //@line 14409
        HEAP32[$AsyncCtx57 + 32 >> 2] = $vararg_buffer1; //@line 14411
        HEAP32[$AsyncCtx57 + 36 >> 2] = $vararg_buffer; //@line 14413
        HEAP32[$AsyncCtx57 + 40 >> 2] = $vararg_buffer; //@line 14415
        sp = STACKTOP; //@line 14416
        STACKTOP = sp; //@line 14417
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx57 | 0); //@line 14419
        $300 = HEAP32[$286 >> 2] | 0; //@line 14421
        break;
       }
      } else {
       $300 = $287; //@line 14425
      }
     } while (0);
     $299 = HEAP32[$300 >> 2] | 0; //@line 14428
     $AsyncCtx4 = _emscripten_alloc_async_context(32, sp) | 0; //@line 14429
     FUNCTION_TABLE_vii[$299 & 31]($283, $285); //@line 14430
     if (___async) {
      HEAP32[$AsyncCtx4 >> 2] = 399; //@line 14433
      HEAP32[$AsyncCtx4 + 4 >> 2] = $15; //@line 14435
      HEAP32[$AsyncCtx4 + 8 >> 2] = $0; //@line 14437
      HEAP32[$AsyncCtx4 + 12 >> 2] = $1; //@line 14439
      HEAP32[$AsyncCtx4 + 16 >> 2] = $vararg_buffer1; //@line 14441
      HEAP32[$AsyncCtx4 + 20 >> 2] = $vararg_buffer1; //@line 14443
      HEAP32[$AsyncCtx4 + 24 >> 2] = $vararg_buffer; //@line 14445
      HEAP32[$AsyncCtx4 + 28 >> 2] = $vararg_buffer; //@line 14447
      sp = STACKTOP; //@line 14448
      STACKTOP = sp; //@line 14449
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx4 | 0); //@line 14451
      $309 = HEAP8[$15 >> 0] | 0; //@line 14453
      break;
     }
    }
   } while (0);
   do {
    if ($309 & 8) {
     HEAP8[$15 >> 0] = $309 & -9; //@line 14463
     $313 = HEAP32[$0 + 1324 >> 2] | 0; //@line 14465
     $314 = $313 + 32 | 0; //@line 14466
     $316 = __ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0; //@line 14468
     $317 = $313 + 44 | 0; //@line 14469
     $318 = HEAP32[$317 >> 2] | 0; //@line 14470
     do {
      if (!$318) {
       $AsyncCtx53 = _emscripten_alloc_async_context(44, sp) | 0; //@line 14474
       _mbed_assert_internal(15679, 15684, 1102); //@line 14475
       if (___async) {
        HEAP32[$AsyncCtx53 >> 2] = 400; //@line 14478
        HEAP32[$AsyncCtx53 + 4 >> 2] = $15; //@line 14480
        HEAP32[$AsyncCtx53 + 8 >> 2] = $0; //@line 14482
        HEAP32[$AsyncCtx53 + 12 >> 2] = $314; //@line 14484
        HEAP32[$AsyncCtx53 + 16 >> 2] = $316; //@line 14486
        HEAP32[$AsyncCtx53 + 20 >> 2] = $1; //@line 14488
        HEAP32[$AsyncCtx53 + 24 >> 2] = $vararg_buffer1; //@line 14490
        HEAP32[$AsyncCtx53 + 28 >> 2] = $vararg_buffer1; //@line 14492
        HEAP32[$AsyncCtx53 + 32 >> 2] = $vararg_buffer; //@line 14494
        HEAP32[$AsyncCtx53 + 36 >> 2] = $vararg_buffer; //@line 14496
        HEAP32[$AsyncCtx53 + 40 >> 2] = $317; //@line 14498
        sp = STACKTOP; //@line 14499
        STACKTOP = sp; //@line 14500
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx53 | 0); //@line 14502
        $331 = HEAP32[$317 >> 2] | 0; //@line 14504
        break;
       }
      } else {
       $331 = $318; //@line 14508
      }
     } while (0);
     $330 = HEAP32[$331 >> 2] | 0; //@line 14511
     $AsyncCtx7 = _emscripten_alloc_async_context(32, sp) | 0; //@line 14512
     FUNCTION_TABLE_vii[$330 & 31]($314, $316); //@line 14513
     if (___async) {
      HEAP32[$AsyncCtx7 >> 2] = 401; //@line 14516
      HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 14518
      HEAP32[$AsyncCtx7 + 8 >> 2] = $15; //@line 14520
      HEAP32[$AsyncCtx7 + 12 >> 2] = $1; //@line 14522
      HEAP32[$AsyncCtx7 + 16 >> 2] = $vararg_buffer1; //@line 14524
      HEAP32[$AsyncCtx7 + 20 >> 2] = $vararg_buffer1; //@line 14526
      HEAP32[$AsyncCtx7 + 24 >> 2] = $vararg_buffer; //@line 14528
      HEAP32[$AsyncCtx7 + 28 >> 2] = $vararg_buffer; //@line 14530
      sp = STACKTOP; //@line 14531
      STACKTOP = sp; //@line 14532
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx7 | 0); //@line 14534
      break;
     }
    }
   } while (0);
   if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($0 + 4 | 0) | 0) {
    _mbed_tracef(16, 13728, 13889, $vararg_buffer); //@line 14542
    HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($0 + 264 | 0) | 0) >> 2] = 4; //@line 14545
    $344 = HEAP8[$15 >> 0] | 16; //@line 14547
    HEAP8[$15 >> 0] = $344; //@line 14548
    $346 = $344; //@line 14549
   } else {
    $346 = HEAP8[$15 >> 0] | 0; //@line 14552
   }
   $345 = $346 & -33; //@line 14554
   HEAP8[$15 >> 0] = $345; //@line 14555
   $354 = $345; //@line 14556
  } else {
   $347 = HEAP32[$2 >> 2] | 0; //@line 14558
   $AsyncCtx17 = _emscripten_alloc_async_context(24, sp) | 0; //@line 14559
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($347, $4, 1e3); //@line 14560
   if (___async) {
    HEAP32[$AsyncCtx17 >> 2] = 402; //@line 14563
    HEAP32[$AsyncCtx17 + 4 >> 2] = $15; //@line 14565
    HEAP32[$AsyncCtx17 + 8 >> 2] = $0; //@line 14567
    HEAP32[$AsyncCtx17 + 12 >> 2] = $1; //@line 14569
    HEAP32[$AsyncCtx17 + 16 >> 2] = $vararg_buffer1; //@line 14571
    HEAP32[$AsyncCtx17 + 20 >> 2] = $vararg_buffer1; //@line 14573
    sp = STACKTOP; //@line 14574
    STACKTOP = sp; //@line 14575
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx17 | 0); //@line 14577
    $354 = HEAP8[$15 >> 0] | 0; //@line 14579
    break;
   }
  }
 } while (0);
 if (!($354 & 2)) {
  $394 = $354; //@line 14587
 } else {
  $356 = $354 & -3; //@line 14589
  HEAP8[$15 >> 0] = $356; //@line 14590
  if ((HEAP32[$0 + 360 >> 2] | 0) == 2) {
   _mbed_tracef(16, 13728, 13747, $vararg_buffer1); //@line 14595
   $361 = HEAP32[$0 + 1328 >> 2] | 0; //@line 14597
   HEAP32[$1 >> 2] = 293; //@line 14598
   HEAP32[$1 + 4 >> 2] = 0; //@line 14600
   $AsyncCtx25 = _emscripten_alloc_async_context(16, sp) | 0; //@line 14601
   HEAP32[$$byval_copy85 >> 2] = HEAP32[$1 >> 2]; //@line 14602
   HEAP32[$$byval_copy85 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 14602
   $362 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($361, $0, $$byval_copy85) | 0; //@line 14603
   if (___async) {
    HEAP32[$AsyncCtx25 >> 2] = 403; //@line 14606
    HEAP32[$AsyncCtx25 + 4 >> 2] = $15; //@line 14608
    HEAP32[$AsyncCtx25 + 8 >> 2] = $0; //@line 14610
    HEAP32[$AsyncCtx25 + 12 >> 2] = $1; //@line 14612
    sp = STACKTOP; //@line 14613
    STACKTOP = sp; //@line 14614
    return;
   }
   _emscripten_free_async_context($AsyncCtx25 | 0); //@line 14616
   do {
    if (!$362) {
     $AsyncCtx49 = _emscripten_alloc_async_context(16, sp) | 0; //@line 14620
     _mbed_assert_internal(13612, 13621, 215); //@line 14621
     if (___async) {
      HEAP32[$AsyncCtx49 >> 2] = 404; //@line 14624
      HEAP32[$AsyncCtx49 + 4 >> 2] = $15; //@line 14626
      HEAP32[$AsyncCtx49 + 8 >> 2] = $0; //@line 14628
      HEAP32[$AsyncCtx49 + 12 >> 2] = $1; //@line 14630
      sp = STACKTOP; //@line 14631
      STACKTOP = sp; //@line 14632
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx49 | 0); //@line 14634
      break;
     }
    }
   } while (0);
   HEAP32[$0 + 364 >> 2] = 2; //@line 14640
   $372 = HEAP8[$15 >> 0] | 0; //@line 14642
  } else {
   $372 = $356; //@line 14644
  }
  do {
   if (!($372 & 4)) {
    $375 = HEAP32[$0 + 1324 >> 2] | 0; //@line 14651
    $376 = $375 + 16 | 0; //@line 14652
    $378 = __ZN11LoRaMacMcps14get_indicationEv($0 + 288 | 0) | 0; //@line 14654
    $379 = $375 + 28 | 0; //@line 14655
    $380 = HEAP32[$379 >> 2] | 0; //@line 14656
    do {
     if (!$380) {
      $AsyncCtx45 = _emscripten_alloc_async_context(24, sp) | 0; //@line 14660
      _mbed_assert_internal(15679, 15684, 1102); //@line 14661
      if (___async) {
       HEAP32[$AsyncCtx45 >> 2] = 405; //@line 14664
       HEAP32[$AsyncCtx45 + 4 >> 2] = $379; //@line 14666
       HEAP32[$AsyncCtx45 + 8 >> 2] = $376; //@line 14668
       HEAP32[$AsyncCtx45 + 12 >> 2] = $378; //@line 14670
       HEAP32[$AsyncCtx45 + 16 >> 2] = $15; //@line 14672
       HEAP32[$AsyncCtx45 + 20 >> 2] = $0; //@line 14674
       sp = STACKTOP; //@line 14675
       STACKTOP = sp; //@line 14676
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx45 | 0); //@line 14678
       $388 = HEAP32[$379 >> 2] | 0; //@line 14680
       break;
      }
     } else {
      $388 = $380; //@line 14684
     }
    } while (0);
    $387 = HEAP32[$388 >> 2] | 0; //@line 14687
    $AsyncCtx10 = _emscripten_alloc_async_context(12, sp) | 0; //@line 14688
    FUNCTION_TABLE_vii[$387 & 31]($376, $378); //@line 14689
    if (___async) {
     HEAP32[$AsyncCtx10 >> 2] = 406; //@line 14692
     HEAP32[$AsyncCtx10 + 4 >> 2] = $15; //@line 14694
     HEAP32[$AsyncCtx10 + 8 >> 2] = $0; //@line 14696
     sp = STACKTOP; //@line 14697
     STACKTOP = sp; //@line 14698
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx10 | 0); //@line 14700
     $392 = HEAP8[$15 >> 0] | 0; //@line 14702
     break;
    }
   } else {
    $392 = $372; //@line 14706
   }
  } while (0);
  $391 = $392 & -5; //@line 14709
  HEAP8[$15 >> 0] = $391; //@line 14710
  $394 = $391; //@line 14711
 }
 if (!($394 & 16)) {
  STACKTOP = sp; //@line 14716
  return;
 }
 HEAP8[$15 >> 0] = $394 & -17; //@line 14719
 $398 = HEAP32[$0 + 1324 >> 2] | 0; //@line 14721
 $399 = $398 + 48 | 0; //@line 14722
 $401 = __ZN11LoRaMacMlme14get_indicationEv($0 + 264 | 0) | 0; //@line 14724
 $402 = $398 + 60 | 0; //@line 14725
 $403 = HEAP32[$402 >> 2] | 0; //@line 14726
 do {
  if (!$403) {
   $AsyncCtx41 = _emscripten_alloc_async_context(16, sp) | 0; //@line 14730
   _mbed_assert_internal(15679, 15684, 1102); //@line 14731
   if (___async) {
    HEAP32[$AsyncCtx41 >> 2] = 407; //@line 14734
    HEAP32[$AsyncCtx41 + 4 >> 2] = $402; //@line 14736
    HEAP32[$AsyncCtx41 + 8 >> 2] = $399; //@line 14738
    HEAP32[$AsyncCtx41 + 12 >> 2] = $401; //@line 14740
    sp = STACKTOP; //@line 14741
    STACKTOP = sp; //@line 14742
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx41 | 0); //@line 14744
    $409 = HEAP32[$402 >> 2] | 0; //@line 14746
    break;
   }
  } else {
   $409 = $403; //@line 14750
  }
 } while (0);
 $408 = HEAP32[$409 >> 2] | 0; //@line 14753
 $AsyncCtx13 = _emscripten_alloc_async_context(4, sp) | 0; //@line 14754
 FUNCTION_TABLE_vii[$408 & 31]($399, $401); //@line 14755
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 408; //@line 14758
  sp = STACKTOP; //@line 14759
  STACKTOP = sp; //@line 14760
  return;
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 14762
 STACKTOP = sp; //@line 14763
 return;
}
function _equeue_dispatch__async_cb_242($0) {
 $0 = $0 | 0;
 var $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$03956$i = 0, $$03956$i$phi = 0, $$04055$i = 0, $$0405571$i = 0, $$04063$i = 0, $$04159$i = 0, $$04258$i = 0, $$057$i = 0, $$067 = 0, $$06992 = 0, $$2 = 0, $$expand_i1_val = 0, $$expand_i1_val11 = 0, $$expand_i1_val13 = 0, $$expand_i1_val9 = 0, $$sink$in$i$i = 0, $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i75 = 0, $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i74 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $12 = 0, $127 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $152 = 0, $153 = 0, $154 = 0, $156 = 0, $157 = 0, $16 = 0, $165 = 0, $166 = 0, $168 = 0, $171 = 0, $173 = 0, $176 = 0, $179 = 0, $18 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $190 = 0, $193 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $4 = 0, $44 = 0, $45 = 0, $48 = 0, $54 = 0, $6 = 0, $63 = 0, $66 = 0, $67 = 0, $69 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $93 = 0, $95 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0, $$04159$i$looptemp = 0, $$04258$i$looptemp = 0;
 sp = STACKTOP; //@line 7383
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 7385
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7387
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 7389
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 7391
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 7393
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 7395
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 7397
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 7399
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 7401
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 7403
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 7405
 $24 = HEAP8[$0 + 48 >> 0] & 1; //@line 7408
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 7410
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 7412
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 7414
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 7416
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 7418
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 7420
 _equeue_mutex_lock($4); //@line 7421
 HEAP8[$18 >> 0] = (HEAPU8[$18 >> 0] | 0) + 1; //@line 7426
 if (((HEAP32[$14 >> 2] | 0) - $16 | 0) < 1) {
  HEAP32[$14 >> 2] = $16; //@line 7431
 }
 $44 = HEAP32[$10 >> 2] | 0; //@line 7433
 HEAP32[$12 >> 2] = $44; //@line 7434
 $45 = $44; //@line 7435
 L6 : do {
  if (!$44) {
   $$04055$i = $6; //@line 7439
   $54 = $45; //@line 7439
   label = 8; //@line 7440
  } else {
   $$04063$i = $6; //@line 7442
   $48 = $45; //@line 7442
   do {
    if (((HEAP32[$48 + 20 >> 2] | 0) - $16 | 0) >= 1) {
     $$04055$i = $$04063$i; //@line 7449
     $54 = $48; //@line 7449
     label = 8; //@line 7450
     break L6;
    }
    $$04063$i = $48 + 8 | 0; //@line 7453
    $48 = HEAP32[$$04063$i >> 2] | 0; //@line 7454
   } while (($48 | 0) != 0);
   HEAP32[$8 >> 2] = 0; //@line 7462
   $$0405571$i = $$04063$i; //@line 7463
  }
 } while (0);
 if ((label | 0) == 8) {
  HEAP32[$8 >> 2] = $54; //@line 7467
  if (!$54) {
   $$0405571$i = $$04055$i; //@line 7470
  } else {
   HEAP32[$54 + 16 >> 2] = $8; //@line 7473
   $$0405571$i = $$04055$i; //@line 7474
  }
 }
 HEAP32[$$0405571$i >> 2] = 0; //@line 7477
 _equeue_mutex_unlock($4); //@line 7478
 $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i74 = HEAP32[$6 >> 2] | 0; //@line 7479
 L15 : do {
  if (!$$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i74) {} else {
   $$04159$i = $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i74; //@line 7484
   $$04258$i = $6; //@line 7484
   do {
    $$04258$i$looptemp = $$04258$i;
    $$04258$i = $$04159$i + 8 | 0; //@line 7486
    $$04159$i$looptemp = $$04159$i;
    $$04159$i = HEAP32[$$04258$i >> 2] | 0; //@line 7487
    $$03956$i = 0; //@line 7488
    $$057$i = $$04159$i$looptemp; //@line 7488
    while (1) {
     HEAP32[$$057$i + 8 >> 2] = $$03956$i; //@line 7491
     $63 = HEAP32[$$057$i + 12 >> 2] | 0; //@line 7493
     if (!$63) {
      break;
     } else {
      $$03956$i$phi = $$057$i; //@line 7498
      $$057$i = $63; //@line 7498
      $$03956$i = $$03956$i$phi; //@line 7498
     }
    }
    HEAP32[$$04258$i$looptemp >> 2] = $$057$i; //@line 7501
   } while (($$04159$i | 0) != 0);
   $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i75 = HEAP32[$6 >> 2] | 0; //@line 7509
   if ($$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i75 | 0) {
    $$06992 = $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i75; //@line 7512
    while (1) {
     $66 = $$06992 + 8 | 0; //@line 7514
     $67 = HEAP32[$66 >> 2] | 0; //@line 7515
     $69 = HEAP32[$$06992 + 32 >> 2] | 0; //@line 7517
     if ($69 | 0) {
      label = 17; //@line 7520
      break;
     }
     $93 = HEAP32[$$06992 + 24 >> 2] | 0; //@line 7524
     if (($93 | 0) > -1) {
      label = 21; //@line 7527
      break;
     }
     $117 = $$06992 + 4 | 0; //@line 7531
     $118 = HEAP8[$117 >> 0] | 0; //@line 7532
     HEAP8[$117 >> 0] = (($118 + 1 & 255) << HEAP32[$30 >> 2] | 0) == 0 ? 1 : ($118 & 255) + 1 & 255; //@line 7541
     $127 = HEAP32[$$06992 + 28 >> 2] | 0; //@line 7543
     if ($127 | 0) {
      label = 25; //@line 7546
      break;
     }
     _equeue_mutex_lock($22); //@line 7549
     $150 = HEAP32[$20 >> 2] | 0; //@line 7550
     L28 : do {
      if (!$150) {
       $$02329$i$i = $20; //@line 7554
       label = 34; //@line 7555
      } else {
       $152 = HEAP32[$$06992 >> 2] | 0; //@line 7557
       $$025$i$i = $20; //@line 7558
       $154 = $150; //@line 7558
       while (1) {
        $153 = HEAP32[$154 >> 2] | 0; //@line 7560
        if ($153 >>> 0 >= $152 >>> 0) {
         break;
        }
        $156 = $154 + 8 | 0; //@line 7565
        $157 = HEAP32[$156 >> 2] | 0; //@line 7566
        if (!$157) {
         $$02329$i$i = $156; //@line 7569
         label = 34; //@line 7570
         break L28;
        } else {
         $$025$i$i = $156; //@line 7573
         $154 = $157; //@line 7573
        }
       }
       if (($153 | 0) == ($152 | 0)) {
        HEAP32[$$06992 + 12 >> 2] = $154; //@line 7579
        $$02330$i$i = $$025$i$i; //@line 7582
        $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 7582
       } else {
        $$02329$i$i = $$025$i$i; //@line 7584
        label = 34; //@line 7585
       }
      }
     } while (0);
     if ((label | 0) == 34) {
      label = 0; //@line 7590
      HEAP32[$$06992 + 12 >> 2] = 0; //@line 7592
      $$02330$i$i = $$02329$i$i; //@line 7593
      $$sink$in$i$i = $$02329$i$i; //@line 7593
     }
     HEAP32[$66 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 7596
     HEAP32[$$02330$i$i >> 2] = $$06992; //@line 7597
     _equeue_mutex_unlock($22); //@line 7598
     if (!$67) {
      break L15;
     } else {
      $$06992 = $67; //@line 7603
     }
    }
    if ((label | 0) == 17) {
     $ReallocAsyncCtx = _emscripten_realloc_async_context(84) | 0; //@line 7608
     FUNCTION_TABLE_vi[$69 & 1023]($$06992 + 36 | 0); //@line 7609
     if (___async) {
      HEAP32[$ReallocAsyncCtx >> 2] = 132; //@line 7612
      $72 = $ReallocAsyncCtx + 4 | 0; //@line 7613
      HEAP32[$72 >> 2] = $2; //@line 7614
      $73 = $ReallocAsyncCtx + 8 | 0; //@line 7615
      HEAP32[$73 >> 2] = $4; //@line 7616
      $74 = $ReallocAsyncCtx + 12 | 0; //@line 7617
      HEAP32[$74 >> 2] = $6; //@line 7618
      $75 = $ReallocAsyncCtx + 16 | 0; //@line 7619
      HEAP32[$75 >> 2] = $8; //@line 7620
      $76 = $ReallocAsyncCtx + 20 | 0; //@line 7621
      HEAP32[$76 >> 2] = $10; //@line 7622
      $77 = $ReallocAsyncCtx + 24 | 0; //@line 7623
      HEAP32[$77 >> 2] = $12; //@line 7624
      $78 = $ReallocAsyncCtx + 28 | 0; //@line 7625
      HEAP32[$78 >> 2] = $14; //@line 7626
      $79 = $ReallocAsyncCtx + 32 | 0; //@line 7627
      HEAP32[$79 >> 2] = $18; //@line 7628
      $80 = $ReallocAsyncCtx + 36 | 0; //@line 7629
      HEAP32[$80 >> 2] = $20; //@line 7630
      $81 = $ReallocAsyncCtx + 40 | 0; //@line 7631
      HEAP32[$81 >> 2] = $$06992; //@line 7632
      $82 = $ReallocAsyncCtx + 44 | 0; //@line 7633
      HEAP32[$82 >> 2] = $66; //@line 7634
      $83 = $ReallocAsyncCtx + 48 | 0; //@line 7635
      HEAP32[$83 >> 2] = $22; //@line 7636
      $84 = $ReallocAsyncCtx + 52 | 0; //@line 7637
      HEAP32[$84 >> 2] = $67; //@line 7638
      $85 = $ReallocAsyncCtx + 56 | 0; //@line 7639
      $$expand_i1_val = $24 & 1; //@line 7640
      HEAP8[$85 >> 0] = $$expand_i1_val; //@line 7641
      $86 = $ReallocAsyncCtx + 60 | 0; //@line 7642
      HEAP32[$86 >> 2] = $26; //@line 7643
      $87 = $ReallocAsyncCtx + 64 | 0; //@line 7644
      HEAP32[$87 >> 2] = $28; //@line 7645
      $88 = $ReallocAsyncCtx + 68 | 0; //@line 7646
      HEAP32[$88 >> 2] = $30; //@line 7647
      $89 = $ReallocAsyncCtx + 72 | 0; //@line 7648
      HEAP32[$89 >> 2] = $32; //@line 7649
      $90 = $ReallocAsyncCtx + 76 | 0; //@line 7650
      HEAP32[$90 >> 2] = $34; //@line 7651
      $91 = $ReallocAsyncCtx + 80 | 0; //@line 7652
      HEAP32[$91 >> 2] = $36; //@line 7653
      sp = STACKTOP; //@line 7654
      return;
     }
     ___async_unwind = 0; //@line 7657
     HEAP32[$ReallocAsyncCtx >> 2] = 132; //@line 7658
     $72 = $ReallocAsyncCtx + 4 | 0; //@line 7659
     HEAP32[$72 >> 2] = $2; //@line 7660
     $73 = $ReallocAsyncCtx + 8 | 0; //@line 7661
     HEAP32[$73 >> 2] = $4; //@line 7662
     $74 = $ReallocAsyncCtx + 12 | 0; //@line 7663
     HEAP32[$74 >> 2] = $6; //@line 7664
     $75 = $ReallocAsyncCtx + 16 | 0; //@line 7665
     HEAP32[$75 >> 2] = $8; //@line 7666
     $76 = $ReallocAsyncCtx + 20 | 0; //@line 7667
     HEAP32[$76 >> 2] = $10; //@line 7668
     $77 = $ReallocAsyncCtx + 24 | 0; //@line 7669
     HEAP32[$77 >> 2] = $12; //@line 7670
     $78 = $ReallocAsyncCtx + 28 | 0; //@line 7671
     HEAP32[$78 >> 2] = $14; //@line 7672
     $79 = $ReallocAsyncCtx + 32 | 0; //@line 7673
     HEAP32[$79 >> 2] = $18; //@line 7674
     $80 = $ReallocAsyncCtx + 36 | 0; //@line 7675
     HEAP32[$80 >> 2] = $20; //@line 7676
     $81 = $ReallocAsyncCtx + 40 | 0; //@line 7677
     HEAP32[$81 >> 2] = $$06992; //@line 7678
     $82 = $ReallocAsyncCtx + 44 | 0; //@line 7679
     HEAP32[$82 >> 2] = $66; //@line 7680
     $83 = $ReallocAsyncCtx + 48 | 0; //@line 7681
     HEAP32[$83 >> 2] = $22; //@line 7682
     $84 = $ReallocAsyncCtx + 52 | 0; //@line 7683
     HEAP32[$84 >> 2] = $67; //@line 7684
     $85 = $ReallocAsyncCtx + 56 | 0; //@line 7685
     $$expand_i1_val = $24 & 1; //@line 7686
     HEAP8[$85 >> 0] = $$expand_i1_val; //@line 7687
     $86 = $ReallocAsyncCtx + 60 | 0; //@line 7688
     HEAP32[$86 >> 2] = $26; //@line 7689
     $87 = $ReallocAsyncCtx + 64 | 0; //@line 7690
     HEAP32[$87 >> 2] = $28; //@line 7691
     $88 = $ReallocAsyncCtx + 68 | 0; //@line 7692
     HEAP32[$88 >> 2] = $30; //@line 7693
     $89 = $ReallocAsyncCtx + 72 | 0; //@line 7694
     HEAP32[$89 >> 2] = $32; //@line 7695
     $90 = $ReallocAsyncCtx + 76 | 0; //@line 7696
     HEAP32[$90 >> 2] = $34; //@line 7697
     $91 = $ReallocAsyncCtx + 80 | 0; //@line 7698
     HEAP32[$91 >> 2] = $36; //@line 7699
     sp = STACKTOP; //@line 7700
     return;
    } else if ((label | 0) == 21) {
     $95 = $$06992 + 20 | 0; //@line 7704
     HEAP32[$95 >> 2] = (HEAP32[$95 >> 2] | 0) + $93; //@line 7707
     $98 = _equeue_tick() | 0; //@line 7708
     $ReallocAsyncCtx4 = _emscripten_realloc_async_context(76) | 0; //@line 7709
     _equeue_enqueue($28, $$06992, $98) | 0; //@line 7710
     if (___async) {
      HEAP32[$ReallocAsyncCtx4 >> 2] = 133; //@line 7713
      $99 = $ReallocAsyncCtx4 + 4 | 0; //@line 7714
      HEAP32[$99 >> 2] = $2; //@line 7715
      $100 = $ReallocAsyncCtx4 + 8 | 0; //@line 7716
      HEAP32[$100 >> 2] = $4; //@line 7717
      $101 = $ReallocAsyncCtx4 + 12 | 0; //@line 7718
      HEAP32[$101 >> 2] = $6; //@line 7719
      $102 = $ReallocAsyncCtx4 + 16 | 0; //@line 7720
      HEAP32[$102 >> 2] = $8; //@line 7721
      $103 = $ReallocAsyncCtx4 + 20 | 0; //@line 7722
      HEAP32[$103 >> 2] = $10; //@line 7723
      $104 = $ReallocAsyncCtx4 + 24 | 0; //@line 7724
      HEAP32[$104 >> 2] = $12; //@line 7725
      $105 = $ReallocAsyncCtx4 + 28 | 0; //@line 7726
      HEAP32[$105 >> 2] = $14; //@line 7727
      $106 = $ReallocAsyncCtx4 + 32 | 0; //@line 7728
      HEAP32[$106 >> 2] = $18; //@line 7729
      $107 = $ReallocAsyncCtx4 + 36 | 0; //@line 7730
      HEAP32[$107 >> 2] = $20; //@line 7731
      $108 = $ReallocAsyncCtx4 + 40 | 0; //@line 7732
      HEAP32[$108 >> 2] = $22; //@line 7733
      $109 = $ReallocAsyncCtx4 + 44 | 0; //@line 7734
      HEAP32[$109 >> 2] = $67; //@line 7735
      $110 = $ReallocAsyncCtx4 + 48 | 0; //@line 7736
      $$expand_i1_val9 = $24 & 1; //@line 7737
      HEAP8[$110 >> 0] = $$expand_i1_val9; //@line 7738
      $111 = $ReallocAsyncCtx4 + 52 | 0; //@line 7739
      HEAP32[$111 >> 2] = $26; //@line 7740
      $112 = $ReallocAsyncCtx4 + 56 | 0; //@line 7741
      HEAP32[$112 >> 2] = $28; //@line 7742
      $113 = $ReallocAsyncCtx4 + 60 | 0; //@line 7743
      HEAP32[$113 >> 2] = $30; //@line 7744
      $114 = $ReallocAsyncCtx4 + 64 | 0; //@line 7745
      HEAP32[$114 >> 2] = $32; //@line 7746
      $115 = $ReallocAsyncCtx4 + 68 | 0; //@line 7747
      HEAP32[$115 >> 2] = $34; //@line 7748
      $116 = $ReallocAsyncCtx4 + 72 | 0; //@line 7749
      HEAP32[$116 >> 2] = $36; //@line 7750
      sp = STACKTOP; //@line 7751
      return;
     }
     ___async_unwind = 0; //@line 7754
     HEAP32[$ReallocAsyncCtx4 >> 2] = 133; //@line 7755
     $99 = $ReallocAsyncCtx4 + 4 | 0; //@line 7756
     HEAP32[$99 >> 2] = $2; //@line 7757
     $100 = $ReallocAsyncCtx4 + 8 | 0; //@line 7758
     HEAP32[$100 >> 2] = $4; //@line 7759
     $101 = $ReallocAsyncCtx4 + 12 | 0; //@line 7760
     HEAP32[$101 >> 2] = $6; //@line 7761
     $102 = $ReallocAsyncCtx4 + 16 | 0; //@line 7762
     HEAP32[$102 >> 2] = $8; //@line 7763
     $103 = $ReallocAsyncCtx4 + 20 | 0; //@line 7764
     HEAP32[$103 >> 2] = $10; //@line 7765
     $104 = $ReallocAsyncCtx4 + 24 | 0; //@line 7766
     HEAP32[$104 >> 2] = $12; //@line 7767
     $105 = $ReallocAsyncCtx4 + 28 | 0; //@line 7768
     HEAP32[$105 >> 2] = $14; //@line 7769
     $106 = $ReallocAsyncCtx4 + 32 | 0; //@line 7770
     HEAP32[$106 >> 2] = $18; //@line 7771
     $107 = $ReallocAsyncCtx4 + 36 | 0; //@line 7772
     HEAP32[$107 >> 2] = $20; //@line 7773
     $108 = $ReallocAsyncCtx4 + 40 | 0; //@line 7774
     HEAP32[$108 >> 2] = $22; //@line 7775
     $109 = $ReallocAsyncCtx4 + 44 | 0; //@line 7776
     HEAP32[$109 >> 2] = $67; //@line 7777
     $110 = $ReallocAsyncCtx4 + 48 | 0; //@line 7778
     $$expand_i1_val9 = $24 & 1; //@line 7779
     HEAP8[$110 >> 0] = $$expand_i1_val9; //@line 7780
     $111 = $ReallocAsyncCtx4 + 52 | 0; //@line 7781
     HEAP32[$111 >> 2] = $26; //@line 7782
     $112 = $ReallocAsyncCtx4 + 56 | 0; //@line 7783
     HEAP32[$112 >> 2] = $28; //@line 7784
     $113 = $ReallocAsyncCtx4 + 60 | 0; //@line 7785
     HEAP32[$113 >> 2] = $30; //@line 7786
     $114 = $ReallocAsyncCtx4 + 64 | 0; //@line 7787
     HEAP32[$114 >> 2] = $32; //@line 7788
     $115 = $ReallocAsyncCtx4 + 68 | 0; //@line 7789
     HEAP32[$115 >> 2] = $34; //@line 7790
     $116 = $ReallocAsyncCtx4 + 72 | 0; //@line 7791
     HEAP32[$116 >> 2] = $36; //@line 7792
     sp = STACKTOP; //@line 7793
     return;
    } else if ((label | 0) == 25) {
     $ReallocAsyncCtx2 = _emscripten_realloc_async_context(84) | 0; //@line 7798
     FUNCTION_TABLE_vi[$127 & 1023]($$06992 + 36 | 0); //@line 7799
     if (___async) {
      HEAP32[$ReallocAsyncCtx2 >> 2] = 134; //@line 7802
      $130 = $ReallocAsyncCtx2 + 4 | 0; //@line 7803
      HEAP32[$130 >> 2] = $2; //@line 7804
      $131 = $ReallocAsyncCtx2 + 8 | 0; //@line 7805
      HEAP32[$131 >> 2] = $4; //@line 7806
      $132 = $ReallocAsyncCtx2 + 12 | 0; //@line 7807
      HEAP32[$132 >> 2] = $6; //@line 7808
      $133 = $ReallocAsyncCtx2 + 16 | 0; //@line 7809
      HEAP32[$133 >> 2] = $8; //@line 7810
      $134 = $ReallocAsyncCtx2 + 20 | 0; //@line 7811
      HEAP32[$134 >> 2] = $10; //@line 7812
      $135 = $ReallocAsyncCtx2 + 24 | 0; //@line 7813
      HEAP32[$135 >> 2] = $12; //@line 7814
      $136 = $ReallocAsyncCtx2 + 28 | 0; //@line 7815
      HEAP32[$136 >> 2] = $14; //@line 7816
      $137 = $ReallocAsyncCtx2 + 32 | 0; //@line 7817
      HEAP32[$137 >> 2] = $18; //@line 7818
      $138 = $ReallocAsyncCtx2 + 36 | 0; //@line 7819
      HEAP32[$138 >> 2] = $20; //@line 7820
      $139 = $ReallocAsyncCtx2 + 40 | 0; //@line 7821
      HEAP32[$139 >> 2] = $$06992; //@line 7822
      $140 = $ReallocAsyncCtx2 + 44 | 0; //@line 7823
      HEAP32[$140 >> 2] = $66; //@line 7824
      $141 = $ReallocAsyncCtx2 + 48 | 0; //@line 7825
      HEAP32[$141 >> 2] = $22; //@line 7826
      $142 = $ReallocAsyncCtx2 + 52 | 0; //@line 7827
      HEAP32[$142 >> 2] = $67; //@line 7828
      $143 = $ReallocAsyncCtx2 + 56 | 0; //@line 7829
      $$expand_i1_val11 = $24 & 1; //@line 7830
      HEAP8[$143 >> 0] = $$expand_i1_val11; //@line 7831
      $144 = $ReallocAsyncCtx2 + 60 | 0; //@line 7832
      HEAP32[$144 >> 2] = $26; //@line 7833
      $145 = $ReallocAsyncCtx2 + 64 | 0; //@line 7834
      HEAP32[$145 >> 2] = $28; //@line 7835
      $146 = $ReallocAsyncCtx2 + 68 | 0; //@line 7836
      HEAP32[$146 >> 2] = $30; //@line 7837
      $147 = $ReallocAsyncCtx2 + 72 | 0; //@line 7838
      HEAP32[$147 >> 2] = $32; //@line 7839
      $148 = $ReallocAsyncCtx2 + 76 | 0; //@line 7840
      HEAP32[$148 >> 2] = $34; //@line 7841
      $149 = $ReallocAsyncCtx2 + 80 | 0; //@line 7842
      HEAP32[$149 >> 2] = $36; //@line 7843
      sp = STACKTOP; //@line 7844
      return;
     }
     ___async_unwind = 0; //@line 7847
     HEAP32[$ReallocAsyncCtx2 >> 2] = 134; //@line 7848
     $130 = $ReallocAsyncCtx2 + 4 | 0; //@line 7849
     HEAP32[$130 >> 2] = $2; //@line 7850
     $131 = $ReallocAsyncCtx2 + 8 | 0; //@line 7851
     HEAP32[$131 >> 2] = $4; //@line 7852
     $132 = $ReallocAsyncCtx2 + 12 | 0; //@line 7853
     HEAP32[$132 >> 2] = $6; //@line 7854
     $133 = $ReallocAsyncCtx2 + 16 | 0; //@line 7855
     HEAP32[$133 >> 2] = $8; //@line 7856
     $134 = $ReallocAsyncCtx2 + 20 | 0; //@line 7857
     HEAP32[$134 >> 2] = $10; //@line 7858
     $135 = $ReallocAsyncCtx2 + 24 | 0; //@line 7859
     HEAP32[$135 >> 2] = $12; //@line 7860
     $136 = $ReallocAsyncCtx2 + 28 | 0; //@line 7861
     HEAP32[$136 >> 2] = $14; //@line 7862
     $137 = $ReallocAsyncCtx2 + 32 | 0; //@line 7863
     HEAP32[$137 >> 2] = $18; //@line 7864
     $138 = $ReallocAsyncCtx2 + 36 | 0; //@line 7865
     HEAP32[$138 >> 2] = $20; //@line 7866
     $139 = $ReallocAsyncCtx2 + 40 | 0; //@line 7867
     HEAP32[$139 >> 2] = $$06992; //@line 7868
     $140 = $ReallocAsyncCtx2 + 44 | 0; //@line 7869
     HEAP32[$140 >> 2] = $66; //@line 7870
     $141 = $ReallocAsyncCtx2 + 48 | 0; //@line 7871
     HEAP32[$141 >> 2] = $22; //@line 7872
     $142 = $ReallocAsyncCtx2 + 52 | 0; //@line 7873
     HEAP32[$142 >> 2] = $67; //@line 7874
     $143 = $ReallocAsyncCtx2 + 56 | 0; //@line 7875
     $$expand_i1_val11 = $24 & 1; //@line 7876
     HEAP8[$143 >> 0] = $$expand_i1_val11; //@line 7877
     $144 = $ReallocAsyncCtx2 + 60 | 0; //@line 7878
     HEAP32[$144 >> 2] = $26; //@line 7879
     $145 = $ReallocAsyncCtx2 + 64 | 0; //@line 7880
     HEAP32[$145 >> 2] = $28; //@line 7881
     $146 = $ReallocAsyncCtx2 + 68 | 0; //@line 7882
     HEAP32[$146 >> 2] = $30; //@line 7883
     $147 = $ReallocAsyncCtx2 + 72 | 0; //@line 7884
     HEAP32[$147 >> 2] = $32; //@line 7885
     $148 = $ReallocAsyncCtx2 + 76 | 0; //@line 7886
     HEAP32[$148 >> 2] = $34; //@line 7887
     $149 = $ReallocAsyncCtx2 + 80 | 0; //@line 7888
     HEAP32[$149 >> 2] = $36; //@line 7889
     sp = STACKTOP; //@line 7890
     return;
    }
   }
  }
 } while (0);
 $165 = _equeue_tick() | 0; //@line 7896
 if ($24) {
  $166 = $26 - $165 | 0; //@line 7898
  if (($166 | 0) < 1) {
   $168 = $28 + 40 | 0; //@line 7901
   if (HEAP32[$168 >> 2] | 0) {
    _equeue_mutex_lock($4); //@line 7905
    $171 = HEAP32[$168 >> 2] | 0; //@line 7906
    if ($171 | 0) {
     $173 = HEAP32[$8 >> 2] | 0; //@line 7909
     if ($173 | 0) {
      $176 = HEAP32[$28 + 44 >> 2] | 0; //@line 7913
      $179 = (HEAP32[$173 + 20 >> 2] | 0) - $165 | 0; //@line 7916
      $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 7920
      FUNCTION_TABLE_vii[$171 & 31]($176, $179 & ~($179 >> 31)); //@line 7921
      if (___async) {
       HEAP32[$ReallocAsyncCtx3 >> 2] = 135; //@line 7924
       $183 = $ReallocAsyncCtx3 + 4 | 0; //@line 7925
       HEAP32[$183 >> 2] = $32; //@line 7926
       $184 = $ReallocAsyncCtx3 + 8 | 0; //@line 7927
       HEAP32[$184 >> 2] = $4; //@line 7928
       $185 = $ReallocAsyncCtx3 + 12 | 0; //@line 7929
       HEAP32[$185 >> 2] = $34; //@line 7930
       sp = STACKTOP; //@line 7931
       return;
      }
      ___async_unwind = 0; //@line 7934
      HEAP32[$ReallocAsyncCtx3 >> 2] = 135; //@line 7935
      $183 = $ReallocAsyncCtx3 + 4 | 0; //@line 7936
      HEAP32[$183 >> 2] = $32; //@line 7937
      $184 = $ReallocAsyncCtx3 + 8 | 0; //@line 7938
      HEAP32[$184 >> 2] = $4; //@line 7939
      $185 = $ReallocAsyncCtx3 + 12 | 0; //@line 7940
      HEAP32[$185 >> 2] = $34; //@line 7941
      sp = STACKTOP; //@line 7942
      return;
     }
    }
    HEAP8[$32 >> 0] = 1; //@line 7946
    _equeue_mutex_unlock($4); //@line 7947
   }
   HEAP8[$34 >> 0] = 0; //@line 7949
   return;
  } else {
   $$067 = $166; //@line 7952
  }
 } else {
  $$067 = -1; //@line 7955
 }
 _equeue_mutex_lock($4); //@line 7957
 $186 = HEAP32[$8 >> 2] | 0; //@line 7958
 if (!$186) {
  $$2 = $$067; //@line 7961
 } else {
  $190 = (HEAP32[$186 + 20 >> 2] | 0) - $165 | 0; //@line 7965
  $193 = $190 & ~($190 >> 31); //@line 7968
  $$2 = $193 >>> 0 < $$067 >>> 0 ? $193 : $$067; //@line 7971
 }
 _equeue_mutex_unlock($4); //@line 7973
 _equeue_sema_wait($36, $$2) | 0; //@line 7974
 do {
  if (HEAP8[$34 >> 0] | 0) {
   _equeue_mutex_lock($4); //@line 7979
   if (!(HEAP8[$34 >> 0] | 0)) {
    _equeue_mutex_unlock($4); //@line 7983
    break;
   }
   HEAP8[$34 >> 0] = 0; //@line 7986
   _equeue_mutex_unlock($4); //@line 7987
   return;
  }
 } while (0);
 $199 = _equeue_tick() | 0; //@line 7991
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(76) | 0; //@line 7992
 _wait_ms(20); //@line 7993
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 136; //@line 7996
  $200 = $ReallocAsyncCtx5 + 4 | 0; //@line 7997
  HEAP32[$200 >> 2] = $2; //@line 7998
  $201 = $ReallocAsyncCtx5 + 8 | 0; //@line 7999
  HEAP32[$201 >> 2] = $4; //@line 8000
  $202 = $ReallocAsyncCtx5 + 12 | 0; //@line 8001
  HEAP32[$202 >> 2] = $6; //@line 8002
  $203 = $ReallocAsyncCtx5 + 16 | 0; //@line 8003
  HEAP32[$203 >> 2] = $8; //@line 8004
  $204 = $ReallocAsyncCtx5 + 20 | 0; //@line 8005
  HEAP32[$204 >> 2] = $10; //@line 8006
  $205 = $ReallocAsyncCtx5 + 24 | 0; //@line 8007
  HEAP32[$205 >> 2] = $12; //@line 8008
  $206 = $ReallocAsyncCtx5 + 28 | 0; //@line 8009
  HEAP32[$206 >> 2] = $14; //@line 8010
  $207 = $ReallocAsyncCtx5 + 32 | 0; //@line 8011
  HEAP32[$207 >> 2] = $199; //@line 8012
  $208 = $ReallocAsyncCtx5 + 36 | 0; //@line 8013
  HEAP32[$208 >> 2] = $18; //@line 8014
  $209 = $ReallocAsyncCtx5 + 40 | 0; //@line 8015
  HEAP32[$209 >> 2] = $20; //@line 8016
  $210 = $ReallocAsyncCtx5 + 44 | 0; //@line 8017
  HEAP32[$210 >> 2] = $22; //@line 8018
  $211 = $ReallocAsyncCtx5 + 48 | 0; //@line 8019
  $$expand_i1_val13 = $24 & 1; //@line 8020
  HEAP8[$211 >> 0] = $$expand_i1_val13; //@line 8021
  $212 = $ReallocAsyncCtx5 + 52 | 0; //@line 8022
  HEAP32[$212 >> 2] = $26; //@line 8023
  $213 = $ReallocAsyncCtx5 + 56 | 0; //@line 8024
  HEAP32[$213 >> 2] = $28; //@line 8025
  $214 = $ReallocAsyncCtx5 + 60 | 0; //@line 8026
  HEAP32[$214 >> 2] = $30; //@line 8027
  $215 = $ReallocAsyncCtx5 + 64 | 0; //@line 8028
  HEAP32[$215 >> 2] = $32; //@line 8029
  $216 = $ReallocAsyncCtx5 + 68 | 0; //@line 8030
  HEAP32[$216 >> 2] = $34; //@line 8031
  $217 = $ReallocAsyncCtx5 + 72 | 0; //@line 8032
  HEAP32[$217 >> 2] = $36; //@line 8033
  sp = STACKTOP; //@line 8034
  return;
 }
 ___async_unwind = 0; //@line 8037
 HEAP32[$ReallocAsyncCtx5 >> 2] = 136; //@line 8038
 $200 = $ReallocAsyncCtx5 + 4 | 0; //@line 8039
 HEAP32[$200 >> 2] = $2; //@line 8040
 $201 = $ReallocAsyncCtx5 + 8 | 0; //@line 8041
 HEAP32[$201 >> 2] = $4; //@line 8042
 $202 = $ReallocAsyncCtx5 + 12 | 0; //@line 8043
 HEAP32[$202 >> 2] = $6; //@line 8044
 $203 = $ReallocAsyncCtx5 + 16 | 0; //@line 8045
 HEAP32[$203 >> 2] = $8; //@line 8046
 $204 = $ReallocAsyncCtx5 + 20 | 0; //@line 8047
 HEAP32[$204 >> 2] = $10; //@line 8048
 $205 = $ReallocAsyncCtx5 + 24 | 0; //@line 8049
 HEAP32[$205 >> 2] = $12; //@line 8050
 $206 = $ReallocAsyncCtx5 + 28 | 0; //@line 8051
 HEAP32[$206 >> 2] = $14; //@line 8052
 $207 = $ReallocAsyncCtx5 + 32 | 0; //@line 8053
 HEAP32[$207 >> 2] = $199; //@line 8054
 $208 = $ReallocAsyncCtx5 + 36 | 0; //@line 8055
 HEAP32[$208 >> 2] = $18; //@line 8056
 $209 = $ReallocAsyncCtx5 + 40 | 0; //@line 8057
 HEAP32[$209 >> 2] = $20; //@line 8058
 $210 = $ReallocAsyncCtx5 + 44 | 0; //@line 8059
 HEAP32[$210 >> 2] = $22; //@line 8060
 $211 = $ReallocAsyncCtx5 + 48 | 0; //@line 8061
 $$expand_i1_val13 = $24 & 1; //@line 8062
 HEAP8[$211 >> 0] = $$expand_i1_val13; //@line 8063
 $212 = $ReallocAsyncCtx5 + 52 | 0; //@line 8064
 HEAP32[$212 >> 2] = $26; //@line 8065
 $213 = $ReallocAsyncCtx5 + 56 | 0; //@line 8066
 HEAP32[$213 >> 2] = $28; //@line 8067
 $214 = $ReallocAsyncCtx5 + 60 | 0; //@line 8068
 HEAP32[$214 >> 2] = $30; //@line 8069
 $215 = $ReallocAsyncCtx5 + 64 | 0; //@line 8070
 HEAP32[$215 >> 2] = $32; //@line 8071
 $216 = $ReallocAsyncCtx5 + 68 | 0; //@line 8072
 HEAP32[$216 >> 2] = $34; //@line 8073
 $217 = $ReallocAsyncCtx5 + 72 | 0; //@line 8074
 HEAP32[$217 >> 2] = $36; //@line 8075
 sp = STACKTOP; //@line 8076
 return;
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_197($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $10 = 0, $100 = 0, $103 = 0, $105 = 0, $106 = 0, $111 = 0, $113 = 0, $114 = 0, $115 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $139 = 0, $14 = 0, $140 = 0, $142 = 0, $143 = 0, $144 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $180 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $194 = 0, $195 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $211 = 0, $215 = 0, $216 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $24 = 0, $28 = 0, $4 = 0, $42 = 0, $46 = 0, $51 = 0, $57 = 0, $58 = 0, $6 = 0, $63 = 0, $67 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $84 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 958
 STACKTOP = STACKTOP + 16 | 0; //@line 959
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 959
 $$byval_copy = sp; //@line 960
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 962
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 964
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 966
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 968
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 970
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 972
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 974
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 978
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 980
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 982
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 984
 do {
  if (HEAP8[$2 >> 0] & 2) {
   $28 = $4 + 288 | 0; //@line 990
   if (!(HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($28) | 0) + 10 >> 0] | 0)) {
    if ((HEAPU8[$4 + 895 >> 0] | 0) <= (HEAPU8[$4 + 894 >> 0] | 0)) {
     break;
    }
   }
   HEAP8[$4 + 377 >> 0] = 0; //@line 1006
   HEAP8[$24 >> 0] = 0; //@line 1007
   if (!(HEAP8[$4 + 370 >> 0] | 0)) {
    $42 = $4 + 956 | 0; //@line 1012
    HEAP32[$42 >> 2] = (HEAP32[$42 >> 2] | 0) + 1; //@line 1015
   }
   $46 = HEAP8[$4 + 895 >> 0] | 0; //@line 1018
   HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($28) | 0) + 11 >> 0] = $46; //@line 1021
   HEAP32[$18 >> 2] = HEAP32[$18 >> 2] & -2; //@line 1024
  }
 } while (0);
 $51 = $4 + 377 | 0; //@line 1027
 if (HEAP8[$51 >> 0] | 0) {
  if (!(HEAP32[$18 >> 2] & 16)) {
   HEAP8[$51 >> 0] = 0; //@line 1035
   $57 = $4 + 895 | 0; //@line 1036
   $58 = HEAP8[$57 >> 0] | 0; //@line 1037
   if (!(($58 & 255) < 9 ? ($58 & 255) < (HEAPU8[$4 + 894 >> 0] | 0) : 0)) {
    $84 = HEAP32[$4 >> 2] | 0; //@line 1044
    $87 = HEAP32[(HEAP32[$84 >> 2] | 0) + 16 >> 2] | 0; //@line 1047
    $ReallocAsyncCtx = _emscripten_realloc_async_context(52) | 0; //@line 1048
    FUNCTION_TABLE_vi[$87 & 1023]($84); //@line 1049
    if (___async) {
     HEAP32[$ReallocAsyncCtx >> 2] = 397; //@line 1052
     $88 = $ReallocAsyncCtx + 4 | 0; //@line 1053
     HEAP32[$88 >> 2] = $2; //@line 1054
     $89 = $ReallocAsyncCtx + 8 | 0; //@line 1055
     HEAP32[$89 >> 2] = $4; //@line 1056
     $90 = $ReallocAsyncCtx + 12 | 0; //@line 1057
     HEAP32[$90 >> 2] = $18; //@line 1058
     $91 = $ReallocAsyncCtx + 16 | 0; //@line 1059
     HEAP32[$91 >> 2] = $24; //@line 1060
     $92 = $ReallocAsyncCtx + 20 | 0; //@line 1061
     HEAP32[$92 >> 2] = $57; //@line 1062
     $93 = $ReallocAsyncCtx + 24 | 0; //@line 1063
     HEAP32[$93 >> 2] = $6; //@line 1064
     $94 = $ReallocAsyncCtx + 28 | 0; //@line 1065
     HEAP32[$94 >> 2] = $8; //@line 1066
     $95 = $ReallocAsyncCtx + 32 | 0; //@line 1067
     HEAP32[$95 >> 2] = $10; //@line 1068
     $96 = $ReallocAsyncCtx + 36 | 0; //@line 1069
     HEAP32[$96 >> 2] = $12; //@line 1070
     $97 = $ReallocAsyncCtx + 40 | 0; //@line 1071
     HEAP32[$97 >> 2] = $14; //@line 1072
     $98 = $ReallocAsyncCtx + 44 | 0; //@line 1073
     HEAP32[$98 >> 2] = $20; //@line 1074
     $99 = $ReallocAsyncCtx + 48 | 0; //@line 1075
     HEAP32[$99 >> 2] = $22; //@line 1076
     sp = STACKTOP; //@line 1077
     STACKTOP = sp; //@line 1078
     return;
    }
    ___async_unwind = 0; //@line 1080
    HEAP32[$ReallocAsyncCtx >> 2] = 397; //@line 1081
    $88 = $ReallocAsyncCtx + 4 | 0; //@line 1082
    HEAP32[$88 >> 2] = $2; //@line 1083
    $89 = $ReallocAsyncCtx + 8 | 0; //@line 1084
    HEAP32[$89 >> 2] = $4; //@line 1085
    $90 = $ReallocAsyncCtx + 12 | 0; //@line 1086
    HEAP32[$90 >> 2] = $18; //@line 1087
    $91 = $ReallocAsyncCtx + 16 | 0; //@line 1088
    HEAP32[$91 >> 2] = $24; //@line 1089
    $92 = $ReallocAsyncCtx + 20 | 0; //@line 1090
    HEAP32[$92 >> 2] = $57; //@line 1091
    $93 = $ReallocAsyncCtx + 24 | 0; //@line 1092
    HEAP32[$93 >> 2] = $6; //@line 1093
    $94 = $ReallocAsyncCtx + 28 | 0; //@line 1094
    HEAP32[$94 >> 2] = $8; //@line 1095
    $95 = $ReallocAsyncCtx + 32 | 0; //@line 1096
    HEAP32[$95 >> 2] = $10; //@line 1097
    $96 = $ReallocAsyncCtx + 36 | 0; //@line 1098
    HEAP32[$96 >> 2] = $12; //@line 1099
    $97 = $ReallocAsyncCtx + 40 | 0; //@line 1100
    HEAP32[$97 >> 2] = $14; //@line 1101
    $98 = $ReallocAsyncCtx + 44 | 0; //@line 1102
    HEAP32[$98 >> 2] = $20; //@line 1103
    $99 = $ReallocAsyncCtx + 48 | 0; //@line 1104
    HEAP32[$99 >> 2] = $22; //@line 1105
    sp = STACKTOP; //@line 1106
    STACKTOP = sp; //@line 1107
    return;
   }
   $63 = $58 + 1 << 24 >> 24; //@line 1109
   HEAP8[$57 >> 0] = $63; //@line 1110
   if ($63 & 1) {
    $67 = $4 + 1097 | 0; //@line 1115
    HEAP8[$67 >> 0] = __ZN7LoRaPHY26get_next_lower_tx_datarateEa(HEAP32[$4 >> 2] | 0, HEAP8[$67 >> 0] | 0) | 0; //@line 1118
   }
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(52) | 0; //@line 1120
   $70 = __ZN7LoRaMac11schedule_txEv($4) | 0; //@line 1121
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 396; //@line 1124
    $71 = $ReallocAsyncCtx7 + 4 | 0; //@line 1125
    HEAP32[$71 >> 2] = $2; //@line 1126
    $72 = $ReallocAsyncCtx7 + 8 | 0; //@line 1127
    HEAP32[$72 >> 2] = $4; //@line 1128
    $73 = $ReallocAsyncCtx7 + 12 | 0; //@line 1129
    HEAP32[$73 >> 2] = $18; //@line 1130
    $74 = $ReallocAsyncCtx7 + 16 | 0; //@line 1131
    HEAP32[$74 >> 2] = $24; //@line 1132
    $75 = $ReallocAsyncCtx7 + 20 | 0; //@line 1133
    HEAP32[$75 >> 2] = $57; //@line 1134
    $76 = $ReallocAsyncCtx7 + 24 | 0; //@line 1135
    HEAP32[$76 >> 2] = $6; //@line 1136
    $77 = $ReallocAsyncCtx7 + 28 | 0; //@line 1137
    HEAP32[$77 >> 2] = $8; //@line 1138
    $78 = $ReallocAsyncCtx7 + 32 | 0; //@line 1139
    HEAP32[$78 >> 2] = $10; //@line 1140
    $79 = $ReallocAsyncCtx7 + 36 | 0; //@line 1141
    HEAP32[$79 >> 2] = $12; //@line 1142
    $80 = $ReallocAsyncCtx7 + 40 | 0; //@line 1143
    HEAP32[$80 >> 2] = $14; //@line 1144
    $81 = $ReallocAsyncCtx7 + 44 | 0; //@line 1145
    HEAP32[$81 >> 2] = $20; //@line 1146
    $82 = $ReallocAsyncCtx7 + 48 | 0; //@line 1147
    HEAP32[$82 >> 2] = $22; //@line 1148
    sp = STACKTOP; //@line 1149
    STACKTOP = sp; //@line 1150
    return;
   }
   HEAP32[___async_retval >> 2] = $70; //@line 1153
   ___async_unwind = 0; //@line 1154
   HEAP32[$ReallocAsyncCtx7 >> 2] = 396; //@line 1155
   $71 = $ReallocAsyncCtx7 + 4 | 0; //@line 1156
   HEAP32[$71 >> 2] = $2; //@line 1157
   $72 = $ReallocAsyncCtx7 + 8 | 0; //@line 1158
   HEAP32[$72 >> 2] = $4; //@line 1159
   $73 = $ReallocAsyncCtx7 + 12 | 0; //@line 1160
   HEAP32[$73 >> 2] = $18; //@line 1161
   $74 = $ReallocAsyncCtx7 + 16 | 0; //@line 1162
   HEAP32[$74 >> 2] = $24; //@line 1163
   $75 = $ReallocAsyncCtx7 + 20 | 0; //@line 1164
   HEAP32[$75 >> 2] = $57; //@line 1165
   $76 = $ReallocAsyncCtx7 + 24 | 0; //@line 1166
   HEAP32[$76 >> 2] = $6; //@line 1167
   $77 = $ReallocAsyncCtx7 + 28 | 0; //@line 1168
   HEAP32[$77 >> 2] = $8; //@line 1169
   $78 = $ReallocAsyncCtx7 + 32 | 0; //@line 1170
   HEAP32[$78 >> 2] = $10; //@line 1171
   $79 = $ReallocAsyncCtx7 + 36 | 0; //@line 1172
   HEAP32[$79 >> 2] = $12; //@line 1173
   $80 = $ReallocAsyncCtx7 + 40 | 0; //@line 1174
   HEAP32[$80 >> 2] = $14; //@line 1175
   $81 = $ReallocAsyncCtx7 + 44 | 0; //@line 1176
   HEAP32[$81 >> 2] = $20; //@line 1177
   $82 = $ReallocAsyncCtx7 + 48 | 0; //@line 1178
   HEAP32[$82 >> 2] = $22; //@line 1179
   sp = STACKTOP; //@line 1180
   STACKTOP = sp; //@line 1181
   return;
  }
 }
 $100 = HEAP32[$18 >> 2] | 0; //@line 1184
 $103 = $100 & -3; //@line 1187
 if (!($100 & 2)) {
  $105 = $100; //@line 1189
 } else {
  HEAP32[$18 >> 2] = $103; //@line 1191
  $105 = $103; //@line 1192
 }
 if ($105 | 0) {
  $172 = HEAP32[$20 >> 2] | 0; //@line 1196
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 1197
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($172, $22, 1e3); //@line 1198
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 402; //@line 1201
   $173 = $ReallocAsyncCtx6 + 4 | 0; //@line 1202
   HEAP32[$173 >> 2] = $2; //@line 1203
   $174 = $ReallocAsyncCtx6 + 8 | 0; //@line 1204
   HEAP32[$174 >> 2] = $4; //@line 1205
   $175 = $ReallocAsyncCtx6 + 12 | 0; //@line 1206
   HEAP32[$175 >> 2] = $6; //@line 1207
   $176 = $ReallocAsyncCtx6 + 16 | 0; //@line 1208
   HEAP32[$176 >> 2] = $8; //@line 1209
   $177 = $ReallocAsyncCtx6 + 20 | 0; //@line 1210
   HEAP32[$177 >> 2] = $10; //@line 1211
   sp = STACKTOP; //@line 1212
   STACKTOP = sp; //@line 1213
   return;
  }
  ___async_unwind = 0; //@line 1215
  HEAP32[$ReallocAsyncCtx6 >> 2] = 402; //@line 1216
  $173 = $ReallocAsyncCtx6 + 4 | 0; //@line 1217
  HEAP32[$173 >> 2] = $2; //@line 1218
  $174 = $ReallocAsyncCtx6 + 8 | 0; //@line 1219
  HEAP32[$174 >> 2] = $4; //@line 1220
  $175 = $ReallocAsyncCtx6 + 12 | 0; //@line 1221
  HEAP32[$175 >> 2] = $6; //@line 1222
  $176 = $ReallocAsyncCtx6 + 16 | 0; //@line 1223
  HEAP32[$176 >> 2] = $8; //@line 1224
  $177 = $ReallocAsyncCtx6 + 20 | 0; //@line 1225
  HEAP32[$177 >> 2] = $10; //@line 1226
  sp = STACKTOP; //@line 1227
  STACKTOP = sp; //@line 1228
  return;
 }
 $106 = HEAP8[$2 >> 0] | 0; //@line 1230
 if ($106 & 1) {
  HEAP8[$2 >> 0] = $106 & -2; //@line 1235
  $111 = HEAP32[$4 + 1324 >> 2] | 0; //@line 1237
  $113 = __ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0; //@line 1239
  $114 = $111 + 12 | 0; //@line 1240
  $115 = HEAP32[$114 >> 2] | 0; //@line 1241
  if (!$115) {
   $ReallocAsyncCtx16 = _emscripten_realloc_async_context(44) | 0; //@line 1244
   _mbed_assert_internal(15679, 15684, 1102); //@line 1245
   if (___async) {
    HEAP32[$ReallocAsyncCtx16 >> 2] = 398; //@line 1248
    $117 = $ReallocAsyncCtx16 + 4 | 0; //@line 1249
    HEAP32[$117 >> 2] = $2; //@line 1250
    $118 = $ReallocAsyncCtx16 + 8 | 0; //@line 1251
    HEAP32[$118 >> 2] = $4; //@line 1252
    $119 = $ReallocAsyncCtx16 + 12 | 0; //@line 1253
    HEAP32[$119 >> 2] = $111; //@line 1254
    $120 = $ReallocAsyncCtx16 + 16 | 0; //@line 1255
    HEAP32[$120 >> 2] = $113; //@line 1256
    $121 = $ReallocAsyncCtx16 + 20 | 0; //@line 1257
    HEAP32[$121 >> 2] = $114; //@line 1258
    $122 = $ReallocAsyncCtx16 + 24 | 0; //@line 1259
    HEAP32[$122 >> 2] = $6; //@line 1260
    $123 = $ReallocAsyncCtx16 + 28 | 0; //@line 1261
    HEAP32[$123 >> 2] = $8; //@line 1262
    $124 = $ReallocAsyncCtx16 + 32 | 0; //@line 1263
    HEAP32[$124 >> 2] = $10; //@line 1264
    $125 = $ReallocAsyncCtx16 + 36 | 0; //@line 1265
    HEAP32[$125 >> 2] = $12; //@line 1266
    $126 = $ReallocAsyncCtx16 + 40 | 0; //@line 1267
    HEAP32[$126 >> 2] = $14; //@line 1268
    sp = STACKTOP; //@line 1269
    STACKTOP = sp; //@line 1270
    return;
   }
   ___async_unwind = 0; //@line 1272
   HEAP32[$ReallocAsyncCtx16 >> 2] = 398; //@line 1273
   $117 = $ReallocAsyncCtx16 + 4 | 0; //@line 1274
   HEAP32[$117 >> 2] = $2; //@line 1275
   $118 = $ReallocAsyncCtx16 + 8 | 0; //@line 1276
   HEAP32[$118 >> 2] = $4; //@line 1277
   $119 = $ReallocAsyncCtx16 + 12 | 0; //@line 1278
   HEAP32[$119 >> 2] = $111; //@line 1279
   $120 = $ReallocAsyncCtx16 + 16 | 0; //@line 1280
   HEAP32[$120 >> 2] = $113; //@line 1281
   $121 = $ReallocAsyncCtx16 + 20 | 0; //@line 1282
   HEAP32[$121 >> 2] = $114; //@line 1283
   $122 = $ReallocAsyncCtx16 + 24 | 0; //@line 1284
   HEAP32[$122 >> 2] = $6; //@line 1285
   $123 = $ReallocAsyncCtx16 + 28 | 0; //@line 1286
   HEAP32[$123 >> 2] = $8; //@line 1287
   $124 = $ReallocAsyncCtx16 + 32 | 0; //@line 1288
   HEAP32[$124 >> 2] = $10; //@line 1289
   $125 = $ReallocAsyncCtx16 + 36 | 0; //@line 1290
   HEAP32[$125 >> 2] = $12; //@line 1291
   $126 = $ReallocAsyncCtx16 + 40 | 0; //@line 1292
   HEAP32[$126 >> 2] = $14; //@line 1293
   sp = STACKTOP; //@line 1294
   STACKTOP = sp; //@line 1295
   return;
  } else {
   $127 = HEAP32[$115 >> 2] | 0; //@line 1297
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 1298
   FUNCTION_TABLE_vii[$127 & 31]($111, $113); //@line 1299
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 399; //@line 1302
    $128 = $ReallocAsyncCtx2 + 4 | 0; //@line 1303
    HEAP32[$128 >> 2] = $2; //@line 1304
    $129 = $ReallocAsyncCtx2 + 8 | 0; //@line 1305
    HEAP32[$129 >> 2] = $4; //@line 1306
    $130 = $ReallocAsyncCtx2 + 12 | 0; //@line 1307
    HEAP32[$130 >> 2] = $6; //@line 1308
    $131 = $ReallocAsyncCtx2 + 16 | 0; //@line 1309
    HEAP32[$131 >> 2] = $8; //@line 1310
    $132 = $ReallocAsyncCtx2 + 20 | 0; //@line 1311
    HEAP32[$132 >> 2] = $10; //@line 1312
    $133 = $ReallocAsyncCtx2 + 24 | 0; //@line 1313
    HEAP32[$133 >> 2] = $12; //@line 1314
    $134 = $ReallocAsyncCtx2 + 28 | 0; //@line 1315
    HEAP32[$134 >> 2] = $14; //@line 1316
    sp = STACKTOP; //@line 1317
    STACKTOP = sp; //@line 1318
    return;
   }
   ___async_unwind = 0; //@line 1320
   HEAP32[$ReallocAsyncCtx2 >> 2] = 399; //@line 1321
   $128 = $ReallocAsyncCtx2 + 4 | 0; //@line 1322
   HEAP32[$128 >> 2] = $2; //@line 1323
   $129 = $ReallocAsyncCtx2 + 8 | 0; //@line 1324
   HEAP32[$129 >> 2] = $4; //@line 1325
   $130 = $ReallocAsyncCtx2 + 12 | 0; //@line 1326
   HEAP32[$130 >> 2] = $6; //@line 1327
   $131 = $ReallocAsyncCtx2 + 16 | 0; //@line 1328
   HEAP32[$131 >> 2] = $8; //@line 1329
   $132 = $ReallocAsyncCtx2 + 20 | 0; //@line 1330
   HEAP32[$132 >> 2] = $10; //@line 1331
   $133 = $ReallocAsyncCtx2 + 24 | 0; //@line 1332
   HEAP32[$133 >> 2] = $12; //@line 1333
   $134 = $ReallocAsyncCtx2 + 28 | 0; //@line 1334
   HEAP32[$134 >> 2] = $14; //@line 1335
   sp = STACKTOP; //@line 1336
   STACKTOP = sp; //@line 1337
   return;
  }
 }
 if ($106 & 8) {
  HEAP8[$2 >> 0] = $106 & -9; //@line 1344
  $139 = HEAP32[$4 + 1324 >> 2] | 0; //@line 1346
  $140 = $139 + 32 | 0; //@line 1347
  $142 = __ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0; //@line 1349
  $143 = $139 + 44 | 0; //@line 1350
  $144 = HEAP32[$143 >> 2] | 0; //@line 1351
  if (!$144) {
   $ReallocAsyncCtx15 = _emscripten_realloc_async_context(44) | 0; //@line 1354
   _mbed_assert_internal(15679, 15684, 1102); //@line 1355
   if (___async) {
    HEAP32[$ReallocAsyncCtx15 >> 2] = 400; //@line 1358
    $146 = $ReallocAsyncCtx15 + 4 | 0; //@line 1359
    HEAP32[$146 >> 2] = $2; //@line 1360
    $147 = $ReallocAsyncCtx15 + 8 | 0; //@line 1361
    HEAP32[$147 >> 2] = $4; //@line 1362
    $148 = $ReallocAsyncCtx15 + 12 | 0; //@line 1363
    HEAP32[$148 >> 2] = $140; //@line 1364
    $149 = $ReallocAsyncCtx15 + 16 | 0; //@line 1365
    HEAP32[$149 >> 2] = $142; //@line 1366
    $150 = $ReallocAsyncCtx15 + 20 | 0; //@line 1367
    HEAP32[$150 >> 2] = $6; //@line 1368
    $151 = $ReallocAsyncCtx15 + 24 | 0; //@line 1369
    HEAP32[$151 >> 2] = $8; //@line 1370
    $152 = $ReallocAsyncCtx15 + 28 | 0; //@line 1371
    HEAP32[$152 >> 2] = $10; //@line 1372
    $153 = $ReallocAsyncCtx15 + 32 | 0; //@line 1373
    HEAP32[$153 >> 2] = $12; //@line 1374
    $154 = $ReallocAsyncCtx15 + 36 | 0; //@line 1375
    HEAP32[$154 >> 2] = $14; //@line 1376
    $155 = $ReallocAsyncCtx15 + 40 | 0; //@line 1377
    HEAP32[$155 >> 2] = $143; //@line 1378
    sp = STACKTOP; //@line 1379
    STACKTOP = sp; //@line 1380
    return;
   }
   ___async_unwind = 0; //@line 1382
   HEAP32[$ReallocAsyncCtx15 >> 2] = 400; //@line 1383
   $146 = $ReallocAsyncCtx15 + 4 | 0; //@line 1384
   HEAP32[$146 >> 2] = $2; //@line 1385
   $147 = $ReallocAsyncCtx15 + 8 | 0; //@line 1386
   HEAP32[$147 >> 2] = $4; //@line 1387
   $148 = $ReallocAsyncCtx15 + 12 | 0; //@line 1388
   HEAP32[$148 >> 2] = $140; //@line 1389
   $149 = $ReallocAsyncCtx15 + 16 | 0; //@line 1390
   HEAP32[$149 >> 2] = $142; //@line 1391
   $150 = $ReallocAsyncCtx15 + 20 | 0; //@line 1392
   HEAP32[$150 >> 2] = $6; //@line 1393
   $151 = $ReallocAsyncCtx15 + 24 | 0; //@line 1394
   HEAP32[$151 >> 2] = $8; //@line 1395
   $152 = $ReallocAsyncCtx15 + 28 | 0; //@line 1396
   HEAP32[$152 >> 2] = $10; //@line 1397
   $153 = $ReallocAsyncCtx15 + 32 | 0; //@line 1398
   HEAP32[$153 >> 2] = $12; //@line 1399
   $154 = $ReallocAsyncCtx15 + 36 | 0; //@line 1400
   HEAP32[$154 >> 2] = $14; //@line 1401
   $155 = $ReallocAsyncCtx15 + 40 | 0; //@line 1402
   HEAP32[$155 >> 2] = $143; //@line 1403
   sp = STACKTOP; //@line 1404
   STACKTOP = sp; //@line 1405
   return;
  } else {
   $156 = HEAP32[$144 >> 2] | 0; //@line 1407
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 1408
   FUNCTION_TABLE_vii[$156 & 31]($140, $142); //@line 1409
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 401; //@line 1412
    $157 = $ReallocAsyncCtx3 + 4 | 0; //@line 1413
    HEAP32[$157 >> 2] = $4; //@line 1414
    $158 = $ReallocAsyncCtx3 + 8 | 0; //@line 1415
    HEAP32[$158 >> 2] = $2; //@line 1416
    $159 = $ReallocAsyncCtx3 + 12 | 0; //@line 1417
    HEAP32[$159 >> 2] = $6; //@line 1418
    $160 = $ReallocAsyncCtx3 + 16 | 0; //@line 1419
    HEAP32[$160 >> 2] = $8; //@line 1420
    $161 = $ReallocAsyncCtx3 + 20 | 0; //@line 1421
    HEAP32[$161 >> 2] = $10; //@line 1422
    $162 = $ReallocAsyncCtx3 + 24 | 0; //@line 1423
    HEAP32[$162 >> 2] = $12; //@line 1424
    $163 = $ReallocAsyncCtx3 + 28 | 0; //@line 1425
    HEAP32[$163 >> 2] = $14; //@line 1426
    sp = STACKTOP; //@line 1427
    STACKTOP = sp; //@line 1428
    return;
   }
   ___async_unwind = 0; //@line 1430
   HEAP32[$ReallocAsyncCtx3 >> 2] = 401; //@line 1431
   $157 = $ReallocAsyncCtx3 + 4 | 0; //@line 1432
   HEAP32[$157 >> 2] = $4; //@line 1433
   $158 = $ReallocAsyncCtx3 + 8 | 0; //@line 1434
   HEAP32[$158 >> 2] = $2; //@line 1435
   $159 = $ReallocAsyncCtx3 + 12 | 0; //@line 1436
   HEAP32[$159 >> 2] = $6; //@line 1437
   $160 = $ReallocAsyncCtx3 + 16 | 0; //@line 1438
   HEAP32[$160 >> 2] = $8; //@line 1439
   $161 = $ReallocAsyncCtx3 + 20 | 0; //@line 1440
   HEAP32[$161 >> 2] = $10; //@line 1441
   $162 = $ReallocAsyncCtx3 + 24 | 0; //@line 1442
   HEAP32[$162 >> 2] = $12; //@line 1443
   $163 = $ReallocAsyncCtx3 + 28 | 0; //@line 1444
   HEAP32[$163 >> 2] = $14; //@line 1445
   sp = STACKTOP; //@line 1446
   STACKTOP = sp; //@line 1447
   return;
  }
 }
 if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($4 + 4 | 0) | 0) {
  _mbed_tracef(16, 13728, 13889, $12); //@line 1453
  HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0) >> 2] = 4; //@line 1456
  $169 = HEAP8[$2 >> 0] | 16; //@line 1458
  HEAP8[$2 >> 0] = $169; //@line 1459
  $171 = $169; //@line 1460
 } else {
  $171 = HEAP8[$2 >> 0] | 0; //@line 1463
 }
 $170 = $171 & -33; //@line 1465
 HEAP8[$2 >> 0] = $170; //@line 1466
 do {
  if (!($170 & 2)) {
   $211 = $170; //@line 1471
  } else {
   $180 = $170 & -3; //@line 1473
   HEAP8[$2 >> 0] = $180; //@line 1474
   if ((HEAP32[$4 + 360 >> 2] | 0) == 2) {
    _mbed_tracef(16, 13728, 13747, $8); //@line 1479
    $185 = HEAP32[$4 + 1328 >> 2] | 0; //@line 1481
    HEAP32[$6 >> 2] = 293; //@line 1482
    HEAP32[$6 + 4 >> 2] = 0; //@line 1484
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 1485
    HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 1486
    HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 1486
    $186 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($185, $4, $$byval_copy) | 0; //@line 1487
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 403; //@line 1490
     $187 = $ReallocAsyncCtx8 + 4 | 0; //@line 1491
     HEAP32[$187 >> 2] = $2; //@line 1492
     $188 = $ReallocAsyncCtx8 + 8 | 0; //@line 1493
     HEAP32[$188 >> 2] = $4; //@line 1494
     $189 = $ReallocAsyncCtx8 + 12 | 0; //@line 1495
     HEAP32[$189 >> 2] = $6; //@line 1496
     sp = STACKTOP; //@line 1497
     STACKTOP = sp; //@line 1498
     return;
    }
    HEAP32[___async_retval >> 2] = $186; //@line 1501
    ___async_unwind = 0; //@line 1502
    HEAP32[$ReallocAsyncCtx8 >> 2] = 403; //@line 1503
    $187 = $ReallocAsyncCtx8 + 4 | 0; //@line 1504
    HEAP32[$187 >> 2] = $2; //@line 1505
    $188 = $ReallocAsyncCtx8 + 8 | 0; //@line 1506
    HEAP32[$188 >> 2] = $4; //@line 1507
    $189 = $ReallocAsyncCtx8 + 12 | 0; //@line 1508
    HEAP32[$189 >> 2] = $6; //@line 1509
    sp = STACKTOP; //@line 1510
    STACKTOP = sp; //@line 1511
    return;
   }
   if ($180 & 4) {
    $209 = $180 & -5; //@line 1516
    HEAP8[$2 >> 0] = $209; //@line 1517
    $211 = $209; //@line 1518
    break;
   }
   $194 = HEAP32[$4 + 1324 >> 2] | 0; //@line 1522
   $195 = $194 + 16 | 0; //@line 1523
   $197 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 1525
   $198 = $194 + 28 | 0; //@line 1526
   $199 = HEAP32[$198 >> 2] | 0; //@line 1527
   if (!$199) {
    $ReallocAsyncCtx13 = _emscripten_realloc_async_context(24) | 0; //@line 1530
    _mbed_assert_internal(15679, 15684, 1102); //@line 1531
    if (___async) {
     HEAP32[$ReallocAsyncCtx13 >> 2] = 405; //@line 1534
     $201 = $ReallocAsyncCtx13 + 4 | 0; //@line 1535
     HEAP32[$201 >> 2] = $198; //@line 1536
     $202 = $ReallocAsyncCtx13 + 8 | 0; //@line 1537
     HEAP32[$202 >> 2] = $195; //@line 1538
     $203 = $ReallocAsyncCtx13 + 12 | 0; //@line 1539
     HEAP32[$203 >> 2] = $197; //@line 1540
     $204 = $ReallocAsyncCtx13 + 16 | 0; //@line 1541
     HEAP32[$204 >> 2] = $2; //@line 1542
     $205 = $ReallocAsyncCtx13 + 20 | 0; //@line 1543
     HEAP32[$205 >> 2] = $4; //@line 1544
     sp = STACKTOP; //@line 1545
     STACKTOP = sp; //@line 1546
     return;
    }
    ___async_unwind = 0; //@line 1548
    HEAP32[$ReallocAsyncCtx13 >> 2] = 405; //@line 1549
    $201 = $ReallocAsyncCtx13 + 4 | 0; //@line 1550
    HEAP32[$201 >> 2] = $198; //@line 1551
    $202 = $ReallocAsyncCtx13 + 8 | 0; //@line 1552
    HEAP32[$202 >> 2] = $195; //@line 1553
    $203 = $ReallocAsyncCtx13 + 12 | 0; //@line 1554
    HEAP32[$203 >> 2] = $197; //@line 1555
    $204 = $ReallocAsyncCtx13 + 16 | 0; //@line 1556
    HEAP32[$204 >> 2] = $2; //@line 1557
    $205 = $ReallocAsyncCtx13 + 20 | 0; //@line 1558
    HEAP32[$205 >> 2] = $4; //@line 1559
    sp = STACKTOP; //@line 1560
    STACKTOP = sp; //@line 1561
    return;
   } else {
    $206 = HEAP32[$199 >> 2] | 0; //@line 1563
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 1564
    FUNCTION_TABLE_vii[$206 & 31]($195, $197); //@line 1565
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 406; //@line 1568
     $207 = $ReallocAsyncCtx4 + 4 | 0; //@line 1569
     HEAP32[$207 >> 2] = $2; //@line 1570
     $208 = $ReallocAsyncCtx4 + 8 | 0; //@line 1571
     HEAP32[$208 >> 2] = $4; //@line 1572
     sp = STACKTOP; //@line 1573
     STACKTOP = sp; //@line 1574
     return;
    }
    ___async_unwind = 0; //@line 1576
    HEAP32[$ReallocAsyncCtx4 >> 2] = 406; //@line 1577
    $207 = $ReallocAsyncCtx4 + 4 | 0; //@line 1578
    HEAP32[$207 >> 2] = $2; //@line 1579
    $208 = $ReallocAsyncCtx4 + 8 | 0; //@line 1580
    HEAP32[$208 >> 2] = $4; //@line 1581
    sp = STACKTOP; //@line 1582
    STACKTOP = sp; //@line 1583
    return;
   }
  }
 } while (0);
 if (!($211 & 16)) {
  STACKTOP = sp; //@line 1590
  return;
 }
 HEAP8[$2 >> 0] = $211 & -17; //@line 1593
 $215 = HEAP32[$4 + 1324 >> 2] | 0; //@line 1595
 $216 = $215 + 48 | 0; //@line 1596
 $218 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 1598
 $219 = $215 + 60 | 0; //@line 1599
 $220 = HEAP32[$219 >> 2] | 0; //@line 1600
 if (!$220) {
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(16) | 0; //@line 1603
  _mbed_assert_internal(15679, 15684, 1102); //@line 1604
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 407; //@line 1607
   $222 = $ReallocAsyncCtx12 + 4 | 0; //@line 1608
   HEAP32[$222 >> 2] = $219; //@line 1609
   $223 = $ReallocAsyncCtx12 + 8 | 0; //@line 1610
   HEAP32[$223 >> 2] = $216; //@line 1611
   $224 = $ReallocAsyncCtx12 + 12 | 0; //@line 1612
   HEAP32[$224 >> 2] = $218; //@line 1613
   sp = STACKTOP; //@line 1614
   STACKTOP = sp; //@line 1615
   return;
  }
  ___async_unwind = 0; //@line 1617
  HEAP32[$ReallocAsyncCtx12 >> 2] = 407; //@line 1618
  $222 = $ReallocAsyncCtx12 + 4 | 0; //@line 1619
  HEAP32[$222 >> 2] = $219; //@line 1620
  $223 = $ReallocAsyncCtx12 + 8 | 0; //@line 1621
  HEAP32[$223 >> 2] = $216; //@line 1622
  $224 = $ReallocAsyncCtx12 + 12 | 0; //@line 1623
  HEAP32[$224 >> 2] = $218; //@line 1624
  sp = STACKTOP; //@line 1625
  STACKTOP = sp; //@line 1626
  return;
 } else {
  $225 = HEAP32[$220 >> 2] | 0; //@line 1628
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 1629
  FUNCTION_TABLE_vii[$225 & 31]($216, $218); //@line 1630
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 408; //@line 1633
   sp = STACKTOP; //@line 1634
   STACKTOP = sp; //@line 1635
   return;
  }
  ___async_unwind = 0; //@line 1637
  HEAP32[$ReallocAsyncCtx5 >> 2] = 408; //@line 1638
  sp = STACKTOP; //@line 1639
  STACKTOP = sp; //@line 1640
  return;
 }
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_196($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $10 = 0, $100 = 0, $103 = 0, $105 = 0, $106 = 0, $111 = 0, $113 = 0, $114 = 0, $115 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $139 = 0, $14 = 0, $140 = 0, $142 = 0, $143 = 0, $144 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $180 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $194 = 0, $195 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $211 = 0, $215 = 0, $216 = 0, $218 = 0, $219 = 0, $220 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $24 = 0, $28 = 0, $4 = 0, $42 = 0, $46 = 0, $51 = 0, $57 = 0, $58 = 0, $6 = 0, $63 = 0, $67 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $84 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 258
 STACKTOP = STACKTOP + 16 | 0; //@line 259
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 259
 $$byval_copy = sp; //@line 260
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 262
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 264
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 266
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 268
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 270
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 272
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 274
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 276
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 278
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 280
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 284
 do {
  if (HEAP8[$2 >> 0] & 2) {
   $28 = $4 + 288 | 0; //@line 290
   if (!(HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($28) | 0) + 10 >> 0] | 0)) {
    if ((HEAPU8[$4 + 895 >> 0] | 0) <= (HEAPU8[$4 + 894 >> 0] | 0)) {
     break;
    }
   }
   HEAP8[$4 + 377 >> 0] = 0; //@line 306
   HEAP8[$24 >> 0] = 0; //@line 307
   if (!(HEAP8[$4 + 370 >> 0] | 0)) {
    $42 = $4 + 956 | 0; //@line 312
    HEAP32[$42 >> 2] = (HEAP32[$42 >> 2] | 0) + 1; //@line 315
   }
   $46 = HEAP8[$4 + 895 >> 0] | 0; //@line 318
   HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($28) | 0) + 11 >> 0] = $46; //@line 321
   HEAP32[$16 >> 2] = HEAP32[$16 >> 2] & -2; //@line 324
  }
 } while (0);
 $51 = $4 + 377 | 0; //@line 327
 if (HEAP8[$51 >> 0] | 0) {
  if (!(HEAP32[$16 >> 2] & 16)) {
   HEAP8[$51 >> 0] = 0; //@line 335
   $57 = $4 + 895 | 0; //@line 336
   $58 = HEAP8[$57 >> 0] | 0; //@line 337
   if (!(($58 & 255) < 9 ? ($58 & 255) < (HEAPU8[$4 + 894 >> 0] | 0) : 0)) {
    $84 = HEAP32[$4 >> 2] | 0; //@line 344
    $87 = HEAP32[(HEAP32[$84 >> 2] | 0) + 16 >> 2] | 0; //@line 347
    $ReallocAsyncCtx = _emscripten_realloc_async_context(52) | 0; //@line 348
    FUNCTION_TABLE_vi[$87 & 1023]($84); //@line 349
    if (___async) {
     HEAP32[$ReallocAsyncCtx >> 2] = 397; //@line 352
     $88 = $ReallocAsyncCtx + 4 | 0; //@line 353
     HEAP32[$88 >> 2] = $2; //@line 354
     $89 = $ReallocAsyncCtx + 8 | 0; //@line 355
     HEAP32[$89 >> 2] = $4; //@line 356
     $90 = $ReallocAsyncCtx + 12 | 0; //@line 357
     HEAP32[$90 >> 2] = $16; //@line 358
     $91 = $ReallocAsyncCtx + 16 | 0; //@line 359
     HEAP32[$91 >> 2] = $24; //@line 360
     $92 = $ReallocAsyncCtx + 20 | 0; //@line 361
     HEAP32[$92 >> 2] = $57; //@line 362
     $93 = $ReallocAsyncCtx + 24 | 0; //@line 363
     HEAP32[$93 >> 2] = $6; //@line 364
     $94 = $ReallocAsyncCtx + 28 | 0; //@line 365
     HEAP32[$94 >> 2] = $8; //@line 366
     $95 = $ReallocAsyncCtx + 32 | 0; //@line 367
     HEAP32[$95 >> 2] = $10; //@line 368
     $96 = $ReallocAsyncCtx + 36 | 0; //@line 369
     HEAP32[$96 >> 2] = $12; //@line 370
     $97 = $ReallocAsyncCtx + 40 | 0; //@line 371
     HEAP32[$97 >> 2] = $14; //@line 372
     $98 = $ReallocAsyncCtx + 44 | 0; //@line 373
     HEAP32[$98 >> 2] = $18; //@line 374
     $99 = $ReallocAsyncCtx + 48 | 0; //@line 375
     HEAP32[$99 >> 2] = $20; //@line 376
     sp = STACKTOP; //@line 377
     STACKTOP = sp; //@line 378
     return;
    }
    ___async_unwind = 0; //@line 380
    HEAP32[$ReallocAsyncCtx >> 2] = 397; //@line 381
    $88 = $ReallocAsyncCtx + 4 | 0; //@line 382
    HEAP32[$88 >> 2] = $2; //@line 383
    $89 = $ReallocAsyncCtx + 8 | 0; //@line 384
    HEAP32[$89 >> 2] = $4; //@line 385
    $90 = $ReallocAsyncCtx + 12 | 0; //@line 386
    HEAP32[$90 >> 2] = $16; //@line 387
    $91 = $ReallocAsyncCtx + 16 | 0; //@line 388
    HEAP32[$91 >> 2] = $24; //@line 389
    $92 = $ReallocAsyncCtx + 20 | 0; //@line 390
    HEAP32[$92 >> 2] = $57; //@line 391
    $93 = $ReallocAsyncCtx + 24 | 0; //@line 392
    HEAP32[$93 >> 2] = $6; //@line 393
    $94 = $ReallocAsyncCtx + 28 | 0; //@line 394
    HEAP32[$94 >> 2] = $8; //@line 395
    $95 = $ReallocAsyncCtx + 32 | 0; //@line 396
    HEAP32[$95 >> 2] = $10; //@line 397
    $96 = $ReallocAsyncCtx + 36 | 0; //@line 398
    HEAP32[$96 >> 2] = $12; //@line 399
    $97 = $ReallocAsyncCtx + 40 | 0; //@line 400
    HEAP32[$97 >> 2] = $14; //@line 401
    $98 = $ReallocAsyncCtx + 44 | 0; //@line 402
    HEAP32[$98 >> 2] = $18; //@line 403
    $99 = $ReallocAsyncCtx + 48 | 0; //@line 404
    HEAP32[$99 >> 2] = $20; //@line 405
    sp = STACKTOP; //@line 406
    STACKTOP = sp; //@line 407
    return;
   }
   $63 = $58 + 1 << 24 >> 24; //@line 409
   HEAP8[$57 >> 0] = $63; //@line 410
   if ($63 & 1) {
    $67 = $4 + 1097 | 0; //@line 415
    HEAP8[$67 >> 0] = __ZN7LoRaPHY26get_next_lower_tx_datarateEa(HEAP32[$4 >> 2] | 0, HEAP8[$67 >> 0] | 0) | 0; //@line 418
   }
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(52) | 0; //@line 420
   $70 = __ZN7LoRaMac11schedule_txEv($4) | 0; //@line 421
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 396; //@line 424
    $71 = $ReallocAsyncCtx7 + 4 | 0; //@line 425
    HEAP32[$71 >> 2] = $2; //@line 426
    $72 = $ReallocAsyncCtx7 + 8 | 0; //@line 427
    HEAP32[$72 >> 2] = $4; //@line 428
    $73 = $ReallocAsyncCtx7 + 12 | 0; //@line 429
    HEAP32[$73 >> 2] = $16; //@line 430
    $74 = $ReallocAsyncCtx7 + 16 | 0; //@line 431
    HEAP32[$74 >> 2] = $24; //@line 432
    $75 = $ReallocAsyncCtx7 + 20 | 0; //@line 433
    HEAP32[$75 >> 2] = $57; //@line 434
    $76 = $ReallocAsyncCtx7 + 24 | 0; //@line 435
    HEAP32[$76 >> 2] = $6; //@line 436
    $77 = $ReallocAsyncCtx7 + 28 | 0; //@line 437
    HEAP32[$77 >> 2] = $8; //@line 438
    $78 = $ReallocAsyncCtx7 + 32 | 0; //@line 439
    HEAP32[$78 >> 2] = $10; //@line 440
    $79 = $ReallocAsyncCtx7 + 36 | 0; //@line 441
    HEAP32[$79 >> 2] = $12; //@line 442
    $80 = $ReallocAsyncCtx7 + 40 | 0; //@line 443
    HEAP32[$80 >> 2] = $14; //@line 444
    $81 = $ReallocAsyncCtx7 + 44 | 0; //@line 445
    HEAP32[$81 >> 2] = $18; //@line 446
    $82 = $ReallocAsyncCtx7 + 48 | 0; //@line 447
    HEAP32[$82 >> 2] = $20; //@line 448
    sp = STACKTOP; //@line 449
    STACKTOP = sp; //@line 450
    return;
   }
   HEAP32[___async_retval >> 2] = $70; //@line 453
   ___async_unwind = 0; //@line 454
   HEAP32[$ReallocAsyncCtx7 >> 2] = 396; //@line 455
   $71 = $ReallocAsyncCtx7 + 4 | 0; //@line 456
   HEAP32[$71 >> 2] = $2; //@line 457
   $72 = $ReallocAsyncCtx7 + 8 | 0; //@line 458
   HEAP32[$72 >> 2] = $4; //@line 459
   $73 = $ReallocAsyncCtx7 + 12 | 0; //@line 460
   HEAP32[$73 >> 2] = $16; //@line 461
   $74 = $ReallocAsyncCtx7 + 16 | 0; //@line 462
   HEAP32[$74 >> 2] = $24; //@line 463
   $75 = $ReallocAsyncCtx7 + 20 | 0; //@line 464
   HEAP32[$75 >> 2] = $57; //@line 465
   $76 = $ReallocAsyncCtx7 + 24 | 0; //@line 466
   HEAP32[$76 >> 2] = $6; //@line 467
   $77 = $ReallocAsyncCtx7 + 28 | 0; //@line 468
   HEAP32[$77 >> 2] = $8; //@line 469
   $78 = $ReallocAsyncCtx7 + 32 | 0; //@line 470
   HEAP32[$78 >> 2] = $10; //@line 471
   $79 = $ReallocAsyncCtx7 + 36 | 0; //@line 472
   HEAP32[$79 >> 2] = $12; //@line 473
   $80 = $ReallocAsyncCtx7 + 40 | 0; //@line 474
   HEAP32[$80 >> 2] = $14; //@line 475
   $81 = $ReallocAsyncCtx7 + 44 | 0; //@line 476
   HEAP32[$81 >> 2] = $18; //@line 477
   $82 = $ReallocAsyncCtx7 + 48 | 0; //@line 478
   HEAP32[$82 >> 2] = $20; //@line 479
   sp = STACKTOP; //@line 480
   STACKTOP = sp; //@line 481
   return;
  }
 }
 $100 = HEAP32[$16 >> 2] | 0; //@line 484
 $103 = $100 & -3; //@line 487
 if (!($100 & 2)) {
  $105 = $100; //@line 489
 } else {
  HEAP32[$16 >> 2] = $103; //@line 491
  $105 = $103; //@line 492
 }
 if ($105 | 0) {
  $172 = HEAP32[$18 >> 2] | 0; //@line 496
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 497
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($172, $20, 1e3); //@line 498
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 402; //@line 501
   $173 = $ReallocAsyncCtx6 + 4 | 0; //@line 502
   HEAP32[$173 >> 2] = $2; //@line 503
   $174 = $ReallocAsyncCtx6 + 8 | 0; //@line 504
   HEAP32[$174 >> 2] = $4; //@line 505
   $175 = $ReallocAsyncCtx6 + 12 | 0; //@line 506
   HEAP32[$175 >> 2] = $6; //@line 507
   $176 = $ReallocAsyncCtx6 + 16 | 0; //@line 508
   HEAP32[$176 >> 2] = $8; //@line 509
   $177 = $ReallocAsyncCtx6 + 20 | 0; //@line 510
   HEAP32[$177 >> 2] = $10; //@line 511
   sp = STACKTOP; //@line 512
   STACKTOP = sp; //@line 513
   return;
  }
  ___async_unwind = 0; //@line 515
  HEAP32[$ReallocAsyncCtx6 >> 2] = 402; //@line 516
  $173 = $ReallocAsyncCtx6 + 4 | 0; //@line 517
  HEAP32[$173 >> 2] = $2; //@line 518
  $174 = $ReallocAsyncCtx6 + 8 | 0; //@line 519
  HEAP32[$174 >> 2] = $4; //@line 520
  $175 = $ReallocAsyncCtx6 + 12 | 0; //@line 521
  HEAP32[$175 >> 2] = $6; //@line 522
  $176 = $ReallocAsyncCtx6 + 16 | 0; //@line 523
  HEAP32[$176 >> 2] = $8; //@line 524
  $177 = $ReallocAsyncCtx6 + 20 | 0; //@line 525
  HEAP32[$177 >> 2] = $10; //@line 526
  sp = STACKTOP; //@line 527
  STACKTOP = sp; //@line 528
  return;
 }
 $106 = HEAP8[$2 >> 0] | 0; //@line 530
 if ($106 & 1) {
  HEAP8[$2 >> 0] = $106 & -2; //@line 535
  $111 = HEAP32[$4 + 1324 >> 2] | 0; //@line 537
  $113 = __ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0; //@line 539
  $114 = $111 + 12 | 0; //@line 540
  $115 = HEAP32[$114 >> 2] | 0; //@line 541
  if (!$115) {
   $ReallocAsyncCtx16 = _emscripten_realloc_async_context(44) | 0; //@line 544
   _mbed_assert_internal(15679, 15684, 1102); //@line 545
   if (___async) {
    HEAP32[$ReallocAsyncCtx16 >> 2] = 398; //@line 548
    $117 = $ReallocAsyncCtx16 + 4 | 0; //@line 549
    HEAP32[$117 >> 2] = $2; //@line 550
    $118 = $ReallocAsyncCtx16 + 8 | 0; //@line 551
    HEAP32[$118 >> 2] = $4; //@line 552
    $119 = $ReallocAsyncCtx16 + 12 | 0; //@line 553
    HEAP32[$119 >> 2] = $111; //@line 554
    $120 = $ReallocAsyncCtx16 + 16 | 0; //@line 555
    HEAP32[$120 >> 2] = $113; //@line 556
    $121 = $ReallocAsyncCtx16 + 20 | 0; //@line 557
    HEAP32[$121 >> 2] = $114; //@line 558
    $122 = $ReallocAsyncCtx16 + 24 | 0; //@line 559
    HEAP32[$122 >> 2] = $6; //@line 560
    $123 = $ReallocAsyncCtx16 + 28 | 0; //@line 561
    HEAP32[$123 >> 2] = $8; //@line 562
    $124 = $ReallocAsyncCtx16 + 32 | 0; //@line 563
    HEAP32[$124 >> 2] = $10; //@line 564
    $125 = $ReallocAsyncCtx16 + 36 | 0; //@line 565
    HEAP32[$125 >> 2] = $12; //@line 566
    $126 = $ReallocAsyncCtx16 + 40 | 0; //@line 567
    HEAP32[$126 >> 2] = $14; //@line 568
    sp = STACKTOP; //@line 569
    STACKTOP = sp; //@line 570
    return;
   }
   ___async_unwind = 0; //@line 572
   HEAP32[$ReallocAsyncCtx16 >> 2] = 398; //@line 573
   $117 = $ReallocAsyncCtx16 + 4 | 0; //@line 574
   HEAP32[$117 >> 2] = $2; //@line 575
   $118 = $ReallocAsyncCtx16 + 8 | 0; //@line 576
   HEAP32[$118 >> 2] = $4; //@line 577
   $119 = $ReallocAsyncCtx16 + 12 | 0; //@line 578
   HEAP32[$119 >> 2] = $111; //@line 579
   $120 = $ReallocAsyncCtx16 + 16 | 0; //@line 580
   HEAP32[$120 >> 2] = $113; //@line 581
   $121 = $ReallocAsyncCtx16 + 20 | 0; //@line 582
   HEAP32[$121 >> 2] = $114; //@line 583
   $122 = $ReallocAsyncCtx16 + 24 | 0; //@line 584
   HEAP32[$122 >> 2] = $6; //@line 585
   $123 = $ReallocAsyncCtx16 + 28 | 0; //@line 586
   HEAP32[$123 >> 2] = $8; //@line 587
   $124 = $ReallocAsyncCtx16 + 32 | 0; //@line 588
   HEAP32[$124 >> 2] = $10; //@line 589
   $125 = $ReallocAsyncCtx16 + 36 | 0; //@line 590
   HEAP32[$125 >> 2] = $12; //@line 591
   $126 = $ReallocAsyncCtx16 + 40 | 0; //@line 592
   HEAP32[$126 >> 2] = $14; //@line 593
   sp = STACKTOP; //@line 594
   STACKTOP = sp; //@line 595
   return;
  } else {
   $127 = HEAP32[$115 >> 2] | 0; //@line 597
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 598
   FUNCTION_TABLE_vii[$127 & 31]($111, $113); //@line 599
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 399; //@line 602
    $128 = $ReallocAsyncCtx2 + 4 | 0; //@line 603
    HEAP32[$128 >> 2] = $2; //@line 604
    $129 = $ReallocAsyncCtx2 + 8 | 0; //@line 605
    HEAP32[$129 >> 2] = $4; //@line 606
    $130 = $ReallocAsyncCtx2 + 12 | 0; //@line 607
    HEAP32[$130 >> 2] = $6; //@line 608
    $131 = $ReallocAsyncCtx2 + 16 | 0; //@line 609
    HEAP32[$131 >> 2] = $8; //@line 610
    $132 = $ReallocAsyncCtx2 + 20 | 0; //@line 611
    HEAP32[$132 >> 2] = $10; //@line 612
    $133 = $ReallocAsyncCtx2 + 24 | 0; //@line 613
    HEAP32[$133 >> 2] = $12; //@line 614
    $134 = $ReallocAsyncCtx2 + 28 | 0; //@line 615
    HEAP32[$134 >> 2] = $14; //@line 616
    sp = STACKTOP; //@line 617
    STACKTOP = sp; //@line 618
    return;
   }
   ___async_unwind = 0; //@line 620
   HEAP32[$ReallocAsyncCtx2 >> 2] = 399; //@line 621
   $128 = $ReallocAsyncCtx2 + 4 | 0; //@line 622
   HEAP32[$128 >> 2] = $2; //@line 623
   $129 = $ReallocAsyncCtx2 + 8 | 0; //@line 624
   HEAP32[$129 >> 2] = $4; //@line 625
   $130 = $ReallocAsyncCtx2 + 12 | 0; //@line 626
   HEAP32[$130 >> 2] = $6; //@line 627
   $131 = $ReallocAsyncCtx2 + 16 | 0; //@line 628
   HEAP32[$131 >> 2] = $8; //@line 629
   $132 = $ReallocAsyncCtx2 + 20 | 0; //@line 630
   HEAP32[$132 >> 2] = $10; //@line 631
   $133 = $ReallocAsyncCtx2 + 24 | 0; //@line 632
   HEAP32[$133 >> 2] = $12; //@line 633
   $134 = $ReallocAsyncCtx2 + 28 | 0; //@line 634
   HEAP32[$134 >> 2] = $14; //@line 635
   sp = STACKTOP; //@line 636
   STACKTOP = sp; //@line 637
   return;
  }
 }
 if ($106 & 8) {
  HEAP8[$2 >> 0] = $106 & -9; //@line 644
  $139 = HEAP32[$4 + 1324 >> 2] | 0; //@line 646
  $140 = $139 + 32 | 0; //@line 647
  $142 = __ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0; //@line 649
  $143 = $139 + 44 | 0; //@line 650
  $144 = HEAP32[$143 >> 2] | 0; //@line 651
  if (!$144) {
   $ReallocAsyncCtx15 = _emscripten_realloc_async_context(44) | 0; //@line 654
   _mbed_assert_internal(15679, 15684, 1102); //@line 655
   if (___async) {
    HEAP32[$ReallocAsyncCtx15 >> 2] = 400; //@line 658
    $146 = $ReallocAsyncCtx15 + 4 | 0; //@line 659
    HEAP32[$146 >> 2] = $2; //@line 660
    $147 = $ReallocAsyncCtx15 + 8 | 0; //@line 661
    HEAP32[$147 >> 2] = $4; //@line 662
    $148 = $ReallocAsyncCtx15 + 12 | 0; //@line 663
    HEAP32[$148 >> 2] = $140; //@line 664
    $149 = $ReallocAsyncCtx15 + 16 | 0; //@line 665
    HEAP32[$149 >> 2] = $142; //@line 666
    $150 = $ReallocAsyncCtx15 + 20 | 0; //@line 667
    HEAP32[$150 >> 2] = $6; //@line 668
    $151 = $ReallocAsyncCtx15 + 24 | 0; //@line 669
    HEAP32[$151 >> 2] = $8; //@line 670
    $152 = $ReallocAsyncCtx15 + 28 | 0; //@line 671
    HEAP32[$152 >> 2] = $10; //@line 672
    $153 = $ReallocAsyncCtx15 + 32 | 0; //@line 673
    HEAP32[$153 >> 2] = $12; //@line 674
    $154 = $ReallocAsyncCtx15 + 36 | 0; //@line 675
    HEAP32[$154 >> 2] = $14; //@line 676
    $155 = $ReallocAsyncCtx15 + 40 | 0; //@line 677
    HEAP32[$155 >> 2] = $143; //@line 678
    sp = STACKTOP; //@line 679
    STACKTOP = sp; //@line 680
    return;
   }
   ___async_unwind = 0; //@line 682
   HEAP32[$ReallocAsyncCtx15 >> 2] = 400; //@line 683
   $146 = $ReallocAsyncCtx15 + 4 | 0; //@line 684
   HEAP32[$146 >> 2] = $2; //@line 685
   $147 = $ReallocAsyncCtx15 + 8 | 0; //@line 686
   HEAP32[$147 >> 2] = $4; //@line 687
   $148 = $ReallocAsyncCtx15 + 12 | 0; //@line 688
   HEAP32[$148 >> 2] = $140; //@line 689
   $149 = $ReallocAsyncCtx15 + 16 | 0; //@line 690
   HEAP32[$149 >> 2] = $142; //@line 691
   $150 = $ReallocAsyncCtx15 + 20 | 0; //@line 692
   HEAP32[$150 >> 2] = $6; //@line 693
   $151 = $ReallocAsyncCtx15 + 24 | 0; //@line 694
   HEAP32[$151 >> 2] = $8; //@line 695
   $152 = $ReallocAsyncCtx15 + 28 | 0; //@line 696
   HEAP32[$152 >> 2] = $10; //@line 697
   $153 = $ReallocAsyncCtx15 + 32 | 0; //@line 698
   HEAP32[$153 >> 2] = $12; //@line 699
   $154 = $ReallocAsyncCtx15 + 36 | 0; //@line 700
   HEAP32[$154 >> 2] = $14; //@line 701
   $155 = $ReallocAsyncCtx15 + 40 | 0; //@line 702
   HEAP32[$155 >> 2] = $143; //@line 703
   sp = STACKTOP; //@line 704
   STACKTOP = sp; //@line 705
   return;
  } else {
   $156 = HEAP32[$144 >> 2] | 0; //@line 707
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 708
   FUNCTION_TABLE_vii[$156 & 31]($140, $142); //@line 709
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 401; //@line 712
    $157 = $ReallocAsyncCtx3 + 4 | 0; //@line 713
    HEAP32[$157 >> 2] = $4; //@line 714
    $158 = $ReallocAsyncCtx3 + 8 | 0; //@line 715
    HEAP32[$158 >> 2] = $2; //@line 716
    $159 = $ReallocAsyncCtx3 + 12 | 0; //@line 717
    HEAP32[$159 >> 2] = $6; //@line 718
    $160 = $ReallocAsyncCtx3 + 16 | 0; //@line 719
    HEAP32[$160 >> 2] = $8; //@line 720
    $161 = $ReallocAsyncCtx3 + 20 | 0; //@line 721
    HEAP32[$161 >> 2] = $10; //@line 722
    $162 = $ReallocAsyncCtx3 + 24 | 0; //@line 723
    HEAP32[$162 >> 2] = $12; //@line 724
    $163 = $ReallocAsyncCtx3 + 28 | 0; //@line 725
    HEAP32[$163 >> 2] = $14; //@line 726
    sp = STACKTOP; //@line 727
    STACKTOP = sp; //@line 728
    return;
   }
   ___async_unwind = 0; //@line 730
   HEAP32[$ReallocAsyncCtx3 >> 2] = 401; //@line 731
   $157 = $ReallocAsyncCtx3 + 4 | 0; //@line 732
   HEAP32[$157 >> 2] = $4; //@line 733
   $158 = $ReallocAsyncCtx3 + 8 | 0; //@line 734
   HEAP32[$158 >> 2] = $2; //@line 735
   $159 = $ReallocAsyncCtx3 + 12 | 0; //@line 736
   HEAP32[$159 >> 2] = $6; //@line 737
   $160 = $ReallocAsyncCtx3 + 16 | 0; //@line 738
   HEAP32[$160 >> 2] = $8; //@line 739
   $161 = $ReallocAsyncCtx3 + 20 | 0; //@line 740
   HEAP32[$161 >> 2] = $10; //@line 741
   $162 = $ReallocAsyncCtx3 + 24 | 0; //@line 742
   HEAP32[$162 >> 2] = $12; //@line 743
   $163 = $ReallocAsyncCtx3 + 28 | 0; //@line 744
   HEAP32[$163 >> 2] = $14; //@line 745
   sp = STACKTOP; //@line 746
   STACKTOP = sp; //@line 747
   return;
  }
 }
 if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($4 + 4 | 0) | 0) {
  _mbed_tracef(16, 13728, 13889, $12); //@line 753
  HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0) >> 2] = 4; //@line 756
  $169 = HEAP8[$2 >> 0] | 16; //@line 758
  HEAP8[$2 >> 0] = $169; //@line 759
  $171 = $169; //@line 760
 } else {
  $171 = HEAP8[$2 >> 0] | 0; //@line 763
 }
 $170 = $171 & -33; //@line 765
 HEAP8[$2 >> 0] = $170; //@line 766
 do {
  if (!($170 & 2)) {
   $211 = $170; //@line 771
  } else {
   $180 = $170 & -3; //@line 773
   HEAP8[$2 >> 0] = $180; //@line 774
   if ((HEAP32[$4 + 360 >> 2] | 0) == 2) {
    _mbed_tracef(16, 13728, 13747, $8); //@line 779
    $185 = HEAP32[$4 + 1328 >> 2] | 0; //@line 781
    HEAP32[$6 >> 2] = 293; //@line 782
    HEAP32[$6 + 4 >> 2] = 0; //@line 784
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 785
    HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 786
    HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 786
    $186 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($185, $4, $$byval_copy) | 0; //@line 787
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 403; //@line 790
     $187 = $ReallocAsyncCtx8 + 4 | 0; //@line 791
     HEAP32[$187 >> 2] = $2; //@line 792
     $188 = $ReallocAsyncCtx8 + 8 | 0; //@line 793
     HEAP32[$188 >> 2] = $4; //@line 794
     $189 = $ReallocAsyncCtx8 + 12 | 0; //@line 795
     HEAP32[$189 >> 2] = $6; //@line 796
     sp = STACKTOP; //@line 797
     STACKTOP = sp; //@line 798
     return;
    }
    HEAP32[___async_retval >> 2] = $186; //@line 801
    ___async_unwind = 0; //@line 802
    HEAP32[$ReallocAsyncCtx8 >> 2] = 403; //@line 803
    $187 = $ReallocAsyncCtx8 + 4 | 0; //@line 804
    HEAP32[$187 >> 2] = $2; //@line 805
    $188 = $ReallocAsyncCtx8 + 8 | 0; //@line 806
    HEAP32[$188 >> 2] = $4; //@line 807
    $189 = $ReallocAsyncCtx8 + 12 | 0; //@line 808
    HEAP32[$189 >> 2] = $6; //@line 809
    sp = STACKTOP; //@line 810
    STACKTOP = sp; //@line 811
    return;
   }
   if ($180 & 4) {
    $209 = $180 & -5; //@line 816
    HEAP8[$2 >> 0] = $209; //@line 817
    $211 = $209; //@line 818
    break;
   }
   $194 = HEAP32[$4 + 1324 >> 2] | 0; //@line 822
   $195 = $194 + 16 | 0; //@line 823
   $197 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 825
   $198 = $194 + 28 | 0; //@line 826
   $199 = HEAP32[$198 >> 2] | 0; //@line 827
   if (!$199) {
    $ReallocAsyncCtx13 = _emscripten_realloc_async_context(24) | 0; //@line 830
    _mbed_assert_internal(15679, 15684, 1102); //@line 831
    if (___async) {
     HEAP32[$ReallocAsyncCtx13 >> 2] = 405; //@line 834
     $201 = $ReallocAsyncCtx13 + 4 | 0; //@line 835
     HEAP32[$201 >> 2] = $198; //@line 836
     $202 = $ReallocAsyncCtx13 + 8 | 0; //@line 837
     HEAP32[$202 >> 2] = $195; //@line 838
     $203 = $ReallocAsyncCtx13 + 12 | 0; //@line 839
     HEAP32[$203 >> 2] = $197; //@line 840
     $204 = $ReallocAsyncCtx13 + 16 | 0; //@line 841
     HEAP32[$204 >> 2] = $2; //@line 842
     $205 = $ReallocAsyncCtx13 + 20 | 0; //@line 843
     HEAP32[$205 >> 2] = $4; //@line 844
     sp = STACKTOP; //@line 845
     STACKTOP = sp; //@line 846
     return;
    }
    ___async_unwind = 0; //@line 848
    HEAP32[$ReallocAsyncCtx13 >> 2] = 405; //@line 849
    $201 = $ReallocAsyncCtx13 + 4 | 0; //@line 850
    HEAP32[$201 >> 2] = $198; //@line 851
    $202 = $ReallocAsyncCtx13 + 8 | 0; //@line 852
    HEAP32[$202 >> 2] = $195; //@line 853
    $203 = $ReallocAsyncCtx13 + 12 | 0; //@line 854
    HEAP32[$203 >> 2] = $197; //@line 855
    $204 = $ReallocAsyncCtx13 + 16 | 0; //@line 856
    HEAP32[$204 >> 2] = $2; //@line 857
    $205 = $ReallocAsyncCtx13 + 20 | 0; //@line 858
    HEAP32[$205 >> 2] = $4; //@line 859
    sp = STACKTOP; //@line 860
    STACKTOP = sp; //@line 861
    return;
   } else {
    $206 = HEAP32[$199 >> 2] | 0; //@line 863
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 864
    FUNCTION_TABLE_vii[$206 & 31]($195, $197); //@line 865
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 406; //@line 868
     $207 = $ReallocAsyncCtx4 + 4 | 0; //@line 869
     HEAP32[$207 >> 2] = $2; //@line 870
     $208 = $ReallocAsyncCtx4 + 8 | 0; //@line 871
     HEAP32[$208 >> 2] = $4; //@line 872
     sp = STACKTOP; //@line 873
     STACKTOP = sp; //@line 874
     return;
    }
    ___async_unwind = 0; //@line 876
    HEAP32[$ReallocAsyncCtx4 >> 2] = 406; //@line 877
    $207 = $ReallocAsyncCtx4 + 4 | 0; //@line 878
    HEAP32[$207 >> 2] = $2; //@line 879
    $208 = $ReallocAsyncCtx4 + 8 | 0; //@line 880
    HEAP32[$208 >> 2] = $4; //@line 881
    sp = STACKTOP; //@line 882
    STACKTOP = sp; //@line 883
    return;
   }
  }
 } while (0);
 if (!($211 & 16)) {
  STACKTOP = sp; //@line 890
  return;
 }
 HEAP8[$2 >> 0] = $211 & -17; //@line 893
 $215 = HEAP32[$4 + 1324 >> 2] | 0; //@line 895
 $216 = $215 + 48 | 0; //@line 896
 $218 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 898
 $219 = $215 + 60 | 0; //@line 899
 $220 = HEAP32[$219 >> 2] | 0; //@line 900
 if (!$220) {
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(16) | 0; //@line 903
  _mbed_assert_internal(15679, 15684, 1102); //@line 904
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 407; //@line 907
   $222 = $ReallocAsyncCtx12 + 4 | 0; //@line 908
   HEAP32[$222 >> 2] = $219; //@line 909
   $223 = $ReallocAsyncCtx12 + 8 | 0; //@line 910
   HEAP32[$223 >> 2] = $216; //@line 911
   $224 = $ReallocAsyncCtx12 + 12 | 0; //@line 912
   HEAP32[$224 >> 2] = $218; //@line 913
   sp = STACKTOP; //@line 914
   STACKTOP = sp; //@line 915
   return;
  }
  ___async_unwind = 0; //@line 917
  HEAP32[$ReallocAsyncCtx12 >> 2] = 407; //@line 918
  $222 = $ReallocAsyncCtx12 + 4 | 0; //@line 919
  HEAP32[$222 >> 2] = $219; //@line 920
  $223 = $ReallocAsyncCtx12 + 8 | 0; //@line 921
  HEAP32[$223 >> 2] = $216; //@line 922
  $224 = $ReallocAsyncCtx12 + 12 | 0; //@line 923
  HEAP32[$224 >> 2] = $218; //@line 924
  sp = STACKTOP; //@line 925
  STACKTOP = sp; //@line 926
  return;
 } else {
  $225 = HEAP32[$220 >> 2] | 0; //@line 928
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 929
  FUNCTION_TABLE_vii[$225 & 31]($216, $218); //@line 930
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 408; //@line 933
   sp = STACKTOP; //@line 934
   STACKTOP = sp; //@line 935
   return;
  }
  ___async_unwind = 0; //@line 937
  HEAP32[$ReallocAsyncCtx5 >> 2] = 408; //@line 938
  sp = STACKTOP; //@line 939
  STACKTOP = sp; //@line 940
  return;
 }
}
function _fmt_fp($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$$3484 = 0, $$$3484700 = 0, $$$4502 = 0, $$$564 = 0.0, $$0 = 0, $$0463$lcssa = 0, $$0463587 = 0, $$0464597 = 0, $$0471 = 0.0, $$0479 = 0, $$0487644 = 0, $$0488655 = 0, $$0488657 = 0, $$0496$$9 = 0, $$0497656 = 0, $$0498 = 0, $$0509585 = 0.0, $$0511 = 0, $$0514639 = 0, $$0520 = 0, $$0521 = 0, $$0521$ = 0, $$0523 = 0, $$0527$in633 = 0, $$0530638 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0, $$1480 = 0, $$1482$lcssa = 0, $$1482663 = 0, $$1489643 = 0, $$1499$lcssa = 0, $$1499662 = 0, $$1508586 = 0, $$1512$lcssa = 0, $$1512610 = 0, $$1515 = 0, $$1524 = 0, $$1528617 = 0, $$1531$lcssa = 0, $$1531632 = 0, $$1601 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2483$ph = 0, $$2500 = 0, $$2513 = 0, $$2516621 = 0, $$2529 = 0, $$2532620 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484650 = 0, $$3501$lcssa = 0, $$3501649 = 0, $$3533616 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478593 = 0, $$4492 = 0, $$4502 = 0, $$4518 = 0, $$5$lcssa = 0, $$540 = 0, $$540$ = 0, $$543 = 0.0, $$548 = 0, $$5486$lcssa = 0, $$5486626 = 0, $$5493600 = 0, $$550 = 0, $$5519$ph = 0, $$5605 = 0, $$561 = 0, $$6 = 0, $$6494592 = 0, $$7495604 = 0, $$7505 = 0, $$7505$ = 0, $$7505$ph = 0, $$8 = 0, $$9$ph = 0, $$lcssa675 = 0, $$pn = 0, $$pr = 0, $$pr566 = 0, $$pre$phi691Z2D = 0, $$pre$phi698Z2D = 0, $$pre693 = 0, $$sink = 0, $$sink547$lcssa = 0, $$sink547625 = 0, $$sink560 = 0, $10 = 0, $101 = 0, $104 = 0, $106 = 0, $11 = 0, $113 = 0, $116 = 0, $124 = 0, $125 = 0, $128 = 0, $130 = 0, $131 = 0, $132 = 0, $138 = 0, $140 = 0, $144 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $154 = 0, $160 = 0, $161 = 0, $162 = 0, $174 = 0, $185 = 0, $189 = 0, $190 = 0, $193 = 0, $198 = 0, $199 = 0, $201 = 0, $209 = 0, $212 = 0, $213 = 0, $215 = 0, $217 = 0, $218 = 0, $221 = 0, $225 = 0, $230 = 0, $233 = 0, $236 = 0, $238 = 0, $240 = 0, $242 = 0, $247 = 0, $248 = 0, $251 = 0, $253 = 0, $256 = 0, $259 = 0, $267 = 0, $27 = 0, $270 = 0, $275 = 0, $284 = 0, $285 = 0, $289 = 0, $292 = 0, $294 = 0, $296 = 0, $300 = 0, $303 = 0, $304 = 0, $308 = 0, $31 = 0, $318 = 0, $323 = 0, $326 = 0, $327 = 0, $328 = 0, $330 = 0, $335 = 0, $347 = 0, $35 = 0.0, $351 = 0, $356 = 0, $36 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $369 = 0, $373 = 0, $375 = 0, $378 = 0, $381 = 0, $39 = 0, $41 = 0, $44 = 0, $46 = 0, $6 = 0, $60 = 0, $63 = 0, $66 = 0, $68 = 0, $7 = 0, $76 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 13771
 STACKTOP = STACKTOP + 560 | 0; //@line 13772
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(560); //@line 13772
 $6 = sp + 8 | 0; //@line 13773
 $7 = sp; //@line 13774
 $8 = sp + 524 | 0; //@line 13775
 $9 = $8; //@line 13776
 $10 = sp + 512 | 0; //@line 13777
 HEAP32[$7 >> 2] = 0; //@line 13778
 $11 = $10 + 12 | 0; //@line 13779
 ___DOUBLE_BITS_677($1) | 0; //@line 13780
 if ((tempRet0 | 0) < 0) {
  $$0471 = -$1; //@line 13785
  $$0520 = 1; //@line 13785
  $$0521 = 17041; //@line 13785
 } else {
  $$0471 = $1; //@line 13796
  $$0520 = ($4 & 2049 | 0) != 0 & 1; //@line 13796
  $$0521 = ($4 & 2048 | 0) == 0 ? ($4 & 1 | 0) == 0 ? 17042 : 17047 : 17044; //@line 13796
 }
 ___DOUBLE_BITS_677($$0471) | 0; //@line 13798
 do {
  if (0 == 0 & (tempRet0 & 2146435072 | 0) == 2146435072) {
   $27 = ($5 & 32 | 0) != 0; //@line 13807
   $31 = $$0520 + 3 | 0; //@line 13812
   _pad_676($0, 32, $2, $31, $4 & -65537); //@line 13814
   _out_670($0, $$0521, $$0520); //@line 13815
   _out_670($0, $$0471 != $$0471 | 0.0 != 0.0 ? $27 ? 17068 : 17072 : $27 ? 17060 : 17064, 3); //@line 13816
   _pad_676($0, 32, $2, $31, $4 ^ 8192); //@line 13818
   $$sink560 = $31; //@line 13819
  } else {
   $35 = +_frexpl($$0471, $7) * 2.0; //@line 13822
   $36 = $35 != 0.0; //@line 13823
   if ($36) {
    HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1; //@line 13827
   }
   $39 = $5 | 32; //@line 13829
   if (($39 | 0) == 97) {
    $41 = $5 & 32; //@line 13832
    $$0521$ = ($41 | 0) == 0 ? $$0521 : $$0521 + 9 | 0; //@line 13835
    $44 = $$0520 | 2; //@line 13836
    $46 = 12 - $3 | 0; //@line 13838
    do {
     if ($3 >>> 0 > 11 | ($46 | 0) == 0) {
      $$1472 = $35; //@line 13843
     } else {
      $$0509585 = 8.0; //@line 13845
      $$1508586 = $46; //@line 13845
      do {
       $$1508586 = $$1508586 + -1 | 0; //@line 13847
       $$0509585 = $$0509585 * 16.0; //@line 13848
      } while (($$1508586 | 0) != 0);
      if ((HEAP8[$$0521$ >> 0] | 0) == 45) {
       $$1472 = -($$0509585 + (-$35 - $$0509585)); //@line 13863
       break;
      } else {
       $$1472 = $35 + $$0509585 - $$0509585; //@line 13868
       break;
      }
     }
    } while (0);
    $60 = HEAP32[$7 >> 2] | 0; //@line 13873
    $63 = ($60 | 0) < 0 ? 0 - $60 | 0 : $60; //@line 13876
    $66 = _fmt_u($63, (($63 | 0) < 0) << 31 >> 31, $11) | 0; //@line 13879
    if (($66 | 0) == ($11 | 0)) {
     $68 = $10 + 11 | 0; //@line 13882
     HEAP8[$68 >> 0] = 48; //@line 13883
     $$0511 = $68; //@line 13884
    } else {
     $$0511 = $66; //@line 13886
    }
    HEAP8[$$0511 + -1 >> 0] = ($60 >> 31 & 2) + 43; //@line 13893
    $76 = $$0511 + -2 | 0; //@line 13896
    HEAP8[$76 >> 0] = $5 + 15; //@line 13897
    $77 = ($3 | 0) < 1; //@line 13898
    $79 = ($4 & 8 | 0) == 0; //@line 13900
    $$0523 = $8; //@line 13901
    $$2473 = $$1472; //@line 13901
    while (1) {
     $80 = ~~$$2473; //@line 13903
     $86 = $$0523 + 1 | 0; //@line 13909
     HEAP8[$$0523 >> 0] = $41 | HEAPU8[17076 + $80 >> 0]; //@line 13910
     $$2473 = ($$2473 - +($80 | 0)) * 16.0; //@line 13913
     if (($86 - $9 | 0) == 1) {
      if ($79 & ($77 & $$2473 == 0.0)) {
       $$1524 = $86; //@line 13922
      } else {
       HEAP8[$86 >> 0] = 46; //@line 13925
       $$1524 = $$0523 + 2 | 0; //@line 13926
      }
     } else {
      $$1524 = $86; //@line 13929
     }
     if (!($$2473 != 0.0)) {
      break;
     } else {
      $$0523 = $$1524; //@line 13933
     }
    }
    $$pre693 = $$1524; //@line 13939
    if (!$3) {
     label = 24; //@line 13941
    } else {
     if ((-2 - $9 + $$pre693 | 0) < ($3 | 0)) {
      $$pre$phi691Z2D = $$pre693 - $9 | 0; //@line 13949
      $$sink = $3 + 2 | 0; //@line 13949
     } else {
      label = 24; //@line 13951
     }
    }
    if ((label | 0) == 24) {
     $101 = $$pre693 - $9 | 0; //@line 13955
     $$pre$phi691Z2D = $101; //@line 13956
     $$sink = $101; //@line 13956
    }
    $104 = $11 - $76 | 0; //@line 13960
    $106 = $104 + $44 + $$sink | 0; //@line 13962
    _pad_676($0, 32, $2, $106, $4); //@line 13963
    _out_670($0, $$0521$, $44); //@line 13964
    _pad_676($0, 48, $2, $106, $4 ^ 65536); //@line 13966
    _out_670($0, $8, $$pre$phi691Z2D); //@line 13967
    _pad_676($0, 48, $$sink - $$pre$phi691Z2D | 0, 0, 0); //@line 13969
    _out_670($0, $76, $104); //@line 13970
    _pad_676($0, 32, $2, $106, $4 ^ 8192); //@line 13972
    $$sink560 = $106; //@line 13973
    break;
   }
   $$540 = ($3 | 0) < 0 ? 6 : $3; //@line 13977
   if ($36) {
    $113 = (HEAP32[$7 >> 2] | 0) + -28 | 0; //@line 13981
    HEAP32[$7 >> 2] = $113; //@line 13982
    $$3 = $35 * 268435456.0; //@line 13983
    $$pr = $113; //@line 13983
   } else {
    $$3 = $35; //@line 13986
    $$pr = HEAP32[$7 >> 2] | 0; //@line 13986
   }
   $$561 = ($$pr | 0) < 0 ? $6 : $6 + 288 | 0; //@line 13990
   $$0498 = $$561; //@line 13991
   $$4 = $$3; //@line 13991
   do {
    $116 = ~~$$4 >>> 0; //@line 13993
    HEAP32[$$0498 >> 2] = $116; //@line 13994
    $$0498 = $$0498 + 4 | 0; //@line 13995
    $$4 = ($$4 - +($116 >>> 0)) * 1.0e9; //@line 13998
   } while ($$4 != 0.0);
   if (($$pr | 0) > 0) {
    $$1482663 = $$561; //@line 14008
    $$1499662 = $$0498; //@line 14008
    $124 = $$pr; //@line 14008
    while (1) {
     $125 = ($124 | 0) < 29 ? $124 : 29; //@line 14011
     $$0488655 = $$1499662 + -4 | 0; //@line 14012
     if ($$0488655 >>> 0 < $$1482663 >>> 0) {
      $$2483$ph = $$1482663; //@line 14015
     } else {
      $$0488657 = $$0488655; //@line 14017
      $$0497656 = 0; //@line 14017
      do {
       $128 = _bitshift64Shl(HEAP32[$$0488657 >> 2] | 0, 0, $125 | 0) | 0; //@line 14020
       $130 = _i64Add($128 | 0, tempRet0 | 0, $$0497656 | 0, 0) | 0; //@line 14022
       $131 = tempRet0; //@line 14023
       $132 = ___uremdi3($130 | 0, $131 | 0, 1e9, 0) | 0; //@line 14024
       HEAP32[$$0488657 >> 2] = $132; //@line 14026
       $$0497656 = ___udivdi3($130 | 0, $131 | 0, 1e9, 0) | 0; //@line 14027
       $$0488657 = $$0488657 + -4 | 0; //@line 14029
      } while ($$0488657 >>> 0 >= $$1482663 >>> 0);
      if (!$$0497656) {
       $$2483$ph = $$1482663; //@line 14039
      } else {
       $138 = $$1482663 + -4 | 0; //@line 14041
       HEAP32[$138 >> 2] = $$0497656; //@line 14042
       $$2483$ph = $138; //@line 14043
      }
     }
     $$2500 = $$1499662; //@line 14046
     while (1) {
      if ($$2500 >>> 0 <= $$2483$ph >>> 0) {
       break;
      }
      $140 = $$2500 + -4 | 0; //@line 14052
      if (!(HEAP32[$140 >> 2] | 0)) {
       $$2500 = $140; //@line 14056
      } else {
       break;
      }
     }
     $144 = (HEAP32[$7 >> 2] | 0) - $125 | 0; //@line 14062
     HEAP32[$7 >> 2] = $144; //@line 14063
     if (($144 | 0) > 0) {
      $$1482663 = $$2483$ph; //@line 14066
      $$1499662 = $$2500; //@line 14066
      $124 = $144; //@line 14066
     } else {
      $$1482$lcssa = $$2483$ph; //@line 14068
      $$1499$lcssa = $$2500; //@line 14068
      $$pr566 = $144; //@line 14068
      break;
     }
    }
   } else {
    $$1482$lcssa = $$561; //@line 14073
    $$1499$lcssa = $$0498; //@line 14073
    $$pr566 = $$pr; //@line 14073
   }
   if (($$pr566 | 0) < 0) {
    $149 = (($$540 + 25 | 0) / 9 | 0) + 1 | 0; //@line 14079
    $150 = ($39 | 0) == 102; //@line 14080
    $$3484650 = $$1482$lcssa; //@line 14081
    $$3501649 = $$1499$lcssa; //@line 14081
    $152 = $$pr566; //@line 14081
    while (1) {
     $151 = 0 - $152 | 0; //@line 14083
     $154 = ($151 | 0) < 9 ? $151 : 9; //@line 14085
     if ($$3484650 >>> 0 < $$3501649 >>> 0) {
      $160 = (1 << $154) + -1 | 0; //@line 14089
      $161 = 1e9 >>> $154; //@line 14090
      $$0487644 = 0; //@line 14091
      $$1489643 = $$3484650; //@line 14091
      do {
       $162 = HEAP32[$$1489643 >> 2] | 0; //@line 14093
       HEAP32[$$1489643 >> 2] = ($162 >>> $154) + $$0487644; //@line 14097
       $$0487644 = Math_imul($162 & $160, $161) | 0; //@line 14098
       $$1489643 = $$1489643 + 4 | 0; //@line 14099
      } while ($$1489643 >>> 0 < $$3501649 >>> 0);
      $$$3484 = (HEAP32[$$3484650 >> 2] | 0) == 0 ? $$3484650 + 4 | 0 : $$3484650; //@line 14110
      if (!$$0487644) {
       $$$3484700 = $$$3484; //@line 14113
       $$4502 = $$3501649; //@line 14113
      } else {
       HEAP32[$$3501649 >> 2] = $$0487644; //@line 14116
       $$$3484700 = $$$3484; //@line 14117
       $$4502 = $$3501649 + 4 | 0; //@line 14117
      }
     } else {
      $$$3484700 = (HEAP32[$$3484650 >> 2] | 0) == 0 ? $$3484650 + 4 | 0 : $$3484650; //@line 14124
      $$4502 = $$3501649; //@line 14124
     }
     $174 = $150 ? $$561 : $$$3484700; //@line 14126
     $$$4502 = ($$4502 - $174 >> 2 | 0) > ($149 | 0) ? $174 + ($149 << 2) | 0 : $$4502; //@line 14133
     $152 = (HEAP32[$7 >> 2] | 0) + $154 | 0; //@line 14135
     HEAP32[$7 >> 2] = $152; //@line 14136
     if (($152 | 0) >= 0) {
      $$3484$lcssa = $$$3484700; //@line 14141
      $$3501$lcssa = $$$4502; //@line 14141
      break;
     } else {
      $$3484650 = $$$3484700; //@line 14139
      $$3501649 = $$$4502; //@line 14139
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa; //@line 14146
    $$3501$lcssa = $$1499$lcssa; //@line 14146
   }
   $185 = $$561; //@line 14149
   if ($$3484$lcssa >>> 0 < $$3501$lcssa >>> 0) {
    $189 = ($185 - $$3484$lcssa >> 2) * 9 | 0; //@line 14154
    $190 = HEAP32[$$3484$lcssa >> 2] | 0; //@line 14155
    if ($190 >>> 0 < 10) {
     $$1515 = $189; //@line 14158
    } else {
     $$0514639 = $189; //@line 14160
     $$0530638 = 10; //@line 14160
     while (1) {
      $$0530638 = $$0530638 * 10 | 0; //@line 14162
      $193 = $$0514639 + 1 | 0; //@line 14163
      if ($190 >>> 0 < $$0530638 >>> 0) {
       $$1515 = $193; //@line 14166
       break;
      } else {
       $$0514639 = $193; //@line 14169
      }
     }
    }
   } else {
    $$1515 = 0; //@line 14174
   }
   $198 = ($39 | 0) == 103; //@line 14179
   $199 = ($$540 | 0) != 0; //@line 14180
   $201 = $$540 - (($39 | 0) != 102 ? $$1515 : 0) + (($199 & $198) << 31 >> 31) | 0; //@line 14183
   if (($201 | 0) < ((($$3501$lcssa - $185 >> 2) * 9 | 0) + -9 | 0)) {
    $209 = $201 + 9216 | 0; //@line 14192
    $212 = $$561 + 4 + ((($209 | 0) / 9 | 0) + -1024 << 2) | 0; //@line 14195
    $213 = ($209 | 0) % 9 | 0; //@line 14196
    if (($213 | 0) < 8) {
     $$0527$in633 = $213; //@line 14199
     $$1531632 = 10; //@line 14199
     while (1) {
      $215 = $$1531632 * 10 | 0; //@line 14202
      if (($$0527$in633 | 0) < 7) {
       $$0527$in633 = $$0527$in633 + 1 | 0; //@line 14205
       $$1531632 = $215; //@line 14205
      } else {
       $$1531$lcssa = $215; //@line 14207
       break;
      }
     }
    } else {
     $$1531$lcssa = 10; //@line 14212
    }
    $217 = HEAP32[$212 >> 2] | 0; //@line 14214
    $218 = ($217 >>> 0) % ($$1531$lcssa >>> 0) | 0; //@line 14215
    $221 = ($212 + 4 | 0) == ($$3501$lcssa | 0); //@line 14218
    if ($221 & ($218 | 0) == 0) {
     $$4492 = $212; //@line 14221
     $$4518 = $$1515; //@line 14221
     $$8 = $$3484$lcssa; //@line 14221
    } else {
     $$543 = ((($217 >>> 0) / ($$1531$lcssa >>> 0) | 0) & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0; //@line 14226
     $225 = ($$1531$lcssa | 0) / 2 | 0; //@line 14227
     $$$564 = $218 >>> 0 < $225 >>> 0 ? .5 : $221 & ($218 | 0) == ($225 | 0) ? 1.0 : 1.5; //@line 14232
     if (!$$0520) {
      $$1467 = $$$564; //@line 14235
      $$1469 = $$543; //@line 14235
     } else {
      $230 = (HEAP8[$$0521 >> 0] | 0) == 45; //@line 14238
      $$1467 = $230 ? -$$$564 : $$$564; //@line 14243
      $$1469 = $230 ? -$$543 : $$543; //@line 14243
     }
     $233 = $217 - $218 | 0; //@line 14245
     HEAP32[$212 >> 2] = $233; //@line 14246
     if ($$1469 + $$1467 != $$1469) {
      $236 = $233 + $$1531$lcssa | 0; //@line 14250
      HEAP32[$212 >> 2] = $236; //@line 14251
      if ($236 >>> 0 > 999999999) {
       $$5486626 = $$3484$lcssa; //@line 14254
       $$sink547625 = $212; //@line 14254
       while (1) {
        $238 = $$sink547625 + -4 | 0; //@line 14256
        HEAP32[$$sink547625 >> 2] = 0; //@line 14257
        if ($238 >>> 0 < $$5486626 >>> 0) {
         $240 = $$5486626 + -4 | 0; //@line 14260
         HEAP32[$240 >> 2] = 0; //@line 14261
         $$6 = $240; //@line 14262
        } else {
         $$6 = $$5486626; //@line 14264
        }
        $242 = (HEAP32[$238 >> 2] | 0) + 1 | 0; //@line 14267
        HEAP32[$238 >> 2] = $242; //@line 14268
        if ($242 >>> 0 > 999999999) {
         $$5486626 = $$6; //@line 14271
         $$sink547625 = $238; //@line 14271
        } else {
         $$5486$lcssa = $$6; //@line 14273
         $$sink547$lcssa = $238; //@line 14273
         break;
        }
       }
      } else {
       $$5486$lcssa = $$3484$lcssa; //@line 14278
       $$sink547$lcssa = $212; //@line 14278
      }
      $247 = ($185 - $$5486$lcssa >> 2) * 9 | 0; //@line 14283
      $248 = HEAP32[$$5486$lcssa >> 2] | 0; //@line 14284
      if ($248 >>> 0 < 10) {
       $$4492 = $$sink547$lcssa; //@line 14287
       $$4518 = $247; //@line 14287
       $$8 = $$5486$lcssa; //@line 14287
      } else {
       $$2516621 = $247; //@line 14289
       $$2532620 = 10; //@line 14289
       while (1) {
        $$2532620 = $$2532620 * 10 | 0; //@line 14291
        $251 = $$2516621 + 1 | 0; //@line 14292
        if ($248 >>> 0 < $$2532620 >>> 0) {
         $$4492 = $$sink547$lcssa; //@line 14295
         $$4518 = $251; //@line 14295
         $$8 = $$5486$lcssa; //@line 14295
         break;
        } else {
         $$2516621 = $251; //@line 14298
        }
       }
      }
     } else {
      $$4492 = $212; //@line 14303
      $$4518 = $$1515; //@line 14303
      $$8 = $$3484$lcssa; //@line 14303
     }
    }
    $253 = $$4492 + 4 | 0; //@line 14306
    $$5519$ph = $$4518; //@line 14309
    $$7505$ph = $$3501$lcssa >>> 0 > $253 >>> 0 ? $253 : $$3501$lcssa; //@line 14309
    $$9$ph = $$8; //@line 14309
   } else {
    $$5519$ph = $$1515; //@line 14311
    $$7505$ph = $$3501$lcssa; //@line 14311
    $$9$ph = $$3484$lcssa; //@line 14311
   }
   $$7505 = $$7505$ph; //@line 14313
   while (1) {
    if ($$7505 >>> 0 <= $$9$ph >>> 0) {
     $$lcssa675 = 0; //@line 14317
     break;
    }
    $256 = $$7505 + -4 | 0; //@line 14320
    if (!(HEAP32[$256 >> 2] | 0)) {
     $$7505 = $256; //@line 14324
    } else {
     $$lcssa675 = 1; //@line 14326
     break;
    }
   }
   $259 = 0 - $$5519$ph | 0; //@line 14330
   do {
    if ($198) {
     $$540$ = $$540 + (($199 ^ 1) & 1) | 0; //@line 14335
     if (($$540$ | 0) > ($$5519$ph | 0) & ($$5519$ph | 0) > -5) {
      $$0479 = $5 + -1 | 0; //@line 14343
      $$2476 = $$540$ + -1 - $$5519$ph | 0; //@line 14343
     } else {
      $$0479 = $5 + -2 | 0; //@line 14347
      $$2476 = $$540$ + -1 | 0; //@line 14347
     }
     $267 = $4 & 8; //@line 14349
     if (!$267) {
      if ($$lcssa675) {
       $270 = HEAP32[$$7505 + -4 >> 2] | 0; //@line 14354
       if (!$270) {
        $$2529 = 9; //@line 14357
       } else {
        if (!(($270 >>> 0) % 10 | 0)) {
         $$1528617 = 0; //@line 14362
         $$3533616 = 10; //@line 14362
         while (1) {
          $$3533616 = $$3533616 * 10 | 0; //@line 14364
          $275 = $$1528617 + 1 | 0; //@line 14365
          if (($270 >>> 0) % ($$3533616 >>> 0) | 0 | 0) {
           $$2529 = $275; //@line 14371
           break;
          } else {
           $$1528617 = $275; //@line 14369
          }
         }
        } else {
         $$2529 = 0; //@line 14376
        }
       }
      } else {
       $$2529 = 9; //@line 14380
      }
      $284 = (($$7505 - $185 >> 2) * 9 | 0) + -9 | 0; //@line 14388
      if (($$0479 | 32 | 0) == 102) {
       $285 = $284 - $$2529 | 0; //@line 14390
       $$548 = ($285 | 0) > 0 ? $285 : 0; //@line 14392
       $$1480 = $$0479; //@line 14395
       $$3477 = ($$2476 | 0) < ($$548 | 0) ? $$2476 : $$548; //@line 14395
       $$pre$phi698Z2D = 0; //@line 14395
       break;
      } else {
       $289 = $284 + $$5519$ph - $$2529 | 0; //@line 14399
       $$550 = ($289 | 0) > 0 ? $289 : 0; //@line 14401
       $$1480 = $$0479; //@line 14404
       $$3477 = ($$2476 | 0) < ($$550 | 0) ? $$2476 : $$550; //@line 14404
       $$pre$phi698Z2D = 0; //@line 14404
       break;
      }
     } else {
      $$1480 = $$0479; //@line 14408
      $$3477 = $$2476; //@line 14408
      $$pre$phi698Z2D = $267; //@line 14408
     }
    } else {
     $$1480 = $5; //@line 14412
     $$3477 = $$540; //@line 14412
     $$pre$phi698Z2D = $4 & 8; //@line 14412
    }
   } while (0);
   $292 = $$3477 | $$pre$phi698Z2D; //@line 14415
   $294 = ($292 | 0) != 0 & 1; //@line 14417
   $296 = ($$1480 | 32 | 0) == 102; //@line 14419
   if ($296) {
    $$2513 = 0; //@line 14423
    $$pn = ($$5519$ph | 0) > 0 ? $$5519$ph : 0; //@line 14423
   } else {
    $300 = ($$5519$ph | 0) < 0 ? $259 : $$5519$ph; //@line 14426
    $303 = _fmt_u($300, (($300 | 0) < 0) << 31 >> 31, $11) | 0; //@line 14429
    $304 = $11; //@line 14430
    if (($304 - $303 | 0) < 2) {
     $$1512610 = $303; //@line 14435
     while (1) {
      $308 = $$1512610 + -1 | 0; //@line 14437
      HEAP8[$308 >> 0] = 48; //@line 14438
      if (($304 - $308 | 0) < 2) {
       $$1512610 = $308; //@line 14443
      } else {
       $$1512$lcssa = $308; //@line 14445
       break;
      }
     }
    } else {
     $$1512$lcssa = $303; //@line 14450
    }
    HEAP8[$$1512$lcssa + -1 >> 0] = ($$5519$ph >> 31 & 2) + 43; //@line 14457
    $318 = $$1512$lcssa + -2 | 0; //@line 14459
    HEAP8[$318 >> 0] = $$1480; //@line 14460
    $$2513 = $318; //@line 14463
    $$pn = $304 - $318 | 0; //@line 14463
   }
   $323 = $$0520 + 1 + $$3477 + $294 + $$pn | 0; //@line 14468
   _pad_676($0, 32, $2, $323, $4); //@line 14469
   _out_670($0, $$0521, $$0520); //@line 14470
   _pad_676($0, 48, $2, $323, $4 ^ 65536); //@line 14472
   if ($296) {
    $$0496$$9 = $$9$ph >>> 0 > $$561 >>> 0 ? $$561 : $$9$ph; //@line 14475
    $326 = $8 + 9 | 0; //@line 14476
    $327 = $326; //@line 14477
    $328 = $8 + 8 | 0; //@line 14478
    $$5493600 = $$0496$$9; //@line 14479
    do {
     $330 = _fmt_u(HEAP32[$$5493600 >> 2] | 0, 0, $326) | 0; //@line 14482
     if (($$5493600 | 0) == ($$0496$$9 | 0)) {
      if (($330 | 0) == ($326 | 0)) {
       HEAP8[$328 >> 0] = 48; //@line 14487
       $$1465 = $328; //@line 14488
      } else {
       $$1465 = $330; //@line 14490
      }
     } else {
      if ($330 >>> 0 > $8 >>> 0) {
       _memset($8 | 0, 48, $330 - $9 | 0) | 0; //@line 14497
       $$0464597 = $330; //@line 14498
       while (1) {
        $335 = $$0464597 + -1 | 0; //@line 14500
        if ($335 >>> 0 > $8 >>> 0) {
         $$0464597 = $335; //@line 14503
        } else {
         $$1465 = $335; //@line 14505
         break;
        }
       }
      } else {
       $$1465 = $330; //@line 14510
      }
     }
     _out_670($0, $$1465, $327 - $$1465 | 0); //@line 14515
     $$5493600 = $$5493600 + 4 | 0; //@line 14516
    } while ($$5493600 >>> 0 <= $$561 >>> 0);
    if ($292 | 0) {
     _out_670($0, 17092, 1); //@line 14526
    }
    if ($$5493600 >>> 0 < $$7505 >>> 0 & ($$3477 | 0) > 0) {
     $$4478593 = $$3477; //@line 14532
     $$6494592 = $$5493600; //@line 14532
     while (1) {
      $347 = _fmt_u(HEAP32[$$6494592 >> 2] | 0, 0, $326) | 0; //@line 14535
      if ($347 >>> 0 > $8 >>> 0) {
       _memset($8 | 0, 48, $347 - $9 | 0) | 0; //@line 14540
       $$0463587 = $347; //@line 14541
       while (1) {
        $351 = $$0463587 + -1 | 0; //@line 14543
        if ($351 >>> 0 > $8 >>> 0) {
         $$0463587 = $351; //@line 14546
        } else {
         $$0463$lcssa = $351; //@line 14548
         break;
        }
       }
      } else {
       $$0463$lcssa = $347; //@line 14553
      }
      _out_670($0, $$0463$lcssa, ($$4478593 | 0) < 9 ? $$4478593 : 9); //@line 14557
      $$6494592 = $$6494592 + 4 | 0; //@line 14558
      $356 = $$4478593 + -9 | 0; //@line 14559
      if (!($$6494592 >>> 0 < $$7505 >>> 0 & ($$4478593 | 0) > 9)) {
       $$4478$lcssa = $356; //@line 14566
       break;
      } else {
       $$4478593 = $356; //@line 14564
      }
     }
    } else {
     $$4478$lcssa = $$3477; //@line 14571
    }
    _pad_676($0, 48, $$4478$lcssa + 9 | 0, 9, 0); //@line 14574
   } else {
    $$7505$ = $$lcssa675 ? $$7505 : $$9$ph + 4 | 0; //@line 14577
    if (($$3477 | 0) > -1) {
     $363 = $8 + 9 | 0; //@line 14580
     $364 = ($$pre$phi698Z2D | 0) == 0; //@line 14581
     $365 = $363; //@line 14582
     $366 = 0 - $9 | 0; //@line 14583
     $367 = $8 + 8 | 0; //@line 14584
     $$5605 = $$3477; //@line 14585
     $$7495604 = $$9$ph; //@line 14585
     while (1) {
      $369 = _fmt_u(HEAP32[$$7495604 >> 2] | 0, 0, $363) | 0; //@line 14588
      if (($369 | 0) == ($363 | 0)) {
       HEAP8[$367 >> 0] = 48; //@line 14591
       $$0 = $367; //@line 14592
      } else {
       $$0 = $369; //@line 14594
      }
      do {
       if (($$7495604 | 0) == ($$9$ph | 0)) {
        $375 = $$0 + 1 | 0; //@line 14599
        _out_670($0, $$0, 1); //@line 14600
        if ($364 & ($$5605 | 0) < 1) {
         $$2 = $375; //@line 14604
         break;
        }
        _out_670($0, 17092, 1); //@line 14607
        $$2 = $375; //@line 14608
       } else {
        if ($$0 >>> 0 <= $8 >>> 0) {
         $$2 = $$0; //@line 14612
         break;
        }
        _memset($8 | 0, 48, $$0 + $366 | 0) | 0; //@line 14617
        $$1601 = $$0; //@line 14618
        while (1) {
         $373 = $$1601 + -1 | 0; //@line 14620
         if ($373 >>> 0 > $8 >>> 0) {
          $$1601 = $373; //@line 14623
         } else {
          $$2 = $373; //@line 14625
          break;
         }
        }
       }
      } while (0);
      $378 = $365 - $$2 | 0; //@line 14632
      _out_670($0, $$2, ($$5605 | 0) > ($378 | 0) ? $378 : $$5605); //@line 14635
      $381 = $$5605 - $378 | 0; //@line 14636
      $$7495604 = $$7495604 + 4 | 0; //@line 14637
      if (!($$7495604 >>> 0 < $$7505$ >>> 0 & ($381 | 0) > -1)) {
       $$5$lcssa = $381; //@line 14644
       break;
      } else {
       $$5605 = $381; //@line 14642
      }
     }
    } else {
     $$5$lcssa = $$3477; //@line 14649
    }
    _pad_676($0, 48, $$5$lcssa + 18 | 0, 18, 0); //@line 14652
    _out_670($0, $$2513, $11 - $$2513 | 0); //@line 14656
   }
   _pad_676($0, 32, $2, $323, $4 ^ 8192); //@line 14659
   $$sink560 = $323; //@line 14660
  }
 } while (0);
 STACKTOP = sp; //@line 14665
 return (($$sink560 | 0) < ($2 | 0) ? $2 : $$sink560) | 0; //@line 14665
}
function _equeue_dispatch__async_cb($0) {
 $0 = $0 | 0;
 var $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$067 = 0, $$06992$reg2mem$0 = 0, $$06992$reg2mem$0$phi = 0, $$2 = 0, $$expand_i1_val = 0, $$expand_i1_val31 = 0, $$expand_i1_val33 = 0, $$expand_i1_val35 = 0, $$reg2mem$0 = 0, $$reg2mem23$0 = 0, $$sink$in$i$i = 0, $10 = 0, $102 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $127 = 0, $128 = 0, $129 = 0, $131 = 0, $132 = 0, $14 = 0, $140 = 0, $141 = 0, $143 = 0, $146 = 0, $148 = 0, $151 = 0, $154 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $165 = 0, $168 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $2 = 0, $24 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $44 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $70 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5504
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5506
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5508
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5510
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5512
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5514
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 5516
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 5518
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 5520
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 5522
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 5528
 $28 = HEAP8[$0 + 56 >> 0] & 1; //@line 5533
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 5535
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 5537
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 5539
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 5541
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 5543
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 5545
 $$06992$reg2mem$0 = HEAP32[$0 + 40 >> 2] | 0; //@line 5546
 $$reg2mem$0 = HEAP32[$0 + 44 >> 2] | 0; //@line 5546
 $$reg2mem23$0 = HEAP32[$0 + 52 >> 2] | 0; //@line 5546
 while (1) {
  $68 = HEAP32[$$06992$reg2mem$0 + 24 >> 2] | 0; //@line 5549
  if (($68 | 0) > -1) {
   label = 8; //@line 5552
   break;
  }
  $92 = $$06992$reg2mem$0 + 4 | 0; //@line 5556
  $93 = HEAP8[$92 >> 0] | 0; //@line 5557
  HEAP8[$92 >> 0] = (($93 + 1 & 255) << HEAP32[$34 >> 2] | 0) == 0 ? 1 : ($93 & 255) + 1 & 255; //@line 5566
  $102 = HEAP32[$$06992$reg2mem$0 + 28 >> 2] | 0; //@line 5568
  if ($102 | 0) {
   label = 12; //@line 5571
   break;
  }
  _equeue_mutex_lock($24); //@line 5574
  $125 = HEAP32[$18 >> 2] | 0; //@line 5575
  L6 : do {
   if (!$125) {
    $$02329$i$i = $18; //@line 5579
    label = 21; //@line 5580
   } else {
    $127 = HEAP32[$$06992$reg2mem$0 >> 2] | 0; //@line 5582
    $$025$i$i = $18; //@line 5583
    $129 = $125; //@line 5583
    while (1) {
     $128 = HEAP32[$129 >> 2] | 0; //@line 5585
     if ($128 >>> 0 >= $127 >>> 0) {
      break;
     }
     $131 = $129 + 8 | 0; //@line 5590
     $132 = HEAP32[$131 >> 2] | 0; //@line 5591
     if (!$132) {
      $$02329$i$i = $131; //@line 5594
      label = 21; //@line 5595
      break L6;
     } else {
      $$025$i$i = $131; //@line 5598
      $129 = $132; //@line 5598
     }
    }
    if (($128 | 0) == ($127 | 0)) {
     HEAP32[$$06992$reg2mem$0 + 12 >> 2] = $129; //@line 5604
     $$02330$i$i = $$025$i$i; //@line 5607
     $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 5607
    } else {
     $$02329$i$i = $$025$i$i; //@line 5609
     label = 21; //@line 5610
    }
   }
  } while (0);
  if ((label | 0) == 21) {
   label = 0; //@line 5615
   HEAP32[$$06992$reg2mem$0 + 12 >> 2] = 0; //@line 5617
   $$02330$i$i = $$02329$i$i; //@line 5618
   $$sink$in$i$i = $$02329$i$i; //@line 5618
  }
  HEAP32[$$reg2mem$0 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 5621
  HEAP32[$$02330$i$i >> 2] = $$06992$reg2mem$0; //@line 5622
  _equeue_mutex_unlock($24); //@line 5623
  if (!$$reg2mem23$0) {
   label = 24; //@line 5626
   break;
  }
  $41 = $$reg2mem23$0 + 8 | 0; //@line 5629
  $42 = HEAP32[$41 >> 2] | 0; //@line 5630
  $44 = HEAP32[$$reg2mem23$0 + 32 >> 2] | 0; //@line 5632
  if (!$44) {
   $$06992$reg2mem$0$phi = $$reg2mem23$0; //@line 5635
   $$reg2mem$0 = $41; //@line 5635
   $$reg2mem23$0 = $42; //@line 5635
   $$06992$reg2mem$0 = $$06992$reg2mem$0$phi; //@line 5635
  } else {
   label = 3; //@line 5637
   break;
  }
 }
 if ((label | 0) == 3) {
  $ReallocAsyncCtx = _emscripten_realloc_async_context(84) | 0; //@line 5643
  FUNCTION_TABLE_vi[$44 & 1023]($$reg2mem23$0 + 36 | 0); //@line 5644
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 132; //@line 5647
   $47 = $ReallocAsyncCtx + 4 | 0; //@line 5648
   HEAP32[$47 >> 2] = $2; //@line 5649
   $48 = $ReallocAsyncCtx + 8 | 0; //@line 5650
   HEAP32[$48 >> 2] = $4; //@line 5651
   $49 = $ReallocAsyncCtx + 12 | 0; //@line 5652
   HEAP32[$49 >> 2] = $6; //@line 5653
   $50 = $ReallocAsyncCtx + 16 | 0; //@line 5654
   HEAP32[$50 >> 2] = $8; //@line 5655
   $51 = $ReallocAsyncCtx + 20 | 0; //@line 5656
   HEAP32[$51 >> 2] = $10; //@line 5657
   $52 = $ReallocAsyncCtx + 24 | 0; //@line 5658
   HEAP32[$52 >> 2] = $12; //@line 5659
   $53 = $ReallocAsyncCtx + 28 | 0; //@line 5660
   HEAP32[$53 >> 2] = $14; //@line 5661
   $54 = $ReallocAsyncCtx + 32 | 0; //@line 5662
   HEAP32[$54 >> 2] = $16; //@line 5663
   $55 = $ReallocAsyncCtx + 36 | 0; //@line 5664
   HEAP32[$55 >> 2] = $18; //@line 5665
   $56 = $ReallocAsyncCtx + 40 | 0; //@line 5666
   HEAP32[$56 >> 2] = $$reg2mem23$0; //@line 5667
   $57 = $ReallocAsyncCtx + 44 | 0; //@line 5668
   HEAP32[$57 >> 2] = $41; //@line 5669
   $58 = $ReallocAsyncCtx + 48 | 0; //@line 5670
   HEAP32[$58 >> 2] = $24; //@line 5671
   $59 = $ReallocAsyncCtx + 52 | 0; //@line 5672
   HEAP32[$59 >> 2] = $42; //@line 5673
   $60 = $ReallocAsyncCtx + 56 | 0; //@line 5674
   $$expand_i1_val = $28 & 1; //@line 5675
   HEAP8[$60 >> 0] = $$expand_i1_val; //@line 5676
   $61 = $ReallocAsyncCtx + 60 | 0; //@line 5677
   HEAP32[$61 >> 2] = $30; //@line 5678
   $62 = $ReallocAsyncCtx + 64 | 0; //@line 5679
   HEAP32[$62 >> 2] = $32; //@line 5680
   $63 = $ReallocAsyncCtx + 68 | 0; //@line 5681
   HEAP32[$63 >> 2] = $34; //@line 5682
   $64 = $ReallocAsyncCtx + 72 | 0; //@line 5683
   HEAP32[$64 >> 2] = $36; //@line 5684
   $65 = $ReallocAsyncCtx + 76 | 0; //@line 5685
   HEAP32[$65 >> 2] = $38; //@line 5686
   $66 = $ReallocAsyncCtx + 80 | 0; //@line 5687
   HEAP32[$66 >> 2] = $40; //@line 5688
   sp = STACKTOP; //@line 5689
   return;
  }
  ___async_unwind = 0; //@line 5692
  HEAP32[$ReallocAsyncCtx >> 2] = 132; //@line 5693
  $47 = $ReallocAsyncCtx + 4 | 0; //@line 5694
  HEAP32[$47 >> 2] = $2; //@line 5695
  $48 = $ReallocAsyncCtx + 8 | 0; //@line 5696
  HEAP32[$48 >> 2] = $4; //@line 5697
  $49 = $ReallocAsyncCtx + 12 | 0; //@line 5698
  HEAP32[$49 >> 2] = $6; //@line 5699
  $50 = $ReallocAsyncCtx + 16 | 0; //@line 5700
  HEAP32[$50 >> 2] = $8; //@line 5701
  $51 = $ReallocAsyncCtx + 20 | 0; //@line 5702
  HEAP32[$51 >> 2] = $10; //@line 5703
  $52 = $ReallocAsyncCtx + 24 | 0; //@line 5704
  HEAP32[$52 >> 2] = $12; //@line 5705
  $53 = $ReallocAsyncCtx + 28 | 0; //@line 5706
  HEAP32[$53 >> 2] = $14; //@line 5707
  $54 = $ReallocAsyncCtx + 32 | 0; //@line 5708
  HEAP32[$54 >> 2] = $16; //@line 5709
  $55 = $ReallocAsyncCtx + 36 | 0; //@line 5710
  HEAP32[$55 >> 2] = $18; //@line 5711
  $56 = $ReallocAsyncCtx + 40 | 0; //@line 5712
  HEAP32[$56 >> 2] = $$reg2mem23$0; //@line 5713
  $57 = $ReallocAsyncCtx + 44 | 0; //@line 5714
  HEAP32[$57 >> 2] = $41; //@line 5715
  $58 = $ReallocAsyncCtx + 48 | 0; //@line 5716
  HEAP32[$58 >> 2] = $24; //@line 5717
  $59 = $ReallocAsyncCtx + 52 | 0; //@line 5718
  HEAP32[$59 >> 2] = $42; //@line 5719
  $60 = $ReallocAsyncCtx + 56 | 0; //@line 5720
  $$expand_i1_val = $28 & 1; //@line 5721
  HEAP8[$60 >> 0] = $$expand_i1_val; //@line 5722
  $61 = $ReallocAsyncCtx + 60 | 0; //@line 5723
  HEAP32[$61 >> 2] = $30; //@line 5724
  $62 = $ReallocAsyncCtx + 64 | 0; //@line 5725
  HEAP32[$62 >> 2] = $32; //@line 5726
  $63 = $ReallocAsyncCtx + 68 | 0; //@line 5727
  HEAP32[$63 >> 2] = $34; //@line 5728
  $64 = $ReallocAsyncCtx + 72 | 0; //@line 5729
  HEAP32[$64 >> 2] = $36; //@line 5730
  $65 = $ReallocAsyncCtx + 76 | 0; //@line 5731
  HEAP32[$65 >> 2] = $38; //@line 5732
  $66 = $ReallocAsyncCtx + 80 | 0; //@line 5733
  HEAP32[$66 >> 2] = $40; //@line 5734
  sp = STACKTOP; //@line 5735
  return;
 } else if ((label | 0) == 8) {
  $70 = $$06992$reg2mem$0 + 20 | 0; //@line 5739
  HEAP32[$70 >> 2] = (HEAP32[$70 >> 2] | 0) + $68; //@line 5742
  $73 = _equeue_tick() | 0; //@line 5743
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(76) | 0; //@line 5744
  _equeue_enqueue($32, $$06992$reg2mem$0, $73) | 0; //@line 5745
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 133; //@line 5748
   $74 = $ReallocAsyncCtx4 + 4 | 0; //@line 5749
   HEAP32[$74 >> 2] = $2; //@line 5750
   $75 = $ReallocAsyncCtx4 + 8 | 0; //@line 5751
   HEAP32[$75 >> 2] = $4; //@line 5752
   $76 = $ReallocAsyncCtx4 + 12 | 0; //@line 5753
   HEAP32[$76 >> 2] = $6; //@line 5754
   $77 = $ReallocAsyncCtx4 + 16 | 0; //@line 5755
   HEAP32[$77 >> 2] = $8; //@line 5756
   $78 = $ReallocAsyncCtx4 + 20 | 0; //@line 5757
   HEAP32[$78 >> 2] = $10; //@line 5758
   $79 = $ReallocAsyncCtx4 + 24 | 0; //@line 5759
   HEAP32[$79 >> 2] = $12; //@line 5760
   $80 = $ReallocAsyncCtx4 + 28 | 0; //@line 5761
   HEAP32[$80 >> 2] = $14; //@line 5762
   $81 = $ReallocAsyncCtx4 + 32 | 0; //@line 5763
   HEAP32[$81 >> 2] = $16; //@line 5764
   $82 = $ReallocAsyncCtx4 + 36 | 0; //@line 5765
   HEAP32[$82 >> 2] = $18; //@line 5766
   $83 = $ReallocAsyncCtx4 + 40 | 0; //@line 5767
   HEAP32[$83 >> 2] = $24; //@line 5768
   $84 = $ReallocAsyncCtx4 + 44 | 0; //@line 5769
   HEAP32[$84 >> 2] = $$reg2mem23$0; //@line 5770
   $85 = $ReallocAsyncCtx4 + 48 | 0; //@line 5771
   $$expand_i1_val31 = $28 & 1; //@line 5772
   HEAP8[$85 >> 0] = $$expand_i1_val31; //@line 5773
   $86 = $ReallocAsyncCtx4 + 52 | 0; //@line 5774
   HEAP32[$86 >> 2] = $30; //@line 5775
   $87 = $ReallocAsyncCtx4 + 56 | 0; //@line 5776
   HEAP32[$87 >> 2] = $32; //@line 5777
   $88 = $ReallocAsyncCtx4 + 60 | 0; //@line 5778
   HEAP32[$88 >> 2] = $34; //@line 5779
   $89 = $ReallocAsyncCtx4 + 64 | 0; //@line 5780
   HEAP32[$89 >> 2] = $36; //@line 5781
   $90 = $ReallocAsyncCtx4 + 68 | 0; //@line 5782
   HEAP32[$90 >> 2] = $38; //@line 5783
   $91 = $ReallocAsyncCtx4 + 72 | 0; //@line 5784
   HEAP32[$91 >> 2] = $40; //@line 5785
   sp = STACKTOP; //@line 5786
   return;
  }
  ___async_unwind = 0; //@line 5789
  HEAP32[$ReallocAsyncCtx4 >> 2] = 133; //@line 5790
  $74 = $ReallocAsyncCtx4 + 4 | 0; //@line 5791
  HEAP32[$74 >> 2] = $2; //@line 5792
  $75 = $ReallocAsyncCtx4 + 8 | 0; //@line 5793
  HEAP32[$75 >> 2] = $4; //@line 5794
  $76 = $ReallocAsyncCtx4 + 12 | 0; //@line 5795
  HEAP32[$76 >> 2] = $6; //@line 5796
  $77 = $ReallocAsyncCtx4 + 16 | 0; //@line 5797
  HEAP32[$77 >> 2] = $8; //@line 5798
  $78 = $ReallocAsyncCtx4 + 20 | 0; //@line 5799
  HEAP32[$78 >> 2] = $10; //@line 5800
  $79 = $ReallocAsyncCtx4 + 24 | 0; //@line 5801
  HEAP32[$79 >> 2] = $12; //@line 5802
  $80 = $ReallocAsyncCtx4 + 28 | 0; //@line 5803
  HEAP32[$80 >> 2] = $14; //@line 5804
  $81 = $ReallocAsyncCtx4 + 32 | 0; //@line 5805
  HEAP32[$81 >> 2] = $16; //@line 5806
  $82 = $ReallocAsyncCtx4 + 36 | 0; //@line 5807
  HEAP32[$82 >> 2] = $18; //@line 5808
  $83 = $ReallocAsyncCtx4 + 40 | 0; //@line 5809
  HEAP32[$83 >> 2] = $24; //@line 5810
  $84 = $ReallocAsyncCtx4 + 44 | 0; //@line 5811
  HEAP32[$84 >> 2] = $$reg2mem23$0; //@line 5812
  $85 = $ReallocAsyncCtx4 + 48 | 0; //@line 5813
  $$expand_i1_val31 = $28 & 1; //@line 5814
  HEAP8[$85 >> 0] = $$expand_i1_val31; //@line 5815
  $86 = $ReallocAsyncCtx4 + 52 | 0; //@line 5816
  HEAP32[$86 >> 2] = $30; //@line 5817
  $87 = $ReallocAsyncCtx4 + 56 | 0; //@line 5818
  HEAP32[$87 >> 2] = $32; //@line 5819
  $88 = $ReallocAsyncCtx4 + 60 | 0; //@line 5820
  HEAP32[$88 >> 2] = $34; //@line 5821
  $89 = $ReallocAsyncCtx4 + 64 | 0; //@line 5822
  HEAP32[$89 >> 2] = $36; //@line 5823
  $90 = $ReallocAsyncCtx4 + 68 | 0; //@line 5824
  HEAP32[$90 >> 2] = $38; //@line 5825
  $91 = $ReallocAsyncCtx4 + 72 | 0; //@line 5826
  HEAP32[$91 >> 2] = $40; //@line 5827
  sp = STACKTOP; //@line 5828
  return;
 } else if ((label | 0) == 12) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(84) | 0; //@line 5833
  FUNCTION_TABLE_vi[$102 & 1023]($$06992$reg2mem$0 + 36 | 0); //@line 5834
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 134; //@line 5837
   $105 = $ReallocAsyncCtx2 + 4 | 0; //@line 5838
   HEAP32[$105 >> 2] = $2; //@line 5839
   $106 = $ReallocAsyncCtx2 + 8 | 0; //@line 5840
   HEAP32[$106 >> 2] = $4; //@line 5841
   $107 = $ReallocAsyncCtx2 + 12 | 0; //@line 5842
   HEAP32[$107 >> 2] = $6; //@line 5843
   $108 = $ReallocAsyncCtx2 + 16 | 0; //@line 5844
   HEAP32[$108 >> 2] = $8; //@line 5845
   $109 = $ReallocAsyncCtx2 + 20 | 0; //@line 5846
   HEAP32[$109 >> 2] = $10; //@line 5847
   $110 = $ReallocAsyncCtx2 + 24 | 0; //@line 5848
   HEAP32[$110 >> 2] = $12; //@line 5849
   $111 = $ReallocAsyncCtx2 + 28 | 0; //@line 5850
   HEAP32[$111 >> 2] = $14; //@line 5851
   $112 = $ReallocAsyncCtx2 + 32 | 0; //@line 5852
   HEAP32[$112 >> 2] = $16; //@line 5853
   $113 = $ReallocAsyncCtx2 + 36 | 0; //@line 5854
   HEAP32[$113 >> 2] = $18; //@line 5855
   $114 = $ReallocAsyncCtx2 + 40 | 0; //@line 5856
   HEAP32[$114 >> 2] = $$06992$reg2mem$0; //@line 5857
   $115 = $ReallocAsyncCtx2 + 44 | 0; //@line 5858
   HEAP32[$115 >> 2] = $$reg2mem$0; //@line 5859
   $116 = $ReallocAsyncCtx2 + 48 | 0; //@line 5860
   HEAP32[$116 >> 2] = $24; //@line 5861
   $117 = $ReallocAsyncCtx2 + 52 | 0; //@line 5862
   HEAP32[$117 >> 2] = $$reg2mem23$0; //@line 5863
   $118 = $ReallocAsyncCtx2 + 56 | 0; //@line 5864
   $$expand_i1_val33 = $28 & 1; //@line 5865
   HEAP8[$118 >> 0] = $$expand_i1_val33; //@line 5866
   $119 = $ReallocAsyncCtx2 + 60 | 0; //@line 5867
   HEAP32[$119 >> 2] = $30; //@line 5868
   $120 = $ReallocAsyncCtx2 + 64 | 0; //@line 5869
   HEAP32[$120 >> 2] = $32; //@line 5870
   $121 = $ReallocAsyncCtx2 + 68 | 0; //@line 5871
   HEAP32[$121 >> 2] = $34; //@line 5872
   $122 = $ReallocAsyncCtx2 + 72 | 0; //@line 5873
   HEAP32[$122 >> 2] = $36; //@line 5874
   $123 = $ReallocAsyncCtx2 + 76 | 0; //@line 5875
   HEAP32[$123 >> 2] = $38; //@line 5876
   $124 = $ReallocAsyncCtx2 + 80 | 0; //@line 5877
   HEAP32[$124 >> 2] = $40; //@line 5878
   sp = STACKTOP; //@line 5879
   return;
  }
  ___async_unwind = 0; //@line 5882
  HEAP32[$ReallocAsyncCtx2 >> 2] = 134; //@line 5883
  $105 = $ReallocAsyncCtx2 + 4 | 0; //@line 5884
  HEAP32[$105 >> 2] = $2; //@line 5885
  $106 = $ReallocAsyncCtx2 + 8 | 0; //@line 5886
  HEAP32[$106 >> 2] = $4; //@line 5887
  $107 = $ReallocAsyncCtx2 + 12 | 0; //@line 5888
  HEAP32[$107 >> 2] = $6; //@line 5889
  $108 = $ReallocAsyncCtx2 + 16 | 0; //@line 5890
  HEAP32[$108 >> 2] = $8; //@line 5891
  $109 = $ReallocAsyncCtx2 + 20 | 0; //@line 5892
  HEAP32[$109 >> 2] = $10; //@line 5893
  $110 = $ReallocAsyncCtx2 + 24 | 0; //@line 5894
  HEAP32[$110 >> 2] = $12; //@line 5895
  $111 = $ReallocAsyncCtx2 + 28 | 0; //@line 5896
  HEAP32[$111 >> 2] = $14; //@line 5897
  $112 = $ReallocAsyncCtx2 + 32 | 0; //@line 5898
  HEAP32[$112 >> 2] = $16; //@line 5899
  $113 = $ReallocAsyncCtx2 + 36 | 0; //@line 5900
  HEAP32[$113 >> 2] = $18; //@line 5901
  $114 = $ReallocAsyncCtx2 + 40 | 0; //@line 5902
  HEAP32[$114 >> 2] = $$06992$reg2mem$0; //@line 5903
  $115 = $ReallocAsyncCtx2 + 44 | 0; //@line 5904
  HEAP32[$115 >> 2] = $$reg2mem$0; //@line 5905
  $116 = $ReallocAsyncCtx2 + 48 | 0; //@line 5906
  HEAP32[$116 >> 2] = $24; //@line 5907
  $117 = $ReallocAsyncCtx2 + 52 | 0; //@line 5908
  HEAP32[$117 >> 2] = $$reg2mem23$0; //@line 5909
  $118 = $ReallocAsyncCtx2 + 56 | 0; //@line 5910
  $$expand_i1_val33 = $28 & 1; //@line 5911
  HEAP8[$118 >> 0] = $$expand_i1_val33; //@line 5912
  $119 = $ReallocAsyncCtx2 + 60 | 0; //@line 5913
  HEAP32[$119 >> 2] = $30; //@line 5914
  $120 = $ReallocAsyncCtx2 + 64 | 0; //@line 5915
  HEAP32[$120 >> 2] = $32; //@line 5916
  $121 = $ReallocAsyncCtx2 + 68 | 0; //@line 5917
  HEAP32[$121 >> 2] = $34; //@line 5918
  $122 = $ReallocAsyncCtx2 + 72 | 0; //@line 5919
  HEAP32[$122 >> 2] = $36; //@line 5920
  $123 = $ReallocAsyncCtx2 + 76 | 0; //@line 5921
  HEAP32[$123 >> 2] = $38; //@line 5922
  $124 = $ReallocAsyncCtx2 + 80 | 0; //@line 5923
  HEAP32[$124 >> 2] = $40; //@line 5924
  sp = STACKTOP; //@line 5925
  return;
 } else if ((label | 0) == 24) {
  $140 = _equeue_tick() | 0; //@line 5929
  if ($28) {
   $141 = $30 - $140 | 0; //@line 5931
   if (($141 | 0) < 1) {
    $143 = $32 + 40 | 0; //@line 5934
    if (HEAP32[$143 >> 2] | 0) {
     _equeue_mutex_lock($4); //@line 5938
     $146 = HEAP32[$143 >> 2] | 0; //@line 5939
     if ($146 | 0) {
      $148 = HEAP32[$8 >> 2] | 0; //@line 5942
      if ($148 | 0) {
       $151 = HEAP32[$32 + 44 >> 2] | 0; //@line 5946
       $154 = (HEAP32[$148 + 20 >> 2] | 0) - $140 | 0; //@line 5949
       $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 5953
       FUNCTION_TABLE_vii[$146 & 31]($151, $154 & ~($154 >> 31)); //@line 5954
       if (___async) {
        HEAP32[$ReallocAsyncCtx3 >> 2] = 135; //@line 5957
        $158 = $ReallocAsyncCtx3 + 4 | 0; //@line 5958
        HEAP32[$158 >> 2] = $36; //@line 5959
        $159 = $ReallocAsyncCtx3 + 8 | 0; //@line 5960
        HEAP32[$159 >> 2] = $4; //@line 5961
        $160 = $ReallocAsyncCtx3 + 12 | 0; //@line 5962
        HEAP32[$160 >> 2] = $38; //@line 5963
        sp = STACKTOP; //@line 5964
        return;
       }
       ___async_unwind = 0; //@line 5967
       HEAP32[$ReallocAsyncCtx3 >> 2] = 135; //@line 5968
       $158 = $ReallocAsyncCtx3 + 4 | 0; //@line 5969
       HEAP32[$158 >> 2] = $36; //@line 5970
       $159 = $ReallocAsyncCtx3 + 8 | 0; //@line 5971
       HEAP32[$159 >> 2] = $4; //@line 5972
       $160 = $ReallocAsyncCtx3 + 12 | 0; //@line 5973
       HEAP32[$160 >> 2] = $38; //@line 5974
       sp = STACKTOP; //@line 5975
       return;
      }
     }
     HEAP8[$36 >> 0] = 1; //@line 5979
     _equeue_mutex_unlock($4); //@line 5980
    }
    HEAP8[$38 >> 0] = 0; //@line 5982
    return;
   } else {
    $$067 = $141; //@line 5985
   }
  } else {
   $$067 = -1; //@line 5988
  }
  _equeue_mutex_lock($4); //@line 5990
  $161 = HEAP32[$8 >> 2] | 0; //@line 5991
  if (!$161) {
   $$2 = $$067; //@line 5994
  } else {
   $165 = (HEAP32[$161 + 20 >> 2] | 0) - $140 | 0; //@line 5998
   $168 = $165 & ~($165 >> 31); //@line 6001
   $$2 = $168 >>> 0 < $$067 >>> 0 ? $168 : $$067; //@line 6004
  }
  _equeue_mutex_unlock($4); //@line 6006
  _equeue_sema_wait($40, $$2) | 0; //@line 6007
  do {
   if (HEAP8[$38 >> 0] | 0) {
    _equeue_mutex_lock($4); //@line 6012
    if (!(HEAP8[$38 >> 0] | 0)) {
     _equeue_mutex_unlock($4); //@line 6016
     break;
    }
    HEAP8[$38 >> 0] = 0; //@line 6019
    _equeue_mutex_unlock($4); //@line 6020
    return;
   }
  } while (0);
  $174 = _equeue_tick() | 0; //@line 6024
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(76) | 0; //@line 6025
  _wait_ms(20); //@line 6026
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 136; //@line 6029
   $175 = $ReallocAsyncCtx5 + 4 | 0; //@line 6030
   HEAP32[$175 >> 2] = $2; //@line 6031
   $176 = $ReallocAsyncCtx5 + 8 | 0; //@line 6032
   HEAP32[$176 >> 2] = $4; //@line 6033
   $177 = $ReallocAsyncCtx5 + 12 | 0; //@line 6034
   HEAP32[$177 >> 2] = $6; //@line 6035
   $178 = $ReallocAsyncCtx5 + 16 | 0; //@line 6036
   HEAP32[$178 >> 2] = $8; //@line 6037
   $179 = $ReallocAsyncCtx5 + 20 | 0; //@line 6038
   HEAP32[$179 >> 2] = $10; //@line 6039
   $180 = $ReallocAsyncCtx5 + 24 | 0; //@line 6040
   HEAP32[$180 >> 2] = $12; //@line 6041
   $181 = $ReallocAsyncCtx5 + 28 | 0; //@line 6042
   HEAP32[$181 >> 2] = $14; //@line 6043
   $182 = $ReallocAsyncCtx5 + 32 | 0; //@line 6044
   HEAP32[$182 >> 2] = $174; //@line 6045
   $183 = $ReallocAsyncCtx5 + 36 | 0; //@line 6046
   HEAP32[$183 >> 2] = $16; //@line 6047
   $184 = $ReallocAsyncCtx5 + 40 | 0; //@line 6048
   HEAP32[$184 >> 2] = $18; //@line 6049
   $185 = $ReallocAsyncCtx5 + 44 | 0; //@line 6050
   HEAP32[$185 >> 2] = $24; //@line 6051
   $186 = $ReallocAsyncCtx5 + 48 | 0; //@line 6052
   $$expand_i1_val35 = $28 & 1; //@line 6053
   HEAP8[$186 >> 0] = $$expand_i1_val35; //@line 6054
   $187 = $ReallocAsyncCtx5 + 52 | 0; //@line 6055
   HEAP32[$187 >> 2] = $30; //@line 6056
   $188 = $ReallocAsyncCtx5 + 56 | 0; //@line 6057
   HEAP32[$188 >> 2] = $32; //@line 6058
   $189 = $ReallocAsyncCtx5 + 60 | 0; //@line 6059
   HEAP32[$189 >> 2] = $34; //@line 6060
   $190 = $ReallocAsyncCtx5 + 64 | 0; //@line 6061
   HEAP32[$190 >> 2] = $36; //@line 6062
   $191 = $ReallocAsyncCtx5 + 68 | 0; //@line 6063
   HEAP32[$191 >> 2] = $38; //@line 6064
   $192 = $ReallocAsyncCtx5 + 72 | 0; //@line 6065
   HEAP32[$192 >> 2] = $40; //@line 6066
   sp = STACKTOP; //@line 6067
   return;
  }
  ___async_unwind = 0; //@line 6070
  HEAP32[$ReallocAsyncCtx5 >> 2] = 136; //@line 6071
  $175 = $ReallocAsyncCtx5 + 4 | 0; //@line 6072
  HEAP32[$175 >> 2] = $2; //@line 6073
  $176 = $ReallocAsyncCtx5 + 8 | 0; //@line 6074
  HEAP32[$176 >> 2] = $4; //@line 6075
  $177 = $ReallocAsyncCtx5 + 12 | 0; //@line 6076
  HEAP32[$177 >> 2] = $6; //@line 6077
  $178 = $ReallocAsyncCtx5 + 16 | 0; //@line 6078
  HEAP32[$178 >> 2] = $8; //@line 6079
  $179 = $ReallocAsyncCtx5 + 20 | 0; //@line 6080
  HEAP32[$179 >> 2] = $10; //@line 6081
  $180 = $ReallocAsyncCtx5 + 24 | 0; //@line 6082
  HEAP32[$180 >> 2] = $12; //@line 6083
  $181 = $ReallocAsyncCtx5 + 28 | 0; //@line 6084
  HEAP32[$181 >> 2] = $14; //@line 6085
  $182 = $ReallocAsyncCtx5 + 32 | 0; //@line 6086
  HEAP32[$182 >> 2] = $174; //@line 6087
  $183 = $ReallocAsyncCtx5 + 36 | 0; //@line 6088
  HEAP32[$183 >> 2] = $16; //@line 6089
  $184 = $ReallocAsyncCtx5 + 40 | 0; //@line 6090
  HEAP32[$184 >> 2] = $18; //@line 6091
  $185 = $ReallocAsyncCtx5 + 44 | 0; //@line 6092
  HEAP32[$185 >> 2] = $24; //@line 6093
  $186 = $ReallocAsyncCtx5 + 48 | 0; //@line 6094
  $$expand_i1_val35 = $28 & 1; //@line 6095
  HEAP8[$186 >> 0] = $$expand_i1_val35; //@line 6096
  $187 = $ReallocAsyncCtx5 + 52 | 0; //@line 6097
  HEAP32[$187 >> 2] = $30; //@line 6098
  $188 = $ReallocAsyncCtx5 + 56 | 0; //@line 6099
  HEAP32[$188 >> 2] = $32; //@line 6100
  $189 = $ReallocAsyncCtx5 + 60 | 0; //@line 6101
  HEAP32[$189 >> 2] = $34; //@line 6102
  $190 = $ReallocAsyncCtx5 + 64 | 0; //@line 6103
  HEAP32[$190 >> 2] = $36; //@line 6104
  $191 = $ReallocAsyncCtx5 + 68 | 0; //@line 6105
  HEAP32[$191 >> 2] = $38; //@line 6106
  $192 = $ReallocAsyncCtx5 + 72 | 0; //@line 6107
  HEAP32[$192 >> 2] = $40; //@line 6108
  sp = STACKTOP; //@line 6109
  return;
 }
}
function _equeue_dispatch__async_cb_239($0) {
 $0 = $0 | 0;
 var $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$067 = 0, $$06992$reg2mem$0 = 0, $$06992$reg2mem$0$phi = 0, $$2 = 0, $$expand_i1_val = 0, $$expand_i1_val31 = 0, $$expand_i1_val33 = 0, $$expand_i1_val35 = 0, $$reg2mem$0 = 0, $$reg2mem23$0 = 0, $$sink$in$i$i = 0, $10 = 0, $102 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $127 = 0, $128 = 0, $129 = 0, $131 = 0, $132 = 0, $14 = 0, $140 = 0, $141 = 0, $143 = 0, $146 = 0, $148 = 0, $151 = 0, $154 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $165 = 0, $168 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $2 = 0, $24 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $70 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6127
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6129
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6131
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6133
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6135
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 6137
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 6139
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 6141
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 6143
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 6145
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 6151
 $28 = HEAP8[$0 + 56 >> 0] & 1; //@line 6156
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 6158
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 6160
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 6162
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 6164
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 6166
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 6168
 $$06992$reg2mem$0 = HEAP32[$0 + 40 >> 2] | 0; //@line 6169
 $$reg2mem$0 = HEAP32[$0 + 44 >> 2] | 0; //@line 6169
 $$reg2mem23$0 = HEAP32[$0 + 52 >> 2] | 0; //@line 6169
 while (1) {
  _equeue_mutex_lock($24); //@line 6171
  $125 = HEAP32[$18 >> 2] | 0; //@line 6172
  L4 : do {
   if (!$125) {
    $$02329$i$i = $18; //@line 6176
    label = 21; //@line 6177
   } else {
    $127 = HEAP32[$$06992$reg2mem$0 >> 2] | 0; //@line 6179
    $$025$i$i = $18; //@line 6180
    $129 = $125; //@line 6180
    while (1) {
     $128 = HEAP32[$129 >> 2] | 0; //@line 6182
     if ($128 >>> 0 >= $127 >>> 0) {
      break;
     }
     $131 = $129 + 8 | 0; //@line 6187
     $132 = HEAP32[$131 >> 2] | 0; //@line 6188
     if (!$132) {
      $$02329$i$i = $131; //@line 6191
      label = 21; //@line 6192
      break L4;
     } else {
      $$025$i$i = $131; //@line 6195
      $129 = $132; //@line 6195
     }
    }
    if (($128 | 0) == ($127 | 0)) {
     HEAP32[$$06992$reg2mem$0 + 12 >> 2] = $129; //@line 6201
     $$02330$i$i = $$025$i$i; //@line 6204
     $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 6204
    } else {
     $$02329$i$i = $$025$i$i; //@line 6206
     label = 21; //@line 6207
    }
   }
  } while (0);
  if ((label | 0) == 21) {
   label = 0; //@line 6212
   HEAP32[$$06992$reg2mem$0 + 12 >> 2] = 0; //@line 6214
   $$02330$i$i = $$02329$i$i; //@line 6215
   $$sink$in$i$i = $$02329$i$i; //@line 6215
  }
  HEAP32[$$reg2mem$0 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 6218
  HEAP32[$$02330$i$i >> 2] = $$06992$reg2mem$0; //@line 6219
  _equeue_mutex_unlock($24); //@line 6220
  if (!$$reg2mem23$0) {
   label = 24; //@line 6223
   break;
  }
  $$reg2mem$0 = $$reg2mem23$0 + 8 | 0; //@line 6226
  $42 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 6227
  $44 = HEAP32[$$reg2mem23$0 + 32 >> 2] | 0; //@line 6229
  if ($44 | 0) {
   label = 3; //@line 6232
   break;
  }
  $68 = HEAP32[$$reg2mem23$0 + 24 >> 2] | 0; //@line 6236
  if (($68 | 0) > -1) {
   label = 7; //@line 6239
   break;
  }
  $92 = $$reg2mem23$0 + 4 | 0; //@line 6243
  $93 = HEAP8[$92 >> 0] | 0; //@line 6244
  HEAP8[$92 >> 0] = (($93 + 1 & 255) << HEAP32[$34 >> 2] | 0) == 0 ? 1 : ($93 & 255) + 1 & 255; //@line 6253
  $102 = HEAP32[$$reg2mem23$0 + 28 >> 2] | 0; //@line 6255
  if ($102 | 0) {
   label = 11; //@line 6260
   break;
  } else {
   $$06992$reg2mem$0$phi = $$reg2mem23$0; //@line 6258
   $$reg2mem23$0 = $42; //@line 6258
   $$06992$reg2mem$0 = $$06992$reg2mem$0$phi; //@line 6258
  }
 }
 if ((label | 0) == 3) {
  $ReallocAsyncCtx = _emscripten_realloc_async_context(84) | 0; //@line 6266
  FUNCTION_TABLE_vi[$44 & 1023]($$reg2mem23$0 + 36 | 0); //@line 6267
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 132; //@line 6270
   $47 = $ReallocAsyncCtx + 4 | 0; //@line 6271
   HEAP32[$47 >> 2] = $2; //@line 6272
   $48 = $ReallocAsyncCtx + 8 | 0; //@line 6273
   HEAP32[$48 >> 2] = $4; //@line 6274
   $49 = $ReallocAsyncCtx + 12 | 0; //@line 6275
   HEAP32[$49 >> 2] = $6; //@line 6276
   $50 = $ReallocAsyncCtx + 16 | 0; //@line 6277
   HEAP32[$50 >> 2] = $8; //@line 6278
   $51 = $ReallocAsyncCtx + 20 | 0; //@line 6279
   HEAP32[$51 >> 2] = $10; //@line 6280
   $52 = $ReallocAsyncCtx + 24 | 0; //@line 6281
   HEAP32[$52 >> 2] = $12; //@line 6282
   $53 = $ReallocAsyncCtx + 28 | 0; //@line 6283
   HEAP32[$53 >> 2] = $14; //@line 6284
   $54 = $ReallocAsyncCtx + 32 | 0; //@line 6285
   HEAP32[$54 >> 2] = $16; //@line 6286
   $55 = $ReallocAsyncCtx + 36 | 0; //@line 6287
   HEAP32[$55 >> 2] = $18; //@line 6288
   $56 = $ReallocAsyncCtx + 40 | 0; //@line 6289
   HEAP32[$56 >> 2] = $$reg2mem23$0; //@line 6290
   $57 = $ReallocAsyncCtx + 44 | 0; //@line 6291
   HEAP32[$57 >> 2] = $$reg2mem$0; //@line 6292
   $58 = $ReallocAsyncCtx + 48 | 0; //@line 6293
   HEAP32[$58 >> 2] = $24; //@line 6294
   $59 = $ReallocAsyncCtx + 52 | 0; //@line 6295
   HEAP32[$59 >> 2] = $42; //@line 6296
   $60 = $ReallocAsyncCtx + 56 | 0; //@line 6297
   $$expand_i1_val = $28 & 1; //@line 6298
   HEAP8[$60 >> 0] = $$expand_i1_val; //@line 6299
   $61 = $ReallocAsyncCtx + 60 | 0; //@line 6300
   HEAP32[$61 >> 2] = $30; //@line 6301
   $62 = $ReallocAsyncCtx + 64 | 0; //@line 6302
   HEAP32[$62 >> 2] = $32; //@line 6303
   $63 = $ReallocAsyncCtx + 68 | 0; //@line 6304
   HEAP32[$63 >> 2] = $34; //@line 6305
   $64 = $ReallocAsyncCtx + 72 | 0; //@line 6306
   HEAP32[$64 >> 2] = $36; //@line 6307
   $65 = $ReallocAsyncCtx + 76 | 0; //@line 6308
   HEAP32[$65 >> 2] = $38; //@line 6309
   $66 = $ReallocAsyncCtx + 80 | 0; //@line 6310
   HEAP32[$66 >> 2] = $40; //@line 6311
   sp = STACKTOP; //@line 6312
   return;
  }
  ___async_unwind = 0; //@line 6315
  HEAP32[$ReallocAsyncCtx >> 2] = 132; //@line 6316
  $47 = $ReallocAsyncCtx + 4 | 0; //@line 6317
  HEAP32[$47 >> 2] = $2; //@line 6318
  $48 = $ReallocAsyncCtx + 8 | 0; //@line 6319
  HEAP32[$48 >> 2] = $4; //@line 6320
  $49 = $ReallocAsyncCtx + 12 | 0; //@line 6321
  HEAP32[$49 >> 2] = $6; //@line 6322
  $50 = $ReallocAsyncCtx + 16 | 0; //@line 6323
  HEAP32[$50 >> 2] = $8; //@line 6324
  $51 = $ReallocAsyncCtx + 20 | 0; //@line 6325
  HEAP32[$51 >> 2] = $10; //@line 6326
  $52 = $ReallocAsyncCtx + 24 | 0; //@line 6327
  HEAP32[$52 >> 2] = $12; //@line 6328
  $53 = $ReallocAsyncCtx + 28 | 0; //@line 6329
  HEAP32[$53 >> 2] = $14; //@line 6330
  $54 = $ReallocAsyncCtx + 32 | 0; //@line 6331
  HEAP32[$54 >> 2] = $16; //@line 6332
  $55 = $ReallocAsyncCtx + 36 | 0; //@line 6333
  HEAP32[$55 >> 2] = $18; //@line 6334
  $56 = $ReallocAsyncCtx + 40 | 0; //@line 6335
  HEAP32[$56 >> 2] = $$reg2mem23$0; //@line 6336
  $57 = $ReallocAsyncCtx + 44 | 0; //@line 6337
  HEAP32[$57 >> 2] = $$reg2mem$0; //@line 6338
  $58 = $ReallocAsyncCtx + 48 | 0; //@line 6339
  HEAP32[$58 >> 2] = $24; //@line 6340
  $59 = $ReallocAsyncCtx + 52 | 0; //@line 6341
  HEAP32[$59 >> 2] = $42; //@line 6342
  $60 = $ReallocAsyncCtx + 56 | 0; //@line 6343
  $$expand_i1_val = $28 & 1; //@line 6344
  HEAP8[$60 >> 0] = $$expand_i1_val; //@line 6345
  $61 = $ReallocAsyncCtx + 60 | 0; //@line 6346
  HEAP32[$61 >> 2] = $30; //@line 6347
  $62 = $ReallocAsyncCtx + 64 | 0; //@line 6348
  HEAP32[$62 >> 2] = $32; //@line 6349
  $63 = $ReallocAsyncCtx + 68 | 0; //@line 6350
  HEAP32[$63 >> 2] = $34; //@line 6351
  $64 = $ReallocAsyncCtx + 72 | 0; //@line 6352
  HEAP32[$64 >> 2] = $36; //@line 6353
  $65 = $ReallocAsyncCtx + 76 | 0; //@line 6354
  HEAP32[$65 >> 2] = $38; //@line 6355
  $66 = $ReallocAsyncCtx + 80 | 0; //@line 6356
  HEAP32[$66 >> 2] = $40; //@line 6357
  sp = STACKTOP; //@line 6358
  return;
 } else if ((label | 0) == 7) {
  $70 = $$reg2mem23$0 + 20 | 0; //@line 6362
  HEAP32[$70 >> 2] = (HEAP32[$70 >> 2] | 0) + $68; //@line 6365
  $73 = _equeue_tick() | 0; //@line 6366
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(76) | 0; //@line 6367
  _equeue_enqueue($32, $$reg2mem23$0, $73) | 0; //@line 6368
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 133; //@line 6371
   $74 = $ReallocAsyncCtx4 + 4 | 0; //@line 6372
   HEAP32[$74 >> 2] = $2; //@line 6373
   $75 = $ReallocAsyncCtx4 + 8 | 0; //@line 6374
   HEAP32[$75 >> 2] = $4; //@line 6375
   $76 = $ReallocAsyncCtx4 + 12 | 0; //@line 6376
   HEAP32[$76 >> 2] = $6; //@line 6377
   $77 = $ReallocAsyncCtx4 + 16 | 0; //@line 6378
   HEAP32[$77 >> 2] = $8; //@line 6379
   $78 = $ReallocAsyncCtx4 + 20 | 0; //@line 6380
   HEAP32[$78 >> 2] = $10; //@line 6381
   $79 = $ReallocAsyncCtx4 + 24 | 0; //@line 6382
   HEAP32[$79 >> 2] = $12; //@line 6383
   $80 = $ReallocAsyncCtx4 + 28 | 0; //@line 6384
   HEAP32[$80 >> 2] = $14; //@line 6385
   $81 = $ReallocAsyncCtx4 + 32 | 0; //@line 6386
   HEAP32[$81 >> 2] = $16; //@line 6387
   $82 = $ReallocAsyncCtx4 + 36 | 0; //@line 6388
   HEAP32[$82 >> 2] = $18; //@line 6389
   $83 = $ReallocAsyncCtx4 + 40 | 0; //@line 6390
   HEAP32[$83 >> 2] = $24; //@line 6391
   $84 = $ReallocAsyncCtx4 + 44 | 0; //@line 6392
   HEAP32[$84 >> 2] = $42; //@line 6393
   $85 = $ReallocAsyncCtx4 + 48 | 0; //@line 6394
   $$expand_i1_val31 = $28 & 1; //@line 6395
   HEAP8[$85 >> 0] = $$expand_i1_val31; //@line 6396
   $86 = $ReallocAsyncCtx4 + 52 | 0; //@line 6397
   HEAP32[$86 >> 2] = $30; //@line 6398
   $87 = $ReallocAsyncCtx4 + 56 | 0; //@line 6399
   HEAP32[$87 >> 2] = $32; //@line 6400
   $88 = $ReallocAsyncCtx4 + 60 | 0; //@line 6401
   HEAP32[$88 >> 2] = $34; //@line 6402
   $89 = $ReallocAsyncCtx4 + 64 | 0; //@line 6403
   HEAP32[$89 >> 2] = $36; //@line 6404
   $90 = $ReallocAsyncCtx4 + 68 | 0; //@line 6405
   HEAP32[$90 >> 2] = $38; //@line 6406
   $91 = $ReallocAsyncCtx4 + 72 | 0; //@line 6407
   HEAP32[$91 >> 2] = $40; //@line 6408
   sp = STACKTOP; //@line 6409
   return;
  }
  ___async_unwind = 0; //@line 6412
  HEAP32[$ReallocAsyncCtx4 >> 2] = 133; //@line 6413
  $74 = $ReallocAsyncCtx4 + 4 | 0; //@line 6414
  HEAP32[$74 >> 2] = $2; //@line 6415
  $75 = $ReallocAsyncCtx4 + 8 | 0; //@line 6416
  HEAP32[$75 >> 2] = $4; //@line 6417
  $76 = $ReallocAsyncCtx4 + 12 | 0; //@line 6418
  HEAP32[$76 >> 2] = $6; //@line 6419
  $77 = $ReallocAsyncCtx4 + 16 | 0; //@line 6420
  HEAP32[$77 >> 2] = $8; //@line 6421
  $78 = $ReallocAsyncCtx4 + 20 | 0; //@line 6422
  HEAP32[$78 >> 2] = $10; //@line 6423
  $79 = $ReallocAsyncCtx4 + 24 | 0; //@line 6424
  HEAP32[$79 >> 2] = $12; //@line 6425
  $80 = $ReallocAsyncCtx4 + 28 | 0; //@line 6426
  HEAP32[$80 >> 2] = $14; //@line 6427
  $81 = $ReallocAsyncCtx4 + 32 | 0; //@line 6428
  HEAP32[$81 >> 2] = $16; //@line 6429
  $82 = $ReallocAsyncCtx4 + 36 | 0; //@line 6430
  HEAP32[$82 >> 2] = $18; //@line 6431
  $83 = $ReallocAsyncCtx4 + 40 | 0; //@line 6432
  HEAP32[$83 >> 2] = $24; //@line 6433
  $84 = $ReallocAsyncCtx4 + 44 | 0; //@line 6434
  HEAP32[$84 >> 2] = $42; //@line 6435
  $85 = $ReallocAsyncCtx4 + 48 | 0; //@line 6436
  $$expand_i1_val31 = $28 & 1; //@line 6437
  HEAP8[$85 >> 0] = $$expand_i1_val31; //@line 6438
  $86 = $ReallocAsyncCtx4 + 52 | 0; //@line 6439
  HEAP32[$86 >> 2] = $30; //@line 6440
  $87 = $ReallocAsyncCtx4 + 56 | 0; //@line 6441
  HEAP32[$87 >> 2] = $32; //@line 6442
  $88 = $ReallocAsyncCtx4 + 60 | 0; //@line 6443
  HEAP32[$88 >> 2] = $34; //@line 6444
  $89 = $ReallocAsyncCtx4 + 64 | 0; //@line 6445
  HEAP32[$89 >> 2] = $36; //@line 6446
  $90 = $ReallocAsyncCtx4 + 68 | 0; //@line 6447
  HEAP32[$90 >> 2] = $38; //@line 6448
  $91 = $ReallocAsyncCtx4 + 72 | 0; //@line 6449
  HEAP32[$91 >> 2] = $40; //@line 6450
  sp = STACKTOP; //@line 6451
  return;
 } else if ((label | 0) == 11) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(84) | 0; //@line 6456
  FUNCTION_TABLE_vi[$102 & 1023]($$reg2mem23$0 + 36 | 0); //@line 6457
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 134; //@line 6460
   $105 = $ReallocAsyncCtx2 + 4 | 0; //@line 6461
   HEAP32[$105 >> 2] = $2; //@line 6462
   $106 = $ReallocAsyncCtx2 + 8 | 0; //@line 6463
   HEAP32[$106 >> 2] = $4; //@line 6464
   $107 = $ReallocAsyncCtx2 + 12 | 0; //@line 6465
   HEAP32[$107 >> 2] = $6; //@line 6466
   $108 = $ReallocAsyncCtx2 + 16 | 0; //@line 6467
   HEAP32[$108 >> 2] = $8; //@line 6468
   $109 = $ReallocAsyncCtx2 + 20 | 0; //@line 6469
   HEAP32[$109 >> 2] = $10; //@line 6470
   $110 = $ReallocAsyncCtx2 + 24 | 0; //@line 6471
   HEAP32[$110 >> 2] = $12; //@line 6472
   $111 = $ReallocAsyncCtx2 + 28 | 0; //@line 6473
   HEAP32[$111 >> 2] = $14; //@line 6474
   $112 = $ReallocAsyncCtx2 + 32 | 0; //@line 6475
   HEAP32[$112 >> 2] = $16; //@line 6476
   $113 = $ReallocAsyncCtx2 + 36 | 0; //@line 6477
   HEAP32[$113 >> 2] = $18; //@line 6478
   $114 = $ReallocAsyncCtx2 + 40 | 0; //@line 6479
   HEAP32[$114 >> 2] = $$reg2mem23$0; //@line 6480
   $115 = $ReallocAsyncCtx2 + 44 | 0; //@line 6481
   HEAP32[$115 >> 2] = $$reg2mem$0; //@line 6482
   $116 = $ReallocAsyncCtx2 + 48 | 0; //@line 6483
   HEAP32[$116 >> 2] = $24; //@line 6484
   $117 = $ReallocAsyncCtx2 + 52 | 0; //@line 6485
   HEAP32[$117 >> 2] = $42; //@line 6486
   $118 = $ReallocAsyncCtx2 + 56 | 0; //@line 6487
   $$expand_i1_val33 = $28 & 1; //@line 6488
   HEAP8[$118 >> 0] = $$expand_i1_val33; //@line 6489
   $119 = $ReallocAsyncCtx2 + 60 | 0; //@line 6490
   HEAP32[$119 >> 2] = $30; //@line 6491
   $120 = $ReallocAsyncCtx2 + 64 | 0; //@line 6492
   HEAP32[$120 >> 2] = $32; //@line 6493
   $121 = $ReallocAsyncCtx2 + 68 | 0; //@line 6494
   HEAP32[$121 >> 2] = $34; //@line 6495
   $122 = $ReallocAsyncCtx2 + 72 | 0; //@line 6496
   HEAP32[$122 >> 2] = $36; //@line 6497
   $123 = $ReallocAsyncCtx2 + 76 | 0; //@line 6498
   HEAP32[$123 >> 2] = $38; //@line 6499
   $124 = $ReallocAsyncCtx2 + 80 | 0; //@line 6500
   HEAP32[$124 >> 2] = $40; //@line 6501
   sp = STACKTOP; //@line 6502
   return;
  }
  ___async_unwind = 0; //@line 6505
  HEAP32[$ReallocAsyncCtx2 >> 2] = 134; //@line 6506
  $105 = $ReallocAsyncCtx2 + 4 | 0; //@line 6507
  HEAP32[$105 >> 2] = $2; //@line 6508
  $106 = $ReallocAsyncCtx2 + 8 | 0; //@line 6509
  HEAP32[$106 >> 2] = $4; //@line 6510
  $107 = $ReallocAsyncCtx2 + 12 | 0; //@line 6511
  HEAP32[$107 >> 2] = $6; //@line 6512
  $108 = $ReallocAsyncCtx2 + 16 | 0; //@line 6513
  HEAP32[$108 >> 2] = $8; //@line 6514
  $109 = $ReallocAsyncCtx2 + 20 | 0; //@line 6515
  HEAP32[$109 >> 2] = $10; //@line 6516
  $110 = $ReallocAsyncCtx2 + 24 | 0; //@line 6517
  HEAP32[$110 >> 2] = $12; //@line 6518
  $111 = $ReallocAsyncCtx2 + 28 | 0; //@line 6519
  HEAP32[$111 >> 2] = $14; //@line 6520
  $112 = $ReallocAsyncCtx2 + 32 | 0; //@line 6521
  HEAP32[$112 >> 2] = $16; //@line 6522
  $113 = $ReallocAsyncCtx2 + 36 | 0; //@line 6523
  HEAP32[$113 >> 2] = $18; //@line 6524
  $114 = $ReallocAsyncCtx2 + 40 | 0; //@line 6525
  HEAP32[$114 >> 2] = $$reg2mem23$0; //@line 6526
  $115 = $ReallocAsyncCtx2 + 44 | 0; //@line 6527
  HEAP32[$115 >> 2] = $$reg2mem$0; //@line 6528
  $116 = $ReallocAsyncCtx2 + 48 | 0; //@line 6529
  HEAP32[$116 >> 2] = $24; //@line 6530
  $117 = $ReallocAsyncCtx2 + 52 | 0; //@line 6531
  HEAP32[$117 >> 2] = $42; //@line 6532
  $118 = $ReallocAsyncCtx2 + 56 | 0; //@line 6533
  $$expand_i1_val33 = $28 & 1; //@line 6534
  HEAP8[$118 >> 0] = $$expand_i1_val33; //@line 6535
  $119 = $ReallocAsyncCtx2 + 60 | 0; //@line 6536
  HEAP32[$119 >> 2] = $30; //@line 6537
  $120 = $ReallocAsyncCtx2 + 64 | 0; //@line 6538
  HEAP32[$120 >> 2] = $32; //@line 6539
  $121 = $ReallocAsyncCtx2 + 68 | 0; //@line 6540
  HEAP32[$121 >> 2] = $34; //@line 6541
  $122 = $ReallocAsyncCtx2 + 72 | 0; //@line 6542
  HEAP32[$122 >> 2] = $36; //@line 6543
  $123 = $ReallocAsyncCtx2 + 76 | 0; //@line 6544
  HEAP32[$123 >> 2] = $38; //@line 6545
  $124 = $ReallocAsyncCtx2 + 80 | 0; //@line 6546
  HEAP32[$124 >> 2] = $40; //@line 6547
  sp = STACKTOP; //@line 6548
  return;
 } else if ((label | 0) == 24) {
  $140 = _equeue_tick() | 0; //@line 6552
  if ($28) {
   $141 = $30 - $140 | 0; //@line 6554
   if (($141 | 0) < 1) {
    $143 = $32 + 40 | 0; //@line 6557
    if (HEAP32[$143 >> 2] | 0) {
     _equeue_mutex_lock($4); //@line 6561
     $146 = HEAP32[$143 >> 2] | 0; //@line 6562
     if ($146 | 0) {
      $148 = HEAP32[$8 >> 2] | 0; //@line 6565
      if ($148 | 0) {
       $151 = HEAP32[$32 + 44 >> 2] | 0; //@line 6569
       $154 = (HEAP32[$148 + 20 >> 2] | 0) - $140 | 0; //@line 6572
       $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 6576
       FUNCTION_TABLE_vii[$146 & 31]($151, $154 & ~($154 >> 31)); //@line 6577
       if (___async) {
        HEAP32[$ReallocAsyncCtx3 >> 2] = 135; //@line 6580
        $158 = $ReallocAsyncCtx3 + 4 | 0; //@line 6581
        HEAP32[$158 >> 2] = $36; //@line 6582
        $159 = $ReallocAsyncCtx3 + 8 | 0; //@line 6583
        HEAP32[$159 >> 2] = $4; //@line 6584
        $160 = $ReallocAsyncCtx3 + 12 | 0; //@line 6585
        HEAP32[$160 >> 2] = $38; //@line 6586
        sp = STACKTOP; //@line 6587
        return;
       }
       ___async_unwind = 0; //@line 6590
       HEAP32[$ReallocAsyncCtx3 >> 2] = 135; //@line 6591
       $158 = $ReallocAsyncCtx3 + 4 | 0; //@line 6592
       HEAP32[$158 >> 2] = $36; //@line 6593
       $159 = $ReallocAsyncCtx3 + 8 | 0; //@line 6594
       HEAP32[$159 >> 2] = $4; //@line 6595
       $160 = $ReallocAsyncCtx3 + 12 | 0; //@line 6596
       HEAP32[$160 >> 2] = $38; //@line 6597
       sp = STACKTOP; //@line 6598
       return;
      }
     }
     HEAP8[$36 >> 0] = 1; //@line 6602
     _equeue_mutex_unlock($4); //@line 6603
    }
    HEAP8[$38 >> 0] = 0; //@line 6605
    return;
   } else {
    $$067 = $141; //@line 6608
   }
  } else {
   $$067 = -1; //@line 6611
  }
  _equeue_mutex_lock($4); //@line 6613
  $161 = HEAP32[$8 >> 2] | 0; //@line 6614
  if (!$161) {
   $$2 = $$067; //@line 6617
  } else {
   $165 = (HEAP32[$161 + 20 >> 2] | 0) - $140 | 0; //@line 6621
   $168 = $165 & ~($165 >> 31); //@line 6624
   $$2 = $168 >>> 0 < $$067 >>> 0 ? $168 : $$067; //@line 6627
  }
  _equeue_mutex_unlock($4); //@line 6629
  _equeue_sema_wait($40, $$2) | 0; //@line 6630
  do {
   if (HEAP8[$38 >> 0] | 0) {
    _equeue_mutex_lock($4); //@line 6635
    if (!(HEAP8[$38 >> 0] | 0)) {
     _equeue_mutex_unlock($4); //@line 6639
     break;
    }
    HEAP8[$38 >> 0] = 0; //@line 6642
    _equeue_mutex_unlock($4); //@line 6643
    return;
   }
  } while (0);
  $174 = _equeue_tick() | 0; //@line 6647
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(76) | 0; //@line 6648
  _wait_ms(20); //@line 6649
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 136; //@line 6652
   $175 = $ReallocAsyncCtx5 + 4 | 0; //@line 6653
   HEAP32[$175 >> 2] = $2; //@line 6654
   $176 = $ReallocAsyncCtx5 + 8 | 0; //@line 6655
   HEAP32[$176 >> 2] = $4; //@line 6656
   $177 = $ReallocAsyncCtx5 + 12 | 0; //@line 6657
   HEAP32[$177 >> 2] = $6; //@line 6658
   $178 = $ReallocAsyncCtx5 + 16 | 0; //@line 6659
   HEAP32[$178 >> 2] = $8; //@line 6660
   $179 = $ReallocAsyncCtx5 + 20 | 0; //@line 6661
   HEAP32[$179 >> 2] = $10; //@line 6662
   $180 = $ReallocAsyncCtx5 + 24 | 0; //@line 6663
   HEAP32[$180 >> 2] = $12; //@line 6664
   $181 = $ReallocAsyncCtx5 + 28 | 0; //@line 6665
   HEAP32[$181 >> 2] = $14; //@line 6666
   $182 = $ReallocAsyncCtx5 + 32 | 0; //@line 6667
   HEAP32[$182 >> 2] = $174; //@line 6668
   $183 = $ReallocAsyncCtx5 + 36 | 0; //@line 6669
   HEAP32[$183 >> 2] = $16; //@line 6670
   $184 = $ReallocAsyncCtx5 + 40 | 0; //@line 6671
   HEAP32[$184 >> 2] = $18; //@line 6672
   $185 = $ReallocAsyncCtx5 + 44 | 0; //@line 6673
   HEAP32[$185 >> 2] = $24; //@line 6674
   $186 = $ReallocAsyncCtx5 + 48 | 0; //@line 6675
   $$expand_i1_val35 = $28 & 1; //@line 6676
   HEAP8[$186 >> 0] = $$expand_i1_val35; //@line 6677
   $187 = $ReallocAsyncCtx5 + 52 | 0; //@line 6678
   HEAP32[$187 >> 2] = $30; //@line 6679
   $188 = $ReallocAsyncCtx5 + 56 | 0; //@line 6680
   HEAP32[$188 >> 2] = $32; //@line 6681
   $189 = $ReallocAsyncCtx5 + 60 | 0; //@line 6682
   HEAP32[$189 >> 2] = $34; //@line 6683
   $190 = $ReallocAsyncCtx5 + 64 | 0; //@line 6684
   HEAP32[$190 >> 2] = $36; //@line 6685
   $191 = $ReallocAsyncCtx5 + 68 | 0; //@line 6686
   HEAP32[$191 >> 2] = $38; //@line 6687
   $192 = $ReallocAsyncCtx5 + 72 | 0; //@line 6688
   HEAP32[$192 >> 2] = $40; //@line 6689
   sp = STACKTOP; //@line 6690
   return;
  }
  ___async_unwind = 0; //@line 6693
  HEAP32[$ReallocAsyncCtx5 >> 2] = 136; //@line 6694
  $175 = $ReallocAsyncCtx5 + 4 | 0; //@line 6695
  HEAP32[$175 >> 2] = $2; //@line 6696
  $176 = $ReallocAsyncCtx5 + 8 | 0; //@line 6697
  HEAP32[$176 >> 2] = $4; //@line 6698
  $177 = $ReallocAsyncCtx5 + 12 | 0; //@line 6699
  HEAP32[$177 >> 2] = $6; //@line 6700
  $178 = $ReallocAsyncCtx5 + 16 | 0; //@line 6701
  HEAP32[$178 >> 2] = $8; //@line 6702
  $179 = $ReallocAsyncCtx5 + 20 | 0; //@line 6703
  HEAP32[$179 >> 2] = $10; //@line 6704
  $180 = $ReallocAsyncCtx5 + 24 | 0; //@line 6705
  HEAP32[$180 >> 2] = $12; //@line 6706
  $181 = $ReallocAsyncCtx5 + 28 | 0; //@line 6707
  HEAP32[$181 >> 2] = $14; //@line 6708
  $182 = $ReallocAsyncCtx5 + 32 | 0; //@line 6709
  HEAP32[$182 >> 2] = $174; //@line 6710
  $183 = $ReallocAsyncCtx5 + 36 | 0; //@line 6711
  HEAP32[$183 >> 2] = $16; //@line 6712
  $184 = $ReallocAsyncCtx5 + 40 | 0; //@line 6713
  HEAP32[$184 >> 2] = $18; //@line 6714
  $185 = $ReallocAsyncCtx5 + 44 | 0; //@line 6715
  HEAP32[$185 >> 2] = $24; //@line 6716
  $186 = $ReallocAsyncCtx5 + 48 | 0; //@line 6717
  $$expand_i1_val35 = $28 & 1; //@line 6718
  HEAP8[$186 >> 0] = $$expand_i1_val35; //@line 6719
  $187 = $ReallocAsyncCtx5 + 52 | 0; //@line 6720
  HEAP32[$187 >> 2] = $30; //@line 6721
  $188 = $ReallocAsyncCtx5 + 56 | 0; //@line 6722
  HEAP32[$188 >> 2] = $32; //@line 6723
  $189 = $ReallocAsyncCtx5 + 60 | 0; //@line 6724
  HEAP32[$189 >> 2] = $34; //@line 6725
  $190 = $ReallocAsyncCtx5 + 64 | 0; //@line 6726
  HEAP32[$190 >> 2] = $36; //@line 6727
  $191 = $ReallocAsyncCtx5 + 68 | 0; //@line 6728
  HEAP32[$191 >> 2] = $38; //@line 6729
  $192 = $ReallocAsyncCtx5 + 72 | 0; //@line 6730
  HEAP32[$192 >> 2] = $40; //@line 6731
  sp = STACKTOP; //@line 6732
  return;
 }
}
function _equeue_dispatch__async_cb_241($0) {
 $0 = $0 | 0;
 var $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$067 = 0, $$2 = 0, $$expand_i1_val = 0, $$expand_i1_val12 = 0, $$expand_i1_val14 = 0, $$expand_i1_val16 = 0, $$reg2mem$0 = 0, $$sink$in$i$i = 0, $10 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $123 = 0, $124 = 0, $125 = 0, $127 = 0, $128 = 0, $136 = 0, $137 = 0, $139 = 0, $14 = 0, $142 = 0, $144 = 0, $147 = 0, $150 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $161 = 0, $164 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $2 = 0, $20 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $64 = 0, $66 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $98 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6764
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6766
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6768
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6770
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6772
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 6774
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 6776
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 6778
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 6780
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 6782
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 6784
 $24 = HEAP8[$0 + 48 >> 0] & 1; //@line 6789
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 6791
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 6793
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 6795
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 6797
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 6799
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 6801
 $$reg2mem$0 = HEAP32[$0 + 44 >> 2] | 0; //@line 6802
 while (1) {
  if (!$$reg2mem$0) {
   label = 24; //@line 6806
   break;
  }
  $37 = $$reg2mem$0 + 8 | 0; //@line 6809
  $38 = HEAP32[$37 >> 2] | 0; //@line 6810
  $40 = HEAP32[$$reg2mem$0 + 32 >> 2] | 0; //@line 6812
  if ($40 | 0) {
   label = 3; //@line 6815
   break;
  }
  $64 = HEAP32[$$reg2mem$0 + 24 >> 2] | 0; //@line 6819
  if (($64 | 0) > -1) {
   label = 7; //@line 6822
   break;
  }
  $88 = $$reg2mem$0 + 4 | 0; //@line 6826
  $89 = HEAP8[$88 >> 0] | 0; //@line 6827
  HEAP8[$88 >> 0] = (($89 + 1 & 255) << HEAP32[$30 >> 2] | 0) == 0 ? 1 : ($89 & 255) + 1 & 255; //@line 6836
  $98 = HEAP32[$$reg2mem$0 + 28 >> 2] | 0; //@line 6838
  if ($98 | 0) {
   label = 12; //@line 6841
   break;
  }
  _equeue_mutex_lock($20); //@line 6844
  $121 = HEAP32[$18 >> 2] | 0; //@line 6845
  L8 : do {
   if (!$121) {
    $$02329$i$i = $18; //@line 6849
    label = 21; //@line 6850
   } else {
    $123 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 6852
    $$025$i$i = $18; //@line 6853
    $125 = $121; //@line 6853
    while (1) {
     $124 = HEAP32[$125 >> 2] | 0; //@line 6855
     if ($124 >>> 0 >= $123 >>> 0) {
      break;
     }
     $127 = $125 + 8 | 0; //@line 6860
     $128 = HEAP32[$127 >> 2] | 0; //@line 6861
     if (!$128) {
      $$02329$i$i = $127; //@line 6864
      label = 21; //@line 6865
      break L8;
     } else {
      $$025$i$i = $127; //@line 6868
      $125 = $128; //@line 6868
     }
    }
    if (($124 | 0) == ($123 | 0)) {
     HEAP32[$$reg2mem$0 + 12 >> 2] = $125; //@line 6874
     $$02330$i$i = $$025$i$i; //@line 6877
     $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 6877
    } else {
     $$02329$i$i = $$025$i$i; //@line 6879
     label = 21; //@line 6880
    }
   }
  } while (0);
  if ((label | 0) == 21) {
   label = 0; //@line 6885
   HEAP32[$$reg2mem$0 + 12 >> 2] = 0; //@line 6887
   $$02330$i$i = $$02329$i$i; //@line 6888
   $$sink$in$i$i = $$02329$i$i; //@line 6888
  }
  HEAP32[$37 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 6891
  HEAP32[$$02330$i$i >> 2] = $$reg2mem$0; //@line 6892
  _equeue_mutex_unlock($20); //@line 6893
  $$reg2mem$0 = $38; //@line 6894
 }
 if ((label | 0) == 3) {
  $ReallocAsyncCtx = _emscripten_realloc_async_context(84) | 0; //@line 6898
  FUNCTION_TABLE_vi[$40 & 1023]($$reg2mem$0 + 36 | 0); //@line 6899
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 132; //@line 6902
   $43 = $ReallocAsyncCtx + 4 | 0; //@line 6903
   HEAP32[$43 >> 2] = $2; //@line 6904
   $44 = $ReallocAsyncCtx + 8 | 0; //@line 6905
   HEAP32[$44 >> 2] = $4; //@line 6906
   $45 = $ReallocAsyncCtx + 12 | 0; //@line 6907
   HEAP32[$45 >> 2] = $6; //@line 6908
   $46 = $ReallocAsyncCtx + 16 | 0; //@line 6909
   HEAP32[$46 >> 2] = $8; //@line 6910
   $47 = $ReallocAsyncCtx + 20 | 0; //@line 6911
   HEAP32[$47 >> 2] = $10; //@line 6912
   $48 = $ReallocAsyncCtx + 24 | 0; //@line 6913
   HEAP32[$48 >> 2] = $12; //@line 6914
   $49 = $ReallocAsyncCtx + 28 | 0; //@line 6915
   HEAP32[$49 >> 2] = $14; //@line 6916
   $50 = $ReallocAsyncCtx + 32 | 0; //@line 6917
   HEAP32[$50 >> 2] = $16; //@line 6918
   $51 = $ReallocAsyncCtx + 36 | 0; //@line 6919
   HEAP32[$51 >> 2] = $18; //@line 6920
   $52 = $ReallocAsyncCtx + 40 | 0; //@line 6921
   HEAP32[$52 >> 2] = $$reg2mem$0; //@line 6922
   $53 = $ReallocAsyncCtx + 44 | 0; //@line 6923
   HEAP32[$53 >> 2] = $37; //@line 6924
   $54 = $ReallocAsyncCtx + 48 | 0; //@line 6925
   HEAP32[$54 >> 2] = $20; //@line 6926
   $55 = $ReallocAsyncCtx + 52 | 0; //@line 6927
   HEAP32[$55 >> 2] = $38; //@line 6928
   $56 = $ReallocAsyncCtx + 56 | 0; //@line 6929
   $$expand_i1_val = $24 & 1; //@line 6930
   HEAP8[$56 >> 0] = $$expand_i1_val; //@line 6931
   $57 = $ReallocAsyncCtx + 60 | 0; //@line 6932
   HEAP32[$57 >> 2] = $26; //@line 6933
   $58 = $ReallocAsyncCtx + 64 | 0; //@line 6934
   HEAP32[$58 >> 2] = $28; //@line 6935
   $59 = $ReallocAsyncCtx + 68 | 0; //@line 6936
   HEAP32[$59 >> 2] = $30; //@line 6937
   $60 = $ReallocAsyncCtx + 72 | 0; //@line 6938
   HEAP32[$60 >> 2] = $32; //@line 6939
   $61 = $ReallocAsyncCtx + 76 | 0; //@line 6940
   HEAP32[$61 >> 2] = $34; //@line 6941
   $62 = $ReallocAsyncCtx + 80 | 0; //@line 6942
   HEAP32[$62 >> 2] = $36; //@line 6943
   sp = STACKTOP; //@line 6944
   return;
  }
  ___async_unwind = 0; //@line 6947
  HEAP32[$ReallocAsyncCtx >> 2] = 132; //@line 6948
  $43 = $ReallocAsyncCtx + 4 | 0; //@line 6949
  HEAP32[$43 >> 2] = $2; //@line 6950
  $44 = $ReallocAsyncCtx + 8 | 0; //@line 6951
  HEAP32[$44 >> 2] = $4; //@line 6952
  $45 = $ReallocAsyncCtx + 12 | 0; //@line 6953
  HEAP32[$45 >> 2] = $6; //@line 6954
  $46 = $ReallocAsyncCtx + 16 | 0; //@line 6955
  HEAP32[$46 >> 2] = $8; //@line 6956
  $47 = $ReallocAsyncCtx + 20 | 0; //@line 6957
  HEAP32[$47 >> 2] = $10; //@line 6958
  $48 = $ReallocAsyncCtx + 24 | 0; //@line 6959
  HEAP32[$48 >> 2] = $12; //@line 6960
  $49 = $ReallocAsyncCtx + 28 | 0; //@line 6961
  HEAP32[$49 >> 2] = $14; //@line 6962
  $50 = $ReallocAsyncCtx + 32 | 0; //@line 6963
  HEAP32[$50 >> 2] = $16; //@line 6964
  $51 = $ReallocAsyncCtx + 36 | 0; //@line 6965
  HEAP32[$51 >> 2] = $18; //@line 6966
  $52 = $ReallocAsyncCtx + 40 | 0; //@line 6967
  HEAP32[$52 >> 2] = $$reg2mem$0; //@line 6968
  $53 = $ReallocAsyncCtx + 44 | 0; //@line 6969
  HEAP32[$53 >> 2] = $37; //@line 6970
  $54 = $ReallocAsyncCtx + 48 | 0; //@line 6971
  HEAP32[$54 >> 2] = $20; //@line 6972
  $55 = $ReallocAsyncCtx + 52 | 0; //@line 6973
  HEAP32[$55 >> 2] = $38; //@line 6974
  $56 = $ReallocAsyncCtx + 56 | 0; //@line 6975
  $$expand_i1_val = $24 & 1; //@line 6976
  HEAP8[$56 >> 0] = $$expand_i1_val; //@line 6977
  $57 = $ReallocAsyncCtx + 60 | 0; //@line 6978
  HEAP32[$57 >> 2] = $26; //@line 6979
  $58 = $ReallocAsyncCtx + 64 | 0; //@line 6980
  HEAP32[$58 >> 2] = $28; //@line 6981
  $59 = $ReallocAsyncCtx + 68 | 0; //@line 6982
  HEAP32[$59 >> 2] = $30; //@line 6983
  $60 = $ReallocAsyncCtx + 72 | 0; //@line 6984
  HEAP32[$60 >> 2] = $32; //@line 6985
  $61 = $ReallocAsyncCtx + 76 | 0; //@line 6986
  HEAP32[$61 >> 2] = $34; //@line 6987
  $62 = $ReallocAsyncCtx + 80 | 0; //@line 6988
  HEAP32[$62 >> 2] = $36; //@line 6989
  sp = STACKTOP; //@line 6990
  return;
 } else if ((label | 0) == 7) {
  $66 = $$reg2mem$0 + 20 | 0; //@line 6994
  HEAP32[$66 >> 2] = (HEAP32[$66 >> 2] | 0) + $64; //@line 6997
  $69 = _equeue_tick() | 0; //@line 6998
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(76) | 0; //@line 6999
  _equeue_enqueue($28, $$reg2mem$0, $69) | 0; //@line 7000
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 133; //@line 7003
   $70 = $ReallocAsyncCtx4 + 4 | 0; //@line 7004
   HEAP32[$70 >> 2] = $2; //@line 7005
   $71 = $ReallocAsyncCtx4 + 8 | 0; //@line 7006
   HEAP32[$71 >> 2] = $4; //@line 7007
   $72 = $ReallocAsyncCtx4 + 12 | 0; //@line 7008
   HEAP32[$72 >> 2] = $6; //@line 7009
   $73 = $ReallocAsyncCtx4 + 16 | 0; //@line 7010
   HEAP32[$73 >> 2] = $8; //@line 7011
   $74 = $ReallocAsyncCtx4 + 20 | 0; //@line 7012
   HEAP32[$74 >> 2] = $10; //@line 7013
   $75 = $ReallocAsyncCtx4 + 24 | 0; //@line 7014
   HEAP32[$75 >> 2] = $12; //@line 7015
   $76 = $ReallocAsyncCtx4 + 28 | 0; //@line 7016
   HEAP32[$76 >> 2] = $14; //@line 7017
   $77 = $ReallocAsyncCtx4 + 32 | 0; //@line 7018
   HEAP32[$77 >> 2] = $16; //@line 7019
   $78 = $ReallocAsyncCtx4 + 36 | 0; //@line 7020
   HEAP32[$78 >> 2] = $18; //@line 7021
   $79 = $ReallocAsyncCtx4 + 40 | 0; //@line 7022
   HEAP32[$79 >> 2] = $20; //@line 7023
   $80 = $ReallocAsyncCtx4 + 44 | 0; //@line 7024
   HEAP32[$80 >> 2] = $38; //@line 7025
   $81 = $ReallocAsyncCtx4 + 48 | 0; //@line 7026
   $$expand_i1_val12 = $24 & 1; //@line 7027
   HEAP8[$81 >> 0] = $$expand_i1_val12; //@line 7028
   $82 = $ReallocAsyncCtx4 + 52 | 0; //@line 7029
   HEAP32[$82 >> 2] = $26; //@line 7030
   $83 = $ReallocAsyncCtx4 + 56 | 0; //@line 7031
   HEAP32[$83 >> 2] = $28; //@line 7032
   $84 = $ReallocAsyncCtx4 + 60 | 0; //@line 7033
   HEAP32[$84 >> 2] = $30; //@line 7034
   $85 = $ReallocAsyncCtx4 + 64 | 0; //@line 7035
   HEAP32[$85 >> 2] = $32; //@line 7036
   $86 = $ReallocAsyncCtx4 + 68 | 0; //@line 7037
   HEAP32[$86 >> 2] = $34; //@line 7038
   $87 = $ReallocAsyncCtx4 + 72 | 0; //@line 7039
   HEAP32[$87 >> 2] = $36; //@line 7040
   sp = STACKTOP; //@line 7041
   return;
  }
  ___async_unwind = 0; //@line 7044
  HEAP32[$ReallocAsyncCtx4 >> 2] = 133; //@line 7045
  $70 = $ReallocAsyncCtx4 + 4 | 0; //@line 7046
  HEAP32[$70 >> 2] = $2; //@line 7047
  $71 = $ReallocAsyncCtx4 + 8 | 0; //@line 7048
  HEAP32[$71 >> 2] = $4; //@line 7049
  $72 = $ReallocAsyncCtx4 + 12 | 0; //@line 7050
  HEAP32[$72 >> 2] = $6; //@line 7051
  $73 = $ReallocAsyncCtx4 + 16 | 0; //@line 7052
  HEAP32[$73 >> 2] = $8; //@line 7053
  $74 = $ReallocAsyncCtx4 + 20 | 0; //@line 7054
  HEAP32[$74 >> 2] = $10; //@line 7055
  $75 = $ReallocAsyncCtx4 + 24 | 0; //@line 7056
  HEAP32[$75 >> 2] = $12; //@line 7057
  $76 = $ReallocAsyncCtx4 + 28 | 0; //@line 7058
  HEAP32[$76 >> 2] = $14; //@line 7059
  $77 = $ReallocAsyncCtx4 + 32 | 0; //@line 7060
  HEAP32[$77 >> 2] = $16; //@line 7061
  $78 = $ReallocAsyncCtx4 + 36 | 0; //@line 7062
  HEAP32[$78 >> 2] = $18; //@line 7063
  $79 = $ReallocAsyncCtx4 + 40 | 0; //@line 7064
  HEAP32[$79 >> 2] = $20; //@line 7065
  $80 = $ReallocAsyncCtx4 + 44 | 0; //@line 7066
  HEAP32[$80 >> 2] = $38; //@line 7067
  $81 = $ReallocAsyncCtx4 + 48 | 0; //@line 7068
  $$expand_i1_val12 = $24 & 1; //@line 7069
  HEAP8[$81 >> 0] = $$expand_i1_val12; //@line 7070
  $82 = $ReallocAsyncCtx4 + 52 | 0; //@line 7071
  HEAP32[$82 >> 2] = $26; //@line 7072
  $83 = $ReallocAsyncCtx4 + 56 | 0; //@line 7073
  HEAP32[$83 >> 2] = $28; //@line 7074
  $84 = $ReallocAsyncCtx4 + 60 | 0; //@line 7075
  HEAP32[$84 >> 2] = $30; //@line 7076
  $85 = $ReallocAsyncCtx4 + 64 | 0; //@line 7077
  HEAP32[$85 >> 2] = $32; //@line 7078
  $86 = $ReallocAsyncCtx4 + 68 | 0; //@line 7079
  HEAP32[$86 >> 2] = $34; //@line 7080
  $87 = $ReallocAsyncCtx4 + 72 | 0; //@line 7081
  HEAP32[$87 >> 2] = $36; //@line 7082
  sp = STACKTOP; //@line 7083
  return;
 } else if ((label | 0) == 12) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(84) | 0; //@line 7088
  FUNCTION_TABLE_vi[$98 & 1023]($$reg2mem$0 + 36 | 0); //@line 7089
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 134; //@line 7092
   $101 = $ReallocAsyncCtx2 + 4 | 0; //@line 7093
   HEAP32[$101 >> 2] = $2; //@line 7094
   $102 = $ReallocAsyncCtx2 + 8 | 0; //@line 7095
   HEAP32[$102 >> 2] = $4; //@line 7096
   $103 = $ReallocAsyncCtx2 + 12 | 0; //@line 7097
   HEAP32[$103 >> 2] = $6; //@line 7098
   $104 = $ReallocAsyncCtx2 + 16 | 0; //@line 7099
   HEAP32[$104 >> 2] = $8; //@line 7100
   $105 = $ReallocAsyncCtx2 + 20 | 0; //@line 7101
   HEAP32[$105 >> 2] = $10; //@line 7102
   $106 = $ReallocAsyncCtx2 + 24 | 0; //@line 7103
   HEAP32[$106 >> 2] = $12; //@line 7104
   $107 = $ReallocAsyncCtx2 + 28 | 0; //@line 7105
   HEAP32[$107 >> 2] = $14; //@line 7106
   $108 = $ReallocAsyncCtx2 + 32 | 0; //@line 7107
   HEAP32[$108 >> 2] = $16; //@line 7108
   $109 = $ReallocAsyncCtx2 + 36 | 0; //@line 7109
   HEAP32[$109 >> 2] = $18; //@line 7110
   $110 = $ReallocAsyncCtx2 + 40 | 0; //@line 7111
   HEAP32[$110 >> 2] = $$reg2mem$0; //@line 7112
   $111 = $ReallocAsyncCtx2 + 44 | 0; //@line 7113
   HEAP32[$111 >> 2] = $37; //@line 7114
   $112 = $ReallocAsyncCtx2 + 48 | 0; //@line 7115
   HEAP32[$112 >> 2] = $20; //@line 7116
   $113 = $ReallocAsyncCtx2 + 52 | 0; //@line 7117
   HEAP32[$113 >> 2] = $38; //@line 7118
   $114 = $ReallocAsyncCtx2 + 56 | 0; //@line 7119
   $$expand_i1_val14 = $24 & 1; //@line 7120
   HEAP8[$114 >> 0] = $$expand_i1_val14; //@line 7121
   $115 = $ReallocAsyncCtx2 + 60 | 0; //@line 7122
   HEAP32[$115 >> 2] = $26; //@line 7123
   $116 = $ReallocAsyncCtx2 + 64 | 0; //@line 7124
   HEAP32[$116 >> 2] = $28; //@line 7125
   $117 = $ReallocAsyncCtx2 + 68 | 0; //@line 7126
   HEAP32[$117 >> 2] = $30; //@line 7127
   $118 = $ReallocAsyncCtx2 + 72 | 0; //@line 7128
   HEAP32[$118 >> 2] = $32; //@line 7129
   $119 = $ReallocAsyncCtx2 + 76 | 0; //@line 7130
   HEAP32[$119 >> 2] = $34; //@line 7131
   $120 = $ReallocAsyncCtx2 + 80 | 0; //@line 7132
   HEAP32[$120 >> 2] = $36; //@line 7133
   sp = STACKTOP; //@line 7134
   return;
  }
  ___async_unwind = 0; //@line 7137
  HEAP32[$ReallocAsyncCtx2 >> 2] = 134; //@line 7138
  $101 = $ReallocAsyncCtx2 + 4 | 0; //@line 7139
  HEAP32[$101 >> 2] = $2; //@line 7140
  $102 = $ReallocAsyncCtx2 + 8 | 0; //@line 7141
  HEAP32[$102 >> 2] = $4; //@line 7142
  $103 = $ReallocAsyncCtx2 + 12 | 0; //@line 7143
  HEAP32[$103 >> 2] = $6; //@line 7144
  $104 = $ReallocAsyncCtx2 + 16 | 0; //@line 7145
  HEAP32[$104 >> 2] = $8; //@line 7146
  $105 = $ReallocAsyncCtx2 + 20 | 0; //@line 7147
  HEAP32[$105 >> 2] = $10; //@line 7148
  $106 = $ReallocAsyncCtx2 + 24 | 0; //@line 7149
  HEAP32[$106 >> 2] = $12; //@line 7150
  $107 = $ReallocAsyncCtx2 + 28 | 0; //@line 7151
  HEAP32[$107 >> 2] = $14; //@line 7152
  $108 = $ReallocAsyncCtx2 + 32 | 0; //@line 7153
  HEAP32[$108 >> 2] = $16; //@line 7154
  $109 = $ReallocAsyncCtx2 + 36 | 0; //@line 7155
  HEAP32[$109 >> 2] = $18; //@line 7156
  $110 = $ReallocAsyncCtx2 + 40 | 0; //@line 7157
  HEAP32[$110 >> 2] = $$reg2mem$0; //@line 7158
  $111 = $ReallocAsyncCtx2 + 44 | 0; //@line 7159
  HEAP32[$111 >> 2] = $37; //@line 7160
  $112 = $ReallocAsyncCtx2 + 48 | 0; //@line 7161
  HEAP32[$112 >> 2] = $20; //@line 7162
  $113 = $ReallocAsyncCtx2 + 52 | 0; //@line 7163
  HEAP32[$113 >> 2] = $38; //@line 7164
  $114 = $ReallocAsyncCtx2 + 56 | 0; //@line 7165
  $$expand_i1_val14 = $24 & 1; //@line 7166
  HEAP8[$114 >> 0] = $$expand_i1_val14; //@line 7167
  $115 = $ReallocAsyncCtx2 + 60 | 0; //@line 7168
  HEAP32[$115 >> 2] = $26; //@line 7169
  $116 = $ReallocAsyncCtx2 + 64 | 0; //@line 7170
  HEAP32[$116 >> 2] = $28; //@line 7171
  $117 = $ReallocAsyncCtx2 + 68 | 0; //@line 7172
  HEAP32[$117 >> 2] = $30; //@line 7173
  $118 = $ReallocAsyncCtx2 + 72 | 0; //@line 7174
  HEAP32[$118 >> 2] = $32; //@line 7175
  $119 = $ReallocAsyncCtx2 + 76 | 0; //@line 7176
  HEAP32[$119 >> 2] = $34; //@line 7177
  $120 = $ReallocAsyncCtx2 + 80 | 0; //@line 7178
  HEAP32[$120 >> 2] = $36; //@line 7179
  sp = STACKTOP; //@line 7180
  return;
 } else if ((label | 0) == 24) {
  $136 = _equeue_tick() | 0; //@line 7184
  if ($24) {
   $137 = $26 - $136 | 0; //@line 7186
   if (($137 | 0) < 1) {
    $139 = $28 + 40 | 0; //@line 7189
    if (HEAP32[$139 >> 2] | 0) {
     _equeue_mutex_lock($4); //@line 7193
     $142 = HEAP32[$139 >> 2] | 0; //@line 7194
     if ($142 | 0) {
      $144 = HEAP32[$8 >> 2] | 0; //@line 7197
      if ($144 | 0) {
       $147 = HEAP32[$28 + 44 >> 2] | 0; //@line 7201
       $150 = (HEAP32[$144 + 20 >> 2] | 0) - $136 | 0; //@line 7204
       $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 7208
       FUNCTION_TABLE_vii[$142 & 31]($147, $150 & ~($150 >> 31)); //@line 7209
       if (___async) {
        HEAP32[$ReallocAsyncCtx3 >> 2] = 135; //@line 7212
        $154 = $ReallocAsyncCtx3 + 4 | 0; //@line 7213
        HEAP32[$154 >> 2] = $32; //@line 7214
        $155 = $ReallocAsyncCtx3 + 8 | 0; //@line 7215
        HEAP32[$155 >> 2] = $4; //@line 7216
        $156 = $ReallocAsyncCtx3 + 12 | 0; //@line 7217
        HEAP32[$156 >> 2] = $34; //@line 7218
        sp = STACKTOP; //@line 7219
        return;
       }
       ___async_unwind = 0; //@line 7222
       HEAP32[$ReallocAsyncCtx3 >> 2] = 135; //@line 7223
       $154 = $ReallocAsyncCtx3 + 4 | 0; //@line 7224
       HEAP32[$154 >> 2] = $32; //@line 7225
       $155 = $ReallocAsyncCtx3 + 8 | 0; //@line 7226
       HEAP32[$155 >> 2] = $4; //@line 7227
       $156 = $ReallocAsyncCtx3 + 12 | 0; //@line 7228
       HEAP32[$156 >> 2] = $34; //@line 7229
       sp = STACKTOP; //@line 7230
       return;
      }
     }
     HEAP8[$32 >> 0] = 1; //@line 7234
     _equeue_mutex_unlock($4); //@line 7235
    }
    HEAP8[$34 >> 0] = 0; //@line 7237
    return;
   } else {
    $$067 = $137; //@line 7240
   }
  } else {
   $$067 = -1; //@line 7243
  }
  _equeue_mutex_lock($4); //@line 7245
  $157 = HEAP32[$8 >> 2] | 0; //@line 7246
  if (!$157) {
   $$2 = $$067; //@line 7249
  } else {
   $161 = (HEAP32[$157 + 20 >> 2] | 0) - $136 | 0; //@line 7253
   $164 = $161 & ~($161 >> 31); //@line 7256
   $$2 = $164 >>> 0 < $$067 >>> 0 ? $164 : $$067; //@line 7259
  }
  _equeue_mutex_unlock($4); //@line 7261
  _equeue_sema_wait($36, $$2) | 0; //@line 7262
  do {
   if (HEAP8[$34 >> 0] | 0) {
    _equeue_mutex_lock($4); //@line 7267
    if (!(HEAP8[$34 >> 0] | 0)) {
     _equeue_mutex_unlock($4); //@line 7271
     break;
    }
    HEAP8[$34 >> 0] = 0; //@line 7274
    _equeue_mutex_unlock($4); //@line 7275
    return;
   }
  } while (0);
  $170 = _equeue_tick() | 0; //@line 7279
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(76) | 0; //@line 7280
  _wait_ms(20); //@line 7281
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 136; //@line 7284
   $171 = $ReallocAsyncCtx5 + 4 | 0; //@line 7285
   HEAP32[$171 >> 2] = $2; //@line 7286
   $172 = $ReallocAsyncCtx5 + 8 | 0; //@line 7287
   HEAP32[$172 >> 2] = $4; //@line 7288
   $173 = $ReallocAsyncCtx5 + 12 | 0; //@line 7289
   HEAP32[$173 >> 2] = $6; //@line 7290
   $174 = $ReallocAsyncCtx5 + 16 | 0; //@line 7291
   HEAP32[$174 >> 2] = $8; //@line 7292
   $175 = $ReallocAsyncCtx5 + 20 | 0; //@line 7293
   HEAP32[$175 >> 2] = $10; //@line 7294
   $176 = $ReallocAsyncCtx5 + 24 | 0; //@line 7295
   HEAP32[$176 >> 2] = $12; //@line 7296
   $177 = $ReallocAsyncCtx5 + 28 | 0; //@line 7297
   HEAP32[$177 >> 2] = $14; //@line 7298
   $178 = $ReallocAsyncCtx5 + 32 | 0; //@line 7299
   HEAP32[$178 >> 2] = $170; //@line 7300
   $179 = $ReallocAsyncCtx5 + 36 | 0; //@line 7301
   HEAP32[$179 >> 2] = $16; //@line 7302
   $180 = $ReallocAsyncCtx5 + 40 | 0; //@line 7303
   HEAP32[$180 >> 2] = $18; //@line 7304
   $181 = $ReallocAsyncCtx5 + 44 | 0; //@line 7305
   HEAP32[$181 >> 2] = $20; //@line 7306
   $182 = $ReallocAsyncCtx5 + 48 | 0; //@line 7307
   $$expand_i1_val16 = $24 & 1; //@line 7308
   HEAP8[$182 >> 0] = $$expand_i1_val16; //@line 7309
   $183 = $ReallocAsyncCtx5 + 52 | 0; //@line 7310
   HEAP32[$183 >> 2] = $26; //@line 7311
   $184 = $ReallocAsyncCtx5 + 56 | 0; //@line 7312
   HEAP32[$184 >> 2] = $28; //@line 7313
   $185 = $ReallocAsyncCtx5 + 60 | 0; //@line 7314
   HEAP32[$185 >> 2] = $30; //@line 7315
   $186 = $ReallocAsyncCtx5 + 64 | 0; //@line 7316
   HEAP32[$186 >> 2] = $32; //@line 7317
   $187 = $ReallocAsyncCtx5 + 68 | 0; //@line 7318
   HEAP32[$187 >> 2] = $34; //@line 7319
   $188 = $ReallocAsyncCtx5 + 72 | 0; //@line 7320
   HEAP32[$188 >> 2] = $36; //@line 7321
   sp = STACKTOP; //@line 7322
   return;
  }
  ___async_unwind = 0; //@line 7325
  HEAP32[$ReallocAsyncCtx5 >> 2] = 136; //@line 7326
  $171 = $ReallocAsyncCtx5 + 4 | 0; //@line 7327
  HEAP32[$171 >> 2] = $2; //@line 7328
  $172 = $ReallocAsyncCtx5 + 8 | 0; //@line 7329
  HEAP32[$172 >> 2] = $4; //@line 7330
  $173 = $ReallocAsyncCtx5 + 12 | 0; //@line 7331
  HEAP32[$173 >> 2] = $6; //@line 7332
  $174 = $ReallocAsyncCtx5 + 16 | 0; //@line 7333
  HEAP32[$174 >> 2] = $8; //@line 7334
  $175 = $ReallocAsyncCtx5 + 20 | 0; //@line 7335
  HEAP32[$175 >> 2] = $10; //@line 7336
  $176 = $ReallocAsyncCtx5 + 24 | 0; //@line 7337
  HEAP32[$176 >> 2] = $12; //@line 7338
  $177 = $ReallocAsyncCtx5 + 28 | 0; //@line 7339
  HEAP32[$177 >> 2] = $14; //@line 7340
  $178 = $ReallocAsyncCtx5 + 32 | 0; //@line 7341
  HEAP32[$178 >> 2] = $170; //@line 7342
  $179 = $ReallocAsyncCtx5 + 36 | 0; //@line 7343
  HEAP32[$179 >> 2] = $16; //@line 7344
  $180 = $ReallocAsyncCtx5 + 40 | 0; //@line 7345
  HEAP32[$180 >> 2] = $18; //@line 7346
  $181 = $ReallocAsyncCtx5 + 44 | 0; //@line 7347
  HEAP32[$181 >> 2] = $20; //@line 7348
  $182 = $ReallocAsyncCtx5 + 48 | 0; //@line 7349
  $$expand_i1_val16 = $24 & 1; //@line 7350
  HEAP8[$182 >> 0] = $$expand_i1_val16; //@line 7351
  $183 = $ReallocAsyncCtx5 + 52 | 0; //@line 7352
  HEAP32[$183 >> 2] = $26; //@line 7353
  $184 = $ReallocAsyncCtx5 + 56 | 0; //@line 7354
  HEAP32[$184 >> 2] = $28; //@line 7355
  $185 = $ReallocAsyncCtx5 + 60 | 0; //@line 7356
  HEAP32[$185 >> 2] = $30; //@line 7357
  $186 = $ReallocAsyncCtx5 + 64 | 0; //@line 7358
  HEAP32[$186 >> 2] = $32; //@line 7359
  $187 = $ReallocAsyncCtx5 + 68 | 0; //@line 7360
  HEAP32[$187 >> 2] = $34; //@line 7361
  $188 = $ReallocAsyncCtx5 + 72 | 0; //@line 7362
  HEAP32[$188 >> 2] = $36; //@line 7363
  sp = STACKTOP; //@line 7364
  return;
 }
}
function _printf_core($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$$5 = 0, $$0 = 0, $$0228 = 0, $$0229316 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240$lcssa = 0, $$0240$lcssa356 = 0, $$0240315 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0, $$0249303 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0259 = 0, $$0262$lcssa = 0, $$0262309 = 0, $$0269 = 0, $$1 = 0, $$1230327 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241326 = 0, $$1244314 = 0, $$1248 = 0, $$1255 = 0, $$1260 = 0, $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242$lcssa = 0, $$2242302 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2261 = 0, $$2271 = 0, $$3265 = 0, $$3272 = 0, $$3300 = 0, $$4258354 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa291 = 0, $$lcssa292 = 0, $$pre342 = 0, $$pre345 = 0, $$pre348 = 0, $$sink = 0, $10 = 0, $105 = 0, $106 = 0, $109 = 0, $11 = 0, $112 = 0, $115 = 0, $12 = 0, $125 = 0, $129 = 0, $13 = 0, $14 = 0, $140 = 0, $144 = 0, $151 = 0, $152 = 0, $154 = 0, $156 = 0, $158 = 0, $167 = 0, $168 = 0, $173 = 0, $176 = 0, $181 = 0, $182 = 0, $187 = 0, $189 = 0, $196 = 0, $197 = 0, $20 = 0, $208 = 0, $21 = 0, $220 = 0, $227 = 0, $229 = 0, $23 = 0, $232 = 0, $234 = 0, $24 = 0, $242 = 0, $244 = 0, $247 = 0, $248 = 0, $25 = 0, $252 = 0, $256 = 0, $258 = 0, $261 = 0, $263 = 0, $264 = 0, $265 = 0, $27 = 0, $275 = 0, $276 = 0, $281 = 0, $283 = 0, $284 = 0, $290 = 0, $30 = 0, $302 = 0, $305 = 0, $306 = 0, $318 = 0, $320 = 0, $325 = 0, $329 = 0, $331 = 0, $343 = 0, $345 = 0, $352 = 0, $356 = 0, $36 = 0, $363 = 0, $364 = 0, $365 = 0, $43 = 0, $5 = 0, $51 = 0, $52 = 0, $54 = 0, $6 = 0, $60 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $7 = 0, $79 = 0, $8 = 0, $83 = 0, $9 = 0, $or$cond = 0, $or$cond278 = 0, $storemerge274 = 0, label = 0, sp = 0, $158$looptemp = 0;
 sp = STACKTOP; //@line 12343
 STACKTOP = STACKTOP + 64 | 0; //@line 12344
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 12344
 $5 = sp + 16 | 0; //@line 12345
 $6 = sp; //@line 12346
 $7 = sp + 24 | 0; //@line 12347
 $8 = sp + 8 | 0; //@line 12348
 $9 = sp + 20 | 0; //@line 12349
 HEAP32[$5 >> 2] = $1; //@line 12350
 $10 = ($0 | 0) != 0; //@line 12351
 $11 = $7 + 40 | 0; //@line 12352
 $12 = $11; //@line 12353
 $13 = $7 + 39 | 0; //@line 12354
 $14 = $8 + 4 | 0; //@line 12355
 $$0243 = 0; //@line 12356
 $$0247 = 0; //@line 12356
 $$0269 = 0; //@line 12356
 L1 : while (1) {
  do {
   if (($$0247 | 0) > -1) {
    if (($$0243 | 0) > (2147483647 - $$0247 | 0)) {
     HEAP32[(___errno_location() | 0) >> 2] = 75; //@line 12365
     $$1248 = -1; //@line 12366
     break;
    } else {
     $$1248 = $$0243 + $$0247 | 0; //@line 12370
     break;
    }
   } else {
    $$1248 = $$0247; //@line 12374
   }
  } while (0);
  $20 = HEAP32[$5 >> 2] | 0; //@line 12377
  $21 = HEAP8[$20 >> 0] | 0; //@line 12378
  if (!($21 << 24 >> 24)) {
   label = 88; //@line 12381
   break;
  } else {
   $23 = $21; //@line 12384
   $25 = $20; //@line 12384
  }
  L9 : while (1) {
   switch ($23 << 24 >> 24) {
   case 37:
    {
     $$0249303 = $25; //@line 12389
     $27 = $25; //@line 12389
     label = 9; //@line 12390
     break L9;
     break;
    }
   case 0:
    {
     $$0249$lcssa = $25; //@line 12395
     break L9;
     break;
    }
   default:
    {}
   }
   $24 = $25 + 1 | 0; //@line 12402
   HEAP32[$5 >> 2] = $24; //@line 12403
   $23 = HEAP8[$24 >> 0] | 0; //@line 12405
   $25 = $24; //@line 12405
  }
  L12 : do {
   if ((label | 0) == 9) {
    while (1) {
     label = 0; //@line 12410
     if ((HEAP8[$27 + 1 >> 0] | 0) != 37) {
      $$0249$lcssa = $$0249303; //@line 12415
      break L12;
     }
     $30 = $$0249303 + 1 | 0; //@line 12418
     $27 = $27 + 2 | 0; //@line 12419
     HEAP32[$5 >> 2] = $27; //@line 12420
     if ((HEAP8[$27 >> 0] | 0) != 37) {
      $$0249$lcssa = $30; //@line 12427
      break;
     } else {
      $$0249303 = $30; //@line 12424
      label = 9; //@line 12425
     }
    }
   }
  } while (0);
  $36 = $$0249$lcssa - $20 | 0; //@line 12435
  if ($10) {
   _out_670($0, $20, $36); //@line 12437
  }
  if ($36 | 0) {
   $$0243 = $36; //@line 12441
   $$0247 = $$1248; //@line 12441
   continue;
  }
  $43 = (_isdigit(HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] | 0) | 0) == 0; //@line 12449
  $$pre342 = HEAP32[$5 >> 2] | 0; //@line 12450
  if ($43) {
   $$0253 = -1; //@line 12452
   $$1270 = $$0269; //@line 12452
   $$sink = 1; //@line 12452
  } else {
   if ((HEAP8[$$pre342 + 2 >> 0] | 0) == 36) {
    $$0253 = (HEAP8[$$pre342 + 1 >> 0] | 0) + -48 | 0; //@line 12462
    $$1270 = 1; //@line 12462
    $$sink = 3; //@line 12462
   } else {
    $$0253 = -1; //@line 12464
    $$1270 = $$0269; //@line 12464
    $$sink = 1; //@line 12464
   }
  }
  $51 = $$pre342 + $$sink | 0; //@line 12467
  HEAP32[$5 >> 2] = $51; //@line 12468
  $52 = HEAP8[$51 >> 0] | 0; //@line 12469
  $54 = ($52 << 24 >> 24) + -32 | 0; //@line 12471
  if ($54 >>> 0 > 31 | (1 << $54 & 75913 | 0) == 0) {
   $$0262$lcssa = 0; //@line 12478
   $$lcssa291 = $52; //@line 12478
   $$lcssa292 = $51; //@line 12478
  } else {
   $$0262309 = 0; //@line 12480
   $60 = $52; //@line 12480
   $65 = $51; //@line 12480
   while (1) {
    $63 = 1 << ($60 << 24 >> 24) + -32 | $$0262309; //@line 12485
    $64 = $65 + 1 | 0; //@line 12486
    HEAP32[$5 >> 2] = $64; //@line 12487
    $66 = HEAP8[$64 >> 0] | 0; //@line 12488
    $68 = ($66 << 24 >> 24) + -32 | 0; //@line 12490
    if ($68 >>> 0 > 31 | (1 << $68 & 75913 | 0) == 0) {
     $$0262$lcssa = $63; //@line 12497
     $$lcssa291 = $66; //@line 12497
     $$lcssa292 = $64; //@line 12497
     break;
    } else {
     $$0262309 = $63; //@line 12500
     $60 = $66; //@line 12500
     $65 = $64; //@line 12500
    }
   }
  }
  if ($$lcssa291 << 24 >> 24 == 42) {
   if (!(_isdigit(HEAP8[$$lcssa292 + 1 >> 0] | 0) | 0)) {
    label = 23; //@line 12512
   } else {
    $79 = HEAP32[$5 >> 2] | 0; //@line 12514
    if ((HEAP8[$79 + 2 >> 0] | 0) == 36) {
     $83 = $79 + 1 | 0; //@line 12519
     HEAP32[$4 + ((HEAP8[$83 >> 0] | 0) + -48 << 2) >> 2] = 10; //@line 12524
     $$0259 = HEAP32[$3 + ((HEAP8[$83 >> 0] | 0) + -48 << 3) >> 2] | 0; //@line 12536
     $$2271 = 1; //@line 12536
     $storemerge274 = $79 + 3 | 0; //@line 12536
    } else {
     label = 23; //@line 12538
    }
   }
   if ((label | 0) == 23) {
    label = 0; //@line 12542
    if ($$1270 | 0) {
     $$0 = -1; //@line 12545
     break;
    }
    if ($10) {
     $105 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 12560
     $106 = HEAP32[$105 >> 2] | 0; //@line 12561
     HEAP32[$2 >> 2] = $105 + 4; //@line 12563
     $363 = $106; //@line 12564
    } else {
     $363 = 0; //@line 12566
    }
    $$0259 = $363; //@line 12570
    $$2271 = 0; //@line 12570
    $storemerge274 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 12570
   }
   HEAP32[$5 >> 2] = $storemerge274; //@line 12572
   $109 = ($$0259 | 0) < 0; //@line 12573
   $$1260 = $109 ? 0 - $$0259 | 0 : $$0259; //@line 12578
   $$1263 = $109 ? $$0262$lcssa | 8192 : $$0262$lcssa; //@line 12578
   $$3272 = $$2271; //@line 12578
   $115 = $storemerge274; //@line 12578
  } else {
   $112 = _getint_671($5) | 0; //@line 12580
   if (($112 | 0) < 0) {
    $$0 = -1; //@line 12583
    break;
   }
   $$1260 = $112; //@line 12587
   $$1263 = $$0262$lcssa; //@line 12587
   $$3272 = $$1270; //@line 12587
   $115 = HEAP32[$5 >> 2] | 0; //@line 12587
  }
  do {
   if ((HEAP8[$115 >> 0] | 0) == 46) {
    if ((HEAP8[$115 + 1 >> 0] | 0) != 42) {
     HEAP32[$5 >> 2] = $115 + 1; //@line 12598
     $156 = _getint_671($5) | 0; //@line 12599
     $$0254 = $156; //@line 12601
     $$pre345 = HEAP32[$5 >> 2] | 0; //@line 12601
     break;
    }
    if (_isdigit(HEAP8[$115 + 2 >> 0] | 0) | 0) {
     $125 = HEAP32[$5 >> 2] | 0; //@line 12610
     if ((HEAP8[$125 + 3 >> 0] | 0) == 36) {
      $129 = $125 + 2 | 0; //@line 12615
      HEAP32[$4 + ((HEAP8[$129 >> 0] | 0) + -48 << 2) >> 2] = 10; //@line 12620
      $140 = HEAP32[$3 + ((HEAP8[$129 >> 0] | 0) + -48 << 3) >> 2] | 0; //@line 12627
      $144 = $125 + 4 | 0; //@line 12631
      HEAP32[$5 >> 2] = $144; //@line 12632
      $$0254 = $140; //@line 12633
      $$pre345 = $144; //@line 12633
      break;
     }
    }
    if ($$3272 | 0) {
     $$0 = -1; //@line 12639
     break L1;
    }
    if ($10) {
     $151 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 12654
     $152 = HEAP32[$151 >> 2] | 0; //@line 12655
     HEAP32[$2 >> 2] = $151 + 4; //@line 12657
     $364 = $152; //@line 12658
    } else {
     $364 = 0; //@line 12660
    }
    $154 = (HEAP32[$5 >> 2] | 0) + 2 | 0; //@line 12663
    HEAP32[$5 >> 2] = $154; //@line 12664
    $$0254 = $364; //@line 12665
    $$pre345 = $154; //@line 12665
   } else {
    $$0254 = -1; //@line 12667
    $$pre345 = $115; //@line 12667
   }
  } while (0);
  $$0252 = 0; //@line 12670
  $158 = $$pre345; //@line 12670
  while (1) {
   if (((HEAP8[$158 >> 0] | 0) + -65 | 0) >>> 0 > 57) {
    $$0 = -1; //@line 12677
    break L1;
   }
   $158$looptemp = $158;
   $158 = $158 + 1 | 0; //@line 12680
   HEAP32[$5 >> 2] = $158; //@line 12681
   $167 = HEAP8[(HEAP8[$158$looptemp >> 0] | 0) + -65 + (16560 + ($$0252 * 58 | 0)) >> 0] | 0; //@line 12686
   $168 = $167 & 255; //@line 12687
   if (($168 + -1 | 0) >>> 0 >= 8) {
    break;
   } else {
    $$0252 = $168; //@line 12691
   }
  }
  if (!($167 << 24 >> 24)) {
   $$0 = -1; //@line 12698
   break;
  }
  $173 = ($$0253 | 0) > -1; //@line 12702
  do {
   if ($167 << 24 >> 24 == 19) {
    if ($173) {
     $$0 = -1; //@line 12706
     break L1;
    } else {
     label = 50; //@line 12709
    }
   } else {
    if ($173) {
     HEAP32[$4 + ($$0253 << 2) >> 2] = $168; //@line 12714
     $176 = $3 + ($$0253 << 3) | 0; //@line 12716
     $181 = HEAP32[$176 + 4 >> 2] | 0; //@line 12721
     $182 = $6; //@line 12722
     HEAP32[$182 >> 2] = HEAP32[$176 >> 2]; //@line 12724
     HEAP32[$182 + 4 >> 2] = $181; //@line 12727
     label = 50; //@line 12728
     break;
    }
    if (!$10) {
     $$0 = 0; //@line 12732
     break L1;
    }
    _pop_arg_673($6, $168, $2); //@line 12735
    $187 = HEAP32[$5 >> 2] | 0; //@line 12737
   }
  } while (0);
  if ((label | 0) == 50) {
   label = 0; //@line 12741
   if ($10) {
    $187 = $158; //@line 12743
   } else {
    $$0243 = 0; //@line 12745
    $$0247 = $$1248; //@line 12745
    $$0269 = $$3272; //@line 12745
    continue;
   }
  }
  $189 = HEAP8[$187 + -1 >> 0] | 0; //@line 12751
  $$0235 = ($$0252 | 0) != 0 & ($189 & 15 | 0) == 3 ? $189 & -33 : $189; //@line 12757
  $196 = $$1263 & -65537; //@line 12760
  $$1263$ = ($$1263 & 8192 | 0) == 0 ? $$1263 : $196; //@line 12761
  L73 : do {
   switch ($$0235 | 0) {
   case 110:
    {
     switch (($$0252 & 255) << 24 >> 24) {
     case 0:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 12769
       $$0243 = 0; //@line 12770
       $$0247 = $$1248; //@line 12770
       $$0269 = $$3272; //@line 12770
       continue L1;
       break;
      }
     case 1:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 12776
       $$0243 = 0; //@line 12777
       $$0247 = $$1248; //@line 12777
       $$0269 = $$3272; //@line 12777
       continue L1;
       break;
      }
     case 2:
      {
       $208 = HEAP32[$6 >> 2] | 0; //@line 12785
       HEAP32[$208 >> 2] = $$1248; //@line 12787
       HEAP32[$208 + 4 >> 2] = (($$1248 | 0) < 0) << 31 >> 31; //@line 12790
       $$0243 = 0; //@line 12791
       $$0247 = $$1248; //@line 12791
       $$0269 = $$3272; //@line 12791
       continue L1;
       break;
      }
     case 3:
      {
       HEAP16[HEAP32[$6 >> 2] >> 1] = $$1248; //@line 12798
       $$0243 = 0; //@line 12799
       $$0247 = $$1248; //@line 12799
       $$0269 = $$3272; //@line 12799
       continue L1;
       break;
      }
     case 4:
      {
       HEAP8[HEAP32[$6 >> 2] >> 0] = $$1248; //@line 12806
       $$0243 = 0; //@line 12807
       $$0247 = $$1248; //@line 12807
       $$0269 = $$3272; //@line 12807
       continue L1;
       break;
      }
     case 6:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 12813
       $$0243 = 0; //@line 12814
       $$0247 = $$1248; //@line 12814
       $$0269 = $$3272; //@line 12814
       continue L1;
       break;
      }
     case 7:
      {
       $220 = HEAP32[$6 >> 2] | 0; //@line 12822
       HEAP32[$220 >> 2] = $$1248; //@line 12824
       HEAP32[$220 + 4 >> 2] = (($$1248 | 0) < 0) << 31 >> 31; //@line 12827
       $$0243 = 0; //@line 12828
       $$0247 = $$1248; //@line 12828
       $$0269 = $$3272; //@line 12828
       continue L1;
       break;
      }
     default:
      {
       $$0243 = 0; //@line 12833
       $$0247 = $$1248; //@line 12833
       $$0269 = $$3272; //@line 12833
       continue L1;
      }
     }
     break;
    }
   case 112:
    {
     $$1236 = 120; //@line 12843
     $$1255 = $$0254 >>> 0 > 8 ? $$0254 : 8; //@line 12843
     $$3265 = $$1263$ | 8; //@line 12843
     label = 62; //@line 12844
     break;
    }
   case 88:
   case 120:
    {
     $$1236 = $$0235; //@line 12848
     $$1255 = $$0254; //@line 12848
     $$3265 = $$1263$; //@line 12848
     label = 62; //@line 12849
     break;
    }
   case 111:
    {
     $242 = $6; //@line 12853
     $244 = HEAP32[$242 >> 2] | 0; //@line 12855
     $247 = HEAP32[$242 + 4 >> 2] | 0; //@line 12858
     $248 = _fmt_o($244, $247, $11) | 0; //@line 12859
     $252 = $12 - $248 | 0; //@line 12863
     $$0228 = $248; //@line 12868
     $$1233 = 0; //@line 12868
     $$1238 = 17024; //@line 12868
     $$2256 = ($$1263$ & 8 | 0) == 0 | ($$0254 | 0) > ($252 | 0) ? $$0254 : $252 + 1 | 0; //@line 12868
     $$4266 = $$1263$; //@line 12868
     $281 = $244; //@line 12868
     $283 = $247; //@line 12868
     label = 68; //@line 12869
     break;
    }
   case 105:
   case 100:
    {
     $256 = $6; //@line 12873
     $258 = HEAP32[$256 >> 2] | 0; //@line 12875
     $261 = HEAP32[$256 + 4 >> 2] | 0; //@line 12878
     if (($261 | 0) < 0) {
      $263 = _i64Subtract(0, 0, $258 | 0, $261 | 0) | 0; //@line 12881
      $264 = tempRet0; //@line 12882
      $265 = $6; //@line 12883
      HEAP32[$265 >> 2] = $263; //@line 12885
      HEAP32[$265 + 4 >> 2] = $264; //@line 12888
      $$0232 = 1; //@line 12889
      $$0237 = 17024; //@line 12889
      $275 = $263; //@line 12889
      $276 = $264; //@line 12889
      label = 67; //@line 12890
      break L73;
     } else {
      $$0232 = ($$1263$ & 2049 | 0) != 0 & 1; //@line 12902
      $$0237 = ($$1263$ & 2048 | 0) == 0 ? ($$1263$ & 1 | 0) == 0 ? 17024 : 17026 : 17025; //@line 12902
      $275 = $258; //@line 12902
      $276 = $261; //@line 12902
      label = 67; //@line 12903
      break L73;
     }
     break;
    }
   case 117:
    {
     $197 = $6; //@line 12909
     $$0232 = 0; //@line 12915
     $$0237 = 17024; //@line 12915
     $275 = HEAP32[$197 >> 2] | 0; //@line 12915
     $276 = HEAP32[$197 + 4 >> 2] | 0; //@line 12915
     label = 67; //@line 12916
     break;
    }
   case 99:
    {
     HEAP8[$13 >> 0] = HEAP32[$6 >> 2]; //@line 12927
     $$2 = $13; //@line 12928
     $$2234 = 0; //@line 12928
     $$2239 = 17024; //@line 12928
     $$2251 = $11; //@line 12928
     $$5 = 1; //@line 12928
     $$6268 = $196; //@line 12928
     break;
    }
   case 109:
    {
     $$1 = _strerror(HEAP32[(___errno_location() | 0) >> 2] | 0) | 0; //@line 12935
     label = 72; //@line 12936
     break;
    }
   case 115:
    {
     $302 = HEAP32[$6 >> 2] | 0; //@line 12940
     $$1 = $302 | 0 ? $302 : 17034; //@line 12943
     label = 72; //@line 12944
     break;
    }
   case 67:
    {
     HEAP32[$8 >> 2] = HEAP32[$6 >> 2]; //@line 12954
     HEAP32[$14 >> 2] = 0; //@line 12955
     HEAP32[$6 >> 2] = $8; //@line 12956
     $$4258354 = -1; //@line 12957
     $365 = $8; //@line 12957
     label = 76; //@line 12958
     break;
    }
   case 83:
    {
     $$pre348 = HEAP32[$6 >> 2] | 0; //@line 12962
     if (!$$0254) {
      _pad_676($0, 32, $$1260, 0, $$1263$); //@line 12965
      $$0240$lcssa356 = 0; //@line 12966
      label = 85; //@line 12967
     } else {
      $$4258354 = $$0254; //@line 12969
      $365 = $$pre348; //@line 12969
      label = 76; //@line 12970
     }
     break;
    }
   case 65:
   case 71:
   case 70:
   case 69:
   case 97:
   case 103:
   case 102:
   case 101:
    {
     $$0243 = _fmt_fp($0, +HEAPF64[$6 >> 3], $$1260, $$0254, $$1263$, $$0235) | 0; //@line 12977
     $$0247 = $$1248; //@line 12977
     $$0269 = $$3272; //@line 12977
     continue L1;
     break;
    }
   default:
    {
     $$2 = $20; //@line 12982
     $$2234 = 0; //@line 12982
     $$2239 = 17024; //@line 12982
     $$2251 = $11; //@line 12982
     $$5 = $$0254; //@line 12982
     $$6268 = $$1263$; //@line 12982
    }
   }
  } while (0);
  L97 : do {
   if ((label | 0) == 62) {
    label = 0; //@line 12988
    $227 = $6; //@line 12989
    $229 = HEAP32[$227 >> 2] | 0; //@line 12991
    $232 = HEAP32[$227 + 4 >> 2] | 0; //@line 12994
    $234 = _fmt_x($229, $232, $11, $$1236 & 32) | 0; //@line 12996
    $or$cond278 = ($$3265 & 8 | 0) == 0 | ($229 | 0) == 0 & ($232 | 0) == 0; //@line 13002
    $$0228 = $234; //@line 13007
    $$1233 = $or$cond278 ? 0 : 2; //@line 13007
    $$1238 = $or$cond278 ? 17024 : 17024 + ($$1236 >> 4) | 0; //@line 13007
    $$2256 = $$1255; //@line 13007
    $$4266 = $$3265; //@line 13007
    $281 = $229; //@line 13007
    $283 = $232; //@line 13007
    label = 68; //@line 13008
   } else if ((label | 0) == 67) {
    label = 0; //@line 13011
    $$0228 = _fmt_u($275, $276, $11) | 0; //@line 13013
    $$1233 = $$0232; //@line 13013
    $$1238 = $$0237; //@line 13013
    $$2256 = $$0254; //@line 13013
    $$4266 = $$1263$; //@line 13013
    $281 = $275; //@line 13013
    $283 = $276; //@line 13013
    label = 68; //@line 13014
   } else if ((label | 0) == 72) {
    label = 0; //@line 13017
    $305 = _memchr($$1, 0, $$0254) | 0; //@line 13018
    $306 = ($305 | 0) == 0; //@line 13019
    $$2 = $$1; //@line 13026
    $$2234 = 0; //@line 13026
    $$2239 = 17024; //@line 13026
    $$2251 = $306 ? $$1 + $$0254 | 0 : $305; //@line 13026
    $$5 = $306 ? $$0254 : $305 - $$1 | 0; //@line 13026
    $$6268 = $196; //@line 13026
   } else if ((label | 0) == 76) {
    label = 0; //@line 13029
    $$0229316 = $365; //@line 13030
    $$0240315 = 0; //@line 13030
    $$1244314 = 0; //@line 13030
    while (1) {
     $318 = HEAP32[$$0229316 >> 2] | 0; //@line 13032
     if (!$318) {
      $$0240$lcssa = $$0240315; //@line 13035
      $$2245 = $$1244314; //@line 13035
      break;
     }
     $320 = _wctomb($9, $318) | 0; //@line 13038
     if (($320 | 0) < 0 | $320 >>> 0 > ($$4258354 - $$0240315 | 0) >>> 0) {
      $$0240$lcssa = $$0240315; //@line 13044
      $$2245 = $320; //@line 13044
      break;
     }
     $325 = $320 + $$0240315 | 0; //@line 13048
     if ($$4258354 >>> 0 > $325 >>> 0) {
      $$0229316 = $$0229316 + 4 | 0; //@line 13051
      $$0240315 = $325; //@line 13051
      $$1244314 = $320; //@line 13051
     } else {
      $$0240$lcssa = $325; //@line 13053
      $$2245 = $320; //@line 13053
      break;
     }
    }
    if (($$2245 | 0) < 0) {
     $$0 = -1; //@line 13059
     break L1;
    }
    _pad_676($0, 32, $$1260, $$0240$lcssa, $$1263$); //@line 13062
    if (!$$0240$lcssa) {
     $$0240$lcssa356 = 0; //@line 13065
     label = 85; //@line 13066
    } else {
     $$1230327 = $365; //@line 13068
     $$1241326 = 0; //@line 13068
     while (1) {
      $329 = HEAP32[$$1230327 >> 2] | 0; //@line 13070
      if (!$329) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 13073
       label = 85; //@line 13074
       break L97;
      }
      $331 = _wctomb($9, $329) | 0; //@line 13077
      $$1241326 = $331 + $$1241326 | 0; //@line 13078
      if (($$1241326 | 0) > ($$0240$lcssa | 0)) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 13081
       label = 85; //@line 13082
       break L97;
      }
      _out_670($0, $9, $331); //@line 13086
      if ($$1241326 >>> 0 >= $$0240$lcssa >>> 0) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 13091
       label = 85; //@line 13092
       break;
      } else {
       $$1230327 = $$1230327 + 4 | 0; //@line 13089
      }
     }
    }
   }
  } while (0);
  if ((label | 0) == 68) {
   label = 0; //@line 13100
   $284 = ($281 | 0) != 0 | ($283 | 0) != 0; //@line 13106
   $or$cond = ($$2256 | 0) != 0 | $284; //@line 13108
   $290 = $12 - $$0228 + (($284 ^ 1) & 1) | 0; //@line 13113
   $$2 = $or$cond ? $$0228 : $11; //@line 13118
   $$2234 = $$1233; //@line 13118
   $$2239 = $$1238; //@line 13118
   $$2251 = $11; //@line 13118
   $$5 = $or$cond ? ($$2256 | 0) > ($290 | 0) ? $$2256 : $290 : $$2256; //@line 13118
   $$6268 = ($$2256 | 0) > -1 ? $$4266 & -65537 : $$4266; //@line 13118
  } else if ((label | 0) == 85) {
   label = 0; //@line 13121
   _pad_676($0, 32, $$1260, $$0240$lcssa356, $$1263$ ^ 8192); //@line 13123
   $$0243 = ($$1260 | 0) > ($$0240$lcssa356 | 0) ? $$1260 : $$0240$lcssa356; //@line 13126
   $$0247 = $$1248; //@line 13126
   $$0269 = $$3272; //@line 13126
   continue;
  }
  $343 = $$2251 - $$2 | 0; //@line 13131
  $$$5 = ($$5 | 0) < ($343 | 0) ? $343 : $$5; //@line 13133
  $345 = $$$5 + $$2234 | 0; //@line 13134
  $$2261 = ($$1260 | 0) < ($345 | 0) ? $345 : $$1260; //@line 13136
  _pad_676($0, 32, $$2261, $345, $$6268); //@line 13137
  _out_670($0, $$2239, $$2234); //@line 13138
  _pad_676($0, 48, $$2261, $345, $$6268 ^ 65536); //@line 13140
  _pad_676($0, 48, $$$5, $343, 0); //@line 13141
  _out_670($0, $$2, $343); //@line 13142
  _pad_676($0, 32, $$2261, $345, $$6268 ^ 8192); //@line 13144
  $$0243 = $$2261; //@line 13145
  $$0247 = $$1248; //@line 13145
  $$0269 = $$3272; //@line 13145
 }
 L116 : do {
  if ((label | 0) == 88) {
   if (!$0) {
    if (!$$0269) {
     $$0 = 0; //@line 13153
    } else {
     $$2242302 = 1; //@line 13155
     while (1) {
      $352 = HEAP32[$4 + ($$2242302 << 2) >> 2] | 0; //@line 13158
      if (!$352) {
       $$2242$lcssa = $$2242302; //@line 13161
       break;
      }
      _pop_arg_673($3 + ($$2242302 << 3) | 0, $352, $2); //@line 13165
      $356 = $$2242302 + 1 | 0; //@line 13166
      if (($$2242302 | 0) < 9) {
       $$2242302 = $356; //@line 13169
      } else {
       $$2242$lcssa = $356; //@line 13171
       break;
      }
     }
     if (($$2242$lcssa | 0) < 10) {
      $$3300 = $$2242$lcssa; //@line 13177
      while (1) {
       if (HEAP32[$4 + ($$3300 << 2) >> 2] | 0) {
        $$0 = -1; //@line 13183
        break L116;
       }
       if (($$3300 | 0) < 9) {
        $$3300 = $$3300 + 1 | 0; //@line 13189
       } else {
        $$0 = 1; //@line 13191
        break;
       }
      }
     } else {
      $$0 = 1; //@line 13196
     }
    }
   } else {
    $$0 = $$1248; //@line 13200
   }
  }
 } while (0);
 STACKTOP = sp; //@line 13204
 return $$0 | 0; //@line 13204
}
function _mbed_vtracef($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $$0$i = 0, $$0141 = 0, $$0142 = 0, $$0144 = 0, $$0199 = 0, $$1$off0 = 0, $$10 = 0, $$1143 = 0, $$1145 = 0, $$1152 = 0, $$1152$ = 0, $$13 = 0, $$18 = 0, $$3 = 0, $$3147 = 0, $$3147168 = 0, $$3154 = 0, $$3169 = 0, $$5156 = 0, $$5156$ = 0, $$6 = 0, $$6150 = 0, $$9 = 0, $$lobit = 0, $$pre = 0, $$sink = 0, $125 = 0, $126 = 0, $151 = 0, $157 = 0, $168 = 0, $169 = 0, $171 = 0, $181 = 0, $182 = 0, $184 = 0, $186 = 0, $194 = 0, $201 = 0, $202 = 0, $204 = 0, $206 = 0, $209 = 0, $34 = 0, $38 = 0, $4 = 0, $43 = 0, $5 = 0, $54 = 0, $55 = 0, $59 = 0, $60 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $69 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $76 = 0, $78 = 0, $82 = 0, $89 = 0, $95 = 0, $AsyncCtx = 0, $AsyncCtx27 = 0, $AsyncCtx30 = 0, $AsyncCtx34 = 0, $AsyncCtx38 = 0, $AsyncCtx42 = 0, $AsyncCtx45 = 0, $AsyncCtx49 = 0, $AsyncCtx52 = 0, $AsyncCtx56 = 0, $AsyncCtx60 = 0, $AsyncCtx64 = 0, $extract$t159 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4638
 STACKTOP = STACKTOP + 96 | 0; //@line 4639
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96); //@line 4639
 $vararg_buffer23 = sp + 72 | 0; //@line 4640
 $vararg_buffer20 = sp + 64 | 0; //@line 4641
 $vararg_buffer18 = sp + 56 | 0; //@line 4642
 $vararg_buffer15 = sp + 48 | 0; //@line 4643
 $vararg_buffer12 = sp + 40 | 0; //@line 4644
 $vararg_buffer9 = sp + 32 | 0; //@line 4645
 $vararg_buffer6 = sp + 24 | 0; //@line 4646
 $vararg_buffer3 = sp + 16 | 0; //@line 4647
 $vararg_buffer1 = sp + 8 | 0; //@line 4648
 $vararg_buffer = sp; //@line 4649
 $4 = sp + 80 | 0; //@line 4650
 $5 = HEAP32[192] | 0; //@line 4651
 do {
  if ($5 | 0) {
   $AsyncCtx = _emscripten_alloc_async_context(104, sp) | 0; //@line 4655
   FUNCTION_TABLE_v[$5 & 15](); //@line 4656
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 139; //@line 4659
    HEAP32[$AsyncCtx + 4 >> 2] = $vararg_buffer23; //@line 4661
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer23; //@line 4663
    HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer3; //@line 4665
    HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer3; //@line 4667
    HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 4669
    HEAP32[$AsyncCtx + 24 >> 2] = $1; //@line 4671
    HEAP8[$AsyncCtx + 28 >> 0] = $0; //@line 4673
    HEAP32[$AsyncCtx + 32 >> 2] = $3; //@line 4675
    HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer12; //@line 4677
    HEAP32[$AsyncCtx + 40 >> 2] = $vararg_buffer12; //@line 4679
    HEAP32[$AsyncCtx + 44 >> 2] = $vararg_buffer9; //@line 4681
    HEAP32[$AsyncCtx + 48 >> 2] = $vararg_buffer9; //@line 4683
    HEAP32[$AsyncCtx + 52 >> 2] = $vararg_buffer18; //@line 4685
    HEAP32[$AsyncCtx + 56 >> 2] = $vararg_buffer18; //@line 4687
    HEAP32[$AsyncCtx + 60 >> 2] = $vararg_buffer15; //@line 4689
    HEAP32[$AsyncCtx + 64 >> 2] = $vararg_buffer15; //@line 4691
    HEAP32[$AsyncCtx + 68 >> 2] = $vararg_buffer1; //@line 4693
    HEAP32[$AsyncCtx + 72 >> 2] = $vararg_buffer1; //@line 4695
    HEAP32[$AsyncCtx + 76 >> 2] = $4; //@line 4697
    HEAP32[$AsyncCtx + 80 >> 2] = $vararg_buffer20; //@line 4699
    HEAP32[$AsyncCtx + 84 >> 2] = $vararg_buffer20; //@line 4701
    HEAP32[$AsyncCtx + 88 >> 2] = $vararg_buffer6; //@line 4703
    HEAP32[$AsyncCtx + 92 >> 2] = $vararg_buffer6; //@line 4705
    HEAP32[$AsyncCtx + 96 >> 2] = $vararg_buffer; //@line 4707
    HEAP32[$AsyncCtx + 100 >> 2] = $vararg_buffer; //@line 4709
    sp = STACKTOP; //@line 4710
    STACKTOP = sp; //@line 4711
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 4713
    HEAP32[194] = (HEAP32[194] | 0) + 1; //@line 4716
    break;
   }
  }
 } while (0);
 $34 = HEAP32[183] | 0; //@line 4721
 do {
  if ($34 | 0) {
   HEAP8[$34 >> 0] = 0; //@line 4725
   do {
    if ($0 << 24 >> 24 > -1 & ($1 | 0) != 0) {
     $38 = HEAP32[180] | 0; //@line 4731
     if (HEAP8[$38 >> 0] | 0) {
      if (_strstr($38, $1) | 0) {
       $$0$i = 1; //@line 4738
       break;
      }
     }
     $43 = HEAP32[181] | 0; //@line 4742
     if (!(HEAP8[$43 >> 0] | 0)) {
      label = 11; //@line 4746
     } else {
      if (!(_strstr($43, $1) | 0)) {
       $$0$i = 1; //@line 4751
      } else {
       label = 11; //@line 4753
      }
     }
    } else {
     label = 11; //@line 4757
    }
   } while (0);
   if ((label | 0) == 11) {
    $$0$i = 0; //@line 4761
   }
   if (!((HEAP32[190] | 0) != 0 & ((($1 | 0) == 0 | (($2 | 0) == 0 | $$0$i)) ^ 1))) {
    HEAP32[187] = HEAP32[185]; //@line 4773
    break;
   }
   $54 = HEAPU8[716] | 0; //@line 4777
   $55 = $0 & 255; //@line 4778
   if ($55 & 31 & $54 | 0) {
    $59 = $54 & 64; //@line 4783
    $$lobit = $59 >>> 6; //@line 4784
    $60 = $$lobit & 255; //@line 4785
    $64 = ($54 & 32 | 0) == 0; //@line 4789
    $65 = HEAP32[184] | 0; //@line 4790
    $66 = HEAP32[183] | 0; //@line 4791
    $67 = $0 << 24 >> 24 == 1; //@line 4792
    do {
     if ($67 | ($54 & 128 | 0) != 0) {
      $AsyncCtx64 = _emscripten_alloc_async_context(8, sp) | 0; //@line 4796
      _vsnprintf($66, $65, $2, $3) | 0; //@line 4797
      if (___async) {
       HEAP32[$AsyncCtx64 >> 2] = 140; //@line 4800
       HEAP8[$AsyncCtx64 + 4 >> 0] = $67 & 1; //@line 4803
       sp = STACKTOP; //@line 4804
       STACKTOP = sp; //@line 4805
       return;
      }
      _emscripten_free_async_context($AsyncCtx64 | 0); //@line 4807
      $69 = HEAP32[191] | 0; //@line 4808
      if (!($67 & ($69 | 0) != 0)) {
       $73 = HEAP32[190] | 0; //@line 4812
       $74 = HEAP32[183] | 0; //@line 4813
       $AsyncCtx34 = _emscripten_alloc_async_context(4, sp) | 0; //@line 4814
       FUNCTION_TABLE_vi[$73 & 1023]($74); //@line 4815
       if (___async) {
        HEAP32[$AsyncCtx34 >> 2] = 143; //@line 4818
        sp = STACKTOP; //@line 4819
        STACKTOP = sp; //@line 4820
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx34 | 0); //@line 4822
        break;
       }
      }
      $71 = HEAP32[183] | 0; //@line 4826
      $AsyncCtx27 = _emscripten_alloc_async_context(4, sp) | 0; //@line 4827
      FUNCTION_TABLE_vi[$69 & 1023]($71); //@line 4828
      if (___async) {
       HEAP32[$AsyncCtx27 >> 2] = 141; //@line 4831
       sp = STACKTOP; //@line 4832
       STACKTOP = sp; //@line 4833
       return;
      }
      _emscripten_free_async_context($AsyncCtx27 | 0); //@line 4835
      $72 = HEAP32[191] | 0; //@line 4836
      $AsyncCtx30 = _emscripten_alloc_async_context(4, sp) | 0; //@line 4837
      FUNCTION_TABLE_vi[$72 & 1023](12208); //@line 4838
      if (___async) {
       HEAP32[$AsyncCtx30 >> 2] = 142; //@line 4841
       sp = STACKTOP; //@line 4842
       STACKTOP = sp; //@line 4843
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx30 | 0); //@line 4845
       break;
      }
     } else {
      if (!$59) {
       $$1$off0 = ($$lobit | 0) != 0; //@line 4852
       $$1143 = $66; //@line 4852
       $$1145 = $65; //@line 4852
       $$3154 = 0; //@line 4852
       label = 38; //@line 4853
      } else {
       if ($64) {
        $$0142 = $66; //@line 4856
        $$0144 = $65; //@line 4856
       } else {
        $76 = _snprintf($66, $65, 12210, $vararg_buffer) | 0; //@line 4858
        $$ = ($76 | 0) >= ($65 | 0) ? 0 : $76; //@line 4860
        $78 = ($$ | 0) > 0; //@line 4861
        $$0142 = $78 ? $66 + $$ | 0 : $66; //@line 4866
        $$0144 = $65 - ($78 ? $$ : 0) | 0; //@line 4866
       }
       if (($$0144 | 0) > 0) {
        $82 = $55 + -2 | 0; //@line 4870
        switch ($82 >>> 1 | $82 << 31 | 0) {
        case 0:
         {
          $$sink = 12228; //@line 4876
          label = 35; //@line 4877
          break;
         }
        case 1:
         {
          $$sink = 12234; //@line 4881
          label = 35; //@line 4882
          break;
         }
        case 3:
         {
          $$sink = 12222; //@line 4886
          label = 35; //@line 4887
          break;
         }
        case 7:
         {
          $$sink = 12216; //@line 4891
          label = 35; //@line 4892
          break;
         }
        default:
         {
          $$0141 = 0; //@line 4896
          $$1152 = 0; //@line 4896
         }
        }
        if ((label | 0) == 35) {
         HEAP32[$vararg_buffer1 >> 2] = $$sink; //@line 4900
         $$0141 = $60 & 1; //@line 4903
         $$1152 = _snprintf($$0142, $$0144, 12240, $vararg_buffer1) | 0; //@line 4903
        }
        $$1152$ = ($$1152 | 0) < ($$0144 | 0) ? $$1152 : 0; //@line 4906
        $extract$t159 = $$0141 << 24 >> 24 != 0; //@line 4908
        if (($$1152$ | 0) > 0) {
         $89 = $$0141 << 24 >> 24 == 0; //@line 4910
         $$1$off0 = $extract$t159; //@line 4915
         $$1143 = $89 ? $$0142 : $$0142 + $$1152$ | 0; //@line 4915
         $$1145 = $$0144 - ($89 ? 0 : $$1152$) | 0; //@line 4915
         $$3154 = $$1152; //@line 4915
         label = 38; //@line 4916
        } else {
         $$1$off0 = $extract$t159; //@line 4918
         $$1143 = $$0142; //@line 4918
         $$1145 = $$0144; //@line 4918
         $$3154 = $$1152$; //@line 4918
         label = 38; //@line 4919
        }
       }
      }
      L54 : do {
       if ((label | 0) == 38) {
        do {
         if (($$1145 | 0) > 0 & (HEAP32[188] | 0) != 0) {
          HEAP32[$4 >> 2] = HEAP32[$3 >> 2]; //@line 4932
          $AsyncCtx60 = _emscripten_alloc_async_context(104, sp) | 0; //@line 4933
          $95 = _vsnprintf(0, 0, $2, $4) | 0; //@line 4934
          if (___async) {
           HEAP32[$AsyncCtx60 >> 2] = 144; //@line 4937
           HEAP32[$AsyncCtx60 + 4 >> 2] = $vararg_buffer23; //@line 4939
           HEAP32[$AsyncCtx60 + 8 >> 2] = $vararg_buffer23; //@line 4941
           HEAP32[$AsyncCtx60 + 12 >> 2] = $vararg_buffer3; //@line 4943
           HEAP32[$AsyncCtx60 + 16 >> 2] = $$1143; //@line 4945
           HEAP32[$AsyncCtx60 + 20 >> 2] = $$1145; //@line 4947
           HEAP32[$AsyncCtx60 + 24 >> 2] = $vararg_buffer3; //@line 4949
           HEAP32[$AsyncCtx60 + 28 >> 2] = $4; //@line 4951
           HEAP8[$AsyncCtx60 + 32 >> 0] = $$1$off0 & 1; //@line 4954
           HEAP32[$AsyncCtx60 + 36 >> 2] = $vararg_buffer20; //@line 4956
           HEAP32[$AsyncCtx60 + 40 >> 2] = $vararg_buffer20; //@line 4958
           HEAP32[$AsyncCtx60 + 44 >> 2] = $vararg_buffer12; //@line 4960
           HEAP32[$AsyncCtx60 + 48 >> 2] = $1; //@line 4962
           HEAP32[$AsyncCtx60 + 52 >> 2] = $vararg_buffer12; //@line 4964
           HEAP32[$AsyncCtx60 + 56 >> 2] = $vararg_buffer9; //@line 4966
           HEAP32[$AsyncCtx60 + 60 >> 2] = $vararg_buffer9; //@line 4968
           HEAP32[$AsyncCtx60 + 64 >> 2] = $vararg_buffer18; //@line 4970
           HEAP32[$AsyncCtx60 + 68 >> 2] = $vararg_buffer18; //@line 4972
           HEAP32[$AsyncCtx60 + 72 >> 2] = $vararg_buffer15; //@line 4974
           HEAP32[$AsyncCtx60 + 76 >> 2] = $vararg_buffer15; //@line 4976
           HEAP32[$AsyncCtx60 + 80 >> 2] = $$3154; //@line 4978
           HEAP32[$AsyncCtx60 + 84 >> 2] = $2; //@line 4980
           HEAP32[$AsyncCtx60 + 88 >> 2] = $3; //@line 4982
           HEAP32[$AsyncCtx60 + 92 >> 2] = $55; //@line 4984
           HEAP32[$AsyncCtx60 + 96 >> 2] = $vararg_buffer6; //@line 4986
           HEAP32[$AsyncCtx60 + 100 >> 2] = $vararg_buffer6; //@line 4988
           sp = STACKTOP; //@line 4989
           STACKTOP = sp; //@line 4990
           return;
          }
          _emscripten_free_async_context($AsyncCtx60 | 0); //@line 4992
          $125 = HEAP32[188] | 0; //@line 4997
          $AsyncCtx38 = _emscripten_alloc_async_context(100, sp) | 0; //@line 4998
          $126 = FUNCTION_TABLE_ii[$125 & 15](($$3154 | 0 ? 4 : 0) + $$3154 + $95 | 0) | 0; //@line 4999
          if (___async) {
           HEAP32[$AsyncCtx38 >> 2] = 145; //@line 5002
           HEAP32[$AsyncCtx38 + 4 >> 2] = $vararg_buffer23; //@line 5004
           HEAP32[$AsyncCtx38 + 8 >> 2] = $vararg_buffer23; //@line 5006
           HEAP32[$AsyncCtx38 + 12 >> 2] = $vararg_buffer3; //@line 5008
           HEAP32[$AsyncCtx38 + 16 >> 2] = $$1143; //@line 5010
           HEAP32[$AsyncCtx38 + 20 >> 2] = $$1145; //@line 5012
           HEAP32[$AsyncCtx38 + 24 >> 2] = $vararg_buffer3; //@line 5014
           HEAP32[$AsyncCtx38 + 28 >> 2] = $4; //@line 5016
           HEAP8[$AsyncCtx38 + 32 >> 0] = $$1$off0 & 1; //@line 5019
           HEAP32[$AsyncCtx38 + 36 >> 2] = $vararg_buffer12; //@line 5021
           HEAP32[$AsyncCtx38 + 40 >> 2] = $1; //@line 5023
           HEAP32[$AsyncCtx38 + 44 >> 2] = $vararg_buffer12; //@line 5025
           HEAP32[$AsyncCtx38 + 48 >> 2] = $vararg_buffer9; //@line 5027
           HEAP32[$AsyncCtx38 + 52 >> 2] = $vararg_buffer9; //@line 5029
           HEAP32[$AsyncCtx38 + 56 >> 2] = $vararg_buffer18; //@line 5031
           HEAP32[$AsyncCtx38 + 60 >> 2] = $vararg_buffer18; //@line 5033
           HEAP32[$AsyncCtx38 + 64 >> 2] = $vararg_buffer15; //@line 5035
           HEAP32[$AsyncCtx38 + 68 >> 2] = $vararg_buffer15; //@line 5037
           HEAP32[$AsyncCtx38 + 72 >> 2] = $2; //@line 5039
           HEAP32[$AsyncCtx38 + 76 >> 2] = $3; //@line 5041
           HEAP32[$AsyncCtx38 + 80 >> 2] = $vararg_buffer20; //@line 5043
           HEAP32[$AsyncCtx38 + 84 >> 2] = $vararg_buffer20; //@line 5045
           HEAP32[$AsyncCtx38 + 88 >> 2] = $55; //@line 5047
           HEAP32[$AsyncCtx38 + 92 >> 2] = $vararg_buffer6; //@line 5049
           HEAP32[$AsyncCtx38 + 96 >> 2] = $vararg_buffer6; //@line 5051
           sp = STACKTOP; //@line 5052
           STACKTOP = sp; //@line 5053
           return;
          } else {
           _emscripten_free_async_context($AsyncCtx38 | 0); //@line 5055
           HEAP32[$vararg_buffer3 >> 2] = $126; //@line 5056
           $151 = _snprintf($$1143, $$1145, 12240, $vararg_buffer3) | 0; //@line 5057
           $$10 = ($151 | 0) >= ($$1145 | 0) ? 0 : $151; //@line 5059
           if (($$10 | 0) > 0) {
            $$3 = $$1143 + $$10 | 0; //@line 5064
            $$3147 = $$1145 - $$10 | 0; //@line 5064
            label = 44; //@line 5065
            break;
           } else {
            $$3147168 = $$1145; //@line 5068
            $$3169 = $$1143; //@line 5068
            break;
           }
          }
         } else {
          $$3 = $$1143; //@line 5073
          $$3147 = $$1145; //@line 5073
          label = 44; //@line 5074
         }
        } while (0);
        if ((label | 0) == 44) {
         if (($$3147 | 0) > 0) {
          $$3147168 = $$3147; //@line 5080
          $$3169 = $$3; //@line 5080
         } else {
          break;
         }
        }
        $157 = $55 + -2 | 0; //@line 5085
        switch ($157 >>> 1 | $157 << 31 | 0) {
        case 0:
         {
          HEAP32[$vararg_buffer6 >> 2] = $1; //@line 5091
          $$5156 = _snprintf($$3169, $$3147168, 12243, $vararg_buffer6) | 0; //@line 5093
          break;
         }
        case 1:
         {
          HEAP32[$vararg_buffer9 >> 2] = $1; //@line 5097
          $$5156 = _snprintf($$3169, $$3147168, 12258, $vararg_buffer9) | 0; //@line 5099
          break;
         }
        case 3:
         {
          HEAP32[$vararg_buffer12 >> 2] = $1; //@line 5103
          $$5156 = _snprintf($$3169, $$3147168, 12273, $vararg_buffer12) | 0; //@line 5105
          break;
         }
        case 7:
         {
          HEAP32[$vararg_buffer15 >> 2] = $1; //@line 5109
          $$5156 = _snprintf($$3169, $$3147168, 12288, $vararg_buffer15) | 0; //@line 5111
          break;
         }
        default:
         {
          $$5156 = _snprintf($$3169, $$3147168, 12303, $vararg_buffer18) | 0; //@line 5116
         }
        }
        $$5156$ = ($$5156 | 0) < ($$3147168 | 0) ? $$5156 : 0; //@line 5120
        $168 = $$3169 + $$5156$ | 0; //@line 5122
        $169 = $$3147168 - $$5156$ | 0; //@line 5123
        if (($$5156$ | 0) > 0 & ($169 | 0) > 0) {
         $AsyncCtx56 = _emscripten_alloc_async_context(32, sp) | 0; //@line 5127
         $171 = _vsnprintf($168, $169, $2, $3) | 0; //@line 5128
         if (___async) {
          HEAP32[$AsyncCtx56 >> 2] = 146; //@line 5131
          HEAP32[$AsyncCtx56 + 4 >> 2] = $vararg_buffer23; //@line 5133
          HEAP32[$AsyncCtx56 + 8 >> 2] = $vararg_buffer23; //@line 5135
          HEAP8[$AsyncCtx56 + 12 >> 0] = $$1$off0 & 1; //@line 5138
          HEAP32[$AsyncCtx56 + 16 >> 2] = $vararg_buffer20; //@line 5140
          HEAP32[$AsyncCtx56 + 20 >> 2] = $vararg_buffer20; //@line 5142
          HEAP32[$AsyncCtx56 + 24 >> 2] = $169; //@line 5144
          HEAP32[$AsyncCtx56 + 28 >> 2] = $168; //@line 5146
          sp = STACKTOP; //@line 5147
          STACKTOP = sp; //@line 5148
          return;
         }
         _emscripten_free_async_context($AsyncCtx56 | 0); //@line 5150
         $$13 = ($171 | 0) >= ($169 | 0) ? 0 : $171; //@line 5152
         $181 = $168 + $$13 | 0; //@line 5154
         $182 = $169 - $$13 | 0; //@line 5155
         if (($$13 | 0) > 0) {
          $184 = HEAP32[189] | 0; //@line 5158
          do {
           if (($182 | 0) > 0 & ($184 | 0) != 0) {
            $AsyncCtx42 = _emscripten_alloc_async_context(32, sp) | 0; //@line 5163
            $186 = FUNCTION_TABLE_i[$184 & 7]() | 0; //@line 5164
            if (___async) {
             HEAP32[$AsyncCtx42 >> 2] = 147; //@line 5167
             HEAP32[$AsyncCtx42 + 4 >> 2] = $vararg_buffer20; //@line 5169
             HEAP32[$AsyncCtx42 + 8 >> 2] = $181; //@line 5171
             HEAP32[$AsyncCtx42 + 12 >> 2] = $182; //@line 5173
             HEAP32[$AsyncCtx42 + 16 >> 2] = $vararg_buffer20; //@line 5175
             HEAP8[$AsyncCtx42 + 20 >> 0] = $$1$off0 & 1; //@line 5178
             HEAP32[$AsyncCtx42 + 24 >> 2] = $vararg_buffer23; //@line 5180
             HEAP32[$AsyncCtx42 + 28 >> 2] = $vararg_buffer23; //@line 5182
             sp = STACKTOP; //@line 5183
             STACKTOP = sp; //@line 5184
             return;
            } else {
             _emscripten_free_async_context($AsyncCtx42 | 0); //@line 5186
             HEAP32[$vararg_buffer20 >> 2] = $186; //@line 5187
             $194 = _snprintf($181, $182, 12240, $vararg_buffer20) | 0; //@line 5188
             $$18 = ($194 | 0) >= ($182 | 0) ? 0 : $194; //@line 5190
             if (($$18 | 0) > 0) {
              $$6 = $181 + $$18 | 0; //@line 5195
              $$6150 = $182 - $$18 | 0; //@line 5195
              $$9 = $$18; //@line 5195
              break;
             } else {
              break L54;
             }
            }
           } else {
            $$6 = $181; //@line 5202
            $$6150 = $182; //@line 5202
            $$9 = $$13; //@line 5202
           }
          } while (0);
          if (!(($$9 | 0) < 1 | ($$6150 | 0) < 1 | $$1$off0 ^ 1)) {
           _snprintf($$6, $$6150, 12318, $vararg_buffer23) | 0; //@line 5211
          }
         }
        }
       }
      } while (0);
      $201 = HEAP32[190] | 0; //@line 5217
      $202 = HEAP32[183] | 0; //@line 5218
      $AsyncCtx45 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5219
      FUNCTION_TABLE_vi[$201 & 1023]($202); //@line 5220
      if (___async) {
       HEAP32[$AsyncCtx45 >> 2] = 148; //@line 5223
       sp = STACKTOP; //@line 5224
       STACKTOP = sp; //@line 5225
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx45 | 0); //@line 5227
       break;
      }
     }
    } while (0);
    HEAP32[187] = HEAP32[185]; //@line 5233
   }
  }
 } while (0);
 $204 = HEAP32[193] | 0; //@line 5237
 if (!$204) {
  STACKTOP = sp; //@line 5240
  return;
 }
 $206 = HEAP32[194] | 0; //@line 5242
 HEAP32[194] = 0; //@line 5243
 $AsyncCtx49 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5244
 FUNCTION_TABLE_v[$204 & 15](); //@line 5245
 if (___async) {
  HEAP32[$AsyncCtx49 >> 2] = 149; //@line 5248
  HEAP32[$AsyncCtx49 + 4 >> 2] = $206; //@line 5250
  sp = STACKTOP; //@line 5251
  STACKTOP = sp; //@line 5252
  return;
 }
 _emscripten_free_async_context($AsyncCtx49 | 0); //@line 5254
 if (($206 | 0) > 1) {
  $$0199 = $206; //@line 5257
 } else {
  STACKTOP = sp; //@line 5259
  return;
 }
 while (1) {
  $209 = $$0199 + -1 | 0; //@line 5262
  $$pre = HEAP32[193] | 0; //@line 5263
  $AsyncCtx52 = _emscripten_alloc_async_context(12, sp) | 0; //@line 5264
  FUNCTION_TABLE_v[$$pre & 15](); //@line 5265
  if (___async) {
   label = 70; //@line 5268
   break;
  }
  _emscripten_free_async_context($AsyncCtx52 | 0); //@line 5271
  if (($$0199 | 0) > 2) {
   $$0199 = $209; //@line 5274
  } else {
   label = 72; //@line 5276
   break;
  }
 }
 if ((label | 0) == 70) {
  HEAP32[$AsyncCtx52 >> 2] = 150; //@line 5281
  HEAP32[$AsyncCtx52 + 4 >> 2] = $$0199; //@line 5283
  HEAP32[$AsyncCtx52 + 8 >> 2] = $209; //@line 5285
  sp = STACKTOP; //@line 5286
  STACKTOP = sp; //@line 5287
  return;
 } else if ((label | 0) == 72) {
  STACKTOP = sp; //@line 5290
  return;
 }
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_186($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $130 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $144 = 0, $145 = 0, $147 = 0, $148 = 0, $149 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $161 = 0, $165 = 0, $166 = 0, $168 = 0, $169 = 0, $170 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $29 = 0, $37 = 0, $4 = 0, $41 = 0, $47 = 0, $50 = 0, $53 = 0, $55 = 0, $56 = 0, $6 = 0, $61 = 0, $63 = 0, $64 = 0, $65 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $89 = 0, $90 = 0, $92 = 0, $93 = 0, $94 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 31923
 STACKTOP = STACKTOP + 16 | 0; //@line 31924
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 31924
 $$byval_copy = sp; //@line 31925
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31927
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31929
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31931
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31933
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31935
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31937
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 31939
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 31941
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 31943
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 31945
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 31947
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 31949
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  HEAP8[$2 >> 0] = HEAP8[$2 >> 0] & -33; //@line 31956
 } else {
  $29 = $4 + 288 | 0; //@line 31958
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($29) | 0) + 4 >> 2] = 9; //@line 31961
  __ZN14LoRaMacCommand20clear_command_bufferEv($4 + 4 | 0); //@line 31963
  HEAP32[$6 >> 2] = HEAP32[$6 >> 2] & -2; //@line 31966
  HEAP8[$8 >> 0] = 0; //@line 31967
  HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($29) | 0) + 10 >> 0] = 0; //@line 31970
  $37 = HEAP8[$10 >> 0] | 0; //@line 31971
  HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($29) | 0) + 11 >> 0] = $37; //@line 31974
  $41 = HEAP8[$4 + 1097 >> 0] | 0; //@line 31976
  HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($29) | 0) + 8 >> 0] = $41; //@line 31979
  if (!(HEAP8[$4 + 370 >> 0] | 0)) {
   $47 = $4 + 956 | 0; //@line 31984
   HEAP32[$47 >> 2] = (HEAP32[$47 >> 2] | 0) + 1; //@line 31987
  }
 }
 $50 = HEAP32[$6 >> 2] | 0; //@line 31990
 $53 = $50 & -3; //@line 31993
 if (!($50 & 2)) {
  $55 = $50; //@line 31995
 } else {
  HEAP32[$6 >> 2] = $53; //@line 31997
  $55 = $53; //@line 31998
 }
 if ($55 | 0) {
  $122 = HEAP32[$22 >> 2] | 0; //@line 32002
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 32003
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($122, $24, 1e3); //@line 32004
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 402; //@line 32007
   $123 = $ReallocAsyncCtx6 + 4 | 0; //@line 32008
   HEAP32[$123 >> 2] = $2; //@line 32009
   $124 = $ReallocAsyncCtx6 + 8 | 0; //@line 32010
   HEAP32[$124 >> 2] = $4; //@line 32011
   $125 = $ReallocAsyncCtx6 + 12 | 0; //@line 32012
   HEAP32[$125 >> 2] = $12; //@line 32013
   $126 = $ReallocAsyncCtx6 + 16 | 0; //@line 32014
   HEAP32[$126 >> 2] = $14; //@line 32015
   $127 = $ReallocAsyncCtx6 + 20 | 0; //@line 32016
   HEAP32[$127 >> 2] = $16; //@line 32017
   sp = STACKTOP; //@line 32018
   STACKTOP = sp; //@line 32019
   return;
  }
  ___async_unwind = 0; //@line 32021
  HEAP32[$ReallocAsyncCtx6 >> 2] = 402; //@line 32022
  $123 = $ReallocAsyncCtx6 + 4 | 0; //@line 32023
  HEAP32[$123 >> 2] = $2; //@line 32024
  $124 = $ReallocAsyncCtx6 + 8 | 0; //@line 32025
  HEAP32[$124 >> 2] = $4; //@line 32026
  $125 = $ReallocAsyncCtx6 + 12 | 0; //@line 32027
  HEAP32[$125 >> 2] = $12; //@line 32028
  $126 = $ReallocAsyncCtx6 + 16 | 0; //@line 32029
  HEAP32[$126 >> 2] = $14; //@line 32030
  $127 = $ReallocAsyncCtx6 + 20 | 0; //@line 32031
  HEAP32[$127 >> 2] = $16; //@line 32032
  sp = STACKTOP; //@line 32033
  STACKTOP = sp; //@line 32034
  return;
 }
 $56 = HEAP8[$2 >> 0] | 0; //@line 32036
 if ($56 & 1) {
  HEAP8[$2 >> 0] = $56 & -2; //@line 32041
  $61 = HEAP32[$4 + 1324 >> 2] | 0; //@line 32043
  $63 = __ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0; //@line 32045
  $64 = $61 + 12 | 0; //@line 32046
  $65 = HEAP32[$64 >> 2] | 0; //@line 32047
  if (!$65) {
   $ReallocAsyncCtx16 = _emscripten_realloc_async_context(44) | 0; //@line 32050
   _mbed_assert_internal(15679, 15684, 1102); //@line 32051
   if (___async) {
    HEAP32[$ReallocAsyncCtx16 >> 2] = 398; //@line 32054
    $67 = $ReallocAsyncCtx16 + 4 | 0; //@line 32055
    HEAP32[$67 >> 2] = $2; //@line 32056
    $68 = $ReallocAsyncCtx16 + 8 | 0; //@line 32057
    HEAP32[$68 >> 2] = $4; //@line 32058
    $69 = $ReallocAsyncCtx16 + 12 | 0; //@line 32059
    HEAP32[$69 >> 2] = $61; //@line 32060
    $70 = $ReallocAsyncCtx16 + 16 | 0; //@line 32061
    HEAP32[$70 >> 2] = $63; //@line 32062
    $71 = $ReallocAsyncCtx16 + 20 | 0; //@line 32063
    HEAP32[$71 >> 2] = $64; //@line 32064
    $72 = $ReallocAsyncCtx16 + 24 | 0; //@line 32065
    HEAP32[$72 >> 2] = $12; //@line 32066
    $73 = $ReallocAsyncCtx16 + 28 | 0; //@line 32067
    HEAP32[$73 >> 2] = $14; //@line 32068
    $74 = $ReallocAsyncCtx16 + 32 | 0; //@line 32069
    HEAP32[$74 >> 2] = $16; //@line 32070
    $75 = $ReallocAsyncCtx16 + 36 | 0; //@line 32071
    HEAP32[$75 >> 2] = $18; //@line 32072
    $76 = $ReallocAsyncCtx16 + 40 | 0; //@line 32073
    HEAP32[$76 >> 2] = $20; //@line 32074
    sp = STACKTOP; //@line 32075
    STACKTOP = sp; //@line 32076
    return;
   }
   ___async_unwind = 0; //@line 32078
   HEAP32[$ReallocAsyncCtx16 >> 2] = 398; //@line 32079
   $67 = $ReallocAsyncCtx16 + 4 | 0; //@line 32080
   HEAP32[$67 >> 2] = $2; //@line 32081
   $68 = $ReallocAsyncCtx16 + 8 | 0; //@line 32082
   HEAP32[$68 >> 2] = $4; //@line 32083
   $69 = $ReallocAsyncCtx16 + 12 | 0; //@line 32084
   HEAP32[$69 >> 2] = $61; //@line 32085
   $70 = $ReallocAsyncCtx16 + 16 | 0; //@line 32086
   HEAP32[$70 >> 2] = $63; //@line 32087
   $71 = $ReallocAsyncCtx16 + 20 | 0; //@line 32088
   HEAP32[$71 >> 2] = $64; //@line 32089
   $72 = $ReallocAsyncCtx16 + 24 | 0; //@line 32090
   HEAP32[$72 >> 2] = $12; //@line 32091
   $73 = $ReallocAsyncCtx16 + 28 | 0; //@line 32092
   HEAP32[$73 >> 2] = $14; //@line 32093
   $74 = $ReallocAsyncCtx16 + 32 | 0; //@line 32094
   HEAP32[$74 >> 2] = $16; //@line 32095
   $75 = $ReallocAsyncCtx16 + 36 | 0; //@line 32096
   HEAP32[$75 >> 2] = $18; //@line 32097
   $76 = $ReallocAsyncCtx16 + 40 | 0; //@line 32098
   HEAP32[$76 >> 2] = $20; //@line 32099
   sp = STACKTOP; //@line 32100
   STACKTOP = sp; //@line 32101
   return;
  } else {
   $77 = HEAP32[$65 >> 2] | 0; //@line 32103
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 32104
   FUNCTION_TABLE_vii[$77 & 31]($61, $63); //@line 32105
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 399; //@line 32108
    $78 = $ReallocAsyncCtx2 + 4 | 0; //@line 32109
    HEAP32[$78 >> 2] = $2; //@line 32110
    $79 = $ReallocAsyncCtx2 + 8 | 0; //@line 32111
    HEAP32[$79 >> 2] = $4; //@line 32112
    $80 = $ReallocAsyncCtx2 + 12 | 0; //@line 32113
    HEAP32[$80 >> 2] = $12; //@line 32114
    $81 = $ReallocAsyncCtx2 + 16 | 0; //@line 32115
    HEAP32[$81 >> 2] = $14; //@line 32116
    $82 = $ReallocAsyncCtx2 + 20 | 0; //@line 32117
    HEAP32[$82 >> 2] = $16; //@line 32118
    $83 = $ReallocAsyncCtx2 + 24 | 0; //@line 32119
    HEAP32[$83 >> 2] = $18; //@line 32120
    $84 = $ReallocAsyncCtx2 + 28 | 0; //@line 32121
    HEAP32[$84 >> 2] = $20; //@line 32122
    sp = STACKTOP; //@line 32123
    STACKTOP = sp; //@line 32124
    return;
   }
   ___async_unwind = 0; //@line 32126
   HEAP32[$ReallocAsyncCtx2 >> 2] = 399; //@line 32127
   $78 = $ReallocAsyncCtx2 + 4 | 0; //@line 32128
   HEAP32[$78 >> 2] = $2; //@line 32129
   $79 = $ReallocAsyncCtx2 + 8 | 0; //@line 32130
   HEAP32[$79 >> 2] = $4; //@line 32131
   $80 = $ReallocAsyncCtx2 + 12 | 0; //@line 32132
   HEAP32[$80 >> 2] = $12; //@line 32133
   $81 = $ReallocAsyncCtx2 + 16 | 0; //@line 32134
   HEAP32[$81 >> 2] = $14; //@line 32135
   $82 = $ReallocAsyncCtx2 + 20 | 0; //@line 32136
   HEAP32[$82 >> 2] = $16; //@line 32137
   $83 = $ReallocAsyncCtx2 + 24 | 0; //@line 32138
   HEAP32[$83 >> 2] = $18; //@line 32139
   $84 = $ReallocAsyncCtx2 + 28 | 0; //@line 32140
   HEAP32[$84 >> 2] = $20; //@line 32141
   sp = STACKTOP; //@line 32142
   STACKTOP = sp; //@line 32143
   return;
  }
 }
 if ($56 & 8) {
  HEAP8[$2 >> 0] = $56 & -9; //@line 32150
  $89 = HEAP32[$4 + 1324 >> 2] | 0; //@line 32152
  $90 = $89 + 32 | 0; //@line 32153
  $92 = __ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0; //@line 32155
  $93 = $89 + 44 | 0; //@line 32156
  $94 = HEAP32[$93 >> 2] | 0; //@line 32157
  if (!$94) {
   $ReallocAsyncCtx15 = _emscripten_realloc_async_context(44) | 0; //@line 32160
   _mbed_assert_internal(15679, 15684, 1102); //@line 32161
   if (___async) {
    HEAP32[$ReallocAsyncCtx15 >> 2] = 400; //@line 32164
    $96 = $ReallocAsyncCtx15 + 4 | 0; //@line 32165
    HEAP32[$96 >> 2] = $2; //@line 32166
    $97 = $ReallocAsyncCtx15 + 8 | 0; //@line 32167
    HEAP32[$97 >> 2] = $4; //@line 32168
    $98 = $ReallocAsyncCtx15 + 12 | 0; //@line 32169
    HEAP32[$98 >> 2] = $90; //@line 32170
    $99 = $ReallocAsyncCtx15 + 16 | 0; //@line 32171
    HEAP32[$99 >> 2] = $92; //@line 32172
    $100 = $ReallocAsyncCtx15 + 20 | 0; //@line 32173
    HEAP32[$100 >> 2] = $12; //@line 32174
    $101 = $ReallocAsyncCtx15 + 24 | 0; //@line 32175
    HEAP32[$101 >> 2] = $14; //@line 32176
    $102 = $ReallocAsyncCtx15 + 28 | 0; //@line 32177
    HEAP32[$102 >> 2] = $16; //@line 32178
    $103 = $ReallocAsyncCtx15 + 32 | 0; //@line 32179
    HEAP32[$103 >> 2] = $18; //@line 32180
    $104 = $ReallocAsyncCtx15 + 36 | 0; //@line 32181
    HEAP32[$104 >> 2] = $20; //@line 32182
    $105 = $ReallocAsyncCtx15 + 40 | 0; //@line 32183
    HEAP32[$105 >> 2] = $93; //@line 32184
    sp = STACKTOP; //@line 32185
    STACKTOP = sp; //@line 32186
    return;
   }
   ___async_unwind = 0; //@line 32188
   HEAP32[$ReallocAsyncCtx15 >> 2] = 400; //@line 32189
   $96 = $ReallocAsyncCtx15 + 4 | 0; //@line 32190
   HEAP32[$96 >> 2] = $2; //@line 32191
   $97 = $ReallocAsyncCtx15 + 8 | 0; //@line 32192
   HEAP32[$97 >> 2] = $4; //@line 32193
   $98 = $ReallocAsyncCtx15 + 12 | 0; //@line 32194
   HEAP32[$98 >> 2] = $90; //@line 32195
   $99 = $ReallocAsyncCtx15 + 16 | 0; //@line 32196
   HEAP32[$99 >> 2] = $92; //@line 32197
   $100 = $ReallocAsyncCtx15 + 20 | 0; //@line 32198
   HEAP32[$100 >> 2] = $12; //@line 32199
   $101 = $ReallocAsyncCtx15 + 24 | 0; //@line 32200
   HEAP32[$101 >> 2] = $14; //@line 32201
   $102 = $ReallocAsyncCtx15 + 28 | 0; //@line 32202
   HEAP32[$102 >> 2] = $16; //@line 32203
   $103 = $ReallocAsyncCtx15 + 32 | 0; //@line 32204
   HEAP32[$103 >> 2] = $18; //@line 32205
   $104 = $ReallocAsyncCtx15 + 36 | 0; //@line 32206
   HEAP32[$104 >> 2] = $20; //@line 32207
   $105 = $ReallocAsyncCtx15 + 40 | 0; //@line 32208
   HEAP32[$105 >> 2] = $93; //@line 32209
   sp = STACKTOP; //@line 32210
   STACKTOP = sp; //@line 32211
   return;
  } else {
   $106 = HEAP32[$94 >> 2] | 0; //@line 32213
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 32214
   FUNCTION_TABLE_vii[$106 & 31]($90, $92); //@line 32215
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 401; //@line 32218
    $107 = $ReallocAsyncCtx3 + 4 | 0; //@line 32219
    HEAP32[$107 >> 2] = $4; //@line 32220
    $108 = $ReallocAsyncCtx3 + 8 | 0; //@line 32221
    HEAP32[$108 >> 2] = $2; //@line 32222
    $109 = $ReallocAsyncCtx3 + 12 | 0; //@line 32223
    HEAP32[$109 >> 2] = $12; //@line 32224
    $110 = $ReallocAsyncCtx3 + 16 | 0; //@line 32225
    HEAP32[$110 >> 2] = $14; //@line 32226
    $111 = $ReallocAsyncCtx3 + 20 | 0; //@line 32227
    HEAP32[$111 >> 2] = $16; //@line 32228
    $112 = $ReallocAsyncCtx3 + 24 | 0; //@line 32229
    HEAP32[$112 >> 2] = $18; //@line 32230
    $113 = $ReallocAsyncCtx3 + 28 | 0; //@line 32231
    HEAP32[$113 >> 2] = $20; //@line 32232
    sp = STACKTOP; //@line 32233
    STACKTOP = sp; //@line 32234
    return;
   }
   ___async_unwind = 0; //@line 32236
   HEAP32[$ReallocAsyncCtx3 >> 2] = 401; //@line 32237
   $107 = $ReallocAsyncCtx3 + 4 | 0; //@line 32238
   HEAP32[$107 >> 2] = $4; //@line 32239
   $108 = $ReallocAsyncCtx3 + 8 | 0; //@line 32240
   HEAP32[$108 >> 2] = $2; //@line 32241
   $109 = $ReallocAsyncCtx3 + 12 | 0; //@line 32242
   HEAP32[$109 >> 2] = $12; //@line 32243
   $110 = $ReallocAsyncCtx3 + 16 | 0; //@line 32244
   HEAP32[$110 >> 2] = $14; //@line 32245
   $111 = $ReallocAsyncCtx3 + 20 | 0; //@line 32246
   HEAP32[$111 >> 2] = $16; //@line 32247
   $112 = $ReallocAsyncCtx3 + 24 | 0; //@line 32248
   HEAP32[$112 >> 2] = $18; //@line 32249
   $113 = $ReallocAsyncCtx3 + 28 | 0; //@line 32250
   HEAP32[$113 >> 2] = $20; //@line 32251
   sp = STACKTOP; //@line 32252
   STACKTOP = sp; //@line 32253
   return;
  }
 }
 if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($4 + 4 | 0) | 0) {
  _mbed_tracef(16, 13728, 13889, $18); //@line 32259
  HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0) >> 2] = 4; //@line 32262
  $119 = HEAP8[$2 >> 0] | 16; //@line 32264
  HEAP8[$2 >> 0] = $119; //@line 32265
  $121 = $119; //@line 32266
 } else {
  $121 = HEAP8[$2 >> 0] | 0; //@line 32269
 }
 $120 = $121 & -33; //@line 32271
 HEAP8[$2 >> 0] = $120; //@line 32272
 do {
  if (!($120 & 2)) {
   $161 = $120; //@line 32277
  } else {
   $130 = $120 & -3; //@line 32279
   HEAP8[$2 >> 0] = $130; //@line 32280
   if ((HEAP32[$4 + 360 >> 2] | 0) == 2) {
    _mbed_tracef(16, 13728, 13747, $14); //@line 32285
    $135 = HEAP32[$4 + 1328 >> 2] | 0; //@line 32287
    HEAP32[$12 >> 2] = 293; //@line 32288
    HEAP32[$12 + 4 >> 2] = 0; //@line 32290
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 32291
    HEAP32[$$byval_copy >> 2] = HEAP32[$12 >> 2]; //@line 32292
    HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$12 + 4 >> 2]; //@line 32292
    $136 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($135, $4, $$byval_copy) | 0; //@line 32293
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 403; //@line 32296
     $137 = $ReallocAsyncCtx8 + 4 | 0; //@line 32297
     HEAP32[$137 >> 2] = $2; //@line 32298
     $138 = $ReallocAsyncCtx8 + 8 | 0; //@line 32299
     HEAP32[$138 >> 2] = $4; //@line 32300
     $139 = $ReallocAsyncCtx8 + 12 | 0; //@line 32301
     HEAP32[$139 >> 2] = $12; //@line 32302
     sp = STACKTOP; //@line 32303
     STACKTOP = sp; //@line 32304
     return;
    }
    HEAP32[___async_retval >> 2] = $136; //@line 32307
    ___async_unwind = 0; //@line 32308
    HEAP32[$ReallocAsyncCtx8 >> 2] = 403; //@line 32309
    $137 = $ReallocAsyncCtx8 + 4 | 0; //@line 32310
    HEAP32[$137 >> 2] = $2; //@line 32311
    $138 = $ReallocAsyncCtx8 + 8 | 0; //@line 32312
    HEAP32[$138 >> 2] = $4; //@line 32313
    $139 = $ReallocAsyncCtx8 + 12 | 0; //@line 32314
    HEAP32[$139 >> 2] = $12; //@line 32315
    sp = STACKTOP; //@line 32316
    STACKTOP = sp; //@line 32317
    return;
   }
   if ($130 & 4) {
    $159 = $130 & -5; //@line 32322
    HEAP8[$2 >> 0] = $159; //@line 32323
    $161 = $159; //@line 32324
    break;
   }
   $144 = HEAP32[$4 + 1324 >> 2] | 0; //@line 32328
   $145 = $144 + 16 | 0; //@line 32329
   $147 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 32331
   $148 = $144 + 28 | 0; //@line 32332
   $149 = HEAP32[$148 >> 2] | 0; //@line 32333
   if (!$149) {
    $ReallocAsyncCtx13 = _emscripten_realloc_async_context(24) | 0; //@line 32336
    _mbed_assert_internal(15679, 15684, 1102); //@line 32337
    if (___async) {
     HEAP32[$ReallocAsyncCtx13 >> 2] = 405; //@line 32340
     $151 = $ReallocAsyncCtx13 + 4 | 0; //@line 32341
     HEAP32[$151 >> 2] = $148; //@line 32342
     $152 = $ReallocAsyncCtx13 + 8 | 0; //@line 32343
     HEAP32[$152 >> 2] = $145; //@line 32344
     $153 = $ReallocAsyncCtx13 + 12 | 0; //@line 32345
     HEAP32[$153 >> 2] = $147; //@line 32346
     $154 = $ReallocAsyncCtx13 + 16 | 0; //@line 32347
     HEAP32[$154 >> 2] = $2; //@line 32348
     $155 = $ReallocAsyncCtx13 + 20 | 0; //@line 32349
     HEAP32[$155 >> 2] = $4; //@line 32350
     sp = STACKTOP; //@line 32351
     STACKTOP = sp; //@line 32352
     return;
    }
    ___async_unwind = 0; //@line 32354
    HEAP32[$ReallocAsyncCtx13 >> 2] = 405; //@line 32355
    $151 = $ReallocAsyncCtx13 + 4 | 0; //@line 32356
    HEAP32[$151 >> 2] = $148; //@line 32357
    $152 = $ReallocAsyncCtx13 + 8 | 0; //@line 32358
    HEAP32[$152 >> 2] = $145; //@line 32359
    $153 = $ReallocAsyncCtx13 + 12 | 0; //@line 32360
    HEAP32[$153 >> 2] = $147; //@line 32361
    $154 = $ReallocAsyncCtx13 + 16 | 0; //@line 32362
    HEAP32[$154 >> 2] = $2; //@line 32363
    $155 = $ReallocAsyncCtx13 + 20 | 0; //@line 32364
    HEAP32[$155 >> 2] = $4; //@line 32365
    sp = STACKTOP; //@line 32366
    STACKTOP = sp; //@line 32367
    return;
   } else {
    $156 = HEAP32[$149 >> 2] | 0; //@line 32369
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 32370
    FUNCTION_TABLE_vii[$156 & 31]($145, $147); //@line 32371
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 406; //@line 32374
     $157 = $ReallocAsyncCtx4 + 4 | 0; //@line 32375
     HEAP32[$157 >> 2] = $2; //@line 32376
     $158 = $ReallocAsyncCtx4 + 8 | 0; //@line 32377
     HEAP32[$158 >> 2] = $4; //@line 32378
     sp = STACKTOP; //@line 32379
     STACKTOP = sp; //@line 32380
     return;
    }
    ___async_unwind = 0; //@line 32382
    HEAP32[$ReallocAsyncCtx4 >> 2] = 406; //@line 32383
    $157 = $ReallocAsyncCtx4 + 4 | 0; //@line 32384
    HEAP32[$157 >> 2] = $2; //@line 32385
    $158 = $ReallocAsyncCtx4 + 8 | 0; //@line 32386
    HEAP32[$158 >> 2] = $4; //@line 32387
    sp = STACKTOP; //@line 32388
    STACKTOP = sp; //@line 32389
    return;
   }
  }
 } while (0);
 if (!($161 & 16)) {
  STACKTOP = sp; //@line 32396
  return;
 }
 HEAP8[$2 >> 0] = $161 & -17; //@line 32399
 $165 = HEAP32[$4 + 1324 >> 2] | 0; //@line 32401
 $166 = $165 + 48 | 0; //@line 32402
 $168 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 32404
 $169 = $165 + 60 | 0; //@line 32405
 $170 = HEAP32[$169 >> 2] | 0; //@line 32406
 if (!$170) {
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(16) | 0; //@line 32409
  _mbed_assert_internal(15679, 15684, 1102); //@line 32410
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 407; //@line 32413
   $172 = $ReallocAsyncCtx12 + 4 | 0; //@line 32414
   HEAP32[$172 >> 2] = $169; //@line 32415
   $173 = $ReallocAsyncCtx12 + 8 | 0; //@line 32416
   HEAP32[$173 >> 2] = $166; //@line 32417
   $174 = $ReallocAsyncCtx12 + 12 | 0; //@line 32418
   HEAP32[$174 >> 2] = $168; //@line 32419
   sp = STACKTOP; //@line 32420
   STACKTOP = sp; //@line 32421
   return;
  }
  ___async_unwind = 0; //@line 32423
  HEAP32[$ReallocAsyncCtx12 >> 2] = 407; //@line 32424
  $172 = $ReallocAsyncCtx12 + 4 | 0; //@line 32425
  HEAP32[$172 >> 2] = $169; //@line 32426
  $173 = $ReallocAsyncCtx12 + 8 | 0; //@line 32427
  HEAP32[$173 >> 2] = $166; //@line 32428
  $174 = $ReallocAsyncCtx12 + 12 | 0; //@line 32429
  HEAP32[$174 >> 2] = $168; //@line 32430
  sp = STACKTOP; //@line 32431
  STACKTOP = sp; //@line 32432
  return;
 } else {
  $175 = HEAP32[$170 >> 2] | 0; //@line 32434
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 32435
  FUNCTION_TABLE_vii[$175 & 31]($166, $168); //@line 32436
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 408; //@line 32439
   sp = STACKTOP; //@line 32440
   STACKTOP = sp; //@line 32441
   return;
  }
  ___async_unwind = 0; //@line 32443
  HEAP32[$ReallocAsyncCtx5 >> 2] = 408; //@line 32444
  sp = STACKTOP; //@line 32445
  STACKTOP = sp; //@line 32446
  return;
 }
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $12 = 0, $120 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $134 = 0, $135 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $151 = 0, $155 = 0, $156 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $28 = 0, $31 = 0, $37 = 0, $4 = 0, $40 = 0, $43 = 0, $45 = 0, $46 = 0, $51 = 0, $53 = 0, $54 = 0, $55 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $79 = 0, $8 = 0, $80 = 0, $82 = 0, $83 = 0, $84 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 30585
 STACKTOP = STACKTOP + 16 | 0; //@line 30586
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 30586
 $$byval_copy = sp; //@line 30587
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30589
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30591
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30593
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30595
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30597
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30599
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 30601
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 30603
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 30605
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 30607
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 30609
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 30611
 HEAP32[$6 >> 2] = HEAP32[$6 >> 2] & -2; //@line 30614
 __ZN14LoRaMacCommand20clear_command_bufferEv($4 + 4 | 0); //@line 30616
 HEAP8[$8 >> 0] = 0; //@line 30617
 $28 = $4 + 288 | 0; //@line 30618
 HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($28) | 0) + 10 >> 0] = 0; //@line 30621
 $31 = HEAP8[$10 >> 0] | 0; //@line 30622
 HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($28) | 0) + 11 >> 0] = $31; //@line 30625
 if (!(HEAP8[$4 + 370 >> 0] | 0)) {
  $37 = $4 + 956 | 0; //@line 30630
  HEAP32[$37 >> 2] = (HEAP32[$37 >> 2] | 0) + 1; //@line 30633
 }
 $40 = HEAP32[$6 >> 2] | 0; //@line 30635
 $43 = $40 & -3; //@line 30638
 if (!($40 & 2)) {
  $45 = $40; //@line 30640
 } else {
  HEAP32[$6 >> 2] = $43; //@line 30642
  $45 = $43; //@line 30643
 }
 if ($45 | 0) {
  $112 = HEAP32[$22 >> 2] | 0; //@line 30647
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 30648
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($112, $24, 1e3); //@line 30649
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 402; //@line 30652
   $113 = $ReallocAsyncCtx6 + 4 | 0; //@line 30653
   HEAP32[$113 >> 2] = $2; //@line 30654
   $114 = $ReallocAsyncCtx6 + 8 | 0; //@line 30655
   HEAP32[$114 >> 2] = $4; //@line 30656
   $115 = $ReallocAsyncCtx6 + 12 | 0; //@line 30657
   HEAP32[$115 >> 2] = $12; //@line 30658
   $116 = $ReallocAsyncCtx6 + 16 | 0; //@line 30659
   HEAP32[$116 >> 2] = $14; //@line 30660
   $117 = $ReallocAsyncCtx6 + 20 | 0; //@line 30661
   HEAP32[$117 >> 2] = $16; //@line 30662
   sp = STACKTOP; //@line 30663
   STACKTOP = sp; //@line 30664
   return;
  }
  ___async_unwind = 0; //@line 30666
  HEAP32[$ReallocAsyncCtx6 >> 2] = 402; //@line 30667
  $113 = $ReallocAsyncCtx6 + 4 | 0; //@line 30668
  HEAP32[$113 >> 2] = $2; //@line 30669
  $114 = $ReallocAsyncCtx6 + 8 | 0; //@line 30670
  HEAP32[$114 >> 2] = $4; //@line 30671
  $115 = $ReallocAsyncCtx6 + 12 | 0; //@line 30672
  HEAP32[$115 >> 2] = $12; //@line 30673
  $116 = $ReallocAsyncCtx6 + 16 | 0; //@line 30674
  HEAP32[$116 >> 2] = $14; //@line 30675
  $117 = $ReallocAsyncCtx6 + 20 | 0; //@line 30676
  HEAP32[$117 >> 2] = $16; //@line 30677
  sp = STACKTOP; //@line 30678
  STACKTOP = sp; //@line 30679
  return;
 }
 $46 = HEAP8[$2 >> 0] | 0; //@line 30681
 if ($46 & 1) {
  HEAP8[$2 >> 0] = $46 & -2; //@line 30686
  $51 = HEAP32[$4 + 1324 >> 2] | 0; //@line 30688
  $53 = __ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0; //@line 30690
  $54 = $51 + 12 | 0; //@line 30691
  $55 = HEAP32[$54 >> 2] | 0; //@line 30692
  if (!$55) {
   $ReallocAsyncCtx16 = _emscripten_realloc_async_context(44) | 0; //@line 30695
   _mbed_assert_internal(15679, 15684, 1102); //@line 30696
   if (___async) {
    HEAP32[$ReallocAsyncCtx16 >> 2] = 398; //@line 30699
    $57 = $ReallocAsyncCtx16 + 4 | 0; //@line 30700
    HEAP32[$57 >> 2] = $2; //@line 30701
    $58 = $ReallocAsyncCtx16 + 8 | 0; //@line 30702
    HEAP32[$58 >> 2] = $4; //@line 30703
    $59 = $ReallocAsyncCtx16 + 12 | 0; //@line 30704
    HEAP32[$59 >> 2] = $51; //@line 30705
    $60 = $ReallocAsyncCtx16 + 16 | 0; //@line 30706
    HEAP32[$60 >> 2] = $53; //@line 30707
    $61 = $ReallocAsyncCtx16 + 20 | 0; //@line 30708
    HEAP32[$61 >> 2] = $54; //@line 30709
    $62 = $ReallocAsyncCtx16 + 24 | 0; //@line 30710
    HEAP32[$62 >> 2] = $12; //@line 30711
    $63 = $ReallocAsyncCtx16 + 28 | 0; //@line 30712
    HEAP32[$63 >> 2] = $14; //@line 30713
    $64 = $ReallocAsyncCtx16 + 32 | 0; //@line 30714
    HEAP32[$64 >> 2] = $16; //@line 30715
    $65 = $ReallocAsyncCtx16 + 36 | 0; //@line 30716
    HEAP32[$65 >> 2] = $18; //@line 30717
    $66 = $ReallocAsyncCtx16 + 40 | 0; //@line 30718
    HEAP32[$66 >> 2] = $20; //@line 30719
    sp = STACKTOP; //@line 30720
    STACKTOP = sp; //@line 30721
    return;
   }
   ___async_unwind = 0; //@line 30723
   HEAP32[$ReallocAsyncCtx16 >> 2] = 398; //@line 30724
   $57 = $ReallocAsyncCtx16 + 4 | 0; //@line 30725
   HEAP32[$57 >> 2] = $2; //@line 30726
   $58 = $ReallocAsyncCtx16 + 8 | 0; //@line 30727
   HEAP32[$58 >> 2] = $4; //@line 30728
   $59 = $ReallocAsyncCtx16 + 12 | 0; //@line 30729
   HEAP32[$59 >> 2] = $51; //@line 30730
   $60 = $ReallocAsyncCtx16 + 16 | 0; //@line 30731
   HEAP32[$60 >> 2] = $53; //@line 30732
   $61 = $ReallocAsyncCtx16 + 20 | 0; //@line 30733
   HEAP32[$61 >> 2] = $54; //@line 30734
   $62 = $ReallocAsyncCtx16 + 24 | 0; //@line 30735
   HEAP32[$62 >> 2] = $12; //@line 30736
   $63 = $ReallocAsyncCtx16 + 28 | 0; //@line 30737
   HEAP32[$63 >> 2] = $14; //@line 30738
   $64 = $ReallocAsyncCtx16 + 32 | 0; //@line 30739
   HEAP32[$64 >> 2] = $16; //@line 30740
   $65 = $ReallocAsyncCtx16 + 36 | 0; //@line 30741
   HEAP32[$65 >> 2] = $18; //@line 30742
   $66 = $ReallocAsyncCtx16 + 40 | 0; //@line 30743
   HEAP32[$66 >> 2] = $20; //@line 30744
   sp = STACKTOP; //@line 30745
   STACKTOP = sp; //@line 30746
   return;
  } else {
   $67 = HEAP32[$55 >> 2] | 0; //@line 30748
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 30749
   FUNCTION_TABLE_vii[$67 & 31]($51, $53); //@line 30750
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 399; //@line 30753
    $68 = $ReallocAsyncCtx2 + 4 | 0; //@line 30754
    HEAP32[$68 >> 2] = $2; //@line 30755
    $69 = $ReallocAsyncCtx2 + 8 | 0; //@line 30756
    HEAP32[$69 >> 2] = $4; //@line 30757
    $70 = $ReallocAsyncCtx2 + 12 | 0; //@line 30758
    HEAP32[$70 >> 2] = $12; //@line 30759
    $71 = $ReallocAsyncCtx2 + 16 | 0; //@line 30760
    HEAP32[$71 >> 2] = $14; //@line 30761
    $72 = $ReallocAsyncCtx2 + 20 | 0; //@line 30762
    HEAP32[$72 >> 2] = $16; //@line 30763
    $73 = $ReallocAsyncCtx2 + 24 | 0; //@line 30764
    HEAP32[$73 >> 2] = $18; //@line 30765
    $74 = $ReallocAsyncCtx2 + 28 | 0; //@line 30766
    HEAP32[$74 >> 2] = $20; //@line 30767
    sp = STACKTOP; //@line 30768
    STACKTOP = sp; //@line 30769
    return;
   }
   ___async_unwind = 0; //@line 30771
   HEAP32[$ReallocAsyncCtx2 >> 2] = 399; //@line 30772
   $68 = $ReallocAsyncCtx2 + 4 | 0; //@line 30773
   HEAP32[$68 >> 2] = $2; //@line 30774
   $69 = $ReallocAsyncCtx2 + 8 | 0; //@line 30775
   HEAP32[$69 >> 2] = $4; //@line 30776
   $70 = $ReallocAsyncCtx2 + 12 | 0; //@line 30777
   HEAP32[$70 >> 2] = $12; //@line 30778
   $71 = $ReallocAsyncCtx2 + 16 | 0; //@line 30779
   HEAP32[$71 >> 2] = $14; //@line 30780
   $72 = $ReallocAsyncCtx2 + 20 | 0; //@line 30781
   HEAP32[$72 >> 2] = $16; //@line 30782
   $73 = $ReallocAsyncCtx2 + 24 | 0; //@line 30783
   HEAP32[$73 >> 2] = $18; //@line 30784
   $74 = $ReallocAsyncCtx2 + 28 | 0; //@line 30785
   HEAP32[$74 >> 2] = $20; //@line 30786
   sp = STACKTOP; //@line 30787
   STACKTOP = sp; //@line 30788
   return;
  }
 }
 if ($46 & 8) {
  HEAP8[$2 >> 0] = $46 & -9; //@line 30795
  $79 = HEAP32[$4 + 1324 >> 2] | 0; //@line 30797
  $80 = $79 + 32 | 0; //@line 30798
  $82 = __ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0; //@line 30800
  $83 = $79 + 44 | 0; //@line 30801
  $84 = HEAP32[$83 >> 2] | 0; //@line 30802
  if (!$84) {
   $ReallocAsyncCtx15 = _emscripten_realloc_async_context(44) | 0; //@line 30805
   _mbed_assert_internal(15679, 15684, 1102); //@line 30806
   if (___async) {
    HEAP32[$ReallocAsyncCtx15 >> 2] = 400; //@line 30809
    $86 = $ReallocAsyncCtx15 + 4 | 0; //@line 30810
    HEAP32[$86 >> 2] = $2; //@line 30811
    $87 = $ReallocAsyncCtx15 + 8 | 0; //@line 30812
    HEAP32[$87 >> 2] = $4; //@line 30813
    $88 = $ReallocAsyncCtx15 + 12 | 0; //@line 30814
    HEAP32[$88 >> 2] = $80; //@line 30815
    $89 = $ReallocAsyncCtx15 + 16 | 0; //@line 30816
    HEAP32[$89 >> 2] = $82; //@line 30817
    $90 = $ReallocAsyncCtx15 + 20 | 0; //@line 30818
    HEAP32[$90 >> 2] = $12; //@line 30819
    $91 = $ReallocAsyncCtx15 + 24 | 0; //@line 30820
    HEAP32[$91 >> 2] = $14; //@line 30821
    $92 = $ReallocAsyncCtx15 + 28 | 0; //@line 30822
    HEAP32[$92 >> 2] = $16; //@line 30823
    $93 = $ReallocAsyncCtx15 + 32 | 0; //@line 30824
    HEAP32[$93 >> 2] = $18; //@line 30825
    $94 = $ReallocAsyncCtx15 + 36 | 0; //@line 30826
    HEAP32[$94 >> 2] = $20; //@line 30827
    $95 = $ReallocAsyncCtx15 + 40 | 0; //@line 30828
    HEAP32[$95 >> 2] = $83; //@line 30829
    sp = STACKTOP; //@line 30830
    STACKTOP = sp; //@line 30831
    return;
   }
   ___async_unwind = 0; //@line 30833
   HEAP32[$ReallocAsyncCtx15 >> 2] = 400; //@line 30834
   $86 = $ReallocAsyncCtx15 + 4 | 0; //@line 30835
   HEAP32[$86 >> 2] = $2; //@line 30836
   $87 = $ReallocAsyncCtx15 + 8 | 0; //@line 30837
   HEAP32[$87 >> 2] = $4; //@line 30838
   $88 = $ReallocAsyncCtx15 + 12 | 0; //@line 30839
   HEAP32[$88 >> 2] = $80; //@line 30840
   $89 = $ReallocAsyncCtx15 + 16 | 0; //@line 30841
   HEAP32[$89 >> 2] = $82; //@line 30842
   $90 = $ReallocAsyncCtx15 + 20 | 0; //@line 30843
   HEAP32[$90 >> 2] = $12; //@line 30844
   $91 = $ReallocAsyncCtx15 + 24 | 0; //@line 30845
   HEAP32[$91 >> 2] = $14; //@line 30846
   $92 = $ReallocAsyncCtx15 + 28 | 0; //@line 30847
   HEAP32[$92 >> 2] = $16; //@line 30848
   $93 = $ReallocAsyncCtx15 + 32 | 0; //@line 30849
   HEAP32[$93 >> 2] = $18; //@line 30850
   $94 = $ReallocAsyncCtx15 + 36 | 0; //@line 30851
   HEAP32[$94 >> 2] = $20; //@line 30852
   $95 = $ReallocAsyncCtx15 + 40 | 0; //@line 30853
   HEAP32[$95 >> 2] = $83; //@line 30854
   sp = STACKTOP; //@line 30855
   STACKTOP = sp; //@line 30856
   return;
  } else {
   $96 = HEAP32[$84 >> 2] | 0; //@line 30858
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 30859
   FUNCTION_TABLE_vii[$96 & 31]($80, $82); //@line 30860
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 401; //@line 30863
    $97 = $ReallocAsyncCtx3 + 4 | 0; //@line 30864
    HEAP32[$97 >> 2] = $4; //@line 30865
    $98 = $ReallocAsyncCtx3 + 8 | 0; //@line 30866
    HEAP32[$98 >> 2] = $2; //@line 30867
    $99 = $ReallocAsyncCtx3 + 12 | 0; //@line 30868
    HEAP32[$99 >> 2] = $12; //@line 30869
    $100 = $ReallocAsyncCtx3 + 16 | 0; //@line 30870
    HEAP32[$100 >> 2] = $14; //@line 30871
    $101 = $ReallocAsyncCtx3 + 20 | 0; //@line 30872
    HEAP32[$101 >> 2] = $16; //@line 30873
    $102 = $ReallocAsyncCtx3 + 24 | 0; //@line 30874
    HEAP32[$102 >> 2] = $18; //@line 30875
    $103 = $ReallocAsyncCtx3 + 28 | 0; //@line 30876
    HEAP32[$103 >> 2] = $20; //@line 30877
    sp = STACKTOP; //@line 30878
    STACKTOP = sp; //@line 30879
    return;
   }
   ___async_unwind = 0; //@line 30881
   HEAP32[$ReallocAsyncCtx3 >> 2] = 401; //@line 30882
   $97 = $ReallocAsyncCtx3 + 4 | 0; //@line 30883
   HEAP32[$97 >> 2] = $4; //@line 30884
   $98 = $ReallocAsyncCtx3 + 8 | 0; //@line 30885
   HEAP32[$98 >> 2] = $2; //@line 30886
   $99 = $ReallocAsyncCtx3 + 12 | 0; //@line 30887
   HEAP32[$99 >> 2] = $12; //@line 30888
   $100 = $ReallocAsyncCtx3 + 16 | 0; //@line 30889
   HEAP32[$100 >> 2] = $14; //@line 30890
   $101 = $ReallocAsyncCtx3 + 20 | 0; //@line 30891
   HEAP32[$101 >> 2] = $16; //@line 30892
   $102 = $ReallocAsyncCtx3 + 24 | 0; //@line 30893
   HEAP32[$102 >> 2] = $18; //@line 30894
   $103 = $ReallocAsyncCtx3 + 28 | 0; //@line 30895
   HEAP32[$103 >> 2] = $20; //@line 30896
   sp = STACKTOP; //@line 30897
   STACKTOP = sp; //@line 30898
   return;
  }
 }
 if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($4 + 4 | 0) | 0) {
  _mbed_tracef(16, 13728, 13889, $18); //@line 30904
  HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0) >> 2] = 4; //@line 30907
  $109 = HEAP8[$2 >> 0] | 16; //@line 30909
  HEAP8[$2 >> 0] = $109; //@line 30910
  $111 = $109; //@line 30911
 } else {
  $111 = HEAP8[$2 >> 0] | 0; //@line 30914
 }
 $110 = $111 & -33; //@line 30916
 HEAP8[$2 >> 0] = $110; //@line 30917
 do {
  if (!($110 & 2)) {
   $151 = $110; //@line 30922
  } else {
   $120 = $110 & -3; //@line 30924
   HEAP8[$2 >> 0] = $120; //@line 30925
   if ((HEAP32[$4 + 360 >> 2] | 0) == 2) {
    _mbed_tracef(16, 13728, 13747, $14); //@line 30930
    $125 = HEAP32[$4 + 1328 >> 2] | 0; //@line 30932
    HEAP32[$12 >> 2] = 293; //@line 30933
    HEAP32[$12 + 4 >> 2] = 0; //@line 30935
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 30936
    HEAP32[$$byval_copy >> 2] = HEAP32[$12 >> 2]; //@line 30937
    HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$12 + 4 >> 2]; //@line 30937
    $126 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($125, $4, $$byval_copy) | 0; //@line 30938
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 403; //@line 30941
     $127 = $ReallocAsyncCtx8 + 4 | 0; //@line 30942
     HEAP32[$127 >> 2] = $2; //@line 30943
     $128 = $ReallocAsyncCtx8 + 8 | 0; //@line 30944
     HEAP32[$128 >> 2] = $4; //@line 30945
     $129 = $ReallocAsyncCtx8 + 12 | 0; //@line 30946
     HEAP32[$129 >> 2] = $12; //@line 30947
     sp = STACKTOP; //@line 30948
     STACKTOP = sp; //@line 30949
     return;
    }
    HEAP32[___async_retval >> 2] = $126; //@line 30952
    ___async_unwind = 0; //@line 30953
    HEAP32[$ReallocAsyncCtx8 >> 2] = 403; //@line 30954
    $127 = $ReallocAsyncCtx8 + 4 | 0; //@line 30955
    HEAP32[$127 >> 2] = $2; //@line 30956
    $128 = $ReallocAsyncCtx8 + 8 | 0; //@line 30957
    HEAP32[$128 >> 2] = $4; //@line 30958
    $129 = $ReallocAsyncCtx8 + 12 | 0; //@line 30959
    HEAP32[$129 >> 2] = $12; //@line 30960
    sp = STACKTOP; //@line 30961
    STACKTOP = sp; //@line 30962
    return;
   }
   if ($120 & 4) {
    $149 = $120 & -5; //@line 30967
    HEAP8[$2 >> 0] = $149; //@line 30968
    $151 = $149; //@line 30969
    break;
   }
   $134 = HEAP32[$4 + 1324 >> 2] | 0; //@line 30973
   $135 = $134 + 16 | 0; //@line 30974
   $137 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 30976
   $138 = $134 + 28 | 0; //@line 30977
   $139 = HEAP32[$138 >> 2] | 0; //@line 30978
   if (!$139) {
    $ReallocAsyncCtx13 = _emscripten_realloc_async_context(24) | 0; //@line 30981
    _mbed_assert_internal(15679, 15684, 1102); //@line 30982
    if (___async) {
     HEAP32[$ReallocAsyncCtx13 >> 2] = 405; //@line 30985
     $141 = $ReallocAsyncCtx13 + 4 | 0; //@line 30986
     HEAP32[$141 >> 2] = $138; //@line 30987
     $142 = $ReallocAsyncCtx13 + 8 | 0; //@line 30988
     HEAP32[$142 >> 2] = $135; //@line 30989
     $143 = $ReallocAsyncCtx13 + 12 | 0; //@line 30990
     HEAP32[$143 >> 2] = $137; //@line 30991
     $144 = $ReallocAsyncCtx13 + 16 | 0; //@line 30992
     HEAP32[$144 >> 2] = $2; //@line 30993
     $145 = $ReallocAsyncCtx13 + 20 | 0; //@line 30994
     HEAP32[$145 >> 2] = $4; //@line 30995
     sp = STACKTOP; //@line 30996
     STACKTOP = sp; //@line 30997
     return;
    }
    ___async_unwind = 0; //@line 30999
    HEAP32[$ReallocAsyncCtx13 >> 2] = 405; //@line 31000
    $141 = $ReallocAsyncCtx13 + 4 | 0; //@line 31001
    HEAP32[$141 >> 2] = $138; //@line 31002
    $142 = $ReallocAsyncCtx13 + 8 | 0; //@line 31003
    HEAP32[$142 >> 2] = $135; //@line 31004
    $143 = $ReallocAsyncCtx13 + 12 | 0; //@line 31005
    HEAP32[$143 >> 2] = $137; //@line 31006
    $144 = $ReallocAsyncCtx13 + 16 | 0; //@line 31007
    HEAP32[$144 >> 2] = $2; //@line 31008
    $145 = $ReallocAsyncCtx13 + 20 | 0; //@line 31009
    HEAP32[$145 >> 2] = $4; //@line 31010
    sp = STACKTOP; //@line 31011
    STACKTOP = sp; //@line 31012
    return;
   } else {
    $146 = HEAP32[$139 >> 2] | 0; //@line 31014
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 31015
    FUNCTION_TABLE_vii[$146 & 31]($135, $137); //@line 31016
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 406; //@line 31019
     $147 = $ReallocAsyncCtx4 + 4 | 0; //@line 31020
     HEAP32[$147 >> 2] = $2; //@line 31021
     $148 = $ReallocAsyncCtx4 + 8 | 0; //@line 31022
     HEAP32[$148 >> 2] = $4; //@line 31023
     sp = STACKTOP; //@line 31024
     STACKTOP = sp; //@line 31025
     return;
    }
    ___async_unwind = 0; //@line 31027
    HEAP32[$ReallocAsyncCtx4 >> 2] = 406; //@line 31028
    $147 = $ReallocAsyncCtx4 + 4 | 0; //@line 31029
    HEAP32[$147 >> 2] = $2; //@line 31030
    $148 = $ReallocAsyncCtx4 + 8 | 0; //@line 31031
    HEAP32[$148 >> 2] = $4; //@line 31032
    sp = STACKTOP; //@line 31033
    STACKTOP = sp; //@line 31034
    return;
   }
  }
 } while (0);
 if (!($151 & 16)) {
  STACKTOP = sp; //@line 31041
  return;
 }
 HEAP8[$2 >> 0] = $151 & -17; //@line 31044
 $155 = HEAP32[$4 + 1324 >> 2] | 0; //@line 31046
 $156 = $155 + 48 | 0; //@line 31047
 $158 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 31049
 $159 = $155 + 60 | 0; //@line 31050
 $160 = HEAP32[$159 >> 2] | 0; //@line 31051
 if (!$160) {
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(16) | 0; //@line 31054
  _mbed_assert_internal(15679, 15684, 1102); //@line 31055
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 407; //@line 31058
   $162 = $ReallocAsyncCtx12 + 4 | 0; //@line 31059
   HEAP32[$162 >> 2] = $159; //@line 31060
   $163 = $ReallocAsyncCtx12 + 8 | 0; //@line 31061
   HEAP32[$163 >> 2] = $156; //@line 31062
   $164 = $ReallocAsyncCtx12 + 12 | 0; //@line 31063
   HEAP32[$164 >> 2] = $158; //@line 31064
   sp = STACKTOP; //@line 31065
   STACKTOP = sp; //@line 31066
   return;
  }
  ___async_unwind = 0; //@line 31068
  HEAP32[$ReallocAsyncCtx12 >> 2] = 407; //@line 31069
  $162 = $ReallocAsyncCtx12 + 4 | 0; //@line 31070
  HEAP32[$162 >> 2] = $159; //@line 31071
  $163 = $ReallocAsyncCtx12 + 8 | 0; //@line 31072
  HEAP32[$163 >> 2] = $156; //@line 31073
  $164 = $ReallocAsyncCtx12 + 12 | 0; //@line 31074
  HEAP32[$164 >> 2] = $158; //@line 31075
  sp = STACKTOP; //@line 31076
  STACKTOP = sp; //@line 31077
  return;
 } else {
  $165 = HEAP32[$160 >> 2] | 0; //@line 31079
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 31080
  FUNCTION_TABLE_vii[$165 & 31]($156, $158); //@line 31081
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 408; //@line 31084
   sp = STACKTOP; //@line 31085
   STACKTOP = sp; //@line 31086
   return;
  }
  ___async_unwind = 0; //@line 31088
  HEAP32[$ReallocAsyncCtx5 >> 2] = 408; //@line 31089
  sp = STACKTOP; //@line 31090
  STACKTOP = sp; //@line 31091
  return;
 }
}
function __ZN7LoRaMac22get_phy_event_handlersEv($0) {
 $0 = $0 | 0;
 var $$pre = 0, $$pre$i$i = 0, $$pre$i$i21 = 0, $$pre$i$i34 = 0, $$pre$i$i50 = 0, $$pre$i$i66 = 0, $$pre119 = 0, $$pre120 = 0, $$pre121 = 0, $$pre122 = 0, $1 = 0, $102 = 0, $103 = 0, $114 = 0, $115 = 0, $121 = 0, $122 = 0, $124 = 0, $125 = 0, $128 = 0, $138 = 0, $139 = 0, $149 = 0, $150 = 0, $155 = 0, $156 = 0, $158 = 0, $159 = 0, $162 = 0, $170 = 0, $171 = 0, $179 = 0, $180 = 0, $2 = 0, $21 = 0, $22 = 0, $3 = 0, $35 = 0, $36 = 0, $44 = 0, $45 = 0, $47 = 0, $48 = 0, $5 = 0, $51 = 0, $6 = 0, $63 = 0, $64 = 0, $76 = 0, $77 = 0, $84 = 0, $85 = 0, $87 = 0, $88 = 0, $9 = 0, $91 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx23 = 0, $AsyncCtx26 = 0, $AsyncCtx29 = 0, $AsyncCtx32 = 0, $AsyncCtx35 = 0, $AsyncCtx38 = 0, $AsyncCtx41 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 17824
 STACKTOP = STACKTOP + 16 | 0; //@line 17825
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 17825
 $1 = sp; //@line 17826
 $2 = $1 + 12 | 0; //@line 17827
 HEAP32[$1 >> 2] = 480; //@line 17828
 HEAP32[$1 + 4 >> 2] = 0; //@line 17830
 HEAP32[$1 + 8 >> 2] = $0; //@line 17832
 HEAP32[$2 >> 2] = 912; //@line 17833
 $3 = $0 + 1212 | 0; //@line 17834
 do {
  if (($3 | 0) == ($1 | 0)) {
   $35 = 912; //@line 17838
   label = 10; //@line 17839
  } else {
   $5 = $0 + 1224 | 0; //@line 17841
   $6 = HEAP32[$5 >> 2] | 0; //@line 17842
   if (!$6) {
    $21 = 912; //@line 17845
   } else {
    $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 17848
    $AsyncCtx = _emscripten_alloc_async_context(40, sp) | 0; //@line 17849
    FUNCTION_TABLE_vi[$9 & 1023]($3); //@line 17850
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 481; //@line 17853
     HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 17855
     HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 17857
     HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 17859
     HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 17861
     HEAP32[$AsyncCtx + 20 >> 2] = $3; //@line 17863
     HEAP32[$AsyncCtx + 24 >> 2] = $1; //@line 17865
     HEAP32[$AsyncCtx + 28 >> 2] = $1; //@line 17867
     HEAP32[$AsyncCtx + 32 >> 2] = $1; //@line 17869
     HEAP32[$AsyncCtx + 36 >> 2] = $1; //@line 17871
     sp = STACKTOP; //@line 17872
     STACKTOP = sp; //@line 17873
     return 0; //@line 17873
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 17875
    $$pre = HEAP32[$2 >> 2] | 0; //@line 17876
    if (!$$pre) {
     HEAP32[$5 >> 2] = 0; //@line 17879
     break;
    } else {
     $21 = $$pre; //@line 17882
    }
   }
   $22 = HEAP32[$21 + 4 >> 2] | 0; //@line 17886
   $AsyncCtx2 = _emscripten_alloc_async_context(40, sp) | 0; //@line 17887
   FUNCTION_TABLE_vii[$22 & 31]($3, $1); //@line 17888
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 482; //@line 17891
    HEAP32[$AsyncCtx2 + 4 >> 2] = $2; //@line 17893
    HEAP32[$AsyncCtx2 + 8 >> 2] = $5; //@line 17895
    HEAP32[$AsyncCtx2 + 12 >> 2] = $1; //@line 17897
    HEAP32[$AsyncCtx2 + 16 >> 2] = $0; //@line 17899
    HEAP32[$AsyncCtx2 + 20 >> 2] = $1; //@line 17901
    HEAP32[$AsyncCtx2 + 24 >> 2] = $3; //@line 17903
    HEAP32[$AsyncCtx2 + 28 >> 2] = $1; //@line 17905
    HEAP32[$AsyncCtx2 + 32 >> 2] = $1; //@line 17907
    HEAP32[$AsyncCtx2 + 36 >> 2] = $1; //@line 17909
    sp = STACKTOP; //@line 17910
    STACKTOP = sp; //@line 17911
    return 0; //@line 17911
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 17913
    $$pre$i$i = HEAP32[$2 >> 2] | 0; //@line 17914
    HEAP32[$5 >> 2] = $$pre$i$i; //@line 17916
    if (!$$pre$i$i) {
     break;
    } else {
     $35 = $$pre$i$i; //@line 17921
     label = 10; //@line 17922
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 10) {
   $36 = HEAP32[$35 + 8 >> 2] | 0; //@line 17931
   $AsyncCtx5 = _emscripten_alloc_async_context(32, sp) | 0; //@line 17932
   FUNCTION_TABLE_vi[$36 & 1023]($1); //@line 17933
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 483; //@line 17936
    HEAP32[$AsyncCtx5 + 4 >> 2] = $1; //@line 17938
    HEAP32[$AsyncCtx5 + 8 >> 2] = $0; //@line 17940
    HEAP32[$AsyncCtx5 + 12 >> 2] = $3; //@line 17942
    HEAP32[$AsyncCtx5 + 16 >> 2] = $1; //@line 17944
    HEAP32[$AsyncCtx5 + 20 >> 2] = $1; //@line 17946
    HEAP32[$AsyncCtx5 + 24 >> 2] = $1; //@line 17948
    HEAP32[$AsyncCtx5 + 28 >> 2] = $1; //@line 17950
    sp = STACKTOP; //@line 17951
    STACKTOP = sp; //@line 17952
    return 0; //@line 17952
   } else {
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 17954
    break;
   }
  }
 } while (0);
 $44 = $1 + 12 | 0; //@line 17959
 HEAP32[$1 >> 2] = 7; //@line 17960
 HEAP32[$1 + 4 >> 2] = 0; //@line 17962
 HEAP32[$1 + 8 >> 2] = $0; //@line 17964
 HEAP32[$44 >> 2] = 924; //@line 17965
 $45 = $0 + 1244 | 0; //@line 17966
 do {
  if (($45 | 0) == ($1 | 0)) {
   $76 = 924; //@line 17970
   label = 22; //@line 17971
  } else {
   $47 = $0 + 1256 | 0; //@line 17973
   $48 = HEAP32[$47 >> 2] | 0; //@line 17974
   if (!$48) {
    $63 = 924; //@line 17977
   } else {
    $51 = HEAP32[$48 + 8 >> 2] | 0; //@line 17980
    $AsyncCtx8 = _emscripten_alloc_async_context(40, sp) | 0; //@line 17981
    FUNCTION_TABLE_vi[$51 & 1023]($45); //@line 17982
    if (___async) {
     HEAP32[$AsyncCtx8 >> 2] = 484; //@line 17985
     HEAP32[$AsyncCtx8 + 4 >> 2] = $44; //@line 17987
     HEAP32[$AsyncCtx8 + 8 >> 2] = $47; //@line 17989
     HEAP32[$AsyncCtx8 + 12 >> 2] = $1; //@line 17991
     HEAP32[$AsyncCtx8 + 16 >> 2] = $0; //@line 17993
     HEAP32[$AsyncCtx8 + 20 >> 2] = $3; //@line 17995
     HEAP32[$AsyncCtx8 + 24 >> 2] = $45; //@line 17997
     HEAP32[$AsyncCtx8 + 28 >> 2] = $1; //@line 17999
     HEAP32[$AsyncCtx8 + 32 >> 2] = $1; //@line 18001
     HEAP32[$AsyncCtx8 + 36 >> 2] = $1; //@line 18003
     sp = STACKTOP; //@line 18004
     STACKTOP = sp; //@line 18005
     return 0; //@line 18005
    }
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 18007
    $$pre119 = HEAP32[$44 >> 2] | 0; //@line 18008
    if (!$$pre119) {
     HEAP32[$47 >> 2] = 0; //@line 18011
     break;
    } else {
     $63 = $$pre119; //@line 18014
    }
   }
   $64 = HEAP32[$63 + 4 >> 2] | 0; //@line 18018
   $AsyncCtx11 = _emscripten_alloc_async_context(36, sp) | 0; //@line 18019
   FUNCTION_TABLE_vii[$64 & 31]($45, $1); //@line 18020
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 485; //@line 18023
    HEAP32[$AsyncCtx11 + 4 >> 2] = $44; //@line 18025
    HEAP32[$AsyncCtx11 + 8 >> 2] = $47; //@line 18027
    HEAP32[$AsyncCtx11 + 12 >> 2] = $1; //@line 18029
    HEAP32[$AsyncCtx11 + 16 >> 2] = $0; //@line 18031
    HEAP32[$AsyncCtx11 + 20 >> 2] = $3; //@line 18033
    HEAP32[$AsyncCtx11 + 24 >> 2] = $1; //@line 18035
    HEAP32[$AsyncCtx11 + 28 >> 2] = $1; //@line 18037
    HEAP32[$AsyncCtx11 + 32 >> 2] = $1; //@line 18039
    sp = STACKTOP; //@line 18040
    STACKTOP = sp; //@line 18041
    return 0; //@line 18041
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 18043
    $$pre$i$i21 = HEAP32[$44 >> 2] | 0; //@line 18044
    HEAP32[$47 >> 2] = $$pre$i$i21; //@line 18046
    if (!$$pre$i$i21) {
     break;
    } else {
     $76 = $$pre$i$i21; //@line 18051
     label = 22; //@line 18052
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 22) {
   $77 = HEAP32[$76 + 8 >> 2] | 0; //@line 18061
   $AsyncCtx14 = _emscripten_alloc_async_context(28, sp) | 0; //@line 18062
   FUNCTION_TABLE_vi[$77 & 1023]($1); //@line 18063
   if (___async) {
    HEAP32[$AsyncCtx14 >> 2] = 486; //@line 18066
    HEAP32[$AsyncCtx14 + 4 >> 2] = $1; //@line 18068
    HEAP32[$AsyncCtx14 + 8 >> 2] = $0; //@line 18070
    HEAP32[$AsyncCtx14 + 12 >> 2] = $3; //@line 18072
    HEAP32[$AsyncCtx14 + 16 >> 2] = $1; //@line 18074
    HEAP32[$AsyncCtx14 + 20 >> 2] = $1; //@line 18076
    HEAP32[$AsyncCtx14 + 24 >> 2] = $1; //@line 18078
    sp = STACKTOP; //@line 18079
    STACKTOP = sp; //@line 18080
    return 0; //@line 18080
   } else {
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 18082
    break;
   }
  }
 } while (0);
 $84 = $1 + 12 | 0; //@line 18087
 HEAP32[$1 >> 2] = 487; //@line 18088
 HEAP32[$1 + 4 >> 2] = 0; //@line 18090
 HEAP32[$1 + 8 >> 2] = $0; //@line 18092
 HEAP32[$84 >> 2] = 912; //@line 18093
 $85 = $0 + 1276 | 0; //@line 18094
 do {
  if (($85 | 0) == ($1 | 0)) {
   $114 = 912; //@line 18098
   label = 34; //@line 18099
  } else {
   $87 = $0 + 1288 | 0; //@line 18101
   $88 = HEAP32[$87 >> 2] | 0; //@line 18102
   if (!$88) {
    $102 = 912; //@line 18105
   } else {
    $91 = HEAP32[$88 + 8 >> 2] | 0; //@line 18108
    $AsyncCtx17 = _emscripten_alloc_async_context(36, sp) | 0; //@line 18109
    FUNCTION_TABLE_vi[$91 & 1023]($85); //@line 18110
    if (___async) {
     HEAP32[$AsyncCtx17 >> 2] = 488; //@line 18113
     HEAP32[$AsyncCtx17 + 4 >> 2] = $1; //@line 18115
     HEAP32[$AsyncCtx17 + 8 >> 2] = $0; //@line 18117
     HEAP32[$AsyncCtx17 + 12 >> 2] = $3; //@line 18119
     HEAP32[$AsyncCtx17 + 16 >> 2] = $84; //@line 18121
     HEAP32[$AsyncCtx17 + 20 >> 2] = $85; //@line 18123
     HEAP32[$AsyncCtx17 + 24 >> 2] = $1; //@line 18125
     HEAP32[$AsyncCtx17 + 28 >> 2] = $1; //@line 18127
     HEAP32[$AsyncCtx17 + 32 >> 2] = $87; //@line 18129
     sp = STACKTOP; //@line 18130
     STACKTOP = sp; //@line 18131
     return 0; //@line 18131
    }
    _emscripten_free_async_context($AsyncCtx17 | 0); //@line 18133
    $$pre120 = HEAP32[$84 >> 2] | 0; //@line 18134
    if (!$$pre120) {
     HEAP32[$87 >> 2] = 0; //@line 18137
     break;
    } else {
     $102 = $$pre120; //@line 18140
    }
   }
   $103 = HEAP32[$102 + 4 >> 2] | 0; //@line 18144
   $AsyncCtx20 = _emscripten_alloc_async_context(32, sp) | 0; //@line 18145
   FUNCTION_TABLE_vii[$103 & 31]($85, $1); //@line 18146
   if (___async) {
    HEAP32[$AsyncCtx20 >> 2] = 489; //@line 18149
    HEAP32[$AsyncCtx20 + 4 >> 2] = $1; //@line 18151
    HEAP32[$AsyncCtx20 + 8 >> 2] = $0; //@line 18153
    HEAP32[$AsyncCtx20 + 12 >> 2] = $3; //@line 18155
    HEAP32[$AsyncCtx20 + 16 >> 2] = $1; //@line 18157
    HEAP32[$AsyncCtx20 + 20 >> 2] = $1; //@line 18159
    HEAP32[$AsyncCtx20 + 24 >> 2] = $84; //@line 18161
    HEAP32[$AsyncCtx20 + 28 >> 2] = $87; //@line 18163
    sp = STACKTOP; //@line 18164
    STACKTOP = sp; //@line 18165
    return 0; //@line 18165
   } else {
    _emscripten_free_async_context($AsyncCtx20 | 0); //@line 18167
    $$pre$i$i34 = HEAP32[$84 >> 2] | 0; //@line 18168
    HEAP32[$87 >> 2] = $$pre$i$i34; //@line 18170
    if (!$$pre$i$i34) {
     break;
    } else {
     $114 = $$pre$i$i34; //@line 18175
     label = 34; //@line 18176
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 34) {
   $115 = HEAP32[$114 + 8 >> 2] | 0; //@line 18185
   $AsyncCtx23 = _emscripten_alloc_async_context(24, sp) | 0; //@line 18186
   FUNCTION_TABLE_vi[$115 & 1023]($1); //@line 18187
   if (___async) {
    HEAP32[$AsyncCtx23 >> 2] = 490; //@line 18190
    HEAP32[$AsyncCtx23 + 4 >> 2] = $1; //@line 18192
    HEAP32[$AsyncCtx23 + 8 >> 2] = $0; //@line 18194
    HEAP32[$AsyncCtx23 + 12 >> 2] = $3; //@line 18196
    HEAP32[$AsyncCtx23 + 16 >> 2] = $1; //@line 18198
    HEAP32[$AsyncCtx23 + 20 >> 2] = $1; //@line 18200
    sp = STACKTOP; //@line 18201
    STACKTOP = sp; //@line 18202
    return 0; //@line 18202
   } else {
    _emscripten_free_async_context($AsyncCtx23 | 0); //@line 18204
    break;
   }
  }
 } while (0);
 $121 = $1 + 12 | 0; //@line 18209
 HEAP32[$1 >> 2] = 491; //@line 18210
 HEAP32[$1 + 4 >> 2] = 0; //@line 18212
 HEAP32[$1 + 8 >> 2] = $0; //@line 18214
 HEAP32[$121 >> 2] = 912; //@line 18215
 $122 = $0 + 1228 | 0; //@line 18216
 do {
  if (($122 | 0) == ($1 | 0)) {
   $149 = 912; //@line 18220
   label = 46; //@line 18221
  } else {
   $124 = $0 + 1240 | 0; //@line 18223
   $125 = HEAP32[$124 >> 2] | 0; //@line 18224
   if (!$125) {
    $138 = 912; //@line 18227
   } else {
    $128 = HEAP32[$125 + 8 >> 2] | 0; //@line 18230
    $AsyncCtx26 = _emscripten_alloc_async_context(32, sp) | 0; //@line 18231
    FUNCTION_TABLE_vi[$128 & 1023]($122); //@line 18232
    if (___async) {
     HEAP32[$AsyncCtx26 >> 2] = 492; //@line 18235
     HEAP32[$AsyncCtx26 + 4 >> 2] = $122; //@line 18237
     HEAP32[$AsyncCtx26 + 8 >> 2] = $1; //@line 18239
     HEAP32[$AsyncCtx26 + 12 >> 2] = $1; //@line 18241
     HEAP32[$AsyncCtx26 + 16 >> 2] = $0; //@line 18243
     HEAP32[$AsyncCtx26 + 20 >> 2] = $124; //@line 18245
     HEAP32[$AsyncCtx26 + 24 >> 2] = $121; //@line 18247
     HEAP32[$AsyncCtx26 + 28 >> 2] = $3; //@line 18249
     sp = STACKTOP; //@line 18250
     STACKTOP = sp; //@line 18251
     return 0; //@line 18251
    }
    _emscripten_free_async_context($AsyncCtx26 | 0); //@line 18253
    $$pre121 = HEAP32[$121 >> 2] | 0; //@line 18254
    if (!$$pre121) {
     HEAP32[$124 >> 2] = 0; //@line 18257
     break;
    } else {
     $138 = $$pre121; //@line 18260
    }
   }
   $139 = HEAP32[$138 + 4 >> 2] | 0; //@line 18264
   $AsyncCtx29 = _emscripten_alloc_async_context(28, sp) | 0; //@line 18265
   FUNCTION_TABLE_vii[$139 & 31]($122, $1); //@line 18266
   if (___async) {
    HEAP32[$AsyncCtx29 >> 2] = 493; //@line 18269
    HEAP32[$AsyncCtx29 + 4 >> 2] = $1; //@line 18271
    HEAP32[$AsyncCtx29 + 8 >> 2] = $1; //@line 18273
    HEAP32[$AsyncCtx29 + 12 >> 2] = $0; //@line 18275
    HEAP32[$AsyncCtx29 + 16 >> 2] = $121; //@line 18277
    HEAP32[$AsyncCtx29 + 20 >> 2] = $124; //@line 18279
    HEAP32[$AsyncCtx29 + 24 >> 2] = $3; //@line 18281
    sp = STACKTOP; //@line 18282
    STACKTOP = sp; //@line 18283
    return 0; //@line 18283
   } else {
    _emscripten_free_async_context($AsyncCtx29 | 0); //@line 18285
    $$pre$i$i50 = HEAP32[$121 >> 2] | 0; //@line 18286
    HEAP32[$124 >> 2] = $$pre$i$i50; //@line 18288
    if (!$$pre$i$i50) {
     break;
    } else {
     $149 = $$pre$i$i50; //@line 18293
     label = 46; //@line 18294
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 46) {
   $150 = HEAP32[$149 + 8 >> 2] | 0; //@line 18303
   $AsyncCtx32 = _emscripten_alloc_async_context(20, sp) | 0; //@line 18304
   FUNCTION_TABLE_vi[$150 & 1023]($1); //@line 18305
   if (___async) {
    HEAP32[$AsyncCtx32 >> 2] = 494; //@line 18308
    HEAP32[$AsyncCtx32 + 4 >> 2] = $1; //@line 18310
    HEAP32[$AsyncCtx32 + 8 >> 2] = $1; //@line 18312
    HEAP32[$AsyncCtx32 + 12 >> 2] = $0; //@line 18314
    HEAP32[$AsyncCtx32 + 16 >> 2] = $3; //@line 18316
    sp = STACKTOP; //@line 18317
    STACKTOP = sp; //@line 18318
    return 0; //@line 18318
   } else {
    _emscripten_free_async_context($AsyncCtx32 | 0); //@line 18320
    break;
   }
  }
 } while (0);
 $155 = $1 + 12 | 0; //@line 18325
 HEAP32[$1 >> 2] = 495; //@line 18326
 HEAP32[$1 + 4 >> 2] = 0; //@line 18328
 HEAP32[$1 + 8 >> 2] = $0; //@line 18330
 HEAP32[$155 >> 2] = 912; //@line 18331
 $156 = $0 + 1260 | 0; //@line 18332
 if (($156 | 0) == ($1 | 0)) {
  $179 = 912; //@line 18335
 } else {
  $158 = $0 + 1272 | 0; //@line 18337
  $159 = HEAP32[$158 >> 2] | 0; //@line 18338
  if (!$159) {
   $170 = 912; //@line 18341
  } else {
   $162 = HEAP32[$159 + 8 >> 2] | 0; //@line 18344
   $AsyncCtx35 = _emscripten_alloc_async_context(24, sp) | 0; //@line 18345
   FUNCTION_TABLE_vi[$162 & 1023]($156); //@line 18346
   if (___async) {
    HEAP32[$AsyncCtx35 >> 2] = 496; //@line 18349
    HEAP32[$AsyncCtx35 + 4 >> 2] = $155; //@line 18351
    HEAP32[$AsyncCtx35 + 8 >> 2] = $158; //@line 18353
    HEAP32[$AsyncCtx35 + 12 >> 2] = $156; //@line 18355
    HEAP32[$AsyncCtx35 + 16 >> 2] = $1; //@line 18357
    HEAP32[$AsyncCtx35 + 20 >> 2] = $3; //@line 18359
    sp = STACKTOP; //@line 18360
    STACKTOP = sp; //@line 18361
    return 0; //@line 18361
   }
   _emscripten_free_async_context($AsyncCtx35 | 0); //@line 18363
   $$pre122 = HEAP32[$155 >> 2] | 0; //@line 18364
   if (!$$pre122) {
    HEAP32[$158 >> 2] = 0; //@line 18367
    STACKTOP = sp; //@line 18368
    return $3 | 0; //@line 18368
   } else {
    $170 = $$pre122; //@line 18370
   }
  }
  $171 = HEAP32[$170 + 4 >> 2] | 0; //@line 18374
  $AsyncCtx38 = _emscripten_alloc_async_context(20, sp) | 0; //@line 18375
  FUNCTION_TABLE_vii[$171 & 31]($156, $1); //@line 18376
  if (___async) {
   HEAP32[$AsyncCtx38 >> 2] = 497; //@line 18379
   HEAP32[$AsyncCtx38 + 4 >> 2] = $155; //@line 18381
   HEAP32[$AsyncCtx38 + 8 >> 2] = $158; //@line 18383
   HEAP32[$AsyncCtx38 + 12 >> 2] = $1; //@line 18385
   HEAP32[$AsyncCtx38 + 16 >> 2] = $3; //@line 18387
   sp = STACKTOP; //@line 18388
   STACKTOP = sp; //@line 18389
   return 0; //@line 18389
  }
  _emscripten_free_async_context($AsyncCtx38 | 0); //@line 18391
  $$pre$i$i66 = HEAP32[$155 >> 2] | 0; //@line 18392
  HEAP32[$158 >> 2] = $$pre$i$i66; //@line 18394
  if (!$$pre$i$i66) {
   STACKTOP = sp; //@line 18397
   return $3 | 0; //@line 18397
  } else {
   $179 = $$pre$i$i66; //@line 18399
  }
 }
 $180 = HEAP32[$179 + 8 >> 2] | 0; //@line 18403
 $AsyncCtx41 = _emscripten_alloc_async_context(12, sp) | 0; //@line 18404
 FUNCTION_TABLE_vi[$180 & 1023]($1); //@line 18405
 if (___async) {
  HEAP32[$AsyncCtx41 >> 2] = 498; //@line 18408
  HEAP32[$AsyncCtx41 + 4 >> 2] = $1; //@line 18410
  HEAP32[$AsyncCtx41 + 8 >> 2] = $3; //@line 18412
  sp = STACKTOP; //@line 18413
  STACKTOP = sp; //@line 18414
  return 0; //@line 18414
 }
 _emscripten_free_async_context($AsyncCtx41 | 0); //@line 18416
 STACKTOP = sp; //@line 18417
 return $3 | 0; //@line 18417
}
function _mbed_vtracef__async_cb($0) {
 $0 = $0 | 0;
 var $$ = 0, $$0$i = 0, $$0141 = 0, $$0142 = 0, $$0144 = 0, $$1$off0 = 0, $$1$off0$expand_i1_val = 0, $$1$off0$expand_i1_val18 = 0, $$1143 = 0, $$1145 = 0, $$1152 = 0, $$1152$ = 0, $$3154 = 0, $$5156 = 0, $$5156$ = 0, $$expand_i1_val = 0, $$lobit = 0, $$sink = 0, $10 = 0, $102 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $136 = 0, $14 = 0, $147 = 0, $148 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $163 = 0, $164 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $53 = 0, $57 = 0, $6 = 0, $62 = 0, $73 = 0, $74 = 0, $78 = 0, $79 = 0, $8 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $89 = 0, $91 = 0, $95 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $extract$t159 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 25004
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25006
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25008
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25010
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25012
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25014
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25016
 $14 = HEAP8[$0 + 28 >> 0] | 0; //@line 25018
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 25020
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 25022
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 25024
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 25026
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 25028
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 25030
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 25032
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 25034
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 25036
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 25038
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 25042
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 25044
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 25046
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 25048
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 25050
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 25052
 HEAP32[194] = (HEAP32[194] | 0) + 1; //@line 25057
 $53 = HEAP32[183] | 0; //@line 25058
 do {
  if ($53 | 0) {
   HEAP8[$53 >> 0] = 0; //@line 25062
   do {
    if ($14 << 24 >> 24 > -1 & ($12 | 0) != 0) {
     $57 = HEAP32[180] | 0; //@line 25068
     if (HEAP8[$57 >> 0] | 0) {
      if (_strstr($57, $12) | 0) {
       $$0$i = 1; //@line 25075
       break;
      }
     }
     $62 = HEAP32[181] | 0; //@line 25079
     if (!(HEAP8[$62 >> 0] | 0)) {
      label = 9; //@line 25083
     } else {
      if (!(_strstr($62, $12) | 0)) {
       $$0$i = 1; //@line 25088
      } else {
       label = 9; //@line 25090
      }
     }
    } else {
     label = 9; //@line 25094
    }
   } while (0);
   if ((label | 0) == 9) {
    $$0$i = 0; //@line 25098
   }
   if (!((HEAP32[190] | 0) != 0 & ((($12 | 0) == 0 | (($10 | 0) == 0 | $$0$i)) ^ 1))) {
    HEAP32[187] = HEAP32[185]; //@line 25110
    break;
   }
   $73 = HEAPU8[716] | 0; //@line 25114
   $74 = $14 & 255; //@line 25115
   if ($74 & 31 & $73 | 0) {
    $78 = $73 & 64; //@line 25120
    $$lobit = $78 >>> 6; //@line 25121
    $79 = $$lobit & 255; //@line 25122
    $83 = ($73 & 32 | 0) == 0; //@line 25126
    $84 = HEAP32[184] | 0; //@line 25127
    $85 = HEAP32[183] | 0; //@line 25128
    $86 = $14 << 24 >> 24 == 1; //@line 25129
    if ($86 | ($73 & 128 | 0) != 0) {
     $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 25132
     _vsnprintf($85, $84, $10, $16) | 0; //@line 25133
     if (___async) {
      HEAP32[$ReallocAsyncCtx12 >> 2] = 140; //@line 25136
      $87 = $ReallocAsyncCtx12 + 4 | 0; //@line 25137
      $$expand_i1_val = $86 & 1; //@line 25138
      HEAP8[$87 >> 0] = $$expand_i1_val; //@line 25139
      sp = STACKTOP; //@line 25140
      return;
     }
     ___async_unwind = 0; //@line 25143
     HEAP32[$ReallocAsyncCtx12 >> 2] = 140; //@line 25144
     $87 = $ReallocAsyncCtx12 + 4 | 0; //@line 25145
     $$expand_i1_val = $86 & 1; //@line 25146
     HEAP8[$87 >> 0] = $$expand_i1_val; //@line 25147
     sp = STACKTOP; //@line 25148
     return;
    }
    if (!$78) {
     $$1$off0 = ($$lobit | 0) != 0; //@line 25154
     $$1143 = $85; //@line 25154
     $$1145 = $84; //@line 25154
     $$3154 = 0; //@line 25154
     label = 28; //@line 25155
    } else {
     if ($83) {
      $$0142 = $85; //@line 25158
      $$0144 = $84; //@line 25158
     } else {
      $89 = _snprintf($85, $84, 12210, $48) | 0; //@line 25160
      $$ = ($89 | 0) >= ($84 | 0) ? 0 : $89; //@line 25162
      $91 = ($$ | 0) > 0; //@line 25163
      $$0142 = $91 ? $85 + $$ | 0 : $85; //@line 25168
      $$0144 = $84 - ($91 ? $$ : 0) | 0; //@line 25168
     }
     if (($$0144 | 0) > 0) {
      $95 = $74 + -2 | 0; //@line 25172
      switch ($95 >>> 1 | $95 << 31 | 0) {
      case 0:
       {
        $$sink = 12228; //@line 25178
        label = 25; //@line 25179
        break;
       }
      case 1:
       {
        $$sink = 12234; //@line 25183
        label = 25; //@line 25184
        break;
       }
      case 3:
       {
        $$sink = 12222; //@line 25188
        label = 25; //@line 25189
        break;
       }
      case 7:
       {
        $$sink = 12216; //@line 25193
        label = 25; //@line 25194
        break;
       }
      default:
       {
        $$0141 = 0; //@line 25198
        $$1152 = 0; //@line 25198
       }
      }
      if ((label | 0) == 25) {
       HEAP32[$34 >> 2] = $$sink; //@line 25202
       $$0141 = $79 & 1; //@line 25205
       $$1152 = _snprintf($$0142, $$0144, 12240, $34) | 0; //@line 25205
      }
      $$1152$ = ($$1152 | 0) < ($$0144 | 0) ? $$1152 : 0; //@line 25208
      $extract$t159 = $$0141 << 24 >> 24 != 0; //@line 25210
      if (($$1152$ | 0) > 0) {
       $102 = $$0141 << 24 >> 24 == 0; //@line 25212
       $$1$off0 = $extract$t159; //@line 25217
       $$1143 = $102 ? $$0142 : $$0142 + $$1152$ | 0; //@line 25217
       $$1145 = $$0144 - ($102 ? 0 : $$1152$) | 0; //@line 25217
       $$3154 = $$1152; //@line 25217
       label = 28; //@line 25218
      } else {
       $$1$off0 = $extract$t159; //@line 25220
       $$1143 = $$0142; //@line 25220
       $$1145 = $$0144; //@line 25220
       $$3154 = $$1152$; //@line 25220
       label = 28; //@line 25221
      }
     }
    }
    if ((label | 0) == 28) {
     if (($$1145 | 0) > 0 & (HEAP32[188] | 0) != 0) {
      HEAP32[$38 >> 2] = HEAP32[$16 >> 2]; //@line 25232
      $ReallocAsyncCtx11 = _emscripten_realloc_async_context(104) | 0; //@line 25233
      $108 = _vsnprintf(0, 0, $10, $38) | 0; //@line 25234
      if (___async) {
       HEAP32[$ReallocAsyncCtx11 >> 2] = 144; //@line 25237
       $109 = $ReallocAsyncCtx11 + 4 | 0; //@line 25238
       HEAP32[$109 >> 2] = $2; //@line 25239
       $110 = $ReallocAsyncCtx11 + 8 | 0; //@line 25240
       HEAP32[$110 >> 2] = $4; //@line 25241
       $111 = $ReallocAsyncCtx11 + 12 | 0; //@line 25242
       HEAP32[$111 >> 2] = $6; //@line 25243
       $112 = $ReallocAsyncCtx11 + 16 | 0; //@line 25244
       HEAP32[$112 >> 2] = $$1143; //@line 25245
       $113 = $ReallocAsyncCtx11 + 20 | 0; //@line 25246
       HEAP32[$113 >> 2] = $$1145; //@line 25247
       $114 = $ReallocAsyncCtx11 + 24 | 0; //@line 25248
       HEAP32[$114 >> 2] = $8; //@line 25249
       $115 = $ReallocAsyncCtx11 + 28 | 0; //@line 25250
       HEAP32[$115 >> 2] = $38; //@line 25251
       $116 = $ReallocAsyncCtx11 + 32 | 0; //@line 25252
       $$1$off0$expand_i1_val = $$1$off0 & 1; //@line 25253
       HEAP8[$116 >> 0] = $$1$off0$expand_i1_val; //@line 25254
       $117 = $ReallocAsyncCtx11 + 36 | 0; //@line 25255
       HEAP32[$117 >> 2] = $40; //@line 25256
       $118 = $ReallocAsyncCtx11 + 40 | 0; //@line 25257
       HEAP32[$118 >> 2] = $42; //@line 25258
       $119 = $ReallocAsyncCtx11 + 44 | 0; //@line 25259
       HEAP32[$119 >> 2] = $18; //@line 25260
       $120 = $ReallocAsyncCtx11 + 48 | 0; //@line 25261
       HEAP32[$120 >> 2] = $12; //@line 25262
       $121 = $ReallocAsyncCtx11 + 52 | 0; //@line 25263
       HEAP32[$121 >> 2] = $20; //@line 25264
       $122 = $ReallocAsyncCtx11 + 56 | 0; //@line 25265
       HEAP32[$122 >> 2] = $22; //@line 25266
       $123 = $ReallocAsyncCtx11 + 60 | 0; //@line 25267
       HEAP32[$123 >> 2] = $24; //@line 25268
       $124 = $ReallocAsyncCtx11 + 64 | 0; //@line 25269
       HEAP32[$124 >> 2] = $26; //@line 25270
       $125 = $ReallocAsyncCtx11 + 68 | 0; //@line 25271
       HEAP32[$125 >> 2] = $28; //@line 25272
       $126 = $ReallocAsyncCtx11 + 72 | 0; //@line 25273
       HEAP32[$126 >> 2] = $30; //@line 25274
       $127 = $ReallocAsyncCtx11 + 76 | 0; //@line 25275
       HEAP32[$127 >> 2] = $32; //@line 25276
       $128 = $ReallocAsyncCtx11 + 80 | 0; //@line 25277
       HEAP32[$128 >> 2] = $$3154; //@line 25278
       $129 = $ReallocAsyncCtx11 + 84 | 0; //@line 25279
       HEAP32[$129 >> 2] = $10; //@line 25280
       $130 = $ReallocAsyncCtx11 + 88 | 0; //@line 25281
       HEAP32[$130 >> 2] = $16; //@line 25282
       $131 = $ReallocAsyncCtx11 + 92 | 0; //@line 25283
       HEAP32[$131 >> 2] = $74; //@line 25284
       $132 = $ReallocAsyncCtx11 + 96 | 0; //@line 25285
       HEAP32[$132 >> 2] = $44; //@line 25286
       $133 = $ReallocAsyncCtx11 + 100 | 0; //@line 25287
       HEAP32[$133 >> 2] = $46; //@line 25288
       sp = STACKTOP; //@line 25289
       return;
      }
      HEAP32[___async_retval >> 2] = $108; //@line 25293
      ___async_unwind = 0; //@line 25294
      HEAP32[$ReallocAsyncCtx11 >> 2] = 144; //@line 25295
      $109 = $ReallocAsyncCtx11 + 4 | 0; //@line 25296
      HEAP32[$109 >> 2] = $2; //@line 25297
      $110 = $ReallocAsyncCtx11 + 8 | 0; //@line 25298
      HEAP32[$110 >> 2] = $4; //@line 25299
      $111 = $ReallocAsyncCtx11 + 12 | 0; //@line 25300
      HEAP32[$111 >> 2] = $6; //@line 25301
      $112 = $ReallocAsyncCtx11 + 16 | 0; //@line 25302
      HEAP32[$112 >> 2] = $$1143; //@line 25303
      $113 = $ReallocAsyncCtx11 + 20 | 0; //@line 25304
      HEAP32[$113 >> 2] = $$1145; //@line 25305
      $114 = $ReallocAsyncCtx11 + 24 | 0; //@line 25306
      HEAP32[$114 >> 2] = $8; //@line 25307
      $115 = $ReallocAsyncCtx11 + 28 | 0; //@line 25308
      HEAP32[$115 >> 2] = $38; //@line 25309
      $116 = $ReallocAsyncCtx11 + 32 | 0; //@line 25310
      $$1$off0$expand_i1_val = $$1$off0 & 1; //@line 25311
      HEAP8[$116 >> 0] = $$1$off0$expand_i1_val; //@line 25312
      $117 = $ReallocAsyncCtx11 + 36 | 0; //@line 25313
      HEAP32[$117 >> 2] = $40; //@line 25314
      $118 = $ReallocAsyncCtx11 + 40 | 0; //@line 25315
      HEAP32[$118 >> 2] = $42; //@line 25316
      $119 = $ReallocAsyncCtx11 + 44 | 0; //@line 25317
      HEAP32[$119 >> 2] = $18; //@line 25318
      $120 = $ReallocAsyncCtx11 + 48 | 0; //@line 25319
      HEAP32[$120 >> 2] = $12; //@line 25320
      $121 = $ReallocAsyncCtx11 + 52 | 0; //@line 25321
      HEAP32[$121 >> 2] = $20; //@line 25322
      $122 = $ReallocAsyncCtx11 + 56 | 0; //@line 25323
      HEAP32[$122 >> 2] = $22; //@line 25324
      $123 = $ReallocAsyncCtx11 + 60 | 0; //@line 25325
      HEAP32[$123 >> 2] = $24; //@line 25326
      $124 = $ReallocAsyncCtx11 + 64 | 0; //@line 25327
      HEAP32[$124 >> 2] = $26; //@line 25328
      $125 = $ReallocAsyncCtx11 + 68 | 0; //@line 25329
      HEAP32[$125 >> 2] = $28; //@line 25330
      $126 = $ReallocAsyncCtx11 + 72 | 0; //@line 25331
      HEAP32[$126 >> 2] = $30; //@line 25332
      $127 = $ReallocAsyncCtx11 + 76 | 0; //@line 25333
      HEAP32[$127 >> 2] = $32; //@line 25334
      $128 = $ReallocAsyncCtx11 + 80 | 0; //@line 25335
      HEAP32[$128 >> 2] = $$3154; //@line 25336
      $129 = $ReallocAsyncCtx11 + 84 | 0; //@line 25337
      HEAP32[$129 >> 2] = $10; //@line 25338
      $130 = $ReallocAsyncCtx11 + 88 | 0; //@line 25339
      HEAP32[$130 >> 2] = $16; //@line 25340
      $131 = $ReallocAsyncCtx11 + 92 | 0; //@line 25341
      HEAP32[$131 >> 2] = $74; //@line 25342
      $132 = $ReallocAsyncCtx11 + 96 | 0; //@line 25343
      HEAP32[$132 >> 2] = $44; //@line 25344
      $133 = $ReallocAsyncCtx11 + 100 | 0; //@line 25345
      HEAP32[$133 >> 2] = $46; //@line 25346
      sp = STACKTOP; //@line 25347
      return;
     }
     if (($$1145 | 0) > 0) {
      $136 = $74 + -2 | 0; //@line 25352
      switch ($136 >>> 1 | $136 << 31 | 0) {
      case 0:
       {
        HEAP32[$44 >> 2] = $12; //@line 25358
        $$5156 = _snprintf($$1143, $$1145, 12243, $44) | 0; //@line 25360
        break;
       }
      case 1:
       {
        HEAP32[$22 >> 2] = $12; //@line 25364
        $$5156 = _snprintf($$1143, $$1145, 12258, $22) | 0; //@line 25366
        break;
       }
      case 3:
       {
        HEAP32[$18 >> 2] = $12; //@line 25370
        $$5156 = _snprintf($$1143, $$1145, 12273, $18) | 0; //@line 25372
        break;
       }
      case 7:
       {
        HEAP32[$30 >> 2] = $12; //@line 25376
        $$5156 = _snprintf($$1143, $$1145, 12288, $30) | 0; //@line 25378
        break;
       }
      default:
       {
        $$5156 = _snprintf($$1143, $$1145, 12303, $26) | 0; //@line 25383
       }
      }
      $$5156$ = ($$5156 | 0) < ($$1145 | 0) ? $$5156 : 0; //@line 25387
      $147 = $$1143 + $$5156$ | 0; //@line 25389
      $148 = $$1145 - $$5156$ | 0; //@line 25390
      if (($$5156$ | 0) > 0 & ($148 | 0) > 0) {
       $ReallocAsyncCtx10 = _emscripten_realloc_async_context(32) | 0; //@line 25394
       $150 = _vsnprintf($147, $148, $10, $16) | 0; //@line 25395
       if (___async) {
        HEAP32[$ReallocAsyncCtx10 >> 2] = 146; //@line 25398
        $151 = $ReallocAsyncCtx10 + 4 | 0; //@line 25399
        HEAP32[$151 >> 2] = $2; //@line 25400
        $152 = $ReallocAsyncCtx10 + 8 | 0; //@line 25401
        HEAP32[$152 >> 2] = $4; //@line 25402
        $153 = $ReallocAsyncCtx10 + 12 | 0; //@line 25403
        $$1$off0$expand_i1_val18 = $$1$off0 & 1; //@line 25404
        HEAP8[$153 >> 0] = $$1$off0$expand_i1_val18; //@line 25405
        $154 = $ReallocAsyncCtx10 + 16 | 0; //@line 25406
        HEAP32[$154 >> 2] = $40; //@line 25407
        $155 = $ReallocAsyncCtx10 + 20 | 0; //@line 25408
        HEAP32[$155 >> 2] = $42; //@line 25409
        $156 = $ReallocAsyncCtx10 + 24 | 0; //@line 25410
        HEAP32[$156 >> 2] = $148; //@line 25411
        $157 = $ReallocAsyncCtx10 + 28 | 0; //@line 25412
        HEAP32[$157 >> 2] = $147; //@line 25413
        sp = STACKTOP; //@line 25414
        return;
       }
       HEAP32[___async_retval >> 2] = $150; //@line 25418
       ___async_unwind = 0; //@line 25419
       HEAP32[$ReallocAsyncCtx10 >> 2] = 146; //@line 25420
       $151 = $ReallocAsyncCtx10 + 4 | 0; //@line 25421
       HEAP32[$151 >> 2] = $2; //@line 25422
       $152 = $ReallocAsyncCtx10 + 8 | 0; //@line 25423
       HEAP32[$152 >> 2] = $4; //@line 25424
       $153 = $ReallocAsyncCtx10 + 12 | 0; //@line 25425
       $$1$off0$expand_i1_val18 = $$1$off0 & 1; //@line 25426
       HEAP8[$153 >> 0] = $$1$off0$expand_i1_val18; //@line 25427
       $154 = $ReallocAsyncCtx10 + 16 | 0; //@line 25428
       HEAP32[$154 >> 2] = $40; //@line 25429
       $155 = $ReallocAsyncCtx10 + 20 | 0; //@line 25430
       HEAP32[$155 >> 2] = $42; //@line 25431
       $156 = $ReallocAsyncCtx10 + 24 | 0; //@line 25432
       HEAP32[$156 >> 2] = $148; //@line 25433
       $157 = $ReallocAsyncCtx10 + 28 | 0; //@line 25434
       HEAP32[$157 >> 2] = $147; //@line 25435
       sp = STACKTOP; //@line 25436
       return;
      }
     }
    }
    $159 = HEAP32[190] | 0; //@line 25441
    $160 = HEAP32[183] | 0; //@line 25442
    $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 25443
    FUNCTION_TABLE_vi[$159 & 1023]($160); //@line 25444
    if (___async) {
     HEAP32[$ReallocAsyncCtx7 >> 2] = 148; //@line 25447
     sp = STACKTOP; //@line 25448
     return;
    }
    ___async_unwind = 0; //@line 25451
    HEAP32[$ReallocAsyncCtx7 >> 2] = 148; //@line 25452
    sp = STACKTOP; //@line 25453
    return;
   }
  }
 } while (0);
 $161 = HEAP32[193] | 0; //@line 25458
 if (!$161) {
  return;
 }
 $163 = HEAP32[194] | 0; //@line 25463
 HEAP32[194] = 0; //@line 25464
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 25465
 FUNCTION_TABLE_v[$161 & 15](); //@line 25466
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 149; //@line 25469
  $164 = $ReallocAsyncCtx8 + 4 | 0; //@line 25470
  HEAP32[$164 >> 2] = $163; //@line 25471
  sp = STACKTOP; //@line 25472
  return;
 }
 ___async_unwind = 0; //@line 25475
 HEAP32[$ReallocAsyncCtx8 >> 2] = 149; //@line 25476
 $164 = $ReallocAsyncCtx8 + 4 | 0; //@line 25477
 HEAP32[$164 >> 2] = $163; //@line 25478
 sp = STACKTOP; //@line 25479
 return;
}
function _mbedtls_cipher_cmac_finish($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$013$i = 0, $$01720$i55 = 0, $$019$i = 0, $$019$i52 = 0, $$021$i54 = 0, $$09$i = 0, $$09$i41 = 0, $$09$i45 = 0, $$sink$sink$i = 0, $12 = 0, $129 = 0, $132 = 0, $145 = 0, $148 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $170 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $185 = 0, $19 = 0, $2 = 0, $20 = 0, $202 = 0, $206 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $64 = 0, $65 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, label = 0, sp = 0, $156$looptemp = 0;
 sp = STACKTOP; //@line 3524
 STACKTOP = STACKTOP + 80 | 0; //@line 3525
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80); //@line 3525
 $2 = sp + 56 | 0; //@line 3526
 $3 = sp + 4 | 0; //@line 3527
 $4 = sp + 40 | 0; //@line 3528
 $5 = sp + 24 | 0; //@line 3529
 $6 = sp + 8 | 0; //@line 3530
 $7 = sp; //@line 3531
 if (!$0) {
  $$0 = -24832; //@line 3534
  STACKTOP = sp; //@line 3535
  return $$0 | 0; //@line 3535
 }
 $9 = HEAP32[$0 >> 2] | 0; //@line 3537
 if (!$9) {
  $$0 = -24832; //@line 3540
  STACKTOP = sp; //@line 3541
  return $$0 | 0; //@line 3541
 }
 $12 = HEAP32[$0 + 64 >> 2] | 0; //@line 3544
 if (($1 | 0) == 0 | ($12 | 0) == 0) {
  $$0 = -24832; //@line 3549
  STACKTOP = sp; //@line 3550
  return $$0 | 0; //@line 3550
 }
 $16 = HEAP32[$9 + 24 >> 2] | 0; //@line 3553
 $17 = $4 + 1 | 0; //@line 3554
 HEAP8[$4 >> 0] = 0; //@line 3555
 $18 = $4 + 2 | 0; //@line 3556
 HEAP8[$17 >> 0] = 0; //@line 3557
 $19 = $4 + 3 | 0; //@line 3558
 HEAP8[$18 >> 0] = 0; //@line 3559
 $20 = $4 + 4 | 0; //@line 3560
 HEAP8[$19 >> 0] = 0; //@line 3561
 $21 = $4 + 5 | 0; //@line 3562
 HEAP8[$20 >> 0] = 0; //@line 3563
 $22 = $4 + 6 | 0; //@line 3564
 HEAP8[$21 >> 0] = 0; //@line 3565
 $23 = $4 + 7 | 0; //@line 3566
 HEAP8[$22 >> 0] = 0; //@line 3567
 $24 = $4 + 8 | 0; //@line 3568
 HEAP8[$23 >> 0] = 0; //@line 3569
 $25 = $4 + 9 | 0; //@line 3570
 HEAP8[$24 >> 0] = 0; //@line 3571
 $26 = $4 + 10 | 0; //@line 3572
 HEAP8[$25 >> 0] = 0; //@line 3573
 $27 = $4 + 11 | 0; //@line 3574
 HEAP8[$26 >> 0] = 0; //@line 3575
 $28 = $4 + 12 | 0; //@line 3576
 HEAP8[$27 >> 0] = 0; //@line 3577
 $29 = $4 + 13 | 0; //@line 3578
 HEAP8[$28 >> 0] = 0; //@line 3579
 $30 = $4 + 14 | 0; //@line 3580
 HEAP8[$29 >> 0] = 0; //@line 3581
 $31 = $4 + 15 | 0; //@line 3582
 HEAP8[$30 >> 0] = 0; //@line 3583
 HEAP8[$31 >> 0] = 0; //@line 3584
 $32 = $5 + 1 | 0; //@line 3585
 HEAP8[$5 >> 0] = 0; //@line 3586
 $33 = $5 + 2 | 0; //@line 3587
 HEAP8[$32 >> 0] = 0; //@line 3588
 $34 = $5 + 3 | 0; //@line 3589
 HEAP8[$33 >> 0] = 0; //@line 3590
 $35 = $5 + 4 | 0; //@line 3591
 HEAP8[$34 >> 0] = 0; //@line 3592
 $36 = $5 + 5 | 0; //@line 3593
 HEAP8[$35 >> 0] = 0; //@line 3594
 $37 = $5 + 6 | 0; //@line 3595
 HEAP8[$36 >> 0] = 0; //@line 3596
 $38 = $5 + 7 | 0; //@line 3597
 HEAP8[$37 >> 0] = 0; //@line 3598
 $39 = $5 + 8 | 0; //@line 3599
 HEAP8[$38 >> 0] = 0; //@line 3600
 $40 = $5 + 9 | 0; //@line 3601
 HEAP8[$39 >> 0] = 0; //@line 3602
 $41 = $5 + 10 | 0; //@line 3603
 HEAP8[$40 >> 0] = 0; //@line 3604
 $42 = $5 + 11 | 0; //@line 3605
 HEAP8[$41 >> 0] = 0; //@line 3606
 $43 = $5 + 12 | 0; //@line 3607
 HEAP8[$42 >> 0] = 0; //@line 3608
 $44 = $5 + 13 | 0; //@line 3609
 HEAP8[$43 >> 0] = 0; //@line 3610
 $45 = $5 + 14 | 0; //@line 3611
 HEAP8[$44 >> 0] = 0; //@line 3612
 $46 = $5 + 15 | 0; //@line 3613
 HEAP8[$45 >> 0] = 0; //@line 3614
 HEAP8[$46 >> 0] = 0; //@line 3615
 $47 = $2 + 1 | 0; //@line 3616
 HEAP8[$2 >> 0] = 0; //@line 3617
 $48 = $2 + 2 | 0; //@line 3618
 HEAP8[$47 >> 0] = 0; //@line 3619
 $49 = $2 + 3 | 0; //@line 3620
 HEAP8[$48 >> 0] = 0; //@line 3621
 $50 = $2 + 4 | 0; //@line 3622
 HEAP8[$49 >> 0] = 0; //@line 3623
 $51 = $2 + 5 | 0; //@line 3624
 HEAP8[$50 >> 0] = 0; //@line 3625
 $52 = $2 + 6 | 0; //@line 3626
 HEAP8[$51 >> 0] = 0; //@line 3627
 $53 = $2 + 7 | 0; //@line 3628
 HEAP8[$52 >> 0] = 0; //@line 3629
 $54 = $2 + 8 | 0; //@line 3630
 HEAP8[$53 >> 0] = 0; //@line 3631
 $55 = $2 + 9 | 0; //@line 3632
 HEAP8[$54 >> 0] = 0; //@line 3633
 $56 = $2 + 10 | 0; //@line 3634
 HEAP8[$55 >> 0] = 0; //@line 3635
 $57 = $2 + 11 | 0; //@line 3636
 HEAP8[$56 >> 0] = 0; //@line 3637
 $58 = $2 + 12 | 0; //@line 3638
 HEAP8[$57 >> 0] = 0; //@line 3639
 $59 = $2 + 13 | 0; //@line 3640
 HEAP8[$58 >> 0] = 0; //@line 3641
 $60 = $2 + 14 | 0; //@line 3642
 HEAP8[$59 >> 0] = 0; //@line 3643
 $61 = $2 + 15 | 0; //@line 3644
 HEAP8[$60 >> 0] = 0; //@line 3645
 HEAP8[$61 >> 0] = 0; //@line 3646
 $64 = HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] | 0; //@line 3649
 $AsyncCtx2 = _emscripten_alloc_async_context(252, sp) | 0; //@line 3650
 $65 = _mbedtls_cipher_update($0, $2, $64, $2, $3) | 0; //@line 3651
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 602; //@line 3654
  HEAP32[$AsyncCtx2 + 4 >> 2] = $31; //@line 3656
  HEAP32[$AsyncCtx2 + 8 >> 2] = $19; //@line 3658
  HEAP32[$AsyncCtx2 + 12 >> 2] = $22; //@line 3660
  HEAP32[$AsyncCtx2 + 16 >> 2] = $64; //@line 3662
  HEAP32[$AsyncCtx2 + 20 >> 2] = $25; //@line 3664
  HEAP32[$AsyncCtx2 + 24 >> 2] = $28; //@line 3666
  HEAP32[$AsyncCtx2 + 28 >> 2] = $37; //@line 3668
  HEAP32[$AsyncCtx2 + 32 >> 2] = $43; //@line 3670
  HEAP32[$AsyncCtx2 + 36 >> 2] = $2; //@line 3672
  HEAP32[$AsyncCtx2 + 40 >> 2] = $12; //@line 3674
  HEAP32[$AsyncCtx2 + 44 >> 2] = $51; //@line 3676
  HEAP32[$AsyncCtx2 + 48 >> 2] = $54; //@line 3678
  HEAP32[$AsyncCtx2 + 52 >> 2] = $46; //@line 3680
  HEAP32[$AsyncCtx2 + 56 >> 2] = $5; //@line 3682
  HEAP32[$AsyncCtx2 + 60 >> 2] = $34; //@line 3684
  HEAP32[$AsyncCtx2 + 64 >> 2] = $61; //@line 3686
  HEAP32[$AsyncCtx2 + 68 >> 2] = $49; //@line 3688
  HEAP32[$AsyncCtx2 + 72 >> 2] = $4; //@line 3690
  HEAP32[$AsyncCtx2 + 76 >> 2] = $32; //@line 3692
  HEAP32[$AsyncCtx2 + 80 >> 2] = $38; //@line 3694
  HEAP32[$AsyncCtx2 + 84 >> 2] = $52; //@line 3696
  HEAP32[$AsyncCtx2 + 88 >> 2] = $48; //@line 3698
  HEAP32[$AsyncCtx2 + 92 >> 2] = $17; //@line 3700
  HEAP32[$AsyncCtx2 + 96 >> 2] = $42; //@line 3702
  HEAP32[$AsyncCtx2 + 100 >> 2] = $21; //@line 3704
  HEAP32[$AsyncCtx2 + 104 >> 2] = $24; //@line 3706
  HEAP32[$AsyncCtx2 + 108 >> 2] = $4; //@line 3708
  HEAP32[$AsyncCtx2 + 112 >> 2] = $58; //@line 3710
  HEAP32[$AsyncCtx2 + 116 >> 2] = $16; //@line 3712
  HEAP32[$AsyncCtx2 + 120 >> 2] = $45; //@line 3714
  HEAP32[$AsyncCtx2 + 124 >> 2] = $35; //@line 3716
  HEAP32[$AsyncCtx2 + 128 >> 2] = $55; //@line 3718
  HEAP32[$AsyncCtx2 + 132 >> 2] = $0; //@line 3720
  HEAP32[$AsyncCtx2 + 136 >> 2] = $53; //@line 3722
  HEAP32[$AsyncCtx2 + 140 >> 2] = $7; //@line 3724
  HEAP32[$AsyncCtx2 + 144 >> 2] = $6; //@line 3726
  HEAP32[$AsyncCtx2 + 148 >> 2] = $5; //@line 3728
  HEAP32[$AsyncCtx2 + 152 >> 2] = $2; //@line 3730
  HEAP32[$AsyncCtx2 + 156 >> 2] = $59; //@line 3732
  HEAP32[$AsyncCtx2 + 160 >> 2] = $36; //@line 3734
  HEAP32[$AsyncCtx2 + 164 >> 2] = $27; //@line 3736
  HEAP32[$AsyncCtx2 + 168 >> 2] = $18; //@line 3738
  HEAP32[$AsyncCtx2 + 172 >> 2] = $39; //@line 3740
  HEAP32[$AsyncCtx2 + 176 >> 2] = $30; //@line 3742
  HEAP32[$AsyncCtx2 + 180 >> 2] = $20; //@line 3744
  HEAP32[$AsyncCtx2 + 184 >> 2] = $47; //@line 3746
  HEAP32[$AsyncCtx2 + 188 >> 2] = $56; //@line 3748
  HEAP32[$AsyncCtx2 + 192 >> 2] = $1; //@line 3750
  HEAP32[$AsyncCtx2 + 196 >> 2] = $41; //@line 3752
  HEAP32[$AsyncCtx2 + 200 >> 2] = $6; //@line 3754
  HEAP32[$AsyncCtx2 + 204 >> 2] = $23; //@line 3756
  HEAP32[$AsyncCtx2 + 208 >> 2] = $29; //@line 3758
  HEAP32[$AsyncCtx2 + 212 >> 2] = $44; //@line 3760
  HEAP32[$AsyncCtx2 + 216 >> 2] = $7; //@line 3762
  HEAP32[$AsyncCtx2 + 220 >> 2] = $33; //@line 3764
  HEAP32[$AsyncCtx2 + 224 >> 2] = $57; //@line 3766
  HEAP32[$AsyncCtx2 + 228 >> 2] = $26; //@line 3768
  HEAP32[$AsyncCtx2 + 232 >> 2] = $40; //@line 3770
  HEAP32[$AsyncCtx2 + 236 >> 2] = $50; //@line 3772
  HEAP32[$AsyncCtx2 + 240 >> 2] = $60; //@line 3774
  HEAP32[$AsyncCtx2 + 244 >> 2] = $12; //@line 3776
  HEAP32[$AsyncCtx2 + 248 >> 2] = $3; //@line 3778
  sp = STACKTOP; //@line 3779
  STACKTOP = sp; //@line 3780
  return 0; //@line 3780
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 3782
 L13 : do {
  if (!$65) {
   switch ($64 | 0) {
   case 16:
    {
     $$019$i52 = 135; //@line 3788
     break;
    }
   case 8:
    {
     $$019$i52 = 27; //@line 3792
     break;
    }
   default:
    {
     break L13;
    }
   }
   $129 = $64 + -1 | 0; //@line 3799
   $$01720$i55 = 0; //@line 3800
   $$021$i54 = $129; //@line 3800
   while (1) {
    $132 = HEAPU8[$2 + $$021$i54 >> 0] | 0; //@line 3804
    HEAP8[$4 + $$021$i54 >> 0] = $132 << 1 | $$01720$i55; //@line 3809
    if (($$021$i54 | 0) > 0) {
     $$01720$i55 = $132 >>> 7; //@line 3814
     $$021$i54 = $$021$i54 + -1 | 0; //@line 3814
    } else {
     break;
    }
   }
   $145 = $4 + $129 | 0; //@line 3824
   $148 = $$019$i52 & 0 - ((HEAPU8[$2 >> 0] | 0) >>> 7) ^ (HEAPU8[$145 >> 0] | 0); //@line 3827
   HEAP8[$145 >> 0] = $148; //@line 3829
   switch ($64 | 0) {
   case 16:
    {
     $$019$i = 135; //@line 3832
     break;
    }
   case 8:
    {
     $$019$i = 27; //@line 3836
     break;
    }
   default:
    {
     break L13;
    }
   }
   HEAP8[$5 + $129 >> 0] = $148 << 1; //@line 3846
   if (($129 | 0) > 0) {
    $156 = $148; //@line 3850
    $157 = $64 + -2 | 0; //@line 3850
    while (1) {
     $156$looptemp = $156;
     $156 = HEAPU8[$4 + $157 >> 0] | 0; //@line 3855
     HEAP8[$5 + $157 >> 0] = $156 << 1 | $156$looptemp >>> 7; //@line 3860
     if (($157 | 0) <= 0) {
      break;
     } else {
      $157 = $157 + -1 | 0; //@line 3864
     }
    }
   }
   $170 = $5 + $129 | 0; //@line 3875
   HEAP8[$170 >> 0] = $$019$i & 0 - ((HEAPU8[$4 >> 0] | 0) >>> 7) ^ (HEAPU8[$170 >> 0] | 0); //@line 3880
  }
 } while (0);
 HEAP8[$2 >> 0] = 0; //@line 3883
 HEAP8[$47 >> 0] = 0; //@line 3884
 HEAP8[$48 >> 0] = 0; //@line 3885
 HEAP8[$49 >> 0] = 0; //@line 3886
 HEAP8[$50 >> 0] = 0; //@line 3887
 HEAP8[$51 >> 0] = 0; //@line 3888
 HEAP8[$52 >> 0] = 0; //@line 3889
 HEAP8[$53 >> 0] = 0; //@line 3890
 HEAP8[$54 >> 0] = 0; //@line 3891
 HEAP8[$55 >> 0] = 0; //@line 3892
 HEAP8[$56 >> 0] = 0; //@line 3893
 HEAP8[$57 >> 0] = 0; //@line 3894
 HEAP8[$58 >> 0] = 0; //@line 3895
 HEAP8[$59 >> 0] = 0; //@line 3896
 HEAP8[$60 >> 0] = 0; //@line 3897
 HEAP8[$61 >> 0] = 0; //@line 3898
 $175 = $12 + 16 | 0; //@line 3899
 $176 = $12 + 32 | 0; //@line 3900
 $177 = HEAP32[$176 >> 2] | 0; //@line 3901
 if ($177 >>> 0 < $16 >>> 0) {
  $$013$i = 0; //@line 3904
  do {
   if ($$013$i >>> 0 < $177 >>> 0) {
    $$sink$sink$i = HEAP8[$12 + 16 + $$013$i >> 0] | 0; //@line 3910
   } else {
    $$sink$sink$i = ($$013$i | 0) == ($177 | 0) ? -128 : 0; //@line 3914
   }
   HEAP8[$6 + $$013$i >> 0] = $$sink$sink$i; //@line 3917
   $$013$i = $$013$i + 1 | 0; //@line 3918
  } while (($$013$i | 0) != ($16 | 0));
  $$09$i45 = 0; //@line 3921
  do {
   $185 = $6 + $$09$i45 | 0; //@line 3928
   HEAP8[$185 >> 0] = HEAP8[$5 + $$09$i45 >> 0] ^ HEAP8[$185 >> 0]; //@line 3933
   $$09$i45 = $$09$i45 + 1 | 0; //@line 3934
  } while (($$09$i45 | 0) != ($16 | 0));
  label = 25; //@line 3937
 } else {
  if ($16 | 0) {
   $$09$i41 = 0; //@line 3946
   do {
    HEAP8[$6 + $$09$i41 >> 0] = HEAP8[$4 + $$09$i41 >> 0] ^ HEAP8[$12 + 16 + $$09$i41 >> 0]; //@line 3954
    $$09$i41 = $$09$i41 + 1 | 0; //@line 3955
   } while (($$09$i41 | 0) != ($16 | 0));
   label = 25; //@line 3958
  }
 }
 if ((label | 0) == 25) {
  if ($16 | 0) {
   $$09$i = 0; //@line 3969
   do {
    $202 = $12 + $$09$i | 0; //@line 3973
    HEAP8[$202 >> 0] = HEAP8[$202 >> 0] ^ HEAP8[$6 + $$09$i >> 0]; //@line 3976
    $$09$i = $$09$i + 1 | 0; //@line 3977
   } while (($$09$i | 0) != ($16 | 0));
  }
 }
 $AsyncCtx = _emscripten_alloc_async_context(164, sp) | 0; //@line 3987
 $206 = _mbedtls_cipher_update($0, $12, $16, $12, $7) | 0; //@line 3988
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 603; //@line 3991
  HEAP32[$AsyncCtx + 4 >> 2] = $31; //@line 3993
  HEAP32[$AsyncCtx + 8 >> 2] = $19; //@line 3995
  HEAP32[$AsyncCtx + 12 >> 2] = $22; //@line 3997
  HEAP32[$AsyncCtx + 16 >> 2] = $25; //@line 3999
  HEAP32[$AsyncCtx + 20 >> 2] = $28; //@line 4001
  HEAP32[$AsyncCtx + 24 >> 2] = $37; //@line 4003
  HEAP32[$AsyncCtx + 28 >> 2] = $43; //@line 4005
  HEAP32[$AsyncCtx + 32 >> 2] = $12; //@line 4007
  HEAP32[$AsyncCtx + 36 >> 2] = $46; //@line 4009
  HEAP32[$AsyncCtx + 40 >> 2] = $5; //@line 4011
  HEAP32[$AsyncCtx + 44 >> 2] = $34; //@line 4013
  HEAP32[$AsyncCtx + 48 >> 2] = $175; //@line 4015
  HEAP32[$AsyncCtx + 52 >> 2] = $32; //@line 4017
  HEAP32[$AsyncCtx + 56 >> 2] = $38; //@line 4019
  HEAP32[$AsyncCtx + 60 >> 2] = $17; //@line 4021
  HEAP32[$AsyncCtx + 64 >> 2] = $42; //@line 4023
  HEAP32[$AsyncCtx + 68 >> 2] = $21; //@line 4025
  HEAP32[$AsyncCtx + 72 >> 2] = $24; //@line 4027
  HEAP32[$AsyncCtx + 76 >> 2] = $4; //@line 4029
  HEAP32[$AsyncCtx + 80 >> 2] = $16; //@line 4031
  HEAP32[$AsyncCtx + 84 >> 2] = $45; //@line 4033
  HEAP32[$AsyncCtx + 88 >> 2] = $35; //@line 4035
  HEAP32[$AsyncCtx + 92 >> 2] = $7; //@line 4037
  HEAP32[$AsyncCtx + 96 >> 2] = $176; //@line 4039
  HEAP32[$AsyncCtx + 100 >> 2] = $36; //@line 4041
  HEAP32[$AsyncCtx + 104 >> 2] = $27; //@line 4043
  HEAP32[$AsyncCtx + 108 >> 2] = $18; //@line 4045
  HEAP32[$AsyncCtx + 112 >> 2] = $39; //@line 4047
  HEAP32[$AsyncCtx + 116 >> 2] = $30; //@line 4049
  HEAP32[$AsyncCtx + 120 >> 2] = $20; //@line 4051
  HEAP32[$AsyncCtx + 124 >> 2] = $1; //@line 4053
  HEAP32[$AsyncCtx + 128 >> 2] = $41; //@line 4055
  HEAP32[$AsyncCtx + 132 >> 2] = $23; //@line 4057
  HEAP32[$AsyncCtx + 136 >> 2] = $29; //@line 4059
  HEAP32[$AsyncCtx + 140 >> 2] = $6; //@line 4061
  HEAP32[$AsyncCtx + 144 >> 2] = $44; //@line 4063
  HEAP32[$AsyncCtx + 148 >> 2] = $33; //@line 4065
  HEAP32[$AsyncCtx + 152 >> 2] = $26; //@line 4067
  HEAP32[$AsyncCtx + 156 >> 2] = $40; //@line 4069
  HEAP32[$AsyncCtx + 160 >> 2] = $12; //@line 4071
  sp = STACKTOP; //@line 4072
  STACKTOP = sp; //@line 4073
  return 0; //@line 4073
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 4075
 if (!$206) {
  _memcpy($1 | 0, $12 | 0, $16 | 0) | 0; //@line 4078
 }
 HEAP8[$4 >> 0] = 0; //@line 4080
 HEAP8[$17 >> 0] = 0; //@line 4081
 HEAP8[$18 >> 0] = 0; //@line 4082
 HEAP8[$19 >> 0] = 0; //@line 4083
 HEAP8[$20 >> 0] = 0; //@line 4084
 HEAP8[$21 >> 0] = 0; //@line 4085
 HEAP8[$22 >> 0] = 0; //@line 4086
 HEAP8[$23 >> 0] = 0; //@line 4087
 HEAP8[$24 >> 0] = 0; //@line 4088
 HEAP8[$25 >> 0] = 0; //@line 4089
 HEAP8[$26 >> 0] = 0; //@line 4090
 HEAP8[$27 >> 0] = 0; //@line 4091
 HEAP8[$28 >> 0] = 0; //@line 4092
 HEAP8[$29 >> 0] = 0; //@line 4093
 HEAP8[$30 >> 0] = 0; //@line 4094
 HEAP8[$31 >> 0] = 0; //@line 4095
 HEAP8[$5 >> 0] = 0; //@line 4096
 HEAP8[$32 >> 0] = 0; //@line 4097
 HEAP8[$33 >> 0] = 0; //@line 4098
 HEAP8[$34 >> 0] = 0; //@line 4099
 HEAP8[$35 >> 0] = 0; //@line 4100
 HEAP8[$36 >> 0] = 0; //@line 4101
 HEAP8[$37 >> 0] = 0; //@line 4102
 HEAP8[$38 >> 0] = 0; //@line 4103
 HEAP8[$39 >> 0] = 0; //@line 4104
 HEAP8[$40 >> 0] = 0; //@line 4105
 HEAP8[$41 >> 0] = 0; //@line 4106
 HEAP8[$42 >> 0] = 0; //@line 4107
 HEAP8[$43 >> 0] = 0; //@line 4108
 HEAP8[$44 >> 0] = 0; //@line 4109
 HEAP8[$45 >> 0] = 0; //@line 4110
 HEAP8[$46 >> 0] = 0; //@line 4111
 HEAP32[$176 >> 2] = 0; //@line 4112
 HEAP8[$175 >> 0] = 0; //@line 4114
 HEAP8[$12 + 17 >> 0] = 0; //@line 4116
 HEAP8[$12 + 18 >> 0] = 0; //@line 4118
 HEAP8[$12 + 19 >> 0] = 0; //@line 4120
 HEAP8[$12 + 20 >> 0] = 0; //@line 4122
 HEAP8[$12 + 21 >> 0] = 0; //@line 4124
 HEAP8[$12 + 22 >> 0] = 0; //@line 4126
 HEAP8[$12 + 23 >> 0] = 0; //@line 4128
 HEAP8[$12 + 24 >> 0] = 0; //@line 4130
 HEAP8[$12 + 25 >> 0] = 0; //@line 4132
 HEAP8[$12 + 26 >> 0] = 0; //@line 4134
 HEAP8[$12 + 27 >> 0] = 0; //@line 4136
 HEAP8[$12 + 28 >> 0] = 0; //@line 4138
 HEAP8[$12 + 29 >> 0] = 0; //@line 4140
 HEAP8[$12 + 30 >> 0] = 0; //@line 4142
 HEAP8[$12 + 31 >> 0] = 0; //@line 4143
 HEAP8[$12 >> 0] = 0; //@line 4145
 HEAP8[$12 + 1 >> 0] = 0; //@line 4147
 HEAP8[$12 + 2 >> 0] = 0; //@line 4149
 HEAP8[$12 + 3 >> 0] = 0; //@line 4151
 HEAP8[$12 + 4 >> 0] = 0; //@line 4153
 HEAP8[$12 + 5 >> 0] = 0; //@line 4155
 HEAP8[$12 + 6 >> 0] = 0; //@line 4157
 HEAP8[$12 + 7 >> 0] = 0; //@line 4159
 HEAP8[$12 + 8 >> 0] = 0; //@line 4161
 HEAP8[$12 + 9 >> 0] = 0; //@line 4163
 HEAP8[$12 + 10 >> 0] = 0; //@line 4165
 HEAP8[$12 + 11 >> 0] = 0; //@line 4167
 HEAP8[$12 + 12 >> 0] = 0; //@line 4169
 HEAP8[$12 + 13 >> 0] = 0; //@line 4171
 HEAP8[$12 + 14 >> 0] = 0; //@line 4173
 HEAP8[$12 + 15 >> 0] = 0; //@line 4174
 $$0 = $206; //@line 4175
 STACKTOP = sp; //@line 4176
 return $$0 | 0; //@line 4176
}
function _free($0) {
 $0 = $0 | 0;
 var $$0212$i = 0, $$0212$in$i = 0, $$0383 = 0, $$0384 = 0, $$0396 = 0, $$0403 = 0, $$1 = 0, $$1382 = 0, $$1387 = 0, $$1390 = 0, $$1398 = 0, $$1402 = 0, $$2 = 0, $$3 = 0, $$3400 = 0, $$pre$phi442Z2D = 0, $$pre$phi444Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $105 = 0, $106 = 0, $114 = 0, $115 = 0, $116 = 0, $124 = 0, $13 = 0, $132 = 0, $137 = 0, $138 = 0, $141 = 0, $143 = 0, $145 = 0, $16 = 0, $160 = 0, $165 = 0, $167 = 0, $17 = 0, $170 = 0, $173 = 0, $176 = 0, $179 = 0, $180 = 0, $181 = 0, $183 = 0, $185 = 0, $186 = 0, $188 = 0, $189 = 0, $195 = 0, $196 = 0, $2 = 0, $21 = 0, $210 = 0, $213 = 0, $214 = 0, $220 = 0, $235 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $244 = 0, $245 = 0, $251 = 0, $256 = 0, $257 = 0, $26 = 0, $260 = 0, $262 = 0, $265 = 0, $270 = 0, $276 = 0, $28 = 0, $280 = 0, $281 = 0, $299 = 0, $3 = 0, $301 = 0, $308 = 0, $309 = 0, $310 = 0, $319 = 0, $41 = 0, $46 = 0, $48 = 0, $51 = 0, $53 = 0, $56 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $7 = 0, $74 = 0, $75 = 0, $89 = 0, $9 = 0, $92 = 0, $93 = 0, $99 = 0, label = 0;
 if (!$0) {
  return;
 }
 $2 = $0 + -8 | 0; //@line 10040
 $3 = HEAP32[5975] | 0; //@line 10041
 if ($2 >>> 0 < $3 >>> 0) {
  _abort(); //@line 10044
 }
 $6 = HEAP32[$0 + -4 >> 2] | 0; //@line 10048
 $7 = $6 & 3; //@line 10049
 if (($7 | 0) == 1) {
  _abort(); //@line 10052
 }
 $9 = $6 & -8; //@line 10055
 $10 = $2 + $9 | 0; //@line 10056
 L10 : do {
  if (!($6 & 1)) {
   $13 = HEAP32[$2 >> 2] | 0; //@line 10061
   if (!$7) {
    return;
   }
   $16 = $2 + (0 - $13) | 0; //@line 10067
   $17 = $13 + $9 | 0; //@line 10068
   if ($16 >>> 0 < $3 >>> 0) {
    _abort(); //@line 10071
   }
   if ((HEAP32[5976] | 0) == ($16 | 0)) {
    $105 = $10 + 4 | 0; //@line 10077
    $106 = HEAP32[$105 >> 2] | 0; //@line 10078
    if (($106 & 3 | 0) != 3) {
     $$1 = $16; //@line 10082
     $$1382 = $17; //@line 10082
     $114 = $16; //@line 10082
     break;
    }
    HEAP32[5973] = $17; //@line 10085
    HEAP32[$105 >> 2] = $106 & -2; //@line 10087
    HEAP32[$16 + 4 >> 2] = $17 | 1; //@line 10090
    HEAP32[$16 + $17 >> 2] = $17; //@line 10092
    return;
   }
   $21 = $13 >>> 3; //@line 10095
   if ($13 >>> 0 < 256) {
    $24 = HEAP32[$16 + 8 >> 2] | 0; //@line 10099
    $26 = HEAP32[$16 + 12 >> 2] | 0; //@line 10101
    $28 = 23924 + ($21 << 1 << 2) | 0; //@line 10103
    if (($24 | 0) != ($28 | 0)) {
     if ($3 >>> 0 > $24 >>> 0) {
      _abort(); //@line 10108
     }
     if ((HEAP32[$24 + 12 >> 2] | 0) != ($16 | 0)) {
      _abort(); //@line 10115
     }
    }
    if (($26 | 0) == ($24 | 0)) {
     HEAP32[5971] = HEAP32[5971] & ~(1 << $21); //@line 10125
     $$1 = $16; //@line 10126
     $$1382 = $17; //@line 10126
     $114 = $16; //@line 10126
     break;
    }
    if (($26 | 0) == ($28 | 0)) {
     $$pre$phi444Z2D = $26 + 8 | 0; //@line 10132
    } else {
     if ($3 >>> 0 > $26 >>> 0) {
      _abort(); //@line 10136
     }
     $41 = $26 + 8 | 0; //@line 10139
     if ((HEAP32[$41 >> 2] | 0) == ($16 | 0)) {
      $$pre$phi444Z2D = $41; //@line 10143
     } else {
      _abort(); //@line 10145
     }
    }
    HEAP32[$24 + 12 >> 2] = $26; //@line 10150
    HEAP32[$$pre$phi444Z2D >> 2] = $24; //@line 10151
    $$1 = $16; //@line 10152
    $$1382 = $17; //@line 10152
    $114 = $16; //@line 10152
    break;
   }
   $46 = HEAP32[$16 + 24 >> 2] | 0; //@line 10156
   $48 = HEAP32[$16 + 12 >> 2] | 0; //@line 10158
   do {
    if (($48 | 0) == ($16 | 0)) {
     $59 = $16 + 16 | 0; //@line 10162
     $60 = $59 + 4 | 0; //@line 10163
     $61 = HEAP32[$60 >> 2] | 0; //@line 10164
     if (!$61) {
      $63 = HEAP32[$59 >> 2] | 0; //@line 10167
      if (!$63) {
       $$3 = 0; //@line 10170
       break;
      } else {
       $$1387 = $63; //@line 10173
       $$1390 = $59; //@line 10173
      }
     } else {
      $$1387 = $61; //@line 10176
      $$1390 = $60; //@line 10176
     }
     while (1) {
      $65 = $$1387 + 20 | 0; //@line 10179
      $66 = HEAP32[$65 >> 2] | 0; //@line 10180
      if ($66 | 0) {
       $$1387 = $66; //@line 10183
       $$1390 = $65; //@line 10183
       continue;
      }
      $68 = $$1387 + 16 | 0; //@line 10186
      $69 = HEAP32[$68 >> 2] | 0; //@line 10187
      if (!$69) {
       break;
      } else {
       $$1387 = $69; //@line 10192
       $$1390 = $68; //@line 10192
      }
     }
     if ($3 >>> 0 > $$1390 >>> 0) {
      _abort(); //@line 10197
     } else {
      HEAP32[$$1390 >> 2] = 0; //@line 10200
      $$3 = $$1387; //@line 10201
      break;
     }
    } else {
     $51 = HEAP32[$16 + 8 >> 2] | 0; //@line 10206
     if ($3 >>> 0 > $51 >>> 0) {
      _abort(); //@line 10209
     }
     $53 = $51 + 12 | 0; //@line 10212
     if ((HEAP32[$53 >> 2] | 0) != ($16 | 0)) {
      _abort(); //@line 10216
     }
     $56 = $48 + 8 | 0; //@line 10219
     if ((HEAP32[$56 >> 2] | 0) == ($16 | 0)) {
      HEAP32[$53 >> 2] = $48; //@line 10223
      HEAP32[$56 >> 2] = $51; //@line 10224
      $$3 = $48; //@line 10225
      break;
     } else {
      _abort(); //@line 10228
     }
    }
   } while (0);
   if (!$46) {
    $$1 = $16; //@line 10235
    $$1382 = $17; //@line 10235
    $114 = $16; //@line 10235
   } else {
    $74 = HEAP32[$16 + 28 >> 2] | 0; //@line 10238
    $75 = 24188 + ($74 << 2) | 0; //@line 10239
    do {
     if ((HEAP32[$75 >> 2] | 0) == ($16 | 0)) {
      HEAP32[$75 >> 2] = $$3; //@line 10244
      if (!$$3) {
       HEAP32[5972] = HEAP32[5972] & ~(1 << $74); //@line 10251
       $$1 = $16; //@line 10252
       $$1382 = $17; //@line 10252
       $114 = $16; //@line 10252
       break L10;
      }
     } else {
      if ((HEAP32[5975] | 0) >>> 0 > $46 >>> 0) {
       _abort(); //@line 10259
      } else {
       HEAP32[$46 + 16 + (((HEAP32[$46 + 16 >> 2] | 0) != ($16 | 0) & 1) << 2) >> 2] = $$3; //@line 10267
       if (!$$3) {
        $$1 = $16; //@line 10270
        $$1382 = $17; //@line 10270
        $114 = $16; //@line 10270
        break L10;
       } else {
        break;
       }
      }
     }
    } while (0);
    $89 = HEAP32[5975] | 0; //@line 10278
    if ($89 >>> 0 > $$3 >>> 0) {
     _abort(); //@line 10281
    }
    HEAP32[$$3 + 24 >> 2] = $46; //@line 10285
    $92 = $16 + 16 | 0; //@line 10286
    $93 = HEAP32[$92 >> 2] | 0; //@line 10287
    do {
     if ($93 | 0) {
      if ($89 >>> 0 > $93 >>> 0) {
       _abort(); //@line 10293
      } else {
       HEAP32[$$3 + 16 >> 2] = $93; //@line 10297
       HEAP32[$93 + 24 >> 2] = $$3; //@line 10299
       break;
      }
     }
    } while (0);
    $99 = HEAP32[$92 + 4 >> 2] | 0; //@line 10305
    if (!$99) {
     $$1 = $16; //@line 10308
     $$1382 = $17; //@line 10308
     $114 = $16; //@line 10308
    } else {
     if ((HEAP32[5975] | 0) >>> 0 > $99 >>> 0) {
      _abort(); //@line 10313
     } else {
      HEAP32[$$3 + 20 >> 2] = $99; //@line 10317
      HEAP32[$99 + 24 >> 2] = $$3; //@line 10319
      $$1 = $16; //@line 10320
      $$1382 = $17; //@line 10320
      $114 = $16; //@line 10320
      break;
     }
    }
   }
  } else {
   $$1 = $2; //@line 10326
   $$1382 = $9; //@line 10326
   $114 = $2; //@line 10326
  }
 } while (0);
 if ($114 >>> 0 >= $10 >>> 0) {
  _abort(); //@line 10331
 }
 $115 = $10 + 4 | 0; //@line 10334
 $116 = HEAP32[$115 >> 2] | 0; //@line 10335
 if (!($116 & 1)) {
  _abort(); //@line 10339
 }
 if (!($116 & 2)) {
  if ((HEAP32[5977] | 0) == ($10 | 0)) {
   $124 = (HEAP32[5974] | 0) + $$1382 | 0; //@line 10349
   HEAP32[5974] = $124; //@line 10350
   HEAP32[5977] = $$1; //@line 10351
   HEAP32[$$1 + 4 >> 2] = $124 | 1; //@line 10354
   if (($$1 | 0) != (HEAP32[5976] | 0)) {
    return;
   }
   HEAP32[5976] = 0; //@line 10360
   HEAP32[5973] = 0; //@line 10361
   return;
  }
  if ((HEAP32[5976] | 0) == ($10 | 0)) {
   $132 = (HEAP32[5973] | 0) + $$1382 | 0; //@line 10368
   HEAP32[5973] = $132; //@line 10369
   HEAP32[5976] = $114; //@line 10370
   HEAP32[$$1 + 4 >> 2] = $132 | 1; //@line 10373
   HEAP32[$114 + $132 >> 2] = $132; //@line 10375
   return;
  }
  $137 = ($116 & -8) + $$1382 | 0; //@line 10379
  $138 = $116 >>> 3; //@line 10380
  L108 : do {
   if ($116 >>> 0 < 256) {
    $141 = HEAP32[$10 + 8 >> 2] | 0; //@line 10385
    $143 = HEAP32[$10 + 12 >> 2] | 0; //@line 10387
    $145 = 23924 + ($138 << 1 << 2) | 0; //@line 10389
    if (($141 | 0) != ($145 | 0)) {
     if ((HEAP32[5975] | 0) >>> 0 > $141 >>> 0) {
      _abort(); //@line 10395
     }
     if ((HEAP32[$141 + 12 >> 2] | 0) != ($10 | 0)) {
      _abort(); //@line 10402
     }
    }
    if (($143 | 0) == ($141 | 0)) {
     HEAP32[5971] = HEAP32[5971] & ~(1 << $138); //@line 10412
     break;
    }
    if (($143 | 0) == ($145 | 0)) {
     $$pre$phi442Z2D = $143 + 8 | 0; //@line 10418
    } else {
     if ((HEAP32[5975] | 0) >>> 0 > $143 >>> 0) {
      _abort(); //@line 10423
     }
     $160 = $143 + 8 | 0; //@line 10426
     if ((HEAP32[$160 >> 2] | 0) == ($10 | 0)) {
      $$pre$phi442Z2D = $160; //@line 10430
     } else {
      _abort(); //@line 10432
     }
    }
    HEAP32[$141 + 12 >> 2] = $143; //@line 10437
    HEAP32[$$pre$phi442Z2D >> 2] = $141; //@line 10438
   } else {
    $165 = HEAP32[$10 + 24 >> 2] | 0; //@line 10441
    $167 = HEAP32[$10 + 12 >> 2] | 0; //@line 10443
    do {
     if (($167 | 0) == ($10 | 0)) {
      $179 = $10 + 16 | 0; //@line 10447
      $180 = $179 + 4 | 0; //@line 10448
      $181 = HEAP32[$180 >> 2] | 0; //@line 10449
      if (!$181) {
       $183 = HEAP32[$179 >> 2] | 0; //@line 10452
       if (!$183) {
        $$3400 = 0; //@line 10455
        break;
       } else {
        $$1398 = $183; //@line 10458
        $$1402 = $179; //@line 10458
       }
      } else {
       $$1398 = $181; //@line 10461
       $$1402 = $180; //@line 10461
      }
      while (1) {
       $185 = $$1398 + 20 | 0; //@line 10464
       $186 = HEAP32[$185 >> 2] | 0; //@line 10465
       if ($186 | 0) {
        $$1398 = $186; //@line 10468
        $$1402 = $185; //@line 10468
        continue;
       }
       $188 = $$1398 + 16 | 0; //@line 10471
       $189 = HEAP32[$188 >> 2] | 0; //@line 10472
       if (!$189) {
        break;
       } else {
        $$1398 = $189; //@line 10477
        $$1402 = $188; //@line 10477
       }
      }
      if ((HEAP32[5975] | 0) >>> 0 > $$1402 >>> 0) {
       _abort(); //@line 10483
      } else {
       HEAP32[$$1402 >> 2] = 0; //@line 10486
       $$3400 = $$1398; //@line 10487
       break;
      }
     } else {
      $170 = HEAP32[$10 + 8 >> 2] | 0; //@line 10492
      if ((HEAP32[5975] | 0) >>> 0 > $170 >>> 0) {
       _abort(); //@line 10496
      }
      $173 = $170 + 12 | 0; //@line 10499
      if ((HEAP32[$173 >> 2] | 0) != ($10 | 0)) {
       _abort(); //@line 10503
      }
      $176 = $167 + 8 | 0; //@line 10506
      if ((HEAP32[$176 >> 2] | 0) == ($10 | 0)) {
       HEAP32[$173 >> 2] = $167; //@line 10510
       HEAP32[$176 >> 2] = $170; //@line 10511
       $$3400 = $167; //@line 10512
       break;
      } else {
       _abort(); //@line 10515
      }
     }
    } while (0);
    if ($165 | 0) {
     $195 = HEAP32[$10 + 28 >> 2] | 0; //@line 10523
     $196 = 24188 + ($195 << 2) | 0; //@line 10524
     do {
      if ((HEAP32[$196 >> 2] | 0) == ($10 | 0)) {
       HEAP32[$196 >> 2] = $$3400; //@line 10529
       if (!$$3400) {
        HEAP32[5972] = HEAP32[5972] & ~(1 << $195); //@line 10536
        break L108;
       }
      } else {
       if ((HEAP32[5975] | 0) >>> 0 > $165 >>> 0) {
        _abort(); //@line 10543
       } else {
        HEAP32[$165 + 16 + (((HEAP32[$165 + 16 >> 2] | 0) != ($10 | 0) & 1) << 2) >> 2] = $$3400; //@line 10551
        if (!$$3400) {
         break L108;
        } else {
         break;
        }
       }
      }
     } while (0);
     $210 = HEAP32[5975] | 0; //@line 10561
     if ($210 >>> 0 > $$3400 >>> 0) {
      _abort(); //@line 10564
     }
     HEAP32[$$3400 + 24 >> 2] = $165; //@line 10568
     $213 = $10 + 16 | 0; //@line 10569
     $214 = HEAP32[$213 >> 2] | 0; //@line 10570
     do {
      if ($214 | 0) {
       if ($210 >>> 0 > $214 >>> 0) {
        _abort(); //@line 10576
       } else {
        HEAP32[$$3400 + 16 >> 2] = $214; //@line 10580
        HEAP32[$214 + 24 >> 2] = $$3400; //@line 10582
        break;
       }
      }
     } while (0);
     $220 = HEAP32[$213 + 4 >> 2] | 0; //@line 10588
     if ($220 | 0) {
      if ((HEAP32[5975] | 0) >>> 0 > $220 >>> 0) {
       _abort(); //@line 10594
      } else {
       HEAP32[$$3400 + 20 >> 2] = $220; //@line 10598
       HEAP32[$220 + 24 >> 2] = $$3400; //@line 10600
       break;
      }
     }
    }
   }
  } while (0);
  HEAP32[$$1 + 4 >> 2] = $137 | 1; //@line 10609
  HEAP32[$114 + $137 >> 2] = $137; //@line 10611
  if (($$1 | 0) == (HEAP32[5976] | 0)) {
   HEAP32[5973] = $137; //@line 10615
   return;
  } else {
   $$2 = $137; //@line 10618
  }
 } else {
  HEAP32[$115 >> 2] = $116 & -2; //@line 10622
  HEAP32[$$1 + 4 >> 2] = $$1382 | 1; //@line 10625
  HEAP32[$114 + $$1382 >> 2] = $$1382; //@line 10627
  $$2 = $$1382; //@line 10628
 }
 $235 = $$2 >>> 3; //@line 10630
 if ($$2 >>> 0 < 256) {
  $238 = 23924 + ($235 << 1 << 2) | 0; //@line 10634
  $239 = HEAP32[5971] | 0; //@line 10635
  $240 = 1 << $235; //@line 10636
  if (!($239 & $240)) {
   HEAP32[5971] = $239 | $240; //@line 10641
   $$0403 = $238; //@line 10643
   $$pre$phiZ2D = $238 + 8 | 0; //@line 10643
  } else {
   $244 = $238 + 8 | 0; //@line 10645
   $245 = HEAP32[$244 >> 2] | 0; //@line 10646
   if ((HEAP32[5975] | 0) >>> 0 > $245 >>> 0) {
    _abort(); //@line 10650
   } else {
    $$0403 = $245; //@line 10653
    $$pre$phiZ2D = $244; //@line 10653
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$1; //@line 10656
  HEAP32[$$0403 + 12 >> 2] = $$1; //@line 10658
  HEAP32[$$1 + 8 >> 2] = $$0403; //@line 10660
  HEAP32[$$1 + 12 >> 2] = $238; //@line 10662
  return;
 }
 $251 = $$2 >>> 8; //@line 10665
 if (!$251) {
  $$0396 = 0; //@line 10668
 } else {
  if ($$2 >>> 0 > 16777215) {
   $$0396 = 31; //@line 10672
  } else {
   $256 = ($251 + 1048320 | 0) >>> 16 & 8; //@line 10676
   $257 = $251 << $256; //@line 10677
   $260 = ($257 + 520192 | 0) >>> 16 & 4; //@line 10680
   $262 = $257 << $260; //@line 10682
   $265 = ($262 + 245760 | 0) >>> 16 & 2; //@line 10685
   $270 = 14 - ($260 | $256 | $265) + ($262 << $265 >>> 15) | 0; //@line 10690
   $$0396 = $$2 >>> ($270 + 7 | 0) & 1 | $270 << 1; //@line 10696
  }
 }
 $276 = 24188 + ($$0396 << 2) | 0; //@line 10699
 HEAP32[$$1 + 28 >> 2] = $$0396; //@line 10701
 HEAP32[$$1 + 20 >> 2] = 0; //@line 10704
 HEAP32[$$1 + 16 >> 2] = 0; //@line 10705
 $280 = HEAP32[5972] | 0; //@line 10706
 $281 = 1 << $$0396; //@line 10707
 do {
  if (!($280 & $281)) {
   HEAP32[5972] = $280 | $281; //@line 10713
   HEAP32[$276 >> 2] = $$1; //@line 10714
   HEAP32[$$1 + 24 >> 2] = $276; //@line 10716
   HEAP32[$$1 + 12 >> 2] = $$1; //@line 10718
   HEAP32[$$1 + 8 >> 2] = $$1; //@line 10720
  } else {
   $$0383 = $$2 << (($$0396 | 0) == 31 ? 0 : 25 - ($$0396 >>> 1) | 0); //@line 10728
   $$0384 = HEAP32[$276 >> 2] | 0; //@line 10728
   while (1) {
    if ((HEAP32[$$0384 + 4 >> 2] & -8 | 0) == ($$2 | 0)) {
     label = 124; //@line 10735
     break;
    }
    $299 = $$0384 + 16 + ($$0383 >>> 31 << 2) | 0; //@line 10739
    $301 = HEAP32[$299 >> 2] | 0; //@line 10741
    if (!$301) {
     label = 121; //@line 10744
     break;
    } else {
     $$0383 = $$0383 << 1; //@line 10747
     $$0384 = $301; //@line 10747
    }
   }
   if ((label | 0) == 121) {
    if ((HEAP32[5975] | 0) >>> 0 > $299 >>> 0) {
     _abort(); //@line 10754
    } else {
     HEAP32[$299 >> 2] = $$1; //@line 10757
     HEAP32[$$1 + 24 >> 2] = $$0384; //@line 10759
     HEAP32[$$1 + 12 >> 2] = $$1; //@line 10761
     HEAP32[$$1 + 8 >> 2] = $$1; //@line 10763
     break;
    }
   } else if ((label | 0) == 124) {
    $308 = $$0384 + 8 | 0; //@line 10768
    $309 = HEAP32[$308 >> 2] | 0; //@line 10769
    $310 = HEAP32[5975] | 0; //@line 10770
    if ($310 >>> 0 <= $309 >>> 0 & $310 >>> 0 <= $$0384 >>> 0) {
     HEAP32[$309 + 12 >> 2] = $$1; //@line 10776
     HEAP32[$308 >> 2] = $$1; //@line 10777
     HEAP32[$$1 + 8 >> 2] = $309; //@line 10779
     HEAP32[$$1 + 12 >> 2] = $$0384; //@line 10781
     HEAP32[$$1 + 24 >> 2] = 0; //@line 10783
     break;
    } else {
     _abort(); //@line 10786
    }
   }
  }
 } while (0);
 $319 = (HEAP32[5979] | 0) + -1 | 0; //@line 10793
 HEAP32[5979] = $319; //@line 10794
 if (!$319) {
  $$0212$in$i = 24340; //@line 10797
 } else {
  return;
 }
 while (1) {
  $$0212$i = HEAP32[$$0212$in$i >> 2] | 0; //@line 10802
  if (!$$0212$i) {
   break;
  } else {
   $$0212$in$i = $$0212$i + 8 | 0; //@line 10808
  }
 }
 HEAP32[5979] = -1; //@line 10811
 return;
}
function _mbedtls_cipher_cmac_finish__async_cb_229($0) {
 $0 = $0 | 0;
 var $$013$i = 0, $$01720$i55 = 0, $$019$i = 0, $$019$i52 = 0, $$021$i54 = 0, $$09$i = 0, $$09$i41 = 0, $$09$i45 = 0, $$sink$sink$i = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $127 = 0, $130 = 0, $14 = 0, $143 = 0, $146 = 0, $154 = 0, $155 = 0, $16 = 0, $168 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $183 = 0, $2 = 0, $20 = 0, $200 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $64 = 0, $66 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $ReallocAsyncCtx = 0, label = 0, sp = 0, $154$looptemp = 0;
 sp = STACKTOP; //@line 4354
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4356
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4358
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4360
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4362
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 4364
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 4366
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 4368
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 4370
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 4372
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 4374
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 4376
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 4378
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 4380
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 4382
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 4384
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 4386
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 4388
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 4390
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 4392
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 4394
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 4396
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 4398
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 4400
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 4402
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 4404
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 4406
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 4408
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 4410
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 4412
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 4414
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 4416
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 4418
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 4420
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 4422
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 4424
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 4426
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 4428
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 4430
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 4432
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 4434
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 4436
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 4438
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 4440
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 4442
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 4444
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 4446
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 4448
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 4450
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 4452
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 4454
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 4456
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 4458
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 4460
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 4462
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 4464
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 4466
 $114 = HEAP32[$0 + 228 >> 2] | 0; //@line 4468
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 4470
 $118 = HEAP32[$0 + 236 >> 2] | 0; //@line 4472
 $120 = HEAP32[$0 + 240 >> 2] | 0; //@line 4474
 $122 = HEAP32[$0 + 244 >> 2] | 0; //@line 4476
 L2 : do {
  if (!(HEAP32[___async_retval >> 2] | 0)) {
   switch ($8 | 0) {
   case 16:
    {
     $$019$i52 = 135; //@line 4486
     break;
    }
   case 8:
    {
     $$019$i52 = 27; //@line 4490
     break;
    }
   default:
    {
     break L2;
    }
   }
   $127 = $8 + -1 | 0; //@line 4497
   $$01720$i55 = 0; //@line 4498
   $$021$i54 = $127; //@line 4498
   while (1) {
    $130 = HEAPU8[$18 + $$021$i54 >> 0] | 0; //@line 4502
    HEAP8[$36 + $$021$i54 >> 0] = $130 << 1 | $$01720$i55; //@line 4507
    if (($$021$i54 | 0) > 0) {
     $$01720$i55 = $130 >>> 7; //@line 4512
     $$021$i54 = $$021$i54 + -1 | 0; //@line 4512
    } else {
     break;
    }
   }
   $143 = $36 + $127 | 0; //@line 4522
   $146 = $$019$i52 & 0 - ((HEAPU8[$76 >> 0] | 0) >>> 7) ^ (HEAPU8[$143 >> 0] | 0); //@line 4525
   HEAP8[$143 >> 0] = $146; //@line 4527
   switch ($8 | 0) {
   case 16:
    {
     $$019$i = 135; //@line 4530
     break;
    }
   case 8:
    {
     $$019$i = 27; //@line 4534
     break;
    }
   default:
    {
     break L2;
    }
   }
   HEAP8[$74 + $127 >> 0] = $146 << 1; //@line 4544
   if (($127 | 0) > 0) {
    $154 = $146; //@line 4548
    $155 = $8 + -2 | 0; //@line 4548
    while (1) {
     $154$looptemp = $154;
     $154 = HEAPU8[$36 + $155 >> 0] | 0; //@line 4553
     HEAP8[$74 + $155 >> 0] = $154 << 1 | $154$looptemp >>> 7; //@line 4558
     if (($155 | 0) <= 0) {
      break;
     } else {
      $155 = $155 + -1 | 0; //@line 4562
     }
    }
   }
   $168 = $74 + $127 | 0; //@line 4573
   HEAP8[$168 >> 0] = $$019$i & 0 - ((HEAPU8[$54 >> 0] | 0) >>> 7) ^ (HEAPU8[$168 >> 0] | 0); //@line 4578
  }
 } while (0);
 HEAP8[$76 >> 0] = 0; //@line 4581
 HEAP8[$92 >> 0] = 0; //@line 4582
 HEAP8[$44 >> 0] = 0; //@line 4583
 HEAP8[$34 >> 0] = 0; //@line 4584
 HEAP8[$118 >> 0] = 0; //@line 4585
 HEAP8[$22 >> 0] = 0; //@line 4586
 HEAP8[$42 >> 0] = 0; //@line 4587
 HEAP8[$68 >> 0] = 0; //@line 4588
 HEAP8[$24 >> 0] = 0; //@line 4589
 HEAP8[$64 >> 0] = 0; //@line 4590
 HEAP8[$94 >> 0] = 0; //@line 4591
 HEAP8[$112 >> 0] = 0; //@line 4592
 HEAP8[$56 >> 0] = 0; //@line 4593
 HEAP8[$78 >> 0] = 0; //@line 4594
 HEAP8[$120 >> 0] = 0; //@line 4595
 HEAP8[$32 >> 0] = 0; //@line 4596
 $173 = $122 + 16 | 0; //@line 4597
 $174 = $122 + 32 | 0; //@line 4598
 $175 = HEAP32[$174 >> 2] | 0; //@line 4599
 if ($175 >>> 0 < $58 >>> 0) {
  $$013$i = 0; //@line 4602
  do {
   if ($$013$i >>> 0 < $175 >>> 0) {
    $$sink$sink$i = HEAP8[$122 + 16 + $$013$i >> 0] | 0; //@line 4608
   } else {
    $$sink$sink$i = ($$013$i | 0) == ($175 | 0) ? -128 : 0; //@line 4612
   }
   HEAP8[$72 + $$013$i >> 0] = $$sink$sink$i; //@line 4615
   $$013$i = $$013$i + 1 | 0; //@line 4616
  } while (($$013$i | 0) != ($58 | 0));
  $$09$i45 = 0; //@line 4619
  do {
   $183 = $72 + $$09$i45 | 0; //@line 4626
   HEAP8[$183 >> 0] = HEAP8[$74 + $$09$i45 >> 0] ^ HEAP8[$183 >> 0]; //@line 4631
   $$09$i45 = $$09$i45 + 1 | 0; //@line 4632
  } while (($$09$i45 | 0) != ($58 | 0));
  label = 21; //@line 4635
 } else {
  if ($58 | 0) {
   $$09$i41 = 0; //@line 4644
   do {
    HEAP8[$72 + $$09$i41 >> 0] = HEAP8[$36 + $$09$i41 >> 0] ^ HEAP8[$122 + 16 + $$09$i41 >> 0]; //@line 4652
    $$09$i41 = $$09$i41 + 1 | 0; //@line 4653
   } while (($$09$i41 | 0) != ($58 | 0));
   label = 21; //@line 4656
  }
 }
 if ((label | 0) == 21) {
  if ($58 | 0) {
   $$09$i = 0; //@line 4667
   do {
    $200 = $122 + $$09$i | 0; //@line 4671
    HEAP8[$200 >> 0] = HEAP8[$200 >> 0] ^ HEAP8[$72 + $$09$i >> 0]; //@line 4674
    $$09$i = $$09$i + 1 | 0; //@line 4675
   } while (($$09$i | 0) != ($58 | 0));
  }
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(164) | 0; //@line 4685
 $204 = _mbedtls_cipher_update($66, $20, $58, $20, $108) | 0; //@line 4686
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 603; //@line 4689
  $205 = $ReallocAsyncCtx + 4 | 0; //@line 4690
  HEAP32[$205 >> 2] = $2; //@line 4691
  $206 = $ReallocAsyncCtx + 8 | 0; //@line 4692
  HEAP32[$206 >> 2] = $4; //@line 4693
  $207 = $ReallocAsyncCtx + 12 | 0; //@line 4694
  HEAP32[$207 >> 2] = $6; //@line 4695
  $208 = $ReallocAsyncCtx + 16 | 0; //@line 4696
  HEAP32[$208 >> 2] = $10; //@line 4697
  $209 = $ReallocAsyncCtx + 20 | 0; //@line 4698
  HEAP32[$209 >> 2] = $12; //@line 4699
  $210 = $ReallocAsyncCtx + 24 | 0; //@line 4700
  HEAP32[$210 >> 2] = $14; //@line 4701
  $211 = $ReallocAsyncCtx + 28 | 0; //@line 4702
  HEAP32[$211 >> 2] = $16; //@line 4703
  $212 = $ReallocAsyncCtx + 32 | 0; //@line 4704
  HEAP32[$212 >> 2] = $20; //@line 4705
  $213 = $ReallocAsyncCtx + 36 | 0; //@line 4706
  HEAP32[$213 >> 2] = $26; //@line 4707
  $214 = $ReallocAsyncCtx + 40 | 0; //@line 4708
  HEAP32[$214 >> 2] = $28; //@line 4709
  $215 = $ReallocAsyncCtx + 44 | 0; //@line 4710
  HEAP32[$215 >> 2] = $30; //@line 4711
  $216 = $ReallocAsyncCtx + 48 | 0; //@line 4712
  HEAP32[$216 >> 2] = $173; //@line 4713
  $217 = $ReallocAsyncCtx + 52 | 0; //@line 4714
  HEAP32[$217 >> 2] = $38; //@line 4715
  $218 = $ReallocAsyncCtx + 56 | 0; //@line 4716
  HEAP32[$218 >> 2] = $40; //@line 4717
  $219 = $ReallocAsyncCtx + 60 | 0; //@line 4718
  HEAP32[$219 >> 2] = $46; //@line 4719
  $220 = $ReallocAsyncCtx + 64 | 0; //@line 4720
  HEAP32[$220 >> 2] = $48; //@line 4721
  $221 = $ReallocAsyncCtx + 68 | 0; //@line 4722
  HEAP32[$221 >> 2] = $50; //@line 4723
  $222 = $ReallocAsyncCtx + 72 | 0; //@line 4724
  HEAP32[$222 >> 2] = $52; //@line 4725
  $223 = $ReallocAsyncCtx + 76 | 0; //@line 4726
  HEAP32[$223 >> 2] = $54; //@line 4727
  $224 = $ReallocAsyncCtx + 80 | 0; //@line 4728
  HEAP32[$224 >> 2] = $58; //@line 4729
  $225 = $ReallocAsyncCtx + 84 | 0; //@line 4730
  HEAP32[$225 >> 2] = $60; //@line 4731
  $226 = $ReallocAsyncCtx + 88 | 0; //@line 4732
  HEAP32[$226 >> 2] = $62; //@line 4733
  $227 = $ReallocAsyncCtx + 92 | 0; //@line 4734
  HEAP32[$227 >> 2] = $70; //@line 4735
  $228 = $ReallocAsyncCtx + 96 | 0; //@line 4736
  HEAP32[$228 >> 2] = $174; //@line 4737
  $229 = $ReallocAsyncCtx + 100 | 0; //@line 4738
  HEAP32[$229 >> 2] = $80; //@line 4739
  $230 = $ReallocAsyncCtx + 104 | 0; //@line 4740
  HEAP32[$230 >> 2] = $82; //@line 4741
  $231 = $ReallocAsyncCtx + 108 | 0; //@line 4742
  HEAP32[$231 >> 2] = $84; //@line 4743
  $232 = $ReallocAsyncCtx + 112 | 0; //@line 4744
  HEAP32[$232 >> 2] = $86; //@line 4745
  $233 = $ReallocAsyncCtx + 116 | 0; //@line 4746
  HEAP32[$233 >> 2] = $88; //@line 4747
  $234 = $ReallocAsyncCtx + 120 | 0; //@line 4748
  HEAP32[$234 >> 2] = $90; //@line 4749
  $235 = $ReallocAsyncCtx + 124 | 0; //@line 4750
  HEAP32[$235 >> 2] = $96; //@line 4751
  $236 = $ReallocAsyncCtx + 128 | 0; //@line 4752
  HEAP32[$236 >> 2] = $98; //@line 4753
  $237 = $ReallocAsyncCtx + 132 | 0; //@line 4754
  HEAP32[$237 >> 2] = $102; //@line 4755
  $238 = $ReallocAsyncCtx + 136 | 0; //@line 4756
  HEAP32[$238 >> 2] = $104; //@line 4757
  $239 = $ReallocAsyncCtx + 140 | 0; //@line 4758
  HEAP32[$239 >> 2] = $100; //@line 4759
  $240 = $ReallocAsyncCtx + 144 | 0; //@line 4760
  HEAP32[$240 >> 2] = $106; //@line 4761
  $241 = $ReallocAsyncCtx + 148 | 0; //@line 4762
  HEAP32[$241 >> 2] = $110; //@line 4763
  $242 = $ReallocAsyncCtx + 152 | 0; //@line 4764
  HEAP32[$242 >> 2] = $114; //@line 4765
  $243 = $ReallocAsyncCtx + 156 | 0; //@line 4766
  HEAP32[$243 >> 2] = $116; //@line 4767
  $244 = $ReallocAsyncCtx + 160 | 0; //@line 4768
  HEAP32[$244 >> 2] = $122; //@line 4769
  sp = STACKTOP; //@line 4770
  return;
 }
 HEAP32[___async_retval >> 2] = $204; //@line 4774
 ___async_unwind = 0; //@line 4775
 HEAP32[$ReallocAsyncCtx >> 2] = 603; //@line 4776
 $205 = $ReallocAsyncCtx + 4 | 0; //@line 4777
 HEAP32[$205 >> 2] = $2; //@line 4778
 $206 = $ReallocAsyncCtx + 8 | 0; //@line 4779
 HEAP32[$206 >> 2] = $4; //@line 4780
 $207 = $ReallocAsyncCtx + 12 | 0; //@line 4781
 HEAP32[$207 >> 2] = $6; //@line 4782
 $208 = $ReallocAsyncCtx + 16 | 0; //@line 4783
 HEAP32[$208 >> 2] = $10; //@line 4784
 $209 = $ReallocAsyncCtx + 20 | 0; //@line 4785
 HEAP32[$209 >> 2] = $12; //@line 4786
 $210 = $ReallocAsyncCtx + 24 | 0; //@line 4787
 HEAP32[$210 >> 2] = $14; //@line 4788
 $211 = $ReallocAsyncCtx + 28 | 0; //@line 4789
 HEAP32[$211 >> 2] = $16; //@line 4790
 $212 = $ReallocAsyncCtx + 32 | 0; //@line 4791
 HEAP32[$212 >> 2] = $20; //@line 4792
 $213 = $ReallocAsyncCtx + 36 | 0; //@line 4793
 HEAP32[$213 >> 2] = $26; //@line 4794
 $214 = $ReallocAsyncCtx + 40 | 0; //@line 4795
 HEAP32[$214 >> 2] = $28; //@line 4796
 $215 = $ReallocAsyncCtx + 44 | 0; //@line 4797
 HEAP32[$215 >> 2] = $30; //@line 4798
 $216 = $ReallocAsyncCtx + 48 | 0; //@line 4799
 HEAP32[$216 >> 2] = $173; //@line 4800
 $217 = $ReallocAsyncCtx + 52 | 0; //@line 4801
 HEAP32[$217 >> 2] = $38; //@line 4802
 $218 = $ReallocAsyncCtx + 56 | 0; //@line 4803
 HEAP32[$218 >> 2] = $40; //@line 4804
 $219 = $ReallocAsyncCtx + 60 | 0; //@line 4805
 HEAP32[$219 >> 2] = $46; //@line 4806
 $220 = $ReallocAsyncCtx + 64 | 0; //@line 4807
 HEAP32[$220 >> 2] = $48; //@line 4808
 $221 = $ReallocAsyncCtx + 68 | 0; //@line 4809
 HEAP32[$221 >> 2] = $50; //@line 4810
 $222 = $ReallocAsyncCtx + 72 | 0; //@line 4811
 HEAP32[$222 >> 2] = $52; //@line 4812
 $223 = $ReallocAsyncCtx + 76 | 0; //@line 4813
 HEAP32[$223 >> 2] = $54; //@line 4814
 $224 = $ReallocAsyncCtx + 80 | 0; //@line 4815
 HEAP32[$224 >> 2] = $58; //@line 4816
 $225 = $ReallocAsyncCtx + 84 | 0; //@line 4817
 HEAP32[$225 >> 2] = $60; //@line 4818
 $226 = $ReallocAsyncCtx + 88 | 0; //@line 4819
 HEAP32[$226 >> 2] = $62; //@line 4820
 $227 = $ReallocAsyncCtx + 92 | 0; //@line 4821
 HEAP32[$227 >> 2] = $70; //@line 4822
 $228 = $ReallocAsyncCtx + 96 | 0; //@line 4823
 HEAP32[$228 >> 2] = $174; //@line 4824
 $229 = $ReallocAsyncCtx + 100 | 0; //@line 4825
 HEAP32[$229 >> 2] = $80; //@line 4826
 $230 = $ReallocAsyncCtx + 104 | 0; //@line 4827
 HEAP32[$230 >> 2] = $82; //@line 4828
 $231 = $ReallocAsyncCtx + 108 | 0; //@line 4829
 HEAP32[$231 >> 2] = $84; //@line 4830
 $232 = $ReallocAsyncCtx + 112 | 0; //@line 4831
 HEAP32[$232 >> 2] = $86; //@line 4832
 $233 = $ReallocAsyncCtx + 116 | 0; //@line 4833
 HEAP32[$233 >> 2] = $88; //@line 4834
 $234 = $ReallocAsyncCtx + 120 | 0; //@line 4835
 HEAP32[$234 >> 2] = $90; //@line 4836
 $235 = $ReallocAsyncCtx + 124 | 0; //@line 4837
 HEAP32[$235 >> 2] = $96; //@line 4838
 $236 = $ReallocAsyncCtx + 128 | 0; //@line 4839
 HEAP32[$236 >> 2] = $98; //@line 4840
 $237 = $ReallocAsyncCtx + 132 | 0; //@line 4841
 HEAP32[$237 >> 2] = $102; //@line 4842
 $238 = $ReallocAsyncCtx + 136 | 0; //@line 4843
 HEAP32[$238 >> 2] = $104; //@line 4844
 $239 = $ReallocAsyncCtx + 140 | 0; //@line 4845
 HEAP32[$239 >> 2] = $100; //@line 4846
 $240 = $ReallocAsyncCtx + 144 | 0; //@line 4847
 HEAP32[$240 >> 2] = $106; //@line 4848
 $241 = $ReallocAsyncCtx + 148 | 0; //@line 4849
 HEAP32[$241 >> 2] = $110; //@line 4850
 $242 = $ReallocAsyncCtx + 152 | 0; //@line 4851
 HEAP32[$242 >> 2] = $114; //@line 4852
 $243 = $ReallocAsyncCtx + 156 | 0; //@line 4853
 HEAP32[$243 >> 2] = $116; //@line 4854
 $244 = $ReallocAsyncCtx + 160 | 0; //@line 4855
 HEAP32[$244 >> 2] = $122; //@line 4856
 sp = STACKTOP; //@line 4857
 return;
}
function _equeue_dispatch($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$03956$i = 0, $$03956$i$phi = 0, $$04055$i = 0, $$0405571$i = 0, $$04063$i = 0, $$04159$i = 0, $$04258$i = 0, $$057$i = 0, $$067 = 0, $$06992 = 0, $$2 = 0, $$idx = 0, $$sink$in$i$i = 0, $$sroa$0$i = 0, $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i75 = 0, $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i74 = 0, $10 = 0, $106 = 0, $11 = 0, $12 = 0, $129 = 0, $13 = 0, $131 = 0, $132 = 0, $133 = 0, $135 = 0, $136 = 0, $14 = 0, $144 = 0, $145 = 0, $147 = 0, $15 = 0, $150 = 0, $152 = 0, $155 = 0, $158 = 0, $165 = 0, $169 = 0, $172 = 0, $178 = 0, $2 = 0, $23 = 0, $24 = 0, $27 = 0, $33 = 0, $42 = 0, $45 = 0, $46 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $72 = 0, $74 = 0, $77 = 0, $8 = 0, $9 = 0, $96 = 0, $97 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0, $$04159$i$looptemp = 0, $$04258$i$looptemp = 0;
 sp = STACKTOP; //@line 3833
 STACKTOP = STACKTOP + 16 | 0; //@line 3834
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 3834
 $$sroa$0$i = sp; //@line 3835
 $2 = $0 + 184 | 0; //@line 3836
 if (!(HEAP8[$2 >> 0] | 0)) {
  HEAP8[$2 >> 0] = 1; //@line 3840
 }
 $5 = _equeue_tick() | 0; //@line 3842
 $6 = $5 + $1 | 0; //@line 3843
 $7 = $0 + 36 | 0; //@line 3844
 HEAP8[$7 >> 0] = 0; //@line 3845
 $8 = $0 + 128 | 0; //@line 3846
 $9 = $0 + 9 | 0; //@line 3847
 $10 = $0 + 4 | 0; //@line 3848
 $11 = ($1 | 0) > -1; //@line 3849
 $12 = $0 + 48 | 0; //@line 3850
 $13 = $0 + 8 | 0; //@line 3851
 $$idx = $0 + 16 | 0; //@line 3852
 $14 = $0 + 156 | 0; //@line 3853
 $15 = $0 + 24 | 0; //@line 3854
 $$0 = $5; //@line 3855
 L4 : while (1) {
  _equeue_mutex_lock($8); //@line 3857
  HEAP8[$9 >> 0] = (HEAPU8[$9 >> 0] | 0) + 1; //@line 3862
  if (((HEAP32[$10 >> 2] | 0) - $$0 | 0) < 1) {
   HEAP32[$10 >> 2] = $$0; //@line 3867
  }
  $23 = HEAP32[$0 >> 2] | 0; //@line 3869
  HEAP32[$$sroa$0$i >> 2] = $23; //@line 3870
  $24 = $23; //@line 3871
  L9 : do {
   if (!$23) {
    $$04055$i = $$sroa$0$i; //@line 3875
    $33 = $24; //@line 3875
    label = 10; //@line 3876
   } else {
    $$04063$i = $$sroa$0$i; //@line 3878
    $27 = $24; //@line 3878
    do {
     if (((HEAP32[$27 + 20 >> 2] | 0) - $$0 | 0) >= 1) {
      $$04055$i = $$04063$i; //@line 3885
      $33 = $27; //@line 3885
      label = 10; //@line 3886
      break L9;
     }
     $$04063$i = $27 + 8 | 0; //@line 3889
     $27 = HEAP32[$$04063$i >> 2] | 0; //@line 3890
    } while (($27 | 0) != 0);
    HEAP32[$0 >> 2] = 0; //@line 3898
    $$0405571$i = $$04063$i; //@line 3899
   }
  } while (0);
  if ((label | 0) == 10) {
   label = 0; //@line 3903
   HEAP32[$0 >> 2] = $33; //@line 3904
   if (!$33) {
    $$0405571$i = $$04055$i; //@line 3907
   } else {
    HEAP32[$33 + 16 >> 2] = $0; //@line 3910
    $$0405571$i = $$04055$i; //@line 3911
   }
  }
  HEAP32[$$0405571$i >> 2] = 0; //@line 3914
  _equeue_mutex_unlock($8); //@line 3915
  $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i74 = HEAP32[$$sroa$0$i >> 2] | 0; //@line 3916
  if (!$$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i74) {} else {
   $$04159$i = $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i74; //@line 3920
   $$04258$i = $$sroa$0$i; //@line 3920
   do {
    $$04258$i$looptemp = $$04258$i;
    $$04258$i = $$04159$i + 8 | 0; //@line 3922
    $$04159$i$looptemp = $$04159$i;
    $$04159$i = HEAP32[$$04258$i >> 2] | 0; //@line 3923
    $$03956$i = 0; //@line 3924
    $$057$i = $$04159$i$looptemp; //@line 3924
    while (1) {
     HEAP32[$$057$i + 8 >> 2] = $$03956$i; //@line 3927
     $42 = HEAP32[$$057$i + 12 >> 2] | 0; //@line 3929
     if (!$42) {
      break;
     } else {
      $$03956$i$phi = $$057$i; //@line 3934
      $$057$i = $42; //@line 3934
      $$03956$i = $$03956$i$phi; //@line 3934
     }
    }
    HEAP32[$$04258$i$looptemp >> 2] = $$057$i; //@line 3937
   } while (($$04159$i | 0) != 0);
   $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i75 = HEAP32[$$sroa$0$i >> 2] | 0; //@line 3945
   if ($$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i75 | 0) {
    $$06992 = $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i75; //@line 3948
    while (1) {
     $45 = $$06992 + 8 | 0; //@line 3950
     $46 = HEAP32[$45 >> 2] | 0; //@line 3951
     $48 = HEAP32[$$06992 + 32 >> 2] | 0; //@line 3953
     if ($48 | 0) {
      $AsyncCtx = _emscripten_alloc_async_context(84, sp) | 0; //@line 3957
      FUNCTION_TABLE_vi[$48 & 1023]($$06992 + 36 | 0); //@line 3958
      if (___async) {
       label = 20; //@line 3961
       break L4;
      }
      _emscripten_free_async_context($AsyncCtx | 0); //@line 3964
     }
     $72 = HEAP32[$$06992 + 24 >> 2] | 0; //@line 3967
     if (($72 | 0) > -1) {
      $74 = $$06992 + 20 | 0; //@line 3970
      HEAP32[$74 >> 2] = (HEAP32[$74 >> 2] | 0) + $72; //@line 3973
      $77 = _equeue_tick() | 0; //@line 3974
      $AsyncCtx11 = _emscripten_alloc_async_context(76, sp) | 0; //@line 3975
      _equeue_enqueue($0, $$06992, $77) | 0; //@line 3976
      if (___async) {
       label = 24; //@line 3979
       break L4;
      }
      _emscripten_free_async_context($AsyncCtx11 | 0); //@line 3982
     } else {
      $96 = $$06992 + 4 | 0; //@line 3985
      $97 = HEAP8[$96 >> 0] | 0; //@line 3986
      HEAP8[$96 >> 0] = (($97 + 1 & 255) << HEAP32[$$idx >> 2] | 0) == 0 ? 1 : ($97 & 255) + 1 & 255; //@line 3995
      $106 = HEAP32[$$06992 + 28 >> 2] | 0; //@line 3997
      if ($106 | 0) {
       $AsyncCtx3 = _emscripten_alloc_async_context(84, sp) | 0; //@line 4001
       FUNCTION_TABLE_vi[$106 & 1023]($$06992 + 36 | 0); //@line 4002
       if (___async) {
        label = 28; //@line 4005
        break L4;
       }
       _emscripten_free_async_context($AsyncCtx3 | 0); //@line 4008
      }
      _equeue_mutex_lock($14); //@line 4010
      $129 = HEAP32[$15 >> 2] | 0; //@line 4011
      L40 : do {
       if (!$129) {
        $$02329$i$i = $15; //@line 4015
        label = 36; //@line 4016
       } else {
        $131 = HEAP32[$$06992 >> 2] | 0; //@line 4018
        $$025$i$i = $15; //@line 4019
        $133 = $129; //@line 4019
        while (1) {
         $132 = HEAP32[$133 >> 2] | 0; //@line 4021
         if ($132 >>> 0 >= $131 >>> 0) {
          break;
         }
         $135 = $133 + 8 | 0; //@line 4026
         $136 = HEAP32[$135 >> 2] | 0; //@line 4027
         if (!$136) {
          $$02329$i$i = $135; //@line 4030
          label = 36; //@line 4031
          break L40;
         } else {
          $$025$i$i = $135; //@line 4034
          $133 = $136; //@line 4034
         }
        }
        if (($132 | 0) == ($131 | 0)) {
         HEAP32[$$06992 + 12 >> 2] = $133; //@line 4040
         $$02330$i$i = $$025$i$i; //@line 4043
         $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 4043
        } else {
         $$02329$i$i = $$025$i$i; //@line 4045
         label = 36; //@line 4046
        }
       }
      } while (0);
      if ((label | 0) == 36) {
       label = 0; //@line 4051
       HEAP32[$$06992 + 12 >> 2] = 0; //@line 4053
       $$02330$i$i = $$02329$i$i; //@line 4054
       $$sink$in$i$i = $$02329$i$i; //@line 4054
      }
      HEAP32[$45 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 4057
      HEAP32[$$02330$i$i >> 2] = $$06992; //@line 4058
      _equeue_mutex_unlock($14); //@line 4059
     }
     if (!$46) {
      break;
     } else {
      $$06992 = $46; //@line 4065
     }
    }
   }
  }
  $144 = _equeue_tick() | 0; //@line 4070
  if ($11) {
   $145 = $6 - $144 | 0; //@line 4072
   if (($145 | 0) < 1) {
    label = 41; //@line 4075
    break;
   } else {
    $$067 = $145; //@line 4078
   }
  } else {
   $$067 = -1; //@line 4081
  }
  _equeue_mutex_lock($8); //@line 4083
  $165 = HEAP32[$0 >> 2] | 0; //@line 4084
  if (!$165) {
   $$2 = $$067; //@line 4087
  } else {
   $169 = (HEAP32[$165 + 20 >> 2] | 0) - $144 | 0; //@line 4091
   $172 = $169 & ~($169 >> 31); //@line 4094
   $$2 = $172 >>> 0 < $$067 >>> 0 ? $172 : $$067; //@line 4097
  }
  _equeue_mutex_unlock($8); //@line 4099
  _equeue_sema_wait($12, $$2) | 0; //@line 4100
  if (HEAP8[$13 >> 0] | 0) {
   _equeue_mutex_lock($8); //@line 4104
   if (HEAP8[$13 >> 0] | 0) {
    label = 53; //@line 4108
    break;
   }
   _equeue_mutex_unlock($8); //@line 4111
  }
  $178 = _equeue_tick() | 0; //@line 4113
  $AsyncCtx15 = _emscripten_alloc_async_context(76, sp) | 0; //@line 4114
  _wait_ms(20); //@line 4115
  if (___async) {
   label = 56; //@line 4118
   break;
  }
  _emscripten_free_async_context($AsyncCtx15 | 0); //@line 4121
  $$0 = $178; //@line 4122
 }
 if ((label | 0) == 20) {
  HEAP32[$AsyncCtx >> 2] = 132; //@line 4125
  HEAP32[$AsyncCtx + 4 >> 2] = $$sroa$0$i; //@line 4127
  HEAP32[$AsyncCtx + 8 >> 2] = $8; //@line 4129
  HEAP32[$AsyncCtx + 12 >> 2] = $$sroa$0$i; //@line 4131
  HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 4133
  HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 4135
  HEAP32[$AsyncCtx + 24 >> 2] = $$sroa$0$i; //@line 4137
  HEAP32[$AsyncCtx + 28 >> 2] = $10; //@line 4139
  HEAP32[$AsyncCtx + 32 >> 2] = $9; //@line 4141
  HEAP32[$AsyncCtx + 36 >> 2] = $15; //@line 4143
  HEAP32[$AsyncCtx + 40 >> 2] = $$06992; //@line 4145
  HEAP32[$AsyncCtx + 44 >> 2] = $45; //@line 4147
  HEAP32[$AsyncCtx + 48 >> 2] = $14; //@line 4149
  HEAP32[$AsyncCtx + 52 >> 2] = $46; //@line 4151
  HEAP8[$AsyncCtx + 56 >> 0] = $11 & 1; //@line 4154
  HEAP32[$AsyncCtx + 60 >> 2] = $6; //@line 4156
  HEAP32[$AsyncCtx + 64 >> 2] = $0; //@line 4158
  HEAP32[$AsyncCtx + 68 >> 2] = $$idx; //@line 4160
  HEAP32[$AsyncCtx + 72 >> 2] = $7; //@line 4162
  HEAP32[$AsyncCtx + 76 >> 2] = $13; //@line 4164
  HEAP32[$AsyncCtx + 80 >> 2] = $12; //@line 4166
  sp = STACKTOP; //@line 4167
  STACKTOP = sp; //@line 4168
  return;
 } else if ((label | 0) == 24) {
  HEAP32[$AsyncCtx11 >> 2] = 133; //@line 4171
  HEAP32[$AsyncCtx11 + 4 >> 2] = $$sroa$0$i; //@line 4173
  HEAP32[$AsyncCtx11 + 8 >> 2] = $8; //@line 4175
  HEAP32[$AsyncCtx11 + 12 >> 2] = $$sroa$0$i; //@line 4177
  HEAP32[$AsyncCtx11 + 16 >> 2] = $0; //@line 4179
  HEAP32[$AsyncCtx11 + 20 >> 2] = $0; //@line 4181
  HEAP32[$AsyncCtx11 + 24 >> 2] = $$sroa$0$i; //@line 4183
  HEAP32[$AsyncCtx11 + 28 >> 2] = $10; //@line 4185
  HEAP32[$AsyncCtx11 + 32 >> 2] = $9; //@line 4187
  HEAP32[$AsyncCtx11 + 36 >> 2] = $15; //@line 4189
  HEAP32[$AsyncCtx11 + 40 >> 2] = $14; //@line 4191
  HEAP32[$AsyncCtx11 + 44 >> 2] = $46; //@line 4193
  HEAP8[$AsyncCtx11 + 48 >> 0] = $11 & 1; //@line 4196
  HEAP32[$AsyncCtx11 + 52 >> 2] = $6; //@line 4198
  HEAP32[$AsyncCtx11 + 56 >> 2] = $0; //@line 4200
  HEAP32[$AsyncCtx11 + 60 >> 2] = $$idx; //@line 4202
  HEAP32[$AsyncCtx11 + 64 >> 2] = $7; //@line 4204
  HEAP32[$AsyncCtx11 + 68 >> 2] = $13; //@line 4206
  HEAP32[$AsyncCtx11 + 72 >> 2] = $12; //@line 4208
  sp = STACKTOP; //@line 4209
  STACKTOP = sp; //@line 4210
  return;
 } else if ((label | 0) == 28) {
  HEAP32[$AsyncCtx3 >> 2] = 134; //@line 4213
  HEAP32[$AsyncCtx3 + 4 >> 2] = $$sroa$0$i; //@line 4215
  HEAP32[$AsyncCtx3 + 8 >> 2] = $8; //@line 4217
  HEAP32[$AsyncCtx3 + 12 >> 2] = $$sroa$0$i; //@line 4219
  HEAP32[$AsyncCtx3 + 16 >> 2] = $0; //@line 4221
  HEAP32[$AsyncCtx3 + 20 >> 2] = $0; //@line 4223
  HEAP32[$AsyncCtx3 + 24 >> 2] = $$sroa$0$i; //@line 4225
  HEAP32[$AsyncCtx3 + 28 >> 2] = $10; //@line 4227
  HEAP32[$AsyncCtx3 + 32 >> 2] = $9; //@line 4229
  HEAP32[$AsyncCtx3 + 36 >> 2] = $15; //@line 4231
  HEAP32[$AsyncCtx3 + 40 >> 2] = $$06992; //@line 4233
  HEAP32[$AsyncCtx3 + 44 >> 2] = $45; //@line 4235
  HEAP32[$AsyncCtx3 + 48 >> 2] = $14; //@line 4237
  HEAP32[$AsyncCtx3 + 52 >> 2] = $46; //@line 4239
  HEAP8[$AsyncCtx3 + 56 >> 0] = $11 & 1; //@line 4242
  HEAP32[$AsyncCtx3 + 60 >> 2] = $6; //@line 4244
  HEAP32[$AsyncCtx3 + 64 >> 2] = $0; //@line 4246
  HEAP32[$AsyncCtx3 + 68 >> 2] = $$idx; //@line 4248
  HEAP32[$AsyncCtx3 + 72 >> 2] = $7; //@line 4250
  HEAP32[$AsyncCtx3 + 76 >> 2] = $13; //@line 4252
  HEAP32[$AsyncCtx3 + 80 >> 2] = $12; //@line 4254
  sp = STACKTOP; //@line 4255
  STACKTOP = sp; //@line 4256
  return;
 } else if ((label | 0) == 41) {
  $147 = $0 + 40 | 0; //@line 4259
  if (HEAP32[$147 >> 2] | 0) {
   _equeue_mutex_lock($8); //@line 4263
   $150 = HEAP32[$147 >> 2] | 0; //@line 4264
   do {
    if ($150 | 0) {
     $152 = HEAP32[$0 >> 2] | 0; //@line 4268
     if ($152 | 0) {
      $155 = HEAP32[$0 + 44 >> 2] | 0; //@line 4272
      $158 = (HEAP32[$152 + 20 >> 2] | 0) - $144 | 0; //@line 4275
      $AsyncCtx7 = _emscripten_alloc_async_context(16, sp) | 0; //@line 4279
      FUNCTION_TABLE_vii[$150 & 31]($155, $158 & ~($158 >> 31)); //@line 4280
      if (___async) {
       HEAP32[$AsyncCtx7 >> 2] = 135; //@line 4283
       HEAP32[$AsyncCtx7 + 4 >> 2] = $7; //@line 4285
       HEAP32[$AsyncCtx7 + 8 >> 2] = $8; //@line 4287
       HEAP32[$AsyncCtx7 + 12 >> 2] = $13; //@line 4289
       sp = STACKTOP; //@line 4290
       STACKTOP = sp; //@line 4291
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx7 | 0); //@line 4293
       break;
      }
     }
    }
   } while (0);
   HEAP8[$7 >> 0] = 1; //@line 4299
   _equeue_mutex_unlock($8); //@line 4300
  }
  HEAP8[$13 >> 0] = 0; //@line 4302
  STACKTOP = sp; //@line 4303
  return;
 } else if ((label | 0) == 53) {
  HEAP8[$13 >> 0] = 0; //@line 4306
  _equeue_mutex_unlock($8); //@line 4307
  STACKTOP = sp; //@line 4308
  return;
 } else if ((label | 0) == 56) {
  HEAP32[$AsyncCtx15 >> 2] = 136; //@line 4311
  HEAP32[$AsyncCtx15 + 4 >> 2] = $$sroa$0$i; //@line 4313
  HEAP32[$AsyncCtx15 + 8 >> 2] = $8; //@line 4315
  HEAP32[$AsyncCtx15 + 12 >> 2] = $$sroa$0$i; //@line 4317
  HEAP32[$AsyncCtx15 + 16 >> 2] = $0; //@line 4319
  HEAP32[$AsyncCtx15 + 20 >> 2] = $0; //@line 4321
  HEAP32[$AsyncCtx15 + 24 >> 2] = $$sroa$0$i; //@line 4323
  HEAP32[$AsyncCtx15 + 28 >> 2] = $10; //@line 4325
  HEAP32[$AsyncCtx15 + 32 >> 2] = $178; //@line 4327
  HEAP32[$AsyncCtx15 + 36 >> 2] = $9; //@line 4329
  HEAP32[$AsyncCtx15 + 40 >> 2] = $15; //@line 4331
  HEAP32[$AsyncCtx15 + 44 >> 2] = $14; //@line 4333
  HEAP8[$AsyncCtx15 + 48 >> 0] = $11 & 1; //@line 4336
  HEAP32[$AsyncCtx15 + 52 >> 2] = $6; //@line 4338
  HEAP32[$AsyncCtx15 + 56 >> 2] = $0; //@line 4340
  HEAP32[$AsyncCtx15 + 60 >> 2] = $$idx; //@line 4342
  HEAP32[$AsyncCtx15 + 64 >> 2] = $7; //@line 4344
  HEAP32[$AsyncCtx15 + 68 >> 2] = $13; //@line 4346
  HEAP32[$AsyncCtx15 + 72 >> 2] = $12; //@line 4348
  sp = STACKTOP; //@line 4349
  STACKTOP = sp; //@line 4350
  return;
 }
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$016 = 0, $$05$i = 0, $$06$i = 0, $100 = 0, $108 = 0, $111 = 0, $117 = 0, $119 = 0, $126 = 0, $129 = 0, $134 = 0, $136 = 0, $142 = 0, $145 = 0, $149 = 0, $151 = 0, $156 = 0, $159 = 0, $17 = 0, $39 = 0, $4 = 0, $5 = 0, $51 = 0, $52 = 0, $6 = 0, $61 = 0, $69 = 0, $7 = 0, $76 = 0, $77 = 0, $79 = 0, $8 = 0, $88 = 0, $91 = 0, $98 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx18 = 0, $AsyncCtx21 = 0, $AsyncCtx24 = 0, $AsyncCtx27 = 0, $AsyncCtx3 = 0, $AsyncCtx30 = 0, $AsyncCtx34 = 0, $AsyncCtx37 = 0, $AsyncCtx40 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 16380
 STACKTOP = STACKTOP + 80 | 0; //@line 16381
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80); //@line 16381
 $4 = sp + 64 | 0; //@line 16382
 $5 = sp + 48 | 0; //@line 16383
 $6 = sp + 32 | 0; //@line 16384
 $7 = sp + 16 | 0; //@line 16385
 $8 = sp; //@line 16386
 HEAP32[$0 + 1328 >> 2] = $3; //@line 16388
 if (!$1) {
  $$016 = -1003; //@line 16391
  STACKTOP = sp; //@line 16392
  return $$016 | 0; //@line 16392
 }
 HEAP32[$0 >> 2] = $2; //@line 16394
 __ZN11LoRaMacMlme23activate_mlme_subsystemEP7LoRaPHY($0 + 264 | 0, $2); //@line 16396
 __ZN10LoRaMacMib22activate_mib_subsystemEP7LoRaPHY($0 + 348 | 0, HEAP32[$0 >> 2] | 0); //@line 16399
 __ZN18LoRaMacChannelPlan30activate_channelplan_subsystemEP7LoRaPHY($0 + 352 | 0, HEAP32[$0 >> 2] | 0); //@line 16402
 HEAP32[$0 + 1324 >> 2] = $1; //@line 16404
 $17 = $0 + 360 | 0; //@line 16405
 HEAP8[$0 + 944 >> 0] = 0; //@line 16407
 HEAP32[$17 >> 2] = 0; //@line 16408
 HEAP32[$0 + 968 >> 2] = 0; //@line 16410
 HEAP8[$0 + 897 >> 0] = 0; //@line 16412
 HEAP8[$0 + 896 >> 0] = 1; //@line 16414
 HEAP8[$0 + 369 >> 0] = 0; //@line 16416
 HEAP32[$0 + 980 >> 2] = 0; //@line 16418
 HEAP32[$0 + 984 >> 2] = 0; //@line 16420
 __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb(HEAP32[$0 >> 2] | 0, $17, 1); //@line 16422
 HEAP32[$0 + 1100 >> 2] = 10; //@line 16424
 HEAP8[$0 + 1104 >> 0] = 6; //@line 16426
 HEAP8[$0 + 1128 >> 0] = 1; //@line 16428
 HEAP8[$0 + 372 >> 0] = 0; //@line 16430
 HEAP32[$0 + 956 >> 2] = 0; //@line 16432
 HEAP32[$0 + 960 >> 2] = 0; //@line 16434
 HEAP32[$0 + 964 >> 2] = 0; //@line 16436
 HEAP8[$0 + 380 >> 0] = 0; //@line 16438
 HEAP8[$0 + 894 >> 0] = 1; //@line 16440
 HEAP8[$0 + 895 >> 0] = 1; //@line 16442
 HEAP8[$0 + 377 >> 0] = 0; //@line 16444
 HEAP8[$0 + 1152 >> 0] = 0; //@line 16446
 HEAP16[$0 + 1154 >> 1] = 1; //@line 16448
 $39 = $0 + 4 | 0; //@line 16449
 __ZN14LoRaMacCommand20clear_command_bufferEv($39); //@line 16450
 __ZN14LoRaMacCommand19clear_repeat_bufferEv($39); //@line 16451
 __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($39); //@line 16452
 HEAP8[$0 + 371 >> 0] = 1; //@line 16454
 __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb(HEAP32[$0 >> 2] | 0, $17, 0); //@line 16456
 HEAP8[$0 + 373 >> 0] = 0; //@line 16458
 HEAP8[$0 + 374 >> 0] = 0; //@line 16460
 $$05$i = HEAP32[$0 + 1208 >> 2] | 0; //@line 16462
 if ($$05$i | 0) {
  $$06$i = $$05$i; //@line 16465
  do {
   HEAP32[$$06$i + 36 >> 2] = 0; //@line 16468
   $$06$i = HEAP32[$$06$i + 40 >> 2] | 0; //@line 16470
  } while (($$06$i | 0) != 0);
 }
 HEAP8[$0 + 378 >> 0] = 0; //@line 16480
 HEAP8[$0 + 379 >> 0] = 0; //@line 16482
 $51 = HEAP32[$0 >> 2] | 0; //@line 16483
 $AsyncCtx34 = _emscripten_alloc_async_context(32, sp) | 0; //@line 16484
 $52 = __ZN7LoRaPHY13get_radio_rngEv($51) | 0; //@line 16485
 if (___async) {
  HEAP32[$AsyncCtx34 >> 2] = 440; //@line 16488
  HEAP32[$AsyncCtx34 + 4 >> 2] = $0; //@line 16490
  HEAP32[$AsyncCtx34 + 8 >> 2] = $0; //@line 16492
  HEAP32[$AsyncCtx34 + 12 >> 2] = $8; //@line 16494
  HEAP32[$AsyncCtx34 + 16 >> 2] = $7; //@line 16496
  HEAP32[$AsyncCtx34 + 20 >> 2] = $6; //@line 16498
  HEAP32[$AsyncCtx34 + 24 >> 2] = $5; //@line 16500
  HEAP32[$AsyncCtx34 + 28 >> 2] = $4; //@line 16502
  sp = STACKTOP; //@line 16503
  STACKTOP = sp; //@line 16504
  return 0; //@line 16504
 }
 _emscripten_free_async_context($AsyncCtx34 | 0); //@line 16506
 _srand($52); //@line 16507
 HEAP8[$0 + 368 >> 0] = 1; //@line 16509
 $61 = HEAP32[$0 >> 2] | 0; //@line 16510
 $AsyncCtx37 = _emscripten_alloc_async_context(32, sp) | 0; //@line 16511
 __ZN7LoRaPHY25setup_public_network_modeEb($61, 1); //@line 16512
 if (___async) {
  HEAP32[$AsyncCtx37 >> 2] = 441; //@line 16515
  HEAP32[$AsyncCtx37 + 4 >> 2] = $0; //@line 16517
  HEAP32[$AsyncCtx37 + 8 >> 2] = $8; //@line 16519
  HEAP32[$AsyncCtx37 + 12 >> 2] = $7; //@line 16521
  HEAP32[$AsyncCtx37 + 16 >> 2] = $6; //@line 16523
  HEAP32[$AsyncCtx37 + 20 >> 2] = $5; //@line 16525
  HEAP32[$AsyncCtx37 + 24 >> 2] = $4; //@line 16527
  HEAP32[$AsyncCtx37 + 28 >> 2] = $0; //@line 16529
  sp = STACKTOP; //@line 16530
  STACKTOP = sp; //@line 16531
  return 0; //@line 16531
 }
 _emscripten_free_async_context($AsyncCtx37 | 0); //@line 16533
 $69 = HEAP32[$0 >> 2] | 0; //@line 16534
 $AsyncCtx40 = _emscripten_alloc_async_context(28, sp) | 0; //@line 16535
 __ZN7LoRaPHY18put_radio_to_sleepEv($69); //@line 16536
 if (___async) {
  HEAP32[$AsyncCtx40 >> 2] = 442; //@line 16539
  HEAP32[$AsyncCtx40 + 4 >> 2] = $0; //@line 16541
  HEAP32[$AsyncCtx40 + 8 >> 2] = $8; //@line 16543
  HEAP32[$AsyncCtx40 + 12 >> 2] = $7; //@line 16545
  HEAP32[$AsyncCtx40 + 16 >> 2] = $6; //@line 16547
  HEAP32[$AsyncCtx40 + 20 >> 2] = $5; //@line 16549
  HEAP32[$AsyncCtx40 + 24 >> 2] = $4; //@line 16551
  sp = STACKTOP; //@line 16552
  STACKTOP = sp; //@line 16553
  return 0; //@line 16553
 }
 _emscripten_free_async_context($AsyncCtx40 | 0); //@line 16555
 $76 = $0 + 356 | 0; //@line 16556
 $77 = HEAP32[$76 >> 2] | 0; //@line 16557
 $79 = $4 + 12 | 0; //@line 16559
 HEAP32[$4 >> 2] = 443; //@line 16560
 HEAP32[$4 + 4 >> 2] = 0; //@line 16562
 HEAP32[$4 + 8 >> 2] = $0; //@line 16564
 HEAP32[$79 >> 2] = 912; //@line 16565
 $AsyncCtx30 = _emscripten_alloc_async_context(36, sp) | 0; //@line 16566
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($77, $0 + 996 | 0, $4); //@line 16567
 if (___async) {
  HEAP32[$AsyncCtx30 >> 2] = 444; //@line 16570
  HEAP32[$AsyncCtx30 + 4 >> 2] = $76; //@line 16572
  HEAP32[$AsyncCtx30 + 8 >> 2] = $0; //@line 16574
  HEAP32[$AsyncCtx30 + 12 >> 2] = $8; //@line 16576
  HEAP32[$AsyncCtx30 + 16 >> 2] = $7; //@line 16578
  HEAP32[$AsyncCtx30 + 20 >> 2] = $6; //@line 16580
  HEAP32[$AsyncCtx30 + 24 >> 2] = $5; //@line 16582
  HEAP32[$AsyncCtx30 + 28 >> 2] = $79; //@line 16584
  HEAP32[$AsyncCtx30 + 32 >> 2] = $4; //@line 16586
  sp = STACKTOP; //@line 16587
  STACKTOP = sp; //@line 16588
  return 0; //@line 16588
 }
 _emscripten_free_async_context($AsyncCtx30 | 0); //@line 16590
 $88 = HEAP32[$79 >> 2] | 0; //@line 16591
 do {
  if ($88 | 0) {
   $91 = HEAP32[$88 + 8 >> 2] | 0; //@line 16596
   $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 16597
   FUNCTION_TABLE_vi[$91 & 1023]($4); //@line 16598
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 445; //@line 16601
    HEAP32[$AsyncCtx + 4 >> 2] = $8; //@line 16603
    HEAP32[$AsyncCtx + 8 >> 2] = $76; //@line 16605
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 16607
    HEAP32[$AsyncCtx + 16 >> 2] = $7; //@line 16609
    HEAP32[$AsyncCtx + 20 >> 2] = $6; //@line 16611
    HEAP32[$AsyncCtx + 24 >> 2] = $5; //@line 16613
    sp = STACKTOP; //@line 16614
    STACKTOP = sp; //@line 16615
    return 0; //@line 16615
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 16617
    break;
   }
  }
 } while (0);
 $98 = HEAP32[$76 >> 2] | 0; //@line 16622
 $100 = $5 + 12 | 0; //@line 16624
 HEAP32[$5 >> 2] = 446; //@line 16625
 HEAP32[$5 + 4 >> 2] = 0; //@line 16627
 HEAP32[$5 + 8 >> 2] = $0; //@line 16629
 HEAP32[$100 >> 2] = 912; //@line 16630
 $AsyncCtx27 = _emscripten_alloc_async_context(32, sp) | 0; //@line 16631
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($98, $0 + 1016 | 0, $5); //@line 16632
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 447; //@line 16635
  HEAP32[$AsyncCtx27 + 4 >> 2] = $76; //@line 16637
  HEAP32[$AsyncCtx27 + 8 >> 2] = $0; //@line 16639
  HEAP32[$AsyncCtx27 + 12 >> 2] = $8; //@line 16641
  HEAP32[$AsyncCtx27 + 16 >> 2] = $100; //@line 16643
  HEAP32[$AsyncCtx27 + 20 >> 2] = $7; //@line 16645
  HEAP32[$AsyncCtx27 + 24 >> 2] = $6; //@line 16647
  HEAP32[$AsyncCtx27 + 28 >> 2] = $5; //@line 16649
  sp = STACKTOP; //@line 16650
  STACKTOP = sp; //@line 16651
  return 0; //@line 16651
 }
 _emscripten_free_async_context($AsyncCtx27 | 0); //@line 16653
 $108 = HEAP32[$100 >> 2] | 0; //@line 16654
 do {
  if ($108 | 0) {
   $111 = HEAP32[$108 + 8 >> 2] | 0; //@line 16659
   $AsyncCtx3 = _emscripten_alloc_async_context(24, sp) | 0; //@line 16660
   FUNCTION_TABLE_vi[$111 & 1023]($5); //@line 16661
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 448; //@line 16664
    HEAP32[$AsyncCtx3 + 4 >> 2] = $8; //@line 16666
    HEAP32[$AsyncCtx3 + 8 >> 2] = $76; //@line 16668
    HEAP32[$AsyncCtx3 + 12 >> 2] = $0; //@line 16670
    HEAP32[$AsyncCtx3 + 16 >> 2] = $7; //@line 16672
    HEAP32[$AsyncCtx3 + 20 >> 2] = $6; //@line 16674
    sp = STACKTOP; //@line 16675
    STACKTOP = sp; //@line 16676
    return 0; //@line 16676
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 16678
    break;
   }
  }
 } while (0);
 $117 = HEAP32[$76 >> 2] | 0; //@line 16683
 $119 = $6 + 12 | 0; //@line 16685
 HEAP32[$6 >> 2] = 449; //@line 16686
 HEAP32[$6 + 4 >> 2] = 0; //@line 16688
 HEAP32[$6 + 8 >> 2] = $0; //@line 16690
 HEAP32[$119 >> 2] = 912; //@line 16691
 $AsyncCtx24 = _emscripten_alloc_async_context(28, sp) | 0; //@line 16692
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($117, $0 + 1036 | 0, $6); //@line 16693
 if (___async) {
  HEAP32[$AsyncCtx24 >> 2] = 450; //@line 16696
  HEAP32[$AsyncCtx24 + 4 >> 2] = $76; //@line 16698
  HEAP32[$AsyncCtx24 + 8 >> 2] = $0; //@line 16700
  HEAP32[$AsyncCtx24 + 12 >> 2] = $8; //@line 16702
  HEAP32[$AsyncCtx24 + 16 >> 2] = $7; //@line 16704
  HEAP32[$AsyncCtx24 + 20 >> 2] = $6; //@line 16706
  HEAP32[$AsyncCtx24 + 24 >> 2] = $119; //@line 16708
  sp = STACKTOP; //@line 16709
  STACKTOP = sp; //@line 16710
  return 0; //@line 16710
 }
 _emscripten_free_async_context($AsyncCtx24 | 0); //@line 16712
 $126 = HEAP32[$119 >> 2] | 0; //@line 16713
 do {
  if ($126 | 0) {
   $129 = HEAP32[$126 + 8 >> 2] | 0; //@line 16718
   $AsyncCtx7 = _emscripten_alloc_async_context(20, sp) | 0; //@line 16719
   FUNCTION_TABLE_vi[$129 & 1023]($6); //@line 16720
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 451; //@line 16723
    HEAP32[$AsyncCtx7 + 4 >> 2] = $76; //@line 16725
    HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 16727
    HEAP32[$AsyncCtx7 + 12 >> 2] = $7; //@line 16729
    HEAP32[$AsyncCtx7 + 16 >> 2] = $8; //@line 16731
    sp = STACKTOP; //@line 16732
    STACKTOP = sp; //@line 16733
    return 0; //@line 16733
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 16735
    break;
   }
  }
 } while (0);
 $134 = HEAP32[$76 >> 2] | 0; //@line 16740
 $136 = $7 + 12 | 0; //@line 16742
 HEAP32[$7 >> 2] = 452; //@line 16743
 HEAP32[$7 + 4 >> 2] = 0; //@line 16745
 HEAP32[$7 + 8 >> 2] = $0; //@line 16747
 HEAP32[$136 >> 2] = 912; //@line 16748
 $AsyncCtx21 = _emscripten_alloc_async_context(24, sp) | 0; //@line 16749
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($134, $0 + 1056 | 0, $7); //@line 16750
 if (___async) {
  HEAP32[$AsyncCtx21 >> 2] = 453; //@line 16753
  HEAP32[$AsyncCtx21 + 4 >> 2] = $136; //@line 16755
  HEAP32[$AsyncCtx21 + 8 >> 2] = $76; //@line 16757
  HEAP32[$AsyncCtx21 + 12 >> 2] = $0; //@line 16759
  HEAP32[$AsyncCtx21 + 16 >> 2] = $8; //@line 16761
  HEAP32[$AsyncCtx21 + 20 >> 2] = $7; //@line 16763
  sp = STACKTOP; //@line 16764
  STACKTOP = sp; //@line 16765
  return 0; //@line 16765
 }
 _emscripten_free_async_context($AsyncCtx21 | 0); //@line 16767
 $142 = HEAP32[$136 >> 2] | 0; //@line 16768
 do {
  if ($142 | 0) {
   $145 = HEAP32[$142 + 8 >> 2] | 0; //@line 16773
   $AsyncCtx11 = _emscripten_alloc_async_context(16, sp) | 0; //@line 16774
   FUNCTION_TABLE_vi[$145 & 1023]($7); //@line 16775
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 454; //@line 16778
    HEAP32[$AsyncCtx11 + 4 >> 2] = $76; //@line 16780
    HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 16782
    HEAP32[$AsyncCtx11 + 12 >> 2] = $8; //@line 16784
    sp = STACKTOP; //@line 16785
    STACKTOP = sp; //@line 16786
    return 0; //@line 16786
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 16788
    break;
   }
  }
 } while (0);
 $149 = HEAP32[$76 >> 2] | 0; //@line 16793
 $151 = $8 + 12 | 0; //@line 16795
 HEAP32[$8 >> 2] = 455; //@line 16796
 HEAP32[$8 + 4 >> 2] = 0; //@line 16798
 HEAP32[$8 + 8 >> 2] = $0; //@line 16800
 HEAP32[$151 >> 2] = 912; //@line 16801
 $AsyncCtx18 = _emscripten_alloc_async_context(20, sp) | 0; //@line 16802
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($149, $0 + 1076 | 0, $8); //@line 16803
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 456; //@line 16806
  HEAP32[$AsyncCtx18 + 4 >> 2] = $151; //@line 16808
  HEAP32[$AsyncCtx18 + 8 >> 2] = $76; //@line 16810
  HEAP32[$AsyncCtx18 + 12 >> 2] = $0; //@line 16812
  HEAP32[$AsyncCtx18 + 16 >> 2] = $8; //@line 16814
  sp = STACKTOP; //@line 16815
  STACKTOP = sp; //@line 16816
  return 0; //@line 16816
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 16818
 $156 = HEAP32[$151 >> 2] | 0; //@line 16819
 do {
  if ($156 | 0) {
   $159 = HEAP32[$156 + 8 >> 2] | 0; //@line 16824
   $AsyncCtx15 = _emscripten_alloc_async_context(12, sp) | 0; //@line 16825
   FUNCTION_TABLE_vi[$159 & 1023]($8); //@line 16826
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 457; //@line 16829
    HEAP32[$AsyncCtx15 + 4 >> 2] = $76; //@line 16831
    HEAP32[$AsyncCtx15 + 8 >> 2] = $0; //@line 16833
    sp = STACKTOP; //@line 16834
    STACKTOP = sp; //@line 16835
    return 0; //@line 16835
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 16837
    break;
   }
  }
 } while (0);
 HEAP32[$0 + 988 >> 2] = __ZN18LoRaWANTimeHandler16get_current_timeEv(HEAP32[$76 >> 2] | 0) | 0; //@line 16845
 $$016 = 0; //@line 16846
 STACKTOP = sp; //@line 16847
 return $$016 | 0; //@line 16847
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$054 = 0, $$055 = 0, $$05564 = 0, $$056 = 0, $$05663 = 0, $$05766 = 0, $$06065 = 0, $$158 = 0, $$15862 = 0, $$259 = 0, $$extract$t = 0, $$pre$phiZ2D = 0, $10 = 0, $103 = 0, $109 = 0, $115 = 0, $12 = 0, $125 = 0, $129 = 0, $142 = 0, $147 = 0, $148 = 0, $16 = 0, $161 = 0, $162 = 0, $163 = 0, $169 = 0, $170 = 0, $174 = 0, $176 = 0, $182 = 0, $183 = 0, $186 = 0, $188 = 0, $201 = 0, $213 = 0, $222 = 0, $227 = 0, $229 = 0, $230 = 0, $231 = 0, $238 = 0, $41 = 0, $6 = 0, $64 = 0, $65 = 0, $7 = 0, $72 = 0, $74 = 0, $8 = 0, $80 = 0, $81 = 0, $86 = 0, $88 = 0, $89 = 0, $9 = 0, $95 = 0, $97 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 15571
 STACKTOP = STACKTOP + 16 | 0; //@line 15572
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15572
 $6 = sp; //@line 15573
 HEAP32[$6 >> 2] = 0; //@line 15574
 $7 = $0 + 636 | 0; //@line 15575
 HEAP16[$7 >> 1] = 0; //@line 15576
 $8 = $0 + 373 | 0; //@line 15577
 HEAP8[$8 >> 0] = 0; //@line 15578
 $9 = ($4 | 0) == 0; //@line 15579
 $$extract$t = $9 ? 0 : $5 & 255; //@line 15581
 $10 = $0 + 893 | 0; //@line 15582
 HEAP8[$10 >> 0] = $$extract$t; //@line 15583
 $12 = $0 + 381 | 0; //@line 15585
 HEAP8[$12 >> 0] = HEAP8[$1 >> 0] | 0; //@line 15586
 switch ((HEAPU8[$1 >> 0] | 0) >>> 5 & 7) {
 case 0:
  {
   HEAP16[$7 >> 1] = 1; //@line 15592
   $16 = HEAP32[$0 + 904 >> 2] | 0; //@line 15595
   HEAP8[$0 + 389 >> 0] = HEAP8[$16 >> 0] | 0; //@line 15600
   HEAP8[$0 + 388 >> 0] = HEAP8[$16 + 1 >> 0] | 0; //@line 15604
   HEAP8[$0 + 387 >> 0] = HEAP8[$16 + 2 >> 0] | 0; //@line 15608
   HEAP8[$0 + 386 >> 0] = HEAP8[$16 + 3 >> 0] | 0; //@line 15612
   HEAP8[$0 + 385 >> 0] = HEAP8[$16 + 4 >> 0] | 0; //@line 15616
   HEAP8[$0 + 384 >> 0] = HEAP8[$16 + 5 >> 0] | 0; //@line 15620
   HEAP8[$0 + 383 >> 0] = HEAP8[$16 + 6 >> 0] | 0; //@line 15623
   HEAP8[$0 + 382 >> 0] = HEAP8[$16 + 7 >> 0] | 0; //@line 15625
   HEAP16[$7 >> 1] = 9; //@line 15626
   $41 = HEAP32[$0 + 900 >> 2] | 0; //@line 15629
   HEAP8[$0 + 397 >> 0] = HEAP8[$41 >> 0] | 0; //@line 15634
   HEAP8[$0 + 396 >> 0] = HEAP8[$41 + 1 >> 0] | 0; //@line 15638
   HEAP8[$0 + 395 >> 0] = HEAP8[$41 + 2 >> 0] | 0; //@line 15642
   HEAP8[$0 + 394 >> 0] = HEAP8[$41 + 3 >> 0] | 0; //@line 15646
   HEAP8[$0 + 393 >> 0] = HEAP8[$41 + 4 >> 0] | 0; //@line 15650
   HEAP8[$0 + 392 >> 0] = HEAP8[$41 + 5 >> 0] | 0; //@line 15654
   HEAP8[$0 + 391 >> 0] = HEAP8[$41 + 6 >> 0] | 0; //@line 15657
   HEAP8[$0 + 390 >> 0] = HEAP8[$41 + 7 >> 0] | 0; //@line 15659
   HEAP16[$7 >> 1] = 17; //@line 15660
   $64 = HEAP32[$0 >> 2] | 0; //@line 15661
   $AsyncCtx11 = _emscripten_alloc_async_context(24, sp) | 0; //@line 15662
   $65 = __ZN7LoRaPHY13get_radio_rngEv($64) | 0; //@line 15663
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 423; //@line 15666
    HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 15668
    HEAP32[$AsyncCtx11 + 8 >> 2] = $7; //@line 15670
    HEAP32[$AsyncCtx11 + 12 >> 2] = $12; //@line 15672
    HEAP32[$AsyncCtx11 + 16 >> 2] = $6; //@line 15674
    HEAP32[$AsyncCtx11 + 20 >> 2] = $6; //@line 15676
    sp = STACKTOP; //@line 15677
    STACKTOP = sp; //@line 15678
    return 0; //@line 15678
   }
   _emscripten_free_async_context($AsyncCtx11 | 0); //@line 15680
   $72 = $0 + 946 | 0; //@line 15682
   HEAP16[$72 >> 1] = $65; //@line 15683
   $74 = HEAP16[$7 >> 1] | 0; //@line 15685
   HEAP16[$7 >> 1] = $74 + 1 << 16 >> 16; //@line 15687
   HEAP8[($74 & 65535) + ($0 + 381) >> 0] = $65; //@line 15690
   $80 = (HEAPU16[$72 >> 1] | 0) >>> 8 & 255; //@line 15693
   $81 = HEAP16[$7 >> 1] | 0; //@line 15694
   HEAP16[$7 >> 1] = $81 + 1 << 16 >> 16; //@line 15696
   HEAP8[($81 & 65535) + ($0 + 381) >> 0] = $80; //@line 15699
   $86 = HEAP16[$7 >> 1] & 255; //@line 15701
   $88 = HEAP32[$0 + 908 >> 2] | 0; //@line 15703
   $AsyncCtx3 = _emscripten_alloc_async_context(20, sp) | 0; //@line 15704
   $89 = __Z22compute_join_frame_micPKhtS0_Pj($12, $86, $88, $6) | 0; //@line 15705
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 424; //@line 15708
    HEAP32[$AsyncCtx3 + 4 >> 2] = $6; //@line 15710
    HEAP32[$AsyncCtx3 + 8 >> 2] = $7; //@line 15712
    HEAP32[$AsyncCtx3 + 12 >> 2] = $0; //@line 15714
    HEAP32[$AsyncCtx3 + 16 >> 2] = $6; //@line 15716
    sp = STACKTOP; //@line 15717
    STACKTOP = sp; //@line 15718
    return 0; //@line 15718
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15720
   if ($89 | 0) {
    $$0 = -1014; //@line 15723
    STACKTOP = sp; //@line 15724
    return $$0 | 0; //@line 15724
   }
   $95 = HEAP32[$6 >> 2] | 0; //@line 15726
   $97 = HEAP16[$7 >> 1] | 0; //@line 15728
   HEAP16[$7 >> 1] = $97 + 1 << 16 >> 16; //@line 15730
   HEAP8[($97 & 65535) + ($0 + 381) >> 0] = $95; //@line 15733
   $103 = HEAP16[$7 >> 1] | 0; //@line 15736
   HEAP16[$7 >> 1] = $103 + 1 << 16 >> 16; //@line 15738
   HEAP8[($103 & 65535) + ($0 + 381) >> 0] = $95 >>> 8; //@line 15741
   $109 = HEAP16[$7 >> 1] | 0; //@line 15744
   HEAP16[$7 >> 1] = $109 + 1 << 16 >> 16; //@line 15746
   HEAP8[($109 & 65535) + ($0 + 381) >> 0] = $95 >>> 16; //@line 15749
   $115 = HEAP16[$7 >> 1] | 0; //@line 15752
   HEAP16[$7 >> 1] = $115 + 1 << 16 >> 16; //@line 15754
   HEAP8[($115 & 65535) + ($0 + 381) >> 0] = $95 >>> 24; //@line 15757
   $$0 = 0; //@line 15758
   STACKTOP = sp; //@line 15759
   return $$0 | 0; //@line 15759
  }
 case 4:
  {
   HEAP8[$8 >> 0] = 1; //@line 15763
   break;
  }
 case 2:
  {
   break;
  }
 case 7:
  {
   if ($9 | $$extract$t << 24 >> 24 == 0) {
    $$0 = 0; //@line 15773
    STACKTOP = sp; //@line 15774
    return $$0 | 0; //@line 15774
   }
   _memcpy($0 + 382 | 0, $4 | 0, $$extract$t & 255 | 0) | 0; //@line 15778
   HEAP16[$7 >> 1] = (HEAPU8[$10 >> 0] | 0) + 1; //@line 15783
   $$0 = 0; //@line 15784
   STACKTOP = sp; //@line 15785
   return $$0 | 0; //@line 15785
  }
 default:
  {
   $$0 = -1002; //@line 15789
   STACKTOP = sp; //@line 15790
   return $$0 | 0; //@line 15790
  }
 }
 if (!(HEAP8[$0 + 372 >> 0] | 0)) {
  $$0 = -1009; //@line 15797
  STACKTOP = sp; //@line 15798
  return $$0 | 0; //@line 15798
 }
 if (HEAP8[$0 + 1156 >> 0] | 0) {
  $125 = HEAP32[$0 >> 2] | 0; //@line 15804
  $AsyncCtx7 = _emscripten_alloc_async_context(44, sp) | 0; //@line 15808
  $129 = __ZN7LoRaPHY12get_next_ADREbRaS0_Rj($125, 1, $0 + 1097 | 0, $0 + 1096 | 0, $0 + 964 | 0) | 0; //@line 15809
  if (___async) {
   HEAP32[$AsyncCtx7 >> 2] = 425; //@line 15812
   HEAP32[$AsyncCtx7 + 4 >> 2] = $2; //@line 15814
   HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 15816
   HEAP8[$AsyncCtx7 + 12 >> 0] = $9 & 1; //@line 15819
   HEAP32[$AsyncCtx7 + 16 >> 2] = $10; //@line 15821
   HEAP32[$AsyncCtx7 + 20 >> 2] = $6; //@line 15823
   HEAP32[$AsyncCtx7 + 24 >> 2] = $4; //@line 15825
   HEAP8[$AsyncCtx7 + 28 >> 0] = $3; //@line 15827
   HEAP32[$AsyncCtx7 + 32 >> 2] = $7; //@line 15829
   HEAP32[$AsyncCtx7 + 36 >> 2] = $12; //@line 15831
   HEAP32[$AsyncCtx7 + 40 >> 2] = $6; //@line 15833
   sp = STACKTOP; //@line 15834
   STACKTOP = sp; //@line 15835
   return 0; //@line 15835
  }
  _emscripten_free_async_context($AsyncCtx7 | 0); //@line 15837
  if ($129) {
   HEAP8[$2 >> 0] = HEAP8[$2 >> 0] | 64; //@line 15841
  }
 }
 $142 = $0 + 374 | 0; //@line 15844
 if (!(HEAP8[$142 >> 0] | 0)) {
  $$pre$phiZ2D = $2; //@line 15848
 } else {
  HEAP8[$142 >> 0] = 0; //@line 15850
  HEAP8[$2 >> 0] = HEAP8[$2 >> 0] | 32; //@line 15853
  $$pre$phiZ2D = $2; //@line 15854
 }
 $147 = $0 + 952 | 0; //@line 15856
 $148 = HEAP32[$147 >> 2] | 0; //@line 15857
 HEAP8[$0 + 382 >> 0] = $148; //@line 15860
 HEAP8[$0 + 383 >> 0] = $148 >>> 8; //@line 15864
 HEAP8[$0 + 384 >> 0] = $148 >>> 16; //@line 15868
 HEAP8[$0 + 385 >> 0] = $148 >>> 24; //@line 15872
 $161 = $0 + 386 | 0; //@line 15874
 HEAP8[$161 >> 0] = HEAP8[$$pre$phiZ2D >> 0] | 0; //@line 15875
 $162 = $0 + 956 | 0; //@line 15876
 $163 = HEAP32[$162 >> 2] | 0; //@line 15877
 HEAP8[$0 + 387 >> 0] = $163; //@line 15880
 HEAP8[$0 + 388 >> 0] = $163 >>> 8; //@line 15884
 $169 = $0 + 4 | 0; //@line 15885
 __ZN14LoRaMacCommand30copy_repeat_commands_to_bufferEv($169); //@line 15886
 $170 = __ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($169) | 0; //@line 15887
 do {
  if ($9) {
   label = 27; //@line 15890
  } else {
   if (!(HEAP8[$10 >> 0] | 0)) {
    label = 27; //@line 15895
   } else {
    if (!(__ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($169) | 0)) {
     __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($169); //@line 15899
     $$05564 = $3; //@line 15900
     $$05663 = $4; //@line 15900
     $$15862 = 8; //@line 15900
     label = 31; //@line 15901
     break;
    }
    $174 = $170 & 255; //@line 15904
    if (($170 & 255) >= 16) {
     HEAP8[$10 >> 0] = $170; //@line 15907
     $$055 = 0; //@line 15909
     $$056 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($169) | 0; //@line 15909
     $$158 = 8; //@line 15909
     label = 30; //@line 15910
     break;
    }
    $176 = HEAP8[$$pre$phiZ2D >> 0] | 0; //@line 15913
    $182 = ($176 & 255) + $174 & 15 | $176 & -16; //@line 15919
    HEAP8[$$pre$phiZ2D >> 0] = $182; //@line 15920
    HEAP8[$161 >> 0] = $182; //@line 15921
    $183 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($169) | 0; //@line 15922
    if (!($170 << 24 >> 24)) {
     __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($169); //@line 15925
     $$05564 = $3; //@line 15926
     $$05663 = $4; //@line 15926
     $$15862 = 8; //@line 15926
     label = 31; //@line 15927
     break;
    } else {
     $$05766 = 8; //@line 15930
     $$06065 = 0; //@line 15930
     $186 = 0; //@line 15930
     while (1) {
      $188 = $$05766 + 1 << 24 >> 24; //@line 15934
      HEAP8[($$05766 & 255) + ($0 + 381) >> 0] = HEAP8[$183 + $186 >> 0] | 0; //@line 15937
      $$06065 = $$06065 + 1 << 16 >> 16; //@line 15938
      $186 = $$06065 & 65535; //@line 15939
      if ($186 >>> 0 >= $174 >>> 0) {
       $$055 = $3; //@line 15944
       $$056 = $4; //@line 15944
       $$158 = $188; //@line 15944
       label = 30; //@line 15945
       break;
      } else {
       $$05766 = $188; //@line 15942
      }
     }
    }
   }
  }
 } while (0);
 if ((label | 0) == 27) {
  if (!($170 << 24 >> 24)) {
   $$055 = $3; //@line 15956
   $$056 = $4; //@line 15956
   $$158 = 8; //@line 15956
   label = 30; //@line 15957
  } else {
   if (__ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($169) | 0) {
    HEAP8[$10 >> 0] = $170; //@line 15961
    $$055 = 0; //@line 15963
    $$056 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($169) | 0; //@line 15963
    $$158 = 8; //@line 15963
    label = 30; //@line 15964
   } else {
    $$055 = $3; //@line 15966
    $$056 = $4; //@line 15966
    $$158 = 8; //@line 15966
    label = 30; //@line 15967
   }
  }
 }
 if ((label | 0) == 30) {
  __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($169); //@line 15972
  if (!$$056) {
   $$054 = 0; //@line 15975
   $$259 = $$158; //@line 15975
  } else {
   $$05564 = $$055; //@line 15977
   $$05663 = $$056; //@line 15977
   $$15862 = $$158; //@line 15977
   label = 31; //@line 15978
  }
 }
 do {
  if ((label | 0) == 31) {
   if (!(HEAP8[$10 >> 0] | 0)) {
    $$054 = 0; //@line 15986
    $$259 = $$15862; //@line 15986
   } else {
    $201 = $$15862 + 1 << 24 >> 24; //@line 15988
    HEAP8[($$15862 & 255) + ($0 + 381) >> 0] = $$05564; //@line 15991
    if (!($$05564 << 24 >> 24)) {
     __ZN14LoRaMacCommand20clear_command_bufferEv($169); //@line 15994
     $213 = (__Z15encrypt_payloadPKhtS0_jhjPh($$05663, HEAPU8[$10 >> 0] | 0, $0 + 912 | 0, HEAP32[$147 >> 2] | 0, 0, HEAP32[$162 >> 2] | 0, ($201 & 255) + ($0 + 381) | 0) | 0) == 0; //@line 16003
     $$054 = $213 ? 0 : -1014; //@line 16005
     $$259 = $201; //@line 16005
     break;
    } else {
     $222 = (__Z15encrypt_payloadPKhtS0_jhjPh($$05663, HEAPU8[$10 >> 0] | 0, $0 + 928 | 0, HEAP32[$147 >> 2] | 0, 0, HEAP32[$162 >> 2] | 0, ($201 & 255) + ($0 + 381) | 0) | 0) == 0; //@line 16016
     $$054 = $222 ? 0 : -1014; //@line 16018
     $$259 = $201; //@line 16018
     break;
    }
   }
  }
 } while (0);
 $227 = (HEAPU8[$10 >> 0] | 0) + ($$259 & 255) & 65535; //@line 16028
 HEAP16[$7 >> 1] = $227; //@line 16029
 $229 = HEAP32[$147 >> 2] | 0; //@line 16031
 $230 = HEAP32[$162 >> 2] | 0; //@line 16032
 $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 16033
 $231 = __Z11compute_micPKhtS0_jhjPj($12, $227, $0 + 912 | 0, $229, 0, $230, $6) | 0; //@line 16034
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 426; //@line 16037
  HEAP32[$AsyncCtx + 4 >> 2] = $$054; //@line 16039
  HEAP32[$AsyncCtx + 8 >> 2] = $6; //@line 16041
  HEAP32[$AsyncCtx + 12 >> 2] = $7; //@line 16043
  HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 16045
  HEAP32[$AsyncCtx + 20 >> 2] = $6; //@line 16047
  sp = STACKTOP; //@line 16048
  STACKTOP = sp; //@line 16049
  return 0; //@line 16049
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 16051
 $238 = HEAP32[$6 >> 2] | 0; //@line 16054
 HEAP8[(HEAPU16[$7 >> 1] | 0) + ($0 + 381) >> 0] = $238; //@line 16059
 HEAP8[(HEAPU16[$7 >> 1] | 0) + 1 + ($0 + 381) >> 0] = $238 >>> 8; //@line 16066
 HEAP8[(HEAPU16[$7 >> 1] | 0) + 2 + ($0 + 381) >> 0] = $238 >>> 16; //@line 16073
 HEAP8[(HEAPU16[$7 >> 1] | 0) + 3 + ($0 + 381) >> 0] = $238 >>> 24; //@line 16080
 HEAP16[$7 >> 1] = (HEAPU16[$7 >> 1] | 0) + 4; //@line 16085
 $$0 = ($231 | 0) == 0 ? $$054 : -1014; //@line 16086
 STACKTOP = sp; //@line 16087
 return $$0 | 0; //@line 16087
}
function __ZN7LoRaMac11schedule_txEv($0) {
 $0 = $0 | 0;
 var $$1 = 0, $$pre$phiZ2D = 0, $$sink = 0, $1 = 0, $100 = 0, $101 = 0, $103 = 0, $104 = 0, $11 = 0, $118 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $14 = 0, $142 = 0, $145 = 0, $147 = 0, $148 = 0, $149 = 0, $174 = 0, $175 = 0, $177 = 0, $185 = 0, $2 = 0, $20 = 0, $201 = 0, $203 = 0, $206 = 0, $209 = 0, $211 = 0, $28 = 0, $3 = 0, $34 = 0, $35 = 0, $37 = 0, $44 = 0, $47 = 0, $48 = 0, $49 = 0, $6 = 0, $69 = 0, $70 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $96 = 0, $97 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx21 = 0, $AsyncCtx25 = 0, $AsyncCtx8 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0, sp = 0;
 sp = STACKTOP; //@line 14968
 STACKTOP = STACKTOP + 48 | 0; //@line 14969
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 14969
 $vararg_buffer4 = sp + 16 | 0; //@line 14970
 $vararg_buffer2 = sp + 8 | 0; //@line 14971
 $vararg_buffer = sp; //@line 14972
 $1 = sp + 36 | 0; //@line 14973
 $2 = sp + 32 | 0; //@line 14974
 $3 = sp + 20 | 0; //@line 14975
 HEAP32[$2 >> 2] = 0; //@line 14976
 switch (HEAP8[$0 + 1152 >> 0] | 0) {
 case 0:
  {
   $6 = $0 + 984 | 0; //@line 14981
   HEAP32[$6 >> 2] = 0; //@line 14982
   $$pre$phiZ2D = $6; //@line 14983
   break;
  }
 case -1:
  {
   $$1 = -1011; //@line 14987
   STACKTOP = sp; //@line 14988
   return $$1 | 0; //@line 14988
  }
 default:
  {
   $$pre$phiZ2D = $0 + 984 | 0; //@line 14993
  }
 }
 $8 = HEAP8[$0 + 379 >> 0] | 0; //@line 14997
 $9 = $0 + 372 | 0; //@line 14998
 HEAP8[$1 >> 0] = HEAP8[$9 >> 0] | 0; //@line 15000
 $11 = $0 + 375 | 0; //@line 15001
 HEAP8[$11 >> 0] = 1; //@line 15002
 HEAP8[$1 + 2 >> 0] = 1; //@line 15004
 HEAP8[$1 + 3 >> 0] = $8; //@line 15006
 $14 = $0 + 356 | 0; //@line 15007
 HEAP32[$1 + 4 >> 2] = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$14 >> 2] | 0, HEAP32[$0 + 988 >> 2] | 0) | 0; //@line 15013
 $20 = $0 + 992 | 0; //@line 15014
 HEAP32[$1 + 8 >> 2] = HEAP32[$20 >> 2]; //@line 15017
 HEAP8[$1 + 1 >> 0] = HEAP8[$0 + 376 >> 0] | 0; //@line 15021
 __ZN7LoRaPHY17calculate_backoffEP16backoff_params_s(HEAP32[$0 >> 2] | 0, $1); //@line 15023
 $28 = HEAP32[$20 >> 2] | 0; //@line 15025
 $34 = (Math_imul($28, HEAPU16[$0 + 1154 >> 1] | 0) | 0) + ((HEAP32[$$pre$phiZ2D >> 2] | 0) - $28) | 0; //@line 15031
 HEAP32[$$pre$phiZ2D >> 2] = $34; //@line 15032
 HEAP32[$3 >> 2] = $34; //@line 15033
 $35 = $0 + 1097 | 0; //@line 15034
 $37 = $3 + 8 | 0; //@line 15036
 HEAP8[$37 >> 0] = HEAP8[$35 >> 0] | 0; //@line 15037
 HEAP8[$11 >> 0] = 1; //@line 15038
 HEAP8[$3 + 10 >> 0] = 1; //@line 15040
 HEAP8[$3 + 9 >> 0] = HEAP8[$9 >> 0] | 0; //@line 15043
 HEAP32[$3 + 4 >> 2] = HEAP32[$0 + 980 >> 2]; //@line 15047
 $44 = HEAP32[$0 >> 2] | 0; //@line 15048
 $47 = HEAP32[(HEAP32[$44 >> 2] | 0) + 56 >> 2] | 0; //@line 15051
 $48 = $0 + 378 | 0; //@line 15052
 $AsyncCtx = _emscripten_alloc_async_context(76, sp) | 0; //@line 15053
 $49 = FUNCTION_TABLE_iiiiii[$47 & 7]($44, $3, $48, $2, $$pre$phiZ2D) | 0; //@line 15054
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 413; //@line 15057
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 15059
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 15061
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 15063
  HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 15065
  HEAP32[$AsyncCtx + 20 >> 2] = $48; //@line 15067
  HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer4; //@line 15069
  HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer4; //@line 15071
  HEAP32[$AsyncCtx + 32 >> 2] = $14; //@line 15073
  HEAP32[$AsyncCtx + 36 >> 2] = $2; //@line 15075
  HEAP32[$AsyncCtx + 40 >> 2] = $9; //@line 15077
  HEAP32[$AsyncCtx + 44 >> 2] = $35; //@line 15079
  HEAP32[$AsyncCtx + 48 >> 2] = $vararg_buffer2; //@line 15081
  HEAP32[$AsyncCtx + 52 >> 2] = $vararg_buffer2; //@line 15083
  HEAP32[$AsyncCtx + 56 >> 2] = $37; //@line 15085
  HEAP32[$AsyncCtx + 60 >> 2] = $3; //@line 15087
  HEAP32[$AsyncCtx + 64 >> 2] = $$pre$phiZ2D; //@line 15089
  HEAP32[$AsyncCtx + 68 >> 2] = $vararg_buffer; //@line 15091
  HEAP32[$AsyncCtx + 72 >> 2] = $vararg_buffer; //@line 15093
  sp = STACKTOP; //@line 15094
  STACKTOP = sp; //@line 15095
  return 0; //@line 15095
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 15097
 L9 : do {
  if (!$49) {
   while (1) {
    $69 = __ZN7LoRaPHY23get_default_tx_datarateEv(HEAP32[$0 >> 2] | 0) | 0; //@line 15102
    HEAP8[$35 >> 0] = $69; //@line 15103
    HEAP8[$37 >> 0] = $69; //@line 15104
    $70 = HEAP32[$0 >> 2] | 0; //@line 15105
    $73 = HEAP32[(HEAP32[$70 >> 2] | 0) + 56 >> 2] | 0; //@line 15108
    $AsyncCtx8 = _emscripten_alloc_async_context(76, sp) | 0; //@line 15109
    $74 = FUNCTION_TABLE_iiiiii[$73 & 7]($70, $3, $48, $2, $$pre$phiZ2D) | 0; //@line 15110
    if (___async) {
     break;
    }
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 15115
    if ($74) {
     break L9;
    }
   }
   HEAP32[$AsyncCtx8 >> 2] = 414; //@line 15120
   HEAP32[$AsyncCtx8 + 4 >> 2] = $3; //@line 15122
   HEAP32[$AsyncCtx8 + 8 >> 2] = $2; //@line 15124
   HEAP32[$AsyncCtx8 + 12 >> 2] = $0; //@line 15126
   HEAP32[$AsyncCtx8 + 16 >> 2] = $0; //@line 15128
   HEAP32[$AsyncCtx8 + 20 >> 2] = $48; //@line 15130
   HEAP32[$AsyncCtx8 + 24 >> 2] = $vararg_buffer4; //@line 15132
   HEAP32[$AsyncCtx8 + 28 >> 2] = $vararg_buffer4; //@line 15134
   HEAP32[$AsyncCtx8 + 32 >> 2] = $14; //@line 15136
   HEAP32[$AsyncCtx8 + 36 >> 2] = $2; //@line 15138
   HEAP32[$AsyncCtx8 + 40 >> 2] = $9; //@line 15140
   HEAP32[$AsyncCtx8 + 44 >> 2] = $35; //@line 15142
   HEAP32[$AsyncCtx8 + 48 >> 2] = $vararg_buffer2; //@line 15144
   HEAP32[$AsyncCtx8 + 52 >> 2] = $vararg_buffer2; //@line 15146
   HEAP32[$AsyncCtx8 + 56 >> 2] = $37; //@line 15148
   HEAP32[$AsyncCtx8 + 60 >> 2] = $3; //@line 15150
   HEAP32[$AsyncCtx8 + 64 >> 2] = $$pre$phiZ2D; //@line 15152
   HEAP32[$AsyncCtx8 + 68 >> 2] = $vararg_buffer; //@line 15154
   HEAP32[$AsyncCtx8 + 72 >> 2] = $vararg_buffer; //@line 15156
   sp = STACKTOP; //@line 15157
   STACKTOP = sp; //@line 15158
   return 0; //@line 15158
  }
 } while (0);
 $96 = HEAP8[$37 >> 0] | 0; //@line 15164
 HEAP32[$vararg_buffer >> 2] = HEAPU8[$48 >> 0]; //@line 15165
 HEAP32[$vararg_buffer + 4 >> 2] = $96; //@line 15167
 _mbed_tracef(16, 13728, 14006, $vararg_buffer); //@line 15168
 $97 = HEAP32[$0 >> 2] | 0; //@line 15169
 $100 = HEAP32[(HEAP32[$97 >> 2] | 0) + 72 >> 2] | 0; //@line 15172
 $101 = HEAP8[$35 >> 0] | 0; //@line 15173
 $103 = HEAP8[$0 + 1129 >> 0] | 0; //@line 15175
 $AsyncCtx11 = _emscripten_alloc_async_context(56, sp) | 0; //@line 15176
 $104 = FUNCTION_TABLE_iiii[$100 & 15]($97, $101, $103) | 0; //@line 15177
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 415; //@line 15180
  HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 15182
  HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 15184
  HEAP32[$AsyncCtx11 + 12 >> 2] = $9; //@line 15186
  HEAP32[$AsyncCtx11 + 16 >> 2] = $35; //@line 15188
  HEAP32[$AsyncCtx11 + 20 >> 2] = $vararg_buffer2; //@line 15190
  HEAP32[$AsyncCtx11 + 24 >> 2] = $vararg_buffer2; //@line 15192
  HEAP32[$AsyncCtx11 + 28 >> 2] = $3; //@line 15194
  HEAP32[$AsyncCtx11 + 32 >> 2] = $2; //@line 15196
  HEAP32[$AsyncCtx11 + 36 >> 2] = $2; //@line 15198
  HEAP32[$AsyncCtx11 + 40 >> 2] = $48; //@line 15200
  HEAP32[$AsyncCtx11 + 44 >> 2] = $vararg_buffer4; //@line 15202
  HEAP32[$AsyncCtx11 + 48 >> 2] = $vararg_buffer4; //@line 15204
  HEAP32[$AsyncCtx11 + 52 >> 2] = $14; //@line 15206
  sp = STACKTOP; //@line 15207
  STACKTOP = sp; //@line 15208
  return 0; //@line 15208
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 15210
 $118 = HEAP32[$0 >> 2] | 0; //@line 15211
 $121 = HEAP32[(HEAP32[$118 >> 2] | 0) + 28 >> 2] | 0; //@line 15214
 $122 = $0 + 1104 | 0; //@line 15215
 $123 = HEAP8[$122 >> 0] | 0; //@line 15216
 $124 = $0 + 1100 | 0; //@line 15217
 $125 = HEAP32[$124 >> 2] | 0; //@line 15218
 $AsyncCtx14 = _emscripten_alloc_async_context(64, sp) | 0; //@line 15220
 FUNCTION_TABLE_viiiii[$121 & 7]($118, $104, $123, $125, $0 + 1160 | 0); //@line 15221
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 416; //@line 15224
  HEAP32[$AsyncCtx14 + 4 >> 2] = $0; //@line 15226
  HEAP32[$AsyncCtx14 + 8 >> 2] = $0; //@line 15228
  HEAP32[$AsyncCtx14 + 12 >> 2] = $122; //@line 15230
  HEAP32[$AsyncCtx14 + 16 >> 2] = $124; //@line 15232
  HEAP32[$AsyncCtx14 + 20 >> 2] = $9; //@line 15234
  HEAP32[$AsyncCtx14 + 24 >> 2] = $35; //@line 15236
  HEAP32[$AsyncCtx14 + 28 >> 2] = $vararg_buffer2; //@line 15238
  HEAP32[$AsyncCtx14 + 32 >> 2] = $vararg_buffer2; //@line 15240
  HEAP32[$AsyncCtx14 + 36 >> 2] = $3; //@line 15242
  HEAP32[$AsyncCtx14 + 40 >> 2] = $2; //@line 15244
  HEAP32[$AsyncCtx14 + 44 >> 2] = $2; //@line 15246
  HEAP32[$AsyncCtx14 + 48 >> 2] = $48; //@line 15248
  HEAP32[$AsyncCtx14 + 52 >> 2] = $vararg_buffer4; //@line 15250
  HEAP32[$AsyncCtx14 + 56 >> 2] = $vararg_buffer4; //@line 15252
  HEAP32[$AsyncCtx14 + 60 >> 2] = $14; //@line 15254
  sp = STACKTOP; //@line 15255
  STACKTOP = sp; //@line 15256
  return 0; //@line 15256
 }
 _emscripten_free_async_context($AsyncCtx14 | 0); //@line 15258
 $142 = HEAP32[$0 >> 2] | 0; //@line 15259
 $145 = HEAP32[(HEAP32[$142 >> 2] | 0) + 28 >> 2] | 0; //@line 15262
 $147 = HEAP8[$0 + 1136 >> 0] | 0; //@line 15264
 $148 = HEAP8[$122 >> 0] | 0; //@line 15265
 $149 = HEAP32[$124 >> 2] | 0; //@line 15266
 $AsyncCtx17 = _emscripten_alloc_async_context(56, sp) | 0; //@line 15268
 FUNCTION_TABLE_viiiii[$145 & 7]($142, $147, $148, $149, $0 + 1184 | 0); //@line 15269
 if (___async) {
  HEAP32[$AsyncCtx17 >> 2] = 417; //@line 15272
  HEAP32[$AsyncCtx17 + 4 >> 2] = $9; //@line 15274
  HEAP32[$AsyncCtx17 + 8 >> 2] = $0; //@line 15276
  HEAP32[$AsyncCtx17 + 12 >> 2] = $35; //@line 15278
  HEAP32[$AsyncCtx17 + 16 >> 2] = $vararg_buffer2; //@line 15280
  HEAP32[$AsyncCtx17 + 20 >> 2] = $vararg_buffer2; //@line 15282
  HEAP32[$AsyncCtx17 + 24 >> 2] = $0; //@line 15284
  HEAP32[$AsyncCtx17 + 28 >> 2] = $3; //@line 15286
  HEAP32[$AsyncCtx17 + 32 >> 2] = $2; //@line 15288
  HEAP32[$AsyncCtx17 + 36 >> 2] = $2; //@line 15290
  HEAP32[$AsyncCtx17 + 40 >> 2] = $48; //@line 15292
  HEAP32[$AsyncCtx17 + 44 >> 2] = $vararg_buffer4; //@line 15294
  HEAP32[$AsyncCtx17 + 48 >> 2] = $vararg_buffer4; //@line 15296
  HEAP32[$AsyncCtx17 + 52 >> 2] = $14; //@line 15298
  sp = STACKTOP; //@line 15299
  STACKTOP = sp; //@line 15300
  return 0; //@line 15300
 }
 _emscripten_free_async_context($AsyncCtx17 | 0); //@line 15302
 do {
  if (!(HEAP8[$9 >> 0] | 0)) {
   HEAP32[$0 + 972 >> 2] = (HEAP32[$0 + 1172 >> 2] | 0) + (HEAP32[$0 + 1120 >> 2] | 0); //@line 15313
   $$sink = $0 + 1124 | 0; //@line 15315
  } else {
   $174 = HEAP8[$0 + 893 >> 0] | 0; //@line 15318
   $175 = HEAP8[$35 >> 0] | 0; //@line 15319
   $177 = __ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($0 + 4 | 0) | 0; //@line 15321
   _mbed_tracef(16, 13728, 14033, $vararg_buffer2); //@line 15322
   $185 = ($177 & 255) + ($174 & 255) | 0; //@line 15330
   if ($185 >>> 0 < 256 & $185 >>> 0 <= ((__ZN7LoRaPHY15get_max_payloadEhb(HEAP32[$0 >> 2] | 0, $175, (HEAP8[$0 + 369 >> 0] | 0) != 0) | 0) & 255) >>> 0) {
    HEAP32[$0 + 972 >> 2] = (HEAP32[$0 + 1172 >> 2] | 0) + (HEAP32[$0 + 1112 >> 2] | 0); //@line 15342
    $$sink = $0 + 1116 | 0; //@line 15344
    break;
   } else {
    $$1 = -1010; //@line 15347
    STACKTOP = sp; //@line 15348
    return $$1 | 0; //@line 15348
   }
  }
 } while (0);
 HEAP32[$0 + 976 >> 2] = (HEAP32[$0 + 1196 >> 2] | 0) + (HEAP32[$$sink >> 2] | 0); //@line 15357
 $201 = HEAP32[$2 >> 2] | 0; //@line 15358
 if (!$201) {
  $203 = HEAP8[$48 >> 0] | 0; //@line 15361
  $AsyncCtx25 = _emscripten_alloc_async_context(12, sp) | 0; //@line 15362
  __ZN7LoRaMac21send_frame_on_channelEh($0, $203) | 0; //@line 15363
  if (___async) {
   HEAP32[$AsyncCtx25 >> 2] = 418; //@line 15366
   HEAP32[$AsyncCtx25 + 4 >> 2] = $3; //@line 15368
   HEAP32[$AsyncCtx25 + 8 >> 2] = $2; //@line 15370
   sp = STACKTOP; //@line 15371
   STACKTOP = sp; //@line 15372
   return 0; //@line 15372
  }
  _emscripten_free_async_context($AsyncCtx25 | 0); //@line 15374
  $$1 = 0; //@line 15375
  STACKTOP = sp; //@line 15376
  return $$1 | 0; //@line 15376
 } else {
  $206 = $0 + 968 | 0; //@line 15378
  HEAP32[$206 >> 2] = HEAP32[$206 >> 2] | 16; //@line 15381
  HEAP32[$vararg_buffer4 >> 2] = $201; //@line 15382
  _mbed_tracef(16, 13728, 14057, $vararg_buffer4); //@line 15383
  $209 = HEAP32[$14 >> 2] | 0; //@line 15384
  $211 = HEAP32[$2 >> 2] | 0; //@line 15386
  $AsyncCtx21 = _emscripten_alloc_async_context(12, sp) | 0; //@line 15387
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($209, $0 + 1016 | 0, $211); //@line 15388
  if (___async) {
   HEAP32[$AsyncCtx21 >> 2] = 419; //@line 15391
   HEAP32[$AsyncCtx21 + 4 >> 2] = $3; //@line 15393
   HEAP32[$AsyncCtx21 + 8 >> 2] = $2; //@line 15395
   sp = STACKTOP; //@line 15396
   STACKTOP = sp; //@line 15397
   return 0; //@line 15397
  }
  _emscripten_free_async_context($AsyncCtx21 | 0); //@line 15399
  $$1 = 0; //@line 15400
  STACKTOP = sp; //@line 15401
  return $$1 | 0; //@line 15401
 }
 return 0; //@line 15403
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_181($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $$pre13 = 0, $10 = 0, $12 = 0, $14 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $49 = 0, $50 = 0, $51 = 0, $54 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $68 = 0, $69 = 0, $71 = 0, $72 = 0, $73 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $85 = 0, $89 = 0, $90 = 0, $92 = 0, $93 = 0, $94 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 31102
 STACKTOP = STACKTOP + 16 | 0; //@line 31103
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 31103
 $$byval_copy = sp; //@line 31104
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31106
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31108
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31110
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31112
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31114
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31116
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 31118
 $$pre13 = HEAP8[$2 >> 0] | 0; //@line 31119
 if ($$pre13 & 8) {
  HEAP8[$2 >> 0] = $$pre13 & -9; //@line 31124
  $19 = HEAP32[$4 + 1324 >> 2] | 0; //@line 31126
  $20 = $19 + 32 | 0; //@line 31127
  $22 = __ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0; //@line 31129
  $23 = $19 + 44 | 0; //@line 31130
  $24 = HEAP32[$23 >> 2] | 0; //@line 31131
  if (!$24) {
   $ReallocAsyncCtx15 = _emscripten_realloc_async_context(44) | 0; //@line 31134
   _mbed_assert_internal(15679, 15684, 1102); //@line 31135
   if (___async) {
    HEAP32[$ReallocAsyncCtx15 >> 2] = 400; //@line 31138
    $26 = $ReallocAsyncCtx15 + 4 | 0; //@line 31139
    HEAP32[$26 >> 2] = $2; //@line 31140
    $27 = $ReallocAsyncCtx15 + 8 | 0; //@line 31141
    HEAP32[$27 >> 2] = $4; //@line 31142
    $28 = $ReallocAsyncCtx15 + 12 | 0; //@line 31143
    HEAP32[$28 >> 2] = $20; //@line 31144
    $29 = $ReallocAsyncCtx15 + 16 | 0; //@line 31145
    HEAP32[$29 >> 2] = $22; //@line 31146
    $30 = $ReallocAsyncCtx15 + 20 | 0; //@line 31147
    HEAP32[$30 >> 2] = $6; //@line 31148
    $31 = $ReallocAsyncCtx15 + 24 | 0; //@line 31149
    HEAP32[$31 >> 2] = $8; //@line 31150
    $32 = $ReallocAsyncCtx15 + 28 | 0; //@line 31151
    HEAP32[$32 >> 2] = $10; //@line 31152
    $33 = $ReallocAsyncCtx15 + 32 | 0; //@line 31153
    HEAP32[$33 >> 2] = $12; //@line 31154
    $34 = $ReallocAsyncCtx15 + 36 | 0; //@line 31155
    HEAP32[$34 >> 2] = $14; //@line 31156
    $35 = $ReallocAsyncCtx15 + 40 | 0; //@line 31157
    HEAP32[$35 >> 2] = $23; //@line 31158
    sp = STACKTOP; //@line 31159
    STACKTOP = sp; //@line 31160
    return;
   }
   ___async_unwind = 0; //@line 31162
   HEAP32[$ReallocAsyncCtx15 >> 2] = 400; //@line 31163
   $26 = $ReallocAsyncCtx15 + 4 | 0; //@line 31164
   HEAP32[$26 >> 2] = $2; //@line 31165
   $27 = $ReallocAsyncCtx15 + 8 | 0; //@line 31166
   HEAP32[$27 >> 2] = $4; //@line 31167
   $28 = $ReallocAsyncCtx15 + 12 | 0; //@line 31168
   HEAP32[$28 >> 2] = $20; //@line 31169
   $29 = $ReallocAsyncCtx15 + 16 | 0; //@line 31170
   HEAP32[$29 >> 2] = $22; //@line 31171
   $30 = $ReallocAsyncCtx15 + 20 | 0; //@line 31172
   HEAP32[$30 >> 2] = $6; //@line 31173
   $31 = $ReallocAsyncCtx15 + 24 | 0; //@line 31174
   HEAP32[$31 >> 2] = $8; //@line 31175
   $32 = $ReallocAsyncCtx15 + 28 | 0; //@line 31176
   HEAP32[$32 >> 2] = $10; //@line 31177
   $33 = $ReallocAsyncCtx15 + 32 | 0; //@line 31178
   HEAP32[$33 >> 2] = $12; //@line 31179
   $34 = $ReallocAsyncCtx15 + 36 | 0; //@line 31180
   HEAP32[$34 >> 2] = $14; //@line 31181
   $35 = $ReallocAsyncCtx15 + 40 | 0; //@line 31182
   HEAP32[$35 >> 2] = $23; //@line 31183
   sp = STACKTOP; //@line 31184
   STACKTOP = sp; //@line 31185
   return;
  } else {
   $36 = HEAP32[$24 >> 2] | 0; //@line 31187
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 31188
   FUNCTION_TABLE_vii[$36 & 31]($20, $22); //@line 31189
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 401; //@line 31192
    $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 31193
    HEAP32[$37 >> 2] = $4; //@line 31194
    $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 31195
    HEAP32[$38 >> 2] = $2; //@line 31196
    $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 31197
    HEAP32[$39 >> 2] = $6; //@line 31198
    $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 31199
    HEAP32[$40 >> 2] = $8; //@line 31200
    $41 = $ReallocAsyncCtx3 + 20 | 0; //@line 31201
    HEAP32[$41 >> 2] = $10; //@line 31202
    $42 = $ReallocAsyncCtx3 + 24 | 0; //@line 31203
    HEAP32[$42 >> 2] = $12; //@line 31204
    $43 = $ReallocAsyncCtx3 + 28 | 0; //@line 31205
    HEAP32[$43 >> 2] = $14; //@line 31206
    sp = STACKTOP; //@line 31207
    STACKTOP = sp; //@line 31208
    return;
   }
   ___async_unwind = 0; //@line 31210
   HEAP32[$ReallocAsyncCtx3 >> 2] = 401; //@line 31211
   $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 31212
   HEAP32[$37 >> 2] = $4; //@line 31213
   $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 31214
   HEAP32[$38 >> 2] = $2; //@line 31215
   $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 31216
   HEAP32[$39 >> 2] = $6; //@line 31217
   $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 31218
   HEAP32[$40 >> 2] = $8; //@line 31219
   $41 = $ReallocAsyncCtx3 + 20 | 0; //@line 31220
   HEAP32[$41 >> 2] = $10; //@line 31221
   $42 = $ReallocAsyncCtx3 + 24 | 0; //@line 31222
   HEAP32[$42 >> 2] = $12; //@line 31223
   $43 = $ReallocAsyncCtx3 + 28 | 0; //@line 31224
   HEAP32[$43 >> 2] = $14; //@line 31225
   sp = STACKTOP; //@line 31226
   STACKTOP = sp; //@line 31227
   return;
  }
 }
 if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($4 + 4 | 0) | 0) {
  _mbed_tracef(16, 13728, 13889, $12); //@line 31233
  HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0) >> 2] = 4; //@line 31236
  $49 = HEAP8[$2 >> 0] | 16; //@line 31238
  HEAP8[$2 >> 0] = $49; //@line 31239
  $51 = $49; //@line 31240
 } else {
  $51 = HEAP8[$2 >> 0] | 0; //@line 31243
 }
 $50 = $51 & -33; //@line 31245
 HEAP8[$2 >> 0] = $50; //@line 31246
 do {
  if (!($50 & 2)) {
   $85 = $50; //@line 31251
  } else {
   $54 = $50 & -3; //@line 31253
   HEAP8[$2 >> 0] = $54; //@line 31254
   if ((HEAP32[$4 + 360 >> 2] | 0) == 2) {
    _mbed_tracef(16, 13728, 13747, $8); //@line 31259
    $59 = HEAP32[$4 + 1328 >> 2] | 0; //@line 31261
    HEAP32[$6 >> 2] = 293; //@line 31262
    HEAP32[$6 + 4 >> 2] = 0; //@line 31264
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 31265
    HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 31266
    HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 31266
    $60 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($59, $4, $$byval_copy) | 0; //@line 31267
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 403; //@line 31270
     $61 = $ReallocAsyncCtx8 + 4 | 0; //@line 31271
     HEAP32[$61 >> 2] = $2; //@line 31272
     $62 = $ReallocAsyncCtx8 + 8 | 0; //@line 31273
     HEAP32[$62 >> 2] = $4; //@line 31274
     $63 = $ReallocAsyncCtx8 + 12 | 0; //@line 31275
     HEAP32[$63 >> 2] = $6; //@line 31276
     sp = STACKTOP; //@line 31277
     STACKTOP = sp; //@line 31278
     return;
    }
    HEAP32[___async_retval >> 2] = $60; //@line 31281
    ___async_unwind = 0; //@line 31282
    HEAP32[$ReallocAsyncCtx8 >> 2] = 403; //@line 31283
    $61 = $ReallocAsyncCtx8 + 4 | 0; //@line 31284
    HEAP32[$61 >> 2] = $2; //@line 31285
    $62 = $ReallocAsyncCtx8 + 8 | 0; //@line 31286
    HEAP32[$62 >> 2] = $4; //@line 31287
    $63 = $ReallocAsyncCtx8 + 12 | 0; //@line 31288
    HEAP32[$63 >> 2] = $6; //@line 31289
    sp = STACKTOP; //@line 31290
    STACKTOP = sp; //@line 31291
    return;
   }
   if ($54 & 4) {
    $83 = $54 & -5; //@line 31296
    HEAP8[$2 >> 0] = $83; //@line 31297
    $85 = $83; //@line 31298
    break;
   }
   $68 = HEAP32[$4 + 1324 >> 2] | 0; //@line 31302
   $69 = $68 + 16 | 0; //@line 31303
   $71 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 31305
   $72 = $68 + 28 | 0; //@line 31306
   $73 = HEAP32[$72 >> 2] | 0; //@line 31307
   if (!$73) {
    $ReallocAsyncCtx13 = _emscripten_realloc_async_context(24) | 0; //@line 31310
    _mbed_assert_internal(15679, 15684, 1102); //@line 31311
    if (___async) {
     HEAP32[$ReallocAsyncCtx13 >> 2] = 405; //@line 31314
     $75 = $ReallocAsyncCtx13 + 4 | 0; //@line 31315
     HEAP32[$75 >> 2] = $72; //@line 31316
     $76 = $ReallocAsyncCtx13 + 8 | 0; //@line 31317
     HEAP32[$76 >> 2] = $69; //@line 31318
     $77 = $ReallocAsyncCtx13 + 12 | 0; //@line 31319
     HEAP32[$77 >> 2] = $71; //@line 31320
     $78 = $ReallocAsyncCtx13 + 16 | 0; //@line 31321
     HEAP32[$78 >> 2] = $2; //@line 31322
     $79 = $ReallocAsyncCtx13 + 20 | 0; //@line 31323
     HEAP32[$79 >> 2] = $4; //@line 31324
     sp = STACKTOP; //@line 31325
     STACKTOP = sp; //@line 31326
     return;
    }
    ___async_unwind = 0; //@line 31328
    HEAP32[$ReallocAsyncCtx13 >> 2] = 405; //@line 31329
    $75 = $ReallocAsyncCtx13 + 4 | 0; //@line 31330
    HEAP32[$75 >> 2] = $72; //@line 31331
    $76 = $ReallocAsyncCtx13 + 8 | 0; //@line 31332
    HEAP32[$76 >> 2] = $69; //@line 31333
    $77 = $ReallocAsyncCtx13 + 12 | 0; //@line 31334
    HEAP32[$77 >> 2] = $71; //@line 31335
    $78 = $ReallocAsyncCtx13 + 16 | 0; //@line 31336
    HEAP32[$78 >> 2] = $2; //@line 31337
    $79 = $ReallocAsyncCtx13 + 20 | 0; //@line 31338
    HEAP32[$79 >> 2] = $4; //@line 31339
    sp = STACKTOP; //@line 31340
    STACKTOP = sp; //@line 31341
    return;
   } else {
    $80 = HEAP32[$73 >> 2] | 0; //@line 31343
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 31344
    FUNCTION_TABLE_vii[$80 & 31]($69, $71); //@line 31345
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 406; //@line 31348
     $81 = $ReallocAsyncCtx4 + 4 | 0; //@line 31349
     HEAP32[$81 >> 2] = $2; //@line 31350
     $82 = $ReallocAsyncCtx4 + 8 | 0; //@line 31351
     HEAP32[$82 >> 2] = $4; //@line 31352
     sp = STACKTOP; //@line 31353
     STACKTOP = sp; //@line 31354
     return;
    }
    ___async_unwind = 0; //@line 31356
    HEAP32[$ReallocAsyncCtx4 >> 2] = 406; //@line 31357
    $81 = $ReallocAsyncCtx4 + 4 | 0; //@line 31358
    HEAP32[$81 >> 2] = $2; //@line 31359
    $82 = $ReallocAsyncCtx4 + 8 | 0; //@line 31360
    HEAP32[$82 >> 2] = $4; //@line 31361
    sp = STACKTOP; //@line 31362
    STACKTOP = sp; //@line 31363
    return;
   }
  }
 } while (0);
 if (!($85 & 16)) {
  STACKTOP = sp; //@line 31370
  return;
 }
 HEAP8[$2 >> 0] = $85 & -17; //@line 31373
 $89 = HEAP32[$4 + 1324 >> 2] | 0; //@line 31375
 $90 = $89 + 48 | 0; //@line 31376
 $92 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 31378
 $93 = $89 + 60 | 0; //@line 31379
 $94 = HEAP32[$93 >> 2] | 0; //@line 31380
 if (!$94) {
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(16) | 0; //@line 31383
  _mbed_assert_internal(15679, 15684, 1102); //@line 31384
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 407; //@line 31387
   $96 = $ReallocAsyncCtx12 + 4 | 0; //@line 31388
   HEAP32[$96 >> 2] = $93; //@line 31389
   $97 = $ReallocAsyncCtx12 + 8 | 0; //@line 31390
   HEAP32[$97 >> 2] = $90; //@line 31391
   $98 = $ReallocAsyncCtx12 + 12 | 0; //@line 31392
   HEAP32[$98 >> 2] = $92; //@line 31393
   sp = STACKTOP; //@line 31394
   STACKTOP = sp; //@line 31395
   return;
  }
  ___async_unwind = 0; //@line 31397
  HEAP32[$ReallocAsyncCtx12 >> 2] = 407; //@line 31398
  $96 = $ReallocAsyncCtx12 + 4 | 0; //@line 31399
  HEAP32[$96 >> 2] = $93; //@line 31400
  $97 = $ReallocAsyncCtx12 + 8 | 0; //@line 31401
  HEAP32[$97 >> 2] = $90; //@line 31402
  $98 = $ReallocAsyncCtx12 + 12 | 0; //@line 31403
  HEAP32[$98 >> 2] = $92; //@line 31404
  sp = STACKTOP; //@line 31405
  STACKTOP = sp; //@line 31406
  return;
 } else {
  $99 = HEAP32[$94 >> 2] | 0; //@line 31408
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 31409
  FUNCTION_TABLE_vii[$99 & 31]($90, $92); //@line 31410
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 408; //@line 31413
   sp = STACKTOP; //@line 31414
   STACKTOP = sp; //@line 31415
   return;
  }
  ___async_unwind = 0; //@line 31417
  HEAP32[$ReallocAsyncCtx5 >> 2] = 408; //@line 31418
  sp = STACKTOP; //@line 31419
  STACKTOP = sp; //@line 31420
  return;
 }
}
function _twoway_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0166 = 0, $$0168 = 0, $$0169 = 0, $$0169$be = 0, $$0170 = 0, $$0175$ph$ph$lcssa216 = 0, $$0175$ph$ph$lcssa216328 = 0, $$0175$ph$ph254 = 0, $$0179242 = 0, $$0183$ph197$ph253 = 0, $$0183$ph197248 = 0, $$0183$ph260 = 0, $$0185$ph$lcssa = 0, $$0185$ph$lcssa327 = 0, $$0185$ph259 = 0, $$0187219$ph325326 = 0, $$0187263 = 0, $$1176$$0175 = 0, $$1176$ph$ph$lcssa208 = 0, $$1176$ph$ph233 = 0, $$1180222 = 0, $$1184$ph193$ph232 = 0, $$1184$ph193227 = 0, $$1184$ph239 = 0, $$1186$$0185 = 0, $$1186$ph$lcssa = 0, $$1186$ph238 = 0, $$2181$sink = 0, $$3 = 0, $$3173 = 0, $$3178 = 0, $$3182221 = 0, $$4 = 0, $$pr = 0, $10 = 0, $105 = 0, $111 = 0, $113 = 0, $118 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $14 = 0, $2 = 0, $23 = 0, $25 = 0, $27 = 0, $3 = 0, $32 = 0, $34 = 0, $37 = 0, $4 = 0, $41 = 0, $45 = 0, $50 = 0, $52 = 0, $53 = 0, $56 = 0, $60 = 0, $68 = 0, $70 = 0, $74 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $83 = 0, $86 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 15187
 STACKTOP = STACKTOP + 1056 | 0; //@line 15188
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1056); //@line 15188
 $2 = sp + 1024 | 0; //@line 15189
 $3 = sp; //@line 15190
 HEAP32[$2 >> 2] = 0; //@line 15191
 HEAP32[$2 + 4 >> 2] = 0; //@line 15191
 HEAP32[$2 + 8 >> 2] = 0; //@line 15191
 HEAP32[$2 + 12 >> 2] = 0; //@line 15191
 HEAP32[$2 + 16 >> 2] = 0; //@line 15191
 HEAP32[$2 + 20 >> 2] = 0; //@line 15191
 HEAP32[$2 + 24 >> 2] = 0; //@line 15191
 HEAP32[$2 + 28 >> 2] = 0; //@line 15191
 $4 = HEAP8[$1 >> 0] | 0; //@line 15192
 L1 : do {
  if (!($4 << 24 >> 24)) {
   $$0175$ph$ph$lcssa216328 = 1; //@line 15196
   $$0185$ph$lcssa327 = -1; //@line 15196
   $$0187219$ph325326 = 0; //@line 15196
   $$1176$ph$ph$lcssa208 = 1; //@line 15196
   $$1186$ph$lcssa = -1; //@line 15196
   label = 26; //@line 15197
  } else {
   $$0187263 = 0; //@line 15199
   $10 = $4; //@line 15199
   do {
    if (!(HEAP8[$0 + $$0187263 >> 0] | 0)) {
     $$3 = 0; //@line 15205
     break L1;
    }
    $14 = $2 + ((($10 & 255) >>> 5 & 255) << 2) | 0; //@line 15213
    HEAP32[$14 >> 2] = HEAP32[$14 >> 2] | 1 << ($10 & 31); //@line 15216
    $$0187263 = $$0187263 + 1 | 0; //@line 15217
    HEAP32[$3 + (($10 & 255) << 2) >> 2] = $$0187263; //@line 15220
    $10 = HEAP8[$1 + $$0187263 >> 0] | 0; //@line 15222
   } while ($10 << 24 >> 24 != 0);
   $23 = $$0187263 >>> 0 > 1; //@line 15230
   if ($23) {
    $$0183$ph260 = 0; //@line 15232
    $$0185$ph259 = -1; //@line 15232
    $130 = 1; //@line 15232
    L6 : while (1) {
     $$0175$ph$ph254 = 1; //@line 15234
     $$0183$ph197$ph253 = $$0183$ph260; //@line 15234
     $131 = $130; //@line 15234
     while (1) {
      $$0183$ph197248 = $$0183$ph197$ph253; //@line 15236
      $132 = $131; //@line 15236
      L10 : while (1) {
       $$0179242 = 1; //@line 15238
       $25 = $132; //@line 15238
       while (1) {
        $32 = HEAP8[$1 + ($$0179242 + $$0185$ph259) >> 0] | 0; //@line 15242
        $34 = HEAP8[$1 + $25 >> 0] | 0; //@line 15244
        if ($32 << 24 >> 24 != $34 << 24 >> 24) {
         break L10;
        }
        if (($$0179242 | 0) == ($$0175$ph$ph254 | 0)) {
         break;
        }
        $$0179242 = $$0179242 + 1 | 0; //@line 15250
        $27 = $$0179242 + $$0183$ph197248 | 0; //@line 15254
        if ($27 >>> 0 >= $$0187263 >>> 0) {
         $$0175$ph$ph$lcssa216 = $$0175$ph$ph254; //@line 15259
         $$0185$ph$lcssa = $$0185$ph259; //@line 15259
         break L6;
        } else {
         $25 = $27; //@line 15257
        }
       }
       $37 = $$0175$ph$ph254 + $$0183$ph197248 | 0; //@line 15263
       $132 = $37 + 1 | 0; //@line 15264
       if ($132 >>> 0 >= $$0187263 >>> 0) {
        $$0175$ph$ph$lcssa216 = $$0175$ph$ph254; //@line 15269
        $$0185$ph$lcssa = $$0185$ph259; //@line 15269
        break L6;
       } else {
        $$0183$ph197248 = $37; //@line 15267
       }
      }
      $41 = $25 - $$0185$ph259 | 0; //@line 15274
      if (($32 & 255) <= ($34 & 255)) {
       break;
      }
      $131 = $25 + 1 | 0; //@line 15278
      if ($131 >>> 0 >= $$0187263 >>> 0) {
       $$0175$ph$ph$lcssa216 = $41; //@line 15283
       $$0185$ph$lcssa = $$0185$ph259; //@line 15283
       break L6;
      } else {
       $$0175$ph$ph254 = $41; //@line 15281
       $$0183$ph197$ph253 = $25; //@line 15281
      }
     }
     $130 = $$0183$ph197248 + 2 | 0; //@line 15288
     if ($130 >>> 0 >= $$0187263 >>> 0) {
      $$0175$ph$ph$lcssa216 = 1; //@line 15293
      $$0185$ph$lcssa = $$0183$ph197248; //@line 15293
      break;
     } else {
      $$0183$ph260 = $$0183$ph197248 + 1 | 0; //@line 15291
      $$0185$ph259 = $$0183$ph197248; //@line 15291
     }
    }
    if ($23) {
     $$1184$ph239 = 0; //@line 15298
     $$1186$ph238 = -1; //@line 15298
     $133 = 1; //@line 15298
     while (1) {
      $$1176$ph$ph233 = 1; //@line 15300
      $$1184$ph193$ph232 = $$1184$ph239; //@line 15300
      $135 = $133; //@line 15300
      while (1) {
       $$1184$ph193227 = $$1184$ph193$ph232; //@line 15302
       $134 = $135; //@line 15302
       L25 : while (1) {
        $$1180222 = 1; //@line 15304
        $52 = $134; //@line 15304
        while (1) {
         $50 = HEAP8[$1 + ($$1180222 + $$1186$ph238) >> 0] | 0; //@line 15308
         $53 = HEAP8[$1 + $52 >> 0] | 0; //@line 15310
         if ($50 << 24 >> 24 != $53 << 24 >> 24) {
          break L25;
         }
         if (($$1180222 | 0) == ($$1176$ph$ph233 | 0)) {
          break;
         }
         $$1180222 = $$1180222 + 1 | 0; //@line 15316
         $45 = $$1180222 + $$1184$ph193227 | 0; //@line 15320
         if ($45 >>> 0 >= $$0187263 >>> 0) {
          $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 15325
          $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 15325
          $$0187219$ph325326 = $$0187263; //@line 15325
          $$1176$ph$ph$lcssa208 = $$1176$ph$ph233; //@line 15325
          $$1186$ph$lcssa = $$1186$ph238; //@line 15325
          label = 26; //@line 15326
          break L1;
         } else {
          $52 = $45; //@line 15323
         }
        }
        $56 = $$1176$ph$ph233 + $$1184$ph193227 | 0; //@line 15330
        $134 = $56 + 1 | 0; //@line 15331
        if ($134 >>> 0 >= $$0187263 >>> 0) {
         $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 15336
         $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 15336
         $$0187219$ph325326 = $$0187263; //@line 15336
         $$1176$ph$ph$lcssa208 = $$1176$ph$ph233; //@line 15336
         $$1186$ph$lcssa = $$1186$ph238; //@line 15336
         label = 26; //@line 15337
         break L1;
        } else {
         $$1184$ph193227 = $56; //@line 15334
        }
       }
       $60 = $52 - $$1186$ph238 | 0; //@line 15342
       if (($50 & 255) >= ($53 & 255)) {
        break;
       }
       $135 = $52 + 1 | 0; //@line 15346
       if ($135 >>> 0 >= $$0187263 >>> 0) {
        $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 15351
        $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 15351
        $$0187219$ph325326 = $$0187263; //@line 15351
        $$1176$ph$ph$lcssa208 = $60; //@line 15351
        $$1186$ph$lcssa = $$1186$ph238; //@line 15351
        label = 26; //@line 15352
        break L1;
       } else {
        $$1176$ph$ph233 = $60; //@line 15349
        $$1184$ph193$ph232 = $52; //@line 15349
       }
      }
      $133 = $$1184$ph193227 + 2 | 0; //@line 15357
      if ($133 >>> 0 >= $$0187263 >>> 0) {
       $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 15362
       $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 15362
       $$0187219$ph325326 = $$0187263; //@line 15362
       $$1176$ph$ph$lcssa208 = 1; //@line 15362
       $$1186$ph$lcssa = $$1184$ph193227; //@line 15362
       label = 26; //@line 15363
       break;
      } else {
       $$1184$ph239 = $$1184$ph193227 + 1 | 0; //@line 15360
       $$1186$ph238 = $$1184$ph193227; //@line 15360
      }
     }
    } else {
     $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 15368
     $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 15368
     $$0187219$ph325326 = $$0187263; //@line 15368
     $$1176$ph$ph$lcssa208 = 1; //@line 15368
     $$1186$ph$lcssa = -1; //@line 15368
     label = 26; //@line 15369
    }
   } else {
    $$0175$ph$ph$lcssa216328 = 1; //@line 15372
    $$0185$ph$lcssa327 = -1; //@line 15372
    $$0187219$ph325326 = $$0187263; //@line 15372
    $$1176$ph$ph$lcssa208 = 1; //@line 15372
    $$1186$ph$lcssa = -1; //@line 15372
    label = 26; //@line 15373
   }
  }
 } while (0);
 L35 : do {
  if ((label | 0) == 26) {
   $68 = ($$1186$ph$lcssa + 1 | 0) >>> 0 > ($$0185$ph$lcssa327 + 1 | 0) >>> 0; //@line 15381
   $$1176$$0175 = $68 ? $$1176$ph$ph$lcssa208 : $$0175$ph$ph$lcssa216328; //@line 15382
   $$1186$$0185 = $68 ? $$1186$ph$lcssa : $$0185$ph$lcssa327; //@line 15383
   $70 = $$1186$$0185 + 1 | 0; //@line 15385
   if (!(_memcmp($1, $1 + $$1176$$0175 | 0, $70) | 0)) {
    $$0168 = $$0187219$ph325326 - $$1176$$0175 | 0; //@line 15390
    $$3178 = $$1176$$0175; //@line 15390
   } else {
    $74 = $$0187219$ph325326 - $$1186$$0185 + -1 | 0; //@line 15393
    $$0168 = 0; //@line 15397
    $$3178 = ($$1186$$0185 >>> 0 > $74 >>> 0 ? $$1186$$0185 : $74) + 1 | 0; //@line 15397
   }
   $78 = $$0187219$ph325326 | 63; //@line 15399
   $79 = $$0187219$ph325326 + -1 | 0; //@line 15400
   $80 = ($$0168 | 0) != 0; //@line 15401
   $81 = $$0187219$ph325326 - $$3178 | 0; //@line 15402
   $$0166 = $0; //@line 15403
   $$0169 = 0; //@line 15403
   $$0170 = $0; //@line 15403
   while (1) {
    $83 = $$0166; //@line 15406
    do {
     if (($$0170 - $83 | 0) >>> 0 < $$0187219$ph325326 >>> 0) {
      $86 = _memchr($$0170, 0, $78) | 0; //@line 15411
      if (!$86) {
       $$3173 = $$0170 + $78 | 0; //@line 15415
       break;
      } else {
       if (($86 - $83 | 0) >>> 0 < $$0187219$ph325326 >>> 0) {
        $$3 = 0; //@line 15422
        break L35;
       } else {
        $$3173 = $86; //@line 15425
        break;
       }
      }
     } else {
      $$3173 = $$0170; //@line 15430
     }
    } while (0);
    $93 = HEAP8[$$0166 + $79 >> 0] | 0; //@line 15434
    L49 : do {
     if (!(1 << ($93 & 31) & HEAP32[$2 + ((($93 & 255) >>> 5 & 255) << 2) >> 2])) {
      $$0169$be = 0; //@line 15446
      $$2181$sink = $$0187219$ph325326; //@line 15446
     } else {
      $105 = $$0187219$ph325326 - (HEAP32[$3 + (($93 & 255) << 2) >> 2] | 0) | 0; //@line 15451
      if ($105 | 0) {
       $$0169$be = 0; //@line 15459
       $$2181$sink = $80 & ($$0169 | 0) != 0 & $105 >>> 0 < $$3178 >>> 0 ? $81 : $105; //@line 15459
       break;
      }
      $111 = $70 >>> 0 > $$0169 >>> 0 ? $70 : $$0169; //@line 15463
      $113 = HEAP8[$1 + $111 >> 0] | 0; //@line 15465
      L54 : do {
       if (!($113 << 24 >> 24)) {
        $$4 = $70; //@line 15469
       } else {
        $$3182221 = $111; //@line 15471
        $$pr = $113; //@line 15471
        while (1) {
         if ($$pr << 24 >> 24 != (HEAP8[$$0166 + $$3182221 >> 0] | 0)) {
          break;
         }
         $118 = $$3182221 + 1 | 0; //@line 15479
         $$pr = HEAP8[$1 + $118 >> 0] | 0; //@line 15481
         if (!($$pr << 24 >> 24)) {
          $$4 = $70; //@line 15484
          break L54;
         } else {
          $$3182221 = $118; //@line 15487
         }
        }
        $$0169$be = 0; //@line 15491
        $$2181$sink = $$3182221 - $$1186$$0185 | 0; //@line 15491
        break L49;
       }
      } while (0);
      while (1) {
       if ($$4 >>> 0 <= $$0169 >>> 0) {
        $$3 = $$0166; //@line 15498
        break L35;
       }
       $$4 = $$4 + -1 | 0; //@line 15501
       if ((HEAP8[$1 + $$4 >> 0] | 0) != (HEAP8[$$0166 + $$4 >> 0] | 0)) {
        $$0169$be = $$0168; //@line 15510
        $$2181$sink = $$3178; //@line 15510
        break;
       }
      }
     }
    } while (0);
    $$0166 = $$0166 + $$2181$sink | 0; //@line 15517
    $$0169 = $$0169$be; //@line 15517
    $$0170 = $$3173; //@line 15517
   }
  }
 } while (0);
 STACKTOP = sp; //@line 15521
 return $$3 | 0; //@line 15521
}
function __ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$080 = 0, $100 = 0, $118 = 0, $12 = 0, $123 = 0, $128 = 0, $133 = 0, $15 = 0, $17 = 0, $19 = 0, $21 = 0, $36 = 0, $4 = 0, $40 = 0, $44 = 0, $55 = 0, $60 = 0, $61 = 0, $70 = 0, $73 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $89 = 0, $94 = 0, $95 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 21207
 L1 : do {
  if (!$1) {
   $$080 = -1003; //@line 21211
  } else {
   $4 = HEAP32[$0 >> 2] | 0; //@line 21213
   if (!$4) {
    $$080 = -1003; //@line 21216
   } else {
    do {
     switch (HEAP32[$1 >> 2] | 0) {
     case 0:
      {
       $8 = HEAP32[$1 + 4 >> 2] | 0; //@line 21223
       HEAP32[$2 >> 2] = $8; //@line 21224
       switch ($8 | 0) {
       case 0:
        {
         $AsyncCtx19 = _emscripten_alloc_async_context(4, sp) | 0; //@line 21227
         __ZN7LoRaPHY18put_radio_to_sleepEv($4); //@line 21228
         if (___async) {
          HEAP32[$AsyncCtx19 >> 2] = 520; //@line 21231
          sp = STACKTOP; //@line 21232
          return 0; //@line 21233
         } else {
          _emscripten_free_async_context($AsyncCtx19 | 0); //@line 21235
          $$080 = 0; //@line 21236
          break L1;
         }
         break;
        }
       case 2:
        {
         break;
        }
       default:
        {
         $$080 = 0; //@line 21245
         break L1;
        }
       }
       HEAP8[$2 + 13 >> 0] = 0; //@line 21250
       $AsyncCtx15 = _emscripten_alloc_async_context(12, sp) | 0; //@line 21251
       __ZN7LoRaPHY18put_radio_to_sleepEv($4); //@line 21252
       if (___async) {
        HEAP32[$AsyncCtx15 >> 2] = 521; //@line 21255
        HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 21257
        HEAP32[$AsyncCtx15 + 8 >> 2] = $2; //@line 21259
        sp = STACKTOP; //@line 21260
        return 0; //@line 21261
       }
       _emscripten_free_async_context($AsyncCtx15 | 0); //@line 21263
       $12 = HEAP32[$0 >> 2] | 0; //@line 21264
       $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 28 >> 2] | 0; //@line 21267
       $17 = HEAP8[$2 + 776 >> 0] | 0; //@line 21269
       $19 = HEAP8[$2 + 744 >> 0] | 0; //@line 21271
       $21 = HEAP32[$2 + 740 >> 2] | 0; //@line 21273
       $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 21275
       FUNCTION_TABLE_viiiii[$15 & 7]($12, $17, $19, $21, $2 + 824 | 0); //@line 21276
       if (___async) {
        HEAP32[$AsyncCtx >> 2] = 522; //@line 21279
        sp = STACKTOP; //@line 21280
        return 0; //@line 21281
       } else {
        _emscripten_free_async_context($AsyncCtx | 0); //@line 21283
        $$080 = 0; //@line 21284
        break L1;
       }
       break;
      }
     case 1:
      {
       HEAP8[$2 + 12 >> 0] = HEAP8[$1 + 4 >> 0] | 0; //@line 21293
       $$080 = 0; //@line 21294
       break L1;
       break;
      }
     case 2:
      {
       HEAP8[$2 + 796 >> 0] = HEAP8[$1 + 4 >> 0] | 0; //@line 21302
       $$080 = 0; //@line 21303
       break L1;
       break;
      }
     case 3:
      {
       HEAP32[$2 + 588 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 21311
       $$080 = 0; //@line 21312
       break L1;
       break;
      }
     case 4:
      {
       HEAP32[$2 + 592 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 21320
       $$080 = 0; //@line 21321
       break L1;
       break;
      }
     case 5:
      {
       $36 = HEAP32[$1 + 4 >> 2] | 0; //@line 21327
       if (!$36) {
        $$080 = -1003; //@line 21330
        break L1;
       }
       dest = $2 + 552 | 0; //@line 21334
       src = $36; //@line 21334
       stop = dest + 16 | 0; //@line 21334
       do {
        HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 21334
        dest = dest + 1 | 0; //@line 21334
        src = src + 1 | 0; //@line 21334
       } while ((dest | 0) < (stop | 0));
       $$080 = 0; //@line 21335
       break L1;
       break;
      }
     case 6:
      {
       $40 = HEAP32[$1 + 4 >> 2] | 0; //@line 21341
       if (!$40) {
        $$080 = -1003; //@line 21344
        break L1;
       }
       dest = $2 + 568 | 0; //@line 21348
       src = $40; //@line 21348
       stop = dest + 16 | 0; //@line 21348
       do {
        HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 21348
        dest = dest + 1 | 0; //@line 21348
        src = src + 1 | 0; //@line 21348
       } while ((dest | 0) < (stop | 0));
       $$080 = 0; //@line 21349
       break L1;
       break;
      }
     case 7:
      {
       $44 = HEAP8[$1 + 4 >> 0] | 0; //@line 21355
       HEAP8[$2 + 8 >> 0] = $44; //@line 21358
       $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 21359
       __ZN7LoRaPHY25setup_public_network_modeEb($4, $44 << 24 >> 24 != 0); //@line 21360
       if (___async) {
        HEAP32[$AsyncCtx7 >> 2] = 523; //@line 21363
        sp = STACKTOP; //@line 21364
        return 0; //@line 21365
       } else {
        _emscripten_free_async_context($AsyncCtx7 | 0); //@line 21367
        $$080 = 0; //@line 21368
        break L1;
       }
       break;
      }
     case 8:
      {
       HEAP8[$2 + 9 >> 0] = HEAP8[$1 + 4 >> 0] | 0; //@line 21377
       $$080 = 0; //@line 21378
       break L1;
       break;
      }
     case 10:
      {
       if (!(__ZN7LoRaPHY18verify_rx_datarateEh($4, HEAP8[$1 + 8 >> 0] | 0) | 0)) {
        $$080 = -1003; //@line 21387
        break L1;
       }
       $55 = $1 + 4 | 0; //@line 21392
       $60 = HEAP32[$55 + 4 >> 2] | 0; //@line 21397
       $61 = $2 + 772 | 0; //@line 21398
       HEAP32[$61 >> 2] = HEAP32[$55 >> 2]; //@line 21400
       HEAP32[$61 + 4 >> 2] = $60; //@line 21403
       if ((HEAP32[$2 >> 2] | 0) != 2) {
        $$080 = 0; //@line 21407
        break L1;
       }
       if (!(HEAP8[$2 + 12 >> 0] | 0)) {
        $$080 = 0; //@line 21414
        break L1;
       }
       $70 = HEAP32[$0 >> 2] | 0; //@line 21417
       $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 21418
       __ZN7LoRaPHY18put_radio_to_sleepEv($70); //@line 21419
       if (___async) {
        HEAP32[$AsyncCtx11 >> 2] = 524; //@line 21422
        HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 21424
        HEAP32[$AsyncCtx11 + 8 >> 2] = $2; //@line 21426
        sp = STACKTOP; //@line 21427
        return 0; //@line 21428
       }
       _emscripten_free_async_context($AsyncCtx11 | 0); //@line 21430
       $73 = HEAP32[$0 >> 2] | 0; //@line 21431
       $76 = HEAP32[(HEAP32[$73 >> 2] | 0) + 28 >> 2] | 0; //@line 21434
       $78 = HEAP8[$2 + 776 >> 0] | 0; //@line 21436
       $80 = HEAP8[$2 + 744 >> 0] | 0; //@line 21438
       $82 = HEAP32[$2 + 740 >> 2] | 0; //@line 21440
       $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 21442
       FUNCTION_TABLE_viiiii[$76 & 7]($73, $78, $80, $82, $2 + 824 | 0); //@line 21443
       if (___async) {
        HEAP32[$AsyncCtx3 >> 2] = 525; //@line 21446
        sp = STACKTOP; //@line 21447
        return 0; //@line 21448
       } else {
        _emscripten_free_async_context($AsyncCtx3 | 0); //@line 21450
        $$080 = 0; //@line 21451
        break L1;
       }
       break;
      }
     case 11:
      {
       if (!(__ZN7LoRaPHY18verify_rx_datarateEh($4, HEAP8[$1 + 8 >> 0] | 0) | 0)) {
        $$080 = -1003; //@line 21461
        break L1;
       }
       $89 = $1 + 4 | 0; //@line 21466
       $94 = HEAP32[$89 + 4 >> 2] | 0; //@line 21471
       $95 = $2 + 772 | 0; //@line 21472
       HEAP32[$95 >> 2] = HEAP32[$89 >> 2]; //@line 21474
       HEAP32[$95 + 4 >> 2] = $94; //@line 21477
       $$080 = 0; //@line 21478
       break L1;
       break;
      }
     case 29:
      {
       HEAP32[$2 + 788 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 21486
       $$080 = 0; //@line 21487
       break L1;
       break;
      }
     case 28:
      {
       HEAP8[$2 + 744 >> 0] = HEAP8[$1 + 4 >> 0] | 0; //@line 21495
       $$080 = 0; //@line 21496
       break L1;
       break;
      }
     case 14:
      {
       $100 = HEAP8[$1 + 4 >> 0] | 0; //@line 21502
       if (($100 + -1 & 255) >= 15) {
        $$080 = -1003; //@line 21506
        break L1;
       }
       HEAP8[$2 + 768 >> 0] = $100; //@line 21510
       $$080 = 0; //@line 21511
       break L1;
       break;
      }
     case 15:
      {
       HEAP32[$2 + 748 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 21519
       $$080 = 0; //@line 21520
       break L1;
       break;
      }
     case 16:
      {
       HEAP32[$2 + 752 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 21528
       $$080 = 0; //@line 21529
       break L1;
       break;
      }
     case 17:
      {
       HEAP32[$2 + 756 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 21537
       $$080 = 0; //@line 21538
       break L1;
       break;
      }
     case 18:
      {
       HEAP32[$2 + 760 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 21546
       $$080 = 0; //@line 21547
       break L1;
       break;
      }
     case 19:
      {
       HEAP32[$2 + 764 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 21555
       $$080 = 0; //@line 21556
       break L1;
       break;
      }
     case 20:
      {
       $118 = $1 + 4 | 0; //@line 21561
       if (!(__ZN7LoRaPHY18verify_tx_datarateEhb($4, HEAP8[$118 >> 0] | 0, 1) | 0)) {
        $$080 = -1003; //@line 21565
        break L1;
       }
       HEAP8[$2 + 737 >> 0] = HEAP8[$118 >> 0] | 0; //@line 21570
       $$080 = 0; //@line 21571
       break L1;
       break;
      }
     case 21:
      {
       $123 = $1 + 4 | 0; //@line 21576
       if (!(__ZN7LoRaPHY18verify_tx_datarateEhb($4, HEAP8[$123 >> 0] | 0, 0) | 0)) {
        $$080 = -1003; //@line 21580
        break L1;
       }
       HEAP8[$2 + 737 >> 0] = HEAP8[$123 >> 0] | 0; //@line 21585
       $$080 = 0; //@line 21586
       break L1;
       break;
      }
     case 23:
      {
       $128 = $1 + 4 | 0; //@line 21591
       if (!(__ZN7LoRaPHY15verify_tx_powerEh($4, HEAP8[$128 >> 0] | 0) | 0)) {
        $$080 = -1003; //@line 21595
        break L1;
       }
       HEAP8[$2 + 736 >> 0] = HEAP8[$128 >> 0] | 0; //@line 21600
       $$080 = 0; //@line 21601
       break L1;
       break;
      }
     case 22:
      {
       $133 = $1 + 4 | 0; //@line 21606
       if (!(__ZN7LoRaPHY15verify_tx_powerEh($4, HEAP8[$133 >> 0] | 0) | 0)) {
        $$080 = -1003; //@line 21610
        break L1;
       }
       HEAP8[$2 + 736 >> 0] = HEAP8[$133 >> 0] | 0; //@line 21615
       $$080 = 0; //@line 21616
       break L1;
       break;
      }
     case 24:
      {
       HEAP32[$2 + 596 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 21624
       $$080 = 0; //@line 21625
       break L1;
       break;
      }
     case 25:
      {
       HEAP32[$2 + 600 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 21633
       $$080 = 0; //@line 21634
       break L1;
       break;
      }
     case 27:
      {
       HEAP32[$2 + 740 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 21642
       $$080 = 0; //@line 21643
       break L1;
       break;
      }
     default:
      {
       $$080 = -1002; //@line 21648
       break L1;
      }
     }
    } while (0);
   }
  }
 } while (0);
 return $$080 | 0; //@line 21656
}
function _mbedtls_gcm_setkey($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$0$i = 0, $108 = 0, $110 = 0, $115 = 0, $120 = 0, $125 = 0, $130 = 0, $132 = 0, $133 = 0, $134 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $141 = 0, $143 = 0, $148 = 0, $153 = 0, $155 = 0, $156 = 0, $157 = 0, $159 = 0, $160 = 0, $161 = 0, $162 = 0, $164 = 0, $166 = 0, $171 = 0, $176 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $182 = 0, $183 = 0, $184 = 0, $187 = 0, $189 = 0, $194 = 0, $198 = 0, $199 = 0, $201 = 0, $205 = 0, $206 = 0, $208 = 0, $212 = 0, $213 = 0, $215 = 0, $219 = 0, $220 = 0, $222 = 0, $226 = 0, $227 = 0, $229 = 0, $233 = 0, $234 = 0, $236 = 0, $240 = 0, $241 = 0, $243 = 0, $247 = 0, $248 = 0, $250 = 0, $257 = 0, $26 = 0, $264 = 0, $271 = 0, $278 = 0, $285 = 0, $292 = 0, $299 = 0, $306 = 0, $313 = 0, $32 = 0, $320 = 0, $327 = 0, $334 = 0, $341 = 0, $348 = 0, $4 = 0, $5 = 0, $54 = 0, $6 = 0, $72 = 0, $90 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 4209
 STACKTOP = STACKTOP + 32 | 0; //@line 4210
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 4210
 $4 = sp + 8 | 0; //@line 4211
 $5 = sp; //@line 4212
 $6 = _mbedtls_cipher_info_from_values($1, $3, 1) | 0; //@line 4213
 if (!$6) {
  $$0 = -20; //@line 4216
  STACKTOP = sp; //@line 4217
  return $$0 | 0; //@line 4217
 }
 if ((HEAP32[$6 + 24 >> 2] | 0) != 16) {
  $$0 = -20; //@line 4223
  STACKTOP = sp; //@line 4224
  return $$0 | 0; //@line 4224
 }
 $AsyncCtx11 = _emscripten_alloc_async_context(32, sp) | 0; //@line 4226
 _mbedtls_cipher_free($0); //@line 4227
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 604; //@line 4230
  HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 4232
  HEAP32[$AsyncCtx11 + 8 >> 2] = $6; //@line 4234
  HEAP32[$AsyncCtx11 + 12 >> 2] = $2; //@line 4236
  HEAP32[$AsyncCtx11 + 16 >> 2] = $3; //@line 4238
  HEAP32[$AsyncCtx11 + 20 >> 2] = $4; //@line 4240
  HEAP32[$AsyncCtx11 + 24 >> 2] = $5; //@line 4242
  HEAP32[$AsyncCtx11 + 28 >> 2] = $0; //@line 4244
  sp = STACKTOP; //@line 4245
  STACKTOP = sp; //@line 4246
  return 0; //@line 4246
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 4248
 $AsyncCtx7 = _emscripten_alloc_async_context(28, sp) | 0; //@line 4249
 $18 = _mbedtls_cipher_setup($0, $6) | 0; //@line 4250
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 605; //@line 4253
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 4255
  HEAP32[$AsyncCtx7 + 8 >> 2] = $2; //@line 4257
  HEAP32[$AsyncCtx7 + 12 >> 2] = $3; //@line 4259
  HEAP32[$AsyncCtx7 + 16 >> 2] = $4; //@line 4261
  HEAP32[$AsyncCtx7 + 20 >> 2] = $5; //@line 4263
  HEAP32[$AsyncCtx7 + 24 >> 2] = $0; //@line 4265
  sp = STACKTOP; //@line 4266
  STACKTOP = sp; //@line 4267
  return 0; //@line 4267
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 4269
 if ($18 | 0) {
  $$0 = $18; //@line 4272
  STACKTOP = sp; //@line 4273
  return $$0 | 0; //@line 4273
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(20, sp) | 0; //@line 4275
 $26 = _mbedtls_cipher_setkey($0, $2, $3, 1) | 0; //@line 4276
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 606; //@line 4279
  HEAP32[$AsyncCtx3 + 4 >> 2] = $4; //@line 4281
  HEAP32[$AsyncCtx3 + 8 >> 2] = $5; //@line 4283
  HEAP32[$AsyncCtx3 + 12 >> 2] = $0; //@line 4285
  HEAP32[$AsyncCtx3 + 16 >> 2] = $0; //@line 4287
  sp = STACKTOP; //@line 4288
  STACKTOP = sp; //@line 4289
  return 0; //@line 4289
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 4291
 if ($26 | 0) {
  $$0 = $26; //@line 4294
  STACKTOP = sp; //@line 4295
  return $$0 | 0; //@line 4295
 }
 HEAP32[$5 >> 2] = 0; //@line 4297
 dest = $4; //@line 4298
 stop = dest + 16 | 0; //@line 4298
 do {
  HEAP8[dest >> 0] = 0; //@line 4298
  dest = dest + 1 | 0; //@line 4298
 } while ((dest | 0) < (stop | 0));
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 4299
 $32 = _mbedtls_cipher_update($0, $4, 16, $4, $5) | 0; //@line 4300
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 607; //@line 4303
  HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 4305
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 4307
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 4309
  HEAP32[$AsyncCtx + 16 >> 2] = $5; //@line 4311
  sp = STACKTOP; //@line 4312
  STACKTOP = sp; //@line 4313
  return 0; //@line 4313
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 4315
 if (!$32) {
  $54 = (HEAPU8[$4 + 1 >> 0] | 0) << 16 | (HEAPU8[$4 >> 0] | 0) << 24 | (HEAPU8[$4 + 2 >> 0] | 0) << 8 | (HEAPU8[$4 + 3 >> 0] | 0); //@line 4334
  $72 = (HEAPU8[$4 + 5 >> 0] | 0) << 16 | (HEAPU8[$4 + 4 >> 0] | 0) << 24 | (HEAPU8[$4 + 6 >> 0] | 0) << 8 | (HEAPU8[$4 + 7 >> 0] | 0); //@line 4352
  $90 = (HEAPU8[$4 + 9 >> 0] | 0) << 16 | (HEAPU8[$4 + 8 >> 0] | 0) << 24 | (HEAPU8[$4 + 10 >> 0] | 0) << 8 | (HEAPU8[$4 + 11 >> 0] | 0); //@line 4370
  $108 = (HEAPU8[$4 + 13 >> 0] | 0) << 16 | (HEAPU8[$4 + 12 >> 0] | 0) << 24 | (HEAPU8[$4 + 14 >> 0] | 0) << 8 | (HEAPU8[$4 + 15 >> 0] | 0); //@line 4388
  $110 = $0 + 136 | 0; //@line 4390
  HEAP32[$110 >> 2] = $108; //@line 4392
  HEAP32[$110 + 4 >> 2] = $90; //@line 4395
  $115 = $0 + 264 | 0; //@line 4397
  HEAP32[$115 >> 2] = $72; //@line 4399
  HEAP32[$115 + 4 >> 2] = $54; //@line 4402
  $120 = $0 + 200 | 0; //@line 4404
  HEAP32[$120 >> 2] = 0; //@line 4406
  HEAP32[$120 + 4 >> 2] = 0; //@line 4409
  $125 = $0 + 72 | 0; //@line 4411
  HEAP32[$125 >> 2] = 0; //@line 4413
  HEAP32[$125 + 4 >> 2] = 0; //@line 4416
  $130 = _i64Subtract(0, 0, $108 & 1 | 0, 0) | 0; //@line 4418
  $132 = _bitshift64Shl($72 | 0, 0, 63) | 0; //@line 4420
  $133 = tempRet0; //@line 4421
  $134 = _bitshift64Lshr($108 | 0, $90 | 0, 1) | 0; //@line 4422
  $136 = $134 | $132; //@line 4424
  $137 = tempRet0 | $133; //@line 4425
  $138 = _bitshift64Lshr($72 | 0, $54 | 0, 1) | 0; //@line 4426
  $139 = tempRet0; //@line 4427
  $141 = $130 & -520093696 ^ $139; //@line 4429
  $143 = $0 + 104 | 0; //@line 4431
  HEAP32[$143 >> 2] = $136; //@line 4433
  HEAP32[$143 + 4 >> 2] = $137; //@line 4436
  $148 = $0 + 232 | 0; //@line 4438
  HEAP32[$148 >> 2] = $138; //@line 4440
  HEAP32[$148 + 4 >> 2] = $141; //@line 4443
  $153 = _i64Subtract(0, 0, $134 & 1 | 0, 0) | 0; //@line 4445
  $155 = _bitshift64Shl($138 | 0, $139 | 0, 63) | 0; //@line 4447
  $156 = tempRet0; //@line 4448
  $157 = _bitshift64Lshr($136 | 0, $137 | 0, 1) | 0; //@line 4449
  $159 = $157 | $155; //@line 4451
  $160 = tempRet0 | $156; //@line 4452
  $161 = _bitshift64Lshr($138 | 0, $141 | 0, 1) | 0; //@line 4453
  $162 = tempRet0; //@line 4454
  $164 = $153 & -520093696 ^ $162; //@line 4456
  $166 = $0 + 88 | 0; //@line 4458
  HEAP32[$166 >> 2] = $159; //@line 4460
  HEAP32[$166 + 4 >> 2] = $160; //@line 4463
  $171 = $0 + 216 | 0; //@line 4465
  HEAP32[$171 >> 2] = $161; //@line 4467
  HEAP32[$171 + 4 >> 2] = $164; //@line 4470
  $176 = _i64Subtract(0, 0, $157 & 1 | 0, 0) | 0; //@line 4472
  $178 = _bitshift64Shl($161 | 0, $162 | 0, 63) | 0; //@line 4474
  $179 = tempRet0; //@line 4475
  $180 = _bitshift64Lshr($159 | 0, $160 | 0, 1) | 0; //@line 4476
  $182 = $178 | $180; //@line 4478
  $183 = $179 | tempRet0; //@line 4479
  $184 = _bitshift64Lshr($161 | 0, $164 | 0, 1) | 0; //@line 4480
  $187 = $176 & -520093696 ^ tempRet0; //@line 4483
  $189 = $0 + 80 | 0; //@line 4485
  HEAP32[$189 >> 2] = $182; //@line 4487
  HEAP32[$189 + 4 >> 2] = $183; //@line 4490
  $194 = $0 + 208 | 0; //@line 4492
  HEAP32[$194 >> 2] = $184; //@line 4494
  HEAP32[$194 + 4 >> 2] = $187; //@line 4497
  $198 = $184 ^ $161; //@line 4498
  $199 = $187 ^ $164; //@line 4499
  $201 = $0 + 224 | 0; //@line 4501
  HEAP32[$201 >> 2] = $198; //@line 4503
  HEAP32[$201 + 4 >> 2] = $199; //@line 4506
  $205 = $182 ^ $159; //@line 4507
  $206 = $183 ^ $160; //@line 4508
  $208 = $0 + 96 | 0; //@line 4510
  HEAP32[$208 >> 2] = $205; //@line 4512
  HEAP32[$208 + 4 >> 2] = $206; //@line 4515
  $212 = $184 ^ $138; //@line 4516
  $213 = $187 ^ $141; //@line 4517
  $215 = $0 + 240 | 0; //@line 4519
  HEAP32[$215 >> 2] = $212; //@line 4521
  HEAP32[$215 + 4 >> 2] = $213; //@line 4524
  $219 = $182 ^ $136; //@line 4525
  $220 = $183 ^ $137; //@line 4526
  $222 = $0 + 112 | 0; //@line 4528
  HEAP32[$222 >> 2] = $219; //@line 4530
  HEAP32[$222 + 4 >> 2] = $220; //@line 4533
  $226 = $161 ^ $138; //@line 4534
  $227 = $164 ^ $141; //@line 4535
  $229 = $0 + 248 | 0; //@line 4537
  HEAP32[$229 >> 2] = $226; //@line 4539
  HEAP32[$229 + 4 >> 2] = $227; //@line 4542
  $233 = $159 ^ $136; //@line 4543
  $234 = $160 ^ $137; //@line 4544
  $236 = $0 + 120 | 0; //@line 4546
  HEAP32[$236 >> 2] = $233; //@line 4548
  HEAP32[$236 + 4 >> 2] = $234; //@line 4551
  $240 = $198 ^ $138; //@line 4552
  $241 = $199 ^ $141; //@line 4553
  $243 = $0 + 256 | 0; //@line 4555
  HEAP32[$243 >> 2] = $240; //@line 4557
  HEAP32[$243 + 4 >> 2] = $241; //@line 4560
  $247 = $205 ^ $136; //@line 4561
  $248 = $206 ^ $137; //@line 4562
  $250 = $0 + 128 | 0; //@line 4564
  HEAP32[$250 >> 2] = $247; //@line 4566
  HEAP32[$250 + 4 >> 2] = $248; //@line 4569
  $257 = $0 + 272 | 0; //@line 4573
  HEAP32[$257 >> 2] = $184 ^ $72; //@line 4575
  HEAP32[$257 + 4 >> 2] = $187 ^ $54; //@line 4578
  $264 = $0 + 144 | 0; //@line 4582
  HEAP32[$264 >> 2] = $182 ^ $108; //@line 4584
  HEAP32[$264 + 4 >> 2] = $183 ^ $90; //@line 4587
  $271 = $0 + 280 | 0; //@line 4591
  HEAP32[$271 >> 2] = $161 ^ $72; //@line 4593
  HEAP32[$271 + 4 >> 2] = $164 ^ $54; //@line 4596
  $278 = $0 + 152 | 0; //@line 4600
  HEAP32[$278 >> 2] = $159 ^ $108; //@line 4602
  HEAP32[$278 + 4 >> 2] = $160 ^ $90; //@line 4605
  $285 = $0 + 288 | 0; //@line 4609
  HEAP32[$285 >> 2] = $198 ^ $72; //@line 4611
  HEAP32[$285 + 4 >> 2] = $199 ^ $54; //@line 4614
  $292 = $0 + 160 | 0; //@line 4618
  HEAP32[$292 >> 2] = $205 ^ $108; //@line 4620
  HEAP32[$292 + 4 >> 2] = $206 ^ $90; //@line 4623
  $299 = $0 + 296 | 0; //@line 4627
  HEAP32[$299 >> 2] = $138 ^ $72; //@line 4629
  HEAP32[$299 + 4 >> 2] = $141 ^ $54; //@line 4632
  $306 = $0 + 168 | 0; //@line 4636
  HEAP32[$306 >> 2] = $136 ^ $108; //@line 4638
  HEAP32[$306 + 4 >> 2] = $137 ^ $90; //@line 4641
  $313 = $0 + 304 | 0; //@line 4645
  HEAP32[$313 >> 2] = $212 ^ $72; //@line 4647
  HEAP32[$313 + 4 >> 2] = $213 ^ $54; //@line 4650
  $320 = $0 + 176 | 0; //@line 4654
  HEAP32[$320 >> 2] = $219 ^ $108; //@line 4656
  HEAP32[$320 + 4 >> 2] = $220 ^ $90; //@line 4659
  $327 = $0 + 312 | 0; //@line 4663
  HEAP32[$327 >> 2] = $226 ^ $72; //@line 4665
  HEAP32[$327 + 4 >> 2] = $227 ^ $54; //@line 4668
  $334 = $0 + 184 | 0; //@line 4672
  HEAP32[$334 >> 2] = $233 ^ $108; //@line 4674
  HEAP32[$334 + 4 >> 2] = $234 ^ $90; //@line 4677
  $341 = $0 + 320 | 0; //@line 4681
  HEAP32[$341 >> 2] = $240 ^ $72; //@line 4683
  HEAP32[$341 + 4 >> 2] = $241 ^ $54; //@line 4686
  $348 = $0 + 192 | 0; //@line 4690
  HEAP32[$348 >> 2] = $247 ^ $108; //@line 4692
  HEAP32[$348 + 4 >> 2] = $248 ^ $90; //@line 4695
  $$0$i = 0; //@line 4696
 } else {
  $$0$i = $32; //@line 4698
 }
 $$0 = $$0$i; //@line 4700
 STACKTOP = sp; //@line 4701
 return $$0 | 0; //@line 4701
}
function __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$0$i22 = 0, $$024 = 0, $$05$i = 0, $$06$i = 0, $$1 = 0, $10 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0.0, $112 = 0.0, $114 = 0, $118 = 0, $12 = 0, $125 = 0, $126 = 0, $130 = 0, $138 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $28 = 0, $3 = 0, $36 = 0, $37 = 0, $4 = 0, $40 = 0, $41 = 0, $44 = 0, $53 = 0, $65 = 0, $68 = 0, $7 = 0, $72 = 0, $73 = 0, $8 = 0, $83 = 0, $90 = 0, $95 = 0, $98 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx21 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 17183
 STACKTOP = STACKTOP + 16 | 0; //@line 17184
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 17184
 $2 = sp + 1 | 0; //@line 17185
 $3 = sp; //@line 17186
 $4 = $0 + 968 | 0; //@line 17187
 if (HEAP32[$4 >> 2] | 0) {
  $$1 = -1e3; //@line 17191
  STACKTOP = sp; //@line 17192
  return $$1 | 0; //@line 17192
 }
 $7 = $0 + 264 | 0; //@line 17194
 __ZN11LoRaMacMlme18reset_confirmationEv($7); //@line 17195
 $8 = HEAP32[$1 >> 2] | 0; //@line 17196
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($7) | 0) >> 2] = $8; //@line 17198
 $10 = $0 + 944 | 0; //@line 17199
 $12 = HEAP8[$10 >> 0] | 8; //@line 17201
 HEAP8[$10 >> 0] = $12; //@line 17202
 switch (HEAP32[$1 >> 2] | 0) {
 case 1:
  {
   $$0 = __ZN14LoRaMacCommand15add_mac_commandEhhh($0 + 4 | 0, 2, 0, 0) | 0; //@line 17208
   label = 30; //@line 17209
   break;
  }
 case 0:
  {
   if (HEAP32[$4 >> 2] & 16 | 0) {
    $$1 = -1e3; //@line 17217
    STACKTOP = sp; //@line 17218
    return $$1 | 0; //@line 17218
   }
   $20 = HEAP32[$1 + 4 >> 2] | 0; //@line 17221
   if (!$20) {
    $$1 = -1003; //@line 17224
    STACKTOP = sp; //@line 17225
    return $$1 | 0; //@line 17225
   }
   $22 = $1 + 8 | 0; //@line 17227
   if (!(HEAP32[$22 >> 2] | 0)) {
    $$1 = -1003; //@line 17231
    STACKTOP = sp; //@line 17232
    return $$1 | 0; //@line 17232
   }
   $25 = $1 + 12 | 0; //@line 17234
   if (!(HEAP32[$25 >> 2] | 0)) {
    $$1 = -1003; //@line 17238
    STACKTOP = sp; //@line 17239
    return $$1 | 0; //@line 17239
   }
   $28 = $1 + 16 | 0; //@line 17241
   if (!(HEAP8[$28 >> 0] | 0)) {
    $$1 = -1003; //@line 17245
    STACKTOP = sp; //@line 17246
    return $$1 | 0; //@line 17246
   }
   HEAP32[$0 + 900 >> 2] = $20; //@line 17249
   HEAP32[$0 + 904 >> 2] = HEAP32[$22 >> 2]; //@line 17252
   HEAP32[$0 + 908 >> 2] = HEAP32[$25 >> 2]; //@line 17255
   $36 = HEAP8[$28 >> 0] | 0; //@line 17256
   $37 = $0 + 896 | 0; //@line 17257
   HEAP8[$37 >> 0] = $36; //@line 17258
   $40 = __ZN7LoRaPHY21verify_nb_join_trialsEh(HEAP32[$0 >> 2] | 0, HEAP8[$28 >> 0] | 0) | 0; //@line 17261
   HEAP8[$37 >> 0] = $40 ? $36 : 12; //@line 17263
   $41 = $0 + 897 | 0; //@line 17264
   HEAP8[$41 >> 0] = 0; //@line 17265
   HEAP8[$0 + 372 >> 0] = 0; //@line 17268
   $44 = $0 + 956 | 0; //@line 17269
   HEAP32[$44 >> 2] = 0; //@line 17270
   HEAP32[$0 + 960 >> 2] = 0; //@line 17272
   HEAP32[$0 + 964 >> 2] = 0; //@line 17274
   HEAP8[$0 + 380 >> 0] = 0; //@line 17276
   HEAP8[$0 + 894 >> 0] = 1; //@line 17278
   HEAP8[$0 + 895 >> 0] = 1; //@line 17280
   HEAP8[$0 + 377 >> 0] = 0; //@line 17282
   HEAP8[$0 + 1152 >> 0] = 0; //@line 17284
   HEAP16[$0 + 1154 >> 1] = 1; //@line 17286
   $53 = $0 + 4 | 0; //@line 17287
   __ZN14LoRaMacCommand20clear_command_bufferEv($53); //@line 17288
   __ZN14LoRaMacCommand19clear_repeat_bufferEv($53); //@line 17289
   __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($53); //@line 17290
   HEAP8[$0 + 371 >> 0] = 1; //@line 17292
   __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb(HEAP32[$0 >> 2] | 0, $0 + 360 | 0, 0); //@line 17294
   HEAP8[$0 + 373 >> 0] = 0; //@line 17296
   HEAP8[$0 + 374 >> 0] = 0; //@line 17298
   $$05$i = HEAP32[$0 + 1208 >> 2] | 0; //@line 17300
   if ($$05$i | 0) {
    $$06$i = $$05$i; //@line 17303
    do {
     HEAP32[$$06$i + 36 >> 2] = 0; //@line 17306
     $$06$i = HEAP32[$$06$i + 40 >> 2] | 0; //@line 17308
    } while (($$06$i | 0) != 0);
   }
   HEAP8[$0 + 378 >> 0] = 0; //@line 17318
   HEAP8[$0 + 379 >> 0] = 0; //@line 17320
   $65 = HEAP32[$0 >> 2] | 0; //@line 17321
   $68 = HEAP32[(HEAP32[$65 >> 2] | 0) + 52 >> 2] | 0; //@line 17324
   $72 = (HEAPU8[$41 >> 0] | 0) + 1 & 255; //@line 17328
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 17329
   $73 = FUNCTION_TABLE_iii[$68 & 31]($65, $72) | 0; //@line 17330
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 468; //@line 17333
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 17335
    HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 17337
    HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 17339
    HEAP32[$AsyncCtx + 16 >> 2] = $44; //@line 17341
    HEAP32[$AsyncCtx + 20 >> 2] = $10; //@line 17343
    sp = STACKTOP; //@line 17344
    STACKTOP = sp; //@line 17345
    return 0; //@line 17345
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 17347
   HEAP8[$0 + 1097 >> 0] = $73; //@line 17349
   HEAP8[$3 >> 0] = 0; //@line 17350
   HEAP8[$2 >> 0] = HEAP8[$0 + 1156 >> 0] << 7; //@line 17354
   $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 17355
   $83 = __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt($0, $3, $2, 0, 0, 0) | 0; //@line 17356
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 469; //@line 17359
    HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 17361
    HEAP32[$AsyncCtx2 + 8 >> 2] = $44; //@line 17363
    HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 17365
    HEAP32[$AsyncCtx2 + 16 >> 2] = $3; //@line 17367
    HEAP32[$AsyncCtx2 + 20 >> 2] = $10; //@line 17369
    sp = STACKTOP; //@line 17370
    STACKTOP = sp; //@line 17371
    return 0; //@line 17371
   }
   _emscripten_free_async_context($AsyncCtx2 | 0); //@line 17373
   do {
    if (!$83) {
     $90 = $0 + 288 | 0; //@line 17377
     HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($90) | 0) + 11 >> 0] = 0; //@line 17380
     HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($90) | 0) + 10 >> 0] = 0; //@line 17383
     $95 = HEAP32[$44 >> 2] | 0; //@line 17384
     HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($90) | 0) + 16 >> 2] = $95; //@line 17387
     $AsyncCtx21 = _emscripten_alloc_async_context(20, sp) | 0; //@line 17388
     $98 = __ZN7LoRaMac11schedule_txEv($0) | 0; //@line 17389
     if (___async) {
      HEAP32[$AsyncCtx21 >> 2] = 470; //@line 17392
      HEAP32[$AsyncCtx21 + 4 >> 2] = $2; //@line 17394
      HEAP32[$AsyncCtx21 + 8 >> 2] = $3; //@line 17396
      HEAP32[$AsyncCtx21 + 12 >> 2] = $10; //@line 17398
      HEAP32[$AsyncCtx21 + 16 >> 2] = $0; //@line 17400
      sp = STACKTOP; //@line 17401
      STACKTOP = sp; //@line 17402
      return 0; //@line 17402
     } else {
      _emscripten_free_async_context($AsyncCtx21 | 0); //@line 17404
      $$0$i22 = $98; //@line 17405
      break;
     }
    } else {
     $$0$i22 = $83; //@line 17409
    }
   } while (0);
   $$0 = $$0$i22; //@line 17412
   label = 30; //@line 17413
   break;
  }
 case 2:
  {
   $104 = HEAP8[$0 + 378 >> 0] | 0; //@line 17418
   $106 = HEAP8[$0 + 1097 >> 0] | 0; //@line 17420
   $108 = HEAP8[$0 + 1096 >> 0] | 0; //@line 17422
   $110 = +HEAPF32[$0 + 1144 >> 2]; //@line 17424
   $112 = +HEAPF32[$0 + 1148 >> 2]; //@line 17426
   $114 = HEAP16[$1 + 4 >> 1] | 0; //@line 17428
   $AsyncCtx17 = _emscripten_alloc_async_context(12, sp) | 0; //@line 17429
   __ZN11LoRaMacMlme22set_tx_continuous_waveEhaafft($7, $104, $106, $108, $110, $112, $114); //@line 17430
   if (___async) {
    HEAP32[$AsyncCtx17 >> 2] = 471; //@line 17433
    HEAP32[$AsyncCtx17 + 4 >> 2] = $0; //@line 17435
    HEAP32[$AsyncCtx17 + 8 >> 2] = $4; //@line 17437
    sp = STACKTOP; //@line 17438
    STACKTOP = sp; //@line 17439
    return 0; //@line 17439
   }
   _emscripten_free_async_context($AsyncCtx17 | 0); //@line 17441
   $118 = HEAP32[$0 + 356 >> 2] | 0; //@line 17443
   $AsyncCtx9 = _emscripten_alloc_async_context(8, sp) | 0; //@line 17445
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($118, $0 + 996 | 0, 1e3); //@line 17446
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 472; //@line 17449
    HEAP32[$AsyncCtx9 + 4 >> 2] = $4; //@line 17451
    sp = STACKTOP; //@line 17452
    STACKTOP = sp; //@line 17453
    return 0; //@line 17453
   }
   _emscripten_free_async_context($AsyncCtx9 | 0); //@line 17455
   HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 1; //@line 17458
   $$1 = 0; //@line 17459
   STACKTOP = sp; //@line 17460
   return $$1 | 0; //@line 17460
  }
 case 3:
  {
   $125 = HEAP8[$1 + 12 >> 0] | 0; //@line 17466
   $126 = HEAP16[$1 + 4 >> 1] | 0; //@line 17467
   $AsyncCtx13 = _emscripten_alloc_async_context(12, sp) | 0; //@line 17468
   __ZN11LoRaMacMlme22set_tx_continuous_waveEhaafft($7, 0, 0, $125, 0.0, 0.0, $126); //@line 17469
   if (___async) {
    HEAP32[$AsyncCtx13 >> 2] = 473; //@line 17472
    HEAP32[$AsyncCtx13 + 4 >> 2] = $0; //@line 17474
    HEAP32[$AsyncCtx13 + 8 >> 2] = $4; //@line 17476
    sp = STACKTOP; //@line 17477
    STACKTOP = sp; //@line 17478
    return 0; //@line 17478
   }
   _emscripten_free_async_context($AsyncCtx13 | 0); //@line 17480
   $130 = HEAP32[$0 + 356 >> 2] | 0; //@line 17482
   $AsyncCtx5 = _emscripten_alloc_async_context(8, sp) | 0; //@line 17484
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($130, $0 + 996 | 0, 1e3); //@line 17485
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 474; //@line 17488
    HEAP32[$AsyncCtx5 + 4 >> 2] = $4; //@line 17490
    sp = STACKTOP; //@line 17491
    STACKTOP = sp; //@line 17492
    return 0; //@line 17492
   }
   _emscripten_free_async_context($AsyncCtx5 | 0); //@line 17494
   HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 1; //@line 17497
   $$1 = 0; //@line 17498
   STACKTOP = sp; //@line 17499
   return $$1 | 0; //@line 17499
  }
 default:
  {
   $$024 = -1002; //@line 17503
   $138 = $12; //@line 17503
  }
 }
 do {
  if ((label | 0) == 30) {
   if (!$$0) {
    $$1 = 0; //@line 17510
    STACKTOP = sp; //@line 17511
    return $$1 | 0; //@line 17511
   } else {
    $$024 = $$0; //@line 17514
    $138 = HEAP8[$10 >> 0] | 0; //@line 17514
    break;
   }
  }
 } while (0);
 HEAP8[$0 + 373 >> 0] = 0; //@line 17520
 HEAP8[$10 >> 0] = $138 & -9; //@line 17522
 $$1 = $$024; //@line 17523
 STACKTOP = sp; //@line 17524
 return $$1 | 0; //@line 17524
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $_0$0 = 0, $_0$1 = 0, $q_sroa_1_1198$looptemp = 0;
 $n_sroa_0_0_extract_trunc = $a$0; //@line 34852
 $n_sroa_1_4_extract_shift$0 = $a$1; //@line 34853
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0; //@line 34854
 $d_sroa_0_0_extract_trunc = $b$0; //@line 34855
 $d_sroa_1_4_extract_shift$0 = $b$1; //@line 34856
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0; //@line 34857
 if (!$n_sroa_1_4_extract_trunc) {
  $4 = ($rem | 0) != 0; //@line 34859
  if (!$d_sroa_1_4_extract_trunc) {
   if ($4) {
    HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0); //@line 34862
    HEAP32[$rem + 4 >> 2] = 0; //@line 34863
   }
   $_0$1 = 0; //@line 34865
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0; //@line 34866
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 34867
  } else {
   if (!$4) {
    $_0$1 = 0; //@line 34870
    $_0$0 = 0; //@line 34871
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 34872
   }
   HEAP32[$rem >> 2] = $a$0 | 0; //@line 34874
   HEAP32[$rem + 4 >> 2] = $a$1 & 0; //@line 34875
   $_0$1 = 0; //@line 34876
   $_0$0 = 0; //@line 34877
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 34878
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0; //@line 34881
 do {
  if (!$d_sroa_0_0_extract_trunc) {
   if ($17) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0); //@line 34886
     HEAP32[$rem + 4 >> 2] = 0; //@line 34887
    }
    $_0$1 = 0; //@line 34889
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0; //@line 34890
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 34891
   }
   if (!$n_sroa_0_0_extract_trunc) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = 0; //@line 34895
     HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0); //@line 34896
    }
    $_0$1 = 0; //@line 34898
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0; //@line 34899
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 34900
   }
   $37 = $d_sroa_1_4_extract_trunc - 1 | 0; //@line 34902
   if (!($37 & $d_sroa_1_4_extract_trunc)) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = $a$0 | 0; //@line 34905
     HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0; //@line 34906
    }
    $_0$1 = 0; //@line 34908
    $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0); //@line 34909
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 34910
   }
   $51 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 34913
   if ($51 >>> 0 <= 30) {
    $57 = $51 + 1 | 0; //@line 34915
    $58 = 31 - $51 | 0; //@line 34916
    $sr_1_ph = $57; //@line 34917
    $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0); //@line 34918
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0); //@line 34919
    $q_sroa_0_1_ph = 0; //@line 34920
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58; //@line 34921
    break;
   }
   if (!$rem) {
    $_0$1 = 0; //@line 34925
    $_0$0 = 0; //@line 34926
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 34927
   }
   HEAP32[$rem >> 2] = $a$0 | 0; //@line 34929
   HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 34930
   $_0$1 = 0; //@line 34931
   $_0$0 = 0; //@line 34932
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 34933
  } else {
   if (!$17) {
    $119 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 34937
    if ($119 >>> 0 <= 31) {
     $125 = $119 + 1 | 0; //@line 34939
     $126 = 31 - $119 | 0; //@line 34940
     $130 = $119 - 31 >> 31; //@line 34941
     $sr_1_ph = $125; //@line 34942
     $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126; //@line 34943
     $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130; //@line 34944
     $q_sroa_0_1_ph = 0; //@line 34945
     $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126; //@line 34946
     break;
    }
    if (!$rem) {
     $_0$1 = 0; //@line 34950
     $_0$0 = 0; //@line 34951
     return (tempRet0 = $_0$1, $_0$0) | 0; //@line 34952
    }
    HEAP32[$rem >> 2] = $a$0 | 0; //@line 34954
    HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 34955
    $_0$1 = 0; //@line 34956
    $_0$0 = 0; //@line 34957
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 34958
   }
   $66 = $d_sroa_0_0_extract_trunc - 1 | 0; //@line 34960
   if ($66 & $d_sroa_0_0_extract_trunc | 0) {
    $88 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 34963
    $89 = 64 - $88 | 0; //@line 34964
    $91 = 32 - $88 | 0; //@line 34965
    $92 = $91 >> 31; //@line 34966
    $95 = $88 - 32 | 0; //@line 34967
    $105 = $95 >> 31; //@line 34968
    $sr_1_ph = $88; //@line 34969
    $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105; //@line 34970
    $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0); //@line 34971
    $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92; //@line 34972
    $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31; //@line 34973
    break;
   }
   if ($rem | 0) {
    HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc; //@line 34977
    HEAP32[$rem + 4 >> 2] = 0; //@line 34978
   }
   if (($d_sroa_0_0_extract_trunc | 0) == 1) {
    $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 34981
    $_0$0 = $a$0 | 0 | 0; //@line 34982
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 34983
   } else {
    $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0; //@line 34985
    $_0$1 = $n_sroa_1_4_extract_trunc >>> ($78 >>> 0) | 0; //@line 34986
    $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0; //@line 34987
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 34988
   }
  }
 } while (0);
 if (!$sr_1_ph) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph; //@line 34993
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph; //@line 34994
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph; //@line 34995
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph; //@line 34996
  $carry_0_lcssa$1 = 0; //@line 34997
  $carry_0_lcssa$0 = 0; //@line 34998
 } else {
  $d_sroa_0_0_insert_insert99$0 = $b$0 | 0 | 0; //@line 35000
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0; //@line 35001
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0; //@line 35002
  $137$1 = tempRet0; //@line 35003
  $q_sroa_1_1198 = $q_sroa_1_1_ph; //@line 35004
  $q_sroa_0_1199 = $q_sroa_0_1_ph; //@line 35005
  $r_sroa_1_1200 = $r_sroa_1_1_ph; //@line 35006
  $r_sroa_0_1201 = $r_sroa_0_1_ph; //@line 35007
  $sr_1202 = $sr_1_ph; //@line 35008
  $carry_0203 = 0; //@line 35009
  do {
   $q_sroa_1_1198$looptemp = $q_sroa_1_1198;
   $q_sroa_1_1198 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1; //@line 35011
   $q_sroa_0_1199 = $carry_0203 | $q_sroa_0_1199 << 1; //@line 35012
   $r_sroa_0_0_insert_insert42$0 = $r_sroa_0_1201 << 1 | $q_sroa_1_1198$looptemp >>> 31 | 0; //@line 35013
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0; //@line 35014
   _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0; //@line 35015
   $150$1 = tempRet0; //@line 35016
   $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1; //@line 35017
   $carry_0203 = $151$0 & 1; //@line 35018
   $r_sroa_0_1201 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0; //@line 35020
   $r_sroa_1_1200 = tempRet0; //@line 35021
   $sr_1202 = $sr_1202 - 1 | 0; //@line 35022
  } while (($sr_1202 | 0) != 0);
  $q_sroa_1_1_lcssa = $q_sroa_1_1198; //@line 35034
  $q_sroa_0_1_lcssa = $q_sroa_0_1199; //@line 35035
  $r_sroa_1_1_lcssa = $r_sroa_1_1200; //@line 35036
  $r_sroa_0_1_lcssa = $r_sroa_0_1201; //@line 35037
  $carry_0_lcssa$1 = 0; //@line 35038
  $carry_0_lcssa$0 = $carry_0203; //@line 35039
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa; //@line 35041
 $q_sroa_0_0_insert_ext75$1 = 0; //@line 35042
 if ($rem | 0) {
  HEAP32[$rem >> 2] = $r_sroa_0_1_lcssa; //@line 35045
  HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa; //@line 35046
 }
 $_0$1 = ($q_sroa_0_0_insert_ext75$0 | 0) >>> 31 | ($q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1) << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1; //@line 35048
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0; //@line 35049
 return (tempRet0 = $_0$1, $_0$0) | 0; //@line 35050
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$081$off0 = 0, $$084 = 0, $$085$off0 = 0, $$1 = 0, $$182$off0 = 0, $$186$off0 = 0, $$2 = 0, $$283$off0 = 0, $100 = 0, $104 = 0, $105 = 0, $106 = 0, $122 = 0, $13 = 0, $136 = 0, $19 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $61 = 0, $69 = 0, $72 = 0, $73 = 0, $81 = 0, $84 = 0, $87 = 0, $90 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 17112
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 17118
  } else {
   if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0) {
    if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
     $13 = $1 + 20 | 0; //@line 17127
     if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
      HEAP32[$1 + 32 >> 2] = $3; //@line 17132
      $19 = $1 + 44 | 0; //@line 17133
      if ((HEAP32[$19 >> 2] | 0) == 4) {
       break;
      }
      $25 = $0 + 16 + (HEAP32[$0 + 12 >> 2] << 3) | 0; //@line 17142
      $26 = $1 + 52 | 0; //@line 17143
      $27 = $1 + 53 | 0; //@line 17144
      $28 = $1 + 54 | 0; //@line 17145
      $29 = $0 + 8 | 0; //@line 17146
      $30 = $1 + 24 | 0; //@line 17147
      $$081$off0 = 0; //@line 17148
      $$084 = $0 + 16 | 0; //@line 17148
      $$085$off0 = 0; //@line 17148
      L10 : while (1) {
       if ($$084 >>> 0 >= $25 >>> 0) {
        $$283$off0 = $$081$off0; //@line 17152
        label = 20; //@line 17153
        break;
       }
       HEAP8[$26 >> 0] = 0; //@line 17156
       HEAP8[$27 >> 0] = 0; //@line 17157
       $AsyncCtx15 = _emscripten_alloc_async_context(56, sp) | 0; //@line 17158
       __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$084, $1, $2, $2, 1, $4); //@line 17159
       if (___async) {
        label = 12; //@line 17162
        break;
       }
       _emscripten_free_async_context($AsyncCtx15 | 0); //@line 17165
       if (HEAP8[$28 >> 0] | 0) {
        $$283$off0 = $$081$off0; //@line 17169
        label = 20; //@line 17170
        break;
       }
       do {
        if (!(HEAP8[$27 >> 0] | 0)) {
         $$182$off0 = $$081$off0; //@line 17177
         $$186$off0 = $$085$off0; //@line 17177
        } else {
         if (!(HEAP8[$26 >> 0] | 0)) {
          if (!(HEAP32[$29 >> 2] & 1)) {
           $$283$off0 = 1; //@line 17186
           label = 20; //@line 17187
           break L10;
          } else {
           $$182$off0 = 1; //@line 17190
           $$186$off0 = $$085$off0; //@line 17190
           break;
          }
         }
         if ((HEAP32[$30 >> 2] | 0) == 1) {
          label = 25; //@line 17197
          break L10;
         }
         if (!(HEAP32[$29 >> 2] & 2)) {
          label = 25; //@line 17204
          break L10;
         } else {
          $$182$off0 = 1; //@line 17207
          $$186$off0 = 1; //@line 17207
         }
        }
       } while (0);
       $$081$off0 = $$182$off0; //@line 17212
       $$084 = $$084 + 8 | 0; //@line 17212
       $$085$off0 = $$186$off0; //@line 17212
      }
      if ((label | 0) == 12) {
       HEAP32[$AsyncCtx15 >> 2] = 719; //@line 17215
       HEAP32[$AsyncCtx15 + 4 >> 2] = $29; //@line 17217
       HEAP8[$AsyncCtx15 + 8 >> 0] = $$081$off0 & 1; //@line 17220
       HEAP8[$AsyncCtx15 + 9 >> 0] = $$085$off0 & 1; //@line 17223
       HEAP32[$AsyncCtx15 + 12 >> 2] = $$084; //@line 17225
       HEAP32[$AsyncCtx15 + 16 >> 2] = $30; //@line 17227
       HEAP32[$AsyncCtx15 + 20 >> 2] = $2; //@line 17229
       HEAP32[$AsyncCtx15 + 24 >> 2] = $13; //@line 17231
       HEAP32[$AsyncCtx15 + 28 >> 2] = $1; //@line 17233
       HEAP32[$AsyncCtx15 + 32 >> 2] = $28; //@line 17235
       HEAP32[$AsyncCtx15 + 36 >> 2] = $19; //@line 17237
       HEAP32[$AsyncCtx15 + 40 >> 2] = $25; //@line 17239
       HEAP32[$AsyncCtx15 + 44 >> 2] = $27; //@line 17241
       HEAP32[$AsyncCtx15 + 48 >> 2] = $26; //@line 17243
       HEAP8[$AsyncCtx15 + 52 >> 0] = $4 & 1; //@line 17246
       sp = STACKTOP; //@line 17247
       return;
      }
      do {
       if ((label | 0) == 20) {
        if (!$$085$off0) {
         HEAP32[$13 >> 2] = $2; //@line 17253
         $61 = $1 + 40 | 0; //@line 17254
         HEAP32[$61 >> 2] = (HEAP32[$61 >> 2] | 0) + 1; //@line 17257
         if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
          if ((HEAP32[$30 >> 2] | 0) == 2) {
           HEAP8[$28 >> 0] = 1; //@line 17265
           if ($$283$off0) {
            label = 25; //@line 17267
            break;
           } else {
            $69 = 4; //@line 17270
            break;
           }
          }
         }
        }
        if ($$283$off0) {
         label = 25; //@line 17277
        } else {
         $69 = 4; //@line 17279
        }
       }
      } while (0);
      if ((label | 0) == 25) {
       $69 = 3; //@line 17284
      }
      HEAP32[$19 >> 2] = $69; //@line 17286
      break;
     }
    }
    if (($3 | 0) != 1) {
     break;
    }
    HEAP32[$1 + 32 >> 2] = 1; //@line 17295
    break;
   }
   $72 = HEAP32[$0 + 12 >> 2] | 0; //@line 17300
   $73 = $0 + 16 + ($72 << 3) | 0; //@line 17301
   $AsyncCtx11 = _emscripten_alloc_async_context(32, sp) | 0; //@line 17302
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0 + 16 | 0, $1, $2, $3, $4); //@line 17303
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 720; //@line 17306
    HEAP32[$AsyncCtx11 + 4 >> 2] = $73; //@line 17308
    HEAP32[$AsyncCtx11 + 8 >> 2] = $1; //@line 17310
    HEAP32[$AsyncCtx11 + 12 >> 2] = $2; //@line 17312
    HEAP32[$AsyncCtx11 + 16 >> 2] = $3; //@line 17314
    HEAP8[$AsyncCtx11 + 20 >> 0] = $4 & 1; //@line 17317
    HEAP32[$AsyncCtx11 + 24 >> 2] = $0; //@line 17319
    HEAP32[$AsyncCtx11 + 28 >> 2] = $72; //@line 17321
    sp = STACKTOP; //@line 17322
    return;
   }
   _emscripten_free_async_context($AsyncCtx11 | 0); //@line 17325
   $81 = $0 + 24 | 0; //@line 17326
   if (($72 | 0) > 1) {
    $84 = HEAP32[$0 + 8 >> 2] | 0; //@line 17330
    if (!($84 & 2)) {
     $87 = $1 + 36 | 0; //@line 17334
     if ((HEAP32[$87 >> 2] | 0) != 1) {
      if (!($84 & 1)) {
       $106 = $1 + 54 | 0; //@line 17341
       $$2 = $81; //@line 17342
       while (1) {
        if (HEAP8[$106 >> 0] | 0) {
         break L1;
        }
        if ((HEAP32[$87 >> 2] | 0) == 1) {
         break L1;
        }
        $AsyncCtx = _emscripten_alloc_async_context(36, sp) | 0; //@line 17354
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$2, $1, $2, $3, $4); //@line 17355
        if (___async) {
         break;
        }
        _emscripten_free_async_context($AsyncCtx | 0); //@line 17360
        $136 = $$2 + 8 | 0; //@line 17361
        if ($136 >>> 0 < $73 >>> 0) {
         $$2 = $136; //@line 17364
        } else {
         break L1;
        }
       }
       HEAP32[$AsyncCtx >> 2] = 723; //@line 17369
       HEAP32[$AsyncCtx + 4 >> 2] = $$2; //@line 17371
       HEAP32[$AsyncCtx + 8 >> 2] = $73; //@line 17373
       HEAP32[$AsyncCtx + 12 >> 2] = $106; //@line 17375
       HEAP32[$AsyncCtx + 16 >> 2] = $87; //@line 17377
       HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 17379
       HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 17381
       HEAP32[$AsyncCtx + 28 >> 2] = $3; //@line 17383
       HEAP8[$AsyncCtx + 32 >> 0] = $4 & 1; //@line 17386
       sp = STACKTOP; //@line 17387
       return;
      }
      $104 = $1 + 24 | 0; //@line 17390
      $105 = $1 + 54 | 0; //@line 17391
      $$1 = $81; //@line 17392
      while (1) {
       if (HEAP8[$105 >> 0] | 0) {
        break L1;
       }
       if ((HEAP32[$87 >> 2] | 0) == 1) {
        if ((HEAP32[$104 >> 2] | 0) == 1) {
         break L1;
        }
       }
       $AsyncCtx3 = _emscripten_alloc_async_context(40, sp) | 0; //@line 17408
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$1, $1, $2, $3, $4); //@line 17409
       if (___async) {
        break;
       }
       _emscripten_free_async_context($AsyncCtx3 | 0); //@line 17414
       $122 = $$1 + 8 | 0; //@line 17415
       if ($122 >>> 0 < $73 >>> 0) {
        $$1 = $122; //@line 17418
       } else {
        break L1;
       }
      }
      HEAP32[$AsyncCtx3 >> 2] = 722; //@line 17423
      HEAP32[$AsyncCtx3 + 4 >> 2] = $$1; //@line 17425
      HEAP32[$AsyncCtx3 + 8 >> 2] = $73; //@line 17427
      HEAP32[$AsyncCtx3 + 12 >> 2] = $105; //@line 17429
      HEAP32[$AsyncCtx3 + 16 >> 2] = $87; //@line 17431
      HEAP32[$AsyncCtx3 + 20 >> 2] = $104; //@line 17433
      HEAP32[$AsyncCtx3 + 24 >> 2] = $1; //@line 17435
      HEAP32[$AsyncCtx3 + 28 >> 2] = $2; //@line 17437
      HEAP32[$AsyncCtx3 + 32 >> 2] = $3; //@line 17439
      HEAP8[$AsyncCtx3 + 36 >> 0] = $4 & 1; //@line 17442
      sp = STACKTOP; //@line 17443
      return;
     }
    }
    $90 = $1 + 54 | 0; //@line 17447
    $$0 = $81; //@line 17448
    while (1) {
     if (HEAP8[$90 >> 0] | 0) {
      break L1;
     }
     $AsyncCtx7 = _emscripten_alloc_async_context(32, sp) | 0; //@line 17455
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$0, $1, $2, $3, $4); //@line 17456
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx7 | 0); //@line 17461
     $100 = $$0 + 8 | 0; //@line 17462
     if ($100 >>> 0 < $73 >>> 0) {
      $$0 = $100; //@line 17465
     } else {
      break L1;
     }
    }
    HEAP32[$AsyncCtx7 >> 2] = 721; //@line 17470
    HEAP32[$AsyncCtx7 + 4 >> 2] = $$0; //@line 17472
    HEAP32[$AsyncCtx7 + 8 >> 2] = $73; //@line 17474
    HEAP32[$AsyncCtx7 + 12 >> 2] = $90; //@line 17476
    HEAP32[$AsyncCtx7 + 16 >> 2] = $1; //@line 17478
    HEAP32[$AsyncCtx7 + 20 >> 2] = $2; //@line 17480
    HEAP32[$AsyncCtx7 + 24 >> 2] = $3; //@line 17482
    HEAP8[$AsyncCtx7 + 28 >> 0] = $4 & 1; //@line 17485
    sp = STACKTOP; //@line 17486
    return;
   }
  }
 } while (0);
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $100 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $3 = 0, $30 = 0, $33 = 0, $38 = 0, $39 = 0, $4 = 0, $42 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $50 = 0, $51 = 0, $54 = 0, $6 = 0, $61 = 0, $74 = 0, $77 = 0, $82 = 0, $96 = 0, $97 = 0, $AsyncCtx = 0, $AsyncCtx21 = 0, $AsyncCtx25 = 0, $AsyncCtx29 = 0, $AsyncCtx32 = 0, $AsyncCtx36 = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, sp = 0;
 sp = STACKTOP; //@line 431
 STACKTOP = STACKTOP + 96 | 0; //@line 432
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96); //@line 432
 $vararg_buffer17 = sp + 48 | 0; //@line 433
 $vararg_buffer14 = sp + 40 | 0; //@line 434
 $vararg_buffer11 = sp + 32 | 0; //@line 435
 $vararg_buffer8 = sp + 24 | 0; //@line 436
 $vararg_buffer5 = sp + 16 | 0; //@line 437
 $vararg_buffer2 = sp + 8 | 0; //@line 438
 $vararg_buffer = sp; //@line 439
 $2 = sp + 72 | 0; //@line 440
 $3 = sp + 56 | 0; //@line 441
 $4 = $0 + 783 | 0; //@line 442
 $6 = HEAPU8[$4 >> 0] | 0; //@line 444
 HEAP32[$vararg_buffer >> 2] = $1; //@line 445
 HEAP32[$vararg_buffer + 4 >> 2] = $6; //@line 447
 _mbed_tracef(16, 10968, 11284, $vararg_buffer); //@line 448
 _emscripten_asm_const_i(2) | 0; //@line 449
 HEAP8[$0 + 688 >> 0] = 1; //@line 451
 if (HEAP8[$4 >> 0] | 0) {
  $11 = _emscripten_asm_const_i(3) | 0; //@line 455
  $14 = $11 - (HEAP32[$0 + 784 >> 2] | 0) | 0; //@line 458
  HEAP32[$vararg_buffer2 >> 2] = $14; //@line 459
  _mbed_tracef(16, 10968, 11384, $vararg_buffer2); //@line 460
  HEAP8[$4 >> 0] = 0; //@line 461
  if ($14 >>> 0 > 500) {
   HEAP32[$vararg_buffer5 >> 2] = $14; //@line 464
   _mbed_tracef(4, 10968, 11405, $vararg_buffer5); //@line 465
   STACKTOP = sp; //@line 466
   return;
  }
  $16 = $0 + 1112 | 0; //@line 468
  $17 = $2 + 12 | 0; //@line 469
  HEAP32[$2 >> 2] = 53; //@line 470
  HEAP32[$2 + 4 >> 2] = 0; //@line 472
  HEAP32[$2 + 8 >> 2] = $0; //@line 474
  HEAP32[$17 >> 2] = 648; //@line 475
  $18 = $0 + 1152 | 0; //@line 476
  if (($18 | 0) != ($2 | 0)) {
   $20 = $0 + 1164 | 0; //@line 479
   $21 = HEAP32[$20 >> 2] | 0; //@line 480
   do {
    if ($21 | 0) {
     $24 = HEAP32[$21 + 8 >> 2] | 0; //@line 485
     $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 486
     FUNCTION_TABLE_vi[$24 & 1023]($18); //@line 487
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 54; //@line 490
      HEAP32[$AsyncCtx + 4 >> 2] = $17; //@line 492
      HEAP32[$AsyncCtx + 8 >> 2] = $20; //@line 494
      HEAP32[$AsyncCtx + 12 >> 2] = $18; //@line 496
      HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 498
      HEAP32[$AsyncCtx + 20 >> 2] = $16; //@line 500
      sp = STACKTOP; //@line 501
      STACKTOP = sp; //@line 502
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 504
      break;
     }
    }
   } while (0);
   $30 = HEAP32[$17 >> 2] | 0; //@line 509
   do {
    if (!$30) {
     $38 = 0; //@line 513
    } else {
     $33 = HEAP32[$30 + 4 >> 2] | 0; //@line 516
     $AsyncCtx21 = _emscripten_alloc_async_context(20, sp) | 0; //@line 517
     FUNCTION_TABLE_vii[$33 & 31]($18, $2); //@line 518
     if (___async) {
      HEAP32[$AsyncCtx21 >> 2] = 55; //@line 521
      HEAP32[$AsyncCtx21 + 4 >> 2] = $17; //@line 523
      HEAP32[$AsyncCtx21 + 8 >> 2] = $20; //@line 525
      HEAP32[$AsyncCtx21 + 12 >> 2] = $16; //@line 527
      HEAP32[$AsyncCtx21 + 16 >> 2] = $2; //@line 529
      sp = STACKTOP; //@line 530
      STACKTOP = sp; //@line 531
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx21 | 0); //@line 533
      $38 = HEAP32[$17 >> 2] | 0; //@line 535
      break;
     }
    }
   } while (0);
   HEAP32[$20 >> 2] = $38; //@line 540
  }
  __ZN4mbed6Ticker5setupEy($16, 2e5, 0); //@line 542
  $39 = HEAP32[$17 >> 2] | 0; //@line 543
  if (!$39) {
   STACKTOP = sp; //@line 546
   return;
  }
  $42 = HEAP32[$39 + 8 >> 2] | 0; //@line 549
  $AsyncCtx25 = _emscripten_alloc_async_context(4, sp) | 0; //@line 550
  FUNCTION_TABLE_vi[$42 & 1023]($2); //@line 551
  if (___async) {
   HEAP32[$AsyncCtx25 >> 2] = 56; //@line 554
   sp = STACKTOP; //@line 555
   STACKTOP = sp; //@line 556
   return;
  }
  _emscripten_free_async_context($AsyncCtx25 | 0); //@line 558
  STACKTOP = sp; //@line 559
  return;
 }
 do {
  if ($1 | 0) {
   $44 = $0 + 1112 | 0; //@line 564
   $45 = $3 + 12 | 0; //@line 565
   HEAP32[$3 >> 2] = 57; //@line 566
   HEAP32[$3 + 4 >> 2] = 0; //@line 568
   HEAP32[$3 + 8 >> 2] = $0; //@line 570
   HEAP32[$45 >> 2] = 648; //@line 571
   $46 = ___muldi3($1 | 0, 0, 1e3, 0) | 0; //@line 572
   $47 = tempRet0; //@line 573
   $48 = $0 + 1152 | 0; //@line 574
   if (($48 | 0) != ($3 | 0)) {
    $50 = $0 + 1164 | 0; //@line 577
    $51 = HEAP32[$50 >> 2] | 0; //@line 578
    do {
     if ($51 | 0) {
      $54 = HEAP32[$51 + 8 >> 2] | 0; //@line 583
      $AsyncCtx29 = _emscripten_alloc_async_context(72, sp) | 0; //@line 584
      FUNCTION_TABLE_vi[$54 & 1023]($48); //@line 585
      if (___async) {
       HEAP32[$AsyncCtx29 >> 2] = 58; //@line 588
       HEAP32[$AsyncCtx29 + 4 >> 2] = $45; //@line 590
       HEAP32[$AsyncCtx29 + 8 >> 2] = $50; //@line 592
       HEAP32[$AsyncCtx29 + 12 >> 2] = $48; //@line 594
       HEAP32[$AsyncCtx29 + 16 >> 2] = $3; //@line 596
       HEAP32[$AsyncCtx29 + 20 >> 2] = $44; //@line 598
       $61 = $AsyncCtx29 + 24 | 0; //@line 600
       HEAP32[$61 >> 2] = $46; //@line 602
       HEAP32[$61 + 4 >> 2] = $47; //@line 605
       HEAP32[$AsyncCtx29 + 32 >> 2] = $0; //@line 607
       HEAP32[$AsyncCtx29 + 36 >> 2] = $vararg_buffer14; //@line 609
       HEAP32[$AsyncCtx29 + 40 >> 2] = $vararg_buffer14; //@line 611
       HEAP32[$AsyncCtx29 + 44 >> 2] = $vararg_buffer17; //@line 613
       HEAP32[$AsyncCtx29 + 48 >> 2] = $vararg_buffer17; //@line 615
       HEAP32[$AsyncCtx29 + 52 >> 2] = $vararg_buffer8; //@line 617
       HEAP32[$AsyncCtx29 + 56 >> 2] = $vararg_buffer8; //@line 619
       HEAP32[$AsyncCtx29 + 60 >> 2] = $vararg_buffer11; //@line 621
       HEAP32[$AsyncCtx29 + 64 >> 2] = $vararg_buffer11; //@line 623
       sp = STACKTOP; //@line 624
       STACKTOP = sp; //@line 625
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx29 | 0); //@line 627
       break;
      }
     }
    } while (0);
    $74 = HEAP32[$45 >> 2] | 0; //@line 632
    do {
     if (!$74) {
      $96 = 0; //@line 636
     } else {
      $77 = HEAP32[$74 + 4 >> 2] | 0; //@line 639
      $AsyncCtx32 = _emscripten_alloc_async_context(64, sp) | 0; //@line 640
      FUNCTION_TABLE_vii[$77 & 31]($48, $3); //@line 641
      if (___async) {
       HEAP32[$AsyncCtx32 >> 2] = 59; //@line 644
       HEAP32[$AsyncCtx32 + 4 >> 2] = $45; //@line 646
       HEAP32[$AsyncCtx32 + 8 >> 2] = $50; //@line 648
       HEAP32[$AsyncCtx32 + 12 >> 2] = $44; //@line 650
       $82 = $AsyncCtx32 + 16 | 0; //@line 652
       HEAP32[$82 >> 2] = $46; //@line 654
       HEAP32[$82 + 4 >> 2] = $47; //@line 657
       HEAP32[$AsyncCtx32 + 24 >> 2] = $0; //@line 659
       HEAP32[$AsyncCtx32 + 28 >> 2] = $3; //@line 661
       HEAP32[$AsyncCtx32 + 32 >> 2] = $vararg_buffer14; //@line 663
       HEAP32[$AsyncCtx32 + 36 >> 2] = $vararg_buffer14; //@line 665
       HEAP32[$AsyncCtx32 + 40 >> 2] = $vararg_buffer17; //@line 667
       HEAP32[$AsyncCtx32 + 44 >> 2] = $vararg_buffer17; //@line 669
       HEAP32[$AsyncCtx32 + 48 >> 2] = $vararg_buffer8; //@line 671
       HEAP32[$AsyncCtx32 + 52 >> 2] = $vararg_buffer8; //@line 673
       HEAP32[$AsyncCtx32 + 56 >> 2] = $vararg_buffer11; //@line 675
       HEAP32[$AsyncCtx32 + 60 >> 2] = $vararg_buffer11; //@line 677
       sp = STACKTOP; //@line 678
       STACKTOP = sp; //@line 679
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx32 | 0); //@line 681
       $96 = HEAP32[$45 >> 2] | 0; //@line 683
       break;
      }
     }
    } while (0);
    HEAP32[$50 >> 2] = $96; //@line 688
   }
   __ZN4mbed6Ticker5setupEy($44, $46, $47); //@line 690
   $97 = HEAP32[$45 >> 2] | 0; //@line 691
   if ($97 | 0) {
    $100 = HEAP32[$97 + 8 >> 2] | 0; //@line 695
    $AsyncCtx36 = _emscripten_alloc_async_context(40, sp) | 0; //@line 696
    FUNCTION_TABLE_vi[$100 & 1023]($3); //@line 697
    if (___async) {
     HEAP32[$AsyncCtx36 >> 2] = 60; //@line 700
     HEAP32[$AsyncCtx36 + 4 >> 2] = $0; //@line 702
     HEAP32[$AsyncCtx36 + 8 >> 2] = $vararg_buffer14; //@line 704
     HEAP32[$AsyncCtx36 + 12 >> 2] = $vararg_buffer14; //@line 706
     HEAP32[$AsyncCtx36 + 16 >> 2] = $vararg_buffer17; //@line 708
     HEAP32[$AsyncCtx36 + 20 >> 2] = $vararg_buffer17; //@line 710
     HEAP32[$AsyncCtx36 + 24 >> 2] = $vararg_buffer8; //@line 712
     HEAP32[$AsyncCtx36 + 28 >> 2] = $vararg_buffer8; //@line 714
     HEAP32[$AsyncCtx36 + 32 >> 2] = $vararg_buffer11; //@line 716
     HEAP32[$AsyncCtx36 + 36 >> 2] = $vararg_buffer11; //@line 718
     sp = STACKTOP; //@line 719
     STACKTOP = sp; //@line 720
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx36 | 0); //@line 722
     break;
    }
   }
  }
 } while (0);
 if (!(HEAP8[$0 + 770 >> 0] | 0)) {
  HEAP32[$vararg_buffer14 >> 2] = 6; //@line 732
  _mbed_tracef(16, 10968, 11025, $vararg_buffer14); //@line 733
  __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 734
  HEAP32[$vararg_buffer17 >> 2] = 6; //@line 735
  _mbed_tracef(16, 10968, 11054, $vararg_buffer17); //@line 736
  STACKTOP = sp; //@line 737
  return;
 } else {
  HEAP32[$vararg_buffer8 >> 2] = 5; //@line 739
  _mbed_tracef(16, 10968, 11025, $vararg_buffer8); //@line 740
  __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 741
  HEAP32[$vararg_buffer11 >> 2] = 5; //@line 742
  _mbed_tracef(16, 10968, 11054, $vararg_buffer11); //@line 743
  STACKTOP = sp; //@line 744
  return;
 }
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 $14 = $14 | 0;
 $15 = $15 | 0;
 $16 = $16 | 0;
 $17 = $17 | 0;
 $18 = $18 | 0;
 var $106 = 0, $19 = 0, $20 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $47 = 0, $49 = 0, $62 = 0, $64 = 0, $77 = 0, $79 = 0, $92 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 2167
 HEAP32[$0 >> 2] = 560; //@line 2168
 $19 = $0 + 4 | 0; //@line 2169
 HEAP32[$19 >> 2] = 0; //@line 2170
 HEAP32[$19 + 4 >> 2] = 0; //@line 2170
 HEAP32[$19 + 8 >> 2] = 0; //@line 2170
 HEAP32[$19 + 12 >> 2] = 0; //@line 2170
 HEAP32[$19 + 16 >> 2] = 0; //@line 2170
 HEAP32[$19 + 20 >> 2] = 0; //@line 2170
 _gpio_init_out_ex($19, $4, 1); //@line 2171
 $20 = $0 + 28 | 0; //@line 2172
 HEAP32[$20 >> 2] = 0; //@line 2173
 HEAP32[$20 + 4 >> 2] = 0; //@line 2173
 HEAP32[$20 + 8 >> 2] = 0; //@line 2173
 HEAP32[$20 + 12 >> 2] = 0; //@line 2173
 HEAP32[$20 + 16 >> 2] = 0; //@line 2173
 HEAP32[$20 + 20 >> 2] = 0; //@line 2173
 _gpio_init_in($20, $5); //@line 2174
 __ZN4mbed11InterruptInC2E7PinName($0 + 52 | 0, $6); //@line 2176
 __ZN4mbed11InterruptInC2E7PinName($0 + 124 | 0, $7); //@line 2178
 __ZN4mbed11InterruptInC2E7PinName($0 + 196 | 0, $8); //@line 2180
 __ZN4mbed11InterruptInC2E7PinName($0 + 268 | 0, $9); //@line 2182
 __ZN4mbed11InterruptInC2E7PinName($0 + 340 | 0, $10); //@line 2184
 __ZN4mbed11InterruptInC2E7PinName($0 + 412 | 0, $11); //@line 2186
 $27 = $0 + 484 | 0; //@line 2187
 HEAP32[$27 >> 2] = 0; //@line 2188
 HEAP32[$27 + 4 >> 2] = 0; //@line 2188
 HEAP32[$27 + 8 >> 2] = 0; //@line 2188
 HEAP32[$27 + 12 >> 2] = 0; //@line 2188
 HEAP32[$27 + 16 >> 2] = 0; //@line 2188
 HEAP32[$27 + 20 >> 2] = 0; //@line 2188
 _gpio_init_out_ex($27, $12, 0); //@line 2189
 $28 = $0 + 508 | 0; //@line 2190
 HEAP32[$28 >> 2] = 0; //@line 2191
 HEAP32[$28 + 4 >> 2] = 0; //@line 2191
 HEAP32[$28 + 8 >> 2] = 0; //@line 2191
 HEAP32[$28 + 12 >> 2] = 0; //@line 2191
 HEAP32[$28 + 16 >> 2] = 0; //@line 2191
 HEAP32[$28 + 20 >> 2] = 0; //@line 2191
 _gpio_init_out_ex($28, $13, 0); //@line 2192
 $29 = $0 + 532 | 0; //@line 2193
 HEAP32[$29 >> 2] = 0; //@line 2194
 HEAP32[$29 + 4 >> 2] = 0; //@line 2194
 HEAP32[$29 + 8 >> 2] = 0; //@line 2194
 HEAP32[$29 + 12 >> 2] = 0; //@line 2194
 HEAP32[$29 + 16 >> 2] = 0; //@line 2194
 HEAP32[$29 + 20 >> 2] = 0; //@line 2194
 _gpio_init_out_ex($29, $14, 0); //@line 2195
 $30 = $0 + 556 | 0; //@line 2196
 HEAP32[$30 >> 2] = 0; //@line 2197
 HEAP32[$30 + 4 >> 2] = 0; //@line 2197
 HEAP32[$30 + 8 >> 2] = 0; //@line 2197
 HEAP32[$30 + 12 >> 2] = 0; //@line 2197
 HEAP32[$30 + 16 >> 2] = 0; //@line 2197
 HEAP32[$30 + 20 >> 2] = 0; //@line 2197
 _gpio_init_out_ex($30, $15, 0); //@line 2198
 $31 = $0 + 580 | 0; //@line 2199
 HEAP32[$31 >> 2] = 0; //@line 2200
 HEAP32[$31 + 4 >> 2] = 0; //@line 2200
 HEAP32[$31 + 8 >> 2] = 0; //@line 2200
 HEAP32[$31 + 12 >> 2] = 0; //@line 2200
 HEAP32[$31 + 16 >> 2] = 0; //@line 2200
 HEAP32[$31 + 20 >> 2] = 0; //@line 2200
 _gpio_init_inout($31, $16, 0, 0, 0); //@line 2201
 $32 = $0 + 604 | 0; //@line 2202
 HEAP32[$32 >> 2] = 0; //@line 2203
 HEAP32[$32 + 4 >> 2] = 0; //@line 2203
 HEAP32[$32 + 8 >> 2] = 0; //@line 2203
 HEAP32[$32 + 12 >> 2] = 0; //@line 2203
 HEAP32[$32 + 16 >> 2] = 0; //@line 2203
 HEAP32[$32 + 20 >> 2] = 0; //@line 2203
 _gpio_init_out($32, $17); //@line 2204
 $33 = $0 + 628 | 0; //@line 2205
 HEAP32[$33 >> 2] = 0; //@line 2206
 HEAP32[$33 + 4 >> 2] = 0; //@line 2206
 HEAP32[$33 + 8 >> 2] = 0; //@line 2206
 HEAP32[$33 + 12 >> 2] = 0; //@line 2206
 HEAP32[$33 + 16 >> 2] = 0; //@line 2206
 HEAP32[$33 + 20 >> 2] = 0; //@line 2206
 _gpio_init_out($33, $18); //@line 2207
 $34 = $0 + 1048 | 0; //@line 2208
 $AsyncCtx11 = _emscripten_alloc_async_context(52, sp) | 0; //@line 2209
 __ZN4mbed10TimerEventC2Ev($34); //@line 2210
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 99; //@line 2213
  HEAP32[$AsyncCtx11 + 4 >> 2] = $34; //@line 2215
  HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 2217
  HEAP32[$AsyncCtx11 + 12 >> 2] = $16; //@line 2219
  HEAP32[$AsyncCtx11 + 16 >> 2] = $17; //@line 2221
  HEAP32[$AsyncCtx11 + 20 >> 2] = $12; //@line 2223
  HEAP32[$AsyncCtx11 + 24 >> 2] = $13; //@line 2225
  HEAP32[$AsyncCtx11 + 28 >> 2] = $15; //@line 2227
  HEAP32[$AsyncCtx11 + 32 >> 2] = $14; //@line 2229
  HEAP32[$AsyncCtx11 + 36 >> 2] = $18; //@line 2231
  HEAP32[$AsyncCtx11 + 40 >> 2] = $10; //@line 2233
  HEAP32[$AsyncCtx11 + 44 >> 2] = $11; //@line 2235
  HEAP32[$AsyncCtx11 + 48 >> 2] = $33; //@line 2237
  sp = STACKTOP; //@line 2238
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 2241
 $47 = $0 + 1088 | 0; //@line 2242
 HEAP32[$47 >> 2] = 0; //@line 2243
 HEAP32[$47 + 4 >> 2] = 0; //@line 2243
 HEAP32[$47 + 8 >> 2] = 0; //@line 2243
 HEAP32[$47 + 12 >> 2] = 0; //@line 2243
 HEAP8[$0 + 1104 >> 0] = 1; //@line 2245
 HEAP32[$34 >> 2] = 684; //@line 2246
 $49 = $0 + 1112 | 0; //@line 2247
 $AsyncCtx7 = _emscripten_alloc_async_context(52, sp) | 0; //@line 2248
 __ZN4mbed10TimerEventC2Ev($49); //@line 2249
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 100; //@line 2252
  HEAP32[$AsyncCtx7 + 4 >> 2] = $49; //@line 2254
  HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 2256
  HEAP32[$AsyncCtx7 + 12 >> 2] = $16; //@line 2258
  HEAP32[$AsyncCtx7 + 16 >> 2] = $17; //@line 2260
  HEAP32[$AsyncCtx7 + 20 >> 2] = $12; //@line 2262
  HEAP32[$AsyncCtx7 + 24 >> 2] = $13; //@line 2264
  HEAP32[$AsyncCtx7 + 28 >> 2] = $15; //@line 2266
  HEAP32[$AsyncCtx7 + 32 >> 2] = $14; //@line 2268
  HEAP32[$AsyncCtx7 + 36 >> 2] = $18; //@line 2270
  HEAP32[$AsyncCtx7 + 40 >> 2] = $10; //@line 2272
  HEAP32[$AsyncCtx7 + 44 >> 2] = $11; //@line 2274
  HEAP32[$AsyncCtx7 + 48 >> 2] = $33; //@line 2276
  sp = STACKTOP; //@line 2277
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 2280
 $62 = $0 + 1152 | 0; //@line 2281
 HEAP32[$62 >> 2] = 0; //@line 2282
 HEAP32[$62 + 4 >> 2] = 0; //@line 2282
 HEAP32[$62 + 8 >> 2] = 0; //@line 2282
 HEAP32[$62 + 12 >> 2] = 0; //@line 2282
 HEAP8[$0 + 1168 >> 0] = 1; //@line 2284
 HEAP32[$49 >> 2] = 684; //@line 2285
 $64 = $0 + 1176 | 0; //@line 2286
 $AsyncCtx3 = _emscripten_alloc_async_context(52, sp) | 0; //@line 2287
 __ZN4mbed10TimerEventC2Ev($64); //@line 2288
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 101; //@line 2291
  HEAP32[$AsyncCtx3 + 4 >> 2] = $64; //@line 2293
  HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 2295
  HEAP32[$AsyncCtx3 + 12 >> 2] = $16; //@line 2297
  HEAP32[$AsyncCtx3 + 16 >> 2] = $17; //@line 2299
  HEAP32[$AsyncCtx3 + 20 >> 2] = $12; //@line 2301
  HEAP32[$AsyncCtx3 + 24 >> 2] = $13; //@line 2303
  HEAP32[$AsyncCtx3 + 28 >> 2] = $15; //@line 2305
  HEAP32[$AsyncCtx3 + 32 >> 2] = $14; //@line 2307
  HEAP32[$AsyncCtx3 + 36 >> 2] = $18; //@line 2309
  HEAP32[$AsyncCtx3 + 40 >> 2] = $10; //@line 2311
  HEAP32[$AsyncCtx3 + 44 >> 2] = $11; //@line 2313
  HEAP32[$AsyncCtx3 + 48 >> 2] = $33; //@line 2315
  sp = STACKTOP; //@line 2316
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2319
 $77 = $0 + 1216 | 0; //@line 2320
 HEAP32[$77 >> 2] = 0; //@line 2321
 HEAP32[$77 + 4 >> 2] = 0; //@line 2321
 HEAP32[$77 + 8 >> 2] = 0; //@line 2321
 HEAP32[$77 + 12 >> 2] = 0; //@line 2321
 HEAP8[$0 + 1232 >> 0] = 1; //@line 2323
 HEAP32[$64 >> 2] = 684; //@line 2324
 $79 = $0 + 1240 | 0; //@line 2325
 $AsyncCtx = _emscripten_alloc_async_context(52, sp) | 0; //@line 2326
 __ZN4mbed10TimerEventC2Ev($79); //@line 2327
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 102; //@line 2330
  HEAP32[$AsyncCtx + 4 >> 2] = $79; //@line 2332
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 2334
  HEAP32[$AsyncCtx + 12 >> 2] = $16; //@line 2336
  HEAP32[$AsyncCtx + 16 >> 2] = $17; //@line 2338
  HEAP32[$AsyncCtx + 20 >> 2] = $12; //@line 2340
  HEAP32[$AsyncCtx + 24 >> 2] = $13; //@line 2342
  HEAP32[$AsyncCtx + 28 >> 2] = $15; //@line 2344
  HEAP32[$AsyncCtx + 32 >> 2] = $14; //@line 2346
  HEAP32[$AsyncCtx + 36 >> 2] = $18; //@line 2348
  HEAP32[$AsyncCtx + 40 >> 2] = $10; //@line 2350
  HEAP32[$AsyncCtx + 44 >> 2] = $11; //@line 2352
  HEAP32[$AsyncCtx + 48 >> 2] = $33; //@line 2354
  sp = STACKTOP; //@line 2355
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2358
 $92 = $0 + 1280 | 0; //@line 2359
 HEAP32[$92 >> 2] = 0; //@line 2360
 HEAP32[$92 + 4 >> 2] = 0; //@line 2360
 HEAP32[$92 + 8 >> 2] = 0; //@line 2360
 HEAP32[$92 + 12 >> 2] = 0; //@line 2360
 HEAP8[$0 + 1296 >> 0] = 1; //@line 2362
 HEAP32[$79 >> 2] = 684; //@line 2363
 HEAP32[$0 + 668 >> 2] = $16; //@line 2365
 HEAP32[$0 + 672 >> 2] = $17; //@line 2367
 HEAP32[$0 + 652 >> 2] = $12; //@line 2369
 HEAP32[$0 + 656 >> 2] = $13; //@line 2371
 HEAP32[$0 + 664 >> 2] = $15; //@line 2373
 HEAP32[$0 + 660 >> 2] = $14; //@line 2375
 HEAP32[$0 + 676 >> 2] = $18; //@line 2377
 HEAP32[$0 + 680 >> 2] = $10; //@line 2379
 HEAP32[$0 + 684 >> 2] = $11; //@line 2381
 HEAP32[$0 + 788 >> 2] = 0; //@line 2383
 if (($18 | 0) == -1) {
  $106 = _emscripten_asm_const_ii(7, $0 | 0) | 0; //@line 2386
  return;
 }
 _emscripten_asm_const_iii(5, HEAP32[$33 >> 2] | 0, 1) | 0; //@line 2390
 $106 = _emscripten_asm_const_ii(7, $0 | 0) | 0; //@line 2391
 return;
}
function _mbedtls_aes_crypt_cbc($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$04056 = 0, $$04255 = 0, $$044 = 0, $$04554 = 0, $$14160 = 0, $$14160$us = 0, $$14359 = 0, $$14359$us = 0, $$14658 = 0, $$14658$us = 0, $10 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $127 = 0, $13 = 0, $131 = 0, $135 = 0, $139 = 0, $14 = 0, $143 = 0, $147 = 0, $15 = 0, $151 = 0, $155 = 0, $159 = 0, $16 = 0, $163 = 0, $167 = 0, $17 = 0, $171 = 0, $175 = 0, $179 = 0, $18 = 0, $183 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $6 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 1537
 STACKTOP = STACKTOP + 16 | 0; //@line 1538
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 1538
 $6 = sp; //@line 1539
 if ($2 & 15 | 0) {
  $$044 = -34; //@line 1543
  STACKTOP = sp; //@line 1544
  return $$044 | 0; //@line 1544
 }
 $10 = ($2 | 0) == 0; //@line 1547
 if (!$1) {
  if ($10) {
   $$044 = 0; //@line 1550
   STACKTOP = sp; //@line 1551
   return $$044 | 0; //@line 1551
  }
  $109 = $3 + 1 | 0; //@line 1553
  $110 = $3 + 2 | 0; //@line 1554
  $111 = $3 + 3 | 0; //@line 1555
  $112 = $3 + 4 | 0; //@line 1556
  $113 = $3 + 5 | 0; //@line 1557
  $114 = $3 + 6 | 0; //@line 1558
  $115 = $3 + 7 | 0; //@line 1559
  $116 = $3 + 8 | 0; //@line 1560
  $117 = $3 + 9 | 0; //@line 1561
  $118 = $3 + 10 | 0; //@line 1562
  $119 = $3 + 11 | 0; //@line 1563
  $120 = $3 + 12 | 0; //@line 1564
  $121 = $3 + 13 | 0; //@line 1565
  $122 = $3 + 14 | 0; //@line 1566
  $123 = $3 + 15 | 0; //@line 1567
  $$04056 = $5; //@line 1568
  $$04255 = $4; //@line 1568
  $$04554 = $2; //@line 1568
  while (1) {
   dest = $6; //@line 1570
   src = $$04255; //@line 1570
   stop = dest + 16 | 0; //@line 1570
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 1570
    dest = dest + 1 | 0; //@line 1570
    src = src + 1 | 0; //@line 1570
   } while ((dest | 0) < (stop | 0));
   _mbedtls_internal_aes_decrypt($0, $$04255, $$04056) | 0; //@line 1571
   HEAP8[$$04056 >> 0] = HEAP8[$3 >> 0] ^ HEAP8[$$04056 >> 0]; //@line 1575
   $127 = $$04056 + 1 | 0; //@line 1576
   HEAP8[$127 >> 0] = HEAP8[$109 >> 0] ^ HEAP8[$127 >> 0]; //@line 1580
   $131 = $$04056 + 2 | 0; //@line 1581
   HEAP8[$131 >> 0] = HEAP8[$110 >> 0] ^ HEAP8[$131 >> 0]; //@line 1585
   $135 = $$04056 + 3 | 0; //@line 1586
   HEAP8[$135 >> 0] = HEAP8[$111 >> 0] ^ HEAP8[$135 >> 0]; //@line 1590
   $139 = $$04056 + 4 | 0; //@line 1591
   HEAP8[$139 >> 0] = HEAP8[$112 >> 0] ^ HEAP8[$139 >> 0]; //@line 1595
   $143 = $$04056 + 5 | 0; //@line 1596
   HEAP8[$143 >> 0] = HEAP8[$113 >> 0] ^ HEAP8[$143 >> 0]; //@line 1600
   $147 = $$04056 + 6 | 0; //@line 1601
   HEAP8[$147 >> 0] = HEAP8[$114 >> 0] ^ HEAP8[$147 >> 0]; //@line 1605
   $151 = $$04056 + 7 | 0; //@line 1606
   HEAP8[$151 >> 0] = HEAP8[$115 >> 0] ^ HEAP8[$151 >> 0]; //@line 1610
   $155 = $$04056 + 8 | 0; //@line 1611
   HEAP8[$155 >> 0] = HEAP8[$116 >> 0] ^ HEAP8[$155 >> 0]; //@line 1615
   $159 = $$04056 + 9 | 0; //@line 1616
   HEAP8[$159 >> 0] = HEAP8[$117 >> 0] ^ HEAP8[$159 >> 0]; //@line 1620
   $163 = $$04056 + 10 | 0; //@line 1621
   HEAP8[$163 >> 0] = HEAP8[$118 >> 0] ^ HEAP8[$163 >> 0]; //@line 1625
   $167 = $$04056 + 11 | 0; //@line 1626
   HEAP8[$167 >> 0] = HEAP8[$119 >> 0] ^ HEAP8[$167 >> 0]; //@line 1630
   $171 = $$04056 + 12 | 0; //@line 1631
   HEAP8[$171 >> 0] = HEAP8[$120 >> 0] ^ HEAP8[$171 >> 0]; //@line 1635
   $175 = $$04056 + 13 | 0; //@line 1636
   HEAP8[$175 >> 0] = HEAP8[$121 >> 0] ^ HEAP8[$175 >> 0]; //@line 1640
   $179 = $$04056 + 14 | 0; //@line 1641
   HEAP8[$179 >> 0] = HEAP8[$122 >> 0] ^ HEAP8[$179 >> 0]; //@line 1645
   $183 = $$04056 + 15 | 0; //@line 1646
   HEAP8[$183 >> 0] = HEAP8[$123 >> 0] ^ HEAP8[$183 >> 0]; //@line 1650
   dest = $3; //@line 1651
   src = $6; //@line 1651
   stop = dest + 16 | 0; //@line 1651
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 1651
    dest = dest + 1 | 0; //@line 1651
    src = src + 1 | 0; //@line 1651
   } while ((dest | 0) < (stop | 0));
   $$04554 = $$04554 + -16 | 0; //@line 1654
   if (!$$04554) {
    $$044 = 0; //@line 1657
    break;
   } else {
    $$04056 = $$04056 + 16 | 0; //@line 1660
    $$04255 = $$04255 + 16 | 0; //@line 1660
   }
  }
  STACKTOP = sp; //@line 1663
  return $$044 | 0; //@line 1663
 }
 if ($10) {
  $$044 = 0; //@line 1666
  STACKTOP = sp; //@line 1667
  return $$044 | 0; //@line 1667
 }
 $12 = $3 + 1 | 0; //@line 1670
 $13 = $3 + 2 | 0; //@line 1671
 $14 = $3 + 3 | 0; //@line 1672
 $15 = $3 + 4 | 0; //@line 1673
 $16 = $3 + 5 | 0; //@line 1674
 $17 = $3 + 6 | 0; //@line 1675
 $18 = $3 + 7 | 0; //@line 1676
 $19 = $3 + 8 | 0; //@line 1677
 $20 = $3 + 9 | 0; //@line 1678
 $21 = $3 + 10 | 0; //@line 1679
 $22 = $3 + 11 | 0; //@line 1680
 $23 = $3 + 12 | 0; //@line 1681
 $24 = $3 + 13 | 0; //@line 1682
 $25 = $3 + 14 | 0; //@line 1683
 $26 = $3 + 15 | 0; //@line 1684
 if (($1 | 0) == 1) {
  $$14160$us = $5; //@line 1686
  $$14359$us = $4; //@line 1686
  $$14658$us = $2; //@line 1686
  while (1) {
   HEAP8[$$14160$us >> 0] = HEAP8[$3 >> 0] ^ HEAP8[$$14359$us >> 0]; //@line 1691
   HEAP8[$$14160$us + 1 >> 0] = HEAP8[$12 >> 0] ^ HEAP8[$$14359$us + 1 >> 0]; //@line 1697
   HEAP8[$$14160$us + 2 >> 0] = HEAP8[$13 >> 0] ^ HEAP8[$$14359$us + 2 >> 0]; //@line 1703
   HEAP8[$$14160$us + 3 >> 0] = HEAP8[$14 >> 0] ^ HEAP8[$$14359$us + 3 >> 0]; //@line 1709
   HEAP8[$$14160$us + 4 >> 0] = HEAP8[$15 >> 0] ^ HEAP8[$$14359$us + 4 >> 0]; //@line 1715
   HEAP8[$$14160$us + 5 >> 0] = HEAP8[$16 >> 0] ^ HEAP8[$$14359$us + 5 >> 0]; //@line 1721
   HEAP8[$$14160$us + 6 >> 0] = HEAP8[$17 >> 0] ^ HEAP8[$$14359$us + 6 >> 0]; //@line 1727
   HEAP8[$$14160$us + 7 >> 0] = HEAP8[$18 >> 0] ^ HEAP8[$$14359$us + 7 >> 0]; //@line 1733
   HEAP8[$$14160$us + 8 >> 0] = HEAP8[$19 >> 0] ^ HEAP8[$$14359$us + 8 >> 0]; //@line 1739
   HEAP8[$$14160$us + 9 >> 0] = HEAP8[$20 >> 0] ^ HEAP8[$$14359$us + 9 >> 0]; //@line 1745
   HEAP8[$$14160$us + 10 >> 0] = HEAP8[$21 >> 0] ^ HEAP8[$$14359$us + 10 >> 0]; //@line 1751
   HEAP8[$$14160$us + 11 >> 0] = HEAP8[$22 >> 0] ^ HEAP8[$$14359$us + 11 >> 0]; //@line 1757
   HEAP8[$$14160$us + 12 >> 0] = HEAP8[$23 >> 0] ^ HEAP8[$$14359$us + 12 >> 0]; //@line 1763
   HEAP8[$$14160$us + 13 >> 0] = HEAP8[$24 >> 0] ^ HEAP8[$$14359$us + 13 >> 0]; //@line 1769
   HEAP8[$$14160$us + 14 >> 0] = HEAP8[$25 >> 0] ^ HEAP8[$$14359$us + 14 >> 0]; //@line 1775
   HEAP8[$$14160$us + 15 >> 0] = HEAP8[$26 >> 0] ^ HEAP8[$$14359$us + 15 >> 0]; //@line 1781
   _mbedtls_internal_aes_encrypt($0, $$14160$us, $$14160$us) | 0; //@line 1782
   dest = $3; //@line 1783
   src = $$14160$us; //@line 1783
   stop = dest + 16 | 0; //@line 1783
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 1783
    dest = dest + 1 | 0; //@line 1783
    src = src + 1 | 0; //@line 1783
   } while ((dest | 0) < (stop | 0));
   $$14658$us = $$14658$us + -16 | 0; //@line 1786
   if (!$$14658$us) {
    $$044 = 0; //@line 1789
    break;
   } else {
    $$14160$us = $$14160$us + 16 | 0; //@line 1792
    $$14359$us = $$14359$us + 16 | 0; //@line 1792
   }
  }
  STACKTOP = sp; //@line 1795
  return $$044 | 0; //@line 1795
 } else {
  $$14160 = $5; //@line 1797
  $$14359 = $4; //@line 1797
  $$14658 = $2; //@line 1797
  while (1) {
   HEAP8[$$14160 >> 0] = HEAP8[$3 >> 0] ^ HEAP8[$$14359 >> 0]; //@line 1802
   HEAP8[$$14160 + 1 >> 0] = HEAP8[$12 >> 0] ^ HEAP8[$$14359 + 1 >> 0]; //@line 1808
   HEAP8[$$14160 + 2 >> 0] = HEAP8[$13 >> 0] ^ HEAP8[$$14359 + 2 >> 0]; //@line 1814
   HEAP8[$$14160 + 3 >> 0] = HEAP8[$14 >> 0] ^ HEAP8[$$14359 + 3 >> 0]; //@line 1820
   HEAP8[$$14160 + 4 >> 0] = HEAP8[$15 >> 0] ^ HEAP8[$$14359 + 4 >> 0]; //@line 1826
   HEAP8[$$14160 + 5 >> 0] = HEAP8[$16 >> 0] ^ HEAP8[$$14359 + 5 >> 0]; //@line 1832
   HEAP8[$$14160 + 6 >> 0] = HEAP8[$17 >> 0] ^ HEAP8[$$14359 + 6 >> 0]; //@line 1838
   HEAP8[$$14160 + 7 >> 0] = HEAP8[$18 >> 0] ^ HEAP8[$$14359 + 7 >> 0]; //@line 1844
   HEAP8[$$14160 + 8 >> 0] = HEAP8[$19 >> 0] ^ HEAP8[$$14359 + 8 >> 0]; //@line 1850
   HEAP8[$$14160 + 9 >> 0] = HEAP8[$20 >> 0] ^ HEAP8[$$14359 + 9 >> 0]; //@line 1856
   HEAP8[$$14160 + 10 >> 0] = HEAP8[$21 >> 0] ^ HEAP8[$$14359 + 10 >> 0]; //@line 1862
   HEAP8[$$14160 + 11 >> 0] = HEAP8[$22 >> 0] ^ HEAP8[$$14359 + 11 >> 0]; //@line 1868
   HEAP8[$$14160 + 12 >> 0] = HEAP8[$23 >> 0] ^ HEAP8[$$14359 + 12 >> 0]; //@line 1874
   HEAP8[$$14160 + 13 >> 0] = HEAP8[$24 >> 0] ^ HEAP8[$$14359 + 13 >> 0]; //@line 1880
   HEAP8[$$14160 + 14 >> 0] = HEAP8[$25 >> 0] ^ HEAP8[$$14359 + 14 >> 0]; //@line 1886
   HEAP8[$$14160 + 15 >> 0] = HEAP8[$26 >> 0] ^ HEAP8[$$14359 + 15 >> 0]; //@line 1892
   _mbedtls_internal_aes_decrypt($0, $$14160, $$14160) | 0; //@line 1893
   dest = $3; //@line 1894
   src = $$14160; //@line 1894
   stop = dest + 16 | 0; //@line 1894
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 1894
    dest = dest + 1 | 0; //@line 1894
    src = src + 1 | 0; //@line 1894
   } while ((dest | 0) < (stop | 0));
   $$14658 = $$14658 + -16 | 0; //@line 1897
   if (!$$14658) {
    $$044 = 0; //@line 1900
    break;
   } else {
    $$14160 = $$14160 + 16 | 0; //@line 1903
    $$14359 = $$14359 + 16 | 0; //@line 1903
   }
  }
  STACKTOP = sp; //@line 1906
  return $$044 | 0; //@line 1906
 }
 return 0; //@line 1908
}
function _initialize($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$037 = 0, $1 = 0, $101 = 0, $102 = 0, $103 = 0, $105 = 0, $106 = 0, $109 = 0, $115 = 0, $116 = 0, $117 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $130 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $140 = 0, $142 = 0, $148 = 0, $149 = 0, $150 = 0, $159 = 0, $160 = 0, $161 = 0, $163 = 0, $167 = 0, $173 = 0, $174 = 0, $175 = 0, $177 = 0, $18 = 0, $25 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $39 = 0, $40 = 0, $41 = 0, $45 = 0, $46 = 0, $52 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $65 = 0, $66 = 0, $68 = 0, $7 = 0, $70 = 0, $73 = 0, $77 = 0, $78 = 0, $85 = 0, $86 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx16 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5171
 $1 = $0 + 4 | 0; //@line 5172
 if (HEAP8[(HEAP32[$1 >> 2] | 0) + 56 >> 0] | 0) {
  return;
 }
 $7 = HEAP32[HEAP32[$0 >> 2] >> 2] | 0; //@line 5181
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 5182
 FUNCTION_TABLE_v[$7 & 15](); //@line 5183
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 611; //@line 5186
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 5188
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 5190
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 5192
  sp = STACKTOP; //@line 5193
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 5196
 $13 = HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] | 0; //@line 5199
 $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 5200
 $14 = FUNCTION_TABLE_i[$13 & 7]() | 0; //@line 5201
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 612; //@line 5204
  HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 5206
  HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 5208
  HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 5210
  sp = STACKTOP; //@line 5211
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 5214
 $18 = HEAP32[$14 >> 2] | 0; //@line 5215
 do {
  if (!$18) {
   $AsyncCtx20 = _emscripten_alloc_async_context(20, sp) | 0; //@line 5219
   _mbed_assert_internal(15131, 15133, 41); //@line 5220
   if (___async) {
    HEAP32[$AsyncCtx20 >> 2] = 613; //@line 5223
    HEAP32[$AsyncCtx20 + 4 >> 2] = $0; //@line 5225
    HEAP32[$AsyncCtx20 + 8 >> 2] = $1; //@line 5227
    HEAP32[$AsyncCtx20 + 12 >> 2] = $0; //@line 5229
    HEAP32[$AsyncCtx20 + 16 >> 2] = $14; //@line 5231
    sp = STACKTOP; //@line 5232
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx20 | 0); //@line 5235
    $$0 = 1e6; //@line 5236
    break;
   }
  } else {
   $$0 = $18; //@line 5240
  }
 } while (0);
 $25 = HEAP32[$14 + 4 >> 2] | 0; //@line 5244
 do {
  if (($25 + -4 | 0) >>> 0 > 28) {
   $AsyncCtx16 = _emscripten_alloc_async_context(20, sp) | 0; //@line 5249
   _mbed_assert_internal(15131, 15133, 47); //@line 5250
   if (___async) {
    HEAP32[$AsyncCtx16 >> 2] = 614; //@line 5253
    HEAP32[$AsyncCtx16 + 4 >> 2] = $$0; //@line 5255
    HEAP32[$AsyncCtx16 + 8 >> 2] = $1; //@line 5257
    HEAP32[$AsyncCtx16 + 12 >> 2] = $0; //@line 5259
    HEAP32[$AsyncCtx16 + 16 >> 2] = $0; //@line 5261
    sp = STACKTOP; //@line 5262
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx16 | 0); //@line 5265
    $$037 = 32; //@line 5266
    break;
   }
  } else {
   $$037 = $25; //@line 5270
  }
 } while (0);
 $32 = 7 << $$037 + -4; //@line 5274
 $33 = ___muldi3($32 | 0, 0, 1e6, 0) | 0; //@line 5275
 $34 = tempRet0; //@line 5276
 $35 = _i64Add($$0 | 0, 0, -1, -1) | 0; //@line 5277
 $37 = _i64Add($35 | 0, tempRet0 | 0, $33 | 0, $34 | 0) | 0; //@line 5279
 $39 = ___udivdi3($37 | 0, tempRet0 | 0, $$0 | 0, 0) | 0; //@line 5281
 $40 = tempRet0; //@line 5282
 $41 = HEAP32[$1 >> 2] | 0; //@line 5283
 HEAP32[$41 >> 2] = 0; //@line 5284
 HEAP32[$41 + 4 >> 2] = 0; //@line 5286
 $45 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 5289
 $AsyncCtx6 = _emscripten_alloc_async_context(40, sp) | 0; //@line 5290
 $46 = FUNCTION_TABLE_i[$45 & 7]() | 0; //@line 5291
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 615; //@line 5294
  HEAP32[$AsyncCtx6 + 4 >> 2] = $1; //@line 5296
  HEAP32[$AsyncCtx6 + 8 >> 2] = $$0; //@line 5298
  HEAP32[$AsyncCtx6 + 12 >> 2] = $$037; //@line 5300
  HEAP32[$AsyncCtx6 + 16 >> 2] = $32; //@line 5302
  $52 = $AsyncCtx6 + 24 | 0; //@line 5304
  HEAP32[$52 >> 2] = $39; //@line 5306
  HEAP32[$52 + 4 >> 2] = $40; //@line 5309
  HEAP32[$AsyncCtx6 + 32 >> 2] = $0; //@line 5311
  HEAP32[$AsyncCtx6 + 36 >> 2] = $0; //@line 5313
  sp = STACKTOP; //@line 5314
  return;
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 5317
 $58 = HEAP32[$1 >> 2] | 0; //@line 5318
 $59 = $58 + 32 | 0; //@line 5319
 HEAP32[$59 >> 2] = $46; //@line 5320
 $60 = $58 + 40 | 0; //@line 5321
 $61 = $60; //@line 5322
 HEAP32[$61 >> 2] = 0; //@line 5324
 HEAP32[$61 + 4 >> 2] = 0; //@line 5327
 $65 = $58 + 8 | 0; //@line 5328
 HEAP32[$65 >> 2] = $$0; //@line 5329
 $66 = _bitshift64Shl(1, 0, $$037 | 0) | 0; //@line 5330
 $68 = _i64Add($66 | 0, tempRet0 | 0, -1, 0) | 0; //@line 5332
 $70 = $58 + 12 | 0; //@line 5334
 HEAP32[$70 >> 2] = $68; //@line 5335
 HEAP32[$58 + 16 >> 2] = $32; //@line 5337
 $73 = $58 + 24 | 0; //@line 5339
 HEAP32[$73 >> 2] = $39; //@line 5341
 HEAP32[$73 + 4 >> 2] = $40; //@line 5344
 $77 = $58 + 48 | 0; //@line 5345
 $78 = $77; //@line 5346
 HEAP32[$78 >> 2] = 0; //@line 5348
 HEAP32[$78 + 4 >> 2] = 0; //@line 5351
 HEAP8[$58 + 56 >> 0] = 1; //@line 5353
 $85 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 5356
 $AsyncCtx9 = _emscripten_alloc_async_context(32, sp) | 0; //@line 5357
 $86 = FUNCTION_TABLE_i[$85 & 7]() | 0; //@line 5358
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 616; //@line 5361
  HEAP32[$AsyncCtx9 + 4 >> 2] = $1; //@line 5363
  HEAP32[$AsyncCtx9 + 8 >> 2] = $0; //@line 5365
  HEAP32[$AsyncCtx9 + 12 >> 2] = $59; //@line 5367
  HEAP32[$AsyncCtx9 + 16 >> 2] = $70; //@line 5369
  HEAP32[$AsyncCtx9 + 20 >> 2] = $65; //@line 5371
  HEAP32[$AsyncCtx9 + 24 >> 2] = $60; //@line 5373
  HEAP32[$AsyncCtx9 + 28 >> 2] = $77; //@line 5375
  sp = STACKTOP; //@line 5376
  return;
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 5379
 if (($86 | 0) != (HEAP32[(HEAP32[$1 >> 2] | 0) + 32 >> 2] | 0)) {
  $101 = $86 - (HEAP32[$59 >> 2] | 0) & HEAP32[$70 >> 2]; //@line 5388
  HEAP32[$59 >> 2] = $86; //@line 5389
  $102 = HEAP32[$65 >> 2] | 0; //@line 5390
  L30 : do {
   if (($102 | 0) < 1e6) {
    switch ($102 | 0) {
    case 32768:
     {
      break;
     }
    default:
     {
      label = 22; //@line 5399
      break L30;
     }
    }
    $103 = ___muldi3($101 | 0, 0, 1e6, 0) | 0; //@line 5403
    $105 = _bitshift64Lshr($103 | 0, tempRet0 | 0, 15) | 0; //@line 5405
    $106 = tempRet0; //@line 5406
    $109 = $60; //@line 5409
    $115 = _i64Add(HEAP32[$109 >> 2] | 0, HEAP32[$109 + 4 >> 2] | 0, $101 * 1e6 & 32704 | 0, 0) | 0; //@line 5415
    $116 = tempRet0; //@line 5416
    $117 = $60; //@line 5417
    HEAP32[$117 >> 2] = $115; //@line 5419
    HEAP32[$117 + 4 >> 2] = $116; //@line 5422
    if ($116 >>> 0 < 0 | ($116 | 0) == 0 & $115 >>> 0 < 32768) {
     $173 = $105; //@line 5429
     $174 = $106; //@line 5429
    } else {
     $126 = _i64Add($105 | 0, $106 | 0, 1, 0) | 0; //@line 5431
     $127 = tempRet0; //@line 5432
     $128 = _i64Add($115 | 0, $116 | 0, -32768, -1) | 0; //@line 5433
     $130 = $60; //@line 5435
     HEAP32[$130 >> 2] = $128; //@line 5437
     HEAP32[$130 + 4 >> 2] = tempRet0; //@line 5440
     $173 = $126; //@line 5441
     $174 = $127; //@line 5441
    }
   } else {
    switch ($102 | 0) {
    case 1e6:
     {
      $173 = $101; //@line 5446
      $174 = 0; //@line 5446
      break;
     }
    default:
     {
      label = 22; //@line 5450
     }
    }
   }
  } while (0);
  if ((label | 0) == 22) {
   $134 = ___muldi3($101 | 0, 0, 1e6, 0) | 0; //@line 5456
   $135 = tempRet0; //@line 5457
   $136 = ___udivdi3($134 | 0, $135 | 0, $102 | 0, 0) | 0; //@line 5458
   $137 = tempRet0; //@line 5459
   $138 = ___muldi3($136 | 0, $137 | 0, $102 | 0, 0) | 0; //@line 5460
   $140 = _i64Subtract($134 | 0, $135 | 0, $138 | 0, tempRet0 | 0) | 0; //@line 5462
   $142 = $60; //@line 5464
   $148 = _i64Add($140 | 0, tempRet0 | 0, HEAP32[$142 >> 2] | 0, HEAP32[$142 + 4 >> 2] | 0) | 0; //@line 5470
   $149 = tempRet0; //@line 5471
   $150 = $60; //@line 5472
   HEAP32[$150 >> 2] = $148; //@line 5474
   HEAP32[$150 + 4 >> 2] = $149; //@line 5477
   if ($149 >>> 0 < 0 | ($149 | 0) == 0 & $148 >>> 0 < $102 >>> 0) {
    $173 = $136; //@line 5484
    $174 = $137; //@line 5484
   } else {
    $159 = _i64Add($136 | 0, $137 | 0, 1, 0) | 0; //@line 5486
    $160 = tempRet0; //@line 5487
    $161 = _i64Subtract($148 | 0, $149 | 0, $102 | 0, 0) | 0; //@line 5488
    $163 = $60; //@line 5490
    HEAP32[$163 >> 2] = $161; //@line 5492
    HEAP32[$163 + 4 >> 2] = tempRet0; //@line 5495
    $173 = $159; //@line 5496
    $174 = $160; //@line 5496
   }
  }
  $167 = $77; //@line 5499
  $175 = _i64Add(HEAP32[$167 >> 2] | 0, HEAP32[$167 + 4 >> 2] | 0, $173 | 0, $174 | 0) | 0; //@line 5505
  $177 = $77; //@line 5507
  HEAP32[$177 >> 2] = $175; //@line 5509
  HEAP32[$177 + 4 >> 2] = tempRet0; //@line 5512
 }
 $AsyncCtx12 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5514
 _schedule_interrupt($0); //@line 5515
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 617; //@line 5518
  sp = STACKTOP; //@line 5519
  return;
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 5522
 return;
}
function __ZN7LoRaPHY16link_ADR_requestEP16adr_req_params_tPaS2_PhS3_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$$026$$026$i = 0, $$026$i = 0, $$028$i = 0, $$028$i4751 = 0, $$028$lcssa = 0, $$02862 = 0, $$029$be = 0, $$029$lcssa = 0, $$02961 = 0, $$1 = 0, $$127$i53 = 0, $$130$$$$i = 0, $$2$i = 0, $$2$i54 = 0, $$256 = 0, $$3 = 0, $$3$i52 = 0, $$lcssa76 = 0, $$lcssa77 = 0, $$pre = 0, $$sroa$034$0$lcssa = 0, $$sroa$034$058 = 0, $$sroa$1038$0$lcssa = 0, $$sroa$1038$060 = 0, $$sroa$636$0$lcssa = 0, $$sroa$636$059 = 0, $10 = 0, $107 = 0, $11 = 0, $112 = 0, $115 = 0, $117 = 0, $119 = 0, $12 = 0, $121 = 0, $123 = 0, $127 = 0, $128 = 0, $13 = 0, $132 = 0, $17 = 0, $18 = 0, $19 = 0, $27 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $42 = 0, $45 = 0, $52 = 0, $69 = 0, $7 = 0, $71 = 0, $83 = 0, $88 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $98 = 0, $indvars$iv = 0, $indvars$iv$i = 0, $indvars$iv$i31 = 0, $indvars$iv80 = 0, $wide$trip$count$i = 0, label = 0;
 $7 = HEAP8[$1 + 4 >> 0] | 0; //@line 23132
 L1 : do {
  if (!($7 << 24 >> 24)) {
   $$028$lcssa = 0; //@line 23136
   $$029$lcssa = 7; //@line 23136
   $$sroa$034$0$lcssa = 0; //@line 23136
   $$sroa$1038$0$lcssa = 0; //@line 23136
   $$sroa$636$0$lcssa = 0; //@line 23136
   $92 = 0; //@line 23136
  } else {
   $9 = HEAP32[$1 >> 2] | 0; //@line 23138
   $10 = $0 + 20 | 0; //@line 23139
   $11 = $0 + 112 | 0; //@line 23140
   $$02862 = 0; //@line 23141
   $$02961 = 7; //@line 23141
   $$lcssa76 = 0; //@line 23141
   $$sroa$034$058 = 0; //@line 23141
   $$sroa$1038$060 = 0; //@line 23141
   $$sroa$636$059 = 0; //@line 23141
   $13 = 0; //@line 23141
   while (1) {
    $12 = $9 + $13 | 0; //@line 23143
    if ((HEAP8[$12 >> 0] | 0) != 3) {
     $$028$lcssa = $$02862; //@line 23147
     $$029$lcssa = $$02961; //@line 23147
     $$sroa$034$0$lcssa = $$sroa$034$058; //@line 23147
     $$sroa$1038$0$lcssa = $$sroa$1038$060; //@line 23147
     $$sroa$636$0$lcssa = $$sroa$636$059; //@line 23147
     $92 = $$lcssa76; //@line 23147
     break L1;
    }
    $17 = HEAP8[$12 + 1 >> 0] | 0; //@line 23151
    $18 = $17 & 15; //@line 23152
    $19 = ($17 & 255) >>> 4; //@line 23153
    $27 = HEAPU8[$12 + 3 >> 0] << 8 | HEAPU8[$12 + 2 >> 0]; //@line 23161
    $28 = $27 & 65535; //@line 23162
    $30 = HEAP8[$12 + 4 >> 0] | 0; //@line 23164
    $32 = ($30 & 255) >>> 4; //@line 23166
    $34 = $32 & 7; //@line 23168
    $35 = $30 & 15; //@line 23169
    $36 = $13 + 5 | 0; //@line 23170
    $37 = $36 & 255; //@line 23171
    $$1 = $28 << 16 >> 16 == 0 & $34 << 24 >> 24 == 0 ? 6 : 7; //@line 23175
    L6 : do {
     switch ($32 & 7) {
     case 6:
     case 0:
      {
       $42 = HEAP8[$10 >> 0] | 0; //@line 23181
       if (!($42 << 24 >> 24)) {
        $$029$be = $$1; //@line 23184
        $$lcssa77 = $28; //@line 23184
       } else {
        $45 = $42 & 255; //@line 23187
        if ($34 << 24 >> 24 != 6) {
         $$256 = $$1; //@line 23189
         $indvars$iv = 0; //@line 23189
         while (1) {
          if (!($27 & 1 << ($indvars$iv & 15))) {
           $$3 = $$256; //@line 23196
          } else {
           $$3 = (HEAP32[(HEAP32[$11 >> 2] | 0) + ($indvars$iv * 12 | 0) >> 2] | 0) == 0 ? $$256 & -2 : $$256; //@line 23204
          }
          $indvars$iv = $indvars$iv + 1 | 0; //@line 23206
          if ($indvars$iv >>> 0 >= $45 >>> 0) {
           $$029$be = $$3; //@line 23211
           $$lcssa77 = $28; //@line 23211
           break L6;
          } else {
           $$256 = $$3; //@line 23209
          }
         }
        }
        $$pre = HEAP32[$11 >> 2] | 0; //@line 23216
        $52 = $28; //@line 23217
        $indvars$iv80 = 0; //@line 23217
        while (1) {
         if (!(HEAP32[$$pre + ($indvars$iv80 * 12 | 0) >> 2] | 0)) {
          $132 = $52; //@line 23223
         } else {
          $132 = (1 << ($indvars$iv80 & 15) | $52 & 65535) & 65535; //@line 23230
         }
         $indvars$iv80 = $indvars$iv80 + 1 | 0; //@line 23232
         if ($indvars$iv80 >>> 0 >= $45 >>> 0) {
          $$029$be = $$1; //@line 23237
          $$lcssa77 = $132; //@line 23237
          break;
         } else {
          $52 = $132; //@line 23235
         }
        }
       }
       break;
      }
     default:
      {
       $$029$be = 6; //@line 23245
       $$lcssa77 = $28; //@line 23245
      }
     }
    } while (0);
    if (($7 & 255) > ($37 & 255)) {
     $$02862 = $37; //@line 23252
     $$02961 = $$029$be; //@line 23252
     $$lcssa76 = $$lcssa77; //@line 23252
     $$sroa$034$058 = $35; //@line 23252
     $$sroa$1038$060 = $18; //@line 23252
     $$sroa$636$059 = $19; //@line 23252
     $13 = $36 & 255; //@line 23252
    } else {
     $$028$lcssa = $37; //@line 23254
     $$029$lcssa = $$029$be; //@line 23254
     $$sroa$034$0$lcssa = $35; //@line 23254
     $$sroa$1038$0$lcssa = $18; //@line 23254
     $$sroa$636$0$lcssa = $19; //@line 23254
     $92 = $$lcssa77; //@line 23254
     break L1;
    }
   }
  }
 } while (0);
 $69 = HEAP8[$1 + 7 >> 0] | 0; //@line 23263
 $71 = HEAP8[$1 + 8 >> 0] | 0; //@line 23265
 if (!(HEAP8[$1 + 6 >> 0] | 0)) {
  if ($$sroa$636$0$lcssa << 24 >> 24 == 15 & $$sroa$1038$0$lcssa << 24 >> 24 == 15) {
   $$026$i = $71; //@line 23274
   $$028$i = $69; //@line 23274
  } else {
   $$028$i4751 = $69; //@line 23276
   $$127$i53 = $71; //@line 23276
   $$2$i54 = HEAP8[$1 + 9 >> 0] | 0; //@line 23276
   $$3$i52 = 0; //@line 23276
   HEAP8[$2 >> 0] = $$028$i4751; //@line 23277
   HEAP8[$3 >> 0] = $$127$i53; //@line 23278
   HEAP8[$4 >> 0] = $$2$i54; //@line 23279
   HEAP8[$5 >> 0] = $$028$lcssa; //@line 23280
   return $$3$i52 | 0; //@line 23281
  }
 } else {
  $$026$i = $$sroa$1038$0$lcssa; //@line 23284
  $$028$i = $$sroa$636$0$lcssa; //@line 23284
 }
 if (!($$029$lcssa << 24 >> 24)) {
  $$028$i4751 = $$028$i; //@line 23288
  $$127$i53 = $$026$i; //@line 23288
  $$2$i54 = $$sroa$034$0$lcssa; //@line 23288
  $$3$i52 = 0; //@line 23288
  HEAP8[$2 >> 0] = $$028$i4751; //@line 23289
  HEAP8[$3 >> 0] = $$127$i53; //@line 23290
  HEAP8[$4 >> 0] = $$2$i54; //@line 23291
  HEAP8[$5 >> 0] = $$028$lcssa; //@line 23292
  return $$3$i52 | 0; //@line 23293
 }
 $83 = HEAP32[$0 + 112 >> 2] | 0; //@line 23300
 L30 : do {
  if ($$028$i << 24 >> 24 < (HEAP8[$0 + 26 >> 0] | 0) ? 1 : $$028$i << 24 >> 24 > (HEAP8[$0 + 27 >> 0] | 0)) {
   label = 24; //@line 23306
  } else {
   $88 = HEAP8[$0 + 20 >> 0] | 0; //@line 23309
   if (!($88 << 24 >> 24)) {
    label = 24; //@line 23312
   } else {
    $90 = $88 & 255; //@line 23314
    $91 = $92 & 65535; //@line 23315
    $indvars$iv$i31 = 0; //@line 23316
    while (1) {
     if (1 << ($indvars$iv$i31 & 15) & $91 | 0) {
      $98 = HEAP8[$83 + ($indvars$iv$i31 * 12 | 0) + 8 >> 0] | 0; //@line 23324
      if (!(($98 & 15) > $$028$i << 24 >> 24 ? 1 : ($98 & 255) >>> 4 << 24 >> 24 < $$028$i << 24 >> 24)) {
       $117 = $$029$lcssa; //@line 23331
       break L30;
      }
     }
     $indvars$iv$i31 = $indvars$iv$i31 + 1 | 0; //@line 23335
     if ($indvars$iv$i31 >>> 0 >= $90 >>> 0) {
      label = 24; //@line 23340
      break;
     }
    }
   }
  }
 } while (0);
 if ((label | 0) == 24) {
  $117 = $$029$lcssa & -3; //@line 23349
 }
 $107 = HEAP8[$0 + 22 >> 0] | 0; //@line 23352
 $112 = $$026$i << 24 >> 24 < $107 << 24 >> 24 ? 1 : $$026$i << 24 >> 24 > (HEAP8[$0 + 21 >> 0] | 0); //@line 23357
 $115 = ($107 & 255 | 0) > ($$026$i << 24 >> 24 | 0); //@line 23360
 $$130$$$$i = $112 ? $115 ? $117 : $117 & -5 : $117; //@line 23363
 $$$026$$026$i = $115 & $112 ? $107 : $$026$i; //@line 23365
 $119 = $$130$$$$i << 24 >> 24 == 7; //@line 23366
 $$2$i = $$sroa$034$0$lcssa << 24 >> 24 == 0 & $119 ? 1 : $$sroa$034$0$lcssa; //@line 23369
 if (!$119) {
  $$028$i4751 = $$028$i; //@line 23371
  $$127$i53 = $$$026$$026$i; //@line 23371
  $$2$i54 = $$2$i; //@line 23371
  $$3$i52 = $$130$$$$i; //@line 23371
  HEAP8[$2 >> 0] = $$028$i4751; //@line 23372
  HEAP8[$3 >> 0] = $$127$i53; //@line 23373
  HEAP8[$4 >> 0] = $$2$i54; //@line 23374
  HEAP8[$5 >> 0] = $$028$lcssa; //@line 23375
  return $$3$i52 | 0; //@line 23376
 }
 $121 = $0 + 120 | 0; //@line 23378
 $123 = $0 + 128 | 0; //@line 23380
 _memset(HEAP32[$121 >> 2] | 0, 0, HEAPU8[$123 >> 0] << 1 | 0) | 0; //@line 23384
 $127 = HEAP32[$121 >> 2] | 0; //@line 23385
 $128 = HEAP8[$123 >> 0] | 0; //@line 23386
 if (!(($127 | 0) != 0 & $128 << 24 >> 24 != 0)) {
  $$028$i4751 = $$028$i; //@line 23391
  $$127$i53 = $$$026$$026$i; //@line 23391
  $$2$i54 = $$2$i; //@line 23391
  $$3$i52 = 7; //@line 23391
  HEAP8[$2 >> 0] = $$028$i4751; //@line 23392
  HEAP8[$3 >> 0] = $$127$i53; //@line 23393
  HEAP8[$4 >> 0] = $$2$i54; //@line 23394
  HEAP8[$5 >> 0] = $$028$lcssa; //@line 23395
  return $$3$i52 | 0; //@line 23396
 }
 $wide$trip$count$i = $128 & 255; //@line 23398
 $indvars$iv$i = 0; //@line 23399
 do {
  HEAP16[$127 + ($indvars$iv$i << 1) >> 1] = $92; //@line 23402
  $indvars$iv$i = $indvars$iv$i + 1 | 0; //@line 23403
 } while (($indvars$iv$i | 0) != ($wide$trip$count$i | 0));
 $$028$i4751 = $$028$i; //@line 23406
 $$127$i53 = $$$026$$026$i; //@line 23406
 $$2$i54 = $$2$i; //@line 23406
 $$3$i52 = 7; //@line 23406
 HEAP8[$2 >> 0] = $$028$i4751; //@line 23412
 HEAP8[$3 >> 0] = $$127$i53; //@line 23413
 HEAP8[$4 >> 0] = $$2$i54; //@line 23414
 HEAP8[$5 >> 0] = $$028$lcssa; //@line 23415
 return $$3$i52 | 0; //@line 23416
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $14 = 0, $15 = 0, $19 = 0, $2 = 0, $21 = 0, $26 = 0, $27 = 0, $3 = 0, $30 = 0, $33 = 0, $36 = 0, $37 = 0, $4 = 0, $41 = 0, $43 = 0, $48 = 0, $49 = 0, $52 = 0, $55 = 0, $6 = 0, $67 = 0, $68 = 0, $72 = 0, $74 = 0, $79 = 0, $80 = 0, $83 = 0, $86 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx18 = 0, $AsyncCtx22 = 0, $AsyncCtx25 = 0, $AsyncCtx28 = 0, $AsyncCtx31 = 0, $AsyncCtx35 = 0, $AsyncCtx39 = 0, $AsyncCtx43 = 0, $AsyncCtx47 = 0, $AsyncCtx8 = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP; //@line 5814
 STACKTOP = STACKTOP + 80 | 0; //@line 5815
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80); //@line 5815
 $vararg_buffer5 = sp + 24 | 0; //@line 5816
 $vararg_buffer3 = sp + 16 | 0; //@line 5817
 $vararg_buffer1 = sp + 8 | 0; //@line 5818
 $2 = sp + 64 | 0; //@line 5820
 $3 = sp + 48 | 0; //@line 5821
 $4 = sp + 32 | 0; //@line 5822
 if (!$1) {
  _mbed_tracef(2, 12356, 13156, sp); //@line 5825
  $AsyncCtx47 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5826
  _mbed_assert_internal(15131, 12396, 763); //@line 5827
  if (___async) {
   HEAP32[$AsyncCtx47 >> 2] = 160; //@line 5830
   sp = STACKTOP; //@line 5831
   STACKTOP = sp; //@line 5832
   return;
  }
  _emscripten_free_async_context($AsyncCtx47 | 0); //@line 5834
  STACKTOP = sp; //@line 5835
  return;
 }
 $6 = $1 + 4 | 0; //@line 5837
 if (!(HEAP32[$6 >> 2] | 0)) {
  if ((HEAP32[$1 >> 2] | 0) == 1) {
   if (HEAP8[$1 + 10 >> 0] | 0) {
    _mbed_tracef(16, 12356, 13249, $vararg_buffer5); //@line 5848
   }
  }
  HEAP32[$0 + 1956 >> 2] = HEAP32[$1 + 16 >> 2]; //@line 5854
  HEAP8[$0 + 1964 >> 0] = 0; //@line 5856
  $67 = $0 + 1892 | 0; //@line 5857
  $68 = HEAP32[$67 >> 2] | 0; //@line 5858
  if (!$68) {
   STACKTOP = sp; //@line 5861
   return;
  }
  $72 = HEAP32[$0 + 2288 >> 2] | 0; //@line 5865
  $74 = HEAP32[$68 + 4 >> 2] | 0; //@line 5867
  $AsyncCtx18 = _emscripten_alloc_async_context(20, sp) | 0; //@line 5868
  FUNCTION_TABLE_vii[$74 & 31]($4, $0 + 1880 | 0); //@line 5869
  if (___async) {
   HEAP32[$AsyncCtx18 >> 2] = 169; //@line 5872
   HEAP32[$AsyncCtx18 + 4 >> 2] = $67; //@line 5874
   HEAP32[$AsyncCtx18 + 8 >> 2] = $4; //@line 5876
   HEAP32[$AsyncCtx18 + 12 >> 2] = $72; //@line 5878
   HEAP32[$AsyncCtx18 + 16 >> 2] = $4; //@line 5880
   sp = STACKTOP; //@line 5881
   STACKTOP = sp; //@line 5882
   return;
  }
  _emscripten_free_async_context($AsyncCtx18 | 0); //@line 5884
  $79 = $4 + 12 | 0; //@line 5886
  HEAP32[$79 >> 2] = HEAP32[$67 >> 2]; //@line 5887
  $AsyncCtx25 = _emscripten_alloc_async_context(12, sp) | 0; //@line 5888
  $80 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($72, $4, 2) | 0; //@line 5889
  if (___async) {
   HEAP32[$AsyncCtx25 >> 2] = 170; //@line 5892
   HEAP32[$AsyncCtx25 + 4 >> 2] = $79; //@line 5894
   HEAP32[$AsyncCtx25 + 8 >> 2] = $4; //@line 5896
   sp = STACKTOP; //@line 5897
   STACKTOP = sp; //@line 5898
   return;
  }
  _emscripten_free_async_context($AsyncCtx25 | 0); //@line 5900
  $83 = HEAP32[$79 >> 2] | 0; //@line 5901
  do {
   if ($83 | 0) {
    $86 = HEAP32[$83 + 8 >> 2] | 0; //@line 5906
    $AsyncCtx22 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5907
    FUNCTION_TABLE_vi[$86 & 1023]($4); //@line 5908
    if (___async) {
     HEAP32[$AsyncCtx22 >> 2] = 171; //@line 5911
     HEAP32[$AsyncCtx22 + 4 >> 2] = $80; //@line 5913
     sp = STACKTOP; //@line 5914
     STACKTOP = sp; //@line 5915
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx22 | 0); //@line 5917
     break;
    }
   }
  } while (0);
  if ($80 | 0) {
   STACKTOP = sp; //@line 5924
   return;
  }
  $AsyncCtx35 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5926
  _mbed_assert_internal(13612, 12396, 816); //@line 5927
  if (___async) {
   HEAP32[$AsyncCtx35 >> 2] = 172; //@line 5930
   sp = STACKTOP; //@line 5931
   STACKTOP = sp; //@line 5932
   return;
  }
  _emscripten_free_async_context($AsyncCtx35 | 0); //@line 5934
  STACKTOP = sp; //@line 5935
  return;
 }
 HEAP8[$0 + 1964 >> 0] = 0; //@line 5938
 _memset($0 + 1975 | 0, 0, 255) | 0; //@line 5940
 HEAP16[$0 + 2230 >> 1] = 255; //@line 5942
 HEAP32[$vararg_buffer1 >> 2] = HEAP32[$6 >> 2]; //@line 5944
 _mbed_tracef(2, 12356, 13191, $vararg_buffer1); //@line 5945
 switch (HEAP32[$6 >> 2] | 0) {
 case 2:
  {
   $14 = $0 + 1892 | 0; //@line 5949
   $15 = HEAP32[$14 >> 2] | 0; //@line 5950
   if (!$15) {
    STACKTOP = sp; //@line 5953
    return;
   }
   $19 = HEAP32[$0 + 2288 >> 2] | 0; //@line 5957
   $21 = HEAP32[$15 + 4 >> 2] | 0; //@line 5959
   $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 5960
   FUNCTION_TABLE_vii[$21 & 31]($2, $0 + 1880 | 0); //@line 5961
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 161; //@line 5964
    HEAP32[$AsyncCtx + 4 >> 2] = $14; //@line 5966
    HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 5968
    HEAP32[$AsyncCtx + 12 >> 2] = $19; //@line 5970
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 5972
    sp = STACKTOP; //@line 5973
    STACKTOP = sp; //@line 5974
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 5976
   $26 = $2 + 12 | 0; //@line 5978
   HEAP32[$26 >> 2] = HEAP32[$14 >> 2]; //@line 5979
   $AsyncCtx31 = _emscripten_alloc_async_context(12, sp) | 0; //@line 5980
   $27 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($19, $2, 3) | 0; //@line 5981
   if (___async) {
    HEAP32[$AsyncCtx31 >> 2] = 162; //@line 5984
    HEAP32[$AsyncCtx31 + 4 >> 2] = $26; //@line 5986
    HEAP32[$AsyncCtx31 + 8 >> 2] = $2; //@line 5988
    sp = STACKTOP; //@line 5989
    STACKTOP = sp; //@line 5990
    return;
   }
   _emscripten_free_async_context($AsyncCtx31 | 0); //@line 5992
   $30 = HEAP32[$26 >> 2] | 0; //@line 5993
   do {
    if ($30 | 0) {
     $33 = HEAP32[$30 + 8 >> 2] | 0; //@line 5998
     $AsyncCtx8 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5999
     FUNCTION_TABLE_vi[$33 & 1023]($2); //@line 6000
     if (___async) {
      HEAP32[$AsyncCtx8 >> 2] = 163; //@line 6003
      HEAP32[$AsyncCtx8 + 4 >> 2] = $27; //@line 6005
      sp = STACKTOP; //@line 6006
      STACKTOP = sp; //@line 6007
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx8 | 0); //@line 6009
      break;
     }
    }
   } while (0);
   if ($27 | 0) {
    STACKTOP = sp; //@line 6016
    return;
   }
   $AsyncCtx43 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6018
   _mbed_assert_internal(13612, 12396, 781); //@line 6019
   if (___async) {
    HEAP32[$AsyncCtx43 >> 2] = 164; //@line 6022
    sp = STACKTOP; //@line 6023
    STACKTOP = sp; //@line 6024
    return;
   }
   _emscripten_free_async_context($AsyncCtx43 | 0); //@line 6026
   STACKTOP = sp; //@line 6027
   return;
  }
 case 4:
  {
   _mbed_tracef(16, 12356, 13229, $vararg_buffer3); //@line 6031
   break;
  }
 default:
  {}
 }
 $36 = $0 + 1892 | 0; //@line 6037
 $37 = HEAP32[$36 >> 2] | 0; //@line 6038
 if (!$37) {
  STACKTOP = sp; //@line 6041
  return;
 }
 $41 = HEAP32[$0 + 2288 >> 2] | 0; //@line 6045
 $43 = HEAP32[$37 + 4 >> 2] | 0; //@line 6047
 $AsyncCtx11 = _emscripten_alloc_async_context(20, sp) | 0; //@line 6048
 FUNCTION_TABLE_vii[$43 & 31]($3, $0 + 1880 | 0); //@line 6049
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 165; //@line 6052
  HEAP32[$AsyncCtx11 + 4 >> 2] = $36; //@line 6054
  HEAP32[$AsyncCtx11 + 8 >> 2] = $3; //@line 6056
  HEAP32[$AsyncCtx11 + 12 >> 2] = $41; //@line 6058
  HEAP32[$AsyncCtx11 + 16 >> 2] = $3; //@line 6060
  sp = STACKTOP; //@line 6061
  STACKTOP = sp; //@line 6062
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 6064
 $48 = $3 + 12 | 0; //@line 6066
 HEAP32[$48 >> 2] = HEAP32[$36 >> 2]; //@line 6067
 $AsyncCtx28 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6068
 $49 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($41, $3, 4) | 0; //@line 6069
 if (___async) {
  HEAP32[$AsyncCtx28 >> 2] = 166; //@line 6072
  HEAP32[$AsyncCtx28 + 4 >> 2] = $48; //@line 6074
  HEAP32[$AsyncCtx28 + 8 >> 2] = $3; //@line 6076
  sp = STACKTOP; //@line 6077
  STACKTOP = sp; //@line 6078
  return;
 }
 _emscripten_free_async_context($AsyncCtx28 | 0); //@line 6080
 $52 = HEAP32[$48 >> 2] | 0; //@line 6081
 do {
  if ($52 | 0) {
   $55 = HEAP32[$52 + 8 >> 2] | 0; //@line 6086
   $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6087
   FUNCTION_TABLE_vi[$55 & 1023]($3); //@line 6088
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 167; //@line 6091
    HEAP32[$AsyncCtx15 + 4 >> 2] = $49; //@line 6093
    sp = STACKTOP; //@line 6094
    STACKTOP = sp; //@line 6095
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 6097
    break;
   }
  }
 } while (0);
 if ($49 | 0) {
  STACKTOP = sp; //@line 6104
  return;
 }
 $AsyncCtx39 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6106
 _mbed_assert_internal(13612, 12396, 792); //@line 6107
 if (___async) {
  HEAP32[$AsyncCtx39 >> 2] = 168; //@line 6110
  sp = STACKTOP; //@line 6111
  STACKTOP = sp; //@line 6112
  return;
 }
 _emscripten_free_async_context($AsyncCtx39 | 0); //@line 6114
 STACKTOP = sp; //@line 6115
 return;
}
function _schedule_interrupt($0) {
 $0 = $0 | 0;
 var $$0$i = 0, $1 = 0, $10 = 0, $104 = 0, $107 = 0, $109 = 0, $11 = 0, $112 = 0, $113 = 0, $115 = 0, $118 = 0, $126 = 0, $127 = 0, $128 = 0, $130 = 0, $132 = 0, $137 = 0, $14 = 0, $144 = 0, $146 = 0, $148 = 0, $151 = 0, $153 = 0, $160 = 0, $161 = 0, $164 = 0, $166 = 0, $168 = 0, $174 = 0, $175 = 0, $179 = 0, $187 = 0, $19 = 0, $195 = 0, $198 = 0, $2 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $28 = 0, $29 = 0, $35 = 0, $36 = 0, $37 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $50 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $63 = 0, $69 = 0, $70 = 0, $71 = 0, $80 = 0, $81 = 0, $82 = 0, $84 = 0, $88 = 0, $89 = 0, $95 = 0, $96 = 0, $97 = 0, $99 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx18 = 0, $AsyncCtx22 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5539
 $1 = $0 + 4 | 0; //@line 5540
 $2 = HEAP32[$1 >> 2] | 0; //@line 5541
 $5 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 5544
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 5545
 $6 = FUNCTION_TABLE_i[$5 & 7]() | 0; //@line 5546
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 618; //@line 5549
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 5551
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 5553
  HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 5555
  sp = STACKTOP; //@line 5556
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 5559
 $10 = HEAP32[$1 >> 2] | 0; //@line 5560
 $11 = $10 + 32 | 0; //@line 5561
 if (($6 | 0) != (HEAP32[$11 >> 2] | 0)) {
  $14 = $2 + 32 | 0; //@line 5565
  $19 = $6 - (HEAP32[$14 >> 2] | 0) & HEAP32[$2 + 12 >> 2]; //@line 5570
  HEAP32[$14 >> 2] = $6; //@line 5571
  $21 = HEAP32[$2 + 8 >> 2] | 0; //@line 5573
  L6 : do {
   if (($21 | 0) < 1e6) {
    switch ($21 | 0) {
    case 32768:
     {
      break;
     }
    default:
     {
      label = 7; //@line 5582
      break L6;
     }
    }
    $22 = ___muldi3($19 | 0, 0, 1e6, 0) | 0; //@line 5586
    $24 = _bitshift64Lshr($22 | 0, tempRet0 | 0, 15) | 0; //@line 5588
    $25 = tempRet0; //@line 5589
    $28 = $2 + 40 | 0; //@line 5592
    $29 = $28; //@line 5593
    $35 = _i64Add(HEAP32[$29 >> 2] | 0, HEAP32[$29 + 4 >> 2] | 0, $19 * 1e6 & 32704 | 0, 0) | 0; //@line 5599
    $36 = tempRet0; //@line 5600
    $37 = $28; //@line 5601
    HEAP32[$37 >> 2] = $35; //@line 5603
    HEAP32[$37 + 4 >> 2] = $36; //@line 5606
    if ($36 >>> 0 < 0 | ($36 | 0) == 0 & $35 >>> 0 < 32768) {
     $95 = $24; //@line 5613
     $96 = $25; //@line 5613
    } else {
     $46 = _i64Add($24 | 0, $25 | 0, 1, 0) | 0; //@line 5615
     $47 = tempRet0; //@line 5616
     $48 = _i64Add($35 | 0, $36 | 0, -32768, -1) | 0; //@line 5617
     $50 = $28; //@line 5619
     HEAP32[$50 >> 2] = $48; //@line 5621
     HEAP32[$50 + 4 >> 2] = tempRet0; //@line 5624
     $95 = $46; //@line 5625
     $96 = $47; //@line 5625
    }
   } else {
    switch ($21 | 0) {
    case 1e6:
     {
      $95 = $19; //@line 5630
      $96 = 0; //@line 5630
      break;
     }
    default:
     {
      label = 7; //@line 5634
     }
    }
   }
  } while (0);
  if ((label | 0) == 7) {
   $54 = ___muldi3($19 | 0, 0, 1e6, 0) | 0; //@line 5640
   $55 = tempRet0; //@line 5641
   $56 = ___udivdi3($54 | 0, $55 | 0, $21 | 0, 0) | 0; //@line 5642
   $57 = tempRet0; //@line 5643
   $58 = ___muldi3($56 | 0, $57 | 0, $21 | 0, 0) | 0; //@line 5644
   $60 = _i64Subtract($54 | 0, $55 | 0, $58 | 0, tempRet0 | 0) | 0; //@line 5646
   $62 = $2 + 40 | 0; //@line 5648
   $63 = $62; //@line 5649
   $69 = _i64Add($60 | 0, tempRet0 | 0, HEAP32[$63 >> 2] | 0, HEAP32[$63 + 4 >> 2] | 0) | 0; //@line 5655
   $70 = tempRet0; //@line 5656
   $71 = $62; //@line 5657
   HEAP32[$71 >> 2] = $69; //@line 5659
   HEAP32[$71 + 4 >> 2] = $70; //@line 5662
   if ($70 >>> 0 < 0 | ($70 | 0) == 0 & $69 >>> 0 < $21 >>> 0) {
    $95 = $56; //@line 5669
    $96 = $57; //@line 5669
   } else {
    $80 = _i64Add($56 | 0, $57 | 0, 1, 0) | 0; //@line 5671
    $81 = tempRet0; //@line 5672
    $82 = _i64Subtract($69 | 0, $70 | 0, $21 | 0, 0) | 0; //@line 5673
    $84 = $62; //@line 5675
    HEAP32[$84 >> 2] = $82; //@line 5677
    HEAP32[$84 + 4 >> 2] = tempRet0; //@line 5680
    $95 = $80; //@line 5681
    $96 = $81; //@line 5681
   }
  }
  $88 = $2 + 48 | 0; //@line 5684
  $89 = $88; //@line 5685
  $97 = _i64Add(HEAP32[$89 >> 2] | 0, HEAP32[$89 + 4 >> 2] | 0, $95 | 0, $96 | 0) | 0; //@line 5691
  $99 = $88; //@line 5693
  HEAP32[$99 >> 2] = $97; //@line 5695
  HEAP32[$99 + 4 >> 2] = tempRet0; //@line 5698
 }
 $104 = HEAP32[$10 + 4 >> 2] | 0; //@line 5701
 if (!$104) {
  $195 = (HEAP32[$2 + 16 >> 2] | 0) + (HEAP32[$2 + 32 >> 2] | 0) & HEAP32[$2 + 12 >> 2]; //@line 5711
  $198 = HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0; //@line 5714
  $AsyncCtx22 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5715
  FUNCTION_TABLE_vi[$198 & 1023]($195); //@line 5716
  if (___async) {
   HEAP32[$AsyncCtx22 >> 2] = 624; //@line 5719
   sp = STACKTOP; //@line 5720
   return;
  } else {
   _emscripten_free_async_context($AsyncCtx22 | 0); //@line 5723
   return;
  }
 }
 $107 = $10 + 48 | 0; //@line 5728
 $109 = HEAP32[$107 >> 2] | 0; //@line 5730
 $112 = HEAP32[$107 + 4 >> 2] | 0; //@line 5733
 $113 = $104; //@line 5734
 $115 = HEAP32[$113 >> 2] | 0; //@line 5736
 $118 = HEAP32[$113 + 4 >> 2] | 0; //@line 5739
 if (!($118 >>> 0 > $112 >>> 0 | ($118 | 0) == ($112 | 0) & $115 >>> 0 > $109 >>> 0)) {
  $126 = HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] | 0; //@line 5748
  $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5749
  FUNCTION_TABLE_v[$126 & 15](); //@line 5750
  if (___async) {
   HEAP32[$AsyncCtx3 >> 2] = 619; //@line 5753
   sp = STACKTOP; //@line 5754
   return;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5757
  return;
 }
 $127 = _i64Subtract($115 | 0, $118 | 0, $109 | 0, $112 | 0) | 0; //@line 5760
 $128 = tempRet0; //@line 5761
 $130 = HEAP32[$10 + 16 >> 2] | 0; //@line 5763
 $132 = $10 + 24 | 0; //@line 5765
 $137 = HEAP32[$132 + 4 >> 2] | 0; //@line 5770
 L29 : do {
  if ($128 >>> 0 > $137 >>> 0 | (($128 | 0) == ($137 | 0) ? $127 >>> 0 > (HEAP32[$132 >> 2] | 0) >>> 0 : 0)) {
   $$0$i = $130; //@line 5778
  } else {
   $144 = HEAP32[$10 + 8 >> 2] | 0; //@line 5781
   L31 : do {
    if (($144 | 0) < 1e6) {
     switch ($144 | 0) {
     case 32768:
      {
       break;
      }
     default:
      {
       break L31;
      }
     }
     $146 = _bitshift64Shl($127 | 0, $128 | 0, 15) | 0; //@line 5793
     $148 = ___udivdi3($146 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 5795
     $$0$i = $130 >>> 0 < $148 >>> 0 ? $130 : $148; //@line 5799
     break L29;
    } else {
     switch ($144 | 0) {
     case 1e6:
      {
       break;
      }
     default:
      {
       break L31;
      }
     }
     $$0$i = $130 >>> 0 < $127 >>> 0 ? $130 : $127; //@line 5812
     break L29;
    }
   } while (0);
   $151 = ___muldi3($127 | 0, $128 | 0, $144 | 0, 0) | 0; //@line 5816
   $153 = ___udivdi3($151 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 5818
   $$0$i = $130 >>> 0 < $153 >>> 0 ? $130 : $153; //@line 5822
  }
 } while (0);
 $160 = (HEAP32[$11 >> 2] | 0) + $$0$i & HEAP32[$10 + 12 >> 2]; //@line 5829
 $161 = $2 + 32 | 0; //@line 5830
 $164 = HEAP32[$0 >> 2] | 0; //@line 5833
 if (($160 | 0) == (HEAP32[$161 >> 2] | 0)) {
  $166 = HEAP32[$164 + 20 >> 2] | 0; //@line 5836
  $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5837
  FUNCTION_TABLE_v[$166 & 15](); //@line 5838
  if (___async) {
   HEAP32[$AsyncCtx7 >> 2] = 620; //@line 5841
   sp = STACKTOP; //@line 5842
   return;
  }
  _emscripten_free_async_context($AsyncCtx7 | 0); //@line 5845
  return;
 }
 $168 = HEAP32[$164 + 16 >> 2] | 0; //@line 5849
 $AsyncCtx11 = _emscripten_alloc_async_context(16, sp) | 0; //@line 5850
 FUNCTION_TABLE_vi[$168 & 1023]($160); //@line 5851
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 621; //@line 5854
  HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 5856
  HEAP32[$AsyncCtx11 + 8 >> 2] = $161; //@line 5858
  HEAP32[$AsyncCtx11 + 12 >> 2] = $160; //@line 5860
  sp = STACKTOP; //@line 5861
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 5864
 $174 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 5867
 $AsyncCtx14 = _emscripten_alloc_async_context(16, sp) | 0; //@line 5868
 $175 = FUNCTION_TABLE_i[$174 & 7]() | 0; //@line 5869
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 622; //@line 5872
  HEAP32[$AsyncCtx14 + 4 >> 2] = $161; //@line 5874
  HEAP32[$AsyncCtx14 + 8 >> 2] = $160; //@line 5876
  HEAP32[$AsyncCtx14 + 12 >> 2] = $0; //@line 5878
  sp = STACKTOP; //@line 5879
  return;
 }
 _emscripten_free_async_context($AsyncCtx14 | 0); //@line 5882
 $179 = HEAP32[$161 >> 2] | 0; //@line 5883
 if ($160 >>> 0 > $179 >>> 0) {
  if (!($175 >>> 0 >= $160 >>> 0 | $175 >>> 0 < $179 >>> 0)) {
   return;
  }
 } else {
  if (!($175 >>> 0 >= $160 >>> 0 & $175 >>> 0 < $179 >>> 0)) {
   return;
  }
 }
 $187 = HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] | 0; //@line 5902
 $AsyncCtx18 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5903
 FUNCTION_TABLE_v[$187 & 15](); //@line 5904
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 623; //@line 5907
  sp = STACKTOP; //@line 5908
  return;
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 5911
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$038 = 0, $$040 = 0, $101 = 0, $104 = 0, $11 = 0, $112 = 0, $115 = 0, $118 = 0, $122 = 0, $125 = 0, $136 = 0, $139 = 0, $142 = 0, $146 = 0, $149 = 0, $18 = 0, $21 = 0, $22 = 0, $29 = 0, $30 = 0, $33 = 0, $4 = 0, $45 = 0, $47 = 0, $51 = 0, $56 = 0, $58 = 0, $59 = 0, $6 = 0, $61 = 0, $62 = 0, $65 = 0, $7 = 0, $76 = 0, $79 = 0, $8 = 0, $93 = 0, $96 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx16 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx24 = 0, $AsyncCtx27 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 22424
 $4 = HEAP8[$1 + 1 >> 0] | 0; //@line 22426
 $6 = HEAP32[$1 + 4 >> 2] | 0; //@line 22428
 $7 = $0 + 4 | 0; //@line 22429
 $8 = HEAP32[$7 >> 2] | 0; //@line 22430
 $11 = HEAP32[(HEAP32[$8 >> 2] | 0) + 72 >> 2] | 0; //@line 22433
 $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 22434
 FUNCTION_TABLE_vi[$11 & 1023]($8); //@line 22435
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 531; //@line 22438
  HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 22440
  HEAP8[$AsyncCtx + 8 >> 0] = $4; //@line 22442
  HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 22444
  HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 22446
  HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 22448
  HEAP32[$AsyncCtx + 24 >> 2] = $6; //@line 22450
  sp = STACKTOP; //@line 22451
  return 0; //@line 22452
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 22454
 $18 = HEAP32[$7 >> 2] | 0; //@line 22455
 $21 = HEAP32[(HEAP32[$18 >> 2] | 0) + 40 >> 2] | 0; //@line 22458
 $AsyncCtx2 = _emscripten_alloc_async_context(28, sp) | 0; //@line 22459
 $22 = FUNCTION_TABLE_ii[$21 & 15]($18) | 0; //@line 22460
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 532; //@line 22463
  HEAP8[$AsyncCtx2 + 4 >> 0] = $4; //@line 22465
  HEAP32[$AsyncCtx2 + 8 >> 2] = $7; //@line 22467
  HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 22469
  HEAP32[$AsyncCtx2 + 16 >> 2] = $1; //@line 22471
  HEAP32[$AsyncCtx2 + 20 >> 2] = $0; //@line 22473
  HEAP32[$AsyncCtx2 + 24 >> 2] = $6; //@line 22475
  sp = STACKTOP; //@line 22476
  return 0; //@line 22477
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 22479
 $29 = $22 << 24 >> 24 == 0; //@line 22480
 $30 = HEAP32[$7 >> 2] | 0; //@line 22481
 $33 = HEAP32[(HEAP32[$30 >> 2] | 0) + 76 >> 2] | 0; //@line 22484
 $AsyncCtx5 = _emscripten_alloc_async_context(32, sp) | 0; //@line 22485
 FUNCTION_TABLE_vi[$33 & 1023]($30); //@line 22486
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 533; //@line 22489
  HEAP8[$AsyncCtx5 + 4 >> 0] = $4; //@line 22491
  HEAP32[$AsyncCtx5 + 8 >> 2] = $7; //@line 22493
  HEAP32[$AsyncCtx5 + 12 >> 2] = $2; //@line 22495
  HEAP8[$AsyncCtx5 + 16 >> 0] = $29 & 1; //@line 22498
  HEAP32[$AsyncCtx5 + 20 >> 2] = $1; //@line 22500
  HEAP32[$AsyncCtx5 + 24 >> 2] = $0; //@line 22502
  HEAP32[$AsyncCtx5 + 28 >> 2] = $6; //@line 22504
  sp = STACKTOP; //@line 22505
  return 0; //@line 22506
 }
 _emscripten_free_async_context($AsyncCtx5 | 0); //@line 22508
 if (!$29) {
  $$0 = 0; //@line 22510
  return $$0 | 0; //@line 22511
 }
 if (!(HEAP32[$1 + 20 >> 2] | 0)) {
  $45 = HEAP32[$0 + 112 >> 2] | 0; //@line 22518
  $47 = HEAPU8[$1 >> 0] | 0; //@line 22520
  $51 = HEAP32[$45 + ($47 * 12 | 0) + 4 >> 2] | 0; //@line 22524
  $$040 = ($51 | 0) == 0 ? HEAP32[$45 + ($47 * 12 | 0) >> 2] | 0 : $51; //@line 22527
 } else {
  $$040 = $6; //@line 22529
 }
 $56 = HEAP32[$0 + 96 >> 2] | 0; //@line 22534
 $58 = HEAP32[$0 + 104 >> 2] | 0; //@line 22536
 $59 = $4 & 255; //@line 22537
 $61 = HEAP8[(HEAP32[$0 + 88 >> 2] | 0) + $59 >> 0] | 0; //@line 22539
 $62 = HEAP32[$7 >> 2] | 0; //@line 22540
 $65 = HEAP32[(HEAP32[$62 >> 2] | 0) + 72 >> 2] | 0; //@line 22543
 $AsyncCtx9 = _emscripten_alloc_async_context(44, sp) | 0; //@line 22544
 FUNCTION_TABLE_vi[$65 & 1023]($62); //@line 22545
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 534; //@line 22548
  HEAP32[$AsyncCtx9 + 4 >> 2] = $7; //@line 22550
  HEAP32[$AsyncCtx9 + 8 >> 2] = $$040; //@line 22552
  HEAP8[$AsyncCtx9 + 12 >> 0] = $4; //@line 22554
  HEAP32[$AsyncCtx9 + 16 >> 2] = $0; //@line 22556
  HEAP32[$AsyncCtx9 + 20 >> 2] = $1; //@line 22558
  HEAP8[$AsyncCtx9 + 24 >> 0] = $61; //@line 22560
  HEAP32[$AsyncCtx9 + 28 >> 2] = $56; //@line 22562
  HEAP32[$AsyncCtx9 + 32 >> 2] = $58; //@line 22564
  HEAP32[$AsyncCtx9 + 36 >> 2] = $59; //@line 22566
  HEAP32[$AsyncCtx9 + 40 >> 2] = $2; //@line 22568
  sp = STACKTOP; //@line 22569
  return 0; //@line 22570
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 22572
 $76 = HEAP32[$7 >> 2] | 0; //@line 22573
 $79 = HEAP32[(HEAP32[$76 >> 2] | 0) + 32 >> 2] | 0; //@line 22576
 $AsyncCtx12 = _emscripten_alloc_async_context(40, sp) | 0; //@line 22577
 FUNCTION_TABLE_vii[$79 & 31]($76, $$040); //@line 22578
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 535; //@line 22581
  HEAP8[$AsyncCtx12 + 4 >> 0] = $4; //@line 22583
  HEAP32[$AsyncCtx12 + 8 >> 2] = $0; //@line 22585
  HEAP32[$AsyncCtx12 + 12 >> 2] = $7; //@line 22587
  HEAP32[$AsyncCtx12 + 16 >> 2] = $1; //@line 22589
  HEAP8[$AsyncCtx12 + 20 >> 0] = $61; //@line 22591
  HEAP32[$AsyncCtx12 + 24 >> 2] = $56; //@line 22593
  HEAP32[$AsyncCtx12 + 28 >> 2] = $58; //@line 22595
  HEAP32[$AsyncCtx12 + 32 >> 2] = $59; //@line 22597
  HEAP32[$AsyncCtx12 + 36 >> 2] = $2; //@line 22599
  sp = STACKTOP; //@line 22600
  return 0; //@line 22601
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 22603
 do {
  if ($4 << 24 >> 24 == 7) {
   if (!(HEAP8[$0 + 14 >> 0] | 0)) {
    label = 19; //@line 22611
   } else {
    $93 = HEAP32[$7 >> 2] | 0; //@line 22613
    $96 = HEAP32[(HEAP32[$93 >> 2] | 0) + 16 >> 2] | 0; //@line 22616
    $101 = HEAP32[$1 + 8 >> 2] & 65535; //@line 22621
    $104 = (HEAP8[$1 + 18 >> 0] | 0) != 0; //@line 22624
    $AsyncCtx16 = _emscripten_alloc_async_context(32, sp) | 0; //@line 22625
    FUNCTION_TABLE_viiiiiiiiiiiiiii[$96 & 1]($93, 0, 5e4, ($61 & 255) * 1e3 | 0, 0, 83333, 5, $101, 0, 0, 1, 0, 0, 0, $104); //@line 22626
    if (___async) {
     HEAP32[$AsyncCtx16 >> 2] = 536; //@line 22629
     HEAP32[$AsyncCtx16 + 4 >> 2] = $1; //@line 22631
     HEAP32[$AsyncCtx16 + 8 >> 2] = $56; //@line 22633
     HEAP32[$AsyncCtx16 + 12 >> 2] = $58; //@line 22635
     HEAP32[$AsyncCtx16 + 16 >> 2] = $59; //@line 22637
     HEAP32[$AsyncCtx16 + 20 >> 2] = $7; //@line 22639
     HEAP8[$AsyncCtx16 + 24 >> 0] = $61; //@line 22641
     HEAP32[$AsyncCtx16 + 28 >> 2] = $2; //@line 22643
     sp = STACKTOP; //@line 22644
     return 0; //@line 22645
    } else {
     _emscripten_free_async_context($AsyncCtx16 | 0); //@line 22647
     $$038 = 0; //@line 22648
     break;
    }
   }
  } else {
   label = 19; //@line 22653
  }
 } while (0);
 do {
  if ((label | 0) == 19) {
   $112 = HEAP32[$7 >> 2] | 0; //@line 22658
   $115 = HEAP32[(HEAP32[$112 >> 2] | 0) + 16 >> 2] | 0; //@line 22661
   $118 = HEAPU8[$1 + 2 >> 0] | 0; //@line 22664
   $122 = HEAP32[$1 + 8 >> 2] & 65535; //@line 22668
   $125 = (HEAP8[$1 + 18 >> 0] | 0) != 0; //@line 22671
   $AsyncCtx20 = _emscripten_alloc_async_context(32, sp) | 0; //@line 22672
   FUNCTION_TABLE_viiiiiiiiiiiiiii[$115 & 1]($112, 1, $118, $61 & 255, 1, 0, 8, $122, 0, 0, 0, 0, 0, 1, $125); //@line 22673
   if (___async) {
    HEAP32[$AsyncCtx20 >> 2] = 537; //@line 22676
    HEAP32[$AsyncCtx20 + 4 >> 2] = $1; //@line 22678
    HEAP32[$AsyncCtx20 + 8 >> 2] = $56; //@line 22680
    HEAP32[$AsyncCtx20 + 12 >> 2] = $58; //@line 22682
    HEAP32[$AsyncCtx20 + 16 >> 2] = $59; //@line 22684
    HEAP32[$AsyncCtx20 + 20 >> 2] = $7; //@line 22686
    HEAP8[$AsyncCtx20 + 24 >> 0] = $61; //@line 22688
    HEAP32[$AsyncCtx20 + 28 >> 2] = $2; //@line 22690
    sp = STACKTOP; //@line 22691
    return 0; //@line 22692
   } else {
    _emscripten_free_async_context($AsyncCtx20 | 0); //@line 22694
    $$038 = 1; //@line 22695
    break;
   }
  }
 } while (0);
 $136 = HEAP32[$7 >> 2] | 0; //@line 22706
 $139 = HEAP32[(HEAP32[$136 >> 2] | 0) + 44 >> 2] | 0; //@line 22709
 $142 = (HEAPU8[((HEAP8[$1 + 17 >> 0] | 0) == 0 ? $56 : $58) + $59 >> 0] | 0) + 13 & 255; //@line 22712
 $AsyncCtx24 = _emscripten_alloc_async_context(16, sp) | 0; //@line 22713
 FUNCTION_TABLE_viii[$139 & 7]($136, $$038, $142); //@line 22714
 if (___async) {
  HEAP32[$AsyncCtx24 >> 2] = 538; //@line 22717
  HEAP32[$AsyncCtx24 + 4 >> 2] = $7; //@line 22719
  HEAP8[$AsyncCtx24 + 8 >> 0] = $61; //@line 22721
  HEAP32[$AsyncCtx24 + 12 >> 2] = $2; //@line 22723
  sp = STACKTOP; //@line 22724
  return 0; //@line 22725
 }
 _emscripten_free_async_context($AsyncCtx24 | 0); //@line 22727
 $146 = HEAP32[$7 >> 2] | 0; //@line 22728
 $149 = HEAP32[(HEAP32[$146 >> 2] | 0) + 76 >> 2] | 0; //@line 22731
 $AsyncCtx27 = _emscripten_alloc_async_context(12, sp) | 0; //@line 22732
 FUNCTION_TABLE_vi[$149 & 1023]($146); //@line 22733
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 539; //@line 22736
  HEAP8[$AsyncCtx27 + 4 >> 0] = $61; //@line 22738
  HEAP32[$AsyncCtx27 + 8 >> 2] = $2; //@line 22740
  sp = STACKTOP; //@line 22741
  return 0; //@line 22742
 }
 _emscripten_free_async_context($AsyncCtx27 | 0); //@line 22744
 HEAP8[$2 >> 0] = $61; //@line 22745
 $$0 = 1; //@line 22746
 return $$0 | 0; //@line 22747
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 12593
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12595
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12597
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12599
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12601
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12603
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12605
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 12607
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 12609
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 12611
 $$pre = HEAP32[$2 >> 2] | 0; //@line 12612
 if ($$pre | 0) {
  $21 = HEAP32[$$pre + 4 >> 2] | 0; //@line 12616
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 12617
  FUNCTION_TABLE_vii[$21 & 31]($10, $12); //@line 12618
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 482; //@line 12621
   $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 12622
   HEAP32[$22 >> 2] = $2; //@line 12623
   $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 12624
   HEAP32[$23 >> 2] = $4; //@line 12625
   $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 12626
   HEAP32[$24 >> 2] = $6; //@line 12627
   $25 = $ReallocAsyncCtx2 + 16 | 0; //@line 12628
   HEAP32[$25 >> 2] = $8; //@line 12629
   $26 = $ReallocAsyncCtx2 + 20 | 0; //@line 12630
   HEAP32[$26 >> 2] = $12; //@line 12631
   $27 = $ReallocAsyncCtx2 + 24 | 0; //@line 12632
   HEAP32[$27 >> 2] = $10; //@line 12633
   $28 = $ReallocAsyncCtx2 + 28 | 0; //@line 12634
   HEAP32[$28 >> 2] = $14; //@line 12635
   $29 = $ReallocAsyncCtx2 + 32 | 0; //@line 12636
   HEAP32[$29 >> 2] = $16; //@line 12637
   $30 = $ReallocAsyncCtx2 + 36 | 0; //@line 12638
   HEAP32[$30 >> 2] = $18; //@line 12639
   sp = STACKTOP; //@line 12640
   return;
  }
  ___async_unwind = 0; //@line 12643
  HEAP32[$ReallocAsyncCtx2 >> 2] = 482; //@line 12644
  $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 12645
  HEAP32[$22 >> 2] = $2; //@line 12646
  $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 12647
  HEAP32[$23 >> 2] = $4; //@line 12648
  $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 12649
  HEAP32[$24 >> 2] = $6; //@line 12650
  $25 = $ReallocAsyncCtx2 + 16 | 0; //@line 12651
  HEAP32[$25 >> 2] = $8; //@line 12652
  $26 = $ReallocAsyncCtx2 + 20 | 0; //@line 12653
  HEAP32[$26 >> 2] = $12; //@line 12654
  $27 = $ReallocAsyncCtx2 + 24 | 0; //@line 12655
  HEAP32[$27 >> 2] = $10; //@line 12656
  $28 = $ReallocAsyncCtx2 + 28 | 0; //@line 12657
  HEAP32[$28 >> 2] = $14; //@line 12658
  $29 = $ReallocAsyncCtx2 + 32 | 0; //@line 12659
  HEAP32[$29 >> 2] = $16; //@line 12660
  $30 = $ReallocAsyncCtx2 + 36 | 0; //@line 12661
  HEAP32[$30 >> 2] = $18; //@line 12662
  sp = STACKTOP; //@line 12663
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 12666
 $31 = $14 + 12 | 0; //@line 12667
 HEAP32[$14 >> 2] = 7; //@line 12668
 HEAP32[$14 + 4 >> 2] = 0; //@line 12670
 HEAP32[$14 + 8 >> 2] = $8; //@line 12672
 HEAP32[$31 >> 2] = 924; //@line 12673
 $32 = $8 + 1244 | 0; //@line 12674
 if (($32 | 0) == ($14 | 0)) {
  $59 = HEAP32[233] | 0; //@line 12678
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(28) | 0; //@line 12679
  FUNCTION_TABLE_vi[$59 & 1023]($14); //@line 12680
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 486; //@line 12683
   $60 = $ReallocAsyncCtx6 + 4 | 0; //@line 12684
   HEAP32[$60 >> 2] = $6; //@line 12685
   $61 = $ReallocAsyncCtx6 + 8 | 0; //@line 12686
   HEAP32[$61 >> 2] = $8; //@line 12687
   $62 = $ReallocAsyncCtx6 + 12 | 0; //@line 12688
   HEAP32[$62 >> 2] = $10; //@line 12689
   $63 = $ReallocAsyncCtx6 + 16 | 0; //@line 12690
   HEAP32[$63 >> 2] = $14; //@line 12691
   $64 = $ReallocAsyncCtx6 + 20 | 0; //@line 12692
   HEAP32[$64 >> 2] = $16; //@line 12693
   $65 = $ReallocAsyncCtx6 + 24 | 0; //@line 12694
   HEAP32[$65 >> 2] = $18; //@line 12695
   sp = STACKTOP; //@line 12696
   return;
  }
  ___async_unwind = 0; //@line 12699
  HEAP32[$ReallocAsyncCtx6 >> 2] = 486; //@line 12700
  $60 = $ReallocAsyncCtx6 + 4 | 0; //@line 12701
  HEAP32[$60 >> 2] = $6; //@line 12702
  $61 = $ReallocAsyncCtx6 + 8 | 0; //@line 12703
  HEAP32[$61 >> 2] = $8; //@line 12704
  $62 = $ReallocAsyncCtx6 + 12 | 0; //@line 12705
  HEAP32[$62 >> 2] = $10; //@line 12706
  $63 = $ReallocAsyncCtx6 + 16 | 0; //@line 12707
  HEAP32[$63 >> 2] = $14; //@line 12708
  $64 = $ReallocAsyncCtx6 + 20 | 0; //@line 12709
  HEAP32[$64 >> 2] = $16; //@line 12710
  $65 = $ReallocAsyncCtx6 + 24 | 0; //@line 12711
  HEAP32[$65 >> 2] = $18; //@line 12712
  sp = STACKTOP; //@line 12713
  return;
 }
 $34 = $8 + 1256 | 0; //@line 12716
 $35 = HEAP32[$34 >> 2] | 0; //@line 12717
 if (!$35) {
  $49 = HEAP32[232] | 0; //@line 12721
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(36) | 0; //@line 12722
  FUNCTION_TABLE_vii[$49 & 31]($32, $14); //@line 12723
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 485; //@line 12726
   $50 = $ReallocAsyncCtx5 + 4 | 0; //@line 12727
   HEAP32[$50 >> 2] = $31; //@line 12728
   $51 = $ReallocAsyncCtx5 + 8 | 0; //@line 12729
   HEAP32[$51 >> 2] = $34; //@line 12730
   $52 = $ReallocAsyncCtx5 + 12 | 0; //@line 12731
   HEAP32[$52 >> 2] = $6; //@line 12732
   $53 = $ReallocAsyncCtx5 + 16 | 0; //@line 12733
   HEAP32[$53 >> 2] = $8; //@line 12734
   $54 = $ReallocAsyncCtx5 + 20 | 0; //@line 12735
   HEAP32[$54 >> 2] = $10; //@line 12736
   $55 = $ReallocAsyncCtx5 + 24 | 0; //@line 12737
   HEAP32[$55 >> 2] = $14; //@line 12738
   $56 = $ReallocAsyncCtx5 + 28 | 0; //@line 12739
   HEAP32[$56 >> 2] = $16; //@line 12740
   $57 = $ReallocAsyncCtx5 + 32 | 0; //@line 12741
   HEAP32[$57 >> 2] = $18; //@line 12742
   sp = STACKTOP; //@line 12743
   return;
  }
  ___async_unwind = 0; //@line 12746
  HEAP32[$ReallocAsyncCtx5 >> 2] = 485; //@line 12747
  $50 = $ReallocAsyncCtx5 + 4 | 0; //@line 12748
  HEAP32[$50 >> 2] = $31; //@line 12749
  $51 = $ReallocAsyncCtx5 + 8 | 0; //@line 12750
  HEAP32[$51 >> 2] = $34; //@line 12751
  $52 = $ReallocAsyncCtx5 + 12 | 0; //@line 12752
  HEAP32[$52 >> 2] = $6; //@line 12753
  $53 = $ReallocAsyncCtx5 + 16 | 0; //@line 12754
  HEAP32[$53 >> 2] = $8; //@line 12755
  $54 = $ReallocAsyncCtx5 + 20 | 0; //@line 12756
  HEAP32[$54 >> 2] = $10; //@line 12757
  $55 = $ReallocAsyncCtx5 + 24 | 0; //@line 12758
  HEAP32[$55 >> 2] = $14; //@line 12759
  $56 = $ReallocAsyncCtx5 + 28 | 0; //@line 12760
  HEAP32[$56 >> 2] = $16; //@line 12761
  $57 = $ReallocAsyncCtx5 + 32 | 0; //@line 12762
  HEAP32[$57 >> 2] = $18; //@line 12763
  sp = STACKTOP; //@line 12764
  return;
 } else {
  $38 = HEAP32[$35 + 8 >> 2] | 0; //@line 12768
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(40) | 0; //@line 12769
  FUNCTION_TABLE_vi[$38 & 1023]($32); //@line 12770
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 484; //@line 12773
   $39 = $ReallocAsyncCtx4 + 4 | 0; //@line 12774
   HEAP32[$39 >> 2] = $31; //@line 12775
   $40 = $ReallocAsyncCtx4 + 8 | 0; //@line 12776
   HEAP32[$40 >> 2] = $34; //@line 12777
   $41 = $ReallocAsyncCtx4 + 12 | 0; //@line 12778
   HEAP32[$41 >> 2] = $6; //@line 12779
   $42 = $ReallocAsyncCtx4 + 16 | 0; //@line 12780
   HEAP32[$42 >> 2] = $8; //@line 12781
   $43 = $ReallocAsyncCtx4 + 20 | 0; //@line 12782
   HEAP32[$43 >> 2] = $10; //@line 12783
   $44 = $ReallocAsyncCtx4 + 24 | 0; //@line 12784
   HEAP32[$44 >> 2] = $32; //@line 12785
   $45 = $ReallocAsyncCtx4 + 28 | 0; //@line 12786
   HEAP32[$45 >> 2] = $14; //@line 12787
   $46 = $ReallocAsyncCtx4 + 32 | 0; //@line 12788
   HEAP32[$46 >> 2] = $16; //@line 12789
   $47 = $ReallocAsyncCtx4 + 36 | 0; //@line 12790
   HEAP32[$47 >> 2] = $18; //@line 12791
   sp = STACKTOP; //@line 12792
   return;
  }
  ___async_unwind = 0; //@line 12795
  HEAP32[$ReallocAsyncCtx4 >> 2] = 484; //@line 12796
  $39 = $ReallocAsyncCtx4 + 4 | 0; //@line 12797
  HEAP32[$39 >> 2] = $31; //@line 12798
  $40 = $ReallocAsyncCtx4 + 8 | 0; //@line 12799
  HEAP32[$40 >> 2] = $34; //@line 12800
  $41 = $ReallocAsyncCtx4 + 12 | 0; //@line 12801
  HEAP32[$41 >> 2] = $6; //@line 12802
  $42 = $ReallocAsyncCtx4 + 16 | 0; //@line 12803
  HEAP32[$42 >> 2] = $8; //@line 12804
  $43 = $ReallocAsyncCtx4 + 20 | 0; //@line 12805
  HEAP32[$43 >> 2] = $10; //@line 12806
  $44 = $ReallocAsyncCtx4 + 24 | 0; //@line 12807
  HEAP32[$44 >> 2] = $32; //@line 12808
  $45 = $ReallocAsyncCtx4 + 28 | 0; //@line 12809
  HEAP32[$45 >> 2] = $14; //@line 12810
  $46 = $ReallocAsyncCtx4 + 32 | 0; //@line 12811
  HEAP32[$46 >> 2] = $16; //@line 12812
  $47 = $ReallocAsyncCtx4 + 36 | 0; //@line 12813
  HEAP32[$47 >> 2] = $18; //@line 12814
  sp = STACKTOP; //@line 12815
  return;
 }
}
function __ZN7LoRaMac16on_radio_tx_doneEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $$pre$phiZ2D = 0, $$sroa$0$0$copyload = 0, $1 = 0, $10 = 0, $103 = 0, $106 = 0, $117 = 0, $19 = 0, $2 = 0, $20 = 0, $4 = 0, $42 = 0, $45 = 0, $55 = 0, $57 = 0, $58 = 0, $7 = 0, $71 = 0, $73 = 0, $76 = 0, $85 = 0, $86 = 0, $89 = 0, $97 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx16 = 0, $AsyncCtx20 = 0, $AsyncCtx24 = 0, $AsyncCtx4 = 0, $AsyncCtx8 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 10076
 STACKTOP = STACKTOP + 32 | 0; //@line 10077
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 10077
 $$byval_copy = sp + 8 | 0; //@line 10078
 $vararg_buffer = sp; //@line 10079
 $1 = sp + 16 | 0; //@line 10080
 _mbed_tracef(16, 13728, 13733, $vararg_buffer); //@line 10081
 $2 = $0 + 356 | 0; //@line 10082
 $4 = __ZN18LoRaWANTimeHandler16get_current_timeEv(HEAP32[$2 >> 2] | 0) | 0; //@line 10084
 $$sroa$0$0$copyload = HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) >> 2] | 0; //@line 10087
 $7 = $0 + 360 | 0; //@line 10088
 do {
  if ((HEAP32[$7 >> 2] | 0) == 2) {
   _mbed_tracef(16, 13728, 13747, $$byval_copy); //@line 10093
   $19 = HEAP32[$0 + 1328 >> 2] | 0; //@line 10095
   HEAP32[$vararg_buffer >> 2] = 293; //@line 10096
   HEAP32[$vararg_buffer + 4 >> 2] = 0; //@line 10098
   $AsyncCtx20 = _emscripten_alloc_async_context(36, sp) | 0; //@line 10099
   HEAP32[$$byval_copy >> 2] = HEAP32[$vararg_buffer >> 2]; //@line 10100
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$vararg_buffer + 4 >> 2]; //@line 10100
   $20 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($19, $0, $$byval_copy) | 0; //@line 10101
   if (___async) {
    HEAP32[$AsyncCtx20 >> 2] = 294; //@line 10104
    HEAP32[$AsyncCtx20 + 4 >> 2] = $1; //@line 10106
    HEAP32[$AsyncCtx20 + 8 >> 2] = $0; //@line 10108
    HEAP32[$AsyncCtx20 + 12 >> 2] = $$sroa$0$0$copyload; //@line 10110
    HEAP32[$AsyncCtx20 + 16 >> 2] = $1; //@line 10112
    HEAP32[$AsyncCtx20 + 20 >> 2] = $4; //@line 10114
    HEAP32[$AsyncCtx20 + 24 >> 2] = $7; //@line 10116
    HEAP32[$AsyncCtx20 + 28 >> 2] = $2; //@line 10118
    HEAP32[$AsyncCtx20 + 32 >> 2] = $vararg_buffer; //@line 10120
    sp = STACKTOP; //@line 10121
    STACKTOP = sp; //@line 10122
    return;
   }
   _emscripten_free_async_context($AsyncCtx20 | 0); //@line 10124
   do {
    if (!$20) {
     $AsyncCtx24 = _emscripten_alloc_async_context(36, sp) | 0; //@line 10128
     _mbed_assert_internal(13612, 13621, 215); //@line 10129
     if (___async) {
      HEAP32[$AsyncCtx24 >> 2] = 295; //@line 10132
      HEAP32[$AsyncCtx24 + 4 >> 2] = $1; //@line 10134
      HEAP32[$AsyncCtx24 + 8 >> 2] = $0; //@line 10136
      HEAP32[$AsyncCtx24 + 12 >> 2] = $$sroa$0$0$copyload; //@line 10138
      HEAP32[$AsyncCtx24 + 16 >> 2] = $1; //@line 10140
      HEAP32[$AsyncCtx24 + 20 >> 2] = $4; //@line 10142
      HEAP32[$AsyncCtx24 + 24 >> 2] = $7; //@line 10144
      HEAP32[$AsyncCtx24 + 28 >> 2] = $2; //@line 10146
      HEAP32[$AsyncCtx24 + 32 >> 2] = $vararg_buffer; //@line 10148
      sp = STACKTOP; //@line 10149
      STACKTOP = sp; //@line 10150
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx24 | 0); //@line 10152
      break;
     }
    }
   } while (0);
   HEAP32[$0 + 364 >> 2] = 2; //@line 10158
  } else {
   $10 = HEAP32[$0 >> 2] | 0; //@line 10160
   $AsyncCtx16 = _emscripten_alloc_async_context(32, sp) | 0; //@line 10161
   __ZN7LoRaPHY18put_radio_to_sleepEv($10); //@line 10162
   if (___async) {
    HEAP32[$AsyncCtx16 >> 2] = 292; //@line 10165
    HEAP32[$AsyncCtx16 + 4 >> 2] = $1; //@line 10167
    HEAP32[$AsyncCtx16 + 8 >> 2] = $0; //@line 10169
    HEAP32[$AsyncCtx16 + 12 >> 2] = $$sroa$0$0$copyload; //@line 10171
    HEAP32[$AsyncCtx16 + 16 >> 2] = $1; //@line 10173
    HEAP32[$AsyncCtx16 + 20 >> 2] = $4; //@line 10175
    HEAP32[$AsyncCtx16 + 24 >> 2] = $7; //@line 10177
    HEAP32[$AsyncCtx16 + 28 >> 2] = $2; //@line 10179
    sp = STACKTOP; //@line 10180
    STACKTOP = sp; //@line 10181
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx16 | 0); //@line 10183
    break;
   }
  }
 } while (0);
 do {
  if (!(HEAP8[$0 + 371 >> 0] | 0)) {
   HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($0 + 288 | 0) | 0) + 4 >> 2] = 0; //@line 10196
   $85 = $0 + 944 | 0; //@line 10197
   $86 = HEAP8[$85 >> 0] | 0; //@line 10198
   if (!($86 << 24 >> 24)) {
    HEAP8[$85 >> 0] = 1; //@line 10201
    $89 = 1; //@line 10202
   } else {
    $89 = $86; //@line 10204
   }
   HEAP8[$85 >> 0] = $89 | 32; //@line 10207
  } else {
   $42 = HEAP32[$2 >> 2] | 0; //@line 10209
   $45 = HEAP32[$0 + 972 >> 2] | 0; //@line 10212
   $AsyncCtx12 = _emscripten_alloc_async_context(32, sp) | 0; //@line 10213
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($42, $0 + 1036 | 0, $45); //@line 10214
   if (___async) {
    HEAP32[$AsyncCtx12 >> 2] = 296; //@line 10217
    HEAP32[$AsyncCtx12 + 4 >> 2] = $7; //@line 10219
    HEAP32[$AsyncCtx12 + 8 >> 2] = $0; //@line 10221
    HEAP32[$AsyncCtx12 + 12 >> 2] = $2; //@line 10223
    HEAP32[$AsyncCtx12 + 16 >> 2] = $$sroa$0$0$copyload; //@line 10225
    HEAP32[$AsyncCtx12 + 20 >> 2] = $1; //@line 10227
    HEAP32[$AsyncCtx12 + 24 >> 2] = $1; //@line 10229
    HEAP32[$AsyncCtx12 + 28 >> 2] = $4; //@line 10231
    sp = STACKTOP; //@line 10232
    STACKTOP = sp; //@line 10233
    return;
   }
   _emscripten_free_async_context($AsyncCtx12 | 0); //@line 10235
   if ((HEAP32[$7 >> 2] | 0) == 2) {
    $$pre$phiZ2D = $0 + 976 | 0; //@line 10240
   } else {
    $55 = HEAP32[$2 >> 2] | 0; //@line 10242
    $57 = $0 + 976 | 0; //@line 10244
    $58 = HEAP32[$57 >> 2] | 0; //@line 10245
    $AsyncCtx8 = _emscripten_alloc_async_context(36, sp) | 0; //@line 10246
    __ZN18LoRaWANTimeHandler5startER13timer_event_tj($55, $0 + 1056 | 0, $58); //@line 10247
    if (___async) {
     HEAP32[$AsyncCtx8 >> 2] = 297; //@line 10250
     HEAP32[$AsyncCtx8 + 4 >> 2] = $7; //@line 10252
     HEAP32[$AsyncCtx8 + 8 >> 2] = $57; //@line 10254
     HEAP32[$AsyncCtx8 + 12 >> 2] = $2; //@line 10256
     HEAP32[$AsyncCtx8 + 16 >> 2] = $0; //@line 10258
     HEAP32[$AsyncCtx8 + 20 >> 2] = $$sroa$0$0$copyload; //@line 10260
     HEAP32[$AsyncCtx8 + 24 >> 2] = $1; //@line 10262
     HEAP32[$AsyncCtx8 + 28 >> 2] = $1; //@line 10264
     HEAP32[$AsyncCtx8 + 32 >> 2] = $4; //@line 10266
     sp = STACKTOP; //@line 10267
     STACKTOP = sp; //@line 10268
     return;
    }
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 10270
    if ((HEAP32[$7 >> 2] | 0) == 2) {
     $$pre$phiZ2D = $57; //@line 10274
    } else {
     if (!(HEAP8[$0 + 373 >> 0] | 0)) {
      break;
     } else {
      $$pre$phiZ2D = $57; //@line 10282
     }
    }
   }
   $71 = HEAP32[$2 >> 2] | 0; //@line 10286
   $73 = HEAP32[$$pre$phiZ2D >> 2] | 0; //@line 10288
   $76 = (__ZN7LoRaPHY15get_ack_timeoutEv(HEAP32[$0 >> 2] | 0) | 0) + $73 | 0; //@line 10291
   $AsyncCtx4 = _emscripten_alloc_async_context(24, sp) | 0; //@line 10292
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($71, $0 + 1076 | 0, $76); //@line 10293
   if (___async) {
    HEAP32[$AsyncCtx4 >> 2] = 298; //@line 10296
    HEAP32[$AsyncCtx4 + 4 >> 2] = $0; //@line 10298
    HEAP32[$AsyncCtx4 + 8 >> 2] = $$sroa$0$0$copyload; //@line 10300
    HEAP32[$AsyncCtx4 + 12 >> 2] = $1; //@line 10302
    HEAP32[$AsyncCtx4 + 16 >> 2] = $1; //@line 10304
    HEAP32[$AsyncCtx4 + 20 >> 2] = $4; //@line 10306
    sp = STACKTOP; //@line 10307
    STACKTOP = sp; //@line 10308
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx4 | 0); //@line 10310
    break;
   }
  }
 } while (0);
 HEAP8[$0 + 376 >> 0] = ($$sroa$0$0$copyload | 0) == 0 & (HEAP8[$0 + 944 >> 0] & 8) != 0 & 1; //@line 10323
 $97 = HEAP8[$0 + 378 >> 0] | 0; //@line 10325
 HEAP8[$0 + 379 >> 0] = $97; //@line 10327
 HEAP8[$1 >> 0] = $97; //@line 10328
 HEAP8[$1 + 1 >> 0] = HEAP8[$0 + 372 >> 0] | 0; //@line 10332
 HEAP32[$1 + 4 >> 2] = $4; //@line 10334
 $103 = HEAP32[$0 >> 2] | 0; //@line 10335
 $106 = HEAP32[(HEAP32[$103 >> 2] | 0) + 12 >> 2] | 0; //@line 10338
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 10339
 FUNCTION_TABLE_vii[$106 & 31]($103, $1); //@line 10340
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 299; //@line 10343
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 10345
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 10347
  HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 10349
  sp = STACKTOP; //@line 10350
  STACKTOP = sp; //@line 10351
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 10353
 HEAP32[$0 + 980 >> 2] = $4; //@line 10355
 if (HEAP8[$0 + 373 >> 0] | 0) {
  STACKTOP = sp; //@line 10360
  return;
 }
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($0 + 288 | 0) | 0) + 4 >> 2] = 0; //@line 10365
 $117 = $0 + 380 | 0; //@line 10366
 HEAP8[$117 >> 0] = (HEAP8[$117 >> 0] | 0) + 1 << 24 >> 24; //@line 10369
 STACKTOP = sp; //@line 10370
 return;
}
function _main() {
 var $$0 = 0, $$1 = 0, $$pr = 0, $$pre$i$i = 0, $0 = 0, $1 = 0, $26 = 0, $30 = 0, $37 = 0, $40 = 0, $46 = 0, $50 = 0, $51 = 0, $54 = 0, $62 = 0, $63 = 0, $72 = 0, $83 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx21 = 0, $AsyncCtx25 = 0, $AsyncCtx29 = 0, $AsyncCtx32 = 0, $AsyncCtx36 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 7119
 STACKTOP = STACKTOP + 48 | 0; //@line 7120
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 7120
 $vararg_buffer = sp; //@line 7121
 $0 = sp + 8 | 0; //@line 7122
 $1 = sp + 24 | 0; //@line 7123
 if (!((HEAP8[24534] | HEAP8[24533] | HEAP8[24535] | HEAP8[24536] | HEAP8[24537] | HEAP8[24538] | HEAP8[24539] | HEAP8[24540]) << 24 >> 24)) {
  $AsyncCtx29 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7141
  _puts(15919) | 0; //@line 7142
  if (___async) {
   HEAP32[$AsyncCtx29 >> 2] = 663; //@line 7145
   sp = STACKTOP; //@line 7146
   STACKTOP = sp; //@line 7147
   return 0; //@line 7147
  }
  _emscripten_free_async_context($AsyncCtx29 | 0); //@line 7149
  $$1 = -1; //@line 7150
  STACKTOP = sp; //@line 7151
  return $$1 | 0; //@line 7151
 }
 $AsyncCtx25 = _emscripten_alloc_async_context(24, sp) | 0; //@line 7153
 _puts(15955) | 0; //@line 7154
 if (___async) {
  HEAP32[$AsyncCtx25 >> 2] = 664; //@line 7157
  HEAP32[$AsyncCtx25 + 4 >> 2] = $1; //@line 7159
  HEAP32[$AsyncCtx25 + 8 >> 2] = $vararg_buffer; //@line 7161
  HEAP32[$AsyncCtx25 + 12 >> 2] = $vararg_buffer; //@line 7163
  HEAP32[$AsyncCtx25 + 16 >> 2] = $1; //@line 7165
  HEAP32[$AsyncCtx25 + 20 >> 2] = $0; //@line 7167
  sp = STACKTOP; //@line 7168
  STACKTOP = sp; //@line 7169
  return 0; //@line 7169
 }
 _emscripten_free_async_context($AsyncCtx25 | 0); //@line 7171
 _mbed_trace_init() | 0; //@line 7172
 if (__ZN16LoRaWANInterface10initializeEPN6events10EventQueueE(23828, 23624) | 0) {
  $AsyncCtx21 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7176
  _puts(16022) | 0; //@line 7177
  if (___async) {
   HEAP32[$AsyncCtx21 >> 2] = 665; //@line 7180
   sp = STACKTOP; //@line 7181
   STACKTOP = sp; //@line 7182
   return 0; //@line 7182
  }
  _emscripten_free_async_context($AsyncCtx21 | 0); //@line 7184
  $$1 = -1; //@line 7185
  STACKTOP = sp; //@line 7186
  return $$1 | 0; //@line 7186
 }
 $26 = $0 + 4 | 0; //@line 7189
 HEAP32[$26 >> 2] = 0; //@line 7191
 HEAP32[$26 + 4 >> 2] = 0; //@line 7194
 HEAP32[$0 >> 2] = 7; //@line 7195
 $30 = $0 + 12 | 0; //@line 7196
 HEAP32[$30 >> 2] = 10184; //@line 7197
 $AsyncCtx36 = _emscripten_alloc_async_context(28, sp) | 0; //@line 7198
 __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE(23552, $0); //@line 7199
 if (___async) {
  HEAP32[$AsyncCtx36 >> 2] = 666; //@line 7202
  HEAP32[$AsyncCtx36 + 4 >> 2] = $1; //@line 7204
  HEAP32[$AsyncCtx36 + 8 >> 2] = $vararg_buffer; //@line 7206
  HEAP32[$AsyncCtx36 + 12 >> 2] = $vararg_buffer; //@line 7208
  HEAP32[$AsyncCtx36 + 16 >> 2] = $30; //@line 7210
  HEAP32[$AsyncCtx36 + 20 >> 2] = $1; //@line 7212
  HEAP32[$AsyncCtx36 + 24 >> 2] = $0; //@line 7214
  sp = STACKTOP; //@line 7215
  STACKTOP = sp; //@line 7216
  return 0; //@line 7216
 }
 _emscripten_free_async_context($AsyncCtx36 | 0); //@line 7218
 $37 = HEAP32[$30 >> 2] | 0; //@line 7219
 do {
  if ($37 | 0) {
   $40 = HEAP32[$37 + 8 >> 2] | 0; //@line 7224
   $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 7225
   FUNCTION_TABLE_vi[$40 & 1023]($0); //@line 7226
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 667; //@line 7229
    HEAP32[$AsyncCtx + 4 >> 2] = $vararg_buffer; //@line 7231
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 7233
    HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 7235
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 7237
    sp = STACKTOP; //@line 7238
    STACKTOP = sp; //@line 7239
    return 0; //@line 7239
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 7241
    break;
   }
  }
 } while (0);
 $46 = $1 + 4 | 0; //@line 7247
 HEAP32[$46 >> 2] = 0; //@line 7249
 HEAP32[$46 + 4 >> 2] = 0; //@line 7252
 HEAP32[$1 >> 2] = 668; //@line 7253
 $50 = $1 + 12 | 0; //@line 7254
 HEAP32[$50 >> 2] = 10204; //@line 7255
 $51 = HEAP32[5962] | 0; //@line 7256
 if (!$51) {
  $62 = 10204; //@line 7259
  label = 22; //@line 7260
 } else {
  $54 = HEAP32[$51 + 8 >> 2] | 0; //@line 7263
  $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 7264
  FUNCTION_TABLE_vi[$54 & 1023](23836); //@line 7265
  if (___async) {
   HEAP32[$AsyncCtx2 >> 2] = 669; //@line 7268
   HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 7270
   HEAP32[$AsyncCtx2 + 8 >> 2] = $vararg_buffer; //@line 7272
   HEAP32[$AsyncCtx2 + 12 >> 2] = $vararg_buffer; //@line 7274
   HEAP32[$AsyncCtx2 + 16 >> 2] = $1; //@line 7276
   HEAP32[$AsyncCtx2 + 20 >> 2] = $50; //@line 7278
   sp = STACKTOP; //@line 7279
   STACKTOP = sp; //@line 7280
   return 0; //@line 7280
  }
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7282
  $$pr = HEAP32[$50 >> 2] | 0; //@line 7283
  if (!$$pr) {
   HEAP32[5962] = 0; //@line 7286
  } else {
   $62 = $$pr; //@line 7288
   label = 22; //@line 7289
  }
 }
 do {
  if ((label | 0) == 22) {
   $63 = HEAP32[$62 + 4 >> 2] | 0; //@line 7295
   $AsyncCtx5 = _emscripten_alloc_async_context(24, sp) | 0; //@line 7296
   FUNCTION_TABLE_vii[$63 & 31](23836, $1); //@line 7297
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 670; //@line 7300
    HEAP32[$AsyncCtx5 + 4 >> 2] = $1; //@line 7302
    HEAP32[$AsyncCtx5 + 8 >> 2] = $vararg_buffer; //@line 7304
    HEAP32[$AsyncCtx5 + 12 >> 2] = $vararg_buffer; //@line 7306
    HEAP32[$AsyncCtx5 + 16 >> 2] = $1; //@line 7308
    HEAP32[$AsyncCtx5 + 20 >> 2] = $50; //@line 7310
    sp = STACKTOP; //@line 7311
    STACKTOP = sp; //@line 7312
    return 0; //@line 7312
   }
   _emscripten_free_async_context($AsyncCtx5 | 0); //@line 7314
   $$pre$i$i = HEAP32[$50 >> 2] | 0; //@line 7315
   HEAP32[5962] = $$pre$i$i; //@line 7316
   if ($$pre$i$i | 0) {
    $72 = HEAP32[$$pre$i$i + 8 >> 2] | 0; //@line 7321
    $AsyncCtx9 = _emscripten_alloc_async_context(20, sp) | 0; //@line 7322
    FUNCTION_TABLE_vi[$72 & 1023]($1); //@line 7323
    if (___async) {
     HEAP32[$AsyncCtx9 >> 2] = 671; //@line 7326
     HEAP32[$AsyncCtx9 + 4 >> 2] = $1; //@line 7328
     HEAP32[$AsyncCtx9 + 8 >> 2] = $1; //@line 7330
     HEAP32[$AsyncCtx9 + 12 >> 2] = $vararg_buffer; //@line 7332
     HEAP32[$AsyncCtx9 + 16 >> 2] = $vararg_buffer; //@line 7334
     sp = STACKTOP; //@line 7335
     STACKTOP = sp; //@line 7336
     return 0; //@line 7336
    } else {
     _emscripten_free_async_context($AsyncCtx9 | 0); //@line 7338
     break;
    }
   }
  }
 } while (0);
 __ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t(23828, 23836) | 0; //@line 7344
 if (__ZN16LoRaWANInterface25disable_adaptive_datarateEv(23828) | 0) {
  $AsyncCtx17 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7348
  _puts(16050) | 0; //@line 7349
  if (___async) {
   HEAP32[$AsyncCtx17 >> 2] = 672; //@line 7352
   sp = STACKTOP; //@line 7353
   STACKTOP = sp; //@line 7354
   return 0; //@line 7354
  }
  _emscripten_free_async_context($AsyncCtx17 | 0); //@line 7356
  $$1 = -1; //@line 7357
  STACKTOP = sp; //@line 7358
  return $$1 | 0; //@line 7358
 }
 __ZN16LoRaWANInterface12set_datarateEh(23828, 5) | 0; //@line 7360
 HEAP8[$1 >> 0] = 0; //@line 7361
 HEAP32[$1 + 4 >> 2] = 24533; //@line 7363
 HEAP32[$1 + 8 >> 2] = 24541; //@line 7365
 HEAP32[$1 + 12 >> 2] = 24549; //@line 7367
 HEAP8[$1 + 16 >> 0] = 3; //@line 7369
 $83 = __ZN16LoRaWANInterface7connectERK15lorawan_connect(23828, $1) | 0; //@line 7370
 L50 : do {
  switch ($83 | 0) {
  case 0:
  case -1016:
   {
    $AsyncCtx13 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7374
    _puts(16113) | 0; //@line 7375
    if (___async) {
     HEAP32[$AsyncCtx13 >> 2] = 673; //@line 7378
     HEAP32[$AsyncCtx13 + 4 >> 2] = $1; //@line 7380
     sp = STACKTOP; //@line 7381
     STACKTOP = sp; //@line 7382
     return 0; //@line 7382
    }
    _emscripten_free_async_context($AsyncCtx13 | 0); //@line 7384
    $AsyncCtx32 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7385
    __ZN6events10EventQueue8dispatchEi(23624, -1); //@line 7386
    if (___async) {
     HEAP32[$AsyncCtx32 >> 2] = 674; //@line 7389
     HEAP32[$AsyncCtx32 + 4 >> 2] = $1; //@line 7391
     sp = STACKTOP; //@line 7392
     STACKTOP = sp; //@line 7393
     return 0; //@line 7393
    } else {
     _emscripten_free_async_context($AsyncCtx32 | 0); //@line 7395
     $$0 = 0; //@line 7396
     break L50;
    }
    break;
   }
  default:
   {
    HEAP32[$vararg_buffer >> 2] = $83; //@line 7402
    _printf(16084, $vararg_buffer) | 0; //@line 7403
    $$0 = -1; //@line 7404
   }
  }
 } while (0);
 $$1 = $$0; //@line 7408
 STACKTOP = sp; //@line 7409
 return $$1 | 0; //@line 7409
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_309($0) {
 $0 = $0 | 0;
 var $$pre$i$i = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 12825
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12831
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12833
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12835
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12837
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 12839
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 12841
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 12843
 $$pre$i$i = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 12844
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = $$pre$i$i; //@line 12846
 if ($$pre$i$i | 0) {
  $22 = HEAP32[$$pre$i$i + 8 >> 2] | 0; //@line 12850
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 12851
  FUNCTION_TABLE_vi[$22 & 1023]($10); //@line 12852
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 483; //@line 12855
   $23 = $ReallocAsyncCtx3 + 4 | 0; //@line 12856
   HEAP32[$23 >> 2] = $6; //@line 12857
   $24 = $ReallocAsyncCtx3 + 8 | 0; //@line 12858
   HEAP32[$24 >> 2] = $8; //@line 12859
   $25 = $ReallocAsyncCtx3 + 12 | 0; //@line 12860
   HEAP32[$25 >> 2] = $12; //@line 12861
   $26 = $ReallocAsyncCtx3 + 16 | 0; //@line 12862
   HEAP32[$26 >> 2] = $10; //@line 12863
   $27 = $ReallocAsyncCtx3 + 20 | 0; //@line 12864
   HEAP32[$27 >> 2] = $14; //@line 12865
   $28 = $ReallocAsyncCtx3 + 24 | 0; //@line 12866
   HEAP32[$28 >> 2] = $16; //@line 12867
   $29 = $ReallocAsyncCtx3 + 28 | 0; //@line 12868
   HEAP32[$29 >> 2] = $18; //@line 12869
   sp = STACKTOP; //@line 12870
   return;
  }
  ___async_unwind = 0; //@line 12873
  HEAP32[$ReallocAsyncCtx3 >> 2] = 483; //@line 12874
  $23 = $ReallocAsyncCtx3 + 4 | 0; //@line 12875
  HEAP32[$23 >> 2] = $6; //@line 12876
  $24 = $ReallocAsyncCtx3 + 8 | 0; //@line 12877
  HEAP32[$24 >> 2] = $8; //@line 12878
  $25 = $ReallocAsyncCtx3 + 12 | 0; //@line 12879
  HEAP32[$25 >> 2] = $12; //@line 12880
  $26 = $ReallocAsyncCtx3 + 16 | 0; //@line 12881
  HEAP32[$26 >> 2] = $10; //@line 12882
  $27 = $ReallocAsyncCtx3 + 20 | 0; //@line 12883
  HEAP32[$27 >> 2] = $14; //@line 12884
  $28 = $ReallocAsyncCtx3 + 24 | 0; //@line 12885
  HEAP32[$28 >> 2] = $16; //@line 12886
  $29 = $ReallocAsyncCtx3 + 28 | 0; //@line 12887
  HEAP32[$29 >> 2] = $18; //@line 12888
  sp = STACKTOP; //@line 12889
  return;
 }
 $30 = $14 + 12 | 0; //@line 12892
 HEAP32[$14 >> 2] = 7; //@line 12893
 HEAP32[$14 + 4 >> 2] = 0; //@line 12895
 HEAP32[$14 + 8 >> 2] = $8; //@line 12897
 HEAP32[$30 >> 2] = 924; //@line 12898
 $31 = $8 + 1244 | 0; //@line 12899
 if (($31 | 0) == ($14 | 0)) {
  $58 = HEAP32[233] | 0; //@line 12903
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(28) | 0; //@line 12904
  FUNCTION_TABLE_vi[$58 & 1023]($14); //@line 12905
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 486; //@line 12908
   $59 = $ReallocAsyncCtx6 + 4 | 0; //@line 12909
   HEAP32[$59 >> 2] = $6; //@line 12910
   $60 = $ReallocAsyncCtx6 + 8 | 0; //@line 12911
   HEAP32[$60 >> 2] = $8; //@line 12912
   $61 = $ReallocAsyncCtx6 + 12 | 0; //@line 12913
   HEAP32[$61 >> 2] = $12; //@line 12914
   $62 = $ReallocAsyncCtx6 + 16 | 0; //@line 12915
   HEAP32[$62 >> 2] = $14; //@line 12916
   $63 = $ReallocAsyncCtx6 + 20 | 0; //@line 12917
   HEAP32[$63 >> 2] = $16; //@line 12918
   $64 = $ReallocAsyncCtx6 + 24 | 0; //@line 12919
   HEAP32[$64 >> 2] = $18; //@line 12920
   sp = STACKTOP; //@line 12921
   return;
  }
  ___async_unwind = 0; //@line 12924
  HEAP32[$ReallocAsyncCtx6 >> 2] = 486; //@line 12925
  $59 = $ReallocAsyncCtx6 + 4 | 0; //@line 12926
  HEAP32[$59 >> 2] = $6; //@line 12927
  $60 = $ReallocAsyncCtx6 + 8 | 0; //@line 12928
  HEAP32[$60 >> 2] = $8; //@line 12929
  $61 = $ReallocAsyncCtx6 + 12 | 0; //@line 12930
  HEAP32[$61 >> 2] = $12; //@line 12931
  $62 = $ReallocAsyncCtx6 + 16 | 0; //@line 12932
  HEAP32[$62 >> 2] = $14; //@line 12933
  $63 = $ReallocAsyncCtx6 + 20 | 0; //@line 12934
  HEAP32[$63 >> 2] = $16; //@line 12935
  $64 = $ReallocAsyncCtx6 + 24 | 0; //@line 12936
  HEAP32[$64 >> 2] = $18; //@line 12937
  sp = STACKTOP; //@line 12938
  return;
 }
 $33 = $8 + 1256 | 0; //@line 12941
 $34 = HEAP32[$33 >> 2] | 0; //@line 12942
 if (!$34) {
  $48 = HEAP32[232] | 0; //@line 12946
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(36) | 0; //@line 12947
  FUNCTION_TABLE_vii[$48 & 31]($31, $14); //@line 12948
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 485; //@line 12951
   $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 12952
   HEAP32[$49 >> 2] = $30; //@line 12953
   $50 = $ReallocAsyncCtx5 + 8 | 0; //@line 12954
   HEAP32[$50 >> 2] = $33; //@line 12955
   $51 = $ReallocAsyncCtx5 + 12 | 0; //@line 12956
   HEAP32[$51 >> 2] = $6; //@line 12957
   $52 = $ReallocAsyncCtx5 + 16 | 0; //@line 12958
   HEAP32[$52 >> 2] = $8; //@line 12959
   $53 = $ReallocAsyncCtx5 + 20 | 0; //@line 12960
   HEAP32[$53 >> 2] = $12; //@line 12961
   $54 = $ReallocAsyncCtx5 + 24 | 0; //@line 12962
   HEAP32[$54 >> 2] = $14; //@line 12963
   $55 = $ReallocAsyncCtx5 + 28 | 0; //@line 12964
   HEAP32[$55 >> 2] = $16; //@line 12965
   $56 = $ReallocAsyncCtx5 + 32 | 0; //@line 12966
   HEAP32[$56 >> 2] = $18; //@line 12967
   sp = STACKTOP; //@line 12968
   return;
  }
  ___async_unwind = 0; //@line 12971
  HEAP32[$ReallocAsyncCtx5 >> 2] = 485; //@line 12972
  $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 12973
  HEAP32[$49 >> 2] = $30; //@line 12974
  $50 = $ReallocAsyncCtx5 + 8 | 0; //@line 12975
  HEAP32[$50 >> 2] = $33; //@line 12976
  $51 = $ReallocAsyncCtx5 + 12 | 0; //@line 12977
  HEAP32[$51 >> 2] = $6; //@line 12978
  $52 = $ReallocAsyncCtx5 + 16 | 0; //@line 12979
  HEAP32[$52 >> 2] = $8; //@line 12980
  $53 = $ReallocAsyncCtx5 + 20 | 0; //@line 12981
  HEAP32[$53 >> 2] = $12; //@line 12982
  $54 = $ReallocAsyncCtx5 + 24 | 0; //@line 12983
  HEAP32[$54 >> 2] = $14; //@line 12984
  $55 = $ReallocAsyncCtx5 + 28 | 0; //@line 12985
  HEAP32[$55 >> 2] = $16; //@line 12986
  $56 = $ReallocAsyncCtx5 + 32 | 0; //@line 12987
  HEAP32[$56 >> 2] = $18; //@line 12988
  sp = STACKTOP; //@line 12989
  return;
 } else {
  $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 12993
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(40) | 0; //@line 12994
  FUNCTION_TABLE_vi[$37 & 1023]($31); //@line 12995
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 484; //@line 12998
   $38 = $ReallocAsyncCtx4 + 4 | 0; //@line 12999
   HEAP32[$38 >> 2] = $30; //@line 13000
   $39 = $ReallocAsyncCtx4 + 8 | 0; //@line 13001
   HEAP32[$39 >> 2] = $33; //@line 13002
   $40 = $ReallocAsyncCtx4 + 12 | 0; //@line 13003
   HEAP32[$40 >> 2] = $6; //@line 13004
   $41 = $ReallocAsyncCtx4 + 16 | 0; //@line 13005
   HEAP32[$41 >> 2] = $8; //@line 13006
   $42 = $ReallocAsyncCtx4 + 20 | 0; //@line 13007
   HEAP32[$42 >> 2] = $12; //@line 13008
   $43 = $ReallocAsyncCtx4 + 24 | 0; //@line 13009
   HEAP32[$43 >> 2] = $31; //@line 13010
   $44 = $ReallocAsyncCtx4 + 28 | 0; //@line 13011
   HEAP32[$44 >> 2] = $14; //@line 13012
   $45 = $ReallocAsyncCtx4 + 32 | 0; //@line 13013
   HEAP32[$45 >> 2] = $16; //@line 13014
   $46 = $ReallocAsyncCtx4 + 36 | 0; //@line 13015
   HEAP32[$46 >> 2] = $18; //@line 13016
   sp = STACKTOP; //@line 13017
   return;
  }
  ___async_unwind = 0; //@line 13020
  HEAP32[$ReallocAsyncCtx4 >> 2] = 484; //@line 13021
  $38 = $ReallocAsyncCtx4 + 4 | 0; //@line 13022
  HEAP32[$38 >> 2] = $30; //@line 13023
  $39 = $ReallocAsyncCtx4 + 8 | 0; //@line 13024
  HEAP32[$39 >> 2] = $33; //@line 13025
  $40 = $ReallocAsyncCtx4 + 12 | 0; //@line 13026
  HEAP32[$40 >> 2] = $6; //@line 13027
  $41 = $ReallocAsyncCtx4 + 16 | 0; //@line 13028
  HEAP32[$41 >> 2] = $8; //@line 13029
  $42 = $ReallocAsyncCtx4 + 20 | 0; //@line 13030
  HEAP32[$42 >> 2] = $12; //@line 13031
  $43 = $ReallocAsyncCtx4 + 24 | 0; //@line 13032
  HEAP32[$43 >> 2] = $31; //@line 13033
  $44 = $ReallocAsyncCtx4 + 28 | 0; //@line 13034
  HEAP32[$44 >> 2] = $14; //@line 13035
  $45 = $ReallocAsyncCtx4 + 32 | 0; //@line 13036
  HEAP32[$45 >> 2] = $16; //@line 13037
  $46 = $ReallocAsyncCtx4 + 36 | 0; //@line 13038
  HEAP32[$46 >> 2] = $18; //@line 13039
  sp = STACKTOP; //@line 13040
  return;
 }
}
function __ZN7LoRaMac11schedule_txEv__async_cb_201($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $39 = 0, $4 = 0, $40 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $67 = 0, $68 = 0, $71 = 0, $72 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 2449
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2451
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2453
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2455
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2457
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 2459
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 2461
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 2463
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 2465
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 2467
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 2469
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 2471
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 2473
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 2475
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 2477
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 2479
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 2481
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 2483
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 2485
 if (HEAP8[___async_retval >> 0] & 1) {
  $67 = HEAP8[$28 >> 0] | 0; //@line 2493
  HEAP32[$34 >> 2] = HEAPU8[$10 >> 0]; //@line 2494
  HEAP32[$34 + 4 >> 2] = $67; //@line 2496
  _mbed_tracef(16, 13728, 14006, $34); //@line 2497
  $68 = HEAP32[$6 >> 2] | 0; //@line 2498
  $71 = HEAP32[(HEAP32[$68 >> 2] | 0) + 72 >> 2] | 0; //@line 2501
  $72 = HEAP8[$22 >> 0] | 0; //@line 2502
  $74 = HEAP8[$8 + 1129 >> 0] | 0; //@line 2504
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(56) | 0; //@line 2505
  $75 = FUNCTION_TABLE_iiii[$71 & 15]($68, $72, $74) | 0; //@line 2506
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 415; //@line 2509
   $76 = $ReallocAsyncCtx3 + 4 | 0; //@line 2510
   HEAP32[$76 >> 2] = $6; //@line 2511
   $77 = $ReallocAsyncCtx3 + 8 | 0; //@line 2512
   HEAP32[$77 >> 2] = $8; //@line 2513
   $78 = $ReallocAsyncCtx3 + 12 | 0; //@line 2514
   HEAP32[$78 >> 2] = $20; //@line 2515
   $79 = $ReallocAsyncCtx3 + 16 | 0; //@line 2516
   HEAP32[$79 >> 2] = $22; //@line 2517
   $80 = $ReallocAsyncCtx3 + 20 | 0; //@line 2518
   HEAP32[$80 >> 2] = $24; //@line 2519
   $81 = $ReallocAsyncCtx3 + 24 | 0; //@line 2520
   HEAP32[$81 >> 2] = $26; //@line 2521
   $82 = $ReallocAsyncCtx3 + 28 | 0; //@line 2522
   HEAP32[$82 >> 2] = $2; //@line 2523
   $83 = $ReallocAsyncCtx3 + 32 | 0; //@line 2524
   HEAP32[$83 >> 2] = $4; //@line 2525
   $84 = $ReallocAsyncCtx3 + 36 | 0; //@line 2526
   HEAP32[$84 >> 2] = $18; //@line 2527
   $85 = $ReallocAsyncCtx3 + 40 | 0; //@line 2528
   HEAP32[$85 >> 2] = $10; //@line 2529
   $86 = $ReallocAsyncCtx3 + 44 | 0; //@line 2530
   HEAP32[$86 >> 2] = $12; //@line 2531
   $87 = $ReallocAsyncCtx3 + 48 | 0; //@line 2532
   HEAP32[$87 >> 2] = $14; //@line 2533
   $88 = $ReallocAsyncCtx3 + 52 | 0; //@line 2534
   HEAP32[$88 >> 2] = $16; //@line 2535
   sp = STACKTOP; //@line 2536
   return;
  }
  HEAP8[___async_retval >> 0] = $75; //@line 2540
  ___async_unwind = 0; //@line 2541
  HEAP32[$ReallocAsyncCtx3 >> 2] = 415; //@line 2542
  $76 = $ReallocAsyncCtx3 + 4 | 0; //@line 2543
  HEAP32[$76 >> 2] = $6; //@line 2544
  $77 = $ReallocAsyncCtx3 + 8 | 0; //@line 2545
  HEAP32[$77 >> 2] = $8; //@line 2546
  $78 = $ReallocAsyncCtx3 + 12 | 0; //@line 2547
  HEAP32[$78 >> 2] = $20; //@line 2548
  $79 = $ReallocAsyncCtx3 + 16 | 0; //@line 2549
  HEAP32[$79 >> 2] = $22; //@line 2550
  $80 = $ReallocAsyncCtx3 + 20 | 0; //@line 2551
  HEAP32[$80 >> 2] = $24; //@line 2552
  $81 = $ReallocAsyncCtx3 + 24 | 0; //@line 2553
  HEAP32[$81 >> 2] = $26; //@line 2554
  $82 = $ReallocAsyncCtx3 + 28 | 0; //@line 2555
  HEAP32[$82 >> 2] = $2; //@line 2556
  $83 = $ReallocAsyncCtx3 + 32 | 0; //@line 2557
  HEAP32[$83 >> 2] = $4; //@line 2558
  $84 = $ReallocAsyncCtx3 + 36 | 0; //@line 2559
  HEAP32[$84 >> 2] = $18; //@line 2560
  $85 = $ReallocAsyncCtx3 + 40 | 0; //@line 2561
  HEAP32[$85 >> 2] = $10; //@line 2562
  $86 = $ReallocAsyncCtx3 + 44 | 0; //@line 2563
  HEAP32[$86 >> 2] = $12; //@line 2564
  $87 = $ReallocAsyncCtx3 + 48 | 0; //@line 2565
  HEAP32[$87 >> 2] = $14; //@line 2566
  $88 = $ReallocAsyncCtx3 + 52 | 0; //@line 2567
  HEAP32[$88 >> 2] = $16; //@line 2568
  sp = STACKTOP; //@line 2569
  return;
 } else {
  $39 = __ZN7LoRaPHY23get_default_tx_datarateEv(HEAP32[$6 >> 2] | 0) | 0; //@line 2573
  HEAP8[$22 >> 0] = $39; //@line 2574
  HEAP8[$28 >> 0] = $39; //@line 2575
  $40 = HEAP32[$6 >> 2] | 0; //@line 2576
  $43 = HEAP32[(HEAP32[$40 >> 2] | 0) + 56 >> 2] | 0; //@line 2579
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(76) | 0; //@line 2580
  $44 = FUNCTION_TABLE_iiiiii[$43 & 7]($40, $30, $10, $18, $32) | 0; //@line 2581
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 414; //@line 2584
   $45 = $ReallocAsyncCtx2 + 4 | 0; //@line 2585
   HEAP32[$45 >> 2] = $2; //@line 2586
   $46 = $ReallocAsyncCtx2 + 8 | 0; //@line 2587
   HEAP32[$46 >> 2] = $4; //@line 2588
   $47 = $ReallocAsyncCtx2 + 12 | 0; //@line 2589
   HEAP32[$47 >> 2] = $6; //@line 2590
   $48 = $ReallocAsyncCtx2 + 16 | 0; //@line 2591
   HEAP32[$48 >> 2] = $8; //@line 2592
   $49 = $ReallocAsyncCtx2 + 20 | 0; //@line 2593
   HEAP32[$49 >> 2] = $10; //@line 2594
   $50 = $ReallocAsyncCtx2 + 24 | 0; //@line 2595
   HEAP32[$50 >> 2] = $12; //@line 2596
   $51 = $ReallocAsyncCtx2 + 28 | 0; //@line 2597
   HEAP32[$51 >> 2] = $14; //@line 2598
   $52 = $ReallocAsyncCtx2 + 32 | 0; //@line 2599
   HEAP32[$52 >> 2] = $16; //@line 2600
   $53 = $ReallocAsyncCtx2 + 36 | 0; //@line 2601
   HEAP32[$53 >> 2] = $18; //@line 2602
   $54 = $ReallocAsyncCtx2 + 40 | 0; //@line 2603
   HEAP32[$54 >> 2] = $20; //@line 2604
   $55 = $ReallocAsyncCtx2 + 44 | 0; //@line 2605
   HEAP32[$55 >> 2] = $22; //@line 2606
   $56 = $ReallocAsyncCtx2 + 48 | 0; //@line 2607
   HEAP32[$56 >> 2] = $24; //@line 2608
   $57 = $ReallocAsyncCtx2 + 52 | 0; //@line 2609
   HEAP32[$57 >> 2] = $26; //@line 2610
   $58 = $ReallocAsyncCtx2 + 56 | 0; //@line 2611
   HEAP32[$58 >> 2] = $28; //@line 2612
   $59 = $ReallocAsyncCtx2 + 60 | 0; //@line 2613
   HEAP32[$59 >> 2] = $30; //@line 2614
   $60 = $ReallocAsyncCtx2 + 64 | 0; //@line 2615
   HEAP32[$60 >> 2] = $32; //@line 2616
   $61 = $ReallocAsyncCtx2 + 68 | 0; //@line 2617
   HEAP32[$61 >> 2] = $34; //@line 2618
   $62 = $ReallocAsyncCtx2 + 72 | 0; //@line 2619
   HEAP32[$62 >> 2] = $36; //@line 2620
   sp = STACKTOP; //@line 2621
   return;
  }
  HEAP8[___async_retval >> 0] = $44 & 1; //@line 2626
  ___async_unwind = 0; //@line 2627
  HEAP32[$ReallocAsyncCtx2 >> 2] = 414; //@line 2628
  $45 = $ReallocAsyncCtx2 + 4 | 0; //@line 2629
  HEAP32[$45 >> 2] = $2; //@line 2630
  $46 = $ReallocAsyncCtx2 + 8 | 0; //@line 2631
  HEAP32[$46 >> 2] = $4; //@line 2632
  $47 = $ReallocAsyncCtx2 + 12 | 0; //@line 2633
  HEAP32[$47 >> 2] = $6; //@line 2634
  $48 = $ReallocAsyncCtx2 + 16 | 0; //@line 2635
  HEAP32[$48 >> 2] = $8; //@line 2636
  $49 = $ReallocAsyncCtx2 + 20 | 0; //@line 2637
  HEAP32[$49 >> 2] = $10; //@line 2638
  $50 = $ReallocAsyncCtx2 + 24 | 0; //@line 2639
  HEAP32[$50 >> 2] = $12; //@line 2640
  $51 = $ReallocAsyncCtx2 + 28 | 0; //@line 2641
  HEAP32[$51 >> 2] = $14; //@line 2642
  $52 = $ReallocAsyncCtx2 + 32 | 0; //@line 2643
  HEAP32[$52 >> 2] = $16; //@line 2644
  $53 = $ReallocAsyncCtx2 + 36 | 0; //@line 2645
  HEAP32[$53 >> 2] = $18; //@line 2646
  $54 = $ReallocAsyncCtx2 + 40 | 0; //@line 2647
  HEAP32[$54 >> 2] = $20; //@line 2648
  $55 = $ReallocAsyncCtx2 + 44 | 0; //@line 2649
  HEAP32[$55 >> 2] = $22; //@line 2650
  $56 = $ReallocAsyncCtx2 + 48 | 0; //@line 2651
  HEAP32[$56 >> 2] = $24; //@line 2652
  $57 = $ReallocAsyncCtx2 + 52 | 0; //@line 2653
  HEAP32[$57 >> 2] = $26; //@line 2654
  $58 = $ReallocAsyncCtx2 + 56 | 0; //@line 2655
  HEAP32[$58 >> 2] = $28; //@line 2656
  $59 = $ReallocAsyncCtx2 + 60 | 0; //@line 2657
  HEAP32[$59 >> 2] = $30; //@line 2658
  $60 = $ReallocAsyncCtx2 + 64 | 0; //@line 2659
  HEAP32[$60 >> 2] = $32; //@line 2660
  $61 = $ReallocAsyncCtx2 + 68 | 0; //@line 2661
  HEAP32[$61 >> 2] = $34; //@line 2662
  $62 = $ReallocAsyncCtx2 + 72 | 0; //@line 2663
  HEAP32[$62 >> 2] = $36; //@line 2664
  sp = STACKTOP; //@line 2665
  return;
 }
}
function __ZN7LoRaMac11schedule_txEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $39 = 0, $4 = 0, $40 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $67 = 0, $68 = 0, $71 = 0, $72 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 2222
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2224
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2226
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2228
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2230
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 2232
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 2234
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 2236
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 2238
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 2240
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 2242
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 2244
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 2246
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 2248
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 2250
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 2252
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 2254
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 2256
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 2258
 if (HEAP8[___async_retval >> 0] & 1) {
  $67 = HEAP8[$28 >> 0] | 0; //@line 2266
  HEAP32[$34 >> 2] = HEAPU8[$10 >> 0]; //@line 2267
  HEAP32[$34 + 4 >> 2] = $67; //@line 2269
  _mbed_tracef(16, 13728, 14006, $34); //@line 2270
  $68 = HEAP32[$6 >> 2] | 0; //@line 2271
  $71 = HEAP32[(HEAP32[$68 >> 2] | 0) + 72 >> 2] | 0; //@line 2274
  $72 = HEAP8[$22 >> 0] | 0; //@line 2275
  $74 = HEAP8[$8 + 1129 >> 0] | 0; //@line 2277
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(56) | 0; //@line 2278
  $75 = FUNCTION_TABLE_iiii[$71 & 15]($68, $72, $74) | 0; //@line 2279
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 415; //@line 2282
   $76 = $ReallocAsyncCtx3 + 4 | 0; //@line 2283
   HEAP32[$76 >> 2] = $6; //@line 2284
   $77 = $ReallocAsyncCtx3 + 8 | 0; //@line 2285
   HEAP32[$77 >> 2] = $8; //@line 2286
   $78 = $ReallocAsyncCtx3 + 12 | 0; //@line 2287
   HEAP32[$78 >> 2] = $20; //@line 2288
   $79 = $ReallocAsyncCtx3 + 16 | 0; //@line 2289
   HEAP32[$79 >> 2] = $22; //@line 2290
   $80 = $ReallocAsyncCtx3 + 20 | 0; //@line 2291
   HEAP32[$80 >> 2] = $24; //@line 2292
   $81 = $ReallocAsyncCtx3 + 24 | 0; //@line 2293
   HEAP32[$81 >> 2] = $26; //@line 2294
   $82 = $ReallocAsyncCtx3 + 28 | 0; //@line 2295
   HEAP32[$82 >> 2] = $2; //@line 2296
   $83 = $ReallocAsyncCtx3 + 32 | 0; //@line 2297
   HEAP32[$83 >> 2] = $4; //@line 2298
   $84 = $ReallocAsyncCtx3 + 36 | 0; //@line 2299
   HEAP32[$84 >> 2] = $18; //@line 2300
   $85 = $ReallocAsyncCtx3 + 40 | 0; //@line 2301
   HEAP32[$85 >> 2] = $10; //@line 2302
   $86 = $ReallocAsyncCtx3 + 44 | 0; //@line 2303
   HEAP32[$86 >> 2] = $12; //@line 2304
   $87 = $ReallocAsyncCtx3 + 48 | 0; //@line 2305
   HEAP32[$87 >> 2] = $14; //@line 2306
   $88 = $ReallocAsyncCtx3 + 52 | 0; //@line 2307
   HEAP32[$88 >> 2] = $16; //@line 2308
   sp = STACKTOP; //@line 2309
   return;
  }
  HEAP8[___async_retval >> 0] = $75; //@line 2313
  ___async_unwind = 0; //@line 2314
  HEAP32[$ReallocAsyncCtx3 >> 2] = 415; //@line 2315
  $76 = $ReallocAsyncCtx3 + 4 | 0; //@line 2316
  HEAP32[$76 >> 2] = $6; //@line 2317
  $77 = $ReallocAsyncCtx3 + 8 | 0; //@line 2318
  HEAP32[$77 >> 2] = $8; //@line 2319
  $78 = $ReallocAsyncCtx3 + 12 | 0; //@line 2320
  HEAP32[$78 >> 2] = $20; //@line 2321
  $79 = $ReallocAsyncCtx3 + 16 | 0; //@line 2322
  HEAP32[$79 >> 2] = $22; //@line 2323
  $80 = $ReallocAsyncCtx3 + 20 | 0; //@line 2324
  HEAP32[$80 >> 2] = $24; //@line 2325
  $81 = $ReallocAsyncCtx3 + 24 | 0; //@line 2326
  HEAP32[$81 >> 2] = $26; //@line 2327
  $82 = $ReallocAsyncCtx3 + 28 | 0; //@line 2328
  HEAP32[$82 >> 2] = $2; //@line 2329
  $83 = $ReallocAsyncCtx3 + 32 | 0; //@line 2330
  HEAP32[$83 >> 2] = $4; //@line 2331
  $84 = $ReallocAsyncCtx3 + 36 | 0; //@line 2332
  HEAP32[$84 >> 2] = $18; //@line 2333
  $85 = $ReallocAsyncCtx3 + 40 | 0; //@line 2334
  HEAP32[$85 >> 2] = $10; //@line 2335
  $86 = $ReallocAsyncCtx3 + 44 | 0; //@line 2336
  HEAP32[$86 >> 2] = $12; //@line 2337
  $87 = $ReallocAsyncCtx3 + 48 | 0; //@line 2338
  HEAP32[$87 >> 2] = $14; //@line 2339
  $88 = $ReallocAsyncCtx3 + 52 | 0; //@line 2340
  HEAP32[$88 >> 2] = $16; //@line 2341
  sp = STACKTOP; //@line 2342
  return;
 } else {
  $39 = __ZN7LoRaPHY23get_default_tx_datarateEv(HEAP32[$6 >> 2] | 0) | 0; //@line 2346
  HEAP8[$22 >> 0] = $39; //@line 2347
  HEAP8[$28 >> 0] = $39; //@line 2348
  $40 = HEAP32[$6 >> 2] | 0; //@line 2349
  $43 = HEAP32[(HEAP32[$40 >> 2] | 0) + 56 >> 2] | 0; //@line 2352
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(76) | 0; //@line 2353
  $44 = FUNCTION_TABLE_iiiiii[$43 & 7]($40, $30, $10, $18, $32) | 0; //@line 2354
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 414; //@line 2357
   $45 = $ReallocAsyncCtx2 + 4 | 0; //@line 2358
   HEAP32[$45 >> 2] = $2; //@line 2359
   $46 = $ReallocAsyncCtx2 + 8 | 0; //@line 2360
   HEAP32[$46 >> 2] = $4; //@line 2361
   $47 = $ReallocAsyncCtx2 + 12 | 0; //@line 2362
   HEAP32[$47 >> 2] = $6; //@line 2363
   $48 = $ReallocAsyncCtx2 + 16 | 0; //@line 2364
   HEAP32[$48 >> 2] = $8; //@line 2365
   $49 = $ReallocAsyncCtx2 + 20 | 0; //@line 2366
   HEAP32[$49 >> 2] = $10; //@line 2367
   $50 = $ReallocAsyncCtx2 + 24 | 0; //@line 2368
   HEAP32[$50 >> 2] = $12; //@line 2369
   $51 = $ReallocAsyncCtx2 + 28 | 0; //@line 2370
   HEAP32[$51 >> 2] = $14; //@line 2371
   $52 = $ReallocAsyncCtx2 + 32 | 0; //@line 2372
   HEAP32[$52 >> 2] = $16; //@line 2373
   $53 = $ReallocAsyncCtx2 + 36 | 0; //@line 2374
   HEAP32[$53 >> 2] = $18; //@line 2375
   $54 = $ReallocAsyncCtx2 + 40 | 0; //@line 2376
   HEAP32[$54 >> 2] = $20; //@line 2377
   $55 = $ReallocAsyncCtx2 + 44 | 0; //@line 2378
   HEAP32[$55 >> 2] = $22; //@line 2379
   $56 = $ReallocAsyncCtx2 + 48 | 0; //@line 2380
   HEAP32[$56 >> 2] = $24; //@line 2381
   $57 = $ReallocAsyncCtx2 + 52 | 0; //@line 2382
   HEAP32[$57 >> 2] = $26; //@line 2383
   $58 = $ReallocAsyncCtx2 + 56 | 0; //@line 2384
   HEAP32[$58 >> 2] = $28; //@line 2385
   $59 = $ReallocAsyncCtx2 + 60 | 0; //@line 2386
   HEAP32[$59 >> 2] = $30; //@line 2387
   $60 = $ReallocAsyncCtx2 + 64 | 0; //@line 2388
   HEAP32[$60 >> 2] = $32; //@line 2389
   $61 = $ReallocAsyncCtx2 + 68 | 0; //@line 2390
   HEAP32[$61 >> 2] = $34; //@line 2391
   $62 = $ReallocAsyncCtx2 + 72 | 0; //@line 2392
   HEAP32[$62 >> 2] = $36; //@line 2393
   sp = STACKTOP; //@line 2394
   return;
  }
  HEAP8[___async_retval >> 0] = $44 & 1; //@line 2399
  ___async_unwind = 0; //@line 2400
  HEAP32[$ReallocAsyncCtx2 >> 2] = 414; //@line 2401
  $45 = $ReallocAsyncCtx2 + 4 | 0; //@line 2402
  HEAP32[$45 >> 2] = $2; //@line 2403
  $46 = $ReallocAsyncCtx2 + 8 | 0; //@line 2404
  HEAP32[$46 >> 2] = $4; //@line 2405
  $47 = $ReallocAsyncCtx2 + 12 | 0; //@line 2406
  HEAP32[$47 >> 2] = $6; //@line 2407
  $48 = $ReallocAsyncCtx2 + 16 | 0; //@line 2408
  HEAP32[$48 >> 2] = $8; //@line 2409
  $49 = $ReallocAsyncCtx2 + 20 | 0; //@line 2410
  HEAP32[$49 >> 2] = $10; //@line 2411
  $50 = $ReallocAsyncCtx2 + 24 | 0; //@line 2412
  HEAP32[$50 >> 2] = $12; //@line 2413
  $51 = $ReallocAsyncCtx2 + 28 | 0; //@line 2414
  HEAP32[$51 >> 2] = $14; //@line 2415
  $52 = $ReallocAsyncCtx2 + 32 | 0; //@line 2416
  HEAP32[$52 >> 2] = $16; //@line 2417
  $53 = $ReallocAsyncCtx2 + 36 | 0; //@line 2418
  HEAP32[$53 >> 2] = $18; //@line 2419
  $54 = $ReallocAsyncCtx2 + 40 | 0; //@line 2420
  HEAP32[$54 >> 2] = $20; //@line 2421
  $55 = $ReallocAsyncCtx2 + 44 | 0; //@line 2422
  HEAP32[$55 >> 2] = $22; //@line 2423
  $56 = $ReallocAsyncCtx2 + 48 | 0; //@line 2424
  HEAP32[$56 >> 2] = $24; //@line 2425
  $57 = $ReallocAsyncCtx2 + 52 | 0; //@line 2426
  HEAP32[$57 >> 2] = $26; //@line 2427
  $58 = $ReallocAsyncCtx2 + 56 | 0; //@line 2428
  HEAP32[$58 >> 2] = $28; //@line 2429
  $59 = $ReallocAsyncCtx2 + 60 | 0; //@line 2430
  HEAP32[$59 >> 2] = $30; //@line 2431
  $60 = $ReallocAsyncCtx2 + 64 | 0; //@line 2432
  HEAP32[$60 >> 2] = $32; //@line 2433
  $61 = $ReallocAsyncCtx2 + 68 | 0; //@line 2434
  HEAP32[$61 >> 2] = $34; //@line 2435
  $62 = $ReallocAsyncCtx2 + 72 | 0; //@line 2436
  HEAP32[$62 >> 2] = $36; //@line 2437
  sp = STACKTOP; //@line 2438
  return;
 }
}
function _schedule_interrupt__async_cb($0) {
 $0 = $0 | 0;
 var $$0$i = 0, $102 = 0, $105 = 0, $107 = 0, $110 = 0, $111 = 0, $113 = 0, $116 = 0, $12 = 0, $124 = 0, $125 = 0, $126 = 0, $128 = 0, $130 = 0, $135 = 0, $142 = 0, $144 = 0, $146 = 0, $149 = 0, $151 = 0, $158 = 0, $159 = 0, $162 = 0, $164 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $177 = 0, $180 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $26 = 0, $27 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $58 = 0, $60 = 0, $61 = 0, $67 = 0, $68 = 0, $69 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $82 = 0, $86 = 0, $87 = 0, $9 = 0, $93 = 0, $94 = 0, $95 = 0, $97 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 20673
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20675
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20677
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 20681
 $8 = HEAP32[HEAP32[$0 + 12 >> 2] >> 2] | 0; //@line 20682
 $9 = $8 + 32 | 0; //@line 20683
 if (($AsyncRetVal | 0) != (HEAP32[$9 >> 2] | 0)) {
  $12 = $4 + 32 | 0; //@line 20687
  $17 = $AsyncRetVal - (HEAP32[$12 >> 2] | 0) & HEAP32[$4 + 12 >> 2]; //@line 20692
  HEAP32[$12 >> 2] = $AsyncRetVal; //@line 20693
  $19 = HEAP32[$4 + 8 >> 2] | 0; //@line 20695
  L4 : do {
   if (($19 | 0) < 1e6) {
    switch ($19 | 0) {
    case 32768:
     {
      break;
     }
    default:
     {
      label = 6; //@line 20704
      break L4;
     }
    }
    $20 = ___muldi3($17 | 0, 0, 1e6, 0) | 0; //@line 20708
    $22 = _bitshift64Lshr($20 | 0, tempRet0 | 0, 15) | 0; //@line 20710
    $23 = tempRet0; //@line 20711
    $26 = $4 + 40 | 0; //@line 20714
    $27 = $26; //@line 20715
    $33 = _i64Add(HEAP32[$27 >> 2] | 0, HEAP32[$27 + 4 >> 2] | 0, $17 * 1e6 & 32704 | 0, 0) | 0; //@line 20721
    $34 = tempRet0; //@line 20722
    $35 = $26; //@line 20723
    HEAP32[$35 >> 2] = $33; //@line 20725
    HEAP32[$35 + 4 >> 2] = $34; //@line 20728
    if ($34 >>> 0 < 0 | ($34 | 0) == 0 & $33 >>> 0 < 32768) {
     $93 = $22; //@line 20735
     $94 = $23; //@line 20735
    } else {
     $44 = _i64Add($22 | 0, $23 | 0, 1, 0) | 0; //@line 20737
     $45 = tempRet0; //@line 20738
     $46 = _i64Add($33 | 0, $34 | 0, -32768, -1) | 0; //@line 20739
     $48 = $26; //@line 20741
     HEAP32[$48 >> 2] = $46; //@line 20743
     HEAP32[$48 + 4 >> 2] = tempRet0; //@line 20746
     $93 = $44; //@line 20747
     $94 = $45; //@line 20747
    }
   } else {
    switch ($19 | 0) {
    case 1e6:
     {
      $93 = $17; //@line 20752
      $94 = 0; //@line 20752
      break;
     }
    default:
     {
      label = 6; //@line 20756
     }
    }
   }
  } while (0);
  if ((label | 0) == 6) {
   $52 = ___muldi3($17 | 0, 0, 1e6, 0) | 0; //@line 20762
   $53 = tempRet0; //@line 20763
   $54 = ___udivdi3($52 | 0, $53 | 0, $19 | 0, 0) | 0; //@line 20764
   $55 = tempRet0; //@line 20765
   $56 = ___muldi3($54 | 0, $55 | 0, $19 | 0, 0) | 0; //@line 20766
   $58 = _i64Subtract($52 | 0, $53 | 0, $56 | 0, tempRet0 | 0) | 0; //@line 20768
   $60 = $4 + 40 | 0; //@line 20770
   $61 = $60; //@line 20771
   $67 = _i64Add($58 | 0, tempRet0 | 0, HEAP32[$61 >> 2] | 0, HEAP32[$61 + 4 >> 2] | 0) | 0; //@line 20777
   $68 = tempRet0; //@line 20778
   $69 = $60; //@line 20779
   HEAP32[$69 >> 2] = $67; //@line 20781
   HEAP32[$69 + 4 >> 2] = $68; //@line 20784
   if ($68 >>> 0 < 0 | ($68 | 0) == 0 & $67 >>> 0 < $19 >>> 0) {
    $93 = $54; //@line 20791
    $94 = $55; //@line 20791
   } else {
    $78 = _i64Add($54 | 0, $55 | 0, 1, 0) | 0; //@line 20793
    $79 = tempRet0; //@line 20794
    $80 = _i64Subtract($67 | 0, $68 | 0, $19 | 0, 0) | 0; //@line 20795
    $82 = $60; //@line 20797
    HEAP32[$82 >> 2] = $80; //@line 20799
    HEAP32[$82 + 4 >> 2] = tempRet0; //@line 20802
    $93 = $78; //@line 20803
    $94 = $79; //@line 20803
   }
  }
  $86 = $4 + 48 | 0; //@line 20806
  $87 = $86; //@line 20807
  $95 = _i64Add(HEAP32[$87 >> 2] | 0, HEAP32[$87 + 4 >> 2] | 0, $93 | 0, $94 | 0) | 0; //@line 20813
  $97 = $86; //@line 20815
  HEAP32[$97 >> 2] = $95; //@line 20817
  HEAP32[$97 + 4 >> 2] = tempRet0; //@line 20820
 }
 $102 = HEAP32[$8 + 4 >> 2] | 0; //@line 20823
 if (!$102) {
  $177 = (HEAP32[$4 + 16 >> 2] | 0) + (HEAP32[$4 + 32 >> 2] | 0) & HEAP32[$4 + 12 >> 2]; //@line 20833
  $180 = HEAP32[(HEAP32[$2 >> 2] | 0) + 16 >> 2] | 0; //@line 20836
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 20837
  FUNCTION_TABLE_vi[$180 & 1023]($177); //@line 20838
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 624; //@line 20841
   sp = STACKTOP; //@line 20842
   return;
  }
  ___async_unwind = 0; //@line 20845
  HEAP32[$ReallocAsyncCtx7 >> 2] = 624; //@line 20846
  sp = STACKTOP; //@line 20847
  return;
 }
 $105 = $8 + 48 | 0; //@line 20851
 $107 = HEAP32[$105 >> 2] | 0; //@line 20853
 $110 = HEAP32[$105 + 4 >> 2] | 0; //@line 20856
 $111 = $102; //@line 20857
 $113 = HEAP32[$111 >> 2] | 0; //@line 20859
 $116 = HEAP32[$111 + 4 >> 2] | 0; //@line 20862
 if (!($116 >>> 0 > $110 >>> 0 | ($116 | 0) == ($110 | 0) & $113 >>> 0 > $107 >>> 0)) {
  $124 = HEAP32[(HEAP32[$2 >> 2] | 0) + 20 >> 2] | 0; //@line 20871
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 20872
  FUNCTION_TABLE_v[$124 & 15](); //@line 20873
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 619; //@line 20876
   sp = STACKTOP; //@line 20877
   return;
  }
  ___async_unwind = 0; //@line 20880
  HEAP32[$ReallocAsyncCtx2 >> 2] = 619; //@line 20881
  sp = STACKTOP; //@line 20882
  return;
 }
 $125 = _i64Subtract($113 | 0, $116 | 0, $107 | 0, $110 | 0) | 0; //@line 20885
 $126 = tempRet0; //@line 20886
 $128 = HEAP32[$8 + 16 >> 2] | 0; //@line 20888
 $130 = $8 + 24 | 0; //@line 20890
 $135 = HEAP32[$130 + 4 >> 2] | 0; //@line 20895
 L28 : do {
  if ($126 >>> 0 > $135 >>> 0 | (($126 | 0) == ($135 | 0) ? $125 >>> 0 > (HEAP32[$130 >> 2] | 0) >>> 0 : 0)) {
   $$0$i = $128; //@line 20903
  } else {
   $142 = HEAP32[$8 + 8 >> 2] | 0; //@line 20906
   L30 : do {
    if (($142 | 0) < 1e6) {
     switch ($142 | 0) {
     case 32768:
      {
       break;
      }
     default:
      {
       break L30;
      }
     }
     $144 = _bitshift64Shl($125 | 0, $126 | 0, 15) | 0; //@line 20918
     $146 = ___udivdi3($144 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 20920
     $$0$i = $128 >>> 0 < $146 >>> 0 ? $128 : $146; //@line 20924
     break L28;
    } else {
     switch ($142 | 0) {
     case 1e6:
      {
       break;
      }
     default:
      {
       break L30;
      }
     }
     $$0$i = $128 >>> 0 < $125 >>> 0 ? $128 : $125; //@line 20937
     break L28;
    }
   } while (0);
   $149 = ___muldi3($125 | 0, $126 | 0, $142 | 0, 0) | 0; //@line 20941
   $151 = ___udivdi3($149 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 20943
   $$0$i = $128 >>> 0 < $151 >>> 0 ? $128 : $151; //@line 20947
  }
 } while (0);
 $158 = (HEAP32[$9 >> 2] | 0) + $$0$i & HEAP32[$8 + 12 >> 2]; //@line 20954
 $159 = $4 + 32 | 0; //@line 20955
 $162 = HEAP32[$2 >> 2] | 0; //@line 20958
 if (($158 | 0) == (HEAP32[$159 >> 2] | 0)) {
  $164 = HEAP32[$162 + 20 >> 2] | 0; //@line 20961
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 20962
  FUNCTION_TABLE_v[$164 & 15](); //@line 20963
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 620; //@line 20966
   sp = STACKTOP; //@line 20967
   return;
  }
  ___async_unwind = 0; //@line 20970
  HEAP32[$ReallocAsyncCtx3 >> 2] = 620; //@line 20971
  sp = STACKTOP; //@line 20972
  return;
 } else {
  $166 = HEAP32[$162 + 16 >> 2] | 0; //@line 20976
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 20977
  FUNCTION_TABLE_vi[$166 & 1023]($158); //@line 20978
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 621; //@line 20981
   $167 = $ReallocAsyncCtx4 + 4 | 0; //@line 20982
   HEAP32[$167 >> 2] = $2; //@line 20983
   $168 = $ReallocAsyncCtx4 + 8 | 0; //@line 20984
   HEAP32[$168 >> 2] = $159; //@line 20985
   $169 = $ReallocAsyncCtx4 + 12 | 0; //@line 20986
   HEAP32[$169 >> 2] = $158; //@line 20987
   sp = STACKTOP; //@line 20988
   return;
  }
  ___async_unwind = 0; //@line 20991
  HEAP32[$ReallocAsyncCtx4 >> 2] = 621; //@line 20992
  $167 = $ReallocAsyncCtx4 + 4 | 0; //@line 20993
  HEAP32[$167 >> 2] = $2; //@line 20994
  $168 = $ReallocAsyncCtx4 + 8 | 0; //@line 20995
  HEAP32[$168 >> 2] = $159; //@line 20996
  $169 = $ReallocAsyncCtx4 + 12 | 0; //@line 20997
  HEAP32[$169 >> 2] = $158; //@line 20998
  sp = STACKTOP; //@line 20999
  return;
 }
}
function _mbed_die() {
 var $0 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx3 = 0, $AsyncCtx31 = 0, $AsyncCtx35 = 0, $AsyncCtx39 = 0, $AsyncCtx43 = 0, $AsyncCtx47 = 0, $AsyncCtx51 = 0, $AsyncCtx55 = 0, $AsyncCtx59 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6202
 STACKTOP = STACKTOP + 32 | 0; //@line 6203
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 6203
 $0 = sp; //@line 6204
 _gpio_init_out($0, 50); //@line 6205
 while (1) {
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 6208
  $AsyncCtx59 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6209
  _wait_ms(150); //@line 6210
  if (___async) {
   label = 3; //@line 6213
   break;
  }
  _emscripten_free_async_context($AsyncCtx59 | 0); //@line 6216
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 6218
  $AsyncCtx55 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6219
  _wait_ms(150); //@line 6220
  if (___async) {
   label = 5; //@line 6223
   break;
  }
  _emscripten_free_async_context($AsyncCtx55 | 0); //@line 6226
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 6228
  $AsyncCtx51 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6229
  _wait_ms(150); //@line 6230
  if (___async) {
   label = 7; //@line 6233
   break;
  }
  _emscripten_free_async_context($AsyncCtx51 | 0); //@line 6236
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 6238
  $AsyncCtx47 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6239
  _wait_ms(150); //@line 6240
  if (___async) {
   label = 9; //@line 6243
   break;
  }
  _emscripten_free_async_context($AsyncCtx47 | 0); //@line 6246
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 6248
  $AsyncCtx43 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6249
  _wait_ms(150); //@line 6250
  if (___async) {
   label = 11; //@line 6253
   break;
  }
  _emscripten_free_async_context($AsyncCtx43 | 0); //@line 6256
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 6258
  $AsyncCtx39 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6259
  _wait_ms(150); //@line 6260
  if (___async) {
   label = 13; //@line 6263
   break;
  }
  _emscripten_free_async_context($AsyncCtx39 | 0); //@line 6266
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 6268
  $AsyncCtx35 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6269
  _wait_ms(150); //@line 6270
  if (___async) {
   label = 15; //@line 6273
   break;
  }
  _emscripten_free_async_context($AsyncCtx35 | 0); //@line 6276
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 6278
  $AsyncCtx31 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6279
  _wait_ms(150); //@line 6280
  if (___async) {
   label = 17; //@line 6283
   break;
  }
  _emscripten_free_async_context($AsyncCtx31 | 0); //@line 6286
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 6288
  $AsyncCtx27 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6289
  _wait_ms(400); //@line 6290
  if (___async) {
   label = 19; //@line 6293
   break;
  }
  _emscripten_free_async_context($AsyncCtx27 | 0); //@line 6296
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 6298
  $AsyncCtx23 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6299
  _wait_ms(400); //@line 6300
  if (___async) {
   label = 21; //@line 6303
   break;
  }
  _emscripten_free_async_context($AsyncCtx23 | 0); //@line 6306
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 6308
  $AsyncCtx19 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6309
  _wait_ms(400); //@line 6310
  if (___async) {
   label = 23; //@line 6313
   break;
  }
  _emscripten_free_async_context($AsyncCtx19 | 0); //@line 6316
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 6318
  $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6319
  _wait_ms(400); //@line 6320
  if (___async) {
   label = 25; //@line 6323
   break;
  }
  _emscripten_free_async_context($AsyncCtx15 | 0); //@line 6326
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 6328
  $AsyncCtx11 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6329
  _wait_ms(400); //@line 6330
  if (___async) {
   label = 27; //@line 6333
   break;
  }
  _emscripten_free_async_context($AsyncCtx11 | 0); //@line 6336
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 6338
  $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6339
  _wait_ms(400); //@line 6340
  if (___async) {
   label = 29; //@line 6343
   break;
  }
  _emscripten_free_async_context($AsyncCtx7 | 0); //@line 6346
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 6348
  $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6349
  _wait_ms(400); //@line 6350
  if (___async) {
   label = 31; //@line 6353
   break;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 6356
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 6358
  $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 6359
  _wait_ms(400); //@line 6360
  if (___async) {
   label = 33; //@line 6363
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6366
 }
 switch (label | 0) {
 case 3:
  {
   HEAP32[$AsyncCtx59 >> 2] = 629; //@line 6370
   HEAP32[$AsyncCtx59 + 4 >> 2] = $0; //@line 6372
   sp = STACKTOP; //@line 6373
   STACKTOP = sp; //@line 6374
   return;
  }
 case 5:
  {
   HEAP32[$AsyncCtx55 >> 2] = 630; //@line 6378
   HEAP32[$AsyncCtx55 + 4 >> 2] = $0; //@line 6380
   sp = STACKTOP; //@line 6381
   STACKTOP = sp; //@line 6382
   return;
  }
 case 7:
  {
   HEAP32[$AsyncCtx51 >> 2] = 631; //@line 6386
   HEAP32[$AsyncCtx51 + 4 >> 2] = $0; //@line 6388
   sp = STACKTOP; //@line 6389
   STACKTOP = sp; //@line 6390
   return;
  }
 case 9:
  {
   HEAP32[$AsyncCtx47 >> 2] = 632; //@line 6394
   HEAP32[$AsyncCtx47 + 4 >> 2] = $0; //@line 6396
   sp = STACKTOP; //@line 6397
   STACKTOP = sp; //@line 6398
   return;
  }
 case 11:
  {
   HEAP32[$AsyncCtx43 >> 2] = 633; //@line 6402
   HEAP32[$AsyncCtx43 + 4 >> 2] = $0; //@line 6404
   sp = STACKTOP; //@line 6405
   STACKTOP = sp; //@line 6406
   return;
  }
 case 13:
  {
   HEAP32[$AsyncCtx39 >> 2] = 634; //@line 6410
   HEAP32[$AsyncCtx39 + 4 >> 2] = $0; //@line 6412
   sp = STACKTOP; //@line 6413
   STACKTOP = sp; //@line 6414
   return;
  }
 case 15:
  {
   HEAP32[$AsyncCtx35 >> 2] = 635; //@line 6418
   HEAP32[$AsyncCtx35 + 4 >> 2] = $0; //@line 6420
   sp = STACKTOP; //@line 6421
   STACKTOP = sp; //@line 6422
   return;
  }
 case 17:
  {
   HEAP32[$AsyncCtx31 >> 2] = 636; //@line 6426
   HEAP32[$AsyncCtx31 + 4 >> 2] = $0; //@line 6428
   sp = STACKTOP; //@line 6429
   STACKTOP = sp; //@line 6430
   return;
  }
 case 19:
  {
   HEAP32[$AsyncCtx27 >> 2] = 637; //@line 6434
   HEAP32[$AsyncCtx27 + 4 >> 2] = $0; //@line 6436
   sp = STACKTOP; //@line 6437
   STACKTOP = sp; //@line 6438
   return;
  }
 case 21:
  {
   HEAP32[$AsyncCtx23 >> 2] = 638; //@line 6442
   HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 6444
   sp = STACKTOP; //@line 6445
   STACKTOP = sp; //@line 6446
   return;
  }
 case 23:
  {
   HEAP32[$AsyncCtx19 >> 2] = 639; //@line 6450
   HEAP32[$AsyncCtx19 + 4 >> 2] = $0; //@line 6452
   sp = STACKTOP; //@line 6453
   STACKTOP = sp; //@line 6454
   return;
  }
 case 25:
  {
   HEAP32[$AsyncCtx15 >> 2] = 640; //@line 6458
   HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 6460
   sp = STACKTOP; //@line 6461
   STACKTOP = sp; //@line 6462
   return;
  }
 case 27:
  {
   HEAP32[$AsyncCtx11 >> 2] = 641; //@line 6466
   HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 6468
   sp = STACKTOP; //@line 6469
   STACKTOP = sp; //@line 6470
   return;
  }
 case 29:
  {
   HEAP32[$AsyncCtx7 >> 2] = 642; //@line 6474
   HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 6476
   sp = STACKTOP; //@line 6477
   STACKTOP = sp; //@line 6478
   return;
  }
 case 31:
  {
   HEAP32[$AsyncCtx3 >> 2] = 643; //@line 6482
   HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 6484
   sp = STACKTOP; //@line 6485
   STACKTOP = sp; //@line 6486
   return;
  }
 case 33:
  {
   HEAP32[$AsyncCtx >> 2] = 644; //@line 6490
   HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 6492
   sp = STACKTOP; //@line 6493
   STACKTOP = sp; //@line 6494
   return;
  }
 }
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_311($0) {
 $0 = $0 | 0;
 var $$pre119 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 13222
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13224
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13226
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13228
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13230
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13232
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13234
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 13236
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 13238
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 13240
 $$pre119 = HEAP32[$2 >> 2] | 0; //@line 13241
 if ($$pre119 | 0) {
  $21 = HEAP32[$$pre119 + 4 >> 2] | 0; //@line 13245
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(36) | 0; //@line 13246
  FUNCTION_TABLE_vii[$21 & 31]($12, $14); //@line 13247
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 485; //@line 13250
   $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 13251
   HEAP32[$22 >> 2] = $2; //@line 13252
   $23 = $ReallocAsyncCtx5 + 8 | 0; //@line 13253
   HEAP32[$23 >> 2] = $4; //@line 13254
   $24 = $ReallocAsyncCtx5 + 12 | 0; //@line 13255
   HEAP32[$24 >> 2] = $6; //@line 13256
   $25 = $ReallocAsyncCtx5 + 16 | 0; //@line 13257
   HEAP32[$25 >> 2] = $8; //@line 13258
   $26 = $ReallocAsyncCtx5 + 20 | 0; //@line 13259
   HEAP32[$26 >> 2] = $10; //@line 13260
   $27 = $ReallocAsyncCtx5 + 24 | 0; //@line 13261
   HEAP32[$27 >> 2] = $14; //@line 13262
   $28 = $ReallocAsyncCtx5 + 28 | 0; //@line 13263
   HEAP32[$28 >> 2] = $16; //@line 13264
   $29 = $ReallocAsyncCtx5 + 32 | 0; //@line 13265
   HEAP32[$29 >> 2] = $18; //@line 13266
   sp = STACKTOP; //@line 13267
   return;
  }
  ___async_unwind = 0; //@line 13270
  HEAP32[$ReallocAsyncCtx5 >> 2] = 485; //@line 13271
  $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 13272
  HEAP32[$22 >> 2] = $2; //@line 13273
  $23 = $ReallocAsyncCtx5 + 8 | 0; //@line 13274
  HEAP32[$23 >> 2] = $4; //@line 13275
  $24 = $ReallocAsyncCtx5 + 12 | 0; //@line 13276
  HEAP32[$24 >> 2] = $6; //@line 13277
  $25 = $ReallocAsyncCtx5 + 16 | 0; //@line 13278
  HEAP32[$25 >> 2] = $8; //@line 13279
  $26 = $ReallocAsyncCtx5 + 20 | 0; //@line 13280
  HEAP32[$26 >> 2] = $10; //@line 13281
  $27 = $ReallocAsyncCtx5 + 24 | 0; //@line 13282
  HEAP32[$27 >> 2] = $14; //@line 13283
  $28 = $ReallocAsyncCtx5 + 28 | 0; //@line 13284
  HEAP32[$28 >> 2] = $16; //@line 13285
  $29 = $ReallocAsyncCtx5 + 32 | 0; //@line 13286
  HEAP32[$29 >> 2] = $18; //@line 13287
  sp = STACKTOP; //@line 13288
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 13291
 $30 = $16 + 12 | 0; //@line 13292
 HEAP32[$16 >> 2] = 487; //@line 13293
 HEAP32[$16 + 4 >> 2] = 0; //@line 13295
 HEAP32[$16 + 8 >> 2] = $8; //@line 13297
 HEAP32[$30 >> 2] = 912; //@line 13298
 $31 = $8 + 1276 | 0; //@line 13299
 if (($31 | 0) == ($16 | 0)) {
  $56 = HEAP32[230] | 0; //@line 13303
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(24) | 0; //@line 13304
  FUNCTION_TABLE_vi[$56 & 1023]($16); //@line 13305
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 490; //@line 13308
   $57 = $ReallocAsyncCtx9 + 4 | 0; //@line 13309
   HEAP32[$57 >> 2] = $6; //@line 13310
   $58 = $ReallocAsyncCtx9 + 8 | 0; //@line 13311
   HEAP32[$58 >> 2] = $8; //@line 13312
   $59 = $ReallocAsyncCtx9 + 12 | 0; //@line 13313
   HEAP32[$59 >> 2] = $10; //@line 13314
   $60 = $ReallocAsyncCtx9 + 16 | 0; //@line 13315
   HEAP32[$60 >> 2] = $16; //@line 13316
   $61 = $ReallocAsyncCtx9 + 20 | 0; //@line 13317
   HEAP32[$61 >> 2] = $18; //@line 13318
   sp = STACKTOP; //@line 13319
   return;
  }
  ___async_unwind = 0; //@line 13322
  HEAP32[$ReallocAsyncCtx9 >> 2] = 490; //@line 13323
  $57 = $ReallocAsyncCtx9 + 4 | 0; //@line 13324
  HEAP32[$57 >> 2] = $6; //@line 13325
  $58 = $ReallocAsyncCtx9 + 8 | 0; //@line 13326
  HEAP32[$58 >> 2] = $8; //@line 13327
  $59 = $ReallocAsyncCtx9 + 12 | 0; //@line 13328
  HEAP32[$59 >> 2] = $10; //@line 13329
  $60 = $ReallocAsyncCtx9 + 16 | 0; //@line 13330
  HEAP32[$60 >> 2] = $16; //@line 13331
  $61 = $ReallocAsyncCtx9 + 20 | 0; //@line 13332
  HEAP32[$61 >> 2] = $18; //@line 13333
  sp = STACKTOP; //@line 13334
  return;
 }
 $33 = $8 + 1288 | 0; //@line 13337
 $34 = HEAP32[$33 >> 2] | 0; //@line 13338
 if (!$34) {
  $47 = HEAP32[229] | 0; //@line 13342
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(32) | 0; //@line 13343
  FUNCTION_TABLE_vii[$47 & 31]($31, $16); //@line 13344
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 489; //@line 13347
   $48 = $ReallocAsyncCtx8 + 4 | 0; //@line 13348
   HEAP32[$48 >> 2] = $6; //@line 13349
   $49 = $ReallocAsyncCtx8 + 8 | 0; //@line 13350
   HEAP32[$49 >> 2] = $8; //@line 13351
   $50 = $ReallocAsyncCtx8 + 12 | 0; //@line 13352
   HEAP32[$50 >> 2] = $10; //@line 13353
   $51 = $ReallocAsyncCtx8 + 16 | 0; //@line 13354
   HEAP32[$51 >> 2] = $16; //@line 13355
   $52 = $ReallocAsyncCtx8 + 20 | 0; //@line 13356
   HEAP32[$52 >> 2] = $18; //@line 13357
   $53 = $ReallocAsyncCtx8 + 24 | 0; //@line 13358
   HEAP32[$53 >> 2] = $30; //@line 13359
   $54 = $ReallocAsyncCtx8 + 28 | 0; //@line 13360
   HEAP32[$54 >> 2] = $33; //@line 13361
   sp = STACKTOP; //@line 13362
   return;
  }
  ___async_unwind = 0; //@line 13365
  HEAP32[$ReallocAsyncCtx8 >> 2] = 489; //@line 13366
  $48 = $ReallocAsyncCtx8 + 4 | 0; //@line 13367
  HEAP32[$48 >> 2] = $6; //@line 13368
  $49 = $ReallocAsyncCtx8 + 8 | 0; //@line 13369
  HEAP32[$49 >> 2] = $8; //@line 13370
  $50 = $ReallocAsyncCtx8 + 12 | 0; //@line 13371
  HEAP32[$50 >> 2] = $10; //@line 13372
  $51 = $ReallocAsyncCtx8 + 16 | 0; //@line 13373
  HEAP32[$51 >> 2] = $16; //@line 13374
  $52 = $ReallocAsyncCtx8 + 20 | 0; //@line 13375
  HEAP32[$52 >> 2] = $18; //@line 13376
  $53 = $ReallocAsyncCtx8 + 24 | 0; //@line 13377
  HEAP32[$53 >> 2] = $30; //@line 13378
  $54 = $ReallocAsyncCtx8 + 28 | 0; //@line 13379
  HEAP32[$54 >> 2] = $33; //@line 13380
  sp = STACKTOP; //@line 13381
  return;
 } else {
  $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 13385
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(36) | 0; //@line 13386
  FUNCTION_TABLE_vi[$37 & 1023]($31); //@line 13387
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 488; //@line 13390
   $38 = $ReallocAsyncCtx7 + 4 | 0; //@line 13391
   HEAP32[$38 >> 2] = $6; //@line 13392
   $39 = $ReallocAsyncCtx7 + 8 | 0; //@line 13393
   HEAP32[$39 >> 2] = $8; //@line 13394
   $40 = $ReallocAsyncCtx7 + 12 | 0; //@line 13395
   HEAP32[$40 >> 2] = $10; //@line 13396
   $41 = $ReallocAsyncCtx7 + 16 | 0; //@line 13397
   HEAP32[$41 >> 2] = $30; //@line 13398
   $42 = $ReallocAsyncCtx7 + 20 | 0; //@line 13399
   HEAP32[$42 >> 2] = $31; //@line 13400
   $43 = $ReallocAsyncCtx7 + 24 | 0; //@line 13401
   HEAP32[$43 >> 2] = $16; //@line 13402
   $44 = $ReallocAsyncCtx7 + 28 | 0; //@line 13403
   HEAP32[$44 >> 2] = $18; //@line 13404
   $45 = $ReallocAsyncCtx7 + 32 | 0; //@line 13405
   HEAP32[$45 >> 2] = $33; //@line 13406
   sp = STACKTOP; //@line 13407
   return;
  }
  ___async_unwind = 0; //@line 13410
  HEAP32[$ReallocAsyncCtx7 >> 2] = 488; //@line 13411
  $38 = $ReallocAsyncCtx7 + 4 | 0; //@line 13412
  HEAP32[$38 >> 2] = $6; //@line 13413
  $39 = $ReallocAsyncCtx7 + 8 | 0; //@line 13414
  HEAP32[$39 >> 2] = $8; //@line 13415
  $40 = $ReallocAsyncCtx7 + 12 | 0; //@line 13416
  HEAP32[$40 >> 2] = $10; //@line 13417
  $41 = $ReallocAsyncCtx7 + 16 | 0; //@line 13418
  HEAP32[$41 >> 2] = $30; //@line 13419
  $42 = $ReallocAsyncCtx7 + 20 | 0; //@line 13420
  HEAP32[$42 >> 2] = $31; //@line 13421
  $43 = $ReallocAsyncCtx7 + 24 | 0; //@line 13422
  HEAP32[$43 >> 2] = $16; //@line 13423
  $44 = $ReallocAsyncCtx7 + 28 | 0; //@line 13424
  HEAP32[$44 >> 2] = $18; //@line 13425
  $45 = $ReallocAsyncCtx7 + 32 | 0; //@line 13426
  HEAP32[$45 >> 2] = $33; //@line 13427
  sp = STACKTOP; //@line 13428
  return;
 }
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $14 = 0, $2 = 0, $20 = 0, $21 = 0, $25 = 0, $27 = 0, $3 = 0, $32 = 0, $33 = 0, $36 = 0, $39 = 0, $45 = 0, $46 = 0, $50 = 0, $52 = 0, $58 = 0, $60 = 0, $62 = 0, $63 = 0, $66 = 0, $69 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx16 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx31 = 0, $AsyncCtx35 = 0, $AsyncCtx39 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, sp = 0;
 sp = STACKTOP; //@line 6396
 STACKTOP = STACKTOP + 64 | 0; //@line 6397
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 6397
 $vararg_buffer3 = sp + 16 | 0; //@line 6398
 $vararg_buffer1 = sp + 8 | 0; //@line 6399
 $2 = sp + 40 | 0; //@line 6401
 $3 = sp + 24 | 0; //@line 6402
 if (!$1) {
  _mbed_tracef(2, 12356, 12361, sp); //@line 6405
  $AsyncCtx39 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6406
  _mbed_assert_internal(15131, 12396, 691); //@line 6407
  if (___async) {
   HEAP32[$AsyncCtx39 >> 2] = 182; //@line 6410
   sp = STACKTOP; //@line 6411
   STACKTOP = sp; //@line 6412
   return;
  }
  _emscripten_free_async_context($AsyncCtx39 | 0); //@line 6414
  STACKTOP = sp; //@line 6415
  return;
 }
 switch (HEAP32[$1 >> 2] | 0) {
 case 0:
  {
   $9 = $0 + 1876 | 0; //@line 6423
   if (!(HEAP32[$1 + 4 >> 2] | 0)) {
    HEAP32[$9 >> 2] = 4; //@line 6425
    $AsyncCtx27 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6426
    $10 = __ZN12LoRaWANStack18lora_state_machineEv($0) | 0; //@line 6427
    if (___async) {
     HEAP32[$AsyncCtx27 >> 2] = 183; //@line 6430
     HEAP32[$AsyncCtx27 + 4 >> 2] = $vararg_buffer1; //@line 6432
     HEAP32[$AsyncCtx27 + 8 >> 2] = $vararg_buffer1; //@line 6434
     sp = STACKTOP; //@line 6435
     STACKTOP = sp; //@line 6436
     return;
    }
    _emscripten_free_async_context($AsyncCtx27 | 0); //@line 6438
    if (!$10) {
     STACKTOP = sp; //@line 6441
     return;
    }
    _mbed_tracef(2, 12356, 12494, $vararg_buffer1); //@line 6443
    STACKTOP = sp; //@line 6444
    return;
   }
   HEAP32[$9 >> 2] = 6; //@line 6446
   $AsyncCtx23 = _emscripten_alloc_async_context(20, sp) | 0; //@line 6447
   $14 = __ZN12LoRaWANStack18lora_state_machineEv($0) | 0; //@line 6448
   if (___async) {
    HEAP32[$AsyncCtx23 >> 2] = 184; //@line 6451
    HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 6453
    HEAP32[$AsyncCtx23 + 8 >> 2] = $vararg_buffer3; //@line 6455
    HEAP32[$AsyncCtx23 + 12 >> 2] = $vararg_buffer3; //@line 6457
    HEAP32[$AsyncCtx23 + 16 >> 2] = $2; //@line 6459
    sp = STACKTOP; //@line 6460
    STACKTOP = sp; //@line 6461
    return;
   }
   _emscripten_free_async_context($AsyncCtx23 | 0); //@line 6463
   if (($14 | 0) != -1018) {
    _mbed_tracef(2, 12356, 12546, $vararg_buffer3); //@line 6466
   }
   $20 = $0 + 1892 | 0; //@line 6468
   $21 = HEAP32[$20 >> 2] | 0; //@line 6469
   if (!$21) {
    STACKTOP = sp; //@line 6472
    return;
   }
   $25 = HEAP32[$0 + 2288 >> 2] | 0; //@line 6476
   $27 = HEAP32[$21 + 4 >> 2] | 0; //@line 6478
   $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 6479
   FUNCTION_TABLE_vii[$27 & 31]($2, $0 + 1880 | 0); //@line 6480
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 185; //@line 6483
    HEAP32[$AsyncCtx + 4 >> 2] = $20; //@line 6485
    HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 6487
    HEAP32[$AsyncCtx + 12 >> 2] = $25; //@line 6489
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 6491
    sp = STACKTOP; //@line 6492
    STACKTOP = sp; //@line 6493
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 6495
   $32 = $2 + 12 | 0; //@line 6497
   HEAP32[$32 >> 2] = HEAP32[$20 >> 2]; //@line 6498
   $AsyncCtx19 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6499
   $33 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($25, $2, 10) | 0; //@line 6500
   if (___async) {
    HEAP32[$AsyncCtx19 >> 2] = 186; //@line 6503
    HEAP32[$AsyncCtx19 + 4 >> 2] = $32; //@line 6505
    HEAP32[$AsyncCtx19 + 8 >> 2] = $2; //@line 6507
    sp = STACKTOP; //@line 6508
    STACKTOP = sp; //@line 6509
    return;
   }
   _emscripten_free_async_context($AsyncCtx19 | 0); //@line 6511
   $36 = HEAP32[$32 >> 2] | 0; //@line 6512
   do {
    if ($36 | 0) {
     $39 = HEAP32[$36 + 8 >> 2] | 0; //@line 6517
     $AsyncCtx6 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6518
     FUNCTION_TABLE_vi[$39 & 1023]($2); //@line 6519
     if (___async) {
      HEAP32[$AsyncCtx6 >> 2] = 187; //@line 6522
      HEAP32[$AsyncCtx6 + 4 >> 2] = $33; //@line 6524
      sp = STACKTOP; //@line 6525
      STACKTOP = sp; //@line 6526
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx6 | 0); //@line 6528
      break;
     }
    }
   } while (0);
   if ($33 | 0) {
    STACKTOP = sp; //@line 6535
    return;
   }
   $AsyncCtx35 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6537
   _mbed_assert_internal(13612, 12396, 712); //@line 6538
   if (___async) {
    HEAP32[$AsyncCtx35 >> 2] = 188; //@line 6541
    sp = STACKTOP; //@line 6542
    STACKTOP = sp; //@line 6543
    return;
   }
   _emscripten_free_async_context($AsyncCtx35 | 0); //@line 6545
   STACKTOP = sp; //@line 6546
   return;
  }
 case 1:
  {
   if (HEAP32[$1 + 4 >> 2] | 0) {
    STACKTOP = sp; //@line 6554
    return;
   }
   $45 = $0 + 1908 | 0; //@line 6556
   $46 = HEAP32[$45 >> 2] | 0; //@line 6557
   if (!$46) {
    STACKTOP = sp; //@line 6560
    return;
   }
   $50 = HEAP32[$0 + 2288 >> 2] | 0; //@line 6564
   $52 = HEAP32[$46 + 4 >> 2] | 0; //@line 6566
   $AsyncCtx9 = _emscripten_alloc_async_context(24, sp) | 0; //@line 6567
   FUNCTION_TABLE_vii[$52 & 31]($3, $0 + 1896 | 0); //@line 6568
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 189; //@line 6571
    HEAP32[$AsyncCtx9 + 4 >> 2] = $45; //@line 6573
    HEAP32[$AsyncCtx9 + 8 >> 2] = $3; //@line 6575
    HEAP32[$AsyncCtx9 + 12 >> 2] = $1; //@line 6577
    HEAP32[$AsyncCtx9 + 16 >> 2] = $50; //@line 6579
    HEAP32[$AsyncCtx9 + 20 >> 2] = $3; //@line 6581
    sp = STACKTOP; //@line 6582
    STACKTOP = sp; //@line 6583
    return;
   }
   _emscripten_free_async_context($AsyncCtx9 | 0); //@line 6585
   $58 = $3 + 12 | 0; //@line 6587
   HEAP32[$58 >> 2] = HEAP32[$45 >> 2]; //@line 6588
   $60 = HEAP8[$1 + 12 >> 0] | 0; //@line 6590
   $62 = HEAP8[$1 + 13 >> 0] | 0; //@line 6592
   $AsyncCtx16 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6593
   $63 = __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1_($50, $3, $60, $62) | 0; //@line 6594
   if (___async) {
    HEAP32[$AsyncCtx16 >> 2] = 190; //@line 6597
    HEAP32[$AsyncCtx16 + 4 >> 2] = $58; //@line 6599
    HEAP32[$AsyncCtx16 + 8 >> 2] = $3; //@line 6601
    sp = STACKTOP; //@line 6602
    STACKTOP = sp; //@line 6603
    return;
   }
   _emscripten_free_async_context($AsyncCtx16 | 0); //@line 6605
   $66 = HEAP32[$58 >> 2] | 0; //@line 6606
   do {
    if ($66 | 0) {
     $69 = HEAP32[$66 + 8 >> 2] | 0; //@line 6611
     $AsyncCtx13 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6612
     FUNCTION_TABLE_vi[$69 & 1023]($3); //@line 6613
     if (___async) {
      HEAP32[$AsyncCtx13 >> 2] = 191; //@line 6616
      HEAP32[$AsyncCtx13 + 4 >> 2] = $63; //@line 6618
      sp = STACKTOP; //@line 6619
      STACKTOP = sp; //@line 6620
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx13 | 0); //@line 6622
      break;
     }
    }
   } while (0);
   if ($63 | 0) {
    STACKTOP = sp; //@line 6629
    return;
   }
   $AsyncCtx31 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6631
   _mbed_assert_internal(13612, 12396, 734); //@line 6632
   if (___async) {
    HEAP32[$AsyncCtx31 >> 2] = 192; //@line 6635
    sp = STACKTOP; //@line 6636
    STACKTOP = sp; //@line 6637
    return;
   }
   _emscripten_free_async_context($AsyncCtx31 | 0); //@line 6639
   STACKTOP = sp; //@line 6640
   return;
  }
 default:
  {
   STACKTOP = sp; //@line 6644
   return;
  }
 }
}
function __ZN7LoRaPHY13apply_cf_listEP15cflist_params_t__async_cb_324($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $42 = 0, $48 = 0, $54 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 15124
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15126
 $8 = HEAP32[$0 + 12 >> 2] | 0; //@line 15132
 $10 = HEAP32[$0 + 16 >> 2] | 0; //@line 15134
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 15136
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 15138
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 15140
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 15142
 $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 15144
 $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 15146
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 15148
 $26 = HEAP32[$0 + 48 >> 2] | 0; //@line 15150
 $28 = HEAP32[$0 + 52 >> 2] | 0; //@line 15152
 $34 = HEAP8[$2 >> 0] | 0; //@line 15153
 $39 = ($34 & 255) + (HEAPU8[$0 + 8 >> 0] | 0) & 255; //@line 15157
 $30 = (HEAP8[$0 + 9 >> 0] | 0) + 1 << 24 >> 24; //@line 15158
 if (($30 & 255) >= (HEAPU8[$8 >> 0] | 0)) {
  return;
 }
 if ((($34 & 255) + (HEAPU8[$10 >> 0] | 0) | 0) >>> 0 > ($30 & 255) >>> 0) {
  $37 = HEAP32[$14 >> 2] | 0; //@line 15171
  $38 = $39 & 255; //@line 15172
  $42 = HEAPU8[$37 + $38 >> 0] | 0; //@line 15175
  HEAP32[$16 >> 2] = $42; //@line 15176
  $48 = (HEAPU8[$37 + ($38 + 1) >> 0] | 0) << 8 | $42; //@line 15182
  HEAP32[$16 >> 2] = $48; //@line 15183
  $54 = (HEAPU8[$37 + ($38 + 2) >> 0] | 0) << 16 | $48; //@line 15189
  HEAP32[$16 >> 2] = $54 * 100; //@line 15191
  HEAP32[$18 >> 2] = 0; //@line 15192
  if ($54 | 0) {
   $59 = HEAP32[(HEAP32[$26 >> 2] | 0) + 60 >> 2] | 0; //@line 15197
   $ReallocAsyncCtx = _emscripten_realloc_async_context(56) | 0; //@line 15198
   FUNCTION_TABLE_iiii[$59 & 15]($24, $28, $30) | 0; //@line 15199
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 529; //@line 15202
    $60 = $ReallocAsyncCtx + 4 | 0; //@line 15203
    HEAP32[$60 >> 2] = $2; //@line 15204
    $61 = $ReallocAsyncCtx + 8 | 0; //@line 15205
    HEAP8[$61 >> 0] = $39; //@line 15206
    $62 = $ReallocAsyncCtx + 9 | 0; //@line 15207
    HEAP8[$62 >> 0] = $30; //@line 15208
    $63 = $ReallocAsyncCtx + 12 | 0; //@line 15209
    HEAP32[$63 >> 2] = $8; //@line 15210
    $64 = $ReallocAsyncCtx + 16 | 0; //@line 15211
    HEAP32[$64 >> 2] = $10; //@line 15212
    $65 = $ReallocAsyncCtx + 20 | 0; //@line 15213
    HEAP32[$65 >> 2] = $12; //@line 15214
    $66 = $ReallocAsyncCtx + 24 | 0; //@line 15215
    HEAP32[$66 >> 2] = $14; //@line 15216
    $67 = $ReallocAsyncCtx + 28 | 0; //@line 15217
    HEAP32[$67 >> 2] = $16; //@line 15218
    $68 = $ReallocAsyncCtx + 32 | 0; //@line 15219
    HEAP32[$68 >> 2] = $18; //@line 15220
    $69 = $ReallocAsyncCtx + 36 | 0; //@line 15221
    HEAP32[$69 >> 2] = $20; //@line 15222
    $70 = $ReallocAsyncCtx + 40 | 0; //@line 15223
    HEAP32[$70 >> 2] = $22; //@line 15224
    $71 = $ReallocAsyncCtx + 44 | 0; //@line 15225
    HEAP32[$71 >> 2] = $24; //@line 15226
    $72 = $ReallocAsyncCtx + 48 | 0; //@line 15227
    HEAP32[$72 >> 2] = $26; //@line 15228
    $73 = $ReallocAsyncCtx + 52 | 0; //@line 15229
    HEAP32[$73 >> 2] = $28; //@line 15230
    sp = STACKTOP; //@line 15231
    return;
   }
   ___async_unwind = 0; //@line 15234
   HEAP32[$ReallocAsyncCtx >> 2] = 529; //@line 15235
   $60 = $ReallocAsyncCtx + 4 | 0; //@line 15236
   HEAP32[$60 >> 2] = $2; //@line 15237
   $61 = $ReallocAsyncCtx + 8 | 0; //@line 15238
   HEAP8[$61 >> 0] = $39; //@line 15239
   $62 = $ReallocAsyncCtx + 9 | 0; //@line 15240
   HEAP8[$62 >> 0] = $30; //@line 15241
   $63 = $ReallocAsyncCtx + 12 | 0; //@line 15242
   HEAP32[$63 >> 2] = $8; //@line 15243
   $64 = $ReallocAsyncCtx + 16 | 0; //@line 15244
   HEAP32[$64 >> 2] = $10; //@line 15245
   $65 = $ReallocAsyncCtx + 20 | 0; //@line 15246
   HEAP32[$65 >> 2] = $12; //@line 15247
   $66 = $ReallocAsyncCtx + 24 | 0; //@line 15248
   HEAP32[$66 >> 2] = $14; //@line 15249
   $67 = $ReallocAsyncCtx + 28 | 0; //@line 15250
   HEAP32[$67 >> 2] = $16; //@line 15251
   $68 = $ReallocAsyncCtx + 32 | 0; //@line 15252
   HEAP32[$68 >> 2] = $18; //@line 15253
   $69 = $ReallocAsyncCtx + 36 | 0; //@line 15254
   HEAP32[$69 >> 2] = $20; //@line 15255
   $70 = $ReallocAsyncCtx + 40 | 0; //@line 15256
   HEAP32[$70 >> 2] = $22; //@line 15257
   $71 = $ReallocAsyncCtx + 44 | 0; //@line 15258
   HEAP32[$71 >> 2] = $24; //@line 15259
   $72 = $ReallocAsyncCtx + 48 | 0; //@line 15260
   HEAP32[$72 >> 2] = $26; //@line 15261
   $73 = $ReallocAsyncCtx + 52 | 0; //@line 15262
   HEAP32[$73 >> 2] = $28; //@line 15263
   sp = STACKTOP; //@line 15264
   return;
  }
 } else {
  HEAP32[$16 >> 2] = 0; //@line 15268
  HEAP8[$20 >> 0] = 0; //@line 15269
  HEAP32[$18 >> 2] = 0; //@line 15270
 }
 $76 = HEAP32[(HEAP32[$22 >> 2] | 0) + 64 >> 2] | 0; //@line 15274
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(56) | 0; //@line 15275
 FUNCTION_TABLE_iii[$76 & 31]($24, $30) | 0; //@line 15276
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 530; //@line 15279
  $77 = $ReallocAsyncCtx2 + 4 | 0; //@line 15280
  HEAP32[$77 >> 2] = $2; //@line 15281
  $78 = $ReallocAsyncCtx2 + 8 | 0; //@line 15282
  HEAP8[$78 >> 0] = $39; //@line 15283
  $79 = $ReallocAsyncCtx2 + 9 | 0; //@line 15284
  HEAP8[$79 >> 0] = $30; //@line 15285
  $80 = $ReallocAsyncCtx2 + 12 | 0; //@line 15286
  HEAP32[$80 >> 2] = $8; //@line 15287
  $81 = $ReallocAsyncCtx2 + 16 | 0; //@line 15288
  HEAP32[$81 >> 2] = $10; //@line 15289
  $82 = $ReallocAsyncCtx2 + 20 | 0; //@line 15290
  HEAP32[$82 >> 2] = $12; //@line 15291
  $83 = $ReallocAsyncCtx2 + 24 | 0; //@line 15292
  HEAP32[$83 >> 2] = $14; //@line 15293
  $84 = $ReallocAsyncCtx2 + 28 | 0; //@line 15294
  HEAP32[$84 >> 2] = $16; //@line 15295
  $85 = $ReallocAsyncCtx2 + 32 | 0; //@line 15296
  HEAP32[$85 >> 2] = $18; //@line 15297
  $86 = $ReallocAsyncCtx2 + 36 | 0; //@line 15298
  HEAP32[$86 >> 2] = $20; //@line 15299
  $87 = $ReallocAsyncCtx2 + 40 | 0; //@line 15300
  HEAP32[$87 >> 2] = $22; //@line 15301
  $88 = $ReallocAsyncCtx2 + 44 | 0; //@line 15302
  HEAP32[$88 >> 2] = $24; //@line 15303
  $89 = $ReallocAsyncCtx2 + 48 | 0; //@line 15304
  HEAP32[$89 >> 2] = $26; //@line 15305
  $90 = $ReallocAsyncCtx2 + 52 | 0; //@line 15306
  HEAP32[$90 >> 2] = $28; //@line 15307
  sp = STACKTOP; //@line 15308
  return;
 }
 ___async_unwind = 0; //@line 15311
 HEAP32[$ReallocAsyncCtx2 >> 2] = 530; //@line 15312
 $77 = $ReallocAsyncCtx2 + 4 | 0; //@line 15313
 HEAP32[$77 >> 2] = $2; //@line 15314
 $78 = $ReallocAsyncCtx2 + 8 | 0; //@line 15315
 HEAP8[$78 >> 0] = $39; //@line 15316
 $79 = $ReallocAsyncCtx2 + 9 | 0; //@line 15317
 HEAP8[$79 >> 0] = $30; //@line 15318
 $80 = $ReallocAsyncCtx2 + 12 | 0; //@line 15319
 HEAP32[$80 >> 2] = $8; //@line 15320
 $81 = $ReallocAsyncCtx2 + 16 | 0; //@line 15321
 HEAP32[$81 >> 2] = $10; //@line 15322
 $82 = $ReallocAsyncCtx2 + 20 | 0; //@line 15323
 HEAP32[$82 >> 2] = $12; //@line 15324
 $83 = $ReallocAsyncCtx2 + 24 | 0; //@line 15325
 HEAP32[$83 >> 2] = $14; //@line 15326
 $84 = $ReallocAsyncCtx2 + 28 | 0; //@line 15327
 HEAP32[$84 >> 2] = $16; //@line 15328
 $85 = $ReallocAsyncCtx2 + 32 | 0; //@line 15329
 HEAP32[$85 >> 2] = $18; //@line 15330
 $86 = $ReallocAsyncCtx2 + 36 | 0; //@line 15331
 HEAP32[$86 >> 2] = $20; //@line 15332
 $87 = $ReallocAsyncCtx2 + 40 | 0; //@line 15333
 HEAP32[$87 >> 2] = $22; //@line 15334
 $88 = $ReallocAsyncCtx2 + 44 | 0; //@line 15335
 HEAP32[$88 >> 2] = $24; //@line 15336
 $89 = $ReallocAsyncCtx2 + 48 | 0; //@line 15337
 HEAP32[$89 >> 2] = $26; //@line 15338
 $90 = $ReallocAsyncCtx2 + 52 | 0; //@line 15339
 HEAP32[$90 >> 2] = $28; //@line 15340
 sp = STACKTOP; //@line 15341
 return;
}
function __ZN7LoRaPHY13apply_cf_listEP15cflist_params_t__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $42 = 0, $48 = 0, $54 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 14896
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14898
 $8 = HEAP32[$0 + 12 >> 2] | 0; //@line 14904
 $10 = HEAP32[$0 + 16 >> 2] | 0; //@line 14906
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 14908
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 14910
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 14912
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 14914
 $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 14916
 $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 14918
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 14920
 $26 = HEAP32[$0 + 48 >> 2] | 0; //@line 14922
 $28 = HEAP32[$0 + 52 >> 2] | 0; //@line 14924
 $34 = HEAP8[$2 >> 0] | 0; //@line 14925
 $39 = ($34 & 255) + (HEAPU8[$0 + 8 >> 0] | 0) & 255; //@line 14929
 $30 = (HEAP8[$0 + 9 >> 0] | 0) + 1 << 24 >> 24; //@line 14930
 if (($30 & 255) >= (HEAPU8[$8 >> 0] | 0)) {
  return;
 }
 if ((($34 & 255) + (HEAPU8[$10 >> 0] | 0) | 0) >>> 0 > ($30 & 255) >>> 0) {
  $37 = HEAP32[$14 >> 2] | 0; //@line 14943
  $38 = $39 & 255; //@line 14944
  $42 = HEAPU8[$37 + $38 >> 0] | 0; //@line 14947
  HEAP32[$16 >> 2] = $42; //@line 14948
  $48 = (HEAPU8[$37 + ($38 + 1) >> 0] | 0) << 8 | $42; //@line 14954
  HEAP32[$16 >> 2] = $48; //@line 14955
  $54 = (HEAPU8[$37 + ($38 + 2) >> 0] | 0) << 16 | $48; //@line 14961
  HEAP32[$16 >> 2] = $54 * 100; //@line 14963
  HEAP32[$18 >> 2] = 0; //@line 14964
  if ($54 | 0) {
   $59 = HEAP32[(HEAP32[$26 >> 2] | 0) + 60 >> 2] | 0; //@line 14969
   $ReallocAsyncCtx = _emscripten_realloc_async_context(56) | 0; //@line 14970
   FUNCTION_TABLE_iiii[$59 & 15]($24, $28, $30) | 0; //@line 14971
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 529; //@line 14974
    $60 = $ReallocAsyncCtx + 4 | 0; //@line 14975
    HEAP32[$60 >> 2] = $2; //@line 14976
    $61 = $ReallocAsyncCtx + 8 | 0; //@line 14977
    HEAP8[$61 >> 0] = $39; //@line 14978
    $62 = $ReallocAsyncCtx + 9 | 0; //@line 14979
    HEAP8[$62 >> 0] = $30; //@line 14980
    $63 = $ReallocAsyncCtx + 12 | 0; //@line 14981
    HEAP32[$63 >> 2] = $8; //@line 14982
    $64 = $ReallocAsyncCtx + 16 | 0; //@line 14983
    HEAP32[$64 >> 2] = $10; //@line 14984
    $65 = $ReallocAsyncCtx + 20 | 0; //@line 14985
    HEAP32[$65 >> 2] = $12; //@line 14986
    $66 = $ReallocAsyncCtx + 24 | 0; //@line 14987
    HEAP32[$66 >> 2] = $14; //@line 14988
    $67 = $ReallocAsyncCtx + 28 | 0; //@line 14989
    HEAP32[$67 >> 2] = $16; //@line 14990
    $68 = $ReallocAsyncCtx + 32 | 0; //@line 14991
    HEAP32[$68 >> 2] = $18; //@line 14992
    $69 = $ReallocAsyncCtx + 36 | 0; //@line 14993
    HEAP32[$69 >> 2] = $20; //@line 14994
    $70 = $ReallocAsyncCtx + 40 | 0; //@line 14995
    HEAP32[$70 >> 2] = $22; //@line 14996
    $71 = $ReallocAsyncCtx + 44 | 0; //@line 14997
    HEAP32[$71 >> 2] = $24; //@line 14998
    $72 = $ReallocAsyncCtx + 48 | 0; //@line 14999
    HEAP32[$72 >> 2] = $26; //@line 15000
    $73 = $ReallocAsyncCtx + 52 | 0; //@line 15001
    HEAP32[$73 >> 2] = $28; //@line 15002
    sp = STACKTOP; //@line 15003
    return;
   }
   ___async_unwind = 0; //@line 15006
   HEAP32[$ReallocAsyncCtx >> 2] = 529; //@line 15007
   $60 = $ReallocAsyncCtx + 4 | 0; //@line 15008
   HEAP32[$60 >> 2] = $2; //@line 15009
   $61 = $ReallocAsyncCtx + 8 | 0; //@line 15010
   HEAP8[$61 >> 0] = $39; //@line 15011
   $62 = $ReallocAsyncCtx + 9 | 0; //@line 15012
   HEAP8[$62 >> 0] = $30; //@line 15013
   $63 = $ReallocAsyncCtx + 12 | 0; //@line 15014
   HEAP32[$63 >> 2] = $8; //@line 15015
   $64 = $ReallocAsyncCtx + 16 | 0; //@line 15016
   HEAP32[$64 >> 2] = $10; //@line 15017
   $65 = $ReallocAsyncCtx + 20 | 0; //@line 15018
   HEAP32[$65 >> 2] = $12; //@line 15019
   $66 = $ReallocAsyncCtx + 24 | 0; //@line 15020
   HEAP32[$66 >> 2] = $14; //@line 15021
   $67 = $ReallocAsyncCtx + 28 | 0; //@line 15022
   HEAP32[$67 >> 2] = $16; //@line 15023
   $68 = $ReallocAsyncCtx + 32 | 0; //@line 15024
   HEAP32[$68 >> 2] = $18; //@line 15025
   $69 = $ReallocAsyncCtx + 36 | 0; //@line 15026
   HEAP32[$69 >> 2] = $20; //@line 15027
   $70 = $ReallocAsyncCtx + 40 | 0; //@line 15028
   HEAP32[$70 >> 2] = $22; //@line 15029
   $71 = $ReallocAsyncCtx + 44 | 0; //@line 15030
   HEAP32[$71 >> 2] = $24; //@line 15031
   $72 = $ReallocAsyncCtx + 48 | 0; //@line 15032
   HEAP32[$72 >> 2] = $26; //@line 15033
   $73 = $ReallocAsyncCtx + 52 | 0; //@line 15034
   HEAP32[$73 >> 2] = $28; //@line 15035
   sp = STACKTOP; //@line 15036
   return;
  }
 } else {
  HEAP32[$16 >> 2] = 0; //@line 15040
  HEAP8[$20 >> 0] = 0; //@line 15041
  HEAP32[$18 >> 2] = 0; //@line 15042
 }
 $76 = HEAP32[(HEAP32[$22 >> 2] | 0) + 64 >> 2] | 0; //@line 15046
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(56) | 0; //@line 15047
 FUNCTION_TABLE_iii[$76 & 31]($24, $30) | 0; //@line 15048
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 530; //@line 15051
  $77 = $ReallocAsyncCtx2 + 4 | 0; //@line 15052
  HEAP32[$77 >> 2] = $2; //@line 15053
  $78 = $ReallocAsyncCtx2 + 8 | 0; //@line 15054
  HEAP8[$78 >> 0] = $39; //@line 15055
  $79 = $ReallocAsyncCtx2 + 9 | 0; //@line 15056
  HEAP8[$79 >> 0] = $30; //@line 15057
  $80 = $ReallocAsyncCtx2 + 12 | 0; //@line 15058
  HEAP32[$80 >> 2] = $8; //@line 15059
  $81 = $ReallocAsyncCtx2 + 16 | 0; //@line 15060
  HEAP32[$81 >> 2] = $10; //@line 15061
  $82 = $ReallocAsyncCtx2 + 20 | 0; //@line 15062
  HEAP32[$82 >> 2] = $12; //@line 15063
  $83 = $ReallocAsyncCtx2 + 24 | 0; //@line 15064
  HEAP32[$83 >> 2] = $14; //@line 15065
  $84 = $ReallocAsyncCtx2 + 28 | 0; //@line 15066
  HEAP32[$84 >> 2] = $16; //@line 15067
  $85 = $ReallocAsyncCtx2 + 32 | 0; //@line 15068
  HEAP32[$85 >> 2] = $18; //@line 15069
  $86 = $ReallocAsyncCtx2 + 36 | 0; //@line 15070
  HEAP32[$86 >> 2] = $20; //@line 15071
  $87 = $ReallocAsyncCtx2 + 40 | 0; //@line 15072
  HEAP32[$87 >> 2] = $22; //@line 15073
  $88 = $ReallocAsyncCtx2 + 44 | 0; //@line 15074
  HEAP32[$88 >> 2] = $24; //@line 15075
  $89 = $ReallocAsyncCtx2 + 48 | 0; //@line 15076
  HEAP32[$89 >> 2] = $26; //@line 15077
  $90 = $ReallocAsyncCtx2 + 52 | 0; //@line 15078
  HEAP32[$90 >> 2] = $28; //@line 15079
  sp = STACKTOP; //@line 15080
  return;
 }
 ___async_unwind = 0; //@line 15083
 HEAP32[$ReallocAsyncCtx2 >> 2] = 530; //@line 15084
 $77 = $ReallocAsyncCtx2 + 4 | 0; //@line 15085
 HEAP32[$77 >> 2] = $2; //@line 15086
 $78 = $ReallocAsyncCtx2 + 8 | 0; //@line 15087
 HEAP8[$78 >> 0] = $39; //@line 15088
 $79 = $ReallocAsyncCtx2 + 9 | 0; //@line 15089
 HEAP8[$79 >> 0] = $30; //@line 15090
 $80 = $ReallocAsyncCtx2 + 12 | 0; //@line 15091
 HEAP32[$80 >> 2] = $8; //@line 15092
 $81 = $ReallocAsyncCtx2 + 16 | 0; //@line 15093
 HEAP32[$81 >> 2] = $10; //@line 15094
 $82 = $ReallocAsyncCtx2 + 20 | 0; //@line 15095
 HEAP32[$82 >> 2] = $12; //@line 15096
 $83 = $ReallocAsyncCtx2 + 24 | 0; //@line 15097
 HEAP32[$83 >> 2] = $14; //@line 15098
 $84 = $ReallocAsyncCtx2 + 28 | 0; //@line 15099
 HEAP32[$84 >> 2] = $16; //@line 15100
 $85 = $ReallocAsyncCtx2 + 32 | 0; //@line 15101
 HEAP32[$85 >> 2] = $18; //@line 15102
 $86 = $ReallocAsyncCtx2 + 36 | 0; //@line 15103
 HEAP32[$86 >> 2] = $20; //@line 15104
 $87 = $ReallocAsyncCtx2 + 40 | 0; //@line 15105
 HEAP32[$87 >> 2] = $22; //@line 15106
 $88 = $ReallocAsyncCtx2 + 44 | 0; //@line 15107
 HEAP32[$88 >> 2] = $24; //@line 15108
 $89 = $ReallocAsyncCtx2 + 48 | 0; //@line 15109
 HEAP32[$89 >> 2] = $26; //@line 15110
 $90 = $ReallocAsyncCtx2 + 52 | 0; //@line 15111
 HEAP32[$90 >> 2] = $28; //@line 15112
 sp = STACKTOP; //@line 15113
 return;
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_312($0) {
 $0 = $0 | 0;
 var $$pre$i$i21 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 13438
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13444
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13446
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13448
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13450
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 13452
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 13454
 $$pre$i$i21 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 13455
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = $$pre$i$i21; //@line 13457
 if ($$pre$i$i21 | 0) {
  $20 = HEAP32[$$pre$i$i21 + 8 >> 2] | 0; //@line 13461
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(28) | 0; //@line 13462
  FUNCTION_TABLE_vi[$20 & 1023]($12); //@line 13463
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 486; //@line 13466
   $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 13467
   HEAP32[$21 >> 2] = $6; //@line 13468
   $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 13469
   HEAP32[$22 >> 2] = $8; //@line 13470
   $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 13471
   HEAP32[$23 >> 2] = $10; //@line 13472
   $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 13473
   HEAP32[$24 >> 2] = $12; //@line 13474
   $25 = $ReallocAsyncCtx6 + 20 | 0; //@line 13475
   HEAP32[$25 >> 2] = $14; //@line 13476
   $26 = $ReallocAsyncCtx6 + 24 | 0; //@line 13477
   HEAP32[$26 >> 2] = $16; //@line 13478
   sp = STACKTOP; //@line 13479
   return;
  }
  ___async_unwind = 0; //@line 13482
  HEAP32[$ReallocAsyncCtx6 >> 2] = 486; //@line 13483
  $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 13484
  HEAP32[$21 >> 2] = $6; //@line 13485
  $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 13486
  HEAP32[$22 >> 2] = $8; //@line 13487
  $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 13488
  HEAP32[$23 >> 2] = $10; //@line 13489
  $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 13490
  HEAP32[$24 >> 2] = $12; //@line 13491
  $25 = $ReallocAsyncCtx6 + 20 | 0; //@line 13492
  HEAP32[$25 >> 2] = $14; //@line 13493
  $26 = $ReallocAsyncCtx6 + 24 | 0; //@line 13494
  HEAP32[$26 >> 2] = $16; //@line 13495
  sp = STACKTOP; //@line 13496
  return;
 }
 $27 = $14 + 12 | 0; //@line 13499
 HEAP32[$14 >> 2] = 487; //@line 13500
 HEAP32[$14 + 4 >> 2] = 0; //@line 13502
 HEAP32[$14 + 8 >> 2] = $8; //@line 13504
 HEAP32[$27 >> 2] = 912; //@line 13505
 $28 = $8 + 1276 | 0; //@line 13506
 if (($28 | 0) == ($14 | 0)) {
  $53 = HEAP32[230] | 0; //@line 13510
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(24) | 0; //@line 13511
  FUNCTION_TABLE_vi[$53 & 1023]($14); //@line 13512
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 490; //@line 13515
   $54 = $ReallocAsyncCtx9 + 4 | 0; //@line 13516
   HEAP32[$54 >> 2] = $6; //@line 13517
   $55 = $ReallocAsyncCtx9 + 8 | 0; //@line 13518
   HEAP32[$55 >> 2] = $8; //@line 13519
   $56 = $ReallocAsyncCtx9 + 12 | 0; //@line 13520
   HEAP32[$56 >> 2] = $10; //@line 13521
   $57 = $ReallocAsyncCtx9 + 16 | 0; //@line 13522
   HEAP32[$57 >> 2] = $14; //@line 13523
   $58 = $ReallocAsyncCtx9 + 20 | 0; //@line 13524
   HEAP32[$58 >> 2] = $16; //@line 13525
   sp = STACKTOP; //@line 13526
   return;
  }
  ___async_unwind = 0; //@line 13529
  HEAP32[$ReallocAsyncCtx9 >> 2] = 490; //@line 13530
  $54 = $ReallocAsyncCtx9 + 4 | 0; //@line 13531
  HEAP32[$54 >> 2] = $6; //@line 13532
  $55 = $ReallocAsyncCtx9 + 8 | 0; //@line 13533
  HEAP32[$55 >> 2] = $8; //@line 13534
  $56 = $ReallocAsyncCtx9 + 12 | 0; //@line 13535
  HEAP32[$56 >> 2] = $10; //@line 13536
  $57 = $ReallocAsyncCtx9 + 16 | 0; //@line 13537
  HEAP32[$57 >> 2] = $14; //@line 13538
  $58 = $ReallocAsyncCtx9 + 20 | 0; //@line 13539
  HEAP32[$58 >> 2] = $16; //@line 13540
  sp = STACKTOP; //@line 13541
  return;
 }
 $30 = $8 + 1288 | 0; //@line 13544
 $31 = HEAP32[$30 >> 2] | 0; //@line 13545
 if (!$31) {
  $44 = HEAP32[229] | 0; //@line 13549
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(32) | 0; //@line 13550
  FUNCTION_TABLE_vii[$44 & 31]($28, $14); //@line 13551
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 489; //@line 13554
   $45 = $ReallocAsyncCtx8 + 4 | 0; //@line 13555
   HEAP32[$45 >> 2] = $6; //@line 13556
   $46 = $ReallocAsyncCtx8 + 8 | 0; //@line 13557
   HEAP32[$46 >> 2] = $8; //@line 13558
   $47 = $ReallocAsyncCtx8 + 12 | 0; //@line 13559
   HEAP32[$47 >> 2] = $10; //@line 13560
   $48 = $ReallocAsyncCtx8 + 16 | 0; //@line 13561
   HEAP32[$48 >> 2] = $14; //@line 13562
   $49 = $ReallocAsyncCtx8 + 20 | 0; //@line 13563
   HEAP32[$49 >> 2] = $16; //@line 13564
   $50 = $ReallocAsyncCtx8 + 24 | 0; //@line 13565
   HEAP32[$50 >> 2] = $27; //@line 13566
   $51 = $ReallocAsyncCtx8 + 28 | 0; //@line 13567
   HEAP32[$51 >> 2] = $30; //@line 13568
   sp = STACKTOP; //@line 13569
   return;
  }
  ___async_unwind = 0; //@line 13572
  HEAP32[$ReallocAsyncCtx8 >> 2] = 489; //@line 13573
  $45 = $ReallocAsyncCtx8 + 4 | 0; //@line 13574
  HEAP32[$45 >> 2] = $6; //@line 13575
  $46 = $ReallocAsyncCtx8 + 8 | 0; //@line 13576
  HEAP32[$46 >> 2] = $8; //@line 13577
  $47 = $ReallocAsyncCtx8 + 12 | 0; //@line 13578
  HEAP32[$47 >> 2] = $10; //@line 13579
  $48 = $ReallocAsyncCtx8 + 16 | 0; //@line 13580
  HEAP32[$48 >> 2] = $14; //@line 13581
  $49 = $ReallocAsyncCtx8 + 20 | 0; //@line 13582
  HEAP32[$49 >> 2] = $16; //@line 13583
  $50 = $ReallocAsyncCtx8 + 24 | 0; //@line 13584
  HEAP32[$50 >> 2] = $27; //@line 13585
  $51 = $ReallocAsyncCtx8 + 28 | 0; //@line 13586
  HEAP32[$51 >> 2] = $30; //@line 13587
  sp = STACKTOP; //@line 13588
  return;
 } else {
  $34 = HEAP32[$31 + 8 >> 2] | 0; //@line 13592
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(36) | 0; //@line 13593
  FUNCTION_TABLE_vi[$34 & 1023]($28); //@line 13594
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 488; //@line 13597
   $35 = $ReallocAsyncCtx7 + 4 | 0; //@line 13598
   HEAP32[$35 >> 2] = $6; //@line 13599
   $36 = $ReallocAsyncCtx7 + 8 | 0; //@line 13600
   HEAP32[$36 >> 2] = $8; //@line 13601
   $37 = $ReallocAsyncCtx7 + 12 | 0; //@line 13602
   HEAP32[$37 >> 2] = $10; //@line 13603
   $38 = $ReallocAsyncCtx7 + 16 | 0; //@line 13604
   HEAP32[$38 >> 2] = $27; //@line 13605
   $39 = $ReallocAsyncCtx7 + 20 | 0; //@line 13606
   HEAP32[$39 >> 2] = $28; //@line 13607
   $40 = $ReallocAsyncCtx7 + 24 | 0; //@line 13608
   HEAP32[$40 >> 2] = $14; //@line 13609
   $41 = $ReallocAsyncCtx7 + 28 | 0; //@line 13610
   HEAP32[$41 >> 2] = $16; //@line 13611
   $42 = $ReallocAsyncCtx7 + 32 | 0; //@line 13612
   HEAP32[$42 >> 2] = $30; //@line 13613
   sp = STACKTOP; //@line 13614
   return;
  }
  ___async_unwind = 0; //@line 13617
  HEAP32[$ReallocAsyncCtx7 >> 2] = 488; //@line 13618
  $35 = $ReallocAsyncCtx7 + 4 | 0; //@line 13619
  HEAP32[$35 >> 2] = $6; //@line 13620
  $36 = $ReallocAsyncCtx7 + 8 | 0; //@line 13621
  HEAP32[$36 >> 2] = $8; //@line 13622
  $37 = $ReallocAsyncCtx7 + 12 | 0; //@line 13623
  HEAP32[$37 >> 2] = $10; //@line 13624
  $38 = $ReallocAsyncCtx7 + 16 | 0; //@line 13625
  HEAP32[$38 >> 2] = $27; //@line 13626
  $39 = $ReallocAsyncCtx7 + 20 | 0; //@line 13627
  HEAP32[$39 >> 2] = $28; //@line 13628
  $40 = $ReallocAsyncCtx7 + 24 | 0; //@line 13629
  HEAP32[$40 >> 2] = $14; //@line 13630
  $41 = $ReallocAsyncCtx7 + 28 | 0; //@line 13631
  HEAP32[$41 >> 2] = $16; //@line 13632
  $42 = $ReallocAsyncCtx7 + 32 | 0; //@line 13633
  HEAP32[$42 >> 2] = $30; //@line 13634
  sp = STACKTOP; //@line 13635
  return;
 }
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $13 = 0, $15 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $27 = 0, $3 = 0, $30 = 0, $36 = 0, $37 = 0, $44 = 0, $53 = 0, $54 = 0, $58 = 0, $60 = 0, $68 = 0, $69 = 0, $75 = 0, $78 = 0, $8 = 0, $9 = 0, $90 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx20 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx31 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, sp = 0;
 sp = STACKTOP; //@line 6126
 STACKTOP = STACKTOP + 64 | 0; //@line 6127
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 6127
 $vararg_buffer3 = sp + 16 | 0; //@line 6128
 $vararg_buffer1 = sp + 8 | 0; //@line 6129
 $2 = sp + 40 | 0; //@line 6131
 $3 = sp + 24 | 0; //@line 6132
 if (!$1) {
  _mbed_tracef(2, 12356, 12843, sp); //@line 6135
  STACKTOP = sp; //@line 6136
  return;
 }
 if (HEAP32[$1 + 4 >> 2] | 0) {
  $8 = $0 + 1892 | 0; //@line 6142
  $9 = HEAP32[$8 >> 2] | 0; //@line 6143
  if (!$9) {
   STACKTOP = sp; //@line 6146
   return;
  }
  $13 = HEAP32[$0 + 2288 >> 2] | 0; //@line 6150
  $15 = HEAP32[$9 + 4 >> 2] | 0; //@line 6152
  $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 6153
  FUNCTION_TABLE_vii[$15 & 31]($2, $0 + 1880 | 0); //@line 6154
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 173; //@line 6157
   HEAP32[$AsyncCtx + 4 >> 2] = $8; //@line 6159
   HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 6161
   HEAP32[$AsyncCtx + 12 >> 2] = $13; //@line 6163
   HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 6165
   sp = STACKTOP; //@line 6166
   STACKTOP = sp; //@line 6167
   return;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6169
  $20 = $2 + 12 | 0; //@line 6171
  HEAP32[$20 >> 2] = HEAP32[$8 >> 2]; //@line 6172
  $AsyncCtx23 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6173
  $21 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($13, $2, 9) | 0; //@line 6174
  if (___async) {
   HEAP32[$AsyncCtx23 >> 2] = 174; //@line 6177
   HEAP32[$AsyncCtx23 + 4 >> 2] = $20; //@line 6179
   HEAP32[$AsyncCtx23 + 8 >> 2] = $2; //@line 6181
   sp = STACKTOP; //@line 6182
   STACKTOP = sp; //@line 6183
   return;
  }
  _emscripten_free_async_context($AsyncCtx23 | 0); //@line 6185
  $24 = HEAP32[$20 >> 2] | 0; //@line 6186
  do {
   if ($24 | 0) {
    $27 = HEAP32[$24 + 8 >> 2] | 0; //@line 6191
    $AsyncCtx6 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6192
    FUNCTION_TABLE_vi[$27 & 1023]($2); //@line 6193
    if (___async) {
     HEAP32[$AsyncCtx6 >> 2] = 175; //@line 6196
     HEAP32[$AsyncCtx6 + 4 >> 2] = $21; //@line 6198
     sp = STACKTOP; //@line 6199
     STACKTOP = sp; //@line 6200
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx6 | 0); //@line 6202
     break;
    }
   }
  } while (0);
  if ($21 | 0) {
   STACKTOP = sp; //@line 6209
   return;
  }
  $AsyncCtx31 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6211
  _mbed_assert_internal(13612, 12396, 836); //@line 6212
  if (___async) {
   HEAP32[$AsyncCtx31 >> 2] = 176; //@line 6215
   sp = STACKTOP; //@line 6216
   STACKTOP = sp; //@line 6217
   return;
  }
  _emscripten_free_async_context($AsyncCtx31 | 0); //@line 6219
  STACKTOP = sp; //@line 6220
  return;
 }
 $30 = $0 + 1960 | 0; //@line 6222
 HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + 1; //@line 6225
 if (!(HEAP8[$1 + 18 >> 0] | 0)) {
  STACKTOP = sp; //@line 6230
  return;
 }
 $36 = $1 + 9 | 0; //@line 6232
 $37 = HEAP8[$36 >> 0] | 0; //@line 6233
 if ($37 << 24 >> 24 == -32) {
  _mbed_tracef(16, 12356, 12881, $vararg_buffer1); //@line 6236
  STACKTOP = sp; //@line 6237
  return;
 }
 if (($37 + -1 & 255) >= 223) {
  if ((HEAP32[$1 >> 2] | 0) != 3) {
   STACKTOP = sp; //@line 6245
   return;
  }
 }
 HEAP32[$0 + 2240 >> 2] = 2; //@line 6249
 $44 = HEAP16[$1 + 16 >> 1] | 0; //@line 6251
 HEAP16[$0 + 2260 >> 1] = $44; //@line 6253
 HEAP8[$0 + 2253 >> 0] = HEAP8[$36 >> 0] | 0; //@line 6256
 HEAP32[$0 + 2256 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 6260
 HEAP32[$vararg_buffer3 >> 2] = $44 & 65535; //@line 6262
 _mbed_tracef(16, 12356, 12907, $vararg_buffer3); //@line 6263
 HEAP8[$0 + 2236 >> 0] = 1; //@line 6265
 $53 = $0 + 1892 | 0; //@line 6266
 $54 = HEAP32[$53 >> 2] | 0; //@line 6267
 do {
  if ($54 | 0) {
   $58 = HEAP32[$0 + 2288 >> 2] | 0; //@line 6273
   $60 = HEAP32[$54 + 4 >> 2] | 0; //@line 6275
   $AsyncCtx9 = _emscripten_alloc_async_context(32, sp) | 0; //@line 6276
   FUNCTION_TABLE_vii[$60 & 31]($3, $0 + 1880 | 0); //@line 6277
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 177; //@line 6280
    HEAP32[$AsyncCtx9 + 4 >> 2] = $53; //@line 6282
    HEAP32[$AsyncCtx9 + 8 >> 2] = $3; //@line 6284
    HEAP32[$AsyncCtx9 + 12 >> 2] = $58; //@line 6286
    HEAP32[$AsyncCtx9 + 16 >> 2] = $3; //@line 6288
    HEAP32[$AsyncCtx9 + 20 >> 2] = $1; //@line 6290
    HEAP32[$AsyncCtx9 + 24 >> 2] = $36; //@line 6292
    HEAP32[$AsyncCtx9 + 28 >> 2] = $0; //@line 6294
    sp = STACKTOP; //@line 6295
    STACKTOP = sp; //@line 6296
    return;
   }
   _emscripten_free_async_context($AsyncCtx9 | 0); //@line 6298
   $68 = $3 + 12 | 0; //@line 6300
   HEAP32[$68 >> 2] = HEAP32[$53 >> 2]; //@line 6301
   $AsyncCtx20 = _emscripten_alloc_async_context(24, sp) | 0; //@line 6302
   $69 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($58, $3, 7) | 0; //@line 6303
   if (___async) {
    HEAP32[$AsyncCtx20 >> 2] = 178; //@line 6306
    HEAP32[$AsyncCtx20 + 4 >> 2] = $68; //@line 6308
    HEAP32[$AsyncCtx20 + 8 >> 2] = $3; //@line 6310
    HEAP32[$AsyncCtx20 + 12 >> 2] = $1; //@line 6312
    HEAP32[$AsyncCtx20 + 16 >> 2] = $36; //@line 6314
    HEAP32[$AsyncCtx20 + 20 >> 2] = $0; //@line 6316
    sp = STACKTOP; //@line 6317
    STACKTOP = sp; //@line 6318
    return;
   }
   _emscripten_free_async_context($AsyncCtx20 | 0); //@line 6320
   $75 = HEAP32[$68 >> 2] | 0; //@line 6321
   do {
    if ($75 | 0) {
     $78 = HEAP32[$75 + 8 >> 2] | 0; //@line 6326
     $AsyncCtx13 = _emscripten_alloc_async_context(20, sp) | 0; //@line 6327
     FUNCTION_TABLE_vi[$78 & 1023]($3); //@line 6328
     if (___async) {
      HEAP32[$AsyncCtx13 >> 2] = 179; //@line 6331
      HEAP32[$AsyncCtx13 + 4 >> 2] = $69; //@line 6333
      HEAP32[$AsyncCtx13 + 8 >> 2] = $1; //@line 6335
      HEAP32[$AsyncCtx13 + 12 >> 2] = $36; //@line 6337
      HEAP32[$AsyncCtx13 + 16 >> 2] = $0; //@line 6339
      sp = STACKTOP; //@line 6340
      STACKTOP = sp; //@line 6341
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx13 | 0); //@line 6343
      break;
     }
    }
   } while (0);
   if (!$69) {
    $AsyncCtx27 = _emscripten_alloc_async_context(16, sp) | 0; //@line 6350
    _mbed_assert_internal(13612, 12396, 902); //@line 6351
    if (___async) {
     HEAP32[$AsyncCtx27 >> 2] = 180; //@line 6354
     HEAP32[$AsyncCtx27 + 4 >> 2] = $1; //@line 6356
     HEAP32[$AsyncCtx27 + 8 >> 2] = $36; //@line 6358
     HEAP32[$AsyncCtx27 + 12 >> 2] = $0; //@line 6360
     sp = STACKTOP; //@line 6361
     STACKTOP = sp; //@line 6362
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx27 | 0); //@line 6364
     break;
    }
   }
  }
 } while (0);
 if (!(HEAP8[$1 + 11 >> 0] | 0)) {
  STACKTOP = sp; //@line 6374
  return;
 }
 $90 = HEAP8[$36 >> 0] | 0; //@line 6376
 $AsyncCtx17 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6377
 __ZN12LoRaWANStack9handle_txEhPKhth($0, $90, 0, 0, 2) | 0; //@line 6378
 if (___async) {
  HEAP32[$AsyncCtx17 >> 2] = 181; //@line 6381
  sp = STACKTOP; //@line 6382
  STACKTOP = sp; //@line 6383
  return;
 }
 _emscripten_free_async_context($AsyncCtx17 | 0); //@line 6385
 STACKTOP = sp; //@line 6386
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $103 = 0, $106 = 0, $107 = 0, $109 = 0, $116 = 0, $119 = 0, $12 = 0, $121 = 0, $122 = 0, $127 = 0, $130 = 0, $19 = 0, $20 = 0, $23 = 0, $29 = 0, $35 = 0, $41 = 0, $42 = 0, $43 = 0, $46 = 0, $6 = 0, $60 = 0, $63 = 0, $67 = 0, $7 = 0, $85 = 0, $88 = 0, $90 = 0, $91 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx6 = 0, $switch$selectcmp$i = 0, $switch$selectcmp4$i = 0, sp = 0;
 sp = STACKTOP; //@line 22847
 $6 = $1 + 1 | 0; //@line 22850
 $7 = HEAP8[$6 >> 0] | 0; //@line 22851
 $10 = HEAP8[(HEAP32[$0 + 88 >> 2] | 0) + ($7 << 24 >> 24) >> 0] | 0; //@line 22854
 $12 = HEAP32[$0 + 112 >> 2] | 0; //@line 22856
 $19 = $1 + 2 | 0; //@line 22863
 $20 = HEAP8[$19 >> 0] | 0; //@line 22864
 $23 = HEAP8[(HEAP32[$0 + 72 >> 2] | 0) + ((HEAPU8[$12 + ((HEAPU8[$1 >> 0] | 0) * 12 | 0) + 9 >> 0] | 0) * 24 | 0) + 2 >> 0] | 0; //@line 22867
 if ($20 << 24 >> 24 > $23 << 24 >> 24) {
  HEAP8[$19 >> 0] = $23; //@line 22870
  $35 = $23; //@line 22871
 } else {
  $35 = $20; //@line 22873
 }
 $29 = HEAP32[(HEAP32[$0 + 80 >> 2] | 0) + (($7 & 255) << 2) >> 2] | 0; //@line 22879
 $switch$selectcmp$i = ($29 | 0) == 25e4; //@line 22880
 $switch$selectcmp4$i = ($29 | 0) == 5e5; //@line 22881
 $41 = ~~+Math_floor(+(+HEAPF32[$1 + 4 >> 2] - +($35 << 24 >> 24 << 1 >>> 0) - +HEAPF32[$1 + 8 >> 2])); //@line 22892
 $42 = $0 + 4 | 0; //@line 22893
 $43 = HEAP32[$42 >> 2] | 0; //@line 22894
 $46 = HEAP32[(HEAP32[$43 >> 2] | 0) + 72 >> 2] | 0; //@line 22897
 $AsyncCtx = _emscripten_alloc_async_context(44, sp) | 0; //@line 22898
 FUNCTION_TABLE_vi[$46 & 1023]($43); //@line 22899
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 540; //@line 22902
  HEAP32[$AsyncCtx + 4 >> 2] = $42; //@line 22904
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 22906
  HEAP32[$AsyncCtx + 12 >> 2] = $12; //@line 22908
  HEAP32[$AsyncCtx + 16 >> 2] = $6; //@line 22910
  HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 22912
  HEAP8[$AsyncCtx + 24 >> 0] = $switch$selectcmp$i & 1; //@line 22915
  HEAP8[$AsyncCtx + 25 >> 0] = $switch$selectcmp4$i & 1; //@line 22918
  HEAP8[$AsyncCtx + 26 >> 0] = $10; //@line 22920
  HEAP8[$AsyncCtx + 27 >> 0] = $41; //@line 22922
  HEAP32[$AsyncCtx + 28 >> 2] = $1; //@line 22924
  HEAP32[$AsyncCtx + 32 >> 2] = $3; //@line 22926
  HEAP32[$AsyncCtx + 36 >> 2] = $19; //@line 22928
  HEAP32[$AsyncCtx + 40 >> 2] = $2; //@line 22930
  sp = STACKTOP; //@line 22931
  return 0; //@line 22932
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 22934
 $60 = HEAP32[$42 >> 2] | 0; //@line 22935
 $63 = HEAP32[(HEAP32[$60 >> 2] | 0) + 32 >> 2] | 0; //@line 22938
 $67 = HEAP32[$12 + ((HEAPU8[$1 >> 0] | 0) * 12 | 0) >> 2] | 0; //@line 22942
 $AsyncCtx2 = _emscripten_alloc_async_context(36, sp) | 0; //@line 22943
 FUNCTION_TABLE_vii[$63 & 31]($60, $67); //@line 22944
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 541; //@line 22947
  HEAP32[$AsyncCtx2 + 4 >> 2] = $6; //@line 22949
  HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 22951
  HEAP32[$AsyncCtx2 + 12 >> 2] = $42; //@line 22953
  HEAP8[$AsyncCtx2 + 16 >> 0] = $switch$selectcmp$i & 1; //@line 22956
  HEAP8[$AsyncCtx2 + 17 >> 0] = $switch$selectcmp4$i & 1; //@line 22959
  HEAP8[$AsyncCtx2 + 18 >> 0] = $10; //@line 22961
  HEAP8[$AsyncCtx2 + 19 >> 0] = $41; //@line 22963
  HEAP32[$AsyncCtx2 + 20 >> 2] = $1; //@line 22965
  HEAP32[$AsyncCtx2 + 24 >> 2] = $3; //@line 22967
  HEAP32[$AsyncCtx2 + 28 >> 2] = $19; //@line 22969
  HEAP32[$AsyncCtx2 + 32 >> 2] = $2; //@line 22971
  sp = STACKTOP; //@line 22972
  return 0; //@line 22973
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 22975
 $85 = HEAP32[$42 >> 2] | 0; //@line 22982
 $88 = HEAP32[(HEAP32[$85 >> 2] | 0) + 20 >> 2] | 0; //@line 22985
 $90 = $switch$selectcmp4$i ? 2 : $switch$selectcmp$i & 1; //@line 22987
 $91 = $10 << 24 >> 24; //@line 22988
 do {
  if ((HEAP8[$6 >> 0] | 0) == (HEAPU8[$0 + 27 >> 0] | 0)) {
   $AsyncCtx6 = _emscripten_alloc_async_context(24, sp) | 0; //@line 22992
   FUNCTION_TABLE_viiiiiiiiiiiiii[$88 & 1]($85, 0, $41, 25e3, $90, $91 * 1e3 | 0, 0, 5, 0, 1, 0, 0, 0, 3e3); //@line 22993
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 542; //@line 22996
    HEAP32[$AsyncCtx6 + 4 >> 2] = $42; //@line 22998
    HEAP32[$AsyncCtx6 + 8 >> 2] = $1; //@line 23000
    HEAP32[$AsyncCtx6 + 12 >> 2] = $3; //@line 23002
    HEAP32[$AsyncCtx6 + 16 >> 2] = $19; //@line 23004
    HEAP32[$AsyncCtx6 + 20 >> 2] = $2; //@line 23006
    sp = STACKTOP; //@line 23007
    return 0; //@line 23008
   } else {
    _emscripten_free_async_context($AsyncCtx6 | 0); //@line 23010
    $$0 = 0; //@line 23011
    break;
   }
  } else {
   $AsyncCtx10 = _emscripten_alloc_async_context(24, sp) | 0; //@line 23015
   FUNCTION_TABLE_viiiiiiiiiiiiii[$88 & 1]($85, 1, $41, 0, $90, $91, 1, 8, 0, 1, 0, 0, 0, 3e3); //@line 23016
   if (___async) {
    HEAP32[$AsyncCtx10 >> 2] = 543; //@line 23019
    HEAP32[$AsyncCtx10 + 4 >> 2] = $42; //@line 23021
    HEAP32[$AsyncCtx10 + 8 >> 2] = $1; //@line 23023
    HEAP32[$AsyncCtx10 + 12 >> 2] = $3; //@line 23025
    HEAP32[$AsyncCtx10 + 16 >> 2] = $19; //@line 23027
    HEAP32[$AsyncCtx10 + 20 >> 2] = $2; //@line 23029
    sp = STACKTOP; //@line 23030
    return 0; //@line 23031
   } else {
    _emscripten_free_async_context($AsyncCtx10 | 0); //@line 23033
    $$0 = 1; //@line 23034
    break;
   }
  }
 } while (0);
 $103 = HEAP32[$42 >> 2] | 0; //@line 23039
 $106 = HEAP32[(HEAP32[$103 >> 2] | 0) + 44 >> 2] | 0; //@line 23042
 $107 = $1 + 12 | 0; //@line 23043
 $109 = HEAP16[$107 >> 1] & 255; //@line 23045
 $AsyncCtx14 = _emscripten_alloc_async_context(28, sp) | 0; //@line 23046
 FUNCTION_TABLE_viii[$106 & 7]($103, $$0, $109); //@line 23047
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 544; //@line 23050
  HEAP32[$AsyncCtx14 + 4 >> 2] = $42; //@line 23052
  HEAP32[$AsyncCtx14 + 8 >> 2] = $107; //@line 23054
  HEAP32[$AsyncCtx14 + 12 >> 2] = $$0; //@line 23056
  HEAP32[$AsyncCtx14 + 16 >> 2] = $3; //@line 23058
  HEAP32[$AsyncCtx14 + 20 >> 2] = $19; //@line 23060
  HEAP32[$AsyncCtx14 + 24 >> 2] = $2; //@line 23062
  sp = STACKTOP; //@line 23063
  return 0; //@line 23064
 }
 _emscripten_free_async_context($AsyncCtx14 | 0); //@line 23066
 $116 = HEAP32[$42 >> 2] | 0; //@line 23067
 $119 = HEAP32[(HEAP32[$116 >> 2] | 0) + 52 >> 2] | 0; //@line 23070
 $121 = HEAP16[$107 >> 1] & 255; //@line 23072
 $AsyncCtx17 = _emscripten_alloc_async_context(20, sp) | 0; //@line 23073
 $122 = FUNCTION_TABLE_iiii[$119 & 15]($116, $$0, $121) | 0; //@line 23074
 if (___async) {
  HEAP32[$AsyncCtx17 >> 2] = 545; //@line 23077
  HEAP32[$AsyncCtx17 + 4 >> 2] = $3; //@line 23079
  HEAP32[$AsyncCtx17 + 8 >> 2] = $42; //@line 23081
  HEAP32[$AsyncCtx17 + 12 >> 2] = $19; //@line 23083
  HEAP32[$AsyncCtx17 + 16 >> 2] = $2; //@line 23085
  sp = STACKTOP; //@line 23086
  return 0; //@line 23087
 }
 _emscripten_free_async_context($AsyncCtx17 | 0); //@line 23089
 HEAP32[$3 >> 2] = $122; //@line 23090
 $127 = HEAP32[$42 >> 2] | 0; //@line 23091
 $130 = HEAP32[(HEAP32[$127 >> 2] | 0) + 76 >> 2] | 0; //@line 23094
 $AsyncCtx20 = _emscripten_alloc_async_context(12, sp) | 0; //@line 23095
 FUNCTION_TABLE_vi[$130 & 1023]($127); //@line 23096
 if (___async) {
  HEAP32[$AsyncCtx20 >> 2] = 546; //@line 23099
  HEAP32[$AsyncCtx20 + 4 >> 2] = $19; //@line 23101
  HEAP32[$AsyncCtx20 + 8 >> 2] = $2; //@line 23103
  sp = STACKTOP; //@line 23104
  return 0; //@line 23105
 } else {
  _emscripten_free_async_context($AsyncCtx20 | 0); //@line 23107
  HEAP8[$2 >> 0] = HEAP8[$19 >> 0] | 0; //@line 23109
  return 1; //@line 23110
 }
 return 0; //@line 23112
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_182($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $12 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $39 = 0, $4 = 0, $40 = 0, $42 = 0, $43 = 0, $44 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $56 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $64 = 0, $65 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $8 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 31430
 STACKTOP = STACKTOP + 16 | 0; //@line 31431
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 31431
 $$byval_copy = sp; //@line 31432
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31434
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31436
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31438
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31440
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31444
 if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($2 + 4 | 0) | 0) {
  _mbed_tracef(16, 13728, 13889, $12); //@line 31450
  HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($2 + 264 | 0) | 0) >> 2] = 4; //@line 31453
  $20 = HEAP8[$4 >> 0] | 16; //@line 31455
  HEAP8[$4 >> 0] = $20; //@line 31456
  $22 = $20; //@line 31457
 } else {
  $22 = HEAP8[$4 >> 0] | 0; //@line 31460
 }
 $21 = $22 & -33; //@line 31462
 HEAP8[$4 >> 0] = $21; //@line 31463
 do {
  if (!($21 & 2)) {
   $56 = $21; //@line 31468
  } else {
   $25 = $21 & -3; //@line 31470
   HEAP8[$4 >> 0] = $25; //@line 31471
   if ((HEAP32[$2 + 360 >> 2] | 0) == 2) {
    _mbed_tracef(16, 13728, 13747, $8); //@line 31476
    $30 = HEAP32[$2 + 1328 >> 2] | 0; //@line 31478
    HEAP32[$6 >> 2] = 293; //@line 31479
    HEAP32[$6 + 4 >> 2] = 0; //@line 31481
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 31482
    HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 31483
    HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 31483
    $31 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($30, $2, $$byval_copy) | 0; //@line 31484
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 403; //@line 31487
     $32 = $ReallocAsyncCtx8 + 4 | 0; //@line 31488
     HEAP32[$32 >> 2] = $4; //@line 31489
     $33 = $ReallocAsyncCtx8 + 8 | 0; //@line 31490
     HEAP32[$33 >> 2] = $2; //@line 31491
     $34 = $ReallocAsyncCtx8 + 12 | 0; //@line 31492
     HEAP32[$34 >> 2] = $6; //@line 31493
     sp = STACKTOP; //@line 31494
     STACKTOP = sp; //@line 31495
     return;
    }
    HEAP32[___async_retval >> 2] = $31; //@line 31498
    ___async_unwind = 0; //@line 31499
    HEAP32[$ReallocAsyncCtx8 >> 2] = 403; //@line 31500
    $32 = $ReallocAsyncCtx8 + 4 | 0; //@line 31501
    HEAP32[$32 >> 2] = $4; //@line 31502
    $33 = $ReallocAsyncCtx8 + 8 | 0; //@line 31503
    HEAP32[$33 >> 2] = $2; //@line 31504
    $34 = $ReallocAsyncCtx8 + 12 | 0; //@line 31505
    HEAP32[$34 >> 2] = $6; //@line 31506
    sp = STACKTOP; //@line 31507
    STACKTOP = sp; //@line 31508
    return;
   }
   if ($25 & 4) {
    $54 = $25 & -5; //@line 31513
    HEAP8[$4 >> 0] = $54; //@line 31514
    $56 = $54; //@line 31515
    break;
   }
   $39 = HEAP32[$2 + 1324 >> 2] | 0; //@line 31519
   $40 = $39 + 16 | 0; //@line 31520
   $42 = __ZN11LoRaMacMcps14get_indicationEv($2 + 288 | 0) | 0; //@line 31522
   $43 = $39 + 28 | 0; //@line 31523
   $44 = HEAP32[$43 >> 2] | 0; //@line 31524
   if (!$44) {
    $ReallocAsyncCtx13 = _emscripten_realloc_async_context(24) | 0; //@line 31527
    _mbed_assert_internal(15679, 15684, 1102); //@line 31528
    if (___async) {
     HEAP32[$ReallocAsyncCtx13 >> 2] = 405; //@line 31531
     $46 = $ReallocAsyncCtx13 + 4 | 0; //@line 31532
     HEAP32[$46 >> 2] = $43; //@line 31533
     $47 = $ReallocAsyncCtx13 + 8 | 0; //@line 31534
     HEAP32[$47 >> 2] = $40; //@line 31535
     $48 = $ReallocAsyncCtx13 + 12 | 0; //@line 31536
     HEAP32[$48 >> 2] = $42; //@line 31537
     $49 = $ReallocAsyncCtx13 + 16 | 0; //@line 31538
     HEAP32[$49 >> 2] = $4; //@line 31539
     $50 = $ReallocAsyncCtx13 + 20 | 0; //@line 31540
     HEAP32[$50 >> 2] = $2; //@line 31541
     sp = STACKTOP; //@line 31542
     STACKTOP = sp; //@line 31543
     return;
    }
    ___async_unwind = 0; //@line 31545
    HEAP32[$ReallocAsyncCtx13 >> 2] = 405; //@line 31546
    $46 = $ReallocAsyncCtx13 + 4 | 0; //@line 31547
    HEAP32[$46 >> 2] = $43; //@line 31548
    $47 = $ReallocAsyncCtx13 + 8 | 0; //@line 31549
    HEAP32[$47 >> 2] = $40; //@line 31550
    $48 = $ReallocAsyncCtx13 + 12 | 0; //@line 31551
    HEAP32[$48 >> 2] = $42; //@line 31552
    $49 = $ReallocAsyncCtx13 + 16 | 0; //@line 31553
    HEAP32[$49 >> 2] = $4; //@line 31554
    $50 = $ReallocAsyncCtx13 + 20 | 0; //@line 31555
    HEAP32[$50 >> 2] = $2; //@line 31556
    sp = STACKTOP; //@line 31557
    STACKTOP = sp; //@line 31558
    return;
   } else {
    $51 = HEAP32[$44 >> 2] | 0; //@line 31560
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 31561
    FUNCTION_TABLE_vii[$51 & 31]($40, $42); //@line 31562
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 406; //@line 31565
     $52 = $ReallocAsyncCtx4 + 4 | 0; //@line 31566
     HEAP32[$52 >> 2] = $4; //@line 31567
     $53 = $ReallocAsyncCtx4 + 8 | 0; //@line 31568
     HEAP32[$53 >> 2] = $2; //@line 31569
     sp = STACKTOP; //@line 31570
     STACKTOP = sp; //@line 31571
     return;
    }
    ___async_unwind = 0; //@line 31573
    HEAP32[$ReallocAsyncCtx4 >> 2] = 406; //@line 31574
    $52 = $ReallocAsyncCtx4 + 4 | 0; //@line 31575
    HEAP32[$52 >> 2] = $4; //@line 31576
    $53 = $ReallocAsyncCtx4 + 8 | 0; //@line 31577
    HEAP32[$53 >> 2] = $2; //@line 31578
    sp = STACKTOP; //@line 31579
    STACKTOP = sp; //@line 31580
    return;
   }
  }
 } while (0);
 if (!($56 & 16)) {
  STACKTOP = sp; //@line 31587
  return;
 }
 HEAP8[$4 >> 0] = $56 & -17; //@line 31590
 $60 = HEAP32[$2 + 1324 >> 2] | 0; //@line 31592
 $61 = $60 + 48 | 0; //@line 31593
 $63 = __ZN11LoRaMacMlme14get_indicationEv($2 + 264 | 0) | 0; //@line 31595
 $64 = $60 + 60 | 0; //@line 31596
 $65 = HEAP32[$64 >> 2] | 0; //@line 31597
 if (!$65) {
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(16) | 0; //@line 31600
  _mbed_assert_internal(15679, 15684, 1102); //@line 31601
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 407; //@line 31604
   $67 = $ReallocAsyncCtx12 + 4 | 0; //@line 31605
   HEAP32[$67 >> 2] = $64; //@line 31606
   $68 = $ReallocAsyncCtx12 + 8 | 0; //@line 31607
   HEAP32[$68 >> 2] = $61; //@line 31608
   $69 = $ReallocAsyncCtx12 + 12 | 0; //@line 31609
   HEAP32[$69 >> 2] = $63; //@line 31610
   sp = STACKTOP; //@line 31611
   STACKTOP = sp; //@line 31612
   return;
  }
  ___async_unwind = 0; //@line 31614
  HEAP32[$ReallocAsyncCtx12 >> 2] = 407; //@line 31615
  $67 = $ReallocAsyncCtx12 + 4 | 0; //@line 31616
  HEAP32[$67 >> 2] = $64; //@line 31617
  $68 = $ReallocAsyncCtx12 + 8 | 0; //@line 31618
  HEAP32[$68 >> 2] = $61; //@line 31619
  $69 = $ReallocAsyncCtx12 + 12 | 0; //@line 31620
  HEAP32[$69 >> 2] = $63; //@line 31621
  sp = STACKTOP; //@line 31622
  STACKTOP = sp; //@line 31623
  return;
 } else {
  $70 = HEAP32[$65 >> 2] | 0; //@line 31625
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 31626
  FUNCTION_TABLE_vii[$70 & 31]($61, $63); //@line 31627
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 408; //@line 31630
   sp = STACKTOP; //@line 31631
   STACKTOP = sp; //@line 31632
   return;
  }
  ___async_unwind = 0; //@line 31634
  HEAP32[$ReallocAsyncCtx5 >> 2] = 408; //@line 31635
  sp = STACKTOP; //@line 31636
  STACKTOP = sp; //@line 31637
  return;
 }
}
function _mbedtls_gcm_setkey__async_cb($0) {
 $0 = $0 | 0;
 var $$0$i = 0, $103 = 0, $105 = 0, $106 = 0, $107 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $114 = 0, $116 = 0, $121 = 0, $126 = 0, $128 = 0, $129 = 0, $130 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $137 = 0, $139 = 0, $144 = 0, $149 = 0, $151 = 0, $152 = 0, $153 = 0, $155 = 0, $156 = 0, $157 = 0, $160 = 0, $162 = 0, $167 = 0, $171 = 0, $172 = 0, $174 = 0, $178 = 0, $179 = 0, $181 = 0, $185 = 0, $186 = 0, $188 = 0, $192 = 0, $193 = 0, $195 = 0, $199 = 0, $200 = 0, $202 = 0, $206 = 0, $207 = 0, $209 = 0, $213 = 0, $214 = 0, $216 = 0, $220 = 0, $221 = 0, $223 = 0, $230 = 0, $237 = 0, $244 = 0, $251 = 0, $258 = 0, $265 = 0, $27 = 0, $272 = 0, $279 = 0, $286 = 0, $293 = 0, $300 = 0, $307 = 0, $314 = 0, $321 = 0, $4 = 0, $45 = 0, $6 = 0, $63 = 0, $81 = 0, $83 = 0, $88 = 0, $93 = 0, $98 = 0, $AsyncRetVal = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1678
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1680
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 1684
 if (!$AsyncRetVal) {
  $27 = (HEAPU8[$4 + 1 >> 0] | 0) << 16 | (HEAPU8[HEAP32[$0 + 4 >> 2] >> 0] | 0) << 24 | (HEAPU8[$4 + 2 >> 0] | 0) << 8 | (HEAPU8[$4 + 3 >> 0] | 0); //@line 1703
  $45 = (HEAPU8[$4 + 5 >> 0] | 0) << 16 | (HEAPU8[$4 + 4 >> 0] | 0) << 24 | (HEAPU8[$4 + 6 >> 0] | 0) << 8 | (HEAPU8[$4 + 7 >> 0] | 0); //@line 1721
  $63 = (HEAPU8[$4 + 9 >> 0] | 0) << 16 | (HEAPU8[$4 + 8 >> 0] | 0) << 24 | (HEAPU8[$4 + 10 >> 0] | 0) << 8 | (HEAPU8[$4 + 11 >> 0] | 0); //@line 1739
  $81 = (HEAPU8[$4 + 13 >> 0] | 0) << 16 | (HEAPU8[$4 + 12 >> 0] | 0) << 24 | (HEAPU8[$4 + 14 >> 0] | 0) << 8 | (HEAPU8[$4 + 15 >> 0] | 0); //@line 1757
  $83 = $6 + 136 | 0; //@line 1759
  HEAP32[$83 >> 2] = $81; //@line 1761
  HEAP32[$83 + 4 >> 2] = $63; //@line 1764
  $88 = $6 + 264 | 0; //@line 1766
  HEAP32[$88 >> 2] = $45; //@line 1768
  HEAP32[$88 + 4 >> 2] = $27; //@line 1771
  $93 = $6 + 200 | 0; //@line 1773
  HEAP32[$93 >> 2] = 0; //@line 1775
  HEAP32[$93 + 4 >> 2] = 0; //@line 1778
  $98 = $6 + 72 | 0; //@line 1780
  HEAP32[$98 >> 2] = 0; //@line 1782
  HEAP32[$98 + 4 >> 2] = 0; //@line 1785
  $103 = _i64Subtract(0, 0, $81 & 1 | 0, 0) | 0; //@line 1787
  $105 = _bitshift64Shl($45 | 0, 0, 63) | 0; //@line 1789
  $106 = tempRet0; //@line 1790
  $107 = _bitshift64Lshr($81 | 0, $63 | 0, 1) | 0; //@line 1791
  $109 = $107 | $105; //@line 1793
  $110 = tempRet0 | $106; //@line 1794
  $111 = _bitshift64Lshr($45 | 0, $27 | 0, 1) | 0; //@line 1795
  $112 = tempRet0; //@line 1796
  $114 = $103 & -520093696 ^ $112; //@line 1798
  $116 = $6 + 104 | 0; //@line 1800
  HEAP32[$116 >> 2] = $109; //@line 1802
  HEAP32[$116 + 4 >> 2] = $110; //@line 1805
  $121 = $6 + 232 | 0; //@line 1807
  HEAP32[$121 >> 2] = $111; //@line 1809
  HEAP32[$121 + 4 >> 2] = $114; //@line 1812
  $126 = _i64Subtract(0, 0, $107 & 1 | 0, 0) | 0; //@line 1814
  $128 = _bitshift64Shl($111 | 0, $112 | 0, 63) | 0; //@line 1816
  $129 = tempRet0; //@line 1817
  $130 = _bitshift64Lshr($109 | 0, $110 | 0, 1) | 0; //@line 1818
  $132 = $130 | $128; //@line 1820
  $133 = tempRet0 | $129; //@line 1821
  $134 = _bitshift64Lshr($111 | 0, $114 | 0, 1) | 0; //@line 1822
  $135 = tempRet0; //@line 1823
  $137 = $126 & -520093696 ^ $135; //@line 1825
  $139 = $6 + 88 | 0; //@line 1827
  HEAP32[$139 >> 2] = $132; //@line 1829
  HEAP32[$139 + 4 >> 2] = $133; //@line 1832
  $144 = $6 + 216 | 0; //@line 1834
  HEAP32[$144 >> 2] = $134; //@line 1836
  HEAP32[$144 + 4 >> 2] = $137; //@line 1839
  $149 = _i64Subtract(0, 0, $130 & 1 | 0, 0) | 0; //@line 1841
  $151 = _bitshift64Shl($134 | 0, $135 | 0, 63) | 0; //@line 1843
  $152 = tempRet0; //@line 1844
  $153 = _bitshift64Lshr($132 | 0, $133 | 0, 1) | 0; //@line 1845
  $155 = $151 | $153; //@line 1847
  $156 = $152 | tempRet0; //@line 1848
  $157 = _bitshift64Lshr($134 | 0, $137 | 0, 1) | 0; //@line 1849
  $160 = $149 & -520093696 ^ tempRet0; //@line 1852
  $162 = $6 + 80 | 0; //@line 1854
  HEAP32[$162 >> 2] = $155; //@line 1856
  HEAP32[$162 + 4 >> 2] = $156; //@line 1859
  $167 = $6 + 208 | 0; //@line 1861
  HEAP32[$167 >> 2] = $157; //@line 1863
  HEAP32[$167 + 4 >> 2] = $160; //@line 1866
  $171 = $157 ^ $134; //@line 1867
  $172 = $160 ^ $137; //@line 1868
  $174 = $6 + 224 | 0; //@line 1870
  HEAP32[$174 >> 2] = $171; //@line 1872
  HEAP32[$174 + 4 >> 2] = $172; //@line 1875
  $178 = $155 ^ $132; //@line 1876
  $179 = $156 ^ $133; //@line 1877
  $181 = $6 + 96 | 0; //@line 1879
  HEAP32[$181 >> 2] = $178; //@line 1881
  HEAP32[$181 + 4 >> 2] = $179; //@line 1884
  $185 = $157 ^ $111; //@line 1885
  $186 = $160 ^ $114; //@line 1886
  $188 = $6 + 240 | 0; //@line 1888
  HEAP32[$188 >> 2] = $185; //@line 1890
  HEAP32[$188 + 4 >> 2] = $186; //@line 1893
  $192 = $155 ^ $109; //@line 1894
  $193 = $156 ^ $110; //@line 1895
  $195 = $6 + 112 | 0; //@line 1897
  HEAP32[$195 >> 2] = $192; //@line 1899
  HEAP32[$195 + 4 >> 2] = $193; //@line 1902
  $199 = $134 ^ $111; //@line 1903
  $200 = $137 ^ $114; //@line 1904
  $202 = $6 + 248 | 0; //@line 1906
  HEAP32[$202 >> 2] = $199; //@line 1908
  HEAP32[$202 + 4 >> 2] = $200; //@line 1911
  $206 = $132 ^ $109; //@line 1912
  $207 = $133 ^ $110; //@line 1913
  $209 = $6 + 120 | 0; //@line 1915
  HEAP32[$209 >> 2] = $206; //@line 1917
  HEAP32[$209 + 4 >> 2] = $207; //@line 1920
  $213 = $171 ^ $111; //@line 1921
  $214 = $172 ^ $114; //@line 1922
  $216 = $6 + 256 | 0; //@line 1924
  HEAP32[$216 >> 2] = $213; //@line 1926
  HEAP32[$216 + 4 >> 2] = $214; //@line 1929
  $220 = $178 ^ $109; //@line 1930
  $221 = $179 ^ $110; //@line 1931
  $223 = $6 + 128 | 0; //@line 1933
  HEAP32[$223 >> 2] = $220; //@line 1935
  HEAP32[$223 + 4 >> 2] = $221; //@line 1938
  $230 = $6 + 272 | 0; //@line 1942
  HEAP32[$230 >> 2] = $157 ^ $45; //@line 1944
  HEAP32[$230 + 4 >> 2] = $160 ^ $27; //@line 1947
  $237 = $6 + 144 | 0; //@line 1951
  HEAP32[$237 >> 2] = $155 ^ $81; //@line 1953
  HEAP32[$237 + 4 >> 2] = $156 ^ $63; //@line 1956
  $244 = $6 + 280 | 0; //@line 1960
  HEAP32[$244 >> 2] = $134 ^ $45; //@line 1962
  HEAP32[$244 + 4 >> 2] = $137 ^ $27; //@line 1965
  $251 = $6 + 152 | 0; //@line 1969
  HEAP32[$251 >> 2] = $132 ^ $81; //@line 1971
  HEAP32[$251 + 4 >> 2] = $133 ^ $63; //@line 1974
  $258 = $6 + 288 | 0; //@line 1978
  HEAP32[$258 >> 2] = $171 ^ $45; //@line 1980
  HEAP32[$258 + 4 >> 2] = $172 ^ $27; //@line 1983
  $265 = $6 + 160 | 0; //@line 1987
  HEAP32[$265 >> 2] = $178 ^ $81; //@line 1989
  HEAP32[$265 + 4 >> 2] = $179 ^ $63; //@line 1992
  $272 = $6 + 296 | 0; //@line 1996
  HEAP32[$272 >> 2] = $111 ^ $45; //@line 1998
  HEAP32[$272 + 4 >> 2] = $114 ^ $27; //@line 2001
  $279 = $6 + 168 | 0; //@line 2005
  HEAP32[$279 >> 2] = $109 ^ $81; //@line 2007
  HEAP32[$279 + 4 >> 2] = $110 ^ $63; //@line 2010
  $286 = $6 + 304 | 0; //@line 2014
  HEAP32[$286 >> 2] = $185 ^ $45; //@line 2016
  HEAP32[$286 + 4 >> 2] = $186 ^ $27; //@line 2019
  $293 = $6 + 176 | 0; //@line 2023
  HEAP32[$293 >> 2] = $192 ^ $81; //@line 2025
  HEAP32[$293 + 4 >> 2] = $193 ^ $63; //@line 2028
  $300 = $6 + 312 | 0; //@line 2032
  HEAP32[$300 >> 2] = $199 ^ $45; //@line 2034
  HEAP32[$300 + 4 >> 2] = $200 ^ $27; //@line 2037
  $307 = $6 + 184 | 0; //@line 2041
  HEAP32[$307 >> 2] = $206 ^ $81; //@line 2043
  HEAP32[$307 + 4 >> 2] = $207 ^ $63; //@line 2046
  $314 = $6 + 320 | 0; //@line 2050
  HEAP32[$314 >> 2] = $213 ^ $45; //@line 2052
  HEAP32[$314 + 4 >> 2] = $214 ^ $27; //@line 2055
  $321 = $6 + 192 | 0; //@line 2059
  HEAP32[$321 >> 2] = $220 ^ $81; //@line 2061
  HEAP32[$321 + 4 >> 2] = $221 ^ $63; //@line 2064
  $$0$i = 0; //@line 2065
 } else {
  $$0$i = $AsyncRetVal; //@line 2067
 }
 HEAP32[___async_retval >> 2] = $$0$i; //@line 2070
 return;
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb_167($0) {
 $0 = $0 | 0;
 var $$054 = 0, $$055 = 0, $$05564 = 0, $$056 = 0, $$05663 = 0, $$05766 = 0, $$06065 = 0, $$158 = 0, $$15862 = 0, $$259 = 0, $$pre$phiZ2D = 0, $10 = 0, $104 = 0, $109 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $24 = 0, $29 = 0, $30 = 0, $4 = 0, $43 = 0, $44 = 0, $45 = 0, $51 = 0, $52 = 0, $56 = 0, $58 = 0, $6 = 0, $64 = 0, $65 = 0, $68 = 0, $70 = 0, $8 = 0, $83 = 0, $95 = 0, $ReallocAsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 29663
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29665
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29667
 $6 = HEAP8[$0 + 12 >> 0] & 1; //@line 29670
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29672
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29674
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29676
 $14 = HEAP8[$0 + 28 >> 0] | 0; //@line 29678
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 29680
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 29682
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 29684
 if (HEAP8[___async_retval >> 0] & 1) {
  HEAP8[$2 >> 0] = HEAP8[$2 >> 0] | 64; //@line 29691
 }
 $24 = $4 + 374 | 0; //@line 29693
 if (!(HEAP8[$24 >> 0] | 0)) {
  $$pre$phiZ2D = $2; //@line 29697
 } else {
  HEAP8[$24 >> 0] = 0; //@line 29699
  HEAP8[$2 >> 0] = HEAP8[$2 >> 0] | 32; //@line 29702
  $$pre$phiZ2D = $2; //@line 29703
 }
 $29 = $4 + 952 | 0; //@line 29705
 $30 = HEAP32[$29 >> 2] | 0; //@line 29706
 HEAP8[$4 + 382 >> 0] = $30; //@line 29709
 HEAP8[$4 + 383 >> 0] = $30 >>> 8; //@line 29713
 HEAP8[$4 + 384 >> 0] = $30 >>> 16; //@line 29717
 HEAP8[$4 + 385 >> 0] = $30 >>> 24; //@line 29721
 $43 = $4 + 386 | 0; //@line 29723
 HEAP8[$43 >> 0] = HEAP8[$$pre$phiZ2D >> 0] | 0; //@line 29724
 $44 = $4 + 956 | 0; //@line 29725
 $45 = HEAP32[$44 >> 2] | 0; //@line 29726
 HEAP8[$4 + 387 >> 0] = $45; //@line 29729
 HEAP8[$4 + 388 >> 0] = $45 >>> 8; //@line 29733
 $51 = $4 + 4 | 0; //@line 29734
 __ZN14LoRaMacCommand30copy_repeat_commands_to_bufferEv($51); //@line 29735
 $52 = __ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($51) | 0; //@line 29736
 do {
  if ($6) {
   label = 16; //@line 29739
  } else {
   if (!(HEAP8[$8 >> 0] | 0)) {
    label = 16; //@line 29744
   } else {
    if (!(__ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($51) | 0)) {
     __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($51); //@line 29748
     $$05564 = $14; //@line 29749
     $$05663 = $12; //@line 29749
     $$15862 = 8; //@line 29749
     label = 20; //@line 29750
     break;
    }
    $56 = $52 & 255; //@line 29753
    if (($52 & 255) >= 16) {
     HEAP8[$8 >> 0] = $52; //@line 29756
     $$055 = 0; //@line 29758
     $$056 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($51) | 0; //@line 29758
     $$158 = 8; //@line 29758
     label = 19; //@line 29759
     break;
    }
    $58 = HEAP8[$$pre$phiZ2D >> 0] | 0; //@line 29762
    $64 = ($58 & 255) + $56 & 15 | $58 & -16; //@line 29768
    HEAP8[$$pre$phiZ2D >> 0] = $64; //@line 29769
    HEAP8[$43 >> 0] = $64; //@line 29770
    $65 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($51) | 0; //@line 29771
    if (!($52 << 24 >> 24)) {
     __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($51); //@line 29774
     $$05564 = $14; //@line 29775
     $$05663 = $12; //@line 29775
     $$15862 = 8; //@line 29775
     label = 20; //@line 29776
     break;
    } else {
     $$05766 = 8; //@line 29779
     $$06065 = 0; //@line 29779
     $68 = 0; //@line 29779
     while (1) {
      $70 = $$05766 + 1 << 24 >> 24; //@line 29783
      HEAP8[($$05766 & 255) + ($4 + 381) >> 0] = HEAP8[$65 + $68 >> 0] | 0; //@line 29786
      $$06065 = $$06065 + 1 << 16 >> 16; //@line 29787
      $68 = $$06065 & 65535; //@line 29788
      if ($68 >>> 0 >= $56 >>> 0) {
       $$055 = $14; //@line 29793
       $$056 = $12; //@line 29793
       $$158 = $70; //@line 29793
       label = 19; //@line 29794
       break;
      } else {
       $$05766 = $70; //@line 29791
      }
     }
    }
   }
  }
 } while (0);
 if ((label | 0) == 16) {
  if (!($52 << 24 >> 24)) {
   $$055 = $14; //@line 29805
   $$056 = $12; //@line 29805
   $$158 = 8; //@line 29805
   label = 19; //@line 29806
  } else {
   if (__ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($51) | 0) {
    HEAP8[$8 >> 0] = $52; //@line 29810
    $$055 = 0; //@line 29812
    $$056 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($51) | 0; //@line 29812
    $$158 = 8; //@line 29812
    label = 19; //@line 29813
   } else {
    $$055 = $14; //@line 29815
    $$056 = $12; //@line 29815
    $$158 = 8; //@line 29815
    label = 19; //@line 29816
   }
  }
 }
 if ((label | 0) == 19) {
  __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($51); //@line 29821
  if (!$$056) {
   $$054 = 0; //@line 29824
   $$259 = $$158; //@line 29824
  } else {
   $$05564 = $$055; //@line 29826
   $$05663 = $$056; //@line 29826
   $$15862 = $$158; //@line 29826
   label = 20; //@line 29827
  }
 }
 do {
  if ((label | 0) == 20) {
   if (!(HEAP8[$8 >> 0] | 0)) {
    $$054 = 0; //@line 29835
    $$259 = $$15862; //@line 29835
   } else {
    $83 = $$15862 + 1 << 24 >> 24; //@line 29837
    HEAP8[($$15862 & 255) + ($4 + 381) >> 0] = $$05564; //@line 29840
    if (!($$05564 << 24 >> 24)) {
     __ZN14LoRaMacCommand20clear_command_bufferEv($51); //@line 29843
     $95 = (__Z15encrypt_payloadPKhtS0_jhjPh($$05663, HEAPU8[$8 >> 0] | 0, $4 + 912 | 0, HEAP32[$29 >> 2] | 0, 0, HEAP32[$44 >> 2] | 0, ($83 & 255) + ($4 + 381) | 0) | 0) == 0; //@line 29852
     $$054 = $95 ? 0 : -1014; //@line 29854
     $$259 = $83; //@line 29854
     break;
    } else {
     $104 = (__Z15encrypt_payloadPKhtS0_jhjPh($$05663, HEAPU8[$8 >> 0] | 0, $4 + 928 | 0, HEAP32[$29 >> 2] | 0, 0, HEAP32[$44 >> 2] | 0, ($83 & 255) + ($4 + 381) | 0) | 0) == 0; //@line 29865
     $$054 = $104 ? 0 : -1014; //@line 29867
     $$259 = $83; //@line 29867
     break;
    }
   }
  }
 } while (0);
 $109 = (HEAPU8[$8 >> 0] | 0) + ($$259 & 255) & 65535; //@line 29877
 HEAP16[$16 >> 1] = $109; //@line 29878
 $111 = HEAP32[$29 >> 2] | 0; //@line 29880
 $112 = HEAP32[$44 >> 2] | 0; //@line 29881
 $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 29882
 $113 = __Z11compute_micPKhtS0_jhjPj($18, $109, $4 + 912 | 0, $111, 0, $112, $20) | 0; //@line 29883
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 426; //@line 29886
  $114 = $ReallocAsyncCtx + 4 | 0; //@line 29887
  HEAP32[$114 >> 2] = $$054; //@line 29888
  $115 = $ReallocAsyncCtx + 8 | 0; //@line 29889
  HEAP32[$115 >> 2] = $20; //@line 29890
  $116 = $ReallocAsyncCtx + 12 | 0; //@line 29891
  HEAP32[$116 >> 2] = $16; //@line 29892
  $117 = $ReallocAsyncCtx + 16 | 0; //@line 29893
  HEAP32[$117 >> 2] = $4; //@line 29894
  $118 = $ReallocAsyncCtx + 20 | 0; //@line 29895
  HEAP32[$118 >> 2] = $10; //@line 29896
  sp = STACKTOP; //@line 29897
  return;
 }
 HEAP32[___async_retval >> 2] = $113; //@line 29901
 ___async_unwind = 0; //@line 29902
 HEAP32[$ReallocAsyncCtx >> 2] = 426; //@line 29903
 $114 = $ReallocAsyncCtx + 4 | 0; //@line 29904
 HEAP32[$114 >> 2] = $$054; //@line 29905
 $115 = $ReallocAsyncCtx + 8 | 0; //@line 29906
 HEAP32[$115 >> 2] = $20; //@line 29907
 $116 = $ReallocAsyncCtx + 12 | 0; //@line 29908
 HEAP32[$116 >> 2] = $16; //@line 29909
 $117 = $ReallocAsyncCtx + 16 | 0; //@line 29910
 HEAP32[$117 >> 2] = $4; //@line 29911
 $118 = $ReallocAsyncCtx + 20 | 0; //@line 29912
 HEAP32[$118 >> 2] = $10; //@line 29913
 sp = STACKTOP; //@line 29914
 return;
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_314($0) {
 $0 = $0 | 0;
 var $$pre120 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 13803
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13805
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13807
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13809
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13811
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13813
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13815
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 13817
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 13819
 $$pre120 = HEAP32[$8 >> 2] | 0; //@line 13820
 if ($$pre120 | 0) {
  $19 = HEAP32[$$pre120 + 4 >> 2] | 0; //@line 13824
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(32) | 0; //@line 13825
  FUNCTION_TABLE_vii[$19 & 31]($10, $12); //@line 13826
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 489; //@line 13829
   $20 = $ReallocAsyncCtx8 + 4 | 0; //@line 13830
   HEAP32[$20 >> 2] = $2; //@line 13831
   $21 = $ReallocAsyncCtx8 + 8 | 0; //@line 13832
   HEAP32[$21 >> 2] = $4; //@line 13833
   $22 = $ReallocAsyncCtx8 + 12 | 0; //@line 13834
   HEAP32[$22 >> 2] = $6; //@line 13835
   $23 = $ReallocAsyncCtx8 + 16 | 0; //@line 13836
   HEAP32[$23 >> 2] = $12; //@line 13837
   $24 = $ReallocAsyncCtx8 + 20 | 0; //@line 13838
   HEAP32[$24 >> 2] = $14; //@line 13839
   $25 = $ReallocAsyncCtx8 + 24 | 0; //@line 13840
   HEAP32[$25 >> 2] = $8; //@line 13841
   $26 = $ReallocAsyncCtx8 + 28 | 0; //@line 13842
   HEAP32[$26 >> 2] = $16; //@line 13843
   sp = STACKTOP; //@line 13844
   return;
  }
  ___async_unwind = 0; //@line 13847
  HEAP32[$ReallocAsyncCtx8 >> 2] = 489; //@line 13848
  $20 = $ReallocAsyncCtx8 + 4 | 0; //@line 13849
  HEAP32[$20 >> 2] = $2; //@line 13850
  $21 = $ReallocAsyncCtx8 + 8 | 0; //@line 13851
  HEAP32[$21 >> 2] = $4; //@line 13852
  $22 = $ReallocAsyncCtx8 + 12 | 0; //@line 13853
  HEAP32[$22 >> 2] = $6; //@line 13854
  $23 = $ReallocAsyncCtx8 + 16 | 0; //@line 13855
  HEAP32[$23 >> 2] = $12; //@line 13856
  $24 = $ReallocAsyncCtx8 + 20 | 0; //@line 13857
  HEAP32[$24 >> 2] = $14; //@line 13858
  $25 = $ReallocAsyncCtx8 + 24 | 0; //@line 13859
  HEAP32[$25 >> 2] = $8; //@line 13860
  $26 = $ReallocAsyncCtx8 + 28 | 0; //@line 13861
  HEAP32[$26 >> 2] = $16; //@line 13862
  sp = STACKTOP; //@line 13863
  return;
 }
 HEAP32[$16 >> 2] = 0; //@line 13866
 $27 = $14 + 12 | 0; //@line 13867
 HEAP32[$14 >> 2] = 491; //@line 13868
 HEAP32[$14 + 4 >> 2] = 0; //@line 13870
 HEAP32[$14 + 8 >> 2] = $4; //@line 13872
 HEAP32[$27 >> 2] = 912; //@line 13873
 $28 = $4 + 1228 | 0; //@line 13874
 if (($28 | 0) == ($14 | 0)) {
  $51 = HEAP32[230] | 0; //@line 13878
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 13879
  FUNCTION_TABLE_vi[$51 & 1023]($14); //@line 13880
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 494; //@line 13883
   $52 = $ReallocAsyncCtx12 + 4 | 0; //@line 13884
   HEAP32[$52 >> 2] = $14; //@line 13885
   $53 = $ReallocAsyncCtx12 + 8 | 0; //@line 13886
   HEAP32[$53 >> 2] = $2; //@line 13887
   $54 = $ReallocAsyncCtx12 + 12 | 0; //@line 13888
   HEAP32[$54 >> 2] = $4; //@line 13889
   $55 = $ReallocAsyncCtx12 + 16 | 0; //@line 13890
   HEAP32[$55 >> 2] = $6; //@line 13891
   sp = STACKTOP; //@line 13892
   return;
  }
  ___async_unwind = 0; //@line 13895
  HEAP32[$ReallocAsyncCtx12 >> 2] = 494; //@line 13896
  $52 = $ReallocAsyncCtx12 + 4 | 0; //@line 13897
  HEAP32[$52 >> 2] = $14; //@line 13898
  $53 = $ReallocAsyncCtx12 + 8 | 0; //@line 13899
  HEAP32[$53 >> 2] = $2; //@line 13900
  $54 = $ReallocAsyncCtx12 + 12 | 0; //@line 13901
  HEAP32[$54 >> 2] = $4; //@line 13902
  $55 = $ReallocAsyncCtx12 + 16 | 0; //@line 13903
  HEAP32[$55 >> 2] = $6; //@line 13904
  sp = STACKTOP; //@line 13905
  return;
 }
 $30 = $4 + 1240 | 0; //@line 13908
 $31 = HEAP32[$30 >> 2] | 0; //@line 13909
 if (!$31) {
  $43 = HEAP32[229] | 0; //@line 13913
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(28) | 0; //@line 13914
  FUNCTION_TABLE_vii[$43 & 31]($28, $14); //@line 13915
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 493; //@line 13918
   $44 = $ReallocAsyncCtx11 + 4 | 0; //@line 13919
   HEAP32[$44 >> 2] = $14; //@line 13920
   $45 = $ReallocAsyncCtx11 + 8 | 0; //@line 13921
   HEAP32[$45 >> 2] = $2; //@line 13922
   $46 = $ReallocAsyncCtx11 + 12 | 0; //@line 13923
   HEAP32[$46 >> 2] = $4; //@line 13924
   $47 = $ReallocAsyncCtx11 + 16 | 0; //@line 13925
   HEAP32[$47 >> 2] = $27; //@line 13926
   $48 = $ReallocAsyncCtx11 + 20 | 0; //@line 13927
   HEAP32[$48 >> 2] = $30; //@line 13928
   $49 = $ReallocAsyncCtx11 + 24 | 0; //@line 13929
   HEAP32[$49 >> 2] = $6; //@line 13930
   sp = STACKTOP; //@line 13931
   return;
  }
  ___async_unwind = 0; //@line 13934
  HEAP32[$ReallocAsyncCtx11 >> 2] = 493; //@line 13935
  $44 = $ReallocAsyncCtx11 + 4 | 0; //@line 13936
  HEAP32[$44 >> 2] = $14; //@line 13937
  $45 = $ReallocAsyncCtx11 + 8 | 0; //@line 13938
  HEAP32[$45 >> 2] = $2; //@line 13939
  $46 = $ReallocAsyncCtx11 + 12 | 0; //@line 13940
  HEAP32[$46 >> 2] = $4; //@line 13941
  $47 = $ReallocAsyncCtx11 + 16 | 0; //@line 13942
  HEAP32[$47 >> 2] = $27; //@line 13943
  $48 = $ReallocAsyncCtx11 + 20 | 0; //@line 13944
  HEAP32[$48 >> 2] = $30; //@line 13945
  $49 = $ReallocAsyncCtx11 + 24 | 0; //@line 13946
  HEAP32[$49 >> 2] = $6; //@line 13947
  sp = STACKTOP; //@line 13948
  return;
 } else {
  $34 = HEAP32[$31 + 8 >> 2] | 0; //@line 13952
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(32) | 0; //@line 13953
  FUNCTION_TABLE_vi[$34 & 1023]($28); //@line 13954
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 492; //@line 13957
   $35 = $ReallocAsyncCtx10 + 4 | 0; //@line 13958
   HEAP32[$35 >> 2] = $28; //@line 13959
   $36 = $ReallocAsyncCtx10 + 8 | 0; //@line 13960
   HEAP32[$36 >> 2] = $14; //@line 13961
   $37 = $ReallocAsyncCtx10 + 12 | 0; //@line 13962
   HEAP32[$37 >> 2] = $2; //@line 13963
   $38 = $ReallocAsyncCtx10 + 16 | 0; //@line 13964
   HEAP32[$38 >> 2] = $4; //@line 13965
   $39 = $ReallocAsyncCtx10 + 20 | 0; //@line 13966
   HEAP32[$39 >> 2] = $30; //@line 13967
   $40 = $ReallocAsyncCtx10 + 24 | 0; //@line 13968
   HEAP32[$40 >> 2] = $27; //@line 13969
   $41 = $ReallocAsyncCtx10 + 28 | 0; //@line 13970
   HEAP32[$41 >> 2] = $6; //@line 13971
   sp = STACKTOP; //@line 13972
   return;
  }
  ___async_unwind = 0; //@line 13975
  HEAP32[$ReallocAsyncCtx10 >> 2] = 492; //@line 13976
  $35 = $ReallocAsyncCtx10 + 4 | 0; //@line 13977
  HEAP32[$35 >> 2] = $28; //@line 13978
  $36 = $ReallocAsyncCtx10 + 8 | 0; //@line 13979
  HEAP32[$36 >> 2] = $14; //@line 13980
  $37 = $ReallocAsyncCtx10 + 12 | 0; //@line 13981
  HEAP32[$37 >> 2] = $2; //@line 13982
  $38 = $ReallocAsyncCtx10 + 16 | 0; //@line 13983
  HEAP32[$38 >> 2] = $4; //@line 13984
  $39 = $ReallocAsyncCtx10 + 20 | 0; //@line 13985
  HEAP32[$39 >> 2] = $30; //@line 13986
  $40 = $ReallocAsyncCtx10 + 24 | 0; //@line 13987
  HEAP32[$40 >> 2] = $27; //@line 13988
  $41 = $ReallocAsyncCtx10 + 28 | 0; //@line 13989
  HEAP32[$41 >> 2] = $6; //@line 13990
  sp = STACKTOP; //@line 13991
  return;
 }
}
function __ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $45 = 0, $47 = 0, $48 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 21464
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21466
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21468
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21470
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21472
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21474
 $$pre = HEAP32[$4 >> 2] | 0; //@line 21475
 if ($$pre | 0) {
  $13 = HEAP32[$$pre + 4 >> 2] | 0; //@line 21479
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 21480
  FUNCTION_TABLE_vii[$13 & 31]($10, $6); //@line 21481
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 261; //@line 21484
   $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 21485
   HEAP32[$14 >> 2] = $2; //@line 21486
   $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 21487
   HEAP32[$15 >> 2] = $6; //@line 21488
   $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 21489
   HEAP32[$16 >> 2] = $4; //@line 21490
   $17 = $ReallocAsyncCtx2 + 16 | 0; //@line 21491
   HEAP32[$17 >> 2] = $8; //@line 21492
   sp = STACKTOP; //@line 21493
   return;
  }
  ___async_unwind = 0; //@line 21496
  HEAP32[$ReallocAsyncCtx2 >> 2] = 261; //@line 21497
  $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 21498
  HEAP32[$14 >> 2] = $2; //@line 21499
  $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 21500
  HEAP32[$15 >> 2] = $6; //@line 21501
  $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 21502
  HEAP32[$16 >> 2] = $4; //@line 21503
  $17 = $ReallocAsyncCtx2 + 16 | 0; //@line 21504
  HEAP32[$17 >> 2] = $8; //@line 21505
  sp = STACKTOP; //@line 21506
  return;
 }
 HEAP32[$8 >> 2] = 0; //@line 21509
 $18 = $6 + 16 | 0; //@line 21510
 $19 = $6 + 28 | 0; //@line 21511
 $20 = HEAP32[$19 >> 2] | 0; //@line 21512
 if ($20 | 0) {
  $22 = $2 + 1896 | 0; //@line 21515
  if (($22 | 0) != ($18 | 0)) {
   $24 = $2 + 1908 | 0; //@line 21518
   $25 = HEAP32[$24 >> 2] | 0; //@line 21519
   if (!$25) {
    $36 = HEAP32[$20 + 4 >> 2] | 0; //@line 21523
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 21524
    FUNCTION_TABLE_vii[$36 & 31]($22, $18); //@line 21525
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 263; //@line 21528
     $37 = $ReallocAsyncCtx4 + 4 | 0; //@line 21529
     HEAP32[$37 >> 2] = $19; //@line 21530
     $38 = $ReallocAsyncCtx4 + 8 | 0; //@line 21531
     HEAP32[$38 >> 2] = $24; //@line 21532
     $39 = $ReallocAsyncCtx4 + 12 | 0; //@line 21533
     HEAP32[$39 >> 2] = $6; //@line 21534
     $40 = $ReallocAsyncCtx4 + 16 | 0; //@line 21535
     HEAP32[$40 >> 2] = $2; //@line 21536
     sp = STACKTOP; //@line 21537
     return;
    }
    ___async_unwind = 0; //@line 21540
    HEAP32[$ReallocAsyncCtx4 >> 2] = 263; //@line 21541
    $37 = $ReallocAsyncCtx4 + 4 | 0; //@line 21542
    HEAP32[$37 >> 2] = $19; //@line 21543
    $38 = $ReallocAsyncCtx4 + 8 | 0; //@line 21544
    HEAP32[$38 >> 2] = $24; //@line 21545
    $39 = $ReallocAsyncCtx4 + 12 | 0; //@line 21546
    HEAP32[$39 >> 2] = $6; //@line 21547
    $40 = $ReallocAsyncCtx4 + 16 | 0; //@line 21548
    HEAP32[$40 >> 2] = $2; //@line 21549
    sp = STACKTOP; //@line 21550
    return;
   } else {
    $28 = HEAP32[$25 + 8 >> 2] | 0; //@line 21554
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(28) | 0; //@line 21555
    FUNCTION_TABLE_vi[$28 & 1023]($22); //@line 21556
    if (___async) {
     HEAP32[$ReallocAsyncCtx3 >> 2] = 262; //@line 21559
     $29 = $ReallocAsyncCtx3 + 4 | 0; //@line 21560
     HEAP32[$29 >> 2] = $19; //@line 21561
     $30 = $ReallocAsyncCtx3 + 8 | 0; //@line 21562
     HEAP32[$30 >> 2] = $24; //@line 21563
     $31 = $ReallocAsyncCtx3 + 12 | 0; //@line 21564
     HEAP32[$31 >> 2] = $22; //@line 21565
     $32 = $ReallocAsyncCtx3 + 16 | 0; //@line 21566
     HEAP32[$32 >> 2] = $18; //@line 21567
     $33 = $ReallocAsyncCtx3 + 20 | 0; //@line 21568
     HEAP32[$33 >> 2] = $6; //@line 21569
     $34 = $ReallocAsyncCtx3 + 24 | 0; //@line 21570
     HEAP32[$34 >> 2] = $2; //@line 21571
     sp = STACKTOP; //@line 21572
     return;
    }
    ___async_unwind = 0; //@line 21575
    HEAP32[$ReallocAsyncCtx3 >> 2] = 262; //@line 21576
    $29 = $ReallocAsyncCtx3 + 4 | 0; //@line 21577
    HEAP32[$29 >> 2] = $19; //@line 21578
    $30 = $ReallocAsyncCtx3 + 8 | 0; //@line 21579
    HEAP32[$30 >> 2] = $24; //@line 21580
    $31 = $ReallocAsyncCtx3 + 12 | 0; //@line 21581
    HEAP32[$31 >> 2] = $22; //@line 21582
    $32 = $ReallocAsyncCtx3 + 16 | 0; //@line 21583
    HEAP32[$32 >> 2] = $18; //@line 21584
    $33 = $ReallocAsyncCtx3 + 20 | 0; //@line 21585
    HEAP32[$33 >> 2] = $6; //@line 21586
    $34 = $ReallocAsyncCtx3 + 24 | 0; //@line 21587
    HEAP32[$34 >> 2] = $2; //@line 21588
    sp = STACKTOP; //@line 21589
    return;
   }
  }
 }
 $41 = $6 + 32 | 0; //@line 21594
 $42 = $6 + 44 | 0; //@line 21595
 $43 = HEAP32[$42 >> 2] | 0; //@line 21596
 if (!$43) {
  return;
 }
 $45 = $2 + 1912 | 0; //@line 21601
 if (($45 | 0) == ($41 | 0)) {
  return;
 }
 $47 = $2 + 1924 | 0; //@line 21606
 $48 = HEAP32[$47 >> 2] | 0; //@line 21607
 if (!$48) {
  $57 = HEAP32[$43 + 4 >> 2] | 0; //@line 21611
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 21612
  FUNCTION_TABLE_vii[$57 & 31]($45, $41); //@line 21613
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 265; //@line 21616
   $58 = $ReallocAsyncCtx6 + 4 | 0; //@line 21617
   HEAP32[$58 >> 2] = $42; //@line 21618
   $59 = $ReallocAsyncCtx6 + 8 | 0; //@line 21619
   HEAP32[$59 >> 2] = $47; //@line 21620
   sp = STACKTOP; //@line 21621
   return;
  }
  ___async_unwind = 0; //@line 21624
  HEAP32[$ReallocAsyncCtx6 >> 2] = 265; //@line 21625
  $58 = $ReallocAsyncCtx6 + 4 | 0; //@line 21626
  HEAP32[$58 >> 2] = $42; //@line 21627
  $59 = $ReallocAsyncCtx6 + 8 | 0; //@line 21628
  HEAP32[$59 >> 2] = $47; //@line 21629
  sp = STACKTOP; //@line 21630
  return;
 } else {
  $51 = HEAP32[$48 + 8 >> 2] | 0; //@line 21634
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 21635
  FUNCTION_TABLE_vi[$51 & 1023]($45); //@line 21636
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 264; //@line 21639
   $52 = $ReallocAsyncCtx5 + 4 | 0; //@line 21640
   HEAP32[$52 >> 2] = $42; //@line 21641
   $53 = $ReallocAsyncCtx5 + 8 | 0; //@line 21642
   HEAP32[$53 >> 2] = $47; //@line 21643
   $54 = $ReallocAsyncCtx5 + 12 | 0; //@line 21644
   HEAP32[$54 >> 2] = $45; //@line 21645
   $55 = $ReallocAsyncCtx5 + 16 | 0; //@line 21646
   HEAP32[$55 >> 2] = $41; //@line 21647
   sp = STACKTOP; //@line 21648
   return;
  }
  ___async_unwind = 0; //@line 21651
  HEAP32[$ReallocAsyncCtx5 >> 2] = 264; //@line 21652
  $52 = $ReallocAsyncCtx5 + 4 | 0; //@line 21653
  HEAP32[$52 >> 2] = $42; //@line 21654
  $53 = $ReallocAsyncCtx5 + 8 | 0; //@line 21655
  HEAP32[$53 >> 2] = $47; //@line 21656
  $54 = $ReallocAsyncCtx5 + 12 | 0; //@line 21657
  HEAP32[$54 >> 2] = $45; //@line 21658
  $55 = $ReallocAsyncCtx5 + 16 | 0; //@line 21659
  HEAP32[$55 >> 2] = $41; //@line 21660
  sp = STACKTOP; //@line 21661
  return;
 }
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_279($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $19 = 0, $2 = 0, $21 = 0, $23 = 0, $25 = 0, $27 = 0, $29 = 0, $31 = 0, $33 = 0, $35 = 0, $36 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 10312
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10314
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10316
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10318
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10320
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 10322
 $12 = $0 + 24 | 0; //@line 10324
 $14 = HEAP32[$12 >> 2] | 0; //@line 10326
 $17 = HEAP32[$12 + 4 >> 2] | 0; //@line 10329
 $19 = HEAP32[$0 + 32 >> 2] | 0; //@line 10331
 $21 = HEAP32[$0 + 36 >> 2] | 0; //@line 10333
 $23 = HEAP32[$0 + 40 >> 2] | 0; //@line 10335
 $25 = HEAP32[$0 + 44 >> 2] | 0; //@line 10337
 $27 = HEAP32[$0 + 48 >> 2] | 0; //@line 10339
 $29 = HEAP32[$0 + 52 >> 2] | 0; //@line 10341
 $31 = HEAP32[$0 + 56 >> 2] | 0; //@line 10343
 $33 = HEAP32[$0 + 60 >> 2] | 0; //@line 10345
 $35 = HEAP32[$0 + 64 >> 2] | 0; //@line 10347
 $36 = HEAP32[$2 >> 2] | 0; //@line 10348
 if ($36 | 0) {
  $39 = HEAP32[$36 + 4 >> 2] | 0; //@line 10352
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(64) | 0; //@line 10353
  FUNCTION_TABLE_vii[$39 & 31]($6, $8); //@line 10354
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 59; //@line 10357
   $40 = $ReallocAsyncCtx5 + 4 | 0; //@line 10358
   HEAP32[$40 >> 2] = $2; //@line 10359
   $41 = $ReallocAsyncCtx5 + 8 | 0; //@line 10360
   HEAP32[$41 >> 2] = $4; //@line 10361
   $42 = $ReallocAsyncCtx5 + 12 | 0; //@line 10362
   HEAP32[$42 >> 2] = $10; //@line 10363
   $43 = $ReallocAsyncCtx5 + 16 | 0; //@line 10364
   $44 = $43; //@line 10365
   $45 = $44; //@line 10366
   HEAP32[$45 >> 2] = $14; //@line 10367
   $46 = $44 + 4 | 0; //@line 10368
   $47 = $46; //@line 10369
   HEAP32[$47 >> 2] = $17; //@line 10370
   $48 = $ReallocAsyncCtx5 + 24 | 0; //@line 10371
   HEAP32[$48 >> 2] = $19; //@line 10372
   $49 = $ReallocAsyncCtx5 + 28 | 0; //@line 10373
   HEAP32[$49 >> 2] = $8; //@line 10374
   $50 = $ReallocAsyncCtx5 + 32 | 0; //@line 10375
   HEAP32[$50 >> 2] = $21; //@line 10376
   $51 = $ReallocAsyncCtx5 + 36 | 0; //@line 10377
   HEAP32[$51 >> 2] = $23; //@line 10378
   $52 = $ReallocAsyncCtx5 + 40 | 0; //@line 10379
   HEAP32[$52 >> 2] = $25; //@line 10380
   $53 = $ReallocAsyncCtx5 + 44 | 0; //@line 10381
   HEAP32[$53 >> 2] = $27; //@line 10382
   $54 = $ReallocAsyncCtx5 + 48 | 0; //@line 10383
   HEAP32[$54 >> 2] = $29; //@line 10384
   $55 = $ReallocAsyncCtx5 + 52 | 0; //@line 10385
   HEAP32[$55 >> 2] = $31; //@line 10386
   $56 = $ReallocAsyncCtx5 + 56 | 0; //@line 10387
   HEAP32[$56 >> 2] = $33; //@line 10388
   $57 = $ReallocAsyncCtx5 + 60 | 0; //@line 10389
   HEAP32[$57 >> 2] = $35; //@line 10390
   sp = STACKTOP; //@line 10391
   return;
  }
  ___async_unwind = 0; //@line 10394
  HEAP32[$ReallocAsyncCtx5 >> 2] = 59; //@line 10395
  $40 = $ReallocAsyncCtx5 + 4 | 0; //@line 10396
  HEAP32[$40 >> 2] = $2; //@line 10397
  $41 = $ReallocAsyncCtx5 + 8 | 0; //@line 10398
  HEAP32[$41 >> 2] = $4; //@line 10399
  $42 = $ReallocAsyncCtx5 + 12 | 0; //@line 10400
  HEAP32[$42 >> 2] = $10; //@line 10401
  $43 = $ReallocAsyncCtx5 + 16 | 0; //@line 10402
  $44 = $43; //@line 10403
  $45 = $44; //@line 10404
  HEAP32[$45 >> 2] = $14; //@line 10405
  $46 = $44 + 4 | 0; //@line 10406
  $47 = $46; //@line 10407
  HEAP32[$47 >> 2] = $17; //@line 10408
  $48 = $ReallocAsyncCtx5 + 24 | 0; //@line 10409
  HEAP32[$48 >> 2] = $19; //@line 10410
  $49 = $ReallocAsyncCtx5 + 28 | 0; //@line 10411
  HEAP32[$49 >> 2] = $8; //@line 10412
  $50 = $ReallocAsyncCtx5 + 32 | 0; //@line 10413
  HEAP32[$50 >> 2] = $21; //@line 10414
  $51 = $ReallocAsyncCtx5 + 36 | 0; //@line 10415
  HEAP32[$51 >> 2] = $23; //@line 10416
  $52 = $ReallocAsyncCtx5 + 40 | 0; //@line 10417
  HEAP32[$52 >> 2] = $25; //@line 10418
  $53 = $ReallocAsyncCtx5 + 44 | 0; //@line 10419
  HEAP32[$53 >> 2] = $27; //@line 10420
  $54 = $ReallocAsyncCtx5 + 48 | 0; //@line 10421
  HEAP32[$54 >> 2] = $29; //@line 10422
  $55 = $ReallocAsyncCtx5 + 52 | 0; //@line 10423
  HEAP32[$55 >> 2] = $31; //@line 10424
  $56 = $ReallocAsyncCtx5 + 56 | 0; //@line 10425
  HEAP32[$56 >> 2] = $33; //@line 10426
  $57 = $ReallocAsyncCtx5 + 60 | 0; //@line 10427
  HEAP32[$57 >> 2] = $35; //@line 10428
  sp = STACKTOP; //@line 10429
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 10432
 __ZN4mbed6Ticker5setupEy($10, $14, $17); //@line 10433
 $58 = HEAP32[$2 >> 2] | 0; //@line 10434
 if ($58 | 0) {
  $61 = HEAP32[$58 + 8 >> 2] | 0; //@line 10438
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(40) | 0; //@line 10439
  FUNCTION_TABLE_vi[$61 & 1023]($8); //@line 10440
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 60; //@line 10443
   $62 = $ReallocAsyncCtx6 + 4 | 0; //@line 10444
   HEAP32[$62 >> 2] = $19; //@line 10445
   $63 = $ReallocAsyncCtx6 + 8 | 0; //@line 10446
   HEAP32[$63 >> 2] = $21; //@line 10447
   $64 = $ReallocAsyncCtx6 + 12 | 0; //@line 10448
   HEAP32[$64 >> 2] = $23; //@line 10449
   $65 = $ReallocAsyncCtx6 + 16 | 0; //@line 10450
   HEAP32[$65 >> 2] = $25; //@line 10451
   $66 = $ReallocAsyncCtx6 + 20 | 0; //@line 10452
   HEAP32[$66 >> 2] = $27; //@line 10453
   $67 = $ReallocAsyncCtx6 + 24 | 0; //@line 10454
   HEAP32[$67 >> 2] = $29; //@line 10455
   $68 = $ReallocAsyncCtx6 + 28 | 0; //@line 10456
   HEAP32[$68 >> 2] = $31; //@line 10457
   $69 = $ReallocAsyncCtx6 + 32 | 0; //@line 10458
   HEAP32[$69 >> 2] = $33; //@line 10459
   $70 = $ReallocAsyncCtx6 + 36 | 0; //@line 10460
   HEAP32[$70 >> 2] = $35; //@line 10461
   sp = STACKTOP; //@line 10462
   return;
  }
  ___async_unwind = 0; //@line 10465
  HEAP32[$ReallocAsyncCtx6 >> 2] = 60; //@line 10466
  $62 = $ReallocAsyncCtx6 + 4 | 0; //@line 10467
  HEAP32[$62 >> 2] = $19; //@line 10468
  $63 = $ReallocAsyncCtx6 + 8 | 0; //@line 10469
  HEAP32[$63 >> 2] = $21; //@line 10470
  $64 = $ReallocAsyncCtx6 + 12 | 0; //@line 10471
  HEAP32[$64 >> 2] = $23; //@line 10472
  $65 = $ReallocAsyncCtx6 + 16 | 0; //@line 10473
  HEAP32[$65 >> 2] = $25; //@line 10474
  $66 = $ReallocAsyncCtx6 + 20 | 0; //@line 10475
  HEAP32[$66 >> 2] = $27; //@line 10476
  $67 = $ReallocAsyncCtx6 + 24 | 0; //@line 10477
  HEAP32[$67 >> 2] = $29; //@line 10478
  $68 = $ReallocAsyncCtx6 + 28 | 0; //@line 10479
  HEAP32[$68 >> 2] = $31; //@line 10480
  $69 = $ReallocAsyncCtx6 + 32 | 0; //@line 10481
  HEAP32[$69 >> 2] = $33; //@line 10482
  $70 = $ReallocAsyncCtx6 + 36 | 0; //@line 10483
  HEAP32[$70 >> 2] = $35; //@line 10484
  sp = STACKTOP; //@line 10485
  return;
 }
 if (!(HEAP8[$19 + 770 >> 0] | 0)) {
  HEAP32[$21 >> 2] = 6; //@line 10492
  _mbed_tracef(16, 10968, 11025, $21); //@line 10493
  __ZN16SX1276_LoRaRadio18set_low_power_modeEv($19); //@line 10494
  HEAP32[$25 >> 2] = 6; //@line 10495
  _mbed_tracef(16, 10968, 11054, $25); //@line 10496
  return;
 } else {
  HEAP32[$29 >> 2] = 5; //@line 10499
  _mbed_tracef(16, 10968, 11025, $29); //@line 10500
  __ZN16SX1276_LoRaRadio18set_low_power_modeEv($19); //@line 10501
  HEAP32[$33 >> 2] = 5; //@line 10502
  _mbed_tracef(16, 10968, 11054, $33); //@line 10503
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i = 0, $$pre$i = 0, $11 = 0, $13 = 0, $22 = 0, $25 = 0, $35 = 0, $36 = 0, $37 = 0, $41 = 0, $47 = 0, $51 = 0, $54 = 0, $6 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $71 = 0, $74 = 0, $78 = 0, $8 = 0, $81 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx18 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 12813
 STACKTOP = STACKTOP + 48 | 0; //@line 12814
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 12814
 $6 = sp + 16 | 0; //@line 12815
 $7 = sp; //@line 12816
 $8 = $1 + 12 | 0; //@line 12817
 $9 = HEAP32[$8 >> 2] | 0; //@line 12818
 do {
  if (!$9) {
   $11 = $7 + 12 | 0; //@line 12822
   HEAP32[$11 >> 2] = 0; //@line 12823
   $36 = 0; //@line 12824
   $47 = $11; //@line 12824
  } else {
   $13 = HEAP32[$9 + 4 >> 2] | 0; //@line 12827
   $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 12828
   FUNCTION_TABLE_vii[$13 & 31]($7, $1); //@line 12829
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 353; //@line 12832
    HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 12834
    HEAP32[$AsyncCtx + 8 >> 2] = $8; //@line 12836
    HEAP32[$AsyncCtx + 12 >> 2] = $7; //@line 12838
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 12840
    HEAP16[$AsyncCtx + 20 >> 1] = $3; //@line 12842
    HEAP16[$AsyncCtx + 22 >> 1] = $4; //@line 12844
    HEAP8[$AsyncCtx + 24 >> 0] = $5; //@line 12846
    HEAP32[$AsyncCtx + 28 >> 2] = $0; //@line 12848
    sp = STACKTOP; //@line 12849
    STACKTOP = sp; //@line 12850
    return 0; //@line 12850
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 12852
   $$pre$i = HEAP32[$8 >> 2] | 0; //@line 12853
   $22 = $7 + 12 | 0; //@line 12854
   HEAP32[$22 >> 2] = $$pre$i; //@line 12855
   if (!$$pre$i) {
    $36 = 0; //@line 12858
    $47 = $22; //@line 12858
   } else {
    $25 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 12862
    $AsyncCtx2 = _emscripten_alloc_async_context(36, sp) | 0; //@line 12863
    FUNCTION_TABLE_vii[$25 & 31]($6, $7); //@line 12864
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 354; //@line 12867
     HEAP32[$AsyncCtx2 + 4 >> 2] = $22; //@line 12869
     HEAP32[$AsyncCtx2 + 8 >> 2] = $6; //@line 12871
     HEAP32[$AsyncCtx2 + 12 >> 2] = $22; //@line 12873
     HEAP32[$AsyncCtx2 + 16 >> 2] = $2; //@line 12875
     HEAP16[$AsyncCtx2 + 20 >> 1] = $3; //@line 12877
     HEAP16[$AsyncCtx2 + 22 >> 1] = $4; //@line 12879
     HEAP8[$AsyncCtx2 + 24 >> 0] = $5; //@line 12881
     HEAP32[$AsyncCtx2 + 28 >> 2] = $0; //@line 12883
     HEAP32[$AsyncCtx2 + 32 >> 2] = $7; //@line 12885
     sp = STACKTOP; //@line 12886
     STACKTOP = sp; //@line 12887
     return 0; //@line 12887
    } else {
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 12889
     $36 = HEAP32[$22 >> 2] | 0; //@line 12891
     $47 = $22; //@line 12891
     break;
    }
   }
  }
 } while (0);
 $35 = $6 + 12 | 0; //@line 12897
 HEAP32[$35 >> 2] = $36; //@line 12898
 $37 = $6 + 16 | 0; //@line 12899
 HEAP32[$37 >> 2] = $2; //@line 12900
 HEAP16[$6 + 20 >> 1] = $3; //@line 12902
 HEAP16[$6 + 22 >> 1] = $4; //@line 12904
 HEAP8[$6 + 24 >> 0] = $5; //@line 12906
 $AsyncCtx18 = _emscripten_alloc_async_context(32, sp) | 0; //@line 12907
 $41 = _equeue_alloc($0, 28) | 0; //@line 12908
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 355; //@line 12911
  HEAP32[$AsyncCtx18 + 4 >> 2] = $37; //@line 12913
  HEAP32[$AsyncCtx18 + 8 >> 2] = $0; //@line 12915
  HEAP32[$AsyncCtx18 + 12 >> 2] = $6; //@line 12917
  HEAP32[$AsyncCtx18 + 16 >> 2] = $35; //@line 12919
  HEAP32[$AsyncCtx18 + 20 >> 2] = $47; //@line 12921
  HEAP32[$AsyncCtx18 + 24 >> 2] = $7; //@line 12923
  HEAP32[$AsyncCtx18 + 28 >> 2] = $35; //@line 12925
  sp = STACKTOP; //@line 12926
  STACKTOP = sp; //@line 12927
  return 0; //@line 12927
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 12929
 do {
  if (!$41) {
   $$0$i = 0; //@line 12933
  } else {
   $51 = HEAP32[$35 >> 2] | 0; //@line 12935
   do {
    if (!$51) {
     $64 = 0; //@line 12939
    } else {
     $54 = HEAP32[$51 + 4 >> 2] | 0; //@line 12942
     $AsyncCtx5 = _emscripten_alloc_async_context(36, sp) | 0; //@line 12943
     FUNCTION_TABLE_vii[$54 & 31]($41, $6); //@line 12944
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 356; //@line 12947
      HEAP32[$AsyncCtx5 + 4 >> 2] = $35; //@line 12949
      HEAP32[$AsyncCtx5 + 8 >> 2] = $41; //@line 12951
      HEAP32[$AsyncCtx5 + 12 >> 2] = $37; //@line 12953
      HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 12955
      HEAP32[$AsyncCtx5 + 20 >> 2] = $35; //@line 12957
      HEAP32[$AsyncCtx5 + 24 >> 2] = $47; //@line 12959
      HEAP32[$AsyncCtx5 + 28 >> 2] = $6; //@line 12961
      HEAP32[$AsyncCtx5 + 32 >> 2] = $7; //@line 12963
      sp = STACKTOP; //@line 12964
      STACKTOP = sp; //@line 12965
      return 0; //@line 12965
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 12967
      $64 = HEAP32[$35 >> 2] | 0; //@line 12969
      break;
     }
    }
   } while (0);
   HEAP32[$41 + 12 >> 2] = $64; //@line 12975
   $65 = $41 + 16 | 0; //@line 12976
   HEAP32[$65 >> 2] = HEAP32[$37 >> 2]; //@line 12977
   HEAP32[$65 + 4 >> 2] = HEAP32[$37 + 4 >> 2]; //@line 12977
   HEAP8[$65 + 8 >> 0] = HEAP8[$37 + 8 >> 0] | 0; //@line 12977
   _equeue_event_dtor($41, 357); //@line 12978
   $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 12979
   $66 = _equeue_post($0, 358, $41) | 0; //@line 12980
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 359; //@line 12983
    HEAP32[$AsyncCtx15 + 4 >> 2] = $35; //@line 12985
    HEAP32[$AsyncCtx15 + 8 >> 2] = $47; //@line 12987
    HEAP32[$AsyncCtx15 + 12 >> 2] = $6; //@line 12989
    HEAP32[$AsyncCtx15 + 16 >> 2] = $7; //@line 12991
    sp = STACKTOP; //@line 12992
    STACKTOP = sp; //@line 12993
    return 0; //@line 12993
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 12995
    $$0$i = $66; //@line 12996
    break;
   }
  }
 } while (0);
 $71 = HEAP32[$35 >> 2] | 0; //@line 13001
 do {
  if ($71 | 0) {
   $74 = HEAP32[$71 + 8 >> 2] | 0; //@line 13006
   $AsyncCtx8 = _emscripten_alloc_async_context(16, sp) | 0; //@line 13007
   FUNCTION_TABLE_vi[$74 & 1023]($6); //@line 13008
   if (___async) {
    HEAP32[$AsyncCtx8 >> 2] = 360; //@line 13011
    HEAP32[$AsyncCtx8 + 4 >> 2] = $47; //@line 13013
    HEAP32[$AsyncCtx8 + 8 >> 2] = $$0$i; //@line 13015
    HEAP32[$AsyncCtx8 + 12 >> 2] = $7; //@line 13017
    sp = STACKTOP; //@line 13018
    STACKTOP = sp; //@line 13019
    return 0; //@line 13019
   } else {
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 13021
    break;
   }
  }
 } while (0);
 $78 = HEAP32[$47 >> 2] | 0; //@line 13026
 if (!$78) {
  STACKTOP = sp; //@line 13029
  return $$0$i | 0; //@line 13029
 }
 $81 = HEAP32[$78 + 8 >> 2] | 0; //@line 13032
 $AsyncCtx12 = _emscripten_alloc_async_context(8, sp) | 0; //@line 13033
 FUNCTION_TABLE_vi[$81 & 1023]($7); //@line 13034
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 361; //@line 13037
  HEAP32[$AsyncCtx12 + 4 >> 2] = $$0$i; //@line 13039
  sp = STACKTOP; //@line 13040
  STACKTOP = sp; //@line 13041
  return 0; //@line 13041
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 13043
 STACKTOP = sp; //@line 13044
 return $$0$i | 0; //@line 13044
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$off0 = 0, $49 = 0, $57 = 0, $67 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx18 = 0, $AsyncCtx21 = 0, $AsyncCtx24 = 0, $AsyncCtx28 = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, sp = 0;
 sp = STACKTOP; //@line 938
 STACKTOP = STACKTOP + 64 | 0; //@line 939
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 939
 $vararg_buffer8 = sp + 56 | 0; //@line 940
 $vararg_buffer6 = sp + 48 | 0; //@line 941
 $vararg_buffer3 = sp + 16 | 0; //@line 942
 $vararg_buffer1 = sp + 8 | 0; //@line 943
 _mbed_tracef(16, 10968, 11112, sp); //@line 945
 HEAP8[$0 + 689 >> 0] = $1; //@line 948
 $9 = HEAP32[(HEAP32[$0 >> 2] | 0) + 32 >> 2] | 0; //@line 951
 $AsyncCtx = _emscripten_alloc_async_context(52, sp) | 0; //@line 952
 FUNCTION_TABLE_vii[$9 & 31]($0, $2); //@line 953
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 62; //@line 956
  HEAP32[$AsyncCtx + 4 >> 2] = $vararg_buffer6; //@line 958
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer6; //@line 960
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer3; //@line 962
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer8; //@line 964
  HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer8; //@line 966
  HEAP16[$AsyncCtx + 24 >> 1] = $3; //@line 968
  HEAP32[$AsyncCtx + 28 >> 2] = $4; //@line 970
  HEAP32[$AsyncCtx + 32 >> 2] = $vararg_buffer1; //@line 972
  HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer1; //@line 974
  HEAP32[$AsyncCtx + 40 >> 2] = $0; //@line 976
  HEAP32[$AsyncCtx + 44 >> 2] = $vararg_buffer3; //@line 978
  HEAP32[$AsyncCtx + 48 >> 2] = $vararg_buffer3; //@line 980
  sp = STACKTOP; //@line 981
  STACKTOP = sp; //@line 982
  return 0; //@line 982
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 984
 HEAP32[$vararg_buffer1 >> 2] = 5; //@line 985
 _mbed_tracef(16, 10968, 11025, $vararg_buffer1); //@line 986
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 987
 HEAP32[$vararg_buffer3 >> 2] = 5; //@line 988
 _mbed_tracef(16, 10968, 11054, $vararg_buffer3); //@line 989
 $AsyncCtx28 = _emscripten_alloc_async_context(36, sp) | 0; //@line 990
 _wait_ms(1); //@line 991
 if (___async) {
  HEAP32[$AsyncCtx28 >> 2] = 63; //@line 994
  HEAP32[$AsyncCtx28 + 4 >> 2] = $vararg_buffer3; //@line 996
  HEAP16[$AsyncCtx28 + 8 >> 1] = $3; //@line 998
  HEAP32[$AsyncCtx28 + 12 >> 2] = $4; //@line 1000
  HEAP32[$AsyncCtx28 + 16 >> 2] = $vararg_buffer8; //@line 1002
  HEAP32[$AsyncCtx28 + 20 >> 2] = $vararg_buffer8; //@line 1004
  HEAP32[$AsyncCtx28 + 24 >> 2] = $0; //@line 1006
  HEAP32[$AsyncCtx28 + 28 >> 2] = $vararg_buffer6; //@line 1008
  HEAP32[$AsyncCtx28 + 32 >> 2] = $vararg_buffer6; //@line 1010
  sp = STACKTOP; //@line 1011
  STACKTOP = sp; //@line 1012
  return 0; //@line 1012
 }
 _emscripten_free_async_context($AsyncCtx28 | 0); //@line 1014
 $AsyncCtx15 = _emscripten_alloc_async_context(40, sp) | 0; //@line 1015
 __ZN4mbed5TimerC2Ev($vararg_buffer3); //@line 1016
 if (___async) {
  HEAP32[$AsyncCtx15 >> 2] = 64; //@line 1019
  HEAP32[$AsyncCtx15 + 4 >> 2] = $vararg_buffer3; //@line 1021
  HEAP16[$AsyncCtx15 + 8 >> 1] = $3; //@line 1023
  HEAP32[$AsyncCtx15 + 12 >> 2] = $4; //@line 1025
  HEAP32[$AsyncCtx15 + 16 >> 2] = $vararg_buffer8; //@line 1027
  HEAP32[$AsyncCtx15 + 20 >> 2] = $vararg_buffer8; //@line 1029
  HEAP32[$AsyncCtx15 + 24 >> 2] = $0; //@line 1031
  HEAP32[$AsyncCtx15 + 28 >> 2] = $vararg_buffer3; //@line 1033
  HEAP32[$AsyncCtx15 + 32 >> 2] = $vararg_buffer6; //@line 1035
  HEAP32[$AsyncCtx15 + 36 >> 2] = $vararg_buffer6; //@line 1037
  sp = STACKTOP; //@line 1038
  STACKTOP = sp; //@line 1039
  return 0; //@line 1039
 }
 _emscripten_free_async_context($AsyncCtx15 | 0); //@line 1041
 $AsyncCtx18 = _emscripten_alloc_async_context(40, sp) | 0; //@line 1042
 __ZN4mbed5Timer5startEv($vararg_buffer3); //@line 1043
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 65; //@line 1046
  HEAP16[$AsyncCtx18 + 4 >> 1] = $3; //@line 1048
  HEAP32[$AsyncCtx18 + 8 >> 2] = $vararg_buffer3; //@line 1050
  HEAP32[$AsyncCtx18 + 12 >> 2] = $4; //@line 1052
  HEAP32[$AsyncCtx18 + 16 >> 2] = $vararg_buffer8; //@line 1054
  HEAP32[$AsyncCtx18 + 20 >> 2] = $vararg_buffer8; //@line 1056
  HEAP32[$AsyncCtx18 + 24 >> 2] = $0; //@line 1058
  HEAP32[$AsyncCtx18 + 28 >> 2] = $vararg_buffer3; //@line 1060
  HEAP32[$AsyncCtx18 + 32 >> 2] = $vararg_buffer6; //@line 1062
  HEAP32[$AsyncCtx18 + 36 >> 2] = $vararg_buffer6; //@line 1064
  sp = STACKTOP; //@line 1065
  STACKTOP = sp; //@line 1066
  return 0; //@line 1066
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 1068
 L13 : do {
  if ($3 << 16 >> 16 < -1) {
   $AsyncCtx24 = _emscripten_alloc_async_context(28, sp) | 0; //@line 1072
   $49 = __ZN4mbed5Timer7read_msEv($vararg_buffer3) | 0; //@line 1073
   if (___async) {
    HEAP32[$AsyncCtx24 >> 2] = 66; //@line 1076
    HEAP32[$AsyncCtx24 + 4 >> 2] = $4; //@line 1078
    HEAP32[$AsyncCtx24 + 8 >> 2] = $vararg_buffer6; //@line 1080
    HEAP32[$AsyncCtx24 + 12 >> 2] = $vararg_buffer6; //@line 1082
    HEAP32[$AsyncCtx24 + 16 >> 2] = $0; //@line 1084
    HEAP32[$AsyncCtx24 + 20 >> 2] = $vararg_buffer3; //@line 1086
    HEAP32[$AsyncCtx24 + 24 >> 2] = $vararg_buffer3; //@line 1088
    sp = STACKTOP; //@line 1089
    STACKTOP = sp; //@line 1090
    return 0; //@line 1090
   }
   _emscripten_free_async_context($AsyncCtx24 | 0); //@line 1092
   if (($49 | 0) < ($4 | 0)) {
    _mbed_tracef(16, 10968, 11134, $vararg_buffer6); //@line 1095
    $$0$off0 = 0; //@line 1096
   } else {
    $$0$off0 = 1; //@line 1098
   }
  } else {
   while (1) {
    $AsyncCtx21 = _emscripten_alloc_async_context(28, sp) | 0; //@line 1102
    $57 = __ZN4mbed5Timer7read_msEv($vararg_buffer3) | 0; //@line 1103
    if (___async) {
     break;
    }
    _emscripten_free_async_context($AsyncCtx21 | 0); //@line 1108
    if (($57 | 0) >= ($4 | 0)) {
     $$0$off0 = 1; //@line 1111
     break L13;
    }
    _mbed_tracef(16, 10968, 11134, $vararg_buffer8); //@line 1114
   }
   HEAP32[$AsyncCtx21 >> 2] = 67; //@line 1116
   HEAP32[$AsyncCtx21 + 4 >> 2] = $4; //@line 1118
   HEAP32[$AsyncCtx21 + 8 >> 2] = $vararg_buffer8; //@line 1120
   HEAP32[$AsyncCtx21 + 12 >> 2] = $vararg_buffer8; //@line 1122
   HEAP32[$AsyncCtx21 + 16 >> 2] = $0; //@line 1124
   HEAP32[$AsyncCtx21 + 20 >> 2] = $vararg_buffer3; //@line 1126
   HEAP32[$AsyncCtx21 + 24 >> 2] = $vararg_buffer3; //@line 1128
   sp = STACKTOP; //@line 1129
   STACKTOP = sp; //@line 1130
   return 0; //@line 1130
  }
 } while (0);
 $67 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0; //@line 1135
 $AsyncCtx12 = _emscripten_alloc_async_context(16, sp) | 0; //@line 1136
 FUNCTION_TABLE_vi[$67 & 1023]($0); //@line 1137
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 68; //@line 1140
  HEAP32[$AsyncCtx12 + 4 >> 2] = $vararg_buffer3; //@line 1142
  HEAP32[$AsyncCtx12 + 8 >> 2] = $vararg_buffer3; //@line 1144
  HEAP8[$AsyncCtx12 + 12 >> 0] = $$0$off0 & 1; //@line 1147
  sp = STACKTOP; //@line 1148
  STACKTOP = sp; //@line 1149
  return 0; //@line 1149
 } else {
  _emscripten_free_async_context($AsyncCtx12 | 0); //@line 1151
  __ZN4mbed5TimerD2Ev($vararg_buffer3); //@line 1152
  STACKTOP = sp; //@line 1153
  return $$0$off0 | 0; //@line 1153
 }
 return 0; //@line 1155
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_185($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $$pre16 = 0, $13 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $44 = 0, $48 = 0, $49 = 0, $51 = 0, $52 = 0, $53 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 31720
 STACKTOP = STACKTOP + 16 | 0; //@line 31721
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 31721
 $$byval_copy = sp; //@line 31722
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31724
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31726
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31728
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31730
 $$pre16 = HEAP8[$2 >> 0] | 0; //@line 31733
 do {
  if (!($$pre16 & 2)) {
   $44 = $$pre16; //@line 31738
  } else {
   $13 = $$pre16 & -3; //@line 31740
   HEAP8[$2 >> 0] = $13; //@line 31741
   if ((HEAP32[$4 + 360 >> 2] | 0) == 2) {
    _mbed_tracef(16, 13728, 13747, $8); //@line 31746
    $18 = HEAP32[$4 + 1328 >> 2] | 0; //@line 31748
    HEAP32[$6 >> 2] = 293; //@line 31749
    HEAP32[$6 + 4 >> 2] = 0; //@line 31751
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 31752
    HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 31753
    HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 31753
    $19 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($18, $4, $$byval_copy) | 0; //@line 31754
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 403; //@line 31757
     $20 = $ReallocAsyncCtx8 + 4 | 0; //@line 31758
     HEAP32[$20 >> 2] = $2; //@line 31759
     $21 = $ReallocAsyncCtx8 + 8 | 0; //@line 31760
     HEAP32[$21 >> 2] = $4; //@line 31761
     $22 = $ReallocAsyncCtx8 + 12 | 0; //@line 31762
     HEAP32[$22 >> 2] = $6; //@line 31763
     sp = STACKTOP; //@line 31764
     STACKTOP = sp; //@line 31765
     return;
    }
    HEAP32[___async_retval >> 2] = $19; //@line 31768
    ___async_unwind = 0; //@line 31769
    HEAP32[$ReallocAsyncCtx8 >> 2] = 403; //@line 31770
    $20 = $ReallocAsyncCtx8 + 4 | 0; //@line 31771
    HEAP32[$20 >> 2] = $2; //@line 31772
    $21 = $ReallocAsyncCtx8 + 8 | 0; //@line 31773
    HEAP32[$21 >> 2] = $4; //@line 31774
    $22 = $ReallocAsyncCtx8 + 12 | 0; //@line 31775
    HEAP32[$22 >> 2] = $6; //@line 31776
    sp = STACKTOP; //@line 31777
    STACKTOP = sp; //@line 31778
    return;
   }
   if ($13 & 4) {
    $42 = $13 & -5; //@line 31783
    HEAP8[$2 >> 0] = $42; //@line 31784
    $44 = $42; //@line 31785
    break;
   }
   $27 = HEAP32[$4 + 1324 >> 2] | 0; //@line 31789
   $28 = $27 + 16 | 0; //@line 31790
   $30 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 31792
   $31 = $27 + 28 | 0; //@line 31793
   $32 = HEAP32[$31 >> 2] | 0; //@line 31794
   if (!$32) {
    $ReallocAsyncCtx13 = _emscripten_realloc_async_context(24) | 0; //@line 31797
    _mbed_assert_internal(15679, 15684, 1102); //@line 31798
    if (___async) {
     HEAP32[$ReallocAsyncCtx13 >> 2] = 405; //@line 31801
     $34 = $ReallocAsyncCtx13 + 4 | 0; //@line 31802
     HEAP32[$34 >> 2] = $31; //@line 31803
     $35 = $ReallocAsyncCtx13 + 8 | 0; //@line 31804
     HEAP32[$35 >> 2] = $28; //@line 31805
     $36 = $ReallocAsyncCtx13 + 12 | 0; //@line 31806
     HEAP32[$36 >> 2] = $30; //@line 31807
     $37 = $ReallocAsyncCtx13 + 16 | 0; //@line 31808
     HEAP32[$37 >> 2] = $2; //@line 31809
     $38 = $ReallocAsyncCtx13 + 20 | 0; //@line 31810
     HEAP32[$38 >> 2] = $4; //@line 31811
     sp = STACKTOP; //@line 31812
     STACKTOP = sp; //@line 31813
     return;
    }
    ___async_unwind = 0; //@line 31815
    HEAP32[$ReallocAsyncCtx13 >> 2] = 405; //@line 31816
    $34 = $ReallocAsyncCtx13 + 4 | 0; //@line 31817
    HEAP32[$34 >> 2] = $31; //@line 31818
    $35 = $ReallocAsyncCtx13 + 8 | 0; //@line 31819
    HEAP32[$35 >> 2] = $28; //@line 31820
    $36 = $ReallocAsyncCtx13 + 12 | 0; //@line 31821
    HEAP32[$36 >> 2] = $30; //@line 31822
    $37 = $ReallocAsyncCtx13 + 16 | 0; //@line 31823
    HEAP32[$37 >> 2] = $2; //@line 31824
    $38 = $ReallocAsyncCtx13 + 20 | 0; //@line 31825
    HEAP32[$38 >> 2] = $4; //@line 31826
    sp = STACKTOP; //@line 31827
    STACKTOP = sp; //@line 31828
    return;
   } else {
    $39 = HEAP32[$32 >> 2] | 0; //@line 31830
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 31831
    FUNCTION_TABLE_vii[$39 & 31]($28, $30); //@line 31832
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 406; //@line 31835
     $40 = $ReallocAsyncCtx4 + 4 | 0; //@line 31836
     HEAP32[$40 >> 2] = $2; //@line 31837
     $41 = $ReallocAsyncCtx4 + 8 | 0; //@line 31838
     HEAP32[$41 >> 2] = $4; //@line 31839
     sp = STACKTOP; //@line 31840
     STACKTOP = sp; //@line 31841
     return;
    }
    ___async_unwind = 0; //@line 31843
    HEAP32[$ReallocAsyncCtx4 >> 2] = 406; //@line 31844
    $40 = $ReallocAsyncCtx4 + 4 | 0; //@line 31845
    HEAP32[$40 >> 2] = $2; //@line 31846
    $41 = $ReallocAsyncCtx4 + 8 | 0; //@line 31847
    HEAP32[$41 >> 2] = $4; //@line 31848
    sp = STACKTOP; //@line 31849
    STACKTOP = sp; //@line 31850
    return;
   }
  }
 } while (0);
 if (!($44 & 16)) {
  STACKTOP = sp; //@line 31857
  return;
 }
 HEAP8[$2 >> 0] = $44 & -17; //@line 31860
 $48 = HEAP32[$4 + 1324 >> 2] | 0; //@line 31862
 $49 = $48 + 48 | 0; //@line 31863
 $51 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 31865
 $52 = $48 + 60 | 0; //@line 31866
 $53 = HEAP32[$52 >> 2] | 0; //@line 31867
 if (!$53) {
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(16) | 0; //@line 31870
  _mbed_assert_internal(15679, 15684, 1102); //@line 31871
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 407; //@line 31874
   $55 = $ReallocAsyncCtx12 + 4 | 0; //@line 31875
   HEAP32[$55 >> 2] = $52; //@line 31876
   $56 = $ReallocAsyncCtx12 + 8 | 0; //@line 31877
   HEAP32[$56 >> 2] = $49; //@line 31878
   $57 = $ReallocAsyncCtx12 + 12 | 0; //@line 31879
   HEAP32[$57 >> 2] = $51; //@line 31880
   sp = STACKTOP; //@line 31881
   STACKTOP = sp; //@line 31882
   return;
  }
  ___async_unwind = 0; //@line 31884
  HEAP32[$ReallocAsyncCtx12 >> 2] = 407; //@line 31885
  $55 = $ReallocAsyncCtx12 + 4 | 0; //@line 31886
  HEAP32[$55 >> 2] = $52; //@line 31887
  $56 = $ReallocAsyncCtx12 + 8 | 0; //@line 31888
  HEAP32[$56 >> 2] = $49; //@line 31889
  $57 = $ReallocAsyncCtx12 + 12 | 0; //@line 31890
  HEAP32[$57 >> 2] = $51; //@line 31891
  sp = STACKTOP; //@line 31892
  STACKTOP = sp; //@line 31893
  return;
 } else {
  $58 = HEAP32[$53 >> 2] | 0; //@line 31895
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 31896
  FUNCTION_TABLE_vii[$58 & 31]($49, $51); //@line 31897
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 408; //@line 31900
   sp = STACKTOP; //@line 31901
   STACKTOP = sp; //@line 31902
   return;
  }
  ___async_unwind = 0; //@line 31904
  HEAP32[$ReallocAsyncCtx5 >> 2] = 408; //@line 31905
  sp = STACKTOP; //@line 31906
  STACKTOP = sp; //@line 31907
  return;
 }
}
function _mbedtls_cipher_update($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0102 = 0, $$0103 = 0, $$0105 = 0, $$1 = 0, $$phi$trans$insert = 0, $$pre$phi107Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $12 = 0, $17 = 0, $19 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $34 = 0, $36 = 0, $37 = 0, $40 = 0, $41 = 0, $45 = 0, $49 = 0, $50 = 0, $56 = 0, $58 = 0, $59 = 0, $6 = 0, $62 = 0, $80 = 0, $85 = 0, $94 = 0, $96 = 0, $97 = 0, $99 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 2727
 if (!$0) {
  $$1 = -24832; //@line 2730
  return $$1 | 0; //@line 2731
 }
 $6 = HEAP32[$0 >> 2] | 0; //@line 2733
 if (($4 | 0) == 0 | ($6 | 0) == 0) {
  $$1 = -24832; //@line 2738
  return $$1 | 0; //@line 2739
 }
 HEAP32[$4 >> 2] = 0; //@line 2741
 $10 = HEAP32[$6 + 24 >> 2] | 0; //@line 2743
 $12 = HEAP32[$6 + 4 >> 2] | 0; //@line 2745
 switch ($12 | 0) {
 case 1:
  {
   if (($10 | 0) != ($2 | 0)) {
    $$1 = -25216; //@line 2750
    return $$1 | 0; //@line 2751
   }
   HEAP32[$4 >> 2] = $2; //@line 2753
   $17 = HEAP32[(HEAP32[$6 + 28 >> 2] | 0) + 4 >> 2] | 0; //@line 2757
   $19 = HEAP32[$0 + 60 >> 2] | 0; //@line 2759
   $21 = HEAP32[$0 + 8 >> 2] | 0; //@line 2761
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2762
   $22 = FUNCTION_TABLE_iiiii[$17 & 3]($19, $21, $1, $3) | 0; //@line 2763
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 590; //@line 2766
    sp = STACKTOP; //@line 2767
    return 0; //@line 2768
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 2770
   $$1 = $22; //@line 2771
   return $$1 | 0; //@line 2772
  }
 case 6:
  {
   HEAP32[$4 >> 2] = $2; //@line 2776
   $24 = HEAP32[$0 + 60 >> 2] | 0; //@line 2778
   $AsyncCtx11 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2779
   $25 = _mbedtls_gcm_update($24, $2, $1, $3) | 0; //@line 2780
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 591; //@line 2783
    sp = STACKTOP; //@line 2784
    return 0; //@line 2785
   }
   _emscripten_free_async_context($AsyncCtx11 | 0); //@line 2787
   $$1 = $25; //@line 2788
   return $$1 | 0; //@line 2789
  }
 default:
  {
   if (!$10) {
    $$1 = -25472; //@line 2795
    return $$1 | 0; //@line 2796
   }
   if (($1 | 0) == ($3 | 0)) {
    if (HEAP32[$0 + 36 >> 2] | 0) {
     $$1 = -24832; //@line 2804
     return $$1 | 0; //@line 2805
    }
    if (($2 >>> 0) % ($10 >>> 0) | 0 | 0) {
     $$1 = -24832; //@line 2810
     return $$1 | 0; //@line 2811
    }
   }
   if (($12 | 0) != 2) {
    $$1 = -24704; //@line 2816
    return $$1 | 0; //@line 2817
   }
   $34 = $0 + 8 | 0; //@line 2819
   switch (HEAP32[$34 >> 2] | 0) {
   case 0:
    {
     $36 = $0 + 36 | 0; //@line 2823
     $37 = HEAP32[$36 >> 2] | 0; //@line 2824
     if (($10 - $37 | 0) >>> 0 < $2 >>> 0) {
      label = 18; //@line 2828
     } else {
      $$pre$phiZ2D = $36; //@line 2830
      $45 = $37; //@line 2830
      label = 20; //@line 2831
     }
     break;
    }
   case 1:
    {
     $40 = $0 + 36 | 0; //@line 2836
     $41 = HEAP32[$40 >> 2] | 0; //@line 2837
     if (($10 - $41 | 0) >>> 0 > $2 >>> 0) {
      $$pre$phiZ2D = $40; //@line 2841
      $45 = $41; //@line 2841
      label = 20; //@line 2842
     } else {
      $$pre$phi107Z2D = $40; //@line 2844
      $49 = $41; //@line 2844
     }
     break;
    }
   default:
    {
     label = 18; //@line 2849
    }
   }
   if ((label | 0) == 18) {
    $$phi$trans$insert = $0 + 36 | 0; //@line 2853
    $$pre$phi107Z2D = $$phi$trans$insert; //@line 2855
    $49 = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 2855
   } else if ((label | 0) == 20) {
    _memcpy($0 + 20 + $45 | 0, $1 | 0, $2 | 0) | 0; //@line 2859
    HEAP32[$$pre$phiZ2D >> 2] = (HEAP32[$$pre$phiZ2D >> 2] | 0) + $2; //@line 2862
    $$1 = 0; //@line 2863
    return $$1 | 0; //@line 2864
   }
   do {
    if (!$49) {
     $$0102 = $3; //@line 2869
     $$0103 = $2; //@line 2869
     $$0105 = $1; //@line 2869
    } else {
     $50 = $10 - $49 | 0; //@line 2871
     _memcpy($0 + 20 + $49 | 0, $1 | 0, $50 | 0) | 0; //@line 2873
     $56 = HEAP32[(HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] | 0) + 8 >> 2] | 0; //@line 2878
     $58 = HEAP32[$0 + 60 >> 2] | 0; //@line 2880
     $59 = HEAP32[$34 >> 2] | 0; //@line 2881
     $AsyncCtx3 = _emscripten_alloc_async_context(44, sp) | 0; //@line 2884
     $62 = FUNCTION_TABLE_iiiiiii[$56 & 3]($58, $59, $10, $0 + 40 | 0, $0 + 20 | 0, $3) | 0; //@line 2885
     if (___async) {
      HEAP32[$AsyncCtx3 >> 2] = 592; //@line 2888
      HEAP32[$AsyncCtx3 + 4 >> 2] = $4; //@line 2890
      HEAP32[$AsyncCtx3 + 8 >> 2] = $10; //@line 2892
      HEAP32[$AsyncCtx3 + 12 >> 2] = $3; //@line 2894
      HEAP32[$AsyncCtx3 + 16 >> 2] = $$pre$phi107Z2D; //@line 2896
      HEAP32[$AsyncCtx3 + 20 >> 2] = $1; //@line 2898
      HEAP32[$AsyncCtx3 + 24 >> 2] = $50; //@line 2900
      HEAP32[$AsyncCtx3 + 28 >> 2] = $2; //@line 2902
      HEAP32[$AsyncCtx3 + 32 >> 2] = $34; //@line 2904
      HEAP32[$AsyncCtx3 + 36 >> 2] = $0; //@line 2906
      HEAP32[$AsyncCtx3 + 40 >> 2] = $0; //@line 2908
      sp = STACKTOP; //@line 2909
      return 0; //@line 2910
     }
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2912
     if (!$62) {
      HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + $10; //@line 2917
      HEAP32[$$pre$phi107Z2D >> 2] = 0; //@line 2919
      $$0102 = $3 + $10 | 0; //@line 2922
      $$0103 = $2 - $50 | 0; //@line 2922
      $$0105 = $1 + $50 | 0; //@line 2922
      break;
     } else {
      $$1 = $62; //@line 2925
      return $$1 | 0; //@line 2926
     }
    }
   } while (0);
   if (!$$0103) {
    $$1 = 0; //@line 2932
    return $$1 | 0; //@line 2933
   }
   $80 = ($$0103 >>> 0) % ($10 >>> 0) | 0; //@line 2935
   if (!$80) {
    $$0 = (HEAP32[$34 >> 2] | 0) == 0 ? $10 : 0; //@line 2941
   } else {
    $$0 = $80; //@line 2943
   }
   $85 = $$0103 - $$0 | 0; //@line 2946
   _memcpy($0 + 20 | 0, $$0105 + $85 | 0, $$0 | 0) | 0; //@line 2948
   HEAP32[$$pre$phi107Z2D >> 2] = (HEAP32[$$pre$phi107Z2D >> 2] | 0) + $$0; //@line 2951
   if (!$85) {
    $$1 = 0; //@line 2954
    return $$1 | 0; //@line 2955
   }
   $94 = HEAP32[(HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] | 0) + 8 >> 2] | 0; //@line 2961
   $96 = HEAP32[$0 + 60 >> 2] | 0; //@line 2963
   $97 = HEAP32[$34 >> 2] | 0; //@line 2964
   $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 2966
   $99 = FUNCTION_TABLE_iiiiiii[$94 & 3]($96, $97, $85, $0 + 40 | 0, $$0105, $$0102) | 0; //@line 2967
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 593; //@line 2970
    HEAP32[$AsyncCtx7 + 4 >> 2] = $4; //@line 2972
    HEAP32[$AsyncCtx7 + 8 >> 2] = $85; //@line 2974
    sp = STACKTOP; //@line 2975
    return 0; //@line 2976
   }
   _emscripten_free_async_context($AsyncCtx7 | 0); //@line 2978
   if ($99 | 0) {
    $$1 = $99; //@line 2981
    return $$1 | 0; //@line 2982
   }
   HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + $85; //@line 2986
   $$1 = 0; //@line 2987
   return $$1 | 0; //@line 2988
  }
 }
 return 0; //@line 2991
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_315($0) {
 $0 = $0 | 0;
 var $$pre$i$i34 = 0, $10 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 14001
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14003
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14005
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14007
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14009
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14011
 $$pre$i$i34 = HEAP32[HEAP32[$0 + 24 >> 2] >> 2] | 0; //@line 14016
 HEAP32[HEAP32[$0 + 28 >> 2] >> 2] = $$pre$i$i34; //@line 14018
 if ($$pre$i$i34 | 0) {
  $18 = HEAP32[$$pre$i$i34 + 8 >> 2] | 0; //@line 14022
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(24) | 0; //@line 14023
  FUNCTION_TABLE_vi[$18 & 1023]($8); //@line 14024
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 490; //@line 14027
   $19 = $ReallocAsyncCtx9 + 4 | 0; //@line 14028
   HEAP32[$19 >> 2] = $2; //@line 14029
   $20 = $ReallocAsyncCtx9 + 8 | 0; //@line 14030
   HEAP32[$20 >> 2] = $4; //@line 14031
   $21 = $ReallocAsyncCtx9 + 12 | 0; //@line 14032
   HEAP32[$21 >> 2] = $6; //@line 14033
   $22 = $ReallocAsyncCtx9 + 16 | 0; //@line 14034
   HEAP32[$22 >> 2] = $8; //@line 14035
   $23 = $ReallocAsyncCtx9 + 20 | 0; //@line 14036
   HEAP32[$23 >> 2] = $10; //@line 14037
   sp = STACKTOP; //@line 14038
   return;
  }
  ___async_unwind = 0; //@line 14041
  HEAP32[$ReallocAsyncCtx9 >> 2] = 490; //@line 14042
  $19 = $ReallocAsyncCtx9 + 4 | 0; //@line 14043
  HEAP32[$19 >> 2] = $2; //@line 14044
  $20 = $ReallocAsyncCtx9 + 8 | 0; //@line 14045
  HEAP32[$20 >> 2] = $4; //@line 14046
  $21 = $ReallocAsyncCtx9 + 12 | 0; //@line 14047
  HEAP32[$21 >> 2] = $6; //@line 14048
  $22 = $ReallocAsyncCtx9 + 16 | 0; //@line 14049
  HEAP32[$22 >> 2] = $8; //@line 14050
  $23 = $ReallocAsyncCtx9 + 20 | 0; //@line 14051
  HEAP32[$23 >> 2] = $10; //@line 14052
  sp = STACKTOP; //@line 14053
  return;
 }
 $24 = $10 + 12 | 0; //@line 14056
 HEAP32[$10 >> 2] = 491; //@line 14057
 HEAP32[$10 + 4 >> 2] = 0; //@line 14059
 HEAP32[$10 + 8 >> 2] = $4; //@line 14061
 HEAP32[$24 >> 2] = 912; //@line 14062
 $25 = $4 + 1228 | 0; //@line 14063
 if (($25 | 0) == ($10 | 0)) {
  $48 = HEAP32[230] | 0; //@line 14067
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 14068
  FUNCTION_TABLE_vi[$48 & 1023]($10); //@line 14069
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 494; //@line 14072
   $49 = $ReallocAsyncCtx12 + 4 | 0; //@line 14073
   HEAP32[$49 >> 2] = $10; //@line 14074
   $50 = $ReallocAsyncCtx12 + 8 | 0; //@line 14075
   HEAP32[$50 >> 2] = $2; //@line 14076
   $51 = $ReallocAsyncCtx12 + 12 | 0; //@line 14077
   HEAP32[$51 >> 2] = $4; //@line 14078
   $52 = $ReallocAsyncCtx12 + 16 | 0; //@line 14079
   HEAP32[$52 >> 2] = $6; //@line 14080
   sp = STACKTOP; //@line 14081
   return;
  }
  ___async_unwind = 0; //@line 14084
  HEAP32[$ReallocAsyncCtx12 >> 2] = 494; //@line 14085
  $49 = $ReallocAsyncCtx12 + 4 | 0; //@line 14086
  HEAP32[$49 >> 2] = $10; //@line 14087
  $50 = $ReallocAsyncCtx12 + 8 | 0; //@line 14088
  HEAP32[$50 >> 2] = $2; //@line 14089
  $51 = $ReallocAsyncCtx12 + 12 | 0; //@line 14090
  HEAP32[$51 >> 2] = $4; //@line 14091
  $52 = $ReallocAsyncCtx12 + 16 | 0; //@line 14092
  HEAP32[$52 >> 2] = $6; //@line 14093
  sp = STACKTOP; //@line 14094
  return;
 }
 $27 = $4 + 1240 | 0; //@line 14097
 $28 = HEAP32[$27 >> 2] | 0; //@line 14098
 if (!$28) {
  $40 = HEAP32[229] | 0; //@line 14102
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(28) | 0; //@line 14103
  FUNCTION_TABLE_vii[$40 & 31]($25, $10); //@line 14104
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 493; //@line 14107
   $41 = $ReallocAsyncCtx11 + 4 | 0; //@line 14108
   HEAP32[$41 >> 2] = $10; //@line 14109
   $42 = $ReallocAsyncCtx11 + 8 | 0; //@line 14110
   HEAP32[$42 >> 2] = $2; //@line 14111
   $43 = $ReallocAsyncCtx11 + 12 | 0; //@line 14112
   HEAP32[$43 >> 2] = $4; //@line 14113
   $44 = $ReallocAsyncCtx11 + 16 | 0; //@line 14114
   HEAP32[$44 >> 2] = $24; //@line 14115
   $45 = $ReallocAsyncCtx11 + 20 | 0; //@line 14116
   HEAP32[$45 >> 2] = $27; //@line 14117
   $46 = $ReallocAsyncCtx11 + 24 | 0; //@line 14118
   HEAP32[$46 >> 2] = $6; //@line 14119
   sp = STACKTOP; //@line 14120
   return;
  }
  ___async_unwind = 0; //@line 14123
  HEAP32[$ReallocAsyncCtx11 >> 2] = 493; //@line 14124
  $41 = $ReallocAsyncCtx11 + 4 | 0; //@line 14125
  HEAP32[$41 >> 2] = $10; //@line 14126
  $42 = $ReallocAsyncCtx11 + 8 | 0; //@line 14127
  HEAP32[$42 >> 2] = $2; //@line 14128
  $43 = $ReallocAsyncCtx11 + 12 | 0; //@line 14129
  HEAP32[$43 >> 2] = $4; //@line 14130
  $44 = $ReallocAsyncCtx11 + 16 | 0; //@line 14131
  HEAP32[$44 >> 2] = $24; //@line 14132
  $45 = $ReallocAsyncCtx11 + 20 | 0; //@line 14133
  HEAP32[$45 >> 2] = $27; //@line 14134
  $46 = $ReallocAsyncCtx11 + 24 | 0; //@line 14135
  HEAP32[$46 >> 2] = $6; //@line 14136
  sp = STACKTOP; //@line 14137
  return;
 } else {
  $31 = HEAP32[$28 + 8 >> 2] | 0; //@line 14141
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(32) | 0; //@line 14142
  FUNCTION_TABLE_vi[$31 & 1023]($25); //@line 14143
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 492; //@line 14146
   $32 = $ReallocAsyncCtx10 + 4 | 0; //@line 14147
   HEAP32[$32 >> 2] = $25; //@line 14148
   $33 = $ReallocAsyncCtx10 + 8 | 0; //@line 14149
   HEAP32[$33 >> 2] = $10; //@line 14150
   $34 = $ReallocAsyncCtx10 + 12 | 0; //@line 14151
   HEAP32[$34 >> 2] = $2; //@line 14152
   $35 = $ReallocAsyncCtx10 + 16 | 0; //@line 14153
   HEAP32[$35 >> 2] = $4; //@line 14154
   $36 = $ReallocAsyncCtx10 + 20 | 0; //@line 14155
   HEAP32[$36 >> 2] = $27; //@line 14156
   $37 = $ReallocAsyncCtx10 + 24 | 0; //@line 14157
   HEAP32[$37 >> 2] = $24; //@line 14158
   $38 = $ReallocAsyncCtx10 + 28 | 0; //@line 14159
   HEAP32[$38 >> 2] = $6; //@line 14160
   sp = STACKTOP; //@line 14161
   return;
  }
  ___async_unwind = 0; //@line 14164
  HEAP32[$ReallocAsyncCtx10 >> 2] = 492; //@line 14165
  $32 = $ReallocAsyncCtx10 + 4 | 0; //@line 14166
  HEAP32[$32 >> 2] = $25; //@line 14167
  $33 = $ReallocAsyncCtx10 + 8 | 0; //@line 14168
  HEAP32[$33 >> 2] = $10; //@line 14169
  $34 = $ReallocAsyncCtx10 + 12 | 0; //@line 14170
  HEAP32[$34 >> 2] = $2; //@line 14171
  $35 = $ReallocAsyncCtx10 + 16 | 0; //@line 14172
  HEAP32[$35 >> 2] = $4; //@line 14173
  $36 = $ReallocAsyncCtx10 + 20 | 0; //@line 14174
  HEAP32[$36 >> 2] = $27; //@line 14175
  $37 = $ReallocAsyncCtx10 + 24 | 0; //@line 14176
  HEAP32[$37 >> 2] = $24; //@line 14177
  $38 = $ReallocAsyncCtx10 + 28 | 0; //@line 14178
  HEAP32[$38 >> 2] = $6; //@line 14179
  sp = STACKTOP; //@line 14180
  return;
 }
}
function _mbedtls_cipher_cmac_update($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$06984 = 0, $$06984$us = 0, $$070 = 0, $$073 = 0, $$09$i = 0, $$09$i75 = 0, $$1$lcssa = 0, $$174$lcssa = 0, $$17481 = 0, $$182 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $22 = 0, $26 = 0, $3 = 0, $38 = 0, $43 = 0, $46 = 0, $5 = 0, $58 = 0, $62 = 0, $66 = 0, $79 = 0, $80 = 0, $81 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 3251
 STACKTOP = STACKTOP + 16 | 0; //@line 3252
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 3252
 $3 = sp; //@line 3253
 if (!$0) {
  $$0 = -24832; //@line 3256
  STACKTOP = sp; //@line 3257
  return $$0 | 0; //@line 3257
 }
 $5 = HEAP32[$0 >> 2] | 0; //@line 3259
 if (($1 | 0) == 0 | ($5 | 0) == 0) {
  $$0 = -24832; //@line 3264
  STACKTOP = sp; //@line 3265
  return $$0 | 0; //@line 3265
 }
 $9 = HEAP32[$0 + 64 >> 2] | 0; //@line 3268
 if (!$9) {
  $$0 = -24832; //@line 3271
  STACKTOP = sp; //@line 3272
  return $$0 | 0; //@line 3272
 }
 $12 = HEAP32[$5 + 24 >> 2] | 0; //@line 3275
 $13 = $9 + 32 | 0; //@line 3276
 $14 = HEAP32[$13 >> 2] | 0; //@line 3277
 do {
  if (!$14) {
   $$070 = $1; //@line 3281
   $$073 = $2; //@line 3281
  } else {
   $16 = $12 - $14 | 0; //@line 3283
   if ($16 >>> 0 < $2 >>> 0) {
    _memcpy($9 + 16 + $14 | 0, $1 | 0, $16 | 0) | 0; //@line 3287
    if ($12 | 0) {
     $$09$i = 0; //@line 3290
     do {
      $22 = $9 + $$09$i | 0; //@line 3294
      HEAP8[$22 >> 0] = HEAP8[$22 >> 0] ^ HEAP8[$9 + 16 + $$09$i >> 0]; //@line 3297
      $$09$i = $$09$i + 1 | 0; //@line 3298
     } while (($$09$i | 0) != ($12 | 0));
    }
    $AsyncCtx5 = _emscripten_alloc_async_context(40, sp) | 0; //@line 3307
    $26 = _mbedtls_cipher_update($0, $9, $12, $9, $3) | 0; //@line 3308
    if (___async) {
     HEAP32[$AsyncCtx5 >> 2] = 599; //@line 3311
     HEAP32[$AsyncCtx5 + 4 >> 2] = $2; //@line 3313
     HEAP32[$AsyncCtx5 + 8 >> 2] = $1; //@line 3315
     HEAP32[$AsyncCtx5 + 12 >> 2] = $12; //@line 3317
     HEAP32[$AsyncCtx5 + 16 >> 2] = $13; //@line 3319
     HEAP32[$AsyncCtx5 + 20 >> 2] = $0; //@line 3321
     HEAP32[$AsyncCtx5 + 24 >> 2] = $9; //@line 3323
     HEAP32[$AsyncCtx5 + 28 >> 2] = $3; //@line 3325
     HEAP32[$AsyncCtx5 + 32 >> 2] = $3; //@line 3327
     HEAP32[$AsyncCtx5 + 36 >> 2] = $9; //@line 3329
     sp = STACKTOP; //@line 3330
     STACKTOP = sp; //@line 3331
     return 0; //@line 3331
    }
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 3333
    if (!$26) {
     $38 = $12 - (HEAP32[$13 >> 2] | 0) | 0; //@line 3337
     HEAP32[$13 >> 2] = 0; //@line 3340
     $$070 = $1 + $38 | 0; //@line 3341
     $$073 = $2 - $38 | 0; //@line 3341
     break;
    } else {
     $$0 = $26; //@line 3344
     STACKTOP = sp; //@line 3345
     return $$0 | 0; //@line 3345
    }
   } else {
    $$070 = $1; //@line 3348
    $$073 = $2; //@line 3348
   }
  }
 } while (0);
 $43 = (($12 + -1 + $$073 | 0) >>> 0) / ($12 >>> 0) | 0; //@line 3354
 L24 : do {
  if ($43 >>> 0 > 1) {
   if (!$12) {
    $$06984$us = 1; //@line 3360
    while (1) {
     $AsyncCtx2 = _emscripten_alloc_async_context(44, sp) | 0; //@line 3362
     $46 = _mbedtls_cipher_update($0, $9, 0, $9, $3) | 0; //@line 3363
     if (___async) {
      label = 15; //@line 3366
      break;
     }
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 3369
     if ($46 | 0) {
      $$0 = $46; //@line 3372
      label = 26; //@line 3373
      break;
     }
     $58 = $$06984$us + 1 | 0; //@line 3376
     if ($58 >>> 0 < $43 >>> 0) {
      $$06984$us = $58; //@line 3379
     } else {
      $$1$lcssa = $$070; //@line 3381
      $$174$lcssa = $$073; //@line 3381
      break L24;
     }
    }
    if ((label | 0) == 15) {
     HEAP32[$AsyncCtx2 >> 2] = 600; //@line 3386
     HEAP32[$AsyncCtx2 + 4 >> 2] = $$06984$us; //@line 3388
     HEAP32[$AsyncCtx2 + 8 >> 2] = $43; //@line 3390
     HEAP32[$AsyncCtx2 + 12 >> 2] = $3; //@line 3392
     HEAP32[$AsyncCtx2 + 16 >> 2] = $0; //@line 3394
     HEAP32[$AsyncCtx2 + 20 >> 2] = $9; //@line 3396
     HEAP32[$AsyncCtx2 + 24 >> 2] = $3; //@line 3398
     HEAP32[$AsyncCtx2 + 28 >> 2] = $$073; //@line 3400
     HEAP32[$AsyncCtx2 + 32 >> 2] = $$070; //@line 3402
     HEAP32[$AsyncCtx2 + 36 >> 2] = $13; //@line 3404
     HEAP32[$AsyncCtx2 + 40 >> 2] = $9; //@line 3406
     sp = STACKTOP; //@line 3407
     STACKTOP = sp; //@line 3408
     return 0; //@line 3408
    } else if ((label | 0) == 26) {
     STACKTOP = sp; //@line 3411
     return $$0 | 0; //@line 3411
    }
   } else {
    $$06984 = 1; //@line 3414
    $$17481 = $$073; //@line 3414
    $$182 = $$070; //@line 3414
   }
   while (1) {
    $$09$i75 = 0; //@line 3417
    do {
     $62 = $9 + $$09$i75 | 0; //@line 3421
     HEAP8[$62 >> 0] = HEAP8[$62 >> 0] ^ HEAP8[$$182 + $$09$i75 >> 0]; //@line 3424
     $$09$i75 = $$09$i75 + 1 | 0; //@line 3425
    } while (($$09$i75 | 0) != ($12 | 0));
    $AsyncCtx = _emscripten_alloc_async_context(48, sp) | 0; //@line 3433
    $66 = _mbedtls_cipher_update($0, $9, $12, $9, $3) | 0; //@line 3434
    if (___async) {
     label = 21; //@line 3437
     break;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 3440
    if ($66 | 0) {
     $$0 = $66; //@line 3443
     label = 26; //@line 3444
     break;
    }
    $79 = $$17481 - $12 | 0; //@line 3447
    $80 = $$182 + $12 | 0; //@line 3448
    $81 = $$06984 + 1 | 0; //@line 3449
    if ($81 >>> 0 < $43 >>> 0) {
     $$06984 = $81; //@line 3452
     $$17481 = $79; //@line 3452
     $$182 = $80; //@line 3452
    } else {
     $$1$lcssa = $80; //@line 3454
     $$174$lcssa = $79; //@line 3454
     break L24;
    }
   }
   if ((label | 0) == 21) {
    HEAP32[$AsyncCtx >> 2] = 601; //@line 3459
    HEAP32[$AsyncCtx + 4 >> 2] = $$17481; //@line 3461
    HEAP32[$AsyncCtx + 8 >> 2] = $12; //@line 3463
    HEAP32[$AsyncCtx + 12 >> 2] = $$182; //@line 3465
    HEAP32[$AsyncCtx + 16 >> 2] = $$06984; //@line 3467
    HEAP32[$AsyncCtx + 20 >> 2] = $43; //@line 3469
    HEAP32[$AsyncCtx + 24 >> 2] = $3; //@line 3471
    HEAP32[$AsyncCtx + 28 >> 2] = $13; //@line 3473
    HEAP32[$AsyncCtx + 32 >> 2] = $9; //@line 3475
    HEAP32[$AsyncCtx + 36 >> 2] = $0; //@line 3477
    HEAP32[$AsyncCtx + 40 >> 2] = $9; //@line 3479
    HEAP32[$AsyncCtx + 44 >> 2] = $3; //@line 3481
    sp = STACKTOP; //@line 3482
    STACKTOP = sp; //@line 3483
    return 0; //@line 3483
   } else if ((label | 0) == 26) {
    STACKTOP = sp; //@line 3486
    return $$0 | 0; //@line 3486
   }
  } else {
   $$1$lcssa = $$070; //@line 3489
   $$174$lcssa = $$073; //@line 3489
  }
 } while (0);
 if (!$$174$lcssa) {
  $$0 = 0; //@line 3494
  STACKTOP = sp; //@line 3495
  return $$0 | 0; //@line 3495
 }
 _memcpy((HEAP32[$13 >> 2] | 0) + ($9 + 16) | 0, $$1$lcssa | 0, $$174$lcssa | 0) | 0; //@line 3499
 HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + $$174$lcssa; //@line 3502
 $$0 = 0; //@line 3503
 STACKTOP = sp; //@line 3504
 return $$0 | 0; //@line 3504
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0$i = 0, $$pre$i = 0, $11 = 0, $18 = 0, $21 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $39 = 0, $4 = 0, $43 = 0, $46 = 0, $5 = 0, $56 = 0, $59 = 0, $6 = 0, $64 = 0, $67 = 0, $7 = 0, $71 = 0, $74 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx18 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 7888
 STACKTOP = STACKTOP + 48 | 0; //@line 7889
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 7889
 $4 = sp + 16 | 0; //@line 7890
 $5 = sp; //@line 7891
 $6 = $1 + 12 | 0; //@line 7892
 $7 = HEAP32[$6 >> 2] | 0; //@line 7893
 do {
  if (!$7) {
   $9 = $5 + 12 | 0; //@line 7897
   HEAP32[$9 >> 2] = 0; //@line 7898
   $30 = 0; //@line 7899
   $39 = $9; //@line 7899
  } else {
   $11 = HEAP32[$7 + 4 >> 2] | 0; //@line 7902
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 7903
   FUNCTION_TABLE_vii[$11 & 31]($5, $1); //@line 7904
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 234; //@line 7907
    HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 7909
    HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 7911
    HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 7913
    HEAP8[$AsyncCtx + 16 >> 0] = $2; //@line 7915
    HEAP8[$AsyncCtx + 17 >> 0] = $3; //@line 7917
    HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 7919
    sp = STACKTOP; //@line 7920
    STACKTOP = sp; //@line 7921
    return 0; //@line 7921
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 7923
   $$pre$i = HEAP32[$6 >> 2] | 0; //@line 7924
   $18 = $5 + 12 | 0; //@line 7925
   HEAP32[$18 >> 2] = $$pre$i; //@line 7926
   if (!$$pre$i) {
    $30 = 0; //@line 7929
    $39 = $18; //@line 7929
   } else {
    $21 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 7933
    $AsyncCtx2 = _emscripten_alloc_async_context(28, sp) | 0; //@line 7934
    FUNCTION_TABLE_vii[$21 & 31]($4, $5); //@line 7935
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 235; //@line 7938
     HEAP32[$AsyncCtx2 + 4 >> 2] = $4; //@line 7940
     HEAP32[$AsyncCtx2 + 8 >> 2] = $5; //@line 7942
     HEAP32[$AsyncCtx2 + 12 >> 2] = $18; //@line 7944
     HEAP8[$AsyncCtx2 + 16 >> 0] = $2; //@line 7946
     HEAP8[$AsyncCtx2 + 17 >> 0] = $3; //@line 7948
     HEAP32[$AsyncCtx2 + 20 >> 2] = $0; //@line 7950
     HEAP32[$AsyncCtx2 + 24 >> 2] = $18; //@line 7952
     sp = STACKTOP; //@line 7953
     STACKTOP = sp; //@line 7954
     return 0; //@line 7954
    } else {
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7956
     $30 = HEAP32[$18 >> 2] | 0; //@line 7958
     $39 = $18; //@line 7958
     break;
    }
   }
  }
 } while (0);
 $29 = $4 + 12 | 0; //@line 7964
 HEAP32[$29 >> 2] = $30; //@line 7965
 $31 = $4 + 16 | 0; //@line 7966
 HEAP8[$31 >> 0] = $2; //@line 7967
 HEAP8[$4 + 17 >> 0] = $3; //@line 7969
 $AsyncCtx18 = _emscripten_alloc_async_context(32, sp) | 0; //@line 7970
 $33 = _equeue_alloc($0, 20) | 0; //@line 7971
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 236; //@line 7974
  HEAP32[$AsyncCtx18 + 4 >> 2] = $29; //@line 7976
  HEAP32[$AsyncCtx18 + 8 >> 2] = $4; //@line 7978
  HEAP32[$AsyncCtx18 + 12 >> 2] = $31; //@line 7980
  HEAP32[$AsyncCtx18 + 16 >> 2] = $0; //@line 7982
  HEAP32[$AsyncCtx18 + 20 >> 2] = $39; //@line 7984
  HEAP32[$AsyncCtx18 + 24 >> 2] = $5; //@line 7986
  HEAP32[$AsyncCtx18 + 28 >> 2] = $29; //@line 7988
  sp = STACKTOP; //@line 7989
  STACKTOP = sp; //@line 7990
  return 0; //@line 7990
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 7992
 do {
  if (!$33) {
   $$0$i = 0; //@line 7996
  } else {
   $43 = HEAP32[$29 >> 2] | 0; //@line 7998
   do {
    if (!$43) {
     $56 = 0; //@line 8002
    } else {
     $46 = HEAP32[$43 + 4 >> 2] | 0; //@line 8005
     $AsyncCtx5 = _emscripten_alloc_async_context(36, sp) | 0; //@line 8006
     FUNCTION_TABLE_vii[$46 & 31]($33, $4); //@line 8007
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 237; //@line 8010
      HEAP32[$AsyncCtx5 + 4 >> 2] = $29; //@line 8012
      HEAP32[$AsyncCtx5 + 8 >> 2] = $33; //@line 8014
      HEAP32[$AsyncCtx5 + 12 >> 2] = $31; //@line 8016
      HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 8018
      HEAP32[$AsyncCtx5 + 20 >> 2] = $29; //@line 8020
      HEAP32[$AsyncCtx5 + 24 >> 2] = $39; //@line 8022
      HEAP32[$AsyncCtx5 + 28 >> 2] = $4; //@line 8024
      HEAP32[$AsyncCtx5 + 32 >> 2] = $5; //@line 8026
      sp = STACKTOP; //@line 8027
      STACKTOP = sp; //@line 8028
      return 0; //@line 8028
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 8030
      $56 = HEAP32[$29 >> 2] | 0; //@line 8032
      break;
     }
    }
   } while (0);
   HEAP32[$33 + 12 >> 2] = $56; //@line 8038
   HEAP16[$33 + 16 >> 1] = HEAP16[$31 >> 1] | 0; //@line 8041
   _equeue_event_dtor($33, 238); //@line 8042
   $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 8043
   $59 = _equeue_post($0, 239, $33) | 0; //@line 8044
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 240; //@line 8047
    HEAP32[$AsyncCtx15 + 4 >> 2] = $29; //@line 8049
    HEAP32[$AsyncCtx15 + 8 >> 2] = $39; //@line 8051
    HEAP32[$AsyncCtx15 + 12 >> 2] = $4; //@line 8053
    HEAP32[$AsyncCtx15 + 16 >> 2] = $5; //@line 8055
    sp = STACKTOP; //@line 8056
    STACKTOP = sp; //@line 8057
    return 0; //@line 8057
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 8059
    $$0$i = $59; //@line 8060
    break;
   }
  }
 } while (0);
 $64 = HEAP32[$29 >> 2] | 0; //@line 8065
 do {
  if ($64 | 0) {
   $67 = HEAP32[$64 + 8 >> 2] | 0; //@line 8070
   $AsyncCtx8 = _emscripten_alloc_async_context(16, sp) | 0; //@line 8071
   FUNCTION_TABLE_vi[$67 & 1023]($4); //@line 8072
   if (___async) {
    HEAP32[$AsyncCtx8 >> 2] = 241; //@line 8075
    HEAP32[$AsyncCtx8 + 4 >> 2] = $39; //@line 8077
    HEAP32[$AsyncCtx8 + 8 >> 2] = $$0$i; //@line 8079
    HEAP32[$AsyncCtx8 + 12 >> 2] = $5; //@line 8081
    sp = STACKTOP; //@line 8082
    STACKTOP = sp; //@line 8083
    return 0; //@line 8083
   } else {
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 8085
    break;
   }
  }
 } while (0);
 $71 = HEAP32[$39 >> 2] | 0; //@line 8090
 if (!$71) {
  STACKTOP = sp; //@line 8093
  return $$0$i | 0; //@line 8093
 }
 $74 = HEAP32[$71 + 8 >> 2] | 0; //@line 8096
 $AsyncCtx12 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8097
 FUNCTION_TABLE_vi[$74 & 1023]($5); //@line 8098
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 242; //@line 8101
  HEAP32[$AsyncCtx12 + 4 >> 2] = $$0$i; //@line 8103
  sp = STACKTOP; //@line 8104
  STACKTOP = sp; //@line 8105
  return 0; //@line 8105
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 8107
 STACKTOP = sp; //@line 8108
 return $$0$i | 0; //@line 8108
}
function _mbedtls_cipher_cmac_update__async_cb_120($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$09$i75 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $27 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $44 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $66 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 24726
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24728
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24730
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24732
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24734
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24736
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24738
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 24740
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 24742
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 24744
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 24746
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 24749
  $66 = ___async_retval; //@line 24750
  HEAP32[$66 >> 2] = $$0; //@line 24751
  return;
 }
 $22 = $6 - (HEAP32[$8 >> 2] | 0) | 0; //@line 24755
 $23 = $4 + $22 | 0; //@line 24756
 $24 = $2 - $22 | 0; //@line 24757
 HEAP32[$8 >> 2] = 0; //@line 24758
 $27 = (($6 + -1 + $24 | 0) >>> 0) / ($6 >>> 0) | 0; //@line 24761
 if ($27 >>> 0 <= 1) {
  if (!$24) {
   $$0 = 0; //@line 24766
   $66 = ___async_retval; //@line 24767
   HEAP32[$66 >> 2] = $$0; //@line 24768
   return;
  }
  _memcpy((HEAP32[$8 >> 2] | 0) + ($18 + 16) | 0, $23 | 0, $24 | 0) | 0; //@line 24773
  HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + $24; //@line 24776
  $$0 = 0; //@line 24777
  $66 = ___async_retval; //@line 24778
  HEAP32[$66 >> 2] = $$0; //@line 24779
  return;
 }
 if (!$6) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(44) | 0; //@line 24784
  $30 = _mbedtls_cipher_update($10, $12, 0, $12, $14) | 0; //@line 24785
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 600; //@line 24788
   $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 24789
   HEAP32[$31 >> 2] = 1; //@line 24790
   $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 24791
   HEAP32[$32 >> 2] = $27; //@line 24792
   $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 24793
   HEAP32[$33 >> 2] = $16; //@line 24794
   $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 24795
   HEAP32[$34 >> 2] = $10; //@line 24796
   $35 = $ReallocAsyncCtx2 + 20 | 0; //@line 24797
   HEAP32[$35 >> 2] = $12; //@line 24798
   $36 = $ReallocAsyncCtx2 + 24 | 0; //@line 24799
   HEAP32[$36 >> 2] = $14; //@line 24800
   $37 = $ReallocAsyncCtx2 + 28 | 0; //@line 24801
   HEAP32[$37 >> 2] = $24; //@line 24802
   $38 = $ReallocAsyncCtx2 + 32 | 0; //@line 24803
   HEAP32[$38 >> 2] = $23; //@line 24804
   $39 = $ReallocAsyncCtx2 + 36 | 0; //@line 24805
   HEAP32[$39 >> 2] = $8; //@line 24806
   $40 = $ReallocAsyncCtx2 + 40 | 0; //@line 24807
   HEAP32[$40 >> 2] = $18; //@line 24808
   sp = STACKTOP; //@line 24809
   return;
  }
  HEAP32[___async_retval >> 2] = $30; //@line 24813
  ___async_unwind = 0; //@line 24814
  HEAP32[$ReallocAsyncCtx2 >> 2] = 600; //@line 24815
  $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 24816
  HEAP32[$31 >> 2] = 1; //@line 24817
  $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 24818
  HEAP32[$32 >> 2] = $27; //@line 24819
  $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 24820
  HEAP32[$33 >> 2] = $16; //@line 24821
  $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 24822
  HEAP32[$34 >> 2] = $10; //@line 24823
  $35 = $ReallocAsyncCtx2 + 20 | 0; //@line 24824
  HEAP32[$35 >> 2] = $12; //@line 24825
  $36 = $ReallocAsyncCtx2 + 24 | 0; //@line 24826
  HEAP32[$36 >> 2] = $14; //@line 24827
  $37 = $ReallocAsyncCtx2 + 28 | 0; //@line 24828
  HEAP32[$37 >> 2] = $24; //@line 24829
  $38 = $ReallocAsyncCtx2 + 32 | 0; //@line 24830
  HEAP32[$38 >> 2] = $23; //@line 24831
  $39 = $ReallocAsyncCtx2 + 36 | 0; //@line 24832
  HEAP32[$39 >> 2] = $8; //@line 24833
  $40 = $ReallocAsyncCtx2 + 40 | 0; //@line 24834
  HEAP32[$40 >> 2] = $18; //@line 24835
  sp = STACKTOP; //@line 24836
  return;
 }
 $$09$i75 = 0; //@line 24839
 do {
  $44 = $18 + $$09$i75 | 0; //@line 24843
  HEAP8[$44 >> 0] = HEAP8[$44 >> 0] ^ HEAP8[$23 + $$09$i75 >> 0]; //@line 24846
  $$09$i75 = $$09$i75 + 1 | 0; //@line 24847
 } while (($$09$i75 | 0) != ($6 | 0));
 $ReallocAsyncCtx = _emscripten_realloc_async_context(48) | 0; //@line 24855
 $48 = _mbedtls_cipher_update($10, $12, $6, $12, $14) | 0; //@line 24856
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 601; //@line 24859
  $49 = $ReallocAsyncCtx + 4 | 0; //@line 24860
  HEAP32[$49 >> 2] = $24; //@line 24861
  $50 = $ReallocAsyncCtx + 8 | 0; //@line 24862
  HEAP32[$50 >> 2] = $6; //@line 24863
  $51 = $ReallocAsyncCtx + 12 | 0; //@line 24864
  HEAP32[$51 >> 2] = $23; //@line 24865
  $52 = $ReallocAsyncCtx + 16 | 0; //@line 24866
  HEAP32[$52 >> 2] = 1; //@line 24867
  $53 = $ReallocAsyncCtx + 20 | 0; //@line 24868
  HEAP32[$53 >> 2] = $27; //@line 24869
  $54 = $ReallocAsyncCtx + 24 | 0; //@line 24870
  HEAP32[$54 >> 2] = $16; //@line 24871
  $55 = $ReallocAsyncCtx + 28 | 0; //@line 24872
  HEAP32[$55 >> 2] = $8; //@line 24873
  $56 = $ReallocAsyncCtx + 32 | 0; //@line 24874
  HEAP32[$56 >> 2] = $18; //@line 24875
  $57 = $ReallocAsyncCtx + 36 | 0; //@line 24876
  HEAP32[$57 >> 2] = $10; //@line 24877
  $58 = $ReallocAsyncCtx + 40 | 0; //@line 24878
  HEAP32[$58 >> 2] = $12; //@line 24879
  $59 = $ReallocAsyncCtx + 44 | 0; //@line 24880
  HEAP32[$59 >> 2] = $14; //@line 24881
  sp = STACKTOP; //@line 24882
  return;
 }
 HEAP32[___async_retval >> 2] = $48; //@line 24886
 ___async_unwind = 0; //@line 24887
 HEAP32[$ReallocAsyncCtx >> 2] = 601; //@line 24888
 $49 = $ReallocAsyncCtx + 4 | 0; //@line 24889
 HEAP32[$49 >> 2] = $24; //@line 24890
 $50 = $ReallocAsyncCtx + 8 | 0; //@line 24891
 HEAP32[$50 >> 2] = $6; //@line 24892
 $51 = $ReallocAsyncCtx + 12 | 0; //@line 24893
 HEAP32[$51 >> 2] = $23; //@line 24894
 $52 = $ReallocAsyncCtx + 16 | 0; //@line 24895
 HEAP32[$52 >> 2] = 1; //@line 24896
 $53 = $ReallocAsyncCtx + 20 | 0; //@line 24897
 HEAP32[$53 >> 2] = $27; //@line 24898
 $54 = $ReallocAsyncCtx + 24 | 0; //@line 24899
 HEAP32[$54 >> 2] = $16; //@line 24900
 $55 = $ReallocAsyncCtx + 28 | 0; //@line 24901
 HEAP32[$55 >> 2] = $8; //@line 24902
 $56 = $ReallocAsyncCtx + 32 | 0; //@line 24903
 HEAP32[$56 >> 2] = $18; //@line 24904
 $57 = $ReallocAsyncCtx + 36 | 0; //@line 24905
 HEAP32[$57 >> 2] = $10; //@line 24906
 $58 = $ReallocAsyncCtx + 40 | 0; //@line 24907
 HEAP32[$58 >> 2] = $12; //@line 24908
 $59 = $ReallocAsyncCtx + 44 | 0; //@line 24909
 HEAP32[$59 >> 2] = $14; //@line 24910
 sp = STACKTOP; //@line 24911
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $13 = 0, $17 = 0, $21 = 0, $23 = 0, $27 = 0, $3 = 0, $31 = 0, $33 = 0, $37 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx20 = 0, $AsyncCtx23 = 0, $AsyncCtx26 = 0, $AsyncCtx3 = 0, $AsyncCtx30 = 0, $AsyncCtx34 = 0, $AsyncCtx38 = 0, $AsyncCtx42 = 0, $AsyncCtx46 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 1270
 HEAP32[$0 >> 2] = 560; //@line 1271
 $1 = $0 + 1240 | 0; //@line 1272
 HEAP32[$1 >> 2] = 10172; //@line 1273
 __ZN4mbed6Ticker6detachEv($1); //@line 1274
 $3 = HEAP32[$0 + 1292 >> 2] | 0; //@line 1276
 do {
  if ($3 | 0) {
   $7 = HEAP32[$3 + 8 >> 2] | 0; //@line 1282
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 1283
   FUNCTION_TABLE_vi[$7 & 1023]($0 + 1280 | 0); //@line 1284
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 71; //@line 1287
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 1289
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 1291
    sp = STACKTOP; //@line 1292
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 1295
    break;
   }
  }
 } while (0);
 $AsyncCtx23 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1300
 __ZN4mbed10TimerEventD2Ev($1); //@line 1301
 if (___async) {
  HEAP32[$AsyncCtx23 >> 2] = 72; //@line 1304
  HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 1306
  sp = STACKTOP; //@line 1307
  return;
 }
 _emscripten_free_async_context($AsyncCtx23 | 0); //@line 1310
 $11 = $0 + 1176 | 0; //@line 1311
 HEAP32[$11 >> 2] = 10172; //@line 1312
 __ZN4mbed6Ticker6detachEv($11); //@line 1313
 $13 = HEAP32[$0 + 1228 >> 2] | 0; //@line 1315
 do {
  if ($13 | 0) {
   $17 = HEAP32[$13 + 8 >> 2] | 0; //@line 1321
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 1322
   FUNCTION_TABLE_vi[$17 & 1023]($0 + 1216 | 0); //@line 1323
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 73; //@line 1326
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 1328
    HEAP32[$AsyncCtx3 + 8 >> 2] = $11; //@line 1330
    sp = STACKTOP; //@line 1331
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 1334
    break;
   }
  }
 } while (0);
 $AsyncCtx20 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1339
 __ZN4mbed10TimerEventD2Ev($11); //@line 1340
 if (___async) {
  HEAP32[$AsyncCtx20 >> 2] = 74; //@line 1343
  HEAP32[$AsyncCtx20 + 4 >> 2] = $0; //@line 1345
  sp = STACKTOP; //@line 1346
  return;
 }
 _emscripten_free_async_context($AsyncCtx20 | 0); //@line 1349
 $21 = $0 + 1112 | 0; //@line 1350
 HEAP32[$21 >> 2] = 10172; //@line 1351
 __ZN4mbed6Ticker6detachEv($21); //@line 1352
 $23 = HEAP32[$0 + 1164 >> 2] | 0; //@line 1354
 do {
  if ($23 | 0) {
   $27 = HEAP32[$23 + 8 >> 2] | 0; //@line 1360
   $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 1361
   FUNCTION_TABLE_vi[$27 & 1023]($0 + 1152 | 0); //@line 1362
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 75; //@line 1365
    HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 1367
    HEAP32[$AsyncCtx7 + 8 >> 2] = $21; //@line 1369
    sp = STACKTOP; //@line 1370
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 1373
    break;
   }
  }
 } while (0);
 $AsyncCtx17 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1378
 __ZN4mbed10TimerEventD2Ev($21); //@line 1379
 if (___async) {
  HEAP32[$AsyncCtx17 >> 2] = 76; //@line 1382
  HEAP32[$AsyncCtx17 + 4 >> 2] = $0; //@line 1384
  sp = STACKTOP; //@line 1385
  return;
 }
 _emscripten_free_async_context($AsyncCtx17 | 0); //@line 1388
 $31 = $0 + 1048 | 0; //@line 1389
 HEAP32[$31 >> 2] = 10172; //@line 1390
 __ZN4mbed6Ticker6detachEv($31); //@line 1391
 $33 = HEAP32[$0 + 1100 >> 2] | 0; //@line 1393
 do {
  if ($33 | 0) {
   $37 = HEAP32[$33 + 8 >> 2] | 0; //@line 1399
   $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 1400
   FUNCTION_TABLE_vi[$37 & 1023]($0 + 1088 | 0); //@line 1401
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 77; //@line 1404
    HEAP32[$AsyncCtx11 + 4 >> 2] = $31; //@line 1406
    HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 1408
    sp = STACKTOP; //@line 1409
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 1412
    break;
   }
  }
 } while (0);
 $AsyncCtx14 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1417
 __ZN4mbed10TimerEventD2Ev($31); //@line 1418
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 78; //@line 1421
  HEAP32[$AsyncCtx14 + 4 >> 2] = $0; //@line 1423
  sp = STACKTOP; //@line 1424
  return;
 }
 _emscripten_free_async_context($AsyncCtx14 | 0); //@line 1427
 $AsyncCtx46 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1429
 __ZN4mbed11InterruptInD2Ev($0 + 412 | 0); //@line 1430
 if (___async) {
  HEAP32[$AsyncCtx46 >> 2] = 79; //@line 1433
  HEAP32[$AsyncCtx46 + 4 >> 2] = $0; //@line 1435
  sp = STACKTOP; //@line 1436
  return;
 }
 _emscripten_free_async_context($AsyncCtx46 | 0); //@line 1439
 $AsyncCtx42 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1441
 __ZN4mbed11InterruptInD2Ev($0 + 340 | 0); //@line 1442
 if (___async) {
  HEAP32[$AsyncCtx42 >> 2] = 80; //@line 1445
  HEAP32[$AsyncCtx42 + 4 >> 2] = $0; //@line 1447
  sp = STACKTOP; //@line 1448
  return;
 }
 _emscripten_free_async_context($AsyncCtx42 | 0); //@line 1451
 $AsyncCtx38 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1453
 __ZN4mbed11InterruptInD2Ev($0 + 268 | 0); //@line 1454
 if (___async) {
  HEAP32[$AsyncCtx38 >> 2] = 81; //@line 1457
  HEAP32[$AsyncCtx38 + 4 >> 2] = $0; //@line 1459
  sp = STACKTOP; //@line 1460
  return;
 }
 _emscripten_free_async_context($AsyncCtx38 | 0); //@line 1463
 $AsyncCtx34 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1465
 __ZN4mbed11InterruptInD2Ev($0 + 196 | 0); //@line 1466
 if (___async) {
  HEAP32[$AsyncCtx34 >> 2] = 82; //@line 1469
  HEAP32[$AsyncCtx34 + 4 >> 2] = $0; //@line 1471
  sp = STACKTOP; //@line 1472
  return;
 }
 _emscripten_free_async_context($AsyncCtx34 | 0); //@line 1475
 $AsyncCtx30 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1477
 __ZN4mbed11InterruptInD2Ev($0 + 124 | 0); //@line 1478
 if (___async) {
  HEAP32[$AsyncCtx30 >> 2] = 83; //@line 1481
  HEAP32[$AsyncCtx30 + 4 >> 2] = $0; //@line 1483
  sp = STACKTOP; //@line 1484
  return;
 }
 _emscripten_free_async_context($AsyncCtx30 | 0); //@line 1487
 $AsyncCtx26 = _emscripten_alloc_async_context(4, sp) | 0; //@line 1489
 __ZN4mbed11InterruptInD2Ev($0 + 52 | 0); //@line 1490
 if (___async) {
  HEAP32[$AsyncCtx26 >> 2] = 84; //@line 1493
  sp = STACKTOP; //@line 1494
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx26 | 0); //@line 1497
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$pre$i = 0, $10 = 0, $16 = 0, $19 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $33 = 0, $39 = 0, $4 = 0, $42 = 0, $5 = 0, $52 = 0, $55 = 0, $6 = 0, $60 = 0, $63 = 0, $67 = 0, $70 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx18 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 7662
 STACKTOP = STACKTOP + 48 | 0; //@line 7663
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 7663
 $3 = sp + 16 | 0; //@line 7664
 $4 = sp; //@line 7665
 $5 = $1 + 12 | 0; //@line 7666
 $6 = HEAP32[$5 >> 2] | 0; //@line 7667
 do {
  if (!$6) {
   $8 = $4 + 12 | 0; //@line 7671
   HEAP32[$8 >> 2] = 0; //@line 7672
   $27 = 0; //@line 7673
   $33 = $8; //@line 7673
  } else {
   $10 = HEAP32[$6 + 4 >> 2] | 0; //@line 7676
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 7677
   FUNCTION_TABLE_vii[$10 & 31]($4, $1); //@line 7678
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 225; //@line 7681
    HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 7683
    HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 7685
    HEAP32[$AsyncCtx + 12 >> 2] = $5; //@line 7687
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 7689
    HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 7691
    sp = STACKTOP; //@line 7692
    STACKTOP = sp; //@line 7693
    return 0; //@line 7693
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 7695
   $$pre$i = HEAP32[$5 >> 2] | 0; //@line 7696
   $16 = $4 + 12 | 0; //@line 7697
   HEAP32[$16 >> 2] = $$pre$i; //@line 7698
   if (!$$pre$i) {
    $27 = 0; //@line 7701
    $33 = $16; //@line 7701
   } else {
    $19 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 7705
    $AsyncCtx2 = _emscripten_alloc_async_context(28, sp) | 0; //@line 7706
    FUNCTION_TABLE_vii[$19 & 31]($3, $4); //@line 7707
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 226; //@line 7710
     HEAP32[$AsyncCtx2 + 4 >> 2] = $3; //@line 7712
     HEAP32[$AsyncCtx2 + 8 >> 2] = $16; //@line 7714
     HEAP32[$AsyncCtx2 + 12 >> 2] = $16; //@line 7716
     HEAP32[$AsyncCtx2 + 16 >> 2] = $2; //@line 7718
     HEAP32[$AsyncCtx2 + 20 >> 2] = $0; //@line 7720
     HEAP32[$AsyncCtx2 + 24 >> 2] = $4; //@line 7722
     sp = STACKTOP; //@line 7723
     STACKTOP = sp; //@line 7724
     return 0; //@line 7724
    } else {
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7726
     $27 = HEAP32[$16 >> 2] | 0; //@line 7728
     $33 = $16; //@line 7728
     break;
    }
   }
  }
 } while (0);
 $26 = $3 + 12 | 0; //@line 7734
 HEAP32[$26 >> 2] = $27; //@line 7735
 $28 = $3 + 16 | 0; //@line 7736
 HEAP32[$28 >> 2] = $2; //@line 7737
 $AsyncCtx18 = _emscripten_alloc_async_context(32, sp) | 0; //@line 7738
 $29 = _equeue_alloc($0, 20) | 0; //@line 7739
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 227; //@line 7742
  HEAP32[$AsyncCtx18 + 4 >> 2] = $26; //@line 7744
  HEAP32[$AsyncCtx18 + 8 >> 2] = $3; //@line 7746
  HEAP32[$AsyncCtx18 + 12 >> 2] = $33; //@line 7748
  HEAP32[$AsyncCtx18 + 16 >> 2] = $28; //@line 7750
  HEAP32[$AsyncCtx18 + 20 >> 2] = $0; //@line 7752
  HEAP32[$AsyncCtx18 + 24 >> 2] = $4; //@line 7754
  HEAP32[$AsyncCtx18 + 28 >> 2] = $26; //@line 7756
  sp = STACKTOP; //@line 7757
  STACKTOP = sp; //@line 7758
  return 0; //@line 7758
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 7760
 do {
  if (!$29) {
   $$0$i = 0; //@line 7764
  } else {
   $39 = HEAP32[$26 >> 2] | 0; //@line 7766
   do {
    if (!$39) {
     $52 = 0; //@line 7770
    } else {
     $42 = HEAP32[$39 + 4 >> 2] | 0; //@line 7773
     $AsyncCtx5 = _emscripten_alloc_async_context(36, sp) | 0; //@line 7774
     FUNCTION_TABLE_vii[$42 & 31]($29, $3); //@line 7775
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 228; //@line 7778
      HEAP32[$AsyncCtx5 + 4 >> 2] = $26; //@line 7780
      HEAP32[$AsyncCtx5 + 8 >> 2] = $29; //@line 7782
      HEAP32[$AsyncCtx5 + 12 >> 2] = $28; //@line 7784
      HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 7786
      HEAP32[$AsyncCtx5 + 20 >> 2] = $26; //@line 7788
      HEAP32[$AsyncCtx5 + 24 >> 2] = $33; //@line 7790
      HEAP32[$AsyncCtx5 + 28 >> 2] = $3; //@line 7792
      HEAP32[$AsyncCtx5 + 32 >> 2] = $4; //@line 7794
      sp = STACKTOP; //@line 7795
      STACKTOP = sp; //@line 7796
      return 0; //@line 7796
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 7798
      $52 = HEAP32[$26 >> 2] | 0; //@line 7800
      break;
     }
    }
   } while (0);
   HEAP32[$29 + 12 >> 2] = $52; //@line 7806
   HEAP32[$29 + 16 >> 2] = HEAP32[$28 >> 2]; //@line 7809
   _equeue_event_dtor($29, 229); //@line 7810
   $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 7811
   $55 = _equeue_post($0, 230, $29) | 0; //@line 7812
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 231; //@line 7815
    HEAP32[$AsyncCtx15 + 4 >> 2] = $26; //@line 7817
    HEAP32[$AsyncCtx15 + 8 >> 2] = $33; //@line 7819
    HEAP32[$AsyncCtx15 + 12 >> 2] = $3; //@line 7821
    HEAP32[$AsyncCtx15 + 16 >> 2] = $4; //@line 7823
    sp = STACKTOP; //@line 7824
    STACKTOP = sp; //@line 7825
    return 0; //@line 7825
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 7827
    $$0$i = $55; //@line 7828
    break;
   }
  }
 } while (0);
 $60 = HEAP32[$26 >> 2] | 0; //@line 7833
 do {
  if ($60 | 0) {
   $63 = HEAP32[$60 + 8 >> 2] | 0; //@line 7838
   $AsyncCtx8 = _emscripten_alloc_async_context(16, sp) | 0; //@line 7839
   FUNCTION_TABLE_vi[$63 & 1023]($3); //@line 7840
   if (___async) {
    HEAP32[$AsyncCtx8 >> 2] = 232; //@line 7843
    HEAP32[$AsyncCtx8 + 4 >> 2] = $33; //@line 7845
    HEAP32[$AsyncCtx8 + 8 >> 2] = $$0$i; //@line 7847
    HEAP32[$AsyncCtx8 + 12 >> 2] = $4; //@line 7849
    sp = STACKTOP; //@line 7850
    STACKTOP = sp; //@line 7851
    return 0; //@line 7851
   } else {
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 7853
    break;
   }
  }
 } while (0);
 $67 = HEAP32[$33 >> 2] | 0; //@line 7858
 if (!$67) {
  STACKTOP = sp; //@line 7861
  return $$0$i | 0; //@line 7861
 }
 $70 = HEAP32[$67 + 8 >> 2] | 0; //@line 7864
 $AsyncCtx12 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7865
 FUNCTION_TABLE_vi[$70 & 1023]($4); //@line 7866
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 233; //@line 7869
  HEAP32[$AsyncCtx12 + 4 >> 2] = $$0$i; //@line 7871
  sp = STACKTOP; //@line 7872
  STACKTOP = sp; //@line 7873
  return 0; //@line 7873
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 7875
 STACKTOP = sp; //@line 7876
 return $$0$i | 0; //@line 7876
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_310($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $6 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 13049
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13051
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13053
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13055
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13059
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13061
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 13063
 $15 = $10 + 12 | 0; //@line 13064
 HEAP32[$10 >> 2] = 7; //@line 13065
 HEAP32[$10 + 4 >> 2] = 0; //@line 13067
 HEAP32[$10 + 8 >> 2] = $4; //@line 13069
 HEAP32[$15 >> 2] = 924; //@line 13070
 $16 = $4 + 1244 | 0; //@line 13071
 if (($16 | 0) == ($10 | 0)) {
  $43 = HEAP32[233] | 0; //@line 13075
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(28) | 0; //@line 13076
  FUNCTION_TABLE_vi[$43 & 1023]($10); //@line 13077
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 486; //@line 13080
   $44 = $ReallocAsyncCtx6 + 4 | 0; //@line 13081
   HEAP32[$44 >> 2] = $2; //@line 13082
   $45 = $ReallocAsyncCtx6 + 8 | 0; //@line 13083
   HEAP32[$45 >> 2] = $4; //@line 13084
   $46 = $ReallocAsyncCtx6 + 12 | 0; //@line 13085
   HEAP32[$46 >> 2] = $6; //@line 13086
   $47 = $ReallocAsyncCtx6 + 16 | 0; //@line 13087
   HEAP32[$47 >> 2] = $10; //@line 13088
   $48 = $ReallocAsyncCtx6 + 20 | 0; //@line 13089
   HEAP32[$48 >> 2] = $12; //@line 13090
   $49 = $ReallocAsyncCtx6 + 24 | 0; //@line 13091
   HEAP32[$49 >> 2] = $14; //@line 13092
   sp = STACKTOP; //@line 13093
   return;
  }
  ___async_unwind = 0; //@line 13096
  HEAP32[$ReallocAsyncCtx6 >> 2] = 486; //@line 13097
  $44 = $ReallocAsyncCtx6 + 4 | 0; //@line 13098
  HEAP32[$44 >> 2] = $2; //@line 13099
  $45 = $ReallocAsyncCtx6 + 8 | 0; //@line 13100
  HEAP32[$45 >> 2] = $4; //@line 13101
  $46 = $ReallocAsyncCtx6 + 12 | 0; //@line 13102
  HEAP32[$46 >> 2] = $6; //@line 13103
  $47 = $ReallocAsyncCtx6 + 16 | 0; //@line 13104
  HEAP32[$47 >> 2] = $10; //@line 13105
  $48 = $ReallocAsyncCtx6 + 20 | 0; //@line 13106
  HEAP32[$48 >> 2] = $12; //@line 13107
  $49 = $ReallocAsyncCtx6 + 24 | 0; //@line 13108
  HEAP32[$49 >> 2] = $14; //@line 13109
  sp = STACKTOP; //@line 13110
  return;
 }
 $18 = $4 + 1256 | 0; //@line 13113
 $19 = HEAP32[$18 >> 2] | 0; //@line 13114
 if (!$19) {
  $33 = HEAP32[232] | 0; //@line 13118
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(36) | 0; //@line 13119
  FUNCTION_TABLE_vii[$33 & 31]($16, $10); //@line 13120
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 485; //@line 13123
   $34 = $ReallocAsyncCtx5 + 4 | 0; //@line 13124
   HEAP32[$34 >> 2] = $15; //@line 13125
   $35 = $ReallocAsyncCtx5 + 8 | 0; //@line 13126
   HEAP32[$35 >> 2] = $18; //@line 13127
   $36 = $ReallocAsyncCtx5 + 12 | 0; //@line 13128
   HEAP32[$36 >> 2] = $2; //@line 13129
   $37 = $ReallocAsyncCtx5 + 16 | 0; //@line 13130
   HEAP32[$37 >> 2] = $4; //@line 13131
   $38 = $ReallocAsyncCtx5 + 20 | 0; //@line 13132
   HEAP32[$38 >> 2] = $6; //@line 13133
   $39 = $ReallocAsyncCtx5 + 24 | 0; //@line 13134
   HEAP32[$39 >> 2] = $10; //@line 13135
   $40 = $ReallocAsyncCtx5 + 28 | 0; //@line 13136
   HEAP32[$40 >> 2] = $12; //@line 13137
   $41 = $ReallocAsyncCtx5 + 32 | 0; //@line 13138
   HEAP32[$41 >> 2] = $14; //@line 13139
   sp = STACKTOP; //@line 13140
   return;
  }
  ___async_unwind = 0; //@line 13143
  HEAP32[$ReallocAsyncCtx5 >> 2] = 485; //@line 13144
  $34 = $ReallocAsyncCtx5 + 4 | 0; //@line 13145
  HEAP32[$34 >> 2] = $15; //@line 13146
  $35 = $ReallocAsyncCtx5 + 8 | 0; //@line 13147
  HEAP32[$35 >> 2] = $18; //@line 13148
  $36 = $ReallocAsyncCtx5 + 12 | 0; //@line 13149
  HEAP32[$36 >> 2] = $2; //@line 13150
  $37 = $ReallocAsyncCtx5 + 16 | 0; //@line 13151
  HEAP32[$37 >> 2] = $4; //@line 13152
  $38 = $ReallocAsyncCtx5 + 20 | 0; //@line 13153
  HEAP32[$38 >> 2] = $6; //@line 13154
  $39 = $ReallocAsyncCtx5 + 24 | 0; //@line 13155
  HEAP32[$39 >> 2] = $10; //@line 13156
  $40 = $ReallocAsyncCtx5 + 28 | 0; //@line 13157
  HEAP32[$40 >> 2] = $12; //@line 13158
  $41 = $ReallocAsyncCtx5 + 32 | 0; //@line 13159
  HEAP32[$41 >> 2] = $14; //@line 13160
  sp = STACKTOP; //@line 13161
  return;
 } else {
  $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 13165
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(40) | 0; //@line 13166
  FUNCTION_TABLE_vi[$22 & 1023]($16); //@line 13167
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 484; //@line 13170
   $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 13171
   HEAP32[$23 >> 2] = $15; //@line 13172
   $24 = $ReallocAsyncCtx4 + 8 | 0; //@line 13173
   HEAP32[$24 >> 2] = $18; //@line 13174
   $25 = $ReallocAsyncCtx4 + 12 | 0; //@line 13175
   HEAP32[$25 >> 2] = $2; //@line 13176
   $26 = $ReallocAsyncCtx4 + 16 | 0; //@line 13177
   HEAP32[$26 >> 2] = $4; //@line 13178
   $27 = $ReallocAsyncCtx4 + 20 | 0; //@line 13179
   HEAP32[$27 >> 2] = $6; //@line 13180
   $28 = $ReallocAsyncCtx4 + 24 | 0; //@line 13181
   HEAP32[$28 >> 2] = $16; //@line 13182
   $29 = $ReallocAsyncCtx4 + 28 | 0; //@line 13183
   HEAP32[$29 >> 2] = $10; //@line 13184
   $30 = $ReallocAsyncCtx4 + 32 | 0; //@line 13185
   HEAP32[$30 >> 2] = $12; //@line 13186
   $31 = $ReallocAsyncCtx4 + 36 | 0; //@line 13187
   HEAP32[$31 >> 2] = $14; //@line 13188
   sp = STACKTOP; //@line 13189
   return;
  }
  ___async_unwind = 0; //@line 13192
  HEAP32[$ReallocAsyncCtx4 >> 2] = 484; //@line 13193
  $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 13194
  HEAP32[$23 >> 2] = $15; //@line 13195
  $24 = $ReallocAsyncCtx4 + 8 | 0; //@line 13196
  HEAP32[$24 >> 2] = $18; //@line 13197
  $25 = $ReallocAsyncCtx4 + 12 | 0; //@line 13198
  HEAP32[$25 >> 2] = $2; //@line 13199
  $26 = $ReallocAsyncCtx4 + 16 | 0; //@line 13200
  HEAP32[$26 >> 2] = $4; //@line 13201
  $27 = $ReallocAsyncCtx4 + 20 | 0; //@line 13202
  HEAP32[$27 >> 2] = $6; //@line 13203
  $28 = $ReallocAsyncCtx4 + 24 | 0; //@line 13204
  HEAP32[$28 >> 2] = $16; //@line 13205
  $29 = $ReallocAsyncCtx4 + 28 | 0; //@line 13206
  HEAP32[$29 >> 2] = $10; //@line 13207
  $30 = $ReallocAsyncCtx4 + 32 | 0; //@line 13208
  HEAP32[$30 >> 2] = $12; //@line 13209
  $31 = $ReallocAsyncCtx4 + 36 | 0; //@line 13210
  HEAP32[$31 >> 2] = $14; //@line 13211
  sp = STACKTOP; //@line 13212
  return;
 }
}
function __ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$pre = 0, $$pre12 = 0, $$pre13 = 0, $12 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $4 = 0, $46 = 0, $47 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $57 = 0, $59 = 0, $6 = 0, $60 = 0, $63 = 0, $70 = 0, $71 = 0, $74 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8905
 if (!$1) {
  return;
 }
 $3 = $1 + 12 | 0; //@line 8910
 $4 = HEAP32[$3 >> 2] | 0; //@line 8911
 if ($4 | 0) {
  $6 = $0 + 1880 | 0; //@line 8914
  if (($6 | 0) != ($1 | 0)) {
   $8 = $0 + 1892 | 0; //@line 8917
   $9 = HEAP32[$8 >> 2] | 0; //@line 8918
   do {
    if (!$9) {
     $20 = $4; //@line 8922
     label = 8; //@line 8923
    } else {
     $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 8926
     $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 8927
     FUNCTION_TABLE_vi[$12 & 1023]($6); //@line 8928
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 260; //@line 8931
      HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 8933
      HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 8935
      HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 8937
      HEAP32[$AsyncCtx + 16 >> 2] = $8; //@line 8939
      HEAP32[$AsyncCtx + 20 >> 2] = $6; //@line 8941
      sp = STACKTOP; //@line 8942
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 8945
      $$pre = HEAP32[$3 >> 2] | 0; //@line 8946
      if (!$$pre) {
       $26 = 0; //@line 8949
       break;
      } else {
       $20 = $$pre; //@line 8952
       label = 8; //@line 8953
       break;
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 8) {
     $21 = HEAP32[$20 + 4 >> 2] | 0; //@line 8962
     $AsyncCtx2 = _emscripten_alloc_async_context(20, sp) | 0; //@line 8963
     FUNCTION_TABLE_vii[$21 & 31]($6, $1); //@line 8964
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 261; //@line 8967
      HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 8969
      HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 8971
      HEAP32[$AsyncCtx2 + 12 >> 2] = $3; //@line 8973
      HEAP32[$AsyncCtx2 + 16 >> 2] = $8; //@line 8975
      sp = STACKTOP; //@line 8976
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx2 | 0); //@line 8979
      $26 = HEAP32[$3 >> 2] | 0; //@line 8981
      break;
     }
    }
   } while (0);
   HEAP32[$8 >> 2] = $26; //@line 8986
  }
 }
 $27 = $1 + 16 | 0; //@line 8989
 $28 = $1 + 28 | 0; //@line 8990
 $29 = HEAP32[$28 >> 2] | 0; //@line 8991
 if ($29 | 0) {
  $31 = $0 + 1896 | 0; //@line 8994
  if (($31 | 0) != ($27 | 0)) {
   $33 = $0 + 1908 | 0; //@line 8997
   $34 = HEAP32[$33 >> 2] | 0; //@line 8998
   do {
    if (!$34) {
     $46 = $29; //@line 9002
     label = 18; //@line 9003
    } else {
     $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 9006
     $AsyncCtx5 = _emscripten_alloc_async_context(28, sp) | 0; //@line 9007
     FUNCTION_TABLE_vi[$37 & 1023]($31); //@line 9008
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 262; //@line 9011
      HEAP32[$AsyncCtx5 + 4 >> 2] = $28; //@line 9013
      HEAP32[$AsyncCtx5 + 8 >> 2] = $33; //@line 9015
      HEAP32[$AsyncCtx5 + 12 >> 2] = $31; //@line 9017
      HEAP32[$AsyncCtx5 + 16 >> 2] = $27; //@line 9019
      HEAP32[$AsyncCtx5 + 20 >> 2] = $1; //@line 9021
      HEAP32[$AsyncCtx5 + 24 >> 2] = $0; //@line 9023
      sp = STACKTOP; //@line 9024
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 9027
      $$pre12 = HEAP32[$28 >> 2] | 0; //@line 9028
      if (!$$pre12) {
       $52 = 0; //@line 9031
       break;
      } else {
       $46 = $$pre12; //@line 9034
       label = 18; //@line 9035
       break;
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 18) {
     $47 = HEAP32[$46 + 4 >> 2] | 0; //@line 9044
     $AsyncCtx8 = _emscripten_alloc_async_context(20, sp) | 0; //@line 9045
     FUNCTION_TABLE_vii[$47 & 31]($31, $27); //@line 9046
     if (___async) {
      HEAP32[$AsyncCtx8 >> 2] = 263; //@line 9049
      HEAP32[$AsyncCtx8 + 4 >> 2] = $28; //@line 9051
      HEAP32[$AsyncCtx8 + 8 >> 2] = $33; //@line 9053
      HEAP32[$AsyncCtx8 + 12 >> 2] = $1; //@line 9055
      HEAP32[$AsyncCtx8 + 16 >> 2] = $0; //@line 9057
      sp = STACKTOP; //@line 9058
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx8 | 0); //@line 9061
      $52 = HEAP32[$28 >> 2] | 0; //@line 9063
      break;
     }
    }
   } while (0);
   HEAP32[$33 >> 2] = $52; //@line 9068
  }
 }
 $53 = $1 + 32 | 0; //@line 9071
 $54 = $1 + 44 | 0; //@line 9072
 $55 = HEAP32[$54 >> 2] | 0; //@line 9073
 if (!$55) {
  return;
 }
 $57 = $0 + 1912 | 0; //@line 9078
 if (($57 | 0) == ($53 | 0)) {
  return;
 }
 $59 = $0 + 1924 | 0; //@line 9083
 $60 = HEAP32[$59 >> 2] | 0; //@line 9084
 do {
  if (!$60) {
   $70 = $55; //@line 9088
   label = 28; //@line 9089
  } else {
   $63 = HEAP32[$60 + 8 >> 2] | 0; //@line 9092
   $AsyncCtx11 = _emscripten_alloc_async_context(20, sp) | 0; //@line 9093
   FUNCTION_TABLE_vi[$63 & 1023]($57); //@line 9094
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 264; //@line 9097
    HEAP32[$AsyncCtx11 + 4 >> 2] = $54; //@line 9099
    HEAP32[$AsyncCtx11 + 8 >> 2] = $59; //@line 9101
    HEAP32[$AsyncCtx11 + 12 >> 2] = $57; //@line 9103
    HEAP32[$AsyncCtx11 + 16 >> 2] = $53; //@line 9105
    sp = STACKTOP; //@line 9106
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 9109
    $$pre13 = HEAP32[$54 >> 2] | 0; //@line 9110
    if (!$$pre13) {
     $74 = 0; //@line 9113
     break;
    } else {
     $70 = $$pre13; //@line 9116
     label = 28; //@line 9117
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 28) {
   $71 = HEAP32[$70 + 4 >> 2] | 0; //@line 9126
   $AsyncCtx14 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9127
   FUNCTION_TABLE_vii[$71 & 31]($57, $53); //@line 9128
   if (___async) {
    HEAP32[$AsyncCtx14 >> 2] = 265; //@line 9131
    HEAP32[$AsyncCtx14 + 4 >> 2] = $54; //@line 9133
    HEAP32[$AsyncCtx14 + 8 >> 2] = $59; //@line 9135
    sp = STACKTOP; //@line 9136
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 9139
    $74 = HEAP32[$54 >> 2] | 0; //@line 9141
    break;
   }
  }
 } while (0);
 HEAP32[$59 >> 2] = $74; //@line 9146
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_164($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $45 = 0, $46 = 0, $49 = 0, $57 = 0, $6 = 0, $63 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 29214
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29216
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29218
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29220
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29222
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29224
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29226
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29228
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 29230
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(36) | 0; //@line 29235
  _mbed_assert_internal(13612, 13621, 215); //@line 29236
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 295; //@line 29239
   $19 = $ReallocAsyncCtx7 + 4 | 0; //@line 29240
   HEAP32[$19 >> 2] = $2; //@line 29241
   $20 = $ReallocAsyncCtx7 + 8 | 0; //@line 29242
   HEAP32[$20 >> 2] = $4; //@line 29243
   $21 = $ReallocAsyncCtx7 + 12 | 0; //@line 29244
   HEAP32[$21 >> 2] = $6; //@line 29245
   $22 = $ReallocAsyncCtx7 + 16 | 0; //@line 29246
   HEAP32[$22 >> 2] = $8; //@line 29247
   $23 = $ReallocAsyncCtx7 + 20 | 0; //@line 29248
   HEAP32[$23 >> 2] = $10; //@line 29249
   $24 = $ReallocAsyncCtx7 + 24 | 0; //@line 29250
   HEAP32[$24 >> 2] = $12; //@line 29251
   $25 = $ReallocAsyncCtx7 + 28 | 0; //@line 29252
   HEAP32[$25 >> 2] = $14; //@line 29253
   $26 = $ReallocAsyncCtx7 + 32 | 0; //@line 29254
   HEAP32[$26 >> 2] = $16; //@line 29255
   sp = STACKTOP; //@line 29256
   return;
  }
  ___async_unwind = 0; //@line 29259
  HEAP32[$ReallocAsyncCtx7 >> 2] = 295; //@line 29260
  $19 = $ReallocAsyncCtx7 + 4 | 0; //@line 29261
  HEAP32[$19 >> 2] = $2; //@line 29262
  $20 = $ReallocAsyncCtx7 + 8 | 0; //@line 29263
  HEAP32[$20 >> 2] = $4; //@line 29264
  $21 = $ReallocAsyncCtx7 + 12 | 0; //@line 29265
  HEAP32[$21 >> 2] = $6; //@line 29266
  $22 = $ReallocAsyncCtx7 + 16 | 0; //@line 29267
  HEAP32[$22 >> 2] = $8; //@line 29268
  $23 = $ReallocAsyncCtx7 + 20 | 0; //@line 29269
  HEAP32[$23 >> 2] = $10; //@line 29270
  $24 = $ReallocAsyncCtx7 + 24 | 0; //@line 29271
  HEAP32[$24 >> 2] = $12; //@line 29272
  $25 = $ReallocAsyncCtx7 + 28 | 0; //@line 29273
  HEAP32[$25 >> 2] = $14; //@line 29274
  $26 = $ReallocAsyncCtx7 + 32 | 0; //@line 29275
  HEAP32[$26 >> 2] = $16; //@line 29276
  sp = STACKTOP; //@line 29277
  return;
 }
 HEAP32[$4 + 364 >> 2] = 2; //@line 29281
 if (HEAP8[$4 + 371 >> 0] | 0) {
  $31 = HEAP32[$14 >> 2] | 0; //@line 29286
  $34 = HEAP32[$4 + 972 >> 2] | 0; //@line 29289
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(32) | 0; //@line 29290
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($31, $4 + 1036 | 0, $34); //@line 29291
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 296; //@line 29294
   $35 = $ReallocAsyncCtx4 + 4 | 0; //@line 29295
   HEAP32[$35 >> 2] = $12; //@line 29296
   $36 = $ReallocAsyncCtx4 + 8 | 0; //@line 29297
   HEAP32[$36 >> 2] = $4; //@line 29298
   $37 = $ReallocAsyncCtx4 + 12 | 0; //@line 29299
   HEAP32[$37 >> 2] = $14; //@line 29300
   $38 = $ReallocAsyncCtx4 + 16 | 0; //@line 29301
   HEAP32[$38 >> 2] = $6; //@line 29302
   $39 = $ReallocAsyncCtx4 + 20 | 0; //@line 29303
   HEAP32[$39 >> 2] = $2; //@line 29304
   $40 = $ReallocAsyncCtx4 + 24 | 0; //@line 29305
   HEAP32[$40 >> 2] = $8; //@line 29306
   $41 = $ReallocAsyncCtx4 + 28 | 0; //@line 29307
   HEAP32[$41 >> 2] = $10; //@line 29308
   sp = STACKTOP; //@line 29309
   return;
  }
  ___async_unwind = 0; //@line 29312
  HEAP32[$ReallocAsyncCtx4 >> 2] = 296; //@line 29313
  $35 = $ReallocAsyncCtx4 + 4 | 0; //@line 29314
  HEAP32[$35 >> 2] = $12; //@line 29315
  $36 = $ReallocAsyncCtx4 + 8 | 0; //@line 29316
  HEAP32[$36 >> 2] = $4; //@line 29317
  $37 = $ReallocAsyncCtx4 + 12 | 0; //@line 29318
  HEAP32[$37 >> 2] = $14; //@line 29319
  $38 = $ReallocAsyncCtx4 + 16 | 0; //@line 29320
  HEAP32[$38 >> 2] = $6; //@line 29321
  $39 = $ReallocAsyncCtx4 + 20 | 0; //@line 29322
  HEAP32[$39 >> 2] = $2; //@line 29323
  $40 = $ReallocAsyncCtx4 + 24 | 0; //@line 29324
  HEAP32[$40 >> 2] = $8; //@line 29325
  $41 = $ReallocAsyncCtx4 + 28 | 0; //@line 29326
  HEAP32[$41 >> 2] = $10; //@line 29327
  sp = STACKTOP; //@line 29328
  return;
 }
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0) + 4 >> 2] = 0; //@line 29334
 $45 = $4 + 944 | 0; //@line 29335
 $46 = HEAP8[$45 >> 0] | 0; //@line 29336
 if (!($46 << 24 >> 24)) {
  HEAP8[$45 >> 0] = 1; //@line 29339
  $49 = 1; //@line 29340
 } else {
  $49 = $46; //@line 29342
 }
 HEAP8[$45 >> 0] = $49 | 32; //@line 29345
 HEAP8[$4 + 376 >> 0] = ($6 | 0) == 0 & (HEAP8[$4 + 944 >> 0] & 8) != 0 & 1; //@line 29354
 $57 = HEAP8[$4 + 378 >> 0] | 0; //@line 29356
 HEAP8[$4 + 379 >> 0] = $57; //@line 29358
 HEAP8[$2 >> 0] = $57; //@line 29359
 HEAP8[$8 + 1 >> 0] = HEAP8[$4 + 372 >> 0] | 0; //@line 29363
 HEAP32[$8 + 4 >> 2] = $10; //@line 29365
 $63 = HEAP32[$4 >> 2] | 0; //@line 29366
 $66 = HEAP32[(HEAP32[$63 >> 2] | 0) + 12 >> 2] | 0; //@line 29369
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 29370
 FUNCTION_TABLE_vii[$66 & 31]($63, $8); //@line 29371
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 299; //@line 29374
  $67 = $ReallocAsyncCtx + 4 | 0; //@line 29375
  HEAP32[$67 >> 2] = $4; //@line 29376
  $68 = $ReallocAsyncCtx + 8 | 0; //@line 29377
  HEAP32[$68 >> 2] = $10; //@line 29378
  $69 = $ReallocAsyncCtx + 12 | 0; //@line 29379
  HEAP32[$69 >> 2] = $2; //@line 29380
  sp = STACKTOP; //@line 29381
  return;
 }
 ___async_unwind = 0; //@line 29384
 HEAP32[$ReallocAsyncCtx >> 2] = 299; //@line 29385
 $67 = $ReallocAsyncCtx + 4 | 0; //@line 29386
 HEAP32[$67 >> 2] = $4; //@line 29387
 $68 = $ReallocAsyncCtx + 8 | 0; //@line 29388
 HEAP32[$68 >> 2] = $10; //@line 29389
 $69 = $ReallocAsyncCtx + 12 | 0; //@line 29390
 HEAP32[$69 >> 2] = $2; //@line 29391
 sp = STACKTOP; //@line 29392
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_354($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $47 = 0, $48 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 26709
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26711
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26713
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26715
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26717
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26719
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26721
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26723
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 26725
 if ($AsyncRetVal | 0) {
  $17 = HEAP32[$8 >> 2] | 0; //@line 26728
  if (!$17) {
   HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 26732
   $30 = $AsyncRetVal + 16 | 0; //@line 26733
   HEAP32[$30 >> 2] = HEAP32[$2 >> 2]; //@line 26734
   HEAP32[$30 + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 26734
   HEAP8[$30 + 8 >> 0] = HEAP8[$2 + 8 >> 0] | 0; //@line 26734
   _equeue_event_dtor($AsyncRetVal, 357); //@line 26735
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 26736
   $31 = _equeue_post($4, 358, $AsyncRetVal) | 0; //@line 26737
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 359; //@line 26740
    $32 = $ReallocAsyncCtx6 + 4 | 0; //@line 26741
    HEAP32[$32 >> 2] = $8; //@line 26742
    $33 = $ReallocAsyncCtx6 + 8 | 0; //@line 26743
    HEAP32[$33 >> 2] = $10; //@line 26744
    $34 = $ReallocAsyncCtx6 + 12 | 0; //@line 26745
    HEAP32[$34 >> 2] = $6; //@line 26746
    $35 = $ReallocAsyncCtx6 + 16 | 0; //@line 26747
    HEAP32[$35 >> 2] = $12; //@line 26748
    sp = STACKTOP; //@line 26749
    return;
   }
   HEAP32[___async_retval >> 2] = $31; //@line 26753
   ___async_unwind = 0; //@line 26754
   HEAP32[$ReallocAsyncCtx6 >> 2] = 359; //@line 26755
   $32 = $ReallocAsyncCtx6 + 4 | 0; //@line 26756
   HEAP32[$32 >> 2] = $8; //@line 26757
   $33 = $ReallocAsyncCtx6 + 8 | 0; //@line 26758
   HEAP32[$33 >> 2] = $10; //@line 26759
   $34 = $ReallocAsyncCtx6 + 12 | 0; //@line 26760
   HEAP32[$34 >> 2] = $6; //@line 26761
   $35 = $ReallocAsyncCtx6 + 16 | 0; //@line 26762
   HEAP32[$35 >> 2] = $12; //@line 26763
   sp = STACKTOP; //@line 26764
   return;
  } else {
   $20 = HEAP32[$17 + 4 >> 2] | 0; //@line 26768
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 26769
   FUNCTION_TABLE_vii[$20 & 31]($AsyncRetVal, $6); //@line 26770
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 356; //@line 26773
    $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 26774
    HEAP32[$21 >> 2] = $14; //@line 26775
    $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 26776
    HEAP32[$22 >> 2] = $AsyncRetVal; //@line 26777
    $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 26778
    HEAP32[$23 >> 2] = $2; //@line 26779
    $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 26780
    HEAP32[$24 >> 2] = $4; //@line 26781
    $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 26782
    HEAP32[$25 >> 2] = $8; //@line 26783
    $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 26784
    HEAP32[$26 >> 2] = $10; //@line 26785
    $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 26786
    HEAP32[$27 >> 2] = $6; //@line 26787
    $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 26788
    HEAP32[$28 >> 2] = $12; //@line 26789
    sp = STACKTOP; //@line 26790
    return;
   }
   ___async_unwind = 0; //@line 26793
   HEAP32[$ReallocAsyncCtx3 >> 2] = 356; //@line 26794
   $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 26795
   HEAP32[$21 >> 2] = $14; //@line 26796
   $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 26797
   HEAP32[$22 >> 2] = $AsyncRetVal; //@line 26798
   $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 26799
   HEAP32[$23 >> 2] = $2; //@line 26800
   $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 26801
   HEAP32[$24 >> 2] = $4; //@line 26802
   $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 26803
   HEAP32[$25 >> 2] = $8; //@line 26804
   $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 26805
   HEAP32[$26 >> 2] = $10; //@line 26806
   $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 26807
   HEAP32[$27 >> 2] = $6; //@line 26808
   $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 26809
   HEAP32[$28 >> 2] = $12; //@line 26810
   sp = STACKTOP; //@line 26811
   return;
  }
 }
 $37 = HEAP32[$8 >> 2] | 0; //@line 26815
 if ($37 | 0) {
  $40 = HEAP32[$37 + 8 >> 2] | 0; //@line 26819
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 26820
  FUNCTION_TABLE_vi[$40 & 1023]($6); //@line 26821
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 360; //@line 26824
   $41 = $ReallocAsyncCtx4 + 4 | 0; //@line 26825
   HEAP32[$41 >> 2] = $10; //@line 26826
   $42 = $ReallocAsyncCtx4 + 8 | 0; //@line 26827
   HEAP32[$42 >> 2] = 0; //@line 26828
   $43 = $ReallocAsyncCtx4 + 12 | 0; //@line 26829
   HEAP32[$43 >> 2] = $12; //@line 26830
   sp = STACKTOP; //@line 26831
   return;
  }
  ___async_unwind = 0; //@line 26834
  HEAP32[$ReallocAsyncCtx4 >> 2] = 360; //@line 26835
  $41 = $ReallocAsyncCtx4 + 4 | 0; //@line 26836
  HEAP32[$41 >> 2] = $10; //@line 26837
  $42 = $ReallocAsyncCtx4 + 8 | 0; //@line 26838
  HEAP32[$42 >> 2] = 0; //@line 26839
  $43 = $ReallocAsyncCtx4 + 12 | 0; //@line 26840
  HEAP32[$43 >> 2] = $12; //@line 26841
  sp = STACKTOP; //@line 26842
  return;
 }
 $44 = HEAP32[$10 >> 2] | 0; //@line 26845
 if (!$44) {
  HEAP32[___async_retval >> 2] = 0; //@line 26849
  return;
 }
 $47 = HEAP32[$44 + 8 >> 2] | 0; //@line 26853
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 26854
 FUNCTION_TABLE_vi[$47 & 1023]($12); //@line 26855
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 361; //@line 26858
  $48 = $ReallocAsyncCtx5 + 4 | 0; //@line 26859
  HEAP32[$48 >> 2] = 0; //@line 26860
  sp = STACKTOP; //@line 26861
  return;
 }
 ___async_unwind = 0; //@line 26864
 HEAP32[$ReallocAsyncCtx5 >> 2] = 361; //@line 26865
 $48 = $ReallocAsyncCtx5 + 4 | 0; //@line 26866
 HEAP32[$48 >> 2] = 0; //@line 26867
 sp = STACKTOP; //@line 26868
 return;
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_317($0) {
 $0 = $0 | 0;
 var $$pre121 = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $44 = 0, $45 = 0, $46 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 14333
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14335
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14337
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14339
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14341
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14343
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 14345
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 14347
 $$pre121 = HEAP32[$12 >> 2] | 0; //@line 14348
 if ($$pre121 | 0) {
  $17 = HEAP32[$$pre121 + 4 >> 2] | 0; //@line 14352
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(28) | 0; //@line 14353
  FUNCTION_TABLE_vii[$17 & 31]($2, $4); //@line 14354
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 493; //@line 14357
   $18 = $ReallocAsyncCtx11 + 4 | 0; //@line 14358
   HEAP32[$18 >> 2] = $4; //@line 14359
   $19 = $ReallocAsyncCtx11 + 8 | 0; //@line 14360
   HEAP32[$19 >> 2] = $6; //@line 14361
   $20 = $ReallocAsyncCtx11 + 12 | 0; //@line 14362
   HEAP32[$20 >> 2] = $8; //@line 14363
   $21 = $ReallocAsyncCtx11 + 16 | 0; //@line 14364
   HEAP32[$21 >> 2] = $12; //@line 14365
   $22 = $ReallocAsyncCtx11 + 20 | 0; //@line 14366
   HEAP32[$22 >> 2] = $10; //@line 14367
   $23 = $ReallocAsyncCtx11 + 24 | 0; //@line 14368
   HEAP32[$23 >> 2] = $14; //@line 14369
   sp = STACKTOP; //@line 14370
   return;
  }
  ___async_unwind = 0; //@line 14373
  HEAP32[$ReallocAsyncCtx11 >> 2] = 493; //@line 14374
  $18 = $ReallocAsyncCtx11 + 4 | 0; //@line 14375
  HEAP32[$18 >> 2] = $4; //@line 14376
  $19 = $ReallocAsyncCtx11 + 8 | 0; //@line 14377
  HEAP32[$19 >> 2] = $6; //@line 14378
  $20 = $ReallocAsyncCtx11 + 12 | 0; //@line 14379
  HEAP32[$20 >> 2] = $8; //@line 14380
  $21 = $ReallocAsyncCtx11 + 16 | 0; //@line 14381
  HEAP32[$21 >> 2] = $12; //@line 14382
  $22 = $ReallocAsyncCtx11 + 20 | 0; //@line 14383
  HEAP32[$22 >> 2] = $10; //@line 14384
  $23 = $ReallocAsyncCtx11 + 24 | 0; //@line 14385
  HEAP32[$23 >> 2] = $14; //@line 14386
  sp = STACKTOP; //@line 14387
  return;
 }
 HEAP32[$10 >> 2] = 0; //@line 14390
 $24 = $6 + 12 | 0; //@line 14391
 HEAP32[$6 >> 2] = 495; //@line 14392
 HEAP32[$6 + 4 >> 2] = 0; //@line 14394
 HEAP32[$6 + 8 >> 2] = $8; //@line 14396
 HEAP32[$24 >> 2] = 912; //@line 14397
 $25 = $8 + 1260 | 0; //@line 14398
 if (($25 | 0) == ($6 | 0)) {
  $44 = HEAP32[230] | 0; //@line 14402
  $ReallocAsyncCtx15 = _emscripten_realloc_async_context(12) | 0; //@line 14403
  FUNCTION_TABLE_vi[$44 & 1023]($6); //@line 14404
  if (___async) {
   HEAP32[$ReallocAsyncCtx15 >> 2] = 498; //@line 14407
   $45 = $ReallocAsyncCtx15 + 4 | 0; //@line 14408
   HEAP32[$45 >> 2] = $6; //@line 14409
   $46 = $ReallocAsyncCtx15 + 8 | 0; //@line 14410
   HEAP32[$46 >> 2] = $14; //@line 14411
   sp = STACKTOP; //@line 14412
   return;
  }
  ___async_unwind = 0; //@line 14415
  HEAP32[$ReallocAsyncCtx15 >> 2] = 498; //@line 14416
  $45 = $ReallocAsyncCtx15 + 4 | 0; //@line 14417
  HEAP32[$45 >> 2] = $6; //@line 14418
  $46 = $ReallocAsyncCtx15 + 8 | 0; //@line 14419
  HEAP32[$46 >> 2] = $14; //@line 14420
  sp = STACKTOP; //@line 14421
  return;
 }
 $27 = $8 + 1272 | 0; //@line 14424
 $28 = HEAP32[$27 >> 2] | 0; //@line 14425
 if (!$28) {
  $38 = HEAP32[229] | 0; //@line 14429
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(20) | 0; //@line 14430
  FUNCTION_TABLE_vii[$38 & 31]($25, $6); //@line 14431
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 497; //@line 14434
   $39 = $ReallocAsyncCtx14 + 4 | 0; //@line 14435
   HEAP32[$39 >> 2] = $24; //@line 14436
   $40 = $ReallocAsyncCtx14 + 8 | 0; //@line 14437
   HEAP32[$40 >> 2] = $27; //@line 14438
   $41 = $ReallocAsyncCtx14 + 12 | 0; //@line 14439
   HEAP32[$41 >> 2] = $6; //@line 14440
   $42 = $ReallocAsyncCtx14 + 16 | 0; //@line 14441
   HEAP32[$42 >> 2] = $14; //@line 14442
   sp = STACKTOP; //@line 14443
   return;
  }
  ___async_unwind = 0; //@line 14446
  HEAP32[$ReallocAsyncCtx14 >> 2] = 497; //@line 14447
  $39 = $ReallocAsyncCtx14 + 4 | 0; //@line 14448
  HEAP32[$39 >> 2] = $24; //@line 14449
  $40 = $ReallocAsyncCtx14 + 8 | 0; //@line 14450
  HEAP32[$40 >> 2] = $27; //@line 14451
  $41 = $ReallocAsyncCtx14 + 12 | 0; //@line 14452
  HEAP32[$41 >> 2] = $6; //@line 14453
  $42 = $ReallocAsyncCtx14 + 16 | 0; //@line 14454
  HEAP32[$42 >> 2] = $14; //@line 14455
  sp = STACKTOP; //@line 14456
  return;
 } else {
  $31 = HEAP32[$28 + 8 >> 2] | 0; //@line 14460
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(24) | 0; //@line 14461
  FUNCTION_TABLE_vi[$31 & 1023]($25); //@line 14462
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 496; //@line 14465
   $32 = $ReallocAsyncCtx13 + 4 | 0; //@line 14466
   HEAP32[$32 >> 2] = $24; //@line 14467
   $33 = $ReallocAsyncCtx13 + 8 | 0; //@line 14468
   HEAP32[$33 >> 2] = $27; //@line 14469
   $34 = $ReallocAsyncCtx13 + 12 | 0; //@line 14470
   HEAP32[$34 >> 2] = $25; //@line 14471
   $35 = $ReallocAsyncCtx13 + 16 | 0; //@line 14472
   HEAP32[$35 >> 2] = $6; //@line 14473
   $36 = $ReallocAsyncCtx13 + 20 | 0; //@line 14474
   HEAP32[$36 >> 2] = $14; //@line 14475
   sp = STACKTOP; //@line 14476
   return;
  }
  ___async_unwind = 0; //@line 14479
  HEAP32[$ReallocAsyncCtx13 >> 2] = 496; //@line 14480
  $32 = $ReallocAsyncCtx13 + 4 | 0; //@line 14481
  HEAP32[$32 >> 2] = $24; //@line 14482
  $33 = $ReallocAsyncCtx13 + 8 | 0; //@line 14483
  HEAP32[$33 >> 2] = $27; //@line 14484
  $34 = $ReallocAsyncCtx13 + 12 | 0; //@line 14485
  HEAP32[$34 >> 2] = $25; //@line 14486
  $35 = $ReallocAsyncCtx13 + 16 | 0; //@line 14487
  HEAP32[$35 >> 2] = $6; //@line 14488
  $36 = $ReallocAsyncCtx13 + 20 | 0; //@line 14489
  HEAP32[$36 >> 2] = $14; //@line 14490
  sp = STACKTOP; //@line 14491
  return;
 }
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_412($0) {
 $0 = $0 | 0;
 var $$3$off0230 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $32 = 0, $34 = 0, $4 = 0, $41 = 0, $46 = 0, $47 = 0, $6 = 0, $61 = 0, $64 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $75 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $85 = 0, $88 = 0, $90 = 0, $91 = 0, $ReallocAsyncCtx26 = 0, $ReallocAsyncCtx27 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 31552
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31554
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31556
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31558
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31560
 $10 = HEAP8[$0 + 20 >> 0] | 0; //@line 31562
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31564
 $14 = HEAP8[$0 + 28 >> 0] & 1; //@line 31567
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 31569
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 31571
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 31573
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 31575
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 31577
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 31579
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 31581
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 31585
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 31587
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  if (__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($34) | 0) {
   _mbed_tracef(16, 13728, 13889, $28); //@line 31594
   HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($32) | 0) >> 2] = 4; //@line 31596
   $41 = $2 + 944 | 0; //@line 31597
   HEAP8[$41 >> 0] = HEAP8[$41 >> 0] | 16; //@line 31600
   __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($34); //@line 31601
  }
 } else {
  HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 4 >> 2] = 1; //@line 31606
 }
 $46 = $20 & 255; //@line 31610
 $47 = $2 + 638 | 0; //@line 31611
 if (__Z15decrypt_payloadPKhtS0_jhjPh($16 + $18 | 0, $46, $22, $24, 1, $26, $47) | 0) {
  HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 4 >> 2] = 13; //@line 31617
 }
 if ($14) {
  $$3$off0230 = 6; //@line 31620
 } else {
  HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 12 >> 2] = $47; //@line 31624
  HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 16 >> 1] = $46; //@line 31627
  HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 18 >> 0] = 1; //@line 31630
  $61 = (__ZN11LoRaMacMcps16get_confirmationEv($12) | 0) + 10 | 0; //@line 31634
  if ($10 & 32) {
   HEAP8[$61 >> 0] = 1; //@line 31636
   HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 28 >> 0] = 1; //@line 31639
   $64 = HEAP32[$4 >> 2] | 0; //@line 31640
   $ReallocAsyncCtx27 = _emscripten_realloc_async_context(20) | 0; //@line 31642
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($64, $2 + 1076 | 0); //@line 31643
   if (___async) {
    HEAP32[$ReallocAsyncCtx27 >> 2] = 344; //@line 31646
    $66 = $ReallocAsyncCtx27 + 4 | 0; //@line 31647
    HEAP32[$66 >> 2] = $2; //@line 31648
    $67 = $ReallocAsyncCtx27 + 8 | 0; //@line 31649
    HEAP32[$67 >> 2] = $4; //@line 31650
    $68 = $ReallocAsyncCtx27 + 12 | 0; //@line 31651
    HEAP32[$68 >> 2] = $6; //@line 31652
    $69 = $ReallocAsyncCtx27 + 16 | 0; //@line 31653
    HEAP32[$69 >> 2] = $8; //@line 31654
    sp = STACKTOP; //@line 31655
    return;
   }
   ___async_unwind = 0; //@line 31658
   HEAP32[$ReallocAsyncCtx27 >> 2] = 344; //@line 31659
   $66 = $ReallocAsyncCtx27 + 4 | 0; //@line 31660
   HEAP32[$66 >> 2] = $2; //@line 31661
   $67 = $ReallocAsyncCtx27 + 8 | 0; //@line 31662
   HEAP32[$67 >> 2] = $4; //@line 31663
   $68 = $ReallocAsyncCtx27 + 12 | 0; //@line 31664
   HEAP32[$68 >> 2] = $6; //@line 31665
   $69 = $ReallocAsyncCtx27 + 16 | 0; //@line 31666
   HEAP32[$69 >> 2] = $8; //@line 31667
   sp = STACKTOP; //@line 31668
   return;
  }
  HEAP8[$61 >> 0] = 0; //@line 31671
  if ((HEAPU8[$2 + 895 >> 0] | 0) > (HEAPU8[$2 + 894 >> 0] | 0)) {
   $75 = HEAP32[$4 >> 2] | 0; //@line 31678
   $ReallocAsyncCtx26 = _emscripten_realloc_async_context(20) | 0; //@line 31680
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($75, $2 + 1076 | 0); //@line 31681
   if (___async) {
    HEAP32[$ReallocAsyncCtx26 >> 2] = 345; //@line 31684
    $77 = $ReallocAsyncCtx26 + 4 | 0; //@line 31685
    HEAP32[$77 >> 2] = $2; //@line 31686
    $78 = $ReallocAsyncCtx26 + 8 | 0; //@line 31687
    HEAP32[$78 >> 2] = $4; //@line 31688
    $79 = $ReallocAsyncCtx26 + 12 | 0; //@line 31689
    HEAP32[$79 >> 2] = $6; //@line 31690
    $80 = $ReallocAsyncCtx26 + 16 | 0; //@line 31691
    HEAP32[$80 >> 2] = $8; //@line 31692
    sp = STACKTOP; //@line 31693
    return;
   }
   ___async_unwind = 0; //@line 31696
   HEAP32[$ReallocAsyncCtx26 >> 2] = 345; //@line 31697
   $77 = $ReallocAsyncCtx26 + 4 | 0; //@line 31698
   HEAP32[$77 >> 2] = $2; //@line 31699
   $78 = $ReallocAsyncCtx26 + 8 | 0; //@line 31700
   HEAP32[$78 >> 2] = $4; //@line 31701
   $79 = $ReallocAsyncCtx26 + 12 | 0; //@line 31702
   HEAP32[$79 >> 2] = $6; //@line 31703
   $80 = $ReallocAsyncCtx26 + 16 | 0; //@line 31704
   HEAP32[$80 >> 2] = $8; //@line 31705
   sp = STACKTOP; //@line 31706
   return;
  } else {
   $$3$off0230 = 2; //@line 31709
  }
 }
 $81 = $2 + 944 | 0; //@line 31712
 HEAP8[$81 >> 0] = $$3$off0230 | HEAP8[$81 >> 0] & -7; //@line 31716
 $85 = $2 + 944 | 0; //@line 31717
 HEAP8[$85 >> 0] = HEAP8[$85 >> 0] | 32; //@line 31720
 $88 = HEAP32[$4 >> 2] | 0; //@line 31721
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 31723
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($88, $2 + 996 | 0, 1); //@line 31724
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 352; //@line 31727
  $90 = $ReallocAsyncCtx5 + 4 | 0; //@line 31728
  HEAP32[$90 >> 2] = $6; //@line 31729
  $91 = $ReallocAsyncCtx5 + 8 | 0; //@line 31730
  HEAP32[$91 >> 2] = $8; //@line 31731
  sp = STACKTOP; //@line 31732
  return;
 }
 ___async_unwind = 0; //@line 31735
 HEAP32[$ReallocAsyncCtx5 >> 2] = 352; //@line 31736
 $90 = $ReallocAsyncCtx5 + 4 | 0; //@line 31737
 HEAP32[$90 >> 2] = $6; //@line 31738
 $91 = $ReallocAsyncCtx5 + 8 | 0; //@line 31739
 HEAP32[$91 >> 2] = $8; //@line 31740
 sp = STACKTOP; //@line 31741
 return;
}
function __ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_68($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $15 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $38 = 0, $39 = 0, $4 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 21671
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21673
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21675
 HEAP32[HEAP32[$0 + 16 >> 2] >> 2] = HEAP32[HEAP32[$0 + 12 >> 2] >> 2]; //@line 21681
 $9 = $4 + 16 | 0; //@line 21682
 $10 = $4 + 28 | 0; //@line 21683
 $11 = HEAP32[$10 >> 2] | 0; //@line 21684
 if ($11 | 0) {
  $13 = $2 + 1896 | 0; //@line 21687
  if (($13 | 0) != ($9 | 0)) {
   $15 = $2 + 1908 | 0; //@line 21690
   $16 = HEAP32[$15 >> 2] | 0; //@line 21691
   if (!$16) {
    $27 = HEAP32[$11 + 4 >> 2] | 0; //@line 21695
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 21696
    FUNCTION_TABLE_vii[$27 & 31]($13, $9); //@line 21697
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 263; //@line 21700
     $28 = $ReallocAsyncCtx4 + 4 | 0; //@line 21701
     HEAP32[$28 >> 2] = $10; //@line 21702
     $29 = $ReallocAsyncCtx4 + 8 | 0; //@line 21703
     HEAP32[$29 >> 2] = $15; //@line 21704
     $30 = $ReallocAsyncCtx4 + 12 | 0; //@line 21705
     HEAP32[$30 >> 2] = $4; //@line 21706
     $31 = $ReallocAsyncCtx4 + 16 | 0; //@line 21707
     HEAP32[$31 >> 2] = $2; //@line 21708
     sp = STACKTOP; //@line 21709
     return;
    }
    ___async_unwind = 0; //@line 21712
    HEAP32[$ReallocAsyncCtx4 >> 2] = 263; //@line 21713
    $28 = $ReallocAsyncCtx4 + 4 | 0; //@line 21714
    HEAP32[$28 >> 2] = $10; //@line 21715
    $29 = $ReallocAsyncCtx4 + 8 | 0; //@line 21716
    HEAP32[$29 >> 2] = $15; //@line 21717
    $30 = $ReallocAsyncCtx4 + 12 | 0; //@line 21718
    HEAP32[$30 >> 2] = $4; //@line 21719
    $31 = $ReallocAsyncCtx4 + 16 | 0; //@line 21720
    HEAP32[$31 >> 2] = $2; //@line 21721
    sp = STACKTOP; //@line 21722
    return;
   } else {
    $19 = HEAP32[$16 + 8 >> 2] | 0; //@line 21726
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(28) | 0; //@line 21727
    FUNCTION_TABLE_vi[$19 & 1023]($13); //@line 21728
    if (___async) {
     HEAP32[$ReallocAsyncCtx3 >> 2] = 262; //@line 21731
     $20 = $ReallocAsyncCtx3 + 4 | 0; //@line 21732
     HEAP32[$20 >> 2] = $10; //@line 21733
     $21 = $ReallocAsyncCtx3 + 8 | 0; //@line 21734
     HEAP32[$21 >> 2] = $15; //@line 21735
     $22 = $ReallocAsyncCtx3 + 12 | 0; //@line 21736
     HEAP32[$22 >> 2] = $13; //@line 21737
     $23 = $ReallocAsyncCtx3 + 16 | 0; //@line 21738
     HEAP32[$23 >> 2] = $9; //@line 21739
     $24 = $ReallocAsyncCtx3 + 20 | 0; //@line 21740
     HEAP32[$24 >> 2] = $4; //@line 21741
     $25 = $ReallocAsyncCtx3 + 24 | 0; //@line 21742
     HEAP32[$25 >> 2] = $2; //@line 21743
     sp = STACKTOP; //@line 21744
     return;
    }
    ___async_unwind = 0; //@line 21747
    HEAP32[$ReallocAsyncCtx3 >> 2] = 262; //@line 21748
    $20 = $ReallocAsyncCtx3 + 4 | 0; //@line 21749
    HEAP32[$20 >> 2] = $10; //@line 21750
    $21 = $ReallocAsyncCtx3 + 8 | 0; //@line 21751
    HEAP32[$21 >> 2] = $15; //@line 21752
    $22 = $ReallocAsyncCtx3 + 12 | 0; //@line 21753
    HEAP32[$22 >> 2] = $13; //@line 21754
    $23 = $ReallocAsyncCtx3 + 16 | 0; //@line 21755
    HEAP32[$23 >> 2] = $9; //@line 21756
    $24 = $ReallocAsyncCtx3 + 20 | 0; //@line 21757
    HEAP32[$24 >> 2] = $4; //@line 21758
    $25 = $ReallocAsyncCtx3 + 24 | 0; //@line 21759
    HEAP32[$25 >> 2] = $2; //@line 21760
    sp = STACKTOP; //@line 21761
    return;
   }
  }
 }
 $32 = $4 + 32 | 0; //@line 21766
 $33 = $4 + 44 | 0; //@line 21767
 $34 = HEAP32[$33 >> 2] | 0; //@line 21768
 if (!$34) {
  return;
 }
 $36 = $2 + 1912 | 0; //@line 21773
 if (($36 | 0) == ($32 | 0)) {
  return;
 }
 $38 = $2 + 1924 | 0; //@line 21778
 $39 = HEAP32[$38 >> 2] | 0; //@line 21779
 if (!$39) {
  $48 = HEAP32[$34 + 4 >> 2] | 0; //@line 21783
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 21784
  FUNCTION_TABLE_vii[$48 & 31]($36, $32); //@line 21785
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 265; //@line 21788
   $49 = $ReallocAsyncCtx6 + 4 | 0; //@line 21789
   HEAP32[$49 >> 2] = $33; //@line 21790
   $50 = $ReallocAsyncCtx6 + 8 | 0; //@line 21791
   HEAP32[$50 >> 2] = $38; //@line 21792
   sp = STACKTOP; //@line 21793
   return;
  }
  ___async_unwind = 0; //@line 21796
  HEAP32[$ReallocAsyncCtx6 >> 2] = 265; //@line 21797
  $49 = $ReallocAsyncCtx6 + 4 | 0; //@line 21798
  HEAP32[$49 >> 2] = $33; //@line 21799
  $50 = $ReallocAsyncCtx6 + 8 | 0; //@line 21800
  HEAP32[$50 >> 2] = $38; //@line 21801
  sp = STACKTOP; //@line 21802
  return;
 } else {
  $42 = HEAP32[$39 + 8 >> 2] | 0; //@line 21806
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 21807
  FUNCTION_TABLE_vi[$42 & 1023]($36); //@line 21808
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 264; //@line 21811
   $43 = $ReallocAsyncCtx5 + 4 | 0; //@line 21812
   HEAP32[$43 >> 2] = $33; //@line 21813
   $44 = $ReallocAsyncCtx5 + 8 | 0; //@line 21814
   HEAP32[$44 >> 2] = $38; //@line 21815
   $45 = $ReallocAsyncCtx5 + 12 | 0; //@line 21816
   HEAP32[$45 >> 2] = $36; //@line 21817
   $46 = $ReallocAsyncCtx5 + 16 | 0; //@line 21818
   HEAP32[$46 >> 2] = $32; //@line 21819
   sp = STACKTOP; //@line 21820
   return;
  }
  ___async_unwind = 0; //@line 21823
  HEAP32[$ReallocAsyncCtx5 >> 2] = 264; //@line 21824
  $43 = $ReallocAsyncCtx5 + 4 | 0; //@line 21825
  HEAP32[$43 >> 2] = $33; //@line 21826
  $44 = $ReallocAsyncCtx5 + 8 | 0; //@line 21827
  HEAP32[$44 >> 2] = $38; //@line 21828
  $45 = $ReallocAsyncCtx5 + 12 | 0; //@line 21829
  HEAP32[$45 >> 2] = $36; //@line 21830
  $46 = $ReallocAsyncCtx5 + 16 | 0; //@line 21831
  HEAP32[$46 >> 2] = $32; //@line 21832
  sp = STACKTOP; //@line 21833
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_138($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $48 = 0, $49 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 26545
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26547
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26549
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26551
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26553
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26555
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26557
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26559
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 26561
 if ($AsyncRetVal | 0) {
  $17 = HEAP32[$2 >> 2] | 0; //@line 26564
  if (!$17) {
   HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 26568
   HEAP32[$AsyncRetVal + 16 >> 2] = HEAP32[$8 >> 2]; //@line 26571
   _equeue_event_dtor($AsyncRetVal, 229); //@line 26572
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 26573
   $32 = _equeue_post($10, 230, $AsyncRetVal) | 0; //@line 26574
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 231; //@line 26577
    $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 26578
    HEAP32[$33 >> 2] = $2; //@line 26579
    $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 26580
    HEAP32[$34 >> 2] = $6; //@line 26581
    $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 26582
    HEAP32[$35 >> 2] = $4; //@line 26583
    $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 26584
    HEAP32[$36 >> 2] = $12; //@line 26585
    sp = STACKTOP; //@line 26586
    return;
   }
   HEAP32[___async_retval >> 2] = $32; //@line 26590
   ___async_unwind = 0; //@line 26591
   HEAP32[$ReallocAsyncCtx6 >> 2] = 231; //@line 26592
   $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 26593
   HEAP32[$33 >> 2] = $2; //@line 26594
   $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 26595
   HEAP32[$34 >> 2] = $6; //@line 26596
   $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 26597
   HEAP32[$35 >> 2] = $4; //@line 26598
   $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 26599
   HEAP32[$36 >> 2] = $12; //@line 26600
   sp = STACKTOP; //@line 26601
   return;
  } else {
   $20 = HEAP32[$17 + 4 >> 2] | 0; //@line 26605
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 26606
   FUNCTION_TABLE_vii[$20 & 31]($AsyncRetVal, $4); //@line 26607
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 228; //@line 26610
    $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 26611
    HEAP32[$21 >> 2] = $14; //@line 26612
    $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 26613
    HEAP32[$22 >> 2] = $AsyncRetVal; //@line 26614
    $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 26615
    HEAP32[$23 >> 2] = $8; //@line 26616
    $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 26617
    HEAP32[$24 >> 2] = $10; //@line 26618
    $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 26619
    HEAP32[$25 >> 2] = $2; //@line 26620
    $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 26621
    HEAP32[$26 >> 2] = $6; //@line 26622
    $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 26623
    HEAP32[$27 >> 2] = $4; //@line 26624
    $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 26625
    HEAP32[$28 >> 2] = $12; //@line 26626
    sp = STACKTOP; //@line 26627
    return;
   }
   ___async_unwind = 0; //@line 26630
   HEAP32[$ReallocAsyncCtx3 >> 2] = 228; //@line 26631
   $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 26632
   HEAP32[$21 >> 2] = $14; //@line 26633
   $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 26634
   HEAP32[$22 >> 2] = $AsyncRetVal; //@line 26635
   $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 26636
   HEAP32[$23 >> 2] = $8; //@line 26637
   $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 26638
   HEAP32[$24 >> 2] = $10; //@line 26639
   $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 26640
   HEAP32[$25 >> 2] = $2; //@line 26641
   $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 26642
   HEAP32[$26 >> 2] = $6; //@line 26643
   $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 26644
   HEAP32[$27 >> 2] = $4; //@line 26645
   $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 26646
   HEAP32[$28 >> 2] = $12; //@line 26647
   sp = STACKTOP; //@line 26648
   return;
  }
 }
 $38 = HEAP32[$2 >> 2] | 0; //@line 26652
 if ($38 | 0) {
  $41 = HEAP32[$38 + 8 >> 2] | 0; //@line 26656
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 26657
  FUNCTION_TABLE_vi[$41 & 1023]($4); //@line 26658
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 232; //@line 26661
   $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 26662
   HEAP32[$42 >> 2] = $6; //@line 26663
   $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 26664
   HEAP32[$43 >> 2] = 0; //@line 26665
   $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 26666
   HEAP32[$44 >> 2] = $12; //@line 26667
   sp = STACKTOP; //@line 26668
   return;
  }
  ___async_unwind = 0; //@line 26671
  HEAP32[$ReallocAsyncCtx4 >> 2] = 232; //@line 26672
  $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 26673
  HEAP32[$42 >> 2] = $6; //@line 26674
  $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 26675
  HEAP32[$43 >> 2] = 0; //@line 26676
  $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 26677
  HEAP32[$44 >> 2] = $12; //@line 26678
  sp = STACKTOP; //@line 26679
  return;
 }
 $45 = HEAP32[$6 >> 2] | 0; //@line 26682
 if (!$45) {
  HEAP32[___async_retval >> 2] = 0; //@line 26686
  return;
 }
 $48 = HEAP32[$45 + 8 >> 2] | 0; //@line 26690
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 26691
 FUNCTION_TABLE_vi[$48 & 1023]($12); //@line 26692
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 233; //@line 26695
  $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 26696
  HEAP32[$49 >> 2] = 0; //@line 26697
  sp = STACKTOP; //@line 26698
  return;
 }
 ___async_unwind = 0; //@line 26701
 HEAP32[$ReallocAsyncCtx5 >> 2] = 233; //@line 26702
 $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 26703
 HEAP32[$49 >> 2] = 0; //@line 26704
 sp = STACKTOP; //@line 26705
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_154($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $48 = 0, $49 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 28016
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28018
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28020
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28022
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28024
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28026
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28028
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28030
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 28032
 if ($AsyncRetVal | 0) {
  $17 = HEAP32[$2 >> 2] | 0; //@line 28035
  if (!$17) {
   HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 28039
   HEAP16[$AsyncRetVal + 16 >> 1] = HEAP16[$6 >> 1] | 0; //@line 28042
   _equeue_event_dtor($AsyncRetVal, 238); //@line 28043
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 28044
   $32 = _equeue_post($8, 239, $AsyncRetVal) | 0; //@line 28045
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 240; //@line 28048
    $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 28049
    HEAP32[$33 >> 2] = $2; //@line 28050
    $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 28051
    HEAP32[$34 >> 2] = $10; //@line 28052
    $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 28053
    HEAP32[$35 >> 2] = $4; //@line 28054
    $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 28055
    HEAP32[$36 >> 2] = $12; //@line 28056
    sp = STACKTOP; //@line 28057
    return;
   }
   HEAP32[___async_retval >> 2] = $32; //@line 28061
   ___async_unwind = 0; //@line 28062
   HEAP32[$ReallocAsyncCtx6 >> 2] = 240; //@line 28063
   $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 28064
   HEAP32[$33 >> 2] = $2; //@line 28065
   $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 28066
   HEAP32[$34 >> 2] = $10; //@line 28067
   $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 28068
   HEAP32[$35 >> 2] = $4; //@line 28069
   $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 28070
   HEAP32[$36 >> 2] = $12; //@line 28071
   sp = STACKTOP; //@line 28072
   return;
  } else {
   $20 = HEAP32[$17 + 4 >> 2] | 0; //@line 28076
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 28077
   FUNCTION_TABLE_vii[$20 & 31]($AsyncRetVal, $4); //@line 28078
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 237; //@line 28081
    $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 28082
    HEAP32[$21 >> 2] = $14; //@line 28083
    $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 28084
    HEAP32[$22 >> 2] = $AsyncRetVal; //@line 28085
    $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 28086
    HEAP32[$23 >> 2] = $6; //@line 28087
    $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 28088
    HEAP32[$24 >> 2] = $8; //@line 28089
    $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 28090
    HEAP32[$25 >> 2] = $2; //@line 28091
    $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 28092
    HEAP32[$26 >> 2] = $10; //@line 28093
    $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 28094
    HEAP32[$27 >> 2] = $4; //@line 28095
    $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 28096
    HEAP32[$28 >> 2] = $12; //@line 28097
    sp = STACKTOP; //@line 28098
    return;
   }
   ___async_unwind = 0; //@line 28101
   HEAP32[$ReallocAsyncCtx3 >> 2] = 237; //@line 28102
   $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 28103
   HEAP32[$21 >> 2] = $14; //@line 28104
   $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 28105
   HEAP32[$22 >> 2] = $AsyncRetVal; //@line 28106
   $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 28107
   HEAP32[$23 >> 2] = $6; //@line 28108
   $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 28109
   HEAP32[$24 >> 2] = $8; //@line 28110
   $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 28111
   HEAP32[$25 >> 2] = $2; //@line 28112
   $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 28113
   HEAP32[$26 >> 2] = $10; //@line 28114
   $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 28115
   HEAP32[$27 >> 2] = $4; //@line 28116
   $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 28117
   HEAP32[$28 >> 2] = $12; //@line 28118
   sp = STACKTOP; //@line 28119
   return;
  }
 }
 $38 = HEAP32[$2 >> 2] | 0; //@line 28123
 if ($38 | 0) {
  $41 = HEAP32[$38 + 8 >> 2] | 0; //@line 28127
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 28128
  FUNCTION_TABLE_vi[$41 & 1023]($4); //@line 28129
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 241; //@line 28132
   $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 28133
   HEAP32[$42 >> 2] = $10; //@line 28134
   $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 28135
   HEAP32[$43 >> 2] = 0; //@line 28136
   $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 28137
   HEAP32[$44 >> 2] = $12; //@line 28138
   sp = STACKTOP; //@line 28139
   return;
  }
  ___async_unwind = 0; //@line 28142
  HEAP32[$ReallocAsyncCtx4 >> 2] = 241; //@line 28143
  $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 28144
  HEAP32[$42 >> 2] = $10; //@line 28145
  $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 28146
  HEAP32[$43 >> 2] = 0; //@line 28147
  $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 28148
  HEAP32[$44 >> 2] = $12; //@line 28149
  sp = STACKTOP; //@line 28150
  return;
 }
 $45 = HEAP32[$10 >> 2] | 0; //@line 28153
 if (!$45) {
  HEAP32[___async_retval >> 2] = 0; //@line 28157
  return;
 }
 $48 = HEAP32[$45 + 8 >> 2] | 0; //@line 28161
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 28162
 FUNCTION_TABLE_vi[$48 & 1023]($12); //@line 28163
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 242; //@line 28166
  $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 28167
  HEAP32[$49 >> 2] = 0; //@line 28168
  sp = STACKTOP; //@line 28169
  return;
 }
 ___async_unwind = 0; //@line 28172
 HEAP32[$ReallocAsyncCtx5 >> 2] = 242; //@line 28173
 $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 28174
 HEAP32[$49 >> 2] = 0; //@line 28175
 sp = STACKTOP; //@line 28176
 return;
}
function __ZN10LoRaMacMib11get_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$sroa$5 = 0, $$sroa$5$0$$sroa_raw_idx = 0, $34 = 0, $39 = 0, $40 = 0, $45 = 0, sp = 0;
 sp = STACKTOP; //@line 21668
 STACKTOP = STACKTOP + 16 | 0; //@line 21669
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 21669
 $$sroa$5 = sp; //@line 21670
 L1 : do {
  if (!$1) {
   $$0 = -1003; //@line 21674
  } else {
   do {
    switch (HEAP32[$1 >> 2] | 0) {
    case 0:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 >> 2]; //@line 21682
      $$0 = 0; //@line 21683
      break L1;
      break;
     }
    case 1:
     {
      HEAP8[$1 + 4 >> 0] = HEAP8[$2 + 12 >> 0] | 0; //@line 21691
      $$0 = 0; //@line 21692
      break L1;
      break;
     }
    case 2:
     {
      HEAP8[$1 + 4 >> 0] = HEAP8[$2 + 796 >> 0] | 0; //@line 21700
      $$0 = 0; //@line 21701
      break L1;
      break;
     }
    case 3:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 588 >> 2]; //@line 21709
      $$0 = 0; //@line 21710
      break L1;
      break;
     }
    case 4:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 592 >> 2]; //@line 21718
      $$0 = 0; //@line 21719
      break L1;
      break;
     }
    case 5:
     {
      HEAP32[$1 + 4 >> 2] = $2 + 552; //@line 21726
      $$0 = 0; //@line 21727
      break L1;
      break;
     }
    case 6:
     {
      HEAP32[$1 + 4 >> 2] = $2 + 568; //@line 21734
      $$0 = 0; //@line 21735
      break L1;
      break;
     }
    case 7:
     {
      HEAP8[$1 + 4 >> 0] = HEAP8[$2 + 8 >> 0] | 0; //@line 21743
      $$0 = 0; //@line 21744
      break L1;
      break;
     }
    case 8:
     {
      HEAP8[$1 + 4 >> 0] = HEAP8[$2 + 9 >> 0] | 0; //@line 21752
      $$0 = 0; //@line 21753
      break L1;
      break;
     }
    case 9:
     {
      HEAP32[$1 + 4 >> 2] = __ZN7LoRaPHY16get_phy_channelsEv(HEAP32[$0 >> 2] | 0) | 0; //@line 21761
      $$0 = 0; //@line 21762
      break L1;
      break;
     }
    case 10:
     {
      $34 = $2 + 772 | 0; //@line 21769
      $39 = HEAP32[$34 + 4 >> 2] | 0; //@line 21774
      $40 = $1 + 4 | 0; //@line 21775
      HEAP32[$40 >> 2] = HEAP32[$34 >> 2]; //@line 21777
      HEAP32[$40 + 4 >> 2] = $39; //@line 21780
      $$0 = 0; //@line 21781
      break L1;
      break;
     }
    case 11:
     {
      $45 = __ZN7LoRaPHY24get_default_rx2_datarateEv(HEAP32[$0 >> 2] | 0) | 0; //@line 21787
      HEAP32[$1 + 4 >> 2] = __ZN7LoRaPHY25get_default_rx2_frequencyEv(HEAP32[$0 >> 2] | 0) | 0; //@line 21791
      HEAP8[$1 + 8 >> 0] = $45; //@line 21793
      $$sroa$5$0$$sroa_raw_idx = $1 + 9 | 0; //@line 21794
      HEAP8[$$sroa$5$0$$sroa_raw_idx >> 0] = HEAP8[$$sroa$5 >> 0] | 0; //@line 21795
      HEAP8[$$sroa$5$0$$sroa_raw_idx + 1 >> 0] = HEAP8[$$sroa$5 + 1 >> 0] | 0; //@line 21795
      HEAP8[$$sroa$5$0$$sroa_raw_idx + 2 >> 0] = HEAP8[$$sroa$5 + 2 >> 0] | 0; //@line 21795
      $$0 = 0; //@line 21796
      break L1;
      break;
     }
    case 13:
     {
      HEAP32[$1 + 4 >> 2] = __ZN7LoRaPHY16get_channel_maskEb(HEAP32[$0 >> 2] | 0, 1) | 0; //@line 21804
      $$0 = 0; //@line 21805
      break L1;
      break;
     }
    case 12:
     {
      HEAP32[$1 + 4 >> 2] = __ZN7LoRaPHY16get_channel_maskEb(HEAP32[$0 >> 2] | 0, 0) | 0; //@line 21813
      $$0 = 0; //@line 21814
      break L1;
      break;
     }
    case 14:
     {
      HEAP8[$1 + 4 >> 0] = HEAP8[$2 + 768 >> 0] | 0; //@line 21822
      $$0 = 0; //@line 21823
      break L1;
      break;
     }
    case 15:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 748 >> 2]; //@line 21831
      $$0 = 0; //@line 21832
      break L1;
      break;
     }
    case 16:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 752 >> 2]; //@line 21840
      $$0 = 0; //@line 21841
      break L1;
      break;
     }
    case 17:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 756 >> 2]; //@line 21849
      $$0 = 0; //@line 21850
      break L1;
      break;
     }
    case 18:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 760 >> 2]; //@line 21858
      $$0 = 0; //@line 21859
      break L1;
      break;
     }
    case 19:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 764 >> 2]; //@line 21867
      $$0 = 0; //@line 21868
      break L1;
      break;
     }
    case 20:
     {
      HEAP8[$1 + 4 >> 0] = __ZN7LoRaPHY23get_default_tx_datarateEv(HEAP32[$0 >> 2] | 0) | 0; //@line 21876
      $$0 = 0; //@line 21877
      break L1;
      break;
     }
    case 21:
     {
      HEAP8[$1 + 4 >> 0] = HEAP8[$2 + 737 >> 0] | 0; //@line 21885
      $$0 = 0; //@line 21886
      break L1;
      break;
     }
    case 23:
     {
      HEAP8[$1 + 4 >> 0] = __ZN7LoRaPHY20get_default_tx_powerEv(HEAP32[$0 >> 2] | 0) | 0; //@line 21894
      $$0 = 0; //@line 21895
      break L1;
      break;
     }
    case 22:
     {
      HEAP8[$1 + 4 >> 0] = HEAP8[$2 + 736 >> 0] | 0; //@line 21903
      $$0 = 0; //@line 21904
      break L1;
      break;
     }
    case 24:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 596 >> 2]; //@line 21912
      $$0 = 0; //@line 21913
      break L1;
      break;
     }
    case 25:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 600 >> 2]; //@line 21921
      $$0 = 0; //@line 21922
      break L1;
      break;
     }
    case 26:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 848 >> 2]; //@line 21930
      $$0 = 0; //@line 21931
      break L1;
      break;
     }
    case 27:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 740 >> 2]; //@line 21939
      $$0 = 0; //@line 21940
      break L1;
      break;
     }
    case 28:
     {
      HEAP8[$1 + 4 >> 0] = HEAP8[$2 + 744 >> 0] | 0; //@line 21948
      $$0 = 0; //@line 21949
      break L1;
      break;
     }
    case 29:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 788 >> 2]; //@line 21957
      $$0 = 0; //@line 21958
      break L1;
      break;
     }
    default:
     {
      $$0 = -1002; //@line 21963
      break L1;
     }
    }
   } while (0);
  }
 } while (0);
 STACKTOP = sp; //@line 21970
 return $$0 | 0; //@line 21970
}
function __ZN12LoRaWANStack9handle_txEhPKhth($0, $1, $2, $3, $trunc) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $trunc = $trunc | 0;
 var $$0 = 0, $$0$i34 = 0, $$1 = 0, $10 = 0, $16 = 0, $17 = 0, $25 = 0, $31 = 0, $4 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $68 = 0, $73 = 0, $75 = 0, $8 = 0, $83 = 0, $AsyncCtx = 0, $AsyncCtx16 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8453
 STACKTOP = STACKTOP + 64 | 0; //@line 8454
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 8454
 $vararg_buffer10 = sp + 32 | 0; //@line 8455
 $vararg_buffer6 = sp + 24 | 0; //@line 8456
 $vararg_buffer4 = sp + 16 | 0; //@line 8457
 $vararg_buffer2 = sp + 8 | 0; //@line 8458
 $vararg_buffer = sp; //@line 8459
 $4 = sp + 40 | 0; //@line 8460
 $5 = $0 + 1932 | 0; //@line 8461
 $8 = $0 + 1964 | 0; //@line 8464
 $10 = HEAPU8[$8 >> 0] | 0; //@line 8466
 HEAP32[$vararg_buffer >> 2] = HEAPU8[$5 >> 0]; //@line 8467
 HEAP32[$vararg_buffer + 4 >> 2] = $10; //@line 8469
 _mbed_tracef(16, 12356, 12925, $vararg_buffer); //@line 8470
 if (!(HEAP8[$5 >> 0] | 0)) {
  $$1 = -1017; //@line 8474
  STACKTOP = sp; //@line 8475
  return $$1 | 0; //@line 8475
 }
 if (HEAP8[$8 >> 0] | 0) {
  $$1 = -1001; //@line 8480
  STACKTOP = sp; //@line 8481
  return $$1 | 0; //@line 8481
 }
 $16 = $3 << 16 >> 16 == 0; //@line 8484
 if (!(($2 | 0) != 0 | $16)) {
  $$1 = -1003; //@line 8487
  STACKTOP = sp; //@line 8488
  return $$1 | 0; //@line 8488
 }
 HEAP32[$4 >> 2] = 1; //@line 8490
 $17 = $0 + 4 | 0; //@line 8491
 if (!(__ZN7LoRaMac23mib_get_request_confirmEP25loramac_mib_req_confirm_t($17, $4) | 0)) {
  if (!(HEAP8[$4 + 4 >> 0] | 0)) {
   $$0 = -1009; //@line 8499
  } else {
   label = 6; //@line 8501
  }
 } else {
  label = 6; //@line 8504
 }
 do {
  if ((label | 0) == 6) {
   if (($1 + -1 & 255) >= 223) {
    _mbed_tracef(2, 12356, 12978, $vararg_buffer2); //@line 8511
    $$0 = -1015; //@line 8512
    break;
   }
   $25 = $0 + 2285 | 0; //@line 8515
   HEAP8[$25 >> 0] = $1; //@line 8516
   if ($trunc << 24 >> 24 == 0 | ($trunc & 15) == 3) {
    _mbed_tracef(2, 12356, 13015, $vararg_buffer4); //@line 8522
    $$0 = -1003; //@line 8523
    break;
   }
   HEAP8[$0 + 1965 >> 0] = $1; //@line 8527
   $AsyncCtx = _emscripten_alloc_async_context(52, sp) | 0; //@line 8529
   $31 = __ZN7LoRaMac17query_tx_possibleEhP17loramac_tx_info_t($17, $3 & 255, $vararg_buffer) | 0; //@line 8530
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 251; //@line 8533
    HEAP32[$AsyncCtx + 4 >> 2] = $vararg_buffer; //@line 8535
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 8537
    HEAP16[$AsyncCtx + 12 >> 1] = $3; //@line 8539
    HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer6; //@line 8541
    HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer6; //@line 8543
    HEAP32[$AsyncCtx + 24 >> 2] = $0; //@line 8545
    HEAP32[$AsyncCtx + 28 >> 2] = $2; //@line 8547
    HEAP8[$AsyncCtx + 32 >> 0] = $16 & 1; //@line 8550
    HEAP8[$AsyncCtx + 33 >> 0] = $trunc; //@line 8552
    HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer10; //@line 8554
    HEAP32[$AsyncCtx + 40 >> 2] = $vararg_buffer10; //@line 8556
    HEAP32[$AsyncCtx + 44 >> 2] = $25; //@line 8558
    HEAP32[$AsyncCtx + 48 >> 2] = $4; //@line 8560
    sp = STACKTOP; //@line 8561
    STACKTOP = sp; //@line 8562
    return 0; //@line 8562
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 8564
   $47 = ($31 | 0) == -1010 ? HEAP8[$vararg_buffer >> 0] | 0 : HEAP8[$vararg_buffer + 1 >> 0] | 0; //@line 8569
   $$0$i34 = $47 & 255; //@line 8570
   $48 = $47 & 255; //@line 8571
   $49 = $3 & 65535; //@line 8572
   if (($$0$i34 & 65535) < ($3 & 65535)) {
    HEAP32[$vararg_buffer6 >> 2] = $49; //@line 8575
    HEAP32[$vararg_buffer6 + 4 >> 2] = $48; //@line 8577
    _mbed_tracef(8, 12356, 13075, $vararg_buffer6); //@line 8578
    HEAP16[$0 + 2232 >> 1] = $49 - $48; //@line 8582
    HEAP16[$0 + 2230 >> 1] = $$0$i34; //@line 8584
    _memcpy($0 + 1975 | 0, $2 | 0, $48 | 0) | 0; //@line 8586
   } else {
    HEAP16[$0 + 2230 >> 1] = $3; //@line 8589
    HEAP16[$0 + 2232 >> 1] = 0; //@line 8591
    if (!$16) {
     _memcpy($0 + 1975 | 0, $2 | 0, $49 | 0) | 0; //@line 8594
    }
   }
   switch ($trunc & 15) {
   case 9:
   case 5:
   case 1:
    {
     HEAP32[$0 + 1968 >> 2] = 0; //@line 8601
     HEAP8[$0 + 1972 >> 0] = HEAP8[$25 >> 0] | 0; //@line 8604
     switch ($trunc & 15) {
     case 6:
     case 2:
      {
       label = 18; //@line 8608
       break;
      }
     default:
      {}
     }
     break;
    }
   case 10:
   case 6:
   case 2:
    {
     label = 18; //@line 8617
     break;
    }
   default:
    {}
   }
   if ((label | 0) == 18) {
    HEAP32[$0 + 1968 >> 2] = 1; //@line 8625
    HEAP8[$0 + 1972 >> 0] = HEAP8[$25 >> 0] | 0; //@line 8628
    HEAP8[$0 + 1974 >> 0] = HEAP8[$0 + 2284 >> 0] | 0; //@line 8632
   }
   $68 = $0 + 2230 | 0; //@line 8634
   $73 = HEAPU16[$0 + 2232 >> 1] | 0; //@line 8639
   HEAP32[$vararg_buffer10 >> 2] = HEAPU16[$68 >> 1]; //@line 8640
   HEAP32[$vararg_buffer10 + 4 >> 2] = $73; //@line 8642
   _mbed_tracef(8, 12356, 13130, $vararg_buffer10); //@line 8643
   HEAP32[$0 + 1876 >> 2] = 5; //@line 8645
   $AsyncCtx16 = _emscripten_alloc_async_context(12, sp) | 0; //@line 8646
   $75 = __ZN12LoRaWANStack18lora_state_machineEv($0) | 0; //@line 8647
   if (___async) {
    HEAP32[$AsyncCtx16 >> 2] = 252; //@line 8650
    HEAP32[$AsyncCtx16 + 4 >> 2] = $68; //@line 8652
    HEAP32[$AsyncCtx16 + 8 >> 2] = $4; //@line 8654
    sp = STACKTOP; //@line 8655
    STACKTOP = sp; //@line 8656
    return 0; //@line 8656
   }
   _emscripten_free_async_context($AsyncCtx16 | 0); //@line 8658
   if (!$75) {
    $83 = HEAPU16[$68 >> 1] | 0; //@line 8663
   } else {
    $83 = $75 << 16 >> 16; //@line 8667
   }
   $$0 = $83 & 65535; //@line 8670
  }
 } while (0);
 $$1 = $$0; //@line 8673
 STACKTOP = sp; //@line 8674
 return $$1 | 0; //@line 8674
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_313($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 13644
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13646
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13648
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13650
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13654
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13656
 $13 = $10 + 12 | 0; //@line 13657
 HEAP32[$10 >> 2] = 487; //@line 13658
 HEAP32[$10 + 4 >> 2] = 0; //@line 13660
 HEAP32[$10 + 8 >> 2] = $4; //@line 13662
 HEAP32[$13 >> 2] = 912; //@line 13663
 $14 = $4 + 1276 | 0; //@line 13664
 if (($14 | 0) == ($10 | 0)) {
  $39 = HEAP32[230] | 0; //@line 13668
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(24) | 0; //@line 13669
  FUNCTION_TABLE_vi[$39 & 1023]($10); //@line 13670
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 490; //@line 13673
   $40 = $ReallocAsyncCtx9 + 4 | 0; //@line 13674
   HEAP32[$40 >> 2] = $2; //@line 13675
   $41 = $ReallocAsyncCtx9 + 8 | 0; //@line 13676
   HEAP32[$41 >> 2] = $4; //@line 13677
   $42 = $ReallocAsyncCtx9 + 12 | 0; //@line 13678
   HEAP32[$42 >> 2] = $6; //@line 13679
   $43 = $ReallocAsyncCtx9 + 16 | 0; //@line 13680
   HEAP32[$43 >> 2] = $10; //@line 13681
   $44 = $ReallocAsyncCtx9 + 20 | 0; //@line 13682
   HEAP32[$44 >> 2] = $12; //@line 13683
   sp = STACKTOP; //@line 13684
   return;
  }
  ___async_unwind = 0; //@line 13687
  HEAP32[$ReallocAsyncCtx9 >> 2] = 490; //@line 13688
  $40 = $ReallocAsyncCtx9 + 4 | 0; //@line 13689
  HEAP32[$40 >> 2] = $2; //@line 13690
  $41 = $ReallocAsyncCtx9 + 8 | 0; //@line 13691
  HEAP32[$41 >> 2] = $4; //@line 13692
  $42 = $ReallocAsyncCtx9 + 12 | 0; //@line 13693
  HEAP32[$42 >> 2] = $6; //@line 13694
  $43 = $ReallocAsyncCtx9 + 16 | 0; //@line 13695
  HEAP32[$43 >> 2] = $10; //@line 13696
  $44 = $ReallocAsyncCtx9 + 20 | 0; //@line 13697
  HEAP32[$44 >> 2] = $12; //@line 13698
  sp = STACKTOP; //@line 13699
  return;
 }
 $16 = $4 + 1288 | 0; //@line 13702
 $17 = HEAP32[$16 >> 2] | 0; //@line 13703
 if (!$17) {
  $30 = HEAP32[229] | 0; //@line 13707
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(32) | 0; //@line 13708
  FUNCTION_TABLE_vii[$30 & 31]($14, $10); //@line 13709
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 489; //@line 13712
   $31 = $ReallocAsyncCtx8 + 4 | 0; //@line 13713
   HEAP32[$31 >> 2] = $2; //@line 13714
   $32 = $ReallocAsyncCtx8 + 8 | 0; //@line 13715
   HEAP32[$32 >> 2] = $4; //@line 13716
   $33 = $ReallocAsyncCtx8 + 12 | 0; //@line 13717
   HEAP32[$33 >> 2] = $6; //@line 13718
   $34 = $ReallocAsyncCtx8 + 16 | 0; //@line 13719
   HEAP32[$34 >> 2] = $10; //@line 13720
   $35 = $ReallocAsyncCtx8 + 20 | 0; //@line 13721
   HEAP32[$35 >> 2] = $12; //@line 13722
   $36 = $ReallocAsyncCtx8 + 24 | 0; //@line 13723
   HEAP32[$36 >> 2] = $13; //@line 13724
   $37 = $ReallocAsyncCtx8 + 28 | 0; //@line 13725
   HEAP32[$37 >> 2] = $16; //@line 13726
   sp = STACKTOP; //@line 13727
   return;
  }
  ___async_unwind = 0; //@line 13730
  HEAP32[$ReallocAsyncCtx8 >> 2] = 489; //@line 13731
  $31 = $ReallocAsyncCtx8 + 4 | 0; //@line 13732
  HEAP32[$31 >> 2] = $2; //@line 13733
  $32 = $ReallocAsyncCtx8 + 8 | 0; //@line 13734
  HEAP32[$32 >> 2] = $4; //@line 13735
  $33 = $ReallocAsyncCtx8 + 12 | 0; //@line 13736
  HEAP32[$33 >> 2] = $6; //@line 13737
  $34 = $ReallocAsyncCtx8 + 16 | 0; //@line 13738
  HEAP32[$34 >> 2] = $10; //@line 13739
  $35 = $ReallocAsyncCtx8 + 20 | 0; //@line 13740
  HEAP32[$35 >> 2] = $12; //@line 13741
  $36 = $ReallocAsyncCtx8 + 24 | 0; //@line 13742
  HEAP32[$36 >> 2] = $13; //@line 13743
  $37 = $ReallocAsyncCtx8 + 28 | 0; //@line 13744
  HEAP32[$37 >> 2] = $16; //@line 13745
  sp = STACKTOP; //@line 13746
  return;
 } else {
  $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 13750
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(36) | 0; //@line 13751
  FUNCTION_TABLE_vi[$20 & 1023]($14); //@line 13752
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 488; //@line 13755
   $21 = $ReallocAsyncCtx7 + 4 | 0; //@line 13756
   HEAP32[$21 >> 2] = $2; //@line 13757
   $22 = $ReallocAsyncCtx7 + 8 | 0; //@line 13758
   HEAP32[$22 >> 2] = $4; //@line 13759
   $23 = $ReallocAsyncCtx7 + 12 | 0; //@line 13760
   HEAP32[$23 >> 2] = $6; //@line 13761
   $24 = $ReallocAsyncCtx7 + 16 | 0; //@line 13762
   HEAP32[$24 >> 2] = $13; //@line 13763
   $25 = $ReallocAsyncCtx7 + 20 | 0; //@line 13764
   HEAP32[$25 >> 2] = $14; //@line 13765
   $26 = $ReallocAsyncCtx7 + 24 | 0; //@line 13766
   HEAP32[$26 >> 2] = $10; //@line 13767
   $27 = $ReallocAsyncCtx7 + 28 | 0; //@line 13768
   HEAP32[$27 >> 2] = $12; //@line 13769
   $28 = $ReallocAsyncCtx7 + 32 | 0; //@line 13770
   HEAP32[$28 >> 2] = $16; //@line 13771
   sp = STACKTOP; //@line 13772
   return;
  }
  ___async_unwind = 0; //@line 13775
  HEAP32[$ReallocAsyncCtx7 >> 2] = 488; //@line 13776
  $21 = $ReallocAsyncCtx7 + 4 | 0; //@line 13777
  HEAP32[$21 >> 2] = $2; //@line 13778
  $22 = $ReallocAsyncCtx7 + 8 | 0; //@line 13779
  HEAP32[$22 >> 2] = $4; //@line 13780
  $23 = $ReallocAsyncCtx7 + 12 | 0; //@line 13781
  HEAP32[$23 >> 2] = $6; //@line 13782
  $24 = $ReallocAsyncCtx7 + 16 | 0; //@line 13783
  HEAP32[$24 >> 2] = $13; //@line 13784
  $25 = $ReallocAsyncCtx7 + 20 | 0; //@line 13785
  HEAP32[$25 >> 2] = $14; //@line 13786
  $26 = $ReallocAsyncCtx7 + 24 | 0; //@line 13787
  HEAP32[$26 >> 2] = $10; //@line 13788
  $27 = $ReallocAsyncCtx7 + 28 | 0; //@line 13789
  HEAP32[$27 >> 2] = $12; //@line 13790
  $28 = $ReallocAsyncCtx7 + 32 | 0; //@line 13791
  HEAP32[$28 >> 2] = $16; //@line 13792
  sp = STACKTOP; //@line 13793
  return;
 }
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_187($0) {
 $0 = $0 | 0;
 var $$pre17 = 0, $10 = 0, $11 = 0, $16 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 32454
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32456
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32458
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32460
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 32465
  _mbed_assert_internal(13612, 13621, 215); //@line 32466
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 404; //@line 32469
   $9 = $ReallocAsyncCtx14 + 4 | 0; //@line 32470
   HEAP32[$9 >> 2] = $2; //@line 32471
   $10 = $ReallocAsyncCtx14 + 8 | 0; //@line 32472
   HEAP32[$10 >> 2] = $4; //@line 32473
   $11 = $ReallocAsyncCtx14 + 12 | 0; //@line 32474
   HEAP32[$11 >> 2] = $6; //@line 32475
   sp = STACKTOP; //@line 32476
   return;
  }
  ___async_unwind = 0; //@line 32479
  HEAP32[$ReallocAsyncCtx14 >> 2] = 404; //@line 32480
  $9 = $ReallocAsyncCtx14 + 4 | 0; //@line 32481
  HEAP32[$9 >> 2] = $2; //@line 32482
  $10 = $ReallocAsyncCtx14 + 8 | 0; //@line 32483
  HEAP32[$10 >> 2] = $4; //@line 32484
  $11 = $ReallocAsyncCtx14 + 12 | 0; //@line 32485
  HEAP32[$11 >> 2] = $6; //@line 32486
  sp = STACKTOP; //@line 32487
  return;
 }
 HEAP32[$4 + 364 >> 2] = 2; //@line 32491
 $$pre17 = HEAP8[$2 >> 0] | 0; //@line 32492
 if (!($$pre17 & 4)) {
  $16 = HEAP32[$4 + 1324 >> 2] | 0; //@line 32497
  $17 = $16 + 16 | 0; //@line 32498
  $19 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 32500
  $20 = $16 + 28 | 0; //@line 32501
  $21 = HEAP32[$20 >> 2] | 0; //@line 32502
  if (!$21) {
   $ReallocAsyncCtx13 = _emscripten_realloc_async_context(24) | 0; //@line 32505
   _mbed_assert_internal(15679, 15684, 1102); //@line 32506
   if (___async) {
    HEAP32[$ReallocAsyncCtx13 >> 2] = 405; //@line 32509
    $23 = $ReallocAsyncCtx13 + 4 | 0; //@line 32510
    HEAP32[$23 >> 2] = $20; //@line 32511
    $24 = $ReallocAsyncCtx13 + 8 | 0; //@line 32512
    HEAP32[$24 >> 2] = $17; //@line 32513
    $25 = $ReallocAsyncCtx13 + 12 | 0; //@line 32514
    HEAP32[$25 >> 2] = $19; //@line 32515
    $26 = $ReallocAsyncCtx13 + 16 | 0; //@line 32516
    HEAP32[$26 >> 2] = $2; //@line 32517
    $27 = $ReallocAsyncCtx13 + 20 | 0; //@line 32518
    HEAP32[$27 >> 2] = $4; //@line 32519
    sp = STACKTOP; //@line 32520
    return;
   }
   ___async_unwind = 0; //@line 32523
   HEAP32[$ReallocAsyncCtx13 >> 2] = 405; //@line 32524
   $23 = $ReallocAsyncCtx13 + 4 | 0; //@line 32525
   HEAP32[$23 >> 2] = $20; //@line 32526
   $24 = $ReallocAsyncCtx13 + 8 | 0; //@line 32527
   HEAP32[$24 >> 2] = $17; //@line 32528
   $25 = $ReallocAsyncCtx13 + 12 | 0; //@line 32529
   HEAP32[$25 >> 2] = $19; //@line 32530
   $26 = $ReallocAsyncCtx13 + 16 | 0; //@line 32531
   HEAP32[$26 >> 2] = $2; //@line 32532
   $27 = $ReallocAsyncCtx13 + 20 | 0; //@line 32533
   HEAP32[$27 >> 2] = $4; //@line 32534
   sp = STACKTOP; //@line 32535
   return;
  } else {
   $28 = HEAP32[$21 >> 2] | 0; //@line 32538
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 32539
   FUNCTION_TABLE_vii[$28 & 31]($17, $19); //@line 32540
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 406; //@line 32543
    $29 = $ReallocAsyncCtx4 + 4 | 0; //@line 32544
    HEAP32[$29 >> 2] = $2; //@line 32545
    $30 = $ReallocAsyncCtx4 + 8 | 0; //@line 32546
    HEAP32[$30 >> 2] = $4; //@line 32547
    sp = STACKTOP; //@line 32548
    return;
   }
   ___async_unwind = 0; //@line 32551
   HEAP32[$ReallocAsyncCtx4 >> 2] = 406; //@line 32552
   $29 = $ReallocAsyncCtx4 + 4 | 0; //@line 32553
   HEAP32[$29 >> 2] = $2; //@line 32554
   $30 = $ReallocAsyncCtx4 + 8 | 0; //@line 32555
   HEAP32[$30 >> 2] = $4; //@line 32556
   sp = STACKTOP; //@line 32557
   return;
  }
 }
 $31 = $$pre17 & -5; //@line 32561
 HEAP8[$2 >> 0] = $31; //@line 32562
 if (!($31 & 16)) {
  return;
 }
 HEAP8[$2 >> 0] = $31 & -17; //@line 32569
 $36 = HEAP32[$4 + 1324 >> 2] | 0; //@line 32571
 $37 = $36 + 48 | 0; //@line 32572
 $39 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 32574
 $40 = $36 + 60 | 0; //@line 32575
 $41 = HEAP32[$40 >> 2] | 0; //@line 32576
 if (!$41) {
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(16) | 0; //@line 32579
  _mbed_assert_internal(15679, 15684, 1102); //@line 32580
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 407; //@line 32583
   $43 = $ReallocAsyncCtx12 + 4 | 0; //@line 32584
   HEAP32[$43 >> 2] = $40; //@line 32585
   $44 = $ReallocAsyncCtx12 + 8 | 0; //@line 32586
   HEAP32[$44 >> 2] = $37; //@line 32587
   $45 = $ReallocAsyncCtx12 + 12 | 0; //@line 32588
   HEAP32[$45 >> 2] = $39; //@line 32589
   sp = STACKTOP; //@line 32590
   return;
  }
  ___async_unwind = 0; //@line 32593
  HEAP32[$ReallocAsyncCtx12 >> 2] = 407; //@line 32594
  $43 = $ReallocAsyncCtx12 + 4 | 0; //@line 32595
  HEAP32[$43 >> 2] = $40; //@line 32596
  $44 = $ReallocAsyncCtx12 + 8 | 0; //@line 32597
  HEAP32[$44 >> 2] = $37; //@line 32598
  $45 = $ReallocAsyncCtx12 + 12 | 0; //@line 32599
  HEAP32[$45 >> 2] = $39; //@line 32600
  sp = STACKTOP; //@line 32601
  return;
 } else {
  $46 = HEAP32[$41 >> 2] | 0; //@line 32604
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 32605
  FUNCTION_TABLE_vii[$46 & 31]($37, $39); //@line 32606
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 408; //@line 32609
   sp = STACKTOP; //@line 32610
   return;
  }
  ___async_unwind = 0; //@line 32613
  HEAP32[$ReallocAsyncCtx5 >> 2] = 408; //@line 32614
  sp = STACKTOP; //@line 32615
  return;
 }
}
function _mbedtls_gcm_update__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$061 = 0, $$163 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $35 = 0, $36 = 0, $39 = 0, $4 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $67 = 0, $68 = 0, $75 = 0, $8 = 0, $84 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 18714
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18716
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18718
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18720
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18722
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18724
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18726
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18728
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 18730
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 18732
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 18734
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 18736
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 18738
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 18740
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 18742
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 18744
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 18746
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 18748
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 18751
  $84 = ___async_retval; //@line 18752
  HEAP32[$84 >> 2] = $$0; //@line 18753
  return;
 }
 if ($2 | 0) {
  $$163 = 0; //@line 18758
  do {
   $67 = $8 + 376 + $$163 | 0; //@line 18762
   $68 = $14 + $$163 | 0; //@line 18763
   if (!(HEAP32[$18 >> 2] | 0)) {
    HEAP8[$67 >> 0] = HEAP8[$67 >> 0] ^ HEAP8[$68 >> 0]; //@line 18768
   }
   $75 = HEAP8[$68 >> 0] ^ HEAP8[$20 + $$163 >> 0]; //@line 18773
   HEAP8[$16 + $$163 >> 0] = $75; //@line 18775
   if ((HEAP32[$18 >> 2] | 0) == 1) {
    HEAP8[$67 >> 0] = HEAP8[$67 >> 0] ^ $75; //@line 18781
   }
   $$163 = $$163 + 1 | 0; //@line 18783
  } while ($$163 >>> 0 < $2 >>> 0);
 }
 _gcm_mult($8, $10, $10); //@line 18792
 $35 = $12 - $2 | 0; //@line 18793
 $51 = $14 + $2 | 0; //@line 18794
 $53 = $16 + $2 | 0; //@line 18795
 if (!$35) {
  $$0 = 0; //@line 18798
  $84 = ___async_retval; //@line 18799
  HEAP32[$84 >> 2] = $$0; //@line 18800
  return;
 }
 $36 = $35 >>> 0 < 16 ? $35 : 16; //@line 18804
 $$061 = 16; //@line 18805
 do {
  if ($$061 >>> 0 <= 12) {
   break;
  }
  $$061 = $$061 + -1 | 0; //@line 18811
  $39 = $8 + 360 + $$061 | 0; //@line 18812
  $41 = (HEAP8[$39 >> 0] | 0) + 1 << 24 >> 24; //@line 18814
  HEAP8[$39 >> 0] = $41; //@line 18815
 } while (!($41 << 24 >> 24));
 $ReallocAsyncCtx = _emscripten_realloc_async_context(68) | 0; //@line 18823
 $43 = _mbedtls_cipher_update($28, $30, 16, $6, $32) | 0; //@line 18824
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 608; //@line 18827
  $44 = $ReallocAsyncCtx + 4 | 0; //@line 18828
  HEAP32[$44 >> 2] = $36; //@line 18829
  $45 = $ReallocAsyncCtx + 8 | 0; //@line 18830
  HEAP32[$45 >> 2] = $4; //@line 18831
  $46 = $ReallocAsyncCtx + 12 | 0; //@line 18832
  HEAP32[$46 >> 2] = $6; //@line 18833
  $47 = $ReallocAsyncCtx + 16 | 0; //@line 18834
  HEAP32[$47 >> 2] = $8; //@line 18835
  $48 = $ReallocAsyncCtx + 20 | 0; //@line 18836
  HEAP32[$48 >> 2] = $10; //@line 18837
  $49 = $ReallocAsyncCtx + 24 | 0; //@line 18838
  HEAP32[$49 >> 2] = $35; //@line 18839
  $50 = $ReallocAsyncCtx + 28 | 0; //@line 18840
  HEAP32[$50 >> 2] = $51; //@line 18841
  $52 = $ReallocAsyncCtx + 32 | 0; //@line 18842
  HEAP32[$52 >> 2] = $53; //@line 18843
  $54 = $ReallocAsyncCtx + 36 | 0; //@line 18844
  HEAP32[$54 >> 2] = $18; //@line 18845
  $55 = $ReallocAsyncCtx + 40 | 0; //@line 18846
  HEAP32[$55 >> 2] = $20; //@line 18847
  $56 = $ReallocAsyncCtx + 44 | 0; //@line 18848
  HEAP32[$56 >> 2] = $22; //@line 18849
  $57 = $ReallocAsyncCtx + 48 | 0; //@line 18850
  HEAP32[$57 >> 2] = $24; //@line 18851
  $58 = $ReallocAsyncCtx + 52 | 0; //@line 18852
  HEAP32[$58 >> 2] = $26; //@line 18853
  $59 = $ReallocAsyncCtx + 56 | 0; //@line 18854
  HEAP32[$59 >> 2] = $28; //@line 18855
  $60 = $ReallocAsyncCtx + 60 | 0; //@line 18856
  HEAP32[$60 >> 2] = $30; //@line 18857
  $61 = $ReallocAsyncCtx + 64 | 0; //@line 18858
  HEAP32[$61 >> 2] = $32; //@line 18859
  sp = STACKTOP; //@line 18860
  return;
 }
 HEAP32[___async_retval >> 2] = $43; //@line 18864
 ___async_unwind = 0; //@line 18865
 HEAP32[$ReallocAsyncCtx >> 2] = 608; //@line 18866
 $44 = $ReallocAsyncCtx + 4 | 0; //@line 18867
 HEAP32[$44 >> 2] = $36; //@line 18868
 $45 = $ReallocAsyncCtx + 8 | 0; //@line 18869
 HEAP32[$45 >> 2] = $4; //@line 18870
 $46 = $ReallocAsyncCtx + 12 | 0; //@line 18871
 HEAP32[$46 >> 2] = $6; //@line 18872
 $47 = $ReallocAsyncCtx + 16 | 0; //@line 18873
 HEAP32[$47 >> 2] = $8; //@line 18874
 $48 = $ReallocAsyncCtx + 20 | 0; //@line 18875
 HEAP32[$48 >> 2] = $10; //@line 18876
 $49 = $ReallocAsyncCtx + 24 | 0; //@line 18877
 HEAP32[$49 >> 2] = $35; //@line 18878
 $50 = $ReallocAsyncCtx + 28 | 0; //@line 18879
 HEAP32[$50 >> 2] = $51; //@line 18880
 $52 = $ReallocAsyncCtx + 32 | 0; //@line 18881
 HEAP32[$52 >> 2] = $53; //@line 18882
 $54 = $ReallocAsyncCtx + 36 | 0; //@line 18883
 HEAP32[$54 >> 2] = $18; //@line 18884
 $55 = $ReallocAsyncCtx + 40 | 0; //@line 18885
 HEAP32[$55 >> 2] = $20; //@line 18886
 $56 = $ReallocAsyncCtx + 44 | 0; //@line 18887
 HEAP32[$56 >> 2] = $22; //@line 18888
 $57 = $ReallocAsyncCtx + 48 | 0; //@line 18889
 HEAP32[$57 >> 2] = $24; //@line 18890
 $58 = $ReallocAsyncCtx + 52 | 0; //@line 18891
 HEAP32[$58 >> 2] = $26; //@line 18892
 $59 = $ReallocAsyncCtx + 56 | 0; //@line 18893
 HEAP32[$59 >> 2] = $28; //@line 18894
 $60 = $ReallocAsyncCtx + 60 | 0; //@line 18895
 HEAP32[$60 >> 2] = $30; //@line 18896
 $61 = $ReallocAsyncCtx + 64 | 0; //@line 18897
 HEAP32[$61 >> 2] = $32; //@line 18898
 sp = STACKTOP; //@line 18899
 return;
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $26 = 0, $33 = 0, $38 = 0, $41 = 0, $46 = 0, $52 = 0, $53 = 0, $56 = 0, $59 = 0, $62 = 0, $65 = 0, $67 = 0, $70 = 0, $73 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 1656
 STACKTOP = STACKTOP + 32 | 0; //@line 1657
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 1657
 $1 = sp + 8 | 0; //@line 1659
 _mbed_tracef(16, 10968, 11466, sp); //@line 1660
 $2 = $0 + 688 | 0; //@line 1661
 switch (HEAP8[$2 >> 0] | 0) {
 case 1:
  {
   do {
    if (!(HEAP8[$0 + 689 >> 0] | 0)) {
     HEAP8[$0 + 732 >> 0] = 0; //@line 1671
     HEAP8[$0 + 733 >> 0] = 0; //@line 1673
     HEAP16[$0 + 744 >> 1] = 0; //@line 1675
     HEAP16[$0 + 742 >> 1] = 0; //@line 1677
     if (!(HEAP8[$0 + 722 >> 0] | 0)) {
      HEAP8[$2 >> 0] = 0; //@line 1682
      $14 = $0 + 1176 | 0; //@line 1683
      $15 = $1 + 12 | 0; //@line 1684
      HEAP32[$1 >> 2] = 57; //@line 1685
      HEAP32[$1 + 4 >> 2] = 0; //@line 1687
      HEAP32[$1 + 8 >> 2] = $0; //@line 1689
      HEAP32[$15 >> 2] = 648; //@line 1690
      $18 = ___muldi3(HEAP32[$0 + 728 >> 2] | 0, 0, 1e3, 0) | 0; //@line 1693
      $19 = tempRet0; //@line 1694
      $20 = $0 + 1216 | 0; //@line 1695
      if (($20 | 0) != ($1 | 0)) {
       $22 = $0 + 1228 | 0; //@line 1698
       $23 = HEAP32[$22 >> 2] | 0; //@line 1699
       do {
        if ($23 | 0) {
         $26 = HEAP32[$23 + 8 >> 2] | 0; //@line 1704
         $AsyncCtx = _emscripten_alloc_async_context(40, sp) | 0; //@line 1705
         FUNCTION_TABLE_vi[$26 & 1023]($20); //@line 1706
         if (___async) {
          HEAP32[$AsyncCtx >> 2] = 88; //@line 1709
          HEAP32[$AsyncCtx + 4 >> 2] = $15; //@line 1711
          HEAP32[$AsyncCtx + 8 >> 2] = $22; //@line 1713
          HEAP32[$AsyncCtx + 12 >> 2] = $20; //@line 1715
          HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 1717
          HEAP32[$AsyncCtx + 20 >> 2] = $14; //@line 1719
          $33 = $AsyncCtx + 24 | 0; //@line 1721
          HEAP32[$33 >> 2] = $18; //@line 1723
          HEAP32[$33 + 4 >> 2] = $19; //@line 1726
          HEAP32[$AsyncCtx + 32 >> 2] = $0; //@line 1728
          sp = STACKTOP; //@line 1729
          STACKTOP = sp; //@line 1730
          return;
         } else {
          _emscripten_free_async_context($AsyncCtx | 0); //@line 1732
          break;
         }
        }
       } while (0);
       $38 = HEAP32[$15 >> 2] | 0; //@line 1737
       do {
        if (!$38) {
         $52 = 0; //@line 1741
        } else {
         $41 = HEAP32[$38 + 4 >> 2] | 0; //@line 1744
         $AsyncCtx2 = _emscripten_alloc_async_context(32, sp) | 0; //@line 1745
         FUNCTION_TABLE_vii[$41 & 31]($20, $1); //@line 1746
         if (___async) {
          HEAP32[$AsyncCtx2 >> 2] = 89; //@line 1749
          HEAP32[$AsyncCtx2 + 4 >> 2] = $15; //@line 1751
          HEAP32[$AsyncCtx2 + 8 >> 2] = $22; //@line 1753
          HEAP32[$AsyncCtx2 + 12 >> 2] = $14; //@line 1755
          $46 = $AsyncCtx2 + 16 | 0; //@line 1757
          HEAP32[$46 >> 2] = $18; //@line 1759
          HEAP32[$46 + 4 >> 2] = $19; //@line 1762
          HEAP32[$AsyncCtx2 + 24 >> 2] = $0; //@line 1764
          HEAP32[$AsyncCtx2 + 28 >> 2] = $1; //@line 1766
          sp = STACKTOP; //@line 1767
          STACKTOP = sp; //@line 1768
          return;
         } else {
          _emscripten_free_async_context($AsyncCtx2 | 0); //@line 1770
          $52 = HEAP32[$15 >> 2] | 0; //@line 1772
          break;
         }
        }
       } while (0);
       HEAP32[$22 >> 2] = $52; //@line 1777
      }
      __ZN4mbed6Ticker5setupEy($14, $18, $19); //@line 1779
      $53 = HEAP32[$15 >> 2] | 0; //@line 1780
      if ($53 | 0) {
       $56 = HEAP32[$53 + 8 >> 2] | 0; //@line 1784
       $AsyncCtx6 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1785
       FUNCTION_TABLE_vi[$56 & 1023]($1); //@line 1786
       if (___async) {
        HEAP32[$AsyncCtx6 >> 2] = 90; //@line 1789
        HEAP32[$AsyncCtx6 + 4 >> 2] = $0; //@line 1791
        sp = STACKTOP; //@line 1792
        STACKTOP = sp; //@line 1793
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx6 | 0); //@line 1795
        break;
       }
      }
     }
    }
   } while (0);
   $59 = HEAP32[$0 + 788 >> 2] | 0; //@line 1803
   if (!$59) {
    STACKTOP = sp; //@line 1806
    return;
   }
   $62 = HEAP32[$59 + 60 >> 2] | 0; //@line 1809
   if (!$62) {
    STACKTOP = sp; //@line 1812
    return;
   }
   $65 = HEAP32[$62 >> 2] | 0; //@line 1815
   $AsyncCtx9 = _emscripten_alloc_async_context(4, sp) | 0; //@line 1816
   FUNCTION_TABLE_vi[$65 & 1023]($59 + 48 | 0); //@line 1817
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 91; //@line 1820
    sp = STACKTOP; //@line 1821
    STACKTOP = sp; //@line 1822
    return;
   }
   _emscripten_free_async_context($AsyncCtx9 | 0); //@line 1824
   STACKTOP = sp; //@line 1825
   return;
  }
 case 2:
  {
   HEAP8[$2 >> 0] = 0; //@line 1829
   $67 = HEAP32[$0 + 788 >> 2] | 0; //@line 1831
   if (!$67) {
    STACKTOP = sp; //@line 1834
    return;
   }
   $70 = HEAP32[$67 + 28 >> 2] | 0; //@line 1837
   if (!$70) {
    STACKTOP = sp; //@line 1840
    return;
   }
   $73 = HEAP32[$70 >> 2] | 0; //@line 1843
   $AsyncCtx12 = _emscripten_alloc_async_context(4, sp) | 0; //@line 1844
   FUNCTION_TABLE_vi[$73 & 1023]($67 + 16 | 0); //@line 1845
   if (___async) {
    HEAP32[$AsyncCtx12 >> 2] = 92; //@line 1848
    sp = STACKTOP; //@line 1849
    STACKTOP = sp; //@line 1850
    return;
   }
   _emscripten_free_async_context($AsyncCtx12 | 0); //@line 1852
   STACKTOP = sp; //@line 1853
   return;
  }
 default:
  {
   STACKTOP = sp; //@line 1857
   return;
  }
 }
}
function _initialize__async_cb_73($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 22136
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22138
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22140
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22142
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 22144
 $8 = HEAP32[$AsyncRetVal >> 2] | 0; //@line 22145
 if (!$8) {
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(20) | 0; //@line 22148
  _mbed_assert_internal(15131, 15133, 41); //@line 22149
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 613; //@line 22152
   $10 = $ReallocAsyncCtx7 + 4 | 0; //@line 22153
   HEAP32[$10 >> 2] = $2; //@line 22154
   $11 = $ReallocAsyncCtx7 + 8 | 0; //@line 22155
   HEAP32[$11 >> 2] = $4; //@line 22156
   $12 = $ReallocAsyncCtx7 + 12 | 0; //@line 22157
   HEAP32[$12 >> 2] = $6; //@line 22158
   $13 = $ReallocAsyncCtx7 + 16 | 0; //@line 22159
   HEAP32[$13 >> 2] = $AsyncRetVal; //@line 22160
   sp = STACKTOP; //@line 22161
   return;
  }
  ___async_unwind = 0; //@line 22164
  HEAP32[$ReallocAsyncCtx7 >> 2] = 613; //@line 22165
  $10 = $ReallocAsyncCtx7 + 4 | 0; //@line 22166
  HEAP32[$10 >> 2] = $2; //@line 22167
  $11 = $ReallocAsyncCtx7 + 8 | 0; //@line 22168
  HEAP32[$11 >> 2] = $4; //@line 22169
  $12 = $ReallocAsyncCtx7 + 12 | 0; //@line 22170
  HEAP32[$12 >> 2] = $6; //@line 22171
  $13 = $ReallocAsyncCtx7 + 16 | 0; //@line 22172
  HEAP32[$13 >> 2] = $AsyncRetVal; //@line 22173
  sp = STACKTOP; //@line 22174
  return;
 }
 $15 = HEAP32[$AsyncRetVal + 4 >> 2] | 0; //@line 22178
 if (($15 + -4 | 0) >>> 0 > 28) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 22182
  _mbed_assert_internal(15131, 15133, 47); //@line 22183
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 614; //@line 22186
   $17 = $ReallocAsyncCtx6 + 4 | 0; //@line 22187
   HEAP32[$17 >> 2] = $8; //@line 22188
   $18 = $ReallocAsyncCtx6 + 8 | 0; //@line 22189
   HEAP32[$18 >> 2] = $4; //@line 22190
   $19 = $ReallocAsyncCtx6 + 12 | 0; //@line 22191
   HEAP32[$19 >> 2] = $6; //@line 22192
   $20 = $ReallocAsyncCtx6 + 16 | 0; //@line 22193
   HEAP32[$20 >> 2] = $2; //@line 22194
   sp = STACKTOP; //@line 22195
   return;
  }
  ___async_unwind = 0; //@line 22198
  HEAP32[$ReallocAsyncCtx6 >> 2] = 614; //@line 22199
  $17 = $ReallocAsyncCtx6 + 4 | 0; //@line 22200
  HEAP32[$17 >> 2] = $8; //@line 22201
  $18 = $ReallocAsyncCtx6 + 8 | 0; //@line 22202
  HEAP32[$18 >> 2] = $4; //@line 22203
  $19 = $ReallocAsyncCtx6 + 12 | 0; //@line 22204
  HEAP32[$19 >> 2] = $6; //@line 22205
  $20 = $ReallocAsyncCtx6 + 16 | 0; //@line 22206
  HEAP32[$20 >> 2] = $2; //@line 22207
  sp = STACKTOP; //@line 22208
  return;
 } else {
  $22 = 7 << $15 + -4; //@line 22212
  $23 = ___muldi3($22 | 0, 0, 1e6, 0) | 0; //@line 22213
  $24 = tempRet0; //@line 22214
  $25 = _i64Add($8 | 0, 0, -1, -1) | 0; //@line 22215
  $27 = _i64Add($25 | 0, tempRet0 | 0, $23 | 0, $24 | 0) | 0; //@line 22217
  $29 = ___udivdi3($27 | 0, tempRet0 | 0, $8 | 0, 0) | 0; //@line 22219
  $30 = tempRet0; //@line 22220
  $31 = HEAP32[$4 >> 2] | 0; //@line 22221
  HEAP32[$31 >> 2] = 0; //@line 22222
  HEAP32[$31 + 4 >> 2] = 0; //@line 22224
  $35 = HEAP32[(HEAP32[$6 >> 2] | 0) + 4 >> 2] | 0; //@line 22227
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(40) | 0; //@line 22228
  $36 = FUNCTION_TABLE_i[$35 & 7]() | 0; //@line 22229
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 615; //@line 22232
   $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 22233
   HEAP32[$37 >> 2] = $4; //@line 22234
   $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 22235
   HEAP32[$38 >> 2] = $8; //@line 22236
   $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 22237
   HEAP32[$39 >> 2] = $15; //@line 22238
   $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 22239
   HEAP32[$40 >> 2] = $22; //@line 22240
   $41 = $ReallocAsyncCtx3 + 24 | 0; //@line 22241
   $42 = $41; //@line 22242
   $43 = $42; //@line 22243
   HEAP32[$43 >> 2] = $29; //@line 22244
   $44 = $42 + 4 | 0; //@line 22245
   $45 = $44; //@line 22246
   HEAP32[$45 >> 2] = $30; //@line 22247
   $46 = $ReallocAsyncCtx3 + 32 | 0; //@line 22248
   HEAP32[$46 >> 2] = $6; //@line 22249
   $47 = $ReallocAsyncCtx3 + 36 | 0; //@line 22250
   HEAP32[$47 >> 2] = $2; //@line 22251
   sp = STACKTOP; //@line 22252
   return;
  }
  HEAP32[___async_retval >> 2] = $36; //@line 22256
  ___async_unwind = 0; //@line 22257
  HEAP32[$ReallocAsyncCtx3 >> 2] = 615; //@line 22258
  $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 22259
  HEAP32[$37 >> 2] = $4; //@line 22260
  $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 22261
  HEAP32[$38 >> 2] = $8; //@line 22262
  $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 22263
  HEAP32[$39 >> 2] = $15; //@line 22264
  $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 22265
  HEAP32[$40 >> 2] = $22; //@line 22266
  $41 = $ReallocAsyncCtx3 + 24 | 0; //@line 22267
  $42 = $41; //@line 22268
  $43 = $42; //@line 22269
  HEAP32[$43 >> 2] = $29; //@line 22270
  $44 = $42 + 4 | 0; //@line 22271
  $45 = $44; //@line 22272
  HEAP32[$45 >> 2] = $30; //@line 22273
  $46 = $ReallocAsyncCtx3 + 32 | 0; //@line 22274
  HEAP32[$46 >> 2] = $6; //@line 22275
  $47 = $ReallocAsyncCtx3 + 36 | 0; //@line 22276
  HEAP32[$47 >> 2] = $2; //@line 22277
  sp = STACKTOP; //@line 22278
  return;
 }
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_413($0) {
 $0 = $0 | 0;
 var $$3$off0230 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $20 = 0, $22 = 0, $29 = 0, $35 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $49 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $59 = 0, $6 = 0, $62 = 0, $64 = 0, $65 = 0, $8 = 0, $ReallocAsyncCtx26 = 0, $ReallocAsyncCtx27 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 31750
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31752
 $4 = HEAP8[$0 + 8 >> 0] & 1; //@line 31755
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31757
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31759
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31761
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31763
 $14 = HEAP8[$0 + 28 >> 0] | 0; //@line 31765
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 31767
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 31771
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 31773
 do {
  if (!(HEAP32[___async_retval >> 2] | 0)) {
   if (__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($22) | 0) {
    _mbed_tracef(16, 13728, 13889, $16); //@line 31781
    HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($20) | 0) >> 2] = 4; //@line 31783
    $29 = $6 + 944 | 0; //@line 31784
    HEAP8[$29 >> 0] = HEAP8[$29 >> 0] | 16; //@line 31787
    __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($22); //@line 31788
    if ($4) {
     $$3$off0230 = 6; //@line 31790
     break;
    } else {
     label = 7; //@line 31793
     break;
    }
   } else {
    if ($4) {
     $$3$off0230 = 6; //@line 31798
     break;
    } else {
     label = 7; //@line 31801
     break;
    }
   }
  } else {
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($2) | 0) + 4 >> 2] = 1; //@line 31808
   if ($4) {
    $$3$off0230 = 6; //@line 31810
   } else {
    label = 7; //@line 31812
   }
  }
 } while (0);
 if ((label | 0) == 7) {
  $35 = (__ZN11LoRaMacMcps16get_confirmationEv($2) | 0) + 10 | 0; //@line 31820
  if ($14 & 32) {
   HEAP8[$35 >> 0] = 1; //@line 31822
   HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($2) | 0) + 28 >> 0] = 1; //@line 31825
   $38 = HEAP32[$8 >> 2] | 0; //@line 31826
   $ReallocAsyncCtx27 = _emscripten_realloc_async_context(20) | 0; //@line 31828
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($38, $6 + 1076 | 0); //@line 31829
   if (___async) {
    HEAP32[$ReallocAsyncCtx27 >> 2] = 344; //@line 31832
    $40 = $ReallocAsyncCtx27 + 4 | 0; //@line 31833
    HEAP32[$40 >> 2] = $6; //@line 31834
    $41 = $ReallocAsyncCtx27 + 8 | 0; //@line 31835
    HEAP32[$41 >> 2] = $8; //@line 31836
    $42 = $ReallocAsyncCtx27 + 12 | 0; //@line 31837
    HEAP32[$42 >> 2] = $10; //@line 31838
    $43 = $ReallocAsyncCtx27 + 16 | 0; //@line 31839
    HEAP32[$43 >> 2] = $12; //@line 31840
    sp = STACKTOP; //@line 31841
    return;
   }
   ___async_unwind = 0; //@line 31844
   HEAP32[$ReallocAsyncCtx27 >> 2] = 344; //@line 31845
   $40 = $ReallocAsyncCtx27 + 4 | 0; //@line 31846
   HEAP32[$40 >> 2] = $6; //@line 31847
   $41 = $ReallocAsyncCtx27 + 8 | 0; //@line 31848
   HEAP32[$41 >> 2] = $8; //@line 31849
   $42 = $ReallocAsyncCtx27 + 12 | 0; //@line 31850
   HEAP32[$42 >> 2] = $10; //@line 31851
   $43 = $ReallocAsyncCtx27 + 16 | 0; //@line 31852
   HEAP32[$43 >> 2] = $12; //@line 31853
   sp = STACKTOP; //@line 31854
   return;
  }
  HEAP8[$35 >> 0] = 0; //@line 31857
  if ((HEAPU8[$6 + 895 >> 0] | 0) > (HEAPU8[$6 + 894 >> 0] | 0)) {
   $49 = HEAP32[$8 >> 2] | 0; //@line 31864
   $ReallocAsyncCtx26 = _emscripten_realloc_async_context(20) | 0; //@line 31866
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($49, $6 + 1076 | 0); //@line 31867
   if (___async) {
    HEAP32[$ReallocAsyncCtx26 >> 2] = 345; //@line 31870
    $51 = $ReallocAsyncCtx26 + 4 | 0; //@line 31871
    HEAP32[$51 >> 2] = $6; //@line 31872
    $52 = $ReallocAsyncCtx26 + 8 | 0; //@line 31873
    HEAP32[$52 >> 2] = $8; //@line 31874
    $53 = $ReallocAsyncCtx26 + 12 | 0; //@line 31875
    HEAP32[$53 >> 2] = $10; //@line 31876
    $54 = $ReallocAsyncCtx26 + 16 | 0; //@line 31877
    HEAP32[$54 >> 2] = $12; //@line 31878
    sp = STACKTOP; //@line 31879
    return;
   }
   ___async_unwind = 0; //@line 31882
   HEAP32[$ReallocAsyncCtx26 >> 2] = 345; //@line 31883
   $51 = $ReallocAsyncCtx26 + 4 | 0; //@line 31884
   HEAP32[$51 >> 2] = $6; //@line 31885
   $52 = $ReallocAsyncCtx26 + 8 | 0; //@line 31886
   HEAP32[$52 >> 2] = $8; //@line 31887
   $53 = $ReallocAsyncCtx26 + 12 | 0; //@line 31888
   HEAP32[$53 >> 2] = $10; //@line 31889
   $54 = $ReallocAsyncCtx26 + 16 | 0; //@line 31890
   HEAP32[$54 >> 2] = $12; //@line 31891
   sp = STACKTOP; //@line 31892
   return;
  } else {
   $$3$off0230 = 2; //@line 31895
  }
 }
 $55 = $6 + 944 | 0; //@line 31898
 HEAP8[$55 >> 0] = $$3$off0230 | HEAP8[$55 >> 0] & -7; //@line 31902
 $59 = $6 + 944 | 0; //@line 31903
 HEAP8[$59 >> 0] = HEAP8[$59 >> 0] | 32; //@line 31906
 $62 = HEAP32[$8 >> 2] | 0; //@line 31907
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 31909
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($62, $6 + 996 | 0, 1); //@line 31910
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 352; //@line 31913
  $64 = $ReallocAsyncCtx5 + 4 | 0; //@line 31914
  HEAP32[$64 >> 2] = $10; //@line 31915
  $65 = $ReallocAsyncCtx5 + 8 | 0; //@line 31916
  HEAP32[$65 >> 2] = $12; //@line 31917
  sp = STACKTOP; //@line 31918
  return;
 }
 ___async_unwind = 0; //@line 31921
 HEAP32[$ReallocAsyncCtx5 >> 2] = 352; //@line 31922
 $64 = $ReallocAsyncCtx5 + 4 | 0; //@line 31923
 HEAP32[$64 >> 2] = $10; //@line 31924
 $65 = $ReallocAsyncCtx5 + 8 | 0; //@line 31925
 HEAP32[$65 >> 2] = $12; //@line 31926
 sp = STACKTOP; //@line 31927
 return;
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_318($0) {
 $0 = $0 | 0;
 var $$pre$i$i50 = 0, $12 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $6 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 14500
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14502
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14504
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14506
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 14512
 $$pre$i$i50 = HEAP32[HEAP32[$0 + 16 >> 2] >> 2] | 0; //@line 14513
 HEAP32[HEAP32[$0 + 20 >> 2] >> 2] = $$pre$i$i50; //@line 14515
 if ($$pre$i$i50 | 0) {
  $16 = HEAP32[$$pre$i$i50 + 8 >> 2] | 0; //@line 14519
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 14520
  FUNCTION_TABLE_vi[$16 & 1023]($2); //@line 14521
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 494; //@line 14524
   $17 = $ReallocAsyncCtx12 + 4 | 0; //@line 14525
   HEAP32[$17 >> 2] = $2; //@line 14526
   $18 = $ReallocAsyncCtx12 + 8 | 0; //@line 14527
   HEAP32[$18 >> 2] = $4; //@line 14528
   $19 = $ReallocAsyncCtx12 + 12 | 0; //@line 14529
   HEAP32[$19 >> 2] = $6; //@line 14530
   $20 = $ReallocAsyncCtx12 + 16 | 0; //@line 14531
   HEAP32[$20 >> 2] = $12; //@line 14532
   sp = STACKTOP; //@line 14533
   return;
  }
  ___async_unwind = 0; //@line 14536
  HEAP32[$ReallocAsyncCtx12 >> 2] = 494; //@line 14537
  $17 = $ReallocAsyncCtx12 + 4 | 0; //@line 14538
  HEAP32[$17 >> 2] = $2; //@line 14539
  $18 = $ReallocAsyncCtx12 + 8 | 0; //@line 14540
  HEAP32[$18 >> 2] = $4; //@line 14541
  $19 = $ReallocAsyncCtx12 + 12 | 0; //@line 14542
  HEAP32[$19 >> 2] = $6; //@line 14543
  $20 = $ReallocAsyncCtx12 + 16 | 0; //@line 14544
  HEAP32[$20 >> 2] = $12; //@line 14545
  sp = STACKTOP; //@line 14546
  return;
 }
 $21 = $4 + 12 | 0; //@line 14549
 HEAP32[$4 >> 2] = 495; //@line 14550
 HEAP32[$4 + 4 >> 2] = 0; //@line 14552
 HEAP32[$4 + 8 >> 2] = $6; //@line 14554
 HEAP32[$21 >> 2] = 912; //@line 14555
 $22 = $6 + 1260 | 0; //@line 14556
 if (($22 | 0) == ($4 | 0)) {
  $41 = HEAP32[230] | 0; //@line 14560
  $ReallocAsyncCtx15 = _emscripten_realloc_async_context(12) | 0; //@line 14561
  FUNCTION_TABLE_vi[$41 & 1023]($4); //@line 14562
  if (___async) {
   HEAP32[$ReallocAsyncCtx15 >> 2] = 498; //@line 14565
   $42 = $ReallocAsyncCtx15 + 4 | 0; //@line 14566
   HEAP32[$42 >> 2] = $4; //@line 14567
   $43 = $ReallocAsyncCtx15 + 8 | 0; //@line 14568
   HEAP32[$43 >> 2] = $12; //@line 14569
   sp = STACKTOP; //@line 14570
   return;
  }
  ___async_unwind = 0; //@line 14573
  HEAP32[$ReallocAsyncCtx15 >> 2] = 498; //@line 14574
  $42 = $ReallocAsyncCtx15 + 4 | 0; //@line 14575
  HEAP32[$42 >> 2] = $4; //@line 14576
  $43 = $ReallocAsyncCtx15 + 8 | 0; //@line 14577
  HEAP32[$43 >> 2] = $12; //@line 14578
  sp = STACKTOP; //@line 14579
  return;
 }
 $24 = $6 + 1272 | 0; //@line 14582
 $25 = HEAP32[$24 >> 2] | 0; //@line 14583
 if (!$25) {
  $35 = HEAP32[229] | 0; //@line 14587
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(20) | 0; //@line 14588
  FUNCTION_TABLE_vii[$35 & 31]($22, $4); //@line 14589
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 497; //@line 14592
   $36 = $ReallocAsyncCtx14 + 4 | 0; //@line 14593
   HEAP32[$36 >> 2] = $21; //@line 14594
   $37 = $ReallocAsyncCtx14 + 8 | 0; //@line 14595
   HEAP32[$37 >> 2] = $24; //@line 14596
   $38 = $ReallocAsyncCtx14 + 12 | 0; //@line 14597
   HEAP32[$38 >> 2] = $4; //@line 14598
   $39 = $ReallocAsyncCtx14 + 16 | 0; //@line 14599
   HEAP32[$39 >> 2] = $12; //@line 14600
   sp = STACKTOP; //@line 14601
   return;
  }
  ___async_unwind = 0; //@line 14604
  HEAP32[$ReallocAsyncCtx14 >> 2] = 497; //@line 14605
  $36 = $ReallocAsyncCtx14 + 4 | 0; //@line 14606
  HEAP32[$36 >> 2] = $21; //@line 14607
  $37 = $ReallocAsyncCtx14 + 8 | 0; //@line 14608
  HEAP32[$37 >> 2] = $24; //@line 14609
  $38 = $ReallocAsyncCtx14 + 12 | 0; //@line 14610
  HEAP32[$38 >> 2] = $4; //@line 14611
  $39 = $ReallocAsyncCtx14 + 16 | 0; //@line 14612
  HEAP32[$39 >> 2] = $12; //@line 14613
  sp = STACKTOP; //@line 14614
  return;
 } else {
  $28 = HEAP32[$25 + 8 >> 2] | 0; //@line 14618
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(24) | 0; //@line 14619
  FUNCTION_TABLE_vi[$28 & 1023]($22); //@line 14620
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 496; //@line 14623
   $29 = $ReallocAsyncCtx13 + 4 | 0; //@line 14624
   HEAP32[$29 >> 2] = $21; //@line 14625
   $30 = $ReallocAsyncCtx13 + 8 | 0; //@line 14626
   HEAP32[$30 >> 2] = $24; //@line 14627
   $31 = $ReallocAsyncCtx13 + 12 | 0; //@line 14628
   HEAP32[$31 >> 2] = $22; //@line 14629
   $32 = $ReallocAsyncCtx13 + 16 | 0; //@line 14630
   HEAP32[$32 >> 2] = $4; //@line 14631
   $33 = $ReallocAsyncCtx13 + 20 | 0; //@line 14632
   HEAP32[$33 >> 2] = $12; //@line 14633
   sp = STACKTOP; //@line 14634
   return;
  }
  ___async_unwind = 0; //@line 14637
  HEAP32[$ReallocAsyncCtx13 >> 2] = 496; //@line 14638
  $29 = $ReallocAsyncCtx13 + 4 | 0; //@line 14639
  HEAP32[$29 >> 2] = $21; //@line 14640
  $30 = $ReallocAsyncCtx13 + 8 | 0; //@line 14641
  HEAP32[$30 >> 2] = $24; //@line 14642
  $31 = $ReallocAsyncCtx13 + 12 | 0; //@line 14643
  HEAP32[$31 >> 2] = $22; //@line 14644
  $32 = $ReallocAsyncCtx13 + 16 | 0; //@line 14645
  HEAP32[$32 >> 2] = $4; //@line 14646
  $33 = $ReallocAsyncCtx13 + 20 | 0; //@line 14647
  HEAP32[$33 >> 2] = $12; //@line 14648
  sp = STACKTOP; //@line 14649
  return;
 }
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_411($0) {
 $0 = $0 | 0;
 var $$3$off0230 = 0, $10 = 0, $12 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $29 = 0, $35 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $49 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $59 = 0, $6 = 0, $62 = 0, $64 = 0, $65 = 0, $8 = 0, $ReallocAsyncCtx26 = 0, $ReallocAsyncCtx27 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 31364
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31366
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31368
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31370
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31372
 $10 = HEAP8[$0 + 20 >> 0] & 1; //@line 31375
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31377
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 31381
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 31383
 $20 = HEAP8[$0 + 40 >> 0] | 0; //@line 31385
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 31387
 do {
  if (!(HEAP32[___async_retval >> 2] | 0)) {
   if (__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($18) | 0) {
    _mbed_tracef(16, 13728, 13889, $12); //@line 31395
    HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($16) | 0) >> 2] = 4; //@line 31397
    $29 = $2 + 944 | 0; //@line 31398
    HEAP8[$29 >> 0] = HEAP8[$29 >> 0] | 16; //@line 31401
    __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($18); //@line 31402
    if ($10) {
     $$3$off0230 = 6; //@line 31404
     break;
    } else {
     label = 7; //@line 31407
     break;
    }
   } else {
    if ($10) {
     $$3$off0230 = 6; //@line 31412
     break;
    } else {
     label = 7; //@line 31415
     break;
    }
   }
  } else {
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($22) | 0) + 4 >> 2] = 1; //@line 31422
   if ($10) {
    $$3$off0230 = 6; //@line 31424
   } else {
    label = 7; //@line 31426
   }
  }
 } while (0);
 if ((label | 0) == 7) {
  $35 = (__ZN11LoRaMacMcps16get_confirmationEv($22) | 0) + 10 | 0; //@line 31434
  if ($20 & 32) {
   HEAP8[$35 >> 0] = 1; //@line 31436
   HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($22) | 0) + 28 >> 0] = 1; //@line 31439
   $38 = HEAP32[$4 >> 2] | 0; //@line 31440
   $ReallocAsyncCtx27 = _emscripten_realloc_async_context(20) | 0; //@line 31442
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($38, $2 + 1076 | 0); //@line 31443
   if (___async) {
    HEAP32[$ReallocAsyncCtx27 >> 2] = 344; //@line 31446
    $40 = $ReallocAsyncCtx27 + 4 | 0; //@line 31447
    HEAP32[$40 >> 2] = $2; //@line 31448
    $41 = $ReallocAsyncCtx27 + 8 | 0; //@line 31449
    HEAP32[$41 >> 2] = $4; //@line 31450
    $42 = $ReallocAsyncCtx27 + 12 | 0; //@line 31451
    HEAP32[$42 >> 2] = $6; //@line 31452
    $43 = $ReallocAsyncCtx27 + 16 | 0; //@line 31453
    HEAP32[$43 >> 2] = $8; //@line 31454
    sp = STACKTOP; //@line 31455
    return;
   }
   ___async_unwind = 0; //@line 31458
   HEAP32[$ReallocAsyncCtx27 >> 2] = 344; //@line 31459
   $40 = $ReallocAsyncCtx27 + 4 | 0; //@line 31460
   HEAP32[$40 >> 2] = $2; //@line 31461
   $41 = $ReallocAsyncCtx27 + 8 | 0; //@line 31462
   HEAP32[$41 >> 2] = $4; //@line 31463
   $42 = $ReallocAsyncCtx27 + 12 | 0; //@line 31464
   HEAP32[$42 >> 2] = $6; //@line 31465
   $43 = $ReallocAsyncCtx27 + 16 | 0; //@line 31466
   HEAP32[$43 >> 2] = $8; //@line 31467
   sp = STACKTOP; //@line 31468
   return;
  }
  HEAP8[$35 >> 0] = 0; //@line 31471
  if ((HEAPU8[$2 + 895 >> 0] | 0) > (HEAPU8[$2 + 894 >> 0] | 0)) {
   $49 = HEAP32[$4 >> 2] | 0; //@line 31478
   $ReallocAsyncCtx26 = _emscripten_realloc_async_context(20) | 0; //@line 31480
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($49, $2 + 1076 | 0); //@line 31481
   if (___async) {
    HEAP32[$ReallocAsyncCtx26 >> 2] = 345; //@line 31484
    $51 = $ReallocAsyncCtx26 + 4 | 0; //@line 31485
    HEAP32[$51 >> 2] = $2; //@line 31486
    $52 = $ReallocAsyncCtx26 + 8 | 0; //@line 31487
    HEAP32[$52 >> 2] = $4; //@line 31488
    $53 = $ReallocAsyncCtx26 + 12 | 0; //@line 31489
    HEAP32[$53 >> 2] = $6; //@line 31490
    $54 = $ReallocAsyncCtx26 + 16 | 0; //@line 31491
    HEAP32[$54 >> 2] = $8; //@line 31492
    sp = STACKTOP; //@line 31493
    return;
   }
   ___async_unwind = 0; //@line 31496
   HEAP32[$ReallocAsyncCtx26 >> 2] = 345; //@line 31497
   $51 = $ReallocAsyncCtx26 + 4 | 0; //@line 31498
   HEAP32[$51 >> 2] = $2; //@line 31499
   $52 = $ReallocAsyncCtx26 + 8 | 0; //@line 31500
   HEAP32[$52 >> 2] = $4; //@line 31501
   $53 = $ReallocAsyncCtx26 + 12 | 0; //@line 31502
   HEAP32[$53 >> 2] = $6; //@line 31503
   $54 = $ReallocAsyncCtx26 + 16 | 0; //@line 31504
   HEAP32[$54 >> 2] = $8; //@line 31505
   sp = STACKTOP; //@line 31506
   return;
  } else {
   $$3$off0230 = 2; //@line 31509
  }
 }
 $55 = $2 + 944 | 0; //@line 31512
 HEAP8[$55 >> 0] = $$3$off0230 | HEAP8[$55 >> 0] & -7; //@line 31516
 $59 = $2 + 944 | 0; //@line 31517
 HEAP8[$59 >> 0] = HEAP8[$59 >> 0] | 32; //@line 31520
 $62 = HEAP32[$4 >> 2] | 0; //@line 31521
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 31523
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($62, $2 + 996 | 0, 1); //@line 31524
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 352; //@line 31527
  $64 = $ReallocAsyncCtx5 + 4 | 0; //@line 31528
  HEAP32[$64 >> 2] = $6; //@line 31529
  $65 = $ReallocAsyncCtx5 + 8 | 0; //@line 31530
  HEAP32[$65 >> 2] = $8; //@line 31531
  sp = STACKTOP; //@line 31532
  return;
 }
 ___async_unwind = 0; //@line 31535
 HEAP32[$ReallocAsyncCtx5 >> 2] = 352; //@line 31536
 $64 = $ReallocAsyncCtx5 + 4 | 0; //@line 31537
 HEAP32[$64 >> 2] = $6; //@line 31538
 $65 = $ReallocAsyncCtx5 + 8 | 0; //@line 31539
 HEAP32[$65 >> 2] = $8; //@line 31540
 sp = STACKTOP; //@line 31541
 return;
}
function _mbedtls_cipher_free($0) {
 $0 = $0 | 0;
 var $101 = 0, $105 = 0, $109 = 0, $113 = 0, $2 = 0, $3 = 0, $42 = 0, $48 = 0, $53 = 0, $57 = 0, $61 = 0, $65 = 0, $69 = 0, $73 = 0, $77 = 0, $81 = 0, $85 = 0, $89 = 0, $93 = 0, $97 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2243
 if (!$0) {
  return;
 }
 $2 = $0 + 64 | 0; //@line 2248
 $3 = HEAP32[$2 >> 2] | 0; //@line 2249
 if ($3 | 0) {
  HEAP8[$3 >> 0] = 0; //@line 2253
  HEAP8[$3 + 1 >> 0] = 0; //@line 2255
  HEAP8[$3 + 2 >> 0] = 0; //@line 2257
  HEAP8[$3 + 3 >> 0] = 0; //@line 2259
  HEAP8[$3 + 4 >> 0] = 0; //@line 2261
  HEAP8[$3 + 5 >> 0] = 0; //@line 2263
  HEAP8[$3 + 6 >> 0] = 0; //@line 2265
  HEAP8[$3 + 7 >> 0] = 0; //@line 2267
  HEAP8[$3 + 8 >> 0] = 0; //@line 2269
  HEAP8[$3 + 9 >> 0] = 0; //@line 2271
  HEAP8[$3 + 10 >> 0] = 0; //@line 2273
  HEAP8[$3 + 11 >> 0] = 0; //@line 2275
  HEAP8[$3 + 12 >> 0] = 0; //@line 2277
  HEAP8[$3 + 13 >> 0] = 0; //@line 2279
  HEAP8[$3 + 14 >> 0] = 0; //@line 2281
  HEAP8[$3 + 15 >> 0] = 0; //@line 2283
  HEAP8[$3 + 16 >> 0] = 0; //@line 2285
  HEAP8[$3 + 17 >> 0] = 0; //@line 2287
  HEAP8[$3 + 18 >> 0] = 0; //@line 2289
  HEAP8[$3 + 19 >> 0] = 0; //@line 2291
  HEAP8[$3 + 20 >> 0] = 0; //@line 2293
  HEAP8[$3 + 21 >> 0] = 0; //@line 2295
  HEAP8[$3 + 22 >> 0] = 0; //@line 2297
  HEAP8[$3 + 23 >> 0] = 0; //@line 2299
  HEAP8[$3 + 24 >> 0] = 0; //@line 2301
  HEAP8[$3 + 25 >> 0] = 0; //@line 2303
  HEAP8[$3 + 26 >> 0] = 0; //@line 2305
  HEAP8[$3 + 27 >> 0] = 0; //@line 2307
  HEAP8[$3 + 28 >> 0] = 0; //@line 2309
  HEAP8[$3 + 29 >> 0] = 0; //@line 2311
  HEAP8[$3 + 30 >> 0] = 0; //@line 2313
  HEAP8[$3 + 31 >> 0] = 0; //@line 2315
  HEAP8[$3 + 32 >> 0] = 0; //@line 2317
  HEAP8[$3 + 33 >> 0] = 0; //@line 2319
  HEAP8[$3 + 34 >> 0] = 0; //@line 2321
  HEAP8[$3 + 35 >> 0] = 0; //@line 2322
  _free(HEAP32[$2 >> 2] | 0); //@line 2324
 }
 $42 = HEAP32[$0 + 60 >> 2] | 0; //@line 2327
 do {
  if ($42 | 0) {
   $48 = HEAP32[(HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] | 0) + 24 >> 2] | 0; //@line 2335
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2336
   FUNCTION_TABLE_vi[$48 & 1023]($42); //@line 2337
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 586; //@line 2340
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2342
    sp = STACKTOP; //@line 2343
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 2346
    break;
   }
  }
 } while (0);
 HEAP8[$0 >> 0] = 0; //@line 2352
 HEAP8[$0 + 1 >> 0] = 0; //@line 2354
 HEAP8[$0 + 2 >> 0] = 0; //@line 2356
 $53 = $0 + 4 | 0; //@line 2357
 HEAP8[$0 + 3 >> 0] = 0; //@line 2358
 HEAP8[$53 >> 0] = 0; //@line 2360
 HEAP8[$53 + 1 >> 0] = 0; //@line 2362
 HEAP8[$53 + 2 >> 0] = 0; //@line 2364
 $57 = $53 + 4 | 0; //@line 2365
 HEAP8[$53 + 3 >> 0] = 0; //@line 2366
 HEAP8[$57 >> 0] = 0; //@line 2368
 HEAP8[$57 + 1 >> 0] = 0; //@line 2370
 HEAP8[$57 + 2 >> 0] = 0; //@line 2372
 $61 = $53 + 8 | 0; //@line 2373
 HEAP8[$57 + 3 >> 0] = 0; //@line 2374
 HEAP8[$61 >> 0] = 0; //@line 2376
 HEAP8[$61 + 1 >> 0] = 0; //@line 2378
 HEAP8[$61 + 2 >> 0] = 0; //@line 2380
 $65 = $53 + 12 | 0; //@line 2381
 HEAP8[$61 + 3 >> 0] = 0; //@line 2382
 HEAP8[$65 >> 0] = 0; //@line 2384
 HEAP8[$65 + 1 >> 0] = 0; //@line 2386
 HEAP8[$65 + 2 >> 0] = 0; //@line 2388
 $69 = $53 + 16 | 0; //@line 2389
 HEAP8[$65 + 3 >> 0] = 0; //@line 2390
 HEAP8[$69 >> 0] = 0; //@line 2392
 HEAP8[$69 + 1 >> 0] = 0; //@line 2394
 HEAP8[$69 + 2 >> 0] = 0; //@line 2396
 $73 = $53 + 20 | 0; //@line 2397
 HEAP8[$69 + 3 >> 0] = 0; //@line 2398
 HEAP8[$73 >> 0] = 0; //@line 2400
 HEAP8[$73 + 1 >> 0] = 0; //@line 2402
 HEAP8[$73 + 2 >> 0] = 0; //@line 2404
 $77 = $53 + 24 | 0; //@line 2405
 HEAP8[$73 + 3 >> 0] = 0; //@line 2406
 HEAP8[$77 >> 0] = 0; //@line 2408
 HEAP8[$77 + 1 >> 0] = 0; //@line 2410
 HEAP8[$77 + 2 >> 0] = 0; //@line 2412
 $81 = $53 + 28 | 0; //@line 2413
 HEAP8[$77 + 3 >> 0] = 0; //@line 2414
 HEAP8[$81 >> 0] = 0; //@line 2416
 HEAP8[$81 + 1 >> 0] = 0; //@line 2418
 HEAP8[$81 + 2 >> 0] = 0; //@line 2420
 $85 = $53 + 32 | 0; //@line 2421
 HEAP8[$81 + 3 >> 0] = 0; //@line 2422
 HEAP8[$85 >> 0] = 0; //@line 2424
 HEAP8[$85 + 1 >> 0] = 0; //@line 2426
 HEAP8[$85 + 2 >> 0] = 0; //@line 2428
 $89 = $53 + 36 | 0; //@line 2429
 HEAP8[$85 + 3 >> 0] = 0; //@line 2430
 HEAP8[$89 >> 0] = 0; //@line 2432
 HEAP8[$89 + 1 >> 0] = 0; //@line 2434
 HEAP8[$89 + 2 >> 0] = 0; //@line 2436
 $93 = $53 + 40 | 0; //@line 2437
 HEAP8[$89 + 3 >> 0] = 0; //@line 2438
 HEAP8[$93 >> 0] = 0; //@line 2440
 HEAP8[$93 + 1 >> 0] = 0; //@line 2442
 HEAP8[$93 + 2 >> 0] = 0; //@line 2444
 $97 = $53 + 44 | 0; //@line 2445
 HEAP8[$93 + 3 >> 0] = 0; //@line 2446
 HEAP8[$97 >> 0] = 0; //@line 2448
 HEAP8[$97 + 1 >> 0] = 0; //@line 2450
 HEAP8[$97 + 2 >> 0] = 0; //@line 2452
 $101 = $53 + 48 | 0; //@line 2453
 HEAP8[$97 + 3 >> 0] = 0; //@line 2454
 HEAP8[$101 >> 0] = 0; //@line 2456
 HEAP8[$101 + 1 >> 0] = 0; //@line 2458
 HEAP8[$101 + 2 >> 0] = 0; //@line 2460
 $105 = $53 + 52 | 0; //@line 2461
 HEAP8[$101 + 3 >> 0] = 0; //@line 2462
 HEAP8[$105 >> 0] = 0; //@line 2464
 HEAP8[$105 + 1 >> 0] = 0; //@line 2466
 HEAP8[$105 + 2 >> 0] = 0; //@line 2468
 $109 = $53 + 56 | 0; //@line 2469
 HEAP8[$105 + 3 >> 0] = 0; //@line 2470
 HEAP8[$109 >> 0] = 0; //@line 2472
 HEAP8[$109 + 1 >> 0] = 0; //@line 2474
 HEAP8[$109 + 2 >> 0] = 0; //@line 2476
 $113 = $53 + 60 | 0; //@line 2477
 HEAP8[$109 + 3 >> 0] = 0; //@line 2478
 HEAP8[$113 >> 0] = 0; //@line 2480
 HEAP8[$113 + 1 >> 0] = 0; //@line 2482
 HEAP8[$113 + 2 >> 0] = 0; //@line 2484
 HEAP8[$113 + 3 >> 0] = 0; //@line 2485
 return;
}
function __ZN12LoRaWANStackC2Ev($0) {
 $0 = $0 | 0;
 var $$pre$i$i45 = 0, $$pre$i$i59 = 0, $$pre$phiZ2D = 0, $$pre106 = 0, $1 = 0, $13 = 0, $14 = 0, $15 = 0, $21 = 0, $22 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $33 = 0, $4 = 0, $40 = 0, $41 = 0, $48 = 0, $49 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 5630
 STACKTOP = STACKTOP + 16 | 0; //@line 5631
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 5631
 $1 = sp; //@line 5632
 __ZN18LoRaWANTimeHandlerC2Ev($0); //@line 5633
 __ZN7LoRaMacC2ER18LoRaWANTimeHandler($0 + 4 | 0, $0); //@line 5635
 __ZN12LoRaPHYEU868C2ER18LoRaWANTimeHandler($0 + 1336 | 0, $0); //@line 5637
 $4 = $0 + 2284 | 0; //@line 5638
 $5 = $0 + 1828 | 0; //@line 5639
 dest = $5 + 16 | 0; //@line 5641
 stop = dest + 88 | 0; //@line 5641
 do {
  HEAP32[dest >> 2] = 0; //@line 5641
  dest = dest + 4 | 0; //@line 5641
 } while ((dest | 0) < (stop | 0));
 HEAP8[$4 >> 0] = 1; //@line 5642
 HEAP8[$0 + 2286 >> 0] = 1; //@line 5645
 HEAP32[$0 + 2288 >> 2] = 0; //@line 5647
 HEAP8[$0 + 2285 >> 0] = 15; //@line 5648
 _memset($0 + 1932 | 0, 0, 352) | 0; //@line 5650
 HEAP32[$0 + 1812 >> 2] = 22; //@line 5653
 HEAP32[$0 + 1816 >> 2] = 0; //@line 5655
 HEAP32[$0 + 1820 >> 2] = $0; //@line 5657
 HEAP32[$0 + 1824 >> 2] = 864; //@line 5658
 HEAP32[$1 >> 2] = 23; //@line 5660
 HEAP32[$1 + 4 >> 2] = 0; //@line 5662
 HEAP32[$1 + 8 >> 2] = $0; //@line 5664
 HEAP32[$1 + 12 >> 2] = 876; //@line 5665
 $13 = $0 + 1840 | 0; //@line 5666
 HEAP32[$5 >> 2] = HEAP32[$1 >> 2]; //@line 5667
 HEAP32[$5 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 5667
 HEAP32[$5 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 5667
 HEAP32[$13 >> 2] = 876; //@line 5668
 $14 = $1 + 12 | 0; //@line 5669
 HEAP32[$1 >> 2] = 24; //@line 5670
 HEAP32[$1 + 4 >> 2] = 0; //@line 5672
 HEAP32[$1 + 8 >> 2] = $0; //@line 5674
 HEAP32[$14 >> 2] = 888; //@line 5675
 $15 = $0 + 1844 | 0; //@line 5676
 if (($15 | 0) == ($1 | 0)) {
  $21 = 888; //@line 5679
  label = 3; //@line 5680
 } else {
  __ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv($15, $1); //@line 5683
  $$pre$i$i45 = HEAP32[$14 >> 2] | 0; //@line 5684
  HEAP32[$0 + 1856 >> 2] = $$pre$i$i45; //@line 5686
  if ($$pre$i$i45 | 0) {
   $21 = $$pre$i$i45; //@line 5689
   label = 3; //@line 5690
  }
 }
 do {
  if ((label | 0) == 3) {
   $22 = HEAP32[$21 + 8 >> 2] | 0; //@line 5696
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 5697
   FUNCTION_TABLE_vi[$22 & 1023]($1); //@line 5698
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 156; //@line 5701
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 5703
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 5705
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 5707
    sp = STACKTOP; //@line 5708
    STACKTOP = sp; //@line 5709
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 5711
    break;
   }
  }
 } while (0);
 $26 = $1 + 12 | 0; //@line 5716
 HEAP32[$1 >> 2] = 25; //@line 5717
 HEAP32[$1 + 4 >> 2] = 0; //@line 5719
 HEAP32[$1 + 8 >> 2] = $0; //@line 5721
 HEAP32[$26 >> 2] = 900; //@line 5722
 $27 = $0 + 1860 | 0; //@line 5723
 if (($27 | 0) == ($1 | 0)) {
  $48 = 900; //@line 5726
 } else {
  $29 = $0 + 1872 | 0; //@line 5728
  $30 = HEAP32[$29 >> 2] | 0; //@line 5729
  if (!$30) {
   $$pre$phiZ2D = $27; //@line 5732
   $40 = 900; //@line 5732
  } else {
   $33 = HEAP32[$30 + 8 >> 2] | 0; //@line 5735
   $AsyncCtx2 = _emscripten_alloc_async_context(20, sp) | 0; //@line 5736
   FUNCTION_TABLE_vi[$33 & 1023]($27); //@line 5737
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 157; //@line 5740
    HEAP32[$AsyncCtx2 + 4 >> 2] = $26; //@line 5742
    HEAP32[$AsyncCtx2 + 8 >> 2] = $29; //@line 5744
    HEAP32[$AsyncCtx2 + 12 >> 2] = $27; //@line 5746
    HEAP32[$AsyncCtx2 + 16 >> 2] = $1; //@line 5748
    sp = STACKTOP; //@line 5749
    STACKTOP = sp; //@line 5750
    return;
   }
   _emscripten_free_async_context($AsyncCtx2 | 0); //@line 5752
   $$pre106 = HEAP32[$26 >> 2] | 0; //@line 5753
   if (!$$pre106) {
    HEAP32[$29 >> 2] = 0; //@line 5756
    STACKTOP = sp; //@line 5757
    return;
   } else {
    $$pre$phiZ2D = $27; //@line 5759
    $40 = $$pre106; //@line 5759
   }
  }
  $41 = HEAP32[$40 + 4 >> 2] | 0; //@line 5763
  $AsyncCtx5 = _emscripten_alloc_async_context(16, sp) | 0; //@line 5764
  FUNCTION_TABLE_vii[$41 & 31]($$pre$phiZ2D, $1); //@line 5765
  if (___async) {
   HEAP32[$AsyncCtx5 >> 2] = 158; //@line 5768
   HEAP32[$AsyncCtx5 + 4 >> 2] = $26; //@line 5770
   HEAP32[$AsyncCtx5 + 8 >> 2] = $29; //@line 5772
   HEAP32[$AsyncCtx5 + 12 >> 2] = $1; //@line 5774
   sp = STACKTOP; //@line 5775
   STACKTOP = sp; //@line 5776
   return;
  }
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 5778
  $$pre$i$i59 = HEAP32[$26 >> 2] | 0; //@line 5779
  HEAP32[$29 >> 2] = $$pre$i$i59; //@line 5781
  if (!$$pre$i$i59) {
   STACKTOP = sp; //@line 5784
   return;
  } else {
   $48 = $$pre$i$i59; //@line 5786
  }
 }
 $49 = HEAP32[$48 + 8 >> 2] | 0; //@line 5790
 $AsyncCtx8 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5791
 FUNCTION_TABLE_vi[$49 & 1023]($1); //@line 5792
 if (___async) {
  HEAP32[$AsyncCtx8 >> 2] = 159; //@line 5795
  HEAP32[$AsyncCtx8 + 4 >> 2] = $1; //@line 5797
  sp = STACKTOP; //@line 5798
  STACKTOP = sp; //@line 5799
  return;
 }
 _emscripten_free_async_context($AsyncCtx8 | 0); //@line 5801
 STACKTOP = sp; //@line 5802
 return;
}
function _mbedtls_internal_aes_decrypt($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$in = 0, $$0136 = 0, $$0137 = 0, $$0138 = 0, $$0139 = 0, $$0140 = 0, $110 = 0, $130 = 0, $150 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $230 = 0, $250 = 0, $261 = 0, $268 = 0, $274 = 0, $276 = 0, $281 = 0, $288 = 0, $295 = 0, $301 = 0, $303 = 0, $308 = 0, $315 = 0, $322 = 0, $328 = 0, $329 = 0, $334 = 0, $341 = 0, $348 = 0, $354 = 0, $4 = 0;
 $4 = HEAP32[$0 + 4 >> 2] | 0; //@line 1080
 $$0$in = HEAP32[$0 >> 2] >> 1; //@line 1166
 $$0136 = $4 + 16 | 0; //@line 1166
 $$0137 = ((HEAPU8[$1 + 1 >> 0] | 0) << 8 | (HEAPU8[$1 >> 0] | 0) | (HEAPU8[$1 + 2 >> 0] | 0) << 16 | (HEAPU8[$1 + 3 >> 0] | 0) << 24) ^ HEAP32[$4 >> 2]; //@line 1166
 $$0138 = ((HEAPU8[$1 + 5 >> 0] | 0) << 8 | (HEAPU8[$1 + 4 >> 0] | 0) | (HEAPU8[$1 + 6 >> 0] | 0) << 16 | (HEAPU8[$1 + 7 >> 0] | 0) << 24) ^ HEAP32[$4 + 4 >> 2]; //@line 1166
 $$0139 = ((HEAPU8[$1 + 13 >> 0] | 0) << 8 | (HEAPU8[$1 + 12 >> 0] | 0) | (HEAPU8[$1 + 14 >> 0] | 0) << 16 | (HEAPU8[$1 + 15 >> 0] | 0) << 24) ^ HEAP32[$4 + 12 >> 2]; //@line 1166
 $$0140 = ((HEAPU8[$1 + 9 >> 0] | 0) << 8 | (HEAPU8[$1 + 8 >> 0] | 0) | (HEAPU8[$1 + 10 >> 0] | 0) << 16 | (HEAPU8[$1 + 11 >> 0] | 0) << 24) ^ HEAP32[$4 + 8 >> 2]; //@line 1166
 while (1) {
  $110 = HEAP32[1364 + (($$0137 & 255) << 2) >> 2] ^ HEAP32[$$0136 >> 2] ^ HEAP32[2388 + (($$0139 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3412 + (($$0140 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4436 + ($$0138 >>> 24 << 2) >> 2]; //@line 1188
  $130 = HEAP32[1364 + (($$0138 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 4 >> 2] ^ HEAP32[2388 + (($$0137 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3412 + (($$0139 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4436 + ($$0140 >>> 24 << 2) >> 2]; //@line 1208
  $150 = HEAP32[1364 + (($$0140 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 8 >> 2] ^ HEAP32[2388 + (($$0138 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3412 + (($$0137 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4436 + ($$0139 >>> 24 << 2) >> 2]; //@line 1228
  $170 = HEAP32[1364 + (($$0139 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 12 >> 2] ^ HEAP32[2388 + (($$0140 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3412 + (($$0138 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4436 + ($$0137 >>> 24 << 2) >> 2]; //@line 1248
  $171 = $$0136 + 20 | 0; //@line 1249
  $172 = HEAP32[$$0136 + 16 >> 2] | 0; //@line 1250
  $173 = $110 & 255; //@line 1251
  if (($$0$in | 0) <= 1) {
   break;
  }
  $230 = HEAP32[1364 + (($150 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 24 >> 2] ^ HEAP32[2388 + (($130 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3412 + (($110 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4436 + ($170 >>> 24 << 2) >> 2]; //@line 1312
  $250 = HEAP32[1364 + (($170 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 28 >> 2] ^ HEAP32[2388 + (($150 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3412 + (($130 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4436 + ($110 >>> 24 << 2) >> 2]; //@line 1332
  $$0$in = $$0$in + -1 | 0; //@line 1333
  $$0136 = $$0136 + 32 | 0; //@line 1333
  $$0137 = HEAP32[1364 + ($173 << 2) >> 2] ^ $172 ^ HEAP32[2388 + (($170 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3412 + (($150 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4436 + ($130 >>> 24 << 2) >> 2]; //@line 1333
  $$0138 = HEAP32[1364 + (($130 & 255) << 2) >> 2] ^ HEAP32[$171 >> 2] ^ HEAP32[2388 + (($110 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3412 + (($170 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4436 + ($150 >>> 24 << 2) >> 2]; //@line 1333
  $$0139 = $250; //@line 1333
  $$0140 = $230; //@line 1333
 }
 $261 = (HEAPU8[14731 + ($170 >>> 8 & 255) >> 0] | 0) << 8 ^ $172; //@line 1345
 $268 = (HEAPU8[14731 + ($150 >>> 16 & 255) >> 0] | 0) << 16 ^ $172; //@line 1352
 $274 = (HEAPU8[14731 + ($130 >>> 24) >> 0] | 0) << 24 ^ $172; //@line 1358
 $276 = HEAP32[$171 >> 2] | 0; //@line 1360
 $281 = $276 ^ (HEAPU8[14731 + ($130 & 255) >> 0] | 0); //@line 1365
 $288 = (HEAPU8[14731 + ($110 >>> 8 & 255) >> 0] | 0) << 8 ^ $276; //@line 1372
 $295 = (HEAPU8[14731 + ($170 >>> 16 & 255) >> 0] | 0) << 16 ^ $276; //@line 1379
 $301 = (HEAPU8[14731 + ($150 >>> 24) >> 0] | 0) << 24 ^ $276; //@line 1385
 $303 = HEAP32[$$0136 + 24 >> 2] | 0; //@line 1387
 $308 = $303 ^ (HEAPU8[14731 + ($150 & 255) >> 0] | 0); //@line 1392
 $315 = (HEAPU8[14731 + ($130 >>> 8 & 255) >> 0] | 0) << 8 ^ $303; //@line 1399
 $322 = (HEAPU8[14731 + ($110 >>> 16 & 255) >> 0] | 0) << 16 ^ $303; //@line 1406
 $328 = (HEAPU8[14731 + ($170 >>> 24) >> 0] | 0) << 24 ^ $303; //@line 1412
 $329 = HEAP32[$$0136 + 28 >> 2] | 0; //@line 1413
 $334 = $329 ^ (HEAPU8[14731 + ($170 & 255) >> 0] | 0); //@line 1418
 $341 = (HEAPU8[14731 + ($150 >>> 8 & 255) >> 0] | 0) << 8 ^ $329; //@line 1425
 $348 = (HEAPU8[14731 + ($130 >>> 16 & 255) >> 0] | 0) << 16 ^ $329; //@line 1432
 $354 = (HEAPU8[14731 + ($110 >>> 24) >> 0] | 0) << 24 ^ $329; //@line 1438
 HEAP8[$2 >> 0] = $172 ^ (HEAPU8[14731 + $173 >> 0] | 0); //@line 1440
 HEAP8[$2 + 1 >> 0] = $261 >>> 8; //@line 1444
 HEAP8[$2 + 2 >> 0] = $268 >>> 16; //@line 1448
 HEAP8[$2 + 3 >> 0] = $274 >>> 24; //@line 1452
 HEAP8[$2 + 4 >> 0] = $281; //@line 1455
 HEAP8[$2 + 5 >> 0] = $288 >>> 8; //@line 1459
 HEAP8[$2 + 6 >> 0] = $295 >>> 16; //@line 1463
 HEAP8[$2 + 7 >> 0] = $301 >>> 24; //@line 1467
 HEAP8[$2 + 8 >> 0] = $308; //@line 1470
 HEAP8[$2 + 9 >> 0] = $315 >>> 8; //@line 1474
 HEAP8[$2 + 10 >> 0] = $322 >>> 16; //@line 1478
 HEAP8[$2 + 11 >> 0] = $328 >>> 24; //@line 1482
 HEAP8[$2 + 12 >> 0] = $334; //@line 1485
 HEAP8[$2 + 13 >> 0] = $341 >>> 8; //@line 1489
 HEAP8[$2 + 14 >> 0] = $348 >>> 16; //@line 1493
 HEAP8[$2 + 15 >> 0] = $354 >>> 24; //@line 1497
 return 0; //@line 1498
}
function _mbedtls_internal_aes_encrypt($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$in = 0, $$0136 = 0, $$0137 = 0, $$0138 = 0, $$0139 = 0, $$0140 = 0, $110 = 0, $130 = 0, $150 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $230 = 0, $250 = 0, $261 = 0, $268 = 0, $274 = 0, $276 = 0, $281 = 0, $288 = 0, $295 = 0, $301 = 0, $303 = 0, $308 = 0, $315 = 0, $322 = 0, $328 = 0, $329 = 0, $334 = 0, $341 = 0, $348 = 0, $354 = 0, $4 = 0;
 $4 = HEAP32[$0 + 4 >> 2] | 0; //@line 633
 $$0$in = HEAP32[$0 >> 2] >> 1; //@line 719
 $$0136 = $4 + 16 | 0; //@line 719
 $$0137 = ((HEAPU8[$1 + 1 >> 0] | 0) << 8 | (HEAPU8[$1 >> 0] | 0) | (HEAPU8[$1 + 2 >> 0] | 0) << 16 | (HEAPU8[$1 + 3 >> 0] | 0) << 24) ^ HEAP32[$4 >> 2]; //@line 719
 $$0138 = ((HEAPU8[$1 + 5 >> 0] | 0) << 8 | (HEAPU8[$1 + 4 >> 0] | 0) | (HEAPU8[$1 + 6 >> 0] | 0) << 16 | (HEAPU8[$1 + 7 >> 0] | 0) << 24) ^ HEAP32[$4 + 4 >> 2]; //@line 719
 $$0139 = ((HEAPU8[$1 + 13 >> 0] | 0) << 8 | (HEAPU8[$1 + 12 >> 0] | 0) | (HEAPU8[$1 + 14 >> 0] | 0) << 16 | (HEAPU8[$1 + 15 >> 0] | 0) << 24) ^ HEAP32[$4 + 12 >> 2]; //@line 719
 $$0140 = ((HEAPU8[$1 + 9 >> 0] | 0) << 8 | (HEAPU8[$1 + 8 >> 0] | 0) | (HEAPU8[$1 + 10 >> 0] | 0) << 16 | (HEAPU8[$1 + 11 >> 0] | 0) << 24) ^ HEAP32[$4 + 8 >> 2]; //@line 719
 while (1) {
  $110 = HEAP32[5460 + (($$0137 & 255) << 2) >> 2] ^ HEAP32[$$0136 >> 2] ^ HEAP32[6484 + (($$0138 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7508 + (($$0140 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8532 + ($$0139 >>> 24 << 2) >> 2]; //@line 741
  $130 = HEAP32[5460 + (($$0138 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 4 >> 2] ^ HEAP32[6484 + (($$0140 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7508 + (($$0139 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8532 + ($$0137 >>> 24 << 2) >> 2]; //@line 761
  $150 = HEAP32[5460 + (($$0140 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 8 >> 2] ^ HEAP32[6484 + (($$0139 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7508 + (($$0137 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8532 + ($$0138 >>> 24 << 2) >> 2]; //@line 781
  $170 = HEAP32[5460 + (($$0139 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 12 >> 2] ^ HEAP32[6484 + (($$0137 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7508 + (($$0138 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8532 + ($$0140 >>> 24 << 2) >> 2]; //@line 801
  $171 = $$0136 + 20 | 0; //@line 802
  $172 = HEAP32[$$0136 + 16 >> 2] | 0; //@line 803
  $173 = $110 & 255; //@line 804
  if (($$0$in | 0) <= 1) {
   break;
  }
  $230 = HEAP32[5460 + (($150 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 24 >> 2] ^ HEAP32[6484 + (($170 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7508 + (($110 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8532 + ($130 >>> 24 << 2) >> 2]; //@line 865
  $250 = HEAP32[5460 + (($170 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 28 >> 2] ^ HEAP32[6484 + (($110 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7508 + (($130 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8532 + ($150 >>> 24 << 2) >> 2]; //@line 885
  $$0$in = $$0$in + -1 | 0; //@line 886
  $$0136 = $$0136 + 32 | 0; //@line 886
  $$0137 = HEAP32[5460 + ($173 << 2) >> 2] ^ $172 ^ HEAP32[6484 + (($130 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7508 + (($150 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8532 + ($170 >>> 24 << 2) >> 2]; //@line 886
  $$0138 = HEAP32[5460 + (($130 & 255) << 2) >> 2] ^ HEAP32[$171 >> 2] ^ HEAP32[6484 + (($150 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7508 + (($170 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8532 + ($110 >>> 24 << 2) >> 2]; //@line 886
  $$0139 = $250; //@line 886
  $$0140 = $230; //@line 886
 }
 $261 = (HEAPU8[14475 + ($130 >>> 8 & 255) >> 0] | 0) << 8 ^ $172; //@line 898
 $268 = (HEAPU8[14475 + ($150 >>> 16 & 255) >> 0] | 0) << 16 ^ $172; //@line 905
 $274 = (HEAPU8[14475 + ($170 >>> 24) >> 0] | 0) << 24 ^ $172; //@line 911
 $276 = HEAP32[$171 >> 2] | 0; //@line 913
 $281 = $276 ^ (HEAPU8[14475 + ($130 & 255) >> 0] | 0); //@line 918
 $288 = (HEAPU8[14475 + ($150 >>> 8 & 255) >> 0] | 0) << 8 ^ $276; //@line 925
 $295 = (HEAPU8[14475 + ($170 >>> 16 & 255) >> 0] | 0) << 16 ^ $276; //@line 932
 $301 = (HEAPU8[14475 + ($110 >>> 24) >> 0] | 0) << 24 ^ $276; //@line 938
 $303 = HEAP32[$$0136 + 24 >> 2] | 0; //@line 940
 $308 = $303 ^ (HEAPU8[14475 + ($150 & 255) >> 0] | 0); //@line 945
 $315 = (HEAPU8[14475 + ($170 >>> 8 & 255) >> 0] | 0) << 8 ^ $303; //@line 952
 $322 = (HEAPU8[14475 + ($110 >>> 16 & 255) >> 0] | 0) << 16 ^ $303; //@line 959
 $328 = (HEAPU8[14475 + ($130 >>> 24) >> 0] | 0) << 24 ^ $303; //@line 965
 $329 = HEAP32[$$0136 + 28 >> 2] | 0; //@line 966
 $334 = $329 ^ (HEAPU8[14475 + ($170 & 255) >> 0] | 0); //@line 971
 $341 = (HEAPU8[14475 + ($110 >>> 8 & 255) >> 0] | 0) << 8 ^ $329; //@line 978
 $348 = (HEAPU8[14475 + ($130 >>> 16 & 255) >> 0] | 0) << 16 ^ $329; //@line 985
 $354 = (HEAPU8[14475 + ($150 >>> 24) >> 0] | 0) << 24 ^ $329; //@line 991
 HEAP8[$2 >> 0] = $172 ^ (HEAPU8[14475 + $173 >> 0] | 0); //@line 993
 HEAP8[$2 + 1 >> 0] = $261 >>> 8; //@line 997
 HEAP8[$2 + 2 >> 0] = $268 >>> 16; //@line 1001
 HEAP8[$2 + 3 >> 0] = $274 >>> 24; //@line 1005
 HEAP8[$2 + 4 >> 0] = $281; //@line 1008
 HEAP8[$2 + 5 >> 0] = $288 >>> 8; //@line 1012
 HEAP8[$2 + 6 >> 0] = $295 >>> 16; //@line 1016
 HEAP8[$2 + 7 >> 0] = $301 >>> 24; //@line 1020
 HEAP8[$2 + 8 >> 0] = $308; //@line 1023
 HEAP8[$2 + 9 >> 0] = $315 >>> 8; //@line 1027
 HEAP8[$2 + 10 >> 0] = $322 >>> 16; //@line 1031
 HEAP8[$2 + 11 >> 0] = $328 >>> 24; //@line 1035
 HEAP8[$2 + 12 >> 0] = $334; //@line 1038
 HEAP8[$2 + 13 >> 0] = $341 >>> 8; //@line 1042
 HEAP8[$2 + 14 >> 0] = $348 >>> 16; //@line 1046
 HEAP8[$2 + 15 >> 0] = $354 >>> 24; //@line 1050
 return 0; //@line 1051
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_410($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $64 = 0, $66 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $85 = 0, $86 = 0, $ReallocAsyncCtx28 = 0, sp = 0;
 sp = STACKTOP; //@line 31174
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31176
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31178
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31180
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31182
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31184
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31186
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 31188
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 31190
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 31192
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 31194
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 31196
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 31198
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 31200
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 31202
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 31204
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 31206
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 31208
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 31210
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 31212
 $40 = HEAP8[$0 + 80 >> 0] | 0; //@line 31214
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 31216
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 31218
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 31220
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 31222
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 31224
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 31226
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 31228
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 31230
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 31232
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 31234
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 31236
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 31238
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 31240
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 31242
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 31244
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 31246
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 31248
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 31250
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 31252
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 31254
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 31256
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 31258
 $85 = $32 + 356 | 0; //@line 31259
 $86 = HEAP32[$85 >> 2] | 0; //@line 31260
 $ReallocAsyncCtx28 = _emscripten_realloc_async_context(176) | 0; //@line 31262
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($86, $32 + 1056 | 0); //@line 31263
 if (!___async) {
  ___async_unwind = 0; //@line 31266
 }
 HEAP32[$ReallocAsyncCtx28 >> 2] = 317; //@line 31268
 HEAP32[$ReallocAsyncCtx28 + 4 >> 2] = $2; //@line 31270
 HEAP32[$ReallocAsyncCtx28 + 8 >> 2] = $4; //@line 31272
 HEAP32[$ReallocAsyncCtx28 + 12 >> 2] = $6; //@line 31274
 HEAP32[$ReallocAsyncCtx28 + 16 >> 2] = $8; //@line 31276
 HEAP32[$ReallocAsyncCtx28 + 20 >> 2] = $10; //@line 31278
 HEAP32[$ReallocAsyncCtx28 + 24 >> 2] = $12; //@line 31280
 HEAP32[$ReallocAsyncCtx28 + 28 >> 2] = $14; //@line 31282
 HEAP32[$ReallocAsyncCtx28 + 32 >> 2] = $16; //@line 31284
 HEAP32[$ReallocAsyncCtx28 + 36 >> 2] = $18; //@line 31286
 HEAP32[$ReallocAsyncCtx28 + 40 >> 2] = $20; //@line 31288
 HEAP32[$ReallocAsyncCtx28 + 44 >> 2] = $85; //@line 31290
 HEAP32[$ReallocAsyncCtx28 + 48 >> 2] = $22; //@line 31292
 HEAP32[$ReallocAsyncCtx28 + 52 >> 2] = $24; //@line 31294
 HEAP32[$ReallocAsyncCtx28 + 56 >> 2] = $26; //@line 31296
 HEAP32[$ReallocAsyncCtx28 + 60 >> 2] = $28; //@line 31298
 HEAP32[$ReallocAsyncCtx28 + 64 >> 2] = $30; //@line 31300
 HEAP32[$ReallocAsyncCtx28 + 68 >> 2] = $32; //@line 31302
 HEAP32[$ReallocAsyncCtx28 + 72 >> 2] = $34; //@line 31304
 HEAP32[$ReallocAsyncCtx28 + 76 >> 2] = $36; //@line 31306
 HEAP32[$ReallocAsyncCtx28 + 80 >> 2] = $38; //@line 31308
 HEAP32[$ReallocAsyncCtx28 + 84 >> 2] = $42; //@line 31310
 HEAP8[$ReallocAsyncCtx28 + 88 >> 0] = $40; //@line 31312
 HEAP32[$ReallocAsyncCtx28 + 92 >> 2] = $44; //@line 31314
 HEAP32[$ReallocAsyncCtx28 + 96 >> 2] = $46; //@line 31316
 HEAP32[$ReallocAsyncCtx28 + 100 >> 2] = $48; //@line 31318
 HEAP32[$ReallocAsyncCtx28 + 104 >> 2] = $50; //@line 31320
 HEAP32[$ReallocAsyncCtx28 + 108 >> 2] = $52; //@line 31322
 HEAP32[$ReallocAsyncCtx28 + 112 >> 2] = $54; //@line 31324
 HEAP32[$ReallocAsyncCtx28 + 116 >> 2] = $56; //@line 31326
 HEAP32[$ReallocAsyncCtx28 + 120 >> 2] = $58; //@line 31328
 HEAP32[$ReallocAsyncCtx28 + 124 >> 2] = $60; //@line 31330
 HEAP32[$ReallocAsyncCtx28 + 128 >> 2] = $62; //@line 31332
 HEAP32[$ReallocAsyncCtx28 + 132 >> 2] = $64; //@line 31334
 HEAP32[$ReallocAsyncCtx28 + 136 >> 2] = $66; //@line 31336
 HEAP32[$ReallocAsyncCtx28 + 140 >> 2] = $68; //@line 31338
 HEAP32[$ReallocAsyncCtx28 + 144 >> 2] = $70; //@line 31340
 HEAP32[$ReallocAsyncCtx28 + 148 >> 2] = $72; //@line 31342
 HEAP32[$ReallocAsyncCtx28 + 152 >> 2] = $74; //@line 31344
 HEAP32[$ReallocAsyncCtx28 + 156 >> 2] = $76; //@line 31346
 HEAP32[$ReallocAsyncCtx28 + 160 >> 2] = $78; //@line 31348
 HEAP32[$ReallocAsyncCtx28 + 164 >> 2] = $80; //@line 31350
 HEAP32[$ReallocAsyncCtx28 + 168 >> 2] = $82; //@line 31352
 HEAP32[$ReallocAsyncCtx28 + 172 >> 2] = $84; //@line 31354
 sp = STACKTOP; //@line 31355
 return;
}
function __ZN7LoRaMac25on_tx_delayed_timer_eventEv($0) {
 $0 = $0 | 0;
 var $$05$i = 0, $$06$i = 0, $1 = 0, $12 = 0, $3 = 0, $34 = 0, $46 = 0, $49 = 0, $54 = 0, $55 = 0, $67 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx4 = 0, $AsyncCtx7 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 14772
 STACKTOP = STACKTOP + 16 | 0; //@line 14773
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14773
 $vararg_buffer1 = sp + 8 | 0; //@line 14774
 $vararg_buffer = sp; //@line 14775
 $1 = sp + 12 | 0; //@line 14776
 _mbed_tracef(16, 13728, 14107, $vararg_buffer); //@line 14777
 $3 = HEAP32[$0 + 356 >> 2] | 0; //@line 14779
 $AsyncCtx10 = _emscripten_alloc_async_context(32, sp) | 0; //@line 14781
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($3, $0 + 1016 | 0); //@line 14782
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 409; //@line 14785
  HEAP32[$AsyncCtx10 + 4 >> 2] = $0; //@line 14787
  HEAP32[$AsyncCtx10 + 8 >> 2] = $vararg_buffer; //@line 14789
  HEAP32[$AsyncCtx10 + 12 >> 2] = $1; //@line 14791
  HEAP32[$AsyncCtx10 + 16 >> 2] = $vararg_buffer; //@line 14793
  HEAP32[$AsyncCtx10 + 20 >> 2] = $1; //@line 14795
  HEAP32[$AsyncCtx10 + 24 >> 2] = $vararg_buffer1; //@line 14797
  HEAP32[$AsyncCtx10 + 28 >> 2] = $vararg_buffer1; //@line 14799
  sp = STACKTOP; //@line 14800
  STACKTOP = sp; //@line 14801
  return;
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 14803
 $12 = $0 + 968 | 0; //@line 14804
 HEAP32[$12 >> 2] = HEAP32[$12 >> 2] & -17; //@line 14807
 if (HEAP8[$0 + 944 >> 0] & 8) {
  if (!(HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) >> 2] | 0)) {
   HEAP8[$0 + 372 >> 0] = 0; //@line 14820
   HEAP32[$0 + 956 >> 2] = 0; //@line 14822
   HEAP32[$0 + 960 >> 2] = 0; //@line 14824
   HEAP32[$0 + 964 >> 2] = 0; //@line 14826
   HEAP8[$0 + 380 >> 0] = 0; //@line 14828
   HEAP8[$0 + 894 >> 0] = 1; //@line 14830
   HEAP8[$0 + 895 >> 0] = 1; //@line 14832
   HEAP8[$0 + 377 >> 0] = 0; //@line 14834
   HEAP8[$0 + 1152 >> 0] = 0; //@line 14836
   HEAP16[$0 + 1154 >> 1] = 1; //@line 14838
   $34 = $0 + 4 | 0; //@line 14839
   __ZN14LoRaMacCommand20clear_command_bufferEv($34); //@line 14840
   __ZN14LoRaMacCommand19clear_repeat_bufferEv($34); //@line 14841
   __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($34); //@line 14842
   HEAP8[$0 + 371 >> 0] = 1; //@line 14844
   __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb(HEAP32[$0 >> 2] | 0, $0 + 360 | 0, 0); //@line 14846
   HEAP8[$0 + 373 >> 0] = 0; //@line 14848
   HEAP8[$0 + 374 >> 0] = 0; //@line 14850
   $$05$i = HEAP32[$0 + 1208 >> 2] | 0; //@line 14852
   if ($$05$i | 0) {
    $$06$i = $$05$i; //@line 14855
    do {
     HEAP32[$$06$i + 36 >> 2] = 0; //@line 14858
     $$06$i = HEAP32[$$06$i + 40 >> 2] | 0; //@line 14860
    } while (($$06$i | 0) != 0);
   }
   HEAP8[$0 + 378 >> 0] = 0; //@line 14870
   HEAP8[$0 + 379 >> 0] = 0; //@line 14872
   $46 = HEAP32[$0 >> 2] | 0; //@line 14873
   $49 = HEAP32[(HEAP32[$46 >> 2] | 0) + 52 >> 2] | 0; //@line 14876
   $54 = (HEAPU8[$0 + 897 >> 0] | 0) + 1 & 255; //@line 14881
   $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 14882
   $55 = FUNCTION_TABLE_iii[$49 & 31]($46, $54) | 0; //@line 14883
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 410; //@line 14886
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 14888
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 14890
    HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 14892
    HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer; //@line 14894
    HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 14896
    HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer1; //@line 14898
    HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer1; //@line 14900
    sp = STACKTOP; //@line 14901
    STACKTOP = sp; //@line 14902
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 14904
   HEAP8[$0 + 1097 >> 0] = $55; //@line 14906
   HEAP8[$vararg_buffer >> 0] = 0; //@line 14907
   HEAP8[$1 >> 0] = HEAP8[$0 + 1156 >> 0] << 7; //@line 14911
   $AsyncCtx4 = _emscripten_alloc_async_context(24, sp) | 0; //@line 14912
   $67 = __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt($0, $vararg_buffer, $1, 0, 0, 0) | 0; //@line 14913
   if (___async) {
    HEAP32[$AsyncCtx4 >> 2] = 411; //@line 14916
    HEAP32[$AsyncCtx4 + 4 >> 2] = $0; //@line 14918
    HEAP32[$AsyncCtx4 + 8 >> 2] = $vararg_buffer1; //@line 14920
    HEAP32[$AsyncCtx4 + 12 >> 2] = $vararg_buffer1; //@line 14922
    HEAP32[$AsyncCtx4 + 16 >> 2] = $1; //@line 14924
    HEAP32[$AsyncCtx4 + 20 >> 2] = $vararg_buffer; //@line 14926
    sp = STACKTOP; //@line 14927
    STACKTOP = sp; //@line 14928
    return;
   }
   _emscripten_free_async_context($AsyncCtx4 | 0); //@line 14930
   if ($67 | 0) {
    HEAP32[$vararg_buffer1 >> 2] = $67; //@line 14933
    _mbed_tracef(2, 13728, 14133, $vararg_buffer1); //@line 14934
    STACKTOP = sp; //@line 14935
    return;
   }
  }
 }
 $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 14939
 __ZN7LoRaMac11schedule_txEv($0) | 0; //@line 14940
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 412; //@line 14943
  HEAP32[$AsyncCtx7 + 4 >> 2] = $1; //@line 14945
  HEAP32[$AsyncCtx7 + 8 >> 2] = $vararg_buffer; //@line 14947
  sp = STACKTOP; //@line 14948
  STACKTOP = sp; //@line 14949
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 14951
 STACKTOP = sp; //@line 14952
 return;
}
function __ZN7LoRaPHY16set_next_channelEP26channel_selection_params_sPhPjS3_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$01722$i = 0, $$01821$i = 0, $$023$i = 0, $$2$i = 0, $$220$i = 0, $$sink = 0, $10 = 0, $11 = 0, $15 = 0, $22 = 0, $23 = 0, $25 = 0, $37 = 0, $39 = 0, $40 = 0, $42 = 0, $44 = 0, $45 = 0, $47 = 0, $5 = 0, $55 = 0, $57 = 0, $7 = 0, $75 = 0, $78 = 0, $8 = 0, $9 = 0, $91 = 0, $92 = 0, $indvars$iv$i = 0, $indvars$iv$i27 = 0, $wide$trip$count$i = 0, $wide$trip$count$i25 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 23602
 STACKTOP = STACKTOP + 16 | 0; //@line 23603
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 23603
 $5 = sp; //@line 23604
 dest = $5; //@line 23605
 stop = dest + 16 | 0; //@line 23605
 do {
  HEAP8[dest >> 0] = 255; //@line 23605
  dest = dest + 1 | 0; //@line 23605
 } while ((dest | 0) < (stop | 0));
 $7 = HEAP32[$0 + 72 >> 2] | 0; //@line 23607
 $8 = $0 + 120 | 0; //@line 23608
 $9 = HEAP32[$8 >> 2] | 0; //@line 23609
 $10 = $0 + 128 | 0; //@line 23610
 $11 = HEAP8[$10 >> 0] | 0; //@line 23611
 if (!((__ZN7LoRaPHY19num_active_channelsEPthh(0, $9, 0, $11) | 0) << 24 >> 24)) {
  $15 = HEAP32[$0 + 124 >> 2] | 0; //@line 23616
  if ($11 << 24 >> 24 != 0 & (($9 | 0) != 0 & ($15 | 0) != 0)) {
   $wide$trip$count$i = $11 & 255; //@line 23623
   $indvars$iv$i = 0; //@line 23624
   do {
    HEAP16[$9 + ($indvars$iv$i << 1) >> 1] = HEAP16[$15 + ($indvars$iv$i << 1) >> 1] | 0; //@line 23629
    $indvars$iv$i = $indvars$iv$i + 1 | 0; //@line 23630
   } while (($indvars$iv$i | 0) != ($wide$trip$count$i | 0));
  }
 }
 $22 = HEAP32[$1 >> 2] | 0; //@line 23640
 $23 = $0 + 8 | 0; //@line 23641
 $25 = $1 + 4 | 0; //@line 23643
 if ($22 >>> 0 > (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$23 >> 2] | 0, HEAP32[$25 >> 2] | 0) | 0) >>> 0) {
  $78 = HEAP32[$1 >> 2] | 0; //@line 23648
  $$0 = 1; //@line 23653
  $$sink = $78 - (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$23 >> 2] | 0, HEAP32[$25 >> 2] | 0) | 0) | 0; //@line 23653
  HEAP32[$3 >> 2] = $$sink; //@line 23654
  STACKTOP = sp; //@line 23655
  return $$0 | 0; //@line 23655
 }
 HEAP32[$4 >> 2] = 0; //@line 23657
 $37 = __ZN7LoRaPHY19update_band_timeoffEbbP6band_th($0, (HEAP8[$1 + 9 >> 0] | 0) != 0, (HEAP8[$1 + 10 >> 0] | 0) != 0, $7, HEAP8[$0 + 76 >> 0] | 0) | 0; //@line 23666
 $39 = HEAP8[$1 + 8 >> 0] | 0; //@line 23668
 $40 = HEAP32[$8 >> 2] | 0; //@line 23669
 $42 = HEAP8[$0 + 20 >> 0] | 0; //@line 23671
 do {
  if ($42 << 24 >> 24) {
   $44 = $0 + 112 | 0; //@line 23675
   $45 = $0 + 72 | 0; //@line 23676
   $$01722$i = 0; //@line 23677
   $$01821$i = 0; //@line 23677
   $$023$i = 0; //@line 23677
   $47 = 0; //@line 23677
   while (1) {
    do {
     if (!(1 << ($47 & 15) & HEAPU16[$40 + ($47 >>> 4 << 1) >> 1])) {
      $$2$i = $$023$i; //@line 23689
      $$220$i = $$01821$i; //@line 23689
     } else {
      $55 = HEAP32[$44 >> 2] | 0; //@line 23691
      $57 = HEAP8[$55 + ($47 * 12 | 0) + 8 >> 0] | 0; //@line 23693
      if ($57 << 24 >> 24 >> 4 << 24 >> 24 < $39 << 24 >> 24 ? 1 : ($57 << 4 & 255) << 24 >> 24 >> 4 << 24 >> 24 > $39 << 24 >> 24) {
       $$2$i = $$023$i; //@line 23701
       $$220$i = $$01821$i; //@line 23701
      } else {
       if (!(HEAP32[(HEAP32[$45 >> 2] | 0) + ((HEAPU8[$55 + ($47 * 12 | 0) + 9 >> 0] | 0) * 24 | 0) + 12 >> 2] | 0)) {
        HEAP8[$5 + ($$023$i & 255) >> 0] = $$01722$i; //@line 23714
        $$2$i = $$023$i + 1 << 24 >> 24; //@line 23715
        $$220$i = $$01821$i; //@line 23715
        break;
       } else {
        $$2$i = $$023$i; //@line 23719
        $$220$i = $$01821$i + 1 << 24 >> 24; //@line 23719
        break;
       }
      }
     }
    } while (0);
    $75 = $$01722$i + 1 << 24 >> 24; //@line 23725
    if (($75 & 255) < ($42 & 255)) {
     $$01722$i = $75; //@line 23729
     $$01821$i = $$220$i; //@line 23729
     $$023$i = $$2$i; //@line 23729
     $47 = $75 & 255; //@line 23729
    } else {
     break;
    }
   }
   if (!($$2$i << 24 >> 24)) {
    if (!($$220$i << 24 >> 24)) {
     break;
    } else {
     $$0 = 1; //@line 23740
     $$sink = $37; //@line 23740
    }
    HEAP32[$3 >> 2] = $$sink; //@line 23742
    STACKTOP = sp; //@line 23743
    return $$0 | 0; //@line 23743
   } else {
    HEAP8[$2 >> 0] = HEAP8[$5 + ((_rand() | 0) % ($$2$i & 255 | 0) | 0) >> 0] | 0; //@line 23750
    $$0 = 1; //@line 23751
    $$sink = 0; //@line 23751
    HEAP32[$3 >> 2] = $$sink; //@line 23752
    STACKTOP = sp; //@line 23753
    return $$0 | 0; //@line 23753
   }
  }
 } while (0);
 $91 = HEAP32[$0 + 124 >> 2] | 0; //@line 23758
 $92 = HEAP8[$10 >> 0] | 0; //@line 23759
 if (!(($40 | 0) != 0 & ($91 | 0) != 0 & $92 << 24 >> 24 != 0)) {
  $$0 = 0; //@line 23766
  $$sink = 0; //@line 23766
  HEAP32[$3 >> 2] = $$sink; //@line 23767
  STACKTOP = sp; //@line 23768
  return $$0 | 0; //@line 23768
 }
 $wide$trip$count$i25 = $92 & 255; //@line 23770
 $indvars$iv$i27 = 0; //@line 23771
 do {
  HEAP16[$40 + ($indvars$iv$i27 << 1) >> 1] = HEAP16[$91 + ($indvars$iv$i27 << 1) >> 1] | 0; //@line 23776
  $indvars$iv$i27 = $indvars$iv$i27 + 1 | 0; //@line 23777
 } while (($indvars$iv$i27 | 0) != ($wide$trip$count$i25 | 0));
 $$0 = 0; //@line 23780
 $$sink = 0; //@line 23780
 HEAP32[$3 >> 2] = $$sink; //@line 23786
 STACKTOP = sp; //@line 23787
 return $$0 | 0; //@line 23787
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_316($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 14189
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14191
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14193
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14195
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14199
 $11 = $10 + 12 | 0; //@line 14200
 HEAP32[$10 >> 2] = 491; //@line 14201
 HEAP32[$10 + 4 >> 2] = 0; //@line 14203
 HEAP32[$10 + 8 >> 2] = $4; //@line 14205
 HEAP32[$11 >> 2] = 912; //@line 14206
 $12 = $4 + 1228 | 0; //@line 14207
 if (($12 | 0) == ($10 | 0)) {
  $35 = HEAP32[230] | 0; //@line 14211
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 14212
  FUNCTION_TABLE_vi[$35 & 1023]($10); //@line 14213
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 494; //@line 14216
   $36 = $ReallocAsyncCtx12 + 4 | 0; //@line 14217
   HEAP32[$36 >> 2] = $10; //@line 14218
   $37 = $ReallocAsyncCtx12 + 8 | 0; //@line 14219
   HEAP32[$37 >> 2] = $2; //@line 14220
   $38 = $ReallocAsyncCtx12 + 12 | 0; //@line 14221
   HEAP32[$38 >> 2] = $4; //@line 14222
   $39 = $ReallocAsyncCtx12 + 16 | 0; //@line 14223
   HEAP32[$39 >> 2] = $6; //@line 14224
   sp = STACKTOP; //@line 14225
   return;
  }
  ___async_unwind = 0; //@line 14228
  HEAP32[$ReallocAsyncCtx12 >> 2] = 494; //@line 14229
  $36 = $ReallocAsyncCtx12 + 4 | 0; //@line 14230
  HEAP32[$36 >> 2] = $10; //@line 14231
  $37 = $ReallocAsyncCtx12 + 8 | 0; //@line 14232
  HEAP32[$37 >> 2] = $2; //@line 14233
  $38 = $ReallocAsyncCtx12 + 12 | 0; //@line 14234
  HEAP32[$38 >> 2] = $4; //@line 14235
  $39 = $ReallocAsyncCtx12 + 16 | 0; //@line 14236
  HEAP32[$39 >> 2] = $6; //@line 14237
  sp = STACKTOP; //@line 14238
  return;
 }
 $14 = $4 + 1240 | 0; //@line 14241
 $15 = HEAP32[$14 >> 2] | 0; //@line 14242
 if (!$15) {
  $27 = HEAP32[229] | 0; //@line 14246
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(28) | 0; //@line 14247
  FUNCTION_TABLE_vii[$27 & 31]($12, $10); //@line 14248
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 493; //@line 14251
   $28 = $ReallocAsyncCtx11 + 4 | 0; //@line 14252
   HEAP32[$28 >> 2] = $10; //@line 14253
   $29 = $ReallocAsyncCtx11 + 8 | 0; //@line 14254
   HEAP32[$29 >> 2] = $2; //@line 14255
   $30 = $ReallocAsyncCtx11 + 12 | 0; //@line 14256
   HEAP32[$30 >> 2] = $4; //@line 14257
   $31 = $ReallocAsyncCtx11 + 16 | 0; //@line 14258
   HEAP32[$31 >> 2] = $11; //@line 14259
   $32 = $ReallocAsyncCtx11 + 20 | 0; //@line 14260
   HEAP32[$32 >> 2] = $14; //@line 14261
   $33 = $ReallocAsyncCtx11 + 24 | 0; //@line 14262
   HEAP32[$33 >> 2] = $6; //@line 14263
   sp = STACKTOP; //@line 14264
   return;
  }
  ___async_unwind = 0; //@line 14267
  HEAP32[$ReallocAsyncCtx11 >> 2] = 493; //@line 14268
  $28 = $ReallocAsyncCtx11 + 4 | 0; //@line 14269
  HEAP32[$28 >> 2] = $10; //@line 14270
  $29 = $ReallocAsyncCtx11 + 8 | 0; //@line 14271
  HEAP32[$29 >> 2] = $2; //@line 14272
  $30 = $ReallocAsyncCtx11 + 12 | 0; //@line 14273
  HEAP32[$30 >> 2] = $4; //@line 14274
  $31 = $ReallocAsyncCtx11 + 16 | 0; //@line 14275
  HEAP32[$31 >> 2] = $11; //@line 14276
  $32 = $ReallocAsyncCtx11 + 20 | 0; //@line 14277
  HEAP32[$32 >> 2] = $14; //@line 14278
  $33 = $ReallocAsyncCtx11 + 24 | 0; //@line 14279
  HEAP32[$33 >> 2] = $6; //@line 14280
  sp = STACKTOP; //@line 14281
  return;
 } else {
  $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 14285
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(32) | 0; //@line 14286
  FUNCTION_TABLE_vi[$18 & 1023]($12); //@line 14287
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 492; //@line 14290
   $19 = $ReallocAsyncCtx10 + 4 | 0; //@line 14291
   HEAP32[$19 >> 2] = $12; //@line 14292
   $20 = $ReallocAsyncCtx10 + 8 | 0; //@line 14293
   HEAP32[$20 >> 2] = $10; //@line 14294
   $21 = $ReallocAsyncCtx10 + 12 | 0; //@line 14295
   HEAP32[$21 >> 2] = $2; //@line 14296
   $22 = $ReallocAsyncCtx10 + 16 | 0; //@line 14297
   HEAP32[$22 >> 2] = $4; //@line 14298
   $23 = $ReallocAsyncCtx10 + 20 | 0; //@line 14299
   HEAP32[$23 >> 2] = $14; //@line 14300
   $24 = $ReallocAsyncCtx10 + 24 | 0; //@line 14301
   HEAP32[$24 >> 2] = $11; //@line 14302
   $25 = $ReallocAsyncCtx10 + 28 | 0; //@line 14303
   HEAP32[$25 >> 2] = $6; //@line 14304
   sp = STACKTOP; //@line 14305
   return;
  }
  ___async_unwind = 0; //@line 14308
  HEAP32[$ReallocAsyncCtx10 >> 2] = 492; //@line 14309
  $19 = $ReallocAsyncCtx10 + 4 | 0; //@line 14310
  HEAP32[$19 >> 2] = $12; //@line 14311
  $20 = $ReallocAsyncCtx10 + 8 | 0; //@line 14312
  HEAP32[$20 >> 2] = $10; //@line 14313
  $21 = $ReallocAsyncCtx10 + 12 | 0; //@line 14314
  HEAP32[$21 >> 2] = $2; //@line 14315
  $22 = $ReallocAsyncCtx10 + 16 | 0; //@line 14316
  HEAP32[$22 >> 2] = $4; //@line 14317
  $23 = $ReallocAsyncCtx10 + 20 | 0; //@line 14318
  HEAP32[$23 >> 2] = $14; //@line 14319
  $24 = $ReallocAsyncCtx10 + 24 | 0; //@line 14320
  HEAP32[$24 >> 2] = $11; //@line 14321
  $25 = $ReallocAsyncCtx10 + 28 | 0; //@line 14322
  HEAP32[$25 >> 2] = $6; //@line 14323
  sp = STACKTOP; //@line 14324
  return;
 }
}
function _mbedtls_aes_setkey_enc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0103117 = 0, $$0106 = 0, $$0112 = 0, $$1104111 = 0, $$1114 = 0, $$2105113 = 0, $$2116 = 0, $$3115 = 0, $$sink = 0, $107 = 0, $111 = 0, $115 = 0, $119 = 0, $127 = 0, $129 = 0, $158 = 0, $162 = 0, $166 = 0, $194 = 0, $198 = 0, $202 = 0, $3 = 0, $33 = 0, $35 = 0, $5 = 0, $6 = 0, $64 = 0, $68 = 0, $76 = 0, $78 = 0, $$0112$looptemp = 0, $$1114$looptemp = 0, $$2116$looptemp = 0;
 switch ($2 | 0) {
 case 128:
  {
   $$sink = 10; //@line 71
   break;
  }
 case 192:
  {
   $$sink = 12; //@line 75
   break;
  }
 case 256:
  {
   $$sink = 14; //@line 79
   break;
  }
 default:
  {
   $$0106 = -32; //@line 83
   return $$0106 | 0; //@line 84
  }
 }
 HEAP32[$0 >> 2] = $$sink; //@line 87
 $3 = $0 + 8 | 0; //@line 88
 HEAP32[$0 + 4 >> 2] = $3; //@line 90
 $5 = $2 >>> 5; //@line 91
 $$0103117 = 0; //@line 92
 do {
  $6 = $$0103117 << 2; //@line 94
  HEAP32[$0 + 8 + ($$0103117 << 2) >> 2] = (HEAPU8[$1 + ($6 | 1) >> 0] | 0) << 8 | (HEAPU8[$1 + $6 >> 0] | 0) | (HEAPU8[$1 + ($6 | 2) >> 0] | 0) << 16 | (HEAPU8[$1 + ($6 | 3) >> 0] | 0) << 24; //@line 117
  $$0103117 = $$0103117 + 1 | 0; //@line 118
 } while (($$0103117 | 0) != ($5 | 0));
 switch (HEAP32[$0 >> 2] | 0) {
 case 10:
  {
   $$0112 = $3; //@line 130
   $$1104111 = 0; //@line 130
   $33 = HEAP32[$3 >> 2] | 0; //@line 130
   do {
    $35 = HEAP32[$$0112 + 12 >> 2] | 0; //@line 136
    $33 = HEAP32[1324 + ($$1104111 << 2) >> 2] ^ $33 ^ (HEAPU8[14475 + ($35 >>> 8 & 255) >> 0] | 0) ^ (HEAPU8[14475 + ($35 >>> 16 & 255) >> 0] | 0) << 8 ^ (HEAPU8[14475 + ($35 >>> 24) >> 0] | 0) << 16 ^ (HEAPU8[14475 + ($35 & 255) >> 0] | 0) << 24; //@line 161
    $$0112$looptemp = $$0112;
    $$0112 = $$0112 + 16 | 0; //@line 162
    HEAP32[$$0112 >> 2] = $33; //@line 163
    $64 = $33 ^ HEAP32[$$0112$looptemp + 4 >> 2]; //@line 166
    HEAP32[$$0112$looptemp + 20 >> 2] = $64; //@line 168
    $68 = HEAP32[$$0112$looptemp + 8 >> 2] ^ $64; //@line 171
    HEAP32[$$0112$looptemp + 24 >> 2] = $68; //@line 173
    HEAP32[$$0112$looptemp + 28 >> 2] = $35 ^ $68; //@line 176
    $$1104111 = $$1104111 + 1 | 0; //@line 177
   } while (($$1104111 | 0) != 10);
   $$0106 = 0; //@line 180
   return $$0106 | 0; //@line 186
  }
 case 12:
  {
   $$1114 = $3; //@line 191
   $$2105113 = 0; //@line 191
   $76 = HEAP32[$3 >> 2] | 0; //@line 191
   do {
    $78 = HEAP32[$$1114 + 20 >> 2] | 0; //@line 197
    $76 = HEAP32[1324 + ($$2105113 << 2) >> 2] ^ $76 ^ (HEAPU8[14475 + ($78 >>> 8 & 255) >> 0] | 0) ^ (HEAPU8[14475 + ($78 >>> 16 & 255) >> 0] | 0) << 8 ^ (HEAPU8[14475 + ($78 >>> 24) >> 0] | 0) << 16 ^ (HEAPU8[14475 + ($78 & 255) >> 0] | 0) << 24; //@line 222
    $$1114$looptemp = $$1114;
    $$1114 = $$1114 + 24 | 0; //@line 223
    HEAP32[$$1114 >> 2] = $76; //@line 224
    $107 = $76 ^ HEAP32[$$1114$looptemp + 4 >> 2]; //@line 227
    HEAP32[$$1114$looptemp + 28 >> 2] = $107; //@line 229
    $111 = HEAP32[$$1114$looptemp + 8 >> 2] ^ $107; //@line 232
    HEAP32[$$1114$looptemp + 32 >> 2] = $111; //@line 234
    $115 = HEAP32[$$1114$looptemp + 12 >> 2] ^ $111; //@line 237
    HEAP32[$$1114$looptemp + 36 >> 2] = $115; //@line 239
    $119 = HEAP32[$$1114$looptemp + 16 >> 2] ^ $115; //@line 242
    HEAP32[$$1114$looptemp + 40 >> 2] = $119; //@line 244
    HEAP32[$$1114$looptemp + 44 >> 2] = $78 ^ $119; //@line 247
    $$2105113 = $$2105113 + 1 | 0; //@line 248
   } while (($$2105113 | 0) != 8);
   $$0106 = 0; //@line 251
   return $$0106 | 0; //@line 257
  }
 case 14:
  {
   $$2116 = $3; //@line 262
   $$3115 = 0; //@line 262
   $127 = HEAP32[$3 >> 2] | 0; //@line 262
   do {
    $129 = HEAP32[$$2116 + 28 >> 2] | 0; //@line 268
    $127 = HEAP32[1324 + ($$3115 << 2) >> 2] ^ $127 ^ (HEAPU8[14475 + ($129 >>> 8 & 255) >> 0] | 0) ^ (HEAPU8[14475 + ($129 >>> 16 & 255) >> 0] | 0) << 8 ^ (HEAPU8[14475 + ($129 >>> 24) >> 0] | 0) << 16 ^ (HEAPU8[14475 + ($129 & 255) >> 0] | 0) << 24; //@line 293
    $$2116$looptemp = $$2116;
    $$2116 = $$2116 + 32 | 0; //@line 294
    HEAP32[$$2116 >> 2] = $127; //@line 295
    $158 = $127 ^ HEAP32[$$2116$looptemp + 4 >> 2]; //@line 298
    HEAP32[$$2116$looptemp + 36 >> 2] = $158; //@line 300
    $162 = HEAP32[$$2116$looptemp + 8 >> 2] ^ $158; //@line 303
    HEAP32[$$2116$looptemp + 40 >> 2] = $162; //@line 305
    $166 = HEAP32[$$2116$looptemp + 12 >> 2] ^ $162; //@line 308
    HEAP32[$$2116$looptemp + 44 >> 2] = $166; //@line 310
    $194 = HEAP32[$$2116$looptemp + 16 >> 2] ^ (HEAPU8[14475 + ($166 & 255) >> 0] | 0) ^ (HEAPU8[14475 + ($166 >>> 8 & 255) >> 0] | 0) << 8 ^ (HEAPU8[14475 + ($166 >>> 16 & 255) >> 0] | 0) << 16 ^ (HEAPU8[14475 + ($166 >>> 24) >> 0] | 0) << 24; //@line 337
    HEAP32[$$2116$looptemp + 48 >> 2] = $194; //@line 339
    $198 = $194 ^ HEAP32[$$2116$looptemp + 20 >> 2]; //@line 342
    HEAP32[$$2116$looptemp + 52 >> 2] = $198; //@line 344
    $202 = HEAP32[$$2116$looptemp + 24 >> 2] ^ $198; //@line 347
    HEAP32[$$2116$looptemp + 56 >> 2] = $202; //@line 349
    HEAP32[$$2116$looptemp + 60 >> 2] = $129 ^ $202; //@line 352
    $$3115 = $$3115 + 1 | 0; //@line 353
   } while (($$3115 | 0) != 7);
   $$0106 = 0; //@line 356
   return $$0106 | 0; //@line 362
  }
 default:
  {
   $$0106 = 0; //@line 366
   return $$0106 | 0; //@line 367
  }
 }
 return 0; //@line 370
}
function __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$phi$trans$insert = 0, $$pre = 0, $$pre$i$i4 = 0, $$pre10 = 0, $12 = 0, $2 = 0, $20 = 0, $21 = 0, $25 = 0, $27 = 0, $29 = 0, $3 = 0, $30 = 0, $33 = 0, $4 = 0, $41 = 0, $49 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 2576
 STACKTOP = STACKTOP + 16 | 0; //@line 2577
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 2577
 $2 = sp; //@line 2578
 $3 = $1 + 12 | 0; //@line 2579
 $4 = HEAP32[$3 >> 2] | 0; //@line 2580
 if ($4 | 0) {
  $6 = $0 + 56 | 0; //@line 2583
  if (($6 | 0) != ($1 | 0)) {
   $8 = $0 + 68 | 0; //@line 2586
   $9 = HEAP32[$8 >> 2] | 0; //@line 2587
   do {
    if (!$9) {
     $20 = $4; //@line 2591
     label = 7; //@line 2592
    } else {
     $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 2595
     $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 2596
     FUNCTION_TABLE_vi[$12 & 1023]($6); //@line 2597
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 109; //@line 2600
      HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 2602
      HEAP32[$AsyncCtx + 8 >> 2] = $8; //@line 2604
      HEAP32[$AsyncCtx + 12 >> 2] = $6; //@line 2606
      HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 2608
      HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 2610
      sp = STACKTOP; //@line 2611
      STACKTOP = sp; //@line 2612
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 2614
      $$pre = HEAP32[$3 >> 2] | 0; //@line 2615
      if (!$$pre) {
       $25 = 0; //@line 2618
       break;
      } else {
       $20 = $$pre; //@line 2621
       label = 7; //@line 2622
       break;
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 7) {
     $21 = HEAP32[$20 + 4 >> 2] | 0; //@line 2631
     $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 2632
     FUNCTION_TABLE_vii[$21 & 31]($6, $1); //@line 2633
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 110; //@line 2636
      HEAP32[$AsyncCtx2 + 4 >> 2] = $3; //@line 2638
      HEAP32[$AsyncCtx2 + 8 >> 2] = $8; //@line 2640
      HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 2642
      sp = STACKTOP; //@line 2643
      STACKTOP = sp; //@line 2644
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx2 | 0); //@line 2646
      $25 = HEAP32[$3 >> 2] | 0; //@line 2648
      break;
     }
    }
   } while (0);
   HEAP32[$8 >> 2] = $25; //@line 2653
  }
  _gpio_irq_set($0 + 28 | 0, 2, 1); //@line 2656
  STACKTOP = sp; //@line 2657
  return;
 }
 HEAP32[$2 >> 2] = 0; //@line 2659
 HEAP32[$2 + 4 >> 2] = 0; //@line 2659
 HEAP32[$2 + 8 >> 2] = 0; //@line 2659
 HEAP32[$2 + 12 >> 2] = 0; //@line 2659
 $27 = $0 + 56 | 0; //@line 2660
 do {
  if (($27 | 0) != ($2 | 0)) {
   $29 = $0 + 68 | 0; //@line 2664
   $30 = HEAP32[$29 >> 2] | 0; //@line 2665
   if ($30 | 0) {
    $33 = HEAP32[$30 + 8 >> 2] | 0; //@line 2669
    $AsyncCtx5 = _emscripten_alloc_async_context(24, sp) | 0; //@line 2670
    FUNCTION_TABLE_vi[$33 & 1023]($27); //@line 2671
    if (___async) {
     HEAP32[$AsyncCtx5 >> 2] = 111; //@line 2674
     HEAP32[$AsyncCtx5 + 4 >> 2] = $2; //@line 2676
     HEAP32[$AsyncCtx5 + 8 >> 2] = $29; //@line 2678
     HEAP32[$AsyncCtx5 + 12 >> 2] = $27; //@line 2680
     HEAP32[$AsyncCtx5 + 16 >> 2] = $2; //@line 2682
     HEAP32[$AsyncCtx5 + 20 >> 2] = $0; //@line 2684
     sp = STACKTOP; //@line 2685
     STACKTOP = sp; //@line 2686
     return;
    }
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 2688
    $$phi$trans$insert = $2 + 12 | 0; //@line 2689
    $$pre10 = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 2690
    if ($$pre10 | 0) {
     $41 = HEAP32[$$pre10 + 4 >> 2] | 0; //@line 2694
     $AsyncCtx8 = _emscripten_alloc_async_context(20, sp) | 0; //@line 2695
     FUNCTION_TABLE_vii[$41 & 31]($27, $2); //@line 2696
     if (___async) {
      HEAP32[$AsyncCtx8 >> 2] = 112; //@line 2699
      HEAP32[$AsyncCtx8 + 4 >> 2] = $$phi$trans$insert; //@line 2701
      HEAP32[$AsyncCtx8 + 8 >> 2] = $29; //@line 2703
      HEAP32[$AsyncCtx8 + 12 >> 2] = $2; //@line 2705
      HEAP32[$AsyncCtx8 + 16 >> 2] = $0; //@line 2707
      sp = STACKTOP; //@line 2708
      STACKTOP = sp; //@line 2709
      return;
     }
     _emscripten_free_async_context($AsyncCtx8 | 0); //@line 2711
     $$pre$i$i4 = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 2712
     HEAP32[$29 >> 2] = $$pre$i$i4; //@line 2713
     if (!$$pre$i$i4) {
      break;
     }
     $49 = HEAP32[$$pre$i$i4 + 8 >> 2] | 0; //@line 2720
     $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 2721
     FUNCTION_TABLE_vi[$49 & 1023]($2); //@line 2722
     if (___async) {
      HEAP32[$AsyncCtx11 >> 2] = 113; //@line 2725
      HEAP32[$AsyncCtx11 + 4 >> 2] = $2; //@line 2727
      HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 2729
      sp = STACKTOP; //@line 2730
      STACKTOP = sp; //@line 2731
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx11 | 0); //@line 2733
      break;
     }
    }
   }
   HEAP32[$29 >> 2] = 0; //@line 2738
  }
 } while (0);
 _gpio_irq_set($0 + 28 | 0, 2, 0); //@line 2742
 STACKTOP = sp; //@line 2743
 return;
}
function __ZN12LoRaPHYEU868C2ER18LoRaWANTimeHandler($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $28 = 0, $3 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 __ZN7LoRaPHYC2ER18LoRaWANTimeHandler($0, $1); //@line 25264
 HEAP32[$0 >> 2] = 1032; //@line 25265
 $2 = $0 + 328 | 0; //@line 25266
 HEAP32[$2 >> 2] = HEAP32[278]; //@line 25267
 HEAP32[$2 + 4 >> 2] = HEAP32[279]; //@line 25267
 HEAP32[$2 + 8 >> 2] = HEAP32[280]; //@line 25267
 HEAP32[$2 + 12 >> 2] = HEAP32[281]; //@line 25267
 HEAP32[$2 + 16 >> 2] = HEAP32[282]; //@line 25267
 HEAP32[$2 + 20 >> 2] = HEAP32[283]; //@line 25267
 $3 = $0 + 352 | 0; //@line 25268
 HEAP32[$3 >> 2] = HEAP32[284]; //@line 25269
 HEAP32[$3 + 4 >> 2] = HEAP32[285]; //@line 25269
 HEAP32[$3 + 8 >> 2] = HEAP32[286]; //@line 25269
 HEAP32[$3 + 12 >> 2] = HEAP32[287]; //@line 25269
 HEAP32[$3 + 16 >> 2] = HEAP32[288]; //@line 25269
 HEAP32[$3 + 20 >> 2] = HEAP32[289]; //@line 25269
 $4 = $0 + 376 | 0; //@line 25270
 HEAP32[$4 >> 2] = HEAP32[290]; //@line 25271
 HEAP32[$4 + 4 >> 2] = HEAP32[291]; //@line 25271
 HEAP32[$4 + 8 >> 2] = HEAP32[292]; //@line 25271
 HEAP32[$4 + 12 >> 2] = HEAP32[293]; //@line 25271
 HEAP32[$4 + 16 >> 2] = HEAP32[294]; //@line 25271
 HEAP32[$4 + 20 >> 2] = HEAP32[295]; //@line 25271
 $5 = $0 + 400 | 0; //@line 25272
 HEAP32[$5 >> 2] = HEAP32[296]; //@line 25273
 HEAP32[$5 + 4 >> 2] = HEAP32[297]; //@line 25273
 HEAP32[$5 + 8 >> 2] = HEAP32[298]; //@line 25273
 HEAP32[$5 + 12 >> 2] = HEAP32[299]; //@line 25273
 HEAP32[$5 + 16 >> 2] = HEAP32[300]; //@line 25273
 HEAP32[$5 + 20 >> 2] = HEAP32[301]; //@line 25273
 $6 = $0 + 424 | 0; //@line 25274
 HEAP32[$6 >> 2] = HEAP32[302]; //@line 25275
 HEAP32[$6 + 4 >> 2] = HEAP32[303]; //@line 25275
 HEAP32[$6 + 8 >> 2] = HEAP32[304]; //@line 25275
 HEAP32[$6 + 12 >> 2] = HEAP32[305]; //@line 25275
 HEAP32[$6 + 16 >> 2] = HEAP32[306]; //@line 25275
 HEAP32[$6 + 20 >> 2] = HEAP32[307]; //@line 25275
 $7 = $0 + 448 | 0; //@line 25276
 HEAP32[$7 >> 2] = HEAP32[308]; //@line 25277
 HEAP32[$7 + 4 >> 2] = HEAP32[309]; //@line 25277
 HEAP32[$7 + 8 >> 2] = HEAP32[310]; //@line 25277
 HEAP32[$7 + 12 >> 2] = HEAP32[311]; //@line 25277
 HEAP32[$7 + 16 >> 2] = HEAP32[312]; //@line 25277
 HEAP32[$7 + 20 >> 2] = HEAP32[313]; //@line 25277
 $8 = $0 + 136 | 0; //@line 25278
 HEAP32[$8 >> 2] = HEAP32[314]; //@line 25279
 HEAP32[$8 + 4 >> 2] = HEAP32[315]; //@line 25279
 HEAP32[$8 + 8 >> 2] = HEAP32[316]; //@line 25279
 $9 = $0 + 148 | 0; //@line 25280
 HEAP32[$9 >> 2] = HEAP32[317]; //@line 25281
 HEAP32[$9 + 4 >> 2] = HEAP32[318]; //@line 25281
 HEAP32[$9 + 8 >> 2] = HEAP32[319]; //@line 25281
 $10 = $0 + 160 | 0; //@line 25282
 HEAP32[$10 >> 2] = HEAP32[320]; //@line 25283
 HEAP32[$10 + 4 >> 2] = HEAP32[321]; //@line 25283
 HEAP32[$10 + 8 >> 2] = HEAP32[322]; //@line 25283
 $11 = $0 + 474 | 0; //@line 25284
 HEAP16[$11 >> 1] = 7; //@line 25285
 $12 = $0 + 472 | 0; //@line 25286
 __ZN7LoRaPHY17copy_channel_maskEPtS0_h($0, $12, $11, 1); //@line 25287
 HEAP32[$0 + 112 >> 2] = $8; //@line 25289
 HEAP8[$0 + 116 >> 0] = 16; //@line 25291
 HEAP32[$0 + 120 >> 2] = $12; //@line 25293
 HEAP32[$0 + 124 >> 2] = $11; //@line 25295
 HEAP8[$0 + 128 >> 0] = 1; //@line 25297
 HEAP32[$0 + 72 >> 2] = $2; //@line 25299
 HEAP8[$0 + 76 >> 0] = 6; //@line 25301
 HEAP32[$0 + 80 >> 2] = 1292; //@line 25303
 HEAP8[$0 + 84 >> 0] = 8; //@line 25305
 HEAP32[$0 + 88 >> 2] = 14328; //@line 25307
 HEAP8[$0 + 92 >> 0] = 8; //@line 25309
 HEAP32[$0 + 96 >> 2] = 14336; //@line 25311
 HEAP8[$0 + 100 >> 0] = 8; //@line 25313
 HEAP32[$0 + 104 >> 2] = 14344; //@line 25315
 HEAP8[$0 + 108 >> 0] = 8; //@line 25317
 $28 = $0 + 132 | 0; //@line 25318
 HEAP8[$28 >> 0] = HEAP8[$28 >> 0] & -4; //@line 25321
 $31 = $0 + 12 | 0; //@line 25322
 $32 = $0 + 18 | 0; //@line 25323
 HEAP32[$31 >> 2] = 16843009; //@line 25324
 HEAP16[$31 + 4 >> 1] = 257; //@line 25324
 HEAP8[$32 >> 0] = 3; //@line 25325
 HEAP8[$0 + 20 >> 0] = 16; //@line 25327
 HEAP8[$0 + 19 >> 0] = 5; //@line 25329
 HEAP8[$0 + 26 >> 0] = 0; //@line 25331
 HEAP8[$0 + 27 >> 0] = 7; //@line 25333
 HEAP8[$0 + 28 >> 0] = 0; //@line 25335
 HEAP8[$0 + 29 >> 0] = 7; //@line 25337
 HEAP8[$0 + 30 >> 0] = 0; //@line 25339
 HEAP8[$0 + 31 >> 0] = 5; //@line 25341
 HEAP8[$0 + 32 >> 0] = 0; //@line 25343
 HEAP8[$0 + 33 >> 0] = 5; //@line 25345
 HEAP8[$0 + 34 >> 0] = 0; //@line 25347
 HEAP8[$0 + 21 >> 0] = 7; //@line 25349
 HEAP8[$0 + 22 >> 0] = 0; //@line 25351
 HEAP8[$0 + 23 >> 0] = 0; //@line 25353
 HEAPF32[$0 + 56 >> 2] = 16.0; //@line 25355
 HEAPF32[$0 + 60 >> 2] = 2.1500000953674316; //@line 25357
 HEAP8[$0 + 24 >> 0] = 64; //@line 25359
 HEAP8[$0 + 25 >> 0] = 32; //@line 25361
 HEAP16[$0 + 36 >> 1] = 3e3; //@line 25363
 HEAP16[$0 + 38 >> 1] = 1e3; //@line 25365
 HEAP16[$0 + 40 >> 1] = 2e3; //@line 25367
 HEAP16[$0 + 46 >> 1] = 7; //@line 25369
 HEAP16[$0 + 42 >> 1] = 5e3; //@line 25371
 HEAP16[$0 + 44 >> 1] = 6e3; //@line 25373
 HEAP16[$0 + 48 >> 1] = 16384; //@line 25375
 HEAP16[$0 + 50 >> 1] = 2e3; //@line 25377
 HEAP16[$0 + 52 >> 1] = 1e3; //@line 25379
 HEAP8[$0 + 64 >> 0] = 0; //@line 25381
 HEAP32[$0 + 68 >> 2] = 869525e3; //@line 25383
 return;
}
function _ticker_read_us($0) {
 $0 = $0 | 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $14 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $28 = 0, $29 = 0, $3 = 0, $35 = 0, $36 = 0, $37 = 0, $46 = 0, $47 = 0, $48 = 0, $50 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $63 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $80 = 0, $81 = 0, $82 = 0, $84 = 0, $88 = 0, $89 = 0, $95 = 0, $96 = 0, $97 = 0, $99 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5972
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5973
 _initialize($0); //@line 5974
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 626; //@line 5977
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 5979
  sp = STACKTOP; //@line 5980
  tempRet0 = 0; //@line 5981
  return 0; //@line 5982
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5984
 $2 = $0 + 4 | 0; //@line 5985
 $3 = HEAP32[$2 >> 2] | 0; //@line 5986
 $6 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 5989
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 5990
 $7 = FUNCTION_TABLE_i[$6 & 7]() | 0; //@line 5991
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 627; //@line 5994
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 5996
  HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 5998
  sp = STACKTOP; //@line 5999
  tempRet0 = 0; //@line 6000
  return 0; //@line 6001
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 6003
 if (($7 | 0) == (HEAP32[(HEAP32[$2 >> 2] | 0) + 32 >> 2] | 0)) {
  $103 = HEAP32[$2 >> 2] | 0; //@line 6009
  $104 = $103 + 48 | 0; //@line 6010
  $105 = $104; //@line 6011
  $106 = $105; //@line 6012
  $107 = HEAP32[$106 >> 2] | 0; //@line 6013
  $108 = $105 + 4 | 0; //@line 6014
  $109 = $108; //@line 6015
  $110 = HEAP32[$109 >> 2] | 0; //@line 6016
  tempRet0 = $110; //@line 6017
  return $107 | 0; //@line 6018
 }
 $14 = $3 + 32 | 0; //@line 6020
 $19 = $7 - (HEAP32[$14 >> 2] | 0) & HEAP32[$3 + 12 >> 2]; //@line 6025
 HEAP32[$14 >> 2] = $7; //@line 6026
 $21 = HEAP32[$3 + 8 >> 2] | 0; //@line 6028
 L10 : do {
  if (($21 | 0) < 1e6) {
   switch ($21 | 0) {
   case 32768:
    {
     break;
    }
   default:
    {
     label = 9; //@line 6037
     break L10;
    }
   }
   $22 = ___muldi3($19 | 0, 0, 1e6, 0) | 0; //@line 6041
   $24 = _bitshift64Lshr($22 | 0, tempRet0 | 0, 15) | 0; //@line 6043
   $25 = tempRet0; //@line 6044
   $28 = $3 + 40 | 0; //@line 6047
   $29 = $28; //@line 6048
   $35 = _i64Add(HEAP32[$29 >> 2] | 0, HEAP32[$29 + 4 >> 2] | 0, $19 * 1e6 & 32704 | 0, 0) | 0; //@line 6054
   $36 = tempRet0; //@line 6055
   $37 = $28; //@line 6056
   HEAP32[$37 >> 2] = $35; //@line 6058
   HEAP32[$37 + 4 >> 2] = $36; //@line 6061
   if ($36 >>> 0 < 0 | ($36 | 0) == 0 & $35 >>> 0 < 32768) {
    $95 = $24; //@line 6068
    $96 = $25; //@line 6068
   } else {
    $46 = _i64Add($24 | 0, $25 | 0, 1, 0) | 0; //@line 6070
    $47 = tempRet0; //@line 6071
    $48 = _i64Add($35 | 0, $36 | 0, -32768, -1) | 0; //@line 6072
    $50 = $28; //@line 6074
    HEAP32[$50 >> 2] = $48; //@line 6076
    HEAP32[$50 + 4 >> 2] = tempRet0; //@line 6079
    $95 = $46; //@line 6080
    $96 = $47; //@line 6080
   }
  } else {
   switch ($21 | 0) {
   case 1e6:
    {
     $95 = $19; //@line 6085
     $96 = 0; //@line 6085
     break;
    }
   default:
    {
     label = 9; //@line 6089
    }
   }
  }
 } while (0);
 if ((label | 0) == 9) {
  $54 = ___muldi3($19 | 0, 0, 1e6, 0) | 0; //@line 6095
  $55 = tempRet0; //@line 6096
  $56 = ___udivdi3($54 | 0, $55 | 0, $21 | 0, 0) | 0; //@line 6097
  $57 = tempRet0; //@line 6098
  $58 = ___muldi3($56 | 0, $57 | 0, $21 | 0, 0) | 0; //@line 6099
  $60 = _i64Subtract($54 | 0, $55 | 0, $58 | 0, tempRet0 | 0) | 0; //@line 6101
  $62 = $3 + 40 | 0; //@line 6103
  $63 = $62; //@line 6104
  $69 = _i64Add($60 | 0, tempRet0 | 0, HEAP32[$63 >> 2] | 0, HEAP32[$63 + 4 >> 2] | 0) | 0; //@line 6110
  $70 = tempRet0; //@line 6111
  $71 = $62; //@line 6112
  HEAP32[$71 >> 2] = $69; //@line 6114
  HEAP32[$71 + 4 >> 2] = $70; //@line 6117
  if ($70 >>> 0 < 0 | ($70 | 0) == 0 & $69 >>> 0 < $21 >>> 0) {
   $95 = $56; //@line 6124
   $96 = $57; //@line 6124
  } else {
   $80 = _i64Add($56 | 0, $57 | 0, 1, 0) | 0; //@line 6126
   $81 = tempRet0; //@line 6127
   $82 = _i64Subtract($69 | 0, $70 | 0, $21 | 0, 0) | 0; //@line 6128
   $84 = $62; //@line 6130
   HEAP32[$84 >> 2] = $82; //@line 6132
   HEAP32[$84 + 4 >> 2] = tempRet0; //@line 6135
   $95 = $80; //@line 6136
   $96 = $81; //@line 6136
  }
 }
 $88 = $3 + 48 | 0; //@line 6139
 $89 = $88; //@line 6140
 $97 = _i64Add(HEAP32[$89 >> 2] | 0, HEAP32[$89 + 4 >> 2] | 0, $95 | 0, $96 | 0) | 0; //@line 6146
 $99 = $88; //@line 6148
 HEAP32[$99 >> 2] = $97; //@line 6150
 HEAP32[$99 + 4 >> 2] = tempRet0; //@line 6153
 $103 = HEAP32[$2 >> 2] | 0; //@line 6154
 $104 = $103 + 48 | 0; //@line 6155
 $105 = $104; //@line 6156
 $106 = $105; //@line 6157
 $107 = HEAP32[$106 >> 2] | 0; //@line 6158
 $108 = $105 + 4 | 0; //@line 6159
 $109 = $108; //@line 6160
 $110 = HEAP32[$109 >> 2] | 0; //@line 6161
 tempRet0 = $110; //@line 6162
 return $107 | 0; //@line 6163
}
function _mbed_vtracef__async_cb_124($0) {
 $0 = $0 | 0;
 var $$10 = 0, $$3147168 = 0, $$3169 = 0, $$5156 = 0, $$5156$ = 0, $$expand_i1_val = 0, $10 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $24 = 0, $28 = 0, $32 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $50 = 0, $53 = 0, $54 = 0, $56 = 0, $6 = 0, $67 = 0, $68 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 25567
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25569
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25571
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25573
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25575
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25577
 $16 = HEAP8[$0 + 32 >> 0] & 1; //@line 25584
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 25586
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 25588
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 25592
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 25596
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 25600
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 25604
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 25606
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 25608
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 25610
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 25612
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 25614
 HEAP32[$6 >> 2] = HEAP32[___async_retval >> 2]; //@line 25619
 $50 = _snprintf($8, $10, 12240, $6) | 0; //@line 25620
 $$10 = ($50 | 0) >= ($10 | 0) ? 0 : $50; //@line 25622
 $53 = $8 + $$10 | 0; //@line 25624
 $54 = $10 - $$10 | 0; //@line 25625
 if (($$10 | 0) > 0) {
  if (($54 | 0) > 0) {
   $$3147168 = $54; //@line 25629
   $$3169 = $53; //@line 25629
   label = 4; //@line 25630
  }
 } else {
  $$3147168 = $10; //@line 25633
  $$3169 = $8; //@line 25633
  label = 4; //@line 25634
 }
 if ((label | 0) == 4) {
  $56 = $44 + -2 | 0; //@line 25637
  switch ($56 >>> 1 | $56 << 31 | 0) {
  case 0:
   {
    HEAP32[$46 >> 2] = $20; //@line 25643
    $$5156 = _snprintf($$3169, $$3147168, 12243, $46) | 0; //@line 25645
    break;
   }
  case 1:
   {
    HEAP32[$24 >> 2] = $20; //@line 25649
    $$5156 = _snprintf($$3169, $$3147168, 12258, $24) | 0; //@line 25651
    break;
   }
  case 3:
   {
    HEAP32[$18 >> 2] = $20; //@line 25655
    $$5156 = _snprintf($$3169, $$3147168, 12273, $18) | 0; //@line 25657
    break;
   }
  case 7:
   {
    HEAP32[$32 >> 2] = $20; //@line 25661
    $$5156 = _snprintf($$3169, $$3147168, 12288, $32) | 0; //@line 25663
    break;
   }
  default:
   {
    $$5156 = _snprintf($$3169, $$3147168, 12303, $28) | 0; //@line 25668
   }
  }
  $$5156$ = ($$5156 | 0) < ($$3147168 | 0) ? $$5156 : 0; //@line 25672
  $67 = $$3169 + $$5156$ | 0; //@line 25674
  $68 = $$3147168 - $$5156$ | 0; //@line 25675
  if (($$5156$ | 0) > 0 & ($68 | 0) > 0) {
   $ReallocAsyncCtx10 = _emscripten_realloc_async_context(32) | 0; //@line 25679
   $70 = _vsnprintf($67, $68, $36, $38) | 0; //@line 25680
   if (___async) {
    HEAP32[$ReallocAsyncCtx10 >> 2] = 146; //@line 25683
    $71 = $ReallocAsyncCtx10 + 4 | 0; //@line 25684
    HEAP32[$71 >> 2] = $2; //@line 25685
    $72 = $ReallocAsyncCtx10 + 8 | 0; //@line 25686
    HEAP32[$72 >> 2] = $4; //@line 25687
    $73 = $ReallocAsyncCtx10 + 12 | 0; //@line 25688
    $$expand_i1_val = $16 & 1; //@line 25689
    HEAP8[$73 >> 0] = $$expand_i1_val; //@line 25690
    $74 = $ReallocAsyncCtx10 + 16 | 0; //@line 25691
    HEAP32[$74 >> 2] = $40; //@line 25692
    $75 = $ReallocAsyncCtx10 + 20 | 0; //@line 25693
    HEAP32[$75 >> 2] = $42; //@line 25694
    $76 = $ReallocAsyncCtx10 + 24 | 0; //@line 25695
    HEAP32[$76 >> 2] = $68; //@line 25696
    $77 = $ReallocAsyncCtx10 + 28 | 0; //@line 25697
    HEAP32[$77 >> 2] = $67; //@line 25698
    sp = STACKTOP; //@line 25699
    return;
   }
   HEAP32[___async_retval >> 2] = $70; //@line 25703
   ___async_unwind = 0; //@line 25704
   HEAP32[$ReallocAsyncCtx10 >> 2] = 146; //@line 25705
   $71 = $ReallocAsyncCtx10 + 4 | 0; //@line 25706
   HEAP32[$71 >> 2] = $2; //@line 25707
   $72 = $ReallocAsyncCtx10 + 8 | 0; //@line 25708
   HEAP32[$72 >> 2] = $4; //@line 25709
   $73 = $ReallocAsyncCtx10 + 12 | 0; //@line 25710
   $$expand_i1_val = $16 & 1; //@line 25711
   HEAP8[$73 >> 0] = $$expand_i1_val; //@line 25712
   $74 = $ReallocAsyncCtx10 + 16 | 0; //@line 25713
   HEAP32[$74 >> 2] = $40; //@line 25714
   $75 = $ReallocAsyncCtx10 + 20 | 0; //@line 25715
   HEAP32[$75 >> 2] = $42; //@line 25716
   $76 = $ReallocAsyncCtx10 + 24 | 0; //@line 25717
   HEAP32[$76 >> 2] = $68; //@line 25718
   $77 = $ReallocAsyncCtx10 + 28 | 0; //@line 25719
   HEAP32[$77 >> 2] = $67; //@line 25720
   sp = STACKTOP; //@line 25721
   return;
  }
 }
 $79 = HEAP32[190] | 0; //@line 25725
 $80 = HEAP32[183] | 0; //@line 25726
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 25727
 FUNCTION_TABLE_vi[$79 & 1023]($80); //@line 25728
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 148; //@line 25731
  sp = STACKTOP; //@line 25732
  return;
 }
 ___async_unwind = 0; //@line 25735
 HEAP32[$ReallocAsyncCtx7 >> 2] = 148; //@line 25736
 sp = STACKTOP; //@line 25737
 return;
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $15 = 0, $16 = 0, $17 = 0, $25 = 0, $28 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $42 = 0, $43 = 0, $46 = 0, $49 = 0, $5 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx16 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 25507
 STACKTOP = STACKTOP + 16 | 0; //@line 25508
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 25508
 $3 = sp; //@line 25509
 $4 = HEAP32[$0 >> 2] | 0; //@line 25510
 $5 = $1 + 12 | 0; //@line 25511
 $6 = HEAP32[$5 >> 2] | 0; //@line 25512
 do {
  if (!$6) {
   $16 = 0; //@line 25516
  } else {
   $9 = HEAP32[$6 + 4 >> 2] | 0; //@line 25519
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 25520
   FUNCTION_TABLE_vii[$9 & 31]($3, $1); //@line 25521
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 575; //@line 25524
    HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 25526
    HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 25528
    HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 25530
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 25532
    HEAP32[$AsyncCtx + 20 >> 2] = $4; //@line 25534
    sp = STACKTOP; //@line 25535
    STACKTOP = sp; //@line 25536
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 25538
    $16 = HEAP32[$5 >> 2] | 0; //@line 25540
    break;
   }
  }
 } while (0);
 $15 = $3 + 12 | 0; //@line 25545
 HEAP32[$15 >> 2] = $16; //@line 25546
 $AsyncCtx12 = _emscripten_alloc_async_context(28, sp) | 0; //@line 25547
 $17 = _equeue_alloc($4, 16) | 0; //@line 25548
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 576; //@line 25551
  HEAP32[$AsyncCtx12 + 4 >> 2] = $15; //@line 25553
  HEAP32[$AsyncCtx12 + 8 >> 2] = $2; //@line 25555
  HEAP32[$AsyncCtx12 + 12 >> 2] = $4; //@line 25557
  HEAP32[$AsyncCtx12 + 16 >> 2] = $1; //@line 25559
  HEAP32[$AsyncCtx12 + 20 >> 2] = $15; //@line 25561
  HEAP32[$AsyncCtx12 + 24 >> 2] = $3; //@line 25563
  sp = STACKTOP; //@line 25564
  STACKTOP = sp; //@line 25565
  return;
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 25567
 do {
  if (!$17) {
   $$0$i = 0; //@line 25571
  } else {
   $25 = HEAP32[$15 >> 2] | 0; //@line 25573
   do {
    if (!$25) {
     $37 = 0; //@line 25577
    } else {
     $28 = HEAP32[$25 + 4 >> 2] | 0; //@line 25580
     $AsyncCtx2 = _emscripten_alloc_async_context(32, sp) | 0; //@line 25581
     FUNCTION_TABLE_vii[$28 & 31]($17, $3); //@line 25582
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 577; //@line 25585
      HEAP32[$AsyncCtx2 + 4 >> 2] = $15; //@line 25587
      HEAP32[$AsyncCtx2 + 8 >> 2] = $17; //@line 25589
      HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 25591
      HEAP32[$AsyncCtx2 + 16 >> 2] = $4; //@line 25593
      HEAP32[$AsyncCtx2 + 20 >> 2] = $1; //@line 25595
      HEAP32[$AsyncCtx2 + 24 >> 2] = $15; //@line 25597
      HEAP32[$AsyncCtx2 + 28 >> 2] = $3; //@line 25599
      sp = STACKTOP; //@line 25600
      STACKTOP = sp; //@line 25601
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx2 | 0); //@line 25603
      $37 = HEAP32[$15 >> 2] | 0; //@line 25605
      break;
     }
    }
   } while (0);
   HEAP32[$17 + 12 >> 2] = $37; //@line 25611
   _equeue_event_delay($17, $2); //@line 25612
   _equeue_event_dtor($17, 302); //@line 25613
   $AsyncCtx9 = _emscripten_alloc_async_context(16, sp) | 0; //@line 25614
   $38 = _equeue_post($4, 303, $17) | 0; //@line 25615
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 578; //@line 25618
    HEAP32[$AsyncCtx9 + 4 >> 2] = $1; //@line 25620
    HEAP32[$AsyncCtx9 + 8 >> 2] = $15; //@line 25622
    HEAP32[$AsyncCtx9 + 12 >> 2] = $3; //@line 25624
    sp = STACKTOP; //@line 25625
    STACKTOP = sp; //@line 25626
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx9 | 0); //@line 25628
    $$0$i = $38; //@line 25629
    break;
   }
  }
 } while (0);
 $42 = $1 + 16 | 0; //@line 25634
 HEAP32[$42 >> 2] = $$0$i; //@line 25635
 $43 = HEAP32[$15 >> 2] | 0; //@line 25636
 do {
  if (!$43) {
   $49 = $$0$i; //@line 25640
  } else {
   $46 = HEAP32[$43 + 8 >> 2] | 0; //@line 25643
   $AsyncCtx6 = _emscripten_alloc_async_context(8, sp) | 0; //@line 25644
   FUNCTION_TABLE_vi[$46 & 1023]($3); //@line 25645
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 579; //@line 25648
    HEAP32[$AsyncCtx6 + 4 >> 2] = $42; //@line 25650
    sp = STACKTOP; //@line 25651
    STACKTOP = sp; //@line 25652
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx6 | 0); //@line 25654
    $49 = HEAP32[$42 >> 2] | 0; //@line 25656
    break;
   }
  }
 } while (0);
 if ($49 | 0) {
  STACKTOP = sp; //@line 25663
  return;
 }
 $AsyncCtx16 = _emscripten_alloc_async_context(4, sp) | 0; //@line 25665
 _mbed_assert_internal(14352, 14370, 57); //@line 25666
 if (___async) {
  HEAP32[$AsyncCtx16 >> 2] = 580; //@line 25669
  sp = STACKTOP; //@line 25670
  STACKTOP = sp; //@line 25671
  return;
 }
 _emscripten_free_async_context($AsyncCtx16 | 0); //@line 25673
 STACKTOP = sp; //@line 25674
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_99($0) {
 $0 = $0 | 0;
 var $$029 = 0, $10 = 0, $14 = 0, $2 = 0, $20 = 0, $24 = 0, $25 = 0, $29 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $43 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 23491
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23493
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23495
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23497
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23499
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23501
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23505
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 23511
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 23515
 switch ($AsyncRetVal | 0) {
 case 0:
  {
   _mbed_tracef(16, 12356, 12707, HEAP32[$0 + 32 >> 2] | 0); //@line 23518
   $$029 = 0; //@line 23519
   break;
  }
 case -1014:
  {
   _mbed_tracef(2, 12356, 12731, $20); //@line 23523
   $24 = $2 + 1892 | 0; //@line 23524
   $25 = HEAP32[$24 >> 2] | 0; //@line 23525
   if (!$25) {
    $$029 = -1014; //@line 23528
   } else {
    $29 = HEAP32[$2 + 2288 >> 2] | 0; //@line 23532
    $31 = HEAP32[$25 + 4 >> 2] | 0; //@line 23534
    $ReallocAsyncCtx7 = _emscripten_realloc_async_context(28) | 0; //@line 23535
    FUNCTION_TABLE_vii[$31 & 31]($14, $2 + 1880 | 0); //@line 23536
    if (___async) {
     HEAP32[$ReallocAsyncCtx7 >> 2] = 217; //@line 23539
     $32 = $ReallocAsyncCtx7 + 4 | 0; //@line 23540
     HEAP32[$32 >> 2] = $24; //@line 23541
     $33 = $ReallocAsyncCtx7 + 8 | 0; //@line 23542
     HEAP32[$33 >> 2] = $14; //@line 23543
     $34 = $ReallocAsyncCtx7 + 12 | 0; //@line 23544
     HEAP32[$34 >> 2] = $29; //@line 23545
     $35 = $ReallocAsyncCtx7 + 16 | 0; //@line 23546
     HEAP32[$35 >> 2] = $14; //@line 23547
     $36 = $ReallocAsyncCtx7 + 20 | 0; //@line 23548
     HEAP32[$36 >> 2] = $6; //@line 23549
     $37 = $ReallocAsyncCtx7 + 24 | 0; //@line 23550
     HEAP32[$37 >> 2] = $8; //@line 23551
     sp = STACKTOP; //@line 23552
     return;
    }
    ___async_unwind = 0; //@line 23555
    HEAP32[$ReallocAsyncCtx7 >> 2] = 217; //@line 23556
    $32 = $ReallocAsyncCtx7 + 4 | 0; //@line 23557
    HEAP32[$32 >> 2] = $24; //@line 23558
    $33 = $ReallocAsyncCtx7 + 8 | 0; //@line 23559
    HEAP32[$33 >> 2] = $14; //@line 23560
    $34 = $ReallocAsyncCtx7 + 12 | 0; //@line 23561
    HEAP32[$34 >> 2] = $29; //@line 23562
    $35 = $ReallocAsyncCtx7 + 16 | 0; //@line 23563
    HEAP32[$35 >> 2] = $14; //@line 23564
    $36 = $ReallocAsyncCtx7 + 20 | 0; //@line 23565
    HEAP32[$36 >> 2] = $6; //@line 23566
    $37 = $ReallocAsyncCtx7 + 24 | 0; //@line 23567
    HEAP32[$37 >> 2] = $8; //@line 23568
    sp = STACKTOP; //@line 23569
    return;
   }
   break;
  }
 default:
  {
   _mbed_tracef(2, 12356, 12766, $10); //@line 23575
   $38 = $2 + 1892 | 0; //@line 23576
   $39 = HEAP32[$38 >> 2] | 0; //@line 23577
   if (!$39) {
    $$029 = $AsyncRetVal; //@line 23580
   } else {
    $43 = HEAP32[$2 + 2288 >> 2] | 0; //@line 23584
    $45 = HEAP32[$39 + 4 >> 2] | 0; //@line 23586
    $ReallocAsyncCtx9 = _emscripten_realloc_async_context(32) | 0; //@line 23587
    FUNCTION_TABLE_vii[$45 & 31]($4, $2 + 1880 | 0); //@line 23588
    if (___async) {
     HEAP32[$ReallocAsyncCtx9 >> 2] = 221; //@line 23591
     $46 = $ReallocAsyncCtx9 + 4 | 0; //@line 23592
     HEAP32[$46 >> 2] = $38; //@line 23593
     $47 = $ReallocAsyncCtx9 + 8 | 0; //@line 23594
     HEAP32[$47 >> 2] = $4; //@line 23595
     $48 = $ReallocAsyncCtx9 + 12 | 0; //@line 23596
     HEAP32[$48 >> 2] = $43; //@line 23597
     $49 = $ReallocAsyncCtx9 + 16 | 0; //@line 23598
     HEAP32[$49 >> 2] = $4; //@line 23599
     $50 = $ReallocAsyncCtx9 + 20 | 0; //@line 23600
     HEAP32[$50 >> 2] = $AsyncRetVal; //@line 23601
     $51 = $ReallocAsyncCtx9 + 24 | 0; //@line 23602
     HEAP32[$51 >> 2] = $6; //@line 23603
     $52 = $ReallocAsyncCtx9 + 28 | 0; //@line 23604
     HEAP32[$52 >> 2] = $8; //@line 23605
     sp = STACKTOP; //@line 23606
     return;
    }
    ___async_unwind = 0; //@line 23609
    HEAP32[$ReallocAsyncCtx9 >> 2] = 221; //@line 23610
    $46 = $ReallocAsyncCtx9 + 4 | 0; //@line 23611
    HEAP32[$46 >> 2] = $38; //@line 23612
    $47 = $ReallocAsyncCtx9 + 8 | 0; //@line 23613
    HEAP32[$47 >> 2] = $4; //@line 23614
    $48 = $ReallocAsyncCtx9 + 12 | 0; //@line 23615
    HEAP32[$48 >> 2] = $43; //@line 23616
    $49 = $ReallocAsyncCtx9 + 16 | 0; //@line 23617
    HEAP32[$49 >> 2] = $4; //@line 23618
    $50 = $ReallocAsyncCtx9 + 20 | 0; //@line 23619
    HEAP32[$50 >> 2] = $AsyncRetVal; //@line 23620
    $51 = $ReallocAsyncCtx9 + 24 | 0; //@line 23621
    HEAP32[$51 >> 2] = $6; //@line 23622
    $52 = $ReallocAsyncCtx9 + 28 | 0; //@line 23623
    HEAP32[$52 >> 2] = $8; //@line 23624
    sp = STACKTOP; //@line 23625
    return;
   }
  }
 }
 HEAP32[$6 >> 2] = 6; //@line 23630
 HEAP32[___async_retval >> 2] = $$029; //@line 23632
 return;
}
function __ZL18lora_event_handler11lora_events($0) {
 $0 = $0 | 0;
 var $$07$i = 0, $1 = 0, $10 = 0, $15 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx31 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 7482
 STACKTOP = STACKTOP + 96 | 0; //@line 7483
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96); //@line 7483
 $vararg_buffer11 = sp + 32 | 0; //@line 7484
 $vararg_buffer8 = sp + 24 | 0; //@line 7485
 $vararg_buffer4 = sp + 16 | 0; //@line 7486
 $vararg_buffer1 = sp + 8 | 0; //@line 7487
 $vararg_buffer = sp; //@line 7488
 $1 = sp + 36 | 0; //@line 7489
 switch ($0 | 0) {
 case 0:
  {
   $AsyncCtx31 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7492
   _puts(16143) | 0; //@line 7493
   if (___async) {
    HEAP32[$AsyncCtx31 >> 2] = 677; //@line 7496
    sp = STACKTOP; //@line 7497
    STACKTOP = sp; //@line 7498
    return;
   }
   _emscripten_free_async_context($AsyncCtx31 | 0); //@line 7500
   STACKTOP = sp; //@line 7501
   return;
  }
 case 1:
  {
   __ZN6events10EventQueue14break_dispatchEv(23624); //@line 7505
   $AsyncCtx27 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7506
   _puts(16167) | 0; //@line 7507
   if (___async) {
    HEAP32[$AsyncCtx27 >> 2] = 678; //@line 7510
    sp = STACKTOP; //@line 7511
    STACKTOP = sp; //@line 7512
    return;
   }
   _emscripten_free_async_context($AsyncCtx27 | 0); //@line 7514
   STACKTOP = sp; //@line 7515
   return;
  }
 case 2:
  {
   $AsyncCtx23 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7519
   _puts(16193) | 0; //@line 7520
   if (___async) {
    HEAP32[$AsyncCtx23 >> 2] = 679; //@line 7523
    sp = STACKTOP; //@line 7524
    STACKTOP = sp; //@line 7525
    return;
   }
   _emscripten_free_async_context($AsyncCtx23 | 0); //@line 7527
   STACKTOP = sp; //@line 7528
   return;
  }
 case 6:
 case 5:
 case 4:
 case 3:
  {
   HEAP32[$vararg_buffer >> 2] = $0; //@line 7532
   _printf(16224, $vararg_buffer) | 0; //@line 7533
   STACKTOP = sp; //@line 7534
   return;
  }
 case 7:
  {
   $AsyncCtx19 = _emscripten_alloc_async_context(32, sp) | 0; //@line 7538
   _puts(16261) | 0; //@line 7539
   if (___async) {
    HEAP32[$AsyncCtx19 >> 2] = 680; //@line 7542
    HEAP32[$AsyncCtx19 + 4 >> 2] = $1; //@line 7544
    HEAP32[$AsyncCtx19 + 8 >> 2] = $vararg_buffer1; //@line 7546
    HEAP32[$AsyncCtx19 + 12 >> 2] = $vararg_buffer1; //@line 7548
    HEAP32[$AsyncCtx19 + 16 >> 2] = $vararg_buffer4; //@line 7550
    HEAP32[$AsyncCtx19 + 20 >> 2] = $vararg_buffer4; //@line 7552
    HEAP32[$AsyncCtx19 + 24 >> 2] = $vararg_buffer8; //@line 7554
    HEAP32[$AsyncCtx19 + 28 >> 2] = $vararg_buffer8; //@line 7556
    sp = STACKTOP; //@line 7557
    STACKTOP = sp; //@line 7558
    return;
   }
   _emscripten_free_async_context($AsyncCtx19 | 0); //@line 7560
   dest = $1; //@line 7561
   stop = dest + 50 | 0; //@line 7561
   do {
    HEAP8[dest >> 0] = 0; //@line 7561
    dest = dest + 1 | 0; //@line 7561
   } while ((dest | 0) < (stop | 0));
   $9 = __ZN16LoRaWANInterface7receiveEhPhti(23828, 15, $1, 50, 3) | 0; //@line 7562
   $10 = $9 << 16 >> 16; //@line 7563
   do {
    if ($9 << 16 >> 16 < 0) {
     HEAP32[$vararg_buffer1 >> 2] = $10; //@line 7567
     _printf(16298, $vararg_buffer1) | 0; //@line 7568
    } else {
     HEAP32[$vararg_buffer4 >> 2] = 15; //@line 7570
     HEAP32[$vararg_buffer4 + 4 >> 2] = $10; //@line 7572
     _printf(16325, $vararg_buffer4) | 0; //@line 7573
     if ($9 << 16 >> 16) {
      $$07$i = 0; //@line 7576
      $15 = 0; //@line 7576
      do {
       HEAP32[$vararg_buffer8 >> 2] = HEAPU8[$1 + $15 >> 0]; //@line 7581
       _printf(16364, $vararg_buffer8) | 0; //@line 7582
       $$07$i = $$07$i + 1 << 24 >> 24; //@line 7583
       $15 = $$07$i & 255; //@line 7584
      } while (($15 | 0) < ($10 | 0));
     }
     $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 7593
     _putchar(10) | 0; //@line 7594
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 681; //@line 7597
      HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 7599
      sp = STACKTOP; //@line 7600
      STACKTOP = sp; //@line 7601
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 7603
      break;
     }
    }
   } while (0);
   STACKTOP = sp; //@line 7608
   return;
  }
 case 9:
 case 8:
  {
   HEAP32[$vararg_buffer11 >> 2] = $0; //@line 7612
   _printf(16370, $vararg_buffer11) | 0; //@line 7613
   STACKTOP = sp; //@line 7614
   return;
  }
 case 10:
  {
   $AsyncCtx15 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7618
   _puts(16402) | 0; //@line 7619
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 682; //@line 7622
    sp = STACKTOP; //@line 7623
    STACKTOP = sp; //@line 7624
    return;
   }
   _emscripten_free_async_context($AsyncCtx15 | 0); //@line 7626
   STACKTOP = sp; //@line 7627
   return;
  }
 default:
  {
   STACKTOP = sp; //@line 7631
   return;
  }
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb($0) {
 $0 = $0 | 0;
 var $$pre$i = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 26324
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26326
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26330
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26332
 $10 = HEAP16[$0 + 20 >> 1] | 0; //@line 26334
 $12 = HEAP16[$0 + 22 >> 1] | 0; //@line 26336
 $14 = HEAP8[$0 + 24 >> 0] | 0; //@line 26338
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 26340
 $$pre$i = HEAP32[HEAP32[$0 + 8 >> 2] >> 2] | 0; //@line 26341
 $17 = $6 + 12 | 0; //@line 26342
 HEAP32[$17 >> 2] = $$pre$i; //@line 26343
 if (!$$pre$i) {
  $30 = $2 + 12 | 0; //@line 26346
  HEAP32[$30 >> 2] = 0; //@line 26347
  $31 = $2 + 16 | 0; //@line 26348
  HEAP32[$31 >> 2] = $8; //@line 26349
  HEAP16[$2 + 20 >> 1] = $10; //@line 26351
  HEAP16[$2 + 22 >> 1] = $12; //@line 26353
  HEAP8[$2 + 24 >> 0] = $14; //@line 26355
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 26356
  $35 = _equeue_alloc($16, 28) | 0; //@line 26357
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 355; //@line 26360
   $36 = $ReallocAsyncCtx7 + 4 | 0; //@line 26361
   HEAP32[$36 >> 2] = $31; //@line 26362
   $37 = $ReallocAsyncCtx7 + 8 | 0; //@line 26363
   HEAP32[$37 >> 2] = $16; //@line 26364
   $38 = $ReallocAsyncCtx7 + 12 | 0; //@line 26365
   HEAP32[$38 >> 2] = $2; //@line 26366
   $39 = $ReallocAsyncCtx7 + 16 | 0; //@line 26367
   HEAP32[$39 >> 2] = $30; //@line 26368
   $40 = $ReallocAsyncCtx7 + 20 | 0; //@line 26369
   HEAP32[$40 >> 2] = $17; //@line 26370
   $41 = $ReallocAsyncCtx7 + 24 | 0; //@line 26371
   HEAP32[$41 >> 2] = $6; //@line 26372
   $42 = $ReallocAsyncCtx7 + 28 | 0; //@line 26373
   HEAP32[$42 >> 2] = $30; //@line 26374
   sp = STACKTOP; //@line 26375
   return;
  }
  HEAP32[___async_retval >> 2] = $35; //@line 26379
  ___async_unwind = 0; //@line 26380
  HEAP32[$ReallocAsyncCtx7 >> 2] = 355; //@line 26381
  $36 = $ReallocAsyncCtx7 + 4 | 0; //@line 26382
  HEAP32[$36 >> 2] = $31; //@line 26383
  $37 = $ReallocAsyncCtx7 + 8 | 0; //@line 26384
  HEAP32[$37 >> 2] = $16; //@line 26385
  $38 = $ReallocAsyncCtx7 + 12 | 0; //@line 26386
  HEAP32[$38 >> 2] = $2; //@line 26387
  $39 = $ReallocAsyncCtx7 + 16 | 0; //@line 26388
  HEAP32[$39 >> 2] = $30; //@line 26389
  $40 = $ReallocAsyncCtx7 + 20 | 0; //@line 26390
  HEAP32[$40 >> 2] = $17; //@line 26391
  $41 = $ReallocAsyncCtx7 + 24 | 0; //@line 26392
  HEAP32[$41 >> 2] = $6; //@line 26393
  $42 = $ReallocAsyncCtx7 + 28 | 0; //@line 26394
  HEAP32[$42 >> 2] = $30; //@line 26395
  sp = STACKTOP; //@line 26396
  return;
 } else {
  $20 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 26401
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 26402
  FUNCTION_TABLE_vii[$20 & 31]($2, $6); //@line 26403
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 354; //@line 26406
   $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 26407
   HEAP32[$21 >> 2] = $17; //@line 26408
   $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 26409
   HEAP32[$22 >> 2] = $2; //@line 26410
   $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 26411
   HEAP32[$23 >> 2] = $17; //@line 26412
   $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 26413
   HEAP32[$24 >> 2] = $8; //@line 26414
   $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 26415
   HEAP16[$25 >> 1] = $10; //@line 26416
   $26 = $ReallocAsyncCtx2 + 22 | 0; //@line 26417
   HEAP16[$26 >> 1] = $12; //@line 26418
   $27 = $ReallocAsyncCtx2 + 24 | 0; //@line 26419
   HEAP8[$27 >> 0] = $14; //@line 26420
   $28 = $ReallocAsyncCtx2 + 28 | 0; //@line 26421
   HEAP32[$28 >> 2] = $16; //@line 26422
   $29 = $ReallocAsyncCtx2 + 32 | 0; //@line 26423
   HEAP32[$29 >> 2] = $6; //@line 26424
   sp = STACKTOP; //@line 26425
   return;
  }
  ___async_unwind = 0; //@line 26428
  HEAP32[$ReallocAsyncCtx2 >> 2] = 354; //@line 26429
  $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 26430
  HEAP32[$21 >> 2] = $17; //@line 26431
  $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 26432
  HEAP32[$22 >> 2] = $2; //@line 26433
  $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 26434
  HEAP32[$23 >> 2] = $17; //@line 26435
  $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 26436
  HEAP32[$24 >> 2] = $8; //@line 26437
  $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 26438
  HEAP16[$25 >> 1] = $10; //@line 26439
  $26 = $ReallocAsyncCtx2 + 22 | 0; //@line 26440
  HEAP16[$26 >> 1] = $12; //@line 26441
  $27 = $ReallocAsyncCtx2 + 24 | 0; //@line 26442
  HEAP8[$27 >> 0] = $14; //@line 26443
  $28 = $ReallocAsyncCtx2 + 28 | 0; //@line 26444
  HEAP32[$28 >> 2] = $16; //@line 26445
  $29 = $ReallocAsyncCtx2 + 32 | 0; //@line 26446
  HEAP32[$29 >> 2] = $6; //@line 26447
  sp = STACKTOP; //@line 26448
  return;
 }
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_400($0) {
 $0 = $0 | 0;
 var $10 = 0, $109 = 0, $113 = 0, $12 = 0, $120 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $132 = 0, $135 = 0, $137 = 0, $138 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $4 = 0, $6 = 0, $8 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 30839
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30841
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30843
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30845
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30847
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30849
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30851
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 30853
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 30855
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 30857
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 30859
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 30861
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 30863
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 30865
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 30867
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 30869
 if (HEAP32[___async_retval >> 2] | 0) {
  HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 4 >> 2] = 13; //@line 30876
  return;
 }
 if (((HEAPU8[$6 + -3 + ($2 + 638) >> 0] | 0) << 8 | (HEAPU8[$2 + 638 + $4 >> 0] | 0) | (HEAPU8[$6 + -2 + ($2 + 638) >> 0] | 0) << 16 | (HEAPU8[$6 + -1 + ($2 + 638) >> 0] | 0) << 24 | 0) != (HEAP32[$8 >> 2] | 0)) {
  HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) + 4 >> 2] = 7; //@line 30906
  $132 = $2 + 944 | 0; //@line 30907
  HEAP8[$132 >> 0] = HEAP8[$132 >> 0] | 32; //@line 30910
  $135 = HEAP32[$24 >> 2] | 0; //@line 30911
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 30913
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($135, $2 + 996 | 0, 1); //@line 30914
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 352; //@line 30917
   $137 = $ReallocAsyncCtx5 + 4 | 0; //@line 30918
   HEAP32[$137 >> 2] = $12; //@line 30919
   $138 = $ReallocAsyncCtx5 + 8 | 0; //@line 30920
   HEAP32[$138 >> 2] = $14; //@line 30921
   sp = STACKTOP; //@line 30922
   return;
  }
  ___async_unwind = 0; //@line 30925
  HEAP32[$ReallocAsyncCtx5 >> 2] = 352; //@line 30926
  $137 = $ReallocAsyncCtx5 + 4 | 0; //@line 30927
  HEAP32[$137 >> 2] = $12; //@line 30928
  $138 = $ReallocAsyncCtx5 + 8 | 0; //@line 30929
  HEAP32[$138 >> 2] = $14; //@line 30930
  sp = STACKTOP; //@line 30931
  return;
 }
 if (__Z28compute_skeys_for_join_framePKhS0_tPhS1_(HEAP32[$16 >> 2] | 0, $18, HEAP16[$2 + 946 >> 1] | 0, $20, $22) | 0) {
  HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 4 >> 2] = 13; //@line 30942
  return;
 }
 HEAP32[$2 + 948 >> 2] = (HEAPU8[$2 + 644 >> 0] | 0) << 16 | ((HEAPU8[$2 + 643 >> 0] | 0) << 8 | (HEAPU8[$2 + 642 >> 0] | 0)); //@line 30959
 HEAP32[$2 + 952 >> 2] = (HEAPU8[$2 + 648 >> 0] | 0) << 24 | ((HEAPU8[$2 + 647 >> 0] | 0) << 16 | ((HEAPU8[$2 + 646 >> 0] | 0) << 8 | (HEAPU8[$2 + 645 >> 0] | 0))); //@line 30979
 $99 = HEAP8[$2 + 649 >> 0] | 0; //@line 30981
 HEAP8[$2 + 1129 >> 0] = ($99 & 255) >>> 4 & 7; //@line 30987
 HEAP8[$2 + 1136 >> 0] = $99 & 15; //@line 30990
 $109 = HEAP8[$2 + 650 >> 0] & 15; //@line 30993
 $113 = $109 << 24 >> 24 == 0 ? 1e3 : ($109 & 255) * 1e3 | 0; //@line 30998
 HEAP32[$2 + 1112 >> 2] = $113; //@line 30999
 HEAP32[$2 + 1116 >> 2] = $113 + 1e3; //@line 31002
 HEAP32[$26 >> 2] = $2 + 651; //@line 31004
 HEAP8[$26 + 4 >> 0] = $6 + 239; //@line 31008
 $120 = HEAP32[$28 >> 2] | 0; //@line 31009
 $123 = HEAP32[(HEAP32[$120 >> 2] | 0) + 20 >> 2] | 0; //@line 31012
 $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 31013
 FUNCTION_TABLE_vii[$123 & 31]($120, $26); //@line 31014
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 323; //@line 31017
  $124 = $ReallocAsyncCtx + 4 | 0; //@line 31018
  HEAP32[$124 >> 2] = $2; //@line 31019
  $125 = $ReallocAsyncCtx + 8 | 0; //@line 31020
  HEAP32[$125 >> 2] = $30; //@line 31021
  $126 = $ReallocAsyncCtx + 12 | 0; //@line 31022
  HEAP32[$126 >> 2] = $24; //@line 31023
  $127 = $ReallocAsyncCtx + 16 | 0; //@line 31024
  HEAP32[$127 >> 2] = $12; //@line 31025
  $128 = $ReallocAsyncCtx + 20 | 0; //@line 31026
  HEAP32[$128 >> 2] = $14; //@line 31027
  sp = STACKTOP; //@line 31028
  return;
 }
 ___async_unwind = 0; //@line 31031
 HEAP32[$ReallocAsyncCtx >> 2] = 323; //@line 31032
 $124 = $ReallocAsyncCtx + 4 | 0; //@line 31033
 HEAP32[$124 >> 2] = $2; //@line 31034
 $125 = $ReallocAsyncCtx + 8 | 0; //@line 31035
 HEAP32[$125 >> 2] = $30; //@line 31036
 $126 = $ReallocAsyncCtx + 12 | 0; //@line 31037
 HEAP32[$126 >> 2] = $24; //@line 31038
 $127 = $ReallocAsyncCtx + 16 | 0; //@line 31039
 HEAP32[$127 >> 2] = $12; //@line 31040
 $128 = $ReallocAsyncCtx + 20 | 0; //@line 31041
 HEAP32[$128 >> 2] = $14; //@line 31042
 sp = STACKTOP; //@line 31043
 return;
}
function __Z15encrypt_payloadPKhtS0_jhjPh($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$044$lcssa$off0 = 0, $$04458 = 0, $$045$lcssa = 0, $$04557 = 0, $$048$lcssa = 0, $$1 = 0, $101 = 0, $107 = 0, $113 = 0, $119 = 0, $125 = 0, $126 = 0, $127 = 0, $134 = 0, $136 = 0, $27 = 0, $29 = 0, $35 = 0, $41 = 0, $47 = 0, $53 = 0, $59 = 0, $65 = 0, $7 = 0, $71 = 0, $77 = 0, $83 = 0, $89 = 0, $95 = 0, $indvars$iv = 0, $wide$trip$count = 0, label = 0;
 _mbedtls_aes_init(23256); //@line 20701
 $7 = _mbedtls_aes_setkey_enc(23256, $2, 128) | 0; //@line 20702
 if ($7 | 0) {
  $$1 = $7; //@line 20705
  _mbedtls_aes_free(23256); //@line 20706
  return $$1 | 0; //@line 20707
 }
 HEAP8[14262] = $4; //@line 20709
 HEAP8[14263] = $3; //@line 20711
 HEAP8[14264] = $3 >>> 8; //@line 20714
 HEAP8[14265] = $3 >>> 16; //@line 20717
 HEAP8[14266] = $3 >>> 24; //@line 20720
 HEAP8[14267] = $5; //@line 20722
 HEAP8[14268] = $5 >>> 8; //@line 20725
 HEAP8[14269] = $5 >>> 16; //@line 20728
 HEAP8[14270] = $5 >>> 24; //@line 20731
 do {
  if (($1 & 65535) > 15) {
   $$04458 = 1; //@line 20736
   $$04557 = 0; //@line 20736
   $126 = $1 & 65535; //@line 20736
   while (1) {
    HEAP8[14272] = $$04458; //@line 20739
    $$04458 = $$04458 + 1 << 16 >> 16; //@line 20740
    $27 = _mbedtls_aes_crypt_ecb(23256, 1, 14257, 24516) | 0; //@line 20741
    if ($27 | 0) {
     $$1 = $27; //@line 20744
     label = 11; //@line 20745
     break;
    }
    $29 = $$04557 & 255; //@line 20748
    HEAP8[$6 + $29 >> 0] = HEAP8[24516] ^ HEAP8[$0 + $29 >> 0]; //@line 20754
    $35 = $29 + 1 | 0; //@line 20755
    HEAP8[$6 + $35 >> 0] = HEAP8[24517] ^ HEAP8[$0 + $35 >> 0]; //@line 20761
    $41 = $29 + 2 | 0; //@line 20762
    HEAP8[$6 + $41 >> 0] = HEAP8[24518] ^ HEAP8[$0 + $41 >> 0]; //@line 20768
    $47 = $29 + 3 | 0; //@line 20769
    HEAP8[$6 + $47 >> 0] = HEAP8[24519] ^ HEAP8[$0 + $47 >> 0]; //@line 20775
    $53 = $29 + 4 | 0; //@line 20776
    HEAP8[$6 + $53 >> 0] = HEAP8[24520] ^ HEAP8[$0 + $53 >> 0]; //@line 20782
    $59 = $29 + 5 | 0; //@line 20783
    HEAP8[$6 + $59 >> 0] = HEAP8[24521] ^ HEAP8[$0 + $59 >> 0]; //@line 20789
    $65 = $29 + 6 | 0; //@line 20790
    HEAP8[$6 + $65 >> 0] = HEAP8[24522] ^ HEAP8[$0 + $65 >> 0]; //@line 20796
    $71 = $29 + 7 | 0; //@line 20797
    HEAP8[$6 + $71 >> 0] = HEAP8[24523] ^ HEAP8[$0 + $71 >> 0]; //@line 20803
    $77 = $29 + 8 | 0; //@line 20804
    HEAP8[$6 + $77 >> 0] = HEAP8[24524] ^ HEAP8[$0 + $77 >> 0]; //@line 20810
    $83 = $29 + 9 | 0; //@line 20811
    HEAP8[$6 + $83 >> 0] = HEAP8[24525] ^ HEAP8[$0 + $83 >> 0]; //@line 20817
    $89 = $29 + 10 | 0; //@line 20818
    HEAP8[$6 + $89 >> 0] = HEAP8[24526] ^ HEAP8[$0 + $89 >> 0]; //@line 20824
    $95 = $29 + 11 | 0; //@line 20825
    HEAP8[$6 + $95 >> 0] = HEAP8[24527] ^ HEAP8[$0 + $95 >> 0]; //@line 20831
    $101 = $29 + 12 | 0; //@line 20832
    HEAP8[$6 + $101 >> 0] = HEAP8[24528] ^ HEAP8[$0 + $101 >> 0]; //@line 20838
    $107 = $29 + 13 | 0; //@line 20839
    HEAP8[$6 + $107 >> 0] = HEAP8[24529] ^ HEAP8[$0 + $107 >> 0]; //@line 20845
    $113 = $29 + 14 | 0; //@line 20846
    HEAP8[$6 + $113 >> 0] = HEAP8[24530] ^ HEAP8[$0 + $113 >> 0]; //@line 20852
    $119 = $29 + 15 | 0; //@line 20853
    HEAP8[$6 + $119 >> 0] = HEAP8[24531] ^ HEAP8[$0 + $119 >> 0]; //@line 20859
    $125 = $126 + 65520 | 0; //@line 20860
    $127 = $125 & 65535; //@line 20861
    if (($127 & 65535) <= 15) {
     label = 6; //@line 20869
     break;
    } else {
     $$04557 = $29 + 16 & 255; //@line 20867
     $126 = $125 & 65535; //@line 20867
    }
   }
   if ((label | 0) == 6) {
    $$044$lcssa$off0 = $$04458 & 255; //@line 20877
    $$045$lcssa = $$04557 + 16 & 255; //@line 20877
    $$048$lcssa = $127; //@line 20877
    break;
   } else if ((label | 0) == 11) {
    _mbedtls_aes_free(23256); //@line 20881
    return $$1 | 0; //@line 20882
   }
  } else {
   $$044$lcssa$off0 = 1; //@line 20885
   $$045$lcssa = 0; //@line 20885
   $$048$lcssa = $1; //@line 20885
  }
 } while (0);
 if (!($$048$lcssa << 16 >> 16)) {
  $$1 = 0; //@line 20890
  _mbedtls_aes_free(23256); //@line 20891
  return $$1 | 0; //@line 20892
 }
 HEAP8[14272] = $$044$lcssa$off0; //@line 20894
 $134 = _mbedtls_aes_crypt_ecb(23256, 1, 14257, 24516) | 0; //@line 20895
 if ($134 | 0) {
  $$1 = $134; //@line 20898
  _mbedtls_aes_free(23256); //@line 20899
  return $$1 | 0; //@line 20900
 }
 $wide$trip$count = $$048$lcssa & 65535; //@line 20902
 $indvars$iv = 0; //@line 20903
 do {
  $136 = $indvars$iv + $$045$lcssa | 0; //@line 20905
  HEAP8[$6 + $136 >> 0] = HEAP8[24516 + $indvars$iv >> 0] ^ HEAP8[$0 + $136 >> 0]; //@line 20912
  $indvars$iv = $indvars$iv + 1 | 0; //@line 20913
 } while (($indvars$iv | 0) != ($wide$trip$count | 0));
 $$1 = 0; //@line 20916
 _mbedtls_aes_free(23256); //@line 20922
 return $$1 | 0; //@line 20923
}
function __ZN7LoRaPHY13apply_cf_listEP15cflist_params_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$01314 = 0, $$015 = 0, $15 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $30 = 0, $33 = 0, $34 = 0, $37 = 0, $43 = 0, $49 = 0, $54 = 0, $71 = 0, $86 = 0, $91 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 22226
 STACKTOP = STACKTOP + 16 | 0; //@line 22227
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 22227
 $2 = sp; //@line 22228
 if (!(HEAP8[$0 + 15 >> 0] | 0)) {
  STACKTOP = sp; //@line 22233
  return;
 }
 $15 = $2 + 8 | 0; //@line 22244
 HEAP8[$15 >> 0] = HEAPU8[$0 + 31 >> 0] << 4 | HEAPU8[$0 + 30 >> 0]; //@line 22245
 L4 : do {
  if ((HEAP8[$1 + 4 >> 0] | 0) == 16) {
   $19 = $0 + 18 | 0; //@line 22251
   $20 = HEAP8[$19 >> 0] | 0; //@line 22252
   $21 = $0 + 20 | 0; //@line 22253
   if (($20 & 255) < (HEAPU8[$21 >> 0] | 0)) {
    $24 = $0 + 19 | 0; //@line 22257
    $25 = $2 + 4 | 0; //@line 22258
    $$01314 = 0; //@line 22259
    $$015 = $20; //@line 22259
    $30 = $20; //@line 22259
    while (1) {
     if ((($30 & 255) + (HEAPU8[$24 >> 0] | 0) | 0) >>> 0 > ($$015 & 255) >>> 0) {
      $33 = HEAP32[$1 >> 2] | 0; //@line 22268
      $34 = $$01314 & 255; //@line 22269
      $37 = HEAPU8[$33 + $34 >> 0] | 0; //@line 22272
      HEAP32[$2 >> 2] = $37; //@line 22273
      $43 = HEAPU8[$33 + ($34 + 1) >> 0] << 8 | $37; //@line 22279
      HEAP32[$2 >> 2] = $43; //@line 22280
      $49 = HEAPU8[$33 + ($34 + 2) >> 0] << 16 | $43; //@line 22286
      HEAP32[$2 >> 2] = $49 * 100; //@line 22288
      HEAP32[$25 >> 2] = 0; //@line 22289
      if (!$49) {
       label = 11; //@line 22292
      } else {
       $54 = HEAP32[(HEAP32[$0 >> 2] | 0) + 60 >> 2] | 0; //@line 22296
       $AsyncCtx = _emscripten_alloc_async_context(56, sp) | 0; //@line 22297
       FUNCTION_TABLE_iiii[$54 & 15]($0, $2, $$015) | 0; //@line 22298
       if (___async) {
        label = 9; //@line 22301
        break;
       }
       _emscripten_free_async_context($AsyncCtx | 0); //@line 22304
      }
     } else {
      HEAP32[$2 >> 2] = 0; //@line 22307
      HEAP8[$15 >> 0] = 0; //@line 22308
      HEAP32[$25 >> 2] = 0; //@line 22309
      label = 11; //@line 22310
     }
     if ((label | 0) == 11) {
      label = 0; //@line 22313
      $71 = HEAP32[(HEAP32[$0 >> 2] | 0) + 64 >> 2] | 0; //@line 22316
      $AsyncCtx3 = _emscripten_alloc_async_context(56, sp) | 0; //@line 22317
      FUNCTION_TABLE_iii[$71 & 31]($0, $$015) | 0; //@line 22318
      if (___async) {
       label = 12; //@line 22321
       break;
      }
      _emscripten_free_async_context($AsyncCtx3 | 0); //@line 22324
     }
     $86 = HEAP8[$19 >> 0] | 0; //@line 22326
     $91 = $$015 + 1 << 24 >> 24; //@line 22331
     if (($91 & 255) < (HEAPU8[$21 >> 0] | 0)) {
      $$01314 = ($86 & 255) + ($$01314 & 255) & 255; //@line 22335
      $$015 = $91; //@line 22335
      $30 = $86; //@line 22335
     } else {
      break L4;
     }
    }
    if ((label | 0) == 9) {
     HEAP32[$AsyncCtx >> 2] = 529; //@line 22341
     HEAP32[$AsyncCtx + 4 >> 2] = $19; //@line 22343
     HEAP8[$AsyncCtx + 8 >> 0] = $$01314; //@line 22345
     HEAP8[$AsyncCtx + 9 >> 0] = $$015; //@line 22347
     HEAP32[$AsyncCtx + 12 >> 2] = $21; //@line 22349
     HEAP32[$AsyncCtx + 16 >> 2] = $24; //@line 22351
     HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 22353
     HEAP32[$AsyncCtx + 24 >> 2] = $1; //@line 22355
     HEAP32[$AsyncCtx + 28 >> 2] = $2; //@line 22357
     HEAP32[$AsyncCtx + 32 >> 2] = $25; //@line 22359
     HEAP32[$AsyncCtx + 36 >> 2] = $15; //@line 22361
     HEAP32[$AsyncCtx + 40 >> 2] = $0; //@line 22363
     HEAP32[$AsyncCtx + 44 >> 2] = $0; //@line 22365
     HEAP32[$AsyncCtx + 48 >> 2] = $0; //@line 22367
     HEAP32[$AsyncCtx + 52 >> 2] = $2; //@line 22369
     sp = STACKTOP; //@line 22370
     STACKTOP = sp; //@line 22371
     return;
    } else if ((label | 0) == 12) {
     HEAP32[$AsyncCtx3 >> 2] = 530; //@line 22374
     HEAP32[$AsyncCtx3 + 4 >> 2] = $19; //@line 22376
     HEAP8[$AsyncCtx3 + 8 >> 0] = $$01314; //@line 22378
     HEAP8[$AsyncCtx3 + 9 >> 0] = $$015; //@line 22380
     HEAP32[$AsyncCtx3 + 12 >> 2] = $21; //@line 22382
     HEAP32[$AsyncCtx3 + 16 >> 2] = $24; //@line 22384
     HEAP32[$AsyncCtx3 + 20 >> 2] = $2; //@line 22386
     HEAP32[$AsyncCtx3 + 24 >> 2] = $1; //@line 22388
     HEAP32[$AsyncCtx3 + 28 >> 2] = $2; //@line 22390
     HEAP32[$AsyncCtx3 + 32 >> 2] = $25; //@line 22392
     HEAP32[$AsyncCtx3 + 36 >> 2] = $15; //@line 22394
     HEAP32[$AsyncCtx3 + 40 >> 2] = $0; //@line 22396
     HEAP32[$AsyncCtx3 + 44 >> 2] = $0; //@line 22398
     HEAP32[$AsyncCtx3 + 48 >> 2] = $0; //@line 22400
     HEAP32[$AsyncCtx3 + 52 >> 2] = $2; //@line 22402
     sp = STACKTOP; //@line 22403
     STACKTOP = sp; //@line 22404
     return;
    }
   }
  }
 } while (0);
 STACKTOP = sp; //@line 22409
 return;
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_224($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $32 = 0, $33 = 0, $36 = 0, $37 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 3899
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3901
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3903
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3905
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3907
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3909
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 3911
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 3913
 if ($AsyncRetVal | 0) {
  $15 = HEAP32[$10 >> 2] | 0; //@line 3916
  if (!$15) {
   HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 3920
   _equeue_event_delay($AsyncRetVal, $4); //@line 3921
   _equeue_event_dtor($AsyncRetVal, 302); //@line 3922
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 3923
   $27 = _equeue_post($6, 303, $AsyncRetVal) | 0; //@line 3924
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 578; //@line 3927
    $28 = $ReallocAsyncCtx4 + 4 | 0; //@line 3928
    HEAP32[$28 >> 2] = $8; //@line 3929
    $29 = $ReallocAsyncCtx4 + 8 | 0; //@line 3930
    HEAP32[$29 >> 2] = $10; //@line 3931
    $30 = $ReallocAsyncCtx4 + 12 | 0; //@line 3932
    HEAP32[$30 >> 2] = $12; //@line 3933
    sp = STACKTOP; //@line 3934
    return;
   }
   HEAP32[___async_retval >> 2] = $27; //@line 3938
   ___async_unwind = 0; //@line 3939
   HEAP32[$ReallocAsyncCtx4 >> 2] = 578; //@line 3940
   $28 = $ReallocAsyncCtx4 + 4 | 0; //@line 3941
   HEAP32[$28 >> 2] = $8; //@line 3942
   $29 = $ReallocAsyncCtx4 + 8 | 0; //@line 3943
   HEAP32[$29 >> 2] = $10; //@line 3944
   $30 = $ReallocAsyncCtx4 + 12 | 0; //@line 3945
   HEAP32[$30 >> 2] = $12; //@line 3946
   sp = STACKTOP; //@line 3947
   return;
  } else {
   $18 = HEAP32[$15 + 4 >> 2] | 0; //@line 3951
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 3952
   FUNCTION_TABLE_vii[$18 & 31]($AsyncRetVal, $12); //@line 3953
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 577; //@line 3956
    $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 3957
    HEAP32[$19 >> 2] = $2; //@line 3958
    $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 3959
    HEAP32[$20 >> 2] = $AsyncRetVal; //@line 3960
    $21 = $ReallocAsyncCtx2 + 12 | 0; //@line 3961
    HEAP32[$21 >> 2] = $4; //@line 3962
    $22 = $ReallocAsyncCtx2 + 16 | 0; //@line 3963
    HEAP32[$22 >> 2] = $6; //@line 3964
    $23 = $ReallocAsyncCtx2 + 20 | 0; //@line 3965
    HEAP32[$23 >> 2] = $8; //@line 3966
    $24 = $ReallocAsyncCtx2 + 24 | 0; //@line 3967
    HEAP32[$24 >> 2] = $10; //@line 3968
    $25 = $ReallocAsyncCtx2 + 28 | 0; //@line 3969
    HEAP32[$25 >> 2] = $12; //@line 3970
    sp = STACKTOP; //@line 3971
    return;
   }
   ___async_unwind = 0; //@line 3974
   HEAP32[$ReallocAsyncCtx2 >> 2] = 577; //@line 3975
   $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 3976
   HEAP32[$19 >> 2] = $2; //@line 3977
   $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 3978
   HEAP32[$20 >> 2] = $AsyncRetVal; //@line 3979
   $21 = $ReallocAsyncCtx2 + 12 | 0; //@line 3980
   HEAP32[$21 >> 2] = $4; //@line 3981
   $22 = $ReallocAsyncCtx2 + 16 | 0; //@line 3982
   HEAP32[$22 >> 2] = $6; //@line 3983
   $23 = $ReallocAsyncCtx2 + 20 | 0; //@line 3984
   HEAP32[$23 >> 2] = $8; //@line 3985
   $24 = $ReallocAsyncCtx2 + 24 | 0; //@line 3986
   HEAP32[$24 >> 2] = $10; //@line 3987
   $25 = $ReallocAsyncCtx2 + 28 | 0; //@line 3988
   HEAP32[$25 >> 2] = $12; //@line 3989
   sp = STACKTOP; //@line 3990
   return;
  }
 }
 $32 = $8 + 16 | 0; //@line 3994
 HEAP32[$32 >> 2] = 0; //@line 3995
 $33 = HEAP32[$10 >> 2] | 0; //@line 3996
 if ($33 | 0) {
  $36 = HEAP32[$33 + 8 >> 2] | 0; //@line 4000
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 4001
  FUNCTION_TABLE_vi[$36 & 1023]($12); //@line 4002
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 579; //@line 4005
   $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 4006
   HEAP32[$37 >> 2] = $32; //@line 4007
   sp = STACKTOP; //@line 4008
   return;
  }
  ___async_unwind = 0; //@line 4011
  HEAP32[$ReallocAsyncCtx3 >> 2] = 579; //@line 4012
  $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 4013
  HEAP32[$37 >> 2] = $32; //@line 4014
  sp = STACKTOP; //@line 4015
  return;
 }
 if (0) {
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 4022
 _mbed_assert_internal(14352, 14370, 57); //@line 4023
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 580; //@line 4026
  sp = STACKTOP; //@line 4027
  return;
 }
 ___async_unwind = 0; //@line 4030
 HEAP32[$ReallocAsyncCtx6 >> 2] = 580; //@line 4031
 sp = STACKTOP; //@line 4032
 return;
}
function _ticker_read_us__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $15 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $42 = 0, $43 = 0, $44 = 0, $46 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $56 = 0, $58 = 0, $59 = 0, $65 = 0, $66 = 0, $67 = 0, $76 = 0, $77 = 0, $78 = 0, $80 = 0, $84 = 0, $85 = 0, $91 = 0, $92 = 0, $93 = 0, $95 = 0, $99 = 0, $AsyncRetVal = 0, label = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19568
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19570
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 19572
 if (($AsyncRetVal | 0) == (HEAP32[(HEAP32[$2 >> 2] | 0) + 32 >> 2] | 0)) {
  $99 = HEAP32[$2 >> 2] | 0; //@line 19578
  $100 = $99 + 48 | 0; //@line 19579
  $101 = $100; //@line 19580
  $102 = $101; //@line 19581
  $103 = HEAP32[$102 >> 2] | 0; //@line 19582
  $104 = $101 + 4 | 0; //@line 19583
  $105 = $104; //@line 19584
  $106 = HEAP32[$105 >> 2] | 0; //@line 19585
  $107 = ___async_retval; //@line 19586
  $108 = $107; //@line 19587
  $109 = $108; //@line 19588
  HEAP32[$109 >> 2] = $103; //@line 19589
  $110 = $108 + 4 | 0; //@line 19590
  $111 = $110; //@line 19591
  HEAP32[$111 >> 2] = $106; //@line 19592
  return;
 }
 $10 = $4 + 32 | 0; //@line 19595
 $15 = $AsyncRetVal - (HEAP32[$10 >> 2] | 0) & HEAP32[$4 + 12 >> 2]; //@line 19600
 HEAP32[$10 >> 2] = $AsyncRetVal; //@line 19601
 $17 = HEAP32[$4 + 8 >> 2] | 0; //@line 19603
 L5 : do {
  if (($17 | 0) < 1e6) {
   switch ($17 | 0) {
   case 32768:
    {
     break;
    }
   default:
    {
     label = 6; //@line 19612
     break L5;
    }
   }
   $18 = ___muldi3($15 | 0, 0, 1e6, 0) | 0; //@line 19616
   $20 = _bitshift64Lshr($18 | 0, tempRet0 | 0, 15) | 0; //@line 19618
   $21 = tempRet0; //@line 19619
   $24 = $4 + 40 | 0; //@line 19622
   $25 = $24; //@line 19623
   $31 = _i64Add(HEAP32[$25 >> 2] | 0, HEAP32[$25 + 4 >> 2] | 0, $15 * 1e6 & 32704 | 0, 0) | 0; //@line 19629
   $32 = tempRet0; //@line 19630
   $33 = $24; //@line 19631
   HEAP32[$33 >> 2] = $31; //@line 19633
   HEAP32[$33 + 4 >> 2] = $32; //@line 19636
   if ($32 >>> 0 < 0 | ($32 | 0) == 0 & $31 >>> 0 < 32768) {
    $91 = $20; //@line 19643
    $92 = $21; //@line 19643
   } else {
    $42 = _i64Add($20 | 0, $21 | 0, 1, 0) | 0; //@line 19645
    $43 = tempRet0; //@line 19646
    $44 = _i64Add($31 | 0, $32 | 0, -32768, -1) | 0; //@line 19647
    $46 = $24; //@line 19649
    HEAP32[$46 >> 2] = $44; //@line 19651
    HEAP32[$46 + 4 >> 2] = tempRet0; //@line 19654
    $91 = $42; //@line 19655
    $92 = $43; //@line 19655
   }
  } else {
   switch ($17 | 0) {
   case 1e6:
    {
     $91 = $15; //@line 19660
     $92 = 0; //@line 19660
     break;
    }
   default:
    {
     label = 6; //@line 19664
    }
   }
  }
 } while (0);
 if ((label | 0) == 6) {
  $50 = ___muldi3($15 | 0, 0, 1e6, 0) | 0; //@line 19670
  $51 = tempRet0; //@line 19671
  $52 = ___udivdi3($50 | 0, $51 | 0, $17 | 0, 0) | 0; //@line 19672
  $53 = tempRet0; //@line 19673
  $54 = ___muldi3($52 | 0, $53 | 0, $17 | 0, 0) | 0; //@line 19674
  $56 = _i64Subtract($50 | 0, $51 | 0, $54 | 0, tempRet0 | 0) | 0; //@line 19676
  $58 = $4 + 40 | 0; //@line 19678
  $59 = $58; //@line 19679
  $65 = _i64Add($56 | 0, tempRet0 | 0, HEAP32[$59 >> 2] | 0, HEAP32[$59 + 4 >> 2] | 0) | 0; //@line 19685
  $66 = tempRet0; //@line 19686
  $67 = $58; //@line 19687
  HEAP32[$67 >> 2] = $65; //@line 19689
  HEAP32[$67 + 4 >> 2] = $66; //@line 19692
  if ($66 >>> 0 < 0 | ($66 | 0) == 0 & $65 >>> 0 < $17 >>> 0) {
   $91 = $52; //@line 19699
   $92 = $53; //@line 19699
  } else {
   $76 = _i64Add($52 | 0, $53 | 0, 1, 0) | 0; //@line 19701
   $77 = tempRet0; //@line 19702
   $78 = _i64Subtract($65 | 0, $66 | 0, $17 | 0, 0) | 0; //@line 19703
   $80 = $58; //@line 19705
   HEAP32[$80 >> 2] = $78; //@line 19707
   HEAP32[$80 + 4 >> 2] = tempRet0; //@line 19710
   $91 = $76; //@line 19711
   $92 = $77; //@line 19711
  }
 }
 $84 = $4 + 48 | 0; //@line 19714
 $85 = $84; //@line 19715
 $93 = _i64Add(HEAP32[$85 >> 2] | 0, HEAP32[$85 + 4 >> 2] | 0, $91 | 0, $92 | 0) | 0; //@line 19721
 $95 = $84; //@line 19723
 HEAP32[$95 >> 2] = $93; //@line 19725
 HEAP32[$95 + 4 >> 2] = tempRet0; //@line 19728
 $99 = HEAP32[$2 >> 2] | 0; //@line 19729
 $100 = $99 + 48 | 0; //@line 19730
 $101 = $100; //@line 19731
 $102 = $101; //@line 19732
 $103 = HEAP32[$102 >> 2] | 0; //@line 19733
 $104 = $101 + 4 | 0; //@line 19734
 $105 = $104; //@line 19735
 $106 = HEAP32[$105 >> 2] | 0; //@line 19736
 $107 = ___async_retval; //@line 19737
 $108 = $107; //@line 19738
 $109 = $108; //@line 19739
 HEAP32[$109 >> 2] = $103; //@line 19740
 $110 = $108 + 4 | 0; //@line 19741
 $111 = $110; //@line 19742
 HEAP32[$111 >> 2] = $106; //@line 19743
 return;
}
function __ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_178($0) {
 $0 = $0 | 0;
 var $$05$i = 0, $$06$i = 0, $10 = 0, $12 = 0, $14 = 0, $15 = 0, $2 = 0, $37 = 0, $4 = 0, $49 = 0, $52 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $67 = 0, $68 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 30340
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30342
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30344
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30346
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30348
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30350
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30352
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 30354
 $15 = $2 + 968 | 0; //@line 30355
 HEAP32[$15 >> 2] = HEAP32[$15 >> 2] & -17; //@line 30358
 if (HEAP8[$2 + 944 >> 0] & 8) {
  if (!(HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) >> 2] | 0)) {
   HEAP8[$2 + 372 >> 0] = 0; //@line 30371
   HEAP32[$2 + 956 >> 2] = 0; //@line 30373
   HEAP32[$2 + 960 >> 2] = 0; //@line 30375
   HEAP32[$2 + 964 >> 2] = 0; //@line 30377
   HEAP8[$2 + 380 >> 0] = 0; //@line 30379
   HEAP8[$2 + 894 >> 0] = 1; //@line 30381
   HEAP8[$2 + 895 >> 0] = 1; //@line 30383
   HEAP8[$2 + 377 >> 0] = 0; //@line 30385
   HEAP8[$2 + 1152 >> 0] = 0; //@line 30387
   HEAP16[$2 + 1154 >> 1] = 1; //@line 30389
   $37 = $2 + 4 | 0; //@line 30390
   __ZN14LoRaMacCommand20clear_command_bufferEv($37); //@line 30391
   __ZN14LoRaMacCommand19clear_repeat_bufferEv($37); //@line 30392
   __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($37); //@line 30393
   HEAP8[$2 + 371 >> 0] = 1; //@line 30395
   __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb(HEAP32[$2 >> 2] | 0, $2 + 360 | 0, 0); //@line 30397
   HEAP8[$2 + 373 >> 0] = 0; //@line 30399
   HEAP8[$2 + 374 >> 0] = 0; //@line 30401
   $$05$i = HEAP32[$2 + 1208 >> 2] | 0; //@line 30403
   if ($$05$i | 0) {
    $$06$i = $$05$i; //@line 30406
    do {
     HEAP32[$$06$i + 36 >> 2] = 0; //@line 30409
     $$06$i = HEAP32[$$06$i + 40 >> 2] | 0; //@line 30411
    } while (($$06$i | 0) != 0);
   }
   HEAP8[$2 + 378 >> 0] = 0; //@line 30421
   HEAP8[$2 + 379 >> 0] = 0; //@line 30423
   $49 = HEAP32[$2 >> 2] | 0; //@line 30424
   $52 = HEAP32[(HEAP32[$49 >> 2] | 0) + 52 >> 2] | 0; //@line 30427
   $57 = (HEAPU8[$2 + 897 >> 0] | 0) + 1 & 255; //@line 30432
   $ReallocAsyncCtx = _emscripten_realloc_async_context(32) | 0; //@line 30433
   $58 = FUNCTION_TABLE_iii[$52 & 31]($49, $57) | 0; //@line 30434
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 410; //@line 30437
    $59 = $ReallocAsyncCtx + 4 | 0; //@line 30438
    HEAP32[$59 >> 2] = $2; //@line 30439
    $60 = $ReallocAsyncCtx + 8 | 0; //@line 30440
    HEAP32[$60 >> 2] = $4; //@line 30441
    $61 = $ReallocAsyncCtx + 12 | 0; //@line 30442
    HEAP32[$61 >> 2] = $6; //@line 30443
    $62 = $ReallocAsyncCtx + 16 | 0; //@line 30444
    HEAP32[$62 >> 2] = $8; //@line 30445
    $63 = $ReallocAsyncCtx + 20 | 0; //@line 30446
    HEAP32[$63 >> 2] = $10; //@line 30447
    $64 = $ReallocAsyncCtx + 24 | 0; //@line 30448
    HEAP32[$64 >> 2] = $12; //@line 30449
    $65 = $ReallocAsyncCtx + 28 | 0; //@line 30450
    HEAP32[$65 >> 2] = $14; //@line 30451
    sp = STACKTOP; //@line 30452
    return;
   }
   HEAP8[___async_retval >> 0] = $58; //@line 30456
   ___async_unwind = 0; //@line 30457
   HEAP32[$ReallocAsyncCtx >> 2] = 410; //@line 30458
   $59 = $ReallocAsyncCtx + 4 | 0; //@line 30459
   HEAP32[$59 >> 2] = $2; //@line 30460
   $60 = $ReallocAsyncCtx + 8 | 0; //@line 30461
   HEAP32[$60 >> 2] = $4; //@line 30462
   $61 = $ReallocAsyncCtx + 12 | 0; //@line 30463
   HEAP32[$61 >> 2] = $6; //@line 30464
   $62 = $ReallocAsyncCtx + 16 | 0; //@line 30465
   HEAP32[$62 >> 2] = $8; //@line 30466
   $63 = $ReallocAsyncCtx + 20 | 0; //@line 30467
   HEAP32[$63 >> 2] = $10; //@line 30468
   $64 = $ReallocAsyncCtx + 24 | 0; //@line 30469
   HEAP32[$64 >> 2] = $12; //@line 30470
   $65 = $ReallocAsyncCtx + 28 | 0; //@line 30471
   HEAP32[$65 >> 2] = $14; //@line 30472
   sp = STACKTOP; //@line 30473
   return;
  }
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 30477
 __ZN7LoRaMac11schedule_txEv($2) | 0; //@line 30478
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 412; //@line 30481
  $67 = $ReallocAsyncCtx3 + 4 | 0; //@line 30482
  HEAP32[$67 >> 2] = $6; //@line 30483
  $68 = $ReallocAsyncCtx3 + 8 | 0; //@line 30484
  HEAP32[$68 >> 2] = $4; //@line 30485
  sp = STACKTOP; //@line 30486
  return;
 }
 ___async_unwind = 0; //@line 30489
 HEAP32[$ReallocAsyncCtx3 >> 2] = 412; //@line 30490
 $67 = $ReallocAsyncCtx3 + 4 | 0; //@line 30491
 HEAP32[$67 >> 2] = $6; //@line 30492
 $68 = $ReallocAsyncCtx3 + 8 | 0; //@line 30493
 HEAP32[$68 >> 2] = $4; //@line 30494
 sp = STACKTOP; //@line 30495
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_304($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $23 = 0, $26 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $45 = 0, $48 = 0, $52 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 12118
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12124
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12126
 $10 = HEAP8[$0 + 20 >> 0] | 0; //@line 12128
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12130
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 12132
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 12134
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 12136
 if ((HEAP8[$0 + 4 >> 0] | 0) == 7) {
  if (HEAP8[(HEAP32[$0 + 8 >> 2] | 0) + 14 >> 0] | 0) {
   $23 = HEAP32[$6 >> 2] | 0; //@line 12143
   $26 = HEAP32[(HEAP32[$23 >> 2] | 0) + 16 >> 2] | 0; //@line 12146
   $31 = HEAP32[$8 + 8 >> 2] & 65535; //@line 12151
   $34 = (HEAP8[$8 + 18 >> 0] | 0) != 0; //@line 12154
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(32) | 0; //@line 12155
   FUNCTION_TABLE_viiiiiiiiiiiiiii[$26 & 1]($23, 0, 5e4, ($10 & 255) * 1e3 | 0, 0, 83333, 5, $31, 0, 0, 1, 0, 0, 0, $34); //@line 12156
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 536; //@line 12159
    $35 = $ReallocAsyncCtx6 + 4 | 0; //@line 12160
    HEAP32[$35 >> 2] = $8; //@line 12161
    $36 = $ReallocAsyncCtx6 + 8 | 0; //@line 12162
    HEAP32[$36 >> 2] = $12; //@line 12163
    $37 = $ReallocAsyncCtx6 + 12 | 0; //@line 12164
    HEAP32[$37 >> 2] = $14; //@line 12165
    $38 = $ReallocAsyncCtx6 + 16 | 0; //@line 12166
    HEAP32[$38 >> 2] = $16; //@line 12167
    $39 = $ReallocAsyncCtx6 + 20 | 0; //@line 12168
    HEAP32[$39 >> 2] = $6; //@line 12169
    $40 = $ReallocAsyncCtx6 + 24 | 0; //@line 12170
    HEAP8[$40 >> 0] = $10; //@line 12171
    $41 = $ReallocAsyncCtx6 + 28 | 0; //@line 12172
    HEAP32[$41 >> 2] = $18; //@line 12173
    sp = STACKTOP; //@line 12174
    return;
   }
   ___async_unwind = 0; //@line 12177
   HEAP32[$ReallocAsyncCtx6 >> 2] = 536; //@line 12178
   $35 = $ReallocAsyncCtx6 + 4 | 0; //@line 12179
   HEAP32[$35 >> 2] = $8; //@line 12180
   $36 = $ReallocAsyncCtx6 + 8 | 0; //@line 12181
   HEAP32[$36 >> 2] = $12; //@line 12182
   $37 = $ReallocAsyncCtx6 + 12 | 0; //@line 12183
   HEAP32[$37 >> 2] = $14; //@line 12184
   $38 = $ReallocAsyncCtx6 + 16 | 0; //@line 12185
   HEAP32[$38 >> 2] = $16; //@line 12186
   $39 = $ReallocAsyncCtx6 + 20 | 0; //@line 12187
   HEAP32[$39 >> 2] = $6; //@line 12188
   $40 = $ReallocAsyncCtx6 + 24 | 0; //@line 12189
   HEAP8[$40 >> 0] = $10; //@line 12190
   $41 = $ReallocAsyncCtx6 + 28 | 0; //@line 12191
   HEAP32[$41 >> 2] = $18; //@line 12192
   sp = STACKTOP; //@line 12193
   return;
  }
 }
 $42 = HEAP32[$6 >> 2] | 0; //@line 12197
 $45 = HEAP32[(HEAP32[$42 >> 2] | 0) + 16 >> 2] | 0; //@line 12200
 $48 = HEAPU8[$8 + 2 >> 0] | 0; //@line 12203
 $52 = HEAP32[$8 + 8 >> 2] & 65535; //@line 12207
 $55 = (HEAP8[$8 + 18 >> 0] | 0) != 0; //@line 12210
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 12211
 FUNCTION_TABLE_viiiiiiiiiiiiiii[$45 & 1]($42, 1, $48, $10 & 255, 1, 0, 8, $52, 0, 0, 0, 0, 0, 1, $55); //@line 12212
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 537; //@line 12215
  $56 = $ReallocAsyncCtx7 + 4 | 0; //@line 12216
  HEAP32[$56 >> 2] = $8; //@line 12217
  $57 = $ReallocAsyncCtx7 + 8 | 0; //@line 12218
  HEAP32[$57 >> 2] = $12; //@line 12219
  $58 = $ReallocAsyncCtx7 + 12 | 0; //@line 12220
  HEAP32[$58 >> 2] = $14; //@line 12221
  $59 = $ReallocAsyncCtx7 + 16 | 0; //@line 12222
  HEAP32[$59 >> 2] = $16; //@line 12223
  $60 = $ReallocAsyncCtx7 + 20 | 0; //@line 12224
  HEAP32[$60 >> 2] = $6; //@line 12225
  $61 = $ReallocAsyncCtx7 + 24 | 0; //@line 12226
  HEAP8[$61 >> 0] = $10; //@line 12227
  $62 = $ReallocAsyncCtx7 + 28 | 0; //@line 12228
  HEAP32[$62 >> 2] = $18; //@line 12229
  sp = STACKTOP; //@line 12230
  return;
 }
 ___async_unwind = 0; //@line 12233
 HEAP32[$ReallocAsyncCtx7 >> 2] = 537; //@line 12234
 $56 = $ReallocAsyncCtx7 + 4 | 0; //@line 12235
 HEAP32[$56 >> 2] = $8; //@line 12236
 $57 = $ReallocAsyncCtx7 + 8 | 0; //@line 12237
 HEAP32[$57 >> 2] = $12; //@line 12238
 $58 = $ReallocAsyncCtx7 + 12 | 0; //@line 12239
 HEAP32[$58 >> 2] = $14; //@line 12240
 $59 = $ReallocAsyncCtx7 + 16 | 0; //@line 12241
 HEAP32[$59 >> 2] = $16; //@line 12242
 $60 = $ReallocAsyncCtx7 + 20 | 0; //@line 12243
 HEAP32[$60 >> 2] = $6; //@line 12244
 $61 = $ReallocAsyncCtx7 + 24 | 0; //@line 12245
 HEAP8[$61 >> 0] = $10; //@line 12246
 $62 = $ReallocAsyncCtx7 + 28 | 0; //@line 12247
 HEAP32[$62 >> 2] = $18; //@line 12248
 sp = STACKTOP; //@line 12249
 return;
}
function _main__async_cb_442($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $26 = 0, $27 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $6 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 34655
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34657
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34659
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 34661
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 34665
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 34667
 $13 = HEAP32[HEAP32[$0 + 16 >> 2] >> 2] | 0; //@line 34668
 if ($13 | 0) {
  $16 = HEAP32[$13 + 8 >> 2] | 0; //@line 34672
  $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 34673
  FUNCTION_TABLE_vi[$16 & 1023]($12); //@line 34674
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 667; //@line 34677
   $17 = $ReallocAsyncCtx + 4 | 0; //@line 34678
   HEAP32[$17 >> 2] = $4; //@line 34679
   $18 = $ReallocAsyncCtx + 8 | 0; //@line 34680
   HEAP32[$18 >> 2] = $6; //@line 34681
   $19 = $ReallocAsyncCtx + 12 | 0; //@line 34682
   HEAP32[$19 >> 2] = $2; //@line 34683
   $20 = $ReallocAsyncCtx + 16 | 0; //@line 34684
   HEAP32[$20 >> 2] = $10; //@line 34685
   sp = STACKTOP; //@line 34686
   return;
  }
  ___async_unwind = 0; //@line 34689
  HEAP32[$ReallocAsyncCtx >> 2] = 667; //@line 34690
  $17 = $ReallocAsyncCtx + 4 | 0; //@line 34691
  HEAP32[$17 >> 2] = $4; //@line 34692
  $18 = $ReallocAsyncCtx + 8 | 0; //@line 34693
  HEAP32[$18 >> 2] = $6; //@line 34694
  $19 = $ReallocAsyncCtx + 12 | 0; //@line 34695
  HEAP32[$19 >> 2] = $2; //@line 34696
  $20 = $ReallocAsyncCtx + 16 | 0; //@line 34697
  HEAP32[$20 >> 2] = $10; //@line 34698
  sp = STACKTOP; //@line 34699
  return;
 }
 $22 = $10 + 4 | 0; //@line 34703
 HEAP32[$22 >> 2] = 0; //@line 34705
 HEAP32[$22 + 4 >> 2] = 0; //@line 34708
 HEAP32[$10 >> 2] = 668; //@line 34709
 $26 = $10 + 12 | 0; //@line 34710
 HEAP32[$26 >> 2] = 10204; //@line 34711
 $27 = HEAP32[5962] | 0; //@line 34712
 if (!$27) {
  $37 = HEAP32[2552] | 0; //@line 34716
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 34717
  FUNCTION_TABLE_vii[$37 & 31](23836, $10); //@line 34718
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 670; //@line 34721
   $38 = $ReallocAsyncCtx3 + 4 | 0; //@line 34722
   HEAP32[$38 >> 2] = $10; //@line 34723
   $39 = $ReallocAsyncCtx3 + 8 | 0; //@line 34724
   HEAP32[$39 >> 2] = $4; //@line 34725
   $40 = $ReallocAsyncCtx3 + 12 | 0; //@line 34726
   HEAP32[$40 >> 2] = $6; //@line 34727
   $41 = $ReallocAsyncCtx3 + 16 | 0; //@line 34728
   HEAP32[$41 >> 2] = $2; //@line 34729
   $42 = $ReallocAsyncCtx3 + 20 | 0; //@line 34730
   HEAP32[$42 >> 2] = $26; //@line 34731
   sp = STACKTOP; //@line 34732
   return;
  }
  ___async_unwind = 0; //@line 34735
  HEAP32[$ReallocAsyncCtx3 >> 2] = 670; //@line 34736
  $38 = $ReallocAsyncCtx3 + 4 | 0; //@line 34737
  HEAP32[$38 >> 2] = $10; //@line 34738
  $39 = $ReallocAsyncCtx3 + 8 | 0; //@line 34739
  HEAP32[$39 >> 2] = $4; //@line 34740
  $40 = $ReallocAsyncCtx3 + 12 | 0; //@line 34741
  HEAP32[$40 >> 2] = $6; //@line 34742
  $41 = $ReallocAsyncCtx3 + 16 | 0; //@line 34743
  HEAP32[$41 >> 2] = $2; //@line 34744
  $42 = $ReallocAsyncCtx3 + 20 | 0; //@line 34745
  HEAP32[$42 >> 2] = $26; //@line 34746
  sp = STACKTOP; //@line 34747
  return;
 } else {
  $30 = HEAP32[$27 + 8 >> 2] | 0; //@line 34751
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 34752
  FUNCTION_TABLE_vi[$30 & 1023](23836); //@line 34753
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 669; //@line 34756
   $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 34757
   HEAP32[$31 >> 2] = $10; //@line 34758
   $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 34759
   HEAP32[$32 >> 2] = $4; //@line 34760
   $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 34761
   HEAP32[$33 >> 2] = $6; //@line 34762
   $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 34763
   HEAP32[$34 >> 2] = $2; //@line 34764
   $35 = $ReallocAsyncCtx2 + 20 | 0; //@line 34765
   HEAP32[$35 >> 2] = $26; //@line 34766
   sp = STACKTOP; //@line 34767
   return;
  }
  ___async_unwind = 0; //@line 34770
  HEAP32[$ReallocAsyncCtx2 >> 2] = 669; //@line 34771
  $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 34772
  HEAP32[$31 >> 2] = $10; //@line 34773
  $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 34774
  HEAP32[$32 >> 2] = $4; //@line 34775
  $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 34776
  HEAP32[$33 >> 2] = $6; //@line 34777
  $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 34778
  HEAP32[$34 >> 2] = $2; //@line 34779
  $35 = $ReallocAsyncCtx2 + 20 | 0; //@line 34780
  HEAP32[$35 >> 2] = $26; //@line 34781
  sp = STACKTOP; //@line 34782
  return;
 }
}
function _mbedtls_cipher_cmac_finish__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $42 = 0, $44 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $64 = 0, $66 = 0, $68 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4154
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4156
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4158
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4160
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 4162
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 4164
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 4166
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 4168
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 4170
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 4172
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 4174
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 4176
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 4178
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 4180
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 4182
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 4184
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 4186
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 4188
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 4190
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 4194
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 4196
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 4200
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 4202
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 4204
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 4206
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 4208
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 4210
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 4212
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 4216
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 4218
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 4220
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 4224
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 4226
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 4228
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 4230
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 4232
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 4234
 if (!$AsyncRetVal) {
  _memcpy(HEAP32[$0 + 124 >> 2] | 0, $16 | 0, HEAP32[$0 + 80 >> 2] | 0) | 0; //@line 4237
 }
 HEAP8[$38 >> 0] = 0; //@line 4239
 HEAP8[$30 >> 0] = 0; //@line 4240
 HEAP8[$54 >> 0] = 0; //@line 4241
 HEAP8[$4 >> 0] = 0; //@line 4242
 HEAP8[$60 >> 0] = 0; //@line 4243
 HEAP8[$34 >> 0] = 0; //@line 4244
 HEAP8[$6 >> 0] = 0; //@line 4245
 HEAP8[$66 >> 0] = 0; //@line 4246
 HEAP8[$36 >> 0] = 0; //@line 4247
 HEAP8[$8 >> 0] = 0; //@line 4248
 HEAP8[$76 >> 0] = 0; //@line 4249
 HEAP8[$52 >> 0] = 0; //@line 4250
 HEAP8[$10 >> 0] = 0; //@line 4251
 HEAP8[$68 >> 0] = 0; //@line 4252
 HEAP8[$58 >> 0] = 0; //@line 4253
 HEAP8[$2 >> 0] = 0; //@line 4254
 HEAP8[$20 >> 0] = 0; //@line 4255
 HEAP8[$26 >> 0] = 0; //@line 4256
 HEAP8[$74 >> 0] = 0; //@line 4257
 HEAP8[$22 >> 0] = 0; //@line 4258
 HEAP8[$44 >> 0] = 0; //@line 4259
 HEAP8[$50 >> 0] = 0; //@line 4260
 HEAP8[$12 >> 0] = 0; //@line 4261
 HEAP8[$28 >> 0] = 0; //@line 4262
 HEAP8[$56 >> 0] = 0; //@line 4263
 HEAP8[$78 >> 0] = 0; //@line 4264
 HEAP8[$64 >> 0] = 0; //@line 4265
 HEAP8[$32 >> 0] = 0; //@line 4266
 HEAP8[$14 >> 0] = 0; //@line 4267
 HEAP8[$72 >> 0] = 0; //@line 4268
 HEAP8[$42 >> 0] = 0; //@line 4269
 HEAP8[$18 >> 0] = 0; //@line 4270
 HEAP32[$48 >> 2] = 0; //@line 4271
 HEAP8[$24 >> 0] = 0; //@line 4273
 HEAP8[$80 + 17 >> 0] = 0; //@line 4275
 HEAP8[$80 + 18 >> 0] = 0; //@line 4277
 HEAP8[$80 + 19 >> 0] = 0; //@line 4279
 HEAP8[$80 + 20 >> 0] = 0; //@line 4281
 HEAP8[$80 + 21 >> 0] = 0; //@line 4283
 HEAP8[$80 + 22 >> 0] = 0; //@line 4285
 HEAP8[$80 + 23 >> 0] = 0; //@line 4287
 HEAP8[$80 + 24 >> 0] = 0; //@line 4289
 HEAP8[$80 + 25 >> 0] = 0; //@line 4291
 HEAP8[$80 + 26 >> 0] = 0; //@line 4293
 HEAP8[$80 + 27 >> 0] = 0; //@line 4295
 HEAP8[$80 + 28 >> 0] = 0; //@line 4297
 HEAP8[$80 + 29 >> 0] = 0; //@line 4299
 HEAP8[$80 + 30 >> 0] = 0; //@line 4301
 HEAP8[$80 + 31 >> 0] = 0; //@line 4302
 HEAP8[$16 >> 0] = 0; //@line 4304
 HEAP8[$80 + 1 >> 0] = 0; //@line 4306
 HEAP8[$80 + 2 >> 0] = 0; //@line 4308
 HEAP8[$80 + 3 >> 0] = 0; //@line 4310
 HEAP8[$80 + 4 >> 0] = 0; //@line 4312
 HEAP8[$80 + 5 >> 0] = 0; //@line 4314
 HEAP8[$80 + 6 >> 0] = 0; //@line 4316
 HEAP8[$80 + 7 >> 0] = 0; //@line 4318
 HEAP8[$80 + 8 >> 0] = 0; //@line 4320
 HEAP8[$80 + 9 >> 0] = 0; //@line 4322
 HEAP8[$80 + 10 >> 0] = 0; //@line 4324
 HEAP8[$80 + 11 >> 0] = 0; //@line 4326
 HEAP8[$80 + 12 >> 0] = 0; //@line 4328
 HEAP8[$80 + 13 >> 0] = 0; //@line 4330
 HEAP8[$80 + 14 >> 0] = 0; //@line 4332
 HEAP8[$80 + 15 >> 0] = 0; //@line 4333
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 4335
 return;
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_193($0) {
 $0 = $0 | 0;
 var $$pre17 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 5
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 7
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9
 HEAP32[$4 + 364 >> 2] = 2; //@line 13
 $$pre17 = HEAP8[$2 >> 0] | 0; //@line 14
 if (!($$pre17 & 4)) {
  $11 = HEAP32[$4 + 1324 >> 2] | 0; //@line 19
  $12 = $11 + 16 | 0; //@line 20
  $14 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 22
  $15 = $11 + 28 | 0; //@line 23
  $16 = HEAP32[$15 >> 2] | 0; //@line 24
  if (!$16) {
   $ReallocAsyncCtx13 = _emscripten_realloc_async_context(24) | 0; //@line 27
   _mbed_assert_internal(15679, 15684, 1102); //@line 28
   if (___async) {
    HEAP32[$ReallocAsyncCtx13 >> 2] = 405; //@line 31
    $18 = $ReallocAsyncCtx13 + 4 | 0; //@line 32
    HEAP32[$18 >> 2] = $15; //@line 33
    $19 = $ReallocAsyncCtx13 + 8 | 0; //@line 34
    HEAP32[$19 >> 2] = $12; //@line 35
    $20 = $ReallocAsyncCtx13 + 12 | 0; //@line 36
    HEAP32[$20 >> 2] = $14; //@line 37
    $21 = $ReallocAsyncCtx13 + 16 | 0; //@line 38
    HEAP32[$21 >> 2] = $2; //@line 39
    $22 = $ReallocAsyncCtx13 + 20 | 0; //@line 40
    HEAP32[$22 >> 2] = $4; //@line 41
    sp = STACKTOP; //@line 42
    return;
   }
   ___async_unwind = 0; //@line 45
   HEAP32[$ReallocAsyncCtx13 >> 2] = 405; //@line 46
   $18 = $ReallocAsyncCtx13 + 4 | 0; //@line 47
   HEAP32[$18 >> 2] = $15; //@line 48
   $19 = $ReallocAsyncCtx13 + 8 | 0; //@line 49
   HEAP32[$19 >> 2] = $12; //@line 50
   $20 = $ReallocAsyncCtx13 + 12 | 0; //@line 51
   HEAP32[$20 >> 2] = $14; //@line 52
   $21 = $ReallocAsyncCtx13 + 16 | 0; //@line 53
   HEAP32[$21 >> 2] = $2; //@line 54
   $22 = $ReallocAsyncCtx13 + 20 | 0; //@line 55
   HEAP32[$22 >> 2] = $4; //@line 56
   sp = STACKTOP; //@line 57
   return;
  } else {
   $23 = HEAP32[$16 >> 2] | 0; //@line 60
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 61
   FUNCTION_TABLE_vii[$23 & 31]($12, $14); //@line 62
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 406; //@line 65
    $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 66
    HEAP32[$24 >> 2] = $2; //@line 67
    $25 = $ReallocAsyncCtx4 + 8 | 0; //@line 68
    HEAP32[$25 >> 2] = $4; //@line 69
    sp = STACKTOP; //@line 70
    return;
   }
   ___async_unwind = 0; //@line 73
   HEAP32[$ReallocAsyncCtx4 >> 2] = 406; //@line 74
   $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 75
   HEAP32[$24 >> 2] = $2; //@line 76
   $25 = $ReallocAsyncCtx4 + 8 | 0; //@line 77
   HEAP32[$25 >> 2] = $4; //@line 78
   sp = STACKTOP; //@line 79
   return;
  }
 }
 $26 = $$pre17 & -5; //@line 83
 HEAP8[$2 >> 0] = $26; //@line 84
 if (!($26 & 16)) {
  return;
 }
 HEAP8[$2 >> 0] = $26 & -17; //@line 91
 $31 = HEAP32[$4 + 1324 >> 2] | 0; //@line 93
 $32 = $31 + 48 | 0; //@line 94
 $34 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 96
 $35 = $31 + 60 | 0; //@line 97
 $36 = HEAP32[$35 >> 2] | 0; //@line 98
 if (!$36) {
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(16) | 0; //@line 101
  _mbed_assert_internal(15679, 15684, 1102); //@line 102
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 407; //@line 105
   $38 = $ReallocAsyncCtx12 + 4 | 0; //@line 106
   HEAP32[$38 >> 2] = $35; //@line 107
   $39 = $ReallocAsyncCtx12 + 8 | 0; //@line 108
   HEAP32[$39 >> 2] = $32; //@line 109
   $40 = $ReallocAsyncCtx12 + 12 | 0; //@line 110
   HEAP32[$40 >> 2] = $34; //@line 111
   sp = STACKTOP; //@line 112
   return;
  }
  ___async_unwind = 0; //@line 115
  HEAP32[$ReallocAsyncCtx12 >> 2] = 407; //@line 116
  $38 = $ReallocAsyncCtx12 + 4 | 0; //@line 117
  HEAP32[$38 >> 2] = $35; //@line 118
  $39 = $ReallocAsyncCtx12 + 8 | 0; //@line 119
  HEAP32[$39 >> 2] = $32; //@line 120
  $40 = $ReallocAsyncCtx12 + 12 | 0; //@line 121
  HEAP32[$40 >> 2] = $34; //@line 122
  sp = STACKTOP; //@line 123
  return;
 } else {
  $41 = HEAP32[$36 >> 2] | 0; //@line 126
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 127
  FUNCTION_TABLE_vii[$41 & 31]($32, $34); //@line 128
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 408; //@line 131
   sp = STACKTOP; //@line 132
   return;
  }
  ___async_unwind = 0; //@line 135
  HEAP32[$ReallocAsyncCtx5 >> 2] = 408; //@line 136
  sp = STACKTOP; //@line 137
  return;
 }
}
function __ZN14LoRaMacCommand15add_mac_commandEhhh($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $15 = 0, $25 = 0, $26 = 0, $32 = 0, $33 = 0, $34 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $72 = 0, $73 = 0, $80 = 0, $81 = 0, $87 = 0, $88 = 0;
 $5 = HEAP8[$0 + 3 >> 0] | 0; //@line 18847
 L1 : do {
  switch ($1 << 24 >> 24) {
  case 2:
   {
    $6 = $0 + 2 | 0; //@line 18851
    $7 = HEAP8[$6 >> 0] | 0; //@line 18852
    if (($7 & 255) < (-128 - $5 & 255)) {
     HEAP8[$6 >> 0] = $7 + 1 << 24 >> 24; //@line 18859
     HEAP8[($7 & 255) + ($0 + 4) >> 0] = 2; //@line 18860
     break L1;
    } else {
     $$0 = -1e3; //@line 18863
     return $$0 | 0; //@line 18864
    }
    break;
   }
  case 3:
   {
    $13 = $0 + 2 | 0; //@line 18869
    $14 = HEAP8[$13 >> 0] | 0; //@line 18870
    $15 = $14 & 255; //@line 18871
    if (((-128 - $5 & 255) + -1 | 0) > ($15 | 0)) {
     HEAP8[$0 + 4 + $15 >> 0] = 3; //@line 18882
     HEAP8[$13 >> 0] = $14 + 2 << 24 >> 24; //@line 18883
     HEAP8[($14 + 1 & 255) + ($0 + 4) >> 0] = $2; //@line 18884
     break L1;
    } else {
     $$0 = -1e3; //@line 18887
     return $$0 | 0; //@line 18888
    }
    break;
   }
  case 4:
   {
    $25 = $0 + 2 | 0; //@line 18893
    $26 = HEAP8[$25 >> 0] | 0; //@line 18894
    if (($26 & 255) < (-128 - $5 & 255)) {
     HEAP8[$25 >> 0] = $26 + 1 << 24 >> 24; //@line 18901
     HEAP8[($26 & 255) + ($0 + 4) >> 0] = 4; //@line 18902
     break L1;
    } else {
     $$0 = -1e3; //@line 18905
     return $$0 | 0; //@line 18906
    }
    break;
   }
  case 5:
   {
    $32 = $0 + 2 | 0; //@line 18911
    $33 = HEAP8[$32 >> 0] | 0; //@line 18912
    $34 = $33 & 255; //@line 18913
    if (((-128 - $5 & 255) + -1 | 0) > ($34 | 0)) {
     HEAP8[$0 + 4 + $34 >> 0] = 5; //@line 18921
     HEAP8[$32 >> 0] = $33 + 2 << 24 >> 24; //@line 18923
     HEAP8[($33 + 1 & 255) + ($0 + 4) >> 0] = $2; //@line 18926
     HEAP8[$0 + 1 >> 0] = 1; //@line 18928
     break L1;
    } else {
     $$0 = -1e3; //@line 18931
     return $$0 | 0; //@line 18932
    }
    break;
   }
  case 6:
   {
    $45 = $0 + 2 | 0; //@line 18937
    $46 = HEAP8[$45 >> 0] | 0; //@line 18938
    $47 = $46 & 255; //@line 18939
    if (((-128 - $5 & 255) + -2 | 0) > ($47 | 0)) {
     HEAP8[$0 + 4 + $47 >> 0] = 6; //@line 18947
     HEAP8[($46 + 1 & 255) + ($0 + 4) >> 0] = $2; //@line 18951
     HEAP8[$45 >> 0] = $46 + 3 << 24 >> 24; //@line 18953
     HEAP8[($46 + 2 & 255) + ($0 + 4) >> 0] = $3; //@line 18956
     break L1;
    } else {
     $$0 = -1e3; //@line 18959
     return $$0 | 0; //@line 18960
    }
    break;
   }
  case 7:
   {
    $60 = $0 + 2 | 0; //@line 18965
    $61 = HEAP8[$60 >> 0] | 0; //@line 18966
    $62 = $61 & 255; //@line 18967
    if (((-128 - $5 & 255) + -1 | 0) > ($62 | 0)) {
     HEAP8[$0 + 4 + $62 >> 0] = 7; //@line 18978
     HEAP8[$60 >> 0] = $61 + 2 << 24 >> 24; //@line 18979
     HEAP8[($61 + 1 & 255) + ($0 + 4) >> 0] = $2; //@line 18980
     break L1;
    } else {
     $$0 = -1e3; //@line 18983
     return $$0 | 0; //@line 18984
    }
    break;
   }
  case 8:
   {
    $72 = $0 + 2 | 0; //@line 18989
    $73 = HEAP8[$72 >> 0] | 0; //@line 18990
    if (($73 & 255) < (-128 - $5 & 255)) {
     HEAP8[$72 >> 0] = $73 + 1 << 24 >> 24; //@line 18998
     HEAP8[($73 & 255) + ($0 + 4) >> 0] = 8; //@line 18999
     HEAP8[$0 + 1 >> 0] = 1; //@line 19000
     break L1;
    } else {
     $$0 = -1e3; //@line 19003
     return $$0 | 0; //@line 19004
    }
    break;
   }
  case 9:
   {
    $80 = $0 + 2 | 0; //@line 19009
    $81 = HEAP8[$80 >> 0] | 0; //@line 19010
    if (($81 & 255) < (-128 - $5 & 255)) {
     HEAP8[$80 >> 0] = $81 + 1 << 24 >> 24; //@line 19017
     HEAP8[($81 & 255) + ($0 + 4) >> 0] = 9; //@line 19018
     break L1;
    } else {
     $$0 = -1e3; //@line 19021
     return $$0 | 0; //@line 19022
    }
    break;
   }
  case 10:
   {
    $87 = $0 + 2 | 0; //@line 19027
    $88 = HEAP8[$87 >> 0] | 0; //@line 19028
    if (($88 & 255) < (-128 - $5 & 255)) {
     HEAP8[($88 & 255) + ($0 + 4) >> 0] = 10; //@line 19035
     HEAP8[$87 >> 0] = $88 + 2 << 24 >> 24; //@line 19037
     HEAP8[($88 + 1 & 255) + ($0 + 4) >> 0] = $2; //@line 19040
     HEAP8[$0 + 1 >> 0] = 1; //@line 19042
     break L1;
    } else {
     $$0 = -1e3; //@line 19045
     return $$0 | 0; //@line 19046
    }
    break;
   }
  default:
   {
    $$0 = -1002; //@line 19051
    return $$0 | 0; //@line 19052
   }
  }
 } while (0);
 HEAP8[$0 >> 0] = 1; //@line 19056
 $$0 = 0; //@line 19057
 return $$0 | 0; //@line 19058
}
function __ZN7LoRaMac19on_radio_rx_timeoutEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $18 = 0, $23 = 0, $30 = 0, $34 = 0, $38 = 0, $41 = 0, $5 = 0, $52 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 13457
 STACKTOP = STACKTOP + 16 | 0; //@line 13458
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 13458
 $$byval_copy = sp + 8 | 0; //@line 13459
 $vararg_buffer = sp; //@line 13460
 _mbed_tracef(16, 13728, 13966, $vararg_buffer); //@line 13461
 $1 = $0 + 360 | 0; //@line 13462
 do {
  if ((HEAP32[$1 >> 2] | 0) == 2) {
   _mbed_tracef(16, 13728, 13747, $$byval_copy); //@line 13467
   $5 = HEAP32[$0 + 1328 >> 2] | 0; //@line 13469
   HEAP32[$vararg_buffer >> 2] = 293; //@line 13470
   HEAP32[$vararg_buffer + 4 >> 2] = 0; //@line 13472
   $AsyncCtx5 = _emscripten_alloc_async_context(16, sp) | 0; //@line 13473
   HEAP32[$$byval_copy >> 2] = HEAP32[$vararg_buffer >> 2]; //@line 13474
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$vararg_buffer + 4 >> 2]; //@line 13474
   $6 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($5, $0, $$byval_copy) | 0; //@line 13475
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 377; //@line 13478
    HEAP32[$AsyncCtx5 + 4 >> 2] = $vararg_buffer; //@line 13480
    HEAP32[$AsyncCtx5 + 8 >> 2] = $0; //@line 13482
    HEAP32[$AsyncCtx5 + 12 >> 2] = $1; //@line 13484
    sp = STACKTOP; //@line 13485
    STACKTOP = sp; //@line 13486
    return;
   }
   _emscripten_free_async_context($AsyncCtx5 | 0); //@line 13488
   do {
    if (!$6) {
     $AsyncCtx13 = _emscripten_alloc_async_context(16, sp) | 0; //@line 13492
     _mbed_assert_internal(13612, 13621, 215); //@line 13493
     if (___async) {
      HEAP32[$AsyncCtx13 >> 2] = 378; //@line 13496
      HEAP32[$AsyncCtx13 + 4 >> 2] = $vararg_buffer; //@line 13498
      HEAP32[$AsyncCtx13 + 8 >> 2] = $0; //@line 13500
      HEAP32[$AsyncCtx13 + 12 >> 2] = $1; //@line 13502
      sp = STACKTOP; //@line 13503
      STACKTOP = sp; //@line 13504
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx13 | 0); //@line 13506
      break;
     }
    }
   } while (0);
   HEAP32[$0 + 364 >> 2] = 2; //@line 13512
   if (HEAP8[$0 + 373 >> 0] | 0) {
    label = 19; //@line 13517
   }
  } else {
   $18 = HEAP32[$0 >> 2] | 0; //@line 13520
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 13521
   __ZN7LoRaPHY18put_radio_to_sleepEv($18); //@line 13522
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 379; //@line 13525
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 13527
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 13529
    sp = STACKTOP; //@line 13530
    STACKTOP = sp; //@line 13531
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 13533
   $23 = (HEAP8[$0 + 373 >> 0] | 0) != 0; //@line 13539
   if (HEAP32[$0 + 364 >> 2] | 0) {
    if ($23) {
     label = 19; //@line 13542
     break;
    } else {
     break;
    }
   }
   if ($23) {
    HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($0 + 288 | 0) | 0) + 4 >> 2] = 3; //@line 13552
   }
   HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) + 4 >> 2] = 3; //@line 13557
   $30 = $0 + 356 | 0; //@line 13558
   $34 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$30 >> 2] | 0, HEAP32[$0 + 980 >> 2] | 0) | 0; //@line 13562
   if ($34 >>> 0 < (HEAP32[$0 + 976 >> 2] | 0) >>> 0) {
    STACKTOP = sp; //@line 13567
    return;
   }
   $38 = HEAP32[$30 >> 2] | 0; //@line 13569
   $AsyncCtx9 = _emscripten_alloc_async_context(8, sp) | 0; //@line 13571
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($38, $0 + 1056 | 0); //@line 13572
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 380; //@line 13575
    HEAP32[$AsyncCtx9 + 4 >> 2] = $0; //@line 13577
    sp = STACKTOP; //@line 13578
    STACKTOP = sp; //@line 13579
    return;
   }
   _emscripten_free_async_context($AsyncCtx9 | 0); //@line 13581
   $41 = $0 + 944 | 0; //@line 13582
   HEAP8[$41 >> 0] = HEAP8[$41 >> 0] | 32; //@line 13585
   STACKTOP = sp; //@line 13586
   return;
  }
 } while (0);
 if ((label | 0) == 19) {
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($0 + 288 | 0) | 0) + 4 >> 2] = 4; //@line 13593
 }
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) + 4 >> 2] = 4; //@line 13598
 if ((HEAP32[$1 >> 2] | 0) == 2) {
  STACKTOP = sp; //@line 13602
  return;
 }
 $52 = $0 + 944 | 0; //@line 13604
 HEAP8[$52 >> 0] = HEAP8[$52 >> 0] | 32; //@line 13607
 STACKTOP = sp; //@line 13608
 return;
}
function _equeue_cancel($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$sink$in$i$i = 0, $$sink$in$in$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $24 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $42 = 0, $44 = 0, $46 = 0, $49 = 0, $5 = 0, $56 = 0, $57 = 0, $59 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $70 = 0, $72 = 0, $73 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 3627
 if (!$1) {
  return;
 }
 $5 = $0 + 16 | 0; //@line 3634
 $10 = (HEAP32[$0 + 12 >> 2] | 0) + ((1 << HEAP32[$5 >> 2]) + -1 & $1) | 0; //@line 3639
 $11 = $0 + 128 | 0; //@line 3640
 _equeue_mutex_lock($11); //@line 3641
 $12 = $10 + 4 | 0; //@line 3642
 $13 = HEAP8[$12 >> 0] | 0; //@line 3643
 $14 = $13 & 255; //@line 3644
 $15 = HEAP32[$5 >> 2] | 0; //@line 3645
 if (($1 >> $15 | 0) != ($14 | 0)) {
  _equeue_mutex_unlock($11); //@line 3649
  return;
 }
 HEAP32[$10 + 32 >> 2] = 0; //@line 3653
 HEAP32[$10 + 24 >> 2] = -1; //@line 3655
 $24 = (HEAP32[$10 + 20 >> 2] | 0) - (HEAP32[$0 + 4 >> 2] | 0) | 0; //@line 3660
 do {
  if (($24 | 0) >= 0) {
   if (!$24) {
    if ((HEAP8[$10 + 5 >> 0] | 0) != (HEAP8[$0 + 9 >> 0] | 0)) {
     break;
    }
   }
   $32 = $10 + 12 | 0; //@line 3675
   $33 = HEAP32[$32 >> 2] | 0; //@line 3676
   $35 = $10 + 8 | 0; //@line 3678
   $36 = HEAP32[$35 >> 2] | 0; //@line 3679
   $37 = $33; //@line 3680
   if (!$33) {
    $44 = $10 + 16 | 0; //@line 3682
    HEAP32[HEAP32[$44 >> 2] >> 2] = $36; //@line 3684
    $46 = HEAP32[$35 >> 2] | 0; //@line 3685
    if ($46 | 0) {
     $$sink$in$in$i = $44; //@line 3688
     $49 = $46; //@line 3688
     label = 13; //@line 3689
    }
   } else {
    $38 = $33 + 8 | 0; //@line 3692
    HEAP32[$38 >> 2] = $36; //@line 3693
    if ($36 | 0) {
     HEAP32[$36 + 16 >> 2] = $38; //@line 3698
    }
    $42 = $10 + 16 | 0; //@line 3700
    HEAP32[HEAP32[$42 >> 2] >> 2] = $37; //@line 3702
    $$sink$in$in$i = $42; //@line 3704
    $49 = HEAP32[$32 >> 2] | 0; //@line 3704
    label = 13; //@line 3705
   }
   if ((label | 0) == 13) {
    HEAP32[$49 + 16 >> 2] = HEAP32[$$sink$in$in$i >> 2]; //@line 3710
   }
   HEAP8[$12 >> 0] = (($13 + 1 & 255) << $15 | 0) == 0 ? 1 : $14 + 1 & 255; //@line 3719
   _equeue_mutex_unlock($11); //@line 3720
   $56 = $10 + 36 | 0; //@line 3721
   $57 = $56 + -36 | 0; //@line 3722
   $59 = HEAP32[$56 + -8 >> 2] | 0; //@line 3724
   do {
    if ($59 | 0) {
     $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 3728
     FUNCTION_TABLE_vi[$59 & 1023]($56); //@line 3729
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 131; //@line 3732
      HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 3734
      HEAP32[$AsyncCtx + 8 >> 2] = $56; //@line 3736
      HEAP32[$AsyncCtx + 12 >> 2] = $57; //@line 3738
      sp = STACKTOP; //@line 3739
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 3742
      break;
     }
    }
   } while (0);
   $64 = $0 + 156 | 0; //@line 3747
   _equeue_mutex_lock($64); //@line 3748
   $65 = $0 + 24 | 0; //@line 3749
   $66 = HEAP32[$65 >> 2] | 0; //@line 3750
   L28 : do {
    if (!$66) {
     $$02329$i$i = $65; //@line 3754
     label = 24; //@line 3755
    } else {
     $68 = HEAP32[$57 >> 2] | 0; //@line 3757
     $$025$i$i = $65; //@line 3758
     $70 = $66; //@line 3758
     while (1) {
      $69 = HEAP32[$70 >> 2] | 0; //@line 3760
      if ($69 >>> 0 >= $68 >>> 0) {
       break;
      }
      $72 = $70 + 8 | 0; //@line 3765
      $73 = HEAP32[$72 >> 2] | 0; //@line 3766
      if (!$73) {
       $$02329$i$i = $72; //@line 3769
       label = 24; //@line 3770
       break L28;
      } else {
       $$025$i$i = $72; //@line 3773
       $70 = $73; //@line 3773
      }
     }
     if (($69 | 0) == ($68 | 0)) {
      HEAP32[$56 + -24 >> 2] = $70; //@line 3779
      $$02330$i$i = $$025$i$i; //@line 3782
      $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 3782
     } else {
      $$02329$i$i = $$025$i$i; //@line 3784
      label = 24; //@line 3785
     }
    }
   } while (0);
   if ((label | 0) == 24) {
    HEAP32[$56 + -24 >> 2] = 0; //@line 3791
    $$02330$i$i = $$02329$i$i; //@line 3792
    $$sink$in$i$i = $$02329$i$i; //@line 3792
   }
   HEAP32[$56 + -28 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 3796
   HEAP32[$$02330$i$i >> 2] = $57; //@line 3797
   _equeue_mutex_unlock($64); //@line 3798
   return;
  }
 } while (0);
 _equeue_mutex_unlock($11); //@line 3802
 return;
}
function _gcm_mult($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$07475 = 0, $100 = 0, $101 = 0, $103 = 0, $109 = 0, $110 = 0, $111 = 0, $113 = 0, $116 = 0, $120 = 0, $126 = 0, $130 = 0, $134 = 0, $140 = 0, $144 = 0, $148 = 0, $15 = 0, $154 = 0, $158 = 0, $162 = 0, $22 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $46 = 0, $51 = 0, $6 = 0, $60 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $82 = 0, $88 = 0, $92 = 0, $94 = 0;
 $4 = HEAP8[$1 + 15 >> 0] | 0; //@line 4718
 $6 = $4 & 15; //@line 4720
 $8 = $0 + 200 + ($6 << 3) | 0; //@line 4722
 $15 = $0 + 72 + ($6 << 3) | 0; //@line 4729
 $$07475 = 15; //@line 4735
 $22 = $4; //@line 4735
 $27 = HEAP32[$15 >> 2] | 0; //@line 4735
 $28 = HEAP32[$8 >> 2] | 0; //@line 4735
 $29 = HEAP32[$8 + 4 >> 2] | 0; //@line 4735
 $32 = HEAP32[$15 + 4 >> 2] | 0; //@line 4735
 while (1) {
  if (($$07475 | 0) == 15) {
   $69 = $27; //@line 4740
   $70 = $28; //@line 4740
   $71 = $29; //@line 4740
   $74 = $32; //@line 4740
  } else {
   $25 = $22 & 15; //@line 4743
   $30 = _bitshift64Shl($28 | 0, $29 | 0, 60) | 0; //@line 4745
   $31 = tempRet0; //@line 4746
   $33 = _bitshift64Lshr($27 | 0, $32 | 0, 4) | 0; //@line 4747
   $36 = tempRet0 | $31; //@line 4750
   $37 = _bitshift64Lshr($28 | 0, $29 | 0, 4) | 0; //@line 4751
   $38 = tempRet0; //@line 4752
   $40 = 208 + (($27 & 15) << 3) | 0; //@line 4754
   $46 = _bitshift64Shl(HEAP32[$40 >> 2] | 0, HEAP32[$40 + 4 >> 2] | 0, 48) | 0; //@line 4760
   $51 = $0 + 200 + ($25 << 3) | 0; //@line 4765
   $60 = $0 + 72 + ($25 << 3) | 0; //@line 4774
   $69 = HEAP32[$60 >> 2] ^ ($33 | $30); //@line 4782
   $70 = $46 ^ $37 ^ HEAP32[$51 >> 2]; //@line 4782
   $71 = tempRet0 ^ $38 ^ HEAP32[$51 + 4 >> 2]; //@line 4782
   $74 = HEAP32[$60 + 4 >> 2] ^ $36; //@line 4782
  }
  $72 = _bitshift64Shl($70 | 0, $71 | 0, 60) | 0; //@line 4785
  $73 = tempRet0; //@line 4786
  $75 = _bitshift64Lshr($69 | 0, $74 | 0, 4) | 0; //@line 4787
  $78 = tempRet0 | $73; //@line 4790
  $79 = _bitshift64Lshr($70 | 0, $71 | 0, 4) | 0; //@line 4791
  $80 = tempRet0; //@line 4792
  $82 = 208 + (($69 & 15) << 3) | 0; //@line 4794
  $88 = _bitshift64Shl(HEAP32[$82 >> 2] | 0, HEAP32[$82 + 4 >> 2] | 0, 48) | 0; //@line 4800
  $92 = ($22 & 255) >>> 4 & 255; //@line 4804
  $94 = $0 + 200 + ($92 << 3) | 0; //@line 4806
  $100 = $88 ^ $79 ^ HEAP32[$94 >> 2]; //@line 4812
  $101 = tempRet0 ^ $80 ^ HEAP32[$94 + 4 >> 2]; //@line 4813
  $103 = $0 + 72 + ($92 << 3) | 0; //@line 4815
  $109 = HEAP32[$103 >> 2] ^ ($75 | $72); //@line 4821
  $110 = HEAP32[$103 + 4 >> 2] ^ $78; //@line 4822
  $111 = $$07475 + -1 | 0; //@line 4823
  if (($$07475 | 0) <= 0) {
   break;
  }
  $$07475 = $111; //@line 4830
  $22 = HEAP8[$1 + $111 >> 0] | 0; //@line 4830
  $27 = $109; //@line 4830
  $28 = $100; //@line 4830
  $29 = $101; //@line 4830
  $32 = $110; //@line 4830
 }
 $113 = _bitshift64Lshr($100 | 0, $101 | 0, 56) | 0; //@line 4832
 HEAP8[$2 >> 0] = $113; //@line 4835
 $116 = _bitshift64Lshr($100 | 0, $101 | 0, 48) | 0; //@line 4836
 HEAP8[$2 + 1 >> 0] = $116; //@line 4840
 $120 = _bitshift64Lshr($100 | 0, $101 | 0, 40) | 0; //@line 4841
 HEAP8[$2 + 2 >> 0] = $120; //@line 4845
 HEAP8[$2 + 3 >> 0] = $101; //@line 4848
 $126 = _bitshift64Lshr($100 | 0, $101 | 0, 24) | 0; //@line 4849
 HEAP8[$2 + 4 >> 0] = $126; //@line 4853
 $130 = _bitshift64Lshr($100 | 0, $101 | 0, 16) | 0; //@line 4854
 HEAP8[$2 + 5 >> 0] = $130; //@line 4858
 $134 = _bitshift64Lshr($100 | 0, $101 | 0, 8) | 0; //@line 4859
 HEAP8[$2 + 6 >> 0] = $134; //@line 4863
 HEAP8[$2 + 7 >> 0] = $100; //@line 4866
 $140 = _bitshift64Lshr($109 | 0, $110 | 0, 56) | 0; //@line 4867
 HEAP8[$2 + 8 >> 0] = $140; //@line 4871
 $144 = _bitshift64Lshr($109 | 0, $110 | 0, 48) | 0; //@line 4872
 HEAP8[$2 + 9 >> 0] = $144; //@line 4876
 $148 = _bitshift64Lshr($109 | 0, $110 | 0, 40) | 0; //@line 4877
 HEAP8[$2 + 10 >> 0] = $148; //@line 4881
 HEAP8[$2 + 11 >> 0] = $110; //@line 4884
 $154 = _bitshift64Lshr($109 | 0, $110 | 0, 24) | 0; //@line 4885
 HEAP8[$2 + 12 >> 0] = $154; //@line 4889
 $158 = _bitshift64Lshr($109 | 0, $110 | 0, 16) | 0; //@line 4890
 HEAP8[$2 + 13 >> 0] = $158; //@line 4894
 $162 = _bitshift64Lshr($109 | 0, $110 | 0, 8) | 0; //@line 4895
 HEAP8[$2 + 14 >> 0] = $162; //@line 4899
 HEAP8[$2 + 15 >> 0] = $109; //@line 4902
 return;
}
function __ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$0$i15 = 0, $$1 = 0, $14 = 0, $16 = 0, $2 = 0, $20 = 0, $24 = 0, $28 = 0, $3 = 0, $30 = 0, $32 = 0, $33 = 0, $34 = 0, $46 = 0, $49 = 0, $56 = 0, $58 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 17533
 STACKTOP = STACKTOP + 16 | 0; //@line 17534
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 17534
 $2 = sp + 1 | 0; //@line 17535
 $3 = sp; //@line 17536
 if (HEAP32[$0 + 968 >> 2] | 0) {
  $$1 = -1e3; //@line 17541
  STACKTOP = sp; //@line 17542
  return $$1 | 0; //@line 17542
 }
 $8 = HEAP8[$1 + 5 >> 0] | 0; //@line 17545
 if ($8 << 24 >> 24 > (__ZN7LoRaPHY23get_minimum_tx_datarateEv(HEAP32[$0 >> 2] | 0) | 0) << 24 >> 24) {
  $24 = $8; //@line 17550
 } else {
  $24 = __ZN7LoRaPHY23get_minimum_tx_datarateEv(HEAP32[$0 >> 2] | 0) | 0; //@line 17554
 }
 HEAP8[$3 >> 0] = 0; //@line 17556
 $14 = $0 + 288 | 0; //@line 17557
 __ZN11LoRaMacMcps18reset_confirmationEv($14); //@line 17558
 HEAP8[$0 + 895 >> 0] = 1; //@line 17560
 $16 = $0 + 894 | 0; //@line 17561
 HEAP8[$16 >> 0] = 1; //@line 17562
 switch (HEAP32[$1 >> 2] | 0) {
 case 0:
  {
   HEAP8[$3 >> 0] = 64; //@line 17566
   label = 8; //@line 17567
   break;
  }
 case 1:
  {
   HEAP8[$3 >> 0] = -128; //@line 17571
   HEAP8[$16 >> 0] = HEAP8[$1 + 6 >> 0] | 0; //@line 17574
   label = 8; //@line 17575
   break;
  }
 case 3:
  {
   HEAP8[$3 >> 0] = -32; //@line 17579
   label = 8; //@line 17580
   break;
  }
 default:
  {
   $$0 = -1003; //@line 17584
  }
 }
 do {
  if ((label | 0) == 8) {
   $20 = $0 + 1156 | 0; //@line 17589
   if (!(HEAP8[$20 >> 0] | 0)) {
    if (!(__ZN7LoRaPHY18verify_tx_datarateEhb(HEAP32[$0 >> 2] | 0, $24, 0) | 0)) {
     $$0 = -1003; //@line 17596
     break;
    }
    HEAP8[$0 + 1097 >> 0] = $24; //@line 17600
    $33 = HEAP8[$20 >> 0] << 7 & 255; //@line 17603
   } else {
    $33 = -128; //@line 17605
   }
   $28 = HEAP8[$1 + 4 >> 0] | 0; //@line 17608
   $30 = HEAP32[$1 + 8 >> 2] | 0; //@line 17610
   $32 = HEAP16[$1 + 12 >> 1] | 0; //@line 17612
   HEAP8[$2 >> 0] = $33; //@line 17613
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 17614
   $34 = __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt($0, $3, $2, $28, $30, $32) | 0; //@line 17615
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 475; //@line 17618
    HEAP32[$AsyncCtx + 4 >> 2] = $14; //@line 17620
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 17622
    HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 17624
    HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 17626
    HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 17628
    sp = STACKTOP; //@line 17629
    STACKTOP = sp; //@line 17630
    return 0; //@line 17630
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 17632
   if (!$34) {
    HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($14) | 0) + 11 >> 0] = 0; //@line 17637
    HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($14) | 0) + 10 >> 0] = 0; //@line 17640
    $46 = HEAP32[$0 + 956 >> 2] | 0; //@line 17642
    HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($14) | 0) + 16 >> 2] = $46; //@line 17645
    $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 17646
    $49 = __ZN7LoRaMac11schedule_txEv($0) | 0; //@line 17647
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 476; //@line 17650
     HEAP32[$AsyncCtx2 + 4 >> 2] = $2; //@line 17652
     HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 17654
     HEAP32[$AsyncCtx2 + 12 >> 2] = $14; //@line 17656
     HEAP32[$AsyncCtx2 + 16 >> 2] = $0; //@line 17658
     HEAP32[$AsyncCtx2 + 20 >> 2] = $3; //@line 17660
     sp = STACKTOP; //@line 17661
     STACKTOP = sp; //@line 17662
     return 0; //@line 17662
    }
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 17664
    if (!$49) {
     $56 = HEAP32[$1 >> 2] | 0; //@line 17667
     HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($14) | 0) >> 2] = $56; //@line 17669
     $58 = $0 + 944 | 0; //@line 17670
     HEAP8[$58 >> 0] = HEAP8[$58 >> 0] | 1; //@line 17673
     $$0 = 0; //@line 17674
     break;
    } else {
     $$0$i15 = $49; //@line 17677
    }
   } else {
    $$0$i15 = $34; //@line 17680
   }
   HEAP8[$0 + 373 >> 0] = 0; //@line 17683
   $$0 = $$0$i15; //@line 17684
  }
 } while (0);
 $$1 = $$0; //@line 17687
 STACKTOP = sp; //@line 17688
 return $$1 | 0; //@line 17688
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb($0) {
 $0 = $0 | 0;
 var $$pre$i = 0, $10 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 27670
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27674
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27676
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 27678
 $10 = HEAP8[$0 + 17 >> 0] | 0; //@line 27680
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 27682
 $$pre$i = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 27683
 $13 = $4 + 12 | 0; //@line 27684
 HEAP32[$13 >> 2] = $$pre$i; //@line 27685
 if (!$$pre$i) {
  $24 = $6 + 12 | 0; //@line 27688
  HEAP32[$24 >> 2] = 0; //@line 27689
  $25 = $6 + 16 | 0; //@line 27690
  HEAP8[$25 >> 0] = $8; //@line 27691
  HEAP8[$6 + 17 >> 0] = $10; //@line 27693
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 27694
  $27 = _equeue_alloc($12, 20) | 0; //@line 27695
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 236; //@line 27698
   $28 = $ReallocAsyncCtx7 + 4 | 0; //@line 27699
   HEAP32[$28 >> 2] = $24; //@line 27700
   $29 = $ReallocAsyncCtx7 + 8 | 0; //@line 27701
   HEAP32[$29 >> 2] = $6; //@line 27702
   $30 = $ReallocAsyncCtx7 + 12 | 0; //@line 27703
   HEAP32[$30 >> 2] = $25; //@line 27704
   $31 = $ReallocAsyncCtx7 + 16 | 0; //@line 27705
   HEAP32[$31 >> 2] = $12; //@line 27706
   $32 = $ReallocAsyncCtx7 + 20 | 0; //@line 27707
   HEAP32[$32 >> 2] = $13; //@line 27708
   $33 = $ReallocAsyncCtx7 + 24 | 0; //@line 27709
   HEAP32[$33 >> 2] = $4; //@line 27710
   $34 = $ReallocAsyncCtx7 + 28 | 0; //@line 27711
   HEAP32[$34 >> 2] = $24; //@line 27712
   sp = STACKTOP; //@line 27713
   return;
  }
  HEAP32[___async_retval >> 2] = $27; //@line 27717
  ___async_unwind = 0; //@line 27718
  HEAP32[$ReallocAsyncCtx7 >> 2] = 236; //@line 27719
  $28 = $ReallocAsyncCtx7 + 4 | 0; //@line 27720
  HEAP32[$28 >> 2] = $24; //@line 27721
  $29 = $ReallocAsyncCtx7 + 8 | 0; //@line 27722
  HEAP32[$29 >> 2] = $6; //@line 27723
  $30 = $ReallocAsyncCtx7 + 12 | 0; //@line 27724
  HEAP32[$30 >> 2] = $25; //@line 27725
  $31 = $ReallocAsyncCtx7 + 16 | 0; //@line 27726
  HEAP32[$31 >> 2] = $12; //@line 27727
  $32 = $ReallocAsyncCtx7 + 20 | 0; //@line 27728
  HEAP32[$32 >> 2] = $13; //@line 27729
  $33 = $ReallocAsyncCtx7 + 24 | 0; //@line 27730
  HEAP32[$33 >> 2] = $4; //@line 27731
  $34 = $ReallocAsyncCtx7 + 28 | 0; //@line 27732
  HEAP32[$34 >> 2] = $24; //@line 27733
  sp = STACKTOP; //@line 27734
  return;
 } else {
  $16 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 27739
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 27740
  FUNCTION_TABLE_vii[$16 & 31]($6, $4); //@line 27741
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 235; //@line 27744
   $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 27745
   HEAP32[$17 >> 2] = $6; //@line 27746
   $18 = $ReallocAsyncCtx2 + 8 | 0; //@line 27747
   HEAP32[$18 >> 2] = $4; //@line 27748
   $19 = $ReallocAsyncCtx2 + 12 | 0; //@line 27749
   HEAP32[$19 >> 2] = $13; //@line 27750
   $20 = $ReallocAsyncCtx2 + 16 | 0; //@line 27751
   HEAP8[$20 >> 0] = $8; //@line 27752
   $21 = $ReallocAsyncCtx2 + 17 | 0; //@line 27753
   HEAP8[$21 >> 0] = $10; //@line 27754
   $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 27755
   HEAP32[$22 >> 2] = $12; //@line 27756
   $23 = $ReallocAsyncCtx2 + 24 | 0; //@line 27757
   HEAP32[$23 >> 2] = $13; //@line 27758
   sp = STACKTOP; //@line 27759
   return;
  }
  ___async_unwind = 0; //@line 27762
  HEAP32[$ReallocAsyncCtx2 >> 2] = 235; //@line 27763
  $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 27764
  HEAP32[$17 >> 2] = $6; //@line 27765
  $18 = $ReallocAsyncCtx2 + 8 | 0; //@line 27766
  HEAP32[$18 >> 2] = $4; //@line 27767
  $19 = $ReallocAsyncCtx2 + 12 | 0; //@line 27768
  HEAP32[$19 >> 2] = $13; //@line 27769
  $20 = $ReallocAsyncCtx2 + 16 | 0; //@line 27770
  HEAP8[$20 >> 0] = $8; //@line 27771
  $21 = $ReallocAsyncCtx2 + 17 | 0; //@line 27772
  HEAP8[$21 >> 0] = $10; //@line 27773
  $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 27774
  HEAP32[$22 >> 2] = $12; //@line 27775
  $23 = $ReallocAsyncCtx2 + 24 | 0; //@line 27776
  HEAP32[$23 >> 2] = $13; //@line 27777
  sp = STACKTOP; //@line 27778
  return;
 }
}
function __ZN7LoRaMac21send_frame_on_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $15 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $3 = 0, $30 = 0, $33 = 0, $36 = 0, $39 = 0, $42 = 0, $45 = 0, $49 = 0, $59 = 0, $62 = 0, $65 = 0, $69 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 15412
 STACKTOP = STACKTOP + 32 | 0; //@line 15413
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 15413
 $vararg_buffer = sp; //@line 15414
 $2 = sp + 16 | 0; //@line 15415
 _mbed_tracef(16, 13728, 14085, $vararg_buffer); //@line 15416
 HEAP8[$2 >> 0] = 0; //@line 15417
 HEAP8[$vararg_buffer >> 0] = $1; //@line 15418
 $3 = $0 + 1097 | 0; //@line 15419
 HEAP8[$vararg_buffer + 1 >> 0] = HEAP8[$3 >> 0] | 0; //@line 15422
 HEAP8[$vararg_buffer + 2 >> 0] = HEAP8[$0 + 1096 >> 0] | 0; //@line 15426
 HEAP32[$vararg_buffer + 4 >> 2] = HEAP32[$0 + 1144 >> 2]; //@line 15430
 HEAP32[$vararg_buffer + 8 >> 2] = HEAP32[$0 + 1148 >> 2]; //@line 15434
 $15 = $0 + 636 | 0; //@line 15435
 HEAP16[$vararg_buffer + 12 >> 1] = HEAP16[$15 >> 1] | 0; //@line 15438
 $18 = HEAP32[$0 >> 2] | 0; //@line 15439
 $21 = HEAP32[(HEAP32[$18 >> 2] | 0) + 32 >> 2] | 0; //@line 15442
 $22 = $0 + 992 | 0; //@line 15443
 $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 15444
 FUNCTION_TABLE_iiiii[$21 & 3]($18, $vararg_buffer, $2, $22) | 0; //@line 15445
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 420; //@line 15448
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 15450
  HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 15452
  HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 15454
  HEAP32[$AsyncCtx + 16 >> 2] = $22; //@line 15456
  HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 15458
  HEAP32[$AsyncCtx + 24 >> 2] = $15; //@line 15460
  HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer; //@line 15462
  sp = STACKTOP; //@line 15463
  STACKTOP = sp; //@line 15464
  return 0; //@line 15464
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 15466
 $30 = $0 + 264 | 0; //@line 15467
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($30) | 0) + 4 >> 2] = 1; //@line 15470
 $33 = $0 + 288 | 0; //@line 15471
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($33) | 0) + 4 >> 2] = 1; //@line 15474
 $36 = HEAP8[$3 >> 0] | 0; //@line 15475
 HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($33) | 0) + 8 >> 0] = $36; //@line 15478
 $39 = HEAP8[$2 >> 0] | 0; //@line 15479
 HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($33) | 0) + 9 >> 0] = $39; //@line 15482
 $42 = HEAP32[$22 >> 2] | 0; //@line 15483
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($33) | 0) + 12 >> 2] = $42; //@line 15486
 $45 = HEAP32[$22 >> 2] | 0; //@line 15487
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($30) | 0) + 8 >> 2] = $45; //@line 15490
 $49 = HEAP32[$0 + 356 >> 2] | 0; //@line 15492
 $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 15494
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($49, $0 + 996 | 0, 1e3); //@line 15495
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 421; //@line 15498
  HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 15500
  HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 15502
  HEAP32[$AsyncCtx2 + 12 >> 2] = $15; //@line 15504
  HEAP32[$AsyncCtx2 + 16 >> 2] = $2; //@line 15506
  HEAP32[$AsyncCtx2 + 20 >> 2] = $vararg_buffer; //@line 15508
  sp = STACKTOP; //@line 15509
  STACKTOP = sp; //@line 15510
  return 0; //@line 15510
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 15512
 if (!(HEAP8[$0 + 372 >> 0] | 0)) {
  $59 = $0 + 897 | 0; //@line 15517
  HEAP8[$59 >> 0] = (HEAP8[$59 >> 0] | 0) + 1 << 24 >> 24; //@line 15520
 }
 $62 = HEAP32[$0 >> 2] | 0; //@line 15522
 $65 = HEAP16[$15 >> 1] & 255; //@line 15525
 $AsyncCtx6 = _emscripten_alloc_async_context(16, sp) | 0; //@line 15526
 __ZN7LoRaPHY11handle_sendEPhh($62, $0 + 381 | 0, $65); //@line 15527
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 422; //@line 15530
  HEAP32[$AsyncCtx6 + 4 >> 2] = $0; //@line 15532
  HEAP32[$AsyncCtx6 + 8 >> 2] = $2; //@line 15534
  HEAP32[$AsyncCtx6 + 12 >> 2] = $vararg_buffer; //@line 15536
  sp = STACKTOP; //@line 15537
  STACKTOP = sp; //@line 15538
  return 0; //@line 15538
 } else {
  _emscripten_free_async_context($AsyncCtx6 | 0); //@line 15540
  $69 = $0 + 968 | 0; //@line 15541
  HEAP32[$69 >> 2] = HEAP32[$69 >> 2] | 1; //@line 15544
  STACKTOP = sp; //@line 15545
  return 0; //@line 15545
 }
 return 0; //@line 15547
}
function __ZN12radio_eventsD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $29 = 0, $30 = 0, $32 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $42 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 26985
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26987
 $4 = HEAP32[$2 + 92 >> 2] | 0; //@line 26989
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 26994
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 26995
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 80 | 0); //@line 26996
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 278; //@line 26999
   $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 27000
   HEAP32[$9 >> 2] = $2; //@line 27001
   sp = STACKTOP; //@line 27002
   return;
  }
  ___async_unwind = 0; //@line 27005
  HEAP32[$ReallocAsyncCtx2 >> 2] = 278; //@line 27006
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 27007
  HEAP32[$9 >> 2] = $2; //@line 27008
  sp = STACKTOP; //@line 27009
  return;
 }
 $11 = HEAP32[$2 + 76 >> 2] | 0; //@line 27013
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 27018
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 27019
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 64 | 0); //@line 27020
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 279; //@line 27023
   $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 27024
   HEAP32[$16 >> 2] = $2; //@line 27025
   sp = STACKTOP; //@line 27026
   return;
  }
  ___async_unwind = 0; //@line 27029
  HEAP32[$ReallocAsyncCtx3 >> 2] = 279; //@line 27030
  $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 27031
  HEAP32[$16 >> 2] = $2; //@line 27032
  sp = STACKTOP; //@line 27033
  return;
 }
 $18 = HEAP32[$2 + 60 >> 2] | 0; //@line 27037
 if ($18 | 0) {
  $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 27042
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 27043
  FUNCTION_TABLE_vi[$22 & 1023]($2 + 48 | 0); //@line 27044
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 280; //@line 27047
   $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 27048
   HEAP32[$23 >> 2] = $2; //@line 27049
   sp = STACKTOP; //@line 27050
   return;
  }
  ___async_unwind = 0; //@line 27053
  HEAP32[$ReallocAsyncCtx4 >> 2] = 280; //@line 27054
  $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 27055
  HEAP32[$23 >> 2] = $2; //@line 27056
  sp = STACKTOP; //@line 27057
  return;
 }
 $25 = HEAP32[$2 + 44 >> 2] | 0; //@line 27061
 if ($25 | 0) {
  $29 = HEAP32[$25 + 8 >> 2] | 0; //@line 27066
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 27067
  FUNCTION_TABLE_vi[$29 & 1023]($2 + 32 | 0); //@line 27068
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 281; //@line 27071
   $30 = $ReallocAsyncCtx5 + 4 | 0; //@line 27072
   HEAP32[$30 >> 2] = $2; //@line 27073
   sp = STACKTOP; //@line 27074
   return;
  }
  ___async_unwind = 0; //@line 27077
  HEAP32[$ReallocAsyncCtx5 >> 2] = 281; //@line 27078
  $30 = $ReallocAsyncCtx5 + 4 | 0; //@line 27079
  HEAP32[$30 >> 2] = $2; //@line 27080
  sp = STACKTOP; //@line 27081
  return;
 }
 $32 = HEAP32[$2 + 28 >> 2] | 0; //@line 27085
 if ($32 | 0) {
  $36 = HEAP32[$32 + 8 >> 2] | 0; //@line 27090
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 27091
  FUNCTION_TABLE_vi[$36 & 1023]($2 + 16 | 0); //@line 27092
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 282; //@line 27095
   $37 = $ReallocAsyncCtx6 + 4 | 0; //@line 27096
   HEAP32[$37 >> 2] = $2; //@line 27097
   sp = STACKTOP; //@line 27098
   return;
  }
  ___async_unwind = 0; //@line 27101
  HEAP32[$ReallocAsyncCtx6 >> 2] = 282; //@line 27102
  $37 = $ReallocAsyncCtx6 + 4 | 0; //@line 27103
  HEAP32[$37 >> 2] = $2; //@line 27104
  sp = STACKTOP; //@line 27105
  return;
 }
 $39 = HEAP32[$2 + 12 >> 2] | 0; //@line 27109
 if (!$39) {
  return;
 }
 $42 = HEAP32[$39 + 8 >> 2] | 0; //@line 27115
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 27116
 FUNCTION_TABLE_vi[$42 & 1023]($2); //@line 27117
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 283; //@line 27120
  sp = STACKTOP; //@line 27121
  return;
 }
 ___async_unwind = 0; //@line 27124
 HEAP32[$ReallocAsyncCtx7 >> 2] = 283; //@line 27125
 sp = STACKTOP; //@line 27126
 return;
}
function _initialize__async_cb_78($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 22658
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22660
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22662
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22664
 $10 = HEAP32[(HEAP32[$0 + 16 >> 2] | 0) + 4 >> 2] | 0; //@line 22668
 if (($10 + -4 | 0) >>> 0 > 28) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 22672
  _mbed_assert_internal(15131, 15133, 47); //@line 22673
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 614; //@line 22676
   $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 22677
   HEAP32[$12 >> 2] = 1e6; //@line 22678
   $13 = $ReallocAsyncCtx6 + 8 | 0; //@line 22679
   HEAP32[$13 >> 2] = $4; //@line 22680
   $14 = $ReallocAsyncCtx6 + 12 | 0; //@line 22681
   HEAP32[$14 >> 2] = $6; //@line 22682
   $15 = $ReallocAsyncCtx6 + 16 | 0; //@line 22683
   HEAP32[$15 >> 2] = $2; //@line 22684
   sp = STACKTOP; //@line 22685
   return;
  }
  ___async_unwind = 0; //@line 22688
  HEAP32[$ReallocAsyncCtx6 >> 2] = 614; //@line 22689
  $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 22690
  HEAP32[$12 >> 2] = 1e6; //@line 22691
  $13 = $ReallocAsyncCtx6 + 8 | 0; //@line 22692
  HEAP32[$13 >> 2] = $4; //@line 22693
  $14 = $ReallocAsyncCtx6 + 12 | 0; //@line 22694
  HEAP32[$14 >> 2] = $6; //@line 22695
  $15 = $ReallocAsyncCtx6 + 16 | 0; //@line 22696
  HEAP32[$15 >> 2] = $2; //@line 22697
  sp = STACKTOP; //@line 22698
  return;
 } else {
  $17 = 7 << $10 + -4; //@line 22702
  $18 = ___muldi3($17 | 0, 0, 1e6, 0) | 0; //@line 22703
  $19 = tempRet0; //@line 22704
  $20 = _i64Add(1e6, 0, -1, -1) | 0; //@line 22705
  $22 = _i64Add($20 | 0, tempRet0 | 0, $18 | 0, $19 | 0) | 0; //@line 22707
  $24 = ___udivdi3($22 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 22709
  $25 = tempRet0; //@line 22710
  $26 = HEAP32[$4 >> 2] | 0; //@line 22711
  HEAP32[$26 >> 2] = 0; //@line 22712
  HEAP32[$26 + 4 >> 2] = 0; //@line 22714
  $30 = HEAP32[(HEAP32[$6 >> 2] | 0) + 4 >> 2] | 0; //@line 22717
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(40) | 0; //@line 22718
  $31 = FUNCTION_TABLE_i[$30 & 7]() | 0; //@line 22719
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 615; //@line 22722
   $32 = $ReallocAsyncCtx3 + 4 | 0; //@line 22723
   HEAP32[$32 >> 2] = $4; //@line 22724
   $33 = $ReallocAsyncCtx3 + 8 | 0; //@line 22725
   HEAP32[$33 >> 2] = 1e6; //@line 22726
   $34 = $ReallocAsyncCtx3 + 12 | 0; //@line 22727
   HEAP32[$34 >> 2] = $10; //@line 22728
   $35 = $ReallocAsyncCtx3 + 16 | 0; //@line 22729
   HEAP32[$35 >> 2] = $17; //@line 22730
   $36 = $ReallocAsyncCtx3 + 24 | 0; //@line 22731
   $37 = $36; //@line 22732
   $38 = $37; //@line 22733
   HEAP32[$38 >> 2] = $24; //@line 22734
   $39 = $37 + 4 | 0; //@line 22735
   $40 = $39; //@line 22736
   HEAP32[$40 >> 2] = $25; //@line 22737
   $41 = $ReallocAsyncCtx3 + 32 | 0; //@line 22738
   HEAP32[$41 >> 2] = $6; //@line 22739
   $42 = $ReallocAsyncCtx3 + 36 | 0; //@line 22740
   HEAP32[$42 >> 2] = $2; //@line 22741
   sp = STACKTOP; //@line 22742
   return;
  }
  HEAP32[___async_retval >> 2] = $31; //@line 22746
  ___async_unwind = 0; //@line 22747
  HEAP32[$ReallocAsyncCtx3 >> 2] = 615; //@line 22748
  $32 = $ReallocAsyncCtx3 + 4 | 0; //@line 22749
  HEAP32[$32 >> 2] = $4; //@line 22750
  $33 = $ReallocAsyncCtx3 + 8 | 0; //@line 22751
  HEAP32[$33 >> 2] = 1e6; //@line 22752
  $34 = $ReallocAsyncCtx3 + 12 | 0; //@line 22753
  HEAP32[$34 >> 2] = $10; //@line 22754
  $35 = $ReallocAsyncCtx3 + 16 | 0; //@line 22755
  HEAP32[$35 >> 2] = $17; //@line 22756
  $36 = $ReallocAsyncCtx3 + 24 | 0; //@line 22757
  $37 = $36; //@line 22758
  $38 = $37; //@line 22759
  HEAP32[$38 >> 2] = $24; //@line 22760
  $39 = $37 + 4 | 0; //@line 22761
  $40 = $39; //@line 22762
  HEAP32[$40 >> 2] = $25; //@line 22763
  $41 = $ReallocAsyncCtx3 + 32 | 0; //@line 22764
  HEAP32[$41 >> 2] = $6; //@line 22765
  $42 = $ReallocAsyncCtx3 + 36 | 0; //@line 22766
  HEAP32[$42 >> 2] = $2; //@line 22767
  sp = STACKTOP; //@line 22768
  return;
 }
}
function _mbedtls_aes_setkey_dec($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$02$i$i = 0, $$031$i$i = 0, $$043$lcssa = 0, $$04353 = 0, $$04555$in = 0, $$051 = 0, $$054 = 0, $$pn$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $128 = 0, $13 = 0, $16 = 0, $19 = 0, $22 = 0, $24 = 0, $26 = 0, $3 = 0, $31 = 0, $32 = 0, $4 = 0, $6 = 0, $64 = 0, $8 = 0, $96 = 0, sp = 0, $$04353$looptemp = 0;
 sp = STACKTOP; //@line 386
 STACKTOP = STACKTOP + 288 | 0; //@line 387
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(288); //@line 387
 $3 = sp; //@line 388
 _memset($3 | 0, 0, 280) | 0; //@line 389
 $4 = $0 + 8 | 0; //@line 390
 HEAP32[$0 + 4 >> 2] = $4; //@line 392
 $6 = _mbedtls_aes_setkey_enc($3, $1, $2) | 0; //@line 393
 if (!$6) {
  $8 = HEAP32[$3 >> 2] | 0; //@line 396
  HEAP32[$0 >> 2] = $8; //@line 397
  $10 = HEAP32[$3 + 4 >> 2] | 0; //@line 399
  $11 = $8 << 2; //@line 400
  $12 = $10 + ($11 << 2) | 0; //@line 401
  $13 = $12 + 4 | 0; //@line 402
  HEAP32[$4 >> 2] = HEAP32[$12 >> 2]; //@line 405
  $16 = $13 + 4 | 0; //@line 406
  HEAP32[$0 + 12 >> 2] = HEAP32[$13 >> 2]; //@line 409
  $19 = $16 + 4 | 0; //@line 410
  HEAP32[$0 + 16 >> 2] = HEAP32[$16 >> 2]; //@line 413
  $22 = $19 + 4 | 0; //@line 414
  $24 = $0 + 24 | 0; //@line 416
  HEAP32[$0 + 20 >> 2] = HEAP32[$19 >> 2]; //@line 417
  $$051 = $22 + -32 | 0; //@line 418
  if (($8 | 0) > 1) {
   $26 = ~$8; //@line 421
   $31 = $11 + -4 - ($8 + (($26 | 0) > -3 ? $26 : -3) << 2) | 0; //@line 427
   $$04353 = $24; //@line 428
   $$04555$in = $8; //@line 428
   $$054 = $$051; //@line 428
   while (1) {
    $$04353$looptemp = $$04353;
    $$04353 = $$04353 + 16 | 0; //@line 431
    $32 = HEAP32[$$054 >> 2] | 0; //@line 432
    HEAP32[$$04353$looptemp >> 2] = HEAP32[2388 + ((HEAPU8[14475 + ($32 >>> 8 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[1364 + ((HEAPU8[14475 + ($32 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[3412 + ((HEAPU8[14475 + ($32 >>> 16 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[4436 + ((HEAPU8[14475 + ($32 >>> 24) >> 0] | 0) << 2) >> 2]; //@line 463
    $64 = HEAP32[$$054 + 4 >> 2] | 0; //@line 465
    HEAP32[$$04353$looptemp + 4 >> 2] = HEAP32[2388 + ((HEAPU8[14475 + ($64 >>> 8 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[1364 + ((HEAPU8[14475 + ($64 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[3412 + ((HEAPU8[14475 + ($64 >>> 16 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[4436 + ((HEAPU8[14475 + ($64 >>> 24) >> 0] | 0) << 2) >> 2]; //@line 496
    $96 = HEAP32[$$054 + 8 >> 2] | 0; //@line 498
    HEAP32[$$04353$looptemp + 8 >> 2] = HEAP32[2388 + ((HEAPU8[14475 + ($96 >>> 8 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[1364 + ((HEAPU8[14475 + ($96 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[3412 + ((HEAPU8[14475 + ($96 >>> 16 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[4436 + ((HEAPU8[14475 + ($96 >>> 24) >> 0] | 0) << 2) >> 2]; //@line 529
    $128 = HEAP32[$$054 + 12 >> 2] | 0; //@line 531
    HEAP32[$$04353$looptemp + 12 >> 2] = HEAP32[2388 + ((HEAPU8[14475 + ($128 >>> 8 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[1364 + ((HEAPU8[14475 + ($128 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[3412 + ((HEAPU8[14475 + ($128 >>> 16 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[4436 + ((HEAPU8[14475 + ($128 >>> 24) >> 0] | 0) << 2) >> 2]; //@line 561
    $$054 = $$054 + -16 | 0; //@line 562
    if (($$04555$in | 0) <= 2) {
     break;
    } else {
     $$04555$in = $$04555$in + -1 | 0; //@line 565
    }
   }
   $$0$lcssa = $$054; //@line 571
   $$043$lcssa = $$04353; //@line 571
   $$pn$lcssa = $10 + ($31 << 2) | 0; //@line 571
  } else {
   $$0$lcssa = $$051; //@line 573
   $$043$lcssa = $24; //@line 573
   $$pn$lcssa = $22; //@line 573
  }
  HEAP32[$$043$lcssa >> 2] = HEAP32[$$0$lcssa >> 2]; //@line 578
  HEAP32[$$043$lcssa + 4 >> 2] = HEAP32[$$pn$lcssa + -28 >> 2]; //@line 582
  HEAP32[$$043$lcssa + 8 >> 2] = HEAP32[$$pn$lcssa + -24 >> 2]; //@line 586
  HEAP32[$$043$lcssa + 12 >> 2] = HEAP32[$$pn$lcssa + -20 >> 2]; //@line 588
  $$02$i$i = $3; //@line 589
  $$031$i$i = 280; //@line 589
 } else {
  $$02$i$i = $3; //@line 591
  $$031$i$i = 280; //@line 591
 }
 while (1) {
  $$031$i$i = $$031$i$i + -1 | 0; //@line 594
  HEAP8[$$02$i$i >> 0] = 0; //@line 596
  if (!$$031$i$i) {
   break;
  } else {
   $$02$i$i = $$02$i$i + 1 | 0; //@line 601
  }
 }
 STACKTOP = sp; //@line 604
 return $6 | 0; //@line 604
}
function _mbedtls_cipher_cmac_update__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$09$i75 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $27 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $53 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 24502
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24504
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24506
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24508
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24510
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24512
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24514
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 24516
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 24518
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 24520
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 24522
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 24524
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 24526
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 24529
  $53 = ___async_retval; //@line 24530
  HEAP32[$53 >> 2] = $$0; //@line 24531
  return;
 }
 $33 = $2 - $4 | 0; //@line 24534
 $25 = $6 + $4 | 0; //@line 24535
 $37 = $8 + 1 | 0; //@line 24536
 if ($37 >>> 0 >= $10 >>> 0) {
  if (!$33) {
   $$0 = 0; //@line 24541
   $53 = ___async_retval; //@line 24542
   HEAP32[$53 >> 2] = $$0; //@line 24543
   return;
  }
  _memcpy((HEAP32[$14 >> 2] | 0) + ($16 + 16) | 0, $25 | 0, $33 | 0) | 0; //@line 24548
  HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + $33; //@line 24551
  $$0 = 0; //@line 24552
  $53 = ___async_retval; //@line 24553
  HEAP32[$53 >> 2] = $$0; //@line 24554
  return;
 }
 $$09$i75 = 0; //@line 24557
 do {
  $27 = $16 + $$09$i75 | 0; //@line 24561
  HEAP8[$27 >> 0] = HEAP8[$27 >> 0] ^ HEAP8[$25 + $$09$i75 >> 0]; //@line 24564
  $$09$i75 = $$09$i75 + 1 | 0; //@line 24565
 } while (($$09$i75 | 0) != ($4 | 0));
 $ReallocAsyncCtx = _emscripten_realloc_async_context(48) | 0; //@line 24573
 $31 = _mbedtls_cipher_update($18, $20, $4, $20, $22) | 0; //@line 24574
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 601; //@line 24577
  $32 = $ReallocAsyncCtx + 4 | 0; //@line 24578
  HEAP32[$32 >> 2] = $33; //@line 24579
  $34 = $ReallocAsyncCtx + 8 | 0; //@line 24580
  HEAP32[$34 >> 2] = $4; //@line 24581
  $35 = $ReallocAsyncCtx + 12 | 0; //@line 24582
  HEAP32[$35 >> 2] = $25; //@line 24583
  $36 = $ReallocAsyncCtx + 16 | 0; //@line 24584
  HEAP32[$36 >> 2] = $37; //@line 24585
  $38 = $ReallocAsyncCtx + 20 | 0; //@line 24586
  HEAP32[$38 >> 2] = $10; //@line 24587
  $39 = $ReallocAsyncCtx + 24 | 0; //@line 24588
  HEAP32[$39 >> 2] = $12; //@line 24589
  $40 = $ReallocAsyncCtx + 28 | 0; //@line 24590
  HEAP32[$40 >> 2] = $14; //@line 24591
  $41 = $ReallocAsyncCtx + 32 | 0; //@line 24592
  HEAP32[$41 >> 2] = $16; //@line 24593
  $42 = $ReallocAsyncCtx + 36 | 0; //@line 24594
  HEAP32[$42 >> 2] = $18; //@line 24595
  $43 = $ReallocAsyncCtx + 40 | 0; //@line 24596
  HEAP32[$43 >> 2] = $20; //@line 24597
  $44 = $ReallocAsyncCtx + 44 | 0; //@line 24598
  HEAP32[$44 >> 2] = $22; //@line 24599
  sp = STACKTOP; //@line 24600
  return;
 }
 HEAP32[___async_retval >> 2] = $31; //@line 24604
 ___async_unwind = 0; //@line 24605
 HEAP32[$ReallocAsyncCtx >> 2] = 601; //@line 24606
 $32 = $ReallocAsyncCtx + 4 | 0; //@line 24607
 HEAP32[$32 >> 2] = $33; //@line 24608
 $34 = $ReallocAsyncCtx + 8 | 0; //@line 24609
 HEAP32[$34 >> 2] = $4; //@line 24610
 $35 = $ReallocAsyncCtx + 12 | 0; //@line 24611
 HEAP32[$35 >> 2] = $25; //@line 24612
 $36 = $ReallocAsyncCtx + 16 | 0; //@line 24613
 HEAP32[$36 >> 2] = $37; //@line 24614
 $38 = $ReallocAsyncCtx + 20 | 0; //@line 24615
 HEAP32[$38 >> 2] = $10; //@line 24616
 $39 = $ReallocAsyncCtx + 24 | 0; //@line 24617
 HEAP32[$39 >> 2] = $12; //@line 24618
 $40 = $ReallocAsyncCtx + 28 | 0; //@line 24619
 HEAP32[$40 >> 2] = $14; //@line 24620
 $41 = $ReallocAsyncCtx + 32 | 0; //@line 24621
 HEAP32[$41 >> 2] = $16; //@line 24622
 $42 = $ReallocAsyncCtx + 36 | 0; //@line 24623
 HEAP32[$42 >> 2] = $18; //@line 24624
 $43 = $ReallocAsyncCtx + 40 | 0; //@line 24625
 HEAP32[$43 >> 2] = $20; //@line 24626
 $44 = $ReallocAsyncCtx + 44 | 0; //@line 24627
 HEAP32[$44 >> 2] = $22; //@line 24628
 sp = STACKTOP; //@line 24629
 return;
}
function _mbedtls_gcm_update($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$05966 = 0, $$06065 = 0, $$061 = 0, $$06264 = 0, $$163 = 0, $11 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $30 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $42 = 0, $44 = 0, $46 = 0, $5 = 0, $67 = 0, $68 = 0, $75 = 0, $83 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4915
 STACKTOP = STACKTOP + 32 | 0; //@line 4916
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 4916
 $4 = sp + 8 | 0; //@line 4917
 $5 = sp; //@line 4918
 HEAP32[$5 >> 2] = 0; //@line 4919
 if ($3 >>> 0 > $2 >>> 0) {
  if (($3 - $2 | 0) >>> 0 < $1 >>> 0) {
   $$0 = -20; //@line 4927
   STACKTOP = sp; //@line 4928
   return $$0 | 0; //@line 4928
  }
 }
 $11 = $0 + 328 | 0; //@line 4931
 $12 = $11; //@line 4932
 $14 = HEAP32[$12 >> 2] | 0; //@line 4934
 $17 = HEAP32[$12 + 4 >> 2] | 0; //@line 4937
 $18 = _i64Add($14 | 0, $17 | 0, $1 | 0, 0) | 0; //@line 4938
 $19 = tempRet0; //@line 4939
 if ($19 >>> 0 < $17 >>> 0 | ($19 | 0) == ($17 | 0) & $18 >>> 0 < $14 >>> 0 | ($19 >>> 0 > 15 | ($19 | 0) == 15 & $18 >>> 0 > 4294967264)) {
  $$0 = -20; //@line 4952
  STACKTOP = sp; //@line 4953
  return $$0 | 0; //@line 4953
 }
 $30 = $11; //@line 4955
 HEAP32[$30 >> 2] = $18; //@line 4957
 HEAP32[$30 + 4 >> 2] = $19; //@line 4960
 if (!$1) {
  $$0 = 0; //@line 4963
  STACKTOP = sp; //@line 4964
  return $$0 | 0; //@line 4964
 }
 $35 = $0 + 360 | 0; //@line 4966
 $36 = $0 + 376 | 0; //@line 4967
 $37 = $0 + 392 | 0; //@line 4968
 $$05966 = $3; //@line 4969
 $$06065 = $2; //@line 4969
 $$06264 = $1; //@line 4969
 while (1) {
  $39 = $$06264 >>> 0 < 16 ? $$06264 : 16; //@line 4972
  $$061 = 16; //@line 4973
  do {
   if ($$061 >>> 0 <= 12) {
    break;
   }
   $$061 = $$061 + -1 | 0; //@line 4979
   $42 = $0 + 360 + $$061 | 0; //@line 4980
   $44 = (HEAP8[$42 >> 0] | 0) + 1 << 24 >> 24; //@line 4982
   HEAP8[$42 >> 0] = $44; //@line 4983
  } while (!($44 << 24 >> 24));
  $AsyncCtx = _emscripten_alloc_async_context(68, sp) | 0; //@line 4991
  $46 = _mbedtls_cipher_update($0, $35, 16, $4, $5) | 0; //@line 4992
  if (___async) {
   label = 10; //@line 4995
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4998
  if ($46 | 0) {
   $$0 = $46; //@line 5001
   label = 19; //@line 5002
   break;
  }
  if ($39 | 0) {
   $$163 = 0; //@line 5007
   do {
    $67 = $0 + 376 + $$163 | 0; //@line 5011
    $68 = $$06065 + $$163 | 0; //@line 5012
    if (!(HEAP32[$37 >> 2] | 0)) {
     HEAP8[$67 >> 0] = HEAP8[$67 >> 0] ^ HEAP8[$68 >> 0]; //@line 5017
    }
    $75 = HEAP8[$68 >> 0] ^ HEAP8[$4 + $$163 >> 0]; //@line 5022
    HEAP8[$$05966 + $$163 >> 0] = $75; //@line 5024
    if ((HEAP32[$37 >> 2] | 0) == 1) {
     HEAP8[$67 >> 0] = HEAP8[$67 >> 0] ^ $75; //@line 5030
    }
    $$163 = $$163 + 1 | 0; //@line 5032
   } while ($$163 >>> 0 < $39 >>> 0);
  }
  _gcm_mult($0, $36, $36); //@line 5041
  $83 = $$06264 - $39 | 0; //@line 5042
  if (!$83) {
   $$0 = 0; //@line 5047
   label = 19; //@line 5048
   break;
  } else {
   $$05966 = $$05966 + $39 | 0; //@line 5051
   $$06065 = $$06065 + $39 | 0; //@line 5051
   $$06264 = $83; //@line 5051
  }
 }
 if ((label | 0) == 10) {
  HEAP32[$AsyncCtx >> 2] = 608; //@line 5055
  HEAP32[$AsyncCtx + 4 >> 2] = $39; //@line 5057
  HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 5059
  HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 5061
  HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 5063
  HEAP32[$AsyncCtx + 20 >> 2] = $36; //@line 5065
  HEAP32[$AsyncCtx + 24 >> 2] = $$06264; //@line 5067
  HEAP32[$AsyncCtx + 28 >> 2] = $$06065; //@line 5069
  HEAP32[$AsyncCtx + 32 >> 2] = $$05966; //@line 5071
  HEAP32[$AsyncCtx + 36 >> 2] = $37; //@line 5073
  HEAP32[$AsyncCtx + 40 >> 2] = $4; //@line 5075
  HEAP32[$AsyncCtx + 44 >> 2] = $3; //@line 5077
  HEAP32[$AsyncCtx + 48 >> 2] = $2; //@line 5079
  HEAP32[$AsyncCtx + 52 >> 2] = $1; //@line 5081
  HEAP32[$AsyncCtx + 56 >> 2] = $0; //@line 5083
  HEAP32[$AsyncCtx + 60 >> 2] = $35; //@line 5085
  HEAP32[$AsyncCtx + 64 >> 2] = $5; //@line 5087
  sp = STACKTOP; //@line 5088
  STACKTOP = sp; //@line 5089
  return 0; //@line 5089
 } else if ((label | 0) == 19) {
  STACKTOP = sp; //@line 5092
  return $$0 | 0; //@line 5092
 }
 return 0; //@line 5094
}
function __ZN7LoRaMac17on_radio_rx_errorEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $16 = 0, $20 = 0, $27 = 0, $31 = 0, $35 = 0, $44 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 13269
 STACKTOP = STACKTOP + 16 | 0; //@line 13270
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 13270
 $$byval_copy = sp + 8 | 0; //@line 13271
 $vararg_buffer = sp; //@line 13272
 _mbed_tracef(16, 13728, 13948, $vararg_buffer); //@line 13273
 do {
  if ((HEAP32[$0 + 360 >> 2] | 0) == 2) {
   _mbed_tracef(16, 13728, 13747, $$byval_copy); //@line 13279
   $5 = HEAP32[$0 + 1328 >> 2] | 0; //@line 13281
   HEAP32[$vararg_buffer >> 2] = 293; //@line 13282
   HEAP32[$vararg_buffer + 4 >> 2] = 0; //@line 13284
   $AsyncCtx5 = _emscripten_alloc_async_context(12, sp) | 0; //@line 13285
   HEAP32[$$byval_copy >> 2] = HEAP32[$vararg_buffer >> 2]; //@line 13286
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$vararg_buffer + 4 >> 2]; //@line 13286
   $6 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($5, $0, $$byval_copy) | 0; //@line 13287
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 370; //@line 13290
    HEAP32[$AsyncCtx5 + 4 >> 2] = $vararg_buffer; //@line 13292
    HEAP32[$AsyncCtx5 + 8 >> 2] = $0; //@line 13294
    sp = STACKTOP; //@line 13295
    STACKTOP = sp; //@line 13296
    return;
   }
   _emscripten_free_async_context($AsyncCtx5 | 0); //@line 13298
   do {
    if (!$6) {
     $AsyncCtx13 = _emscripten_alloc_async_context(12, sp) | 0; //@line 13302
     _mbed_assert_internal(13612, 13621, 215); //@line 13303
     if (___async) {
      HEAP32[$AsyncCtx13 >> 2] = 371; //@line 13306
      HEAP32[$AsyncCtx13 + 4 >> 2] = $vararg_buffer; //@line 13308
      HEAP32[$AsyncCtx13 + 8 >> 2] = $0; //@line 13310
      sp = STACKTOP; //@line 13311
      STACKTOP = sp; //@line 13312
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx13 | 0); //@line 13314
      break;
     }
    }
   } while (0);
   HEAP32[$0 + 364 >> 2] = 2; //@line 13320
   if (!(HEAP8[$0 + 373 >> 0] | 0)) {
    label = 20; //@line 13325
   } else {
    label = 19; //@line 13327
   }
  } else {
   $16 = HEAP32[$0 >> 2] | 0; //@line 13330
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 13331
   __ZN7LoRaPHY18put_radio_to_sleepEv($16); //@line 13332
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 372; //@line 13335
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 13337
    sp = STACKTOP; //@line 13338
    STACKTOP = sp; //@line 13339
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 13341
   $20 = (HEAP8[$0 + 373 >> 0] | 0) != 0; //@line 13347
   if (HEAP32[$0 + 364 >> 2] | 0) {
    if ($20) {
     label = 19; //@line 13350
     break;
    } else {
     label = 20; //@line 13353
     break;
    }
   }
   if ($20) {
    HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($0 + 288 | 0) | 0) + 4 >> 2] = 5; //@line 13361
   }
   HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) + 4 >> 2] = 5; //@line 13366
   $27 = $0 + 356 | 0; //@line 13367
   $31 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$27 >> 2] | 0, HEAP32[$0 + 980 >> 2] | 0) | 0; //@line 13371
   if ($31 >>> 0 < (HEAP32[$0 + 976 >> 2] | 0) >>> 0) {
    STACKTOP = sp; //@line 13376
    return;
   }
   $35 = HEAP32[$27 >> 2] | 0; //@line 13378
   $AsyncCtx9 = _emscripten_alloc_async_context(8, sp) | 0; //@line 13380
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($35, $0 + 1056 | 0); //@line 13381
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 373; //@line 13384
    HEAP32[$AsyncCtx9 + 4 >> 2] = $0; //@line 13386
    sp = STACKTOP; //@line 13387
    STACKTOP = sp; //@line 13388
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx9 | 0); //@line 13390
    break;
   }
  }
 } while (0);
 if ((label | 0) == 19) {
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($0 + 288 | 0) | 0) + 4 >> 2] = 6; //@line 13399
  label = 20; //@line 13400
 }
 if ((label | 0) == 20) {
  HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) + 4 >> 2] = 6; //@line 13406
 }
 $44 = $0 + 944 | 0; //@line 13408
 HEAP8[$44 >> 0] = HEAP8[$44 >> 0] | 32; //@line 13411
 STACKTOP = sp; //@line 13412
 return;
}
function __Z11compute_micPKhtS0_jhjPj($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $22 = 0, $24 = 0, $26 = 0, $32 = 0, $37 = 0, $42 = 0, $45 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 20524
 HEAP8[14246] = $4; //@line 20525
 HEAP8[14247] = $3; //@line 20527
 HEAP8[14248] = $3 >>> 8; //@line 20530
 HEAP8[14249] = $3 >>> 16; //@line 20533
 HEAP8[14250] = $3 >>> 24; //@line 20536
 HEAP8[14251] = $5; //@line 20538
 HEAP8[14252] = $5 >>> 8; //@line 20541
 HEAP8[14253] = $5 >>> 16; //@line 20544
 HEAP8[14254] = $5 >>> 24; //@line 20547
 $22 = $1 & 255; //@line 20549
 HEAP8[14256] = $1; //@line 20551
 _mbedtls_cipher_init(23188); //@line 20552
 $24 = _mbedtls_cipher_info_from_type(2) | 0; //@line 20553
 if (!$24) {
  $$0 = -24960; //@line 20556
 } else {
  $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 20558
  $26 = _mbedtls_cipher_setup(23188, $24) | 0; //@line 20559
  if (___async) {
   HEAP32[$AsyncCtx15 >> 2] = 509; //@line 20562
   HEAP32[$AsyncCtx15 + 4 >> 2] = $6; //@line 20564
   HEAP32[$AsyncCtx15 + 8 >> 2] = $2; //@line 20566
   HEAP32[$AsyncCtx15 + 12 >> 2] = $0; //@line 20568
   HEAP32[$AsyncCtx15 + 16 >> 2] = $22; //@line 20570
   sp = STACKTOP; //@line 20571
   return 0; //@line 20572
  }
  _emscripten_free_async_context($AsyncCtx15 | 0); //@line 20574
  if (!$26) {
   $AsyncCtx11 = _emscripten_alloc_async_context(16, sp) | 0; //@line 20577
   $32 = _mbedtls_cipher_cmac_starts(23188, $2, 128) | 0; //@line 20578
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 510; //@line 20581
    HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 20583
    HEAP32[$AsyncCtx11 + 8 >> 2] = $22; //@line 20585
    HEAP32[$AsyncCtx11 + 12 >> 2] = $6; //@line 20587
    sp = STACKTOP; //@line 20588
    return 0; //@line 20589
   }
   _emscripten_free_async_context($AsyncCtx11 | 0); //@line 20591
   if (!$32) {
    $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 20594
    $37 = _mbedtls_cipher_cmac_update(23188, 14241, 16) | 0; //@line 20595
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 511; //@line 20598
     HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 20600
     HEAP32[$AsyncCtx3 + 8 >> 2] = $22; //@line 20602
     HEAP32[$AsyncCtx3 + 12 >> 2] = $6; //@line 20604
     sp = STACKTOP; //@line 20605
     return 0; //@line 20606
    }
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 20608
    if (!$37) {
     $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 20611
     $42 = _mbedtls_cipher_cmac_update(23188, $0, $22) | 0; //@line 20612
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 512; //@line 20615
      HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 20617
      sp = STACKTOP; //@line 20618
      return 0; //@line 20619
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 20621
     if (!$42) {
      $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 20624
      $45 = _mbedtls_cipher_cmac_finish(23188, 24500) | 0; //@line 20625
      if (___async) {
       HEAP32[$AsyncCtx7 >> 2] = 513; //@line 20628
       HEAP32[$AsyncCtx7 + 4 >> 2] = $6; //@line 20630
       sp = STACKTOP; //@line 20631
       return 0; //@line 20632
      }
      _emscripten_free_async_context($AsyncCtx7 | 0); //@line 20634
      if (!$45) {
       HEAP32[$6 >> 2] = (HEAPU8[24502] | 0) << 16 | (HEAPU8[24503] | 0) << 24 | (HEAPU8[24501] | 0) << 8 | (HEAPU8[24500] | 0); //@line 20651
       $$0 = 0; //@line 20652
      } else {
       $$0 = $45; //@line 20654
      }
     } else {
      $$0 = $42; //@line 20657
     }
    } else {
     $$0 = $37; //@line 20660
    }
   } else {
    $$0 = $32; //@line 20663
   }
  } else {
   $$0 = $26; //@line 20666
  }
 }
 $AsyncCtx19 = _emscripten_alloc_async_context(8, sp) | 0; //@line 20669
 _mbedtls_cipher_free(23188); //@line 20670
 if (___async) {
  HEAP32[$AsyncCtx19 >> 2] = 514; //@line 20673
  HEAP32[$AsyncCtx19 + 4 >> 2] = $$0; //@line 20675
  sp = STACKTOP; //@line 20676
  return 0; //@line 20677
 } else {
  _emscripten_free_async_context($AsyncCtx19 | 0); //@line 20679
  return $$0 | 0; //@line 20680
 }
 return 0; //@line 20682
}
function __ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_69($0) {
 $0 = $0 | 0;
 var $$pre12 = 0, $10 = 0, $12 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 21842
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21844
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21846
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21848
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21850
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21852
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21854
 $$pre12 = HEAP32[$2 >> 2] | 0; //@line 21855
 if ($$pre12 | 0) {
  $15 = HEAP32[$$pre12 + 4 >> 2] | 0; //@line 21859
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 21860
  FUNCTION_TABLE_vii[$15 & 31]($6, $8); //@line 21861
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 263; //@line 21864
   $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 21865
   HEAP32[$16 >> 2] = $2; //@line 21866
   $17 = $ReallocAsyncCtx4 + 8 | 0; //@line 21867
   HEAP32[$17 >> 2] = $4; //@line 21868
   $18 = $ReallocAsyncCtx4 + 12 | 0; //@line 21869
   HEAP32[$18 >> 2] = $10; //@line 21870
   $19 = $ReallocAsyncCtx4 + 16 | 0; //@line 21871
   HEAP32[$19 >> 2] = $12; //@line 21872
   sp = STACKTOP; //@line 21873
   return;
  }
  ___async_unwind = 0; //@line 21876
  HEAP32[$ReallocAsyncCtx4 >> 2] = 263; //@line 21877
  $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 21878
  HEAP32[$16 >> 2] = $2; //@line 21879
  $17 = $ReallocAsyncCtx4 + 8 | 0; //@line 21880
  HEAP32[$17 >> 2] = $4; //@line 21881
  $18 = $ReallocAsyncCtx4 + 12 | 0; //@line 21882
  HEAP32[$18 >> 2] = $10; //@line 21883
  $19 = $ReallocAsyncCtx4 + 16 | 0; //@line 21884
  HEAP32[$19 >> 2] = $12; //@line 21885
  sp = STACKTOP; //@line 21886
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 21889
 $20 = $10 + 32 | 0; //@line 21890
 $21 = $10 + 44 | 0; //@line 21891
 $22 = HEAP32[$21 >> 2] | 0; //@line 21892
 if (!$22) {
  return;
 }
 $24 = $12 + 1912 | 0; //@line 21897
 if (($24 | 0) == ($20 | 0)) {
  return;
 }
 $26 = $12 + 1924 | 0; //@line 21902
 $27 = HEAP32[$26 >> 2] | 0; //@line 21903
 if (!$27) {
  $36 = HEAP32[$22 + 4 >> 2] | 0; //@line 21907
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 21908
  FUNCTION_TABLE_vii[$36 & 31]($24, $20); //@line 21909
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 265; //@line 21912
   $37 = $ReallocAsyncCtx6 + 4 | 0; //@line 21913
   HEAP32[$37 >> 2] = $21; //@line 21914
   $38 = $ReallocAsyncCtx6 + 8 | 0; //@line 21915
   HEAP32[$38 >> 2] = $26; //@line 21916
   sp = STACKTOP; //@line 21917
   return;
  }
  ___async_unwind = 0; //@line 21920
  HEAP32[$ReallocAsyncCtx6 >> 2] = 265; //@line 21921
  $37 = $ReallocAsyncCtx6 + 4 | 0; //@line 21922
  HEAP32[$37 >> 2] = $21; //@line 21923
  $38 = $ReallocAsyncCtx6 + 8 | 0; //@line 21924
  HEAP32[$38 >> 2] = $26; //@line 21925
  sp = STACKTOP; //@line 21926
  return;
 } else {
  $30 = HEAP32[$27 + 8 >> 2] | 0; //@line 21930
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 21931
  FUNCTION_TABLE_vi[$30 & 1023]($24); //@line 21932
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 264; //@line 21935
   $31 = $ReallocAsyncCtx5 + 4 | 0; //@line 21936
   HEAP32[$31 >> 2] = $21; //@line 21937
   $32 = $ReallocAsyncCtx5 + 8 | 0; //@line 21938
   HEAP32[$32 >> 2] = $26; //@line 21939
   $33 = $ReallocAsyncCtx5 + 12 | 0; //@line 21940
   HEAP32[$33 >> 2] = $24; //@line 21941
   $34 = $ReallocAsyncCtx5 + 16 | 0; //@line 21942
   HEAP32[$34 >> 2] = $20; //@line 21943
   sp = STACKTOP; //@line 21944
   return;
  }
  ___async_unwind = 0; //@line 21947
  HEAP32[$ReallocAsyncCtx5 >> 2] = 264; //@line 21948
  $31 = $ReallocAsyncCtx5 + 4 | 0; //@line 21949
  HEAP32[$31 >> 2] = $21; //@line 21950
  $32 = $ReallocAsyncCtx5 + 8 | 0; //@line 21951
  HEAP32[$32 >> 2] = $26; //@line 21952
  $33 = $ReallocAsyncCtx5 + 12 | 0; //@line 21953
  HEAP32[$33 >> 2] = $24; //@line 21954
  $34 = $ReallocAsyncCtx5 + 16 | 0; //@line 21955
  HEAP32[$34 >> 2] = $20; //@line 21956
  sp = STACKTOP; //@line 21957
  return;
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_158($0) {
 $0 = $0 | 0;
 var $$085$off0$reg2mem$0 = 0, $$182$off0 = 0, $$186$off0 = 0, $$283$off0 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $4 = 0, $59 = 0, $6 = 0, $67 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 28543
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28545
 $4 = HEAP8[$0 + 8 >> 0] & 1; //@line 28548
 $6 = HEAP8[$0 + 9 >> 0] & 1; //@line 28551
 $8 = HEAP32[$0 + 12 >> 2] | 0; //@line 28553
 $10 = HEAP32[$0 + 16 >> 2] | 0; //@line 28555
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 28557
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 28559
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 28561
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 28563
 $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 28565
 $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 28567
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 28569
 $26 = HEAP32[$0 + 48 >> 2] | 0; //@line 28571
 $28 = HEAP8[$0 + 52 >> 0] & 1; //@line 28574
 L2 : do {
  if (!(HEAP8[$18 >> 0] | 0)) {
   do {
    if (!(HEAP8[$24 >> 0] | 0)) {
     $$182$off0 = $4; //@line 28583
     $$186$off0 = $6; //@line 28583
    } else {
     if (!(HEAP8[$26 >> 0] | 0)) {
      if (!(HEAP32[$2 >> 2] & 1)) {
       $$085$off0$reg2mem$0 = $6; //@line 28592
       $$283$off0 = 1; //@line 28592
       label = 13; //@line 28593
       break L2;
      } else {
       $$182$off0 = 1; //@line 28596
       $$186$off0 = $6; //@line 28596
       break;
      }
     }
     if ((HEAP32[$10 >> 2] | 0) == 1) {
      label = 18; //@line 28603
      break L2;
     }
     if (!(HEAP32[$2 >> 2] & 2)) {
      label = 18; //@line 28610
      break L2;
     } else {
      $$182$off0 = 1; //@line 28613
      $$186$off0 = 1; //@line 28613
     }
    }
   } while (0);
   $30 = $8 + 8 | 0; //@line 28617
   if ($30 >>> 0 < $22 >>> 0) {
    HEAP8[$26 >> 0] = 0; //@line 28620
    HEAP8[$24 >> 0] = 0; //@line 28621
    $ReallocAsyncCtx5 = _emscripten_realloc_async_context(56) | 0; //@line 28622
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($30, $16, $12, $12, 1, $28); //@line 28623
    if (!___async) {
     ___async_unwind = 0; //@line 28626
    }
    HEAP32[$ReallocAsyncCtx5 >> 2] = 719; //@line 28628
    HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 28630
    HEAP8[$ReallocAsyncCtx5 + 8 >> 0] = $$182$off0 & 1; //@line 28633
    HEAP8[$ReallocAsyncCtx5 + 9 >> 0] = $$186$off0 & 1; //@line 28636
    HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $30; //@line 28638
    HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $10; //@line 28640
    HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $12; //@line 28642
    HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $14; //@line 28644
    HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $16; //@line 28646
    HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $18; //@line 28648
    HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $20; //@line 28650
    HEAP32[$ReallocAsyncCtx5 + 40 >> 2] = $22; //@line 28652
    HEAP32[$ReallocAsyncCtx5 + 44 >> 2] = $24; //@line 28654
    HEAP32[$ReallocAsyncCtx5 + 48 >> 2] = $26; //@line 28656
    HEAP8[$ReallocAsyncCtx5 + 52 >> 0] = $28 & 1; //@line 28659
    sp = STACKTOP; //@line 28660
    return;
   } else {
    $$085$off0$reg2mem$0 = $$186$off0; //@line 28663
    $$283$off0 = $$182$off0; //@line 28663
    label = 13; //@line 28664
   }
  } else {
   $$085$off0$reg2mem$0 = $6; //@line 28667
   $$283$off0 = $4; //@line 28667
   label = 13; //@line 28668
  }
 } while (0);
 do {
  if ((label | 0) == 13) {
   if (!$$085$off0$reg2mem$0) {
    HEAP32[$14 >> 2] = $12; //@line 28674
    $59 = $16 + 40 | 0; //@line 28675
    HEAP32[$59 >> 2] = (HEAP32[$59 >> 2] | 0) + 1; //@line 28678
    if ((HEAP32[$16 + 36 >> 2] | 0) == 1) {
     if ((HEAP32[$10 >> 2] | 0) == 2) {
      HEAP8[$18 >> 0] = 1; //@line 28686
      if ($$283$off0) {
       label = 18; //@line 28688
       break;
      } else {
       $67 = 4; //@line 28691
       break;
      }
     }
    }
   }
   if ($$283$off0) {
    label = 18; //@line 28698
   } else {
    $67 = 4; //@line 28700
   }
  }
 } while (0);
 if ((label | 0) == 18) {
  $67 = 3; //@line 28705
 }
 HEAP32[$20 >> 2] = $67; //@line 28707
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_165($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $2 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $35 = 0, $36 = 0, $39 = 0, $4 = 0, $47 = 0, $53 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 29401
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29403
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29405
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29407
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29409
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29411
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29413
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29415
 HEAP32[$4 + 364 >> 2] = 2; //@line 29419
 if (HEAP8[$4 + 371 >> 0] | 0) {
  $21 = HEAP32[$14 >> 2] | 0; //@line 29424
  $24 = HEAP32[$4 + 972 >> 2] | 0; //@line 29427
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(32) | 0; //@line 29428
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($21, $4 + 1036 | 0, $24); //@line 29429
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 296; //@line 29432
   $25 = $ReallocAsyncCtx4 + 4 | 0; //@line 29433
   HEAP32[$25 >> 2] = $12; //@line 29434
   $26 = $ReallocAsyncCtx4 + 8 | 0; //@line 29435
   HEAP32[$26 >> 2] = $4; //@line 29436
   $27 = $ReallocAsyncCtx4 + 12 | 0; //@line 29437
   HEAP32[$27 >> 2] = $14; //@line 29438
   $28 = $ReallocAsyncCtx4 + 16 | 0; //@line 29439
   HEAP32[$28 >> 2] = $6; //@line 29440
   $29 = $ReallocAsyncCtx4 + 20 | 0; //@line 29441
   HEAP32[$29 >> 2] = $2; //@line 29442
   $30 = $ReallocAsyncCtx4 + 24 | 0; //@line 29443
   HEAP32[$30 >> 2] = $8; //@line 29444
   $31 = $ReallocAsyncCtx4 + 28 | 0; //@line 29445
   HEAP32[$31 >> 2] = $10; //@line 29446
   sp = STACKTOP; //@line 29447
   return;
  }
  ___async_unwind = 0; //@line 29450
  HEAP32[$ReallocAsyncCtx4 >> 2] = 296; //@line 29451
  $25 = $ReallocAsyncCtx4 + 4 | 0; //@line 29452
  HEAP32[$25 >> 2] = $12; //@line 29453
  $26 = $ReallocAsyncCtx4 + 8 | 0; //@line 29454
  HEAP32[$26 >> 2] = $4; //@line 29455
  $27 = $ReallocAsyncCtx4 + 12 | 0; //@line 29456
  HEAP32[$27 >> 2] = $14; //@line 29457
  $28 = $ReallocAsyncCtx4 + 16 | 0; //@line 29458
  HEAP32[$28 >> 2] = $6; //@line 29459
  $29 = $ReallocAsyncCtx4 + 20 | 0; //@line 29460
  HEAP32[$29 >> 2] = $2; //@line 29461
  $30 = $ReallocAsyncCtx4 + 24 | 0; //@line 29462
  HEAP32[$30 >> 2] = $8; //@line 29463
  $31 = $ReallocAsyncCtx4 + 28 | 0; //@line 29464
  HEAP32[$31 >> 2] = $10; //@line 29465
  sp = STACKTOP; //@line 29466
  return;
 }
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0) + 4 >> 2] = 0; //@line 29472
 $35 = $4 + 944 | 0; //@line 29473
 $36 = HEAP8[$35 >> 0] | 0; //@line 29474
 if (!($36 << 24 >> 24)) {
  HEAP8[$35 >> 0] = 1; //@line 29477
  $39 = 1; //@line 29478
 } else {
  $39 = $36; //@line 29480
 }
 HEAP8[$35 >> 0] = $39 | 32; //@line 29483
 HEAP8[$4 + 376 >> 0] = ($6 | 0) == 0 & (HEAP8[$4 + 944 >> 0] & 8) != 0 & 1; //@line 29492
 $47 = HEAP8[$4 + 378 >> 0] | 0; //@line 29494
 HEAP8[$4 + 379 >> 0] = $47; //@line 29496
 HEAP8[$2 >> 0] = $47; //@line 29497
 HEAP8[$8 + 1 >> 0] = HEAP8[$4 + 372 >> 0] | 0; //@line 29501
 HEAP32[$8 + 4 >> 2] = $10; //@line 29503
 $53 = HEAP32[$4 >> 2] | 0; //@line 29504
 $56 = HEAP32[(HEAP32[$53 >> 2] | 0) + 12 >> 2] | 0; //@line 29507
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 29508
 FUNCTION_TABLE_vii[$56 & 31]($53, $8); //@line 29509
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 299; //@line 29512
  $57 = $ReallocAsyncCtx + 4 | 0; //@line 29513
  HEAP32[$57 >> 2] = $4; //@line 29514
  $58 = $ReallocAsyncCtx + 8 | 0; //@line 29515
  HEAP32[$58 >> 2] = $10; //@line 29516
  $59 = $ReallocAsyncCtx + 12 | 0; //@line 29517
  HEAP32[$59 >> 2] = $2; //@line 29518
  sp = STACKTOP; //@line 29519
  return;
 }
 ___async_unwind = 0; //@line 29522
 HEAP32[$ReallocAsyncCtx >> 2] = 299; //@line 29523
 $57 = $ReallocAsyncCtx + 4 | 0; //@line 29524
 HEAP32[$57 >> 2] = $4; //@line 29525
 $58 = $ReallocAsyncCtx + 8 | 0; //@line 29526
 HEAP32[$58 >> 2] = $10; //@line 29527
 $59 = $ReallocAsyncCtx + 12 | 0; //@line 29528
 HEAP32[$59 >> 2] = $2; //@line 29529
 sp = STACKTOP; //@line 29530
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_162($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 28967
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28969
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28971
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28973
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28975
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28977
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28979
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28981
 if ((HEAP32[$2 >> 2] | 0) != 2) {
  $17 = HEAP32[$6 >> 2] | 0; //@line 28985
  $19 = $4 + 976 | 0; //@line 28987
  $20 = HEAP32[$19 >> 2] | 0; //@line 28988
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 28989
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($17, $4 + 1056 | 0, $20); //@line 28990
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 297; //@line 28993
   $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 28994
   HEAP32[$21 >> 2] = $2; //@line 28995
   $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 28996
   HEAP32[$22 >> 2] = $19; //@line 28997
   $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 28998
   HEAP32[$23 >> 2] = $6; //@line 28999
   $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 29000
   HEAP32[$24 >> 2] = $4; //@line 29001
   $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 29002
   HEAP32[$25 >> 2] = $8; //@line 29003
   $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 29004
   HEAP32[$26 >> 2] = $10; //@line 29005
   $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 29006
   HEAP32[$27 >> 2] = $12; //@line 29007
   $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 29008
   HEAP32[$28 >> 2] = $14; //@line 29009
   sp = STACKTOP; //@line 29010
   return;
  }
  ___async_unwind = 0; //@line 29013
  HEAP32[$ReallocAsyncCtx3 >> 2] = 297; //@line 29014
  $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 29015
  HEAP32[$21 >> 2] = $2; //@line 29016
  $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 29017
  HEAP32[$22 >> 2] = $19; //@line 29018
  $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 29019
  HEAP32[$23 >> 2] = $6; //@line 29020
  $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 29021
  HEAP32[$24 >> 2] = $4; //@line 29022
  $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 29023
  HEAP32[$25 >> 2] = $8; //@line 29024
  $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 29025
  HEAP32[$26 >> 2] = $10; //@line 29026
  $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 29027
  HEAP32[$27 >> 2] = $12; //@line 29028
  $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 29029
  HEAP32[$28 >> 2] = $14; //@line 29030
  sp = STACKTOP; //@line 29031
  return;
 }
 $29 = HEAP32[$6 >> 2] | 0; //@line 29035
 $31 = HEAP32[$4 + 976 >> 2] | 0; //@line 29037
 $34 = (__ZN7LoRaPHY15get_ack_timeoutEv(HEAP32[$4 >> 2] | 0) | 0) + $31 | 0; //@line 29040
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 29041
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($29, $4 + 1076 | 0, $34); //@line 29042
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 298; //@line 29045
  $35 = $ReallocAsyncCtx2 + 4 | 0; //@line 29046
  HEAP32[$35 >> 2] = $4; //@line 29047
  $36 = $ReallocAsyncCtx2 + 8 | 0; //@line 29048
  HEAP32[$36 >> 2] = $8; //@line 29049
  $37 = $ReallocAsyncCtx2 + 12 | 0; //@line 29050
  HEAP32[$37 >> 2] = $10; //@line 29051
  $38 = $ReallocAsyncCtx2 + 16 | 0; //@line 29052
  HEAP32[$38 >> 2] = $12; //@line 29053
  $39 = $ReallocAsyncCtx2 + 20 | 0; //@line 29054
  HEAP32[$39 >> 2] = $14; //@line 29055
  sp = STACKTOP; //@line 29056
  return;
 }
 ___async_unwind = 0; //@line 29059
 HEAP32[$ReallocAsyncCtx2 >> 2] = 298; //@line 29060
 $35 = $ReallocAsyncCtx2 + 4 | 0; //@line 29061
 HEAP32[$35 >> 2] = $4; //@line 29062
 $36 = $ReallocAsyncCtx2 + 8 | 0; //@line 29063
 HEAP32[$36 >> 2] = $8; //@line 29064
 $37 = $ReallocAsyncCtx2 + 12 | 0; //@line 29065
 HEAP32[$37 >> 2] = $10; //@line 29066
 $38 = $ReallocAsyncCtx2 + 16 | 0; //@line 29067
 HEAP32[$38 >> 2] = $12; //@line 29068
 $39 = $ReallocAsyncCtx2 + 20 | 0; //@line 29069
 HEAP32[$39 >> 2] = $14; //@line 29070
 sp = STACKTOP; //@line 29071
 return;
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_263($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $16 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 9300
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9302
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9304
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9306
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9308
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 9310
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 9312
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 9316
 $17 = HEAP32[HEAP32[$0 + 28 >> 2] >> 2] | 0; //@line 9317
 if (!$17) {
  $27 = HEAP32[$2 >> 2] | 0; //@line 9320
  $29 = $12 + 12 | 0; //@line 9322
  HEAP32[$12 >> 2] = 446; //@line 9323
  HEAP32[$12 + 4 >> 2] = 0; //@line 9325
  HEAP32[$12 + 8 >> 2] = $4; //@line 9327
  HEAP32[$29 >> 2] = 912; //@line 9328
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(32) | 0; //@line 9329
  __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($27, $4 + 1016 | 0, $12); //@line 9330
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 447; //@line 9333
   $30 = $ReallocAsyncCtx9 + 4 | 0; //@line 9334
   HEAP32[$30 >> 2] = $2; //@line 9335
   $31 = $ReallocAsyncCtx9 + 8 | 0; //@line 9336
   HEAP32[$31 >> 2] = $4; //@line 9337
   $32 = $ReallocAsyncCtx9 + 12 | 0; //@line 9338
   HEAP32[$32 >> 2] = $6; //@line 9339
   $33 = $ReallocAsyncCtx9 + 16 | 0; //@line 9340
   HEAP32[$33 >> 2] = $29; //@line 9341
   $34 = $ReallocAsyncCtx9 + 20 | 0; //@line 9342
   HEAP32[$34 >> 2] = $8; //@line 9343
   $35 = $ReallocAsyncCtx9 + 24 | 0; //@line 9344
   HEAP32[$35 >> 2] = $10; //@line 9345
   $36 = $ReallocAsyncCtx9 + 28 | 0; //@line 9346
   HEAP32[$36 >> 2] = $12; //@line 9347
   sp = STACKTOP; //@line 9348
   return;
  }
  ___async_unwind = 0; //@line 9351
  HEAP32[$ReallocAsyncCtx9 >> 2] = 447; //@line 9352
  $30 = $ReallocAsyncCtx9 + 4 | 0; //@line 9353
  HEAP32[$30 >> 2] = $2; //@line 9354
  $31 = $ReallocAsyncCtx9 + 8 | 0; //@line 9355
  HEAP32[$31 >> 2] = $4; //@line 9356
  $32 = $ReallocAsyncCtx9 + 12 | 0; //@line 9357
  HEAP32[$32 >> 2] = $6; //@line 9358
  $33 = $ReallocAsyncCtx9 + 16 | 0; //@line 9359
  HEAP32[$33 >> 2] = $29; //@line 9360
  $34 = $ReallocAsyncCtx9 + 20 | 0; //@line 9361
  HEAP32[$34 >> 2] = $8; //@line 9362
  $35 = $ReallocAsyncCtx9 + 24 | 0; //@line 9363
  HEAP32[$35 >> 2] = $10; //@line 9364
  $36 = $ReallocAsyncCtx9 + 28 | 0; //@line 9365
  HEAP32[$36 >> 2] = $12; //@line 9366
  sp = STACKTOP; //@line 9367
  return;
 } else {
  $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 9371
  $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 9372
  FUNCTION_TABLE_vi[$20 & 1023]($16); //@line 9373
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 445; //@line 9376
   $21 = $ReallocAsyncCtx + 4 | 0; //@line 9377
   HEAP32[$21 >> 2] = $6; //@line 9378
   $22 = $ReallocAsyncCtx + 8 | 0; //@line 9379
   HEAP32[$22 >> 2] = $2; //@line 9380
   $23 = $ReallocAsyncCtx + 12 | 0; //@line 9381
   HEAP32[$23 >> 2] = $4; //@line 9382
   $24 = $ReallocAsyncCtx + 16 | 0; //@line 9383
   HEAP32[$24 >> 2] = $8; //@line 9384
   $25 = $ReallocAsyncCtx + 20 | 0; //@line 9385
   HEAP32[$25 >> 2] = $10; //@line 9386
   $26 = $ReallocAsyncCtx + 24 | 0; //@line 9387
   HEAP32[$26 >> 2] = $12; //@line 9388
   sp = STACKTOP; //@line 9389
   return;
  }
  ___async_unwind = 0; //@line 9392
  HEAP32[$ReallocAsyncCtx >> 2] = 445; //@line 9393
  $21 = $ReallocAsyncCtx + 4 | 0; //@line 9394
  HEAP32[$21 >> 2] = $6; //@line 9395
  $22 = $ReallocAsyncCtx + 8 | 0; //@line 9396
  HEAP32[$22 >> 2] = $2; //@line 9397
  $23 = $ReallocAsyncCtx + 12 | 0; //@line 9398
  HEAP32[$23 >> 2] = $4; //@line 9399
  $24 = $ReallocAsyncCtx + 16 | 0; //@line 9400
  HEAP32[$24 >> 2] = $8; //@line 9401
  $25 = $ReallocAsyncCtx + 20 | 0; //@line 9402
  HEAP32[$25 >> 2] = $10; //@line 9403
  $26 = $ReallocAsyncCtx + 24 | 0; //@line 9404
  HEAP32[$26 >> 2] = $12; //@line 9405
  sp = STACKTOP; //@line 9406
  return;
 }
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_163($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $32 = 0, $33 = 0, $36 = 0, $4 = 0, $44 = 0, $50 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 29080
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29082
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29084
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29086
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29088
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29090
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29092
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29094
 if (HEAP8[$4 + 371 >> 0] | 0) {
  $18 = HEAP32[$14 >> 2] | 0; //@line 29099
  $21 = HEAP32[$4 + 972 >> 2] | 0; //@line 29102
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(32) | 0; //@line 29103
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($18, $4 + 1036 | 0, $21); //@line 29104
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 296; //@line 29107
   $22 = $ReallocAsyncCtx4 + 4 | 0; //@line 29108
   HEAP32[$22 >> 2] = $12; //@line 29109
   $23 = $ReallocAsyncCtx4 + 8 | 0; //@line 29110
   HEAP32[$23 >> 2] = $4; //@line 29111
   $24 = $ReallocAsyncCtx4 + 12 | 0; //@line 29112
   HEAP32[$24 >> 2] = $14; //@line 29113
   $25 = $ReallocAsyncCtx4 + 16 | 0; //@line 29114
   HEAP32[$25 >> 2] = $6; //@line 29115
   $26 = $ReallocAsyncCtx4 + 20 | 0; //@line 29116
   HEAP32[$26 >> 2] = $2; //@line 29117
   $27 = $ReallocAsyncCtx4 + 24 | 0; //@line 29118
   HEAP32[$27 >> 2] = $8; //@line 29119
   $28 = $ReallocAsyncCtx4 + 28 | 0; //@line 29120
   HEAP32[$28 >> 2] = $10; //@line 29121
   sp = STACKTOP; //@line 29122
   return;
  }
  ___async_unwind = 0; //@line 29125
  HEAP32[$ReallocAsyncCtx4 >> 2] = 296; //@line 29126
  $22 = $ReallocAsyncCtx4 + 4 | 0; //@line 29127
  HEAP32[$22 >> 2] = $12; //@line 29128
  $23 = $ReallocAsyncCtx4 + 8 | 0; //@line 29129
  HEAP32[$23 >> 2] = $4; //@line 29130
  $24 = $ReallocAsyncCtx4 + 12 | 0; //@line 29131
  HEAP32[$24 >> 2] = $14; //@line 29132
  $25 = $ReallocAsyncCtx4 + 16 | 0; //@line 29133
  HEAP32[$25 >> 2] = $6; //@line 29134
  $26 = $ReallocAsyncCtx4 + 20 | 0; //@line 29135
  HEAP32[$26 >> 2] = $2; //@line 29136
  $27 = $ReallocAsyncCtx4 + 24 | 0; //@line 29137
  HEAP32[$27 >> 2] = $8; //@line 29138
  $28 = $ReallocAsyncCtx4 + 28 | 0; //@line 29139
  HEAP32[$28 >> 2] = $10; //@line 29140
  sp = STACKTOP; //@line 29141
  return;
 }
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0) + 4 >> 2] = 0; //@line 29147
 $32 = $4 + 944 | 0; //@line 29148
 $33 = HEAP8[$32 >> 0] | 0; //@line 29149
 if (!($33 << 24 >> 24)) {
  HEAP8[$32 >> 0] = 1; //@line 29152
  $36 = 1; //@line 29153
 } else {
  $36 = $33; //@line 29155
 }
 HEAP8[$32 >> 0] = $36 | 32; //@line 29158
 HEAP8[$4 + 376 >> 0] = ($6 | 0) == 0 & (HEAP8[$4 + 944 >> 0] & 8) != 0 & 1; //@line 29167
 $44 = HEAP8[$4 + 378 >> 0] | 0; //@line 29169
 HEAP8[$4 + 379 >> 0] = $44; //@line 29171
 HEAP8[$2 >> 0] = $44; //@line 29172
 HEAP8[$8 + 1 >> 0] = HEAP8[$4 + 372 >> 0] | 0; //@line 29176
 HEAP32[$8 + 4 >> 2] = $10; //@line 29178
 $50 = HEAP32[$4 >> 2] | 0; //@line 29179
 $53 = HEAP32[(HEAP32[$50 >> 2] | 0) + 12 >> 2] | 0; //@line 29182
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 29183
 FUNCTION_TABLE_vii[$53 & 31]($50, $8); //@line 29184
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 299; //@line 29187
  $54 = $ReallocAsyncCtx + 4 | 0; //@line 29188
  HEAP32[$54 >> 2] = $4; //@line 29189
  $55 = $ReallocAsyncCtx + 8 | 0; //@line 29190
  HEAP32[$55 >> 2] = $10; //@line 29191
  $56 = $ReallocAsyncCtx + 12 | 0; //@line 29192
  HEAP32[$56 >> 2] = $2; //@line 29193
  sp = STACKTOP; //@line 29194
  return;
 }
 ___async_unwind = 0; //@line 29197
 HEAP32[$ReallocAsyncCtx >> 2] = 299; //@line 29198
 $54 = $ReallocAsyncCtx + 4 | 0; //@line 29199
 HEAP32[$54 >> 2] = $4; //@line 29200
 $55 = $ReallocAsyncCtx + 8 | 0; //@line 29201
 HEAP32[$55 >> 2] = $10; //@line 29202
 $56 = $ReallocAsyncCtx + 12 | 0; //@line 29203
 HEAP32[$56 >> 2] = $2; //@line 29204
 sp = STACKTOP; //@line 29205
 return;
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_319($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 14658
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14662
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14664
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14666
 $9 = $4 + 12 | 0; //@line 14667
 HEAP32[$4 >> 2] = 495; //@line 14668
 HEAP32[$4 + 4 >> 2] = 0; //@line 14670
 HEAP32[$4 + 8 >> 2] = $6; //@line 14672
 HEAP32[$9 >> 2] = 912; //@line 14673
 $10 = $6 + 1260 | 0; //@line 14674
 if (($10 | 0) == ($4 | 0)) {
  $29 = HEAP32[230] | 0; //@line 14678
  $ReallocAsyncCtx15 = _emscripten_realloc_async_context(12) | 0; //@line 14679
  FUNCTION_TABLE_vi[$29 & 1023]($4); //@line 14680
  if (___async) {
   HEAP32[$ReallocAsyncCtx15 >> 2] = 498; //@line 14683
   $30 = $ReallocAsyncCtx15 + 4 | 0; //@line 14684
   HEAP32[$30 >> 2] = $4; //@line 14685
   $31 = $ReallocAsyncCtx15 + 8 | 0; //@line 14686
   HEAP32[$31 >> 2] = $8; //@line 14687
   sp = STACKTOP; //@line 14688
   return;
  }
  ___async_unwind = 0; //@line 14691
  HEAP32[$ReallocAsyncCtx15 >> 2] = 498; //@line 14692
  $30 = $ReallocAsyncCtx15 + 4 | 0; //@line 14693
  HEAP32[$30 >> 2] = $4; //@line 14694
  $31 = $ReallocAsyncCtx15 + 8 | 0; //@line 14695
  HEAP32[$31 >> 2] = $8; //@line 14696
  sp = STACKTOP; //@line 14697
  return;
 }
 $12 = $6 + 1272 | 0; //@line 14700
 $13 = HEAP32[$12 >> 2] | 0; //@line 14701
 if (!$13) {
  $23 = HEAP32[229] | 0; //@line 14705
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(20) | 0; //@line 14706
  FUNCTION_TABLE_vii[$23 & 31]($10, $4); //@line 14707
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 497; //@line 14710
   $24 = $ReallocAsyncCtx14 + 4 | 0; //@line 14711
   HEAP32[$24 >> 2] = $9; //@line 14712
   $25 = $ReallocAsyncCtx14 + 8 | 0; //@line 14713
   HEAP32[$25 >> 2] = $12; //@line 14714
   $26 = $ReallocAsyncCtx14 + 12 | 0; //@line 14715
   HEAP32[$26 >> 2] = $4; //@line 14716
   $27 = $ReallocAsyncCtx14 + 16 | 0; //@line 14717
   HEAP32[$27 >> 2] = $8; //@line 14718
   sp = STACKTOP; //@line 14719
   return;
  }
  ___async_unwind = 0; //@line 14722
  HEAP32[$ReallocAsyncCtx14 >> 2] = 497; //@line 14723
  $24 = $ReallocAsyncCtx14 + 4 | 0; //@line 14724
  HEAP32[$24 >> 2] = $9; //@line 14725
  $25 = $ReallocAsyncCtx14 + 8 | 0; //@line 14726
  HEAP32[$25 >> 2] = $12; //@line 14727
  $26 = $ReallocAsyncCtx14 + 12 | 0; //@line 14728
  HEAP32[$26 >> 2] = $4; //@line 14729
  $27 = $ReallocAsyncCtx14 + 16 | 0; //@line 14730
  HEAP32[$27 >> 2] = $8; //@line 14731
  sp = STACKTOP; //@line 14732
  return;
 } else {
  $16 = HEAP32[$13 + 8 >> 2] | 0; //@line 14736
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(24) | 0; //@line 14737
  FUNCTION_TABLE_vi[$16 & 1023]($10); //@line 14738
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 496; //@line 14741
   $17 = $ReallocAsyncCtx13 + 4 | 0; //@line 14742
   HEAP32[$17 >> 2] = $9; //@line 14743
   $18 = $ReallocAsyncCtx13 + 8 | 0; //@line 14744
   HEAP32[$18 >> 2] = $12; //@line 14745
   $19 = $ReallocAsyncCtx13 + 12 | 0; //@line 14746
   HEAP32[$19 >> 2] = $10; //@line 14747
   $20 = $ReallocAsyncCtx13 + 16 | 0; //@line 14748
   HEAP32[$20 >> 2] = $4; //@line 14749
   $21 = $ReallocAsyncCtx13 + 20 | 0; //@line 14750
   HEAP32[$21 >> 2] = $8; //@line 14751
   sp = STACKTOP; //@line 14752
   return;
  }
  ___async_unwind = 0; //@line 14755
  HEAP32[$ReallocAsyncCtx13 >> 2] = 496; //@line 14756
  $17 = $ReallocAsyncCtx13 + 4 | 0; //@line 14757
  HEAP32[$17 >> 2] = $9; //@line 14758
  $18 = $ReallocAsyncCtx13 + 8 | 0; //@line 14759
  HEAP32[$18 >> 2] = $12; //@line 14760
  $19 = $ReallocAsyncCtx13 + 12 | 0; //@line 14761
  HEAP32[$19 >> 2] = $10; //@line 14762
  $20 = $ReallocAsyncCtx13 + 16 | 0; //@line 14763
  HEAP32[$20 >> 2] = $4; //@line 14764
  $21 = $ReallocAsyncCtx13 + 20 | 0; //@line 14765
  HEAP32[$21 >> 2] = $8; //@line 14766
  sp = STACKTOP; //@line 14767
  return;
 }
}
function _initialize__async_cb_75($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $31 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $48 = 0, $49 = 0, $50 = 0, $52 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $62 = 0, $64 = 0, $70 = 0, $71 = 0, $72 = 0, $81 = 0, $82 = 0, $83 = 0, $85 = 0, $89 = 0, $95 = 0, $96 = 0, $97 = 0, $99 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 22400
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22404
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22406
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22410
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22412
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22414
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 22416
 if (($AsyncRetVal | 0) != (HEAP32[(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) + 32 >> 2] | 0)) {
  $23 = $AsyncRetVal - (HEAP32[$6 >> 2] | 0) & HEAP32[HEAP32[$0 + 16 >> 2] >> 2]; //@line 22425
  HEAP32[$6 >> 2] = $AsyncRetVal; //@line 22426
  $24 = HEAP32[$10 >> 2] | 0; //@line 22427
  L4 : do {
   if (($24 | 0) < 1e6) {
    switch ($24 | 0) {
    case 32768:
     {
      break;
     }
    default:
     {
      label = 6; //@line 22436
      break L4;
     }
    }
    $25 = ___muldi3($23 | 0, 0, 1e6, 0) | 0; //@line 22440
    $27 = _bitshift64Lshr($25 | 0, tempRet0 | 0, 15) | 0; //@line 22442
    $28 = tempRet0; //@line 22443
    $31 = $12; //@line 22446
    $37 = _i64Add(HEAP32[$31 >> 2] | 0, HEAP32[$31 + 4 >> 2] | 0, $23 * 1e6 & 32704 | 0, 0) | 0; //@line 22452
    $38 = tempRet0; //@line 22453
    $39 = $12; //@line 22454
    HEAP32[$39 >> 2] = $37; //@line 22456
    HEAP32[$39 + 4 >> 2] = $38; //@line 22459
    if ($38 >>> 0 < 0 | ($38 | 0) == 0 & $37 >>> 0 < 32768) {
     $95 = $27; //@line 22466
     $96 = $28; //@line 22466
    } else {
     $48 = _i64Add($27 | 0, $28 | 0, 1, 0) | 0; //@line 22468
     $49 = tempRet0; //@line 22469
     $50 = _i64Add($37 | 0, $38 | 0, -32768, -1) | 0; //@line 22470
     $52 = $12; //@line 22472
     HEAP32[$52 >> 2] = $50; //@line 22474
     HEAP32[$52 + 4 >> 2] = tempRet0; //@line 22477
     $95 = $48; //@line 22478
     $96 = $49; //@line 22478
    }
   } else {
    switch ($24 | 0) {
    case 1e6:
     {
      $95 = $23; //@line 22483
      $96 = 0; //@line 22483
      break;
     }
    default:
     {
      label = 6; //@line 22487
     }
    }
   }
  } while (0);
  if ((label | 0) == 6) {
   $56 = ___muldi3($23 | 0, 0, 1e6, 0) | 0; //@line 22493
   $57 = tempRet0; //@line 22494
   $58 = ___udivdi3($56 | 0, $57 | 0, $24 | 0, 0) | 0; //@line 22495
   $59 = tempRet0; //@line 22496
   $60 = ___muldi3($58 | 0, $59 | 0, $24 | 0, 0) | 0; //@line 22497
   $62 = _i64Subtract($56 | 0, $57 | 0, $60 | 0, tempRet0 | 0) | 0; //@line 22499
   $64 = $12; //@line 22501
   $70 = _i64Add($62 | 0, tempRet0 | 0, HEAP32[$64 >> 2] | 0, HEAP32[$64 + 4 >> 2] | 0) | 0; //@line 22507
   $71 = tempRet0; //@line 22508
   $72 = $12; //@line 22509
   HEAP32[$72 >> 2] = $70; //@line 22511
   HEAP32[$72 + 4 >> 2] = $71; //@line 22514
   if ($71 >>> 0 < 0 | ($71 | 0) == 0 & $70 >>> 0 < $24 >>> 0) {
    $95 = $58; //@line 22521
    $96 = $59; //@line 22521
   } else {
    $81 = _i64Add($58 | 0, $59 | 0, 1, 0) | 0; //@line 22523
    $82 = tempRet0; //@line 22524
    $83 = _i64Subtract($70 | 0, $71 | 0, $24 | 0, 0) | 0; //@line 22525
    $85 = $12; //@line 22527
    HEAP32[$85 >> 2] = $83; //@line 22529
    HEAP32[$85 + 4 >> 2] = tempRet0; //@line 22532
    $95 = $81; //@line 22533
    $96 = $82; //@line 22533
   }
  }
  $89 = $14; //@line 22536
  $97 = _i64Add(HEAP32[$89 >> 2] | 0, HEAP32[$89 + 4 >> 2] | 0, $95 | 0, $96 | 0) | 0; //@line 22542
  $99 = $14; //@line 22544
  HEAP32[$99 >> 2] = $97; //@line 22546
  HEAP32[$99 + 4 >> 2] = tempRet0; //@line 22549
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 22551
 _schedule_interrupt($4); //@line 22552
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 617; //@line 22555
  sp = STACKTOP; //@line 22556
  return;
 }
 ___async_unwind = 0; //@line 22559
 HEAP32[$ReallocAsyncCtx5 >> 2] = 617; //@line 22560
 sp = STACKTOP; //@line 22561
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb($0) {
 $0 = $0 | 0;
 var $$pre$i = 0, $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 26211
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26213
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26215
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26219
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26221
 $$pre$i = HEAP32[HEAP32[$0 + 12 >> 2] >> 2] | 0; //@line 26222
 $11 = $4 + 12 | 0; //@line 26223
 HEAP32[$11 >> 2] = $$pre$i; //@line 26224
 if (!$$pre$i) {
  $21 = $2 + 12 | 0; //@line 26227
  HEAP32[$21 >> 2] = 0; //@line 26228
  $22 = $2 + 16 | 0; //@line 26229
  HEAP32[$22 >> 2] = $8; //@line 26230
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 26231
  $23 = _equeue_alloc($10, 20) | 0; //@line 26232
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 227; //@line 26235
   $24 = $ReallocAsyncCtx7 + 4 | 0; //@line 26236
   HEAP32[$24 >> 2] = $21; //@line 26237
   $25 = $ReallocAsyncCtx7 + 8 | 0; //@line 26238
   HEAP32[$25 >> 2] = $2; //@line 26239
   $26 = $ReallocAsyncCtx7 + 12 | 0; //@line 26240
   HEAP32[$26 >> 2] = $11; //@line 26241
   $27 = $ReallocAsyncCtx7 + 16 | 0; //@line 26242
   HEAP32[$27 >> 2] = $22; //@line 26243
   $28 = $ReallocAsyncCtx7 + 20 | 0; //@line 26244
   HEAP32[$28 >> 2] = $10; //@line 26245
   $29 = $ReallocAsyncCtx7 + 24 | 0; //@line 26246
   HEAP32[$29 >> 2] = $4; //@line 26247
   $30 = $ReallocAsyncCtx7 + 28 | 0; //@line 26248
   HEAP32[$30 >> 2] = $21; //@line 26249
   sp = STACKTOP; //@line 26250
   return;
  }
  HEAP32[___async_retval >> 2] = $23; //@line 26254
  ___async_unwind = 0; //@line 26255
  HEAP32[$ReallocAsyncCtx7 >> 2] = 227; //@line 26256
  $24 = $ReallocAsyncCtx7 + 4 | 0; //@line 26257
  HEAP32[$24 >> 2] = $21; //@line 26258
  $25 = $ReallocAsyncCtx7 + 8 | 0; //@line 26259
  HEAP32[$25 >> 2] = $2; //@line 26260
  $26 = $ReallocAsyncCtx7 + 12 | 0; //@line 26261
  HEAP32[$26 >> 2] = $11; //@line 26262
  $27 = $ReallocAsyncCtx7 + 16 | 0; //@line 26263
  HEAP32[$27 >> 2] = $22; //@line 26264
  $28 = $ReallocAsyncCtx7 + 20 | 0; //@line 26265
  HEAP32[$28 >> 2] = $10; //@line 26266
  $29 = $ReallocAsyncCtx7 + 24 | 0; //@line 26267
  HEAP32[$29 >> 2] = $4; //@line 26268
  $30 = $ReallocAsyncCtx7 + 28 | 0; //@line 26269
  HEAP32[$30 >> 2] = $21; //@line 26270
  sp = STACKTOP; //@line 26271
  return;
 } else {
  $14 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 26276
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 26277
  FUNCTION_TABLE_vii[$14 & 31]($2, $4); //@line 26278
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 226; //@line 26281
   $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 26282
   HEAP32[$15 >> 2] = $2; //@line 26283
   $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 26284
   HEAP32[$16 >> 2] = $11; //@line 26285
   $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 26286
   HEAP32[$17 >> 2] = $11; //@line 26287
   $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 26288
   HEAP32[$18 >> 2] = $8; //@line 26289
   $19 = $ReallocAsyncCtx2 + 20 | 0; //@line 26290
   HEAP32[$19 >> 2] = $10; //@line 26291
   $20 = $ReallocAsyncCtx2 + 24 | 0; //@line 26292
   HEAP32[$20 >> 2] = $4; //@line 26293
   sp = STACKTOP; //@line 26294
   return;
  }
  ___async_unwind = 0; //@line 26297
  HEAP32[$ReallocAsyncCtx2 >> 2] = 226; //@line 26298
  $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 26299
  HEAP32[$15 >> 2] = $2; //@line 26300
  $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 26301
  HEAP32[$16 >> 2] = $11; //@line 26302
  $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 26303
  HEAP32[$17 >> 2] = $11; //@line 26304
  $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 26305
  HEAP32[$18 >> 2] = $8; //@line 26306
  $19 = $ReallocAsyncCtx2 + 20 | 0; //@line 26307
  HEAP32[$19 >> 2] = $10; //@line 26308
  $20 = $ReallocAsyncCtx2 + 24 | 0; //@line 26309
  HEAP32[$20 >> 2] = $4; //@line 26310
  sp = STACKTOP; //@line 26311
  return;
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_157($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $18 = 0, $2 = 0, $21 = 0, $24 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 28387
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28389
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28391
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28393
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28395
 $10 = HEAP8[$0 + 20 >> 0] & 1; //@line 28398
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28400
 $15 = $12 + 24 | 0; //@line 28403
 do {
  if ((HEAP32[$0 + 28 >> 2] | 0) > 1) {
   $18 = HEAP32[$12 + 8 >> 2] | 0; //@line 28408
   if (!($18 & 2)) {
    $21 = $4 + 36 | 0; //@line 28412
    if ((HEAP32[$21 >> 2] | 0) != 1) {
     if (!($18 & 1)) {
      $38 = $4 + 54 | 0; //@line 28419
      if (HEAP8[$38 >> 0] | 0) {
       break;
      }
      if ((HEAP32[$21 >> 2] | 0) == 1) {
       break;
      }
      $ReallocAsyncCtx = _emscripten_realloc_async_context(36) | 0; //@line 28430
      __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $4, $6, $8, $10); //@line 28431
      if (!___async) {
       ___async_unwind = 0; //@line 28434
      }
      HEAP32[$ReallocAsyncCtx >> 2] = 723; //@line 28436
      HEAP32[$ReallocAsyncCtx + 4 >> 2] = $15; //@line 28438
      HEAP32[$ReallocAsyncCtx + 8 >> 2] = $2; //@line 28440
      HEAP32[$ReallocAsyncCtx + 12 >> 2] = $38; //@line 28442
      HEAP32[$ReallocAsyncCtx + 16 >> 2] = $21; //@line 28444
      HEAP32[$ReallocAsyncCtx + 20 >> 2] = $4; //@line 28446
      HEAP32[$ReallocAsyncCtx + 24 >> 2] = $6; //@line 28448
      HEAP32[$ReallocAsyncCtx + 28 >> 2] = $8; //@line 28450
      HEAP8[$ReallocAsyncCtx + 32 >> 0] = $10 & 1; //@line 28453
      sp = STACKTOP; //@line 28454
      return;
     }
     $36 = $4 + 24 | 0; //@line 28457
     $37 = $4 + 54 | 0; //@line 28458
     if (HEAP8[$37 >> 0] | 0) {
      break;
     }
     if ((HEAP32[$21 >> 2] | 0) == 1) {
      if ((HEAP32[$36 >> 2] | 0) == 1) {
       break;
      }
     }
     $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 28473
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $4, $6, $8, $10); //@line 28474
     if (!___async) {
      ___async_unwind = 0; //@line 28477
     }
     HEAP32[$ReallocAsyncCtx2 >> 2] = 722; //@line 28479
     HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $15; //@line 28481
     HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $2; //@line 28483
     HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $37; //@line 28485
     HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $21; //@line 28487
     HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $36; //@line 28489
     HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $4; //@line 28491
     HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $6; //@line 28493
     HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $8; //@line 28495
     HEAP8[$ReallocAsyncCtx2 + 36 >> 0] = $10 & 1; //@line 28498
     sp = STACKTOP; //@line 28499
     return;
    }
   }
   $24 = $4 + 54 | 0; //@line 28503
   if (!(HEAP8[$24 >> 0] | 0)) {
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 28507
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $4, $6, $8, $10); //@line 28508
    if (!___async) {
     ___async_unwind = 0; //@line 28511
    }
    HEAP32[$ReallocAsyncCtx3 >> 2] = 721; //@line 28513
    HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $15; //@line 28515
    HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $2; //@line 28517
    HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $24; //@line 28519
    HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $4; //@line 28521
    HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $6; //@line 28523
    HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $8; //@line 28525
    HEAP8[$ReallocAsyncCtx3 + 28 >> 0] = $10 & 1; //@line 28528
    sp = STACKTOP; //@line 28529
    return;
   }
  }
 } while (0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $31 = 0, $32 = 0, $33 = 0, $62 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 16950
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 16955
 } else {
  $9 = $1 + 52 | 0; //@line 16957
  $10 = HEAP8[$9 >> 0] | 0; //@line 16958
  $11 = $1 + 53 | 0; //@line 16959
  $12 = HEAP8[$11 >> 0] | 0; //@line 16960
  $15 = HEAP32[$0 + 12 >> 2] | 0; //@line 16963
  $16 = $0 + 16 + ($15 << 3) | 0; //@line 16964
  HEAP8[$9 >> 0] = 0; //@line 16965
  HEAP8[$11 >> 0] = 0; //@line 16966
  $AsyncCtx3 = _emscripten_alloc_async_context(52, sp) | 0; //@line 16967
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0 + 16 | 0, $1, $2, $3, $4, $5); //@line 16968
  if (___async) {
   HEAP32[$AsyncCtx3 >> 2] = 717; //@line 16971
   HEAP32[$AsyncCtx3 + 4 >> 2] = $15; //@line 16973
   HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 16975
   HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 16977
   HEAP8[$AsyncCtx3 + 16 >> 0] = $10; //@line 16979
   HEAP32[$AsyncCtx3 + 20 >> 2] = $9; //@line 16981
   HEAP8[$AsyncCtx3 + 24 >> 0] = $12; //@line 16983
   HEAP32[$AsyncCtx3 + 28 >> 2] = $11; //@line 16985
   HEAP32[$AsyncCtx3 + 32 >> 2] = $2; //@line 16987
   HEAP32[$AsyncCtx3 + 36 >> 2] = $3; //@line 16989
   HEAP32[$AsyncCtx3 + 40 >> 2] = $4; //@line 16991
   HEAP8[$AsyncCtx3 + 44 >> 0] = $5 & 1; //@line 16994
   HEAP32[$AsyncCtx3 + 48 >> 2] = $16; //@line 16996
   sp = STACKTOP; //@line 16997
   return;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 17000
  L7 : do {
   if (($15 | 0) > 1) {
    $31 = $1 + 24 | 0; //@line 17005
    $32 = $0 + 8 | 0; //@line 17006
    $33 = $1 + 54 | 0; //@line 17007
    $$0 = $0 + 24 | 0; //@line 17008
    while (1) {
     if (HEAP8[$33 >> 0] | 0) {
      break L7;
     }
     if (!(HEAP8[$9 >> 0] | 0)) {
      if (HEAP8[$11 >> 0] | 0) {
       if (!(HEAP32[$32 >> 2] & 1)) {
        break L7;
       }
      }
     } else {
      if ((HEAP32[$31 >> 2] | 0) == 1) {
       break L7;
      }
      if (!(HEAP32[$32 >> 2] & 2)) {
       break L7;
      }
     }
     HEAP8[$9 >> 0] = 0; //@line 17041
     HEAP8[$11 >> 0] = 0; //@line 17042
     $AsyncCtx = _emscripten_alloc_async_context(60, sp) | 0; //@line 17043
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$0, $1, $2, $3, $4, $5); //@line 17044
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 17049
     $62 = $$0 + 8 | 0; //@line 17050
     if ($62 >>> 0 < $16 >>> 0) {
      $$0 = $62; //@line 17053
     } else {
      break L7;
     }
    }
    HEAP32[$AsyncCtx >> 2] = 718; //@line 17058
    HEAP32[$AsyncCtx + 4 >> 2] = $$0; //@line 17060
    HEAP32[$AsyncCtx + 8 >> 2] = $16; //@line 17062
    HEAP32[$AsyncCtx + 12 >> 2] = $33; //@line 17064
    HEAP8[$AsyncCtx + 16 >> 0] = $10; //@line 17066
    HEAP32[$AsyncCtx + 20 >> 2] = $9; //@line 17068
    HEAP8[$AsyncCtx + 24 >> 0] = $12; //@line 17070
    HEAP32[$AsyncCtx + 28 >> 2] = $11; //@line 17072
    HEAP32[$AsyncCtx + 32 >> 2] = $31; //@line 17074
    HEAP32[$AsyncCtx + 36 >> 2] = $32; //@line 17076
    HEAP32[$AsyncCtx + 40 >> 2] = $1; //@line 17078
    HEAP32[$AsyncCtx + 44 >> 2] = $2; //@line 17080
    HEAP32[$AsyncCtx + 48 >> 2] = $3; //@line 17082
    HEAP32[$AsyncCtx + 52 >> 2] = $4; //@line 17084
    HEAP8[$AsyncCtx + 56 >> 0] = $5 & 1; //@line 17087
    sp = STACKTOP; //@line 17088
    return;
   }
  } while (0);
  HEAP8[$9 >> 0] = $10; //@line 17092
  HEAP8[$11 >> 0] = $12; //@line 17093
 }
 return;
}
function __ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan__async_cb($0) {
 $0 = $0 | 0;
 var $$1 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $24 = 0, $25 = 0, $26 = 0, $35 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $54 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 19925
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19929
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19931
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19933
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19935
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19937
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 19939
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 19941
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 19943
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 19945
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 19947
 $24 = (HEAP8[$0 + 4 >> 0] | 0) + 1 << 24 >> 24; //@line 19949
 if ($AsyncRetVal | 0) {
  $$1 = $AsyncRetVal; //@line 19951
  $54 = ___async_retval; //@line 19952
  HEAP32[$54 >> 2] = $$1; //@line 19953
  return;
 }
 $25 = $24 & 255; //@line 19958
 if (($24 & 255) >= (HEAPU8[$4 >> 0] | 0)) {
  $$1 = 0; //@line 19960
  $54 = ___async_retval; //@line 19961
  HEAP32[$54 >> 2] = $$1; //@line 19962
  return;
 }
 $26 = HEAP32[$8 >> 2] | 0; //@line 19965
 HEAP8[$10 >> 0] = HEAP8[$26 + ($25 << 4) + 13 >> 0] | 0; //@line 19968
 HEAP8[$12 >> 0] = HEAP8[$26 + ($25 << 4) + 12 >> 0] | 0; //@line 19971
 HEAP32[$14 >> 2] = HEAP32[$26 + ($25 << 4) + 4 >> 2]; //@line 19974
 HEAP32[$16 >> 2] = HEAP32[$26 + ($25 << 4) + 8 >> 2]; //@line 19977
 $35 = HEAP32[$18 >> 2] | 0; //@line 19978
 $38 = HEAP32[(HEAP32[$35 >> 2] | 0) + 60 >> 2] | 0; //@line 19981
 $40 = HEAP8[$26 + ($25 << 4) >> 0] | 0; //@line 19983
 $ReallocAsyncCtx = _emscripten_realloc_async_context(44) | 0; //@line 19984
 $41 = FUNCTION_TABLE_iiii[$38 & 15]($35, $20, $40) | 0; //@line 19985
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 499; //@line 19988
  $42 = $ReallocAsyncCtx + 4 | 0; //@line 19989
  HEAP8[$42 >> 0] = $24; //@line 19990
  $43 = $ReallocAsyncCtx + 8 | 0; //@line 19991
  HEAP32[$43 >> 2] = $4; //@line 19992
  $44 = $ReallocAsyncCtx + 12 | 0; //@line 19993
  HEAP32[$44 >> 2] = $6; //@line 19994
  $45 = $ReallocAsyncCtx + 16 | 0; //@line 19995
  HEAP32[$45 >> 2] = $8; //@line 19996
  $46 = $ReallocAsyncCtx + 20 | 0; //@line 19997
  HEAP32[$46 >> 2] = $10; //@line 19998
  $47 = $ReallocAsyncCtx + 24 | 0; //@line 19999
  HEAP32[$47 >> 2] = $12; //@line 20000
  $48 = $ReallocAsyncCtx + 28 | 0; //@line 20001
  HEAP32[$48 >> 2] = $14; //@line 20002
  $49 = $ReallocAsyncCtx + 32 | 0; //@line 20003
  HEAP32[$49 >> 2] = $16; //@line 20004
  $50 = $ReallocAsyncCtx + 36 | 0; //@line 20005
  HEAP32[$50 >> 2] = $18; //@line 20006
  $51 = $ReallocAsyncCtx + 40 | 0; //@line 20007
  HEAP32[$51 >> 2] = $20; //@line 20008
  sp = STACKTOP; //@line 20009
  return;
 }
 HEAP32[___async_retval >> 2] = $41; //@line 20013
 ___async_unwind = 0; //@line 20014
 HEAP32[$ReallocAsyncCtx >> 2] = 499; //@line 20015
 $42 = $ReallocAsyncCtx + 4 | 0; //@line 20016
 HEAP8[$42 >> 0] = $24; //@line 20017
 $43 = $ReallocAsyncCtx + 8 | 0; //@line 20018
 HEAP32[$43 >> 2] = $4; //@line 20019
 $44 = $ReallocAsyncCtx + 12 | 0; //@line 20020
 HEAP32[$44 >> 2] = $6; //@line 20021
 $45 = $ReallocAsyncCtx + 16 | 0; //@line 20022
 HEAP32[$45 >> 2] = $8; //@line 20023
 $46 = $ReallocAsyncCtx + 20 | 0; //@line 20024
 HEAP32[$46 >> 2] = $10; //@line 20025
 $47 = $ReallocAsyncCtx + 24 | 0; //@line 20026
 HEAP32[$47 >> 2] = $12; //@line 20027
 $48 = $ReallocAsyncCtx + 28 | 0; //@line 20028
 HEAP32[$48 >> 2] = $14; //@line 20029
 $49 = $ReallocAsyncCtx + 32 | 0; //@line 20030
 HEAP32[$49 >> 2] = $16; //@line 20031
 $50 = $ReallocAsyncCtx + 36 | 0; //@line 20032
 HEAP32[$50 >> 2] = $18; //@line 20033
 $51 = $ReallocAsyncCtx + 40 | 0; //@line 20034
 HEAP32[$51 >> 2] = $20; //@line 20035
 sp = STACKTOP; //@line 20036
 return;
}
function _pop_arg_673($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $108 = 0, $109 = 0.0, $115 = 0, $116 = 0.0, $16 = 0, $17 = 0, $20 = 0, $29 = 0, $30 = 0, $31 = 0, $40 = 0, $41 = 0, $43 = 0, $46 = 0, $47 = 0, $56 = 0, $57 = 0, $59 = 0, $62 = 0, $71 = 0, $72 = 0, $73 = 0, $82 = 0, $83 = 0, $85 = 0, $88 = 0, $9 = 0, $97 = 0, $98 = 0, $99 = 0;
 L1 : do {
  if ($1 >>> 0 <= 20) {
   do {
    switch ($1 | 0) {
    case 9:
     {
      $9 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 13288
      $10 = HEAP32[$9 >> 2] | 0; //@line 13289
      HEAP32[$2 >> 2] = $9 + 4; //@line 13291
      HEAP32[$0 >> 2] = $10; //@line 13292
      break L1;
      break;
     }
    case 10:
     {
      $16 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 13308
      $17 = HEAP32[$16 >> 2] | 0; //@line 13309
      HEAP32[$2 >> 2] = $16 + 4; //@line 13311
      $20 = $0; //@line 13314
      HEAP32[$20 >> 2] = $17; //@line 13316
      HEAP32[$20 + 4 >> 2] = (($17 | 0) < 0) << 31 >> 31; //@line 13319
      break L1;
      break;
     }
    case 11:
     {
      $29 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 13335
      $30 = HEAP32[$29 >> 2] | 0; //@line 13336
      HEAP32[$2 >> 2] = $29 + 4; //@line 13338
      $31 = $0; //@line 13339
      HEAP32[$31 >> 2] = $30; //@line 13341
      HEAP32[$31 + 4 >> 2] = 0; //@line 13344
      break L1;
      break;
     }
    case 12:
     {
      $40 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 13360
      $41 = $40; //@line 13361
      $43 = HEAP32[$41 >> 2] | 0; //@line 13363
      $46 = HEAP32[$41 + 4 >> 2] | 0; //@line 13366
      HEAP32[$2 >> 2] = $40 + 8; //@line 13368
      $47 = $0; //@line 13369
      HEAP32[$47 >> 2] = $43; //@line 13371
      HEAP32[$47 + 4 >> 2] = $46; //@line 13374
      break L1;
      break;
     }
    case 13:
     {
      $56 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 13390
      $57 = HEAP32[$56 >> 2] | 0; //@line 13391
      HEAP32[$2 >> 2] = $56 + 4; //@line 13393
      $59 = ($57 & 65535) << 16 >> 16; //@line 13395
      $62 = $0; //@line 13398
      HEAP32[$62 >> 2] = $59; //@line 13400
      HEAP32[$62 + 4 >> 2] = (($59 | 0) < 0) << 31 >> 31; //@line 13403
      break L1;
      break;
     }
    case 14:
     {
      $71 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 13419
      $72 = HEAP32[$71 >> 2] | 0; //@line 13420
      HEAP32[$2 >> 2] = $71 + 4; //@line 13422
      $73 = $0; //@line 13424
      HEAP32[$73 >> 2] = $72 & 65535; //@line 13426
      HEAP32[$73 + 4 >> 2] = 0; //@line 13429
      break L1;
      break;
     }
    case 15:
     {
      $82 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 13445
      $83 = HEAP32[$82 >> 2] | 0; //@line 13446
      HEAP32[$2 >> 2] = $82 + 4; //@line 13448
      $85 = ($83 & 255) << 24 >> 24; //@line 13450
      $88 = $0; //@line 13453
      HEAP32[$88 >> 2] = $85; //@line 13455
      HEAP32[$88 + 4 >> 2] = (($85 | 0) < 0) << 31 >> 31; //@line 13458
      break L1;
      break;
     }
    case 16:
     {
      $97 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 13474
      $98 = HEAP32[$97 >> 2] | 0; //@line 13475
      HEAP32[$2 >> 2] = $97 + 4; //@line 13477
      $99 = $0; //@line 13479
      HEAP32[$99 >> 2] = $98 & 255; //@line 13481
      HEAP32[$99 + 4 >> 2] = 0; //@line 13484
      break L1;
      break;
     }
    case 17:
     {
      $108 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 13500
      $109 = +HEAPF64[$108 >> 3]; //@line 13501
      HEAP32[$2 >> 2] = $108 + 8; //@line 13503
      HEAPF64[$0 >> 3] = $109; //@line 13504
      break L1;
      break;
     }
    case 18:
     {
      $115 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 13520
      $116 = +HEAPF64[$115 >> 3]; //@line 13521
      HEAP32[$2 >> 2] = $115 + 8; //@line 13523
      HEAPF64[$0 >> 3] = $116; //@line 13524
      break L1;
      break;
     }
    default:
     {
      break L1;
     }
    }
   } while (0);
  }
 } while (0);
 return;
}
function __ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_276($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $20 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $35 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $6 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 10082
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10084
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10086
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10088
 HEAP32[$2 + 364 >> 2] = 0; //@line 10090
 $10 = $2 + 1160 | 0; //@line 10093
 HEAP8[$10 >> 0] = HEAP8[$2 + 378 >> 0] | 0; //@line 10094
 HEAP8[$2 + 1163 >> 0] = HEAP8[$2 + 1129 >> 0] | 0; //@line 10098
 HEAP8[$2 + 1176 >> 0] = HEAP8[$2 + 1141 >> 0] | 0; //@line 10102
 HEAP8[$2 + 1177 >> 0] = HEAP8[$2 + 369 >> 0] | 0; //@line 10106
 $20 = $2 + 1178 | 0; //@line 10107
 HEAP8[$20 >> 0] = 0; //@line 10108
 HEAP32[$2 + 1180 >> 2] = 0; //@line 10110
 if ((HEAP32[$2 + 360 >> 2] | 0) == 2) {
  $25 = HEAP32[$2 >> 2] | 0; //@line 10115
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(28) | 0; //@line 10116
  __ZN7LoRaPHY20put_radio_to_standbyEv($25); //@line 10117
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 435; //@line 10120
   $26 = $ReallocAsyncCtx3 + 4 | 0; //@line 10121
   HEAP32[$26 >> 2] = $2; //@line 10122
   $27 = $ReallocAsyncCtx3 + 8 | 0; //@line 10123
   HEAP32[$27 >> 2] = $2; //@line 10124
   $28 = $ReallocAsyncCtx3 + 12 | 0; //@line 10125
   HEAP32[$28 >> 2] = $10; //@line 10126
   $29 = $ReallocAsyncCtx3 + 16 | 0; //@line 10127
   HEAP32[$29 >> 2] = $20; //@line 10128
   $30 = $ReallocAsyncCtx3 + 20 | 0; //@line 10129
   HEAP32[$30 >> 2] = $4; //@line 10130
   $31 = $ReallocAsyncCtx3 + 24 | 0; //@line 10131
   HEAP32[$31 >> 2] = $6; //@line 10132
   sp = STACKTOP; //@line 10133
   return;
  }
  ___async_unwind = 0; //@line 10136
  HEAP32[$ReallocAsyncCtx3 >> 2] = 435; //@line 10137
  $26 = $ReallocAsyncCtx3 + 4 | 0; //@line 10138
  HEAP32[$26 >> 2] = $2; //@line 10139
  $27 = $ReallocAsyncCtx3 + 8 | 0; //@line 10140
  HEAP32[$27 >> 2] = $2; //@line 10141
  $28 = $ReallocAsyncCtx3 + 12 | 0; //@line 10142
  HEAP32[$28 >> 2] = $10; //@line 10143
  $29 = $ReallocAsyncCtx3 + 16 | 0; //@line 10144
  HEAP32[$29 >> 2] = $20; //@line 10145
  $30 = $ReallocAsyncCtx3 + 20 | 0; //@line 10146
  HEAP32[$30 >> 2] = $4; //@line 10147
  $31 = $ReallocAsyncCtx3 + 24 | 0; //@line 10148
  HEAP32[$31 >> 2] = $6; //@line 10149
  sp = STACKTOP; //@line 10150
  return;
 } else {
  $32 = HEAP32[$2 >> 2] | 0; //@line 10153
  $35 = HEAP32[(HEAP32[$32 >> 2] | 0) + 24 >> 2] | 0; //@line 10156
  $38 = (__ZN11LoRaMacMcps14get_indicationEv($2 + 288 | 0) | 0) + 10 | 0; //@line 10159
  $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 10160
  FUNCTION_TABLE_iiii[$35 & 15]($32, $10, $38) | 0; //@line 10161
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 436; //@line 10164
   $39 = $ReallocAsyncCtx + 4 | 0; //@line 10165
   HEAP32[$39 >> 2] = $20; //@line 10166
   $40 = $ReallocAsyncCtx + 8 | 0; //@line 10167
   HEAP32[$40 >> 2] = $2; //@line 10168
   $41 = $ReallocAsyncCtx + 12 | 0; //@line 10169
   HEAP32[$41 >> 2] = $4; //@line 10170
   $42 = $ReallocAsyncCtx + 16 | 0; //@line 10171
   HEAP32[$42 >> 2] = $6; //@line 10172
   $43 = $ReallocAsyncCtx + 20 | 0; //@line 10173
   HEAP32[$43 >> 2] = $2; //@line 10174
   sp = STACKTOP; //@line 10175
   return;
  }
  ___async_unwind = 0; //@line 10178
  HEAP32[$ReallocAsyncCtx >> 2] = 436; //@line 10179
  $39 = $ReallocAsyncCtx + 4 | 0; //@line 10180
  HEAP32[$39 >> 2] = $20; //@line 10181
  $40 = $ReallocAsyncCtx + 8 | 0; //@line 10182
  HEAP32[$40 >> 2] = $2; //@line 10183
  $41 = $ReallocAsyncCtx + 12 | 0; //@line 10184
  HEAP32[$41 >> 2] = $4; //@line 10185
  $42 = $ReallocAsyncCtx + 16 | 0; //@line 10186
  HEAP32[$42 >> 2] = $6; //@line 10187
  $43 = $ReallocAsyncCtx + 20 | 0; //@line 10188
  HEAP32[$43 >> 2] = $2; //@line 10189
  sp = STACKTOP; //@line 10190
  return;
 }
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $43 = 0, $46 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 3033
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3035
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3037
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3039
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3041
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3043
 $12 = $0 + 24 | 0; //@line 3045
 $14 = HEAP32[$12 >> 2] | 0; //@line 3047
 $17 = HEAP32[$12 + 4 >> 2] | 0; //@line 3050
 $19 = HEAP32[$0 + 32 >> 2] | 0; //@line 3052
 $20 = HEAP32[$2 >> 2] | 0; //@line 3053
 if ($20 | 0) {
  $23 = HEAP32[$20 + 4 >> 2] | 0; //@line 3057
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 3058
  FUNCTION_TABLE_vii[$23 & 31]($6, $8); //@line 3059
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 89; //@line 3062
   $24 = $ReallocAsyncCtx2 + 4 | 0; //@line 3063
   HEAP32[$24 >> 2] = $2; //@line 3064
   $25 = $ReallocAsyncCtx2 + 8 | 0; //@line 3065
   HEAP32[$25 >> 2] = $4; //@line 3066
   $26 = $ReallocAsyncCtx2 + 12 | 0; //@line 3067
   HEAP32[$26 >> 2] = $10; //@line 3068
   $27 = $ReallocAsyncCtx2 + 16 | 0; //@line 3069
   $28 = $27; //@line 3070
   $29 = $28; //@line 3071
   HEAP32[$29 >> 2] = $14; //@line 3072
   $30 = $28 + 4 | 0; //@line 3073
   $31 = $30; //@line 3074
   HEAP32[$31 >> 2] = $17; //@line 3075
   $32 = $ReallocAsyncCtx2 + 24 | 0; //@line 3076
   HEAP32[$32 >> 2] = $19; //@line 3077
   $33 = $ReallocAsyncCtx2 + 28 | 0; //@line 3078
   HEAP32[$33 >> 2] = $8; //@line 3079
   sp = STACKTOP; //@line 3080
   return;
  }
  ___async_unwind = 0; //@line 3083
  HEAP32[$ReallocAsyncCtx2 >> 2] = 89; //@line 3084
  $24 = $ReallocAsyncCtx2 + 4 | 0; //@line 3085
  HEAP32[$24 >> 2] = $2; //@line 3086
  $25 = $ReallocAsyncCtx2 + 8 | 0; //@line 3087
  HEAP32[$25 >> 2] = $4; //@line 3088
  $26 = $ReallocAsyncCtx2 + 12 | 0; //@line 3089
  HEAP32[$26 >> 2] = $10; //@line 3090
  $27 = $ReallocAsyncCtx2 + 16 | 0; //@line 3091
  $28 = $27; //@line 3092
  $29 = $28; //@line 3093
  HEAP32[$29 >> 2] = $14; //@line 3094
  $30 = $28 + 4 | 0; //@line 3095
  $31 = $30; //@line 3096
  HEAP32[$31 >> 2] = $17; //@line 3097
  $32 = $ReallocAsyncCtx2 + 24 | 0; //@line 3098
  HEAP32[$32 >> 2] = $19; //@line 3099
  $33 = $ReallocAsyncCtx2 + 28 | 0; //@line 3100
  HEAP32[$33 >> 2] = $8; //@line 3101
  sp = STACKTOP; //@line 3102
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 3105
 __ZN4mbed6Ticker5setupEy($10, $14, $17); //@line 3106
 $34 = HEAP32[$2 >> 2] | 0; //@line 3107
 if ($34 | 0) {
  $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 3111
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 3112
  FUNCTION_TABLE_vi[$37 & 1023]($8); //@line 3113
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 90; //@line 3116
   $38 = $ReallocAsyncCtx3 + 4 | 0; //@line 3117
   HEAP32[$38 >> 2] = $19; //@line 3118
   sp = STACKTOP; //@line 3119
   return;
  }
  ___async_unwind = 0; //@line 3122
  HEAP32[$ReallocAsyncCtx3 >> 2] = 90; //@line 3123
  $38 = $ReallocAsyncCtx3 + 4 | 0; //@line 3124
  HEAP32[$38 >> 2] = $19; //@line 3125
  sp = STACKTOP; //@line 3126
  return;
 }
 $40 = HEAP32[$19 + 788 >> 2] | 0; //@line 3130
 if (!$40) {
  return;
 }
 $43 = HEAP32[$40 + 60 >> 2] | 0; //@line 3136
 if (!$43) {
  return;
 }
 $46 = HEAP32[$43 >> 2] | 0; //@line 3142
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 3143
 FUNCTION_TABLE_vi[$46 & 1023]($40 + 48 | 0); //@line 3144
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 91; //@line 3147
  sp = STACKTOP; //@line 3148
  return;
 }
 ___async_unwind = 0; //@line 3151
 HEAP32[$ReallocAsyncCtx4 >> 2] = 91; //@line 3152
 sp = STACKTOP; //@line 3153
 return;
}
function __ZN12radio_eventsD2Ev($0) {
 $0 = $0 | 0;
 var $13 = 0, $16 = 0, $2 = 0, $20 = 0, $23 = 0, $27 = 0, $30 = 0, $34 = 0, $37 = 0, $41 = 0, $44 = 0, $47 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 9753
 $2 = HEAP32[$0 + 108 >> 2] | 0; //@line 9755
 do {
  if ($2 | 0) {
   $6 = HEAP32[$2 + 8 >> 2] | 0; //@line 9761
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 9762
   FUNCTION_TABLE_vi[$6 & 1023]($0 + 96 | 0); //@line 9763
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 277; //@line 9766
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 9768
    sp = STACKTOP; //@line 9769
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 9772
    break;
   }
  }
 } while (0);
 $9 = HEAP32[$0 + 92 >> 2] | 0; //@line 9778
 do {
  if ($9 | 0) {
   $13 = HEAP32[$9 + 8 >> 2] | 0; //@line 9784
   $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9785
   FUNCTION_TABLE_vi[$13 & 1023]($0 + 80 | 0); //@line 9786
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 278; //@line 9789
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 9791
    sp = STACKTOP; //@line 9792
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 9795
    break;
   }
  }
 } while (0);
 $16 = HEAP32[$0 + 76 >> 2] | 0; //@line 9801
 do {
  if ($16 | 0) {
   $20 = HEAP32[$16 + 8 >> 2] | 0; //@line 9807
   $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9808
   FUNCTION_TABLE_vi[$20 & 1023]($0 + 64 | 0); //@line 9809
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 279; //@line 9812
    HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 9814
    sp = STACKTOP; //@line 9815
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 9818
    break;
   }
  }
 } while (0);
 $23 = HEAP32[$0 + 60 >> 2] | 0; //@line 9824
 do {
  if ($23 | 0) {
   $27 = HEAP32[$23 + 8 >> 2] | 0; //@line 9830
   $AsyncCtx11 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9831
   FUNCTION_TABLE_vi[$27 & 1023]($0 + 48 | 0); //@line 9832
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 280; //@line 9835
    HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 9837
    sp = STACKTOP; //@line 9838
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 9841
    break;
   }
  }
 } while (0);
 $30 = HEAP32[$0 + 44 >> 2] | 0; //@line 9847
 do {
  if ($30 | 0) {
   $34 = HEAP32[$30 + 8 >> 2] | 0; //@line 9853
   $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9854
   FUNCTION_TABLE_vi[$34 & 1023]($0 + 32 | 0); //@line 9855
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 281; //@line 9858
    HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 9860
    sp = STACKTOP; //@line 9861
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 9864
    break;
   }
  }
 } while (0);
 $37 = HEAP32[$0 + 28 >> 2] | 0; //@line 9870
 do {
  if ($37 | 0) {
   $41 = HEAP32[$37 + 8 >> 2] | 0; //@line 9876
   $AsyncCtx19 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9877
   FUNCTION_TABLE_vi[$41 & 1023]($0 + 16 | 0); //@line 9878
   if (___async) {
    HEAP32[$AsyncCtx19 >> 2] = 282; //@line 9881
    HEAP32[$AsyncCtx19 + 4 >> 2] = $0; //@line 9883
    sp = STACKTOP; //@line 9884
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx19 | 0); //@line 9887
    break;
   }
  }
 } while (0);
 $44 = HEAP32[$0 + 12 >> 2] | 0; //@line 9893
 if (!$44) {
  return;
 }
 $47 = HEAP32[$44 + 8 >> 2] | 0; //@line 9899
 $AsyncCtx23 = _emscripten_alloc_async_context(4, sp) | 0; //@line 9900
 FUNCTION_TABLE_vi[$47 & 1023]($0); //@line 9901
 if (___async) {
  HEAP32[$AsyncCtx23 >> 2] = 283; //@line 9904
  sp = STACKTOP; //@line 9905
  return;
 }
 _emscripten_free_async_context($AsyncCtx23 | 0); //@line 9908
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_280($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $15 = 0, $17 = 0, $19 = 0, $2 = 0, $21 = 0, $23 = 0, $25 = 0, $27 = 0, $29 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 10512
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10514
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10518
 $8 = $0 + 16 | 0; //@line 10520
 $10 = HEAP32[$8 >> 2] | 0; //@line 10522
 $13 = HEAP32[$8 + 4 >> 2] | 0; //@line 10525
 $15 = HEAP32[$0 + 24 >> 2] | 0; //@line 10527
 $17 = HEAP32[$0 + 28 >> 2] | 0; //@line 10529
 $19 = HEAP32[$0 + 32 >> 2] | 0; //@line 10531
 $21 = HEAP32[$0 + 36 >> 2] | 0; //@line 10533
 $23 = HEAP32[$0 + 40 >> 2] | 0; //@line 10535
 $25 = HEAP32[$0 + 44 >> 2] | 0; //@line 10537
 $27 = HEAP32[$0 + 48 >> 2] | 0; //@line 10539
 $29 = HEAP32[$0 + 52 >> 2] | 0; //@line 10541
 $31 = HEAP32[$0 + 56 >> 2] | 0; //@line 10543
 $33 = HEAP32[$0 + 60 >> 2] | 0; //@line 10545
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 >> 2]; //@line 10547
 __ZN4mbed6Ticker5setupEy($6, $10, $13); //@line 10548
 $34 = HEAP32[$2 >> 2] | 0; //@line 10549
 if ($34 | 0) {
  $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 10553
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(40) | 0; //@line 10554
  FUNCTION_TABLE_vi[$37 & 1023]($17); //@line 10555
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 60; //@line 10558
   $38 = $ReallocAsyncCtx6 + 4 | 0; //@line 10559
   HEAP32[$38 >> 2] = $15; //@line 10560
   $39 = $ReallocAsyncCtx6 + 8 | 0; //@line 10561
   HEAP32[$39 >> 2] = $19; //@line 10562
   $40 = $ReallocAsyncCtx6 + 12 | 0; //@line 10563
   HEAP32[$40 >> 2] = $21; //@line 10564
   $41 = $ReallocAsyncCtx6 + 16 | 0; //@line 10565
   HEAP32[$41 >> 2] = $23; //@line 10566
   $42 = $ReallocAsyncCtx6 + 20 | 0; //@line 10567
   HEAP32[$42 >> 2] = $25; //@line 10568
   $43 = $ReallocAsyncCtx6 + 24 | 0; //@line 10569
   HEAP32[$43 >> 2] = $27; //@line 10570
   $44 = $ReallocAsyncCtx6 + 28 | 0; //@line 10571
   HEAP32[$44 >> 2] = $29; //@line 10572
   $45 = $ReallocAsyncCtx6 + 32 | 0; //@line 10573
   HEAP32[$45 >> 2] = $31; //@line 10574
   $46 = $ReallocAsyncCtx6 + 36 | 0; //@line 10575
   HEAP32[$46 >> 2] = $33; //@line 10576
   sp = STACKTOP; //@line 10577
   return;
  }
  ___async_unwind = 0; //@line 10580
  HEAP32[$ReallocAsyncCtx6 >> 2] = 60; //@line 10581
  $38 = $ReallocAsyncCtx6 + 4 | 0; //@line 10582
  HEAP32[$38 >> 2] = $15; //@line 10583
  $39 = $ReallocAsyncCtx6 + 8 | 0; //@line 10584
  HEAP32[$39 >> 2] = $19; //@line 10585
  $40 = $ReallocAsyncCtx6 + 12 | 0; //@line 10586
  HEAP32[$40 >> 2] = $21; //@line 10587
  $41 = $ReallocAsyncCtx6 + 16 | 0; //@line 10588
  HEAP32[$41 >> 2] = $23; //@line 10589
  $42 = $ReallocAsyncCtx6 + 20 | 0; //@line 10590
  HEAP32[$42 >> 2] = $25; //@line 10591
  $43 = $ReallocAsyncCtx6 + 24 | 0; //@line 10592
  HEAP32[$43 >> 2] = $27; //@line 10593
  $44 = $ReallocAsyncCtx6 + 28 | 0; //@line 10594
  HEAP32[$44 >> 2] = $29; //@line 10595
  $45 = $ReallocAsyncCtx6 + 32 | 0; //@line 10596
  HEAP32[$45 >> 2] = $31; //@line 10597
  $46 = $ReallocAsyncCtx6 + 36 | 0; //@line 10598
  HEAP32[$46 >> 2] = $33; //@line 10599
  sp = STACKTOP; //@line 10600
  return;
 }
 if (!(HEAP8[$15 + 770 >> 0] | 0)) {
  HEAP32[$19 >> 2] = 6; //@line 10607
  _mbed_tracef(16, 10968, 11025, $19); //@line 10608
  __ZN16SX1276_LoRaRadio18set_low_power_modeEv($15); //@line 10609
  HEAP32[$23 >> 2] = 6; //@line 10610
  _mbed_tracef(16, 10968, 11054, $23); //@line 10611
  return;
 } else {
  HEAP32[$27 >> 2] = 5; //@line 10614
  _mbed_tracef(16, 10968, 11025, $27); //@line 10615
  __ZN16SX1276_LoRaRadio18set_low_power_modeEv($15); //@line 10616
  HEAP32[$31 >> 2] = 5; //@line 10617
  _mbed_tracef(16, 10968, 11054, $31); //@line 10618
  return;
 }
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_262($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 9195
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9197
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9199
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9201
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 9205
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 9207
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 9209
 $15 = HEAP32[HEAP32[$0 + 16 >> 2] >> 2] | 0; //@line 9210
 if (!$15) {
  $24 = HEAP32[$2 >> 2] | 0; //@line 9213
  $26 = $12 + 12 | 0; //@line 9215
  HEAP32[$12 >> 2] = 449; //@line 9216
  HEAP32[$12 + 4 >> 2] = 0; //@line 9218
  HEAP32[$12 + 8 >> 2] = $4; //@line 9220
  HEAP32[$26 >> 2] = 912; //@line 9221
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(28) | 0; //@line 9222
  __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($24, $4 + 1036 | 0, $12); //@line 9223
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 450; //@line 9226
   $27 = $ReallocAsyncCtx8 + 4 | 0; //@line 9227
   HEAP32[$27 >> 2] = $2; //@line 9228
   $28 = $ReallocAsyncCtx8 + 8 | 0; //@line 9229
   HEAP32[$28 >> 2] = $4; //@line 9230
   $29 = $ReallocAsyncCtx8 + 12 | 0; //@line 9231
   HEAP32[$29 >> 2] = $6; //@line 9232
   $30 = $ReallocAsyncCtx8 + 16 | 0; //@line 9233
   HEAP32[$30 >> 2] = $10; //@line 9234
   $31 = $ReallocAsyncCtx8 + 20 | 0; //@line 9235
   HEAP32[$31 >> 2] = $12; //@line 9236
   $32 = $ReallocAsyncCtx8 + 24 | 0; //@line 9237
   HEAP32[$32 >> 2] = $26; //@line 9238
   sp = STACKTOP; //@line 9239
   return;
  }
  ___async_unwind = 0; //@line 9242
  HEAP32[$ReallocAsyncCtx8 >> 2] = 450; //@line 9243
  $27 = $ReallocAsyncCtx8 + 4 | 0; //@line 9244
  HEAP32[$27 >> 2] = $2; //@line 9245
  $28 = $ReallocAsyncCtx8 + 8 | 0; //@line 9246
  HEAP32[$28 >> 2] = $4; //@line 9247
  $29 = $ReallocAsyncCtx8 + 12 | 0; //@line 9248
  HEAP32[$29 >> 2] = $6; //@line 9249
  $30 = $ReallocAsyncCtx8 + 16 | 0; //@line 9250
  HEAP32[$30 >> 2] = $10; //@line 9251
  $31 = $ReallocAsyncCtx8 + 20 | 0; //@line 9252
  HEAP32[$31 >> 2] = $12; //@line 9253
  $32 = $ReallocAsyncCtx8 + 24 | 0; //@line 9254
  HEAP32[$32 >> 2] = $26; //@line 9255
  sp = STACKTOP; //@line 9256
  return;
 } else {
  $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 9260
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 9261
  FUNCTION_TABLE_vi[$18 & 1023]($14); //@line 9262
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 448; //@line 9265
   $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 9266
   HEAP32[$19 >> 2] = $6; //@line 9267
   $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 9268
   HEAP32[$20 >> 2] = $2; //@line 9269
   $21 = $ReallocAsyncCtx2 + 12 | 0; //@line 9270
   HEAP32[$21 >> 2] = $4; //@line 9271
   $22 = $ReallocAsyncCtx2 + 16 | 0; //@line 9272
   HEAP32[$22 >> 2] = $10; //@line 9273
   $23 = $ReallocAsyncCtx2 + 20 | 0; //@line 9274
   HEAP32[$23 >> 2] = $12; //@line 9275
   sp = STACKTOP; //@line 9276
   return;
  }
  ___async_unwind = 0; //@line 9279
  HEAP32[$ReallocAsyncCtx2 >> 2] = 448; //@line 9280
  $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 9281
  HEAP32[$19 >> 2] = $6; //@line 9282
  $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 9283
  HEAP32[$20 >> 2] = $2; //@line 9284
  $21 = $ReallocAsyncCtx2 + 12 | 0; //@line 9285
  HEAP32[$21 >> 2] = $4; //@line 9286
  $22 = $ReallocAsyncCtx2 + 16 | 0; //@line 9287
  HEAP32[$22 >> 2] = $10; //@line 9288
  $23 = $ReallocAsyncCtx2 + 20 | 0; //@line 9289
  HEAP32[$23 >> 2] = $12; //@line 9290
  sp = STACKTOP; //@line 9291
  return;
 }
}
function __ZN7LoRaMac25on_rx_window1_timer_eventEv($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $20 = 0, $25 = 0, $32 = 0, $35 = 0, $38 = 0, $45 = 0, $47 = 0, $48 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx4 = 0, $AsyncCtx7 = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 16206
 STACKTOP = STACKTOP + 16 | 0; //@line 16207
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16207
 $vararg_buffer1 = sp + 8 | 0; //@line 16208
 _mbed_tracef(16, 13728, 14199, sp); //@line 16210
 $2 = HEAP32[$0 + 356 >> 2] | 0; //@line 16212
 $AsyncCtx11 = _emscripten_alloc_async_context(16, sp) | 0; //@line 16214
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($2, $0 + 1036 | 0); //@line 16215
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 434; //@line 16218
  HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 16220
  HEAP32[$AsyncCtx11 + 8 >> 2] = $vararg_buffer1; //@line 16222
  HEAP32[$AsyncCtx11 + 12 >> 2] = $vararg_buffer1; //@line 16224
  sp = STACKTOP; //@line 16225
  STACKTOP = sp; //@line 16226
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 16228
 HEAP32[$0 + 364 >> 2] = 0; //@line 16230
 $10 = $0 + 1160 | 0; //@line 16233
 HEAP8[$10 >> 0] = HEAP8[$0 + 378 >> 0] | 0; //@line 16234
 HEAP8[$0 + 1163 >> 0] = HEAP8[$0 + 1129 >> 0] | 0; //@line 16238
 HEAP8[$0 + 1176 >> 0] = HEAP8[$0 + 1141 >> 0] | 0; //@line 16242
 HEAP8[$0 + 1177 >> 0] = HEAP8[$0 + 369 >> 0] | 0; //@line 16246
 $20 = $0 + 1178 | 0; //@line 16247
 HEAP8[$20 >> 0] = 0; //@line 16248
 HEAP32[$0 + 1180 >> 2] = 0; //@line 16250
 do {
  if ((HEAP32[$0 + 360 >> 2] | 0) == 2) {
   $25 = HEAP32[$0 >> 2] | 0; //@line 16256
   $AsyncCtx7 = _emscripten_alloc_async_context(28, sp) | 0; //@line 16257
   __ZN7LoRaPHY20put_radio_to_standbyEv($25); //@line 16258
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 435; //@line 16261
    HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 16263
    HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 16265
    HEAP32[$AsyncCtx7 + 12 >> 2] = $10; //@line 16267
    HEAP32[$AsyncCtx7 + 16 >> 2] = $20; //@line 16269
    HEAP32[$AsyncCtx7 + 20 >> 2] = $vararg_buffer1; //@line 16271
    HEAP32[$AsyncCtx7 + 24 >> 2] = $vararg_buffer1; //@line 16273
    sp = STACKTOP; //@line 16274
    STACKTOP = sp; //@line 16275
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 16277
    break;
   }
  }
 } while (0);
 $32 = HEAP32[$0 >> 2] | 0; //@line 16282
 $35 = HEAP32[(HEAP32[$32 >> 2] | 0) + 24 >> 2] | 0; //@line 16285
 $38 = (__ZN11LoRaMacMcps14get_indicationEv($0 + 288 | 0) | 0) + 10 | 0; //@line 16288
 $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 16289
 FUNCTION_TABLE_iiii[$35 & 15]($32, $10, $38) | 0; //@line 16290
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 436; //@line 16293
  HEAP32[$AsyncCtx + 4 >> 2] = $20; //@line 16295
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 16297
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer1; //@line 16299
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer1; //@line 16301
  HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 16303
  sp = STACKTOP; //@line 16304
  STACKTOP = sp; //@line 16305
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 16307
 $45 = (HEAP8[$20 >> 0] | 0) != 0; //@line 16309
 $47 = HEAP32[$0 + 1108 >> 2] | 0; //@line 16311
 _mbed_tracef(16, 13728, 13796, $vararg_buffer1); //@line 16312
 $48 = HEAP32[$0 >> 2] | 0; //@line 16313
 $AsyncCtx4 = _emscripten_alloc_async_context(4, sp) | 0; //@line 16314
 __ZN7LoRaPHY15setup_rx_windowEbj($48, $45, $47); //@line 16315
 if (___async) {
  HEAP32[$AsyncCtx4 >> 2] = 437; //@line 16318
  sp = STACKTOP; //@line 16319
  STACKTOP = sp; //@line 16320
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx4 | 0); //@line 16322
  STACKTOP = sp; //@line 16323
  return;
 }
}
function _mbedtls_ccm_free($0) {
 $0 = $0 | 0;
 var $13 = 0, $17 = 0, $21 = 0, $25 = 0, $29 = 0, $33 = 0, $37 = 0, $41 = 0, $45 = 0, $49 = 0, $5 = 0, $53 = 0, $57 = 0, $61 = 0, $65 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1993
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 1994
 _mbedtls_cipher_free($0); //@line 1995
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 585; //@line 1998
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2000
  sp = STACKTOP; //@line 2001
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2004
  HEAP8[$0 >> 0] = 0; //@line 2006
  HEAP8[$0 + 1 >> 0] = 0; //@line 2008
  HEAP8[$0 + 2 >> 0] = 0; //@line 2010
  $5 = $0 + 4 | 0; //@line 2011
  HEAP8[$0 + 3 >> 0] = 0; //@line 2012
  HEAP8[$5 >> 0] = 0; //@line 2014
  HEAP8[$5 + 1 >> 0] = 0; //@line 2016
  HEAP8[$5 + 2 >> 0] = 0; //@line 2018
  $9 = $5 + 4 | 0; //@line 2019
  HEAP8[$5 + 3 >> 0] = 0; //@line 2020
  HEAP8[$9 >> 0] = 0; //@line 2022
  HEAP8[$9 + 1 >> 0] = 0; //@line 2024
  HEAP8[$9 + 2 >> 0] = 0; //@line 2026
  $13 = $5 + 8 | 0; //@line 2027
  HEAP8[$9 + 3 >> 0] = 0; //@line 2028
  HEAP8[$13 >> 0] = 0; //@line 2030
  HEAP8[$13 + 1 >> 0] = 0; //@line 2032
  HEAP8[$13 + 2 >> 0] = 0; //@line 2034
  $17 = $5 + 12 | 0; //@line 2035
  HEAP8[$13 + 3 >> 0] = 0; //@line 2036
  HEAP8[$17 >> 0] = 0; //@line 2038
  HEAP8[$17 + 1 >> 0] = 0; //@line 2040
  HEAP8[$17 + 2 >> 0] = 0; //@line 2042
  $21 = $5 + 16 | 0; //@line 2043
  HEAP8[$17 + 3 >> 0] = 0; //@line 2044
  HEAP8[$21 >> 0] = 0; //@line 2046
  HEAP8[$21 + 1 >> 0] = 0; //@line 2048
  HEAP8[$21 + 2 >> 0] = 0; //@line 2050
  $25 = $5 + 20 | 0; //@line 2051
  HEAP8[$21 + 3 >> 0] = 0; //@line 2052
  HEAP8[$25 >> 0] = 0; //@line 2054
  HEAP8[$25 + 1 >> 0] = 0; //@line 2056
  HEAP8[$25 + 2 >> 0] = 0; //@line 2058
  $29 = $5 + 24 | 0; //@line 2059
  HEAP8[$25 + 3 >> 0] = 0; //@line 2060
  HEAP8[$29 >> 0] = 0; //@line 2062
  HEAP8[$29 + 1 >> 0] = 0; //@line 2064
  HEAP8[$29 + 2 >> 0] = 0; //@line 2066
  $33 = $5 + 28 | 0; //@line 2067
  HEAP8[$29 + 3 >> 0] = 0; //@line 2068
  HEAP8[$33 >> 0] = 0; //@line 2070
  HEAP8[$33 + 1 >> 0] = 0; //@line 2072
  HEAP8[$33 + 2 >> 0] = 0; //@line 2074
  $37 = $5 + 32 | 0; //@line 2075
  HEAP8[$33 + 3 >> 0] = 0; //@line 2076
  HEAP8[$37 >> 0] = 0; //@line 2078
  HEAP8[$37 + 1 >> 0] = 0; //@line 2080
  HEAP8[$37 + 2 >> 0] = 0; //@line 2082
  $41 = $5 + 36 | 0; //@line 2083
  HEAP8[$37 + 3 >> 0] = 0; //@line 2084
  HEAP8[$41 >> 0] = 0; //@line 2086
  HEAP8[$41 + 1 >> 0] = 0; //@line 2088
  HEAP8[$41 + 2 >> 0] = 0; //@line 2090
  $45 = $5 + 40 | 0; //@line 2091
  HEAP8[$41 + 3 >> 0] = 0; //@line 2092
  HEAP8[$45 >> 0] = 0; //@line 2094
  HEAP8[$45 + 1 >> 0] = 0; //@line 2096
  HEAP8[$45 + 2 >> 0] = 0; //@line 2098
  $49 = $5 + 44 | 0; //@line 2099
  HEAP8[$45 + 3 >> 0] = 0; //@line 2100
  HEAP8[$49 >> 0] = 0; //@line 2102
  HEAP8[$49 + 1 >> 0] = 0; //@line 2104
  HEAP8[$49 + 2 >> 0] = 0; //@line 2106
  $53 = $5 + 48 | 0; //@line 2107
  HEAP8[$49 + 3 >> 0] = 0; //@line 2108
  HEAP8[$53 >> 0] = 0; //@line 2110
  HEAP8[$53 + 1 >> 0] = 0; //@line 2112
  HEAP8[$53 + 2 >> 0] = 0; //@line 2114
  $57 = $5 + 52 | 0; //@line 2115
  HEAP8[$53 + 3 >> 0] = 0; //@line 2116
  HEAP8[$57 >> 0] = 0; //@line 2118
  HEAP8[$57 + 1 >> 0] = 0; //@line 2120
  HEAP8[$57 + 2 >> 0] = 0; //@line 2122
  $61 = $5 + 56 | 0; //@line 2123
  HEAP8[$57 + 3 >> 0] = 0; //@line 2124
  HEAP8[$61 >> 0] = 0; //@line 2126
  HEAP8[$61 + 1 >> 0] = 0; //@line 2128
  HEAP8[$61 + 2 >> 0] = 0; //@line 2130
  $65 = $5 + 60 | 0; //@line 2131
  HEAP8[$61 + 3 >> 0] = 0; //@line 2132
  HEAP8[$65 >> 0] = 0; //@line 2134
  HEAP8[$65 + 1 >> 0] = 0; //@line 2136
  HEAP8[$65 + 2 >> 0] = 0; //@line 2138
  HEAP8[$65 + 3 >> 0] = 0; //@line 2139
  return;
 }
}
function _vfprintf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$0 = 0, $$1 = 0, $13 = 0, $14 = 0, $19 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $3 = 0, $32 = 0, $4 = 0, $43 = 0, $5 = 0, $51 = 0, $6 = 0, $AsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 12188
 STACKTOP = STACKTOP + 224 | 0; //@line 12189
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224); //@line 12189
 $3 = sp + 120 | 0; //@line 12190
 $4 = sp + 80 | 0; //@line 12191
 $5 = sp; //@line 12192
 $6 = sp + 136 | 0; //@line 12193
 dest = $4; //@line 12194
 stop = dest + 40 | 0; //@line 12194
 do {
  HEAP32[dest >> 2] = 0; //@line 12194
  dest = dest + 4 | 0; //@line 12194
 } while ((dest | 0) < (stop | 0));
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 12196
 if ((_printf_core(0, $1, $3, $5, $4) | 0) < 0) {
  $$0 = -1; //@line 12200
 } else {
  if ((HEAP32[$0 + 76 >> 2] | 0) > -1) {
   $43 = ___lockfile($0) | 0; //@line 12207
  } else {
   $43 = 0; //@line 12209
  }
  $13 = HEAP32[$0 >> 2] | 0; //@line 12211
  $14 = $13 & 32; //@line 12212
  if ((HEAP8[$0 + 74 >> 0] | 0) < 1) {
   HEAP32[$0 >> 2] = $13 & -33; //@line 12218
  }
  $19 = $0 + 48 | 0; //@line 12220
  do {
   if (!(HEAP32[$19 >> 2] | 0)) {
    $23 = $0 + 44 | 0; //@line 12225
    $24 = HEAP32[$23 >> 2] | 0; //@line 12226
    HEAP32[$23 >> 2] = $6; //@line 12227
    $25 = $0 + 28 | 0; //@line 12228
    HEAP32[$25 >> 2] = $6; //@line 12229
    $26 = $0 + 20 | 0; //@line 12230
    HEAP32[$26 >> 2] = $6; //@line 12231
    HEAP32[$19 >> 2] = 80; //@line 12232
    $28 = $0 + 16 | 0; //@line 12234
    HEAP32[$28 >> 2] = $6 + 80; //@line 12235
    $29 = _printf_core($0, $1, $3, $5, $4) | 0; //@line 12236
    if (!$24) {
     $$1 = $29; //@line 12239
    } else {
     $32 = HEAP32[$0 + 36 >> 2] | 0; //@line 12242
     $AsyncCtx = _emscripten_alloc_async_context(64, sp) | 0; //@line 12243
     FUNCTION_TABLE_iiii[$32 & 15]($0, 0, 0) | 0; //@line 12244
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 693; //@line 12247
      HEAP32[$AsyncCtx + 4 >> 2] = $26; //@line 12249
      HEAP32[$AsyncCtx + 8 >> 2] = $29; //@line 12251
      HEAP32[$AsyncCtx + 12 >> 2] = $24; //@line 12253
      HEAP32[$AsyncCtx + 16 >> 2] = $23; //@line 12255
      HEAP32[$AsyncCtx + 20 >> 2] = $19; //@line 12257
      HEAP32[$AsyncCtx + 24 >> 2] = $28; //@line 12259
      HEAP32[$AsyncCtx + 28 >> 2] = $25; //@line 12261
      HEAP32[$AsyncCtx + 32 >> 2] = $0; //@line 12263
      HEAP32[$AsyncCtx + 36 >> 2] = $14; //@line 12265
      HEAP32[$AsyncCtx + 40 >> 2] = $43; //@line 12267
      HEAP32[$AsyncCtx + 44 >> 2] = $0; //@line 12269
      HEAP32[$AsyncCtx + 48 >> 2] = $6; //@line 12271
      HEAP32[$AsyncCtx + 52 >> 2] = $5; //@line 12273
      HEAP32[$AsyncCtx + 56 >> 2] = $4; //@line 12275
      HEAP32[$AsyncCtx + 60 >> 2] = $3; //@line 12277
      sp = STACKTOP; //@line 12278
      STACKTOP = sp; //@line 12279
      return 0; //@line 12279
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 12281
      $$ = (HEAP32[$26 >> 2] | 0) == 0 ? -1 : $29; //@line 12284
      HEAP32[$23 >> 2] = $24; //@line 12285
      HEAP32[$19 >> 2] = 0; //@line 12286
      HEAP32[$28 >> 2] = 0; //@line 12287
      HEAP32[$25 >> 2] = 0; //@line 12288
      HEAP32[$26 >> 2] = 0; //@line 12289
      $$1 = $$; //@line 12290
      break;
     }
    }
   } else {
    $$1 = _printf_core($0, $1, $3, $5, $4) | 0; //@line 12296
   }
  } while (0);
  $51 = HEAP32[$0 >> 2] | 0; //@line 12299
  HEAP32[$0 >> 2] = $51 | $14; //@line 12304
  if ($43 | 0) {
   ___unlockfile($0); //@line 12307
  }
  $$0 = ($51 & 32 | 0) == 0 ? $$1 : -1; //@line 12309
 }
 STACKTOP = sp; //@line 12311
 return $$0 | 0; //@line 12311
}
function __ZN12LoRaWANStack9handle_rxEhPhth($0, $1, $2, $3, $trunc) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $trunc = $trunc | 0;
 var $$0$off0 = 0, $$029 = 0, $$1 = 0, $$pre$phi33Z2D = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $18 = 0, $19 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $31 = 0, $34 = 0, $36 = 0, $40 = 0, $7 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 9455
 STACKTOP = STACKTOP + 16 | 0; //@line 9456
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 9456
 $vararg_buffer1 = sp + 8 | 0; //@line 9457
 $vararg_buffer = sp; //@line 9458
 if (!(HEAP8[$0 + 1932 >> 0] | 0)) {
  $$1 = -1017; //@line 9463
  STACKTOP = sp; //@line 9464
  return $$1 | 0; //@line 9464
 }
 $7 = $0 + 2236 | 0; //@line 9466
 if (!(HEAP8[$7 >> 0] | 0)) {
  $$1 = -1001; //@line 9470
  STACKTOP = sp; //@line 9471
  return $$1 | 0; //@line 9471
 }
 if (!$2) {
  $$1 = -1003; //@line 9475
  STACKTOP = sp; //@line 9476
  return $$1 | 0; //@line 9476
 }
 $11 = $0 + 2256 | 0; //@line 9478
 $12 = HEAP32[$11 >> 2] | 0; //@line 9479
 $13 = $0 + 2260 | 0; //@line 9480
 $14 = HEAP16[$13 >> 1] | 0; //@line 9481
 if ((HEAP8[$0 + 2253 >> 0] | 0) != $1 << 24 >> 24) {
  $$1 = -1001; //@line 9486
  STACKTOP = sp; //@line 9487
  return $$1 | 0; //@line 9487
 }
 $18 = $0 + 2244 | 0; //@line 9489
 $19 = HEAP32[$18 >> 2] | 0; //@line 9490
 L13 : do {
  if (($19 | 0) == 1) {
   switch ($trunc & 15) {
   case 10:
   case 6:
   case 2:
    {
     break;
    }
   default:
    {
     break L13;
    }
   }
   HEAP32[$vararg_buffer >> 2] = $trunc & 255; //@line 9504
   _mbed_tracef(16, 12356, 13486, $vararg_buffer); //@line 9505
   $23 = HEAP32[$18 >> 2] | 0; //@line 9507
   label = 8; //@line 9508
  } else {
   $23 = $19; //@line 9510
   label = 8; //@line 9511
  }
 } while (0);
 L16 : do {
  if ((label | 0) == 8) {
   if (!$23) {
    switch ($trunc & 15) {
    case 9:
    case 5:
    case 1:
     {
      break;
     }
    default:
     {
      break L16;
     }
    }
    HEAP32[$vararg_buffer1 >> 2] = $trunc & 255; //@line 9528
    _mbed_tracef(16, 12356, 13519, $vararg_buffer1); //@line 9529
   }
  }
 } while (0);
 $25 = HEAP16[$13 >> 1] | 0; //@line 9533
 $26 = $25 & 65535; //@line 9534
 $27 = $3 & 65535; //@line 9535
 $29 = $0 + 2282 | 0; //@line 9537
 $31 = (HEAP16[$29 >> 1] | 0) == 0; //@line 9539
 if (($25 & 65535) > ($3 & 65535)) {
  if ($31) {
   $34 = $0 + 2280 | 0; //@line 9544
   HEAP16[$34 >> 1] = $26 - $27; //@line 9545
   HEAP16[$29 >> 1] = $3; //@line 9546
   _memcpy($2 | 0, $12 | 0, $27 | 0) | 0; //@line 9547
   $$0$off0 = 0; //@line 9548
   $$029 = $3; //@line 9548
   $$pre$phi33Z2D = $34; //@line 9548
  } else {
   label = 15; //@line 9550
  }
 } else {
  if ($31) {
   $36 = $0 + 2280 | 0; //@line 9555
   HEAP16[$36 >> 1] = 0; //@line 9556
   HEAP16[$29 >> 1] = 0; //@line 9557
   _memcpy($2 | 0, $12 | 0, $14 & 65535 | 0) | 0; //@line 9558
   $$0$off0 = 1; //@line 9559
   $$029 = $14; //@line 9559
   $$pre$phi33Z2D = $36; //@line 9559
  } else {
   label = 15; //@line 9561
  }
 }
 if ((label | 0) == 15) {
  $$0$off0 = 0; //@line 9566
  $$029 = $14; //@line 9566
  $$pre$phi33Z2D = $0 + 2280 | 0; //@line 9566
 }
 if (HEAP16[$$pre$phi33Z2D >> 1] | 0) {
  $40 = HEAP16[$0 + 2282 >> 1] | 0; //@line 9572
  if ($40 << 16 >> 16) {
   _memcpy($2 | 0, $12 + ($40 & 65535) | 0, $$029 & 65535 | 0) | 0; //@line 9578
  }
 }
 if (!$$0$off0) {
  $$1 = $$029; //@line 9582
  STACKTOP = sp; //@line 9583
  return $$1 | 0; //@line 9583
 }
 _memset(HEAP32[$11 >> 2] | 0, 0, 255) | 0; //@line 9586
 HEAP8[$7 >> 0] = 0; //@line 9587
 $$1 = $$029; //@line 9588
 STACKTOP = sp; //@line 9589
 return $$1 | 0; //@line 9589
}
function __ZN7LoRaMac11schedule_txEv__async_cb_204($0) {
 $0 = $0 | 0;
 var $$sink = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $26 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $48 = 0, $6 = 0, $64 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $72 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 2840
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2844
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2846
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2848
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 2852
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 2854
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 2856
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 2858
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 2860
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 2862
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 2866
 do {
  if (!(HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0)) {
   HEAP32[$4 + 972 >> 2] = (HEAP32[$4 + 1172 >> 2] | 0) + (HEAP32[$4 + 1120 >> 2] | 0); //@line 2877
   $$sink = $4 + 1124 | 0; //@line 2879
  } else {
   $37 = HEAP8[$4 + 893 >> 0] | 0; //@line 2882
   $38 = HEAP8[$6 >> 0] | 0; //@line 2883
   $40 = __ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($4 + 4 | 0) | 0; //@line 2885
   _mbed_tracef(16, 13728, 14033, $8); //@line 2886
   $48 = ($40 & 255) + ($37 & 255) | 0; //@line 2894
   if ($48 >>> 0 < 256 & $48 >>> 0 <= ((__ZN7LoRaPHY15get_max_payloadEhb(HEAP32[$12 >> 2] | 0, $38, (HEAP8[$4 + 369 >> 0] | 0) != 0) | 0) & 255) >>> 0) {
    HEAP32[$4 + 972 >> 2] = (HEAP32[$4 + 1172 >> 2] | 0) + (HEAP32[$4 + 1112 >> 2] | 0); //@line 2906
    $$sink = $4 + 1116 | 0; //@line 2908
    break;
   } else {
    HEAP32[___async_retval >> 2] = -1010; //@line 2912
    return;
   }
  }
 } while (0);
 HEAP32[$4 + 976 >> 2] = (HEAP32[$4 + 1196 >> 2] | 0) + (HEAP32[$$sink >> 2] | 0); //@line 2922
 $64 = HEAP32[$18 >> 2] | 0; //@line 2923
 if (!$64) {
  $66 = HEAP8[$20 >> 0] | 0; //@line 2926
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 2927
  __ZN7LoRaMac21send_frame_on_channelEh($4, $66) | 0; //@line 2928
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 418; //@line 2931
   $67 = $ReallocAsyncCtx7 + 4 | 0; //@line 2932
   HEAP32[$67 >> 2] = $14; //@line 2933
   $68 = $ReallocAsyncCtx7 + 8 | 0; //@line 2934
   HEAP32[$68 >> 2] = $16; //@line 2935
   sp = STACKTOP; //@line 2936
   return;
  }
  ___async_unwind = 0; //@line 2939
  HEAP32[$ReallocAsyncCtx7 >> 2] = 418; //@line 2940
  $67 = $ReallocAsyncCtx7 + 4 | 0; //@line 2941
  HEAP32[$67 >> 2] = $14; //@line 2942
  $68 = $ReallocAsyncCtx7 + 8 | 0; //@line 2943
  HEAP32[$68 >> 2] = $16; //@line 2944
  sp = STACKTOP; //@line 2945
  return;
 } else {
  $69 = $4 + 968 | 0; //@line 2948
  HEAP32[$69 >> 2] = HEAP32[$69 >> 2] | 16; //@line 2951
  HEAP32[$22 >> 2] = $64; //@line 2952
  _mbed_tracef(16, 13728, 14057, $22); //@line 2953
  $72 = HEAP32[$26 >> 2] | 0; //@line 2954
  $74 = HEAP32[$18 >> 2] | 0; //@line 2956
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 2957
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($72, $4 + 1016 | 0, $74); //@line 2958
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 419; //@line 2961
   $75 = $ReallocAsyncCtx6 + 4 | 0; //@line 2962
   HEAP32[$75 >> 2] = $14; //@line 2963
   $76 = $ReallocAsyncCtx6 + 8 | 0; //@line 2964
   HEAP32[$76 >> 2] = $16; //@line 2965
   sp = STACKTOP; //@line 2966
   return;
  }
  ___async_unwind = 0; //@line 2969
  HEAP32[$ReallocAsyncCtx6 >> 2] = 419; //@line 2970
  $75 = $ReallocAsyncCtx6 + 4 | 0; //@line 2971
  HEAP32[$75 >> 2] = $14; //@line 2972
  $76 = $ReallocAsyncCtx6 + 8 | 0; //@line 2973
  HEAP32[$76 >> 2] = $16; //@line 2974
  sp = STACKTOP; //@line 2975
  return;
 }
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_330($0) {
 $0 = $0 | 0;
 var $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $29 = 0, $32 = 0, $34 = 0, $35 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 15525
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15531
 $14 = HEAP8[$0 + 19 >> 0] | 0; //@line 15541
 $16 = HEAP32[$0 + 20 >> 2] | 0; //@line 15543
 $18 = HEAP32[$0 + 24 >> 2] | 0; //@line 15545
 $20 = HEAP32[$0 + 28 >> 2] | 0; //@line 15547
 $22 = HEAP32[$0 + 32 >> 2] | 0; //@line 15549
 $29 = HEAP32[$6 >> 2] | 0; //@line 15556
 $32 = HEAP32[(HEAP32[$29 >> 2] | 0) + 20 >> 2] | 0; //@line 15559
 $34 = HEAP8[$0 + 17 >> 0] & 1 ? 2 : HEAP8[$0 + 16 >> 0] & 1; //@line 15561
 $35 = HEAP8[$0 + 18 >> 0] | 0; //@line 15562
 if ((HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0) == (HEAPU8[(HEAP32[$0 + 8 >> 2] | 0) + 27 >> 0] | 0)) {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 15565
  FUNCTION_TABLE_viiiiiiiiiiiiii[$32 & 1]($29, 0, $14, 25e3, $34, $35 * 1e3 | 0, 0, 5, 0, 1, 0, 0, 0, 3e3); //@line 15566
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 542; //@line 15569
   $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 15570
   HEAP32[$37 >> 2] = $6; //@line 15571
   $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 15572
   HEAP32[$38 >> 2] = $16; //@line 15573
   $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 15574
   HEAP32[$39 >> 2] = $18; //@line 15575
   $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 15576
   HEAP32[$40 >> 2] = $20; //@line 15577
   $41 = $ReallocAsyncCtx3 + 20 | 0; //@line 15578
   HEAP32[$41 >> 2] = $22; //@line 15579
   sp = STACKTOP; //@line 15580
   return;
  }
  ___async_unwind = 0; //@line 15583
  HEAP32[$ReallocAsyncCtx3 >> 2] = 542; //@line 15584
  $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 15585
  HEAP32[$37 >> 2] = $6; //@line 15586
  $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 15587
  HEAP32[$38 >> 2] = $16; //@line 15588
  $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 15589
  HEAP32[$39 >> 2] = $18; //@line 15590
  $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 15591
  HEAP32[$40 >> 2] = $20; //@line 15592
  $41 = $ReallocAsyncCtx3 + 20 | 0; //@line 15593
  HEAP32[$41 >> 2] = $22; //@line 15594
  sp = STACKTOP; //@line 15595
  return;
 } else {
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 15598
  FUNCTION_TABLE_viiiiiiiiiiiiii[$32 & 1]($29, 1, $14, 0, $34, $35, 1, 8, 0, 1, 0, 0, 0, 3e3); //@line 15599
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 543; //@line 15602
   $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 15603
   HEAP32[$42 >> 2] = $6; //@line 15604
   $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 15605
   HEAP32[$43 >> 2] = $16; //@line 15606
   $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 15607
   HEAP32[$44 >> 2] = $18; //@line 15608
   $45 = $ReallocAsyncCtx4 + 16 | 0; //@line 15609
   HEAP32[$45 >> 2] = $20; //@line 15610
   $46 = $ReallocAsyncCtx4 + 20 | 0; //@line 15611
   HEAP32[$46 >> 2] = $22; //@line 15612
   sp = STACKTOP; //@line 15613
   return;
  }
  ___async_unwind = 0; //@line 15616
  HEAP32[$ReallocAsyncCtx4 >> 2] = 543; //@line 15617
  $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 15618
  HEAP32[$42 >> 2] = $6; //@line 15619
  $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 15620
  HEAP32[$43 >> 2] = $16; //@line 15621
  $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 15622
  HEAP32[$44 >> 2] = $18; //@line 15623
  $45 = $ReallocAsyncCtx4 + 16 | 0; //@line 15624
  HEAP32[$45 >> 2] = $20; //@line 15625
  $46 = $ReallocAsyncCtx4 + 20 | 0; //@line 15626
  HEAP32[$46 >> 2] = $22; //@line 15627
  sp = STACKTOP; //@line 15628
  return;
 }
}
function __ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $13 = 0, $2 = 0, $26 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 8784
 STACKTOP = STACKTOP + 32 | 0; //@line 8785
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 8785
 $vararg_buffer1 = sp + 8 | 0; //@line 8786
 $2 = $0 + 1876 | 0; //@line 8788
 if (HEAP32[$2 >> 2] | 0) {
  _mbed_tracef(16, 12356, 13263, sp); //@line 8792
  $$0 = 0; //@line 8793
  STACKTOP = sp; //@line 8794
  return $$0 | 0; //@line 8794
 }
 _mbed_tracef(16, 12356, 13283, $vararg_buffer1); //@line 8796
 HEAP32[$0 + 2288 >> 2] = $1; //@line 8798
 __ZN18LoRaWANTimeHandler24activate_timer_subsystemEPN6events10EventQueueE($0, $1); //@line 8799
 $6 = $0 + 4 | 0; //@line 8800
 $AsyncCtx9 = _emscripten_alloc_async_context(20, sp) | 0; //@line 8803
 __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE($6, $0 + 1812 | 0, $0 + 1336 | 0, $1) | 0; //@line 8804
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 256; //@line 8807
  HEAP32[$AsyncCtx9 + 4 >> 2] = $vararg_buffer1; //@line 8809
  HEAP32[$AsyncCtx9 + 8 >> 2] = $6; //@line 8811
  HEAP32[$AsyncCtx9 + 12 >> 2] = $0; //@line 8813
  HEAP32[$AsyncCtx9 + 16 >> 2] = $2; //@line 8815
  sp = STACKTOP; //@line 8816
  STACKTOP = sp; //@line 8817
  return 0; //@line 8817
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 8819
 HEAP32[$vararg_buffer1 >> 2] = 2; //@line 8820
 $13 = $vararg_buffer1 + 4 | 0; //@line 8821
 HEAP8[$13 >> 0] = 1; //@line 8822
 $AsyncCtx5 = _emscripten_alloc_async_context(32, sp) | 0; //@line 8823
 __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($6, $vararg_buffer1) | 0; //@line 8824
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 257; //@line 8827
  HEAP32[$AsyncCtx5 + 4 >> 2] = $vararg_buffer1; //@line 8829
  HEAP32[$AsyncCtx5 + 8 >> 2] = $13; //@line 8831
  HEAP32[$AsyncCtx5 + 12 >> 2] = $6; //@line 8833
  HEAP32[$AsyncCtx5 + 16 >> 2] = $vararg_buffer1; //@line 8835
  HEAP32[$AsyncCtx5 + 20 >> 2] = $0; //@line 8837
  HEAP32[$AsyncCtx5 + 24 >> 2] = $2; //@line 8839
  HEAP32[$AsyncCtx5 + 28 >> 2] = $vararg_buffer1; //@line 8841
  sp = STACKTOP; //@line 8842
  STACKTOP = sp; //@line 8843
  return 0; //@line 8843
 }
 _emscripten_free_async_context($AsyncCtx5 | 0); //@line 8845
 HEAP32[$vararg_buffer1 >> 2] = 7; //@line 8846
 HEAP8[$13 >> 0] = 1; //@line 8847
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 8848
 __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($6, $vararg_buffer1) | 0; //@line 8849
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 258; //@line 8852
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 8854
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 8856
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer1; //@line 8858
  sp = STACKTOP; //@line 8859
  STACKTOP = sp; //@line 8860
  return 0; //@line 8860
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 8862
 HEAP32[$0 + 1960 >> 2] = 0; //@line 8864
 HEAP32[$0 + 1956 >> 2] = 0; //@line 8866
 HEAP32[$2 >> 2] = 1; //@line 8867
 $AsyncCtx12 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8868
 $26 = __ZN12LoRaWANStack18lora_state_machineEv($0) | 0; //@line 8869
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 259; //@line 8872
  HEAP32[$AsyncCtx12 + 4 >> 2] = $vararg_buffer1; //@line 8874
  sp = STACKTOP; //@line 8875
  STACKTOP = sp; //@line 8876
  return 0; //@line 8876
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 8878
 $$0 = $26; //@line 8879
 STACKTOP = sp; //@line 8880
 return $$0 | 0; //@line 8880
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_161($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $21 = 0, $23 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $39 = 0, $4 = 0, $45 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 28849
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28853
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28855
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28857
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28859
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28861
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28863
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28865
 if ((HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) != 2) {
  if (!(HEAP8[$8 + 373 >> 0] | 0)) {
   HEAP8[$8 + 376 >> 0] = ($10 | 0) == 0 & (HEAP8[$8 + 944 >> 0] & 8) != 0 & 1; //@line 28881
   $39 = HEAP8[$8 + 378 >> 0] | 0; //@line 28883
   HEAP8[$8 + 379 >> 0] = $39; //@line 28885
   HEAP8[$12 >> 0] = $39; //@line 28886
   HEAP8[$14 + 1 >> 0] = HEAP8[$8 + 372 >> 0] | 0; //@line 28890
   HEAP32[$14 + 4 >> 2] = $16; //@line 28892
   $45 = HEAP32[$8 >> 2] | 0; //@line 28893
   $48 = HEAP32[(HEAP32[$45 >> 2] | 0) + 12 >> 2] | 0; //@line 28896
   $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 28897
   FUNCTION_TABLE_vii[$48 & 31]($45, $14); //@line 28898
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 299; //@line 28901
    $49 = $ReallocAsyncCtx + 4 | 0; //@line 28902
    HEAP32[$49 >> 2] = $8; //@line 28903
    $50 = $ReallocAsyncCtx + 8 | 0; //@line 28904
    HEAP32[$50 >> 2] = $16; //@line 28905
    $51 = $ReallocAsyncCtx + 12 | 0; //@line 28906
    HEAP32[$51 >> 2] = $12; //@line 28907
    sp = STACKTOP; //@line 28908
    return;
   }
   ___async_unwind = 0; //@line 28911
   HEAP32[$ReallocAsyncCtx >> 2] = 299; //@line 28912
   $49 = $ReallocAsyncCtx + 4 | 0; //@line 28913
   HEAP32[$49 >> 2] = $8; //@line 28914
   $50 = $ReallocAsyncCtx + 8 | 0; //@line 28915
   HEAP32[$50 >> 2] = $16; //@line 28916
   $51 = $ReallocAsyncCtx + 12 | 0; //@line 28917
   HEAP32[$51 >> 2] = $12; //@line 28918
   sp = STACKTOP; //@line 28919
   return;
  }
 }
 $21 = HEAP32[$6 >> 2] | 0; //@line 28923
 $23 = HEAP32[$4 >> 2] | 0; //@line 28925
 $26 = (__ZN7LoRaPHY15get_ack_timeoutEv(HEAP32[$8 >> 2] | 0) | 0) + $23 | 0; //@line 28928
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 28929
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($21, $8 + 1076 | 0, $26); //@line 28930
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 298; //@line 28933
  $27 = $ReallocAsyncCtx2 + 4 | 0; //@line 28934
  HEAP32[$27 >> 2] = $8; //@line 28935
  $28 = $ReallocAsyncCtx2 + 8 | 0; //@line 28936
  HEAP32[$28 >> 2] = $10; //@line 28937
  $29 = $ReallocAsyncCtx2 + 12 | 0; //@line 28938
  HEAP32[$29 >> 2] = $12; //@line 28939
  $30 = $ReallocAsyncCtx2 + 16 | 0; //@line 28940
  HEAP32[$30 >> 2] = $14; //@line 28941
  $31 = $ReallocAsyncCtx2 + 20 | 0; //@line 28942
  HEAP32[$31 >> 2] = $16; //@line 28943
  sp = STACKTOP; //@line 28944
  return;
 }
 ___async_unwind = 0; //@line 28947
 HEAP32[$ReallocAsyncCtx2 >> 2] = 298; //@line 28948
 $27 = $ReallocAsyncCtx2 + 4 | 0; //@line 28949
 HEAP32[$27 >> 2] = $8; //@line 28950
 $28 = $ReallocAsyncCtx2 + 8 | 0; //@line 28951
 HEAP32[$28 >> 2] = $10; //@line 28952
 $29 = $ReallocAsyncCtx2 + 12 | 0; //@line 28953
 HEAP32[$29 >> 2] = $12; //@line 28954
 $30 = $ReallocAsyncCtx2 + 16 | 0; //@line 28955
 HEAP32[$30 >> 2] = $14; //@line 28956
 $31 = $ReallocAsyncCtx2 + 20 | 0; //@line 28957
 HEAP32[$31 >> 2] = $16; //@line 28958
 sp = STACKTOP; //@line 28959
 return;
}
function __ZN7LoRaMac10disconnectEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $14 = 0, $18 = 0, $2 = 0, $21 = 0, $29 = 0, $30 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 16854
 $1 = $0 + 356 | 0; //@line 16855
 $2 = HEAP32[$1 >> 2] | 0; //@line 16856
 $AsyncCtx19 = _emscripten_alloc_async_context(12, sp) | 0; //@line 16858
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($2, $0 + 996 | 0); //@line 16859
 if (___async) {
  HEAP32[$AsyncCtx19 >> 2] = 458; //@line 16862
  HEAP32[$AsyncCtx19 + 4 >> 2] = $1; //@line 16864
  HEAP32[$AsyncCtx19 + 8 >> 2] = $0; //@line 16866
  sp = STACKTOP; //@line 16867
  return;
 }
 _emscripten_free_async_context($AsyncCtx19 | 0); //@line 16870
 $6 = HEAP32[$1 >> 2] | 0; //@line 16871
 $AsyncCtx15 = _emscripten_alloc_async_context(12, sp) | 0; //@line 16873
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($6, $0 + 1016 | 0); //@line 16874
 if (___async) {
  HEAP32[$AsyncCtx15 >> 2] = 459; //@line 16877
  HEAP32[$AsyncCtx15 + 4 >> 2] = $1; //@line 16879
  HEAP32[$AsyncCtx15 + 8 >> 2] = $0; //@line 16881
  sp = STACKTOP; //@line 16882
  return;
 }
 _emscripten_free_async_context($AsyncCtx15 | 0); //@line 16885
 $10 = HEAP32[$1 >> 2] | 0; //@line 16886
 $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 16888
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($10, $0 + 1036 | 0); //@line 16889
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 460; //@line 16892
  HEAP32[$AsyncCtx11 + 4 >> 2] = $1; //@line 16894
  HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 16896
  sp = STACKTOP; //@line 16897
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 16900
 $14 = HEAP32[$1 >> 2] | 0; //@line 16901
 $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 16903
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($14, $0 + 1056 | 0); //@line 16904
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 461; //@line 16907
  HEAP32[$AsyncCtx7 + 4 >> 2] = $1; //@line 16909
  HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 16911
  sp = STACKTOP; //@line 16912
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 16915
 $18 = HEAP32[$1 >> 2] | 0; //@line 16916
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 16918
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($18, $0 + 1076 | 0); //@line 16919
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 462; //@line 16922
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 16924
  sp = STACKTOP; //@line 16925
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 16928
 $21 = HEAP32[$0 >> 2] | 0; //@line 16929
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 16930
 __ZN7LoRaPHY18put_radio_to_sleepEv($21); //@line 16931
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 463; //@line 16934
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 16936
  sp = STACKTOP; //@line 16937
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 16940
  HEAP8[$0 + 372 >> 0] = 0; //@line 16942
  HEAP8[$0 + 377 >> 0] = 0; //@line 16944
  HEAP8[$0 + 371 >> 0] = 1; //@line 16946
  HEAP8[$0 + 373 >> 0] = 0; //@line 16948
  HEAP8[$0 + 374 >> 0] = 0; //@line 16950
  HEAP8[$0 + 944 >> 0] = 0; //@line 16952
  $29 = $0 + 968 | 0; //@line 16953
  HEAP32[$29 >> 2] = 0; //@line 16954
  $30 = $0 + 4 | 0; //@line 16955
  __ZN14LoRaMacCommand20clear_command_bufferEv($30); //@line 16956
  __ZN14LoRaMacCommand19clear_repeat_bufferEv($30); //@line 16957
  __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($30); //@line 16958
  HEAP32[$29 >> 2] = 0; //@line 16959
  return;
 }
}
function ___dynamic_cast($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $24 = 0, $30 = 0, $33 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 16485
 STACKTOP = STACKTOP + 64 | 0; //@line 16486
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 16486
 $4 = sp; //@line 16487
 $5 = HEAP32[$0 >> 2] | 0; //@line 16488
 $8 = $0 + (HEAP32[$5 + -8 >> 2] | 0) | 0; //@line 16491
 $10 = HEAP32[$5 + -4 >> 2] | 0; //@line 16493
 HEAP32[$4 >> 2] = $2; //@line 16494
 HEAP32[$4 + 4 >> 2] = $0; //@line 16496
 HEAP32[$4 + 8 >> 2] = $1; //@line 16498
 HEAP32[$4 + 12 >> 2] = $3; //@line 16500
 $14 = $4 + 16 | 0; //@line 16501
 $15 = $4 + 20 | 0; //@line 16502
 $16 = $4 + 24 | 0; //@line 16503
 $17 = $4 + 28 | 0; //@line 16504
 $18 = $4 + 32 | 0; //@line 16505
 $19 = $4 + 40 | 0; //@line 16506
 dest = $14; //@line 16507
 stop = dest + 36 | 0; //@line 16507
 do {
  HEAP32[dest >> 2] = 0; //@line 16507
  dest = dest + 4 | 0; //@line 16507
 } while ((dest | 0) < (stop | 0));
 HEAP16[$14 + 36 >> 1] = 0; //@line 16507
 HEAP8[$14 + 38 >> 0] = 0; //@line 16507
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($10, $2, 0) | 0) {
   HEAP32[$4 + 48 >> 2] = 1; //@line 16512
   $24 = HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] | 0; //@line 16515
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 16516
   FUNCTION_TABLE_viiiiii[$24 & 3]($10, $4, $8, $8, 1, 0); //@line 16517
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 709; //@line 16520
    HEAP32[$AsyncCtx + 4 >> 2] = $16; //@line 16522
    HEAP32[$AsyncCtx + 8 >> 2] = $8; //@line 16524
    HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 16526
    sp = STACKTOP; //@line 16527
    STACKTOP = sp; //@line 16528
    return 0; //@line 16528
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 16530
    $$0 = (HEAP32[$16 >> 2] | 0) == 1 ? $8 : 0; //@line 16534
    break;
   }
  } else {
   $30 = $4 + 36 | 0; //@line 16538
   $33 = HEAP32[(HEAP32[$10 >> 2] | 0) + 24 >> 2] | 0; //@line 16541
   $AsyncCtx3 = _emscripten_alloc_async_context(36, sp) | 0; //@line 16542
   FUNCTION_TABLE_viiiii[$33 & 7]($10, $4, $8, 1, 0); //@line 16543
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 710; //@line 16546
    HEAP32[$AsyncCtx3 + 4 >> 2] = $30; //@line 16548
    HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 16550
    HEAP32[$AsyncCtx3 + 12 >> 2] = $19; //@line 16552
    HEAP32[$AsyncCtx3 + 16 >> 2] = $17; //@line 16554
    HEAP32[$AsyncCtx3 + 20 >> 2] = $18; //@line 16556
    HEAP32[$AsyncCtx3 + 24 >> 2] = $15; //@line 16558
    HEAP32[$AsyncCtx3 + 28 >> 2] = $16; //@line 16560
    HEAP32[$AsyncCtx3 + 32 >> 2] = $14; //@line 16562
    sp = STACKTOP; //@line 16563
    STACKTOP = sp; //@line 16564
    return 0; //@line 16564
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 16566
   switch (HEAP32[$30 >> 2] | 0) {
   case 0:
    {
     $$0 = (HEAP32[$19 >> 2] | 0) == 1 & (HEAP32[$17 >> 2] | 0) == 1 & (HEAP32[$18 >> 2] | 0) == 1 ? HEAP32[$15 >> 2] | 0 : 0; //@line 16580
     break L1;
     break;
    }
   case 1:
    {
     break;
    }
   default:
    {
     $$0 = 0; //@line 16588
     break L1;
    }
   }
   if ((HEAP32[$16 >> 2] | 0) != 1) {
    if (!((HEAP32[$19 >> 2] | 0) == 0 & (HEAP32[$17 >> 2] | 0) == 1 & (HEAP32[$18 >> 2] | 0) == 1)) {
     $$0 = 0; //@line 16604
     break;
    }
   }
   $$0 = HEAP32[$14 >> 2] | 0; //@line 16609
  }
 } while (0);
 STACKTOP = sp; //@line 16612
 return $$0 | 0; //@line 16612
}
function __ZN12radio_eventsD2Ev__async_cb_141($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $29 = 0, $30 = 0, $32 = 0, $35 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 27134
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27136
 $4 = HEAP32[$2 + 76 >> 2] | 0; //@line 27138
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 27143
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 27144
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 64 | 0); //@line 27145
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 279; //@line 27148
   $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 27149
   HEAP32[$9 >> 2] = $2; //@line 27150
   sp = STACKTOP; //@line 27151
   return;
  }
  ___async_unwind = 0; //@line 27154
  HEAP32[$ReallocAsyncCtx3 >> 2] = 279; //@line 27155
  $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 27156
  HEAP32[$9 >> 2] = $2; //@line 27157
  sp = STACKTOP; //@line 27158
  return;
 }
 $11 = HEAP32[$2 + 60 >> 2] | 0; //@line 27162
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 27167
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 27168
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 48 | 0); //@line 27169
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 280; //@line 27172
   $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 27173
   HEAP32[$16 >> 2] = $2; //@line 27174
   sp = STACKTOP; //@line 27175
   return;
  }
  ___async_unwind = 0; //@line 27178
  HEAP32[$ReallocAsyncCtx4 >> 2] = 280; //@line 27179
  $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 27180
  HEAP32[$16 >> 2] = $2; //@line 27181
  sp = STACKTOP; //@line 27182
  return;
 }
 $18 = HEAP32[$2 + 44 >> 2] | 0; //@line 27186
 if ($18 | 0) {
  $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 27191
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 27192
  FUNCTION_TABLE_vi[$22 & 1023]($2 + 32 | 0); //@line 27193
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 281; //@line 27196
   $23 = $ReallocAsyncCtx5 + 4 | 0; //@line 27197
   HEAP32[$23 >> 2] = $2; //@line 27198
   sp = STACKTOP; //@line 27199
   return;
  }
  ___async_unwind = 0; //@line 27202
  HEAP32[$ReallocAsyncCtx5 >> 2] = 281; //@line 27203
  $23 = $ReallocAsyncCtx5 + 4 | 0; //@line 27204
  HEAP32[$23 >> 2] = $2; //@line 27205
  sp = STACKTOP; //@line 27206
  return;
 }
 $25 = HEAP32[$2 + 28 >> 2] | 0; //@line 27210
 if ($25 | 0) {
  $29 = HEAP32[$25 + 8 >> 2] | 0; //@line 27215
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 27216
  FUNCTION_TABLE_vi[$29 & 1023]($2 + 16 | 0); //@line 27217
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 282; //@line 27220
   $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 27221
   HEAP32[$30 >> 2] = $2; //@line 27222
   sp = STACKTOP; //@line 27223
   return;
  }
  ___async_unwind = 0; //@line 27226
  HEAP32[$ReallocAsyncCtx6 >> 2] = 282; //@line 27227
  $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 27228
  HEAP32[$30 >> 2] = $2; //@line 27229
  sp = STACKTOP; //@line 27230
  return;
 }
 $32 = HEAP32[$2 + 12 >> 2] | 0; //@line 27234
 if (!$32) {
  return;
 }
 $35 = HEAP32[$32 + 8 >> 2] | 0; //@line 27240
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 27241
 FUNCTION_TABLE_vi[$35 & 1023]($2); //@line 27242
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 283; //@line 27245
  sp = STACKTOP; //@line 27246
  return;
 }
 ___async_unwind = 0; //@line 27249
 HEAP32[$ReallocAsyncCtx7 >> 2] = 283; //@line 27250
 sp = STACKTOP; //@line 27251
 return;
}
function _main__async_cb_433($0) {
 $0 = $0 | 0;
 var $$pr = 0, $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 34233
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34235
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34237
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 34239
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 34241
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 34243
 $$pr = HEAP32[$10 >> 2] | 0; //@line 34244
 if ($$pr | 0) {
  $13 = HEAP32[$$pr + 4 >> 2] | 0; //@line 34248
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 34249
  FUNCTION_TABLE_vii[$13 & 31](23836, $2); //@line 34250
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 670; //@line 34253
   $14 = $ReallocAsyncCtx3 + 4 | 0; //@line 34254
   HEAP32[$14 >> 2] = $2; //@line 34255
   $15 = $ReallocAsyncCtx3 + 8 | 0; //@line 34256
   HEAP32[$15 >> 2] = $4; //@line 34257
   $16 = $ReallocAsyncCtx3 + 12 | 0; //@line 34258
   HEAP32[$16 >> 2] = $6; //@line 34259
   $17 = $ReallocAsyncCtx3 + 16 | 0; //@line 34260
   HEAP32[$17 >> 2] = $8; //@line 34261
   $18 = $ReallocAsyncCtx3 + 20 | 0; //@line 34262
   HEAP32[$18 >> 2] = $10; //@line 34263
   sp = STACKTOP; //@line 34264
   return;
  }
  ___async_unwind = 0; //@line 34267
  HEAP32[$ReallocAsyncCtx3 >> 2] = 670; //@line 34268
  $14 = $ReallocAsyncCtx3 + 4 | 0; //@line 34269
  HEAP32[$14 >> 2] = $2; //@line 34270
  $15 = $ReallocAsyncCtx3 + 8 | 0; //@line 34271
  HEAP32[$15 >> 2] = $4; //@line 34272
  $16 = $ReallocAsyncCtx3 + 12 | 0; //@line 34273
  HEAP32[$16 >> 2] = $6; //@line 34274
  $17 = $ReallocAsyncCtx3 + 16 | 0; //@line 34275
  HEAP32[$17 >> 2] = $8; //@line 34276
  $18 = $ReallocAsyncCtx3 + 20 | 0; //@line 34277
  HEAP32[$18 >> 2] = $10; //@line 34278
  sp = STACKTOP; //@line 34279
  return;
 }
 HEAP32[5962] = 0; //@line 34282
 __ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t(23828, 23836) | 0; //@line 34283
 if (__ZN16LoRaWANInterface25disable_adaptive_datarateEv(23828) | 0) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 34287
  _puts(16050) | 0; //@line 34288
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 672; //@line 34291
   sp = STACKTOP; //@line 34292
   return;
  }
  ___async_unwind = 0; //@line 34295
  HEAP32[$ReallocAsyncCtx6 >> 2] = 672; //@line 34296
  sp = STACKTOP; //@line 34297
  return;
 }
 __ZN16LoRaWANInterface12set_datarateEh(23828, 5) | 0; //@line 34300
 HEAP8[$8 >> 0] = 0; //@line 34301
 HEAP32[$8 + 4 >> 2] = 24533; //@line 34303
 HEAP32[$8 + 8 >> 2] = 24541; //@line 34305
 HEAP32[$8 + 12 >> 2] = 24549; //@line 34307
 HEAP8[$8 + 16 >> 0] = 3; //@line 34309
 $25 = __ZN16LoRaWANInterface7connectERK15lorawan_connect(23828, $8) | 0; //@line 34310
 switch ($25 | 0) {
 case 0:
 case -1016:
  {
   break;
  }
 default:
  {
   HEAP32[$4 >> 2] = $25; //@line 34316
   _printf(16084, $4) | 0; //@line 34317
   HEAP32[___async_retval >> 2] = -1; //@line 34319
   return;
  }
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 34323
 _puts(16113) | 0; //@line 34324
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 673; //@line 34327
  $26 = $ReallocAsyncCtx5 + 4 | 0; //@line 34328
  HEAP32[$26 >> 2] = $8; //@line 34329
  sp = STACKTOP; //@line 34330
  return;
 }
 ___async_unwind = 0; //@line 34333
 HEAP32[$ReallocAsyncCtx5 >> 2] = 673; //@line 34334
 $26 = $ReallocAsyncCtx5 + 4 | 0; //@line 34335
 HEAP32[$26 >> 2] = $8; //@line 34336
 sp = STACKTOP; //@line 34337
 return;
}
function __ZN12LoRaWANStack17send_frame_to_macEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$pre$phiZ2D = 0, $$sink2$sink = 0, $1 = 0, $14 = 0, $2 = 0, $32 = 0, $4 = 0, $46 = 0, $54 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8260
 STACKTOP = STACKTOP + 48 | 0; //@line 8261
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 8261
 $1 = sp + 32 | 0; //@line 8265
 $2 = sp + 20 | 0; //@line 8266
 $4 = HEAP32[$0 + 1968 >> 2] | 0; //@line 8268
 HEAP32[$1 >> 2] = $4; //@line 8269
 L1 : do {
  switch ($4 | 0) {
  case 0:
   {
    HEAP32[$1 + 8 >> 2] = $0 + 1975; //@line 8275
    HEAP16[$1 + 12 >> 1] = HEAP16[$0 + 2230 >> 1] | 0; //@line 8279
    HEAP8[$1 + 4 >> 0] = HEAP8[$0 + 1972 >> 0] | 0; //@line 8283
    HEAP8[$1 + 6 >> 0] = 1; //@line 8285
    HEAP32[$2 >> 2] = 21; //@line 8286
    $14 = $0 + 4 | 0; //@line 8287
    if (!(__ZN7LoRaMac23mib_get_request_confirmEP25loramac_mib_req_confirm_t($14, $2) | 0)) {
     $$pre$phiZ2D = $14; //@line 8293
     $$sink2$sink = HEAP8[$2 + 4 >> 0] | 0; //@line 8293
     break L1;
    } else {
     _mbed_tracef(16, 12356, 12790, sp); //@line 8296
     $$pre$phiZ2D = $14; //@line 8299
     $$sink2$sink = __ZN7LoRaPHY23get_default_tx_datarateEv($0 + 1336 | 0) | 0; //@line 8299
     break L1;
    }
    break;
   }
  case 1:
   {
    HEAP32[$1 + 8 >> 2] = $0 + 1975; //@line 8307
    HEAP16[$1 + 12 >> 1] = HEAP16[$0 + 2230 >> 1] | 0; //@line 8311
    HEAP8[$1 + 4 >> 0] = HEAP8[$0 + 1972 >> 0] | 0; //@line 8315
    HEAP8[$1 + 6 >> 0] = HEAP8[$0 + 1974 >> 0] | 0; //@line 8319
    HEAP32[$2 >> 2] = 21; //@line 8320
    $32 = $0 + 4 | 0; //@line 8321
    if (!(__ZN7LoRaMac23mib_get_request_confirmEP25loramac_mib_req_confirm_t($32, $2) | 0)) {
     $$pre$phiZ2D = $32; //@line 8327
     $$sink2$sink = HEAP8[$2 + 4 >> 0] | 0; //@line 8327
     break L1;
    } else {
     _mbed_tracef(16, 12356, 12790, sp + 8 | 0); //@line 8330
     $$pre$phiZ2D = $32; //@line 8333
     $$sink2$sink = __ZN7LoRaPHY23get_default_tx_datarateEv($0 + 1336 | 0) | 0; //@line 8333
     break L1;
    }
    break;
   }
  case 3:
   {
    HEAP32[$1 + 8 >> 2] = $0 + 1975; //@line 8341
    HEAP16[$1 + 12 >> 1] = HEAP16[$0 + 2230 >> 1] | 0; //@line 8345
    HEAP8[$1 + 4 >> 0] = 0; //@line 8347
    HEAP8[$1 + 6 >> 0] = 1; //@line 8349
    HEAP32[$2 >> 2] = 21; //@line 8350
    $46 = $0 + 4 | 0; //@line 8351
    if (!(__ZN7LoRaMac23mib_get_request_confirmEP25loramac_mib_req_confirm_t($46, $2) | 0)) {
     $$pre$phiZ2D = $46; //@line 8357
     $$sink2$sink = HEAP8[$2 + 4 >> 0] | 0; //@line 8357
     break L1;
    } else {
     _mbed_tracef(16, 12356, 12790, sp + 16 | 0); //@line 8360
     $$pre$phiZ2D = $46; //@line 8363
     $$sink2$sink = __ZN7LoRaPHY23get_default_tx_datarateEv($0 + 1336 | 0) | 0; //@line 8363
     break L1;
    }
    break;
   }
  default:
   {
    $$0 = -1002; //@line 8369
    STACKTOP = sp; //@line 8370
    return $$0 | 0; //@line 8370
   }
  }
 } while (0);
 HEAP8[$1 + 5 >> 0] = $$sink2$sink; //@line 8375
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 8376
 $54 = __ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t($$pre$phiZ2D, $1) | 0; //@line 8377
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 249; //@line 8380
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 8382
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 8384
  sp = STACKTOP; //@line 8385
  STACKTOP = sp; //@line 8386
  return 0; //@line 8386
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 8388
 $$0 = $54; //@line 8389
 STACKTOP = sp; //@line 8390
 return $$0 | 0; //@line 8390
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_302($0) {
 $0 = $0 | 0;
 var $$040 = 0, $10 = 0, $12 = 0, $14 = 0, $19 = 0, $2 = 0, $21 = 0, $25 = 0, $30 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $6 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 11949
 $2 = HEAP8[$0 + 4 >> 0] | 0; //@line 11951
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11953
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11955
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11960
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 11962
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 11964
 if (!(HEAP8[$0 + 16 >> 0] & 1)) {
  HEAP8[___async_retval >> 0] = 0; //@line 11968
  return;
 }
 if (!(HEAP32[$10 + 20 >> 2] | 0)) {
  $19 = HEAP32[$12 + 112 >> 2] | 0; //@line 11976
  $21 = HEAPU8[$10 >> 0] | 0; //@line 11978
  $25 = HEAP32[$19 + ($21 * 12 | 0) + 4 >> 2] | 0; //@line 11982
  $$040 = ($25 | 0) == 0 ? HEAP32[$19 + ($21 * 12 | 0) >> 2] | 0 : $25; //@line 11985
 } else {
  $$040 = $14; //@line 11987
 }
 $30 = HEAP32[$12 + 96 >> 2] | 0; //@line 11992
 $32 = HEAP32[$12 + 104 >> 2] | 0; //@line 11994
 $33 = $2 & 255; //@line 11995
 $35 = HEAP8[(HEAP32[$12 + 88 >> 2] | 0) + $33 >> 0] | 0; //@line 11997
 $36 = HEAP32[$4 >> 2] | 0; //@line 11998
 $39 = HEAP32[(HEAP32[$36 >> 2] | 0) + 72 >> 2] | 0; //@line 12001
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(44) | 0; //@line 12002
 FUNCTION_TABLE_vi[$39 & 1023]($36); //@line 12003
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 534; //@line 12006
  $40 = $ReallocAsyncCtx4 + 4 | 0; //@line 12007
  HEAP32[$40 >> 2] = $4; //@line 12008
  $41 = $ReallocAsyncCtx4 + 8 | 0; //@line 12009
  HEAP32[$41 >> 2] = $$040; //@line 12010
  $42 = $ReallocAsyncCtx4 + 12 | 0; //@line 12011
  HEAP8[$42 >> 0] = $2; //@line 12012
  $43 = $ReallocAsyncCtx4 + 16 | 0; //@line 12013
  HEAP32[$43 >> 2] = $12; //@line 12014
  $44 = $ReallocAsyncCtx4 + 20 | 0; //@line 12015
  HEAP32[$44 >> 2] = $10; //@line 12016
  $45 = $ReallocAsyncCtx4 + 24 | 0; //@line 12017
  HEAP8[$45 >> 0] = $35; //@line 12018
  $46 = $ReallocAsyncCtx4 + 28 | 0; //@line 12019
  HEAP32[$46 >> 2] = $30; //@line 12020
  $47 = $ReallocAsyncCtx4 + 32 | 0; //@line 12021
  HEAP32[$47 >> 2] = $32; //@line 12022
  $48 = $ReallocAsyncCtx4 + 36 | 0; //@line 12023
  HEAP32[$48 >> 2] = $33; //@line 12024
  $49 = $ReallocAsyncCtx4 + 40 | 0; //@line 12025
  HEAP32[$49 >> 2] = $6; //@line 12026
  sp = STACKTOP; //@line 12027
  return;
 }
 ___async_unwind = 0; //@line 12030
 HEAP32[$ReallocAsyncCtx4 >> 2] = 534; //@line 12031
 $40 = $ReallocAsyncCtx4 + 4 | 0; //@line 12032
 HEAP32[$40 >> 2] = $4; //@line 12033
 $41 = $ReallocAsyncCtx4 + 8 | 0; //@line 12034
 HEAP32[$41 >> 2] = $$040; //@line 12035
 $42 = $ReallocAsyncCtx4 + 12 | 0; //@line 12036
 HEAP8[$42 >> 0] = $2; //@line 12037
 $43 = $ReallocAsyncCtx4 + 16 | 0; //@line 12038
 HEAP32[$43 >> 2] = $12; //@line 12039
 $44 = $ReallocAsyncCtx4 + 20 | 0; //@line 12040
 HEAP32[$44 >> 2] = $10; //@line 12041
 $45 = $ReallocAsyncCtx4 + 24 | 0; //@line 12042
 HEAP8[$45 >> 0] = $35; //@line 12043
 $46 = $ReallocAsyncCtx4 + 28 | 0; //@line 12044
 HEAP32[$46 >> 2] = $30; //@line 12045
 $47 = $ReallocAsyncCtx4 + 32 | 0; //@line 12046
 HEAP32[$47 >> 2] = $32; //@line 12047
 $48 = $ReallocAsyncCtx4 + 36 | 0; //@line 12048
 HEAP32[$48 >> 2] = $33; //@line 12049
 $49 = $ReallocAsyncCtx4 + 40 | 0; //@line 12050
 HEAP32[$49 >> 2] = $6; //@line 12051
 sp = STACKTOP; //@line 12052
 return;
}
function __ZN16SX1276_LoRaRadio8transmitEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $18 = 0, $2 = 0, $21 = 0, $26 = 0, $27 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, sp = 0;
 sp = STACKTOP; //@line 1915
 STACKTOP = STACKTOP + 48 | 0; //@line 1916
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 1916
 $vararg_buffer4 = sp + 16 | 0; //@line 1917
 $vararg_buffer1 = sp + 8 | 0; //@line 1918
 $vararg_buffer = sp; //@line 1919
 $2 = sp + 24 | 0; //@line 1920
 HEAP32[$vararg_buffer >> 2] = $1; //@line 1921
 _mbed_tracef(16, 10968, 11616, $vararg_buffer); //@line 1922
 HEAP8[$0 + 688 >> 0] = 2; //@line 1924
 HEAP32[$vararg_buffer1 >> 2] = 3; //@line 1925
 _mbed_tracef(16, 10968, 11025, $vararg_buffer1); //@line 1926
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 1927
 HEAP32[$vararg_buffer4 >> 2] = 3; //@line 1928
 _mbed_tracef(16, 10968, 11054, $vararg_buffer4); //@line 1929
 $4 = $0 + 1240 | 0; //@line 1930
 $5 = $2 + 12 | 0; //@line 1931
 HEAP32[$2 >> 2] = 94; //@line 1932
 HEAP32[$2 + 4 >> 2] = 0; //@line 1934
 HEAP32[$2 + 8 >> 2] = $0; //@line 1936
 HEAP32[$5 >> 2] = 648; //@line 1937
 $6 = $0 + 1280 | 0; //@line 1938
 if (($6 | 0) != ($2 | 0)) {
  $8 = $0 + 1292 | 0; //@line 1941
  $9 = HEAP32[$8 >> 2] | 0; //@line 1942
  do {
   if ($9 | 0) {
    $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 1947
    $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 1948
    FUNCTION_TABLE_vi[$12 & 1023]($6); //@line 1949
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 95; //@line 1952
     HEAP32[$AsyncCtx + 4 >> 2] = $5; //@line 1954
     HEAP32[$AsyncCtx + 8 >> 2] = $8; //@line 1956
     HEAP32[$AsyncCtx + 12 >> 2] = $6; //@line 1958
     HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 1960
     HEAP32[$AsyncCtx + 20 >> 2] = $4; //@line 1962
     sp = STACKTOP; //@line 1963
     STACKTOP = sp; //@line 1964
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 1966
     break;
    }
   }
  } while (0);
  $18 = HEAP32[$5 >> 2] | 0; //@line 1971
  do {
   if (!$18) {
    $26 = 0; //@line 1975
   } else {
    $21 = HEAP32[$18 + 4 >> 2] | 0; //@line 1978
    $AsyncCtx8 = _emscripten_alloc_async_context(20, sp) | 0; //@line 1979
    FUNCTION_TABLE_vii[$21 & 31]($6, $2); //@line 1980
    if (___async) {
     HEAP32[$AsyncCtx8 >> 2] = 96; //@line 1983
     HEAP32[$AsyncCtx8 + 4 >> 2] = $5; //@line 1985
     HEAP32[$AsyncCtx8 + 8 >> 2] = $8; //@line 1987
     HEAP32[$AsyncCtx8 + 12 >> 2] = $4; //@line 1989
     HEAP32[$AsyncCtx8 + 16 >> 2] = $2; //@line 1991
     sp = STACKTOP; //@line 1992
     STACKTOP = sp; //@line 1993
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx8 | 0); //@line 1995
     $26 = HEAP32[$5 >> 2] | 0; //@line 1997
     break;
    }
   }
  } while (0);
  HEAP32[$8 >> 2] = $26; //@line 2002
 }
 __ZN4mbed6Ticker5setupEy($4, 1e5, 0); //@line 2004
 $27 = HEAP32[$5 >> 2] | 0; //@line 2005
 if (!$27) {
  STACKTOP = sp; //@line 2008
  return;
 }
 $30 = HEAP32[$27 + 8 >> 2] | 0; //@line 2011
 $AsyncCtx12 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2012
 FUNCTION_TABLE_vi[$30 & 1023]($2); //@line 2013
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 97; //@line 2016
  sp = STACKTOP; //@line 2017
  STACKTOP = sp; //@line 2018
  return;
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 2020
 STACKTOP = sp; //@line 2021
 return;
}
function _memchr($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $11 = 0, $12 = 0, $16 = 0, $18 = 0, $20 = 0, $23 = 0, $29 = 0, $3 = 0, $30 = 0, $35 = 0, $7 = 0, $8 = 0, label = 0;
 $3 = $1 & 255; //@line 12060
 $7 = ($2 | 0) != 0; //@line 12064
 L1 : do {
  if ($7 & ($0 & 3 | 0) != 0) {
   $8 = $1 & 255; //@line 12068
   $$03555 = $0; //@line 12069
   $$03654 = $2; //@line 12069
   while (1) {
    if ((HEAP8[$$03555 >> 0] | 0) == $8 << 24 >> 24) {
     $$035$lcssa65 = $$03555; //@line 12074
     $$036$lcssa64 = $$03654; //@line 12074
     label = 6; //@line 12075
     break L1;
    }
    $11 = $$03555 + 1 | 0; //@line 12078
    $12 = $$03654 + -1 | 0; //@line 12079
    $16 = ($12 | 0) != 0; //@line 12083
    if ($16 & ($11 & 3 | 0) != 0) {
     $$03555 = $11; //@line 12086
     $$03654 = $12; //@line 12086
    } else {
     $$035$lcssa = $11; //@line 12088
     $$036$lcssa = $12; //@line 12088
     $$lcssa = $16; //@line 12088
     label = 5; //@line 12089
     break;
    }
   }
  } else {
   $$035$lcssa = $0; //@line 12094
   $$036$lcssa = $2; //@line 12094
   $$lcssa = $7; //@line 12094
   label = 5; //@line 12095
  }
 } while (0);
 if ((label | 0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa; //@line 12100
   $$036$lcssa64 = $$036$lcssa; //@line 12100
   label = 6; //@line 12101
  } else {
   $$2 = $$035$lcssa; //@line 12103
   $$3 = 0; //@line 12103
  }
 }
 L8 : do {
  if ((label | 0) == 6) {
   $18 = $1 & 255; //@line 12109
   if ((HEAP8[$$035$lcssa65 >> 0] | 0) == $18 << 24 >> 24) {
    $$2 = $$035$lcssa65; //@line 12112
    $$3 = $$036$lcssa64; //@line 12112
   } else {
    $20 = Math_imul($3, 16843009) | 0; //@line 12114
    L11 : do {
     if ($$036$lcssa64 >>> 0 > 3) {
      $$046 = $$035$lcssa65; //@line 12118
      $$13745 = $$036$lcssa64; //@line 12118
      while (1) {
       $23 = HEAP32[$$046 >> 2] ^ $20; //@line 12121
       if (($23 & -2139062144 ^ -2139062144) & $23 + -16843009 | 0) {
        break;
       }
       $29 = $$046 + 4 | 0; //@line 12130
       $30 = $$13745 + -4 | 0; //@line 12131
       if ($30 >>> 0 > 3) {
        $$046 = $29; //@line 12134
        $$13745 = $30; //@line 12134
       } else {
        $$0$lcssa = $29; //@line 12136
        $$137$lcssa = $30; //@line 12136
        label = 11; //@line 12137
        break L11;
       }
      }
      $$140 = $$046; //@line 12141
      $$23839 = $$13745; //@line 12141
     } else {
      $$0$lcssa = $$035$lcssa65; //@line 12143
      $$137$lcssa = $$036$lcssa64; //@line 12143
      label = 11; //@line 12144
     }
    } while (0);
    if ((label | 0) == 11) {
     if (!$$137$lcssa) {
      $$2 = $$0$lcssa; //@line 12150
      $$3 = 0; //@line 12150
      break;
     } else {
      $$140 = $$0$lcssa; //@line 12153
      $$23839 = $$137$lcssa; //@line 12153
     }
    }
    while (1) {
     if ((HEAP8[$$140 >> 0] | 0) == $18 << 24 >> 24) {
      $$2 = $$140; //@line 12160
      $$3 = $$23839; //@line 12160
      break L8;
     }
     $35 = $$140 + 1 | 0; //@line 12163
     $$23839 = $$23839 + -1 | 0; //@line 12164
     if (!$$23839) {
      $$2 = $35; //@line 12167
      $$3 = 0; //@line 12167
      break;
     } else {
      $$140 = $35; //@line 12170
     }
    }
   }
  }
 } while (0);
 return ($$3 | 0 ? $$2 : 0) | 0; //@line 12178
}
function _fflush($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $12 = 0, $13 = 0, $25 = 0, $28 = 0, $34 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx3 = 0, $AsyncCtx6 = 0, $phitmp = 0, sp = 0;
 sp = STACKTOP; //@line 11831
 do {
  if (!$0) {
   do {
    if (!(HEAP32[2618] | 0)) {
     $34 = 0; //@line 11839
    } else {
     $12 = HEAP32[2618] | 0; //@line 11841
     $AsyncCtx10 = _emscripten_alloc_async_context(4, sp) | 0; //@line 11842
     $13 = _fflush($12) | 0; //@line 11843
     if (___async) {
      HEAP32[$AsyncCtx10 >> 2] = 689; //@line 11846
      sp = STACKTOP; //@line 11847
      return 0; //@line 11848
     } else {
      _emscripten_free_async_context($AsyncCtx10 | 0); //@line 11850
      $34 = $13; //@line 11851
      break;
     }
    }
   } while (0);
   $$02325 = HEAP32[(___ofl_lock() | 0) >> 2] | 0; //@line 11857
   L9 : do {
    if (!$$02325) {
     $$024$lcssa = $34; //@line 11861
    } else {
     $$02327 = $$02325; //@line 11863
     $$02426 = $34; //@line 11863
     while (1) {
      if ((HEAP32[$$02327 + 76 >> 2] | 0) > -1) {
       $28 = ___lockfile($$02327) | 0; //@line 11870
      } else {
       $28 = 0; //@line 11872
      }
      if ((HEAP32[$$02327 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327 + 28 >> 2] | 0) >>> 0) {
       $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 11880
       $25 = ___fflush_unlocked($$02327) | 0; //@line 11881
       if (___async) {
        break;
       }
       _emscripten_free_async_context($AsyncCtx | 0); //@line 11886
       $$1 = $25 | $$02426; //@line 11888
      } else {
       $$1 = $$02426; //@line 11890
      }
      if ($28 | 0) {
       ___unlockfile($$02327); //@line 11894
      }
      $$023 = HEAP32[$$02327 + 56 >> 2] | 0; //@line 11897
      if (!$$023) {
       $$024$lcssa = $$1; //@line 11900
       break L9;
      } else {
       $$02327 = $$023; //@line 11903
       $$02426 = $$1; //@line 11903
      }
     }
     HEAP32[$AsyncCtx >> 2] = 690; //@line 11906
     HEAP32[$AsyncCtx + 4 >> 2] = $$02426; //@line 11908
     HEAP32[$AsyncCtx + 8 >> 2] = $28; //@line 11910
     HEAP32[$AsyncCtx + 12 >> 2] = $$02327; //@line 11912
     sp = STACKTOP; //@line 11913
     return 0; //@line 11914
    }
   } while (0);
   ___ofl_unlock(); //@line 11917
   $$0 = $$024$lcssa; //@line 11918
  } else {
   if ((HEAP32[$0 + 76 >> 2] | 0) <= -1) {
    $AsyncCtx6 = _emscripten_alloc_async_context(4, sp) | 0; //@line 11924
    $5 = ___fflush_unlocked($0) | 0; //@line 11925
    if (___async) {
     HEAP32[$AsyncCtx6 >> 2] = 687; //@line 11928
     sp = STACKTOP; //@line 11929
     return 0; //@line 11930
    } else {
     _emscripten_free_async_context($AsyncCtx6 | 0); //@line 11932
     $$0 = $5; //@line 11933
     break;
    }
   }
   $phitmp = (___lockfile($0) | 0) == 0; //@line 11938
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 11939
   $7 = ___fflush_unlocked($0) | 0; //@line 11940
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 688; //@line 11943
    HEAP8[$AsyncCtx3 + 4 >> 0] = $phitmp & 1; //@line 11946
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 11948
    sp = STACKTOP; //@line 11949
    return 0; //@line 11950
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 11952
   if ($phitmp) {
    $$0 = $7; //@line 11954
   } else {
    ___unlockfile($0); //@line 11956
    $$0 = $7; //@line 11957
   }
  }
 } while (0);
 return $$0 | 0; //@line 11961
}
function _mbedtls_cipher_free__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $18 = 0, $2 = 0, $22 = 0, $26 = 0, $30 = 0, $34 = 0, $38 = 0, $42 = 0, $46 = 0, $50 = 0, $54 = 0, $58 = 0, $6 = 0, $62 = 0, $66 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12433
 HEAP8[$2 >> 0] = 0; //@line 12435
 HEAP8[$2 + 1 >> 0] = 0; //@line 12437
 HEAP8[$2 + 2 >> 0] = 0; //@line 12439
 $6 = $2 + 4 | 0; //@line 12440
 HEAP8[$2 + 3 >> 0] = 0; //@line 12441
 HEAP8[$6 >> 0] = 0; //@line 12443
 HEAP8[$6 + 1 >> 0] = 0; //@line 12445
 HEAP8[$6 + 2 >> 0] = 0; //@line 12447
 $10 = $6 + 4 | 0; //@line 12448
 HEAP8[$6 + 3 >> 0] = 0; //@line 12449
 HEAP8[$10 >> 0] = 0; //@line 12451
 HEAP8[$10 + 1 >> 0] = 0; //@line 12453
 HEAP8[$10 + 2 >> 0] = 0; //@line 12455
 $14 = $6 + 8 | 0; //@line 12456
 HEAP8[$10 + 3 >> 0] = 0; //@line 12457
 HEAP8[$14 >> 0] = 0; //@line 12459
 HEAP8[$14 + 1 >> 0] = 0; //@line 12461
 HEAP8[$14 + 2 >> 0] = 0; //@line 12463
 $18 = $6 + 12 | 0; //@line 12464
 HEAP8[$14 + 3 >> 0] = 0; //@line 12465
 HEAP8[$18 >> 0] = 0; //@line 12467
 HEAP8[$18 + 1 >> 0] = 0; //@line 12469
 HEAP8[$18 + 2 >> 0] = 0; //@line 12471
 $22 = $6 + 16 | 0; //@line 12472
 HEAP8[$18 + 3 >> 0] = 0; //@line 12473
 HEAP8[$22 >> 0] = 0; //@line 12475
 HEAP8[$22 + 1 >> 0] = 0; //@line 12477
 HEAP8[$22 + 2 >> 0] = 0; //@line 12479
 $26 = $6 + 20 | 0; //@line 12480
 HEAP8[$22 + 3 >> 0] = 0; //@line 12481
 HEAP8[$26 >> 0] = 0; //@line 12483
 HEAP8[$26 + 1 >> 0] = 0; //@line 12485
 HEAP8[$26 + 2 >> 0] = 0; //@line 12487
 $30 = $6 + 24 | 0; //@line 12488
 HEAP8[$26 + 3 >> 0] = 0; //@line 12489
 HEAP8[$30 >> 0] = 0; //@line 12491
 HEAP8[$30 + 1 >> 0] = 0; //@line 12493
 HEAP8[$30 + 2 >> 0] = 0; //@line 12495
 $34 = $6 + 28 | 0; //@line 12496
 HEAP8[$30 + 3 >> 0] = 0; //@line 12497
 HEAP8[$34 >> 0] = 0; //@line 12499
 HEAP8[$34 + 1 >> 0] = 0; //@line 12501
 HEAP8[$34 + 2 >> 0] = 0; //@line 12503
 $38 = $6 + 32 | 0; //@line 12504
 HEAP8[$34 + 3 >> 0] = 0; //@line 12505
 HEAP8[$38 >> 0] = 0; //@line 12507
 HEAP8[$38 + 1 >> 0] = 0; //@line 12509
 HEAP8[$38 + 2 >> 0] = 0; //@line 12511
 $42 = $6 + 36 | 0; //@line 12512
 HEAP8[$38 + 3 >> 0] = 0; //@line 12513
 HEAP8[$42 >> 0] = 0; //@line 12515
 HEAP8[$42 + 1 >> 0] = 0; //@line 12517
 HEAP8[$42 + 2 >> 0] = 0; //@line 12519
 $46 = $6 + 40 | 0; //@line 12520
 HEAP8[$42 + 3 >> 0] = 0; //@line 12521
 HEAP8[$46 >> 0] = 0; //@line 12523
 HEAP8[$46 + 1 >> 0] = 0; //@line 12525
 HEAP8[$46 + 2 >> 0] = 0; //@line 12527
 $50 = $6 + 44 | 0; //@line 12528
 HEAP8[$46 + 3 >> 0] = 0; //@line 12529
 HEAP8[$50 >> 0] = 0; //@line 12531
 HEAP8[$50 + 1 >> 0] = 0; //@line 12533
 HEAP8[$50 + 2 >> 0] = 0; //@line 12535
 $54 = $6 + 48 | 0; //@line 12536
 HEAP8[$50 + 3 >> 0] = 0; //@line 12537
 HEAP8[$54 >> 0] = 0; //@line 12539
 HEAP8[$54 + 1 >> 0] = 0; //@line 12541
 HEAP8[$54 + 2 >> 0] = 0; //@line 12543
 $58 = $6 + 52 | 0; //@line 12544
 HEAP8[$54 + 3 >> 0] = 0; //@line 12545
 HEAP8[$58 >> 0] = 0; //@line 12547
 HEAP8[$58 + 1 >> 0] = 0; //@line 12549
 HEAP8[$58 + 2 >> 0] = 0; //@line 12551
 $62 = $6 + 56 | 0; //@line 12552
 HEAP8[$58 + 3 >> 0] = 0; //@line 12553
 HEAP8[$62 >> 0] = 0; //@line 12555
 HEAP8[$62 + 1 >> 0] = 0; //@line 12557
 HEAP8[$62 + 2 >> 0] = 0; //@line 12559
 $66 = $6 + 60 | 0; //@line 12560
 HEAP8[$62 + 3 >> 0] = 0; //@line 12561
 HEAP8[$66 >> 0] = 0; //@line 12563
 HEAP8[$66 + 1 >> 0] = 0; //@line 12565
 HEAP8[$66 + 2 >> 0] = 0; //@line 12567
 HEAP8[$66 + 3 >> 0] = 0; //@line 12568
 return;
}
function __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_293($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 11272
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11274
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11276
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11278
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 11280
 if (!$AsyncRetVal) {
  $22 = HEAP32[$2 >> 2] | 0; //@line 11283
  if (!$22) {
   HEAP32[___async_retval >> 2] = 0; //@line 11287
   return;
  }
  $25 = HEAP32[$22 + 8 >> 2] | 0; //@line 11291
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 11292
  FUNCTION_TABLE_vi[$25 & 1023]($6); //@line 11293
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 305; //@line 11296
   $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 11297
   HEAP32[$26 >> 2] = 0; //@line 11298
   sp = STACKTOP; //@line 11299
   return;
  }
  ___async_unwind = 0; //@line 11302
  HEAP32[$ReallocAsyncCtx2 >> 2] = 305; //@line 11303
  $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 11304
  HEAP32[$26 >> 2] = 0; //@line 11305
  sp = STACKTOP; //@line 11306
  return;
 }
 $9 = HEAP32[$2 >> 2] | 0; //@line 11309
 if (!$9) {
  HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 11313
  _equeue_event_dtor($AsyncRetVal, 302); //@line 11314
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 11315
  $18 = _equeue_post($4, 303, $AsyncRetVal) | 0; //@line 11316
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 304; //@line 11319
   $19 = $ReallocAsyncCtx3 + 4 | 0; //@line 11320
   HEAP32[$19 >> 2] = $2; //@line 11321
   $20 = $ReallocAsyncCtx3 + 8 | 0; //@line 11322
   HEAP32[$20 >> 2] = $6; //@line 11323
   sp = STACKTOP; //@line 11324
   return;
  }
  HEAP32[___async_retval >> 2] = $18; //@line 11328
  ___async_unwind = 0; //@line 11329
  HEAP32[$ReallocAsyncCtx3 >> 2] = 304; //@line 11330
  $19 = $ReallocAsyncCtx3 + 4 | 0; //@line 11331
  HEAP32[$19 >> 2] = $2; //@line 11332
  $20 = $ReallocAsyncCtx3 + 8 | 0; //@line 11333
  HEAP32[$20 >> 2] = $6; //@line 11334
  sp = STACKTOP; //@line 11335
  return;
 } else {
  $12 = HEAP32[$9 + 4 >> 2] | 0; //@line 11339
  $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 11340
  FUNCTION_TABLE_vii[$12 & 31]($AsyncRetVal, $6); //@line 11341
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 301; //@line 11344
   $13 = $ReallocAsyncCtx + 4 | 0; //@line 11345
   HEAP32[$13 >> 2] = $2; //@line 11346
   $14 = $ReallocAsyncCtx + 8 | 0; //@line 11347
   HEAP32[$14 >> 2] = $AsyncRetVal; //@line 11348
   $15 = $ReallocAsyncCtx + 12 | 0; //@line 11349
   HEAP32[$15 >> 2] = $4; //@line 11350
   $16 = $ReallocAsyncCtx + 16 | 0; //@line 11351
   HEAP32[$16 >> 2] = $6; //@line 11352
   sp = STACKTOP; //@line 11353
   return;
  }
  ___async_unwind = 0; //@line 11356
  HEAP32[$ReallocAsyncCtx >> 2] = 301; //@line 11357
  $13 = $ReallocAsyncCtx + 4 | 0; //@line 11358
  HEAP32[$13 >> 2] = $2; //@line 11359
  $14 = $ReallocAsyncCtx + 8 | 0; //@line 11360
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 11361
  $15 = $ReallocAsyncCtx + 12 | 0; //@line 11362
  HEAP32[$15 >> 2] = $4; //@line 11363
  $16 = $ReallocAsyncCtx + 16 | 0; //@line 11364
  HEAP32[$16 >> 2] = $6; //@line 11365
  sp = STACKTOP; //@line 11366
  return;
 }
}
function __ZN12LoRaWANStackC2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 19371
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19375
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19377
 $7 = $4 + 12 | 0; //@line 19378
 HEAP32[$4 >> 2] = 25; //@line 19379
 HEAP32[$4 + 4 >> 2] = 0; //@line 19381
 HEAP32[$4 + 8 >> 2] = $6; //@line 19383
 HEAP32[$7 >> 2] = 900; //@line 19384
 $8 = $6 + 1860 | 0; //@line 19385
 if (($8 | 0) == ($4 | 0)) {
  $25 = HEAP32[227] | 0; //@line 19389
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 19390
  FUNCTION_TABLE_vi[$25 & 1023]($4); //@line 19391
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 159; //@line 19394
   $26 = $ReallocAsyncCtx4 + 4 | 0; //@line 19395
   HEAP32[$26 >> 2] = $4; //@line 19396
   sp = STACKTOP; //@line 19397
   return;
  }
  ___async_unwind = 0; //@line 19400
  HEAP32[$ReallocAsyncCtx4 >> 2] = 159; //@line 19401
  $26 = $ReallocAsyncCtx4 + 4 | 0; //@line 19402
  HEAP32[$26 >> 2] = $4; //@line 19403
  sp = STACKTOP; //@line 19404
  return;
 }
 $10 = $6 + 1872 | 0; //@line 19407
 $11 = HEAP32[$10 >> 2] | 0; //@line 19408
 if ($11 | 0) {
  $14 = HEAP32[$11 + 8 >> 2] | 0; //@line 19412
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 19413
  FUNCTION_TABLE_vi[$14 & 1023]($8); //@line 19414
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 157; //@line 19417
   $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 19418
   HEAP32[$15 >> 2] = $7; //@line 19419
   $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 19420
   HEAP32[$16 >> 2] = $10; //@line 19421
   $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 19422
   HEAP32[$17 >> 2] = $8; //@line 19423
   $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 19424
   HEAP32[$18 >> 2] = $4; //@line 19425
   sp = STACKTOP; //@line 19426
   return;
  }
  ___async_unwind = 0; //@line 19429
  HEAP32[$ReallocAsyncCtx2 >> 2] = 157; //@line 19430
  $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 19431
  HEAP32[$15 >> 2] = $7; //@line 19432
  $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 19433
  HEAP32[$16 >> 2] = $10; //@line 19434
  $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 19435
  HEAP32[$17 >> 2] = $8; //@line 19436
  $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 19437
  HEAP32[$18 >> 2] = $4; //@line 19438
  sp = STACKTOP; //@line 19439
  return;
 }
 $20 = HEAP32[226] | 0; //@line 19443
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 19444
 FUNCTION_TABLE_vii[$20 & 31]($8, $4); //@line 19445
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 158; //@line 19448
  $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 19449
  HEAP32[$21 >> 2] = $7; //@line 19450
  $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 19451
  HEAP32[$22 >> 2] = $10; //@line 19452
  $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 19453
  HEAP32[$23 >> 2] = $4; //@line 19454
  sp = STACKTOP; //@line 19455
  return;
 }
 ___async_unwind = 0; //@line 19458
 HEAP32[$ReallocAsyncCtx3 >> 2] = 158; //@line 19459
 $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 19460
 HEAP32[$21 >> 2] = $7; //@line 19461
 $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 19462
 HEAP32[$22 >> 2] = $10; //@line 19463
 $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 19464
 HEAP32[$23 >> 2] = $4; //@line 19465
 sp = STACKTOP; //@line 19466
 return;
}
function _mbedtls_ccm_free__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $18 = 0, $2 = 0, $22 = 0, $26 = 0, $30 = 0, $34 = 0, $38 = 0, $42 = 0, $46 = 0, $50 = 0, $54 = 0, $58 = 0, $6 = 0, $62 = 0, $66 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16030
 HEAP8[$2 >> 0] = 0; //@line 16032
 HEAP8[$2 + 1 >> 0] = 0; //@line 16034
 HEAP8[$2 + 2 >> 0] = 0; //@line 16036
 $6 = $2 + 4 | 0; //@line 16037
 HEAP8[$2 + 3 >> 0] = 0; //@line 16038
 HEAP8[$6 >> 0] = 0; //@line 16040
 HEAP8[$6 + 1 >> 0] = 0; //@line 16042
 HEAP8[$6 + 2 >> 0] = 0; //@line 16044
 $10 = $6 + 4 | 0; //@line 16045
 HEAP8[$6 + 3 >> 0] = 0; //@line 16046
 HEAP8[$10 >> 0] = 0; //@line 16048
 HEAP8[$10 + 1 >> 0] = 0; //@line 16050
 HEAP8[$10 + 2 >> 0] = 0; //@line 16052
 $14 = $6 + 8 | 0; //@line 16053
 HEAP8[$10 + 3 >> 0] = 0; //@line 16054
 HEAP8[$14 >> 0] = 0; //@line 16056
 HEAP8[$14 + 1 >> 0] = 0; //@line 16058
 HEAP8[$14 + 2 >> 0] = 0; //@line 16060
 $18 = $6 + 12 | 0; //@line 16061
 HEAP8[$14 + 3 >> 0] = 0; //@line 16062
 HEAP8[$18 >> 0] = 0; //@line 16064
 HEAP8[$18 + 1 >> 0] = 0; //@line 16066
 HEAP8[$18 + 2 >> 0] = 0; //@line 16068
 $22 = $6 + 16 | 0; //@line 16069
 HEAP8[$18 + 3 >> 0] = 0; //@line 16070
 HEAP8[$22 >> 0] = 0; //@line 16072
 HEAP8[$22 + 1 >> 0] = 0; //@line 16074
 HEAP8[$22 + 2 >> 0] = 0; //@line 16076
 $26 = $6 + 20 | 0; //@line 16077
 HEAP8[$22 + 3 >> 0] = 0; //@line 16078
 HEAP8[$26 >> 0] = 0; //@line 16080
 HEAP8[$26 + 1 >> 0] = 0; //@line 16082
 HEAP8[$26 + 2 >> 0] = 0; //@line 16084
 $30 = $6 + 24 | 0; //@line 16085
 HEAP8[$26 + 3 >> 0] = 0; //@line 16086
 HEAP8[$30 >> 0] = 0; //@line 16088
 HEAP8[$30 + 1 >> 0] = 0; //@line 16090
 HEAP8[$30 + 2 >> 0] = 0; //@line 16092
 $34 = $6 + 28 | 0; //@line 16093
 HEAP8[$30 + 3 >> 0] = 0; //@line 16094
 HEAP8[$34 >> 0] = 0; //@line 16096
 HEAP8[$34 + 1 >> 0] = 0; //@line 16098
 HEAP8[$34 + 2 >> 0] = 0; //@line 16100
 $38 = $6 + 32 | 0; //@line 16101
 HEAP8[$34 + 3 >> 0] = 0; //@line 16102
 HEAP8[$38 >> 0] = 0; //@line 16104
 HEAP8[$38 + 1 >> 0] = 0; //@line 16106
 HEAP8[$38 + 2 >> 0] = 0; //@line 16108
 $42 = $6 + 36 | 0; //@line 16109
 HEAP8[$38 + 3 >> 0] = 0; //@line 16110
 HEAP8[$42 >> 0] = 0; //@line 16112
 HEAP8[$42 + 1 >> 0] = 0; //@line 16114
 HEAP8[$42 + 2 >> 0] = 0; //@line 16116
 $46 = $6 + 40 | 0; //@line 16117
 HEAP8[$42 + 3 >> 0] = 0; //@line 16118
 HEAP8[$46 >> 0] = 0; //@line 16120
 HEAP8[$46 + 1 >> 0] = 0; //@line 16122
 HEAP8[$46 + 2 >> 0] = 0; //@line 16124
 $50 = $6 + 44 | 0; //@line 16125
 HEAP8[$46 + 3 >> 0] = 0; //@line 16126
 HEAP8[$50 >> 0] = 0; //@line 16128
 HEAP8[$50 + 1 >> 0] = 0; //@line 16130
 HEAP8[$50 + 2 >> 0] = 0; //@line 16132
 $54 = $6 + 48 | 0; //@line 16133
 HEAP8[$50 + 3 >> 0] = 0; //@line 16134
 HEAP8[$54 >> 0] = 0; //@line 16136
 HEAP8[$54 + 1 >> 0] = 0; //@line 16138
 HEAP8[$54 + 2 >> 0] = 0; //@line 16140
 $58 = $6 + 52 | 0; //@line 16141
 HEAP8[$54 + 3 >> 0] = 0; //@line 16142
 HEAP8[$58 >> 0] = 0; //@line 16144
 HEAP8[$58 + 1 >> 0] = 0; //@line 16146
 HEAP8[$58 + 2 >> 0] = 0; //@line 16148
 $62 = $6 + 56 | 0; //@line 16149
 HEAP8[$58 + 3 >> 0] = 0; //@line 16150
 HEAP8[$62 >> 0] = 0; //@line 16152
 HEAP8[$62 + 1 >> 0] = 0; //@line 16154
 HEAP8[$62 + 2 >> 0] = 0; //@line 16156
 $66 = $6 + 60 | 0; //@line 16157
 HEAP8[$62 + 3 >> 0] = 0; //@line 16158
 HEAP8[$66 >> 0] = 0; //@line 16160
 HEAP8[$66 + 1 >> 0] = 0; //@line 16162
 HEAP8[$66 + 2 >> 0] = 0; //@line 16164
 HEAP8[$66 + 3 >> 0] = 0; //@line 16165
 return;
}
function _mbed_vtracef__async_cb_129($0) {
 $0 = $0 | 0;
 var $$13 = 0, $$expand_i1_val = 0, $10 = 0, $12 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $34 = 0, $35 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 25897
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25899
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25901
 $6 = HEAP8[$0 + 12 >> 0] & 1; //@line 25904
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25906
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25908
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25910
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 25914
 $$13 = ($AsyncRetVal | 0) >= ($12 | 0) ? 0 : $AsyncRetVal; //@line 25916
 $18 = (HEAP32[$0 + 28 >> 2] | 0) + $$13 | 0; //@line 25918
 $19 = $12 - $$13 | 0; //@line 25919
 do {
  if (($$13 | 0) > 0) {
   $21 = HEAP32[189] | 0; //@line 25923
   if (!(($19 | 0) > 0 & ($21 | 0) != 0)) {
    if (($$13 | 0) < 1 | ($19 | 0) < 1 | $6 ^ 1) {
     break;
    }
    _snprintf($18, $19, 12318, $2) | 0; //@line 25935
    break;
   }
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(32) | 0; //@line 25938
   $23 = FUNCTION_TABLE_i[$21 & 7]() | 0; //@line 25939
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 147; //@line 25942
    $24 = $ReallocAsyncCtx6 + 4 | 0; //@line 25943
    HEAP32[$24 >> 2] = $8; //@line 25944
    $25 = $ReallocAsyncCtx6 + 8 | 0; //@line 25945
    HEAP32[$25 >> 2] = $18; //@line 25946
    $26 = $ReallocAsyncCtx6 + 12 | 0; //@line 25947
    HEAP32[$26 >> 2] = $19; //@line 25948
    $27 = $ReallocAsyncCtx6 + 16 | 0; //@line 25949
    HEAP32[$27 >> 2] = $10; //@line 25950
    $28 = $ReallocAsyncCtx6 + 20 | 0; //@line 25951
    $$expand_i1_val = $6 & 1; //@line 25952
    HEAP8[$28 >> 0] = $$expand_i1_val; //@line 25953
    $29 = $ReallocAsyncCtx6 + 24 | 0; //@line 25954
    HEAP32[$29 >> 2] = $2; //@line 25955
    $30 = $ReallocAsyncCtx6 + 28 | 0; //@line 25956
    HEAP32[$30 >> 2] = $4; //@line 25957
    sp = STACKTOP; //@line 25958
    return;
   }
   HEAP32[___async_retval >> 2] = $23; //@line 25962
   ___async_unwind = 0; //@line 25963
   HEAP32[$ReallocAsyncCtx6 >> 2] = 147; //@line 25964
   $24 = $ReallocAsyncCtx6 + 4 | 0; //@line 25965
   HEAP32[$24 >> 2] = $8; //@line 25966
   $25 = $ReallocAsyncCtx6 + 8 | 0; //@line 25967
   HEAP32[$25 >> 2] = $18; //@line 25968
   $26 = $ReallocAsyncCtx6 + 12 | 0; //@line 25969
   HEAP32[$26 >> 2] = $19; //@line 25970
   $27 = $ReallocAsyncCtx6 + 16 | 0; //@line 25971
   HEAP32[$27 >> 2] = $10; //@line 25972
   $28 = $ReallocAsyncCtx6 + 20 | 0; //@line 25973
   $$expand_i1_val = $6 & 1; //@line 25974
   HEAP8[$28 >> 0] = $$expand_i1_val; //@line 25975
   $29 = $ReallocAsyncCtx6 + 24 | 0; //@line 25976
   HEAP32[$29 >> 2] = $2; //@line 25977
   $30 = $ReallocAsyncCtx6 + 28 | 0; //@line 25978
   HEAP32[$30 >> 2] = $4; //@line 25979
   sp = STACKTOP; //@line 25980
   return;
  }
 } while (0);
 $34 = HEAP32[190] | 0; //@line 25984
 $35 = HEAP32[183] | 0; //@line 25985
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 25986
 FUNCTION_TABLE_vi[$34 & 1023]($35); //@line 25987
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 148; //@line 25990
  sp = STACKTOP; //@line 25991
  return;
 }
 ___async_unwind = 0; //@line 25994
 HEAP32[$ReallocAsyncCtx7 >> 2] = 148; //@line 25995
 sp = STACKTOP; //@line 25996
 return;
}
function __ZN7LoRaPHY19update_band_timeoffEbbP6band_th($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$lcssa = 0, $$060 = 0, $$060$us = 0, $$2 = 0, $$2$us = 0, $$pr$us = 0, $$sink2 = 0, $10 = 0, $20 = 0, $26 = 0, $28 = 0, $34 = 0, $38 = 0, $39 = 0, $41 = 0, $42 = 0, $6 = 0, $7 = 0, $8 = 0, $indvars$iv = 0, $indvars$iv62 = 0, $wide$trip$count = 0, label = 0;
 if (!($4 << 24 >> 24)) {
  $$0$lcssa = -1; //@line 24244
  return $$0$lcssa | 0; //@line 24245
 }
 $6 = $0 + 8 | 0; //@line 24247
 $wide$trip$count = $4 & 255; //@line 24248
 if ($1) {
  $$060$us = -1; //@line 24250
  $indvars$iv = 0; //@line 24250
  while (1) {
   $7 = $3 + ($indvars$iv * 24 | 0) + 12 | 0; //@line 24252
   do {
    if ($2) {
     $8 = HEAP32[$7 >> 2] | 0; //@line 24255
     $10 = $3 + ($indvars$iv * 24 | 0) + 8 | 0; //@line 24257
     if ($8 >>> 0 <= (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$10 >> 2] | 0) | 0) >>> 0) {
      HEAP32[$7 >> 2] = 0; //@line 24262
      $$2$us = $$060$us; //@line 24263
      break;
     }
     $$pr$us = HEAP32[$7 >> 2] | 0; //@line 24266
     if (!$$pr$us) {
      $$2$us = $$060$us; //@line 24269
     } else {
      if (($$pr$us - (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$10 >> 2] | 0) | 0) | 0) >>> 0 < $$060$us >>> 0) {
       $20 = HEAP32[$7 >> 2] | 0; //@line 24277
       $$2$us = $20 - (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$10 >> 2] | 0) | 0) | 0; //@line 24282
      } else {
       $$2$us = $$060$us; //@line 24284
      }
     }
    } else {
     HEAP32[$7 >> 2] = 0; //@line 24288
     $$2$us = 0; //@line 24289
    }
   } while (0);
   $indvars$iv = $indvars$iv + 1 | 0; //@line 24292
   if (($indvars$iv | 0) == ($wide$trip$count | 0)) {
    $$0$lcssa = $$2$us; //@line 24295
    break;
   } else {
    $$060$us = $$2$us; //@line 24298
   }
  }
  return $$0$lcssa | 0; //@line 24301
 } else {
  $$060 = -1; //@line 24303
  $indvars$iv62 = 0; //@line 24303
 }
 while (1) {
  $26 = $3 + ($indvars$iv62 * 24 | 0) + 4 | 0; //@line 24307
  $28 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$26 >> 2] | 0) | 0; //@line 24309
  if ($2) {
   $34 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$3 + ($indvars$iv62 * 24 | 0) + 8 >> 2] | 0) | 0; //@line 24315
  } else {
   $34 = 0; //@line 24317
  }
  if ($28 >>> 0 > $34 >>> 0) {
   $$sink2 = $26; //@line 24321
   label = 17; //@line 24322
  } else {
   if ($2) {
    $$sink2 = $3 + ($indvars$iv62 * 24 | 0) + 8 | 0; //@line 24326
    label = 17; //@line 24327
   } else {
    $41 = 0; //@line 24329
   }
  }
  if ((label | 0) == 17) {
   label = 0; //@line 24333
   $41 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$$sink2 >> 2] | 0) | 0; //@line 24337
  }
  $38 = $3 + ($indvars$iv62 * 24 | 0) + 12 | 0; //@line 24339
  $39 = HEAP32[$38 >> 2] | 0; //@line 24340
  if ($39 >>> 0 > $41 >>> 0) {
   $42 = $39 - $41 | 0; //@line 24343
   $$2 = $42 >>> 0 < $$060 >>> 0 ? $42 : $$060; //@line 24346
  } else {
   HEAP32[$38 >> 2] = 0; //@line 24348
   $$2 = $$060; //@line 24349
  }
  $indvars$iv62 = $indvars$iv62 + 1 | 0; //@line 24351
  if (($indvars$iv62 | 0) == ($wide$trip$count | 0)) {
   $$0$lcssa = $$2; //@line 24354
   break;
  } else {
   $$060 = $$2; //@line 24357
  }
 }
 return $$0$lcssa | 0; //@line 24360
}
function _main__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 34136
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34138
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34140
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 34142
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 34144
 $10 = $8 + 4 | 0; //@line 34146
 HEAP32[$10 >> 2] = 0; //@line 34148
 HEAP32[$10 + 4 >> 2] = 0; //@line 34151
 HEAP32[$8 >> 2] = 668; //@line 34152
 $14 = $8 + 12 | 0; //@line 34153
 HEAP32[$14 >> 2] = 10204; //@line 34154
 $15 = HEAP32[5962] | 0; //@line 34155
 if (!$15) {
  $25 = HEAP32[2552] | 0; //@line 34159
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 34160
  FUNCTION_TABLE_vii[$25 & 31](23836, $8); //@line 34161
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 670; //@line 34164
   $26 = $ReallocAsyncCtx3 + 4 | 0; //@line 34165
   HEAP32[$26 >> 2] = $8; //@line 34166
   $27 = $ReallocAsyncCtx3 + 8 | 0; //@line 34167
   HEAP32[$27 >> 2] = $2; //@line 34168
   $28 = $ReallocAsyncCtx3 + 12 | 0; //@line 34169
   HEAP32[$28 >> 2] = $4; //@line 34170
   $29 = $ReallocAsyncCtx3 + 16 | 0; //@line 34171
   HEAP32[$29 >> 2] = $6; //@line 34172
   $30 = $ReallocAsyncCtx3 + 20 | 0; //@line 34173
   HEAP32[$30 >> 2] = $14; //@line 34174
   sp = STACKTOP; //@line 34175
   return;
  }
  ___async_unwind = 0; //@line 34178
  HEAP32[$ReallocAsyncCtx3 >> 2] = 670; //@line 34179
  $26 = $ReallocAsyncCtx3 + 4 | 0; //@line 34180
  HEAP32[$26 >> 2] = $8; //@line 34181
  $27 = $ReallocAsyncCtx3 + 8 | 0; //@line 34182
  HEAP32[$27 >> 2] = $2; //@line 34183
  $28 = $ReallocAsyncCtx3 + 12 | 0; //@line 34184
  HEAP32[$28 >> 2] = $4; //@line 34185
  $29 = $ReallocAsyncCtx3 + 16 | 0; //@line 34186
  HEAP32[$29 >> 2] = $6; //@line 34187
  $30 = $ReallocAsyncCtx3 + 20 | 0; //@line 34188
  HEAP32[$30 >> 2] = $14; //@line 34189
  sp = STACKTOP; //@line 34190
  return;
 } else {
  $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 34194
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 34195
  FUNCTION_TABLE_vi[$18 & 1023](23836); //@line 34196
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 669; //@line 34199
   $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 34200
   HEAP32[$19 >> 2] = $8; //@line 34201
   $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 34202
   HEAP32[$20 >> 2] = $2; //@line 34203
   $21 = $ReallocAsyncCtx2 + 12 | 0; //@line 34204
   HEAP32[$21 >> 2] = $4; //@line 34205
   $22 = $ReallocAsyncCtx2 + 16 | 0; //@line 34206
   HEAP32[$22 >> 2] = $6; //@line 34207
   $23 = $ReallocAsyncCtx2 + 20 | 0; //@line 34208
   HEAP32[$23 >> 2] = $14; //@line 34209
   sp = STACKTOP; //@line 34210
   return;
  }
  ___async_unwind = 0; //@line 34213
  HEAP32[$ReallocAsyncCtx2 >> 2] = 669; //@line 34214
  $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 34215
  HEAP32[$19 >> 2] = $8; //@line 34216
  $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 34217
  HEAP32[$20 >> 2] = $2; //@line 34218
  $21 = $ReallocAsyncCtx2 + 12 | 0; //@line 34219
  HEAP32[$21 >> 2] = $4; //@line 34220
  $22 = $ReallocAsyncCtx2 + 16 | 0; //@line 34221
  HEAP32[$22 >> 2] = $6; //@line 34222
  $23 = $ReallocAsyncCtx2 + 20 | 0; //@line 34223
  HEAP32[$23 >> 2] = $14; //@line 34224
  sp = STACKTOP; //@line 34225
  return;
 }
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$037$off038 = 0, $$037$off039 = 0, $13 = 0, $19 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $39 = 0, $50 = 0, $53 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 16667
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 16673
  } else {
   if (!(__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0)) {
    $50 = HEAP32[$0 + 8 >> 2] | 0; //@line 16679
    $53 = HEAP32[(HEAP32[$50 >> 2] | 0) + 24 >> 2] | 0; //@line 16682
    $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 16683
    FUNCTION_TABLE_viiiii[$53 & 7]($50, $1, $2, $3, $4); //@line 16684
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 713; //@line 16687
     sp = STACKTOP; //@line 16688
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 16691
     break;
    }
   }
   if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
    $13 = $1 + 20 | 0; //@line 16699
    if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
     HEAP32[$1 + 32 >> 2] = $3; //@line 16704
     $19 = $1 + 44 | 0; //@line 16705
     if ((HEAP32[$19 >> 2] | 0) == 4) {
      break;
     }
     $22 = $1 + 52 | 0; //@line 16711
     HEAP8[$22 >> 0] = 0; //@line 16712
     $23 = $1 + 53 | 0; //@line 16713
     HEAP8[$23 >> 0] = 0; //@line 16714
     $25 = HEAP32[$0 + 8 >> 2] | 0; //@line 16716
     $28 = HEAP32[(HEAP32[$25 >> 2] | 0) + 20 >> 2] | 0; //@line 16719
     $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 16720
     FUNCTION_TABLE_viiiiii[$28 & 3]($25, $1, $2, $2, 1, $4); //@line 16721
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 712; //@line 16724
      HEAP32[$AsyncCtx + 4 >> 2] = $23; //@line 16726
      HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 16728
      HEAP32[$AsyncCtx + 12 >> 2] = $13; //@line 16730
      HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 16732
      HEAP32[$AsyncCtx + 20 >> 2] = $22; //@line 16734
      HEAP32[$AsyncCtx + 24 >> 2] = $19; //@line 16736
      sp = STACKTOP; //@line 16737
      return;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 16740
     if (!(HEAP8[$23 >> 0] | 0)) {
      $$037$off038 = 4; //@line 16744
      label = 13; //@line 16745
     } else {
      if (!(HEAP8[$22 >> 0] | 0)) {
       $$037$off038 = 3; //@line 16750
       label = 13; //@line 16751
      } else {
       $$037$off039 = 3; //@line 16753
      }
     }
     if ((label | 0) == 13) {
      HEAP32[$13 >> 2] = $2; //@line 16757
      $39 = $1 + 40 | 0; //@line 16758
      HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + 1; //@line 16761
      if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
       if ((HEAP32[$1 + 24 >> 2] | 0) == 2) {
        HEAP8[$1 + 54 >> 0] = 1; //@line 16771
        $$037$off039 = $$037$off038; //@line 16772
       } else {
        $$037$off039 = $$037$off038; //@line 16774
       }
      } else {
       $$037$off039 = $$037$off038; //@line 16777
      }
     }
     HEAP32[$19 >> 2] = $$037$off039; //@line 16780
     break;
    }
   }
   if (($3 | 0) == 1) {
    HEAP32[$1 + 32 >> 2] = 1; //@line 16787
   }
  }
 } while (0);
 return;
}
function _main__async_cb_434($0) {
 $0 = $0 | 0;
 var $$pre$i$i = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 34344
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34346
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34348
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 34350
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 34352
 $$pre$i$i = HEAP32[HEAP32[$0 + 20 >> 2] >> 2] | 0; //@line 34355
 HEAP32[5962] = $$pre$i$i; //@line 34356
 if ($$pre$i$i | 0) {
  $14 = HEAP32[$$pre$i$i + 8 >> 2] | 0; //@line 34361
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 34362
  FUNCTION_TABLE_vi[$14 & 1023]($2); //@line 34363
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 671; //@line 34366
   $15 = $ReallocAsyncCtx4 + 4 | 0; //@line 34367
   HEAP32[$15 >> 2] = $2; //@line 34368
   $16 = $ReallocAsyncCtx4 + 8 | 0; //@line 34369
   HEAP32[$16 >> 2] = $8; //@line 34370
   $17 = $ReallocAsyncCtx4 + 12 | 0; //@line 34371
   HEAP32[$17 >> 2] = $4; //@line 34372
   $18 = $ReallocAsyncCtx4 + 16 | 0; //@line 34373
   HEAP32[$18 >> 2] = $6; //@line 34374
   sp = STACKTOP; //@line 34375
   return;
  }
  ___async_unwind = 0; //@line 34378
  HEAP32[$ReallocAsyncCtx4 >> 2] = 671; //@line 34379
  $15 = $ReallocAsyncCtx4 + 4 | 0; //@line 34380
  HEAP32[$15 >> 2] = $2; //@line 34381
  $16 = $ReallocAsyncCtx4 + 8 | 0; //@line 34382
  HEAP32[$16 >> 2] = $8; //@line 34383
  $17 = $ReallocAsyncCtx4 + 12 | 0; //@line 34384
  HEAP32[$17 >> 2] = $4; //@line 34385
  $18 = $ReallocAsyncCtx4 + 16 | 0; //@line 34386
  HEAP32[$18 >> 2] = $6; //@line 34387
  sp = STACKTOP; //@line 34388
  return;
 }
 __ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t(23828, 23836) | 0; //@line 34391
 if (__ZN16LoRaWANInterface25disable_adaptive_datarateEv(23828) | 0) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 34395
  _puts(16050) | 0; //@line 34396
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 672; //@line 34399
   sp = STACKTOP; //@line 34400
   return;
  }
  ___async_unwind = 0; //@line 34403
  HEAP32[$ReallocAsyncCtx6 >> 2] = 672; //@line 34404
  sp = STACKTOP; //@line 34405
  return;
 }
 __ZN16LoRaWANInterface12set_datarateEh(23828, 5) | 0; //@line 34408
 HEAP8[$8 >> 0] = 0; //@line 34409
 HEAP32[$8 + 4 >> 2] = 24533; //@line 34411
 HEAP32[$8 + 8 >> 2] = 24541; //@line 34413
 HEAP32[$8 + 12 >> 2] = 24549; //@line 34415
 HEAP8[$8 + 16 >> 0] = 3; //@line 34417
 $25 = __ZN16LoRaWANInterface7connectERK15lorawan_connect(23828, $8) | 0; //@line 34418
 switch ($25 | 0) {
 case 0:
 case -1016:
  {
   break;
  }
 default:
  {
   HEAP32[$4 >> 2] = $25; //@line 34424
   _printf(16084, $4) | 0; //@line 34425
   HEAP32[___async_retval >> 2] = -1; //@line 34427
   return;
  }
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 34431
 _puts(16113) | 0; //@line 34432
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 673; //@line 34435
  $26 = $ReallocAsyncCtx5 + 4 | 0; //@line 34436
  HEAP32[$26 >> 2] = $8; //@line 34437
  sp = STACKTOP; //@line 34438
  return;
 }
 ___async_unwind = 0; //@line 34441
 HEAP32[$ReallocAsyncCtx5 >> 2] = 673; //@line 34442
 $26 = $ReallocAsyncCtx5 + 4 | 0; //@line 34443
 HEAP32[$26 >> 2] = $8; //@line 34444
 sp = STACKTOP; //@line 34445
 return;
}
function _mbed_vtracef__async_cb_130($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 26006
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26008
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26010
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26012
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26014
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26016
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26018
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26020
 $16 = HEAP8[$0 + 32 >> 0] & 1; //@line 26023
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 26025
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 26027
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 26029
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 26031
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 26033
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 26035
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 26037
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 26039
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 26041
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 26043
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 26045
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 26047
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 26049
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 26051
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 26053
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 26055
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 26057
 $55 = ($40 | 0 ? 4 : 0) + $40 + (HEAP32[___async_retval >> 2] | 0) | 0; //@line 26063
 $56 = HEAP32[188] | 0; //@line 26064
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(100) | 0; //@line 26065
 $57 = FUNCTION_TABLE_ii[$56 & 15]($55) | 0; //@line 26066
 if (!___async) {
  HEAP32[___async_retval >> 2] = $57; //@line 26070
  ___async_unwind = 0; //@line 26071
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 145; //@line 26073
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 26075
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 26077
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $6; //@line 26079
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $8; //@line 26081
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $10; //@line 26083
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $12; //@line 26085
 HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $14; //@line 26087
 HEAP8[$ReallocAsyncCtx5 + 32 >> 0] = $16 & 1; //@line 26090
 HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $22; //@line 26092
 HEAP32[$ReallocAsyncCtx5 + 40 >> 2] = $24; //@line 26094
 HEAP32[$ReallocAsyncCtx5 + 44 >> 2] = $26; //@line 26096
 HEAP32[$ReallocAsyncCtx5 + 48 >> 2] = $28; //@line 26098
 HEAP32[$ReallocAsyncCtx5 + 52 >> 2] = $30; //@line 26100
 HEAP32[$ReallocAsyncCtx5 + 56 >> 2] = $32; //@line 26102
 HEAP32[$ReallocAsyncCtx5 + 60 >> 2] = $34; //@line 26104
 HEAP32[$ReallocAsyncCtx5 + 64 >> 2] = $36; //@line 26106
 HEAP32[$ReallocAsyncCtx5 + 68 >> 2] = $38; //@line 26108
 HEAP32[$ReallocAsyncCtx5 + 72 >> 2] = $42; //@line 26110
 HEAP32[$ReallocAsyncCtx5 + 76 >> 2] = $44; //@line 26112
 HEAP32[$ReallocAsyncCtx5 + 80 >> 2] = $18; //@line 26114
 HEAP32[$ReallocAsyncCtx5 + 84 >> 2] = $20; //@line 26116
 HEAP32[$ReallocAsyncCtx5 + 88 >> 2] = $46; //@line 26118
 HEAP32[$ReallocAsyncCtx5 + 92 >> 2] = $48; //@line 26120
 HEAP32[$ReallocAsyncCtx5 + 96 >> 2] = $50; //@line 26122
 sp = STACKTOP; //@line 26123
 return;
}
function _initialize__async_cb_74($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $17 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $28 = 0, $29 = 0, $31 = 0, $33 = 0, $36 = 0, $4 = 0, $40 = 0, $41 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 22288
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22290
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22292
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22294
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22296
 $10 = $0 + 24 | 0; //@line 22298
 $12 = HEAP32[$10 >> 2] | 0; //@line 22300
 $15 = HEAP32[$10 + 4 >> 2] | 0; //@line 22303
 $17 = HEAP32[$0 + 32 >> 2] | 0; //@line 22305
 $19 = HEAP32[$0 + 36 >> 2] | 0; //@line 22307
 $21 = HEAP32[$2 >> 2] | 0; //@line 22310
 $22 = $21 + 32 | 0; //@line 22311
 HEAP32[$22 >> 2] = HEAP32[___async_retval >> 2]; //@line 22312
 $23 = $21 + 40 | 0; //@line 22313
 $24 = $23; //@line 22314
 HEAP32[$24 >> 2] = 0; //@line 22316
 HEAP32[$24 + 4 >> 2] = 0; //@line 22319
 $28 = $21 + 8 | 0; //@line 22320
 HEAP32[$28 >> 2] = $4; //@line 22321
 $29 = _bitshift64Shl(1, 0, $6 | 0) | 0; //@line 22322
 $31 = _i64Add($29 | 0, tempRet0 | 0, -1, 0) | 0; //@line 22324
 $33 = $21 + 12 | 0; //@line 22326
 HEAP32[$33 >> 2] = $31; //@line 22327
 HEAP32[$21 + 16 >> 2] = $8; //@line 22329
 $36 = $21 + 24 | 0; //@line 22331
 HEAP32[$36 >> 2] = $12; //@line 22333
 HEAP32[$36 + 4 >> 2] = $15; //@line 22336
 $40 = $21 + 48 | 0; //@line 22337
 $41 = $40; //@line 22338
 HEAP32[$41 >> 2] = 0; //@line 22340
 HEAP32[$41 + 4 >> 2] = 0; //@line 22343
 HEAP8[$21 + 56 >> 0] = 1; //@line 22345
 $48 = HEAP32[(HEAP32[$17 >> 2] | 0) + 4 >> 2] | 0; //@line 22348
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(32) | 0; //@line 22349
 $49 = FUNCTION_TABLE_i[$48 & 7]() | 0; //@line 22350
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 616; //@line 22353
  $50 = $ReallocAsyncCtx4 + 4 | 0; //@line 22354
  HEAP32[$50 >> 2] = $2; //@line 22355
  $51 = $ReallocAsyncCtx4 + 8 | 0; //@line 22356
  HEAP32[$51 >> 2] = $19; //@line 22357
  $52 = $ReallocAsyncCtx4 + 12 | 0; //@line 22358
  HEAP32[$52 >> 2] = $22; //@line 22359
  $53 = $ReallocAsyncCtx4 + 16 | 0; //@line 22360
  HEAP32[$53 >> 2] = $33; //@line 22361
  $54 = $ReallocAsyncCtx4 + 20 | 0; //@line 22362
  HEAP32[$54 >> 2] = $28; //@line 22363
  $55 = $ReallocAsyncCtx4 + 24 | 0; //@line 22364
  HEAP32[$55 >> 2] = $23; //@line 22365
  $56 = $ReallocAsyncCtx4 + 28 | 0; //@line 22366
  HEAP32[$56 >> 2] = $40; //@line 22367
  sp = STACKTOP; //@line 22368
  return;
 }
 HEAP32[___async_retval >> 2] = $49; //@line 22372
 ___async_unwind = 0; //@line 22373
 HEAP32[$ReallocAsyncCtx4 >> 2] = 616; //@line 22374
 $50 = $ReallocAsyncCtx4 + 4 | 0; //@line 22375
 HEAP32[$50 >> 2] = $2; //@line 22376
 $51 = $ReallocAsyncCtx4 + 8 | 0; //@line 22377
 HEAP32[$51 >> 2] = $19; //@line 22378
 $52 = $ReallocAsyncCtx4 + 12 | 0; //@line 22379
 HEAP32[$52 >> 2] = $22; //@line 22380
 $53 = $ReallocAsyncCtx4 + 16 | 0; //@line 22381
 HEAP32[$53 >> 2] = $33; //@line 22382
 $54 = $ReallocAsyncCtx4 + 20 | 0; //@line 22383
 HEAP32[$54 >> 2] = $28; //@line 22384
 $55 = $ReallocAsyncCtx4 + 24 | 0; //@line 22385
 HEAP32[$55 >> 2] = $23; //@line 22386
 $56 = $ReallocAsyncCtx4 + 28 | 0; //@line 22387
 HEAP32[$56 >> 2] = $40; //@line 22388
 sp = STACKTOP; //@line 22389
 return;
}
function __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$unpack10 = 0, $10 = 0, $13 = 0, $19 = 0, $20 = 0, $23 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 10379
 STACKTOP = STACKTOP + 16 | 0; //@line 10380
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10380
 $3 = sp; //@line 10381
 $$unpack10 = HEAP32[$2 + 4 >> 2] | 0; //@line 10384
 $4 = $3 + 12 | 0; //@line 10385
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 10386
 HEAP32[$3 + 4 >> 2] = $$unpack10; //@line 10388
 HEAP32[$3 + 8 >> 2] = $1; //@line 10390
 HEAP32[$4 >> 2] = 912; //@line 10391
 $AsyncCtx8 = _emscripten_alloc_async_context(16, sp) | 0; //@line 10392
 $5 = _equeue_alloc($0, 16) | 0; //@line 10393
 if (___async) {
  HEAP32[$AsyncCtx8 >> 2] = 300; //@line 10396
  HEAP32[$AsyncCtx8 + 4 >> 2] = $4; //@line 10398
  HEAP32[$AsyncCtx8 + 8 >> 2] = $0; //@line 10400
  HEAP32[$AsyncCtx8 + 12 >> 2] = $3; //@line 10402
  sp = STACKTOP; //@line 10403
  STACKTOP = sp; //@line 10404
  return 0; //@line 10404
 }
 _emscripten_free_async_context($AsyncCtx8 | 0); //@line 10406
 do {
  if (!$5) {
   $$0$i = 0; //@line 10410
  } else {
   $10 = HEAP32[$4 >> 2] | 0; //@line 10412
   do {
    if (!$10) {
     $19 = 0; //@line 10416
    } else {
     $13 = HEAP32[$10 + 4 >> 2] | 0; //@line 10419
     $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 10420
     FUNCTION_TABLE_vii[$13 & 31]($5, $3); //@line 10421
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 301; //@line 10424
      HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 10426
      HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 10428
      HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 10430
      HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 10432
      sp = STACKTOP; //@line 10433
      STACKTOP = sp; //@line 10434
      return 0; //@line 10434
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 10436
      $19 = HEAP32[$4 >> 2] | 0; //@line 10438
      break;
     }
    }
   } while (0);
   HEAP32[$5 + 12 >> 2] = $19; //@line 10444
   _equeue_event_dtor($5, 302); //@line 10445
   $AsyncCtx5 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10446
   $20 = _equeue_post($0, 303, $5) | 0; //@line 10447
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 304; //@line 10450
    HEAP32[$AsyncCtx5 + 4 >> 2] = $4; //@line 10452
    HEAP32[$AsyncCtx5 + 8 >> 2] = $3; //@line 10454
    sp = STACKTOP; //@line 10455
    STACKTOP = sp; //@line 10456
    return 0; //@line 10456
   } else {
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 10458
    $$0$i = $20; //@line 10459
    break;
   }
  }
 } while (0);
 $23 = HEAP32[$4 >> 2] | 0; //@line 10464
 if (!$23) {
  STACKTOP = sp; //@line 10467
  return $$0$i | 0; //@line 10467
 }
 $26 = HEAP32[$23 + 8 >> 2] | 0; //@line 10470
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10471
 FUNCTION_TABLE_vi[$26 & 1023]($3); //@line 10472
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 305; //@line 10475
  HEAP32[$AsyncCtx2 + 4 >> 2] = $$0$i; //@line 10477
  sp = STACKTOP; //@line 10478
  STACKTOP = sp; //@line 10479
  return 0; //@line 10479
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 10481
 STACKTOP = sp; //@line 10482
 return $$0$i | 0; //@line 10482
}
function _equeue_enqueue($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$051$ph = 0, $$05157 = 0, $$0515859 = 0, $$053 = 0, $13 = 0, $14 = 0, $16 = 0, $24 = 0, $25 = 0, $27 = 0, $29 = 0, $33 = 0, $34 = 0, $42 = 0, $43 = 0, $46 = 0, $47 = 0, $49 = 0, $54 = 0, $65 = 0, $67 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 3471
 $13 = $1 - (HEAP32[$0 + 12 >> 2] | 0) | HEAPU8[$1 + 4 >> 0] << HEAP32[$0 + 16 >> 2]; //@line 3482
 $14 = $1 + 20 | 0; //@line 3483
 $16 = (HEAP32[$14 >> 2] | 0) - $2 | 0; //@line 3485
 HEAP32[$14 >> 2] = ($16 & ~($16 >> 31)) + $2; //@line 3490
 HEAP8[$1 + 5 >> 0] = HEAP8[$0 + 9 >> 0] | 0; //@line 3494
 $24 = $0 + 128 | 0; //@line 3495
 _equeue_mutex_lock($24); //@line 3496
 $25 = HEAP32[$0 >> 2] | 0; //@line 3497
 L1 : do {
  if (!$25) {
   $$051$ph = $0; //@line 3501
   label = 5; //@line 3502
  } else {
   $27 = HEAP32[$14 >> 2] | 0; //@line 3504
   $$053 = $0; //@line 3505
   $29 = $25; //@line 3505
   while (1) {
    if (((HEAP32[$29 + 20 >> 2] | 0) - $27 | 0) >= 0) {
     break;
    }
    $33 = $29 + 8 | 0; //@line 3514
    $34 = HEAP32[$33 >> 2] | 0; //@line 3515
    if (!$34) {
     $$051$ph = $33; //@line 3518
     label = 5; //@line 3519
     break L1;
    } else {
     $$053 = $33; //@line 3522
     $29 = $34; //@line 3522
    }
   }
   if ((HEAP32[$29 + 20 >> 2] | 0) != (HEAP32[$14 >> 2] | 0)) {
    $49 = $1 + 8 | 0; //@line 3530
    HEAP32[$49 >> 2] = $29; //@line 3531
    HEAP32[$29 + 16 >> 2] = $49; //@line 3533
    $$0515859 = $$053; //@line 3534
    label = 11; //@line 3535
    break;
   }
   $42 = HEAP32[$29 + 8 >> 2] | 0; //@line 3539
   $43 = $1 + 8 | 0; //@line 3540
   HEAP32[$43 >> 2] = $42; //@line 3541
   if ($42 | 0) {
    HEAP32[$42 + 16 >> 2] = $43; //@line 3545
   }
   $46 = HEAP32[$$053 >> 2] | 0; //@line 3547
   $47 = $1 + 12 | 0; //@line 3548
   HEAP32[$47 >> 2] = $46; //@line 3549
   HEAP32[$46 + 16 >> 2] = $47; //@line 3551
   $$05157 = $$053; //@line 3552
  }
 } while (0);
 if ((label | 0) == 5) {
  HEAP32[$1 + 8 >> 2] = 0; //@line 3557
  $$0515859 = $$051$ph; //@line 3558
  label = 11; //@line 3559
 }
 if ((label | 0) == 11) {
  HEAP32[$1 + 12 >> 2] = 0; //@line 3563
  $$05157 = $$0515859; //@line 3564
 }
 HEAP32[$$05157 >> 2] = $1; //@line 3566
 HEAP32[$1 + 16 >> 2] = $$05157; //@line 3568
 $54 = HEAP32[$0 + 40 >> 2] | 0; //@line 3570
 if (!$54) {
  _equeue_mutex_unlock($24); //@line 3573
  return $13 | 0; //@line 3574
 }
 if (!(HEAP8[$0 + 36 >> 0] | 0)) {
  _equeue_mutex_unlock($24); //@line 3580
  return $13 | 0; //@line 3581
 }
 if ((HEAP32[$0 >> 2] | 0) != ($1 | 0)) {
  _equeue_mutex_unlock($24); //@line 3586
  return $13 | 0; //@line 3587
 }
 if (HEAP32[$1 + 12 >> 2] | 0) {
  _equeue_mutex_unlock($24); //@line 3593
  return $13 | 0; //@line 3594
 }
 $65 = HEAP32[$0 + 44 >> 2] | 0; //@line 3597
 $67 = (HEAP32[$14 >> 2] | 0) - $2 | 0; //@line 3599
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 3603
 FUNCTION_TABLE_vii[$54 & 31]($65, $67 & ~($67 >> 31)); //@line 3604
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 130; //@line 3607
  HEAP32[$AsyncCtx + 4 >> 2] = $24; //@line 3609
  HEAP32[$AsyncCtx + 8 >> 2] = $13; //@line 3611
  sp = STACKTOP; //@line 3612
  return 0; //@line 3613
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 3615
 _equeue_mutex_unlock($24); //@line 3616
 return $13 | 0; //@line 3617
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_261($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 9101
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9103
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9105
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9107
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9109
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 9111
 $13 = HEAP32[HEAP32[$0 + 24 >> 2] >> 2] | 0; //@line 9114
 if (!$13) {
  $21 = HEAP32[$2 >> 2] | 0; //@line 9117
  $23 = $8 + 12 | 0; //@line 9119
  HEAP32[$8 >> 2] = 452; //@line 9120
  HEAP32[$8 + 4 >> 2] = 0; //@line 9122
  HEAP32[$8 + 8 >> 2] = $4; //@line 9124
  HEAP32[$23 >> 2] = 912; //@line 9125
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(24) | 0; //@line 9126
  __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($21, $4 + 1056 | 0, $8); //@line 9127
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 453; //@line 9130
   $24 = $ReallocAsyncCtx7 + 4 | 0; //@line 9131
   HEAP32[$24 >> 2] = $23; //@line 9132
   $25 = $ReallocAsyncCtx7 + 8 | 0; //@line 9133
   HEAP32[$25 >> 2] = $2; //@line 9134
   $26 = $ReallocAsyncCtx7 + 12 | 0; //@line 9135
   HEAP32[$26 >> 2] = $4; //@line 9136
   $27 = $ReallocAsyncCtx7 + 16 | 0; //@line 9137
   HEAP32[$27 >> 2] = $6; //@line 9138
   $28 = $ReallocAsyncCtx7 + 20 | 0; //@line 9139
   HEAP32[$28 >> 2] = $8; //@line 9140
   sp = STACKTOP; //@line 9141
   return;
  }
  ___async_unwind = 0; //@line 9144
  HEAP32[$ReallocAsyncCtx7 >> 2] = 453; //@line 9145
  $24 = $ReallocAsyncCtx7 + 4 | 0; //@line 9146
  HEAP32[$24 >> 2] = $23; //@line 9147
  $25 = $ReallocAsyncCtx7 + 8 | 0; //@line 9148
  HEAP32[$25 >> 2] = $2; //@line 9149
  $26 = $ReallocAsyncCtx7 + 12 | 0; //@line 9150
  HEAP32[$26 >> 2] = $4; //@line 9151
  $27 = $ReallocAsyncCtx7 + 16 | 0; //@line 9152
  HEAP32[$27 >> 2] = $6; //@line 9153
  $28 = $ReallocAsyncCtx7 + 20 | 0; //@line 9154
  HEAP32[$28 >> 2] = $8; //@line 9155
  sp = STACKTOP; //@line 9156
  return;
 } else {
  $16 = HEAP32[$13 + 8 >> 2] | 0; //@line 9160
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 9161
  FUNCTION_TABLE_vi[$16 & 1023]($10); //@line 9162
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 451; //@line 9165
   $17 = $ReallocAsyncCtx3 + 4 | 0; //@line 9166
   HEAP32[$17 >> 2] = $2; //@line 9167
   $18 = $ReallocAsyncCtx3 + 8 | 0; //@line 9168
   HEAP32[$18 >> 2] = $4; //@line 9169
   $19 = $ReallocAsyncCtx3 + 12 | 0; //@line 9170
   HEAP32[$19 >> 2] = $8; //@line 9171
   $20 = $ReallocAsyncCtx3 + 16 | 0; //@line 9172
   HEAP32[$20 >> 2] = $6; //@line 9173
   sp = STACKTOP; //@line 9174
   return;
  }
  ___async_unwind = 0; //@line 9177
  HEAP32[$ReallocAsyncCtx3 >> 2] = 451; //@line 9178
  $17 = $ReallocAsyncCtx3 + 4 | 0; //@line 9179
  HEAP32[$17 >> 2] = $2; //@line 9180
  $18 = $ReallocAsyncCtx3 + 8 | 0; //@line 9181
  HEAP32[$18 >> 2] = $4; //@line 9182
  $19 = $ReallocAsyncCtx3 + 12 | 0; //@line 9183
  HEAP32[$19 >> 2] = $8; //@line 9184
  $20 = $ReallocAsyncCtx3 + 16 | 0; //@line 9185
  HEAP32[$20 >> 2] = $6; //@line 9186
  sp = STACKTOP; //@line 9187
  return;
 }
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $12 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $29 = 0, $3 = 0, $36 = 0, $39 = 0, $40 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx14 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, sp = 0;
 sp = STACKTOP; //@line 15979
 STACKTOP = STACKTOP + 48 | 0; //@line 15980
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 15980
 $vararg_buffer10 = sp + 32 | 0; //@line 15981
 $vararg_buffer7 = sp + 24 | 0; //@line 15982
 $vararg_buffer3 = sp + 16 | 0; //@line 15983
 $vararg_buffer = sp; //@line 15984
 $0 = sp + 36 | 0; //@line 15985
 $1 = ___cxa_get_globals_fast() | 0; //@line 15986
 if ($1 | 0) {
  $3 = HEAP32[$1 >> 2] | 0; //@line 15989
  if ($3 | 0) {
   $7 = $3 + 48 | 0; //@line 15994
   $9 = HEAP32[$7 >> 2] | 0; //@line 15996
   $12 = HEAP32[$7 + 4 >> 2] | 0; //@line 15999
   if (!(($9 & -256 | 0) == 1126902528 & ($12 | 0) == 1129074247)) {
    HEAP32[$vararg_buffer7 >> 2] = 19122; //@line 16005
    _abort_message(19072, $vararg_buffer7); //@line 16006
   }
   if (($9 | 0) == 1126902529 & ($12 | 0) == 1129074247) {
    $22 = HEAP32[$3 + 44 >> 2] | 0; //@line 16015
   } else {
    $22 = $3 + 80 | 0; //@line 16017
   }
   HEAP32[$0 >> 2] = $22; //@line 16019
   $23 = HEAP32[$3 >> 2] | 0; //@line 16020
   $25 = HEAP32[$23 + 4 >> 2] | 0; //@line 16022
   $28 = HEAP32[(HEAP32[110] | 0) + 16 >> 2] | 0; //@line 16025
   $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 16026
   $29 = FUNCTION_TABLE_iiii[$28 & 15](440, $23, $0) | 0; //@line 16027
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 703; //@line 16030
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 16032
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer3; //@line 16034
    HEAP32[$AsyncCtx + 12 >> 2] = $25; //@line 16036
    HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer3; //@line 16038
    HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer; //@line 16040
    HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer; //@line 16042
    sp = STACKTOP; //@line 16043
    STACKTOP = sp; //@line 16044
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 16046
   if (!$29) {
    HEAP32[$vararg_buffer3 >> 2] = 19122; //@line 16048
    HEAP32[$vararg_buffer3 + 4 >> 2] = $25; //@line 16050
    _abort_message(19031, $vararg_buffer3); //@line 16051
   }
   $36 = HEAP32[$0 >> 2] | 0; //@line 16054
   $39 = HEAP32[(HEAP32[$36 >> 2] | 0) + 8 >> 2] | 0; //@line 16057
   $AsyncCtx14 = _emscripten_alloc_async_context(16, sp) | 0; //@line 16058
   $40 = FUNCTION_TABLE_ii[$39 & 15]($36) | 0; //@line 16059
   if (___async) {
    HEAP32[$AsyncCtx14 >> 2] = 704; //@line 16062
    HEAP32[$AsyncCtx14 + 4 >> 2] = $vararg_buffer; //@line 16064
    HEAP32[$AsyncCtx14 + 8 >> 2] = $25; //@line 16066
    HEAP32[$AsyncCtx14 + 12 >> 2] = $vararg_buffer; //@line 16068
    sp = STACKTOP; //@line 16069
    STACKTOP = sp; //@line 16070
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 16072
    HEAP32[$vararg_buffer >> 2] = 19122; //@line 16073
    HEAP32[$vararg_buffer + 4 >> 2] = $25; //@line 16075
    HEAP32[$vararg_buffer + 8 >> 2] = $40; //@line 16077
    _abort_message(18986, $vararg_buffer); //@line 16078
   }
  }
 }
 _abort_message(19110, $vararg_buffer10); //@line 16083
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_393($0) {
 $0 = $0 | 0;
 var $$expand_i1_val = 0, $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 28494
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28496
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28498
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28500
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28502
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28504
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28506
 if ((HEAP32[___async_retval >> 2] | 0) >= ($2 | 0)) {
  $25 = HEAP32[(HEAP32[$8 >> 2] | 0) + 8 >> 2] | 0; //@line 28513
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 28514
  FUNCTION_TABLE_vi[$25 & 1023]($8); //@line 28515
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 68; //@line 28518
   $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 28519
   HEAP32[$26 >> 2] = $10; //@line 28520
   $27 = $ReallocAsyncCtx2 + 8 | 0; //@line 28521
   HEAP32[$27 >> 2] = $12; //@line 28522
   $28 = $ReallocAsyncCtx2 + 12 | 0; //@line 28523
   $$expand_i1_val = 1; //@line 28524
   HEAP8[$28 >> 0] = $$expand_i1_val; //@line 28525
   sp = STACKTOP; //@line 28526
   return;
  }
  ___async_unwind = 0; //@line 28529
  HEAP32[$ReallocAsyncCtx2 >> 2] = 68; //@line 28530
  $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 28531
  HEAP32[$26 >> 2] = $10; //@line 28532
  $27 = $ReallocAsyncCtx2 + 8 | 0; //@line 28533
  HEAP32[$27 >> 2] = $12; //@line 28534
  $28 = $ReallocAsyncCtx2 + 12 | 0; //@line 28535
  $$expand_i1_val = 1; //@line 28536
  HEAP8[$28 >> 0] = $$expand_i1_val; //@line 28537
  sp = STACKTOP; //@line 28538
  return;
 }
 _mbed_tracef(16, 10968, 11134, $4); //@line 28541
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 28542
 $14 = __ZN4mbed5Timer7read_msEv($10) | 0; //@line 28543
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 67; //@line 28546
  $15 = $ReallocAsyncCtx5 + 4 | 0; //@line 28547
  HEAP32[$15 >> 2] = $2; //@line 28548
  $16 = $ReallocAsyncCtx5 + 8 | 0; //@line 28549
  HEAP32[$16 >> 2] = $4; //@line 28550
  $17 = $ReallocAsyncCtx5 + 12 | 0; //@line 28551
  HEAP32[$17 >> 2] = $6; //@line 28552
  $18 = $ReallocAsyncCtx5 + 16 | 0; //@line 28553
  HEAP32[$18 >> 2] = $8; //@line 28554
  $19 = $ReallocAsyncCtx5 + 20 | 0; //@line 28555
  HEAP32[$19 >> 2] = $10; //@line 28556
  $20 = $ReallocAsyncCtx5 + 24 | 0; //@line 28557
  HEAP32[$20 >> 2] = $12; //@line 28558
  sp = STACKTOP; //@line 28559
  return;
 }
 HEAP32[___async_retval >> 2] = $14; //@line 28563
 ___async_unwind = 0; //@line 28564
 HEAP32[$ReallocAsyncCtx5 >> 2] = 67; //@line 28565
 $15 = $ReallocAsyncCtx5 + 4 | 0; //@line 28566
 HEAP32[$15 >> 2] = $2; //@line 28567
 $16 = $ReallocAsyncCtx5 + 8 | 0; //@line 28568
 HEAP32[$16 >> 2] = $4; //@line 28569
 $17 = $ReallocAsyncCtx5 + 12 | 0; //@line 28570
 HEAP32[$17 >> 2] = $6; //@line 28571
 $18 = $ReallocAsyncCtx5 + 16 | 0; //@line 28572
 HEAP32[$18 >> 2] = $8; //@line 28573
 $19 = $ReallocAsyncCtx5 + 20 | 0; //@line 28574
 HEAP32[$19 >> 2] = $10; //@line 28575
 $20 = $ReallocAsyncCtx5 + 24 | 0; //@line 28576
 HEAP32[$20 >> 2] = $12; //@line 28577
 sp = STACKTOP; //@line 28578
 return;
}
function __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy = 0, $2 = 0, $20 = 0, $21 = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 17705
 STACKTOP = STACKTOP + 16 | 0; //@line 17706
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 17706
 $$byval_copy = sp; //@line 17707
 $2 = sp + 8 | 0; //@line 17708
 $4 = $0 + 360 | 0; //@line 17710
 $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 17711
 $5 = __ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params($0 + 348 | 0, $1, $4) | 0; //@line 17712
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 477; //@line 17715
  HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 17717
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 17719
  HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 17721
  HEAP32[$AsyncCtx + 16 >> 2] = $$byval_copy; //@line 17723
  HEAP32[$AsyncCtx + 20 >> 2] = $$byval_copy; //@line 17725
  HEAP32[$AsyncCtx + 24 >> 2] = $0; //@line 17727
  sp = STACKTOP; //@line 17728
  STACKTOP = sp; //@line 17729
  return 0; //@line 17729
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 17731
 if ($5 | 0) {
  STACKTOP = sp; //@line 17734
  return $5 | 0; //@line 17734
 }
 if ((HEAP32[$4 >> 2] | 0) != 2) {
  STACKTOP = sp; //@line 17739
  return $5 | 0; //@line 17739
 }
 switch (HEAP32[$1 >> 2] | 0) {
 case 0:
  {
   break;
  }
 case 10:
  {
   label = 6; //@line 17747
   break;
  }
 default:
  {
   STACKTOP = sp; //@line 17751
   return $5 | 0; //@line 17751
  }
 }
 if ((label | 0) == 6) {
  if (!(HEAP8[$0 + 372 >> 0] | 0)) {
   STACKTOP = sp; //@line 17759
   return $5 | 0; //@line 17759
  }
 }
 _mbed_tracef(16, 13728, 13747, $$byval_copy); //@line 17762
 $20 = HEAP32[$0 + 1328 >> 2] | 0; //@line 17764
 HEAP32[$2 >> 2] = 293; //@line 17765
 HEAP32[$2 + 4 >> 2] = 0; //@line 17767
 $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 17768
 HEAP32[$$byval_copy >> 2] = HEAP32[$2 >> 2]; //@line 17769
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 17769
 $21 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($20, $0, $$byval_copy) | 0; //@line 17770
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 478; //@line 17773
  HEAP32[$AsyncCtx3 + 4 >> 2] = $2; //@line 17775
  HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 17777
  HEAP32[$AsyncCtx3 + 12 >> 2] = $5; //@line 17779
  sp = STACKTOP; //@line 17780
  STACKTOP = sp; //@line 17781
  return 0; //@line 17781
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 17783
 do {
  if (!$21) {
   $AsyncCtx7 = _emscripten_alloc_async_context(16, sp) | 0; //@line 17787
   _mbed_assert_internal(13612, 13621, 215); //@line 17788
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 479; //@line 17791
    HEAP32[$AsyncCtx7 + 4 >> 2] = $2; //@line 17793
    HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 17795
    HEAP32[$AsyncCtx7 + 12 >> 2] = $5; //@line 17797
    sp = STACKTOP; //@line 17798
    STACKTOP = sp; //@line 17799
    return 0; //@line 17799
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 17801
    break;
   }
  }
 } while (0);
 HEAP32[$0 + 364 >> 2] = 2; //@line 17807
 STACKTOP = sp; //@line 17808
 return $5 | 0; //@line 17808
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_64($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $23 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 21279
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21283
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21285
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21287
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21289
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 21291
 $12 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 21292
 if ($12 | 0) {
  $15 = HEAP32[$12 + 8 >> 2] | 0; //@line 21296
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 21297
  FUNCTION_TABLE_vi[$15 & 1023]($4); //@line 21298
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 179; //@line 21301
   $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 21302
   HEAP32[$16 >> 2] = $AsyncRetVal; //@line 21303
   $17 = $ReallocAsyncCtx4 + 8 | 0; //@line 21304
   HEAP32[$17 >> 2] = $6; //@line 21305
   $18 = $ReallocAsyncCtx4 + 12 | 0; //@line 21306
   HEAP32[$18 >> 2] = $8; //@line 21307
   $19 = $ReallocAsyncCtx4 + 16 | 0; //@line 21308
   HEAP32[$19 >> 2] = $10; //@line 21309
   sp = STACKTOP; //@line 21310
   return;
  }
  ___async_unwind = 0; //@line 21313
  HEAP32[$ReallocAsyncCtx4 >> 2] = 179; //@line 21314
  $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 21315
  HEAP32[$16 >> 2] = $AsyncRetVal; //@line 21316
  $17 = $ReallocAsyncCtx4 + 8 | 0; //@line 21317
  HEAP32[$17 >> 2] = $6; //@line 21318
  $18 = $ReallocAsyncCtx4 + 12 | 0; //@line 21319
  HEAP32[$18 >> 2] = $8; //@line 21320
  $19 = $ReallocAsyncCtx4 + 16 | 0; //@line 21321
  HEAP32[$19 >> 2] = $10; //@line 21322
  sp = STACKTOP; //@line 21323
  return;
 }
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 21328
  _mbed_assert_internal(13612, 12396, 902); //@line 21329
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 180; //@line 21332
   $21 = $ReallocAsyncCtx8 + 4 | 0; //@line 21333
   HEAP32[$21 >> 2] = $6; //@line 21334
   $22 = $ReallocAsyncCtx8 + 8 | 0; //@line 21335
   HEAP32[$22 >> 2] = $8; //@line 21336
   $23 = $ReallocAsyncCtx8 + 12 | 0; //@line 21337
   HEAP32[$23 >> 2] = $10; //@line 21338
   sp = STACKTOP; //@line 21339
   return;
  }
  ___async_unwind = 0; //@line 21342
  HEAP32[$ReallocAsyncCtx8 >> 2] = 180; //@line 21343
  $21 = $ReallocAsyncCtx8 + 4 | 0; //@line 21344
  HEAP32[$21 >> 2] = $6; //@line 21345
  $22 = $ReallocAsyncCtx8 + 8 | 0; //@line 21346
  HEAP32[$22 >> 2] = $8; //@line 21347
  $23 = $ReallocAsyncCtx8 + 12 | 0; //@line 21348
  HEAP32[$23 >> 2] = $10; //@line 21349
  sp = STACKTOP; //@line 21350
  return;
 }
 if (!(HEAP8[$6 + 11 >> 0] | 0)) {
  return;
 }
 $27 = HEAP8[$8 >> 0] | 0; //@line 21359
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 21360
 __ZN12LoRaWANStack9handle_txEhPKhth($10, $27, 0, 0, 2) | 0; //@line 21361
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 181; //@line 21364
  sp = STACKTOP; //@line 21365
  return;
 }
 ___async_unwind = 0; //@line 21368
 HEAP32[$ReallocAsyncCtx5 >> 2] = 181; //@line 21369
 sp = STACKTOP; //@line 21370
 return;
}
function __ZN18LoRaMacChannelPlan11remove_planEv($0) {
 $0 = $0 | 0;
 var $10 = 0, $21 = 0, $24 = 0, $26 = 0, $32 = 0, $39 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $indvars$iv = 0, $indvars$iv$next = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 18655
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
  $39 = -1002; //@line 18659
  return $39 | 0; //@line 18660
 }
 $4 = __ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0; //@line 18663
 $6 = __ZN7LoRaPHY16get_channel_maskEb(HEAP32[$0 >> 2] | 0, 0) | 0; //@line 18665
 $8 = __ZN7LoRaPHY16get_channel_maskEb(HEAP32[$0 >> 2] | 0, 1) | 0; //@line 18667
 if (!($4 << 24 >> 24)) {
  $39 = 0; //@line 18670
  return $39 | 0; //@line 18671
 }
 $10 = $4 & 255; //@line 18673
 $indvars$iv = 0; //@line 18674
 while (1) {
  if (!(__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$0 >> 2] | 0, $8, $indvars$iv) | 0)) {
   if (__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$0 >> 2] | 0, $6, $indvars$iv) | 0) {
    if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
     $39 = -1002; //@line 18685
     label = 15; //@line 18686
     break;
    }
    if ($indvars$iv >>> 0 >= ((__ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0) & 255) >>> 0) {
     $39 = -1003; //@line 18694
     label = 15; //@line 18695
     break;
    }
    $21 = HEAP32[$0 >> 2] | 0; //@line 18698
    $24 = HEAP32[(HEAP32[$21 >> 2] | 0) + 64 >> 2] | 0; //@line 18701
    $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 18703
    $26 = FUNCTION_TABLE_iii[$24 & 31]($21, $indvars$iv & 255) | 0; //@line 18704
    if (___async) {
     label = 9; //@line 18707
     break;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 18710
    if (!$26) {
     $39 = -1003; //@line 18712
     label = 15; //@line 18713
     break;
    }
    $32 = HEAP32[$0 >> 2] | 0; //@line 18716
    $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 18717
    __ZN7LoRaPHY18put_radio_to_sleepEv($32); //@line 18718
    if (___async) {
     label = 12; //@line 18721
     break;
    }
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 18724
   }
  }
  $indvars$iv$next = $indvars$iv + 1 | 0; //@line 18727
  if ($indvars$iv$next >>> 0 < $10 >>> 0) {
   $indvars$iv = $indvars$iv$next; //@line 18730
  } else {
   $39 = 0; //@line 18732
   label = 15; //@line 18733
   break;
  }
 }
 if ((label | 0) == 9) {
  HEAP32[$AsyncCtx >> 2] = 500; //@line 18738
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 18740
  HEAP32[$AsyncCtx + 8 >> 2] = $indvars$iv; //@line 18742
  HEAP32[$AsyncCtx + 12 >> 2] = $10; //@line 18744
  HEAP32[$AsyncCtx + 16 >> 2] = $8; //@line 18746
  HEAP32[$AsyncCtx + 20 >> 2] = $6; //@line 18748
  sp = STACKTOP; //@line 18749
  return 0; //@line 18750
 } else if ((label | 0) == 12) {
  HEAP32[$AsyncCtx2 >> 2] = 501; //@line 18753
  HEAP32[$AsyncCtx2 + 4 >> 2] = $indvars$iv; //@line 18755
  HEAP32[$AsyncCtx2 + 8 >> 2] = $10; //@line 18757
  HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 18759
  HEAP32[$AsyncCtx2 + 16 >> 2] = $8; //@line 18761
  HEAP32[$AsyncCtx2 + 20 >> 2] = $6; //@line 18763
  sp = STACKTOP; //@line 18764
  return 0; //@line 18765
 } else if ((label | 0) == 15) {
  return $39 | 0; //@line 18768
 }
 return 0; //@line 18770
}
function _mbed_error_vfprintf__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 28696
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28698
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28700
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 28702
 if (($AsyncRetVal | 0) <= 0) {
  return;
 }
 if (!(HEAP32[5885] | 0)) {
  _serial_init(23544, 2, 3); //@line 28710
 }
 $9 = HEAP8[$4 >> 0] | 0; //@line 28712
 if (0 == 13 | $9 << 24 >> 24 != 10) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 28718
  _serial_putc(23544, $9 << 24 >> 24); //@line 28719
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 648; //@line 28722
   $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 28723
   HEAP32[$18 >> 2] = 0; //@line 28724
   $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 28725
   HEAP32[$19 >> 2] = $AsyncRetVal; //@line 28726
   $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 28727
   HEAP32[$20 >> 2] = $2; //@line 28728
   $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 28729
   HEAP8[$21 >> 0] = $9; //@line 28730
   $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 28731
   HEAP32[$22 >> 2] = $4; //@line 28732
   sp = STACKTOP; //@line 28733
   return;
  }
  ___async_unwind = 0; //@line 28736
  HEAP32[$ReallocAsyncCtx2 >> 2] = 648; //@line 28737
  $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 28738
  HEAP32[$18 >> 2] = 0; //@line 28739
  $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 28740
  HEAP32[$19 >> 2] = $AsyncRetVal; //@line 28741
  $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 28742
  HEAP32[$20 >> 2] = $2; //@line 28743
  $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 28744
  HEAP8[$21 >> 0] = $9; //@line 28745
  $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 28746
  HEAP32[$22 >> 2] = $4; //@line 28747
  sp = STACKTOP; //@line 28748
  return;
 } else {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 28751
  _serial_putc(23544, 13); //@line 28752
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 647; //@line 28755
   $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 28756
   HEAP8[$12 >> 0] = $9; //@line 28757
   $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 28758
   HEAP32[$13 >> 2] = 0; //@line 28759
   $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 28760
   HEAP32[$14 >> 2] = $AsyncRetVal; //@line 28761
   $15 = $ReallocAsyncCtx3 + 16 | 0; //@line 28762
   HEAP32[$15 >> 2] = $2; //@line 28763
   $16 = $ReallocAsyncCtx3 + 20 | 0; //@line 28764
   HEAP32[$16 >> 2] = $4; //@line 28765
   sp = STACKTOP; //@line 28766
   return;
  }
  ___async_unwind = 0; //@line 28769
  HEAP32[$ReallocAsyncCtx3 >> 2] = 647; //@line 28770
  $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 28771
  HEAP8[$12 >> 0] = $9; //@line 28772
  $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 28773
  HEAP32[$13 >> 2] = 0; //@line 28774
  $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 28775
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 28776
  $15 = $ReallocAsyncCtx3 + 16 | 0; //@line 28777
  HEAP32[$15 >> 2] = $2; //@line 28778
  $16 = $ReallocAsyncCtx3 + 20 | 0; //@line 28779
  HEAP32[$16 >> 2] = $4; //@line 28780
  sp = STACKTOP; //@line 28781
  return;
 }
}
function _mbed_error_vfprintf__async_cb_396($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 28789
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28793
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28795
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28799
 $12 = (HEAP32[$0 + 4 >> 2] | 0) + 1 | 0; //@line 28800
 if (($12 | 0) == ($4 | 0)) {
  return;
 }
 $13 = HEAP8[$10 + $12 >> 0] | 0; //@line 28806
 if ((HEAP8[$0 + 16 >> 0] | 0) == 13 | $13 << 24 >> 24 != 10) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 28812
  _serial_putc(23544, $13 << 24 >> 24); //@line 28813
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 648; //@line 28816
   $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 28817
   HEAP32[$22 >> 2] = $12; //@line 28818
   $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 28819
   HEAP32[$23 >> 2] = $4; //@line 28820
   $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 28821
   HEAP32[$24 >> 2] = $6; //@line 28822
   $25 = $ReallocAsyncCtx2 + 16 | 0; //@line 28823
   HEAP8[$25 >> 0] = $13; //@line 28824
   $26 = $ReallocAsyncCtx2 + 20 | 0; //@line 28825
   HEAP32[$26 >> 2] = $10; //@line 28826
   sp = STACKTOP; //@line 28827
   return;
  }
  ___async_unwind = 0; //@line 28830
  HEAP32[$ReallocAsyncCtx2 >> 2] = 648; //@line 28831
  $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 28832
  HEAP32[$22 >> 2] = $12; //@line 28833
  $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 28834
  HEAP32[$23 >> 2] = $4; //@line 28835
  $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 28836
  HEAP32[$24 >> 2] = $6; //@line 28837
  $25 = $ReallocAsyncCtx2 + 16 | 0; //@line 28838
  HEAP8[$25 >> 0] = $13; //@line 28839
  $26 = $ReallocAsyncCtx2 + 20 | 0; //@line 28840
  HEAP32[$26 >> 2] = $10; //@line 28841
  sp = STACKTOP; //@line 28842
  return;
 } else {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 28845
  _serial_putc(23544, 13); //@line 28846
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 647; //@line 28849
   $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 28850
   HEAP8[$16 >> 0] = $13; //@line 28851
   $17 = $ReallocAsyncCtx3 + 8 | 0; //@line 28852
   HEAP32[$17 >> 2] = $12; //@line 28853
   $18 = $ReallocAsyncCtx3 + 12 | 0; //@line 28854
   HEAP32[$18 >> 2] = $4; //@line 28855
   $19 = $ReallocAsyncCtx3 + 16 | 0; //@line 28856
   HEAP32[$19 >> 2] = $6; //@line 28857
   $20 = $ReallocAsyncCtx3 + 20 | 0; //@line 28858
   HEAP32[$20 >> 2] = $10; //@line 28859
   sp = STACKTOP; //@line 28860
   return;
  }
  ___async_unwind = 0; //@line 28863
  HEAP32[$ReallocAsyncCtx3 >> 2] = 647; //@line 28864
  $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 28865
  HEAP8[$16 >> 0] = $13; //@line 28866
  $17 = $ReallocAsyncCtx3 + 8 | 0; //@line 28867
  HEAP32[$17 >> 2] = $12; //@line 28868
  $18 = $ReallocAsyncCtx3 + 12 | 0; //@line 28869
  HEAP32[$18 >> 2] = $4; //@line 28870
  $19 = $ReallocAsyncCtx3 + 16 | 0; //@line 28871
  HEAP32[$19 >> 2] = $6; //@line 28872
  $20 = $ReallocAsyncCtx3 + 20 | 0; //@line 28873
  HEAP32[$20 >> 2] = $10; //@line 28874
  sp = STACKTOP; //@line 28875
  return;
 }
}
function __ZN12LoRaWANStack9handle_txEhPKhth__async_cb($0) {
 $0 = $0 | 0;
 var $$0$i34 = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $23 = 0, $25 = 0, $29 = 0, $30 = 0, $31 = 0, $50 = 0, $55 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 26052
 $6 = HEAP16[$0 + 12 >> 1] | 0; //@line 26058
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26060
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26064
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26066
 $16 = HEAP8[$0 + 32 >> 0] & 1; //@line 26069
 $trunc = HEAP8[$0 + 33 >> 0] | 0; //@line 26071
 $19 = HEAP32[$0 + 36 >> 2] | 0; //@line 26073
 $23 = HEAP32[$0 + 44 >> 2] | 0; //@line 26077
 $25 = HEAP32[$0 + 48 >> 2] | 0; //@line 26079
 $29 = (HEAP32[___async_retval >> 2] | 0) == -1010 ? HEAP8[HEAP32[$0 + 8 >> 2] >> 0] | 0 : HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 1 >> 0] | 0; //@line 26086
 $$0$i34 = $29 & 255; //@line 26087
 $30 = $29 & 255; //@line 26088
 $31 = $6 & 65535; //@line 26089
 if (($$0$i34 & 65535) < ($6 & 65535)) {
  HEAP32[$8 >> 2] = $31; //@line 26092
  HEAP32[$8 + 4 >> 2] = $30; //@line 26094
  _mbed_tracef(8, 12356, 13075, $8); //@line 26095
  HEAP16[$12 + 2232 >> 1] = $31 - $30; //@line 26099
  HEAP16[$12 + 2230 >> 1] = $$0$i34; //@line 26101
  _memcpy($12 + 1975 | 0, $14 | 0, $30 | 0) | 0; //@line 26103
 } else {
  HEAP16[$12 + 2230 >> 1] = $6; //@line 26106
  HEAP16[$12 + 2232 >> 1] = 0; //@line 26108
  if (!$16) {
   _memcpy($12 + 1975 | 0, $14 | 0, $31 | 0) | 0; //@line 26111
  }
 }
 switch ($trunc & 15) {
 case 9:
 case 5:
 case 1:
  {
   HEAP32[$12 + 1968 >> 2] = 0; //@line 26118
   HEAP8[$12 + 1972 >> 0] = HEAP8[$23 >> 0] | 0; //@line 26121
   switch ($trunc & 15) {
   case 6:
   case 2:
    {
     label = 8; //@line 26125
     break;
    }
   default:
    {}
   }
   break;
  }
 case 10:
 case 6:
 case 2:
  {
   label = 8; //@line 26134
   break;
  }
 default:
  {}
 }
 if ((label | 0) == 8) {
  HEAP32[$12 + 1968 >> 2] = 1; //@line 26142
  HEAP8[$12 + 1972 >> 0] = HEAP8[$23 >> 0] | 0; //@line 26145
  HEAP8[$12 + 1974 >> 0] = HEAP8[$12 + 2284 >> 0] | 0; //@line 26149
 }
 $50 = $12 + 2230 | 0; //@line 26151
 $55 = HEAPU16[$12 + 2232 >> 1] | 0; //@line 26156
 HEAP32[$19 >> 2] = HEAPU16[$50 >> 1]; //@line 26157
 HEAP32[$19 + 4 >> 2] = $55; //@line 26159
 _mbed_tracef(8, 12356, 13130, $19); //@line 26160
 HEAP32[$12 + 1876 >> 2] = 5; //@line 26162
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 26163
 $57 = __ZN12LoRaWANStack18lora_state_machineEv($12) | 0; //@line 26164
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 252; //@line 26167
  $58 = $ReallocAsyncCtx2 + 4 | 0; //@line 26168
  HEAP32[$58 >> 2] = $50; //@line 26169
  $59 = $ReallocAsyncCtx2 + 8 | 0; //@line 26170
  HEAP32[$59 >> 2] = $25; //@line 26171
  sp = STACKTOP; //@line 26172
  return;
 }
 HEAP32[___async_retval >> 2] = $57; //@line 26176
 ___async_unwind = 0; //@line 26177
 HEAP32[$ReallocAsyncCtx2 >> 2] = 252; //@line 26178
 $58 = $ReallocAsyncCtx2 + 4 | 0; //@line 26179
 HEAP32[$58 >> 2] = $50; //@line 26180
 $59 = $ReallocAsyncCtx2 + 8 | 0; //@line 26181
 HEAP32[$59 >> 2] = $25; //@line 26182
 sp = STACKTOP; //@line 26183
 return;
}
function __ZN18LoRaMacChannelPlan11remove_planEv__async_cb_14($0) {
 $0 = $0 | 0;
 var $10 = 0, $21 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $34 = 0, $35 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $indvars$iv$reg2mem$0 = 0, label = 0, sp = 0, $indvars$iv$reg2mem$0$looptemp = 0;
 sp = STACKTOP; //@line 18609
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18613
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18615
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18617
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18619
 $indvars$iv$reg2mem$0 = HEAP32[$0 + 4 >> 2] | 0; //@line 18620
 while (1) {
  $indvars$iv$reg2mem$0$looptemp = $indvars$iv$reg2mem$0;
  $indvars$iv$reg2mem$0 = $indvars$iv$reg2mem$0 + 1 | 0; //@line 18622
  if ($indvars$iv$reg2mem$0 >>> 0 >= $4 >>> 0) {
   $35 = 0; //@line 18625
   label = 11; //@line 18626
   break;
  }
  if (__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$6 >> 2] | 0, $8, $indvars$iv$reg2mem$0) | 0) {
   $indvars$iv$reg2mem$0 = $indvars$iv$reg2mem$0; //@line 18632
   continue;
  }
  if (__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$6 >> 2] | 0, $10, $indvars$iv$reg2mem$0) | 0) {
   break;
  }
 }
 if ((label | 0) == 11) {
  $34 = ___async_retval; //@line 18644
  HEAP32[$34 >> 2] = $35; //@line 18645
  return;
 }
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$6 >> 2] | 0) | 0)) {
  $35 = -1002; //@line 18651
  $34 = ___async_retval; //@line 18652
  HEAP32[$34 >> 2] = $35; //@line 18653
  return;
 }
 if ($indvars$iv$reg2mem$0 >>> 0 >= ((__ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$6 >> 2] | 0) | 0) & 255) >>> 0) {
  $35 = -1003; //@line 18661
  $34 = ___async_retval; //@line 18662
  HEAP32[$34 >> 2] = $35; //@line 18663
  return;
 }
 $21 = HEAP32[$6 >> 2] | 0; //@line 18666
 $24 = HEAP32[(HEAP32[$21 >> 2] | 0) + 64 >> 2] | 0; //@line 18669
 $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 18671
 $26 = FUNCTION_TABLE_iii[$24 & 31]($21, $indvars$iv$reg2mem$0 & 255) | 0; //@line 18672
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 500; //@line 18675
  $27 = $ReallocAsyncCtx + 4 | 0; //@line 18676
  HEAP32[$27 >> 2] = $6; //@line 18677
  $28 = $ReallocAsyncCtx + 8 | 0; //@line 18678
  HEAP32[$28 >> 2] = $indvars$iv$reg2mem$0; //@line 18679
  $29 = $ReallocAsyncCtx + 12 | 0; //@line 18680
  HEAP32[$29 >> 2] = $4; //@line 18681
  $30 = $ReallocAsyncCtx + 16 | 0; //@line 18682
  HEAP32[$30 >> 2] = $8; //@line 18683
  $31 = $ReallocAsyncCtx + 20 | 0; //@line 18684
  HEAP32[$31 >> 2] = $10; //@line 18685
  sp = STACKTOP; //@line 18686
  return;
 }
 HEAP8[___async_retval >> 0] = $26 & 1; //@line 18691
 ___async_unwind = 0; //@line 18692
 HEAP32[$ReallocAsyncCtx >> 2] = 500; //@line 18693
 $27 = $ReallocAsyncCtx + 4 | 0; //@line 18694
 HEAP32[$27 >> 2] = $6; //@line 18695
 $28 = $ReallocAsyncCtx + 8 | 0; //@line 18696
 HEAP32[$28 >> 2] = $indvars$iv$reg2mem$0; //@line 18697
 $29 = $ReallocAsyncCtx + 12 | 0; //@line 18698
 HEAP32[$29 >> 2] = $4; //@line 18699
 $30 = $ReallocAsyncCtx + 16 | 0; //@line 18700
 HEAP32[$30 >> 2] = $8; //@line 18701
 $31 = $ReallocAsyncCtx + 20 | 0; //@line 18702
 HEAP32[$31 >> 2] = $10; //@line 18703
 sp = STACKTOP; //@line 18704
 return;
}
function __Z22compute_join_frame_micPKhtS0_Pj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $12 = 0, $19 = 0, $22 = 0, $4 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 20946
 _mbedtls_cipher_init(23188); //@line 20947
 $4 = _mbedtls_cipher_info_from_type(2) | 0; //@line 20948
 if (!$4) {
  $$0 = -24960; //@line 20951
 } else {
  $AsyncCtx11 = _emscripten_alloc_async_context(20, sp) | 0; //@line 20953
  $6 = _mbedtls_cipher_setup(23188, $4) | 0; //@line 20954
  if (___async) {
   HEAP32[$AsyncCtx11 >> 2] = 515; //@line 20957
   HEAP32[$AsyncCtx11 + 4 >> 2] = $2; //@line 20959
   HEAP16[$AsyncCtx11 + 8 >> 1] = $1; //@line 20961
   HEAP32[$AsyncCtx11 + 12 >> 2] = $0; //@line 20963
   HEAP32[$AsyncCtx11 + 16 >> 2] = $3; //@line 20965
   sp = STACKTOP; //@line 20966
   return 0; //@line 20967
  }
  _emscripten_free_async_context($AsyncCtx11 | 0); //@line 20969
  if (!$6) {
   $AsyncCtx7 = _emscripten_alloc_async_context(16, sp) | 0; //@line 20972
   $12 = _mbedtls_cipher_cmac_starts(23188, $2, 128) | 0; //@line 20973
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 516; //@line 20976
    HEAP16[$AsyncCtx7 + 4 >> 1] = $1; //@line 20978
    HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 20980
    HEAP32[$AsyncCtx7 + 12 >> 2] = $3; //@line 20982
    sp = STACKTOP; //@line 20983
    return 0; //@line 20984
   }
   _emscripten_free_async_context($AsyncCtx7 | 0); //@line 20986
   if (!$12) {
    $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 20991
    $19 = _mbedtls_cipher_cmac_update(23188, $0, $1 & 255) | 0; //@line 20992
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 517; //@line 20995
     HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 20997
     sp = STACKTOP; //@line 20998
     return 0; //@line 20999
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 21001
    if (!$19) {
     $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 21004
     $22 = _mbedtls_cipher_cmac_finish(23188, 24500) | 0; //@line 21005
     if (___async) {
      HEAP32[$AsyncCtx3 >> 2] = 518; //@line 21008
      HEAP32[$AsyncCtx3 + 4 >> 2] = $3; //@line 21010
      sp = STACKTOP; //@line 21011
      return 0; //@line 21012
     }
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 21014
     if (!$22) {
      HEAP32[$3 >> 2] = (HEAPU8[24502] | 0) << 16 | (HEAPU8[24503] | 0) << 24 | (HEAPU8[24501] | 0) << 8 | (HEAPU8[24500] | 0); //@line 21031
      $$0 = 0; //@line 21032
     } else {
      $$0 = $22; //@line 21034
     }
    } else {
     $$0 = $19; //@line 21037
    }
   } else {
    $$0 = $12; //@line 21040
   }
  } else {
   $$0 = $6; //@line 21043
  }
 }
 $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 21046
 _mbedtls_cipher_free(23188); //@line 21047
 if (___async) {
  HEAP32[$AsyncCtx15 >> 2] = 519; //@line 21050
  HEAP32[$AsyncCtx15 + 4 >> 2] = $$0; //@line 21052
  sp = STACKTOP; //@line 21053
  return 0; //@line 21054
 } else {
  _emscripten_free_async_context($AsyncCtx15 | 0); //@line 21056
  return $$0 | 0; //@line 21057
 }
 return 0; //@line 21059
}
function ___stdio_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $12 = 0, $13 = 0, $17 = 0, $20 = 0, $25 = 0, $27 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $44 = 0, $5 = 0, $7 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10872
 STACKTOP = STACKTOP + 48 | 0; //@line 10873
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 10873
 $vararg_buffer3 = sp + 16 | 0; //@line 10874
 $vararg_buffer = sp; //@line 10875
 $3 = sp + 32 | 0; //@line 10876
 $4 = $0 + 28 | 0; //@line 10877
 $5 = HEAP32[$4 >> 2] | 0; //@line 10878
 HEAP32[$3 >> 2] = $5; //@line 10879
 $7 = $0 + 20 | 0; //@line 10881
 $9 = (HEAP32[$7 >> 2] | 0) - $5 | 0; //@line 10883
 HEAP32[$3 + 4 >> 2] = $9; //@line 10884
 HEAP32[$3 + 8 >> 2] = $1; //@line 10886
 HEAP32[$3 + 12 >> 2] = $2; //@line 10888
 $12 = $9 + $2 | 0; //@line 10889
 $13 = $0 + 60 | 0; //@line 10890
 HEAP32[$vararg_buffer >> 2] = HEAP32[$13 >> 2]; //@line 10893
 HEAP32[$vararg_buffer + 4 >> 2] = $3; //@line 10895
 HEAP32[$vararg_buffer + 8 >> 2] = 2; //@line 10897
 $17 = ___syscall_ret(___syscall146(146, $vararg_buffer | 0) | 0) | 0; //@line 10899
 L1 : do {
  if (($12 | 0) == ($17 | 0)) {
   label = 3; //@line 10903
  } else {
   $$04756 = 2; //@line 10905
   $$04855 = $12; //@line 10905
   $$04954 = $3; //@line 10905
   $27 = $17; //@line 10905
   while (1) {
    if (($27 | 0) < 0) {
     break;
    }
    $$04855 = $$04855 - $27 | 0; //@line 10911
    $37 = HEAP32[$$04954 + 4 >> 2] | 0; //@line 10913
    $38 = $27 >>> 0 > $37 >>> 0; //@line 10914
    $$150 = $38 ? $$04954 + 8 | 0 : $$04954; //@line 10916
    $$1 = $$04756 + ($38 << 31 >> 31) | 0; //@line 10918
    $$0 = $27 - ($38 ? $37 : 0) | 0; //@line 10920
    HEAP32[$$150 >> 2] = (HEAP32[$$150 >> 2] | 0) + $$0; //@line 10923
    $44 = $$150 + 4 | 0; //@line 10924
    HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) - $$0; //@line 10927
    HEAP32[$vararg_buffer3 >> 2] = HEAP32[$13 >> 2]; //@line 10930
    HEAP32[$vararg_buffer3 + 4 >> 2] = $$150; //@line 10932
    HEAP32[$vararg_buffer3 + 8 >> 2] = $$1; //@line 10934
    $27 = ___syscall_ret(___syscall146(146, $vararg_buffer3 | 0) | 0) | 0; //@line 10936
    if (($$04855 | 0) == ($27 | 0)) {
     label = 3; //@line 10939
     break L1;
    } else {
     $$04756 = $$1; //@line 10942
     $$04954 = $$150; //@line 10942
    }
   }
   HEAP32[$0 + 16 >> 2] = 0; //@line 10946
   HEAP32[$4 >> 2] = 0; //@line 10947
   HEAP32[$7 >> 2] = 0; //@line 10948
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 32; //@line 10951
   if (($$04756 | 0) == 2) {
    $$051 = 0; //@line 10954
   } else {
    $$051 = $2 - (HEAP32[$$04954 + 4 >> 2] | 0) | 0; //@line 10959
   }
  }
 } while (0);
 if ((label | 0) == 3) {
  $20 = HEAP32[$0 + 44 >> 2] | 0; //@line 10965
  HEAP32[$0 + 16 >> 2] = $20 + (HEAP32[$0 + 48 >> 2] | 0); //@line 10970
  $25 = $20; //@line 10971
  HEAP32[$4 >> 2] = $25; //@line 10972
  HEAP32[$7 >> 2] = $25; //@line 10973
  $$051 = $2; //@line 10974
 }
 STACKTOP = sp; //@line 10976
 return $$051 | 0; //@line 10976
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_414($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx29 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 31934
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31936
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31938
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31940
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31942
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31944
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx29 = _emscripten_realloc_async_context(24) | 0; //@line 31949
  _mbed_assert_internal(13612, 13621, 199); //@line 31950
  if (___async) {
   HEAP32[$ReallocAsyncCtx29 >> 2] = 350; //@line 31953
   $13 = $ReallocAsyncCtx29 + 4 | 0; //@line 31954
   HEAP32[$13 >> 2] = $2; //@line 31955
   $14 = $ReallocAsyncCtx29 + 8 | 0; //@line 31956
   HEAP32[$14 >> 2] = $4; //@line 31957
   $15 = $ReallocAsyncCtx29 + 12 | 0; //@line 31958
   HEAP32[$15 >> 2] = $6; //@line 31959
   $16 = $ReallocAsyncCtx29 + 16 | 0; //@line 31960
   HEAP32[$16 >> 2] = $8; //@line 31961
   $17 = $ReallocAsyncCtx29 + 20 | 0; //@line 31962
   HEAP32[$17 >> 2] = $10; //@line 31963
   sp = STACKTOP; //@line 31964
   return;
  }
  ___async_unwind = 0; //@line 31967
  HEAP32[$ReallocAsyncCtx29 >> 2] = 350; //@line 31968
  $13 = $ReallocAsyncCtx29 + 4 | 0; //@line 31969
  HEAP32[$13 >> 2] = $2; //@line 31970
  $14 = $ReallocAsyncCtx29 + 8 | 0; //@line 31971
  HEAP32[$14 >> 2] = $4; //@line 31972
  $15 = $ReallocAsyncCtx29 + 12 | 0; //@line 31973
  HEAP32[$15 >> 2] = $6; //@line 31974
  $16 = $ReallocAsyncCtx29 + 16 | 0; //@line 31975
  HEAP32[$16 >> 2] = $8; //@line 31976
  $17 = $ReallocAsyncCtx29 + 20 | 0; //@line 31977
  HEAP32[$17 >> 2] = $10; //@line 31978
  sp = STACKTOP; //@line 31979
  return;
 }
 $18 = $4 + 944 | 0; //@line 31982
 HEAP8[$18 >> 0] = HEAP8[$18 >> 0] | 34; //@line 31985
 $21 = HEAP32[$6 >> 2] | 0; //@line 31986
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 31988
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($21, $4 + 996 | 0, 1); //@line 31989
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 351; //@line 31992
  $23 = $ReallocAsyncCtx6 + 4 | 0; //@line 31993
  HEAP32[$23 >> 2] = $4; //@line 31994
  $24 = $ReallocAsyncCtx6 + 8 | 0; //@line 31995
  HEAP32[$24 >> 2] = $6; //@line 31996
  $25 = $ReallocAsyncCtx6 + 12 | 0; //@line 31997
  HEAP32[$25 >> 2] = $8; //@line 31998
  $26 = $ReallocAsyncCtx6 + 16 | 0; //@line 31999
  HEAP32[$26 >> 2] = $10; //@line 32000
  sp = STACKTOP; //@line 32001
  return;
 }
 ___async_unwind = 0; //@line 32004
 HEAP32[$ReallocAsyncCtx6 >> 2] = 351; //@line 32005
 $23 = $ReallocAsyncCtx6 + 4 | 0; //@line 32006
 HEAP32[$23 >> 2] = $4; //@line 32007
 $24 = $ReallocAsyncCtx6 + 8 | 0; //@line 32008
 HEAP32[$24 >> 2] = $6; //@line 32009
 $25 = $ReallocAsyncCtx6 + 12 | 0; //@line 32010
 HEAP32[$25 >> 2] = $8; //@line 32011
 $26 = $ReallocAsyncCtx6 + 16 | 0; //@line 32012
 HEAP32[$26 >> 2] = $10; //@line 32013
 sp = STACKTOP; //@line 32014
 return;
}
function __ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$026 = 0, $$1 = 0, $11 = 0, $12 = 0, $13 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $28 = 0, $31 = 0, $33 = 0, $34 = 0, $6 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 18446
 STACKTOP = STACKTOP + 16 | 0; //@line 18447
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 18447
 $2 = sp; //@line 18448
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
  $$1 = -1002; //@line 18452
  STACKTOP = sp; //@line 18453
  return $$1 | 0; //@line 18453
 }
 $6 = __ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0; //@line 18456
 $7 = HEAP8[$1 >> 0] | 0; //@line 18457
 if (($7 & 255) > ($6 & 255)) {
  $$1 = -1003; //@line 18460
  STACKTOP = sp; //@line 18461
  return $$1 | 0; //@line 18461
 }
 $9 = $1 + 4 | 0; //@line 18463
 if (!($7 << 24 >> 24)) {
  $$1 = 0; //@line 18466
  STACKTOP = sp; //@line 18467
  return $$1 | 0; //@line 18467
 }
 $11 = $2 + 9 | 0; //@line 18469
 $12 = $2 + 8 | 0; //@line 18470
 $13 = $2 + 4 | 0; //@line 18471
 $$026 = 0; //@line 18472
 $20 = 0; //@line 18472
 while (1) {
  $18 = HEAP32[$9 >> 2] | 0; //@line 18474
  HEAP8[$11 >> 0] = HEAP8[$18 + ($20 << 4) + 13 >> 0] | 0; //@line 18477
  HEAP8[$12 >> 0] = HEAP8[$18 + ($20 << 4) + 12 >> 0] | 0; //@line 18480
  HEAP32[$2 >> 2] = HEAP32[$18 + ($20 << 4) + 4 >> 2]; //@line 18483
  HEAP32[$13 >> 2] = HEAP32[$18 + ($20 << 4) + 8 >> 2]; //@line 18486
  $28 = HEAP32[$0 >> 2] | 0; //@line 18487
  $31 = HEAP32[(HEAP32[$28 >> 2] | 0) + 60 >> 2] | 0; //@line 18490
  $33 = HEAP8[$18 + ($20 << 4) >> 0] | 0; //@line 18492
  $AsyncCtx = _emscripten_alloc_async_context(44, sp) | 0; //@line 18493
  $34 = FUNCTION_TABLE_iiii[$31 & 15]($28, $2, $33) | 0; //@line 18494
  if (___async) {
   label = 7; //@line 18497
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 18500
  $16 = $$026 + 1 << 24 >> 24; //@line 18502
  if ($34 | 0) {
   $$1 = $34; //@line 18504
   label = 9; //@line 18505
   break;
  }
  if (($16 & 255) < (HEAPU8[$1 >> 0] | 0)) {
   $$026 = $16; //@line 18512
   $20 = $16 & 255; //@line 18512
  } else {
   $$1 = 0; //@line 18514
   label = 9; //@line 18515
   break;
  }
 }
 if ((label | 0) == 7) {
  HEAP32[$AsyncCtx >> 2] = 499; //@line 18520
  HEAP8[$AsyncCtx + 4 >> 0] = $$026; //@line 18522
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 18524
  HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 18526
  HEAP32[$AsyncCtx + 16 >> 2] = $9; //@line 18528
  HEAP32[$AsyncCtx + 20 >> 2] = $11; //@line 18530
  HEAP32[$AsyncCtx + 24 >> 2] = $12; //@line 18532
  HEAP32[$AsyncCtx + 28 >> 2] = $2; //@line 18534
  HEAP32[$AsyncCtx + 32 >> 2] = $13; //@line 18536
  HEAP32[$AsyncCtx + 36 >> 2] = $0; //@line 18538
  HEAP32[$AsyncCtx + 40 >> 2] = $2; //@line 18540
  sp = STACKTOP; //@line 18541
  STACKTOP = sp; //@line 18542
  return 0; //@line 18542
 } else if ((label | 0) == 9) {
  STACKTOP = sp; //@line 18545
  return $$1 | 0; //@line 18545
 }
 return 0; //@line 18547
}
function __ZN7LoRaMac25on_rx_window2_timer_eventEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $23 = 0, $24 = 0, $27 = 0, $30 = 0, $31 = 0, $38 = 0, $40 = 0, $41 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 10603
 STACKTOP = STACKTOP + 16 | 0; //@line 10604
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10604
 $vararg_buffer1 = sp + 8 | 0; //@line 10605
 _mbed_tracef(16, 13728, 13770, sp); //@line 10607
 $2 = HEAP32[$0 + 356 >> 2] | 0; //@line 10609
 $AsyncCtx9 = _emscripten_alloc_async_context(16, sp) | 0; //@line 10611
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($2, $0 + 1056 | 0); //@line 10612
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 310; //@line 10615
  HEAP32[$AsyncCtx9 + 4 >> 2] = $0; //@line 10617
  HEAP32[$AsyncCtx9 + 8 >> 2] = $vararg_buffer1; //@line 10619
  HEAP32[$AsyncCtx9 + 12 >> 2] = $vararg_buffer1; //@line 10621
  sp = STACKTOP; //@line 10622
  STACKTOP = sp; //@line 10623
  return;
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 10625
 $9 = $0 + 1184 | 0; //@line 10628
 HEAP8[$9 >> 0] = HEAP8[$0 + 378 >> 0] | 0; //@line 10629
 HEAP32[$0 + 1188 >> 2] = HEAP32[$0 + 1132 >> 2]; //@line 10633
 HEAP8[$0 + 1200 >> 0] = HEAP8[$0 + 1141 >> 0] | 0; //@line 10637
 HEAP8[$0 + 1201 >> 0] = HEAP8[$0 + 369 >> 0] | 0; //@line 10641
 HEAP32[$0 + 1204 >> 2] = 1; //@line 10643
 $23 = $0 + 1202 | 0; //@line 10647
 HEAP8[$23 >> 0] = (HEAP32[$0 + 360 >> 2] | 0) == 2 & 1; //@line 10649
 $24 = HEAP32[$0 >> 2] | 0; //@line 10650
 $27 = HEAP32[(HEAP32[$24 >> 2] | 0) + 24 >> 2] | 0; //@line 10653
 $30 = (__ZN11LoRaMacMcps14get_indicationEv($0 + 288 | 0) | 0) + 10 | 0; //@line 10656
 $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 10657
 $31 = FUNCTION_TABLE_iiii[$27 & 15]($24, $9, $30) | 0; //@line 10658
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 311; //@line 10661
  HEAP32[$AsyncCtx + 4 >> 2] = $23; //@line 10663
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 10665
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer1; //@line 10667
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer1; //@line 10669
  HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 10671
  sp = STACKTOP; //@line 10672
  STACKTOP = sp; //@line 10673
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 10675
 if (!$31) {
  STACKTOP = sp; //@line 10677
  return;
 }
 $38 = (HEAP8[$23 >> 0] | 0) != 0; //@line 10680
 $40 = HEAP32[$0 + 1108 >> 2] | 0; //@line 10682
 _mbed_tracef(16, 13728, 13796, $vararg_buffer1); //@line 10683
 $41 = HEAP32[$0 >> 2] | 0; //@line 10684
 $AsyncCtx5 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10685
 __ZN7LoRaPHY15setup_rx_windowEbj($41, $38, $40); //@line 10686
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 312; //@line 10689
  HEAP32[$AsyncCtx5 + 4 >> 2] = $0; //@line 10691
  sp = STACKTOP; //@line 10692
  STACKTOP = sp; //@line 10693
  return;
 }
 _emscripten_free_async_context($AsyncCtx5 | 0); //@line 10695
 HEAP32[$0 + 364 >> 2] = 1; //@line 10697
 STACKTOP = sp; //@line 10698
 return;
}
function _initialize__async_cb_77($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 22574
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22576
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22578
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22580
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22582
 $10 = 7 << 32 + -4; //@line 22584
 $11 = ___muldi3($10 | 0, 0, 1e6, 0) | 0; //@line 22585
 $12 = tempRet0; //@line 22586
 $13 = _i64Add($2 | 0, 0, -1, -1) | 0; //@line 22587
 $15 = _i64Add($13 | 0, tempRet0 | 0, $11 | 0, $12 | 0) | 0; //@line 22589
 $17 = ___udivdi3($15 | 0, tempRet0 | 0, $2 | 0, 0) | 0; //@line 22591
 $18 = tempRet0; //@line 22592
 $19 = HEAP32[$4 >> 2] | 0; //@line 22593
 HEAP32[$19 >> 2] = 0; //@line 22594
 HEAP32[$19 + 4 >> 2] = 0; //@line 22596
 $23 = HEAP32[(HEAP32[$6 >> 2] | 0) + 4 >> 2] | 0; //@line 22599
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(40) | 0; //@line 22600
 $24 = FUNCTION_TABLE_i[$23 & 7]() | 0; //@line 22601
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 615; //@line 22604
  $25 = $ReallocAsyncCtx3 + 4 | 0; //@line 22605
  HEAP32[$25 >> 2] = $4; //@line 22606
  $26 = $ReallocAsyncCtx3 + 8 | 0; //@line 22607
  HEAP32[$26 >> 2] = $2; //@line 22608
  $27 = $ReallocAsyncCtx3 + 12 | 0; //@line 22609
  HEAP32[$27 >> 2] = 32; //@line 22610
  $28 = $ReallocAsyncCtx3 + 16 | 0; //@line 22611
  HEAP32[$28 >> 2] = $10; //@line 22612
  $29 = $ReallocAsyncCtx3 + 24 | 0; //@line 22613
  $30 = $29; //@line 22614
  $31 = $30; //@line 22615
  HEAP32[$31 >> 2] = $17; //@line 22616
  $32 = $30 + 4 | 0; //@line 22617
  $33 = $32; //@line 22618
  HEAP32[$33 >> 2] = $18; //@line 22619
  $34 = $ReallocAsyncCtx3 + 32 | 0; //@line 22620
  HEAP32[$34 >> 2] = $6; //@line 22621
  $35 = $ReallocAsyncCtx3 + 36 | 0; //@line 22622
  HEAP32[$35 >> 2] = $8; //@line 22623
  sp = STACKTOP; //@line 22624
  return;
 }
 HEAP32[___async_retval >> 2] = $24; //@line 22628
 ___async_unwind = 0; //@line 22629
 HEAP32[$ReallocAsyncCtx3 >> 2] = 615; //@line 22630
 $25 = $ReallocAsyncCtx3 + 4 | 0; //@line 22631
 HEAP32[$25 >> 2] = $4; //@line 22632
 $26 = $ReallocAsyncCtx3 + 8 | 0; //@line 22633
 HEAP32[$26 >> 2] = $2; //@line 22634
 $27 = $ReallocAsyncCtx3 + 12 | 0; //@line 22635
 HEAP32[$27 >> 2] = 32; //@line 22636
 $28 = $ReallocAsyncCtx3 + 16 | 0; //@line 22637
 HEAP32[$28 >> 2] = $10; //@line 22638
 $29 = $ReallocAsyncCtx3 + 24 | 0; //@line 22639
 $30 = $29; //@line 22640
 $31 = $30; //@line 22641
 HEAP32[$31 >> 2] = $17; //@line 22642
 $32 = $30 + 4 | 0; //@line 22643
 $33 = $32; //@line 22644
 HEAP32[$33 >> 2] = $18; //@line 22645
 $34 = $ReallocAsyncCtx3 + 32 | 0; //@line 22646
 HEAP32[$34 >> 2] = $6; //@line 22647
 $35 = $ReallocAsyncCtx3 + 36 | 0; //@line 22648
 HEAP32[$35 >> 2] = $8; //@line 22649
 sp = STACKTOP; //@line 22650
 return;
}
function __ZN7LoRaPHY11add_channelEP16channel_params_th($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$$123$off0 = 0, $$024 = 0, $$4$off0 = 0, $$5$off039 = 0, $11 = 0, $13 = 0, $15 = 0, $17 = 0, $20 = 0, $22 = 0, $35 = 0, $43 = 0, $44 = 0, $45 = 0, $50 = 0, $52 = 0, $6 = 0, $62 = 0, $AsyncCtx = 0, $not$ = 0, sp = 0;
 sp = STACKTOP; //@line 23798
 if (!(HEAP8[$0 + 16 >> 0] | 0)) {
  $$024 = -1003; //@line 23803
  return $$024 | 0; //@line 23804
 }
 $6 = $2 & 255; //@line 23806
 if ((HEAPU8[$0 + 20 >> 0] | 0) <= ($2 & 255)) {
  $$024 = -1003; //@line 23811
  return $$024 | 0; //@line 23812
 }
 $11 = HEAP8[$1 + 8 >> 0] | 0; //@line 23815
 $13 = ($11 << 4 & 255) << 24 >> 24 >> 4; //@line 23817
 $15 = HEAP8[$0 + 26 >> 0] | 0; //@line 23819
 $17 = HEAP8[$0 + 27 >> 0] | 0; //@line 23821
 $20 = $11 << 24 >> 24 >> 4; //@line 23825
 $22 = $20 << 24 >> 24 <= $17 << 24 >> 24; //@line 23827
 $$$123$off0 = $13 << 24 >> 24 > $20 << 24 >> 24 | (($13 << 24 >> 24 > $17 << 24 >> 24 ? 1 : $13 << 24 >> 24 < $15 << 24 >> 24) | $20 << 24 >> 24 >= $15 << 24 >> 24 & $22 ^ 1); //@line 23832
 if ((HEAPU8[$0 + 18 >> 0] | 0) > ($2 & 255)) {
  $$4$off0 = ($13 << 24 >> 24 | 0) > ($15 & 255 | 0) | $$$123$off0 | $22 & $20 << 24 >> 24 >= (HEAP8[$0 + 31 >> 0] | 0) ^ 1; //@line 23846
  $35 = HEAP32[$1 >> 2] | 0; //@line 23847
  if (($35 | 0) == (HEAP32[(HEAP32[$0 + 112 >> 2] | 0) + ($6 * 12 | 0) >> 2] | 0)) {
   $$5$off039 = $$4$off0; //@line 23854
   $44 = $35; //@line 23854
  } else {
   $$024 = $$4$off0 ? -1006 : -1004; //@line 23857
   return $$024 | 0; //@line 23858
  }
 } else {
  $$5$off039 = $$$123$off0; //@line 23862
  $44 = HEAP32[$1 >> 2] | 0; //@line 23862
 }
 $43 = HEAP32[(HEAP32[$0 >> 2] | 0) + 76 >> 2] | 0; //@line 23866
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 23867
 $45 = FUNCTION_TABLE_iii[$43 & 31]($0, $44) | 0; //@line 23868
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 549; //@line 23871
  HEAP8[$AsyncCtx + 4 >> 0] = $$5$off039 & 1; //@line 23874
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 23876
  HEAP32[$AsyncCtx + 12 >> 2] = $6; //@line 23878
  HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 23880
  sp = STACKTOP; //@line 23881
  return 0; //@line 23882
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 23884
 $not$ = $45 ^ 1; //@line 23885
 if ($$5$off039 | $not$) {
  $$024 = $$5$off039 ? $$5$off039 & $not$ ? -1006 : -1005 : -1004; //@line 23891
  return $$024 | 0; //@line 23892
 }
 $50 = $0 + 112 | 0; //@line 23894
 $52 = (HEAP32[$50 >> 2] | 0) + ($6 * 12 | 0) | 0; //@line 23896
 HEAP32[$52 >> 2] = HEAP32[$1 >> 2]; //@line 23897
 HEAP32[$52 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 23897
 HEAP32[$52 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 23897
 HEAP8[(HEAP32[$50 >> 2] | 0) + ($6 * 12 | 0) + 9 >> 0] = HEAP8[$1 + 9 >> 0] | 0; //@line 23902
 $62 = (HEAP32[$0 + 120 >> 2] | 0) + ($6 >>> 4 << 1) | 0; //@line 23908
 HEAP16[$62 >> 1] = 1 << ($6 & 15) | HEAPU16[$62 >> 1]; //@line 23913
 $$024 = 0; //@line 23914
 return $$024 | 0; //@line 23915
}
function __ZN7LoRaMac17query_tx_possibleEhP17loramac_tx_info_t($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$011 = 0, $$pre$phi13Z2D = 0, $13 = 0, $14 = 0, $28 = 0, $3 = 0, $31 = 0, $33 = 0, $34 = 0, $38 = 0, $44 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $or$cond$i = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 16970
 STACKTOP = STACKTOP + 16 | 0; //@line 16971
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16971
 $vararg_buffer = sp; //@line 16972
 $3 = $0 + 4 | 0; //@line 16973
 $5 = (__ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($3) | 0) & 255; //@line 16975
 $8 = ((__ZNK14LoRaMacCommand26get_repeat_commands_lengthEv($3) | 0) & 255) + $5 | 0; //@line 16978
 if (!$2) {
  $$011 = -1003; //@line 16981
  STACKTOP = sp; //@line 16982
  return $$011 | 0; //@line 16982
 }
 do {
  if (!(HEAP8[$0 + 1156 >> 0] | 0)) {
   $$pre$phi13Z2D = $0 + 1097 | 0; //@line 16990
  } else {
   $13 = HEAP32[$0 >> 2] | 0; //@line 16992
   $14 = $0 + 1097 | 0; //@line 16993
   $AsyncCtx = _emscripten_alloc_async_context(40, sp) | 0; //@line 16996
   __ZN7LoRaPHY12get_next_ADREbRaS0_Rj($13, 0, $14, $0 + 1096 | 0, $0 + 964 | 0) | 0; //@line 16997
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 464; //@line 17000
    HEAP32[$AsyncCtx + 4 >> 2] = $14; //@line 17002
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 17004
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 17006
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 17008
    HEAP32[$AsyncCtx + 20 >> 2] = $8; //@line 17010
    HEAP32[$AsyncCtx + 24 >> 2] = $3; //@line 17012
    HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer; //@line 17014
    HEAP32[$AsyncCtx + 32 >> 2] = $vararg_buffer; //@line 17016
    HEAP8[$AsyncCtx + 36 >> 0] = $1; //@line 17018
    sp = STACKTOP; //@line 17019
    STACKTOP = sp; //@line 17020
    return 0; //@line 17020
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 17022
    $$pre$phi13Z2D = $14; //@line 17023
    break;
   }
  }
 } while (0);
 $28 = $0 + 369 | 0; //@line 17030
 $31 = __ZN7LoRaPHY15get_max_payloadEhb(HEAP32[$0 >> 2] | 0, HEAP8[$$pre$phi13Z2D >> 0] | 0, (HEAP8[$28 >> 0] | 0) != 0) | 0; //@line 17033
 HEAP8[$2 + 1 >> 0] = $31; //@line 17035
 $33 = $31 & 255; //@line 17036
 $34 = $8 & 255; //@line 17037
 if ($34 >>> 0 > $33 >>> 0) {
  HEAP8[$2 >> 0] = $31; //@line 17040
  __ZN14LoRaMacCommand20clear_command_bufferEv($3); //@line 17041
  __ZN14LoRaMacCommand19clear_repeat_bufferEv($3); //@line 17042
  $$0 = 0; //@line 17043
 } else {
  HEAP8[$2 >> 0] = $33 - $8; //@line 17047
  $$0 = $34; //@line 17048
 }
 $38 = HEAP8[$$pre$phi13Z2D >> 0] | 0; //@line 17050
 _mbed_tracef(16, 13728, 14033, $vararg_buffer); //@line 17051
 $44 = $$0 + ($1 & 255) | 0; //@line 17057
 $or$cond$i = $44 >>> 0 < 256 & $44 >>> 0 <= ((__ZN7LoRaPHY15get_max_payloadEhb(HEAP32[$0 >> 2] | 0, $38, (HEAP8[$28 >> 0] | 0) != 0) | 0) & 255) >>> 0; //@line 17061
 $$011 = $or$cond$i ? 0 : -1010; //@line 17063
 STACKTOP = sp; //@line 17064
 return $$011 | 0; //@line 17064
}
function __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $12 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 15833
 STACKTOP = STACKTOP + 16 | 0; //@line 15834
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15834
 $$byval_copy = sp; //@line 15835
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15837
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15839
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15841
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15843
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 15847
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 15849
 if ($AsyncRetVal | 0) {
  $28 = ___async_retval; //@line 15852
  HEAP32[$28 >> 2] = $AsyncRetVal; //@line 15853
  STACKTOP = sp; //@line 15854
  return;
 }
 if ((HEAP32[$2 >> 2] | 0) != 2) {
  $28 = ___async_retval; //@line 15859
  HEAP32[$28 >> 2] = $AsyncRetVal; //@line 15860
  STACKTOP = sp; //@line 15861
  return;
 }
 switch (HEAP32[$4 >> 2] | 0) {
 case 0:
  {
   break;
  }
 case 10:
  {
   label = 5; //@line 15869
   break;
  }
 default:
  {
   $28 = ___async_retval; //@line 15873
   HEAP32[$28 >> 2] = $AsyncRetVal; //@line 15874
   STACKTOP = sp; //@line 15875
   return;
  }
 }
 if ((label | 0) == 5) {
  if (!(HEAP8[$12 + 372 >> 0] | 0)) {
   $28 = ___async_retval; //@line 15883
   HEAP32[$28 >> 2] = $AsyncRetVal; //@line 15884
   STACKTOP = sp; //@line 15885
   return;
  }
 }
 _mbed_tracef(16, 13728, 13747, $8); //@line 15888
 $22 = HEAP32[$12 + 1328 >> 2] | 0; //@line 15890
 HEAP32[$6 >> 2] = 293; //@line 15891
 HEAP32[$6 + 4 >> 2] = 0; //@line 15893
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 15894
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 15895
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 15895
 $23 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($22, $12, $$byval_copy) | 0; //@line 15896
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 478; //@line 15899
  $24 = $ReallocAsyncCtx2 + 4 | 0; //@line 15900
  HEAP32[$24 >> 2] = $6; //@line 15901
  $25 = $ReallocAsyncCtx2 + 8 | 0; //@line 15902
  HEAP32[$25 >> 2] = $12; //@line 15903
  $26 = $ReallocAsyncCtx2 + 12 | 0; //@line 15904
  HEAP32[$26 >> 2] = $AsyncRetVal; //@line 15905
  sp = STACKTOP; //@line 15906
  STACKTOP = sp; //@line 15907
  return;
 }
 HEAP32[___async_retval >> 2] = $23; //@line 15910
 ___async_unwind = 0; //@line 15911
 HEAP32[$ReallocAsyncCtx2 >> 2] = 478; //@line 15912
 $24 = $ReallocAsyncCtx2 + 4 | 0; //@line 15913
 HEAP32[$24 >> 2] = $6; //@line 15914
 $25 = $ReallocAsyncCtx2 + 8 | 0; //@line 15915
 HEAP32[$25 >> 2] = $12; //@line 15916
 $26 = $ReallocAsyncCtx2 + 12 | 0; //@line 15917
 HEAP32[$26 >> 2] = $AsyncRetVal; //@line 15918
 sp = STACKTOP; //@line 15919
 STACKTOP = sp; //@line 15920
 return;
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_260($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 9017
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9021
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9023
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9025
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 9027
 $11 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 9028
 if (!$11) {
  $18 = HEAP32[$4 >> 2] | 0; //@line 9031
  $20 = $8 + 12 | 0; //@line 9033
  HEAP32[$8 >> 2] = 455; //@line 9034
  HEAP32[$8 + 4 >> 2] = 0; //@line 9036
  HEAP32[$8 + 8 >> 2] = $6; //@line 9038
  HEAP32[$20 >> 2] = 912; //@line 9039
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 9040
  __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($18, $6 + 1076 | 0, $8); //@line 9041
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 456; //@line 9044
   $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 9045
   HEAP32[$21 >> 2] = $20; //@line 9046
   $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 9047
   HEAP32[$22 >> 2] = $4; //@line 9048
   $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 9049
   HEAP32[$23 >> 2] = $6; //@line 9050
   $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 9051
   HEAP32[$24 >> 2] = $8; //@line 9052
   sp = STACKTOP; //@line 9053
   return;
  }
  ___async_unwind = 0; //@line 9056
  HEAP32[$ReallocAsyncCtx6 >> 2] = 456; //@line 9057
  $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 9058
  HEAP32[$21 >> 2] = $20; //@line 9059
  $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 9060
  HEAP32[$22 >> 2] = $4; //@line 9061
  $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 9062
  HEAP32[$23 >> 2] = $6; //@line 9063
  $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 9064
  HEAP32[$24 >> 2] = $8; //@line 9065
  sp = STACKTOP; //@line 9066
  return;
 } else {
  $14 = HEAP32[$11 + 8 >> 2] | 0; //@line 9070
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 9071
  FUNCTION_TABLE_vi[$14 & 1023]($10); //@line 9072
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 454; //@line 9075
   $15 = $ReallocAsyncCtx4 + 4 | 0; //@line 9076
   HEAP32[$15 >> 2] = $4; //@line 9077
   $16 = $ReallocAsyncCtx4 + 8 | 0; //@line 9078
   HEAP32[$16 >> 2] = $6; //@line 9079
   $17 = $ReallocAsyncCtx4 + 12 | 0; //@line 9080
   HEAP32[$17 >> 2] = $8; //@line 9081
   sp = STACKTOP; //@line 9082
   return;
  }
  ___async_unwind = 0; //@line 9085
  HEAP32[$ReallocAsyncCtx4 >> 2] = 454; //@line 9086
  $15 = $ReallocAsyncCtx4 + 4 | 0; //@line 9087
  HEAP32[$15 >> 2] = $4; //@line 9088
  $16 = $ReallocAsyncCtx4 + 8 | 0; //@line 9089
  HEAP32[$16 >> 2] = $6; //@line 9090
  $17 = $ReallocAsyncCtx4 + 12 | 0; //@line 9091
  HEAP32[$17 >> 2] = $8; //@line 9092
  sp = STACKTOP; //@line 9093
  return;
 }
}
function __ZN14lorawan_timersD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $29 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 10668
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10670
 $4 = HEAP32[$2 + 88 >> 2] | 0; //@line 10672
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 10677
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 10678
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 76 | 0); //@line 10679
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 285; //@line 10682
   $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 10683
   HEAP32[$9 >> 2] = $2; //@line 10684
   sp = STACKTOP; //@line 10685
   return;
  }
  ___async_unwind = 0; //@line 10688
  HEAP32[$ReallocAsyncCtx2 >> 2] = 285; //@line 10689
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 10690
  HEAP32[$9 >> 2] = $2; //@line 10691
  sp = STACKTOP; //@line 10692
  return;
 }
 $11 = HEAP32[$2 + 68 >> 2] | 0; //@line 10696
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 10701
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 10702
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 56 | 0); //@line 10703
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 286; //@line 10706
   $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 10707
   HEAP32[$16 >> 2] = $2; //@line 10708
   sp = STACKTOP; //@line 10709
   return;
  }
  ___async_unwind = 0; //@line 10712
  HEAP32[$ReallocAsyncCtx3 >> 2] = 286; //@line 10713
  $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 10714
  HEAP32[$16 >> 2] = $2; //@line 10715
  sp = STACKTOP; //@line 10716
  return;
 }
 $18 = HEAP32[$2 + 48 >> 2] | 0; //@line 10720
 if ($18 | 0) {
  $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 10725
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 10726
  FUNCTION_TABLE_vi[$22 & 1023]($2 + 36 | 0); //@line 10727
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 287; //@line 10730
   $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 10731
   HEAP32[$23 >> 2] = $2; //@line 10732
   sp = STACKTOP; //@line 10733
   return;
  }
  ___async_unwind = 0; //@line 10736
  HEAP32[$ReallocAsyncCtx4 >> 2] = 287; //@line 10737
  $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 10738
  HEAP32[$23 >> 2] = $2; //@line 10739
  sp = STACKTOP; //@line 10740
  return;
 }
 $25 = HEAP32[$2 + 28 >> 2] | 0; //@line 10744
 if (!$25) {
  return;
 }
 $29 = HEAP32[$25 + 8 >> 2] | 0; //@line 10751
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 10752
 FUNCTION_TABLE_vi[$29 & 1023]($2 + 16 | 0); //@line 10753
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 288; //@line 10756
  sp = STACKTOP; //@line 10757
  return;
 }
 ___async_unwind = 0; //@line 10760
 HEAP32[$ReallocAsyncCtx5 >> 2] = 288; //@line 10761
 sp = STACKTOP; //@line 10762
 return;
}
function __ZN12radio_eventsD2Ev__async_cb_142($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 27258
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27260
 $4 = HEAP32[$2 + 60 >> 2] | 0; //@line 27262
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 27267
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 27268
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 48 | 0); //@line 27269
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 280; //@line 27272
   $9 = $ReallocAsyncCtx4 + 4 | 0; //@line 27273
   HEAP32[$9 >> 2] = $2; //@line 27274
   sp = STACKTOP; //@line 27275
   return;
  }
  ___async_unwind = 0; //@line 27278
  HEAP32[$ReallocAsyncCtx4 >> 2] = 280; //@line 27279
  $9 = $ReallocAsyncCtx4 + 4 | 0; //@line 27280
  HEAP32[$9 >> 2] = $2; //@line 27281
  sp = STACKTOP; //@line 27282
  return;
 }
 $11 = HEAP32[$2 + 44 >> 2] | 0; //@line 27286
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 27291
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 27292
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 32 | 0); //@line 27293
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 281; //@line 27296
   $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 27297
   HEAP32[$16 >> 2] = $2; //@line 27298
   sp = STACKTOP; //@line 27299
   return;
  }
  ___async_unwind = 0; //@line 27302
  HEAP32[$ReallocAsyncCtx5 >> 2] = 281; //@line 27303
  $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 27304
  HEAP32[$16 >> 2] = $2; //@line 27305
  sp = STACKTOP; //@line 27306
  return;
 }
 $18 = HEAP32[$2 + 28 >> 2] | 0; //@line 27310
 if ($18 | 0) {
  $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 27315
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 27316
  FUNCTION_TABLE_vi[$22 & 1023]($2 + 16 | 0); //@line 27317
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 282; //@line 27320
   $23 = $ReallocAsyncCtx6 + 4 | 0; //@line 27321
   HEAP32[$23 >> 2] = $2; //@line 27322
   sp = STACKTOP; //@line 27323
   return;
  }
  ___async_unwind = 0; //@line 27326
  HEAP32[$ReallocAsyncCtx6 >> 2] = 282; //@line 27327
  $23 = $ReallocAsyncCtx6 + 4 | 0; //@line 27328
  HEAP32[$23 >> 2] = $2; //@line 27329
  sp = STACKTOP; //@line 27330
  return;
 }
 $25 = HEAP32[$2 + 12 >> 2] | 0; //@line 27334
 if (!$25) {
  return;
 }
 $28 = HEAP32[$25 + 8 >> 2] | 0; //@line 27340
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 27341
 FUNCTION_TABLE_vi[$28 & 1023]($2); //@line 27342
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 283; //@line 27345
  sp = STACKTOP; //@line 27346
  return;
 }
 ___async_unwind = 0; //@line 27349
 HEAP32[$ReallocAsyncCtx7 >> 2] = 283; //@line 27350
 sp = STACKTOP; //@line 27351
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_109($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $23 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx26 = 0, sp = 0;
 sp = STACKTOP; //@line 24100
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24104
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24106
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24108
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24110
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 24112
 $12 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 24113
 if ($12 | 0) {
  $15 = HEAP32[$12 + 8 >> 2] | 0; //@line 24117
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(20) | 0; //@line 24118
  FUNCTION_TABLE_vi[$15 & 1023]($4); //@line 24119
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 223; //@line 24122
   $16 = $ReallocAsyncCtx10 + 4 | 0; //@line 24123
   HEAP32[$16 >> 2] = $AsyncRetVal; //@line 24124
   $17 = $ReallocAsyncCtx10 + 8 | 0; //@line 24125
   HEAP32[$17 >> 2] = $6; //@line 24126
   $18 = $ReallocAsyncCtx10 + 12 | 0; //@line 24127
   HEAP32[$18 >> 2] = $8; //@line 24128
   $19 = $ReallocAsyncCtx10 + 16 | 0; //@line 24129
   HEAP32[$19 >> 2] = $10; //@line 24130
   sp = STACKTOP; //@line 24131
   return;
  }
  ___async_unwind = 0; //@line 24134
  HEAP32[$ReallocAsyncCtx10 >> 2] = 223; //@line 24135
  $16 = $ReallocAsyncCtx10 + 4 | 0; //@line 24136
  HEAP32[$16 >> 2] = $AsyncRetVal; //@line 24137
  $17 = $ReallocAsyncCtx10 + 8 | 0; //@line 24138
  HEAP32[$17 >> 2] = $6; //@line 24139
  $18 = $ReallocAsyncCtx10 + 12 | 0; //@line 24140
  HEAP32[$18 >> 2] = $8; //@line 24141
  $19 = $ReallocAsyncCtx10 + 16 | 0; //@line 24142
  HEAP32[$19 >> 2] = $10; //@line 24143
  sp = STACKTOP; //@line 24144
  return;
 }
 if ($AsyncRetVal | 0) {
  HEAP32[$8 >> 2] = 6; //@line 24149
  HEAP32[___async_retval >> 2] = $6; //@line 24151
  return;
 }
 $ReallocAsyncCtx26 = _emscripten_realloc_async_context(16) | 0; //@line 24154
 _mbed_assert_internal(13612, 12396, 1245); //@line 24155
 if (___async) {
  HEAP32[$ReallocAsyncCtx26 >> 2] = 224; //@line 24158
  $21 = $ReallocAsyncCtx26 + 4 | 0; //@line 24159
  HEAP32[$21 >> 2] = $6; //@line 24160
  $22 = $ReallocAsyncCtx26 + 8 | 0; //@line 24161
  HEAP32[$22 >> 2] = $8; //@line 24162
  $23 = $ReallocAsyncCtx26 + 12 | 0; //@line 24163
  HEAP32[$23 >> 2] = $10; //@line 24164
  sp = STACKTOP; //@line 24165
  return;
 }
 ___async_unwind = 0; //@line 24168
 HEAP32[$ReallocAsyncCtx26 >> 2] = 224; //@line 24169
 $21 = $ReallocAsyncCtx26 + 4 | 0; //@line 24170
 HEAP32[$21 >> 2] = $6; //@line 24171
 $22 = $ReallocAsyncCtx26 + 8 | 0; //@line 24172
 HEAP32[$22 >> 2] = $8; //@line 24173
 $23 = $ReallocAsyncCtx26 + 12 | 0; //@line 24174
 HEAP32[$23 >> 2] = $10; //@line 24175
 sp = STACKTOP; //@line 24176
 return;
}
function __ZN7LoRaMacC2ER18LoRaWANTimeHandler($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $18 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, stop = 0;
 __ZN14LoRaMacCommandC2Ev($0 + 4 | 0); //@line 9648
 __ZN11LoRaMacMlmeC2Ev($0 + 264 | 0); //@line 9650
 __ZN10LoRaMacMibC2Ev($0 + 348 | 0); //@line 9652
 __ZN18LoRaMacChannelPlanC2Ev($0 + 352 | 0); //@line 9654
 HEAP32[$0 + 356 >> 2] = $1; //@line 9656
 $7 = $0 + 996 | 0; //@line 9657
 HEAP32[$7 >> 2] = 0; //@line 9658
 HEAP32[$7 + 4 >> 2] = 0; //@line 9658
 HEAP32[$7 + 8 >> 2] = 0; //@line 9658
 HEAP32[$7 + 12 >> 2] = 0; //@line 9658
 $8 = $0 + 1016 | 0; //@line 9659
 HEAP32[$8 >> 2] = 0; //@line 9660
 HEAP32[$8 + 4 >> 2] = 0; //@line 9660
 HEAP32[$8 + 8 >> 2] = 0; //@line 9660
 HEAP32[$8 + 12 >> 2] = 0; //@line 9660
 $9 = $0 + 1036 | 0; //@line 9661
 HEAP32[$9 >> 2] = 0; //@line 9662
 HEAP32[$9 + 4 >> 2] = 0; //@line 9662
 HEAP32[$9 + 8 >> 2] = 0; //@line 9662
 HEAP32[$9 + 12 >> 2] = 0; //@line 9662
 $10 = $0 + 1056 | 0; //@line 9663
 HEAP32[$10 >> 2] = 0; //@line 9664
 HEAP32[$10 + 4 >> 2] = 0; //@line 9664
 HEAP32[$10 + 8 >> 2] = 0; //@line 9664
 HEAP32[$10 + 12 >> 2] = 0; //@line 9664
 $11 = $0 + 1076 | 0; //@line 9665
 HEAP32[$11 >> 2] = 0; //@line 9666
 HEAP32[$11 + 4 >> 2] = 0; //@line 9666
 HEAP32[$11 + 8 >> 2] = 0; //@line 9666
 HEAP32[$11 + 12 >> 2] = 0; //@line 9666
 dest = $0 + 1212 | 0; //@line 9668
 stop = dest + 112 | 0; //@line 9668
 do {
  HEAP32[dest >> 2] = 0; //@line 9668
  dest = dest + 4 | 0; //@line 9668
 } while ((dest | 0) < (stop | 0));
 HEAP32[$0 >> 2] = 0; //@line 9669
 $14 = $0 + 946 | 0; //@line 9671
 HEAP16[$0 + 636 >> 1] = 0; //@line 9673
 HEAP8[$0 + 893 >> 0] = 0; //@line 9675
 HEAP8[$0 + 370 >> 0] = 0; //@line 9677
 $18 = $0 + 371 | 0; //@line 9678
 dest = $0 + 900 | 0; //@line 9679
 stop = dest + 44 | 0; //@line 9679
 do {
  HEAP32[dest >> 2] = 0; //@line 9679
  dest = dest + 4 | 0; //@line 9679
 } while ((dest | 0) < (stop | 0));
 dest = $14; //@line 9680
 stop = dest + 18 | 0; //@line 9680
 do {
  HEAP16[dest >> 1] = 0; //@line 9680
  dest = dest + 2 | 0; //@line 9680
 } while ((dest | 0) < (stop | 0));
 HEAP8[$18 >> 0] = 1; //@line 9681
 HEAP8[$0 + 372 >> 0] = 0; //@line 9683
 HEAP32[$0 + 964 >> 2] = 0; //@line 9685
 HEAP8[$0 + 373 >> 0] = 0; //@line 9687
 HEAP8[$0 + 374 >> 0] = 0; //@line 9689
 HEAP8[$0 + 380 >> 0] = 0; //@line 9691
 HEAP32[$0 + 988 >> 2] = 0; //@line 9693
 HEAP32[$0 + 968 >> 2] = 0; //@line 9695
 HEAP8[$0 + 894 >> 0] = 1; //@line 9697
 HEAP8[$0 + 895 >> 0] = 1; //@line 9699
 HEAP8[$0 + 377 >> 0] = 0; //@line 9701
 HEAP32[$0 + 992 >> 2] = 0; //@line 9703
 HEAP32[$0 + 1208 >> 2] = 0; //@line 9705
 HEAP8[$0 + 1156 >> 0] = 0; //@line 9707
 HEAP8[$0 + 1152 >> 0] = 0; //@line 9709
 HEAP32[$0 + 1324 >> 2] = 0; //@line 9711
 HEAP32[$0 + 1328 >> 2] = 0; //@line 9713
 return;
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $21 = 0, $4 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 13651
 STACKTOP = STACKTOP + 16 | 0; //@line 13652
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 13652
 $$byval_copy = sp + 8 | 0; //@line 13653
 $vararg_buffer = sp; //@line 13654
 _mbed_tracef(16, 13728, 13986, $vararg_buffer); //@line 13655
 do {
  if ((HEAP32[$0 + 360 >> 2] | 0) == 2) {
   _mbed_tracef(16, 13728, 13747, $$byval_copy); //@line 13661
   $7 = HEAP32[$0 + 1328 >> 2] | 0; //@line 13663
   HEAP32[$vararg_buffer >> 2] = 293; //@line 13664
   HEAP32[$vararg_buffer + 4 >> 2] = 0; //@line 13666
   $AsyncCtx5 = _emscripten_alloc_async_context(12, sp) | 0; //@line 13667
   HEAP32[$$byval_copy >> 2] = HEAP32[$vararg_buffer >> 2]; //@line 13668
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$vararg_buffer + 4 >> 2]; //@line 13668
   $8 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($7, $0, $$byval_copy) | 0; //@line 13669
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 385; //@line 13672
    HEAP32[$AsyncCtx5 + 4 >> 2] = $vararg_buffer; //@line 13674
    HEAP32[$AsyncCtx5 + 8 >> 2] = $0; //@line 13676
    sp = STACKTOP; //@line 13677
    STACKTOP = sp; //@line 13678
    return;
   }
   _emscripten_free_async_context($AsyncCtx5 | 0); //@line 13680
   do {
    if (!$8) {
     $AsyncCtx9 = _emscripten_alloc_async_context(12, sp) | 0; //@line 13684
     _mbed_assert_internal(13612, 13621, 215); //@line 13685
     if (___async) {
      HEAP32[$AsyncCtx9 >> 2] = 386; //@line 13688
      HEAP32[$AsyncCtx9 + 4 >> 2] = $vararg_buffer; //@line 13690
      HEAP32[$AsyncCtx9 + 8 >> 2] = $0; //@line 13692
      sp = STACKTOP; //@line 13693
      STACKTOP = sp; //@line 13694
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx9 | 0); //@line 13696
      break;
     }
    }
   } while (0);
   HEAP32[$0 + 364 >> 2] = 2; //@line 13702
  } else {
   $4 = HEAP32[$0 >> 2] | 0; //@line 13704
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 13705
   __ZN7LoRaPHY18put_radio_to_sleepEv($4); //@line 13706
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 384; //@line 13709
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 13711
    sp = STACKTOP; //@line 13712
    STACKTOP = sp; //@line 13713
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 13715
    break;
   }
  }
 } while (0);
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($0 + 288 | 0) | 0) + 4 >> 2] = 2; //@line 13723
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) + 4 >> 2] = 2; //@line 13727
 $21 = $0 + 944 | 0; //@line 13728
 HEAP8[$21 >> 0] = HEAP8[$21 >> 0] | 32; //@line 13731
 STACKTOP = sp; //@line 13732
 return;
}
function __ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$026 = 0, $10 = 0, $15 = 0, $21 = 0.0, $24 = 0.0, $27 = 0, $34 = 0, $35 = 0, $38 = 0, $43 = 0, $46 = 0, $48 = 0, $50 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 23974
 $6 = HEAP32[$0 + 112 >> 2] | 0; //@line 23978
 $7 = $1 + 2 | 0; //@line 23979
 $8 = HEAP8[$7 >> 0] | 0; //@line 23980
 $10 = HEAPU8[$1 >> 0] | 0; //@line 23982
 $15 = HEAP8[(HEAP32[$0 + 72 >> 2] | 0) + ((HEAPU8[$6 + ($10 * 12 | 0) + 9 >> 0] | 0) * 24 | 0) + 2 >> 0] | 0; //@line 23987
 if ($8 << 24 >> 24 > $15 << 24 >> 24) {
  HEAP8[$7 >> 0] = $15; //@line 23990
  $27 = $15; //@line 23991
 } else {
  $27 = $8; //@line 23993
 }
 if (!$2) {
  $$0 = HEAP32[$6 + ($10 * 12 | 0) >> 2] | 0; //@line 23999
 } else {
  $$0 = $2; //@line 24001
 }
 $21 = +HEAPF32[$1 + 4 >> 2]; //@line 24004
 if ($21 > 0.0) {
  $24 = +HEAPF32[$1 + 8 >> 2]; //@line 24008
  if ($24 > 0.0) {
   $$026 = ~~+Math_floor(+($21 - +($27 << 24 >> 24 << 1 >>> 0) - $24)); //@line 24018
  } else {
   $$026 = $27; //@line 24020
  }
 } else {
  $$026 = $27; //@line 24023
 }
 $34 = $0 + 4 | 0; //@line 24025
 $35 = HEAP32[$34 >> 2] | 0; //@line 24026
 $38 = HEAP32[(HEAP32[$35 >> 2] | 0) + 72 >> 2] | 0; //@line 24029
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 24030
 FUNCTION_TABLE_vi[$38 & 1023]($35); //@line 24031
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 550; //@line 24034
  HEAP32[$AsyncCtx + 4 >> 2] = $34; //@line 24036
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 24038
  HEAP32[$AsyncCtx + 12 >> 2] = $$0; //@line 24040
  HEAP8[$AsyncCtx + 16 >> 0] = $$026; //@line 24042
  sp = STACKTOP; //@line 24043
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 24046
 $43 = HEAP32[$34 >> 2] | 0; //@line 24047
 $46 = HEAP32[(HEAP32[$43 >> 2] | 0) + 68 >> 2] | 0; //@line 24050
 $48 = HEAP16[$1 + 12 >> 1] | 0; //@line 24052
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 24053
 FUNCTION_TABLE_viiii[$46 & 7]($43, $$0, $$026, $48); //@line 24054
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 551; //@line 24057
  HEAP32[$AsyncCtx2 + 4 >> 2] = $34; //@line 24059
  sp = STACKTOP; //@line 24060
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 24063
 $50 = HEAP32[$34 >> 2] | 0; //@line 24064
 $53 = HEAP32[(HEAP32[$50 >> 2] | 0) + 76 >> 2] | 0; //@line 24067
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 24068
 FUNCTION_TABLE_vi[$53 & 1023]($50); //@line 24069
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 552; //@line 24072
  sp = STACKTOP; //@line 24073
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 24076
  return;
 }
}
function __ZN14lorawan_timersD2Ev($0) {
 $0 = $0 | 0;
 var $13 = 0, $16 = 0, $2 = 0, $20 = 0, $23 = 0, $27 = 0, $30 = 0, $34 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 9916
 $2 = HEAP32[$0 + 108 >> 2] | 0; //@line 9918
 do {
  if ($2 | 0) {
   $6 = HEAP32[$2 + 8 >> 2] | 0; //@line 9924
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 9925
   FUNCTION_TABLE_vi[$6 & 1023]($0 + 96 | 0); //@line 9926
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 284; //@line 9929
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 9931
    sp = STACKTOP; //@line 9932
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 9935
    break;
   }
  }
 } while (0);
 $9 = HEAP32[$0 + 88 >> 2] | 0; //@line 9941
 do {
  if ($9 | 0) {
   $13 = HEAP32[$9 + 8 >> 2] | 0; //@line 9947
   $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9948
   FUNCTION_TABLE_vi[$13 & 1023]($0 + 76 | 0); //@line 9949
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 285; //@line 9952
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 9954
    sp = STACKTOP; //@line 9955
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 9958
    break;
   }
  }
 } while (0);
 $16 = HEAP32[$0 + 68 >> 2] | 0; //@line 9964
 do {
  if ($16 | 0) {
   $20 = HEAP32[$16 + 8 >> 2] | 0; //@line 9970
   $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9971
   FUNCTION_TABLE_vi[$20 & 1023]($0 + 56 | 0); //@line 9972
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 286; //@line 9975
    HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 9977
    sp = STACKTOP; //@line 9978
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 9981
    break;
   }
  }
 } while (0);
 $23 = HEAP32[$0 + 48 >> 2] | 0; //@line 9987
 do {
  if ($23 | 0) {
   $27 = HEAP32[$23 + 8 >> 2] | 0; //@line 9993
   $AsyncCtx11 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9994
   FUNCTION_TABLE_vi[$27 & 1023]($0 + 36 | 0); //@line 9995
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 287; //@line 9998
    HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 10000
    sp = STACKTOP; //@line 10001
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 10004
    break;
   }
  }
 } while (0);
 $30 = HEAP32[$0 + 28 >> 2] | 0; //@line 10010
 if (!$30) {
  return;
 }
 $34 = HEAP32[$30 + 8 >> 2] | 0; //@line 10017
 $AsyncCtx15 = _emscripten_alloc_async_context(4, sp) | 0; //@line 10018
 FUNCTION_TABLE_vi[$34 & 1023]($0 + 16 | 0); //@line 10019
 if (___async) {
  HEAP32[$AsyncCtx15 >> 2] = 288; //@line 10022
  sp = STACKTOP; //@line 10023
  return;
 }
 _emscripten_free_async_context($AsyncCtx15 | 0); //@line 10026
 return;
}
function __ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_70($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $15 = 0, $16 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 21965
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21971
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21973
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 21975
 $9 = $6 + 32 | 0; //@line 21976
 $10 = $6 + 44 | 0; //@line 21977
 $11 = HEAP32[$10 >> 2] | 0; //@line 21978
 if (!$11) {
  return;
 }
 $13 = $8 + 1912 | 0; //@line 21983
 if (($13 | 0) == ($9 | 0)) {
  return;
 }
 $15 = $8 + 1924 | 0; //@line 21988
 $16 = HEAP32[$15 >> 2] | 0; //@line 21989
 if (!$16) {
  $25 = HEAP32[$11 + 4 >> 2] | 0; //@line 21993
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 21994
  FUNCTION_TABLE_vii[$25 & 31]($13, $9); //@line 21995
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 265; //@line 21998
   $26 = $ReallocAsyncCtx6 + 4 | 0; //@line 21999
   HEAP32[$26 >> 2] = $10; //@line 22000
   $27 = $ReallocAsyncCtx6 + 8 | 0; //@line 22001
   HEAP32[$27 >> 2] = $15; //@line 22002
   sp = STACKTOP; //@line 22003
   return;
  }
  ___async_unwind = 0; //@line 22006
  HEAP32[$ReallocAsyncCtx6 >> 2] = 265; //@line 22007
  $26 = $ReallocAsyncCtx6 + 4 | 0; //@line 22008
  HEAP32[$26 >> 2] = $10; //@line 22009
  $27 = $ReallocAsyncCtx6 + 8 | 0; //@line 22010
  HEAP32[$27 >> 2] = $15; //@line 22011
  sp = STACKTOP; //@line 22012
  return;
 } else {
  $19 = HEAP32[$16 + 8 >> 2] | 0; //@line 22016
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 22017
  FUNCTION_TABLE_vi[$19 & 1023]($13); //@line 22018
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 264; //@line 22021
   $20 = $ReallocAsyncCtx5 + 4 | 0; //@line 22022
   HEAP32[$20 >> 2] = $10; //@line 22023
   $21 = $ReallocAsyncCtx5 + 8 | 0; //@line 22024
   HEAP32[$21 >> 2] = $15; //@line 22025
   $22 = $ReallocAsyncCtx5 + 12 | 0; //@line 22026
   HEAP32[$22 >> 2] = $13; //@line 22027
   $23 = $ReallocAsyncCtx5 + 16 | 0; //@line 22028
   HEAP32[$23 >> 2] = $9; //@line 22029
   sp = STACKTOP; //@line 22030
   return;
  }
  ___async_unwind = 0; //@line 22033
  HEAP32[$ReallocAsyncCtx5 >> 2] = 264; //@line 22034
  $20 = $ReallocAsyncCtx5 + 4 | 0; //@line 22035
  HEAP32[$20 >> 2] = $10; //@line 22036
  $21 = $ReallocAsyncCtx5 + 8 | 0; //@line 22037
  HEAP32[$21 >> 2] = $15; //@line 22038
  $22 = $ReallocAsyncCtx5 + 12 | 0; //@line 22039
  HEAP32[$22 >> 2] = $13; //@line 22040
  $23 = $ReallocAsyncCtx5 + 16 | 0; //@line 22041
  HEAP32[$23 >> 2] = $9; //@line 22042
  sp = STACKTOP; //@line 22043
  return;
 }
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_421($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx36 = 0, sp = 0;
 sp = STACKTOP; //@line 32495
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32497
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32499
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32501
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32503
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32505
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx36 = _emscripten_realloc_async_context(24) | 0; //@line 32510
  _mbed_assert_internal(13612, 13621, 199); //@line 32511
  if (___async) {
   HEAP32[$ReallocAsyncCtx36 >> 2] = 320; //@line 32514
   $13 = $ReallocAsyncCtx36 + 4 | 0; //@line 32515
   HEAP32[$13 >> 2] = $2; //@line 32516
   $14 = $ReallocAsyncCtx36 + 8 | 0; //@line 32517
   HEAP32[$14 >> 2] = $4; //@line 32518
   $15 = $ReallocAsyncCtx36 + 12 | 0; //@line 32519
   HEAP32[$15 >> 2] = $6; //@line 32520
   $16 = $ReallocAsyncCtx36 + 16 | 0; //@line 32521
   HEAP32[$16 >> 2] = $8; //@line 32522
   $17 = $ReallocAsyncCtx36 + 20 | 0; //@line 32523
   HEAP32[$17 >> 2] = $10; //@line 32524
   sp = STACKTOP; //@line 32525
   return;
  }
  ___async_unwind = 0; //@line 32528
  HEAP32[$ReallocAsyncCtx36 >> 2] = 320; //@line 32529
  $13 = $ReallocAsyncCtx36 + 4 | 0; //@line 32530
  HEAP32[$13 >> 2] = $2; //@line 32531
  $14 = $ReallocAsyncCtx36 + 8 | 0; //@line 32532
  HEAP32[$14 >> 2] = $4; //@line 32533
  $15 = $ReallocAsyncCtx36 + 12 | 0; //@line 32534
  HEAP32[$15 >> 2] = $6; //@line 32535
  $16 = $ReallocAsyncCtx36 + 16 | 0; //@line 32536
  HEAP32[$16 >> 2] = $8; //@line 32537
  $17 = $ReallocAsyncCtx36 + 20 | 0; //@line 32538
  HEAP32[$17 >> 2] = $10; //@line 32539
  sp = STACKTOP; //@line 32540
  return;
 }
 $18 = $4 + 944 | 0; //@line 32543
 HEAP8[$18 >> 0] = HEAP8[$18 >> 0] | 34; //@line 32546
 $21 = HEAP32[$6 >> 2] | 0; //@line 32547
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(12) | 0; //@line 32549
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($21, $4 + 996 | 0, 1); //@line 32550
 if (___async) {
  HEAP32[$ReallocAsyncCtx13 >> 2] = 321; //@line 32553
  $23 = $ReallocAsyncCtx13 + 4 | 0; //@line 32554
  HEAP32[$23 >> 2] = $8; //@line 32555
  $24 = $ReallocAsyncCtx13 + 8 | 0; //@line 32556
  HEAP32[$24 >> 2] = $10; //@line 32557
  sp = STACKTOP; //@line 32558
  return;
 }
 ___async_unwind = 0; //@line 32561
 HEAP32[$ReallocAsyncCtx13 >> 2] = 321; //@line 32562
 $23 = $ReallocAsyncCtx13 + 4 | 0; //@line 32563
 HEAP32[$23 >> 2] = $8; //@line 32564
 $24 = $ReallocAsyncCtx13 + 8 | 0; //@line 32565
 HEAP32[$24 >> 2] = $10; //@line 32566
 sp = STACKTOP; //@line 32567
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_420($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx35 = 0, sp = 0;
 sp = STACKTOP; //@line 32416
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32418
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32420
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32422
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32424
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32426
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx35 = _emscripten_realloc_async_context(24) | 0; //@line 32431
  _mbed_assert_internal(13612, 13621, 199); //@line 32432
  if (___async) {
   HEAP32[$ReallocAsyncCtx35 >> 2] = 325; //@line 32435
   $13 = $ReallocAsyncCtx35 + 4 | 0; //@line 32436
   HEAP32[$13 >> 2] = $2; //@line 32437
   $14 = $ReallocAsyncCtx35 + 8 | 0; //@line 32438
   HEAP32[$14 >> 2] = $4; //@line 32439
   $15 = $ReallocAsyncCtx35 + 12 | 0; //@line 32440
   HEAP32[$15 >> 2] = $6; //@line 32441
   $16 = $ReallocAsyncCtx35 + 16 | 0; //@line 32442
   HEAP32[$16 >> 2] = $8; //@line 32443
   $17 = $ReallocAsyncCtx35 + 20 | 0; //@line 32444
   HEAP32[$17 >> 2] = $10; //@line 32445
   sp = STACKTOP; //@line 32446
   return;
  }
  ___async_unwind = 0; //@line 32449
  HEAP32[$ReallocAsyncCtx35 >> 2] = 325; //@line 32450
  $13 = $ReallocAsyncCtx35 + 4 | 0; //@line 32451
  HEAP32[$13 >> 2] = $2; //@line 32452
  $14 = $ReallocAsyncCtx35 + 8 | 0; //@line 32453
  HEAP32[$14 >> 2] = $4; //@line 32454
  $15 = $ReallocAsyncCtx35 + 12 | 0; //@line 32455
  HEAP32[$15 >> 2] = $6; //@line 32456
  $16 = $ReallocAsyncCtx35 + 16 | 0; //@line 32457
  HEAP32[$16 >> 2] = $8; //@line 32458
  $17 = $ReallocAsyncCtx35 + 20 | 0; //@line 32459
  HEAP32[$17 >> 2] = $10; //@line 32460
  sp = STACKTOP; //@line 32461
  return;
 }
 $18 = $4 + 944 | 0; //@line 32464
 HEAP8[$18 >> 0] = HEAP8[$18 >> 0] | 34; //@line 32467
 $21 = HEAP32[$6 >> 2] | 0; //@line 32468
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(12) | 0; //@line 32470
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($21, $4 + 996 | 0, 1); //@line 32471
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 326; //@line 32474
  $23 = $ReallocAsyncCtx12 + 4 | 0; //@line 32475
  HEAP32[$23 >> 2] = $8; //@line 32476
  $24 = $ReallocAsyncCtx12 + 8 | 0; //@line 32477
  HEAP32[$24 >> 2] = $10; //@line 32478
  sp = STACKTOP; //@line 32479
  return;
 }
 ___async_unwind = 0; //@line 32482
 HEAP32[$ReallocAsyncCtx12 >> 2] = 326; //@line 32483
 $23 = $ReallocAsyncCtx12 + 4 | 0; //@line 32484
 HEAP32[$23 >> 2] = $8; //@line 32485
 $24 = $ReallocAsyncCtx12 + 8 | 0; //@line 32486
 HEAP32[$24 >> 2] = $10; //@line 32487
 sp = STACKTOP; //@line 32488
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_419($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx34 = 0, sp = 0;
 sp = STACKTOP; //@line 32337
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32339
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32341
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32343
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32345
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32347
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx34 = _emscripten_realloc_async_context(24) | 0; //@line 32352
  _mbed_assert_internal(13612, 13621, 199); //@line 32353
  if (___async) {
   HEAP32[$ReallocAsyncCtx34 >> 2] = 328; //@line 32356
   $13 = $ReallocAsyncCtx34 + 4 | 0; //@line 32357
   HEAP32[$13 >> 2] = $2; //@line 32358
   $14 = $ReallocAsyncCtx34 + 8 | 0; //@line 32359
   HEAP32[$14 >> 2] = $4; //@line 32360
   $15 = $ReallocAsyncCtx34 + 12 | 0; //@line 32361
   HEAP32[$15 >> 2] = $6; //@line 32362
   $16 = $ReallocAsyncCtx34 + 16 | 0; //@line 32363
   HEAP32[$16 >> 2] = $8; //@line 32364
   $17 = $ReallocAsyncCtx34 + 20 | 0; //@line 32365
   HEAP32[$17 >> 2] = $10; //@line 32366
   sp = STACKTOP; //@line 32367
   return;
  }
  ___async_unwind = 0; //@line 32370
  HEAP32[$ReallocAsyncCtx34 >> 2] = 328; //@line 32371
  $13 = $ReallocAsyncCtx34 + 4 | 0; //@line 32372
  HEAP32[$13 >> 2] = $2; //@line 32373
  $14 = $ReallocAsyncCtx34 + 8 | 0; //@line 32374
  HEAP32[$14 >> 2] = $4; //@line 32375
  $15 = $ReallocAsyncCtx34 + 12 | 0; //@line 32376
  HEAP32[$15 >> 2] = $6; //@line 32377
  $16 = $ReallocAsyncCtx34 + 16 | 0; //@line 32378
  HEAP32[$16 >> 2] = $8; //@line 32379
  $17 = $ReallocAsyncCtx34 + 20 | 0; //@line 32380
  HEAP32[$17 >> 2] = $10; //@line 32381
  sp = STACKTOP; //@line 32382
  return;
 }
 $18 = $4 + 944 | 0; //@line 32385
 HEAP8[$18 >> 0] = HEAP8[$18 >> 0] | 34; //@line 32388
 $21 = HEAP32[$6 >> 2] | 0; //@line 32389
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(12) | 0; //@line 32391
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($21, $4 + 996 | 0, 1); //@line 32392
 if (___async) {
  HEAP32[$ReallocAsyncCtx11 >> 2] = 329; //@line 32395
  $23 = $ReallocAsyncCtx11 + 4 | 0; //@line 32396
  HEAP32[$23 >> 2] = $8; //@line 32397
  $24 = $ReallocAsyncCtx11 + 8 | 0; //@line 32398
  HEAP32[$24 >> 2] = $10; //@line 32399
  sp = STACKTOP; //@line 32400
  return;
 }
 ___async_unwind = 0; //@line 32403
 HEAP32[$ReallocAsyncCtx11 >> 2] = 329; //@line 32404
 $23 = $ReallocAsyncCtx11 + 4 | 0; //@line 32405
 HEAP32[$23 >> 2] = $8; //@line 32406
 $24 = $ReallocAsyncCtx11 + 8 | 0; //@line 32407
 HEAP32[$24 >> 2] = $10; //@line 32408
 sp = STACKTOP; //@line 32409
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_418($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx33 = 0, sp = 0;
 sp = STACKTOP; //@line 32258
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32260
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32262
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32264
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32266
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32268
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx33 = _emscripten_realloc_async_context(24) | 0; //@line 32273
  _mbed_assert_internal(13612, 13621, 199); //@line 32274
  if (___async) {
   HEAP32[$ReallocAsyncCtx33 >> 2] = 333; //@line 32277
   $13 = $ReallocAsyncCtx33 + 4 | 0; //@line 32278
   HEAP32[$13 >> 2] = $2; //@line 32279
   $14 = $ReallocAsyncCtx33 + 8 | 0; //@line 32280
   HEAP32[$14 >> 2] = $4; //@line 32281
   $15 = $ReallocAsyncCtx33 + 12 | 0; //@line 32282
   HEAP32[$15 >> 2] = $6; //@line 32283
   $16 = $ReallocAsyncCtx33 + 16 | 0; //@line 32284
   HEAP32[$16 >> 2] = $8; //@line 32285
   $17 = $ReallocAsyncCtx33 + 20 | 0; //@line 32286
   HEAP32[$17 >> 2] = $10; //@line 32287
   sp = STACKTOP; //@line 32288
   return;
  }
  ___async_unwind = 0; //@line 32291
  HEAP32[$ReallocAsyncCtx33 >> 2] = 333; //@line 32292
  $13 = $ReallocAsyncCtx33 + 4 | 0; //@line 32293
  HEAP32[$13 >> 2] = $2; //@line 32294
  $14 = $ReallocAsyncCtx33 + 8 | 0; //@line 32295
  HEAP32[$14 >> 2] = $4; //@line 32296
  $15 = $ReallocAsyncCtx33 + 12 | 0; //@line 32297
  HEAP32[$15 >> 2] = $6; //@line 32298
  $16 = $ReallocAsyncCtx33 + 16 | 0; //@line 32299
  HEAP32[$16 >> 2] = $8; //@line 32300
  $17 = $ReallocAsyncCtx33 + 20 | 0; //@line 32301
  HEAP32[$17 >> 2] = $10; //@line 32302
  sp = STACKTOP; //@line 32303
  return;
 }
 $18 = $4 + 944 | 0; //@line 32306
 HEAP8[$18 >> 0] = HEAP8[$18 >> 0] | 34; //@line 32309
 $21 = HEAP32[$6 >> 2] | 0; //@line 32310
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(12) | 0; //@line 32312
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($21, $4 + 996 | 0, 1); //@line 32313
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 334; //@line 32316
  $23 = $ReallocAsyncCtx10 + 4 | 0; //@line 32317
  HEAP32[$23 >> 2] = $8; //@line 32318
  $24 = $ReallocAsyncCtx10 + 8 | 0; //@line 32319
  HEAP32[$24 >> 2] = $10; //@line 32320
  sp = STACKTOP; //@line 32321
  return;
 }
 ___async_unwind = 0; //@line 32324
 HEAP32[$ReallocAsyncCtx10 >> 2] = 334; //@line 32325
 $23 = $ReallocAsyncCtx10 + 4 | 0; //@line 32326
 HEAP32[$23 >> 2] = $8; //@line 32327
 $24 = $ReallocAsyncCtx10 + 8 | 0; //@line 32328
 HEAP32[$24 >> 2] = $10; //@line 32329
 sp = STACKTOP; //@line 32330
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_417($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx32 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 32179
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32181
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32183
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32185
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32187
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32189
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx32 = _emscripten_realloc_async_context(24) | 0; //@line 32194
  _mbed_assert_internal(13612, 13621, 199); //@line 32195
  if (___async) {
   HEAP32[$ReallocAsyncCtx32 >> 2] = 336; //@line 32198
   $13 = $ReallocAsyncCtx32 + 4 | 0; //@line 32199
   HEAP32[$13 >> 2] = $2; //@line 32200
   $14 = $ReallocAsyncCtx32 + 8 | 0; //@line 32201
   HEAP32[$14 >> 2] = $4; //@line 32202
   $15 = $ReallocAsyncCtx32 + 12 | 0; //@line 32203
   HEAP32[$15 >> 2] = $6; //@line 32204
   $16 = $ReallocAsyncCtx32 + 16 | 0; //@line 32205
   HEAP32[$16 >> 2] = $8; //@line 32206
   $17 = $ReallocAsyncCtx32 + 20 | 0; //@line 32207
   HEAP32[$17 >> 2] = $10; //@line 32208
   sp = STACKTOP; //@line 32209
   return;
  }
  ___async_unwind = 0; //@line 32212
  HEAP32[$ReallocAsyncCtx32 >> 2] = 336; //@line 32213
  $13 = $ReallocAsyncCtx32 + 4 | 0; //@line 32214
  HEAP32[$13 >> 2] = $2; //@line 32215
  $14 = $ReallocAsyncCtx32 + 8 | 0; //@line 32216
  HEAP32[$14 >> 2] = $4; //@line 32217
  $15 = $ReallocAsyncCtx32 + 12 | 0; //@line 32218
  HEAP32[$15 >> 2] = $6; //@line 32219
  $16 = $ReallocAsyncCtx32 + 16 | 0; //@line 32220
  HEAP32[$16 >> 2] = $8; //@line 32221
  $17 = $ReallocAsyncCtx32 + 20 | 0; //@line 32222
  HEAP32[$17 >> 2] = $10; //@line 32223
  sp = STACKTOP; //@line 32224
  return;
 }
 $18 = $4 + 944 | 0; //@line 32227
 HEAP8[$18 >> 0] = HEAP8[$18 >> 0] | 34; //@line 32230
 $21 = HEAP32[$6 >> 2] | 0; //@line 32231
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 32233
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($21, $4 + 996 | 0, 1); //@line 32234
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 337; //@line 32237
  $23 = $ReallocAsyncCtx9 + 4 | 0; //@line 32238
  HEAP32[$23 >> 2] = $8; //@line 32239
  $24 = $ReallocAsyncCtx9 + 8 | 0; //@line 32240
  HEAP32[$24 >> 2] = $10; //@line 32241
  sp = STACKTOP; //@line 32242
  return;
 }
 ___async_unwind = 0; //@line 32245
 HEAP32[$ReallocAsyncCtx9 >> 2] = 337; //@line 32246
 $23 = $ReallocAsyncCtx9 + 4 | 0; //@line 32247
 HEAP32[$23 >> 2] = $8; //@line 32248
 $24 = $ReallocAsyncCtx9 + 8 | 0; //@line 32249
 HEAP32[$24 >> 2] = $10; //@line 32250
 sp = STACKTOP; //@line 32251
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_416($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx31 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 32100
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32102
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32104
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32106
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32108
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32110
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx31 = _emscripten_realloc_async_context(24) | 0; //@line 32115
  _mbed_assert_internal(13612, 13621, 199); //@line 32116
  if (___async) {
   HEAP32[$ReallocAsyncCtx31 >> 2] = 339; //@line 32119
   $13 = $ReallocAsyncCtx31 + 4 | 0; //@line 32120
   HEAP32[$13 >> 2] = $2; //@line 32121
   $14 = $ReallocAsyncCtx31 + 8 | 0; //@line 32122
   HEAP32[$14 >> 2] = $4; //@line 32123
   $15 = $ReallocAsyncCtx31 + 12 | 0; //@line 32124
   HEAP32[$15 >> 2] = $6; //@line 32125
   $16 = $ReallocAsyncCtx31 + 16 | 0; //@line 32126
   HEAP32[$16 >> 2] = $8; //@line 32127
   $17 = $ReallocAsyncCtx31 + 20 | 0; //@line 32128
   HEAP32[$17 >> 2] = $10; //@line 32129
   sp = STACKTOP; //@line 32130
   return;
  }
  ___async_unwind = 0; //@line 32133
  HEAP32[$ReallocAsyncCtx31 >> 2] = 339; //@line 32134
  $13 = $ReallocAsyncCtx31 + 4 | 0; //@line 32135
  HEAP32[$13 >> 2] = $2; //@line 32136
  $14 = $ReallocAsyncCtx31 + 8 | 0; //@line 32137
  HEAP32[$14 >> 2] = $4; //@line 32138
  $15 = $ReallocAsyncCtx31 + 12 | 0; //@line 32139
  HEAP32[$15 >> 2] = $6; //@line 32140
  $16 = $ReallocAsyncCtx31 + 16 | 0; //@line 32141
  HEAP32[$16 >> 2] = $8; //@line 32142
  $17 = $ReallocAsyncCtx31 + 20 | 0; //@line 32143
  HEAP32[$17 >> 2] = $10; //@line 32144
  sp = STACKTOP; //@line 32145
  return;
 }
 $18 = $4 + 944 | 0; //@line 32148
 HEAP8[$18 >> 0] = HEAP8[$18 >> 0] | 34; //@line 32151
 $21 = HEAP32[$6 >> 2] | 0; //@line 32152
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(12) | 0; //@line 32154
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($21, $4 + 996 | 0, 1); //@line 32155
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 340; //@line 32158
  $23 = $ReallocAsyncCtx8 + 4 | 0; //@line 32159
  HEAP32[$23 >> 2] = $8; //@line 32160
  $24 = $ReallocAsyncCtx8 + 8 | 0; //@line 32161
  HEAP32[$24 >> 2] = $10; //@line 32162
  sp = STACKTOP; //@line 32163
  return;
 }
 ___async_unwind = 0; //@line 32166
 HEAP32[$ReallocAsyncCtx8 >> 2] = 340; //@line 32167
 $23 = $ReallocAsyncCtx8 + 4 | 0; //@line 32168
 HEAP32[$23 >> 2] = $8; //@line 32169
 $24 = $ReallocAsyncCtx8 + 8 | 0; //@line 32170
 HEAP32[$24 >> 2] = $10; //@line 32171
 sp = STACKTOP; //@line 32172
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_415($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx30 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 32021
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32023
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32025
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32027
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32029
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32031
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx30 = _emscripten_realloc_async_context(24) | 0; //@line 32036
  _mbed_assert_internal(13612, 13621, 199); //@line 32037
  if (___async) {
   HEAP32[$ReallocAsyncCtx30 >> 2] = 347; //@line 32040
   $13 = $ReallocAsyncCtx30 + 4 | 0; //@line 32041
   HEAP32[$13 >> 2] = $2; //@line 32042
   $14 = $ReallocAsyncCtx30 + 8 | 0; //@line 32043
   HEAP32[$14 >> 2] = $4; //@line 32044
   $15 = $ReallocAsyncCtx30 + 12 | 0; //@line 32045
   HEAP32[$15 >> 2] = $6; //@line 32046
   $16 = $ReallocAsyncCtx30 + 16 | 0; //@line 32047
   HEAP32[$16 >> 2] = $8; //@line 32048
   $17 = $ReallocAsyncCtx30 + 20 | 0; //@line 32049
   HEAP32[$17 >> 2] = $10; //@line 32050
   sp = STACKTOP; //@line 32051
   return;
  }
  ___async_unwind = 0; //@line 32054
  HEAP32[$ReallocAsyncCtx30 >> 2] = 347; //@line 32055
  $13 = $ReallocAsyncCtx30 + 4 | 0; //@line 32056
  HEAP32[$13 >> 2] = $2; //@line 32057
  $14 = $ReallocAsyncCtx30 + 8 | 0; //@line 32058
  HEAP32[$14 >> 2] = $4; //@line 32059
  $15 = $ReallocAsyncCtx30 + 12 | 0; //@line 32060
  HEAP32[$15 >> 2] = $6; //@line 32061
  $16 = $ReallocAsyncCtx30 + 16 | 0; //@line 32062
  HEAP32[$16 >> 2] = $8; //@line 32063
  $17 = $ReallocAsyncCtx30 + 20 | 0; //@line 32064
  HEAP32[$17 >> 2] = $10; //@line 32065
  sp = STACKTOP; //@line 32066
  return;
 }
 $18 = $4 + 944 | 0; //@line 32069
 HEAP8[$18 >> 0] = HEAP8[$18 >> 0] | 34; //@line 32072
 $21 = HEAP32[$6 >> 2] | 0; //@line 32073
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 32075
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($21, $4 + 996 | 0, 1); //@line 32076
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 348; //@line 32079
  $23 = $ReallocAsyncCtx7 + 4 | 0; //@line 32080
  HEAP32[$23 >> 2] = $8; //@line 32081
  $24 = $ReallocAsyncCtx7 + 8 | 0; //@line 32082
  HEAP32[$24 >> 2] = $10; //@line 32083
  sp = STACKTOP; //@line 32084
  return;
 }
 ___async_unwind = 0; //@line 32087
 HEAP32[$ReallocAsyncCtx7 >> 2] = 348; //@line 32088
 $23 = $ReallocAsyncCtx7 + 4 | 0; //@line 32089
 HEAP32[$23 >> 2] = $8; //@line 32090
 $24 = $ReallocAsyncCtx7 + 8 | 0; //@line 32091
 HEAP32[$24 >> 2] = $10; //@line 32092
 sp = STACKTOP; //@line 32093
 return;
}
function _mbed_error_vfprintf($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$01213 = 0, $$014 = 0, $2 = 0, $24 = 0, $3 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0, $$01213$looptemp = 0;
 sp = STACKTOP; //@line 6526
 STACKTOP = STACKTOP + 128 | 0; //@line 6527
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 6527
 $2 = sp; //@line 6528
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 6529
 $3 = _vsnprintf($2, 128, $0, $1) | 0; //@line 6530
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 646; //@line 6533
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 6535
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 6537
  sp = STACKTOP; //@line 6538
  STACKTOP = sp; //@line 6539
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 6541
 if (($3 | 0) <= 0) {
  STACKTOP = sp; //@line 6544
  return;
 }
 if (!(HEAP32[5885] | 0)) {
  _serial_init(23544, 2, 3); //@line 6549
  $$01213 = 0; //@line 6550
  $$014 = 0; //@line 6550
 } else {
  $$01213 = 0; //@line 6552
  $$014 = 0; //@line 6552
 }
 while (1) {
  $$01213$looptemp = $$01213;
  $$01213 = HEAP8[$2 + $$014 >> 0] | 0; //@line 6556
  if (!($$01213$looptemp << 24 >> 24 == 13 | $$01213 << 24 >> 24 != 10)) {
   $AsyncCtx7 = _emscripten_alloc_async_context(24, sp) | 0; //@line 6561
   _serial_putc(23544, 13); //@line 6562
   if (___async) {
    label = 8; //@line 6565
    break;
   }
   _emscripten_free_async_context($AsyncCtx7 | 0); //@line 6568
  }
  $AsyncCtx3 = _emscripten_alloc_async_context(24, sp) | 0; //@line 6571
  _serial_putc(23544, $$01213 << 24 >> 24); //@line 6572
  if (___async) {
   label = 11; //@line 6575
   break;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 6578
  $24 = $$014 + 1 | 0; //@line 6579
  if (($24 | 0) == ($3 | 0)) {
   label = 13; //@line 6582
   break;
  } else {
   $$014 = $24; //@line 6585
  }
 }
 if ((label | 0) == 8) {
  HEAP32[$AsyncCtx7 >> 2] = 647; //@line 6589
  HEAP8[$AsyncCtx7 + 4 >> 0] = $$01213; //@line 6591
  HEAP32[$AsyncCtx7 + 8 >> 2] = $$014; //@line 6593
  HEAP32[$AsyncCtx7 + 12 >> 2] = $3; //@line 6595
  HEAP32[$AsyncCtx7 + 16 >> 2] = $2; //@line 6597
  HEAP32[$AsyncCtx7 + 20 >> 2] = $2; //@line 6599
  sp = STACKTOP; //@line 6600
  STACKTOP = sp; //@line 6601
  return;
 } else if ((label | 0) == 11) {
  HEAP32[$AsyncCtx3 >> 2] = 648; //@line 6604
  HEAP32[$AsyncCtx3 + 4 >> 2] = $$014; //@line 6606
  HEAP32[$AsyncCtx3 + 8 >> 2] = $3; //@line 6608
  HEAP32[$AsyncCtx3 + 12 >> 2] = $2; //@line 6610
  HEAP8[$AsyncCtx3 + 16 >> 0] = $$01213; //@line 6612
  HEAP32[$AsyncCtx3 + 20 >> 2] = $2; //@line 6614
  sp = STACKTOP; //@line 6615
  STACKTOP = sp; //@line 6616
  return;
 } else if ((label | 0) == 13) {
  STACKTOP = sp; //@line 6619
  return;
 }
}
function _mbedtls_cipher_update__async_cb_245($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$1 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $26 = 0, $27 = 0, $29 = 0, $34 = 0, $4 = 0, $43 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $52 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 8236
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8238
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8240
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8242
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 8244
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 8246
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 8248
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 8250
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 8252
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 8254
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 8256
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 8258
 if ($AsyncRetVal | 0) {
  $$1 = $AsyncRetVal; //@line 8261
  $52 = ___async_retval; //@line 8262
  HEAP32[$52 >> 2] = $$1; //@line 8263
  return;
 }
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + $4; //@line 8268
 HEAP32[$8 >> 2] = 0; //@line 8270
 $26 = $10 + $12 | 0; //@line 8271
 $27 = $14 - $12 | 0; //@line 8272
 if (!$27) {
  $$1 = 0; //@line 8275
  $52 = ___async_retval; //@line 8276
  HEAP32[$52 >> 2] = $$1; //@line 8277
  return;
 }
 $29 = ($27 >>> 0) % ($4 >>> 0) | 0; //@line 8280
 if (!$29) {
  $$0 = (HEAP32[$16 >> 2] | 0) == 0 ? $4 : 0; //@line 8286
 } else {
  $$0 = $29; //@line 8288
 }
 $34 = $27 - $$0 | 0; //@line 8291
 _memcpy($18 + 20 | 0, $26 + $34 | 0, $$0 | 0) | 0; //@line 8293
 HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + $$0; //@line 8296
 if (!$34) {
  $$1 = 0; //@line 8299
  $52 = ___async_retval; //@line 8300
  HEAP32[$52 >> 2] = $$1; //@line 8301
  return;
 }
 $43 = HEAP32[(HEAP32[(HEAP32[$20 >> 2] | 0) + 28 >> 2] | 0) + 8 >> 2] | 0; //@line 8308
 $45 = HEAP32[$18 + 60 >> 2] | 0; //@line 8310
 $46 = HEAP32[$16 >> 2] | 0; //@line 8311
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 8313
 $48 = FUNCTION_TABLE_iiiiiii[$43 & 3]($45, $46, $34, $18 + 40 | 0, $26, $6 + $4 | 0) | 0; //@line 8314
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 593; //@line 8317
  $49 = $ReallocAsyncCtx3 + 4 | 0; //@line 8318
  HEAP32[$49 >> 2] = $2; //@line 8319
  $50 = $ReallocAsyncCtx3 + 8 | 0; //@line 8320
  HEAP32[$50 >> 2] = $34; //@line 8321
  sp = STACKTOP; //@line 8322
  return;
 }
 HEAP32[___async_retval >> 2] = $48; //@line 8326
 ___async_unwind = 0; //@line 8327
 HEAP32[$ReallocAsyncCtx3 >> 2] = 593; //@line 8328
 $49 = $ReallocAsyncCtx3 + 4 | 0; //@line 8329
 HEAP32[$49 >> 2] = $2; //@line 8330
 $50 = $ReallocAsyncCtx3 + 8 | 0; //@line 8331
 HEAP32[$50 >> 2] = $34; //@line 8332
 sp = STACKTOP; //@line 8333
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_140($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 26871
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26875
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26877
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 26879
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26881
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 26883
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26885
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 26887
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 26889
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 26891
 $22 = HEAP8[$0 + 44 >> 0] & 1; //@line 26894
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 26896
 do {
  if ((HEAP32[$0 + 4 >> 2] | 0) > 1) {
   $26 = $4 + 24 | 0; //@line 26900
   $27 = $6 + 24 | 0; //@line 26901
   $28 = $4 + 8 | 0; //@line 26902
   $29 = $6 + 54 | 0; //@line 26903
   if (!(HEAP8[$29 >> 0] | 0)) {
    if (!(HEAP8[$10 >> 0] | 0)) {
     if (HEAP8[$14 >> 0] | 0) {
      if (!(HEAP32[$28 >> 2] & 1)) {
       break;
      }
     }
    } else {
     if ((HEAP32[$27 >> 2] | 0) == 1) {
      break;
     }
     if (!(HEAP32[$28 >> 2] & 2)) {
      break;
     }
    }
    HEAP8[$10 >> 0] = 0; //@line 26933
    HEAP8[$14 >> 0] = 0; //@line 26934
    $ReallocAsyncCtx = _emscripten_realloc_async_context(60) | 0; //@line 26935
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($26, $6, $16, $18, $20, $22); //@line 26936
    if (!___async) {
     ___async_unwind = 0; //@line 26939
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 718; //@line 26941
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $26; //@line 26943
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $24; //@line 26945
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $29; //@line 26947
    HEAP8[$ReallocAsyncCtx + 16 >> 0] = $8; //@line 26949
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 26951
    HEAP8[$ReallocAsyncCtx + 24 >> 0] = $12; //@line 26953
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 26955
    HEAP32[$ReallocAsyncCtx + 32 >> 2] = $27; //@line 26957
    HEAP32[$ReallocAsyncCtx + 36 >> 2] = $28; //@line 26959
    HEAP32[$ReallocAsyncCtx + 40 >> 2] = $6; //@line 26961
    HEAP32[$ReallocAsyncCtx + 44 >> 2] = $16; //@line 26963
    HEAP32[$ReallocAsyncCtx + 48 >> 2] = $18; //@line 26965
    HEAP32[$ReallocAsyncCtx + 52 >> 2] = $20; //@line 26967
    HEAP8[$ReallocAsyncCtx + 56 >> 0] = $22 & 1; //@line 26970
    sp = STACKTOP; //@line 26971
    return;
   }
  }
 } while (0);
 HEAP8[$10 >> 0] = $8; //@line 26976
 HEAP8[$14 >> 0] = $12; //@line 26977
 return;
}
function __Z28compute_skeys_for_join_framePKhS0_tPhS1_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0$$sroa_idx12 = 0, $10 = 0, $12 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 21097
 STACKTOP = STACKTOP + 16 | 0; //@line 21098
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 21098
 $5 = sp; //@line 21099
 _mbedtls_aes_init(23256); //@line 21100
 $6 = _mbedtls_aes_setkey_enc(23256, $0, 128) | 0; //@line 21101
 if ($6 | 0) {
  $$0 = $6; //@line 21104
  _mbedtls_aes_free(23256); //@line 21105
  STACKTOP = sp; //@line 21106
  return $$0 | 0; //@line 21106
 }
 $8 = $5 + 9 | 0; //@line 21108
 HEAP8[$8 >> 0] = 0; //@line 21109
 HEAP8[$8 + 1 >> 0] = 0; //@line 21109
 HEAP8[$8 + 2 >> 0] = 0; //@line 21109
 HEAP8[$8 + 3 >> 0] = 0; //@line 21109
 HEAP8[$8 + 4 >> 0] = 0; //@line 21109
 HEAP8[$8 + 5 >> 0] = 0; //@line 21109
 HEAP8[$8 + 6 >> 0] = 0; //@line 21109
 HEAP8[$5 >> 0] = 1; //@line 21110
 $9 = $5 + 1 | 0; //@line 21111
 HEAP8[$9 >> 0] = HEAP8[$1 >> 0] | 0; //@line 21112
 HEAP8[$9 + 1 >> 0] = HEAP8[$1 + 1 >> 0] | 0; //@line 21112
 HEAP8[$9 + 2 >> 0] = HEAP8[$1 + 2 >> 0] | 0; //@line 21112
 HEAP8[$9 + 3 >> 0] = HEAP8[$1 + 3 >> 0] | 0; //@line 21112
 HEAP8[$9 + 4 >> 0] = HEAP8[$1 + 4 >> 0] | 0; //@line 21112
 HEAP8[$9 + 5 >> 0] = HEAP8[$1 + 5 >> 0] | 0; //@line 21112
 $$0$$sroa_idx12 = $5 + 7 | 0; //@line 21113
 HEAP8[$$0$$sroa_idx12 >> 0] = $2; //@line 21114
 HEAP8[$$0$$sroa_idx12 + 1 >> 0] = $2 >> 8; //@line 21114
 $10 = _mbedtls_aes_crypt_ecb(23256, 1, $5, $3) | 0; //@line 21115
 if ($10 | 0) {
  $$0 = $10; //@line 21118
  _mbedtls_aes_free(23256); //@line 21119
  STACKTOP = sp; //@line 21120
  return $$0 | 0; //@line 21120
 }
 $12 = $5 + 9 | 0; //@line 21122
 HEAP8[$12 >> 0] = 0; //@line 21123
 HEAP8[$12 + 1 >> 0] = 0; //@line 21123
 HEAP8[$12 + 2 >> 0] = 0; //@line 21123
 HEAP8[$12 + 3 >> 0] = 0; //@line 21123
 HEAP8[$12 + 4 >> 0] = 0; //@line 21123
 HEAP8[$12 + 5 >> 0] = 0; //@line 21123
 HEAP8[$12 + 6 >> 0] = 0; //@line 21123
 HEAP8[$5 >> 0] = 2; //@line 21124
 HEAP8[$9 >> 0] = HEAP8[$1 >> 0] | 0; //@line 21125
 HEAP8[$9 + 1 >> 0] = HEAP8[$1 + 1 >> 0] | 0; //@line 21125
 HEAP8[$9 + 2 >> 0] = HEAP8[$1 + 2 >> 0] | 0; //@line 21125
 HEAP8[$9 + 3 >> 0] = HEAP8[$1 + 3 >> 0] | 0; //@line 21125
 HEAP8[$9 + 4 >> 0] = HEAP8[$1 + 4 >> 0] | 0; //@line 21125
 HEAP8[$9 + 5 >> 0] = HEAP8[$1 + 5 >> 0] | 0; //@line 21125
 HEAP8[$$0$$sroa_idx12 >> 0] = $2; //@line 21126
 HEAP8[$$0$$sroa_idx12 + 1 >> 0] = $2 >> 8; //@line 21126
 $$0 = _mbedtls_aes_crypt_ecb(23256, 1, $5, $4) | 0; //@line 21128
 _mbedtls_aes_free(23256); //@line 21129
 STACKTOP = sp; //@line 21130
 return $$0 | 0; //@line 21130
}
function __ZN7LoRaMac21send_frame_on_channelEh__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $18 = 0, $2 = 0, $21 = 0, $24 = 0, $27 = 0, $30 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 27519
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27521
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27523
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27525
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27527
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27529
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27531
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 27533
 $15 = $2 + 264 | 0; //@line 27534
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($15) | 0) + 4 >> 2] = 1; //@line 27537
 $18 = $2 + 288 | 0; //@line 27538
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($18) | 0) + 4 >> 2] = 1; //@line 27541
 $21 = HEAP8[$4 >> 0] | 0; //@line 27542
 HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($18) | 0) + 8 >> 0] = $21; //@line 27545
 $24 = HEAP8[$6 >> 0] | 0; //@line 27546
 HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($18) | 0) + 9 >> 0] = $24; //@line 27549
 $27 = HEAP32[$8 >> 2] | 0; //@line 27550
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($18) | 0) + 12 >> 2] = $27; //@line 27553
 $30 = HEAP32[$8 >> 2] | 0; //@line 27554
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($15) | 0) + 8 >> 2] = $30; //@line 27557
 $34 = HEAP32[$2 + 356 >> 2] | 0; //@line 27559
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 27561
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($34, $2 + 996 | 0, 1e3); //@line 27562
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 421; //@line 27565
  $36 = $ReallocAsyncCtx2 + 4 | 0; //@line 27566
  HEAP32[$36 >> 2] = $2; //@line 27567
  $37 = $ReallocAsyncCtx2 + 8 | 0; //@line 27568
  HEAP32[$37 >> 2] = $10; //@line 27569
  $38 = $ReallocAsyncCtx2 + 12 | 0; //@line 27570
  HEAP32[$38 >> 2] = $12; //@line 27571
  $39 = $ReallocAsyncCtx2 + 16 | 0; //@line 27572
  HEAP32[$39 >> 2] = $6; //@line 27573
  $40 = $ReallocAsyncCtx2 + 20 | 0; //@line 27574
  HEAP32[$40 >> 2] = $14; //@line 27575
  sp = STACKTOP; //@line 27576
  return;
 }
 ___async_unwind = 0; //@line 27579
 HEAP32[$ReallocAsyncCtx2 >> 2] = 421; //@line 27580
 $36 = $ReallocAsyncCtx2 + 4 | 0; //@line 27581
 HEAP32[$36 >> 2] = $2; //@line 27582
 $37 = $ReallocAsyncCtx2 + 8 | 0; //@line 27583
 HEAP32[$37 >> 2] = $10; //@line 27584
 $38 = $ReallocAsyncCtx2 + 12 | 0; //@line 27585
 HEAP32[$38 >> 2] = $12; //@line 27586
 $39 = $ReallocAsyncCtx2 + 16 | 0; //@line 27587
 HEAP32[$39 >> 2] = $6; //@line 27588
 $40 = $ReallocAsyncCtx2 + 20 | 0; //@line 27589
 HEAP32[$40 >> 2] = $14; //@line 27590
 sp = STACKTOP; //@line 27591
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $4 = 0, $43 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 26755
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26759
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26761
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 26763
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26765
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 26767
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26769
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 26771
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 26773
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 26775
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 26777
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 26779
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 26781
 $28 = HEAP8[$0 + 56 >> 0] & 1; //@line 26784
 $43 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 26785
 do {
  if ($43 >>> 0 < $4 >>> 0) {
   if (!(HEAP8[$6 >> 0] | 0)) {
    if (!(HEAP8[$10 >> 0] | 0)) {
     if (HEAP8[$14 >> 0] | 0) {
      if (!(HEAP32[$18 >> 2] & 1)) {
       break;
      }
     }
    } else {
     if ((HEAP32[$16 >> 2] | 0) == 1) {
      break;
     }
     if (!(HEAP32[$18 >> 2] & 2)) {
      break;
     }
    }
    HEAP8[$10 >> 0] = 0; //@line 26818
    HEAP8[$14 >> 0] = 0; //@line 26819
    $ReallocAsyncCtx = _emscripten_realloc_async_context(60) | 0; //@line 26820
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($43, $20, $22, $24, $26, $28); //@line 26821
    if (!___async) {
     ___async_unwind = 0; //@line 26824
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 718; //@line 26826
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $43; //@line 26828
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 26830
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 26832
    HEAP8[$ReallocAsyncCtx + 16 >> 0] = $8; //@line 26834
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 26836
    HEAP8[$ReallocAsyncCtx + 24 >> 0] = $12; //@line 26838
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 26840
    HEAP32[$ReallocAsyncCtx + 32 >> 2] = $16; //@line 26842
    HEAP32[$ReallocAsyncCtx + 36 >> 2] = $18; //@line 26844
    HEAP32[$ReallocAsyncCtx + 40 >> 2] = $20; //@line 26846
    HEAP32[$ReallocAsyncCtx + 44 >> 2] = $22; //@line 26848
    HEAP32[$ReallocAsyncCtx + 48 >> 2] = $24; //@line 26850
    HEAP32[$ReallocAsyncCtx + 52 >> 2] = $26; //@line 26852
    HEAP8[$ReallocAsyncCtx + 56 >> 0] = $28 & 1; //@line 26855
    sp = STACKTOP; //@line 26856
    return;
   }
  }
 } while (0);
 HEAP8[$10 >> 0] = $8; //@line 26861
 HEAP8[$14 >> 0] = $12; //@line 26862
 return;
}
function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0, aligned_dest_end = 0, block_aligned_dest_end = 0, dest_end = 0;
 if ((num | 0) >= 8192) {
  return _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0; //@line 35159
 }
 ret = dest | 0; //@line 35162
 dest_end = dest + num | 0; //@line 35163
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if (!num) return ret | 0; //@line 35167
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 35168
   dest = dest + 1 | 0; //@line 35169
   src = src + 1 | 0; //@line 35170
   num = num - 1 | 0; //@line 35171
  }
  aligned_dest_end = dest_end & -4 | 0; //@line 35173
  block_aligned_dest_end = aligned_dest_end - 64 | 0; //@line 35174
  while ((dest | 0) <= (block_aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 35176
   HEAP32[dest + 4 >> 2] = HEAP32[src + 4 >> 2]; //@line 35177
   HEAP32[dest + 8 >> 2] = HEAP32[src + 8 >> 2]; //@line 35178
   HEAP32[dest + 12 >> 2] = HEAP32[src + 12 >> 2]; //@line 35179
   HEAP32[dest + 16 >> 2] = HEAP32[src + 16 >> 2]; //@line 35180
   HEAP32[dest + 20 >> 2] = HEAP32[src + 20 >> 2]; //@line 35181
   HEAP32[dest + 24 >> 2] = HEAP32[src + 24 >> 2]; //@line 35182
   HEAP32[dest + 28 >> 2] = HEAP32[src + 28 >> 2]; //@line 35183
   HEAP32[dest + 32 >> 2] = HEAP32[src + 32 >> 2]; //@line 35184
   HEAP32[dest + 36 >> 2] = HEAP32[src + 36 >> 2]; //@line 35185
   HEAP32[dest + 40 >> 2] = HEAP32[src + 40 >> 2]; //@line 35186
   HEAP32[dest + 44 >> 2] = HEAP32[src + 44 >> 2]; //@line 35187
   HEAP32[dest + 48 >> 2] = HEAP32[src + 48 >> 2]; //@line 35188
   HEAP32[dest + 52 >> 2] = HEAP32[src + 52 >> 2]; //@line 35189
   HEAP32[dest + 56 >> 2] = HEAP32[src + 56 >> 2]; //@line 35190
   HEAP32[dest + 60 >> 2] = HEAP32[src + 60 >> 2]; //@line 35191
   dest = dest + 64 | 0; //@line 35192
   src = src + 64 | 0; //@line 35193
  }
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 35196
   dest = dest + 4 | 0; //@line 35197
   src = src + 4 | 0; //@line 35198
  }
 } else {
  aligned_dest_end = dest_end - 4 | 0; //@line 35202
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 35204
   HEAP8[dest + 1 >> 0] = HEAP8[src + 1 >> 0] | 0; //@line 35205
   HEAP8[dest + 2 >> 0] = HEAP8[src + 2 >> 0] | 0; //@line 35206
   HEAP8[dest + 3 >> 0] = HEAP8[src + 3 >> 0] | 0; //@line 35207
   dest = dest + 4 | 0; //@line 35208
   src = src + 4 | 0; //@line 35209
  }
 }
 while ((dest | 0) < (dest_end | 0)) {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 35214
  dest = dest + 1 | 0; //@line 35215
  src = src + 1 | 0; //@line 35216
 }
 return ret | 0; //@line 35218
}
function _main__async_cb_439($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 34556
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34558
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34560
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 34562
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 34564
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 34566
 _mbed_trace_init() | 0; //@line 34567
 if (!(__ZN16LoRaWANInterface10initializeEPN6events10EventQueueE(23828, 23624) | 0)) {
  $14 = $10 + 4 | 0; //@line 34572
  HEAP32[$14 >> 2] = 0; //@line 34574
  HEAP32[$14 + 4 >> 2] = 0; //@line 34577
  HEAP32[$10 >> 2] = 7; //@line 34578
  $18 = $10 + 12 | 0; //@line 34579
  HEAP32[$18 >> 2] = 10184; //@line 34580
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(28) | 0; //@line 34581
  __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE(23552, $10); //@line 34582
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 666; //@line 34585
   $19 = $ReallocAsyncCtx11 + 4 | 0; //@line 34586
   HEAP32[$19 >> 2] = $2; //@line 34587
   $20 = $ReallocAsyncCtx11 + 8 | 0; //@line 34588
   HEAP32[$20 >> 2] = $4; //@line 34589
   $21 = $ReallocAsyncCtx11 + 12 | 0; //@line 34590
   HEAP32[$21 >> 2] = $6; //@line 34591
   $22 = $ReallocAsyncCtx11 + 16 | 0; //@line 34592
   HEAP32[$22 >> 2] = $18; //@line 34593
   $23 = $ReallocAsyncCtx11 + 20 | 0; //@line 34594
   HEAP32[$23 >> 2] = $8; //@line 34595
   $24 = $ReallocAsyncCtx11 + 24 | 0; //@line 34596
   HEAP32[$24 >> 2] = $10; //@line 34597
   sp = STACKTOP; //@line 34598
   return;
  }
  ___async_unwind = 0; //@line 34601
  HEAP32[$ReallocAsyncCtx11 >> 2] = 666; //@line 34602
  $19 = $ReallocAsyncCtx11 + 4 | 0; //@line 34603
  HEAP32[$19 >> 2] = $2; //@line 34604
  $20 = $ReallocAsyncCtx11 + 8 | 0; //@line 34605
  HEAP32[$20 >> 2] = $4; //@line 34606
  $21 = $ReallocAsyncCtx11 + 12 | 0; //@line 34607
  HEAP32[$21 >> 2] = $6; //@line 34608
  $22 = $ReallocAsyncCtx11 + 16 | 0; //@line 34609
  HEAP32[$22 >> 2] = $18; //@line 34610
  $23 = $ReallocAsyncCtx11 + 20 | 0; //@line 34611
  HEAP32[$23 >> 2] = $8; //@line 34612
  $24 = $ReallocAsyncCtx11 + 24 | 0; //@line 34613
  HEAP32[$24 >> 2] = $10; //@line 34614
  sp = STACKTOP; //@line 34615
  return;
 } else {
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 34618
  _puts(16022) | 0; //@line 34619
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 665; //@line 34622
   sp = STACKTOP; //@line 34623
   return;
  }
  ___async_unwind = 0; //@line 34626
  HEAP32[$ReallocAsyncCtx7 >> 2] = 665; //@line 34627
  sp = STACKTOP; //@line 34628
  return;
 }
}
function __ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $18 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, sp = 0;
 sp = STACKTOP; //@line 1180
 STACKTOP = STACKTOP + 32 | 0; //@line 1181
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 1181
 $vararg_buffer6 = sp + 24 | 0; //@line 1182
 $vararg_buffer3 = sp + 16 | 0; //@line 1183
 $vararg_buffer = sp; //@line 1184
 $5 = $3 & 65535; //@line 1186
 HEAP32[$vararg_buffer >> 2] = $1; //@line 1187
 HEAP32[$vararg_buffer + 4 >> 2] = $2 << 24 >> 24; //@line 1189
 HEAP32[$vararg_buffer + 8 >> 2] = $5; //@line 1191
 _mbed_tracef(16, 10968, 10973, $vararg_buffer); //@line 1192
 $8 = HEAP32[(HEAP32[$0 >> 2] | 0) + 32 >> 2] | 0; //@line 1195
 $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 1196
 FUNCTION_TABLE_vii[$8 & 31]($0, $1); //@line 1197
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 69; //@line 1200
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 1202
  HEAP8[$AsyncCtx + 8 >> 0] = $2; //@line 1204
  HEAP32[$AsyncCtx + 12 >> 2] = $5; //@line 1206
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer3; //@line 1208
  HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer3; //@line 1210
  HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer6; //@line 1212
  HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer6; //@line 1214
  sp = STACKTOP; //@line 1215
  STACKTOP = sp; //@line 1216
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 1218
 $18 = HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] | 0; //@line 1221
 $AsyncCtx10 = _emscripten_alloc_async_context(24, sp) | 0; //@line 1222
 FUNCTION_TABLE_viiiiiiiiiiiiii[$18 & 1]($0, 0, $2, 0, 0, 4800, 0, 5, 0, 0, 0, 0, 0, $5); //@line 1223
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 70; //@line 1226
  HEAP32[$AsyncCtx10 + 4 >> 2] = $0; //@line 1228
  HEAP32[$AsyncCtx10 + 8 >> 2] = $vararg_buffer3; //@line 1230
  HEAP32[$AsyncCtx10 + 12 >> 2] = $vararg_buffer3; //@line 1232
  HEAP32[$AsyncCtx10 + 16 >> 2] = $vararg_buffer6; //@line 1234
  HEAP32[$AsyncCtx10 + 20 >> 2] = $vararg_buffer6; //@line 1236
  sp = STACKTOP; //@line 1237
  STACKTOP = sp; //@line 1238
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx10 | 0); //@line 1240
  HEAP8[$0 + 688 >> 0] = 2; //@line 1242
  HEAP32[$vararg_buffer3 >> 2] = 3; //@line 1243
  _mbed_tracef(16, 10968, 11025, $vararg_buffer3); //@line 1244
  __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 1245
  HEAP32[$vararg_buffer6 >> 2] = 3; //@line 1246
  _mbed_tracef(16, 10968, 11054, $vararg_buffer6); //@line 1247
  STACKTOP = sp; //@line 1248
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_349($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 26456
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26460
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26462
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26464
 $10 = HEAP16[$0 + 20 >> 1] | 0; //@line 26466
 $12 = HEAP16[$0 + 22 >> 1] | 0; //@line 26468
 $14 = HEAP8[$0 + 24 >> 0] | 0; //@line 26470
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 26472
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 26474
 $19 = $4 + 12 | 0; //@line 26476
 HEAP32[$19 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 26477
 $20 = $4 + 16 | 0; //@line 26478
 HEAP32[$20 >> 2] = $8; //@line 26479
 HEAP16[$4 + 20 >> 1] = $10; //@line 26481
 HEAP16[$4 + 22 >> 1] = $12; //@line 26483
 HEAP8[$4 + 24 >> 0] = $14; //@line 26485
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 26486
 $24 = _equeue_alloc($16, 28) | 0; //@line 26487
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 355; //@line 26490
  $25 = $ReallocAsyncCtx7 + 4 | 0; //@line 26491
  HEAP32[$25 >> 2] = $20; //@line 26492
  $26 = $ReallocAsyncCtx7 + 8 | 0; //@line 26493
  HEAP32[$26 >> 2] = $16; //@line 26494
  $27 = $ReallocAsyncCtx7 + 12 | 0; //@line 26495
  HEAP32[$27 >> 2] = $4; //@line 26496
  $28 = $ReallocAsyncCtx7 + 16 | 0; //@line 26497
  HEAP32[$28 >> 2] = $19; //@line 26498
  $29 = $ReallocAsyncCtx7 + 20 | 0; //@line 26499
  HEAP32[$29 >> 2] = $6; //@line 26500
  $30 = $ReallocAsyncCtx7 + 24 | 0; //@line 26501
  HEAP32[$30 >> 2] = $18; //@line 26502
  $31 = $ReallocAsyncCtx7 + 28 | 0; //@line 26503
  HEAP32[$31 >> 2] = $19; //@line 26504
  sp = STACKTOP; //@line 26505
  return;
 }
 HEAP32[___async_retval >> 2] = $24; //@line 26509
 ___async_unwind = 0; //@line 26510
 HEAP32[$ReallocAsyncCtx7 >> 2] = 355; //@line 26511
 $25 = $ReallocAsyncCtx7 + 4 | 0; //@line 26512
 HEAP32[$25 >> 2] = $20; //@line 26513
 $26 = $ReallocAsyncCtx7 + 8 | 0; //@line 26514
 HEAP32[$26 >> 2] = $16; //@line 26515
 $27 = $ReallocAsyncCtx7 + 12 | 0; //@line 26516
 HEAP32[$27 >> 2] = $4; //@line 26517
 $28 = $ReallocAsyncCtx7 + 16 | 0; //@line 26518
 HEAP32[$28 >> 2] = $19; //@line 26519
 $29 = $ReallocAsyncCtx7 + 20 | 0; //@line 26520
 HEAP32[$29 >> 2] = $6; //@line 26521
 $30 = $ReallocAsyncCtx7 + 24 | 0; //@line 26522
 HEAP32[$30 >> 2] = $18; //@line 26523
 $31 = $ReallocAsyncCtx7 + 28 | 0; //@line 26524
 HEAP32[$31 >> 2] = $19; //@line 26525
 sp = STACKTOP; //@line 26526
 return;
}
function _equeue_alloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$038$sink$i = 0, $$03842$i = 0, $$1$i9 = 0, $10 = 0, $11 = 0, $14 = 0, $17 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 3323
 do {
  if (HEAP8[$0 + 184 >> 0] | 0) {
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 3329
   _wait_ms(10); //@line 3330
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 128; //@line 3333
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 3335
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 3337
    sp = STACKTOP; //@line 3338
    return 0; //@line 3339
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 3341
    break;
   }
  }
 } while (0);
 $8 = $1 + 39 & -4; //@line 3347
 $9 = $0 + 156 | 0; //@line 3348
 _equeue_mutex_lock($9); //@line 3349
 $10 = $0 + 24 | 0; //@line 3350
 $11 = HEAP32[$10 >> 2] | 0; //@line 3351
 L7 : do {
  if (!$11) {
   label = 11; //@line 3355
  } else {
   $$03842$i = $10; //@line 3357
   $14 = $11; //@line 3357
   while (1) {
    if ((HEAP32[$14 >> 2] | 0) >>> 0 >= $8 >>> 0) {
     break;
    }
    $20 = $14 + 8 | 0; //@line 3364
    $21 = HEAP32[$20 >> 2] | 0; //@line 3365
    if (!$21) {
     label = 11; //@line 3368
     break L7;
    } else {
     $$03842$i = $20; //@line 3371
     $14 = $21; //@line 3371
    }
   }
   $17 = HEAP32[$14 + 12 >> 2] | 0; //@line 3375
   if (!$17) {
    $$038$sink$i = $$03842$i; //@line 3378
   } else {
    HEAP32[$$03842$i >> 2] = $17; //@line 3380
    $$038$sink$i = $17 + 8 | 0; //@line 3382
   }
   HEAP32[$$038$sink$i >> 2] = HEAP32[$14 + 8 >> 2]; //@line 3386
   _equeue_mutex_unlock($9); //@line 3387
   $$1$i9 = $14; //@line 3388
  }
 } while (0);
 do {
  if ((label | 0) == 11) {
   $23 = $0 + 28 | 0; //@line 3393
   $24 = HEAP32[$23 >> 2] | 0; //@line 3394
   if ($24 >>> 0 < $8 >>> 0) {
    _equeue_mutex_unlock($9); //@line 3397
    $$0 = 0; //@line 3398
    return $$0 | 0; //@line 3399
   } else {
    $26 = $0 + 32 | 0; //@line 3401
    $27 = HEAP32[$26 >> 2] | 0; //@line 3402
    HEAP32[$26 >> 2] = $27 + $8; //@line 3404
    HEAP32[$23 >> 2] = $24 - $8; //@line 3406
    HEAP32[$27 >> 2] = $8; //@line 3407
    HEAP8[$27 + 4 >> 0] = 1; //@line 3409
    _equeue_mutex_unlock($9); //@line 3410
    if (!$27) {
     $$0 = 0; //@line 3413
    } else {
     $$1$i9 = $27; //@line 3415
     break;
    }
    return $$0 | 0; //@line 3418
   }
  }
 } while (0);
 HEAP32[$$1$i9 + 20 >> 2] = 0; //@line 3423
 HEAP32[$$1$i9 + 24 >> 2] = -1; //@line 3425
 HEAP32[$$1$i9 + 28 >> 2] = 0; //@line 3427
 $$0 = $$1$i9 + 36 | 0; //@line 3429
 return $$0 | 0; //@line 3430
}
function __ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 var $$ = 0, $$sink = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $32 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 266
 STACKTOP = STACKTOP + 32 | 0; //@line 267
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 267
 $vararg_buffer3 = sp + 16 | 0; //@line 268
 $vararg_buffer = sp; //@line 270
 $14 = $8 & 1; //@line 271
 $15 = $9 & 1; //@line 272
 $16 = $10 & 1; //@line 273
 $17 = $12 & 1; //@line 274
 HEAP8[$0 + 689 >> 0] = $1; //@line 277
 HEAP32[$vararg_buffer >> 2] = $2 << 24 >> 24; //@line 279
 _mbed_tracef(16, 10968, 11638, $vararg_buffer); //@line 280
 switch ($1 | 0) {
 case 0:
  {
   HEAP8[$0 + 696 >> 0] = $2; //@line 284
   HEAP32[$0 + 700 >> 2] = $3; //@line 286
   HEAP32[$0 + 704 >> 2] = $4; //@line 288
   HEAP32[$0 + 712 >> 2] = $5; //@line 290
   HEAP16[$0 + 716 >> 1] = $7; //@line 292
   HEAP8[$0 + 718 >> 0] = $14; //@line 294
   HEAP8[$0 + 720 >> 0] = $15; //@line 296
   HEAP8[$0 + 721 >> 0] = $17; //@line 298
   HEAP32[$0 + 724 >> 2] = $13; //@line 300
   _mbed_tracef(16, 10968, 11665, sp + 8 | 0); //@line 301
   STACKTOP = sp; //@line 302
   return;
  }
 case 1:
  {
   HEAP8[$0 + 748 >> 0] = $2; //@line 307
   if ($4 >>> 0 > 2) {
    while (1) {}
   }
   $32 = $4 + 7 | 0; //@line 313
   HEAP32[$0 + 752 >> 2] = $32; //@line 315
   HEAP32[$0 + 756 >> 2] = $5; //@line 317
   HEAP8[$0 + 761 >> 0] = $6; //@line 319
   HEAP16[$0 + 762 >> 1] = $7; //@line 321
   HEAP8[$0 + 764 >> 0] = $14; //@line 323
   HEAP8[$0 + 767 >> 0] = $16; //@line 325
   HEAP8[$0 + 768 >> 0] = $11; //@line 327
   HEAP8[$0 + 766 >> 0] = $15; //@line 329
   HEAP8[$0 + 769 >> 0] = $17; //@line 331
   HEAP32[$0 + 772 >> 2] = $13; //@line 333
   $$ = $5 >>> 0 > 6 ? $5 : 6; //@line 335
   if (($4 | 0) == 0 & (($$ >>> 0 < 12 ? $$ : 12) + -11 | 0) >>> 0 < 2) {
    label = 7; //@line 343
   } else {
    if (($32 | 0) == 8 & $$ >>> 0 > 11) {
     label = 7; //@line 349
    } else {
     $$sink = 0; //@line 351
    }
   }
   if ((label | 0) == 7) {
    $$sink = 1; //@line 355
   }
   HEAP8[$0 + 760 >> 0] = $$sink; //@line 358
   _mbed_tracef(16, 10968, 11683, $vararg_buffer3); //@line 359
   STACKTOP = sp; //@line 360
   return;
  }
 default:
  {
   STACKTOP = sp; //@line 364
   return;
  }
 }
}
function __ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 $14 = $14 | 0;
 var $$ = 0, $$sink = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $40 = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 140
 STACKTOP = STACKTOP + 16 | 0; //@line 141
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 141
 $vararg_buffer1 = sp + 8 | 0; //@line 142
 $15 = $8 & 1; //@line 144
 $16 = $10 & 1; //@line 145
 $17 = $11 & 1; //@line 146
 $18 = $13 & 1; //@line 147
 $19 = $14 & 1; //@line 148
 HEAP8[$0 + 689 >> 0] = $1; //@line 151
 switch ($1 | 0) {
 case 0:
  {
   HEAP32[$0 + 704 >> 2] = $2; //@line 155
   HEAP32[$0 + 712 >> 2] = $3; //@line 157
   HEAP32[$0 + 708 >> 2] = $5; //@line 159
   HEAP8[$0 + 718 >> 0] = $15; //@line 161
   HEAP8[$0 + 719 >> 0] = $9; //@line 163
   HEAP8[$0 + 720 >> 0] = $16; //@line 165
   HEAP8[$0 + 721 >> 0] = $18; //@line 167
   HEAP8[$0 + 722 >> 0] = $19; //@line 169
   HEAP16[$0 + 716 >> 1] = $6; //@line 171
   HEAP32[$0 + 728 >> 2] = ~~(1.0 / +($3 >>> 0) * 8.0 * +($7 & 65535) * 1.0e3) >>> 0; //@line 180
   _mbed_tracef(16, 10968, 11702, sp); //@line 181
   STACKTOP = sp; //@line 182
   return;
  }
 case 1:
  {
   if ($2 >>> 0 > 2) {
    while (1) {}
   }
   $40 = $2 + 7 | 0; //@line 191
   HEAP32[$0 + 752 >> 2] = $40; //@line 193
   HEAP32[$0 + 756 >> 2] = $3; //@line 195
   HEAP8[$0 + 761 >> 0] = $4; //@line 197
   HEAP16[$0 + 762 >> 1] = $6; //@line 199
   HEAP8[$0 + 764 >> 0] = $15; //@line 201
   HEAP8[$0 + 765 >> 0] = $9; //@line 203
   HEAP8[$0 + 766 >> 0] = $16; //@line 205
   HEAP8[$0 + 767 >> 0] = $17; //@line 207
   HEAP8[$0 + 768 >> 0] = $12; //@line 209
   HEAP8[$0 + 769 >> 0] = $18; //@line 211
   HEAP8[$0 + 770 >> 0] = $19; //@line 213
   $$ = $3 >>> 0 > 6 ? $3 : 6; //@line 215
   if (($2 | 0) == 0 & (($$ >>> 0 < 12 ? $$ : 12) + -11 | 0) >>> 0 < 2) {
    label = 7; //@line 223
   } else {
    if (($40 | 0) == 8 & $$ >>> 0 > 11) {
     label = 7; //@line 229
    } else {
     $$sink = 0; //@line 231
    }
   }
   if ((label | 0) == 7) {
    $$sink = 1; //@line 235
   }
   HEAP8[$0 + 760 >> 0] = $$sink; //@line 238
   _mbed_tracef(16, 10968, 11683, $vararg_buffer1); //@line 239
   STACKTOP = sp; //@line 240
   return;
  }
 default:
  {
   STACKTOP = sp; //@line 244
   return;
  }
 }
}
function __ZN18LoRaMacChannelPlan8get_planER16lora_channelplanPK25loramac_mib_req_confirm_t($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$038$lcssa = 0, $$03841 = 0, $$1 = 0, $$140 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $32 = 0, $41 = 0, $48 = 0, $7 = 0, $9 = 0, $indvars$iv = 0, $wide$trip$count = 0;
 if (!$2) {
  $$140 = -1003; //@line 18560
  return $$140 | 0; //@line 18561
 }
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
  $$140 = -1002; //@line 18566
  return $$140 | 0; //@line 18567
 }
 $7 = __ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0; //@line 18570
 $9 = __ZN7LoRaPHY16get_channel_maskEb(HEAP32[$0 >> 2] | 0, 0) | 0; //@line 18572
 if (!($7 << 24 >> 24)) {
  $$038$lcssa = 0; //@line 18575
 } else {
  $11 = $1 + 4 | 0; //@line 18577
  $12 = $2 + 4 | 0; //@line 18578
  $wide$trip$count = $7 & 255; //@line 18579
  $$03841 = 0; //@line 18580
  $indvars$iv = 0; //@line 18580
  while (1) {
   if (__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$0 >> 2] | 0, $9, $indvars$iv) | 0) {
    $15 = HEAP32[$11 >> 2] | 0; //@line 18585
    $16 = $$03841 & 255; //@line 18586
    HEAP8[$15 + ($16 << 4) >> 0] = $indvars$iv; //@line 18589
    HEAP32[$15 + ($16 << 4) + 4 >> 2] = HEAP32[(HEAP32[$12 >> 2] | 0) + ($indvars$iv * 12 | 0) >> 2]; //@line 18594
    HEAP8[$15 + ($16 << 4) + 12 >> 0] = HEAP8[(HEAP32[$12 >> 2] | 0) + ($indvars$iv * 12 | 0) + 8 >> 0] | 0; //@line 18599
    $32 = (HEAP32[$11 >> 2] | 0) + ($16 << 4) + 12 | 0; //@line 18605
    HEAP8[$32 >> 0] = HEAP8[$32 >> 0] & -16 | HEAP8[(HEAP32[$12 >> 2] | 0) + ($indvars$iv * 12 | 0) + 8 >> 0] & 15; //@line 18609
    $41 = (HEAP32[$11 >> 2] | 0) + ($16 << 4) + 12 | 0; //@line 18615
    HEAP8[$41 >> 0] = HEAP8[$41 >> 0] & 15 | HEAP8[(HEAP32[$12 >> 2] | 0) + ($indvars$iv * 12 | 0) + 8 >> 0] & -16; //@line 18619
    $48 = HEAP32[$11 >> 2] | 0; //@line 18623
    HEAP8[$48 + ($16 << 4) + 13 >> 0] = HEAP8[(HEAP32[$12 >> 2] | 0) + ($indvars$iv * 12 | 0) + 9 >> 0] | 0; //@line 18625
    HEAP32[$48 + ($16 << 4) + 8 >> 2] = HEAP32[(HEAP32[$12 >> 2] | 0) + ($indvars$iv * 12 | 0) + 4 >> 2]; //@line 18630
    $$1 = $$03841 + 1 << 24 >> 24; //@line 18632
   } else {
    $$1 = $$03841; //@line 18634
   }
   $indvars$iv = $indvars$iv + 1 | 0; //@line 18636
   if (($indvars$iv | 0) == ($wide$trip$count | 0)) {
    $$038$lcssa = $$1; //@line 18639
    break;
   } else {
    $$03841 = $$1; //@line 18642
   }
  }
 }
 HEAP8[$1 >> 0] = $$038$lcssa; //@line 18646
 $$140 = 0; //@line 18647
 return $$140 | 0; //@line 18648
}
function __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_356($0) {
 $0 = $0 | 0;
 var $$1 = 0, $$pre = 0, $10 = 0, $13 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $30 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 26973
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26975
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26977
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26979
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26981
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26983
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 26985
 if (!$AsyncRetVal) {
  $13 = $2 + 288 | 0; //@line 26988
  HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($13) | 0) + 11 >> 0] = 0; //@line 26991
  HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($13) | 0) + 10 >> 0] = 0; //@line 26994
  $18 = HEAP32[$4 >> 2] | 0; //@line 26995
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($13) | 0) + 16 >> 2] = $18; //@line 26998
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(20) | 0; //@line 26999
  $21 = __ZN7LoRaMac11schedule_txEv($2) | 0; //@line 27000
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 470; //@line 27003
   $22 = $ReallocAsyncCtx7 + 4 | 0; //@line 27004
   HEAP32[$22 >> 2] = $6; //@line 27005
   $23 = $ReallocAsyncCtx7 + 8 | 0; //@line 27006
   HEAP32[$23 >> 2] = $8; //@line 27007
   $24 = $ReallocAsyncCtx7 + 12 | 0; //@line 27008
   HEAP32[$24 >> 2] = $10; //@line 27009
   $25 = $ReallocAsyncCtx7 + 16 | 0; //@line 27010
   HEAP32[$25 >> 2] = $2; //@line 27011
   sp = STACKTOP; //@line 27012
   return;
  }
  HEAP32[___async_retval >> 2] = $21; //@line 27016
  ___async_unwind = 0; //@line 27017
  HEAP32[$ReallocAsyncCtx7 >> 2] = 470; //@line 27018
  $22 = $ReallocAsyncCtx7 + 4 | 0; //@line 27019
  HEAP32[$22 >> 2] = $6; //@line 27020
  $23 = $ReallocAsyncCtx7 + 8 | 0; //@line 27021
  HEAP32[$23 >> 2] = $8; //@line 27022
  $24 = $ReallocAsyncCtx7 + 12 | 0; //@line 27023
  HEAP32[$24 >> 2] = $10; //@line 27024
  $25 = $ReallocAsyncCtx7 + 16 | 0; //@line 27025
  HEAP32[$25 >> 2] = $2; //@line 27026
  sp = STACKTOP; //@line 27027
  return;
 }
 if (!$AsyncRetVal) {
  $$1 = 0; //@line 27032
  $30 = ___async_retval; //@line 27033
  HEAP32[$30 >> 2] = $$1; //@line 27034
  return;
 }
 $$pre = HEAP8[$10 >> 0] | 0; //@line 27037
 HEAP8[$2 + 373 >> 0] = 0; //@line 27039
 HEAP8[$10 >> 0] = $$pre & -9; //@line 27041
 $$1 = $AsyncRetVal; //@line 27042
 $30 = ___async_retval; //@line 27043
 HEAP32[$30 >> 2] = $$1; //@line 27044
 return;
}
function __ZL12send_messagev() {
 var $0 = 0, $11 = 0, $3 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 7414
 STACKTOP = STACKTOP + 80 | 0; //@line 7415
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80); //@line 7415
 $vararg_buffer8 = sp + 24 | 0; //@line 7416
 $vararg_buffer5 = sp + 16 | 0; //@line 7417
 $vararg_buffer1 = sp + 8 | 0; //@line 7418
 $vararg_buffer = sp; //@line 7419
 $0 = sp + 28 | 0; //@line 7420
 dest = $0; //@line 7421
 stop = dest + 50 | 0; //@line 7421
 do {
  HEAP8[dest >> 0] = 0; //@line 7421
  dest = dest + 1 | 0; //@line 7421
 } while ((dest | 0) < (stop | 0));
 HEAPF64[$vararg_buffer >> 3] = +__ZN5Sht3115readTemperatureEv(24532); //@line 7424
 _sprintf($0, 16427, $vararg_buffer) | 0; //@line 7425
 $3 = _strlen($0) | 0; //@line 7426
 HEAP32[$vararg_buffer1 >> 2] = $3; //@line 7427
 HEAP32[$vararg_buffer1 + 4 >> 2] = $0; //@line 7429
 _printf(16447, $vararg_buffer1) | 0; //@line 7430
 $AsyncCtx13 = _emscripten_alloc_async_context(24, sp) | 0; //@line 7432
 $5 = __ZN16LoRaWANInterface4sendEhPKhti(23828, 15, $0, $3 & 65535, 1) | 0; //@line 7433
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 675; //@line 7436
  HEAP32[$AsyncCtx13 + 4 >> 2] = $vararg_buffer8; //@line 7438
  HEAP32[$AsyncCtx13 + 8 >> 2] = $vararg_buffer8; //@line 7440
  HEAP32[$AsyncCtx13 + 12 >> 2] = $0; //@line 7442
  HEAP32[$AsyncCtx13 + 16 >> 2] = $vararg_buffer5; //@line 7444
  HEAP32[$AsyncCtx13 + 20 >> 2] = $vararg_buffer5; //@line 7446
  sp = STACKTOP; //@line 7447
  STACKTOP = sp; //@line 7448
  return;
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 7450
 $11 = $5 << 16 >> 16; //@line 7451
 if ($5 << 16 >> 16 >= 0) {
  HEAP32[$vararg_buffer8 >> 2] = $11; //@line 7454
  _printf(16523, $vararg_buffer8) | 0; //@line 7455
  STACKTOP = sp; //@line 7456
  return;
 }
 if ($5 << 16 >> 16 != -1001) {
  HEAP32[$vararg_buffer5 >> 2] = $11; //@line 7460
  _printf(16499, $vararg_buffer5) | 0; //@line 7461
  STACKTOP = sp; //@line 7462
  return;
 }
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 7464
 _puts(16471) | 0; //@line 7465
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 676; //@line 7468
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 7470
  sp = STACKTOP; //@line 7471
  STACKTOP = sp; //@line 7472
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 7474
 STACKTOP = sp; //@line 7475
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$2 = 0, $17 = 0, $18 = 0, $3 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 16168
 STACKTOP = STACKTOP + 64 | 0; //@line 16169
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 16169
 $3 = sp; //@line 16170
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, 0) | 0) {
  $$2 = 1; //@line 16173
 } else {
  if (!$1) {
   $$2 = 0; //@line 16177
  } else {
   $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 16179
   $6 = ___dynamic_cast($1, 464, 448, 0) | 0; //@line 16180
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 707; //@line 16183
    HEAP32[$AsyncCtx3 + 4 >> 2] = $3; //@line 16185
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 16187
    HEAP32[$AsyncCtx3 + 12 >> 2] = $2; //@line 16189
    sp = STACKTOP; //@line 16190
    STACKTOP = sp; //@line 16191
    return 0; //@line 16191
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 16193
   if (!$6) {
    $$2 = 0; //@line 16196
   } else {
    dest = $3 + 4 | 0; //@line 16199
    stop = dest + 52 | 0; //@line 16199
    do {
     HEAP32[dest >> 2] = 0; //@line 16199
     dest = dest + 4 | 0; //@line 16199
    } while ((dest | 0) < (stop | 0));
    HEAP32[$3 >> 2] = $6; //@line 16200
    HEAP32[$3 + 8 >> 2] = $0; //@line 16202
    HEAP32[$3 + 12 >> 2] = -1; //@line 16204
    HEAP32[$3 + 48 >> 2] = 1; //@line 16206
    $17 = HEAP32[(HEAP32[$6 >> 2] | 0) + 28 >> 2] | 0; //@line 16209
    $18 = HEAP32[$2 >> 2] | 0; //@line 16210
    $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 16211
    FUNCTION_TABLE_viiii[$17 & 7]($6, $3, $18, 1); //@line 16212
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 708; //@line 16215
     HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 16217
     HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 16219
     HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 16221
     sp = STACKTOP; //@line 16222
     STACKTOP = sp; //@line 16223
     return 0; //@line 16223
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 16225
    if ((HEAP32[$3 + 24 >> 2] | 0) == 1) {
     HEAP32[$2 >> 2] = HEAP32[$3 + 16 >> 2]; //@line 16232
     $$0 = 1; //@line 16233
    } else {
     $$0 = 0; //@line 16235
    }
    $$2 = $$0; //@line 16237
   }
  }
 }
 STACKTOP = sp; //@line 16241
 return $$2 | 0; //@line 16241
}
function _vsnprintf($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$$015 = 0, $$0 = 0, $$014 = 0, $$015 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $19 = 0, $26 = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 15593
 STACKTOP = STACKTOP + 128 | 0; //@line 15594
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 15594
 $4 = sp + 124 | 0; //@line 15595
 $5 = sp; //@line 15596
 dest = $5; //@line 15597
 src = 10720; //@line 15597
 stop = dest + 124 | 0; //@line 15597
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 15597
  dest = dest + 4 | 0; //@line 15597
  src = src + 4 | 0; //@line 15597
 } while ((dest | 0) < (stop | 0));
 if (($1 + -1 | 0) >>> 0 > 2147483646) {
  if (!$1) {
   $$014 = $4; //@line 15603
   $$015 = 1; //@line 15603
   label = 4; //@line 15604
  } else {
   HEAP32[(___errno_location() | 0) >> 2] = 75; //@line 15607
   $$0 = -1; //@line 15608
  }
 } else {
  $$014 = $0; //@line 15611
  $$015 = $1; //@line 15611
  label = 4; //@line 15612
 }
 if ((label | 0) == 4) {
  $11 = -2 - $$014 | 0; //@line 15616
  $$$015 = $$015 >>> 0 > $11 >>> 0 ? $11 : $$015; //@line 15618
  HEAP32[$5 + 48 >> 2] = $$$015; //@line 15620
  $14 = $5 + 20 | 0; //@line 15621
  HEAP32[$14 >> 2] = $$014; //@line 15622
  HEAP32[$5 + 44 >> 2] = $$014; //@line 15624
  $16 = $$014 + $$$015 | 0; //@line 15625
  $17 = $5 + 16 | 0; //@line 15626
  HEAP32[$17 >> 2] = $16; //@line 15627
  HEAP32[$5 + 28 >> 2] = $16; //@line 15629
  $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 15630
  $19 = _vfprintf($5, $2, $3) | 0; //@line 15631
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 695; //@line 15634
   HEAP32[$AsyncCtx + 4 >> 2] = $$$015; //@line 15636
   HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 15638
   HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 15640
   HEAP32[$AsyncCtx + 16 >> 2] = $14; //@line 15642
   HEAP32[$AsyncCtx + 20 >> 2] = $17; //@line 15644
   sp = STACKTOP; //@line 15645
   STACKTOP = sp; //@line 15646
   return 0; //@line 15646
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 15648
  if (!$$$015) {
   $$0 = $19; //@line 15651
  } else {
   $26 = HEAP32[$14 >> 2] | 0; //@line 15653
   HEAP8[$26 + ((($26 | 0) == (HEAP32[$17 >> 2] | 0)) << 31 >> 31) >> 0] = 0; //@line 15658
   $$0 = $19; //@line 15659
  }
 }
 STACKTOP = sp; //@line 15662
 return $$0 | 0; //@line 15662
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $19 = 0, $28 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 17500
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 17506
  } else {
   $9 = HEAP32[$0 + 12 >> 2] | 0; //@line 17510
   $10 = $0 + 16 + ($9 << 3) | 0; //@line 17511
   $AsyncCtx3 = _emscripten_alloc_async_context(28, sp) | 0; //@line 17512
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0 + 16 | 0, $1, $2, $3); //@line 17513
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 724; //@line 17516
    HEAP32[$AsyncCtx3 + 4 >> 2] = $9; //@line 17518
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 17520
    HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 17522
    HEAP32[$AsyncCtx3 + 16 >> 2] = $2; //@line 17524
    HEAP32[$AsyncCtx3 + 20 >> 2] = $3; //@line 17526
    HEAP32[$AsyncCtx3 + 24 >> 2] = $10; //@line 17528
    sp = STACKTOP; //@line 17529
    return;
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 17532
   if (($9 | 0) > 1) {
    $19 = $1 + 54 | 0; //@line 17536
    $$0 = $0 + 24 | 0; //@line 17537
    while (1) {
     $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 17539
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($$0, $1, $2, $3); //@line 17540
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 17545
     if (HEAP8[$19 >> 0] | 0) {
      break L1;
     }
     $28 = $$0 + 8 | 0; //@line 17551
     if ($28 >>> 0 < $10 >>> 0) {
      $$0 = $28; //@line 17554
     } else {
      break L1;
     }
    }
    HEAP32[$AsyncCtx >> 2] = 725; //@line 17559
    HEAP32[$AsyncCtx + 4 >> 2] = $19; //@line 17561
    HEAP32[$AsyncCtx + 8 >> 2] = $$0; //@line 17563
    HEAP32[$AsyncCtx + 12 >> 2] = $10; //@line 17565
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 17567
    HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 17569
    HEAP32[$AsyncCtx + 24 >> 2] = $3; //@line 17571
    sp = STACKTOP; //@line 17572
    return;
   }
  }
 } while (0);
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_110($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx27 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 24183
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24187
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24189
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24191
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 24193
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 24194
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 24198
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 24199
  FUNCTION_TABLE_vi[$13 & 1023]($4); //@line 24200
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 219; //@line 24203
   $14 = $ReallocAsyncCtx8 + 4 | 0; //@line 24204
   HEAP32[$14 >> 2] = $AsyncRetVal; //@line 24205
   $15 = $ReallocAsyncCtx8 + 8 | 0; //@line 24206
   HEAP32[$15 >> 2] = $6; //@line 24207
   $16 = $ReallocAsyncCtx8 + 12 | 0; //@line 24208
   HEAP32[$16 >> 2] = $8; //@line 24209
   sp = STACKTOP; //@line 24210
   return;
  }
  ___async_unwind = 0; //@line 24213
  HEAP32[$ReallocAsyncCtx8 >> 2] = 219; //@line 24214
  $14 = $ReallocAsyncCtx8 + 4 | 0; //@line 24215
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 24216
  $15 = $ReallocAsyncCtx8 + 8 | 0; //@line 24217
  HEAP32[$15 >> 2] = $6; //@line 24218
  $16 = $ReallocAsyncCtx8 + 12 | 0; //@line 24219
  HEAP32[$16 >> 2] = $8; //@line 24220
  sp = STACKTOP; //@line 24221
  return;
 }
 if ($AsyncRetVal | 0) {
  HEAP32[$6 >> 2] = 6; //@line 24226
  HEAP32[___async_retval >> 2] = -1014; //@line 24228
  return;
 }
 $ReallocAsyncCtx27 = _emscripten_realloc_async_context(12) | 0; //@line 24231
 _mbed_assert_internal(13612, 12396, 1237); //@line 24232
 if (___async) {
  HEAP32[$ReallocAsyncCtx27 >> 2] = 220; //@line 24235
  $18 = $ReallocAsyncCtx27 + 4 | 0; //@line 24236
  HEAP32[$18 >> 2] = $6; //@line 24237
  $19 = $ReallocAsyncCtx27 + 8 | 0; //@line 24238
  HEAP32[$19 >> 2] = $8; //@line 24239
  sp = STACKTOP; //@line 24240
  return;
 }
 ___async_unwind = 0; //@line 24243
 HEAP32[$ReallocAsyncCtx27 >> 2] = 220; //@line 24244
 $18 = $ReallocAsyncCtx27 + 4 | 0; //@line 24245
 HEAP32[$18 >> 2] = $6; //@line 24246
 $19 = $ReallocAsyncCtx27 + 8 | 0; //@line 24247
 HEAP32[$19 >> 2] = $8; //@line 24248
 sp = STACKTOP; //@line 24249
 return;
}
function __ZN7LoRaMac11schedule_txEv__async_cb_202($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 2674
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2676
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2678
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2680
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2682
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 2684
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 2686
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 2688
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 2690
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 2692
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 2694
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 2696
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 2698
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 2700
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 2702
 $28 = HEAP32[$2 >> 2] | 0; //@line 2703
 $31 = HEAP32[(HEAP32[$28 >> 2] | 0) + 28 >> 2] | 0; //@line 2706
 $32 = $4 + 1104 | 0; //@line 2707
 $33 = HEAP8[$32 >> 0] | 0; //@line 2708
 $34 = $4 + 1100 | 0; //@line 2709
 $35 = HEAP32[$34 >> 2] | 0; //@line 2710
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(64) | 0; //@line 2712
 FUNCTION_TABLE_viiiii[$31 & 7]($28, $AsyncRetVal, $33, $35, $4 + 1160 | 0); //@line 2713
 if (!___async) {
  ___async_unwind = 0; //@line 2716
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 416; //@line 2718
 HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $2; //@line 2720
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $4; //@line 2722
 HEAP32[$ReallocAsyncCtx4 + 12 >> 2] = $32; //@line 2724
 HEAP32[$ReallocAsyncCtx4 + 16 >> 2] = $34; //@line 2726
 HEAP32[$ReallocAsyncCtx4 + 20 >> 2] = $6; //@line 2728
 HEAP32[$ReallocAsyncCtx4 + 24 >> 2] = $8; //@line 2730
 HEAP32[$ReallocAsyncCtx4 + 28 >> 2] = $10; //@line 2732
 HEAP32[$ReallocAsyncCtx4 + 32 >> 2] = $12; //@line 2734
 HEAP32[$ReallocAsyncCtx4 + 36 >> 2] = $14; //@line 2736
 HEAP32[$ReallocAsyncCtx4 + 40 >> 2] = $16; //@line 2738
 HEAP32[$ReallocAsyncCtx4 + 44 >> 2] = $18; //@line 2740
 HEAP32[$ReallocAsyncCtx4 + 48 >> 2] = $20; //@line 2742
 HEAP32[$ReallocAsyncCtx4 + 52 >> 2] = $22; //@line 2744
 HEAP32[$ReallocAsyncCtx4 + 56 >> 2] = $24; //@line 2746
 HEAP32[$ReallocAsyncCtx4 + 60 >> 2] = $26; //@line 2748
 sp = STACKTOP; //@line 2749
 return;
}
function _equeue_alloc__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$038$sink$i = 0, $$03842$i = 0, $$1$i9 = 0, $12 = 0, $15 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $34 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5219
 $6 = (HEAP32[$0 + 4 >> 2] | 0) + 39 & -4; //@line 5221
 $7 = $4 + 156 | 0; //@line 5222
 _equeue_mutex_lock($7); //@line 5223
 $8 = $4 + 24 | 0; //@line 5224
 $9 = HEAP32[$8 >> 2] | 0; //@line 5225
 L3 : do {
  if (!$9) {
   label = 9; //@line 5229
  } else {
   $$03842$i = $8; //@line 5231
   $12 = $9; //@line 5231
   while (1) {
    if ((HEAP32[$12 >> 2] | 0) >>> 0 >= $6 >>> 0) {
     break;
    }
    $18 = $12 + 8 | 0; //@line 5238
    $19 = HEAP32[$18 >> 2] | 0; //@line 5239
    if (!$19) {
     label = 9; //@line 5242
     break L3;
    } else {
     $$03842$i = $18; //@line 5245
     $12 = $19; //@line 5245
    }
   }
   $15 = HEAP32[$12 + 12 >> 2] | 0; //@line 5249
   if (!$15) {
    $$038$sink$i = $$03842$i; //@line 5252
   } else {
    HEAP32[$$03842$i >> 2] = $15; //@line 5254
    $$038$sink$i = $15 + 8 | 0; //@line 5256
   }
   HEAP32[$$038$sink$i >> 2] = HEAP32[$12 + 8 >> 2]; //@line 5260
   _equeue_mutex_unlock($7); //@line 5261
   $$1$i9 = $12; //@line 5262
  }
 } while (0);
 do {
  if ((label | 0) == 9) {
   $21 = $4 + 28 | 0; //@line 5267
   $22 = HEAP32[$21 >> 2] | 0; //@line 5268
   if ($22 >>> 0 < $6 >>> 0) {
    _equeue_mutex_unlock($7); //@line 5271
    $$0 = 0; //@line 5272
    $34 = ___async_retval; //@line 5273
    HEAP32[$34 >> 2] = $$0; //@line 5274
    return;
   } else {
    $24 = $4 + 32 | 0; //@line 5277
    $25 = HEAP32[$24 >> 2] | 0; //@line 5278
    HEAP32[$24 >> 2] = $25 + $6; //@line 5280
    HEAP32[$21 >> 2] = $22 - $6; //@line 5282
    HEAP32[$25 >> 2] = $6; //@line 5283
    HEAP8[$25 + 4 >> 0] = 1; //@line 5285
    _equeue_mutex_unlock($7); //@line 5286
    if (!$25) {
     $$0 = 0; //@line 5289
    } else {
     $$1$i9 = $25; //@line 5291
     break;
    }
    $34 = ___async_retval; //@line 5294
    HEAP32[$34 >> 2] = $$0; //@line 5295
    return;
   }
  }
 } while (0);
 HEAP32[$$1$i9 + 20 >> 2] = 0; //@line 5301
 HEAP32[$$1$i9 + 24 >> 2] = -1; //@line 5303
 HEAP32[$$1$i9 + 28 >> 2] = 0; //@line 5305
 $$0 = $$1$i9 + 36 | 0; //@line 5307
 $34 = ___async_retval; //@line 5308
 HEAP32[$34 >> 2] = $$0; //@line 5309
 return;
}
function __ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 26215
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26217
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26219
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26221
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26223
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26225
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 26227
 if (!$AsyncRetVal) {
  HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($2) | 0) + 11 >> 0] = 0; //@line 26232
  HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($2) | 0) + 10 >> 0] = 0; //@line 26235
  $18 = HEAP32[$4 + 956 >> 2] | 0; //@line 26237
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($2) | 0) + 16 >> 2] = $18; //@line 26240
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 26241
  $21 = __ZN7LoRaMac11schedule_txEv($4) | 0; //@line 26242
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 476; //@line 26245
   $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 26246
   HEAP32[$22 >> 2] = $6; //@line 26247
   $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 26248
   HEAP32[$23 >> 2] = $10; //@line 26249
   $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 26250
   HEAP32[$24 >> 2] = $2; //@line 26251
   $25 = $ReallocAsyncCtx2 + 16 | 0; //@line 26252
   HEAP32[$25 >> 2] = $4; //@line 26253
   $26 = $ReallocAsyncCtx2 + 20 | 0; //@line 26254
   HEAP32[$26 >> 2] = $8; //@line 26255
   sp = STACKTOP; //@line 26256
   return;
  }
  HEAP32[___async_retval >> 2] = $21; //@line 26260
  ___async_unwind = 0; //@line 26261
  HEAP32[$ReallocAsyncCtx2 >> 2] = 476; //@line 26262
  $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 26263
  HEAP32[$22 >> 2] = $6; //@line 26264
  $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 26265
  HEAP32[$23 >> 2] = $10; //@line 26266
  $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 26267
  HEAP32[$24 >> 2] = $2; //@line 26268
  $25 = $ReallocAsyncCtx2 + 16 | 0; //@line 26269
  HEAP32[$25 >> 2] = $4; //@line 26270
  $26 = $ReallocAsyncCtx2 + 20 | 0; //@line 26271
  HEAP32[$26 >> 2] = $8; //@line 26272
  sp = STACKTOP; //@line 26273
  return;
 } else {
  HEAP8[$4 + 373 >> 0] = 0; //@line 26277
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 26279
  return;
 }
}
function _mbedtls_cipher_cmac_update__async_cb_119($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $4 = 0, $42 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 24637
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24639
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24641
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24643
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24645
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24647
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24649
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 24651
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 24653
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 24655
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 24657
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 24659
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 24662
  $42 = ___async_retval; //@line 24663
  HEAP32[$42 >> 2] = $$0; //@line 24664
  return;
 }
 $24 = $2 + 1 | 0; //@line 24667
 if ($24 >>> 0 < $4 >>> 0) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(44) | 0; //@line 24670
  $22 = _mbedtls_cipher_update($8, $10, 0, $10, $12) | 0; //@line 24671
  if (!___async) {
   HEAP32[___async_retval >> 2] = $22; //@line 24675
   ___async_unwind = 0; //@line 24676
  }
  HEAP32[$ReallocAsyncCtx2 >> 2] = 600; //@line 24678
  HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $24; //@line 24680
  HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 24682
  HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 24684
  HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 24686
  HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 24688
  HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 24690
  HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $14; //@line 24692
  HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $16; //@line 24694
  HEAP32[$ReallocAsyncCtx2 + 36 >> 2] = $18; //@line 24696
  HEAP32[$ReallocAsyncCtx2 + 40 >> 2] = $20; //@line 24698
  sp = STACKTOP; //@line 24699
  return;
 }
 if (!$14) {
  $$0 = 0; //@line 24704
  $42 = ___async_retval; //@line 24705
  HEAP32[$42 >> 2] = $$0; //@line 24706
  return;
 }
 _memcpy((HEAP32[$18 >> 2] | 0) + ($20 + 16) | 0, $16 | 0, $14 | 0) | 0; //@line 24711
 HEAP32[$18 >> 2] = (HEAP32[$18 >> 2] | 0) + $14; //@line 24714
 $$0 = 0; //@line 24715
 $42 = ___async_retval; //@line 24716
 HEAP32[$42 >> 2] = $$0; //@line 24717
 return;
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb_168($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $15 = 0, $2 = 0, $21 = 0, $22 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 29921
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29923
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29925
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29927
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29929
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29931
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29933
 $13 = $2 + 946 | 0; //@line 29935
 HEAP16[$13 >> 1] = $AsyncRetVal; //@line 29936
 $15 = HEAP16[$4 >> 1] | 0; //@line 29938
 HEAP16[$4 >> 1] = $15 + 1 << 16 >> 16; //@line 29940
 HEAP8[($15 & 65535) + ($2 + 381) >> 0] = $AsyncRetVal; //@line 29943
 $21 = (HEAPU16[$13 >> 1] | 0) >>> 8 & 255; //@line 29946
 $22 = HEAP16[$4 >> 1] | 0; //@line 29947
 HEAP16[$4 >> 1] = $22 + 1 << 16 >> 16; //@line 29949
 HEAP8[($22 & 65535) + ($2 + 381) >> 0] = $21; //@line 29952
 $27 = HEAP16[$4 >> 1] & 255; //@line 29954
 $29 = HEAP32[$2 + 908 >> 2] | 0; //@line 29956
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 29957
 $30 = __Z22compute_join_frame_micPKhtS0_Pj($6, $27, $29, $8) | 0; //@line 29958
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 424; //@line 29961
  $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 29962
  HEAP32[$31 >> 2] = $8; //@line 29963
  $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 29964
  HEAP32[$32 >> 2] = $4; //@line 29965
  $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 29966
  HEAP32[$33 >> 2] = $2; //@line 29967
  $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 29968
  HEAP32[$34 >> 2] = $10; //@line 29969
  sp = STACKTOP; //@line 29970
  return;
 }
 HEAP32[___async_retval >> 2] = $30; //@line 29974
 ___async_unwind = 0; //@line 29975
 HEAP32[$ReallocAsyncCtx2 >> 2] = 424; //@line 29976
 $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 29977
 HEAP32[$31 >> 2] = $8; //@line 29978
 $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 29979
 HEAP32[$32 >> 2] = $4; //@line 29980
 $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 29981
 HEAP32[$33 >> 2] = $2; //@line 29982
 $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 29983
 HEAP32[$34 >> 2] = $10; //@line 29984
 sp = STACKTOP; //@line 29985
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_353($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 26637
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26641
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26643
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26645
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 26647
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 26648
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 26652
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 26653
  FUNCTION_TABLE_vi[$13 & 1023]($6); //@line 26654
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 360; //@line 26657
   $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 26658
   HEAP32[$14 >> 2] = $4; //@line 26659
   $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 26660
   HEAP32[$15 >> 2] = $AsyncRetVal; //@line 26661
   $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 26662
   HEAP32[$16 >> 2] = $8; //@line 26663
   sp = STACKTOP; //@line 26664
   return;
  }
  ___async_unwind = 0; //@line 26667
  HEAP32[$ReallocAsyncCtx4 >> 2] = 360; //@line 26668
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 26669
  HEAP32[$14 >> 2] = $4; //@line 26670
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 26671
  HEAP32[$15 >> 2] = $AsyncRetVal; //@line 26672
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 26673
  HEAP32[$16 >> 2] = $8; //@line 26674
  sp = STACKTOP; //@line 26675
  return;
 }
 $17 = HEAP32[$4 >> 2] | 0; //@line 26678
 if (!$17) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 26682
  return;
 }
 $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 26686
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 26687
 FUNCTION_TABLE_vi[$20 & 1023]($8); //@line 26688
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 361; //@line 26691
  $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 26692
  HEAP32[$21 >> 2] = $AsyncRetVal; //@line 26693
  sp = STACKTOP; //@line 26694
  return;
 }
 ___async_unwind = 0; //@line 26697
 HEAP32[$ReallocAsyncCtx5 >> 2] = 361; //@line 26698
 $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 26699
 HEAP32[$21 >> 2] = $AsyncRetVal; //@line 26700
 sp = STACKTOP; //@line 26701
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_137($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 26472
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26476
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26478
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26480
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 26482
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 26483
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 26487
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 26488
  FUNCTION_TABLE_vi[$13 & 1023]($6); //@line 26489
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 232; //@line 26492
   $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 26493
   HEAP32[$14 >> 2] = $4; //@line 26494
   $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 26495
   HEAP32[$15 >> 2] = $AsyncRetVal; //@line 26496
   $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 26497
   HEAP32[$16 >> 2] = $8; //@line 26498
   sp = STACKTOP; //@line 26499
   return;
  }
  ___async_unwind = 0; //@line 26502
  HEAP32[$ReallocAsyncCtx4 >> 2] = 232; //@line 26503
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 26504
  HEAP32[$14 >> 2] = $4; //@line 26505
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 26506
  HEAP32[$15 >> 2] = $AsyncRetVal; //@line 26507
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 26508
  HEAP32[$16 >> 2] = $8; //@line 26509
  sp = STACKTOP; //@line 26510
  return;
 }
 $17 = HEAP32[$4 >> 2] | 0; //@line 26513
 if (!$17) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 26517
  return;
 }
 $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 26521
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 26522
 FUNCTION_TABLE_vi[$20 & 1023]($8); //@line 26523
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 233; //@line 26526
  $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 26527
  HEAP32[$21 >> 2] = $AsyncRetVal; //@line 26528
  sp = STACKTOP; //@line 26529
  return;
 }
 ___async_unwind = 0; //@line 26532
 HEAP32[$ReallocAsyncCtx5 >> 2] = 233; //@line 26533
 $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 26534
 HEAP32[$21 >> 2] = $AsyncRetVal; //@line 26535
 sp = STACKTOP; //@line 26536
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_153($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 27943
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27947
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27949
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27951
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 27953
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 27954
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 27958
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 27959
  FUNCTION_TABLE_vi[$13 & 1023]($6); //@line 27960
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 241; //@line 27963
   $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 27964
   HEAP32[$14 >> 2] = $4; //@line 27965
   $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 27966
   HEAP32[$15 >> 2] = $AsyncRetVal; //@line 27967
   $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 27968
   HEAP32[$16 >> 2] = $8; //@line 27969
   sp = STACKTOP; //@line 27970
   return;
  }
  ___async_unwind = 0; //@line 27973
  HEAP32[$ReallocAsyncCtx4 >> 2] = 241; //@line 27974
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 27975
  HEAP32[$14 >> 2] = $4; //@line 27976
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 27977
  HEAP32[$15 >> 2] = $AsyncRetVal; //@line 27978
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 27979
  HEAP32[$16 >> 2] = $8; //@line 27980
  sp = STACKTOP; //@line 27981
  return;
 }
 $17 = HEAP32[$4 >> 2] | 0; //@line 27984
 if (!$17) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 27988
  return;
 }
 $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 27992
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 27993
 FUNCTION_TABLE_vi[$20 & 1023]($8); //@line 27994
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 242; //@line 27997
  $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 27998
  HEAP32[$21 >> 2] = $AsyncRetVal; //@line 27999
  sp = STACKTOP; //@line 28000
  return;
 }
 ___async_unwind = 0; //@line 28003
 HEAP32[$ReallocAsyncCtx5 >> 2] = 242; //@line 28004
 $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 28005
 HEAP32[$21 >> 2] = $AsyncRetVal; //@line 28006
 sp = STACKTOP; //@line 28007
 return;
}
function ___mo_lookup($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$090 = 0, $$094 = 0, $$4 = 0, $10 = 0, $13 = 0, $17 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $31 = 0, $35 = 0, $4 = 0, $44 = 0, $46 = 0, $49 = 0, $53 = 0, $63 = 0, $7 = 0;
 $4 = (HEAP32[$0 >> 2] | 0) + 1794895138 | 0; //@line 11582
 $7 = _swapc(HEAP32[$0 + 8 >> 2] | 0, $4) | 0; //@line 11585
 $10 = _swapc(HEAP32[$0 + 12 >> 2] | 0, $4) | 0; //@line 11588
 $13 = _swapc(HEAP32[$0 + 16 >> 2] | 0, $4) | 0; //@line 11591
 L1 : do {
  if ($7 >>> 0 < $1 >>> 2 >>> 0) {
   $17 = $1 - ($7 << 2) | 0; //@line 11597
   if ($10 >>> 0 < $17 >>> 0 & $13 >>> 0 < $17 >>> 0) {
    if (!(($13 | $10) & 3)) {
     $23 = $10 >>> 2; //@line 11606
     $24 = $13 >>> 2; //@line 11607
     $$090 = 0; //@line 11608
     $$094 = $7; //@line 11608
     while (1) {
      $25 = $$094 >>> 1; //@line 11610
      $26 = $$090 + $25 | 0; //@line 11611
      $27 = $26 << 1; //@line 11612
      $28 = $27 + $23 | 0; //@line 11613
      $31 = _swapc(HEAP32[$0 + ($28 << 2) >> 2] | 0, $4) | 0; //@line 11616
      $35 = _swapc(HEAP32[$0 + ($28 + 1 << 2) >> 2] | 0, $4) | 0; //@line 11620
      if (!($35 >>> 0 < $1 >>> 0 & $31 >>> 0 < ($1 - $35 | 0) >>> 0)) {
       $$4 = 0; //@line 11626
       break L1;
      }
      if (HEAP8[$0 + ($35 + $31) >> 0] | 0) {
       $$4 = 0; //@line 11634
       break L1;
      }
      $44 = _strcmp($2, $0 + $35 | 0) | 0; //@line 11638
      if (!$44) {
       break;
      }
      $63 = ($44 | 0) < 0; //@line 11644
      if (($$094 | 0) == 1) {
       $$4 = 0; //@line 11649
       break L1;
      } else {
       $$090 = $63 ? $$090 : $26; //@line 11652
       $$094 = $63 ? $25 : $$094 - $25 | 0; //@line 11652
      }
     }
     $46 = $27 + $24 | 0; //@line 11655
     $49 = _swapc(HEAP32[$0 + ($46 << 2) >> 2] | 0, $4) | 0; //@line 11658
     $53 = _swapc(HEAP32[$0 + ($46 + 1 << 2) >> 2] | 0, $4) | 0; //@line 11662
     if ($53 >>> 0 < $1 >>> 0 & $49 >>> 0 < ($1 - $53 | 0) >>> 0) {
      $$4 = (HEAP8[$0 + ($53 + $49) >> 0] | 0) == 0 ? $0 + $53 | 0 : 0; //@line 11674
     } else {
      $$4 = 0; //@line 11676
     }
    } else {
     $$4 = 0; //@line 11679
    }
   } else {
    $$4 = 0; //@line 11682
   }
  } else {
   $$4 = 0; //@line 11685
  }
 } while (0);
 return $$4 | 0; //@line 11688
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_106($0) {
 $0 = $0 | 0;
 var $10 = 0, $18 = 0, $19 = 0, $2 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 23965
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23967
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23969
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23973
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23975
 HEAP8[$2 + 1964 >> 0] = 0; //@line 23978
 HEAP32[$2 + 2256 >> 2] = 0; //@line 23980
 HEAP8[$2 + 2236 >> 0] = 0; //@line 23982
 HEAP16[$2 + 2282 >> 1] = 0; //@line 23984
 HEAP16[$2 + 2260 >> 1] = 0; //@line 23986
 HEAP8[$2 + 1932 >> 0] = 0; //@line 23988
 _memset($2 + 1975 | 0, 0, 259) | 0; //@line 23989
 _mbed_tracef(16, 12356, 12622, $4); //@line 23990
 $18 = $2 + 1892 | 0; //@line 23991
 $19 = HEAP32[$18 >> 2] | 0; //@line 23992
 if (!$19) {
  HEAP32[___async_retval >> 2] = -1011; //@line 23996
  return;
 }
 $23 = HEAP32[$2 + 2288 >> 2] | 0; //@line 24001
 $25 = HEAP32[$19 + 4 >> 2] | 0; //@line 24003
 $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 24004
 FUNCTION_TABLE_vii[$25 & 31]($10, $2 + 1880 | 0); //@line 24005
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 198; //@line 24008
  $26 = $ReallocAsyncCtx + 4 | 0; //@line 24009
  HEAP32[$26 >> 2] = $18; //@line 24010
  $27 = $ReallocAsyncCtx + 8 | 0; //@line 24011
  HEAP32[$27 >> 2] = $10; //@line 24012
  $28 = $ReallocAsyncCtx + 12 | 0; //@line 24013
  HEAP32[$28 >> 2] = $23; //@line 24014
  $29 = $ReallocAsyncCtx + 16 | 0; //@line 24015
  HEAP32[$29 >> 2] = $10; //@line 24016
  $30 = $ReallocAsyncCtx + 20 | 0; //@line 24017
  HEAP32[$30 >> 2] = $8; //@line 24018
  sp = STACKTOP; //@line 24019
  return;
 }
 ___async_unwind = 0; //@line 24022
 HEAP32[$ReallocAsyncCtx >> 2] = 198; //@line 24023
 $26 = $ReallocAsyncCtx + 4 | 0; //@line 24024
 HEAP32[$26 >> 2] = $18; //@line 24025
 $27 = $ReallocAsyncCtx + 8 | 0; //@line 24026
 HEAP32[$27 >> 2] = $10; //@line 24027
 $28 = $ReallocAsyncCtx + 12 | 0; //@line 24028
 HEAP32[$28 >> 2] = $23; //@line 24029
 $29 = $ReallocAsyncCtx + 16 | 0; //@line 24030
 HEAP32[$29 >> 2] = $10; //@line 24031
 $30 = $ReallocAsyncCtx + 20 | 0; //@line 24032
 HEAP32[$30 >> 2] = $8; //@line 24033
 sp = STACKTOP; //@line 24034
 return;
}
function __ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_238($0) {
 $0 = $0 | 0;
 var $2 = 0, $23 = 0, $24 = 0, $27 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5416
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5418
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5420
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5422
 $9 = $2 + 1184 | 0; //@line 5425
 HEAP8[$9 >> 0] = HEAP8[$2 + 378 >> 0] | 0; //@line 5426
 HEAP32[$2 + 1188 >> 2] = HEAP32[$2 + 1132 >> 2]; //@line 5430
 HEAP8[$2 + 1200 >> 0] = HEAP8[$2 + 1141 >> 0] | 0; //@line 5434
 HEAP8[$2 + 1201 >> 0] = HEAP8[$2 + 369 >> 0] | 0; //@line 5438
 HEAP32[$2 + 1204 >> 2] = 1; //@line 5440
 $23 = $2 + 1202 | 0; //@line 5444
 HEAP8[$23 >> 0] = (HEAP32[$2 + 360 >> 2] | 0) == 2 & 1; //@line 5446
 $24 = HEAP32[$2 >> 2] | 0; //@line 5447
 $27 = HEAP32[(HEAP32[$24 >> 2] | 0) + 24 >> 2] | 0; //@line 5450
 $30 = (__ZN11LoRaMacMcps14get_indicationEv($2 + 288 | 0) | 0) + 10 | 0; //@line 5453
 $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 5454
 $31 = FUNCTION_TABLE_iiii[$27 & 15]($24, $9, $30) | 0; //@line 5455
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 311; //@line 5458
  $32 = $ReallocAsyncCtx + 4 | 0; //@line 5459
  HEAP32[$32 >> 2] = $23; //@line 5460
  $33 = $ReallocAsyncCtx + 8 | 0; //@line 5461
  HEAP32[$33 >> 2] = $2; //@line 5462
  $34 = $ReallocAsyncCtx + 12 | 0; //@line 5463
  HEAP32[$34 >> 2] = $4; //@line 5464
  $35 = $ReallocAsyncCtx + 16 | 0; //@line 5465
  HEAP32[$35 >> 2] = $6; //@line 5466
  $36 = $ReallocAsyncCtx + 20 | 0; //@line 5467
  HEAP32[$36 >> 2] = $2; //@line 5468
  sp = STACKTOP; //@line 5469
  return;
 }
 HEAP8[___async_retval >> 0] = $31 & 1; //@line 5474
 ___async_unwind = 0; //@line 5475
 HEAP32[$ReallocAsyncCtx >> 2] = 311; //@line 5476
 $32 = $ReallocAsyncCtx + 4 | 0; //@line 5477
 HEAP32[$32 >> 2] = $23; //@line 5478
 $33 = $ReallocAsyncCtx + 8 | 0; //@line 5479
 HEAP32[$33 >> 2] = $2; //@line 5480
 $34 = $ReallocAsyncCtx + 12 | 0; //@line 5481
 HEAP32[$34 >> 2] = $4; //@line 5482
 $35 = $ReallocAsyncCtx + 16 | 0; //@line 5483
 HEAP32[$35 >> 2] = $6; //@line 5484
 $36 = $ReallocAsyncCtx + 20 | 0; //@line 5485
 HEAP32[$36 >> 2] = $2; //@line 5486
 sp = STACKTOP; //@line 5487
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 10198
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10200
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10202
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10204
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10206
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 10208
 $11 = HEAP32[$2 >> 2] | 0; //@line 10209
 if ($11 | 0) {
  $14 = HEAP32[$11 + 4 >> 2] | 0; //@line 10213
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 10214
  FUNCTION_TABLE_vii[$14 & 31]($6, $8); //@line 10215
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 55; //@line 10218
   $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 10219
   HEAP32[$15 >> 2] = $2; //@line 10220
   $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 10221
   HEAP32[$16 >> 2] = $4; //@line 10222
   $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 10223
   HEAP32[$17 >> 2] = $10; //@line 10224
   $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 10225
   HEAP32[$18 >> 2] = $8; //@line 10226
   sp = STACKTOP; //@line 10227
   return;
  }
  ___async_unwind = 0; //@line 10230
  HEAP32[$ReallocAsyncCtx2 >> 2] = 55; //@line 10231
  $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 10232
  HEAP32[$15 >> 2] = $2; //@line 10233
  $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 10234
  HEAP32[$16 >> 2] = $4; //@line 10235
  $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 10236
  HEAP32[$17 >> 2] = $10; //@line 10237
  $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 10238
  HEAP32[$18 >> 2] = $8; //@line 10239
  sp = STACKTOP; //@line 10240
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 10243
 __ZN4mbed6Ticker5setupEy($10, 2e5, 0); //@line 10244
 $19 = HEAP32[$2 >> 2] | 0; //@line 10245
 if (!$19) {
  return;
 }
 $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 10251
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 10252
 FUNCTION_TABLE_vi[$22 & 1023]($8); //@line 10253
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 56; //@line 10256
  sp = STACKTOP; //@line 10257
  return;
 }
 ___async_unwind = 0; //@line 10260
 HEAP32[$ReallocAsyncCtx3 >> 2] = 56; //@line 10261
 sp = STACKTOP; //@line 10262
 return;
}
function _fputc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $19 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $32 = 0, $34 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 15810
 if ((HEAP32[$1 + 76 >> 2] | 0) < 0) {
  label = 3; //@line 15815
 } else {
  if (!(___lockfile($1) | 0)) {
   label = 3; //@line 15820
  } else {
   $20 = $0 & 255; //@line 15822
   $21 = $0 & 255; //@line 15823
   if (($21 | 0) == (HEAP8[$1 + 75 >> 0] | 0)) {
    label = 12; //@line 15829
   } else {
    $26 = $1 + 20 | 0; //@line 15831
    $27 = HEAP32[$26 >> 2] | 0; //@line 15832
    if ($27 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$26 >> 2] = $27 + 1; //@line 15838
     HEAP8[$27 >> 0] = $20; //@line 15839
     $34 = $21; //@line 15840
    } else {
     label = 12; //@line 15842
    }
   }
   do {
    if ((label | 0) == 12) {
     $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 15847
     $32 = ___overflow($1, $0) | 0; //@line 15848
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 701; //@line 15851
      HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 15853
      sp = STACKTOP; //@line 15854
      return 0; //@line 15855
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 15857
      $34 = $32; //@line 15858
      break;
     }
    }
   } while (0);
   ___unlockfile($1); //@line 15863
   $$0 = $34; //@line 15864
  }
 }
 do {
  if ((label | 0) == 3) {
   $7 = $0 & 255; //@line 15869
   $8 = $0 & 255; //@line 15870
   if (($8 | 0) != (HEAP8[$1 + 75 >> 0] | 0)) {
    $13 = $1 + 20 | 0; //@line 15876
    $14 = HEAP32[$13 >> 2] | 0; //@line 15877
    if ($14 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$13 >> 2] = $14 + 1; //@line 15883
     HEAP8[$14 >> 0] = $7; //@line 15884
     $$0 = $8; //@line 15885
     break;
    }
   }
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 15889
   $19 = ___overflow($1, $0) | 0; //@line 15890
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 700; //@line 15893
    sp = STACKTOP; //@line 15894
    return 0; //@line 15895
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15897
    $$0 = $19; //@line 15898
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 15903
}
function _putc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $19 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $32 = 0, $34 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11247
 if ((HEAP32[$1 + 76 >> 2] | 0) < 0) {
  label = 3; //@line 11252
 } else {
  if (!(___lockfile($1) | 0)) {
   label = 3; //@line 11257
  } else {
   $20 = $0 & 255; //@line 11259
   $21 = $0 & 255; //@line 11260
   if (($21 | 0) == (HEAP8[$1 + 75 >> 0] | 0)) {
    label = 12; //@line 11266
   } else {
    $26 = $1 + 20 | 0; //@line 11268
    $27 = HEAP32[$26 >> 2] | 0; //@line 11269
    if ($27 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$26 >> 2] = $27 + 1; //@line 11275
     HEAP8[$27 >> 0] = $20; //@line 11276
     $34 = $21; //@line 11277
    } else {
     label = 12; //@line 11279
    }
   }
   do {
    if ((label | 0) == 12) {
     $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 11284
     $32 = ___overflow($1, $0) | 0; //@line 11285
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 685; //@line 11288
      HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 11290
      sp = STACKTOP; //@line 11291
      return 0; //@line 11292
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 11294
      $34 = $32; //@line 11295
      break;
     }
    }
   } while (0);
   ___unlockfile($1); //@line 11300
   $$0 = $34; //@line 11301
  }
 }
 do {
  if ((label | 0) == 3) {
   $7 = $0 & 255; //@line 11306
   $8 = $0 & 255; //@line 11307
   if (($8 | 0) != (HEAP8[$1 + 75 >> 0] | 0)) {
    $13 = $1 + 20 | 0; //@line 11313
    $14 = HEAP32[$13 >> 2] | 0; //@line 11314
    if ($14 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$13 >> 2] = $14 + 1; //@line 11320
     HEAP8[$14 >> 0] = $7; //@line 11321
     $$0 = $8; //@line 11322
     break;
    }
   }
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 11326
   $19 = ___overflow($1, $0) | 0; //@line 11327
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 684; //@line 11330
    sp = STACKTOP; //@line 11331
    return 0; //@line 11332
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 11334
    $$0 = $19; //@line 11335
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 11340
}
function ___fflush_unlocked($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $22 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11967
 $1 = $0 + 20 | 0; //@line 11968
 $3 = $0 + 28 | 0; //@line 11970
 do {
  if ((HEAP32[$1 >> 2] | 0) >>> 0 > (HEAP32[$3 >> 2] | 0) >>> 0) {
   $7 = HEAP32[$0 + 36 >> 2] | 0; //@line 11976
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 11977
   FUNCTION_TABLE_iiii[$7 & 15]($0, 0, 0) | 0; //@line 11978
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 691; //@line 11981
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 11983
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 11985
    HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 11987
    sp = STACKTOP; //@line 11988
    return 0; //@line 11989
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 11991
    if (!(HEAP32[$1 >> 2] | 0)) {
     $$0 = -1; //@line 11995
     break;
    } else {
     label = 5; //@line 11998
     break;
    }
   }
  } else {
   label = 5; //@line 12003
  }
 } while (0);
 if ((label | 0) == 5) {
  $13 = $0 + 4 | 0; //@line 12007
  $14 = HEAP32[$13 >> 2] | 0; //@line 12008
  $15 = $0 + 8 | 0; //@line 12009
  $16 = HEAP32[$15 >> 2] | 0; //@line 12010
  do {
   if ($14 >>> 0 < $16 >>> 0) {
    $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 12018
    $AsyncCtx3 = _emscripten_alloc_async_context(24, sp) | 0; //@line 12019
    FUNCTION_TABLE_iiii[$22 & 15]($0, $14 - $16 | 0, 1) | 0; //@line 12020
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 692; //@line 12023
     HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 12025
     HEAP32[$AsyncCtx3 + 8 >> 2] = $3; //@line 12027
     HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 12029
     HEAP32[$AsyncCtx3 + 16 >> 2] = $15; //@line 12031
     HEAP32[$AsyncCtx3 + 20 >> 2] = $13; //@line 12033
     sp = STACKTOP; //@line 12034
     return 0; //@line 12035
    } else {
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 12037
     break;
    }
   }
  } while (0);
  HEAP32[$0 + 16 >> 2] = 0; //@line 12043
  HEAP32[$3 >> 2] = 0; //@line 12044
  HEAP32[$1 >> 2] = 0; //@line 12045
  HEAP32[$15 >> 2] = 0; //@line 12046
  HEAP32[$13 >> 2] = 0; //@line 12047
  $$0 = 0; //@line 12048
 }
 return $$0 | 0; //@line 12050
}
function __ZN16SX1276_LoRaRadio8transmitEj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 8375
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8377
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8379
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8381
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 8383
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 8385
 $11 = HEAP32[$2 >> 2] | 0; //@line 8386
 if ($11 | 0) {
  $14 = HEAP32[$11 + 4 >> 2] | 0; //@line 8390
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 8391
  FUNCTION_TABLE_vii[$14 & 31]($6, $8); //@line 8392
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 96; //@line 8395
   $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 8396
   HEAP32[$15 >> 2] = $2; //@line 8397
   $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 8398
   HEAP32[$16 >> 2] = $4; //@line 8399
   $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 8400
   HEAP32[$17 >> 2] = $10; //@line 8401
   $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 8402
   HEAP32[$18 >> 2] = $8; //@line 8403
   sp = STACKTOP; //@line 8404
   return;
  }
  ___async_unwind = 0; //@line 8407
  HEAP32[$ReallocAsyncCtx2 >> 2] = 96; //@line 8408
  $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 8409
  HEAP32[$15 >> 2] = $2; //@line 8410
  $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 8411
  HEAP32[$16 >> 2] = $4; //@line 8412
  $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 8413
  HEAP32[$17 >> 2] = $10; //@line 8414
  $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 8415
  HEAP32[$18 >> 2] = $8; //@line 8416
  sp = STACKTOP; //@line 8417
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 8420
 __ZN4mbed6Ticker5setupEy($10, 1e5, 0); //@line 8421
 $19 = HEAP32[$2 >> 2] | 0; //@line 8422
 if (!$19) {
  return;
 }
 $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 8428
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 8429
 FUNCTION_TABLE_vi[$22 & 1023]($8); //@line 8430
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 97; //@line 8433
  sp = STACKTOP; //@line 8434
  return;
 }
 ___async_unwind = 0; //@line 8437
 HEAP32[$ReallocAsyncCtx3 >> 2] = 97; //@line 8438
 sp = STACKTOP; //@line 8439
 return;
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_255($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 8790
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8792
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8794
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8796
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 8798
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 8800
 $11 = HEAP32[$4 >> 2] | 0; //@line 8801
 $13 = $10 + 12 | 0; //@line 8803
 HEAP32[$10 >> 2] = 449; //@line 8804
 HEAP32[$10 + 4 >> 2] = 0; //@line 8806
 HEAP32[$10 + 8 >> 2] = $6; //@line 8808
 HEAP32[$13 >> 2] = 912; //@line 8809
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(28) | 0; //@line 8810
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($11, $6 + 1036 | 0, $10); //@line 8811
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 450; //@line 8814
  $14 = $ReallocAsyncCtx8 + 4 | 0; //@line 8815
  HEAP32[$14 >> 2] = $4; //@line 8816
  $15 = $ReallocAsyncCtx8 + 8 | 0; //@line 8817
  HEAP32[$15 >> 2] = $6; //@line 8818
  $16 = $ReallocAsyncCtx8 + 12 | 0; //@line 8819
  HEAP32[$16 >> 2] = $2; //@line 8820
  $17 = $ReallocAsyncCtx8 + 16 | 0; //@line 8821
  HEAP32[$17 >> 2] = $8; //@line 8822
  $18 = $ReallocAsyncCtx8 + 20 | 0; //@line 8823
  HEAP32[$18 >> 2] = $10; //@line 8824
  $19 = $ReallocAsyncCtx8 + 24 | 0; //@line 8825
  HEAP32[$19 >> 2] = $13; //@line 8826
  sp = STACKTOP; //@line 8827
  return;
 }
 ___async_unwind = 0; //@line 8830
 HEAP32[$ReallocAsyncCtx8 >> 2] = 450; //@line 8831
 $14 = $ReallocAsyncCtx8 + 4 | 0; //@line 8832
 HEAP32[$14 >> 2] = $4; //@line 8833
 $15 = $ReallocAsyncCtx8 + 8 | 0; //@line 8834
 HEAP32[$15 >> 2] = $6; //@line 8835
 $16 = $ReallocAsyncCtx8 + 12 | 0; //@line 8836
 HEAP32[$16 >> 2] = $2; //@line 8837
 $17 = $ReallocAsyncCtx8 + 16 | 0; //@line 8838
 HEAP32[$17 >> 2] = $8; //@line 8839
 $18 = $ReallocAsyncCtx8 + 20 | 0; //@line 8840
 HEAP32[$18 >> 2] = $10; //@line 8841
 $19 = $ReallocAsyncCtx8 + 24 | 0; //@line 8842
 HEAP32[$19 >> 2] = $13; //@line 8843
 sp = STACKTOP; //@line 8844
 return;
}
function __ZN16SX1276_LoRaRadio8rx_frameEPhjjhh($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $13 = 0, $16 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, sp = 0;
 sp = STACKTOP; //@line 2078
 STACKTOP = STACKTOP + 48 | 0; //@line 2079
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 2079
 $vararg_buffer12 = sp + 32 | 0; //@line 2080
 $vararg_buffer8 = sp + 24 | 0; //@line 2081
 $vararg_buffer4 = sp + 16 | 0; //@line 2082
 $vararg_buffer = sp; //@line 2083
 $6 = $4 & 255; //@line 2084
 $7 = $5 & 255; //@line 2085
 HEAP32[$vararg_buffer >> 2] = $2; //@line 2086
 HEAP32[$vararg_buffer + 4 >> 2] = $3; //@line 2088
 HEAP32[$vararg_buffer + 8 >> 2] = $6; //@line 2090
 HEAP32[$vararg_buffer + 12 >> 2] = $7; //@line 2092
 _mbed_tracef(16, 10968, 11776, $vararg_buffer); //@line 2093
 _emscripten_asm_const_i(6) | 0; //@line 2094
 $10 = HEAP32[$0 + 752 >> 2] | 0; //@line 2096
 if (($10 | 0) != ($6 | 0)) {
  HEAP32[$vararg_buffer4 >> 2] = $10; //@line 2099
  HEAP32[$vararg_buffer4 + 4 >> 2] = $6; //@line 2101
  _mbed_tracef(16, 10968, 11858, $vararg_buffer4); //@line 2102
  STACKTOP = sp; //@line 2103
  return;
 }
 $13 = HEAP32[$0 + 756 >> 2] | 0; //@line 2106
 if (($13 | 0) != ($7 | 0)) {
  HEAP32[$vararg_buffer8 >> 2] = $13; //@line 2109
  HEAP32[$vararg_buffer8 + 4 >> 2] = $7; //@line 2111
  _mbed_tracef(16, 10968, 11905, $vararg_buffer8); //@line 2112
  STACKTOP = sp; //@line 2113
  return;
 }
 $16 = HEAP32[$0 + 692 >> 2] | 0; //@line 2116
 if (($16 | 0) == ($3 | 0)) {
  _memcpy($0 + 792 | 0, $1 | 0, $2 | 0) | 0; //@line 2120
  HEAP8[$0 + 782 >> 0] = $2; //@line 2123
  HEAP8[$0 + 781 >> 0] = -35; //@line 2125
  HEAP8[$0 + 780 >> 0] = -5; //@line 2127
  HEAP8[$0 + 783 >> 0] = 1; //@line 2129
  HEAP32[$0 + 784 >> 2] = _emscripten_asm_const_i(3) | 0; //@line 2132
  STACKTOP = sp; //@line 2133
  return;
 } else {
  HEAP32[$vararg_buffer12 >> 2] = $16; //@line 2135
  HEAP32[$vararg_buffer12 + 4 >> 2] = $3; //@line 2137
  _mbed_tracef(16, 10968, 11952, $vararg_buffer12); //@line 2138
  STACKTOP = sp; //@line 2139
  return;
 }
}
function __ZN7LoRaPHY15setup_rx_windowEbj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $14 = 0, $17 = 0, $20 = 0, $3 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 24567
 $3 = $0 + 4 | 0; //@line 24568
 $4 = HEAP32[$3 >> 2] | 0; //@line 24569
 $7 = HEAP32[(HEAP32[$4 >> 2] | 0) + 72 >> 2] | 0; //@line 24572
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 24573
 FUNCTION_TABLE_vi[$7 & 1023]($4); //@line 24574
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 562; //@line 24577
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 24579
  HEAP8[$AsyncCtx + 8 >> 0] = $1 & 1; //@line 24582
  HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 24584
  sp = STACKTOP; //@line 24585
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 24588
 $11 = HEAP32[$3 >> 2] | 0; //@line 24589
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 28 >> 2] | 0; //@line 24592
 do {
  if ($1) {
   $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 24595
   FUNCTION_TABLE_vii[$14 & 31]($11, 0); //@line 24596
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 564; //@line 24599
    HEAP32[$AsyncCtx7 + 4 >> 2] = $3; //@line 24601
    sp = STACKTOP; //@line 24602
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 24605
    break;
   }
  } else {
   $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 24609
   FUNCTION_TABLE_vii[$14 & 31]($11, $2); //@line 24610
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 563; //@line 24613
    HEAP32[$AsyncCtx3 + 4 >> 2] = $3; //@line 24615
    sp = STACKTOP; //@line 24616
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 24619
    break;
   }
  }
 } while (0);
 $17 = HEAP32[$3 >> 2] | 0; //@line 24624
 $20 = HEAP32[(HEAP32[$17 >> 2] | 0) + 76 >> 2] | 0; //@line 24627
 $AsyncCtx11 = _emscripten_alloc_async_context(4, sp) | 0; //@line 24628
 FUNCTION_TABLE_vi[$20 & 1023]($17); //@line 24629
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 565; //@line 24632
  sp = STACKTOP; //@line 24633
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx11 | 0); //@line 24636
  return;
 }
}
function __ZN7LoRaMac11schedule_txEv__async_cb_203($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $31 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 2757
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2759
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2761
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 2767
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 2769
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 2771
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 2773
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 2775
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 2777
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 2779
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 2781
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 2783
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 2785
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 2787
 $31 = HEAP32[$2 >> 2] | 0; //@line 2788
 $34 = HEAP32[(HEAP32[$31 >> 2] | 0) + 28 >> 2] | 0; //@line 2791
 $36 = HEAP8[$4 + 1136 >> 0] | 0; //@line 2793
 $37 = HEAP8[HEAP32[$0 + 12 >> 2] >> 0] | 0; //@line 2794
 $38 = HEAP32[HEAP32[$0 + 16 >> 2] >> 2] | 0; //@line 2795
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(56) | 0; //@line 2797
 FUNCTION_TABLE_viiiii[$34 & 7]($31, $36, $37, $38, $4 + 1184 | 0); //@line 2798
 if (!___async) {
  ___async_unwind = 0; //@line 2801
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 417; //@line 2803
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $10; //@line 2805
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 2807
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $12; //@line 2809
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $14; //@line 2811
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $16; //@line 2813
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $2; //@line 2815
 HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $18; //@line 2817
 HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $20; //@line 2819
 HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $22; //@line 2821
 HEAP32[$ReallocAsyncCtx5 + 40 >> 2] = $24; //@line 2823
 HEAP32[$ReallocAsyncCtx5 + 44 >> 2] = $26; //@line 2825
 HEAP32[$ReallocAsyncCtx5 + 48 >> 2] = $28; //@line 2827
 HEAP32[$ReallocAsyncCtx5 + 52 >> 2] = $30; //@line 2829
 sp = STACKTOP; //@line 2830
 return;
}
function __ZN7LoRaMac14handle_rx_doneEPhtsa($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $12 = 0, $15 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 10708
 STACKTOP = STACKTOP + 16 | 0; //@line 10709
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10709
 $5 = sp; //@line 10710
 $7 = HEAP32[$0 + 1328 >> 2] | 0; //@line 10712
 $8 = $5 + 12 | 0; //@line 10713
 HEAP32[$5 >> 2] = 6; //@line 10714
 HEAP32[$5 + 4 >> 2] = 0; //@line 10716
 HEAP32[$5 + 8 >> 2] = $0; //@line 10718
 HEAP32[$8 >> 2] = 924; //@line 10719
 $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10720
 $9 = __ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3_($7, $5, $1, $2, $3, $4) | 0; //@line 10721
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 313; //@line 10724
  HEAP32[$AsyncCtx3 + 4 >> 2] = $8; //@line 10726
  HEAP32[$AsyncCtx3 + 8 >> 2] = $5; //@line 10728
  sp = STACKTOP; //@line 10729
  STACKTOP = sp; //@line 10730
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 10732
 $12 = HEAP32[$8 >> 2] | 0; //@line 10733
 do {
  if ($12 | 0) {
   $15 = HEAP32[$12 + 8 >> 2] | 0; //@line 10738
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 10739
   FUNCTION_TABLE_vi[$15 & 1023]($5); //@line 10740
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 314; //@line 10743
    HEAP32[$AsyncCtx + 4 >> 2] = $5; //@line 10745
    HEAP32[$AsyncCtx + 8 >> 2] = $9; //@line 10747
    sp = STACKTOP; //@line 10748
    STACKTOP = sp; //@line 10749
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 10751
    break;
   }
  }
 } while (0);
 if ($9 | 0) {
  STACKTOP = sp; //@line 10758
  return;
 }
 $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 10760
 _mbed_assert_internal(13612, 13621, 141); //@line 10761
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 315; //@line 10764
  sp = STACKTOP; //@line 10765
  STACKTOP = sp; //@line 10766
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 10768
 STACKTOP = sp; //@line 10769
 return;
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_183($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 31644
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31646
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31648
 $5 = HEAP8[$2 >> 0] & -5; //@line 31650
 HEAP8[$2 >> 0] = $5; //@line 31651
 if (!($5 & 16)) {
  return;
 }
 HEAP8[$2 >> 0] = $5 & -17; //@line 31658
 $10 = HEAP32[$4 + 1324 >> 2] | 0; //@line 31660
 $11 = $10 + 48 | 0; //@line 31661
 $13 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 31663
 $14 = $10 + 60 | 0; //@line 31664
 $15 = HEAP32[$14 >> 2] | 0; //@line 31665
 if (!$15) {
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(16) | 0; //@line 31668
  _mbed_assert_internal(15679, 15684, 1102); //@line 31669
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 407; //@line 31672
   $17 = $ReallocAsyncCtx12 + 4 | 0; //@line 31673
   HEAP32[$17 >> 2] = $14; //@line 31674
   $18 = $ReallocAsyncCtx12 + 8 | 0; //@line 31675
   HEAP32[$18 >> 2] = $11; //@line 31676
   $19 = $ReallocAsyncCtx12 + 12 | 0; //@line 31677
   HEAP32[$19 >> 2] = $13; //@line 31678
   sp = STACKTOP; //@line 31679
   return;
  }
  ___async_unwind = 0; //@line 31682
  HEAP32[$ReallocAsyncCtx12 >> 2] = 407; //@line 31683
  $17 = $ReallocAsyncCtx12 + 4 | 0; //@line 31684
  HEAP32[$17 >> 2] = $14; //@line 31685
  $18 = $ReallocAsyncCtx12 + 8 | 0; //@line 31686
  HEAP32[$18 >> 2] = $11; //@line 31687
  $19 = $ReallocAsyncCtx12 + 12 | 0; //@line 31688
  HEAP32[$19 >> 2] = $13; //@line 31689
  sp = STACKTOP; //@line 31690
  return;
 } else {
  $20 = HEAP32[$15 >> 2] | 0; //@line 31693
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 31694
  FUNCTION_TABLE_vii[$20 & 31]($11, $13); //@line 31695
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 408; //@line 31698
   sp = STACKTOP; //@line 31699
   return;
  }
  ___async_unwind = 0; //@line 31702
  HEAP32[$ReallocAsyncCtx5 >> 2] = 408; //@line 31703
  sp = STACKTOP; //@line 31704
  return;
 }
}
function __ZN14lorawan_timersD2Ev__async_cb_282($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 10769
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10771
 $4 = HEAP32[$2 + 68 >> 2] | 0; //@line 10773
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 10778
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 10779
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 56 | 0); //@line 10780
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 286; //@line 10783
   $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 10784
   HEAP32[$9 >> 2] = $2; //@line 10785
   sp = STACKTOP; //@line 10786
   return;
  }
  ___async_unwind = 0; //@line 10789
  HEAP32[$ReallocAsyncCtx3 >> 2] = 286; //@line 10790
  $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 10791
  HEAP32[$9 >> 2] = $2; //@line 10792
  sp = STACKTOP; //@line 10793
  return;
 }
 $11 = HEAP32[$2 + 48 >> 2] | 0; //@line 10797
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 10802
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 10803
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 36 | 0); //@line 10804
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 287; //@line 10807
   $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 10808
   HEAP32[$16 >> 2] = $2; //@line 10809
   sp = STACKTOP; //@line 10810
   return;
  }
  ___async_unwind = 0; //@line 10813
  HEAP32[$ReallocAsyncCtx4 >> 2] = 287; //@line 10814
  $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 10815
  HEAP32[$16 >> 2] = $2; //@line 10816
  sp = STACKTOP; //@line 10817
  return;
 }
 $18 = HEAP32[$2 + 28 >> 2] | 0; //@line 10821
 if (!$18) {
  return;
 }
 $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 10828
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 10829
 FUNCTION_TABLE_vi[$22 & 1023]($2 + 16 | 0); //@line 10830
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 288; //@line 10833
  sp = STACKTOP; //@line 10834
  return;
 }
 ___async_unwind = 0; //@line 10837
 HEAP32[$ReallocAsyncCtx5 >> 2] = 288; //@line 10838
 sp = STACKTOP; //@line 10839
 return;
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_297($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 11666
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11668
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11670
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11672
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11674
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11676
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 11678
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 11680
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 11682
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 11684
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 11686
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 11688
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 11690
 $25 = $4 + 1088 | 0; //@line 11691
 HEAP32[$25 >> 2] = 0; //@line 11692
 HEAP32[$25 + 4 >> 2] = 0; //@line 11692
 HEAP32[$25 + 8 >> 2] = 0; //@line 11692
 HEAP32[$25 + 12 >> 2] = 0; //@line 11692
 HEAP8[$4 + 1104 >> 0] = 1; //@line 11694
 HEAP32[$2 >> 2] = 684; //@line 11695
 $27 = $4 + 1112 | 0; //@line 11696
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(52) | 0; //@line 11697
 __ZN4mbed10TimerEventC2Ev($27); //@line 11698
 if (!___async) {
  ___async_unwind = 0; //@line 11701
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 100; //@line 11703
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $27; //@line 11705
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 11707
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 11709
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 11711
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 11713
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 11715
 HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $14; //@line 11717
 HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $16; //@line 11719
 HEAP32[$ReallocAsyncCtx3 + 36 >> 2] = $18; //@line 11721
 HEAP32[$ReallocAsyncCtx3 + 40 >> 2] = $20; //@line 11723
 HEAP32[$ReallocAsyncCtx3 + 44 >> 2] = $22; //@line 11725
 HEAP32[$ReallocAsyncCtx3 + 48 >> 2] = $24; //@line 11727
 sp = STACKTOP; //@line 11728
 return;
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_296($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 11596
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11598
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11600
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11602
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11604
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11606
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 11608
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 11610
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 11612
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 11614
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 11616
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 11618
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 11620
 $25 = $4 + 1152 | 0; //@line 11621
 HEAP32[$25 >> 2] = 0; //@line 11622
 HEAP32[$25 + 4 >> 2] = 0; //@line 11622
 HEAP32[$25 + 8 >> 2] = 0; //@line 11622
 HEAP32[$25 + 12 >> 2] = 0; //@line 11622
 HEAP8[$4 + 1168 >> 0] = 1; //@line 11624
 HEAP32[$2 >> 2] = 684; //@line 11625
 $27 = $4 + 1176 | 0; //@line 11626
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(52) | 0; //@line 11627
 __ZN4mbed10TimerEventC2Ev($27); //@line 11628
 if (!___async) {
  ___async_unwind = 0; //@line 11631
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 101; //@line 11633
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $27; //@line 11635
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 11637
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 11639
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 11641
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 11643
 HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 11645
 HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $14; //@line 11647
 HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $16; //@line 11649
 HEAP32[$ReallocAsyncCtx2 + 36 >> 2] = $18; //@line 11651
 HEAP32[$ReallocAsyncCtx2 + 40 >> 2] = $20; //@line 11653
 HEAP32[$ReallocAsyncCtx2 + 44 >> 2] = $22; //@line 11655
 HEAP32[$ReallocAsyncCtx2 + 48 >> 2] = $24; //@line 11657
 sp = STACKTOP; //@line 11658
 return;
}
function __ZN12radio_eventsD2Ev__async_cb_143($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 27358
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27360
 $4 = HEAP32[$2 + 44 >> 2] | 0; //@line 27362
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 27367
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 27368
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 32 | 0); //@line 27369
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 281; //@line 27372
   $9 = $ReallocAsyncCtx5 + 4 | 0; //@line 27373
   HEAP32[$9 >> 2] = $2; //@line 27374
   sp = STACKTOP; //@line 27375
   return;
  }
  ___async_unwind = 0; //@line 27378
  HEAP32[$ReallocAsyncCtx5 >> 2] = 281; //@line 27379
  $9 = $ReallocAsyncCtx5 + 4 | 0; //@line 27380
  HEAP32[$9 >> 2] = $2; //@line 27381
  sp = STACKTOP; //@line 27382
  return;
 }
 $11 = HEAP32[$2 + 28 >> 2] | 0; //@line 27386
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 27391
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 27392
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 16 | 0); //@line 27393
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 282; //@line 27396
   $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 27397
   HEAP32[$16 >> 2] = $2; //@line 27398
   sp = STACKTOP; //@line 27399
   return;
  }
  ___async_unwind = 0; //@line 27402
  HEAP32[$ReallocAsyncCtx6 >> 2] = 282; //@line 27403
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 27404
  HEAP32[$16 >> 2] = $2; //@line 27405
  sp = STACKTOP; //@line 27406
  return;
 }
 $18 = HEAP32[$2 + 12 >> 2] | 0; //@line 27410
 if (!$18) {
  return;
 }
 $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 27416
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 27417
 FUNCTION_TABLE_vi[$21 & 1023]($2); //@line 27418
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 283; //@line 27421
  sp = STACKTOP; //@line 27422
  return;
 }
 ___async_unwind = 0; //@line 27425
 HEAP32[$ReallocAsyncCtx7 >> 2] = 283; //@line 27426
 sp = STACKTOP; //@line 27427
 return;
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_295($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 11526
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11528
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11530
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11532
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11534
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11536
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 11538
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 11540
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 11542
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 11544
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 11546
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 11548
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 11550
 $25 = $4 + 1216 | 0; //@line 11551
 HEAP32[$25 >> 2] = 0; //@line 11552
 HEAP32[$25 + 4 >> 2] = 0; //@line 11552
 HEAP32[$25 + 8 >> 2] = 0; //@line 11552
 HEAP32[$25 + 12 >> 2] = 0; //@line 11552
 HEAP8[$4 + 1232 >> 0] = 1; //@line 11554
 HEAP32[$2 >> 2] = 684; //@line 11555
 $27 = $4 + 1240 | 0; //@line 11556
 $ReallocAsyncCtx = _emscripten_realloc_async_context(52) | 0; //@line 11557
 __ZN4mbed10TimerEventC2Ev($27); //@line 11558
 if (!___async) {
  ___async_unwind = 0; //@line 11561
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 102; //@line 11563
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $27; //@line 11565
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 11567
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 11569
 HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 11571
 HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 11573
 HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 11575
 HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 11577
 HEAP32[$ReallocAsyncCtx + 32 >> 2] = $16; //@line 11579
 HEAP32[$ReallocAsyncCtx + 36 >> 2] = $18; //@line 11581
 HEAP32[$ReallocAsyncCtx + 40 >> 2] = $20; //@line 11583
 HEAP32[$ReallocAsyncCtx + 44 >> 2] = $22; //@line 11585
 HEAP32[$ReallocAsyncCtx + 48 >> 2] = $24; //@line 11587
 sp = STACKTOP; //@line 11588
 return;
}
function __ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 30222
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30224
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30226
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30228
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30230
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30232
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30234
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 30236
 HEAP8[$2 + 1097 >> 0] = HEAP8[___async_retval >> 0] | 0; //@line 30240
 HEAP8[$4 >> 0] = 0; //@line 30241
 HEAP8[$6 >> 0] = HEAP8[$2 + 1156 >> 0] << 7; //@line 30245
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 30246
 $20 = __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt($2, $8, $10, 0, 0, 0) | 0; //@line 30247
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 411; //@line 30250
  $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 30251
  HEAP32[$21 >> 2] = $2; //@line 30252
  $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 30253
  HEAP32[$22 >> 2] = $12; //@line 30254
  $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 30255
  HEAP32[$23 >> 2] = $14; //@line 30256
  $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 30257
  HEAP32[$24 >> 2] = $6; //@line 30258
  $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 30259
  HEAP32[$25 >> 2] = $4; //@line 30260
  sp = STACKTOP; //@line 30261
  return;
 }
 HEAP32[___async_retval >> 2] = $20; //@line 30265
 ___async_unwind = 0; //@line 30266
 HEAP32[$ReallocAsyncCtx2 >> 2] = 411; //@line 30267
 $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 30268
 HEAP32[$21 >> 2] = $2; //@line 30269
 $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 30270
 HEAP32[$22 >> 2] = $12; //@line 30271
 $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 30272
 HEAP32[$23 >> 2] = $14; //@line 30273
 $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 30274
 HEAP32[$24 >> 2] = $6; //@line 30275
 $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 30276
 HEAP32[$25 >> 2] = $4; //@line 30277
 sp = STACKTOP; //@line 30278
 return;
}
function __Z11compute_micPKhtS0_jhjPj__async_cb_365($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 27369
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27371
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27373
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27375
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27377
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 27379
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 27382
  $11 = _mbedtls_cipher_cmac_starts(23188, $4, 128) | 0; //@line 27383
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 510; //@line 27386
   $12 = $ReallocAsyncCtx4 + 4 | 0; //@line 27387
   HEAP32[$12 >> 2] = $6; //@line 27388
   $13 = $ReallocAsyncCtx4 + 8 | 0; //@line 27389
   HEAP32[$13 >> 2] = $8; //@line 27390
   $14 = $ReallocAsyncCtx4 + 12 | 0; //@line 27391
   HEAP32[$14 >> 2] = $2; //@line 27392
   sp = STACKTOP; //@line 27393
   return;
  }
  HEAP32[___async_retval >> 2] = $11; //@line 27397
  ___async_unwind = 0; //@line 27398
  HEAP32[$ReallocAsyncCtx4 >> 2] = 510; //@line 27399
  $12 = $ReallocAsyncCtx4 + 4 | 0; //@line 27400
  HEAP32[$12 >> 2] = $6; //@line 27401
  $13 = $ReallocAsyncCtx4 + 8 | 0; //@line 27402
  HEAP32[$13 >> 2] = $8; //@line 27403
  $14 = $ReallocAsyncCtx4 + 12 | 0; //@line 27404
  HEAP32[$14 >> 2] = $2; //@line 27405
  sp = STACKTOP; //@line 27406
  return;
 } else {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 27409
  _mbedtls_cipher_free(23188); //@line 27410
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 514; //@line 27413
   $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 27414
   HEAP32[$16 >> 2] = $AsyncRetVal; //@line 27415
   sp = STACKTOP; //@line 27416
   return;
  }
  ___async_unwind = 0; //@line 27419
  HEAP32[$ReallocAsyncCtx6 >> 2] = 514; //@line 27420
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 27421
  HEAP32[$16 >> 2] = $AsyncRetVal; //@line 27422
  sp = STACKTOP; //@line 27423
  return;
 }
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_392($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $28 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 28420
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28424
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28426
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28428
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28430
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28432
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28434
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28436
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 28438
 if ((HEAP16[$0 + 4 >> 1] | 0) < -1) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(28) | 0; //@line 28441
  $20 = __ZN4mbed5Timer7read_msEv($4) | 0; //@line 28442
  if (!___async) {
   HEAP32[___async_retval >> 2] = $20; //@line 28446
   ___async_unwind = 0; //@line 28447
  }
  HEAP32[$ReallocAsyncCtx6 >> 2] = 66; //@line 28449
  HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $6; //@line 28451
  HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $16; //@line 28453
  HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $18; //@line 28455
  HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $12; //@line 28457
  HEAP32[$ReallocAsyncCtx6 + 20 >> 2] = $4; //@line 28459
  HEAP32[$ReallocAsyncCtx6 + 24 >> 2] = $14; //@line 28461
  sp = STACKTOP; //@line 28462
  return;
 } else {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 28465
  $28 = __ZN4mbed5Timer7read_msEv($4) | 0; //@line 28466
  if (!___async) {
   HEAP32[___async_retval >> 2] = $28; //@line 28470
   ___async_unwind = 0; //@line 28471
  }
  HEAP32[$ReallocAsyncCtx5 >> 2] = 67; //@line 28473
  HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $6; //@line 28475
  HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $8; //@line 28477
  HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $10; //@line 28479
  HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $12; //@line 28481
  HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $4; //@line 28483
  HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $14; //@line 28485
  sp = STACKTOP; //@line 28486
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_350($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 26533
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26537
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26539
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26541
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26543
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26545
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26547
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 26549
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 26552
 $18 = $4 + 16 | 0; //@line 26553
 HEAP32[$18 >> 2] = HEAP32[$6 >> 2]; //@line 26554
 HEAP32[$18 + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 26554
 HEAP8[$18 + 8 >> 0] = HEAP8[$6 + 8 >> 0] | 0; //@line 26554
 _equeue_event_dtor($4, 357); //@line 26555
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 26556
 $19 = _equeue_post($8, 358, $4) | 0; //@line 26557
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 359; //@line 26560
  $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 26561
  HEAP32[$20 >> 2] = $10; //@line 26562
  $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 26563
  HEAP32[$21 >> 2] = $12; //@line 26564
  $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 26565
  HEAP32[$22 >> 2] = $14; //@line 26566
  $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 26567
  HEAP32[$23 >> 2] = $16; //@line 26568
  sp = STACKTOP; //@line 26569
  return;
 }
 HEAP32[___async_retval >> 2] = $19; //@line 26573
 ___async_unwind = 0; //@line 26574
 HEAP32[$ReallocAsyncCtx6 >> 2] = 359; //@line 26575
 $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 26576
 HEAP32[$20 >> 2] = $10; //@line 26577
 $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 26578
 HEAP32[$21 >> 2] = $12; //@line 26579
 $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 26580
 HEAP32[$22 >> 2] = $14; //@line 26581
 $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 26582
 HEAP32[$23 >> 2] = $16; //@line 26583
 sp = STACKTOP; //@line 26584
 return;
}
function __Z22compute_join_frame_micPKhtS0_Pj__async_cb_235($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 5142
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5144
 $4 = HEAP16[$0 + 8 >> 1] | 0; //@line 5146
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5148
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5150
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 5152
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 5155
  $11 = _mbedtls_cipher_cmac_starts(23188, $2, 128) | 0; //@line 5156
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 516; //@line 5159
   $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 5160
   HEAP16[$12 >> 1] = $4; //@line 5161
   $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 5162
   HEAP32[$13 >> 2] = $6; //@line 5163
   $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 5164
   HEAP32[$14 >> 2] = $8; //@line 5165
   sp = STACKTOP; //@line 5166
   return;
  }
  HEAP32[___async_retval >> 2] = $11; //@line 5170
  ___async_unwind = 0; //@line 5171
  HEAP32[$ReallocAsyncCtx3 >> 2] = 516; //@line 5172
  $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 5173
  HEAP16[$12 >> 1] = $4; //@line 5174
  $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 5175
  HEAP32[$13 >> 2] = $6; //@line 5176
  $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 5177
  HEAP32[$14 >> 2] = $8; //@line 5178
  sp = STACKTOP; //@line 5179
  return;
 } else {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 5182
  _mbedtls_cipher_free(23188); //@line 5183
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 519; //@line 5186
   $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 5187
   HEAP32[$16 >> 2] = $AsyncRetVal; //@line 5188
   sp = STACKTOP; //@line 5189
   return;
  }
  ___async_unwind = 0; //@line 5192
  HEAP32[$ReallocAsyncCtx5 >> 2] = 519; //@line 5193
  $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 5194
  HEAP32[$16 >> 2] = $AsyncRetVal; //@line 5195
  sp = STACKTOP; //@line 5196
  return;
 }
}
function _mbed_trace_init() {
 var $$0 = 0, $0 = 0, $10 = 0, $13 = 0, $14 = 0, $17 = 0, $19 = 0, $22 = 0, $24 = 0, $3 = 0, $4 = 0, $7 = 0, $9 = 0;
 $0 = HEAP32[183] | 0; //@line 4490
 if (!$0) {
  $3 = _malloc(HEAP32[184] | 0) | 0; //@line 4494
  HEAP32[183] = $3; //@line 4495
  $19 = $3; //@line 4496
 } else {
  $19 = $0; //@line 4498
 }
 $4 = HEAP32[185] | 0; //@line 4500
 if (!$4) {
  $7 = _malloc(HEAP32[186] | 0) | 0; //@line 4504
  HEAP32[185] = $7; //@line 4505
  $9 = $7; //@line 4506
 } else {
  $9 = $4; //@line 4508
 }
 HEAP32[187] = $9; //@line 4511
 $10 = HEAP32[180] | 0; //@line 4512
 if (!$10) {
  $13 = _malloc(HEAP32[182] | 0) | 0; //@line 4516
  HEAP32[180] = $13; //@line 4517
  $22 = $13; //@line 4518
 } else {
  $22 = $10; //@line 4520
 }
 $14 = HEAP32[181] | 0; //@line 4522
 if (!$14) {
  $17 = _malloc(HEAP32[182] | 0) | 0; //@line 4526
  HEAP32[181] = $17; //@line 4527
  $24 = $17; //@line 4528
 } else {
  $24 = $14; //@line 4530
 }
 if (($19 | 0) == 0 | ($9 | 0) == 0 | ($22 | 0) == 0 | ($24 | 0) == 0) {
  _free($19); //@line 4540
  _free(HEAP32[185] | 0); //@line 4542
  _free(HEAP32[180] | 0); //@line 4544
  _free(HEAP32[181] | 0); //@line 4546
  HEAP8[716] = 127; //@line 4547
  HEAP32[180] = 0; //@line 4548
  HEAP32[181] = 0; //@line 4549
  HEAP32[182] = 24; //@line 4550
  HEAP32[183] = 0; //@line 4551
  HEAP32[184] = 1024; //@line 4552
  HEAP32[185] = 0; //@line 4553
  HEAP32[186] = 128; //@line 4554
  HEAP32[188] = 0; //@line 4555
  HEAP32[189] = 0; //@line 4556
  HEAP32[190] = 18; //@line 4557
  HEAP32[191] = 0; //@line 4558
  HEAP32[192] = 0; //@line 4558
  HEAP32[193] = 0; //@line 4558
  HEAP32[194] = 0; //@line 4558
  $$0 = -1; //@line 4559
  return $$0 | 0; //@line 4560
 } else {
  _memset($9 | 0, 0, HEAP32[186] | 0) | 0; //@line 4563
  _memset(HEAP32[180] | 0, 0, HEAP32[182] | 0) | 0; //@line 4566
  _memset(HEAP32[181] | 0, 0, HEAP32[182] | 0) | 0; //@line 4569
  _memset(HEAP32[183] | 0, 0, HEAP32[184] | 0) | 0; //@line 4572
  $$0 = 0; //@line 4573
  return $$0 | 0; //@line 4574
 }
 return 0; //@line 4576
}
function __Z11compute_micPKhtS0_jhjPj__async_cb_364($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 27309
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27311
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27313
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27315
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 27317
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 27320
  $9 = _mbedtls_cipher_cmac_update(23188, 14241, 16) | 0; //@line 27321
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 511; //@line 27324
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 27325
   HEAP32[$10 >> 2] = $2; //@line 27326
   $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 27327
   HEAP32[$11 >> 2] = $4; //@line 27328
   $12 = $ReallocAsyncCtx2 + 12 | 0; //@line 27329
   HEAP32[$12 >> 2] = $6; //@line 27330
   sp = STACKTOP; //@line 27331
   return;
  }
  HEAP32[___async_retval >> 2] = $9; //@line 27335
  ___async_unwind = 0; //@line 27336
  HEAP32[$ReallocAsyncCtx2 >> 2] = 511; //@line 27337
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 27338
  HEAP32[$10 >> 2] = $2; //@line 27339
  $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 27340
  HEAP32[$11 >> 2] = $4; //@line 27341
  $12 = $ReallocAsyncCtx2 + 12 | 0; //@line 27342
  HEAP32[$12 >> 2] = $6; //@line 27343
  sp = STACKTOP; //@line 27344
  return;
 } else {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 27347
  _mbedtls_cipher_free(23188); //@line 27348
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 514; //@line 27351
   $14 = $ReallocAsyncCtx6 + 4 | 0; //@line 27352
   HEAP32[$14 >> 2] = $AsyncRetVal; //@line 27353
   sp = STACKTOP; //@line 27354
   return;
  }
  ___async_unwind = 0; //@line 27357
  HEAP32[$ReallocAsyncCtx6 >> 2] = 514; //@line 27358
  $14 = $ReallocAsyncCtx6 + 4 | 0; //@line 27359
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 27360
  sp = STACKTOP; //@line 27361
  return;
 }
}
function ___strchrnul($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $13 = 0, $17 = 0, $18 = 0, $2 = 0, $24 = 0, $25 = 0, $31 = 0, $38 = 0, $39 = 0, $7 = 0;
 $2 = $1 & 255; //@line 11731
 L1 : do {
  if (!$2) {
   $$0 = $0 + (_strlen($0) | 0) | 0; //@line 11737
  } else {
   if (!($0 & 3)) {
    $$030$lcssa = $0; //@line 11743
   } else {
    $7 = $1 & 255; //@line 11745
    $$03039 = $0; //@line 11746
    while (1) {
     $10 = HEAP8[$$03039 >> 0] | 0; //@line 11748
     if ($10 << 24 >> 24 == 0 ? 1 : $10 << 24 >> 24 == $7 << 24 >> 24) {
      $$0 = $$03039; //@line 11753
      break L1;
     }
     $13 = $$03039 + 1 | 0; //@line 11756
     if (!($13 & 3)) {
      $$030$lcssa = $13; //@line 11761
      break;
     } else {
      $$03039 = $13; //@line 11764
     }
    }
   }
   $17 = Math_imul($2, 16843009) | 0; //@line 11768
   $18 = HEAP32[$$030$lcssa >> 2] | 0; //@line 11769
   L10 : do {
    if (!(($18 & -2139062144 ^ -2139062144) & $18 + -16843009)) {
     $$02936 = $$030$lcssa; //@line 11777
     $25 = $18; //@line 11777
     while (1) {
      $24 = $25 ^ $17; //@line 11779
      if (($24 & -2139062144 ^ -2139062144) & $24 + -16843009 | 0) {
       $$029$lcssa = $$02936; //@line 11786
       break L10;
      }
      $31 = $$02936 + 4 | 0; //@line 11789
      $25 = HEAP32[$31 >> 2] | 0; //@line 11790
      if (($25 & -2139062144 ^ -2139062144) & $25 + -16843009 | 0) {
       $$029$lcssa = $31; //@line 11799
       break;
      } else {
       $$02936 = $31; //@line 11797
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa; //@line 11804
    }
   } while (0);
   $38 = $1 & 255; //@line 11807
   $$1 = $$029$lcssa; //@line 11808
   while (1) {
    $39 = HEAP8[$$1 >> 0] | 0; //@line 11810
    if ($39 << 24 >> 24 == 0 ? 1 : $39 << 24 >> 24 == $38 << 24 >> 24) {
     $$0 = $$1; //@line 11816
     break;
    } else {
     $$1 = $$1 + 1 | 0; //@line 11819
    }
   }
  }
 } while (0);
 return $$0 | 0; //@line 11824
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_101($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $17 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 23681
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23687
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23689
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23691
 _mbed_tracef(16, 12356, 12688, HEAP32[$0 + 4 >> 2] | 0); //@line 23692
 HEAP8[$6 + 1932 >> 0] = 1; //@line 23694
 $12 = $6 + 1892 | 0; //@line 23695
 $13 = HEAP32[$12 >> 2] | 0; //@line 23696
 if (!$13) {
  HEAP32[___async_retval >> 2] = 0; //@line 23700
  return;
 }
 $17 = HEAP32[$6 + 2288 >> 2] | 0; //@line 23705
 $19 = HEAP32[$13 + 4 >> 2] | 0; //@line 23707
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(24) | 0; //@line 23708
 FUNCTION_TABLE_vii[$19 & 31]($10, $6 + 1880 | 0); //@line 23709
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 212; //@line 23712
  $20 = $ReallocAsyncCtx5 + 4 | 0; //@line 23713
  HEAP32[$20 >> 2] = $12; //@line 23714
  $21 = $ReallocAsyncCtx5 + 8 | 0; //@line 23715
  HEAP32[$21 >> 2] = $10; //@line 23716
  $22 = $ReallocAsyncCtx5 + 12 | 0; //@line 23717
  HEAP32[$22 >> 2] = $17; //@line 23718
  $23 = $ReallocAsyncCtx5 + 16 | 0; //@line 23719
  HEAP32[$23 >> 2] = $10; //@line 23720
  $24 = $ReallocAsyncCtx5 + 20 | 0; //@line 23721
  HEAP32[$24 >> 2] = $8; //@line 23722
  sp = STACKTOP; //@line 23723
  return;
 }
 ___async_unwind = 0; //@line 23726
 HEAP32[$ReallocAsyncCtx5 >> 2] = 212; //@line 23727
 $20 = $ReallocAsyncCtx5 + 4 | 0; //@line 23728
 HEAP32[$20 >> 2] = $12; //@line 23729
 $21 = $ReallocAsyncCtx5 + 8 | 0; //@line 23730
 HEAP32[$21 >> 2] = $10; //@line 23731
 $22 = $ReallocAsyncCtx5 + 12 | 0; //@line 23732
 HEAP32[$22 >> 2] = $17; //@line 23733
 $23 = $ReallocAsyncCtx5 + 16 | 0; //@line 23734
 HEAP32[$23 >> 2] = $10; //@line 23735
 $24 = $ReallocAsyncCtx5 + 20 | 0; //@line 23736
 HEAP32[$24 >> 2] = $8; //@line 23737
 sp = STACKTOP; //@line 23738
 return;
}
function __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 26914
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26916
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26918
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26920
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26922
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26924
 HEAP8[$2 + 1097 >> 0] = HEAP8[___async_retval >> 0] | 0; //@line 26928
 HEAP8[$4 >> 0] = 0; //@line 26929
 HEAP8[$6 >> 0] = HEAP8[$2 + 1156 >> 0] << 7; //@line 26933
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 26934
 $16 = __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt($2, $4, $6, 0, 0, 0) | 0; //@line 26935
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 469; //@line 26938
  $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 26939
  HEAP32[$17 >> 2] = $2; //@line 26940
  $18 = $ReallocAsyncCtx2 + 8 | 0; //@line 26941
  HEAP32[$18 >> 2] = $8; //@line 26942
  $19 = $ReallocAsyncCtx2 + 12 | 0; //@line 26943
  HEAP32[$19 >> 2] = $6; //@line 26944
  $20 = $ReallocAsyncCtx2 + 16 | 0; //@line 26945
  HEAP32[$20 >> 2] = $4; //@line 26946
  $21 = $ReallocAsyncCtx2 + 20 | 0; //@line 26947
  HEAP32[$21 >> 2] = $10; //@line 26948
  sp = STACKTOP; //@line 26949
  return;
 }
 HEAP32[___async_retval >> 2] = $16; //@line 26953
 ___async_unwind = 0; //@line 26954
 HEAP32[$ReallocAsyncCtx2 >> 2] = 469; //@line 26955
 $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 26956
 HEAP32[$17 >> 2] = $2; //@line 26957
 $18 = $ReallocAsyncCtx2 + 8 | 0; //@line 26958
 HEAP32[$18 >> 2] = $8; //@line 26959
 $19 = $ReallocAsyncCtx2 + 12 | 0; //@line 26960
 HEAP32[$19 >> 2] = $6; //@line 26961
 $20 = $ReallocAsyncCtx2 + 16 | 0; //@line 26962
 HEAP32[$20 >> 2] = $4; //@line 26963
 $21 = $ReallocAsyncCtx2 + 20 | 0; //@line 26964
 HEAP32[$21 >> 2] = $10; //@line 26965
 sp = STACKTOP; //@line 26966
 return;
}
function __ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_275($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10024
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10026
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10028
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10030
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10032
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 10034
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 10036
 $13 = HEAP32[$2 >> 2] | 0; //@line 10037
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 24 >> 2] | 0; //@line 10040
 $19 = (__ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0) + 10 | 0; //@line 10043
 $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 10044
 FUNCTION_TABLE_iiii[$16 & 15]($13, $6, $19) | 0; //@line 10045
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 436; //@line 10048
  $20 = $ReallocAsyncCtx + 4 | 0; //@line 10049
  HEAP32[$20 >> 2] = $8; //@line 10050
  $21 = $ReallocAsyncCtx + 8 | 0; //@line 10051
  HEAP32[$21 >> 2] = $4; //@line 10052
  $22 = $ReallocAsyncCtx + 12 | 0; //@line 10053
  HEAP32[$22 >> 2] = $10; //@line 10054
  $23 = $ReallocAsyncCtx + 16 | 0; //@line 10055
  HEAP32[$23 >> 2] = $12; //@line 10056
  $24 = $ReallocAsyncCtx + 20 | 0; //@line 10057
  HEAP32[$24 >> 2] = $2; //@line 10058
  sp = STACKTOP; //@line 10059
  return;
 }
 ___async_unwind = 0; //@line 10062
 HEAP32[$ReallocAsyncCtx >> 2] = 436; //@line 10063
 $20 = $ReallocAsyncCtx + 4 | 0; //@line 10064
 HEAP32[$20 >> 2] = $8; //@line 10065
 $21 = $ReallocAsyncCtx + 8 | 0; //@line 10066
 HEAP32[$21 >> 2] = $4; //@line 10067
 $22 = $ReallocAsyncCtx + 12 | 0; //@line 10068
 HEAP32[$22 >> 2] = $10; //@line 10069
 $23 = $ReallocAsyncCtx + 16 | 0; //@line 10070
 HEAP32[$23 >> 2] = $12; //@line 10071
 $24 = $ReallocAsyncCtx + 20 | 0; //@line 10072
 HEAP32[$24 >> 2] = $2; //@line 10073
 sp = STACKTOP; //@line 10074
 return;
}
function __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($0) {
 $0 = $0 | 0;
 var $$0$lcssa = 0, $$01315 = 0, $$016 = 0, $$1 = 0, $$114 = 0, $$sink = 0, $2 = 0, $23 = 0, $26 = 0, $27 = 0, $5 = 0, $6 = 0, $7 = 0;
 $2 = HEAP8[$0 + 2 >> 0] | 0; //@line 19089
 if (!($2 << 24 >> 24)) {
  $$0$lcssa = 0; //@line 19092
  $26 = $$0$lcssa << 24 >> 24 != 0; //@line 19093
  $$sink = $26 & 1; //@line 19094
  HEAP8[$0 >> 0] = $$sink; //@line 19095
  $27 = $0 + 3 | 0; //@line 19096
  HEAP8[$27 >> 0] = $$0$lcssa; //@line 19097
  return;
 } else {
  $$01315 = 0; //@line 19100
  $$016 = 0; //@line 19100
  $5 = 0; //@line 19100
 }
 while (1) {
  $6 = HEAP8[$0 + 4 + $5 >> 0] | 0; //@line 19104
  switch ($6 << 24 >> 24) {
  case 5:
  case 10:
   {
    $7 = $$01315 + 1 << 24 >> 24; //@line 19107
    HEAP8[($$016 & 255) + ($0 + 132) >> 0] = $6; //@line 19111
    HEAP8[($$016 + 1 & 255) + ($0 + 132) >> 0] = HEAP8[($7 & 255) + ($0 + 4) >> 0] | 0; //@line 19118
    $$1 = $$016 + 2 << 24 >> 24; //@line 19119
    $$114 = $7; //@line 19119
    break;
   }
  case 8:
   {
    HEAP8[($$016 & 255) + ($0 + 132) >> 0] = 8; //@line 19126
    $$1 = $$016 + 1 << 24 >> 24; //@line 19127
    $$114 = $$01315; //@line 19127
    break;
   }
  case 6:
   {
    $$1 = $$016; //@line 19133
    $$114 = $5 + 2 & 255; //@line 19133
    break;
   }
  case 7:
  case 3:
   {
    $$1 = $$016; //@line 19138
    $$114 = $$01315 + 1 << 24 >> 24; //@line 19138
    break;
   }
  default:
   {
    $$1 = $$016; //@line 19142
    $$114 = $$01315; //@line 19142
   }
  }
  $23 = $$114 + 1 << 24 >> 24; //@line 19145
  if (($23 & 255) < ($2 & 255)) {
   $$01315 = $23; //@line 19149
   $$016 = $$1; //@line 19149
   $5 = $23 & 255; //@line 19149
  } else {
   $$0$lcssa = $$1; //@line 19151
   break;
  }
 }
 $26 = $$0$lcssa << 24 >> 24 != 0; //@line 19155
 $$sink = $26 & 1; //@line 19156
 HEAP8[$0 >> 0] = $$sink; //@line 19157
 $27 = $0 + 3 | 0; //@line 19158
 HEAP8[$27 >> 0] = $$0$lcssa; //@line 19159
 return;
}
function ___fwritex($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$038 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $10 = 0, $12 = 0, $14 = 0, $22 = 0, $28 = 0, $3 = 0, $31 = 0, $4 = 0, $9 = 0, label = 0;
 $3 = $2 + 16 | 0; //@line 11473
 $4 = HEAP32[$3 >> 2] | 0; //@line 11474
 if (!$4) {
  if (!(___towrite($2) | 0)) {
   $12 = HEAP32[$3 >> 2] | 0; //@line 11481
   label = 5; //@line 11482
  } else {
   $$1 = 0; //@line 11484
  }
 } else {
  $12 = $4; //@line 11488
  label = 5; //@line 11489
 }
 L5 : do {
  if ((label | 0) == 5) {
   $9 = $2 + 20 | 0; //@line 11493
   $10 = HEAP32[$9 >> 2] | 0; //@line 11494
   $14 = $10; //@line 11497
   if (($12 - $10 | 0) >>> 0 < $1 >>> 0) {
    $$1 = FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 15]($2, $0, $1) | 0; //@line 11502
    break;
   }
   L10 : do {
    if ((HEAP8[$2 + 75 >> 0] | 0) > -1) {
     $$038 = $1; //@line 11510
     while (1) {
      if (!$$038) {
       $$139 = 0; //@line 11514
       $$141 = $0; //@line 11514
       $$143 = $1; //@line 11514
       $31 = $14; //@line 11514
       break L10;
      }
      $22 = $$038 + -1 | 0; //@line 11517
      if ((HEAP8[$0 + $22 >> 0] | 0) == 10) {
       break;
      } else {
       $$038 = $22; //@line 11524
      }
     }
     $28 = FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 15]($2, $0, $$038) | 0; //@line 11529
     if ($28 >>> 0 < $$038 >>> 0) {
      $$1 = $28; //@line 11532
      break L5;
     }
     $$139 = $$038; //@line 11538
     $$141 = $0 + $$038 | 0; //@line 11538
     $$143 = $1 - $$038 | 0; //@line 11538
     $31 = HEAP32[$9 >> 2] | 0; //@line 11538
    } else {
     $$139 = 0; //@line 11540
     $$141 = $0; //@line 11540
     $$143 = $1; //@line 11540
     $31 = $14; //@line 11540
    }
   } while (0);
   _memcpy($31 | 0, $$141 | 0, $$143 | 0) | 0; //@line 11543
   HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + $$143; //@line 11546
   $$1 = $$139 + $$143 | 0; //@line 11548
  }
 } while (0);
 return $$1 | 0; //@line 11551
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_256($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 8851
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8853
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8855
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8857
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 8859
 $9 = HEAP32[$2 >> 2] | 0; //@line 8860
 $11 = $6 + 12 | 0; //@line 8862
 HEAP32[$6 >> 2] = 452; //@line 8863
 HEAP32[$6 + 4 >> 2] = 0; //@line 8865
 HEAP32[$6 + 8 >> 2] = $4; //@line 8867
 HEAP32[$11 >> 2] = 912; //@line 8868
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(24) | 0; //@line 8869
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($9, $4 + 1056 | 0, $6); //@line 8870
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 453; //@line 8873
  $12 = $ReallocAsyncCtx7 + 4 | 0; //@line 8874
  HEAP32[$12 >> 2] = $11; //@line 8875
  $13 = $ReallocAsyncCtx7 + 8 | 0; //@line 8876
  HEAP32[$13 >> 2] = $2; //@line 8877
  $14 = $ReallocAsyncCtx7 + 12 | 0; //@line 8878
  HEAP32[$14 >> 2] = $4; //@line 8879
  $15 = $ReallocAsyncCtx7 + 16 | 0; //@line 8880
  HEAP32[$15 >> 2] = $8; //@line 8881
  $16 = $ReallocAsyncCtx7 + 20 | 0; //@line 8882
  HEAP32[$16 >> 2] = $6; //@line 8883
  sp = STACKTOP; //@line 8884
  return;
 }
 ___async_unwind = 0; //@line 8887
 HEAP32[$ReallocAsyncCtx7 >> 2] = 453; //@line 8888
 $12 = $ReallocAsyncCtx7 + 4 | 0; //@line 8889
 HEAP32[$12 >> 2] = $11; //@line 8890
 $13 = $ReallocAsyncCtx7 + 8 | 0; //@line 8891
 HEAP32[$13 >> 2] = $2; //@line 8892
 $14 = $ReallocAsyncCtx7 + 12 | 0; //@line 8893
 HEAP32[$14 >> 2] = $4; //@line 8894
 $15 = $ReallocAsyncCtx7 + 16 | 0; //@line 8895
 HEAP32[$15 >> 2] = $8; //@line 8896
 $16 = $ReallocAsyncCtx7 + 20 | 0; //@line 8897
 HEAP32[$16 >> 2] = $6; //@line 8898
 sp = STACKTOP; //@line 8899
 return;
}
function _mbedtls_cipher_setkey($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $22 = 0, $24 = 0, $25 = 0, $30 = 0, $32 = 0, $33 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 2630
 if (!$0) {
  $$0 = -24832; //@line 2633
  return $$0 | 0; //@line 2634
 }
 $5 = HEAP32[$0 >> 2] | 0; //@line 2636
 if (!$5) {
  $$0 = -24832; //@line 2639
  return $$0 | 0; //@line 2640
 }
 if (!(HEAP32[$5 + 20 >> 2] & 2)) {
  if ((HEAP32[$5 + 8 >> 2] | 0) != ($2 | 0)) {
   $$0 = -24832; //@line 2651
   return $$0 | 0; //@line 2652
  }
 }
 HEAP32[$0 + 4 >> 2] = $2; //@line 2656
 HEAP32[$0 + 8 >> 2] = $3; //@line 2658
 L11 : do {
  if (($3 | 0) != 1) {
   switch (HEAP32[$5 + 4 >> 2] | 0) {
   case 5:
   case 3:
    {
     break L11;
     break;
    }
   default:
    {}
   }
   if ($3 | 0) {
    $$0 = -24832; //@line 2674
    return $$0 | 0; //@line 2675
   }
   $30 = HEAP32[(HEAP32[$5 + 28 >> 2] | 0) + 16 >> 2] | 0; //@line 2680
   $32 = HEAP32[$0 + 60 >> 2] | 0; //@line 2682
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2683
   $33 = FUNCTION_TABLE_iiii[$30 & 15]($32, $1, $2) | 0; //@line 2684
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 589; //@line 2687
    sp = STACKTOP; //@line 2688
    return 0; //@line 2689
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2691
   $$0 = $33; //@line 2692
   return $$0 | 0; //@line 2693
  }
 } while (0);
 $22 = HEAP32[(HEAP32[$5 + 28 >> 2] | 0) + 12 >> 2] | 0; //@line 2699
 $24 = HEAP32[$0 + 60 >> 2] | 0; //@line 2701
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2702
 $25 = FUNCTION_TABLE_iiii[$22 & 15]($24, $1, $2) | 0; //@line 2703
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 588; //@line 2706
  sp = STACKTOP; //@line 2707
  return 0; //@line 2708
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2710
 $$0 = $25; //@line 2711
 return $$0 | 0; //@line 2712
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_113($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $15 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx30 = 0, sp = 0;
 sp = STACKTOP; //@line 24380
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24384
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24386
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 24388
 $8 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 24389
 if ($8 | 0) {
  $11 = HEAP32[$8 + 8 >> 2] | 0; //@line 24393
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 24394
  FUNCTION_TABLE_vi[$11 & 1023]($4); //@line 24395
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 200; //@line 24398
   $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 24399
   HEAP32[$12 >> 2] = $AsyncRetVal; //@line 24400
   $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 24401
   HEAP32[$13 >> 2] = $6; //@line 24402
   sp = STACKTOP; //@line 24403
   return;
  }
  ___async_unwind = 0; //@line 24406
  HEAP32[$ReallocAsyncCtx2 >> 2] = 200; //@line 24407
  $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 24408
  HEAP32[$12 >> 2] = $AsyncRetVal; //@line 24409
  $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 24410
  HEAP32[$13 >> 2] = $6; //@line 24411
  sp = STACKTOP; //@line 24412
  return;
 }
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = -1011; //@line 24418
  return;
 }
 $ReallocAsyncCtx30 = _emscripten_realloc_async_context(8) | 0; //@line 24421
 _mbed_assert_internal(13612, 12396, 1135); //@line 24422
 if (___async) {
  HEAP32[$ReallocAsyncCtx30 >> 2] = 201; //@line 24425
  $15 = $ReallocAsyncCtx30 + 4 | 0; //@line 24426
  HEAP32[$15 >> 2] = $6; //@line 24427
  sp = STACKTOP; //@line 24428
  return;
 }
 ___async_unwind = 0; //@line 24431
 HEAP32[$ReallocAsyncCtx30 >> 2] = 201; //@line 24432
 $15 = $ReallocAsyncCtx30 + 4 | 0; //@line 24433
 HEAP32[$15 >> 2] = $6; //@line 24434
 sp = STACKTOP; //@line 24435
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $30 = 0, $34 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 15449
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15451
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15457
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15459
 $12 = HEAP8[$0 + 24 >> 0] & 1; //@line 15462
 $14 = HEAP8[$0 + 25 >> 0] & 1; //@line 15465
 $16 = HEAP8[$0 + 26 >> 0] | 0; //@line 15467
 $18 = HEAP8[$0 + 27 >> 0] | 0; //@line 15469
 $20 = HEAP32[$0 + 28 >> 2] | 0; //@line 15471
 $22 = HEAP32[$0 + 32 >> 2] | 0; //@line 15473
 $24 = HEAP32[$0 + 36 >> 2] | 0; //@line 15475
 $26 = HEAP32[$0 + 40 >> 2] | 0; //@line 15477
 $27 = HEAP32[$2 >> 2] | 0; //@line 15478
 $30 = HEAP32[(HEAP32[$27 >> 2] | 0) + 32 >> 2] | 0; //@line 15481
 $34 = HEAP32[(HEAP32[$0 + 12 >> 2] | 0) + ((HEAPU8[HEAP32[$0 + 8 >> 2] >> 0] | 0) * 12 | 0) >> 2] | 0; //@line 15485
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 15486
 FUNCTION_TABLE_vii[$30 & 31]($27, $34); //@line 15487
 if (!___async) {
  ___async_unwind = 0; //@line 15490
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 541; //@line 15492
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $8; //@line 15494
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $10; //@line 15496
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 15498
 HEAP8[$ReallocAsyncCtx2 + 16 >> 0] = $12 & 1; //@line 15501
 HEAP8[$ReallocAsyncCtx2 + 17 >> 0] = $14 & 1; //@line 15504
 HEAP8[$ReallocAsyncCtx2 + 18 >> 0] = $16; //@line 15506
 HEAP8[$ReallocAsyncCtx2 + 19 >> 0] = $18; //@line 15508
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $20; //@line 15510
 HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $22; //@line 15512
 HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $24; //@line 15514
 HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $26; //@line 15516
 sp = STACKTOP; //@line 15517
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_112($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $15 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx29 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 24318
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24322
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24324
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 24326
 $8 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 24327
 if ($8 | 0) {
  $11 = HEAP32[$8 + 8 >> 2] | 0; //@line 24331
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 24332
  FUNCTION_TABLE_vi[$11 & 1023]($4); //@line 24333
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 205; //@line 24336
   $12 = $ReallocAsyncCtx4 + 4 | 0; //@line 24337
   HEAP32[$12 >> 2] = $AsyncRetVal; //@line 24338
   $13 = $ReallocAsyncCtx4 + 8 | 0; //@line 24339
   HEAP32[$13 >> 2] = $6; //@line 24340
   sp = STACKTOP; //@line 24341
   return;
  }
  ___async_unwind = 0; //@line 24344
  HEAP32[$ReallocAsyncCtx4 >> 2] = 205; //@line 24345
  $12 = $ReallocAsyncCtx4 + 4 | 0; //@line 24346
  HEAP32[$12 >> 2] = $AsyncRetVal; //@line 24347
  $13 = $ReallocAsyncCtx4 + 8 | 0; //@line 24348
  HEAP32[$13 >> 2] = $6; //@line 24349
  sp = STACKTOP; //@line 24350
  return;
 }
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = 0; //@line 24356
  return;
 }
 $ReallocAsyncCtx29 = _emscripten_realloc_async_context(8) | 0; //@line 24359
 _mbed_assert_internal(13612, 12396, 1180); //@line 24360
 if (___async) {
  HEAP32[$ReallocAsyncCtx29 >> 2] = 206; //@line 24363
  $15 = $ReallocAsyncCtx29 + 4 | 0; //@line 24364
  HEAP32[$15 >> 2] = $6; //@line 24365
  sp = STACKTOP; //@line 24366
  return;
 }
 ___async_unwind = 0; //@line 24369
 HEAP32[$ReallocAsyncCtx29 >> 2] = 206; //@line 24370
 $15 = $ReallocAsyncCtx29 + 4 | 0; //@line 24371
 HEAP32[$15 >> 2] = $6; //@line 24372
 sp = STACKTOP; //@line 24373
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_111($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $15 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx28 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 24256
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24260
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24262
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 24264
 $8 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 24265
 if ($8 | 0) {
  $11 = HEAP32[$8 + 8 >> 2] | 0; //@line 24269
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 24270
  FUNCTION_TABLE_vi[$11 & 1023]($4); //@line 24271
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 214; //@line 24274
   $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 24275
   HEAP32[$12 >> 2] = $AsyncRetVal; //@line 24276
   $13 = $ReallocAsyncCtx6 + 8 | 0; //@line 24277
   HEAP32[$13 >> 2] = $6; //@line 24278
   sp = STACKTOP; //@line 24279
   return;
  }
  ___async_unwind = 0; //@line 24282
  HEAP32[$ReallocAsyncCtx6 >> 2] = 214; //@line 24283
  $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 24284
  HEAP32[$12 >> 2] = $AsyncRetVal; //@line 24285
  $13 = $ReallocAsyncCtx6 + 8 | 0; //@line 24286
  HEAP32[$13 >> 2] = $6; //@line 24287
  sp = STACKTOP; //@line 24288
  return;
 }
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = 0; //@line 24294
  return;
 }
 $ReallocAsyncCtx28 = _emscripten_realloc_async_context(8) | 0; //@line 24297
 _mbed_assert_internal(13612, 12396, 1217); //@line 24298
 if (___async) {
  HEAP32[$ReallocAsyncCtx28 >> 2] = 215; //@line 24301
  $15 = $ReallocAsyncCtx28 + 4 | 0; //@line 24302
  HEAP32[$15 >> 2] = $6; //@line 24303
  sp = STACKTOP; //@line 24304
  return;
 }
 ___async_unwind = 0; //@line 24307
 HEAP32[$ReallocAsyncCtx28 >> 2] = 215; //@line 24308
 $15 = $ReallocAsyncCtx28 + 4 | 0; //@line 24309
 HEAP32[$15 >> 2] = $6; //@line 24310
 sp = STACKTOP; //@line 24311
 return;
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_208($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $24 = 0, $27 = 0, $30 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 3160
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3162
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3166
 $8 = $0 + 16 | 0; //@line 3168
 $10 = HEAP32[$8 >> 2] | 0; //@line 3170
 $13 = HEAP32[$8 + 4 >> 2] | 0; //@line 3173
 $15 = HEAP32[$0 + 24 >> 2] | 0; //@line 3175
 $17 = HEAP32[$0 + 28 >> 2] | 0; //@line 3177
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 >> 2]; //@line 3179
 __ZN4mbed6Ticker5setupEy($6, $10, $13); //@line 3180
 $18 = HEAP32[$2 >> 2] | 0; //@line 3181
 if ($18 | 0) {
  $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 3185
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 3186
  FUNCTION_TABLE_vi[$21 & 1023]($17); //@line 3187
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 90; //@line 3190
   $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 3191
   HEAP32[$22 >> 2] = $15; //@line 3192
   sp = STACKTOP; //@line 3193
   return;
  }
  ___async_unwind = 0; //@line 3196
  HEAP32[$ReallocAsyncCtx3 >> 2] = 90; //@line 3197
  $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 3198
  HEAP32[$22 >> 2] = $15; //@line 3199
  sp = STACKTOP; //@line 3200
  return;
 }
 $24 = HEAP32[$15 + 788 >> 2] | 0; //@line 3204
 if (!$24) {
  return;
 }
 $27 = HEAP32[$24 + 60 >> 2] | 0; //@line 3210
 if (!$27) {
  return;
 }
 $30 = HEAP32[$27 >> 2] | 0; //@line 3216
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 3217
 FUNCTION_TABLE_vi[$30 & 1023]($24 + 48 | 0); //@line 3218
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 91; //@line 3221
  sp = STACKTOP; //@line 3222
  return;
 }
 ___async_unwind = 0; //@line 3225
 HEAP32[$ReallocAsyncCtx4 >> 2] = 91; //@line 3226
 sp = STACKTOP; //@line 3227
 return;
}
function __ZN16SX1276_LoRaRadio11time_on_airE10modem_typeh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$031 = 0.0, $10 = 0.0, $45 = 0.0, $6 = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 828
 STACKTOP = STACKTOP + 16 | 0; //@line 829
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 829
 $vararg_buffer1 = sp + 8 | 0; //@line 830
 _mbed_tracef(16, 10968, 11143, sp); //@line 832
 switch ($1 | 0) {
 case 0:
  {
   $$0 = 1; //@line 835
   HEAP32[$vararg_buffer1 >> 2] = $$0; //@line 836
   _mbed_tracef(16, 10968, 11155, $vararg_buffer1); //@line 837
   STACKTOP = sp; //@line 838
   return $$0 | 0; //@line 838
  }
 case 1:
  {
   switch (HEAP32[$0 + 752 >> 2] | 0) {
   case 7:
    {
     $$031 = 125.0e3; //@line 846
     break;
    }
   case 8:
    {
     $$031 = 25.0e4; //@line 850
     break;
    }
   case 9:
    {
     $$031 = 5.0e5; //@line 854
     break;
    }
   default:
    {
     $$031 = 0.0; //@line 858
    }
   }
   $6 = HEAP32[$0 + 756 >> 2] | 0; //@line 862
   $10 = 1.0 / ($$031 / +(1 << $6 | 0)); //@line 866
   $45 = +Math_ceil(+(+(((($2 & 255) << 3) + 28 - ($6 << 2) + (HEAP8[$0 + 766 >> 0] << 4 & 255) + (HEAP8[$0 + 764 >> 0] | 0 ? -20 : 0) | 0) >>> 0) / +($6 - (HEAP8[$0 + 760 >> 0] | 0 ? 2 : 0) << 2 >>> 0))) * +((HEAPU8[$0 + 761 >> 0] | 0) + 4 | 0); //@line 902
   $$0 = ~~+Math_floor(+(((+(HEAPU16[$0 + 762 >> 1] | 0) + 4.25) * $10 + $10 * (($45 > 0.0 ? $45 : 0.0) + 8.0)) * 1.0e3 + .999)) >>> 0; //@line 912
   HEAP32[$vararg_buffer1 >> 2] = $$0; //@line 913
   _mbed_tracef(16, 10968, 11155, $vararg_buffer1); //@line 914
   STACKTOP = sp; //@line 915
   return $$0 | 0; //@line 915
  }
 default:
  {
   $$0 = 0; //@line 919
   HEAP32[$vararg_buffer1 >> 2] = $$0; //@line 920
   _mbed_tracef(16, 10968, 11155, $vararg_buffer1); //@line 921
   STACKTOP = sp; //@line 922
   return $$0 | 0; //@line 922
  }
 }
 return 0; //@line 925
}
function _main__async_cb_435($0) {
 $0 = $0 | 0;
 var $15 = 0, $16 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 34452
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34456
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 34458
 __ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t(23828, 23836) | 0; //@line 34461
 if (__ZN16LoRaWANInterface25disable_adaptive_datarateEv(23828) | 0) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 34465
  _puts(16050) | 0; //@line 34466
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 672; //@line 34469
   sp = STACKTOP; //@line 34470
   return;
  }
  ___async_unwind = 0; //@line 34473
  HEAP32[$ReallocAsyncCtx6 >> 2] = 672; //@line 34474
  sp = STACKTOP; //@line 34475
  return;
 }
 __ZN16LoRaWANInterface12set_datarateEh(23828, 5) | 0; //@line 34478
 HEAP8[$4 >> 0] = 0; //@line 34479
 HEAP32[$4 + 4 >> 2] = 24533; //@line 34481
 HEAP32[$4 + 8 >> 2] = 24541; //@line 34483
 HEAP32[$4 + 12 >> 2] = 24549; //@line 34485
 HEAP8[$4 + 16 >> 0] = 3; //@line 34487
 $15 = __ZN16LoRaWANInterface7connectERK15lorawan_connect(23828, $4) | 0; //@line 34488
 switch ($15 | 0) {
 case 0:
 case -1016:
  {
   break;
  }
 default:
  {
   HEAP32[$6 >> 2] = $15; //@line 34494
   _printf(16084, $6) | 0; //@line 34495
   HEAP32[___async_retval >> 2] = -1; //@line 34497
   return;
  }
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 34501
 _puts(16113) | 0; //@line 34502
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 673; //@line 34505
  $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 34506
  HEAP32[$16 >> 2] = $4; //@line 34507
  sp = STACKTOP; //@line 34508
  return;
 }
 ___async_unwind = 0; //@line 34511
 HEAP32[$ReallocAsyncCtx5 >> 2] = 673; //@line 34512
 $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 34513
 HEAP32[$16 >> 2] = $4; //@line 34514
 sp = STACKTOP; //@line 34515
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_134($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 26367
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26371
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26373
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26375
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26377
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26379
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26381
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 26383
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 26386
 HEAP32[$4 + 16 >> 2] = HEAP32[$6 >> 2]; //@line 26389
 _equeue_event_dtor($4, 229); //@line 26390
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 26391
 $20 = _equeue_post($8, 230, $4) | 0; //@line 26392
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 231; //@line 26395
  $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 26396
  HEAP32[$21 >> 2] = $10; //@line 26397
  $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 26398
  HEAP32[$22 >> 2] = $12; //@line 26399
  $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 26400
  HEAP32[$23 >> 2] = $14; //@line 26401
  $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 26402
  HEAP32[$24 >> 2] = $16; //@line 26403
  sp = STACKTOP; //@line 26404
  return;
 }
 HEAP32[___async_retval >> 2] = $20; //@line 26408
 ___async_unwind = 0; //@line 26409
 HEAP32[$ReallocAsyncCtx6 >> 2] = 231; //@line 26410
 $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 26411
 HEAP32[$21 >> 2] = $10; //@line 26412
 $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 26413
 HEAP32[$22 >> 2] = $12; //@line 26414
 $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 26415
 HEAP32[$23 >> 2] = $14; //@line 26416
 $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 26417
 HEAP32[$24 >> 2] = $16; //@line 26418
 sp = STACKTOP; //@line 26419
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_150($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 27838
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27842
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27844
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27846
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27848
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27850
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 27852
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 27854
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 27857
 HEAP16[$4 + 16 >> 1] = HEAP16[$6 >> 1] | 0; //@line 27860
 _equeue_event_dtor($4, 238); //@line 27861
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 27862
 $20 = _equeue_post($8, 239, $4) | 0; //@line 27863
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 240; //@line 27866
  $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 27867
  HEAP32[$21 >> 2] = $10; //@line 27868
  $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 27869
  HEAP32[$22 >> 2] = $12; //@line 27870
  $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 27871
  HEAP32[$23 >> 2] = $14; //@line 27872
  $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 27873
  HEAP32[$24 >> 2] = $16; //@line 27874
  sp = STACKTOP; //@line 27875
  return;
 }
 HEAP32[___async_retval >> 2] = $20; //@line 27879
 ___async_unwind = 0; //@line 27880
 HEAP32[$ReallocAsyncCtx6 >> 2] = 240; //@line 27881
 $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 27882
 HEAP32[$21 >> 2] = $10; //@line 27883
 $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 27884
 HEAP32[$22 >> 2] = $12; //@line 27885
 $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 27886
 HEAP32[$23 >> 2] = $14; //@line 27887
 $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 27888
 HEAP32[$24 >> 2] = $16; //@line 27889
 sp = STACKTOP; //@line 27890
 return;
}
function __ZN7LoRaPHY12get_next_ADREbRaS0_Rj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0$i$i = 0, $$sink$i = 0, $11 = 0, $14 = 0, $22 = 0, $28 = 0, $41 = 0, $44 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 25103
 $7 = HEAPU8[$0 + 24 >> 0] | 0; //@line 25106
 $8 = $0 + 25 | 0; //@line 25107
 $11 = (HEAPU8[$8 >> 0] | 0) + $7 | 0; //@line 25110
 $14 = $0 + 26 | 0; //@line 25113
 if ((HEAP8[$2 >> 0] | 0) == (HEAPU8[$14 >> 0] | 0)) {
  HEAP32[$4 >> 2] = 0; //@line 25118
  $$0 = 0; //@line 25119
  return $$0 | 0; //@line 25120
 }
 if ((HEAP32[$4 >> 2] | 0) >>> 0 < $7 >>> 0) {
  $$0 = 0; //@line 25125
  return $$0 | 0; //@line 25126
 }
 HEAP8[$3 >> 0] = HEAP8[$0 + 22 >> 0] | 0; //@line 25130
 $22 = HEAP32[$4 >> 2] | 0; //@line 25131
 if ($22 >>> 0 < $11 >>> 0) {
  $$0 = 1; //@line 25134
  return $$0 | 0; //@line 25135
 }
 if ((($22 >>> 0) % ((HEAPU8[$8 >> 0] | 0) >>> 0) | 0 | 0) != 1) {
  $$0 = 1; //@line 25142
  return $$0 | 0; //@line 25143
 }
 $28 = HEAP8[$2 >> 0] | 0; //@line 25145
 $$sink$i = HEAP8[((HEAP8[$0 + 132 >> 0] & 1) == 0 ? $14 : $0 + 35 | 0) >> 0] | 0; //@line 25152
 $$0$i$i = $$sink$i << 24 >> 24 == $28 << 24 >> 24 ? $$sink$i : ($28 & 255) + 255 & 255; //@line 25157
 HEAP8[$2 >> 0] = $$0$i$i; //@line 25158
 $41 = ($$0$i$i << 24 >> 24 | 0) != (HEAPU8[$14 >> 0] | 0); //@line 25162
 if ($41 | $1 ^ 1) {
  $$0 = $41; //@line 25166
  return $$0 | 0; //@line 25167
 }
 $44 = HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0; //@line 25171
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 25172
 FUNCTION_TABLE_vi[$44 & 1023]($0); //@line 25173
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 572; //@line 25176
  sp = STACKTOP; //@line 25177
  return 0; //@line 25178
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 25180
 $$0 = 0; //@line 25181
 return $$0 | 0; //@line 25182
}
function _mbedtls_gcm_setkey__async_cb_198($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 2077
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2079
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2081
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2083
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2085
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 2087
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 2091
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 2094
 dest = $2; //@line 2095
 stop = dest + 16 | 0; //@line 2095
 do {
  HEAP8[dest >> 0] = 0; //@line 2095
  dest = dest + 1 | 0; //@line 2095
 } while ((dest | 0) < (stop | 0));
 $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 2096
 $11 = _mbedtls_cipher_update($6, $2, 16, $2, $4) | 0; //@line 2097
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 607; //@line 2100
  $12 = $ReallocAsyncCtx + 4 | 0; //@line 2101
  HEAP32[$12 >> 2] = $2; //@line 2102
  $13 = $ReallocAsyncCtx + 8 | 0; //@line 2103
  HEAP32[$13 >> 2] = $2; //@line 2104
  $14 = $ReallocAsyncCtx + 12 | 0; //@line 2105
  HEAP32[$14 >> 2] = $8; //@line 2106
  $15 = $ReallocAsyncCtx + 16 | 0; //@line 2107
  HEAP32[$15 >> 2] = $4; //@line 2108
  sp = STACKTOP; //@line 2109
  return;
 }
 HEAP32[___async_retval >> 2] = $11; //@line 2113
 ___async_unwind = 0; //@line 2114
 HEAP32[$ReallocAsyncCtx >> 2] = 607; //@line 2115
 $12 = $ReallocAsyncCtx + 4 | 0; //@line 2116
 HEAP32[$12 >> 2] = $2; //@line 2117
 $13 = $ReallocAsyncCtx + 8 | 0; //@line 2118
 HEAP32[$13 >> 2] = $2; //@line 2119
 $14 = $ReallocAsyncCtx + 12 | 0; //@line 2120
 HEAP32[$14 >> 2] = $8; //@line 2121
 $15 = $ReallocAsyncCtx + 16 | 0; //@line 2122
 HEAP32[$15 >> 2] = $4; //@line 2123
 sp = STACKTOP; //@line 2124
 return;
}
function __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $12 = 0, $13 = 0, $16 = 0, $20 = 0, $21 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 25431
 if (($1 | 0) == ($2 | 0)) {
  $21 = $1 + 16 | 0; //@line 25434
  HEAP32[$21 >> 2] = 0; //@line 25435
  return;
 }
 $4 = $1 + 12 | 0; //@line 25438
 $5 = HEAP32[$4 >> 2] | 0; //@line 25439
 do {
  if ($5 | 0) {
   $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 25444
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 25445
   FUNCTION_TABLE_vi[$8 & 1023]($1); //@line 25446
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 573; //@line 25449
    HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 25451
    HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 25453
    HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 25455
    sp = STACKTOP; //@line 25456
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 25459
    break;
   }
  }
 } while (0);
 $12 = $2 + 12 | 0; //@line 25464
 $13 = HEAP32[$12 >> 2] | 0; //@line 25465
 do {
  if (!$13) {
   $20 = 0; //@line 25469
  } else {
   $16 = HEAP32[$13 + 4 >> 2] | 0; //@line 25472
   $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 25473
   FUNCTION_TABLE_vii[$16 & 31]($1, $2); //@line 25474
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 574; //@line 25477
    HEAP32[$AsyncCtx3 + 4 >> 2] = $12; //@line 25479
    HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 25481
    HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 25483
    sp = STACKTOP; //@line 25484
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 25487
    $20 = HEAP32[$12 >> 2] | 0; //@line 25489
    break;
   }
  }
 } while (0);
 HEAP32[$4 >> 2] = $20; //@line 25494
 $21 = $1 + 16 | 0; //@line 25495
 HEAP32[$21 >> 2] = 0; //@line 25496
 return;
}
function __ZN12LoRaWANStack29activation_by_personalizationERK15lorawan_connect($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $19 = 0, $2 = 0, $6 = 0, $8 = 0, $AsyncCtx = 0, $vararg_buffer3 = 0, sp = 0;
 sp = STACKTOP; //@line 9395
 STACKTOP = STACKTOP + 32 | 0; //@line 9396
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 9396
 $vararg_buffer3 = sp + 16 | 0; //@line 9397
 $2 = $0 + 1876 | 0; //@line 9400
 if (!(HEAP32[$2 >> 2] | 0)) {
  _mbed_tracef(2, 12356, 13306, sp); //@line 9404
  $$0 = -1012; //@line 9405
  STACKTOP = sp; //@line 9406
  return $$0 | 0; //@line 9406
 }
 _mbed_tracef(16, 12356, 13432, sp + 8 | 0); //@line 9408
 $6 = HEAP32[$1 + 8 >> 2] | 0; //@line 9410
 $8 = HEAP32[$1 + 12 >> 2] | 0; //@line 9412
 $10 = HEAP32[$1 + 16 >> 2] | 0; //@line 9414
 $11 = $0 + 1960 | 0; //@line 9415
 $12 = HEAP32[$11 >> 2] | 0; //@line 9416
 $13 = $0 + 1956 | 0; //@line 9417
 $14 = HEAP32[$13 >> 2] | 0; //@line 9418
 HEAP32[$vararg_buffer3 >> 2] = $14; //@line 9419
 HEAP32[$vararg_buffer3 + 4 >> 2] = $12; //@line 9421
 _mbed_tracef(16, 12356, 13447, $vararg_buffer3); //@line 9422
 HEAP8[$0 + 1936 >> 0] = 1; //@line 9424
 HEAP32[$11 >> 2] = $12; //@line 9425
 HEAP32[$13 >> 2] = $14; //@line 9426
 HEAP32[$0 + 1944 >> 2] = $6; //@line 9428
 HEAP32[$0 + 1948 >> 2] = $8; //@line 9430
 HEAP32[$0 + 1952 >> 2] = $10; //@line 9432
 HEAP32[$2 >> 2] = 3; //@line 9433
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 9434
 $19 = __ZN12LoRaWANStack18lora_state_machineEv($0) | 0; //@line 9435
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 272; //@line 9438
  sp = STACKTOP; //@line 9439
  STACKTOP = sp; //@line 9440
  return 0; //@line 9440
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 9442
 $$0 = $19; //@line 9443
 STACKTOP = sp; //@line 9444
 return $$0 | 0; //@line 9444
}
function __ZN7LoRaPHY19request_new_channelEP24new_channel_req_params_s($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$011 = 0, $10 = 0, $12 = 0, $13 = 0, $16 = 0, $18 = 0, $19 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 22079
 L1 : do {
  if (!(HEAP8[$0 + 16 >> 0] | 0)) {
   $$011 = 0; //@line 22085
  } else {
   $5 = HEAP32[$1 >> 2] | 0; //@line 22087
   if (!(HEAP32[$5 >> 2] | 0)) {
    $10 = HEAP32[(HEAP32[$0 >> 2] | 0) + 64 >> 2] | 0; //@line 22093
    $12 = HEAP8[$1 + 4 >> 0] | 0; //@line 22095
    $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 22096
    $13 = FUNCTION_TABLE_iii[$10 & 31]($0, $12) | 0; //@line 22097
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 527; //@line 22100
     sp = STACKTOP; //@line 22101
     return 0; //@line 22102
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 22104
     return ($13 ? 3 : 0) | 0; //@line 22106
    }
   }
   $16 = HEAP32[(HEAP32[$0 >> 2] | 0) + 60 >> 2] | 0; //@line 22111
   $18 = HEAP8[$1 + 4 >> 0] | 0; //@line 22113
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 22114
   $19 = FUNCTION_TABLE_iiii[$16 & 15]($0, $5, $18) | 0; //@line 22115
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 528; //@line 22118
    sp = STACKTOP; //@line 22119
    return 0; //@line 22120
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 22122
   switch ($19 | 0) {
   case 0:
    {
     $$011 = 3; //@line 22125
     break L1;
     break;
    }
   case -1004:
    {
     $$011 = 2; //@line 22130
     break L1;
     break;
    }
   case -1005:
    {
     $$011 = 1; //@line 22135
     break L1;
     break;
    }
   case -1006:
    {
     $$011 = 0; //@line 22140
     break L1;
     break;
    }
   default:
    {
     $$011 = 0; //@line 22145
     break L1;
    }
   }
  }
 } while (0);
 return $$011 | 0; //@line 22151
}
function _mbedtls_cipher_cmac_starts($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $13 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3156
 if (!$0) {
  $$0 = -24832; //@line 3159
  return $$0 | 0; //@line 3160
 }
 if (($1 | 0) == 0 | (HEAP32[$0 >> 2] | 0) == 0) {
  $$0 = -24832; //@line 3167
  return $$0 | 0; //@line 3168
 }
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 3170
 $7 = _mbedtls_cipher_setkey($0, $1, $2, 1) | 0; //@line 3171
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 598; //@line 3174
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 3176
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 3178
  sp = STACKTOP; //@line 3179
  return 0; //@line 3180
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 3182
 if ($7 | 0) {
  $$0 = $7; //@line 3185
  return $$0 | 0; //@line 3186
 }
 switch (HEAP32[HEAP32[$0 >> 2] >> 2] | 0) {
 case 36:
 case 4:
 case 3:
 case 2:
  {
   break;
  }
 default:
  {
   $$0 = -24832; //@line 3195
   return $$0 | 0; //@line 3196
  }
 }
 $13 = _calloc(1, 36) | 0; //@line 3199
 if (!$13) {
  $$0 = -24960; //@line 3202
  return $$0 | 0; //@line 3203
 }
 HEAP32[$0 + 64 >> 2] = $13; //@line 3206
 HEAP8[$13 >> 0] = 0; //@line 3208
 HEAP8[$13 + 1 >> 0] = 0; //@line 3210
 HEAP8[$13 + 2 >> 0] = 0; //@line 3212
 HEAP8[$13 + 3 >> 0] = 0; //@line 3214
 HEAP8[$13 + 4 >> 0] = 0; //@line 3216
 HEAP8[$13 + 5 >> 0] = 0; //@line 3218
 HEAP8[$13 + 6 >> 0] = 0; //@line 3220
 HEAP8[$13 + 7 >> 0] = 0; //@line 3222
 HEAP8[$13 + 8 >> 0] = 0; //@line 3224
 HEAP8[$13 + 9 >> 0] = 0; //@line 3226
 HEAP8[$13 + 10 >> 0] = 0; //@line 3228
 HEAP8[$13 + 11 >> 0] = 0; //@line 3230
 HEAP8[$13 + 12 >> 0] = 0; //@line 3232
 HEAP8[$13 + 13 >> 0] = 0; //@line 3234
 HEAP8[$13 + 14 >> 0] = 0; //@line 3236
 HEAP8[$13 + 15 >> 0] = 0; //@line 3237
 $$0 = 0; //@line 3238
 return $$0 | 0; //@line 3239
}
function __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_384($0) {
 $0 = $0 | 0;
 var $$phi$trans$insert = 0, $$pre10 = 0, $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 28000
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28004
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28006
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28008
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28010
 $$phi$trans$insert = (HEAP32[$0 + 4 >> 2] | 0) + 12 | 0; //@line 28011
 $$pre10 = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 28012
 if (!$$pre10) {
  HEAP32[$4 >> 2] = 0; //@line 28015
  _gpio_irq_set($10 + 28 | 0, 2, 0); //@line 28017
  return;
 }
 $13 = HEAP32[$$pre10 + 4 >> 2] | 0; //@line 28021
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 28022
 FUNCTION_TABLE_vii[$13 & 31]($6, $8); //@line 28023
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 112; //@line 28026
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 28027
  HEAP32[$14 >> 2] = $$phi$trans$insert; //@line 28028
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 28029
  HEAP32[$15 >> 2] = $4; //@line 28030
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 28031
  HEAP32[$16 >> 2] = $8; //@line 28032
  $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 28033
  HEAP32[$17 >> 2] = $10; //@line 28034
  sp = STACKTOP; //@line 28035
  return;
 }
 ___async_unwind = 0; //@line 28038
 HEAP32[$ReallocAsyncCtx4 >> 2] = 112; //@line 28039
 $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 28040
 HEAP32[$14 >> 2] = $$phi$trans$insert; //@line 28041
 $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 28042
 HEAP32[$15 >> 2] = $4; //@line 28043
 $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 28044
 HEAP32[$16 >> 2] = $8; //@line 28045
 $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 28046
 HEAP32[$17 >> 2] = $10; //@line 28047
 sp = STACKTOP; //@line 28048
 return;
}
function _mbedtls_ccm_setkey($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $13 = 0, $18 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 1924
 $4 = _mbedtls_cipher_info_from_values($1, $3, 1) | 0; //@line 1925
 if (!$4) {
  $$0 = -13; //@line 1928
  return $$0 | 0; //@line 1929
 }
 if ((HEAP32[$4 + 24 >> 2] | 0) != 16) {
  $$0 = -13; //@line 1935
  return $$0 | 0; //@line 1936
 }
 $AsyncCtx7 = _emscripten_alloc_async_context(20, sp) | 0; //@line 1938
 _mbedtls_cipher_free($0); //@line 1939
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 582; //@line 1942
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 1944
  HEAP32[$AsyncCtx7 + 8 >> 2] = $4; //@line 1946
  HEAP32[$AsyncCtx7 + 12 >> 2] = $2; //@line 1948
  HEAP32[$AsyncCtx7 + 16 >> 2] = $3; //@line 1950
  sp = STACKTOP; //@line 1951
  return 0; //@line 1952
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 1954
 $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 1955
 $13 = _mbedtls_cipher_setup($0, $4) | 0; //@line 1956
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 583; //@line 1959
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 1961
  HEAP32[$AsyncCtx3 + 8 >> 2] = $2; //@line 1963
  HEAP32[$AsyncCtx3 + 12 >> 2] = $3; //@line 1965
  sp = STACKTOP; //@line 1966
  return 0; //@line 1967
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 1969
 if ($13 | 0) {
  $$0 = $13; //@line 1972
  return $$0 | 0; //@line 1973
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 1975
 $18 = _mbedtls_cipher_setkey($0, $2, $3, 1) | 0; //@line 1976
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 584; //@line 1979
  sp = STACKTOP; //@line 1980
  return 0; //@line 1981
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 1983
 $$0 = $18; //@line 1984
 return $$0 | 0; //@line 1985
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_62($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $16 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 21213
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21217
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21219
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21221
 if (!(HEAP32[$0 + 4 >> 2] | 0)) {
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 21224
  _mbed_assert_internal(13612, 12396, 902); //@line 21225
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 180; //@line 21228
   $10 = $ReallocAsyncCtx8 + 4 | 0; //@line 21229
   HEAP32[$10 >> 2] = $4; //@line 21230
   $11 = $ReallocAsyncCtx8 + 8 | 0; //@line 21231
   HEAP32[$11 >> 2] = $6; //@line 21232
   $12 = $ReallocAsyncCtx8 + 12 | 0; //@line 21233
   HEAP32[$12 >> 2] = $8; //@line 21234
   sp = STACKTOP; //@line 21235
   return;
  }
  ___async_unwind = 0; //@line 21238
  HEAP32[$ReallocAsyncCtx8 >> 2] = 180; //@line 21239
  $10 = $ReallocAsyncCtx8 + 4 | 0; //@line 21240
  HEAP32[$10 >> 2] = $4; //@line 21241
  $11 = $ReallocAsyncCtx8 + 8 | 0; //@line 21242
  HEAP32[$11 >> 2] = $6; //@line 21243
  $12 = $ReallocAsyncCtx8 + 12 | 0; //@line 21244
  HEAP32[$12 >> 2] = $8; //@line 21245
  sp = STACKTOP; //@line 21246
  return;
 }
 if (!(HEAP8[$4 + 11 >> 0] | 0)) {
  return;
 }
 $16 = HEAP8[$6 >> 0] | 0; //@line 21255
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 21256
 __ZN12LoRaWANStack9handle_txEhPKhth($8, $16, 0, 0, 2) | 0; //@line 21257
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 181; //@line 21260
  sp = STACKTOP; //@line 21261
  return;
 }
 ___async_unwind = 0; //@line 21264
 HEAP32[$ReallocAsyncCtx5 >> 2] = 181; //@line 21265
 sp = STACKTOP; //@line 21266
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_155($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $25 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 28258
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28262
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28264
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28266
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28268
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28270
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28272
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28274
 $18 = HEAP8[$0 + 36 >> 0] & 1; //@line 28277
 $25 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 28278
 do {
  if ($25 >>> 0 < $4 >>> 0) {
   if (!(HEAP8[$6 >> 0] | 0)) {
    if ((HEAP32[$8 >> 2] | 0) == 1) {
     if ((HEAP32[$10 >> 2] | 0) == 1) {
      break;
     }
    }
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 28294
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($25, $12, $14, $16, $18); //@line 28295
    if (!___async) {
     ___async_unwind = 0; //@line 28298
    }
    HEAP32[$ReallocAsyncCtx2 >> 2] = 722; //@line 28300
    HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $25; //@line 28302
    HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 28304
    HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 28306
    HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 28308
    HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 28310
    HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 28312
    HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $14; //@line 28314
    HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $16; //@line 28316
    HEAP8[$ReallocAsyncCtx2 + 36 >> 0] = $18 & 1; //@line 28319
    sp = STACKTOP; //@line 28320
    return;
   }
  }
 } while (0);
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_333($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 15724
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15726
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15730
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15732
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15734
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 15736
 $13 = HEAP32[$2 >> 2] | 0; //@line 15737
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 52 >> 2] | 0; //@line 15740
 $18 = HEAP16[HEAP32[$0 + 8 >> 2] >> 1] & 255; //@line 15742
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 15743
 $19 = FUNCTION_TABLE_iiii[$16 & 15]($13, $6, $18) | 0; //@line 15744
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 545; //@line 15747
  $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 15748
  HEAP32[$20 >> 2] = $8; //@line 15749
  $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 15750
  HEAP32[$21 >> 2] = $2; //@line 15751
  $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 15752
  HEAP32[$22 >> 2] = $10; //@line 15753
  $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 15754
  HEAP32[$23 >> 2] = $12; //@line 15755
  sp = STACKTOP; //@line 15756
  return;
 }
 HEAP32[___async_retval >> 2] = $19; //@line 15760
 ___async_unwind = 0; //@line 15761
 HEAP32[$ReallocAsyncCtx6 >> 2] = 545; //@line 15762
 $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 15763
 HEAP32[$20 >> 2] = $8; //@line 15764
 $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 15765
 HEAP32[$21 >> 2] = $2; //@line 15766
 $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 15767
 HEAP32[$22 >> 2] = $10; //@line 15768
 $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 15769
 HEAP32[$23 >> 2] = $12; //@line 15770
 sp = STACKTOP; //@line 15771
 return;
}
function __ZL18lora_event_handler11lora_events__async_cb_326($0) {
 $0 = $0 | 0;
 var $$07$i = 0, $12 = 0, $15 = 0, $16 = 0, $19 = 0, $2 = 0, $21 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 15362
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15364
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15366
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15370
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 15374
 dest = $2; //@line 15377
 stop = dest + 50 | 0; //@line 15377
 do {
  HEAP8[dest >> 0] = 0; //@line 15377
  dest = dest + 1 | 0; //@line 15377
 } while ((dest | 0) < (stop | 0));
 $15 = __ZN16LoRaWANInterface7receiveEhPhti(23828, 15, $2, 50, 3) | 0; //@line 15378
 $16 = $15 << 16 >> 16; //@line 15379
 if ($15 << 16 >> 16 < 0) {
  HEAP32[$4 >> 2] = $16; //@line 15382
  _printf(16298, $4) | 0; //@line 15383
  return;
 }
 HEAP32[$8 >> 2] = 15; //@line 15386
 HEAP32[$8 + 4 >> 2] = $16; //@line 15388
 _printf(16325, $8) | 0; //@line 15389
 if ($15 << 16 >> 16) {
  $$07$i = 0; //@line 15392
  $21 = 0; //@line 15392
  do {
   HEAP32[$12 >> 2] = HEAPU8[$2 + $21 >> 0]; //@line 15397
   _printf(16364, $12) | 0; //@line 15398
   $$07$i = $$07$i + 1 << 24 >> 24; //@line 15399
   $21 = $$07$i & 255; //@line 15400
  } while (($21 | 0) < ($16 | 0));
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 15409
 _putchar(10) | 0; //@line 15410
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 681; //@line 15413
  $19 = $ReallocAsyncCtx + 4 | 0; //@line 15414
  HEAP32[$19 >> 2] = $2; //@line 15415
  sp = STACKTOP; //@line 15416
  return;
 }
 ___async_unwind = 0; //@line 15419
 HEAP32[$ReallocAsyncCtx >> 2] = 681; //@line 15420
 $19 = $ReallocAsyncCtx + 4 | 0; //@line 15421
 HEAP32[$19 >> 2] = $2; //@line 15422
 sp = STACKTOP; //@line 15423
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_45($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $5 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 20367
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20369
 $3 = $2 + 1176 | 0; //@line 20370
 HEAP32[$3 >> 2] = 10172; //@line 20371
 __ZN4mbed6Ticker6detachEv($3); //@line 20372
 $5 = HEAP32[$2 + 1228 >> 2] | 0; //@line 20374
 if (!$5) {
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(8) | 0; //@line 20377
  __ZN4mbed10TimerEventD2Ev($3); //@line 20378
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 74; //@line 20381
   $12 = $ReallocAsyncCtx7 + 4 | 0; //@line 20382
   HEAP32[$12 >> 2] = $2; //@line 20383
   sp = STACKTOP; //@line 20384
   return;
  }
  ___async_unwind = 0; //@line 20387
  HEAP32[$ReallocAsyncCtx7 >> 2] = 74; //@line 20388
  $12 = $ReallocAsyncCtx7 + 4 | 0; //@line 20389
  HEAP32[$12 >> 2] = $2; //@line 20390
  sp = STACKTOP; //@line 20391
  return;
 } else {
  $9 = HEAP32[$5 + 8 >> 2] | 0; //@line 20396
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 20397
  FUNCTION_TABLE_vi[$9 & 1023]($2 + 1216 | 0); //@line 20398
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 73; //@line 20401
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 20402
   HEAP32[$10 >> 2] = $2; //@line 20403
   $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 20404
   HEAP32[$11 >> 2] = $3; //@line 20405
   sp = STACKTOP; //@line 20406
   return;
  }
  ___async_unwind = 0; //@line 20409
  HEAP32[$ReallocAsyncCtx2 >> 2] = 73; //@line 20410
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 20411
  HEAP32[$10 >> 2] = $2; //@line 20412
  $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 20413
  HEAP32[$11 >> 2] = $3; //@line 20414
  sp = STACKTOP; //@line 20415
  return;
 }
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_44($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $5 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 20312
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20314
 $3 = $2 + 1112 | 0; //@line 20315
 HEAP32[$3 >> 2] = 10172; //@line 20316
 __ZN4mbed6Ticker6detachEv($3); //@line 20317
 $5 = HEAP32[$2 + 1164 >> 2] | 0; //@line 20319
 if (!$5) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 20322
  __ZN4mbed10TimerEventD2Ev($3); //@line 20323
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 76; //@line 20326
   $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 20327
   HEAP32[$12 >> 2] = $2; //@line 20328
   sp = STACKTOP; //@line 20329
   return;
  }
  ___async_unwind = 0; //@line 20332
  HEAP32[$ReallocAsyncCtx6 >> 2] = 76; //@line 20333
  $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 20334
  HEAP32[$12 >> 2] = $2; //@line 20335
  sp = STACKTOP; //@line 20336
  return;
 } else {
  $9 = HEAP32[$5 + 8 >> 2] | 0; //@line 20341
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 20342
  FUNCTION_TABLE_vi[$9 & 1023]($2 + 1152 | 0); //@line 20343
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 75; //@line 20346
   $10 = $ReallocAsyncCtx3 + 4 | 0; //@line 20347
   HEAP32[$10 >> 2] = $2; //@line 20348
   $11 = $ReallocAsyncCtx3 + 8 | 0; //@line 20349
   HEAP32[$11 >> 2] = $3; //@line 20350
   sp = STACKTOP; //@line 20351
   return;
  }
  ___async_unwind = 0; //@line 20354
  HEAP32[$ReallocAsyncCtx3 >> 2] = 75; //@line 20355
  $10 = $ReallocAsyncCtx3 + 4 | 0; //@line 20356
  HEAP32[$10 >> 2] = $2; //@line 20357
  $11 = $ReallocAsyncCtx3 + 8 | 0; //@line 20358
  HEAP32[$11 >> 2] = $3; //@line 20359
  sp = STACKTOP; //@line 20360
  return;
 }
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_43($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $5 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 20257
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20259
 $3 = $2 + 1048 | 0; //@line 20260
 HEAP32[$3 >> 2] = 10172; //@line 20261
 __ZN4mbed6Ticker6detachEv($3); //@line 20262
 $5 = HEAP32[$2 + 1100 >> 2] | 0; //@line 20264
 if (!$5) {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 20267
  __ZN4mbed10TimerEventD2Ev($3); //@line 20268
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 78; //@line 20271
   $12 = $ReallocAsyncCtx5 + 4 | 0; //@line 20272
   HEAP32[$12 >> 2] = $2; //@line 20273
   sp = STACKTOP; //@line 20274
   return;
  }
  ___async_unwind = 0; //@line 20277
  HEAP32[$ReallocAsyncCtx5 >> 2] = 78; //@line 20278
  $12 = $ReallocAsyncCtx5 + 4 | 0; //@line 20279
  HEAP32[$12 >> 2] = $2; //@line 20280
  sp = STACKTOP; //@line 20281
  return;
 } else {
  $9 = HEAP32[$5 + 8 >> 2] | 0; //@line 20286
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 20287
  FUNCTION_TABLE_vi[$9 & 1023]($2 + 1088 | 0); //@line 20288
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 77; //@line 20291
   $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 20292
   HEAP32[$10 >> 2] = $3; //@line 20293
   $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 20294
   HEAP32[$11 >> 2] = $2; //@line 20295
   sp = STACKTOP; //@line 20296
   return;
  }
  ___async_unwind = 0; //@line 20299
  HEAP32[$ReallocAsyncCtx4 >> 2] = 77; //@line 20300
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 20301
  HEAP32[$10 >> 2] = $3; //@line 20302
  $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 20303
  HEAP32[$11 >> 2] = $2; //@line 20304
  sp = STACKTOP; //@line 20305
  return;
 }
}
function __ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb($0) {
 $0 = $0 | 0;
 var $14 = 0, $18 = 0, $2 = 0, $22 = 0, $24 = 0, $33 = 0, $4 = 0, $7 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 17821
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17823
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17825
 $7 = (HEAP8[$2 + 373 >> 0] | 0) != 0; //@line 17831
 if (HEAP32[$2 + 364 >> 2] | 0) {
  if ($7) {
   HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($2 + 288 | 0) | 0) + 4 >> 2] = 4; //@line 17837
  }
  HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) + 4 >> 2] = 4; //@line 17842
  if ((HEAP32[$4 >> 2] | 0) == 2) {
   return;
  }
  $33 = $2 + 944 | 0; //@line 17848
  HEAP8[$33 >> 0] = HEAP8[$33 >> 0] | 32; //@line 17851
  return;
 }
 if ($7) {
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($2 + 288 | 0) | 0) + 4 >> 2] = 3; //@line 17858
 }
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) + 4 >> 2] = 3; //@line 17863
 $14 = $2 + 356 | 0; //@line 17864
 $18 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$14 >> 2] | 0, HEAP32[$2 + 980 >> 2] | 0) | 0; //@line 17868
 if ($18 >>> 0 < (HEAP32[$2 + 976 >> 2] | 0) >>> 0) {
  return;
 }
 $22 = HEAP32[$14 >> 2] | 0; //@line 17875
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 17877
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($22, $2 + 1056 | 0); //@line 17878
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 380; //@line 17881
  $24 = $ReallocAsyncCtx3 + 4 | 0; //@line 17882
  HEAP32[$24 >> 2] = $2; //@line 17883
  sp = STACKTOP; //@line 17884
  return;
 }
 ___async_unwind = 0; //@line 17887
 HEAP32[$ReallocAsyncCtx3 >> 2] = 380; //@line 17888
 $24 = $ReallocAsyncCtx3 + 4 | 0; //@line 17889
 HEAP32[$24 >> 2] = $2; //@line 17890
 sp = STACKTOP; //@line 17891
 return;
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $39 = 0, $4 = 0, $6 = 0, $8 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11463
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11465
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11467
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11469
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11471
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 11473
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 11475
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 11477
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 11479
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 11481
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 11483
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 11485
 $25 = $4 + 1280 | 0; //@line 11486
 HEAP32[$25 >> 2] = 0; //@line 11487
 HEAP32[$25 + 4 >> 2] = 0; //@line 11487
 HEAP32[$25 + 8 >> 2] = 0; //@line 11487
 HEAP32[$25 + 12 >> 2] = 0; //@line 11487
 HEAP8[$4 + 1296 >> 0] = 1; //@line 11489
 HEAP32[$2 >> 2] = 684; //@line 11490
 HEAP32[$4 + 668 >> 2] = $6; //@line 11492
 HEAP32[$4 + 672 >> 2] = $8; //@line 11494
 HEAP32[$4 + 652 >> 2] = $10; //@line 11496
 HEAP32[$4 + 656 >> 2] = $12; //@line 11498
 HEAP32[$4 + 664 >> 2] = $14; //@line 11500
 HEAP32[$4 + 660 >> 2] = $16; //@line 11502
 HEAP32[$4 + 676 >> 2] = $18; //@line 11504
 HEAP32[$4 + 680 >> 2] = $20; //@line 11506
 HEAP32[$4 + 684 >> 2] = $22; //@line 11508
 HEAP32[$4 + 788 >> 2] = 0; //@line 11510
 if (($18 | 0) == -1) {
  $39 = _emscripten_asm_const_ii(7, $4 | 0) | 0; //@line 11513
  return;
 }
 _emscripten_asm_const_iii(5, HEAP32[$24 >> 2] | 0, 1) | 0; //@line 11517
 $39 = _emscripten_asm_const_ii(7, $4 | 0) | 0; //@line 11518
 return;
}
function ___overflow($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $13 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $9 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11359
 STACKTOP = STACKTOP + 16 | 0; //@line 11360
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 11360
 $2 = sp; //@line 11361
 $3 = $1 & 255; //@line 11362
 HEAP8[$2 >> 0] = $3; //@line 11363
 $4 = $0 + 16 | 0; //@line 11364
 $5 = HEAP32[$4 >> 2] | 0; //@line 11365
 if (!$5) {
  if (!(___towrite($0) | 0)) {
   $12 = HEAP32[$4 >> 2] | 0; //@line 11372
   label = 4; //@line 11373
  } else {
   $$0 = -1; //@line 11375
  }
 } else {
  $12 = $5; //@line 11378
  label = 4; //@line 11379
 }
 do {
  if ((label | 0) == 4) {
   $9 = $0 + 20 | 0; //@line 11383
   $10 = HEAP32[$9 >> 2] | 0; //@line 11384
   if ($10 >>> 0 < $12 >>> 0) {
    $13 = $1 & 255; //@line 11387
    if (($13 | 0) != (HEAP8[$0 + 75 >> 0] | 0)) {
     HEAP32[$9 >> 2] = $10 + 1; //@line 11394
     HEAP8[$10 >> 0] = $3; //@line 11395
     $$0 = $13; //@line 11396
     break;
    }
   }
   $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 11401
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 11402
   $21 = FUNCTION_TABLE_iiii[$20 & 15]($0, $2, 1) | 0; //@line 11403
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 686; //@line 11406
    HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 11408
    sp = STACKTOP; //@line 11409
    STACKTOP = sp; //@line 11410
    return 0; //@line 11410
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 11412
   if (($21 | 0) == 1) {
    $$0 = HEAPU8[$2 >> 0] | 0; //@line 11417
   } else {
    $$0 = -1; //@line 11419
   }
  }
 } while (0);
 STACKTOP = sp; //@line 11423
 return $$0 | 0; //@line 11423
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_84($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 23003
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23005
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23011
 if ((HEAP32[___async_retval >> 2] | 0) != -1018) {
  _mbed_tracef(2, 12356, 12546, HEAP32[$0 + 8 >> 2] | 0); //@line 23016
 }
 $11 = $2 + 1892 | 0; //@line 23018
 $12 = HEAP32[$11 >> 2] | 0; //@line 23019
 if (!$12) {
  return;
 }
 $16 = HEAP32[$2 + 2288 >> 2] | 0; //@line 23026
 $18 = HEAP32[$12 + 4 >> 2] | 0; //@line 23028
 $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 23029
 FUNCTION_TABLE_vii[$18 & 31]($8, $2 + 1880 | 0); //@line 23030
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 185; //@line 23033
  $19 = $ReallocAsyncCtx + 4 | 0; //@line 23034
  HEAP32[$19 >> 2] = $11; //@line 23035
  $20 = $ReallocAsyncCtx + 8 | 0; //@line 23036
  HEAP32[$20 >> 2] = $8; //@line 23037
  $21 = $ReallocAsyncCtx + 12 | 0; //@line 23038
  HEAP32[$21 >> 2] = $16; //@line 23039
  $22 = $ReallocAsyncCtx + 16 | 0; //@line 23040
  HEAP32[$22 >> 2] = $8; //@line 23041
  sp = STACKTOP; //@line 23042
  return;
 }
 ___async_unwind = 0; //@line 23045
 HEAP32[$ReallocAsyncCtx >> 2] = 185; //@line 23046
 $19 = $ReallocAsyncCtx + 4 | 0; //@line 23047
 HEAP32[$19 >> 2] = $11; //@line 23048
 $20 = $ReallocAsyncCtx + 8 | 0; //@line 23049
 HEAP32[$20 >> 2] = $8; //@line 23050
 $21 = $ReallocAsyncCtx + 12 | 0; //@line 23051
 HEAP32[$21 >> 2] = $16; //@line 23052
 $22 = $ReallocAsyncCtx + 16 | 0; //@line 23053
 HEAP32[$22 >> 2] = $8; //@line 23054
 sp = STACKTOP; //@line 23055
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_160($0) {
 $0 = $0 | 0;
 var $10 = 0, $18 = 0, $2 = 0, $24 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 28784
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28786
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28790
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28792
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28794
 HEAP8[$2 + 376 >> 0] = (HEAP32[$0 + 8 >> 2] | 0) == 0 & (HEAP8[$2 + 944 >> 0] & 8) != 0 & 1; //@line 28803
 $18 = HEAP8[$2 + 378 >> 0] | 0; //@line 28805
 HEAP8[$2 + 379 >> 0] = $18; //@line 28807
 HEAP8[$6 >> 0] = $18; //@line 28808
 HEAP8[$8 + 1 >> 0] = HEAP8[$2 + 372 >> 0] | 0; //@line 28812
 HEAP32[$8 + 4 >> 2] = $10; //@line 28814
 $24 = HEAP32[$2 >> 2] | 0; //@line 28815
 $27 = HEAP32[(HEAP32[$24 >> 2] | 0) + 12 >> 2] | 0; //@line 28818
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 28819
 FUNCTION_TABLE_vii[$27 & 31]($24, $8); //@line 28820
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 299; //@line 28823
  $28 = $ReallocAsyncCtx + 4 | 0; //@line 28824
  HEAP32[$28 >> 2] = $2; //@line 28825
  $29 = $ReallocAsyncCtx + 8 | 0; //@line 28826
  HEAP32[$29 >> 2] = $10; //@line 28827
  $30 = $ReallocAsyncCtx + 12 | 0; //@line 28828
  HEAP32[$30 >> 2] = $6; //@line 28829
  sp = STACKTOP; //@line 28830
  return;
 }
 ___async_unwind = 0; //@line 28833
 HEAP32[$ReallocAsyncCtx >> 2] = 299; //@line 28834
 $28 = $ReallocAsyncCtx + 4 | 0; //@line 28835
 HEAP32[$28 >> 2] = $2; //@line 28836
 $29 = $ReallocAsyncCtx + 8 | 0; //@line 28837
 HEAP32[$29 >> 2] = $10; //@line 28838
 $30 = $ReallocAsyncCtx + 12 | 0; //@line 28839
 HEAP32[$30 >> 2] = $6; //@line 28840
 sp = STACKTOP; //@line 28841
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_394($0) {
 $0 = $0 | 0;
 var $$0$off0 = 0, $$0$off0$expand_i1_val = 0, $10 = 0, $12 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 28585
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28593
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28595
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28597
 if ((HEAP32[___async_retval >> 2] | 0) < (HEAP32[$0 + 4 >> 2] | 0)) {
  _mbed_tracef(16, 10968, 11134, HEAP32[$0 + 8 >> 2] | 0); //@line 28602
  $$0$off0 = 0; //@line 28603
 } else {
  $$0$off0 = 1; //@line 28605
 }
 $17 = HEAP32[(HEAP32[$8 >> 2] | 0) + 8 >> 2] | 0; //@line 28609
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 28610
 FUNCTION_TABLE_vi[$17 & 1023]($8); //@line 28611
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 68; //@line 28614
  $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 28615
  HEAP32[$18 >> 2] = $10; //@line 28616
  $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 28617
  HEAP32[$19 >> 2] = $12; //@line 28618
  $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 28619
  $$0$off0$expand_i1_val = $$0$off0 & 1; //@line 28620
  HEAP8[$20 >> 0] = $$0$off0$expand_i1_val; //@line 28621
  sp = STACKTOP; //@line 28622
  return;
 }
 ___async_unwind = 0; //@line 28625
 HEAP32[$ReallocAsyncCtx2 >> 2] = 68; //@line 28626
 $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 28627
 HEAP32[$18 >> 2] = $10; //@line 28628
 $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 28629
 HEAP32[$19 >> 2] = $12; //@line 28630
 $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 28631
 $$0$off0$expand_i1_val = $$0$off0 & 1; //@line 28632
 HEAP8[$20 >> 0] = $$0$off0$expand_i1_val; //@line 28633
 sp = STACKTOP; //@line 28634
 return;
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_257($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $9 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 8905
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8907
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8909
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8911
 $7 = HEAP32[$2 >> 2] | 0; //@line 8912
 $9 = $6 + 12 | 0; //@line 8914
 HEAP32[$6 >> 2] = 455; //@line 8915
 HEAP32[$6 + 4 >> 2] = 0; //@line 8917
 HEAP32[$6 + 8 >> 2] = $4; //@line 8919
 HEAP32[$9 >> 2] = 912; //@line 8920
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 8921
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($7, $4 + 1076 | 0, $6); //@line 8922
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 456; //@line 8925
  $10 = $ReallocAsyncCtx6 + 4 | 0; //@line 8926
  HEAP32[$10 >> 2] = $9; //@line 8927
  $11 = $ReallocAsyncCtx6 + 8 | 0; //@line 8928
  HEAP32[$11 >> 2] = $2; //@line 8929
  $12 = $ReallocAsyncCtx6 + 12 | 0; //@line 8930
  HEAP32[$12 >> 2] = $4; //@line 8931
  $13 = $ReallocAsyncCtx6 + 16 | 0; //@line 8932
  HEAP32[$13 >> 2] = $6; //@line 8933
  sp = STACKTOP; //@line 8934
  return;
 }
 ___async_unwind = 0; //@line 8937
 HEAP32[$ReallocAsyncCtx6 >> 2] = 456; //@line 8938
 $10 = $ReallocAsyncCtx6 + 4 | 0; //@line 8939
 HEAP32[$10 >> 2] = $9; //@line 8940
 $11 = $ReallocAsyncCtx6 + 8 | 0; //@line 8941
 HEAP32[$11 >> 2] = $2; //@line 8942
 $12 = $ReallocAsyncCtx6 + 12 | 0; //@line 8943
 HEAP32[$12 >> 2] = $4; //@line 8944
 $13 = $ReallocAsyncCtx6 + 16 | 0; //@line 8945
 HEAP32[$13 >> 2] = $6; //@line 8946
 sp = STACKTOP; //@line 8947
 return;
}
function __ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_1($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $2 = 0, $24 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 17898
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17900
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17902
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17904
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 17909
  _mbed_assert_internal(13612, 13621, 215); //@line 17910
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 378; //@line 17913
   $9 = $ReallocAsyncCtx4 + 4 | 0; //@line 17914
   HEAP32[$9 >> 2] = $2; //@line 17915
   $10 = $ReallocAsyncCtx4 + 8 | 0; //@line 17916
   HEAP32[$10 >> 2] = $4; //@line 17917
   $11 = $ReallocAsyncCtx4 + 12 | 0; //@line 17918
   HEAP32[$11 >> 2] = $6; //@line 17919
   sp = STACKTOP; //@line 17920
   return;
  }
  ___async_unwind = 0; //@line 17923
  HEAP32[$ReallocAsyncCtx4 >> 2] = 378; //@line 17924
  $9 = $ReallocAsyncCtx4 + 4 | 0; //@line 17925
  HEAP32[$9 >> 2] = $2; //@line 17926
  $10 = $ReallocAsyncCtx4 + 8 | 0; //@line 17927
  HEAP32[$10 >> 2] = $4; //@line 17928
  $11 = $ReallocAsyncCtx4 + 12 | 0; //@line 17929
  HEAP32[$11 >> 2] = $6; //@line 17930
  sp = STACKTOP; //@line 17931
  return;
 }
 HEAP32[$4 + 364 >> 2] = 2; //@line 17935
 if (HEAP8[$4 + 373 >> 0] | 0) {
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0) + 4 >> 2] = 4; //@line 17943
 }
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0) + 4 >> 2] = 4; //@line 17948
 if ((HEAP32[$6 >> 2] | 0) == 2) {
  return;
 }
 $24 = $4 + 944 | 0; //@line 17954
 HEAP8[$24 >> 0] = HEAP8[$24 >> 0] | 32; //@line 17957
 return;
}
function __ZN7LoRaPHY13get_radio_rngEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $13 = 0, $16 = 0, $2 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 24644
 $1 = $0 + 4 | 0; //@line 24645
 $2 = HEAP32[$1 >> 2] | 0; //@line 24646
 $5 = HEAP32[(HEAP32[$2 >> 2] | 0) + 72 >> 2] | 0; //@line 24649
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 24650
 FUNCTION_TABLE_vi[$5 & 1023]($2); //@line 24651
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 566; //@line 24654
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 24656
  sp = STACKTOP; //@line 24657
  return 0; //@line 24658
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 24660
 $7 = HEAP32[$1 >> 2] | 0; //@line 24661
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 36 >> 2] | 0; //@line 24664
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 24665
 $11 = FUNCTION_TABLE_ii[$10 & 15]($7) | 0; //@line 24666
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 567; //@line 24669
  HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 24671
  sp = STACKTOP; //@line 24672
  return 0; //@line 24673
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 24675
 $13 = HEAP32[$1 >> 2] | 0; //@line 24676
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 76 >> 2] | 0; //@line 24679
 $AsyncCtx5 = _emscripten_alloc_async_context(8, sp) | 0; //@line 24680
 FUNCTION_TABLE_vi[$16 & 1023]($13); //@line 24681
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 568; //@line 24684
  HEAP32[$AsyncCtx5 + 4 >> 2] = $11; //@line 24686
  sp = STACKTOP; //@line 24687
  return 0; //@line 24688
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 24690
  return $11 | 0; //@line 24691
 }
 return 0; //@line 24693
}
function __ZN16LoRaWANInterfaceC2ER9LoRaRadio($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $17 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 5570
 HEAP32[$0 >> 2] = 788; //@line 5571
 HEAP8[$0 + 4 >> 0] = 0; //@line 5573
 $4 = __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1) | 0; //@line 5575
 $7 = HEAP32[(HEAP32[$1 >> 2] | 0) + 72 >> 2] | 0; //@line 5578
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 5579
 FUNCTION_TABLE_vi[$7 & 1023]($1); //@line 5580
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 153; //@line 5583
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 5585
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 5587
  HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 5589
  sp = STACKTOP; //@line 5590
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 5593
 $12 = HEAP32[HEAP32[$1 >> 2] >> 2] | 0; //@line 5595
 $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 5596
 FUNCTION_TABLE_vii[$12 & 31]($1, $4); //@line 5597
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 154; //@line 5600
  HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 5602
  HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 5604
  sp = STACKTOP; //@line 5605
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 5608
 $17 = HEAP32[(HEAP32[$1 >> 2] | 0) + 76 >> 2] | 0; //@line 5611
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5612
 FUNCTION_TABLE_vi[$17 & 1023]($1); //@line 5613
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 155; //@line 5616
  sp = STACKTOP; //@line 5617
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 5620
  return;
 }
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_105($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx16 = 0, sp = 0;
 sp = STACKTOP; //@line 23906
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23908
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23910
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23912
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23914
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23916
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23918
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23920
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 23922
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 23924
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 23926
 HEAP32[$12 >> 2] = 4; //@line 23927
 HEAP32[$20 >> 2] = HEAP32[$2 + 1944 >> 2]; //@line 23930
 $ReallocAsyncCtx16 = _emscripten_realloc_async_context(44) | 0; //@line 23931
 __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($16, $18) | 0; //@line 23932
 if (!___async) {
  ___async_unwind = 0; //@line 23935
 }
 HEAP32[$ReallocAsyncCtx16 >> 2] = 208; //@line 23937
 HEAP32[$ReallocAsyncCtx16 + 4 >> 2] = $2; //@line 23939
 HEAP32[$ReallocAsyncCtx16 + 8 >> 2] = $4; //@line 23941
 HEAP32[$ReallocAsyncCtx16 + 12 >> 2] = $6; //@line 23943
 HEAP32[$ReallocAsyncCtx16 + 16 >> 2] = $8; //@line 23945
 HEAP32[$ReallocAsyncCtx16 + 20 >> 2] = $10; //@line 23947
 HEAP32[$ReallocAsyncCtx16 + 24 >> 2] = $12; //@line 23949
 HEAP32[$ReallocAsyncCtx16 + 28 >> 2] = $14; //@line 23951
 HEAP32[$ReallocAsyncCtx16 + 32 >> 2] = $16; //@line 23953
 HEAP32[$ReallocAsyncCtx16 + 36 >> 2] = $18; //@line 23955
 HEAP32[$ReallocAsyncCtx16 + 40 >> 2] = $20; //@line 23957
 sp = STACKTOP; //@line 23958
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_104($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 23847
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23849
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23851
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23853
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23855
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23857
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23859
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23861
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 23863
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 23865
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 23867
 HEAP32[$12 >> 2] = 5; //@line 23868
 HEAP32[$20 >> 2] = HEAP32[$2 + 1948 >> 2]; //@line 23871
 $ReallocAsyncCtx15 = _emscripten_realloc_async_context(44) | 0; //@line 23872
 __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($16, $18) | 0; //@line 23873
 if (!___async) {
  ___async_unwind = 0; //@line 23876
 }
 HEAP32[$ReallocAsyncCtx15 >> 2] = 209; //@line 23878
 HEAP32[$ReallocAsyncCtx15 + 4 >> 2] = $2; //@line 23880
 HEAP32[$ReallocAsyncCtx15 + 8 >> 2] = $4; //@line 23882
 HEAP32[$ReallocAsyncCtx15 + 12 >> 2] = $6; //@line 23884
 HEAP32[$ReallocAsyncCtx15 + 16 >> 2] = $8; //@line 23886
 HEAP32[$ReallocAsyncCtx15 + 20 >> 2] = $10; //@line 23888
 HEAP32[$ReallocAsyncCtx15 + 24 >> 2] = $12; //@line 23890
 HEAP32[$ReallocAsyncCtx15 + 28 >> 2] = $14; //@line 23892
 HEAP32[$ReallocAsyncCtx15 + 32 >> 2] = $16; //@line 23894
 HEAP32[$ReallocAsyncCtx15 + 36 >> 2] = $18; //@line 23896
 HEAP32[$ReallocAsyncCtx15 + 40 >> 2] = $20; //@line 23898
 sp = STACKTOP; //@line 23899
 return;
}
function __ZN7LoRaPHY11handle_sendEPhh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $14 = 0, $16 = 0, $19 = 0, $3 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 24701
 $3 = $0 + 4 | 0; //@line 24702
 $4 = HEAP32[$3 >> 2] | 0; //@line 24703
 $7 = HEAP32[(HEAP32[$4 >> 2] | 0) + 72 >> 2] | 0; //@line 24706
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 24707
 FUNCTION_TABLE_vi[$7 & 1023]($4); //@line 24708
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 569; //@line 24711
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 24713
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 24715
  HEAP8[$AsyncCtx + 12 >> 0] = $2; //@line 24717
  sp = STACKTOP; //@line 24718
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 24721
 $11 = HEAP32[$3 >> 2] | 0; //@line 24722
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 24 >> 2] | 0; //@line 24725
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 24726
 FUNCTION_TABLE_viii[$14 & 7]($11, $1, $2); //@line 24727
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 570; //@line 24730
  HEAP32[$AsyncCtx2 + 4 >> 2] = $3; //@line 24732
  sp = STACKTOP; //@line 24733
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 24736
 $16 = HEAP32[$3 >> 2] | 0; //@line 24737
 $19 = HEAP32[(HEAP32[$16 >> 2] | 0) + 76 >> 2] | 0; //@line 24740
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 24741
 FUNCTION_TABLE_vi[$19 & 1023]($16); //@line 24742
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 571; //@line 24745
  sp = STACKTOP; //@line 24746
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 24749
  return;
 }
}
function _equeue_cancel__async_cb($0) {
 $0 = $0 | 0;
 var $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$sink$in$i$i = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9560
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9562
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9564
 $7 = $2 + 156 | 0; //@line 9565
 _equeue_mutex_lock($7); //@line 9566
 $8 = $2 + 24 | 0; //@line 9567
 $9 = HEAP32[$8 >> 2] | 0; //@line 9568
 L3 : do {
  if (!$9) {
   $$02329$i$i = $8; //@line 9572
   label = 9; //@line 9573
  } else {
   $11 = HEAP32[$6 >> 2] | 0; //@line 9575
   $$025$i$i = $8; //@line 9576
   $13 = $9; //@line 9576
   while (1) {
    $12 = HEAP32[$13 >> 2] | 0; //@line 9578
    if ($12 >>> 0 >= $11 >>> 0) {
     break;
    }
    $15 = $13 + 8 | 0; //@line 9583
    $16 = HEAP32[$15 >> 2] | 0; //@line 9584
    if (!$16) {
     $$02329$i$i = $15; //@line 9587
     label = 9; //@line 9588
     break L3;
    } else {
     $$025$i$i = $15; //@line 9591
     $13 = $16; //@line 9591
    }
   }
   if (($12 | 0) == ($11 | 0)) {
    HEAP32[$4 + -24 >> 2] = $13; //@line 9597
    $$02330$i$i = $$025$i$i; //@line 9600
    $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 9600
   } else {
    $$02329$i$i = $$025$i$i; //@line 9602
    label = 9; //@line 9603
   }
  }
 } while (0);
 if ((label | 0) == 9) {
  HEAP32[$4 + -24 >> 2] = 0; //@line 9609
  $$02330$i$i = $$02329$i$i; //@line 9610
  $$sink$in$i$i = $$02329$i$i; //@line 9610
 }
 HEAP32[$4 + -28 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 9614
 HEAP32[$$02330$i$i >> 2] = $6; //@line 9615
 _equeue_mutex_unlock($7); //@line 9616
 return;
}
function __ZN7LoRaMac17on_radio_rx_errorEv__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $16 = 0, $2 = 0, $20 = 0, $22 = 0, $29 = 0, $5 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 18313
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18315
 $5 = (HEAP8[$2 + 373 >> 0] | 0) != 0; //@line 18321
 if (HEAP32[$2 + 364 >> 2] | 0) {
  if ($5) {
   HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($2 + 288 | 0) | 0) + 4 >> 2] = 6; //@line 18327
  }
  HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) + 4 >> 2] = 6; //@line 18332
  $29 = $2 + 944 | 0; //@line 18333
  HEAP8[$29 >> 0] = HEAP8[$29 >> 0] | 32; //@line 18336
  return;
 }
 if ($5) {
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($2 + 288 | 0) | 0) + 4 >> 2] = 5; //@line 18343
 }
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) + 4 >> 2] = 5; //@line 18348
 $12 = $2 + 356 | 0; //@line 18349
 $16 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$12 >> 2] | 0, HEAP32[$2 + 980 >> 2] | 0) | 0; //@line 18353
 if ($16 >>> 0 < (HEAP32[$2 + 976 >> 2] | 0) >>> 0) {
  return;
 }
 $20 = HEAP32[$12 >> 2] | 0; //@line 18360
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 18362
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($20, $2 + 1056 | 0); //@line 18363
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 373; //@line 18366
  $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 18367
  HEAP32[$22 >> 2] = $2; //@line 18368
  sp = STACKTOP; //@line 18369
  return;
 }
 ___async_unwind = 0; //@line 18372
 HEAP32[$ReallocAsyncCtx3 >> 2] = 373; //@line 18373
 $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 18374
 HEAP32[$22 >> 2] = $2; //@line 18375
 sp = STACKTOP; //@line 18376
 return;
}
function _fflush__async_cb_290($0) {
 $0 = $0 | 0;
 var $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $13 = 0, $16 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 11098
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 11100
 $$02325 = HEAP32[(___ofl_lock() | 0) >> 2] | 0; //@line 11102
 L3 : do {
  if (!$$02325) {
   $$024$lcssa = $AsyncRetVal; //@line 11106
  } else {
   $$02327 = $$02325; //@line 11108
   $$02426 = $AsyncRetVal; //@line 11108
   while (1) {
    if ((HEAP32[$$02327 + 76 >> 2] | 0) > -1) {
     $16 = ___lockfile($$02327) | 0; //@line 11115
    } else {
     $16 = 0; //@line 11117
    }
    if ((HEAP32[$$02327 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327 + 28 >> 2] | 0) >>> 0) {
     break;
    }
    if ($16 | 0) {
     ___unlockfile($$02327); //@line 11129
    }
    $$023 = HEAP32[$$02327 + 56 >> 2] | 0; //@line 11132
    if (!$$023) {
     $$024$lcssa = $$02426; //@line 11135
     break L3;
    } else {
     $$02327 = $$023; //@line 11138
    }
   }
   $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 11141
   $13 = ___fflush_unlocked($$02327) | 0; //@line 11142
   if (!___async) {
    HEAP32[___async_retval >> 2] = $13; //@line 11146
    ___async_unwind = 0; //@line 11147
   }
   HEAP32[$ReallocAsyncCtx >> 2] = 690; //@line 11149
   HEAP32[$ReallocAsyncCtx + 4 >> 2] = $$02426; //@line 11151
   HEAP32[$ReallocAsyncCtx + 8 >> 2] = $16; //@line 11153
   HEAP32[$ReallocAsyncCtx + 12 >> 2] = $$02327; //@line 11155
   sp = STACKTOP; //@line 11156
   return;
  }
 } while (0);
 ___ofl_unlock(); //@line 11160
 HEAP32[___async_retval >> 2] = $$024$lcssa; //@line 11162
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $20 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 28291
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28293
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28295
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28297
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28299
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28301
 $12 = HEAP16[$0 + 24 >> 1] | 0; //@line 28303
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28305
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28307
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 28311
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 28313
 HEAP32[$16 >> 2] = 5; //@line 28316
 _mbed_tracef(16, 10968, 11025, $16); //@line 28317
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($20); //@line 28318
 HEAP32[$22 >> 2] = 5; //@line 28319
 _mbed_tracef(16, 10968, 11054, $22); //@line 28320
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(36) | 0; //@line 28321
 _wait_ms(1); //@line 28322
 if (!___async) {
  ___async_unwind = 0; //@line 28325
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 63; //@line 28327
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $6; //@line 28329
 HEAP16[$ReallocAsyncCtx7 + 8 >> 1] = $12; //@line 28331
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $14; //@line 28333
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $8; //@line 28335
 HEAP32[$ReallocAsyncCtx7 + 20 >> 2] = $10; //@line 28337
 HEAP32[$ReallocAsyncCtx7 + 24 >> 2] = $20; //@line 28339
 HEAP32[$ReallocAsyncCtx7 + 28 >> 2] = $2; //@line 28341
 HEAP32[$ReallocAsyncCtx7 + 32 >> 2] = $4; //@line 28343
 sp = STACKTOP; //@line 28344
 return;
}
function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
 end = ptr + num | 0; //@line 35223
 value = value & 255; //@line 35225
 if ((num | 0) >= 67) {
  while (ptr & 3) {
   HEAP8[ptr >> 0] = value; //@line 35228
   ptr = ptr + 1 | 0; //@line 35229
  }
  aligned_end = end & -4 | 0; //@line 35232
  block_aligned_end = aligned_end - 64 | 0; //@line 35233
  value4 = value | value << 8 | value << 16 | value << 24; //@line 35234
  while ((ptr | 0) <= (block_aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4; //@line 35237
   HEAP32[ptr + 4 >> 2] = value4; //@line 35238
   HEAP32[ptr + 8 >> 2] = value4; //@line 35239
   HEAP32[ptr + 12 >> 2] = value4; //@line 35240
   HEAP32[ptr + 16 >> 2] = value4; //@line 35241
   HEAP32[ptr + 20 >> 2] = value4; //@line 35242
   HEAP32[ptr + 24 >> 2] = value4; //@line 35243
   HEAP32[ptr + 28 >> 2] = value4; //@line 35244
   HEAP32[ptr + 32 >> 2] = value4; //@line 35245
   HEAP32[ptr + 36 >> 2] = value4; //@line 35246
   HEAP32[ptr + 40 >> 2] = value4; //@line 35247
   HEAP32[ptr + 44 >> 2] = value4; //@line 35248
   HEAP32[ptr + 48 >> 2] = value4; //@line 35249
   HEAP32[ptr + 52 >> 2] = value4; //@line 35250
   HEAP32[ptr + 56 >> 2] = value4; //@line 35251
   HEAP32[ptr + 60 >> 2] = value4; //@line 35252
   ptr = ptr + 64 | 0; //@line 35253
  }
  while ((ptr | 0) < (aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4; //@line 35257
   ptr = ptr + 4 | 0; //@line 35258
  }
 }
 while ((ptr | 0) < (end | 0)) {
  HEAP8[ptr >> 0] = value; //@line 35263
  ptr = ptr + 1 | 0; //@line 35264
 }
 return end - num | 0; //@line 35266
}
function __ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv($0) {
 $0 = $0 | 0;
 var $10 = 0, $18 = 0, $19 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 13073
 $2 = HEAP32[$0 + 16 >> 2] | 0; //@line 13075
 $4 = HEAP16[$0 + 20 >> 1] | 0; //@line 13077
 $6 = HEAP16[$0 + 22 >> 1] | 0; //@line 13079
 $8 = HEAP8[$0 + 24 >> 0] | 0; //@line 13081
 $9 = $0 + 12 | 0; //@line 13082
 $10 = HEAP32[$9 >> 2] | 0; //@line 13083
 do {
  if (!$10) {
   $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 13087
   _mbed_assert_internal(15679, 15684, 2830); //@line 13088
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 363; //@line 13091
    HEAP32[$AsyncCtx2 + 4 >> 2] = $9; //@line 13093
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 13095
    HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 13097
    HEAP16[$AsyncCtx2 + 16 >> 1] = $4; //@line 13099
    HEAP16[$AsyncCtx2 + 18 >> 1] = $6; //@line 13101
    HEAP8[$AsyncCtx2 + 20 >> 0] = $8; //@line 13103
    sp = STACKTOP; //@line 13104
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 13107
    $19 = HEAP32[$9 >> 2] | 0; //@line 13109
    break;
   }
  } else {
   $19 = $10; //@line 13113
  }
 } while (0);
 $18 = HEAP32[$19 >> 2] | 0; //@line 13116
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 13117
 FUNCTION_TABLE_viiiii[$18 & 7]($0, $2, $4, $6, $8); //@line 13118
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 364; //@line 13121
  sp = STACKTOP; //@line 13122
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13125
  return;
 }
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_425($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 33758
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33762
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33764
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33766
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 33768
 $11 = $4 + 944 | 0; //@line 33769
 HEAP8[$11 >> 0] = HEAP8[$11 >> 0] | 34; //@line 33772
 $14 = HEAP32[$6 >> 2] | 0; //@line 33773
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 33775
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($14, $4 + 996 | 0, 1); //@line 33776
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 351; //@line 33779
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 33780
  HEAP32[$16 >> 2] = $4; //@line 33781
  $17 = $ReallocAsyncCtx6 + 8 | 0; //@line 33782
  HEAP32[$17 >> 2] = $6; //@line 33783
  $18 = $ReallocAsyncCtx6 + 12 | 0; //@line 33784
  HEAP32[$18 >> 2] = $8; //@line 33785
  $19 = $ReallocAsyncCtx6 + 16 | 0; //@line 33786
  HEAP32[$19 >> 2] = $10; //@line 33787
  sp = STACKTOP; //@line 33788
  return;
 }
 ___async_unwind = 0; //@line 33791
 HEAP32[$ReallocAsyncCtx6 >> 2] = 351; //@line 33792
 $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 33793
 HEAP32[$16 >> 2] = $4; //@line 33794
 $17 = $ReallocAsyncCtx6 + 8 | 0; //@line 33795
 HEAP32[$17 >> 2] = $6; //@line 33796
 $18 = $ReallocAsyncCtx6 + 12 | 0; //@line 33797
 HEAP32[$18 >> 2] = $8; //@line 33798
 $19 = $ReallocAsyncCtx6 + 16 | 0; //@line 33799
 HEAP32[$19 >> 2] = $10; //@line 33800
 sp = STACKTOP; //@line 33801
 return;
}
function __Z11compute_micPKhtS0_jhjPj__async_cb_362($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 27210
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27212
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27214
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27216
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 27218
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 27221
  $9 = _mbedtls_cipher_cmac_update(23188, $2, $4) | 0; //@line 27222
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 512; //@line 27225
   $10 = $ReallocAsyncCtx + 4 | 0; //@line 27226
   HEAP32[$10 >> 2] = $6; //@line 27227
   sp = STACKTOP; //@line 27228
   return;
  }
  HEAP32[___async_retval >> 2] = $9; //@line 27232
  ___async_unwind = 0; //@line 27233
  HEAP32[$ReallocAsyncCtx >> 2] = 512; //@line 27234
  $10 = $ReallocAsyncCtx + 4 | 0; //@line 27235
  HEAP32[$10 >> 2] = $6; //@line 27236
  sp = STACKTOP; //@line 27237
  return;
 } else {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 27240
  _mbedtls_cipher_free(23188); //@line 27241
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 514; //@line 27244
   $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 27245
   HEAP32[$12 >> 2] = $AsyncRetVal; //@line 27246
   sp = STACKTOP; //@line 27247
   return;
  }
  ___async_unwind = 0; //@line 27250
  HEAP32[$ReallocAsyncCtx6 >> 2] = 514; //@line 27251
  $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 27252
  HEAP32[$12 >> 2] = $AsyncRetVal; //@line 27253
  sp = STACKTOP; //@line 27254
  return;
 }
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_103($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 23790
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23792
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23794
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23796
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23798
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23800
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23802
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23804
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 23806
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 23808
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 23810
 HEAP32[$12 >> 2] = 6; //@line 23811
 HEAP32[$20 >> 2] = HEAP32[$2 + 1952 >> 2]; //@line 23814
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(40) | 0; //@line 23815
 __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($16, $18) | 0; //@line 23816
 if (!___async) {
  ___async_unwind = 0; //@line 23819
 }
 HEAP32[$ReallocAsyncCtx14 >> 2] = 210; //@line 23821
 HEAP32[$ReallocAsyncCtx14 + 4 >> 2] = $12; //@line 23823
 HEAP32[$ReallocAsyncCtx14 + 8 >> 2] = $14; //@line 23825
 HEAP32[$ReallocAsyncCtx14 + 12 >> 2] = $16; //@line 23827
 HEAP32[$ReallocAsyncCtx14 + 16 >> 2] = $18; //@line 23829
 HEAP32[$ReallocAsyncCtx14 + 20 >> 2] = $6; //@line 23831
 HEAP32[$ReallocAsyncCtx14 + 24 >> 2] = $8; //@line 23833
 HEAP32[$ReallocAsyncCtx14 + 28 >> 2] = $2; //@line 23835
 HEAP32[$ReallocAsyncCtx14 + 32 >> 2] = $10; //@line 23837
 HEAP32[$ReallocAsyncCtx14 + 36 >> 2] = $4; //@line 23839
 sp = STACKTOP; //@line 23840
 return;
}
function __Z22compute_join_frame_micPKhtS0_Pj__async_cb_234($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $14 = 0, $4 = 0, $6 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 5088
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5092
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5094
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 5096
 if (!$AsyncRetVal) {
  $10 = HEAP16[$0 + 4 >> 1] & 255; //@line 5100
  $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 5101
  $11 = _mbedtls_cipher_cmac_update(23188, $4, $10) | 0; //@line 5102
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 517; //@line 5105
   $12 = $ReallocAsyncCtx + 4 | 0; //@line 5106
   HEAP32[$12 >> 2] = $6; //@line 5107
   sp = STACKTOP; //@line 5108
   return;
  }
  HEAP32[___async_retval >> 2] = $11; //@line 5112
  ___async_unwind = 0; //@line 5113
  HEAP32[$ReallocAsyncCtx >> 2] = 517; //@line 5114
  $12 = $ReallocAsyncCtx + 4 | 0; //@line 5115
  HEAP32[$12 >> 2] = $6; //@line 5116
  sp = STACKTOP; //@line 5117
  return;
 } else {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 5120
  _mbedtls_cipher_free(23188); //@line 5121
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 519; //@line 5124
   $14 = $ReallocAsyncCtx5 + 4 | 0; //@line 5125
   HEAP32[$14 >> 2] = $AsyncRetVal; //@line 5126
   sp = STACKTOP; //@line 5127
   return;
  }
  ___async_unwind = 0; //@line 5130
  HEAP32[$ReallocAsyncCtx5 >> 2] = 519; //@line 5131
  $14 = $ReallocAsyncCtx5 + 4 | 0; //@line 5132
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 5133
  sp = STACKTOP; //@line 5134
  return;
 }
}
function __ZN7LoRaPHY25setup_public_network_modeEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $14 = 0, $17 = 0, $2 = 0, $3 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 24510
 $2 = $0 + 4 | 0; //@line 24511
 $3 = HEAP32[$2 >> 2] | 0; //@line 24512
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 72 >> 2] | 0; //@line 24515
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 24516
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 24517
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 559; //@line 24520
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 24522
  HEAP8[$AsyncCtx + 8 >> 0] = $1 & 1; //@line 24525
  sp = STACKTOP; //@line 24526
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 24529
 $9 = HEAP32[$2 >> 2] | 0; //@line 24530
 $12 = HEAP32[(HEAP32[$9 >> 2] | 0) + 48 >> 2] | 0; //@line 24533
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 24534
 FUNCTION_TABLE_vii[$12 & 31]($9, $1); //@line 24535
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 560; //@line 24538
  HEAP32[$AsyncCtx2 + 4 >> 2] = $2; //@line 24540
  sp = STACKTOP; //@line 24541
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 24544
 $14 = HEAP32[$2 >> 2] | 0; //@line 24545
 $17 = HEAP32[(HEAP32[$14 >> 2] | 0) + 76 >> 2] | 0; //@line 24548
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 24549
 FUNCTION_TABLE_vi[$17 & 1023]($14); //@line 24550
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 561; //@line 24553
  sp = STACKTOP; //@line 24554
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 24557
  return;
 }
}
function _mbedtls_cipher_cmac_starts__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0, $27 = 0, $4 = 0, $9 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24920
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24922
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 24924
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 24927
  $27 = ___async_retval; //@line 24928
  HEAP32[$27 >> 2] = $$0; //@line 24929
  return;
 }
 switch (HEAP32[HEAP32[$2 >> 2] >> 2] | 0) {
 case 36:
 case 4:
 case 3:
 case 2:
  {
   break;
  }
 default:
  {
   $$0 = -24832; //@line 24939
   $27 = ___async_retval; //@line 24940
   HEAP32[$27 >> 2] = $$0; //@line 24941
   return;
  }
 }
 $9 = _calloc(1, 36) | 0; //@line 24945
 if (!$9) {
  $$0 = -24960; //@line 24948
  $27 = ___async_retval; //@line 24949
  HEAP32[$27 >> 2] = $$0; //@line 24950
  return;
 }
 HEAP32[$4 + 64 >> 2] = $9; //@line 24954
 HEAP8[$9 >> 0] = 0; //@line 24956
 HEAP8[$9 + 1 >> 0] = 0; //@line 24958
 HEAP8[$9 + 2 >> 0] = 0; //@line 24960
 HEAP8[$9 + 3 >> 0] = 0; //@line 24962
 HEAP8[$9 + 4 >> 0] = 0; //@line 24964
 HEAP8[$9 + 5 >> 0] = 0; //@line 24966
 HEAP8[$9 + 6 >> 0] = 0; //@line 24968
 HEAP8[$9 + 7 >> 0] = 0; //@line 24970
 HEAP8[$9 + 8 >> 0] = 0; //@line 24972
 HEAP8[$9 + 9 >> 0] = 0; //@line 24974
 HEAP8[$9 + 10 >> 0] = 0; //@line 24976
 HEAP8[$9 + 11 >> 0] = 0; //@line 24978
 HEAP8[$9 + 12 >> 0] = 0; //@line 24980
 HEAP8[$9 + 13 >> 0] = 0; //@line 24982
 HEAP8[$9 + 14 >> 0] = 0; //@line 24984
 HEAP8[$9 + 15 >> 0] = 0; //@line 24985
 $$0 = 0; //@line 24986
 $27 = ___async_retval; //@line 24987
 HEAP32[$27 >> 2] = $$0; //@line 24988
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_303($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 12059
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12061
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12063
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 12065
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12067
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12069
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 12071
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 12073
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 12075
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 12077
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 12079
 $21 = HEAP32[$2 >> 2] | 0; //@line 12080
 $24 = HEAP32[(HEAP32[$21 >> 2] | 0) + 32 >> 2] | 0; //@line 12083
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(40) | 0; //@line 12084
 FUNCTION_TABLE_vii[$24 & 31]($21, $4); //@line 12085
 if (!___async) {
  ___async_unwind = 0; //@line 12088
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 535; //@line 12090
 HEAP8[$ReallocAsyncCtx5 + 4 >> 0] = $6; //@line 12092
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $8; //@line 12094
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $2; //@line 12096
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $10; //@line 12098
 HEAP8[$ReallocAsyncCtx5 + 20 >> 0] = $12; //@line 12100
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $14; //@line 12102
 HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $16; //@line 12104
 HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $18; //@line 12106
 HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $20; //@line 12108
 sp = STACKTOP; //@line 12109
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 28195
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28199
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28201
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28203
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28205
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28207
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28209
 $16 = HEAP8[$0 + 32 >> 0] & 1; //@line 28212
 $21 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 28213
 if ($21 >>> 0 < $4 >>> 0) {
  if (!(HEAP8[$6 >> 0] | 0)) {
   if ((HEAP32[$8 >> 2] | 0) != 1) {
    $ReallocAsyncCtx = _emscripten_realloc_async_context(36) | 0; //@line 28222
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($21, $10, $12, $14, $16); //@line 28223
    if (!___async) {
     ___async_unwind = 0; //@line 28226
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 723; //@line 28228
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $21; //@line 28230
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 28232
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 28234
    HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 28236
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 28238
    HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 28240
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 28242
    HEAP8[$ReallocAsyncCtx + 32 >> 0] = $16 & 1; //@line 28245
    sp = STACKTOP; //@line 28246
    return;
   }
  }
 }
 return;
}
function __ZN7LoRaMac21send_frame_on_channelEh__async_cb_147($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 27598
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27600
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27602
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27604
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27606
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27608
 if (!(HEAP8[$2 + 372 >> 0] | 0)) {
  $14 = $2 + 897 | 0; //@line 27613
  HEAP8[$14 >> 0] = (HEAP8[$14 >> 0] | 0) + 1 << 24 >> 24; //@line 27616
 }
 $17 = HEAP32[$4 >> 2] | 0; //@line 27618
 $20 = HEAP16[$6 >> 1] & 255; //@line 27621
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 27622
 __ZN7LoRaPHY11handle_sendEPhh($17, $2 + 381 | 0, $20); //@line 27623
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 422; //@line 27626
  $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 27627
  HEAP32[$21 >> 2] = $2; //@line 27628
  $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 27629
  HEAP32[$22 >> 2] = $8; //@line 27630
  $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 27631
  HEAP32[$23 >> 2] = $10; //@line 27632
  sp = STACKTOP; //@line 27633
  return;
 }
 ___async_unwind = 0; //@line 27636
 HEAP32[$ReallocAsyncCtx3 >> 2] = 422; //@line 27637
 $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 27638
 HEAP32[$21 >> 2] = $2; //@line 27639
 $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 27640
 HEAP32[$22 >> 2] = $8; //@line 27641
 $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 27642
 HEAP32[$23 >> 2] = $10; //@line 27643
 sp = STACKTOP; //@line 27644
 return;
}
function __ZN7LoRaMac14handle_rx_doneEPhtsa__async_cb_387($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 28147
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28151
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 28153
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 28154
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 28158
  $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 28159
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 28160
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 314; //@line 28163
   $10 = $ReallocAsyncCtx + 4 | 0; //@line 28164
   HEAP32[$10 >> 2] = $4; //@line 28165
   $11 = $ReallocAsyncCtx + 8 | 0; //@line 28166
   HEAP32[$11 >> 2] = $AsyncRetVal; //@line 28167
   sp = STACKTOP; //@line 28168
   return;
  }
  ___async_unwind = 0; //@line 28171
  HEAP32[$ReallocAsyncCtx >> 2] = 314; //@line 28172
  $10 = $ReallocAsyncCtx + 4 | 0; //@line 28173
  HEAP32[$10 >> 2] = $4; //@line 28174
  $11 = $ReallocAsyncCtx + 8 | 0; //@line 28175
  HEAP32[$11 >> 2] = $AsyncRetVal; //@line 28176
  sp = STACKTOP; //@line 28177
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 28184
 _mbed_assert_internal(13612, 13621, 141); //@line 28185
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 315; //@line 28188
  sp = STACKTOP; //@line 28189
  return;
 }
 ___async_unwind = 0; //@line 28192
 HEAP32[$ReallocAsyncCtx3 >> 2] = 315; //@line 28193
 sp = STACKTOP; //@line 28194
 return;
}
function __ZN4mbed5Timer7read_msEv($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $16 = 0, $2 = 0, $21 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2978
 $2 = $0 + 16 | 0; //@line 2980
 $4 = HEAP32[$2 >> 2] | 0; //@line 2982
 $7 = HEAP32[$2 + 4 >> 2] | 0; //@line 2985
 if (!(HEAP32[$0 >> 2] | 0)) {
  $29 = 0; //@line 2989
  $30 = 0; //@line 2989
  $31 = _i64Add($29 | 0, $30 | 0, $4 | 0, $7 | 0) | 0; //@line 2990
  $32 = tempRet0; //@line 2991
  $33 = ___udivdi3($31 | 0, $32 | 0, 1e3, 0) | 0; //@line 2992
  $34 = tempRet0; //@line 2993
  return $33 | 0; //@line 2994
 }
 $11 = HEAP32[$0 + 24 >> 2] | 0; //@line 2997
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 2998
 $12 = _ticker_read_us($11) | 0; //@line 2999
 $13 = tempRet0; //@line 3000
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 122; //@line 3003
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 3005
  $16 = $AsyncCtx + 8 | 0; //@line 3007
  HEAP32[$16 >> 2] = $4; //@line 3009
  HEAP32[$16 + 4 >> 2] = $7; //@line 3012
  sp = STACKTOP; //@line 3013
  return 0; //@line 3014
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 3016
 $21 = $0 + 8 | 0; //@line 3018
 $27 = _i64Subtract($12 | 0, $13 | 0, HEAP32[$21 >> 2] | 0, HEAP32[$21 + 4 >> 2] | 0) | 0; //@line 3024
 $29 = $27; //@line 3026
 $30 = tempRet0; //@line 3026
 $31 = _i64Add($29 | 0, $30 | 0, $4 | 0, $7 | 0) | 0; //@line 3027
 $32 = tempRet0; //@line 3028
 $33 = ___udivdi3($31 | 0, $32 | 0, 1e3, 0) | 0; //@line 3029
 $34 = tempRet0; //@line 3030
 return $33 | 0; //@line 3031
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_221($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 3769
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3773
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3775
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3777
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3779
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 3781
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 3783
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 3786
 _equeue_event_delay($4, $6); //@line 3787
 _equeue_event_dtor($4, 302); //@line 3788
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 3789
 $16 = _equeue_post($8, 303, $4) | 0; //@line 3790
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 578; //@line 3793
  $17 = $ReallocAsyncCtx4 + 4 | 0; //@line 3794
  HEAP32[$17 >> 2] = $10; //@line 3795
  $18 = $ReallocAsyncCtx4 + 8 | 0; //@line 3796
  HEAP32[$18 >> 2] = $12; //@line 3797
  $19 = $ReallocAsyncCtx4 + 12 | 0; //@line 3798
  HEAP32[$19 >> 2] = $14; //@line 3799
  sp = STACKTOP; //@line 3800
  return;
 }
 HEAP32[___async_retval >> 2] = $16; //@line 3804
 ___async_unwind = 0; //@line 3805
 HEAP32[$ReallocAsyncCtx4 >> 2] = 578; //@line 3806
 $17 = $ReallocAsyncCtx4 + 4 | 0; //@line 3807
 HEAP32[$17 >> 2] = $10; //@line 3808
 $18 = $ReallocAsyncCtx4 + 8 | 0; //@line 3809
 HEAP32[$18 >> 2] = $12; //@line 3810
 $19 = $ReallocAsyncCtx4 + 12 | 0; //@line 3811
 HEAP32[$19 >> 2] = $14; //@line 3812
 sp = STACKTOP; //@line 3813
 return;
}
function _fflush__async_cb($0) {
 $0 = $0 | 0;
 var $$02327$reg2mem$0 = 0, $$1 = 0, $$reg2mem$0 = 0, $17 = 0, $20 = 0, $ReallocAsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10999
 $$02327$reg2mem$0 = HEAP32[$0 + 12 >> 2] | 0; //@line 11009
 $$1 = HEAP32[___async_retval >> 2] | HEAP32[$0 + 4 >> 2]; //@line 11009
 $$reg2mem$0 = HEAP32[$0 + 8 >> 2] | 0; //@line 11009
 while (1) {
  if ($$reg2mem$0 | 0) {
   ___unlockfile($$02327$reg2mem$0); //@line 11013
  }
  $$02327$reg2mem$0 = HEAP32[$$02327$reg2mem$0 + 56 >> 2] | 0; //@line 11016
  if (!$$02327$reg2mem$0) {
   label = 12; //@line 11019
   break;
  }
  if ((HEAP32[$$02327$reg2mem$0 + 76 >> 2] | 0) > -1) {
   $20 = ___lockfile($$02327$reg2mem$0) | 0; //@line 11027
  } else {
   $20 = 0; //@line 11029
  }
  if ((HEAP32[$$02327$reg2mem$0 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327$reg2mem$0 + 28 >> 2] | 0) >>> 0) {
   break;
  } else {
   $$reg2mem$0 = $20; //@line 11039
  }
 }
 if ((label | 0) == 12) {
  ___ofl_unlock(); //@line 11043
  HEAP32[___async_retval >> 2] = $$1; //@line 11045
  return;
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 11048
 $17 = ___fflush_unlocked($$02327$reg2mem$0) | 0; //@line 11049
 if (!___async) {
  HEAP32[___async_retval >> 2] = $17; //@line 11053
  ___async_unwind = 0; //@line 11054
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 690; //@line 11056
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $$1; //@line 11058
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $20; //@line 11060
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $$02327$reg2mem$0; //@line 11062
 sp = STACKTOP; //@line 11063
 return;
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_266($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 9505
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9507
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9509
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9511
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9513
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 9515
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 9517
 $13 = $2 + 356 | 0; //@line 9518
 $14 = HEAP32[$13 >> 2] | 0; //@line 9519
 $16 = $12 + 12 | 0; //@line 9521
 HEAP32[$12 >> 2] = 443; //@line 9522
 HEAP32[$12 + 4 >> 2] = 0; //@line 9524
 HEAP32[$12 + 8 >> 2] = $2; //@line 9526
 HEAP32[$16 >> 2] = 912; //@line 9527
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(36) | 0; //@line 9528
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($14, $2 + 996 | 0, $12); //@line 9529
 if (!___async) {
  ___async_unwind = 0; //@line 9532
 }
 HEAP32[$ReallocAsyncCtx10 >> 2] = 444; //@line 9534
 HEAP32[$ReallocAsyncCtx10 + 4 >> 2] = $13; //@line 9536
 HEAP32[$ReallocAsyncCtx10 + 8 >> 2] = $2; //@line 9538
 HEAP32[$ReallocAsyncCtx10 + 12 >> 2] = $4; //@line 9540
 HEAP32[$ReallocAsyncCtx10 + 16 >> 2] = $6; //@line 9542
 HEAP32[$ReallocAsyncCtx10 + 20 >> 2] = $8; //@line 9544
 HEAP32[$ReallocAsyncCtx10 + 24 >> 2] = $10; //@line 9546
 HEAP32[$ReallocAsyncCtx10 + 28 >> 2] = $16; //@line 9548
 HEAP32[$ReallocAsyncCtx10 + 32 >> 2] = $12; //@line 9550
 sp = STACKTOP; //@line 9551
 return;
}
function ___fflush_unlocked__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 11374
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11376
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11378
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11380
 do {
  if (!(HEAP32[$2 >> 2] | 0)) {
   $$0 = -1; //@line 11385
  } else {
   $9 = $4 + 4 | 0; //@line 11387
   $10 = HEAP32[$9 >> 2] | 0; //@line 11388
   $11 = $4 + 8 | 0; //@line 11389
   $12 = HEAP32[$11 >> 2] | 0; //@line 11390
   if ($10 >>> 0 >= $12 >>> 0) {
    HEAP32[$4 + 16 >> 2] = 0; //@line 11394
    HEAP32[$6 >> 2] = 0; //@line 11395
    HEAP32[$2 >> 2] = 0; //@line 11396
    HEAP32[$11 >> 2] = 0; //@line 11397
    HEAP32[$9 >> 2] = 0; //@line 11398
    $$0 = 0; //@line 11399
    break;
   }
   $18 = HEAP32[$4 + 40 >> 2] | 0; //@line 11406
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 11407
   FUNCTION_TABLE_iiii[$18 & 15]($4, $10 - $12 | 0, 1) | 0; //@line 11408
   if (!___async) {
    ___async_unwind = 0; //@line 11411
   }
   HEAP32[$ReallocAsyncCtx2 >> 2] = 692; //@line 11413
   HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $4; //@line 11415
   HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 11417
   HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 11419
   HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $11; //@line 11421
   HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $9; //@line 11423
   sp = STACKTOP; //@line 11424
   return;
  }
 } while (0);
 HEAP32[___async_retval >> 2] = $$0; //@line 11429
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_306($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $18 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 12313
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12323
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 12325
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 12327
 $18 = HEAP32[$10 >> 2] | 0; //@line 12334
 $21 = HEAP32[(HEAP32[$18 >> 2] | 0) + 44 >> 2] | 0; //@line 12337
 $24 = (HEAPU8[((HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 17 >> 0] | 0) == 0 ? HEAP32[$0 + 8 >> 2] | 0 : HEAP32[$0 + 12 >> 2] | 0) + (HEAP32[$0 + 16 >> 2] | 0) >> 0] | 0) + 13 & 255; //@line 12340
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 12341
 FUNCTION_TABLE_viii[$21 & 7]($18, 1, $24); //@line 12342
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 538; //@line 12345
  $25 = $ReallocAsyncCtx8 + 4 | 0; //@line 12346
  HEAP32[$25 >> 2] = $10; //@line 12347
  $26 = $ReallocAsyncCtx8 + 8 | 0; //@line 12348
  HEAP8[$26 >> 0] = $12; //@line 12349
  $27 = $ReallocAsyncCtx8 + 12 | 0; //@line 12350
  HEAP32[$27 >> 2] = $14; //@line 12351
  sp = STACKTOP; //@line 12352
  return;
 }
 ___async_unwind = 0; //@line 12355
 HEAP32[$ReallocAsyncCtx8 >> 2] = 538; //@line 12356
 $25 = $ReallocAsyncCtx8 + 4 | 0; //@line 12357
 HEAP32[$25 >> 2] = $10; //@line 12358
 $26 = $ReallocAsyncCtx8 + 8 | 0; //@line 12359
 HEAP8[$26 >> 0] = $12; //@line 12360
 $27 = $ReallocAsyncCtx8 + 12 | 0; //@line 12361
 HEAP32[$27 >> 2] = $14; //@line 12362
 sp = STACKTOP; //@line 12363
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_305($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $18 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 12256
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12266
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 12268
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 12270
 $18 = HEAP32[$10 >> 2] | 0; //@line 12277
 $21 = HEAP32[(HEAP32[$18 >> 2] | 0) + 44 >> 2] | 0; //@line 12280
 $24 = (HEAPU8[((HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 17 >> 0] | 0) == 0 ? HEAP32[$0 + 8 >> 2] | 0 : HEAP32[$0 + 12 >> 2] | 0) + (HEAP32[$0 + 16 >> 2] | 0) >> 0] | 0) + 13 & 255; //@line 12283
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 12284
 FUNCTION_TABLE_viii[$21 & 7]($18, 0, $24); //@line 12285
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 538; //@line 12288
  $25 = $ReallocAsyncCtx8 + 4 | 0; //@line 12289
  HEAP32[$25 >> 2] = $10; //@line 12290
  $26 = $ReallocAsyncCtx8 + 8 | 0; //@line 12291
  HEAP8[$26 >> 0] = $12; //@line 12292
  $27 = $ReallocAsyncCtx8 + 12 | 0; //@line 12293
  HEAP32[$27 >> 2] = $14; //@line 12294
  sp = STACKTOP; //@line 12295
  return;
 }
 ___async_unwind = 0; //@line 12298
 HEAP32[$ReallocAsyncCtx8 >> 2] = 538; //@line 12299
 $25 = $ReallocAsyncCtx8 + 4 | 0; //@line 12300
 HEAP32[$25 >> 2] = $10; //@line 12301
 $26 = $ReallocAsyncCtx8 + 8 | 0; //@line 12302
 HEAP8[$26 >> 0] = $12; //@line 12303
 $27 = $ReallocAsyncCtx8 + 12 | 0; //@line 12304
 HEAP32[$27 >> 2] = $14; //@line 12305
 sp = STACKTOP; //@line 12306
 return;
}
function __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 27934
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27936
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27938
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27940
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27942
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27944
 $$pre = HEAP32[$2 >> 2] | 0; //@line 27945
 if (!$$pre) {
  HEAP32[$4 >> 2] = 0; //@line 27948
  _gpio_irq_set($10 + 28 | 0, 2, 1); //@line 27950
  return;
 }
 $13 = HEAP32[$$pre + 4 >> 2] | 0; //@line 27954
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 27955
 FUNCTION_TABLE_vii[$13 & 31]($6, $8); //@line 27956
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 110; //@line 27959
  $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 27960
  HEAP32[$14 >> 2] = $2; //@line 27961
  $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 27962
  HEAP32[$15 >> 2] = $4; //@line 27963
  $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 27964
  HEAP32[$16 >> 2] = $10; //@line 27965
  sp = STACKTOP; //@line 27966
  return;
 }
 ___async_unwind = 0; //@line 27969
 HEAP32[$ReallocAsyncCtx2 >> 2] = 110; //@line 27970
 $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 27971
 HEAP32[$14 >> 2] = $2; //@line 27972
 $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 27973
 HEAP32[$15 >> 2] = $4; //@line 27974
 $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 27975
 HEAP32[$16 >> 2] = $10; //@line 27976
 sp = STACKTOP; //@line 27977
 return;
}
function _equeue_create($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$033$i = 0, $$034$i = 0, $2 = 0, $21 = 0, $23 = 0, $27 = 0, $30 = 0, $5 = 0, $6 = 0;
 $2 = _malloc($1) | 0; //@line 3174
 if (!$2) {
  $$0 = -1; //@line 3177
  return $$0 | 0; //@line 3178
 }
 HEAP32[$0 + 12 >> 2] = $2; //@line 3181
 $5 = $0 + 20 | 0; //@line 3182
 HEAP32[$5 >> 2] = 0; //@line 3183
 $6 = $0 + 16 | 0; //@line 3184
 HEAP32[$6 >> 2] = 0; //@line 3185
 if ($1 | 0) {
  $$034$i = $1; //@line 3188
  $23 = 0; //@line 3188
  do {
   $23 = $23 + 1 | 0; //@line 3190
   $$034$i = $$034$i >>> 1; //@line 3191
  } while (($$034$i | 0) != 0);
  HEAP32[$6 >> 2] = $23; //@line 3199
 }
 HEAP32[$0 + 24 >> 2] = 0; //@line 3202
 HEAP32[$0 + 28 >> 2] = $1; //@line 3204
 HEAP32[$0 + 32 >> 2] = $2; //@line 3206
 HEAP32[$0 >> 2] = 0; //@line 3207
 HEAP32[$0 + 4 >> 2] = _equeue_tick() | 0; //@line 3210
 HEAP8[$0 + 9 >> 0] = 0; //@line 3212
 HEAP8[$0 + 8 >> 0] = 0; //@line 3214
 HEAP8[$0 + 36 >> 0] = 0; //@line 3216
 HEAP32[$0 + 40 >> 2] = 0; //@line 3218
 HEAP32[$0 + 44 >> 2] = 0; //@line 3220
 HEAP8[$0 + 184 >> 0] = 0; //@line 3222
 $21 = _equeue_sema_create($0 + 48 | 0) | 0; //@line 3224
 if (($21 | 0) < 0) {
  $$033$i = $21; //@line 3227
 } else {
  $27 = _equeue_mutex_create($0 + 128 | 0) | 0; //@line 3230
  if (($27 | 0) < 0) {
   $$033$i = $27; //@line 3233
  } else {
   $30 = _equeue_mutex_create($0 + 156 | 0) | 0; //@line 3236
   $$033$i = ($30 | 0) < 0 ? $30 : 0; //@line 3239
  }
 }
 HEAP32[$5 >> 2] = $2; //@line 3242
 $$0 = $$033$i; //@line 3243
 return $$0 | 0; //@line 3244
}
function __ZN7LoRaPHY20put_radio_to_standbyEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $12 = 0, $15 = 0, $2 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 24457
 $1 = $0 + 4 | 0; //@line 24458
 $2 = HEAP32[$1 >> 2] | 0; //@line 24459
 $5 = HEAP32[(HEAP32[$2 >> 2] | 0) + 72 >> 2] | 0; //@line 24462
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 24463
 FUNCTION_TABLE_vi[$5 & 1023]($2); //@line 24464
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 556; //@line 24467
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 24469
  sp = STACKTOP; //@line 24470
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 24473
 $7 = HEAP32[$1 >> 2] | 0; //@line 24474
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 12 >> 2] | 0; //@line 24477
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 24478
 FUNCTION_TABLE_vi[$10 & 1023]($7); //@line 24479
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 557; //@line 24482
  HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 24484
  sp = STACKTOP; //@line 24485
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 24488
 $12 = HEAP32[$1 >> 2] | 0; //@line 24489
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 76 >> 2] | 0; //@line 24492
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 24493
 FUNCTION_TABLE_vi[$15 & 1023]($12); //@line 24494
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 558; //@line 24497
  sp = STACKTOP; //@line 24498
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 24501
  return;
 }
}
function __ZN7LoRaPHY18put_radio_to_sleepEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $12 = 0, $15 = 0, $2 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 24405
 $1 = $0 + 4 | 0; //@line 24406
 $2 = HEAP32[$1 >> 2] | 0; //@line 24407
 $5 = HEAP32[(HEAP32[$2 >> 2] | 0) + 72 >> 2] | 0; //@line 24410
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 24411
 FUNCTION_TABLE_vi[$5 & 1023]($2); //@line 24412
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 553; //@line 24415
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 24417
  sp = STACKTOP; //@line 24418
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 24421
 $7 = HEAP32[$1 >> 2] | 0; //@line 24422
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0; //@line 24425
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 24426
 FUNCTION_TABLE_vi[$10 & 1023]($7); //@line 24427
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 554; //@line 24430
  HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 24432
  sp = STACKTOP; //@line 24433
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 24436
 $12 = HEAP32[$1 >> 2] | 0; //@line 24437
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 76 >> 2] | 0; //@line 24440
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 24441
 FUNCTION_TABLE_vi[$15 & 1023]($12); //@line 24442
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 555; //@line 24445
  sp = STACKTOP; //@line 24446
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 24449
  return;
 }
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_223($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 3844
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3848
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3850
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 3852
 $8 = (HEAP32[$0 + 4 >> 2] | 0) + 16 | 0; //@line 3853
 HEAP32[$8 >> 2] = $AsyncRetVal; //@line 3854
 $9 = HEAP32[$4 >> 2] | 0; //@line 3855
 if ($9 | 0) {
  $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 3859
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 3860
  FUNCTION_TABLE_vi[$12 & 1023]($6); //@line 3861
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 579; //@line 3864
   $13 = $ReallocAsyncCtx3 + 4 | 0; //@line 3865
   HEAP32[$13 >> 2] = $8; //@line 3866
   sp = STACKTOP; //@line 3867
   return;
  }
  ___async_unwind = 0; //@line 3870
  HEAP32[$ReallocAsyncCtx3 >> 2] = 579; //@line 3871
  $13 = $ReallocAsyncCtx3 + 4 | 0; //@line 3872
  HEAP32[$13 >> 2] = $8; //@line 3873
  sp = STACKTOP; //@line 3874
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 3881
 _mbed_assert_internal(14352, 14370, 57); //@line 3882
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 580; //@line 3885
  sp = STACKTOP; //@line 3886
  return;
 }
 ___async_unwind = 0; //@line 3889
 HEAP32[$ReallocAsyncCtx6 >> 2] = 580; //@line 3890
 sp = STACKTOP; //@line 3891
 return;
}
function __ZN12LoRaWANStack20join_request_by_otaaERK15lorawan_connect($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $2 = 0, $20 = 0, $6 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 9342
 STACKTOP = STACKTOP + 16 | 0; //@line 9343
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 9343
 $2 = $0 + 1876 | 0; //@line 9346
 if (!(HEAP32[$2 >> 2] | 0)) {
  _mbed_tracef(2, 12356, 13306, sp); //@line 9350
  $$0 = -1012; //@line 9351
  STACKTOP = sp; //@line 9352
  return $$0 | 0; //@line 9352
 }
 _mbed_tracef(16, 12356, 13416, sp + 8 | 0); //@line 9354
 $6 = HEAP32[$1 + 4 >> 2] | 0; //@line 9356
 $8 = HEAP32[$1 + 8 >> 2] | 0; //@line 9358
 $10 = HEAP32[$1 + 12 >> 2] | 0; //@line 9360
 $12 = HEAP8[$1 + 16 >> 0] | 0; //@line 9362
 HEAP8[$0 + 1936 >> 0] = 0; //@line 9364
 HEAP32[$0 + 1960 >> 2] = 0; //@line 9366
 HEAP32[$0 + 1956 >> 2] = 0; //@line 9368
 HEAP32[$0 + 1944 >> 2] = $8; //@line 9371
 HEAP32[$0 + 1948 >> 2] = $10; //@line 9373
 HEAP32[$0 + 1940 >> 2] = $6; //@line 9374
 HEAP8[$0 + 1952 >> 0] = $12; //@line 9376
 HEAP32[$2 >> 2] = 2; //@line 9377
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 9378
 $20 = __ZN12LoRaWANStack18lora_state_machineEv($0) | 0; //@line 9379
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 271; //@line 9382
  sp = STACKTOP; //@line 9383
  STACKTOP = sp; //@line 9384
  return 0; //@line 9384
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 9386
 $$0 = $20; //@line 9387
 STACKTOP = sp; //@line 9388
 return $$0 | 0; //@line 9388
}
function __ZN7LoRaPHY15setup_rx_windowEbj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 4044
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4046
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4051
 $7 = HEAP32[$2 >> 2] | 0; //@line 4052
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 28 >> 2] | 0; //@line 4055
 if (HEAP8[$0 + 8 >> 0] & 1) {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 4057
  FUNCTION_TABLE_vii[$10 & 31]($7, 0); //@line 4058
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 564; //@line 4061
   $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 4062
   HEAP32[$12 >> 2] = $2; //@line 4063
   sp = STACKTOP; //@line 4064
   return;
  }
  ___async_unwind = 0; //@line 4067
  HEAP32[$ReallocAsyncCtx3 >> 2] = 564; //@line 4068
  $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 4069
  HEAP32[$12 >> 2] = $2; //@line 4070
  sp = STACKTOP; //@line 4071
  return;
 } else {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 4074
  FUNCTION_TABLE_vii[$10 & 31]($7, $6); //@line 4075
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 563; //@line 4078
   $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 4079
   HEAP32[$11 >> 2] = $2; //@line 4080
   sp = STACKTOP; //@line 4081
   return;
  }
  ___async_unwind = 0; //@line 4084
  HEAP32[$ReallocAsyncCtx2 >> 2] = 563; //@line 4085
  $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 4086
  HEAP32[$11 >> 2] = $2; //@line 4087
  sp = STACKTOP; //@line 4088
  return;
 }
}
function __Z11compute_micPKhtS0_jhjPj__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 27163
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27165
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 27167
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 27170
  $5 = _mbedtls_cipher_cmac_finish(23188, 24500) | 0; //@line 27171
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 513; //@line 27174
   $6 = $ReallocAsyncCtx3 + 4 | 0; //@line 27175
   HEAP32[$6 >> 2] = $2; //@line 27176
   sp = STACKTOP; //@line 27177
   return;
  }
  HEAP32[___async_retval >> 2] = $5; //@line 27181
  ___async_unwind = 0; //@line 27182
  HEAP32[$ReallocAsyncCtx3 >> 2] = 513; //@line 27183
  $6 = $ReallocAsyncCtx3 + 4 | 0; //@line 27184
  HEAP32[$6 >> 2] = $2; //@line 27185
  sp = STACKTOP; //@line 27186
  return;
 } else {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 27189
  _mbedtls_cipher_free(23188); //@line 27190
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 514; //@line 27193
   $8 = $ReallocAsyncCtx6 + 4 | 0; //@line 27194
   HEAP32[$8 >> 2] = $AsyncRetVal; //@line 27195
   sp = STACKTOP; //@line 27196
   return;
  }
  ___async_unwind = 0; //@line 27199
  HEAP32[$ReallocAsyncCtx6 >> 2] = 514; //@line 27200
  $8 = $ReallocAsyncCtx6 + 4 | 0; //@line 27201
  HEAP32[$8 >> 2] = $AsyncRetVal; //@line 27202
  sp = STACKTOP; //@line 27203
  return;
 }
}
function __ZN12LoRaWANStack21set_channel_data_rateEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$1 = 0, $10 = 0, $2 = 0, $6 = 0, $AsyncCtx = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 9293
 STACKTOP = STACKTOP + 32 | 0; //@line 9294
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 9294
 $vararg_buffer1 = sp + 8 | 0; //@line 9295
 $2 = sp + 12 | 0; //@line 9297
 if (!(HEAP32[$0 + 1876 >> 2] | 0)) {
  _mbed_tracef(2, 12356, 13306, sp); //@line 9302
  $$1 = -1012; //@line 9303
  STACKTOP = sp; //@line 9304
  return $$1 | 0; //@line 9304
 }
 HEAP32[$2 >> 2] = 2; //@line 9306
 $6 = $0 + 4 | 0; //@line 9307
 do {
  if (!(__ZN7LoRaMac23mib_get_request_confirmEP25loramac_mib_req_confirm_t($6, $2) | 0)) {
   HEAP32[$2 >> 2] = 21; //@line 9312
   HEAP8[$2 + 4 >> 0] = $1; //@line 9314
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 9315
   $10 = __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($6, $2) | 0; //@line 9316
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 270; //@line 9319
    HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 9321
    sp = STACKTOP; //@line 9322
    STACKTOP = sp; //@line 9323
    return 0; //@line 9323
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 9325
    $$0 = $10; //@line 9326
    break;
   }
  } else {
   _mbed_tracef(2, 12356, 13367, $vararg_buffer1); //@line 9330
   $$0 = -1003; //@line 9331
  }
 } while (0);
 $$1 = $$0; //@line 9334
 STACKTOP = sp; //@line 9335
 return $$1 | 0; //@line 9335
}
function __Z22compute_join_frame_micPKhtS0_Pj__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 4993
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4995
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 4997
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 5000
  $5 = _mbedtls_cipher_cmac_finish(23188, 24500) | 0; //@line 5001
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 518; //@line 5004
   $6 = $ReallocAsyncCtx2 + 4 | 0; //@line 5005
   HEAP32[$6 >> 2] = $2; //@line 5006
   sp = STACKTOP; //@line 5007
   return;
  }
  HEAP32[___async_retval >> 2] = $5; //@line 5011
  ___async_unwind = 0; //@line 5012
  HEAP32[$ReallocAsyncCtx2 >> 2] = 518; //@line 5013
  $6 = $ReallocAsyncCtx2 + 4 | 0; //@line 5014
  HEAP32[$6 >> 2] = $2; //@line 5015
  sp = STACKTOP; //@line 5016
  return;
 } else {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 5019
  _mbedtls_cipher_free(23188); //@line 5020
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 519; //@line 5023
   $8 = $ReallocAsyncCtx5 + 4 | 0; //@line 5024
   HEAP32[$8 >> 2] = $AsyncRetVal; //@line 5025
   sp = STACKTOP; //@line 5026
   return;
  }
  ___async_unwind = 0; //@line 5029
  HEAP32[$ReallocAsyncCtx5 >> 2] = 519; //@line 5030
  $8 = $ReallocAsyncCtx5 + 4 | 0; //@line 5031
  HEAP32[$8 >> 2] = $AsyncRetVal; //@line 5032
  sp = STACKTOP; //@line 5033
  return;
 }
}
function __ZN7LoRaMac17query_tx_possibleEhP17loramac_tx_info_t__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $14 = 0, $18 = 0, $2 = 0, $21 = 0, $24 = 0, $26 = 0, $27 = 0, $31 = 0, $37 = 0, $4 = 0, $8 = 0, $or$cond$i = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8095
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8097
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 8101
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 8103
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 8105
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 8107
 $18 = HEAP8[$0 + 36 >> 0] | 0; //@line 8111
 $21 = (HEAP32[$0 + 12 >> 2] | 0) + 369 | 0; //@line 8114
 $24 = __ZN7LoRaPHY15get_max_payloadEhb(HEAP32[$4 >> 2] | 0, HEAP8[$2 >> 0] | 0, (HEAP8[$21 >> 0] | 0) != 0) | 0; //@line 8117
 HEAP8[$8 + 1 >> 0] = $24; //@line 8119
 $26 = $24 & 255; //@line 8120
 $27 = $10 & 255; //@line 8121
 if ($27 >>> 0 > $26 >>> 0) {
  HEAP8[$8 >> 0] = $24; //@line 8124
  __ZN14LoRaMacCommand20clear_command_bufferEv($12); //@line 8125
  __ZN14LoRaMacCommand19clear_repeat_bufferEv($12); //@line 8126
  $$0 = 0; //@line 8127
 } else {
  HEAP8[$8 >> 0] = $26 - $10; //@line 8131
  $$0 = $27; //@line 8132
 }
 $31 = HEAP8[$2 >> 0] | 0; //@line 8134
 _mbed_tracef(16, 13728, 14033, $14); //@line 8135
 $37 = $$0 + ($18 & 255) | 0; //@line 8141
 $or$cond$i = $37 >>> 0 < 256 & $37 >>> 0 <= ((__ZN7LoRaPHY15get_max_payloadEhb(HEAP32[$4 >> 2] | 0, $31, (HEAP8[$21 >> 0] | 0) != 0) | 0) & 255) >>> 0; //@line 8145
 HEAP32[___async_retval >> 2] = $or$cond$i ? 0 : -1010; //@line 8148
 return;
}
function __ZN7LoRaMac22handle_rx2_timer_eventEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 16329
 STACKTOP = STACKTOP + 16 | 0; //@line 16330
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16330
 $$byval_copy = sp; //@line 16331
 $1 = sp + 8 | 0; //@line 16332
 _mbed_tracef(16, 13728, 13747, $$byval_copy); //@line 16333
 $3 = HEAP32[$0 + 1328 >> 2] | 0; //@line 16335
 HEAP32[$1 >> 2] = 293; //@line 16336
 HEAP32[$1 + 4 >> 2] = 0; //@line 16338
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 16339
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 16340
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 16340
 $4 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 16341
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 438; //@line 16344
  sp = STACKTOP; //@line 16345
  STACKTOP = sp; //@line 16346
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 16348
 if ($4 | 0) {
  STACKTOP = sp; //@line 16351
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 16353
 _mbed_assert_internal(13612, 13621, 215); //@line 16354
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 439; //@line 16357
  sp = STACKTOP; //@line 16358
  STACKTOP = sp; //@line 16359
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 16361
 STACKTOP = sp; //@line 16362
 return;
}
function __ZN7LoRaMac22handle_rx1_timer_eventEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 16166
 STACKTOP = STACKTOP + 16 | 0; //@line 16167
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16167
 $$byval_copy = sp; //@line 16168
 $1 = sp + 8 | 0; //@line 16169
 _mbed_tracef(16, 13728, 14176, $$byval_copy); //@line 16170
 $3 = HEAP32[$0 + 1328 >> 2] | 0; //@line 16172
 HEAP32[$1 >> 2] = 431; //@line 16173
 HEAP32[$1 + 4 >> 2] = 0; //@line 16175
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 16176
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 16177
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 16177
 $4 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 16178
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 432; //@line 16181
  sp = STACKTOP; //@line 16182
  STACKTOP = sp; //@line 16183
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 16185
 if ($4 | 0) {
  STACKTOP = sp; //@line 16188
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 16190
 _mbed_assert_internal(13612, 13621, 207); //@line 16191
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 433; //@line 16194
  sp = STACKTOP; //@line 16195
  STACKTOP = sp; //@line 16196
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 16198
 STACKTOP = sp; //@line 16199
 return;
}
function _wcrtomb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0;
 do {
  if (!$0) {
   $$0 = 1; //@line 14739
  } else {
   if ($1 >>> 0 < 128) {
    HEAP8[$0 >> 0] = $1; //@line 14744
    $$0 = 1; //@line 14745
    break;
   }
   if (!(HEAP32[HEAP32[(___pthread_self_910() | 0) + 188 >> 2] >> 2] | 0)) {
    if (($1 & -128 | 0) == 57216) {
     HEAP8[$0 >> 0] = $1; //@line 14758
     $$0 = 1; //@line 14759
     break;
    } else {
     HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 14763
     $$0 = -1; //@line 14764
     break;
    }
   }
   if ($1 >>> 0 < 2048) {
    HEAP8[$0 >> 0] = $1 >>> 6 | 192; //@line 14774
    HEAP8[$0 + 1 >> 0] = $1 & 63 | 128; //@line 14778
    $$0 = 2; //@line 14779
    break;
   }
   if ($1 >>> 0 < 55296 | ($1 & -8192 | 0) == 57344) {
    HEAP8[$0 >> 0] = $1 >>> 12 | 224; //@line 14791
    HEAP8[$0 + 1 >> 0] = $1 >>> 6 & 63 | 128; //@line 14797
    HEAP8[$0 + 2 >> 0] = $1 & 63 | 128; //@line 14801
    $$0 = 3; //@line 14802
    break;
   }
   if (($1 + -65536 | 0) >>> 0 < 1048576) {
    HEAP8[$0 >> 0] = $1 >>> 18 | 240; //@line 14812
    HEAP8[$0 + 1 >> 0] = $1 >>> 12 & 63 | 128; //@line 14818
    HEAP8[$0 + 2 >> 0] = $1 >>> 6 & 63 | 128; //@line 14824
    HEAP8[$0 + 3 >> 0] = $1 & 63 | 128; //@line 14828
    $$0 = 4; //@line 14829
    break;
   } else {
    HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 14833
    $$0 = -1; //@line 14834
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 14839
}
function __ZN18LoRaMacChannelPlan21remove_single_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $13 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 18776
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
  $$0 = -1002; //@line 18780
  return $$0 | 0; //@line 18781
 }
 if (((__ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0) & 255) <= ($1 & 255)) {
  $$0 = -1003; //@line 18787
  return $$0 | 0; //@line 18788
 }
 $7 = HEAP32[$0 >> 2] | 0; //@line 18790
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 64 >> 2] | 0; //@line 18793
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 18794
 $11 = FUNCTION_TABLE_iii[$10 & 31]($7, $1) | 0; //@line 18795
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 502; //@line 18798
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 18800
  sp = STACKTOP; //@line 18801
  return 0; //@line 18802
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 18804
 if (!$11) {
  $$0 = -1003; //@line 18806
  return $$0 | 0; //@line 18807
 }
 $13 = HEAP32[$0 >> 2] | 0; //@line 18809
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 18810
 __ZN7LoRaPHY18put_radio_to_sleepEv($13); //@line 18811
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 503; //@line 18814
  sp = STACKTOP; //@line 18815
  return 0; //@line 18816
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 18818
 $$0 = 0; //@line 18819
 return $$0 | 0; //@line 18820
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 8740
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8742
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8744
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8746
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 8748
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 8750
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 8752
 $13 = HEAP32[$4 >> 2] | 0; //@line 8753
 $15 = $12 + 12 | 0; //@line 8755
 HEAP32[$12 >> 2] = 446; //@line 8756
 HEAP32[$12 + 4 >> 2] = 0; //@line 8758
 HEAP32[$12 + 8 >> 2] = $6; //@line 8760
 HEAP32[$15 >> 2] = 912; //@line 8761
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(32) | 0; //@line 8762
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($13, $6 + 1016 | 0, $12); //@line 8763
 if (!___async) {
  ___async_unwind = 0; //@line 8766
 }
 HEAP32[$ReallocAsyncCtx9 >> 2] = 447; //@line 8768
 HEAP32[$ReallocAsyncCtx9 + 4 >> 2] = $4; //@line 8770
 HEAP32[$ReallocAsyncCtx9 + 8 >> 2] = $6; //@line 8772
 HEAP32[$ReallocAsyncCtx9 + 12 >> 2] = $2; //@line 8774
 HEAP32[$ReallocAsyncCtx9 + 16 >> 2] = $15; //@line 8776
 HEAP32[$ReallocAsyncCtx9 + 20 >> 2] = $8; //@line 8778
 HEAP32[$ReallocAsyncCtx9 + 24 >> 2] = $10; //@line 8780
 HEAP32[$ReallocAsyncCtx9 + 28 >> 2] = $12; //@line 8782
 sp = STACKTOP; //@line 8783
 return;
}
function __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 3370
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3372
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3374
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3376
 $7 = $2 + 12 | 0; //@line 3377
 $8 = HEAP32[$7 >> 2] | 0; //@line 3378
 if (!$8) {
  HEAP32[$4 >> 2] = 0; //@line 3381
  HEAP32[$6 + 16 >> 2] = 0; //@line 3383
  return;
 }
 $11 = HEAP32[$8 + 4 >> 2] | 0; //@line 3387
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 3388
 FUNCTION_TABLE_vii[$11 & 31]($6, $2); //@line 3389
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 574; //@line 3392
  $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 3393
  HEAP32[$12 >> 2] = $7; //@line 3394
  $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 3395
  HEAP32[$13 >> 2] = $4; //@line 3396
  $14 = $ReallocAsyncCtx2 + 12 | 0; //@line 3397
  HEAP32[$14 >> 2] = $6; //@line 3398
  sp = STACKTOP; //@line 3399
  return;
 }
 ___async_unwind = 0; //@line 3402
 HEAP32[$ReallocAsyncCtx2 >> 2] = 574; //@line 3403
 $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 3404
 HEAP32[$12 >> 2] = $7; //@line 3405
 $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 3406
 HEAP32[$13 >> 2] = $4; //@line 3407
 $14 = $ReallocAsyncCtx2 + 12 | 0; //@line 3408
 HEAP32[$14 >> 2] = $6; //@line 3409
 sp = STACKTOP; //@line 3410
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_65($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 21376
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21380
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 21382
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 21383
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 21387
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 21388
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 21389
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 175; //@line 21392
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 21393
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 21394
   sp = STACKTOP; //@line 21395
   return;
  }
  ___async_unwind = 0; //@line 21398
  HEAP32[$ReallocAsyncCtx2 >> 2] = 175; //@line 21399
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 21400
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 21401
  sp = STACKTOP; //@line 21402
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(4) | 0; //@line 21409
 _mbed_assert_internal(13612, 12396, 836); //@line 21410
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 176; //@line 21413
  sp = STACKTOP; //@line 21414
  return;
 }
 ___async_unwind = 0; //@line 21417
 HEAP32[$ReallocAsyncCtx9 >> 2] = 176; //@line 21418
 sp = STACKTOP; //@line 21419
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_83($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 22953
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22957
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 22959
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 22960
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 22964
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 22965
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 22966
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 187; //@line 22969
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 22970
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 22971
   sp = STACKTOP; //@line 22972
   return;
  }
  ___async_unwind = 0; //@line 22975
  HEAP32[$ReallocAsyncCtx2 >> 2] = 187; //@line 22976
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 22977
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 22978
  sp = STACKTOP; //@line 22979
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(4) | 0; //@line 22986
 _mbed_assert_internal(13612, 12396, 712); //@line 22987
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 188; //@line 22990
  sp = STACKTOP; //@line 22991
  return;
 }
 ___async_unwind = 0; //@line 22994
 HEAP32[$ReallocAsyncCtx10 >> 2] = 188; //@line 22995
 sp = STACKTOP; //@line 22996
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_23($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 19297
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19301
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 19303
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 19304
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 19308
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 19309
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 19310
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 163; //@line 19313
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 19314
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 19315
   sp = STACKTOP; //@line 19316
   return;
  }
  ___async_unwind = 0; //@line 19319
  HEAP32[$ReallocAsyncCtx2 >> 2] = 163; //@line 19320
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 19321
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 19322
  sp = STACKTOP; //@line 19323
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(4) | 0; //@line 19330
 _mbed_assert_internal(13612, 12396, 781); //@line 19331
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 164; //@line 19334
  sp = STACKTOP; //@line 19335
  return;
 }
 ___async_unwind = 0; //@line 19338
 HEAP32[$ReallocAsyncCtx12 >> 2] = 164; //@line 19339
 sp = STACKTOP; //@line 19340
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_22($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 19248
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19252
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 19254
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 19255
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 19259
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 19260
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 19261
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 167; //@line 19264
   $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 19265
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 19266
   sp = STACKTOP; //@line 19267
   return;
  }
  ___async_unwind = 0; //@line 19270
  HEAP32[$ReallocAsyncCtx4 >> 2] = 167; //@line 19271
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 19272
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 19273
  sp = STACKTOP; //@line 19274
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(4) | 0; //@line 19281
 _mbed_assert_internal(13612, 12396, 792); //@line 19282
 if (___async) {
  HEAP32[$ReallocAsyncCtx11 >> 2] = 168; //@line 19285
  sp = STACKTOP; //@line 19286
  return;
 }
 ___async_unwind = 0; //@line 19289
 HEAP32[$ReallocAsyncCtx11 >> 2] = 168; //@line 19290
 sp = STACKTOP; //@line 19291
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_21($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 19199
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19203
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 19205
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 19206
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 19210
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 19211
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 19212
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 171; //@line 19215
   $10 = $ReallocAsyncCtx6 + 4 | 0; //@line 19216
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 19217
   sp = STACKTOP; //@line 19218
   return;
  }
  ___async_unwind = 0; //@line 19221
  HEAP32[$ReallocAsyncCtx6 >> 2] = 171; //@line 19222
  $10 = $ReallocAsyncCtx6 + 4 | 0; //@line 19223
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 19224
  sp = STACKTOP; //@line 19225
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(4) | 0; //@line 19232
 _mbed_assert_internal(13612, 12396, 816); //@line 19233
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 172; //@line 19236
  sp = STACKTOP; //@line 19237
  return;
 }
 ___async_unwind = 0; //@line 19240
 HEAP32[$ReallocAsyncCtx10 >> 2] = 172; //@line 19241
 sp = STACKTOP; //@line 19242
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_80($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 22837
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22841
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22843
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22845
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22847
 $11 = $4 + 12 | 0; //@line 22849
 HEAP32[$11 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 22850
 $13 = HEAP8[$6 + 12 >> 0] | 0; //@line 22852
 $15 = HEAP8[$6 + 13 >> 0] | 0; //@line 22854
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 22855
 $16 = __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1_($8, $4, $13, $15) | 0; //@line 22856
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 190; //@line 22859
  $17 = $ReallocAsyncCtx5 + 4 | 0; //@line 22860
  HEAP32[$17 >> 2] = $11; //@line 22861
  $18 = $ReallocAsyncCtx5 + 8 | 0; //@line 22862
  HEAP32[$18 >> 2] = $10; //@line 22863
  sp = STACKTOP; //@line 22864
  return;
 }
 HEAP32[___async_retval >> 2] = $16; //@line 22868
 ___async_unwind = 0; //@line 22869
 HEAP32[$ReallocAsyncCtx5 >> 2] = 190; //@line 22870
 $17 = $ReallocAsyncCtx5 + 4 | 0; //@line 22871
 HEAP32[$17 >> 2] = $11; //@line 22872
 $18 = $ReallocAsyncCtx5 + 8 | 0; //@line 22873
 HEAP32[$18 >> 2] = $10; //@line 22874
 sp = STACKTOP; //@line 22875
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_82($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 22904
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22908
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 22910
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 22911
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 22915
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 22916
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 22917
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 191; //@line 22920
   $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 22921
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 22922
   sp = STACKTOP; //@line 22923
   return;
  }
  ___async_unwind = 0; //@line 22926
  HEAP32[$ReallocAsyncCtx4 >> 2] = 191; //@line 22927
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 22928
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 22929
  sp = STACKTOP; //@line 22930
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(4) | 0; //@line 22937
 _mbed_assert_internal(13612, 12396, 734); //@line 22938
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 192; //@line 22941
  sp = STACKTOP; //@line 22942
  return;
 }
 ___async_unwind = 0; //@line 22945
 HEAP32[$ReallocAsyncCtx9 >> 2] = 192; //@line 22946
 sp = STACKTOP; //@line 22947
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_149($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 27786
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27788
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27790
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27792
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 27794
 $10 = HEAP8[$0 + 17 >> 0] | 0; //@line 27796
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 27798
 $15 = $2 + 12 | 0; //@line 27802
 HEAP32[$15 >> 2] = HEAP32[HEAP32[$0 + 24 >> 2] >> 2]; //@line 27803
 $16 = $2 + 16 | 0; //@line 27804
 HEAP8[$16 >> 0] = $8; //@line 27805
 HEAP8[$2 + 17 >> 0] = $10; //@line 27807
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 27808
 $18 = _equeue_alloc($12, 20) | 0; //@line 27809
 if (!___async) {
  HEAP32[___async_retval >> 2] = $18; //@line 27813
  ___async_unwind = 0; //@line 27814
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 236; //@line 27816
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $15; //@line 27818
 HEAP32[$ReallocAsyncCtx7 + 8 >> 2] = $2; //@line 27820
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $16; //@line 27822
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $12; //@line 27824
 HEAP32[$ReallocAsyncCtx7 + 20 >> 2] = $6; //@line 27826
 HEAP32[$ReallocAsyncCtx7 + 24 >> 2] = $4; //@line 27828
 HEAP32[$ReallocAsyncCtx7 + 28 >> 2] = $15; //@line 27830
 sp = STACKTOP; //@line 27831
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 28918
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28920
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28922
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28924
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28926
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28928
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) + 4 >> 2] = 0; //@line 28932
 HEAP8[$4 >> 0] = 1; //@line 28933
 $14 = $2 + 944 | 0; //@line 28934
 HEAP8[$14 >> 0] = HEAP8[$14 >> 0] | 32; //@line 28937
 $17 = HEAP32[$6 >> 2] | 0; //@line 28938
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 28940
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($17, $2 + 996 | 0, 1); //@line 28941
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 352; //@line 28944
  $19 = $ReallocAsyncCtx5 + 4 | 0; //@line 28945
  HEAP32[$19 >> 2] = $8; //@line 28946
  $20 = $ReallocAsyncCtx5 + 8 | 0; //@line 28947
  HEAP32[$20 >> 2] = $10; //@line 28948
  sp = STACKTOP; //@line 28949
  return;
 }
 ___async_unwind = 0; //@line 28952
 HEAP32[$ReallocAsyncCtx5 >> 2] = 352; //@line 28953
 $19 = $ReallocAsyncCtx5 + 4 | 0; //@line 28954
 HEAP32[$19 >> 2] = $8; //@line 28955
 $20 = $ReallocAsyncCtx5 + 8 | 0; //@line 28956
 HEAP32[$20 >> 2] = $10; //@line 28957
 sp = STACKTOP; //@line 28958
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_218($0) {
 $0 = $0 | 0;
 var $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 3566
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3568
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3570
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3572
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 3574
 if (!$AsyncRetVal) {
  HEAP8[___async_retval >> 0] = 0; //@line 3579
  return;
 }
 dest = $2 + 4 | 0; //@line 3583
 stop = dest + 52 | 0; //@line 3583
 do {
  HEAP32[dest >> 2] = 0; //@line 3583
  dest = dest + 4 | 0; //@line 3583
 } while ((dest | 0) < (stop | 0));
 HEAP32[$2 >> 2] = $AsyncRetVal; //@line 3584
 HEAP32[$2 + 8 >> 2] = $4; //@line 3586
 HEAP32[$2 + 12 >> 2] = -1; //@line 3588
 HEAP32[$2 + 48 >> 2] = 1; //@line 3590
 $15 = HEAP32[(HEAP32[$AsyncRetVal >> 2] | 0) + 28 >> 2] | 0; //@line 3593
 $16 = HEAP32[$6 >> 2] | 0; //@line 3594
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 3595
 FUNCTION_TABLE_viiii[$15 & 7]($AsyncRetVal, $2, $16, 1); //@line 3596
 if (!___async) {
  ___async_unwind = 0; //@line 3599
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 708; //@line 3601
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 3603
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $6; //@line 3605
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $2; //@line 3607
 sp = STACKTOP; //@line 3608
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_156($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 28331
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28335
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28337
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28339
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28341
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28343
 $14 = HEAP8[$0 + 28 >> 0] & 1; //@line 28346
 $17 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 28347
 if ($17 >>> 0 < $4 >>> 0) {
  if (!(HEAP8[$6 >> 0] | 0)) {
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 28353
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($17, $8, $10, $12, $14); //@line 28354
   if (!___async) {
    ___async_unwind = 0; //@line 28357
   }
   HEAP32[$ReallocAsyncCtx3 >> 2] = 721; //@line 28359
   HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $17; //@line 28361
   HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 28363
   HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 28365
   HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 28367
   HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 28369
   HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 28371
   HEAP8[$ReallocAsyncCtx3 + 28 >> 0] = $14 & 1; //@line 28374
   sp = STACKTOP; //@line 28375
   return;
  }
 }
 return;
}
function __ZN12LoRaWANStackC2Ev__async_cb_28($0) {
 $0 = $0 | 0;
 var $$pre106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 19472
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19474
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19476
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19478
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19480
 $$pre106 = HEAP32[$2 >> 2] | 0; //@line 19481
 if (!$$pre106) {
  HEAP32[$4 >> 2] = 0; //@line 19484
  return;
 }
 $11 = HEAP32[$$pre106 + 4 >> 2] | 0; //@line 19488
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 19489
 FUNCTION_TABLE_vii[$11 & 31]($6, $8); //@line 19490
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 158; //@line 19493
  $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 19494
  HEAP32[$12 >> 2] = $2; //@line 19495
  $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 19496
  HEAP32[$13 >> 2] = $4; //@line 19497
  $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 19498
  HEAP32[$14 >> 2] = $8; //@line 19499
  sp = STACKTOP; //@line 19500
  return;
 }
 ___async_unwind = 0; //@line 19503
 HEAP32[$ReallocAsyncCtx3 >> 2] = 158; //@line 19504
 $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 19505
 HEAP32[$12 >> 2] = $2; //@line 19506
 $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 19507
 HEAP32[$13 >> 2] = $4; //@line 19508
 $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 19509
 HEAP32[$14 >> 2] = $8; //@line 19510
 sp = STACKTOP; //@line 19511
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_391($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 28368
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28370
 $4 = HEAP16[$0 + 8 >> 1] | 0; //@line 28372
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28374
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28376
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28378
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28380
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28382
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28384
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 28386
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(40) | 0; //@line 28387
 __ZN4mbed5Timer5startEv($2); //@line 28388
 if (!___async) {
  ___async_unwind = 0; //@line 28391
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 65; //@line 28393
 HEAP16[$ReallocAsyncCtx4 + 4 >> 1] = $4; //@line 28395
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $2; //@line 28397
 HEAP32[$ReallocAsyncCtx4 + 12 >> 2] = $6; //@line 28399
 HEAP32[$ReallocAsyncCtx4 + 16 >> 2] = $8; //@line 28401
 HEAP32[$ReallocAsyncCtx4 + 20 >> 2] = $10; //@line 28403
 HEAP32[$ReallocAsyncCtx4 + 24 >> 2] = $12; //@line 28405
 HEAP32[$ReallocAsyncCtx4 + 28 >> 2] = $14; //@line 28407
 HEAP32[$ReallocAsyncCtx4 + 32 >> 2] = $16; //@line 28409
 HEAP32[$ReallocAsyncCtx4 + 36 >> 2] = $18; //@line 28411
 sp = STACKTOP; //@line 28412
 return;
}
function __ZN7LoRaMac34handle_mac_state_check_timer_eventEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 13737
 STACKTOP = STACKTOP + 16 | 0; //@line 13738
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 13738
 $$byval_copy = sp + 8 | 0; //@line 13739
 $1 = sp; //@line 13740
 $3 = HEAP32[$0 + 1328 >> 2] | 0; //@line 13742
 HEAP32[$1 >> 2] = 387; //@line 13743
 HEAP32[$1 + 4 >> 2] = 0; //@line 13745
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 13746
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 13747
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 13747
 $4 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 13748
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 388; //@line 13751
  sp = STACKTOP; //@line 13752
  STACKTOP = sp; //@line 13753
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 13755
 if ($4 | 0) {
  STACKTOP = sp; //@line 13758
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 13760
 _mbed_assert_internal(13612, 13621, 185); //@line 13761
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 389; //@line 13764
  sp = STACKTOP; //@line 13765
  STACKTOP = sp; //@line 13766
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 13768
 STACKTOP = sp; //@line 13769
 return;
}
function __ZN7LoRaMac29handle_delayed_tx_timer_eventEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 16092
 STACKTOP = STACKTOP + 16 | 0; //@line 16093
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16093
 $$byval_copy = sp + 8 | 0; //@line 16094
 $1 = sp; //@line 16095
 $3 = HEAP32[$0 + 1328 >> 2] | 0; //@line 16097
 HEAP32[$1 >> 2] = 391; //@line 16098
 HEAP32[$1 + 4 >> 2] = 0; //@line 16100
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 16101
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 16102
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 16102
 $4 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 16103
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 427; //@line 16106
  sp = STACKTOP; //@line 16107
  STACKTOP = sp; //@line 16108
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 16110
 if ($4 | 0) {
  STACKTOP = sp; //@line 16113
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 16115
 _mbed_assert_internal(13612, 13621, 192); //@line 16116
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 428; //@line 16119
  sp = STACKTOP; //@line 16120
  STACKTOP = sp; //@line 16121
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 16123
 STACKTOP = sp; //@line 16124
 return;
}
function __ZN7LoRaMac18handle_ack_timeoutEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 16129
 STACKTOP = STACKTOP + 16 | 0; //@line 16130
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16130
 $$byval_copy = sp + 8 | 0; //@line 16131
 $1 = sp; //@line 16132
 $3 = HEAP32[$0 + 1328 >> 2] | 0; //@line 16134
 HEAP32[$1 >> 2] = 318; //@line 16135
 HEAP32[$1 + 4 >> 2] = 0; //@line 16137
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 16138
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 16139
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 16139
 $4 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 16140
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 429; //@line 16143
  sp = STACKTOP; //@line 16144
  STACKTOP = sp; //@line 16145
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 16147
 if ($4 | 0) {
  STACKTOP = sp; //@line 16150
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 16152
 _mbed_assert_internal(13612, 13621, 199); //@line 16153
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 430; //@line 16156
  sp = STACKTOP; //@line 16157
  STACKTOP = sp; //@line 16158
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 16160
 STACKTOP = sp; //@line 16161
 return;
}
function __ZN7LoRaMac17on_radio_rx_errorEv__async_cb_10($0) {
 $0 = $0 | 0;
 var $19 = 0, $2 = 0, $4 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 18383
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18385
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18387
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 18392
  _mbed_assert_internal(13612, 13621, 215); //@line 18393
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 371; //@line 18396
   $7 = $ReallocAsyncCtx4 + 4 | 0; //@line 18397
   HEAP32[$7 >> 2] = $2; //@line 18398
   $8 = $ReallocAsyncCtx4 + 8 | 0; //@line 18399
   HEAP32[$8 >> 2] = $4; //@line 18400
   sp = STACKTOP; //@line 18401
   return;
  }
  ___async_unwind = 0; //@line 18404
  HEAP32[$ReallocAsyncCtx4 >> 2] = 371; //@line 18405
  $7 = $ReallocAsyncCtx4 + 4 | 0; //@line 18406
  HEAP32[$7 >> 2] = $2; //@line 18407
  $8 = $ReallocAsyncCtx4 + 8 | 0; //@line 18408
  HEAP32[$8 >> 2] = $4; //@line 18409
  sp = STACKTOP; //@line 18410
  return;
 }
 HEAP32[$4 + 364 >> 2] = 2; //@line 18414
 if (HEAP8[$4 + 373 >> 0] | 0) {
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0) + 4 >> 2] = 6; //@line 18422
 }
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0) + 4 >> 2] = 6; //@line 18427
 $19 = $4 + 944 | 0; //@line 18428
 HEAP8[$19 >> 0] = HEAP8[$19 >> 0] | 32; //@line 18431
 return;
}
function __ZN7LoRaMac17handle_tx_timeoutEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 13613
 STACKTOP = STACKTOP + 16 | 0; //@line 13614
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 13614
 $$byval_copy = sp + 8 | 0; //@line 13615
 $1 = sp; //@line 13616
 $3 = HEAP32[$0 + 1328 >> 2] | 0; //@line 13618
 HEAP32[$1 >> 2] = 381; //@line 13619
 HEAP32[$1 + 4 >> 2] = 0; //@line 13621
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 13622
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 13623
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 13623
 $4 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 13624
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 382; //@line 13627
  sp = STACKTOP; //@line 13628
  STACKTOP = sp; //@line 13629
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 13631
 if ($4 | 0) {
  STACKTOP = sp; //@line 13634
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 13636
 _mbed_assert_internal(13612, 13621, 162); //@line 13637
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 383; //@line 13640
  sp = STACKTOP; //@line 13641
  STACKTOP = sp; //@line 13642
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 13644
 STACKTOP = sp; //@line 13645
 return;
}
function __ZN7LoRaMac17handle_rx_timeoutEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 13417
 STACKTOP = STACKTOP + 16 | 0; //@line 13418
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 13418
 $$byval_copy = sp + 8 | 0; //@line 13419
 $1 = sp; //@line 13420
 $3 = HEAP32[$0 + 1328 >> 2] | 0; //@line 13422
 HEAP32[$1 >> 2] = 374; //@line 13423
 HEAP32[$1 + 4 >> 2] = 0; //@line 13425
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 13426
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 13427
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 13427
 $4 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 13428
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 375; //@line 13431
  sp = STACKTOP; //@line 13432
  STACKTOP = sp; //@line 13433
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 13435
 if ($4 | 0) {
  STACKTOP = sp; //@line 13438
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 13440
 _mbed_assert_internal(13612, 13621, 155); //@line 13441
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 376; //@line 13444
  sp = STACKTOP; //@line 13445
  STACKTOP = sp; //@line 13446
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 13448
 STACKTOP = sp; //@line 13449
 return;
}
function __ZN14lorawan_timersD2Ev__async_cb_283($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $2 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 10846
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10848
 $4 = HEAP32[$2 + 48 >> 2] | 0; //@line 10850
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 10855
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 10856
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 36 | 0); //@line 10857
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 287; //@line 10860
   $9 = $ReallocAsyncCtx4 + 4 | 0; //@line 10861
   HEAP32[$9 >> 2] = $2; //@line 10862
   sp = STACKTOP; //@line 10863
   return;
  }
  ___async_unwind = 0; //@line 10866
  HEAP32[$ReallocAsyncCtx4 >> 2] = 287; //@line 10867
  $9 = $ReallocAsyncCtx4 + 4 | 0; //@line 10868
  HEAP32[$9 >> 2] = $2; //@line 10869
  sp = STACKTOP; //@line 10870
  return;
 }
 $11 = HEAP32[$2 + 28 >> 2] | 0; //@line 10874
 if (!$11) {
  return;
 }
 $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 10881
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 10882
 FUNCTION_TABLE_vi[$15 & 1023]($2 + 16 | 0); //@line 10883
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 288; //@line 10886
  sp = STACKTOP; //@line 10887
  return;
 }
 ___async_unwind = 0; //@line 10890
 HEAP32[$ReallocAsyncCtx5 >> 2] = 288; //@line 10891
 sp = STACKTOP; //@line 10892
 return;
}
function __ZN7LoRaMac15handle_rx_errorEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 13229
 STACKTOP = STACKTOP + 16 | 0; //@line 13230
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 13230
 $$byval_copy = sp + 8 | 0; //@line 13231
 $1 = sp; //@line 13232
 $3 = HEAP32[$0 + 1328 >> 2] | 0; //@line 13234
 HEAP32[$1 >> 2] = 367; //@line 13235
 HEAP32[$1 + 4 >> 2] = 0; //@line 13237
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 13238
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 13239
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 13239
 $4 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 13240
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 368; //@line 13243
  sp = STACKTOP; //@line 13244
  STACKTOP = sp; //@line 13245
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 13247
 if ($4 | 0) {
  STACKTOP = sp; //@line 13250
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 13252
 _mbed_assert_internal(13612, 13621, 148); //@line 13253
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 369; //@line 13256
  sp = STACKTOP; //@line 13257
  STACKTOP = sp; //@line 13258
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 13260
 STACKTOP = sp; //@line 13261
 return;
}
function __ZN7LoRaMac14handle_tx_doneEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 10032
 STACKTOP = STACKTOP + 16 | 0; //@line 10033
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10033
 $$byval_copy = sp + 8 | 0; //@line 10034
 $1 = sp; //@line 10035
 $3 = HEAP32[$0 + 1328 >> 2] | 0; //@line 10037
 HEAP32[$1 >> 2] = 289; //@line 10038
 HEAP32[$1 + 4 >> 2] = 0; //@line 10040
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10041
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 10042
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 10042
 $4 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 10043
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 290; //@line 10046
  sp = STACKTOP; //@line 10047
  STACKTOP = sp; //@line 10048
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 10050
 if ($4 | 0) {
  STACKTOP = sp; //@line 10053
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 10055
 _mbed_assert_internal(13612, 13621, 134); //@line 10056
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 291; //@line 10059
  sp = STACKTOP; //@line 10060
  STACKTOP = sp; //@line 10061
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 10063
 STACKTOP = sp; //@line 10064
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 8136
 $2 = HEAP8[$0 + 16 >> 0] | 0; //@line 8138
 $4 = HEAP8[$0 + 17 >> 0] | 0; //@line 8140
 $5 = $0 + 12 | 0; //@line 8141
 $6 = HEAP32[$5 >> 2] | 0; //@line 8142
 do {
  if (!$6) {
   $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 8146
   _mbed_assert_internal(15679, 15684, 1677); //@line 8147
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 244; //@line 8150
    HEAP32[$AsyncCtx2 + 4 >> 2] = $5; //@line 8152
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 8154
    HEAP8[$AsyncCtx2 + 12 >> 0] = $2; //@line 8156
    HEAP8[$AsyncCtx2 + 13 >> 0] = $4; //@line 8158
    sp = STACKTOP; //@line 8159
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 8162
    $13 = HEAP32[$5 >> 2] | 0; //@line 8164
    break;
   }
  } else {
   $13 = $6; //@line 8168
  }
 } while (0);
 $12 = HEAP32[$13 >> 2] | 0; //@line 8171
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8172
 FUNCTION_TABLE_viii[$12 & 7]($0, $2, $4); //@line 8173
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 245; //@line 8176
  sp = STACKTOP; //@line 8177
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 8180
  return;
 }
}
function __ZN12radio_eventsD2Ev__async_cb_144($0) {
 $0 = $0 | 0;
 var $11 = 0, $14 = 0, $2 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 27433
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27435
 $4 = HEAP32[$2 + 28 >> 2] | 0; //@line 27437
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 27442
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 27443
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 16 | 0); //@line 27444
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 282; //@line 27447
   $9 = $ReallocAsyncCtx6 + 4 | 0; //@line 27448
   HEAP32[$9 >> 2] = $2; //@line 27449
   sp = STACKTOP; //@line 27450
   return;
  }
  ___async_unwind = 0; //@line 27453
  HEAP32[$ReallocAsyncCtx6 >> 2] = 282; //@line 27454
  $9 = $ReallocAsyncCtx6 + 4 | 0; //@line 27455
  HEAP32[$9 >> 2] = $2; //@line 27456
  sp = STACKTOP; //@line 27457
  return;
 }
 $11 = HEAP32[$2 + 12 >> 2] | 0; //@line 27461
 if (!$11) {
  return;
 }
 $14 = HEAP32[$11 + 8 >> 2] | 0; //@line 27467
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 27468
 FUNCTION_TABLE_vi[$14 & 1023]($2); //@line 27469
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 283; //@line 27472
  sp = STACKTOP; //@line 27473
  return;
 }
 ___async_unwind = 0; //@line 27476
 HEAP32[$ReallocAsyncCtx7 >> 2] = 283; //@line 27477
 sp = STACKTOP; //@line 27478
 return;
}
function __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_336($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 15925
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15927
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15929
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15931
 if (HEAP32[___async_retval >> 2] | 0) {
  HEAP32[$4 + 364 >> 2] = 2; //@line 15937
  HEAP32[___async_retval >> 2] = $6; //@line 15939
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 15942
 _mbed_assert_internal(13612, 13621, 215); //@line 15943
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 479; //@line 15946
  $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 15947
  HEAP32[$9 >> 2] = $2; //@line 15948
  $10 = $ReallocAsyncCtx3 + 8 | 0; //@line 15949
  HEAP32[$10 >> 2] = $4; //@line 15950
  $11 = $ReallocAsyncCtx3 + 12 | 0; //@line 15951
  HEAP32[$11 >> 2] = $6; //@line 15952
  sp = STACKTOP; //@line 15953
  return;
 }
 ___async_unwind = 0; //@line 15956
 HEAP32[$ReallocAsyncCtx3 >> 2] = 479; //@line 15957
 $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 15958
 HEAP32[$9 >> 2] = $2; //@line 15959
 $10 = $ReallocAsyncCtx3 + 8 | 0; //@line 15960
 HEAP32[$10 >> 2] = $4; //@line 15961
 $11 = $ReallocAsyncCtx3 + 12 | 0; //@line 15962
 HEAP32[$11 >> 2] = $6; //@line 15963
 sp = STACKTOP; //@line 15964
 return;
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_264($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 9414
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9416
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9418
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9420
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9422
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 9424
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 9426
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 9428
 _srand(HEAP32[___async_retval >> 2] | 0); //@line 9431
 HEAP8[$2 + 368 >> 0] = 1; //@line 9433
 $17 = HEAP32[$4 >> 2] | 0; //@line 9434
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(32) | 0; //@line 9435
 __ZN7LoRaPHY25setup_public_network_modeEb($17, 1); //@line 9436
 if (!___async) {
  ___async_unwind = 0; //@line 9439
 }
 HEAP32[$ReallocAsyncCtx12 >> 2] = 441; //@line 9441
 HEAP32[$ReallocAsyncCtx12 + 4 >> 2] = $2; //@line 9443
 HEAP32[$ReallocAsyncCtx12 + 8 >> 2] = $6; //@line 9445
 HEAP32[$ReallocAsyncCtx12 + 12 >> 2] = $8; //@line 9447
 HEAP32[$ReallocAsyncCtx12 + 16 >> 2] = $10; //@line 9449
 HEAP32[$ReallocAsyncCtx12 + 20 >> 2] = $12; //@line 9451
 HEAP32[$ReallocAsyncCtx12 + 24 >> 2] = $14; //@line 9453
 HEAP32[$ReallocAsyncCtx12 + 28 >> 2] = $4; //@line 9455
 sp = STACKTOP; //@line 9456
 return;
}
function _equeue_create_inplace($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$033 = 0, $$034 = 0, $20 = 0, $22 = 0, $26 = 0, $29 = 0, $5 = 0;
 HEAP32[$0 + 12 >> 2] = $2; //@line 3254
 HEAP32[$0 + 20 >> 2] = 0; //@line 3256
 $5 = $0 + 16 | 0; //@line 3257
 HEAP32[$5 >> 2] = 0; //@line 3258
 if ($1 | 0) {
  $$034 = $1; //@line 3261
  $22 = 0; //@line 3261
  do {
   $22 = $22 + 1 | 0; //@line 3263
   $$034 = $$034 >>> 1; //@line 3264
  } while (($$034 | 0) != 0);
  HEAP32[$5 >> 2] = $22; //@line 3272
 }
 HEAP32[$0 + 24 >> 2] = 0; //@line 3275
 HEAP32[$0 + 28 >> 2] = $1; //@line 3277
 HEAP32[$0 + 32 >> 2] = $2; //@line 3279
 HEAP32[$0 >> 2] = 0; //@line 3280
 HEAP32[$0 + 4 >> 2] = _equeue_tick() | 0; //@line 3283
 HEAP8[$0 + 9 >> 0] = 0; //@line 3285
 HEAP8[$0 + 8 >> 0] = 0; //@line 3287
 HEAP8[$0 + 36 >> 0] = 0; //@line 3289
 HEAP32[$0 + 40 >> 2] = 0; //@line 3291
 HEAP32[$0 + 44 >> 2] = 0; //@line 3293
 HEAP8[$0 + 184 >> 0] = 0; //@line 3295
 $20 = _equeue_sema_create($0 + 48 | 0) | 0; //@line 3297
 if (($20 | 0) < 0) {
  $$033 = $20; //@line 3300
  return $$033 | 0; //@line 3301
 }
 $26 = _equeue_mutex_create($0 + 128 | 0) | 0; //@line 3304
 if (($26 | 0) < 0) {
  $$033 = $26; //@line 3307
  return $$033 | 0; //@line 3308
 }
 $29 = _equeue_mutex_create($0 + 156 | 0) | 0; //@line 3311
 $$033 = ($29 | 0) < 0 ? $29 : 0; //@line 3314
 return $$033 | 0; //@line 3315
}
function _fmt_u($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $26 = 0, $8 = 0, $9 = 0, $8$looptemp = 0;
 if ($1 >>> 0 > 0 | ($1 | 0) == 0 & $0 >>> 0 > 4294967295) {
  $$0914 = $2; //@line 13623
  $8 = $0; //@line 13623
  $9 = $1; //@line 13623
  while (1) {
   $10 = ___uremdi3($8 | 0, $9 | 0, 10, 0) | 0; //@line 13625
   $$0914 = $$0914 + -1 | 0; //@line 13629
   HEAP8[$$0914 >> 0] = $10 & 255 | 48; //@line 13630
   $8$looptemp = $8;
   $8 = ___udivdi3($8 | 0, $9 | 0, 10, 0) | 0; //@line 13631
   if (!($9 >>> 0 > 9 | ($9 | 0) == 9 & $8$looptemp >>> 0 > 4294967295)) {
    break;
   } else {
    $9 = tempRet0; //@line 13639
   }
  }
  $$010$lcssa$off0 = $8; //@line 13644
  $$09$lcssa = $$0914; //@line 13644
 } else {
  $$010$lcssa$off0 = $0; //@line 13646
  $$09$lcssa = $2; //@line 13646
 }
 if (!$$010$lcssa$off0) {
  $$1$lcssa = $$09$lcssa; //@line 13650
 } else {
  $$012 = $$010$lcssa$off0; //@line 13652
  $$111 = $$09$lcssa; //@line 13652
  while (1) {
   $26 = $$111 + -1 | 0; //@line 13657
   HEAP8[$26 >> 0] = ($$012 >>> 0) % 10 | 0 | 48; //@line 13658
   if ($$012 >>> 0 < 10) {
    $$1$lcssa = $26; //@line 13662
    break;
   } else {
    $$012 = ($$012 >>> 0) / 10 | 0; //@line 13665
    $$111 = $26; //@line 13665
   }
  }
 }
 return $$1$lcssa | 0; //@line 13669
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_395($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 28641
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28643
 $4 = HEAP16[$0 + 8 >> 1] | 0; //@line 28645
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28647
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28649
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28651
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28653
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28655
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28657
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(40) | 0; //@line 28658
 __ZN4mbed5TimerC2Ev($2); //@line 28659
 if (!___async) {
  ___async_unwind = 0; //@line 28662
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 64; //@line 28664
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 28666
 HEAP16[$ReallocAsyncCtx3 + 8 >> 1] = $4; //@line 28668
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 28670
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 28672
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 28674
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 28676
 HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $2; //@line 28678
 HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $14; //@line 28680
 HEAP32[$ReallocAsyncCtx3 + 36 >> 2] = $16; //@line 28682
 sp = STACKTOP; //@line 28683
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_133($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 26319
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26321
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26325
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26327
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26329
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26331
 $13 = $2 + 12 | 0; //@line 26333
 HEAP32[$13 >> 2] = HEAP32[HEAP32[$0 + 8 >> 2] >> 2]; //@line 26334
 $14 = $2 + 16 | 0; //@line 26335
 HEAP32[$14 >> 2] = $8; //@line 26336
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 26337
 $15 = _equeue_alloc($10, 20) | 0; //@line 26338
 if (!___async) {
  HEAP32[___async_retval >> 2] = $15; //@line 26342
  ___async_unwind = 0; //@line 26343
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 227; //@line 26345
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $13; //@line 26347
 HEAP32[$ReallocAsyncCtx7 + 8 >> 2] = $2; //@line 26349
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $6; //@line 26351
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $14; //@line 26353
 HEAP32[$ReallocAsyncCtx7 + 20 >> 2] = $10; //@line 26355
 HEAP32[$ReallocAsyncCtx7 + 24 >> 2] = $12; //@line 26357
 HEAP32[$ReallocAsyncCtx7 + 28 >> 2] = $13; //@line 26359
 sp = STACKTOP; //@line 26360
 return;
}
function __ZN7LoRaPHY21compute_rx_win_paramsEahjP18rx_config_params_t($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$ = 0, $$$i = 0, $$0 = 0.0, $10 = 0, $13 = 0, $16 = 0, $23 = 0, $28 = 0, $41 = 0, $5 = 0, $51 = 0, $7 = 0, $8 = 0;
 $5 = $1 << 24 >> 24; //@line 22760
 $7 = HEAP8[$0 + 29 >> 0] | 0; //@line 22762
 $8 = $7 & 255; //@line 22763
 $$ = ($5 | 0) < ($8 | 0) ? $5 : $8; //@line 22765
 $10 = $$ & 255; //@line 22766
 HEAP8[$4 + 1 >> 0] = $10; //@line 22768
 $13 = HEAP32[$0 + 80 >> 2] | 0; //@line 22770
 $16 = HEAP32[$13 + (($$ & 255) << 2) >> 2] | 0; //@line 22773
 HEAP8[$4 + 2 >> 0] = ($16 | 0) == 5e5 ? 2 : ($16 | 0) == 25e4 & 1; //@line 22779
 $23 = HEAP32[$0 + 88 >> 2] | 0; //@line 22786
 if (HEAP8[$0 + 14 >> 0] | 0 ? $7 << 24 >> 24 == $10 << 24 >> 24 : 0) {
  $$0 = 8.0 / +(HEAPU8[$23 + $8 >> 0] | 0); //@line 22792
 } else {
  $28 = $$ & 255; //@line 22794
  $$0 = +(1 << HEAPU8[$23 + $28 >> 0] | 0) / +((HEAP32[$13 + ($28 << 2) >> 2] | 0) >>> 0) * 1.0e3; //@line 22805
 }
 $41 = $2 & 255; //@line 22809
 $51 = ~~+Math_ceil(+(($$0 * +(($41 << 1) + -8 | 0) + +($3 << 1 >>> 0)) / $$0)) >>> 0; //@line 22819
 $$$i = $51 >>> 0 > $41 >>> 0 ? $51 : $41; //@line 22821
 HEAP32[$4 + 8 >> 2] = $$$i; //@line 22822
 HEAP32[$4 + 12 >> 2] = ~~+Math_ceil(+($$0 * 4.0 - $$0 * +($$$i >>> 0) * .5 + -1.0)); //@line 22831
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_423($0) {
 $0 = $0 | 0;
 var $13 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 32619
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32621
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32623
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32625
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32627
 $9 = $2 + 944 | 0; //@line 32628
 HEAP8[$9 >> 0] = 2 | HEAP8[$9 >> 0] & -7; //@line 32632
 $13 = $2 + 944 | 0; //@line 32633
 HEAP8[$13 >> 0] = HEAP8[$13 >> 0] | 32; //@line 32636
 $16 = HEAP32[$4 >> 2] | 0; //@line 32637
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 32639
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($16, $2 + 996 | 0, 1); //@line 32640
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 352; //@line 32643
  $18 = $ReallocAsyncCtx5 + 4 | 0; //@line 32644
  HEAP32[$18 >> 2] = $6; //@line 32645
  $19 = $ReallocAsyncCtx5 + 8 | 0; //@line 32646
  HEAP32[$19 >> 2] = $8; //@line 32647
  sp = STACKTOP; //@line 32648
  return;
 }
 ___async_unwind = 0; //@line 32651
 HEAP32[$ReallocAsyncCtx5 >> 2] = 352; //@line 32652
 $18 = $ReallocAsyncCtx5 + 4 | 0; //@line 32653
 HEAP32[$18 >> 2] = $6; //@line 32654
 $19 = $ReallocAsyncCtx5 + 8 | 0; //@line 32655
 HEAP32[$19 >> 2] = $8; //@line 32656
 sp = STACKTOP; //@line 32657
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_422($0) {
 $0 = $0 | 0;
 var $13 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 32574
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32576
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32578
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32580
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32582
 $9 = $2 + 944 | 0; //@line 32583
 HEAP8[$9 >> 0] = 2 | HEAP8[$9 >> 0] & -7; //@line 32587
 $13 = $2 + 944 | 0; //@line 32588
 HEAP8[$13 >> 0] = HEAP8[$13 >> 0] | 32; //@line 32591
 $16 = HEAP32[$4 >> 2] | 0; //@line 32592
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 32594
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($16, $2 + 996 | 0, 1); //@line 32595
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 352; //@line 32598
  $18 = $ReallocAsyncCtx5 + 4 | 0; //@line 32599
  HEAP32[$18 >> 2] = $6; //@line 32600
  $19 = $ReallocAsyncCtx5 + 8 | 0; //@line 32601
  HEAP32[$19 >> 2] = $8; //@line 32602
  sp = STACKTOP; //@line 32603
  return;
 }
 ___async_unwind = 0; //@line 32606
 HEAP32[$ReallocAsyncCtx5 >> 2] = 352; //@line 32607
 $18 = $ReallocAsyncCtx5 + 4 | 0; //@line 32608
 HEAP32[$18 >> 2] = $6; //@line 32609
 $19 = $ReallocAsyncCtx5 + 8 | 0; //@line 32610
 HEAP32[$19 >> 2] = $8; //@line 32611
 sp = STACKTOP; //@line 32612
 return;
}
function __ZN7LoRaPHY18dl_channel_requestEP23dl_channel_req_params_s($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$ = 0, $$09 = 0, $$1 = 0, $10 = 0, $15 = 0, $17 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 23504
 if (!(HEAP8[$0 + 17 >> 0] | 0)) {
  $$09 = 0; //@line 23509
  return $$09 | 0; //@line 23510
 }
 $7 = HEAP32[(HEAP32[$0 >> 2] | 0) + 76 >> 2] | 0; //@line 23514
 $8 = $1 + 4 | 0; //@line 23515
 $9 = HEAP32[$8 >> 2] | 0; //@line 23516
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 23517
 $10 = FUNCTION_TABLE_iii[$7 & 31]($0, $9) | 0; //@line 23518
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 548; //@line 23521
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 23523
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 23525
  HEAP32[$AsyncCtx + 12 >> 2] = $8; //@line 23527
  sp = STACKTOP; //@line 23528
  return 0; //@line 23529
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 23531
 $$ = $10 ? 3 : 2; //@line 23532
 $15 = HEAP32[$0 + 112 >> 2] | 0; //@line 23534
 $17 = HEAPU8[$1 >> 0] | 0; //@line 23536
 $$1 = (HEAP32[$15 + ($17 * 12 | 0) >> 2] | 0) == 0 ? $$ & 1 : $$; //@line 23541
 if ($$1 << 24 >> 24 != 3) {
  $$09 = $$1; //@line 23544
  return $$09 | 0; //@line 23545
 }
 HEAP32[$15 + ($17 * 12 | 0) + 4 >> 2] = HEAP32[$8 >> 2]; //@line 23549
 $$09 = 3; //@line 23550
 return $$09 | 0; //@line 23551
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_259($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 8970
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8974
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8976
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 8978
 $9 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 8979
 if (!$9) {
  HEAP32[$6 + 988 >> 2] = __ZN18LoRaWANTimeHandler16get_current_timeEv(HEAP32[$4 >> 2] | 0) | 0; //@line 8985
  HEAP32[___async_retval >> 2] = 0; //@line 8987
  return;
 }
 $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 8991
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 8992
 FUNCTION_TABLE_vi[$12 & 1023]($8); //@line 8993
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 457; //@line 8996
  $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 8997
  HEAP32[$13 >> 2] = $4; //@line 8998
  $14 = $ReallocAsyncCtx5 + 8 | 0; //@line 8999
  HEAP32[$14 >> 2] = $6; //@line 9000
  sp = STACKTOP; //@line 9001
  return;
 }
 ___async_unwind = 0; //@line 9004
 HEAP32[$ReallocAsyncCtx5 >> 2] = 457; //@line 9005
 $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 9006
 HEAP32[$13 >> 2] = $4; //@line 9007
 $14 = $ReallocAsyncCtx5 + 8 | 0; //@line 9008
 HEAP32[$14 >> 2] = $6; //@line 9009
 sp = STACKTOP; //@line 9010
 return;
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_195($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 196
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 198
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 200
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 202
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 204
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 208
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 210
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 212
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 214
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 216
 $21 = HEAP32[HEAP32[HEAP32[$0 + 20 >> 2] >> 2] >> 2] | 0; //@line 218
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 219
 FUNCTION_TABLE_vii[$21 & 31]($6, $8); //@line 220
 if (!___async) {
  ___async_unwind = 0; //@line 223
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 399; //@line 225
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 227
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 229
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $12; //@line 231
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $14; //@line 233
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $16; //@line 235
 HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $18; //@line 237
 HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $20; //@line 239
 sp = STACKTOP; //@line 240
 return;
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_194($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 145
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 147
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 149
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 151
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 153
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 155
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 157
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 159
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 161
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 163
 $21 = HEAP32[HEAP32[HEAP32[$0 + 40 >> 2] >> 2] >> 2] | 0; //@line 167
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 168
 FUNCTION_TABLE_vii[$21 & 31]($6, $8); //@line 169
 if (!___async) {
  ___async_unwind = 0; //@line 172
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 401; //@line 174
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $4; //@line 176
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $2; //@line 178
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $10; //@line 180
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $12; //@line 182
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $14; //@line 184
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $16; //@line 186
 HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $18; //@line 188
 sp = STACKTOP; //@line 189
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_301($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 11899
 $2 = HEAP8[$0 + 4 >> 0] | 0; //@line 11901
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11903
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11905
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11907
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11909
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 11911
 $14 = (HEAP8[___async_retval >> 0] | 0) == 0; //@line 11914
 $15 = HEAP32[$4 >> 2] | 0; //@line 11915
 $18 = HEAP32[(HEAP32[$15 >> 2] | 0) + 76 >> 2] | 0; //@line 11918
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 11919
 FUNCTION_TABLE_vi[$18 & 1023]($15); //@line 11920
 if (!___async) {
  ___async_unwind = 0; //@line 11923
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 533; //@line 11925
 HEAP8[$ReallocAsyncCtx3 + 4 >> 0] = $2; //@line 11927
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 11929
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 11931
 HEAP8[$ReallocAsyncCtx3 + 16 >> 0] = $14 & 1; //@line 11934
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $8; //@line 11936
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $10; //@line 11938
 HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $12; //@line 11940
 sp = STACKTOP; //@line 11941
 return;
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_219($0) {
 $0 = $0 | 0;
 var $16 = 0, $2 = 0, $4 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 3635
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3637
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3639
 if (HEAP32[___async_retval >> 2] | 0) {
  HEAP32[$4 + 364 >> 2] = 2; //@line 3645
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0) + 4 >> 2] = 2; //@line 3649
  HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0) + 4 >> 2] = 2; //@line 3653
  $16 = $4 + 944 | 0; //@line 3654
  HEAP8[$16 >> 0] = HEAP8[$16 >> 0] | 32; //@line 3657
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 3660
 _mbed_assert_internal(13612, 13621, 215); //@line 3661
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 386; //@line 3664
  $7 = $ReallocAsyncCtx3 + 4 | 0; //@line 3665
  HEAP32[$7 >> 2] = $2; //@line 3666
  $8 = $ReallocAsyncCtx3 + 8 | 0; //@line 3667
  HEAP32[$8 >> 2] = $4; //@line 3668
  sp = STACKTOP; //@line 3669
  return;
 }
 ___async_unwind = 0; //@line 3672
 HEAP32[$ReallocAsyncCtx3 >> 2] = 386; //@line 3673
 $7 = $ReallocAsyncCtx3 + 4 | 0; //@line 3674
 HEAP32[$7 >> 2] = $2; //@line 3675
 $8 = $ReallocAsyncCtx3 + 8 | 0; //@line 3676
 HEAP32[$8 >> 2] = $4; //@line 3677
 sp = STACKTOP; //@line 3678
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 30094
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30096
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30100
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30102
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30104
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30106
 if (!(HEAP8[$2 >> 0] | 0)) {
  $13 = (HEAP32[$0 + 8 >> 2] | 0) + 8 | 0; //@line 30110
  if ($13 >>> 0 < $6 >>> 0) {
   $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 30113
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($13, $8, $10, $12); //@line 30114
   if (!___async) {
    ___async_unwind = 0; //@line 30117
   }
   HEAP32[$ReallocAsyncCtx >> 2] = 725; //@line 30119
   HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 30121
   HEAP32[$ReallocAsyncCtx + 8 >> 2] = $13; //@line 30123
   HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 30125
   HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 30127
   HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 30129
   HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 30131
   sp = STACKTOP; //@line 30132
   return;
  }
 }
 return;
}
function _strlen($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$015$lcssa = 0, $$01519 = 0, $$1$lcssa = 0, $$pn = 0, $$sink = 0, $1 = 0, $10 = 0, $19 = 0, $23 = 0, $6 = 0, label = 0;
 $1 = $0; //@line 11125
 L1 : do {
  if (!($1 & 3)) {
   $$015$lcssa = $0; //@line 11130
   label = 4; //@line 11131
  } else {
   $$01519 = $0; //@line 11133
   $23 = $1; //@line 11133
   while (1) {
    if (!(HEAP8[$$01519 >> 0] | 0)) {
     $$sink = $23; //@line 11138
     break L1;
    }
    $6 = $$01519 + 1 | 0; //@line 11141
    $23 = $6; //@line 11142
    if (!($23 & 3)) {
     $$015$lcssa = $6; //@line 11146
     label = 4; //@line 11147
     break;
    } else {
     $$01519 = $6; //@line 11150
    }
   }
  }
 } while (0);
 if ((label | 0) == 4) {
  $$0 = $$015$lcssa; //@line 11156
  while (1) {
   $10 = HEAP32[$$0 >> 2] | 0; //@line 11158
   if (!(($10 & -2139062144 ^ -2139062144) & $10 + -16843009)) {
    $$0 = $$0 + 4 | 0; //@line 11166
   } else {
    break;
   }
  }
  if (!(($10 & 255) << 24 >> 24)) {
   $$1$lcssa = $$0; //@line 11174
  } else {
   $$pn = $$0; //@line 11176
   while (1) {
    $19 = $$pn + 1 | 0; //@line 11178
    if (!(HEAP8[$19 >> 0] | 0)) {
     $$1$lcssa = $19; //@line 11182
     break;
    } else {
     $$pn = $19; //@line 11185
    }
   }
  }
  $$sink = $$1$lcssa; //@line 11190
 }
 return $$sink - $1 | 0; //@line 11193
}
function __ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_176($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 30284
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30286
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30288
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30292
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30294
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 30296
 if ($AsyncRetVal | 0) {
  HEAP32[$4 >> 2] = $AsyncRetVal; //@line 30299
  _mbed_tracef(2, 13728, 14133, $4); //@line 30300
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 30303
 __ZN7LoRaMac11schedule_txEv($2) | 0; //@line 30304
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 412; //@line 30307
  $13 = $ReallocAsyncCtx3 + 4 | 0; //@line 30308
  HEAP32[$13 >> 2] = $8; //@line 30309
  $14 = $ReallocAsyncCtx3 + 8 | 0; //@line 30310
  HEAP32[$14 >> 2] = $10; //@line 30311
  sp = STACKTOP; //@line 30312
  return;
 }
 ___async_unwind = 0; //@line 30315
 HEAP32[$ReallocAsyncCtx3 >> 2] = 412; //@line 30316
 $13 = $ReallocAsyncCtx3 + 4 | 0; //@line 30317
 HEAP32[$13 >> 2] = $8; //@line 30318
 $14 = $ReallocAsyncCtx3 + 8 | 0; //@line 30319
 HEAP32[$14 >> 2] = $10; //@line 30320
 sp = STACKTOP; //@line 30321
 return;
}
function __ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $2 = 0, $4 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2517
 $2 = $0; //@line 2518
 L1 : do {
  switch ($1 | 0) {
  case 1:
   {
    $4 = HEAP32[$2 + 52 >> 2] | 0; //@line 2523
    if ($4 | 0) {
     $7 = HEAP32[$4 >> 2] | 0; //@line 2527
     $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2528
     FUNCTION_TABLE_vi[$7 & 1023]($2 + 40 | 0); //@line 2529
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 107; //@line 2532
      sp = STACKTOP; //@line 2533
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 2536
      break L1;
     }
    }
    break;
   }
  case 2:
   {
    $9 = HEAP32[$2 + 68 >> 2] | 0; //@line 2544
    if ($9 | 0) {
     $12 = HEAP32[$9 >> 2] | 0; //@line 2548
     $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2549
     FUNCTION_TABLE_vi[$12 & 1023]($2 + 56 | 0); //@line 2550
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 108; //@line 2553
      sp = STACKTOP; //@line 2554
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx2 | 0); //@line 2557
      break L1;
     }
    }
    break;
   }
  default:
   {}
  }
 } while (0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $21 = 0, $22 = 0, $28 = 0, $30 = 0;
 HEAP8[$1 + 53 >> 0] = 1; //@line 16415
 do {
  if ((HEAP32[$1 + 4 >> 2] | 0) == ($3 | 0)) {
   HEAP8[$1 + 52 >> 0] = 1; //@line 16422
   $10 = $1 + 16 | 0; //@line 16423
   $11 = HEAP32[$10 >> 2] | 0; //@line 16424
   if (!$11) {
    HEAP32[$10 >> 2] = $2; //@line 16427
    HEAP32[$1 + 24 >> 2] = $4; //@line 16429
    HEAP32[$1 + 36 >> 2] = 1; //@line 16431
    if (!(($4 | 0) == 1 ? (HEAP32[$1 + 48 >> 2] | 0) == 1 : 0)) {
     break;
    }
    HEAP8[$1 + 54 >> 0] = 1; //@line 16441
    break;
   }
   if (($11 | 0) != ($2 | 0)) {
    $30 = $1 + 36 | 0; //@line 16446
    HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + 1; //@line 16449
    HEAP8[$1 + 54 >> 0] = 1; //@line 16451
    break;
   }
   $21 = $1 + 24 | 0; //@line 16454
   $22 = HEAP32[$21 >> 2] | 0; //@line 16455
   if (($22 | 0) == 2) {
    HEAP32[$21 >> 2] = $4; //@line 16458
    $28 = $4; //@line 16459
   } else {
    $28 = $22; //@line 16461
   }
   if (($28 | 0) == 1 ? (HEAP32[$1 + 48 >> 2] | 0) == 1 : 0) {
    HEAP8[$1 + 54 >> 0] = 1; //@line 16470
   }
  }
 } while (0);
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 8210
 $2 = HEAP32[$0 + 16 >> 2] | 0; //@line 8212
 $3 = $0 + 12 | 0; //@line 8213
 $4 = HEAP32[$3 >> 2] | 0; //@line 8214
 do {
  if (!$4) {
   $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 8218
   _mbed_assert_internal(15679, 15684, 1102); //@line 8219
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 247; //@line 8222
    HEAP32[$AsyncCtx2 + 4 >> 2] = $3; //@line 8224
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 8226
    HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 8228
    sp = STACKTOP; //@line 8229
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 8232
    $10 = HEAP32[$3 >> 2] | 0; //@line 8234
    break;
   }
  } else {
   $10 = $4; //@line 8238
  }
 } while (0);
 $9 = HEAP32[$10 >> 2] | 0; //@line 8241
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8242
 FUNCTION_TABLE_vii[$9 & 31]($0, $2); //@line 8243
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 248; //@line 8246
  sp = STACKTOP; //@line 8247
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 8250
  return;
 }
}
function __ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_71($0) {
 $0 = $0 | 0;
 var $$pre13 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 22050
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22052
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22054
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22056
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22058
 $$pre13 = HEAP32[$2 >> 2] | 0; //@line 22059
 if (!$$pre13) {
  HEAP32[$4 >> 2] = 0; //@line 22062
  return;
 }
 $11 = HEAP32[$$pre13 + 4 >> 2] | 0; //@line 22066
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 22067
 FUNCTION_TABLE_vii[$11 & 31]($6, $8); //@line 22068
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 265; //@line 22071
  $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 22072
  HEAP32[$12 >> 2] = $2; //@line 22073
  $13 = $ReallocAsyncCtx6 + 8 | 0; //@line 22074
  HEAP32[$13 >> 2] = $4; //@line 22075
  sp = STACKTOP; //@line 22076
  return;
 }
 ___async_unwind = 0; //@line 22079
 HEAP32[$ReallocAsyncCtx6 >> 2] = 265; //@line 22080
 $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 22081
 HEAP32[$12 >> 2] = $2; //@line 22082
 $13 = $ReallocAsyncCtx6 + 8 | 0; //@line 22083
 HEAP32[$13 >> 2] = $4; //@line 22084
 sp = STACKTOP; //@line 22085
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_61($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 21169
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21173
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21175
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21177
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21179
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21181
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21183
 $15 = $4 + 12 | 0; //@line 21185
 HEAP32[$15 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 21186
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 21187
 $16 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 7) | 0; //@line 21188
 if (!___async) {
  HEAP32[___async_retval >> 2] = $16; //@line 21192
  ___async_unwind = 0; //@line 21193
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 178; //@line 21195
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $15; //@line 21197
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $8; //@line 21199
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $10; //@line 21201
 HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $12; //@line 21203
 HEAP32[$ReallocAsyncCtx6 + 20 >> 2] = $14; //@line 21205
 sp = STACKTOP; //@line 21206
 return;
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb_166($0) {
 $0 = $0 | 0;
 var $$0 = 0, $11 = 0, $13 = 0, $19 = 0, $2 = 0, $25 = 0, $31 = 0, $35 = 0, $4 = 0, $6 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29601
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29603
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29605
 if (HEAP32[___async_retval >> 2] | 0) {
  $$0 = -1014; //@line 29612
  $35 = ___async_retval; //@line 29613
  HEAP32[$35 >> 2] = $$0; //@line 29614
  return;
 }
 $11 = HEAP32[$2 >> 2] | 0; //@line 29617
 $13 = HEAP16[$4 >> 1] | 0; //@line 29619
 HEAP16[$4 >> 1] = $13 + 1 << 16 >> 16; //@line 29621
 HEAP8[($13 & 65535) + ($6 + 381) >> 0] = $11; //@line 29624
 $19 = HEAP16[$4 >> 1] | 0; //@line 29627
 HEAP16[$4 >> 1] = $19 + 1 << 16 >> 16; //@line 29629
 HEAP8[($19 & 65535) + ($6 + 381) >> 0] = $11 >>> 8; //@line 29632
 $25 = HEAP16[$4 >> 1] | 0; //@line 29635
 HEAP16[$4 >> 1] = $25 + 1 << 16 >> 16; //@line 29637
 HEAP8[($25 & 65535) + ($6 + 381) >> 0] = $11 >>> 16; //@line 29640
 $31 = HEAP16[$4 >> 1] | 0; //@line 29643
 HEAP16[$4 >> 1] = $31 + 1 << 16 >> 16; //@line 29645
 HEAP8[($31 & 65535) + ($6 + 381) >> 0] = $11 >>> 24; //@line 29648
 $$0 = 0; //@line 29649
 $35 = ___async_retval; //@line 29650
 HEAP32[$35 >> 2] = $$0; //@line 29651
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 21107
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21111
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21113
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21115
 $9 = $4 + 12 | 0; //@line 21117
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 21118
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 21119
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 9) | 0; //@line 21120
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 174; //@line 21123
  $11 = $ReallocAsyncCtx7 + 4 | 0; //@line 21124
  HEAP32[$11 >> 2] = $9; //@line 21125
  $12 = $ReallocAsyncCtx7 + 8 | 0; //@line 21126
  HEAP32[$12 >> 2] = $8; //@line 21127
  sp = STACKTOP; //@line 21128
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 21132
 ___async_unwind = 0; //@line 21133
 HEAP32[$ReallocAsyncCtx7 >> 2] = 174; //@line 21134
 $11 = $ReallocAsyncCtx7 + 4 | 0; //@line 21135
 HEAP32[$11 >> 2] = $9; //@line 21136
 $12 = $ReallocAsyncCtx7 + 8 | 0; //@line 21137
 HEAP32[$12 >> 2] = $8; //@line 21138
 sp = STACKTOP; //@line 21139
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_19($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 19138
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19142
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19144
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19146
 $9 = $4 + 12 | 0; //@line 19148
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 19149
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 19150
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 2) | 0; //@line 19151
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 170; //@line 19154
  $11 = $ReallocAsyncCtx7 + 4 | 0; //@line 19155
  HEAP32[$11 >> 2] = $9; //@line 19156
  $12 = $ReallocAsyncCtx7 + 8 | 0; //@line 19157
  HEAP32[$12 >> 2] = $8; //@line 19158
  sp = STACKTOP; //@line 19159
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 19163
 ___async_unwind = 0; //@line 19164
 HEAP32[$ReallocAsyncCtx7 >> 2] = 170; //@line 19165
 $11 = $ReallocAsyncCtx7 + 4 | 0; //@line 19166
 HEAP32[$11 >> 2] = $9; //@line 19167
 $12 = $ReallocAsyncCtx7 + 8 | 0; //@line 19168
 HEAP32[$12 >> 2] = $8; //@line 19169
 sp = STACKTOP; //@line 19170
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_17($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 19077
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19081
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19083
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19085
 $9 = $4 + 12 | 0; //@line 19087
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 19088
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(12) | 0; //@line 19089
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 4) | 0; //@line 19090
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 166; //@line 19093
  $11 = $ReallocAsyncCtx8 + 4 | 0; //@line 19094
  HEAP32[$11 >> 2] = $9; //@line 19095
  $12 = $ReallocAsyncCtx8 + 8 | 0; //@line 19096
  HEAP32[$12 >> 2] = $8; //@line 19097
  sp = STACKTOP; //@line 19098
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 19102
 ___async_unwind = 0; //@line 19103
 HEAP32[$ReallocAsyncCtx8 >> 2] = 166; //@line 19104
 $11 = $ReallocAsyncCtx8 + 4 | 0; //@line 19105
 HEAP32[$11 >> 2] = $9; //@line 19106
 $12 = $ReallocAsyncCtx8 + 8 | 0; //@line 19107
 HEAP32[$12 >> 2] = $8; //@line 19108
 sp = STACKTOP; //@line 19109
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 22775
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22779
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22781
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22783
 $9 = $4 + 12 | 0; //@line 22785
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 22786
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 22787
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 10) | 0; //@line 22788
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 186; //@line 22791
  $11 = $ReallocAsyncCtx6 + 4 | 0; //@line 22792
  HEAP32[$11 >> 2] = $9; //@line 22793
  $12 = $ReallocAsyncCtx6 + 8 | 0; //@line 22794
  HEAP32[$12 >> 2] = $8; //@line 22795
  sp = STACKTOP; //@line 22796
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 22800
 ___async_unwind = 0; //@line 22801
 HEAP32[$ReallocAsyncCtx6 >> 2] = 186; //@line 22802
 $11 = $ReallocAsyncCtx6 + 4 | 0; //@line 22803
 HEAP32[$11 >> 2] = $9; //@line 22804
 $12 = $ReallocAsyncCtx6 + 8 | 0; //@line 22805
 HEAP32[$12 >> 2] = $8; //@line 22806
 sp = STACKTOP; //@line 22807
 return;
}
function _mbedtls_cipher_setup($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 2493
 if (($0 | 0) == 0 | ($1 | 0) == 0) {
  $$0 = -24832; //@line 2498
  return $$0 | 0; //@line 2499
 }
 dest = $0; //@line 2501
 stop = dest + 68 | 0; //@line 2501
 do {
  HEAP32[dest >> 2] = 0; //@line 2501
  dest = dest + 4 | 0; //@line 2501
 } while ((dest | 0) < (stop | 0));
 $7 = HEAP32[(HEAP32[$1 + 28 >> 2] | 0) + 20 >> 2] | 0; //@line 2505
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 2506
 $8 = FUNCTION_TABLE_i[$7 & 7]() | 0; //@line 2507
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 587; //@line 2510
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2512
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 2514
  sp = STACKTOP; //@line 2515
  return 0; //@line 2516
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2518
 HEAP32[$0 + 60 >> 2] = $8; //@line 2520
 if (!$8) {
  $$0 = -24960; //@line 2523
  return $$0 | 0; //@line 2524
 }
 HEAP32[$0 >> 2] = $1; //@line 2526
 if ((HEAP32[$1 + 4 >> 2] | 0) != 2) {
  $$0 = 0; //@line 2531
  return $$0 | 0; //@line 2532
 }
 HEAP32[$0 + 12 >> 2] = 4; //@line 2535
 HEAP32[$0 + 16 >> 2] = 14; //@line 2537
 $$0 = 0; //@line 2538
 return $$0 | 0; //@line 2539
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 19016
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19020
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19022
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19024
 $9 = $4 + 12 | 0; //@line 19026
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 19027
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 19028
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 3) | 0; //@line 19029
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 162; //@line 19032
  $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 19033
  HEAP32[$11 >> 2] = $9; //@line 19034
  $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 19035
  HEAP32[$12 >> 2] = $8; //@line 19036
  sp = STACKTOP; //@line 19037
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 19041
 ___async_unwind = 0; //@line 19042
 HEAP32[$ReallocAsyncCtx9 >> 2] = 162; //@line 19043
 $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 19044
 HEAP32[$11 >> 2] = $9; //@line 19045
 $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 19046
 HEAP32[$12 >> 2] = $8; //@line 19047
 sp = STACKTOP; //@line 19048
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_102($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 23745
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23749
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23751
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23753
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23755
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23757
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23759
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 23761
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 23763
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 1; //@line 23764
 HEAP8[$4 >> 0] = 1; //@line 23765
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(24) | 0; //@line 23766
 __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($6, $8) | 0; //@line 23767
 if (!___async) {
  ___async_unwind = 0; //@line 23770
 }
 HEAP32[$ReallocAsyncCtx13 >> 2] = 211; //@line 23772
 HEAP32[$ReallocAsyncCtx13 + 4 >> 2] = $10; //@line 23774
 HEAP32[$ReallocAsyncCtx13 + 8 >> 2] = $12; //@line 23776
 HEAP32[$ReallocAsyncCtx13 + 12 >> 2] = $14; //@line 23778
 HEAP32[$ReallocAsyncCtx13 + 16 >> 2] = $16; //@line 23780
 HEAP32[$ReallocAsyncCtx13 + 20 >> 2] = $18; //@line 23782
 sp = STACKTOP; //@line 23783
 return;
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_321($0) {
 $0 = $0 | 0;
 var $$pre$i$i66 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 14817
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14823
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14825
 $$pre$i$i66 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 14826
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = $$pre$i$i66; //@line 14828
 if (!$$pre$i$i66) {
  HEAP32[___async_retval >> 2] = $8; //@line 14832
  return;
 }
 $12 = HEAP32[$$pre$i$i66 + 8 >> 2] | 0; //@line 14836
 $ReallocAsyncCtx15 = _emscripten_realloc_async_context(12) | 0; //@line 14837
 FUNCTION_TABLE_vi[$12 & 1023]($6); //@line 14838
 if (___async) {
  HEAP32[$ReallocAsyncCtx15 >> 2] = 498; //@line 14841
  $13 = $ReallocAsyncCtx15 + 4 | 0; //@line 14842
  HEAP32[$13 >> 2] = $6; //@line 14843
  $14 = $ReallocAsyncCtx15 + 8 | 0; //@line 14844
  HEAP32[$14 >> 2] = $8; //@line 14845
  sp = STACKTOP; //@line 14846
  return;
 }
 ___async_unwind = 0; //@line 14849
 HEAP32[$ReallocAsyncCtx15 >> 2] = 498; //@line 14850
 $13 = $ReallocAsyncCtx15 + 4 | 0; //@line 14851
 HEAP32[$13 >> 2] = $6; //@line 14852
 $14 = $ReallocAsyncCtx15 + 8 | 0; //@line 14853
 HEAP32[$14 >> 2] = $8; //@line 14854
 sp = STACKTOP; //@line 14855
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_432($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 34060
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34064
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 34066
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 34068
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 34070
 $11 = $4 + 944 | 0; //@line 34071
 HEAP8[$11 >> 0] = HEAP8[$11 >> 0] | 34; //@line 34074
 $14 = HEAP32[$6 >> 2] | 0; //@line 34075
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(12) | 0; //@line 34077
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($14, $4 + 996 | 0, 1); //@line 34078
 if (___async) {
  HEAP32[$ReallocAsyncCtx13 >> 2] = 321; //@line 34081
  $16 = $ReallocAsyncCtx13 + 4 | 0; //@line 34082
  HEAP32[$16 >> 2] = $8; //@line 34083
  $17 = $ReallocAsyncCtx13 + 8 | 0; //@line 34084
  HEAP32[$17 >> 2] = $10; //@line 34085
  sp = STACKTOP; //@line 34086
  return;
 }
 ___async_unwind = 0; //@line 34089
 HEAP32[$ReallocAsyncCtx13 >> 2] = 321; //@line 34090
 $16 = $ReallocAsyncCtx13 + 4 | 0; //@line 34091
 HEAP32[$16 >> 2] = $8; //@line 34092
 $17 = $ReallocAsyncCtx13 + 8 | 0; //@line 34093
 HEAP32[$17 >> 2] = $10; //@line 34094
 sp = STACKTOP; //@line 34095
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_431($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 34018
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34022
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 34024
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 34026
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 34028
 $11 = $4 + 944 | 0; //@line 34029
 HEAP8[$11 >> 0] = HEAP8[$11 >> 0] | 34; //@line 34032
 $14 = HEAP32[$6 >> 2] | 0; //@line 34033
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(12) | 0; //@line 34035
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($14, $4 + 996 | 0, 1); //@line 34036
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 326; //@line 34039
  $16 = $ReallocAsyncCtx12 + 4 | 0; //@line 34040
  HEAP32[$16 >> 2] = $8; //@line 34041
  $17 = $ReallocAsyncCtx12 + 8 | 0; //@line 34042
  HEAP32[$17 >> 2] = $10; //@line 34043
  sp = STACKTOP; //@line 34044
  return;
 }
 ___async_unwind = 0; //@line 34047
 HEAP32[$ReallocAsyncCtx12 >> 2] = 326; //@line 34048
 $16 = $ReallocAsyncCtx12 + 4 | 0; //@line 34049
 HEAP32[$16 >> 2] = $8; //@line 34050
 $17 = $ReallocAsyncCtx12 + 8 | 0; //@line 34051
 HEAP32[$17 >> 2] = $10; //@line 34052
 sp = STACKTOP; //@line 34053
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_430($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 33976
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33980
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33982
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33984
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 33986
 $11 = $4 + 944 | 0; //@line 33987
 HEAP8[$11 >> 0] = HEAP8[$11 >> 0] | 34; //@line 33990
 $14 = HEAP32[$6 >> 2] | 0; //@line 33991
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(12) | 0; //@line 33993
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($14, $4 + 996 | 0, 1); //@line 33994
 if (___async) {
  HEAP32[$ReallocAsyncCtx11 >> 2] = 329; //@line 33997
  $16 = $ReallocAsyncCtx11 + 4 | 0; //@line 33998
  HEAP32[$16 >> 2] = $8; //@line 33999
  $17 = $ReallocAsyncCtx11 + 8 | 0; //@line 34000
  HEAP32[$17 >> 2] = $10; //@line 34001
  sp = STACKTOP; //@line 34002
  return;
 }
 ___async_unwind = 0; //@line 34005
 HEAP32[$ReallocAsyncCtx11 >> 2] = 329; //@line 34006
 $16 = $ReallocAsyncCtx11 + 4 | 0; //@line 34007
 HEAP32[$16 >> 2] = $8; //@line 34008
 $17 = $ReallocAsyncCtx11 + 8 | 0; //@line 34009
 HEAP32[$17 >> 2] = $10; //@line 34010
 sp = STACKTOP; //@line 34011
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_429($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 33934
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33938
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33940
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33942
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 33944
 $11 = $4 + 944 | 0; //@line 33945
 HEAP8[$11 >> 0] = HEAP8[$11 >> 0] | 34; //@line 33948
 $14 = HEAP32[$6 >> 2] | 0; //@line 33949
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(12) | 0; //@line 33951
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($14, $4 + 996 | 0, 1); //@line 33952
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 334; //@line 33955
  $16 = $ReallocAsyncCtx10 + 4 | 0; //@line 33956
  HEAP32[$16 >> 2] = $8; //@line 33957
  $17 = $ReallocAsyncCtx10 + 8 | 0; //@line 33958
  HEAP32[$17 >> 2] = $10; //@line 33959
  sp = STACKTOP; //@line 33960
  return;
 }
 ___async_unwind = 0; //@line 33963
 HEAP32[$ReallocAsyncCtx10 >> 2] = 334; //@line 33964
 $16 = $ReallocAsyncCtx10 + 4 | 0; //@line 33965
 HEAP32[$16 >> 2] = $8; //@line 33966
 $17 = $ReallocAsyncCtx10 + 8 | 0; //@line 33967
 HEAP32[$17 >> 2] = $10; //@line 33968
 sp = STACKTOP; //@line 33969
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 11854
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11856
 $4 = HEAP8[$0 + 8 >> 0] | 0; //@line 11858
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11860
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11862
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11864
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 11866
 $13 = HEAP32[$2 >> 2] | 0; //@line 11867
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 40 >> 2] | 0; //@line 11870
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 11871
 $17 = FUNCTION_TABLE_ii[$16 & 15]($13) | 0; //@line 11872
 if (!___async) {
  HEAP8[___async_retval >> 0] = $17; //@line 11876
  ___async_unwind = 0; //@line 11877
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 532; //@line 11879
 HEAP8[$ReallocAsyncCtx2 + 4 >> 0] = $4; //@line 11881
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $2; //@line 11883
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 11885
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 11887
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 11889
 HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 11891
 sp = STACKTOP; //@line 11892
 return;
}
function __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_385($0) {
 $0 = $0 | 0;
 var $$pre$i$i4 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 28054
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28060
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28062
 $$pre$i$i4 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 28063
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = $$pre$i$i4; //@line 28064
 if (!$$pre$i$i4) {
  _gpio_irq_set($8 + 28 | 0, 2, 0); //@line 28068
  return;
 }
 $12 = HEAP32[$$pre$i$i4 + 8 >> 2] | 0; //@line 28073
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 28074
 FUNCTION_TABLE_vi[$12 & 1023]($6); //@line 28075
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 113; //@line 28078
  $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 28079
  HEAP32[$13 >> 2] = $6; //@line 28080
  $14 = $ReallocAsyncCtx5 + 8 | 0; //@line 28081
  HEAP32[$14 >> 2] = $8; //@line 28082
  sp = STACKTOP; //@line 28083
  return;
 }
 ___async_unwind = 0; //@line 28086
 HEAP32[$ReallocAsyncCtx5 >> 2] = 113; //@line 28087
 $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 28088
 HEAP32[$13 >> 2] = $6; //@line 28089
 $14 = $ReallocAsyncCtx5 + 8 | 0; //@line 28090
 HEAP32[$14 >> 2] = $8; //@line 28091
 sp = STACKTOP; //@line 28092
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_428($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 33892
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33896
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33898
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33900
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 33902
 $11 = $4 + 944 | 0; //@line 33903
 HEAP8[$11 >> 0] = HEAP8[$11 >> 0] | 34; //@line 33906
 $14 = HEAP32[$6 >> 2] | 0; //@line 33907
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 33909
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($14, $4 + 996 | 0, 1); //@line 33910
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 337; //@line 33913
  $16 = $ReallocAsyncCtx9 + 4 | 0; //@line 33914
  HEAP32[$16 >> 2] = $8; //@line 33915
  $17 = $ReallocAsyncCtx9 + 8 | 0; //@line 33916
  HEAP32[$17 >> 2] = $10; //@line 33917
  sp = STACKTOP; //@line 33918
  return;
 }
 ___async_unwind = 0; //@line 33921
 HEAP32[$ReallocAsyncCtx9 >> 2] = 337; //@line 33922
 $16 = $ReallocAsyncCtx9 + 4 | 0; //@line 33923
 HEAP32[$16 >> 2] = $8; //@line 33924
 $17 = $ReallocAsyncCtx9 + 8 | 0; //@line 33925
 HEAP32[$17 >> 2] = $10; //@line 33926
 sp = STACKTOP; //@line 33927
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_427($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 33850
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33854
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33856
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33858
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 33860
 $11 = $4 + 944 | 0; //@line 33861
 HEAP8[$11 >> 0] = HEAP8[$11 >> 0] | 34; //@line 33864
 $14 = HEAP32[$6 >> 2] | 0; //@line 33865
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(12) | 0; //@line 33867
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($14, $4 + 996 | 0, 1); //@line 33868
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 340; //@line 33871
  $16 = $ReallocAsyncCtx8 + 4 | 0; //@line 33872
  HEAP32[$16 >> 2] = $8; //@line 33873
  $17 = $ReallocAsyncCtx8 + 8 | 0; //@line 33874
  HEAP32[$17 >> 2] = $10; //@line 33875
  sp = STACKTOP; //@line 33876
  return;
 }
 ___async_unwind = 0; //@line 33879
 HEAP32[$ReallocAsyncCtx8 >> 2] = 340; //@line 33880
 $16 = $ReallocAsyncCtx8 + 4 | 0; //@line 33881
 HEAP32[$16 >> 2] = $8; //@line 33882
 $17 = $ReallocAsyncCtx8 + 8 | 0; //@line 33883
 HEAP32[$17 >> 2] = $10; //@line 33884
 sp = STACKTOP; //@line 33885
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_426($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 33808
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33812
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33814
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33816
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 33818
 $11 = $4 + 944 | 0; //@line 33819
 HEAP8[$11 >> 0] = HEAP8[$11 >> 0] | 34; //@line 33822
 $14 = HEAP32[$6 >> 2] | 0; //@line 33823
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 33825
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($14, $4 + 996 | 0, 1); //@line 33826
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 348; //@line 33829
  $16 = $ReallocAsyncCtx7 + 4 | 0; //@line 33830
  HEAP32[$16 >> 2] = $8; //@line 33831
  $17 = $ReallocAsyncCtx7 + 8 | 0; //@line 33832
  HEAP32[$17 >> 2] = $10; //@line 33833
  sp = STACKTOP; //@line 33834
  return;
 }
 ___async_unwind = 0; //@line 33837
 HEAP32[$ReallocAsyncCtx7 >> 2] = 348; //@line 33838
 $16 = $ReallocAsyncCtx7 + 4 | 0; //@line 33839
 HEAP32[$16 >> 2] = $8; //@line 33840
 $17 = $ReallocAsyncCtx7 + 8 | 0; //@line 33841
 HEAP32[$17 >> 2] = $10; //@line 33842
 sp = STACKTOP; //@line 33843
 return;
}
function _puts($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $12 = 0, $17 = 0, $19 = 0, $22 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15909
 $1 = HEAP32[2586] | 0; //@line 15910
 if ((HEAP32[$1 + 76 >> 2] | 0) > -1) {
  $19 = ___lockfile($1) | 0; //@line 15916
 } else {
  $19 = 0; //@line 15918
 }
 do {
  if ((_fputs($0, $1) | 0) < 0) {
   $22 = -1; //@line 15924
  } else {
   if ((HEAP8[$1 + 75 >> 0] | 0) != 10) {
    $11 = $1 + 20 | 0; //@line 15930
    $12 = HEAP32[$11 >> 2] | 0; //@line 15931
    if ($12 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$11 >> 2] = $12 + 1; //@line 15937
     HEAP8[$12 >> 0] = 10; //@line 15938
     $22 = 0; //@line 15939
     break;
    }
   }
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 15943
   $17 = ___overflow($1, 10) | 0; //@line 15944
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 702; //@line 15947
    HEAP32[$AsyncCtx + 4 >> 2] = $19; //@line 15949
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 15951
    sp = STACKTOP; //@line 15952
    return 0; //@line 15953
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 15955
    $22 = $17 >> 31; //@line 15957
    break;
   }
  }
 } while (0);
 if ($19 | 0) {
  ___unlockfile($1); //@line 15964
 }
 return $22 | 0; //@line 15966
}
function __ZN4mbed11InterruptInD0Ev($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 2448
 HEAP32[$0 >> 2] = 668; //@line 2449
 _gpio_irq_free($0 + 28 | 0); //@line 2451
 $3 = HEAP32[$0 + 68 >> 2] | 0; //@line 2453
 do {
  if ($3 | 0) {
   $7 = HEAP32[$3 + 8 >> 2] | 0; //@line 2459
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2460
   FUNCTION_TABLE_vi[$7 & 1023]($0 + 56 | 0); //@line 2461
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 105; //@line 2464
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2466
    sp = STACKTOP; //@line 2467
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 2470
    break;
   }
  }
 } while (0);
 $10 = HEAP32[$0 + 52 >> 2] | 0; //@line 2476
 if (!$10) {
  __ZdlPv($0); //@line 2479
  return;
 }
 $14 = HEAP32[$10 + 8 >> 2] | 0; //@line 2484
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2485
 FUNCTION_TABLE_vi[$14 & 1023]($0 + 40 | 0); //@line 2486
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 106; //@line 2489
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 2491
  sp = STACKTOP; //@line 2492
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2495
 __ZdlPv($0); //@line 2496
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_97($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx21 = 0, sp = 0;
 sp = STACKTOP; //@line 23410
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23414
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23416
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23418
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23420
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23422
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23424
 $15 = $4 + 12 | 0; //@line 23426
 HEAP32[$15 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 23427
 $ReallocAsyncCtx21 = _emscripten_realloc_async_context(24) | 0; //@line 23428
 $16 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 6) | 0; //@line 23429
 if (!___async) {
  HEAP32[___async_retval >> 2] = $16; //@line 23433
  ___async_unwind = 0; //@line 23434
 }
 HEAP32[$ReallocAsyncCtx21 >> 2] = 222; //@line 23436
 HEAP32[$ReallocAsyncCtx21 + 4 >> 2] = $15; //@line 23438
 HEAP32[$ReallocAsyncCtx21 + 8 >> 2] = $8; //@line 23440
 HEAP32[$ReallocAsyncCtx21 + 12 >> 2] = $10; //@line 23442
 HEAP32[$ReallocAsyncCtx21 + 16 >> 2] = $12; //@line 23444
 HEAP32[$ReallocAsyncCtx21 + 20 >> 2] = $14; //@line 23446
 sp = STACKTOP; //@line 23447
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_402($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 31059
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31061
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31063
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31065
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31067
 $9 = $2 + 944 | 0; //@line 31068
 HEAP8[$9 >> 0] = HEAP8[$9 >> 0] | 32; //@line 31071
 $12 = HEAP32[$4 >> 2] | 0; //@line 31072
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 31074
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($12, $2 + 996 | 0, 1); //@line 31075
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 352; //@line 31078
  $14 = $ReallocAsyncCtx5 + 4 | 0; //@line 31079
  HEAP32[$14 >> 2] = $6; //@line 31080
  $15 = $ReallocAsyncCtx5 + 8 | 0; //@line 31081
  HEAP32[$15 >> 2] = $8; //@line 31082
  sp = STACKTOP; //@line 31083
  return;
 }
 ___async_unwind = 0; //@line 31086
 HEAP32[$ReallocAsyncCtx5 >> 2] = 352; //@line 31087
 $14 = $ReallocAsyncCtx5 + 4 | 0; //@line 31088
 HEAP32[$14 >> 2] = $6; //@line 31089
 $15 = $ReallocAsyncCtx5 + 8 | 0; //@line 31090
 HEAP32[$15 >> 2] = $8; //@line 31091
 sp = STACKTOP; //@line 31092
 return;
}
function _mbed_vtracef__async_cb_125($0) {
 $0 = $0 | 0;
 var $$18 = 0, $10 = 0, $12 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 25744
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25746
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25748
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25750
 $10 = HEAP8[$0 + 20 >> 0] & 1; //@line 25755
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25757
 HEAP32[$2 >> 2] = HEAP32[___async_retval >> 2]; //@line 25762
 $16 = _snprintf($4, $6, 12240, $2) | 0; //@line 25763
 $$18 = ($16 | 0) >= ($6 | 0) ? 0 : $16; //@line 25765
 $19 = $4 + $$18 | 0; //@line 25767
 $20 = $6 - $$18 | 0; //@line 25768
 if (($$18 | 0) > 0) {
  if (!(($$18 | 0) < 1 | ($20 | 0) < 1 | $10 ^ 1)) {
   _snprintf($19, $20, 12318, $12) | 0; //@line 25776
  }
 }
 $23 = HEAP32[190] | 0; //@line 25779
 $24 = HEAP32[183] | 0; //@line 25780
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 25781
 FUNCTION_TABLE_vi[$23 & 1023]($24); //@line 25782
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 148; //@line 25785
  sp = STACKTOP; //@line 25786
  return;
 }
 ___async_unwind = 0; //@line 25789
 HEAP32[$ReallocAsyncCtx7 >> 2] = 148; //@line 25790
 sp = STACKTOP; //@line 25791
 return;
}
function __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 11186
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11188
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11190
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11192
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11194
 HEAP32[$4 + 12 >> 2] = HEAP32[$2 >> 2]; //@line 11197
 _equeue_event_dtor($4, 302); //@line 11198
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 11199
 $10 = _equeue_post($6, 303, $4) | 0; //@line 11200
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 304; //@line 11203
  $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 11204
  HEAP32[$11 >> 2] = $2; //@line 11205
  $12 = $ReallocAsyncCtx3 + 8 | 0; //@line 11206
  HEAP32[$12 >> 2] = $8; //@line 11207
  sp = STACKTOP; //@line 11208
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 11212
 ___async_unwind = 0; //@line 11213
 HEAP32[$ReallocAsyncCtx3 >> 2] = 304; //@line 11214
 $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 11215
 HEAP32[$11 >> 2] = $2; //@line 11216
 $12 = $ReallocAsyncCtx3 + 8 | 0; //@line 11217
 HEAP32[$12 >> 2] = $8; //@line 11218
 sp = STACKTOP; //@line 11219
 return;
}
function __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$pre$phiZ2D = 0, $26 = 0;
 if ($2) {
  HEAP8[$1 + 15 >> 0] = HEAP8[$0 + 12 >> 0] | 0; //@line 24797
  HEAP32[$1 + 748 >> 2] = HEAPU16[$0 + 36 >> 1]; //@line 24802
  HEAP32[$1 + 752 >> 2] = HEAPU16[$0 + 38 >> 1]; //@line 24807
  HEAP32[$1 + 756 >> 2] = HEAPU16[$0 + 40 >> 1]; //@line 24812
  HEAP32[$1 + 760 >> 2] = HEAPU16[$0 + 42 >> 1]; //@line 24817
  HEAP32[$1 + 764 >> 2] = HEAPU16[$0 + 44 >> 1]; //@line 24822
  $26 = $0 + 132 | 0; //@line 24823
  HEAP8[$1 + 781 >> 0] = (HEAPU8[$26 >> 0] | 0) >>> 1 & 1; //@line 24828
  $$pre$phiZ2D = $26; //@line 24829
 } else {
  $$pre$phiZ2D = $0 + 132 | 0; //@line 24832
 }
 HEAP8[$1 + 736 >> 0] = HEAP8[$0 + 23 >> 0] | 0; //@line 24837
 HEAP8[$1 + 737 >> 0] = HEAP8[$0 + 30 >> 0] | 0; //@line 24841
 HEAP8[$1 + 769 >> 0] = HEAP8[$0 + 34 >> 0] | 0; //@line 24845
 HEAP32[$1 + 772 >> 2] = HEAP32[$0 + 68 >> 2]; //@line 24849
 HEAP8[$1 + 776 >> 0] = HEAP8[$0 + 64 >> 0] | 0; //@line 24853
 HEAP8[$1 + 780 >> 0] = HEAP8[$$pre$phiZ2D >> 0] & 1; //@line 24857
 HEAP32[$1 + 784 >> 2] = HEAP32[$0 + 56 >> 2]; //@line 24861
 HEAP32[$1 + 788 >> 2] = HEAP32[$0 + 60 >> 2]; //@line 24865
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_334($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 15777
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15781
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15783
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15785
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = HEAP32[___async_retval >> 2]; //@line 15788
 $10 = HEAP32[$4 >> 2] | 0; //@line 15789
 $13 = HEAP32[(HEAP32[$10 >> 2] | 0) + 76 >> 2] | 0; //@line 15792
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 15793
 FUNCTION_TABLE_vi[$13 & 1023]($10); //@line 15794
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 546; //@line 15797
  $14 = $ReallocAsyncCtx7 + 4 | 0; //@line 15798
  HEAP32[$14 >> 2] = $6; //@line 15799
  $15 = $ReallocAsyncCtx7 + 8 | 0; //@line 15800
  HEAP32[$15 >> 2] = $8; //@line 15801
  sp = STACKTOP; //@line 15802
  return;
 }
 ___async_unwind = 0; //@line 15805
 HEAP32[$ReallocAsyncCtx7 >> 2] = 546; //@line 15806
 $14 = $ReallocAsyncCtx7 + 4 | 0; //@line 15807
 HEAP32[$14 >> 2] = $6; //@line 15808
 $15 = $ReallocAsyncCtx7 + 8 | 0; //@line 15809
 HEAP32[$15 >> 2] = $8; //@line 15810
 sp = STACKTOP; //@line 15811
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_174($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 30142
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30148
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30150
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30152
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30154
 if ((HEAP32[$0 + 4 >> 2] | 0) <= 1) {
  return;
 }
 $14 = (HEAP32[$0 + 8 >> 2] | 0) + 24 | 0; //@line 30159
 $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 30161
 __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($14, $6, $8, $10); //@line 30162
 if (!___async) {
  ___async_unwind = 0; //@line 30165
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 725; //@line 30167
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $6 + 54; //@line 30169
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $14; //@line 30171
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $12; //@line 30173
 HEAP32[$ReallocAsyncCtx + 16 >> 2] = $6; //@line 30175
 HEAP32[$ReallocAsyncCtx + 20 >> 2] = $8; //@line 30177
 HEAP32[$ReallocAsyncCtx + 24 >> 2] = $10; //@line 30179
 sp = STACKTOP; //@line 30180
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_332($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $17 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 15680
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15682
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15686
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15688
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15690
 $11 = HEAP32[$2 >> 2] | 0; //@line 15691
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 44 >> 2] | 0; //@line 15694
 $15 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 15695
 $17 = HEAP16[$15 >> 1] & 255; //@line 15697
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 15698
 FUNCTION_TABLE_viii[$14 & 7]($11, 1, $17); //@line 15699
 if (!___async) {
  ___async_unwind = 0; //@line 15702
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 544; //@line 15704
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 15706
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $15; //@line 15708
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = 1; //@line 15710
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $6; //@line 15712
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $8; //@line 15714
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $10; //@line 15716
 sp = STACKTOP; //@line 15717
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_331($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $17 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 15636
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15638
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15642
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15644
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15646
 $11 = HEAP32[$2 >> 2] | 0; //@line 15647
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 44 >> 2] | 0; //@line 15650
 $15 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 15651
 $17 = HEAP16[$15 >> 1] & 255; //@line 15653
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 15654
 FUNCTION_TABLE_viii[$14 & 7]($11, 0, $17); //@line 15655
 if (!___async) {
  ___async_unwind = 0; //@line 15658
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 544; //@line 15660
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 15662
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $15; //@line 15664
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = 0; //@line 15666
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $6; //@line 15668
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $8; //@line 15670
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $10; //@line 15672
 sp = STACKTOP; //@line 15673
 return;
}
function __ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$ = 0, $$1 = 0, $12 = 0, $22 = 0, $3 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 23423
 $3 = HEAP32[$0 + 4 >> 2] | 0; //@line 23425
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 64 >> 2] | 0; //@line 23428
 $8 = HEAP32[$1 + 4 >> 2] | 0; //@line 23430
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 23431
 $9 = FUNCTION_TABLE_iii[$6 & 31]($3, $8) | 0; //@line 23432
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 547; //@line 23435
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 23437
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 23439
  sp = STACKTOP; //@line 23440
  return 0; //@line 23441
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 23443
  $$ = $9 ? 7 : 6; //@line 23444
  $12 = HEAP8[$1 >> 0] | 0; //@line 23445
  $$1 = ($12 << 24 >> 24 < (HEAP8[$0 + 28 >> 0] | 0) ? 1 : $12 << 24 >> 24 > (HEAP8[$0 + 29 >> 0] | 0)) ? $$ & 5 : $$; //@line 23454
  $22 = HEAP8[$1 + 1 >> 0] | 0; //@line 23456
  return (($22 << 24 >> 24 < (HEAP8[$0 + 32 >> 0] | 0) ? 1 : $22 << 24 >> 24 > (HEAP8[$0 + 33 >> 0] | 0)) ? $$1 & 3 : $$1) | 0; //@line 23466
 }
 return 0; //@line 23468
}
function __ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 11789
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11791
 $4 = HEAP8[$0 + 8 >> 0] | 0; //@line 11793
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11795
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11797
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11799
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 11801
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 11803
 $17 = HEAP32[(HEAP32[$2 >> 2] | 0) + 20 >> 2] | 0; //@line 11806
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 11807
 FUNCTION_TABLE_viiiiiiiiiiiiii[$17 & 1]($2, 0, $4, 0, 0, 4800, 0, 5, 0, 0, 0, 0, 0, $6); //@line 11808
 if (!___async) {
  ___async_unwind = 0; //@line 11811
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 70; //@line 11813
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 11815
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $8; //@line 11817
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $10; //@line 11819
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $12; //@line 11821
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $14; //@line 11823
 sp = STACKTOP; //@line 11824
 return;
}
function __ZN4mbed5TimerC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2878
 HEAP32[$0 >> 2] = 0; //@line 2879
 $1 = $0 + 8 | 0; //@line 2880
 $2 = $0 + 16 | 0; //@line 2881
 HEAP32[$1 >> 2] = 0; //@line 2882
 HEAP32[$1 + 4 >> 2] = 0; //@line 2882
 HEAP32[$1 + 8 >> 2] = 0; //@line 2882
 HEAP32[$1 + 12 >> 2] = 0; //@line 2882
 $4 = $0 + 24 | 0; //@line 2884
 HEAP32[$4 >> 2] = _get_us_ticker_data() | 0; //@line 2885
 HEAP8[$0 + 28 >> 0] = 1; //@line 2887
 $6 = HEAP32[$4 >> 2] | 0; //@line 2888
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 2889
 $7 = _ticker_read_us($6) | 0; //@line 2890
 $8 = tempRet0; //@line 2891
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 120; //@line 2894
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 2896
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 2898
  sp = STACKTOP; //@line 2899
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2902
  $11 = $1; //@line 2903
  HEAP32[$11 >> 2] = $7; //@line 2905
  HEAP32[$11 + 4 >> 2] = $8; //@line 2908
  $15 = $2; //@line 2909
  HEAP32[$15 >> 2] = 0; //@line 2911
  HEAP32[$15 + 4 >> 2] = 0; //@line 2914
  return;
 }
}
function __GLOBAL__sub_I_main_cpp() {
 var $AsyncCtx = 0, $AsyncCtx2 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 7086
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7087
 __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_(19576, 9, 8, 7, 6, 23, 4, 5, 66, 67, 0, 1, -1, -1, -1, -1, 62, -1, -1); //@line 7088
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 661; //@line 7091
  sp = STACKTOP; //@line 7092
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 7095
 __ZN5Sht31C2E7PinNameS0_(24532, 10, 11); //@line 7096
 __ZN4mbed11InterruptInC2E7PinName(23552, 1337); //@line 7097
 __ZN6events10EventQueueC2EjPh(23624, 1664, 0); //@line 7098
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7099
 __ZN16LoRaWANInterfaceC2ER9LoRaRadio(23828, 19576); //@line 7100
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 662; //@line 7103
  sp = STACKTOP; //@line 7104
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7107
  dest = 23836; //@line 7108
  stop = dest + 48 | 0; //@line 7108
  do {
   HEAP32[dest >> 2] = 0; //@line 7108
   dest = dest + 4 | 0; //@line 7108
  } while ((dest | 0) < (stop | 0));
  return;
 }
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_100($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx18 = 0, sp = 0;
 sp = STACKTOP; //@line 23639
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23641
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23643
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23645
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23647
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23649
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23651
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23653
 HEAP32[$2 >> 2] = 1; //@line 23654
 HEAP8[$2 + 4 >> 0] = 0; //@line 23656
 $ReallocAsyncCtx18 = _emscripten_realloc_async_context(24) | 0; //@line 23657
 __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($4, $2) | 0; //@line 23658
 if (!___async) {
  ___async_unwind = 0; //@line 23661
 }
 HEAP32[$ReallocAsyncCtx18 >> 2] = 197; //@line 23663
 HEAP32[$ReallocAsyncCtx18 + 4 >> 2] = $6; //@line 23665
 HEAP32[$ReallocAsyncCtx18 + 8 >> 2] = $8; //@line 23667
 HEAP32[$ReallocAsyncCtx18 + 12 >> 2] = $10; //@line 23669
 HEAP32[$ReallocAsyncCtx18 + 16 >> 2] = $12; //@line 23671
 HEAP32[$ReallocAsyncCtx18 + 20 >> 2] = $14; //@line 23673
 sp = STACKTOP; //@line 23674
 return;
}
function __ZL12send_messagev__async_cb_389($0) {
 $0 = $0 | 0;
 var $12 = 0, $15 = 0, $2 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 28214
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28216
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28220
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28222
 $AsyncRetVal = HEAP16[___async_retval >> 1] | 0; //@line 28226
 $12 = $AsyncRetVal << 16 >> 16; //@line 28227
 if ($AsyncRetVal << 16 >> 16 >= 0) {
  HEAP32[$2 >> 2] = $12; //@line 28230
  _printf(16523, $2) | 0; //@line 28231
  return;
 }
 if ($AsyncRetVal << 16 >> 16 != -1001) {
  HEAP32[$8 >> 2] = $12; //@line 28236
  _printf(16499, $8) | 0; //@line 28237
  return;
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 28240
 _puts(16471) | 0; //@line 28241
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 676; //@line 28244
  $15 = $ReallocAsyncCtx + 4 | 0; //@line 28245
  HEAP32[$15 >> 2] = $6; //@line 28246
  sp = STACKTOP; //@line 28247
  return;
 }
 ___async_unwind = 0; //@line 28250
 HEAP32[$ReallocAsyncCtx >> 2] = 676; //@line 28251
 $15 = $ReallocAsyncCtx + 4 | 0; //@line 28252
 HEAP32[$15 >> 2] = $6; //@line 28253
 sp = STACKTOP; //@line 28254
 return;
}
function __ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb_33($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 19854
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19856
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19858
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19860
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19862
 HEAP32[$2 >> 2] = 2; //@line 19863
 $9 = $2 + 4 | 0; //@line 19864
 HEAP8[$9 >> 0] = 1; //@line 19865
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 19866
 __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($4, $2) | 0; //@line 19867
 if (!___async) {
  ___async_unwind = 0; //@line 19870
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 257; //@line 19872
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 19874
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $9; //@line 19876
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $4; //@line 19878
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $2; //@line 19880
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $6; //@line 19882
 HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $8; //@line 19884
 HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $2; //@line 19886
 sp = STACKTOP; //@line 19887
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_107($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 24041
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24043
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24045
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24047
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24049
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24051
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24053
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 24055
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(32) | 0; //@line 24056
 __ZN7LoRaMac10disconnectEv($4); //@line 24057
 if (!___async) {
  ___async_unwind = 0; //@line 24060
 }
 HEAP32[$ReallocAsyncCtx12 >> 2] = 196; //@line 24062
 HEAP32[$ReallocAsyncCtx12 + 4 >> 2] = $6; //@line 24064
 HEAP32[$ReallocAsyncCtx12 + 8 >> 2] = $4; //@line 24066
 HEAP32[$ReallocAsyncCtx12 + 12 >> 2] = $8; //@line 24068
 HEAP32[$ReallocAsyncCtx12 + 16 >> 2] = $10; //@line 24070
 HEAP32[$ReallocAsyncCtx12 + 20 >> 2] = $12; //@line 24072
 HEAP32[$ReallocAsyncCtx12 + 24 >> 2] = $2; //@line 24074
 HEAP32[$ReallocAsyncCtx12 + 28 >> 2] = $14; //@line 24076
 sp = STACKTOP; //@line 24077
 return;
}
function __ZN16SX1276_LoRaRadio11rx_done_irqEv($0) {
 $0 = $0 | 0;
 var $13 = 0, $16 = 0, $18 = 0, $19 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1591
 STACKTOP = STACKTOP + 16 | 0; //@line 1592
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 1592
 _mbed_tracef(16, 10968, 11485, sp); //@line 1594
 __ZN4mbed6Ticker6detachEv($0 + 1112 | 0); //@line 1596
 HEAP8[$0 + 688 >> 0] = 0; //@line 1598
 $4 = HEAP32[$0 + 788 >> 2] | 0; //@line 1600
 if (!$4) {
  STACKTOP = sp; //@line 1603
  return;
 }
 $7 = HEAP32[$4 + 44 >> 2] | 0; //@line 1606
 if (!$7) {
  STACKTOP = sp; //@line 1609
  return;
 }
 $13 = HEAPU8[$0 + 782 >> 0] | 0; //@line 1615
 $16 = HEAP8[$0 + 781 >> 0] | 0; //@line 1618
 $18 = HEAP8[$0 + 780 >> 0] | 0; //@line 1620
 $19 = HEAP32[$7 >> 2] | 0; //@line 1621
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 1622
 FUNCTION_TABLE_viiiii[$19 & 7]($4 + 32 | 0, $0 + 792 | 0, $13, $16, $18); //@line 1623
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 86; //@line 1626
  sp = STACKTOP; //@line 1627
  STACKTOP = sp; //@line 1628
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 1630
 STACKTOP = sp; //@line 1631
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 var $$037$off038 = 0, $$037$off039 = 0, $12 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, label = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18483
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18485
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18487
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18491
 if (!(HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0)) {
  $$037$off038 = 4; //@line 18495
  label = 4; //@line 18496
 } else {
  if (!(HEAP8[HEAP32[$0 + 20 >> 2] >> 0] | 0)) {
   $$037$off038 = 3; //@line 18501
   label = 4; //@line 18502
  } else {
   $$037$off039 = 3; //@line 18504
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$6 >> 2] = $4; //@line 18508
  $17 = $8 + 40 | 0; //@line 18509
  HEAP32[$17 >> 2] = (HEAP32[$17 >> 2] | 0) + 1; //@line 18512
  if ((HEAP32[$8 + 36 >> 2] | 0) == 1) {
   if ((HEAP32[$8 + 24 >> 2] | 0) == 2) {
    HEAP8[$8 + 54 >> 0] = 1; //@line 18522
    $$037$off039 = $$037$off038; //@line 18523
   } else {
    $$037$off039 = $$037$off038; //@line 18525
   }
  } else {
   $$037$off039 = $$037$off038; //@line 18528
  }
 }
 HEAP32[$12 >> 2] = $$037$off039; //@line 18531
 return;
}
function __ZN7LoRaPHY11add_channelEP16channel_params_th__async_cb($0) {
 $0 = $0 | 0;
 var $$024 = 0, $10 = 0, $12 = 0, $2 = 0, $22 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $not$ = 0;
 $2 = HEAP8[$0 + 4 >> 0] & 1; //@line 8490
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8492
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8494
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 8496
 $not$ = HEAP8[___async_retval >> 0] & 1 ^ 1; //@line 8500
 if ($2 | $not$) {
  $$024 = $2 ? $2 & $not$ ? -1006 : -1005 : -1004; //@line 8506
  $27 = ___async_retval; //@line 8507
  HEAP32[$27 >> 2] = $$024; //@line 8508
  return;
 }
 $10 = $4 + 112 | 0; //@line 8511
 $12 = (HEAP32[$10 >> 2] | 0) + ($6 * 12 | 0) | 0; //@line 8513
 HEAP32[$12 >> 2] = HEAP32[$8 >> 2]; //@line 8514
 HEAP32[$12 + 4 >> 2] = HEAP32[$8 + 4 >> 2]; //@line 8514
 HEAP32[$12 + 8 >> 2] = HEAP32[$8 + 8 >> 2]; //@line 8514
 HEAP8[(HEAP32[$10 >> 2] | 0) + ($6 * 12 | 0) + 9 >> 0] = HEAP8[$8 + 9 >> 0] | 0; //@line 8519
 $22 = (HEAP32[$4 + 120 >> 2] | 0) + ($6 >>> 4 << 1) | 0; //@line 8525
 HEAP16[$22 >> 1] = 1 << ($6 & 15) | (HEAPU16[$22 >> 1] | 0); //@line 8530
 $$024 = 0; //@line 8531
 $27 = ___async_retval; //@line 8532
 HEAP32[$27 >> 2] = $$024; //@line 8533
 return;
}
function ___strerror_l($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $7 = 0, label = 0, $$113$looptemp = 0;
 $$016 = 0; //@line 14859
 while (1) {
  if ((HEAPU8[17094 + $$016 >> 0] | 0) == ($0 | 0)) {
   label = 2; //@line 14866
   break;
  }
  $7 = $$016 + 1 | 0; //@line 14869
  if (($7 | 0) == 87) {
   $$01214 = 17182; //@line 14872
   $$115 = 87; //@line 14872
   label = 5; //@line 14873
   break;
  } else {
   $$016 = $7; //@line 14876
  }
 }
 if ((label | 0) == 2) {
  if (!$$016) {
   $$012$lcssa = 17182; //@line 14882
  } else {
   $$01214 = 17182; //@line 14884
   $$115 = $$016; //@line 14884
   label = 5; //@line 14885
  }
 }
 if ((label | 0) == 5) {
  while (1) {
   label = 0; //@line 14890
   $$113 = $$01214; //@line 14891
   do {
    $$113$looptemp = $$113;
    $$113 = $$113 + 1 | 0; //@line 14895
   } while ((HEAP8[$$113$looptemp >> 0] | 0) != 0);
   $$115 = $$115 + -1 | 0; //@line 14902
   if (!$$115) {
    $$012$lcssa = $$113; //@line 14905
    break;
   } else {
    $$01214 = $$113; //@line 14908
    label = 5; //@line 14909
   }
  }
 }
 return ___lctrans($$012$lcssa, HEAP32[$1 + 20 >> 2] | 0) | 0; //@line 14916
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $13 = 0, $19 = 0;
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 16274
  } else {
   if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0) {
    if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
     $13 = $1 + 20 | 0; //@line 16283
     if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
      HEAP32[$1 + 32 >> 2] = $3; //@line 16288
      HEAP32[$13 >> 2] = $2; //@line 16289
      $19 = $1 + 40 | 0; //@line 16290
      HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + 1; //@line 16293
      if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
       if ((HEAP32[$1 + 24 >> 2] | 0) == 2) {
        HEAP8[$1 + 54 >> 0] = 1; //@line 16303
       }
      }
      HEAP32[$1 + 44 >> 2] = 4; //@line 16307
      break;
     }
    }
    if (($3 | 0) == 1) {
     HEAP32[$1 + 32 >> 2] = 1; //@line 16314
    }
   }
  }
 } while (0);
 return;
}
function __ZL25default_terminate_handlerv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 9686
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9688
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9690
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9692
 $8 = HEAP32[$0 + 20 >> 2] | 0; //@line 9694
 $10 = HEAP32[$0 + 24 >> 2] | 0; //@line 9696
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  HEAP32[$4 >> 2] = 19122; //@line 9701
  HEAP32[$4 + 4 >> 2] = $6; //@line 9703
  _abort_message(19031, $4); //@line 9704
 }
 $12 = HEAP32[$2 >> 2] | 0; //@line 9707
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 8 >> 2] | 0; //@line 9710
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 9711
 $16 = FUNCTION_TABLE_ii[$15 & 15]($12) | 0; //@line 9712
 if (!___async) {
  HEAP32[___async_retval >> 2] = $16; //@line 9716
  ___async_unwind = 0; //@line 9717
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 704; //@line 9719
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $8; //@line 9721
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 9723
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $10; //@line 9725
 sp = STACKTOP; //@line 9726
 return;
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_265($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 9463
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9465
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9467
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9469
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9471
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 9473
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 9475
 $15 = HEAP32[HEAP32[$0 + 28 >> 2] >> 2] | 0; //@line 9478
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(28) | 0; //@line 9479
 __ZN7LoRaPHY18put_radio_to_sleepEv($15); //@line 9480
 if (!___async) {
  ___async_unwind = 0; //@line 9483
 }
 HEAP32[$ReallocAsyncCtx13 >> 2] = 442; //@line 9485
 HEAP32[$ReallocAsyncCtx13 + 4 >> 2] = $2; //@line 9487
 HEAP32[$ReallocAsyncCtx13 + 8 >> 2] = $4; //@line 9489
 HEAP32[$ReallocAsyncCtx13 + 12 >> 2] = $6; //@line 9491
 HEAP32[$ReallocAsyncCtx13 + 16 >> 2] = $8; //@line 9493
 HEAP32[$ReallocAsyncCtx13 + 20 >> 2] = $10; //@line 9495
 HEAP32[$ReallocAsyncCtx13 + 24 >> 2] = $12; //@line 9497
 sp = STACKTOP; //@line 9498
 return;
}
function _mbedtls_gcm_setkey__async_cb_199($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2131
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2133
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2135
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2137
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2139
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 2141
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 2143
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 2145
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 2149
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 2152
 $15 = _mbedtls_cipher_setkey($2, $4, $6, 1) | 0; //@line 2153
 if (!___async) {
  HEAP32[___async_retval >> 2] = $15; //@line 2157
  ___async_unwind = 0; //@line 2158
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 606; //@line 2160
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $8; //@line 2162
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $10; //@line 2164
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 2166
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $12; //@line 2168
 sp = STACKTOP; //@line 2169
 return;
}
function __ZN11LoRaMacMlme22set_tx_continuous_waveEhaafft($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = +$4;
 $5 = +$5;
 $6 = $6 | 0;
 var $13 = 0, $16 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 22026
 STACKTOP = STACKTOP + 16 | 0; //@line 22027
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 22027
 $7 = sp; //@line 22028
 HEAP8[$7 >> 0] = $1; //@line 22029
 HEAP8[$7 + 1 >> 0] = $2; //@line 22031
 HEAP8[$7 + 2 >> 0] = $3; //@line 22033
 HEAPF32[$7 + 4 >> 2] = $4; //@line 22035
 HEAPF32[$7 + 8 >> 2] = $5; //@line 22037
 HEAP16[$7 + 12 >> 1] = $6; //@line 22039
 $13 = HEAP32[$0 >> 2] | 0; //@line 22040
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 68 >> 2] | 0; //@line 22043
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 22044
 FUNCTION_TABLE_viii[$16 & 7]($13, $7, 0); //@line 22045
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 526; //@line 22048
  HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 22050
  sp = STACKTOP; //@line 22051
  STACKTOP = sp; //@line 22052
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 22054
  STACKTOP = sp; //@line 22055
  return;
 }
}
function __ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 10510
 $1 = $0 + 12 | 0; //@line 10511
 $2 = HEAP32[$1 >> 2] | 0; //@line 10512
 do {
  if (!$2) {
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10516
   _mbed_assert_internal(15679, 15684, 528); //@line 10517
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 307; //@line 10520
    HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 10522
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 10524
    sp = STACKTOP; //@line 10525
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 10528
    $7 = HEAP32[$1 >> 2] | 0; //@line 10530
    break;
   }
  } else {
   $7 = $2; //@line 10534
  }
 } while (0);
 $6 = HEAP32[$7 >> 2] | 0; //@line 10537
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10538
 FUNCTION_TABLE_vi[$6 & 1023]($0); //@line 10539
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 308; //@line 10542
  sp = STACKTOP; //@line 10543
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10546
  return;
 }
}
function __ZN4mbed11InterruptInD2Ev($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 2397
 HEAP32[$0 >> 2] = 668; //@line 2398
 _gpio_irq_free($0 + 28 | 0); //@line 2400
 $3 = HEAP32[$0 + 68 >> 2] | 0; //@line 2402
 do {
  if ($3 | 0) {
   $7 = HEAP32[$3 + 8 >> 2] | 0; //@line 2408
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2409
   FUNCTION_TABLE_vi[$7 & 1023]($0 + 56 | 0); //@line 2410
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 103; //@line 2413
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2415
    sp = STACKTOP; //@line 2416
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 2419
    break;
   }
  }
 } while (0);
 $10 = HEAP32[$0 + 52 >> 2] | 0; //@line 2425
 if (!$10) {
  return;
 }
 $14 = HEAP32[$10 + 8 >> 2] | 0; //@line 2432
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2433
 FUNCTION_TABLE_vi[$14 & 1023]($0 + 40 | 0); //@line 2434
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 104; //@line 2437
  sp = STACKTOP; //@line 2438
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2441
 return;
}
function _mbedtls_gcm_setkey__async_cb_200($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 2176
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2178
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2180
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2182
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2184
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 2186
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 2188
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 2190
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(28) | 0; //@line 2191
 $15 = _mbedtls_cipher_setup($2, $4) | 0; //@line 2192
 if (!___async) {
  HEAP32[___async_retval >> 2] = $15; //@line 2196
  ___async_unwind = 0; //@line 2197
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 605; //@line 2199
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 2201
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $6; //@line 2203
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $8; //@line 2205
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $10; //@line 2207
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $12; //@line 2209
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $14; //@line 2211
 sp = STACKTOP; //@line 2212
 return;
}
function _strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $2 = 0, $5 = 0;
 $2 = HEAP8[$1 >> 0] | 0; //@line 14932
 do {
  if (!($2 << 24 >> 24)) {
   $$0 = $0; //@line 14936
  } else {
   $5 = _strchr($0, $2 << 24 >> 24) | 0; //@line 14939
   if (!$5) {
    $$0 = 0; //@line 14942
   } else {
    if (!(HEAP8[$1 + 1 >> 0] | 0)) {
     $$0 = $5; //@line 14948
    } else {
     if (!(HEAP8[$5 + 1 >> 0] | 0)) {
      $$0 = 0; //@line 14954
     } else {
      if (!(HEAP8[$1 + 2 >> 0] | 0)) {
       $$0 = _twobyte_strstr($5, $1) | 0; //@line 14961
       break;
      }
      if (!(HEAP8[$5 + 2 >> 0] | 0)) {
       $$0 = 0; //@line 14968
      } else {
       if (!(HEAP8[$1 + 3 >> 0] | 0)) {
        $$0 = _threebyte_strstr($5, $1) | 0; //@line 14975
        break;
       }
       if (!(HEAP8[$5 + 3 >> 0] | 0)) {
        $$0 = 0; //@line 14982
       } else {
        if (!(HEAP8[$1 + 4 >> 0] | 0)) {
         $$0 = _fourbyte_strstr($5, $1) | 0; //@line 14989
         break;
        } else {
         $$0 = _twoway_strstr($5, $1) | 0; //@line 14993
         break;
        }
       }
      }
     }
    }
   }
  }
 } while (0);
 return $$0 | 0; //@line 15003
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_320($0) {
 $0 = $0 | 0;
 var $$pre122 = 0, $10 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 14775
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14777
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14779
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14781
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14783
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14785
 $$pre122 = HEAP32[$2 >> 2] | 0; //@line 14786
 if (!$$pre122) {
  HEAP32[$4 >> 2] = 0; //@line 14789
  HEAP32[___async_retval >> 2] = $10; //@line 14791
  return;
 }
 $13 = HEAP32[$$pre122 + 4 >> 2] | 0; //@line 14795
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(20) | 0; //@line 14796
 FUNCTION_TABLE_vii[$13 & 31]($6, $8); //@line 14797
 if (!___async) {
  ___async_unwind = 0; //@line 14800
 }
 HEAP32[$ReallocAsyncCtx14 >> 2] = 497; //@line 14802
 HEAP32[$ReallocAsyncCtx14 + 4 >> 2] = $2; //@line 14804
 HEAP32[$ReallocAsyncCtx14 + 8 >> 2] = $4; //@line 14806
 HEAP32[$ReallocAsyncCtx14 + 12 >> 2] = $8; //@line 14808
 HEAP32[$ReallocAsyncCtx14 + 16 >> 2] = $10; //@line 14810
 sp = STACKTOP; //@line 14811
 return;
}
function __ZN4mbed7Timeout7handlerEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2833
 $1 = $0 + 40 | 0; //@line 2834
 $2 = $0 + 52 | 0; //@line 2835
 $3 = HEAP32[$2 >> 2] | 0; //@line 2836
 do {
  if (!$3) {
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 2840
   _mbed_assert_internal(15679, 15684, 528); //@line 2841
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 118; //@line 2844
    HEAP32[$AsyncCtx2 + 4 >> 2] = $2; //@line 2846
    HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 2848
    sp = STACKTOP; //@line 2849
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 2852
    $8 = HEAP32[$2 >> 2] | 0; //@line 2854
    break;
   }
  } else {
   $8 = $3; //@line 2858
  }
 } while (0);
 $7 = HEAP32[$8 >> 2] | 0; //@line 2861
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2862
 FUNCTION_TABLE_vi[$7 & 1023]($1); //@line 2863
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 119; //@line 2866
  sp = STACKTOP; //@line 2867
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2870
  return;
 }
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_95($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx22 = 0, sp = 0;
 sp = STACKTOP; //@line 23332
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23336
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23338
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23340
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23342
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23344
 $13 = $4 + 12 | 0; //@line 23346
 HEAP32[$13 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 23347
 $ReallocAsyncCtx22 = _emscripten_realloc_async_context(20) | 0; //@line 23348
 $14 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 5) | 0; //@line 23349
 if (!___async) {
  HEAP32[___async_retval >> 2] = $14; //@line 23353
  ___async_unwind = 0; //@line 23354
 }
 HEAP32[$ReallocAsyncCtx22 >> 2] = 218; //@line 23356
 HEAP32[$ReallocAsyncCtx22 + 4 >> 2] = $13; //@line 23358
 HEAP32[$ReallocAsyncCtx22 + 8 >> 2] = $8; //@line 23360
 HEAP32[$ReallocAsyncCtx22 + 12 >> 2] = $10; //@line 23362
 HEAP32[$ReallocAsyncCtx22 + 16 >> 2] = $12; //@line 23364
 sp = STACKTOP; //@line 23365
 return;
}
function __ZN7LoRaMac26on_ack_timeout_timer_eventEv($0) {
 $0 = $0 | 0;
 var $15 = 0, $2 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13185
 STACKTOP = STACKTOP + 16 | 0; //@line 13186
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 13186
 _mbed_tracef(16, 13728, 13921, sp); //@line 13188
 $2 = HEAP32[$0 + 356 >> 2] | 0; //@line 13190
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 13192
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($2, $0 + 1076 | 0); //@line 13193
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 366; //@line 13196
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 13198
  sp = STACKTOP; //@line 13199
  STACKTOP = sp; //@line 13200
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 13202
 if (HEAP8[$0 + 373 >> 0] | 0) {
  HEAP8[$0 + 377 >> 0] = 1; //@line 13208
  $9 = $0 + 968 | 0; //@line 13209
  HEAP32[$9 >> 2] = HEAP32[$9 >> 2] & -5; //@line 13212
 }
 if ((HEAP32[$0 + 360 >> 2] | 0) != 2) {
  STACKTOP = sp; //@line 13218
  return;
 }
 $15 = $0 + 944 | 0; //@line 13220
 HEAP8[$15 >> 0] = HEAP8[$15 >> 0] | 32; //@line 13223
 STACKTOP = sp; //@line 13224
 return;
}
function __ZN4mbed6TickerD0Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 6874
 HEAP32[$0 >> 2] = 10172; //@line 6875
 $1 = $0 + 40 | 0; //@line 6876
 _emscripten_asm_const_ii(15, $1 | 0) | 0; //@line 6877
 $4 = HEAP32[$0 + 52 >> 2] | 0; //@line 6879
 do {
  if ($4 | 0) {
   $7 = HEAP32[$4 + 8 >> 2] | 0; //@line 6884
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 6885
   FUNCTION_TABLE_vi[$7 & 1023]($1); //@line 6886
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 654; //@line 6889
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 6891
    sp = STACKTOP; //@line 6892
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 6895
    break;
   }
  }
 } while (0);
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6900
 __ZN4mbed10TimerEventD2Ev($0); //@line 6901
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 655; //@line 6904
  HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 6906
  sp = STACKTOP; //@line 6907
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6910
  __ZdlPv($0); //@line 6911
  return;
 }
}
function _mbed_vtracef__async_cb_131($0) {
 $0 = $0 | 0;
 var $3 = 0, $5 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 26129
 $3 = HEAP32[191] | 0; //@line 26133
 if (HEAP8[$0 + 4 >> 0] & 1 & ($3 | 0) != 0) {
  $5 = HEAP32[183] | 0; //@line 26137
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 26138
  FUNCTION_TABLE_vi[$3 & 1023]($5); //@line 26139
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 141; //@line 26142
   sp = STACKTOP; //@line 26143
   return;
  }
  ___async_unwind = 0; //@line 26146
  HEAP32[$ReallocAsyncCtx2 >> 2] = 141; //@line 26147
  sp = STACKTOP; //@line 26148
  return;
 } else {
  $6 = HEAP32[190] | 0; //@line 26151
  $7 = HEAP32[183] | 0; //@line 26152
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 26153
  FUNCTION_TABLE_vi[$6 & 1023]($7); //@line 26154
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 143; //@line 26157
   sp = STACKTOP; //@line 26158
   return;
  }
  ___async_unwind = 0; //@line 26161
  HEAP32[$ReallocAsyncCtx4 >> 2] = 143; //@line 26162
  sp = STACKTOP; //@line 26163
  return;
 }
}
function _fourbyte_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$lcssa = 0, $$sink21$lcssa = 0, $$sink2123 = 0, $18 = 0, $32 = 0, $33 = 0, $35 = 0, $39 = 0, $40 = 0, $41 = 0;
 $18 = (HEAPU8[$1 + 1 >> 0] | 0) << 16 | (HEAPU8[$1 >> 0] | 0) << 24 | (HEAPU8[$1 + 2 >> 0] | 0) << 8 | (HEAPU8[$1 + 3 >> 0] | 0); //@line 15128
 $32 = $0 + 3 | 0; //@line 15142
 $33 = HEAP8[$32 >> 0] | 0; //@line 15143
 $35 = (HEAPU8[$0 + 1 >> 0] | 0) << 16 | (HEAPU8[$0 >> 0] | 0) << 24 | (HEAPU8[$0 + 2 >> 0] | 0) << 8 | $33 & 255; //@line 15145
 if ($33 << 24 >> 24 == 0 | ($35 | 0) == ($18 | 0)) {
  $$lcssa = $33; //@line 15150
  $$sink21$lcssa = $32; //@line 15150
 } else {
  $$sink2123 = $32; //@line 15152
  $39 = $35; //@line 15152
  while (1) {
   $40 = $$sink2123 + 1 | 0; //@line 15155
   $41 = HEAP8[$40 >> 0] | 0; //@line 15156
   $39 = $39 << 8 | $41 & 255; //@line 15158
   if ($41 << 24 >> 24 == 0 | ($39 | 0) == ($18 | 0)) {
    $$lcssa = $41; //@line 15163
    $$sink21$lcssa = $40; //@line 15163
    break;
   } else {
    $$sink2123 = $40; //@line 15166
   }
  }
 }
 return ($$lcssa << 24 >> 24 ? $$sink21$lcssa + -3 | 0 : 0) | 0; //@line 15173
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 3727
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3729
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3733
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3735
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3737
 $11 = $2 + 12 | 0; //@line 3739
 HEAP32[$11 >> 2] = HEAP32[HEAP32[$0 + 8 >> 2] >> 2]; //@line 3740
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 3741
 $12 = _equeue_alloc($10, 16) | 0; //@line 3742
 if (!___async) {
  HEAP32[___async_retval >> 2] = $12; //@line 3746
  ___async_unwind = 0; //@line 3747
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 576; //@line 3749
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $11; //@line 3751
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $8; //@line 3753
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $10; //@line 3755
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $6; //@line 3757
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $11; //@line 3759
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $2; //@line 3761
 sp = STACKTOP; //@line 3762
 return;
}
function __ZN18LoRaMacChannelPlan11remove_planEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 18564
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18566
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18568
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18570
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18572
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18574
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  HEAP32[___async_retval >> 2] = -1003; //@line 18580
  return;
 }
 $12 = HEAP32[$2 >> 2] | 0; //@line 18583
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 18584
 __ZN7LoRaPHY18put_radio_to_sleepEv($12); //@line 18585
 if (!___async) {
  ___async_unwind = 0; //@line 18588
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 501; //@line 18590
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $4; //@line 18592
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 18594
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 18596
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 18598
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 18600
 sp = STACKTOP; //@line 18601
 return;
}
function __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0) {
 $0 = $0 | 0;
 var $13 = 0, sp = 0;
 sp = STACKTOP; //@line 1533
 STACKTOP = STACKTOP + 16 | 0; //@line 1534
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 1534
 _mbed_tracef(16, 10968, 11083, sp); //@line 1536
 if ((HEAP32[$0 + 652 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(5, HEAP32[$0 + 484 >> 2] | 0, 0) | 0; //@line 1543
 }
 if ((HEAP32[$0 + 656 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(5, HEAP32[$0 + 508 >> 2] | 0, 0) | 0; //@line 1551
 }
 if ((HEAP32[$0 + 672 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(5, HEAP32[$0 + 604 >> 2] | 0, 0) | 0; //@line 1559
 }
 $13 = $0 + 660 | 0; //@line 1561
 if ((HEAP32[$13 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(5, HEAP32[$0 + 532 >> 2] | 0, 0) | 0; //@line 1567
  if ((HEAP32[$13 >> 2] | 0) != -1) {
   _emscripten_asm_const_iii(5, HEAP32[$0 + 556 >> 2] | 0, 0) | 0; //@line 1573
  }
 }
 if ((HEAP32[$0 + 668 >> 2] | 0) == -1) {
  STACKTOP = sp; //@line 1580
  return;
 }
 _emscripten_asm_const_iii(5, HEAP32[$0 + 580 >> 2] | 0, 0) | 0; //@line 1584
 STACKTOP = sp; //@line 1585
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_307($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 12369
 $4 = HEAP8[$0 + 8 >> 0] | 0; //@line 12373
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12375
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 12376
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 76 >> 2] | 0; //@line 12379
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 12380
 FUNCTION_TABLE_vi[$10 & 1023]($7); //@line 12381
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 539; //@line 12384
  $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 12385
  HEAP8[$11 >> 0] = $4; //@line 12386
  $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 12387
  HEAP32[$12 >> 2] = $6; //@line 12388
  sp = STACKTOP; //@line 12389
  return;
 }
 ___async_unwind = 0; //@line 12392
 HEAP32[$ReallocAsyncCtx9 >> 2] = 539; //@line 12393
 $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 12394
 HEAP8[$11 >> 0] = $4; //@line 12395
 $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 12396
 HEAP32[$12 >> 2] = $6; //@line 12397
 sp = STACKTOP; //@line 12398
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_96($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx27 = 0, sp = 0;
 sp = STACKTOP; //@line 23371
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23375
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23377
 if (HEAP32[$0 + 4 >> 2] | 0) {
  HEAP32[$4 >> 2] = 6; //@line 23380
  HEAP32[___async_retval >> 2] = -1014; //@line 23382
  return;
 }
 $ReallocAsyncCtx27 = _emscripten_realloc_async_context(12) | 0; //@line 23385
 _mbed_assert_internal(13612, 12396, 1237); //@line 23386
 if (___async) {
  HEAP32[$ReallocAsyncCtx27 >> 2] = 220; //@line 23389
  $8 = $ReallocAsyncCtx27 + 4 | 0; //@line 23390
  HEAP32[$8 >> 2] = $4; //@line 23391
  $9 = $ReallocAsyncCtx27 + 8 | 0; //@line 23392
  HEAP32[$9 >> 2] = $6; //@line 23393
  sp = STACKTOP; //@line 23394
  return;
 }
 ___async_unwind = 0; //@line 23397
 HEAP32[$ReallocAsyncCtx27 >> 2] = 220; //@line 23398
 $8 = $ReallocAsyncCtx27 + 4 | 0; //@line 23399
 HEAP32[$8 >> 2] = $4; //@line 23400
 $9 = $ReallocAsyncCtx27 + 8 | 0; //@line 23401
 HEAP32[$9 >> 2] = $6; //@line 23402
 sp = STACKTOP; //@line 23403
 return;
}
function _ticker_read_us__async_cb_31($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $7 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 19749
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19751
 $3 = $2 + 4 | 0; //@line 19752
 $4 = HEAP32[$3 >> 2] | 0; //@line 19753
 $7 = HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0; //@line 19756
 $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 19757
 $8 = FUNCTION_TABLE_i[$7 & 7]() | 0; //@line 19758
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 627; //@line 19761
  $9 = $ReallocAsyncCtx + 4 | 0; //@line 19762
  HEAP32[$9 >> 2] = $3; //@line 19763
  $10 = $ReallocAsyncCtx + 8 | 0; //@line 19764
  HEAP32[$10 >> 2] = $4; //@line 19765
  sp = STACKTOP; //@line 19766
  return;
 }
 HEAP32[___async_retval >> 2] = $8; //@line 19770
 ___async_unwind = 0; //@line 19771
 HEAP32[$ReallocAsyncCtx >> 2] = 627; //@line 19772
 $9 = $ReallocAsyncCtx + 4 | 0; //@line 19773
 HEAP32[$9 >> 2] = $3; //@line 19774
 $10 = $ReallocAsyncCtx + 8 | 0; //@line 19775
 HEAP32[$10 >> 2] = $4; //@line 19776
 sp = STACKTOP; //@line 19777
 return;
}
function _invoke_ticker($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 6941
 $2 = $0 + 12 | 0; //@line 6943
 $3 = HEAP32[$2 >> 2] | 0; //@line 6944
 do {
  if (!$3) {
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6948
   _mbed_assert_internal(15679, 15684, 528); //@line 6949
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 657; //@line 6952
    HEAP32[$AsyncCtx2 + 4 >> 2] = $2; //@line 6954
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 6956
    sp = STACKTOP; //@line 6957
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6960
    $8 = HEAP32[$2 >> 2] | 0; //@line 6962
    break;
   }
  } else {
   $8 = $3; //@line 6966
  }
 } while (0);
 $7 = HEAP32[$8 >> 2] | 0; //@line 6969
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6971
 FUNCTION_TABLE_vi[$7 & 1023]($0); //@line 6972
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 658; //@line 6975
  sp = STACKTOP; //@line 6976
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6979
  return;
 }
}
function __ZN4mbed7TimeoutD0Ev($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2789
 HEAP32[$0 >> 2] = 10172; //@line 2790
 __ZN4mbed6Ticker6detachEv($0); //@line 2791
 $2 = HEAP32[$0 + 52 >> 2] | 0; //@line 2793
 do {
  if ($2 | 0) {
   $6 = HEAP32[$2 + 8 >> 2] | 0; //@line 2799
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2800
   FUNCTION_TABLE_vi[$6 & 1023]($0 + 40 | 0); //@line 2801
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 116; //@line 2804
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2806
    sp = STACKTOP; //@line 2807
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 2810
    break;
   }
  }
 } while (0);
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2815
 __ZN4mbed10TimerEventD2Ev($0); //@line 2816
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 117; //@line 2819
  HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 2821
  sp = STACKTOP; //@line 2822
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 2825
  __ZdlPv($0); //@line 2826
  return;
 }
}
function __ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 5361
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5365
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5371
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  return;
 }
 $13 = (HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0) != 0; //@line 5379
 $15 = HEAP32[$4 + 1108 >> 2] | 0; //@line 5381
 _mbed_tracef(16, 13728, 13796, HEAP32[$0 + 12 >> 2] | 0); //@line 5382
 $16 = HEAP32[$10 >> 2] | 0; //@line 5383
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 5384
 __ZN7LoRaPHY15setup_rx_windowEbj($16, $13, $15); //@line 5385
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 312; //@line 5388
  $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 5389
  HEAP32[$17 >> 2] = $4; //@line 5390
  sp = STACKTOP; //@line 5391
  return;
 }
 ___async_unwind = 0; //@line 5394
 HEAP32[$ReallocAsyncCtx2 >> 2] = 312; //@line 5395
 $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 5396
 HEAP32[$17 >> 2] = $4; //@line 5397
 sp = STACKTOP; //@line 5398
 return;
}
function __ZN16LoRaWANInterface4sendEhPKhti($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $10 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5468
 do {
  if (HEAP8[$0 + 4 >> 0] | 0) {
   $10 = HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0; //@line 5476
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 5477
   FUNCTION_TABLE_ii[$10 & 15]($0) | 0; //@line 5478
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 152; //@line 5481
    HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 5483
    HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 5485
    HEAP8[$AsyncCtx + 12 >> 0] = $1; //@line 5487
    HEAP16[$AsyncCtx + 14 >> 1] = $3; //@line 5489
    sp = STACKTOP; //@line 5490
    return 0; //@line 5491
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 5493
    break;
   }
  }
 } while (0);
 if (!$2) {
  $$0 = -1003; //@line 5500
  return $$0 | 0; //@line 5501
 }
 $$0 = __ZN12LoRaWANStack9handle_txEhPKhth(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1, $2, $3, $4 & 255) | 0; //@line 5506
 return $$0 | 0; //@line 5507
}
function _abort_message($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $2 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 16107
 STACKTOP = STACKTOP + 16 | 0; //@line 16108
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16108
 $1 = sp; //@line 16109
 HEAP32[$1 >> 2] = $varargs; //@line 16110
 $2 = HEAP32[2554] | 0; //@line 16111
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 16112
 _vfprintf($2, $0, $1) | 0; //@line 16113
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 705; //@line 16116
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 16118
  sp = STACKTOP; //@line 16119
  STACKTOP = sp; //@line 16120
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 16122
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 16123
 _fputc(10, $2) | 0; //@line 16124
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 706; //@line 16127
  sp = STACKTOP; //@line 16128
  STACKTOP = sp; //@line 16129
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 16131
  _abort(); //@line 16132
 }
}
function __ZN12LoRaWANStack24enable_adaptive_datarateEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $2 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 9258
 STACKTOP = STACKTOP + 16 | 0; //@line 9259
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 9259
 $2 = sp + 4 | 0; //@line 9261
 if (!(HEAP32[$0 + 1876 >> 2] | 0)) {
  _mbed_tracef(2, 12356, 13306, sp); //@line 9266
  $$0 = -1012; //@line 9267
  STACKTOP = sp; //@line 9268
  return $$0 | 0; //@line 9268
 }
 HEAP32[$2 >> 2] = 2; //@line 9271
 HEAP8[$2 + 4 >> 0] = $1 & 1; //@line 9273
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 9275
 $9 = __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($0 + 4 | 0, $2) | 0; //@line 9276
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 269; //@line 9279
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 9281
  sp = STACKTOP; //@line 9282
  STACKTOP = sp; //@line 9283
  return 0; //@line 9283
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 9285
 $$0 = $9; //@line 9286
 STACKTOP = sp; //@line 9287
 return $$0 | 0; //@line 9287
}
function _threebyte_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$016$lcssa = 0, $$01618 = 0, $$019 = 0, $$lcssa = 0, $14 = 0, $23 = 0, $24 = 0, $27 = 0, $30 = 0, $31 = 0;
 $14 = (HEAPU8[$1 + 1 >> 0] | 0) << 16 | (HEAPU8[$1 >> 0] | 0) << 24 | (HEAPU8[$1 + 2 >> 0] | 0) << 8; //@line 15062
 $23 = $0 + 2 | 0; //@line 15071
 $24 = HEAP8[$23 >> 0] | 0; //@line 15072
 $27 = (HEAPU8[$0 + 1 >> 0] | 0) << 16 | (HEAPU8[$0 >> 0] | 0) << 24 | ($24 & 255) << 8; //@line 15075
 if (($27 | 0) == ($14 | 0) | $24 << 24 >> 24 == 0) {
  $$016$lcssa = $23; //@line 15080
  $$lcssa = $24; //@line 15080
 } else {
  $$01618 = $23; //@line 15082
  $$019 = $27; //@line 15082
  while (1) {
   $30 = $$01618 + 1 | 0; //@line 15084
   $31 = HEAP8[$30 >> 0] | 0; //@line 15085
   $$019 = ($$019 | $31 & 255) << 8; //@line 15088
   if (($$019 | 0) == ($14 | 0) | $31 << 24 >> 24 == 0) {
    $$016$lcssa = $30; //@line 15093
    $$lcssa = $31; //@line 15093
    break;
   } else {
    $$01618 = $30; //@line 15096
   }
  }
 }
 return ($$lcssa << 24 >> 24 ? $$016$lcssa + -2 | 0 : 0) | 0; //@line 15103
}
function __ZN7LoRaPHY17calculate_backoffEP16backoff_params_s($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$034 = 0, $$sink = 0, $11 = 0, $13 = 0, $14 = 0, $18 = 0, $3 = 0, $30 = 0;
 $3 = HEAP32[$0 + 72 >> 2] | 0; //@line 25191
 $11 = HEAPU8[(HEAP32[$0 + 112 >> 2] | 0) + ((HEAPU8[$1 + 3 >> 0] | 0) * 12 | 0) + 9 >> 0] | 0; //@line 25199
 $13 = HEAP16[$3 + ($11 * 24 | 0) >> 1] | 0; //@line 25201
 $14 = $3 + ($11 * 24 | 0) + 12 | 0; //@line 25202
 HEAP32[$14 >> 2] = 0; //@line 25203
 if (!(HEAP8[$1 >> 0] | 0)) {
  $18 = HEAP32[$1 + 4 >> 2] | 0; //@line 25208
  $$0 = $18 >>> 0 < 36e5 ? 100 : $18 >>> 0 < 396e5 ? 1e3 : 1e4; //@line 25212
  $$034 = ($13 & 65535) > ($$0 & 65535) ? $13 : $$0; //@line 25215
 } else {
  $$034 = $13; //@line 25217
 }
 if (!(HEAP8[$1 + 2 >> 0] | 0)) {
  if (!(HEAP8[$1 + 1 >> 0] | 0)) {
   $$sink = 0; //@line 25227
   HEAP32[$14 >> 2] = $$sink; //@line 25228
   return;
  }
 }
 $30 = HEAP32[$1 + 8 >> 2] | 0; //@line 25233
 $$sink = (Math_imul($30, $$034 & 65535) | 0) - $30 | 0; //@line 25237
 HEAP32[$14 >> 2] = $$sink; //@line 25238
 return;
}
function __ZN4mbed6TickerD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 6833
 HEAP32[$0 >> 2] = 10172; //@line 6834
 $1 = $0 + 40 | 0; //@line 6835
 _emscripten_asm_const_ii(15, $1 | 0) | 0; //@line 6836
 $4 = HEAP32[$0 + 52 >> 2] | 0; //@line 6838
 do {
  if ($4 | 0) {
   $7 = HEAP32[$4 + 8 >> 2] | 0; //@line 6843
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 6844
   FUNCTION_TABLE_vi[$7 & 1023]($1); //@line 6845
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 652; //@line 6848
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 6850
    sp = STACKTOP; //@line 6851
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 6854
    break;
   }
  }
 } while (0);
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6859
 __ZN4mbed10TimerEventD2Ev($0); //@line 6860
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 653; //@line 6863
  sp = STACKTOP; //@line 6864
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6867
  return;
 }
}
function __ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 19783
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19785
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19787
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19789
 HEAP32[$2 + 1960 >> 2] = 0; //@line 19791
 HEAP32[$2 + 1956 >> 2] = 0; //@line 19793
 HEAP32[$4 >> 2] = 1; //@line 19794
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 19795
 $9 = __ZN12LoRaWANStack18lora_state_machineEv($2) | 0; //@line 19796
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 259; //@line 19799
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 19800
  HEAP32[$10 >> 2] = $6; //@line 19801
  sp = STACKTOP; //@line 19802
  return;
 }
 HEAP32[___async_retval >> 2] = $9; //@line 19806
 ___async_unwind = 0; //@line 19807
 HEAP32[$ReallocAsyncCtx4 >> 2] = 259; //@line 19808
 $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 19809
 HEAP32[$10 >> 2] = $6; //@line 19810
 sp = STACKTOP; //@line 19811
 return;
}
function __ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $15 = 0, $2 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 8154
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8156
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8160
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 8162
 $9 = HEAP32[$2 >> 2] | 0; //@line 8163
 $12 = HEAP32[(HEAP32[$9 >> 2] | 0) + 68 >> 2] | 0; //@line 8166
 $14 = HEAP16[(HEAP32[$0 + 8 >> 2] | 0) + 12 >> 1] | 0; //@line 8168
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 8169
 FUNCTION_TABLE_viiii[$12 & 7]($9, $6, $8, $14); //@line 8170
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 551; //@line 8173
  $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 8174
  HEAP32[$15 >> 2] = $2; //@line 8175
  sp = STACKTOP; //@line 8176
  return;
 }
 ___async_unwind = 0; //@line 8179
 HEAP32[$ReallocAsyncCtx2 >> 2] = 551; //@line 8180
 $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 8181
 HEAP32[$15 >> 2] = $2; //@line 8182
 sp = STACKTOP; //@line 8183
 return;
}
function __ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb_32($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 19818
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19822
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19824
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19826
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19828
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19830
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 19832
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 7; //@line 19833
 HEAP8[$4 >> 0] = 1; //@line 19834
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 19835
 __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($6, $8) | 0; //@line 19836
 if (!___async) {
  ___async_unwind = 0; //@line 19839
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 258; //@line 19841
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $10; //@line 19843
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $12; //@line 19845
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $14; //@line 19847
 sp = STACKTOP; //@line 19848
 return;
}
function __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_292($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 11235
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11239
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 11241
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 11242
 if (!$6) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 11246
  return;
 }
 $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 11250
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 11251
 FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 11252
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 305; //@line 11255
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 11256
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 11257
  sp = STACKTOP; //@line 11258
  return;
 }
 ___async_unwind = 0; //@line 11261
 HEAP32[$ReallocAsyncCtx2 >> 2] = 305; //@line 11262
 $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 11263
 HEAP32[$10 >> 2] = $AsyncRetVal; //@line 11264
 sp = STACKTOP; //@line 11265
 return;
}
function _frexp($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $$0 = 0.0, $$016 = 0.0, $2 = 0, $3 = 0, $4 = 0, $9 = 0.0, $storemerge = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 14690
 $2 = HEAP32[tempDoublePtr >> 2] | 0; //@line 14690
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 14691
 $4 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0; //@line 14692
 switch ($4 & 2047) {
 case 0:
  {
   if ($0 != 0.0) {
    $9 = +_frexp($0 * 18446744073709552000.0, $1); //@line 14701
    $$016 = $9; //@line 14704
    $storemerge = (HEAP32[$1 >> 2] | 0) + -64 | 0; //@line 14704
   } else {
    $$016 = $0; //@line 14706
    $storemerge = 0; //@line 14706
   }
   HEAP32[$1 >> 2] = $storemerge; //@line 14708
   $$0 = $$016; //@line 14709
   break;
  }
 case 2047:
  {
   $$0 = $0; //@line 14713
   break;
  }
 default:
  {
   HEAP32[$1 >> 2] = ($4 & 2047) + -1022; //@line 14719
   HEAP32[tempDoublePtr >> 2] = $2; //@line 14722
   HEAP32[tempDoublePtr + 4 >> 2] = $3 & -2146435073 | 1071644672; //@line 14722
   $$0 = +HEAPF64[tempDoublePtr >> 3]; //@line 14723
  }
 }
 return +$$0;
}
function _equeue_sema_wait($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $20 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP; //@line 4445
 STACKTOP = STACKTOP + 16 | 0; //@line 4446
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 4446
 $2 = sp + 8 | 0; //@line 4447
 $3 = sp; //@line 4448
 _pthread_mutex_lock($0 | 0) | 0; //@line 4449
 $4 = $0 + 76 | 0; //@line 4450
 do {
  if (!(HEAP8[$4 >> 0] | 0)) {
   if (($1 | 0) < 0) {
    _pthread_cond_wait($0 + 28 | 0, $0 | 0) | 0; //@line 4458
    break;
   } else {
    _gettimeofday($2 | 0, 0) | 0; //@line 4461
    HEAP32[$3 >> 2] = (HEAP32[$2 >> 2] | 0) + (($1 >>> 0) / 1e3 | 0); //@line 4465
    HEAP32[$3 + 4 >> 2] = ((HEAP32[$2 + 4 >> 2] | 0) * 1e3 | 0) + ($1 * 1e6 | 0); //@line 4472
    _pthread_cond_timedwait($0 + 28 | 0, $0 | 0, $3 | 0) | 0; //@line 4474
    break;
   }
  }
 } while (0);
 $20 = (HEAP8[$4 >> 0] | 0) != 0; //@line 4480
 HEAP8[$4 >> 0] = 0; //@line 4481
 _pthread_mutex_unlock($0 | 0) | 0; //@line 4482
 STACKTOP = sp; //@line 4483
 return $20 | 0; //@line 4483
}
function ___cxa_can_catch($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17736
 STACKTOP = STACKTOP + 16 | 0; //@line 17737
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 17737
 $3 = sp; //@line 17738
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 17740
 $7 = HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0; //@line 17743
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 17744
 $8 = FUNCTION_TABLE_iiii[$7 & 15]($0, $1, $3) | 0; //@line 17745
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 729; //@line 17748
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 17750
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 17752
  HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 17754
  sp = STACKTOP; //@line 17755
  STACKTOP = sp; //@line 17756
  return 0; //@line 17756
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 17758
 if ($8) {
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2]; //@line 17762
 }
 STACKTOP = sp; //@line 17764
 return $8 & 1 | 0; //@line 17764
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_93($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx23 = 0, sp = 0;
 sp = STACKTOP; //@line 23265
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23269
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23271
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23273
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23275
 $11 = $4 + 12 | 0; //@line 23277
 HEAP32[$11 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 23278
 $ReallocAsyncCtx23 = _emscripten_realloc_async_context(16) | 0; //@line 23279
 $12 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 0) | 0; //@line 23280
 if (!___async) {
  HEAP32[___async_retval >> 2] = $12; //@line 23284
  ___async_unwind = 0; //@line 23285
 }
 HEAP32[$ReallocAsyncCtx23 >> 2] = 213; //@line 23287
 HEAP32[$ReallocAsyncCtx23 + 4 >> 2] = $11; //@line 23289
 HEAP32[$ReallocAsyncCtx23 + 8 >> 2] = $8; //@line 23291
 HEAP32[$ReallocAsyncCtx23 + 12 >> 2] = $10; //@line 23293
 sp = STACKTOP; //@line 23294
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_91($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx24 = 0, sp = 0;
 sp = STACKTOP; //@line 23198
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23202
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23204
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23206
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23208
 $11 = $4 + 12 | 0; //@line 23210
 HEAP32[$11 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 23211
 $ReallocAsyncCtx24 = _emscripten_realloc_async_context(16) | 0; //@line 23212
 $12 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 0) | 0; //@line 23213
 if (!___async) {
  HEAP32[___async_retval >> 2] = $12; //@line 23217
  ___async_unwind = 0; //@line 23218
 }
 HEAP32[$ReallocAsyncCtx24 >> 2] = 204; //@line 23220
 HEAP32[$ReallocAsyncCtx24 + 4 >> 2] = $11; //@line 23222
 HEAP32[$ReallocAsyncCtx24 + 8 >> 2] = $8; //@line 23224
 HEAP32[$ReallocAsyncCtx24 + 12 >> 2] = $10; //@line 23226
 sp = STACKTOP; //@line 23227
 return;
}
function __ZN7LoRaPHY19num_active_channelsEPthh($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$01012 = 0, $$011 = 0, $8 = 0, $9 = 0, $indvars$iv = 0, $wide$trip$count = 0;
 if (!(($1 | 0) != 0 & ($2 & 255) < ($3 & 255))) {
  $$011 = 0; //@line 24161
  return $$011 | 0; //@line 24162
 }
 $wide$trip$count = $3 & 255; //@line 24165
 $$01012 = 0; //@line 24166
 $indvars$iv = $2 & 255; //@line 24166
 do {
  $8 = HEAP16[$1 + ($indvars$iv << 1) >> 1] | 0; //@line 24169
  $9 = $8 & 65535; //@line 24170
  $$01012 = ($$01012 & 255) + (($9 & 1) + ($9 >>> 1 & 1) + ($9 >>> 2 & 1) + ($9 >>> 3 & 1) + ($9 >>> 4 & 1) + ($9 >>> 5 & 1) + ($9 >>> 6 & 1) + ($9 >>> 7 & 1) + ($9 >>> 8 & 1) + ($9 >>> 9 & 1) + ($9 >>> 10 & 1) + ($9 >>> 11 & 1) + ($9 >>> 12 & 1) + ($9 >>> 13 & 1) + ($9 >>> 14 & 1) + (($8 & 65535) >>> 15 & 65535) & 255) | 0; //@line 24219
  $indvars$iv = $indvars$iv + 1 | 0; //@line 24220
 } while (($indvars$iv | 0) != ($wide$trip$count | 0));
 $$011 = $$01012 & 255; //@line 24229
 return $$011 | 0; //@line 24230
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx25 = 0, sp = 0;
 sp = STACKTOP; //@line 23131
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23135
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23137
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23139
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23141
 $11 = $4 + 12 | 0; //@line 23143
 HEAP32[$11 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 23144
 $ReallocAsyncCtx25 = _emscripten_realloc_async_context(16) | 0; //@line 23145
 $12 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 1) | 0; //@line 23146
 if (!___async) {
  HEAP32[___async_retval >> 2] = $12; //@line 23150
  ___async_unwind = 0; //@line 23151
 }
 HEAP32[$ReallocAsyncCtx25 >> 2] = 199; //@line 23153
 HEAP32[$ReallocAsyncCtx25 + 4 >> 2] = $11; //@line 23155
 HEAP32[$ReallocAsyncCtx25 + 8 >> 2] = $8; //@line 23157
 HEAP32[$ReallocAsyncCtx25 + 12 >> 2] = $10; //@line 23159
 sp = STACKTOP; //@line 23160
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_351($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 26590
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26594
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26596
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 26597
 if (!$7) {
  HEAP32[___async_retval >> 2] = $4; //@line 26601
  return;
 }
 $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 26605
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 26606
 FUNCTION_TABLE_vi[$10 & 1023]($6); //@line 26607
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 361; //@line 26610
  $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 26611
  HEAP32[$11 >> 2] = $4; //@line 26612
  sp = STACKTOP; //@line 26613
  return;
 }
 ___async_unwind = 0; //@line 26616
 HEAP32[$ReallocAsyncCtx5 >> 2] = 361; //@line 26617
 $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 26618
 HEAP32[$11 >> 2] = $4; //@line 26619
 sp = STACKTOP; //@line 26620
 return;
}
function _schedule_interrupt__async_cb_57($0) {
 $0 = $0 | 0;
 var $16 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 21050
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21054
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21056
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 21058
 $8 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 21059
 if ($4 >>> 0 > $8 >>> 0) {
  if (!($AsyncRetVal >>> 0 >= $4 >>> 0 | $AsyncRetVal >>> 0 < $8 >>> 0)) {
   return;
  }
 } else {
  if (!($AsyncRetVal >>> 0 >= $4 >>> 0 & $AsyncRetVal >>> 0 < $8 >>> 0)) {
   return;
  }
 }
 $16 = HEAP32[(HEAP32[$6 >> 2] | 0) + 20 >> 2] | 0; //@line 21078
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 21079
 FUNCTION_TABLE_v[$16 & 15](); //@line 21080
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 623; //@line 21083
  sp = STACKTOP; //@line 21084
  return;
 }
 ___async_unwind = 0; //@line 21087
 HEAP32[$ReallocAsyncCtx6 >> 2] = 623; //@line 21088
 sp = STACKTOP; //@line 21089
 return;
}
function _mbed_vtracef__async_cb_128($0) {
 $0 = $0 | 0;
 var $$pre = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 25860
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25864
 if ((HEAP32[$0 + 4 >> 2] | 0) <= 2) {
  return;
 }
 $5 = $4 + -1 | 0; //@line 25869
 $$pre = HEAP32[193] | 0; //@line 25870
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 25871
 FUNCTION_TABLE_v[$$pre & 15](); //@line 25872
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 150; //@line 25875
  $6 = $ReallocAsyncCtx9 + 4 | 0; //@line 25876
  HEAP32[$6 >> 2] = $4; //@line 25877
  $7 = $ReallocAsyncCtx9 + 8 | 0; //@line 25878
  HEAP32[$7 >> 2] = $5; //@line 25879
  sp = STACKTOP; //@line 25880
  return;
 }
 ___async_unwind = 0; //@line 25883
 HEAP32[$ReallocAsyncCtx9 >> 2] = 150; //@line 25884
 $6 = $ReallocAsyncCtx9 + 4 | 0; //@line 25885
 HEAP32[$6 >> 2] = $4; //@line 25886
 $7 = $ReallocAsyncCtx9 + 8 | 0; //@line 25887
 HEAP32[$7 >> 2] = $5; //@line 25888
 sp = STACKTOP; //@line 25889
 return;
}
function __ZN4mbed7TimeoutD2Ev($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2748
 HEAP32[$0 >> 2] = 10172; //@line 2749
 __ZN4mbed6Ticker6detachEv($0); //@line 2750
 $2 = HEAP32[$0 + 52 >> 2] | 0; //@line 2752
 do {
  if ($2 | 0) {
   $6 = HEAP32[$2 + 8 >> 2] | 0; //@line 2758
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2759
   FUNCTION_TABLE_vi[$6 & 1023]($0 + 40 | 0); //@line 2760
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 114; //@line 2763
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2765
    sp = STACKTOP; //@line 2766
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 2769
    break;
   }
  }
 } while (0);
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2774
 __ZN4mbed10TimerEventD2Ev($0); //@line 2775
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 115; //@line 2778
  sp = STACKTOP; //@line 2779
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 2782
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_135($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 26425
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26429
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26431
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 26432
 if (!$7) {
  HEAP32[___async_retval >> 2] = $4; //@line 26436
  return;
 }
 $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 26440
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 26441
 FUNCTION_TABLE_vi[$10 & 1023]($6); //@line 26442
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 233; //@line 26445
  $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 26446
  HEAP32[$11 >> 2] = $4; //@line 26447
  sp = STACKTOP; //@line 26448
  return;
 }
 ___async_unwind = 0; //@line 26451
 HEAP32[$ReallocAsyncCtx5 >> 2] = 233; //@line 26452
 $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 26453
 HEAP32[$11 >> 2] = $4; //@line 26454
 sp = STACKTOP; //@line 26455
 return;
}
function __ZN16LoRaWANInterface7connectEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5311
 STACKTOP = STACKTOP + 32 | 0; //@line 5312
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 5312
 $1 = sp; //@line 5313
 HEAP8[$1 >> 0] = 1; //@line 5314
 HEAP32[$1 + 4 >> 2] = 0; //@line 5316
 HEAP32[$1 + 8 >> 2] = 0; //@line 5318
 HEAP32[$1 + 12 >> 2] = 24468; //@line 5320
 HEAP32[$1 + 16 >> 2] = 24484; //@line 5322
 $8 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0; //@line 5325
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 5326
 $9 = FUNCTION_TABLE_iii[$8 & 31]($0, $1) | 0; //@line 5327
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 151; //@line 5330
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 5332
  sp = STACKTOP; //@line 5333
  STACKTOP = sp; //@line 5334
  return 0; //@line 5334
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5336
  STACKTOP = sp; //@line 5337
  return $9 | 0; //@line 5337
 }
 return 0; //@line 5339
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $13 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16630
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 16636
  } else {
   $10 = HEAP32[$0 + 8 >> 2] | 0; //@line 16639
   $13 = HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] | 0; //@line 16642
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 16643
   FUNCTION_TABLE_viiiiii[$13 & 3]($10, $1, $2, $3, $4, $5); //@line 16644
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 711; //@line 16647
    sp = STACKTOP; //@line 16648
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 16651
    break;
   }
  }
 } while (0);
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_151($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 27896
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27900
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27902
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 27903
 if (!$7) {
  HEAP32[___async_retval >> 2] = $4; //@line 27907
  return;
 }
 $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 27911
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 27912
 FUNCTION_TABLE_vi[$10 & 1023]($6); //@line 27913
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 242; //@line 27916
  $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 27917
  HEAP32[$11 >> 2] = $4; //@line 27918
  sp = STACKTOP; //@line 27919
  return;
 }
 ___async_unwind = 0; //@line 27922
 HEAP32[$ReallocAsyncCtx5 >> 2] = 242; //@line 27923
 $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 27924
 HEAP32[$11 >> 2] = $4; //@line 27925
 sp = STACKTOP; //@line 27926
 return;
}
function __Z11compute_micPKhtS0_jhjPj__async_cb_363($0) {
 $0 = $0 | 0;
 var $$0 = 0, $19 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 27262
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 27266
 if (!$AsyncRetVal) {
  HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = (HEAPU8[24502] | 0) << 16 | (HEAPU8[24503] | 0) << 24 | (HEAPU8[24501] | 0) << 8 | (HEAPU8[24500] | 0); //@line 27283
  $$0 = 0; //@line 27284
 } else {
  $$0 = $AsyncRetVal; //@line 27286
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 27288
 _mbedtls_cipher_free(23188); //@line 27289
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 514; //@line 27292
  $19 = $ReallocAsyncCtx6 + 4 | 0; //@line 27293
  HEAP32[$19 >> 2] = $$0; //@line 27294
  sp = STACKTOP; //@line 27295
  return;
 }
 ___async_unwind = 0; //@line 27298
 HEAP32[$ReallocAsyncCtx6 >> 2] = 514; //@line 27299
 $19 = $ReallocAsyncCtx6 + 4 | 0; //@line 27300
 HEAP32[$19 >> 2] = $$0; //@line 27301
 sp = STACKTOP; //@line 27302
 return;
}
function _mbed_vtracef__async_cb_127($0) {
 $0 = $0 | 0;
 var $$pre = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 25827
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25829
 if (($2 | 0) <= 1) {
  return;
 }
 $4 = $2 + -1 | 0; //@line 25834
 $$pre = HEAP32[193] | 0; //@line 25835
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 25836
 FUNCTION_TABLE_v[$$pre & 15](); //@line 25837
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 150; //@line 25840
  $5 = $ReallocAsyncCtx9 + 4 | 0; //@line 25841
  HEAP32[$5 >> 2] = $2; //@line 25842
  $6 = $ReallocAsyncCtx9 + 8 | 0; //@line 25843
  HEAP32[$6 >> 2] = $4; //@line 25844
  sp = STACKTOP; //@line 25845
  return;
 }
 ___async_unwind = 0; //@line 25848
 HEAP32[$ReallocAsyncCtx9 >> 2] = 150; //@line 25849
 $5 = $ReallocAsyncCtx9 + 4 | 0; //@line 25850
 HEAP32[$5 >> 2] = $2; //@line 25851
 $6 = $ReallocAsyncCtx9 + 8 | 0; //@line 25852
 HEAP32[$6 >> 2] = $4; //@line 25853
 sp = STACKTOP; //@line 25854
 return;
}
function _vfprintf__async_cb($0) {
 $0 = $0 | 0;
 var $$ = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $33 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9858
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 9866
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 9868
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 9870
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 9872
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 9874
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 9876
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 9878
 $$ = (HEAP32[$2 >> 2] | 0) == 0 ? -1 : HEAP32[$0 + 8 >> 2] | 0; //@line 9889
 HEAP32[HEAP32[$0 + 16 >> 2] >> 2] = HEAP32[$0 + 12 >> 2]; //@line 9890
 HEAP32[$10 >> 2] = 0; //@line 9891
 HEAP32[$12 >> 2] = 0; //@line 9892
 HEAP32[$14 >> 2] = 0; //@line 9893
 HEAP32[$2 >> 2] = 0; //@line 9894
 $33 = HEAP32[$16 >> 2] | 0; //@line 9895
 HEAP32[$16 >> 2] = $33 | $18; //@line 9900
 if ($20 | 0) {
  ___unlockfile($22); //@line 9903
 }
 HEAP32[___async_retval >> 2] = ($33 & 32 | 0) == 0 ? $$ : -1; //@line 9906
 return;
}
function __ZN12LoRaWANStack22set_link_check_requestEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 9594
 STACKTOP = STACKTOP + 32 | 0; //@line 9595
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 9595
 $1 = sp + 4 | 0; //@line 9597
 if (!(HEAP32[$0 + 1908 >> 2] | 0)) {
  _mbed_tracef(2, 12356, 13555, sp); //@line 9602
  $$0 = -1003; //@line 9603
  STACKTOP = sp; //@line 9604
  return $$0 | 0; //@line 9604
 }
 HEAP32[$1 >> 2] = 1; //@line 9606
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 9608
 $6 = __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t($0 + 4 | 0, $1) | 0; //@line 9609
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 273; //@line 9612
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 9614
  sp = STACKTOP; //@line 9615
  STACKTOP = sp; //@line 9616
  return 0; //@line 9616
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 9618
 $$0 = $6; //@line 9619
 STACKTOP = sp; //@line 9620
 return $$0 | 0; //@line 9620
}
function __Z22compute_join_frame_micPKhtS0_Pj__async_cb_233($0) {
 $0 = $0 | 0;
 var $$0 = 0, $19 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 5041
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 5045
 if (!$AsyncRetVal) {
  HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = (HEAPU8[24502] | 0) << 16 | (HEAPU8[24503] | 0) << 24 | (HEAPU8[24501] | 0) << 8 | (HEAPU8[24500] | 0); //@line 5062
  $$0 = 0; //@line 5063
 } else {
  $$0 = $AsyncRetVal; //@line 5065
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 5067
 _mbedtls_cipher_free(23188); //@line 5068
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 519; //@line 5071
  $19 = $ReallocAsyncCtx5 + 4 | 0; //@line 5072
  HEAP32[$19 >> 2] = $$0; //@line 5073
  sp = STACKTOP; //@line 5074
  return;
 }
 ___async_unwind = 0; //@line 5077
 HEAP32[$ReallocAsyncCtx5 >> 2] = 519; //@line 5078
 $19 = $ReallocAsyncCtx5 + 4 | 0; //@line 5079
 HEAP32[$19 >> 2] = $$0; //@line 5080
 sp = STACKTOP; //@line 5081
 return;
}
function _get_pkcs_padding($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$028 = 0, $$02930 = 0, $$031 = 0, $13 = 0, $23 = 0, $7 = 0, $8 = 0, $9 = 0;
 if (($0 | 0) == 0 | ($2 | 0) == 0) {
  $$028 = -24832; //@line 2580
  return $$028 | 0; //@line 2581
 }
 $7 = HEAP8[$0 + ($1 + -1) >> 0] | 0; //@line 2585
 $8 = $7 & 255; //@line 2586
 $9 = $1 - $8 | 0; //@line 2587
 HEAP32[$2 >> 2] = $9; //@line 2588
 $13 = ($7 << 24 >> 24 == 0 | $8 >>> 0 > $1 >>> 0) & 1; //@line 2592
 if (!$1) {
  $$0$lcssa = $13; //@line 2595
 } else {
  $$02930 = 0; //@line 2597
  $$031 = $13; //@line 2597
  while (1) {
   $23 = (($$02930 >>> 0 >= $9 >>> 0 ? (HEAP8[$0 + $$02930 >> 0] ^ $7) & 255 : 0) | $$031 & 255) & 255; //@line 2607
   $$02930 = $$02930 + 1 | 0; //@line 2608
   if (($$02930 | 0) == ($1 | 0)) {
    $$0$lcssa = $23; //@line 2611
    break;
   } else {
    $$031 = $23; //@line 2614
   }
  }
 }
 $$028 = $$0$lcssa << 24 >> 24 ? -25088 : 0; //@line 2620
 return $$028 | 0; //@line 2621
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $14 = 0, $17 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17629
 $7 = HEAP32[$0 + 4 >> 2] | 0; //@line 17631
 $8 = $7 >> 8; //@line 17632
 if (!($7 & 1)) {
  $$0 = $8; //@line 17636
 } else {
  $$0 = HEAP32[(HEAP32[$3 >> 2] | 0) + $8 >> 2] | 0; //@line 17641
 }
 $14 = HEAP32[$0 >> 2] | 0; //@line 17643
 $17 = HEAP32[(HEAP32[$14 >> 2] | 0) + 20 >> 2] | 0; //@line 17646
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 17651
 FUNCTION_TABLE_viiiiii[$17 & 3]($14, $1, $2, $3 + $$0 | 0, $7 & 2 | 0 ? $4 : 2, $5); //@line 17652
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 727; //@line 17655
  sp = STACKTOP; //@line 17656
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 17659
  return;
 }
}
function __ZN12LoRaWANStackC2Ev__async_cb_29($0) {
 $0 = $0 | 0;
 var $$pre$i$i59 = 0, $10 = 0, $11 = 0, $6 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 19517
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19523
 $$pre$i$i59 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 19524
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = $$pre$i$i59; //@line 19526
 if (!$$pre$i$i59) {
  return;
 }
 $10 = HEAP32[$$pre$i$i59 + 8 >> 2] | 0; //@line 19532
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 19533
 FUNCTION_TABLE_vi[$10 & 1023]($6); //@line 19534
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 159; //@line 19537
  $11 = $ReallocAsyncCtx4 + 4 | 0; //@line 19538
  HEAP32[$11 >> 2] = $6; //@line 19539
  sp = STACKTOP; //@line 19540
  return;
 }
 ___async_unwind = 0; //@line 19543
 HEAP32[$ReallocAsyncCtx4 >> 2] = 159; //@line 19544
 $11 = $ReallocAsyncCtx4 + 4 | 0; //@line 19545
 HEAP32[$11 >> 2] = $6; //@line 19546
 sp = STACKTOP; //@line 19547
 return;
}
function __ZN7LoRaPHY11handle_sendEPhh__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 18022
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18024
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18026
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 18028
 $7 = HEAP32[$2 >> 2] | 0; //@line 18029
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 24 >> 2] | 0; //@line 18032
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 18033
 FUNCTION_TABLE_viii[$10 & 7]($7, $4, $6); //@line 18034
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 570; //@line 18037
  $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 18038
  HEAP32[$11 >> 2] = $2; //@line 18039
  sp = STACKTOP; //@line 18040
  return;
 }
 ___async_unwind = 0; //@line 18043
 HEAP32[$ReallocAsyncCtx2 >> 2] = 570; //@line 18044
 $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 18045
 HEAP32[$11 >> 2] = $2; //@line 18046
 sp = STACKTOP; //@line 18047
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $11 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16799
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 16805
  } else {
   $8 = HEAP32[$0 + 8 >> 2] | 0; //@line 16808
   $11 = HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] | 0; //@line 16811
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 16812
   FUNCTION_TABLE_viiii[$11 & 7]($8, $1, $2, $3); //@line 16813
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 714; //@line 16816
    sp = STACKTOP; //@line 16817
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 16820
    break;
   }
  }
 } while (0);
 return;
}
function _mbed_error_vfprintf__async_cb_397($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 28882
 $2 = HEAP8[$0 + 4 >> 0] | 0; //@line 28884
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28886
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28888
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28890
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28892
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 28894
 _serial_putc(23544, $2 << 24 >> 24); //@line 28895
 if (!___async) {
  ___async_unwind = 0; //@line 28898
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 648; //@line 28900
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $4; //@line 28902
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 28904
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $8; //@line 28906
 HEAP8[$ReallocAsyncCtx2 + 16 >> 0] = $2; //@line 28908
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 28910
 sp = STACKTOP; //@line 28911
 return;
}
function __ZN4mbed8CallbackIFvPhtsaEE13function_callINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPKvS1_tsa($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$unpack$i = 0, $$unpack5$i = 0, $15 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13136
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 13139
 $$unpack5$i = HEAP32[$0 + 4 >> 2] | 0; //@line 13141
 $8 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack5$i >> 1) | 0; //@line 13143
 if (!($$unpack5$i & 1)) {
  $15 = $$unpack$i; //@line 13148
 } else {
  $15 = HEAP32[(HEAP32[$8 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 13153
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 13155
 FUNCTION_TABLE_viiiii[$15 & 7]($8, $1, $2, $3, $4); //@line 13156
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 365; //@line 13159
  sp = STACKTOP; //@line 13160
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13163
  return;
 }
}
function ___dynamic_cast__async_cb_53($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $16 = 0, $6 = 0, $8 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20597
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20599
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20601
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20607
 L2 : do {
  switch (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) {
  case 0:
   {
    $$0 = (HEAP32[$6 >> 2] | 0) == 1 & (HEAP32[$8 >> 2] | 0) == 1 & (HEAP32[$10 >> 2] | 0) == 1 ? HEAP32[HEAP32[$0 + 24 >> 2] >> 2] | 0 : 0; //@line 20622
    break;
   }
  case 1:
   {
    if ((HEAP32[HEAP32[$0 + 28 >> 2] >> 2] | 0) != 1) {
     if (!((HEAP32[$6 >> 2] | 0) == 0 & (HEAP32[$8 >> 2] | 0) == 1 & (HEAP32[$10 >> 2] | 0) == 1)) {
      $$0 = 0; //@line 20638
      break L2;
     }
    }
    $$0 = HEAP32[$16 >> 2] | 0; //@line 20643
    break;
   }
  default:
   {
    $$0 = 0; //@line 20647
   }
  }
 } while (0);
 HEAP32[___async_retval >> 2] = $$0; //@line 20652
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $13 = 0, $16 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17671
 $6 = HEAP32[$0 + 4 >> 2] | 0; //@line 17673
 $7 = $6 >> 8; //@line 17674
 if (!($6 & 1)) {
  $$0 = $7; //@line 17678
 } else {
  $$0 = HEAP32[(HEAP32[$2 >> 2] | 0) + $7 >> 2] | 0; //@line 17683
 }
 $13 = HEAP32[$0 >> 2] | 0; //@line 17685
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 24 >> 2] | 0; //@line 17688
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 17693
 FUNCTION_TABLE_viiiii[$16 & 7]($13, $1, $2 + $$0 | 0, $6 & 2 | 0 ? $3 : 2, $4); //@line 17694
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 728; //@line 17697
  sp = STACKTOP; //@line 17698
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 17701
  return;
 }
}
function _ticker_remove_event($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5918
 $4 = (HEAP32[$0 + 4 >> 2] | 0) + 4 | 0; //@line 5921
 $5 = HEAP32[$4 >> 2] | 0; //@line 5922
 if (($5 | 0) == ($1 | 0)) {
  HEAP32[$4 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 5927
  $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5928
  _schedule_interrupt($0); //@line 5929
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 625; //@line 5932
   sp = STACKTOP; //@line 5933
   return;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5936
  return;
 } else {
  $$0 = $5; //@line 5939
 }
 do {
  if (!$$0) {
   label = 8; //@line 5944
   break;
  }
  $10 = $$0 + 12 | 0; //@line 5947
  $$0 = HEAP32[$10 >> 2] | 0; //@line 5948
 } while (($$0 | 0) != ($1 | 0));
 if ((label | 0) == 8) {
  return;
 }
 HEAP32[$10 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 5961
 return;
}
function __ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_171($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $4 = 0, $5 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 30021
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30025
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 30026
 $8 = HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] | 0; //@line 30029
 $10 = HEAP8[$4 + 776 >> 0] | 0; //@line 30031
 $12 = HEAP8[$4 + 744 >> 0] | 0; //@line 30033
 $14 = HEAP32[$4 + 740 >> 2] | 0; //@line 30035
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 30037
 FUNCTION_TABLE_viiiii[$8 & 7]($5, $10, $12, $14, $4 + 824 | 0); //@line 30038
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 525; //@line 30041
  sp = STACKTOP; //@line 30042
  return;
 }
 ___async_unwind = 0; //@line 30045
 HEAP32[$ReallocAsyncCtx2 >> 2] = 525; //@line 30046
 sp = STACKTOP; //@line 30047
 return;
}
function __ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_172($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $4 = 0, $5 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 30053
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30057
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 30058
 $8 = HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] | 0; //@line 30061
 $10 = HEAP8[$4 + 776 >> 0] | 0; //@line 30063
 $12 = HEAP8[$4 + 744 >> 0] | 0; //@line 30065
 $14 = HEAP32[$4 + 740 >> 2] | 0; //@line 30067
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 30069
 FUNCTION_TABLE_viiiii[$8 & 7]($5, $10, $12, $14, $4 + 824 | 0); //@line 30070
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 522; //@line 30073
  sp = STACKTOP; //@line 30074
  return;
 }
 ___async_unwind = 0; //@line 30077
 HEAP32[$ReallocAsyncCtx >> 2] = 522; //@line 30078
 sp = STACKTOP; //@line 30079
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $12 = 0, $15 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17586
 $5 = HEAP32[$0 + 4 >> 2] | 0; //@line 17588
 $6 = $5 >> 8; //@line 17589
 if (!($5 & 1)) {
  $$0 = $6; //@line 17593
 } else {
  $$0 = HEAP32[(HEAP32[$2 >> 2] | 0) + $6 >> 2] | 0; //@line 17598
 }
 $12 = HEAP32[$0 >> 2] | 0; //@line 17600
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 28 >> 2] | 0; //@line 17603
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 17608
 FUNCTION_TABLE_viiii[$15 & 7]($12, $1, $2 + $$0 | 0, $5 & 2 | 0 ? $3 : 2); //@line 17609
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 726; //@line 17612
  sp = STACKTOP; //@line 17613
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 17616
  return;
 }
}
function __ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv__async_cb_344($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 25919
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25923
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25925
 $8 = HEAP16[$0 + 16 >> 1] | 0; //@line 25927
 $10 = HEAP16[$0 + 18 >> 1] | 0; //@line 25929
 $12 = HEAP8[$0 + 20 >> 0] | 0; //@line 25931
 $13 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 25933
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 25934
 FUNCTION_TABLE_viiiii[$13 & 7]($4, $6, $8, $10, $12); //@line 25935
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 364; //@line 25938
  sp = STACKTOP; //@line 25939
  return;
 }
 ___async_unwind = 0; //@line 25942
 HEAP32[$ReallocAsyncCtx >> 2] = 364; //@line 25943
 sp = STACKTOP; //@line 25944
 return;
}
function __ZN16SX1276_LoRaRadio4sendEPhh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 374
 switch (HEAP8[$0 + 689 >> 0] | 0) {
 case 0:
  {
   _emscripten_asm_const_iiiiiii(0, HEAP32[$0 + 692 >> 2] | 0, HEAP8[$0 + 696 >> 0] | 0, HEAP32[$0 + 704 >> 2] | 0, HEAP32[$0 + 712 >> 2] | 0, $1 | 0, $2 & 255 | 0) | 0; //@line 389
   break;
  }
 case 1:
  {
   _emscripten_asm_const_iiiiiii(1, HEAP32[$0 + 692 >> 2] | 0, HEAP8[$0 + 748 >> 0] | 0, HEAP32[$0 + 752 >> 2] | 0, HEAP32[$0 + 756 >> 2] | 0, $1 | 0, $2 & 255 | 0) | 0; //@line 403
   break;
  }
 default:
  {}
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 409
 __ZN16SX1276_LoRaRadio8transmitEj($0, 0); //@line 410
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 52; //@line 413
  sp = STACKTOP; //@line 414
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 417
  return;
 }
}
function __ZN12LoRaWANStack12add_channelsERK16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 9153
 STACKTOP = STACKTOP + 16 | 0; //@line 9154
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 9154
 if (!(HEAP32[$0 + 1876 >> 2] | 0)) {
  _mbed_tracef(2, 12356, 13306, sp); //@line 9160
  $$0 = -1012; //@line 9161
  STACKTOP = sp; //@line 9162
  return $$0 | 0; //@line 9162
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 9165
 $6 = __ZN7LoRaMac16add_channel_planERK16lora_channelplan($0 + 4 | 0, $1) | 0; //@line 9166
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 266; //@line 9169
  sp = STACKTOP; //@line 9170
  STACKTOP = sp; //@line 9171
  return 0; //@line 9171
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 9173
 $$0 = $6; //@line 9174
 STACKTOP = sp; //@line 9175
 return $$0 | 0; //@line 9175
}
function __ZN7LoRaPHY14remove_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $15 = 0, $25 = 0, $4 = 0, $5 = 0;
 $4 = $1 & 255; //@line 23925
 $5 = $4 >>> 4; //@line 23926
 $10 = 1 << ($4 & 15); //@line 23931
 if ($10 & (HEAPU16[(HEAP32[$0 + 124 >> 2] | 0) + ($5 << 1) >> 1] | 0) | 0) {
  $$0 = 0; //@line 23935
  return $$0 | 0; //@line 23936
 }
 $15 = (HEAP32[$0 + 112 >> 2] | 0) + ($4 * 12 | 0) | 0; //@line 23940
 HEAP32[$15 >> 2] = 0; //@line 23941
 HEAP32[$15 + 4 >> 2] = 0; //@line 23941
 HEAP32[$15 + 8 >> 2] = 0; //@line 23941
 if (!((HEAPU8[$0 + 20 >> 0] | 0) > ($1 & 255) ? (($1 & 255) >>> 4 & 255) <= (HEAPU8[$0 + 128 >> 0] | 0) : 0)) {
  $$0 = 0; //@line 23951
  return $$0 | 0; //@line 23952
 }
 $25 = (HEAP32[$0 + 120 >> 2] | 0) + ($5 << 1) | 0; //@line 23957
 HEAP16[$25 >> 1] = ($10 ^ 65535) & (HEAPU16[$25 >> 1] | 0); //@line 23962
 $$0 = 1; //@line 23963
 return $$0 | 0; //@line 23964
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_277($0) {
 $0 = $0 | 0;
 var $12 = 0, $2 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 10268
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10270
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10274
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10276
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 >> 2]; //@line 10278
 __ZN4mbed6Ticker5setupEy($6, 2e5, 0); //@line 10279
 $9 = HEAP32[$2 >> 2] | 0; //@line 10280
 if (!$9) {
  return;
 }
 $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 10286
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 10287
 FUNCTION_TABLE_vi[$12 & 1023]($8); //@line 10288
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 56; //@line 10291
  sp = STACKTOP; //@line 10292
  return;
 }
 ___async_unwind = 0; //@line 10295
 HEAP32[$ReallocAsyncCtx3 >> 2] = 56; //@line 10296
 sp = STACKTOP; //@line 10297
 return;
}
function _pad_676($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$lcssa = 0, $$011 = 0, $14 = 0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 13688
 STACKTOP = STACKTOP + 256 | 0; //@line 13689
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256); //@line 13689
 $5 = sp; //@line 13690
 if (($2 | 0) > ($3 | 0) & ($4 & 73728 | 0) == 0) {
  $9 = $2 - $3 | 0; //@line 13696
  _memset($5 | 0, $1 << 24 >> 24 | 0, ($9 >>> 0 < 256 ? $9 : 256) | 0) | 0; //@line 13700
  if ($9 >>> 0 > 255) {
   $14 = $2 - $3 | 0; //@line 13703
   $$011 = $9; //@line 13704
   do {
    _out_670($0, $5, 256); //@line 13706
    $$011 = $$011 + -256 | 0; //@line 13707
   } while ($$011 >>> 0 > 255);
   $$0$lcssa = $14 & 255; //@line 13716
  } else {
   $$0$lcssa = $9; //@line 13718
  }
  _out_670($0, $5, $$0$lcssa); //@line 13720
 }
 STACKTOP = sp; //@line 13722
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_281($0) {
 $0 = $0 | 0;
 var $12 = 0, $16 = 0, $2 = 0, $4 = 0, $8 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10628
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10630
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10634
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 10638
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 10642
 if (!(HEAP8[$2 + 770 >> 0] | 0)) {
  HEAP32[$4 >> 2] = 6; //@line 10649
  _mbed_tracef(16, 10968, 11025, $4); //@line 10650
  __ZN16SX1276_LoRaRadio18set_low_power_modeEv($2); //@line 10651
  HEAP32[$8 >> 2] = 6; //@line 10652
  _mbed_tracef(16, 10968, 11054, $8); //@line 10653
  return;
 } else {
  HEAP32[$12 >> 2] = 5; //@line 10656
  _mbed_tracef(16, 10968, 11025, $12); //@line 10657
  __ZN16SX1276_LoRaRadio18set_low_power_modeEv($2); //@line 10658
  HEAP32[$16 >> 2] = 5; //@line 10659
  _mbed_tracef(16, 10968, 11054, $16); //@line 10660
  return;
 }
}
function __ZN7LoRaPHY13get_radio_rngEv__async_cb_216($0) {
 $0 = $0 | 0;
 var $4 = 0, $7 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 3500
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 3504
 $4 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 3505
 $7 = HEAP32[(HEAP32[$4 >> 2] | 0) + 76 >> 2] | 0; //@line 3508
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 3509
 FUNCTION_TABLE_vi[$7 & 1023]($4); //@line 3510
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 568; //@line 3513
  $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 3514
  HEAP32[$8 >> 2] = $AsyncRetVal; //@line 3515
  sp = STACKTOP; //@line 3516
  return;
 }
 ___async_unwind = 0; //@line 3519
 HEAP32[$ReallocAsyncCtx3 >> 2] = 568; //@line 3520
 $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 3521
 HEAP32[$8 >> 2] = $AsyncRetVal; //@line 3522
 sp = STACKTOP; //@line 3523
 return;
}
function __ZN7LoRaMac16get_channel_planER16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $2 = 0, $4 = 0, sp = 0;
 sp = STACKTOP; //@line 17121
 STACKTOP = STACKTOP + 16 | 0; //@line 17122
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 17122
 $2 = sp; //@line 17123
 $4 = $2 + 4 | 0; //@line 17125
 HEAP32[$4 >> 2] = 0; //@line 17127
 HEAP32[$4 + 4 >> 2] = 0; //@line 17130
 HEAP32[$2 >> 2] = 9; //@line 17131
 $10 = __ZN10LoRaMacMib11get_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params($0 + 348 | 0, $2, $0 + 360 | 0) | 0; //@line 17134
 if ($10 | 0) {
  $$0 = $10; //@line 17137
  STACKTOP = sp; //@line 17138
  return $$0 | 0; //@line 17138
 }
 $$0 = __ZN18LoRaMacChannelPlan8get_planER16lora_channelplanPK25loramac_mib_req_confirm_t($0 + 352 | 0, $1, $2) | 0; //@line 17142
 STACKTOP = sp; //@line 17143
 return $$0 | 0; //@line 17143
}
function __ZN7LoRaPHY25setup_public_network_modeEb__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 4873
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4875
 $4 = HEAP8[$0 + 8 >> 0] & 1; //@line 4878
 $5 = HEAP32[$2 >> 2] | 0; //@line 4879
 $8 = HEAP32[(HEAP32[$5 >> 2] | 0) + 48 >> 2] | 0; //@line 4882
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 4883
 FUNCTION_TABLE_vii[$8 & 31]($5, $4); //@line 4884
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 560; //@line 4887
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 4888
  HEAP32[$9 >> 2] = $2; //@line 4889
  sp = STACKTOP; //@line 4890
  return;
 }
 ___async_unwind = 0; //@line 4893
 HEAP32[$ReallocAsyncCtx2 >> 2] = 560; //@line 4894
 $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 4895
 HEAP32[$9 >> 2] = $2; //@line 4896
 sp = STACKTOP; //@line 4897
 return;
}
function _mbedtls_ccm_setkey__async_cb_36($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 20052
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20054
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20056
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20058
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 20060
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 20064
  return;
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 20067
 $9 = _mbedtls_cipher_setkey($2, $4, $6, 1) | 0; //@line 20068
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 584; //@line 20071
  sp = STACKTOP; //@line 20072
  return;
 }
 HEAP32[___async_retval >> 2] = $9; //@line 20076
 ___async_unwind = 0; //@line 20077
 HEAP32[$ReallocAsyncCtx >> 2] = 584; //@line 20078
 sp = STACKTOP; //@line 20079
 return;
}
function __ZN7LoRaPHY13get_radio_rngEv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 3471
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3473
 $3 = HEAP32[$2 >> 2] | 0; //@line 3474
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 36 >> 2] | 0; //@line 3477
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 3478
 $7 = FUNCTION_TABLE_ii[$6 & 15]($3) | 0; //@line 3479
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 567; //@line 3482
  $8 = $ReallocAsyncCtx2 + 4 | 0; //@line 3483
  HEAP32[$8 >> 2] = $2; //@line 3484
  sp = STACKTOP; //@line 3485
  return;
 }
 HEAP32[___async_retval >> 2] = $7; //@line 3489
 ___async_unwind = 0; //@line 3490
 HEAP32[$ReallocAsyncCtx2 >> 2] = 567; //@line 3491
 $8 = $ReallocAsyncCtx2 + 4 | 0; //@line 3492
 HEAP32[$8 >> 2] = $2; //@line 3493
 sp = STACKTOP; //@line 3494
 return;
}
function __ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$unpack$i = 0, $$unpack3$i = 0, $12 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6667
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 6670
 $$unpack3$i = HEAP32[$0 + 4 >> 2] | 0; //@line 6672
 $5 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack3$i >> 1) | 0; //@line 6674
 if (!($$unpack3$i & 1)) {
  $12 = $$unpack$i; //@line 6679
 } else {
  $12 = HEAP32[(HEAP32[$5 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 6684
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6686
 FUNCTION_TABLE_vii[$12 & 31]($5, $1); //@line 6687
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 193; //@line 6690
  sp = STACKTOP; //@line 6691
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6694
  return;
 }
}
function __ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$unpack$i = 0, $$unpack3$i = 0, $12 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8396
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 8399
 $$unpack3$i = HEAP32[$0 + 4 >> 2] | 0; //@line 8401
 $5 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack3$i >> 1) | 0; //@line 8403
 if (!($$unpack3$i & 1)) {
  $12 = $$unpack$i; //@line 8408
 } else {
  $12 = HEAP32[(HEAP32[$5 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 8413
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8415
 FUNCTION_TABLE_vii[$12 & 31]($5, $1); //@line 8416
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 250; //@line 8419
  sp = STACKTOP; //@line 8420
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 8423
  return;
 }
}
function __ZN16SX1276_LoRaRadio8transmitEj__async_cb_248($0) {
 $0 = $0 | 0;
 var $12 = 0, $2 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 8445
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8447
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8451
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 8453
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 >> 2]; //@line 8455
 __ZN4mbed6Ticker5setupEy($6, 1e5, 0); //@line 8456
 $9 = HEAP32[$2 >> 2] | 0; //@line 8457
 if (!$9) {
  return;
 }
 $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 8463
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 8464
 FUNCTION_TABLE_vi[$12 & 1023]($8); //@line 8465
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 97; //@line 8468
  sp = STACKTOP; //@line 8469
  return;
 }
 ___async_unwind = 0; //@line 8472
 HEAP32[$ReallocAsyncCtx3 >> 2] = 97; //@line 8473
 sp = STACKTOP; //@line 8474
 return;
}
function __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_360($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 27104
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27106
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27108
 $6 = HEAP32[$2 + 356 >> 2] | 0; //@line 27110
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 27112
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($6, $2 + 996 | 0, 1e3); //@line 27113
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 472; //@line 27116
  $8 = $ReallocAsyncCtx4 + 4 | 0; //@line 27117
  HEAP32[$8 >> 2] = $4; //@line 27118
  sp = STACKTOP; //@line 27119
  return;
 }
 ___async_unwind = 0; //@line 27122
 HEAP32[$ReallocAsyncCtx4 >> 2] = 472; //@line 27123
 $8 = $ReallocAsyncCtx4 + 4 | 0; //@line 27124
 HEAP32[$8 >> 2] = $4; //@line 27125
 sp = STACKTOP; //@line 27126
 return;
}
function __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_359($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 27076
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27078
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27080
 $6 = HEAP32[$2 + 356 >> 2] | 0; //@line 27082
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 27084
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($6, $2 + 996 | 0, 1e3); //@line 27085
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 474; //@line 27088
  $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 27089
  HEAP32[$8 >> 2] = $4; //@line 27090
  sp = STACKTOP; //@line 27091
  return;
 }
 ___async_unwind = 0; //@line 27094
 HEAP32[$ReallocAsyncCtx3 >> 2] = 474; //@line 27095
 $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 27096
 HEAP32[$8 >> 2] = $4; //@line 27097
 sp = STACKTOP; //@line 27098
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_98($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx26 = 0, sp = 0;
 sp = STACKTOP; //@line 23453
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23457
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23459
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23461
 if (HEAP32[$0 + 4 >> 2] | 0) {
  HEAP32[$6 >> 2] = 6; //@line 23464
  HEAP32[___async_retval >> 2] = $4; //@line 23466
  return;
 }
 $ReallocAsyncCtx26 = _emscripten_realloc_async_context(16) | 0; //@line 23469
 _mbed_assert_internal(13612, 12396, 1245); //@line 23470
 if (!___async) {
  ___async_unwind = 0; //@line 23473
 }
 HEAP32[$ReallocAsyncCtx26 >> 2] = 224; //@line 23475
 HEAP32[$ReallocAsyncCtx26 + 4 >> 2] = $4; //@line 23477
 HEAP32[$ReallocAsyncCtx26 + 8 >> 2] = $6; //@line 23479
 HEAP32[$ReallocAsyncCtx26 + 12 >> 2] = $8; //@line 23481
 sp = STACKTOP; //@line 23482
 return;
}
function __ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$unpack$i = 0, $$unpack3$i = 0, $12 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6716
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 6719
 $$unpack3$i = HEAP32[$0 + 4 >> 2] | 0; //@line 6721
 $5 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack3$i >> 1) | 0; //@line 6723
 if (!($$unpack3$i & 1)) {
  $12 = $$unpack$i; //@line 6728
 } else {
  $12 = HEAP32[(HEAP32[$5 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 6733
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6735
 FUNCTION_TABLE_vii[$12 & 31]($5, $1); //@line 6736
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 194; //@line 6739
  sp = STACKTOP; //@line 6740
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6743
  return;
 }
}
function __ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$unpack$i = 0, $$unpack3$i = 0, $12 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8680
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 8683
 $$unpack3$i = HEAP32[$0 + 4 >> 2] | 0; //@line 8685
 $5 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack3$i >> 1) | 0; //@line 8687
 if (!($$unpack3$i & 1)) {
  $12 = $$unpack$i; //@line 8692
 } else {
  $12 = HEAP32[(HEAP32[$5 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 8697
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8699
 FUNCTION_TABLE_vii[$12 & 31]($5, $1); //@line 8700
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 253; //@line 8703
  sp = STACKTOP; //@line 8704
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 8707
  return;
 }
}
function __ZN12LoRaWANStack16remove_a_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 9208
 STACKTOP = STACKTOP + 16 | 0; //@line 9209
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 9209
 if (!(HEAP32[$0 + 1876 >> 2] | 0)) {
  _mbed_tracef(2, 12356, 13306, sp); //@line 9215
  $$0 = -1012; //@line 9216
  STACKTOP = sp; //@line 9217
  return $$0 | 0; //@line 9217
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 9220
 $6 = __ZN7LoRaMac21remove_single_channelEh($0 + 4 | 0, $1) | 0; //@line 9221
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 268; //@line 9224
  sp = STACKTOP; //@line 9225
  STACKTOP = sp; //@line 9226
  return 0; //@line 9226
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 9228
 $$0 = $6; //@line 9229
 STACKTOP = sp; //@line 9230
 return $$0 | 0; //@line 9230
}
function ___stdio_seek($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $3 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 10983
 STACKTOP = STACKTOP + 32 | 0; //@line 10984
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 10984
 $vararg_buffer = sp; //@line 10985
 $3 = sp + 20 | 0; //@line 10986
 HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2]; //@line 10990
 HEAP32[$vararg_buffer + 4 >> 2] = 0; //@line 10992
 HEAP32[$vararg_buffer + 8 >> 2] = $1; //@line 10994
 HEAP32[$vararg_buffer + 12 >> 2] = $3; //@line 10996
 HEAP32[$vararg_buffer + 16 >> 2] = $2; //@line 10998
 if ((___syscall_ret(___syscall140(140, $vararg_buffer | 0) | 0) | 0) < 0) {
  HEAP32[$3 >> 2] = -1; //@line 11003
  $10 = -1; //@line 11004
 } else {
  $10 = HEAP32[$3 >> 2] | 0; //@line 11007
 }
 STACKTOP = sp; //@line 11009
 return $10 | 0; //@line 11009
}
function __ZN4mbed11InterruptInD0Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 9779
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9781
 $4 = HEAP32[$2 + 52 >> 2] | 0; //@line 9783
 if (!$4) {
  __ZdlPv($2); //@line 9786
  return;
 }
 $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 9791
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 9792
 FUNCTION_TABLE_vi[$8 & 1023]($2 + 40 | 0); //@line 9793
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 106; //@line 9796
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 9797
  HEAP32[$9 >> 2] = $2; //@line 9798
  sp = STACKTOP; //@line 9799
  return;
 }
 ___async_unwind = 0; //@line 9802
 HEAP32[$ReallocAsyncCtx2 >> 2] = 106; //@line 9803
 $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 9804
 HEAP32[$9 >> 2] = $2; //@line 9805
 sp = STACKTOP; //@line 9806
 return;
}
function __ZN12LoRaWANStack17drop_channel_listEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 9180
 STACKTOP = STACKTOP + 16 | 0; //@line 9181
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 9181
 if (!(HEAP32[$0 + 1876 >> 2] | 0)) {
  _mbed_tracef(2, 12356, 13306, sp); //@line 9187
  $$0 = -1012; //@line 9188
  STACKTOP = sp; //@line 9189
  return $$0 | 0; //@line 9189
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 9192
 $5 = __ZN7LoRaMac19remove_channel_planEv($0 + 4 | 0) | 0; //@line 9193
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 267; //@line 9196
  sp = STACKTOP; //@line 9197
  STACKTOP = sp; //@line 9198
  return 0; //@line 9198
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 9200
 $$0 = $5; //@line 9201
 STACKTOP = sp; //@line 9202
 return $$0 | 0; //@line 9202
}
function _mbed_assert_internal($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $AsyncCtx = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 6175
 STACKTOP = STACKTOP + 16 | 0; //@line 6176
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 6176
 $vararg_buffer = sp; //@line 6177
 HEAP32[$vararg_buffer >> 2] = $0; //@line 6178
 HEAP32[$vararg_buffer + 4 >> 2] = $1; //@line 6180
 HEAP32[$vararg_buffer + 8 >> 2] = $2; //@line 6182
 _mbed_error_printf(15219, $vararg_buffer); //@line 6183
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6184
 _mbed_die(); //@line 6185
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 628; //@line 6188
  sp = STACKTOP; //@line 6189
  STACKTOP = sp; //@line 6190
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6192
  STACKTOP = sp; //@line 6193
  return;
 }
}
function _schedule_interrupt__async_cb_56($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 21018
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21020
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21022
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21024
 $9 = HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0; //@line 21027
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(16) | 0; //@line 21028
 $10 = FUNCTION_TABLE_i[$9 & 7]() | 0; //@line 21029
 if (!___async) {
  HEAP32[___async_retval >> 2] = $10; //@line 21033
  ___async_unwind = 0; //@line 21034
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 622; //@line 21036
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $4; //@line 21038
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $6; //@line 21040
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $2; //@line 21042
 sp = STACKTOP; //@line 21043
 return;
}
function __ZN7LoRaPHY16verify_frequencyEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$01113 = 0, $16 = 0, $3 = 0, $5 = 0, $7 = 0, label = 0;
 $3 = HEAP32[$0 + 72 >> 2] | 0; //@line 24107
 $5 = HEAP8[$0 + 76 >> 0] | 0; //@line 24109
 if (!($5 << 24 >> 24)) {
  $16 = 0; //@line 24112
  return $16 | 0; //@line 24113
 } else {
  $$01113 = 0; //@line 24115
 }
 while (1) {
  $7 = $$01113 & 255; //@line 24118
  if ((HEAP32[$3 + ($7 * 24 | 0) + 20 >> 2] | 0) >>> 0 >= $1 >>> 0) {
   if ((HEAP32[$3 + ($7 * 24 | 0) + 16 >> 2] | 0) >>> 0 <= $1 >>> 0) {
    $16 = 1; //@line 24127
    label = 5; //@line 24128
    break;
   }
  }
  $$01113 = $$01113 + 1 << 24 >> 24; //@line 24132
  if (($$01113 & 255) >= ($5 & 255)) {
   $16 = 0; //@line 24137
   label = 5; //@line 24138
   break;
  }
 }
 if ((label | 0) == 5) {
  return $16 | 0; //@line 24143
 }
 return 0; //@line 24145
}
function __ZN16SX1276_LoRaRadio7standbyEv($0) {
 $0 = $0 | 0;
 var $vararg_buffer1 = 0, $vararg_buffer3 = 0, sp = 0;
 sp = STACKTOP; //@line 102
 STACKTOP = STACKTOP + 32 | 0; //@line 103
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 103
 $vararg_buffer3 = sp + 16 | 0; //@line 104
 $vararg_buffer1 = sp + 8 | 0; //@line 105
 _mbed_tracef(16, 10968, 11720, sp); //@line 107
 __ZN4mbed6Ticker6detachEv($0 + 1048 | 0); //@line 109
 __ZN4mbed6Ticker6detachEv($0 + 1112 | 0); //@line 111
 HEAP32[$vararg_buffer1 >> 2] = 1; //@line 112
 _mbed_tracef(16, 10968, 11025, $vararg_buffer1); //@line 113
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 114
 HEAP32[$vararg_buffer3 >> 2] = 1; //@line 115
 _mbed_tracef(16, 10968, 11054, $vararg_buffer3); //@line 116
 HEAP8[$0 + 688 >> 0] = 0; //@line 118
 STACKTOP = sp; //@line 119
 return;
}
function _printf($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $2 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15767
 STACKTOP = STACKTOP + 16 | 0; //@line 15768
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15768
 $1 = sp; //@line 15769
 HEAP32[$1 >> 2] = $varargs; //@line 15770
 $2 = HEAP32[2586] | 0; //@line 15771
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 15772
 $3 = _vfprintf($2, $0, $1) | 0; //@line 15773
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 698; //@line 15776
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 15778
  sp = STACKTOP; //@line 15779
  STACKTOP = sp; //@line 15780
  return 0; //@line 15780
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 15782
  STACKTOP = sp; //@line 15783
  return $3 | 0; //@line 15783
 }
 return 0; //@line 15785
}
function __ZN7LoRaPHY20put_radio_to_standbyEv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 30520
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30522
 $3 = HEAP32[$2 >> 2] | 0; //@line 30523
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] | 0; //@line 30526
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 30527
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 30528
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 557; //@line 30531
  $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 30532
  HEAP32[$7 >> 2] = $2; //@line 30533
  sp = STACKTOP; //@line 30534
  return;
 }
 ___async_unwind = 0; //@line 30537
 HEAP32[$ReallocAsyncCtx2 >> 2] = 557; //@line 30538
 $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 30539
 HEAP32[$7 >> 2] = $2; //@line 30540
 sp = STACKTOP; //@line 30541
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_90($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx30 = 0, sp = 0;
 sp = STACKTOP; //@line 23166
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23170
 if (HEAP32[$0 + 4 >> 2] | 0) {
  HEAP32[___async_retval >> 2] = -1011; //@line 23174
  return;
 }
 $ReallocAsyncCtx30 = _emscripten_realloc_async_context(8) | 0; //@line 23177
 _mbed_assert_internal(13612, 12396, 1135); //@line 23178
 if (___async) {
  HEAP32[$ReallocAsyncCtx30 >> 2] = 201; //@line 23181
  $6 = $ReallocAsyncCtx30 + 4 | 0; //@line 23182
  HEAP32[$6 >> 2] = $4; //@line 23183
  sp = STACKTOP; //@line 23184
  return;
 }
 ___async_unwind = 0; //@line 23187
 HEAP32[$ReallocAsyncCtx30 >> 2] = 201; //@line 23188
 $6 = $ReallocAsyncCtx30 + 4 | 0; //@line 23189
 HEAP32[$6 >> 2] = $4; //@line 23190
 sp = STACKTOP; //@line 23191
 return;
}
function __ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 9984
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 9994
 $12 = (HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0) != 0; //@line 9996
 $14 = HEAP32[(HEAP32[$0 + 8 >> 2] | 0) + 1108 >> 2] | 0; //@line 9998
 _mbed_tracef(16, 13728, 13796, HEAP32[$0 + 12 >> 2] | 0); //@line 9999
 $15 = HEAP32[$10 >> 2] | 0; //@line 10000
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 10001
 __ZN7LoRaPHY15setup_rx_windowEbj($15, $12, $14); //@line 10002
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 437; //@line 10005
  sp = STACKTOP; //@line 10006
  return;
 }
 ___async_unwind = 0; //@line 10009
 HEAP32[$ReallocAsyncCtx2 >> 2] = 437; //@line 10010
 sp = STACKTOP; //@line 10011
 return;
}
function _snprintf($0, $1, $2, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $varargs = $varargs | 0;
 var $3 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15567
 STACKTOP = STACKTOP + 16 | 0; //@line 15568
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15568
 $3 = sp; //@line 15569
 HEAP32[$3 >> 2] = $varargs; //@line 15570
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 15571
 $4 = _vsnprintf($0, $1, $2, $3) | 0; //@line 15572
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 694; //@line 15575
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 15577
  sp = STACKTOP; //@line 15578
  STACKTOP = sp; //@line 15579
  return 0; //@line 15579
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 15581
  STACKTOP = sp; //@line 15582
  return $4 | 0; //@line 15582
 }
 return 0; //@line 15584
}
function _initialize__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 22103
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22105
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22107
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22109
 $9 = HEAP32[(HEAP32[$6 >> 2] | 0) + 24 >> 2] | 0; //@line 22112
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 22113
 $10 = FUNCTION_TABLE_i[$9 & 7]() | 0; //@line 22114
 if (!___async) {
  HEAP32[___async_retval >> 2] = $10; //@line 22118
  ___async_unwind = 0; //@line 22119
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 612; //@line 22121
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 22123
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 22125
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 22127
 sp = STACKTOP; //@line 22128
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_94($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx28 = 0, sp = 0;
 sp = STACKTOP; //@line 23300
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23304
 if (HEAP32[$0 + 4 >> 2] | 0) {
  HEAP32[___async_retval >> 2] = 0; //@line 23308
  return;
 }
 $ReallocAsyncCtx28 = _emscripten_realloc_async_context(8) | 0; //@line 23311
 _mbed_assert_internal(13612, 12396, 1217); //@line 23312
 if (___async) {
  HEAP32[$ReallocAsyncCtx28 >> 2] = 215; //@line 23315
  $6 = $ReallocAsyncCtx28 + 4 | 0; //@line 23316
  HEAP32[$6 >> 2] = $4; //@line 23317
  sp = STACKTOP; //@line 23318
  return;
 }
 ___async_unwind = 0; //@line 23321
 HEAP32[$ReallocAsyncCtx28 >> 2] = 215; //@line 23322
 $6 = $ReallocAsyncCtx28 + 4 | 0; //@line 23323
 HEAP32[$6 >> 2] = $4; //@line 23324
 sp = STACKTOP; //@line 23325
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_92($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx29 = 0, sp = 0;
 sp = STACKTOP; //@line 23233
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23237
 if (HEAP32[$0 + 4 >> 2] | 0) {
  HEAP32[___async_retval >> 2] = 0; //@line 23241
  return;
 }
 $ReallocAsyncCtx29 = _emscripten_realloc_async_context(8) | 0; //@line 23244
 _mbed_assert_internal(13612, 12396, 1180); //@line 23245
 if (___async) {
  HEAP32[$ReallocAsyncCtx29 >> 2] = 206; //@line 23248
  $6 = $ReallocAsyncCtx29 + 4 | 0; //@line 23249
  HEAP32[$6 >> 2] = $4; //@line 23250
  sp = STACKTOP; //@line 23251
  return;
 }
 ___async_unwind = 0; //@line 23254
 HEAP32[$ReallocAsyncCtx29 >> 2] = 206; //@line 23255
 $6 = $ReallocAsyncCtx29 + 4 | 0; //@line 23256
 HEAP32[$6 >> 2] = $4; //@line 23257
 sp = STACKTOP; //@line 23258
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv($0) {
 $0 = $0 | 0;
 var $$unpack$i = 0, $$unpack2$i = 0, $11 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10553
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 10556
 $$unpack2$i = HEAP32[$0 + 4 >> 2] | 0; //@line 10558
 $4 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack2$i >> 1) | 0; //@line 10560
 if (!($$unpack2$i & 1)) {
  $11 = $$unpack$i; //@line 10565
 } else {
  $11 = HEAP32[(HEAP32[$4 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 10570
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10572
 FUNCTION_TABLE_vi[$11 & 1023]($4); //@line 10573
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 309; //@line 10576
  sp = STACKTOP; //@line 10577
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10580
  return;
 }
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv($0) {
 $0 = $0 | 0;
 var $$unpack$i = 0, $$unpack2$i = 0, $11 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1864
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 1867
 $$unpack2$i = HEAP32[$0 + 4 >> 2] | 0; //@line 1869
 $4 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack2$i >> 1) | 0; //@line 1871
 if (!($$unpack2$i & 1)) {
  $11 = $$unpack$i; //@line 1876
 } else {
  $11 = HEAP32[(HEAP32[$4 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 1881
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 1883
 FUNCTION_TABLE_vi[$11 & 1023]($4); //@line 1884
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 93; //@line 1887
  sp = STACKTOP; //@line 1888
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1891
  return;
 }
}
function _mbed_vtracef__async_cb_126($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 25797
 HEAP32[187] = HEAP32[185]; //@line 25799
 $2 = HEAP32[193] | 0; //@line 25800
 if (!$2) {
  return;
 }
 $4 = HEAP32[194] | 0; //@line 25805
 HEAP32[194] = 0; //@line 25806
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 25807
 FUNCTION_TABLE_v[$2 & 15](); //@line 25808
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 149; //@line 25811
  $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 25812
  HEAP32[$5 >> 2] = $4; //@line 25813
  sp = STACKTOP; //@line 25814
  return;
 }
 ___async_unwind = 0; //@line 25817
 HEAP32[$ReallocAsyncCtx8 >> 2] = 149; //@line 25818
 $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 25819
 HEAP32[$5 >> 2] = $4; //@line 25820
 sp = STACKTOP; //@line 25821
 return;
}
function _mbed_vtracef__async_cb_123($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 25533
 HEAP32[187] = HEAP32[185]; //@line 25535
 $2 = HEAP32[193] | 0; //@line 25536
 if (!$2) {
  return;
 }
 $4 = HEAP32[194] | 0; //@line 25541
 HEAP32[194] = 0; //@line 25542
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 25543
 FUNCTION_TABLE_v[$2 & 15](); //@line 25544
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 149; //@line 25547
  $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 25548
  HEAP32[$5 >> 2] = $4; //@line 25549
  sp = STACKTOP; //@line 25550
  return;
 }
 ___async_unwind = 0; //@line 25553
 HEAP32[$ReallocAsyncCtx8 >> 2] = 149; //@line 25554
 $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 25555
 HEAP32[$5 >> 2] = $4; //@line 25556
 sp = STACKTOP; //@line 25557
 return;
}
function _mbed_vtracef__async_cb_122($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 25503
 HEAP32[187] = HEAP32[185]; //@line 25505
 $2 = HEAP32[193] | 0; //@line 25506
 if (!$2) {
  return;
 }
 $4 = HEAP32[194] | 0; //@line 25511
 HEAP32[194] = 0; //@line 25512
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 25513
 FUNCTION_TABLE_v[$2 & 15](); //@line 25514
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 149; //@line 25517
  $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 25518
  HEAP32[$5 >> 2] = $4; //@line 25519
  sp = STACKTOP; //@line 25520
  return;
 }
 ___async_unwind = 0; //@line 25523
 HEAP32[$ReallocAsyncCtx8 >> 2] = 149; //@line 25524
 $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 25525
 HEAP32[$5 >> 2] = $4; //@line 25526
 sp = STACKTOP; //@line 25527
 return;
}
function _mbedtls_ccm_setkey__async_cb_37($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 20085
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20087
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20089
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20091
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20093
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 20094
 $9 = _mbedtls_cipher_setup($2, $4) | 0; //@line 20095
 if (!___async) {
  HEAP32[___async_retval >> 2] = $9; //@line 20099
  ___async_unwind = 0; //@line 20100
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 583; //@line 20102
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 20104
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 20106
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $8; //@line 20108
 sp = STACKTOP; //@line 20109
 return;
}
function _mbedtls_cipher_info_from_values($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$010 = 0, $$011 = 0, $3 = 0, $6 = 0, label = 0;
 $3 = HEAP32[2390] | 0; //@line 2183
 if (!$3) {
  $$010 = 0; //@line 2186
  return $$010 | 0; //@line 2187
 } else {
  $$011 = 9556; //@line 2189
  $6 = $3; //@line 2189
 }
 while (1) {
  if ((HEAP32[HEAP32[$6 + 28 >> 2] >> 2] | 0) == ($0 | 0)) {
   if ((HEAP32[$6 + 8 >> 2] | 0) == ($1 | 0)) {
    if ((HEAP32[$6 + 4 >> 2] | 0) == ($2 | 0)) {
     $$010 = $6; //@line 2205
     label = 6; //@line 2206
     break;
    }
   }
  }
  $6 = HEAP32[$$011 + 12 >> 2] | 0; //@line 2213
  if (!$6) {
   $$010 = 0; //@line 2216
   label = 6; //@line 2217
   break;
  } else {
   $$011 = $$011 + 8 | 0; //@line 2220
  }
 }
 if ((label | 0) == 6) {
  return $$010 | 0; //@line 2224
 }
 return 0; //@line 2226
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_192($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 35175
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 35179
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 35181
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 35183
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 35185
 $11 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 35187
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 35188
 FUNCTION_TABLE_vii[$11 & 31]($4, $6); //@line 35189
 if (!___async) {
  ___async_unwind = 0; //@line 35192
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 406; //@line 35194
 HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $8; //@line 35196
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $10; //@line 35198
 sp = STACKTOP; //@line 35199
 return;
}
function __ZN7LoRaPHY18put_radio_to_sleepEv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 3284
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3286
 $3 = HEAP32[$2 >> 2] | 0; //@line 3287
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] | 0; //@line 3290
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 3291
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 3292
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 554; //@line 3295
  $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 3296
  HEAP32[$7 >> 2] = $2; //@line 3297
  sp = STACKTOP; //@line 3298
  return;
 }
 ___async_unwind = 0; //@line 3301
 HEAP32[$ReallocAsyncCtx2 >> 2] = 554; //@line 3302
 $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 3303
 HEAP32[$7 >> 2] = $2; //@line 3304
 sp = STACKTOP; //@line 3305
 return;
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb($0) {
 $0 = $0 | 0;
 var $$054$ = 0, $13 = 0, $6 = 0, $8 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29550
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29552
 $$054$ = (HEAP32[___async_retval >> 2] | 0) == 0 ? HEAP32[$0 + 4 >> 2] | 0 : -1014; //@line 29558
 $13 = HEAP32[HEAP32[$0 + 8 >> 2] >> 2] | 0; //@line 29559
 HEAP8[(HEAPU16[$6 >> 1] | 0) + ($8 + 381) >> 0] = $13; //@line 29564
 HEAP8[(HEAPU16[$6 >> 1] | 0) + 1 + ($8 + 381) >> 0] = $13 >>> 8; //@line 29571
 HEAP8[(HEAPU16[$6 >> 1] | 0) + 2 + ($8 + 381) >> 0] = $13 >>> 16; //@line 29578
 HEAP8[(HEAPU16[$6 >> 1] | 0) + 3 + ($8 + 381) >> 0] = $13 >>> 24; //@line 29585
 HEAP16[$6 >> 1] = (HEAPU16[$6 >> 1] | 0) + 4; //@line 29590
 HEAP32[___async_retval >> 2] = $$054$; //@line 29592
 return;
}
function _sprintf($0, $1, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $varargs = $varargs | 0;
 var $2 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15689
 STACKTOP = STACKTOP + 16 | 0; //@line 15690
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15690
 $2 = sp; //@line 15691
 HEAP32[$2 >> 2] = $varargs; //@line 15692
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 15693
 $3 = _vsprintf($0, $1, $2) | 0; //@line 15694
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 696; //@line 15697
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 15699
  sp = STACKTOP; //@line 15700
  STACKTOP = sp; //@line 15701
  return 0; //@line 15701
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 15703
  STACKTOP = sp; //@line 15704
  return $3 | 0; //@line 15704
 }
 return 0; //@line 15706
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $13 = 0, $4 = 0, $5 = 0;
 $4 = $1 + 16 | 0; //@line 16352
 $5 = HEAP32[$4 >> 2] | 0; //@line 16353
 do {
  if (!$5) {
   HEAP32[$4 >> 2] = $2; //@line 16357
   HEAP32[$1 + 24 >> 2] = $3; //@line 16359
   HEAP32[$1 + 36 >> 2] = 1; //@line 16361
  } else {
   if (($5 | 0) != ($2 | 0)) {
    $13 = $1 + 36 | 0; //@line 16365
    HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + 1; //@line 16368
    HEAP32[$1 + 24 >> 2] = 2; //@line 16370
    HEAP8[$1 + 54 >> 0] = 1; //@line 16372
    break;
   }
   $10 = $1 + 24 | 0; //@line 16375
   if ((HEAP32[$10 >> 2] | 0) == 2) {
    HEAP32[$10 >> 2] = $3; //@line 16379
   }
  }
 } while (0);
 return;
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8755
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 8757
 $3 = __ZN7LoRaMac22get_phy_event_handlersEv($0 + 4 | 0) | 0; //@line 8758
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 255; //@line 8761
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 8763
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 8765
  sp = STACKTOP; //@line 8766
  return 0; //@line 8767
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 8769
  $6 = $0 + 1928 | 0; //@line 8770
  HEAP32[$6 >> 2] = $3; //@line 8771
  __ZN7LoRaPHY18set_radio_instanceER9LoRaRadio($0 + 1336 | 0, $1); //@line 8773
  return HEAP32[$6 >> 2] | 0; //@line 8775
 }
 return 0; //@line 8777
}
function __ZN4mbed5Timer5startEv($0) {
 $0 = $0 | 0;
 var $13 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2937
 if (HEAP32[$0 >> 2] | 0) {
  return;
 }
 if (HEAP8[$0 + 28 >> 0] | 0) {}
 $7 = HEAP32[$0 + 24 >> 2] | 0; //@line 2949
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 2950
 $8 = _ticker_read_us($7) | 0; //@line 2951
 $9 = tempRet0; //@line 2952
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 121; //@line 2955
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2957
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 2959
  sp = STACKTOP; //@line 2960
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2963
 $13 = $0 + 8 | 0; //@line 2965
 HEAP32[$13 >> 2] = $8; //@line 2967
 HEAP32[$13 + 4 >> 2] = $9; //@line 2970
 HEAP32[$0 >> 2] = 1; //@line 2971
 return;
}
function __ZN7LoRaMac10disconnectEv__async_cb_251($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 8602
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8606
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 8607
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 8609
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($5, $4 + 1076 | 0); //@line 8610
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 462; //@line 8613
  $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 8614
  HEAP32[$7 >> 2] = $4; //@line 8615
  sp = STACKTOP; //@line 8616
  return;
 }
 ___async_unwind = 0; //@line 8619
 HEAP32[$ReallocAsyncCtx2 >> 2] = 462; //@line 8620
 $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 8621
 HEAP32[$7 >> 2] = $4; //@line 8622
 sp = STACKTOP; //@line 8623
 return;
}
function __ZN7LoRaMacD2Ev($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 9719
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9721
 __ZN12radio_eventsD2Ev($0 + 1212 | 0); //@line 9722
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 275; //@line 9725
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 9727
  sp = STACKTOP; //@line 9728
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 9731
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 9733
 __ZN14lorawan_timersD2Ev($0 + 980 | 0); //@line 9734
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 276; //@line 9737
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 9739
  sp = STACKTOP; //@line 9740
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 9743
  return;
 }
}
function __ZN7LoRaPHY18dl_channel_requestEP23dl_channel_req_params_s__async_cb($0) {
 $0 = $0 | 0;
 var $$ = 0, $$09 = 0, $$1 = 0, $11 = 0, $19 = 0, $6 = 0, $9 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27864
 $$ = HEAP8[___async_retval >> 0] & 1 ? 3 : 2; //@line 27868
 $9 = HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 112 >> 2] | 0; //@line 27870
 $11 = HEAPU8[HEAP32[$0 + 8 >> 2] >> 0] | 0; //@line 27872
 $$1 = (HEAP32[$9 + ($11 * 12 | 0) >> 2] | 0) == 0 ? $$ & 1 : $$; //@line 27877
 if ($$1 << 24 >> 24 != 3) {
  $$09 = $$1; //@line 27880
  $19 = ___async_retval; //@line 27881
  HEAP8[$19 >> 0] = $$09; //@line 27882
  return;
 }
 HEAP32[$9 + ($11 * 12 | 0) + 4 >> 2] = HEAP32[$6 >> 2]; //@line 27887
 $$09 = 3; //@line 27888
 $19 = ___async_retval; //@line 27889
 HEAP8[$19 >> 0] = $$09; //@line 27890
 return;
}
function _equeue_post($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $4 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3437
 $4 = _equeue_tick() | 0; //@line 3439
 HEAP32[$2 + -4 >> 2] = $1; //@line 3441
 $6 = $2 + -16 | 0; //@line 3442
 HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + $4; //@line 3445
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 3446
 $9 = _equeue_enqueue($0, $2 + -36 | 0, $4) | 0; //@line 3447
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 129; //@line 3450
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 3452
  sp = STACKTOP; //@line 3453
  return 0; //@line 3454
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3456
  _equeue_sema_signal($0 + 48 | 0); //@line 3458
  return $9 | 0; //@line 3459
 }
 return 0; //@line 3461
}
function _strcmp($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $2 = 0, $3 = 0, $8 = 0, $9 = 0;
 $2 = HEAP8[$0 >> 0] | 0; //@line 11090
 $3 = HEAP8[$1 >> 0] | 0; //@line 11091
 if ($2 << 24 >> 24 == 0 ? 1 : $2 << 24 >> 24 != $3 << 24 >> 24) {
  $$lcssa = $3; //@line 11096
  $$lcssa8 = $2; //@line 11096
 } else {
  $$011 = $1; //@line 11098
  $$0710 = $0; //@line 11098
  do {
   $$0710 = $$0710 + 1 | 0; //@line 11100
   $$011 = $$011 + 1 | 0; //@line 11101
   $8 = HEAP8[$$0710 >> 0] | 0; //@line 11102
   $9 = HEAP8[$$011 >> 0] | 0; //@line 11103
  } while (!($8 << 24 >> 24 == 0 ? 1 : $8 << 24 >> 24 != $9 << 24 >> 24));
  $$lcssa = $9; //@line 11108
  $$lcssa8 = $8; //@line 11108
 }
 return ($$lcssa8 & 255) - ($$lcssa & 255) | 0; //@line 11118
}
function __ZSt11__terminatePFvvE($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 16902
 STACKTOP = STACKTOP + 16 | 0; //@line 16903
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16903
 $vararg_buffer = sp; //@line 16904
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 16905
 FUNCTION_TABLE_v[$0 & 15](); //@line 16906
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 716; //@line 16909
  HEAP32[$AsyncCtx + 4 >> 2] = $vararg_buffer; //@line 16911
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 16913
  sp = STACKTOP; //@line 16914
  STACKTOP = sp; //@line 16915
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 16917
  _abort_message(19413, $vararg_buffer); //@line 16918
 }
}
function __ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb_272($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 9827
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9831
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 9833
 $8 = HEAP8[$0 + 13 >> 0] | 0; //@line 9835
 $9 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 9837
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 9838
 FUNCTION_TABLE_viii[$9 & 7]($4, $6, $8); //@line 9839
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 245; //@line 9842
  sp = STACKTOP; //@line 9843
  return;
 }
 ___async_unwind = 0; //@line 9846
 HEAP32[$ReallocAsyncCtx >> 2] = 245; //@line 9847
 sp = STACKTOP; //@line 9848
 return;
}
function _serial_putc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 6774
 $2 = HEAP32[2586] | 0; //@line 6775
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6776
 _putc($1, $2) | 0; //@line 6777
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 650; //@line 6780
  HEAP32[$AsyncCtx3 + 4 >> 2] = $2; //@line 6782
  sp = STACKTOP; //@line 6783
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 6786
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6787
 _fflush($2) | 0; //@line 6788
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 651; //@line 6791
  sp = STACKTOP; //@line 6792
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6795
  return;
 }
}
function _memcmp($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $14 = 0, $4 = 0, $5 = 0;
 L1 : do {
  if (!$2) {
   $14 = 0; //@line 15532
  } else {
   $$01318 = $0; //@line 15534
   $$01417 = $2; //@line 15534
   $$019 = $1; //@line 15534
   while (1) {
    $4 = HEAP8[$$01318 >> 0] | 0; //@line 15536
    $5 = HEAP8[$$019 >> 0] | 0; //@line 15537
    if ($4 << 24 >> 24 != $5 << 24 >> 24) {
     break;
    }
    $$01417 = $$01417 + -1 | 0; //@line 15542
    if (!$$01417) {
     $14 = 0; //@line 15547
     break L1;
    } else {
     $$01318 = $$01318 + 1 | 0; //@line 15550
     $$019 = $$019 + 1 | 0; //@line 15550
    }
   }
   $14 = ($4 & 255) - ($5 & 255) | 0; //@line 15556
  }
 } while (0);
 return $14 | 0; //@line 15559
}
function ___stdout_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $14 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 11042
 STACKTOP = STACKTOP + 32 | 0; //@line 11043
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 11043
 $vararg_buffer = sp; //@line 11044
 HEAP32[$0 + 36 >> 2] = 9; //@line 11047
 if (!(HEAP32[$0 >> 2] & 64)) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2]; //@line 11055
  HEAP32[$vararg_buffer + 4 >> 2] = 21523; //@line 11057
  HEAP32[$vararg_buffer + 8 >> 2] = sp + 16; //@line 11059
  if (___syscall54(54, $vararg_buffer | 0) | 0) {
   HEAP8[$0 + 75 >> 0] = -1; //@line 11064
  }
 }
 $14 = ___stdio_write($0, $1, $2) | 0; //@line 11067
 STACKTOP = sp; //@line 11068
 return $14 | 0; //@line 11068
}
function _mbed_die__async_cb_380($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 27785
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27787
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 27789
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(8) | 0; //@line 27790
 _wait_ms(150); //@line 27791
 if (___async) {
  HEAP32[$ReallocAsyncCtx14 >> 2] = 631; //@line 27794
  $4 = $ReallocAsyncCtx14 + 4 | 0; //@line 27795
  HEAP32[$4 >> 2] = $2; //@line 27796
  sp = STACKTOP; //@line 27797
  return;
 }
 ___async_unwind = 0; //@line 27800
 HEAP32[$ReallocAsyncCtx14 >> 2] = 631; //@line 27801
 $4 = $ReallocAsyncCtx14 + 4 | 0; //@line 27802
 HEAP32[$4 >> 2] = $2; //@line 27803
 sp = STACKTOP; //@line 27804
 return;
}
function _mbed_die__async_cb_379($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 27760
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27762
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 27764
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(8) | 0; //@line 27765
 _wait_ms(150); //@line 27766
 if (___async) {
  HEAP32[$ReallocAsyncCtx13 >> 2] = 632; //@line 27769
  $4 = $ReallocAsyncCtx13 + 4 | 0; //@line 27770
  HEAP32[$4 >> 2] = $2; //@line 27771
  sp = STACKTOP; //@line 27772
  return;
 }
 ___async_unwind = 0; //@line 27775
 HEAP32[$ReallocAsyncCtx13 >> 2] = 632; //@line 27776
 $4 = $ReallocAsyncCtx13 + 4 | 0; //@line 27777
 HEAP32[$4 >> 2] = $2; //@line 27778
 sp = STACKTOP; //@line 27779
 return;
}
function _mbed_die__async_cb_378($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 27735
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27737
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 27739
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 27740
 _wait_ms(150); //@line 27741
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 633; //@line 27744
  $4 = $ReallocAsyncCtx12 + 4 | 0; //@line 27745
  HEAP32[$4 >> 2] = $2; //@line 27746
  sp = STACKTOP; //@line 27747
  return;
 }
 ___async_unwind = 0; //@line 27750
 HEAP32[$ReallocAsyncCtx12 >> 2] = 633; //@line 27751
 $4 = $ReallocAsyncCtx12 + 4 | 0; //@line 27752
 HEAP32[$4 >> 2] = $2; //@line 27753
 sp = STACKTOP; //@line 27754
 return;
}
function _mbed_die__async_cb_377($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 27710
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27712
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 27714
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(8) | 0; //@line 27715
 _wait_ms(150); //@line 27716
 if (___async) {
  HEAP32[$ReallocAsyncCtx11 >> 2] = 634; //@line 27719
  $4 = $ReallocAsyncCtx11 + 4 | 0; //@line 27720
  HEAP32[$4 >> 2] = $2; //@line 27721
  sp = STACKTOP; //@line 27722
  return;
 }
 ___async_unwind = 0; //@line 27725
 HEAP32[$ReallocAsyncCtx11 >> 2] = 634; //@line 27726
 $4 = $ReallocAsyncCtx11 + 4 | 0; //@line 27727
 HEAP32[$4 >> 2] = $2; //@line 27728
 sp = STACKTOP; //@line 27729
 return;
}
function _mbed_die__async_cb_376($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 27685
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27687
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 27689
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 27690
 _wait_ms(150); //@line 27691
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 635; //@line 27694
  $4 = $ReallocAsyncCtx10 + 4 | 0; //@line 27695
  HEAP32[$4 >> 2] = $2; //@line 27696
  sp = STACKTOP; //@line 27697
  return;
 }
 ___async_unwind = 0; //@line 27700
 HEAP32[$ReallocAsyncCtx10 >> 2] = 635; //@line 27701
 $4 = $ReallocAsyncCtx10 + 4 | 0; //@line 27702
 HEAP32[$4 >> 2] = $2; //@line 27703
 sp = STACKTOP; //@line 27704
 return;
}
function _mbed_tracef($0, $1, $2, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $varargs = $varargs | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4600
 STACKTOP = STACKTOP + 16 | 0; //@line 4601
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 4601
 $3 = sp; //@line 4602
 HEAP32[$3 >> 2] = $varargs; //@line 4603
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 4604
 _mbed_vtracef($0, $1, $2, $3); //@line 4605
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 138; //@line 4608
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 4610
  sp = STACKTOP; //@line 4611
  STACKTOP = sp; //@line 4612
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4614
  STACKTOP = sp; //@line 4615
  return;
 }
}
function _mbed_die__async_cb_375($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 27660
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27662
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 27664
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(8) | 0; //@line 27665
 _wait_ms(150); //@line 27666
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 636; //@line 27669
  $4 = $ReallocAsyncCtx9 + 4 | 0; //@line 27670
  HEAP32[$4 >> 2] = $2; //@line 27671
  sp = STACKTOP; //@line 27672
  return;
 }
 ___async_unwind = 0; //@line 27675
 HEAP32[$ReallocAsyncCtx9 >> 2] = 636; //@line 27676
 $4 = $ReallocAsyncCtx9 + 4 | 0; //@line 27677
 HEAP32[$4 >> 2] = $2; //@line 27678
 sp = STACKTOP; //@line 27679
 return;
}
function _mbed_die__async_cb_374($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 27635
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27637
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 27639
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 27640
 _wait_ms(400); //@line 27641
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 637; //@line 27644
  $4 = $ReallocAsyncCtx8 + 4 | 0; //@line 27645
  HEAP32[$4 >> 2] = $2; //@line 27646
  sp = STACKTOP; //@line 27647
  return;
 }
 ___async_unwind = 0; //@line 27650
 HEAP32[$ReallocAsyncCtx8 >> 2] = 637; //@line 27651
 $4 = $ReallocAsyncCtx8 + 4 | 0; //@line 27652
 HEAP32[$4 >> 2] = $2; //@line 27653
 sp = STACKTOP; //@line 27654
 return;
}
function _mbed_die__async_cb_373($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 27610
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27612
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 27614
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(8) | 0; //@line 27615
 _wait_ms(400); //@line 27616
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 638; //@line 27619
  $4 = $ReallocAsyncCtx7 + 4 | 0; //@line 27620
  HEAP32[$4 >> 2] = $2; //@line 27621
  sp = STACKTOP; //@line 27622
  return;
 }
 ___async_unwind = 0; //@line 27625
 HEAP32[$ReallocAsyncCtx7 >> 2] = 638; //@line 27626
 $4 = $ReallocAsyncCtx7 + 4 | 0; //@line 27627
 HEAP32[$4 >> 2] = $2; //@line 27628
 sp = STACKTOP; //@line 27629
 return;
}
function _mbed_die__async_cb_372($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 27585
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27587
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 27589
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 27590
 _wait_ms(400); //@line 27591
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 639; //@line 27594
  $4 = $ReallocAsyncCtx6 + 4 | 0; //@line 27595
  HEAP32[$4 >> 2] = $2; //@line 27596
  sp = STACKTOP; //@line 27597
  return;
 }
 ___async_unwind = 0; //@line 27600
 HEAP32[$ReallocAsyncCtx6 >> 2] = 639; //@line 27601
 $4 = $ReallocAsyncCtx6 + 4 | 0; //@line 27602
 HEAP32[$4 >> 2] = $2; //@line 27603
 sp = STACKTOP; //@line 27604
 return;
}
function _mbed_die__async_cb_371($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 27560
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27562
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 27564
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 27565
 _wait_ms(400); //@line 27566
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 640; //@line 27569
  $4 = $ReallocAsyncCtx5 + 4 | 0; //@line 27570
  HEAP32[$4 >> 2] = $2; //@line 27571
  sp = STACKTOP; //@line 27572
  return;
 }
 ___async_unwind = 0; //@line 27575
 HEAP32[$ReallocAsyncCtx5 >> 2] = 640; //@line 27576
 $4 = $ReallocAsyncCtx5 + 4 | 0; //@line 27577
 HEAP32[$4 >> 2] = $2; //@line 27578
 sp = STACKTOP; //@line 27579
 return;
}
function _mbed_die__async_cb_370($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 27535
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27537
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 27539
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 27540
 _wait_ms(400); //@line 27541
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 641; //@line 27544
  $4 = $ReallocAsyncCtx4 + 4 | 0; //@line 27545
  HEAP32[$4 >> 2] = $2; //@line 27546
  sp = STACKTOP; //@line 27547
  return;
 }
 ___async_unwind = 0; //@line 27550
 HEAP32[$ReallocAsyncCtx4 >> 2] = 641; //@line 27551
 $4 = $ReallocAsyncCtx4 + 4 | 0; //@line 27552
 HEAP32[$4 >> 2] = $2; //@line 27553
 sp = STACKTOP; //@line 27554
 return;
}
function _mbed_die__async_cb_369($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 27510
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27512
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 27514
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 27515
 _wait_ms(400); //@line 27516
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 642; //@line 27519
  $4 = $ReallocAsyncCtx3 + 4 | 0; //@line 27520
  HEAP32[$4 >> 2] = $2; //@line 27521
  sp = STACKTOP; //@line 27522
  return;
 }
 ___async_unwind = 0; //@line 27525
 HEAP32[$ReallocAsyncCtx3 >> 2] = 642; //@line 27526
 $4 = $ReallocAsyncCtx3 + 4 | 0; //@line 27527
 HEAP32[$4 >> 2] = $2; //@line 27528
 sp = STACKTOP; //@line 27529
 return;
}
function _mbed_die__async_cb_368($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 27485
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27487
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 27489
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 27490
 _wait_ms(400); //@line 27491
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 643; //@line 27494
  $4 = $ReallocAsyncCtx2 + 4 | 0; //@line 27495
  HEAP32[$4 >> 2] = $2; //@line 27496
  sp = STACKTOP; //@line 27497
  return;
 }
 ___async_unwind = 0; //@line 27500
 HEAP32[$ReallocAsyncCtx2 >> 2] = 643; //@line 27501
 $4 = $ReallocAsyncCtx2 + 4 | 0; //@line 27502
 HEAP32[$4 >> 2] = $2; //@line 27503
 sp = STACKTOP; //@line 27504
 return;
}
function __ZN7LoRaMac10disconnectEv__async_cb_250($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8578
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8580
 $3 = HEAP32[$2 >> 2] | 0; //@line 8581
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 8582
 __ZN7LoRaPHY18put_radio_to_sleepEv($3); //@line 8583
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 463; //@line 8586
  $4 = $ReallocAsyncCtx + 4 | 0; //@line 8587
  HEAP32[$4 >> 2] = $2; //@line 8588
  sp = STACKTOP; //@line 8589
  return;
 }
 ___async_unwind = 0; //@line 8592
 HEAP32[$ReallocAsyncCtx >> 2] = 463; //@line 8593
 $4 = $ReallocAsyncCtx + 4 | 0; //@line 8594
 HEAP32[$4 >> 2] = $2; //@line 8595
 sp = STACKTOP; //@line 8596
 return;
}
function _mbed_die__async_cb_367($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 27460
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27462
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 27464
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 27465
 _wait_ms(400); //@line 27466
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 644; //@line 27469
  $4 = $ReallocAsyncCtx + 4 | 0; //@line 27470
  HEAP32[$4 >> 2] = $2; //@line 27471
  sp = STACKTOP; //@line 27472
  return;
 }
 ___async_unwind = 0; //@line 27475
 HEAP32[$ReallocAsyncCtx >> 2] = 644; //@line 27476
 $4 = $ReallocAsyncCtx + 4 | 0; //@line 27477
 HEAP32[$4 >> 2] = $2; //@line 27478
 sp = STACKTOP; //@line 27479
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_66($0) {
 $0 = $0 | 0;
 var $10 = 0, $6 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 21425
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21431
 if (!(HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 11 >> 0] | 0)) {
  return;
 }
 $10 = HEAP8[HEAP32[$0 + 8 >> 2] >> 0] | 0; //@line 21438
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 21439
 __ZN12LoRaWANStack9handle_txEhPKhth($6, $10, 0, 0, 2) | 0; //@line 21440
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 181; //@line 21443
  sp = STACKTOP; //@line 21444
  return;
 }
 ___async_unwind = 0; //@line 21447
 HEAP32[$ReallocAsyncCtx5 >> 2] = 181; //@line 21448
 sp = STACKTOP; //@line 21449
 return;
}
function __ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 16171
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16173
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16175
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16177
 $8 = HEAP32[HEAP32[$2 >> 2] >> 2] | 0; //@line 16179
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 16180
 FUNCTION_TABLE_vii[$8 & 31]($2, $4); //@line 16181
 if (!___async) {
  ___async_unwind = 0; //@line 16184
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 154; //@line 16186
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $6; //@line 16188
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $2; //@line 16190
 sp = STACKTOP; //@line 16191
 return;
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_209($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $7 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 3233
 $4 = HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 788 >> 2] | 0; //@line 3237
 if (!$4) {
  return;
 }
 $7 = HEAP32[$4 + 60 >> 2] | 0; //@line 3243
 if (!$7) {
  return;
 }
 $10 = HEAP32[$7 >> 2] | 0; //@line 3249
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 3250
 FUNCTION_TABLE_vi[$10 & 1023]($4 + 48 | 0); //@line 3251
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 91; //@line 3254
  sp = STACKTOP; //@line 3255
  return;
 }
 ___async_unwind = 0; //@line 3258
 HEAP32[$ReallocAsyncCtx4 >> 2] = 91; //@line 3259
 sp = STACKTOP; //@line 3260
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb_273($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 9918
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9922
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9924
 $7 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 9926
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 9927
 FUNCTION_TABLE_vii[$7 & 31]($4, $6); //@line 9928
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 248; //@line 9931
  sp = STACKTOP; //@line 9932
  return;
 }
 ___async_unwind = 0; //@line 9935
 HEAP32[$ReallocAsyncCtx >> 2] = 248; //@line 9936
 sp = STACKTOP; //@line 9937
 return;
}
function _mbed_error_printf($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6503
 STACKTOP = STACKTOP + 16 | 0; //@line 6504
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 6504
 $1 = sp; //@line 6505
 HEAP32[$1 >> 2] = $varargs; //@line 6506
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 6507
 _mbed_error_vfprintf($0, $1); //@line 6508
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 645; //@line 6511
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 6513
  sp = STACKTOP; //@line 6514
  STACKTOP = sp; //@line 6515
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6517
  STACKTOP = sp; //@line 6518
  return;
 }
}
function __ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 18209
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18211
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  HEAP32[___async_retval >> 2] = -1003; //@line 18217
  return;
 }
 $4 = HEAP32[$2 >> 2] | 0; //@line 18220
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 18221
 __ZN7LoRaPHY18put_radio_to_sleepEv($4); //@line 18222
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 503; //@line 18225
  sp = STACKTOP; //@line 18226
  return;
 }
 ___async_unwind = 0; //@line 18229
 HEAP32[$ReallocAsyncCtx2 >> 2] = 503; //@line 18230
 sp = STACKTOP; //@line 18231
 return;
}
function __ZN4mbed10TimerEventC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3063
 HEAP32[$0 >> 2] = 704; //@line 3064
 $1 = $0 + 8 | 0; //@line 3065
 HEAP32[$1 >> 2] = 0; //@line 3066
 HEAP32[$1 + 4 >> 2] = 0; //@line 3066
 HEAP32[$1 + 8 >> 2] = 0; //@line 3066
 HEAP32[$1 + 12 >> 2] = 0; //@line 3066
 $2 = _get_us_ticker_data() | 0; //@line 3067
 HEAP32[$0 + 24 >> 2] = $2; //@line 3069
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3070
 _ticker_set_handler($2, 38); //@line 3071
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 124; //@line 3074
  sp = STACKTOP; //@line 3075
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3078
  return;
 }
}
function __ZN7LoRaMac10disconnectEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $9 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8553
 HEAP8[$2 + 372 >> 0] = 0; //@line 8555
 HEAP8[$2 + 377 >> 0] = 0; //@line 8557
 HEAP8[$2 + 371 >> 0] = 1; //@line 8559
 HEAP8[$2 + 373 >> 0] = 0; //@line 8561
 HEAP8[$2 + 374 >> 0] = 0; //@line 8563
 HEAP8[$2 + 944 >> 0] = 0; //@line 8565
 $9 = $2 + 968 | 0; //@line 8566
 HEAP32[$9 >> 2] = 0; //@line 8567
 $10 = $2 + 4 | 0; //@line 8568
 __ZN14LoRaMacCommand20clear_command_bufferEv($10); //@line 8569
 __ZN14LoRaMacCommand19clear_repeat_bufferEv($10); //@line 8570
 __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($10); //@line 8571
 HEAP32[$9 >> 2] = 0; //@line 8572
 return;
}
function __ZN7LoRaMacD2Ev__async_cb_159($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 28719
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28721
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 28723
 __ZN14lorawan_timersD2Ev($2 + 980 | 0); //@line 28724
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 276; //@line 28727
  $4 = $ReallocAsyncCtx + 4 | 0; //@line 28728
  HEAP32[$4 >> 2] = $2; //@line 28729
  sp = STACKTOP; //@line 28730
  return;
 }
 ___async_unwind = 0; //@line 28733
 HEAP32[$ReallocAsyncCtx >> 2] = 276; //@line 28734
 $4 = $ReallocAsyncCtx + 4 | 0; //@line 28735
 HEAP32[$4 >> 2] = $2; //@line 28736
 sp = STACKTOP; //@line 28737
 return;
}
function _sbrk(increment) {
 increment = increment | 0;
 var oldDynamicTop = 0, newDynamicTop = 0;
 oldDynamicTop = HEAP32[DYNAMICTOP_PTR >> 2] | 0; //@line 35282
 newDynamicTop = oldDynamicTop + increment | 0; //@line 35283
 if ((increment | 0) > 0 & (newDynamicTop | 0) < (oldDynamicTop | 0) | (newDynamicTop | 0) < 0) {
  abortOnCannotGrowMemory() | 0; //@line 35287
  ___setErrNo(12); //@line 35288
  return -1;
 }
 HEAP32[DYNAMICTOP_PTR >> 2] = newDynamicTop; //@line 35292
 if ((newDynamicTop | 0) > (getTotalMemory() | 0)) {
  if (!(enlargeMemory() | 0)) {
   HEAP32[DYNAMICTOP_PTR >> 2] = oldDynamicTop; //@line 35296
   ___setErrNo(12); //@line 35297
   return -1;
  }
 }
 return oldDynamicTop | 0; //@line 35301
}
function _fwrite($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $11 = 0, $13 = 0, $15 = 0, $4 = 0, $phitmp = 0;
 $4 = Math_imul($2, $1) | 0; //@line 11213
 $$ = ($1 | 0) == 0 ? 0 : $2; //@line 11215
 if ((HEAP32[$3 + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($3) | 0) == 0; //@line 11221
  $11 = ___fwritex($0, $4, $3) | 0; //@line 11222
  if ($phitmp) {
   $13 = $11; //@line 11224
  } else {
   ___unlockfile($3); //@line 11226
   $13 = $11; //@line 11227
  }
 } else {
  $13 = ___fwritex($0, $4, $3) | 0; //@line 11231
 }
 if (($13 | 0) == ($4 | 0)) {
  $15 = $$; //@line 11235
 } else {
  $15 = ($13 >>> 0) / ($1 >>> 0) | 0; //@line 11238
 }
 return $15 | 0; //@line 11240
}
function __ZN16SX1276_LoRaRadio11tx_done_irqEv($0) {
 $0 = $0 | 0;
 var $4 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2026
 __ZN4mbed6Ticker6detachEv($0 + 1240 | 0); //@line 2028
 HEAP8[$0 + 688 >> 0] = 0; //@line 2030
 $4 = HEAP32[$0 + 788 >> 2] | 0; //@line 2032
 if (!$4) {
  return;
 }
 $7 = HEAP32[$4 + 12 >> 2] | 0; //@line 2038
 if (!$7) {
  return;
 }
 $9 = HEAP32[$7 >> 2] | 0; //@line 2043
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2044
 FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 2045
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 98; //@line 2048
  sp = STACKTOP; //@line 2049
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2052
 return;
}
function __ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t__async_cb_348($0) {
 $0 = $0 | 0;
 var $$0 = 0, $13 = 0, $15 = 0, $8 = 0, $AsyncRetVal = 0;
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26295
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 26299
 if (!$AsyncRetVal) {
  $13 = HEAP32[HEAP32[$0 + 8 >> 2] >> 2] | 0; //@line 26302
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv(HEAP32[$0 + 12 >> 2] | 0) | 0) >> 2] = $13; //@line 26304
  $15 = $8 + 944 | 0; //@line 26305
  HEAP8[$15 >> 0] = HEAP8[$15 >> 0] | 1; //@line 26308
  $$0 = 0; //@line 26309
 } else {
  HEAP8[$8 + 373 >> 0] = 0; //@line 26312
  $$0 = $AsyncRetVal; //@line 26313
 }
 HEAP32[___async_retval >> 2] = $$0; //@line 26316
 return;
}
function _fmt_x($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$05$lcssa = 0, $$056 = 0, $14 = 0, $15 = 0, $8 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) {
  $$05$lcssa = $2; //@line 13549
 } else {
  $$056 = $2; //@line 13551
  $15 = $1; //@line 13551
  $8 = $0; //@line 13551
  while (1) {
   $14 = $$056 + -1 | 0; //@line 13559
   HEAP8[$14 >> 0] = HEAPU8[17076 + ($8 & 15) >> 0] | 0 | $3; //@line 13560
   $8 = _bitshift64Lshr($8 | 0, $15 | 0, 4) | 0; //@line 13561
   $15 = tempRet0; //@line 13562
   if (($8 | 0) == 0 & ($15 | 0) == 0) {
    $$05$lcssa = $14; //@line 13567
    break;
   } else {
    $$056 = $14; //@line 13570
   }
  }
 }
 return $$05$lcssa | 0; //@line 13574
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_191($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 35150
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 35154
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 35156
 $7 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 35158
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 35159
 FUNCTION_TABLE_vii[$7 & 31]($4, $6); //@line 35160
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 408; //@line 35163
  sp = STACKTOP; //@line 35164
  return;
 }
 ___async_unwind = 0; //@line 35167
 HEAP32[$ReallocAsyncCtx5 >> 2] = 408; //@line 35168
 sp = STACKTOP; //@line 35169
 return;
}
function __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_361($0) {
 $0 = $0 | 0;
 var $$1 = 0, $$pre = 0, $13 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27138
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27140
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 27142
 if (!$AsyncRetVal) {
  $$1 = 0; //@line 27145
  $13 = ___async_retval; //@line 27146
  HEAP32[$13 >> 2] = $$1; //@line 27147
  return;
 }
 $$pre = HEAP8[$6 >> 0] | 0; //@line 27150
 HEAP8[$8 + 373 >> 0] = 0; //@line 27152
 HEAP8[$6 >> 0] = $$pre & -9; //@line 27154
 $$1 = $AsyncRetVal; //@line 27155
 $13 = ___async_retval; //@line 27156
 HEAP32[$13 >> 2] = $$1; //@line 27157
 return;
}
function __ZN7LoRaMac10disconnectEv__async_cb_254($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 8677
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8679
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8681
 $5 = HEAP32[$2 >> 2] | 0; //@line 8682
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 8684
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($5, $4 + 1016 | 0); //@line 8685
 if (!___async) {
  ___async_unwind = 0; //@line 8688
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 459; //@line 8690
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 8692
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 8694
 sp = STACKTOP; //@line 8695
 return;
}
function __ZN7LoRaMac10disconnectEv__async_cb_253($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 8653
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8655
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8657
 $5 = HEAP32[$2 >> 2] | 0; //@line 8658
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 8660
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($5, $4 + 1036 | 0); //@line 8661
 if (!___async) {
  ___async_unwind = 0; //@line 8664
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 460; //@line 8666
 HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $2; //@line 8668
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $4; //@line 8670
 sp = STACKTOP; //@line 8671
 return;
}
function __ZN7LoRaMac10disconnectEv__async_cb_252($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 8629
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8631
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8633
 $5 = HEAP32[$2 >> 2] | 0; //@line 8634
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 8636
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($5, $4 + 1056 | 0); //@line 8637
 if (!___async) {
  ___async_unwind = 0; //@line 8640
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 461; //@line 8642
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 8644
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 8646
 sp = STACKTOP; //@line 8647
 return;
}
function _mbedtls_gcm_free($0) {
 $0 = $0 | 0;
 var $$034$i = 0, $$05$i = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5099
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 5100
 _mbedtls_cipher_free($0); //@line 5101
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 609; //@line 5104
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 5106
  sp = STACKTOP; //@line 5107
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 5110
 $$034$i = 400; //@line 5111
 $$05$i = $0; //@line 5111
 while (1) {
  $$034$i = $$034$i + -1 | 0; //@line 5113
  HEAP8[$$05$i >> 0] = 0; //@line 5115
  if (!$$034$i) {
   break;
  } else {
   $$05$i = $$05$i + 1 | 0; //@line 5120
  }
 }
 return;
}
function __ZSt9terminatev() {
 var $0 = 0, $16 = 0, $17 = 0, $2 = 0, $5 = 0, sp = 0;
 sp = STACKTOP; //@line 16867
 $0 = ___cxa_get_globals_fast() | 0; //@line 16868
 if ($0 | 0) {
  $2 = HEAP32[$0 >> 2] | 0; //@line 16871
  if ($2 | 0) {
   $5 = $2 + 48 | 0; //@line 16875
   if ((HEAP32[$5 >> 2] & -256 | 0) == 1126902528 ? (HEAP32[$5 + 4 >> 2] | 0) == 1129074247 : 0) {
    $16 = HEAP32[$2 + 12 >> 2] | 0; //@line 16887
    _emscripten_alloc_async_context(4, sp) | 0; //@line 16888
    __ZSt11__terminatePFvvE($16); //@line 16889
   }
  }
 }
 $17 = __ZSt13get_terminatev() | 0; //@line 16894
 _emscripten_alloc_async_context(4, sp) | 0; //@line 16895
 __ZSt11__terminatePFvvE($17); //@line 16896
}
function __GLOBAL__sub_I_main_cpp__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 26022
 __ZN5Sht31C2E7PinNameS0_(24532, 10, 11); //@line 26023
 __ZN4mbed11InterruptInC2E7PinName(23552, 1337); //@line 26024
 __ZN6events10EventQueueC2EjPh(23624, 1664, 0); //@line 26025
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 26026
 __ZN16LoRaWANInterfaceC2ER9LoRaRadio(23828, 19576); //@line 26027
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 662; //@line 26030
  sp = STACKTOP; //@line 26031
  return;
 }
 ___async_unwind = 0; //@line 26034
 HEAP32[$ReallocAsyncCtx2 >> 2] = 662; //@line 26035
 sp = STACKTOP; //@line 26036
 return;
}
function __ZN14lorawan_timersD2Ev__async_cb_284($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 10898
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10900
 $4 = HEAP32[$2 + 28 >> 2] | 0; //@line 10902
 if (!$4) {
  return;
 }
 $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 10909
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 10910
 FUNCTION_TABLE_vi[$8 & 1023]($2 + 16 | 0); //@line 10911
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 288; //@line 10914
  sp = STACKTOP; //@line 10915
  return;
 }
 ___async_unwind = 0; //@line 10918
 HEAP32[$ReallocAsyncCtx5 >> 2] = 288; //@line 10919
 sp = STACKTOP; //@line 10920
 return;
}
function ___towrite($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $14 = 0, $3 = 0, $7 = 0;
 $1 = $0 + 74 | 0; //@line 11430
 $3 = HEAP8[$1 >> 0] | 0; //@line 11432
 HEAP8[$1 >> 0] = $3 + 255 | $3; //@line 11436
 $7 = HEAP32[$0 >> 2] | 0; //@line 11437
 if (!($7 & 8)) {
  HEAP32[$0 + 8 >> 2] = 0; //@line 11442
  HEAP32[$0 + 4 >> 2] = 0; //@line 11444
  $14 = HEAP32[$0 + 44 >> 2] | 0; //@line 11446
  HEAP32[$0 + 28 >> 2] = $14; //@line 11448
  HEAP32[$0 + 20 >> 2] = $14; //@line 11450
  HEAP32[$0 + 16 >> 2] = $14 + (HEAP32[$0 + 48 >> 2] | 0); //@line 11456
  $$0 = 0; //@line 11457
 } else {
  HEAP32[$0 >> 2] = $7 | 32; //@line 11460
  $$0 = -1; //@line 11461
 }
 return $$0 | 0; //@line 11463
}
function __ZN7LoRaMac16add_channel_planERK16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17070
 if ((HEAP32[$0 + 968 >> 2] & 33 | 0) == 1) {
  $$0 = -1e3; //@line 17076
  return $$0 | 0; //@line 17077
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 17080
 $7 = __ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan($0 + 352 | 0, $1) | 0; //@line 17081
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 465; //@line 17084
  sp = STACKTOP; //@line 17085
  return 0; //@line 17086
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 17088
 $$0 = $7; //@line 17089
 return $$0 | 0; //@line 17090
}
function __ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s__async_cb($0) {
 $0 = $0 | 0;
 var $$ = 0, $$1 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25987
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25989
 $$ = HEAP8[___async_retval >> 0] & 1 ? 7 : 6; //@line 25993
 $6 = HEAP8[$2 >> 0] | 0; //@line 25994
 $$1 = ($6 << 24 >> 24 < (HEAP8[$4 + 28 >> 0] | 0) ? 1 : $6 << 24 >> 24 > (HEAP8[$4 + 29 >> 0] | 0)) ? $$ & 5 : $$; //@line 26003
 $16 = HEAP8[$2 + 1 >> 0] | 0; //@line 26005
 HEAP8[___async_retval >> 0] = ($16 << 24 >> 24 < (HEAP8[$4 + 32 >> 0] | 0) ? 1 : $16 << 24 >> 24 > (HEAP8[$4 + 33 >> 0] | 0)) ? $$1 & 3 : $$1; //@line 26016
 return;
}
function __ZN4mbed5Timer7read_msEv__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $18 = 0, $24 = 0, $26 = 0, $28 = 0, $4 = 0, $6 = 0, $9 = 0;
 $4 = $0 + 8 | 0; //@line 18087
 $6 = HEAP32[$4 >> 2] | 0; //@line 18089
 $9 = HEAP32[$4 + 4 >> 2] | 0; //@line 18092
 $11 = ___async_retval; //@line 18094
 $18 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 18101
 $24 = _i64Subtract(HEAP32[$11 >> 2] | 0, HEAP32[$11 + 4 >> 2] | 0, HEAP32[$18 >> 2] | 0, HEAP32[$18 + 4 >> 2] | 0) | 0; //@line 18107
 $26 = _i64Add($24 | 0, tempRet0 | 0, $6 | 0, $9 | 0) | 0; //@line 18109
 $28 = ___udivdi3($26 | 0, tempRet0 | 0, 1e3, 0) | 0; //@line 18111
 HEAP32[___async_retval >> 2] = $28; //@line 18114
 return;
}
function __ZN12radio_eventsD2Ev__async_cb_145($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $7 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 27484
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27486
 $4 = HEAP32[$2 + 12 >> 2] | 0; //@line 27488
 if (!$4) {
  return;
 }
 $7 = HEAP32[$4 + 8 >> 2] | 0; //@line 27494
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 27495
 FUNCTION_TABLE_vi[$7 & 1023]($2); //@line 27496
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 283; //@line 27499
  sp = STACKTOP; //@line 27500
  return;
 }
 ___async_unwind = 0; //@line 27503
 HEAP32[$ReallocAsyncCtx7 >> 2] = 283; //@line 27504
 sp = STACKTOP; //@line 27505
 return;
}
function __ZN4mbed11InterruptInD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 9622
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9624
 $4 = HEAP32[$2 + 52 >> 2] | 0; //@line 9626
 if (!$4) {
  return;
 }
 $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 9633
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 9634
 FUNCTION_TABLE_vi[$8 & 1023]($2 + 40 | 0); //@line 9635
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 104; //@line 9638
  sp = STACKTOP; //@line 9639
  return;
 }
 ___async_unwind = 0; //@line 9642
 HEAP32[$ReallocAsyncCtx2 >> 2] = 104; //@line 9643
 sp = STACKTOP; //@line 9644
 return;
}
function __ZN16SX1276_LoRaRadio10init_radioEP12radio_events($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 49
 HEAP32[$0 + 788 >> 2] = $1; //@line 51
 $5 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 54
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 55
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 56
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 51; //@line 59
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 61
  sp = STACKTOP; //@line 62
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 65
  HEAP8[$0 + 689 >> 0] = 0; //@line 67
  HEAP8[$0 + 688 >> 0] = 0; //@line 69
  return;
 }
}
function __ZN7LoRaMac21remove_single_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17149
 if ((HEAP32[$0 + 968 >> 2] & 33 | 0) == 1) {
  $$0 = -1e3; //@line 17155
  return $$0 | 0; //@line 17156
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 17159
 $7 = __ZN18LoRaMacChannelPlan21remove_single_channelEh($0 + 352 | 0, $1) | 0; //@line 17160
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 467; //@line 17163
  sp = STACKTOP; //@line 17164
  return 0; //@line 17165
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 17167
 $$0 = $7; //@line 17168
 return $$0 | 0; //@line 17169
}
function _mbedtls_cipher_setup__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0, $4 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34103
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34105
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 34107
 HEAP32[$2 + 60 >> 2] = $AsyncRetVal; //@line 34109
 if (!$AsyncRetVal) {
  $$0 = -24960; //@line 34112
 } else {
  HEAP32[$2 >> 2] = $4; //@line 34114
  if ((HEAP32[$4 + 4 >> 2] | 0) == 2) {
   HEAP32[$2 + 12 >> 2] = 4; //@line 34120
   HEAP32[$2 + 16 >> 2] = 14; //@line 34122
   $$0 = 0; //@line 34123
  } else {
   $$0 = 0; //@line 34125
  }
 }
 HEAP32[___async_retval >> 2] = $$0; //@line 34129
 return;
}
function __ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_243($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 8189
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 8192
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 8195
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 8196
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 8197
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 552; //@line 8200
  sp = STACKTOP; //@line 8201
  return;
 }
 ___async_unwind = 0; //@line 8204
 HEAP32[$ReallocAsyncCtx3 >> 2] = 552; //@line 8205
 sp = STACKTOP; //@line 8206
 return;
}
function __ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb_268($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 9662
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9666
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 9668
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 9669
 FUNCTION_TABLE_vi[$5 & 1023]($4); //@line 9670
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 308; //@line 9673
  sp = STACKTOP; //@line 9674
  return;
 }
 ___async_unwind = 0; //@line 9677
 HEAP32[$ReallocAsyncCtx >> 2] = 308; //@line 9678
 sp = STACKTOP; //@line 9679
 return;
}
function _twobyte_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$sink$in = 0, $$sink17$sink = 0, $11 = 0, $12 = 0, $8 = 0;
 $8 = (HEAPU8[$1 >> 0] | 0) << 8 | (HEAPU8[$1 + 1 >> 0] | 0); //@line 15017
 $$sink$in = HEAPU8[$0 >> 0] | 0; //@line 15020
 $$sink17$sink = $0; //@line 15020
 while (1) {
  $11 = $$sink17$sink + 1 | 0; //@line 15022
  $12 = HEAP8[$11 >> 0] | 0; //@line 15023
  if (!($12 << 24 >> 24)) {
   break;
  }
  $$sink$in = $$sink$in << 8 & 65280 | $12 & 255; //@line 15031
  if (($$sink$in | 0) == ($8 | 0)) {
   break;
  } else {
   $$sink17$sink = $11; //@line 15036
  }
 }
 return ($12 << 24 >> 24 ? $$sink17$sink : 0) | 0; //@line 15041
}
function _fmt_o($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $7 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) {
  $$0$lcssa = $2; //@line 13586
 } else {
  $$06 = $2; //@line 13588
  $11 = $1; //@line 13588
  $7 = $0; //@line 13588
  while (1) {
   $10 = $$06 + -1 | 0; //@line 13593
   HEAP8[$10 >> 0] = $7 & 7 | 48; //@line 13594
   $7 = _bitshift64Lshr($7 | 0, $11 | 0, 3) | 0; //@line 13595
   $11 = tempRet0; //@line 13596
   if (($7 | 0) == 0 & ($11 | 0) == 0) {
    $$0$lcssa = $10; //@line 13601
    break;
   } else {
    $$06 = $10; //@line 13604
   }
  }
 }
 return $$0$lcssa | 0; //@line 13608
}
function __ZN16LoRaWANInterface4sendEhPKhti__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27908
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27910
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 27912
 $8 = HEAP16[$0 + 14 >> 1] | 0; //@line 27914
 if (!$2) {
  $$0 = -1003; //@line 27917
  $13 = ___async_retval; //@line 27918
  HEAP16[$13 >> 1] = $$0; //@line 27919
  return;
 }
 $$0 = __ZN12LoRaWANStack9handle_txEhPKhth(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $6, $2, $8, $4 & 255) | 0; //@line 27925
 $13 = ___async_retval; //@line 27926
 HEAP16[$13 >> 1] = $$0; //@line 27927
 return;
}
function __ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb_338($0) {
 $0 = $0 | 0;
 var $4 = 0, $7 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 16197
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16201
 $7 = HEAP32[(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) + 76 >> 2] | 0; //@line 16204
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 16205
 FUNCTION_TABLE_vi[$7 & 1023]($4); //@line 16206
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 155; //@line 16209
  sp = STACKTOP; //@line 16210
  return;
 }
 ___async_unwind = 0; //@line 16213
 HEAP32[$ReallocAsyncCtx3 >> 2] = 155; //@line 16214
 sp = STACKTOP; //@line 16215
 return;
}
function __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4
 $2 = HEAP32[$0 >> 2] | 0; //@line 5
 $3 = $1 + 16 | 0; //@line 6
 $4 = HEAP32[$3 >> 2] | 0; //@line 7
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 8
 __ZN6events10EventQueue6cancelEi($2, $4); //@line 9
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 581; //@line 12
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 14
  sp = STACKTOP; //@line 15
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 18
  HEAP32[$3 >> 2] = 0; //@line 19
  return;
 }
}
function __ZN12LoRaWANStack20get_enabled_channelsER16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, sp = 0;
 sp = STACKTOP; //@line 9236
 STACKTOP = STACKTOP + 16 | 0; //@line 9237
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 9237
 if ((HEAP32[$0 + 1876 >> 2] | 0) >>> 0 < 3) {
  _mbed_tracef(2, 12356, 13329, sp); //@line 9243
  $$0 = -1e3; //@line 9244
  STACKTOP = sp; //@line 9245
  return $$0 | 0; //@line 9245
 } else {
  $$0 = __ZN7LoRaMac16get_channel_planER16lora_channelplan($0 + 4 | 0, $1) | 0; //@line 9249
  STACKTOP = sp; //@line 9250
  return $$0 | 0; //@line 9250
 }
 return 0; //@line 9252
}
function __ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_179($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 30547
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 30550
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 30553
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 30554
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 30555
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 558; //@line 30558
  sp = STACKTOP; //@line 30559
  return;
 }
 ___async_unwind = 0; //@line 30562
 HEAP32[$ReallocAsyncCtx3 >> 2] = 558; //@line 30563
 sp = STACKTOP; //@line 30564
 return;
}
function __ZN7LoRaPHY25setup_public_network_modeEb__async_cb_230($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 4903
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 4906
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 4909
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 4910
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 4911
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 561; //@line 4914
  sp = STACKTOP; //@line 4915
  return;
 }
 ___async_unwind = 0; //@line 4918
 HEAP32[$ReallocAsyncCtx3 >> 2] = 561; //@line 4919
 sp = STACKTOP; //@line 4920
 return;
}
function __ZN16SX1276_LoRaRadio6randomEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 763
 $1 = _emscripten_asm_const_i(4) | 0; //@line 764
 $4 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0; //@line 767
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 768
 FUNCTION_TABLE_vi[$4 & 1023]($0); //@line 769
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 61; //@line 772
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 774
  sp = STACKTOP; //@line 775
  return 0; //@line 776
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 778
  return $1 | 0; //@line 779
 }
 return 0; //@line 781
}
function __ZN7LoRaPHY11handle_sendEPhh__async_cb_4($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 18053
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 18056
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 18059
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 18060
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 18061
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 571; //@line 18064
  sp = STACKTOP; //@line 18065
  return;
 }
 ___async_unwind = 0; //@line 18068
 HEAP32[$ReallocAsyncCtx3 >> 2] = 571; //@line 18069
 sp = STACKTOP; //@line 18070
 return;
}
function __ZN7LoRaPHY16get_alternate_DREh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $12 = 0, $3 = 0, $6 = 0, $8 = 0;
 $3 = HEAP8[$0 + 31 >> 0] | 0; //@line 23559
 $6 = HEAP8[$0 + 26 >> 0] | 0; //@line 23562
 $8 = ($3 & 255) + 1 | 0; //@line 23564
 $12 = (($1 & 255) >>> 0) % (($8 - ($6 & 255) & 255) >>> 0) | 0; //@line 23568
 switch (($12 & 255) << 24 >> 24) {
 case 1:
  {
   $$0 = $3; //@line 23572
   return $$0 | 0; //@line 23573
  }
 case 0:
  {
   $$0 = $6; //@line 23577
   return $$0 | 0; //@line 23578
  }
 default:
  {
   $$0 = $8 - $12 & 255; //@line 23584
   return $$0 | 0; //@line 23585
  }
 }
 return 0; //@line 23588
}
function __ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_212($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 3311
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 3314
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 3317
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 3318
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 3319
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 555; //@line 3322
  sp = STACKTOP; //@line 3323
  return;
 }
 ___async_unwind = 0; //@line 3326
 HEAP32[$ReallocAsyncCtx3 >> 2] = 555; //@line 3327
 sp = STACKTOP; //@line 3328
 return;
}
function __ZN16SX1276_LoRaRadio5sleepEv($0) {
 $0 = $0 | 0;
 var $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 85
 STACKTOP = STACKTOP + 16 | 0; //@line 86
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 86
 $vararg_buffer1 = sp + 8 | 0; //@line 87
 _mbed_tracef(16, 10968, 11728, sp); //@line 89
 __ZN4mbed6Ticker6detachEv($0 + 1048 | 0); //@line 91
 __ZN4mbed6Ticker6detachEv($0 + 1112 | 0); //@line 93
 HEAP32[$vararg_buffer1 >> 2] = 0; //@line 94
 _mbed_tracef(16, 10968, 11025, $vararg_buffer1); //@line 95
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 96
 STACKTOP = sp; //@line 97
 return;
}
function __ZN7LoRaPHY15setup_rx_windowEbj__async_cb_227($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 4118
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 4121
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 4124
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 4125
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 4126
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 565; //@line 4129
  sp = STACKTOP; //@line 4130
  return;
 }
 ___async_unwind = 0; //@line 4133
 HEAP32[$ReallocAsyncCtx4 >> 2] = 565; //@line 4134
 sp = STACKTOP; //@line 4135
 return;
}
function __ZN7LoRaPHY15setup_rx_windowEbj__async_cb_226($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 4095
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 4098
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 4101
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 4102
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 4103
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 565; //@line 4106
  sp = STACKTOP; //@line 4107
  return;
 }
 ___async_unwind = 0; //@line 4110
 HEAP32[$ReallocAsyncCtx4 >> 2] = 565; //@line 4111
 sp = STACKTOP; //@line 4112
 return;
}
function __ZN7LoRaMac19remove_channel_planEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17095
 if ((HEAP32[$0 + 968 >> 2] & 33 | 0) == 1) {
  $$0 = -1e3; //@line 17101
  return $$0 | 0; //@line 17102
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 17105
 $6 = __ZN18LoRaMacChannelPlan11remove_planEv($0 + 352 | 0) | 0; //@line 17106
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 466; //@line 17109
  sp = STACKTOP; //@line 17110
  return 0; //@line 17111
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 17113
 $$0 = $6; //@line 17114
 return $$0 | 0; //@line 17115
}
function __ZN7LoRaPHY18verify_tx_datarateEhb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$sink$in = 0, $$sink5 = 0;
 do {
  if ($2) {
   $$sink$in = $0 + 30 | 0; //@line 25046
   $$sink5 = $0 + 31 | 0; //@line 25046
  } else {
   if (!(HEAP8[$0 + 132 >> 0] & 1)) {
    $$sink$in = $0 + 26 | 0; //@line 25055
    $$sink5 = $0 + 27 | 0; //@line 25055
    break;
   } else {
    $$sink$in = $0 + 35 | 0; //@line 25060
    $$sink5 = $0 + 27 | 0; //@line 25060
    break;
   }
  }
 } while (0);
 return ((HEAP8[$$sink$in >> 0] | 0) <= $1 << 24 >> 24 ? (HEAP8[$$sink5 >> 0] | 0) >= $1 << 24 >> 24 : 0) | 0; //@line 25070
}
function __ZN4mbed7Timeout7handlerEv__async_cb_9($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 18269
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18273
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 18275
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 18276
 FUNCTION_TABLE_vi[$5 & 1023]($4); //@line 18277
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 119; //@line 18280
  sp = STACKTOP; //@line 18281
  return;
 }
 ___async_unwind = 0; //@line 18284
 HEAP32[$ReallocAsyncCtx >> 2] = 119; //@line 18285
 sp = STACKTOP; //@line 18286
 return;
}
function ___cxa_is_pointer_type($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17769
 do {
  if (!$0) {
   $3 = 0; //@line 17773
  } else {
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 17775
   $2 = ___dynamic_cast($0, 464, 520, 0) | 0; //@line 17776
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 730; //@line 17779
    sp = STACKTOP; //@line 17780
    return 0; //@line 17781
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 17783
    $3 = ($2 | 0) != 0 & 1; //@line 17786
    break;
   }
  }
 } while (0);
 return $3 | 0; //@line 17791
}
function __ZN7LoRaPHY24restore_default_channelsEv($0) {
 $0 = $0 | 0;
 var $11 = 0, $2 = 0, $5 = 0, $7 = 0, $8 = 0, $indvars$iv = 0;
 $2 = HEAP8[$0 + 128 >> 0] | 0; //@line 22190
 if (!($2 << 24 >> 24)) {
  return;
 }
 $5 = HEAP32[$0 + 124 >> 2] | 0; //@line 22196
 $7 = HEAP32[$0 + 120 >> 2] | 0; //@line 22198
 $8 = $2 & 255; //@line 22199
 $indvars$iv = 0; //@line 22200
 do {
  $11 = $7 + ($indvars$iv << 1) | 0; //@line 22204
  HEAP16[$11 >> 1] = HEAP16[$11 >> 1] | HEAP16[$5 + ($indvars$iv << 1) >> 1]; //@line 22207
  $indvars$iv = $indvars$iv + 1 | 0; //@line 22208
 } while ($indvars$iv >>> 0 < $8 >>> 0);
 return;
}
function _invoke_ticker__async_cb_132($0) {
 $0 = $0 | 0;
 var $5 = 0, $6 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 26186
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 26192
 $6 = HEAP32[$0 + 8 >> 2] | 0; //@line 26193
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 26194
 FUNCTION_TABLE_vi[$5 & 1023]($6); //@line 26195
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 658; //@line 26198
  sp = STACKTOP; //@line 26199
  return;
 }
 ___async_unwind = 0; //@line 26202
 HEAP32[$ReallocAsyncCtx >> 2] = 658; //@line 26203
 sp = STACKTOP; //@line 26204
 return;
}
function __ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_3($0) {
 $0 = $0 | 0;
 var $19 = 0, $4 = 0, $6 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17980
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17982
 HEAP32[$4 + 364 >> 2] = 2; //@line 17984
 if (HEAP8[$4 + 373 >> 0] | 0) {
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0) + 4 >> 2] = 4; //@line 17992
 }
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0) + 4 >> 2] = 4; //@line 17997
 if ((HEAP32[$6 >> 2] | 0) == 2) {
  return;
 }
 $19 = $4 + 944 | 0; //@line 18003
 HEAP8[$19 >> 0] = HEAP8[$19 >> 0] | 32; //@line 18006
 return;
}
function __Z18decrypt_join_framePKhtS0_Ph($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $4 = 0, $6 = 0;
 _mbedtls_aes_init(23256); //@line 21068
 $4 = _mbedtls_aes_setkey_enc(23256, $2, 128) | 0; //@line 21069
 if (!$4) {
  $6 = _mbedtls_aes_crypt_ecb(23256, 1, $0, $3) | 0; //@line 21072
  if (($1 & 65535) > 15 & ($6 | 0) == 0) {
   $$0 = _mbedtls_aes_crypt_ecb(23256, 1, $0 + 16 | 0, $3 + 16 | 0) | 0; //@line 21080
  } else {
   $$0 = $6; //@line 21082
  }
 } else {
  $$0 = $4; //@line 21085
 }
 _mbedtls_aes_free(23256); //@line 21087
 return $$0 | 0; //@line 21088
}
function __ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13049
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 13051
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 13057
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 13058
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 13059
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 362; //@line 13062
  sp = STACKTOP; //@line 13063
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 13066
 return;
}
function _getint_671($0) {
 $0 = $0 | 0;
 var $$0$lcssa = 0, $$04 = 0, $11 = 0, $12 = 0, $7 = 0;
 if (!(_isdigit(HEAP8[HEAP32[$0 >> 2] >> 0] | 0) | 0)) {
  $$0$lcssa = 0; //@line 13230
 } else {
  $$04 = 0; //@line 13232
  while (1) {
   $7 = HEAP32[$0 >> 2] | 0; //@line 13235
   $11 = ($$04 * 10 | 0) + -48 + (HEAP8[$7 >> 0] | 0) | 0; //@line 13239
   $12 = $7 + 1 | 0; //@line 13240
   HEAP32[$0 >> 2] = $12; //@line 13241
   if (!(_isdigit(HEAP8[$12 >> 0] | 0) | 0)) {
    $$0$lcssa = $11; //@line 13247
    break;
   } else {
    $$04 = $11; //@line 13250
   }
  }
 }
 return $$0$lcssa | 0; //@line 13254
}
function __ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8187
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 8189
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 8195
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8196
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 8197
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 246; //@line 8200
  sp = STACKTOP; //@line 8201
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 8204
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_60($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 21145
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(4) | 0; //@line 21152
 _mbed_assert_internal(13612, 12396, 836); //@line 21153
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 176; //@line 21156
  sp = STACKTOP; //@line 21157
  return;
 }
 ___async_unwind = 0; //@line 21160
 HEAP32[$ReallocAsyncCtx9 >> 2] = 176; //@line 21161
 sp = STACKTOP; //@line 21162
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_79($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 22813
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(4) | 0; //@line 22820
 _mbed_assert_internal(13612, 12396, 712); //@line 22821
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 188; //@line 22824
  sp = STACKTOP; //@line 22825
  return;
 }
 ___async_unwind = 0; //@line 22828
 HEAP32[$ReallocAsyncCtx10 >> 2] = 188; //@line 22829
 sp = STACKTOP; //@line 22830
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_20($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 19176
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(4) | 0; //@line 19183
 _mbed_assert_internal(13612, 12396, 816); //@line 19184
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 172; //@line 19187
  sp = STACKTOP; //@line 19188
  return;
 }
 ___async_unwind = 0; //@line 19191
 HEAP32[$ReallocAsyncCtx10 >> 2] = 172; //@line 19192
 sp = STACKTOP; //@line 19193
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_18($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 19115
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(4) | 0; //@line 19122
 _mbed_assert_internal(13612, 12396, 792); //@line 19123
 if (___async) {
  HEAP32[$ReallocAsyncCtx11 >> 2] = 168; //@line 19126
  sp = STACKTOP; //@line 19127
  return;
 }
 ___async_unwind = 0; //@line 19130
 HEAP32[$ReallocAsyncCtx11 >> 2] = 168; //@line 19131
 sp = STACKTOP; //@line 19132
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_16($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 19054
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(4) | 0; //@line 19061
 _mbed_assert_internal(13612, 12396, 781); //@line 19062
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 164; //@line 19065
  sp = STACKTOP; //@line 19066
  return;
 }
 ___async_unwind = 0; //@line 19069
 HEAP32[$ReallocAsyncCtx12 >> 2] = 164; //@line 19070
 sp = STACKTOP; //@line 19071
 return;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0;
 $x_sroa_0_0_extract_trunc = $a$0; //@line 34807
 $y_sroa_0_0_extract_trunc = $b$0; //@line 34808
 $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0; //@line 34809
 $1$1 = tempRet0; //@line 34810
 return (tempRet0 = (Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0) + (Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $1$1 | $1$1 & 0, $1$0 | 0 | 0) | 0; //@line 34812
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_81($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 22881
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(4) | 0; //@line 22888
 _mbed_assert_internal(13612, 12396, 734); //@line 22889
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 192; //@line 22892
  sp = STACKTOP; //@line 22893
  return;
 }
 ___async_unwind = 0; //@line 22896
 HEAP32[$ReallocAsyncCtx9 >> 2] = 192; //@line 22897
 sp = STACKTOP; //@line 22898
 return;
}
function __ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8113
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 8115
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 8121
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8122
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 8123
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 243; //@line 8126
  sp = STACKTOP; //@line 8127
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 8130
 return;
}
function _mbedtls_cipher_update__async_cb_246($0) {
 $0 = $0 | 0;
 var $$1 = 0, $2 = 0, $4 = 0, $9 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8341
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8343
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 8345
 if ($AsyncRetVal | 0) {
  $$1 = $AsyncRetVal; //@line 8348
  $9 = ___async_retval; //@line 8349
  HEAP32[$9 >> 2] = $$1; //@line 8350
  return;
 }
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + $4; //@line 8355
 $$1 = 0; //@line 8356
 $9 = ___async_retval; //@line 8357
 HEAP32[$9 >> 2] = $$1; //@line 8358
 return;
}
function __ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10487
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 10489
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 10495
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10496
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 10497
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 306; //@line 10500
  sp = STACKTOP; //@line 10501
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 10504
 return;
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_222($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 3819
 if (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 3827
 _mbed_assert_internal(14352, 14370, 57); //@line 3828
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 580; //@line 3831
  sp = STACKTOP; //@line 3832
  return;
 }
 ___async_unwind = 0; //@line 3835
 HEAP32[$ReallocAsyncCtx6 >> 2] = 580; //@line 3836
 sp = STACKTOP; //@line 3837
 return;
}
function __ZN12LoRaWANStack17get_lorawan_stackEv() {
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8727
 do {
  if (!(HEAP8[19568] | 0)) {
   if (___cxa_guard_acquire(19568) | 0) {
    $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8735
    __ZN12LoRaWANStackC2Ev(20896); //@line 8736
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 254; //@line 8739
     sp = STACKTOP; //@line 8740
     return 0; //@line 8741
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 8743
     break;
    }
   }
  }
 } while (0);
 return 20896; //@line 8749
}
function _mbedtls_cipher_info_from_type($0) {
 $0 = $0 | 0;
 var $$05 = 0, $$06 = 0, $1 = 0, $9 = 0;
 $1 = HEAP32[2390] | 0; //@line 2147
 L1 : do {
  if (!$1) {
   $$05 = 0; //@line 2151
  } else {
   $$06 = 9556; //@line 2153
   $9 = $1; //@line 2153
   while (1) {
    if ((HEAP32[$$06 >> 2] | 0) == ($0 | 0)) {
     $$05 = $9; //@line 2158
     break L1;
    }
    $9 = HEAP32[$$06 + 12 >> 2] | 0; //@line 2163
    if (!$9) {
     $$05 = 0; //@line 2166
     break;
    } else {
     $$06 = $$06 + 8 | 0; //@line 2169
    }
   }
  }
 } while (0);
 return $$05 | 0; //@line 2174
}
function __ZN7LoRaMac29handle_delayed_tx_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 23101
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 23108
 _mbed_assert_internal(13612, 13621, 192); //@line 23109
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 428; //@line 23112
  sp = STACKTOP; //@line 23113
  return;
 }
 ___async_unwind = 0; //@line 23116
 HEAP32[$ReallocAsyncCtx2 >> 2] = 428; //@line 23117
 sp = STACKTOP; //@line 23118
 return;
}
function __ZN16SX1276_LoRaRadio22set_max_payload_lengthE10modem_typeh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 796
 STACKTOP = STACKTOP + 16 | 0; //@line 797
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 797
 $vararg_buffer = sp; //@line 798
 HEAP8[$0 + 689 >> 0] = $1; //@line 801
 HEAP32[$vararg_buffer >> 2] = $1; //@line 803
 HEAP32[$vararg_buffer + 4 >> 2] = $2 & 255; //@line 805
 _mbed_tracef(16, 10968, 11178, $vararg_buffer); //@line 806
 STACKTOP = sp; //@line 807
 return;
}
function __ZN7LoRaMac34handle_mac_state_check_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 4932
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 4939
 _mbed_assert_internal(13612, 13621, 185); //@line 4940
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 389; //@line 4943
  sp = STACKTOP; //@line 4944
  return;
 }
 ___async_unwind = 0; //@line 4947
 HEAP32[$ReallocAsyncCtx2 >> 2] = 389; //@line 4948
 sp = STACKTOP; //@line 4949
 return;
}
function __ZN7LoRaPHY25accept_tx_param_setup_reqEP20tx_param_setup_req_s($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $17 = 0, $3 = 0, $6 = 0;
 $3 = HEAP8[$0 + 13 >> 0] | 0; //@line 23476
 if (!($3 << 24 >> 24)) {
  $17 = $3 << 24 >> 24 != 0; //@line 23479
  return $17 | 0; //@line 23480
 }
 $6 = $0 + 132 | 0; //@line 23483
 $10 = HEAP8[$6 >> 0] & -2 | HEAP8[$1 >> 0] & 1; //@line 23487
 HEAP8[$6 >> 0] = $10; //@line 23488
 HEAP8[$6 >> 0] = HEAP8[$1 + 1 >> 0] << 1 & 2 | $10 & -3; //@line 23495
 $17 = $3 << 24 >> 24 != 0; //@line 23496
 return $17 | 0; //@line 23497
}
function runPostSets() {}
function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535; //@line 34792
 $2 = $b & 65535; //@line 34793
 $3 = Math_imul($2, $1) | 0; //@line 34794
 $6 = $a >>> 16; //@line 34795
 $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0; //@line 34796
 $11 = $b >>> 16; //@line 34797
 $12 = Math_imul($11, $1) | 0; //@line 34798
 return (tempRet0 = ($8 >>> 16) + (Math_imul($11, $6) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, $8 + $12 << 16 | $3 & 65535 | 0) | 0; //@line 34799
}
function __ZN7LoRaMac22handle_rx1_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 11734
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 11741
 _mbed_assert_internal(13612, 13621, 207); //@line 11742
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 433; //@line 11745
  sp = STACKTOP; //@line 11746
  return;
 }
 ___async_unwind = 0; //@line 11749
 HEAP32[$ReallocAsyncCtx2 >> 2] = 433; //@line 11750
 sp = STACKTOP; //@line 11751
 return;
}
function __ZN7LoRaPHY16set_last_tx_doneEP24set_band_txdone_params_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $11 = 0, $16 = 0, $4 = 0, $9 = 0;
 if (!$1) {
  return;
 }
 $4 = HEAP32[$0 + 72 >> 2] | 0; //@line 22163
 $9 = (HEAP8[$1 + 1 >> 0] | 0) == 0; //@line 22168
 $11 = HEAP32[$1 + 4 >> 2] | 0; //@line 22170
 $16 = HEAPU8[(HEAP32[$0 + 112 >> 2] | 0) + ((HEAPU8[$1 >> 0] | 0) * 12 | 0) + 9 >> 0] | 0; //@line 22175
 HEAP32[$4 + ($16 * 24 | 0) + 8 >> 2] = $11; //@line 22177
 if (!$9) {
  return;
 }
 HEAP32[$4 + ($16 * 24 | 0) + 4 >> 2] = $11; //@line 22182
 return;
}
function __ZN7LoRaMac18handle_ack_timeoutEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 26711
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 26718
 _mbed_assert_internal(13612, 13621, 199); //@line 26719
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 430; //@line 26722
  sp = STACKTOP; //@line 26723
  return;
 }
 ___async_unwind = 0; //@line 26726
 HEAP32[$ReallocAsyncCtx2 >> 2] = 430; //@line 26727
 sp = STACKTOP; //@line 26728
 return;
}
function __ZN7LoRaMac17handle_tx_timeoutEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 18145
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 18152
 _mbed_assert_internal(13612, 13621, 162); //@line 18153
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 383; //@line 18156
  sp = STACKTOP; //@line 18157
  return;
 }
 ___async_unwind = 0; //@line 18160
 HEAP32[$ReallocAsyncCtx2 >> 2] = 383; //@line 18161
 sp = STACKTOP; //@line 18162
 return;
}
function __ZN7LoRaMac17handle_rx_timeoutEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 18943
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 18950
 _mbed_assert_internal(13612, 13621, 155); //@line 18951
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 376; //@line 18954
  sp = STACKTOP; //@line 18955
  return;
 }
 ___async_unwind = 0; //@line 18958
 HEAP32[$ReallocAsyncCtx2 >> 2] = 376; //@line 18959
 sp = STACKTOP; //@line 18960
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_41($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 20218
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20220
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20222
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 20223
 __ZN4mbed10TimerEventD2Ev($2); //@line 20224
 if (!___async) {
  ___async_unwind = 0; //@line 20227
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 78; //@line 20229
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $4; //@line 20231
 sp = STACKTOP; //@line 20232
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_40($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 20198
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20200
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20202
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 20203
 __ZN4mbed10TimerEventD2Ev($4); //@line 20204
 if (!___async) {
  ___async_unwind = 0; //@line 20207
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 76; //@line 20209
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $2; //@line 20211
 sp = STACKTOP; //@line 20212
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_39($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 20178
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20180
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20182
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(8) | 0; //@line 20183
 __ZN4mbed10TimerEventD2Ev($4); //@line 20184
 if (!___async) {
  ___async_unwind = 0; //@line 20187
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 74; //@line 20189
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $2; //@line 20191
 sp = STACKTOP; //@line 20192
 return;
}
function __ZN16LoRaWANInterface7connectERK15lorawan_connect($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$07 = 0;
 switch (HEAP8[$1 >> 0] | 0) {
 case 0:
  {
   $$07 = __ZN12LoRaWANStack20join_request_by_otaaERK15lorawan_connect(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1) | 0; //@line 5351
   break;
  }
 case 1:
  {
   $$07 = __ZN12LoRaWANStack29activation_by_personalizationERK15lorawan_connect(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1) | 0; //@line 5357
   break;
  }
 default:
  {
   $$07 = -1003; //@line 5361
  }
 }
 return $$07 | 0; //@line 5364
}
function __ZN7LoRaMac15handle_rx_errorEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 20524
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 20531
 _mbed_assert_internal(13612, 13621, 148); //@line 20532
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 369; //@line 20535
  sp = STACKTOP; //@line 20536
  return;
 }
 ___async_unwind = 0; //@line 20539
 HEAP32[$ReallocAsyncCtx2 >> 2] = 369; //@line 20540
 sp = STACKTOP; //@line 20541
 return;
}
function __ZN7LoRaMac22handle_rx2_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 9750
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 9757
 _mbed_assert_internal(13612, 13621, 215); //@line 9758
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 439; //@line 9761
  sp = STACKTOP; //@line 9762
  return;
 }
 ___async_unwind = 0; //@line 9765
 HEAP32[$ReallocAsyncCtx2 >> 2] = 439; //@line 9766
 sp = STACKTOP; //@line 9767
 return;
}
function __ZN7LoRaMac14handle_tx_doneEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 30186
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 30193
 _mbed_assert_internal(13612, 13621, 134); //@line 30194
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 291; //@line 30197
  sp = STACKTOP; //@line 30198
  return;
 }
 ___async_unwind = 0; //@line 30201
 HEAP32[$ReallocAsyncCtx2 >> 2] = 291; //@line 30202
 sp = STACKTOP; //@line 30203
 return;
}
function _calloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $3 = 0, $8 = 0;
 if (!$0) {
  $$0 = 0; //@line 10821
 } else {
  $3 = Math_imul($1, $0) | 0; //@line 10823
  if (($1 | $0) >>> 0 > 65535) {
   $$0 = (($3 >>> 0) / ($0 >>> 0) | 0 | 0) == ($1 | 0) ? $3 : -1; //@line 10830
  } else {
   $$0 = $3; //@line 10832
  }
 }
 $8 = _malloc($$0) | 0; //@line 10835
 if (!$8) {
  return $8 | 0; //@line 10838
 }
 if (!(HEAP32[$8 + -4 >> 2] & 3)) {
  return $8 | 0; //@line 10845
 }
 _memset($8 | 0, 0, $$0 | 0) | 0; //@line 10847
 return $8 | 0; //@line 10848
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 20158
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20160
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20162
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 20163
 __ZN4mbed10TimerEventD2Ev($4); //@line 20164
 if (!___async) {
  ___async_unwind = 0; //@line 20167
 }
 HEAP32[$ReallocAsyncCtx8 >> 2] = 72; //@line 20169
 HEAP32[$ReallocAsyncCtx8 + 4 >> 2] = $2; //@line 20171
 sp = STACKTOP; //@line 20172
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_47($0) {
 $0 = $0 | 0;
 var $3 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 20428
 $3 = (HEAP32[$0 + 4 >> 2] | 0) + 52 | 0; //@line 20431
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(4) | 0; //@line 20432
 __ZN4mbed11InterruptInD2Ev($3); //@line 20433
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 84; //@line 20436
  sp = STACKTOP; //@line 20437
  return;
 }
 ___async_unwind = 0; //@line 20440
 HEAP32[$ReallocAsyncCtx9 >> 2] = 84; //@line 20441
 sp = STACKTOP; //@line 20442
 return;
}
function _ticker_set_handler($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5139
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 5140
 _initialize($0); //@line 5141
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 610; //@line 5144
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 5146
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 5148
  sp = STACKTOP; //@line 5149
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5152
  HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = $1; //@line 5155
  return;
 }
}
function _mbed_die__async_cb_381($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 27810
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27812
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 27814
 $ReallocAsyncCtx15 = _emscripten_realloc_async_context(8) | 0; //@line 27815
 _wait_ms(150); //@line 27816
 if (!___async) {
  ___async_unwind = 0; //@line 27819
 }
 HEAP32[$ReallocAsyncCtx15 >> 2] = 630; //@line 27821
 HEAP32[$ReallocAsyncCtx15 + 4 >> 2] = $2; //@line 27823
 sp = STACKTOP; //@line 27824
 return;
}
function __ZN7LoRaMac14handle_rx_doneEPhtsa__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 28122
 if (HEAP32[$0 + 8 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 28131
 _mbed_assert_internal(13612, 13621, 141); //@line 28132
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 315; //@line 28135
  sp = STACKTOP; //@line 28136
  return;
 }
 ___async_unwind = 0; //@line 28139
 HEAP32[$ReallocAsyncCtx3 >> 2] = 315; //@line 28140
 sp = STACKTOP; //@line 28141
 return;
}
function _mbed_die__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx16 = 0, sp = 0;
 sp = STACKTOP; //@line 27440
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27442
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 27444
 $ReallocAsyncCtx16 = _emscripten_realloc_async_context(8) | 0; //@line 27445
 _wait_ms(150); //@line 27446
 if (!___async) {
  ___async_unwind = 0; //@line 27449
 }
 HEAP32[$ReallocAsyncCtx16 >> 2] = 629; //@line 27451
 HEAP32[$ReallocAsyncCtx16 + 4 >> 2] = $2; //@line 27453
 sp = STACKTOP; //@line 27454
 return;
}
function ___fflush_unlocked__async_cb_294($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $8 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11439
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11441
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11443
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11445
 HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 16 >> 2] = 0; //@line 11447
 HEAP32[$4 >> 2] = 0; //@line 11448
 HEAP32[$6 >> 2] = 0; //@line 11449
 HEAP32[$8 >> 2] = 0; //@line 11450
 HEAP32[$10 >> 2] = 0; //@line 11451
 HEAP32[___async_retval >> 2] = 0; //@line 11453
 return;
}
function __ZN12LoRaWANStack8shutdownEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 9625
 HEAP32[$0 + 1876 >> 2] = 7; //@line 9627
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 9628
 $2 = __ZN12LoRaWANStack18lora_state_machineEv($0) | 0; //@line 9629
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 274; //@line 9632
  sp = STACKTOP; //@line 9633
  return 0; //@line 9634
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 9636
  return $2 | 0; //@line 9637
 }
 return 0; //@line 9639
}
function __ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_300($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11832
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11834
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11838
 HEAP8[$2 + 688 >> 0] = 2; //@line 11842
 HEAP32[$4 >> 2] = 3; //@line 11843
 _mbed_tracef(16, 10968, 11025, $4); //@line 11844
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($2); //@line 11845
 HEAP32[$8 >> 2] = 3; //@line 11846
 _mbed_tracef(16, 10968, 11054, $8); //@line 11847
 return;
}
function __ZN4mbed7TimeoutD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 26874
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26876
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 26877
 __ZN4mbed10TimerEventD2Ev($2); //@line 26878
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 115; //@line 26881
  sp = STACKTOP; //@line 26882
  return;
 }
 ___async_unwind = 0; //@line 26885
 HEAP32[$ReallocAsyncCtx2 >> 2] = 115; //@line 26886
 sp = STACKTOP; //@line 26887
 return;
}
function __ZN4mbed6Ticker7handlerEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6918
 $2 = HEAP32[$0 + 52 >> 2] | 0; //@line 6920
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 >> 2] | 0; //@line 6926
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6927
 FUNCTION_TABLE_vi[$5 & 1023]($0 + 40 | 0); //@line 6928
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 656; //@line 6931
  sp = STACKTOP; //@line 6932
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 6935
 return;
}
function _mbed_vtracef__async_cb_121($0) {
 $0 = $0 | 0;
 var $1 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 25485
 $1 = HEAP32[191] | 0; //@line 25486
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 25487
 FUNCTION_TABLE_vi[$1 & 1023](12208); //@line 25488
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 142; //@line 25491
  sp = STACKTOP; //@line 25492
  return;
 }
 ___async_unwind = 0; //@line 25495
 HEAP32[$ReallocAsyncCtx3 >> 2] = 142; //@line 25496
 sp = STACKTOP; //@line 25497
 return;
}
function __ZN7LoRaPHY17copy_channel_maskEPtS0_h($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $indvars$iv = 0, $wide$trip$count = 0;
 if (!(($1 | 0) != 0 & ($2 | 0) != 0 & $3 << 24 >> 24 != 0)) {
  return;
 }
 $wide$trip$count = $3 & 255; //@line 24768
 $indvars$iv = 0; //@line 24769
 do {
  HEAP16[$1 + ($indvars$iv << 1) >> 1] = HEAP16[$2 + ($indvars$iv << 1) >> 1] | 0; //@line 24774
  $indvars$iv = $indvars$iv + 1 | 0; //@line 24775
 } while (($indvars$iv | 0) != ($wide$trip$count | 0));
 return;
}
function dynCall_viiiiiiiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 a9 = a9 | 0;
 a10 = a10 | 0;
 a11 = a11 | 0;
 a12 = a12 | 0;
 a13 = a13 | 0;
 a14 = a14 | 0;
 a15 = a15 | 0;
 FUNCTION_TABLE_viiiiiiiiiiiiiii[index & 1](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0, a9 | 0, a10 | 0, a11 | 0, a12 | 0, a13 | 0, a14 | 0, a15 | 0); //@line 35413
}
function __ZN4mbed6TickerD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 3006
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3008
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 3009
 __ZN4mbed10TimerEventD2Ev($2); //@line 3010
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 653; //@line 3013
  sp = STACKTOP; //@line 3014
  return;
 }
 ___async_unwind = 0; //@line 3017
 HEAP32[$ReallocAsyncCtx2 >> 2] = 653; //@line 3018
 sp = STACKTOP; //@line 3019
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_51($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 20505
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20507
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(8) | 0; //@line 20509
 __ZN4mbed11InterruptInD2Ev($2 + 340 | 0); //@line 20510
 if (!___async) {
  ___async_unwind = 0; //@line 20513
 }
 HEAP32[$ReallocAsyncCtx13 >> 2] = 80; //@line 20515
 HEAP32[$ReallocAsyncCtx13 + 4 >> 2] = $2; //@line 20517
 sp = STACKTOP; //@line 20518
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_50($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 20486
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20488
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 20490
 __ZN4mbed11InterruptInD2Ev($2 + 268 | 0); //@line 20491
 if (!___async) {
  ___async_unwind = 0; //@line 20494
 }
 HEAP32[$ReallocAsyncCtx12 >> 2] = 81; //@line 20496
 HEAP32[$ReallocAsyncCtx12 + 4 >> 2] = $2; //@line 20498
 sp = STACKTOP; //@line 20499
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_49($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 20467
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20469
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(8) | 0; //@line 20471
 __ZN4mbed11InterruptInD2Ev($2 + 196 | 0); //@line 20472
 if (!___async) {
  ___async_unwind = 0; //@line 20475
 }
 HEAP32[$ReallocAsyncCtx11 >> 2] = 82; //@line 20477
 HEAP32[$ReallocAsyncCtx11 + 4 >> 2] = $2; //@line 20479
 sp = STACKTOP; //@line 20480
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_48($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 20448
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20450
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 20452
 __ZN4mbed11InterruptInD2Ev($2 + 124 | 0); //@line 20453
 if (!___async) {
  ___async_unwind = 0; //@line 20456
 }
 HEAP32[$ReallocAsyncCtx10 >> 2] = 83; //@line 20458
 HEAP32[$ReallocAsyncCtx10 + 4 >> 2] = $2; //@line 20460
 sp = STACKTOP; //@line 20461
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_42($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 20238
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20240
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(8) | 0; //@line 20242
 __ZN4mbed11InterruptInD2Ev($2 + 412 | 0); //@line 20243
 if (!___async) {
  ___async_unwind = 0; //@line 20246
 }
 HEAP32[$ReallocAsyncCtx14 >> 2] = 79; //@line 20248
 HEAP32[$ReallocAsyncCtx14 + 4 >> 2] = $2; //@line 20250
 sp = STACKTOP; //@line 20251
 return;
}
function _gcm_aes_setkey_wrap($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3046
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3047
 $3 = _mbedtls_gcm_setkey($0, 2, $1, $2) | 0; //@line 3048
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 596; //@line 3051
  sp = STACKTOP; //@line 3052
  return 0; //@line 3053
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3055
  return $3 | 0; //@line 3056
 }
 return 0; //@line 3058
}
function _ccm_aes_setkey_wrap($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2998
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2999
 $3 = _mbedtls_ccm_setkey($0, 2, $1, $2) | 0; //@line 3000
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 594; //@line 3003
  sp = STACKTOP; //@line 3004
  return 0; //@line 3005
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3007
  return $3 | 0; //@line 3008
 }
 return 0; //@line 3010
}
function __ZN4mbed11InterruptInC2E7PinName($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, dest = 0, stop = 0;
 HEAP32[$0 >> 2] = 668; //@line 2504
 $2 = $0 + 4 | 0; //@line 2505
 $3 = $0 + 28 | 0; //@line 2506
 $4 = $0; //@line 2507
 dest = $2; //@line 2508
 stop = dest + 68 | 0; //@line 2508
 do {
  HEAP32[dest >> 2] = 0; //@line 2508
  dest = dest + 4 | 0; //@line 2508
 } while ((dest | 0) < (stop | 0));
 _gpio_irq_init($3, $1, 21, $4) | 0; //@line 2509
 _gpio_init_in($2, $1); //@line 2510
 return;
}
function _vsprintf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15713
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 15714
 $3 = _vsnprintf($0, 2147483647, $1, $2) | 0; //@line 15715
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 697; //@line 15718
  sp = STACKTOP; //@line 15719
  return 0; //@line 15720
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 15722
  return $3 | 0; //@line 15723
 }
 return 0; //@line 15725
}
function _serial_putc__async_cb_299($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 11769
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11771
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 11772
 _fflush($2) | 0; //@line 11773
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 651; //@line 11776
  sp = STACKTOP; //@line 11777
  return;
 }
 ___async_unwind = 0; //@line 11780
 HEAP32[$ReallocAsyncCtx >> 2] = 651; //@line 11781
 sp = STACKTOP; //@line 11782
 return;
}
function __ZN4mbed8CallbackIFv11lora_eventsEE13function_callIPS2_EEvPKvS1_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7639
 $2 = HEAP32[$0 >> 2] | 0; //@line 7640
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7641
 FUNCTION_TABLE_vi[$2 & 1023]($1); //@line 7642
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 683; //@line 7645
  sp = STACKTOP; //@line 7646
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7649
  return;
 }
}
function _main__async_cb_436($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 34521
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34523
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 34524
 __ZN6events10EventQueue8dispatchEi(23624, -1); //@line 34525
 if (!___async) {
  ___async_unwind = 0; //@line 34528
 }
 HEAP32[$ReallocAsyncCtx10 >> 2] = 674; //@line 34530
 HEAP32[$ReallocAsyncCtx10 + 4 >> 2] = $2; //@line 34532
 sp = STACKTOP; //@line 34533
 return;
}
function _putchar($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15790
 $1 = HEAP32[2586] | 0; //@line 15791
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 15792
 $2 = _fputc($0, $1) | 0; //@line 15793
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 699; //@line 15796
  sp = STACKTOP; //@line 15797
  return 0; //@line 15798
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 15800
  return $2 | 0; //@line 15801
 }
 return 0; //@line 15803
}
function __ZN7LoRaMac17on_radio_rx_errorEv__async_cb_12($0) {
 $0 = $0 | 0;
 var $15 = 0, $4 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18453
 HEAP32[$4 + 364 >> 2] = 2; //@line 18455
 if (HEAP8[$4 + 373 >> 0] | 0) {
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0) + 4 >> 2] = 6; //@line 18463
 }
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0) + 4 >> 2] = 6; //@line 18468
 $15 = $4 + 944 | 0; //@line 18469
 HEAP8[$15 >> 0] = HEAP8[$15 >> 0] | 32; //@line 18472
 return;
}
function __ZN4mbed10TimerEventD2Ev($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3036
 HEAP32[$0 >> 2] = 704; //@line 3037
 $2 = HEAP32[$0 + 24 >> 2] | 0; //@line 3039
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3041
 _ticker_remove_event($2, $0 + 8 | 0); //@line 3042
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 123; //@line 3045
  sp = STACKTOP; //@line 3046
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3049
  return;
 }
}
function __ZN4mbed7TimeoutD0Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 27830
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27832
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 27833
 __ZN4mbed10TimerEventD2Ev($2); //@line 27834
 if (!___async) {
  ___async_unwind = 0; //@line 27837
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 117; //@line 27839
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 27841
 sp = STACKTOP; //@line 27842
 return;
}
function __ZN7LoRaPHY19request_new_channelEP24new_channel_req_params_s__async_cb_38($0) {
 $0 = $0 | 0;
 var $$011 = 0;
 switch (HEAP32[___async_retval >> 2] | 0) {
 case 0:
  {
   $$011 = 3; //@line 20132
   break;
  }
 case -1004:
  {
   $$011 = 2; //@line 20136
   break;
  }
 case -1005:
  {
   $$011 = 1; //@line 20140
   break;
  }
 case -1006:
  {
   $$011 = 0; //@line 20144
   break;
  }
 default:
  {
   $$011 = 0; //@line 20148
  }
 }
 HEAP8[___async_retval >> 0] = $$011; //@line 20152
 return;
}
function dynCall_viiiiiiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 a9 = a9 | 0;
 a10 = a10 | 0;
 a11 = a11 | 0;
 a12 = a12 | 0;
 a13 = a13 | 0;
 a14 = a14 | 0;
 FUNCTION_TABLE_viiiiiiiiiiiiii[index & 1](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0, a9 | 0, a10 | 0, a11 | 0, a12 | 0, a13 | 0, a14 | 0); //@line 35406
}
function _emscripten_async_resume() {
 ___async = 0; //@line 35125
 ___async_unwind = 1; //@line 35126
 while (1) {
  if (!___async_cur_frame) return;
  dynCall_vi(HEAP32[___async_cur_frame + 8 >> 2] | 0, ___async_cur_frame + 8 | 0); //@line 35132
  if (___async) return;
  if (!___async_unwind) {
   ___async_unwind = 1; //@line 35136
   continue;
  }
  stackRestore(HEAP32[___async_cur_frame + 4 >> 2] | 0); //@line 35140
  ___async_cur_frame = HEAP32[___async_cur_frame >> 2] | 0; //@line 35142
 }
}
function __ZN4mbed6TickerD0Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 3444
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3446
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 3447
 __ZN4mbed10TimerEventD2Ev($2); //@line 3448
 if (!___async) {
  ___async_unwind = 0; //@line 3451
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 655; //@line 3453
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 3455
 sp = STACKTOP; //@line 3456
 return;
}
function _rand() {
 var $0 = 0, $10 = 0, $14 = 0, $6 = 0, $8 = 0, $9 = 0;
 $0 = 20888; //@line 15743
 $6 = ___muldi3(HEAP32[$0 >> 2] | 0, HEAP32[$0 + 4 >> 2] | 0, 1284865837, 1481765933) | 0; //@line 15749
 $8 = _i64Add($6 | 0, tempRet0 | 0, 1, 0) | 0; //@line 15751
 $9 = tempRet0; //@line 15752
 $10 = 20888; //@line 15753
 HEAP32[$10 >> 2] = $8; //@line 15755
 HEAP32[$10 + 4 >> 2] = $9; //@line 15758
 $14 = _bitshift64Lshr($8 | 0, $9 | 0, 33) | 0; //@line 15759
 return $14 | 0; //@line 15761
}
function ___stdio_close($0) {
 $0 = $0 | 0;
 var $5 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 10853
 STACKTOP = STACKTOP + 16 | 0; //@line 10854
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10854
 $vararg_buffer = sp; //@line 10855
 HEAP32[$vararg_buffer >> 2] = _dummy(HEAP32[$0 + 60 >> 2] | 0) | 0; //@line 10859
 $5 = ___syscall_ret(___syscall6(6, $vararg_buffer | 0) | 0) | 0; //@line 10861
 STACKTOP = sp; //@line 10862
 return $5 | 0; //@line 10862
}
function __ZN16SX1276_LoRaRadioD0Ev($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1504
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 1505
 __ZN16SX1276_LoRaRadioD2Ev($0); //@line 1506
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 85; //@line 1509
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 1511
  sp = STACKTOP; //@line 1512
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1515
  __ZdlPv($0); //@line 1516
  return;
 }
}
function __ZN4mbed10TimerEvent3irqEj($0) {
 $0 = $0 | 0;
 var $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3085
 $5 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0; //@line 3090
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3091
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 3092
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 125; //@line 3095
  sp = STACKTOP; //@line 3096
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3099
  return;
 }
}
function __ZN7LoRaPHY18verify_rx_datarateEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$sink5 = 0, $$sink6 = 0, $7 = 0;
 if (!(HEAP8[$0 + 132 >> 0] & 2)) {
  $7 = HEAP8[$0 + 28 >> 0] | 0; //@line 25022
  $$sink5 = $7; //@line 25023
  $$sink6 = $7; //@line 25023
 } else {
  $$sink5 = HEAP8[$0 + 28 >> 0] | 0; //@line 25029
  $$sink6 = HEAP8[$0 + 35 >> 0] | 0; //@line 25029
 }
 return ($$sink6 << 24 >> 24 <= $1 << 24 >> 24 ? $$sink5 << 24 >> 24 >= $1 << 24 >> 24 : 0) | 0; //@line 25034
}
function __ZN4mbed5TimerC2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $16 = 0, $4 = 0, $6 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18910
 $6 = ___async_retval; //@line 18912
 $11 = HEAP32[$6 + 4 >> 2] | 0; //@line 18917
 $12 = HEAP32[$0 + 4 >> 2] | 0; //@line 18918
 HEAP32[$12 >> 2] = HEAP32[$6 >> 2]; //@line 18920
 HEAP32[$12 + 4 >> 2] = $11; //@line 18923
 $16 = $4; //@line 18924
 HEAP32[$16 >> 2] = 0; //@line 18926
 HEAP32[$16 + 4 >> 2] = 0; //@line 18929
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv($0) {
 $0 = $0 | 0;
 var $1 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7006
 $1 = HEAP32[$0 >> 2] | 0; //@line 7007
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7008
 FUNCTION_TABLE_v[$1 & 15](); //@line 7009
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 659; //@line 7012
  sp = STACKTOP; //@line 7013
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7016
  return;
 }
}
function __ZN16SX1276_LoRaRadio11set_channelEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 751
 STACKTOP = STACKTOP + 16 | 0; //@line 752
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 752
 $vararg_buffer = sp; //@line 753
 HEAP32[$vararg_buffer >> 2] = $1; //@line 754
 _mbed_tracef(16, 10968, 11262, $vararg_buffer); //@line 755
 HEAP32[$0 + 692 >> 2] = $1; //@line 757
 STACKTOP = sp; //@line 758
 return;
}
function __ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $13 = 0, $2 = 0, $7 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18974
 if (HEAP8[$2 + 373 >> 0] | 0) {
  HEAP8[$2 + 377 >> 0] = 1; //@line 18980
  $7 = $2 + 968 | 0; //@line 18981
  HEAP32[$7 >> 2] = HEAP32[$7 >> 2] & -5; //@line 18984
 }
 if ((HEAP32[$2 + 360 >> 2] | 0) != 2) {
  return;
 }
 $13 = $2 + 944 | 0; //@line 18992
 HEAP8[$13 >> 0] = HEAP8[$13 >> 0] | 32; //@line 18995
 return;
}
function _handle_interrupt_in($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6690
 $2 = HEAP32[5884] | 0; //@line 6691
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6692
 FUNCTION_TABLE_vii[$2 & 31]($0, $1); //@line 6693
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 649; //@line 6696
  sp = STACKTOP; //@line 6697
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6700
  return;
 }
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP; //@line 35067
 STACKTOP = STACKTOP + 16 | 0; //@line 35068
 $rem = __stackBase__ | 0; //@line 35069
 ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0; //@line 35070
 STACKTOP = __stackBase__; //@line 35071
 return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0; //@line 35072
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_220($0) {
 $0 = $0 | 0;
 var $12 = 0, $4 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3688
 HEAP32[$4 + 364 >> 2] = 2; //@line 3690
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0) + 4 >> 2] = 2; //@line 3694
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0) + 4 >> 2] = 2; //@line 3698
 $12 = $4 + 944 | 0; //@line 3699
 HEAP8[$12 >> 0] = HEAP8[$12 >> 0] | 32; //@line 3702
 return;
}
function _llvm_cttz_i32(x) {
 x = x | 0;
 var ret = 0;
 ret = HEAP8[cttz_i8 + (x & 255) >> 0] | 0; //@line 34837
 if ((ret | 0) < 8) return ret | 0; //@line 34838
 ret = HEAP8[cttz_i8 + (x >> 8 & 255) >> 0] | 0; //@line 34839
 if ((ret | 0) < 8) return ret + 8 | 0; //@line 34840
 ret = HEAP8[cttz_i8 + (x >> 16 & 255) >> 0] | 0; //@line 34841
 if ((ret | 0) < 8) return ret + 16 | 0; //@line 34842
 return (HEAP8[cttz_i8 + (x >>> 24) >> 0] | 0) + 24 | 0; //@line 34843
}
function _gcm_ctx_free($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3073
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 3074
 _mbedtls_gcm_free($0); //@line 3075
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 597; //@line 3078
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 3080
  sp = STACKTOP; //@line 3081
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3084
  _free($0); //@line 3085
  return;
 }
}
function _ccm_ctx_free($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3025
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 3026
 _mbedtls_ccm_free($0); //@line 3027
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 595; //@line 3030
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 3032
  sp = STACKTOP; //@line 3033
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3036
  _free($0); //@line 3037
  return;
 }
}
function ___cxa_get_globals_fast() {
 var $3 = 0, sp = 0;
 sp = STACKTOP; //@line 16088
 STACKTOP = STACKTOP + 16 | 0; //@line 16089
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16089
 if (!(_pthread_once(24460, 8) | 0)) {
  $3 = _pthread_getspecific(HEAP32[6116] | 0) | 0; //@line 16095
  STACKTOP = sp; //@line 16096
  return $3 | 0; //@line 16096
 } else {
  _abort_message(19261, sp); //@line 16098
 }
 return 0; //@line 16101
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16008
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16010
 $6 = $2 + 1928 | 0; //@line 16013
 HEAP32[$6 >> 2] = HEAP32[___async_retval >> 2]; //@line 16014
 __ZN7LoRaPHY18set_radio_instanceER9LoRaRadio($2 + 1336 | 0, $4); //@line 16016
 HEAP32[___async_retval >> 2] = HEAP32[$6 >> 2]; //@line 16019
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb($0) {
 $0 = $0 | 0;
 var $14 = 0, $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28757
 HEAP32[$2 + 980 >> 2] = HEAP32[$0 + 8 >> 2]; //@line 28763
 if (HEAP8[$2 + 373 >> 0] | 0) {
  return;
 }
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($2 + 288 | 0) | 0) + 4 >> 2] = 0; //@line 28773
 $14 = $2 + 380 | 0; //@line 28774
 HEAP8[$14 >> 0] = (HEAP8[$14 >> 0] | 0) + 1 << 24 >> 24; //@line 28777
 return;
}
function __ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$1) {
  $$0 = -1003; //@line 5537
 } else {
  if (!(HEAP32[$1 + 12 >> 2] | 0)) {
   $$0 = -1003; //@line 5543
  } else {
   __ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1); //@line 5546
   $$0 = 0; //@line 5547
  }
 }
 return $$0 | 0; //@line 5550
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 16256
 }
 return;
}
function __ZN16SX1276_LoRaRadio15timeout_irq_isrEv($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1636
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 1637
 __ZN16SX1276_LoRaRadio18handle_timeout_irqEv($0); //@line 1638
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 87; //@line 1641
  sp = STACKTOP; //@line 1642
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1645
  return;
 }
}
function _sn_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $5 = 0, $6 = 0, $7 = 0;
 $5 = $0 + 20 | 0; //@line 15672
 $6 = HEAP32[$5 >> 2] | 0; //@line 15673
 $7 = (HEAP32[$0 + 16 >> 2] | 0) - $6 | 0; //@line 15674
 $$ = $7 >>> 0 > $2 >>> 0 ? $2 : $7; //@line 15676
 _memcpy($6 | 0, $1 | 0, $$ | 0) | 0; //@line 15678
 HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $$; //@line 15681
 return $2 | 0; //@line 15682
}
function __ZN6events10EventQueueC2EjPh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = $0 + 188 | 0; //@line 3109
 HEAP32[$3 >> 2] = 0; //@line 3110
 HEAP32[$3 + 4 >> 2] = 0; //@line 3110
 HEAP32[$3 + 8 >> 2] = 0; //@line 3110
 HEAP32[$3 + 12 >> 2] = 0; //@line 3110
 if (!$2) {
  _equeue_create($0, $1) | 0; //@line 3113
  return;
 } else {
  _equeue_create_inplace($0, $1, $2) | 0; //@line 3116
  return;
 }
}
function __ZN6events10EventQueue8dispatchEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3124
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3125
 _equeue_dispatch($0, $1); //@line 3126
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 126; //@line 3129
  sp = STACKTOP; //@line 3130
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3133
  return;
 }
}
function __ZL25default_terminate_handlerv__async_cb_269($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9734
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9736
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 9738
 HEAP32[$2 >> 2] = 19122; //@line 9739
 HEAP32[$2 + 4 >> 2] = $4; //@line 9741
 HEAP32[$2 + 8 >> 2] = $AsyncRetVal; //@line 9743
 _abort_message(18986, $2); //@line 9744
}
function _abort_message__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 10932
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10934
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 10935
 _fputc(10, $2) | 0; //@line 10936
 if (!___async) {
  ___async_unwind = 0; //@line 10939
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 706; //@line 10941
 sp = STACKTOP; //@line 10942
 return;
}
function __ZN6events10EventQueue6cancelEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3155
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3156
 _equeue_cancel($0, $1); //@line 3157
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 127; //@line 3160
  sp = STACKTOP; //@line 3161
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3164
  return;
 }
}
function __ZN7LoRaPHYC2ER18LoRaWANTimeHandler($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var dest = 0, stop = 0;
 HEAP32[$0 >> 2] = 944; //@line 24367
 HEAP32[$0 + 4 >> 2] = 0; //@line 24369
 HEAP32[$0 + 8 >> 2] = $1; //@line 24371
 dest = $0 + 12 | 0; //@line 24373
 stop = dest + 124 | 0; //@line 24373
 do {
  HEAP32[dest >> 2] = 0; //@line 24373
  dest = dest + 4 | 0; //@line 24373
 } while ((dest | 0) < (stop | 0));
 return;
}
function _add_pkcs_padding($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$09 = 0, $3 = 0, $5 = 0, $7 = 0;
 $3 = $1 - $2 | 0; //@line 2547
 if (!$3) {
  return;
 }
 $5 = $3 & 255; //@line 2552
 $$09 = 0; //@line 2553
 $7 = 0; //@line 2553
 do {
  HEAP8[$0 + ($7 + $2) >> 0] = $5; //@line 2557
  $$09 = $$09 + 1 << 24 >> 24; //@line 2558
  $7 = $$09 & 255; //@line 2559
 } while ($3 >>> 0 > $7 >>> 0);
 return;
}
function __ZN4mbed5Timer5startEv__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $13 = 0, $4 = 0, $6 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18124
 $6 = ___async_retval; //@line 18126
 $11 = HEAP32[$6 + 4 >> 2] | 0; //@line 18131
 $13 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 18133
 HEAP32[$13 >> 2] = HEAP32[$6 >> 2]; //@line 18135
 HEAP32[$13 + 4 >> 2] = $11; //@line 18138
 HEAP32[$4 >> 2] = 1; //@line 18139
 return;
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $9 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3616
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($2 + 288 | 0) | 0) + 4 >> 2] = 2; //@line 3620
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) + 4 >> 2] = 2; //@line 3624
 $9 = $2 + 944 | 0; //@line 3625
 HEAP8[$9 >> 0] = HEAP8[$9 >> 0] | 32; //@line 3628
 return;
}
function _gpio_irq_init($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0;
 if (($1 | 0) == -1) {
  $$0 = -1; //@line 6713
  return $$0 | 0; //@line 6714
 }
 HEAP32[5884] = $2; //@line 6716
 HEAP32[$0 >> 2] = $1; //@line 6717
 HEAP32[$0 + 4 >> 2] = $1; //@line 6719
 _emscripten_asm_const_iii(12, $3 | 0, $1 | 0) | 0; //@line 6720
 $$0 = 0; //@line 6721
 return $$0 | 0; //@line 6722
}
function _vsnprintf__async_cb($0) {
 $0 = $0 | 0;
 var $13 = 0, $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 28273
 if (HEAP32[$0 + 4 >> 2] | 0) {
  $13 = HEAP32[HEAP32[$0 + 16 >> 2] >> 2] | 0; //@line 28276
  HEAP8[$13 + ((($13 | 0) == (HEAP32[HEAP32[$0 + 20 >> 2] >> 2] | 0)) << 31 >> 31) >> 0] = 0; //@line 28281
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 28284
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 16850
 STACKTOP = STACKTOP + 16 | 0; //@line 16851
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16851
 _free($0); //@line 16853
 if (!(_pthread_setspecific(HEAP32[6116] | 0, 0) | 0)) {
  STACKTOP = sp; //@line 16858
  return;
 } else {
  _abort_message(19360, sp); //@line 16860
 }
}
function __ZN16LoRaWANInterface7receiveEhPhti($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0;
 if (($2 | 0) == 0 | $3 << 16 >> 16 == 0) {
  $$0 = -1003; //@line 5521
  return $$0 | 0; //@line 5522
 }
 $$0 = __ZN12LoRaWANStack9handle_rxEhPhth(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1, $2, $3, $4 & 255) | 0; //@line 5527
 return $$0 | 0; //@line 5528
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3541
 if ((HEAP32[$2 + 24 >> 2] | 0) == 1) {
  HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 + 16 >> 2]; //@line 3552
  $$0 = 1; //@line 3553
 } else {
  $$0 = 0; //@line 3555
 }
 HEAP8[___async_retval >> 0] = $$0 & 1; //@line 3559
 return;
}
function _serial_init($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $4 = 0, $9 = 0;
 HEAP32[$0 + 4 >> 2] = $2; //@line 6753
 HEAP32[$0 >> 2] = $1; //@line 6754
 HEAP32[5885] = 1; //@line 6755
 $4 = $0; //@line 6756
 $9 = HEAP32[$4 + 4 >> 2] | 0; //@line 6761
 $10 = 23544; //@line 6762
 HEAP32[$10 >> 2] = HEAP32[$4 >> 2]; //@line 6764
 HEAP32[$10 + 4 >> 2] = $9; //@line 6767
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 16332
 }
 return;
}
function __ZN11LoRaMacMcps18reset_confirmationEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = $0 + 36 | 0; //@line 21148
 HEAP32[$1 >> 2] = 0; //@line 21149
 HEAP32[$1 + 4 >> 2] = 0; //@line 21149
 HEAP32[$1 + 8 >> 2] = 0; //@line 21149
 HEAP32[$1 + 12 >> 2] = 0; //@line 21149
 HEAP32[$1 + 16 >> 2] = 0; //@line 21149
 HEAP32[$1 + 20 >> 2] = 0; //@line 21149
 HEAP32[$0 + 40 >> 2] = 1; //@line 21151
 return;
}
function _mbed_trace_default_print($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4581
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4582
 _puts($0) | 0; //@line 4583
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 137; //@line 4586
  sp = STACKTOP; //@line 4587
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4590
  return;
 }
}
function _equeue_sema_create($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $4 = 0;
 $1 = _pthread_mutex_init($0 | 0, 0) | 0; //@line 4410
 if (!$1) {
  $4 = _pthread_cond_init($0 + 28 | 0, 0) | 0; //@line 4414
  if (!$4) {
   HEAP8[$0 + 76 >> 0] = 0; //@line 4418
   $$0 = 0; //@line 4419
  } else {
   $$0 = $4; //@line 4421
  }
 } else {
  $$0 = $1; //@line 4424
 }
 return $$0 | 0; //@line 4426
}
function _wait_ms($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7053
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7054
 _emscripten_sleep($0 | 0); //@line 7055
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 660; //@line 7058
  sp = STACKTOP; //@line 7059
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7062
  return;
 }
}
function _equeue_tick() {
 var $0 = 0, sp = 0;
 sp = STACKTOP; //@line 4373
 STACKTOP = STACKTOP + 16 | 0; //@line 4374
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 4374
 $0 = sp; //@line 4375
 _gettimeofday($0 | 0, 0) | 0; //@line 4376
 STACKTOP = sp; //@line 4383
 return ((HEAP32[$0 + 4 >> 2] | 0) / 1e3 | 0) + ((HEAP32[$0 >> 2] | 0) * 1e3 | 0) | 0; //@line 4383
}
function __ZN12LoRaWANStack9handle_txEhPKhth__async_cb_347($0) {
 $0 = $0 | 0;
 var $11 = 0, $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 26195
 if (!$AsyncRetVal) {
  $11 = HEAPU16[HEAP32[$0 + 4 >> 2] >> 1] | 0; //@line 26200
 } else {
  $11 = $AsyncRetVal << 16 >> 16; //@line 26204
 }
 HEAP16[___async_retval >> 1] = $11; //@line 26208
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var sp = 0;
 sp = STACKTOP; //@line 16835
 STACKTOP = STACKTOP + 16 | 0; //@line 16836
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16836
 if (!(_pthread_key_create(24464, 715) | 0)) {
  STACKTOP = sp; //@line 16841
  return;
 } else {
  _abort_message(19310, sp); //@line 16843
 }
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $7 = 0;
 if ((HEAP32[$1 + 4 >> 2] | 0) == ($2 | 0)) {
  $7 = $1 + 28 | 0; //@line 16396
  if ((HEAP32[$7 >> 2] | 0) != 1) {
   HEAP32[$7 >> 2] = $3; //@line 16400
  }
 }
 return;
}
function _emscripten_alloc_async_context(len, sp) {
 len = len | 0;
 sp = sp | 0;
 var new_frame = 0;
 new_frame = stackAlloc(len + 8 | 0) | 0; //@line 35101
 HEAP32[new_frame + 4 >> 2] = sp; //@line 35103
 HEAP32[new_frame >> 2] = ___async_cur_frame; //@line 35105
 ___async_cur_frame = new_frame; //@line 35106
 return ___async_cur_frame + 8 | 0; //@line 35107
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_258($0) {
 $0 = $0 | 0;
 var $4 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8957
 HEAP32[$4 + 988 >> 2] = __ZN18LoRaWANTimeHandler16get_current_timeEv(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) | 0; //@line 8961
 HEAP32[___async_retval >> 2] = 0; //@line 8963
 return;
}
function _mbedtls_gcm_free__async_cb($0) {
 $0 = $0 | 0;
 var $$034$i = 0, $$05$i = 0;
 $$034$i = 400; //@line 18295
 $$05$i = HEAP32[$0 + 4 >> 2] | 0; //@line 18295
 while (1) {
  $$034$i = $$034$i + -1 | 0; //@line 18297
  HEAP8[$$05$i >> 0] = 0; //@line 18299
  if (!$$034$i) {
   break;
  } else {
   $$05$i = $$05$i + 1 | 0; //@line 18304
  }
 }
 return;
}
function __ZN14LoRaMacCommand30copy_repeat_commands_to_bufferEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $3 = 0, $8 = 0;
 $1 = $0 + 2 | 0; //@line 19174
 $3 = HEAPU8[$1 >> 0] | 0; //@line 19176
 $8 = HEAPU8[$0 + 3 >> 0] | 0; //@line 19181
 _memcpy($0 + 4 + $3 | 0, $0 + 132 | 0, $8 | 0) | 0; //@line 19182
 HEAP8[$1 >> 0] = $3 + $8; //@line 19185
 return;
}
function b372(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 p8 = p8 | 0;
 p9 = p9 | 0;
 p10 = p10 | 0;
 p11 = p11 | 0;
 p12 = p12 | 0;
 p13 = p13 | 0;
 p14 = p14 | 0;
 nullFunc_viiiiiiiiiiiiiii(0); //@line 415
}
function __ZN16LoRaWANInterface10initializeEPN6events10EventQueueE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$1) {
  $$0 = -1003; //@line 5300
 } else {
  $$0 = __ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1) | 0; //@line 5304
 }
 return $$0 | 0; //@line 5306
}
function __ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 6703
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 6703
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 6703
 return;
}
function __ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 8432
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 8432
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 8432
 return;
}
function _mbedtls_aes_free($0) {
 $0 = $0 | 0;
 var $$02$i = 0, $$031$i = 0;
 if (!$0) {
  return;
 }
 $$02$i = $0; //@line 38
 $$031$i = 280; //@line 38
 while (1) {
  $$031$i = $$031$i + -1 | 0; //@line 40
  HEAP8[$$02$i >> 0] = 0; //@line 42
  if (!$$031$i) {
   break;
  } else {
   $$02$i = $$02$i + 1 | 0; //@line 47
  }
 }
 return;
}
function __ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 6653
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 6653
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 6653
 return;
}
function __ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 8716
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 8716
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 8716
 return;
}
function __ZN7LoRaPHY15apply_DR_offsetEaa($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $5 = 0;
 $5 = ($1 & 255) - ($2 & 255) | 0; //@line 24088
 if (!($5 & 128)) {
  $$0 = $5 & 255; //@line 24093
  return $$0 | 0; //@line 24094
 }
 $$0 = HEAP8[$0 + 26 >> 0] | 0; //@line 24098
 return $$0 | 0; //@line 24099
}
function _gpio_init_inout($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 HEAP32[$0 >> 2] = $1; //@line 6676
 if (($1 | 0) == -1) {
  return;
 }
 HEAP32[$0 + 4 >> 2] = $1; //@line 6682
 _emscripten_asm_const_iiiiii(11, $0 | 0, $1 | 0, $2 | 0, $3 | 0, $4 | 0) | 0; //@line 6683
 return;
}
function b370(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 p8 = p8 | 0;
 p9 = p9 | 0;
 p10 = p10 | 0;
 p11 = p11 | 0;
 p12 = p12 | 0;
 p13 = p13 | 0;
 nullFunc_viiiiiiiiiiiiii(0); //@line 412
}
function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high << bits | (low & (1 << bits) - 1 << 32 - bits) >>> 32 - bits; //@line 35090
  return low << bits; //@line 35091
 }
 tempRet0 = low << bits - 32; //@line 35093
 return 0; //@line 35094
}
function ___cxa_can_catch__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP8[___async_retval >> 0] & 1; //@line 8710
 if ($AsyncRetVal) {
  HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 8714
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal & 1; //@line 8717
 return;
}
function __ZN11LoRaMacMlme18reset_confirmationEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = $0 + 8 | 0; //@line 21989
 HEAP32[$1 >> 2] = 0; //@line 21990
 HEAP32[$1 + 4 >> 2] = 0; //@line 21990
 HEAP32[$1 + 8 >> 2] = 0; //@line 21990
 HEAP32[$1 + 12 >> 2] = 0; //@line 21990
 HEAP32[$0 + 12 >> 2] = 1; //@line 21992
 return;
}
function __ZN4mbed8CallbackIFvPhtsaEE13function_moveINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 13172
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 13172
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 13172
 return;
}
function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >>> bits; //@line 35079
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits; //@line 35080
 }
 tempRet0 = 0; //@line 35082
 return high >>> bits - 32 | 0; //@line 35083
}
function __ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 1900
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 1900
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 1900
 return;
}
function __ZN16SX1276_LoRaRadio9start_cadEv($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 1160
 STACKTOP = STACKTOP + 16 | 0; //@line 1161
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 1161
 _mbed_tracef(16, 10968, 11102, sp); //@line 1163
 STACKTOP = sp; //@line 1164
 return;
}
function __ZN7LoRaPHY26get_next_lower_tx_datarateEa($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$sink = 0;
 $$sink = HEAP8[((HEAP8[$0 + 132 >> 0] & 1) == 0 ? $0 + 26 | 0 : $0 + 35 | 0) >> 0] | 0; //@line 24912
 return ($$sink << 24 >> 24 == $1 << 24 >> 24 ? $$sink : ($1 & 255) + 255 & 255) | 0; //@line 24918
}
function __ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 10589
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 10589
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 10589
 return;
}
function __ZN16SX1276_LoRaRadio11radio_resetEv($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 76
 STACKTOP = STACKTOP + 16 | 0; //@line 77
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 77
 _mbed_tracef(16, 10968, 11734, sp); //@line 79
 STACKTOP = sp; //@line 80
 return;
}
function _equeue_dispatch__async_cb_240($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6743
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6745
 HEAP8[HEAP32[$0 + 4 >> 2] >> 0] = 1; //@line 6746
 _equeue_mutex_unlock($4); //@line 6747
 HEAP8[$6 >> 0] = 0; //@line 6748
 return;
}
function __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb_214($0) {
 $0 = $0 | 0;
 var $6 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3422
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 3424
 HEAP32[$6 + 16 >> 2] = 0; //@line 3426
 return;
}
function _fflush__async_cb_288($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 11076
 if (!(HEAP8[$0 + 4 >> 0] & 1)) {
  ___unlockfile(HEAP32[$0 + 8 >> 2] | 0); //@line 11078
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 11081
 return;
}
function __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_337($0) {
 $0 = $0 | 0;
 var $6 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15976
 HEAP32[(HEAP32[$0 + 8 >> 2] | 0) + 364 >> 2] = 2; //@line 15978
 HEAP32[___async_retval >> 2] = $6; //@line 15980
 return;
}
function __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_383($0) {
 $0 = $0 | 0;
 var $6 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27989
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 27991
 _gpio_irq_set($6 + 28 | 0, 2, 1); //@line 27993
 return;
}
function _mbedtls_aes_crypt_ecb($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 if (($1 | 0) == 1) {
  _mbedtls_internal_aes_encrypt($0, $2, $3) | 0; //@line 1509
 } else {
  _mbedtls_internal_aes_decrypt($0, $2, $3) | 0; //@line 1511
 }
 return 0; //@line 1513
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_390($0) {
 $0 = $0 | 0;
 var $6 = 0;
 $6 = HEAP8[$0 + 12 >> 0] & 1; //@line 28357
 __ZN4mbed5TimerD2Ev(HEAP32[$0 + 4 >> 2] | 0); //@line 28358
 HEAP8[___async_retval >> 0] = $6 & 1; //@line 28361
 return;
}
function __GLOBAL__sub_I_main_cpp__async_cb_346($0) {
 $0 = $0 | 0;
 var dest = 0, stop = 0;
 dest = 23836; //@line 26043
 stop = dest + 48 | 0; //@line 26043
 do {
  HEAP32[dest >> 2] = 0; //@line 26043
  dest = dest + 4 | 0; //@line 26043
 } while ((dest | 0) < (stop | 0));
 return;
}
function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP; //@line 4
 STACKTOP = STACKTOP + size | 0; //@line 5
 STACKTOP = STACKTOP + 15 & -16; //@line 6
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(size | 0); //@line 7
 return ret | 0; //@line 9
}
function _equeue_post__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 10988
 _equeue_sema_signal((HEAP32[$0 + 4 >> 2] | 0) + 48 | 0); //@line 10990
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 10992
 return;
}
function _gpio_init_out_ex($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 HEAP32[$0 >> 2] = $1; //@line 6658
 if (($1 | 0) == -1) {
  return;
 }
 HEAP32[$0 + 4 >> 2] = $1; //@line 6664
 _emscripten_asm_const_iiii(10, $0 | 0, $1 | 0, $2 | 0) | 0; //@line 6665
 return;
}
function _puts__async_cb($0) {
 $0 = $0 | 0;
 var $$lobit = 0;
 $$lobit = HEAP32[___async_retval >> 2] >> 31; //@line 9972
 if (HEAP32[$0 + 4 >> 2] | 0) {
  ___unlockfile(HEAP32[$0 + 8 >> 2] | 0); //@line 9975
 }
 HEAP32[___async_retval >> 2] = $$lobit; //@line 9978
 return;
}
function __ZN12LoRaWANStack23set_confirmed_msg_retryEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if ($1 << 24 >> 24 == -1) {
  $$0 = -1003; //@line 8889
 } else {
  HEAP8[$0 + 2284 >> 0] = $1; //@line 8892
  $$0 = 0; //@line 8893
 }
 return $$0 | 0; //@line 8895
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_108($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 24089
 HEAP32[___async_retval >> 2] = ($AsyncRetVal | 0) == 0 ? -1016 : $AsyncRetVal; //@line 24093
 return;
}
function ___overflow__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ((HEAP32[___async_retval >> 2] | 0) == 1) {
  $$0 = HEAPU8[HEAP32[$0 + 4 >> 2] >> 0] | 0; //@line 18552
 } else {
  $$0 = -1; //@line 18554
 }
 HEAP32[___async_retval >> 2] = $$0; //@line 18557
 return;
}
function dynCall_iiiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 return FUNCTION_TABLE_iiiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0; //@line 35350
}
function ___lctrans_impl($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$1) {
  $$0 = 0; //@line 11560
 } else {
  $$0 = ___mo_lookup(HEAP32[$1 >> 2] | 0, HEAP32[$1 + 4 >> 2] | 0, $0) | 0; //@line 11566
 }
 return ($$0 | 0 ? $$0 : $0) | 0; //@line 11570
}
function __ZN7LoRaMac21send_frame_on_channelEh__async_cb_148($0) {
 $0 = $0 | 0;
 var $7 = 0;
 $7 = (HEAP32[$0 + 4 >> 2] | 0) + 968 | 0; //@line 27657
 HEAP32[$7 >> 2] = HEAP32[$7 >> 2] | 1; //@line 27660
 HEAP32[___async_retval >> 2] = 0; //@line 27662
 return;
}
function _equeue_break($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = $0 + 128 | 0; //@line 3809
 _equeue_mutex_lock($1); //@line 3810
 HEAP8[$0 + 8 >> 0] = 1; //@line 3812
 _equeue_mutex_unlock($1); //@line 3813
 _equeue_sema_signal($0 + 48 | 0); //@line 3815
 return;
}
function __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_358($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27065
 HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | 1; //@line 27068
 HEAP32[___async_retval >> 2] = 0; //@line 27070
 return;
}
function __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_357($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27052
 HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | 1; //@line 27055
 HEAP32[___async_retval >> 2] = 0; //@line 27057
 return;
}
function _mbedtls_cipher_init($0) {
 $0 = $0 | 0;
 var dest = 0, stop = 0;
 dest = $0; //@line 2232
 stop = dest + 68 | 0; //@line 2232
 do {
  HEAP32[dest >> 2] = 0; //@line 2232
  dest = dest + 4 | 0; //@line 2232
 } while ((dest | 0) < (stop | 0));
 return;
}
function dynCall_viiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 FUNCTION_TABLE_viiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0); //@line 35399
}
function _emscripten_free_async_context(ctx) {
 ctx = ctx | 0;
 assert((___async_cur_frame + 8 | 0) == (ctx | 0) | 0); //@line 35113
 stackRestore(___async_cur_frame | 0); //@line 35114
 ___async_cur_frame = HEAP32[___async_cur_frame >> 2] | 0; //@line 35115
}
function _mbedtls_ccm_init($0) {
 $0 = $0 | 0;
 var dest = 0, stop = 0;
 dest = $0; //@line 1914
 stop = dest + 68 | 0; //@line 1914
 do {
  HEAP32[dest >> 2] = 0; //@line 1914
  dest = dest + 4 | 0; //@line 1914
 } while ((dest | 0) < (stop | 0));
 return;
}
function __ZN7LoRaMac23mib_get_request_confirmEP25loramac_mib_req_confirm_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN10LoRaMacMib11get_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params($0 + 348 | 0, $1, $0 + 360 | 0) | 0; //@line 17698
}
function __Z15decrypt_payloadPKhtS0_jhjPh($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 return __Z15encrypt_payloadPKhtS0_jhjPh($0, $1, $2, $3, $4, $5, $6) | 0; //@line 20936
}
function _fputc__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 10965
 ___unlockfile(HEAP32[$0 + 4 >> 2] | 0); //@line 10966
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 10968
 return;
}
function _putc__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 18178
 ___unlockfile(HEAP32[$0 + 4 >> 2] | 0); //@line 18179
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 18181
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_114($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24443
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = 6; //@line 24448
 HEAP32[___async_retval >> 2] = $2; //@line 24450
 return;
}
function __ZN7LoRaPHY15get_ack_timeoutEv($0) {
 $0 = $0 | 0;
 var $5 = 0, $6 = 0;
 $5 = HEAPU16[$0 + 50 >> 1] | 0; //@line 24965
 $6 = HEAPU16[$0 + 52 >> 1] | 0; //@line 24966
 return $5 - $6 + ((_rand() | 0) % ($6 << 1 | 1 | 0) | 0) | 0; //@line 24973
}
function ___DOUBLE_BITS_677($0) {
 $0 = +$0;
 var $1 = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 14671
 $1 = HEAP32[tempDoublePtr >> 2] | 0; //@line 14671
 tempRet0 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 14673
 return $1 | 0; //@line 14674
}
function ___syscall_ret($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ($0 >>> 0 > 4294963200) {
  HEAP32[(___errno_location() | 0) >> 2] = 0 - $0; //@line 11019
  $$0 = -1; //@line 11020
 } else {
  $$0 = $0; //@line 11022
 }
 return $$0 | 0; //@line 11024
}
function _gpio_init_out($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 6642
 if (($1 | 0) == -1) {
  return;
 }
 HEAP32[$0 + 4 >> 2] = $1; //@line 6648
 _emscripten_asm_const_iii(9, $0 | 0, $1 | 0) | 0; //@line 6649
 return;
}
function _gpio_init_in($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 6627
 if (($1 | 0) == -1) {
  return;
 }
 HEAP32[$0 + 4 >> 2] = $1; //@line 6633
 _emscripten_asm_const_iii(8, $0 | 0, $1 | 0) | 0; //@line 6634
 return;
}
function _equeue_sema_signal($0) {
 $0 = $0 | 0;
 _pthread_mutex_lock($0 | 0) | 0; //@line 4432
 HEAP8[$0 + 76 >> 0] = 1; //@line 4434
 _pthread_cond_signal($0 + 28 | 0) | 0; //@line 4436
 _pthread_mutex_unlock($0 | 0) | 0; //@line 4437
 return;
}
function __ZN16LoRaWANInterface16get_channel_planER16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack20get_enabled_channelsER16lora_channelplan(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1) | 0; //@line 5442
}
function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var h = 0;
 h = b - d >>> 0; //@line 34830
 h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0; //@line 34831
 return (tempRet0 = h, a - c >>> 0 | 0) | 0; //@line 34832
}
function dynCall_iiiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return FUNCTION_TABLE_iiiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0; //@line 35343
}
function __ZN4mbed6Ticker5setupEy($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $4 = 0;
 $4 = ___udivdi3($1 | 0, $2 | 0, 1e3, 0) | 0; //@line 6990
 _emscripten_asm_const_iii(16, $0 + 40 | 0, $4 | 0) | 0; //@line 6992
 return;
}
function __ZN16LoRaWANInterface16set_channel_planERK16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack12add_channelsERK16lora_channelplan(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1) | 0; //@line 5433
}
function __ZN16SX1276_LoRaRadio10init_radioEP12radio_events__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5350
 HEAP8[$2 + 689 >> 0] = 0; //@line 5352
 HEAP8[$2 + 688 >> 0] = 0; //@line 5354
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_335($0) {
 $0 = $0 | 0;
 HEAP8[HEAP32[$0 + 8 >> 2] >> 0] = HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0; //@line 15823
 HEAP8[___async_retval >> 0] = 1; //@line 15826
 return;
}
function __ZN16LoRaWANInterface22add_link_check_requestEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 4 >> 0] = 1; //@line 5379
 return __ZN12LoRaWANStack22set_link_check_requestEv(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0) | 0; //@line 5382
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_85($0) {
 $0 = $0 | 0;
 if (HEAP32[___async_retval >> 2] | 0) {
  _mbed_tracef(2, 12356, 12494, HEAP32[$0 + 4 >> 2] | 0); //@line 23070
 }
 return;
}
function ___clang_call_terminate($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 1523
 ___cxa_begin_catch($0 | 0) | 0; //@line 1524
 _emscripten_alloc_async_context(4, sp) | 0; //@line 1525
 __ZSt9terminatev(); //@line 1526
}
function dynCall_viiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 FUNCTION_TABLE_viiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0); //@line 35392
}
function _aes_ctx_alloc() {
 var $$0 = 0, $0 = 0;
 $0 = _calloc(1, 280) | 0; //@line 3132
 if (!$0) {
  $$0 = 0; //@line 3135
 } else {
  _mbedtls_aes_init($0); //@line 3137
  $$0 = $0; //@line 3138
 }
 return $$0 | 0; //@line 3140
}
function _equeue_enqueue__async_cb($0) {
 $0 = $0 | 0;
 var $4 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9956
 _equeue_mutex_unlock(HEAP32[$0 + 4 >> 2] | 0); //@line 9957
 HEAP32[___async_retval >> 2] = $4; //@line 9959
 return;
}
function _handle_lora_downlink($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 __ZN16SX1276_LoRaRadio8rx_frameEPhjjhh($0, $1, $2, $3, $4, $5); //@line 2066
 return;
}
function ___cxa_guard_acquire($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ((HEAP8[$0 >> 0] | 0) == 1) {
  $$0 = 0; //@line 17712
 } else {
  HEAP8[$0 >> 0] = 1; //@line 17714
  $$0 = 1; //@line 17715
 }
 return $$0 | 0; //@line 17717
}
function __ZN16LoRaWANInterface25set_confirmed_msg_retriesEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack23set_confirmed_msg_retryEh(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1) | 0; //@line 5424
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_308($0) {
 $0 = $0 | 0;
 HEAP8[HEAP32[$0 + 8 >> 2] >> 0] = HEAP8[$0 + 4 >> 0] | 0; //@line 12409
 HEAP8[___async_retval >> 0] = 1; //@line 12412
 return;
}
function dynCall_iiiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return FUNCTION_TABLE_iiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0; //@line 35336
}
function _aes_crypt_cbc_wrap($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return _mbedtls_aes_crypt_cbc($0, $1, $2, $3, $4, $5) | 0; //@line 3109
}
function __ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_2($0) {
 $0 = $0 | 0;
 var $3 = 0;
 $3 = (HEAP32[$0 + 4 >> 2] | 0) + 944 | 0; //@line 17966
 HEAP8[$3 >> 0] = HEAP8[$3 >> 0] | 32; //@line 17969
 return;
}
function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0;
 l = a + c >>> 0; //@line 34822
 return (tempRet0 = b + d + (l >>> 0 < a >>> 0 | 0) >>> 0, l | 0) | 0; //@line 34824
}
function __ZN7LoRaMac17on_radio_rx_errorEv__async_cb_11($0) {
 $0 = $0 | 0;
 var $3 = 0;
 $3 = (HEAP32[$0 + 4 >> 2] | 0) + 944 | 0; //@line 18440
 HEAP8[$3 >> 0] = HEAP8[$3 >> 0] | 32; //@line 18443
 return;
}
function __ZN16LoRaWANInterface12set_datarateEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack21set_channel_data_rateEh(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1) | 0; //@line 5399
}
function dynCall_viiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 FUNCTION_TABLE_viiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0); //@line 35385
}
function __ZN16LoRaWANInterface25disable_adaptive_datarateEv($0) {
 $0 = $0 | 0;
 return __ZN12LoRaWANStack24enable_adaptive_datarateEb(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, 0) | 0; //@line 5415
}
function __ZN16LoRaWANInterface14remove_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack16remove_a_channelEh(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1) | 0; //@line 5459
}
function __ZN7LoRaPHY15get_max_payloadEhb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return HEAP8[(HEAP32[($2 ? $0 + 104 | 0 : $0 + 96 | 0) >> 2] | 0) + ($1 & 255) >> 0] | 0; //@line 24947
}
function __ZN16LoRaWANInterface24enable_adaptive_datarateEv($0) {
 $0 = $0 | 0;
 return __ZN12LoRaWANStack24enable_adaptive_datarateEb(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, 1) | 0; //@line 5407
}
function __ZN7LoRaPHY15verify_tx_powerEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ((HEAP8[$0 + 22 >> 0] | 0) <= $1 << 24 >> 24 ? (HEAP8[$0 + 21 >> 0] | 0) >= $1 << 24 >> 24 : 0) | 0; //@line 25084
}
function __ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_72($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 22097
 return;
}
function _strchr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = ___strchrnul($0, $1) | 0; //@line 11705
 return ((HEAP8[$2 >> 0] | 0) == ($1 & 255) << 24 >> 24 ? $2 : 0) | 0; //@line 11710
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_115($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 6; //@line 24461
 HEAP32[___async_retval >> 2] = -1014; //@line 24463
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_352($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 26630
 return;
}
function _wctomb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$0) {
  $$0 = 0; //@line 13731
 } else {
  $$0 = _wcrtomb($0, $1, 0) | 0; //@line 13734
 }
 return $$0 | 0; //@line 13736
}
function __ZN7LoRaPHY19request_new_channelEP24new_channel_req_params_s__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[___async_retval >> 0] = HEAP8[___async_retval >> 0] & 1 ? 3 : 0; //@line 20121
 return;
}
function __ZN7LoRaPHY13mask_bit_testEPKtj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return (1 << ($2 & 15) & (HEAPU16[$1 + ($2 >>> 4 << 1) >> 1] | 0) | 0) != 0 | 0; //@line 24390
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_136($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 26465
 return;
}
function __ZN12LoRaWANStack29activation_by_personalizationERK15lorawan_connect__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 4867
 return;
}
function __ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb_34($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 19899
 return;
}
function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[index & 15](a1 | 0, a2 | 0, a3 | 0) | 0; //@line 35329
}
function __ZN16LoRaWANInterface19remove_channel_planEv($0) {
 $0 = $0 | 0;
 return __ZN12LoRaWANStack17drop_channel_listEv(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0) | 0; //@line 5450
}
function _fputs($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = _strlen($0) | 0; //@line 11200
 return ((_fwrite($0, 1, $2, $1) | 0) != ($2 | 0)) << 31 >> 31 | 0; //@line 11204
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 return ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0; //@line 35059
}
function __ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_173($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 30087
 return;
}
function __ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_170($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 30015
 return;
}
function __ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_169($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 30007
 return;
}
function ___dynamic_cast__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) == 1 ? HEAP32[$0 + 8 >> 2] | 0 : 0; //@line 20583
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_152($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 27936
 return;
}
function __ZN12LoRaWANStack20join_request_by_otaaERK15lorawan_connect__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 30514
 return;
}
function b42(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(3); //@line 35522
 return 0; //@line 35522
}
function b41(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(0); //@line 35519
 return 0; //@line 35519
}
function __ZN16SX1276_LoRaRadio18set_public_networkEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 + 689 >> 0] = 1; //@line 816
 HEAP8[$0 + 776 >> 0] = $1 & 1; //@line 818
 return;
}
function __ZN18LoRaWANTimeHandler16get_elapsed_timeEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return (__ZN6events10EventQueue4tickEv(HEAP32[$0 >> 2] | 0) | 0) - $1 | 0; //@line 25423
}
function __ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 29999
 return;
}
function _emscripten_realloc_async_context(len) {
 len = len | 0;
 stackRestore(___async_cur_frame | 0); //@line 35120
 return (stackAlloc(len + 8 | 0) | 0) + 8 | 0; //@line 35121
}
function _gpio_irq_set($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 _emscripten_asm_const_iiii(14, HEAP32[$0 + 4 >> 2] | 0, $1 | 0, $2 | 0) | 0; //@line 6743
 return;
}
function __ZN12LoRaWANStack12add_channelsERK16lora_channelplan__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 20557
 return;
}
function dynCall_viii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 FUNCTION_TABLE_viii[index & 7](a1 | 0, a2 | 0, a3 | 0); //@line 35378
}
function __ZN7LoRaMac16add_channel_planERK16lora_channelplan__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 5333
 return;
}
function establishStackSpace(stackBase, stackMax) {
 stackBase = stackBase | 0;
 stackMax = stackMax | 0;
 STACKTOP = stackBase; //@line 21
 STACK_MAX = stackMax; //@line 22
}
function __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_291($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 11229
 return;
}
function __ZN5Sht31C2E7PinNameS0_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 _emscripten_asm_const_iiii(17, $0 | 0, $1 | 0, $2 | 0) | 0; //@line 7072
 return;
}
function __ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_386($0) {
 $0 = $0 | 0;
 _gpio_irq_set((HEAP32[$0 + 8 >> 2] | 0) + 28 | 0, 2, 0); //@line 28104
 return;
}
function __ZN12LoRaWANStack24enable_adaptive_datarateEb__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 18257
 return;
}
function __ZN7LoRaPHY23get_minimum_tx_datarateEv($0) {
 $0 = $0 | 0;
 return HEAP8[((HEAP8[$0 + 132 >> 0] & 1) == 0 ? $0 + 26 | 0 : $0 + 35 | 0) >> 0] | 0; //@line 24932
}
function __ZN4mbed8CallbackIFv11lora_eventsEE13function_moveIPS2_EEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 7659
 return;
}
function _swapc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0;
 $3 = _llvm_bswap_i32($0 | 0) | 0; //@line 11696
 return (($1 | 0) == 0 ? $0 : $3) | 0; //@line 11698
}
function __ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16LoRaWANInterface10disconnectEv($0) {
 $0 = $0 | 0;
 return __ZN12LoRaWANStack8shutdownEv(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0) | 0; //@line 5372
}
function __ZN12LoRaWANStack22set_link_check_requestEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 26746
 return;
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 16935
 __ZdlPv($0); //@line 16936
 return;
}
function _aes_crypt_ecb_wrap($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 return _mbedtls_aes_crypt_ecb($0, $1, $2, $3) | 0; //@line 3097
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 16618
 __ZdlPv($0); //@line 16619
 return;
}
function _srand($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = 20888; //@line 15732
 HEAP32[$2 >> 2] = $0 + -1; //@line 15734
 HEAP32[$2 + 4 >> 2] = 0; //@line 15737
 return;
}
function __ZN18LoRaWANTimeHandler24activate_timer_subsystemEPN6events10EventQueueE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 25404
 return;
}
function __ZN12LoRaWANStack21set_channel_data_rateEh__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 3352
 return;
}
function _gcm_ctx_alloc() {
 var $0 = 0;
 $0 = _calloc(1, 400) | 0; //@line 3063
 if ($0 | 0) {
  _mbedtls_gcm_init($0); //@line 3066
 }
 return $0 | 0; //@line 3068
}
function b39(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(7); //@line 35516
 return 0; //@line 35516
}
function b38(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(6); //@line 35513
 return 0; //@line 35513
}
function b37(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(5); //@line 35510
 return 0; //@line 35510
}
function b36(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(0); //@line 35507
 return 0; //@line 35507
}
function _ccm_ctx_alloc() {
 var $0 = 0;
 $0 = _calloc(1, 68) | 0; //@line 3015
 if ($0 | 0) {
  _mbedtls_ccm_init($0); //@line 3018
 }
 return $0 | 0; //@line 3020
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 16146
 __ZdlPv($0); //@line 16147
 return;
}
function __ZN12LoRaWANStack17drop_channel_listEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 18016
 return;
}
function __ZN12LoRaWANStack17send_frame_to_macEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 5323
 return;
}
function __ZN12LoRaWANStack16remove_a_channelEh__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 17800
 return;
}
function _ticker_set_handler__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 4 >> 2] >> 2] = HEAP32[$0 + 8 >> 2]; //@line 17813
 return;
}
function _out_670($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 if (!(HEAP32[$0 >> 2] & 32)) {
  ___fwritex($1, $2, $0) | 0; //@line 13216
 }
 return;
}
function __ZN7LoRaMac21remove_single_channelEh__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 27900
 return;
}
function setThrew(threw, value) {
 threw = threw | 0;
 value = value | 0;
 if (!__THREW__) {
  __THREW__ = threw; //@line 32
  threwValue = value; //@line 33
 }
}
function ___cxa_is_pointer_type__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = (HEAP32[___async_retval >> 2] | 0) != 0 & 1; //@line 8545
 return;
}
function dynCall_iii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return FUNCTION_TABLE_iii[index & 31](a1 | 0, a2 | 0) | 0; //@line 35322
}
function __ZN18LoRaMacChannelPlan30activate_channelplan_subsystemEP7LoRaPHY($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 18437
 return;
}
function __ZN7LoRaMac19remove_channel_planEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 4981
 return;
}
function b368(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_viiiiii(0); //@line 409
}
function __ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_237($0) {
 $0 = $0 | 0;
 HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 364 >> 2] = 1; //@line 5408
 return;
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_322($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 8 >> 2]; //@line 14867
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 7026
 return;
}
function __ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed5TimerD2Ev($0) {
 $0 = $0 | 0;
 if (HEAP32[$0 >> 2] | 0) {
  if (HEAP8[$0 + 28 >> 0] | 0) {}
 }
 HEAP32[$0 >> 2] = 0; //@line 2931
 return;
}
function __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return ($0 | 0) == ($1 | 0) | 0; //@line 16343
}
function __ZN16LoRaWANInterface7connectEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 3364
 return;
}
function __ZN7LoRaPHY16get_channel_maskEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return HEAP32[($1 ? $0 + 124 | 0 : $0 + 120 | 0) >> 2] | 0; //@line 24984
}
function __ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __Z22compute_join_frame_micPKhtS0_Pj__async_cb_236($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 5207
 return;
}
function __ZSt13get_terminatev() {
 var $0 = 0;
 $0 = HEAP32[2711] | 0; //@line 16925
 HEAP32[2711] = $0 + 0; //@line 16927
 return $0 | 0; //@line 16929
}
function __ZN12LoRaWANStack8shutdownEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 26174
 return;
}
function __ZN18LoRaWANTimeHandler16get_current_timeEv($0) {
 $0 = $0 | 0;
 return __ZN6events10EventQueue4tickEv(HEAP32[$0 >> 2] | 0) | 0; //@line 25413
}
function _gpio_irq_free($0) {
 $0 = $0 | 0;
 _emscripten_asm_const_iii(13, HEAP32[$0 + 4 >> 2] | 0, HEAP32[$0 + 8 >> 2] | 0) | 0; //@line 6732
 return;
}
function _mbedtls_cipher_setkey__async_cb_345($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 25978
 return;
}
function _mbedtls_cipher_update__async_cb_247($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 8368
 return;
}
function dynCall_vii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 FUNCTION_TABLE_vii[index & 31](a1 | 0, a2 | 0); //@line 35371
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvPhtsaEE13function_callINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPKvS1_tsa__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb_8($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 18239
 return;
}
function _aes_setkey_enc_wrap($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return _mbedtls_aes_setkey_enc($0, $1, $2) | 0; //@line 3118
}
function _aes_setkey_dec_wrap($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return _mbedtls_aes_setkey_dec($0, $1, $2) | 0; //@line 3127
}
function __ZN7LoRaPHY13get_radio_rngEv__async_cb_217($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 3533
 return;
}
function __ZN18LoRaWANTimeHandler4stopER13timer_event_t__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 0; //@line 30504
 return;
}
function __Z11compute_micPKhtS0_jhjPj__async_cb_366($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 27434
 return;
}
function _mbedtls_cipher_setkey__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 25968
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio6randomEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 12422
 return;
}
function b34(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(3); //@line 35504
 return 0; //@line 35504
}
function b33(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(0); //@line 35501
 return 0; //@line 35501
}
function _mbedtls_cipher_update__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 8228
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_118($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1011; //@line 24493
 return;
}
function __ZN11LoRaMacMlme23activate_mlme_subsystemEP7LoRaPHY($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 22014
 return;
}
function _mbedtls_ccm_setkey__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 20046
 return;
}
function _gcm_aes_setkey_wrap__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 4971
 return;
}
function _ccm_aes_setkey_wrap__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 8727
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN10LoRaMacMib22activate_mib_subsystemEP7LoRaPHY($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 21191
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _llvm_bswap_i32(x) {
 x = x | 0;
 return (x & 255) << 24 | (x >> 8 & 255) << 16 | (x >> 16 & 255) << 8 | x >>> 24 | 0; //@line 35147
}
function __ZN7LoRaPHY18set_radio_instanceER9LoRaRadio($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + 4 >> 2] = $1; //@line 24398
 return;
}
function __ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_117($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 24483
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_116($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 24473
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_13($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack17get_lorawan_stackEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 20896; //@line 25952
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($0) {
 $0 = $0 | 0;
 return (HEAP8[$0 + 3 >> 0] | 0) != 0 | 0; //@line 20510
}
function b366(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(0); //@line 406
}
function _fflush__async_cb_289($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 11091
 return;
}
function __ZN7LoRaPHY32is_custom_channel_plan_supportedEv($0) {
 $0 = $0 | 0;
 return (HEAP8[$0 + 16 >> 0] | 0) != 0 | 0; //@line 25009
}
function _strerror($0) {
 $0 = $0 | 0;
 return ___strerror_l($0, HEAP32[(___pthread_self_85() | 0) + 188 >> 2] | 0) | 0; //@line 13679
}
function _fputc__async_cb_287($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 10978
 return;
}
function __ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _vsprintf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 16231
 return;
}
function _snprintf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 11174
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _sprintf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 28116
 return;
}
function _putchar__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 12578
 return;
}
function __ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($0) {
 $0 = $0 | 0;
 return (HEAP8[$0 >> 0] | 0) != 0 | 0; //@line 19209
}
function __ZN7LoRaPHYD2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 944; //@line 22062
 HEAP32[$0 + 4 >> 2] = 0; //@line 22064
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[index & 15](a1 | 0) | 0; //@line 35315
}
function _putc__async_cb_7($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 18191
 return;
}
function __ZN4mbed8CallbackIFvPhtsaEE13function_dtorINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function _printf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 1652
 return;
}
function __ZN7LoRaPHY12get_next_ADREbRaS0_Rj__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[___async_retval >> 0] = 0; //@line 5342
 return;
}
function __ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($0) {
 $0 = $0 | 0;
 return (HEAP8[$0 + 1 >> 0] | 0) != 0 | 0; //@line 19226
}
function __ZN12LoRaWANStack23mlme_indication_handlerEP25loramac_mlme_indication_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return;
}
function b31(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(15); //@line 35498
 return 0; //@line 35498
}
function __ZN7LoRaPHY21verify_nb_join_trialsEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ($1 & 255) > 11 | 0; //@line 25092
}
function __ZN7LoRaMac11schedule_txEv__async_cb_206($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 3000
 return;
}
function __ZN7LoRaMac11schedule_txEv__async_cb_205($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 2988
 return;
}
function __ZN16LoRaWANInterface25remove_link_check_requestEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 4 >> 0] = 0; //@line 5389
 return;
}
function b30(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(0); //@line 35495
 return 0; //@line 35495
}
function __ZNK14LoRaMacCommand26get_repeat_commands_lengthEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 3 >> 0] | 0; //@line 19194
}
function __ZN4mbed11InterruptInD0Ev__async_cb_271($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 9815
 return;
}
function __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 >> 0] = 0; //@line 19200
 return;
}
function __ZSt11__terminatePFvvE__async_cb($0) {
 $0 = $0 | 0;
 _abort_message(19413, HEAP32[$0 + 4 >> 2] | 0); //@line 20566
}
function __ZN12LoRaPHYEU868D0Ev($0) {
 $0 = $0 | 0;
 __ZN7LoRaPHYD2Ev($0); //@line 25252
 __ZdlPv($0); //@line 25253
 return;
}
function __ZN4mbed6Ticker6detachEv($0) {
 $0 = $0 | 0;
 _emscripten_asm_const_ii(15, $0 + 40 | 0) | 0; //@line 7000
 return;
}
function __ZN16SX1276_LoRaRadioD0Ev__async_cb($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 19004
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_67($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_63($0) {
 $0 = $0 | 0;
 return;
}
function dynCall_vi(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 FUNCTION_TABLE_vi[index & 1023](a1 | 0); //@line 35364
}
function __ZN7LoRaPHY29get_maximum_frame_counter_gapEv($0) {
 $0 = $0 | 0;
 return HEAP16[$0 + 48 >> 1] | 0; //@line 24955
}
function __ZN5Sht3115readTemperatureEv($0) {
 $0 = $0 | 0;
 return +(+(_emscripten_asm_const_ii(18, $0 | 0) | 0) / 100.0);
}
function __ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed7TimeoutD0Ev__async_cb_382($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 27851
 return;
}
function __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 1 >> 0] = 0; //@line 19216
 return;
}
function __ZN14LoRaMacCommand20clear_command_bufferEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 2 >> 0] = 0; //@line 19065
 return;
}
function __ZN4mbed6TickerD0Ev__async_cb_215($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 3465
 return;
}
function __ZN14LoRaMacCommand19clear_repeat_bufferEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 3 >> 0] = 0; //@line 19167
 return;
}
function b364(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(7); //@line 403
}
function b363(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(6); //@line 400
}
function b362(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(5); //@line 397
}
function b361(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(0); //@line 394
}
function __ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 2 >> 0] | 0; //@line 19074
}
function __ZN7LoRaPHY25get_default_rx2_frequencyEv($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 68 >> 2] | 0; //@line 24890
}
function _equeue_event_delay($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + -16 >> 2] = $1; //@line 4359
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_88($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_87($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_86($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_27($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_26($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_25($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_24($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY24get_default_rx2_datarateEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 64 >> 0] | 0; //@line 24898
}
function __ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_244($0) {
 $0 = $0 | 0;
 return;
}
function _equeue_event_dtor($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + -8 >> 2] = $1; //@line 4368
 return;
}
function __ZN7LoRaPHY23get_default_tx_datarateEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 30 >> 0] | 0; //@line 24882
}
function __ZN16SX1276_LoRaRadio18check_rf_frequencyEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return 1; //@line 1171
}
function __ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _aes_ctx_free($0) {
 $0 = $0 | 0;
 _mbedtls_aes_free($0); //@line 3146
 _free($0); //@line 3147
 return;
}
function __ZN4mbed8CallbackIFv11lora_eventsEE13function_callIPS2_EEvPKvS1___async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY20get_default_tx_powerEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 23 >> 0] | 0; //@line 24874
}
function __ZN6events10EventQueue14break_dispatchEv($0) {
 $0 = $0 | 0;
 _equeue_break($0); //@line 3141
 return;
}
function __ZN7LoRaPHY19get_max_nb_channelsEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 20 >> 0] | 0; //@line 24992
}
function __ZN16SX1276_LoRaRadio10get_statusEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 688 >> 0] | 0; //@line 789
}
function __ZN7LoRaPHY16get_phy_channelsEv($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 112 >> 2] | 0; //@line 25000
}
function __ZN14LoRaMacCommand23get_mac_commands_bufferEv($0) {
 $0 = $0 | 0;
 return $0 + 4 | 0; //@line 19081
}
function b28(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(31); //@line 35492
 return 0; //@line 35492
}
function b27(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(30); //@line 35489
 return 0; //@line 35489
}
function b26(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(29); //@line 35486
 return 0; //@line 35486
}
function b25(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(28); //@line 35483
 return 0; //@line 35483
}
function b24(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(27); //@line 35480
 return 0; //@line 35480
}
function b23(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(26); //@line 35477
 return 0; //@line 35477
}
function b22(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(25); //@line 35474
 return 0; //@line 35474
}
function b21(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(24); //@line 35471
 return 0; //@line 35471
}
function b20(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(23); //@line 35468
 return 0; //@line 35468
}
function b19(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(22); //@line 35465
 return 0; //@line 35465
}
function b18(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(21); //@line 35462
 return 0; //@line 35462
}
function b17(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(20); //@line 35459
 return 0; //@line 35459
}
function b16(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(19); //@line 35456
 return 0; //@line 35456
}
function b15(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(18); //@line 35453
 return 0; //@line 35453
}
function b14(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(17); //@line 35450
 return 0; //@line 35450
}
function ___lctrans($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ___lctrans_impl($0, $1) | 0; //@line 14924
}
function b13(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(0); //@line 35447
 return 0; //@line 35447
}
function _main__async_cb_440($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1; //@line 34637
 return;
}
function _main__async_cb_438($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1; //@line 34549
 return;
}
function _main__async_cb_437($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1; //@line 34541
 return;
}
function _gcm_ctx_free__async_cb($0) {
 $0 = $0 | 0;
 _free(HEAP32[$0 + 4 >> 2] | 0); //@line 9946
 return;
}
function _equeue_mutex_unlock($0) {
 $0 = $0 | 0;
 _pthread_mutex_unlock($0 | 0) | 0; //@line 4403
 return;
}
function _ccm_ctx_free__async_cb($0) {
 $0 = $0 | 0;
 _free(HEAP32[$0 + 4 >> 2] | 0); //@line 8085
 return;
}
function _main__async_cb_441($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 34647
 return;
}
function _equeue_mutex_create($0) {
 $0 = $0 | 0;
 return _pthread_mutex_init($0 | 0, 0) | 0; //@line 4390
}
function __ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb_323($0) {
 $0 = $0 | 0;
 return;
}
function __ZN14LoRaMacCommandC2Ev($0) {
 $0 = $0 | 0;
 _memset($0 | 0, 0, 260) | 0; //@line 18826
 return;
}
function dynCall_i(index) {
 index = index | 0;
 return FUNCTION_TABLE_i[index & 7]() | 0; //@line 35308
}
function _equeue_mutex_lock($0) {
 $0 = $0 | 0;
 _pthread_mutex_lock($0 | 0) | 0; //@line 4396
 return;
}
function __ZN7LoRaMac34handle_mac_state_check_timer_eventEv__async_cb_232($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN18LoRaWANTimeHandlerC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 0; //@line 25390
 return;
}
function __ZN18LoRaMacChannelPlanC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 0; //@line 18423
 return;
}
function __ZN11LoRaMacMcps16get_confirmationEv($0) {
 $0 = $0 | 0;
 return $0 + 36 | 0; //@line 21159
}
function b359(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(7); //@line 391
}
function b358(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(6); //@line 388
}
function b357(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(5); //@line 385
}
function b356(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(0); //@line 382
}
function __ZN6events10EventQueue4tickEv($0) {
 $0 = $0 | 0;
 return _equeue_tick() | 0; //@line 3149
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_225($0) {
 $0 = $0 | 0;
 return;
}
function __ZN11LoRaMacMlme16get_confirmationEv($0) {
 $0 = $0 | 0;
 return $0 + 8 | 0; //@line 22000
}
function __ZN4mbed8CallbackIFv11lora_eventsEE13function_dtorIPS2_EEvPv($0) {
 $0 = $0 | 0;
 return;
}
function _mbedtls_gcm_init($0) {
 $0 = $0 | 0;
 _memset($0 | 0, 0, 400) | 0; //@line 4182
 return;
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_184($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN11LoRaMacMlme14get_indicationEv($0) {
 $0 = $0 | 0;
 return $0 + 4 | 0; //@line 22007
}
function __ZN12LoRaPHYEU868D2Ev($0) {
 $0 = $0 | 0;
 __ZN7LoRaPHYD2Ev($0); //@line 25245
 return;
}
function _mbedtls_aes_init($0) {
 $0 = $0 | 0;
 _memset($0 | 0, 0, 280) | 0; //@line 27
 return;
}
function __ZN7LoRaMac29handle_delayed_tx_timer_eventEv__async_cb_89($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_211($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_210($0) {
 $0 = $0 | 0;
 return;
}
function __ZN11LoRaMacMlme22set_tx_continuous_waveEhaafft__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN11LoRaMacMlmeC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 0; //@line 21976
 return;
}
function dynCall_v(index) {
 index = index | 0;
 FUNCTION_TABLE_v[index & 15](); //@line 35357
}
function __ZN11LoRaMacMcps14get_indicationEv($0) {
 $0 = $0 | 0;
 return $0 | 0; //@line 21165
}
function __ZN10LoRaMacMibC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 0; //@line 21177
 return;
}
function __ZN7LoRaPHY25setup_public_network_modeEb__async_cb_231($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_177($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_274($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16LoRaWANInterfaceD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 5562
 return;
}
function _isdigit($0) {
 $0 = $0 | 0;
 return ($0 + -48 | 0) >>> 0 < 10 | 0; //@line 11077
}
function __ZN7LoRaMac22handle_rx2_timer_eventEv__async_cb_270($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac22handle_rx1_timer_eventEv__async_cb_298($0) {
 $0 = $0 | 0;
 return;
}
function b11(p0) {
 p0 = p0 | 0;
 nullFunc_ii(15); //@line 35444
 return 0; //@line 35444
}
function b10(p0) {
 p0 = p0 | 0;
 nullFunc_ii(14); //@line 35441
 return 0; //@line 35441
}
function __ZN16SX1276_LoRaRadio15timeout_irq_isrEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZL18lora_event_handler11lora_events__async_cb_329($0) {
 $0 = $0 | 0;
 return;
}
function __ZL18lora_event_handler11lora_events__async_cb_328($0) {
 $0 = $0 | 0;
 return;
}
function __ZL18lora_event_handler11lora_events__async_cb_327($0) {
 $0 = $0 | 0;
 return;
}
function __ZL18lora_event_handler11lora_events__async_cb_325($0) {
 $0 = $0 | 0;
 return;
}
function b9(p0) {
 p0 = p0 | 0;
 nullFunc_ii(13); //@line 35438
 return 0; //@line 35438
}
function b8(p0) {
 p0 = p0 | 0;
 nullFunc_ii(12); //@line 35435
 return 0; //@line 35435
}
function b7(p0) {
 p0 = p0 | 0;
 nullFunc_ii(11); //@line 35432
 return 0; //@line 35432
}
function b6(p0) {
 p0 = p0 | 0;
 nullFunc_ii(10); //@line 35429
 return 0; //@line 35429
}
function __ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_180($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_409($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_408($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_407($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_406($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_405($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_404($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_403($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_401($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb_339($0) {
 $0 = $0 | 0;
 return;
}
function b5(p0) {
 p0 = p0 | 0;
 nullFunc_ii(0); //@line 35426
 return 0; //@line 35426
}
function __ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_213($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac18handle_ack_timeoutEv__async_cb_139($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac14handle_rx_doneEPhtsa__async_cb_388($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio8transmitEj__async_cb_249($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio11tx_done_irqEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio11rx_done_irqEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZL18lora_event_handler11lora_events__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___ofl_lock() {
 ___lock(24448); //@line 11715
 return 24456; //@line 11716
}
function __ZN7LoRaPHY15setup_rx_windowEbj__async_cb_228($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac17handle_rx_timeoutEv__async_cb_15($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_278($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac17handle_tx_timeoutEv__async_cb_6($0) {
 $0 = $0 | 0;
 return;
}
function b354(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(31); //@line 379
}
function b353(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(30); //@line 376
}
function b352(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(29); //@line 373
}
function b351(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(28); //@line 370
}
function b350(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(27); //@line 367
}
function b349(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(26); //@line 364
}
function _abort_message__async_cb_286($0) {
 $0 = $0 | 0;
 _abort(); //@line 10949
}
function __ZN7LoRaPHYD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 22071
 return;
}
function __ZN7LoRaMac15handle_rx_errorEv__async_cb_52($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac14handle_tx_doneEv__async_cb_175($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue8dispatchEi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed10TimerEventD0Ev($0) {
 $0 = $0 | 0;
 _llvm_trap(); //@line 3057
}
function __ZN11LoRaMacMcps23activate_mcps_subsystemEv($0) {
 $0 = $0 | 0;
 return;
}
function b348(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(0); //@line 361
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue6cancelEi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function setTempRet0(value) {
 value = value | 0;
 tempRet0 = value; //@line 39
}
function _frexpl($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 return +(+_frexp($0, $1));
}
function ___cxa_pure_virtual__wrapper() {
 ___cxa_pure_virtual(); //@line 35528
}
function __ZN7LoRaPHY11handle_sendEPhh__async_cb_5($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio4sendEPhh__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed11InterruptInD2Ev__async_cb_267($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_46($0) {
 $0 = $0 | 0;
 return;
}
function __ZN14lorawan_timersD2Ev__async_cb_285($0) {
 $0 = $0 | 0;
 return;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function ___pthread_self_910() {
 return _pthread_self() | 0; //@line 14845
}
function __ZN4mbed7Timeout7handlerEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed10TimerEvent3irqEj__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___pthread_self_85() {
 return _pthread_self() | 0; //@line 14851
}
function __ZN4mbed6Ticker7handlerEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12radio_eventsD2Ev__async_cb_146($0) {
 $0 = $0 | 0;
 return;
}
function _mbed_trace_default_print__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed7TimeoutD2Ev__async_cb_355($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed10TimerEventD2Ev__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed10TimerEventC2Ev__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStackC2Ev__async_cb_30($0) {
 $0 = $0 | 0;
 return;
}
function stackRestore(top) {
 top = top | 0;
 STACKTOP = top; //@line 16
}
function _pthread_mutex_unlock(x) {
 x = x | 0;
 return 0; //@line 35274
}
function __ZN4mbed6TickerD2Ev__async_cb_207($0) {
 $0 = $0 | 0;
 return;
}
function __ZdlPv($0) {
 $0 = $0 | 0;
 _free($0); //@line 15972
 return;
}
function b3() {
 nullFunc_i(7); //@line 35423
 return 0; //@line 35423
}
function b2() {
 nullFunc_i(6); //@line 35420
 return 0; //@line 35420
}
function b1() {
 nullFunc_i(0); //@line 35417
 return 0; //@line 35417
}
function _schedule_interrupt__async_cb_59($0) {
 $0 = $0 | 0;
 return;
}
function _schedule_interrupt__async_cb_58($0) {
 $0 = $0 | 0;
 return;
}
function _schedule_interrupt__async_cb_55($0) {
 $0 = $0 | 0;
 return;
}
function _schedule_interrupt__async_cb_54($0) {
 $0 = $0 | 0;
 return;
}
function _pthread_mutex_lock(x) {
 x = x | 0;
 return 0; //@line 35270
}
function _mbed_assert_internal__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio6unlockEv($0) {
 $0 = $0 | 0;
 return;
}
function _ticker_remove_event__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _handle_interrupt_in__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___ofl_unlock() {
 ___unlock(24448); //@line 11721
 return;
}
function __ZN16SX1276_LoRaRadio4lockEv($0) {
 $0 = $0 | 0;
 return;
}
function __ZL12send_messagev__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function b226(p0) {
 p0 = p0 | 0;
 nullFunc_vi(903); //@line 36071
}
function b225(p0) {
 p0 = p0 | 0;
 nullFunc_vi(902); //@line 36068
}
function b224(p0) {
 p0 = p0 | 0;
 nullFunc_vi(901); //@line 36065
}
function b223(p0) {
 p0 = p0 | 0;
 nullFunc_vi(900); //@line 36062
}
function b222(p0) {
 p0 = p0 | 0;
 nullFunc_vi(899); //@line 36059
}
function b221(p0) {
 p0 = p0 | 0;
 nullFunc_vi(898); //@line 36056
}
function b220(p0) {
 p0 = p0 | 0;
 nullFunc_vi(897); //@line 36053
}
function b219(p0) {
 p0 = p0 | 0;
 nullFunc_vi(896); //@line 36050
}
function b218(p0) {
 p0 = p0 | 0;
 nullFunc_vi(895); //@line 36047
}
function b217(p0) {
 p0 = p0 | 0;
 nullFunc_vi(894); //@line 36044
}
function b216(p0) {
 p0 = p0 | 0;
 nullFunc_vi(893); //@line 36041
}
function b215(p0) {
 p0 = p0 | 0;
 nullFunc_vi(892); //@line 36038
}
function b214(p0) {
 p0 = p0 | 0;
 nullFunc_vi(891); //@line 36035
}
function b213(p0) {
 p0 = p0 | 0;
 nullFunc_vi(890); //@line 36032
}
function b212(p0) {
 p0 = p0 | 0;
 nullFunc_vi(889); //@line 36029
}
function b211(p0) {
 p0 = p0 | 0;
 nullFunc_vi(888); //@line 36026
}
function b210(p0) {
 p0 = p0 | 0;
 nullFunc_vi(887); //@line 36023
}
function b209(p0) {
 p0 = p0 | 0;
 nullFunc_vi(886); //@line 36020
}
function b208(p0) {
 p0 = p0 | 0;
 nullFunc_vi(885); //@line 36017
}
function b207(p0) {
 p0 = p0 | 0;
 nullFunc_vi(884); //@line 36014
}
function b206(p0) {
 p0 = p0 | 0;
 nullFunc_vi(883); //@line 36011
}
function b205(p0) {
 p0 = p0 | 0;
 nullFunc_vi(882); //@line 36008
}
function b204(p0) {
 p0 = p0 | 0;
 nullFunc_vi(881); //@line 36005
}
function b203(p0) {
 p0 = p0 | 0;
 nullFunc_vi(880); //@line 36002
}
function b202(p0) {
 p0 = p0 | 0;
 nullFunc_vi(879); //@line 35999
}
function b201(p0) {
 p0 = p0 | 0;
 nullFunc_vi(878); //@line 35996
}
function b200(p0) {
 p0 = p0 | 0;
 nullFunc_vi(877); //@line 35993
}
function b199(p0) {
 p0 = p0 | 0;
 nullFunc_vi(876); //@line 35990
}
function b198(p0) {
 p0 = p0 | 0;
 nullFunc_vi(875); //@line 35987
}
function b197(p0) {
 p0 = p0 | 0;
 nullFunc_vi(874); //@line 35984
}
function b196(p0) {
 p0 = p0 | 0;
 nullFunc_vi(873); //@line 35981
}
function b195(p0) {
 p0 = p0 | 0;
 nullFunc_vi(872); //@line 35978
}
function b194(p0) {
 p0 = p0 | 0;
 nullFunc_vi(871); //@line 35975
}
function b193(p0) {
 p0 = p0 | 0;
 nullFunc_vi(870); //@line 35972
}
function b192(p0) {
 p0 = p0 | 0;
 nullFunc_vi(869); //@line 35969
}
function b191(p0) {
 p0 = p0 | 0;
 nullFunc_vi(868); //@line 35966
}
function b190(p0) {
 p0 = p0 | 0;
 nullFunc_vi(867); //@line 35963
}
function b189(p0) {
 p0 = p0 | 0;
 nullFunc_vi(866); //@line 35960
}
function b188(p0) {
 p0 = p0 | 0;
 nullFunc_vi(865); //@line 35957
}
function b187(p0) {
 p0 = p0 | 0;
 nullFunc_vi(864); //@line 35954
}
function b186(p0) {
 p0 = p0 | 0;
 nullFunc_vi(863); //@line 35951
}
function b185(p0) {
 p0 = p0 | 0;
 nullFunc_vi(862); //@line 35948
}
function b184(p0) {
 p0 = p0 | 0;
 nullFunc_vi(861); //@line 35945
}
function b183(p0) {
 p0 = p0 | 0;
 nullFunc_vi(860); //@line 35942
}
function b182(p0) {
 p0 = p0 | 0;
 nullFunc_vi(859); //@line 35939
}
function b181(p0) {
 p0 = p0 | 0;
 nullFunc_vi(858); //@line 35936
}
function b180(p0) {
 p0 = p0 | 0;
 nullFunc_vi(857); //@line 35933
}
function b179(p0) {
 p0 = p0 | 0;
 nullFunc_vi(856); //@line 35930
}
function b178(p0) {
 p0 = p0 | 0;
 nullFunc_vi(855); //@line 35927
}
function b177(p0) {
 p0 = p0 | 0;
 nullFunc_vi(854); //@line 35924
}
function b176(p0) {
 p0 = p0 | 0;
 nullFunc_vi(853); //@line 35921
}
function b175(p0) {
 p0 = p0 | 0;
 nullFunc_vi(852); //@line 35918
}
function b174(p0) {
 p0 = p0 | 0;
 nullFunc_vi(851); //@line 35915
}
function b173(p0) {
 p0 = p0 | 0;
 nullFunc_vi(850); //@line 35912
}
function b172(p0) {
 p0 = p0 | 0;
 nullFunc_vi(849); //@line 35909
}
function b171(p0) {
 p0 = p0 | 0;
 nullFunc_vi(848); //@line 35906
}
function b170(p0) {
 p0 = p0 | 0;
 nullFunc_vi(847); //@line 35903
}
function b169(p0) {
 p0 = p0 | 0;
 nullFunc_vi(846); //@line 35900
}
function b168(p0) {
 p0 = p0 | 0;
 nullFunc_vi(845); //@line 35897
}
function b167(p0) {
 p0 = p0 | 0;
 nullFunc_vi(844); //@line 35894
}
function b166(p0) {
 p0 = p0 | 0;
 nullFunc_vi(843); //@line 35891
}
function b165(p0) {
 p0 = p0 | 0;
 nullFunc_vi(842); //@line 35888
}
function b164(p0) {
 p0 = p0 | 0;
 nullFunc_vi(841); //@line 35885
}
function b163(p0) {
 p0 = p0 | 0;
 nullFunc_vi(840); //@line 35882
}
function b162(p0) {
 p0 = p0 | 0;
 nullFunc_vi(839); //@line 35879
}
function b161(p0) {
 p0 = p0 | 0;
 nullFunc_vi(838); //@line 35876
}
function b160(p0) {
 p0 = p0 | 0;
 nullFunc_vi(837); //@line 35873
}
function b159(p0) {
 p0 = p0 | 0;
 nullFunc_vi(836); //@line 35870
}
function b158(p0) {
 p0 = p0 | 0;
 nullFunc_vi(835); //@line 35867
}
function b157(p0) {
 p0 = p0 | 0;
 nullFunc_vi(834); //@line 35864
}
function b156(p0) {
 p0 = p0 | 0;
 nullFunc_vi(833); //@line 35861
}
function b155(p0) {
 p0 = p0 | 0;
 nullFunc_vi(832); //@line 35858
}
function b154(p0) {
 p0 = p0 | 0;
 nullFunc_vi(831); //@line 35855
}
function b153(p0) {
 p0 = p0 | 0;
 nullFunc_vi(830); //@line 35852
}
function b152(p0) {
 p0 = p0 | 0;
 nullFunc_vi(829); //@line 35849
}
function b151(p0) {
 p0 = p0 | 0;
 nullFunc_vi(828); //@line 35846
}
function b150(p0) {
 p0 = p0 | 0;
 nullFunc_vi(827); //@line 35843
}
function b149(p0) {
 p0 = p0 | 0;
 nullFunc_vi(826); //@line 35840
}
function b148(p0) {
 p0 = p0 | 0;
 nullFunc_vi(825); //@line 35837
}
function b147(p0) {
 p0 = p0 | 0;
 nullFunc_vi(824); //@line 35834
}
function b146(p0) {
 p0 = p0 | 0;
 nullFunc_vi(823); //@line 35831
}
function b145(p0) {
 p0 = p0 | 0;
 nullFunc_vi(822); //@line 35828
}
function b144(p0) {
 p0 = p0 | 0;
 nullFunc_vi(821); //@line 35825
}
function b143(p0) {
 p0 = p0 | 0;
 nullFunc_vi(820); //@line 35822
}
function b142(p0) {
 p0 = p0 | 0;
 nullFunc_vi(819); //@line 35819
}
function b141(p0) {
 p0 = p0 | 0;
 nullFunc_vi(818); //@line 35816
}
function b140(p0) {
 p0 = p0 | 0;
 nullFunc_vi(817); //@line 35813
}
function b139(p0) {
 p0 = p0 | 0;
 nullFunc_vi(816); //@line 35810
}
function b138(p0) {
 p0 = p0 | 0;
 nullFunc_vi(815); //@line 35807
}
function b137(p0) {
 p0 = p0 | 0;
 nullFunc_vi(814); //@line 35804
}
function b136(p0) {
 p0 = p0 | 0;
 nullFunc_vi(813); //@line 35801
}
function b135(p0) {
 p0 = p0 | 0;
 nullFunc_vi(812); //@line 35798
}
function b134(p0) {
 p0 = p0 | 0;
 nullFunc_vi(811); //@line 35795
}
function b133(p0) {
 p0 = p0 | 0;
 nullFunc_vi(810); //@line 35792
}
function b132(p0) {
 p0 = p0 | 0;
 nullFunc_vi(809); //@line 35789
}
function b131(p0) {
 p0 = p0 | 0;
 nullFunc_vi(808); //@line 35786
}
function b130(p0) {
 p0 = p0 | 0;
 nullFunc_vi(807); //@line 35783
}
function b129(p0) {
 p0 = p0 | 0;
 nullFunc_vi(806); //@line 35780
}
function b128(p0) {
 p0 = p0 | 0;
 nullFunc_vi(805); //@line 35777
}
function b127(p0) {
 p0 = p0 | 0;
 nullFunc_vi(804); //@line 35774
}
function b126(p0) {
 p0 = p0 | 0;
 nullFunc_vi(803); //@line 35771
}
function b125(p0) {
 p0 = p0 | 0;
 nullFunc_vi(802); //@line 35768
}
function b124(p0) {
 p0 = p0 | 0;
 nullFunc_vi(801); //@line 35765
}
function b123(p0) {
 p0 = p0 | 0;
 nullFunc_vi(800); //@line 35762
}
function b122(p0) {
 p0 = p0 | 0;
 nullFunc_vi(799); //@line 35759
}
function b121(p0) {
 p0 = p0 | 0;
 nullFunc_vi(798); //@line 35756
}
function b120(p0) {
 p0 = p0 | 0;
 nullFunc_vi(797); //@line 35753
}
function b119(p0) {
 p0 = p0 | 0;
 nullFunc_vi(796); //@line 35750
}
function b118(p0) {
 p0 = p0 | 0;
 nullFunc_vi(795); //@line 35747
}
function b117(p0) {
 p0 = p0 | 0;
 nullFunc_vi(794); //@line 35744
}
function b116(p0) {
 p0 = p0 | 0;
 nullFunc_vi(793); //@line 35741
}
function b115(p0) {
 p0 = p0 | 0;
 nullFunc_vi(792); //@line 35738
}
function b114(p0) {
 p0 = p0 | 0;
 nullFunc_vi(791); //@line 35735
}
function b113(p0) {
 p0 = p0 | 0;
 nullFunc_vi(790); //@line 35732
}
function b112(p0) {
 p0 = p0 | 0;
 nullFunc_vi(789); //@line 35729
}
function b111(p0) {
 p0 = p0 | 0;
 nullFunc_vi(788); //@line 35726
}
function b110(p0) {
 p0 = p0 | 0;
 nullFunc_vi(787); //@line 35723
}
function b109(p0) {
 p0 = p0 | 0;
 nullFunc_vi(786); //@line 35720
}
function b108(p0) {
 p0 = p0 | 0;
 nullFunc_vi(785); //@line 35717
}
function b107(p0) {
 p0 = p0 | 0;
 nullFunc_vi(784); //@line 35714
}
function b106(p0) {
 p0 = p0 | 0;
 nullFunc_vi(783); //@line 35711
}
function b105(p0) {
 p0 = p0 | 0;
 nullFunc_vi(782); //@line 35708
}
function b104(p0) {
 p0 = p0 | 0;
 nullFunc_vi(781); //@line 35705
}
function b103(p0) {
 p0 = p0 | 0;
 nullFunc_vi(780); //@line 35702
}
function b102(p0) {
 p0 = p0 | 0;
 nullFunc_vi(779); //@line 35699
}
function b101(p0) {
 p0 = p0 | 0;
 nullFunc_vi(778); //@line 35696
}
function b100(p0) {
 p0 = p0 | 0;
 nullFunc_vi(777); //@line 35693
}
function _mbed_error_printf__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN18LoRaWANTimeHandlerD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN18LoRaMacChannelPlanD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function b99(p0) {
 p0 = p0 | 0;
 nullFunc_vi(776); //@line 35690
}
function b98(p0) {
 p0 = p0 | 0;
 nullFunc_vi(775); //@line 35687
}
function b97(p0) {
 p0 = p0 | 0;
 nullFunc_vi(774); //@line 35684
}
function b96(p0) {
 p0 = p0 | 0;
 nullFunc_vi(773); //@line 35681
}
function b95(p0) {
 p0 = p0 | 0;
 nullFunc_vi(772); //@line 35678
}
function b94(p0) {
 p0 = p0 | 0;
 nullFunc_vi(771); //@line 35675
}
function b93(p0) {
 p0 = p0 | 0;
 nullFunc_vi(770); //@line 35672
}
function b92(p0) {
 p0 = p0 | 0;
 nullFunc_vi(769); //@line 35669
}
function b91(p0) {
 p0 = p0 | 0;
 nullFunc_vi(768); //@line 35666
}
function b90(p0) {
 p0 = p0 | 0;
 nullFunc_vi(767); //@line 35663
}
function b89(p0) {
 p0 = p0 | 0;
 nullFunc_vi(766); //@line 35660
}
function b88(p0) {
 p0 = p0 | 0;
 nullFunc_vi(765); //@line 35657
}
function b87(p0) {
 p0 = p0 | 0;
 nullFunc_vi(764); //@line 35654
}
function b86(p0) {
 p0 = p0 | 0;
 nullFunc_vi(763); //@line 35651
}
function b85(p0) {
 p0 = p0 | 0;
 nullFunc_vi(762); //@line 35648
}
function b84(p0) {
 p0 = p0 | 0;
 nullFunc_vi(761); //@line 35645
}
function b83(p0) {
 p0 = p0 | 0;
 nullFunc_vi(760); //@line 35642
}
function b82(p0) {
 p0 = p0 | 0;
 nullFunc_vi(759); //@line 35639
}
function b81(p0) {
 p0 = p0 | 0;
 nullFunc_vi(758); //@line 35636
}
function b80(p0) {
 p0 = p0 | 0;
 nullFunc_vi(757); //@line 35633
}
function b79(p0) {
 p0 = p0 | 0;
 nullFunc_vi(756); //@line 35630
}
function b78(p0) {
 p0 = p0 | 0;
 nullFunc_vi(755); //@line 35627
}
function b77(p0) {
 p0 = p0 | 0;
 nullFunc_vi(754); //@line 35624
}
function b76(p0) {
 p0 = p0 | 0;
 nullFunc_vi(753); //@line 35621
}
function b75(p0) {
 p0 = p0 | 0;
 nullFunc_vi(752); //@line 35618
}
function b74(p0) {
 p0 = p0 | 0;
 nullFunc_vi(751); //@line 35615
}
function b73(p0) {
 p0 = p0 | 0;
 nullFunc_vi(750); //@line 35612
}
function b72(p0) {
 p0 = p0 | 0;
 nullFunc_vi(749); //@line 35609
}
function b71(p0) {
 p0 = p0 | 0;
 nullFunc_vi(748); //@line 35606
}
function b70(p0) {
 p0 = p0 | 0;
 nullFunc_vi(747); //@line 35603
}
function b69(p0) {
 p0 = p0 | 0;
 nullFunc_vi(746); //@line 35600
}
function b68(p0) {
 p0 = p0 | 0;
 nullFunc_vi(745); //@line 35597
}
function b67(p0) {
 p0 = p0 | 0;
 nullFunc_vi(744); //@line 35594
}
function b66(p0) {
 p0 = p0 | 0;
 nullFunc_vi(743); //@line 35591
}
function b65(p0) {
 p0 = p0 | 0;
 nullFunc_vi(742); //@line 35588
}
function b64(p0) {
 p0 = p0 | 0;
 nullFunc_vi(741); //@line 35585
}
function b63(p0) {
 p0 = p0 | 0;
 nullFunc_vi(740); //@line 35582
}
function b62(p0) {
 p0 = p0 | 0;
 nullFunc_vi(739); //@line 35579
}
function b61(p0) {
 p0 = p0 | 0;
 nullFunc_vi(738); //@line 35576
}
function b60(p0) {
 p0 = p0 | 0;
 nullFunc_vi(737); //@line 35573
}
function b59(p0) {
 p0 = p0 | 0;
 nullFunc_vi(736); //@line 35570
}
function b58(p0) {
 p0 = p0 | 0;
 nullFunc_vi(735); //@line 35567
}
function b57(p0) {
 p0 = p0 | 0;
 nullFunc_vi(734); //@line 35564
}
function b56(p0) {
 p0 = p0 | 0;
 nullFunc_vi(733); //@line 35561
}
function b55(p0) {
 p0 = p0 | 0;
 nullFunc_vi(732); //@line 35558
}
function b54(p0) {
 p0 = p0 | 0;
 nullFunc_vi(731); //@line 35555
}
function b346(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1023); //@line 358
}
function b345(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1022); //@line 355
}
function b344(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1021); //@line 352
}
function b343(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1020); //@line 349
}
function b342(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1019); //@line 346
}
function b341(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1018); //@line 343
}
function b340(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1017); //@line 340
}
function b339(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1016); //@line 337
}
function b338(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1015); //@line 334
}
function b337(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1014); //@line 331
}
function b336(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1013); //@line 328
}
function b335(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1012); //@line 325
}
function b334(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1011); //@line 322
}
function b333(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1010); //@line 319
}
function b332(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1009); //@line 316
}
function b331(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1008); //@line 313
}
function b330(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1007); //@line 310
}
function b329(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1006); //@line 307
}
function b328(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1005); //@line 304
}
function b327(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1004); //@line 301
}
function b326(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1003); //@line 298
}
function b325(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1002); //@line 295
}
function b324(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1001); //@line 292
}
function _dummy($0) {
 $0 = $0 | 0;
 return $0 | 0; //@line 11035
}
function ___lockfile($0) {
 $0 = $0 | 0;
 return 0; //@line 11352
}
function b323(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1e3); //@line 289
}
function b322(p0) {
 p0 = p0 | 0;
 nullFunc_vi(999); //@line 286
}
function b321(p0) {
 p0 = p0 | 0;
 nullFunc_vi(998); //@line 283
}
function b320(p0) {
 p0 = p0 | 0;
 nullFunc_vi(997); //@line 280
}
function b319(p0) {
 p0 = p0 | 0;
 nullFunc_vi(996); //@line 277
}
function b318(p0) {
 p0 = p0 | 0;
 nullFunc_vi(995); //@line 274
}
function b317(p0) {
 p0 = p0 | 0;
 nullFunc_vi(994); //@line 271
}
function b316(p0) {
 p0 = p0 | 0;
 nullFunc_vi(993); //@line 268
}
function b315(p0) {
 p0 = p0 | 0;
 nullFunc_vi(992); //@line 265
}
function b314(p0) {
 p0 = p0 | 0;
 nullFunc_vi(991); //@line 262
}
function b313(p0) {
 p0 = p0 | 0;
 nullFunc_vi(990); //@line 259
}
function b312(p0) {
 p0 = p0 | 0;
 nullFunc_vi(989); //@line 256
}
function b311(p0) {
 p0 = p0 | 0;
 nullFunc_vi(988); //@line 253
}
function b310(p0) {
 p0 = p0 | 0;
 nullFunc_vi(987); //@line 250
}
function b309(p0) {
 p0 = p0 | 0;
 nullFunc_vi(986); //@line 247
}
function b308(p0) {
 p0 = p0 | 0;
 nullFunc_vi(985); //@line 244
}
function b307(p0) {
 p0 = p0 | 0;
 nullFunc_vi(984); //@line 241
}
function b306(p0) {
 p0 = p0 | 0;
 nullFunc_vi(983); //@line 238
}
function b305(p0) {
 p0 = p0 | 0;
 nullFunc_vi(982); //@line 235
}
function b304(p0) {
 p0 = p0 | 0;
 nullFunc_vi(981); //@line 232
}
function b303(p0) {
 p0 = p0 | 0;
 nullFunc_vi(980); //@line 229
}
function b302(p0) {
 p0 = p0 | 0;
 nullFunc_vi(979); //@line 226
}
function b301(p0) {
 p0 = p0 | 0;
 nullFunc_vi(978); //@line 223
}
function b300(p0) {
 p0 = p0 | 0;
 nullFunc_vi(977); //@line 220
}
function b299(p0) {
 p0 = p0 | 0;
 nullFunc_vi(976); //@line 217
}
function b298(p0) {
 p0 = p0 | 0;
 nullFunc_vi(975); //@line 214
}
function b297(p0) {
 p0 = p0 | 0;
 nullFunc_vi(974); //@line 211
}
function b296(p0) {
 p0 = p0 | 0;
 nullFunc_vi(973); //@line 208
}
function b295(p0) {
 p0 = p0 | 0;
 nullFunc_vi(972); //@line 205
}
function b294(p0) {
 p0 = p0 | 0;
 nullFunc_vi(971); //@line 202
}
function b293(p0) {
 p0 = p0 | 0;
 nullFunc_vi(970); //@line 199
}
function b292(p0) {
 p0 = p0 | 0;
 nullFunc_vi(969); //@line 196
}
function b291(p0) {
 p0 = p0 | 0;
 nullFunc_vi(968); //@line 193
}
function b290(p0) {
 p0 = p0 | 0;
 nullFunc_vi(967); //@line 190
}
function b289(p0) {
 p0 = p0 | 0;
 nullFunc_vi(966); //@line 187
}
function b288(p0) {
 p0 = p0 | 0;
 nullFunc_vi(965); //@line 184
}
function b287(p0) {
 p0 = p0 | 0;
 nullFunc_vi(964); //@line 181
}
function b286(p0) {
 p0 = p0 | 0;
 nullFunc_vi(963); //@line 178
}
function b285(p0) {
 p0 = p0 | 0;
 nullFunc_vi(962); //@line 175
}
function b284(p0) {
 p0 = p0 | 0;
 nullFunc_vi(961); //@line 172
}
function b283(p0) {
 p0 = p0 | 0;
 nullFunc_vi(960); //@line 169
}
function b282(p0) {
 p0 = p0 | 0;
 nullFunc_vi(959); //@line 166
}
function b281(p0) {
 p0 = p0 | 0;
 nullFunc_vi(958); //@line 163
}
function b280(p0) {
 p0 = p0 | 0;
 nullFunc_vi(957); //@line 160
}
function b279(p0) {
 p0 = p0 | 0;
 nullFunc_vi(956); //@line 157
}
function b278(p0) {
 p0 = p0 | 0;
 nullFunc_vi(955); //@line 154
}
function b277(p0) {
 p0 = p0 | 0;
 nullFunc_vi(954); //@line 151
}
function b276(p0) {
 p0 = p0 | 0;
 nullFunc_vi(953); //@line 148
}
function b275(p0) {
 p0 = p0 | 0;
 nullFunc_vi(952); //@line 145
}
function b274(p0) {
 p0 = p0 | 0;
 nullFunc_vi(951); //@line 142
}
function b273(p0) {
 p0 = p0 | 0;
 nullFunc_vi(950); //@line 139
}
function b272(p0) {
 p0 = p0 | 0;
 nullFunc_vi(949); //@line 136
}
function b271(p0) {
 p0 = p0 | 0;
 nullFunc_vi(948); //@line 133
}
function b270(p0) {
 p0 = p0 | 0;
 nullFunc_vi(947); //@line 130
}
function b269(p0) {
 p0 = p0 | 0;
 nullFunc_vi(946); //@line 127
}
function b268(p0) {
 p0 = p0 | 0;
 nullFunc_vi(945); //@line 124
}
function b267(p0) {
 p0 = p0 | 0;
 nullFunc_vi(944); //@line 121
}
function b266(p0) {
 p0 = p0 | 0;
 nullFunc_vi(943); //@line 118
}
function b265(p0) {
 p0 = p0 | 0;
 nullFunc_vi(942); //@line 115
}
function b264(p0) {
 p0 = p0 | 0;
 nullFunc_vi(941); //@line 112
}
function b263(p0) {
 p0 = p0 | 0;
 nullFunc_vi(940); //@line 109
}
function b262(p0) {
 p0 = p0 | 0;
 nullFunc_vi(939); //@line 106
}
function b261(p0) {
 p0 = p0 | 0;
 nullFunc_vi(938); //@line 103
}
function b260(p0) {
 p0 = p0 | 0;
 nullFunc_vi(937); //@line 100
}
function __ZN7LoRaMacD2Ev__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16LoRaWANInterfaceD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function b53(p0) {
 p0 = p0 | 0;
 nullFunc_vi(0); //@line 35552
}
function b259(p0) {
 p0 = p0 | 0;
 nullFunc_vi(936); //@line 97
}
function b258(p0) {
 p0 = p0 | 0;
 nullFunc_vi(935); //@line 94
}
function b257(p0) {
 p0 = p0 | 0;
 nullFunc_vi(934); //@line 91
}
function b256(p0) {
 p0 = p0 | 0;
 nullFunc_vi(933); //@line 88
}
function b255(p0) {
 p0 = p0 | 0;
 nullFunc_vi(932); //@line 85
}
function b254(p0) {
 p0 = p0 | 0;
 nullFunc_vi(931); //@line 82
}
function b253(p0) {
 p0 = p0 | 0;
 nullFunc_vi(930); //@line 79
}
function b252(p0) {
 p0 = p0 | 0;
 nullFunc_vi(929); //@line 76
}
function b251(p0) {
 p0 = p0 | 0;
 nullFunc_vi(928); //@line 73
}
function b250(p0) {
 p0 = p0 | 0;
 nullFunc_vi(927); //@line 70
}
function b249(p0) {
 p0 = p0 | 0;
 nullFunc_vi(926); //@line 67
}
function b248(p0) {
 p0 = p0 | 0;
 nullFunc_vi(925); //@line 64
}
function b247(p0) {
 p0 = p0 | 0;
 nullFunc_vi(924); //@line 61
}
function b246(p0) {
 p0 = p0 | 0;
 nullFunc_vi(923); //@line 58
}
function b245(p0) {
 p0 = p0 | 0;
 nullFunc_vi(922); //@line 55
}
function b244(p0) {
 p0 = p0 | 0;
 nullFunc_vi(921); //@line 52
}
function b243(p0) {
 p0 = p0 | 0;
 nullFunc_vi(920); //@line 49
}
function b242(p0) {
 p0 = p0 | 0;
 nullFunc_vi(919); //@line 46
}
function b241(p0) {
 p0 = p0 | 0;
 nullFunc_vi(918); //@line 43
}
function b240(p0) {
 p0 = p0 | 0;
 nullFunc_vi(917); //@line 40
}
function b239(p0) {
 p0 = p0 | 0;
 nullFunc_vi(916); //@line 37
}
function b238(p0) {
 p0 = p0 | 0;
 nullFunc_vi(915); //@line 34
}
function b237(p0) {
 p0 = p0 | 0;
 nullFunc_vi(914); //@line 31
}
function b236(p0) {
 p0 = p0 | 0;
 nullFunc_vi(913); //@line 28
}
function b235(p0) {
 p0 = p0 | 0;
 nullFunc_vi(912); //@line 25
}
function b234(p0) {
 p0 = p0 | 0;
 nullFunc_vi(911); //@line 22
}
function b233(p0) {
 p0 = p0 | 0;
 nullFunc_vi(910); //@line 19
}
function b232(p0) {
 p0 = p0 | 0;
 nullFunc_vi(909); //@line 16
}
function b231(p0) {
 p0 = p0 | 0;
 nullFunc_vi(908); //@line 13
}
function b230(p0) {
 p0 = p0 | 0;
 nullFunc_vi(907); //@line 10
}
function _sleep_manager_unlock_deep_sleep_internal() {
 return;
}
function b229(p0) {
 p0 = p0 | 0;
 nullFunc_vi(906); //@line 7
}
function b228(p0) {
 p0 = p0 | 0;
 nullFunc_vi(905); //@line 4
}
function b227(p0) {
 p0 = p0 | 0;
 nullFunc_vi(904); //@line 1
}
function _us_ticker_set_interrupt($0) {
 $0 = $0 | 0;
 return;
}
function _invoke_ticker__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _initialize__async_cb_76($0) {
 $0 = $0 | 0;
 return;
}
function ___clang_call_terminate__async_cb($0) {
 $0 = $0 | 0;
}
function __ZN14LoRaMacCommandD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function _sleep_manager_lock_deep_sleep_internal() {
 return;
}
function _us_ticker_get_info() {
 return 10196; //@line 7048
}
function _serial_putc__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _mbed_tracef__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _get_us_ticker_data() {
 return 10128; //@line 6168
}
function ___errno_location() {
 return 24444; //@line 11029
}
function __ZN11LoRaMacMlmeD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN11LoRaMacMcpsD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN11LoRaMacMcpsC2Ev($0) {
 $0 = $0 | 0;
 return;
}
function ___cxa_guard_release($0) {
 $0 = $0 | 0;
 return;
}
function __ZSt9terminatev__async_cb_35($0) {
 $0 = $0 | 0;
}
function __ZNSt9type_infoD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN10LoRaMacMibD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function getTempRet0() {
 return tempRet0 | 0; //@line 42
}
function _wait_ms__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___cxa_guard_abort($0) {
 $0 = $0 | 0;
 return;
}
function stackSave() {
 return STACKTOP | 0; //@line 12
}
function _pthread_self() {
 return 10476; //@line 11082
}
function _core_util_critical_section_enter() {
 return;
}
function __ZSt9terminatev__async_cb($0) {
 $0 = $0 | 0;
}
function _core_util_critical_section_exit() {
 return;
}
function _us_ticker_read() {
 return 0; //@line 6807
}
function ___unlockfile($0) {
 $0 = $0 | 0;
 return;
}
function _us_ticker_disable_interrupt() {
 return;
}
function _us_ticker_clear_interrupt() {
 return;
}
function setAsync() {
 ___async = 1; //@line 26
}
function b51() {
 nullFunc_v(15); //@line 35549
}
function b50() {
 nullFunc_v(14); //@line 35546
}
function b49() {
 nullFunc_v(13); //@line 35543
}
function b48() {
 nullFunc_v(12); //@line 35540
}
function b47() {
 nullFunc_v(11); //@line 35537
}
function b46() {
 nullFunc_v(10); //@line 35534
}
function _us_ticker_fire_interrupt() {
 return;
}
function b45() {
 nullFunc_v(9); //@line 35531
}
function b44() {
 nullFunc_v(0); //@line 35525
}
function _us_ticker_init() {
 return;
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_i = [b1,_ccm_ctx_alloc,_gcm_ctx_alloc,_aes_ctx_alloc,_us_ticker_read,_us_ticker_get_info,b2,b3];
var FUNCTION_TABLE_ii = [b5,__ZN16SX1276_LoRaRadio6randomEv,__ZN16SX1276_LoRaRadio10get_statusEv,__ZN16LoRaWANInterface7connectEv,__ZN16LoRaWANInterface10disconnectEv,__ZN16LoRaWANInterface22add_link_check_requestEv,__ZN16LoRaWANInterface24enable_adaptive_datarateEv,__ZN16LoRaWANInterface25disable_adaptive_datarateEv,__ZN16LoRaWANInterface19remove_channel_planEv,___stdio_close,b6,b7,b8,b9,b10,b11];
var FUNCTION_TABLE_iii = [b13,__ZN16SX1276_LoRaRadio18check_rf_frequencyEj,__ZN16LoRaWANInterface10initializeEPN6events10EventQueueE,__ZN16LoRaWANInterface7connectERK15lorawan_connect,__ZN16LoRaWANInterface12set_datarateEh,__ZN16LoRaWANInterface25set_confirmed_msg_retriesEh,__ZN16LoRaWANInterface16set_channel_planERK16lora_channelplan,__ZN16LoRaWANInterface16get_channel_planER16lora_channelplan,__ZN16LoRaWANInterface14remove_channelEh,__ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t,__ZN7LoRaPHY19request_new_channelEP24new_channel_req_params_s,__ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s,__ZN7LoRaPHY25accept_tx_param_setup_reqEP20tx_param_setup_req_s,__ZN7LoRaPHY18dl_channel_requestEP23dl_channel_req_params_s,__ZN7LoRaPHY16get_alternate_DREh,__ZN7LoRaPHY14remove_channelEh,__ZN7LoRaPHY16verify_frequencyEj,b14,b15,b16,b17,b18,b19,b20,b21,b22,b23,b24,b25
,b26,b27,b28];
var FUNCTION_TABLE_iiii = [b30,__ZN16SX1276_LoRaRadio11time_on_airE10modem_typeh,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa,__ZN7LoRaPHY11add_channelEP16channel_params_th,__ZN7LoRaPHY15apply_DR_offsetEaa,_ccm_aes_setkey_wrap,_gcm_aes_setkey_wrap,_aes_setkey_enc_wrap,_aes_setkey_dec_wrap,___stdio_write,___stdio_seek,___stdout_write,_sn_write,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,_get_pkcs_padding,b31];
var FUNCTION_TABLE_iiiii = [b33,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj,_aes_crypt_ecb_wrap,b34];
var FUNCTION_TABLE_iiiiii = [b36,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj,__ZN16LoRaWANInterface4sendEhPKhti,__ZN16LoRaWANInterface7receiveEhPhti,__ZN7LoRaPHY16set_next_channelEP26channel_selection_params_sPhPjS3_,b37,b38,b39];
var FUNCTION_TABLE_iiiiiii = [b41,__ZN7LoRaPHY16link_ADR_requestEP16adr_req_params_tPaS2_PhS3_,_aes_crypt_cbc_wrap,b42];
var FUNCTION_TABLE_v = [b44,___cxa_pure_virtual__wrapper,_us_ticker_init,_us_ticker_disable_interrupt,_us_ticker_clear_interrupt,_us_ticker_fire_interrupt,__ZL25default_terminate_handlerv,__ZL12send_messagev,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b45,b46,b47,b48,b49,b50,b51];
var FUNCTION_TABLE_vi = [b53,__ZN16SX1276_LoRaRadio11radio_resetEv,__ZN16SX1276_LoRaRadio5sleepEv,__ZN16SX1276_LoRaRadio7standbyEv,__ZN16SX1276_LoRaRadio9start_cadEv,__ZN16SX1276_LoRaRadio4lockEv,__ZN16SX1276_LoRaRadio6unlockEv,__ZN16SX1276_LoRaRadioD2Ev,__ZN16SX1276_LoRaRadioD0Ev,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPv,__ZN4mbed11InterruptInD2Ev,__ZN4mbed11InterruptInD0Ev,__ZN4mbed7TimeoutD2Ev,__ZN4mbed7TimeoutD0Ev,__ZN4mbed7Timeout7handlerEv,__ZN4mbed10TimerEventD2Ev,__ZN4mbed10TimerEventD0Ev,_mbed_trace_default_print,__ZN16LoRaWANInterface25remove_link_check_requestEv,__ZN16LoRaWANInterfaceD2Ev,__ZN16LoRaWANInterfaceD0Ev,__ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv,__ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv,__ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv,__ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPv,__ZN4mbed8CallbackIFvPhtsaEE13function_dtorINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPv
,__ZN7LoRaPHYD2Ev,__ZN7LoRaPHYD0Ev,__ZN7LoRaPHY24restore_default_channelsEv,__ZN12LoRaPHYEU868D2Ev,__ZN12LoRaPHYEU868D0Ev,_ccm_ctx_free,_gcm_ctx_free,_aes_ctx_free,_us_ticker_set_interrupt,__ZN4mbed10TimerEvent3irqEj,__ZN4mbed6TickerD2Ev,__ZN4mbed6TickerD0Ev,__ZN4mbed6Ticker7handlerEv,__ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv,__ZN4mbed8CallbackIFv11lora_eventsEE13function_dtorIPS2_EEvPv,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,__ZN16SX1276_LoRaRadio10init_radioEP12radio_events__async_cb,__ZN16SX1276_LoRaRadio4sendEPhh__async_cb,__ZN16SX1276_LoRaRadio11rx_done_irqEv,__ZN16SX1276_LoRaRadio7receiveEj__async_cb,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_277,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_278,__ZN16SX1276_LoRaRadio15timeout_irq_isrEv,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_279
,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_280,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_281,__ZN16SX1276_LoRaRadio6randomEv__async_cb,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_395,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_391,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_392,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_394,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_393,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_390,__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb,__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_300,__ZN16SX1276_LoRaRadioD2Ev__async_cb,__ZN16SX1276_LoRaRadioD2Ev__async_cb_45,__ZN16SX1276_LoRaRadioD2Ev__async_cb_39,__ZN16SX1276_LoRaRadioD2Ev__async_cb_44,__ZN16SX1276_LoRaRadioD2Ev__async_cb_40,__ZN16SX1276_LoRaRadioD2Ev__async_cb_43,__ZN16SX1276_LoRaRadioD2Ev__async_cb_41,__ZN16SX1276_LoRaRadioD2Ev__async_cb_42,__ZN16SX1276_LoRaRadioD2Ev__async_cb_51,__ZN16SX1276_LoRaRadioD2Ev__async_cb_50,__ZN16SX1276_LoRaRadioD2Ev__async_cb_49,__ZN16SX1276_LoRaRadioD2Ev__async_cb_48,__ZN16SX1276_LoRaRadioD2Ev__async_cb_47,__ZN16SX1276_LoRaRadioD2Ev__async_cb_46,__ZN16SX1276_LoRaRadioD0Ev__async_cb,__ZN16SX1276_LoRaRadio11rx_done_irqEv__async_cb,__ZN16SX1276_LoRaRadio15timeout_irq_isrEv__async_cb,__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb
,__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_208,__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_209,__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_210,__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_211,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv__async_cb,__ZN16SX1276_LoRaRadio11tx_done_irqEv,__ZN16SX1276_LoRaRadio8transmitEj__async_cb,__ZN16SX1276_LoRaRadio8transmitEj__async_cb_248,__ZN16SX1276_LoRaRadio8transmitEj__async_cb_249,__ZN16SX1276_LoRaRadio11tx_done_irqEv__async_cb,__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_297,__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_296,__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_295,__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb,__ZN4mbed11InterruptInD2Ev__async_cb,__ZN4mbed11InterruptInD2Ev__async_cb_267,__ZN4mbed11InterruptInD0Ev__async_cb,__ZN4mbed11InterruptInD0Ev__async_cb_271,__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb,__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb_323,__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb,__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_383,__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_384,__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_385,__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_386,__ZN4mbed7TimeoutD2Ev__async_cb,__ZN4mbed7TimeoutD2Ev__async_cb_355,__ZN4mbed7TimeoutD0Ev__async_cb,__ZN4mbed7TimeoutD0Ev__async_cb_382,__ZN4mbed7Timeout7handlerEv__async_cb_9
,__ZN4mbed7Timeout7handlerEv__async_cb,__ZN4mbed5TimerC2Ev__async_cb,__ZN4mbed5Timer5startEv__async_cb,__ZN4mbed5Timer7read_msEv__async_cb,__ZN4mbed10TimerEventD2Ev__async_cb,__ZN4mbed10TimerEventC2Ev__async_cb,__ZN4mbed10TimerEvent3irqEj__async_cb,__ZN6events10EventQueue8dispatchEi__async_cb,__ZN6events10EventQueue6cancelEi__async_cb,_equeue_alloc__async_cb,_equeue_post__async_cb,_equeue_enqueue__async_cb,_equeue_cancel__async_cb,_equeue_dispatch__async_cb,_equeue_dispatch__async_cb_241,_equeue_dispatch__async_cb_239,_equeue_dispatch__async_cb_240,_equeue_dispatch__async_cb_242,_mbed_trace_default_print__async_cb,_mbed_tracef__async_cb,_mbed_vtracef__async_cb,_mbed_vtracef__async_cb_131,_mbed_vtracef__async_cb_121,_mbed_vtracef__async_cb_122,_mbed_vtracef__async_cb_123,_mbed_vtracef__async_cb_130,_mbed_vtracef__async_cb_124,_mbed_vtracef__async_cb_129,_mbed_vtracef__async_cb_125,_mbed_vtracef__async_cb_126
,_mbed_vtracef__async_cb_127,_mbed_vtracef__async_cb_128,__ZN16LoRaWANInterface7connectEv__async_cb,__ZN16LoRaWANInterface4sendEhPKhti__async_cb,__ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb,__ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb_338,__ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb_339,__ZN12LoRaWANStackC2Ev__async_cb,__ZN12LoRaWANStackC2Ev__async_cb_28,__ZN12LoRaWANStackC2Ev__async_cb_29,__ZN12LoRaWANStackC2Ev__async_cb_30,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_27,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_23,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_16,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_26,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_17,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_22,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_18,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_25,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_19,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_21,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_20,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_24,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_65,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_60,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_67,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_61,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_64
,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_62,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_66,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_63,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_88,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_85,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_84,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_83,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_79,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_87,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_80,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_82,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_81,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_86,__ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb,__ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_107,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_100,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_106,__ZN12LoRaWANStack18lora_state_machineEv__async_cb,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_113,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_90,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_118,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_108,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_91,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_112,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_92,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_117,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_105,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_104
,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_103,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_102,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_101,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_93,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_111,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_94,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_116,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_99,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_95,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_110,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_96,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_115,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_97,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_109,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_98,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_114,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_133,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_138,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_134,__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv,__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_137,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_135,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_136,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_149,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_154,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_150,__ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv
,__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_153,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_151,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_152,__ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb,__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb_272,__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb,__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb,__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb_273,__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb,__ZN12LoRaWANStack17send_frame_to_macEv__async_cb,__ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb,__ZN12LoRaWANStack9handle_txEhPKhth__async_cb,__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_347,__ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb,__ZN12LoRaWANStack17get_lorawan_stackEv__async_cb,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb,__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb_33,__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb_32,__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb,__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb_34,__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb,__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_68,__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_69,__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_70,__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_71,__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_72,__ZN12LoRaWANStack12add_channelsERK16lora_channelplan__async_cb,__ZN12LoRaWANStack17drop_channel_listEv__async_cb,__ZN12LoRaWANStack16remove_a_channelEh__async_cb
,__ZN12LoRaWANStack24enable_adaptive_datarateEb__async_cb,__ZN12LoRaWANStack21set_channel_data_rateEh__async_cb,__ZN12LoRaWANStack20join_request_by_otaaERK15lorawan_connect__async_cb,__ZN12LoRaWANStack29activation_by_personalizationERK15lorawan_connect__async_cb,__ZN12LoRaWANStack22set_link_check_requestEv__async_cb,__ZN12LoRaWANStack8shutdownEv__async_cb,__ZN7LoRaMacD2Ev__async_cb_159,__ZN7LoRaMacD2Ev__async_cb,__ZN12radio_eventsD2Ev__async_cb,__ZN12radio_eventsD2Ev__async_cb_141,__ZN12radio_eventsD2Ev__async_cb_142,__ZN12radio_eventsD2Ev__async_cb_143,__ZN12radio_eventsD2Ev__async_cb_144,__ZN12radio_eventsD2Ev__async_cb_145,__ZN12radio_eventsD2Ev__async_cb_146,__ZN14lorawan_timersD2Ev__async_cb,__ZN14lorawan_timersD2Ev__async_cb_282,__ZN14lorawan_timersD2Ev__async_cb_283,__ZN14lorawan_timersD2Ev__async_cb_284,__ZN14lorawan_timersD2Ev__async_cb_285,__ZN7LoRaMac16on_radio_tx_doneEv,__ZN7LoRaMac14handle_tx_doneEv__async_cb,__ZN7LoRaMac14handle_tx_doneEv__async_cb_175,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_163,__ZN7LoRaMac25on_rx_window2_timer_eventEv,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_164,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_165,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_162,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_161,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_160
,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb,__ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_293,__ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb,__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv,__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv,__ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_292,__ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_291,__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv__async_cb,__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb_268,__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv__async_cb,__ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_238,__ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb,__ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_237,__ZN7LoRaMac14handle_rx_doneEPhtsa__async_cb_387,__ZN7LoRaMac14handle_rx_doneEPhtsa__async_cb,__ZN7LoRaMac14handle_rx_doneEPhtsa__async_cb_388,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_410,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_424,__ZN7LoRaMac26on_ack_timeout_timer_eventEv,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_421,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_432,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_409,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_400,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_420,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_431,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_408,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_419,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_430
,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_407,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_399,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_398,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_418,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_429,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_406,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_417,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_428,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_405,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_416,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_427,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_404,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_413,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_412,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_411,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_423,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_422,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_415,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_426,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_403,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_414,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_425,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_402,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_401,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_349,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_354,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_350,__ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv,__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv
,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_353,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_351,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_352,__ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv__async_cb,__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv__async_cb_344,__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv__async_cb,__ZN4mbed8CallbackIFvPhtsaEE13function_callINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPKvS1_tsa__async_cb,__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb,__ZN7LoRaMac17on_radio_rx_errorEv,__ZN7LoRaMac15handle_rx_errorEv__async_cb,__ZN7LoRaMac15handle_rx_errorEv__async_cb_52,__ZN7LoRaMac17on_radio_rx_errorEv__async_cb_10,__ZN7LoRaMac17on_radio_rx_errorEv__async_cb_12,__ZN7LoRaMac17on_radio_rx_errorEv__async_cb,__ZN7LoRaMac17on_radio_rx_errorEv__async_cb_11,__ZN7LoRaMac19on_radio_rx_timeoutEv,__ZN7LoRaMac17handle_rx_timeoutEv__async_cb,__ZN7LoRaMac17handle_rx_timeoutEv__async_cb_15,__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_1,__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_3,__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb,__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_2,__ZN7LoRaMac19on_radio_tx_timeoutEv,__ZN7LoRaMac17handle_tx_timeoutEv__async_cb,__ZN7LoRaMac17handle_tx_timeoutEv__async_cb_6,__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb,__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_219,__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_220,__ZN7LoRaMac30on_mac_state_check_timer_eventEv,__ZN7LoRaMac34handle_mac_state_check_timer_eventEv__async_cb
,__ZN7LoRaMac34handle_mac_state_check_timer_eventEv__async_cb_232,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_190,__ZN7LoRaMac25on_tx_delayed_timer_eventEv,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_189,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_197,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_188,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_196,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_186,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_195,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_181,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_194,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_182,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_185,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_187,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_193,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_192,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_183,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_191,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_184,__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_178,__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb,__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_176,__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_177,__ZN7LoRaMac11schedule_txEv__async_cb,__ZN7LoRaMac11schedule_txEv__async_cb_201,__ZN7LoRaMac11schedule_txEv__async_cb_202,__ZN7LoRaMac11schedule_txEv__async_cb_203,__ZN7LoRaMac11schedule_txEv__async_cb_204,__ZN7LoRaMac11schedule_txEv__async_cb_206
,__ZN7LoRaMac11schedule_txEv__async_cb_205,__ZN7LoRaMac21send_frame_on_channelEh__async_cb,__ZN7LoRaMac21send_frame_on_channelEh__async_cb_147,__ZN7LoRaMac21send_frame_on_channelEh__async_cb_148,__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb_168,__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb_166,__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb_167,__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb,__ZN7LoRaMac29handle_delayed_tx_timer_eventEv__async_cb,__ZN7LoRaMac29handle_delayed_tx_timer_eventEv__async_cb_89,__ZN7LoRaMac18handle_ack_timeoutEv__async_cb,__ZN7LoRaMac18handle_ack_timeoutEv__async_cb_139,__ZN7LoRaMac25on_rx_window1_timer_eventEv,__ZN7LoRaMac22handle_rx1_timer_eventEv__async_cb,__ZN7LoRaMac22handle_rx1_timer_eventEv__async_cb_298,__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_276,__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_275,__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb,__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_274,__ZN7LoRaMac22handle_rx2_timer_eventEv__async_cb,__ZN7LoRaMac22handle_rx2_timer_eventEv__async_cb_270,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_264,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_265,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_266,__ZN7LoRaMac34handle_mac_state_check_timer_eventEv,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_263,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb,__ZN7LoRaMac29handle_delayed_tx_timer_eventEv,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_262,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_255
,__ZN7LoRaMac22handle_rx1_timer_eventEv,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_261,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_256,__ZN7LoRaMac22handle_rx2_timer_eventEv,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_260,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_257,__ZN7LoRaMac18handle_ack_timeoutEv,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_259,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_258,__ZN7LoRaMac10disconnectEv__async_cb_254,__ZN7LoRaMac10disconnectEv__async_cb_253,__ZN7LoRaMac10disconnectEv__async_cb_252,__ZN7LoRaMac10disconnectEv__async_cb_251,__ZN7LoRaMac10disconnectEv__async_cb_250,__ZN7LoRaMac10disconnectEv__async_cb,__ZN7LoRaMac17query_tx_possibleEhP17loramac_tx_info_t__async_cb,__ZN7LoRaMac16add_channel_planERK16lora_channelplan__async_cb,__ZN7LoRaMac19remove_channel_planEv__async_cb,__ZN7LoRaMac21remove_single_channelEh__async_cb,__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb,__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_356,__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_361,__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_360,__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_358,__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_359,__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_357,__ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t__async_cb,__ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t__async_cb_348,__ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb,__ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_336
,__ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_337,__ZN7LoRaMac14handle_tx_doneEv,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_309,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_310,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_311,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_312,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_313,__ZN7LoRaMac15handle_rx_errorEv,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_314,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_315,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_316,__ZN7LoRaMac17handle_tx_timeoutEv,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_317,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_318,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_319,__ZN7LoRaMac17handle_rx_timeoutEv,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_320,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_321,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_322,__ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan__async_cb,__ZN18LoRaMacChannelPlan11remove_planEv__async_cb,__ZN18LoRaMacChannelPlan11remove_planEv__async_cb_14,__ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb,__ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb_8,__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb,__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_340,__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_341,__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_342,__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_343
,__Z11compute_micPKhtS0_jhjPj__async_cb_365,__Z11compute_micPKhtS0_jhjPj__async_cb_364,__Z11compute_micPKhtS0_jhjPj__async_cb_362,__Z11compute_micPKhtS0_jhjPj__async_cb,__Z11compute_micPKhtS0_jhjPj__async_cb_363,__Z11compute_micPKhtS0_jhjPj__async_cb_366,__Z22compute_join_frame_micPKhtS0_Pj__async_cb_235,__Z22compute_join_frame_micPKhtS0_Pj__async_cb_234,__Z22compute_join_frame_micPKhtS0_Pj__async_cb,__Z22compute_join_frame_micPKhtS0_Pj__async_cb_233,__Z22compute_join_frame_micPKhtS0_Pj__async_cb_236,__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_173,__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_172,__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb,__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_170,__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_171,__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_169,__ZN11LoRaMacMlme22set_tx_continuous_waveEhaafft__async_cb,__ZN7LoRaPHY19request_new_channelEP24new_channel_req_params_s__async_cb,__ZN7LoRaPHY19request_new_channelEP24new_channel_req_params_s__async_cb_38,__ZN7LoRaPHY13apply_cf_listEP15cflist_params_t__async_cb,__ZN7LoRaPHY13apply_cf_listEP15cflist_params_t__async_cb_324,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_301,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_302,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_303,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_304,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_305,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_306,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_307
,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_308,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_330,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_331,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_332,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_333,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_334,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_335,__ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s__async_cb,__ZN7LoRaPHY18dl_channel_requestEP23dl_channel_req_params_s__async_cb,__ZN7LoRaPHY11add_channelEP16channel_params_th__async_cb,__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb,__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_243,__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_244,__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb,__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_212,__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_213,__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb,__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_179,__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_180,__ZN7LoRaPHY25setup_public_network_modeEb__async_cb,__ZN7LoRaPHY25setup_public_network_modeEb__async_cb_230,__ZN7LoRaPHY25setup_public_network_modeEb__async_cb_231,__ZN7LoRaPHY15setup_rx_windowEbj__async_cb,__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_226,__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_227,__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_228,__ZN7LoRaPHY13get_radio_rngEv__async_cb,__ZN7LoRaPHY13get_radio_rngEv__async_cb_216,__ZN7LoRaPHY13get_radio_rngEv__async_cb_217
,__ZN7LoRaPHY11handle_sendEPhh__async_cb,__ZN7LoRaPHY11handle_sendEPhh__async_cb_4,__ZN7LoRaPHY11handle_sendEPhh__async_cb_5,__ZN7LoRaPHY12get_next_ADREbRaS0_Rj__async_cb,__ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb,__ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb_214,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_224,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_221,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_223,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_222,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_225,__ZN18LoRaWANTimeHandler4stopER13timer_event_t__async_cb,_mbedtls_ccm_setkey__async_cb_37,_mbedtls_ccm_setkey__async_cb_36,_mbedtls_ccm_setkey__async_cb,_mbedtls_ccm_free__async_cb,_mbedtls_cipher_free__async_cb,_mbedtls_cipher_setup__async_cb,_mbedtls_cipher_setkey__async_cb,_mbedtls_cipher_setkey__async_cb_345,_mbedtls_cipher_update__async_cb,_mbedtls_cipher_update__async_cb_247,_mbedtls_cipher_update__async_cb_245,_mbedtls_cipher_update__async_cb_246,_ccm_aes_setkey_wrap__async_cb,_ccm_ctx_free__async_cb,_gcm_aes_setkey_wrap__async_cb,_gcm_ctx_free__async_cb,_mbedtls_cipher_cmac_starts__async_cb
,_mbedtls_cipher_cmac_update__async_cb_120,_mbedtls_cipher_cmac_update__async_cb_119,_mbedtls_cipher_cmac_update__async_cb,_mbedtls_cipher_cmac_finish__async_cb_229,_mbedtls_cipher_cmac_finish__async_cb,_mbedtls_gcm_setkey__async_cb_200,_mbedtls_gcm_setkey__async_cb_199,_mbedtls_gcm_setkey__async_cb_198,_mbedtls_gcm_setkey__async_cb,_mbedtls_gcm_update__async_cb,_mbedtls_gcm_free__async_cb,_ticker_set_handler__async_cb,_initialize__async_cb,_initialize__async_cb_73,_initialize__async_cb_78,_initialize__async_cb_77,_initialize__async_cb_74,_initialize__async_cb_75,_initialize__async_cb_76,_schedule_interrupt__async_cb,_schedule_interrupt__async_cb_54,_schedule_interrupt__async_cb_55,_schedule_interrupt__async_cb_56,_schedule_interrupt__async_cb_57,_schedule_interrupt__async_cb_58,_schedule_interrupt__async_cb_59,_ticker_remove_event__async_cb,_ticker_read_us__async_cb_31,_ticker_read_us__async_cb,_mbed_assert_internal__async_cb
,_mbed_die__async_cb_381,_mbed_die__async_cb_380,_mbed_die__async_cb_379,_mbed_die__async_cb_378,_mbed_die__async_cb_377,_mbed_die__async_cb_376,_mbed_die__async_cb_375,_mbed_die__async_cb_374,_mbed_die__async_cb_373,_mbed_die__async_cb_372,_mbed_die__async_cb_371,_mbed_die__async_cb_370,_mbed_die__async_cb_369,_mbed_die__async_cb_368,_mbed_die__async_cb_367,_mbed_die__async_cb,_mbed_error_printf__async_cb,_mbed_error_vfprintf__async_cb,_mbed_error_vfprintf__async_cb_397,_mbed_error_vfprintf__async_cb_396,_handle_interrupt_in__async_cb,_serial_putc__async_cb_299,_serial_putc__async_cb,__ZN4mbed6TickerD2Ev__async_cb,__ZN4mbed6TickerD2Ev__async_cb_207,__ZN4mbed6TickerD0Ev__async_cb,__ZN4mbed6TickerD0Ev__async_cb_215,__ZN4mbed6Ticker7handlerEv__async_cb,_invoke_ticker__async_cb_132,_invoke_ticker__async_cb
,__ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv__async_cb,_wait_ms__async_cb,__GLOBAL__sub_I_main_cpp__async_cb,__GLOBAL__sub_I_main_cpp__async_cb_346,_main__async_cb_440,_main__async_cb_439,_main__async_cb_438,_main__async_cb_442,_main__async_cb,__ZL18lora_event_handler11lora_events,_main__async_cb_433,_main__async_cb_434,_main__async_cb_435,_main__async_cb_437,_main__async_cb_436,_main__async_cb_441,__ZL12send_messagev__async_cb_389,__ZL12send_messagev__async_cb,__ZL18lora_event_handler11lora_events__async_cb_329,__ZL18lora_event_handler11lora_events__async_cb_328,__ZL18lora_event_handler11lora_events__async_cb_327,__ZL18lora_event_handler11lora_events__async_cb_326,__ZL18lora_event_handler11lora_events__async_cb,__ZL18lora_event_handler11lora_events__async_cb_325,__ZN4mbed8CallbackIFv11lora_eventsEE13function_callIPS2_EEvPKvS1___async_cb,_putc__async_cb_7,_putc__async_cb,___overflow__async_cb,_fflush__async_cb_289,_fflush__async_cb_288
,_fflush__async_cb_290,_fflush__async_cb,___fflush_unlocked__async_cb,___fflush_unlocked__async_cb_294,_vfprintf__async_cb,_snprintf__async_cb,_vsnprintf__async_cb,_sprintf__async_cb,_vsprintf__async_cb,_printf__async_cb,_putchar__async_cb,_fputc__async_cb_287,_fputc__async_cb,_puts__async_cb,__ZL25default_terminate_handlerv__async_cb,__ZL25default_terminate_handlerv__async_cb_269,_abort_message__async_cb,_abort_message__async_cb_286,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_218,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb,___dynamic_cast__async_cb,___dynamic_cast__async_cb_53,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_13,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,__ZSt11__terminatePFvvE__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_140,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb
,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_158,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_157,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_156,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_155,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_174,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,___cxa_can_catch__async_cb,___cxa_is_pointer_type__async_cb,b54,b55,b56,b57,b58,b59,b60,b61,b62,b63,b64,b65,b66,b67,b68,b69,b70,b71
,b72,b73,b74,b75,b76,b77,b78,b79,b80,b81,b82,b83,b84,b85,b86,b87,b88,b89,b90,b91,b92,b93,b94,b95,b96,b97,b98,b99,b100,b101
,b102,b103,b104,b105,b106,b107,b108,b109,b110,b111,b112,b113,b114,b115,b116,b117,b118,b119,b120,b121,b122,b123,b124,b125,b126,b127,b128,b129,b130,b131
,b132,b133,b134,b135,b136,b137,b138,b139,b140,b141,b142,b143,b144,b145,b146,b147,b148,b149,b150,b151,b152,b153,b154,b155,b156,b157,b158,b159,b160,b161
,b162,b163,b164,b165,b166,b167,b168,b169,b170,b171,b172,b173,b174,b175,b176,b177,b178,b179,b180,b181,b182,b183,b184,b185,b186,b187,b188,b189,b190,b191
,b192,b193,b194,b195,b196,b197,b198,b199,b200,b201,b202,b203,b204,b205,b206,b207,b208,b209,b210,b211,b212,b213,b214,b215,b216,b217,b218,b219,b220,b221
,b222,b223,b224,b225,b226,b227,b228,b229,b230,b231,b232,b233,b234,b235,b236,b237,b238,b239,b240,b241,b242,b243,b244,b245,b246,b247,b248,b249,b250,b251
,b252,b253,b254,b255,b256,b257,b258,b259,b260,b261,b262,b263,b264,b265,b266,b267,b268,b269,b270,b271,b272,b273,b274,b275,b276,b277,b278,b279,b280,b281
,b282,b283,b284,b285,b286,b287,b288,b289,b290,b291,b292,b293,b294,b295,b296,b297,b298,b299,b300,b301,b302,b303,b304,b305,b306,b307,b308,b309,b310,b311
,b312,b313,b314,b315,b316,b317,b318,b319,b320,b321,b322,b323,b324,b325,b326,b327,b328,b329,b330,b331,b332,b333,b334,b335,b336,b337,b338,b339,b340,b341
,b342,b343,b344,b345,b346];
var FUNCTION_TABLE_vii = [b348,__ZN16SX1276_LoRaRadio10init_radioEP12radio_events,__ZN16SX1276_LoRaRadio7receiveEj,__ZN16SX1276_LoRaRadio11set_channelEj,__ZN16SX1276_LoRaRadio18set_public_networkEb,__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPvPKv,__ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_,__ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv,__ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_,__ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv,__ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_,__ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv,__ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_,__ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv,__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPvPKv,__ZN4mbed8CallbackIFvPhtsaEE13function_moveINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPvPKv,__ZN7LoRaPHY16set_last_tx_doneEP24set_band_txdone_params_t,__ZN7LoRaPHY13apply_cf_listEP15cflist_params_t,__ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv,__ZN4mbed8CallbackIFv11lora_eventsEE13function_callIPS2_EEvPKvS1_,__ZN4mbed8CallbackIFv11lora_eventsEE13function_moveIPS2_EEvPvPKv,__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t,__ZN12LoRaWANStack23mlme_indication_handlerEP25loramac_mlme_indication_t,b349,b350,b351
,b352,b353,b354];
var FUNCTION_TABLE_viii = [b356,__ZN16SX1276_LoRaRadio4sendEPhh,__ZN16SX1276_LoRaRadio22set_max_payload_lengthE10modem_typeh,__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj,_add_pkcs_padding,b357,b358,b359];
var FUNCTION_TABLE_viiii = [b361,__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b362,b363,b364];
var FUNCTION_TABLE_viiiii = [b366,__ZN4mbed8CallbackIFvPhtsaEE13function_callINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPKvS1_tsa,__ZN7LoRaPHY21compute_rx_win_paramsEahjP18rx_config_params_t,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZN7LoRaMac16on_radio_rx_doneEPhtsa,__ZN7LoRaMac14handle_rx_doneEPhtsa];
var FUNCTION_TABLE_viiiiii = [b368,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib];
var FUNCTION_TABLE_viiiiiiiiiiiiii = [b370,__ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj];
var FUNCTION_TABLE_viiiiiiiiiiiiiii = [b372,__ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb];

  return { __GLOBAL__sub_I_main_cpp: __GLOBAL__sub_I_main_cpp, ___cxa_can_catch: ___cxa_can_catch, ___cxa_is_pointer_type: ___cxa_is_pointer_type, ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, ___uremdi3: ___uremdi3, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _emscripten_alloc_async_context: _emscripten_alloc_async_context, _emscripten_async_resume: _emscripten_async_resume, _emscripten_free_async_context: _emscripten_free_async_context, _emscripten_realloc_async_context: _emscripten_realloc_async_context, _fflush: _fflush, _free: _free, _handle_interrupt_in: _handle_interrupt_in, _handle_lora_downlink: _handle_lora_downlink, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _invoke_ticker: _invoke_ticker, _llvm_bswap_i32: _llvm_bswap_i32, _main: _main, _malloc: _malloc, _memcpy: _memcpy, _memset: _memset, _pthread_mutex_lock: _pthread_mutex_lock, _pthread_mutex_unlock: _pthread_mutex_unlock, _sbrk: _sbrk, dynCall_i: dynCall_i, dynCall_ii: dynCall_ii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_iiiiii: dynCall_iiiiii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_v: dynCall_v, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_viii: dynCall_viii, dynCall_viiii: dynCall_viiii, dynCall_viiiii: dynCall_viiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_viiiiiiiiiiiiii: dynCall_viiiiiiiiiiiiii, dynCall_viiiiiiiiiiiiiii: dynCall_viiiiiiiiiiiiiii, establishStackSpace: establishStackSpace, getTempRet0: getTempRet0, runPostSets: runPostSets, setAsync: setAsync, setTempRet0: setTempRet0, setThrew: setThrew, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real___GLOBAL__sub_I_main_cpp = asm["__GLOBAL__sub_I_main_cpp"]; asm["__GLOBAL__sub_I_main_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_main_cpp.apply(null, arguments);
};

var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_can_catch.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_is_pointer_type.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____uremdi3.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__emscripten_alloc_async_context = asm["_emscripten_alloc_async_context"]; asm["_emscripten_alloc_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_alloc_async_context.apply(null, arguments);
};

var real__emscripten_async_resume = asm["_emscripten_async_resume"]; asm["_emscripten_async_resume"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_async_resume.apply(null, arguments);
};

var real__emscripten_free_async_context = asm["_emscripten_free_async_context"]; asm["_emscripten_free_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_free_async_context.apply(null, arguments);
};

var real__emscripten_realloc_async_context = asm["_emscripten_realloc_async_context"]; asm["_emscripten_realloc_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_realloc_async_context.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__handle_interrupt_in = asm["_handle_interrupt_in"]; asm["_handle_interrupt_in"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__handle_interrupt_in.apply(null, arguments);
};

var real__handle_lora_downlink = asm["_handle_lora_downlink"]; asm["_handle_lora_downlink"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__handle_lora_downlink.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__invoke_ticker = asm["_invoke_ticker"]; asm["_invoke_ticker"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__invoke_ticker.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__main.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__pthread_mutex_lock = asm["_pthread_mutex_lock"]; asm["_pthread_mutex_lock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_lock.apply(null, arguments);
};

var real__pthread_mutex_unlock = asm["_pthread_mutex_unlock"]; asm["_pthread_mutex_unlock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_unlock.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_getTempRet0.apply(null, arguments);
};

var real_setAsync = asm["setAsync"]; asm["setAsync"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setAsync.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setTempRet0.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
var __GLOBAL__sub_I_main_cpp = Module["__GLOBAL__sub_I_main_cpp"] = asm["__GLOBAL__sub_I_main_cpp"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _emscripten_alloc_async_context = Module["_emscripten_alloc_async_context"] = asm["_emscripten_alloc_async_context"];
var _emscripten_async_resume = Module["_emscripten_async_resume"] = asm["_emscripten_async_resume"];
var _emscripten_free_async_context = Module["_emscripten_free_async_context"] = asm["_emscripten_free_async_context"];
var _emscripten_realloc_async_context = Module["_emscripten_realloc_async_context"] = asm["_emscripten_realloc_async_context"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _free = Module["_free"] = asm["_free"];
var _handle_interrupt_in = Module["_handle_interrupt_in"] = asm["_handle_interrupt_in"];
var _handle_lora_downlink = Module["_handle_lora_downlink"] = asm["_handle_lora_downlink"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _invoke_ticker = Module["_invoke_ticker"] = asm["_invoke_ticker"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _main = Module["_main"] = asm["_main"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memset = Module["_memset"] = asm["_memset"];
var _pthread_mutex_lock = Module["_pthread_mutex_lock"] = asm["_pthread_mutex_lock"];
var _pthread_mutex_unlock = Module["_pthread_mutex_unlock"] = asm["_pthread_mutex_unlock"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var setAsync = Module["setAsync"] = asm["setAsync"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_viiiiiiiiiiiiii = Module["dynCall_viiiiiiiiiiiiii"] = asm["dynCall_viiiiiiiiiiiiii"];
var dynCall_viiiiiiiiiiiiiii = Module["dynCall_viiiiiiiiiiiiiii"] = asm["dynCall_viiiiiiiiiiiiiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Module["intArrayFromString"]) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["ccall"]) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["cwrap"]) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setValue"]) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getValue"]) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocate"]) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getMemory"]) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["Pointer_stringify"]) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF8"]) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocateUTF8"]) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addRunDependency"]) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["removeRunDependency"]) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS"]) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS_createFolder"]) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPath"]) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDataFile"]) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPreloadedFile"]) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLazyFile"]) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLink"]) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDevice"]) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_unlink"]) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["staticAlloc"]) Module["staticAlloc"] = function() { abort("'staticAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynamicAlloc"]) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["warnOnce"]) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadDynamicLibrary"]) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadWebAssemblyModule"]) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getLEB"]) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFunctionTables"]) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["alignFunctionTables"]) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["registerFunctions"]) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addFunction"]) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["removeFunction"]) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFuncWrapper"]) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["prettyPrint"]) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["makeBigInt"]) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynCall"]) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getCompilerSetting"]) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Module["ALLOC_NORMAL"]) Object.defineProperty(Module, "ALLOC_NORMAL", { get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STACK"]) Object.defineProperty(Module, "ALLOC_STACK", { get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STATIC"]) Object.defineProperty(Module, "ALLOC_STATIC", { get: function() { abort("'ALLOC_STATIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_DYNAMIC"]) Object.defineProperty(Module, "ALLOC_DYNAMIC", { get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_NONE"]) Object.defineProperty(Module, "ALLOC_NONE", { get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    if (typeof Module['locateFile'] === 'function') {
      memoryInitializer = Module['locateFile'](memoryInitializer);
    } else if (Module['memoryInitializerPrefixURL']) {
      memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
    }
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    function doBrowserLoad() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      function useRequest() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
            // If you see this warning, the issue may be that you are using locateFile or memoryInitializerPrefixURL, and defining them in JS. That
            // means that the HTML file doesn't know about them, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}



/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(Module['thisProgram']);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      Module.printErr('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in NO_FILESYSTEM
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = Module['print'];
  var printErr = Module['printErr'];
  var has = false;
  Module['print'] = Module['printErr'] = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = flush_NO_FILESYSTEM;
    if (flush) flush(0);
  } catch(e) {}
  Module['print'] = print;
  Module['printErr'] = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set NO_EXIT_RUNTIME to 0 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      Module.printErr('exit(' + status + ') called, but NO_EXIT_RUNTIME is set, so halting execution but not exiting the runtime or preventing further async execution (build with NO_EXIT_RUNTIME=0, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = exit;

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}






//# sourceMappingURL=lorawan.js.map