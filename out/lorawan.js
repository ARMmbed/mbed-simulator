// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('Module[\'ENVIRONMENT\'] value is not valid. must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', function(reason, p) {
    Module['printErr']('node.js exiting due to unhandled promise rejection');
    process['exit'](1);
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  Module['setWindowTitle'] = function(title) { document.title = title };
}
else {
  // Unreachable because SHELL is dependent on the others
  throw new Error('unknown runtime environment');
}

// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
Module['print'] = typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null);
Module['printErr'] = typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || Module['print']);

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = setTempRet0 = getTempRet0 = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  assert(!staticSealed);
  var ret = STATICTOP;
  STATICTOP = (STATICTOP + size + 15) & -16;
  return ret;
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  if (end >= TOTAL_MEMORY) {
    var success = enlargeMemory();
    if (!success) {
      HEAP32[DYNAMICTOP_PTR>>2] = ret;
      return 0;
    }
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  var ret = size = Math.ceil(size / factor) * factor;
  return ret;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    Module.printErr(text);
  }
}



var jsCallStartIndex = 1;
var functionPointers = new Array(0);

// 'sig' parameter is only used on LLVM wasm backend
function addFunction(func, sig) {
  if (typeof sig === 'undefined') {
    Module.printErr('Warning: addFunction: Provide a wasm function signature ' +
                    'string as a second argument');
  }
  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
}

function removeFunction(index) {
  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}


function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // FIXME backwards compatibility layer for ports. Support some Runtime.*
  //       for now, fix it there, then remove it from here. That way we
  //       can minimize any period of breakage.
  dynCall: dynCall, // for SDL2 port
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

var JSfuncs = {
  // Helpers for cwrap -- it can't refer to Runtime directly because it might
  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
  // out what the minified function name is.
  'stackSave': function() {
    stackSave()
  },
  'stackRestore': function() {
    stackRestore()
  },
  // type conversion from js to c
  'arrayToC' : function(arr) {
    var ret = stackAlloc(arr.length);
    writeArrayToMemory(arr, ret);
    return ret;
  },
  'stringToC' : function(str) {
    var ret = 0;
    if (str !== null && str !== undefined && str !== 0) { // null string
      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
      var len = (str.length << 2) + 1;
      ret = stackAlloc(len);
      stringToUTF8(str, ret, len);
    }
    return ret;
  }
};
// For fast lookup of conversion functions
var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

// C calling interface.
function ccall (ident, returnType, argTypes, args, opts) {
  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  if (returnType === 'string') ret = Pointer_stringify(ret);
  if (stack !== 0) {
    stackRestore(stack);
  }
  return ret;
}

function cwrap (ident, returnType, argTypes) {
  argTypes = argTypes || [];
  var cfunc = getCFunc(ident);
  // When the function takes numbers and returns a number, we can just return
  // the original function
  var numericArgs = argTypes.every(function(type){ return type === 'number'});
  var numericRet = returnType !== 'string';
  if (numericRet && numericArgs) {
    return cfunc;
  }
  return function() {
    return ccall(ident, returnType, argTypes, arguments);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return staticAlloc(size);
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return UTF8ToString(ptr);
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

function demangle(func) {
  warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
  Module['buffer'] = buffer;
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

assert(Math['imul'] && Math['fround'] && Math['clz32'] && Math['trunc'], 'this is a legacy browser, build with LEGACY_VM_SUPPORT');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



var /* show errors on likely calls to FS when it was not included */ FS = {
  error: function() {
    abort('Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with  -s FORCE_FILESYSTEM=1');
  },
  init: function() { FS.error() },
  createDataFile: function() { FS.error() },
  createPreloadedFile: function() { FS.error() },
  createLazyFile: function() { FS.error() },
  open: function() { FS.error() },
  mkdev: function() { FS.error() },
  registerDevice: function() { FS.error() },
  analyzePath: function() { FS.error() },
  loadFilesFromDB: function() { FS.error() },

  ErrnoError: function ErrnoError() { FS.error() },
};
Module['FS_createDataFile'] = FS.createDataFile;
Module['FS_createPreloadedFile'] = FS.createPreloadedFile;



// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [function($0, $1, $2, $3, $4, $5) { window.MbedJSHal.lora.sendFsk($0, $1, $2, $3, $4, $5); },
 function($0, $1, $2, $3, $4, $5) { window.MbedJSHal.lora.sendLoRa($0, $1, $2, $3, $4, $5); },
 function($0, $1) { MbedJSHal.gpio.write($0, $1); },
 function($0, $1) { MbedJSHal.gpio.init_in($0, $1, 3); },
 function($0, $1) { MbedJSHal.gpio.init_out($0, $1, 0); },
 function($0, $1, $2) { MbedJSHal.gpio.init_out($0, $1, $2); },
 function($0, $1, $2, $3, $4) { MbedJSHal.gpio.init_inout($0, $1, $2, $3, $4); },
 function($0, $1) { MbedJSHal.gpio.irq_init($0, $1); },
 function($0, $1) { MbedJSHal.gpio.irq_free($0); },
 function($0, $1, $2) { MbedJSHal.gpio.irq_set($0, $1, $2); },
 function($0) { window.MbedJSHal.timers.ticker_detach($0); },
 function($0, $1, $2) { window.MbedJSHal.sht31.init($0, $1, $2); },
 function($0) { return window.MbedJSHal.sht31.read_temperature($0); }];

function _emscripten_asm_const_iii(code, a0, a1) {
  return ASM_CONSTS[code](a0, a1);
}

function _emscripten_asm_const_iiiiii(code, a0, a1, a2, a3, a4) {
  return ASM_CONSTS[code](a0, a1, a2, a3, a4);
}

function _emscripten_asm_const_iiii(code, a0, a1, a2) {
  return ASM_CONSTS[code](a0, a1, a2);
}

function _emscripten_asm_const_ii(code, a0) {
  return ASM_CONSTS[code](a0);
}

function _emscripten_asm_const_iiiiiii(code, a0, a1, a2, a3, a4, a5) {
  return ASM_CONSTS[code](a0, a1, a2, a3, a4, a5);
}




STATIC_BASE = GLOBAL_BASE;

STATICTOP = STATIC_BASE + 23632;
/* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__sub_I_main_cpp() } });


memoryInitializer = "lorawan.js.mem";





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};function ___cxa_begin_catch(ptr) {
      var info = EXCEPTIONS.infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exception--;
      }
      if (info) info.rethrown = false;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  
  
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((setTempRet0(0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((setTempRet0(throwntype),thrown)|0);
    }function ___gxx_personality_v0() {
    }

  function ___lock() {}

  
    

  
  var SYSCALLS={varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function flush_NO_FILESYSTEM() {
      // flush anything remaining in the buffers during shutdown
      var fflush = Module["_fflush"];
      if (fflush) fflush(0);
      var printChar = ___syscall146.printChar;
      if (!printChar) return;
      var buffers = ___syscall146.buffers;
      if (buffers[1].length) printChar(1, 10);
      if (buffers[2].length) printChar(2, 10);
    }function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      // hack to support printf in NO_FILESYSTEM
      var stream = SYSCALLS.get(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      var ret = 0;
      if (!___syscall146.buffers) {
        ___syscall146.buffers = [null, [], []]; // 1 => stdout, 2 => stderr
        ___syscall146.printChar = function(stream, curr) {
          var buffer = ___syscall146.buffers[stream];
          assert(buffer);
          if (curr === 0 || curr === 10) {
            (stream === 1 ? Module['print'] : Module['printErr'])(UTF8ArrayToString(buffer, 0));
            buffer.length = 0;
          } else {
            buffer.push(curr);
          }
        };
      }
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAP32[(((iov)+(i*8))>>2)];
        var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
        for (var j = 0; j < len; j++) {
          ___syscall146.printChar(stream, HEAPU8[ptr+j]);
        }
        ret += len;
      }
      return ret;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC);   

  function ___unlock() {}

   

  function _abort() {
      Module['abort']();
    }

   

   

  
  var ___async_cur_frame=0; 

  var _emscripten_asm_const_int=true;

   

   

  
  
  var ___async=0;
  
  var ___async_unwind=1;
  
  var ___async_retval=STATICTOP; STATICTOP += 16;; 
  
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now())|0;
          setTimeout(Browser.mainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (typeof setImmediate === 'undefined') {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = 'setimmediate';
          function Browser_setImmediate_messageHandler(event) {
            // When called in current thread or Worker, the main loop ID is structured slightly different to accommodate for --proxy-to-worker runtime listening to Worker events,
            // so check for both cases.
            if (event.data === emscriptenMainLoopMessageId || event.data.target === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          addEventListener("message", Browser_setImmediate_messageHandler, true);
          setImmediate = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            if (ENVIRONMENT_IS_WORKER) {
              if (Module['setImmediates'] === undefined) Module['setImmediates'] = [];
              Module['setImmediates'].push(func);
              postMessage({target: emscriptenMainLoopMessageId}); // In --proxy-to-worker, route the message via proxyClient.js
            } else postMessage(emscriptenMainLoopMessageId, "*"); // On the main thread, can just send the message to itself.
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          setImmediate(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }
  
  function _emscripten_get_now() { abort() }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var browserIterationFunc;
      if (typeof arg !== 'undefined') {
        browserIterationFunc = function() {
          Module['dynCall_vi'](func, arg);
        };
      } else {
        browserIterationFunc = function() {
          Module['dynCall_v'](func);
        };
      }
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          
          // catches pause/resume main loop from blocker execution
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
          
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        } else if (Browser.mainLoop.timingMode == 0/*EM_TIMING_SETTIMEOUT*/) {
          Browser.mainLoop.tickStartTime = _emscripten_get_now();
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(browserIterationFunc);
  
        checkStackCookie();
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullscreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === Module['canvas'] ||
                                document['mozPointerLockElement'] === Module['canvas'] ||
                                document['webkitPointerLockElement'] === Module['canvas'] ||
                                document['msPointerLockElement'] === Module['canvas'];
        }
        var canvas = Module['canvas'];
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
                Module['canvas'].requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullscreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullscreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['fullscreenElement'] || document['mozFullScreenElement'] ||
               document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.exitFullscreen = document['exitFullscreen'] ||
                                    document['cancelFullScreen'] ||
                                    document['mozCancelFullScreen'] ||
                                    document['msExitFullscreen'] ||
                                    document['webkitCancelFullScreen'] ||
                                    function() {};
            canvas.exitFullscreen = canvas.exitFullscreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullscreen = true;
            if (Browser.resizeCanvas) Browser.setFullscreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullscreen);
          if (Module['onFullscreen']) Module['onFullscreen'](Browser.isFullscreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullscreenChange, false);
          document.addEventListener('mozfullscreenchange', fullscreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullscreenChange, false);
          document.addEventListener('MSFullscreenChange', fullscreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullscreen = canvasContainer['requestFullscreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullscreen'] ? function() { canvasContainer['webkitRequestFullscreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null) ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullscreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullscreen();
        }
      },requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
          Module.printErr('Browser.requestFullScreen() is deprecated. Please call Browser.requestFullscreen instead.');
          Browser.requestFullScreen = function(lockPointer, resizeCanvas, vrDevice) {
            return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
          }
          return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
            Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
            Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
            // just add the mouse delta to the current absolut mouse position
            // FIXME: ideally this should be clamped against the canvas size and zero
            Browser.mouseX += Browser.mouseMovementX;
            Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';
        Module['readAsync'](url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (dep) removeRunDependency(dep);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (dep) addRunDependency(dep);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullscreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['fullscreenElement'] || document['mozFullScreenElement'] ||
             document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};function _emscripten_sleep(ms) {
      Module['setAsync'](); // tell the scheduler that we have a callback on hold
      Browser.safeSetTimeout(_emscripten_async_resume, ms);
    }

  function _gettimeofday(ptr) {
      var now = Date.now();
      HEAP32[((ptr)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((ptr)+(4))>>2)]=((now % 1000)*1000)|0; // microseconds
      return 0;
    }



   

  var _llvm_ceil_f64=Math_ceil;

  var _llvm_floor_f64=Math_floor;

  function _llvm_trap() {
      abort('trap!');
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

   

  function _pthread_cond_init() { return 0; }

  function _pthread_cond_signal() { return 0; }

  function _pthread_cond_timedwait() { return 0; }

  function _pthread_cond_wait() { return 0; }

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function _pthread_mutex_init() {}

   

   

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Module['dynCall_v'](func);
      _pthread_once.seen[ptr] = 1;
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    } 
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Module.printErr("Module.requestFullScreen is deprecated. Please call Module.requestFullscreen instead."); Module["requestFullScreen"] = Module["requestFullscreen"]; Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) };
if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function _emscripten_get_now_actual() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
    _emscripten_get_now = function() { return self['performance']['now'](); };
  } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
    _emscripten_get_now = function() { return performance['now'](); };
  } else {
    _emscripten_get_now = Date.now;
  };
DYNAMICTOP_PTR = staticAlloc(4);

STACK_BASE = STACKTOP = alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

var ASSERTIONS = true;

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}



var debug_table_i = ["0", "_ccm_ctx_alloc", "_gcm_ctx_alloc", "_aes_ctx_alloc", "_us_ticker_read", "_us_ticker_get_info", "0", "0"];
var debug_table_ii = ["0", "__ZN16SX1276_LoRaRadio6randomEv", "__ZN16SX1276_LoRaRadio10get_statusEv", "__ZN16LoRaWANInterface7connectEv", "__ZN16LoRaWANInterface10disconnectEv", "__ZN16LoRaWANInterface22add_link_check_requestEv", "__ZN16LoRaWANInterface24enable_adaptive_datarateEv", "__ZN16LoRaWANInterface25disable_adaptive_datarateEv", "__ZN16LoRaWANInterface19remove_channel_planEv", "___stdio_close", "0", "0", "0", "0", "0", "0"];
var debug_table_iii = ["0", "__ZN16SX1276_LoRaRadio18check_rf_frequencyEj", "__ZN16LoRaWANInterface10initializeEPN6events10EventQueueE", "__ZN16LoRaWANInterface7connectERK15lorawan_connect", "__ZN16LoRaWANInterface12set_datarateEh", "__ZN16LoRaWANInterface25set_confirmed_msg_retriesEh", "__ZN16LoRaWANInterface16set_channel_planERK16lora_channelplan", "__ZN16LoRaWANInterface16get_channel_planER16lora_channelplan", "__ZN16LoRaWANInterface14remove_channelEh", "__ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t", "__ZN7LoRaPHY19request_new_channelEP24new_channel_req_params_s", "__ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s", "__ZN7LoRaPHY25accept_tx_param_setup_reqEP20tx_param_setup_req_s", "__ZN7LoRaPHY18dl_channel_requestEP23dl_channel_req_params_s", "__ZN7LoRaPHY16get_alternate_DREh", "__ZN7LoRaPHY14remove_channelEh", "__ZN7LoRaPHY16verify_frequencyEj", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_iiii = ["0", "__ZN16SX1276_LoRaRadio11time_on_airE10modem_typeh", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa", "__ZN7LoRaPHY11add_channelEP16channel_params_th", "__ZN7LoRaPHY15apply_DR_offsetEaa", "_ccm_aes_setkey_wrap", "_gcm_aes_setkey_wrap", "_aes_setkey_enc_wrap", "_aes_setkey_dec_wrap", "___stdio_write", "___stdio_seek", "___stdout_write", "_sn_write", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv", "_get_pkcs_padding", "0"];
var debug_table_iiiii = ["0", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj", "_aes_crypt_ecb_wrap", "0"];
var debug_table_iiiiii = ["0", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj", "__ZN16LoRaWANInterface4sendEhPKhti", "__ZN16LoRaWANInterface7receiveEhPhti", "__ZN7LoRaPHY16set_next_channelEP26channel_selection_params_sPhPjS3_", "0", "0", "0"];
var debug_table_iiiiiii = ["0", "__ZN7LoRaPHY16link_ADR_requestEP16adr_req_params_tPaS2_PhS3_", "_aes_crypt_cbc_wrap", "0"];
var debug_table_v = ["0", "___cxa_pure_virtual", "_us_ticker_init", "_us_ticker_disable_interrupt", "_us_ticker_clear_interrupt", "_us_ticker_fire_interrupt", "__ZL25default_terminate_handlerv", "__ZL12send_messagev", "__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_vi = ["0", "__ZN16SX1276_LoRaRadio11radio_resetEv", "__ZN16SX1276_LoRaRadio5sleepEv", "__ZN16SX1276_LoRaRadio7standbyEv", "__ZN16SX1276_LoRaRadio9start_cadEv", "__ZN16SX1276_LoRaRadio4lockEv", "__ZN16SX1276_LoRaRadio6unlockEv", "__ZN16SX1276_LoRaRadioD2Ev", "__ZN16SX1276_LoRaRadioD0Ev", "__ZN4mbed11InterruptInD2Ev", "__ZN4mbed11InterruptInD0Ev", "__ZN4mbed7TimeoutD2Ev", "__ZN4mbed7TimeoutD0Ev", "__ZN4mbed7Timeout7handlerEv", "__ZN4mbed10TimerEventD2Ev", "__ZN4mbed10TimerEventD0Ev", "__ZN16LoRaWANInterface25remove_link_check_requestEv", "__ZN16LoRaWANInterfaceD2Ev", "__ZN16LoRaWANInterfaceD0Ev", "__ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv", "__ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv", "__ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv", "__ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPv", "__ZN4mbed8CallbackIFvPhtsaEE13function_dtorINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPv", "__ZN7LoRaPHYD2Ev", "__ZN7LoRaPHYD0Ev", "__ZN7LoRaPHY24restore_default_channelsEv", "__ZN12LoRaPHYEU868D2Ev", "__ZN12LoRaPHYEU868D0Ev", "_ccm_ctx_free", "_gcm_ctx_free", "_aes_ctx_free", "_us_ticker_set_interrupt", "__ZN4mbed10TimerEvent3irqEj", "__ZN4mbed6TickerD2Ev", "__ZN4mbed6TickerD0Ev", "__ZN4mbed6Ticker7handlerEv", "__ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv", "__ZN4mbed8CallbackIFv11lora_eventsEE13function_dtorIPS2_EEvPv", "__ZN10__cxxabiv116__shim_type_infoD2Ev", "__ZN10__cxxabiv117__class_type_infoD0Ev", "__ZNK10__cxxabiv116__shim_type_info5noop1Ev", "__ZNK10__cxxabiv116__shim_type_info5noop2Ev", "__ZN10__cxxabiv120__si_class_type_infoD0Ev", "__ZN10__cxxabiv121__vmi_class_type_infoD0Ev", "__ZN16SX1276_LoRaRadio10init_radioEP12radio_events__async_cb", "__ZN16SX1276_LoRaRadio4sendEPhh__async_cb", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb", "__ZN16SX1276_LoRaRadio6randomEv__async_cb", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_213", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_209", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_210", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_212", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_211", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_208", "__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb", "__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_233", "__ZN16SX1276_LoRaRadioD2Ev__async_cb", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_259", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_255", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_258", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_256", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_257", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_265", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_264", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_263", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_262", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_261", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_260", "__ZN16SX1276_LoRaRadioD0Ev__async_cb", "__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_391", "__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_390", "__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb", "__ZN4mbed11InterruptInD2Ev__async_cb", "__ZN4mbed11InterruptInD2Ev__async_cb_398", "__ZN4mbed11InterruptInD0Ev__async_cb", "__ZN4mbed11InterruptInD0Ev__async_cb_380", "__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb", "__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb_363", "__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb", "__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_104", "__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_105", "__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_106", "__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_107", "__ZN4mbed7TimeoutD2Ev__async_cb", "__ZN4mbed7TimeoutD2Ev__async_cb_50", "__ZN4mbed7TimeoutD0Ev__async_cb", "__ZN4mbed7TimeoutD0Ev__async_cb_378", "__ZN4mbed7Timeout7handlerEv__async_cb_41", "__ZN4mbed7Timeout7handlerEv__async_cb", "__ZN4mbed5TimerC2Ev__async_cb", "__ZN4mbed5Timer5startEv__async_cb", "__ZN4mbed5Timer7read_msEv__async_cb", "__ZN4mbed10TimerEventD2Ev__async_cb", "__ZN4mbed10TimerEventC2Ev__async_cb", "__ZN4mbed10TimerEvent3irqEj__async_cb", "__ZN6events10EventQueue8dispatchEi__async_cb", "__ZN6events10EventQueue6cancelEi__async_cb", "_equeue_post__async_cb", "_equeue_enqueue__async_cb", "_equeue_cancel__async_cb", "_equeue_dispatch__async_cb", "_equeue_dispatch__async_cb_388", "_equeue_dispatch__async_cb_386", "_equeue_dispatch__async_cb_387", "_equeue_dispatch__async_cb_389", "__ZN16LoRaWANInterface7connectEv__async_cb", "__ZN16LoRaWANInterface4sendEhPKhti__async_cb", "__ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb", "__ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb_75", "__ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb_76", "__ZN12LoRaWANStackC2Ev__async_cb", "__ZN12LoRaWANStackC2Ev__async_cb_167", "__ZN12LoRaWANStackC2Ev__async_cb_168", "__ZN12LoRaWANStackC2Ev__async_cb_169", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_183", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_190", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_182", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_186", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_177", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_189", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_178", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_185", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_179", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_188", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_180", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_184", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_181", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_187", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_217", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_220", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_214", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_222", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_215", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_219", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_216", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_221", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_218", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_240", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_247", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_244", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_239", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_243", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_238", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_242", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_235", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_246", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_236", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_241", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_237", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_245", "__ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb", "__ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_141", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_134", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_140", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_147", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_122", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_152", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_142", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_123", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_146", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_124", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_151", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_139", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_138", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_137", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_136", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_135", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_125", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_145", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_126", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_150", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_133", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_132", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_127", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_144", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_128", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_149", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_131", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_129", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_143", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_130", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_148", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_365", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_366", "__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv", "__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_369", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_367", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_368", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_344", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_345", "__ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv", "__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_348", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_346", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_347", "__ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb", "__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb_381", "__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb", "__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb", "__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb_394", "__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb", "__ZN12LoRaWANStack17send_frame_to_macEv__async_cb", "__ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb", "__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_268", "__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_267", "__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_269", "__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_266", "__ZN12LoRaWANStack9handle_txEhPKhth__async_cb", "__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_270", "__ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb", "__ZN12LoRaWANStack17get_lorawan_stackEv__async_cb", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb", "__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb_174", "__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb_173", "__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb", "__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb_175", "__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb", "__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_228", "__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_229", "__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_230", "__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_231", "__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_232", "__ZN12LoRaWANStack12add_channelsERK16lora_channelplan__async_cb", "__ZN12LoRaWANStack12add_channelsERK16lora_channelplan__async_cb_252", "__ZN12LoRaWANStack17drop_channel_listEv__async_cb", "__ZN12LoRaWANStack17drop_channel_listEv__async_cb_250", "__ZN12LoRaWANStack16remove_a_channelEh__async_cb", "__ZN12LoRaWANStack16remove_a_channelEh__async_cb_23", "__ZN12LoRaWANStack20get_enabled_channelsER16lora_channelplan__async_cb", "__ZN12LoRaWANStack24enable_adaptive_datarateEb__async_cb", "__ZN12LoRaWANStack24enable_adaptive_datarateEb__async_cb_42", "__ZN12LoRaWANStack21set_channel_data_rateEh__async_cb_38", "__ZN12LoRaWANStack21set_channel_data_rateEh__async_cb", "__ZN12LoRaWANStack21set_channel_data_rateEh__async_cb_39", "__ZN12LoRaWANStack20join_request_by_otaaERK15lorawan_connect__async_cb", "__ZN12LoRaWANStack20join_request_by_otaaERK15lorawan_connect__async_cb_24", "__ZN12LoRaWANStack29activation_by_personalizationERK15lorawan_connect__async_cb", "__ZN12LoRaWANStack29activation_by_personalizationERK15lorawan_connect__async_cb_74", "__ZN12LoRaWANStack22set_link_check_requestEv__async_cb", "__ZN12LoRaWANStack22set_link_check_requestEv__async_cb_114", "__ZN12LoRaWANStack8shutdownEv__async_cb", "__ZN7LoRaMacD2Ev__async_cb_385", "__ZN7LoRaMacD2Ev__async_cb", "__ZN12radio_eventsD2Ev__async_cb", "__ZN12radio_eventsD2Ev__async_cb_349", "__ZN12radio_eventsD2Ev__async_cb_350", "__ZN12radio_eventsD2Ev__async_cb_351", "__ZN12radio_eventsD2Ev__async_cb_352", "__ZN12radio_eventsD2Ev__async_cb_353", "__ZN12radio_eventsD2Ev__async_cb_354", "__ZN14lorawan_timersD2Ev__async_cb", "__ZN14lorawan_timersD2Ev__async_cb_370", "__ZN14lorawan_timersD2Ev__async_cb_371", "__ZN14lorawan_timersD2Ev__async_cb_372", "__ZN14lorawan_timersD2Ev__async_cb_373", "__ZN7LoRaMac16on_radio_tx_doneEv", "__ZN7LoRaMac14handle_tx_doneEv__async_cb", "__ZN7LoRaMac14handle_tx_doneEv__async_cb_404", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_427", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_431", "__ZN7LoRaMac25on_rx_window2_timer_eventEv", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_432", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_433", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_430", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_429", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_428", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb", "__ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb", "__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv", "__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv", "__ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_393", "__ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_392", "__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv__async_cb", "__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb_254", "__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv__async_cb", "__ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_330", "__ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb", "__ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_329", "__ZN7LoRaMac14handle_rx_doneEPhtsa__async_cb_335", "__ZN7LoRaMac14handle_rx_doneEPhtsa__async_cb", "__ZN7LoRaMac14handle_rx_doneEPhtsa__async_cb_336", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_286", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_300", "__ZN7LoRaMac26on_ack_timeout_timer_eventEv", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_297", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_308", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_285", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_276", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_296", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_307", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_284", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_295", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_306", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_283", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_275", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_274", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_294", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_305", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_282", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_293", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_304", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_281", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_292", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_303", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_280", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_289", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_288", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_287", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_299", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_298", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_291", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_302", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_279", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_290", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_301", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_278", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_277", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_317", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_318", "__ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv", "__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_321", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_319", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_320", "__ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv__async_cb", "__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv__async_cb_176", "__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv__async_cb", "__ZN4mbed8CallbackIFvPhtsaEE13function_callINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPKvS1_tsa__async_cb", "__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb", "__ZN7LoRaMac17on_radio_rx_errorEv", "__ZN7LoRaMac15handle_rx_errorEv__async_cb", "__ZN7LoRaMac15handle_rx_errorEv__async_cb_251", "__ZN7LoRaMac17on_radio_rx_errorEv__async_cb_225", "__ZN7LoRaMac17on_radio_rx_errorEv__async_cb_227", "__ZN7LoRaMac17on_radio_rx_errorEv__async_cb", "__ZN7LoRaMac17on_radio_rx_errorEv__async_cb_226", "__ZN7LoRaMac19on_radio_rx_timeoutEv", "__ZN7LoRaMac17handle_rx_timeoutEv__async_cb", "__ZN7LoRaMac17handle_rx_timeoutEv__async_cb_234", "__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_25", "__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_27", "__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb", "__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_26", "__ZN7LoRaMac19on_radio_tx_timeoutEv", "__ZN7LoRaMac17handle_tx_timeoutEv__async_cb", "__ZN7LoRaMac17handle_tx_timeoutEv__async_cb_40", "__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb", "__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_11", "__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_12", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv", "__ZN7LoRaMac34handle_mac_state_check_timer_eventEv__async_cb", "__ZN7LoRaMac34handle_mac_state_check_timer_eventEv__async_cb_21", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_93", "__ZN7LoRaMac25on_tx_delayed_timer_eventEv", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_92", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_100", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_91", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_99", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_89", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_98", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_84", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_97", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_85", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_88", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_90", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_96", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_95", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_86", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_94", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_87", "__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_121", "__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb", "__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_119", "__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_120", "__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_118", "__ZN7LoRaMac11schedule_txEv__async_cb", "__ZN7LoRaMac11schedule_txEv__async_cb_66", "__ZN7LoRaMac11schedule_txEv__async_cb_71", "__ZN7LoRaMac11schedule_txEv__async_cb_67", "__ZN7LoRaMac11schedule_txEv__async_cb_68", "__ZN7LoRaMac11schedule_txEv__async_cb_69", "__ZN7LoRaMac11schedule_txEv__async_cb_73", "__ZN7LoRaMac11schedule_txEv__async_cb_70", "__ZN7LoRaMac11schedule_txEv__async_cb_72", "__ZN7LoRaMac21send_frame_on_channelEh__async_cb_82", "__ZN7LoRaMac21send_frame_on_channelEh__async_cb", "__ZN7LoRaMac21send_frame_on_channelEh__async_cb_81", "__ZN7LoRaMac21send_frame_on_channelEh__async_cb_80", "__ZN7LoRaMac21send_frame_on_channelEh__async_cb_83", "__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb_384", "__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb_382", "__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb_383", "__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb", "__ZN7LoRaMac29handle_delayed_tx_timer_eventEv__async_cb", "__ZN7LoRaMac29handle_delayed_tx_timer_eventEv__async_cb_379", "__ZN7LoRaMac18handle_ack_timeoutEv__async_cb", "__ZN7LoRaMac18handle_ack_timeoutEv__async_cb_364", "__ZN7LoRaMac25on_rx_window1_timer_eventEv", "__ZN7LoRaMac22handle_rx1_timer_eventEv__async_cb", "__ZN7LoRaMac22handle_rx1_timer_eventEv__async_cb_343", "__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_436", "__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_435", "__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb", "__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_434", "__ZN7LoRaMac22handle_rx2_timer_eventEv__async_cb", "__ZN7LoRaMac22handle_rx2_timer_eventEv__async_cb_437", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_414", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_415", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_416", "__ZN7LoRaMac34handle_mac_state_check_timer_eventEv", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_413", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb", "__ZN7LoRaMac29handle_delayed_tx_timer_eventEv", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_412", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_405", "__ZN7LoRaMac22handle_rx1_timer_eventEv", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_411", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_406", "__ZN7LoRaMac22handle_rx2_timer_eventEv", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_410", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_407", "__ZN7LoRaMac18handle_ack_timeoutEv", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_409", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_408", "__ZN7LoRaMac10disconnectEv__async_cb_403", "__ZN7LoRaMac10disconnectEv__async_cb_402", "__ZN7LoRaMac10disconnectEv__async_cb_401", "__ZN7LoRaMac10disconnectEv__async_cb_400", "__ZN7LoRaMac10disconnectEv__async_cb_399", "__ZN7LoRaMac10disconnectEv__async_cb", "__ZN7LoRaMac17query_tx_possibleEhP17loramac_tx_info_t__async_cb", "__ZN7LoRaMac16add_channel_planERK16lora_channelplan__async_cb", "__ZN7LoRaMac19remove_channel_planEv__async_cb", "__ZN7LoRaMac21remove_single_channelEh__async_cb", "__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb", "__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_337", "__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_342", "__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_341", "__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_339", "__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_340", "__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_338", "__ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t__async_cb", "__ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t__async_cb_328", "__ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb", "__ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_315", "__ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_316", "__ZN7LoRaMac14handle_tx_doneEv", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_191", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_192", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_193", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_194", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_195", "__ZN7LoRaMac15handle_rx_errorEv", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_196", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_197", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_198", "__ZN7LoRaMac17handle_tx_timeoutEv", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_199", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_200", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_201", "__ZN7LoRaMac17handle_rx_timeoutEv", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_202", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_203", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_204", "__ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan__async_cb", "__ZN18LoRaMacChannelPlan11remove_planEv__async_cb", "__ZN18LoRaMacChannelPlan11remove_planEv__async_cb_248", "__ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb", "__ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb_223", "__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb", "__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_374", "__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_375", "__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_376", "__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_377", "__Z11compute_micPKhtS0_jhjPj__async_cb_312", "__Z11compute_micPKhtS0_jhjPj__async_cb_311", "__Z11compute_micPKhtS0_jhjPj__async_cb_309", "__Z11compute_micPKhtS0_jhjPj__async_cb", "__Z11compute_micPKhtS0_jhjPj__async_cb_310", "__Z11compute_micPKhtS0_jhjPj__async_cb_313", "__Z22compute_join_frame_micPKhtS0_Pj__async_cb_333", "__Z22compute_join_frame_micPKhtS0_Pj__async_cb_332", "__Z22compute_join_frame_micPKhtS0_Pj__async_cb", "__Z22compute_join_frame_micPKhtS0_Pj__async_cb_331", "__Z22compute_join_frame_micPKhtS0_Pj__async_cb_334", "__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_160", "__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_159", "__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb", "__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_157", "__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_158", "__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_156", "__ZN11LoRaMacMlme22set_tx_continuous_waveEhaafft__async_cb", "__ZN7LoRaPHY19request_new_channelEP24new_channel_req_params_s__async_cb", "__ZN7LoRaPHY19request_new_channelEP24new_channel_req_params_s__async_cb_395", "__ZN7LoRaPHY13apply_cf_listEP15cflist_params_t__async_cb", "__ZN7LoRaPHY13apply_cf_listEP15cflist_params_t__async_cb_438", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_419", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_420", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_421", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_422", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_423", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_424", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_425", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_426", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_362", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_356", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_357", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_358", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_359", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_360", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_361", "__ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s__async_cb", "__ZN7LoRaPHY18dl_channel_requestEP23dl_channel_req_params_s__async_cb", "__ZN7LoRaPHY11add_channelEP16channel_params_th__async_cb", "__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb", "__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_272", "__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_273", "__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb", "__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_205", "__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_206", "__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb", "__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_165", "__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_166", "__ZN7LoRaPHY25setup_public_network_modeEb__async_cb", "__ZN7LoRaPHY25setup_public_network_modeEb__async_cb_77", "__ZN7LoRaPHY25setup_public_network_modeEb__async_cb_78", "__ZN7LoRaPHY15setup_rx_windowEbj__async_cb", "__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_43", "__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_44", "__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_45", "__ZN7LoRaPHY13get_radio_rngEv__async_cb", "__ZN7LoRaPHY13get_radio_rngEv__async_cb_153", "__ZN7LoRaPHY13get_radio_rngEv__async_cb_154", "__ZN7LoRaPHY11handle_sendEPhh__async_cb_103", "__ZN7LoRaPHY11handle_sendEPhh__async_cb", "__ZN7LoRaPHY11handle_sendEPhh__async_cb_101", "__ZN7LoRaPHY11handle_sendEPhh__async_cb_102", "__ZN7LoRaPHY12get_next_ADREbRaS0_Rj__async_cb", "__ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb", "__ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb_163", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_108", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_110", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_109", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_111", "__ZN18LoRaWANTimeHandler4stopER13timer_event_t__async_cb", "_mbedtls_ccm_setkey__async_cb_418", "_mbedtls_ccm_setkey__async_cb_417", "_mbedtls_ccm_setkey__async_cb", "_mbedtls_ccm_free__async_cb", "_mbedtls_cipher_free__async_cb", "_mbedtls_cipher_setup__async_cb", "_mbedtls_cipher_setkey__async_cb", "_mbedtls_cipher_setkey__async_cb_326", "_mbedtls_cipher_update__async_cb", "_mbedtls_cipher_update__async_cb_324", "_mbedtls_cipher_update__async_cb_322", "_mbedtls_cipher_update__async_cb_323", "_ccm_aes_setkey_wrap__async_cb", "_ccm_ctx_free__async_cb", "_gcm_aes_setkey_wrap__async_cb", "_gcm_ctx_free__async_cb", "_mbedtls_cipher_cmac_starts__async_cb", "_mbedtls_cipher_cmac_update__async_cb_162", "_mbedtls_cipher_cmac_update__async_cb_161", "_mbedtls_cipher_cmac_update__async_cb", "_mbedtls_cipher_cmac_finish__async_cb_155", "_mbedtls_cipher_cmac_finish__async_cb", "_mbedtls_gcm_setkey__async_cb_117", "_mbedtls_gcm_setkey__async_cb_116", "_mbedtls_gcm_setkey__async_cb_115", "_mbedtls_gcm_setkey__async_cb", "_mbedtls_gcm_update__async_cb", "_mbedtls_gcm_free__async_cb", "_ticker_set_handler__async_cb", "_initialize__async_cb", "_initialize__async_cb_13", "_initialize__async_cb_18", "_initialize__async_cb_17", "_initialize__async_cb_14", "_initialize__async_cb_15", "_initialize__async_cb_16", "_schedule_interrupt__async_cb", "_schedule_interrupt__async_cb_5", "_schedule_interrupt__async_cb_6", "_schedule_interrupt__async_cb_7", "_schedule_interrupt__async_cb_8", "_schedule_interrupt__async_cb_9", "_schedule_interrupt__async_cb_10", "_ticker_remove_event__async_cb", "_ticker_read_us__async_cb_22", "_ticker_read_us__async_cb", "_mbed_assert_internal__async_cb", "_mbed_die__async_cb_65", "_mbed_die__async_cb_64", "_mbed_die__async_cb_63", "_mbed_die__async_cb_62", "_mbed_die__async_cb_61", "_mbed_die__async_cb_60", "_mbed_die__async_cb_59", "_mbed_die__async_cb_58", "_mbed_die__async_cb_57", "_mbed_die__async_cb_56", "_mbed_die__async_cb_55", "_mbed_die__async_cb_54", "_mbed_die__async_cb_53", "_mbed_die__async_cb_52", "_mbed_die__async_cb_51", "_mbed_die__async_cb", "_mbed_error_printf__async_cb", "_mbed_error_printf__async_cb_224", "_handle_interrupt_in__async_cb", "_serial_putc__async_cb_249", "_serial_putc__async_cb", "__ZN4mbed6TickerD2Ev__async_cb", "__ZN4mbed6TickerD2Ev__async_cb_271", "__ZN4mbed6TickerD0Ev__async_cb", "__ZN4mbed6TickerD0Ev__async_cb_314", "__ZN4mbed6Ticker7handlerEv__async_cb", "_invoke_ticker__async_cb_327", "_invoke_ticker__async_cb", "__ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv__async_cb", "_wait_ms__async_cb", "__GLOBAL__sub_I_main_cpp__async_cb", "__GLOBAL__sub_I_main_cpp__async_cb_19", "_main__async_cb_34", "_main__async_cb_33", "_main__async_cb_36", "_main__async_cb", "__ZL18lora_event_handler11lora_events", "_main__async_cb_28", "_main__async_cb_29", "_main__async_cb_30", "_main__async_cb_32", "_main__async_cb_31", "_main__async_cb_35", "__ZL12send_messagev__async_cb_79", "__ZL12send_messagev__async_cb", "__ZL18lora_event_handler11lora_events__async_cb_49", "__ZL18lora_event_handler11lora_events__async_cb_48", "__ZL18lora_event_handler11lora_events__async_cb_47", "__ZL18lora_event_handler11lora_events__async_cb_46", "__ZL18lora_event_handler11lora_events__async_cb", "__ZN4mbed8CallbackIFv11lora_eventsEE13function_callIPS2_EEvPKvS1___async_cb", "_putc__async_cb_396", "_putc__async_cb", "___overflow__async_cb", "_fflush__async_cb_171", "_fflush__async_cb_170", "_fflush__async_cb_172", "_fflush__async_cb", "___fflush_unlocked__async_cb", "___fflush_unlocked__async_cb_207", "_vfprintf__async_cb", "_vsnprintf__async_cb", "_sprintf__async_cb", "_vsprintf__async_cb", "_printf__async_cb", "_putchar__async_cb", "_fputc__async_cb_37", "_fputc__async_cb", "_puts__async_cb", "__ZL25default_terminate_handlerv__async_cb", "__ZL25default_terminate_handlerv__async_cb_113", "_abort_message__async_cb", "_abort_message__async_cb_355", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_164", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb", "___dynamic_cast__async_cb", "___dynamic_cast__async_cb_253", "__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_325", "__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv", "__ZSt11__terminatePFvvE__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_112", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_4", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_3", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_2", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_1", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_20", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "___cxa_can_catch__async_cb", "___cxa_is_pointer_type__async_cb
var debug_table_vii = ["0", "__ZN16SX1276_LoRaRadio10init_radioEP12radio_events", "__ZN16SX1276_LoRaRadio7receiveEj", "__ZN16SX1276_LoRaRadio11set_channelEj", "__ZN16SX1276_LoRaRadio18set_public_networkEb", "__ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_", "__ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv", "__ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_", "__ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv", "__ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_", "__ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv", "__ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_", "__ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv", "__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPvPKv", "__ZN4mbed8CallbackIFvPhtsaEE13function_moveINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPvPKv", "__ZN7LoRaPHY16set_last_tx_doneEP24set_band_txdone_params_t", "__ZN7LoRaPHY13apply_cf_listEP15cflist_params_t", "__ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv", "__ZN4mbed8CallbackIFv11lora_eventsEE13function_callIPS2_EEvPKvS1_", "__ZN4mbed8CallbackIFv11lora_eventsEE13function_moveIPS2_EEvPvPKv", "__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t", "__ZN12LoRaWANStack23mlme_indication_handlerEP25loramac_mlme_indication_t", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_viii = ["0", "__ZN16SX1276_LoRaRadio4sendEPhh", "__ZN16SX1276_LoRaRadio22set_max_payload_lengthE10modem_typeh", "__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj", "_add_pkcs_padding", "0", "0", "0"];
var debug_table_viiii = ["0", "__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat", "__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "0", "0", "0"];
var debug_table_viiiii = ["0", "__ZN4mbed8CallbackIFvPhtsaEE13function_callINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPKvS1_tsa", "__ZN7LoRaPHY21compute_rx_win_paramsEahjP18rx_config_params_t", "__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa", "__ZN7LoRaMac14handle_rx_doneEPhtsa"];
var debug_table_viiiiii = ["0", "__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib", "__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"];
var debug_table_viiiiiiiiiiiiii = ["0", "__ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj"];
var debug_table_viiiiiiiiiiiiiii = ["0", "__ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb"];
function nullFunc_i(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: i: " + debug_table_i[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viii: " + debug_table_viii[x] + "  v: " + debug_table_v[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: ii: " + debug_table_ii[x] + "  iiii: " + debug_table_iiii[x] + "  i: " + debug_table_i[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  viii: " + debug_table_viii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  v: " + debug_table_v[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiii: " + debug_table_iiiii[x] + "  i: " + debug_table_i[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vi: " + debug_table_vi[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  i: " + debug_table_i[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: v: " + debug_table_v[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  i: " + debug_table_i[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vi: " + debug_table_vi[x] + "  viii: " + debug_table_viii[x] + "  v: " + debug_table_v[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  i: " + debug_table_i[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiii: " + debug_table_viiii[x] + "  v: " + debug_table_v[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  i: " + debug_table_i[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  i: " + debug_table_i[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function nullFunc_viiiiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  v: " + debug_table_v[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function nullFunc_viiiiiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiiiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  v: " + debug_table_v[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14) {
  try {
    Module["dynCall_viiiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
  try {
    Module["dynCall_viiiiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_i": nullFunc_i, "nullFunc_ii": nullFunc_ii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_v": nullFunc_v, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_viii": nullFunc_viii, "nullFunc_viiii": nullFunc_viiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_viiiiiiiiiiiiii": nullFunc_viiiiiiiiiiiiii, "nullFunc_viiiiiiiiiiiiiii": nullFunc_viiiiiiiiiiiiiii, "invoke_i": invoke_i, "invoke_ii": invoke_ii, "invoke_iii": invoke_iii, "invoke_iiii": invoke_iiii, "invoke_iiiii": invoke_iiiii, "invoke_iiiiii": invoke_iiiiii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_v": invoke_v, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_viii": invoke_viii, "invoke_viiii": invoke_viiii, "invoke_viiiii": invoke_viiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_viiiiiiiiiiiiii": invoke_viiiiiiiiiiiiii, "invoke_viiiiiiiiiiiiiii": invoke_viiiiiiiiiiiiiii, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "___cxa_begin_catch": ___cxa_begin_catch, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___cxa_pure_virtual": ___cxa_pure_virtual, "___gxx_personality_v0": ___gxx_personality_v0, "___lock": ___lock, "___resumeException": ___resumeException, "___setErrNo": ___setErrNo, "___syscall140": ___syscall140, "___syscall146": ___syscall146, "___syscall54": ___syscall54, "___syscall6": ___syscall6, "___unlock": ___unlock, "_abort": _abort, "_emscripten_asm_const_ii": _emscripten_asm_const_ii, "_emscripten_asm_const_iii": _emscripten_asm_const_iii, "_emscripten_asm_const_iiii": _emscripten_asm_const_iiii, "_emscripten_asm_const_iiiiii": _emscripten_asm_const_iiiiii, "_emscripten_asm_const_iiiiiii": _emscripten_asm_const_iiiiiii, "_emscripten_get_now": _emscripten_get_now, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_emscripten_sleep": _emscripten_sleep, "_gettimeofday": _gettimeofday, "_llvm_ceil_f64": _llvm_ceil_f64, "_llvm_floor_f64": _llvm_floor_f64, "_llvm_trap": _llvm_trap, "_pthread_cond_init": _pthread_cond_init, "_pthread_cond_signal": _pthread_cond_signal, "_pthread_cond_timedwait": _pthread_cond_timedwait, "_pthread_cond_wait": _pthread_cond_wait, "_pthread_getspecific": _pthread_getspecific, "_pthread_key_create": _pthread_key_create, "_pthread_mutex_init": _pthread_mutex_init, "_pthread_once": _pthread_once, "_pthread_setspecific": _pthread_setspecific, "flush_NO_FILESYSTEM": flush_NO_FILESYSTEM, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8, "___async": ___async, "___async_unwind": ___async_unwind, "___async_retval": ___async_retval, "___async_cur_frame": ___async_cur_frame };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'use asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;
  var ___async=env.___async|0;
  var ___async_unwind=env.___async_unwind|0;
  var ___async_retval=env.___async_retval|0;
  var ___async_cur_frame=env.___async_cur_frame|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_iiiiiii=env.nullFunc_iiiiiii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_viiiiiiiiiiiiii=env.nullFunc_viiiiiiiiiiiiii;
  var nullFunc_viiiiiiiiiiiiiii=env.nullFunc_viiiiiiiiiiiiiii;
  var invoke_i=env.invoke_i;
  var invoke_ii=env.invoke_ii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_v=env.invoke_v;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_viii=env.invoke_viii;
  var invoke_viiii=env.invoke_viiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_viiiiiiiiiiiiii=env.invoke_viiiiiiiiiiiiii;
  var invoke_viiiiiiiiiiiiiii=env.invoke_viiiiiiiiiiiiiii;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var ___lock=env.___lock;
  var ___resumeException=env.___resumeException;
  var ___setErrNo=env.___setErrNo;
  var ___syscall140=env.___syscall140;
  var ___syscall146=env.___syscall146;
  var ___syscall54=env.___syscall54;
  var ___syscall6=env.___syscall6;
  var ___unlock=env.___unlock;
  var _abort=env._abort;
  var _emscripten_asm_const_ii=env._emscripten_asm_const_ii;
  var _emscripten_asm_const_iii=env._emscripten_asm_const_iii;
  var _emscripten_asm_const_iiii=env._emscripten_asm_const_iiii;
  var _emscripten_asm_const_iiiiii=env._emscripten_asm_const_iiiiii;
  var _emscripten_asm_const_iiiiiii=env._emscripten_asm_const_iiiiiii;
  var _emscripten_get_now=env._emscripten_get_now;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _emscripten_sleep=env._emscripten_sleep;
  var _gettimeofday=env._gettimeofday;
  var _llvm_ceil_f64=env._llvm_ceil_f64;
  var _llvm_floor_f64=env._llvm_floor_f64;
  var _llvm_trap=env._llvm_trap;
  var _pthread_cond_init=env._pthread_cond_init;
  var _pthread_cond_signal=env._pthread_cond_signal;
  var _pthread_cond_timedwait=env._pthread_cond_timedwait;
  var _pthread_cond_wait=env._pthread_cond_wait;
  var _pthread_getspecific=env._pthread_getspecific;
  var _pthread_key_create=env._pthread_key_create;
  var _pthread_mutex_init=env._pthread_mutex_init;
  var _pthread_once=env._pthread_once;
  var _pthread_setspecific=env._pthread_setspecific;
  var flush_NO_FILESYSTEM=env.flush_NO_FILESYSTEM;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0$i = 0, $$095113 = 0, $$096$be = 0, $$1$lcssa = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $130 = 0, $132 = 0, $134 = 0, $136 = 0, $139 = 0, $14 = 0, $150 = 0, $151 = 0, $16 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $238 = 0, $24 = 0, $242 = 0, $247 = 0, $248 = 0, $251 = 0, $257 = 0, $26 = 0, $260 = 0, $265 = 0, $273 = 0, $28 = 0, $292 = 0, $30 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $373 = 0, $374 = 0, $38 = 0, $4 = 0, $40 = 0, $411 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $487 = 0, $491 = 0, $495 = 0, $498 = 0, $50 = 0, $504 = 0, $507 = 0, $508 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $6 = 0, $60 = 0, $604 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $686 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $div = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 15993
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15995
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15997
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15999
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16001
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16003
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16005
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16007
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 16009
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 16011
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 16013
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 16015
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 16017
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 16019
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 16021
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 16023
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 16025
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 16027
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 16029
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 16031
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 16033
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 16035
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 16037
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 16039
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 16041
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 16043
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 16045
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 16047
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 16049
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 16051
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 16053
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 16055
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 16057
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 16059
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 16061
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 16063
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 16065
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 16067
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 16069
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 16071
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 16073
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 16075
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 16077
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 16079
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 16081
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 16083
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 16085
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 16087
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 16089
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 16091
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 16093
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 16095
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 16097
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 16099
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 16101
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 16103
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 16105
 $114 = HEAP32[$0 + 228 >> 2] | 0; //@line 16107
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 16109
 $118 = HEAP32[$0 + 236 >> 2] | 0; //@line 16111
 $120 = HEAP32[$0 + 240 >> 2] | 0; //@line 16113
 $122 = HEAP32[$0 + 244 >> 2] | 0; //@line 16115
 $124 = HEAP8[$0 + 248 >> 0] | 0; //@line 16117
 $126 = HEAP8[$0 + 249 >> 0] | 0; //@line 16119
 $128 = HEAP32[$0 + 252 >> 2] | 0; //@line 16121
 $130 = HEAP8[$0 + 256 >> 0] | 0; //@line 16123
 $132 = HEAP32[$0 + 260 >> 2] | 0; //@line 16125
 $134 = HEAP32[$0 + 264 >> 2] | 0; //@line 16127
 $136 = HEAP32[$0 + 268 >> 2] | 0; //@line 16129
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 16131
 if (($AsyncRetVal & 7) == 7) {
  HEAP8[$44 >> 0] = HEAP8[$128 >> 0] | 0; //@line 16136
  HEAP8[$68 >> 0] = HEAP8[$64 >> 0] | 0; //@line 16138
  HEAP8[$80 >> 0] = HEAP8[$74 >> 0] | 0; //@line 16140
 }
 $238 = HEAP8[$46 >> 0] | 0; //@line 16142
 if (($238 & 255) > 4) {
  $div = ($238 & 255) / 5 | 0; //@line 16145
  $242 = (-128 - (HEAP8[$106 >> 0] | 0) & 255) + -1 | 0; //@line 16150
  $$095113 = 0; //@line 16151
  $248 = HEAP8[$110 >> 0] | 0; //@line 16151
  while (1) {
   $247 = $248 & 255; //@line 16153
   if (($242 | 0) > ($247 | 0)) {
    $251 = $248 + 2 << 24 >> 24; //@line 16157
    HEAP8[$92 + 4 + $247 >> 0] = 3; //@line 16161
    HEAP8[$110 >> 0] = $251; //@line 16162
    HEAP8[($248 + 1 & 255) + ($92 + 4) >> 0] = $AsyncRetVal; //@line 16163
    HEAP8[$116 >> 0] = 1; //@line 16164
    $$0$i = 0; //@line 16165
    $686 = $251; //@line 16165
   } else {
    $$0$i = -1e3; //@line 16167
    $686 = $248; //@line 16167
   }
   $$095113 = $$095113 + 1 << 24 >> 24; //@line 16169
   if (($$095113 & 255) >= ($div & 255)) {
    $$1$lcssa = $$0$i; //@line 16174
    break;
   } else {
    $248 = $686; //@line 16172
   }
  }
 } else {
  $$1$lcssa = $134; //@line 16179
 }
 $$0$be = $60 + 255 + ($238 & 255) & 255; //@line 16185
 $$096$be = $$1$lcssa; //@line 16185
 L13 : while (1) {
  if (($$0$be & 255) >= ($126 & 255)) {
   label = 36; //@line 16189
   break;
  }
  $139 = $$0$be + 1 << 24 >> 24; //@line 16193
  switch (HEAP8[$120 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 16198
    break L13;
    break;
   }
  case 5:
   {
    label = 17; //@line 16203
    break L13;
    break;
   }
  case 7:
   {
    label = 22; //@line 16208
    break L13;
    break;
   }
  case 9:
   {
    label = 27; //@line 16213
    break L13;
    break;
   }
  case 10:
   {
    label = 32; //@line 16218
    break L13;
    break;
   }
  case 2:
   {
    HEAP32[$62 >> 2] = 0; //@line 16223
    HEAP8[$54 >> 0] = HEAP8[$120 + ($139 & 255) >> 0] | 0; //@line 16228
    HEAP8[$38 >> 0] = HEAP8[$120 + ($$0$be + 2 & 255) >> 0] | 0; //@line 16233
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 16234
    continue L13;
    break;
   }
  case 4:
   {
    $257 = $$0$be + 2 << 24 >> 24; //@line 16239
    $260 = HEAP8[$120 + ($139 & 255) >> 0] | 0; //@line 16242
    HEAP8[$132 >> 0] = $260; //@line 16243
    HEAP16[$6 >> 1] = 1 << ($260 & 255); //@line 16247
    $265 = HEAP8[$110 >> 0] | 0; //@line 16249
    if (($265 & 255) >= (-128 - (HEAP8[$106 >> 0] | 0) & 255)) {
     $$0$be = $257; //@line 16253
     $$096$be = -1e3; //@line 16253
     continue L13;
    }
    HEAP8[$110 >> 0] = $265 + 1 << 24 >> 24; //@line 16259
    HEAP8[($265 & 255) + ($92 + 4) >> 0] = 4; //@line 16260
    HEAP8[$116 >> 0] = 1; //@line 16261
    $$0$be = $257; //@line 16262
    $$096$be = 0; //@line 16262
    continue L13;
    break;
   }
  case 6:
   {
    $373 = HEAP8[$110 >> 0] | 0; //@line 16268
    $374 = $373 & 255; //@line 16269
    if (((-128 - (HEAP8[$106 >> 0] | 0) & 255) + -2 | 0) <= ($374 | 0)) {
     $$0$be = $139; //@line 16275
     $$096$be = -1e3; //@line 16275
     continue L13;
    }
    HEAP8[$92 + 4 + $374 >> 0] = 6; //@line 16280
    HEAP8[($373 + 1 & 255) + ($92 + 4) >> 0] = -1; //@line 16284
    HEAP8[$110 >> 0] = $373 + 3 << 24 >> 24; //@line 16286
    HEAP8[($373 + 2 & 255) + ($92 + 4) >> 0] = $130; //@line 16289
    HEAP8[$116 >> 0] = 1; //@line 16290
    $$0$be = $139; //@line 16291
    $$096$be = 0; //@line 16291
    continue L13;
    break;
   }
  case 8:
   {
    $487 = $$0$be + 2 << 24 >> 24; //@line 16296
    $491 = HEAP8[$120 + ($139 & 255) >> 0] & 15; //@line 16300
    $495 = ($491 + ($491 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 16305
    HEAP32[$36 >> 2] = $495; //@line 16306
    HEAP32[$24 >> 2] = $495 + 1e3; //@line 16308
    $498 = HEAP8[$110 >> 0] | 0; //@line 16310
    if (($498 & 255) >= (-128 - (HEAP8[$106 >> 0] | 0) & 255)) {
     $$0$be = $487; //@line 16314
     $$096$be = -1e3; //@line 16314
     continue L13;
    }
    HEAP8[$110 >> 0] = $498 + 1 << 24 >> 24; //@line 16320
    HEAP8[($498 & 255) + ($92 + 4) >> 0] = 8; //@line 16321
    HEAP8[$94 >> 0] = 1; //@line 16322
    HEAP8[$116 >> 0] = 1; //@line 16323
    $$0$be = $487; //@line 16324
    $$096$be = 0; //@line 16324
    continue L13;
    break;
   }
  default:
   {
    $$0$be = $139; //@line 16329
    $$096$be = -1013; //@line 16329
    continue L13;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$128 >> 0] = 0; //@line 16335
  HEAP8[$64 >> 0] = 0; //@line 16336
  HEAP8[$74 >> 0] = 0; //@line 16337
  HEAP8[$46 >> 0] = 0; //@line 16338
  $150 = $139 & 255; //@line 16339
  $151 = $150 + -1 | 0; //@line 16340
  HEAP32[$26 >> 2] = $120 + $151; //@line 16342
  HEAP8[$10 >> 0] = $88 - $151; //@line 16345
  HEAP8[$8 >> 0] = HEAP8[$4 >> 0] | 0; //@line 16347
  HEAP8[$32 >> 0] = HEAP8[$20 >> 0] | 0; //@line 16349
  HEAP8[$52 >> 0] = HEAP8[$44 >> 0] | 0; //@line 16351
  HEAP8[$72 >> 0] = HEAP8[$68 >> 0] | 0; //@line 16353
  HEAP8[$90 >> 0] = HEAP8[$80 >> 0] | 0; //@line 16355
  $162 = HEAP32[(HEAP32[$98 >> 2] | 0) + 36 >> 2] | 0; //@line 16358
  $ReallocAsyncCtx = _emscripten_realloc_async_context(272) | 0; //@line 16359
  $163 = FUNCTION_TABLE_iiiiiii[$162 & 3]($136, $122, $128, $64, $74, $46) | 0; //@line 16360
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 487; //@line 16363
   $164 = $ReallocAsyncCtx + 4 | 0; //@line 16364
   HEAP32[$164 >> 2] = $2; //@line 16365
   $165 = $ReallocAsyncCtx + 8 | 0; //@line 16366
   HEAP32[$165 >> 2] = $4; //@line 16367
   $166 = $ReallocAsyncCtx + 12 | 0; //@line 16368
   HEAP32[$166 >> 2] = $6; //@line 16369
   $167 = $ReallocAsyncCtx + 16 | 0; //@line 16370
   HEAP32[$167 >> 2] = $8; //@line 16371
   $168 = $ReallocAsyncCtx + 20 | 0; //@line 16372
   HEAP32[$168 >> 2] = $10; //@line 16373
   $169 = $ReallocAsyncCtx + 24 | 0; //@line 16374
   HEAP32[$169 >> 2] = $12; //@line 16375
   $170 = $ReallocAsyncCtx + 28 | 0; //@line 16376
   HEAP32[$170 >> 2] = $14; //@line 16377
   $171 = $ReallocAsyncCtx + 32 | 0; //@line 16378
   HEAP32[$171 >> 2] = $16; //@line 16379
   $172 = $ReallocAsyncCtx + 36 | 0; //@line 16380
   HEAP32[$172 >> 2] = $18; //@line 16381
   $173 = $ReallocAsyncCtx + 40 | 0; //@line 16382
   HEAP32[$173 >> 2] = $20; //@line 16383
   $174 = $ReallocAsyncCtx + 44 | 0; //@line 16384
   HEAP32[$174 >> 2] = $22; //@line 16385
   $175 = $ReallocAsyncCtx + 48 | 0; //@line 16386
   HEAP32[$175 >> 2] = $24; //@line 16387
   $176 = $ReallocAsyncCtx + 52 | 0; //@line 16388
   HEAP32[$176 >> 2] = $26; //@line 16389
   $177 = $ReallocAsyncCtx + 56 | 0; //@line 16390
   HEAP32[$177 >> 2] = $28; //@line 16391
   $178 = $ReallocAsyncCtx + 60 | 0; //@line 16392
   HEAP32[$178 >> 2] = $30; //@line 16393
   $179 = $ReallocAsyncCtx + 64 | 0; //@line 16394
   HEAP32[$179 >> 2] = $32; //@line 16395
   $180 = $ReallocAsyncCtx + 68 | 0; //@line 16396
   HEAP32[$180 >> 2] = $34; //@line 16397
   $181 = $ReallocAsyncCtx + 72 | 0; //@line 16398
   HEAP32[$181 >> 2] = $36; //@line 16399
   $182 = $ReallocAsyncCtx + 76 | 0; //@line 16400
   HEAP32[$182 >> 2] = $38; //@line 16401
   $183 = $ReallocAsyncCtx + 80 | 0; //@line 16402
   HEAP32[$183 >> 2] = $40; //@line 16403
   $184 = $ReallocAsyncCtx + 84 | 0; //@line 16404
   HEAP32[$184 >> 2] = $42; //@line 16405
   $185 = $ReallocAsyncCtx + 88 | 0; //@line 16406
   HEAP32[$185 >> 2] = $44; //@line 16407
   $186 = $ReallocAsyncCtx + 92 | 0; //@line 16408
   HEAP32[$186 >> 2] = $46; //@line 16409
   $187 = $ReallocAsyncCtx + 96 | 0; //@line 16410
   HEAP32[$187 >> 2] = $48; //@line 16411
   $188 = $ReallocAsyncCtx + 100 | 0; //@line 16412
   HEAP32[$188 >> 2] = $50; //@line 16413
   $189 = $ReallocAsyncCtx + 104 | 0; //@line 16414
   HEAP32[$189 >> 2] = $52; //@line 16415
   $190 = $ReallocAsyncCtx + 108 | 0; //@line 16416
   HEAP32[$190 >> 2] = $54; //@line 16417
   $191 = $ReallocAsyncCtx + 112 | 0; //@line 16418
   HEAP32[$191 >> 2] = $56; //@line 16419
   $192 = $ReallocAsyncCtx + 116 | 0; //@line 16420
   HEAP32[$192 >> 2] = $58; //@line 16421
   $193 = $ReallocAsyncCtx + 120 | 0; //@line 16422
   HEAP32[$193 >> 2] = $150; //@line 16423
   $194 = $ReallocAsyncCtx + 124 | 0; //@line 16424
   HEAP32[$194 >> 2] = $62; //@line 16425
   $195 = $ReallocAsyncCtx + 128 | 0; //@line 16426
   HEAP32[$195 >> 2] = $64; //@line 16427
   $196 = $ReallocAsyncCtx + 132 | 0; //@line 16428
   HEAP32[$196 >> 2] = $66; //@line 16429
   $197 = $ReallocAsyncCtx + 136 | 0; //@line 16430
   HEAP32[$197 >> 2] = $68; //@line 16431
   $198 = $ReallocAsyncCtx + 140 | 0; //@line 16432
   HEAP32[$198 >> 2] = $70; //@line 16433
   $199 = $ReallocAsyncCtx + 144 | 0; //@line 16434
   HEAP32[$199 >> 2] = $72; //@line 16435
   $200 = $ReallocAsyncCtx + 148 | 0; //@line 16436
   HEAP32[$200 >> 2] = $74; //@line 16437
   $201 = $ReallocAsyncCtx + 152 | 0; //@line 16438
   HEAP32[$201 >> 2] = $76; //@line 16439
   $202 = $ReallocAsyncCtx + 156 | 0; //@line 16440
   HEAP32[$202 >> 2] = $78; //@line 16441
   $203 = $ReallocAsyncCtx + 160 | 0; //@line 16442
   HEAP32[$203 >> 2] = $80; //@line 16443
   $204 = $ReallocAsyncCtx + 164 | 0; //@line 16444
   HEAP32[$204 >> 2] = $82; //@line 16445
   $205 = $ReallocAsyncCtx + 168 | 0; //@line 16446
   HEAP32[$205 >> 2] = $84; //@line 16447
   $206 = $ReallocAsyncCtx + 172 | 0; //@line 16448
   HEAP32[$206 >> 2] = $86; //@line 16449
   $207 = $ReallocAsyncCtx + 176 | 0; //@line 16450
   HEAP32[$207 >> 2] = $88; //@line 16451
   $208 = $ReallocAsyncCtx + 180 | 0; //@line 16452
   HEAP32[$208 >> 2] = $90; //@line 16453
   $209 = $ReallocAsyncCtx + 184 | 0; //@line 16454
   HEAP32[$209 >> 2] = $92; //@line 16455
   $210 = $ReallocAsyncCtx + 188 | 0; //@line 16456
   HEAP32[$210 >> 2] = $94; //@line 16457
   $211 = $ReallocAsyncCtx + 192 | 0; //@line 16458
   HEAP32[$211 >> 2] = $96; //@line 16459
   $212 = $ReallocAsyncCtx + 196 | 0; //@line 16460
   HEAP32[$212 >> 2] = $98; //@line 16461
   $213 = $ReallocAsyncCtx + 200 | 0; //@line 16462
   HEAP32[$213 >> 2] = $100; //@line 16463
   $214 = $ReallocAsyncCtx + 204 | 0; //@line 16464
   HEAP32[$214 >> 2] = $102; //@line 16465
   $215 = $ReallocAsyncCtx + 208 | 0; //@line 16466
   HEAP32[$215 >> 2] = $104; //@line 16467
   $216 = $ReallocAsyncCtx + 212 | 0; //@line 16468
   HEAP32[$216 >> 2] = $106; //@line 16469
   $217 = $ReallocAsyncCtx + 216 | 0; //@line 16470
   HEAP32[$217 >> 2] = $108; //@line 16471
   $218 = $ReallocAsyncCtx + 220 | 0; //@line 16472
   HEAP32[$218 >> 2] = $110; //@line 16473
   $219 = $ReallocAsyncCtx + 224 | 0; //@line 16474
   HEAP32[$219 >> 2] = $112; //@line 16475
   $220 = $ReallocAsyncCtx + 228 | 0; //@line 16476
   HEAP32[$220 >> 2] = $114; //@line 16477
   $221 = $ReallocAsyncCtx + 232 | 0; //@line 16478
   HEAP32[$221 >> 2] = $116; //@line 16479
   $222 = $ReallocAsyncCtx + 236 | 0; //@line 16480
   HEAP32[$222 >> 2] = $118; //@line 16481
   $223 = $ReallocAsyncCtx + 240 | 0; //@line 16482
   HEAP32[$223 >> 2] = $120; //@line 16483
   $224 = $ReallocAsyncCtx + 244 | 0; //@line 16484
   HEAP32[$224 >> 2] = $122; //@line 16485
   $225 = $ReallocAsyncCtx + 248 | 0; //@line 16486
   HEAP8[$225 >> 0] = $124; //@line 16487
   $226 = $ReallocAsyncCtx + 249 | 0; //@line 16488
   HEAP8[$226 >> 0] = $126; //@line 16489
   $227 = $ReallocAsyncCtx + 252 | 0; //@line 16490
   HEAP32[$227 >> 2] = $128; //@line 16491
   $228 = $ReallocAsyncCtx + 256 | 0; //@line 16492
   HEAP8[$228 >> 0] = $130; //@line 16493
   $229 = $ReallocAsyncCtx + 260 | 0; //@line 16494
   HEAP32[$229 >> 2] = $132; //@line 16495
   $230 = $ReallocAsyncCtx + 264 | 0; //@line 16496
   HEAP32[$230 >> 2] = $$096$be; //@line 16497
   $231 = $ReallocAsyncCtx + 268 | 0; //@line 16498
   HEAP32[$231 >> 2] = $136; //@line 16499
   sp = STACKTOP; //@line 16500
   return;
  }
  HEAP8[___async_retval >> 0] = $163; //@line 16504
  ___async_unwind = 0; //@line 16505
  HEAP32[$ReallocAsyncCtx >> 2] = 487; //@line 16506
  $164 = $ReallocAsyncCtx + 4 | 0; //@line 16507
  HEAP32[$164 >> 2] = $2; //@line 16508
  $165 = $ReallocAsyncCtx + 8 | 0; //@line 16509
  HEAP32[$165 >> 2] = $4; //@line 16510
  $166 = $ReallocAsyncCtx + 12 | 0; //@line 16511
  HEAP32[$166 >> 2] = $6; //@line 16512
  $167 = $ReallocAsyncCtx + 16 | 0; //@line 16513
  HEAP32[$167 >> 2] = $8; //@line 16514
  $168 = $ReallocAsyncCtx + 20 | 0; //@line 16515
  HEAP32[$168 >> 2] = $10; //@line 16516
  $169 = $ReallocAsyncCtx + 24 | 0; //@line 16517
  HEAP32[$169 >> 2] = $12; //@line 16518
  $170 = $ReallocAsyncCtx + 28 | 0; //@line 16519
  HEAP32[$170 >> 2] = $14; //@line 16520
  $171 = $ReallocAsyncCtx + 32 | 0; //@line 16521
  HEAP32[$171 >> 2] = $16; //@line 16522
  $172 = $ReallocAsyncCtx + 36 | 0; //@line 16523
  HEAP32[$172 >> 2] = $18; //@line 16524
  $173 = $ReallocAsyncCtx + 40 | 0; //@line 16525
  HEAP32[$173 >> 2] = $20; //@line 16526
  $174 = $ReallocAsyncCtx + 44 | 0; //@line 16527
  HEAP32[$174 >> 2] = $22; //@line 16528
  $175 = $ReallocAsyncCtx + 48 | 0; //@line 16529
  HEAP32[$175 >> 2] = $24; //@line 16530
  $176 = $ReallocAsyncCtx + 52 | 0; //@line 16531
  HEAP32[$176 >> 2] = $26; //@line 16532
  $177 = $ReallocAsyncCtx + 56 | 0; //@line 16533
  HEAP32[$177 >> 2] = $28; //@line 16534
  $178 = $ReallocAsyncCtx + 60 | 0; //@line 16535
  HEAP32[$178 >> 2] = $30; //@line 16536
  $179 = $ReallocAsyncCtx + 64 | 0; //@line 16537
  HEAP32[$179 >> 2] = $32; //@line 16538
  $180 = $ReallocAsyncCtx + 68 | 0; //@line 16539
  HEAP32[$180 >> 2] = $34; //@line 16540
  $181 = $ReallocAsyncCtx + 72 | 0; //@line 16541
  HEAP32[$181 >> 2] = $36; //@line 16542
  $182 = $ReallocAsyncCtx + 76 | 0; //@line 16543
  HEAP32[$182 >> 2] = $38; //@line 16544
  $183 = $ReallocAsyncCtx + 80 | 0; //@line 16545
  HEAP32[$183 >> 2] = $40; //@line 16546
  $184 = $ReallocAsyncCtx + 84 | 0; //@line 16547
  HEAP32[$184 >> 2] = $42; //@line 16548
  $185 = $ReallocAsyncCtx + 88 | 0; //@line 16549
  HEAP32[$185 >> 2] = $44; //@line 16550
  $186 = $ReallocAsyncCtx + 92 | 0; //@line 16551
  HEAP32[$186 >> 2] = $46; //@line 16552
  $187 = $ReallocAsyncCtx + 96 | 0; //@line 16553
  HEAP32[$187 >> 2] = $48; //@line 16554
  $188 = $ReallocAsyncCtx + 100 | 0; //@line 16555
  HEAP32[$188 >> 2] = $50; //@line 16556
  $189 = $ReallocAsyncCtx + 104 | 0; //@line 16557
  HEAP32[$189 >> 2] = $52; //@line 16558
  $190 = $ReallocAsyncCtx + 108 | 0; //@line 16559
  HEAP32[$190 >> 2] = $54; //@line 16560
  $191 = $ReallocAsyncCtx + 112 | 0; //@line 16561
  HEAP32[$191 >> 2] = $56; //@line 16562
  $192 = $ReallocAsyncCtx + 116 | 0; //@line 16563
  HEAP32[$192 >> 2] = $58; //@line 16564
  $193 = $ReallocAsyncCtx + 120 | 0; //@line 16565
  HEAP32[$193 >> 2] = $150; //@line 16566
  $194 = $ReallocAsyncCtx + 124 | 0; //@line 16567
  HEAP32[$194 >> 2] = $62; //@line 16568
  $195 = $ReallocAsyncCtx + 128 | 0; //@line 16569
  HEAP32[$195 >> 2] = $64; //@line 16570
  $196 = $ReallocAsyncCtx + 132 | 0; //@line 16571
  HEAP32[$196 >> 2] = $66; //@line 16572
  $197 = $ReallocAsyncCtx + 136 | 0; //@line 16573
  HEAP32[$197 >> 2] = $68; //@line 16574
  $198 = $ReallocAsyncCtx + 140 | 0; //@line 16575
  HEAP32[$198 >> 2] = $70; //@line 16576
  $199 = $ReallocAsyncCtx + 144 | 0; //@line 16577
  HEAP32[$199 >> 2] = $72; //@line 16578
  $200 = $ReallocAsyncCtx + 148 | 0; //@line 16579
  HEAP32[$200 >> 2] = $74; //@line 16580
  $201 = $ReallocAsyncCtx + 152 | 0; //@line 16581
  HEAP32[$201 >> 2] = $76; //@line 16582
  $202 = $ReallocAsyncCtx + 156 | 0; //@line 16583
  HEAP32[$202 >> 2] = $78; //@line 16584
  $203 = $ReallocAsyncCtx + 160 | 0; //@line 16585
  HEAP32[$203 >> 2] = $80; //@line 16586
  $204 = $ReallocAsyncCtx + 164 | 0; //@line 16587
  HEAP32[$204 >> 2] = $82; //@line 16588
  $205 = $ReallocAsyncCtx + 168 | 0; //@line 16589
  HEAP32[$205 >> 2] = $84; //@line 16590
  $206 = $ReallocAsyncCtx + 172 | 0; //@line 16591
  HEAP32[$206 >> 2] = $86; //@line 16592
  $207 = $ReallocAsyncCtx + 176 | 0; //@line 16593
  HEAP32[$207 >> 2] = $88; //@line 16594
  $208 = $ReallocAsyncCtx + 180 | 0; //@line 16595
  HEAP32[$208 >> 2] = $90; //@line 16596
  $209 = $ReallocAsyncCtx + 184 | 0; //@line 16597
  HEAP32[$209 >> 2] = $92; //@line 16598
  $210 = $ReallocAsyncCtx + 188 | 0; //@line 16599
  HEAP32[$210 >> 2] = $94; //@line 16600
  $211 = $ReallocAsyncCtx + 192 | 0; //@line 16601
  HEAP32[$211 >> 2] = $96; //@line 16602
  $212 = $ReallocAsyncCtx + 196 | 0; //@line 16603
  HEAP32[$212 >> 2] = $98; //@line 16604
  $213 = $ReallocAsyncCtx + 200 | 0; //@line 16605
  HEAP32[$213 >> 2] = $100; //@line 16606
  $214 = $ReallocAsyncCtx + 204 | 0; //@line 16607
  HEAP32[$214 >> 2] = $102; //@line 16608
  $215 = $ReallocAsyncCtx + 208 | 0; //@line 16609
  HEAP32[$215 >> 2] = $104; //@line 16610
  $216 = $ReallocAsyncCtx + 212 | 0; //@line 16611
  HEAP32[$216 >> 2] = $106; //@line 16612
  $217 = $ReallocAsyncCtx + 216 | 0; //@line 16613
  HEAP32[$217 >> 2] = $108; //@line 16614
  $218 = $ReallocAsyncCtx + 220 | 0; //@line 16615
  HEAP32[$218 >> 2] = $110; //@line 16616
  $219 = $ReallocAsyncCtx + 224 | 0; //@line 16617
  HEAP32[$219 >> 2] = $112; //@line 16618
  $220 = $ReallocAsyncCtx + 228 | 0; //@line 16619
  HEAP32[$220 >> 2] = $114; //@line 16620
  $221 = $ReallocAsyncCtx + 232 | 0; //@line 16621
  HEAP32[$221 >> 2] = $116; //@line 16622
  $222 = $ReallocAsyncCtx + 236 | 0; //@line 16623
  HEAP32[$222 >> 2] = $118; //@line 16624
  $223 = $ReallocAsyncCtx + 240 | 0; //@line 16625
  HEAP32[$223 >> 2] = $120; //@line 16626
  $224 = $ReallocAsyncCtx + 244 | 0; //@line 16627
  HEAP32[$224 >> 2] = $122; //@line 16628
  $225 = $ReallocAsyncCtx + 248 | 0; //@line 16629
  HEAP8[$225 >> 0] = $124; //@line 16630
  $226 = $ReallocAsyncCtx + 249 | 0; //@line 16631
  HEAP8[$226 >> 0] = $126; //@line 16632
  $227 = $ReallocAsyncCtx + 252 | 0; //@line 16633
  HEAP32[$227 >> 2] = $128; //@line 16634
  $228 = $ReallocAsyncCtx + 256 | 0; //@line 16635
  HEAP8[$228 >> 0] = $130; //@line 16636
  $229 = $ReallocAsyncCtx + 260 | 0; //@line 16637
  HEAP32[$229 >> 2] = $132; //@line 16638
  $230 = $ReallocAsyncCtx + 264 | 0; //@line 16639
  HEAP32[$230 >> 2] = $$096$be; //@line 16640
  $231 = $ReallocAsyncCtx + 268 | 0; //@line 16641
  HEAP32[$231 >> 2] = $136; //@line 16642
  sp = STACKTOP; //@line 16643
  return;
 } else if ((label | 0) == 17) {
  $273 = HEAP8[$120 + ($139 & 255) >> 0] | 0; //@line 16649
  HEAP8[$28 >> 0] = ($273 & 255) >>> 4 & 7; //@line 16654
  HEAP8[$18 >> 0] = $273 & 15; //@line 16656
  $292 = $$0$be + 5 << 24 >> 24; //@line 16670
  HEAP32[$30 >> 2] = (HEAPU8[$120 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$120 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$120 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 16678
  $302 = HEAP32[(HEAP32[$48 >> 2] | 0) + 40 >> 2] | 0; //@line 16681
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(268) | 0; //@line 16682
  $303 = FUNCTION_TABLE_iii[$302 & 31]($136, $40) | 0; //@line 16683
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 488; //@line 16686
   $304 = $ReallocAsyncCtx2 + 4 | 0; //@line 16687
   HEAP32[$304 >> 2] = $2; //@line 16688
   $305 = $ReallocAsyncCtx2 + 8 | 0; //@line 16689
   HEAP32[$305 >> 2] = $4; //@line 16690
   $306 = $ReallocAsyncCtx2 + 12 | 0; //@line 16691
   HEAP32[$306 >> 2] = $6; //@line 16692
   $307 = $ReallocAsyncCtx2 + 16 | 0; //@line 16693
   HEAP32[$307 >> 2] = $8; //@line 16694
   $308 = $ReallocAsyncCtx2 + 20 | 0; //@line 16695
   HEAP32[$308 >> 2] = $10; //@line 16696
   $309 = $ReallocAsyncCtx2 + 24 | 0; //@line 16697
   HEAP32[$309 >> 2] = $12; //@line 16698
   $310 = $ReallocAsyncCtx2 + 28 | 0; //@line 16699
   HEAP32[$310 >> 2] = $14; //@line 16700
   $311 = $ReallocAsyncCtx2 + 32 | 0; //@line 16701
   HEAP32[$311 >> 2] = $16; //@line 16702
   $312 = $ReallocAsyncCtx2 + 36 | 0; //@line 16703
   HEAP32[$312 >> 2] = $18; //@line 16704
   $313 = $ReallocAsyncCtx2 + 40 | 0; //@line 16705
   HEAP32[$313 >> 2] = $20; //@line 16706
   $314 = $ReallocAsyncCtx2 + 44 | 0; //@line 16707
   HEAP32[$314 >> 2] = $22; //@line 16708
   $315 = $ReallocAsyncCtx2 + 48 | 0; //@line 16709
   HEAP32[$315 >> 2] = $24; //@line 16710
   $316 = $ReallocAsyncCtx2 + 52 | 0; //@line 16711
   HEAP32[$316 >> 2] = $26; //@line 16712
   $317 = $ReallocAsyncCtx2 + 56 | 0; //@line 16713
   HEAP32[$317 >> 2] = $28; //@line 16714
   $318 = $ReallocAsyncCtx2 + 60 | 0; //@line 16715
   HEAP32[$318 >> 2] = $30; //@line 16716
   $319 = $ReallocAsyncCtx2 + 64 | 0; //@line 16717
   HEAP32[$319 >> 2] = $32; //@line 16718
   $320 = $ReallocAsyncCtx2 + 68 | 0; //@line 16719
   HEAP32[$320 >> 2] = $34; //@line 16720
   $321 = $ReallocAsyncCtx2 + 72 | 0; //@line 16721
   HEAP32[$321 >> 2] = $36; //@line 16722
   $322 = $ReallocAsyncCtx2 + 76 | 0; //@line 16723
   HEAP32[$322 >> 2] = $38; //@line 16724
   $323 = $ReallocAsyncCtx2 + 80 | 0; //@line 16725
   HEAP32[$323 >> 2] = $40; //@line 16726
   $324 = $ReallocAsyncCtx2 + 84 | 0; //@line 16727
   HEAP32[$324 >> 2] = $42; //@line 16728
   $325 = $ReallocAsyncCtx2 + 88 | 0; //@line 16729
   HEAP32[$325 >> 2] = $44; //@line 16730
   $326 = $ReallocAsyncCtx2 + 92 | 0; //@line 16731
   HEAP32[$326 >> 2] = $46; //@line 16732
   $327 = $ReallocAsyncCtx2 + 96 | 0; //@line 16733
   HEAP8[$327 >> 0] = $292; //@line 16734
   $328 = $ReallocAsyncCtx2 + 100 | 0; //@line 16735
   HEAP32[$328 >> 2] = $50; //@line 16736
   $329 = $ReallocAsyncCtx2 + 104 | 0; //@line 16737
   HEAP32[$329 >> 2] = $52; //@line 16738
   $330 = $ReallocAsyncCtx2 + 108 | 0; //@line 16739
   HEAP32[$330 >> 2] = $54; //@line 16740
   $331 = $ReallocAsyncCtx2 + 112 | 0; //@line 16741
   HEAP32[$331 >> 2] = $56; //@line 16742
   $332 = $ReallocAsyncCtx2 + 116 | 0; //@line 16743
   HEAP32[$332 >> 2] = $48; //@line 16744
   $333 = $ReallocAsyncCtx2 + 120 | 0; //@line 16745
   HEAP32[$333 >> 2] = $58; //@line 16746
   $334 = $ReallocAsyncCtx2 + 124 | 0; //@line 16747
   HEAP32[$334 >> 2] = $62; //@line 16748
   $335 = $ReallocAsyncCtx2 + 128 | 0; //@line 16749
   HEAP32[$335 >> 2] = $64; //@line 16750
   $336 = $ReallocAsyncCtx2 + 132 | 0; //@line 16751
   HEAP32[$336 >> 2] = $66; //@line 16752
   $337 = $ReallocAsyncCtx2 + 136 | 0; //@line 16753
   HEAP32[$337 >> 2] = $68; //@line 16754
   $338 = $ReallocAsyncCtx2 + 140 | 0; //@line 16755
   HEAP32[$338 >> 2] = $70; //@line 16756
   $339 = $ReallocAsyncCtx2 + 144 | 0; //@line 16757
   HEAP32[$339 >> 2] = $72; //@line 16758
   $340 = $ReallocAsyncCtx2 + 148 | 0; //@line 16759
   HEAP32[$340 >> 2] = $74; //@line 16760
   $341 = $ReallocAsyncCtx2 + 152 | 0; //@line 16761
   HEAP32[$341 >> 2] = $76; //@line 16762
   $342 = $ReallocAsyncCtx2 + 156 | 0; //@line 16763
   HEAP32[$342 >> 2] = $78; //@line 16764
   $343 = $ReallocAsyncCtx2 + 160 | 0; //@line 16765
   HEAP32[$343 >> 2] = $80; //@line 16766
   $344 = $ReallocAsyncCtx2 + 164 | 0; //@line 16767
   HEAP32[$344 >> 2] = $82; //@line 16768
   $345 = $ReallocAsyncCtx2 + 168 | 0; //@line 16769
   HEAP32[$345 >> 2] = $84; //@line 16770
   $346 = $ReallocAsyncCtx2 + 172 | 0; //@line 16771
   HEAP32[$346 >> 2] = $86; //@line 16772
   $347 = $ReallocAsyncCtx2 + 176 | 0; //@line 16773
   HEAP32[$347 >> 2] = $88; //@line 16774
   $348 = $ReallocAsyncCtx2 + 180 | 0; //@line 16775
   HEAP32[$348 >> 2] = $90; //@line 16776
   $349 = $ReallocAsyncCtx2 + 184 | 0; //@line 16777
   HEAP32[$349 >> 2] = $92; //@line 16778
   $350 = $ReallocAsyncCtx2 + 188 | 0; //@line 16779
   HEAP32[$350 >> 2] = $94; //@line 16780
   $351 = $ReallocAsyncCtx2 + 192 | 0; //@line 16781
   HEAP32[$351 >> 2] = $96; //@line 16782
   $352 = $ReallocAsyncCtx2 + 196 | 0; //@line 16783
   HEAP32[$352 >> 2] = $98; //@line 16784
   $353 = $ReallocAsyncCtx2 + 200 | 0; //@line 16785
   HEAP32[$353 >> 2] = $100; //@line 16786
   $354 = $ReallocAsyncCtx2 + 204 | 0; //@line 16787
   HEAP32[$354 >> 2] = $102; //@line 16788
   $355 = $ReallocAsyncCtx2 + 208 | 0; //@line 16789
   HEAP32[$355 >> 2] = $104; //@line 16790
   $356 = $ReallocAsyncCtx2 + 212 | 0; //@line 16791
   HEAP32[$356 >> 2] = $106; //@line 16792
   $357 = $ReallocAsyncCtx2 + 216 | 0; //@line 16793
   HEAP32[$357 >> 2] = $108; //@line 16794
   $358 = $ReallocAsyncCtx2 + 220 | 0; //@line 16795
   HEAP32[$358 >> 2] = $110; //@line 16796
   $359 = $ReallocAsyncCtx2 + 224 | 0; //@line 16797
   HEAP32[$359 >> 2] = $112; //@line 16798
   $360 = $ReallocAsyncCtx2 + 228 | 0; //@line 16799
   HEAP32[$360 >> 2] = $114; //@line 16800
   $361 = $ReallocAsyncCtx2 + 232 | 0; //@line 16801
   HEAP32[$361 >> 2] = $116; //@line 16802
   $362 = $ReallocAsyncCtx2 + 236 | 0; //@line 16803
   HEAP32[$362 >> 2] = $118; //@line 16804
   $363 = $ReallocAsyncCtx2 + 240 | 0; //@line 16805
   HEAP32[$363 >> 2] = $120; //@line 16806
   $364 = $ReallocAsyncCtx2 + 244 | 0; //@line 16807
   HEAP32[$364 >> 2] = $122; //@line 16808
   $365 = $ReallocAsyncCtx2 + 248 | 0; //@line 16809
   HEAP8[$365 >> 0] = $124; //@line 16810
   $366 = $ReallocAsyncCtx2 + 249 | 0; //@line 16811
   HEAP8[$366 >> 0] = $126; //@line 16812
   $367 = $ReallocAsyncCtx2 + 252 | 0; //@line 16813
   HEAP32[$367 >> 2] = $128; //@line 16814
   $368 = $ReallocAsyncCtx2 + 256 | 0; //@line 16815
   HEAP8[$368 >> 0] = $130; //@line 16816
   $369 = $ReallocAsyncCtx2 + 260 | 0; //@line 16817
   HEAP32[$369 >> 2] = $132; //@line 16818
   $370 = $ReallocAsyncCtx2 + 264 | 0; //@line 16819
   HEAP32[$370 >> 2] = $136; //@line 16820
   sp = STACKTOP; //@line 16821
   return;
  }
  HEAP8[___async_retval >> 0] = $303; //@line 16825
  ___async_unwind = 0; //@line 16826
  HEAP32[$ReallocAsyncCtx2 >> 2] = 488; //@line 16827
  $304 = $ReallocAsyncCtx2 + 4 | 0; //@line 16828
  HEAP32[$304 >> 2] = $2; //@line 16829
  $305 = $ReallocAsyncCtx2 + 8 | 0; //@line 16830
  HEAP32[$305 >> 2] = $4; //@line 16831
  $306 = $ReallocAsyncCtx2 + 12 | 0; //@line 16832
  HEAP32[$306 >> 2] = $6; //@line 16833
  $307 = $ReallocAsyncCtx2 + 16 | 0; //@line 16834
  HEAP32[$307 >> 2] = $8; //@line 16835
  $308 = $ReallocAsyncCtx2 + 20 | 0; //@line 16836
  HEAP32[$308 >> 2] = $10; //@line 16837
  $309 = $ReallocAsyncCtx2 + 24 | 0; //@line 16838
  HEAP32[$309 >> 2] = $12; //@line 16839
  $310 = $ReallocAsyncCtx2 + 28 | 0; //@line 16840
  HEAP32[$310 >> 2] = $14; //@line 16841
  $311 = $ReallocAsyncCtx2 + 32 | 0; //@line 16842
  HEAP32[$311 >> 2] = $16; //@line 16843
  $312 = $ReallocAsyncCtx2 + 36 | 0; //@line 16844
  HEAP32[$312 >> 2] = $18; //@line 16845
  $313 = $ReallocAsyncCtx2 + 40 | 0; //@line 16846
  HEAP32[$313 >> 2] = $20; //@line 16847
  $314 = $ReallocAsyncCtx2 + 44 | 0; //@line 16848
  HEAP32[$314 >> 2] = $22; //@line 16849
  $315 = $ReallocAsyncCtx2 + 48 | 0; //@line 16850
  HEAP32[$315 >> 2] = $24; //@line 16851
  $316 = $ReallocAsyncCtx2 + 52 | 0; //@line 16852
  HEAP32[$316 >> 2] = $26; //@line 16853
  $317 = $ReallocAsyncCtx2 + 56 | 0; //@line 16854
  HEAP32[$317 >> 2] = $28; //@line 16855
  $318 = $ReallocAsyncCtx2 + 60 | 0; //@line 16856
  HEAP32[$318 >> 2] = $30; //@line 16857
  $319 = $ReallocAsyncCtx2 + 64 | 0; //@line 16858
  HEAP32[$319 >> 2] = $32; //@line 16859
  $320 = $ReallocAsyncCtx2 + 68 | 0; //@line 16860
  HEAP32[$320 >> 2] = $34; //@line 16861
  $321 = $ReallocAsyncCtx2 + 72 | 0; //@line 16862
  HEAP32[$321 >> 2] = $36; //@line 16863
  $322 = $ReallocAsyncCtx2 + 76 | 0; //@line 16864
  HEAP32[$322 >> 2] = $38; //@line 16865
  $323 = $ReallocAsyncCtx2 + 80 | 0; //@line 16866
  HEAP32[$323 >> 2] = $40; //@line 16867
  $324 = $ReallocAsyncCtx2 + 84 | 0; //@line 16868
  HEAP32[$324 >> 2] = $42; //@line 16869
  $325 = $ReallocAsyncCtx2 + 88 | 0; //@line 16870
  HEAP32[$325 >> 2] = $44; //@line 16871
  $326 = $ReallocAsyncCtx2 + 92 | 0; //@line 16872
  HEAP32[$326 >> 2] = $46; //@line 16873
  $327 = $ReallocAsyncCtx2 + 96 | 0; //@line 16874
  HEAP8[$327 >> 0] = $292; //@line 16875
  $328 = $ReallocAsyncCtx2 + 100 | 0; //@line 16876
  HEAP32[$328 >> 2] = $50; //@line 16877
  $329 = $ReallocAsyncCtx2 + 104 | 0; //@line 16878
  HEAP32[$329 >> 2] = $52; //@line 16879
  $330 = $ReallocAsyncCtx2 + 108 | 0; //@line 16880
  HEAP32[$330 >> 2] = $54; //@line 16881
  $331 = $ReallocAsyncCtx2 + 112 | 0; //@line 16882
  HEAP32[$331 >> 2] = $56; //@line 16883
  $332 = $ReallocAsyncCtx2 + 116 | 0; //@line 16884
  HEAP32[$332 >> 2] = $48; //@line 16885
  $333 = $ReallocAsyncCtx2 + 120 | 0; //@line 16886
  HEAP32[$333 >> 2] = $58; //@line 16887
  $334 = $ReallocAsyncCtx2 + 124 | 0; //@line 16888
  HEAP32[$334 >> 2] = $62; //@line 16889
  $335 = $ReallocAsyncCtx2 + 128 | 0; //@line 16890
  HEAP32[$335 >> 2] = $64; //@line 16891
  $336 = $ReallocAsyncCtx2 + 132 | 0; //@line 16892
  HEAP32[$336 >> 2] = $66; //@line 16893
  $337 = $ReallocAsyncCtx2 + 136 | 0; //@line 16894
  HEAP32[$337 >> 2] = $68; //@line 16895
  $338 = $ReallocAsyncCtx2 + 140 | 0; //@line 16896
  HEAP32[$338 >> 2] = $70; //@line 16897
  $339 = $ReallocAsyncCtx2 + 144 | 0; //@line 16898
  HEAP32[$339 >> 2] = $72; //@line 16899
  $340 = $ReallocAsyncCtx2 + 148 | 0; //@line 16900
  HEAP32[$340 >> 2] = $74; //@line 16901
  $341 = $ReallocAsyncCtx2 + 152 | 0; //@line 16902
  HEAP32[$341 >> 2] = $76; //@line 16903
  $342 = $ReallocAsyncCtx2 + 156 | 0; //@line 16904
  HEAP32[$342 >> 2] = $78; //@line 16905
  $343 = $ReallocAsyncCtx2 + 160 | 0; //@line 16906
  HEAP32[$343 >> 2] = $80; //@line 16907
  $344 = $ReallocAsyncCtx2 + 164 | 0; //@line 16908
  HEAP32[$344 >> 2] = $82; //@line 16909
  $345 = $ReallocAsyncCtx2 + 168 | 0; //@line 16910
  HEAP32[$345 >> 2] = $84; //@line 16911
  $346 = $ReallocAsyncCtx2 + 172 | 0; //@line 16912
  HEAP32[$346 >> 2] = $86; //@line 16913
  $347 = $ReallocAsyncCtx2 + 176 | 0; //@line 16914
  HEAP32[$347 >> 2] = $88; //@line 16915
  $348 = $ReallocAsyncCtx2 + 180 | 0; //@line 16916
  HEAP32[$348 >> 2] = $90; //@line 16917
  $349 = $ReallocAsyncCtx2 + 184 | 0; //@line 16918
  HEAP32[$349 >> 2] = $92; //@line 16919
  $350 = $ReallocAsyncCtx2 + 188 | 0; //@line 16920
  HEAP32[$350 >> 2] = $94; //@line 16921
  $351 = $ReallocAsyncCtx2 + 192 | 0; //@line 16922
  HEAP32[$351 >> 2] = $96; //@line 16923
  $352 = $ReallocAsyncCtx2 + 196 | 0; //@line 16924
  HEAP32[$352 >> 2] = $98; //@line 16925
  $353 = $ReallocAsyncCtx2 + 200 | 0; //@line 16926
  HEAP32[$353 >> 2] = $100; //@line 16927
  $354 = $ReallocAsyncCtx2 + 204 | 0; //@line 16928
  HEAP32[$354 >> 2] = $102; //@line 16929
  $355 = $ReallocAsyncCtx2 + 208 | 0; //@line 16930
  HEAP32[$355 >> 2] = $104; //@line 16931
  $356 = $ReallocAsyncCtx2 + 212 | 0; //@line 16932
  HEAP32[$356 >> 2] = $106; //@line 16933
  $357 = $ReallocAsyncCtx2 + 216 | 0; //@line 16934
  HEAP32[$357 >> 2] = $108; //@line 16935
  $358 = $ReallocAsyncCtx2 + 220 | 0; //@line 16936
  HEAP32[$358 >> 2] = $110; //@line 16937
  $359 = $ReallocAsyncCtx2 + 224 | 0; //@line 16938
  HEAP32[$359 >> 2] = $112; //@line 16939
  $360 = $ReallocAsyncCtx2 + 228 | 0; //@line 16940
  HEAP32[$360 >> 2] = $114; //@line 16941
  $361 = $ReallocAsyncCtx2 + 232 | 0; //@line 16942
  HEAP32[$361 >> 2] = $116; //@line 16943
  $362 = $ReallocAsyncCtx2 + 236 | 0; //@line 16944
  HEAP32[$362 >> 2] = $118; //@line 16945
  $363 = $ReallocAsyncCtx2 + 240 | 0; //@line 16946
  HEAP32[$363 >> 2] = $120; //@line 16947
  $364 = $ReallocAsyncCtx2 + 244 | 0; //@line 16948
  HEAP32[$364 >> 2] = $122; //@line 16949
  $365 = $ReallocAsyncCtx2 + 248 | 0; //@line 16950
  HEAP8[$365 >> 0] = $124; //@line 16951
  $366 = $ReallocAsyncCtx2 + 249 | 0; //@line 16952
  HEAP8[$366 >> 0] = $126; //@line 16953
  $367 = $ReallocAsyncCtx2 + 252 | 0; //@line 16954
  HEAP32[$367 >> 2] = $128; //@line 16955
  $368 = $ReallocAsyncCtx2 + 256 | 0; //@line 16956
  HEAP8[$368 >> 0] = $130; //@line 16957
  $369 = $ReallocAsyncCtx2 + 260 | 0; //@line 16958
  HEAP32[$369 >> 2] = $132; //@line 16959
  $370 = $ReallocAsyncCtx2 + 264 | 0; //@line 16960
  HEAP32[$370 >> 2] = $136; //@line 16961
  sp = STACKTOP; //@line 16962
  return;
 } else if ((label | 0) == 22) {
  HEAP8[$102 >> 0] = HEAP8[$120 + ($139 & 255) >> 0] | 0; //@line 16970
  HEAP32[$108 >> 2] = $22; //@line 16971
  HEAP32[$114 >> 2] = (HEAPU8[$120 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$120 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$120 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 16992
  HEAP32[$118 >> 2] = 0; //@line 16993
  $411 = $$0$be + 6 << 24 >> 24; //@line 16994
  HEAP8[$12 >> 0] = HEAP8[$120 + ($$0$be + 5 & 255) >> 0] | 0; //@line 16998
  $417 = HEAP32[(HEAP32[$2 >> 2] | 0) + 8 >> 2] | 0; //@line 17001
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(268) | 0; //@line 17002
  $418 = FUNCTION_TABLE_iii[$417 & 31]($136, $58) | 0; //@line 17003
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 489; //@line 17006
   $419 = $ReallocAsyncCtx3 + 4 | 0; //@line 17007
   HEAP32[$419 >> 2] = $2; //@line 17008
   $420 = $ReallocAsyncCtx3 + 8 | 0; //@line 17009
   HEAP32[$420 >> 2] = $4; //@line 17010
   $421 = $ReallocAsyncCtx3 + 12 | 0; //@line 17011
   HEAP32[$421 >> 2] = $6; //@line 17012
   $422 = $ReallocAsyncCtx3 + 16 | 0; //@line 17013
   HEAP32[$422 >> 2] = $8; //@line 17014
   $423 = $ReallocAsyncCtx3 + 20 | 0; //@line 17015
   HEAP32[$423 >> 2] = $10; //@line 17016
   $424 = $ReallocAsyncCtx3 + 24 | 0; //@line 17017
   HEAP32[$424 >> 2] = $12; //@line 17018
   $425 = $ReallocAsyncCtx3 + 28 | 0; //@line 17019
   HEAP32[$425 >> 2] = $14; //@line 17020
   $426 = $ReallocAsyncCtx3 + 32 | 0; //@line 17021
   HEAP32[$426 >> 2] = $16; //@line 17022
   $427 = $ReallocAsyncCtx3 + 36 | 0; //@line 17023
   HEAP32[$427 >> 2] = $18; //@line 17024
   $428 = $ReallocAsyncCtx3 + 40 | 0; //@line 17025
   HEAP32[$428 >> 2] = $20; //@line 17026
   $429 = $ReallocAsyncCtx3 + 44 | 0; //@line 17027
   HEAP32[$429 >> 2] = $22; //@line 17028
   $430 = $ReallocAsyncCtx3 + 48 | 0; //@line 17029
   HEAP32[$430 >> 2] = $24; //@line 17030
   $431 = $ReallocAsyncCtx3 + 52 | 0; //@line 17031
   HEAP32[$431 >> 2] = $26; //@line 17032
   $432 = $ReallocAsyncCtx3 + 56 | 0; //@line 17033
   HEAP32[$432 >> 2] = $28; //@line 17034
   $433 = $ReallocAsyncCtx3 + 60 | 0; //@line 17035
   HEAP32[$433 >> 2] = $30; //@line 17036
   $434 = $ReallocAsyncCtx3 + 64 | 0; //@line 17037
   HEAP32[$434 >> 2] = $32; //@line 17038
   $435 = $ReallocAsyncCtx3 + 68 | 0; //@line 17039
   HEAP32[$435 >> 2] = $34; //@line 17040
   $436 = $ReallocAsyncCtx3 + 72 | 0; //@line 17041
   HEAP32[$436 >> 2] = $36; //@line 17042
   $437 = $ReallocAsyncCtx3 + 76 | 0; //@line 17043
   HEAP32[$437 >> 2] = $38; //@line 17044
   $438 = $ReallocAsyncCtx3 + 80 | 0; //@line 17045
   HEAP32[$438 >> 2] = $40; //@line 17046
   $439 = $ReallocAsyncCtx3 + 84 | 0; //@line 17047
   HEAP32[$439 >> 2] = $42; //@line 17048
   $440 = $ReallocAsyncCtx3 + 88 | 0; //@line 17049
   HEAP32[$440 >> 2] = $44; //@line 17050
   $441 = $ReallocAsyncCtx3 + 92 | 0; //@line 17051
   HEAP32[$441 >> 2] = $46; //@line 17052
   $442 = $ReallocAsyncCtx3 + 96 | 0; //@line 17053
   HEAP32[$442 >> 2] = $48; //@line 17054
   $443 = $ReallocAsyncCtx3 + 100 | 0; //@line 17055
   HEAP32[$443 >> 2] = $50; //@line 17056
   $444 = $ReallocAsyncCtx3 + 104 | 0; //@line 17057
   HEAP32[$444 >> 2] = $52; //@line 17058
   $445 = $ReallocAsyncCtx3 + 108 | 0; //@line 17059
   HEAP32[$445 >> 2] = $54; //@line 17060
   $446 = $ReallocAsyncCtx3 + 112 | 0; //@line 17061
   HEAP32[$446 >> 2] = $56; //@line 17062
   $447 = $ReallocAsyncCtx3 + 116 | 0; //@line 17063
   HEAP8[$447 >> 0] = $411; //@line 17064
   $448 = $ReallocAsyncCtx3 + 120 | 0; //@line 17065
   HEAP32[$448 >> 2] = $58; //@line 17066
   $449 = $ReallocAsyncCtx3 + 124 | 0; //@line 17067
   HEAP32[$449 >> 2] = $62; //@line 17068
   $450 = $ReallocAsyncCtx3 + 128 | 0; //@line 17069
   HEAP32[$450 >> 2] = $64; //@line 17070
   $451 = $ReallocAsyncCtx3 + 132 | 0; //@line 17071
   HEAP32[$451 >> 2] = $66; //@line 17072
   $452 = $ReallocAsyncCtx3 + 136 | 0; //@line 17073
   HEAP32[$452 >> 2] = $68; //@line 17074
   $453 = $ReallocAsyncCtx3 + 140 | 0; //@line 17075
   HEAP32[$453 >> 2] = $70; //@line 17076
   $454 = $ReallocAsyncCtx3 + 144 | 0; //@line 17077
   HEAP32[$454 >> 2] = $72; //@line 17078
   $455 = $ReallocAsyncCtx3 + 148 | 0; //@line 17079
   HEAP32[$455 >> 2] = $74; //@line 17080
   $456 = $ReallocAsyncCtx3 + 152 | 0; //@line 17081
   HEAP32[$456 >> 2] = $76; //@line 17082
   $457 = $ReallocAsyncCtx3 + 156 | 0; //@line 17083
   HEAP32[$457 >> 2] = $78; //@line 17084
   $458 = $ReallocAsyncCtx3 + 160 | 0; //@line 17085
   HEAP32[$458 >> 2] = $80; //@line 17086
   $459 = $ReallocAsyncCtx3 + 164 | 0; //@line 17087
   HEAP32[$459 >> 2] = $82; //@line 17088
   $460 = $ReallocAsyncCtx3 + 168 | 0; //@line 17089
   HEAP32[$460 >> 2] = $84; //@line 17090
   $461 = $ReallocAsyncCtx3 + 172 | 0; //@line 17091
   HEAP32[$461 >> 2] = $86; //@line 17092
   $462 = $ReallocAsyncCtx3 + 176 | 0; //@line 17093
   HEAP32[$462 >> 2] = $88; //@line 17094
   $463 = $ReallocAsyncCtx3 + 180 | 0; //@line 17095
   HEAP32[$463 >> 2] = $90; //@line 17096
   $464 = $ReallocAsyncCtx3 + 184 | 0; //@line 17097
   HEAP32[$464 >> 2] = $92; //@line 17098
   $465 = $ReallocAsyncCtx3 + 188 | 0; //@line 17099
   HEAP32[$465 >> 2] = $94; //@line 17100
   $466 = $ReallocAsyncCtx3 + 192 | 0; //@line 17101
   HEAP32[$466 >> 2] = $96; //@line 17102
   $467 = $ReallocAsyncCtx3 + 196 | 0; //@line 17103
   HEAP32[$467 >> 2] = $98; //@line 17104
   $468 = $ReallocAsyncCtx3 + 200 | 0; //@line 17105
   HEAP32[$468 >> 2] = $100; //@line 17106
   $469 = $ReallocAsyncCtx3 + 204 | 0; //@line 17107
   HEAP32[$469 >> 2] = $102; //@line 17108
   $470 = $ReallocAsyncCtx3 + 208 | 0; //@line 17109
   HEAP32[$470 >> 2] = $104; //@line 17110
   $471 = $ReallocAsyncCtx3 + 212 | 0; //@line 17111
   HEAP32[$471 >> 2] = $106; //@line 17112
   $472 = $ReallocAsyncCtx3 + 216 | 0; //@line 17113
   HEAP32[$472 >> 2] = $108; //@line 17114
   $473 = $ReallocAsyncCtx3 + 220 | 0; //@line 17115
   HEAP32[$473 >> 2] = $110; //@line 17116
   $474 = $ReallocAsyncCtx3 + 224 | 0; //@line 17117
   HEAP32[$474 >> 2] = $112; //@line 17118
   $475 = $ReallocAsyncCtx3 + 228 | 0; //@line 17119
   HEAP32[$475 >> 2] = $114; //@line 17120
   $476 = $ReallocAsyncCtx3 + 232 | 0; //@line 17121
   HEAP32[$476 >> 2] = $116; //@line 17122
   $477 = $ReallocAsyncCtx3 + 236 | 0; //@line 17123
   HEAP32[$477 >> 2] = $118; //@line 17124
   $478 = $ReallocAsyncCtx3 + 240 | 0; //@line 17125
   HEAP32[$478 >> 2] = $120; //@line 17126
   $479 = $ReallocAsyncCtx3 + 244 | 0; //@line 17127
   HEAP32[$479 >> 2] = $122; //@line 17128
   $480 = $ReallocAsyncCtx3 + 248 | 0; //@line 17129
   HEAP8[$480 >> 0] = $124; //@line 17130
   $481 = $ReallocAsyncCtx3 + 249 | 0; //@line 17131
   HEAP8[$481 >> 0] = $126; //@line 17132
   $482 = $ReallocAsyncCtx3 + 252 | 0; //@line 17133
   HEAP32[$482 >> 2] = $128; //@line 17134
   $483 = $ReallocAsyncCtx3 + 256 | 0; //@line 17135
   HEAP8[$483 >> 0] = $130; //@line 17136
   $484 = $ReallocAsyncCtx3 + 260 | 0; //@line 17137
   HEAP32[$484 >> 2] = $132; //@line 17138
   $485 = $ReallocAsyncCtx3 + 264 | 0; //@line 17139
   HEAP32[$485 >> 2] = $136; //@line 17140
   sp = STACKTOP; //@line 17141
   return;
  }
  HEAP8[___async_retval >> 0] = $418; //@line 17145
  ___async_unwind = 0; //@line 17146
  HEAP32[$ReallocAsyncCtx3 >> 2] = 489; //@line 17147
  $419 = $ReallocAsyncCtx3 + 4 | 0; //@line 17148
  HEAP32[$419 >> 2] = $2; //@line 17149
  $420 = $ReallocAsyncCtx3 + 8 | 0; //@line 17150
  HEAP32[$420 >> 2] = $4; //@line 17151
  $421 = $ReallocAsyncCtx3 + 12 | 0; //@line 17152
  HEAP32[$421 >> 2] = $6; //@line 17153
  $422 = $ReallocAsyncCtx3 + 16 | 0; //@line 17154
  HEAP32[$422 >> 2] = $8; //@line 17155
  $423 = $ReallocAsyncCtx3 + 20 | 0; //@line 17156
  HEAP32[$423 >> 2] = $10; //@line 17157
  $424 = $ReallocAsyncCtx3 + 24 | 0; //@line 17158
  HEAP32[$424 >> 2] = $12; //@line 17159
  $425 = $ReallocAsyncCtx3 + 28 | 0; //@line 17160
  HEAP32[$425 >> 2] = $14; //@line 17161
  $426 = $ReallocAsyncCtx3 + 32 | 0; //@line 17162
  HEAP32[$426 >> 2] = $16; //@line 17163
  $427 = $ReallocAsyncCtx3 + 36 | 0; //@line 17164
  HEAP32[$427 >> 2] = $18; //@line 17165
  $428 = $ReallocAsyncCtx3 + 40 | 0; //@line 17166
  HEAP32[$428 >> 2] = $20; //@line 17167
  $429 = $ReallocAsyncCtx3 + 44 | 0; //@line 17168
  HEAP32[$429 >> 2] = $22; //@line 17169
  $430 = $ReallocAsyncCtx3 + 48 | 0; //@line 17170
  HEAP32[$430 >> 2] = $24; //@line 17171
  $431 = $ReallocAsyncCtx3 + 52 | 0; //@line 17172
  HEAP32[$431 >> 2] = $26; //@line 17173
  $432 = $ReallocAsyncCtx3 + 56 | 0; //@line 17174
  HEAP32[$432 >> 2] = $28; //@line 17175
  $433 = $ReallocAsyncCtx3 + 60 | 0; //@line 17176
  HEAP32[$433 >> 2] = $30; //@line 17177
  $434 = $ReallocAsyncCtx3 + 64 | 0; //@line 17178
  HEAP32[$434 >> 2] = $32; //@line 17179
  $435 = $ReallocAsyncCtx3 + 68 | 0; //@line 17180
  HEAP32[$435 >> 2] = $34; //@line 17181
  $436 = $ReallocAsyncCtx3 + 72 | 0; //@line 17182
  HEAP32[$436 >> 2] = $36; //@line 17183
  $437 = $ReallocAsyncCtx3 + 76 | 0; //@line 17184
  HEAP32[$437 >> 2] = $38; //@line 17185
  $438 = $ReallocAsyncCtx3 + 80 | 0; //@line 17186
  HEAP32[$438 >> 2] = $40; //@line 17187
  $439 = $ReallocAsyncCtx3 + 84 | 0; //@line 17188
  HEAP32[$439 >> 2] = $42; //@line 17189
  $440 = $ReallocAsyncCtx3 + 88 | 0; //@line 17190
  HEAP32[$440 >> 2] = $44; //@line 17191
  $441 = $ReallocAsyncCtx3 + 92 | 0; //@line 17192
  HEAP32[$441 >> 2] = $46; //@line 17193
  $442 = $ReallocAsyncCtx3 + 96 | 0; //@line 17194
  HEAP32[$442 >> 2] = $48; //@line 17195
  $443 = $ReallocAsyncCtx3 + 100 | 0; //@line 17196
  HEAP32[$443 >> 2] = $50; //@line 17197
  $444 = $ReallocAsyncCtx3 + 104 | 0; //@line 17198
  HEAP32[$444 >> 2] = $52; //@line 17199
  $445 = $ReallocAsyncCtx3 + 108 | 0; //@line 17200
  HEAP32[$445 >> 2] = $54; //@line 17201
  $446 = $ReallocAsyncCtx3 + 112 | 0; //@line 17202
  HEAP32[$446 >> 2] = $56; //@line 17203
  $447 = $ReallocAsyncCtx3 + 116 | 0; //@line 17204
  HEAP8[$447 >> 0] = $411; //@line 17205
  $448 = $ReallocAsyncCtx3 + 120 | 0; //@line 17206
  HEAP32[$448 >> 2] = $58; //@line 17207
  $449 = $ReallocAsyncCtx3 + 124 | 0; //@line 17208
  HEAP32[$449 >> 2] = $62; //@line 17209
  $450 = $ReallocAsyncCtx3 + 128 | 0; //@line 17210
  HEAP32[$450 >> 2] = $64; //@line 17211
  $451 = $ReallocAsyncCtx3 + 132 | 0; //@line 17212
  HEAP32[$451 >> 2] = $66; //@line 17213
  $452 = $ReallocAsyncCtx3 + 136 | 0; //@line 17214
  HEAP32[$452 >> 2] = $68; //@line 17215
  $453 = $ReallocAsyncCtx3 + 140 | 0; //@line 17216
  HEAP32[$453 >> 2] = $70; //@line 17217
  $454 = $ReallocAsyncCtx3 + 144 | 0; //@line 17218
  HEAP32[$454 >> 2] = $72; //@line 17219
  $455 = $ReallocAsyncCtx3 + 148 | 0; //@line 17220
  HEAP32[$455 >> 2] = $74; //@line 17221
  $456 = $ReallocAsyncCtx3 + 152 | 0; //@line 17222
  HEAP32[$456 >> 2] = $76; //@line 17223
  $457 = $ReallocAsyncCtx3 + 156 | 0; //@line 17224
  HEAP32[$457 >> 2] = $78; //@line 17225
  $458 = $ReallocAsyncCtx3 + 160 | 0; //@line 17226
  HEAP32[$458 >> 2] = $80; //@line 17227
  $459 = $ReallocAsyncCtx3 + 164 | 0; //@line 17228
  HEAP32[$459 >> 2] = $82; //@line 17229
  $460 = $ReallocAsyncCtx3 + 168 | 0; //@line 17230
  HEAP32[$460 >> 2] = $84; //@line 17231
  $461 = $ReallocAsyncCtx3 + 172 | 0; //@line 17232
  HEAP32[$461 >> 2] = $86; //@line 17233
  $462 = $ReallocAsyncCtx3 + 176 | 0; //@line 17234
  HEAP32[$462 >> 2] = $88; //@line 17235
  $463 = $ReallocAsyncCtx3 + 180 | 0; //@line 17236
  HEAP32[$463 >> 2] = $90; //@line 17237
  $464 = $ReallocAsyncCtx3 + 184 | 0; //@line 17238
  HEAP32[$464 >> 2] = $92; //@line 17239
  $465 = $ReallocAsyncCtx3 + 188 | 0; //@line 17240
  HEAP32[$465 >> 2] = $94; //@line 17241
  $466 = $ReallocAsyncCtx3 + 192 | 0; //@line 17242
  HEAP32[$466 >> 2] = $96; //@line 17243
  $467 = $ReallocAsyncCtx3 + 196 | 0; //@line 17244
  HEAP32[$467 >> 2] = $98; //@line 17245
  $468 = $ReallocAsyncCtx3 + 200 | 0; //@line 17246
  HEAP32[$468 >> 2] = $100; //@line 17247
  $469 = $ReallocAsyncCtx3 + 204 | 0; //@line 17248
  HEAP32[$469 >> 2] = $102; //@line 17249
  $470 = $ReallocAsyncCtx3 + 208 | 0; //@line 17250
  HEAP32[$470 >> 2] = $104; //@line 17251
  $471 = $ReallocAsyncCtx3 + 212 | 0; //@line 17252
  HEAP32[$471 >> 2] = $106; //@line 17253
  $472 = $ReallocAsyncCtx3 + 216 | 0; //@line 17254
  HEAP32[$472 >> 2] = $108; //@line 17255
  $473 = $ReallocAsyncCtx3 + 220 | 0; //@line 17256
  HEAP32[$473 >> 2] = $110; //@line 17257
  $474 = $ReallocAsyncCtx3 + 224 | 0; //@line 17258
  HEAP32[$474 >> 2] = $112; //@line 17259
  $475 = $ReallocAsyncCtx3 + 228 | 0; //@line 17260
  HEAP32[$475 >> 2] = $114; //@line 17261
  $476 = $ReallocAsyncCtx3 + 232 | 0; //@line 17262
  HEAP32[$476 >> 2] = $116; //@line 17263
  $477 = $ReallocAsyncCtx3 + 236 | 0; //@line 17264
  HEAP32[$477 >> 2] = $118; //@line 17265
  $478 = $ReallocAsyncCtx3 + 240 | 0; //@line 17266
  HEAP32[$478 >> 2] = $120; //@line 17267
  $479 = $ReallocAsyncCtx3 + 244 | 0; //@line 17268
  HEAP32[$479 >> 2] = $122; //@line 17269
  $480 = $ReallocAsyncCtx3 + 248 | 0; //@line 17270
  HEAP8[$480 >> 0] = $124; //@line 17271
  $481 = $ReallocAsyncCtx3 + 249 | 0; //@line 17272
  HEAP8[$481 >> 0] = $126; //@line 17273
  $482 = $ReallocAsyncCtx3 + 252 | 0; //@line 17274
  HEAP32[$482 >> 2] = $128; //@line 17275
  $483 = $ReallocAsyncCtx3 + 256 | 0; //@line 17276
  HEAP8[$483 >> 0] = $130; //@line 17277
  $484 = $ReallocAsyncCtx3 + 260 | 0; //@line 17278
  HEAP32[$484 >> 2] = $132; //@line 17279
  $485 = $ReallocAsyncCtx3 + 264 | 0; //@line 17280
  HEAP32[$485 >> 2] = $136; //@line 17281
  sp = STACKTOP; //@line 17282
  return;
 } else if ((label | 0) == 27) {
  $504 = $$0$be + 2 << 24 >> 24; //@line 17286
  $507 = HEAP8[$120 + ($139 & 255) >> 0] | 0; //@line 17289
  HEAP8[$56 >> 0] = 0; //@line 17290
  $508 = $507 & 255; //@line 17291
  HEAP8[$42 >> 0] = $508 >>> 5 & 1; //@line 17295
  if ($508 & 16 | 0) {
   HEAP8[$56 >> 0] = 1; //@line 17299
  }
  HEAP8[$76 >> 0] = $508 & 15; //@line 17303
  $517 = HEAP32[(HEAP32[$66 >> 2] | 0) + 44 >> 2] | 0; //@line 17306
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(272) | 0; //@line 17307
  $518 = FUNCTION_TABLE_iii[$517 & 31]($136, $16) | 0; //@line 17308
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 490; //@line 17311
   $519 = $ReallocAsyncCtx4 + 4 | 0; //@line 17312
   HEAP32[$519 >> 2] = $2; //@line 17313
   $520 = $ReallocAsyncCtx4 + 8 | 0; //@line 17314
   HEAP32[$520 >> 2] = $4; //@line 17315
   $521 = $ReallocAsyncCtx4 + 12 | 0; //@line 17316
   HEAP32[$521 >> 2] = $6; //@line 17317
   $522 = $ReallocAsyncCtx4 + 16 | 0; //@line 17318
   HEAP32[$522 >> 2] = $8; //@line 17319
   $523 = $ReallocAsyncCtx4 + 20 | 0; //@line 17320
   HEAP32[$523 >> 2] = $10; //@line 17321
   $524 = $ReallocAsyncCtx4 + 24 | 0; //@line 17322
   HEAP32[$524 >> 2] = $12; //@line 17323
   $525 = $ReallocAsyncCtx4 + 28 | 0; //@line 17324
   HEAP32[$525 >> 2] = $14; //@line 17325
   $526 = $ReallocAsyncCtx4 + 32 | 0; //@line 17326
   HEAP32[$526 >> 2] = $16; //@line 17327
   $527 = $ReallocAsyncCtx4 + 36 | 0; //@line 17328
   HEAP32[$527 >> 2] = $18; //@line 17329
   $528 = $ReallocAsyncCtx4 + 40 | 0; //@line 17330
   HEAP32[$528 >> 2] = $20; //@line 17331
   $529 = $ReallocAsyncCtx4 + 44 | 0; //@line 17332
   HEAP32[$529 >> 2] = $22; //@line 17333
   $530 = $ReallocAsyncCtx4 + 48 | 0; //@line 17334
   HEAP32[$530 >> 2] = $24; //@line 17335
   $531 = $ReallocAsyncCtx4 + 52 | 0; //@line 17336
   HEAP32[$531 >> 2] = $26; //@line 17337
   $532 = $ReallocAsyncCtx4 + 56 | 0; //@line 17338
   HEAP32[$532 >> 2] = $28; //@line 17339
   $533 = $ReallocAsyncCtx4 + 60 | 0; //@line 17340
   HEAP32[$533 >> 2] = $30; //@line 17341
   $534 = $ReallocAsyncCtx4 + 64 | 0; //@line 17342
   HEAP32[$534 >> 2] = $32; //@line 17343
   $535 = $ReallocAsyncCtx4 + 68 | 0; //@line 17344
   HEAP32[$535 >> 2] = $34; //@line 17345
   $536 = $ReallocAsyncCtx4 + 72 | 0; //@line 17346
   HEAP32[$536 >> 2] = $36; //@line 17347
   $537 = $ReallocAsyncCtx4 + 76 | 0; //@line 17348
   HEAP32[$537 >> 2] = $38; //@line 17349
   $538 = $ReallocAsyncCtx4 + 80 | 0; //@line 17350
   HEAP32[$538 >> 2] = $40; //@line 17351
   $539 = $ReallocAsyncCtx4 + 84 | 0; //@line 17352
   HEAP32[$539 >> 2] = $42; //@line 17353
   $540 = $ReallocAsyncCtx4 + 88 | 0; //@line 17354
   HEAP32[$540 >> 2] = $44; //@line 17355
   $541 = $ReallocAsyncCtx4 + 92 | 0; //@line 17356
   HEAP32[$541 >> 2] = $46; //@line 17357
   $542 = $ReallocAsyncCtx4 + 96 | 0; //@line 17358
   HEAP32[$542 >> 2] = $48; //@line 17359
   $543 = $ReallocAsyncCtx4 + 100 | 0; //@line 17360
   HEAP32[$543 >> 2] = $50; //@line 17361
   $544 = $ReallocAsyncCtx4 + 104 | 0; //@line 17362
   HEAP32[$544 >> 2] = $52; //@line 17363
   $545 = $ReallocAsyncCtx4 + 108 | 0; //@line 17364
   HEAP32[$545 >> 2] = $54; //@line 17365
   $546 = $ReallocAsyncCtx4 + 112 | 0; //@line 17366
   HEAP32[$546 >> 2] = $56; //@line 17367
   $547 = $ReallocAsyncCtx4 + 116 | 0; //@line 17368
   HEAP32[$547 >> 2] = $58; //@line 17369
   $548 = $ReallocAsyncCtx4 + 120 | 0; //@line 17370
   HEAP32[$548 >> 2] = $62; //@line 17371
   $549 = $ReallocAsyncCtx4 + 124 | 0; //@line 17372
   HEAP32[$549 >> 2] = $64; //@line 17373
   $550 = $ReallocAsyncCtx4 + 128 | 0; //@line 17374
   HEAP32[$550 >> 2] = $66; //@line 17375
   $551 = $ReallocAsyncCtx4 + 132 | 0; //@line 17376
   HEAP32[$551 >> 2] = $68; //@line 17377
   $552 = $ReallocAsyncCtx4 + 136 | 0; //@line 17378
   HEAP32[$552 >> 2] = $70; //@line 17379
   $553 = $ReallocAsyncCtx4 + 140 | 0; //@line 17380
   HEAP32[$553 >> 2] = $72; //@line 17381
   $554 = $ReallocAsyncCtx4 + 144 | 0; //@line 17382
   HEAP32[$554 >> 2] = $74; //@line 17383
   $555 = $ReallocAsyncCtx4 + 148 | 0; //@line 17384
   HEAP32[$555 >> 2] = $76; //@line 17385
   $556 = $ReallocAsyncCtx4 + 152 | 0; //@line 17386
   HEAP32[$556 >> 2] = $78; //@line 17387
   $557 = $ReallocAsyncCtx4 + 156 | 0; //@line 17388
   HEAP32[$557 >> 2] = $80; //@line 17389
   $558 = $ReallocAsyncCtx4 + 160 | 0; //@line 17390
   HEAP32[$558 >> 2] = $82; //@line 17391
   $559 = $ReallocAsyncCtx4 + 164 | 0; //@line 17392
   HEAP8[$559 >> 0] = $504; //@line 17393
   $560 = $ReallocAsyncCtx4 + 168 | 0; //@line 17394
   HEAP32[$560 >> 2] = $84; //@line 17395
   $561 = $ReallocAsyncCtx4 + 172 | 0; //@line 17396
   HEAP32[$561 >> 2] = $86; //@line 17397
   $562 = $ReallocAsyncCtx4 + 176 | 0; //@line 17398
   HEAP32[$562 >> 2] = $88; //@line 17399
   $563 = $ReallocAsyncCtx4 + 180 | 0; //@line 17400
   HEAP32[$563 >> 2] = $90; //@line 17401
   $564 = $ReallocAsyncCtx4 + 184 | 0; //@line 17402
   HEAP32[$564 >> 2] = $92; //@line 17403
   $565 = $ReallocAsyncCtx4 + 188 | 0; //@line 17404
   HEAP32[$565 >> 2] = $94; //@line 17405
   $566 = $ReallocAsyncCtx4 + 192 | 0; //@line 17406
   HEAP32[$566 >> 2] = $96; //@line 17407
   $567 = $ReallocAsyncCtx4 + 196 | 0; //@line 17408
   HEAP32[$567 >> 2] = $98; //@line 17409
   $568 = $ReallocAsyncCtx4 + 200 | 0; //@line 17410
   HEAP32[$568 >> 2] = $100; //@line 17411
   $569 = $ReallocAsyncCtx4 + 204 | 0; //@line 17412
   HEAP32[$569 >> 2] = $102; //@line 17413
   $570 = $ReallocAsyncCtx4 + 208 | 0; //@line 17414
   HEAP32[$570 >> 2] = $104; //@line 17415
   $571 = $ReallocAsyncCtx4 + 212 | 0; //@line 17416
   HEAP32[$571 >> 2] = $106; //@line 17417
   $572 = $ReallocAsyncCtx4 + 216 | 0; //@line 17418
   HEAP32[$572 >> 2] = $108; //@line 17419
   $573 = $ReallocAsyncCtx4 + 220 | 0; //@line 17420
   HEAP32[$573 >> 2] = $110; //@line 17421
   $574 = $ReallocAsyncCtx4 + 224 | 0; //@line 17422
   HEAP32[$574 >> 2] = $112; //@line 17423
   $575 = $ReallocAsyncCtx4 + 228 | 0; //@line 17424
   HEAP32[$575 >> 2] = $114; //@line 17425
   $576 = $ReallocAsyncCtx4 + 232 | 0; //@line 17426
   HEAP32[$576 >> 2] = $116; //@line 17427
   $577 = $ReallocAsyncCtx4 + 236 | 0; //@line 17428
   HEAP32[$577 >> 2] = $118; //@line 17429
   $578 = $ReallocAsyncCtx4 + 240 | 0; //@line 17430
   HEAP32[$578 >> 2] = $120; //@line 17431
   $579 = $ReallocAsyncCtx4 + 244 | 0; //@line 17432
   HEAP32[$579 >> 2] = $122; //@line 17433
   $580 = $ReallocAsyncCtx4 + 248 | 0; //@line 17434
   HEAP8[$580 >> 0] = $124; //@line 17435
   $581 = $ReallocAsyncCtx4 + 249 | 0; //@line 17436
   HEAP8[$581 >> 0] = $126; //@line 17437
   $582 = $ReallocAsyncCtx4 + 252 | 0; //@line 17438
   HEAP32[$582 >> 2] = $128; //@line 17439
   $583 = $ReallocAsyncCtx4 + 256 | 0; //@line 17440
   HEAP8[$583 >> 0] = $130; //@line 17441
   $584 = $ReallocAsyncCtx4 + 260 | 0; //@line 17442
   HEAP32[$584 >> 2] = $132; //@line 17443
   $585 = $ReallocAsyncCtx4 + 264 | 0; //@line 17444
   HEAP32[$585 >> 2] = $$096$be; //@line 17445
   $586 = $ReallocAsyncCtx4 + 268 | 0; //@line 17446
   HEAP32[$586 >> 2] = $136; //@line 17447
   sp = STACKTOP; //@line 17448
   return;
  }
  HEAP8[___async_retval >> 0] = $518 & 1; //@line 17453
  ___async_unwind = 0; //@line 17454
  HEAP32[$ReallocAsyncCtx4 >> 2] = 490; //@line 17455
  $519 = $ReallocAsyncCtx4 + 4 | 0; //@line 17456
  HEAP32[$519 >> 2] = $2; //@line 17457
  $520 = $ReallocAsyncCtx4 + 8 | 0; //@line 17458
  HEAP32[$520 >> 2] = $4; //@line 17459
  $521 = $ReallocAsyncCtx4 + 12 | 0; //@line 17460
  HEAP32[$521 >> 2] = $6; //@line 17461
  $522 = $ReallocAsyncCtx4 + 16 | 0; //@line 17462
  HEAP32[$522 >> 2] = $8; //@line 17463
  $523 = $ReallocAsyncCtx4 + 20 | 0; //@line 17464
  HEAP32[$523 >> 2] = $10; //@line 17465
  $524 = $ReallocAsyncCtx4 + 24 | 0; //@line 17466
  HEAP32[$524 >> 2] = $12; //@line 17467
  $525 = $ReallocAsyncCtx4 + 28 | 0; //@line 17468
  HEAP32[$525 >> 2] = $14; //@line 17469
  $526 = $ReallocAsyncCtx4 + 32 | 0; //@line 17470
  HEAP32[$526 >> 2] = $16; //@line 17471
  $527 = $ReallocAsyncCtx4 + 36 | 0; //@line 17472
  HEAP32[$527 >> 2] = $18; //@line 17473
  $528 = $ReallocAsyncCtx4 + 40 | 0; //@line 17474
  HEAP32[$528 >> 2] = $20; //@line 17475
  $529 = $ReallocAsyncCtx4 + 44 | 0; //@line 17476
  HEAP32[$529 >> 2] = $22; //@line 17477
  $530 = $ReallocAsyncCtx4 + 48 | 0; //@line 17478
  HEAP32[$530 >> 2] = $24; //@line 17479
  $531 = $ReallocAsyncCtx4 + 52 | 0; //@line 17480
  HEAP32[$531 >> 2] = $26; //@line 17481
  $532 = $ReallocAsyncCtx4 + 56 | 0; //@line 17482
  HEAP32[$532 >> 2] = $28; //@line 17483
  $533 = $ReallocAsyncCtx4 + 60 | 0; //@line 17484
  HEAP32[$533 >> 2] = $30; //@line 17485
  $534 = $ReallocAsyncCtx4 + 64 | 0; //@line 17486
  HEAP32[$534 >> 2] = $32; //@line 17487
  $535 = $ReallocAsyncCtx4 + 68 | 0; //@line 17488
  HEAP32[$535 >> 2] = $34; //@line 17489
  $536 = $ReallocAsyncCtx4 + 72 | 0; //@line 17490
  HEAP32[$536 >> 2] = $36; //@line 17491
  $537 = $ReallocAsyncCtx4 + 76 | 0; //@line 17492
  HEAP32[$537 >> 2] = $38; //@line 17493
  $538 = $ReallocAsyncCtx4 + 80 | 0; //@line 17494
  HEAP32[$538 >> 2] = $40; //@line 17495
  $539 = $ReallocAsyncCtx4 + 84 | 0; //@line 17496
  HEAP32[$539 >> 2] = $42; //@line 17497
  $540 = $ReallocAsyncCtx4 + 88 | 0; //@line 17498
  HEAP32[$540 >> 2] = $44; //@line 17499
  $541 = $ReallocAsyncCtx4 + 92 | 0; //@line 17500
  HEAP32[$541 >> 2] = $46; //@line 17501
  $542 = $ReallocAsyncCtx4 + 96 | 0; //@line 17502
  HEAP32[$542 >> 2] = $48; //@line 17503
  $543 = $ReallocAsyncCtx4 + 100 | 0; //@line 17504
  HEAP32[$543 >> 2] = $50; //@line 17505
  $544 = $ReallocAsyncCtx4 + 104 | 0; //@line 17506
  HEAP32[$544 >> 2] = $52; //@line 17507
  $545 = $ReallocAsyncCtx4 + 108 | 0; //@line 17508
  HEAP32[$545 >> 2] = $54; //@line 17509
  $546 = $ReallocAsyncCtx4 + 112 | 0; //@line 17510
  HEAP32[$546 >> 2] = $56; //@line 17511
  $547 = $ReallocAsyncCtx4 + 116 | 0; //@line 17512
  HEAP32[$547 >> 2] = $58; //@line 17513
  $548 = $ReallocAsyncCtx4 + 120 | 0; //@line 17514
  HEAP32[$548 >> 2] = $62; //@line 17515
  $549 = $ReallocAsyncCtx4 + 124 | 0; //@line 17516
  HEAP32[$549 >> 2] = $64; //@line 17517
  $550 = $ReallocAsyncCtx4 + 128 | 0; //@line 17518
  HEAP32[$550 >> 2] = $66; //@line 17519
  $551 = $ReallocAsyncCtx4 + 132 | 0; //@line 17520
  HEAP32[$551 >> 2] = $68; //@line 17521
  $552 = $ReallocAsyncCtx4 + 136 | 0; //@line 17522
  HEAP32[$552 >> 2] = $70; //@line 17523
  $553 = $ReallocAsyncCtx4 + 140 | 0; //@line 17524
  HEAP32[$553 >> 2] = $72; //@line 17525
  $554 = $ReallocAsyncCtx4 + 144 | 0; //@line 17526
  HEAP32[$554 >> 2] = $74; //@line 17527
  $555 = $ReallocAsyncCtx4 + 148 | 0; //@line 17528
  HEAP32[$555 >> 2] = $76; //@line 17529
  $556 = $ReallocAsyncCtx4 + 152 | 0; //@line 17530
  HEAP32[$556 >> 2] = $78; //@line 17531
  $557 = $ReallocAsyncCtx4 + 156 | 0; //@line 17532
  HEAP32[$557 >> 2] = $80; //@line 17533
  $558 = $ReallocAsyncCtx4 + 160 | 0; //@line 17534
  HEAP32[$558 >> 2] = $82; //@line 17535
  $559 = $ReallocAsyncCtx4 + 164 | 0; //@line 17536
  HEAP8[$559 >> 0] = $504; //@line 17537
  $560 = $ReallocAsyncCtx4 + 168 | 0; //@line 17538
  HEAP32[$560 >> 2] = $84; //@line 17539
  $561 = $ReallocAsyncCtx4 + 172 | 0; //@line 17540
  HEAP32[$561 >> 2] = $86; //@line 17541
  $562 = $ReallocAsyncCtx4 + 176 | 0; //@line 17542
  HEAP32[$562 >> 2] = $88; //@line 17543
  $563 = $ReallocAsyncCtx4 + 180 | 0; //@line 17544
  HEAP32[$563 >> 2] = $90; //@line 17545
  $564 = $ReallocAsyncCtx4 + 184 | 0; //@line 17546
  HEAP32[$564 >> 2] = $92; //@line 17547
  $565 = $ReallocAsyncCtx4 + 188 | 0; //@line 17548
  HEAP32[$565 >> 2] = $94; //@line 17549
  $566 = $ReallocAsyncCtx4 + 192 | 0; //@line 17550
  HEAP32[$566 >> 2] = $96; //@line 17551
  $567 = $ReallocAsyncCtx4 + 196 | 0; //@line 17552
  HEAP32[$567 >> 2] = $98; //@line 17553
  $568 = $ReallocAsyncCtx4 + 200 | 0; //@line 17554
  HEAP32[$568 >> 2] = $100; //@line 17555
  $569 = $ReallocAsyncCtx4 + 204 | 0; //@line 17556
  HEAP32[$569 >> 2] = $102; //@line 17557
  $570 = $ReallocAsyncCtx4 + 208 | 0; //@line 17558
  HEAP32[$570 >> 2] = $104; //@line 17559
  $571 = $ReallocAsyncCtx4 + 212 | 0; //@line 17560
  HEAP32[$571 >> 2] = $106; //@line 17561
  $572 = $ReallocAsyncCtx4 + 216 | 0; //@line 17562
  HEAP32[$572 >> 2] = $108; //@line 17563
  $573 = $ReallocAsyncCtx4 + 220 | 0; //@line 17564
  HEAP32[$573 >> 2] = $110; //@line 17565
  $574 = $ReallocAsyncCtx4 + 224 | 0; //@line 17566
  HEAP32[$574 >> 2] = $112; //@line 17567
  $575 = $ReallocAsyncCtx4 + 228 | 0; //@line 17568
  HEAP32[$575 >> 2] = $114; //@line 17569
  $576 = $ReallocAsyncCtx4 + 232 | 0; //@line 17570
  HEAP32[$576 >> 2] = $116; //@line 17571
  $577 = $ReallocAsyncCtx4 + 236 | 0; //@line 17572
  HEAP32[$577 >> 2] = $118; //@line 17573
  $578 = $ReallocAsyncCtx4 + 240 | 0; //@line 17574
  HEAP32[$578 >> 2] = $120; //@line 17575
  $579 = $ReallocAsyncCtx4 + 244 | 0; //@line 17576
  HEAP32[$579 >> 2] = $122; //@line 17577
  $580 = $ReallocAsyncCtx4 + 248 | 0; //@line 17578
  HEAP8[$580 >> 0] = $124; //@line 17579
  $581 = $ReallocAsyncCtx4 + 249 | 0; //@line 17580
  HEAP8[$581 >> 0] = $126; //@line 17581
  $582 = $ReallocAsyncCtx4 + 252 | 0; //@line 17582
  HEAP32[$582 >> 2] = $128; //@line 17583
  $583 = $ReallocAsyncCtx4 + 256 | 0; //@line 17584
  HEAP8[$583 >> 0] = $130; //@line 17585
  $584 = $ReallocAsyncCtx4 + 260 | 0; //@line 17586
  HEAP32[$584 >> 2] = $132; //@line 17587
  $585 = $ReallocAsyncCtx4 + 264 | 0; //@line 17588
  HEAP32[$585 >> 2] = $$096$be; //@line 17589
  $586 = $ReallocAsyncCtx4 + 268 | 0; //@line 17590
  HEAP32[$586 >> 2] = $136; //@line 17591
  sp = STACKTOP; //@line 17592
  return;
 } else if ((label | 0) == 32) {
  HEAP8[$104 >> 0] = HEAP8[$120 + ($139 & 255) >> 0] | 0; //@line 17600
  $604 = $$0$be + 5 << 24 >> 24; //@line 17613
  HEAP32[$100 >> 2] = (HEAPU8[$120 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$120 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$120 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 17621
  $614 = HEAP32[(HEAP32[$112 >> 2] | 0) + 48 >> 2] | 0; //@line 17624
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(268) | 0; //@line 17625
  $615 = FUNCTION_TABLE_iii[$614 & 31]($136, $14) | 0; //@line 17626
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 491; //@line 17629
   $616 = $ReallocAsyncCtx5 + 4 | 0; //@line 17630
   HEAP32[$616 >> 2] = $2; //@line 17631
   $617 = $ReallocAsyncCtx5 + 8 | 0; //@line 17632
   HEAP32[$617 >> 2] = $4; //@line 17633
   $618 = $ReallocAsyncCtx5 + 12 | 0; //@line 17634
   HEAP32[$618 >> 2] = $6; //@line 17635
   $619 = $ReallocAsyncCtx5 + 16 | 0; //@line 17636
   HEAP32[$619 >> 2] = $8; //@line 17637
   $620 = $ReallocAsyncCtx5 + 20 | 0; //@line 17638
   HEAP8[$620 >> 0] = $604; //@line 17639
   $621 = $ReallocAsyncCtx5 + 24 | 0; //@line 17640
   HEAP32[$621 >> 2] = $10; //@line 17641
   $622 = $ReallocAsyncCtx5 + 28 | 0; //@line 17642
   HEAP32[$622 >> 2] = $12; //@line 17643
   $623 = $ReallocAsyncCtx5 + 32 | 0; //@line 17644
   HEAP32[$623 >> 2] = $14; //@line 17645
   $624 = $ReallocAsyncCtx5 + 36 | 0; //@line 17646
   HEAP32[$624 >> 2] = $16; //@line 17647
   $625 = $ReallocAsyncCtx5 + 40 | 0; //@line 17648
   HEAP32[$625 >> 2] = $18; //@line 17649
   $626 = $ReallocAsyncCtx5 + 44 | 0; //@line 17650
   HEAP32[$626 >> 2] = $20; //@line 17651
   $627 = $ReallocAsyncCtx5 + 48 | 0; //@line 17652
   HEAP32[$627 >> 2] = $22; //@line 17653
   $628 = $ReallocAsyncCtx5 + 52 | 0; //@line 17654
   HEAP32[$628 >> 2] = $24; //@line 17655
   $629 = $ReallocAsyncCtx5 + 56 | 0; //@line 17656
   HEAP32[$629 >> 2] = $26; //@line 17657
   $630 = $ReallocAsyncCtx5 + 60 | 0; //@line 17658
   HEAP32[$630 >> 2] = $28; //@line 17659
   $631 = $ReallocAsyncCtx5 + 64 | 0; //@line 17660
   HEAP32[$631 >> 2] = $30; //@line 17661
   $632 = $ReallocAsyncCtx5 + 68 | 0; //@line 17662
   HEAP32[$632 >> 2] = $32; //@line 17663
   $633 = $ReallocAsyncCtx5 + 72 | 0; //@line 17664
   HEAP32[$633 >> 2] = $34; //@line 17665
   $634 = $ReallocAsyncCtx5 + 76 | 0; //@line 17666
   HEAP32[$634 >> 2] = $36; //@line 17667
   $635 = $ReallocAsyncCtx5 + 80 | 0; //@line 17668
   HEAP32[$635 >> 2] = $38; //@line 17669
   $636 = $ReallocAsyncCtx5 + 84 | 0; //@line 17670
   HEAP32[$636 >> 2] = $40; //@line 17671
   $637 = $ReallocAsyncCtx5 + 88 | 0; //@line 17672
   HEAP32[$637 >> 2] = $42; //@line 17673
   $638 = $ReallocAsyncCtx5 + 92 | 0; //@line 17674
   HEAP32[$638 >> 2] = $44; //@line 17675
   $639 = $ReallocAsyncCtx5 + 96 | 0; //@line 17676
   HEAP32[$639 >> 2] = $46; //@line 17677
   $640 = $ReallocAsyncCtx5 + 100 | 0; //@line 17678
   HEAP32[$640 >> 2] = $48; //@line 17679
   $641 = $ReallocAsyncCtx5 + 104 | 0; //@line 17680
   HEAP32[$641 >> 2] = $50; //@line 17681
   $642 = $ReallocAsyncCtx5 + 108 | 0; //@line 17682
   HEAP32[$642 >> 2] = $52; //@line 17683
   $643 = $ReallocAsyncCtx5 + 112 | 0; //@line 17684
   HEAP32[$643 >> 2] = $54; //@line 17685
   $644 = $ReallocAsyncCtx5 + 116 | 0; //@line 17686
   HEAP32[$644 >> 2] = $56; //@line 17687
   $645 = $ReallocAsyncCtx5 + 120 | 0; //@line 17688
   HEAP32[$645 >> 2] = $58; //@line 17689
   $646 = $ReallocAsyncCtx5 + 124 | 0; //@line 17690
   HEAP32[$646 >> 2] = $62; //@line 17691
   $647 = $ReallocAsyncCtx5 + 128 | 0; //@line 17692
   HEAP32[$647 >> 2] = $64; //@line 17693
   $648 = $ReallocAsyncCtx5 + 132 | 0; //@line 17694
   HEAP32[$648 >> 2] = $66; //@line 17695
   $649 = $ReallocAsyncCtx5 + 136 | 0; //@line 17696
   HEAP32[$649 >> 2] = $68; //@line 17697
   $650 = $ReallocAsyncCtx5 + 140 | 0; //@line 17698
   HEAP32[$650 >> 2] = $70; //@line 17699
   $651 = $ReallocAsyncCtx5 + 144 | 0; //@line 17700
   HEAP32[$651 >> 2] = $72; //@line 17701
   $652 = $ReallocAsyncCtx5 + 148 | 0; //@line 17702
   HEAP32[$652 >> 2] = $74; //@line 17703
   $653 = $ReallocAsyncCtx5 + 152 | 0; //@line 17704
   HEAP32[$653 >> 2] = $76; //@line 17705
   $654 = $ReallocAsyncCtx5 + 156 | 0; //@line 17706
   HEAP32[$654 >> 2] = $78; //@line 17707
   $655 = $ReallocAsyncCtx5 + 160 | 0; //@line 17708
   HEAP32[$655 >> 2] = $80; //@line 17709
   $656 = $ReallocAsyncCtx5 + 164 | 0; //@line 17710
   HEAP32[$656 >> 2] = $82; //@line 17711
   $657 = $ReallocAsyncCtx5 + 168 | 0; //@line 17712
   HEAP32[$657 >> 2] = $84; //@line 17713
   $658 = $ReallocAsyncCtx5 + 172 | 0; //@line 17714
   HEAP32[$658 >> 2] = $86; //@line 17715
   $659 = $ReallocAsyncCtx5 + 176 | 0; //@line 17716
   HEAP32[$659 >> 2] = $88; //@line 17717
   $660 = $ReallocAsyncCtx5 + 180 | 0; //@line 17718
   HEAP32[$660 >> 2] = $90; //@line 17719
   $661 = $ReallocAsyncCtx5 + 184 | 0; //@line 17720
   HEAP32[$661 >> 2] = $92; //@line 17721
   $662 = $ReallocAsyncCtx5 + 188 | 0; //@line 17722
   HEAP32[$662 >> 2] = $94; //@line 17723
   $663 = $ReallocAsyncCtx5 + 192 | 0; //@line 17724
   HEAP32[$663 >> 2] = $96; //@line 17725
   $664 = $ReallocAsyncCtx5 + 196 | 0; //@line 17726
   HEAP32[$664 >> 2] = $98; //@line 17727
   $665 = $ReallocAsyncCtx5 + 200 | 0; //@line 17728
   HEAP32[$665 >> 2] = $100; //@line 17729
   $666 = $ReallocAsyncCtx5 + 204 | 0; //@line 17730
   HEAP32[$666 >> 2] = $102; //@line 17731
   $667 = $ReallocAsyncCtx5 + 208 | 0; //@line 17732
   HEAP32[$667 >> 2] = $104; //@line 17733
   $668 = $ReallocAsyncCtx5 + 212 | 0; //@line 17734
   HEAP32[$668 >> 2] = $106; //@line 17735
   $669 = $ReallocAsyncCtx5 + 216 | 0; //@line 17736
   HEAP32[$669 >> 2] = $108; //@line 17737
   $670 = $ReallocAsyncCtx5 + 220 | 0; //@line 17738
   HEAP32[$670 >> 2] = $110; //@line 17739
   $671 = $ReallocAsyncCtx5 + 224 | 0; //@line 17740
   HEAP32[$671 >> 2] = $112; //@line 17741
   $672 = $ReallocAsyncCtx5 + 228 | 0; //@line 17742
   HEAP32[$672 >> 2] = $114; //@line 17743
   $673 = $ReallocAsyncCtx5 + 232 | 0; //@line 17744
   HEAP32[$673 >> 2] = $116; //@line 17745
   $674 = $ReallocAsyncCtx5 + 236 | 0; //@line 17746
   HEAP32[$674 >> 2] = $118; //@line 17747
   $675 = $ReallocAsyncCtx5 + 240 | 0; //@line 17748
   HEAP32[$675 >> 2] = $120; //@line 17749
   $676 = $ReallocAsyncCtx5 + 244 | 0; //@line 17750
   HEAP32[$676 >> 2] = $122; //@line 17751
   $677 = $ReallocAsyncCtx5 + 248 | 0; //@line 17752
   HEAP8[$677 >> 0] = $124; //@line 17753
   $678 = $ReallocAsyncCtx5 + 249 | 0; //@line 17754
   HEAP8[$678 >> 0] = $126; //@line 17755
   $679 = $ReallocAsyncCtx5 + 252 | 0; //@line 17756
   HEAP32[$679 >> 2] = $128; //@line 17757
   $680 = $ReallocAsyncCtx5 + 256 | 0; //@line 17758
   HEAP8[$680 >> 0] = $130; //@line 17759
   $681 = $ReallocAsyncCtx5 + 260 | 0; //@line 17760
   HEAP32[$681 >> 2] = $132; //@line 17761
   $682 = $ReallocAsyncCtx5 + 264 | 0; //@line 17762
   HEAP32[$682 >> 2] = $136; //@line 17763
   sp = STACKTOP; //@line 17764
   return;
  }
  HEAP8[___async_retval >> 0] = $615; //@line 17768
  ___async_unwind = 0; //@line 17769
  HEAP32[$ReallocAsyncCtx5 >> 2] = 491; //@line 17770
  $616 = $ReallocAsyncCtx5 + 4 | 0; //@line 17771
  HEAP32[$616 >> 2] = $2; //@line 17772
  $617 = $ReallocAsyncCtx5 + 8 | 0; //@line 17773
  HEAP32[$617 >> 2] = $4; //@line 17774
  $618 = $ReallocAsyncCtx5 + 12 | 0; //@line 17775
  HEAP32[$618 >> 2] = $6; //@line 17776
  $619 = $ReallocAsyncCtx5 + 16 | 0; //@line 17777
  HEAP32[$619 >> 2] = $8; //@line 17778
  $620 = $ReallocAsyncCtx5 + 20 | 0; //@line 17779
  HEAP8[$620 >> 0] = $604; //@line 17780
  $621 = $ReallocAsyncCtx5 + 24 | 0; //@line 17781
  HEAP32[$621 >> 2] = $10; //@line 17782
  $622 = $ReallocAsyncCtx5 + 28 | 0; //@line 17783
  HEAP32[$622 >> 2] = $12; //@line 17784
  $623 = $ReallocAsyncCtx5 + 32 | 0; //@line 17785
  HEAP32[$623 >> 2] = $14; //@line 17786
  $624 = $ReallocAsyncCtx5 + 36 | 0; //@line 17787
  HEAP32[$624 >> 2] = $16; //@line 17788
  $625 = $ReallocAsyncCtx5 + 40 | 0; //@line 17789
  HEAP32[$625 >> 2] = $18; //@line 17790
  $626 = $ReallocAsyncCtx5 + 44 | 0; //@line 17791
  HEAP32[$626 >> 2] = $20; //@line 17792
  $627 = $ReallocAsyncCtx5 + 48 | 0; //@line 17793
  HEAP32[$627 >> 2] = $22; //@line 17794
  $628 = $ReallocAsyncCtx5 + 52 | 0; //@line 17795
  HEAP32[$628 >> 2] = $24; //@line 17796
  $629 = $ReallocAsyncCtx5 + 56 | 0; //@line 17797
  HEAP32[$629 >> 2] = $26; //@line 17798
  $630 = $ReallocAsyncCtx5 + 60 | 0; //@line 17799
  HEAP32[$630 >> 2] = $28; //@line 17800
  $631 = $ReallocAsyncCtx5 + 64 | 0; //@line 17801
  HEAP32[$631 >> 2] = $30; //@line 17802
  $632 = $ReallocAsyncCtx5 + 68 | 0; //@line 17803
  HEAP32[$632 >> 2] = $32; //@line 17804
  $633 = $ReallocAsyncCtx5 + 72 | 0; //@line 17805
  HEAP32[$633 >> 2] = $34; //@line 17806
  $634 = $ReallocAsyncCtx5 + 76 | 0; //@line 17807
  HEAP32[$634 >> 2] = $36; //@line 17808
  $635 = $ReallocAsyncCtx5 + 80 | 0; //@line 17809
  HEAP32[$635 >> 2] = $38; //@line 17810
  $636 = $ReallocAsyncCtx5 + 84 | 0; //@line 17811
  HEAP32[$636 >> 2] = $40; //@line 17812
  $637 = $ReallocAsyncCtx5 + 88 | 0; //@line 17813
  HEAP32[$637 >> 2] = $42; //@line 17814
  $638 = $ReallocAsyncCtx5 + 92 | 0; //@line 17815
  HEAP32[$638 >> 2] = $44; //@line 17816
  $639 = $ReallocAsyncCtx5 + 96 | 0; //@line 17817
  HEAP32[$639 >> 2] = $46; //@line 17818
  $640 = $ReallocAsyncCtx5 + 100 | 0; //@line 17819
  HEAP32[$640 >> 2] = $48; //@line 17820
  $641 = $ReallocAsyncCtx5 + 104 | 0; //@line 17821
  HEAP32[$641 >> 2] = $50; //@line 17822
  $642 = $ReallocAsyncCtx5 + 108 | 0; //@line 17823
  HEAP32[$642 >> 2] = $52; //@line 17824
  $643 = $ReallocAsyncCtx5 + 112 | 0; //@line 17825
  HEAP32[$643 >> 2] = $54; //@line 17826
  $644 = $ReallocAsyncCtx5 + 116 | 0; //@line 17827
  HEAP32[$644 >> 2] = $56; //@line 17828
  $645 = $ReallocAsyncCtx5 + 120 | 0; //@line 17829
  HEAP32[$645 >> 2] = $58; //@line 17830
  $646 = $ReallocAsyncCtx5 + 124 | 0; //@line 17831
  HEAP32[$646 >> 2] = $62; //@line 17832
  $647 = $ReallocAsyncCtx5 + 128 | 0; //@line 17833
  HEAP32[$647 >> 2] = $64; //@line 17834
  $648 = $ReallocAsyncCtx5 + 132 | 0; //@line 17835
  HEAP32[$648 >> 2] = $66; //@line 17836
  $649 = $ReallocAsyncCtx5 + 136 | 0; //@line 17837
  HEAP32[$649 >> 2] = $68; //@line 17838
  $650 = $ReallocAsyncCtx5 + 140 | 0; //@line 17839
  HEAP32[$650 >> 2] = $70; //@line 17840
  $651 = $ReallocAsyncCtx5 + 144 | 0; //@line 17841
  HEAP32[$651 >> 2] = $72; //@line 17842
  $652 = $ReallocAsyncCtx5 + 148 | 0; //@line 17843
  HEAP32[$652 >> 2] = $74; //@line 17844
  $653 = $ReallocAsyncCtx5 + 152 | 0; //@line 17845
  HEAP32[$653 >> 2] = $76; //@line 17846
  $654 = $ReallocAsyncCtx5 + 156 | 0; //@line 17847
  HEAP32[$654 >> 2] = $78; //@line 17848
  $655 = $ReallocAsyncCtx5 + 160 | 0; //@line 17849
  HEAP32[$655 >> 2] = $80; //@line 17850
  $656 = $ReallocAsyncCtx5 + 164 | 0; //@line 17851
  HEAP32[$656 >> 2] = $82; //@line 17852
  $657 = $ReallocAsyncCtx5 + 168 | 0; //@line 17853
  HEAP32[$657 >> 2] = $84; //@line 17854
  $658 = $ReallocAsyncCtx5 + 172 | 0; //@line 17855
  HEAP32[$658 >> 2] = $86; //@line 17856
  $659 = $ReallocAsyncCtx5 + 176 | 0; //@line 17857
  HEAP32[$659 >> 2] = $88; //@line 17858
  $660 = $ReallocAsyncCtx5 + 180 | 0; //@line 17859
  HEAP32[$660 >> 2] = $90; //@line 17860
  $661 = $ReallocAsyncCtx5 + 184 | 0; //@line 17861
  HEAP32[$661 >> 2] = $92; //@line 17862
  $662 = $ReallocAsyncCtx5 + 188 | 0; //@line 17863
  HEAP32[$662 >> 2] = $94; //@line 17864
  $663 = $ReallocAsyncCtx5 + 192 | 0; //@line 17865
  HEAP32[$663 >> 2] = $96; //@line 17866
  $664 = $ReallocAsyncCtx5 + 196 | 0; //@line 17867
  HEAP32[$664 >> 2] = $98; //@line 17868
  $665 = $ReallocAsyncCtx5 + 200 | 0; //@line 17869
  HEAP32[$665 >> 2] = $100; //@line 17870
  $666 = $ReallocAsyncCtx5 + 204 | 0; //@line 17871
  HEAP32[$666 >> 2] = $102; //@line 17872
  $667 = $ReallocAsyncCtx5 + 208 | 0; //@line 17873
  HEAP32[$667 >> 2] = $104; //@line 17874
  $668 = $ReallocAsyncCtx5 + 212 | 0; //@line 17875
  HEAP32[$668 >> 2] = $106; //@line 17876
  $669 = $ReallocAsyncCtx5 + 216 | 0; //@line 17877
  HEAP32[$669 >> 2] = $108; //@line 17878
  $670 = $ReallocAsyncCtx5 + 220 | 0; //@line 17879
  HEAP32[$670 >> 2] = $110; //@line 17880
  $671 = $ReallocAsyncCtx5 + 224 | 0; //@line 17881
  HEAP32[$671 >> 2] = $112; //@line 17882
  $672 = $ReallocAsyncCtx5 + 228 | 0; //@line 17883
  HEAP32[$672 >> 2] = $114; //@line 17884
  $673 = $ReallocAsyncCtx5 + 232 | 0; //@line 17885
  HEAP32[$673 >> 2] = $116; //@line 17886
  $674 = $ReallocAsyncCtx5 + 236 | 0; //@line 17887
  HEAP32[$674 >> 2] = $118; //@line 17888
  $675 = $ReallocAsyncCtx5 + 240 | 0; //@line 17889
  HEAP32[$675 >> 2] = $120; //@line 17890
  $676 = $ReallocAsyncCtx5 + 244 | 0; //@line 17891
  HEAP32[$676 >> 2] = $122; //@line 17892
  $677 = $ReallocAsyncCtx5 + 248 | 0; //@line 17893
  HEAP8[$677 >> 0] = $124; //@line 17894
  $678 = $ReallocAsyncCtx5 + 249 | 0; //@line 17895
  HEAP8[$678 >> 0] = $126; //@line 17896
  $679 = $ReallocAsyncCtx5 + 252 | 0; //@line 17897
  HEAP32[$679 >> 2] = $128; //@line 17898
  $680 = $ReallocAsyncCtx5 + 256 | 0; //@line 17899
  HEAP8[$680 >> 0] = $130; //@line 17900
  $681 = $ReallocAsyncCtx5 + 260 | 0; //@line 17901
  HEAP32[$681 >> 2] = $132; //@line 17902
  $682 = $ReallocAsyncCtx5 + 264 | 0; //@line 17903
  HEAP32[$682 >> 2] = $136; //@line 17904
  sp = STACKTOP; //@line 17905
  return;
 } else if ((label | 0) == 36) {
  HEAP32[___async_retval >> 2] = $$096$be; //@line 17910
  return;
 }
}
function __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_374($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0$i104 = 0, $$096$be = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $130 = 0, $132 = 0, $134 = 0, $137 = 0, $14 = 0, $148 = 0, $149 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $231 = 0, $234 = 0, $239 = 0, $24 = 0, $247 = 0, $26 = 0, $266 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $352 = 0, $353 = 0, $36 = 0, $364 = 0, $365 = 0, $38 = 0, $4 = 0, $40 = 0, $402 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $478 = 0, $48 = 0, $482 = 0, $486 = 0, $489 = 0, $495 = 0, $498 = 0, $499 = 0, $50 = 0, $508 = 0, $509 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $58 = 0, $595 = 0, $6 = 0, $60 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 17951
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17953
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17955
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17957
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17959
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17961
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17963
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 17965
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 17967
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 17969
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 17971
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 17973
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 17975
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 17977
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 17979
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 17981
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 17983
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 17985
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 17987
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 17989
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 17991
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 17993
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 17995
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 17997
 $48 = HEAP8[$0 + 96 >> 0] | 0; //@line 17999
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 18001
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 18003
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 18005
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 18007
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 18009
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 18011
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 18013
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 18015
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 18017
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 18019
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 18021
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 18023
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 18025
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 18027
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 18029
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 18031
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 18033
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 18035
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 18037
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 18039
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 18041
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 18043
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 18045
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 18047
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 18049
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 18051
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 18053
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 18055
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 18057
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 18059
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 18061
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 18063
 $114 = HEAP32[$0 + 228 >> 2] | 0; //@line 18065
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 18067
 $118 = HEAP32[$0 + 236 >> 2] | 0; //@line 18069
 $120 = HEAP32[$0 + 240 >> 2] | 0; //@line 18071
 $122 = HEAP32[$0 + 244 >> 2] | 0; //@line 18073
 $124 = HEAP8[$0 + 248 >> 0] | 0; //@line 18075
 $126 = HEAP8[$0 + 249 >> 0] | 0; //@line 18077
 $128 = HEAP32[$0 + 252 >> 2] | 0; //@line 18079
 $130 = HEAP8[$0 + 256 >> 0] | 0; //@line 18081
 $132 = HEAP32[$0 + 260 >> 2] | 0; //@line 18083
 $134 = HEAP32[$0 + 264 >> 2] | 0; //@line 18085
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 18087
 if (($AsyncRetVal & 7) == 7) {
  HEAP8[$50 >> 0] = HEAP8[$18 >> 0] | 0; //@line 18092
  HEAP32[$70 >> 2] = HEAP32[$30 >> 2]; //@line 18094
  HEAP8[$82 >> 0] = HEAP8[$28 >> 0] | 0; //@line 18096
 }
 $352 = HEAP8[$110 >> 0] | 0; //@line 18099
 $353 = $352 & 255; //@line 18100
 if (((-128 - (HEAP8[$106 >> 0] | 0) & 255) + -1 | 0) > ($353 | 0)) {
  HEAP8[$92 + 4 + $353 >> 0] = 5; //@line 18108
  HEAP8[$110 >> 0] = $352 + 2 << 24 >> 24; //@line 18110
  HEAP8[($352 + 1 & 255) + ($92 + 4) >> 0] = $AsyncRetVal; //@line 18113
  HEAP8[$94 >> 0] = 1; //@line 18114
  HEAP8[$116 >> 0] = 1; //@line 18115
  $$0$i104 = 0; //@line 18116
 } else {
  $$0$i104 = -1e3; //@line 18118
 }
 $$0$be = $48; //@line 18120
 $$096$be = $$0$i104; //@line 18120
 L8 : while (1) {
  if (($$0$be & 255) >= ($126 & 255)) {
   label = 33; //@line 18124
   break;
  }
  $137 = $$0$be + 1 << 24 >> 24; //@line 18128
  switch (HEAP8[$120 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 18133
    break L8;
    break;
   }
  case 5:
   {
    label = 9; //@line 18138
    break L8;
    break;
   }
  case 7:
   {
    label = 19; //@line 18143
    break L8;
    break;
   }
  case 9:
   {
    label = 24; //@line 18148
    break L8;
    break;
   }
  case 10:
   {
    label = 29; //@line 18153
    break L8;
    break;
   }
  case 2:
   {
    HEAP32[$62 >> 2] = 0; //@line 18158
    HEAP8[$54 >> 0] = HEAP8[$120 + ($137 & 255) >> 0] | 0; //@line 18163
    HEAP8[$38 >> 0] = HEAP8[$120 + ($$0$be + 2 & 255) >> 0] | 0; //@line 18168
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 18169
    continue L8;
    break;
   }
  case 4:
   {
    $231 = $$0$be + 2 << 24 >> 24; //@line 18174
    $234 = HEAP8[$120 + ($137 & 255) >> 0] | 0; //@line 18177
    HEAP8[$132 >> 0] = $234; //@line 18178
    HEAP16[$6 >> 1] = 1 << ($234 & 255); //@line 18182
    $239 = HEAP8[$110 >> 0] | 0; //@line 18184
    if (($239 & 255) >= (-128 - (HEAP8[$106 >> 0] | 0) & 255)) {
     $$0$be = $231; //@line 18188
     $$096$be = -1e3; //@line 18188
     continue L8;
    }
    HEAP8[$110 >> 0] = $239 + 1 << 24 >> 24; //@line 18194
    HEAP8[($239 & 255) + ($92 + 4) >> 0] = 4; //@line 18195
    HEAP8[$116 >> 0] = 1; //@line 18196
    $$0$be = $231; //@line 18197
    $$096$be = 0; //@line 18197
    continue L8;
    break;
   }
  case 6:
   {
    $364 = HEAP8[$110 >> 0] | 0; //@line 18203
    $365 = $364 & 255; //@line 18204
    if (((-128 - (HEAP8[$106 >> 0] | 0) & 255) + -2 | 0) <= ($365 | 0)) {
     $$0$be = $137; //@line 18210
     $$096$be = -1e3; //@line 18210
     continue L8;
    }
    HEAP8[$92 + 4 + $365 >> 0] = 6; //@line 18215
    HEAP8[($364 + 1 & 255) + ($92 + 4) >> 0] = -1; //@line 18219
    HEAP8[$110 >> 0] = $364 + 3 << 24 >> 24; //@line 18221
    HEAP8[($364 + 2 & 255) + ($92 + 4) >> 0] = $130; //@line 18224
    HEAP8[$116 >> 0] = 1; //@line 18225
    $$0$be = $137; //@line 18226
    $$096$be = 0; //@line 18226
    continue L8;
    break;
   }
  case 8:
   {
    $478 = $$0$be + 2 << 24 >> 24; //@line 18231
    $482 = HEAP8[$120 + ($137 & 255) >> 0] & 15; //@line 18235
    $486 = ($482 + ($482 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 18240
    HEAP32[$36 >> 2] = $486; //@line 18241
    HEAP32[$24 >> 2] = $486 + 1e3; //@line 18243
    $489 = HEAP8[$110 >> 0] | 0; //@line 18245
    if (($489 & 255) >= (-128 - (HEAP8[$106 >> 0] | 0) & 255)) {
     $$0$be = $478; //@line 18249
     $$096$be = -1e3; //@line 18249
     continue L8;
    }
    HEAP8[$110 >> 0] = $489 + 1 << 24 >> 24; //@line 18255
    HEAP8[($489 & 255) + ($92 + 4) >> 0] = 8; //@line 18256
    HEAP8[$94 >> 0] = 1; //@line 18257
    HEAP8[$116 >> 0] = 1; //@line 18258
    $$0$be = $478; //@line 18259
    $$096$be = 0; //@line 18259
    continue L8;
    break;
   }
  default:
   {
    $$0$be = $137; //@line 18264
    $$096$be = -1013; //@line 18264
    continue L8;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$128 >> 0] = 0; //@line 18270
  HEAP8[$64 >> 0] = 0; //@line 18271
  HEAP8[$74 >> 0] = 0; //@line 18272
  HEAP8[$46 >> 0] = 0; //@line 18273
  $148 = $137 & 255; //@line 18274
  $149 = $148 + -1 | 0; //@line 18275
  HEAP32[$26 >> 2] = $120 + $149; //@line 18277
  HEAP8[$10 >> 0] = $88 - $149; //@line 18280
  HEAP8[$8 >> 0] = HEAP8[$4 >> 0] | 0; //@line 18282
  HEAP8[$32 >> 0] = HEAP8[$20 >> 0] | 0; //@line 18284
  HEAP8[$52 >> 0] = HEAP8[$44 >> 0] | 0; //@line 18286
  HEAP8[$72 >> 0] = HEAP8[$68 >> 0] | 0; //@line 18288
  HEAP8[$90 >> 0] = HEAP8[$80 >> 0] | 0; //@line 18290
  $160 = HEAP32[(HEAP32[$98 >> 2] | 0) + 36 >> 2] | 0; //@line 18293
  $ReallocAsyncCtx = _emscripten_realloc_async_context(272) | 0; //@line 18294
  $161 = FUNCTION_TABLE_iiiiiii[$160 & 3]($134, $122, $128, $64, $74, $46) | 0; //@line 18295
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 487; //@line 18298
   $162 = $ReallocAsyncCtx + 4 | 0; //@line 18299
   HEAP32[$162 >> 2] = $2; //@line 18300
   $163 = $ReallocAsyncCtx + 8 | 0; //@line 18301
   HEAP32[$163 >> 2] = $4; //@line 18302
   $164 = $ReallocAsyncCtx + 12 | 0; //@line 18303
   HEAP32[$164 >> 2] = $6; //@line 18304
   $165 = $ReallocAsyncCtx + 16 | 0; //@line 18305
   HEAP32[$165 >> 2] = $8; //@line 18306
   $166 = $ReallocAsyncCtx + 20 | 0; //@line 18307
   HEAP32[$166 >> 2] = $10; //@line 18308
   $167 = $ReallocAsyncCtx + 24 | 0; //@line 18309
   HEAP32[$167 >> 2] = $12; //@line 18310
   $168 = $ReallocAsyncCtx + 28 | 0; //@line 18311
   HEAP32[$168 >> 2] = $14; //@line 18312
   $169 = $ReallocAsyncCtx + 32 | 0; //@line 18313
   HEAP32[$169 >> 2] = $16; //@line 18314
   $170 = $ReallocAsyncCtx + 36 | 0; //@line 18315
   HEAP32[$170 >> 2] = $18; //@line 18316
   $171 = $ReallocAsyncCtx + 40 | 0; //@line 18317
   HEAP32[$171 >> 2] = $20; //@line 18318
   $172 = $ReallocAsyncCtx + 44 | 0; //@line 18319
   HEAP32[$172 >> 2] = $22; //@line 18320
   $173 = $ReallocAsyncCtx + 48 | 0; //@line 18321
   HEAP32[$173 >> 2] = $24; //@line 18322
   $174 = $ReallocAsyncCtx + 52 | 0; //@line 18323
   HEAP32[$174 >> 2] = $26; //@line 18324
   $175 = $ReallocAsyncCtx + 56 | 0; //@line 18325
   HEAP32[$175 >> 2] = $28; //@line 18326
   $176 = $ReallocAsyncCtx + 60 | 0; //@line 18327
   HEAP32[$176 >> 2] = $30; //@line 18328
   $177 = $ReallocAsyncCtx + 64 | 0; //@line 18329
   HEAP32[$177 >> 2] = $32; //@line 18330
   $178 = $ReallocAsyncCtx + 68 | 0; //@line 18331
   HEAP32[$178 >> 2] = $34; //@line 18332
   $179 = $ReallocAsyncCtx + 72 | 0; //@line 18333
   HEAP32[$179 >> 2] = $36; //@line 18334
   $180 = $ReallocAsyncCtx + 76 | 0; //@line 18335
   HEAP32[$180 >> 2] = $38; //@line 18336
   $181 = $ReallocAsyncCtx + 80 | 0; //@line 18337
   HEAP32[$181 >> 2] = $40; //@line 18338
   $182 = $ReallocAsyncCtx + 84 | 0; //@line 18339
   HEAP32[$182 >> 2] = $42; //@line 18340
   $183 = $ReallocAsyncCtx + 88 | 0; //@line 18341
   HEAP32[$183 >> 2] = $44; //@line 18342
   $184 = $ReallocAsyncCtx + 92 | 0; //@line 18343
   HEAP32[$184 >> 2] = $46; //@line 18344
   $185 = $ReallocAsyncCtx + 96 | 0; //@line 18345
   HEAP32[$185 >> 2] = $58; //@line 18346
   $186 = $ReallocAsyncCtx + 100 | 0; //@line 18347
   HEAP32[$186 >> 2] = $50; //@line 18348
   $187 = $ReallocAsyncCtx + 104 | 0; //@line 18349
   HEAP32[$187 >> 2] = $52; //@line 18350
   $188 = $ReallocAsyncCtx + 108 | 0; //@line 18351
   HEAP32[$188 >> 2] = $54; //@line 18352
   $189 = $ReallocAsyncCtx + 112 | 0; //@line 18353
   HEAP32[$189 >> 2] = $56; //@line 18354
   $190 = $ReallocAsyncCtx + 116 | 0; //@line 18355
   HEAP32[$190 >> 2] = $60; //@line 18356
   $191 = $ReallocAsyncCtx + 120 | 0; //@line 18357
   HEAP32[$191 >> 2] = $148; //@line 18358
   $192 = $ReallocAsyncCtx + 124 | 0; //@line 18359
   HEAP32[$192 >> 2] = $62; //@line 18360
   $193 = $ReallocAsyncCtx + 128 | 0; //@line 18361
   HEAP32[$193 >> 2] = $64; //@line 18362
   $194 = $ReallocAsyncCtx + 132 | 0; //@line 18363
   HEAP32[$194 >> 2] = $66; //@line 18364
   $195 = $ReallocAsyncCtx + 136 | 0; //@line 18365
   HEAP32[$195 >> 2] = $68; //@line 18366
   $196 = $ReallocAsyncCtx + 140 | 0; //@line 18367
   HEAP32[$196 >> 2] = $70; //@line 18368
   $197 = $ReallocAsyncCtx + 144 | 0; //@line 18369
   HEAP32[$197 >> 2] = $72; //@line 18370
   $198 = $ReallocAsyncCtx + 148 | 0; //@line 18371
   HEAP32[$198 >> 2] = $74; //@line 18372
   $199 = $ReallocAsyncCtx + 152 | 0; //@line 18373
   HEAP32[$199 >> 2] = $76; //@line 18374
   $200 = $ReallocAsyncCtx + 156 | 0; //@line 18375
   HEAP32[$200 >> 2] = $78; //@line 18376
   $201 = $ReallocAsyncCtx + 160 | 0; //@line 18377
   HEAP32[$201 >> 2] = $80; //@line 18378
   $202 = $ReallocAsyncCtx + 164 | 0; //@line 18379
   HEAP32[$202 >> 2] = $82; //@line 18380
   $203 = $ReallocAsyncCtx + 168 | 0; //@line 18381
   HEAP32[$203 >> 2] = $84; //@line 18382
   $204 = $ReallocAsyncCtx + 172 | 0; //@line 18383
   HEAP32[$204 >> 2] = $86; //@line 18384
   $205 = $ReallocAsyncCtx + 176 | 0; //@line 18385
   HEAP32[$205 >> 2] = $88; //@line 18386
   $206 = $ReallocAsyncCtx + 180 | 0; //@line 18387
   HEAP32[$206 >> 2] = $90; //@line 18388
   $207 = $ReallocAsyncCtx + 184 | 0; //@line 18389
   HEAP32[$207 >> 2] = $92; //@line 18390
   $208 = $ReallocAsyncCtx + 188 | 0; //@line 18391
   HEAP32[$208 >> 2] = $94; //@line 18392
   $209 = $ReallocAsyncCtx + 192 | 0; //@line 18393
   HEAP32[$209 >> 2] = $96; //@line 18394
   $210 = $ReallocAsyncCtx + 196 | 0; //@line 18395
   HEAP32[$210 >> 2] = $98; //@line 18396
   $211 = $ReallocAsyncCtx + 200 | 0; //@line 18397
   HEAP32[$211 >> 2] = $100; //@line 18398
   $212 = $ReallocAsyncCtx + 204 | 0; //@line 18399
   HEAP32[$212 >> 2] = $102; //@line 18400
   $213 = $ReallocAsyncCtx + 208 | 0; //@line 18401
   HEAP32[$213 >> 2] = $104; //@line 18402
   $214 = $ReallocAsyncCtx + 212 | 0; //@line 18403
   HEAP32[$214 >> 2] = $106; //@line 18404
   $215 = $ReallocAsyncCtx + 216 | 0; //@line 18405
   HEAP32[$215 >> 2] = $108; //@line 18406
   $216 = $ReallocAsyncCtx + 220 | 0; //@line 18407
   HEAP32[$216 >> 2] = $110; //@line 18408
   $217 = $ReallocAsyncCtx + 224 | 0; //@line 18409
   HEAP32[$217 >> 2] = $112; //@line 18410
   $218 = $ReallocAsyncCtx + 228 | 0; //@line 18411
   HEAP32[$218 >> 2] = $114; //@line 18412
   $219 = $ReallocAsyncCtx + 232 | 0; //@line 18413
   HEAP32[$219 >> 2] = $116; //@line 18414
   $220 = $ReallocAsyncCtx + 236 | 0; //@line 18415
   HEAP32[$220 >> 2] = $118; //@line 18416
   $221 = $ReallocAsyncCtx + 240 | 0; //@line 18417
   HEAP32[$221 >> 2] = $120; //@line 18418
   $222 = $ReallocAsyncCtx + 244 | 0; //@line 18419
   HEAP32[$222 >> 2] = $122; //@line 18420
   $223 = $ReallocAsyncCtx + 248 | 0; //@line 18421
   HEAP8[$223 >> 0] = $124; //@line 18422
   $224 = $ReallocAsyncCtx + 249 | 0; //@line 18423
   HEAP8[$224 >> 0] = $126; //@line 18424
   $225 = $ReallocAsyncCtx + 252 | 0; //@line 18425
   HEAP32[$225 >> 2] = $128; //@line 18426
   $226 = $ReallocAsyncCtx + 256 | 0; //@line 18427
   HEAP8[$226 >> 0] = $130; //@line 18428
   $227 = $ReallocAsyncCtx + 260 | 0; //@line 18429
   HEAP32[$227 >> 2] = $132; //@line 18430
   $228 = $ReallocAsyncCtx + 264 | 0; //@line 18431
   HEAP32[$228 >> 2] = $$096$be; //@line 18432
   $229 = $ReallocAsyncCtx + 268 | 0; //@line 18433
   HEAP32[$229 >> 2] = $134; //@line 18434
   sp = STACKTOP; //@line 18435
   return;
  }
  HEAP8[___async_retval >> 0] = $161; //@line 18439
  ___async_unwind = 0; //@line 18440
  HEAP32[$ReallocAsyncCtx >> 2] = 487; //@line 18441
  $162 = $ReallocAsyncCtx + 4 | 0; //@line 18442
  HEAP32[$162 >> 2] = $2; //@line 18443
  $163 = $ReallocAsyncCtx + 8 | 0; //@line 18444
  HEAP32[$163 >> 2] = $4; //@line 18445
  $164 = $ReallocAsyncCtx + 12 | 0; //@line 18446
  HEAP32[$164 >> 2] = $6; //@line 18447
  $165 = $ReallocAsyncCtx + 16 | 0; //@line 18448
  HEAP32[$165 >> 2] = $8; //@line 18449
  $166 = $ReallocAsyncCtx + 20 | 0; //@line 18450
  HEAP32[$166 >> 2] = $10; //@line 18451
  $167 = $ReallocAsyncCtx + 24 | 0; //@line 18452
  HEAP32[$167 >> 2] = $12; //@line 18453
  $168 = $ReallocAsyncCtx + 28 | 0; //@line 18454
  HEAP32[$168 >> 2] = $14; //@line 18455
  $169 = $ReallocAsyncCtx + 32 | 0; //@line 18456
  HEAP32[$169 >> 2] = $16; //@line 18457
  $170 = $ReallocAsyncCtx + 36 | 0; //@line 18458
  HEAP32[$170 >> 2] = $18; //@line 18459
  $171 = $ReallocAsyncCtx + 40 | 0; //@line 18460
  HEAP32[$171 >> 2] = $20; //@line 18461
  $172 = $ReallocAsyncCtx + 44 | 0; //@line 18462
  HEAP32[$172 >> 2] = $22; //@line 18463
  $173 = $ReallocAsyncCtx + 48 | 0; //@line 18464
  HEAP32[$173 >> 2] = $24; //@line 18465
  $174 = $ReallocAsyncCtx + 52 | 0; //@line 18466
  HEAP32[$174 >> 2] = $26; //@line 18467
  $175 = $ReallocAsyncCtx + 56 | 0; //@line 18468
  HEAP32[$175 >> 2] = $28; //@line 18469
  $176 = $ReallocAsyncCtx + 60 | 0; //@line 18470
  HEAP32[$176 >> 2] = $30; //@line 18471
  $177 = $ReallocAsyncCtx + 64 | 0; //@line 18472
  HEAP32[$177 >> 2] = $32; //@line 18473
  $178 = $ReallocAsyncCtx + 68 | 0; //@line 18474
  HEAP32[$178 >> 2] = $34; //@line 18475
  $179 = $ReallocAsyncCtx + 72 | 0; //@line 18476
  HEAP32[$179 >> 2] = $36; //@line 18477
  $180 = $ReallocAsyncCtx + 76 | 0; //@line 18478
  HEAP32[$180 >> 2] = $38; //@line 18479
  $181 = $ReallocAsyncCtx + 80 | 0; //@line 18480
  HEAP32[$181 >> 2] = $40; //@line 18481
  $182 = $ReallocAsyncCtx + 84 | 0; //@line 18482
  HEAP32[$182 >> 2] = $42; //@line 18483
  $183 = $ReallocAsyncCtx + 88 | 0; //@line 18484
  HEAP32[$183 >> 2] = $44; //@line 18485
  $184 = $ReallocAsyncCtx + 92 | 0; //@line 18486
  HEAP32[$184 >> 2] = $46; //@line 18487
  $185 = $ReallocAsyncCtx + 96 | 0; //@line 18488
  HEAP32[$185 >> 2] = $58; //@line 18489
  $186 = $ReallocAsyncCtx + 100 | 0; //@line 18490
  HEAP32[$186 >> 2] = $50; //@line 18491
  $187 = $ReallocAsyncCtx + 104 | 0; //@line 18492
  HEAP32[$187 >> 2] = $52; //@line 18493
  $188 = $ReallocAsyncCtx + 108 | 0; //@line 18494
  HEAP32[$188 >> 2] = $54; //@line 18495
  $189 = $ReallocAsyncCtx + 112 | 0; //@line 18496
  HEAP32[$189 >> 2] = $56; //@line 18497
  $190 = $ReallocAsyncCtx + 116 | 0; //@line 18498
  HEAP32[$190 >> 2] = $60; //@line 18499
  $191 = $ReallocAsyncCtx + 120 | 0; //@line 18500
  HEAP32[$191 >> 2] = $148; //@line 18501
  $192 = $ReallocAsyncCtx + 124 | 0; //@line 18502
  HEAP32[$192 >> 2] = $62; //@line 18503
  $193 = $ReallocAsyncCtx + 128 | 0; //@line 18504
  HEAP32[$193 >> 2] = $64; //@line 18505
  $194 = $ReallocAsyncCtx + 132 | 0; //@line 18506
  HEAP32[$194 >> 2] = $66; //@line 18507
  $195 = $ReallocAsyncCtx + 136 | 0; //@line 18508
  HEAP32[$195 >> 2] = $68; //@line 18509
  $196 = $ReallocAsyncCtx + 140 | 0; //@line 18510
  HEAP32[$196 >> 2] = $70; //@line 18511
  $197 = $ReallocAsyncCtx + 144 | 0; //@line 18512
  HEAP32[$197 >> 2] = $72; //@line 18513
  $198 = $ReallocAsyncCtx + 148 | 0; //@line 18514
  HEAP32[$198 >> 2] = $74; //@line 18515
  $199 = $ReallocAsyncCtx + 152 | 0; //@line 18516
  HEAP32[$199 >> 2] = $76; //@line 18517
  $200 = $ReallocAsyncCtx + 156 | 0; //@line 18518
  HEAP32[$200 >> 2] = $78; //@line 18519
  $201 = $ReallocAsyncCtx + 160 | 0; //@line 18520
  HEAP32[$201 >> 2] = $80; //@line 18521
  $202 = $ReallocAsyncCtx + 164 | 0; //@line 18522
  HEAP32[$202 >> 2] = $82; //@line 18523
  $203 = $ReallocAsyncCtx + 168 | 0; //@line 18524
  HEAP32[$203 >> 2] = $84; //@line 18525
  $204 = $ReallocAsyncCtx + 172 | 0; //@line 18526
  HEAP32[$204 >> 2] = $86; //@line 18527
  $205 = $ReallocAsyncCtx + 176 | 0; //@line 18528
  HEAP32[$205 >> 2] = $88; //@line 18529
  $206 = $ReallocAsyncCtx + 180 | 0; //@line 18530
  HEAP32[$206 >> 2] = $90; //@line 18531
  $207 = $ReallocAsyncCtx + 184 | 0; //@line 18532
  HEAP32[$207 >> 2] = $92; //@line 18533
  $208 = $ReallocAsyncCtx + 188 | 0; //@line 18534
  HEAP32[$208 >> 2] = $94; //@line 18535
  $209 = $ReallocAsyncCtx + 192 | 0; //@line 18536
  HEAP32[$209 >> 2] = $96; //@line 18537
  $210 = $ReallocAsyncCtx + 196 | 0; //@line 18538
  HEAP32[$210 >> 2] = $98; //@line 18539
  $211 = $ReallocAsyncCtx + 200 | 0; //@line 18540
  HEAP32[$211 >> 2] = $100; //@line 18541
  $212 = $ReallocAsyncCtx + 204 | 0; //@line 18542
  HEAP32[$212 >> 2] = $102; //@line 18543
  $213 = $ReallocAsyncCtx + 208 | 0; //@line 18544
  HEAP32[$213 >> 2] = $104; //@line 18545
  $214 = $ReallocAsyncCtx + 212 | 0; //@line 18546
  HEAP32[$214 >> 2] = $106; //@line 18547
  $215 = $ReallocAsyncCtx + 216 | 0; //@line 18548
  HEAP32[$215 >> 2] = $108; //@line 18549
  $216 = $ReallocAsyncCtx + 220 | 0; //@line 18550
  HEAP32[$216 >> 2] = $110; //@line 18551
  $217 = $ReallocAsyncCtx + 224 | 0; //@line 18552
  HEAP32[$217 >> 2] = $112; //@line 18553
  $218 = $ReallocAsyncCtx + 228 | 0; //@line 18554
  HEAP32[$218 >> 2] = $114; //@line 18555
  $219 = $ReallocAsyncCtx + 232 | 0; //@line 18556
  HEAP32[$219 >> 2] = $116; //@line 18557
  $220 = $ReallocAsyncCtx + 236 | 0; //@line 18558
  HEAP32[$220 >> 2] = $118; //@line 18559
  $221 = $ReallocAsyncCtx + 240 | 0; //@line 18560
  HEAP32[$221 >> 2] = $120; //@line 18561
  $222 = $ReallocAsyncCtx + 244 | 0; //@line 18562
  HEAP32[$222 >> 2] = $122; //@line 18563
  $223 = $ReallocAsyncCtx + 248 | 0; //@line 18564
  HEAP8[$223 >> 0] = $124; //@line 18565
  $224 = $ReallocAsyncCtx + 249 | 0; //@line 18566
  HEAP8[$224 >> 0] = $126; //@line 18567
  $225 = $ReallocAsyncCtx + 252 | 0; //@line 18568
  HEAP32[$225 >> 2] = $128; //@line 18569
  $226 = $ReallocAsyncCtx + 256 | 0; //@line 18570
  HEAP8[$226 >> 0] = $130; //@line 18571
  $227 = $ReallocAsyncCtx + 260 | 0; //@line 18572
  HEAP32[$227 >> 2] = $132; //@line 18573
  $228 = $ReallocAsyncCtx + 264 | 0; //@line 18574
  HEAP32[$228 >> 2] = $$096$be; //@line 18575
  $229 = $ReallocAsyncCtx + 268 | 0; //@line 18576
  HEAP32[$229 >> 2] = $134; //@line 18577
  sp = STACKTOP; //@line 18578
  return;
 } else if ((label | 0) == 9) {
  $247 = HEAP8[$120 + ($137 & 255) >> 0] | 0; //@line 18584
  HEAP8[$28 >> 0] = ($247 & 255) >>> 4 & 7; //@line 18589
  HEAP8[$18 >> 0] = $247 & 15; //@line 18591
  $266 = $$0$be + 5 << 24 >> 24; //@line 18605
  HEAP32[$30 >> 2] = (HEAPU8[$120 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$120 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$120 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 18613
  $276 = HEAP32[(HEAP32[$58 >> 2] | 0) + 40 >> 2] | 0; //@line 18616
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(268) | 0; //@line 18617
  $277 = FUNCTION_TABLE_iii[$276 & 31]($134, $40) | 0; //@line 18618
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 488; //@line 18621
   $278 = $ReallocAsyncCtx2 + 4 | 0; //@line 18622
   HEAP32[$278 >> 2] = $2; //@line 18623
   $279 = $ReallocAsyncCtx2 + 8 | 0; //@line 18624
   HEAP32[$279 >> 2] = $4; //@line 18625
   $280 = $ReallocAsyncCtx2 + 12 | 0; //@line 18626
   HEAP32[$280 >> 2] = $6; //@line 18627
   $281 = $ReallocAsyncCtx2 + 16 | 0; //@line 18628
   HEAP32[$281 >> 2] = $8; //@line 18629
   $282 = $ReallocAsyncCtx2 + 20 | 0; //@line 18630
   HEAP32[$282 >> 2] = $10; //@line 18631
   $283 = $ReallocAsyncCtx2 + 24 | 0; //@line 18632
   HEAP32[$283 >> 2] = $12; //@line 18633
   $284 = $ReallocAsyncCtx2 + 28 | 0; //@line 18634
   HEAP32[$284 >> 2] = $14; //@line 18635
   $285 = $ReallocAsyncCtx2 + 32 | 0; //@line 18636
   HEAP32[$285 >> 2] = $16; //@line 18637
   $286 = $ReallocAsyncCtx2 + 36 | 0; //@line 18638
   HEAP32[$286 >> 2] = $18; //@line 18639
   $287 = $ReallocAsyncCtx2 + 40 | 0; //@line 18640
   HEAP32[$287 >> 2] = $20; //@line 18641
   $288 = $ReallocAsyncCtx2 + 44 | 0; //@line 18642
   HEAP32[$288 >> 2] = $22; //@line 18643
   $289 = $ReallocAsyncCtx2 + 48 | 0; //@line 18644
   HEAP32[$289 >> 2] = $24; //@line 18645
   $290 = $ReallocAsyncCtx2 + 52 | 0; //@line 18646
   HEAP32[$290 >> 2] = $26; //@line 18647
   $291 = $ReallocAsyncCtx2 + 56 | 0; //@line 18648
   HEAP32[$291 >> 2] = $28; //@line 18649
   $292 = $ReallocAsyncCtx2 + 60 | 0; //@line 18650
   HEAP32[$292 >> 2] = $30; //@line 18651
   $293 = $ReallocAsyncCtx2 + 64 | 0; //@line 18652
   HEAP32[$293 >> 2] = $32; //@line 18653
   $294 = $ReallocAsyncCtx2 + 68 | 0; //@line 18654
   HEAP32[$294 >> 2] = $34; //@line 18655
   $295 = $ReallocAsyncCtx2 + 72 | 0; //@line 18656
   HEAP32[$295 >> 2] = $36; //@line 18657
   $296 = $ReallocAsyncCtx2 + 76 | 0; //@line 18658
   HEAP32[$296 >> 2] = $38; //@line 18659
   $297 = $ReallocAsyncCtx2 + 80 | 0; //@line 18660
   HEAP32[$297 >> 2] = $40; //@line 18661
   $298 = $ReallocAsyncCtx2 + 84 | 0; //@line 18662
   HEAP32[$298 >> 2] = $42; //@line 18663
   $299 = $ReallocAsyncCtx2 + 88 | 0; //@line 18664
   HEAP32[$299 >> 2] = $44; //@line 18665
   $300 = $ReallocAsyncCtx2 + 92 | 0; //@line 18666
   HEAP32[$300 >> 2] = $46; //@line 18667
   $301 = $ReallocAsyncCtx2 + 96 | 0; //@line 18668
   HEAP8[$301 >> 0] = $266; //@line 18669
   $302 = $ReallocAsyncCtx2 + 100 | 0; //@line 18670
   HEAP32[$302 >> 2] = $50; //@line 18671
   $303 = $ReallocAsyncCtx2 + 104 | 0; //@line 18672
   HEAP32[$303 >> 2] = $52; //@line 18673
   $304 = $ReallocAsyncCtx2 + 108 | 0; //@line 18674
   HEAP32[$304 >> 2] = $54; //@line 18675
   $305 = $ReallocAsyncCtx2 + 112 | 0; //@line 18676
   HEAP32[$305 >> 2] = $56; //@line 18677
   $306 = $ReallocAsyncCtx2 + 116 | 0; //@line 18678
   HEAP32[$306 >> 2] = $58; //@line 18679
   $307 = $ReallocAsyncCtx2 + 120 | 0; //@line 18680
   HEAP32[$307 >> 2] = $60; //@line 18681
   $308 = $ReallocAsyncCtx2 + 124 | 0; //@line 18682
   HEAP32[$308 >> 2] = $62; //@line 18683
   $309 = $ReallocAsyncCtx2 + 128 | 0; //@line 18684
   HEAP32[$309 >> 2] = $64; //@line 18685
   $310 = $ReallocAsyncCtx2 + 132 | 0; //@line 18686
   HEAP32[$310 >> 2] = $66; //@line 18687
   $311 = $ReallocAsyncCtx2 + 136 | 0; //@line 18688
   HEAP32[$311 >> 2] = $68; //@line 18689
   $312 = $ReallocAsyncCtx2 + 140 | 0; //@line 18690
   HEAP32[$312 >> 2] = $70; //@line 18691
   $313 = $ReallocAsyncCtx2 + 144 | 0; //@line 18692
   HEAP32[$313 >> 2] = $72; //@line 18693
   $314 = $ReallocAsyncCtx2 + 148 | 0; //@line 18694
   HEAP32[$314 >> 2] = $74; //@line 18695
   $315 = $ReallocAsyncCtx2 + 152 | 0; //@line 18696
   HEAP32[$315 >> 2] = $76; //@line 18697
   $316 = $ReallocAsyncCtx2 + 156 | 0; //@line 18698
   HEAP32[$316 >> 2] = $78; //@line 18699
   $317 = $ReallocAsyncCtx2 + 160 | 0; //@line 18700
   HEAP32[$317 >> 2] = $80; //@line 18701
   $318 = $ReallocAsyncCtx2 + 164 | 0; //@line 18702
   HEAP32[$318 >> 2] = $82; //@line 18703
   $319 = $ReallocAsyncCtx2 + 168 | 0; //@line 18704
   HEAP32[$319 >> 2] = $84; //@line 18705
   $320 = $ReallocAsyncCtx2 + 172 | 0; //@line 18706
   HEAP32[$320 >> 2] = $86; //@line 18707
   $321 = $ReallocAsyncCtx2 + 176 | 0; //@line 18708
   HEAP32[$321 >> 2] = $88; //@line 18709
   $322 = $ReallocAsyncCtx2 + 180 | 0; //@line 18710
   HEAP32[$322 >> 2] = $90; //@line 18711
   $323 = $ReallocAsyncCtx2 + 184 | 0; //@line 18712
   HEAP32[$323 >> 2] = $92; //@line 18713
   $324 = $ReallocAsyncCtx2 + 188 | 0; //@line 18714
   HEAP32[$324 >> 2] = $94; //@line 18715
   $325 = $ReallocAsyncCtx2 + 192 | 0; //@line 18716
   HEAP32[$325 >> 2] = $96; //@line 18717
   $326 = $ReallocAsyncCtx2 + 196 | 0; //@line 18718
   HEAP32[$326 >> 2] = $98; //@line 18719
   $327 = $ReallocAsyncCtx2 + 200 | 0; //@line 18720
   HEAP32[$327 >> 2] = $100; //@line 18721
   $328 = $ReallocAsyncCtx2 + 204 | 0; //@line 18722
   HEAP32[$328 >> 2] = $102; //@line 18723
   $329 = $ReallocAsyncCtx2 + 208 | 0; //@line 18724
   HEAP32[$329 >> 2] = $104; //@line 18725
   $330 = $ReallocAsyncCtx2 + 212 | 0; //@line 18726
   HEAP32[$330 >> 2] = $106; //@line 18727
   $331 = $ReallocAsyncCtx2 + 216 | 0; //@line 18728
   HEAP32[$331 >> 2] = $108; //@line 18729
   $332 = $ReallocAsyncCtx2 + 220 | 0; //@line 18730
   HEAP32[$332 >> 2] = $110; //@line 18731
   $333 = $ReallocAsyncCtx2 + 224 | 0; //@line 18732
   HEAP32[$333 >> 2] = $112; //@line 18733
   $334 = $ReallocAsyncCtx2 + 228 | 0; //@line 18734
   HEAP32[$334 >> 2] = $114; //@line 18735
   $335 = $ReallocAsyncCtx2 + 232 | 0; //@line 18736
   HEAP32[$335 >> 2] = $116; //@line 18737
   $336 = $ReallocAsyncCtx2 + 236 | 0; //@line 18738
   HEAP32[$336 >> 2] = $118; //@line 18739
   $337 = $ReallocAsyncCtx2 + 240 | 0; //@line 18740
   HEAP32[$337 >> 2] = $120; //@line 18741
   $338 = $ReallocAsyncCtx2 + 244 | 0; //@line 18742
   HEAP32[$338 >> 2] = $122; //@line 18743
   $339 = $ReallocAsyncCtx2 + 248 | 0; //@line 18744
   HEAP8[$339 >> 0] = $124; //@line 18745
   $340 = $ReallocAsyncCtx2 + 249 | 0; //@line 18746
   HEAP8[$340 >> 0] = $126; //@line 18747
   $341 = $ReallocAsyncCtx2 + 252 | 0; //@line 18748
   HEAP32[$341 >> 2] = $128; //@line 18749
   $342 = $ReallocAsyncCtx2 + 256 | 0; //@line 18750
   HEAP8[$342 >> 0] = $130; //@line 18751
   $343 = $ReallocAsyncCtx2 + 260 | 0; //@line 18752
   HEAP32[$343 >> 2] = $132; //@line 18753
   $344 = $ReallocAsyncCtx2 + 264 | 0; //@line 18754
   HEAP32[$344 >> 2] = $134; //@line 18755
   sp = STACKTOP; //@line 18756
   return;
  }
  HEAP8[___async_retval >> 0] = $277; //@line 18760
  ___async_unwind = 0; //@line 18761
  HEAP32[$ReallocAsyncCtx2 >> 2] = 488; //@line 18762
  $278 = $ReallocAsyncCtx2 + 4 | 0; //@line 18763
  HEAP32[$278 >> 2] = $2; //@line 18764
  $279 = $ReallocAsyncCtx2 + 8 | 0; //@line 18765
  HEAP32[$279 >> 2] = $4; //@line 18766
  $280 = $ReallocAsyncCtx2 + 12 | 0; //@line 18767
  HEAP32[$280 >> 2] = $6; //@line 18768
  $281 = $ReallocAsyncCtx2 + 16 | 0; //@line 18769
  HEAP32[$281 >> 2] = $8; //@line 18770
  $282 = $ReallocAsyncCtx2 + 20 | 0; //@line 18771
  HEAP32[$282 >> 2] = $10; //@line 18772
  $283 = $ReallocAsyncCtx2 + 24 | 0; //@line 18773
  HEAP32[$283 >> 2] = $12; //@line 18774
  $284 = $ReallocAsyncCtx2 + 28 | 0; //@line 18775
  HEAP32[$284 >> 2] = $14; //@line 18776
  $285 = $ReallocAsyncCtx2 + 32 | 0; //@line 18777
  HEAP32[$285 >> 2] = $16; //@line 18778
  $286 = $ReallocAsyncCtx2 + 36 | 0; //@line 18779
  HEAP32[$286 >> 2] = $18; //@line 18780
  $287 = $ReallocAsyncCtx2 + 40 | 0; //@line 18781
  HEAP32[$287 >> 2] = $20; //@line 18782
  $288 = $ReallocAsyncCtx2 + 44 | 0; //@line 18783
  HEAP32[$288 >> 2] = $22; //@line 18784
  $289 = $ReallocAsyncCtx2 + 48 | 0; //@line 18785
  HEAP32[$289 >> 2] = $24; //@line 18786
  $290 = $ReallocAsyncCtx2 + 52 | 0; //@line 18787
  HEAP32[$290 >> 2] = $26; //@line 18788
  $291 = $ReallocAsyncCtx2 + 56 | 0; //@line 18789
  HEAP32[$291 >> 2] = $28; //@line 18790
  $292 = $ReallocAsyncCtx2 + 60 | 0; //@line 18791
  HEAP32[$292 >> 2] = $30; //@line 18792
  $293 = $ReallocAsyncCtx2 + 64 | 0; //@line 18793
  HEAP32[$293 >> 2] = $32; //@line 18794
  $294 = $ReallocAsyncCtx2 + 68 | 0; //@line 18795
  HEAP32[$294 >> 2] = $34; //@line 18796
  $295 = $ReallocAsyncCtx2 + 72 | 0; //@line 18797
  HEAP32[$295 >> 2] = $36; //@line 18798
  $296 = $ReallocAsyncCtx2 + 76 | 0; //@line 18799
  HEAP32[$296 >> 2] = $38; //@line 18800
  $297 = $ReallocAsyncCtx2 + 80 | 0; //@line 18801
  HEAP32[$297 >> 2] = $40; //@line 18802
  $298 = $ReallocAsyncCtx2 + 84 | 0; //@line 18803
  HEAP32[$298 >> 2] = $42; //@line 18804
  $299 = $ReallocAsyncCtx2 + 88 | 0; //@line 18805
  HEAP32[$299 >> 2] = $44; //@line 18806
  $300 = $ReallocAsyncCtx2 + 92 | 0; //@line 18807
  HEAP32[$300 >> 2] = $46; //@line 18808
  $301 = $ReallocAsyncCtx2 + 96 | 0; //@line 18809
  HEAP8[$301 >> 0] = $266; //@line 18810
  $302 = $ReallocAsyncCtx2 + 100 | 0; //@line 18811
  HEAP32[$302 >> 2] = $50; //@line 18812
  $303 = $ReallocAsyncCtx2 + 104 | 0; //@line 18813
  HEAP32[$303 >> 2] = $52; //@line 18814
  $304 = $ReallocAsyncCtx2 + 108 | 0; //@line 18815
  HEAP32[$304 >> 2] = $54; //@line 18816
  $305 = $ReallocAsyncCtx2 + 112 | 0; //@line 18817
  HEAP32[$305 >> 2] = $56; //@line 18818
  $306 = $ReallocAsyncCtx2 + 116 | 0; //@line 18819
  HEAP32[$306 >> 2] = $58; //@line 18820
  $307 = $ReallocAsyncCtx2 + 120 | 0; //@line 18821
  HEAP32[$307 >> 2] = $60; //@line 18822
  $308 = $ReallocAsyncCtx2 + 124 | 0; //@line 18823
  HEAP32[$308 >> 2] = $62; //@line 18824
  $309 = $ReallocAsyncCtx2 + 128 | 0; //@line 18825
  HEAP32[$309 >> 2] = $64; //@line 18826
  $310 = $ReallocAsyncCtx2 + 132 | 0; //@line 18827
  HEAP32[$310 >> 2] = $66; //@line 18828
  $311 = $ReallocAsyncCtx2 + 136 | 0; //@line 18829
  HEAP32[$311 >> 2] = $68; //@line 18830
  $312 = $ReallocAsyncCtx2 + 140 | 0; //@line 18831
  HEAP32[$312 >> 2] = $70; //@line 18832
  $313 = $ReallocAsyncCtx2 + 144 | 0; //@line 18833
  HEAP32[$313 >> 2] = $72; //@line 18834
  $314 = $ReallocAsyncCtx2 + 148 | 0; //@line 18835
  HEAP32[$314 >> 2] = $74; //@line 18836
  $315 = $ReallocAsyncCtx2 + 152 | 0; //@line 18837
  HEAP32[$315 >> 2] = $76; //@line 18838
  $316 = $ReallocAsyncCtx2 + 156 | 0; //@line 18839
  HEAP32[$316 >> 2] = $78; //@line 18840
  $317 = $ReallocAsyncCtx2 + 160 | 0; //@line 18841
  HEAP32[$317 >> 2] = $80; //@line 18842
  $318 = $ReallocAsyncCtx2 + 164 | 0; //@line 18843
  HEAP32[$318 >> 2] = $82; //@line 18844
  $319 = $ReallocAsyncCtx2 + 168 | 0; //@line 18845
  HEAP32[$319 >> 2] = $84; //@line 18846
  $320 = $ReallocAsyncCtx2 + 172 | 0; //@line 18847
  HEAP32[$320 >> 2] = $86; //@line 18848
  $321 = $ReallocAsyncCtx2 + 176 | 0; //@line 18849
  HEAP32[$321 >> 2] = $88; //@line 18850
  $322 = $ReallocAsyncCtx2 + 180 | 0; //@line 18851
  HEAP32[$322 >> 2] = $90; //@line 18852
  $323 = $ReallocAsyncCtx2 + 184 | 0; //@line 18853
  HEAP32[$323 >> 2] = $92; //@line 18854
  $324 = $ReallocAsyncCtx2 + 188 | 0; //@line 18855
  HEAP32[$324 >> 2] = $94; //@line 18856
  $325 = $ReallocAsyncCtx2 + 192 | 0; //@line 18857
  HEAP32[$325 >> 2] = $96; //@line 18858
  $326 = $ReallocAsyncCtx2 + 196 | 0; //@line 18859
  HEAP32[$326 >> 2] = $98; //@line 18860
  $327 = $ReallocAsyncCtx2 + 200 | 0; //@line 18861
  HEAP32[$327 >> 2] = $100; //@line 18862
  $328 = $ReallocAsyncCtx2 + 204 | 0; //@line 18863
  HEAP32[$328 >> 2] = $102; //@line 18864
  $329 = $ReallocAsyncCtx2 + 208 | 0; //@line 18865
  HEAP32[$329 >> 2] = $104; //@line 18866
  $330 = $ReallocAsyncCtx2 + 212 | 0; //@line 18867
  HEAP32[$330 >> 2] = $106; //@line 18868
  $331 = $ReallocAsyncCtx2 + 216 | 0; //@line 18869
  HEAP32[$331 >> 2] = $108; //@line 18870
  $332 = $ReallocAsyncCtx2 + 220 | 0; //@line 18871
  HEAP32[$332 >> 2] = $110; //@line 18872
  $333 = $ReallocAsyncCtx2 + 224 | 0; //@line 18873
  HEAP32[$333 >> 2] = $112; //@line 18874
  $334 = $ReallocAsyncCtx2 + 228 | 0; //@line 18875
  HEAP32[$334 >> 2] = $114; //@line 18876
  $335 = $ReallocAsyncCtx2 + 232 | 0; //@line 18877
  HEAP32[$335 >> 2] = $116; //@line 18878
  $336 = $ReallocAsyncCtx2 + 236 | 0; //@line 18879
  HEAP32[$336 >> 2] = $118; //@line 18880
  $337 = $ReallocAsyncCtx2 + 240 | 0; //@line 18881
  HEAP32[$337 >> 2] = $120; //@line 18882
  $338 = $ReallocAsyncCtx2 + 244 | 0; //@line 18883
  HEAP32[$338 >> 2] = $122; //@line 18884
  $339 = $ReallocAsyncCtx2 + 248 | 0; //@line 18885
  HEAP8[$339 >> 0] = $124; //@line 18886
  $340 = $ReallocAsyncCtx2 + 249 | 0; //@line 18887
  HEAP8[$340 >> 0] = $126; //@line 18888
  $341 = $ReallocAsyncCtx2 + 252 | 0; //@line 18889
  HEAP32[$341 >> 2] = $128; //@line 18890
  $342 = $ReallocAsyncCtx2 + 256 | 0; //@line 18891
  HEAP8[$342 >> 0] = $130; //@line 18892
  $343 = $ReallocAsyncCtx2 + 260 | 0; //@line 18893
  HEAP32[$343 >> 2] = $132; //@line 18894
  $344 = $ReallocAsyncCtx2 + 264 | 0; //@line 18895
  HEAP32[$344 >> 2] = $134; //@line 18896
  sp = STACKTOP; //@line 18897
  return;
 } else if ((label | 0) == 19) {
  HEAP8[$102 >> 0] = HEAP8[$120 + ($137 & 255) >> 0] | 0; //@line 18905
  HEAP32[$108 >> 2] = $22; //@line 18906
  HEAP32[$114 >> 2] = (HEAPU8[$120 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$120 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$120 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 18927
  HEAP32[$118 >> 2] = 0; //@line 18928
  $402 = $$0$be + 6 << 24 >> 24; //@line 18929
  HEAP8[$12 >> 0] = HEAP8[$120 + ($$0$be + 5 & 255) >> 0] | 0; //@line 18933
  $408 = HEAP32[(HEAP32[$2 >> 2] | 0) + 8 >> 2] | 0; //@line 18936
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(268) | 0; //@line 18937
  $409 = FUNCTION_TABLE_iii[$408 & 31]($134, $60) | 0; //@line 18938
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 489; //@line 18941
   $410 = $ReallocAsyncCtx3 + 4 | 0; //@line 18942
   HEAP32[$410 >> 2] = $2; //@line 18943
   $411 = $ReallocAsyncCtx3 + 8 | 0; //@line 18944
   HEAP32[$411 >> 2] = $4; //@line 18945
   $412 = $ReallocAsyncCtx3 + 12 | 0; //@line 18946
   HEAP32[$412 >> 2] = $6; //@line 18947
   $413 = $ReallocAsyncCtx3 + 16 | 0; //@line 18948
   HEAP32[$413 >> 2] = $8; //@line 18949
   $414 = $ReallocAsyncCtx3 + 20 | 0; //@line 18950
   HEAP32[$414 >> 2] = $10; //@line 18951
   $415 = $ReallocAsyncCtx3 + 24 | 0; //@line 18952
   HEAP32[$415 >> 2] = $12; //@line 18953
   $416 = $ReallocAsyncCtx3 + 28 | 0; //@line 18954
   HEAP32[$416 >> 2] = $14; //@line 18955
   $417 = $ReallocAsyncCtx3 + 32 | 0; //@line 18956
   HEAP32[$417 >> 2] = $16; //@line 18957
   $418 = $ReallocAsyncCtx3 + 36 | 0; //@line 18958
   HEAP32[$418 >> 2] = $18; //@line 18959
   $419 = $ReallocAsyncCtx3 + 40 | 0; //@line 18960
   HEAP32[$419 >> 2] = $20; //@line 18961
   $420 = $ReallocAsyncCtx3 + 44 | 0; //@line 18962
   HEAP32[$420 >> 2] = $22; //@line 18963
   $421 = $ReallocAsyncCtx3 + 48 | 0; //@line 18964
   HEAP32[$421 >> 2] = $24; //@line 18965
   $422 = $ReallocAsyncCtx3 + 52 | 0; //@line 18966
   HEAP32[$422 >> 2] = $26; //@line 18967
   $423 = $ReallocAsyncCtx3 + 56 | 0; //@line 18968
   HEAP32[$423 >> 2] = $28; //@line 18969
   $424 = $ReallocAsyncCtx3 + 60 | 0; //@line 18970
   HEAP32[$424 >> 2] = $30; //@line 18971
   $425 = $ReallocAsyncCtx3 + 64 | 0; //@line 18972
   HEAP32[$425 >> 2] = $32; //@line 18973
   $426 = $ReallocAsyncCtx3 + 68 | 0; //@line 18974
   HEAP32[$426 >> 2] = $34; //@line 18975
   $427 = $ReallocAsyncCtx3 + 72 | 0; //@line 18976
   HEAP32[$427 >> 2] = $36; //@line 18977
   $428 = $ReallocAsyncCtx3 + 76 | 0; //@line 18978
   HEAP32[$428 >> 2] = $38; //@line 18979
   $429 = $ReallocAsyncCtx3 + 80 | 0; //@line 18980
   HEAP32[$429 >> 2] = $40; //@line 18981
   $430 = $ReallocAsyncCtx3 + 84 | 0; //@line 18982
   HEAP32[$430 >> 2] = $42; //@line 18983
   $431 = $ReallocAsyncCtx3 + 88 | 0; //@line 18984
   HEAP32[$431 >> 2] = $44; //@line 18985
   $432 = $ReallocAsyncCtx3 + 92 | 0; //@line 18986
   HEAP32[$432 >> 2] = $46; //@line 18987
   $433 = $ReallocAsyncCtx3 + 96 | 0; //@line 18988
   HEAP32[$433 >> 2] = $58; //@line 18989
   $434 = $ReallocAsyncCtx3 + 100 | 0; //@line 18990
   HEAP32[$434 >> 2] = $50; //@line 18991
   $435 = $ReallocAsyncCtx3 + 104 | 0; //@line 18992
   HEAP32[$435 >> 2] = $52; //@line 18993
   $436 = $ReallocAsyncCtx3 + 108 | 0; //@line 18994
   HEAP32[$436 >> 2] = $54; //@line 18995
   $437 = $ReallocAsyncCtx3 + 112 | 0; //@line 18996
   HEAP32[$437 >> 2] = $56; //@line 18997
   $438 = $ReallocAsyncCtx3 + 116 | 0; //@line 18998
   HEAP8[$438 >> 0] = $402; //@line 18999
   $439 = $ReallocAsyncCtx3 + 120 | 0; //@line 19000
   HEAP32[$439 >> 2] = $60; //@line 19001
   $440 = $ReallocAsyncCtx3 + 124 | 0; //@line 19002
   HEAP32[$440 >> 2] = $62; //@line 19003
   $441 = $ReallocAsyncCtx3 + 128 | 0; //@line 19004
   HEAP32[$441 >> 2] = $64; //@line 19005
   $442 = $ReallocAsyncCtx3 + 132 | 0; //@line 19006
   HEAP32[$442 >> 2] = $66; //@line 19007
   $443 = $ReallocAsyncCtx3 + 136 | 0; //@line 19008
   HEAP32[$443 >> 2] = $68; //@line 19009
   $444 = $ReallocAsyncCtx3 + 140 | 0; //@line 19010
   HEAP32[$444 >> 2] = $70; //@line 19011
   $445 = $ReallocAsyncCtx3 + 144 | 0; //@line 19012
   HEAP32[$445 >> 2] = $72; //@line 19013
   $446 = $ReallocAsyncCtx3 + 148 | 0; //@line 19014
   HEAP32[$446 >> 2] = $74; //@line 19015
   $447 = $ReallocAsyncCtx3 + 152 | 0; //@line 19016
   HEAP32[$447 >> 2] = $76; //@line 19017
   $448 = $ReallocAsyncCtx3 + 156 | 0; //@line 19018
   HEAP32[$448 >> 2] = $78; //@line 19019
   $449 = $ReallocAsyncCtx3 + 160 | 0; //@line 19020
   HEAP32[$449 >> 2] = $80; //@line 19021
   $450 = $ReallocAsyncCtx3 + 164 | 0; //@line 19022
   HEAP32[$450 >> 2] = $82; //@line 19023
   $451 = $ReallocAsyncCtx3 + 168 | 0; //@line 19024
   HEAP32[$451 >> 2] = $84; //@line 19025
   $452 = $ReallocAsyncCtx3 + 172 | 0; //@line 19026
   HEAP32[$452 >> 2] = $86; //@line 19027
   $453 = $ReallocAsyncCtx3 + 176 | 0; //@line 19028
   HEAP32[$453 >> 2] = $88; //@line 19029
   $454 = $ReallocAsyncCtx3 + 180 | 0; //@line 19030
   HEAP32[$454 >> 2] = $90; //@line 19031
   $455 = $ReallocAsyncCtx3 + 184 | 0; //@line 19032
   HEAP32[$455 >> 2] = $92; //@line 19033
   $456 = $ReallocAsyncCtx3 + 188 | 0; //@line 19034
   HEAP32[$456 >> 2] = $94; //@line 19035
   $457 = $ReallocAsyncCtx3 + 192 | 0; //@line 19036
   HEAP32[$457 >> 2] = $96; //@line 19037
   $458 = $ReallocAsyncCtx3 + 196 | 0; //@line 19038
   HEAP32[$458 >> 2] = $98; //@line 19039
   $459 = $ReallocAsyncCtx3 + 200 | 0; //@line 19040
   HEAP32[$459 >> 2] = $100; //@line 19041
   $460 = $ReallocAsyncCtx3 + 204 | 0; //@line 19042
   HEAP32[$460 >> 2] = $102; //@line 19043
   $461 = $ReallocAsyncCtx3 + 208 | 0; //@line 19044
   HEAP32[$461 >> 2] = $104; //@line 19045
   $462 = $ReallocAsyncCtx3 + 212 | 0; //@line 19046
   HEAP32[$462 >> 2] = $106; //@line 19047
   $463 = $ReallocAsyncCtx3 + 216 | 0; //@line 19048
   HEAP32[$463 >> 2] = $108; //@line 19049
   $464 = $ReallocAsyncCtx3 + 220 | 0; //@line 19050
   HEAP32[$464 >> 2] = $110; //@line 19051
   $465 = $ReallocAsyncCtx3 + 224 | 0; //@line 19052
   HEAP32[$465 >> 2] = $112; //@line 19053
   $466 = $ReallocAsyncCtx3 + 228 | 0; //@line 19054
   HEAP32[$466 >> 2] = $114; //@line 19055
   $467 = $ReallocAsyncCtx3 + 232 | 0; //@line 19056
   HEAP32[$467 >> 2] = $116; //@line 19057
   $468 = $ReallocAsyncCtx3 + 236 | 0; //@line 19058
   HEAP32[$468 >> 2] = $118; //@line 19059
   $469 = $ReallocAsyncCtx3 + 240 | 0; //@line 19060
   HEAP32[$469 >> 2] = $120; //@line 19061
   $470 = $ReallocAsyncCtx3 + 244 | 0; //@line 19062
   HEAP32[$470 >> 2] = $122; //@line 19063
   $471 = $ReallocAsyncCtx3 + 248 | 0; //@line 19064
   HEAP8[$471 >> 0] = $124; //@line 19065
   $472 = $ReallocAsyncCtx3 + 249 | 0; //@line 19066
   HEAP8[$472 >> 0] = $126; //@line 19067
   $473 = $ReallocAsyncCtx3 + 252 | 0; //@line 19068
   HEAP32[$473 >> 2] = $128; //@line 19069
   $474 = $ReallocAsyncCtx3 + 256 | 0; //@line 19070
   HEAP8[$474 >> 0] = $130; //@line 19071
   $475 = $ReallocAsyncCtx3 + 260 | 0; //@line 19072
   HEAP32[$475 >> 2] = $132; //@line 19073
   $476 = $ReallocAsyncCtx3 + 264 | 0; //@line 19074
   HEAP32[$476 >> 2] = $134; //@line 19075
   sp = STACKTOP; //@line 19076
   return;
  }
  HEAP8[___async_retval >> 0] = $409; //@line 19080
  ___async_unwind = 0; //@line 19081
  HEAP32[$ReallocAsyncCtx3 >> 2] = 489; //@line 19082
  $410 = $ReallocAsyncCtx3 + 4 | 0; //@line 19083
  HEAP32[$410 >> 2] = $2; //@line 19084
  $411 = $ReallocAsyncCtx3 + 8 | 0; //@line 19085
  HEAP32[$411 >> 2] = $4; //@line 19086
  $412 = $ReallocAsyncCtx3 + 12 | 0; //@line 19087
  HEAP32[$412 >> 2] = $6; //@line 19088
  $413 = $ReallocAsyncCtx3 + 16 | 0; //@line 19089
  HEAP32[$413 >> 2] = $8; //@line 19090
  $414 = $ReallocAsyncCtx3 + 20 | 0; //@line 19091
  HEAP32[$414 >> 2] = $10; //@line 19092
  $415 = $ReallocAsyncCtx3 + 24 | 0; //@line 19093
  HEAP32[$415 >> 2] = $12; //@line 19094
  $416 = $ReallocAsyncCtx3 + 28 | 0; //@line 19095
  HEAP32[$416 >> 2] = $14; //@line 19096
  $417 = $ReallocAsyncCtx3 + 32 | 0; //@line 19097
  HEAP32[$417 >> 2] = $16; //@line 19098
  $418 = $ReallocAsyncCtx3 + 36 | 0; //@line 19099
  HEAP32[$418 >> 2] = $18; //@line 19100
  $419 = $ReallocAsyncCtx3 + 40 | 0; //@line 19101
  HEAP32[$419 >> 2] = $20; //@line 19102
  $420 = $ReallocAsyncCtx3 + 44 | 0; //@line 19103
  HEAP32[$420 >> 2] = $22; //@line 19104
  $421 = $ReallocAsyncCtx3 + 48 | 0; //@line 19105
  HEAP32[$421 >> 2] = $24; //@line 19106
  $422 = $ReallocAsyncCtx3 + 52 | 0; //@line 19107
  HEAP32[$422 >> 2] = $26; //@line 19108
  $423 = $ReallocAsyncCtx3 + 56 | 0; //@line 19109
  HEAP32[$423 >> 2] = $28; //@line 19110
  $424 = $ReallocAsyncCtx3 + 60 | 0; //@line 19111
  HEAP32[$424 >> 2] = $30; //@line 19112
  $425 = $ReallocAsyncCtx3 + 64 | 0; //@line 19113
  HEAP32[$425 >> 2] = $32; //@line 19114
  $426 = $ReallocAsyncCtx3 + 68 | 0; //@line 19115
  HEAP32[$426 >> 2] = $34; //@line 19116
  $427 = $ReallocAsyncCtx3 + 72 | 0; //@line 19117
  HEAP32[$427 >> 2] = $36; //@line 19118
  $428 = $ReallocAsyncCtx3 + 76 | 0; //@line 19119
  HEAP32[$428 >> 2] = $38; //@line 19120
  $429 = $ReallocAsyncCtx3 + 80 | 0; //@line 19121
  HEAP32[$429 >> 2] = $40; //@line 19122
  $430 = $ReallocAsyncCtx3 + 84 | 0; //@line 19123
  HEAP32[$430 >> 2] = $42; //@line 19124
  $431 = $ReallocAsyncCtx3 + 88 | 0; //@line 19125
  HEAP32[$431 >> 2] = $44; //@line 19126
  $432 = $ReallocAsyncCtx3 + 92 | 0; //@line 19127
  HEAP32[$432 >> 2] = $46; //@line 19128
  $433 = $ReallocAsyncCtx3 + 96 | 0; //@line 19129
  HEAP32[$433 >> 2] = $58; //@line 19130
  $434 = $ReallocAsyncCtx3 + 100 | 0; //@line 19131
  HEAP32[$434 >> 2] = $50; //@line 19132
  $435 = $ReallocAsyncCtx3 + 104 | 0; //@line 19133
  HEAP32[$435 >> 2] = $52; //@line 19134
  $436 = $ReallocAsyncCtx3 + 108 | 0; //@line 19135
  HEAP32[$436 >> 2] = $54; //@line 19136
  $437 = $ReallocAsyncCtx3 + 112 | 0; //@line 19137
  HEAP32[$437 >> 2] = $56; //@line 19138
  $438 = $ReallocAsyncCtx3 + 116 | 0; //@line 19139
  HEAP8[$438 >> 0] = $402; //@line 19140
  $439 = $ReallocAsyncCtx3 + 120 | 0; //@line 19141
  HEAP32[$439 >> 2] = $60; //@line 19142
  $440 = $ReallocAsyncCtx3 + 124 | 0; //@line 19143
  HEAP32[$440 >> 2] = $62; //@line 19144
  $441 = $ReallocAsyncCtx3 + 128 | 0; //@line 19145
  HEAP32[$441 >> 2] = $64; //@line 19146
  $442 = $ReallocAsyncCtx3 + 132 | 0; //@line 19147
  HEAP32[$442 >> 2] = $66; //@line 19148
  $443 = $ReallocAsyncCtx3 + 136 | 0; //@line 19149
  HEAP32[$443 >> 2] = $68; //@line 19150
  $444 = $ReallocAsyncCtx3 + 140 | 0; //@line 19151
  HEAP32[$444 >> 2] = $70; //@line 19152
  $445 = $ReallocAsyncCtx3 + 144 | 0; //@line 19153
  HEAP32[$445 >> 2] = $72; //@line 19154
  $446 = $ReallocAsyncCtx3 + 148 | 0; //@line 19155
  HEAP32[$446 >> 2] = $74; //@line 19156
  $447 = $ReallocAsyncCtx3 + 152 | 0; //@line 19157
  HEAP32[$447 >> 2] = $76; //@line 19158
  $448 = $ReallocAsyncCtx3 + 156 | 0; //@line 19159
  HEAP32[$448 >> 2] = $78; //@line 19160
  $449 = $ReallocAsyncCtx3 + 160 | 0; //@line 19161
  HEAP32[$449 >> 2] = $80; //@line 19162
  $450 = $ReallocAsyncCtx3 + 164 | 0; //@line 19163
  HEAP32[$450 >> 2] = $82; //@line 19164
  $451 = $ReallocAsyncCtx3 + 168 | 0; //@line 19165
  HEAP32[$451 >> 2] = $84; //@line 19166
  $452 = $ReallocAsyncCtx3 + 172 | 0; //@line 19167
  HEAP32[$452 >> 2] = $86; //@line 19168
  $453 = $ReallocAsyncCtx3 + 176 | 0; //@line 19169
  HEAP32[$453 >> 2] = $88; //@line 19170
  $454 = $ReallocAsyncCtx3 + 180 | 0; //@line 19171
  HEAP32[$454 >> 2] = $90; //@line 19172
  $455 = $ReallocAsyncCtx3 + 184 | 0; //@line 19173
  HEAP32[$455 >> 2] = $92; //@line 19174
  $456 = $ReallocAsyncCtx3 + 188 | 0; //@line 19175
  HEAP32[$456 >> 2] = $94; //@line 19176
  $457 = $ReallocAsyncCtx3 + 192 | 0; //@line 19177
  HEAP32[$457 >> 2] = $96; //@line 19178
  $458 = $ReallocAsyncCtx3 + 196 | 0; //@line 19179
  HEAP32[$458 >> 2] = $98; //@line 19180
  $459 = $ReallocAsyncCtx3 + 200 | 0; //@line 19181
  HEAP32[$459 >> 2] = $100; //@line 19182
  $460 = $ReallocAsyncCtx3 + 204 | 0; //@line 19183
  HEAP32[$460 >> 2] = $102; //@line 19184
  $461 = $ReallocAsyncCtx3 + 208 | 0; //@line 19185
  HEAP32[$461 >> 2] = $104; //@line 19186
  $462 = $ReallocAsyncCtx3 + 212 | 0; //@line 19187
  HEAP32[$462 >> 2] = $106; //@line 19188
  $463 = $ReallocAsyncCtx3 + 216 | 0; //@line 19189
  HEAP32[$463 >> 2] = $108; //@line 19190
  $464 = $ReallocAsyncCtx3 + 220 | 0; //@line 19191
  HEAP32[$464 >> 2] = $110; //@line 19192
  $465 = $ReallocAsyncCtx3 + 224 | 0; //@line 19193
  HEAP32[$465 >> 2] = $112; //@line 19194
  $466 = $ReallocAsyncCtx3 + 228 | 0; //@line 19195
  HEAP32[$466 >> 2] = $114; //@line 19196
  $467 = $ReallocAsyncCtx3 + 232 | 0; //@line 19197
  HEAP32[$467 >> 2] = $116; //@line 19198
  $468 = $ReallocAsyncCtx3 + 236 | 0; //@line 19199
  HEAP32[$468 >> 2] = $118; //@line 19200
  $469 = $ReallocAsyncCtx3 + 240 | 0; //@line 19201
  HEAP32[$469 >> 2] = $120; //@line 19202
  $470 = $ReallocAsyncCtx3 + 244 | 0; //@line 19203
  HEAP32[$470 >> 2] = $122; //@line 19204
  $471 = $ReallocAsyncCtx3 + 248 | 0; //@line 19205
  HEAP8[$471 >> 0] = $124; //@line 19206
  $472 = $ReallocAsyncCtx3 + 249 | 0; //@line 19207
  HEAP8[$472 >> 0] = $126; //@line 19208
  $473 = $ReallocAsyncCtx3 + 252 | 0; //@line 19209
  HEAP32[$473 >> 2] = $128; //@line 19210
  $474 = $ReallocAsyncCtx3 + 256 | 0; //@line 19211
  HEAP8[$474 >> 0] = $130; //@line 19212
  $475 = $ReallocAsyncCtx3 + 260 | 0; //@line 19213
  HEAP32[$475 >> 2] = $132; //@line 19214
  $476 = $ReallocAsyncCtx3 + 264 | 0; //@line 19215
  HEAP32[$476 >> 2] = $134; //@line 19216
  sp = STACKTOP; //@line 19217
  return;
 } else if ((label | 0) == 24) {
  $495 = $$0$be + 2 << 24 >> 24; //@line 19221
  $498 = HEAP8[$120 + ($137 & 255) >> 0] | 0; //@line 19224
  HEAP8[$56 >> 0] = 0; //@line 19225
  $499 = $498 & 255; //@line 19226
  HEAP8[$42 >> 0] = $499 >>> 5 & 1; //@line 19230
  if ($499 & 16 | 0) {
   HEAP8[$56 >> 0] = 1; //@line 19234
  }
  HEAP8[$76 >> 0] = $499 & 15; //@line 19238
  $508 = HEAP32[(HEAP32[$66 >> 2] | 0) + 44 >> 2] | 0; //@line 19241
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(272) | 0; //@line 19242
  $509 = FUNCTION_TABLE_iii[$508 & 31]($134, $16) | 0; //@line 19243
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 490; //@line 19246
   $510 = $ReallocAsyncCtx4 + 4 | 0; //@line 19247
   HEAP32[$510 >> 2] = $2; //@line 19248
   $511 = $ReallocAsyncCtx4 + 8 | 0; //@line 19249
   HEAP32[$511 >> 2] = $4; //@line 19250
   $512 = $ReallocAsyncCtx4 + 12 | 0; //@line 19251
   HEAP32[$512 >> 2] = $6; //@line 19252
   $513 = $ReallocAsyncCtx4 + 16 | 0; //@line 19253
   HEAP32[$513 >> 2] = $8; //@line 19254
   $514 = $ReallocAsyncCtx4 + 20 | 0; //@line 19255
   HEAP32[$514 >> 2] = $10; //@line 19256
   $515 = $ReallocAsyncCtx4 + 24 | 0; //@line 19257
   HEAP32[$515 >> 2] = $12; //@line 19258
   $516 = $ReallocAsyncCtx4 + 28 | 0; //@line 19259
   HEAP32[$516 >> 2] = $14; //@line 19260
   $517 = $ReallocAsyncCtx4 + 32 | 0; //@line 19261
   HEAP32[$517 >> 2] = $16; //@line 19262
   $518 = $ReallocAsyncCtx4 + 36 | 0; //@line 19263
   HEAP32[$518 >> 2] = $18; //@line 19264
   $519 = $ReallocAsyncCtx4 + 40 | 0; //@line 19265
   HEAP32[$519 >> 2] = $20; //@line 19266
   $520 = $ReallocAsyncCtx4 + 44 | 0; //@line 19267
   HEAP32[$520 >> 2] = $22; //@line 19268
   $521 = $ReallocAsyncCtx4 + 48 | 0; //@line 19269
   HEAP32[$521 >> 2] = $24; //@line 19270
   $522 = $ReallocAsyncCtx4 + 52 | 0; //@line 19271
   HEAP32[$522 >> 2] = $26; //@line 19272
   $523 = $ReallocAsyncCtx4 + 56 | 0; //@line 19273
   HEAP32[$523 >> 2] = $28; //@line 19274
   $524 = $ReallocAsyncCtx4 + 60 | 0; //@line 19275
   HEAP32[$524 >> 2] = $30; //@line 19276
   $525 = $ReallocAsyncCtx4 + 64 | 0; //@line 19277
   HEAP32[$525 >> 2] = $32; //@line 19278
   $526 = $ReallocAsyncCtx4 + 68 | 0; //@line 19279
   HEAP32[$526 >> 2] = $34; //@line 19280
   $527 = $ReallocAsyncCtx4 + 72 | 0; //@line 19281
   HEAP32[$527 >> 2] = $36; //@line 19282
   $528 = $ReallocAsyncCtx4 + 76 | 0; //@line 19283
   HEAP32[$528 >> 2] = $38; //@line 19284
   $529 = $ReallocAsyncCtx4 + 80 | 0; //@line 19285
   HEAP32[$529 >> 2] = $40; //@line 19286
   $530 = $ReallocAsyncCtx4 + 84 | 0; //@line 19287
   HEAP32[$530 >> 2] = $42; //@line 19288
   $531 = $ReallocAsyncCtx4 + 88 | 0; //@line 19289
   HEAP32[$531 >> 2] = $44; //@line 19290
   $532 = $ReallocAsyncCtx4 + 92 | 0; //@line 19291
   HEAP32[$532 >> 2] = $46; //@line 19292
   $533 = $ReallocAsyncCtx4 + 96 | 0; //@line 19293
   HEAP32[$533 >> 2] = $58; //@line 19294
   $534 = $ReallocAsyncCtx4 + 100 | 0; //@line 19295
   HEAP32[$534 >> 2] = $50; //@line 19296
   $535 = $ReallocAsyncCtx4 + 104 | 0; //@line 19297
   HEAP32[$535 >> 2] = $52; //@line 19298
   $536 = $ReallocAsyncCtx4 + 108 | 0; //@line 19299
   HEAP32[$536 >> 2] = $54; //@line 19300
   $537 = $ReallocAsyncCtx4 + 112 | 0; //@line 19301
   HEAP32[$537 >> 2] = $56; //@line 19302
   $538 = $ReallocAsyncCtx4 + 116 | 0; //@line 19303
   HEAP32[$538 >> 2] = $60; //@line 19304
   $539 = $ReallocAsyncCtx4 + 120 | 0; //@line 19305
   HEAP32[$539 >> 2] = $62; //@line 19306
   $540 = $ReallocAsyncCtx4 + 124 | 0; //@line 19307
   HEAP32[$540 >> 2] = $64; //@line 19308
   $541 = $ReallocAsyncCtx4 + 128 | 0; //@line 19309
   HEAP32[$541 >> 2] = $66; //@line 19310
   $542 = $ReallocAsyncCtx4 + 132 | 0; //@line 19311
   HEAP32[$542 >> 2] = $68; //@line 19312
   $543 = $ReallocAsyncCtx4 + 136 | 0; //@line 19313
   HEAP32[$543 >> 2] = $70; //@line 19314
   $544 = $ReallocAsyncCtx4 + 140 | 0; //@line 19315
   HEAP32[$544 >> 2] = $72; //@line 19316
   $545 = $ReallocAsyncCtx4 + 144 | 0; //@line 19317
   HEAP32[$545 >> 2] = $74; //@line 19318
   $546 = $ReallocAsyncCtx4 + 148 | 0; //@line 19319
   HEAP32[$546 >> 2] = $76; //@line 19320
   $547 = $ReallocAsyncCtx4 + 152 | 0; //@line 19321
   HEAP32[$547 >> 2] = $78; //@line 19322
   $548 = $ReallocAsyncCtx4 + 156 | 0; //@line 19323
   HEAP32[$548 >> 2] = $80; //@line 19324
   $549 = $ReallocAsyncCtx4 + 160 | 0; //@line 19325
   HEAP32[$549 >> 2] = $82; //@line 19326
   $550 = $ReallocAsyncCtx4 + 164 | 0; //@line 19327
   HEAP8[$550 >> 0] = $495; //@line 19328
   $551 = $ReallocAsyncCtx4 + 168 | 0; //@line 19329
   HEAP32[$551 >> 2] = $84; //@line 19330
   $552 = $ReallocAsyncCtx4 + 172 | 0; //@line 19331
   HEAP32[$552 >> 2] = $86; //@line 19332
   $553 = $ReallocAsyncCtx4 + 176 | 0; //@line 19333
   HEAP32[$553 >> 2] = $88; //@line 19334
   $554 = $ReallocAsyncCtx4 + 180 | 0; //@line 19335
   HEAP32[$554 >> 2] = $90; //@line 19336
   $555 = $ReallocAsyncCtx4 + 184 | 0; //@line 19337
   HEAP32[$555 >> 2] = $92; //@line 19338
   $556 = $ReallocAsyncCtx4 + 188 | 0; //@line 19339
   HEAP32[$556 >> 2] = $94; //@line 19340
   $557 = $ReallocAsyncCtx4 + 192 | 0; //@line 19341
   HEAP32[$557 >> 2] = $96; //@line 19342
   $558 = $ReallocAsyncCtx4 + 196 | 0; //@line 19343
   HEAP32[$558 >> 2] = $98; //@line 19344
   $559 = $ReallocAsyncCtx4 + 200 | 0; //@line 19345
   HEAP32[$559 >> 2] = $100; //@line 19346
   $560 = $ReallocAsyncCtx4 + 204 | 0; //@line 19347
   HEAP32[$560 >> 2] = $102; //@line 19348
   $561 = $ReallocAsyncCtx4 + 208 | 0; //@line 19349
   HEAP32[$561 >> 2] = $104; //@line 19350
   $562 = $ReallocAsyncCtx4 + 212 | 0; //@line 19351
   HEAP32[$562 >> 2] = $106; //@line 19352
   $563 = $ReallocAsyncCtx4 + 216 | 0; //@line 19353
   HEAP32[$563 >> 2] = $108; //@line 19354
   $564 = $ReallocAsyncCtx4 + 220 | 0; //@line 19355
   HEAP32[$564 >> 2] = $110; //@line 19356
   $565 = $ReallocAsyncCtx4 + 224 | 0; //@line 19357
   HEAP32[$565 >> 2] = $112; //@line 19358
   $566 = $ReallocAsyncCtx4 + 228 | 0; //@line 19359
   HEAP32[$566 >> 2] = $114; //@line 19360
   $567 = $ReallocAsyncCtx4 + 232 | 0; //@line 19361
   HEAP32[$567 >> 2] = $116; //@line 19362
   $568 = $ReallocAsyncCtx4 + 236 | 0; //@line 19363
   HEAP32[$568 >> 2] = $118; //@line 19364
   $569 = $ReallocAsyncCtx4 + 240 | 0; //@line 19365
   HEAP32[$569 >> 2] = $120; //@line 19366
   $570 = $ReallocAsyncCtx4 + 244 | 0; //@line 19367
   HEAP32[$570 >> 2] = $122; //@line 19368
   $571 = $ReallocAsyncCtx4 + 248 | 0; //@line 19369
   HEAP8[$571 >> 0] = $124; //@line 19370
   $572 = $ReallocAsyncCtx4 + 249 | 0; //@line 19371
   HEAP8[$572 >> 0] = $126; //@line 19372
   $573 = $ReallocAsyncCtx4 + 252 | 0; //@line 19373
   HEAP32[$573 >> 2] = $128; //@line 19374
   $574 = $ReallocAsyncCtx4 + 256 | 0; //@line 19375
   HEAP8[$574 >> 0] = $130; //@line 19376
   $575 = $ReallocAsyncCtx4 + 260 | 0; //@line 19377
   HEAP32[$575 >> 2] = $132; //@line 19378
   $576 = $ReallocAsyncCtx4 + 264 | 0; //@line 19379
   HEAP32[$576 >> 2] = $$096$be; //@line 19380
   $577 = $ReallocAsyncCtx4 + 268 | 0; //@line 19381
   HEAP32[$577 >> 2] = $134; //@line 19382
   sp = STACKTOP; //@line 19383
   return;
  }
  HEAP8[___async_retval >> 0] = $509 & 1; //@line 19388
  ___async_unwind = 0; //@line 19389
  HEAP32[$ReallocAsyncCtx4 >> 2] = 490; //@line 19390
  $510 = $ReallocAsyncCtx4 + 4 | 0; //@line 19391
  HEAP32[$510 >> 2] = $2; //@line 19392
  $511 = $ReallocAsyncCtx4 + 8 | 0; //@line 19393
  HEAP32[$511 >> 2] = $4; //@line 19394
  $512 = $ReallocAsyncCtx4 + 12 | 0; //@line 19395
  HEAP32[$512 >> 2] = $6; //@line 19396
  $513 = $ReallocAsyncCtx4 + 16 | 0; //@line 19397
  HEAP32[$513 >> 2] = $8; //@line 19398
  $514 = $ReallocAsyncCtx4 + 20 | 0; //@line 19399
  HEAP32[$514 >> 2] = $10; //@line 19400
  $515 = $ReallocAsyncCtx4 + 24 | 0; //@line 19401
  HEAP32[$515 >> 2] = $12; //@line 19402
  $516 = $ReallocAsyncCtx4 + 28 | 0; //@line 19403
  HEAP32[$516 >> 2] = $14; //@line 19404
  $517 = $ReallocAsyncCtx4 + 32 | 0; //@line 19405
  HEAP32[$517 >> 2] = $16; //@line 19406
  $518 = $ReallocAsyncCtx4 + 36 | 0; //@line 19407
  HEAP32[$518 >> 2] = $18; //@line 19408
  $519 = $ReallocAsyncCtx4 + 40 | 0; //@line 19409
  HEAP32[$519 >> 2] = $20; //@line 19410
  $520 = $ReallocAsyncCtx4 + 44 | 0; //@line 19411
  HEAP32[$520 >> 2] = $22; //@line 19412
  $521 = $ReallocAsyncCtx4 + 48 | 0; //@line 19413
  HEAP32[$521 >> 2] = $24; //@line 19414
  $522 = $ReallocAsyncCtx4 + 52 | 0; //@line 19415
  HEAP32[$522 >> 2] = $26; //@line 19416
  $523 = $ReallocAsyncCtx4 + 56 | 0; //@line 19417
  HEAP32[$523 >> 2] = $28; //@line 19418
  $524 = $ReallocAsyncCtx4 + 60 | 0; //@line 19419
  HEAP32[$524 >> 2] = $30; //@line 19420
  $525 = $ReallocAsyncCtx4 + 64 | 0; //@line 19421
  HEAP32[$525 >> 2] = $32; //@line 19422
  $526 = $ReallocAsyncCtx4 + 68 | 0; //@line 19423
  HEAP32[$526 >> 2] = $34; //@line 19424
  $527 = $ReallocAsyncCtx4 + 72 | 0; //@line 19425
  HEAP32[$527 >> 2] = $36; //@line 19426
  $528 = $ReallocAsyncCtx4 + 76 | 0; //@line 19427
  HEAP32[$528 >> 2] = $38; //@line 19428
  $529 = $ReallocAsyncCtx4 + 80 | 0; //@line 19429
  HEAP32[$529 >> 2] = $40; //@line 19430
  $530 = $ReallocAsyncCtx4 + 84 | 0; //@line 19431
  HEAP32[$530 >> 2] = $42; //@line 19432
  $531 = $ReallocAsyncCtx4 + 88 | 0; //@line 19433
  HEAP32[$531 >> 2] = $44; //@line 19434
  $532 = $ReallocAsyncCtx4 + 92 | 0; //@line 19435
  HEAP32[$532 >> 2] = $46; //@line 19436
  $533 = $ReallocAsyncCtx4 + 96 | 0; //@line 19437
  HEAP32[$533 >> 2] = $58; //@line 19438
  $534 = $ReallocAsyncCtx4 + 100 | 0; //@line 19439
  HEAP32[$534 >> 2] = $50; //@line 19440
  $535 = $ReallocAsyncCtx4 + 104 | 0; //@line 19441
  HEAP32[$535 >> 2] = $52; //@line 19442
  $536 = $ReallocAsyncCtx4 + 108 | 0; //@line 19443
  HEAP32[$536 >> 2] = $54; //@line 19444
  $537 = $ReallocAsyncCtx4 + 112 | 0; //@line 19445
  HEAP32[$537 >> 2] = $56; //@line 19446
  $538 = $ReallocAsyncCtx4 + 116 | 0; //@line 19447
  HEAP32[$538 >> 2] = $60; //@line 19448
  $539 = $ReallocAsyncCtx4 + 120 | 0; //@line 19449
  HEAP32[$539 >> 2] = $62; //@line 19450
  $540 = $ReallocAsyncCtx4 + 124 | 0; //@line 19451
  HEAP32[$540 >> 2] = $64; //@line 19452
  $541 = $ReallocAsyncCtx4 + 128 | 0; //@line 19453
  HEAP32[$541 >> 2] = $66; //@line 19454
  $542 = $ReallocAsyncCtx4 + 132 | 0; //@line 19455
  HEAP32[$542 >> 2] = $68; //@line 19456
  $543 = $ReallocAsyncCtx4 + 136 | 0; //@line 19457
  HEAP32[$543 >> 2] = $70; //@line 19458
  $544 = $ReallocAsyncCtx4 + 140 | 0; //@line 19459
  HEAP32[$544 >> 2] = $72; //@line 19460
  $545 = $ReallocAsyncCtx4 + 144 | 0; //@line 19461
  HEAP32[$545 >> 2] = $74; //@line 19462
  $546 = $ReallocAsyncCtx4 + 148 | 0; //@line 19463
  HEAP32[$546 >> 2] = $76; //@line 19464
  $547 = $ReallocAsyncCtx4 + 152 | 0; //@line 19465
  HEAP32[$547 >> 2] = $78; //@line 19466
  $548 = $ReallocAsyncCtx4 + 156 | 0; //@line 19467
  HEAP32[$548 >> 2] = $80; //@line 19468
  $549 = $ReallocAsyncCtx4 + 160 | 0; //@line 19469
  HEAP32[$549 >> 2] = $82; //@line 19470
  $550 = $ReallocAsyncCtx4 + 164 | 0; //@line 19471
  HEAP8[$550 >> 0] = $495; //@line 19472
  $551 = $ReallocAsyncCtx4 + 168 | 0; //@line 19473
  HEAP32[$551 >> 2] = $84; //@line 19474
  $552 = $ReallocAsyncCtx4 + 172 | 0; //@line 19475
  HEAP32[$552 >> 2] = $86; //@line 19476
  $553 = $ReallocAsyncCtx4 + 176 | 0; //@line 19477
  HEAP32[$553 >> 2] = $88; //@line 19478
  $554 = $ReallocAsyncCtx4 + 180 | 0; //@line 19479
  HEAP32[$554 >> 2] = $90; //@line 19480
  $555 = $ReallocAsyncCtx4 + 184 | 0; //@line 19481
  HEAP32[$555 >> 2] = $92; //@line 19482
  $556 = $ReallocAsyncCtx4 + 188 | 0; //@line 19483
  HEAP32[$556 >> 2] = $94; //@line 19484
  $557 = $ReallocAsyncCtx4 + 192 | 0; //@line 19485
  HEAP32[$557 >> 2] = $96; //@line 19486
  $558 = $ReallocAsyncCtx4 + 196 | 0; //@line 19487
  HEAP32[$558 >> 2] = $98; //@line 19488
  $559 = $ReallocAsyncCtx4 + 200 | 0; //@line 19489
  HEAP32[$559 >> 2] = $100; //@line 19490
  $560 = $ReallocAsyncCtx4 + 204 | 0; //@line 19491
  HEAP32[$560 >> 2] = $102; //@line 19492
  $561 = $ReallocAsyncCtx4 + 208 | 0; //@line 19493
  HEAP32[$561 >> 2] = $104; //@line 19494
  $562 = $ReallocAsyncCtx4 + 212 | 0; //@line 19495
  HEAP32[$562 >> 2] = $106; //@line 19496
  $563 = $ReallocAsyncCtx4 + 216 | 0; //@line 19497
  HEAP32[$563 >> 2] = $108; //@line 19498
  $564 = $ReallocAsyncCtx4 + 220 | 0; //@line 19499
  HEAP32[$564 >> 2] = $110; //@line 19500
  $565 = $ReallocAsyncCtx4 + 224 | 0; //@line 19501
  HEAP32[$565 >> 2] = $112; //@line 19502
  $566 = $ReallocAsyncCtx4 + 228 | 0; //@line 19503
  HEAP32[$566 >> 2] = $114; //@line 19504
  $567 = $ReallocAsyncCtx4 + 232 | 0; //@line 19505
  HEAP32[$567 >> 2] = $116; //@line 19506
  $568 = $ReallocAsyncCtx4 + 236 | 0; //@line 19507
  HEAP32[$568 >> 2] = $118; //@line 19508
  $569 = $ReallocAsyncCtx4 + 240 | 0; //@line 19509
  HEAP32[$569 >> 2] = $120; //@line 19510
  $570 = $ReallocAsyncCtx4 + 244 | 0; //@line 19511
  HEAP32[$570 >> 2] = $122; //@line 19512
  $571 = $ReallocAsyncCtx4 + 248 | 0; //@line 19513
  HEAP8[$571 >> 0] = $124; //@line 19514
  $572 = $ReallocAsyncCtx4 + 249 | 0; //@line 19515
  HEAP8[$572 >> 0] = $126; //@line 19516
  $573 = $ReallocAsyncCtx4 + 252 | 0; //@line 19517
  HEAP32[$573 >> 2] = $128; //@line 19518
  $574 = $ReallocAsyncCtx4 + 256 | 0; //@line 19519
  HEAP8[$574 >> 0] = $130; //@line 19520
  $575 = $ReallocAsyncCtx4 + 260 | 0; //@line 19521
  HEAP32[$575 >> 2] = $132; //@line 19522
  $576 = $ReallocAsyncCtx4 + 264 | 0; //@line 19523
  HEAP32[$576 >> 2] = $$096$be; //@line 19524
  $577 = $ReallocAsyncCtx4 + 268 | 0; //@line 19525
  HEAP32[$577 >> 2] = $134; //@line 19526
  sp = STACKTOP; //@line 19527
  return;
 } else if ((label | 0) == 29) {
  HEAP8[$104 >> 0] = HEAP8[$120 + ($137 & 255) >> 0] | 0; //@line 19535
  $595 = $$0$be + 5 << 24 >> 24; //@line 19548
  HEAP32[$100 >> 2] = (HEAPU8[$120 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$120 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$120 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 19556
  $605 = HEAP32[(HEAP32[$112 >> 2] | 0) + 48 >> 2] | 0; //@line 19559
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(268) | 0; //@line 19560
  $606 = FUNCTION_TABLE_iii[$605 & 31]($134, $14) | 0; //@line 19561
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 491; //@line 19564
   $607 = $ReallocAsyncCtx5 + 4 | 0; //@line 19565
   HEAP32[$607 >> 2] = $2; //@line 19566
   $608 = $ReallocAsyncCtx5 + 8 | 0; //@line 19567
   HEAP32[$608 >> 2] = $4; //@line 19568
   $609 = $ReallocAsyncCtx5 + 12 | 0; //@line 19569
   HEAP32[$609 >> 2] = $6; //@line 19570
   $610 = $ReallocAsyncCtx5 + 16 | 0; //@line 19571
   HEAP32[$610 >> 2] = $8; //@line 19572
   $611 = $ReallocAsyncCtx5 + 20 | 0; //@line 19573
   HEAP8[$611 >> 0] = $595; //@line 19574
   $612 = $ReallocAsyncCtx5 + 24 | 0; //@line 19575
   HEAP32[$612 >> 2] = $10; //@line 19576
   $613 = $ReallocAsyncCtx5 + 28 | 0; //@line 19577
   HEAP32[$613 >> 2] = $12; //@line 19578
   $614 = $ReallocAsyncCtx5 + 32 | 0; //@line 19579
   HEAP32[$614 >> 2] = $14; //@line 19580
   $615 = $ReallocAsyncCtx5 + 36 | 0; //@line 19581
   HEAP32[$615 >> 2] = $16; //@line 19582
   $616 = $ReallocAsyncCtx5 + 40 | 0; //@line 19583
   HEAP32[$616 >> 2] = $18; //@line 19584
   $617 = $ReallocAsyncCtx5 + 44 | 0; //@line 19585
   HEAP32[$617 >> 2] = $20; //@line 19586
   $618 = $ReallocAsyncCtx5 + 48 | 0; //@line 19587
   HEAP32[$618 >> 2] = $22; //@line 19588
   $619 = $ReallocAsyncCtx5 + 52 | 0; //@line 19589
   HEAP32[$619 >> 2] = $24; //@line 19590
   $620 = $ReallocAsyncCtx5 + 56 | 0; //@line 19591
   HEAP32[$620 >> 2] = $26; //@line 19592
   $621 = $ReallocAsyncCtx5 + 60 | 0; //@line 19593
   HEAP32[$621 >> 2] = $28; //@line 19594
   $622 = $ReallocAsyncCtx5 + 64 | 0; //@line 19595
   HEAP32[$622 >> 2] = $30; //@line 19596
   $623 = $ReallocAsyncCtx5 + 68 | 0; //@line 19597
   HEAP32[$623 >> 2] = $32; //@line 19598
   $624 = $ReallocAsyncCtx5 + 72 | 0; //@line 19599
   HEAP32[$624 >> 2] = $34; //@line 19600
   $625 = $ReallocAsyncCtx5 + 76 | 0; //@line 19601
   HEAP32[$625 >> 2] = $36; //@line 19602
   $626 = $ReallocAsyncCtx5 + 80 | 0; //@line 19603
   HEAP32[$626 >> 2] = $38; //@line 19604
   $627 = $ReallocAsyncCtx5 + 84 | 0; //@line 19605
   HEAP32[$627 >> 2] = $40; //@line 19606
   $628 = $ReallocAsyncCtx5 + 88 | 0; //@line 19607
   HEAP32[$628 >> 2] = $42; //@line 19608
   $629 = $ReallocAsyncCtx5 + 92 | 0; //@line 19609
   HEAP32[$629 >> 2] = $44; //@line 19610
   $630 = $ReallocAsyncCtx5 + 96 | 0; //@line 19611
   HEAP32[$630 >> 2] = $46; //@line 19612
   $631 = $ReallocAsyncCtx5 + 100 | 0; //@line 19613
   HEAP32[$631 >> 2] = $58; //@line 19614
   $632 = $ReallocAsyncCtx5 + 104 | 0; //@line 19615
   HEAP32[$632 >> 2] = $50; //@line 19616
   $633 = $ReallocAsyncCtx5 + 108 | 0; //@line 19617
   HEAP32[$633 >> 2] = $52; //@line 19618
   $634 = $ReallocAsyncCtx5 + 112 | 0; //@line 19619
   HEAP32[$634 >> 2] = $54; //@line 19620
   $635 = $ReallocAsyncCtx5 + 116 | 0; //@line 19621
   HEAP32[$635 >> 2] = $56; //@line 19622
   $636 = $ReallocAsyncCtx5 + 120 | 0; //@line 19623
   HEAP32[$636 >> 2] = $60; //@line 19624
   $637 = $ReallocAsyncCtx5 + 124 | 0; //@line 19625
   HEAP32[$637 >> 2] = $62; //@line 19626
   $638 = $ReallocAsyncCtx5 + 128 | 0; //@line 19627
   HEAP32[$638 >> 2] = $64; //@line 19628
   $639 = $ReallocAsyncCtx5 + 132 | 0; //@line 19629
   HEAP32[$639 >> 2] = $66; //@line 19630
   $640 = $ReallocAsyncCtx5 + 136 | 0; //@line 19631
   HEAP32[$640 >> 2] = $68; //@line 19632
   $641 = $ReallocAsyncCtx5 + 140 | 0; //@line 19633
   HEAP32[$641 >> 2] = $70; //@line 19634
   $642 = $ReallocAsyncCtx5 + 144 | 0; //@line 19635
   HEAP32[$642 >> 2] = $72; //@line 19636
   $643 = $ReallocAsyncCtx5 + 148 | 0; //@line 19637
   HEAP32[$643 >> 2] = $74; //@line 19638
   $644 = $ReallocAsyncCtx5 + 152 | 0; //@line 19639
   HEAP32[$644 >> 2] = $76; //@line 19640
   $645 = $ReallocAsyncCtx5 + 156 | 0; //@line 19641
   HEAP32[$645 >> 2] = $78; //@line 19642
   $646 = $ReallocAsyncCtx5 + 160 | 0; //@line 19643
   HEAP32[$646 >> 2] = $80; //@line 19644
   $647 = $ReallocAsyncCtx5 + 164 | 0; //@line 19645
   HEAP32[$647 >> 2] = $82; //@line 19646
   $648 = $ReallocAsyncCtx5 + 168 | 0; //@line 19647
   HEAP32[$648 >> 2] = $84; //@line 19648
   $649 = $ReallocAsyncCtx5 + 172 | 0; //@line 19649
   HEAP32[$649 >> 2] = $86; //@line 19650
   $650 = $ReallocAsyncCtx5 + 176 | 0; //@line 19651
   HEAP32[$650 >> 2] = $88; //@line 19652
   $651 = $ReallocAsyncCtx5 + 180 | 0; //@line 19653
   HEAP32[$651 >> 2] = $90; //@line 19654
   $652 = $ReallocAsyncCtx5 + 184 | 0; //@line 19655
   HEAP32[$652 >> 2] = $92; //@line 19656
   $653 = $ReallocAsyncCtx5 + 188 | 0; //@line 19657
   HEAP32[$653 >> 2] = $94; //@line 19658
   $654 = $ReallocAsyncCtx5 + 192 | 0; //@line 19659
   HEAP32[$654 >> 2] = $96; //@line 19660
   $655 = $ReallocAsyncCtx5 + 196 | 0; //@line 19661
   HEAP32[$655 >> 2] = $98; //@line 19662
   $656 = $ReallocAsyncCtx5 + 200 | 0; //@line 19663
   HEAP32[$656 >> 2] = $100; //@line 19664
   $657 = $ReallocAsyncCtx5 + 204 | 0; //@line 19665
   HEAP32[$657 >> 2] = $102; //@line 19666
   $658 = $ReallocAsyncCtx5 + 208 | 0; //@line 19667
   HEAP32[$658 >> 2] = $104; //@line 19668
   $659 = $ReallocAsyncCtx5 + 212 | 0; //@line 19669
   HEAP32[$659 >> 2] = $106; //@line 19670
   $660 = $ReallocAsyncCtx5 + 216 | 0; //@line 19671
   HEAP32[$660 >> 2] = $108; //@line 19672
   $661 = $ReallocAsyncCtx5 + 220 | 0; //@line 19673
   HEAP32[$661 >> 2] = $110; //@line 19674
   $662 = $ReallocAsyncCtx5 + 224 | 0; //@line 19675
   HEAP32[$662 >> 2] = $112; //@line 19676
   $663 = $ReallocAsyncCtx5 + 228 | 0; //@line 19677
   HEAP32[$663 >> 2] = $114; //@line 19678
   $664 = $ReallocAsyncCtx5 + 232 | 0; //@line 19679
   HEAP32[$664 >> 2] = $116; //@line 19680
   $665 = $ReallocAsyncCtx5 + 236 | 0; //@line 19681
   HEAP32[$665 >> 2] = $118; //@line 19682
   $666 = $ReallocAsyncCtx5 + 240 | 0; //@line 19683
   HEAP32[$666 >> 2] = $120; //@line 19684
   $667 = $ReallocAsyncCtx5 + 244 | 0; //@line 19685
   HEAP32[$667 >> 2] = $122; //@line 19686
   $668 = $ReallocAsyncCtx5 + 248 | 0; //@line 19687
   HEAP8[$668 >> 0] = $124; //@line 19688
   $669 = $ReallocAsyncCtx5 + 249 | 0; //@line 19689
   HEAP8[$669 >> 0] = $126; //@line 19690
   $670 = $ReallocAsyncCtx5 + 252 | 0; //@line 19691
   HEAP32[$670 >> 2] = $128; //@line 19692
   $671 = $ReallocAsyncCtx5 + 256 | 0; //@line 19693
   HEAP8[$671 >> 0] = $130; //@line 19694
   $672 = $ReallocAsyncCtx5 + 260 | 0; //@line 19695
   HEAP32[$672 >> 2] = $132; //@line 19696
   $673 = $ReallocAsyncCtx5 + 264 | 0; //@line 19697
   HEAP32[$673 >> 2] = $134; //@line 19698
   sp = STACKTOP; //@line 19699
   return;
  }
  HEAP8[___async_retval >> 0] = $606; //@line 19703
  ___async_unwind = 0; //@line 19704
  HEAP32[$ReallocAsyncCtx5 >> 2] = 491; //@line 19705
  $607 = $ReallocAsyncCtx5 + 4 | 0; //@line 19706
  HEAP32[$607 >> 2] = $2; //@line 19707
  $608 = $ReallocAsyncCtx5 + 8 | 0; //@line 19708
  HEAP32[$608 >> 2] = $4; //@line 19709
  $609 = $ReallocAsyncCtx5 + 12 | 0; //@line 19710
  HEAP32[$609 >> 2] = $6; //@line 19711
  $610 = $ReallocAsyncCtx5 + 16 | 0; //@line 19712
  HEAP32[$610 >> 2] = $8; //@line 19713
  $611 = $ReallocAsyncCtx5 + 20 | 0; //@line 19714
  HEAP8[$611 >> 0] = $595; //@line 19715
  $612 = $ReallocAsyncCtx5 + 24 | 0; //@line 19716
  HEAP32[$612 >> 2] = $10; //@line 19717
  $613 = $ReallocAsyncCtx5 + 28 | 0; //@line 19718
  HEAP32[$613 >> 2] = $12; //@line 19719
  $614 = $ReallocAsyncCtx5 + 32 | 0; //@line 19720
  HEAP32[$614 >> 2] = $14; //@line 19721
  $615 = $ReallocAsyncCtx5 + 36 | 0; //@line 19722
  HEAP32[$615 >> 2] = $16; //@line 19723
  $616 = $ReallocAsyncCtx5 + 40 | 0; //@line 19724
  HEAP32[$616 >> 2] = $18; //@line 19725
  $617 = $ReallocAsyncCtx5 + 44 | 0; //@line 19726
  HEAP32[$617 >> 2] = $20; //@line 19727
  $618 = $ReallocAsyncCtx5 + 48 | 0; //@line 19728
  HEAP32[$618 >> 2] = $22; //@line 19729
  $619 = $ReallocAsyncCtx5 + 52 | 0; //@line 19730
  HEAP32[$619 >> 2] = $24; //@line 19731
  $620 = $ReallocAsyncCtx5 + 56 | 0; //@line 19732
  HEAP32[$620 >> 2] = $26; //@line 19733
  $621 = $ReallocAsyncCtx5 + 60 | 0; //@line 19734
  HEAP32[$621 >> 2] = $28; //@line 19735
  $622 = $ReallocAsyncCtx5 + 64 | 0; //@line 19736
  HEAP32[$622 >> 2] = $30; //@line 19737
  $623 = $ReallocAsyncCtx5 + 68 | 0; //@line 19738
  HEAP32[$623 >> 2] = $32; //@line 19739
  $624 = $ReallocAsyncCtx5 + 72 | 0; //@line 19740
  HEAP32[$624 >> 2] = $34; //@line 19741
  $625 = $ReallocAsyncCtx5 + 76 | 0; //@line 19742
  HEAP32[$625 >> 2] = $36; //@line 19743
  $626 = $ReallocAsyncCtx5 + 80 | 0; //@line 19744
  HEAP32[$626 >> 2] = $38; //@line 19745
  $627 = $ReallocAsyncCtx5 + 84 | 0; //@line 19746
  HEAP32[$627 >> 2] = $40; //@line 19747
  $628 = $ReallocAsyncCtx5 + 88 | 0; //@line 19748
  HEAP32[$628 >> 2] = $42; //@line 19749
  $629 = $ReallocAsyncCtx5 + 92 | 0; //@line 19750
  HEAP32[$629 >> 2] = $44; //@line 19751
  $630 = $ReallocAsyncCtx5 + 96 | 0; //@line 19752
  HEAP32[$630 >> 2] = $46; //@line 19753
  $631 = $ReallocAsyncCtx5 + 100 | 0; //@line 19754
  HEAP32[$631 >> 2] = $58; //@line 19755
  $632 = $ReallocAsyncCtx5 + 104 | 0; //@line 19756
  HEAP32[$632 >> 2] = $50; //@line 19757
  $633 = $ReallocAsyncCtx5 + 108 | 0; //@line 19758
  HEAP32[$633 >> 2] = $52; //@line 19759
  $634 = $ReallocAsyncCtx5 + 112 | 0; //@line 19760
  HEAP32[$634 >> 2] = $54; //@line 19761
  $635 = $ReallocAsyncCtx5 + 116 | 0; //@line 19762
  HEAP32[$635 >> 2] = $56; //@line 19763
  $636 = $ReallocAsyncCtx5 + 120 | 0; //@line 19764
  HEAP32[$636 >> 2] = $60; //@line 19765
  $637 = $ReallocAsyncCtx5 + 124 | 0; //@line 19766
  HEAP32[$637 >> 2] = $62; //@line 19767
  $638 = $ReallocAsyncCtx5 + 128 | 0; //@line 19768
  HEAP32[$638 >> 2] = $64; //@line 19769
  $639 = $ReallocAsyncCtx5 + 132 | 0; //@line 19770
  HEAP32[$639 >> 2] = $66; //@line 19771
  $640 = $ReallocAsyncCtx5 + 136 | 0; //@line 19772
  HEAP32[$640 >> 2] = $68; //@line 19773
  $641 = $ReallocAsyncCtx5 + 140 | 0; //@line 19774
  HEAP32[$641 >> 2] = $70; //@line 19775
  $642 = $ReallocAsyncCtx5 + 144 | 0; //@line 19776
  HEAP32[$642 >> 2] = $72; //@line 19777
  $643 = $ReallocAsyncCtx5 + 148 | 0; //@line 19778
  HEAP32[$643 >> 2] = $74; //@line 19779
  $644 = $ReallocAsyncCtx5 + 152 | 0; //@line 19780
  HEAP32[$644 >> 2] = $76; //@line 19781
  $645 = $ReallocAsyncCtx5 + 156 | 0; //@line 19782
  HEAP32[$645 >> 2] = $78; //@line 19783
  $646 = $ReallocAsyncCtx5 + 160 | 0; //@line 19784
  HEAP32[$646 >> 2] = $80; //@line 19785
  $647 = $ReallocAsyncCtx5 + 164 | 0; //@line 19786
  HEAP32[$647 >> 2] = $82; //@line 19787
  $648 = $ReallocAsyncCtx5 + 168 | 0; //@line 19788
  HEAP32[$648 >> 2] = $84; //@line 19789
  $649 = $ReallocAsyncCtx5 + 172 | 0; //@line 19790
  HEAP32[$649 >> 2] = $86; //@line 19791
  $650 = $ReallocAsyncCtx5 + 176 | 0; //@line 19792
  HEAP32[$650 >> 2] = $88; //@line 19793
  $651 = $ReallocAsyncCtx5 + 180 | 0; //@line 19794
  HEAP32[$651 >> 2] = $90; //@line 19795
  $652 = $ReallocAsyncCtx5 + 184 | 0; //@line 19796
  HEAP32[$652 >> 2] = $92; //@line 19797
  $653 = $ReallocAsyncCtx5 + 188 | 0; //@line 19798
  HEAP32[$653 >> 2] = $94; //@line 19799
  $654 = $ReallocAsyncCtx5 + 192 | 0; //@line 19800
  HEAP32[$654 >> 2] = $96; //@line 19801
  $655 = $ReallocAsyncCtx5 + 196 | 0; //@line 19802
  HEAP32[$655 >> 2] = $98; //@line 19803
  $656 = $ReallocAsyncCtx5 + 200 | 0; //@line 19804
  HEAP32[$656 >> 2] = $100; //@line 19805
  $657 = $ReallocAsyncCtx5 + 204 | 0; //@line 19806
  HEAP32[$657 >> 2] = $102; //@line 19807
  $658 = $ReallocAsyncCtx5 + 208 | 0; //@line 19808
  HEAP32[$658 >> 2] = $104; //@line 19809
  $659 = $ReallocAsyncCtx5 + 212 | 0; //@line 19810
  HEAP32[$659 >> 2] = $106; //@line 19811
  $660 = $ReallocAsyncCtx5 + 216 | 0; //@line 19812
  HEAP32[$660 >> 2] = $108; //@line 19813
  $661 = $ReallocAsyncCtx5 + 220 | 0; //@line 19814
  HEAP32[$661 >> 2] = $110; //@line 19815
  $662 = $ReallocAsyncCtx5 + 224 | 0; //@line 19816
  HEAP32[$662 >> 2] = $112; //@line 19817
  $663 = $ReallocAsyncCtx5 + 228 | 0; //@line 19818
  HEAP32[$663 >> 2] = $114; //@line 19819
  $664 = $ReallocAsyncCtx5 + 232 | 0; //@line 19820
  HEAP32[$664 >> 2] = $116; //@line 19821
  $665 = $ReallocAsyncCtx5 + 236 | 0; //@line 19822
  HEAP32[$665 >> 2] = $118; //@line 19823
  $666 = $ReallocAsyncCtx5 + 240 | 0; //@line 19824
  HEAP32[$666 >> 2] = $120; //@line 19825
  $667 = $ReallocAsyncCtx5 + 244 | 0; //@line 19826
  HEAP32[$667 >> 2] = $122; //@line 19827
  $668 = $ReallocAsyncCtx5 + 248 | 0; //@line 19828
  HEAP8[$668 >> 0] = $124; //@line 19829
  $669 = $ReallocAsyncCtx5 + 249 | 0; //@line 19830
  HEAP8[$669 >> 0] = $126; //@line 19831
  $670 = $ReallocAsyncCtx5 + 252 | 0; //@line 19832
  HEAP32[$670 >> 2] = $128; //@line 19833
  $671 = $ReallocAsyncCtx5 + 256 | 0; //@line 19834
  HEAP8[$671 >> 0] = $130; //@line 19835
  $672 = $ReallocAsyncCtx5 + 260 | 0; //@line 19836
  HEAP32[$672 >> 2] = $132; //@line 19837
  $673 = $ReallocAsyncCtx5 + 264 | 0; //@line 19838
  HEAP32[$673 >> 2] = $134; //@line 19839
  sp = STACKTOP; //@line 19840
  return;
 } else if ((label | 0) == 33) {
  HEAP32[___async_retval >> 2] = $$096$be; //@line 19845
  return;
 }
}
function __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_376($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$096$be = 0, $$2 = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $130 = 0, $132 = 0, $134 = 0, $136 = 0, $139 = 0, $14 = 0, $150 = 0, $151 = 0, $16 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $233 = 0, $236 = 0, $24 = 0, $241 = 0, $249 = 0, $26 = 0, $268 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $349 = 0, $350 = 0, $36 = 0, $38 = 0, $387 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $463 = 0, $467 = 0, $471 = 0, $474 = 0, $48 = 0, $480 = 0, $483 = 0, $484 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $572 = 0, $58 = 0, $594 = 0, $6 = 0, $60 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $671 = 0, $672 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 21810
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21812
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21814
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21816
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21818
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21820
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21822
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21824
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 21826
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 21828
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 21830
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 21832
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 21834
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 21836
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 21838
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 21840
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 21842
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 21844
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 21846
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 21848
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 21850
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 21852
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 21854
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 21856
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 21858
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 21860
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 21862
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 21864
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 21866
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 21868
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 21870
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 21872
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 21874
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 21876
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 21878
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 21880
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 21882
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 21884
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 21886
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 21888
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 21890
 $82 = HEAP8[$0 + 164 >> 0] | 0; //@line 21892
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 21894
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 21896
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 21898
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 21900
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 21902
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 21904
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 21906
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 21908
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 21910
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 21912
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 21914
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 21916
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 21918
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 21920
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 21922
 $114 = HEAP32[$0 + 228 >> 2] | 0; //@line 21924
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 21926
 $118 = HEAP32[$0 + 236 >> 2] | 0; //@line 21928
 $120 = HEAP32[$0 + 240 >> 2] | 0; //@line 21930
 $122 = HEAP32[$0 + 244 >> 2] | 0; //@line 21932
 $124 = HEAP8[$0 + 248 >> 0] | 0; //@line 21934
 $126 = HEAP8[$0 + 249 >> 0] | 0; //@line 21936
 $128 = HEAP32[$0 + 252 >> 2] | 0; //@line 21938
 $130 = HEAP8[$0 + 256 >> 0] | 0; //@line 21940
 $132 = HEAP32[$0 + 260 >> 2] | 0; //@line 21942
 $134 = HEAP32[$0 + 264 >> 2] | 0; //@line 21944
 $136 = HEAP32[$0 + 268 >> 2] | 0; //@line 21946
 if (HEAP8[___async_retval >> 0] & 1) {
  HEAP8[$20 >> 0] = HEAP8[$56 >> 0] | 0; //@line 21952
  HEAP8[$84 >> 0] = HEAP8[$42 >> 0] | 0; //@line 21954
  HEAPF32[$76 >> 2] = +(HEAPU8[12385 + (HEAPU8[$74 >> 0] | 0) >> 0] | 0); //@line 21960
  $572 = HEAP8[$110 >> 0] | 0; //@line 21962
  if (($572 & 255) < (-128 - (HEAP8[$106 >> 0] | 0) & 255)) {
   HEAP8[$110 >> 0] = $572 + 1 << 24 >> 24; //@line 21969
   HEAP8[($572 & 255) + ($92 + 4) >> 0] = 9; //@line 21970
   HEAP8[$116 >> 0] = 1; //@line 21971
   $$2 = 0; //@line 21972
  } else {
   $$2 = -1e3; //@line 21974
  }
 } else {
  $$2 = $134; //@line 21977
 }
 $$0$be = $82; //@line 21979
 $$096$be = $$2; //@line 21979
 L6 : while (1) {
  if (($$0$be & 255) >= ($126 & 255)) {
   label = 32; //@line 21983
   break;
  }
  $139 = $$0$be + 1 << 24 >> 24; //@line 21987
  switch (HEAP8[$120 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 21992
    break L6;
    break;
   }
  case 5:
   {
    label = 9; //@line 21997
    break L6;
    break;
   }
  case 7:
   {
    label = 14; //@line 22002
    break L6;
    break;
   }
  case 9:
   {
    label = 19; //@line 22007
    break L6;
    break;
   }
  case 10:
   {
    label = 28; //@line 22012
    break L6;
    break;
   }
  case 2:
   {
    HEAP32[$60 >> 2] = 0; //@line 22017
    HEAP8[$54 >> 0] = HEAP8[$120 + ($139 & 255) >> 0] | 0; //@line 22022
    HEAP8[$38 >> 0] = HEAP8[$120 + ($$0$be + 2 & 255) >> 0] | 0; //@line 22027
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 22028
    continue L6;
    break;
   }
  case 4:
   {
    $233 = $$0$be + 2 << 24 >> 24; //@line 22033
    $236 = HEAP8[$120 + ($139 & 255) >> 0] | 0; //@line 22036
    HEAP8[$132 >> 0] = $236; //@line 22037
    HEAP16[$6 >> 1] = 1 << ($236 & 255); //@line 22041
    $241 = HEAP8[$110 >> 0] | 0; //@line 22043
    if (($241 & 255) >= (-128 - (HEAP8[$106 >> 0] | 0) & 255)) {
     $$0$be = $233; //@line 22047
     $$096$be = -1e3; //@line 22047
     continue L6;
    }
    HEAP8[$110 >> 0] = $241 + 1 << 24 >> 24; //@line 22053
    HEAP8[($241 & 255) + ($92 + 4) >> 0] = 4; //@line 22054
    HEAP8[$116 >> 0] = 1; //@line 22055
    $$0$be = $233; //@line 22056
    $$096$be = 0; //@line 22056
    continue L6;
    break;
   }
  case 6:
   {
    $349 = HEAP8[$110 >> 0] | 0; //@line 22062
    $350 = $349 & 255; //@line 22063
    if (((-128 - (HEAP8[$106 >> 0] | 0) & 255) + -2 | 0) <= ($350 | 0)) {
     $$0$be = $139; //@line 22069
     $$096$be = -1e3; //@line 22069
     continue L6;
    }
    HEAP8[$92 + 4 + $350 >> 0] = 6; //@line 22074
    HEAP8[($349 + 1 & 255) + ($92 + 4) >> 0] = -1; //@line 22078
    HEAP8[$110 >> 0] = $349 + 3 << 24 >> 24; //@line 22080
    HEAP8[($349 + 2 & 255) + ($92 + 4) >> 0] = $130; //@line 22083
    HEAP8[$116 >> 0] = 1; //@line 22084
    $$0$be = $139; //@line 22085
    $$096$be = 0; //@line 22085
    continue L6;
    break;
   }
  case 8:
   {
    $463 = $$0$be + 2 << 24 >> 24; //@line 22090
    $467 = HEAP8[$120 + ($139 & 255) >> 0] & 15; //@line 22094
    $471 = ($467 + ($467 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 22099
    HEAP32[$36 >> 2] = $471; //@line 22100
    HEAP32[$24 >> 2] = $471 + 1e3; //@line 22102
    $474 = HEAP8[$110 >> 0] | 0; //@line 22104
    if (($474 & 255) >= (-128 - (HEAP8[$106 >> 0] | 0) & 255)) {
     $$0$be = $463; //@line 22108
     $$096$be = -1e3; //@line 22108
     continue L6;
    }
    HEAP8[$110 >> 0] = $474 + 1 << 24 >> 24; //@line 22114
    HEAP8[($474 & 255) + ($92 + 4) >> 0] = 8; //@line 22115
    HEAP8[$94 >> 0] = 1; //@line 22116
    HEAP8[$116 >> 0] = 1; //@line 22117
    $$0$be = $463; //@line 22118
    $$096$be = 0; //@line 22118
    continue L6;
    break;
   }
  default:
   {
    $$0$be = $139; //@line 22123
    $$096$be = -1013; //@line 22123
    continue L6;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$128 >> 0] = 0; //@line 22129
  HEAP8[$62 >> 0] = 0; //@line 22130
  HEAP8[$72 >> 0] = 0; //@line 22131
  HEAP8[$46 >> 0] = 0; //@line 22132
  $150 = $139 & 255; //@line 22133
  $151 = $150 + -1 | 0; //@line 22134
  HEAP32[$26 >> 2] = $120 + $151; //@line 22136
  HEAP8[$10 >> 0] = $88 - $151; //@line 22139
  HEAP8[$8 >> 0] = HEAP8[$4 >> 0] | 0; //@line 22141
  HEAP8[$32 >> 0] = HEAP8[$20 >> 0] | 0; //@line 22143
  HEAP8[$52 >> 0] = HEAP8[$44 >> 0] | 0; //@line 22145
  HEAP8[$70 >> 0] = HEAP8[$66 >> 0] | 0; //@line 22147
  HEAP8[$90 >> 0] = HEAP8[$78 >> 0] | 0; //@line 22149
  $162 = HEAP32[(HEAP32[$98 >> 2] | 0) + 36 >> 2] | 0; //@line 22152
  $ReallocAsyncCtx = _emscripten_realloc_async_context(272) | 0; //@line 22153
  $163 = FUNCTION_TABLE_iiiiiii[$162 & 3]($136, $122, $128, $62, $72, $46) | 0; //@line 22154
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 487; //@line 22157
   $164 = $ReallocAsyncCtx + 4 | 0; //@line 22158
   HEAP32[$164 >> 2] = $2; //@line 22159
   $165 = $ReallocAsyncCtx + 8 | 0; //@line 22160
   HEAP32[$165 >> 2] = $4; //@line 22161
   $166 = $ReallocAsyncCtx + 12 | 0; //@line 22162
   HEAP32[$166 >> 2] = $6; //@line 22163
   $167 = $ReallocAsyncCtx + 16 | 0; //@line 22164
   HEAP32[$167 >> 2] = $8; //@line 22165
   $168 = $ReallocAsyncCtx + 20 | 0; //@line 22166
   HEAP32[$168 >> 2] = $10; //@line 22167
   $169 = $ReallocAsyncCtx + 24 | 0; //@line 22168
   HEAP32[$169 >> 2] = $12; //@line 22169
   $170 = $ReallocAsyncCtx + 28 | 0; //@line 22170
   HEAP32[$170 >> 2] = $14; //@line 22171
   $171 = $ReallocAsyncCtx + 32 | 0; //@line 22172
   HEAP32[$171 >> 2] = $16; //@line 22173
   $172 = $ReallocAsyncCtx + 36 | 0; //@line 22174
   HEAP32[$172 >> 2] = $18; //@line 22175
   $173 = $ReallocAsyncCtx + 40 | 0; //@line 22176
   HEAP32[$173 >> 2] = $20; //@line 22177
   $174 = $ReallocAsyncCtx + 44 | 0; //@line 22178
   HEAP32[$174 >> 2] = $22; //@line 22179
   $175 = $ReallocAsyncCtx + 48 | 0; //@line 22180
   HEAP32[$175 >> 2] = $24; //@line 22181
   $176 = $ReallocAsyncCtx + 52 | 0; //@line 22182
   HEAP32[$176 >> 2] = $26; //@line 22183
   $177 = $ReallocAsyncCtx + 56 | 0; //@line 22184
   HEAP32[$177 >> 2] = $28; //@line 22185
   $178 = $ReallocAsyncCtx + 60 | 0; //@line 22186
   HEAP32[$178 >> 2] = $30; //@line 22187
   $179 = $ReallocAsyncCtx + 64 | 0; //@line 22188
   HEAP32[$179 >> 2] = $32; //@line 22189
   $180 = $ReallocAsyncCtx + 68 | 0; //@line 22190
   HEAP32[$180 >> 2] = $34; //@line 22191
   $181 = $ReallocAsyncCtx + 72 | 0; //@line 22192
   HEAP32[$181 >> 2] = $36; //@line 22193
   $182 = $ReallocAsyncCtx + 76 | 0; //@line 22194
   HEAP32[$182 >> 2] = $38; //@line 22195
   $183 = $ReallocAsyncCtx + 80 | 0; //@line 22196
   HEAP32[$183 >> 2] = $40; //@line 22197
   $184 = $ReallocAsyncCtx + 84 | 0; //@line 22198
   HEAP32[$184 >> 2] = $42; //@line 22199
   $185 = $ReallocAsyncCtx + 88 | 0; //@line 22200
   HEAP32[$185 >> 2] = $44; //@line 22201
   $186 = $ReallocAsyncCtx + 92 | 0; //@line 22202
   HEAP32[$186 >> 2] = $46; //@line 22203
   $187 = $ReallocAsyncCtx + 96 | 0; //@line 22204
   HEAP32[$187 >> 2] = $48; //@line 22205
   $188 = $ReallocAsyncCtx + 100 | 0; //@line 22206
   HEAP32[$188 >> 2] = $50; //@line 22207
   $189 = $ReallocAsyncCtx + 104 | 0; //@line 22208
   HEAP32[$189 >> 2] = $52; //@line 22209
   $190 = $ReallocAsyncCtx + 108 | 0; //@line 22210
   HEAP32[$190 >> 2] = $54; //@line 22211
   $191 = $ReallocAsyncCtx + 112 | 0; //@line 22212
   HEAP32[$191 >> 2] = $56; //@line 22213
   $192 = $ReallocAsyncCtx + 116 | 0; //@line 22214
   HEAP32[$192 >> 2] = $58; //@line 22215
   $193 = $ReallocAsyncCtx + 120 | 0; //@line 22216
   HEAP32[$193 >> 2] = $150; //@line 22217
   $194 = $ReallocAsyncCtx + 124 | 0; //@line 22218
   HEAP32[$194 >> 2] = $60; //@line 22219
   $195 = $ReallocAsyncCtx + 128 | 0; //@line 22220
   HEAP32[$195 >> 2] = $62; //@line 22221
   $196 = $ReallocAsyncCtx + 132 | 0; //@line 22222
   HEAP32[$196 >> 2] = $64; //@line 22223
   $197 = $ReallocAsyncCtx + 136 | 0; //@line 22224
   HEAP32[$197 >> 2] = $66; //@line 22225
   $198 = $ReallocAsyncCtx + 140 | 0; //@line 22226
   HEAP32[$198 >> 2] = $68; //@line 22227
   $199 = $ReallocAsyncCtx + 144 | 0; //@line 22228
   HEAP32[$199 >> 2] = $70; //@line 22229
   $200 = $ReallocAsyncCtx + 148 | 0; //@line 22230
   HEAP32[$200 >> 2] = $72; //@line 22231
   $201 = $ReallocAsyncCtx + 152 | 0; //@line 22232
   HEAP32[$201 >> 2] = $74; //@line 22233
   $202 = $ReallocAsyncCtx + 156 | 0; //@line 22234
   HEAP32[$202 >> 2] = $76; //@line 22235
   $203 = $ReallocAsyncCtx + 160 | 0; //@line 22236
   HEAP32[$203 >> 2] = $78; //@line 22237
   $204 = $ReallocAsyncCtx + 164 | 0; //@line 22238
   HEAP32[$204 >> 2] = $80; //@line 22239
   $205 = $ReallocAsyncCtx + 168 | 0; //@line 22240
   HEAP32[$205 >> 2] = $84; //@line 22241
   $206 = $ReallocAsyncCtx + 172 | 0; //@line 22242
   HEAP32[$206 >> 2] = $86; //@line 22243
   $207 = $ReallocAsyncCtx + 176 | 0; //@line 22244
   HEAP32[$207 >> 2] = $88; //@line 22245
   $208 = $ReallocAsyncCtx + 180 | 0; //@line 22246
   HEAP32[$208 >> 2] = $90; //@line 22247
   $209 = $ReallocAsyncCtx + 184 | 0; //@line 22248
   HEAP32[$209 >> 2] = $92; //@line 22249
   $210 = $ReallocAsyncCtx + 188 | 0; //@line 22250
   HEAP32[$210 >> 2] = $94; //@line 22251
   $211 = $ReallocAsyncCtx + 192 | 0; //@line 22252
   HEAP32[$211 >> 2] = $96; //@line 22253
   $212 = $ReallocAsyncCtx + 196 | 0; //@line 22254
   HEAP32[$212 >> 2] = $98; //@line 22255
   $213 = $ReallocAsyncCtx + 200 | 0; //@line 22256
   HEAP32[$213 >> 2] = $100; //@line 22257
   $214 = $ReallocAsyncCtx + 204 | 0; //@line 22258
   HEAP32[$214 >> 2] = $102; //@line 22259
   $215 = $ReallocAsyncCtx + 208 | 0; //@line 22260
   HEAP32[$215 >> 2] = $104; //@line 22261
   $216 = $ReallocAsyncCtx + 212 | 0; //@line 22262
   HEAP32[$216 >> 2] = $106; //@line 22263
   $217 = $ReallocAsyncCtx + 216 | 0; //@line 22264
   HEAP32[$217 >> 2] = $108; //@line 22265
   $218 = $ReallocAsyncCtx + 220 | 0; //@line 22266
   HEAP32[$218 >> 2] = $110; //@line 22267
   $219 = $ReallocAsyncCtx + 224 | 0; //@line 22268
   HEAP32[$219 >> 2] = $112; //@line 22269
   $220 = $ReallocAsyncCtx + 228 | 0; //@line 22270
   HEAP32[$220 >> 2] = $114; //@line 22271
   $221 = $ReallocAsyncCtx + 232 | 0; //@line 22272
   HEAP32[$221 >> 2] = $116; //@line 22273
   $222 = $ReallocAsyncCtx + 236 | 0; //@line 22274
   HEAP32[$222 >> 2] = $118; //@line 22275
   $223 = $ReallocAsyncCtx + 240 | 0; //@line 22276
   HEAP32[$223 >> 2] = $120; //@line 22277
   $224 = $ReallocAsyncCtx + 244 | 0; //@line 22278
   HEAP32[$224 >> 2] = $122; //@line 22279
   $225 = $ReallocAsyncCtx + 248 | 0; //@line 22280
   HEAP8[$225 >> 0] = $124; //@line 22281
   $226 = $ReallocAsyncCtx + 249 | 0; //@line 22282
   HEAP8[$226 >> 0] = $126; //@line 22283
   $227 = $ReallocAsyncCtx + 252 | 0; //@line 22284
   HEAP32[$227 >> 2] = $128; //@line 22285
   $228 = $ReallocAsyncCtx + 256 | 0; //@line 22286
   HEAP8[$228 >> 0] = $130; //@line 22287
   $229 = $ReallocAsyncCtx + 260 | 0; //@line 22288
   HEAP32[$229 >> 2] = $132; //@line 22289
   $230 = $ReallocAsyncCtx + 264 | 0; //@line 22290
   HEAP32[$230 >> 2] = $$096$be; //@line 22291
   $231 = $ReallocAsyncCtx + 268 | 0; //@line 22292
   HEAP32[$231 >> 2] = $136; //@line 22293
   sp = STACKTOP; //@line 22294
   return;
  }
  HEAP8[___async_retval >> 0] = $163; //@line 22298
  ___async_unwind = 0; //@line 22299
  HEAP32[$ReallocAsyncCtx >> 2] = 487; //@line 22300
  $164 = $ReallocAsyncCtx + 4 | 0; //@line 22301
  HEAP32[$164 >> 2] = $2; //@line 22302
  $165 = $ReallocAsyncCtx + 8 | 0; //@line 22303
  HEAP32[$165 >> 2] = $4; //@line 22304
  $166 = $ReallocAsyncCtx + 12 | 0; //@line 22305
  HEAP32[$166 >> 2] = $6; //@line 22306
  $167 = $ReallocAsyncCtx + 16 | 0; //@line 22307
  HEAP32[$167 >> 2] = $8; //@line 22308
  $168 = $ReallocAsyncCtx + 20 | 0; //@line 22309
  HEAP32[$168 >> 2] = $10; //@line 22310
  $169 = $ReallocAsyncCtx + 24 | 0; //@line 22311
  HEAP32[$169 >> 2] = $12; //@line 22312
  $170 = $ReallocAsyncCtx + 28 | 0; //@line 22313
  HEAP32[$170 >> 2] = $14; //@line 22314
  $171 = $ReallocAsyncCtx + 32 | 0; //@line 22315
  HEAP32[$171 >> 2] = $16; //@line 22316
  $172 = $ReallocAsyncCtx + 36 | 0; //@line 22317
  HEAP32[$172 >> 2] = $18; //@line 22318
  $173 = $ReallocAsyncCtx + 40 | 0; //@line 22319
  HEAP32[$173 >> 2] = $20; //@line 22320
  $174 = $ReallocAsyncCtx + 44 | 0; //@line 22321
  HEAP32[$174 >> 2] = $22; //@line 22322
  $175 = $ReallocAsyncCtx + 48 | 0; //@line 22323
  HEAP32[$175 >> 2] = $24; //@line 22324
  $176 = $ReallocAsyncCtx + 52 | 0; //@line 22325
  HEAP32[$176 >> 2] = $26; //@line 22326
  $177 = $ReallocAsyncCtx + 56 | 0; //@line 22327
  HEAP32[$177 >> 2] = $28; //@line 22328
  $178 = $ReallocAsyncCtx + 60 | 0; //@line 22329
  HEAP32[$178 >> 2] = $30; //@line 22330
  $179 = $ReallocAsyncCtx + 64 | 0; //@line 22331
  HEAP32[$179 >> 2] = $32; //@line 22332
  $180 = $ReallocAsyncCtx + 68 | 0; //@line 22333
  HEAP32[$180 >> 2] = $34; //@line 22334
  $181 = $ReallocAsyncCtx + 72 | 0; //@line 22335
  HEAP32[$181 >> 2] = $36; //@line 22336
  $182 = $ReallocAsyncCtx + 76 | 0; //@line 22337
  HEAP32[$182 >> 2] = $38; //@line 22338
  $183 = $ReallocAsyncCtx + 80 | 0; //@line 22339
  HEAP32[$183 >> 2] = $40; //@line 22340
  $184 = $ReallocAsyncCtx + 84 | 0; //@line 22341
  HEAP32[$184 >> 2] = $42; //@line 22342
  $185 = $ReallocAsyncCtx + 88 | 0; //@line 22343
  HEAP32[$185 >> 2] = $44; //@line 22344
  $186 = $ReallocAsyncCtx + 92 | 0; //@line 22345
  HEAP32[$186 >> 2] = $46; //@line 22346
  $187 = $ReallocAsyncCtx + 96 | 0; //@line 22347
  HEAP32[$187 >> 2] = $48; //@line 22348
  $188 = $ReallocAsyncCtx + 100 | 0; //@line 22349
  HEAP32[$188 >> 2] = $50; //@line 22350
  $189 = $ReallocAsyncCtx + 104 | 0; //@line 22351
  HEAP32[$189 >> 2] = $52; //@line 22352
  $190 = $ReallocAsyncCtx + 108 | 0; //@line 22353
  HEAP32[$190 >> 2] = $54; //@line 22354
  $191 = $ReallocAsyncCtx + 112 | 0; //@line 22355
  HEAP32[$191 >> 2] = $56; //@line 22356
  $192 = $ReallocAsyncCtx + 116 | 0; //@line 22357
  HEAP32[$192 >> 2] = $58; //@line 22358
  $193 = $ReallocAsyncCtx + 120 | 0; //@line 22359
  HEAP32[$193 >> 2] = $150; //@line 22360
  $194 = $ReallocAsyncCtx + 124 | 0; //@line 22361
  HEAP32[$194 >> 2] = $60; //@line 22362
  $195 = $ReallocAsyncCtx + 128 | 0; //@line 22363
  HEAP32[$195 >> 2] = $62; //@line 22364
  $196 = $ReallocAsyncCtx + 132 | 0; //@line 22365
  HEAP32[$196 >> 2] = $64; //@line 22366
  $197 = $ReallocAsyncCtx + 136 | 0; //@line 22367
  HEAP32[$197 >> 2] = $66; //@line 22368
  $198 = $ReallocAsyncCtx + 140 | 0; //@line 22369
  HEAP32[$198 >> 2] = $68; //@line 22370
  $199 = $ReallocAsyncCtx + 144 | 0; //@line 22371
  HEAP32[$199 >> 2] = $70; //@line 22372
  $200 = $ReallocAsyncCtx + 148 | 0; //@line 22373
  HEAP32[$200 >> 2] = $72; //@line 22374
  $201 = $ReallocAsyncCtx + 152 | 0; //@line 22375
  HEAP32[$201 >> 2] = $74; //@line 22376
  $202 = $ReallocAsyncCtx + 156 | 0; //@line 22377
  HEAP32[$202 >> 2] = $76; //@line 22378
  $203 = $ReallocAsyncCtx + 160 | 0; //@line 22379
  HEAP32[$203 >> 2] = $78; //@line 22380
  $204 = $ReallocAsyncCtx + 164 | 0; //@line 22381
  HEAP32[$204 >> 2] = $80; //@line 22382
  $205 = $ReallocAsyncCtx + 168 | 0; //@line 22383
  HEAP32[$205 >> 2] = $84; //@line 22384
  $206 = $ReallocAsyncCtx + 172 | 0; //@line 22385
  HEAP32[$206 >> 2] = $86; //@line 22386
  $207 = $ReallocAsyncCtx + 176 | 0; //@line 22387
  HEAP32[$207 >> 2] = $88; //@line 22388
  $208 = $ReallocAsyncCtx + 180 | 0; //@line 22389
  HEAP32[$208 >> 2] = $90; //@line 22390
  $209 = $ReallocAsyncCtx + 184 | 0; //@line 22391
  HEAP32[$209 >> 2] = $92; //@line 22392
  $210 = $ReallocAsyncCtx + 188 | 0; //@line 22393
  HEAP32[$210 >> 2] = $94; //@line 22394
  $211 = $ReallocAsyncCtx + 192 | 0; //@line 22395
  HEAP32[$211 >> 2] = $96; //@line 22396
  $212 = $ReallocAsyncCtx + 196 | 0; //@line 22397
  HEAP32[$212 >> 2] = $98; //@line 22398
  $213 = $ReallocAsyncCtx + 200 | 0; //@line 22399
  HEAP32[$213 >> 2] = $100; //@line 22400
  $214 = $ReallocAsyncCtx + 204 | 0; //@line 22401
  HEAP32[$214 >> 2] = $102; //@line 22402
  $215 = $ReallocAsyncCtx + 208 | 0; //@line 22403
  HEAP32[$215 >> 2] = $104; //@line 22404
  $216 = $ReallocAsyncCtx + 212 | 0; //@line 22405
  HEAP32[$216 >> 2] = $106; //@line 22406
  $217 = $ReallocAsyncCtx + 216 | 0; //@line 22407
  HEAP32[$217 >> 2] = $108; //@line 22408
  $218 = $ReallocAsyncCtx + 220 | 0; //@line 22409
  HEAP32[$218 >> 2] = $110; //@line 22410
  $219 = $ReallocAsyncCtx + 224 | 0; //@line 22411
  HEAP32[$219 >> 2] = $112; //@line 22412
  $220 = $ReallocAsyncCtx + 228 | 0; //@line 22413
  HEAP32[$220 >> 2] = $114; //@line 22414
  $221 = $ReallocAsyncCtx + 232 | 0; //@line 22415
  HEAP32[$221 >> 2] = $116; //@line 22416
  $222 = $ReallocAsyncCtx + 236 | 0; //@line 22417
  HEAP32[$222 >> 2] = $118; //@line 22418
  $223 = $ReallocAsyncCtx + 240 | 0; //@line 22419
  HEAP32[$223 >> 2] = $120; //@line 22420
  $224 = $ReallocAsyncCtx + 244 | 0; //@line 22421
  HEAP32[$224 >> 2] = $122; //@line 22422
  $225 = $ReallocAsyncCtx + 248 | 0; //@line 22423
  HEAP8[$225 >> 0] = $124; //@line 22424
  $226 = $ReallocAsyncCtx + 249 | 0; //@line 22425
  HEAP8[$226 >> 0] = $126; //@line 22426
  $227 = $ReallocAsyncCtx + 252 | 0; //@line 22427
  HEAP32[$227 >> 2] = $128; //@line 22428
  $228 = $ReallocAsyncCtx + 256 | 0; //@line 22429
  HEAP8[$228 >> 0] = $130; //@line 22430
  $229 = $ReallocAsyncCtx + 260 | 0; //@line 22431
  HEAP32[$229 >> 2] = $132; //@line 22432
  $230 = $ReallocAsyncCtx + 264 | 0; //@line 22433
  HEAP32[$230 >> 2] = $$096$be; //@line 22434
  $231 = $ReallocAsyncCtx + 268 | 0; //@line 22435
  HEAP32[$231 >> 2] = $136; //@line 22436
  sp = STACKTOP; //@line 22437
  return;
 } else if ((label | 0) == 9) {
  $249 = HEAP8[$120 + ($139 & 255) >> 0] | 0; //@line 22443
  HEAP8[$28 >> 0] = ($249 & 255) >>> 4 & 7; //@line 22448
  HEAP8[$18 >> 0] = $249 & 15; //@line 22450
  $268 = $$0$be + 5 << 24 >> 24; //@line 22464
  HEAP32[$30 >> 2] = (HEAPU8[$120 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$120 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$120 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 22472
  $278 = HEAP32[(HEAP32[$48 >> 2] | 0) + 40 >> 2] | 0; //@line 22475
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(268) | 0; //@line 22476
  $279 = FUNCTION_TABLE_iii[$278 & 31]($136, $40) | 0; //@line 22477
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 488; //@line 22480
   $280 = $ReallocAsyncCtx2 + 4 | 0; //@line 22481
   HEAP32[$280 >> 2] = $2; //@line 22482
   $281 = $ReallocAsyncCtx2 + 8 | 0; //@line 22483
   HEAP32[$281 >> 2] = $4; //@line 22484
   $282 = $ReallocAsyncCtx2 + 12 | 0; //@line 22485
   HEAP32[$282 >> 2] = $6; //@line 22486
   $283 = $ReallocAsyncCtx2 + 16 | 0; //@line 22487
   HEAP32[$283 >> 2] = $8; //@line 22488
   $284 = $ReallocAsyncCtx2 + 20 | 0; //@line 22489
   HEAP32[$284 >> 2] = $10; //@line 22490
   $285 = $ReallocAsyncCtx2 + 24 | 0; //@line 22491
   HEAP32[$285 >> 2] = $12; //@line 22492
   $286 = $ReallocAsyncCtx2 + 28 | 0; //@line 22493
   HEAP32[$286 >> 2] = $14; //@line 22494
   $287 = $ReallocAsyncCtx2 + 32 | 0; //@line 22495
   HEAP32[$287 >> 2] = $16; //@line 22496
   $288 = $ReallocAsyncCtx2 + 36 | 0; //@line 22497
   HEAP32[$288 >> 2] = $18; //@line 22498
   $289 = $ReallocAsyncCtx2 + 40 | 0; //@line 22499
   HEAP32[$289 >> 2] = $20; //@line 22500
   $290 = $ReallocAsyncCtx2 + 44 | 0; //@line 22501
   HEAP32[$290 >> 2] = $22; //@line 22502
   $291 = $ReallocAsyncCtx2 + 48 | 0; //@line 22503
   HEAP32[$291 >> 2] = $24; //@line 22504
   $292 = $ReallocAsyncCtx2 + 52 | 0; //@line 22505
   HEAP32[$292 >> 2] = $26; //@line 22506
   $293 = $ReallocAsyncCtx2 + 56 | 0; //@line 22507
   HEAP32[$293 >> 2] = $28; //@line 22508
   $294 = $ReallocAsyncCtx2 + 60 | 0; //@line 22509
   HEAP32[$294 >> 2] = $30; //@line 22510
   $295 = $ReallocAsyncCtx2 + 64 | 0; //@line 22511
   HEAP32[$295 >> 2] = $32; //@line 22512
   $296 = $ReallocAsyncCtx2 + 68 | 0; //@line 22513
   HEAP32[$296 >> 2] = $34; //@line 22514
   $297 = $ReallocAsyncCtx2 + 72 | 0; //@line 22515
   HEAP32[$297 >> 2] = $36; //@line 22516
   $298 = $ReallocAsyncCtx2 + 76 | 0; //@line 22517
   HEAP32[$298 >> 2] = $38; //@line 22518
   $299 = $ReallocAsyncCtx2 + 80 | 0; //@line 22519
   HEAP32[$299 >> 2] = $40; //@line 22520
   $300 = $ReallocAsyncCtx2 + 84 | 0; //@line 22521
   HEAP32[$300 >> 2] = $42; //@line 22522
   $301 = $ReallocAsyncCtx2 + 88 | 0; //@line 22523
   HEAP32[$301 >> 2] = $44; //@line 22524
   $302 = $ReallocAsyncCtx2 + 92 | 0; //@line 22525
   HEAP32[$302 >> 2] = $46; //@line 22526
   $303 = $ReallocAsyncCtx2 + 96 | 0; //@line 22527
   HEAP8[$303 >> 0] = $268; //@line 22528
   $304 = $ReallocAsyncCtx2 + 100 | 0; //@line 22529
   HEAP32[$304 >> 2] = $50; //@line 22530
   $305 = $ReallocAsyncCtx2 + 104 | 0; //@line 22531
   HEAP32[$305 >> 2] = $52; //@line 22532
   $306 = $ReallocAsyncCtx2 + 108 | 0; //@line 22533
   HEAP32[$306 >> 2] = $54; //@line 22534
   $307 = $ReallocAsyncCtx2 + 112 | 0; //@line 22535
   HEAP32[$307 >> 2] = $56; //@line 22536
   $308 = $ReallocAsyncCtx2 + 116 | 0; //@line 22537
   HEAP32[$308 >> 2] = $48; //@line 22538
   $309 = $ReallocAsyncCtx2 + 120 | 0; //@line 22539
   HEAP32[$309 >> 2] = $58; //@line 22540
   $310 = $ReallocAsyncCtx2 + 124 | 0; //@line 22541
   HEAP32[$310 >> 2] = $60; //@line 22542
   $311 = $ReallocAsyncCtx2 + 128 | 0; //@line 22543
   HEAP32[$311 >> 2] = $62; //@line 22544
   $312 = $ReallocAsyncCtx2 + 132 | 0; //@line 22545
   HEAP32[$312 >> 2] = $64; //@line 22546
   $313 = $ReallocAsyncCtx2 + 136 | 0; //@line 22547
   HEAP32[$313 >> 2] = $66; //@line 22548
   $314 = $ReallocAsyncCtx2 + 140 | 0; //@line 22549
   HEAP32[$314 >> 2] = $68; //@line 22550
   $315 = $ReallocAsyncCtx2 + 144 | 0; //@line 22551
   HEAP32[$315 >> 2] = $70; //@line 22552
   $316 = $ReallocAsyncCtx2 + 148 | 0; //@line 22553
   HEAP32[$316 >> 2] = $72; //@line 22554
   $317 = $ReallocAsyncCtx2 + 152 | 0; //@line 22555
   HEAP32[$317 >> 2] = $74; //@line 22556
   $318 = $ReallocAsyncCtx2 + 156 | 0; //@line 22557
   HEAP32[$318 >> 2] = $76; //@line 22558
   $319 = $ReallocAsyncCtx2 + 160 | 0; //@line 22559
   HEAP32[$319 >> 2] = $78; //@line 22560
   $320 = $ReallocAsyncCtx2 + 164 | 0; //@line 22561
   HEAP32[$320 >> 2] = $80; //@line 22562
   $321 = $ReallocAsyncCtx2 + 168 | 0; //@line 22563
   HEAP32[$321 >> 2] = $84; //@line 22564
   $322 = $ReallocAsyncCtx2 + 172 | 0; //@line 22565
   HEAP32[$322 >> 2] = $86; //@line 22566
   $323 = $ReallocAsyncCtx2 + 176 | 0; //@line 22567
   HEAP32[$323 >> 2] = $88; //@line 22568
   $324 = $ReallocAsyncCtx2 + 180 | 0; //@line 22569
   HEAP32[$324 >> 2] = $90; //@line 22570
   $325 = $ReallocAsyncCtx2 + 184 | 0; //@line 22571
   HEAP32[$325 >> 2] = $92; //@line 22572
   $326 = $ReallocAsyncCtx2 + 188 | 0; //@line 22573
   HEAP32[$326 >> 2] = $94; //@line 22574
   $327 = $ReallocAsyncCtx2 + 192 | 0; //@line 22575
   HEAP32[$327 >> 2] = $96; //@line 22576
   $328 = $ReallocAsyncCtx2 + 196 | 0; //@line 22577
   HEAP32[$328 >> 2] = $98; //@line 22578
   $329 = $ReallocAsyncCtx2 + 200 | 0; //@line 22579
   HEAP32[$329 >> 2] = $100; //@line 22580
   $330 = $ReallocAsyncCtx2 + 204 | 0; //@line 22581
   HEAP32[$330 >> 2] = $102; //@line 22582
   $331 = $ReallocAsyncCtx2 + 208 | 0; //@line 22583
   HEAP32[$331 >> 2] = $104; //@line 22584
   $332 = $ReallocAsyncCtx2 + 212 | 0; //@line 22585
   HEAP32[$332 >> 2] = $106; //@line 22586
   $333 = $ReallocAsyncCtx2 + 216 | 0; //@line 22587
   HEAP32[$333 >> 2] = $108; //@line 22588
   $334 = $ReallocAsyncCtx2 + 220 | 0; //@line 22589
   HEAP32[$334 >> 2] = $110; //@line 22590
   $335 = $ReallocAsyncCtx2 + 224 | 0; //@line 22591
   HEAP32[$335 >> 2] = $112; //@line 22592
   $336 = $ReallocAsyncCtx2 + 228 | 0; //@line 22593
   HEAP32[$336 >> 2] = $114; //@line 22594
   $337 = $ReallocAsyncCtx2 + 232 | 0; //@line 22595
   HEAP32[$337 >> 2] = $116; //@line 22596
   $338 = $ReallocAsyncCtx2 + 236 | 0; //@line 22597
   HEAP32[$338 >> 2] = $118; //@line 22598
   $339 = $ReallocAsyncCtx2 + 240 | 0; //@line 22599
   HEAP32[$339 >> 2] = $120; //@line 22600
   $340 = $ReallocAsyncCtx2 + 244 | 0; //@line 22601
   HEAP32[$340 >> 2] = $122; //@line 22602
   $341 = $ReallocAsyncCtx2 + 248 | 0; //@line 22603
   HEAP8[$341 >> 0] = $124; //@line 22604
   $342 = $ReallocAsyncCtx2 + 249 | 0; //@line 22605
   HEAP8[$342 >> 0] = $126; //@line 22606
   $343 = $ReallocAsyncCtx2 + 252 | 0; //@line 22607
   HEAP32[$343 >> 2] = $128; //@line 22608
   $344 = $ReallocAsyncCtx2 + 256 | 0; //@line 22609
   HEAP8[$344 >> 0] = $130; //@line 22610
   $345 = $ReallocAsyncCtx2 + 260 | 0; //@line 22611
   HEAP32[$345 >> 2] = $132; //@line 22612
   $346 = $ReallocAsyncCtx2 + 264 | 0; //@line 22613
   HEAP32[$346 >> 2] = $136; //@line 22614
   sp = STACKTOP; //@line 22615
   return;
  }
  HEAP8[___async_retval >> 0] = $279; //@line 22619
  ___async_unwind = 0; //@line 22620
  HEAP32[$ReallocAsyncCtx2 >> 2] = 488; //@line 22621
  $280 = $ReallocAsyncCtx2 + 4 | 0; //@line 22622
  HEAP32[$280 >> 2] = $2; //@line 22623
  $281 = $ReallocAsyncCtx2 + 8 | 0; //@line 22624
  HEAP32[$281 >> 2] = $4; //@line 22625
  $282 = $ReallocAsyncCtx2 + 12 | 0; //@line 22626
  HEAP32[$282 >> 2] = $6; //@line 22627
  $283 = $ReallocAsyncCtx2 + 16 | 0; //@line 22628
  HEAP32[$283 >> 2] = $8; //@line 22629
  $284 = $ReallocAsyncCtx2 + 20 | 0; //@line 22630
  HEAP32[$284 >> 2] = $10; //@line 22631
  $285 = $ReallocAsyncCtx2 + 24 | 0; //@line 22632
  HEAP32[$285 >> 2] = $12; //@line 22633
  $286 = $ReallocAsyncCtx2 + 28 | 0; //@line 22634
  HEAP32[$286 >> 2] = $14; //@line 22635
  $287 = $ReallocAsyncCtx2 + 32 | 0; //@line 22636
  HEAP32[$287 >> 2] = $16; //@line 22637
  $288 = $ReallocAsyncCtx2 + 36 | 0; //@line 22638
  HEAP32[$288 >> 2] = $18; //@line 22639
  $289 = $ReallocAsyncCtx2 + 40 | 0; //@line 22640
  HEAP32[$289 >> 2] = $20; //@line 22641
  $290 = $ReallocAsyncCtx2 + 44 | 0; //@line 22642
  HEAP32[$290 >> 2] = $22; //@line 22643
  $291 = $ReallocAsyncCtx2 + 48 | 0; //@line 22644
  HEAP32[$291 >> 2] = $24; //@line 22645
  $292 = $ReallocAsyncCtx2 + 52 | 0; //@line 22646
  HEAP32[$292 >> 2] = $26; //@line 22647
  $293 = $ReallocAsyncCtx2 + 56 | 0; //@line 22648
  HEAP32[$293 >> 2] = $28; //@line 22649
  $294 = $ReallocAsyncCtx2 + 60 | 0; //@line 22650
  HEAP32[$294 >> 2] = $30; //@line 22651
  $295 = $ReallocAsyncCtx2 + 64 | 0; //@line 22652
  HEAP32[$295 >> 2] = $32; //@line 22653
  $296 = $ReallocAsyncCtx2 + 68 | 0; //@line 22654
  HEAP32[$296 >> 2] = $34; //@line 22655
  $297 = $ReallocAsyncCtx2 + 72 | 0; //@line 22656
  HEAP32[$297 >> 2] = $36; //@line 22657
  $298 = $ReallocAsyncCtx2 + 76 | 0; //@line 22658
  HEAP32[$298 >> 2] = $38; //@line 22659
  $299 = $ReallocAsyncCtx2 + 80 | 0; //@line 22660
  HEAP32[$299 >> 2] = $40; //@line 22661
  $300 = $ReallocAsyncCtx2 + 84 | 0; //@line 22662
  HEAP32[$300 >> 2] = $42; //@line 22663
  $301 = $ReallocAsyncCtx2 + 88 | 0; //@line 22664
  HEAP32[$301 >> 2] = $44; //@line 22665
  $302 = $ReallocAsyncCtx2 + 92 | 0; //@line 22666
  HEAP32[$302 >> 2] = $46; //@line 22667
  $303 = $ReallocAsyncCtx2 + 96 | 0; //@line 22668
  HEAP8[$303 >> 0] = $268; //@line 22669
  $304 = $ReallocAsyncCtx2 + 100 | 0; //@line 22670
  HEAP32[$304 >> 2] = $50; //@line 22671
  $305 = $ReallocAsyncCtx2 + 104 | 0; //@line 22672
  HEAP32[$305 >> 2] = $52; //@line 22673
  $306 = $ReallocAsyncCtx2 + 108 | 0; //@line 22674
  HEAP32[$306 >> 2] = $54; //@line 22675
  $307 = $ReallocAsyncCtx2 + 112 | 0; //@line 22676
  HEAP32[$307 >> 2] = $56; //@line 22677
  $308 = $ReallocAsyncCtx2 + 116 | 0; //@line 22678
  HEAP32[$308 >> 2] = $48; //@line 22679
  $309 = $ReallocAsyncCtx2 + 120 | 0; //@line 22680
  HEAP32[$309 >> 2] = $58; //@line 22681
  $310 = $ReallocAsyncCtx2 + 124 | 0; //@line 22682
  HEAP32[$310 >> 2] = $60; //@line 22683
  $311 = $ReallocAsyncCtx2 + 128 | 0; //@line 22684
  HEAP32[$311 >> 2] = $62; //@line 22685
  $312 = $ReallocAsyncCtx2 + 132 | 0; //@line 22686
  HEAP32[$312 >> 2] = $64; //@line 22687
  $313 = $ReallocAsyncCtx2 + 136 | 0; //@line 22688
  HEAP32[$313 >> 2] = $66; //@line 22689
  $314 = $ReallocAsyncCtx2 + 140 | 0; //@line 22690
  HEAP32[$314 >> 2] = $68; //@line 22691
  $315 = $ReallocAsyncCtx2 + 144 | 0; //@line 22692
  HEAP32[$315 >> 2] = $70; //@line 22693
  $316 = $ReallocAsyncCtx2 + 148 | 0; //@line 22694
  HEAP32[$316 >> 2] = $72; //@line 22695
  $317 = $ReallocAsyncCtx2 + 152 | 0; //@line 22696
  HEAP32[$317 >> 2] = $74; //@line 22697
  $318 = $ReallocAsyncCtx2 + 156 | 0; //@line 22698
  HEAP32[$318 >> 2] = $76; //@line 22699
  $319 = $ReallocAsyncCtx2 + 160 | 0; //@line 22700
  HEAP32[$319 >> 2] = $78; //@line 22701
  $320 = $ReallocAsyncCtx2 + 164 | 0; //@line 22702
  HEAP32[$320 >> 2] = $80; //@line 22703
  $321 = $ReallocAsyncCtx2 + 168 | 0; //@line 22704
  HEAP32[$321 >> 2] = $84; //@line 22705
  $322 = $ReallocAsyncCtx2 + 172 | 0; //@line 22706
  HEAP32[$322 >> 2] = $86; //@line 22707
  $323 = $ReallocAsyncCtx2 + 176 | 0; //@line 22708
  HEAP32[$323 >> 2] = $88; //@line 22709
  $324 = $ReallocAsyncCtx2 + 180 | 0; //@line 22710
  HEAP32[$324 >> 2] = $90; //@line 22711
  $325 = $ReallocAsyncCtx2 + 184 | 0; //@line 22712
  HEAP32[$325 >> 2] = $92; //@line 22713
  $326 = $ReallocAsyncCtx2 + 188 | 0; //@line 22714
  HEAP32[$326 >> 2] = $94; //@line 22715
  $327 = $ReallocAsyncCtx2 + 192 | 0; //@line 22716
  HEAP32[$327 >> 2] = $96; //@line 22717
  $328 = $ReallocAsyncCtx2 + 196 | 0; //@line 22718
  HEAP32[$328 >> 2] = $98; //@line 22719
  $329 = $ReallocAsyncCtx2 + 200 | 0; //@line 22720
  HEAP32[$329 >> 2] = $100; //@line 22721
  $330 = $ReallocAsyncCtx2 + 204 | 0; //@line 22722
  HEAP32[$330 >> 2] = $102; //@line 22723
  $331 = $ReallocAsyncCtx2 + 208 | 0; //@line 22724
  HEAP32[$331 >> 2] = $104; //@line 22725
  $332 = $ReallocAsyncCtx2 + 212 | 0; //@line 22726
  HEAP32[$332 >> 2] = $106; //@line 22727
  $333 = $ReallocAsyncCtx2 + 216 | 0; //@line 22728
  HEAP32[$333 >> 2] = $108; //@line 22729
  $334 = $ReallocAsyncCtx2 + 220 | 0; //@line 22730
  HEAP32[$334 >> 2] = $110; //@line 22731
  $335 = $ReallocAsyncCtx2 + 224 | 0; //@line 22732
  HEAP32[$335 >> 2] = $112; //@line 22733
  $336 = $ReallocAsyncCtx2 + 228 | 0; //@line 22734
  HEAP32[$336 >> 2] = $114; //@line 22735
  $337 = $ReallocAsyncCtx2 + 232 | 0; //@line 22736
  HEAP32[$337 >> 2] = $116; //@line 22737
  $338 = $ReallocAsyncCtx2 + 236 | 0; //@line 22738
  HEAP32[$338 >> 2] = $118; //@line 22739
  $339 = $ReallocAsyncCtx2 + 240 | 0; //@line 22740
  HEAP32[$339 >> 2] = $120; //@line 22741
  $340 = $ReallocAsyncCtx2 + 244 | 0; //@line 22742
  HEAP32[$340 >> 2] = $122; //@line 22743
  $341 = $ReallocAsyncCtx2 + 248 | 0; //@line 22744
  HEAP8[$341 >> 0] = $124; //@line 22745
  $342 = $ReallocAsyncCtx2 + 249 | 0; //@line 22746
  HEAP8[$342 >> 0] = $126; //@line 22747
  $343 = $ReallocAsyncCtx2 + 252 | 0; //@line 22748
  HEAP32[$343 >> 2] = $128; //@line 22749
  $344 = $ReallocAsyncCtx2 + 256 | 0; //@line 22750
  HEAP8[$344 >> 0] = $130; //@line 22751
  $345 = $ReallocAsyncCtx2 + 260 | 0; //@line 22752
  HEAP32[$345 >> 2] = $132; //@line 22753
  $346 = $ReallocAsyncCtx2 + 264 | 0; //@line 22754
  HEAP32[$346 >> 2] = $136; //@line 22755
  sp = STACKTOP; //@line 22756
  return;
 } else if ((label | 0) == 14) {
  HEAP8[$102 >> 0] = HEAP8[$120 + ($139 & 255) >> 0] | 0; //@line 22764
  HEAP32[$108 >> 2] = $22; //@line 22765
  HEAP32[$114 >> 2] = (HEAPU8[$120 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$120 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$120 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 22786
  HEAP32[$118 >> 2] = 0; //@line 22787
  $387 = $$0$be + 6 << 24 >> 24; //@line 22788
  HEAP8[$12 >> 0] = HEAP8[$120 + ($$0$be + 5 & 255) >> 0] | 0; //@line 22792
  $393 = HEAP32[(HEAP32[$2 >> 2] | 0) + 8 >> 2] | 0; //@line 22795
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(268) | 0; //@line 22796
  $394 = FUNCTION_TABLE_iii[$393 & 31]($136, $58) | 0; //@line 22797
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 489; //@line 22800
   $395 = $ReallocAsyncCtx3 + 4 | 0; //@line 22801
   HEAP32[$395 >> 2] = $2; //@line 22802
   $396 = $ReallocAsyncCtx3 + 8 | 0; //@line 22803
   HEAP32[$396 >> 2] = $4; //@line 22804
   $397 = $ReallocAsyncCtx3 + 12 | 0; //@line 22805
   HEAP32[$397 >> 2] = $6; //@line 22806
   $398 = $ReallocAsyncCtx3 + 16 | 0; //@line 22807
   HEAP32[$398 >> 2] = $8; //@line 22808
   $399 = $ReallocAsyncCtx3 + 20 | 0; //@line 22809
   HEAP32[$399 >> 2] = $10; //@line 22810
   $400 = $ReallocAsyncCtx3 + 24 | 0; //@line 22811
   HEAP32[$400 >> 2] = $12; //@line 22812
   $401 = $ReallocAsyncCtx3 + 28 | 0; //@line 22813
   HEAP32[$401 >> 2] = $14; //@line 22814
   $402 = $ReallocAsyncCtx3 + 32 | 0; //@line 22815
   HEAP32[$402 >> 2] = $16; //@line 22816
   $403 = $ReallocAsyncCtx3 + 36 | 0; //@line 22817
   HEAP32[$403 >> 2] = $18; //@line 22818
   $404 = $ReallocAsyncCtx3 + 40 | 0; //@line 22819
   HEAP32[$404 >> 2] = $20; //@line 22820
   $405 = $ReallocAsyncCtx3 + 44 | 0; //@line 22821
   HEAP32[$405 >> 2] = $22; //@line 22822
   $406 = $ReallocAsyncCtx3 + 48 | 0; //@line 22823
   HEAP32[$406 >> 2] = $24; //@line 22824
   $407 = $ReallocAsyncCtx3 + 52 | 0; //@line 22825
   HEAP32[$407 >> 2] = $26; //@line 22826
   $408 = $ReallocAsyncCtx3 + 56 | 0; //@line 22827
   HEAP32[$408 >> 2] = $28; //@line 22828
   $409 = $ReallocAsyncCtx3 + 60 | 0; //@line 22829
   HEAP32[$409 >> 2] = $30; //@line 22830
   $410 = $ReallocAsyncCtx3 + 64 | 0; //@line 22831
   HEAP32[$410 >> 2] = $32; //@line 22832
   $411 = $ReallocAsyncCtx3 + 68 | 0; //@line 22833
   HEAP32[$411 >> 2] = $34; //@line 22834
   $412 = $ReallocAsyncCtx3 + 72 | 0; //@line 22835
   HEAP32[$412 >> 2] = $36; //@line 22836
   $413 = $ReallocAsyncCtx3 + 76 | 0; //@line 22837
   HEAP32[$413 >> 2] = $38; //@line 22838
   $414 = $ReallocAsyncCtx3 + 80 | 0; //@line 22839
   HEAP32[$414 >> 2] = $40; //@line 22840
   $415 = $ReallocAsyncCtx3 + 84 | 0; //@line 22841
   HEAP32[$415 >> 2] = $42; //@line 22842
   $416 = $ReallocAsyncCtx3 + 88 | 0; //@line 22843
   HEAP32[$416 >> 2] = $44; //@line 22844
   $417 = $ReallocAsyncCtx3 + 92 | 0; //@line 22845
   HEAP32[$417 >> 2] = $46; //@line 22846
   $418 = $ReallocAsyncCtx3 + 96 | 0; //@line 22847
   HEAP32[$418 >> 2] = $48; //@line 22848
   $419 = $ReallocAsyncCtx3 + 100 | 0; //@line 22849
   HEAP32[$419 >> 2] = $50; //@line 22850
   $420 = $ReallocAsyncCtx3 + 104 | 0; //@line 22851
   HEAP32[$420 >> 2] = $52; //@line 22852
   $421 = $ReallocAsyncCtx3 + 108 | 0; //@line 22853
   HEAP32[$421 >> 2] = $54; //@line 22854
   $422 = $ReallocAsyncCtx3 + 112 | 0; //@line 22855
   HEAP32[$422 >> 2] = $56; //@line 22856
   $423 = $ReallocAsyncCtx3 + 116 | 0; //@line 22857
   HEAP8[$423 >> 0] = $387; //@line 22858
   $424 = $ReallocAsyncCtx3 + 120 | 0; //@line 22859
   HEAP32[$424 >> 2] = $58; //@line 22860
   $425 = $ReallocAsyncCtx3 + 124 | 0; //@line 22861
   HEAP32[$425 >> 2] = $60; //@line 22862
   $426 = $ReallocAsyncCtx3 + 128 | 0; //@line 22863
   HEAP32[$426 >> 2] = $62; //@line 22864
   $427 = $ReallocAsyncCtx3 + 132 | 0; //@line 22865
   HEAP32[$427 >> 2] = $64; //@line 22866
   $428 = $ReallocAsyncCtx3 + 136 | 0; //@line 22867
   HEAP32[$428 >> 2] = $66; //@line 22868
   $429 = $ReallocAsyncCtx3 + 140 | 0; //@line 22869
   HEAP32[$429 >> 2] = $68; //@line 22870
   $430 = $ReallocAsyncCtx3 + 144 | 0; //@line 22871
   HEAP32[$430 >> 2] = $70; //@line 22872
   $431 = $ReallocAsyncCtx3 + 148 | 0; //@line 22873
   HEAP32[$431 >> 2] = $72; //@line 22874
   $432 = $ReallocAsyncCtx3 + 152 | 0; //@line 22875
   HEAP32[$432 >> 2] = $74; //@line 22876
   $433 = $ReallocAsyncCtx3 + 156 | 0; //@line 22877
   HEAP32[$433 >> 2] = $76; //@line 22878
   $434 = $ReallocAsyncCtx3 + 160 | 0; //@line 22879
   HEAP32[$434 >> 2] = $78; //@line 22880
   $435 = $ReallocAsyncCtx3 + 164 | 0; //@line 22881
   HEAP32[$435 >> 2] = $80; //@line 22882
   $436 = $ReallocAsyncCtx3 + 168 | 0; //@line 22883
   HEAP32[$436 >> 2] = $84; //@line 22884
   $437 = $ReallocAsyncCtx3 + 172 | 0; //@line 22885
   HEAP32[$437 >> 2] = $86; //@line 22886
   $438 = $ReallocAsyncCtx3 + 176 | 0; //@line 22887
   HEAP32[$438 >> 2] = $88; //@line 22888
   $439 = $ReallocAsyncCtx3 + 180 | 0; //@line 22889
   HEAP32[$439 >> 2] = $90; //@line 22890
   $440 = $ReallocAsyncCtx3 + 184 | 0; //@line 22891
   HEAP32[$440 >> 2] = $92; //@line 22892
   $441 = $ReallocAsyncCtx3 + 188 | 0; //@line 22893
   HEAP32[$441 >> 2] = $94; //@line 22894
   $442 = $ReallocAsyncCtx3 + 192 | 0; //@line 22895
   HEAP32[$442 >> 2] = $96; //@line 22896
   $443 = $ReallocAsyncCtx3 + 196 | 0; //@line 22897
   HEAP32[$443 >> 2] = $98; //@line 22898
   $444 = $ReallocAsyncCtx3 + 200 | 0; //@line 22899
   HEAP32[$444 >> 2] = $100; //@line 22900
   $445 = $ReallocAsyncCtx3 + 204 | 0; //@line 22901
   HEAP32[$445 >> 2] = $102; //@line 22902
   $446 = $ReallocAsyncCtx3 + 208 | 0; //@line 22903
   HEAP32[$446 >> 2] = $104; //@line 22904
   $447 = $ReallocAsyncCtx3 + 212 | 0; //@line 22905
   HEAP32[$447 >> 2] = $106; //@line 22906
   $448 = $ReallocAsyncCtx3 + 216 | 0; //@line 22907
   HEAP32[$448 >> 2] = $108; //@line 22908
   $449 = $ReallocAsyncCtx3 + 220 | 0; //@line 22909
   HEAP32[$449 >> 2] = $110; //@line 22910
   $450 = $ReallocAsyncCtx3 + 224 | 0; //@line 22911
   HEAP32[$450 >> 2] = $112; //@line 22912
   $451 = $ReallocAsyncCtx3 + 228 | 0; //@line 22913
   HEAP32[$451 >> 2] = $114; //@line 22914
   $452 = $ReallocAsyncCtx3 + 232 | 0; //@line 22915
   HEAP32[$452 >> 2] = $116; //@line 22916
   $453 = $ReallocAsyncCtx3 + 236 | 0; //@line 22917
   HEAP32[$453 >> 2] = $118; //@line 22918
   $454 = $ReallocAsyncCtx3 + 240 | 0; //@line 22919
   HEAP32[$454 >> 2] = $120; //@line 22920
   $455 = $ReallocAsyncCtx3 + 244 | 0; //@line 22921
   HEAP32[$455 >> 2] = $122; //@line 22922
   $456 = $ReallocAsyncCtx3 + 248 | 0; //@line 22923
   HEAP8[$456 >> 0] = $124; //@line 22924
   $457 = $ReallocAsyncCtx3 + 249 | 0; //@line 22925
   HEAP8[$457 >> 0] = $126; //@line 22926
   $458 = $ReallocAsyncCtx3 + 252 | 0; //@line 22927
   HEAP32[$458 >> 2] = $128; //@line 22928
   $459 = $ReallocAsyncCtx3 + 256 | 0; //@line 22929
   HEAP8[$459 >> 0] = $130; //@line 22930
   $460 = $ReallocAsyncCtx3 + 260 | 0; //@line 22931
   HEAP32[$460 >> 2] = $132; //@line 22932
   $461 = $ReallocAsyncCtx3 + 264 | 0; //@line 22933
   HEAP32[$461 >> 2] = $136; //@line 22934
   sp = STACKTOP; //@line 22935
   return;
  }
  HEAP8[___async_retval >> 0] = $394; //@line 22939
  ___async_unwind = 0; //@line 22940
  HEAP32[$ReallocAsyncCtx3 >> 2] = 489; //@line 22941
  $395 = $ReallocAsyncCtx3 + 4 | 0; //@line 22942
  HEAP32[$395 >> 2] = $2; //@line 22943
  $396 = $ReallocAsyncCtx3 + 8 | 0; //@line 22944
  HEAP32[$396 >> 2] = $4; //@line 22945
  $397 = $ReallocAsyncCtx3 + 12 | 0; //@line 22946
  HEAP32[$397 >> 2] = $6; //@line 22947
  $398 = $ReallocAsyncCtx3 + 16 | 0; //@line 22948
  HEAP32[$398 >> 2] = $8; //@line 22949
  $399 = $ReallocAsyncCtx3 + 20 | 0; //@line 22950
  HEAP32[$399 >> 2] = $10; //@line 22951
  $400 = $ReallocAsyncCtx3 + 24 | 0; //@line 22952
  HEAP32[$400 >> 2] = $12; //@line 22953
  $401 = $ReallocAsyncCtx3 + 28 | 0; //@line 22954
  HEAP32[$401 >> 2] = $14; //@line 22955
  $402 = $ReallocAsyncCtx3 + 32 | 0; //@line 22956
  HEAP32[$402 >> 2] = $16; //@line 22957
  $403 = $ReallocAsyncCtx3 + 36 | 0; //@line 22958
  HEAP32[$403 >> 2] = $18; //@line 22959
  $404 = $ReallocAsyncCtx3 + 40 | 0; //@line 22960
  HEAP32[$404 >> 2] = $20; //@line 22961
  $405 = $ReallocAsyncCtx3 + 44 | 0; //@line 22962
  HEAP32[$405 >> 2] = $22; //@line 22963
  $406 = $ReallocAsyncCtx3 + 48 | 0; //@line 22964
  HEAP32[$406 >> 2] = $24; //@line 22965
  $407 = $ReallocAsyncCtx3 + 52 | 0; //@line 22966
  HEAP32[$407 >> 2] = $26; //@line 22967
  $408 = $ReallocAsyncCtx3 + 56 | 0; //@line 22968
  HEAP32[$408 >> 2] = $28; //@line 22969
  $409 = $ReallocAsyncCtx3 + 60 | 0; //@line 22970
  HEAP32[$409 >> 2] = $30; //@line 22971
  $410 = $ReallocAsyncCtx3 + 64 | 0; //@line 22972
  HEAP32[$410 >> 2] = $32; //@line 22973
  $411 = $ReallocAsyncCtx3 + 68 | 0; //@line 22974
  HEAP32[$411 >> 2] = $34; //@line 22975
  $412 = $ReallocAsyncCtx3 + 72 | 0; //@line 22976
  HEAP32[$412 >> 2] = $36; //@line 22977
  $413 = $ReallocAsyncCtx3 + 76 | 0; //@line 22978
  HEAP32[$413 >> 2] = $38; //@line 22979
  $414 = $ReallocAsyncCtx3 + 80 | 0; //@line 22980
  HEAP32[$414 >> 2] = $40; //@line 22981
  $415 = $ReallocAsyncCtx3 + 84 | 0; //@line 22982
  HEAP32[$415 >> 2] = $42; //@line 22983
  $416 = $ReallocAsyncCtx3 + 88 | 0; //@line 22984
  HEAP32[$416 >> 2] = $44; //@line 22985
  $417 = $ReallocAsyncCtx3 + 92 | 0; //@line 22986
  HEAP32[$417 >> 2] = $46; //@line 22987
  $418 = $ReallocAsyncCtx3 + 96 | 0; //@line 22988
  HEAP32[$418 >> 2] = $48; //@line 22989
  $419 = $ReallocAsyncCtx3 + 100 | 0; //@line 22990
  HEAP32[$419 >> 2] = $50; //@line 22991
  $420 = $ReallocAsyncCtx3 + 104 | 0; //@line 22992
  HEAP32[$420 >> 2] = $52; //@line 22993
  $421 = $ReallocAsyncCtx3 + 108 | 0; //@line 22994
  HEAP32[$421 >> 2] = $54; //@line 22995
  $422 = $ReallocAsyncCtx3 + 112 | 0; //@line 22996
  HEAP32[$422 >> 2] = $56; //@line 22997
  $423 = $ReallocAsyncCtx3 + 116 | 0; //@line 22998
  HEAP8[$423 >> 0] = $387; //@line 22999
  $424 = $ReallocAsyncCtx3 + 120 | 0; //@line 23000
  HEAP32[$424 >> 2] = $58; //@line 23001
  $425 = $ReallocAsyncCtx3 + 124 | 0; //@line 23002
  HEAP32[$425 >> 2] = $60; //@line 23003
  $426 = $ReallocAsyncCtx3 + 128 | 0; //@line 23004
  HEAP32[$426 >> 2] = $62; //@line 23005
  $427 = $ReallocAsyncCtx3 + 132 | 0; //@line 23006
  HEAP32[$427 >> 2] = $64; //@line 23007
  $428 = $ReallocAsyncCtx3 + 136 | 0; //@line 23008
  HEAP32[$428 >> 2] = $66; //@line 23009
  $429 = $ReallocAsyncCtx3 + 140 | 0; //@line 23010
  HEAP32[$429 >> 2] = $68; //@line 23011
  $430 = $ReallocAsyncCtx3 + 144 | 0; //@line 23012
  HEAP32[$430 >> 2] = $70; //@line 23013
  $431 = $ReallocAsyncCtx3 + 148 | 0; //@line 23014
  HEAP32[$431 >> 2] = $72; //@line 23015
  $432 = $ReallocAsyncCtx3 + 152 | 0; //@line 23016
  HEAP32[$432 >> 2] = $74; //@line 23017
  $433 = $ReallocAsyncCtx3 + 156 | 0; //@line 23018
  HEAP32[$433 >> 2] = $76; //@line 23019
  $434 = $ReallocAsyncCtx3 + 160 | 0; //@line 23020
  HEAP32[$434 >> 2] = $78; //@line 23021
  $435 = $ReallocAsyncCtx3 + 164 | 0; //@line 23022
  HEAP32[$435 >> 2] = $80; //@line 23023
  $436 = $ReallocAsyncCtx3 + 168 | 0; //@line 23024
  HEAP32[$436 >> 2] = $84; //@line 23025
  $437 = $ReallocAsyncCtx3 + 172 | 0; //@line 23026
  HEAP32[$437 >> 2] = $86; //@line 23027
  $438 = $ReallocAsyncCtx3 + 176 | 0; //@line 23028
  HEAP32[$438 >> 2] = $88; //@line 23029
  $439 = $ReallocAsyncCtx3 + 180 | 0; //@line 23030
  HEAP32[$439 >> 2] = $90; //@line 23031
  $440 = $ReallocAsyncCtx3 + 184 | 0; //@line 23032
  HEAP32[$440 >> 2] = $92; //@line 23033
  $441 = $ReallocAsyncCtx3 + 188 | 0; //@line 23034
  HEAP32[$441 >> 2] = $94; //@line 23035
  $442 = $ReallocAsyncCtx3 + 192 | 0; //@line 23036
  HEAP32[$442 >> 2] = $96; //@line 23037
  $443 = $ReallocAsyncCtx3 + 196 | 0; //@line 23038
  HEAP32[$443 >> 2] = $98; //@line 23039
  $444 = $ReallocAsyncCtx3 + 200 | 0; //@line 23040
  HEAP32[$444 >> 2] = $100; //@line 23041
  $445 = $ReallocAsyncCtx3 + 204 | 0; //@line 23042
  HEAP32[$445 >> 2] = $102; //@line 23043
  $446 = $ReallocAsyncCtx3 + 208 | 0; //@line 23044
  HEAP32[$446 >> 2] = $104; //@line 23045
  $447 = $ReallocAsyncCtx3 + 212 | 0; //@line 23046
  HEAP32[$447 >> 2] = $106; //@line 23047
  $448 = $ReallocAsyncCtx3 + 216 | 0; //@line 23048
  HEAP32[$448 >> 2] = $108; //@line 23049
  $449 = $ReallocAsyncCtx3 + 220 | 0; //@line 23050
  HEAP32[$449 >> 2] = $110; //@line 23051
  $450 = $ReallocAsyncCtx3 + 224 | 0; //@line 23052
  HEAP32[$450 >> 2] = $112; //@line 23053
  $451 = $ReallocAsyncCtx3 + 228 | 0; //@line 23054
  HEAP32[$451 >> 2] = $114; //@line 23055
  $452 = $ReallocAsyncCtx3 + 232 | 0; //@line 23056
  HEAP32[$452 >> 2] = $116; //@line 23057
  $453 = $ReallocAsyncCtx3 + 236 | 0; //@line 23058
  HEAP32[$453 >> 2] = $118; //@line 23059
  $454 = $ReallocAsyncCtx3 + 240 | 0; //@line 23060
  HEAP32[$454 >> 2] = $120; //@line 23061
  $455 = $ReallocAsyncCtx3 + 244 | 0; //@line 23062
  HEAP32[$455 >> 2] = $122; //@line 23063
  $456 = $ReallocAsyncCtx3 + 248 | 0; //@line 23064
  HEAP8[$456 >> 0] = $124; //@line 23065
  $457 = $ReallocAsyncCtx3 + 249 | 0; //@line 23066
  HEAP8[$457 >> 0] = $126; //@line 23067
  $458 = $ReallocAsyncCtx3 + 252 | 0; //@line 23068
  HEAP32[$458 >> 2] = $128; //@line 23069
  $459 = $ReallocAsyncCtx3 + 256 | 0; //@line 23070
  HEAP8[$459 >> 0] = $130; //@line 23071
  $460 = $ReallocAsyncCtx3 + 260 | 0; //@line 23072
  HEAP32[$460 >> 2] = $132; //@line 23073
  $461 = $ReallocAsyncCtx3 + 264 | 0; //@line 23074
  HEAP32[$461 >> 2] = $136; //@line 23075
  sp = STACKTOP; //@line 23076
  return;
 } else if ((label | 0) == 19) {
  $480 = $$0$be + 2 << 24 >> 24; //@line 23080
  $483 = HEAP8[$120 + ($139 & 255) >> 0] | 0; //@line 23083
  HEAP8[$56 >> 0] = 0; //@line 23084
  $484 = $483 & 255; //@line 23085
  HEAP8[$42 >> 0] = $484 >>> 5 & 1; //@line 23089
  if ($484 & 16 | 0) {
   HEAP8[$56 >> 0] = 1; //@line 23093
  }
  HEAP8[$74 >> 0] = $484 & 15; //@line 23097
  $493 = HEAP32[(HEAP32[$64 >> 2] | 0) + 44 >> 2] | 0; //@line 23100
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(272) | 0; //@line 23101
  $494 = FUNCTION_TABLE_iii[$493 & 31]($136, $16) | 0; //@line 23102
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 490; //@line 23105
   $495 = $ReallocAsyncCtx4 + 4 | 0; //@line 23106
   HEAP32[$495 >> 2] = $2; //@line 23107
   $496 = $ReallocAsyncCtx4 + 8 | 0; //@line 23108
   HEAP32[$496 >> 2] = $4; //@line 23109
   $497 = $ReallocAsyncCtx4 + 12 | 0; //@line 23110
   HEAP32[$497 >> 2] = $6; //@line 23111
   $498 = $ReallocAsyncCtx4 + 16 | 0; //@line 23112
   HEAP32[$498 >> 2] = $8; //@line 23113
   $499 = $ReallocAsyncCtx4 + 20 | 0; //@line 23114
   HEAP32[$499 >> 2] = $10; //@line 23115
   $500 = $ReallocAsyncCtx4 + 24 | 0; //@line 23116
   HEAP32[$500 >> 2] = $12; //@line 23117
   $501 = $ReallocAsyncCtx4 + 28 | 0; //@line 23118
   HEAP32[$501 >> 2] = $14; //@line 23119
   $502 = $ReallocAsyncCtx4 + 32 | 0; //@line 23120
   HEAP32[$502 >> 2] = $16; //@line 23121
   $503 = $ReallocAsyncCtx4 + 36 | 0; //@line 23122
   HEAP32[$503 >> 2] = $18; //@line 23123
   $504 = $ReallocAsyncCtx4 + 40 | 0; //@line 23124
   HEAP32[$504 >> 2] = $20; //@line 23125
   $505 = $ReallocAsyncCtx4 + 44 | 0; //@line 23126
   HEAP32[$505 >> 2] = $22; //@line 23127
   $506 = $ReallocAsyncCtx4 + 48 | 0; //@line 23128
   HEAP32[$506 >> 2] = $24; //@line 23129
   $507 = $ReallocAsyncCtx4 + 52 | 0; //@line 23130
   HEAP32[$507 >> 2] = $26; //@line 23131
   $508 = $ReallocAsyncCtx4 + 56 | 0; //@line 23132
   HEAP32[$508 >> 2] = $28; //@line 23133
   $509 = $ReallocAsyncCtx4 + 60 | 0; //@line 23134
   HEAP32[$509 >> 2] = $30; //@line 23135
   $510 = $ReallocAsyncCtx4 + 64 | 0; //@line 23136
   HEAP32[$510 >> 2] = $32; //@line 23137
   $511 = $ReallocAsyncCtx4 + 68 | 0; //@line 23138
   HEAP32[$511 >> 2] = $34; //@line 23139
   $512 = $ReallocAsyncCtx4 + 72 | 0; //@line 23140
   HEAP32[$512 >> 2] = $36; //@line 23141
   $513 = $ReallocAsyncCtx4 + 76 | 0; //@line 23142
   HEAP32[$513 >> 2] = $38; //@line 23143
   $514 = $ReallocAsyncCtx4 + 80 | 0; //@line 23144
   HEAP32[$514 >> 2] = $40; //@line 23145
   $515 = $ReallocAsyncCtx4 + 84 | 0; //@line 23146
   HEAP32[$515 >> 2] = $42; //@line 23147
   $516 = $ReallocAsyncCtx4 + 88 | 0; //@line 23148
   HEAP32[$516 >> 2] = $44; //@line 23149
   $517 = $ReallocAsyncCtx4 + 92 | 0; //@line 23150
   HEAP32[$517 >> 2] = $46; //@line 23151
   $518 = $ReallocAsyncCtx4 + 96 | 0; //@line 23152
   HEAP32[$518 >> 2] = $48; //@line 23153
   $519 = $ReallocAsyncCtx4 + 100 | 0; //@line 23154
   HEAP32[$519 >> 2] = $50; //@line 23155
   $520 = $ReallocAsyncCtx4 + 104 | 0; //@line 23156
   HEAP32[$520 >> 2] = $52; //@line 23157
   $521 = $ReallocAsyncCtx4 + 108 | 0; //@line 23158
   HEAP32[$521 >> 2] = $54; //@line 23159
   $522 = $ReallocAsyncCtx4 + 112 | 0; //@line 23160
   HEAP32[$522 >> 2] = $56; //@line 23161
   $523 = $ReallocAsyncCtx4 + 116 | 0; //@line 23162
   HEAP32[$523 >> 2] = $58; //@line 23163
   $524 = $ReallocAsyncCtx4 + 120 | 0; //@line 23164
   HEAP32[$524 >> 2] = $60; //@line 23165
   $525 = $ReallocAsyncCtx4 + 124 | 0; //@line 23166
   HEAP32[$525 >> 2] = $62; //@line 23167
   $526 = $ReallocAsyncCtx4 + 128 | 0; //@line 23168
   HEAP32[$526 >> 2] = $64; //@line 23169
   $527 = $ReallocAsyncCtx4 + 132 | 0; //@line 23170
   HEAP32[$527 >> 2] = $66; //@line 23171
   $528 = $ReallocAsyncCtx4 + 136 | 0; //@line 23172
   HEAP32[$528 >> 2] = $68; //@line 23173
   $529 = $ReallocAsyncCtx4 + 140 | 0; //@line 23174
   HEAP32[$529 >> 2] = $70; //@line 23175
   $530 = $ReallocAsyncCtx4 + 144 | 0; //@line 23176
   HEAP32[$530 >> 2] = $72; //@line 23177
   $531 = $ReallocAsyncCtx4 + 148 | 0; //@line 23178
   HEAP32[$531 >> 2] = $74; //@line 23179
   $532 = $ReallocAsyncCtx4 + 152 | 0; //@line 23180
   HEAP32[$532 >> 2] = $76; //@line 23181
   $533 = $ReallocAsyncCtx4 + 156 | 0; //@line 23182
   HEAP32[$533 >> 2] = $78; //@line 23183
   $534 = $ReallocAsyncCtx4 + 160 | 0; //@line 23184
   HEAP32[$534 >> 2] = $80; //@line 23185
   $535 = $ReallocAsyncCtx4 + 164 | 0; //@line 23186
   HEAP8[$535 >> 0] = $480; //@line 23187
   $536 = $ReallocAsyncCtx4 + 168 | 0; //@line 23188
   HEAP32[$536 >> 2] = $84; //@line 23189
   $537 = $ReallocAsyncCtx4 + 172 | 0; //@line 23190
   HEAP32[$537 >> 2] = $86; //@line 23191
   $538 = $ReallocAsyncCtx4 + 176 | 0; //@line 23192
   HEAP32[$538 >> 2] = $88; //@line 23193
   $539 = $ReallocAsyncCtx4 + 180 | 0; //@line 23194
   HEAP32[$539 >> 2] = $90; //@line 23195
   $540 = $ReallocAsyncCtx4 + 184 | 0; //@line 23196
   HEAP32[$540 >> 2] = $92; //@line 23197
   $541 = $ReallocAsyncCtx4 + 188 | 0; //@line 23198
   HEAP32[$541 >> 2] = $94; //@line 23199
   $542 = $ReallocAsyncCtx4 + 192 | 0; //@line 23200
   HEAP32[$542 >> 2] = $96; //@line 23201
   $543 = $ReallocAsyncCtx4 + 196 | 0; //@line 23202
   HEAP32[$543 >> 2] = $98; //@line 23203
   $544 = $ReallocAsyncCtx4 + 200 | 0; //@line 23204
   HEAP32[$544 >> 2] = $100; //@line 23205
   $545 = $ReallocAsyncCtx4 + 204 | 0; //@line 23206
   HEAP32[$545 >> 2] = $102; //@line 23207
   $546 = $ReallocAsyncCtx4 + 208 | 0; //@line 23208
   HEAP32[$546 >> 2] = $104; //@line 23209
   $547 = $ReallocAsyncCtx4 + 212 | 0; //@line 23210
   HEAP32[$547 >> 2] = $106; //@line 23211
   $548 = $ReallocAsyncCtx4 + 216 | 0; //@line 23212
   HEAP32[$548 >> 2] = $108; //@line 23213
   $549 = $ReallocAsyncCtx4 + 220 | 0; //@line 23214
   HEAP32[$549 >> 2] = $110; //@line 23215
   $550 = $ReallocAsyncCtx4 + 224 | 0; //@line 23216
   HEAP32[$550 >> 2] = $112; //@line 23217
   $551 = $ReallocAsyncCtx4 + 228 | 0; //@line 23218
   HEAP32[$551 >> 2] = $114; //@line 23219
   $552 = $ReallocAsyncCtx4 + 232 | 0; //@line 23220
   HEAP32[$552 >> 2] = $116; //@line 23221
   $553 = $ReallocAsyncCtx4 + 236 | 0; //@line 23222
   HEAP32[$553 >> 2] = $118; //@line 23223
   $554 = $ReallocAsyncCtx4 + 240 | 0; //@line 23224
   HEAP32[$554 >> 2] = $120; //@line 23225
   $555 = $ReallocAsyncCtx4 + 244 | 0; //@line 23226
   HEAP32[$555 >> 2] = $122; //@line 23227
   $556 = $ReallocAsyncCtx4 + 248 | 0; //@line 23228
   HEAP8[$556 >> 0] = $124; //@line 23229
   $557 = $ReallocAsyncCtx4 + 249 | 0; //@line 23230
   HEAP8[$557 >> 0] = $126; //@line 23231
   $558 = $ReallocAsyncCtx4 + 252 | 0; //@line 23232
   HEAP32[$558 >> 2] = $128; //@line 23233
   $559 = $ReallocAsyncCtx4 + 256 | 0; //@line 23234
   HEAP8[$559 >> 0] = $130; //@line 23235
   $560 = $ReallocAsyncCtx4 + 260 | 0; //@line 23236
   HEAP32[$560 >> 2] = $132; //@line 23237
   $561 = $ReallocAsyncCtx4 + 264 | 0; //@line 23238
   HEAP32[$561 >> 2] = $$096$be; //@line 23239
   $562 = $ReallocAsyncCtx4 + 268 | 0; //@line 23240
   HEAP32[$562 >> 2] = $136; //@line 23241
   sp = STACKTOP; //@line 23242
   return;
  }
  HEAP8[___async_retval >> 0] = $494 & 1; //@line 23247
  ___async_unwind = 0; //@line 23248
  HEAP32[$ReallocAsyncCtx4 >> 2] = 490; //@line 23249
  $495 = $ReallocAsyncCtx4 + 4 | 0; //@line 23250
  HEAP32[$495 >> 2] = $2; //@line 23251
  $496 = $ReallocAsyncCtx4 + 8 | 0; //@line 23252
  HEAP32[$496 >> 2] = $4; //@line 23253
  $497 = $ReallocAsyncCtx4 + 12 | 0; //@line 23254
  HEAP32[$497 >> 2] = $6; //@line 23255
  $498 = $ReallocAsyncCtx4 + 16 | 0; //@line 23256
  HEAP32[$498 >> 2] = $8; //@line 23257
  $499 = $ReallocAsyncCtx4 + 20 | 0; //@line 23258
  HEAP32[$499 >> 2] = $10; //@line 23259
  $500 = $ReallocAsyncCtx4 + 24 | 0; //@line 23260
  HEAP32[$500 >> 2] = $12; //@line 23261
  $501 = $ReallocAsyncCtx4 + 28 | 0; //@line 23262
  HEAP32[$501 >> 2] = $14; //@line 23263
  $502 = $ReallocAsyncCtx4 + 32 | 0; //@line 23264
  HEAP32[$502 >> 2] = $16; //@line 23265
  $503 = $ReallocAsyncCtx4 + 36 | 0; //@line 23266
  HEAP32[$503 >> 2] = $18; //@line 23267
  $504 = $ReallocAsyncCtx4 + 40 | 0; //@line 23268
  HEAP32[$504 >> 2] = $20; //@line 23269
  $505 = $ReallocAsyncCtx4 + 44 | 0; //@line 23270
  HEAP32[$505 >> 2] = $22; //@line 23271
  $506 = $ReallocAsyncCtx4 + 48 | 0; //@line 23272
  HEAP32[$506 >> 2] = $24; //@line 23273
  $507 = $ReallocAsyncCtx4 + 52 | 0; //@line 23274
  HEAP32[$507 >> 2] = $26; //@line 23275
  $508 = $ReallocAsyncCtx4 + 56 | 0; //@line 23276
  HEAP32[$508 >> 2] = $28; //@line 23277
  $509 = $ReallocAsyncCtx4 + 60 | 0; //@line 23278
  HEAP32[$509 >> 2] = $30; //@line 23279
  $510 = $ReallocAsyncCtx4 + 64 | 0; //@line 23280
  HEAP32[$510 >> 2] = $32; //@line 23281
  $511 = $ReallocAsyncCtx4 + 68 | 0; //@line 23282
  HEAP32[$511 >> 2] = $34; //@line 23283
  $512 = $ReallocAsyncCtx4 + 72 | 0; //@line 23284
  HEAP32[$512 >> 2] = $36; //@line 23285
  $513 = $ReallocAsyncCtx4 + 76 | 0; //@line 23286
  HEAP32[$513 >> 2] = $38; //@line 23287
  $514 = $ReallocAsyncCtx4 + 80 | 0; //@line 23288
  HEAP32[$514 >> 2] = $40; //@line 23289
  $515 = $ReallocAsyncCtx4 + 84 | 0; //@line 23290
  HEAP32[$515 >> 2] = $42; //@line 23291
  $516 = $ReallocAsyncCtx4 + 88 | 0; //@line 23292
  HEAP32[$516 >> 2] = $44; //@line 23293
  $517 = $ReallocAsyncCtx4 + 92 | 0; //@line 23294
  HEAP32[$517 >> 2] = $46; //@line 23295
  $518 = $ReallocAsyncCtx4 + 96 | 0; //@line 23296
  HEAP32[$518 >> 2] = $48; //@line 23297
  $519 = $ReallocAsyncCtx4 + 100 | 0; //@line 23298
  HEAP32[$519 >> 2] = $50; //@line 23299
  $520 = $ReallocAsyncCtx4 + 104 | 0; //@line 23300
  HEAP32[$520 >> 2] = $52; //@line 23301
  $521 = $ReallocAsyncCtx4 + 108 | 0; //@line 23302
  HEAP32[$521 >> 2] = $54; //@line 23303
  $522 = $ReallocAsyncCtx4 + 112 | 0; //@line 23304
  HEAP32[$522 >> 2] = $56; //@line 23305
  $523 = $ReallocAsyncCtx4 + 116 | 0; //@line 23306
  HEAP32[$523 >> 2] = $58; //@line 23307
  $524 = $ReallocAsyncCtx4 + 120 | 0; //@line 23308
  HEAP32[$524 >> 2] = $60; //@line 23309
  $525 = $ReallocAsyncCtx4 + 124 | 0; //@line 23310
  HEAP32[$525 >> 2] = $62; //@line 23311
  $526 = $ReallocAsyncCtx4 + 128 | 0; //@line 23312
  HEAP32[$526 >> 2] = $64; //@line 23313
  $527 = $ReallocAsyncCtx4 + 132 | 0; //@line 23314
  HEAP32[$527 >> 2] = $66; //@line 23315
  $528 = $ReallocAsyncCtx4 + 136 | 0; //@line 23316
  HEAP32[$528 >> 2] = $68; //@line 23317
  $529 = $ReallocAsyncCtx4 + 140 | 0; //@line 23318
  HEAP32[$529 >> 2] = $70; //@line 23319
  $530 = $ReallocAsyncCtx4 + 144 | 0; //@line 23320
  HEAP32[$530 >> 2] = $72; //@line 23321
  $531 = $ReallocAsyncCtx4 + 148 | 0; //@line 23322
  HEAP32[$531 >> 2] = $74; //@line 23323
  $532 = $ReallocAsyncCtx4 + 152 | 0; //@line 23324
  HEAP32[$532 >> 2] = $76; //@line 23325
  $533 = $ReallocAsyncCtx4 + 156 | 0; //@line 23326
  HEAP32[$533 >> 2] = $78; //@line 23327
  $534 = $ReallocAsyncCtx4 + 160 | 0; //@line 23328
  HEAP32[$534 >> 2] = $80; //@line 23329
  $535 = $ReallocAsyncCtx4 + 164 | 0; //@line 23330
  HEAP8[$535 >> 0] = $480; //@line 23331
  $536 = $ReallocAsyncCtx4 + 168 | 0; //@line 23332
  HEAP32[$536 >> 2] = $84; //@line 23333
  $537 = $ReallocAsyncCtx4 + 172 | 0; //@line 23334
  HEAP32[$537 >> 2] = $86; //@line 23335
  $538 = $ReallocAsyncCtx4 + 176 | 0; //@line 23336
  HEAP32[$538 >> 2] = $88; //@line 23337
  $539 = $ReallocAsyncCtx4 + 180 | 0; //@line 23338
  HEAP32[$539 >> 2] = $90; //@line 23339
  $540 = $ReallocAsyncCtx4 + 184 | 0; //@line 23340
  HEAP32[$540 >> 2] = $92; //@line 23341
  $541 = $ReallocAsyncCtx4 + 188 | 0; //@line 23342
  HEAP32[$541 >> 2] = $94; //@line 23343
  $542 = $ReallocAsyncCtx4 + 192 | 0; //@line 23344
  HEAP32[$542 >> 2] = $96; //@line 23345
  $543 = $ReallocAsyncCtx4 + 196 | 0; //@line 23346
  HEAP32[$543 >> 2] = $98; //@line 23347
  $544 = $ReallocAsyncCtx4 + 200 | 0; //@line 23348
  HEAP32[$544 >> 2] = $100; //@line 23349
  $545 = $ReallocAsyncCtx4 + 204 | 0; //@line 23350
  HEAP32[$545 >> 2] = $102; //@line 23351
  $546 = $ReallocAsyncCtx4 + 208 | 0; //@line 23352
  HEAP32[$546 >> 2] = $104; //@line 23353
  $547 = $ReallocAsyncCtx4 + 212 | 0; //@line 23354
  HEAP32[$547 >> 2] = $106; //@line 23355
  $548 = $ReallocAsyncCtx4 + 216 | 0; //@line 23356
  HEAP32[$548 >> 2] = $108; //@line 23357
  $549 = $ReallocAsyncCtx4 + 220 | 0; //@line 23358
  HEAP32[$549 >> 2] = $110; //@line 23359
  $550 = $ReallocAsyncCtx4 + 224 | 0; //@line 23360
  HEAP32[$550 >> 2] = $112; //@line 23361
  $551 = $ReallocAsyncCtx4 + 228 | 0; //@line 23362
  HEAP32[$551 >> 2] = $114; //@line 23363
  $552 = $ReallocAsyncCtx4 + 232 | 0; //@line 23364
  HEAP32[$552 >> 2] = $116; //@line 23365
  $553 = $ReallocAsyncCtx4 + 236 | 0; //@line 23366
  HEAP32[$553 >> 2] = $118; //@line 23367
  $554 = $ReallocAsyncCtx4 + 240 | 0; //@line 23368
  HEAP32[$554 >> 2] = $120; //@line 23369
  $555 = $ReallocAsyncCtx4 + 244 | 0; //@line 23370
  HEAP32[$555 >> 2] = $122; //@line 23371
  $556 = $ReallocAsyncCtx4 + 248 | 0; //@line 23372
  HEAP8[$556 >> 0] = $124; //@line 23373
  $557 = $ReallocAsyncCtx4 + 249 | 0; //@line 23374
  HEAP8[$557 >> 0] = $126; //@line 23375
  $558 = $ReallocAsyncCtx4 + 252 | 0; //@line 23376
  HEAP32[$558 >> 2] = $128; //@line 23377
  $559 = $ReallocAsyncCtx4 + 256 | 0; //@line 23378
  HEAP8[$559 >> 0] = $130; //@line 23379
  $560 = $ReallocAsyncCtx4 + 260 | 0; //@line 23380
  HEAP32[$560 >> 2] = $132; //@line 23381
  $561 = $ReallocAsyncCtx4 + 264 | 0; //@line 23382
  HEAP32[$561 >> 2] = $$096$be; //@line 23383
  $562 = $ReallocAsyncCtx4 + 268 | 0; //@line 23384
  HEAP32[$562 >> 2] = $136; //@line 23385
  sp = STACKTOP; //@line 23386
  return;
 } else if ((label | 0) == 28) {
  HEAP8[$104 >> 0] = HEAP8[$120 + ($139 & 255) >> 0] | 0; //@line 23394
  $594 = $$0$be + 5 << 24 >> 24; //@line 23407
  HEAP32[$100 >> 2] = (HEAPU8[$120 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$120 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$120 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 23415
  $604 = HEAP32[(HEAP32[$112 >> 2] | 0) + 48 >> 2] | 0; //@line 23418
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(268) | 0; //@line 23419
  $605 = FUNCTION_TABLE_iii[$604 & 31]($136, $14) | 0; //@line 23420
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 491; //@line 23423
   $606 = $ReallocAsyncCtx5 + 4 | 0; //@line 23424
   HEAP32[$606 >> 2] = $2; //@line 23425
   $607 = $ReallocAsyncCtx5 + 8 | 0; //@line 23426
   HEAP32[$607 >> 2] = $4; //@line 23427
   $608 = $ReallocAsyncCtx5 + 12 | 0; //@line 23428
   HEAP32[$608 >> 2] = $6; //@line 23429
   $609 = $ReallocAsyncCtx5 + 16 | 0; //@line 23430
   HEAP32[$609 >> 2] = $8; //@line 23431
   $610 = $ReallocAsyncCtx5 + 20 | 0; //@line 23432
   HEAP8[$610 >> 0] = $594; //@line 23433
   $611 = $ReallocAsyncCtx5 + 24 | 0; //@line 23434
   HEAP32[$611 >> 2] = $10; //@line 23435
   $612 = $ReallocAsyncCtx5 + 28 | 0; //@line 23436
   HEAP32[$612 >> 2] = $12; //@line 23437
   $613 = $ReallocAsyncCtx5 + 32 | 0; //@line 23438
   HEAP32[$613 >> 2] = $14; //@line 23439
   $614 = $ReallocAsyncCtx5 + 36 | 0; //@line 23440
   HEAP32[$614 >> 2] = $16; //@line 23441
   $615 = $ReallocAsyncCtx5 + 40 | 0; //@line 23442
   HEAP32[$615 >> 2] = $18; //@line 23443
   $616 = $ReallocAsyncCtx5 + 44 | 0; //@line 23444
   HEAP32[$616 >> 2] = $20; //@line 23445
   $617 = $ReallocAsyncCtx5 + 48 | 0; //@line 23446
   HEAP32[$617 >> 2] = $22; //@line 23447
   $618 = $ReallocAsyncCtx5 + 52 | 0; //@line 23448
   HEAP32[$618 >> 2] = $24; //@line 23449
   $619 = $ReallocAsyncCtx5 + 56 | 0; //@line 23450
   HEAP32[$619 >> 2] = $26; //@line 23451
   $620 = $ReallocAsyncCtx5 + 60 | 0; //@line 23452
   HEAP32[$620 >> 2] = $28; //@line 23453
   $621 = $ReallocAsyncCtx5 + 64 | 0; //@line 23454
   HEAP32[$621 >> 2] = $30; //@line 23455
   $622 = $ReallocAsyncCtx5 + 68 | 0; //@line 23456
   HEAP32[$622 >> 2] = $32; //@line 23457
   $623 = $ReallocAsyncCtx5 + 72 | 0; //@line 23458
   HEAP32[$623 >> 2] = $34; //@line 23459
   $624 = $ReallocAsyncCtx5 + 76 | 0; //@line 23460
   HEAP32[$624 >> 2] = $36; //@line 23461
   $625 = $ReallocAsyncCtx5 + 80 | 0; //@line 23462
   HEAP32[$625 >> 2] = $38; //@line 23463
   $626 = $ReallocAsyncCtx5 + 84 | 0; //@line 23464
   HEAP32[$626 >> 2] = $40; //@line 23465
   $627 = $ReallocAsyncCtx5 + 88 | 0; //@line 23466
   HEAP32[$627 >> 2] = $42; //@line 23467
   $628 = $ReallocAsyncCtx5 + 92 | 0; //@line 23468
   HEAP32[$628 >> 2] = $44; //@line 23469
   $629 = $ReallocAsyncCtx5 + 96 | 0; //@line 23470
   HEAP32[$629 >> 2] = $46; //@line 23471
   $630 = $ReallocAsyncCtx5 + 100 | 0; //@line 23472
   HEAP32[$630 >> 2] = $48; //@line 23473
   $631 = $ReallocAsyncCtx5 + 104 | 0; //@line 23474
   HEAP32[$631 >> 2] = $50; //@line 23475
   $632 = $ReallocAsyncCtx5 + 108 | 0; //@line 23476
   HEAP32[$632 >> 2] = $52; //@line 23477
   $633 = $ReallocAsyncCtx5 + 112 | 0; //@line 23478
   HEAP32[$633 >> 2] = $54; //@line 23479
   $634 = $ReallocAsyncCtx5 + 116 | 0; //@line 23480
   HEAP32[$634 >> 2] = $56; //@line 23481
   $635 = $ReallocAsyncCtx5 + 120 | 0; //@line 23482
   HEAP32[$635 >> 2] = $58; //@line 23483
   $636 = $ReallocAsyncCtx5 + 124 | 0; //@line 23484
   HEAP32[$636 >> 2] = $60; //@line 23485
   $637 = $ReallocAsyncCtx5 + 128 | 0; //@line 23486
   HEAP32[$637 >> 2] = $62; //@line 23487
   $638 = $ReallocAsyncCtx5 + 132 | 0; //@line 23488
   HEAP32[$638 >> 2] = $64; //@line 23489
   $639 = $ReallocAsyncCtx5 + 136 | 0; //@line 23490
   HEAP32[$639 >> 2] = $66; //@line 23491
   $640 = $ReallocAsyncCtx5 + 140 | 0; //@line 23492
   HEAP32[$640 >> 2] = $68; //@line 23493
   $641 = $ReallocAsyncCtx5 + 144 | 0; //@line 23494
   HEAP32[$641 >> 2] = $70; //@line 23495
   $642 = $ReallocAsyncCtx5 + 148 | 0; //@line 23496
   HEAP32[$642 >> 2] = $72; //@line 23497
   $643 = $ReallocAsyncCtx5 + 152 | 0; //@line 23498
   HEAP32[$643 >> 2] = $74; //@line 23499
   $644 = $ReallocAsyncCtx5 + 156 | 0; //@line 23500
   HEAP32[$644 >> 2] = $76; //@line 23501
   $645 = $ReallocAsyncCtx5 + 160 | 0; //@line 23502
   HEAP32[$645 >> 2] = $78; //@line 23503
   $646 = $ReallocAsyncCtx5 + 164 | 0; //@line 23504
   HEAP32[$646 >> 2] = $80; //@line 23505
   $647 = $ReallocAsyncCtx5 + 168 | 0; //@line 23506
   HEAP32[$647 >> 2] = $84; //@line 23507
   $648 = $ReallocAsyncCtx5 + 172 | 0; //@line 23508
   HEAP32[$648 >> 2] = $86; //@line 23509
   $649 = $ReallocAsyncCtx5 + 176 | 0; //@line 23510
   HEAP32[$649 >> 2] = $88; //@line 23511
   $650 = $ReallocAsyncCtx5 + 180 | 0; //@line 23512
   HEAP32[$650 >> 2] = $90; //@line 23513
   $651 = $ReallocAsyncCtx5 + 184 | 0; //@line 23514
   HEAP32[$651 >> 2] = $92; //@line 23515
   $652 = $ReallocAsyncCtx5 + 188 | 0; //@line 23516
   HEAP32[$652 >> 2] = $94; //@line 23517
   $653 = $ReallocAsyncCtx5 + 192 | 0; //@line 23518
   HEAP32[$653 >> 2] = $96; //@line 23519
   $654 = $ReallocAsyncCtx5 + 196 | 0; //@line 23520
   HEAP32[$654 >> 2] = $98; //@line 23521
   $655 = $ReallocAsyncCtx5 + 200 | 0; //@line 23522
   HEAP32[$655 >> 2] = $100; //@line 23523
   $656 = $ReallocAsyncCtx5 + 204 | 0; //@line 23524
   HEAP32[$656 >> 2] = $102; //@line 23525
   $657 = $ReallocAsyncCtx5 + 208 | 0; //@line 23526
   HEAP32[$657 >> 2] = $104; //@line 23527
   $658 = $ReallocAsyncCtx5 + 212 | 0; //@line 23528
   HEAP32[$658 >> 2] = $106; //@line 23529
   $659 = $ReallocAsyncCtx5 + 216 | 0; //@line 23530
   HEAP32[$659 >> 2] = $108; //@line 23531
   $660 = $ReallocAsyncCtx5 + 220 | 0; //@line 23532
   HEAP32[$660 >> 2] = $110; //@line 23533
   $661 = $ReallocAsyncCtx5 + 224 | 0; //@line 23534
   HEAP32[$661 >> 2] = $112; //@line 23535
   $662 = $ReallocAsyncCtx5 + 228 | 0; //@line 23536
   HEAP32[$662 >> 2] = $114; //@line 23537
   $663 = $ReallocAsyncCtx5 + 232 | 0; //@line 23538
   HEAP32[$663 >> 2] = $116; //@line 23539
   $664 = $ReallocAsyncCtx5 + 236 | 0; //@line 23540
   HEAP32[$664 >> 2] = $118; //@line 23541
   $665 = $ReallocAsyncCtx5 + 240 | 0; //@line 23542
   HEAP32[$665 >> 2] = $120; //@line 23543
   $666 = $ReallocAsyncCtx5 + 244 | 0; //@line 23544
   HEAP32[$666 >> 2] = $122; //@line 23545
   $667 = $ReallocAsyncCtx5 + 248 | 0; //@line 23546
   HEAP8[$667 >> 0] = $124; //@line 23547
   $668 = $ReallocAsyncCtx5 + 249 | 0; //@line 23548
   HEAP8[$668 >> 0] = $126; //@line 23549
   $669 = $ReallocAsyncCtx5 + 252 | 0; //@line 23550
   HEAP32[$669 >> 2] = $128; //@line 23551
   $670 = $ReallocAsyncCtx5 + 256 | 0; //@line 23552
   HEAP8[$670 >> 0] = $130; //@line 23553
   $671 = $ReallocAsyncCtx5 + 260 | 0; //@line 23554
   HEAP32[$671 >> 2] = $132; //@line 23555
   $672 = $ReallocAsyncCtx5 + 264 | 0; //@line 23556
   HEAP32[$672 >> 2] = $136; //@line 23557
   sp = STACKTOP; //@line 23558
   return;
  }
  HEAP8[___async_retval >> 0] = $605; //@line 23562
  ___async_unwind = 0; //@line 23563
  HEAP32[$ReallocAsyncCtx5 >> 2] = 491; //@line 23564
  $606 = $ReallocAsyncCtx5 + 4 | 0; //@line 23565
  HEAP32[$606 >> 2] = $2; //@line 23566
  $607 = $ReallocAsyncCtx5 + 8 | 0; //@line 23567
  HEAP32[$607 >> 2] = $4; //@line 23568
  $608 = $ReallocAsyncCtx5 + 12 | 0; //@line 23569
  HEAP32[$608 >> 2] = $6; //@line 23570
  $609 = $ReallocAsyncCtx5 + 16 | 0; //@line 23571
  HEAP32[$609 >> 2] = $8; //@line 23572
  $610 = $ReallocAsyncCtx5 + 20 | 0; //@line 23573
  HEAP8[$610 >> 0] = $594; //@line 23574
  $611 = $ReallocAsyncCtx5 + 24 | 0; //@line 23575
  HEAP32[$611 >> 2] = $10; //@line 23576
  $612 = $ReallocAsyncCtx5 + 28 | 0; //@line 23577
  HEAP32[$612 >> 2] = $12; //@line 23578
  $613 = $ReallocAsyncCtx5 + 32 | 0; //@line 23579
  HEAP32[$613 >> 2] = $14; //@line 23580
  $614 = $ReallocAsyncCtx5 + 36 | 0; //@line 23581
  HEAP32[$614 >> 2] = $16; //@line 23582
  $615 = $ReallocAsyncCtx5 + 40 | 0; //@line 23583
  HEAP32[$615 >> 2] = $18; //@line 23584
  $616 = $ReallocAsyncCtx5 + 44 | 0; //@line 23585
  HEAP32[$616 >> 2] = $20; //@line 23586
  $617 = $ReallocAsyncCtx5 + 48 | 0; //@line 23587
  HEAP32[$617 >> 2] = $22; //@line 23588
  $618 = $ReallocAsyncCtx5 + 52 | 0; //@line 23589
  HEAP32[$618 >> 2] = $24; //@line 23590
  $619 = $ReallocAsyncCtx5 + 56 | 0; //@line 23591
  HEAP32[$619 >> 2] = $26; //@line 23592
  $620 = $ReallocAsyncCtx5 + 60 | 0; //@line 23593
  HEAP32[$620 >> 2] = $28; //@line 23594
  $621 = $ReallocAsyncCtx5 + 64 | 0; //@line 23595
  HEAP32[$621 >> 2] = $30; //@line 23596
  $622 = $ReallocAsyncCtx5 + 68 | 0; //@line 23597
  HEAP32[$622 >> 2] = $32; //@line 23598
  $623 = $ReallocAsyncCtx5 + 72 | 0; //@line 23599
  HEAP32[$623 >> 2] = $34; //@line 23600
  $624 = $ReallocAsyncCtx5 + 76 | 0; //@line 23601
  HEAP32[$624 >> 2] = $36; //@line 23602
  $625 = $ReallocAsyncCtx5 + 80 | 0; //@line 23603
  HEAP32[$625 >> 2] = $38; //@line 23604
  $626 = $ReallocAsyncCtx5 + 84 | 0; //@line 23605
  HEAP32[$626 >> 2] = $40; //@line 23606
  $627 = $ReallocAsyncCtx5 + 88 | 0; //@line 23607
  HEAP32[$627 >> 2] = $42; //@line 23608
  $628 = $ReallocAsyncCtx5 + 92 | 0; //@line 23609
  HEAP32[$628 >> 2] = $44; //@line 23610
  $629 = $ReallocAsyncCtx5 + 96 | 0; //@line 23611
  HEAP32[$629 >> 2] = $46; //@line 23612
  $630 = $ReallocAsyncCtx5 + 100 | 0; //@line 23613
  HEAP32[$630 >> 2] = $48; //@line 23614
  $631 = $ReallocAsyncCtx5 + 104 | 0; //@line 23615
  HEAP32[$631 >> 2] = $50; //@line 23616
  $632 = $ReallocAsyncCtx5 + 108 | 0; //@line 23617
  HEAP32[$632 >> 2] = $52; //@line 23618
  $633 = $ReallocAsyncCtx5 + 112 | 0; //@line 23619
  HEAP32[$633 >> 2] = $54; //@line 23620
  $634 = $ReallocAsyncCtx5 + 116 | 0; //@line 23621
  HEAP32[$634 >> 2] = $56; //@line 23622
  $635 = $ReallocAsyncCtx5 + 120 | 0; //@line 23623
  HEAP32[$635 >> 2] = $58; //@line 23624
  $636 = $ReallocAsyncCtx5 + 124 | 0; //@line 23625
  HEAP32[$636 >> 2] = $60; //@line 23626
  $637 = $ReallocAsyncCtx5 + 128 | 0; //@line 23627
  HEAP32[$637 >> 2] = $62; //@line 23628
  $638 = $ReallocAsyncCtx5 + 132 | 0; //@line 23629
  HEAP32[$638 >> 2] = $64; //@line 23630
  $639 = $ReallocAsyncCtx5 + 136 | 0; //@line 23631
  HEAP32[$639 >> 2] = $66; //@line 23632
  $640 = $ReallocAsyncCtx5 + 140 | 0; //@line 23633
  HEAP32[$640 >> 2] = $68; //@line 23634
  $641 = $ReallocAsyncCtx5 + 144 | 0; //@line 23635
  HEAP32[$641 >> 2] = $70; //@line 23636
  $642 = $ReallocAsyncCtx5 + 148 | 0; //@line 23637
  HEAP32[$642 >> 2] = $72; //@line 23638
  $643 = $ReallocAsyncCtx5 + 152 | 0; //@line 23639
  HEAP32[$643 >> 2] = $74; //@line 23640
  $644 = $ReallocAsyncCtx5 + 156 | 0; //@line 23641
  HEAP32[$644 >> 2] = $76; //@line 23642
  $645 = $ReallocAsyncCtx5 + 160 | 0; //@line 23643
  HEAP32[$645 >> 2] = $78; //@line 23644
  $646 = $ReallocAsyncCtx5 + 164 | 0; //@line 23645
  HEAP32[$646 >> 2] = $80; //@line 23646
  $647 = $ReallocAsyncCtx5 + 168 | 0; //@line 23647
  HEAP32[$647 >> 2] = $84; //@line 23648
  $648 = $ReallocAsyncCtx5 + 172 | 0; //@line 23649
  HEAP32[$648 >> 2] = $86; //@line 23650
  $649 = $ReallocAsyncCtx5 + 176 | 0; //@line 23651
  HEAP32[$649 >> 2] = $88; //@line 23652
  $650 = $ReallocAsyncCtx5 + 180 | 0; //@line 23653
  HEAP32[$650 >> 2] = $90; //@line 23654
  $651 = $ReallocAsyncCtx5 + 184 | 0; //@line 23655
  HEAP32[$651 >> 2] = $92; //@line 23656
  $652 = $ReallocAsyncCtx5 + 188 | 0; //@line 23657
  HEAP32[$652 >> 2] = $94; //@line 23658
  $653 = $ReallocAsyncCtx5 + 192 | 0; //@line 23659
  HEAP32[$653 >> 2] = $96; //@line 23660
  $654 = $ReallocAsyncCtx5 + 196 | 0; //@line 23661
  HEAP32[$654 >> 2] = $98; //@line 23662
  $655 = $ReallocAsyncCtx5 + 200 | 0; //@line 23663
  HEAP32[$655 >> 2] = $100; //@line 23664
  $656 = $ReallocAsyncCtx5 + 204 | 0; //@line 23665
  HEAP32[$656 >> 2] = $102; //@line 23666
  $657 = $ReallocAsyncCtx5 + 208 | 0; //@line 23667
  HEAP32[$657 >> 2] = $104; //@line 23668
  $658 = $ReallocAsyncCtx5 + 212 | 0; //@line 23669
  HEAP32[$658 >> 2] = $106; //@line 23670
  $659 = $ReallocAsyncCtx5 + 216 | 0; //@line 23671
  HEAP32[$659 >> 2] = $108; //@line 23672
  $660 = $ReallocAsyncCtx5 + 220 | 0; //@line 23673
  HEAP32[$660 >> 2] = $110; //@line 23674
  $661 = $ReallocAsyncCtx5 + 224 | 0; //@line 23675
  HEAP32[$661 >> 2] = $112; //@line 23676
  $662 = $ReallocAsyncCtx5 + 228 | 0; //@line 23677
  HEAP32[$662 >> 2] = $114; //@line 23678
  $663 = $ReallocAsyncCtx5 + 232 | 0; //@line 23679
  HEAP32[$663 >> 2] = $116; //@line 23680
  $664 = $ReallocAsyncCtx5 + 236 | 0; //@line 23681
  HEAP32[$664 >> 2] = $118; //@line 23682
  $665 = $ReallocAsyncCtx5 + 240 | 0; //@line 23683
  HEAP32[$665 >> 2] = $120; //@line 23684
  $666 = $ReallocAsyncCtx5 + 244 | 0; //@line 23685
  HEAP32[$666 >> 2] = $122; //@line 23686
  $667 = $ReallocAsyncCtx5 + 248 | 0; //@line 23687
  HEAP8[$667 >> 0] = $124; //@line 23688
  $668 = $ReallocAsyncCtx5 + 249 | 0; //@line 23689
  HEAP8[$668 >> 0] = $126; //@line 23690
  $669 = $ReallocAsyncCtx5 + 252 | 0; //@line 23691
  HEAP32[$669 >> 2] = $128; //@line 23692
  $670 = $ReallocAsyncCtx5 + 256 | 0; //@line 23693
  HEAP8[$670 >> 0] = $130; //@line 23694
  $671 = $ReallocAsyncCtx5 + 260 | 0; //@line 23695
  HEAP32[$671 >> 2] = $132; //@line 23696
  $672 = $ReallocAsyncCtx5 + 264 | 0; //@line 23697
  HEAP32[$672 >> 2] = $136; //@line 23698
  sp = STACKTOP; //@line 23699
  return;
 } else if ((label | 0) == 32) {
  HEAP32[___async_retval >> 2] = $$096$be; //@line 23704
  return;
 }
}
function __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_375($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0$i108 = 0, $$096$be = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $130 = 0, $132 = 0, $134 = 0, $137 = 0, $14 = 0, $148 = 0, $149 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $231 = 0, $234 = 0, $239 = 0, $24 = 0, $247 = 0, $26 = 0, $266 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $347 = 0, $348 = 0, $36 = 0, $38 = 0, $385 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $462 = 0, $463 = 0, $473 = 0, $477 = 0, $48 = 0, $481 = 0, $484 = 0, $490 = 0, $493 = 0, $494 = 0, $50 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $58 = 0, $590 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 19886
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19888
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19890
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19892
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19894
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19896
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19898
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 19900
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 19902
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 19904
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 19906
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 19908
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 19910
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 19912
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 19914
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 19916
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 19918
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 19920
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 19922
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 19924
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 19926
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 19928
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 19930
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 19932
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 19934
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 19936
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 19938
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 19940
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 19942
 $58 = HEAP8[$0 + 116 >> 0] | 0; //@line 19944
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 19946
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 19948
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 19950
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 19952
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 19954
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 19956
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 19958
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 19960
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 19962
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 19964
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 19966
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 19968
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 19970
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 19972
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 19974
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 19976
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 19978
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 19980
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 19982
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 19984
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 19986
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 19988
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 19990
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 19992
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 19994
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 19996
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 19998
 $114 = HEAP32[$0 + 228 >> 2] | 0; //@line 20000
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 20002
 $118 = HEAP32[$0 + 236 >> 2] | 0; //@line 20004
 $120 = HEAP32[$0 + 240 >> 2] | 0; //@line 20006
 $122 = HEAP32[$0 + 244 >> 2] | 0; //@line 20008
 $124 = HEAP8[$0 + 248 >> 0] | 0; //@line 20010
 $126 = HEAP8[$0 + 249 >> 0] | 0; //@line 20012
 $128 = HEAP32[$0 + 252 >> 2] | 0; //@line 20014
 $130 = HEAP8[$0 + 256 >> 0] | 0; //@line 20016
 $132 = HEAP32[$0 + 260 >> 2] | 0; //@line 20018
 $134 = HEAP32[$0 + 264 >> 2] | 0; //@line 20020
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 20022
 $462 = HEAP8[$110 >> 0] | 0; //@line 20024
 $463 = $462 & 255; //@line 20025
 if (((-128 - (HEAP8[$106 >> 0] | 0) & 255) + -1 | 0) > ($463 | 0)) {
  HEAP8[$92 + 4 + $463 >> 0] = 7; //@line 20036
  HEAP8[$110 >> 0] = $462 + 2 << 24 >> 24; //@line 20037
  HEAP8[($462 + 1 & 255) + ($92 + 4) >> 0] = $AsyncRetVal; //@line 20038
  HEAP8[$116 >> 0] = 1; //@line 20039
  $$0$i108 = 0; //@line 20040
 } else {
  $$0$i108 = -1e3; //@line 20042
 }
 $$0$be = $58; //@line 20044
 $$096$be = $$0$i108; //@line 20044
 L5 : while (1) {
  if (($$0$be & 255) >= ($126 & 255)) {
   label = 31; //@line 20048
   break;
  }
  $137 = $$0$be + 1 << 24 >> 24; //@line 20052
  switch (HEAP8[$120 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 20057
    break L5;
    break;
   }
  case 5:
   {
    label = 9; //@line 20062
    break L5;
    break;
   }
  case 7:
   {
    label = 14; //@line 20067
    break L5;
    break;
   }
  case 9:
   {
    label = 22; //@line 20072
    break L5;
    break;
   }
  case 10:
   {
    label = 27; //@line 20077
    break L5;
    break;
   }
  case 2:
   {
    HEAP32[$62 >> 2] = 0; //@line 20082
    HEAP8[$54 >> 0] = HEAP8[$120 + ($137 & 255) >> 0] | 0; //@line 20087
    HEAP8[$38 >> 0] = HEAP8[$120 + ($$0$be + 2 & 255) >> 0] | 0; //@line 20092
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 20093
    continue L5;
    break;
   }
  case 4:
   {
    $231 = $$0$be + 2 << 24 >> 24; //@line 20098
    $234 = HEAP8[$120 + ($137 & 255) >> 0] | 0; //@line 20101
    HEAP8[$132 >> 0] = $234; //@line 20102
    HEAP16[$6 >> 1] = 1 << ($234 & 255); //@line 20106
    $239 = HEAP8[$110 >> 0] | 0; //@line 20108
    if (($239 & 255) >= (-128 - (HEAP8[$106 >> 0] | 0) & 255)) {
     $$0$be = $231; //@line 20112
     $$096$be = -1e3; //@line 20112
     continue L5;
    }
    HEAP8[$110 >> 0] = $239 + 1 << 24 >> 24; //@line 20118
    HEAP8[($239 & 255) + ($92 + 4) >> 0] = 4; //@line 20119
    HEAP8[$116 >> 0] = 1; //@line 20120
    $$0$be = $231; //@line 20121
    $$096$be = 0; //@line 20121
    continue L5;
    break;
   }
  case 6:
   {
    $347 = HEAP8[$110 >> 0] | 0; //@line 20127
    $348 = $347 & 255; //@line 20128
    if (((-128 - (HEAP8[$106 >> 0] | 0) & 255) + -2 | 0) <= ($348 | 0)) {
     $$0$be = $137; //@line 20134
     $$096$be = -1e3; //@line 20134
     continue L5;
    }
    HEAP8[$92 + 4 + $348 >> 0] = 6; //@line 20139
    HEAP8[($347 + 1 & 255) + ($92 + 4) >> 0] = -1; //@line 20143
    HEAP8[$110 >> 0] = $347 + 3 << 24 >> 24; //@line 20145
    HEAP8[($347 + 2 & 255) + ($92 + 4) >> 0] = $130; //@line 20148
    HEAP8[$116 >> 0] = 1; //@line 20149
    $$0$be = $137; //@line 20150
    $$096$be = 0; //@line 20150
    continue L5;
    break;
   }
  case 8:
   {
    $473 = $$0$be + 2 << 24 >> 24; //@line 20155
    $477 = HEAP8[$120 + ($137 & 255) >> 0] & 15; //@line 20159
    $481 = ($477 + ($477 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 20164
    HEAP32[$36 >> 2] = $481; //@line 20165
    HEAP32[$24 >> 2] = $481 + 1e3; //@line 20167
    $484 = HEAP8[$110 >> 0] | 0; //@line 20169
    if (($484 & 255) >= (-128 - (HEAP8[$106 >> 0] | 0) & 255)) {
     $$0$be = $473; //@line 20173
     $$096$be = -1e3; //@line 20173
     continue L5;
    }
    HEAP8[$110 >> 0] = $484 + 1 << 24 >> 24; //@line 20179
    HEAP8[($484 & 255) + ($92 + 4) >> 0] = 8; //@line 20180
    HEAP8[$94 >> 0] = 1; //@line 20181
    HEAP8[$116 >> 0] = 1; //@line 20182
    $$0$be = $473; //@line 20183
    $$096$be = 0; //@line 20183
    continue L5;
    break;
   }
  default:
   {
    $$0$be = $137; //@line 20188
    $$096$be = -1013; //@line 20188
    continue L5;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$128 >> 0] = 0; //@line 20194
  HEAP8[$64 >> 0] = 0; //@line 20195
  HEAP8[$74 >> 0] = 0; //@line 20196
  HEAP8[$46 >> 0] = 0; //@line 20197
  $148 = $137 & 255; //@line 20198
  $149 = $148 + -1 | 0; //@line 20199
  HEAP32[$26 >> 2] = $120 + $149; //@line 20201
  HEAP8[$10 >> 0] = $88 - $149; //@line 20204
  HEAP8[$8 >> 0] = HEAP8[$4 >> 0] | 0; //@line 20206
  HEAP8[$32 >> 0] = HEAP8[$20 >> 0] | 0; //@line 20208
  HEAP8[$52 >> 0] = HEAP8[$44 >> 0] | 0; //@line 20210
  HEAP8[$72 >> 0] = HEAP8[$68 >> 0] | 0; //@line 20212
  HEAP8[$90 >> 0] = HEAP8[$80 >> 0] | 0; //@line 20214
  $160 = HEAP32[(HEAP32[$98 >> 2] | 0) + 36 >> 2] | 0; //@line 20217
  $ReallocAsyncCtx = _emscripten_realloc_async_context(272) | 0; //@line 20218
  $161 = FUNCTION_TABLE_iiiiiii[$160 & 3]($134, $122, $128, $64, $74, $46) | 0; //@line 20219
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 487; //@line 20222
   $162 = $ReallocAsyncCtx + 4 | 0; //@line 20223
   HEAP32[$162 >> 2] = $2; //@line 20224
   $163 = $ReallocAsyncCtx + 8 | 0; //@line 20225
   HEAP32[$163 >> 2] = $4; //@line 20226
   $164 = $ReallocAsyncCtx + 12 | 0; //@line 20227
   HEAP32[$164 >> 2] = $6; //@line 20228
   $165 = $ReallocAsyncCtx + 16 | 0; //@line 20229
   HEAP32[$165 >> 2] = $8; //@line 20230
   $166 = $ReallocAsyncCtx + 20 | 0; //@line 20231
   HEAP32[$166 >> 2] = $10; //@line 20232
   $167 = $ReallocAsyncCtx + 24 | 0; //@line 20233
   HEAP32[$167 >> 2] = $12; //@line 20234
   $168 = $ReallocAsyncCtx + 28 | 0; //@line 20235
   HEAP32[$168 >> 2] = $14; //@line 20236
   $169 = $ReallocAsyncCtx + 32 | 0; //@line 20237
   HEAP32[$169 >> 2] = $16; //@line 20238
   $170 = $ReallocAsyncCtx + 36 | 0; //@line 20239
   HEAP32[$170 >> 2] = $18; //@line 20240
   $171 = $ReallocAsyncCtx + 40 | 0; //@line 20241
   HEAP32[$171 >> 2] = $20; //@line 20242
   $172 = $ReallocAsyncCtx + 44 | 0; //@line 20243
   HEAP32[$172 >> 2] = $22; //@line 20244
   $173 = $ReallocAsyncCtx + 48 | 0; //@line 20245
   HEAP32[$173 >> 2] = $24; //@line 20246
   $174 = $ReallocAsyncCtx + 52 | 0; //@line 20247
   HEAP32[$174 >> 2] = $26; //@line 20248
   $175 = $ReallocAsyncCtx + 56 | 0; //@line 20249
   HEAP32[$175 >> 2] = $28; //@line 20250
   $176 = $ReallocAsyncCtx + 60 | 0; //@line 20251
   HEAP32[$176 >> 2] = $30; //@line 20252
   $177 = $ReallocAsyncCtx + 64 | 0; //@line 20253
   HEAP32[$177 >> 2] = $32; //@line 20254
   $178 = $ReallocAsyncCtx + 68 | 0; //@line 20255
   HEAP32[$178 >> 2] = $34; //@line 20256
   $179 = $ReallocAsyncCtx + 72 | 0; //@line 20257
   HEAP32[$179 >> 2] = $36; //@line 20258
   $180 = $ReallocAsyncCtx + 76 | 0; //@line 20259
   HEAP32[$180 >> 2] = $38; //@line 20260
   $181 = $ReallocAsyncCtx + 80 | 0; //@line 20261
   HEAP32[$181 >> 2] = $40; //@line 20262
   $182 = $ReallocAsyncCtx + 84 | 0; //@line 20263
   HEAP32[$182 >> 2] = $42; //@line 20264
   $183 = $ReallocAsyncCtx + 88 | 0; //@line 20265
   HEAP32[$183 >> 2] = $44; //@line 20266
   $184 = $ReallocAsyncCtx + 92 | 0; //@line 20267
   HEAP32[$184 >> 2] = $46; //@line 20268
   $185 = $ReallocAsyncCtx + 96 | 0; //@line 20269
   HEAP32[$185 >> 2] = $48; //@line 20270
   $186 = $ReallocAsyncCtx + 100 | 0; //@line 20271
   HEAP32[$186 >> 2] = $50; //@line 20272
   $187 = $ReallocAsyncCtx + 104 | 0; //@line 20273
   HEAP32[$187 >> 2] = $52; //@line 20274
   $188 = $ReallocAsyncCtx + 108 | 0; //@line 20275
   HEAP32[$188 >> 2] = $54; //@line 20276
   $189 = $ReallocAsyncCtx + 112 | 0; //@line 20277
   HEAP32[$189 >> 2] = $56; //@line 20278
   $190 = $ReallocAsyncCtx + 116 | 0; //@line 20279
   HEAP32[$190 >> 2] = $60; //@line 20280
   $191 = $ReallocAsyncCtx + 120 | 0; //@line 20281
   HEAP32[$191 >> 2] = $148; //@line 20282
   $192 = $ReallocAsyncCtx + 124 | 0; //@line 20283
   HEAP32[$192 >> 2] = $62; //@line 20284
   $193 = $ReallocAsyncCtx + 128 | 0; //@line 20285
   HEAP32[$193 >> 2] = $64; //@line 20286
   $194 = $ReallocAsyncCtx + 132 | 0; //@line 20287
   HEAP32[$194 >> 2] = $66; //@line 20288
   $195 = $ReallocAsyncCtx + 136 | 0; //@line 20289
   HEAP32[$195 >> 2] = $68; //@line 20290
   $196 = $ReallocAsyncCtx + 140 | 0; //@line 20291
   HEAP32[$196 >> 2] = $70; //@line 20292
   $197 = $ReallocAsyncCtx + 144 | 0; //@line 20293
   HEAP32[$197 >> 2] = $72; //@line 20294
   $198 = $ReallocAsyncCtx + 148 | 0; //@line 20295
   HEAP32[$198 >> 2] = $74; //@line 20296
   $199 = $ReallocAsyncCtx + 152 | 0; //@line 20297
   HEAP32[$199 >> 2] = $76; //@line 20298
   $200 = $ReallocAsyncCtx + 156 | 0; //@line 20299
   HEAP32[$200 >> 2] = $78; //@line 20300
   $201 = $ReallocAsyncCtx + 160 | 0; //@line 20301
   HEAP32[$201 >> 2] = $80; //@line 20302
   $202 = $ReallocAsyncCtx + 164 | 0; //@line 20303
   HEAP32[$202 >> 2] = $82; //@line 20304
   $203 = $ReallocAsyncCtx + 168 | 0; //@line 20305
   HEAP32[$203 >> 2] = $84; //@line 20306
   $204 = $ReallocAsyncCtx + 172 | 0; //@line 20307
   HEAP32[$204 >> 2] = $86; //@line 20308
   $205 = $ReallocAsyncCtx + 176 | 0; //@line 20309
   HEAP32[$205 >> 2] = $88; //@line 20310
   $206 = $ReallocAsyncCtx + 180 | 0; //@line 20311
   HEAP32[$206 >> 2] = $90; //@line 20312
   $207 = $ReallocAsyncCtx + 184 | 0; //@line 20313
   HEAP32[$207 >> 2] = $92; //@line 20314
   $208 = $ReallocAsyncCtx + 188 | 0; //@line 20315
   HEAP32[$208 >> 2] = $94; //@line 20316
   $209 = $ReallocAsyncCtx + 192 | 0; //@line 20317
   HEAP32[$209 >> 2] = $96; //@line 20318
   $210 = $ReallocAsyncCtx + 196 | 0; //@line 20319
   HEAP32[$210 >> 2] = $98; //@line 20320
   $211 = $ReallocAsyncCtx + 200 | 0; //@line 20321
   HEAP32[$211 >> 2] = $100; //@line 20322
   $212 = $ReallocAsyncCtx + 204 | 0; //@line 20323
   HEAP32[$212 >> 2] = $102; //@line 20324
   $213 = $ReallocAsyncCtx + 208 | 0; //@line 20325
   HEAP32[$213 >> 2] = $104; //@line 20326
   $214 = $ReallocAsyncCtx + 212 | 0; //@line 20327
   HEAP32[$214 >> 2] = $106; //@line 20328
   $215 = $ReallocAsyncCtx + 216 | 0; //@line 20329
   HEAP32[$215 >> 2] = $108; //@line 20330
   $216 = $ReallocAsyncCtx + 220 | 0; //@line 20331
   HEAP32[$216 >> 2] = $110; //@line 20332
   $217 = $ReallocAsyncCtx + 224 | 0; //@line 20333
   HEAP32[$217 >> 2] = $112; //@line 20334
   $218 = $ReallocAsyncCtx + 228 | 0; //@line 20335
   HEAP32[$218 >> 2] = $114; //@line 20336
   $219 = $ReallocAsyncCtx + 232 | 0; //@line 20337
   HEAP32[$219 >> 2] = $116; //@line 20338
   $220 = $ReallocAsyncCtx + 236 | 0; //@line 20339
   HEAP32[$220 >> 2] = $118; //@line 20340
   $221 = $ReallocAsyncCtx + 240 | 0; //@line 20341
   HEAP32[$221 >> 2] = $120; //@line 20342
   $222 = $ReallocAsyncCtx + 244 | 0; //@line 20343
   HEAP32[$222 >> 2] = $122; //@line 20344
   $223 = $ReallocAsyncCtx + 248 | 0; //@line 20345
   HEAP8[$223 >> 0] = $124; //@line 20346
   $224 = $ReallocAsyncCtx + 249 | 0; //@line 20347
   HEAP8[$224 >> 0] = $126; //@line 20348
   $225 = $ReallocAsyncCtx + 252 | 0; //@line 20349
   HEAP32[$225 >> 2] = $128; //@line 20350
   $226 = $ReallocAsyncCtx + 256 | 0; //@line 20351
   HEAP8[$226 >> 0] = $130; //@line 20352
   $227 = $ReallocAsyncCtx + 260 | 0; //@line 20353
   HEAP32[$227 >> 2] = $132; //@line 20354
   $228 = $ReallocAsyncCtx + 264 | 0; //@line 20355
   HEAP32[$228 >> 2] = $$096$be; //@line 20356
   $229 = $ReallocAsyncCtx + 268 | 0; //@line 20357
   HEAP32[$229 >> 2] = $134; //@line 20358
   sp = STACKTOP; //@line 20359
   return;
  }
  HEAP8[___async_retval >> 0] = $161; //@line 20363
  ___async_unwind = 0; //@line 20364
  HEAP32[$ReallocAsyncCtx >> 2] = 487; //@line 20365
  $162 = $ReallocAsyncCtx + 4 | 0; //@line 20366
  HEAP32[$162 >> 2] = $2; //@line 20367
  $163 = $ReallocAsyncCtx + 8 | 0; //@line 20368
  HEAP32[$163 >> 2] = $4; //@line 20369
  $164 = $ReallocAsyncCtx + 12 | 0; //@line 20370
  HEAP32[$164 >> 2] = $6; //@line 20371
  $165 = $ReallocAsyncCtx + 16 | 0; //@line 20372
  HEAP32[$165 >> 2] = $8; //@line 20373
  $166 = $ReallocAsyncCtx + 20 | 0; //@line 20374
  HEAP32[$166 >> 2] = $10; //@line 20375
  $167 = $ReallocAsyncCtx + 24 | 0; //@line 20376
  HEAP32[$167 >> 2] = $12; //@line 20377
  $168 = $ReallocAsyncCtx + 28 | 0; //@line 20378
  HEAP32[$168 >> 2] = $14; //@line 20379
  $169 = $ReallocAsyncCtx + 32 | 0; //@line 20380
  HEAP32[$169 >> 2] = $16; //@line 20381
  $170 = $ReallocAsyncCtx + 36 | 0; //@line 20382
  HEAP32[$170 >> 2] = $18; //@line 20383
  $171 = $ReallocAsyncCtx + 40 | 0; //@line 20384
  HEAP32[$171 >> 2] = $20; //@line 20385
  $172 = $ReallocAsyncCtx + 44 | 0; //@line 20386
  HEAP32[$172 >> 2] = $22; //@line 20387
  $173 = $ReallocAsyncCtx + 48 | 0; //@line 20388
  HEAP32[$173 >> 2] = $24; //@line 20389
  $174 = $ReallocAsyncCtx + 52 | 0; //@line 20390
  HEAP32[$174 >> 2] = $26; //@line 20391
  $175 = $ReallocAsyncCtx + 56 | 0; //@line 20392
  HEAP32[$175 >> 2] = $28; //@line 20393
  $176 = $ReallocAsyncCtx + 60 | 0; //@line 20394
  HEAP32[$176 >> 2] = $30; //@line 20395
  $177 = $ReallocAsyncCtx + 64 | 0; //@line 20396
  HEAP32[$177 >> 2] = $32; //@line 20397
  $178 = $ReallocAsyncCtx + 68 | 0; //@line 20398
  HEAP32[$178 >> 2] = $34; //@line 20399
  $179 = $ReallocAsyncCtx + 72 | 0; //@line 20400
  HEAP32[$179 >> 2] = $36; //@line 20401
  $180 = $ReallocAsyncCtx + 76 | 0; //@line 20402
  HEAP32[$180 >> 2] = $38; //@line 20403
  $181 = $ReallocAsyncCtx + 80 | 0; //@line 20404
  HEAP32[$181 >> 2] = $40; //@line 20405
  $182 = $ReallocAsyncCtx + 84 | 0; //@line 20406
  HEAP32[$182 >> 2] = $42; //@line 20407
  $183 = $ReallocAsyncCtx + 88 | 0; //@line 20408
  HEAP32[$183 >> 2] = $44; //@line 20409
  $184 = $ReallocAsyncCtx + 92 | 0; //@line 20410
  HEAP32[$184 >> 2] = $46; //@line 20411
  $185 = $ReallocAsyncCtx + 96 | 0; //@line 20412
  HEAP32[$185 >> 2] = $48; //@line 20413
  $186 = $ReallocAsyncCtx + 100 | 0; //@line 20414
  HEAP32[$186 >> 2] = $50; //@line 20415
  $187 = $ReallocAsyncCtx + 104 | 0; //@line 20416
  HEAP32[$187 >> 2] = $52; //@line 20417
  $188 = $ReallocAsyncCtx + 108 | 0; //@line 20418
  HEAP32[$188 >> 2] = $54; //@line 20419
  $189 = $ReallocAsyncCtx + 112 | 0; //@line 20420
  HEAP32[$189 >> 2] = $56; //@line 20421
  $190 = $ReallocAsyncCtx + 116 | 0; //@line 20422
  HEAP32[$190 >> 2] = $60; //@line 20423
  $191 = $ReallocAsyncCtx + 120 | 0; //@line 20424
  HEAP32[$191 >> 2] = $148; //@line 20425
  $192 = $ReallocAsyncCtx + 124 | 0; //@line 20426
  HEAP32[$192 >> 2] = $62; //@line 20427
  $193 = $ReallocAsyncCtx + 128 | 0; //@line 20428
  HEAP32[$193 >> 2] = $64; //@line 20429
  $194 = $ReallocAsyncCtx + 132 | 0; //@line 20430
  HEAP32[$194 >> 2] = $66; //@line 20431
  $195 = $ReallocAsyncCtx + 136 | 0; //@line 20432
  HEAP32[$195 >> 2] = $68; //@line 20433
  $196 = $ReallocAsyncCtx + 140 | 0; //@line 20434
  HEAP32[$196 >> 2] = $70; //@line 20435
  $197 = $ReallocAsyncCtx + 144 | 0; //@line 20436
  HEAP32[$197 >> 2] = $72; //@line 20437
  $198 = $ReallocAsyncCtx + 148 | 0; //@line 20438
  HEAP32[$198 >> 2] = $74; //@line 20439
  $199 = $ReallocAsyncCtx + 152 | 0; //@line 20440
  HEAP32[$199 >> 2] = $76; //@line 20441
  $200 = $ReallocAsyncCtx + 156 | 0; //@line 20442
  HEAP32[$200 >> 2] = $78; //@line 20443
  $201 = $ReallocAsyncCtx + 160 | 0; //@line 20444
  HEAP32[$201 >> 2] = $80; //@line 20445
  $202 = $ReallocAsyncCtx + 164 | 0; //@line 20446
  HEAP32[$202 >> 2] = $82; //@line 20447
  $203 = $ReallocAsyncCtx + 168 | 0; //@line 20448
  HEAP32[$203 >> 2] = $84; //@line 20449
  $204 = $ReallocAsyncCtx + 172 | 0; //@line 20450
  HEAP32[$204 >> 2] = $86; //@line 20451
  $205 = $ReallocAsyncCtx + 176 | 0; //@line 20452
  HEAP32[$205 >> 2] = $88; //@line 20453
  $206 = $ReallocAsyncCtx + 180 | 0; //@line 20454
  HEAP32[$206 >> 2] = $90; //@line 20455
  $207 = $ReallocAsyncCtx + 184 | 0; //@line 20456
  HEAP32[$207 >> 2] = $92; //@line 20457
  $208 = $ReallocAsyncCtx + 188 | 0; //@line 20458
  HEAP32[$208 >> 2] = $94; //@line 20459
  $209 = $ReallocAsyncCtx + 192 | 0; //@line 20460
  HEAP32[$209 >> 2] = $96; //@line 20461
  $210 = $ReallocAsyncCtx + 196 | 0; //@line 20462
  HEAP32[$210 >> 2] = $98; //@line 20463
  $211 = $ReallocAsyncCtx + 200 | 0; //@line 20464
  HEAP32[$211 >> 2] = $100; //@line 20465
  $212 = $ReallocAsyncCtx + 204 | 0; //@line 20466
  HEAP32[$212 >> 2] = $102; //@line 20467
  $213 = $ReallocAsyncCtx + 208 | 0; //@line 20468
  HEAP32[$213 >> 2] = $104; //@line 20469
  $214 = $ReallocAsyncCtx + 212 | 0; //@line 20470
  HEAP32[$214 >> 2] = $106; //@line 20471
  $215 = $ReallocAsyncCtx + 216 | 0; //@line 20472
  HEAP32[$215 >> 2] = $108; //@line 20473
  $216 = $ReallocAsyncCtx + 220 | 0; //@line 20474
  HEAP32[$216 >> 2] = $110; //@line 20475
  $217 = $ReallocAsyncCtx + 224 | 0; //@line 20476
  HEAP32[$217 >> 2] = $112; //@line 20477
  $218 = $ReallocAsyncCtx + 228 | 0; //@line 20478
  HEAP32[$218 >> 2] = $114; //@line 20479
  $219 = $ReallocAsyncCtx + 232 | 0; //@line 20480
  HEAP32[$219 >> 2] = $116; //@line 20481
  $220 = $ReallocAsyncCtx + 236 | 0; //@line 20482
  HEAP32[$220 >> 2] = $118; //@line 20483
  $221 = $ReallocAsyncCtx + 240 | 0; //@line 20484
  HEAP32[$221 >> 2] = $120; //@line 20485
  $222 = $ReallocAsyncCtx + 244 | 0; //@line 20486
  HEAP32[$222 >> 2] = $122; //@line 20487
  $223 = $ReallocAsyncCtx + 248 | 0; //@line 20488
  HEAP8[$223 >> 0] = $124; //@line 20489
  $224 = $ReallocAsyncCtx + 249 | 0; //@line 20490
  HEAP8[$224 >> 0] = $126; //@line 20491
  $225 = $ReallocAsyncCtx + 252 | 0; //@line 20492
  HEAP32[$225 >> 2] = $128; //@line 20493
  $226 = $ReallocAsyncCtx + 256 | 0; //@line 20494
  HEAP8[$226 >> 0] = $130; //@line 20495
  $227 = $ReallocAsyncCtx + 260 | 0; //@line 20496
  HEAP32[$227 >> 2] = $132; //@line 20497
  $228 = $ReallocAsyncCtx + 264 | 0; //@line 20498
  HEAP32[$228 >> 2] = $$096$be; //@line 20499
  $229 = $ReallocAsyncCtx + 268 | 0; //@line 20500
  HEAP32[$229 >> 2] = $134; //@line 20501
  sp = STACKTOP; //@line 20502
  return;
 } else if ((label | 0) == 9) {
  $247 = HEAP8[$120 + ($137 & 255) >> 0] | 0; //@line 20508
  HEAP8[$28 >> 0] = ($247 & 255) >>> 4 & 7; //@line 20513
  HEAP8[$18 >> 0] = $247 & 15; //@line 20515
  $266 = $$0$be + 5 << 24 >> 24; //@line 20529
  HEAP32[$30 >> 2] = (HEAPU8[$120 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$120 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$120 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 20537
  $276 = HEAP32[(HEAP32[$48 >> 2] | 0) + 40 >> 2] | 0; //@line 20540
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(268) | 0; //@line 20541
  $277 = FUNCTION_TABLE_iii[$276 & 31]($134, $40) | 0; //@line 20542
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 488; //@line 20545
   $278 = $ReallocAsyncCtx2 + 4 | 0; //@line 20546
   HEAP32[$278 >> 2] = $2; //@line 20547
   $279 = $ReallocAsyncCtx2 + 8 | 0; //@line 20548
   HEAP32[$279 >> 2] = $4; //@line 20549
   $280 = $ReallocAsyncCtx2 + 12 | 0; //@line 20550
   HEAP32[$280 >> 2] = $6; //@line 20551
   $281 = $ReallocAsyncCtx2 + 16 | 0; //@line 20552
   HEAP32[$281 >> 2] = $8; //@line 20553
   $282 = $ReallocAsyncCtx2 + 20 | 0; //@line 20554
   HEAP32[$282 >> 2] = $10; //@line 20555
   $283 = $ReallocAsyncCtx2 + 24 | 0; //@line 20556
   HEAP32[$283 >> 2] = $12; //@line 20557
   $284 = $ReallocAsyncCtx2 + 28 | 0; //@line 20558
   HEAP32[$284 >> 2] = $14; //@line 20559
   $285 = $ReallocAsyncCtx2 + 32 | 0; //@line 20560
   HEAP32[$285 >> 2] = $16; //@line 20561
   $286 = $ReallocAsyncCtx2 + 36 | 0; //@line 20562
   HEAP32[$286 >> 2] = $18; //@line 20563
   $287 = $ReallocAsyncCtx2 + 40 | 0; //@line 20564
   HEAP32[$287 >> 2] = $20; //@line 20565
   $288 = $ReallocAsyncCtx2 + 44 | 0; //@line 20566
   HEAP32[$288 >> 2] = $22; //@line 20567
   $289 = $ReallocAsyncCtx2 + 48 | 0; //@line 20568
   HEAP32[$289 >> 2] = $24; //@line 20569
   $290 = $ReallocAsyncCtx2 + 52 | 0; //@line 20570
   HEAP32[$290 >> 2] = $26; //@line 20571
   $291 = $ReallocAsyncCtx2 + 56 | 0; //@line 20572
   HEAP32[$291 >> 2] = $28; //@line 20573
   $292 = $ReallocAsyncCtx2 + 60 | 0; //@line 20574
   HEAP32[$292 >> 2] = $30; //@line 20575
   $293 = $ReallocAsyncCtx2 + 64 | 0; //@line 20576
   HEAP32[$293 >> 2] = $32; //@line 20577
   $294 = $ReallocAsyncCtx2 + 68 | 0; //@line 20578
   HEAP32[$294 >> 2] = $34; //@line 20579
   $295 = $ReallocAsyncCtx2 + 72 | 0; //@line 20580
   HEAP32[$295 >> 2] = $36; //@line 20581
   $296 = $ReallocAsyncCtx2 + 76 | 0; //@line 20582
   HEAP32[$296 >> 2] = $38; //@line 20583
   $297 = $ReallocAsyncCtx2 + 80 | 0; //@line 20584
   HEAP32[$297 >> 2] = $40; //@line 20585
   $298 = $ReallocAsyncCtx2 + 84 | 0; //@line 20586
   HEAP32[$298 >> 2] = $42; //@line 20587
   $299 = $ReallocAsyncCtx2 + 88 | 0; //@line 20588
   HEAP32[$299 >> 2] = $44; //@line 20589
   $300 = $ReallocAsyncCtx2 + 92 | 0; //@line 20590
   HEAP32[$300 >> 2] = $46; //@line 20591
   $301 = $ReallocAsyncCtx2 + 96 | 0; //@line 20592
   HEAP8[$301 >> 0] = $266; //@line 20593
   $302 = $ReallocAsyncCtx2 + 100 | 0; //@line 20594
   HEAP32[$302 >> 2] = $50; //@line 20595
   $303 = $ReallocAsyncCtx2 + 104 | 0; //@line 20596
   HEAP32[$303 >> 2] = $52; //@line 20597
   $304 = $ReallocAsyncCtx2 + 108 | 0; //@line 20598
   HEAP32[$304 >> 2] = $54; //@line 20599
   $305 = $ReallocAsyncCtx2 + 112 | 0; //@line 20600
   HEAP32[$305 >> 2] = $56; //@line 20601
   $306 = $ReallocAsyncCtx2 + 116 | 0; //@line 20602
   HEAP32[$306 >> 2] = $48; //@line 20603
   $307 = $ReallocAsyncCtx2 + 120 | 0; //@line 20604
   HEAP32[$307 >> 2] = $60; //@line 20605
   $308 = $ReallocAsyncCtx2 + 124 | 0; //@line 20606
   HEAP32[$308 >> 2] = $62; //@line 20607
   $309 = $ReallocAsyncCtx2 + 128 | 0; //@line 20608
   HEAP32[$309 >> 2] = $64; //@line 20609
   $310 = $ReallocAsyncCtx2 + 132 | 0; //@line 20610
   HEAP32[$310 >> 2] = $66; //@line 20611
   $311 = $ReallocAsyncCtx2 + 136 | 0; //@line 20612
   HEAP32[$311 >> 2] = $68; //@line 20613
   $312 = $ReallocAsyncCtx2 + 140 | 0; //@line 20614
   HEAP32[$312 >> 2] = $70; //@line 20615
   $313 = $ReallocAsyncCtx2 + 144 | 0; //@line 20616
   HEAP32[$313 >> 2] = $72; //@line 20617
   $314 = $ReallocAsyncCtx2 + 148 | 0; //@line 20618
   HEAP32[$314 >> 2] = $74; //@line 20619
   $315 = $ReallocAsyncCtx2 + 152 | 0; //@line 20620
   HEAP32[$315 >> 2] = $76; //@line 20621
   $316 = $ReallocAsyncCtx2 + 156 | 0; //@line 20622
   HEAP32[$316 >> 2] = $78; //@line 20623
   $317 = $ReallocAsyncCtx2 + 160 | 0; //@line 20624
   HEAP32[$317 >> 2] = $80; //@line 20625
   $318 = $ReallocAsyncCtx2 + 164 | 0; //@line 20626
   HEAP32[$318 >> 2] = $82; //@line 20627
   $319 = $ReallocAsyncCtx2 + 168 | 0; //@line 20628
   HEAP32[$319 >> 2] = $84; //@line 20629
   $320 = $ReallocAsyncCtx2 + 172 | 0; //@line 20630
   HEAP32[$320 >> 2] = $86; //@line 20631
   $321 = $ReallocAsyncCtx2 + 176 | 0; //@line 20632
   HEAP32[$321 >> 2] = $88; //@line 20633
   $322 = $ReallocAsyncCtx2 + 180 | 0; //@line 20634
   HEAP32[$322 >> 2] = $90; //@line 20635
   $323 = $ReallocAsyncCtx2 + 184 | 0; //@line 20636
   HEAP32[$323 >> 2] = $92; //@line 20637
   $324 = $ReallocAsyncCtx2 + 188 | 0; //@line 20638
   HEAP32[$324 >> 2] = $94; //@line 20639
   $325 = $ReallocAsyncCtx2 + 192 | 0; //@line 20640
   HEAP32[$325 >> 2] = $96; //@line 20641
   $326 = $ReallocAsyncCtx2 + 196 | 0; //@line 20642
   HEAP32[$326 >> 2] = $98; //@line 20643
   $327 = $ReallocAsyncCtx2 + 200 | 0; //@line 20644
   HEAP32[$327 >> 2] = $100; //@line 20645
   $328 = $ReallocAsyncCtx2 + 204 | 0; //@line 20646
   HEAP32[$328 >> 2] = $102; //@line 20647
   $329 = $ReallocAsyncCtx2 + 208 | 0; //@line 20648
   HEAP32[$329 >> 2] = $104; //@line 20649
   $330 = $ReallocAsyncCtx2 + 212 | 0; //@line 20650
   HEAP32[$330 >> 2] = $106; //@line 20651
   $331 = $ReallocAsyncCtx2 + 216 | 0; //@line 20652
   HEAP32[$331 >> 2] = $108; //@line 20653
   $332 = $ReallocAsyncCtx2 + 220 | 0; //@line 20654
   HEAP32[$332 >> 2] = $110; //@line 20655
   $333 = $ReallocAsyncCtx2 + 224 | 0; //@line 20656
   HEAP32[$333 >> 2] = $112; //@line 20657
   $334 = $ReallocAsyncCtx2 + 228 | 0; //@line 20658
   HEAP32[$334 >> 2] = $114; //@line 20659
   $335 = $ReallocAsyncCtx2 + 232 | 0; //@line 20660
   HEAP32[$335 >> 2] = $116; //@line 20661
   $336 = $ReallocAsyncCtx2 + 236 | 0; //@line 20662
   HEAP32[$336 >> 2] = $118; //@line 20663
   $337 = $ReallocAsyncCtx2 + 240 | 0; //@line 20664
   HEAP32[$337 >> 2] = $120; //@line 20665
   $338 = $ReallocAsyncCtx2 + 244 | 0; //@line 20666
   HEAP32[$338 >> 2] = $122; //@line 20667
   $339 = $ReallocAsyncCtx2 + 248 | 0; //@line 20668
   HEAP8[$339 >> 0] = $124; //@line 20669
   $340 = $ReallocAsyncCtx2 + 249 | 0; //@line 20670
   HEAP8[$340 >> 0] = $126; //@line 20671
   $341 = $ReallocAsyncCtx2 + 252 | 0; //@line 20672
   HEAP32[$341 >> 2] = $128; //@line 20673
   $342 = $ReallocAsyncCtx2 + 256 | 0; //@line 20674
   HEAP8[$342 >> 0] = $130; //@line 20675
   $343 = $ReallocAsyncCtx2 + 260 | 0; //@line 20676
   HEAP32[$343 >> 2] = $132; //@line 20677
   $344 = $ReallocAsyncCtx2 + 264 | 0; //@line 20678
   HEAP32[$344 >> 2] = $134; //@line 20679
   sp = STACKTOP; //@line 20680
   return;
  }
  HEAP8[___async_retval >> 0] = $277; //@line 20684
  ___async_unwind = 0; //@line 20685
  HEAP32[$ReallocAsyncCtx2 >> 2] = 488; //@line 20686
  $278 = $ReallocAsyncCtx2 + 4 | 0; //@line 20687
  HEAP32[$278 >> 2] = $2; //@line 20688
  $279 = $ReallocAsyncCtx2 + 8 | 0; //@line 20689
  HEAP32[$279 >> 2] = $4; //@line 20690
  $280 = $ReallocAsyncCtx2 + 12 | 0; //@line 20691
  HEAP32[$280 >> 2] = $6; //@line 20692
  $281 = $ReallocAsyncCtx2 + 16 | 0; //@line 20693
  HEAP32[$281 >> 2] = $8; //@line 20694
  $282 = $ReallocAsyncCtx2 + 20 | 0; //@line 20695
  HEAP32[$282 >> 2] = $10; //@line 20696
  $283 = $ReallocAsyncCtx2 + 24 | 0; //@line 20697
  HEAP32[$283 >> 2] = $12; //@line 20698
  $284 = $ReallocAsyncCtx2 + 28 | 0; //@line 20699
  HEAP32[$284 >> 2] = $14; //@line 20700
  $285 = $ReallocAsyncCtx2 + 32 | 0; //@line 20701
  HEAP32[$285 >> 2] = $16; //@line 20702
  $286 = $ReallocAsyncCtx2 + 36 | 0; //@line 20703
  HEAP32[$286 >> 2] = $18; //@line 20704
  $287 = $ReallocAsyncCtx2 + 40 | 0; //@line 20705
  HEAP32[$287 >> 2] = $20; //@line 20706
  $288 = $ReallocAsyncCtx2 + 44 | 0; //@line 20707
  HEAP32[$288 >> 2] = $22; //@line 20708
  $289 = $ReallocAsyncCtx2 + 48 | 0; //@line 20709
  HEAP32[$289 >> 2] = $24; //@line 20710
  $290 = $ReallocAsyncCtx2 + 52 | 0; //@line 20711
  HEAP32[$290 >> 2] = $26; //@line 20712
  $291 = $ReallocAsyncCtx2 + 56 | 0; //@line 20713
  HEAP32[$291 >> 2] = $28; //@line 20714
  $292 = $ReallocAsyncCtx2 + 60 | 0; //@line 20715
  HEAP32[$292 >> 2] = $30; //@line 20716
  $293 = $ReallocAsyncCtx2 + 64 | 0; //@line 20717
  HEAP32[$293 >> 2] = $32; //@line 20718
  $294 = $ReallocAsyncCtx2 + 68 | 0; //@line 20719
  HEAP32[$294 >> 2] = $34; //@line 20720
  $295 = $ReallocAsyncCtx2 + 72 | 0; //@line 20721
  HEAP32[$295 >> 2] = $36; //@line 20722
  $296 = $ReallocAsyncCtx2 + 76 | 0; //@line 20723
  HEAP32[$296 >> 2] = $38; //@line 20724
  $297 = $ReallocAsyncCtx2 + 80 | 0; //@line 20725
  HEAP32[$297 >> 2] = $40; //@line 20726
  $298 = $ReallocAsyncCtx2 + 84 | 0; //@line 20727
  HEAP32[$298 >> 2] = $42; //@line 20728
  $299 = $ReallocAsyncCtx2 + 88 | 0; //@line 20729
  HEAP32[$299 >> 2] = $44; //@line 20730
  $300 = $ReallocAsyncCtx2 + 92 | 0; //@line 20731
  HEAP32[$300 >> 2] = $46; //@line 20732
  $301 = $ReallocAsyncCtx2 + 96 | 0; //@line 20733
  HEAP8[$301 >> 0] = $266; //@line 20734
  $302 = $ReallocAsyncCtx2 + 100 | 0; //@line 20735
  HEAP32[$302 >> 2] = $50; //@line 20736
  $303 = $ReallocAsyncCtx2 + 104 | 0; //@line 20737
  HEAP32[$303 >> 2] = $52; //@line 20738
  $304 = $ReallocAsyncCtx2 + 108 | 0; //@line 20739
  HEAP32[$304 >> 2] = $54; //@line 20740
  $305 = $ReallocAsyncCtx2 + 112 | 0; //@line 20741
  HEAP32[$305 >> 2] = $56; //@line 20742
  $306 = $ReallocAsyncCtx2 + 116 | 0; //@line 20743
  HEAP32[$306 >> 2] = $48; //@line 20744
  $307 = $ReallocAsyncCtx2 + 120 | 0; //@line 20745
  HEAP32[$307 >> 2] = $60; //@line 20746
  $308 = $ReallocAsyncCtx2 + 124 | 0; //@line 20747
  HEAP32[$308 >> 2] = $62; //@line 20748
  $309 = $ReallocAsyncCtx2 + 128 | 0; //@line 20749
  HEAP32[$309 >> 2] = $64; //@line 20750
  $310 = $ReallocAsyncCtx2 + 132 | 0; //@line 20751
  HEAP32[$310 >> 2] = $66; //@line 20752
  $311 = $ReallocAsyncCtx2 + 136 | 0; //@line 20753
  HEAP32[$311 >> 2] = $68; //@line 20754
  $312 = $ReallocAsyncCtx2 + 140 | 0; //@line 20755
  HEAP32[$312 >> 2] = $70; //@line 20756
  $313 = $ReallocAsyncCtx2 + 144 | 0; //@line 20757
  HEAP32[$313 >> 2] = $72; //@line 20758
  $314 = $ReallocAsyncCtx2 + 148 | 0; //@line 20759
  HEAP32[$314 >> 2] = $74; //@line 20760
  $315 = $ReallocAsyncCtx2 + 152 | 0; //@line 20761
  HEAP32[$315 >> 2] = $76; //@line 20762
  $316 = $ReallocAsyncCtx2 + 156 | 0; //@line 20763
  HEAP32[$316 >> 2] = $78; //@line 20764
  $317 = $ReallocAsyncCtx2 + 160 | 0; //@line 20765
  HEAP32[$317 >> 2] = $80; //@line 20766
  $318 = $ReallocAsyncCtx2 + 164 | 0; //@line 20767
  HEAP32[$318 >> 2] = $82; //@line 20768
  $319 = $ReallocAsyncCtx2 + 168 | 0; //@line 20769
  HEAP32[$319 >> 2] = $84; //@line 20770
  $320 = $ReallocAsyncCtx2 + 172 | 0; //@line 20771
  HEAP32[$320 >> 2] = $86; //@line 20772
  $321 = $ReallocAsyncCtx2 + 176 | 0; //@line 20773
  HEAP32[$321 >> 2] = $88; //@line 20774
  $322 = $ReallocAsyncCtx2 + 180 | 0; //@line 20775
  HEAP32[$322 >> 2] = $90; //@line 20776
  $323 = $ReallocAsyncCtx2 + 184 | 0; //@line 20777
  HEAP32[$323 >> 2] = $92; //@line 20778
  $324 = $ReallocAsyncCtx2 + 188 | 0; //@line 20779
  HEAP32[$324 >> 2] = $94; //@line 20780
  $325 = $ReallocAsyncCtx2 + 192 | 0; //@line 20781
  HEAP32[$325 >> 2] = $96; //@line 20782
  $326 = $ReallocAsyncCtx2 + 196 | 0; //@line 20783
  HEAP32[$326 >> 2] = $98; //@line 20784
  $327 = $ReallocAsyncCtx2 + 200 | 0; //@line 20785
  HEAP32[$327 >> 2] = $100; //@line 20786
  $328 = $ReallocAsyncCtx2 + 204 | 0; //@line 20787
  HEAP32[$328 >> 2] = $102; //@line 20788
  $329 = $ReallocAsyncCtx2 + 208 | 0; //@line 20789
  HEAP32[$329 >> 2] = $104; //@line 20790
  $330 = $ReallocAsyncCtx2 + 212 | 0; //@line 20791
  HEAP32[$330 >> 2] = $106; //@line 20792
  $331 = $ReallocAsyncCtx2 + 216 | 0; //@line 20793
  HEAP32[$331 >> 2] = $108; //@line 20794
  $332 = $ReallocAsyncCtx2 + 220 | 0; //@line 20795
  HEAP32[$332 >> 2] = $110; //@line 20796
  $333 = $ReallocAsyncCtx2 + 224 | 0; //@line 20797
  HEAP32[$333 >> 2] = $112; //@line 20798
  $334 = $ReallocAsyncCtx2 + 228 | 0; //@line 20799
  HEAP32[$334 >> 2] = $114; //@line 20800
  $335 = $ReallocAsyncCtx2 + 232 | 0; //@line 20801
  HEAP32[$335 >> 2] = $116; //@line 20802
  $336 = $ReallocAsyncCtx2 + 236 | 0; //@line 20803
  HEAP32[$336 >> 2] = $118; //@line 20804
  $337 = $ReallocAsyncCtx2 + 240 | 0; //@line 20805
  HEAP32[$337 >> 2] = $120; //@line 20806
  $338 = $ReallocAsyncCtx2 + 244 | 0; //@line 20807
  HEAP32[$338 >> 2] = $122; //@line 20808
  $339 = $ReallocAsyncCtx2 + 248 | 0; //@line 20809
  HEAP8[$339 >> 0] = $124; //@line 20810
  $340 = $ReallocAsyncCtx2 + 249 | 0; //@line 20811
  HEAP8[$340 >> 0] = $126; //@line 20812
  $341 = $ReallocAsyncCtx2 + 252 | 0; //@line 20813
  HEAP32[$341 >> 2] = $128; //@line 20814
  $342 = $ReallocAsyncCtx2 + 256 | 0; //@line 20815
  HEAP8[$342 >> 0] = $130; //@line 20816
  $343 = $ReallocAsyncCtx2 + 260 | 0; //@line 20817
  HEAP32[$343 >> 2] = $132; //@line 20818
  $344 = $ReallocAsyncCtx2 + 264 | 0; //@line 20819
  HEAP32[$344 >> 2] = $134; //@line 20820
  sp = STACKTOP; //@line 20821
  return;
 } else if ((label | 0) == 14) {
  HEAP8[$102 >> 0] = HEAP8[$120 + ($137 & 255) >> 0] | 0; //@line 20829
  HEAP32[$108 >> 2] = $22; //@line 20830
  HEAP32[$114 >> 2] = (HEAPU8[$120 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$120 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$120 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 20851
  HEAP32[$118 >> 2] = 0; //@line 20852
  $385 = $$0$be + 6 << 24 >> 24; //@line 20853
  HEAP8[$12 >> 0] = HEAP8[$120 + ($$0$be + 5 & 255) >> 0] | 0; //@line 20857
  $391 = HEAP32[(HEAP32[$2 >> 2] | 0) + 8 >> 2] | 0; //@line 20860
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(268) | 0; //@line 20861
  $392 = FUNCTION_TABLE_iii[$391 & 31]($134, $60) | 0; //@line 20862
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 489; //@line 20865
   $393 = $ReallocAsyncCtx3 + 4 | 0; //@line 20866
   HEAP32[$393 >> 2] = $2; //@line 20867
   $394 = $ReallocAsyncCtx3 + 8 | 0; //@line 20868
   HEAP32[$394 >> 2] = $4; //@line 20869
   $395 = $ReallocAsyncCtx3 + 12 | 0; //@line 20870
   HEAP32[$395 >> 2] = $6; //@line 20871
   $396 = $ReallocAsyncCtx3 + 16 | 0; //@line 20872
   HEAP32[$396 >> 2] = $8; //@line 20873
   $397 = $ReallocAsyncCtx3 + 20 | 0; //@line 20874
   HEAP32[$397 >> 2] = $10; //@line 20875
   $398 = $ReallocAsyncCtx3 + 24 | 0; //@line 20876
   HEAP32[$398 >> 2] = $12; //@line 20877
   $399 = $ReallocAsyncCtx3 + 28 | 0; //@line 20878
   HEAP32[$399 >> 2] = $14; //@line 20879
   $400 = $ReallocAsyncCtx3 + 32 | 0; //@line 20880
   HEAP32[$400 >> 2] = $16; //@line 20881
   $401 = $ReallocAsyncCtx3 + 36 | 0; //@line 20882
   HEAP32[$401 >> 2] = $18; //@line 20883
   $402 = $ReallocAsyncCtx3 + 40 | 0; //@line 20884
   HEAP32[$402 >> 2] = $20; //@line 20885
   $403 = $ReallocAsyncCtx3 + 44 | 0; //@line 20886
   HEAP32[$403 >> 2] = $22; //@line 20887
   $404 = $ReallocAsyncCtx3 + 48 | 0; //@line 20888
   HEAP32[$404 >> 2] = $24; //@line 20889
   $405 = $ReallocAsyncCtx3 + 52 | 0; //@line 20890
   HEAP32[$405 >> 2] = $26; //@line 20891
   $406 = $ReallocAsyncCtx3 + 56 | 0; //@line 20892
   HEAP32[$406 >> 2] = $28; //@line 20893
   $407 = $ReallocAsyncCtx3 + 60 | 0; //@line 20894
   HEAP32[$407 >> 2] = $30; //@line 20895
   $408 = $ReallocAsyncCtx3 + 64 | 0; //@line 20896
   HEAP32[$408 >> 2] = $32; //@line 20897
   $409 = $ReallocAsyncCtx3 + 68 | 0; //@line 20898
   HEAP32[$409 >> 2] = $34; //@line 20899
   $410 = $ReallocAsyncCtx3 + 72 | 0; //@line 20900
   HEAP32[$410 >> 2] = $36; //@line 20901
   $411 = $ReallocAsyncCtx3 + 76 | 0; //@line 20902
   HEAP32[$411 >> 2] = $38; //@line 20903
   $412 = $ReallocAsyncCtx3 + 80 | 0; //@line 20904
   HEAP32[$412 >> 2] = $40; //@line 20905
   $413 = $ReallocAsyncCtx3 + 84 | 0; //@line 20906
   HEAP32[$413 >> 2] = $42; //@line 20907
   $414 = $ReallocAsyncCtx3 + 88 | 0; //@line 20908
   HEAP32[$414 >> 2] = $44; //@line 20909
   $415 = $ReallocAsyncCtx3 + 92 | 0; //@line 20910
   HEAP32[$415 >> 2] = $46; //@line 20911
   $416 = $ReallocAsyncCtx3 + 96 | 0; //@line 20912
   HEAP32[$416 >> 2] = $48; //@line 20913
   $417 = $ReallocAsyncCtx3 + 100 | 0; //@line 20914
   HEAP32[$417 >> 2] = $50; //@line 20915
   $418 = $ReallocAsyncCtx3 + 104 | 0; //@line 20916
   HEAP32[$418 >> 2] = $52; //@line 20917
   $419 = $ReallocAsyncCtx3 + 108 | 0; //@line 20918
   HEAP32[$419 >> 2] = $54; //@line 20919
   $420 = $ReallocAsyncCtx3 + 112 | 0; //@line 20920
   HEAP32[$420 >> 2] = $56; //@line 20921
   $421 = $ReallocAsyncCtx3 + 116 | 0; //@line 20922
   HEAP8[$421 >> 0] = $385; //@line 20923
   $422 = $ReallocAsyncCtx3 + 120 | 0; //@line 20924
   HEAP32[$422 >> 2] = $60; //@line 20925
   $423 = $ReallocAsyncCtx3 + 124 | 0; //@line 20926
   HEAP32[$423 >> 2] = $62; //@line 20927
   $424 = $ReallocAsyncCtx3 + 128 | 0; //@line 20928
   HEAP32[$424 >> 2] = $64; //@line 20929
   $425 = $ReallocAsyncCtx3 + 132 | 0; //@line 20930
   HEAP32[$425 >> 2] = $66; //@line 20931
   $426 = $ReallocAsyncCtx3 + 136 | 0; //@line 20932
   HEAP32[$426 >> 2] = $68; //@line 20933
   $427 = $ReallocAsyncCtx3 + 140 | 0; //@line 20934
   HEAP32[$427 >> 2] = $70; //@line 20935
   $428 = $ReallocAsyncCtx3 + 144 | 0; //@line 20936
   HEAP32[$428 >> 2] = $72; //@line 20937
   $429 = $ReallocAsyncCtx3 + 148 | 0; //@line 20938
   HEAP32[$429 >> 2] = $74; //@line 20939
   $430 = $ReallocAsyncCtx3 + 152 | 0; //@line 20940
   HEAP32[$430 >> 2] = $76; //@line 20941
   $431 = $ReallocAsyncCtx3 + 156 | 0; //@line 20942
   HEAP32[$431 >> 2] = $78; //@line 20943
   $432 = $ReallocAsyncCtx3 + 160 | 0; //@line 20944
   HEAP32[$432 >> 2] = $80; //@line 20945
   $433 = $ReallocAsyncCtx3 + 164 | 0; //@line 20946
   HEAP32[$433 >> 2] = $82; //@line 20947
   $434 = $ReallocAsyncCtx3 + 168 | 0; //@line 20948
   HEAP32[$434 >> 2] = $84; //@line 20949
   $435 = $ReallocAsyncCtx3 + 172 | 0; //@line 20950
   HEAP32[$435 >> 2] = $86; //@line 20951
   $436 = $ReallocAsyncCtx3 + 176 | 0; //@line 20952
   HEAP32[$436 >> 2] = $88; //@line 20953
   $437 = $ReallocAsyncCtx3 + 180 | 0; //@line 20954
   HEAP32[$437 >> 2] = $90; //@line 20955
   $438 = $ReallocAsyncCtx3 + 184 | 0; //@line 20956
   HEAP32[$438 >> 2] = $92; //@line 20957
   $439 = $ReallocAsyncCtx3 + 188 | 0; //@line 20958
   HEAP32[$439 >> 2] = $94; //@line 20959
   $440 = $ReallocAsyncCtx3 + 192 | 0; //@line 20960
   HEAP32[$440 >> 2] = $96; //@line 20961
   $441 = $ReallocAsyncCtx3 + 196 | 0; //@line 20962
   HEAP32[$441 >> 2] = $98; //@line 20963
   $442 = $ReallocAsyncCtx3 + 200 | 0; //@line 20964
   HEAP32[$442 >> 2] = $100; //@line 20965
   $443 = $ReallocAsyncCtx3 + 204 | 0; //@line 20966
   HEAP32[$443 >> 2] = $102; //@line 20967
   $444 = $ReallocAsyncCtx3 + 208 | 0; //@line 20968
   HEAP32[$444 >> 2] = $104; //@line 20969
   $445 = $ReallocAsyncCtx3 + 212 | 0; //@line 20970
   HEAP32[$445 >> 2] = $106; //@line 20971
   $446 = $ReallocAsyncCtx3 + 216 | 0; //@line 20972
   HEAP32[$446 >> 2] = $108; //@line 20973
   $447 = $ReallocAsyncCtx3 + 220 | 0; //@line 20974
   HEAP32[$447 >> 2] = $110; //@line 20975
   $448 = $ReallocAsyncCtx3 + 224 | 0; //@line 20976
   HEAP32[$448 >> 2] = $112; //@line 20977
   $449 = $ReallocAsyncCtx3 + 228 | 0; //@line 20978
   HEAP32[$449 >> 2] = $114; //@line 20979
   $450 = $ReallocAsyncCtx3 + 232 | 0; //@line 20980
   HEAP32[$450 >> 2] = $116; //@line 20981
   $451 = $ReallocAsyncCtx3 + 236 | 0; //@line 20982
   HEAP32[$451 >> 2] = $118; //@line 20983
   $452 = $ReallocAsyncCtx3 + 240 | 0; //@line 20984
   HEAP32[$452 >> 2] = $120; //@line 20985
   $453 = $ReallocAsyncCtx3 + 244 | 0; //@line 20986
   HEAP32[$453 >> 2] = $122; //@line 20987
   $454 = $ReallocAsyncCtx3 + 248 | 0; //@line 20988
   HEAP8[$454 >> 0] = $124; //@line 20989
   $455 = $ReallocAsyncCtx3 + 249 | 0; //@line 20990
   HEAP8[$455 >> 0] = $126; //@line 20991
   $456 = $ReallocAsyncCtx3 + 252 | 0; //@line 20992
   HEAP32[$456 >> 2] = $128; //@line 20993
   $457 = $ReallocAsyncCtx3 + 256 | 0; //@line 20994
   HEAP8[$457 >> 0] = $130; //@line 20995
   $458 = $ReallocAsyncCtx3 + 260 | 0; //@line 20996
   HEAP32[$458 >> 2] = $132; //@line 20997
   $459 = $ReallocAsyncCtx3 + 264 | 0; //@line 20998
   HEAP32[$459 >> 2] = $134; //@line 20999
   sp = STACKTOP; //@line 21000
   return;
  }
  HEAP8[___async_retval >> 0] = $392; //@line 21004
  ___async_unwind = 0; //@line 21005
  HEAP32[$ReallocAsyncCtx3 >> 2] = 489; //@line 21006
  $393 = $ReallocAsyncCtx3 + 4 | 0; //@line 21007
  HEAP32[$393 >> 2] = $2; //@line 21008
  $394 = $ReallocAsyncCtx3 + 8 | 0; //@line 21009
  HEAP32[$394 >> 2] = $4; //@line 21010
  $395 = $ReallocAsyncCtx3 + 12 | 0; //@line 21011
  HEAP32[$395 >> 2] = $6; //@line 21012
  $396 = $ReallocAsyncCtx3 + 16 | 0; //@line 21013
  HEAP32[$396 >> 2] = $8; //@line 21014
  $397 = $ReallocAsyncCtx3 + 20 | 0; //@line 21015
  HEAP32[$397 >> 2] = $10; //@line 21016
  $398 = $ReallocAsyncCtx3 + 24 | 0; //@line 21017
  HEAP32[$398 >> 2] = $12; //@line 21018
  $399 = $ReallocAsyncCtx3 + 28 | 0; //@line 21019
  HEAP32[$399 >> 2] = $14; //@line 21020
  $400 = $ReallocAsyncCtx3 + 32 | 0; //@line 21021
  HEAP32[$400 >> 2] = $16; //@line 21022
  $401 = $ReallocAsyncCtx3 + 36 | 0; //@line 21023
  HEAP32[$401 >> 2] = $18; //@line 21024
  $402 = $ReallocAsyncCtx3 + 40 | 0; //@line 21025
  HEAP32[$402 >> 2] = $20; //@line 21026
  $403 = $ReallocAsyncCtx3 + 44 | 0; //@line 21027
  HEAP32[$403 >> 2] = $22; //@line 21028
  $404 = $ReallocAsyncCtx3 + 48 | 0; //@line 21029
  HEAP32[$404 >> 2] = $24; //@line 21030
  $405 = $ReallocAsyncCtx3 + 52 | 0; //@line 21031
  HEAP32[$405 >> 2] = $26; //@line 21032
  $406 = $ReallocAsyncCtx3 + 56 | 0; //@line 21033
  HEAP32[$406 >> 2] = $28; //@line 21034
  $407 = $ReallocAsyncCtx3 + 60 | 0; //@line 21035
  HEAP32[$407 >> 2] = $30; //@line 21036
  $408 = $ReallocAsyncCtx3 + 64 | 0; //@line 21037
  HEAP32[$408 >> 2] = $32; //@line 21038
  $409 = $ReallocAsyncCtx3 + 68 | 0; //@line 21039
  HEAP32[$409 >> 2] = $34; //@line 21040
  $410 = $ReallocAsyncCtx3 + 72 | 0; //@line 21041
  HEAP32[$410 >> 2] = $36; //@line 21042
  $411 = $ReallocAsyncCtx3 + 76 | 0; //@line 21043
  HEAP32[$411 >> 2] = $38; //@line 21044
  $412 = $ReallocAsyncCtx3 + 80 | 0; //@line 21045
  HEAP32[$412 >> 2] = $40; //@line 21046
  $413 = $ReallocAsyncCtx3 + 84 | 0; //@line 21047
  HEAP32[$413 >> 2] = $42; //@line 21048
  $414 = $ReallocAsyncCtx3 + 88 | 0; //@line 21049
  HEAP32[$414 >> 2] = $44; //@line 21050
  $415 = $ReallocAsyncCtx3 + 92 | 0; //@line 21051
  HEAP32[$415 >> 2] = $46; //@line 21052
  $416 = $ReallocAsyncCtx3 + 96 | 0; //@line 21053
  HEAP32[$416 >> 2] = $48; //@line 21054
  $417 = $ReallocAsyncCtx3 + 100 | 0; //@line 21055
  HEAP32[$417 >> 2] = $50; //@line 21056
  $418 = $ReallocAsyncCtx3 + 104 | 0; //@line 21057
  HEAP32[$418 >> 2] = $52; //@line 21058
  $419 = $ReallocAsyncCtx3 + 108 | 0; //@line 21059
  HEAP32[$419 >> 2] = $54; //@line 21060
  $420 = $ReallocAsyncCtx3 + 112 | 0; //@line 21061
  HEAP32[$420 >> 2] = $56; //@line 21062
  $421 = $ReallocAsyncCtx3 + 116 | 0; //@line 21063
  HEAP8[$421 >> 0] = $385; //@line 21064
  $422 = $ReallocAsyncCtx3 + 120 | 0; //@line 21065
  HEAP32[$422 >> 2] = $60; //@line 21066
  $423 = $ReallocAsyncCtx3 + 124 | 0; //@line 21067
  HEAP32[$423 >> 2] = $62; //@line 21068
  $424 = $ReallocAsyncCtx3 + 128 | 0; //@line 21069
  HEAP32[$424 >> 2] = $64; //@line 21070
  $425 = $ReallocAsyncCtx3 + 132 | 0; //@line 21071
  HEAP32[$425 >> 2] = $66; //@line 21072
  $426 = $ReallocAsyncCtx3 + 136 | 0; //@line 21073
  HEAP32[$426 >> 2] = $68; //@line 21074
  $427 = $ReallocAsyncCtx3 + 140 | 0; //@line 21075
  HEAP32[$427 >> 2] = $70; //@line 21076
  $428 = $ReallocAsyncCtx3 + 144 | 0; //@line 21077
  HEAP32[$428 >> 2] = $72; //@line 21078
  $429 = $ReallocAsyncCtx3 + 148 | 0; //@line 21079
  HEAP32[$429 >> 2] = $74; //@line 21080
  $430 = $ReallocAsyncCtx3 + 152 | 0; //@line 21081
  HEAP32[$430 >> 2] = $76; //@line 21082
  $431 = $ReallocAsyncCtx3 + 156 | 0; //@line 21083
  HEAP32[$431 >> 2] = $78; //@line 21084
  $432 = $ReallocAsyncCtx3 + 160 | 0; //@line 21085
  HEAP32[$432 >> 2] = $80; //@line 21086
  $433 = $ReallocAsyncCtx3 + 164 | 0; //@line 21087
  HEAP32[$433 >> 2] = $82; //@line 21088
  $434 = $ReallocAsyncCtx3 + 168 | 0; //@line 21089
  HEAP32[$434 >> 2] = $84; //@line 21090
  $435 = $ReallocAsyncCtx3 + 172 | 0; //@line 21091
  HEAP32[$435 >> 2] = $86; //@line 21092
  $436 = $ReallocAsyncCtx3 + 176 | 0; //@line 21093
  HEAP32[$436 >> 2] = $88; //@line 21094
  $437 = $ReallocAsyncCtx3 + 180 | 0; //@line 21095
  HEAP32[$437 >> 2] = $90; //@line 21096
  $438 = $ReallocAsyncCtx3 + 184 | 0; //@line 21097
  HEAP32[$438 >> 2] = $92; //@line 21098
  $439 = $ReallocAsyncCtx3 + 188 | 0; //@line 21099
  HEAP32[$439 >> 2] = $94; //@line 21100
  $440 = $ReallocAsyncCtx3 + 192 | 0; //@line 21101
  HEAP32[$440 >> 2] = $96; //@line 21102
  $441 = $ReallocAsyncCtx3 + 196 | 0; //@line 21103
  HEAP32[$441 >> 2] = $98; //@line 21104
  $442 = $ReallocAsyncCtx3 + 200 | 0; //@line 21105
  HEAP32[$442 >> 2] = $100; //@line 21106
  $443 = $ReallocAsyncCtx3 + 204 | 0; //@line 21107
  HEAP32[$443 >> 2] = $102; //@line 21108
  $444 = $ReallocAsyncCtx3 + 208 | 0; //@line 21109
  HEAP32[$444 >> 2] = $104; //@line 21110
  $445 = $ReallocAsyncCtx3 + 212 | 0; //@line 21111
  HEAP32[$445 >> 2] = $106; //@line 21112
  $446 = $ReallocAsyncCtx3 + 216 | 0; //@line 21113
  HEAP32[$446 >> 2] = $108; //@line 21114
  $447 = $ReallocAsyncCtx3 + 220 | 0; //@line 21115
  HEAP32[$447 >> 2] = $110; //@line 21116
  $448 = $ReallocAsyncCtx3 + 224 | 0; //@line 21117
  HEAP32[$448 >> 2] = $112; //@line 21118
  $449 = $ReallocAsyncCtx3 + 228 | 0; //@line 21119
  HEAP32[$449 >> 2] = $114; //@line 21120
  $450 = $ReallocAsyncCtx3 + 232 | 0; //@line 21121
  HEAP32[$450 >> 2] = $116; //@line 21122
  $451 = $ReallocAsyncCtx3 + 236 | 0; //@line 21123
  HEAP32[$451 >> 2] = $118; //@line 21124
  $452 = $ReallocAsyncCtx3 + 240 | 0; //@line 21125
  HEAP32[$452 >> 2] = $120; //@line 21126
  $453 = $ReallocAsyncCtx3 + 244 | 0; //@line 21127
  HEAP32[$453 >> 2] = $122; //@line 21128
  $454 = $ReallocAsyncCtx3 + 248 | 0; //@line 21129
  HEAP8[$454 >> 0] = $124; //@line 21130
  $455 = $ReallocAsyncCtx3 + 249 | 0; //@line 21131
  HEAP8[$455 >> 0] = $126; //@line 21132
  $456 = $ReallocAsyncCtx3 + 252 | 0; //@line 21133
  HEAP32[$456 >> 2] = $128; //@line 21134
  $457 = $ReallocAsyncCtx3 + 256 | 0; //@line 21135
  HEAP8[$457 >> 0] = $130; //@line 21136
  $458 = $ReallocAsyncCtx3 + 260 | 0; //@line 21137
  HEAP32[$458 >> 2] = $132; //@line 21138
  $459 = $ReallocAsyncCtx3 + 264 | 0; //@line 21139
  HEAP32[$459 >> 2] = $134; //@line 21140
  sp = STACKTOP; //@line 21141
  return;
 } else if ((label | 0) == 22) {
  $490 = $$0$be + 2 << 24 >> 24; //@line 21145
  $493 = HEAP8[$120 + ($137 & 255) >> 0] | 0; //@line 21148
  HEAP8[$56 >> 0] = 0; //@line 21149
  $494 = $493 & 255; //@line 21150
  HEAP8[$42 >> 0] = $494 >>> 5 & 1; //@line 21154
  if ($494 & 16 | 0) {
   HEAP8[$56 >> 0] = 1; //@line 21158
  }
  HEAP8[$76 >> 0] = $494 & 15; //@line 21162
  $503 = HEAP32[(HEAP32[$66 >> 2] | 0) + 44 >> 2] | 0; //@line 21165
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(272) | 0; //@line 21166
  $504 = FUNCTION_TABLE_iii[$503 & 31]($134, $16) | 0; //@line 21167
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 490; //@line 21170
   $505 = $ReallocAsyncCtx4 + 4 | 0; //@line 21171
   HEAP32[$505 >> 2] = $2; //@line 21172
   $506 = $ReallocAsyncCtx4 + 8 | 0; //@line 21173
   HEAP32[$506 >> 2] = $4; //@line 21174
   $507 = $ReallocAsyncCtx4 + 12 | 0; //@line 21175
   HEAP32[$507 >> 2] = $6; //@line 21176
   $508 = $ReallocAsyncCtx4 + 16 | 0; //@line 21177
   HEAP32[$508 >> 2] = $8; //@line 21178
   $509 = $ReallocAsyncCtx4 + 20 | 0; //@line 21179
   HEAP32[$509 >> 2] = $10; //@line 21180
   $510 = $ReallocAsyncCtx4 + 24 | 0; //@line 21181
   HEAP32[$510 >> 2] = $12; //@line 21182
   $511 = $ReallocAsyncCtx4 + 28 | 0; //@line 21183
   HEAP32[$511 >> 2] = $14; //@line 21184
   $512 = $ReallocAsyncCtx4 + 32 | 0; //@line 21185
   HEAP32[$512 >> 2] = $16; //@line 21186
   $513 = $ReallocAsyncCtx4 + 36 | 0; //@line 21187
   HEAP32[$513 >> 2] = $18; //@line 21188
   $514 = $ReallocAsyncCtx4 + 40 | 0; //@line 21189
   HEAP32[$514 >> 2] = $20; //@line 21190
   $515 = $ReallocAsyncCtx4 + 44 | 0; //@line 21191
   HEAP32[$515 >> 2] = $22; //@line 21192
   $516 = $ReallocAsyncCtx4 + 48 | 0; //@line 21193
   HEAP32[$516 >> 2] = $24; //@line 21194
   $517 = $ReallocAsyncCtx4 + 52 | 0; //@line 21195
   HEAP32[$517 >> 2] = $26; //@line 21196
   $518 = $ReallocAsyncCtx4 + 56 | 0; //@line 21197
   HEAP32[$518 >> 2] = $28; //@line 21198
   $519 = $ReallocAsyncCtx4 + 60 | 0; //@line 21199
   HEAP32[$519 >> 2] = $30; //@line 21200
   $520 = $ReallocAsyncCtx4 + 64 | 0; //@line 21201
   HEAP32[$520 >> 2] = $32; //@line 21202
   $521 = $ReallocAsyncCtx4 + 68 | 0; //@line 21203
   HEAP32[$521 >> 2] = $34; //@line 21204
   $522 = $ReallocAsyncCtx4 + 72 | 0; //@line 21205
   HEAP32[$522 >> 2] = $36; //@line 21206
   $523 = $ReallocAsyncCtx4 + 76 | 0; //@line 21207
   HEAP32[$523 >> 2] = $38; //@line 21208
   $524 = $ReallocAsyncCtx4 + 80 | 0; //@line 21209
   HEAP32[$524 >> 2] = $40; //@line 21210
   $525 = $ReallocAsyncCtx4 + 84 | 0; //@line 21211
   HEAP32[$525 >> 2] = $42; //@line 21212
   $526 = $ReallocAsyncCtx4 + 88 | 0; //@line 21213
   HEAP32[$526 >> 2] = $44; //@line 21214
   $527 = $ReallocAsyncCtx4 + 92 | 0; //@line 21215
   HEAP32[$527 >> 2] = $46; //@line 21216
   $528 = $ReallocAsyncCtx4 + 96 | 0; //@line 21217
   HEAP32[$528 >> 2] = $48; //@line 21218
   $529 = $ReallocAsyncCtx4 + 100 | 0; //@line 21219
   HEAP32[$529 >> 2] = $50; //@line 21220
   $530 = $ReallocAsyncCtx4 + 104 | 0; //@line 21221
   HEAP32[$530 >> 2] = $52; //@line 21222
   $531 = $ReallocAsyncCtx4 + 108 | 0; //@line 21223
   HEAP32[$531 >> 2] = $54; //@line 21224
   $532 = $ReallocAsyncCtx4 + 112 | 0; //@line 21225
   HEAP32[$532 >> 2] = $56; //@line 21226
   $533 = $ReallocAsyncCtx4 + 116 | 0; //@line 21227
   HEAP32[$533 >> 2] = $60; //@line 21228
   $534 = $ReallocAsyncCtx4 + 120 | 0; //@line 21229
   HEAP32[$534 >> 2] = $62; //@line 21230
   $535 = $ReallocAsyncCtx4 + 124 | 0; //@line 21231
   HEAP32[$535 >> 2] = $64; //@line 21232
   $536 = $ReallocAsyncCtx4 + 128 | 0; //@line 21233
   HEAP32[$536 >> 2] = $66; //@line 21234
   $537 = $ReallocAsyncCtx4 + 132 | 0; //@line 21235
   HEAP32[$537 >> 2] = $68; //@line 21236
   $538 = $ReallocAsyncCtx4 + 136 | 0; //@line 21237
   HEAP32[$538 >> 2] = $70; //@line 21238
   $539 = $ReallocAsyncCtx4 + 140 | 0; //@line 21239
   HEAP32[$539 >> 2] = $72; //@line 21240
   $540 = $ReallocAsyncCtx4 + 144 | 0; //@line 21241
   HEAP32[$540 >> 2] = $74; //@line 21242
   $541 = $ReallocAsyncCtx4 + 148 | 0; //@line 21243
   HEAP32[$541 >> 2] = $76; //@line 21244
   $542 = $ReallocAsyncCtx4 + 152 | 0; //@line 21245
   HEAP32[$542 >> 2] = $78; //@line 21246
   $543 = $ReallocAsyncCtx4 + 156 | 0; //@line 21247
   HEAP32[$543 >> 2] = $80; //@line 21248
   $544 = $ReallocAsyncCtx4 + 160 | 0; //@line 21249
   HEAP32[$544 >> 2] = $82; //@line 21250
   $545 = $ReallocAsyncCtx4 + 164 | 0; //@line 21251
   HEAP8[$545 >> 0] = $490; //@line 21252
   $546 = $ReallocAsyncCtx4 + 168 | 0; //@line 21253
   HEAP32[$546 >> 2] = $84; //@line 21254
   $547 = $ReallocAsyncCtx4 + 172 | 0; //@line 21255
   HEAP32[$547 >> 2] = $86; //@line 21256
   $548 = $ReallocAsyncCtx4 + 176 | 0; //@line 21257
   HEAP32[$548 >> 2] = $88; //@line 21258
   $549 = $ReallocAsyncCtx4 + 180 | 0; //@line 21259
   HEAP32[$549 >> 2] = $90; //@line 21260
   $550 = $ReallocAsyncCtx4 + 184 | 0; //@line 21261
   HEAP32[$550 >> 2] = $92; //@line 21262
   $551 = $ReallocAsyncCtx4 + 188 | 0; //@line 21263
   HEAP32[$551 >> 2] = $94; //@line 21264
   $552 = $ReallocAsyncCtx4 + 192 | 0; //@line 21265
   HEAP32[$552 >> 2] = $96; //@line 21266
   $553 = $ReallocAsyncCtx4 + 196 | 0; //@line 21267
   HEAP32[$553 >> 2] = $98; //@line 21268
   $554 = $ReallocAsyncCtx4 + 200 | 0; //@line 21269
   HEAP32[$554 >> 2] = $100; //@line 21270
   $555 = $ReallocAsyncCtx4 + 204 | 0; //@line 21271
   HEAP32[$555 >> 2] = $102; //@line 21272
   $556 = $ReallocAsyncCtx4 + 208 | 0; //@line 21273
   HEAP32[$556 >> 2] = $104; //@line 21274
   $557 = $ReallocAsyncCtx4 + 212 | 0; //@line 21275
   HEAP32[$557 >> 2] = $106; //@line 21276
   $558 = $ReallocAsyncCtx4 + 216 | 0; //@line 21277
   HEAP32[$558 >> 2] = $108; //@line 21278
   $559 = $ReallocAsyncCtx4 + 220 | 0; //@line 21279
   HEAP32[$559 >> 2] = $110; //@line 21280
   $560 = $ReallocAsyncCtx4 + 224 | 0; //@line 21281
   HEAP32[$560 >> 2] = $112; //@line 21282
   $561 = $ReallocAsyncCtx4 + 228 | 0; //@line 21283
   HEAP32[$561 >> 2] = $114; //@line 21284
   $562 = $ReallocAsyncCtx4 + 232 | 0; //@line 21285
   HEAP32[$562 >> 2] = $116; //@line 21286
   $563 = $ReallocAsyncCtx4 + 236 | 0; //@line 21287
   HEAP32[$563 >> 2] = $118; //@line 21288
   $564 = $ReallocAsyncCtx4 + 240 | 0; //@line 21289
   HEAP32[$564 >> 2] = $120; //@line 21290
   $565 = $ReallocAsyncCtx4 + 244 | 0; //@line 21291
   HEAP32[$565 >> 2] = $122; //@line 21292
   $566 = $ReallocAsyncCtx4 + 248 | 0; //@line 21293
   HEAP8[$566 >> 0] = $124; //@line 21294
   $567 = $ReallocAsyncCtx4 + 249 | 0; //@line 21295
   HEAP8[$567 >> 0] = $126; //@line 21296
   $568 = $ReallocAsyncCtx4 + 252 | 0; //@line 21297
   HEAP32[$568 >> 2] = $128; //@line 21298
   $569 = $ReallocAsyncCtx4 + 256 | 0; //@line 21299
   HEAP8[$569 >> 0] = $130; //@line 21300
   $570 = $ReallocAsyncCtx4 + 260 | 0; //@line 21301
   HEAP32[$570 >> 2] = $132; //@line 21302
   $571 = $ReallocAsyncCtx4 + 264 | 0; //@line 21303
   HEAP32[$571 >> 2] = $$096$be; //@line 21304
   $572 = $ReallocAsyncCtx4 + 268 | 0; //@line 21305
   HEAP32[$572 >> 2] = $134; //@line 21306
   sp = STACKTOP; //@line 21307
   return;
  }
  HEAP8[___async_retval >> 0] = $504 & 1; //@line 21312
  ___async_unwind = 0; //@line 21313
  HEAP32[$ReallocAsyncCtx4 >> 2] = 490; //@line 21314
  $505 = $ReallocAsyncCtx4 + 4 | 0; //@line 21315
  HEAP32[$505 >> 2] = $2; //@line 21316
  $506 = $ReallocAsyncCtx4 + 8 | 0; //@line 21317
  HEAP32[$506 >> 2] = $4; //@line 21318
  $507 = $ReallocAsyncCtx4 + 12 | 0; //@line 21319
  HEAP32[$507 >> 2] = $6; //@line 21320
  $508 = $ReallocAsyncCtx4 + 16 | 0; //@line 21321
  HEAP32[$508 >> 2] = $8; //@line 21322
  $509 = $ReallocAsyncCtx4 + 20 | 0; //@line 21323
  HEAP32[$509 >> 2] = $10; //@line 21324
  $510 = $ReallocAsyncCtx4 + 24 | 0; //@line 21325
  HEAP32[$510 >> 2] = $12; //@line 21326
  $511 = $ReallocAsyncCtx4 + 28 | 0; //@line 21327
  HEAP32[$511 >> 2] = $14; //@line 21328
  $512 = $ReallocAsyncCtx4 + 32 | 0; //@line 21329
  HEAP32[$512 >> 2] = $16; //@line 21330
  $513 = $ReallocAsyncCtx4 + 36 | 0; //@line 21331
  HEAP32[$513 >> 2] = $18; //@line 21332
  $514 = $ReallocAsyncCtx4 + 40 | 0; //@line 21333
  HEAP32[$514 >> 2] = $20; //@line 21334
  $515 = $ReallocAsyncCtx4 + 44 | 0; //@line 21335
  HEAP32[$515 >> 2] = $22; //@line 21336
  $516 = $ReallocAsyncCtx4 + 48 | 0; //@line 21337
  HEAP32[$516 >> 2] = $24; //@line 21338
  $517 = $ReallocAsyncCtx4 + 52 | 0; //@line 21339
  HEAP32[$517 >> 2] = $26; //@line 21340
  $518 = $ReallocAsyncCtx4 + 56 | 0; //@line 21341
  HEAP32[$518 >> 2] = $28; //@line 21342
  $519 = $ReallocAsyncCtx4 + 60 | 0; //@line 21343
  HEAP32[$519 >> 2] = $30; //@line 21344
  $520 = $ReallocAsyncCtx4 + 64 | 0; //@line 21345
  HEAP32[$520 >> 2] = $32; //@line 21346
  $521 = $ReallocAsyncCtx4 + 68 | 0; //@line 21347
  HEAP32[$521 >> 2] = $34; //@line 21348
  $522 = $ReallocAsyncCtx4 + 72 | 0; //@line 21349
  HEAP32[$522 >> 2] = $36; //@line 21350
  $523 = $ReallocAsyncCtx4 + 76 | 0; //@line 21351
  HEAP32[$523 >> 2] = $38; //@line 21352
  $524 = $ReallocAsyncCtx4 + 80 | 0; //@line 21353
  HEAP32[$524 >> 2] = $40; //@line 21354
  $525 = $ReallocAsyncCtx4 + 84 | 0; //@line 21355
  HEAP32[$525 >> 2] = $42; //@line 21356
  $526 = $ReallocAsyncCtx4 + 88 | 0; //@line 21357
  HEAP32[$526 >> 2] = $44; //@line 21358
  $527 = $ReallocAsyncCtx4 + 92 | 0; //@line 21359
  HEAP32[$527 >> 2] = $46; //@line 21360
  $528 = $ReallocAsyncCtx4 + 96 | 0; //@line 21361
  HEAP32[$528 >> 2] = $48; //@line 21362
  $529 = $ReallocAsyncCtx4 + 100 | 0; //@line 21363
  HEAP32[$529 >> 2] = $50; //@line 21364
  $530 = $ReallocAsyncCtx4 + 104 | 0; //@line 21365
  HEAP32[$530 >> 2] = $52; //@line 21366
  $531 = $ReallocAsyncCtx4 + 108 | 0; //@line 21367
  HEAP32[$531 >> 2] = $54; //@line 21368
  $532 = $ReallocAsyncCtx4 + 112 | 0; //@line 21369
  HEAP32[$532 >> 2] = $56; //@line 21370
  $533 = $ReallocAsyncCtx4 + 116 | 0; //@line 21371
  HEAP32[$533 >> 2] = $60; //@line 21372
  $534 = $ReallocAsyncCtx4 + 120 | 0; //@line 21373
  HEAP32[$534 >> 2] = $62; //@line 21374
  $535 = $ReallocAsyncCtx4 + 124 | 0; //@line 21375
  HEAP32[$535 >> 2] = $64; //@line 21376
  $536 = $ReallocAsyncCtx4 + 128 | 0; //@line 21377
  HEAP32[$536 >> 2] = $66; //@line 21378
  $537 = $ReallocAsyncCtx4 + 132 | 0; //@line 21379
  HEAP32[$537 >> 2] = $68; //@line 21380
  $538 = $ReallocAsyncCtx4 + 136 | 0; //@line 21381
  HEAP32[$538 >> 2] = $70; //@line 21382
  $539 = $ReallocAsyncCtx4 + 140 | 0; //@line 21383
  HEAP32[$539 >> 2] = $72; //@line 21384
  $540 = $ReallocAsyncCtx4 + 144 | 0; //@line 21385
  HEAP32[$540 >> 2] = $74; //@line 21386
  $541 = $ReallocAsyncCtx4 + 148 | 0; //@line 21387
  HEAP32[$541 >> 2] = $76; //@line 21388
  $542 = $ReallocAsyncCtx4 + 152 | 0; //@line 21389
  HEAP32[$542 >> 2] = $78; //@line 21390
  $543 = $ReallocAsyncCtx4 + 156 | 0; //@line 21391
  HEAP32[$543 >> 2] = $80; //@line 21392
  $544 = $ReallocAsyncCtx4 + 160 | 0; //@line 21393
  HEAP32[$544 >> 2] = $82; //@line 21394
  $545 = $ReallocAsyncCtx4 + 164 | 0; //@line 21395
  HEAP8[$545 >> 0] = $490; //@line 21396
  $546 = $ReallocAsyncCtx4 + 168 | 0; //@line 21397
  HEAP32[$546 >> 2] = $84; //@line 21398
  $547 = $ReallocAsyncCtx4 + 172 | 0; //@line 21399
  HEAP32[$547 >> 2] = $86; //@line 21400
  $548 = $ReallocAsyncCtx4 + 176 | 0; //@line 21401
  HEAP32[$548 >> 2] = $88; //@line 21402
  $549 = $ReallocAsyncCtx4 + 180 | 0; //@line 21403
  HEAP32[$549 >> 2] = $90; //@line 21404
  $550 = $ReallocAsyncCtx4 + 184 | 0; //@line 21405
  HEAP32[$550 >> 2] = $92; //@line 21406
  $551 = $ReallocAsyncCtx4 + 188 | 0; //@line 21407
  HEAP32[$551 >> 2] = $94; //@line 21408
  $552 = $ReallocAsyncCtx4 + 192 | 0; //@line 21409
  HEAP32[$552 >> 2] = $96; //@line 21410
  $553 = $ReallocAsyncCtx4 + 196 | 0; //@line 21411
  HEAP32[$553 >> 2] = $98; //@line 21412
  $554 = $ReallocAsyncCtx4 + 200 | 0; //@line 21413
  HEAP32[$554 >> 2] = $100; //@line 21414
  $555 = $ReallocAsyncCtx4 + 204 | 0; //@line 21415
  HEAP32[$555 >> 2] = $102; //@line 21416
  $556 = $ReallocAsyncCtx4 + 208 | 0; //@line 21417
  HEAP32[$556 >> 2] = $104; //@line 21418
  $557 = $ReallocAsyncCtx4 + 212 | 0; //@line 21419
  HEAP32[$557 >> 2] = $106; //@line 21420
  $558 = $ReallocAsyncCtx4 + 216 | 0; //@line 21421
  HEAP32[$558 >> 2] = $108; //@line 21422
  $559 = $ReallocAsyncCtx4 + 220 | 0; //@line 21423
  HEAP32[$559 >> 2] = $110; //@line 21424
  $560 = $ReallocAsyncCtx4 + 224 | 0; //@line 21425
  HEAP32[$560 >> 2] = $112; //@line 21426
  $561 = $ReallocAsyncCtx4 + 228 | 0; //@line 21427
  HEAP32[$561 >> 2] = $114; //@line 21428
  $562 = $ReallocAsyncCtx4 + 232 | 0; //@line 21429
  HEAP32[$562 >> 2] = $116; //@line 21430
  $563 = $ReallocAsyncCtx4 + 236 | 0; //@line 21431
  HEAP32[$563 >> 2] = $118; //@line 21432
  $564 = $ReallocAsyncCtx4 + 240 | 0; //@line 21433
  HEAP32[$564 >> 2] = $120; //@line 21434
  $565 = $ReallocAsyncCtx4 + 244 | 0; //@line 21435
  HEAP32[$565 >> 2] = $122; //@line 21436
  $566 = $ReallocAsyncCtx4 + 248 | 0; //@line 21437
  HEAP8[$566 >> 0] = $124; //@line 21438
  $567 = $ReallocAsyncCtx4 + 249 | 0; //@line 21439
  HEAP8[$567 >> 0] = $126; //@line 21440
  $568 = $ReallocAsyncCtx4 + 252 | 0; //@line 21441
  HEAP32[$568 >> 2] = $128; //@line 21442
  $569 = $ReallocAsyncCtx4 + 256 | 0; //@line 21443
  HEAP8[$569 >> 0] = $130; //@line 21444
  $570 = $ReallocAsyncCtx4 + 260 | 0; //@line 21445
  HEAP32[$570 >> 2] = $132; //@line 21446
  $571 = $ReallocAsyncCtx4 + 264 | 0; //@line 21447
  HEAP32[$571 >> 2] = $$096$be; //@line 21448
  $572 = $ReallocAsyncCtx4 + 268 | 0; //@line 21449
  HEAP32[$572 >> 2] = $134; //@line 21450
  sp = STACKTOP; //@line 21451
  return;
 } else if ((label | 0) == 27) {
  HEAP8[$104 >> 0] = HEAP8[$120 + ($137 & 255) >> 0] | 0; //@line 21459
  $590 = $$0$be + 5 << 24 >> 24; //@line 21472
  HEAP32[$100 >> 2] = (HEAPU8[$120 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$120 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$120 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 21480
  $600 = HEAP32[(HEAP32[$112 >> 2] | 0) + 48 >> 2] | 0; //@line 21483
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(268) | 0; //@line 21484
  $601 = FUNCTION_TABLE_iii[$600 & 31]($134, $14) | 0; //@line 21485
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 491; //@line 21488
   $602 = $ReallocAsyncCtx5 + 4 | 0; //@line 21489
   HEAP32[$602 >> 2] = $2; //@line 21490
   $603 = $ReallocAsyncCtx5 + 8 | 0; //@line 21491
   HEAP32[$603 >> 2] = $4; //@line 21492
   $604 = $ReallocAsyncCtx5 + 12 | 0; //@line 21493
   HEAP32[$604 >> 2] = $6; //@line 21494
   $605 = $ReallocAsyncCtx5 + 16 | 0; //@line 21495
   HEAP32[$605 >> 2] = $8; //@line 21496
   $606 = $ReallocAsyncCtx5 + 20 | 0; //@line 21497
   HEAP8[$606 >> 0] = $590; //@line 21498
   $607 = $ReallocAsyncCtx5 + 24 | 0; //@line 21499
   HEAP32[$607 >> 2] = $10; //@line 21500
   $608 = $ReallocAsyncCtx5 + 28 | 0; //@line 21501
   HEAP32[$608 >> 2] = $12; //@line 21502
   $609 = $ReallocAsyncCtx5 + 32 | 0; //@line 21503
   HEAP32[$609 >> 2] = $14; //@line 21504
   $610 = $ReallocAsyncCtx5 + 36 | 0; //@line 21505
   HEAP32[$610 >> 2] = $16; //@line 21506
   $611 = $ReallocAsyncCtx5 + 40 | 0; //@line 21507
   HEAP32[$611 >> 2] = $18; //@line 21508
   $612 = $ReallocAsyncCtx5 + 44 | 0; //@line 21509
   HEAP32[$612 >> 2] = $20; //@line 21510
   $613 = $ReallocAsyncCtx5 + 48 | 0; //@line 21511
   HEAP32[$613 >> 2] = $22; //@line 21512
   $614 = $ReallocAsyncCtx5 + 52 | 0; //@line 21513
   HEAP32[$614 >> 2] = $24; //@line 21514
   $615 = $ReallocAsyncCtx5 + 56 | 0; //@line 21515
   HEAP32[$615 >> 2] = $26; //@line 21516
   $616 = $ReallocAsyncCtx5 + 60 | 0; //@line 21517
   HEAP32[$616 >> 2] = $28; //@line 21518
   $617 = $ReallocAsyncCtx5 + 64 | 0; //@line 21519
   HEAP32[$617 >> 2] = $30; //@line 21520
   $618 = $ReallocAsyncCtx5 + 68 | 0; //@line 21521
   HEAP32[$618 >> 2] = $32; //@line 21522
   $619 = $ReallocAsyncCtx5 + 72 | 0; //@line 21523
   HEAP32[$619 >> 2] = $34; //@line 21524
   $620 = $ReallocAsyncCtx5 + 76 | 0; //@line 21525
   HEAP32[$620 >> 2] = $36; //@line 21526
   $621 = $ReallocAsyncCtx5 + 80 | 0; //@line 21527
   HEAP32[$621 >> 2] = $38; //@line 21528
   $622 = $ReallocAsyncCtx5 + 84 | 0; //@line 21529
   HEAP32[$622 >> 2] = $40; //@line 21530
   $623 = $ReallocAsyncCtx5 + 88 | 0; //@line 21531
   HEAP32[$623 >> 2] = $42; //@line 21532
   $624 = $ReallocAsyncCtx5 + 92 | 0; //@line 21533
   HEAP32[$624 >> 2] = $44; //@line 21534
   $625 = $ReallocAsyncCtx5 + 96 | 0; //@line 21535
   HEAP32[$625 >> 2] = $46; //@line 21536
   $626 = $ReallocAsyncCtx5 + 100 | 0; //@line 21537
   HEAP32[$626 >> 2] = $48; //@line 21538
   $627 = $ReallocAsyncCtx5 + 104 | 0; //@line 21539
   HEAP32[$627 >> 2] = $50; //@line 21540
   $628 = $ReallocAsyncCtx5 + 108 | 0; //@line 21541
   HEAP32[$628 >> 2] = $52; //@line 21542
   $629 = $ReallocAsyncCtx5 + 112 | 0; //@line 21543
   HEAP32[$629 >> 2] = $54; //@line 21544
   $630 = $ReallocAsyncCtx5 + 116 | 0; //@line 21545
   HEAP32[$630 >> 2] = $56; //@line 21546
   $631 = $ReallocAsyncCtx5 + 120 | 0; //@line 21547
   HEAP32[$631 >> 2] = $60; //@line 21548
   $632 = $ReallocAsyncCtx5 + 124 | 0; //@line 21549
   HEAP32[$632 >> 2] = $62; //@line 21550
   $633 = $ReallocAsyncCtx5 + 128 | 0; //@line 21551
   HEAP32[$633 >> 2] = $64; //@line 21552
   $634 = $ReallocAsyncCtx5 + 132 | 0; //@line 21553
   HEAP32[$634 >> 2] = $66; //@line 21554
   $635 = $ReallocAsyncCtx5 + 136 | 0; //@line 21555
   HEAP32[$635 >> 2] = $68; //@line 21556
   $636 = $ReallocAsyncCtx5 + 140 | 0; //@line 21557
   HEAP32[$636 >> 2] = $70; //@line 21558
   $637 = $ReallocAsyncCtx5 + 144 | 0; //@line 21559
   HEAP32[$637 >> 2] = $72; //@line 21560
   $638 = $ReallocAsyncCtx5 + 148 | 0; //@line 21561
   HEAP32[$638 >> 2] = $74; //@line 21562
   $639 = $ReallocAsyncCtx5 + 152 | 0; //@line 21563
   HEAP32[$639 >> 2] = $76; //@line 21564
   $640 = $ReallocAsyncCtx5 + 156 | 0; //@line 21565
   HEAP32[$640 >> 2] = $78; //@line 21566
   $641 = $ReallocAsyncCtx5 + 160 | 0; //@line 21567
   HEAP32[$641 >> 2] = $80; //@line 21568
   $642 = $ReallocAsyncCtx5 + 164 | 0; //@line 21569
   HEAP32[$642 >> 2] = $82; //@line 21570
   $643 = $ReallocAsyncCtx5 + 168 | 0; //@line 21571
   HEAP32[$643 >> 2] = $84; //@line 21572
   $644 = $ReallocAsyncCtx5 + 172 | 0; //@line 21573
   HEAP32[$644 >> 2] = $86; //@line 21574
   $645 = $ReallocAsyncCtx5 + 176 | 0; //@line 21575
   HEAP32[$645 >> 2] = $88; //@line 21576
   $646 = $ReallocAsyncCtx5 + 180 | 0; //@line 21577
   HEAP32[$646 >> 2] = $90; //@line 21578
   $647 = $ReallocAsyncCtx5 + 184 | 0; //@line 21579
   HEAP32[$647 >> 2] = $92; //@line 21580
   $648 = $ReallocAsyncCtx5 + 188 | 0; //@line 21581
   HEAP32[$648 >> 2] = $94; //@line 21582
   $649 = $ReallocAsyncCtx5 + 192 | 0; //@line 21583
   HEAP32[$649 >> 2] = $96; //@line 21584
   $650 = $ReallocAsyncCtx5 + 196 | 0; //@line 21585
   HEAP32[$650 >> 2] = $98; //@line 21586
   $651 = $ReallocAsyncCtx5 + 200 | 0; //@line 21587
   HEAP32[$651 >> 2] = $100; //@line 21588
   $652 = $ReallocAsyncCtx5 + 204 | 0; //@line 21589
   HEAP32[$652 >> 2] = $102; //@line 21590
   $653 = $ReallocAsyncCtx5 + 208 | 0; //@line 21591
   HEAP32[$653 >> 2] = $104; //@line 21592
   $654 = $ReallocAsyncCtx5 + 212 | 0; //@line 21593
   HEAP32[$654 >> 2] = $106; //@line 21594
   $655 = $ReallocAsyncCtx5 + 216 | 0; //@line 21595
   HEAP32[$655 >> 2] = $108; //@line 21596
   $656 = $ReallocAsyncCtx5 + 220 | 0; //@line 21597
   HEAP32[$656 >> 2] = $110; //@line 21598
   $657 = $ReallocAsyncCtx5 + 224 | 0; //@line 21599
   HEAP32[$657 >> 2] = $112; //@line 21600
   $658 = $ReallocAsyncCtx5 + 228 | 0; //@line 21601
   HEAP32[$658 >> 2] = $114; //@line 21602
   $659 = $ReallocAsyncCtx5 + 232 | 0; //@line 21603
   HEAP32[$659 >> 2] = $116; //@line 21604
   $660 = $ReallocAsyncCtx5 + 236 | 0; //@line 21605
   HEAP32[$660 >> 2] = $118; //@line 21606
   $661 = $ReallocAsyncCtx5 + 240 | 0; //@line 21607
   HEAP32[$661 >> 2] = $120; //@line 21608
   $662 = $ReallocAsyncCtx5 + 244 | 0; //@line 21609
   HEAP32[$662 >> 2] = $122; //@line 21610
   $663 = $ReallocAsyncCtx5 + 248 | 0; //@line 21611
   HEAP8[$663 >> 0] = $124; //@line 21612
   $664 = $ReallocAsyncCtx5 + 249 | 0; //@line 21613
   HEAP8[$664 >> 0] = $126; //@line 21614
   $665 = $ReallocAsyncCtx5 + 252 | 0; //@line 21615
   HEAP32[$665 >> 2] = $128; //@line 21616
   $666 = $ReallocAsyncCtx5 + 256 | 0; //@line 21617
   HEAP8[$666 >> 0] = $130; //@line 21618
   $667 = $ReallocAsyncCtx5 + 260 | 0; //@line 21619
   HEAP32[$667 >> 2] = $132; //@line 21620
   $668 = $ReallocAsyncCtx5 + 264 | 0; //@line 21621
   HEAP32[$668 >> 2] = $134; //@line 21622
   sp = STACKTOP; //@line 21623
   return;
  }
  HEAP8[___async_retval >> 0] = $601; //@line 21627
  ___async_unwind = 0; //@line 21628
  HEAP32[$ReallocAsyncCtx5 >> 2] = 491; //@line 21629
  $602 = $ReallocAsyncCtx5 + 4 | 0; //@line 21630
  HEAP32[$602 >> 2] = $2; //@line 21631
  $603 = $ReallocAsyncCtx5 + 8 | 0; //@line 21632
  HEAP32[$603 >> 2] = $4; //@line 21633
  $604 = $ReallocAsyncCtx5 + 12 | 0; //@line 21634
  HEAP32[$604 >> 2] = $6; //@line 21635
  $605 = $ReallocAsyncCtx5 + 16 | 0; //@line 21636
  HEAP32[$605 >> 2] = $8; //@line 21637
  $606 = $ReallocAsyncCtx5 + 20 | 0; //@line 21638
  HEAP8[$606 >> 0] = $590; //@line 21639
  $607 = $ReallocAsyncCtx5 + 24 | 0; //@line 21640
  HEAP32[$607 >> 2] = $10; //@line 21641
  $608 = $ReallocAsyncCtx5 + 28 | 0; //@line 21642
  HEAP32[$608 >> 2] = $12; //@line 21643
  $609 = $ReallocAsyncCtx5 + 32 | 0; //@line 21644
  HEAP32[$609 >> 2] = $14; //@line 21645
  $610 = $ReallocAsyncCtx5 + 36 | 0; //@line 21646
  HEAP32[$610 >> 2] = $16; //@line 21647
  $611 = $ReallocAsyncCtx5 + 40 | 0; //@line 21648
  HEAP32[$611 >> 2] = $18; //@line 21649
  $612 = $ReallocAsyncCtx5 + 44 | 0; //@line 21650
  HEAP32[$612 >> 2] = $20; //@line 21651
  $613 = $ReallocAsyncCtx5 + 48 | 0; //@line 21652
  HEAP32[$613 >> 2] = $22; //@line 21653
  $614 = $ReallocAsyncCtx5 + 52 | 0; //@line 21654
  HEAP32[$614 >> 2] = $24; //@line 21655
  $615 = $ReallocAsyncCtx5 + 56 | 0; //@line 21656
  HEAP32[$615 >> 2] = $26; //@line 21657
  $616 = $ReallocAsyncCtx5 + 60 | 0; //@line 21658
  HEAP32[$616 >> 2] = $28; //@line 21659
  $617 = $ReallocAsyncCtx5 + 64 | 0; //@line 21660
  HEAP32[$617 >> 2] = $30; //@line 21661
  $618 = $ReallocAsyncCtx5 + 68 | 0; //@line 21662
  HEAP32[$618 >> 2] = $32; //@line 21663
  $619 = $ReallocAsyncCtx5 + 72 | 0; //@line 21664
  HEAP32[$619 >> 2] = $34; //@line 21665
  $620 = $ReallocAsyncCtx5 + 76 | 0; //@line 21666
  HEAP32[$620 >> 2] = $36; //@line 21667
  $621 = $ReallocAsyncCtx5 + 80 | 0; //@line 21668
  HEAP32[$621 >> 2] = $38; //@line 21669
  $622 = $ReallocAsyncCtx5 + 84 | 0; //@line 21670
  HEAP32[$622 >> 2] = $40; //@line 21671
  $623 = $ReallocAsyncCtx5 + 88 | 0; //@line 21672
  HEAP32[$623 >> 2] = $42; //@line 21673
  $624 = $ReallocAsyncCtx5 + 92 | 0; //@line 21674
  HEAP32[$624 >> 2] = $44; //@line 21675
  $625 = $ReallocAsyncCtx5 + 96 | 0; //@line 21676
  HEAP32[$625 >> 2] = $46; //@line 21677
  $626 = $ReallocAsyncCtx5 + 100 | 0; //@line 21678
  HEAP32[$626 >> 2] = $48; //@line 21679
  $627 = $ReallocAsyncCtx5 + 104 | 0; //@line 21680
  HEAP32[$627 >> 2] = $50; //@line 21681
  $628 = $ReallocAsyncCtx5 + 108 | 0; //@line 21682
  HEAP32[$628 >> 2] = $52; //@line 21683
  $629 = $ReallocAsyncCtx5 + 112 | 0; //@line 21684
  HEAP32[$629 >> 2] = $54; //@line 21685
  $630 = $ReallocAsyncCtx5 + 116 | 0; //@line 21686
  HEAP32[$630 >> 2] = $56; //@line 21687
  $631 = $ReallocAsyncCtx5 + 120 | 0; //@line 21688
  HEAP32[$631 >> 2] = $60; //@line 21689
  $632 = $ReallocAsyncCtx5 + 124 | 0; //@line 21690
  HEAP32[$632 >> 2] = $62; //@line 21691
  $633 = $ReallocAsyncCtx5 + 128 | 0; //@line 21692
  HEAP32[$633 >> 2] = $64; //@line 21693
  $634 = $ReallocAsyncCtx5 + 132 | 0; //@line 21694
  HEAP32[$634 >> 2] = $66; //@line 21695
  $635 = $ReallocAsyncCtx5 + 136 | 0; //@line 21696
  HEAP32[$635 >> 2] = $68; //@line 21697
  $636 = $ReallocAsyncCtx5 + 140 | 0; //@line 21698
  HEAP32[$636 >> 2] = $70; //@line 21699
  $637 = $ReallocAsyncCtx5 + 144 | 0; //@line 21700
  HEAP32[$637 >> 2] = $72; //@line 21701
  $638 = $ReallocAsyncCtx5 + 148 | 0; //@line 21702
  HEAP32[$638 >> 2] = $74; //@line 21703
  $639 = $ReallocAsyncCtx5 + 152 | 0; //@line 21704
  HEAP32[$639 >> 2] = $76; //@line 21705
  $640 = $ReallocAsyncCtx5 + 156 | 0; //@line 21706
  HEAP32[$640 >> 2] = $78; //@line 21707
  $641 = $ReallocAsyncCtx5 + 160 | 0; //@line 21708
  HEAP32[$641 >> 2] = $80; //@line 21709
  $642 = $ReallocAsyncCtx5 + 164 | 0; //@line 21710
  HEAP32[$642 >> 2] = $82; //@line 21711
  $643 = $ReallocAsyncCtx5 + 168 | 0; //@line 21712
  HEAP32[$643 >> 2] = $84; //@line 21713
  $644 = $ReallocAsyncCtx5 + 172 | 0; //@line 21714
  HEAP32[$644 >> 2] = $86; //@line 21715
  $645 = $ReallocAsyncCtx5 + 176 | 0; //@line 21716
  HEAP32[$645 >> 2] = $88; //@line 21717
  $646 = $ReallocAsyncCtx5 + 180 | 0; //@line 21718
  HEAP32[$646 >> 2] = $90; //@line 21719
  $647 = $ReallocAsyncCtx5 + 184 | 0; //@line 21720
  HEAP32[$647 >> 2] = $92; //@line 21721
  $648 = $ReallocAsyncCtx5 + 188 | 0; //@line 21722
  HEAP32[$648 >> 2] = $94; //@line 21723
  $649 = $ReallocAsyncCtx5 + 192 | 0; //@line 21724
  HEAP32[$649 >> 2] = $96; //@line 21725
  $650 = $ReallocAsyncCtx5 + 196 | 0; //@line 21726
  HEAP32[$650 >> 2] = $98; //@line 21727
  $651 = $ReallocAsyncCtx5 + 200 | 0; //@line 21728
  HEAP32[$651 >> 2] = $100; //@line 21729
  $652 = $ReallocAsyncCtx5 + 204 | 0; //@line 21730
  HEAP32[$652 >> 2] = $102; //@line 21731
  $653 = $ReallocAsyncCtx5 + 208 | 0; //@line 21732
  HEAP32[$653 >> 2] = $104; //@line 21733
  $654 = $ReallocAsyncCtx5 + 212 | 0; //@line 21734
  HEAP32[$654 >> 2] = $106; //@line 21735
  $655 = $ReallocAsyncCtx5 + 216 | 0; //@line 21736
  HEAP32[$655 >> 2] = $108; //@line 21737
  $656 = $ReallocAsyncCtx5 + 220 | 0; //@line 21738
  HEAP32[$656 >> 2] = $110; //@line 21739
  $657 = $ReallocAsyncCtx5 + 224 | 0; //@line 21740
  HEAP32[$657 >> 2] = $112; //@line 21741
  $658 = $ReallocAsyncCtx5 + 228 | 0; //@line 21742
  HEAP32[$658 >> 2] = $114; //@line 21743
  $659 = $ReallocAsyncCtx5 + 232 | 0; //@line 21744
  HEAP32[$659 >> 2] = $116; //@line 21745
  $660 = $ReallocAsyncCtx5 + 236 | 0; //@line 21746
  HEAP32[$660 >> 2] = $118; //@line 21747
  $661 = $ReallocAsyncCtx5 + 240 | 0; //@line 21748
  HEAP32[$661 >> 2] = $120; //@line 21749
  $662 = $ReallocAsyncCtx5 + 244 | 0; //@line 21750
  HEAP32[$662 >> 2] = $122; //@line 21751
  $663 = $ReallocAsyncCtx5 + 248 | 0; //@line 21752
  HEAP8[$663 >> 0] = $124; //@line 21753
  $664 = $ReallocAsyncCtx5 + 249 | 0; //@line 21754
  HEAP8[$664 >> 0] = $126; //@line 21755
  $665 = $ReallocAsyncCtx5 + 252 | 0; //@line 21756
  HEAP32[$665 >> 2] = $128; //@line 21757
  $666 = $ReallocAsyncCtx5 + 256 | 0; //@line 21758
  HEAP8[$666 >> 0] = $130; //@line 21759
  $667 = $ReallocAsyncCtx5 + 260 | 0; //@line 21760
  HEAP32[$667 >> 2] = $132; //@line 21761
  $668 = $ReallocAsyncCtx5 + 264 | 0; //@line 21762
  HEAP32[$668 >> 2] = $134; //@line 21763
  sp = STACKTOP; //@line 21764
  return;
 } else if ((label | 0) == 31) {
  HEAP32[___async_retval >> 2] = $$096$be; //@line 21769
  return;
 }
}
function __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_377($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0$i98 = 0, $$096$be = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $130 = 0, $132 = 0, $134 = 0, $137 = 0, $14 = 0, $148 = 0, $149 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $231 = 0, $234 = 0, $239 = 0, $24 = 0, $247 = 0, $26 = 0, $266 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $347 = 0, $348 = 0, $36 = 0, $38 = 0, $385 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $461 = 0, $465 = 0, $469 = 0, $472 = 0, $478 = 0, $48 = 0, $481 = 0, $482 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $578 = 0, $58 = 0, $588 = 0, $589 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $659 = 0, $66 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 23745
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23747
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23749
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23751
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23753
 $10 = HEAP8[$0 + 20 >> 0] | 0; //@line 23755
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23757
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23759
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 23761
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 23763
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 23765
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 23767
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 23769
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 23771
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 23773
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 23775
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 23777
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 23779
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 23781
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 23783
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 23785
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 23787
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 23789
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 23791
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 23793
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 23795
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 23797
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 23799
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 23801
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 23803
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 23805
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 23807
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 23809
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 23811
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 23813
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 23815
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 23817
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 23819
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 23821
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 23823
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 23825
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 23827
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 23829
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 23831
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 23833
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 23835
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 23837
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 23839
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 23841
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 23843
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 23845
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 23847
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 23849
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 23851
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 23853
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 23855
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 23857
 $114 = HEAP32[$0 + 228 >> 2] | 0; //@line 23859
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 23861
 $118 = HEAP32[$0 + 236 >> 2] | 0; //@line 23863
 $120 = HEAP32[$0 + 240 >> 2] | 0; //@line 23865
 $122 = HEAP32[$0 + 244 >> 2] | 0; //@line 23867
 $124 = HEAP8[$0 + 248 >> 0] | 0; //@line 23869
 $126 = HEAP8[$0 + 249 >> 0] | 0; //@line 23871
 $128 = HEAP32[$0 + 252 >> 2] | 0; //@line 23873
 $130 = HEAP8[$0 + 256 >> 0] | 0; //@line 23875
 $132 = HEAP32[$0 + 260 >> 2] | 0; //@line 23877
 $134 = HEAP32[$0 + 264 >> 2] | 0; //@line 23879
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 23881
 $659 = HEAP8[$110 >> 0] | 0; //@line 23883
 if (($659 & 255) < (-128 - (HEAP8[$106 >> 0] | 0) & 255)) {
  HEAP8[($659 & 255) + ($92 + 4) >> 0] = 10; //@line 23890
  HEAP8[$110 >> 0] = $659 + 2 << 24 >> 24; //@line 23892
  HEAP8[($659 + 1 & 255) + ($92 + 4) >> 0] = $AsyncRetVal; //@line 23895
  HEAP8[$94 >> 0] = 1; //@line 23896
  HEAP8[$116 >> 0] = 1; //@line 23897
  $$0$i98 = 0; //@line 23898
 } else {
  $$0$i98 = -1e3; //@line 23900
 }
 $$0$be = $10; //@line 23902
 $$096$be = $$0$i98; //@line 23902
 L5 : while (1) {
  if (($$0$be & 255) >= ($126 & 255)) {
   label = 31; //@line 23906
   break;
  }
  $137 = $$0$be + 1 << 24 >> 24; //@line 23910
  switch (HEAP8[$120 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 23915
    break L5;
    break;
   }
  case 5:
   {
    label = 9; //@line 23920
    break L5;
    break;
   }
  case 7:
   {
    label = 14; //@line 23925
    break L5;
    break;
   }
  case 9:
   {
    label = 19; //@line 23930
    break L5;
    break;
   }
  case 10:
   {
    label = 24; //@line 23935
    break L5;
    break;
   }
  case 2:
   {
    HEAP32[$62 >> 2] = 0; //@line 23940
    HEAP8[$56 >> 0] = HEAP8[$120 + ($137 & 255) >> 0] | 0; //@line 23945
    HEAP8[$40 >> 0] = HEAP8[$120 + ($$0$be + 2 & 255) >> 0] | 0; //@line 23950
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 23951
    continue L5;
    break;
   }
  case 4:
   {
    $231 = $$0$be + 2 << 24 >> 24; //@line 23956
    $234 = HEAP8[$120 + ($137 & 255) >> 0] | 0; //@line 23959
    HEAP8[$132 >> 0] = $234; //@line 23960
    HEAP16[$6 >> 1] = 1 << ($234 & 255); //@line 23964
    $239 = HEAP8[$110 >> 0] | 0; //@line 23966
    if (($239 & 255) >= (-128 - (HEAP8[$106 >> 0] | 0) & 255)) {
     $$0$be = $231; //@line 23970
     $$096$be = -1e3; //@line 23970
     continue L5;
    }
    HEAP8[$110 >> 0] = $239 + 1 << 24 >> 24; //@line 23976
    HEAP8[($239 & 255) + ($92 + 4) >> 0] = 4; //@line 23977
    HEAP8[$116 >> 0] = 1; //@line 23978
    $$0$be = $231; //@line 23979
    $$096$be = 0; //@line 23979
    continue L5;
    break;
   }
  case 6:
   {
    $347 = HEAP8[$110 >> 0] | 0; //@line 23985
    $348 = $347 & 255; //@line 23986
    if (((-128 - (HEAP8[$106 >> 0] | 0) & 255) + -2 | 0) <= ($348 | 0)) {
     $$0$be = $137; //@line 23992
     $$096$be = -1e3; //@line 23992
     continue L5;
    }
    HEAP8[$92 + 4 + $348 >> 0] = 6; //@line 23997
    HEAP8[($347 + 1 & 255) + ($92 + 4) >> 0] = -1; //@line 24001
    HEAP8[$110 >> 0] = $347 + 3 << 24 >> 24; //@line 24003
    HEAP8[($347 + 2 & 255) + ($92 + 4) >> 0] = $130; //@line 24006
    HEAP8[$116 >> 0] = 1; //@line 24007
    $$0$be = $137; //@line 24008
    $$096$be = 0; //@line 24008
    continue L5;
    break;
   }
  case 8:
   {
    $461 = $$0$be + 2 << 24 >> 24; //@line 24013
    $465 = HEAP8[$120 + ($137 & 255) >> 0] & 15; //@line 24017
    $469 = ($465 + ($465 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 24022
    HEAP32[$38 >> 2] = $469; //@line 24023
    HEAP32[$26 >> 2] = $469 + 1e3; //@line 24025
    $472 = HEAP8[$110 >> 0] | 0; //@line 24027
    if (($472 & 255) >= (-128 - (HEAP8[$106 >> 0] | 0) & 255)) {
     $$0$be = $461; //@line 24031
     $$096$be = -1e3; //@line 24031
     continue L5;
    }
    HEAP8[$110 >> 0] = $472 + 1 << 24 >> 24; //@line 24037
    HEAP8[($472 & 255) + ($92 + 4) >> 0] = 8; //@line 24038
    HEAP8[$94 >> 0] = 1; //@line 24039
    HEAP8[$116 >> 0] = 1; //@line 24040
    $$0$be = $461; //@line 24041
    $$096$be = 0; //@line 24041
    continue L5;
    break;
   }
  default:
   {
    $$0$be = $137; //@line 24046
    $$096$be = -1013; //@line 24046
    continue L5;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$128 >> 0] = 0; //@line 24052
  HEAP8[$64 >> 0] = 0; //@line 24053
  HEAP8[$74 >> 0] = 0; //@line 24054
  HEAP8[$48 >> 0] = 0; //@line 24055
  $148 = $137 & 255; //@line 24056
  $149 = $148 + -1 | 0; //@line 24057
  HEAP32[$28 >> 2] = $120 + $149; //@line 24059
  HEAP8[$12 >> 0] = $88 - $149; //@line 24062
  HEAP8[$8 >> 0] = HEAP8[$4 >> 0] | 0; //@line 24064
  HEAP8[$34 >> 0] = HEAP8[$22 >> 0] | 0; //@line 24066
  HEAP8[$54 >> 0] = HEAP8[$46 >> 0] | 0; //@line 24068
  HEAP8[$72 >> 0] = HEAP8[$68 >> 0] | 0; //@line 24070
  HEAP8[$90 >> 0] = HEAP8[$80 >> 0] | 0; //@line 24072
  $160 = HEAP32[(HEAP32[$98 >> 2] | 0) + 36 >> 2] | 0; //@line 24075
  $ReallocAsyncCtx = _emscripten_realloc_async_context(272) | 0; //@line 24076
  $161 = FUNCTION_TABLE_iiiiiii[$160 & 3]($134, $122, $128, $64, $74, $48) | 0; //@line 24077
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 487; //@line 24080
   $162 = $ReallocAsyncCtx + 4 | 0; //@line 24081
   HEAP32[$162 >> 2] = $2; //@line 24082
   $163 = $ReallocAsyncCtx + 8 | 0; //@line 24083
   HEAP32[$163 >> 2] = $4; //@line 24084
   $164 = $ReallocAsyncCtx + 12 | 0; //@line 24085
   HEAP32[$164 >> 2] = $6; //@line 24086
   $165 = $ReallocAsyncCtx + 16 | 0; //@line 24087
   HEAP32[$165 >> 2] = $8; //@line 24088
   $166 = $ReallocAsyncCtx + 20 | 0; //@line 24089
   HEAP32[$166 >> 2] = $12; //@line 24090
   $167 = $ReallocAsyncCtx + 24 | 0; //@line 24091
   HEAP32[$167 >> 2] = $14; //@line 24092
   $168 = $ReallocAsyncCtx + 28 | 0; //@line 24093
   HEAP32[$168 >> 2] = $16; //@line 24094
   $169 = $ReallocAsyncCtx + 32 | 0; //@line 24095
   HEAP32[$169 >> 2] = $18; //@line 24096
   $170 = $ReallocAsyncCtx + 36 | 0; //@line 24097
   HEAP32[$170 >> 2] = $20; //@line 24098
   $171 = $ReallocAsyncCtx + 40 | 0; //@line 24099
   HEAP32[$171 >> 2] = $22; //@line 24100
   $172 = $ReallocAsyncCtx + 44 | 0; //@line 24101
   HEAP32[$172 >> 2] = $24; //@line 24102
   $173 = $ReallocAsyncCtx + 48 | 0; //@line 24103
   HEAP32[$173 >> 2] = $26; //@line 24104
   $174 = $ReallocAsyncCtx + 52 | 0; //@line 24105
   HEAP32[$174 >> 2] = $28; //@line 24106
   $175 = $ReallocAsyncCtx + 56 | 0; //@line 24107
   HEAP32[$175 >> 2] = $30; //@line 24108
   $176 = $ReallocAsyncCtx + 60 | 0; //@line 24109
   HEAP32[$176 >> 2] = $32; //@line 24110
   $177 = $ReallocAsyncCtx + 64 | 0; //@line 24111
   HEAP32[$177 >> 2] = $34; //@line 24112
   $178 = $ReallocAsyncCtx + 68 | 0; //@line 24113
   HEAP32[$178 >> 2] = $36; //@line 24114
   $179 = $ReallocAsyncCtx + 72 | 0; //@line 24115
   HEAP32[$179 >> 2] = $38; //@line 24116
   $180 = $ReallocAsyncCtx + 76 | 0; //@line 24117
   HEAP32[$180 >> 2] = $40; //@line 24118
   $181 = $ReallocAsyncCtx + 80 | 0; //@line 24119
   HEAP32[$181 >> 2] = $42; //@line 24120
   $182 = $ReallocAsyncCtx + 84 | 0; //@line 24121
   HEAP32[$182 >> 2] = $44; //@line 24122
   $183 = $ReallocAsyncCtx + 88 | 0; //@line 24123
   HEAP32[$183 >> 2] = $46; //@line 24124
   $184 = $ReallocAsyncCtx + 92 | 0; //@line 24125
   HEAP32[$184 >> 2] = $48; //@line 24126
   $185 = $ReallocAsyncCtx + 96 | 0; //@line 24127
   HEAP32[$185 >> 2] = $50; //@line 24128
   $186 = $ReallocAsyncCtx + 100 | 0; //@line 24129
   HEAP32[$186 >> 2] = $52; //@line 24130
   $187 = $ReallocAsyncCtx + 104 | 0; //@line 24131
   HEAP32[$187 >> 2] = $54; //@line 24132
   $188 = $ReallocAsyncCtx + 108 | 0; //@line 24133
   HEAP32[$188 >> 2] = $56; //@line 24134
   $189 = $ReallocAsyncCtx + 112 | 0; //@line 24135
   HEAP32[$189 >> 2] = $58; //@line 24136
   $190 = $ReallocAsyncCtx + 116 | 0; //@line 24137
   HEAP32[$190 >> 2] = $60; //@line 24138
   $191 = $ReallocAsyncCtx + 120 | 0; //@line 24139
   HEAP32[$191 >> 2] = $148; //@line 24140
   $192 = $ReallocAsyncCtx + 124 | 0; //@line 24141
   HEAP32[$192 >> 2] = $62; //@line 24142
   $193 = $ReallocAsyncCtx + 128 | 0; //@line 24143
   HEAP32[$193 >> 2] = $64; //@line 24144
   $194 = $ReallocAsyncCtx + 132 | 0; //@line 24145
   HEAP32[$194 >> 2] = $66; //@line 24146
   $195 = $ReallocAsyncCtx + 136 | 0; //@line 24147
   HEAP32[$195 >> 2] = $68; //@line 24148
   $196 = $ReallocAsyncCtx + 140 | 0; //@line 24149
   HEAP32[$196 >> 2] = $70; //@line 24150
   $197 = $ReallocAsyncCtx + 144 | 0; //@line 24151
   HEAP32[$197 >> 2] = $72; //@line 24152
   $198 = $ReallocAsyncCtx + 148 | 0; //@line 24153
   HEAP32[$198 >> 2] = $74; //@line 24154
   $199 = $ReallocAsyncCtx + 152 | 0; //@line 24155
   HEAP32[$199 >> 2] = $76; //@line 24156
   $200 = $ReallocAsyncCtx + 156 | 0; //@line 24157
   HEAP32[$200 >> 2] = $78; //@line 24158
   $201 = $ReallocAsyncCtx + 160 | 0; //@line 24159
   HEAP32[$201 >> 2] = $80; //@line 24160
   $202 = $ReallocAsyncCtx + 164 | 0; //@line 24161
   HEAP32[$202 >> 2] = $82; //@line 24162
   $203 = $ReallocAsyncCtx + 168 | 0; //@line 24163
   HEAP32[$203 >> 2] = $84; //@line 24164
   $204 = $ReallocAsyncCtx + 172 | 0; //@line 24165
   HEAP32[$204 >> 2] = $86; //@line 24166
   $205 = $ReallocAsyncCtx + 176 | 0; //@line 24167
   HEAP32[$205 >> 2] = $88; //@line 24168
   $206 = $ReallocAsyncCtx + 180 | 0; //@line 24169
   HEAP32[$206 >> 2] = $90; //@line 24170
   $207 = $ReallocAsyncCtx + 184 | 0; //@line 24171
   HEAP32[$207 >> 2] = $92; //@line 24172
   $208 = $ReallocAsyncCtx + 188 | 0; //@line 24173
   HEAP32[$208 >> 2] = $94; //@line 24174
   $209 = $ReallocAsyncCtx + 192 | 0; //@line 24175
   HEAP32[$209 >> 2] = $96; //@line 24176
   $210 = $ReallocAsyncCtx + 196 | 0; //@line 24177
   HEAP32[$210 >> 2] = $98; //@line 24178
   $211 = $ReallocAsyncCtx + 200 | 0; //@line 24179
   HEAP32[$211 >> 2] = $100; //@line 24180
   $212 = $ReallocAsyncCtx + 204 | 0; //@line 24181
   HEAP32[$212 >> 2] = $102; //@line 24182
   $213 = $ReallocAsyncCtx + 208 | 0; //@line 24183
   HEAP32[$213 >> 2] = $104; //@line 24184
   $214 = $ReallocAsyncCtx + 212 | 0; //@line 24185
   HEAP32[$214 >> 2] = $106; //@line 24186
   $215 = $ReallocAsyncCtx + 216 | 0; //@line 24187
   HEAP32[$215 >> 2] = $108; //@line 24188
   $216 = $ReallocAsyncCtx + 220 | 0; //@line 24189
   HEAP32[$216 >> 2] = $110; //@line 24190
   $217 = $ReallocAsyncCtx + 224 | 0; //@line 24191
   HEAP32[$217 >> 2] = $112; //@line 24192
   $218 = $ReallocAsyncCtx + 228 | 0; //@line 24193
   HEAP32[$218 >> 2] = $114; //@line 24194
   $219 = $ReallocAsyncCtx + 232 | 0; //@line 24195
   HEAP32[$219 >> 2] = $116; //@line 24196
   $220 = $ReallocAsyncCtx + 236 | 0; //@line 24197
   HEAP32[$220 >> 2] = $118; //@line 24198
   $221 = $ReallocAsyncCtx + 240 | 0; //@line 24199
   HEAP32[$221 >> 2] = $120; //@line 24200
   $222 = $ReallocAsyncCtx + 244 | 0; //@line 24201
   HEAP32[$222 >> 2] = $122; //@line 24202
   $223 = $ReallocAsyncCtx + 248 | 0; //@line 24203
   HEAP8[$223 >> 0] = $124; //@line 24204
   $224 = $ReallocAsyncCtx + 249 | 0; //@line 24205
   HEAP8[$224 >> 0] = $126; //@line 24206
   $225 = $ReallocAsyncCtx + 252 | 0; //@line 24207
   HEAP32[$225 >> 2] = $128; //@line 24208
   $226 = $ReallocAsyncCtx + 256 | 0; //@line 24209
   HEAP8[$226 >> 0] = $130; //@line 24210
   $227 = $ReallocAsyncCtx + 260 | 0; //@line 24211
   HEAP32[$227 >> 2] = $132; //@line 24212
   $228 = $ReallocAsyncCtx + 264 | 0; //@line 24213
   HEAP32[$228 >> 2] = $$096$be; //@line 24214
   $229 = $ReallocAsyncCtx + 268 | 0; //@line 24215
   HEAP32[$229 >> 2] = $134; //@line 24216
   sp = STACKTOP; //@line 24217
   return;
  }
  HEAP8[___async_retval >> 0] = $161; //@line 24221
  ___async_unwind = 0; //@line 24222
  HEAP32[$ReallocAsyncCtx >> 2] = 487; //@line 24223
  $162 = $ReallocAsyncCtx + 4 | 0; //@line 24224
  HEAP32[$162 >> 2] = $2; //@line 24225
  $163 = $ReallocAsyncCtx + 8 | 0; //@line 24226
  HEAP32[$163 >> 2] = $4; //@line 24227
  $164 = $ReallocAsyncCtx + 12 | 0; //@line 24228
  HEAP32[$164 >> 2] = $6; //@line 24229
  $165 = $ReallocAsyncCtx + 16 | 0; //@line 24230
  HEAP32[$165 >> 2] = $8; //@line 24231
  $166 = $ReallocAsyncCtx + 20 | 0; //@line 24232
  HEAP32[$166 >> 2] = $12; //@line 24233
  $167 = $ReallocAsyncCtx + 24 | 0; //@line 24234
  HEAP32[$167 >> 2] = $14; //@line 24235
  $168 = $ReallocAsyncCtx + 28 | 0; //@line 24236
  HEAP32[$168 >> 2] = $16; //@line 24237
  $169 = $ReallocAsyncCtx + 32 | 0; //@line 24238
  HEAP32[$169 >> 2] = $18; //@line 24239
  $170 = $ReallocAsyncCtx + 36 | 0; //@line 24240
  HEAP32[$170 >> 2] = $20; //@line 24241
  $171 = $ReallocAsyncCtx + 40 | 0; //@line 24242
  HEAP32[$171 >> 2] = $22; //@line 24243
  $172 = $ReallocAsyncCtx + 44 | 0; //@line 24244
  HEAP32[$172 >> 2] = $24; //@line 24245
  $173 = $ReallocAsyncCtx + 48 | 0; //@line 24246
  HEAP32[$173 >> 2] = $26; //@line 24247
  $174 = $ReallocAsyncCtx + 52 | 0; //@line 24248
  HEAP32[$174 >> 2] = $28; //@line 24249
  $175 = $ReallocAsyncCtx + 56 | 0; //@line 24250
  HEAP32[$175 >> 2] = $30; //@line 24251
  $176 = $ReallocAsyncCtx + 60 | 0; //@line 24252
  HEAP32[$176 >> 2] = $32; //@line 24253
  $177 = $ReallocAsyncCtx + 64 | 0; //@line 24254
  HEAP32[$177 >> 2] = $34; //@line 24255
  $178 = $ReallocAsyncCtx + 68 | 0; //@line 24256
  HEAP32[$178 >> 2] = $36; //@line 24257
  $179 = $ReallocAsyncCtx + 72 | 0; //@line 24258
  HEAP32[$179 >> 2] = $38; //@line 24259
  $180 = $ReallocAsyncCtx + 76 | 0; //@line 24260
  HEAP32[$180 >> 2] = $40; //@line 24261
  $181 = $ReallocAsyncCtx + 80 | 0; //@line 24262
  HEAP32[$181 >> 2] = $42; //@line 24263
  $182 = $ReallocAsyncCtx + 84 | 0; //@line 24264
  HEAP32[$182 >> 2] = $44; //@line 24265
  $183 = $ReallocAsyncCtx + 88 | 0; //@line 24266
  HEAP32[$183 >> 2] = $46; //@line 24267
  $184 = $ReallocAsyncCtx + 92 | 0; //@line 24268
  HEAP32[$184 >> 2] = $48; //@line 24269
  $185 = $ReallocAsyncCtx + 96 | 0; //@line 24270
  HEAP32[$185 >> 2] = $50; //@line 24271
  $186 = $ReallocAsyncCtx + 100 | 0; //@line 24272
  HEAP32[$186 >> 2] = $52; //@line 24273
  $187 = $ReallocAsyncCtx + 104 | 0; //@line 24274
  HEAP32[$187 >> 2] = $54; //@line 24275
  $188 = $ReallocAsyncCtx + 108 | 0; //@line 24276
  HEAP32[$188 >> 2] = $56; //@line 24277
  $189 = $ReallocAsyncCtx + 112 | 0; //@line 24278
  HEAP32[$189 >> 2] = $58; //@line 24279
  $190 = $ReallocAsyncCtx + 116 | 0; //@line 24280
  HEAP32[$190 >> 2] = $60; //@line 24281
  $191 = $ReallocAsyncCtx + 120 | 0; //@line 24282
  HEAP32[$191 >> 2] = $148; //@line 24283
  $192 = $ReallocAsyncCtx + 124 | 0; //@line 24284
  HEAP32[$192 >> 2] = $62; //@line 24285
  $193 = $ReallocAsyncCtx + 128 | 0; //@line 24286
  HEAP32[$193 >> 2] = $64; //@line 24287
  $194 = $ReallocAsyncCtx + 132 | 0; //@line 24288
  HEAP32[$194 >> 2] = $66; //@line 24289
  $195 = $ReallocAsyncCtx + 136 | 0; //@line 24290
  HEAP32[$195 >> 2] = $68; //@line 24291
  $196 = $ReallocAsyncCtx + 140 | 0; //@line 24292
  HEAP32[$196 >> 2] = $70; //@line 24293
  $197 = $ReallocAsyncCtx + 144 | 0; //@line 24294
  HEAP32[$197 >> 2] = $72; //@line 24295
  $198 = $ReallocAsyncCtx + 148 | 0; //@line 24296
  HEAP32[$198 >> 2] = $74; //@line 24297
  $199 = $ReallocAsyncCtx + 152 | 0; //@line 24298
  HEAP32[$199 >> 2] = $76; //@line 24299
  $200 = $ReallocAsyncCtx + 156 | 0; //@line 24300
  HEAP32[$200 >> 2] = $78; //@line 24301
  $201 = $ReallocAsyncCtx + 160 | 0; //@line 24302
  HEAP32[$201 >> 2] = $80; //@line 24303
  $202 = $ReallocAsyncCtx + 164 | 0; //@line 24304
  HEAP32[$202 >> 2] = $82; //@line 24305
  $203 = $ReallocAsyncCtx + 168 | 0; //@line 24306
  HEAP32[$203 >> 2] = $84; //@line 24307
  $204 = $ReallocAsyncCtx + 172 | 0; //@line 24308
  HEAP32[$204 >> 2] = $86; //@line 24309
  $205 = $ReallocAsyncCtx + 176 | 0; //@line 24310
  HEAP32[$205 >> 2] = $88; //@line 24311
  $206 = $ReallocAsyncCtx + 180 | 0; //@line 24312
  HEAP32[$206 >> 2] = $90; //@line 24313
  $207 = $ReallocAsyncCtx + 184 | 0; //@line 24314
  HEAP32[$207 >> 2] = $92; //@line 24315
  $208 = $ReallocAsyncCtx + 188 | 0; //@line 24316
  HEAP32[$208 >> 2] = $94; //@line 24317
  $209 = $ReallocAsyncCtx + 192 | 0; //@line 24318
  HEAP32[$209 >> 2] = $96; //@line 24319
  $210 = $ReallocAsyncCtx + 196 | 0; //@line 24320
  HEAP32[$210 >> 2] = $98; //@line 24321
  $211 = $ReallocAsyncCtx + 200 | 0; //@line 24322
  HEAP32[$211 >> 2] = $100; //@line 24323
  $212 = $ReallocAsyncCtx + 204 | 0; //@line 24324
  HEAP32[$212 >> 2] = $102; //@line 24325
  $213 = $ReallocAsyncCtx + 208 | 0; //@line 24326
  HEAP32[$213 >> 2] = $104; //@line 24327
  $214 = $ReallocAsyncCtx + 212 | 0; //@line 24328
  HEAP32[$214 >> 2] = $106; //@line 24329
  $215 = $ReallocAsyncCtx + 216 | 0; //@line 24330
  HEAP32[$215 >> 2] = $108; //@line 24331
  $216 = $ReallocAsyncCtx + 220 | 0; //@line 24332
  HEAP32[$216 >> 2] = $110; //@line 24333
  $217 = $ReallocAsyncCtx + 224 | 0; //@line 24334
  HEAP32[$217 >> 2] = $112; //@line 24335
  $218 = $ReallocAsyncCtx + 228 | 0; //@line 24336
  HEAP32[$218 >> 2] = $114; //@line 24337
  $219 = $ReallocAsyncCtx + 232 | 0; //@line 24338
  HEAP32[$219 >> 2] = $116; //@line 24339
  $220 = $ReallocAsyncCtx + 236 | 0; //@line 24340
  HEAP32[$220 >> 2] = $118; //@line 24341
  $221 = $ReallocAsyncCtx + 240 | 0; //@line 24342
  HEAP32[$221 >> 2] = $120; //@line 24343
  $222 = $ReallocAsyncCtx + 244 | 0; //@line 24344
  HEAP32[$222 >> 2] = $122; //@line 24345
  $223 = $ReallocAsyncCtx + 248 | 0; //@line 24346
  HEAP8[$223 >> 0] = $124; //@line 24347
  $224 = $ReallocAsyncCtx + 249 | 0; //@line 24348
  HEAP8[$224 >> 0] = $126; //@line 24349
  $225 = $ReallocAsyncCtx + 252 | 0; //@line 24350
  HEAP32[$225 >> 2] = $128; //@line 24351
  $226 = $ReallocAsyncCtx + 256 | 0; //@line 24352
  HEAP8[$226 >> 0] = $130; //@line 24353
  $227 = $ReallocAsyncCtx + 260 | 0; //@line 24354
  HEAP32[$227 >> 2] = $132; //@line 24355
  $228 = $ReallocAsyncCtx + 264 | 0; //@line 24356
  HEAP32[$228 >> 2] = $$096$be; //@line 24357
  $229 = $ReallocAsyncCtx + 268 | 0; //@line 24358
  HEAP32[$229 >> 2] = $134; //@line 24359
  sp = STACKTOP; //@line 24360
  return;
 } else if ((label | 0) == 9) {
  $247 = HEAP8[$120 + ($137 & 255) >> 0] | 0; //@line 24366
  HEAP8[$30 >> 0] = ($247 & 255) >>> 4 & 7; //@line 24371
  HEAP8[$20 >> 0] = $247 & 15; //@line 24373
  $266 = $$0$be + 5 << 24 >> 24; //@line 24387
  HEAP32[$32 >> 2] = (HEAPU8[$120 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$120 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$120 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 24395
  $276 = HEAP32[(HEAP32[$50 >> 2] | 0) + 40 >> 2] | 0; //@line 24398
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(268) | 0; //@line 24399
  $277 = FUNCTION_TABLE_iii[$276 & 31]($134, $42) | 0; //@line 24400
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 488; //@line 24403
   $278 = $ReallocAsyncCtx2 + 4 | 0; //@line 24404
   HEAP32[$278 >> 2] = $2; //@line 24405
   $279 = $ReallocAsyncCtx2 + 8 | 0; //@line 24406
   HEAP32[$279 >> 2] = $4; //@line 24407
   $280 = $ReallocAsyncCtx2 + 12 | 0; //@line 24408
   HEAP32[$280 >> 2] = $6; //@line 24409
   $281 = $ReallocAsyncCtx2 + 16 | 0; //@line 24410
   HEAP32[$281 >> 2] = $8; //@line 24411
   $282 = $ReallocAsyncCtx2 + 20 | 0; //@line 24412
   HEAP32[$282 >> 2] = $12; //@line 24413
   $283 = $ReallocAsyncCtx2 + 24 | 0; //@line 24414
   HEAP32[$283 >> 2] = $14; //@line 24415
   $284 = $ReallocAsyncCtx2 + 28 | 0; //@line 24416
   HEAP32[$284 >> 2] = $16; //@line 24417
   $285 = $ReallocAsyncCtx2 + 32 | 0; //@line 24418
   HEAP32[$285 >> 2] = $18; //@line 24419
   $286 = $ReallocAsyncCtx2 + 36 | 0; //@line 24420
   HEAP32[$286 >> 2] = $20; //@line 24421
   $287 = $ReallocAsyncCtx2 + 40 | 0; //@line 24422
   HEAP32[$287 >> 2] = $22; //@line 24423
   $288 = $ReallocAsyncCtx2 + 44 | 0; //@line 24424
   HEAP32[$288 >> 2] = $24; //@line 24425
   $289 = $ReallocAsyncCtx2 + 48 | 0; //@line 24426
   HEAP32[$289 >> 2] = $26; //@line 24427
   $290 = $ReallocAsyncCtx2 + 52 | 0; //@line 24428
   HEAP32[$290 >> 2] = $28; //@line 24429
   $291 = $ReallocAsyncCtx2 + 56 | 0; //@line 24430
   HEAP32[$291 >> 2] = $30; //@line 24431
   $292 = $ReallocAsyncCtx2 + 60 | 0; //@line 24432
   HEAP32[$292 >> 2] = $32; //@line 24433
   $293 = $ReallocAsyncCtx2 + 64 | 0; //@line 24434
   HEAP32[$293 >> 2] = $34; //@line 24435
   $294 = $ReallocAsyncCtx2 + 68 | 0; //@line 24436
   HEAP32[$294 >> 2] = $36; //@line 24437
   $295 = $ReallocAsyncCtx2 + 72 | 0; //@line 24438
   HEAP32[$295 >> 2] = $38; //@line 24439
   $296 = $ReallocAsyncCtx2 + 76 | 0; //@line 24440
   HEAP32[$296 >> 2] = $40; //@line 24441
   $297 = $ReallocAsyncCtx2 + 80 | 0; //@line 24442
   HEAP32[$297 >> 2] = $42; //@line 24443
   $298 = $ReallocAsyncCtx2 + 84 | 0; //@line 24444
   HEAP32[$298 >> 2] = $44; //@line 24445
   $299 = $ReallocAsyncCtx2 + 88 | 0; //@line 24446
   HEAP32[$299 >> 2] = $46; //@line 24447
   $300 = $ReallocAsyncCtx2 + 92 | 0; //@line 24448
   HEAP32[$300 >> 2] = $48; //@line 24449
   $301 = $ReallocAsyncCtx2 + 96 | 0; //@line 24450
   HEAP8[$301 >> 0] = $266; //@line 24451
   $302 = $ReallocAsyncCtx2 + 100 | 0; //@line 24452
   HEAP32[$302 >> 2] = $52; //@line 24453
   $303 = $ReallocAsyncCtx2 + 104 | 0; //@line 24454
   HEAP32[$303 >> 2] = $54; //@line 24455
   $304 = $ReallocAsyncCtx2 + 108 | 0; //@line 24456
   HEAP32[$304 >> 2] = $56; //@line 24457
   $305 = $ReallocAsyncCtx2 + 112 | 0; //@line 24458
   HEAP32[$305 >> 2] = $58; //@line 24459
   $306 = $ReallocAsyncCtx2 + 116 | 0; //@line 24460
   HEAP32[$306 >> 2] = $50; //@line 24461
   $307 = $ReallocAsyncCtx2 + 120 | 0; //@line 24462
   HEAP32[$307 >> 2] = $60; //@line 24463
   $308 = $ReallocAsyncCtx2 + 124 | 0; //@line 24464
   HEAP32[$308 >> 2] = $62; //@line 24465
   $309 = $ReallocAsyncCtx2 + 128 | 0; //@line 24466
   HEAP32[$309 >> 2] = $64; //@line 24467
   $310 = $ReallocAsyncCtx2 + 132 | 0; //@line 24468
   HEAP32[$310 >> 2] = $66; //@line 24469
   $311 = $ReallocAsyncCtx2 + 136 | 0; //@line 24470
   HEAP32[$311 >> 2] = $68; //@line 24471
   $312 = $ReallocAsyncCtx2 + 140 | 0; //@line 24472
   HEAP32[$312 >> 2] = $70; //@line 24473
   $313 = $ReallocAsyncCtx2 + 144 | 0; //@line 24474
   HEAP32[$313 >> 2] = $72; //@line 24475
   $314 = $ReallocAsyncCtx2 + 148 | 0; //@line 24476
   HEAP32[$314 >> 2] = $74; //@line 24477
   $315 = $ReallocAsyncCtx2 + 152 | 0; //@line 24478
   HEAP32[$315 >> 2] = $76; //@line 24479
   $316 = $ReallocAsyncCtx2 + 156 | 0; //@line 24480
   HEAP32[$316 >> 2] = $78; //@line 24481
   $317 = $ReallocAsyncCtx2 + 160 | 0; //@line 24482
   HEAP32[$317 >> 2] = $80; //@line 24483
   $318 = $ReallocAsyncCtx2 + 164 | 0; //@line 24484
   HEAP32[$318 >> 2] = $82; //@line 24485
   $319 = $ReallocAsyncCtx2 + 168 | 0; //@line 24486
   HEAP32[$319 >> 2] = $84; //@line 24487
   $320 = $ReallocAsyncCtx2 + 172 | 0; //@line 24488
   HEAP32[$320 >> 2] = $86; //@line 24489
   $321 = $ReallocAsyncCtx2 + 176 | 0; //@line 24490
   HEAP32[$321 >> 2] = $88; //@line 24491
   $322 = $ReallocAsyncCtx2 + 180 | 0; //@line 24492
   HEAP32[$322 >> 2] = $90; //@line 24493
   $323 = $ReallocAsyncCtx2 + 184 | 0; //@line 24494
   HEAP32[$323 >> 2] = $92; //@line 24495
   $324 = $ReallocAsyncCtx2 + 188 | 0; //@line 24496
   HEAP32[$324 >> 2] = $94; //@line 24497
   $325 = $ReallocAsyncCtx2 + 192 | 0; //@line 24498
   HEAP32[$325 >> 2] = $96; //@line 24499
   $326 = $ReallocAsyncCtx2 + 196 | 0; //@line 24500
   HEAP32[$326 >> 2] = $98; //@line 24501
   $327 = $ReallocAsyncCtx2 + 200 | 0; //@line 24502
   HEAP32[$327 >> 2] = $100; //@line 24503
   $328 = $ReallocAsyncCtx2 + 204 | 0; //@line 24504
   HEAP32[$328 >> 2] = $102; //@line 24505
   $329 = $ReallocAsyncCtx2 + 208 | 0; //@line 24506
   HEAP32[$329 >> 2] = $104; //@line 24507
   $330 = $ReallocAsyncCtx2 + 212 | 0; //@line 24508
   HEAP32[$330 >> 2] = $106; //@line 24509
   $331 = $ReallocAsyncCtx2 + 216 | 0; //@line 24510
   HEAP32[$331 >> 2] = $108; //@line 24511
   $332 = $ReallocAsyncCtx2 + 220 | 0; //@line 24512
   HEAP32[$332 >> 2] = $110; //@line 24513
   $333 = $ReallocAsyncCtx2 + 224 | 0; //@line 24514
   HEAP32[$333 >> 2] = $112; //@line 24515
   $334 = $ReallocAsyncCtx2 + 228 | 0; //@line 24516
   HEAP32[$334 >> 2] = $114; //@line 24517
   $335 = $ReallocAsyncCtx2 + 232 | 0; //@line 24518
   HEAP32[$335 >> 2] = $116; //@line 24519
   $336 = $ReallocAsyncCtx2 + 236 | 0; //@line 24520
   HEAP32[$336 >> 2] = $118; //@line 24521
   $337 = $ReallocAsyncCtx2 + 240 | 0; //@line 24522
   HEAP32[$337 >> 2] = $120; //@line 24523
   $338 = $ReallocAsyncCtx2 + 244 | 0; //@line 24524
   HEAP32[$338 >> 2] = $122; //@line 24525
   $339 = $ReallocAsyncCtx2 + 248 | 0; //@line 24526
   HEAP8[$339 >> 0] = $124; //@line 24527
   $340 = $ReallocAsyncCtx2 + 249 | 0; //@line 24528
   HEAP8[$340 >> 0] = $126; //@line 24529
   $341 = $ReallocAsyncCtx2 + 252 | 0; //@line 24530
   HEAP32[$341 >> 2] = $128; //@line 24531
   $342 = $ReallocAsyncCtx2 + 256 | 0; //@line 24532
   HEAP8[$342 >> 0] = $130; //@line 24533
   $343 = $ReallocAsyncCtx2 + 260 | 0; //@line 24534
   HEAP32[$343 >> 2] = $132; //@line 24535
   $344 = $ReallocAsyncCtx2 + 264 | 0; //@line 24536
   HEAP32[$344 >> 2] = $134; //@line 24537
   sp = STACKTOP; //@line 24538
   return;
  }
  HEAP8[___async_retval >> 0] = $277; //@line 24542
  ___async_unwind = 0; //@line 24543
  HEAP32[$ReallocAsyncCtx2 >> 2] = 488; //@line 24544
  $278 = $ReallocAsyncCtx2 + 4 | 0; //@line 24545
  HEAP32[$278 >> 2] = $2; //@line 24546
  $279 = $ReallocAsyncCtx2 + 8 | 0; //@line 24547
  HEAP32[$279 >> 2] = $4; //@line 24548
  $280 = $ReallocAsyncCtx2 + 12 | 0; //@line 24549
  HEAP32[$280 >> 2] = $6; //@line 24550
  $281 = $ReallocAsyncCtx2 + 16 | 0; //@line 24551
  HEAP32[$281 >> 2] = $8; //@line 24552
  $282 = $ReallocAsyncCtx2 + 20 | 0; //@line 24553
  HEAP32[$282 >> 2] = $12; //@line 24554
  $283 = $ReallocAsyncCtx2 + 24 | 0; //@line 24555
  HEAP32[$283 >> 2] = $14; //@line 24556
  $284 = $ReallocAsyncCtx2 + 28 | 0; //@line 24557
  HEAP32[$284 >> 2] = $16; //@line 24558
  $285 = $ReallocAsyncCtx2 + 32 | 0; //@line 24559
  HEAP32[$285 >> 2] = $18; //@line 24560
  $286 = $ReallocAsyncCtx2 + 36 | 0; //@line 24561
  HEAP32[$286 >> 2] = $20; //@line 24562
  $287 = $ReallocAsyncCtx2 + 40 | 0; //@line 24563
  HEAP32[$287 >> 2] = $22; //@line 24564
  $288 = $ReallocAsyncCtx2 + 44 | 0; //@line 24565
  HEAP32[$288 >> 2] = $24; //@line 24566
  $289 = $ReallocAsyncCtx2 + 48 | 0; //@line 24567
  HEAP32[$289 >> 2] = $26; //@line 24568
  $290 = $ReallocAsyncCtx2 + 52 | 0; //@line 24569
  HEAP32[$290 >> 2] = $28; //@line 24570
  $291 = $ReallocAsyncCtx2 + 56 | 0; //@line 24571
  HEAP32[$291 >> 2] = $30; //@line 24572
  $292 = $ReallocAsyncCtx2 + 60 | 0; //@line 24573
  HEAP32[$292 >> 2] = $32; //@line 24574
  $293 = $ReallocAsyncCtx2 + 64 | 0; //@line 24575
  HEAP32[$293 >> 2] = $34; //@line 24576
  $294 = $ReallocAsyncCtx2 + 68 | 0; //@line 24577
  HEAP32[$294 >> 2] = $36; //@line 24578
  $295 = $ReallocAsyncCtx2 + 72 | 0; //@line 24579
  HEAP32[$295 >> 2] = $38; //@line 24580
  $296 = $ReallocAsyncCtx2 + 76 | 0; //@line 24581
  HEAP32[$296 >> 2] = $40; //@line 24582
  $297 = $ReallocAsyncCtx2 + 80 | 0; //@line 24583
  HEAP32[$297 >> 2] = $42; //@line 24584
  $298 = $ReallocAsyncCtx2 + 84 | 0; //@line 24585
  HEAP32[$298 >> 2] = $44; //@line 24586
  $299 = $ReallocAsyncCtx2 + 88 | 0; //@line 24587
  HEAP32[$299 >> 2] = $46; //@line 24588
  $300 = $ReallocAsyncCtx2 + 92 | 0; //@line 24589
  HEAP32[$300 >> 2] = $48; //@line 24590
  $301 = $ReallocAsyncCtx2 + 96 | 0; //@line 24591
  HEAP8[$301 >> 0] = $266; //@line 24592
  $302 = $ReallocAsyncCtx2 + 100 | 0; //@line 24593
  HEAP32[$302 >> 2] = $52; //@line 24594
  $303 = $ReallocAsyncCtx2 + 104 | 0; //@line 24595
  HEAP32[$303 >> 2] = $54; //@line 24596
  $304 = $ReallocAsyncCtx2 + 108 | 0; //@line 24597
  HEAP32[$304 >> 2] = $56; //@line 24598
  $305 = $ReallocAsyncCtx2 + 112 | 0; //@line 24599
  HEAP32[$305 >> 2] = $58; //@line 24600
  $306 = $ReallocAsyncCtx2 + 116 | 0; //@line 24601
  HEAP32[$306 >> 2] = $50; //@line 24602
  $307 = $ReallocAsyncCtx2 + 120 | 0; //@line 24603
  HEAP32[$307 >> 2] = $60; //@line 24604
  $308 = $ReallocAsyncCtx2 + 124 | 0; //@line 24605
  HEAP32[$308 >> 2] = $62; //@line 24606
  $309 = $ReallocAsyncCtx2 + 128 | 0; //@line 24607
  HEAP32[$309 >> 2] = $64; //@line 24608
  $310 = $ReallocAsyncCtx2 + 132 | 0; //@line 24609
  HEAP32[$310 >> 2] = $66; //@line 24610
  $311 = $ReallocAsyncCtx2 + 136 | 0; //@line 24611
  HEAP32[$311 >> 2] = $68; //@line 24612
  $312 = $ReallocAsyncCtx2 + 140 | 0; //@line 24613
  HEAP32[$312 >> 2] = $70; //@line 24614
  $313 = $ReallocAsyncCtx2 + 144 | 0; //@line 24615
  HEAP32[$313 >> 2] = $72; //@line 24616
  $314 = $ReallocAsyncCtx2 + 148 | 0; //@line 24617
  HEAP32[$314 >> 2] = $74; //@line 24618
  $315 = $ReallocAsyncCtx2 + 152 | 0; //@line 24619
  HEAP32[$315 >> 2] = $76; //@line 24620
  $316 = $ReallocAsyncCtx2 + 156 | 0; //@line 24621
  HEAP32[$316 >> 2] = $78; //@line 24622
  $317 = $ReallocAsyncCtx2 + 160 | 0; //@line 24623
  HEAP32[$317 >> 2] = $80; //@line 24624
  $318 = $ReallocAsyncCtx2 + 164 | 0; //@line 24625
  HEAP32[$318 >> 2] = $82; //@line 24626
  $319 = $ReallocAsyncCtx2 + 168 | 0; //@line 24627
  HEAP32[$319 >> 2] = $84; //@line 24628
  $320 = $ReallocAsyncCtx2 + 172 | 0; //@line 24629
  HEAP32[$320 >> 2] = $86; //@line 24630
  $321 = $ReallocAsyncCtx2 + 176 | 0; //@line 24631
  HEAP32[$321 >> 2] = $88; //@line 24632
  $322 = $ReallocAsyncCtx2 + 180 | 0; //@line 24633
  HEAP32[$322 >> 2] = $90; //@line 24634
  $323 = $ReallocAsyncCtx2 + 184 | 0; //@line 24635
  HEAP32[$323 >> 2] = $92; //@line 24636
  $324 = $ReallocAsyncCtx2 + 188 | 0; //@line 24637
  HEAP32[$324 >> 2] = $94; //@line 24638
  $325 = $ReallocAsyncCtx2 + 192 | 0; //@line 24639
  HEAP32[$325 >> 2] = $96; //@line 24640
  $326 = $ReallocAsyncCtx2 + 196 | 0; //@line 24641
  HEAP32[$326 >> 2] = $98; //@line 24642
  $327 = $ReallocAsyncCtx2 + 200 | 0; //@line 24643
  HEAP32[$327 >> 2] = $100; //@line 24644
  $328 = $ReallocAsyncCtx2 + 204 | 0; //@line 24645
  HEAP32[$328 >> 2] = $102; //@line 24646
  $329 = $ReallocAsyncCtx2 + 208 | 0; //@line 24647
  HEAP32[$329 >> 2] = $104; //@line 24648
  $330 = $ReallocAsyncCtx2 + 212 | 0; //@line 24649
  HEAP32[$330 >> 2] = $106; //@line 24650
  $331 = $ReallocAsyncCtx2 + 216 | 0; //@line 24651
  HEAP32[$331 >> 2] = $108; //@line 24652
  $332 = $ReallocAsyncCtx2 + 220 | 0; //@line 24653
  HEAP32[$332 >> 2] = $110; //@line 24654
  $333 = $ReallocAsyncCtx2 + 224 | 0; //@line 24655
  HEAP32[$333 >> 2] = $112; //@line 24656
  $334 = $ReallocAsyncCtx2 + 228 | 0; //@line 24657
  HEAP32[$334 >> 2] = $114; //@line 24658
  $335 = $ReallocAsyncCtx2 + 232 | 0; //@line 24659
  HEAP32[$335 >> 2] = $116; //@line 24660
  $336 = $ReallocAsyncCtx2 + 236 | 0; //@line 24661
  HEAP32[$336 >> 2] = $118; //@line 24662
  $337 = $ReallocAsyncCtx2 + 240 | 0; //@line 24663
  HEAP32[$337 >> 2] = $120; //@line 24664
  $338 = $ReallocAsyncCtx2 + 244 | 0; //@line 24665
  HEAP32[$338 >> 2] = $122; //@line 24666
  $339 = $ReallocAsyncCtx2 + 248 | 0; //@line 24667
  HEAP8[$339 >> 0] = $124; //@line 24668
  $340 = $ReallocAsyncCtx2 + 249 | 0; //@line 24669
  HEAP8[$340 >> 0] = $126; //@line 24670
  $341 = $ReallocAsyncCtx2 + 252 | 0; //@line 24671
  HEAP32[$341 >> 2] = $128; //@line 24672
  $342 = $ReallocAsyncCtx2 + 256 | 0; //@line 24673
  HEAP8[$342 >> 0] = $130; //@line 24674
  $343 = $ReallocAsyncCtx2 + 260 | 0; //@line 24675
  HEAP32[$343 >> 2] = $132; //@line 24676
  $344 = $ReallocAsyncCtx2 + 264 | 0; //@line 24677
  HEAP32[$344 >> 2] = $134; //@line 24678
  sp = STACKTOP; //@line 24679
  return;
 } else if ((label | 0) == 14) {
  HEAP8[$102 >> 0] = HEAP8[$120 + ($137 & 255) >> 0] | 0; //@line 24687
  HEAP32[$108 >> 2] = $24; //@line 24688
  HEAP32[$114 >> 2] = (HEAPU8[$120 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$120 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$120 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 24709
  HEAP32[$118 >> 2] = 0; //@line 24710
  $385 = $$0$be + 6 << 24 >> 24; //@line 24711
  HEAP8[$14 >> 0] = HEAP8[$120 + ($$0$be + 5 & 255) >> 0] | 0; //@line 24715
  $391 = HEAP32[(HEAP32[$2 >> 2] | 0) + 8 >> 2] | 0; //@line 24718
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(268) | 0; //@line 24719
  $392 = FUNCTION_TABLE_iii[$391 & 31]($134, $60) | 0; //@line 24720
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 489; //@line 24723
   $393 = $ReallocAsyncCtx3 + 4 | 0; //@line 24724
   HEAP32[$393 >> 2] = $2; //@line 24725
   $394 = $ReallocAsyncCtx3 + 8 | 0; //@line 24726
   HEAP32[$394 >> 2] = $4; //@line 24727
   $395 = $ReallocAsyncCtx3 + 12 | 0; //@line 24728
   HEAP32[$395 >> 2] = $6; //@line 24729
   $396 = $ReallocAsyncCtx3 + 16 | 0; //@line 24730
   HEAP32[$396 >> 2] = $8; //@line 24731
   $397 = $ReallocAsyncCtx3 + 20 | 0; //@line 24732
   HEAP32[$397 >> 2] = $12; //@line 24733
   $398 = $ReallocAsyncCtx3 + 24 | 0; //@line 24734
   HEAP32[$398 >> 2] = $14; //@line 24735
   $399 = $ReallocAsyncCtx3 + 28 | 0; //@line 24736
   HEAP32[$399 >> 2] = $16; //@line 24737
   $400 = $ReallocAsyncCtx3 + 32 | 0; //@line 24738
   HEAP32[$400 >> 2] = $18; //@line 24739
   $401 = $ReallocAsyncCtx3 + 36 | 0; //@line 24740
   HEAP32[$401 >> 2] = $20; //@line 24741
   $402 = $ReallocAsyncCtx3 + 40 | 0; //@line 24742
   HEAP32[$402 >> 2] = $22; //@line 24743
   $403 = $ReallocAsyncCtx3 + 44 | 0; //@line 24744
   HEAP32[$403 >> 2] = $24; //@line 24745
   $404 = $ReallocAsyncCtx3 + 48 | 0; //@line 24746
   HEAP32[$404 >> 2] = $26; //@line 24747
   $405 = $ReallocAsyncCtx3 + 52 | 0; //@line 24748
   HEAP32[$405 >> 2] = $28; //@line 24749
   $406 = $ReallocAsyncCtx3 + 56 | 0; //@line 24750
   HEAP32[$406 >> 2] = $30; //@line 24751
   $407 = $ReallocAsyncCtx3 + 60 | 0; //@line 24752
   HEAP32[$407 >> 2] = $32; //@line 24753
   $408 = $ReallocAsyncCtx3 + 64 | 0; //@line 24754
   HEAP32[$408 >> 2] = $34; //@line 24755
   $409 = $ReallocAsyncCtx3 + 68 | 0; //@line 24756
   HEAP32[$409 >> 2] = $36; //@line 24757
   $410 = $ReallocAsyncCtx3 + 72 | 0; //@line 24758
   HEAP32[$410 >> 2] = $38; //@line 24759
   $411 = $ReallocAsyncCtx3 + 76 | 0; //@line 24760
   HEAP32[$411 >> 2] = $40; //@line 24761
   $412 = $ReallocAsyncCtx3 + 80 | 0; //@line 24762
   HEAP32[$412 >> 2] = $42; //@line 24763
   $413 = $ReallocAsyncCtx3 + 84 | 0; //@line 24764
   HEAP32[$413 >> 2] = $44; //@line 24765
   $414 = $ReallocAsyncCtx3 + 88 | 0; //@line 24766
   HEAP32[$414 >> 2] = $46; //@line 24767
   $415 = $ReallocAsyncCtx3 + 92 | 0; //@line 24768
   HEAP32[$415 >> 2] = $48; //@line 24769
   $416 = $ReallocAsyncCtx3 + 96 | 0; //@line 24770
   HEAP32[$416 >> 2] = $50; //@line 24771
   $417 = $ReallocAsyncCtx3 + 100 | 0; //@line 24772
   HEAP32[$417 >> 2] = $52; //@line 24773
   $418 = $ReallocAsyncCtx3 + 104 | 0; //@line 24774
   HEAP32[$418 >> 2] = $54; //@line 24775
   $419 = $ReallocAsyncCtx3 + 108 | 0; //@line 24776
   HEAP32[$419 >> 2] = $56; //@line 24777
   $420 = $ReallocAsyncCtx3 + 112 | 0; //@line 24778
   HEAP32[$420 >> 2] = $58; //@line 24779
   $421 = $ReallocAsyncCtx3 + 116 | 0; //@line 24780
   HEAP8[$421 >> 0] = $385; //@line 24781
   $422 = $ReallocAsyncCtx3 + 120 | 0; //@line 24782
   HEAP32[$422 >> 2] = $60; //@line 24783
   $423 = $ReallocAsyncCtx3 + 124 | 0; //@line 24784
   HEAP32[$423 >> 2] = $62; //@line 24785
   $424 = $ReallocAsyncCtx3 + 128 | 0; //@line 24786
   HEAP32[$424 >> 2] = $64; //@line 24787
   $425 = $ReallocAsyncCtx3 + 132 | 0; //@line 24788
   HEAP32[$425 >> 2] = $66; //@line 24789
   $426 = $ReallocAsyncCtx3 + 136 | 0; //@line 24790
   HEAP32[$426 >> 2] = $68; //@line 24791
   $427 = $ReallocAsyncCtx3 + 140 | 0; //@line 24792
   HEAP32[$427 >> 2] = $70; //@line 24793
   $428 = $ReallocAsyncCtx3 + 144 | 0; //@line 24794
   HEAP32[$428 >> 2] = $72; //@line 24795
   $429 = $ReallocAsyncCtx3 + 148 | 0; //@line 24796
   HEAP32[$429 >> 2] = $74; //@line 24797
   $430 = $ReallocAsyncCtx3 + 152 | 0; //@line 24798
   HEAP32[$430 >> 2] = $76; //@line 24799
   $431 = $ReallocAsyncCtx3 + 156 | 0; //@line 24800
   HEAP32[$431 >> 2] = $78; //@line 24801
   $432 = $ReallocAsyncCtx3 + 160 | 0; //@line 24802
   HEAP32[$432 >> 2] = $80; //@line 24803
   $433 = $ReallocAsyncCtx3 + 164 | 0; //@line 24804
   HEAP32[$433 >> 2] = $82; //@line 24805
   $434 = $ReallocAsyncCtx3 + 168 | 0; //@line 24806
   HEAP32[$434 >> 2] = $84; //@line 24807
   $435 = $ReallocAsyncCtx3 + 172 | 0; //@line 24808
   HEAP32[$435 >> 2] = $86; //@line 24809
   $436 = $ReallocAsyncCtx3 + 176 | 0; //@line 24810
   HEAP32[$436 >> 2] = $88; //@line 24811
   $437 = $ReallocAsyncCtx3 + 180 | 0; //@line 24812
   HEAP32[$437 >> 2] = $90; //@line 24813
   $438 = $ReallocAsyncCtx3 + 184 | 0; //@line 24814
   HEAP32[$438 >> 2] = $92; //@line 24815
   $439 = $ReallocAsyncCtx3 + 188 | 0; //@line 24816
   HEAP32[$439 >> 2] = $94; //@line 24817
   $440 = $ReallocAsyncCtx3 + 192 | 0; //@line 24818
   HEAP32[$440 >> 2] = $96; //@line 24819
   $441 = $ReallocAsyncCtx3 + 196 | 0; //@line 24820
   HEAP32[$441 >> 2] = $98; //@line 24821
   $442 = $ReallocAsyncCtx3 + 200 | 0; //@line 24822
   HEAP32[$442 >> 2] = $100; //@line 24823
   $443 = $ReallocAsyncCtx3 + 204 | 0; //@line 24824
   HEAP32[$443 >> 2] = $102; //@line 24825
   $444 = $ReallocAsyncCtx3 + 208 | 0; //@line 24826
   HEAP32[$444 >> 2] = $104; //@line 24827
   $445 = $ReallocAsyncCtx3 + 212 | 0; //@line 24828
   HEAP32[$445 >> 2] = $106; //@line 24829
   $446 = $ReallocAsyncCtx3 + 216 | 0; //@line 24830
   HEAP32[$446 >> 2] = $108; //@line 24831
   $447 = $ReallocAsyncCtx3 + 220 | 0; //@line 24832
   HEAP32[$447 >> 2] = $110; //@line 24833
   $448 = $ReallocAsyncCtx3 + 224 | 0; //@line 24834
   HEAP32[$448 >> 2] = $112; //@line 24835
   $449 = $ReallocAsyncCtx3 + 228 | 0; //@line 24836
   HEAP32[$449 >> 2] = $114; //@line 24837
   $450 = $ReallocAsyncCtx3 + 232 | 0; //@line 24838
   HEAP32[$450 >> 2] = $116; //@line 24839
   $451 = $ReallocAsyncCtx3 + 236 | 0; //@line 24840
   HEAP32[$451 >> 2] = $118; //@line 24841
   $452 = $ReallocAsyncCtx3 + 240 | 0; //@line 24842
   HEAP32[$452 >> 2] = $120; //@line 24843
   $453 = $ReallocAsyncCtx3 + 244 | 0; //@line 24844
   HEAP32[$453 >> 2] = $122; //@line 24845
   $454 = $ReallocAsyncCtx3 + 248 | 0; //@line 24846
   HEAP8[$454 >> 0] = $124; //@line 24847
   $455 = $ReallocAsyncCtx3 + 249 | 0; //@line 24848
   HEAP8[$455 >> 0] = $126; //@line 24849
   $456 = $ReallocAsyncCtx3 + 252 | 0; //@line 24850
   HEAP32[$456 >> 2] = $128; //@line 24851
   $457 = $ReallocAsyncCtx3 + 256 | 0; //@line 24852
   HEAP8[$457 >> 0] = $130; //@line 24853
   $458 = $ReallocAsyncCtx3 + 260 | 0; //@line 24854
   HEAP32[$458 >> 2] = $132; //@line 24855
   $459 = $ReallocAsyncCtx3 + 264 | 0; //@line 24856
   HEAP32[$459 >> 2] = $134; //@line 24857
   sp = STACKTOP; //@line 24858
   return;
  }
  HEAP8[___async_retval >> 0] = $392; //@line 24862
  ___async_unwind = 0; //@line 24863
  HEAP32[$ReallocAsyncCtx3 >> 2] = 489; //@line 24864
  $393 = $ReallocAsyncCtx3 + 4 | 0; //@line 24865
  HEAP32[$393 >> 2] = $2; //@line 24866
  $394 = $ReallocAsyncCtx3 + 8 | 0; //@line 24867
  HEAP32[$394 >> 2] = $4; //@line 24868
  $395 = $ReallocAsyncCtx3 + 12 | 0; //@line 24869
  HEAP32[$395 >> 2] = $6; //@line 24870
  $396 = $ReallocAsyncCtx3 + 16 | 0; //@line 24871
  HEAP32[$396 >> 2] = $8; //@line 24872
  $397 = $ReallocAsyncCtx3 + 20 | 0; //@line 24873
  HEAP32[$397 >> 2] = $12; //@line 24874
  $398 = $ReallocAsyncCtx3 + 24 | 0; //@line 24875
  HEAP32[$398 >> 2] = $14; //@line 24876
  $399 = $ReallocAsyncCtx3 + 28 | 0; //@line 24877
  HEAP32[$399 >> 2] = $16; //@line 24878
  $400 = $ReallocAsyncCtx3 + 32 | 0; //@line 24879
  HEAP32[$400 >> 2] = $18; //@line 24880
  $401 = $ReallocAsyncCtx3 + 36 | 0; //@line 24881
  HEAP32[$401 >> 2] = $20; //@line 24882
  $402 = $ReallocAsyncCtx3 + 40 | 0; //@line 24883
  HEAP32[$402 >> 2] = $22; //@line 24884
  $403 = $ReallocAsyncCtx3 + 44 | 0; //@line 24885
  HEAP32[$403 >> 2] = $24; //@line 24886
  $404 = $ReallocAsyncCtx3 + 48 | 0; //@line 24887
  HEAP32[$404 >> 2] = $26; //@line 24888
  $405 = $ReallocAsyncCtx3 + 52 | 0; //@line 24889
  HEAP32[$405 >> 2] = $28; //@line 24890
  $406 = $ReallocAsyncCtx3 + 56 | 0; //@line 24891
  HEAP32[$406 >> 2] = $30; //@line 24892
  $407 = $ReallocAsyncCtx3 + 60 | 0; //@line 24893
  HEAP32[$407 >> 2] = $32; //@line 24894
  $408 = $ReallocAsyncCtx3 + 64 | 0; //@line 24895
  HEAP32[$408 >> 2] = $34; //@line 24896
  $409 = $ReallocAsyncCtx3 + 68 | 0; //@line 24897
  HEAP32[$409 >> 2] = $36; //@line 24898
  $410 = $ReallocAsyncCtx3 + 72 | 0; //@line 24899
  HEAP32[$410 >> 2] = $38; //@line 24900
  $411 = $ReallocAsyncCtx3 + 76 | 0; //@line 24901
  HEAP32[$411 >> 2] = $40; //@line 24902
  $412 = $ReallocAsyncCtx3 + 80 | 0; //@line 24903
  HEAP32[$412 >> 2] = $42; //@line 24904
  $413 = $ReallocAsyncCtx3 + 84 | 0; //@line 24905
  HEAP32[$413 >> 2] = $44; //@line 24906
  $414 = $ReallocAsyncCtx3 + 88 | 0; //@line 24907
  HEAP32[$414 >> 2] = $46; //@line 24908
  $415 = $ReallocAsyncCtx3 + 92 | 0; //@line 24909
  HEAP32[$415 >> 2] = $48; //@line 24910
  $416 = $ReallocAsyncCtx3 + 96 | 0; //@line 24911
  HEAP32[$416 >> 2] = $50; //@line 24912
  $417 = $ReallocAsyncCtx3 + 100 | 0; //@line 24913
  HEAP32[$417 >> 2] = $52; //@line 24914
  $418 = $ReallocAsyncCtx3 + 104 | 0; //@line 24915
  HEAP32[$418 >> 2] = $54; //@line 24916
  $419 = $ReallocAsyncCtx3 + 108 | 0; //@line 24917
  HEAP32[$419 >> 2] = $56; //@line 24918
  $420 = $ReallocAsyncCtx3 + 112 | 0; //@line 24919
  HEAP32[$420 >> 2] = $58; //@line 24920
  $421 = $ReallocAsyncCtx3 + 116 | 0; //@line 24921
  HEAP8[$421 >> 0] = $385; //@line 24922
  $422 = $ReallocAsyncCtx3 + 120 | 0; //@line 24923
  HEAP32[$422 >> 2] = $60; //@line 24924
  $423 = $ReallocAsyncCtx3 + 124 | 0; //@line 24925
  HEAP32[$423 >> 2] = $62; //@line 24926
  $424 = $ReallocAsyncCtx3 + 128 | 0; //@line 24927
  HEAP32[$424 >> 2] = $64; //@line 24928
  $425 = $ReallocAsyncCtx3 + 132 | 0; //@line 24929
  HEAP32[$425 >> 2] = $66; //@line 24930
  $426 = $ReallocAsyncCtx3 + 136 | 0; //@line 24931
  HEAP32[$426 >> 2] = $68; //@line 24932
  $427 = $ReallocAsyncCtx3 + 140 | 0; //@line 24933
  HEAP32[$427 >> 2] = $70; //@line 24934
  $428 = $ReallocAsyncCtx3 + 144 | 0; //@line 24935
  HEAP32[$428 >> 2] = $72; //@line 24936
  $429 = $ReallocAsyncCtx3 + 148 | 0; //@line 24937
  HEAP32[$429 >> 2] = $74; //@line 24938
  $430 = $ReallocAsyncCtx3 + 152 | 0; //@line 24939
  HEAP32[$430 >> 2] = $76; //@line 24940
  $431 = $ReallocAsyncCtx3 + 156 | 0; //@line 24941
  HEAP32[$431 >> 2] = $78; //@line 24942
  $432 = $ReallocAsyncCtx3 + 160 | 0; //@line 24943
  HEAP32[$432 >> 2] = $80; //@line 24944
  $433 = $ReallocAsyncCtx3 + 164 | 0; //@line 24945
  HEAP32[$433 >> 2] = $82; //@line 24946
  $434 = $ReallocAsyncCtx3 + 168 | 0; //@line 24947
  HEAP32[$434 >> 2] = $84; //@line 24948
  $435 = $ReallocAsyncCtx3 + 172 | 0; //@line 24949
  HEAP32[$435 >> 2] = $86; //@line 24950
  $436 = $ReallocAsyncCtx3 + 176 | 0; //@line 24951
  HEAP32[$436 >> 2] = $88; //@line 24952
  $437 = $ReallocAsyncCtx3 + 180 | 0; //@line 24953
  HEAP32[$437 >> 2] = $90; //@line 24954
  $438 = $ReallocAsyncCtx3 + 184 | 0; //@line 24955
  HEAP32[$438 >> 2] = $92; //@line 24956
  $439 = $ReallocAsyncCtx3 + 188 | 0; //@line 24957
  HEAP32[$439 >> 2] = $94; //@line 24958
  $440 = $ReallocAsyncCtx3 + 192 | 0; //@line 24959
  HEAP32[$440 >> 2] = $96; //@line 24960
  $441 = $ReallocAsyncCtx3 + 196 | 0; //@line 24961
  HEAP32[$441 >> 2] = $98; //@line 24962
  $442 = $ReallocAsyncCtx3 + 200 | 0; //@line 24963
  HEAP32[$442 >> 2] = $100; //@line 24964
  $443 = $ReallocAsyncCtx3 + 204 | 0; //@line 24965
  HEAP32[$443 >> 2] = $102; //@line 24966
  $444 = $ReallocAsyncCtx3 + 208 | 0; //@line 24967
  HEAP32[$444 >> 2] = $104; //@line 24968
  $445 = $ReallocAsyncCtx3 + 212 | 0; //@line 24969
  HEAP32[$445 >> 2] = $106; //@line 24970
  $446 = $ReallocAsyncCtx3 + 216 | 0; //@line 24971
  HEAP32[$446 >> 2] = $108; //@line 24972
  $447 = $ReallocAsyncCtx3 + 220 | 0; //@line 24973
  HEAP32[$447 >> 2] = $110; //@line 24974
  $448 = $ReallocAsyncCtx3 + 224 | 0; //@line 24975
  HEAP32[$448 >> 2] = $112; //@line 24976
  $449 = $ReallocAsyncCtx3 + 228 | 0; //@line 24977
  HEAP32[$449 >> 2] = $114; //@line 24978
  $450 = $ReallocAsyncCtx3 + 232 | 0; //@line 24979
  HEAP32[$450 >> 2] = $116; //@line 24980
  $451 = $ReallocAsyncCtx3 + 236 | 0; //@line 24981
  HEAP32[$451 >> 2] = $118; //@line 24982
  $452 = $ReallocAsyncCtx3 + 240 | 0; //@line 24983
  HEAP32[$452 >> 2] = $120; //@line 24984
  $453 = $ReallocAsyncCtx3 + 244 | 0; //@line 24985
  HEAP32[$453 >> 2] = $122; //@line 24986
  $454 = $ReallocAsyncCtx3 + 248 | 0; //@line 24987
  HEAP8[$454 >> 0] = $124; //@line 24988
  $455 = $ReallocAsyncCtx3 + 249 | 0; //@line 24989
  HEAP8[$455 >> 0] = $126; //@line 24990
  $456 = $ReallocAsyncCtx3 + 252 | 0; //@line 24991
  HEAP32[$456 >> 2] = $128; //@line 24992
  $457 = $ReallocAsyncCtx3 + 256 | 0; //@line 24993
  HEAP8[$457 >> 0] = $130; //@line 24994
  $458 = $ReallocAsyncCtx3 + 260 | 0; //@line 24995
  HEAP32[$458 >> 2] = $132; //@line 24996
  $459 = $ReallocAsyncCtx3 + 264 | 0; //@line 24997
  HEAP32[$459 >> 2] = $134; //@line 24998
  sp = STACKTOP; //@line 24999
  return;
 } else if ((label | 0) == 19) {
  $478 = $$0$be + 2 << 24 >> 24; //@line 25003
  $481 = HEAP8[$120 + ($137 & 255) >> 0] | 0; //@line 25006
  HEAP8[$58 >> 0] = 0; //@line 25007
  $482 = $481 & 255; //@line 25008
  HEAP8[$44 >> 0] = $482 >>> 5 & 1; //@line 25012
  if ($482 & 16 | 0) {
   HEAP8[$58 >> 0] = 1; //@line 25016
  }
  HEAP8[$76 >> 0] = $482 & 15; //@line 25020
  $491 = HEAP32[(HEAP32[$66 >> 2] | 0) + 44 >> 2] | 0; //@line 25023
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(272) | 0; //@line 25024
  $492 = FUNCTION_TABLE_iii[$491 & 31]($134, $18) | 0; //@line 25025
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 490; //@line 25028
   $493 = $ReallocAsyncCtx4 + 4 | 0; //@line 25029
   HEAP32[$493 >> 2] = $2; //@line 25030
   $494 = $ReallocAsyncCtx4 + 8 | 0; //@line 25031
   HEAP32[$494 >> 2] = $4; //@line 25032
   $495 = $ReallocAsyncCtx4 + 12 | 0; //@line 25033
   HEAP32[$495 >> 2] = $6; //@line 25034
   $496 = $ReallocAsyncCtx4 + 16 | 0; //@line 25035
   HEAP32[$496 >> 2] = $8; //@line 25036
   $497 = $ReallocAsyncCtx4 + 20 | 0; //@line 25037
   HEAP32[$497 >> 2] = $12; //@line 25038
   $498 = $ReallocAsyncCtx4 + 24 | 0; //@line 25039
   HEAP32[$498 >> 2] = $14; //@line 25040
   $499 = $ReallocAsyncCtx4 + 28 | 0; //@line 25041
   HEAP32[$499 >> 2] = $16; //@line 25042
   $500 = $ReallocAsyncCtx4 + 32 | 0; //@line 25043
   HEAP32[$500 >> 2] = $18; //@line 25044
   $501 = $ReallocAsyncCtx4 + 36 | 0; //@line 25045
   HEAP32[$501 >> 2] = $20; //@line 25046
   $502 = $ReallocAsyncCtx4 + 40 | 0; //@line 25047
   HEAP32[$502 >> 2] = $22; //@line 25048
   $503 = $ReallocAsyncCtx4 + 44 | 0; //@line 25049
   HEAP32[$503 >> 2] = $24; //@line 25050
   $504 = $ReallocAsyncCtx4 + 48 | 0; //@line 25051
   HEAP32[$504 >> 2] = $26; //@line 25052
   $505 = $ReallocAsyncCtx4 + 52 | 0; //@line 25053
   HEAP32[$505 >> 2] = $28; //@line 25054
   $506 = $ReallocAsyncCtx4 + 56 | 0; //@line 25055
   HEAP32[$506 >> 2] = $30; //@line 25056
   $507 = $ReallocAsyncCtx4 + 60 | 0; //@line 25057
   HEAP32[$507 >> 2] = $32; //@line 25058
   $508 = $ReallocAsyncCtx4 + 64 | 0; //@line 25059
   HEAP32[$508 >> 2] = $34; //@line 25060
   $509 = $ReallocAsyncCtx4 + 68 | 0; //@line 25061
   HEAP32[$509 >> 2] = $36; //@line 25062
   $510 = $ReallocAsyncCtx4 + 72 | 0; //@line 25063
   HEAP32[$510 >> 2] = $38; //@line 25064
   $511 = $ReallocAsyncCtx4 + 76 | 0; //@line 25065
   HEAP32[$511 >> 2] = $40; //@line 25066
   $512 = $ReallocAsyncCtx4 + 80 | 0; //@line 25067
   HEAP32[$512 >> 2] = $42; //@line 25068
   $513 = $ReallocAsyncCtx4 + 84 | 0; //@line 25069
   HEAP32[$513 >> 2] = $44; //@line 25070
   $514 = $ReallocAsyncCtx4 + 88 | 0; //@line 25071
   HEAP32[$514 >> 2] = $46; //@line 25072
   $515 = $ReallocAsyncCtx4 + 92 | 0; //@line 25073
   HEAP32[$515 >> 2] = $48; //@line 25074
   $516 = $ReallocAsyncCtx4 + 96 | 0; //@line 25075
   HEAP32[$516 >> 2] = $50; //@line 25076
   $517 = $ReallocAsyncCtx4 + 100 | 0; //@line 25077
   HEAP32[$517 >> 2] = $52; //@line 25078
   $518 = $ReallocAsyncCtx4 + 104 | 0; //@line 25079
   HEAP32[$518 >> 2] = $54; //@line 25080
   $519 = $ReallocAsyncCtx4 + 108 | 0; //@line 25081
   HEAP32[$519 >> 2] = $56; //@line 25082
   $520 = $ReallocAsyncCtx4 + 112 | 0; //@line 25083
   HEAP32[$520 >> 2] = $58; //@line 25084
   $521 = $ReallocAsyncCtx4 + 116 | 0; //@line 25085
   HEAP32[$521 >> 2] = $60; //@line 25086
   $522 = $ReallocAsyncCtx4 + 120 | 0; //@line 25087
   HEAP32[$522 >> 2] = $62; //@line 25088
   $523 = $ReallocAsyncCtx4 + 124 | 0; //@line 25089
   HEAP32[$523 >> 2] = $64; //@line 25090
   $524 = $ReallocAsyncCtx4 + 128 | 0; //@line 25091
   HEAP32[$524 >> 2] = $66; //@line 25092
   $525 = $ReallocAsyncCtx4 + 132 | 0; //@line 25093
   HEAP32[$525 >> 2] = $68; //@line 25094
   $526 = $ReallocAsyncCtx4 + 136 | 0; //@line 25095
   HEAP32[$526 >> 2] = $70; //@line 25096
   $527 = $ReallocAsyncCtx4 + 140 | 0; //@line 25097
   HEAP32[$527 >> 2] = $72; //@line 25098
   $528 = $ReallocAsyncCtx4 + 144 | 0; //@line 25099
   HEAP32[$528 >> 2] = $74; //@line 25100
   $529 = $ReallocAsyncCtx4 + 148 | 0; //@line 25101
   HEAP32[$529 >> 2] = $76; //@line 25102
   $530 = $ReallocAsyncCtx4 + 152 | 0; //@line 25103
   HEAP32[$530 >> 2] = $78; //@line 25104
   $531 = $ReallocAsyncCtx4 + 156 | 0; //@line 25105
   HEAP32[$531 >> 2] = $80; //@line 25106
   $532 = $ReallocAsyncCtx4 + 160 | 0; //@line 25107
   HEAP32[$532 >> 2] = $82; //@line 25108
   $533 = $ReallocAsyncCtx4 + 164 | 0; //@line 25109
   HEAP8[$533 >> 0] = $478; //@line 25110
   $534 = $ReallocAsyncCtx4 + 168 | 0; //@line 25111
   HEAP32[$534 >> 2] = $84; //@line 25112
   $535 = $ReallocAsyncCtx4 + 172 | 0; //@line 25113
   HEAP32[$535 >> 2] = $86; //@line 25114
   $536 = $ReallocAsyncCtx4 + 176 | 0; //@line 25115
   HEAP32[$536 >> 2] = $88; //@line 25116
   $537 = $ReallocAsyncCtx4 + 180 | 0; //@line 25117
   HEAP32[$537 >> 2] = $90; //@line 25118
   $538 = $ReallocAsyncCtx4 + 184 | 0; //@line 25119
   HEAP32[$538 >> 2] = $92; //@line 25120
   $539 = $ReallocAsyncCtx4 + 188 | 0; //@line 25121
   HEAP32[$539 >> 2] = $94; //@line 25122
   $540 = $ReallocAsyncCtx4 + 192 | 0; //@line 25123
   HEAP32[$540 >> 2] = $96; //@line 25124
   $541 = $ReallocAsyncCtx4 + 196 | 0; //@line 25125
   HEAP32[$541 >> 2] = $98; //@line 25126
   $542 = $ReallocAsyncCtx4 + 200 | 0; //@line 25127
   HEAP32[$542 >> 2] = $100; //@line 25128
   $543 = $ReallocAsyncCtx4 + 204 | 0; //@line 25129
   HEAP32[$543 >> 2] = $102; //@line 25130
   $544 = $ReallocAsyncCtx4 + 208 | 0; //@line 25131
   HEAP32[$544 >> 2] = $104; //@line 25132
   $545 = $ReallocAsyncCtx4 + 212 | 0; //@line 25133
   HEAP32[$545 >> 2] = $106; //@line 25134
   $546 = $ReallocAsyncCtx4 + 216 | 0; //@line 25135
   HEAP32[$546 >> 2] = $108; //@line 25136
   $547 = $ReallocAsyncCtx4 + 220 | 0; //@line 25137
   HEAP32[$547 >> 2] = $110; //@line 25138
   $548 = $ReallocAsyncCtx4 + 224 | 0; //@line 25139
   HEAP32[$548 >> 2] = $112; //@line 25140
   $549 = $ReallocAsyncCtx4 + 228 | 0; //@line 25141
   HEAP32[$549 >> 2] = $114; //@line 25142
   $550 = $ReallocAsyncCtx4 + 232 | 0; //@line 25143
   HEAP32[$550 >> 2] = $116; //@line 25144
   $551 = $ReallocAsyncCtx4 + 236 | 0; //@line 25145
   HEAP32[$551 >> 2] = $118; //@line 25146
   $552 = $ReallocAsyncCtx4 + 240 | 0; //@line 25147
   HEAP32[$552 >> 2] = $120; //@line 25148
   $553 = $ReallocAsyncCtx4 + 244 | 0; //@line 25149
   HEAP32[$553 >> 2] = $122; //@line 25150
   $554 = $ReallocAsyncCtx4 + 248 | 0; //@line 25151
   HEAP8[$554 >> 0] = $124; //@line 25152
   $555 = $ReallocAsyncCtx4 + 249 | 0; //@line 25153
   HEAP8[$555 >> 0] = $126; //@line 25154
   $556 = $ReallocAsyncCtx4 + 252 | 0; //@line 25155
   HEAP32[$556 >> 2] = $128; //@line 25156
   $557 = $ReallocAsyncCtx4 + 256 | 0; //@line 25157
   HEAP8[$557 >> 0] = $130; //@line 25158
   $558 = $ReallocAsyncCtx4 + 260 | 0; //@line 25159
   HEAP32[$558 >> 2] = $132; //@line 25160
   $559 = $ReallocAsyncCtx4 + 264 | 0; //@line 25161
   HEAP32[$559 >> 2] = $$096$be; //@line 25162
   $560 = $ReallocAsyncCtx4 + 268 | 0; //@line 25163
   HEAP32[$560 >> 2] = $134; //@line 25164
   sp = STACKTOP; //@line 25165
   return;
  }
  HEAP8[___async_retval >> 0] = $492 & 1; //@line 25170
  ___async_unwind = 0; //@line 25171
  HEAP32[$ReallocAsyncCtx4 >> 2] = 490; //@line 25172
  $493 = $ReallocAsyncCtx4 + 4 | 0; //@line 25173
  HEAP32[$493 >> 2] = $2; //@line 25174
  $494 = $ReallocAsyncCtx4 + 8 | 0; //@line 25175
  HEAP32[$494 >> 2] = $4; //@line 25176
  $495 = $ReallocAsyncCtx4 + 12 | 0; //@line 25177
  HEAP32[$495 >> 2] = $6; //@line 25178
  $496 = $ReallocAsyncCtx4 + 16 | 0; //@line 25179
  HEAP32[$496 >> 2] = $8; //@line 25180
  $497 = $ReallocAsyncCtx4 + 20 | 0; //@line 25181
  HEAP32[$497 >> 2] = $12; //@line 25182
  $498 = $ReallocAsyncCtx4 + 24 | 0; //@line 25183
  HEAP32[$498 >> 2] = $14; //@line 25184
  $499 = $ReallocAsyncCtx4 + 28 | 0; //@line 25185
  HEAP32[$499 >> 2] = $16; //@line 25186
  $500 = $ReallocAsyncCtx4 + 32 | 0; //@line 25187
  HEAP32[$500 >> 2] = $18; //@line 25188
  $501 = $ReallocAsyncCtx4 + 36 | 0; //@line 25189
  HEAP32[$501 >> 2] = $20; //@line 25190
  $502 = $ReallocAsyncCtx4 + 40 | 0; //@line 25191
  HEAP32[$502 >> 2] = $22; //@line 25192
  $503 = $ReallocAsyncCtx4 + 44 | 0; //@line 25193
  HEAP32[$503 >> 2] = $24; //@line 25194
  $504 = $ReallocAsyncCtx4 + 48 | 0; //@line 25195
  HEAP32[$504 >> 2] = $26; //@line 25196
  $505 = $ReallocAsyncCtx4 + 52 | 0; //@line 25197
  HEAP32[$505 >> 2] = $28; //@line 25198
  $506 = $ReallocAsyncCtx4 + 56 | 0; //@line 25199
  HEAP32[$506 >> 2] = $30; //@line 25200
  $507 = $ReallocAsyncCtx4 + 60 | 0; //@line 25201
  HEAP32[$507 >> 2] = $32; //@line 25202
  $508 = $ReallocAsyncCtx4 + 64 | 0; //@line 25203
  HEAP32[$508 >> 2] = $34; //@line 25204
  $509 = $ReallocAsyncCtx4 + 68 | 0; //@line 25205
  HEAP32[$509 >> 2] = $36; //@line 25206
  $510 = $ReallocAsyncCtx4 + 72 | 0; //@line 25207
  HEAP32[$510 >> 2] = $38; //@line 25208
  $511 = $ReallocAsyncCtx4 + 76 | 0; //@line 25209
  HEAP32[$511 >> 2] = $40; //@line 25210
  $512 = $ReallocAsyncCtx4 + 80 | 0; //@line 25211
  HEAP32[$512 >> 2] = $42; //@line 25212
  $513 = $ReallocAsyncCtx4 + 84 | 0; //@line 25213
  HEAP32[$513 >> 2] = $44; //@line 25214
  $514 = $ReallocAsyncCtx4 + 88 | 0; //@line 25215
  HEAP32[$514 >> 2] = $46; //@line 25216
  $515 = $ReallocAsyncCtx4 + 92 | 0; //@line 25217
  HEAP32[$515 >> 2] = $48; //@line 25218
  $516 = $ReallocAsyncCtx4 + 96 | 0; //@line 25219
  HEAP32[$516 >> 2] = $50; //@line 25220
  $517 = $ReallocAsyncCtx4 + 100 | 0; //@line 25221
  HEAP32[$517 >> 2] = $52; //@line 25222
  $518 = $ReallocAsyncCtx4 + 104 | 0; //@line 25223
  HEAP32[$518 >> 2] = $54; //@line 25224
  $519 = $ReallocAsyncCtx4 + 108 | 0; //@line 25225
  HEAP32[$519 >> 2] = $56; //@line 25226
  $520 = $ReallocAsyncCtx4 + 112 | 0; //@line 25227
  HEAP32[$520 >> 2] = $58; //@line 25228
  $521 = $ReallocAsyncCtx4 + 116 | 0; //@line 25229
  HEAP32[$521 >> 2] = $60; //@line 25230
  $522 = $ReallocAsyncCtx4 + 120 | 0; //@line 25231
  HEAP32[$522 >> 2] = $62; //@line 25232
  $523 = $ReallocAsyncCtx4 + 124 | 0; //@line 25233
  HEAP32[$523 >> 2] = $64; //@line 25234
  $524 = $ReallocAsyncCtx4 + 128 | 0; //@line 25235
  HEAP32[$524 >> 2] = $66; //@line 25236
  $525 = $ReallocAsyncCtx4 + 132 | 0; //@line 25237
  HEAP32[$525 >> 2] = $68; //@line 25238
  $526 = $ReallocAsyncCtx4 + 136 | 0; //@line 25239
  HEAP32[$526 >> 2] = $70; //@line 25240
  $527 = $ReallocAsyncCtx4 + 140 | 0; //@line 25241
  HEAP32[$527 >> 2] = $72; //@line 25242
  $528 = $ReallocAsyncCtx4 + 144 | 0; //@line 25243
  HEAP32[$528 >> 2] = $74; //@line 25244
  $529 = $ReallocAsyncCtx4 + 148 | 0; //@line 25245
  HEAP32[$529 >> 2] = $76; //@line 25246
  $530 = $ReallocAsyncCtx4 + 152 | 0; //@line 25247
  HEAP32[$530 >> 2] = $78; //@line 25248
  $531 = $ReallocAsyncCtx4 + 156 | 0; //@line 25249
  HEAP32[$531 >> 2] = $80; //@line 25250
  $532 = $ReallocAsyncCtx4 + 160 | 0; //@line 25251
  HEAP32[$532 >> 2] = $82; //@line 25252
  $533 = $ReallocAsyncCtx4 + 164 | 0; //@line 25253
  HEAP8[$533 >> 0] = $478; //@line 25254
  $534 = $ReallocAsyncCtx4 + 168 | 0; //@line 25255
  HEAP32[$534 >> 2] = $84; //@line 25256
  $535 = $ReallocAsyncCtx4 + 172 | 0; //@line 25257
  HEAP32[$535 >> 2] = $86; //@line 25258
  $536 = $ReallocAsyncCtx4 + 176 | 0; //@line 25259
  HEAP32[$536 >> 2] = $88; //@line 25260
  $537 = $ReallocAsyncCtx4 + 180 | 0; //@line 25261
  HEAP32[$537 >> 2] = $90; //@line 25262
  $538 = $ReallocAsyncCtx4 + 184 | 0; //@line 25263
  HEAP32[$538 >> 2] = $92; //@line 25264
  $539 = $ReallocAsyncCtx4 + 188 | 0; //@line 25265
  HEAP32[$539 >> 2] = $94; //@line 25266
  $540 = $ReallocAsyncCtx4 + 192 | 0; //@line 25267
  HEAP32[$540 >> 2] = $96; //@line 25268
  $541 = $ReallocAsyncCtx4 + 196 | 0; //@line 25269
  HEAP32[$541 >> 2] = $98; //@line 25270
  $542 = $ReallocAsyncCtx4 + 200 | 0; //@line 25271
  HEAP32[$542 >> 2] = $100; //@line 25272
  $543 = $ReallocAsyncCtx4 + 204 | 0; //@line 25273
  HEAP32[$543 >> 2] = $102; //@line 25274
  $544 = $ReallocAsyncCtx4 + 208 | 0; //@line 25275
  HEAP32[$544 >> 2] = $104; //@line 25276
  $545 = $ReallocAsyncCtx4 + 212 | 0; //@line 25277
  HEAP32[$545 >> 2] = $106; //@line 25278
  $546 = $ReallocAsyncCtx4 + 216 | 0; //@line 25279
  HEAP32[$546 >> 2] = $108; //@line 25280
  $547 = $ReallocAsyncCtx4 + 220 | 0; //@line 25281
  HEAP32[$547 >> 2] = $110; //@line 25282
  $548 = $ReallocAsyncCtx4 + 224 | 0; //@line 25283
  HEAP32[$548 >> 2] = $112; //@line 25284
  $549 = $ReallocAsyncCtx4 + 228 | 0; //@line 25285
  HEAP32[$549 >> 2] = $114; //@line 25286
  $550 = $ReallocAsyncCtx4 + 232 | 0; //@line 25287
  HEAP32[$550 >> 2] = $116; //@line 25288
  $551 = $ReallocAsyncCtx4 + 236 | 0; //@line 25289
  HEAP32[$551 >> 2] = $118; //@line 25290
  $552 = $ReallocAsyncCtx4 + 240 | 0; //@line 25291
  HEAP32[$552 >> 2] = $120; //@line 25292
  $553 = $ReallocAsyncCtx4 + 244 | 0; //@line 25293
  HEAP32[$553 >> 2] = $122; //@line 25294
  $554 = $ReallocAsyncCtx4 + 248 | 0; //@line 25295
  HEAP8[$554 >> 0] = $124; //@line 25296
  $555 = $ReallocAsyncCtx4 + 249 | 0; //@line 25297
  HEAP8[$555 >> 0] = $126; //@line 25298
  $556 = $ReallocAsyncCtx4 + 252 | 0; //@line 25299
  HEAP32[$556 >> 2] = $128; //@line 25300
  $557 = $ReallocAsyncCtx4 + 256 | 0; //@line 25301
  HEAP8[$557 >> 0] = $130; //@line 25302
  $558 = $ReallocAsyncCtx4 + 260 | 0; //@line 25303
  HEAP32[$558 >> 2] = $132; //@line 25304
  $559 = $ReallocAsyncCtx4 + 264 | 0; //@line 25305
  HEAP32[$559 >> 2] = $$096$be; //@line 25306
  $560 = $ReallocAsyncCtx4 + 268 | 0; //@line 25307
  HEAP32[$560 >> 2] = $134; //@line 25308
  sp = STACKTOP; //@line 25309
  return;
 } else if ((label | 0) == 24) {
  HEAP8[$104 >> 0] = HEAP8[$120 + ($137 & 255) >> 0] | 0; //@line 25317
  $578 = $$0$be + 5 << 24 >> 24; //@line 25330
  HEAP32[$100 >> 2] = (HEAPU8[$120 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$120 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$120 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 25338
  $588 = HEAP32[(HEAP32[$112 >> 2] | 0) + 48 >> 2] | 0; //@line 25341
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(268) | 0; //@line 25342
  $589 = FUNCTION_TABLE_iii[$588 & 31]($134, $16) | 0; //@line 25343
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 491; //@line 25346
   $590 = $ReallocAsyncCtx5 + 4 | 0; //@line 25347
   HEAP32[$590 >> 2] = $2; //@line 25348
   $591 = $ReallocAsyncCtx5 + 8 | 0; //@line 25349
   HEAP32[$591 >> 2] = $4; //@line 25350
   $592 = $ReallocAsyncCtx5 + 12 | 0; //@line 25351
   HEAP32[$592 >> 2] = $6; //@line 25352
   $593 = $ReallocAsyncCtx5 + 16 | 0; //@line 25353
   HEAP32[$593 >> 2] = $8; //@line 25354
   $594 = $ReallocAsyncCtx5 + 20 | 0; //@line 25355
   HEAP8[$594 >> 0] = $578; //@line 25356
   $595 = $ReallocAsyncCtx5 + 24 | 0; //@line 25357
   HEAP32[$595 >> 2] = $12; //@line 25358
   $596 = $ReallocAsyncCtx5 + 28 | 0; //@line 25359
   HEAP32[$596 >> 2] = $14; //@line 25360
   $597 = $ReallocAsyncCtx5 + 32 | 0; //@line 25361
   HEAP32[$597 >> 2] = $16; //@line 25362
   $598 = $ReallocAsyncCtx5 + 36 | 0; //@line 25363
   HEAP32[$598 >> 2] = $18; //@line 25364
   $599 = $ReallocAsyncCtx5 + 40 | 0; //@line 25365
   HEAP32[$599 >> 2] = $20; //@line 25366
   $600 = $ReallocAsyncCtx5 + 44 | 0; //@line 25367
   HEAP32[$600 >> 2] = $22; //@line 25368
   $601 = $ReallocAsyncCtx5 + 48 | 0; //@line 25369
   HEAP32[$601 >> 2] = $24; //@line 25370
   $602 = $ReallocAsyncCtx5 + 52 | 0; //@line 25371
   HEAP32[$602 >> 2] = $26; //@line 25372
   $603 = $ReallocAsyncCtx5 + 56 | 0; //@line 25373
   HEAP32[$603 >> 2] = $28; //@line 25374
   $604 = $ReallocAsyncCtx5 + 60 | 0; //@line 25375
   HEAP32[$604 >> 2] = $30; //@line 25376
   $605 = $ReallocAsyncCtx5 + 64 | 0; //@line 25377
   HEAP32[$605 >> 2] = $32; //@line 25378
   $606 = $ReallocAsyncCtx5 + 68 | 0; //@line 25379
   HEAP32[$606 >> 2] = $34; //@line 25380
   $607 = $ReallocAsyncCtx5 + 72 | 0; //@line 25381
   HEAP32[$607 >> 2] = $36; //@line 25382
   $608 = $ReallocAsyncCtx5 + 76 | 0; //@line 25383
   HEAP32[$608 >> 2] = $38; //@line 25384
   $609 = $ReallocAsyncCtx5 + 80 | 0; //@line 25385
   HEAP32[$609 >> 2] = $40; //@line 25386
   $610 = $ReallocAsyncCtx5 + 84 | 0; //@line 25387
   HEAP32[$610 >> 2] = $42; //@line 25388
   $611 = $ReallocAsyncCtx5 + 88 | 0; //@line 25389
   HEAP32[$611 >> 2] = $44; //@line 25390
   $612 = $ReallocAsyncCtx5 + 92 | 0; //@line 25391
   HEAP32[$612 >> 2] = $46; //@line 25392
   $613 = $ReallocAsyncCtx5 + 96 | 0; //@line 25393
   HEAP32[$613 >> 2] = $48; //@line 25394
   $614 = $ReallocAsyncCtx5 + 100 | 0; //@line 25395
   HEAP32[$614 >> 2] = $50; //@line 25396
   $615 = $ReallocAsyncCtx5 + 104 | 0; //@line 25397
   HEAP32[$615 >> 2] = $52; //@line 25398
   $616 = $ReallocAsyncCtx5 + 108 | 0; //@line 25399
   HEAP32[$616 >> 2] = $54; //@line 25400
   $617 = $ReallocAsyncCtx5 + 112 | 0; //@line 25401
   HEAP32[$617 >> 2] = $56; //@line 25402
   $618 = $ReallocAsyncCtx5 + 116 | 0; //@line 25403
   HEAP32[$618 >> 2] = $58; //@line 25404
   $619 = $ReallocAsyncCtx5 + 120 | 0; //@line 25405
   HEAP32[$619 >> 2] = $60; //@line 25406
   $620 = $ReallocAsyncCtx5 + 124 | 0; //@line 25407
   HEAP32[$620 >> 2] = $62; //@line 25408
   $621 = $ReallocAsyncCtx5 + 128 | 0; //@line 25409
   HEAP32[$621 >> 2] = $64; //@line 25410
   $622 = $ReallocAsyncCtx5 + 132 | 0; //@line 25411
   HEAP32[$622 >> 2] = $66; //@line 25412
   $623 = $ReallocAsyncCtx5 + 136 | 0; //@line 25413
   HEAP32[$623 >> 2] = $68; //@line 25414
   $624 = $ReallocAsyncCtx5 + 140 | 0; //@line 25415
   HEAP32[$624 >> 2] = $70; //@line 25416
   $625 = $ReallocAsyncCtx5 + 144 | 0; //@line 25417
   HEAP32[$625 >> 2] = $72; //@line 25418
   $626 = $ReallocAsyncCtx5 + 148 | 0; //@line 25419
   HEAP32[$626 >> 2] = $74; //@line 25420
   $627 = $ReallocAsyncCtx5 + 152 | 0; //@line 25421
   HEAP32[$627 >> 2] = $76; //@line 25422
   $628 = $ReallocAsyncCtx5 + 156 | 0; //@line 25423
   HEAP32[$628 >> 2] = $78; //@line 25424
   $629 = $ReallocAsyncCtx5 + 160 | 0; //@line 25425
   HEAP32[$629 >> 2] = $80; //@line 25426
   $630 = $ReallocAsyncCtx5 + 164 | 0; //@line 25427
   HEAP32[$630 >> 2] = $82; //@line 25428
   $631 = $ReallocAsyncCtx5 + 168 | 0; //@line 25429
   HEAP32[$631 >> 2] = $84; //@line 25430
   $632 = $ReallocAsyncCtx5 + 172 | 0; //@line 25431
   HEAP32[$632 >> 2] = $86; //@line 25432
   $633 = $ReallocAsyncCtx5 + 176 | 0; //@line 25433
   HEAP32[$633 >> 2] = $88; //@line 25434
   $634 = $ReallocAsyncCtx5 + 180 | 0; //@line 25435
   HEAP32[$634 >> 2] = $90; //@line 25436
   $635 = $ReallocAsyncCtx5 + 184 | 0; //@line 25437
   HEAP32[$635 >> 2] = $92; //@line 25438
   $636 = $ReallocAsyncCtx5 + 188 | 0; //@line 25439
   HEAP32[$636 >> 2] = $94; //@line 25440
   $637 = $ReallocAsyncCtx5 + 192 | 0; //@line 25441
   HEAP32[$637 >> 2] = $96; //@line 25442
   $638 = $ReallocAsyncCtx5 + 196 | 0; //@line 25443
   HEAP32[$638 >> 2] = $98; //@line 25444
   $639 = $ReallocAsyncCtx5 + 200 | 0; //@line 25445
   HEAP32[$639 >> 2] = $100; //@line 25446
   $640 = $ReallocAsyncCtx5 + 204 | 0; //@line 25447
   HEAP32[$640 >> 2] = $102; //@line 25448
   $641 = $ReallocAsyncCtx5 + 208 | 0; //@line 25449
   HEAP32[$641 >> 2] = $104; //@line 25450
   $642 = $ReallocAsyncCtx5 + 212 | 0; //@line 25451
   HEAP32[$642 >> 2] = $106; //@line 25452
   $643 = $ReallocAsyncCtx5 + 216 | 0; //@line 25453
   HEAP32[$643 >> 2] = $108; //@line 25454
   $644 = $ReallocAsyncCtx5 + 220 | 0; //@line 25455
   HEAP32[$644 >> 2] = $110; //@line 25456
   $645 = $ReallocAsyncCtx5 + 224 | 0; //@line 25457
   HEAP32[$645 >> 2] = $112; //@line 25458
   $646 = $ReallocAsyncCtx5 + 228 | 0; //@line 25459
   HEAP32[$646 >> 2] = $114; //@line 25460
   $647 = $ReallocAsyncCtx5 + 232 | 0; //@line 25461
   HEAP32[$647 >> 2] = $116; //@line 25462
   $648 = $ReallocAsyncCtx5 + 236 | 0; //@line 25463
   HEAP32[$648 >> 2] = $118; //@line 25464
   $649 = $ReallocAsyncCtx5 + 240 | 0; //@line 25465
   HEAP32[$649 >> 2] = $120; //@line 25466
   $650 = $ReallocAsyncCtx5 + 244 | 0; //@line 25467
   HEAP32[$650 >> 2] = $122; //@line 25468
   $651 = $ReallocAsyncCtx5 + 248 | 0; //@line 25469
   HEAP8[$651 >> 0] = $124; //@line 25470
   $652 = $ReallocAsyncCtx5 + 249 | 0; //@line 25471
   HEAP8[$652 >> 0] = $126; //@line 25472
   $653 = $ReallocAsyncCtx5 + 252 | 0; //@line 25473
   HEAP32[$653 >> 2] = $128; //@line 25474
   $654 = $ReallocAsyncCtx5 + 256 | 0; //@line 25475
   HEAP8[$654 >> 0] = $130; //@line 25476
   $655 = $ReallocAsyncCtx5 + 260 | 0; //@line 25477
   HEAP32[$655 >> 2] = $132; //@line 25478
   $656 = $ReallocAsyncCtx5 + 264 | 0; //@line 25479
   HEAP32[$656 >> 2] = $134; //@line 25480
   sp = STACKTOP; //@line 25481
   return;
  }
  HEAP8[___async_retval >> 0] = $589; //@line 25485
  ___async_unwind = 0; //@line 25486
  HEAP32[$ReallocAsyncCtx5 >> 2] = 491; //@line 25487
  $590 = $ReallocAsyncCtx5 + 4 | 0; //@line 25488
  HEAP32[$590 >> 2] = $2; //@line 25489
  $591 = $ReallocAsyncCtx5 + 8 | 0; //@line 25490
  HEAP32[$591 >> 2] = $4; //@line 25491
  $592 = $ReallocAsyncCtx5 + 12 | 0; //@line 25492
  HEAP32[$592 >> 2] = $6; //@line 25493
  $593 = $ReallocAsyncCtx5 + 16 | 0; //@line 25494
  HEAP32[$593 >> 2] = $8; //@line 25495
  $594 = $ReallocAsyncCtx5 + 20 | 0; //@line 25496
  HEAP8[$594 >> 0] = $578; //@line 25497
  $595 = $ReallocAsyncCtx5 + 24 | 0; //@line 25498
  HEAP32[$595 >> 2] = $12; //@line 25499
  $596 = $ReallocAsyncCtx5 + 28 | 0; //@line 25500
  HEAP32[$596 >> 2] = $14; //@line 25501
  $597 = $ReallocAsyncCtx5 + 32 | 0; //@line 25502
  HEAP32[$597 >> 2] = $16; //@line 25503
  $598 = $ReallocAsyncCtx5 + 36 | 0; //@line 25504
  HEAP32[$598 >> 2] = $18; //@line 25505
  $599 = $ReallocAsyncCtx5 + 40 | 0; //@line 25506
  HEAP32[$599 >> 2] = $20; //@line 25507
  $600 = $ReallocAsyncCtx5 + 44 | 0; //@line 25508
  HEAP32[$600 >> 2] = $22; //@line 25509
  $601 = $ReallocAsyncCtx5 + 48 | 0; //@line 25510
  HEAP32[$601 >> 2] = $24; //@line 25511
  $602 = $ReallocAsyncCtx5 + 52 | 0; //@line 25512
  HEAP32[$602 >> 2] = $26; //@line 25513
  $603 = $ReallocAsyncCtx5 + 56 | 0; //@line 25514
  HEAP32[$603 >> 2] = $28; //@line 25515
  $604 = $ReallocAsyncCtx5 + 60 | 0; //@line 25516
  HEAP32[$604 >> 2] = $30; //@line 25517
  $605 = $ReallocAsyncCtx5 + 64 | 0; //@line 25518
  HEAP32[$605 >> 2] = $32; //@line 25519
  $606 = $ReallocAsyncCtx5 + 68 | 0; //@line 25520
  HEAP32[$606 >> 2] = $34; //@line 25521
  $607 = $ReallocAsyncCtx5 + 72 | 0; //@line 25522
  HEAP32[$607 >> 2] = $36; //@line 25523
  $608 = $ReallocAsyncCtx5 + 76 | 0; //@line 25524
  HEAP32[$608 >> 2] = $38; //@line 25525
  $609 = $ReallocAsyncCtx5 + 80 | 0; //@line 25526
  HEAP32[$609 >> 2] = $40; //@line 25527
  $610 = $ReallocAsyncCtx5 + 84 | 0; //@line 25528
  HEAP32[$610 >> 2] = $42; //@line 25529
  $611 = $ReallocAsyncCtx5 + 88 | 0; //@line 25530
  HEAP32[$611 >> 2] = $44; //@line 25531
  $612 = $ReallocAsyncCtx5 + 92 | 0; //@line 25532
  HEAP32[$612 >> 2] = $46; //@line 25533
  $613 = $ReallocAsyncCtx5 + 96 | 0; //@line 25534
  HEAP32[$613 >> 2] = $48; //@line 25535
  $614 = $ReallocAsyncCtx5 + 100 | 0; //@line 25536
  HEAP32[$614 >> 2] = $50; //@line 25537
  $615 = $ReallocAsyncCtx5 + 104 | 0; //@line 25538
  HEAP32[$615 >> 2] = $52; //@line 25539
  $616 = $ReallocAsyncCtx5 + 108 | 0; //@line 25540
  HEAP32[$616 >> 2] = $54; //@line 25541
  $617 = $ReallocAsyncCtx5 + 112 | 0; //@line 25542
  HEAP32[$617 >> 2] = $56; //@line 25543
  $618 = $ReallocAsyncCtx5 + 116 | 0; //@line 25544
  HEAP32[$618 >> 2] = $58; //@line 25545
  $619 = $ReallocAsyncCtx5 + 120 | 0; //@line 25546
  HEAP32[$619 >> 2] = $60; //@line 25547
  $620 = $ReallocAsyncCtx5 + 124 | 0; //@line 25548
  HEAP32[$620 >> 2] = $62; //@line 25549
  $621 = $ReallocAsyncCtx5 + 128 | 0; //@line 25550
  HEAP32[$621 >> 2] = $64; //@line 25551
  $622 = $ReallocAsyncCtx5 + 132 | 0; //@line 25552
  HEAP32[$622 >> 2] = $66; //@line 25553
  $623 = $ReallocAsyncCtx5 + 136 | 0; //@line 25554
  HEAP32[$623 >> 2] = $68; //@line 25555
  $624 = $ReallocAsyncCtx5 + 140 | 0; //@line 25556
  HEAP32[$624 >> 2] = $70; //@line 25557
  $625 = $ReallocAsyncCtx5 + 144 | 0; //@line 25558
  HEAP32[$625 >> 2] = $72; //@line 25559
  $626 = $ReallocAsyncCtx5 + 148 | 0; //@line 25560
  HEAP32[$626 >> 2] = $74; //@line 25561
  $627 = $ReallocAsyncCtx5 + 152 | 0; //@line 25562
  HEAP32[$627 >> 2] = $76; //@line 25563
  $628 = $ReallocAsyncCtx5 + 156 | 0; //@line 25564
  HEAP32[$628 >> 2] = $78; //@line 25565
  $629 = $ReallocAsyncCtx5 + 160 | 0; //@line 25566
  HEAP32[$629 >> 2] = $80; //@line 25567
  $630 = $ReallocAsyncCtx5 + 164 | 0; //@line 25568
  HEAP32[$630 >> 2] = $82; //@line 25569
  $631 = $ReallocAsyncCtx5 + 168 | 0; //@line 25570
  HEAP32[$631 >> 2] = $84; //@line 25571
  $632 = $ReallocAsyncCtx5 + 172 | 0; //@line 25572
  HEAP32[$632 >> 2] = $86; //@line 25573
  $633 = $ReallocAsyncCtx5 + 176 | 0; //@line 25574
  HEAP32[$633 >> 2] = $88; //@line 25575
  $634 = $ReallocAsyncCtx5 + 180 | 0; //@line 25576
  HEAP32[$634 >> 2] = $90; //@line 25577
  $635 = $ReallocAsyncCtx5 + 184 | 0; //@line 25578
  HEAP32[$635 >> 2] = $92; //@line 25579
  $636 = $ReallocAsyncCtx5 + 188 | 0; //@line 25580
  HEAP32[$636 >> 2] = $94; //@line 25581
  $637 = $ReallocAsyncCtx5 + 192 | 0; //@line 25582
  HEAP32[$637 >> 2] = $96; //@line 25583
  $638 = $ReallocAsyncCtx5 + 196 | 0; //@line 25584
  HEAP32[$638 >> 2] = $98; //@line 25585
  $639 = $ReallocAsyncCtx5 + 200 | 0; //@line 25586
  HEAP32[$639 >> 2] = $100; //@line 25587
  $640 = $ReallocAsyncCtx5 + 204 | 0; //@line 25588
  HEAP32[$640 >> 2] = $102; //@line 25589
  $641 = $ReallocAsyncCtx5 + 208 | 0; //@line 25590
  HEAP32[$641 >> 2] = $104; //@line 25591
  $642 = $ReallocAsyncCtx5 + 212 | 0; //@line 25592
  HEAP32[$642 >> 2] = $106; //@line 25593
  $643 = $ReallocAsyncCtx5 + 216 | 0; //@line 25594
  HEAP32[$643 >> 2] = $108; //@line 25595
  $644 = $ReallocAsyncCtx5 + 220 | 0; //@line 25596
  HEAP32[$644 >> 2] = $110; //@line 25597
  $645 = $ReallocAsyncCtx5 + 224 | 0; //@line 25598
  HEAP32[$645 >> 2] = $112; //@line 25599
  $646 = $ReallocAsyncCtx5 + 228 | 0; //@line 25600
  HEAP32[$646 >> 2] = $114; //@line 25601
  $647 = $ReallocAsyncCtx5 + 232 | 0; //@line 25602
  HEAP32[$647 >> 2] = $116; //@line 25603
  $648 = $ReallocAsyncCtx5 + 236 | 0; //@line 25604
  HEAP32[$648 >> 2] = $118; //@line 25605
  $649 = $ReallocAsyncCtx5 + 240 | 0; //@line 25606
  HEAP32[$649 >> 2] = $120; //@line 25607
  $650 = $ReallocAsyncCtx5 + 244 | 0; //@line 25608
  HEAP32[$650 >> 2] = $122; //@line 25609
  $651 = $ReallocAsyncCtx5 + 248 | 0; //@line 25610
  HEAP8[$651 >> 0] = $124; //@line 25611
  $652 = $ReallocAsyncCtx5 + 249 | 0; //@line 25612
  HEAP8[$652 >> 0] = $126; //@line 25613
  $653 = $ReallocAsyncCtx5 + 252 | 0; //@line 25614
  HEAP32[$653 >> 2] = $128; //@line 25615
  $654 = $ReallocAsyncCtx5 + 256 | 0; //@line 25616
  HEAP8[$654 >> 0] = $130; //@line 25617
  $655 = $ReallocAsyncCtx5 + 260 | 0; //@line 25618
  HEAP32[$655 >> 2] = $132; //@line 25619
  $656 = $ReallocAsyncCtx5 + 264 | 0; //@line 25620
  HEAP32[$656 >> 2] = $134; //@line 25621
  sp = STACKTOP; //@line 25622
  return;
 } else if ((label | 0) == 31) {
  HEAP32[___async_retval >> 2] = $$096$be; //@line 25627
  return;
 }
}
function _malloc($0) {
 $0 = $0 | 0;
 var $$$0192$i = 0, $$$0193$i = 0, $$$4351$i = 0, $$$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i17$i = 0, $$0189$i = 0, $$0192$lcssa$i = 0, $$01926$i = 0, $$0193$lcssa$i = 0, $$01935$i = 0, $$0197 = 0, $$0199 = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$0211$i$i = 0, $$0212$i$i = 0, $$024367$i = 0, $$0287$i$i = 0, $$0288$i$i = 0, $$0289$i$i = 0, $$0295$i$i = 0, $$0296$i$i = 0, $$0342$i = 0, $$0344$i = 0, $$0345$i = 0, $$0347$i = 0, $$0353$i = 0, $$0358$i = 0, $$0359$i = 0, $$0361$i = 0, $$0362$i = 0, $$0368$i = 0, $$1196$i = 0, $$1198$i = 0, $$124466$i = 0, $$1291$i$i = 0, $$1293$i$i = 0, $$1343$i = 0, $$1348$i = 0, $$1363$i = 0, $$1370$i = 0, $$1374$i = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2355$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i203 = 0, $$3350$i = 0, $$3372$i = 0, $$4$lcssa$i = 0, $$4$ph$i = 0, $$414$i = 0, $$4236$i = 0, $$4351$lcssa$i = 0, $$435113$i = 0, $$4357$$4$i = 0, $$4357$ph$i = 0, $$435712$i = 0, $$723947$i = 0, $$748$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i19$iZ2D = 0, $$pre$phi$i211Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi11$i$iZ2D = 0, $$pre$phiZ2D = 0, $1 = 0, $1004 = 0, $101 = 0, $1010 = 0, $1013 = 0, $1014 = 0, $102 = 0, $1032 = 0, $1034 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1052 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $108 = 0, $112 = 0, $114 = 0, $115 = 0, $117 = 0, $119 = 0, $121 = 0, $123 = 0, $125 = 0, $127 = 0, $129 = 0, $134 = 0, $138 = 0, $14 = 0, $143 = 0, $146 = 0, $149 = 0, $150 = 0, $157 = 0, $159 = 0, $16 = 0, $162 = 0, $164 = 0, $167 = 0, $169 = 0, $17 = 0, $172 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $18 = 0, $181 = 0, $182 = 0, $184 = 0, $185 = 0, $19 = 0, $190 = 0, $191 = 0, $20 = 0, $204 = 0, $208 = 0, $214 = 0, $221 = 0, $225 = 0, $234 = 0, $235 = 0, $237 = 0, $238 = 0, $242 = 0, $243 = 0, $251 = 0, $252 = 0, $253 = 0, $255 = 0, $256 = 0, $261 = 0, $262 = 0, $265 = 0, $267 = 0, $27 = 0, $270 = 0, $275 = 0, $282 = 0, $292 = 0, $296 = 0, $30 = 0, $302 = 0, $306 = 0, $309 = 0, $313 = 0, $315 = 0, $316 = 0, $318 = 0, $320 = 0, $322 = 0, $324 = 0, $326 = 0, $328 = 0, $330 = 0, $34 = 0, $340 = 0, $341 = 0, $352 = 0, $354 = 0, $357 = 0, $359 = 0, $362 = 0, $364 = 0, $367 = 0, $37 = 0, $370 = 0, $371 = 0, $373 = 0, $374 = 0, $376 = 0, $377 = 0, $379 = 0, $380 = 0, $385 = 0, $386 = 0, $391 = 0, $399 = 0, $403 = 0, $409 = 0, $41 = 0, $416 = 0, $420 = 0, $428 = 0, $431 = 0, $432 = 0, $433 = 0, $437 = 0, $438 = 0, $44 = 0, $444 = 0, $449 = 0, $450 = 0, $453 = 0, $455 = 0, $458 = 0, $463 = 0, $469 = 0, $47 = 0, $471 = 0, $473 = 0, $475 = 0, $49 = 0, $492 = 0, $494 = 0, $50 = 0, $501 = 0, $502 = 0, $503 = 0, $512 = 0, $514 = 0, $515 = 0, $517 = 0, $52 = 0, $526 = 0, $530 = 0, $532 = 0, $533 = 0, $534 = 0, $54 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $552 = 0, $554 = 0, $555 = 0, $56 = 0, $561 = 0, $563 = 0, $565 = 0, $570 = 0, $572 = 0, $574 = 0, $575 = 0, $576 = 0, $58 = 0, $584 = 0, $585 = 0, $588 = 0, $592 = 0, $595 = 0, $597 = 0, $6 = 0, $60 = 0, $603 = 0, $607 = 0, $611 = 0, $62 = 0, $620 = 0, $621 = 0, $627 = 0, $629 = 0, $633 = 0, $636 = 0, $638 = 0, $64 = 0, $642 = 0, $644 = 0, $649 = 0, $650 = 0, $651 = 0, $657 = 0, $658 = 0, $659 = 0, $663 = 0, $67 = 0, $673 = 0, $675 = 0, $680 = 0, $681 = 0, $682 = 0, $688 = 0, $69 = 0, $690 = 0, $694 = 0, $7 = 0, $70 = 0, $700 = 0, $704 = 0, $71 = 0, $710 = 0, $712 = 0, $718 = 0, $72 = 0, $722 = 0, $723 = 0, $728 = 0, $73 = 0, $734 = 0, $739 = 0, $742 = 0, $743 = 0, $746 = 0, $748 = 0, $750 = 0, $753 = 0, $764 = 0, $769 = 0, $77 = 0, $771 = 0, $774 = 0, $776 = 0, $779 = 0, $782 = 0, $783 = 0, $784 = 0, $786 = 0, $788 = 0, $789 = 0, $791 = 0, $792 = 0, $797 = 0, $798 = 0, $8 = 0, $80 = 0, $812 = 0, $815 = 0, $816 = 0, $822 = 0, $83 = 0, $830 = 0, $836 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $845 = 0, $846 = 0, $852 = 0, $857 = 0, $858 = 0, $861 = 0, $863 = 0, $866 = 0, $87 = 0, $871 = 0, $877 = 0, $879 = 0, $881 = 0, $882 = 0, $9 = 0, $900 = 0, $902 = 0, $909 = 0, $910 = 0, $911 = 0, $919 = 0, $92 = 0, $923 = 0, $927 = 0, $929 = 0, $93 = 0, $935 = 0, $936 = 0, $938 = 0, $939 = 0, $940 = 0, $941 = 0, $943 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $956 = 0, $958 = 0, $96 = 0, $964 = 0, $969 = 0, $972 = 0, $973 = 0, $974 = 0, $978 = 0, $979 = 0, $98 = 0, $985 = 0, $990 = 0, $991 = 0, $994 = 0, $996 = 0, $999 = 0, label = 0, sp = 0, $958$looptemp = 0;
 sp = STACKTOP; //@line 7248
 STACKTOP = STACKTOP + 16 | 0; //@line 7249
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 7249
 $1 = sp; //@line 7250
 do {
  if ($0 >>> 0 < 245) {
   $6 = $0 >>> 0 < 11 ? 16 : $0 + 11 & -8; //@line 7257
   $7 = $6 >>> 3; //@line 7258
   $8 = HEAP32[5484] | 0; //@line 7259
   $9 = $8 >>> $7; //@line 7260
   if ($9 & 3 | 0) {
    $14 = ($9 & 1 ^ 1) + $7 | 0; //@line 7266
    $16 = 21976 + ($14 << 1 << 2) | 0; //@line 7268
    $17 = $16 + 8 | 0; //@line 7269
    $18 = HEAP32[$17 >> 2] | 0; //@line 7270
    $19 = $18 + 8 | 0; //@line 7271
    $20 = HEAP32[$19 >> 2] | 0; //@line 7272
    do {
     if (($20 | 0) == ($16 | 0)) {
      HEAP32[5484] = $8 & ~(1 << $14); //@line 7279
     } else {
      if ((HEAP32[5488] | 0) >>> 0 > $20 >>> 0) {
       _abort(); //@line 7284
      }
      $27 = $20 + 12 | 0; //@line 7287
      if ((HEAP32[$27 >> 2] | 0) == ($18 | 0)) {
       HEAP32[$27 >> 2] = $16; //@line 7291
       HEAP32[$17 >> 2] = $20; //@line 7292
       break;
      } else {
       _abort(); //@line 7295
      }
     }
    } while (0);
    $30 = $14 << 3; //@line 7300
    HEAP32[$18 + 4 >> 2] = $30 | 3; //@line 7303
    $34 = $18 + $30 + 4 | 0; //@line 7305
    HEAP32[$34 >> 2] = HEAP32[$34 >> 2] | 1; //@line 7308
    $$0 = $19; //@line 7309
    STACKTOP = sp; //@line 7310
    return $$0 | 0; //@line 7310
   }
   $37 = HEAP32[5486] | 0; //@line 7312
   if ($6 >>> 0 > $37 >>> 0) {
    if ($9 | 0) {
     $41 = 2 << $7; //@line 7318
     $44 = $9 << $7 & ($41 | 0 - $41); //@line 7321
     $47 = ($44 & 0 - $44) + -1 | 0; //@line 7324
     $49 = $47 >>> 12 & 16; //@line 7326
     $50 = $47 >>> $49; //@line 7327
     $52 = $50 >>> 5 & 8; //@line 7329
     $54 = $50 >>> $52; //@line 7331
     $56 = $54 >>> 2 & 4; //@line 7333
     $58 = $54 >>> $56; //@line 7335
     $60 = $58 >>> 1 & 2; //@line 7337
     $62 = $58 >>> $60; //@line 7339
     $64 = $62 >>> 1 & 1; //@line 7341
     $67 = ($52 | $49 | $56 | $60 | $64) + ($62 >>> $64) | 0; //@line 7344
     $69 = 21976 + ($67 << 1 << 2) | 0; //@line 7346
     $70 = $69 + 8 | 0; //@line 7347
     $71 = HEAP32[$70 >> 2] | 0; //@line 7348
     $72 = $71 + 8 | 0; //@line 7349
     $73 = HEAP32[$72 >> 2] | 0; //@line 7350
     do {
      if (($73 | 0) == ($69 | 0)) {
       $77 = $8 & ~(1 << $67); //@line 7356
       HEAP32[5484] = $77; //@line 7357
       $98 = $77; //@line 7358
      } else {
       if ((HEAP32[5488] | 0) >>> 0 > $73 >>> 0) {
        _abort(); //@line 7363
       }
       $80 = $73 + 12 | 0; //@line 7366
       if ((HEAP32[$80 >> 2] | 0) == ($71 | 0)) {
        HEAP32[$80 >> 2] = $69; //@line 7370
        HEAP32[$70 >> 2] = $73; //@line 7371
        $98 = $8; //@line 7372
        break;
       } else {
        _abort(); //@line 7375
       }
      }
     } while (0);
     $83 = $67 << 3; //@line 7380
     $84 = $83 - $6 | 0; //@line 7381
     HEAP32[$71 + 4 >> 2] = $6 | 3; //@line 7384
     $87 = $71 + $6 | 0; //@line 7385
     HEAP32[$87 + 4 >> 2] = $84 | 1; //@line 7388
     HEAP32[$71 + $83 >> 2] = $84; //@line 7390
     if ($37 | 0) {
      $92 = HEAP32[5489] | 0; //@line 7393
      $93 = $37 >>> 3; //@line 7394
      $95 = 21976 + ($93 << 1 << 2) | 0; //@line 7396
      $96 = 1 << $93; //@line 7397
      if (!($98 & $96)) {
       HEAP32[5484] = $98 | $96; //@line 7402
       $$0199 = $95; //@line 7404
       $$pre$phiZ2D = $95 + 8 | 0; //@line 7404
      } else {
       $101 = $95 + 8 | 0; //@line 7406
       $102 = HEAP32[$101 >> 2] | 0; //@line 7407
       if ((HEAP32[5488] | 0) >>> 0 > $102 >>> 0) {
        _abort(); //@line 7411
       } else {
        $$0199 = $102; //@line 7414
        $$pre$phiZ2D = $101; //@line 7414
       }
      }
      HEAP32[$$pre$phiZ2D >> 2] = $92; //@line 7417
      HEAP32[$$0199 + 12 >> 2] = $92; //@line 7419
      HEAP32[$92 + 8 >> 2] = $$0199; //@line 7421
      HEAP32[$92 + 12 >> 2] = $95; //@line 7423
     }
     HEAP32[5486] = $84; //@line 7425
     HEAP32[5489] = $87; //@line 7426
     $$0 = $72; //@line 7427
     STACKTOP = sp; //@line 7428
     return $$0 | 0; //@line 7428
    }
    $108 = HEAP32[5485] | 0; //@line 7430
    if (!$108) {
     $$0197 = $6; //@line 7433
    } else {
     $112 = ($108 & 0 - $108) + -1 | 0; //@line 7437
     $114 = $112 >>> 12 & 16; //@line 7439
     $115 = $112 >>> $114; //@line 7440
     $117 = $115 >>> 5 & 8; //@line 7442
     $119 = $115 >>> $117; //@line 7444
     $121 = $119 >>> 2 & 4; //@line 7446
     $123 = $119 >>> $121; //@line 7448
     $125 = $123 >>> 1 & 2; //@line 7450
     $127 = $123 >>> $125; //@line 7452
     $129 = $127 >>> 1 & 1; //@line 7454
     $134 = HEAP32[22240 + (($117 | $114 | $121 | $125 | $129) + ($127 >>> $129) << 2) >> 2] | 0; //@line 7459
     $138 = (HEAP32[$134 + 4 >> 2] & -8) - $6 | 0; //@line 7463
     $143 = HEAP32[$134 + 16 + (((HEAP32[$134 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 7469
     if (!$143) {
      $$0192$lcssa$i = $134; //@line 7472
      $$0193$lcssa$i = $138; //@line 7472
     } else {
      $$01926$i = $134; //@line 7474
      $$01935$i = $138; //@line 7474
      $146 = $143; //@line 7474
      while (1) {
       $149 = (HEAP32[$146 + 4 >> 2] & -8) - $6 | 0; //@line 7479
       $150 = $149 >>> 0 < $$01935$i >>> 0; //@line 7480
       $$$0193$i = $150 ? $149 : $$01935$i; //@line 7481
       $$$0192$i = $150 ? $146 : $$01926$i; //@line 7482
       $146 = HEAP32[$146 + 16 + (((HEAP32[$146 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 7488
       if (!$146) {
        $$0192$lcssa$i = $$$0192$i; //@line 7491
        $$0193$lcssa$i = $$$0193$i; //@line 7491
        break;
       } else {
        $$01926$i = $$$0192$i; //@line 7494
        $$01935$i = $$$0193$i; //@line 7494
       }
      }
     }
     $157 = HEAP32[5488] | 0; //@line 7498
     if ($157 >>> 0 > $$0192$lcssa$i >>> 0) {
      _abort(); //@line 7501
     }
     $159 = $$0192$lcssa$i + $6 | 0; //@line 7504
     if ($159 >>> 0 <= $$0192$lcssa$i >>> 0) {
      _abort(); //@line 7507
     }
     $162 = HEAP32[$$0192$lcssa$i + 24 >> 2] | 0; //@line 7511
     $164 = HEAP32[$$0192$lcssa$i + 12 >> 2] | 0; //@line 7513
     do {
      if (($164 | 0) == ($$0192$lcssa$i | 0)) {
       $175 = $$0192$lcssa$i + 20 | 0; //@line 7517
       $176 = HEAP32[$175 >> 2] | 0; //@line 7518
       if (!$176) {
        $178 = $$0192$lcssa$i + 16 | 0; //@line 7521
        $179 = HEAP32[$178 >> 2] | 0; //@line 7522
        if (!$179) {
         $$3$i = 0; //@line 7525
         break;
        } else {
         $$1196$i = $179; //@line 7528
         $$1198$i = $178; //@line 7528
        }
       } else {
        $$1196$i = $176; //@line 7531
        $$1198$i = $175; //@line 7531
       }
       while (1) {
        $181 = $$1196$i + 20 | 0; //@line 7534
        $182 = HEAP32[$181 >> 2] | 0; //@line 7535
        if ($182 | 0) {
         $$1196$i = $182; //@line 7538
         $$1198$i = $181; //@line 7538
         continue;
        }
        $184 = $$1196$i + 16 | 0; //@line 7541
        $185 = HEAP32[$184 >> 2] | 0; //@line 7542
        if (!$185) {
         break;
        } else {
         $$1196$i = $185; //@line 7547
         $$1198$i = $184; //@line 7547
        }
       }
       if ($157 >>> 0 > $$1198$i >>> 0) {
        _abort(); //@line 7552
       } else {
        HEAP32[$$1198$i >> 2] = 0; //@line 7555
        $$3$i = $$1196$i; //@line 7556
        break;
       }
      } else {
       $167 = HEAP32[$$0192$lcssa$i + 8 >> 2] | 0; //@line 7561
       if ($157 >>> 0 > $167 >>> 0) {
        _abort(); //@line 7564
       }
       $169 = $167 + 12 | 0; //@line 7567
       if ((HEAP32[$169 >> 2] | 0) != ($$0192$lcssa$i | 0)) {
        _abort(); //@line 7571
       }
       $172 = $164 + 8 | 0; //@line 7574
       if ((HEAP32[$172 >> 2] | 0) == ($$0192$lcssa$i | 0)) {
        HEAP32[$169 >> 2] = $164; //@line 7578
        HEAP32[$172 >> 2] = $167; //@line 7579
        $$3$i = $164; //@line 7580
        break;
       } else {
        _abort(); //@line 7583
       }
      }
     } while (0);
     L73 : do {
      if ($162 | 0) {
       $190 = HEAP32[$$0192$lcssa$i + 28 >> 2] | 0; //@line 7592
       $191 = 22240 + ($190 << 2) | 0; //@line 7593
       do {
        if (($$0192$lcssa$i | 0) == (HEAP32[$191 >> 2] | 0)) {
         HEAP32[$191 >> 2] = $$3$i; //@line 7598
         if (!$$3$i) {
          HEAP32[5485] = $108 & ~(1 << $190); //@line 7604
          break L73;
         }
        } else {
         if ((HEAP32[5488] | 0) >>> 0 > $162 >>> 0) {
          _abort(); //@line 7611
         } else {
          HEAP32[$162 + 16 + (((HEAP32[$162 + 16 >> 2] | 0) != ($$0192$lcssa$i | 0) & 1) << 2) >> 2] = $$3$i; //@line 7619
          if (!$$3$i) {
           break L73;
          } else {
           break;
          }
         }
        }
       } while (0);
       $204 = HEAP32[5488] | 0; //@line 7629
       if ($204 >>> 0 > $$3$i >>> 0) {
        _abort(); //@line 7632
       }
       HEAP32[$$3$i + 24 >> 2] = $162; //@line 7636
       $208 = HEAP32[$$0192$lcssa$i + 16 >> 2] | 0; //@line 7638
       do {
        if ($208 | 0) {
         if ($204 >>> 0 > $208 >>> 0) {
          _abort(); //@line 7644
         } else {
          HEAP32[$$3$i + 16 >> 2] = $208; //@line 7648
          HEAP32[$208 + 24 >> 2] = $$3$i; //@line 7650
          break;
         }
        }
       } while (0);
       $214 = HEAP32[$$0192$lcssa$i + 20 >> 2] | 0; //@line 7656
       if ($214 | 0) {
        if ((HEAP32[5488] | 0) >>> 0 > $214 >>> 0) {
         _abort(); //@line 7662
        } else {
         HEAP32[$$3$i + 20 >> 2] = $214; //@line 7666
         HEAP32[$214 + 24 >> 2] = $$3$i; //@line 7668
         break;
        }
       }
      }
     } while (0);
     if ($$0193$lcssa$i >>> 0 < 16) {
      $221 = $$0193$lcssa$i + $6 | 0; //@line 7676
      HEAP32[$$0192$lcssa$i + 4 >> 2] = $221 | 3; //@line 7679
      $225 = $$0192$lcssa$i + $221 + 4 | 0; //@line 7681
      HEAP32[$225 >> 2] = HEAP32[$225 >> 2] | 1; //@line 7684
     } else {
      HEAP32[$$0192$lcssa$i + 4 >> 2] = $6 | 3; //@line 7688
      HEAP32[$159 + 4 >> 2] = $$0193$lcssa$i | 1; //@line 7691
      HEAP32[$159 + $$0193$lcssa$i >> 2] = $$0193$lcssa$i; //@line 7693
      if ($37 | 0) {
       $234 = HEAP32[5489] | 0; //@line 7696
       $235 = $37 >>> 3; //@line 7697
       $237 = 21976 + ($235 << 1 << 2) | 0; //@line 7699
       $238 = 1 << $235; //@line 7700
       if (!($8 & $238)) {
        HEAP32[5484] = $8 | $238; //@line 7705
        $$0189$i = $237; //@line 7707
        $$pre$phi$iZ2D = $237 + 8 | 0; //@line 7707
       } else {
        $242 = $237 + 8 | 0; //@line 7709
        $243 = HEAP32[$242 >> 2] | 0; //@line 7710
        if ((HEAP32[5488] | 0) >>> 0 > $243 >>> 0) {
         _abort(); //@line 7714
        } else {
         $$0189$i = $243; //@line 7717
         $$pre$phi$iZ2D = $242; //@line 7717
        }
       }
       HEAP32[$$pre$phi$iZ2D >> 2] = $234; //@line 7720
       HEAP32[$$0189$i + 12 >> 2] = $234; //@line 7722
       HEAP32[$234 + 8 >> 2] = $$0189$i; //@line 7724
       HEAP32[$234 + 12 >> 2] = $237; //@line 7726
      }
      HEAP32[5486] = $$0193$lcssa$i; //@line 7728
      HEAP32[5489] = $159; //@line 7729
     }
     $$0 = $$0192$lcssa$i + 8 | 0; //@line 7732
     STACKTOP = sp; //@line 7733
     return $$0 | 0; //@line 7733
    }
   } else {
    $$0197 = $6; //@line 7736
   }
  } else {
   if ($0 >>> 0 > 4294967231) {
    $$0197 = -1; //@line 7741
   } else {
    $251 = $0 + 11 | 0; //@line 7743
    $252 = $251 & -8; //@line 7744
    $253 = HEAP32[5485] | 0; //@line 7745
    if (!$253) {
     $$0197 = $252; //@line 7748
    } else {
     $255 = 0 - $252 | 0; //@line 7750
     $256 = $251 >>> 8; //@line 7751
     if (!$256) {
      $$0358$i = 0; //@line 7754
     } else {
      if ($252 >>> 0 > 16777215) {
       $$0358$i = 31; //@line 7758
      } else {
       $261 = ($256 + 1048320 | 0) >>> 16 & 8; //@line 7762
       $262 = $256 << $261; //@line 7763
       $265 = ($262 + 520192 | 0) >>> 16 & 4; //@line 7766
       $267 = $262 << $265; //@line 7768
       $270 = ($267 + 245760 | 0) >>> 16 & 2; //@line 7771
       $275 = 14 - ($265 | $261 | $270) + ($267 << $270 >>> 15) | 0; //@line 7776
       $$0358$i = $252 >>> ($275 + 7 | 0) & 1 | $275 << 1; //@line 7782
      }
     }
     $282 = HEAP32[22240 + ($$0358$i << 2) >> 2] | 0; //@line 7786
     L117 : do {
      if (!$282) {
       $$2355$i = 0; //@line 7790
       $$3$i203 = 0; //@line 7790
       $$3350$i = $255; //@line 7790
       label = 81; //@line 7791
      } else {
       $$0342$i = 0; //@line 7798
       $$0347$i = $255; //@line 7798
       $$0353$i = $282; //@line 7798
       $$0359$i = $252 << (($$0358$i | 0) == 31 ? 0 : 25 - ($$0358$i >>> 1) | 0); //@line 7798
       $$0362$i = 0; //@line 7798
       while (1) {
        $292 = (HEAP32[$$0353$i + 4 >> 2] & -8) - $252 | 0; //@line 7803
        if ($292 >>> 0 < $$0347$i >>> 0) {
         if (!$292) {
          $$414$i = $$0353$i; //@line 7808
          $$435113$i = 0; //@line 7808
          $$435712$i = $$0353$i; //@line 7808
          label = 85; //@line 7809
          break L117;
         } else {
          $$1343$i = $$0353$i; //@line 7812
          $$1348$i = $292; //@line 7812
         }
        } else {
         $$1343$i = $$0342$i; //@line 7815
         $$1348$i = $$0347$i; //@line 7815
        }
        $296 = HEAP32[$$0353$i + 20 >> 2] | 0; //@line 7818
        $$0353$i = HEAP32[$$0353$i + 16 + ($$0359$i >>> 31 << 2) >> 2] | 0; //@line 7821
        $$1363$i = ($296 | 0) == 0 | ($296 | 0) == ($$0353$i | 0) ? $$0362$i : $296; //@line 7825
        $302 = ($$0353$i | 0) == 0; //@line 7826
        if ($302) {
         $$2355$i = $$1363$i; //@line 7831
         $$3$i203 = $$1343$i; //@line 7831
         $$3350$i = $$1348$i; //@line 7831
         label = 81; //@line 7832
         break;
        } else {
         $$0342$i = $$1343$i; //@line 7835
         $$0347$i = $$1348$i; //@line 7835
         $$0359$i = $$0359$i << (($302 ^ 1) & 1); //@line 7835
         $$0362$i = $$1363$i; //@line 7835
        }
       }
      }
     } while (0);
     if ((label | 0) == 81) {
      if (($$2355$i | 0) == 0 & ($$3$i203 | 0) == 0) {
       $306 = 2 << $$0358$i; //@line 7845
       $309 = $253 & ($306 | 0 - $306); //@line 7848
       if (!$309) {
        $$0197 = $252; //@line 7851
        break;
       }
       $313 = ($309 & 0 - $309) + -1 | 0; //@line 7856
       $315 = $313 >>> 12 & 16; //@line 7858
       $316 = $313 >>> $315; //@line 7859
       $318 = $316 >>> 5 & 8; //@line 7861
       $320 = $316 >>> $318; //@line 7863
       $322 = $320 >>> 2 & 4; //@line 7865
       $324 = $320 >>> $322; //@line 7867
       $326 = $324 >>> 1 & 2; //@line 7869
       $328 = $324 >>> $326; //@line 7871
       $330 = $328 >>> 1 & 1; //@line 7873
       $$4$ph$i = 0; //@line 7879
       $$4357$ph$i = HEAP32[22240 + (($318 | $315 | $322 | $326 | $330) + ($328 >>> $330) << 2) >> 2] | 0; //@line 7879
      } else {
       $$4$ph$i = $$3$i203; //@line 7881
       $$4357$ph$i = $$2355$i; //@line 7881
      }
      if (!$$4357$ph$i) {
       $$4$lcssa$i = $$4$ph$i; //@line 7885
       $$4351$lcssa$i = $$3350$i; //@line 7885
      } else {
       $$414$i = $$4$ph$i; //@line 7887
       $$435113$i = $$3350$i; //@line 7887
       $$435712$i = $$4357$ph$i; //@line 7887
       label = 85; //@line 7888
      }
     }
     if ((label | 0) == 85) {
      while (1) {
       label = 0; //@line 7893
       $340 = (HEAP32[$$435712$i + 4 >> 2] & -8) - $252 | 0; //@line 7897
       $341 = $340 >>> 0 < $$435113$i >>> 0; //@line 7898
       $$$4351$i = $341 ? $340 : $$435113$i; //@line 7899
       $$4357$$4$i = $341 ? $$435712$i : $$414$i; //@line 7900
       $$435712$i = HEAP32[$$435712$i + 16 + (((HEAP32[$$435712$i + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 7906
       if (!$$435712$i) {
        $$4$lcssa$i = $$4357$$4$i; //@line 7909
        $$4351$lcssa$i = $$$4351$i; //@line 7909
        break;
       } else {
        $$414$i = $$4357$$4$i; //@line 7912
        $$435113$i = $$$4351$i; //@line 7912
        label = 85; //@line 7913
       }
      }
     }
     if (!$$4$lcssa$i) {
      $$0197 = $252; //@line 7919
     } else {
      if ($$4351$lcssa$i >>> 0 < ((HEAP32[5486] | 0) - $252 | 0) >>> 0) {
       $352 = HEAP32[5488] | 0; //@line 7925
       if ($352 >>> 0 > $$4$lcssa$i >>> 0) {
        _abort(); //@line 7928
       }
       $354 = $$4$lcssa$i + $252 | 0; //@line 7931
       if ($354 >>> 0 <= $$4$lcssa$i >>> 0) {
        _abort(); //@line 7934
       }
       $357 = HEAP32[$$4$lcssa$i + 24 >> 2] | 0; //@line 7938
       $359 = HEAP32[$$4$lcssa$i + 12 >> 2] | 0; //@line 7940
       do {
        if (($359 | 0) == ($$4$lcssa$i | 0)) {
         $370 = $$4$lcssa$i + 20 | 0; //@line 7944
         $371 = HEAP32[$370 >> 2] | 0; //@line 7945
         if (!$371) {
          $373 = $$4$lcssa$i + 16 | 0; //@line 7948
          $374 = HEAP32[$373 >> 2] | 0; //@line 7949
          if (!$374) {
           $$3372$i = 0; //@line 7952
           break;
          } else {
           $$1370$i = $374; //@line 7955
           $$1374$i = $373; //@line 7955
          }
         } else {
          $$1370$i = $371; //@line 7958
          $$1374$i = $370; //@line 7958
         }
         while (1) {
          $376 = $$1370$i + 20 | 0; //@line 7961
          $377 = HEAP32[$376 >> 2] | 0; //@line 7962
          if ($377 | 0) {
           $$1370$i = $377; //@line 7965
           $$1374$i = $376; //@line 7965
           continue;
          }
          $379 = $$1370$i + 16 | 0; //@line 7968
          $380 = HEAP32[$379 >> 2] | 0; //@line 7969
          if (!$380) {
           break;
          } else {
           $$1370$i = $380; //@line 7974
           $$1374$i = $379; //@line 7974
          }
         }
         if ($352 >>> 0 > $$1374$i >>> 0) {
          _abort(); //@line 7979
         } else {
          HEAP32[$$1374$i >> 2] = 0; //@line 7982
          $$3372$i = $$1370$i; //@line 7983
          break;
         }
        } else {
         $362 = HEAP32[$$4$lcssa$i + 8 >> 2] | 0; //@line 7988
         if ($352 >>> 0 > $362 >>> 0) {
          _abort(); //@line 7991
         }
         $364 = $362 + 12 | 0; //@line 7994
         if ((HEAP32[$364 >> 2] | 0) != ($$4$lcssa$i | 0)) {
          _abort(); //@line 7998
         }
         $367 = $359 + 8 | 0; //@line 8001
         if ((HEAP32[$367 >> 2] | 0) == ($$4$lcssa$i | 0)) {
          HEAP32[$364 >> 2] = $359; //@line 8005
          HEAP32[$367 >> 2] = $362; //@line 8006
          $$3372$i = $359; //@line 8007
          break;
         } else {
          _abort(); //@line 8010
         }
        }
       } while (0);
       L164 : do {
        if (!$357) {
         $475 = $253; //@line 8018
        } else {
         $385 = HEAP32[$$4$lcssa$i + 28 >> 2] | 0; //@line 8021
         $386 = 22240 + ($385 << 2) | 0; //@line 8022
         do {
          if (($$4$lcssa$i | 0) == (HEAP32[$386 >> 2] | 0)) {
           HEAP32[$386 >> 2] = $$3372$i; //@line 8027
           if (!$$3372$i) {
            $391 = $253 & ~(1 << $385); //@line 8032
            HEAP32[5485] = $391; //@line 8033
            $475 = $391; //@line 8034
            break L164;
           }
          } else {
           if ((HEAP32[5488] | 0) >>> 0 > $357 >>> 0) {
            _abort(); //@line 8041
           } else {
            HEAP32[$357 + 16 + (((HEAP32[$357 + 16 >> 2] | 0) != ($$4$lcssa$i | 0) & 1) << 2) >> 2] = $$3372$i; //@line 8049
            if (!$$3372$i) {
             $475 = $253; //@line 8052
             break L164;
            } else {
             break;
            }
           }
          }
         } while (0);
         $399 = HEAP32[5488] | 0; //@line 8060
         if ($399 >>> 0 > $$3372$i >>> 0) {
          _abort(); //@line 8063
         }
         HEAP32[$$3372$i + 24 >> 2] = $357; //@line 8067
         $403 = HEAP32[$$4$lcssa$i + 16 >> 2] | 0; //@line 8069
         do {
          if ($403 | 0) {
           if ($399 >>> 0 > $403 >>> 0) {
            _abort(); //@line 8075
           } else {
            HEAP32[$$3372$i + 16 >> 2] = $403; //@line 8079
            HEAP32[$403 + 24 >> 2] = $$3372$i; //@line 8081
            break;
           }
          }
         } while (0);
         $409 = HEAP32[$$4$lcssa$i + 20 >> 2] | 0; //@line 8087
         if (!$409) {
          $475 = $253; //@line 8090
         } else {
          if ((HEAP32[5488] | 0) >>> 0 > $409 >>> 0) {
           _abort(); //@line 8095
          } else {
           HEAP32[$$3372$i + 20 >> 2] = $409; //@line 8099
           HEAP32[$409 + 24 >> 2] = $$3372$i; //@line 8101
           $475 = $253; //@line 8102
           break;
          }
         }
        }
       } while (0);
       do {
        if ($$4351$lcssa$i >>> 0 < 16) {
         $416 = $$4351$lcssa$i + $252 | 0; //@line 8111
         HEAP32[$$4$lcssa$i + 4 >> 2] = $416 | 3; //@line 8114
         $420 = $$4$lcssa$i + $416 + 4 | 0; //@line 8116
         HEAP32[$420 >> 2] = HEAP32[$420 >> 2] | 1; //@line 8119
        } else {
         HEAP32[$$4$lcssa$i + 4 >> 2] = $252 | 3; //@line 8123
         HEAP32[$354 + 4 >> 2] = $$4351$lcssa$i | 1; //@line 8126
         HEAP32[$354 + $$4351$lcssa$i >> 2] = $$4351$lcssa$i; //@line 8128
         $428 = $$4351$lcssa$i >>> 3; //@line 8129
         if ($$4351$lcssa$i >>> 0 < 256) {
          $431 = 21976 + ($428 << 1 << 2) | 0; //@line 8133
          $432 = HEAP32[5484] | 0; //@line 8134
          $433 = 1 << $428; //@line 8135
          if (!($432 & $433)) {
           HEAP32[5484] = $432 | $433; //@line 8140
           $$0368$i = $431; //@line 8142
           $$pre$phi$i211Z2D = $431 + 8 | 0; //@line 8142
          } else {
           $437 = $431 + 8 | 0; //@line 8144
           $438 = HEAP32[$437 >> 2] | 0; //@line 8145
           if ((HEAP32[5488] | 0) >>> 0 > $438 >>> 0) {
            _abort(); //@line 8149
           } else {
            $$0368$i = $438; //@line 8152
            $$pre$phi$i211Z2D = $437; //@line 8152
           }
          }
          HEAP32[$$pre$phi$i211Z2D >> 2] = $354; //@line 8155
          HEAP32[$$0368$i + 12 >> 2] = $354; //@line 8157
          HEAP32[$354 + 8 >> 2] = $$0368$i; //@line 8159
          HEAP32[$354 + 12 >> 2] = $431; //@line 8161
          break;
         }
         $444 = $$4351$lcssa$i >>> 8; //@line 8164
         if (!$444) {
          $$0361$i = 0; //@line 8167
         } else {
          if ($$4351$lcssa$i >>> 0 > 16777215) {
           $$0361$i = 31; //@line 8171
          } else {
           $449 = ($444 + 1048320 | 0) >>> 16 & 8; //@line 8175
           $450 = $444 << $449; //@line 8176
           $453 = ($450 + 520192 | 0) >>> 16 & 4; //@line 8179
           $455 = $450 << $453; //@line 8181
           $458 = ($455 + 245760 | 0) >>> 16 & 2; //@line 8184
           $463 = 14 - ($453 | $449 | $458) + ($455 << $458 >>> 15) | 0; //@line 8189
           $$0361$i = $$4351$lcssa$i >>> ($463 + 7 | 0) & 1 | $463 << 1; //@line 8195
          }
         }
         $469 = 22240 + ($$0361$i << 2) | 0; //@line 8198
         HEAP32[$354 + 28 >> 2] = $$0361$i; //@line 8200
         $471 = $354 + 16 | 0; //@line 8201
         HEAP32[$471 + 4 >> 2] = 0; //@line 8203
         HEAP32[$471 >> 2] = 0; //@line 8204
         $473 = 1 << $$0361$i; //@line 8205
         if (!($475 & $473)) {
          HEAP32[5485] = $475 | $473; //@line 8210
          HEAP32[$469 >> 2] = $354; //@line 8211
          HEAP32[$354 + 24 >> 2] = $469; //@line 8213
          HEAP32[$354 + 12 >> 2] = $354; //@line 8215
          HEAP32[$354 + 8 >> 2] = $354; //@line 8217
          break;
         }
         $$0344$i = $$4351$lcssa$i << (($$0361$i | 0) == 31 ? 0 : 25 - ($$0361$i >>> 1) | 0); //@line 8226
         $$0345$i = HEAP32[$469 >> 2] | 0; //@line 8226
         while (1) {
          if ((HEAP32[$$0345$i + 4 >> 2] & -8 | 0) == ($$4351$lcssa$i | 0)) {
           label = 139; //@line 8233
           break;
          }
          $492 = $$0345$i + 16 + ($$0344$i >>> 31 << 2) | 0; //@line 8237
          $494 = HEAP32[$492 >> 2] | 0; //@line 8239
          if (!$494) {
           label = 136; //@line 8242
           break;
          } else {
           $$0344$i = $$0344$i << 1; //@line 8245
           $$0345$i = $494; //@line 8245
          }
         }
         if ((label | 0) == 136) {
          if ((HEAP32[5488] | 0) >>> 0 > $492 >>> 0) {
           _abort(); //@line 8252
          } else {
           HEAP32[$492 >> 2] = $354; //@line 8255
           HEAP32[$354 + 24 >> 2] = $$0345$i; //@line 8257
           HEAP32[$354 + 12 >> 2] = $354; //@line 8259
           HEAP32[$354 + 8 >> 2] = $354; //@line 8261
           break;
          }
         } else if ((label | 0) == 139) {
          $501 = $$0345$i + 8 | 0; //@line 8266
          $502 = HEAP32[$501 >> 2] | 0; //@line 8267
          $503 = HEAP32[5488] | 0; //@line 8268
          if ($503 >>> 0 <= $502 >>> 0 & $503 >>> 0 <= $$0345$i >>> 0) {
           HEAP32[$502 + 12 >> 2] = $354; //@line 8274
           HEAP32[$501 >> 2] = $354; //@line 8275
           HEAP32[$354 + 8 >> 2] = $502; //@line 8277
           HEAP32[$354 + 12 >> 2] = $$0345$i; //@line 8279
           HEAP32[$354 + 24 >> 2] = 0; //@line 8281
           break;
          } else {
           _abort(); //@line 8284
          }
         }
        }
       } while (0);
       $$0 = $$4$lcssa$i + 8 | 0; //@line 8291
       STACKTOP = sp; //@line 8292
       return $$0 | 0; //@line 8292
      } else {
       $$0197 = $252; //@line 8294
      }
     }
    }
   }
  }
 } while (0);
 $512 = HEAP32[5486] | 0; //@line 8301
 if ($512 >>> 0 >= $$0197 >>> 0) {
  $514 = $512 - $$0197 | 0; //@line 8304
  $515 = HEAP32[5489] | 0; //@line 8305
  if ($514 >>> 0 > 15) {
   $517 = $515 + $$0197 | 0; //@line 8308
   HEAP32[5489] = $517; //@line 8309
   HEAP32[5486] = $514; //@line 8310
   HEAP32[$517 + 4 >> 2] = $514 | 1; //@line 8313
   HEAP32[$515 + $512 >> 2] = $514; //@line 8315
   HEAP32[$515 + 4 >> 2] = $$0197 | 3; //@line 8318
  } else {
   HEAP32[5486] = 0; //@line 8320
   HEAP32[5489] = 0; //@line 8321
   HEAP32[$515 + 4 >> 2] = $512 | 3; //@line 8324
   $526 = $515 + $512 + 4 | 0; //@line 8326
   HEAP32[$526 >> 2] = HEAP32[$526 >> 2] | 1; //@line 8329
  }
  $$0 = $515 + 8 | 0; //@line 8332
  STACKTOP = sp; //@line 8333
  return $$0 | 0; //@line 8333
 }
 $530 = HEAP32[5487] | 0; //@line 8335
 if ($530 >>> 0 > $$0197 >>> 0) {
  $532 = $530 - $$0197 | 0; //@line 8338
  HEAP32[5487] = $532; //@line 8339
  $533 = HEAP32[5490] | 0; //@line 8340
  $534 = $533 + $$0197 | 0; //@line 8341
  HEAP32[5490] = $534; //@line 8342
  HEAP32[$534 + 4 >> 2] = $532 | 1; //@line 8345
  HEAP32[$533 + 4 >> 2] = $$0197 | 3; //@line 8348
  $$0 = $533 + 8 | 0; //@line 8350
  STACKTOP = sp; //@line 8351
  return $$0 | 0; //@line 8351
 }
 if (!(HEAP32[5602] | 0)) {
  HEAP32[5604] = 4096; //@line 8356
  HEAP32[5603] = 4096; //@line 8357
  HEAP32[5605] = -1; //@line 8358
  HEAP32[5606] = -1; //@line 8359
  HEAP32[5607] = 0; //@line 8360
  HEAP32[5595] = 0; //@line 8361
  HEAP32[5602] = $1 & -16 ^ 1431655768; //@line 8365
  $548 = 4096; //@line 8366
 } else {
  $548 = HEAP32[5604] | 0; //@line 8369
 }
 $545 = $$0197 + 48 | 0; //@line 8371
 $546 = $$0197 + 47 | 0; //@line 8372
 $547 = $548 + $546 | 0; //@line 8373
 $549 = 0 - $548 | 0; //@line 8374
 $550 = $547 & $549; //@line 8375
 if ($550 >>> 0 <= $$0197 >>> 0) {
  $$0 = 0; //@line 8378
  STACKTOP = sp; //@line 8379
  return $$0 | 0; //@line 8379
 }
 $552 = HEAP32[5594] | 0; //@line 8381
 if ($552 | 0) {
  $554 = HEAP32[5592] | 0; //@line 8384
  $555 = $554 + $550 | 0; //@line 8385
  if ($555 >>> 0 <= $554 >>> 0 | $555 >>> 0 > $552 >>> 0) {
   $$0 = 0; //@line 8390
   STACKTOP = sp; //@line 8391
   return $$0 | 0; //@line 8391
  }
 }
 L244 : do {
  if (!(HEAP32[5595] & 4)) {
   $561 = HEAP32[5490] | 0; //@line 8399
   L246 : do {
    if (!$561) {
     label = 163; //@line 8403
    } else {
     $$0$i$i = 22384; //@line 8405
     while (1) {
      $563 = HEAP32[$$0$i$i >> 2] | 0; //@line 8407
      if ($563 >>> 0 <= $561 >>> 0) {
       $565 = $$0$i$i + 4 | 0; //@line 8410
       if (($563 + (HEAP32[$565 >> 2] | 0) | 0) >>> 0 > $561 >>> 0) {
        break;
       }
      }
      $570 = HEAP32[$$0$i$i + 8 >> 2] | 0; //@line 8419
      if (!$570) {
       label = 163; //@line 8422
       break L246;
      } else {
       $$0$i$i = $570; //@line 8425
      }
     }
     $595 = $547 - $530 & $549; //@line 8429
     if ($595 >>> 0 < 2147483647) {
      $597 = _sbrk($595 | 0) | 0; //@line 8432
      if (($597 | 0) == ((HEAP32[$$0$i$i >> 2] | 0) + (HEAP32[$565 >> 2] | 0) | 0)) {
       if (($597 | 0) == (-1 | 0)) {
        $$2234243136$i = $595; //@line 8440
       } else {
        $$723947$i = $595; //@line 8442
        $$748$i = $597; //@line 8442
        label = 180; //@line 8443
        break L244;
       }
      } else {
       $$2247$ph$i = $597; //@line 8447
       $$2253$ph$i = $595; //@line 8447
       label = 171; //@line 8448
      }
     } else {
      $$2234243136$i = 0; //@line 8451
     }
    }
   } while (0);
   do {
    if ((label | 0) == 163) {
     $572 = _sbrk(0) | 0; //@line 8457
     if (($572 | 0) == (-1 | 0)) {
      $$2234243136$i = 0; //@line 8460
     } else {
      $574 = $572; //@line 8462
      $575 = HEAP32[5603] | 0; //@line 8463
      $576 = $575 + -1 | 0; //@line 8464
      $$$i = (($576 & $574 | 0) == 0 ? 0 : ($576 + $574 & 0 - $575) - $574 | 0) + $550 | 0; //@line 8472
      $584 = HEAP32[5592] | 0; //@line 8473
      $585 = $$$i + $584 | 0; //@line 8474
      if ($$$i >>> 0 > $$0197 >>> 0 & $$$i >>> 0 < 2147483647) {
       $588 = HEAP32[5594] | 0; //@line 8479
       if ($588 | 0) {
        if ($585 >>> 0 <= $584 >>> 0 | $585 >>> 0 > $588 >>> 0) {
         $$2234243136$i = 0; //@line 8486
         break;
        }
       }
       $592 = _sbrk($$$i | 0) | 0; //@line 8490
       if (($592 | 0) == ($572 | 0)) {
        $$723947$i = $$$i; //@line 8493
        $$748$i = $572; //@line 8493
        label = 180; //@line 8494
        break L244;
       } else {
        $$2247$ph$i = $592; //@line 8497
        $$2253$ph$i = $$$i; //@line 8497
        label = 171; //@line 8498
       }
      } else {
       $$2234243136$i = 0; //@line 8501
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 171) {
     $603 = 0 - $$2253$ph$i | 0; //@line 8508
     if (!($545 >>> 0 > $$2253$ph$i >>> 0 & ($$2253$ph$i >>> 0 < 2147483647 & ($$2247$ph$i | 0) != (-1 | 0)))) {
      if (($$2247$ph$i | 0) == (-1 | 0)) {
       $$2234243136$i = 0; //@line 8517
       break;
      } else {
       $$723947$i = $$2253$ph$i; //@line 8520
       $$748$i = $$2247$ph$i; //@line 8520
       label = 180; //@line 8521
       break L244;
      }
     }
     $607 = HEAP32[5604] | 0; //@line 8525
     $611 = $546 - $$2253$ph$i + $607 & 0 - $607; //@line 8529
     if ($611 >>> 0 >= 2147483647) {
      $$723947$i = $$2253$ph$i; //@line 8532
      $$748$i = $$2247$ph$i; //@line 8532
      label = 180; //@line 8533
      break L244;
     }
     if ((_sbrk($611 | 0) | 0) == (-1 | 0)) {
      _sbrk($603 | 0) | 0; //@line 8539
      $$2234243136$i = 0; //@line 8540
      break;
     } else {
      $$723947$i = $611 + $$2253$ph$i | 0; //@line 8544
      $$748$i = $$2247$ph$i; //@line 8544
      label = 180; //@line 8545
      break L244;
     }
    }
   } while (0);
   HEAP32[5595] = HEAP32[5595] | 4; //@line 8552
   $$4236$i = $$2234243136$i; //@line 8553
   label = 178; //@line 8554
  } else {
   $$4236$i = 0; //@line 8556
   label = 178; //@line 8557
  }
 } while (0);
 if ((label | 0) == 178) {
  if ($550 >>> 0 < 2147483647) {
   $620 = _sbrk($550 | 0) | 0; //@line 8563
   $621 = _sbrk(0) | 0; //@line 8564
   $627 = $621 - $620 | 0; //@line 8572
   $629 = $627 >>> 0 > ($$0197 + 40 | 0) >>> 0; //@line 8574
   if (!(($620 | 0) == (-1 | 0) | $629 ^ 1 | $620 >>> 0 < $621 >>> 0 & (($620 | 0) != (-1 | 0) & ($621 | 0) != (-1 | 0)) ^ 1)) {
    $$723947$i = $629 ? $627 : $$4236$i; //@line 8582
    $$748$i = $620; //@line 8582
    label = 180; //@line 8583
   }
  }
 }
 if ((label | 0) == 180) {
  $633 = (HEAP32[5592] | 0) + $$723947$i | 0; //@line 8589
  HEAP32[5592] = $633; //@line 8590
  if ($633 >>> 0 > (HEAP32[5593] | 0) >>> 0) {
   HEAP32[5593] = $633; //@line 8594
  }
  $636 = HEAP32[5490] | 0; //@line 8596
  do {
   if (!$636) {
    $638 = HEAP32[5488] | 0; //@line 8600
    if (($638 | 0) == 0 | $$748$i >>> 0 < $638 >>> 0) {
     HEAP32[5488] = $$748$i; //@line 8605
    }
    HEAP32[5596] = $$748$i; //@line 8607
    HEAP32[5597] = $$723947$i; //@line 8608
    HEAP32[5599] = 0; //@line 8609
    HEAP32[5493] = HEAP32[5602]; //@line 8611
    HEAP32[5492] = -1; //@line 8612
    HEAP32[5497] = 21976; //@line 8613
    HEAP32[5496] = 21976; //@line 8614
    HEAP32[5499] = 21984; //@line 8615
    HEAP32[5498] = 21984; //@line 8616
    HEAP32[5501] = 21992; //@line 8617
    HEAP32[5500] = 21992; //@line 8618
    HEAP32[5503] = 22e3; //@line 8619
    HEAP32[5502] = 22e3; //@line 8620
    HEAP32[5505] = 22008; //@line 8621
    HEAP32[5504] = 22008; //@line 8622
    HEAP32[5507] = 22016; //@line 8623
    HEAP32[5506] = 22016; //@line 8624
    HEAP32[5509] = 22024; //@line 8625
    HEAP32[5508] = 22024; //@line 8626
    HEAP32[5511] = 22032; //@line 8627
    HEAP32[5510] = 22032; //@line 8628
    HEAP32[5513] = 22040; //@line 8629
    HEAP32[5512] = 22040; //@line 8630
    HEAP32[5515] = 22048; //@line 8631
    HEAP32[5514] = 22048; //@line 8632
    HEAP32[5517] = 22056; //@line 8633
    HEAP32[5516] = 22056; //@line 8634
    HEAP32[5519] = 22064; //@line 8635
    HEAP32[5518] = 22064; //@line 8636
    HEAP32[5521] = 22072; //@line 8637
    HEAP32[5520] = 22072; //@line 8638
    HEAP32[5523] = 22080; //@line 8639
    HEAP32[5522] = 22080; //@line 8640
    HEAP32[5525] = 22088; //@line 8641
    HEAP32[5524] = 22088; //@line 8642
    HEAP32[5527] = 22096; //@line 8643
    HEAP32[5526] = 22096; //@line 8644
    HEAP32[5529] = 22104; //@line 8645
    HEAP32[5528] = 22104; //@line 8646
    HEAP32[5531] = 22112; //@line 8647
    HEAP32[5530] = 22112; //@line 8648
    HEAP32[5533] = 22120; //@line 8649
    HEAP32[5532] = 22120; //@line 8650
    HEAP32[5535] = 22128; //@line 8651
    HEAP32[5534] = 22128; //@line 8652
    HEAP32[5537] = 22136; //@line 8653
    HEAP32[5536] = 22136; //@line 8654
    HEAP32[5539] = 22144; //@line 8655
    HEAP32[5538] = 22144; //@line 8656
    HEAP32[5541] = 22152; //@line 8657
    HEAP32[5540] = 22152; //@line 8658
    HEAP32[5543] = 22160; //@line 8659
    HEAP32[5542] = 22160; //@line 8660
    HEAP32[5545] = 22168; //@line 8661
    HEAP32[5544] = 22168; //@line 8662
    HEAP32[5547] = 22176; //@line 8663
    HEAP32[5546] = 22176; //@line 8664
    HEAP32[5549] = 22184; //@line 8665
    HEAP32[5548] = 22184; //@line 8666
    HEAP32[5551] = 22192; //@line 8667
    HEAP32[5550] = 22192; //@line 8668
    HEAP32[5553] = 22200; //@line 8669
    HEAP32[5552] = 22200; //@line 8670
    HEAP32[5555] = 22208; //@line 8671
    HEAP32[5554] = 22208; //@line 8672
    HEAP32[5557] = 22216; //@line 8673
    HEAP32[5556] = 22216; //@line 8674
    HEAP32[5559] = 22224; //@line 8675
    HEAP32[5558] = 22224; //@line 8676
    $642 = $$723947$i + -40 | 0; //@line 8677
    $644 = $$748$i + 8 | 0; //@line 8679
    $649 = ($644 & 7 | 0) == 0 ? 0 : 0 - $644 & 7; //@line 8684
    $650 = $$748$i + $649 | 0; //@line 8685
    $651 = $642 - $649 | 0; //@line 8686
    HEAP32[5490] = $650; //@line 8687
    HEAP32[5487] = $651; //@line 8688
    HEAP32[$650 + 4 >> 2] = $651 | 1; //@line 8691
    HEAP32[$$748$i + $642 + 4 >> 2] = 40; //@line 8694
    HEAP32[5491] = HEAP32[5606]; //@line 8696
   } else {
    $$024367$i = 22384; //@line 8698
    while (1) {
     $657 = HEAP32[$$024367$i >> 2] | 0; //@line 8700
     $658 = $$024367$i + 4 | 0; //@line 8701
     $659 = HEAP32[$658 >> 2] | 0; //@line 8702
     if (($$748$i | 0) == ($657 + $659 | 0)) {
      label = 188; //@line 8706
      break;
     }
     $663 = HEAP32[$$024367$i + 8 >> 2] | 0; //@line 8710
     if (!$663) {
      break;
     } else {
      $$024367$i = $663; //@line 8715
     }
    }
    if ((label | 0) == 188) {
     if (!(HEAP32[$$024367$i + 12 >> 2] & 8)) {
      if ($$748$i >>> 0 > $636 >>> 0 & $657 >>> 0 <= $636 >>> 0) {
       HEAP32[$658 >> 2] = $659 + $$723947$i; //@line 8729
       $673 = (HEAP32[5487] | 0) + $$723947$i | 0; //@line 8731
       $675 = $636 + 8 | 0; //@line 8733
       $680 = ($675 & 7 | 0) == 0 ? 0 : 0 - $675 & 7; //@line 8738
       $681 = $636 + $680 | 0; //@line 8739
       $682 = $673 - $680 | 0; //@line 8740
       HEAP32[5490] = $681; //@line 8741
       HEAP32[5487] = $682; //@line 8742
       HEAP32[$681 + 4 >> 2] = $682 | 1; //@line 8745
       HEAP32[$636 + $673 + 4 >> 2] = 40; //@line 8748
       HEAP32[5491] = HEAP32[5606]; //@line 8750
       break;
      }
     }
    }
    $688 = HEAP32[5488] | 0; //@line 8755
    if ($$748$i >>> 0 < $688 >>> 0) {
     HEAP32[5488] = $$748$i; //@line 8758
     $753 = $$748$i; //@line 8759
    } else {
     $753 = $688; //@line 8761
    }
    $690 = $$748$i + $$723947$i | 0; //@line 8763
    $$124466$i = 22384; //@line 8764
    while (1) {
     if ((HEAP32[$$124466$i >> 2] | 0) == ($690 | 0)) {
      label = 196; //@line 8769
      break;
     }
     $694 = HEAP32[$$124466$i + 8 >> 2] | 0; //@line 8773
     if (!$694) {
      $$0$i$i$i = 22384; //@line 8776
      break;
     } else {
      $$124466$i = $694; //@line 8779
     }
    }
    if ((label | 0) == 196) {
     if (!(HEAP32[$$124466$i + 12 >> 2] & 8)) {
      HEAP32[$$124466$i >> 2] = $$748$i; //@line 8788
      $700 = $$124466$i + 4 | 0; //@line 8789
      HEAP32[$700 >> 2] = (HEAP32[$700 >> 2] | 0) + $$723947$i; //@line 8792
      $704 = $$748$i + 8 | 0; //@line 8794
      $710 = $$748$i + (($704 & 7 | 0) == 0 ? 0 : 0 - $704 & 7) | 0; //@line 8800
      $712 = $690 + 8 | 0; //@line 8802
      $718 = $690 + (($712 & 7 | 0) == 0 ? 0 : 0 - $712 & 7) | 0; //@line 8808
      $722 = $710 + $$0197 | 0; //@line 8812
      $723 = $718 - $710 - $$0197 | 0; //@line 8813
      HEAP32[$710 + 4 >> 2] = $$0197 | 3; //@line 8816
      do {
       if (($636 | 0) == ($718 | 0)) {
        $728 = (HEAP32[5487] | 0) + $723 | 0; //@line 8821
        HEAP32[5487] = $728; //@line 8822
        HEAP32[5490] = $722; //@line 8823
        HEAP32[$722 + 4 >> 2] = $728 | 1; //@line 8826
       } else {
        if ((HEAP32[5489] | 0) == ($718 | 0)) {
         $734 = (HEAP32[5486] | 0) + $723 | 0; //@line 8832
         HEAP32[5486] = $734; //@line 8833
         HEAP32[5489] = $722; //@line 8834
         HEAP32[$722 + 4 >> 2] = $734 | 1; //@line 8837
         HEAP32[$722 + $734 >> 2] = $734; //@line 8839
         break;
        }
        $739 = HEAP32[$718 + 4 >> 2] | 0; //@line 8843
        if (($739 & 3 | 0) == 1) {
         $742 = $739 & -8; //@line 8847
         $743 = $739 >>> 3; //@line 8848
         L311 : do {
          if ($739 >>> 0 < 256) {
           $746 = HEAP32[$718 + 8 >> 2] | 0; //@line 8853
           $748 = HEAP32[$718 + 12 >> 2] | 0; //@line 8855
           $750 = 21976 + ($743 << 1 << 2) | 0; //@line 8857
           do {
            if (($746 | 0) != ($750 | 0)) {
             if ($753 >>> 0 > $746 >>> 0) {
              _abort(); //@line 8863
             }
             if ((HEAP32[$746 + 12 >> 2] | 0) == ($718 | 0)) {
              break;
             }
             _abort(); //@line 8872
            }
           } while (0);
           if (($748 | 0) == ($746 | 0)) {
            HEAP32[5484] = HEAP32[5484] & ~(1 << $743); //@line 8882
            break;
           }
           do {
            if (($748 | 0) == ($750 | 0)) {
             $$pre$phi11$i$iZ2D = $748 + 8 | 0; //@line 8889
            } else {
             if ($753 >>> 0 > $748 >>> 0) {
              _abort(); //@line 8893
             }
             $764 = $748 + 8 | 0; //@line 8896
             if ((HEAP32[$764 >> 2] | 0) == ($718 | 0)) {
              $$pre$phi11$i$iZ2D = $764; //@line 8900
              break;
             }
             _abort(); //@line 8903
            }
           } while (0);
           HEAP32[$746 + 12 >> 2] = $748; //@line 8908
           HEAP32[$$pre$phi11$i$iZ2D >> 2] = $746; //@line 8909
          } else {
           $769 = HEAP32[$718 + 24 >> 2] | 0; //@line 8912
           $771 = HEAP32[$718 + 12 >> 2] | 0; //@line 8914
           do {
            if (($771 | 0) == ($718 | 0)) {
             $782 = $718 + 16 | 0; //@line 8918
             $783 = $782 + 4 | 0; //@line 8919
             $784 = HEAP32[$783 >> 2] | 0; //@line 8920
             if (!$784) {
              $786 = HEAP32[$782 >> 2] | 0; //@line 8923
              if (!$786) {
               $$3$i$i = 0; //@line 8926
               break;
              } else {
               $$1291$i$i = $786; //@line 8929
               $$1293$i$i = $782; //@line 8929
              }
             } else {
              $$1291$i$i = $784; //@line 8932
              $$1293$i$i = $783; //@line 8932
             }
             while (1) {
              $788 = $$1291$i$i + 20 | 0; //@line 8935
              $789 = HEAP32[$788 >> 2] | 0; //@line 8936
              if ($789 | 0) {
               $$1291$i$i = $789; //@line 8939
               $$1293$i$i = $788; //@line 8939
               continue;
              }
              $791 = $$1291$i$i + 16 | 0; //@line 8942
              $792 = HEAP32[$791 >> 2] | 0; //@line 8943
              if (!$792) {
               break;
              } else {
               $$1291$i$i = $792; //@line 8948
               $$1293$i$i = $791; //@line 8948
              }
             }
             if ($753 >>> 0 > $$1293$i$i >>> 0) {
              _abort(); //@line 8953
             } else {
              HEAP32[$$1293$i$i >> 2] = 0; //@line 8956
              $$3$i$i = $$1291$i$i; //@line 8957
              break;
             }
            } else {
             $774 = HEAP32[$718 + 8 >> 2] | 0; //@line 8962
             if ($753 >>> 0 > $774 >>> 0) {
              _abort(); //@line 8965
             }
             $776 = $774 + 12 | 0; //@line 8968
             if ((HEAP32[$776 >> 2] | 0) != ($718 | 0)) {
              _abort(); //@line 8972
             }
             $779 = $771 + 8 | 0; //@line 8975
             if ((HEAP32[$779 >> 2] | 0) == ($718 | 0)) {
              HEAP32[$776 >> 2] = $771; //@line 8979
              HEAP32[$779 >> 2] = $774; //@line 8980
              $$3$i$i = $771; //@line 8981
              break;
             } else {
              _abort(); //@line 8984
             }
            }
           } while (0);
           if (!$769) {
            break;
           }
           $797 = HEAP32[$718 + 28 >> 2] | 0; //@line 8994
           $798 = 22240 + ($797 << 2) | 0; //@line 8995
           do {
            if ((HEAP32[$798 >> 2] | 0) == ($718 | 0)) {
             HEAP32[$798 >> 2] = $$3$i$i; //@line 9000
             if ($$3$i$i | 0) {
              break;
             }
             HEAP32[5485] = HEAP32[5485] & ~(1 << $797); //@line 9009
             break L311;
            } else {
             if ((HEAP32[5488] | 0) >>> 0 > $769 >>> 0) {
              _abort(); //@line 9015
             } else {
              HEAP32[$769 + 16 + (((HEAP32[$769 + 16 >> 2] | 0) != ($718 | 0) & 1) << 2) >> 2] = $$3$i$i; //@line 9023
              if (!$$3$i$i) {
               break L311;
              } else {
               break;
              }
             }
            }
           } while (0);
           $812 = HEAP32[5488] | 0; //@line 9033
           if ($812 >>> 0 > $$3$i$i >>> 0) {
            _abort(); //@line 9036
           }
           HEAP32[$$3$i$i + 24 >> 2] = $769; //@line 9040
           $815 = $718 + 16 | 0; //@line 9041
           $816 = HEAP32[$815 >> 2] | 0; //@line 9042
           do {
            if ($816 | 0) {
             if ($812 >>> 0 > $816 >>> 0) {
              _abort(); //@line 9048
             } else {
              HEAP32[$$3$i$i + 16 >> 2] = $816; //@line 9052
              HEAP32[$816 + 24 >> 2] = $$3$i$i; //@line 9054
              break;
             }
            }
           } while (0);
           $822 = HEAP32[$815 + 4 >> 2] | 0; //@line 9060
           if (!$822) {
            break;
           }
           if ((HEAP32[5488] | 0) >>> 0 > $822 >>> 0) {
            _abort(); //@line 9068
           } else {
            HEAP32[$$3$i$i + 20 >> 2] = $822; //@line 9072
            HEAP32[$822 + 24 >> 2] = $$3$i$i; //@line 9074
            break;
           }
          }
         } while (0);
         $$0$i17$i = $718 + $742 | 0; //@line 9081
         $$0287$i$i = $742 + $723 | 0; //@line 9081
        } else {
         $$0$i17$i = $718; //@line 9083
         $$0287$i$i = $723; //@line 9083
        }
        $830 = $$0$i17$i + 4 | 0; //@line 9085
        HEAP32[$830 >> 2] = HEAP32[$830 >> 2] & -2; //@line 9088
        HEAP32[$722 + 4 >> 2] = $$0287$i$i | 1; //@line 9091
        HEAP32[$722 + $$0287$i$i >> 2] = $$0287$i$i; //@line 9093
        $836 = $$0287$i$i >>> 3; //@line 9094
        if ($$0287$i$i >>> 0 < 256) {
         $839 = 21976 + ($836 << 1 << 2) | 0; //@line 9098
         $840 = HEAP32[5484] | 0; //@line 9099
         $841 = 1 << $836; //@line 9100
         do {
          if (!($840 & $841)) {
           HEAP32[5484] = $840 | $841; //@line 9106
           $$0295$i$i = $839; //@line 9108
           $$pre$phi$i19$iZ2D = $839 + 8 | 0; //@line 9108
          } else {
           $845 = $839 + 8 | 0; //@line 9110
           $846 = HEAP32[$845 >> 2] | 0; //@line 9111
           if ((HEAP32[5488] | 0) >>> 0 <= $846 >>> 0) {
            $$0295$i$i = $846; //@line 9115
            $$pre$phi$i19$iZ2D = $845; //@line 9115
            break;
           }
           _abort(); //@line 9118
          }
         } while (0);
         HEAP32[$$pre$phi$i19$iZ2D >> 2] = $722; //@line 9122
         HEAP32[$$0295$i$i + 12 >> 2] = $722; //@line 9124
         HEAP32[$722 + 8 >> 2] = $$0295$i$i; //@line 9126
         HEAP32[$722 + 12 >> 2] = $839; //@line 9128
         break;
        }
        $852 = $$0287$i$i >>> 8; //@line 9131
        do {
         if (!$852) {
          $$0296$i$i = 0; //@line 9135
         } else {
          if ($$0287$i$i >>> 0 > 16777215) {
           $$0296$i$i = 31; //@line 9139
           break;
          }
          $857 = ($852 + 1048320 | 0) >>> 16 & 8; //@line 9144
          $858 = $852 << $857; //@line 9145
          $861 = ($858 + 520192 | 0) >>> 16 & 4; //@line 9148
          $863 = $858 << $861; //@line 9150
          $866 = ($863 + 245760 | 0) >>> 16 & 2; //@line 9153
          $871 = 14 - ($861 | $857 | $866) + ($863 << $866 >>> 15) | 0; //@line 9158
          $$0296$i$i = $$0287$i$i >>> ($871 + 7 | 0) & 1 | $871 << 1; //@line 9164
         }
        } while (0);
        $877 = 22240 + ($$0296$i$i << 2) | 0; //@line 9167
        HEAP32[$722 + 28 >> 2] = $$0296$i$i; //@line 9169
        $879 = $722 + 16 | 0; //@line 9170
        HEAP32[$879 + 4 >> 2] = 0; //@line 9172
        HEAP32[$879 >> 2] = 0; //@line 9173
        $881 = HEAP32[5485] | 0; //@line 9174
        $882 = 1 << $$0296$i$i; //@line 9175
        if (!($881 & $882)) {
         HEAP32[5485] = $881 | $882; //@line 9180
         HEAP32[$877 >> 2] = $722; //@line 9181
         HEAP32[$722 + 24 >> 2] = $877; //@line 9183
         HEAP32[$722 + 12 >> 2] = $722; //@line 9185
         HEAP32[$722 + 8 >> 2] = $722; //@line 9187
         break;
        }
        $$0288$i$i = $$0287$i$i << (($$0296$i$i | 0) == 31 ? 0 : 25 - ($$0296$i$i >>> 1) | 0); //@line 9196
        $$0289$i$i = HEAP32[$877 >> 2] | 0; //@line 9196
        while (1) {
         if ((HEAP32[$$0289$i$i + 4 >> 2] & -8 | 0) == ($$0287$i$i | 0)) {
          label = 263; //@line 9203
          break;
         }
         $900 = $$0289$i$i + 16 + ($$0288$i$i >>> 31 << 2) | 0; //@line 9207
         $902 = HEAP32[$900 >> 2] | 0; //@line 9209
         if (!$902) {
          label = 260; //@line 9212
          break;
         } else {
          $$0288$i$i = $$0288$i$i << 1; //@line 9215
          $$0289$i$i = $902; //@line 9215
         }
        }
        if ((label | 0) == 260) {
         if ((HEAP32[5488] | 0) >>> 0 > $900 >>> 0) {
          _abort(); //@line 9222
         } else {
          HEAP32[$900 >> 2] = $722; //@line 9225
          HEAP32[$722 + 24 >> 2] = $$0289$i$i; //@line 9227
          HEAP32[$722 + 12 >> 2] = $722; //@line 9229
          HEAP32[$722 + 8 >> 2] = $722; //@line 9231
          break;
         }
        } else if ((label | 0) == 263) {
         $909 = $$0289$i$i + 8 | 0; //@line 9236
         $910 = HEAP32[$909 >> 2] | 0; //@line 9237
         $911 = HEAP32[5488] | 0; //@line 9238
         if ($911 >>> 0 <= $910 >>> 0 & $911 >>> 0 <= $$0289$i$i >>> 0) {
          HEAP32[$910 + 12 >> 2] = $722; //@line 9244
          HEAP32[$909 >> 2] = $722; //@line 9245
          HEAP32[$722 + 8 >> 2] = $910; //@line 9247
          HEAP32[$722 + 12 >> 2] = $$0289$i$i; //@line 9249
          HEAP32[$722 + 24 >> 2] = 0; //@line 9251
          break;
         } else {
          _abort(); //@line 9254
         }
        }
       }
      } while (0);
      $$0 = $710 + 8 | 0; //@line 9261
      STACKTOP = sp; //@line 9262
      return $$0 | 0; //@line 9262
     } else {
      $$0$i$i$i = 22384; //@line 9264
     }
    }
    while (1) {
     $919 = HEAP32[$$0$i$i$i >> 2] | 0; //@line 9268
     if ($919 >>> 0 <= $636 >>> 0) {
      $923 = $919 + (HEAP32[$$0$i$i$i + 4 >> 2] | 0) | 0; //@line 9273
      if ($923 >>> 0 > $636 >>> 0) {
       break;
      }
     }
     $$0$i$i$i = HEAP32[$$0$i$i$i + 8 >> 2] | 0; //@line 9281
    }
    $927 = $923 + -47 | 0; //@line 9283
    $929 = $927 + 8 | 0; //@line 9285
    $935 = $927 + (($929 & 7 | 0) == 0 ? 0 : 0 - $929 & 7) | 0; //@line 9291
    $936 = $636 + 16 | 0; //@line 9292
    $938 = $935 >>> 0 < $936 >>> 0 ? $636 : $935; //@line 9294
    $939 = $938 + 8 | 0; //@line 9295
    $940 = $938 + 24 | 0; //@line 9296
    $941 = $$723947$i + -40 | 0; //@line 9297
    $943 = $$748$i + 8 | 0; //@line 9299
    $948 = ($943 & 7 | 0) == 0 ? 0 : 0 - $943 & 7; //@line 9304
    $949 = $$748$i + $948 | 0; //@line 9305
    $950 = $941 - $948 | 0; //@line 9306
    HEAP32[5490] = $949; //@line 9307
    HEAP32[5487] = $950; //@line 9308
    HEAP32[$949 + 4 >> 2] = $950 | 1; //@line 9311
    HEAP32[$$748$i + $941 + 4 >> 2] = 40; //@line 9314
    HEAP32[5491] = HEAP32[5606]; //@line 9316
    $956 = $938 + 4 | 0; //@line 9317
    HEAP32[$956 >> 2] = 27; //@line 9318
    HEAP32[$939 >> 2] = HEAP32[5596]; //@line 9319
    HEAP32[$939 + 4 >> 2] = HEAP32[5597]; //@line 9319
    HEAP32[$939 + 8 >> 2] = HEAP32[5598]; //@line 9319
    HEAP32[$939 + 12 >> 2] = HEAP32[5599]; //@line 9319
    HEAP32[5596] = $$748$i; //@line 9320
    HEAP32[5597] = $$723947$i; //@line 9321
    HEAP32[5599] = 0; //@line 9322
    HEAP32[5598] = $939; //@line 9323
    $958 = $940; //@line 9324
    do {
     $958$looptemp = $958;
     $958 = $958 + 4 | 0; //@line 9326
     HEAP32[$958 >> 2] = 7; //@line 9327
    } while (($958$looptemp + 8 | 0) >>> 0 < $923 >>> 0);
    if (($938 | 0) != ($636 | 0)) {
     $964 = $938 - $636 | 0; //@line 9340
     HEAP32[$956 >> 2] = HEAP32[$956 >> 2] & -2; //@line 9343
     HEAP32[$636 + 4 >> 2] = $964 | 1; //@line 9346
     HEAP32[$938 >> 2] = $964; //@line 9347
     $969 = $964 >>> 3; //@line 9348
     if ($964 >>> 0 < 256) {
      $972 = 21976 + ($969 << 1 << 2) | 0; //@line 9352
      $973 = HEAP32[5484] | 0; //@line 9353
      $974 = 1 << $969; //@line 9354
      if (!($973 & $974)) {
       HEAP32[5484] = $973 | $974; //@line 9359
       $$0211$i$i = $972; //@line 9361
       $$pre$phi$i$iZ2D = $972 + 8 | 0; //@line 9361
      } else {
       $978 = $972 + 8 | 0; //@line 9363
       $979 = HEAP32[$978 >> 2] | 0; //@line 9364
       if ((HEAP32[5488] | 0) >>> 0 > $979 >>> 0) {
        _abort(); //@line 9368
       } else {
        $$0211$i$i = $979; //@line 9371
        $$pre$phi$i$iZ2D = $978; //@line 9371
       }
      }
      HEAP32[$$pre$phi$i$iZ2D >> 2] = $636; //@line 9374
      HEAP32[$$0211$i$i + 12 >> 2] = $636; //@line 9376
      HEAP32[$636 + 8 >> 2] = $$0211$i$i; //@line 9378
      HEAP32[$636 + 12 >> 2] = $972; //@line 9380
      break;
     }
     $985 = $964 >>> 8; //@line 9383
     if (!$985) {
      $$0212$i$i = 0; //@line 9386
     } else {
      if ($964 >>> 0 > 16777215) {
       $$0212$i$i = 31; //@line 9390
      } else {
       $990 = ($985 + 1048320 | 0) >>> 16 & 8; //@line 9394
       $991 = $985 << $990; //@line 9395
       $994 = ($991 + 520192 | 0) >>> 16 & 4; //@line 9398
       $996 = $991 << $994; //@line 9400
       $999 = ($996 + 245760 | 0) >>> 16 & 2; //@line 9403
       $1004 = 14 - ($994 | $990 | $999) + ($996 << $999 >>> 15) | 0; //@line 9408
       $$0212$i$i = $964 >>> ($1004 + 7 | 0) & 1 | $1004 << 1; //@line 9414
      }
     }
     $1010 = 22240 + ($$0212$i$i << 2) | 0; //@line 9417
     HEAP32[$636 + 28 >> 2] = $$0212$i$i; //@line 9419
     HEAP32[$636 + 20 >> 2] = 0; //@line 9421
     HEAP32[$936 >> 2] = 0; //@line 9422
     $1013 = HEAP32[5485] | 0; //@line 9423
     $1014 = 1 << $$0212$i$i; //@line 9424
     if (!($1013 & $1014)) {
      HEAP32[5485] = $1013 | $1014; //@line 9429
      HEAP32[$1010 >> 2] = $636; //@line 9430
      HEAP32[$636 + 24 >> 2] = $1010; //@line 9432
      HEAP32[$636 + 12 >> 2] = $636; //@line 9434
      HEAP32[$636 + 8 >> 2] = $636; //@line 9436
      break;
     }
     $$0206$i$i = $964 << (($$0212$i$i | 0) == 31 ? 0 : 25 - ($$0212$i$i >>> 1) | 0); //@line 9445
     $$0207$i$i = HEAP32[$1010 >> 2] | 0; //@line 9445
     while (1) {
      if ((HEAP32[$$0207$i$i + 4 >> 2] & -8 | 0) == ($964 | 0)) {
       label = 289; //@line 9452
       break;
      }
      $1032 = $$0207$i$i + 16 + ($$0206$i$i >>> 31 << 2) | 0; //@line 9456
      $1034 = HEAP32[$1032 >> 2] | 0; //@line 9458
      if (!$1034) {
       label = 286; //@line 9461
       break;
      } else {
       $$0206$i$i = $$0206$i$i << 1; //@line 9464
       $$0207$i$i = $1034; //@line 9464
      }
     }
     if ((label | 0) == 286) {
      if ((HEAP32[5488] | 0) >>> 0 > $1032 >>> 0) {
       _abort(); //@line 9471
      } else {
       HEAP32[$1032 >> 2] = $636; //@line 9474
       HEAP32[$636 + 24 >> 2] = $$0207$i$i; //@line 9476
       HEAP32[$636 + 12 >> 2] = $636; //@line 9478
       HEAP32[$636 + 8 >> 2] = $636; //@line 9480
       break;
      }
     } else if ((label | 0) == 289) {
      $1041 = $$0207$i$i + 8 | 0; //@line 9485
      $1042 = HEAP32[$1041 >> 2] | 0; //@line 9486
      $1043 = HEAP32[5488] | 0; //@line 9487
      if ($1043 >>> 0 <= $1042 >>> 0 & $1043 >>> 0 <= $$0207$i$i >>> 0) {
       HEAP32[$1042 + 12 >> 2] = $636; //@line 9493
       HEAP32[$1041 >> 2] = $636; //@line 9494
       HEAP32[$636 + 8 >> 2] = $1042; //@line 9496
       HEAP32[$636 + 12 >> 2] = $$0207$i$i; //@line 9498
       HEAP32[$636 + 24 >> 2] = 0; //@line 9500
       break;
      } else {
       _abort(); //@line 9503
      }
     }
    }
   }
  } while (0);
  $1052 = HEAP32[5487] | 0; //@line 9510
  if ($1052 >>> 0 > $$0197 >>> 0) {
   $1054 = $1052 - $$0197 | 0; //@line 9513
   HEAP32[5487] = $1054; //@line 9514
   $1055 = HEAP32[5490] | 0; //@line 9515
   $1056 = $1055 + $$0197 | 0; //@line 9516
   HEAP32[5490] = $1056; //@line 9517
   HEAP32[$1056 + 4 >> 2] = $1054 | 1; //@line 9520
   HEAP32[$1055 + 4 >> 2] = $$0197 | 3; //@line 9523
   $$0 = $1055 + 8 | 0; //@line 9525
   STACKTOP = sp; //@line 9526
   return $$0 | 0; //@line 9526
  }
 }
 HEAP32[(___errno_location() | 0) >> 2] = 12; //@line 9530
 $$0 = 0; //@line 9531
 STACKTOP = sp; //@line 9532
 return $$0 | 0; //@line 9532
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0170 = 0, $$0170231 = 0, $$0170232 = 0, $$1$off0 = 0, $$1165 = 0, $$1167 = 0, $$1169 = 0, $$1171 = 0, $$3$off0226 = 0, $$3175 = 0, $$byval_copy173 = 0, $$sink = 0, $$sink196 = 0, $$sink229 = 0, $10 = 0, $109 = 0, $112 = 0, $117 = 0, $120 = 0, $122 = 0, $123 = 0, $128 = 0, $130 = 0, $131 = 0, $18 = 0, $214 = 0, $224 = 0, $228 = 0, $235 = 0, $238 = 0, $257 = 0, $258 = 0, $266 = 0, $273 = 0, $274 = 0, $286 = 0, $289 = 0, $310 = 0, $325 = 0, $332 = 0, $333 = 0, $345 = 0, $348 = 0, $353 = 0, $355 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $38 = 0, $389 = 0, $390 = 0, $391 = 0, $393 = 0, $427 = 0, $459 = 0, $463 = 0, $465 = 0, $468 = 0, $475 = 0, $476 = 0, $488 = 0, $491 = 0, $5 = 0, $510 = 0, $513 = 0, $514 = 0, $521 = 0, $528 = 0, $529 = 0, $541 = 0, $544 = 0, $549 = 0, $551 = 0, $552 = 0, $556 = 0, $557 = 0, $564 = 0, $571 = 0, $572 = 0, $584 = 0, $587 = 0, $59 = 0, $597 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $605 = 0, $609 = 0, $614 = 0, $615 = 0, $617 = 0, $618 = 0, $633 = 0, $636 = 0, $637 = 0, $639 = 0, $640 = 0, $661 = 0, $666 = 0, $667 = 0, $679 = 0, $680 = 0, $682 = 0, $683 = 0, $698 = 0, $7 = 0, $704 = 0, $707 = 0, $718 = 0, $724 = 0, $728 = 0, $735 = 0, $736 = 0, $748 = 0, $751 = 0, $755 = 0, $757 = 0, $767 = 0, $772 = 0, $779 = 0, $780 = 0, $792 = 0, $795 = 0, $8 = 0, $801 = 0, $804 = 0, $83 = 0, $84 = 0, $89 = 0, $9 = 0, $96 = 0, $97 = 0, $AsyncCtx = 0, $AsyncCtx102 = 0, $AsyncCtx106 = 0, $AsyncCtx11 = 0, $AsyncCtx110 = 0, $AsyncCtx114 = 0, $AsyncCtx118 = 0, $AsyncCtx122 = 0, $AsyncCtx126 = 0, $AsyncCtx130 = 0, $AsyncCtx15 = 0, $AsyncCtx18 = 0, $AsyncCtx21 = 0, $AsyncCtx24 = 0, $AsyncCtx27 = 0, $AsyncCtx3 = 0, $AsyncCtx30 = 0, $AsyncCtx33 = 0, $AsyncCtx36 = 0, $AsyncCtx39 = 0, $AsyncCtx43 = 0, $AsyncCtx47 = 0, $AsyncCtx51 = 0, $AsyncCtx55 = 0, $AsyncCtx59 = 0, $AsyncCtx63 = 0, $AsyncCtx67 = 0, $AsyncCtx7 = 0, $AsyncCtx71 = 0, $AsyncCtx75 = 0, $AsyncCtx79 = 0, $AsyncCtx83 = 0, $AsyncCtx87 = 0, $AsyncCtx91 = 0, $AsyncCtx95 = 0, $AsyncCtx98 = 0, $sext = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 9065
 STACKTOP = STACKTOP + 32 | 0; //@line 9066
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 9066
 $$byval_copy173 = sp + 24 | 0; //@line 9067
 $5 = sp + 16 | 0; //@line 9068
 $6 = sp + 8 | 0; //@line 9069
 $7 = sp; //@line 9070
 HEAP32[$7 >> 2] = 0; //@line 9071
 $8 = $0 + 912 | 0; //@line 9072
 $9 = $0 + 928 | 0; //@line 9073
 $10 = $0 + 288 | 0; //@line 9074
 HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($10) | 0) + 10 >> 0] = 0; //@line 9077
 HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 20 >> 1] = $3; //@line 9080
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 22 >> 0] = $4; //@line 9083
 $18 = HEAP32[$0 + 364 >> 2] | 0; //@line 9085
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 24 >> 2] = $18; //@line 9088
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 9 >> 0] = 0; //@line 9091
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 8 >> 0] = 0; //@line 9094
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 11 >> 0] = 0; //@line 9097
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 12 >> 2] = 0; //@line 9100
 HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 16 >> 1] = 0; //@line 9103
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 18 >> 0] = 0; //@line 9106
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 28 >> 0] = 0; //@line 9109
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 32 >> 2] = 0; //@line 9112
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) >> 2] = 0; //@line 9114
 $38 = HEAP32[$0 >> 2] | 0; //@line 9115
 $AsyncCtx43 = _emscripten_alloc_async_context(84, sp) | 0; //@line 9116
 __ZN7LoRaPHY18put_radio_to_sleepEv($38); //@line 9117
 if (___async) {
  HEAP32[$AsyncCtx43 >> 2] = 295; //@line 9120
  HEAP32[$AsyncCtx43 + 4 >> 2] = $1; //@line 9122
  HEAP32[$AsyncCtx43 + 8 >> 2] = $7; //@line 9124
  HEAP32[$AsyncCtx43 + 12 >> 2] = $0; //@line 9126
  HEAP32[$AsyncCtx43 + 16 >> 2] = $0; //@line 9128
  HEAP32[$AsyncCtx43 + 20 >> 2] = $10; //@line 9130
  HEAP32[$AsyncCtx43 + 24 >> 2] = $7; //@line 9132
  HEAP32[$AsyncCtx43 + 28 >> 2] = $6; //@line 9134
  HEAP32[$AsyncCtx43 + 32 >> 2] = $8; //@line 9136
  HEAP32[$AsyncCtx43 + 36 >> 2] = $9; //@line 9138
  HEAP32[$AsyncCtx43 + 40 >> 2] = $5; //@line 9140
  HEAP32[$AsyncCtx43 + 44 >> 2] = $5; //@line 9142
  HEAP32[$AsyncCtx43 + 48 >> 2] = $5; //@line 9144
  HEAP32[$AsyncCtx43 + 52 >> 2] = $5; //@line 9146
  HEAP8[$AsyncCtx43 + 56 >> 0] = $4; //@line 9148
  HEAP32[$AsyncCtx43 + 60 >> 2] = $5; //@line 9150
  HEAP32[$AsyncCtx43 + 64 >> 2] = $6; //@line 9152
  HEAP32[$AsyncCtx43 + 68 >> 2] = $5; //@line 9154
  HEAP16[$AsyncCtx43 + 72 >> 1] = $2; //@line 9156
  HEAP32[$AsyncCtx43 + 76 >> 2] = $5; //@line 9158
  HEAP32[$AsyncCtx43 + 80 >> 2] = $5; //@line 9160
  sp = STACKTOP; //@line 9161
  STACKTOP = sp; //@line 9162
  return;
 }
 _emscripten_free_async_context($AsyncCtx43 | 0); //@line 9164
 $59 = $0 + 356 | 0; //@line 9165
 $60 = HEAP32[$59 >> 2] | 0; //@line 9166
 $AsyncCtx98 = _emscripten_alloc_async_context(88, sp) | 0; //@line 9168
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($60, $0 + 1056 | 0); //@line 9169
 if (___async) {
  HEAP32[$AsyncCtx98 >> 2] = 296; //@line 9172
  HEAP32[$AsyncCtx98 + 4 >> 2] = $1; //@line 9174
  HEAP32[$AsyncCtx98 + 8 >> 2] = $7; //@line 9176
  HEAP32[$AsyncCtx98 + 12 >> 2] = $0; //@line 9178
  HEAP32[$AsyncCtx98 + 16 >> 2] = $59; //@line 9180
  HEAP32[$AsyncCtx98 + 20 >> 2] = $7; //@line 9182
  HEAP32[$AsyncCtx98 + 24 >> 2] = $6; //@line 9184
  HEAP32[$AsyncCtx98 + 28 >> 2] = $0; //@line 9186
  HEAP32[$AsyncCtx98 + 32 >> 2] = $10; //@line 9188
  HEAP32[$AsyncCtx98 + 36 >> 2] = $8; //@line 9190
  HEAP32[$AsyncCtx98 + 40 >> 2] = $9; //@line 9192
  HEAP32[$AsyncCtx98 + 44 >> 2] = $5; //@line 9194
  HEAP32[$AsyncCtx98 + 48 >> 2] = $5; //@line 9196
  HEAP32[$AsyncCtx98 + 52 >> 2] = $5; //@line 9198
  HEAP32[$AsyncCtx98 + 56 >> 2] = $5; //@line 9200
  HEAP8[$AsyncCtx98 + 60 >> 0] = $4; //@line 9202
  HEAP32[$AsyncCtx98 + 64 >> 2] = $5; //@line 9204
  HEAP32[$AsyncCtx98 + 68 >> 2] = $6; //@line 9206
  HEAP32[$AsyncCtx98 + 72 >> 2] = $5; //@line 9208
  HEAP16[$AsyncCtx98 + 76 >> 1] = $2; //@line 9210
  HEAP32[$AsyncCtx98 + 80 >> 2] = $5; //@line 9212
  HEAP32[$AsyncCtx98 + 84 >> 2] = $5; //@line 9214
  sp = STACKTOP; //@line 9215
  STACKTOP = sp; //@line 9216
  return;
 }
 _emscripten_free_async_context($AsyncCtx98 | 0); //@line 9218
 $83 = HEAP8[$1 >> 0] | 0; //@line 9219
 $trunc = ($83 & 255) >>> 5; //@line 9220
 L7 : do {
  switch ($trunc & 7) {
  case 1:
   {
    $84 = $0 + 372 | 0; //@line 9225
    if (HEAP8[$84 >> 0] | 0) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 4 >> 2] = 1; //@line 9231
     $89 = $0 + 968 | 0; //@line 9232
     HEAP32[$89 >> 2] = HEAP32[$89 >> 2] | 64; //@line 9235
     if (HEAP8[$0 + 373 >> 0] | 0) {
      $96 = HEAP32[$0 + 1328 >> 2] | 0; //@line 9241
      HEAP32[$5 >> 2] = 297; //@line 9242
      HEAP32[$5 + 4 >> 2] = 0; //@line 9244
      $AsyncCtx87 = _emscripten_alloc_async_context(24, sp) | 0; //@line 9245
      HEAP32[$$byval_copy173 >> 2] = HEAP32[$5 >> 2]; //@line 9246
      HEAP32[$$byval_copy173 + 4 >> 2] = HEAP32[$5 + 4 >> 2]; //@line 9246
      $97 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($96, $0, $$byval_copy173) | 0; //@line 9247
      if (___async) {
       HEAP32[$AsyncCtx87 >> 2] = 298; //@line 9250
       HEAP32[$AsyncCtx87 + 4 >> 2] = $5; //@line 9252
       HEAP32[$AsyncCtx87 + 8 >> 2] = $0; //@line 9254
       HEAP32[$AsyncCtx87 + 12 >> 2] = $59; //@line 9256
       HEAP32[$AsyncCtx87 + 16 >> 2] = $7; //@line 9258
       HEAP32[$AsyncCtx87 + 20 >> 2] = $6; //@line 9260
       sp = STACKTOP; //@line 9261
       STACKTOP = sp; //@line 9262
       return;
      }
      _emscripten_free_async_context($AsyncCtx87 | 0); //@line 9264
      do {
       if (!$97) {
        $AsyncCtx130 = _emscripten_alloc_async_context(24, sp) | 0; //@line 9268
        _mbed_assert_internal(12025, 12034, 201); //@line 9269
        if (___async) {
         HEAP32[$AsyncCtx130 >> 2] = 299; //@line 9272
         HEAP32[$AsyncCtx130 + 4 >> 2] = $5; //@line 9274
         HEAP32[$AsyncCtx130 + 8 >> 2] = $0; //@line 9276
         HEAP32[$AsyncCtx130 + 12 >> 2] = $59; //@line 9278
         HEAP32[$AsyncCtx130 + 16 >> 2] = $7; //@line 9280
         HEAP32[$AsyncCtx130 + 20 >> 2] = $6; //@line 9282
         sp = STACKTOP; //@line 9283
         STACKTOP = sp; //@line 9284
         return;
        } else {
         _emscripten_free_async_context($AsyncCtx130 | 0); //@line 9286
         break;
        }
       }
      } while (0);
     }
     $109 = $0 + 944 | 0; //@line 9292
     HEAP8[$109 >> 0] = HEAP8[$109 >> 0] | 34; //@line 9295
     $112 = HEAP32[$59 >> 2] | 0; //@line 9296
     $AsyncCtx39 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9298
     __ZN18LoRaWANTimeHandler5startER13timer_event_tj($112, $0 + 996 | 0, 1); //@line 9299
     if (___async) {
      HEAP32[$AsyncCtx39 >> 2] = 300; //@line 9302
      HEAP32[$AsyncCtx39 + 4 >> 2] = $7; //@line 9304
      HEAP32[$AsyncCtx39 + 8 >> 2] = $6; //@line 9306
      sp = STACKTOP; //@line 9307
      STACKTOP = sp; //@line 9308
      return;
     }
     _emscripten_free_async_context($AsyncCtx39 | 0); //@line 9310
     STACKTOP = sp; //@line 9311
     return;
    }
    $117 = $2 & 65535; //@line 9314
    $120 = $0 + 908 | 0; //@line 9317
    $122 = $0 + 638 | 0; //@line 9319
    $123 = $0 + 639 | 0; //@line 9320
    if (__Z18decrypt_join_framePKhtS0_Ph($1 + 1 | 0, $117 + 65535 & 65535, HEAP32[$120 >> 2] | 0, $123) | 0) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 4 >> 2] = 13; //@line 9326
     STACKTOP = sp; //@line 9327
     return;
    }
    HEAP8[$122 >> 0] = $83; //@line 9329
    $128 = $117 + -4 | 0; //@line 9330
    $130 = HEAP32[$120 >> 2] | 0; //@line 9332
    $AsyncCtx11 = _emscripten_alloc_async_context(64, sp) | 0; //@line 9333
    $131 = __Z22compute_join_frame_micPKhtS0_Pj($122, $128 & 65535, $130, $7) | 0; //@line 9334
    if (___async) {
     HEAP32[$AsyncCtx11 >> 2] = 301; //@line 9337
     HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 9339
     HEAP32[$AsyncCtx11 + 8 >> 2] = $128; //@line 9341
     HEAP32[$AsyncCtx11 + 12 >> 2] = $117; //@line 9343
     HEAP32[$AsyncCtx11 + 16 >> 2] = $7; //@line 9345
     HEAP32[$AsyncCtx11 + 20 >> 2] = $10; //@line 9347
     HEAP32[$AsyncCtx11 + 24 >> 2] = $7; //@line 9349
     HEAP32[$AsyncCtx11 + 28 >> 2] = $6; //@line 9351
     HEAP32[$AsyncCtx11 + 32 >> 2] = $120; //@line 9353
     HEAP32[$AsyncCtx11 + 36 >> 2] = $123; //@line 9355
     HEAP32[$AsyncCtx11 + 40 >> 2] = $8; //@line 9357
     HEAP32[$AsyncCtx11 + 44 >> 2] = $9; //@line 9359
     HEAP32[$AsyncCtx11 + 48 >> 2] = $59; //@line 9361
     HEAP32[$AsyncCtx11 + 52 >> 2] = $6; //@line 9363
     HEAP32[$AsyncCtx11 + 56 >> 2] = $0; //@line 9365
     HEAP32[$AsyncCtx11 + 60 >> 2] = $84; //@line 9367
     sp = STACKTOP; //@line 9368
     STACKTOP = sp; //@line 9369
     return;
    }
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 9371
    if ($131 | 0) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 4 >> 2] = 13; //@line 9376
     STACKTOP = sp; //@line 9377
     return;
    }
    if ((HEAPU8[$117 + -3 + ($0 + 638) >> 0] << 8 | HEAPU8[$0 + 638 + $128 >> 0] | HEAPU8[$117 + -2 + ($0 + 638) >> 0] << 16 | HEAPU8[$117 + -1 + ($0 + 638) >> 0] << 24 | 0) != (HEAP32[$7 >> 2] | 0)) {
     HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) + 4 >> 2] = 7; //@line 9406
     break L7;
    }
    if (__Z28compute_skeys_for_join_framePKhS0_tPhS1_(HEAP32[$120 >> 2] | 0, $123, HEAP16[$0 + 946 >> 1] | 0, $8, $9) | 0) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 4 >> 2] = 13; //@line 9417
     STACKTOP = sp; //@line 9418
     return;
    }
    HEAP32[$0 + 948 >> 2] = HEAPU8[$0 + 644 >> 0] << 16 | (HEAPU8[$0 + 643 >> 0] << 8 | HEAPU8[$0 + 642 >> 0]); //@line 9434
    HEAP32[$0 + 952 >> 2] = HEAPU8[$0 + 648 >> 0] << 24 | (HEAPU8[$0 + 647 >> 0] << 16 | (HEAPU8[$0 + 646 >> 0] << 8 | HEAPU8[$0 + 645 >> 0])); //@line 9454
    $214 = HEAP8[$0 + 649 >> 0] | 0; //@line 9456
    HEAP8[$0 + 1129 >> 0] = ($214 & 255) >>> 4 & 7; //@line 9462
    HEAP8[$0 + 1136 >> 0] = $214 & 15; //@line 9465
    $224 = HEAP8[$0 + 650 >> 0] & 15; //@line 9468
    $228 = $224 << 24 >> 24 == 0 ? 1e3 : ($224 & 255) * 1e3 | 0; //@line 9473
    HEAP32[$0 + 1112 >> 2] = $228; //@line 9474
    HEAP32[$0 + 1116 >> 2] = $228 + 1e3; //@line 9477
    HEAP32[$6 >> 2] = $0 + 651; //@line 9479
    HEAP8[$6 + 4 >> 0] = $117 + 239; //@line 9483
    $235 = HEAP32[$0 >> 2] | 0; //@line 9484
    $238 = HEAP32[(HEAP32[$235 >> 2] | 0) + 20 >> 2] | 0; //@line 9487
    $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 9488
    FUNCTION_TABLE_vii[$238 & 31]($235, $6); //@line 9489
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 302; //@line 9492
     HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 9494
     HEAP32[$AsyncCtx + 8 >> 2] = $84; //@line 9496
     HEAP32[$AsyncCtx + 12 >> 2] = $59; //@line 9498
     HEAP32[$AsyncCtx + 16 >> 2] = $7; //@line 9500
     HEAP32[$AsyncCtx + 20 >> 2] = $6; //@line 9502
     sp = STACKTOP; //@line 9503
     STACKTOP = sp; //@line 9504
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 9506
     HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) + 4 >> 2] = 0; //@line 9510
     HEAP8[$84 >> 0] = 1; //@line 9511
     break L7;
    }
    break;
   }
  case 3:
  case 5:
   {
    $257 = __ZN7LoRaPHY15get_max_payloadEhb(HEAP32[$0 >> 2] | 0, HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 10 >> 0] | 0, (HEAP8[$0 + 369 >> 0] | 0) != 0) | 0; //@line 9524
    $258 = $2 & 65535; //@line 9525
    $sext = ($258 << 16) + -851968 | 0; //@line 9527
    if (((($sext | 0) < 0 ? 0 : $sext >> 16) | 0) > ($257 & 255 | 0)) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 4 >> 2] = 1; //@line 9536
     $266 = $0 + 968 | 0; //@line 9537
     HEAP32[$266 >> 2] = HEAP32[$266 >> 2] | 64; //@line 9540
     if (HEAP8[$0 + 373 >> 0] | 0) {
      $273 = HEAP32[$0 + 1328 >> 2] | 0; //@line 9546
      HEAP32[$5 >> 2] = 297; //@line 9547
      HEAP32[$5 + 4 >> 2] = 0; //@line 9549
      $AsyncCtx83 = _emscripten_alloc_async_context(24, sp) | 0; //@line 9550
      HEAP32[$$byval_copy173 >> 2] = HEAP32[$5 >> 2]; //@line 9551
      HEAP32[$$byval_copy173 + 4 >> 2] = HEAP32[$5 + 4 >> 2]; //@line 9551
      $274 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($273, $0, $$byval_copy173) | 0; //@line 9552
      if (___async) {
       HEAP32[$AsyncCtx83 >> 2] = 303; //@line 9555
       HEAP32[$AsyncCtx83 + 4 >> 2] = $5; //@line 9557
       HEAP32[$AsyncCtx83 + 8 >> 2] = $0; //@line 9559
       HEAP32[$AsyncCtx83 + 12 >> 2] = $59; //@line 9561
       HEAP32[$AsyncCtx83 + 16 >> 2] = $7; //@line 9563
       HEAP32[$AsyncCtx83 + 20 >> 2] = $6; //@line 9565
       sp = STACKTOP; //@line 9566
       STACKTOP = sp; //@line 9567
       return;
      }
      _emscripten_free_async_context($AsyncCtx83 | 0); //@line 9569
      do {
       if (!$274) {
        $AsyncCtx126 = _emscripten_alloc_async_context(24, sp) | 0; //@line 9573
        _mbed_assert_internal(12025, 12034, 201); //@line 9574
        if (___async) {
         HEAP32[$AsyncCtx126 >> 2] = 304; //@line 9577
         HEAP32[$AsyncCtx126 + 4 >> 2] = $5; //@line 9579
         HEAP32[$AsyncCtx126 + 8 >> 2] = $0; //@line 9581
         HEAP32[$AsyncCtx126 + 12 >> 2] = $59; //@line 9583
         HEAP32[$AsyncCtx126 + 16 >> 2] = $7; //@line 9585
         HEAP32[$AsyncCtx126 + 20 >> 2] = $6; //@line 9587
         sp = STACKTOP; //@line 9588
         STACKTOP = sp; //@line 9589
         return;
        } else {
         _emscripten_free_async_context($AsyncCtx126 | 0); //@line 9591
         break;
        }
       }
      } while (0);
     }
     $286 = $0 + 944 | 0; //@line 9597
     HEAP8[$286 >> 0] = HEAP8[$286 >> 0] | 34; //@line 9600
     $289 = HEAP32[$59 >> 2] | 0; //@line 9601
     $AsyncCtx36 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9603
     __ZN18LoRaWANTimeHandler5startER13timer_event_tj($289, $0 + 996 | 0, 1); //@line 9604
     if (___async) {
      HEAP32[$AsyncCtx36 >> 2] = 305; //@line 9607
      HEAP32[$AsyncCtx36 + 4 >> 2] = $7; //@line 9609
      HEAP32[$AsyncCtx36 + 8 >> 2] = $6; //@line 9611
      sp = STACKTOP; //@line 9612
      STACKTOP = sp; //@line 9613
      return;
     }
     _emscripten_free_async_context($AsyncCtx36 | 0); //@line 9615
     STACKTOP = sp; //@line 9616
     return;
    }
    $310 = HEAPU8[$1 + 2 >> 0] << 8 | HEAPU8[$1 + 1 >> 0] | HEAPU8[$1 + 3 >> 0] << 16 | HEAPU8[$1 + 4 >> 0] << 24; //@line 9635
    L85 : do {
     if (($310 | 0) == (HEAP32[$0 + 952 >> 2] | 0)) {
      $$1165 = 0; //@line 9642
      $$1167 = $9; //@line 9642
      $$1169 = $8; //@line 9642
      $$1171 = 0; //@line 9642
      $$sink229 = $0 + 960 | 0; //@line 9642
     } else {
      $$0170231 = HEAP32[$0 + 1208 >> 2] | 0; //@line 9645
      L88 : do {
       if ($$0170231 | 0) {
        $$0170232 = $$0170231; //@line 9649
        while (1) {
         if (($310 | 0) == (HEAP32[$$0170232 >> 2] | 0)) {
          break;
         }
         $$0170 = HEAP32[$$0170232 + 40 >> 2] | 0; //@line 9657
         if (!$$0170) {
          break L88;
         } else {
          $$0170232 = $$0170; //@line 9662
         }
        }
        $$1165 = 1; //@line 9668
        $$1167 = $$0170232 + 20 | 0; //@line 9668
        $$1169 = $$0170232 + 4 | 0; //@line 9668
        $$1171 = $$0170232; //@line 9668
        $$sink229 = $$0170232 + 36 | 0; //@line 9668
        break L85;
       }
      } while (0);
      HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 4 >> 2] = 11; //@line 9674
      $325 = $0 + 968 | 0; //@line 9675
      HEAP32[$325 >> 2] = HEAP32[$325 >> 2] | 64; //@line 9678
      if (HEAP8[$0 + 373 >> 0] | 0) {
       $332 = HEAP32[$0 + 1328 >> 2] | 0; //@line 9684
       HEAP32[$5 >> 2] = 297; //@line 9685
       HEAP32[$5 + 4 >> 2] = 0; //@line 9687
       $AsyncCtx79 = _emscripten_alloc_async_context(24, sp) | 0; //@line 9688
       HEAP32[$$byval_copy173 >> 2] = HEAP32[$5 >> 2]; //@line 9689
       HEAP32[$$byval_copy173 + 4 >> 2] = HEAP32[$5 + 4 >> 2]; //@line 9689
       $333 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($332, $0, $$byval_copy173) | 0; //@line 9690
       if (___async) {
        HEAP32[$AsyncCtx79 >> 2] = 306; //@line 9693
        HEAP32[$AsyncCtx79 + 4 >> 2] = $5; //@line 9695
        HEAP32[$AsyncCtx79 + 8 >> 2] = $0; //@line 9697
        HEAP32[$AsyncCtx79 + 12 >> 2] = $59; //@line 9699
        HEAP32[$AsyncCtx79 + 16 >> 2] = $7; //@line 9701
        HEAP32[$AsyncCtx79 + 20 >> 2] = $6; //@line 9703
        sp = STACKTOP; //@line 9704
        STACKTOP = sp; //@line 9705
        return;
       }
       _emscripten_free_async_context($AsyncCtx79 | 0); //@line 9707
       do {
        if (!$333) {
         $AsyncCtx122 = _emscripten_alloc_async_context(24, sp) | 0; //@line 9711
         _mbed_assert_internal(12025, 12034, 201); //@line 9712
         if (___async) {
          HEAP32[$AsyncCtx122 >> 2] = 307; //@line 9715
          HEAP32[$AsyncCtx122 + 4 >> 2] = $5; //@line 9717
          HEAP32[$AsyncCtx122 + 8 >> 2] = $0; //@line 9719
          HEAP32[$AsyncCtx122 + 12 >> 2] = $59; //@line 9721
          HEAP32[$AsyncCtx122 + 16 >> 2] = $7; //@line 9723
          HEAP32[$AsyncCtx122 + 20 >> 2] = $6; //@line 9725
          sp = STACKTOP; //@line 9726
          STACKTOP = sp; //@line 9727
          return;
         } else {
          _emscripten_free_async_context($AsyncCtx122 | 0); //@line 9729
          break;
         }
        }
       } while (0);
      }
      $345 = $0 + 944 | 0; //@line 9735
      HEAP8[$345 >> 0] = HEAP8[$345 >> 0] | 34; //@line 9738
      $348 = HEAP32[$59 >> 2] | 0; //@line 9739
      $AsyncCtx33 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9741
      __ZN18LoRaWANTimeHandler5startER13timer_event_tj($348, $0 + 996 | 0, 1); //@line 9742
      if (___async) {
       HEAP32[$AsyncCtx33 >> 2] = 308; //@line 9745
       HEAP32[$AsyncCtx33 + 4 >> 2] = $7; //@line 9747
       HEAP32[$AsyncCtx33 + 8 >> 2] = $6; //@line 9749
       sp = STACKTOP; //@line 9750
       STACKTOP = sp; //@line 9751
       return;
      }
      _emscripten_free_async_context($AsyncCtx33 | 0); //@line 9753
      STACKTOP = sp; //@line 9754
      return;
     }
    } while (0);
    $353 = HEAP32[$$sink229 >> 2] | 0; //@line 9757
    $355 = HEAP8[$1 + 5 >> 0] | 0; //@line 9759
    $364 = $355 & 15; //@line 9768
    $365 = $364 & 255; //@line 9769
    $366 = $365 + 8 | 0; //@line 9770
    $367 = $366 & 255; //@line 9771
    $368 = $258 + -4 | 0; //@line 9772
    $389 = HEAPU8[$1 + ($258 + -3) >> 0] << 8 | HEAPU8[$1 + $368 >> 0] | HEAPU8[$1 + ($258 + -2) >> 0] << 16 | HEAPU8[$1 + ($258 + -1) >> 0] << 24; //@line 9793
    $390 = (HEAPU8[$1 + 7 >> 0] << 8 | HEAPU8[$1 + 6 >> 0]) - $353 | 0; //@line 9794
    $391 = $390 & 65535; //@line 9795
    do {
     if ($391 >>> 0 < 32768) {
      $393 = $391 + $353 | 0; //@line 9799
      $AsyncCtx7 = _emscripten_alloc_async_context(108, sp) | 0; //@line 9801
      __Z11compute_micPKhtS0_jhjPj($1, $368 & 65535, $$1169, $310, 1, $393, $7) | 0; //@line 9802
      if (___async) {
       HEAP32[$AsyncCtx7 >> 2] = 309; //@line 9805
       HEAP32[$AsyncCtx7 + 4 >> 2] = $393; //@line 9807
       HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 9809
       HEAP32[$AsyncCtx7 + 12 >> 2] = $391; //@line 9811
       HEAP32[$AsyncCtx7 + 16 >> 2] = $10; //@line 9813
       HEAP32[$AsyncCtx7 + 20 >> 2] = $0; //@line 9815
       HEAP32[$AsyncCtx7 + 24 >> 2] = $59; //@line 9817
       HEAP32[$AsyncCtx7 + 28 >> 2] = $7; //@line 9819
       HEAP32[$AsyncCtx7 + 32 >> 2] = $6; //@line 9821
       HEAP32[$AsyncCtx7 + 36 >> 2] = $5; //@line 9823
       HEAP8[$AsyncCtx7 + 40 >> 0] = $$1165; //@line 9825
       HEAP8[$AsyncCtx7 + 41 >> 0] = $355; //@line 9827
       HEAP32[$AsyncCtx7 + 44 >> 2] = $$1171; //@line 9829
       HEAP32[$AsyncCtx7 + 48 >> 2] = $7; //@line 9831
       HEAP32[$AsyncCtx7 + 52 >> 2] = $389; //@line 9833
       HEAP32[$AsyncCtx7 + 56 >> 2] = $5; //@line 9835
       HEAP8[$AsyncCtx7 + 60 >> 0] = $trunc; //@line 9837
       HEAP32[$AsyncCtx7 + 64 >> 2] = $5; //@line 9839
       HEAP32[$AsyncCtx7 + 68 >> 2] = $365; //@line 9841
       HEAP32[$AsyncCtx7 + 72 >> 2] = $1; //@line 9843
       HEAP32[$AsyncCtx7 + 76 >> 2] = $366; //@line 9845
       HEAP32[$AsyncCtx7 + 80 >> 2] = $368; //@line 9847
       HEAP8[$AsyncCtx7 + 84 >> 0] = $364; //@line 9849
       HEAP8[$AsyncCtx7 + 85 >> 0] = $4; //@line 9851
       HEAP32[$AsyncCtx7 + 88 >> 2] = $$1169; //@line 9853
       HEAP32[$AsyncCtx7 + 92 >> 2] = $310; //@line 9855
       HEAP8[$AsyncCtx7 + 96 >> 0] = $367; //@line 9857
       HEAP32[$AsyncCtx7 + 100 >> 2] = $$1167; //@line 9859
       HEAP32[$AsyncCtx7 + 104 >> 2] = $5; //@line 9861
       sp = STACKTOP; //@line 9862
       STACKTOP = sp; //@line 9863
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx7 | 0); //@line 9865
       $$3175 = $393; //@line 9868
       $$sink196 = ($389 | 0) == (HEAP32[$7 >> 2] | 0); //@line 9868
       break;
      }
     } else {
      $427 = $353 + 65536 + ($390 << 16 >> 16) | 0; //@line 9875
      $AsyncCtx3 = _emscripten_alloc_async_context(112, sp) | 0; //@line 9877
      __Z11compute_micPKhtS0_jhjPj($1, $368 & 65535, $$1169, $310, 1, $427, $7) | 0; //@line 9878
      if (___async) {
       HEAP32[$AsyncCtx3 >> 2] = 310; //@line 9881
       HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 9883
       HEAP32[$AsyncCtx3 + 8 >> 2] = $391; //@line 9885
       HEAP32[$AsyncCtx3 + 12 >> 2] = $10; //@line 9887
       HEAP32[$AsyncCtx3 + 16 >> 2] = $0; //@line 9889
       HEAP32[$AsyncCtx3 + 20 >> 2] = $59; //@line 9891
       HEAP32[$AsyncCtx3 + 24 >> 2] = $7; //@line 9893
       HEAP32[$AsyncCtx3 + 28 >> 2] = $6; //@line 9895
       HEAP32[$AsyncCtx3 + 32 >> 2] = $5; //@line 9897
       HEAP8[$AsyncCtx3 + 36 >> 0] = $$1165; //@line 9899
       HEAP8[$AsyncCtx3 + 37 >> 0] = $355; //@line 9901
       HEAP32[$AsyncCtx3 + 40 >> 2] = $$1171; //@line 9903
       HEAP32[$AsyncCtx3 + 44 >> 2] = $5; //@line 9905
       HEAP8[$AsyncCtx3 + 48 >> 0] = $trunc; //@line 9907
       HEAP32[$AsyncCtx3 + 52 >> 2] = $5; //@line 9909
       HEAP32[$AsyncCtx3 + 56 >> 2] = $7; //@line 9911
       HEAP32[$AsyncCtx3 + 60 >> 2] = $389; //@line 9913
       HEAP32[$AsyncCtx3 + 64 >> 2] = $427; //@line 9915
       HEAP32[$AsyncCtx3 + 68 >> 2] = $353; //@line 9917
       HEAP32[$AsyncCtx3 + 72 >> 2] = $365; //@line 9919
       HEAP32[$AsyncCtx3 + 76 >> 2] = $1; //@line 9921
       HEAP32[$AsyncCtx3 + 80 >> 2] = $366; //@line 9923
       HEAP32[$AsyncCtx3 + 84 >> 2] = $368; //@line 9925
       HEAP8[$AsyncCtx3 + 88 >> 0] = $364; //@line 9927
       HEAP8[$AsyncCtx3 + 89 >> 0] = $4; //@line 9929
       HEAP32[$AsyncCtx3 + 92 >> 2] = $$1169; //@line 9931
       HEAP32[$AsyncCtx3 + 96 >> 2] = $310; //@line 9933
       HEAP8[$AsyncCtx3 + 100 >> 0] = $367; //@line 9935
       HEAP32[$AsyncCtx3 + 104 >> 2] = $$1167; //@line 9937
       HEAP32[$AsyncCtx3 + 108 >> 2] = $5; //@line 9939
       sp = STACKTOP; //@line 9940
       STACKTOP = sp; //@line 9941
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx3 | 0); //@line 9943
       $459 = ($389 | 0) == (HEAP32[$7 >> 2] | 0); //@line 9945
       $$3175 = $459 ? $427 : $353; //@line 9947
       $$sink196 = $459; //@line 9947
       break;
      }
     }
    } while (0);
    $463 = $391 >>> 0 < ((__ZN7LoRaPHY29get_maximum_frame_counter_gapEv(HEAP32[$0 >> 2] | 0) | 0) & 65535) >>> 0; //@line 9955
    $465 = (__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 4 | 0; //@line 9957
    if (!$463) {
     HEAP32[$465 >> 2] = 10; //@line 9959
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 32 >> 2] = $$3175; //@line 9962
     $468 = $0 + 968 | 0; //@line 9963
     HEAP32[$468 >> 2] = HEAP32[$468 >> 2] | 64; //@line 9966
     if (HEAP8[$0 + 373 >> 0] | 0) {
      $475 = HEAP32[$0 + 1328 >> 2] | 0; //@line 9972
      HEAP32[$5 >> 2] = 297; //@line 9973
      HEAP32[$5 + 4 >> 2] = 0; //@line 9975
      $AsyncCtx75 = _emscripten_alloc_async_context(24, sp) | 0; //@line 9976
      HEAP32[$$byval_copy173 >> 2] = HEAP32[$5 >> 2]; //@line 9977
      HEAP32[$$byval_copy173 + 4 >> 2] = HEAP32[$5 + 4 >> 2]; //@line 9977
      $476 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($475, $0, $$byval_copy173) | 0; //@line 9978
      if (___async) {
       HEAP32[$AsyncCtx75 >> 2] = 311; //@line 9981
       HEAP32[$AsyncCtx75 + 4 >> 2] = $5; //@line 9983
       HEAP32[$AsyncCtx75 + 8 >> 2] = $0; //@line 9985
       HEAP32[$AsyncCtx75 + 12 >> 2] = $59; //@line 9987
       HEAP32[$AsyncCtx75 + 16 >> 2] = $7; //@line 9989
       HEAP32[$AsyncCtx75 + 20 >> 2] = $6; //@line 9991
       sp = STACKTOP; //@line 9992
       STACKTOP = sp; //@line 9993
       return;
      }
      _emscripten_free_async_context($AsyncCtx75 | 0); //@line 9995
      do {
       if (!$476) {
        $AsyncCtx118 = _emscripten_alloc_async_context(24, sp) | 0; //@line 9999
        _mbed_assert_internal(12025, 12034, 201); //@line 10000
        if (___async) {
         HEAP32[$AsyncCtx118 >> 2] = 312; //@line 10003
         HEAP32[$AsyncCtx118 + 4 >> 2] = $5; //@line 10005
         HEAP32[$AsyncCtx118 + 8 >> 2] = $0; //@line 10007
         HEAP32[$AsyncCtx118 + 12 >> 2] = $59; //@line 10009
         HEAP32[$AsyncCtx118 + 16 >> 2] = $7; //@line 10011
         HEAP32[$AsyncCtx118 + 20 >> 2] = $6; //@line 10013
         sp = STACKTOP; //@line 10014
         STACKTOP = sp; //@line 10015
         return;
        } else {
         _emscripten_free_async_context($AsyncCtx118 | 0); //@line 10017
         break;
        }
       }
      } while (0);
     }
     $488 = $0 + 944 | 0; //@line 10023
     HEAP8[$488 >> 0] = HEAP8[$488 >> 0] | 34; //@line 10026
     $491 = HEAP32[$59 >> 2] | 0; //@line 10027
     $AsyncCtx30 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10029
     __ZN18LoRaWANTimeHandler5startER13timer_event_tj($491, $0 + 996 | 0, 1); //@line 10030
     if (___async) {
      HEAP32[$AsyncCtx30 >> 2] = 313; //@line 10033
      HEAP32[$AsyncCtx30 + 4 >> 2] = $7; //@line 10035
      HEAP32[$AsyncCtx30 + 8 >> 2] = $6; //@line 10037
      sp = STACKTOP; //@line 10038
      STACKTOP = sp; //@line 10039
      return;
     }
     _emscripten_free_async_context($AsyncCtx30 | 0); //@line 10041
     STACKTOP = sp; //@line 10042
     return;
    }
    if (!$$sink196) {
     HEAP32[$465 >> 2] = 12; //@line 10045
     $728 = $0 + 968 | 0; //@line 10046
     HEAP32[$728 >> 2] = HEAP32[$728 >> 2] | 64; //@line 10049
     if (HEAP8[$0 + 373 >> 0] | 0) {
      $735 = HEAP32[$0 + 1328 >> 2] | 0; //@line 10055
      HEAP32[$5 >> 2] = 297; //@line 10056
      HEAP32[$5 + 4 >> 2] = 0; //@line 10058
      $AsyncCtx63 = _emscripten_alloc_async_context(24, sp) | 0; //@line 10059
      HEAP32[$$byval_copy173 >> 2] = HEAP32[$5 >> 2]; //@line 10060
      HEAP32[$$byval_copy173 + 4 >> 2] = HEAP32[$5 + 4 >> 2]; //@line 10060
      $736 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($735, $0, $$byval_copy173) | 0; //@line 10061
      if (___async) {
       HEAP32[$AsyncCtx63 >> 2] = 325; //@line 10064
       HEAP32[$AsyncCtx63 + 4 >> 2] = $5; //@line 10066
       HEAP32[$AsyncCtx63 + 8 >> 2] = $0; //@line 10068
       HEAP32[$AsyncCtx63 + 12 >> 2] = $59; //@line 10070
       HEAP32[$AsyncCtx63 + 16 >> 2] = $7; //@line 10072
       HEAP32[$AsyncCtx63 + 20 >> 2] = $6; //@line 10074
       sp = STACKTOP; //@line 10075
       STACKTOP = sp; //@line 10076
       return;
      }
      _emscripten_free_async_context($AsyncCtx63 | 0); //@line 10078
      do {
       if (!$736) {
        $AsyncCtx106 = _emscripten_alloc_async_context(24, sp) | 0; //@line 10082
        _mbed_assert_internal(12025, 12034, 201); //@line 10083
        if (___async) {
         HEAP32[$AsyncCtx106 >> 2] = 326; //@line 10086
         HEAP32[$AsyncCtx106 + 4 >> 2] = $5; //@line 10088
         HEAP32[$AsyncCtx106 + 8 >> 2] = $0; //@line 10090
         HEAP32[$AsyncCtx106 + 12 >> 2] = $59; //@line 10092
         HEAP32[$AsyncCtx106 + 16 >> 2] = $7; //@line 10094
         HEAP32[$AsyncCtx106 + 20 >> 2] = $6; //@line 10096
         sp = STACKTOP; //@line 10097
         STACKTOP = sp; //@line 10098
         return;
        } else {
         _emscripten_free_async_context($AsyncCtx106 | 0); //@line 10100
         break;
        }
       }
      } while (0);
     }
     $748 = $0 + 944 | 0; //@line 10106
     HEAP8[$748 >> 0] = HEAP8[$748 >> 0] | 34; //@line 10109
     $751 = HEAP32[$59 >> 2] | 0; //@line 10110
     $AsyncCtx21 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10112
     __ZN18LoRaWANTimeHandler5startER13timer_event_tj($751, $0 + 996 | 0, 1); //@line 10113
     if (___async) {
      HEAP32[$AsyncCtx21 >> 2] = 327; //@line 10116
      HEAP32[$AsyncCtx21 + 4 >> 2] = $7; //@line 10118
      HEAP32[$AsyncCtx21 + 8 >> 2] = $6; //@line 10120
      sp = STACKTOP; //@line 10121
      STACKTOP = sp; //@line 10122
      return;
     }
     _emscripten_free_async_context($AsyncCtx21 | 0); //@line 10124
     STACKTOP = sp; //@line 10125
     return;
    }
    HEAP32[$465 >> 2] = 0; //@line 10127
    HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 8 >> 0] = $$1165; //@line 10130
    HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 11 >> 0] = ($355 & 255) >>> 4 & 1; //@line 10135
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 12 >> 2] = 0; //@line 10138
    HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 16 >> 1] = 0; //@line 10141
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 32 >> 2] = $$3175; //@line 10144
    HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($10) | 0) + 4 >> 2] = 0; //@line 10147
    HEAP32[$0 + 964 >> 2] = 0; //@line 10149
    $510 = $0 + 4 | 0; //@line 10150
    __ZN14LoRaMacCommand19clear_repeat_bufferEv($510); //@line 10151
    do {
     if ($$1165 << 24 >> 24 == 1) {
      HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) >> 2] = 2; //@line 10156
      $513 = $$1171 + 36 | 0; //@line 10157
      $514 = HEAP32[$513 >> 2] | 0; //@line 10158
      if (($514 | 0) != ($$3175 | 0) | ($514 | 0) == 0) {
       $$1$off0 = 0; //@line 10163
       $$sink = $513; //@line 10163
      } else {
       HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 4 >> 2] = 8; //@line 10167
       HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 32 >> 2] = $$3175; //@line 10170
       $521 = $0 + 968 | 0; //@line 10171
       HEAP32[$521 >> 2] = HEAP32[$521 >> 2] | 64; //@line 10174
       if (HEAP8[$0 + 373 >> 0] | 0) {
        $528 = HEAP32[$0 + 1328 >> 2] | 0; //@line 10180
        HEAP32[$5 >> 2] = 297; //@line 10181
        HEAP32[$5 + 4 >> 2] = 0; //@line 10183
        $AsyncCtx71 = _emscripten_alloc_async_context(24, sp) | 0; //@line 10184
        HEAP32[$$byval_copy173 >> 2] = HEAP32[$5 >> 2]; //@line 10185
        HEAP32[$$byval_copy173 + 4 >> 2] = HEAP32[$5 + 4 >> 2]; //@line 10185
        $529 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($528, $0, $$byval_copy173) | 0; //@line 10186
        if (___async) {
         HEAP32[$AsyncCtx71 >> 2] = 314; //@line 10189
         HEAP32[$AsyncCtx71 + 4 >> 2] = $5; //@line 10191
         HEAP32[$AsyncCtx71 + 8 >> 2] = $0; //@line 10193
         HEAP32[$AsyncCtx71 + 12 >> 2] = $59; //@line 10195
         HEAP32[$AsyncCtx71 + 16 >> 2] = $7; //@line 10197
         HEAP32[$AsyncCtx71 + 20 >> 2] = $6; //@line 10199
         sp = STACKTOP; //@line 10200
         STACKTOP = sp; //@line 10201
         return;
        }
        _emscripten_free_async_context($AsyncCtx71 | 0); //@line 10203
        do {
         if (!$529) {
          $AsyncCtx114 = _emscripten_alloc_async_context(24, sp) | 0; //@line 10207
          _mbed_assert_internal(12025, 12034, 201); //@line 10208
          if (___async) {
           HEAP32[$AsyncCtx114 >> 2] = 315; //@line 10211
           HEAP32[$AsyncCtx114 + 4 >> 2] = $5; //@line 10213
           HEAP32[$AsyncCtx114 + 8 >> 2] = $0; //@line 10215
           HEAP32[$AsyncCtx114 + 12 >> 2] = $59; //@line 10217
           HEAP32[$AsyncCtx114 + 16 >> 2] = $7; //@line 10219
           HEAP32[$AsyncCtx114 + 20 >> 2] = $6; //@line 10221
           sp = STACKTOP; //@line 10222
           STACKTOP = sp; //@line 10223
           return;
          } else {
           _emscripten_free_async_context($AsyncCtx114 | 0); //@line 10225
           break;
          }
         }
        } while (0);
       }
       $541 = $0 + 944 | 0; //@line 10231
       HEAP8[$541 >> 0] = HEAP8[$541 >> 0] | 34; //@line 10234
       $544 = HEAP32[$59 >> 2] | 0; //@line 10235
       $AsyncCtx27 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10237
       __ZN18LoRaWANTimeHandler5startER13timer_event_tj($544, $0 + 996 | 0, 1); //@line 10238
       if (___async) {
        HEAP32[$AsyncCtx27 >> 2] = 316; //@line 10241
        HEAP32[$AsyncCtx27 + 4 >> 2] = $7; //@line 10243
        HEAP32[$AsyncCtx27 + 8 >> 2] = $6; //@line 10245
        sp = STACKTOP; //@line 10246
        STACKTOP = sp; //@line 10247
        return;
       }
       _emscripten_free_async_context($AsyncCtx27 | 0); //@line 10249
       STACKTOP = sp; //@line 10250
       return;
      }
     } else {
      $549 = $0 + 374 | 0; //@line 10254
      if ($trunc << 24 >> 24 == 5) {
       HEAP8[$549 >> 0] = 1; //@line 10256
       HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) >> 2] = 1; //@line 10258
       $551 = $0 + 960 | 0; //@line 10259
       $552 = HEAP32[$551 >> 2] | 0; //@line 10260
       $$1$off0 = ($552 | 0) != 0 & ($552 | 0) == ($$3175 | 0); //@line 10264
       $$sink = $551; //@line 10264
       break;
      }
      HEAP8[$549 >> 0] = 0; //@line 10267
      HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) >> 2] = 0; //@line 10269
      $556 = $0 + 960 | 0; //@line 10270
      $557 = HEAP32[$556 >> 2] | 0; //@line 10271
      if (($557 | 0) != ($$3175 | 0) | ($557 | 0) == 0) {
       $$1$off0 = 0; //@line 10276
       $$sink = $556; //@line 10276
      } else {
       HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 4 >> 2] = 8; //@line 10280
       HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 32 >> 2] = $$3175; //@line 10283
       $564 = $0 + 968 | 0; //@line 10284
       HEAP32[$564 >> 2] = HEAP32[$564 >> 2] | 64; //@line 10287
       if (HEAP8[$0 + 373 >> 0] | 0) {
        $571 = HEAP32[$0 + 1328 >> 2] | 0; //@line 10293
        HEAP32[$5 >> 2] = 297; //@line 10294
        HEAP32[$5 + 4 >> 2] = 0; //@line 10296
        $AsyncCtx67 = _emscripten_alloc_async_context(24, sp) | 0; //@line 10297
        HEAP32[$$byval_copy173 >> 2] = HEAP32[$5 >> 2]; //@line 10298
        HEAP32[$$byval_copy173 + 4 >> 2] = HEAP32[$5 + 4 >> 2]; //@line 10298
        $572 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($571, $0, $$byval_copy173) | 0; //@line 10299
        if (___async) {
         HEAP32[$AsyncCtx67 >> 2] = 317; //@line 10302
         HEAP32[$AsyncCtx67 + 4 >> 2] = $5; //@line 10304
         HEAP32[$AsyncCtx67 + 8 >> 2] = $0; //@line 10306
         HEAP32[$AsyncCtx67 + 12 >> 2] = $59; //@line 10308
         HEAP32[$AsyncCtx67 + 16 >> 2] = $7; //@line 10310
         HEAP32[$AsyncCtx67 + 20 >> 2] = $6; //@line 10312
         sp = STACKTOP; //@line 10313
         STACKTOP = sp; //@line 10314
         return;
        }
        _emscripten_free_async_context($AsyncCtx67 | 0); //@line 10316
        do {
         if (!$572) {
          $AsyncCtx110 = _emscripten_alloc_async_context(24, sp) | 0; //@line 10320
          _mbed_assert_internal(12025, 12034, 201); //@line 10321
          if (___async) {
           HEAP32[$AsyncCtx110 >> 2] = 318; //@line 10324
           HEAP32[$AsyncCtx110 + 4 >> 2] = $5; //@line 10326
           HEAP32[$AsyncCtx110 + 8 >> 2] = $0; //@line 10328
           HEAP32[$AsyncCtx110 + 12 >> 2] = $59; //@line 10330
           HEAP32[$AsyncCtx110 + 16 >> 2] = $7; //@line 10332
           HEAP32[$AsyncCtx110 + 20 >> 2] = $6; //@line 10334
           sp = STACKTOP; //@line 10335
           STACKTOP = sp; //@line 10336
           return;
          } else {
           _emscripten_free_async_context($AsyncCtx110 | 0); //@line 10338
           break;
          }
         }
        } while (0);
       }
       $584 = $0 + 944 | 0; //@line 10344
       HEAP8[$584 >> 0] = HEAP8[$584 >> 0] | 34; //@line 10347
       $587 = HEAP32[$59 >> 2] | 0; //@line 10348
       $AsyncCtx24 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10350
       __ZN18LoRaWANTimeHandler5startER13timer_event_tj($587, $0 + 996 | 0, 1); //@line 10351
       if (___async) {
        HEAP32[$AsyncCtx24 >> 2] = 319; //@line 10354
        HEAP32[$AsyncCtx24 + 4 >> 2] = $7; //@line 10356
        HEAP32[$AsyncCtx24 + 8 >> 2] = $6; //@line 10358
        sp = STACKTOP; //@line 10359
        STACKTOP = sp; //@line 10360
        return;
       }
       _emscripten_free_async_context($AsyncCtx24 | 0); //@line 10362
       STACKTOP = sp; //@line 10363
       return;
      }
     }
    } while (0);
    HEAP32[$$sink >> 2] = $$3175; //@line 10367
    if ((HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($10) | 0) >> 2] | 0) == 1) {
     if ($355 & 32) {
      __ZN14LoRaMacCommand20clear_command_bufferEv($510); //@line 10375
     }
    } else {
     __ZN14LoRaMacCommand20clear_command_bufferEv($510); //@line 10378
    }
    do {
     if (($368 | 0) > ($366 | 0)) {
      $597 = $365 + 9 | 0; //@line 10383
      $599 = HEAP8[$1 + $366 >> 0] | 0; //@line 10385
      $600 = $368 - $597 | 0; //@line 10386
      $601 = $600 & 255; //@line 10387
      HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 9 >> 0] = $599; //@line 10390
      $605 = $364 << 24 >> 24 == 0; //@line 10392
      if (!($599 << 24 >> 24)) {
       if (!$605) {
        $$3$off0226 = 6; //@line 10395
        break;
       }
       $609 = $0 + 638 | 0; //@line 10401
       if (__Z15decrypt_payloadPKhtS0_jhjPh($1 + $597 | 0, $600 & 255, $$1169, $310, 1, $$3175, $609) | 0) {
        HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 4 >> 2] = 13; //@line 10407
       }
       $614 = $0 + 264 | 0; //@line 10409
       $615 = __ZN11LoRaMacMlme16get_confirmationEv($614) | 0; //@line 10410
       $617 = HEAP32[$0 >> 2] | 0; //@line 10412
       $AsyncCtx55 = _emscripten_alloc_async_context(40, sp) | 0; //@line 10413
       $618 = __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($510, $609, 0, $601, $4, $615, $0 + 1096 | 0, $617) | 0; //@line 10414
       if (___async) {
        HEAP32[$AsyncCtx55 >> 2] = 320; //@line 10417
        HEAP32[$AsyncCtx55 + 4 >> 2] = $10; //@line 10419
        HEAP8[$AsyncCtx55 + 8 >> 0] = $$1$off0 & 1; //@line 10422
        HEAP32[$AsyncCtx55 + 12 >> 2] = $0; //@line 10424
        HEAP32[$AsyncCtx55 + 16 >> 2] = $59; //@line 10426
        HEAP32[$AsyncCtx55 + 20 >> 2] = $7; //@line 10428
        HEAP32[$AsyncCtx55 + 24 >> 2] = $6; //@line 10430
        HEAP32[$AsyncCtx55 + 28 >> 2] = $614; //@line 10432
        HEAP32[$AsyncCtx55 + 32 >> 2] = $510; //@line 10434
        HEAP8[$AsyncCtx55 + 36 >> 0] = $355; //@line 10436
        sp = STACKTOP; //@line 10437
        STACKTOP = sp; //@line 10438
        return;
       }
       _emscripten_free_async_context($AsyncCtx55 | 0); //@line 10440
       if ($618 | 0) {
        HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 4 >> 2] = 1; //@line 10445
        if ($$1$off0) {
         $$3$off0226 = 6; //@line 10447
         break;
        } else {
         label = 141; //@line 10450
         break;
        }
       }
       if (!(__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($510) | 0)) {
        label = 140; //@line 10456
        break;
       }
       HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($614) | 0) >> 2] = 4; //@line 10460
       $633 = $0 + 944 | 0; //@line 10461
       HEAP8[$633 >> 0] = HEAP8[$633 >> 0] | 16; //@line 10464
       __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($510); //@line 10465
       if ($$1$off0) {
        $$3$off0226 = 6; //@line 10467
        break;
       } else {
        label = 141; //@line 10470
        break;
       }
      }
      do {
       if (!$605) {
        $636 = $0 + 264 | 0; //@line 10476
        $637 = __ZN11LoRaMacMlme16get_confirmationEv($636) | 0; //@line 10477
        $639 = HEAP32[$0 >> 2] | 0; //@line 10479
        $AsyncCtx51 = _emscripten_alloc_async_context(60, sp) | 0; //@line 10480
        $640 = __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($510, $1, 8, $367, $4, $637, $0 + 1096 | 0, $639) | 0; //@line 10481
        if (___async) {
         HEAP32[$AsyncCtx51 >> 2] = 321; //@line 10484
         HEAP32[$AsyncCtx51 + 4 >> 2] = $0; //@line 10486
         HEAP32[$AsyncCtx51 + 8 >> 2] = $59; //@line 10488
         HEAP32[$AsyncCtx51 + 12 >> 2] = $7; //@line 10490
         HEAP32[$AsyncCtx51 + 16 >> 2] = $6; //@line 10492
         HEAP32[$AsyncCtx51 + 20 >> 2] = $1; //@line 10494
         HEAP32[$AsyncCtx51 + 24 >> 2] = $597; //@line 10496
         HEAP32[$AsyncCtx51 + 28 >> 2] = $600; //@line 10498
         HEAP32[$AsyncCtx51 + 32 >> 2] = $$1167; //@line 10500
         HEAP32[$AsyncCtx51 + 36 >> 2] = $310; //@line 10502
         HEAP32[$AsyncCtx51 + 40 >> 2] = $$3175; //@line 10504
         HEAP32[$AsyncCtx51 + 44 >> 2] = $636; //@line 10506
         HEAP32[$AsyncCtx51 + 48 >> 2] = $510; //@line 10508
         HEAP32[$AsyncCtx51 + 52 >> 2] = $10; //@line 10510
         HEAP8[$AsyncCtx51 + 56 >> 0] = $$1$off0 & 1; //@line 10513
         HEAP8[$AsyncCtx51 + 57 >> 0] = $355; //@line 10515
         sp = STACKTOP; //@line 10516
         STACKTOP = sp; //@line 10517
         return;
        }
        _emscripten_free_async_context($AsyncCtx51 | 0); //@line 10519
        if ($640 | 0) {
         HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 4 >> 2] = 1; //@line 10524
         break;
        }
        if (__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($510) | 0) {
         HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($636) | 0) >> 2] = 4; //@line 10530
         $661 = $0 + 944 | 0; //@line 10531
         HEAP8[$661 >> 0] = HEAP8[$661 >> 0] | 16; //@line 10534
         __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($510); //@line 10535
        }
       }
      } while (0);
      $666 = $600 & 255; //@line 10541
      $667 = $0 + 638 | 0; //@line 10542
      if (__Z15decrypt_payloadPKhtS0_jhjPh($1 + $597 | 0, $666, $$1167, $310, 1, $$3175, $667) | 0) {
       HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 4 >> 2] = 13; //@line 10548
      }
      if ($$1$off0) {
       $$3$off0226 = 6; //@line 10551
      } else {
       HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 12 >> 2] = $667; //@line 10555
       HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 16 >> 1] = $666; //@line 10558
       HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 18 >> 0] = 1; //@line 10561
       label = 141; //@line 10562
      }
     } else {
      if (!($364 << 24 >> 24)) {
       label = 140; //@line 10567
      } else {
       $679 = $0 + 264 | 0; //@line 10569
       $680 = __ZN11LoRaMacMlme16get_confirmationEv($679) | 0; //@line 10570
       $682 = HEAP32[$0 >> 2] | 0; //@line 10572
       $AsyncCtx47 = _emscripten_alloc_async_context(40, sp) | 0; //@line 10573
       $683 = __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($510, $1, 8, $367, $4, $680, $0 + 1096 | 0, $682) | 0; //@line 10574
       if (___async) {
        HEAP32[$AsyncCtx47 >> 2] = 322; //@line 10577
        HEAP32[$AsyncCtx47 + 4 >> 2] = $0; //@line 10579
        HEAP32[$AsyncCtx47 + 8 >> 2] = $59; //@line 10581
        HEAP32[$AsyncCtx47 + 12 >> 2] = $7; //@line 10583
        HEAP32[$AsyncCtx47 + 16 >> 2] = $6; //@line 10585
        HEAP32[$AsyncCtx47 + 20 >> 2] = $679; //@line 10587
        HEAP32[$AsyncCtx47 + 24 >> 2] = $510; //@line 10589
        HEAP8[$AsyncCtx47 + 28 >> 0] = $$1$off0 & 1; //@line 10592
        HEAP32[$AsyncCtx47 + 32 >> 2] = $10; //@line 10594
        HEAP8[$AsyncCtx47 + 36 >> 0] = $355; //@line 10596
        sp = STACKTOP; //@line 10597
        STACKTOP = sp; //@line 10598
        return;
       }
       _emscripten_free_async_context($AsyncCtx47 | 0); //@line 10600
       if ($683 | 0) {
        HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 4 >> 2] = 1; //@line 10605
        if ($$1$off0) {
         $$3$off0226 = 6; //@line 10607
         break;
        } else {
         label = 141; //@line 10610
         break;
        }
       }
       if (__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($510) | 0) {
        HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($679) | 0) >> 2] = 4; //@line 10617
        $698 = $0 + 944 | 0; //@line 10618
        HEAP8[$698 >> 0] = HEAP8[$698 >> 0] | 16; //@line 10621
        __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($510); //@line 10622
        if ($$1$off0) {
         $$3$off0226 = 6; //@line 10624
        } else {
         label = 141; //@line 10626
        }
       } else {
        label = 140; //@line 10629
       }
      }
     }
    } while (0);
    if ((label | 0) == 140) {
     if ($$1$off0) {
      $$3$off0226 = 6; //@line 10636
     } else {
      label = 141; //@line 10638
     }
    }
    do {
     if ((label | 0) == 141) {
      $704 = (__ZN11LoRaMacMcps16get_confirmationEv($10) | 0) + 10 | 0; //@line 10646
      if ($355 & 32) {
       HEAP8[$704 >> 0] = 1; //@line 10648
       HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 28 >> 0] = 1; //@line 10651
       $707 = HEAP32[$59 >> 2] | 0; //@line 10652
       $AsyncCtx95 = _emscripten_alloc_async_context(20, sp) | 0; //@line 10654
       __ZN18LoRaWANTimeHandler4stopER13timer_event_t($707, $0 + 1076 | 0); //@line 10655
       if (___async) {
        HEAP32[$AsyncCtx95 >> 2] = 323; //@line 10658
        HEAP32[$AsyncCtx95 + 4 >> 2] = $0; //@line 10660
        HEAP32[$AsyncCtx95 + 8 >> 2] = $59; //@line 10662
        HEAP32[$AsyncCtx95 + 12 >> 2] = $7; //@line 10664
        HEAP32[$AsyncCtx95 + 16 >> 2] = $6; //@line 10666
        sp = STACKTOP; //@line 10667
        STACKTOP = sp; //@line 10668
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx95 | 0); //@line 10670
        $$3$off0226 = 2; //@line 10671
        break;
       }
      }
      HEAP8[$704 >> 0] = 0; //@line 10675
      if ((HEAPU8[$0 + 895 >> 0] | 0) > (HEAPU8[$0 + 894 >> 0] | 0)) {
       $718 = HEAP32[$59 >> 2] | 0; //@line 10682
       $AsyncCtx91 = _emscripten_alloc_async_context(20, sp) | 0; //@line 10684
       __ZN18LoRaWANTimeHandler4stopER13timer_event_t($718, $0 + 1076 | 0); //@line 10685
       if (___async) {
        HEAP32[$AsyncCtx91 >> 2] = 324; //@line 10688
        HEAP32[$AsyncCtx91 + 4 >> 2] = $0; //@line 10690
        HEAP32[$AsyncCtx91 + 8 >> 2] = $59; //@line 10692
        HEAP32[$AsyncCtx91 + 12 >> 2] = $7; //@line 10694
        HEAP32[$AsyncCtx91 + 16 >> 2] = $6; //@line 10696
        sp = STACKTOP; //@line 10697
        STACKTOP = sp; //@line 10698
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx91 | 0); //@line 10700
        $$3$off0226 = 2; //@line 10701
        break;
       }
      } else {
       $$3$off0226 = 2; //@line 10705
      }
     }
    } while (0);
    $724 = $0 + 944 | 0; //@line 10709
    HEAP8[$724 >> 0] = $$3$off0226 | HEAP8[$724 >> 0] & -7; //@line 10713
    break;
   }
  case 7:
   {
    $755 = $0 + 638 | 0; //@line 10717
    $757 = $2 & 65535; //@line 10719
    _memcpy($755 | 0, $1 + 1 | 0, $757 | 0) | 0; //@line 10720
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) >> 2] = 3; //@line 10722
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 4 >> 2] = 0; //@line 10725
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 12 >> 2] = $755; //@line 10728
    HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 16 >> 1] = $757 + 65535; //@line 10733
    $767 = $0 + 944 | 0; //@line 10734
    HEAP8[$767 >> 0] = HEAP8[$767 >> 0] | 2; //@line 10737
    break;
   }
  default:
   {
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 4 >> 2] = 1; //@line 10743
    $772 = $0 + 968 | 0; //@line 10744
    HEAP32[$772 >> 2] = HEAP32[$772 >> 2] | 64; //@line 10747
    if (HEAP8[$0 + 373 >> 0] | 0) {
     $779 = HEAP32[$0 + 1328 >> 2] | 0; //@line 10753
     HEAP32[$5 >> 2] = 297; //@line 10754
     HEAP32[$5 + 4 >> 2] = 0; //@line 10756
     $AsyncCtx59 = _emscripten_alloc_async_context(24, sp) | 0; //@line 10757
     HEAP32[$$byval_copy173 >> 2] = HEAP32[$5 >> 2]; //@line 10758
     HEAP32[$$byval_copy173 + 4 >> 2] = HEAP32[$5 + 4 >> 2]; //@line 10758
     $780 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($779, $0, $$byval_copy173) | 0; //@line 10759
     if (___async) {
      HEAP32[$AsyncCtx59 >> 2] = 328; //@line 10762
      HEAP32[$AsyncCtx59 + 4 >> 2] = $5; //@line 10764
      HEAP32[$AsyncCtx59 + 8 >> 2] = $0; //@line 10766
      HEAP32[$AsyncCtx59 + 12 >> 2] = $59; //@line 10768
      HEAP32[$AsyncCtx59 + 16 >> 2] = $7; //@line 10770
      HEAP32[$AsyncCtx59 + 20 >> 2] = $6; //@line 10772
      sp = STACKTOP; //@line 10773
      STACKTOP = sp; //@line 10774
      return;
     }
     _emscripten_free_async_context($AsyncCtx59 | 0); //@line 10776
     do {
      if (!$780) {
       $AsyncCtx102 = _emscripten_alloc_async_context(24, sp) | 0; //@line 10780
       _mbed_assert_internal(12025, 12034, 201); //@line 10781
       if (___async) {
        HEAP32[$AsyncCtx102 >> 2] = 329; //@line 10784
        HEAP32[$AsyncCtx102 + 4 >> 2] = $5; //@line 10786
        HEAP32[$AsyncCtx102 + 8 >> 2] = $0; //@line 10788
        HEAP32[$AsyncCtx102 + 12 >> 2] = $59; //@line 10790
        HEAP32[$AsyncCtx102 + 16 >> 2] = $7; //@line 10792
        HEAP32[$AsyncCtx102 + 20 >> 2] = $6; //@line 10794
        sp = STACKTOP; //@line 10795
        STACKTOP = sp; //@line 10796
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx102 | 0); //@line 10798
        break;
       }
      }
     } while (0);
    }
    $792 = $0 + 944 | 0; //@line 10804
    HEAP8[$792 >> 0] = HEAP8[$792 >> 0] | 34; //@line 10807
    $795 = HEAP32[$59 >> 2] | 0; //@line 10808
    $AsyncCtx18 = _emscripten_alloc_async_context(20, sp) | 0; //@line 10810
    __ZN18LoRaWANTimeHandler5startER13timer_event_tj($795, $0 + 996 | 0, 1); //@line 10811
    if (___async) {
     HEAP32[$AsyncCtx18 >> 2] = 330; //@line 10814
     HEAP32[$AsyncCtx18 + 4 >> 2] = $0; //@line 10816
     HEAP32[$AsyncCtx18 + 8 >> 2] = $59; //@line 10818
     HEAP32[$AsyncCtx18 + 12 >> 2] = $7; //@line 10820
     HEAP32[$AsyncCtx18 + 16 >> 2] = $6; //@line 10822
     sp = STACKTOP; //@line 10823
     STACKTOP = sp; //@line 10824
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx18 | 0); //@line 10826
     break L7;
    }
   }
  }
 } while (0);
 $801 = $0 + 944 | 0; //@line 10832
 HEAP8[$801 >> 0] = HEAP8[$801 >> 0] | 32; //@line 10835
 $804 = HEAP32[$59 >> 2] | 0; //@line 10836
 $AsyncCtx15 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10838
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($804, $0 + 996 | 0, 1); //@line 10839
 if (___async) {
  HEAP32[$AsyncCtx15 >> 2] = 331; //@line 10842
  HEAP32[$AsyncCtx15 + 4 >> 2] = $7; //@line 10844
  HEAP32[$AsyncCtx15 + 8 >> 2] = $6; //@line 10846
  sp = STACKTOP; //@line 10847
  STACKTOP = sp; //@line 10848
  return;
 }
 _emscripten_free_async_context($AsyncCtx15 | 0); //@line 10850
 STACKTOP = sp; //@line 10851
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_300($0) {
 $0 = $0 | 0;
 var $$0170 = 0, $$0170231 = 0, $$0170232 = 0, $$1165 = 0, $$1167 = 0, $$1169 = 0, $$1171 = 0, $$byval_copy = 0, $$byval_copy48 = 0, $$byval_copy49 = 0, $$byval_copy50 = 0, $$sink229 = 0, $10 = 0, $100 = 0, $101 = 0, $103 = 0, $110 = 0, $111 = 0, $119 = 0, $12 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $134 = 0, $137 = 0, $139 = 0, $14 = 0, $140 = 0, $158 = 0, $16 = 0, $173 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $188 = 0, $191 = 0, $193 = 0, $194 = 0, $196 = 0, $198 = 0, $2 = 0, $20 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $22 = 0, $232 = 0, $233 = 0, $234 = 0, $236 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $268 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $301 = 0, $311 = 0, $316 = 0, $32 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $331 = 0, $334 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $343 = 0, $345 = 0, $346 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $43 = 0, $44 = 0, $49 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $64 = 0, $67 = 0, $69 = 0, $70 = 0, $72 = 0, $75 = 0, $77 = 0, $78 = 0, $8 = 0, $83 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx18 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx24 = 0, $ReallocAsyncCtx25 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $sext = 0, $trunc = 0, sp = 0;
 sp = STACKTOP; //@line 9717
 STACKTOP = STACKTOP + 32 | 0; //@line 9718
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 9718
 $$byval_copy50 = sp + 24 | 0; //@line 9719
 $$byval_copy49 = sp + 16 | 0; //@line 9720
 $$byval_copy48 = sp + 8 | 0; //@line 9721
 $$byval_copy = sp; //@line 9722
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9724
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9726
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9728
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9730
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 9732
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 9734
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 9736
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 9738
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 9740
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 9742
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 9744
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 9746
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 9748
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 9750
 $30 = HEAP8[$0 + 60 >> 0] | 0; //@line 9752
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 9754
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 9756
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 9758
 $38 = HEAP16[$0 + 76 >> 1] | 0; //@line 9760
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 9762
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 9764
 $43 = HEAP8[$2 >> 0] | 0; //@line 9765
 $trunc = ($43 & 255) >>> 5; //@line 9766
 switch ($trunc & 7) {
 case 1:
  {
   $44 = $6 + 372 | 0; //@line 9770
   if (!(HEAP8[$44 >> 0] | 0)) {
    $72 = $38 & 65535; //@line 9775
    $75 = $6 + 908 | 0; //@line 9778
    $77 = $6 + 638 | 0; //@line 9780
    $78 = $6 + 639 | 0; //@line 9781
    if (__Z18decrypt_join_framePKhtS0_Ph($2 + 1 | 0, $72 + 65535 & 65535, HEAP32[$75 >> 2] | 0, $78) | 0) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($16) | 0) + 4 >> 2] = 13; //@line 9787
     STACKTOP = sp; //@line 9788
     return;
    }
    HEAP8[$77 >> 0] = $43; //@line 9790
    $83 = $72 + -4 | 0; //@line 9791
    $85 = HEAP32[$75 >> 2] | 0; //@line 9793
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(64) | 0; //@line 9794
    $86 = __Z22compute_join_frame_micPKhtS0_Pj($77, $83 & 65535, $85, $4) | 0; //@line 9795
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 301; //@line 9798
     $87 = $ReallocAsyncCtx4 + 4 | 0; //@line 9799
     HEAP32[$87 >> 2] = $6; //@line 9800
     $88 = $ReallocAsyncCtx4 + 8 | 0; //@line 9801
     HEAP32[$88 >> 2] = $83; //@line 9802
     $89 = $ReallocAsyncCtx4 + 12 | 0; //@line 9803
     HEAP32[$89 >> 2] = $72; //@line 9804
     $90 = $ReallocAsyncCtx4 + 16 | 0; //@line 9805
     HEAP32[$90 >> 2] = $4; //@line 9806
     $91 = $ReallocAsyncCtx4 + 20 | 0; //@line 9807
     HEAP32[$91 >> 2] = $16; //@line 9808
     $92 = $ReallocAsyncCtx4 + 24 | 0; //@line 9809
     HEAP32[$92 >> 2] = $10; //@line 9810
     $93 = $ReallocAsyncCtx4 + 28 | 0; //@line 9811
     HEAP32[$93 >> 2] = $12; //@line 9812
     $94 = $ReallocAsyncCtx4 + 32 | 0; //@line 9813
     HEAP32[$94 >> 2] = $75; //@line 9814
     $95 = $ReallocAsyncCtx4 + 36 | 0; //@line 9815
     HEAP32[$95 >> 2] = $78; //@line 9816
     $96 = $ReallocAsyncCtx4 + 40 | 0; //@line 9817
     HEAP32[$96 >> 2] = $18; //@line 9818
     $97 = $ReallocAsyncCtx4 + 44 | 0; //@line 9819
     HEAP32[$97 >> 2] = $20; //@line 9820
     $98 = $ReallocAsyncCtx4 + 48 | 0; //@line 9821
     HEAP32[$98 >> 2] = $8; //@line 9822
     $99 = $ReallocAsyncCtx4 + 52 | 0; //@line 9823
     HEAP32[$99 >> 2] = $34; //@line 9824
     $100 = $ReallocAsyncCtx4 + 56 | 0; //@line 9825
     HEAP32[$100 >> 2] = $14; //@line 9826
     $101 = $ReallocAsyncCtx4 + 60 | 0; //@line 9827
     HEAP32[$101 >> 2] = $44; //@line 9828
     sp = STACKTOP; //@line 9829
     STACKTOP = sp; //@line 9830
     return;
    }
    HEAP32[___async_retval >> 2] = $86; //@line 9833
    ___async_unwind = 0; //@line 9834
    HEAP32[$ReallocAsyncCtx4 >> 2] = 301; //@line 9835
    $87 = $ReallocAsyncCtx4 + 4 | 0; //@line 9836
    HEAP32[$87 >> 2] = $6; //@line 9837
    $88 = $ReallocAsyncCtx4 + 8 | 0; //@line 9838
    HEAP32[$88 >> 2] = $83; //@line 9839
    $89 = $ReallocAsyncCtx4 + 12 | 0; //@line 9840
    HEAP32[$89 >> 2] = $72; //@line 9841
    $90 = $ReallocAsyncCtx4 + 16 | 0; //@line 9842
    HEAP32[$90 >> 2] = $4; //@line 9843
    $91 = $ReallocAsyncCtx4 + 20 | 0; //@line 9844
    HEAP32[$91 >> 2] = $16; //@line 9845
    $92 = $ReallocAsyncCtx4 + 24 | 0; //@line 9846
    HEAP32[$92 >> 2] = $10; //@line 9847
    $93 = $ReallocAsyncCtx4 + 28 | 0; //@line 9848
    HEAP32[$93 >> 2] = $12; //@line 9849
    $94 = $ReallocAsyncCtx4 + 32 | 0; //@line 9850
    HEAP32[$94 >> 2] = $75; //@line 9851
    $95 = $ReallocAsyncCtx4 + 36 | 0; //@line 9852
    HEAP32[$95 >> 2] = $78; //@line 9853
    $96 = $ReallocAsyncCtx4 + 40 | 0; //@line 9854
    HEAP32[$96 >> 2] = $18; //@line 9855
    $97 = $ReallocAsyncCtx4 + 44 | 0; //@line 9856
    HEAP32[$97 >> 2] = $20; //@line 9857
    $98 = $ReallocAsyncCtx4 + 48 | 0; //@line 9858
    HEAP32[$98 >> 2] = $8; //@line 9859
    $99 = $ReallocAsyncCtx4 + 52 | 0; //@line 9860
    HEAP32[$99 >> 2] = $34; //@line 9861
    $100 = $ReallocAsyncCtx4 + 56 | 0; //@line 9862
    HEAP32[$100 >> 2] = $14; //@line 9863
    $101 = $ReallocAsyncCtx4 + 60 | 0; //@line 9864
    HEAP32[$101 >> 2] = $44; //@line 9865
    sp = STACKTOP; //@line 9866
    STACKTOP = sp; //@line 9867
    return;
   }
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($16) | 0) + 4 >> 2] = 1; //@line 9871
   $49 = $6 + 968 | 0; //@line 9872
   HEAP32[$49 >> 2] = HEAP32[$49 >> 2] | 64; //@line 9875
   if (!(HEAP8[$6 + 373 >> 0] | 0)) {
    $64 = $6 + 944 | 0; //@line 9880
    HEAP8[$64 >> 0] = HEAP8[$64 >> 0] | 34; //@line 9883
    $67 = HEAP32[$8 >> 2] | 0; //@line 9884
    $ReallocAsyncCtx13 = _emscripten_realloc_async_context(12) | 0; //@line 9886
    __ZN18LoRaWANTimeHandler5startER13timer_event_tj($67, $6 + 996 | 0, 1); //@line 9887
    if (___async) {
     HEAP32[$ReallocAsyncCtx13 >> 2] = 300; //@line 9890
     $69 = $ReallocAsyncCtx13 + 4 | 0; //@line 9891
     HEAP32[$69 >> 2] = $10; //@line 9892
     $70 = $ReallocAsyncCtx13 + 8 | 0; //@line 9893
     HEAP32[$70 >> 2] = $12; //@line 9894
     sp = STACKTOP; //@line 9895
     STACKTOP = sp; //@line 9896
     return;
    }
    ___async_unwind = 0; //@line 9898
    HEAP32[$ReallocAsyncCtx13 >> 2] = 300; //@line 9899
    $69 = $ReallocAsyncCtx13 + 4 | 0; //@line 9900
    HEAP32[$69 >> 2] = $10; //@line 9901
    $70 = $ReallocAsyncCtx13 + 8 | 0; //@line 9902
    HEAP32[$70 >> 2] = $12; //@line 9903
    sp = STACKTOP; //@line 9904
    STACKTOP = sp; //@line 9905
    return;
   } else {
    $56 = HEAP32[$6 + 1328 >> 2] | 0; //@line 9908
    HEAP32[$36 >> 2] = 297; //@line 9909
    HEAP32[$36 + 4 >> 2] = 0; //@line 9911
    $ReallocAsyncCtx25 = _emscripten_realloc_async_context(24) | 0; //@line 9912
    HEAP32[$$byval_copy >> 2] = HEAP32[$36 >> 2]; //@line 9913
    HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$36 + 4 >> 2]; //@line 9913
    $57 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($56, $6, $$byval_copy) | 0; //@line 9914
    if (___async) {
     HEAP32[$ReallocAsyncCtx25 >> 2] = 298; //@line 9917
     $58 = $ReallocAsyncCtx25 + 4 | 0; //@line 9918
     HEAP32[$58 >> 2] = $36; //@line 9919
     $59 = $ReallocAsyncCtx25 + 8 | 0; //@line 9920
     HEAP32[$59 >> 2] = $6; //@line 9921
     $60 = $ReallocAsyncCtx25 + 12 | 0; //@line 9922
     HEAP32[$60 >> 2] = $8; //@line 9923
     $61 = $ReallocAsyncCtx25 + 16 | 0; //@line 9924
     HEAP32[$61 >> 2] = $10; //@line 9925
     $62 = $ReallocAsyncCtx25 + 20 | 0; //@line 9926
     HEAP32[$62 >> 2] = $12; //@line 9927
     sp = STACKTOP; //@line 9928
     STACKTOP = sp; //@line 9929
     return;
    }
    HEAP32[___async_retval >> 2] = $57; //@line 9932
    ___async_unwind = 0; //@line 9933
    HEAP32[$ReallocAsyncCtx25 >> 2] = 298; //@line 9934
    $58 = $ReallocAsyncCtx25 + 4 | 0; //@line 9935
    HEAP32[$58 >> 2] = $36; //@line 9936
    $59 = $ReallocAsyncCtx25 + 8 | 0; //@line 9937
    HEAP32[$59 >> 2] = $6; //@line 9938
    $60 = $ReallocAsyncCtx25 + 12 | 0; //@line 9939
    HEAP32[$60 >> 2] = $8; //@line 9940
    $61 = $ReallocAsyncCtx25 + 16 | 0; //@line 9941
    HEAP32[$61 >> 2] = $10; //@line 9942
    $62 = $ReallocAsyncCtx25 + 20 | 0; //@line 9943
    HEAP32[$62 >> 2] = $12; //@line 9944
    sp = STACKTOP; //@line 9945
    STACKTOP = sp; //@line 9946
    return;
   }
   break;
  }
 case 3:
 case 5:
  {
   $103 = HEAP32[$14 >> 2] | 0; //@line 9951
   $110 = __ZN7LoRaPHY15get_max_payloadEhb($103, HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($16) | 0) + 10 >> 0] | 0, (HEAP8[$6 + 369 >> 0] | 0) != 0) | 0; //@line 9958
   $111 = $38 & 65535; //@line 9959
   $sext = ($111 << 16) + -851968 | 0; //@line 9961
   if (((($sext | 0) < 0 ? 0 : $sext >> 16) | 0) > ($110 & 255 | 0)) {
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($16) | 0) + 4 >> 2] = 1; //@line 9970
    $119 = $6 + 968 | 0; //@line 9971
    HEAP32[$119 >> 2] = HEAP32[$119 >> 2] | 64; //@line 9974
    if (!(HEAP8[$6 + 373 >> 0] | 0)) {
     $134 = $6 + 944 | 0; //@line 9979
     HEAP8[$134 >> 0] = HEAP8[$134 >> 0] | 34; //@line 9982
     $137 = HEAP32[$8 >> 2] | 0; //@line 9983
     $ReallocAsyncCtx12 = _emscripten_realloc_async_context(12) | 0; //@line 9985
     __ZN18LoRaWANTimeHandler5startER13timer_event_tj($137, $6 + 996 | 0, 1); //@line 9986
     if (___async) {
      HEAP32[$ReallocAsyncCtx12 >> 2] = 305; //@line 9989
      $139 = $ReallocAsyncCtx12 + 4 | 0; //@line 9990
      HEAP32[$139 >> 2] = $10; //@line 9991
      $140 = $ReallocAsyncCtx12 + 8 | 0; //@line 9992
      HEAP32[$140 >> 2] = $12; //@line 9993
      sp = STACKTOP; //@line 9994
      STACKTOP = sp; //@line 9995
      return;
     }
     ___async_unwind = 0; //@line 9997
     HEAP32[$ReallocAsyncCtx12 >> 2] = 305; //@line 9998
     $139 = $ReallocAsyncCtx12 + 4 | 0; //@line 9999
     HEAP32[$139 >> 2] = $10; //@line 10000
     $140 = $ReallocAsyncCtx12 + 8 | 0; //@line 10001
     HEAP32[$140 >> 2] = $12; //@line 10002
     sp = STACKTOP; //@line 10003
     STACKTOP = sp; //@line 10004
     return;
    } else {
     $126 = HEAP32[$6 + 1328 >> 2] | 0; //@line 10007
     HEAP32[$40 >> 2] = 297; //@line 10008
     HEAP32[$40 + 4 >> 2] = 0; //@line 10010
     $ReallocAsyncCtx24 = _emscripten_realloc_async_context(24) | 0; //@line 10011
     HEAP32[$$byval_copy48 >> 2] = HEAP32[$40 >> 2]; //@line 10012
     HEAP32[$$byval_copy48 + 4 >> 2] = HEAP32[$40 + 4 >> 2]; //@line 10012
     $127 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($126, $6, $$byval_copy48) | 0; //@line 10013
     if (___async) {
      HEAP32[$ReallocAsyncCtx24 >> 2] = 303; //@line 10016
      $128 = $ReallocAsyncCtx24 + 4 | 0; //@line 10017
      HEAP32[$128 >> 2] = $40; //@line 10018
      $129 = $ReallocAsyncCtx24 + 8 | 0; //@line 10019
      HEAP32[$129 >> 2] = $6; //@line 10020
      $130 = $ReallocAsyncCtx24 + 12 | 0; //@line 10021
      HEAP32[$130 >> 2] = $8; //@line 10022
      $131 = $ReallocAsyncCtx24 + 16 | 0; //@line 10023
      HEAP32[$131 >> 2] = $10; //@line 10024
      $132 = $ReallocAsyncCtx24 + 20 | 0; //@line 10025
      HEAP32[$132 >> 2] = $12; //@line 10026
      sp = STACKTOP; //@line 10027
      STACKTOP = sp; //@line 10028
      return;
     }
     HEAP32[___async_retval >> 2] = $127; //@line 10031
     ___async_unwind = 0; //@line 10032
     HEAP32[$ReallocAsyncCtx24 >> 2] = 303; //@line 10033
     $128 = $ReallocAsyncCtx24 + 4 | 0; //@line 10034
     HEAP32[$128 >> 2] = $40; //@line 10035
     $129 = $ReallocAsyncCtx24 + 8 | 0; //@line 10036
     HEAP32[$129 >> 2] = $6; //@line 10037
     $130 = $ReallocAsyncCtx24 + 12 | 0; //@line 10038
     HEAP32[$130 >> 2] = $8; //@line 10039
     $131 = $ReallocAsyncCtx24 + 16 | 0; //@line 10040
     HEAP32[$131 >> 2] = $10; //@line 10041
     $132 = $ReallocAsyncCtx24 + 20 | 0; //@line 10042
     HEAP32[$132 >> 2] = $12; //@line 10043
     sp = STACKTOP; //@line 10044
     STACKTOP = sp; //@line 10045
     return;
    }
   }
   $158 = HEAPU8[$2 + 2 >> 0] << 8 | HEAPU8[$2 + 1 >> 0] | HEAPU8[$2 + 3 >> 0] << 16 | HEAPU8[$2 + 4 >> 0] << 24; //@line 10065
   L53 : do {
    if (($158 | 0) == (HEAP32[$6 + 952 >> 2] | 0)) {
     $$1165 = 0; //@line 10072
     $$1167 = $20; //@line 10072
     $$1169 = $18; //@line 10072
     $$1171 = 0; //@line 10072
     $$sink229 = $6 + 960 | 0; //@line 10072
    } else {
     $$0170231 = HEAP32[$6 + 1208 >> 2] | 0; //@line 10075
     L56 : do {
      if ($$0170231 | 0) {
       $$0170232 = $$0170231; //@line 10079
       while (1) {
        if (($158 | 0) == (HEAP32[$$0170232 >> 2] | 0)) {
         break;
        }
        $$0170 = HEAP32[$$0170232 + 40 >> 2] | 0; //@line 10087
        if (!$$0170) {
         break L56;
        } else {
         $$0170232 = $$0170; //@line 10092
        }
       }
       $$1165 = 1; //@line 10098
       $$1167 = $$0170232 + 20 | 0; //@line 10098
       $$1169 = $$0170232 + 4 | 0; //@line 10098
       $$1171 = $$0170232; //@line 10098
       $$sink229 = $$0170232 + 36 | 0; //@line 10098
       break L53;
      }
     } while (0);
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($16) | 0) + 4 >> 2] = 11; //@line 10104
     $173 = $6 + 968 | 0; //@line 10105
     HEAP32[$173 >> 2] = HEAP32[$173 >> 2] | 64; //@line 10108
     if (!(HEAP8[$6 + 373 >> 0] | 0)) {
      $188 = $6 + 944 | 0; //@line 10113
      HEAP8[$188 >> 0] = HEAP8[$188 >> 0] | 34; //@line 10116
      $191 = HEAP32[$8 >> 2] | 0; //@line 10117
      $ReallocAsyncCtx11 = _emscripten_realloc_async_context(12) | 0; //@line 10119
      __ZN18LoRaWANTimeHandler5startER13timer_event_tj($191, $6 + 996 | 0, 1); //@line 10120
      if (___async) {
       HEAP32[$ReallocAsyncCtx11 >> 2] = 308; //@line 10123
       $193 = $ReallocAsyncCtx11 + 4 | 0; //@line 10124
       HEAP32[$193 >> 2] = $10; //@line 10125
       $194 = $ReallocAsyncCtx11 + 8 | 0; //@line 10126
       HEAP32[$194 >> 2] = $12; //@line 10127
       sp = STACKTOP; //@line 10128
       STACKTOP = sp; //@line 10129
       return;
      }
      ___async_unwind = 0; //@line 10131
      HEAP32[$ReallocAsyncCtx11 >> 2] = 308; //@line 10132
      $193 = $ReallocAsyncCtx11 + 4 | 0; //@line 10133
      HEAP32[$193 >> 2] = $10; //@line 10134
      $194 = $ReallocAsyncCtx11 + 8 | 0; //@line 10135
      HEAP32[$194 >> 2] = $12; //@line 10136
      sp = STACKTOP; //@line 10137
      STACKTOP = sp; //@line 10138
      return;
     } else {
      $180 = HEAP32[$6 + 1328 >> 2] | 0; //@line 10141
      HEAP32[$42 >> 2] = 297; //@line 10142
      HEAP32[$42 + 4 >> 2] = 0; //@line 10144
      $ReallocAsyncCtx23 = _emscripten_realloc_async_context(24) | 0; //@line 10145
      HEAP32[$$byval_copy49 >> 2] = HEAP32[$42 >> 2]; //@line 10146
      HEAP32[$$byval_copy49 + 4 >> 2] = HEAP32[$42 + 4 >> 2]; //@line 10146
      $181 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($180, $6, $$byval_copy49) | 0; //@line 10147
      if (___async) {
       HEAP32[$ReallocAsyncCtx23 >> 2] = 306; //@line 10150
       $182 = $ReallocAsyncCtx23 + 4 | 0; //@line 10151
       HEAP32[$182 >> 2] = $42; //@line 10152
       $183 = $ReallocAsyncCtx23 + 8 | 0; //@line 10153
       HEAP32[$183 >> 2] = $6; //@line 10154
       $184 = $ReallocAsyncCtx23 + 12 | 0; //@line 10155
       HEAP32[$184 >> 2] = $8; //@line 10156
       $185 = $ReallocAsyncCtx23 + 16 | 0; //@line 10157
       HEAP32[$185 >> 2] = $10; //@line 10158
       $186 = $ReallocAsyncCtx23 + 20 | 0; //@line 10159
       HEAP32[$186 >> 2] = $12; //@line 10160
       sp = STACKTOP; //@line 10161
       STACKTOP = sp; //@line 10162
       return;
      }
      HEAP32[___async_retval >> 2] = $181; //@line 10165
      ___async_unwind = 0; //@line 10166
      HEAP32[$ReallocAsyncCtx23 >> 2] = 306; //@line 10167
      $182 = $ReallocAsyncCtx23 + 4 | 0; //@line 10168
      HEAP32[$182 >> 2] = $42; //@line 10169
      $183 = $ReallocAsyncCtx23 + 8 | 0; //@line 10170
      HEAP32[$183 >> 2] = $6; //@line 10171
      $184 = $ReallocAsyncCtx23 + 12 | 0; //@line 10172
      HEAP32[$184 >> 2] = $8; //@line 10173
      $185 = $ReallocAsyncCtx23 + 16 | 0; //@line 10174
      HEAP32[$185 >> 2] = $10; //@line 10175
      $186 = $ReallocAsyncCtx23 + 20 | 0; //@line 10176
      HEAP32[$186 >> 2] = $12; //@line 10177
      sp = STACKTOP; //@line 10178
      STACKTOP = sp; //@line 10179
      return;
     }
    }
   } while (0);
   $196 = HEAP32[$$sink229 >> 2] | 0; //@line 10183
   $198 = HEAP8[$2 + 5 >> 0] | 0; //@line 10185
   $207 = $198 & 15; //@line 10194
   $208 = $207 & 255; //@line 10195
   $209 = $208 + 8 | 0; //@line 10196
   $210 = $209 & 255; //@line 10197
   $211 = $111 + -4 | 0; //@line 10198
   $232 = HEAPU8[$2 + ($111 + -3) >> 0] << 8 | HEAPU8[$2 + $211 >> 0] | HEAPU8[$2 + ($111 + -2) >> 0] << 16 | HEAPU8[$2 + ($111 + -1) >> 0] << 24; //@line 10219
   $233 = (HEAPU8[$2 + 7 >> 0] << 8 | HEAPU8[$2 + 6 >> 0]) - $196 | 0; //@line 10220
   $234 = $233 & 65535; //@line 10221
   if ($234 >>> 0 < 32768) {
    $236 = $234 + $196 | 0; //@line 10224
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(108) | 0; //@line 10226
    __Z11compute_micPKhtS0_jhjPj($2, $211 & 65535, $$1169, $158, 1, $236, $4) | 0; //@line 10227
    if (___async) {
     HEAP32[$ReallocAsyncCtx3 >> 2] = 309; //@line 10230
     $238 = $ReallocAsyncCtx3 + 4 | 0; //@line 10231
     HEAP32[$238 >> 2] = $236; //@line 10232
     $239 = $ReallocAsyncCtx3 + 8 | 0; //@line 10233
     HEAP32[$239 >> 2] = $14; //@line 10234
     $240 = $ReallocAsyncCtx3 + 12 | 0; //@line 10235
     HEAP32[$240 >> 2] = $234; //@line 10236
     $241 = $ReallocAsyncCtx3 + 16 | 0; //@line 10237
     HEAP32[$241 >> 2] = $16; //@line 10238
     $242 = $ReallocAsyncCtx3 + 20 | 0; //@line 10239
     HEAP32[$242 >> 2] = $6; //@line 10240
     $243 = $ReallocAsyncCtx3 + 24 | 0; //@line 10241
     HEAP32[$243 >> 2] = $8; //@line 10242
     $244 = $ReallocAsyncCtx3 + 28 | 0; //@line 10243
     HEAP32[$244 >> 2] = $10; //@line 10244
     $245 = $ReallocAsyncCtx3 + 32 | 0; //@line 10245
     HEAP32[$245 >> 2] = $12; //@line 10246
     $246 = $ReallocAsyncCtx3 + 36 | 0; //@line 10247
     HEAP32[$246 >> 2] = $24; //@line 10248
     $247 = $ReallocAsyncCtx3 + 40 | 0; //@line 10249
     HEAP8[$247 >> 0] = $$1165; //@line 10250
     $248 = $ReallocAsyncCtx3 + 41 | 0; //@line 10251
     HEAP8[$248 >> 0] = $198; //@line 10252
     $249 = $ReallocAsyncCtx3 + 44 | 0; //@line 10253
     HEAP32[$249 >> 2] = $$1171; //@line 10254
     $250 = $ReallocAsyncCtx3 + 48 | 0; //@line 10255
     HEAP32[$250 >> 2] = $4; //@line 10256
     $251 = $ReallocAsyncCtx3 + 52 | 0; //@line 10257
     HEAP32[$251 >> 2] = $232; //@line 10258
     $252 = $ReallocAsyncCtx3 + 56 | 0; //@line 10259
     HEAP32[$252 >> 2] = $26; //@line 10260
     $253 = $ReallocAsyncCtx3 + 60 | 0; //@line 10261
     HEAP8[$253 >> 0] = $trunc; //@line 10262
     $254 = $ReallocAsyncCtx3 + 64 | 0; //@line 10263
     HEAP32[$254 >> 2] = $28; //@line 10264
     $255 = $ReallocAsyncCtx3 + 68 | 0; //@line 10265
     HEAP32[$255 >> 2] = $208; //@line 10266
     $256 = $ReallocAsyncCtx3 + 72 | 0; //@line 10267
     HEAP32[$256 >> 2] = $2; //@line 10268
     $257 = $ReallocAsyncCtx3 + 76 | 0; //@line 10269
     HEAP32[$257 >> 2] = $209; //@line 10270
     $258 = $ReallocAsyncCtx3 + 80 | 0; //@line 10271
     HEAP32[$258 >> 2] = $211; //@line 10272
     $259 = $ReallocAsyncCtx3 + 84 | 0; //@line 10273
     HEAP8[$259 >> 0] = $207; //@line 10274
     $260 = $ReallocAsyncCtx3 + 85 | 0; //@line 10275
     HEAP8[$260 >> 0] = $30; //@line 10276
     $261 = $ReallocAsyncCtx3 + 88 | 0; //@line 10277
     HEAP32[$261 >> 2] = $$1169; //@line 10278
     $262 = $ReallocAsyncCtx3 + 92 | 0; //@line 10279
     HEAP32[$262 >> 2] = $158; //@line 10280
     $263 = $ReallocAsyncCtx3 + 96 | 0; //@line 10281
     HEAP8[$263 >> 0] = $210; //@line 10282
     $264 = $ReallocAsyncCtx3 + 100 | 0; //@line 10283
     HEAP32[$264 >> 2] = $$1167; //@line 10284
     $265 = $ReallocAsyncCtx3 + 104 | 0; //@line 10285
     HEAP32[$265 >> 2] = $32; //@line 10286
     sp = STACKTOP; //@line 10287
     STACKTOP = sp; //@line 10288
     return;
    }
    ___async_unwind = 0; //@line 10290
    HEAP32[$ReallocAsyncCtx3 >> 2] = 309; //@line 10291
    $238 = $ReallocAsyncCtx3 + 4 | 0; //@line 10292
    HEAP32[$238 >> 2] = $236; //@line 10293
    $239 = $ReallocAsyncCtx3 + 8 | 0; //@line 10294
    HEAP32[$239 >> 2] = $14; //@line 10295
    $240 = $ReallocAsyncCtx3 + 12 | 0; //@line 10296
    HEAP32[$240 >> 2] = $234; //@line 10297
    $241 = $ReallocAsyncCtx3 + 16 | 0; //@line 10298
    HEAP32[$241 >> 2] = $16; //@line 10299
    $242 = $ReallocAsyncCtx3 + 20 | 0; //@line 10300
    HEAP32[$242 >> 2] = $6; //@line 10301
    $243 = $ReallocAsyncCtx3 + 24 | 0; //@line 10302
    HEAP32[$243 >> 2] = $8; //@line 10303
    $244 = $ReallocAsyncCtx3 + 28 | 0; //@line 10304
    HEAP32[$244 >> 2] = $10; //@line 10305
    $245 = $ReallocAsyncCtx3 + 32 | 0; //@line 10306
    HEAP32[$245 >> 2] = $12; //@line 10307
    $246 = $ReallocAsyncCtx3 + 36 | 0; //@line 10308
    HEAP32[$246 >> 2] = $24; //@line 10309
    $247 = $ReallocAsyncCtx3 + 40 | 0; //@line 10310
    HEAP8[$247 >> 0] = $$1165; //@line 10311
    $248 = $ReallocAsyncCtx3 + 41 | 0; //@line 10312
    HEAP8[$248 >> 0] = $198; //@line 10313
    $249 = $ReallocAsyncCtx3 + 44 | 0; //@line 10314
    HEAP32[$249 >> 2] = $$1171; //@line 10315
    $250 = $ReallocAsyncCtx3 + 48 | 0; //@line 10316
    HEAP32[$250 >> 2] = $4; //@line 10317
    $251 = $ReallocAsyncCtx3 + 52 | 0; //@line 10318
    HEAP32[$251 >> 2] = $232; //@line 10319
    $252 = $ReallocAsyncCtx3 + 56 | 0; //@line 10320
    HEAP32[$252 >> 2] = $26; //@line 10321
    $253 = $ReallocAsyncCtx3 + 60 | 0; //@line 10322
    HEAP8[$253 >> 0] = $trunc; //@line 10323
    $254 = $ReallocAsyncCtx3 + 64 | 0; //@line 10324
    HEAP32[$254 >> 2] = $28; //@line 10325
    $255 = $ReallocAsyncCtx3 + 68 | 0; //@line 10326
    HEAP32[$255 >> 2] = $208; //@line 10327
    $256 = $ReallocAsyncCtx3 + 72 | 0; //@line 10328
    HEAP32[$256 >> 2] = $2; //@line 10329
    $257 = $ReallocAsyncCtx3 + 76 | 0; //@line 10330
    HEAP32[$257 >> 2] = $209; //@line 10331
    $258 = $ReallocAsyncCtx3 + 80 | 0; //@line 10332
    HEAP32[$258 >> 2] = $211; //@line 10333
    $259 = $ReallocAsyncCtx3 + 84 | 0; //@line 10334
    HEAP8[$259 >> 0] = $207; //@line 10335
    $260 = $ReallocAsyncCtx3 + 85 | 0; //@line 10336
    HEAP8[$260 >> 0] = $30; //@line 10337
    $261 = $ReallocAsyncCtx3 + 88 | 0; //@line 10338
    HEAP32[$261 >> 2] = $$1169; //@line 10339
    $262 = $ReallocAsyncCtx3 + 92 | 0; //@line 10340
    HEAP32[$262 >> 2] = $158; //@line 10341
    $263 = $ReallocAsyncCtx3 + 96 | 0; //@line 10342
    HEAP8[$263 >> 0] = $210; //@line 10343
    $264 = $ReallocAsyncCtx3 + 100 | 0; //@line 10344
    HEAP32[$264 >> 2] = $$1167; //@line 10345
    $265 = $ReallocAsyncCtx3 + 104 | 0; //@line 10346
    HEAP32[$265 >> 2] = $32; //@line 10347
    sp = STACKTOP; //@line 10348
    STACKTOP = sp; //@line 10349
    return;
   } else {
    $268 = $196 + 65536 + ($233 << 16 >> 16) | 0; //@line 10354
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(112) | 0; //@line 10356
    __Z11compute_micPKhtS0_jhjPj($2, $211 & 65535, $$1169, $158, 1, $268, $4) | 0; //@line 10357
    if (___async) {
     HEAP32[$ReallocAsyncCtx2 >> 2] = 310; //@line 10360
     $270 = $ReallocAsyncCtx2 + 4 | 0; //@line 10361
     HEAP32[$270 >> 2] = $14; //@line 10362
     $271 = $ReallocAsyncCtx2 + 8 | 0; //@line 10363
     HEAP32[$271 >> 2] = $234; //@line 10364
     $272 = $ReallocAsyncCtx2 + 12 | 0; //@line 10365
     HEAP32[$272 >> 2] = $16; //@line 10366
     $273 = $ReallocAsyncCtx2 + 16 | 0; //@line 10367
     HEAP32[$273 >> 2] = $6; //@line 10368
     $274 = $ReallocAsyncCtx2 + 20 | 0; //@line 10369
     HEAP32[$274 >> 2] = $8; //@line 10370
     $275 = $ReallocAsyncCtx2 + 24 | 0; //@line 10371
     HEAP32[$275 >> 2] = $10; //@line 10372
     $276 = $ReallocAsyncCtx2 + 28 | 0; //@line 10373
     HEAP32[$276 >> 2] = $12; //@line 10374
     $277 = $ReallocAsyncCtx2 + 32 | 0; //@line 10375
     HEAP32[$277 >> 2] = $24; //@line 10376
     $278 = $ReallocAsyncCtx2 + 36 | 0; //@line 10377
     HEAP8[$278 >> 0] = $$1165; //@line 10378
     $279 = $ReallocAsyncCtx2 + 37 | 0; //@line 10379
     HEAP8[$279 >> 0] = $198; //@line 10380
     $280 = $ReallocAsyncCtx2 + 40 | 0; //@line 10381
     HEAP32[$280 >> 2] = $$1171; //@line 10382
     $281 = $ReallocAsyncCtx2 + 44 | 0; //@line 10383
     HEAP32[$281 >> 2] = $26; //@line 10384
     $282 = $ReallocAsyncCtx2 + 48 | 0; //@line 10385
     HEAP8[$282 >> 0] = $trunc; //@line 10386
     $283 = $ReallocAsyncCtx2 + 52 | 0; //@line 10387
     HEAP32[$283 >> 2] = $28; //@line 10388
     $284 = $ReallocAsyncCtx2 + 56 | 0; //@line 10389
     HEAP32[$284 >> 2] = $4; //@line 10390
     $285 = $ReallocAsyncCtx2 + 60 | 0; //@line 10391
     HEAP32[$285 >> 2] = $232; //@line 10392
     $286 = $ReallocAsyncCtx2 + 64 | 0; //@line 10393
     HEAP32[$286 >> 2] = $268; //@line 10394
     $287 = $ReallocAsyncCtx2 + 68 | 0; //@line 10395
     HEAP32[$287 >> 2] = $196; //@line 10396
     $288 = $ReallocAsyncCtx2 + 72 | 0; //@line 10397
     HEAP32[$288 >> 2] = $208; //@line 10398
     $289 = $ReallocAsyncCtx2 + 76 | 0; //@line 10399
     HEAP32[$289 >> 2] = $2; //@line 10400
     $290 = $ReallocAsyncCtx2 + 80 | 0; //@line 10401
     HEAP32[$290 >> 2] = $209; //@line 10402
     $291 = $ReallocAsyncCtx2 + 84 | 0; //@line 10403
     HEAP32[$291 >> 2] = $211; //@line 10404
     $292 = $ReallocAsyncCtx2 + 88 | 0; //@line 10405
     HEAP8[$292 >> 0] = $207; //@line 10406
     $293 = $ReallocAsyncCtx2 + 89 | 0; //@line 10407
     HEAP8[$293 >> 0] = $30; //@line 10408
     $294 = $ReallocAsyncCtx2 + 92 | 0; //@line 10409
     HEAP32[$294 >> 2] = $$1169; //@line 10410
     $295 = $ReallocAsyncCtx2 + 96 | 0; //@line 10411
     HEAP32[$295 >> 2] = $158; //@line 10412
     $296 = $ReallocAsyncCtx2 + 100 | 0; //@line 10413
     HEAP8[$296 >> 0] = $210; //@line 10414
     $297 = $ReallocAsyncCtx2 + 104 | 0; //@line 10415
     HEAP32[$297 >> 2] = $$1167; //@line 10416
     $298 = $ReallocAsyncCtx2 + 108 | 0; //@line 10417
     HEAP32[$298 >> 2] = $32; //@line 10418
     sp = STACKTOP; //@line 10419
     STACKTOP = sp; //@line 10420
     return;
    }
    ___async_unwind = 0; //@line 10422
    HEAP32[$ReallocAsyncCtx2 >> 2] = 310; //@line 10423
    $270 = $ReallocAsyncCtx2 + 4 | 0; //@line 10424
    HEAP32[$270 >> 2] = $14; //@line 10425
    $271 = $ReallocAsyncCtx2 + 8 | 0; //@line 10426
    HEAP32[$271 >> 2] = $234; //@line 10427
    $272 = $ReallocAsyncCtx2 + 12 | 0; //@line 10428
    HEAP32[$272 >> 2] = $16; //@line 10429
    $273 = $ReallocAsyncCtx2 + 16 | 0; //@line 10430
    HEAP32[$273 >> 2] = $6; //@line 10431
    $274 = $ReallocAsyncCtx2 + 20 | 0; //@line 10432
    HEAP32[$274 >> 2] = $8; //@line 10433
    $275 = $ReallocAsyncCtx2 + 24 | 0; //@line 10434
    HEAP32[$275 >> 2] = $10; //@line 10435
    $276 = $ReallocAsyncCtx2 + 28 | 0; //@line 10436
    HEAP32[$276 >> 2] = $12; //@line 10437
    $277 = $ReallocAsyncCtx2 + 32 | 0; //@line 10438
    HEAP32[$277 >> 2] = $24; //@line 10439
    $278 = $ReallocAsyncCtx2 + 36 | 0; //@line 10440
    HEAP8[$278 >> 0] = $$1165; //@line 10441
    $279 = $ReallocAsyncCtx2 + 37 | 0; //@line 10442
    HEAP8[$279 >> 0] = $198; //@line 10443
    $280 = $ReallocAsyncCtx2 + 40 | 0; //@line 10444
    HEAP32[$280 >> 2] = $$1171; //@line 10445
    $281 = $ReallocAsyncCtx2 + 44 | 0; //@line 10446
    HEAP32[$281 >> 2] = $26; //@line 10447
    $282 = $ReallocAsyncCtx2 + 48 | 0; //@line 10448
    HEAP8[$282 >> 0] = $trunc; //@line 10449
    $283 = $ReallocAsyncCtx2 + 52 | 0; //@line 10450
    HEAP32[$283 >> 2] = $28; //@line 10451
    $284 = $ReallocAsyncCtx2 + 56 | 0; //@line 10452
    HEAP32[$284 >> 2] = $4; //@line 10453
    $285 = $ReallocAsyncCtx2 + 60 | 0; //@line 10454
    HEAP32[$285 >> 2] = $232; //@line 10455
    $286 = $ReallocAsyncCtx2 + 64 | 0; //@line 10456
    HEAP32[$286 >> 2] = $268; //@line 10457
    $287 = $ReallocAsyncCtx2 + 68 | 0; //@line 10458
    HEAP32[$287 >> 2] = $196; //@line 10459
    $288 = $ReallocAsyncCtx2 + 72 | 0; //@line 10460
    HEAP32[$288 >> 2] = $208; //@line 10461
    $289 = $ReallocAsyncCtx2 + 76 | 0; //@line 10462
    HEAP32[$289 >> 2] = $2; //@line 10463
    $290 = $ReallocAsyncCtx2 + 80 | 0; //@line 10464
    HEAP32[$290 >> 2] = $209; //@line 10465
    $291 = $ReallocAsyncCtx2 + 84 | 0; //@line 10466
    HEAP32[$291 >> 2] = $211; //@line 10467
    $292 = $ReallocAsyncCtx2 + 88 | 0; //@line 10468
    HEAP8[$292 >> 0] = $207; //@line 10469
    $293 = $ReallocAsyncCtx2 + 89 | 0; //@line 10470
    HEAP8[$293 >> 0] = $30; //@line 10471
    $294 = $ReallocAsyncCtx2 + 92 | 0; //@line 10472
    HEAP32[$294 >> 2] = $$1169; //@line 10473
    $295 = $ReallocAsyncCtx2 + 96 | 0; //@line 10474
    HEAP32[$295 >> 2] = $158; //@line 10475
    $296 = $ReallocAsyncCtx2 + 100 | 0; //@line 10476
    HEAP8[$296 >> 0] = $210; //@line 10477
    $297 = $ReallocAsyncCtx2 + 104 | 0; //@line 10478
    HEAP32[$297 >> 2] = $$1167; //@line 10479
    $298 = $ReallocAsyncCtx2 + 108 | 0; //@line 10480
    HEAP32[$298 >> 2] = $32; //@line 10481
    sp = STACKTOP; //@line 10482
    STACKTOP = sp; //@line 10483
    return;
   }
   break;
  }
 case 7:
  {
   $299 = $6 + 638 | 0; //@line 10488
   $301 = $38 & 65535; //@line 10490
   _memcpy($299 | 0, $2 + 1 | 0, $301 | 0) | 0; //@line 10491
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($16) | 0) >> 2] = 3; //@line 10493
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($16) | 0) + 4 >> 2] = 0; //@line 10496
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($16) | 0) + 12 >> 2] = $299; //@line 10499
   HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($16) | 0) + 16 >> 1] = $301 + 65535; //@line 10504
   $311 = $6 + 944 | 0; //@line 10505
   HEAP8[$311 >> 0] = HEAP8[$311 >> 0] | 2; //@line 10508
   $340 = $6 + 944 | 0; //@line 10509
   HEAP8[$340 >> 0] = HEAP8[$340 >> 0] | 32; //@line 10512
   $343 = HEAP32[$8 >> 2] | 0; //@line 10513
   $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 10515
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($343, $6 + 996 | 0, 1); //@line 10516
   if (___async) {
    HEAP32[$ReallocAsyncCtx5 >> 2] = 331; //@line 10519
    $345 = $ReallocAsyncCtx5 + 4 | 0; //@line 10520
    HEAP32[$345 >> 2] = $10; //@line 10521
    $346 = $ReallocAsyncCtx5 + 8 | 0; //@line 10522
    HEAP32[$346 >> 2] = $12; //@line 10523
    sp = STACKTOP; //@line 10524
    STACKTOP = sp; //@line 10525
    return;
   }
   ___async_unwind = 0; //@line 10527
   HEAP32[$ReallocAsyncCtx5 >> 2] = 331; //@line 10528
   $345 = $ReallocAsyncCtx5 + 4 | 0; //@line 10529
   HEAP32[$345 >> 2] = $10; //@line 10530
   $346 = $ReallocAsyncCtx5 + 8 | 0; //@line 10531
   HEAP32[$346 >> 2] = $12; //@line 10532
   sp = STACKTOP; //@line 10533
   STACKTOP = sp; //@line 10534
   return;
  }
 default:
  {
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($16) | 0) + 4 >> 2] = 1; //@line 10540
   $316 = $6 + 968 | 0; //@line 10541
   HEAP32[$316 >> 2] = HEAP32[$316 >> 2] | 64; //@line 10544
   if (!(HEAP8[$6 + 373 >> 0] | 0)) {
    $331 = $6 + 944 | 0; //@line 10549
    HEAP8[$331 >> 0] = HEAP8[$331 >> 0] | 34; //@line 10552
    $334 = HEAP32[$8 >> 2] | 0; //@line 10553
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 10555
    __ZN18LoRaWANTimeHandler5startER13timer_event_tj($334, $6 + 996 | 0, 1); //@line 10556
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 330; //@line 10559
     $336 = $ReallocAsyncCtx6 + 4 | 0; //@line 10560
     HEAP32[$336 >> 2] = $6; //@line 10561
     $337 = $ReallocAsyncCtx6 + 8 | 0; //@line 10562
     HEAP32[$337 >> 2] = $8; //@line 10563
     $338 = $ReallocAsyncCtx6 + 12 | 0; //@line 10564
     HEAP32[$338 >> 2] = $10; //@line 10565
     $339 = $ReallocAsyncCtx6 + 16 | 0; //@line 10566
     HEAP32[$339 >> 2] = $12; //@line 10567
     sp = STACKTOP; //@line 10568
     STACKTOP = sp; //@line 10569
     return;
    }
    ___async_unwind = 0; //@line 10571
    HEAP32[$ReallocAsyncCtx6 >> 2] = 330; //@line 10572
    $336 = $ReallocAsyncCtx6 + 4 | 0; //@line 10573
    HEAP32[$336 >> 2] = $6; //@line 10574
    $337 = $ReallocAsyncCtx6 + 8 | 0; //@line 10575
    HEAP32[$337 >> 2] = $8; //@line 10576
    $338 = $ReallocAsyncCtx6 + 12 | 0; //@line 10577
    HEAP32[$338 >> 2] = $10; //@line 10578
    $339 = $ReallocAsyncCtx6 + 16 | 0; //@line 10579
    HEAP32[$339 >> 2] = $12; //@line 10580
    sp = STACKTOP; //@line 10581
    STACKTOP = sp; //@line 10582
    return;
   } else {
    $323 = HEAP32[$6 + 1328 >> 2] | 0; //@line 10585
    HEAP32[$22 >> 2] = 297; //@line 10586
    HEAP32[$22 + 4 >> 2] = 0; //@line 10588
    $ReallocAsyncCtx18 = _emscripten_realloc_async_context(24) | 0; //@line 10589
    HEAP32[$$byval_copy50 >> 2] = HEAP32[$22 >> 2]; //@line 10590
    HEAP32[$$byval_copy50 + 4 >> 2] = HEAP32[$22 + 4 >> 2]; //@line 10590
    $324 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($323, $6, $$byval_copy50) | 0; //@line 10591
    if (___async) {
     HEAP32[$ReallocAsyncCtx18 >> 2] = 328; //@line 10594
     $325 = $ReallocAsyncCtx18 + 4 | 0; //@line 10595
     HEAP32[$325 >> 2] = $22; //@line 10596
     $326 = $ReallocAsyncCtx18 + 8 | 0; //@line 10597
     HEAP32[$326 >> 2] = $6; //@line 10598
     $327 = $ReallocAsyncCtx18 + 12 | 0; //@line 10599
     HEAP32[$327 >> 2] = $8; //@line 10600
     $328 = $ReallocAsyncCtx18 + 16 | 0; //@line 10601
     HEAP32[$328 >> 2] = $10; //@line 10602
     $329 = $ReallocAsyncCtx18 + 20 | 0; //@line 10603
     HEAP32[$329 >> 2] = $12; //@line 10604
     sp = STACKTOP; //@line 10605
     STACKTOP = sp; //@line 10606
     return;
    }
    HEAP32[___async_retval >> 2] = $324; //@line 10609
    ___async_unwind = 0; //@line 10610
    HEAP32[$ReallocAsyncCtx18 >> 2] = 328; //@line 10611
    $325 = $ReallocAsyncCtx18 + 4 | 0; //@line 10612
    HEAP32[$325 >> 2] = $22; //@line 10613
    $326 = $ReallocAsyncCtx18 + 8 | 0; //@line 10614
    HEAP32[$326 >> 2] = $6; //@line 10615
    $327 = $ReallocAsyncCtx18 + 12 | 0; //@line 10616
    HEAP32[$327 >> 2] = $8; //@line 10617
    $328 = $ReallocAsyncCtx18 + 16 | 0; //@line 10618
    HEAP32[$328 >> 2] = $10; //@line 10619
    $329 = $ReallocAsyncCtx18 + 20 | 0; //@line 10620
    HEAP32[$329 >> 2] = $12; //@line 10621
    sp = STACKTOP; //@line 10622
    STACKTOP = sp; //@line 10623
    return;
   }
  }
 }
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_274($0) {
 $0 = $0 | 0;
 var $$$1173 = 0, $$1$off0 = 0, $$1$off0$expand_i1_val = 0, $$1$off0$expand_i1_val52 = 0, $$1$off0$expand_i1_val54 = 0, $$3$off0226 = 0, $$byval_copy = 0, $$byval_copy48 = 0, $$byval_copy49 = 0, $$byval_copy50 = 0, $$sink = 0, $10 = 0, $106 = 0, $109 = 0, $110 = 0, $117 = 0, $12 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $132 = 0, $135 = 0, $137 = 0, $138 = 0, $14 = 0, $140 = 0, $142 = 0, $143 = 0, $147 = 0, $148 = 0, $155 = 0, $16 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $170 = 0, $173 = 0, $175 = 0, $176 = 0, $18 = 0, $183 = 0, $185 = 0, $186 = 0, $187 = 0, $191 = 0, $195 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $215 = 0, $216 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $238 = 0, $239 = 0, $24 = 0, $251 = 0, $252 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $269 = 0, $272 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $28 = 0, $283 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $293 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $308 = 0, $311 = 0, $313 = 0, $314 = 0, $315 = 0, $318 = 0, $320 = 0, $321 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $64 = 0, $66 = 0, $69 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $84 = 0, $87 = 0, $89 = 0, $90 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx19 = 0, $ReallocAsyncCtx20 = 0, $ReallocAsyncCtx21 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx26 = 0, $ReallocAsyncCtx27 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6239
 STACKTOP = STACKTOP + 32 | 0; //@line 6240
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 6240
 $$byval_copy50 = sp + 24 | 0; //@line 6241
 $$byval_copy49 = sp + 16 | 0; //@line 6242
 $$byval_copy48 = sp + 8 | 0; //@line 6243
 $$byval_copy = sp; //@line 6244
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6246
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6248
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6250
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6252
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 6254
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 6256
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 6258
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 6260
 $18 = HEAP8[$0 + 36 >> 0] | 0; //@line 6262
 $20 = HEAP8[$0 + 37 >> 0] | 0; //@line 6264
 $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 6266
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 6268
 $26 = HEAP8[$0 + 48 >> 0] | 0; //@line 6270
 $28 = HEAP32[$0 + 52 >> 2] | 0; //@line 6272
 $38 = HEAP32[$0 + 72 >> 2] | 0; //@line 6282
 $40 = HEAP32[$0 + 76 >> 2] | 0; //@line 6284
 $42 = HEAP32[$0 + 80 >> 2] | 0; //@line 6286
 $44 = HEAP32[$0 + 84 >> 2] | 0; //@line 6288
 $46 = HEAP8[$0 + 88 >> 0] | 0; //@line 6290
 $48 = HEAP8[$0 + 89 >> 0] | 0; //@line 6292
 $50 = HEAP32[$0 + 92 >> 2] | 0; //@line 6294
 $52 = HEAP32[$0 + 96 >> 2] | 0; //@line 6296
 $54 = HEAP8[$0 + 100 >> 0] | 0; //@line 6298
 $56 = HEAP32[$0 + 104 >> 2] | 0; //@line 6300
 $58 = HEAP32[$0 + 108 >> 2] | 0; //@line 6302
 $60 = (HEAP32[$0 + 60 >> 2] | 0) == (HEAP32[HEAP32[$0 + 56 >> 2] >> 2] | 0); //@line 6304
 $$$1173 = $60 ? HEAP32[$0 + 64 >> 2] | 0 : HEAP32[$0 + 68 >> 2] | 0; //@line 6305
 $64 = $4 >>> 0 < ((__ZN7LoRaPHY29get_maximum_frame_counter_gapEv(HEAP32[$2 >> 2] | 0) | 0) & 65535) >>> 0; //@line 6309
 $66 = (__ZN11LoRaMacMcps14get_indicationEv($6) | 0) + 4 | 0; //@line 6311
 if (!$64) {
  HEAP32[$66 >> 2] = 10; //@line 6313
  HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($6) | 0) + 32 >> 2] = $$$1173; //@line 6316
  $69 = $8 + 968 | 0; //@line 6317
  HEAP32[$69 >> 2] = HEAP32[$69 >> 2] | 64; //@line 6320
  if (!(HEAP8[$8 + 373 >> 0] | 0)) {
   $84 = $8 + 944 | 0; //@line 6325
   HEAP8[$84 >> 0] = HEAP8[$84 >> 0] | 34; //@line 6328
   $87 = HEAP32[$10 >> 2] | 0; //@line 6329
   $ReallocAsyncCtx10 = _emscripten_realloc_async_context(12) | 0; //@line 6331
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($87, $8 + 996 | 0, 1); //@line 6332
   if (___async) {
    HEAP32[$ReallocAsyncCtx10 >> 2] = 313; //@line 6335
    $89 = $ReallocAsyncCtx10 + 4 | 0; //@line 6336
    HEAP32[$89 >> 2] = $12; //@line 6337
    $90 = $ReallocAsyncCtx10 + 8 | 0; //@line 6338
    HEAP32[$90 >> 2] = $14; //@line 6339
    sp = STACKTOP; //@line 6340
    STACKTOP = sp; //@line 6341
    return;
   }
   ___async_unwind = 0; //@line 6343
   HEAP32[$ReallocAsyncCtx10 >> 2] = 313; //@line 6344
   $89 = $ReallocAsyncCtx10 + 4 | 0; //@line 6345
   HEAP32[$89 >> 2] = $12; //@line 6346
   $90 = $ReallocAsyncCtx10 + 8 | 0; //@line 6347
   HEAP32[$90 >> 2] = $14; //@line 6348
   sp = STACKTOP; //@line 6349
   STACKTOP = sp; //@line 6350
   return;
  } else {
   $76 = HEAP32[$8 + 1328 >> 2] | 0; //@line 6353
   HEAP32[$16 >> 2] = 297; //@line 6354
   HEAP32[$16 + 4 >> 2] = 0; //@line 6356
   $ReallocAsyncCtx22 = _emscripten_realloc_async_context(24) | 0; //@line 6357
   HEAP32[$$byval_copy >> 2] = HEAP32[$16 >> 2]; //@line 6358
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$16 + 4 >> 2]; //@line 6358
   $77 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($76, $8, $$byval_copy) | 0; //@line 6359
   if (___async) {
    HEAP32[$ReallocAsyncCtx22 >> 2] = 311; //@line 6362
    $78 = $ReallocAsyncCtx22 + 4 | 0; //@line 6363
    HEAP32[$78 >> 2] = $16; //@line 6364
    $79 = $ReallocAsyncCtx22 + 8 | 0; //@line 6365
    HEAP32[$79 >> 2] = $8; //@line 6366
    $80 = $ReallocAsyncCtx22 + 12 | 0; //@line 6367
    HEAP32[$80 >> 2] = $10; //@line 6368
    $81 = $ReallocAsyncCtx22 + 16 | 0; //@line 6369
    HEAP32[$81 >> 2] = $12; //@line 6370
    $82 = $ReallocAsyncCtx22 + 20 | 0; //@line 6371
    HEAP32[$82 >> 2] = $14; //@line 6372
    sp = STACKTOP; //@line 6373
    STACKTOP = sp; //@line 6374
    return;
   }
   HEAP32[___async_retval >> 2] = $77; //@line 6377
   ___async_unwind = 0; //@line 6378
   HEAP32[$ReallocAsyncCtx22 >> 2] = 311; //@line 6379
   $78 = $ReallocAsyncCtx22 + 4 | 0; //@line 6380
   HEAP32[$78 >> 2] = $16; //@line 6381
   $79 = $ReallocAsyncCtx22 + 8 | 0; //@line 6382
   HEAP32[$79 >> 2] = $8; //@line 6383
   $80 = $ReallocAsyncCtx22 + 12 | 0; //@line 6384
   HEAP32[$80 >> 2] = $10; //@line 6385
   $81 = $ReallocAsyncCtx22 + 16 | 0; //@line 6386
   HEAP32[$81 >> 2] = $12; //@line 6387
   $82 = $ReallocAsyncCtx22 + 20 | 0; //@line 6388
   HEAP32[$82 >> 2] = $14; //@line 6389
   sp = STACKTOP; //@line 6390
   STACKTOP = sp; //@line 6391
   return;
  }
 }
 if (!$60) {
  HEAP32[$66 >> 2] = 12; //@line 6395
  $293 = $8 + 968 | 0; //@line 6396
  HEAP32[$293 >> 2] = HEAP32[$293 >> 2] | 64; //@line 6399
  if (!(HEAP8[$8 + 373 >> 0] | 0)) {
   $308 = $8 + 944 | 0; //@line 6404
   HEAP8[$308 >> 0] = HEAP8[$308 >> 0] | 34; //@line 6407
   $311 = HEAP32[$10 >> 2] | 0; //@line 6408
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 6410
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($311, $8 + 996 | 0, 1); //@line 6411
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 327; //@line 6414
    $313 = $ReallocAsyncCtx7 + 4 | 0; //@line 6415
    HEAP32[$313 >> 2] = $12; //@line 6416
    $314 = $ReallocAsyncCtx7 + 8 | 0; //@line 6417
    HEAP32[$314 >> 2] = $14; //@line 6418
    sp = STACKTOP; //@line 6419
    STACKTOP = sp; //@line 6420
    return;
   }
   ___async_unwind = 0; //@line 6422
   HEAP32[$ReallocAsyncCtx7 >> 2] = 327; //@line 6423
   $313 = $ReallocAsyncCtx7 + 4 | 0; //@line 6424
   HEAP32[$313 >> 2] = $12; //@line 6425
   $314 = $ReallocAsyncCtx7 + 8 | 0; //@line 6426
   HEAP32[$314 >> 2] = $14; //@line 6427
   sp = STACKTOP; //@line 6428
   STACKTOP = sp; //@line 6429
   return;
  } else {
   $300 = HEAP32[$8 + 1328 >> 2] | 0; //@line 6432
   HEAP32[$58 >> 2] = 297; //@line 6433
   HEAP32[$58 + 4 >> 2] = 0; //@line 6435
   $ReallocAsyncCtx19 = _emscripten_realloc_async_context(24) | 0; //@line 6436
   HEAP32[$$byval_copy50 >> 2] = HEAP32[$58 >> 2]; //@line 6437
   HEAP32[$$byval_copy50 + 4 >> 2] = HEAP32[$58 + 4 >> 2]; //@line 6437
   $301 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($300, $8, $$byval_copy50) | 0; //@line 6438
   if (___async) {
    HEAP32[$ReallocAsyncCtx19 >> 2] = 325; //@line 6441
    $302 = $ReallocAsyncCtx19 + 4 | 0; //@line 6442
    HEAP32[$302 >> 2] = $58; //@line 6443
    $303 = $ReallocAsyncCtx19 + 8 | 0; //@line 6444
    HEAP32[$303 >> 2] = $8; //@line 6445
    $304 = $ReallocAsyncCtx19 + 12 | 0; //@line 6446
    HEAP32[$304 >> 2] = $10; //@line 6447
    $305 = $ReallocAsyncCtx19 + 16 | 0; //@line 6448
    HEAP32[$305 >> 2] = $12; //@line 6449
    $306 = $ReallocAsyncCtx19 + 20 | 0; //@line 6450
    HEAP32[$306 >> 2] = $14; //@line 6451
    sp = STACKTOP; //@line 6452
    STACKTOP = sp; //@line 6453
    return;
   }
   HEAP32[___async_retval >> 2] = $301; //@line 6456
   ___async_unwind = 0; //@line 6457
   HEAP32[$ReallocAsyncCtx19 >> 2] = 325; //@line 6458
   $302 = $ReallocAsyncCtx19 + 4 | 0; //@line 6459
   HEAP32[$302 >> 2] = $58; //@line 6460
   $303 = $ReallocAsyncCtx19 + 8 | 0; //@line 6461
   HEAP32[$303 >> 2] = $8; //@line 6462
   $304 = $ReallocAsyncCtx19 + 12 | 0; //@line 6463
   HEAP32[$304 >> 2] = $10; //@line 6464
   $305 = $ReallocAsyncCtx19 + 16 | 0; //@line 6465
   HEAP32[$305 >> 2] = $12; //@line 6466
   $306 = $ReallocAsyncCtx19 + 20 | 0; //@line 6467
   HEAP32[$306 >> 2] = $14; //@line 6468
   sp = STACKTOP; //@line 6469
   STACKTOP = sp; //@line 6470
   return;
  }
 }
 HEAP32[$66 >> 2] = 0; //@line 6473
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($6) | 0) + 8 >> 0] = $18; //@line 6476
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($6) | 0) + 11 >> 0] = ($20 & 255) >>> 4 & 1; //@line 6481
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($6) | 0) + 12 >> 2] = 0; //@line 6484
 HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($6) | 0) + 16 >> 1] = 0; //@line 6487
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($6) | 0) + 32 >> 2] = $$$1173; //@line 6490
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($6) | 0) + 4 >> 2] = 0; //@line 6493
 HEAP32[$8 + 964 >> 2] = 0; //@line 6495
 $106 = $8 + 4 | 0; //@line 6496
 __ZN14LoRaMacCommand19clear_repeat_bufferEv($106); //@line 6497
 do {
  if ($18 << 24 >> 24 == 1) {
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($6) | 0) >> 2] = 2; //@line 6502
   $109 = $22 + 36 | 0; //@line 6503
   $110 = HEAP32[$109 >> 2] | 0; //@line 6504
   if (($110 | 0) != ($$$1173 | 0) | ($110 | 0) == 0) {
    $$1$off0 = 0; //@line 6509
    $$sink = $109; //@line 6509
   } else {
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($6) | 0) + 4 >> 2] = 8; //@line 6513
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($6) | 0) + 32 >> 2] = $$$1173; //@line 6516
    $117 = $8 + 968 | 0; //@line 6517
    HEAP32[$117 >> 2] = HEAP32[$117 >> 2] | 64; //@line 6520
    if (!(HEAP8[$8 + 373 >> 0] | 0)) {
     $132 = $8 + 944 | 0; //@line 6525
     HEAP8[$132 >> 0] = HEAP8[$132 >> 0] | 34; //@line 6528
     $135 = HEAP32[$10 >> 2] | 0; //@line 6529
     $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 6531
     __ZN18LoRaWANTimeHandler5startER13timer_event_tj($135, $8 + 996 | 0, 1); //@line 6532
     if (___async) {
      HEAP32[$ReallocAsyncCtx9 >> 2] = 316; //@line 6535
      $137 = $ReallocAsyncCtx9 + 4 | 0; //@line 6536
      HEAP32[$137 >> 2] = $12; //@line 6537
      $138 = $ReallocAsyncCtx9 + 8 | 0; //@line 6538
      HEAP32[$138 >> 2] = $14; //@line 6539
      sp = STACKTOP; //@line 6540
      STACKTOP = sp; //@line 6541
      return;
     }
     ___async_unwind = 0; //@line 6543
     HEAP32[$ReallocAsyncCtx9 >> 2] = 316; //@line 6544
     $137 = $ReallocAsyncCtx9 + 4 | 0; //@line 6545
     HEAP32[$137 >> 2] = $12; //@line 6546
     $138 = $ReallocAsyncCtx9 + 8 | 0; //@line 6547
     HEAP32[$138 >> 2] = $14; //@line 6548
     sp = STACKTOP; //@line 6549
     STACKTOP = sp; //@line 6550
     return;
    } else {
     $124 = HEAP32[$8 + 1328 >> 2] | 0; //@line 6553
     HEAP32[$24 >> 2] = 297; //@line 6554
     HEAP32[$24 + 4 >> 2] = 0; //@line 6556
     $ReallocAsyncCtx21 = _emscripten_realloc_async_context(24) | 0; //@line 6557
     HEAP32[$$byval_copy48 >> 2] = HEAP32[$24 >> 2]; //@line 6558
     HEAP32[$$byval_copy48 + 4 >> 2] = HEAP32[$24 + 4 >> 2]; //@line 6558
     $125 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($124, $8, $$byval_copy48) | 0; //@line 6559
     if (___async) {
      HEAP32[$ReallocAsyncCtx21 >> 2] = 314; //@line 6562
      $126 = $ReallocAsyncCtx21 + 4 | 0; //@line 6563
      HEAP32[$126 >> 2] = $24; //@line 6564
      $127 = $ReallocAsyncCtx21 + 8 | 0; //@line 6565
      HEAP32[$127 >> 2] = $8; //@line 6566
      $128 = $ReallocAsyncCtx21 + 12 | 0; //@line 6567
      HEAP32[$128 >> 2] = $10; //@line 6568
      $129 = $ReallocAsyncCtx21 + 16 | 0; //@line 6569
      HEAP32[$129 >> 2] = $12; //@line 6570
      $130 = $ReallocAsyncCtx21 + 20 | 0; //@line 6571
      HEAP32[$130 >> 2] = $14; //@line 6572
      sp = STACKTOP; //@line 6573
      STACKTOP = sp; //@line 6574
      return;
     }
     HEAP32[___async_retval >> 2] = $125; //@line 6577
     ___async_unwind = 0; //@line 6578
     HEAP32[$ReallocAsyncCtx21 >> 2] = 314; //@line 6579
     $126 = $ReallocAsyncCtx21 + 4 | 0; //@line 6580
     HEAP32[$126 >> 2] = $24; //@line 6581
     $127 = $ReallocAsyncCtx21 + 8 | 0; //@line 6582
     HEAP32[$127 >> 2] = $8; //@line 6583
     $128 = $ReallocAsyncCtx21 + 12 | 0; //@line 6584
     HEAP32[$128 >> 2] = $10; //@line 6585
     $129 = $ReallocAsyncCtx21 + 16 | 0; //@line 6586
     HEAP32[$129 >> 2] = $12; //@line 6587
     $130 = $ReallocAsyncCtx21 + 20 | 0; //@line 6588
     HEAP32[$130 >> 2] = $14; //@line 6589
     sp = STACKTOP; //@line 6590
     STACKTOP = sp; //@line 6591
     return;
    }
   }
  } else {
   $140 = $8 + 374 | 0; //@line 6596
   if ($26 << 24 >> 24 == 5) {
    HEAP8[$140 >> 0] = 1; //@line 6598
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($6) | 0) >> 2] = 1; //@line 6600
    $142 = $8 + 960 | 0; //@line 6601
    $143 = HEAP32[$142 >> 2] | 0; //@line 6602
    $$1$off0 = ($143 | 0) != 0 & ($143 | 0) == ($$$1173 | 0); //@line 6606
    $$sink = $142; //@line 6606
    break;
   }
   HEAP8[$140 >> 0] = 0; //@line 6609
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($6) | 0) >> 2] = 0; //@line 6611
   $147 = $8 + 960 | 0; //@line 6612
   $148 = HEAP32[$147 >> 2] | 0; //@line 6613
   if (($148 | 0) != ($$$1173 | 0) | ($148 | 0) == 0) {
    $$1$off0 = 0; //@line 6618
    $$sink = $147; //@line 6618
   } else {
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($6) | 0) + 4 >> 2] = 8; //@line 6622
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($6) | 0) + 32 >> 2] = $$$1173; //@line 6625
    $155 = $8 + 968 | 0; //@line 6626
    HEAP32[$155 >> 2] = HEAP32[$155 >> 2] | 64; //@line 6629
    if (!(HEAP8[$8 + 373 >> 0] | 0)) {
     $170 = $8 + 944 | 0; //@line 6634
     HEAP8[$170 >> 0] = HEAP8[$170 >> 0] | 34; //@line 6637
     $173 = HEAP32[$10 >> 2] | 0; //@line 6638
     $ReallocAsyncCtx8 = _emscripten_realloc_async_context(12) | 0; //@line 6640
     __ZN18LoRaWANTimeHandler5startER13timer_event_tj($173, $8 + 996 | 0, 1); //@line 6641
     if (___async) {
      HEAP32[$ReallocAsyncCtx8 >> 2] = 319; //@line 6644
      $175 = $ReallocAsyncCtx8 + 4 | 0; //@line 6645
      HEAP32[$175 >> 2] = $12; //@line 6646
      $176 = $ReallocAsyncCtx8 + 8 | 0; //@line 6647
      HEAP32[$176 >> 2] = $14; //@line 6648
      sp = STACKTOP; //@line 6649
      STACKTOP = sp; //@line 6650
      return;
     }
     ___async_unwind = 0; //@line 6652
     HEAP32[$ReallocAsyncCtx8 >> 2] = 319; //@line 6653
     $175 = $ReallocAsyncCtx8 + 4 | 0; //@line 6654
     HEAP32[$175 >> 2] = $12; //@line 6655
     $176 = $ReallocAsyncCtx8 + 8 | 0; //@line 6656
     HEAP32[$176 >> 2] = $14; //@line 6657
     sp = STACKTOP; //@line 6658
     STACKTOP = sp; //@line 6659
     return;
    } else {
     $162 = HEAP32[$8 + 1328 >> 2] | 0; //@line 6662
     HEAP32[$28 >> 2] = 297; //@line 6663
     HEAP32[$28 + 4 >> 2] = 0; //@line 6665
     $ReallocAsyncCtx20 = _emscripten_realloc_async_context(24) | 0; //@line 6666
     HEAP32[$$byval_copy49 >> 2] = HEAP32[$28 >> 2]; //@line 6667
     HEAP32[$$byval_copy49 + 4 >> 2] = HEAP32[$28 + 4 >> 2]; //@line 6667
     $163 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($162, $8, $$byval_copy49) | 0; //@line 6668
     if (___async) {
      HEAP32[$ReallocAsyncCtx20 >> 2] = 317; //@line 6671
      $164 = $ReallocAsyncCtx20 + 4 | 0; //@line 6672
      HEAP32[$164 >> 2] = $28; //@line 6673
      $165 = $ReallocAsyncCtx20 + 8 | 0; //@line 6674
      HEAP32[$165 >> 2] = $8; //@line 6675
      $166 = $ReallocAsyncCtx20 + 12 | 0; //@line 6676
      HEAP32[$166 >> 2] = $10; //@line 6677
      $167 = $ReallocAsyncCtx20 + 16 | 0; //@line 6678
      HEAP32[$167 >> 2] = $12; //@line 6679
      $168 = $ReallocAsyncCtx20 + 20 | 0; //@line 6680
      HEAP32[$168 >> 2] = $14; //@line 6681
      sp = STACKTOP; //@line 6682
      STACKTOP = sp; //@line 6683
      return;
     }
     HEAP32[___async_retval >> 2] = $163; //@line 6686
     ___async_unwind = 0; //@line 6687
     HEAP32[$ReallocAsyncCtx20 >> 2] = 317; //@line 6688
     $164 = $ReallocAsyncCtx20 + 4 | 0; //@line 6689
     HEAP32[$164 >> 2] = $28; //@line 6690
     $165 = $ReallocAsyncCtx20 + 8 | 0; //@line 6691
     HEAP32[$165 >> 2] = $8; //@line 6692
     $166 = $ReallocAsyncCtx20 + 12 | 0; //@line 6693
     HEAP32[$166 >> 2] = $10; //@line 6694
     $167 = $ReallocAsyncCtx20 + 16 | 0; //@line 6695
     HEAP32[$167 >> 2] = $12; //@line 6696
     $168 = $ReallocAsyncCtx20 + 20 | 0; //@line 6697
     HEAP32[$168 >> 2] = $14; //@line 6698
     sp = STACKTOP; //@line 6699
     STACKTOP = sp; //@line 6700
     return;
    }
   }
  }
 } while (0);
 HEAP32[$$sink >> 2] = $$$1173; //@line 6705
 if ((HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($6) | 0) >> 2] | 0) == 1) {
  if ($20 & 32) {
   __ZN14LoRaMacCommand20clear_command_bufferEv($106); //@line 6713
  }
 } else {
  __ZN14LoRaMacCommand20clear_command_bufferEv($106); //@line 6716
 }
 do {
  if (($44 | 0) > ($42 | 0)) {
   $183 = $38 + 9 | 0; //@line 6721
   $185 = HEAP8[$40 + $42 >> 0] | 0; //@line 6723
   $186 = $44 - $183 | 0; //@line 6724
   $187 = $186 & 255; //@line 6725
   HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($6) | 0) + 9 >> 0] = $185; //@line 6728
   $191 = $46 << 24 >> 24 == 0; //@line 6730
   if (!($185 << 24 >> 24)) {
    if (!$191) {
     $$3$off0226 = 6; //@line 6733
     break;
    }
    $195 = $8 + 638 | 0; //@line 6739
    if (__Z15decrypt_payloadPKhtS0_jhjPh($40 + $183 | 0, $186 & 255, $50, $52, 1, $$$1173, $195) | 0) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($6) | 0) + 4 >> 2] = 13; //@line 6745
    }
    $200 = $8 + 264 | 0; //@line 6747
    $201 = __ZN11LoRaMacMlme16get_confirmationEv($200) | 0; //@line 6748
    $203 = HEAP32[$2 >> 2] | 0; //@line 6750
    $ReallocAsyncCtx17 = _emscripten_realloc_async_context(40) | 0; //@line 6751
    $204 = __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($106, $195, 0, $187, $48, $201, $8 + 1096 | 0, $203) | 0; //@line 6752
    if (___async) {
     HEAP32[$ReallocAsyncCtx17 >> 2] = 320; //@line 6755
     $205 = $ReallocAsyncCtx17 + 4 | 0; //@line 6756
     HEAP32[$205 >> 2] = $6; //@line 6757
     $206 = $ReallocAsyncCtx17 + 8 | 0; //@line 6758
     $$1$off0$expand_i1_val = $$1$off0 & 1; //@line 6759
     HEAP8[$206 >> 0] = $$1$off0$expand_i1_val; //@line 6760
     $207 = $ReallocAsyncCtx17 + 12 | 0; //@line 6761
     HEAP32[$207 >> 2] = $8; //@line 6762
     $208 = $ReallocAsyncCtx17 + 16 | 0; //@line 6763
     HEAP32[$208 >> 2] = $10; //@line 6764
     $209 = $ReallocAsyncCtx17 + 20 | 0; //@line 6765
     HEAP32[$209 >> 2] = $12; //@line 6766
     $210 = $ReallocAsyncCtx17 + 24 | 0; //@line 6767
     HEAP32[$210 >> 2] = $14; //@line 6768
     $211 = $ReallocAsyncCtx17 + 28 | 0; //@line 6769
     HEAP32[$211 >> 2] = $200; //@line 6770
     $212 = $ReallocAsyncCtx17 + 32 | 0; //@line 6771
     HEAP32[$212 >> 2] = $106; //@line 6772
     $213 = $ReallocAsyncCtx17 + 36 | 0; //@line 6773
     HEAP8[$213 >> 0] = $20; //@line 6774
     sp = STACKTOP; //@line 6775
     STACKTOP = sp; //@line 6776
     return;
    }
    HEAP32[___async_retval >> 2] = $204; //@line 6779
    ___async_unwind = 0; //@line 6780
    HEAP32[$ReallocAsyncCtx17 >> 2] = 320; //@line 6781
    $205 = $ReallocAsyncCtx17 + 4 | 0; //@line 6782
    HEAP32[$205 >> 2] = $6; //@line 6783
    $206 = $ReallocAsyncCtx17 + 8 | 0; //@line 6784
    $$1$off0$expand_i1_val = $$1$off0 & 1; //@line 6785
    HEAP8[$206 >> 0] = $$1$off0$expand_i1_val; //@line 6786
    $207 = $ReallocAsyncCtx17 + 12 | 0; //@line 6787
    HEAP32[$207 >> 2] = $8; //@line 6788
    $208 = $ReallocAsyncCtx17 + 16 | 0; //@line 6789
    HEAP32[$208 >> 2] = $10; //@line 6790
    $209 = $ReallocAsyncCtx17 + 20 | 0; //@line 6791
    HEAP32[$209 >> 2] = $12; //@line 6792
    $210 = $ReallocAsyncCtx17 + 24 | 0; //@line 6793
    HEAP32[$210 >> 2] = $14; //@line 6794
    $211 = $ReallocAsyncCtx17 + 28 | 0; //@line 6795
    HEAP32[$211 >> 2] = $200; //@line 6796
    $212 = $ReallocAsyncCtx17 + 32 | 0; //@line 6797
    HEAP32[$212 >> 2] = $106; //@line 6798
    $213 = $ReallocAsyncCtx17 + 36 | 0; //@line 6799
    HEAP8[$213 >> 0] = $20; //@line 6800
    sp = STACKTOP; //@line 6801
    STACKTOP = sp; //@line 6802
    return;
   }
   if ($191) {
    $238 = $186 & 255; //@line 6807
    $239 = $8 + 638 | 0; //@line 6808
    if (__Z15decrypt_payloadPKhtS0_jhjPh($40 + $183 | 0, $238, $56, $52, 1, $$$1173, $239) | 0) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($6) | 0) + 4 >> 2] = 13; //@line 6814
    }
    if ($$1$off0) {
     $$3$off0226 = 6; //@line 6817
     break;
    }
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($6) | 0) + 12 >> 2] = $239; //@line 6822
    HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($6) | 0) + 16 >> 1] = $238; //@line 6825
    HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($6) | 0) + 18 >> 0] = 1; //@line 6828
    label = 56; //@line 6829
    break;
   } else {
    $215 = $8 + 264 | 0; //@line 6832
    $216 = __ZN11LoRaMacMlme16get_confirmationEv($215) | 0; //@line 6833
    $218 = HEAP32[$2 >> 2] | 0; //@line 6835
    $ReallocAsyncCtx16 = _emscripten_realloc_async_context(60) | 0; //@line 6836
    $219 = __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($106, $40, 8, $54, $48, $216, $8 + 1096 | 0, $218) | 0; //@line 6837
    if (___async) {
     HEAP32[$ReallocAsyncCtx16 >> 2] = 321; //@line 6840
     $220 = $ReallocAsyncCtx16 + 4 | 0; //@line 6841
     HEAP32[$220 >> 2] = $8; //@line 6842
     $221 = $ReallocAsyncCtx16 + 8 | 0; //@line 6843
     HEAP32[$221 >> 2] = $10; //@line 6844
     $222 = $ReallocAsyncCtx16 + 12 | 0; //@line 6845
     HEAP32[$222 >> 2] = $12; //@line 6846
     $223 = $ReallocAsyncCtx16 + 16 | 0; //@line 6847
     HEAP32[$223 >> 2] = $14; //@line 6848
     $224 = $ReallocAsyncCtx16 + 20 | 0; //@line 6849
     HEAP32[$224 >> 2] = $40; //@line 6850
     $225 = $ReallocAsyncCtx16 + 24 | 0; //@line 6851
     HEAP32[$225 >> 2] = $183; //@line 6852
     $226 = $ReallocAsyncCtx16 + 28 | 0; //@line 6853
     HEAP32[$226 >> 2] = $186; //@line 6854
     $227 = $ReallocAsyncCtx16 + 32 | 0; //@line 6855
     HEAP32[$227 >> 2] = $56; //@line 6856
     $228 = $ReallocAsyncCtx16 + 36 | 0; //@line 6857
     HEAP32[$228 >> 2] = $52; //@line 6858
     $229 = $ReallocAsyncCtx16 + 40 | 0; //@line 6859
     HEAP32[$229 >> 2] = $$$1173; //@line 6860
     $230 = $ReallocAsyncCtx16 + 44 | 0; //@line 6861
     HEAP32[$230 >> 2] = $215; //@line 6862
     $231 = $ReallocAsyncCtx16 + 48 | 0; //@line 6863
     HEAP32[$231 >> 2] = $106; //@line 6864
     $232 = $ReallocAsyncCtx16 + 52 | 0; //@line 6865
     HEAP32[$232 >> 2] = $6; //@line 6866
     $233 = $ReallocAsyncCtx16 + 56 | 0; //@line 6867
     $$1$off0$expand_i1_val52 = $$1$off0 & 1; //@line 6868
     HEAP8[$233 >> 0] = $$1$off0$expand_i1_val52; //@line 6869
     $234 = $ReallocAsyncCtx16 + 57 | 0; //@line 6870
     HEAP8[$234 >> 0] = $20; //@line 6871
     sp = STACKTOP; //@line 6872
     STACKTOP = sp; //@line 6873
     return;
    }
    HEAP32[___async_retval >> 2] = $219; //@line 6876
    ___async_unwind = 0; //@line 6877
    HEAP32[$ReallocAsyncCtx16 >> 2] = 321; //@line 6878
    $220 = $ReallocAsyncCtx16 + 4 | 0; //@line 6879
    HEAP32[$220 >> 2] = $8; //@line 6880
    $221 = $ReallocAsyncCtx16 + 8 | 0; //@line 6881
    HEAP32[$221 >> 2] = $10; //@line 6882
    $222 = $ReallocAsyncCtx16 + 12 | 0; //@line 6883
    HEAP32[$222 >> 2] = $12; //@line 6884
    $223 = $ReallocAsyncCtx16 + 16 | 0; //@line 6885
    HEAP32[$223 >> 2] = $14; //@line 6886
    $224 = $ReallocAsyncCtx16 + 20 | 0; //@line 6887
    HEAP32[$224 >> 2] = $40; //@line 6888
    $225 = $ReallocAsyncCtx16 + 24 | 0; //@line 6889
    HEAP32[$225 >> 2] = $183; //@line 6890
    $226 = $ReallocAsyncCtx16 + 28 | 0; //@line 6891
    HEAP32[$226 >> 2] = $186; //@line 6892
    $227 = $ReallocAsyncCtx16 + 32 | 0; //@line 6893
    HEAP32[$227 >> 2] = $56; //@line 6894
    $228 = $ReallocAsyncCtx16 + 36 | 0; //@line 6895
    HEAP32[$228 >> 2] = $52; //@line 6896
    $229 = $ReallocAsyncCtx16 + 40 | 0; //@line 6897
    HEAP32[$229 >> 2] = $$$1173; //@line 6898
    $230 = $ReallocAsyncCtx16 + 44 | 0; //@line 6899
    HEAP32[$230 >> 2] = $215; //@line 6900
    $231 = $ReallocAsyncCtx16 + 48 | 0; //@line 6901
    HEAP32[$231 >> 2] = $106; //@line 6902
    $232 = $ReallocAsyncCtx16 + 52 | 0; //@line 6903
    HEAP32[$232 >> 2] = $6; //@line 6904
    $233 = $ReallocAsyncCtx16 + 56 | 0; //@line 6905
    $$1$off0$expand_i1_val52 = $$1$off0 & 1; //@line 6906
    HEAP8[$233 >> 0] = $$1$off0$expand_i1_val52; //@line 6907
    $234 = $ReallocAsyncCtx16 + 57 | 0; //@line 6908
    HEAP8[$234 >> 0] = $20; //@line 6909
    sp = STACKTOP; //@line 6910
    STACKTOP = sp; //@line 6911
    return;
   }
  } else {
   if (!($46 << 24 >> 24)) {
    if ($$1$off0) {
     $$3$off0226 = 6; //@line 6917
     break;
    } else {
     label = 56; //@line 6920
     break;
    }
   }
   $251 = $8 + 264 | 0; //@line 6924
   $252 = __ZN11LoRaMacMlme16get_confirmationEv($251) | 0; //@line 6925
   $254 = HEAP32[$2 >> 2] | 0; //@line 6927
   $ReallocAsyncCtx15 = _emscripten_realloc_async_context(40) | 0; //@line 6928
   $255 = __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($106, $40, 8, $54, $48, $252, $8 + 1096 | 0, $254) | 0; //@line 6929
   if (___async) {
    HEAP32[$ReallocAsyncCtx15 >> 2] = 322; //@line 6932
    $256 = $ReallocAsyncCtx15 + 4 | 0; //@line 6933
    HEAP32[$256 >> 2] = $8; //@line 6934
    $257 = $ReallocAsyncCtx15 + 8 | 0; //@line 6935
    HEAP32[$257 >> 2] = $10; //@line 6936
    $258 = $ReallocAsyncCtx15 + 12 | 0; //@line 6937
    HEAP32[$258 >> 2] = $12; //@line 6938
    $259 = $ReallocAsyncCtx15 + 16 | 0; //@line 6939
    HEAP32[$259 >> 2] = $14; //@line 6940
    $260 = $ReallocAsyncCtx15 + 20 | 0; //@line 6941
    HEAP32[$260 >> 2] = $251; //@line 6942
    $261 = $ReallocAsyncCtx15 + 24 | 0; //@line 6943
    HEAP32[$261 >> 2] = $106; //@line 6944
    $262 = $ReallocAsyncCtx15 + 28 | 0; //@line 6945
    $$1$off0$expand_i1_val54 = $$1$off0 & 1; //@line 6946
    HEAP8[$262 >> 0] = $$1$off0$expand_i1_val54; //@line 6947
    $263 = $ReallocAsyncCtx15 + 32 | 0; //@line 6948
    HEAP32[$263 >> 2] = $6; //@line 6949
    $264 = $ReallocAsyncCtx15 + 36 | 0; //@line 6950
    HEAP8[$264 >> 0] = $20; //@line 6951
    sp = STACKTOP; //@line 6952
    STACKTOP = sp; //@line 6953
    return;
   }
   HEAP32[___async_retval >> 2] = $255; //@line 6956
   ___async_unwind = 0; //@line 6957
   HEAP32[$ReallocAsyncCtx15 >> 2] = 322; //@line 6958
   $256 = $ReallocAsyncCtx15 + 4 | 0; //@line 6959
   HEAP32[$256 >> 2] = $8; //@line 6960
   $257 = $ReallocAsyncCtx15 + 8 | 0; //@line 6961
   HEAP32[$257 >> 2] = $10; //@line 6962
   $258 = $ReallocAsyncCtx15 + 12 | 0; //@line 6963
   HEAP32[$258 >> 2] = $12; //@line 6964
   $259 = $ReallocAsyncCtx15 + 16 | 0; //@line 6965
   HEAP32[$259 >> 2] = $14; //@line 6966
   $260 = $ReallocAsyncCtx15 + 20 | 0; //@line 6967
   HEAP32[$260 >> 2] = $251; //@line 6968
   $261 = $ReallocAsyncCtx15 + 24 | 0; //@line 6969
   HEAP32[$261 >> 2] = $106; //@line 6970
   $262 = $ReallocAsyncCtx15 + 28 | 0; //@line 6971
   $$1$off0$expand_i1_val54 = $$1$off0 & 1; //@line 6972
   HEAP8[$262 >> 0] = $$1$off0$expand_i1_val54; //@line 6973
   $263 = $ReallocAsyncCtx15 + 32 | 0; //@line 6974
   HEAP32[$263 >> 2] = $6; //@line 6975
   $264 = $ReallocAsyncCtx15 + 36 | 0; //@line 6976
   HEAP8[$264 >> 0] = $20; //@line 6977
   sp = STACKTOP; //@line 6978
   STACKTOP = sp; //@line 6979
   return;
  }
 } while (0);
 if ((label | 0) == 56) {
  $269 = (__ZN11LoRaMacMcps16get_confirmationEv($6) | 0) + 10 | 0; //@line 6986
  if ($20 & 32) {
   HEAP8[$269 >> 0] = 1; //@line 6988
   HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($6) | 0) + 28 >> 0] = 1; //@line 6991
   $272 = HEAP32[$10 >> 2] | 0; //@line 6992
   $ReallocAsyncCtx27 = _emscripten_realloc_async_context(20) | 0; //@line 6994
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($272, $8 + 1076 | 0); //@line 6995
   if (___async) {
    HEAP32[$ReallocAsyncCtx27 >> 2] = 323; //@line 6998
    $274 = $ReallocAsyncCtx27 + 4 | 0; //@line 6999
    HEAP32[$274 >> 2] = $8; //@line 7000
    $275 = $ReallocAsyncCtx27 + 8 | 0; //@line 7001
    HEAP32[$275 >> 2] = $10; //@line 7002
    $276 = $ReallocAsyncCtx27 + 12 | 0; //@line 7003
    HEAP32[$276 >> 2] = $12; //@line 7004
    $277 = $ReallocAsyncCtx27 + 16 | 0; //@line 7005
    HEAP32[$277 >> 2] = $14; //@line 7006
    sp = STACKTOP; //@line 7007
    STACKTOP = sp; //@line 7008
    return;
   }
   ___async_unwind = 0; //@line 7010
   HEAP32[$ReallocAsyncCtx27 >> 2] = 323; //@line 7011
   $274 = $ReallocAsyncCtx27 + 4 | 0; //@line 7012
   HEAP32[$274 >> 2] = $8; //@line 7013
   $275 = $ReallocAsyncCtx27 + 8 | 0; //@line 7014
   HEAP32[$275 >> 2] = $10; //@line 7015
   $276 = $ReallocAsyncCtx27 + 12 | 0; //@line 7016
   HEAP32[$276 >> 2] = $12; //@line 7017
   $277 = $ReallocAsyncCtx27 + 16 | 0; //@line 7018
   HEAP32[$277 >> 2] = $14; //@line 7019
   sp = STACKTOP; //@line 7020
   STACKTOP = sp; //@line 7021
   return;
  }
  HEAP8[$269 >> 0] = 0; //@line 7023
  if ((HEAPU8[$8 + 895 >> 0] | 0) > (HEAPU8[$8 + 894 >> 0] | 0)) {
   $283 = HEAP32[$10 >> 2] | 0; //@line 7030
   $ReallocAsyncCtx26 = _emscripten_realloc_async_context(20) | 0; //@line 7032
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($283, $8 + 1076 | 0); //@line 7033
   if (___async) {
    HEAP32[$ReallocAsyncCtx26 >> 2] = 324; //@line 7036
    $285 = $ReallocAsyncCtx26 + 4 | 0; //@line 7037
    HEAP32[$285 >> 2] = $8; //@line 7038
    $286 = $ReallocAsyncCtx26 + 8 | 0; //@line 7039
    HEAP32[$286 >> 2] = $10; //@line 7040
    $287 = $ReallocAsyncCtx26 + 12 | 0; //@line 7041
    HEAP32[$287 >> 2] = $12; //@line 7042
    $288 = $ReallocAsyncCtx26 + 16 | 0; //@line 7043
    HEAP32[$288 >> 2] = $14; //@line 7044
    sp = STACKTOP; //@line 7045
    STACKTOP = sp; //@line 7046
    return;
   }
   ___async_unwind = 0; //@line 7048
   HEAP32[$ReallocAsyncCtx26 >> 2] = 324; //@line 7049
   $285 = $ReallocAsyncCtx26 + 4 | 0; //@line 7050
   HEAP32[$285 >> 2] = $8; //@line 7051
   $286 = $ReallocAsyncCtx26 + 8 | 0; //@line 7052
   HEAP32[$286 >> 2] = $10; //@line 7053
   $287 = $ReallocAsyncCtx26 + 12 | 0; //@line 7054
   HEAP32[$287 >> 2] = $12; //@line 7055
   $288 = $ReallocAsyncCtx26 + 16 | 0; //@line 7056
   HEAP32[$288 >> 2] = $14; //@line 7057
   sp = STACKTOP; //@line 7058
   STACKTOP = sp; //@line 7059
   return;
  } else {
   $$3$off0226 = 2; //@line 7061
  }
 }
 $289 = $8 + 944 | 0; //@line 7064
 HEAP8[$289 >> 0] = $$3$off0226 | HEAP8[$289 >> 0] & -7; //@line 7068
 $315 = $8 + 944 | 0; //@line 7069
 HEAP8[$315 >> 0] = HEAP8[$315 >> 0] | 32; //@line 7072
 $318 = HEAP32[$10 >> 2] | 0; //@line 7073
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 7075
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($318, $8 + 996 | 0, 1); //@line 7076
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 331; //@line 7079
  $320 = $ReallocAsyncCtx5 + 4 | 0; //@line 7080
  HEAP32[$320 >> 2] = $12; //@line 7081
  $321 = $ReallocAsyncCtx5 + 8 | 0; //@line 7082
  HEAP32[$321 >> 2] = $14; //@line 7083
  sp = STACKTOP; //@line 7084
  STACKTOP = sp; //@line 7085
  return;
 }
 ___async_unwind = 0; //@line 7087
 HEAP32[$ReallocAsyncCtx5 >> 2] = 331; //@line 7088
 $320 = $ReallocAsyncCtx5 + 4 | 0; //@line 7089
 HEAP32[$320 >> 2] = $12; //@line 7090
 $321 = $ReallocAsyncCtx5 + 8 | 0; //@line 7091
 HEAP32[$321 >> 2] = $14; //@line 7092
 sp = STACKTOP; //@line 7093
 STACKTOP = sp; //@line 7094
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_275($0) {
 $0 = $0 | 0;
 var $$1$off0 = 0, $$1$off0$expand_i1_val = 0, $$1$off0$expand_i1_val52 = 0, $$1$off0$expand_i1_val54 = 0, $$3$off0226 = 0, $$byval_copy = 0, $$byval_copy48 = 0, $$byval_copy49 = 0, $$byval_copy50 = 0, $$sink = 0, $10 = 0, $104 = 0, $107 = 0, $108 = 0, $115 = 0, $12 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $130 = 0, $133 = 0, $135 = 0, $136 = 0, $138 = 0, $14 = 0, $140 = 0, $141 = 0, $145 = 0, $146 = 0, $153 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $168 = 0, $171 = 0, $173 = 0, $174 = 0, $18 = 0, $181 = 0, $183 = 0, $184 = 0, $185 = 0, $189 = 0, $193 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $213 = 0, $214 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $236 = 0, $237 = 0, $24 = 0, $249 = 0, $250 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $260 = 0, $261 = 0, $262 = 0, $267 = 0, $270 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $281 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $291 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $306 = 0, $309 = 0, $311 = 0, $312 = 0, $313 = 0, $316 = 0, $318 = 0, $319 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $56 = 0, $58 = 0, $6 = 0, $62 = 0, $64 = 0, $67 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $82 = 0, $85 = 0, $87 = 0, $88 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx19 = 0, $ReallocAsyncCtx20 = 0, $ReallocAsyncCtx21 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx26 = 0, $ReallocAsyncCtx27 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 7117
 STACKTOP = STACKTOP + 32 | 0; //@line 7118
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 7118
 $$byval_copy50 = sp + 24 | 0; //@line 7119
 $$byval_copy49 = sp + 16 | 0; //@line 7120
 $$byval_copy48 = sp + 8 | 0; //@line 7121
 $$byval_copy = sp; //@line 7122
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 7124
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7126
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 7128
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 7130
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 7132
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 7134
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 7136
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 7138
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 7140
 $20 = HEAP8[$0 + 40 >> 0] | 0; //@line 7142
 $22 = HEAP8[$0 + 41 >> 0] | 0; //@line 7144
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 7146
 $30 = HEAP32[$0 + 56 >> 2] | 0; //@line 7152
 $32 = HEAP8[$0 + 60 >> 0] | 0; //@line 7154
 $34 = HEAP32[$0 + 64 >> 2] | 0; //@line 7156
 $36 = HEAP32[$0 + 68 >> 2] | 0; //@line 7158
 $38 = HEAP32[$0 + 72 >> 2] | 0; //@line 7160
 $40 = HEAP32[$0 + 76 >> 2] | 0; //@line 7162
 $42 = HEAP32[$0 + 80 >> 2] | 0; //@line 7164
 $44 = HEAP8[$0 + 84 >> 0] | 0; //@line 7166
 $46 = HEAP8[$0 + 85 >> 0] | 0; //@line 7168
 $48 = HEAP32[$0 + 88 >> 2] | 0; //@line 7170
 $50 = HEAP32[$0 + 92 >> 2] | 0; //@line 7172
 $52 = HEAP8[$0 + 96 >> 0] | 0; //@line 7174
 $54 = HEAP32[$0 + 100 >> 2] | 0; //@line 7176
 $56 = HEAP32[$0 + 104 >> 2] | 0; //@line 7178
 $58 = (HEAP32[$0 + 52 >> 2] | 0) == (HEAP32[HEAP32[$0 + 48 >> 2] >> 2] | 0); //@line 7180
 $62 = $6 >>> 0 < ((__ZN7LoRaPHY29get_maximum_frame_counter_gapEv(HEAP32[$4 >> 2] | 0) | 0) & 65535) >>> 0; //@line 7184
 $64 = (__ZN11LoRaMacMcps14get_indicationEv($8) | 0) + 4 | 0; //@line 7186
 if (!$62) {
  HEAP32[$64 >> 2] = 10; //@line 7188
  HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($8) | 0) + 32 >> 2] = $2; //@line 7191
  $67 = $10 + 968 | 0; //@line 7192
  HEAP32[$67 >> 2] = HEAP32[$67 >> 2] | 64; //@line 7195
  if (!(HEAP8[$10 + 373 >> 0] | 0)) {
   $82 = $10 + 944 | 0; //@line 7200
   HEAP8[$82 >> 0] = HEAP8[$82 >> 0] | 34; //@line 7203
   $85 = HEAP32[$12 >> 2] | 0; //@line 7204
   $ReallocAsyncCtx10 = _emscripten_realloc_async_context(12) | 0; //@line 7206
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($85, $10 + 996 | 0, 1); //@line 7207
   if (___async) {
    HEAP32[$ReallocAsyncCtx10 >> 2] = 313; //@line 7210
    $87 = $ReallocAsyncCtx10 + 4 | 0; //@line 7211
    HEAP32[$87 >> 2] = $14; //@line 7212
    $88 = $ReallocAsyncCtx10 + 8 | 0; //@line 7213
    HEAP32[$88 >> 2] = $16; //@line 7214
    sp = STACKTOP; //@line 7215
    STACKTOP = sp; //@line 7216
    return;
   }
   ___async_unwind = 0; //@line 7218
   HEAP32[$ReallocAsyncCtx10 >> 2] = 313; //@line 7219
   $87 = $ReallocAsyncCtx10 + 4 | 0; //@line 7220
   HEAP32[$87 >> 2] = $14; //@line 7221
   $88 = $ReallocAsyncCtx10 + 8 | 0; //@line 7222
   HEAP32[$88 >> 2] = $16; //@line 7223
   sp = STACKTOP; //@line 7224
   STACKTOP = sp; //@line 7225
   return;
  } else {
   $74 = HEAP32[$10 + 1328 >> 2] | 0; //@line 7228
   HEAP32[$18 >> 2] = 297; //@line 7229
   HEAP32[$18 + 4 >> 2] = 0; //@line 7231
   $ReallocAsyncCtx22 = _emscripten_realloc_async_context(24) | 0; //@line 7232
   HEAP32[$$byval_copy >> 2] = HEAP32[$18 >> 2]; //@line 7233
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$18 + 4 >> 2]; //@line 7233
   $75 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($74, $10, $$byval_copy) | 0; //@line 7234
   if (___async) {
    HEAP32[$ReallocAsyncCtx22 >> 2] = 311; //@line 7237
    $76 = $ReallocAsyncCtx22 + 4 | 0; //@line 7238
    HEAP32[$76 >> 2] = $18; //@line 7239
    $77 = $ReallocAsyncCtx22 + 8 | 0; //@line 7240
    HEAP32[$77 >> 2] = $10; //@line 7241
    $78 = $ReallocAsyncCtx22 + 12 | 0; //@line 7242
    HEAP32[$78 >> 2] = $12; //@line 7243
    $79 = $ReallocAsyncCtx22 + 16 | 0; //@line 7244
    HEAP32[$79 >> 2] = $14; //@line 7245
    $80 = $ReallocAsyncCtx22 + 20 | 0; //@line 7246
    HEAP32[$80 >> 2] = $16; //@line 7247
    sp = STACKTOP; //@line 7248
    STACKTOP = sp; //@line 7249
    return;
   }
   HEAP32[___async_retval >> 2] = $75; //@line 7252
   ___async_unwind = 0; //@line 7253
   HEAP32[$ReallocAsyncCtx22 >> 2] = 311; //@line 7254
   $76 = $ReallocAsyncCtx22 + 4 | 0; //@line 7255
   HEAP32[$76 >> 2] = $18; //@line 7256
   $77 = $ReallocAsyncCtx22 + 8 | 0; //@line 7257
   HEAP32[$77 >> 2] = $10; //@line 7258
   $78 = $ReallocAsyncCtx22 + 12 | 0; //@line 7259
   HEAP32[$78 >> 2] = $12; //@line 7260
   $79 = $ReallocAsyncCtx22 + 16 | 0; //@line 7261
   HEAP32[$79 >> 2] = $14; //@line 7262
   $80 = $ReallocAsyncCtx22 + 20 | 0; //@line 7263
   HEAP32[$80 >> 2] = $16; //@line 7264
   sp = STACKTOP; //@line 7265
   STACKTOP = sp; //@line 7266
   return;
  }
 }
 if (!$58) {
  HEAP32[$64 >> 2] = 12; //@line 7270
  $291 = $10 + 968 | 0; //@line 7271
  HEAP32[$291 >> 2] = HEAP32[$291 >> 2] | 64; //@line 7274
  if (!(HEAP8[$10 + 373 >> 0] | 0)) {
   $306 = $10 + 944 | 0; //@line 7279
   HEAP8[$306 >> 0] = HEAP8[$306 >> 0] | 34; //@line 7282
   $309 = HEAP32[$12 >> 2] | 0; //@line 7283
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 7285
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($309, $10 + 996 | 0, 1); //@line 7286
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 327; //@line 7289
    $311 = $ReallocAsyncCtx7 + 4 | 0; //@line 7290
    HEAP32[$311 >> 2] = $14; //@line 7291
    $312 = $ReallocAsyncCtx7 + 8 | 0; //@line 7292
    HEAP32[$312 >> 2] = $16; //@line 7293
    sp = STACKTOP; //@line 7294
    STACKTOP = sp; //@line 7295
    return;
   }
   ___async_unwind = 0; //@line 7297
   HEAP32[$ReallocAsyncCtx7 >> 2] = 327; //@line 7298
   $311 = $ReallocAsyncCtx7 + 4 | 0; //@line 7299
   HEAP32[$311 >> 2] = $14; //@line 7300
   $312 = $ReallocAsyncCtx7 + 8 | 0; //@line 7301
   HEAP32[$312 >> 2] = $16; //@line 7302
   sp = STACKTOP; //@line 7303
   STACKTOP = sp; //@line 7304
   return;
  } else {
   $298 = HEAP32[$10 + 1328 >> 2] | 0; //@line 7307
   HEAP32[$56 >> 2] = 297; //@line 7308
   HEAP32[$56 + 4 >> 2] = 0; //@line 7310
   $ReallocAsyncCtx19 = _emscripten_realloc_async_context(24) | 0; //@line 7311
   HEAP32[$$byval_copy50 >> 2] = HEAP32[$56 >> 2]; //@line 7312
   HEAP32[$$byval_copy50 + 4 >> 2] = HEAP32[$56 + 4 >> 2]; //@line 7312
   $299 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($298, $10, $$byval_copy50) | 0; //@line 7313
   if (___async) {
    HEAP32[$ReallocAsyncCtx19 >> 2] = 325; //@line 7316
    $300 = $ReallocAsyncCtx19 + 4 | 0; //@line 7317
    HEAP32[$300 >> 2] = $56; //@line 7318
    $301 = $ReallocAsyncCtx19 + 8 | 0; //@line 7319
    HEAP32[$301 >> 2] = $10; //@line 7320
    $302 = $ReallocAsyncCtx19 + 12 | 0; //@line 7321
    HEAP32[$302 >> 2] = $12; //@line 7322
    $303 = $ReallocAsyncCtx19 + 16 | 0; //@line 7323
    HEAP32[$303 >> 2] = $14; //@line 7324
    $304 = $ReallocAsyncCtx19 + 20 | 0; //@line 7325
    HEAP32[$304 >> 2] = $16; //@line 7326
    sp = STACKTOP; //@line 7327
    STACKTOP = sp; //@line 7328
    return;
   }
   HEAP32[___async_retval >> 2] = $299; //@line 7331
   ___async_unwind = 0; //@line 7332
   HEAP32[$ReallocAsyncCtx19 >> 2] = 325; //@line 7333
   $300 = $ReallocAsyncCtx19 + 4 | 0; //@line 7334
   HEAP32[$300 >> 2] = $56; //@line 7335
   $301 = $ReallocAsyncCtx19 + 8 | 0; //@line 7336
   HEAP32[$301 >> 2] = $10; //@line 7337
   $302 = $ReallocAsyncCtx19 + 12 | 0; //@line 7338
   HEAP32[$302 >> 2] = $12; //@line 7339
   $303 = $ReallocAsyncCtx19 + 16 | 0; //@line 7340
   HEAP32[$303 >> 2] = $14; //@line 7341
   $304 = $ReallocAsyncCtx19 + 20 | 0; //@line 7342
   HEAP32[$304 >> 2] = $16; //@line 7343
   sp = STACKTOP; //@line 7344
   STACKTOP = sp; //@line 7345
   return;
  }
 }
 HEAP32[$64 >> 2] = 0; //@line 7348
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($8) | 0) + 8 >> 0] = $20; //@line 7351
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($8) | 0) + 11 >> 0] = ($22 & 255) >>> 4 & 1; //@line 7356
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($8) | 0) + 12 >> 2] = 0; //@line 7359
 HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($8) | 0) + 16 >> 1] = 0; //@line 7362
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($8) | 0) + 32 >> 2] = $2; //@line 7365
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($8) | 0) + 4 >> 2] = 0; //@line 7368
 HEAP32[$10 + 964 >> 2] = 0; //@line 7370
 $104 = $10 + 4 | 0; //@line 7371
 __ZN14LoRaMacCommand19clear_repeat_bufferEv($104); //@line 7372
 do {
  if ($20 << 24 >> 24 == 1) {
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($8) | 0) >> 2] = 2; //@line 7377
   $107 = $24 + 36 | 0; //@line 7378
   $108 = HEAP32[$107 >> 2] | 0; //@line 7379
   if (($108 | 0) != ($2 | 0) | ($108 | 0) == 0) {
    $$1$off0 = 0; //@line 7384
    $$sink = $107; //@line 7384
   } else {
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($8) | 0) + 4 >> 2] = 8; //@line 7388
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($8) | 0) + 32 >> 2] = $2; //@line 7391
    $115 = $10 + 968 | 0; //@line 7392
    HEAP32[$115 >> 2] = HEAP32[$115 >> 2] | 64; //@line 7395
    if (!(HEAP8[$10 + 373 >> 0] | 0)) {
     $130 = $10 + 944 | 0; //@line 7400
     HEAP8[$130 >> 0] = HEAP8[$130 >> 0] | 34; //@line 7403
     $133 = HEAP32[$12 >> 2] | 0; //@line 7404
     $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 7406
     __ZN18LoRaWANTimeHandler5startER13timer_event_tj($133, $10 + 996 | 0, 1); //@line 7407
     if (___async) {
      HEAP32[$ReallocAsyncCtx9 >> 2] = 316; //@line 7410
      $135 = $ReallocAsyncCtx9 + 4 | 0; //@line 7411
      HEAP32[$135 >> 2] = $14; //@line 7412
      $136 = $ReallocAsyncCtx9 + 8 | 0; //@line 7413
      HEAP32[$136 >> 2] = $16; //@line 7414
      sp = STACKTOP; //@line 7415
      STACKTOP = sp; //@line 7416
      return;
     }
     ___async_unwind = 0; //@line 7418
     HEAP32[$ReallocAsyncCtx9 >> 2] = 316; //@line 7419
     $135 = $ReallocAsyncCtx9 + 4 | 0; //@line 7420
     HEAP32[$135 >> 2] = $14; //@line 7421
     $136 = $ReallocAsyncCtx9 + 8 | 0; //@line 7422
     HEAP32[$136 >> 2] = $16; //@line 7423
     sp = STACKTOP; //@line 7424
     STACKTOP = sp; //@line 7425
     return;
    } else {
     $122 = HEAP32[$10 + 1328 >> 2] | 0; //@line 7428
     HEAP32[$30 >> 2] = 297; //@line 7429
     HEAP32[$30 + 4 >> 2] = 0; //@line 7431
     $ReallocAsyncCtx21 = _emscripten_realloc_async_context(24) | 0; //@line 7432
     HEAP32[$$byval_copy48 >> 2] = HEAP32[$30 >> 2]; //@line 7433
     HEAP32[$$byval_copy48 + 4 >> 2] = HEAP32[$30 + 4 >> 2]; //@line 7433
     $123 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($122, $10, $$byval_copy48) | 0; //@line 7434
     if (___async) {
      HEAP32[$ReallocAsyncCtx21 >> 2] = 314; //@line 7437
      $124 = $ReallocAsyncCtx21 + 4 | 0; //@line 7438
      HEAP32[$124 >> 2] = $30; //@line 7439
      $125 = $ReallocAsyncCtx21 + 8 | 0; //@line 7440
      HEAP32[$125 >> 2] = $10; //@line 7441
      $126 = $ReallocAsyncCtx21 + 12 | 0; //@line 7442
      HEAP32[$126 >> 2] = $12; //@line 7443
      $127 = $ReallocAsyncCtx21 + 16 | 0; //@line 7444
      HEAP32[$127 >> 2] = $14; //@line 7445
      $128 = $ReallocAsyncCtx21 + 20 | 0; //@line 7446
      HEAP32[$128 >> 2] = $16; //@line 7447
      sp = STACKTOP; //@line 7448
      STACKTOP = sp; //@line 7449
      return;
     }
     HEAP32[___async_retval >> 2] = $123; //@line 7452
     ___async_unwind = 0; //@line 7453
     HEAP32[$ReallocAsyncCtx21 >> 2] = 314; //@line 7454
     $124 = $ReallocAsyncCtx21 + 4 | 0; //@line 7455
     HEAP32[$124 >> 2] = $30; //@line 7456
     $125 = $ReallocAsyncCtx21 + 8 | 0; //@line 7457
     HEAP32[$125 >> 2] = $10; //@line 7458
     $126 = $ReallocAsyncCtx21 + 12 | 0; //@line 7459
     HEAP32[$126 >> 2] = $12; //@line 7460
     $127 = $ReallocAsyncCtx21 + 16 | 0; //@line 7461
     HEAP32[$127 >> 2] = $14; //@line 7462
     $128 = $ReallocAsyncCtx21 + 20 | 0; //@line 7463
     HEAP32[$128 >> 2] = $16; //@line 7464
     sp = STACKTOP; //@line 7465
     STACKTOP = sp; //@line 7466
     return;
    }
   }
  } else {
   $138 = $10 + 374 | 0; //@line 7471
   if ($32 << 24 >> 24 == 5) {
    HEAP8[$138 >> 0] = 1; //@line 7473
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($8) | 0) >> 2] = 1; //@line 7475
    $140 = $10 + 960 | 0; //@line 7476
    $141 = HEAP32[$140 >> 2] | 0; //@line 7477
    $$1$off0 = ($141 | 0) != 0 & ($141 | 0) == ($2 | 0); //@line 7481
    $$sink = $140; //@line 7481
    break;
   }
   HEAP8[$138 >> 0] = 0; //@line 7484
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($8) | 0) >> 2] = 0; //@line 7486
   $145 = $10 + 960 | 0; //@line 7487
   $146 = HEAP32[$145 >> 2] | 0; //@line 7488
   if (($146 | 0) != ($2 | 0) | ($146 | 0) == 0) {
    $$1$off0 = 0; //@line 7493
    $$sink = $145; //@line 7493
   } else {
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($8) | 0) + 4 >> 2] = 8; //@line 7497
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($8) | 0) + 32 >> 2] = $2; //@line 7500
    $153 = $10 + 968 | 0; //@line 7501
    HEAP32[$153 >> 2] = HEAP32[$153 >> 2] | 64; //@line 7504
    if (!(HEAP8[$10 + 373 >> 0] | 0)) {
     $168 = $10 + 944 | 0; //@line 7509
     HEAP8[$168 >> 0] = HEAP8[$168 >> 0] | 34; //@line 7512
     $171 = HEAP32[$12 >> 2] | 0; //@line 7513
     $ReallocAsyncCtx8 = _emscripten_realloc_async_context(12) | 0; //@line 7515
     __ZN18LoRaWANTimeHandler5startER13timer_event_tj($171, $10 + 996 | 0, 1); //@line 7516
     if (___async) {
      HEAP32[$ReallocAsyncCtx8 >> 2] = 319; //@line 7519
      $173 = $ReallocAsyncCtx8 + 4 | 0; //@line 7520
      HEAP32[$173 >> 2] = $14; //@line 7521
      $174 = $ReallocAsyncCtx8 + 8 | 0; //@line 7522
      HEAP32[$174 >> 2] = $16; //@line 7523
      sp = STACKTOP; //@line 7524
      STACKTOP = sp; //@line 7525
      return;
     }
     ___async_unwind = 0; //@line 7527
     HEAP32[$ReallocAsyncCtx8 >> 2] = 319; //@line 7528
     $173 = $ReallocAsyncCtx8 + 4 | 0; //@line 7529
     HEAP32[$173 >> 2] = $14; //@line 7530
     $174 = $ReallocAsyncCtx8 + 8 | 0; //@line 7531
     HEAP32[$174 >> 2] = $16; //@line 7532
     sp = STACKTOP; //@line 7533
     STACKTOP = sp; //@line 7534
     return;
    } else {
     $160 = HEAP32[$10 + 1328 >> 2] | 0; //@line 7537
     HEAP32[$34 >> 2] = 297; //@line 7538
     HEAP32[$34 + 4 >> 2] = 0; //@line 7540
     $ReallocAsyncCtx20 = _emscripten_realloc_async_context(24) | 0; //@line 7541
     HEAP32[$$byval_copy49 >> 2] = HEAP32[$34 >> 2]; //@line 7542
     HEAP32[$$byval_copy49 + 4 >> 2] = HEAP32[$34 + 4 >> 2]; //@line 7542
     $161 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($160, $10, $$byval_copy49) | 0; //@line 7543
     if (___async) {
      HEAP32[$ReallocAsyncCtx20 >> 2] = 317; //@line 7546
      $162 = $ReallocAsyncCtx20 + 4 | 0; //@line 7547
      HEAP32[$162 >> 2] = $34; //@line 7548
      $163 = $ReallocAsyncCtx20 + 8 | 0; //@line 7549
      HEAP32[$163 >> 2] = $10; //@line 7550
      $164 = $ReallocAsyncCtx20 + 12 | 0; //@line 7551
      HEAP32[$164 >> 2] = $12; //@line 7552
      $165 = $ReallocAsyncCtx20 + 16 | 0; //@line 7553
      HEAP32[$165 >> 2] = $14; //@line 7554
      $166 = $ReallocAsyncCtx20 + 20 | 0; //@line 7555
      HEAP32[$166 >> 2] = $16; //@line 7556
      sp = STACKTOP; //@line 7557
      STACKTOP = sp; //@line 7558
      return;
     }
     HEAP32[___async_retval >> 2] = $161; //@line 7561
     ___async_unwind = 0; //@line 7562
     HEAP32[$ReallocAsyncCtx20 >> 2] = 317; //@line 7563
     $162 = $ReallocAsyncCtx20 + 4 | 0; //@line 7564
     HEAP32[$162 >> 2] = $34; //@line 7565
     $163 = $ReallocAsyncCtx20 + 8 | 0; //@line 7566
     HEAP32[$163 >> 2] = $10; //@line 7567
     $164 = $ReallocAsyncCtx20 + 12 | 0; //@line 7568
     HEAP32[$164 >> 2] = $12; //@line 7569
     $165 = $ReallocAsyncCtx20 + 16 | 0; //@line 7570
     HEAP32[$165 >> 2] = $14; //@line 7571
     $166 = $ReallocAsyncCtx20 + 20 | 0; //@line 7572
     HEAP32[$166 >> 2] = $16; //@line 7573
     sp = STACKTOP; //@line 7574
     STACKTOP = sp; //@line 7575
     return;
    }
   }
  }
 } while (0);
 HEAP32[$$sink >> 2] = $2; //@line 7580
 if ((HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($8) | 0) >> 2] | 0) == 1) {
  if ($22 & 32) {
   __ZN14LoRaMacCommand20clear_command_bufferEv($104); //@line 7588
  }
 } else {
  __ZN14LoRaMacCommand20clear_command_bufferEv($104); //@line 7591
 }
 do {
  if (($42 | 0) > ($40 | 0)) {
   $181 = $36 + 9 | 0; //@line 7596
   $183 = HEAP8[$38 + $40 >> 0] | 0; //@line 7598
   $184 = $42 - $181 | 0; //@line 7599
   $185 = $184 & 255; //@line 7600
   HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($8) | 0) + 9 >> 0] = $183; //@line 7603
   $189 = $44 << 24 >> 24 == 0; //@line 7605
   if (!($183 << 24 >> 24)) {
    if (!$189) {
     $$3$off0226 = 6; //@line 7608
     break;
    }
    $193 = $10 + 638 | 0; //@line 7614
    if (__Z15decrypt_payloadPKhtS0_jhjPh($38 + $181 | 0, $184 & 255, $48, $50, 1, $2, $193) | 0) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($8) | 0) + 4 >> 2] = 13; //@line 7620
    }
    $198 = $10 + 264 | 0; //@line 7622
    $199 = __ZN11LoRaMacMlme16get_confirmationEv($198) | 0; //@line 7623
    $201 = HEAP32[$4 >> 2] | 0; //@line 7625
    $ReallocAsyncCtx17 = _emscripten_realloc_async_context(40) | 0; //@line 7626
    $202 = __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($104, $193, 0, $185, $46, $199, $10 + 1096 | 0, $201) | 0; //@line 7627
    if (___async) {
     HEAP32[$ReallocAsyncCtx17 >> 2] = 320; //@line 7630
     $203 = $ReallocAsyncCtx17 + 4 | 0; //@line 7631
     HEAP32[$203 >> 2] = $8; //@line 7632
     $204 = $ReallocAsyncCtx17 + 8 | 0; //@line 7633
     $$1$off0$expand_i1_val = $$1$off0 & 1; //@line 7634
     HEAP8[$204 >> 0] = $$1$off0$expand_i1_val; //@line 7635
     $205 = $ReallocAsyncCtx17 + 12 | 0; //@line 7636
     HEAP32[$205 >> 2] = $10; //@line 7637
     $206 = $ReallocAsyncCtx17 + 16 | 0; //@line 7638
     HEAP32[$206 >> 2] = $12; //@line 7639
     $207 = $ReallocAsyncCtx17 + 20 | 0; //@line 7640
     HEAP32[$207 >> 2] = $14; //@line 7641
     $208 = $ReallocAsyncCtx17 + 24 | 0; //@line 7642
     HEAP32[$208 >> 2] = $16; //@line 7643
     $209 = $ReallocAsyncCtx17 + 28 | 0; //@line 7644
     HEAP32[$209 >> 2] = $198; //@line 7645
     $210 = $ReallocAsyncCtx17 + 32 | 0; //@line 7646
     HEAP32[$210 >> 2] = $104; //@line 7647
     $211 = $ReallocAsyncCtx17 + 36 | 0; //@line 7648
     HEAP8[$211 >> 0] = $22; //@line 7649
     sp = STACKTOP; //@line 7650
     STACKTOP = sp; //@line 7651
     return;
    }
    HEAP32[___async_retval >> 2] = $202; //@line 7654
    ___async_unwind = 0; //@line 7655
    HEAP32[$ReallocAsyncCtx17 >> 2] = 320; //@line 7656
    $203 = $ReallocAsyncCtx17 + 4 | 0; //@line 7657
    HEAP32[$203 >> 2] = $8; //@line 7658
    $204 = $ReallocAsyncCtx17 + 8 | 0; //@line 7659
    $$1$off0$expand_i1_val = $$1$off0 & 1; //@line 7660
    HEAP8[$204 >> 0] = $$1$off0$expand_i1_val; //@line 7661
    $205 = $ReallocAsyncCtx17 + 12 | 0; //@line 7662
    HEAP32[$205 >> 2] = $10; //@line 7663
    $206 = $ReallocAsyncCtx17 + 16 | 0; //@line 7664
    HEAP32[$206 >> 2] = $12; //@line 7665
    $207 = $ReallocAsyncCtx17 + 20 | 0; //@line 7666
    HEAP32[$207 >> 2] = $14; //@line 7667
    $208 = $ReallocAsyncCtx17 + 24 | 0; //@line 7668
    HEAP32[$208 >> 2] = $16; //@line 7669
    $209 = $ReallocAsyncCtx17 + 28 | 0; //@line 7670
    HEAP32[$209 >> 2] = $198; //@line 7671
    $210 = $ReallocAsyncCtx17 + 32 | 0; //@line 7672
    HEAP32[$210 >> 2] = $104; //@line 7673
    $211 = $ReallocAsyncCtx17 + 36 | 0; //@line 7674
    HEAP8[$211 >> 0] = $22; //@line 7675
    sp = STACKTOP; //@line 7676
    STACKTOP = sp; //@line 7677
    return;
   }
   if ($189) {
    $236 = $184 & 255; //@line 7682
    $237 = $10 + 638 | 0; //@line 7683
    if (__Z15decrypt_payloadPKhtS0_jhjPh($38 + $181 | 0, $236, $54, $50, 1, $2, $237) | 0) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($8) | 0) + 4 >> 2] = 13; //@line 7689
    }
    if ($$1$off0) {
     $$3$off0226 = 6; //@line 7692
     break;
    }
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($8) | 0) + 12 >> 2] = $237; //@line 7697
    HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($8) | 0) + 16 >> 1] = $236; //@line 7700
    HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($8) | 0) + 18 >> 0] = 1; //@line 7703
    label = 56; //@line 7704
    break;
   } else {
    $213 = $10 + 264 | 0; //@line 7707
    $214 = __ZN11LoRaMacMlme16get_confirmationEv($213) | 0; //@line 7708
    $216 = HEAP32[$4 >> 2] | 0; //@line 7710
    $ReallocAsyncCtx16 = _emscripten_realloc_async_context(60) | 0; //@line 7711
    $217 = __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($104, $38, 8, $52, $46, $214, $10 + 1096 | 0, $216) | 0; //@line 7712
    if (___async) {
     HEAP32[$ReallocAsyncCtx16 >> 2] = 321; //@line 7715
     $218 = $ReallocAsyncCtx16 + 4 | 0; //@line 7716
     HEAP32[$218 >> 2] = $10; //@line 7717
     $219 = $ReallocAsyncCtx16 + 8 | 0; //@line 7718
     HEAP32[$219 >> 2] = $12; //@line 7719
     $220 = $ReallocAsyncCtx16 + 12 | 0; //@line 7720
     HEAP32[$220 >> 2] = $14; //@line 7721
     $221 = $ReallocAsyncCtx16 + 16 | 0; //@line 7722
     HEAP32[$221 >> 2] = $16; //@line 7723
     $222 = $ReallocAsyncCtx16 + 20 | 0; //@line 7724
     HEAP32[$222 >> 2] = $38; //@line 7725
     $223 = $ReallocAsyncCtx16 + 24 | 0; //@line 7726
     HEAP32[$223 >> 2] = $181; //@line 7727
     $224 = $ReallocAsyncCtx16 + 28 | 0; //@line 7728
     HEAP32[$224 >> 2] = $184; //@line 7729
     $225 = $ReallocAsyncCtx16 + 32 | 0; //@line 7730
     HEAP32[$225 >> 2] = $54; //@line 7731
     $226 = $ReallocAsyncCtx16 + 36 | 0; //@line 7732
     HEAP32[$226 >> 2] = $50; //@line 7733
     $227 = $ReallocAsyncCtx16 + 40 | 0; //@line 7734
     HEAP32[$227 >> 2] = $2; //@line 7735
     $228 = $ReallocAsyncCtx16 + 44 | 0; //@line 7736
     HEAP32[$228 >> 2] = $213; //@line 7737
     $229 = $ReallocAsyncCtx16 + 48 | 0; //@line 7738
     HEAP32[$229 >> 2] = $104; //@line 7739
     $230 = $ReallocAsyncCtx16 + 52 | 0; //@line 7740
     HEAP32[$230 >> 2] = $8; //@line 7741
     $231 = $ReallocAsyncCtx16 + 56 | 0; //@line 7742
     $$1$off0$expand_i1_val52 = $$1$off0 & 1; //@line 7743
     HEAP8[$231 >> 0] = $$1$off0$expand_i1_val52; //@line 7744
     $232 = $ReallocAsyncCtx16 + 57 | 0; //@line 7745
     HEAP8[$232 >> 0] = $22; //@line 7746
     sp = STACKTOP; //@line 7747
     STACKTOP = sp; //@line 7748
     return;
    }
    HEAP32[___async_retval >> 2] = $217; //@line 7751
    ___async_unwind = 0; //@line 7752
    HEAP32[$ReallocAsyncCtx16 >> 2] = 321; //@line 7753
    $218 = $ReallocAsyncCtx16 + 4 | 0; //@line 7754
    HEAP32[$218 >> 2] = $10; //@line 7755
    $219 = $ReallocAsyncCtx16 + 8 | 0; //@line 7756
    HEAP32[$219 >> 2] = $12; //@line 7757
    $220 = $ReallocAsyncCtx16 + 12 | 0; //@line 7758
    HEAP32[$220 >> 2] = $14; //@line 7759
    $221 = $ReallocAsyncCtx16 + 16 | 0; //@line 7760
    HEAP32[$221 >> 2] = $16; //@line 7761
    $222 = $ReallocAsyncCtx16 + 20 | 0; //@line 7762
    HEAP32[$222 >> 2] = $38; //@line 7763
    $223 = $ReallocAsyncCtx16 + 24 | 0; //@line 7764
    HEAP32[$223 >> 2] = $181; //@line 7765
    $224 = $ReallocAsyncCtx16 + 28 | 0; //@line 7766
    HEAP32[$224 >> 2] = $184; //@line 7767
    $225 = $ReallocAsyncCtx16 + 32 | 0; //@line 7768
    HEAP32[$225 >> 2] = $54; //@line 7769
    $226 = $ReallocAsyncCtx16 + 36 | 0; //@line 7770
    HEAP32[$226 >> 2] = $50; //@line 7771
    $227 = $ReallocAsyncCtx16 + 40 | 0; //@line 7772
    HEAP32[$227 >> 2] = $2; //@line 7773
    $228 = $ReallocAsyncCtx16 + 44 | 0; //@line 7774
    HEAP32[$228 >> 2] = $213; //@line 7775
    $229 = $ReallocAsyncCtx16 + 48 | 0; //@line 7776
    HEAP32[$229 >> 2] = $104; //@line 7777
    $230 = $ReallocAsyncCtx16 + 52 | 0; //@line 7778
    HEAP32[$230 >> 2] = $8; //@line 7779
    $231 = $ReallocAsyncCtx16 + 56 | 0; //@line 7780
    $$1$off0$expand_i1_val52 = $$1$off0 & 1; //@line 7781
    HEAP8[$231 >> 0] = $$1$off0$expand_i1_val52; //@line 7782
    $232 = $ReallocAsyncCtx16 + 57 | 0; //@line 7783
    HEAP8[$232 >> 0] = $22; //@line 7784
    sp = STACKTOP; //@line 7785
    STACKTOP = sp; //@line 7786
    return;
   }
  } else {
   if (!($44 << 24 >> 24)) {
    if ($$1$off0) {
     $$3$off0226 = 6; //@line 7792
     break;
    } else {
     label = 56; //@line 7795
     break;
    }
   }
   $249 = $10 + 264 | 0; //@line 7799
   $250 = __ZN11LoRaMacMlme16get_confirmationEv($249) | 0; //@line 7800
   $252 = HEAP32[$4 >> 2] | 0; //@line 7802
   $ReallocAsyncCtx15 = _emscripten_realloc_async_context(40) | 0; //@line 7803
   $253 = __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($104, $38, 8, $52, $46, $250, $10 + 1096 | 0, $252) | 0; //@line 7804
   if (___async) {
    HEAP32[$ReallocAsyncCtx15 >> 2] = 322; //@line 7807
    $254 = $ReallocAsyncCtx15 + 4 | 0; //@line 7808
    HEAP32[$254 >> 2] = $10; //@line 7809
    $255 = $ReallocAsyncCtx15 + 8 | 0; //@line 7810
    HEAP32[$255 >> 2] = $12; //@line 7811
    $256 = $ReallocAsyncCtx15 + 12 | 0; //@line 7812
    HEAP32[$256 >> 2] = $14; //@line 7813
    $257 = $ReallocAsyncCtx15 + 16 | 0; //@line 7814
    HEAP32[$257 >> 2] = $16; //@line 7815
    $258 = $ReallocAsyncCtx15 + 20 | 0; //@line 7816
    HEAP32[$258 >> 2] = $249; //@line 7817
    $259 = $ReallocAsyncCtx15 + 24 | 0; //@line 7818
    HEAP32[$259 >> 2] = $104; //@line 7819
    $260 = $ReallocAsyncCtx15 + 28 | 0; //@line 7820
    $$1$off0$expand_i1_val54 = $$1$off0 & 1; //@line 7821
    HEAP8[$260 >> 0] = $$1$off0$expand_i1_val54; //@line 7822
    $261 = $ReallocAsyncCtx15 + 32 | 0; //@line 7823
    HEAP32[$261 >> 2] = $8; //@line 7824
    $262 = $ReallocAsyncCtx15 + 36 | 0; //@line 7825
    HEAP8[$262 >> 0] = $22; //@line 7826
    sp = STACKTOP; //@line 7827
    STACKTOP = sp; //@line 7828
    return;
   }
   HEAP32[___async_retval >> 2] = $253; //@line 7831
   ___async_unwind = 0; //@line 7832
   HEAP32[$ReallocAsyncCtx15 >> 2] = 322; //@line 7833
   $254 = $ReallocAsyncCtx15 + 4 | 0; //@line 7834
   HEAP32[$254 >> 2] = $10; //@line 7835
   $255 = $ReallocAsyncCtx15 + 8 | 0; //@line 7836
   HEAP32[$255 >> 2] = $12; //@line 7837
   $256 = $ReallocAsyncCtx15 + 12 | 0; //@line 7838
   HEAP32[$256 >> 2] = $14; //@line 7839
   $257 = $ReallocAsyncCtx15 + 16 | 0; //@line 7840
   HEAP32[$257 >> 2] = $16; //@line 7841
   $258 = $ReallocAsyncCtx15 + 20 | 0; //@line 7842
   HEAP32[$258 >> 2] = $249; //@line 7843
   $259 = $ReallocAsyncCtx15 + 24 | 0; //@line 7844
   HEAP32[$259 >> 2] = $104; //@line 7845
   $260 = $ReallocAsyncCtx15 + 28 | 0; //@line 7846
   $$1$off0$expand_i1_val54 = $$1$off0 & 1; //@line 7847
   HEAP8[$260 >> 0] = $$1$off0$expand_i1_val54; //@line 7848
   $261 = $ReallocAsyncCtx15 + 32 | 0; //@line 7849
   HEAP32[$261 >> 2] = $8; //@line 7850
   $262 = $ReallocAsyncCtx15 + 36 | 0; //@line 7851
   HEAP8[$262 >> 0] = $22; //@line 7852
   sp = STACKTOP; //@line 7853
   STACKTOP = sp; //@line 7854
   return;
  }
 } while (0);
 if ((label | 0) == 56) {
  $267 = (__ZN11LoRaMacMcps16get_confirmationEv($8) | 0) + 10 | 0; //@line 7861
  if ($22 & 32) {
   HEAP8[$267 >> 0] = 1; //@line 7863
   HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($8) | 0) + 28 >> 0] = 1; //@line 7866
   $270 = HEAP32[$12 >> 2] | 0; //@line 7867
   $ReallocAsyncCtx27 = _emscripten_realloc_async_context(20) | 0; //@line 7869
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($270, $10 + 1076 | 0); //@line 7870
   if (___async) {
    HEAP32[$ReallocAsyncCtx27 >> 2] = 323; //@line 7873
    $272 = $ReallocAsyncCtx27 + 4 | 0; //@line 7874
    HEAP32[$272 >> 2] = $10; //@line 7875
    $273 = $ReallocAsyncCtx27 + 8 | 0; //@line 7876
    HEAP32[$273 >> 2] = $12; //@line 7877
    $274 = $ReallocAsyncCtx27 + 12 | 0; //@line 7878
    HEAP32[$274 >> 2] = $14; //@line 7879
    $275 = $ReallocAsyncCtx27 + 16 | 0; //@line 7880
    HEAP32[$275 >> 2] = $16; //@line 7881
    sp = STACKTOP; //@line 7882
    STACKTOP = sp; //@line 7883
    return;
   }
   ___async_unwind = 0; //@line 7885
   HEAP32[$ReallocAsyncCtx27 >> 2] = 323; //@line 7886
   $272 = $ReallocAsyncCtx27 + 4 | 0; //@line 7887
   HEAP32[$272 >> 2] = $10; //@line 7888
   $273 = $ReallocAsyncCtx27 + 8 | 0; //@line 7889
   HEAP32[$273 >> 2] = $12; //@line 7890
   $274 = $ReallocAsyncCtx27 + 12 | 0; //@line 7891
   HEAP32[$274 >> 2] = $14; //@line 7892
   $275 = $ReallocAsyncCtx27 + 16 | 0; //@line 7893
   HEAP32[$275 >> 2] = $16; //@line 7894
   sp = STACKTOP; //@line 7895
   STACKTOP = sp; //@line 7896
   return;
  }
  HEAP8[$267 >> 0] = 0; //@line 7898
  if ((HEAPU8[$10 + 895 >> 0] | 0) > (HEAPU8[$10 + 894 >> 0] | 0)) {
   $281 = HEAP32[$12 >> 2] | 0; //@line 7905
   $ReallocAsyncCtx26 = _emscripten_realloc_async_context(20) | 0; //@line 7907
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($281, $10 + 1076 | 0); //@line 7908
   if (___async) {
    HEAP32[$ReallocAsyncCtx26 >> 2] = 324; //@line 7911
    $283 = $ReallocAsyncCtx26 + 4 | 0; //@line 7912
    HEAP32[$283 >> 2] = $10; //@line 7913
    $284 = $ReallocAsyncCtx26 + 8 | 0; //@line 7914
    HEAP32[$284 >> 2] = $12; //@line 7915
    $285 = $ReallocAsyncCtx26 + 12 | 0; //@line 7916
    HEAP32[$285 >> 2] = $14; //@line 7917
    $286 = $ReallocAsyncCtx26 + 16 | 0; //@line 7918
    HEAP32[$286 >> 2] = $16; //@line 7919
    sp = STACKTOP; //@line 7920
    STACKTOP = sp; //@line 7921
    return;
   }
   ___async_unwind = 0; //@line 7923
   HEAP32[$ReallocAsyncCtx26 >> 2] = 324; //@line 7924
   $283 = $ReallocAsyncCtx26 + 4 | 0; //@line 7925
   HEAP32[$283 >> 2] = $10; //@line 7926
   $284 = $ReallocAsyncCtx26 + 8 | 0; //@line 7927
   HEAP32[$284 >> 2] = $12; //@line 7928
   $285 = $ReallocAsyncCtx26 + 12 | 0; //@line 7929
   HEAP32[$285 >> 2] = $14; //@line 7930
   $286 = $ReallocAsyncCtx26 + 16 | 0; //@line 7931
   HEAP32[$286 >> 2] = $16; //@line 7932
   sp = STACKTOP; //@line 7933
   STACKTOP = sp; //@line 7934
   return;
  } else {
   $$3$off0226 = 2; //@line 7936
  }
 }
 $287 = $10 + 944 | 0; //@line 7939
 HEAP8[$287 >> 0] = $$3$off0226 | HEAP8[$287 >> 0] & -7; //@line 7943
 $313 = $10 + 944 | 0; //@line 7944
 HEAP8[$313 >> 0] = HEAP8[$313 >> 0] | 32; //@line 7947
 $316 = HEAP32[$12 >> 2] | 0; //@line 7948
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 7950
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($316, $10 + 996 | 0, 1); //@line 7951
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 331; //@line 7954
  $318 = $ReallocAsyncCtx5 + 4 | 0; //@line 7955
  HEAP32[$318 >> 2] = $14; //@line 7956
  $319 = $ReallocAsyncCtx5 + 8 | 0; //@line 7957
  HEAP32[$319 >> 2] = $16; //@line 7958
  sp = STACKTOP; //@line 7959
  STACKTOP = sp; //@line 7960
  return;
 }
 ___async_unwind = 0; //@line 7962
 HEAP32[$ReallocAsyncCtx5 >> 2] = 331; //@line 7963
 $318 = $ReallocAsyncCtx5 + 4 | 0; //@line 7964
 HEAP32[$318 >> 2] = $14; //@line 7965
 $319 = $ReallocAsyncCtx5 + 8 | 0; //@line 7966
 HEAP32[$319 >> 2] = $16; //@line 7967
 sp = STACKTOP; //@line 7968
 STACKTOP = sp; //@line 7969
 return;
}
function __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$0$be = 0, $$0$i = 0, $$0$i104 = 0, $$0$i108 = 0, $$0$i98 = 0, $$0116 = 0, $$095113 = 0, $$096$be = 0, $$096$lcssa = 0, $$096115 = 0, $$1$lcssa = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $147 = 0, $15 = 0, $151 = 0, $156 = 0, $157 = 0, $16 = 0, $160 = 0, $166 = 0, $169 = 0, $17 = 0, $174 = 0, $18 = 0, $182 = 0, $19 = 0, $20 = 0, $201 = 0, $21 = 0, $211 = 0, $212 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $286 = 0, $287 = 0, $29 = 0, $298 = 0, $299 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $336 = 0, $34 = 0, $342 = 0, $343 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $412 = 0, $413 = 0, $42 = 0, $423 = 0, $427 = 0, $43 = 0, $431 = 0, $434 = 0, $44 = 0, $440 = 0, $443 = 0, $444 = 0, $45 = 0, $453 = 0, $454 = 0, $46 = 0, $47 = 0, $49 = 0, $531 = 0, $553 = 0, $563 = 0, $564 = 0, $60 = 0, $61 = 0, $633 = 0, $643 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, $div = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 17347
 STACKTOP = STACKTOP + 32 | 0; //@line 17348
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 17348
 $8 = sp + 12 | 0; //@line 17349
 $9 = sp; //@line 17350
 $10 = sp + 26 | 0; //@line 17351
 $11 = sp + 25 | 0; //@line 17352
 $12 = sp + 24 | 0; //@line 17353
 $13 = $3 & 255; //@line 17354
 if (($2 & 255) >= ($3 & 255)) {
  $$096$lcssa = 0; //@line 17357
  STACKTOP = sp; //@line 17358
  return $$096$lcssa | 0; //@line 17358
 }
 $15 = $5 + 4 | 0; //@line 17360
 $16 = $5 + 12 | 0; //@line 17361
 $17 = $5 + 13 | 0; //@line 17362
 $18 = $8 + 4 | 0; //@line 17363
 $19 = $6 + 60 | 0; //@line 17364
 $20 = $8 + 6 | 0; //@line 17365
 $21 = $6 + 44 | 0; //@line 17366
 $22 = $8 + 5 | 0; //@line 17367
 $23 = $6 + 1 | 0; //@line 17368
 $24 = $8 + 7 | 0; //@line 17369
 $25 = $8 + 8 | 0; //@line 17370
 $26 = $6 + 32 | 0; //@line 17371
 $27 = $8 + 9 | 0; //@line 17372
 $28 = $0 + 3 | 0; //@line 17373
 $29 = $0 + 2 | 0; //@line 17374
 $30 = $6 + 56 | 0; //@line 17375
 $31 = $6 + 58 | 0; //@line 17376
 $32 = $8 + 1 | 0; //@line 17377
 $33 = $8 + 4 | 0; //@line 17378
 $34 = $6 + 40 | 0; //@line 17379
 $35 = $6 + 36 | 0; //@line 17380
 $36 = $6 + 33 | 0; //@line 17381
 $37 = $0 + 1 | 0; //@line 17382
 $38 = $8 + 4 | 0; //@line 17383
 $39 = $9 + 4 | 0; //@line 17384
 $40 = $9 + 8 | 0; //@line 17385
 $41 = $6 + 16 | 0; //@line 17386
 $42 = $6 + 20 | 0; //@line 17387
 $43 = $8 + 1 | 0; //@line 17388
 $44 = $8 + 2 | 0; //@line 17389
 $45 = $6 + 45 | 0; //@line 17390
 $46 = $6 + 48 | 0; //@line 17391
 $47 = $8 + 4 | 0; //@line 17392
 $$0116 = $2; //@line 17393
 $$096115 = 0; //@line 17393
 L4 : while (1) {
  $49 = $$0116 + 1 << 24 >> 24; //@line 17396
  switch (HEAP8[$1 + ($$0116 & 255) >> 0] | 0) {
  case 2:
   {
    HEAP32[$15 >> 2] = 0; //@line 17401
    HEAP8[$16 >> 0] = HEAP8[$1 + ($49 & 255) >> 0] | 0; //@line 17406
    HEAP8[$17 >> 0] = HEAP8[$1 + ($$0116 + 2 & 255) >> 0] | 0; //@line 17411
    $$0$be = $$0116 + 3 << 24 >> 24; //@line 17412
    $$096$be = $$096115; //@line 17412
    break;
   }
  case 3:
   {
    HEAP8[$9 >> 0] = 0; //@line 17416
    HEAP8[$10 >> 0] = 0; //@line 17417
    HEAP8[$11 >> 0] = 0; //@line 17418
    HEAP8[$12 >> 0] = 0; //@line 17419
    $60 = $49 & 255; //@line 17420
    $61 = $60 + -1 | 0; //@line 17421
    HEAP32[$8 >> 2] = $1 + $61; //@line 17423
    HEAP8[$18 >> 0] = $13 - $61; //@line 17426
    HEAP8[$20 >> 0] = HEAP8[$19 >> 0] | 0; //@line 17428
    HEAP8[$22 >> 0] = HEAP8[$21 >> 0] | 0; //@line 17430
    HEAP8[$24 >> 0] = HEAP8[$23 >> 0] | 0; //@line 17432
    HEAP8[$25 >> 0] = HEAP8[$6 >> 0] | 0; //@line 17434
    HEAP8[$27 >> 0] = HEAP8[$26 >> 0] | 0; //@line 17436
    $72 = HEAP32[(HEAP32[$7 >> 2] | 0) + 36 >> 2] | 0; //@line 17439
    $AsyncCtx = _emscripten_alloc_async_context(272, sp) | 0; //@line 17440
    $73 = FUNCTION_TABLE_iiiiiii[$72 & 3]($7, $8, $9, $10, $11, $12) | 0; //@line 17441
    if (___async) {
     label = 6; //@line 17444
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 17447
    if (($73 & 7) == 7) {
     HEAP8[$23 >> 0] = HEAP8[$9 >> 0] | 0; //@line 17452
     HEAP8[$6 >> 0] = HEAP8[$10 >> 0] | 0; //@line 17454
     HEAP8[$26 >> 0] = HEAP8[$11 >> 0] | 0; //@line 17456
    }
    $147 = HEAP8[$12 >> 0] | 0; //@line 17458
    if (($147 & 255) > 4) {
     $div = ($147 & 255) / 5 | 0; //@line 17461
     $151 = (-128 - (HEAP8[$28 >> 0] | 0) & 255) + -1 | 0; //@line 17466
     $$095113 = 0; //@line 17467
     $157 = HEAP8[$29 >> 0] | 0; //@line 17467
     while (1) {
      $156 = $157 & 255; //@line 17469
      if (($151 | 0) > ($156 | 0)) {
       $160 = $157 + 2 << 24 >> 24; //@line 17473
       HEAP8[$0 + 4 + $156 >> 0] = 3; //@line 17477
       HEAP8[$29 >> 0] = $160; //@line 17478
       HEAP8[($157 + 1 & 255) + ($0 + 4) >> 0] = $73; //@line 17479
       HEAP8[$0 >> 0] = 1; //@line 17480
       $$0$i = 0; //@line 17481
       $643 = $160; //@line 17481
      } else {
       $$0$i = -1e3; //@line 17483
       $643 = $157; //@line 17483
      }
      $$095113 = $$095113 + 1 << 24 >> 24; //@line 17485
      if (($$095113 & 255) >= ($div & 255)) {
       $$1$lcssa = $$0$i; //@line 17490
       break;
      } else {
       $157 = $643; //@line 17488
      }
     }
    } else {
     $$1$lcssa = $$096115; //@line 17495
    }
    $$0$be = $60 + 255 + ($147 & 255) & 255; //@line 17501
    $$096$be = $$1$lcssa; //@line 17501
    break;
   }
  case 4:
   {
    $166 = $$0116 + 2 << 24 >> 24; //@line 17505
    $169 = HEAP8[$1 + ($49 & 255) >> 0] | 0; //@line 17508
    HEAP8[$30 >> 0] = $169; //@line 17509
    HEAP16[$31 >> 1] = 1 << ($169 & 255); //@line 17513
    $174 = HEAP8[$29 >> 0] | 0; //@line 17515
    if (($174 & 255) < (-128 - (HEAP8[$28 >> 0] | 0) & 255)) {
     HEAP8[$29 >> 0] = $174 + 1 << 24 >> 24; //@line 17522
     HEAP8[($174 & 255) + ($0 + 4) >> 0] = 4; //@line 17523
     HEAP8[$0 >> 0] = 1; //@line 17524
     $$0$be = $166; //@line 17525
     $$096$be = 0; //@line 17525
    } else {
     $$0$be = $166; //@line 17527
     $$096$be = -1e3; //@line 17527
    }
    break;
   }
  case 5:
   {
    $182 = HEAP8[$1 + ($49 & 255) >> 0] | 0; //@line 17534
    HEAP8[$32 >> 0] = ($182 & 255) >>> 4 & 7; //@line 17539
    HEAP8[$8 >> 0] = $182 & 15; //@line 17541
    $201 = $$0116 + 5 << 24 >> 24; //@line 17555
    HEAP32[$33 >> 2] = (HEAPU8[$1 + ($$0116 + 4 & 255) >> 0] << 16 | (HEAPU8[$1 + ($$0116 + 3 & 255) >> 0] << 8 | HEAPU8[$1 + ($$0116 + 2 & 255) >> 0])) * 100; //@line 17563
    $211 = HEAP32[(HEAP32[$7 >> 2] | 0) + 40 >> 2] | 0; //@line 17566
    $AsyncCtx3 = _emscripten_alloc_async_context(268, sp) | 0; //@line 17567
    $212 = FUNCTION_TABLE_iii[$211 & 31]($7, $8) | 0; //@line 17568
    if (___async) {
     label = 18; //@line 17571
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 17574
    if (($212 & 7) == 7) {
     HEAP8[$34 >> 0] = HEAP8[$8 >> 0] | 0; //@line 17579
     HEAP32[$35 >> 2] = HEAP32[$33 >> 2]; //@line 17581
     HEAP8[$36 >> 0] = HEAP8[$32 >> 0] | 0; //@line 17583
    }
    $286 = HEAP8[$29 >> 0] | 0; //@line 17586
    $287 = $286 & 255; //@line 17587
    if (((-128 - (HEAP8[$28 >> 0] | 0) & 255) + -1 | 0) > ($287 | 0)) {
     HEAP8[$0 + 4 + $287 >> 0] = 5; //@line 17595
     HEAP8[$29 >> 0] = $286 + 2 << 24 >> 24; //@line 17597
     HEAP8[($286 + 1 & 255) + ($0 + 4) >> 0] = $212; //@line 17600
     HEAP8[$37 >> 0] = 1; //@line 17601
     HEAP8[$0 >> 0] = 1; //@line 17602
     $$0$i104 = 0; //@line 17603
    } else {
     $$0$i104 = -1e3; //@line 17605
    }
    $$0$be = $201; //@line 17607
    $$096$be = $$0$i104; //@line 17607
    break;
   }
  case 6:
   {
    $298 = HEAP8[$29 >> 0] | 0; //@line 17612
    $299 = $298 & 255; //@line 17613
    if (((-128 - (HEAP8[$28 >> 0] | 0) & 255) + -2 | 0) > ($299 | 0)) {
     HEAP8[$0 + 4 + $299 >> 0] = 6; //@line 17621
     HEAP8[($298 + 1 & 255) + ($0 + 4) >> 0] = -1; //@line 17625
     HEAP8[$29 >> 0] = $298 + 3 << 24 >> 24; //@line 17627
     HEAP8[($298 + 2 & 255) + ($0 + 4) >> 0] = $4; //@line 17630
     HEAP8[$0 >> 0] = 1; //@line 17631
     $$0$be = $49; //@line 17632
     $$096$be = 0; //@line 17632
    } else {
     $$0$be = $49; //@line 17634
     $$096$be = -1e3; //@line 17634
    }
    break;
   }
  case 7:
   {
    HEAP8[$38 >> 0] = HEAP8[$1 + ($49 & 255) >> 0] | 0; //@line 17643
    HEAP32[$8 >> 2] = $9; //@line 17644
    HEAP32[$9 >> 2] = (HEAPU8[$1 + ($$0116 + 4 & 255) >> 0] << 16 | (HEAPU8[$1 + ($$0116 + 3 & 255) >> 0] << 8 | HEAPU8[$1 + ($$0116 + 2 & 255) >> 0])) * 100; //@line 17665
    HEAP32[$39 >> 2] = 0; //@line 17666
    $336 = $$0116 + 6 << 24 >> 24; //@line 17667
    HEAP8[$40 >> 0] = HEAP8[$1 + ($$0116 + 5 & 255) >> 0] | 0; //@line 17671
    $342 = HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0; //@line 17674
    $AsyncCtx7 = _emscripten_alloc_async_context(268, sp) | 0; //@line 17675
    $343 = FUNCTION_TABLE_iii[$342 & 31]($7, $8) | 0; //@line 17676
    if (___async) {
     label = 27; //@line 17679
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 17682
    $412 = HEAP8[$29 >> 0] | 0; //@line 17684
    $413 = $412 & 255; //@line 17685
    if (((-128 - (HEAP8[$28 >> 0] | 0) & 255) + -1 | 0) > ($413 | 0)) {
     HEAP8[$0 + 4 + $413 >> 0] = 7; //@line 17696
     HEAP8[$29 >> 0] = $412 + 2 << 24 >> 24; //@line 17697
     HEAP8[($412 + 1 & 255) + ($0 + 4) >> 0] = $343; //@line 17698
     HEAP8[$0 >> 0] = 1; //@line 17699
     $$0$i108 = 0; //@line 17700
    } else {
     $$0$i108 = -1e3; //@line 17702
    }
    $$0$be = $336; //@line 17704
    $$096$be = $$0$i108; //@line 17704
    break;
   }
  case 8:
   {
    $423 = $$0116 + 2 << 24 >> 24; //@line 17708
    $427 = HEAP8[$1 + ($49 & 255) >> 0] & 15; //@line 17712
    $431 = ($427 + ($427 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 17717
    HEAP32[$41 >> 2] = $431; //@line 17718
    HEAP32[$42 >> 2] = $431 + 1e3; //@line 17720
    $434 = HEAP8[$29 >> 0] | 0; //@line 17722
    if (($434 & 255) < (-128 - (HEAP8[$28 >> 0] | 0) & 255)) {
     HEAP8[$29 >> 0] = $434 + 1 << 24 >> 24; //@line 17729
     HEAP8[($434 & 255) + ($0 + 4) >> 0] = 8; //@line 17730
     HEAP8[$37 >> 0] = 1; //@line 17731
     HEAP8[$0 >> 0] = 1; //@line 17732
     $$0$be = $423; //@line 17733
     $$096$be = 0; //@line 17733
    } else {
     $$0$be = $423; //@line 17735
     $$096$be = -1e3; //@line 17735
    }
    break;
   }
  case 9:
   {
    $440 = $$0116 + 2 << 24 >> 24; //@line 17740
    $443 = HEAP8[$1 + ($49 & 255) >> 0] | 0; //@line 17743
    HEAP8[$8 >> 0] = 0; //@line 17744
    $444 = $443 & 255; //@line 17745
    HEAP8[$43 >> 0] = $444 >>> 5 & 1; //@line 17749
    if ($444 & 16 | 0) {
     HEAP8[$8 >> 0] = 1; //@line 17753
    }
    HEAP8[$44 >> 0] = $444 & 15; //@line 17757
    $453 = HEAP32[(HEAP32[$7 >> 2] | 0) + 44 >> 2] | 0; //@line 17760
    $AsyncCtx11 = _emscripten_alloc_async_context(272, sp) | 0; //@line 17761
    $454 = FUNCTION_TABLE_iii[$453 & 31]($7, $8) | 0; //@line 17762
    if (___async) {
     label = 36; //@line 17765
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 17768
    if ($454) {
     HEAP8[$21 >> 0] = HEAP8[$8 >> 0] | 0; //@line 17771
     HEAP8[$45 >> 0] = HEAP8[$43 >> 0] | 0; //@line 17773
     HEAPF32[$46 >> 2] = +(HEAPU8[12385 + (HEAPU8[$44 >> 0] | 0) >> 0] | 0); //@line 17779
     $531 = HEAP8[$29 >> 0] | 0; //@line 17781
     if (($531 & 255) < (-128 - (HEAP8[$28 >> 0] | 0) & 255)) {
      HEAP8[$29 >> 0] = $531 + 1 << 24 >> 24; //@line 17788
      HEAP8[($531 & 255) + ($0 + 4) >> 0] = 9; //@line 17789
      HEAP8[$0 >> 0] = 1; //@line 17790
      $$2 = 0; //@line 17791
     } else {
      $$2 = -1e3; //@line 17793
     }
    } else {
     $$2 = $$096115; //@line 17796
    }
    $$0$be = $440; //@line 17798
    $$096$be = $$2; //@line 17798
    break;
   }
  case 10:
   {
    HEAP8[$8 >> 0] = HEAP8[$1 + ($49 & 255) >> 0] | 0; //@line 17806
    $553 = $$0116 + 5 << 24 >> 24; //@line 17819
    HEAP32[$47 >> 2] = (HEAPU8[$1 + ($$0116 + 4 & 255) >> 0] << 16 | (HEAPU8[$1 + ($$0116 + 3 & 255) >> 0] << 8 | HEAPU8[$1 + ($$0116 + 2 & 255) >> 0])) * 100; //@line 17827
    $563 = HEAP32[(HEAP32[$7 >> 2] | 0) + 48 >> 2] | 0; //@line 17830
    $AsyncCtx15 = _emscripten_alloc_async_context(268, sp) | 0; //@line 17831
    $564 = FUNCTION_TABLE_iii[$563 & 31]($7, $8) | 0; //@line 17832
    if (___async) {
     label = 42; //@line 17835
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 17838
    $633 = HEAP8[$29 >> 0] | 0; //@line 17840
    if (($633 & 255) < (-128 - (HEAP8[$28 >> 0] | 0) & 255)) {
     HEAP8[($633 & 255) + ($0 + 4) >> 0] = 10; //@line 17847
     HEAP8[$29 >> 0] = $633 + 2 << 24 >> 24; //@line 17849
     HEAP8[($633 + 1 & 255) + ($0 + 4) >> 0] = $564; //@line 17852
     HEAP8[$37 >> 0] = 1; //@line 17853
     HEAP8[$0 >> 0] = 1; //@line 17854
     $$0$i98 = 0; //@line 17855
    } else {
     $$0$i98 = -1e3; //@line 17857
    }
    $$0$be = $553; //@line 17859
    $$096$be = $$0$i98; //@line 17859
    break;
   }
  default:
   {
    $$0$be = $49; //@line 17863
    $$096$be = -1013; //@line 17863
   }
  }
  if (($$0$be & 255) < ($3 & 255)) {
   $$0116 = $$0$be; //@line 17868
   $$096115 = $$096$be; //@line 17868
  } else {
   $$096$lcssa = $$096$be; //@line 17870
   label = 47; //@line 17871
   break;
  }
 }
 if ((label | 0) == 6) {
  HEAP32[$AsyncCtx >> 2] = 487; //@line 17876
  HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 17878
  HEAP32[$AsyncCtx + 8 >> 2] = $19; //@line 17880
  HEAP32[$AsyncCtx + 12 >> 2] = $31; //@line 17882
  HEAP32[$AsyncCtx + 16 >> 2] = $20; //@line 17884
  HEAP32[$AsyncCtx + 20 >> 2] = $18; //@line 17886
  HEAP32[$AsyncCtx + 24 >> 2] = $40; //@line 17888
  HEAP32[$AsyncCtx + 28 >> 2] = $8; //@line 17890
  HEAP32[$AsyncCtx + 32 >> 2] = $8; //@line 17892
  HEAP32[$AsyncCtx + 36 >> 2] = $8; //@line 17894
  HEAP32[$AsyncCtx + 40 >> 2] = $21; //@line 17896
  HEAP32[$AsyncCtx + 44 >> 2] = $9; //@line 17898
  HEAP32[$AsyncCtx + 48 >> 2] = $42; //@line 17900
  HEAP32[$AsyncCtx + 52 >> 2] = $8; //@line 17902
  HEAP32[$AsyncCtx + 56 >> 2] = $32; //@line 17904
  HEAP32[$AsyncCtx + 60 >> 2] = $33; //@line 17906
  HEAP32[$AsyncCtx + 64 >> 2] = $22; //@line 17908
  HEAP32[$AsyncCtx + 68 >> 2] = $8; //@line 17910
  HEAP32[$AsyncCtx + 72 >> 2] = $41; //@line 17912
  HEAP32[$AsyncCtx + 76 >> 2] = $17; //@line 17914
  HEAP32[$AsyncCtx + 80 >> 2] = $8; //@line 17916
  HEAP32[$AsyncCtx + 84 >> 2] = $43; //@line 17918
  HEAP32[$AsyncCtx + 88 >> 2] = $23; //@line 17920
  HEAP32[$AsyncCtx + 92 >> 2] = $12; //@line 17922
  HEAP32[$AsyncCtx + 96 >> 2] = $7; //@line 17924
  HEAP32[$AsyncCtx + 100 >> 2] = $34; //@line 17926
  HEAP32[$AsyncCtx + 104 >> 2] = $24; //@line 17928
  HEAP32[$AsyncCtx + 108 >> 2] = $16; //@line 17930
  HEAP32[$AsyncCtx + 112 >> 2] = $8; //@line 17932
  HEAP32[$AsyncCtx + 116 >> 2] = $8; //@line 17934
  HEAP32[$AsyncCtx + 120 >> 2] = $60; //@line 17936
  HEAP32[$AsyncCtx + 124 >> 2] = $15; //@line 17938
  HEAP32[$AsyncCtx + 128 >> 2] = $10; //@line 17940
  HEAP32[$AsyncCtx + 132 >> 2] = $7; //@line 17942
  HEAP32[$AsyncCtx + 136 >> 2] = $6; //@line 17944
  HEAP32[$AsyncCtx + 140 >> 2] = $35; //@line 17946
  HEAP32[$AsyncCtx + 144 >> 2] = $25; //@line 17948
  HEAP32[$AsyncCtx + 148 >> 2] = $11; //@line 17950
  HEAP32[$AsyncCtx + 152 >> 2] = $44; //@line 17952
  HEAP32[$AsyncCtx + 156 >> 2] = $46; //@line 17954
  HEAP32[$AsyncCtx + 160 >> 2] = $26; //@line 17956
  HEAP32[$AsyncCtx + 164 >> 2] = $36; //@line 17958
  HEAP32[$AsyncCtx + 168 >> 2] = $45; //@line 17960
  HEAP32[$AsyncCtx + 172 >> 2] = $8; //@line 17962
  HEAP32[$AsyncCtx + 176 >> 2] = $13; //@line 17964
  HEAP32[$AsyncCtx + 180 >> 2] = $27; //@line 17966
  HEAP32[$AsyncCtx + 184 >> 2] = $0; //@line 17968
  HEAP32[$AsyncCtx + 188 >> 2] = $37; //@line 17970
  HEAP32[$AsyncCtx + 192 >> 2] = $9; //@line 17972
  HEAP32[$AsyncCtx + 196 >> 2] = $7; //@line 17974
  HEAP32[$AsyncCtx + 200 >> 2] = $47; //@line 17976
  HEAP32[$AsyncCtx + 204 >> 2] = $38; //@line 17978
  HEAP32[$AsyncCtx + 208 >> 2] = $8; //@line 17980
  HEAP32[$AsyncCtx + 212 >> 2] = $28; //@line 17982
  HEAP32[$AsyncCtx + 216 >> 2] = $8; //@line 17984
  HEAP32[$AsyncCtx + 220 >> 2] = $29; //@line 17986
  HEAP32[$AsyncCtx + 224 >> 2] = $7; //@line 17988
  HEAP32[$AsyncCtx + 228 >> 2] = $9; //@line 17990
  HEAP32[$AsyncCtx + 232 >> 2] = $0; //@line 17992
  HEAP32[$AsyncCtx + 236 >> 2] = $39; //@line 17994
  HEAP32[$AsyncCtx + 240 >> 2] = $1; //@line 17996
  HEAP32[$AsyncCtx + 244 >> 2] = $8; //@line 17998
  HEAP8[$AsyncCtx + 248 >> 0] = $2; //@line 18000
  HEAP8[$AsyncCtx + 249 >> 0] = $3; //@line 18002
  HEAP32[$AsyncCtx + 252 >> 2] = $9; //@line 18004
  HEAP8[$AsyncCtx + 256 >> 0] = $4; //@line 18006
  HEAP32[$AsyncCtx + 260 >> 2] = $30; //@line 18008
  HEAP32[$AsyncCtx + 264 >> 2] = $$096115; //@line 18010
  HEAP32[$AsyncCtx + 268 >> 2] = $7; //@line 18012
  sp = STACKTOP; //@line 18013
  STACKTOP = sp; //@line 18014
  return 0; //@line 18014
 } else if ((label | 0) == 18) {
  HEAP32[$AsyncCtx3 >> 2] = 488; //@line 18017
  HEAP32[$AsyncCtx3 + 4 >> 2] = $7; //@line 18019
  HEAP32[$AsyncCtx3 + 8 >> 2] = $19; //@line 18021
  HEAP32[$AsyncCtx3 + 12 >> 2] = $31; //@line 18023
  HEAP32[$AsyncCtx3 + 16 >> 2] = $20; //@line 18025
  HEAP32[$AsyncCtx3 + 20 >> 2] = $18; //@line 18027
  HEAP32[$AsyncCtx3 + 24 >> 2] = $40; //@line 18029
  HEAP32[$AsyncCtx3 + 28 >> 2] = $8; //@line 18031
  HEAP32[$AsyncCtx3 + 32 >> 2] = $8; //@line 18033
  HEAP32[$AsyncCtx3 + 36 >> 2] = $8; //@line 18035
  HEAP32[$AsyncCtx3 + 40 >> 2] = $21; //@line 18037
  HEAP32[$AsyncCtx3 + 44 >> 2] = $9; //@line 18039
  HEAP32[$AsyncCtx3 + 48 >> 2] = $42; //@line 18041
  HEAP32[$AsyncCtx3 + 52 >> 2] = $8; //@line 18043
  HEAP32[$AsyncCtx3 + 56 >> 2] = $32; //@line 18045
  HEAP32[$AsyncCtx3 + 60 >> 2] = $33; //@line 18047
  HEAP32[$AsyncCtx3 + 64 >> 2] = $22; //@line 18049
  HEAP32[$AsyncCtx3 + 68 >> 2] = $8; //@line 18051
  HEAP32[$AsyncCtx3 + 72 >> 2] = $41; //@line 18053
  HEAP32[$AsyncCtx3 + 76 >> 2] = $17; //@line 18055
  HEAP32[$AsyncCtx3 + 80 >> 2] = $8; //@line 18057
  HEAP32[$AsyncCtx3 + 84 >> 2] = $43; //@line 18059
  HEAP32[$AsyncCtx3 + 88 >> 2] = $23; //@line 18061
  HEAP32[$AsyncCtx3 + 92 >> 2] = $12; //@line 18063
  HEAP8[$AsyncCtx3 + 96 >> 0] = $201; //@line 18065
  HEAP32[$AsyncCtx3 + 100 >> 2] = $34; //@line 18067
  HEAP32[$AsyncCtx3 + 104 >> 2] = $24; //@line 18069
  HEAP32[$AsyncCtx3 + 108 >> 2] = $16; //@line 18071
  HEAP32[$AsyncCtx3 + 112 >> 2] = $8; //@line 18073
  HEAP32[$AsyncCtx3 + 116 >> 2] = $7; //@line 18075
  HEAP32[$AsyncCtx3 + 120 >> 2] = $8; //@line 18077
  HEAP32[$AsyncCtx3 + 124 >> 2] = $15; //@line 18079
  HEAP32[$AsyncCtx3 + 128 >> 2] = $10; //@line 18081
  HEAP32[$AsyncCtx3 + 132 >> 2] = $7; //@line 18083
  HEAP32[$AsyncCtx3 + 136 >> 2] = $6; //@line 18085
  HEAP32[$AsyncCtx3 + 140 >> 2] = $35; //@line 18087
  HEAP32[$AsyncCtx3 + 144 >> 2] = $25; //@line 18089
  HEAP32[$AsyncCtx3 + 148 >> 2] = $11; //@line 18091
  HEAP32[$AsyncCtx3 + 152 >> 2] = $44; //@line 18093
  HEAP32[$AsyncCtx3 + 156 >> 2] = $46; //@line 18095
  HEAP32[$AsyncCtx3 + 160 >> 2] = $26; //@line 18097
  HEAP32[$AsyncCtx3 + 164 >> 2] = $36; //@line 18099
  HEAP32[$AsyncCtx3 + 168 >> 2] = $45; //@line 18101
  HEAP32[$AsyncCtx3 + 172 >> 2] = $8; //@line 18103
  HEAP32[$AsyncCtx3 + 176 >> 2] = $13; //@line 18105
  HEAP32[$AsyncCtx3 + 180 >> 2] = $27; //@line 18107
  HEAP32[$AsyncCtx3 + 184 >> 2] = $0; //@line 18109
  HEAP32[$AsyncCtx3 + 188 >> 2] = $37; //@line 18111
  HEAP32[$AsyncCtx3 + 192 >> 2] = $9; //@line 18113
  HEAP32[$AsyncCtx3 + 196 >> 2] = $7; //@line 18115
  HEAP32[$AsyncCtx3 + 200 >> 2] = $47; //@line 18117
  HEAP32[$AsyncCtx3 + 204 >> 2] = $38; //@line 18119
  HEAP32[$AsyncCtx3 + 208 >> 2] = $8; //@line 18121
  HEAP32[$AsyncCtx3 + 212 >> 2] = $28; //@line 18123
  HEAP32[$AsyncCtx3 + 216 >> 2] = $8; //@line 18125
  HEAP32[$AsyncCtx3 + 220 >> 2] = $29; //@line 18127
  HEAP32[$AsyncCtx3 + 224 >> 2] = $7; //@line 18129
  HEAP32[$AsyncCtx3 + 228 >> 2] = $9; //@line 18131
  HEAP32[$AsyncCtx3 + 232 >> 2] = $0; //@line 18133
  HEAP32[$AsyncCtx3 + 236 >> 2] = $39; //@line 18135
  HEAP32[$AsyncCtx3 + 240 >> 2] = $1; //@line 18137
  HEAP32[$AsyncCtx3 + 244 >> 2] = $8; //@line 18139
  HEAP8[$AsyncCtx3 + 248 >> 0] = $2; //@line 18141
  HEAP8[$AsyncCtx3 + 249 >> 0] = $3; //@line 18143
  HEAP32[$AsyncCtx3 + 252 >> 2] = $9; //@line 18145
  HEAP8[$AsyncCtx3 + 256 >> 0] = $4; //@line 18147
  HEAP32[$AsyncCtx3 + 260 >> 2] = $30; //@line 18149
  HEAP32[$AsyncCtx3 + 264 >> 2] = $7; //@line 18151
  sp = STACKTOP; //@line 18152
  STACKTOP = sp; //@line 18153
  return 0; //@line 18153
 } else if ((label | 0) == 27) {
  HEAP32[$AsyncCtx7 >> 2] = 489; //@line 18156
  HEAP32[$AsyncCtx7 + 4 >> 2] = $7; //@line 18158
  HEAP32[$AsyncCtx7 + 8 >> 2] = $19; //@line 18160
  HEAP32[$AsyncCtx7 + 12 >> 2] = $31; //@line 18162
  HEAP32[$AsyncCtx7 + 16 >> 2] = $20; //@line 18164
  HEAP32[$AsyncCtx7 + 20 >> 2] = $18; //@line 18166
  HEAP32[$AsyncCtx7 + 24 >> 2] = $40; //@line 18168
  HEAP32[$AsyncCtx7 + 28 >> 2] = $8; //@line 18170
  HEAP32[$AsyncCtx7 + 32 >> 2] = $8; //@line 18172
  HEAP32[$AsyncCtx7 + 36 >> 2] = $8; //@line 18174
  HEAP32[$AsyncCtx7 + 40 >> 2] = $21; //@line 18176
  HEAP32[$AsyncCtx7 + 44 >> 2] = $9; //@line 18178
  HEAP32[$AsyncCtx7 + 48 >> 2] = $42; //@line 18180
  HEAP32[$AsyncCtx7 + 52 >> 2] = $8; //@line 18182
  HEAP32[$AsyncCtx7 + 56 >> 2] = $32; //@line 18184
  HEAP32[$AsyncCtx7 + 60 >> 2] = $33; //@line 18186
  HEAP32[$AsyncCtx7 + 64 >> 2] = $22; //@line 18188
  HEAP32[$AsyncCtx7 + 68 >> 2] = $8; //@line 18190
  HEAP32[$AsyncCtx7 + 72 >> 2] = $41; //@line 18192
  HEAP32[$AsyncCtx7 + 76 >> 2] = $17; //@line 18194
  HEAP32[$AsyncCtx7 + 80 >> 2] = $8; //@line 18196
  HEAP32[$AsyncCtx7 + 84 >> 2] = $43; //@line 18198
  HEAP32[$AsyncCtx7 + 88 >> 2] = $23; //@line 18200
  HEAP32[$AsyncCtx7 + 92 >> 2] = $12; //@line 18202
  HEAP32[$AsyncCtx7 + 96 >> 2] = $7; //@line 18204
  HEAP32[$AsyncCtx7 + 100 >> 2] = $34; //@line 18206
  HEAP32[$AsyncCtx7 + 104 >> 2] = $24; //@line 18208
  HEAP32[$AsyncCtx7 + 108 >> 2] = $16; //@line 18210
  HEAP32[$AsyncCtx7 + 112 >> 2] = $8; //@line 18212
  HEAP8[$AsyncCtx7 + 116 >> 0] = $336; //@line 18214
  HEAP32[$AsyncCtx7 + 120 >> 2] = $8; //@line 18216
  HEAP32[$AsyncCtx7 + 124 >> 2] = $15; //@line 18218
  HEAP32[$AsyncCtx7 + 128 >> 2] = $10; //@line 18220
  HEAP32[$AsyncCtx7 + 132 >> 2] = $7; //@line 18222
  HEAP32[$AsyncCtx7 + 136 >> 2] = $6; //@line 18224
  HEAP32[$AsyncCtx7 + 140 >> 2] = $35; //@line 18226
  HEAP32[$AsyncCtx7 + 144 >> 2] = $25; //@line 18228
  HEAP32[$AsyncCtx7 + 148 >> 2] = $11; //@line 18230
  HEAP32[$AsyncCtx7 + 152 >> 2] = $44; //@line 18232
  HEAP32[$AsyncCtx7 + 156 >> 2] = $46; //@line 18234
  HEAP32[$AsyncCtx7 + 160 >> 2] = $26; //@line 18236
  HEAP32[$AsyncCtx7 + 164 >> 2] = $36; //@line 18238
  HEAP32[$AsyncCtx7 + 168 >> 2] = $45; //@line 18240
  HEAP32[$AsyncCtx7 + 172 >> 2] = $8; //@line 18242
  HEAP32[$AsyncCtx7 + 176 >> 2] = $13; //@line 18244
  HEAP32[$AsyncCtx7 + 180 >> 2] = $27; //@line 18246
  HEAP32[$AsyncCtx7 + 184 >> 2] = $0; //@line 18248
  HEAP32[$AsyncCtx7 + 188 >> 2] = $37; //@line 18250
  HEAP32[$AsyncCtx7 + 192 >> 2] = $9; //@line 18252
  HEAP32[$AsyncCtx7 + 196 >> 2] = $7; //@line 18254
  HEAP32[$AsyncCtx7 + 200 >> 2] = $47; //@line 18256
  HEAP32[$AsyncCtx7 + 204 >> 2] = $38; //@line 18258
  HEAP32[$AsyncCtx7 + 208 >> 2] = $8; //@line 18260
  HEAP32[$AsyncCtx7 + 212 >> 2] = $28; //@line 18262
  HEAP32[$AsyncCtx7 + 216 >> 2] = $8; //@line 18264
  HEAP32[$AsyncCtx7 + 220 >> 2] = $29; //@line 18266
  HEAP32[$AsyncCtx7 + 224 >> 2] = $7; //@line 18268
  HEAP32[$AsyncCtx7 + 228 >> 2] = $9; //@line 18270
  HEAP32[$AsyncCtx7 + 232 >> 2] = $0; //@line 18272
  HEAP32[$AsyncCtx7 + 236 >> 2] = $39; //@line 18274
  HEAP32[$AsyncCtx7 + 240 >> 2] = $1; //@line 18276
  HEAP32[$AsyncCtx7 + 244 >> 2] = $8; //@line 18278
  HEAP8[$AsyncCtx7 + 248 >> 0] = $2; //@line 18280
  HEAP8[$AsyncCtx7 + 249 >> 0] = $3; //@line 18282
  HEAP32[$AsyncCtx7 + 252 >> 2] = $9; //@line 18284
  HEAP8[$AsyncCtx7 + 256 >> 0] = $4; //@line 18286
  HEAP32[$AsyncCtx7 + 260 >> 2] = $30; //@line 18288
  HEAP32[$AsyncCtx7 + 264 >> 2] = $7; //@line 18290
  sp = STACKTOP; //@line 18291
  STACKTOP = sp; //@line 18292
  return 0; //@line 18292
 } else if ((label | 0) == 36) {
  HEAP32[$AsyncCtx11 >> 2] = 490; //@line 18295
  HEAP32[$AsyncCtx11 + 4 >> 2] = $7; //@line 18297
  HEAP32[$AsyncCtx11 + 8 >> 2] = $19; //@line 18299
  HEAP32[$AsyncCtx11 + 12 >> 2] = $31; //@line 18301
  HEAP32[$AsyncCtx11 + 16 >> 2] = $20; //@line 18303
  HEAP32[$AsyncCtx11 + 20 >> 2] = $18; //@line 18305
  HEAP32[$AsyncCtx11 + 24 >> 2] = $40; //@line 18307
  HEAP32[$AsyncCtx11 + 28 >> 2] = $8; //@line 18309
  HEAP32[$AsyncCtx11 + 32 >> 2] = $8; //@line 18311
  HEAP32[$AsyncCtx11 + 36 >> 2] = $8; //@line 18313
  HEAP32[$AsyncCtx11 + 40 >> 2] = $21; //@line 18315
  HEAP32[$AsyncCtx11 + 44 >> 2] = $9; //@line 18317
  HEAP32[$AsyncCtx11 + 48 >> 2] = $42; //@line 18319
  HEAP32[$AsyncCtx11 + 52 >> 2] = $8; //@line 18321
  HEAP32[$AsyncCtx11 + 56 >> 2] = $32; //@line 18323
  HEAP32[$AsyncCtx11 + 60 >> 2] = $33; //@line 18325
  HEAP32[$AsyncCtx11 + 64 >> 2] = $22; //@line 18327
  HEAP32[$AsyncCtx11 + 68 >> 2] = $8; //@line 18329
  HEAP32[$AsyncCtx11 + 72 >> 2] = $41; //@line 18331
  HEAP32[$AsyncCtx11 + 76 >> 2] = $17; //@line 18333
  HEAP32[$AsyncCtx11 + 80 >> 2] = $8; //@line 18335
  HEAP32[$AsyncCtx11 + 84 >> 2] = $43; //@line 18337
  HEAP32[$AsyncCtx11 + 88 >> 2] = $23; //@line 18339
  HEAP32[$AsyncCtx11 + 92 >> 2] = $12; //@line 18341
  HEAP32[$AsyncCtx11 + 96 >> 2] = $7; //@line 18343
  HEAP32[$AsyncCtx11 + 100 >> 2] = $34; //@line 18345
  HEAP32[$AsyncCtx11 + 104 >> 2] = $24; //@line 18347
  HEAP32[$AsyncCtx11 + 108 >> 2] = $16; //@line 18349
  HEAP32[$AsyncCtx11 + 112 >> 2] = $8; //@line 18351
  HEAP32[$AsyncCtx11 + 116 >> 2] = $8; //@line 18353
  HEAP32[$AsyncCtx11 + 120 >> 2] = $15; //@line 18355
  HEAP32[$AsyncCtx11 + 124 >> 2] = $10; //@line 18357
  HEAP32[$AsyncCtx11 + 128 >> 2] = $7; //@line 18359
  HEAP32[$AsyncCtx11 + 132 >> 2] = $6; //@line 18361
  HEAP32[$AsyncCtx11 + 136 >> 2] = $35; //@line 18363
  HEAP32[$AsyncCtx11 + 140 >> 2] = $25; //@line 18365
  HEAP32[$AsyncCtx11 + 144 >> 2] = $11; //@line 18367
  HEAP32[$AsyncCtx11 + 148 >> 2] = $44; //@line 18369
  HEAP32[$AsyncCtx11 + 152 >> 2] = $46; //@line 18371
  HEAP32[$AsyncCtx11 + 156 >> 2] = $26; //@line 18373
  HEAP32[$AsyncCtx11 + 160 >> 2] = $36; //@line 18375
  HEAP8[$AsyncCtx11 + 164 >> 0] = $440; //@line 18377
  HEAP32[$AsyncCtx11 + 168 >> 2] = $45; //@line 18379
  HEAP32[$AsyncCtx11 + 172 >> 2] = $8; //@line 18381
  HEAP32[$AsyncCtx11 + 176 >> 2] = $13; //@line 18383
  HEAP32[$AsyncCtx11 + 180 >> 2] = $27; //@line 18385
  HEAP32[$AsyncCtx11 + 184 >> 2] = $0; //@line 18387
  HEAP32[$AsyncCtx11 + 188 >> 2] = $37; //@line 18389
  HEAP32[$AsyncCtx11 + 192 >> 2] = $9; //@line 18391
  HEAP32[$AsyncCtx11 + 196 >> 2] = $7; //@line 18393
  HEAP32[$AsyncCtx11 + 200 >> 2] = $47; //@line 18395
  HEAP32[$AsyncCtx11 + 204 >> 2] = $38; //@line 18397
  HEAP32[$AsyncCtx11 + 208 >> 2] = $8; //@line 18399
  HEAP32[$AsyncCtx11 + 212 >> 2] = $28; //@line 18401
  HEAP32[$AsyncCtx11 + 216 >> 2] = $8; //@line 18403
  HEAP32[$AsyncCtx11 + 220 >> 2] = $29; //@line 18405
  HEAP32[$AsyncCtx11 + 224 >> 2] = $7; //@line 18407
  HEAP32[$AsyncCtx11 + 228 >> 2] = $9; //@line 18409
  HEAP32[$AsyncCtx11 + 232 >> 2] = $0; //@line 18411
  HEAP32[$AsyncCtx11 + 236 >> 2] = $39; //@line 18413
  HEAP32[$AsyncCtx11 + 240 >> 2] = $1; //@line 18415
  HEAP32[$AsyncCtx11 + 244 >> 2] = $8; //@line 18417
  HEAP8[$AsyncCtx11 + 248 >> 0] = $2; //@line 18419
  HEAP8[$AsyncCtx11 + 249 >> 0] = $3; //@line 18421
  HEAP32[$AsyncCtx11 + 252 >> 2] = $9; //@line 18423
  HEAP8[$AsyncCtx11 + 256 >> 0] = $4; //@line 18425
  HEAP32[$AsyncCtx11 + 260 >> 2] = $30; //@line 18427
  HEAP32[$AsyncCtx11 + 264 >> 2] = $$096115; //@line 18429
  HEAP32[$AsyncCtx11 + 268 >> 2] = $7; //@line 18431
  sp = STACKTOP; //@line 18432
  STACKTOP = sp; //@line 18433
  return 0; //@line 18433
 } else if ((label | 0) == 42) {
  HEAP32[$AsyncCtx15 >> 2] = 491; //@line 18436
  HEAP32[$AsyncCtx15 + 4 >> 2] = $7; //@line 18438
  HEAP32[$AsyncCtx15 + 8 >> 2] = $19; //@line 18440
  HEAP32[$AsyncCtx15 + 12 >> 2] = $31; //@line 18442
  HEAP32[$AsyncCtx15 + 16 >> 2] = $20; //@line 18444
  HEAP8[$AsyncCtx15 + 20 >> 0] = $553; //@line 18446
  HEAP32[$AsyncCtx15 + 24 >> 2] = $18; //@line 18448
  HEAP32[$AsyncCtx15 + 28 >> 2] = $40; //@line 18450
  HEAP32[$AsyncCtx15 + 32 >> 2] = $8; //@line 18452
  HEAP32[$AsyncCtx15 + 36 >> 2] = $8; //@line 18454
  HEAP32[$AsyncCtx15 + 40 >> 2] = $8; //@line 18456
  HEAP32[$AsyncCtx15 + 44 >> 2] = $21; //@line 18458
  HEAP32[$AsyncCtx15 + 48 >> 2] = $9; //@line 18460
  HEAP32[$AsyncCtx15 + 52 >> 2] = $42; //@line 18462
  HEAP32[$AsyncCtx15 + 56 >> 2] = $8; //@line 18464
  HEAP32[$AsyncCtx15 + 60 >> 2] = $32; //@line 18466
  HEAP32[$AsyncCtx15 + 64 >> 2] = $33; //@line 18468
  HEAP32[$AsyncCtx15 + 68 >> 2] = $22; //@line 18470
  HEAP32[$AsyncCtx15 + 72 >> 2] = $8; //@line 18472
  HEAP32[$AsyncCtx15 + 76 >> 2] = $41; //@line 18474
  HEAP32[$AsyncCtx15 + 80 >> 2] = $17; //@line 18476
  HEAP32[$AsyncCtx15 + 84 >> 2] = $8; //@line 18478
  HEAP32[$AsyncCtx15 + 88 >> 2] = $43; //@line 18480
  HEAP32[$AsyncCtx15 + 92 >> 2] = $23; //@line 18482
  HEAP32[$AsyncCtx15 + 96 >> 2] = $12; //@line 18484
  HEAP32[$AsyncCtx15 + 100 >> 2] = $7; //@line 18486
  HEAP32[$AsyncCtx15 + 104 >> 2] = $34; //@line 18488
  HEAP32[$AsyncCtx15 + 108 >> 2] = $24; //@line 18490
  HEAP32[$AsyncCtx15 + 112 >> 2] = $16; //@line 18492
  HEAP32[$AsyncCtx15 + 116 >> 2] = $8; //@line 18494
  HEAP32[$AsyncCtx15 + 120 >> 2] = $8; //@line 18496
  HEAP32[$AsyncCtx15 + 124 >> 2] = $15; //@line 18498
  HEAP32[$AsyncCtx15 + 128 >> 2] = $10; //@line 18500
  HEAP32[$AsyncCtx15 + 132 >> 2] = $7; //@line 18502
  HEAP32[$AsyncCtx15 + 136 >> 2] = $6; //@line 18504
  HEAP32[$AsyncCtx15 + 140 >> 2] = $35; //@line 18506
  HEAP32[$AsyncCtx15 + 144 >> 2] = $25; //@line 18508
  HEAP32[$AsyncCtx15 + 148 >> 2] = $11; //@line 18510
  HEAP32[$AsyncCtx15 + 152 >> 2] = $44; //@line 18512
  HEAP32[$AsyncCtx15 + 156 >> 2] = $46; //@line 18514
  HEAP32[$AsyncCtx15 + 160 >> 2] = $26; //@line 18516
  HEAP32[$AsyncCtx15 + 164 >> 2] = $36; //@line 18518
  HEAP32[$AsyncCtx15 + 168 >> 2] = $45; //@line 18520
  HEAP32[$AsyncCtx15 + 172 >> 2] = $8; //@line 18522
  HEAP32[$AsyncCtx15 + 176 >> 2] = $13; //@line 18524
  HEAP32[$AsyncCtx15 + 180 >> 2] = $27; //@line 18526
  HEAP32[$AsyncCtx15 + 184 >> 2] = $0; //@line 18528
  HEAP32[$AsyncCtx15 + 188 >> 2] = $37; //@line 18530
  HEAP32[$AsyncCtx15 + 192 >> 2] = $9; //@line 18532
  HEAP32[$AsyncCtx15 + 196 >> 2] = $7; //@line 18534
  HEAP32[$AsyncCtx15 + 200 >> 2] = $47; //@line 18536
  HEAP32[$AsyncCtx15 + 204 >> 2] = $38; //@line 18538
  HEAP32[$AsyncCtx15 + 208 >> 2] = $8; //@line 18540
  HEAP32[$AsyncCtx15 + 212 >> 2] = $28; //@line 18542
  HEAP32[$AsyncCtx15 + 216 >> 2] = $8; //@line 18544
  HEAP32[$AsyncCtx15 + 220 >> 2] = $29; //@line 18546
  HEAP32[$AsyncCtx15 + 224 >> 2] = $7; //@line 18548
  HEAP32[$AsyncCtx15 + 228 >> 2] = $9; //@line 18550
  HEAP32[$AsyncCtx15 + 232 >> 2] = $0; //@line 18552
  HEAP32[$AsyncCtx15 + 236 >> 2] = $39; //@line 18554
  HEAP32[$AsyncCtx15 + 240 >> 2] = $1; //@line 18556
  HEAP32[$AsyncCtx15 + 244 >> 2] = $8; //@line 18558
  HEAP8[$AsyncCtx15 + 248 >> 0] = $2; //@line 18560
  HEAP8[$AsyncCtx15 + 249 >> 0] = $3; //@line 18562
  HEAP32[$AsyncCtx15 + 252 >> 2] = $9; //@line 18564
  HEAP8[$AsyncCtx15 + 256 >> 0] = $4; //@line 18566
  HEAP32[$AsyncCtx15 + 260 >> 2] = $30; //@line 18568
  HEAP32[$AsyncCtx15 + 264 >> 2] = $7; //@line 18570
  sp = STACKTOP; //@line 18571
  STACKTOP = sp; //@line 18572
  return 0; //@line 18572
 } else if ((label | 0) == 47) {
  STACKTOP = sp; //@line 18575
  return $$096$lcssa | 0; //@line 18575
 }
 return 0; //@line 18577
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_93($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $$byval_copy22 = 0, $$byval_copy23 = 0, $$pre20 = 0, $10 = 0, $100 = 0, $106 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $127 = 0, $13 = 0, $138 = 0, $14 = 0, $142 = 0, $146 = 0, $151 = 0, $157 = 0, $158 = 0, $163 = 0, $167 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $180 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $195 = 0, $197 = 0, $198 = 0, $2 = 0, $203 = 0, $205 = 0, $206 = 0, $207 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $223 = 0, $224 = 0, $226 = 0, $227 = 0, $228 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $254 = 0, $259 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $268 = 0, $269 = 0, $271 = 0, $272 = 0, $273 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $285 = 0, $289 = 0, $290 = 0, $292 = 0, $293 = 0, $294 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $37 = 0, $4 = 0, $45 = 0, $48 = 0, $53 = 0, $57 = 0, $58 = 0, $6 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $89 = 0, $94 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 25077
 STACKTOP = STACKTOP + 32 | 0; //@line 25078
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 25078
 $$byval_copy23 = sp + 16 | 0; //@line 25079
 $$byval_copy22 = sp + 8 | 0; //@line 25080
 $$byval_copy = sp; //@line 25081
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25083
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25085
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25087
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25089
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25091
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25093
 $13 = $2 + 944 | 0; //@line 25094
 $14 = HEAP8[$13 >> 0] | 0; //@line 25095
 $$pre20 = $2 + 968 | 0; //@line 25098
 if ($14 & 32) {
  $17 = HEAP32[$$pre20 >> 2] | 0; //@line 25100
  if ($17 & 64 | 0) {
   HEAP32[$$pre20 >> 2] = $17 & -66; //@line 25105
  }
  do {
   if (!($14 & 9)) {
    label = 9; //@line 25111
   } else {
    $23 = $2 + 288 | 0; //@line 25113
    if ((HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($23) | 0) + 4 >> 2] | 0) != 2) {
     if ((HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) + 4 >> 2] | 0) != 2) {
      label = 9; //@line 25125
      break;
     }
    }
    HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 25131
    __ZN14LoRaMacCommand20clear_command_bufferEv($2 + 4 | 0); //@line 25133
    $37 = HEAP8[$2 + 895 >> 0] | 0; //@line 25135
    HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($23) | 0) + 11 >> 0] = $37; //@line 25138
    HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($23) | 0) + 10 >> 0] = 0; //@line 25141
    HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($23) | 0) + 12 >> 2] = 0; //@line 25144
    $138 = $2 + 373 | 0; //@line 25146
   }
  } while (0);
  do {
   if ((label | 0) == 9) {
    $45 = $2 + 373 | 0; //@line 25151
    if (!(HEAP8[$45 >> 0] | 0)) {
     $48 = HEAP8[$13 >> 0] | 0; //@line 25155
     if (!($48 & 9)) {
      $138 = $45; //@line 25159
     } else {
      if ($48 & 8) {
       $53 = $2 + 264 | 0; //@line 25164
       if (!(HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($53) | 0) >> 2] | 0)) {
        $57 = $2 + 897 | 0; //@line 25169
        $58 = HEAP8[$57 >> 0] | 0; //@line 25170
        HEAP8[(__ZN11LoRaMacMlme16get_confirmationEv($53) | 0) + 14 >> 0] = $58; //@line 25173
        if (!(HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($53) | 0) + 4 >> 2] | 0)) {
         HEAP32[$2 + 956 >> 2] = 0; //@line 25180
         HEAP8[$2 + 380 >> 0] = 0; //@line 25182
         HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 25185
         $138 = $45; //@line 25186
         break;
        }
        if ((HEAPU8[$57 >> 0] | 0) >= (HEAPU8[$2 + 896 >> 0] | 0)) {
         HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 25196
         $138 = $45; //@line 25197
         break;
        }
        HEAP8[$13 >> 0] = HEAP8[$13 >> 0] & -33; //@line 25202
        $78 = HEAP32[$2 + 1328 >> 2] | 0; //@line 25204
        HEAP32[$12 >> 2] = 369; //@line 25205
        HEAP32[$12 + 4 >> 2] = 0; //@line 25207
        $ReallocAsyncCtx10 = _emscripten_realloc_async_context(36) | 0; //@line 25208
        HEAP32[$$byval_copy >> 2] = HEAP32[$12 >> 2]; //@line 25209
        HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$12 + 4 >> 2]; //@line 25209
        $79 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($78, $2, $$byval_copy) | 0; //@line 25210
        if (___async) {
         HEAP32[$ReallocAsyncCtx10 >> 2] = 370; //@line 25213
         $80 = $ReallocAsyncCtx10 + 4 | 0; //@line 25214
         HEAP32[$80 >> 2] = $13; //@line 25215
         $81 = $ReallocAsyncCtx10 + 8 | 0; //@line 25216
         HEAP32[$81 >> 2] = $2; //@line 25217
         $82 = $ReallocAsyncCtx10 + 12 | 0; //@line 25218
         HEAP32[$82 >> 2] = $4; //@line 25219
         $83 = $ReallocAsyncCtx10 + 16 | 0; //@line 25220
         HEAP32[$83 >> 2] = $$pre20; //@line 25221
         $84 = $ReallocAsyncCtx10 + 20 | 0; //@line 25222
         HEAP32[$84 >> 2] = $8; //@line 25223
         $85 = $ReallocAsyncCtx10 + 24 | 0; //@line 25224
         HEAP32[$85 >> 2] = $10; //@line 25225
         $86 = $ReallocAsyncCtx10 + 28 | 0; //@line 25226
         HEAP32[$86 >> 2] = $45; //@line 25227
         $87 = $ReallocAsyncCtx10 + 32 | 0; //@line 25228
         HEAP32[$87 >> 2] = $12; //@line 25229
         sp = STACKTOP; //@line 25230
         STACKTOP = sp; //@line 25231
         return;
        }
        HEAP32[___async_retval >> 2] = $79; //@line 25234
        ___async_unwind = 0; //@line 25235
        HEAP32[$ReallocAsyncCtx10 >> 2] = 370; //@line 25236
        $80 = $ReallocAsyncCtx10 + 4 | 0; //@line 25237
        HEAP32[$80 >> 2] = $13; //@line 25238
        $81 = $ReallocAsyncCtx10 + 8 | 0; //@line 25239
        HEAP32[$81 >> 2] = $2; //@line 25240
        $82 = $ReallocAsyncCtx10 + 12 | 0; //@line 25241
        HEAP32[$82 >> 2] = $4; //@line 25242
        $83 = $ReallocAsyncCtx10 + 16 | 0; //@line 25243
        HEAP32[$83 >> 2] = $$pre20; //@line 25244
        $84 = $ReallocAsyncCtx10 + 20 | 0; //@line 25245
        HEAP32[$84 >> 2] = $8; //@line 25246
        $85 = $ReallocAsyncCtx10 + 24 | 0; //@line 25247
        HEAP32[$85 >> 2] = $10; //@line 25248
        $86 = $ReallocAsyncCtx10 + 28 | 0; //@line 25249
        HEAP32[$86 >> 2] = $45; //@line 25250
        $87 = $ReallocAsyncCtx10 + 32 | 0; //@line 25251
        HEAP32[$87 >> 2] = $12; //@line 25252
        sp = STACKTOP; //@line 25253
        STACKTOP = sp; //@line 25254
        return;
       }
      }
      $89 = $2 + 380 | 0; //@line 25257
      $94 = HEAP8[$13 >> 0] | 0; //@line 25262
      if (($94 & 2) == 0 ? (HEAPU8[$89 >> 0] | 0) < (HEAPU8[$2 + 1128 >> 0] | 0) : 0) {
       HEAP8[$13 >> 0] = $94 & -33; //@line 25268
       $113 = HEAP32[$2 + 1328 >> 2] | 0; //@line 25270
       HEAP32[$6 >> 2] = 369; //@line 25271
       HEAP32[$6 + 4 >> 2] = 0; //@line 25273
       $ReallocAsyncCtx9 = _emscripten_realloc_async_context(36) | 0; //@line 25274
       HEAP32[$$byval_copy22 >> 2] = HEAP32[$6 >> 2]; //@line 25275
       HEAP32[$$byval_copy22 + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 25275
       $114 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($113, $2, $$byval_copy22) | 0; //@line 25276
       if (___async) {
        HEAP32[$ReallocAsyncCtx9 >> 2] = 372; //@line 25279
        $115 = $ReallocAsyncCtx9 + 4 | 0; //@line 25280
        HEAP32[$115 >> 2] = $13; //@line 25281
        $116 = $ReallocAsyncCtx9 + 8 | 0; //@line 25282
        HEAP32[$116 >> 2] = $2; //@line 25283
        $117 = $ReallocAsyncCtx9 + 12 | 0; //@line 25284
        HEAP32[$117 >> 2] = $4; //@line 25285
        $118 = $ReallocAsyncCtx9 + 16 | 0; //@line 25286
        HEAP32[$118 >> 2] = $$pre20; //@line 25287
        $119 = $ReallocAsyncCtx9 + 20 | 0; //@line 25288
        HEAP32[$119 >> 2] = $6; //@line 25289
        $120 = $ReallocAsyncCtx9 + 24 | 0; //@line 25290
        HEAP32[$120 >> 2] = $8; //@line 25291
        $121 = $ReallocAsyncCtx9 + 28 | 0; //@line 25292
        HEAP32[$121 >> 2] = $10; //@line 25293
        $122 = $ReallocAsyncCtx9 + 32 | 0; //@line 25294
        HEAP32[$122 >> 2] = $45; //@line 25295
        sp = STACKTOP; //@line 25296
        STACKTOP = sp; //@line 25297
        return;
       }
       HEAP32[___async_retval >> 2] = $114; //@line 25300
       ___async_unwind = 0; //@line 25301
       HEAP32[$ReallocAsyncCtx9 >> 2] = 372; //@line 25302
       $115 = $ReallocAsyncCtx9 + 4 | 0; //@line 25303
       HEAP32[$115 >> 2] = $13; //@line 25304
       $116 = $ReallocAsyncCtx9 + 8 | 0; //@line 25305
       HEAP32[$116 >> 2] = $2; //@line 25306
       $117 = $ReallocAsyncCtx9 + 12 | 0; //@line 25307
       HEAP32[$117 >> 2] = $4; //@line 25308
       $118 = $ReallocAsyncCtx9 + 16 | 0; //@line 25309
       HEAP32[$118 >> 2] = $$pre20; //@line 25310
       $119 = $ReallocAsyncCtx9 + 20 | 0; //@line 25311
       HEAP32[$119 >> 2] = $6; //@line 25312
       $120 = $ReallocAsyncCtx9 + 24 | 0; //@line 25313
       HEAP32[$120 >> 2] = $8; //@line 25314
       $121 = $ReallocAsyncCtx9 + 28 | 0; //@line 25315
       HEAP32[$121 >> 2] = $10; //@line 25316
       $122 = $ReallocAsyncCtx9 + 32 | 0; //@line 25317
       HEAP32[$122 >> 2] = $45; //@line 25318
       sp = STACKTOP; //@line 25319
       STACKTOP = sp; //@line 25320
       return;
      }
      if (!($94 & 2)) {
       __ZN14LoRaMacCommand20clear_command_bufferEv($2 + 4 | 0); //@line 25326
       $100 = $2 + 964 | 0; //@line 25327
       HEAP32[$100 >> 2] = (HEAP32[$100 >> 2] | 0) + 1; //@line 25330
      }
      HEAP8[$89 >> 0] = 0; //@line 25332
      if (!(HEAP8[$2 + 370 >> 0] | 0)) {
       $106 = $2 + 956 | 0; //@line 25337
       HEAP32[$106 >> 2] = (HEAP32[$106 >> 2] | 0) + 1; //@line 25340
      }
      HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 25344
      $138 = $45; //@line 25345
     }
    } else {
     $138 = $45; //@line 25348
    }
   }
  } while (0);
  do {
   if (HEAP8[$13 >> 0] & 2) {
    $127 = $2 + 288 | 0; //@line 25357
    if (!(HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($127) | 0) + 10 >> 0] | 0)) {
     if ((HEAPU8[$2 + 895 >> 0] | 0) <= (HEAPU8[$2 + 894 >> 0] | 0)) {
      break;
     }
    }
    HEAP8[$2 + 377 >> 0] = 0; //@line 25373
    HEAP8[$138 >> 0] = 0; //@line 25374
    if (!(HEAP8[$2 + 370 >> 0] | 0)) {
     $142 = $2 + 956 | 0; //@line 25379
     HEAP32[$142 >> 2] = (HEAP32[$142 >> 2] | 0) + 1; //@line 25382
    }
    $146 = HEAP8[$2 + 895 >> 0] | 0; //@line 25385
    HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($127) | 0) + 11 >> 0] = $146; //@line 25388
    HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 25391
   }
  } while (0);
  $151 = $2 + 377 | 0; //@line 25394
  if (HEAP8[$151 >> 0] | 0) {
   if (!(HEAP32[$$pre20 >> 2] & 16)) {
    HEAP8[$151 >> 0] = 0; //@line 25402
    $157 = $2 + 895 | 0; //@line 25403
    $158 = HEAP8[$157 >> 0] | 0; //@line 25404
    if (!(($158 & 255) < 9 ? ($158 & 255) < (HEAPU8[$2 + 894 >> 0] | 0) : 0)) {
     $180 = HEAP32[$2 >> 2] | 0; //@line 25411
     $183 = HEAP32[(HEAP32[$180 >> 2] | 0) + 16 >> 2] | 0; //@line 25414
     $ReallocAsyncCtx = _emscripten_realloc_async_context(36) | 0; //@line 25415
     FUNCTION_TABLE_vi[$183 & 1023]($180); //@line 25416
     if (___async) {
      HEAP32[$ReallocAsyncCtx >> 2] = 375; //@line 25419
      $184 = $ReallocAsyncCtx + 4 | 0; //@line 25420
      HEAP32[$184 >> 2] = $2; //@line 25421
      $185 = $ReallocAsyncCtx + 8 | 0; //@line 25422
      HEAP32[$185 >> 2] = $$pre20; //@line 25423
      $186 = $ReallocAsyncCtx + 12 | 0; //@line 25424
      HEAP32[$186 >> 2] = $13; //@line 25425
      $187 = $ReallocAsyncCtx + 16 | 0; //@line 25426
      HEAP32[$187 >> 2] = $138; //@line 25427
      $188 = $ReallocAsyncCtx + 20 | 0; //@line 25428
      HEAP32[$188 >> 2] = $157; //@line 25429
      $189 = $ReallocAsyncCtx + 24 | 0; //@line 25430
      HEAP32[$189 >> 2] = $8; //@line 25431
      $190 = $ReallocAsyncCtx + 28 | 0; //@line 25432
      HEAP32[$190 >> 2] = $10; //@line 25433
      $191 = $ReallocAsyncCtx + 32 | 0; //@line 25434
      HEAP32[$191 >> 2] = $4; //@line 25435
      sp = STACKTOP; //@line 25436
      STACKTOP = sp; //@line 25437
      return;
     }
     ___async_unwind = 0; //@line 25439
     HEAP32[$ReallocAsyncCtx >> 2] = 375; //@line 25440
     $184 = $ReallocAsyncCtx + 4 | 0; //@line 25441
     HEAP32[$184 >> 2] = $2; //@line 25442
     $185 = $ReallocAsyncCtx + 8 | 0; //@line 25443
     HEAP32[$185 >> 2] = $$pre20; //@line 25444
     $186 = $ReallocAsyncCtx + 12 | 0; //@line 25445
     HEAP32[$186 >> 2] = $13; //@line 25446
     $187 = $ReallocAsyncCtx + 16 | 0; //@line 25447
     HEAP32[$187 >> 2] = $138; //@line 25448
     $188 = $ReallocAsyncCtx + 20 | 0; //@line 25449
     HEAP32[$188 >> 2] = $157; //@line 25450
     $189 = $ReallocAsyncCtx + 24 | 0; //@line 25451
     HEAP32[$189 >> 2] = $8; //@line 25452
     $190 = $ReallocAsyncCtx + 28 | 0; //@line 25453
     HEAP32[$190 >> 2] = $10; //@line 25454
     $191 = $ReallocAsyncCtx + 32 | 0; //@line 25455
     HEAP32[$191 >> 2] = $4; //@line 25456
     sp = STACKTOP; //@line 25457
     STACKTOP = sp; //@line 25458
     return;
    }
    $163 = $158 + 1 << 24 >> 24; //@line 25460
    HEAP8[$157 >> 0] = $163; //@line 25461
    if ($163 & 1) {
     $167 = $2 + 1097 | 0; //@line 25466
     HEAP8[$167 >> 0] = __ZN7LoRaPHY26get_next_lower_tx_datarateEa(HEAP32[$2 >> 2] | 0, HEAP8[$167 >> 0] | 0) | 0; //@line 25469
    }
    $ReallocAsyncCtx7 = _emscripten_realloc_async_context(36) | 0; //@line 25471
    $170 = __ZN7LoRaMac11schedule_txEv($2) | 0; //@line 25472
    if (___async) {
     HEAP32[$ReallocAsyncCtx7 >> 2] = 374; //@line 25475
     $171 = $ReallocAsyncCtx7 + 4 | 0; //@line 25476
     HEAP32[$171 >> 2] = $13; //@line 25477
     $172 = $ReallocAsyncCtx7 + 8 | 0; //@line 25478
     HEAP32[$172 >> 2] = $2; //@line 25479
     $173 = $ReallocAsyncCtx7 + 12 | 0; //@line 25480
     HEAP32[$173 >> 2] = $4; //@line 25481
     $174 = $ReallocAsyncCtx7 + 16 | 0; //@line 25482
     HEAP32[$174 >> 2] = $$pre20; //@line 25483
     $175 = $ReallocAsyncCtx7 + 20 | 0; //@line 25484
     HEAP32[$175 >> 2] = $138; //@line 25485
     $176 = $ReallocAsyncCtx7 + 24 | 0; //@line 25486
     HEAP32[$176 >> 2] = $157; //@line 25487
     $177 = $ReallocAsyncCtx7 + 28 | 0; //@line 25488
     HEAP32[$177 >> 2] = $8; //@line 25489
     $178 = $ReallocAsyncCtx7 + 32 | 0; //@line 25490
     HEAP32[$178 >> 2] = $10; //@line 25491
     sp = STACKTOP; //@line 25492
     STACKTOP = sp; //@line 25493
     return;
    }
    HEAP32[___async_retval >> 2] = $170; //@line 25496
    ___async_unwind = 0; //@line 25497
    HEAP32[$ReallocAsyncCtx7 >> 2] = 374; //@line 25498
    $171 = $ReallocAsyncCtx7 + 4 | 0; //@line 25499
    HEAP32[$171 >> 2] = $13; //@line 25500
    $172 = $ReallocAsyncCtx7 + 8 | 0; //@line 25501
    HEAP32[$172 >> 2] = $2; //@line 25502
    $173 = $ReallocAsyncCtx7 + 12 | 0; //@line 25503
    HEAP32[$173 >> 2] = $4; //@line 25504
    $174 = $ReallocAsyncCtx7 + 16 | 0; //@line 25505
    HEAP32[$174 >> 2] = $$pre20; //@line 25506
    $175 = $ReallocAsyncCtx7 + 20 | 0; //@line 25507
    HEAP32[$175 >> 2] = $138; //@line 25508
    $176 = $ReallocAsyncCtx7 + 24 | 0; //@line 25509
    HEAP32[$176 >> 2] = $157; //@line 25510
    $177 = $ReallocAsyncCtx7 + 28 | 0; //@line 25511
    HEAP32[$177 >> 2] = $8; //@line 25512
    $178 = $ReallocAsyncCtx7 + 32 | 0; //@line 25513
    HEAP32[$178 >> 2] = $10; //@line 25514
    sp = STACKTOP; //@line 25515
    STACKTOP = sp; //@line 25516
    return;
   }
  }
 }
 $192 = HEAP32[$$pre20 >> 2] | 0; //@line 25520
 $195 = $192 & -3; //@line 25523
 if (!($192 & 2)) {
  $197 = $192; //@line 25525
 } else {
  HEAP32[$$pre20 >> 2] = $195; //@line 25527
  $197 = $195; //@line 25528
 }
 if ($197 | 0) {
  $248 = HEAP32[$8 >> 2] | 0; //@line 25532
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(16) | 0; //@line 25533
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($248, $10, 1e3); //@line 25534
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 380; //@line 25537
   $249 = $ReallocAsyncCtx6 + 4 | 0; //@line 25538
   HEAP32[$249 >> 2] = $13; //@line 25539
   $250 = $ReallocAsyncCtx6 + 8 | 0; //@line 25540
   HEAP32[$250 >> 2] = $2; //@line 25541
   $251 = $ReallocAsyncCtx6 + 12 | 0; //@line 25542
   HEAP32[$251 >> 2] = $4; //@line 25543
   sp = STACKTOP; //@line 25544
   STACKTOP = sp; //@line 25545
   return;
  }
  ___async_unwind = 0; //@line 25547
  HEAP32[$ReallocAsyncCtx6 >> 2] = 380; //@line 25548
  $249 = $ReallocAsyncCtx6 + 4 | 0; //@line 25549
  HEAP32[$249 >> 2] = $13; //@line 25550
  $250 = $ReallocAsyncCtx6 + 8 | 0; //@line 25551
  HEAP32[$250 >> 2] = $2; //@line 25552
  $251 = $ReallocAsyncCtx6 + 12 | 0; //@line 25553
  HEAP32[$251 >> 2] = $4; //@line 25554
  sp = STACKTOP; //@line 25555
  STACKTOP = sp; //@line 25556
  return;
 }
 $198 = HEAP8[$13 >> 0] | 0; //@line 25558
 if ($198 & 1) {
  HEAP8[$13 >> 0] = $198 & -2; //@line 25563
  $203 = HEAP32[$2 + 1324 >> 2] | 0; //@line 25565
  $205 = __ZN11LoRaMacMcps16get_confirmationEv($2 + 288 | 0) | 0; //@line 25567
  $206 = $203 + 12 | 0; //@line 25568
  $207 = HEAP32[$206 >> 2] | 0; //@line 25569
  if (!$207) {
   $ReallocAsyncCtx16 = _emscripten_realloc_async_context(28) | 0; //@line 25572
   _mbed_assert_internal(13874, 13879, 1102); //@line 25573
   if (___async) {
    HEAP32[$ReallocAsyncCtx16 >> 2] = 376; //@line 25576
    $209 = $ReallocAsyncCtx16 + 4 | 0; //@line 25577
    HEAP32[$209 >> 2] = $13; //@line 25578
    $210 = $ReallocAsyncCtx16 + 8 | 0; //@line 25579
    HEAP32[$210 >> 2] = $2; //@line 25580
    $211 = $ReallocAsyncCtx16 + 12 | 0; //@line 25581
    HEAP32[$211 >> 2] = $4; //@line 25582
    $212 = $ReallocAsyncCtx16 + 16 | 0; //@line 25583
    HEAP32[$212 >> 2] = $206; //@line 25584
    $213 = $ReallocAsyncCtx16 + 20 | 0; //@line 25585
    HEAP32[$213 >> 2] = $203; //@line 25586
    $214 = $ReallocAsyncCtx16 + 24 | 0; //@line 25587
    HEAP32[$214 >> 2] = $205; //@line 25588
    sp = STACKTOP; //@line 25589
    STACKTOP = sp; //@line 25590
    return;
   }
   ___async_unwind = 0; //@line 25592
   HEAP32[$ReallocAsyncCtx16 >> 2] = 376; //@line 25593
   $209 = $ReallocAsyncCtx16 + 4 | 0; //@line 25594
   HEAP32[$209 >> 2] = $13; //@line 25595
   $210 = $ReallocAsyncCtx16 + 8 | 0; //@line 25596
   HEAP32[$210 >> 2] = $2; //@line 25597
   $211 = $ReallocAsyncCtx16 + 12 | 0; //@line 25598
   HEAP32[$211 >> 2] = $4; //@line 25599
   $212 = $ReallocAsyncCtx16 + 16 | 0; //@line 25600
   HEAP32[$212 >> 2] = $206; //@line 25601
   $213 = $ReallocAsyncCtx16 + 20 | 0; //@line 25602
   HEAP32[$213 >> 2] = $203; //@line 25603
   $214 = $ReallocAsyncCtx16 + 24 | 0; //@line 25604
   HEAP32[$214 >> 2] = $205; //@line 25605
   sp = STACKTOP; //@line 25606
   STACKTOP = sp; //@line 25607
   return;
  } else {
   $215 = HEAP32[$207 >> 2] | 0; //@line 25609
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 25610
   FUNCTION_TABLE_vii[$215 & 31]($203, $205); //@line 25611
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 377; //@line 25614
    $216 = $ReallocAsyncCtx2 + 4 | 0; //@line 25615
    HEAP32[$216 >> 2] = $13; //@line 25616
    $217 = $ReallocAsyncCtx2 + 8 | 0; //@line 25617
    HEAP32[$217 >> 2] = $2; //@line 25618
    $218 = $ReallocAsyncCtx2 + 12 | 0; //@line 25619
    HEAP32[$218 >> 2] = $4; //@line 25620
    sp = STACKTOP; //@line 25621
    STACKTOP = sp; //@line 25622
    return;
   }
   ___async_unwind = 0; //@line 25624
   HEAP32[$ReallocAsyncCtx2 >> 2] = 377; //@line 25625
   $216 = $ReallocAsyncCtx2 + 4 | 0; //@line 25626
   HEAP32[$216 >> 2] = $13; //@line 25627
   $217 = $ReallocAsyncCtx2 + 8 | 0; //@line 25628
   HEAP32[$217 >> 2] = $2; //@line 25629
   $218 = $ReallocAsyncCtx2 + 12 | 0; //@line 25630
   HEAP32[$218 >> 2] = $4; //@line 25631
   sp = STACKTOP; //@line 25632
   STACKTOP = sp; //@line 25633
   return;
  }
 }
 if ($198 & 8) {
  HEAP8[$13 >> 0] = $198 & -9; //@line 25640
  $223 = HEAP32[$2 + 1324 >> 2] | 0; //@line 25642
  $224 = $223 + 32 | 0; //@line 25643
  $226 = __ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0; //@line 25645
  $227 = $223 + 44 | 0; //@line 25646
  $228 = HEAP32[$227 >> 2] | 0; //@line 25647
  if (!$228) {
   $ReallocAsyncCtx15 = _emscripten_realloc_async_context(28) | 0; //@line 25650
   _mbed_assert_internal(13874, 13879, 1102); //@line 25651
   if (___async) {
    HEAP32[$ReallocAsyncCtx15 >> 2] = 378; //@line 25654
    $230 = $ReallocAsyncCtx15 + 4 | 0; //@line 25655
    HEAP32[$230 >> 2] = $13; //@line 25656
    $231 = $ReallocAsyncCtx15 + 8 | 0; //@line 25657
    HEAP32[$231 >> 2] = $2; //@line 25658
    $232 = $ReallocAsyncCtx15 + 12 | 0; //@line 25659
    HEAP32[$232 >> 2] = $4; //@line 25660
    $233 = $ReallocAsyncCtx15 + 16 | 0; //@line 25661
    HEAP32[$233 >> 2] = $224; //@line 25662
    $234 = $ReallocAsyncCtx15 + 20 | 0; //@line 25663
    HEAP32[$234 >> 2] = $226; //@line 25664
    $235 = $ReallocAsyncCtx15 + 24 | 0; //@line 25665
    HEAP32[$235 >> 2] = $227; //@line 25666
    sp = STACKTOP; //@line 25667
    STACKTOP = sp; //@line 25668
    return;
   }
   ___async_unwind = 0; //@line 25670
   HEAP32[$ReallocAsyncCtx15 >> 2] = 378; //@line 25671
   $230 = $ReallocAsyncCtx15 + 4 | 0; //@line 25672
   HEAP32[$230 >> 2] = $13; //@line 25673
   $231 = $ReallocAsyncCtx15 + 8 | 0; //@line 25674
   HEAP32[$231 >> 2] = $2; //@line 25675
   $232 = $ReallocAsyncCtx15 + 12 | 0; //@line 25676
   HEAP32[$232 >> 2] = $4; //@line 25677
   $233 = $ReallocAsyncCtx15 + 16 | 0; //@line 25678
   HEAP32[$233 >> 2] = $224; //@line 25679
   $234 = $ReallocAsyncCtx15 + 20 | 0; //@line 25680
   HEAP32[$234 >> 2] = $226; //@line 25681
   $235 = $ReallocAsyncCtx15 + 24 | 0; //@line 25682
   HEAP32[$235 >> 2] = $227; //@line 25683
   sp = STACKTOP; //@line 25684
   STACKTOP = sp; //@line 25685
   return;
  } else {
   $236 = HEAP32[$228 >> 2] | 0; //@line 25687
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 25688
   FUNCTION_TABLE_vii[$236 & 31]($224, $226); //@line 25689
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 379; //@line 25692
    $237 = $ReallocAsyncCtx3 + 4 | 0; //@line 25693
    HEAP32[$237 >> 2] = $13; //@line 25694
    $238 = $ReallocAsyncCtx3 + 8 | 0; //@line 25695
    HEAP32[$238 >> 2] = $2; //@line 25696
    $239 = $ReallocAsyncCtx3 + 12 | 0; //@line 25697
    HEAP32[$239 >> 2] = $4; //@line 25698
    sp = STACKTOP; //@line 25699
    STACKTOP = sp; //@line 25700
    return;
   }
   ___async_unwind = 0; //@line 25702
   HEAP32[$ReallocAsyncCtx3 >> 2] = 379; //@line 25703
   $237 = $ReallocAsyncCtx3 + 4 | 0; //@line 25704
   HEAP32[$237 >> 2] = $13; //@line 25705
   $238 = $ReallocAsyncCtx3 + 8 | 0; //@line 25706
   HEAP32[$238 >> 2] = $2; //@line 25707
   $239 = $ReallocAsyncCtx3 + 12 | 0; //@line 25708
   HEAP32[$239 >> 2] = $4; //@line 25709
   sp = STACKTOP; //@line 25710
   STACKTOP = sp; //@line 25711
   return;
  }
 }
 if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($2 + 4 | 0) | 0) {
  HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($2 + 264 | 0) | 0) >> 2] = 4; //@line 25719
  $245 = HEAP8[$13 >> 0] | 16; //@line 25721
  HEAP8[$13 >> 0] = $245; //@line 25722
  $247 = $245; //@line 25723
 } else {
  $247 = HEAP8[$13 >> 0] | 0; //@line 25726
 }
 $246 = $247 & -33; //@line 25728
 HEAP8[$13 >> 0] = $246; //@line 25729
 do {
  if (!($246 & 2)) {
   $285 = $246; //@line 25734
  } else {
   $254 = $246 & -3; //@line 25736
   HEAP8[$13 >> 0] = $254; //@line 25737
   if ((HEAP32[$2 + 360 >> 2] | 0) == 2) {
    $259 = HEAP32[$2 + 1328 >> 2] | 0; //@line 25743
    HEAP32[$4 >> 2] = 273; //@line 25744
    HEAP32[$4 + 4 >> 2] = 0; //@line 25746
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 25747
    HEAP32[$$byval_copy23 >> 2] = HEAP32[$4 >> 2]; //@line 25748
    HEAP32[$$byval_copy23 + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 25748
    $260 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($259, $2, $$byval_copy23) | 0; //@line 25749
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 381; //@line 25752
     $261 = $ReallocAsyncCtx8 + 4 | 0; //@line 25753
     HEAP32[$261 >> 2] = $13; //@line 25754
     $262 = $ReallocAsyncCtx8 + 8 | 0; //@line 25755
     HEAP32[$262 >> 2] = $2; //@line 25756
     $263 = $ReallocAsyncCtx8 + 12 | 0; //@line 25757
     HEAP32[$263 >> 2] = $4; //@line 25758
     sp = STACKTOP; //@line 25759
     STACKTOP = sp; //@line 25760
     return;
    }
    HEAP32[___async_retval >> 2] = $260; //@line 25763
    ___async_unwind = 0; //@line 25764
    HEAP32[$ReallocAsyncCtx8 >> 2] = 381; //@line 25765
    $261 = $ReallocAsyncCtx8 + 4 | 0; //@line 25766
    HEAP32[$261 >> 2] = $13; //@line 25767
    $262 = $ReallocAsyncCtx8 + 8 | 0; //@line 25768
    HEAP32[$262 >> 2] = $2; //@line 25769
    $263 = $ReallocAsyncCtx8 + 12 | 0; //@line 25770
    HEAP32[$263 >> 2] = $4; //@line 25771
    sp = STACKTOP; //@line 25772
    STACKTOP = sp; //@line 25773
    return;
   }
   if ($254 & 4) {
    $283 = $254 & -5; //@line 25778
    HEAP8[$13 >> 0] = $283; //@line 25779
    $285 = $283; //@line 25780
    break;
   }
   $268 = HEAP32[$2 + 1324 >> 2] | 0; //@line 25784
   $269 = $268 + 16 | 0; //@line 25785
   $271 = __ZN11LoRaMacMcps14get_indicationEv($2 + 288 | 0) | 0; //@line 25787
   $272 = $268 + 28 | 0; //@line 25788
   $273 = HEAP32[$272 >> 2] | 0; //@line 25789
   if (!$273) {
    $ReallocAsyncCtx13 = _emscripten_realloc_async_context(24) | 0; //@line 25792
    _mbed_assert_internal(13874, 13879, 1102); //@line 25793
    if (___async) {
     HEAP32[$ReallocAsyncCtx13 >> 2] = 383; //@line 25796
     $275 = $ReallocAsyncCtx13 + 4 | 0; //@line 25797
     HEAP32[$275 >> 2] = $272; //@line 25798
     $276 = $ReallocAsyncCtx13 + 8 | 0; //@line 25799
     HEAP32[$276 >> 2] = $269; //@line 25800
     $277 = $ReallocAsyncCtx13 + 12 | 0; //@line 25801
     HEAP32[$277 >> 2] = $271; //@line 25802
     $278 = $ReallocAsyncCtx13 + 16 | 0; //@line 25803
     HEAP32[$278 >> 2] = $13; //@line 25804
     $279 = $ReallocAsyncCtx13 + 20 | 0; //@line 25805
     HEAP32[$279 >> 2] = $2; //@line 25806
     sp = STACKTOP; //@line 25807
     STACKTOP = sp; //@line 25808
     return;
    }
    ___async_unwind = 0; //@line 25810
    HEAP32[$ReallocAsyncCtx13 >> 2] = 383; //@line 25811
    $275 = $ReallocAsyncCtx13 + 4 | 0; //@line 25812
    HEAP32[$275 >> 2] = $272; //@line 25813
    $276 = $ReallocAsyncCtx13 + 8 | 0; //@line 25814
    HEAP32[$276 >> 2] = $269; //@line 25815
    $277 = $ReallocAsyncCtx13 + 12 | 0; //@line 25816
    HEAP32[$277 >> 2] = $271; //@line 25817
    $278 = $ReallocAsyncCtx13 + 16 | 0; //@line 25818
    HEAP32[$278 >> 2] = $13; //@line 25819
    $279 = $ReallocAsyncCtx13 + 20 | 0; //@line 25820
    HEAP32[$279 >> 2] = $2; //@line 25821
    sp = STACKTOP; //@line 25822
    STACKTOP = sp; //@line 25823
    return;
   } else {
    $280 = HEAP32[$273 >> 2] | 0; //@line 25825
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 25826
    FUNCTION_TABLE_vii[$280 & 31]($269, $271); //@line 25827
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 384; //@line 25830
     $281 = $ReallocAsyncCtx4 + 4 | 0; //@line 25831
     HEAP32[$281 >> 2] = $13; //@line 25832
     $282 = $ReallocAsyncCtx4 + 8 | 0; //@line 25833
     HEAP32[$282 >> 2] = $2; //@line 25834
     sp = STACKTOP; //@line 25835
     STACKTOP = sp; //@line 25836
     return;
    }
    ___async_unwind = 0; //@line 25838
    HEAP32[$ReallocAsyncCtx4 >> 2] = 384; //@line 25839
    $281 = $ReallocAsyncCtx4 + 4 | 0; //@line 25840
    HEAP32[$281 >> 2] = $13; //@line 25841
    $282 = $ReallocAsyncCtx4 + 8 | 0; //@line 25842
    HEAP32[$282 >> 2] = $2; //@line 25843
    sp = STACKTOP; //@line 25844
    STACKTOP = sp; //@line 25845
    return;
   }
  }
 } while (0);
 if (!($285 & 16)) {
  STACKTOP = sp; //@line 25852
  return;
 }
 HEAP8[$13 >> 0] = $285 & -17; //@line 25855
 $289 = HEAP32[$2 + 1324 >> 2] | 0; //@line 25857
 $290 = $289 + 48 | 0; //@line 25858
 $292 = __ZN11LoRaMacMlme14get_indicationEv($2 + 264 | 0) | 0; //@line 25860
 $293 = $289 + 60 | 0; //@line 25861
 $294 = HEAP32[$293 >> 2] | 0; //@line 25862
 if (!$294) {
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(16) | 0; //@line 25865
  _mbed_assert_internal(13874, 13879, 1102); //@line 25866
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 385; //@line 25869
   $296 = $ReallocAsyncCtx12 + 4 | 0; //@line 25870
   HEAP32[$296 >> 2] = $293; //@line 25871
   $297 = $ReallocAsyncCtx12 + 8 | 0; //@line 25872
   HEAP32[$297 >> 2] = $290; //@line 25873
   $298 = $ReallocAsyncCtx12 + 12 | 0; //@line 25874
   HEAP32[$298 >> 2] = $292; //@line 25875
   sp = STACKTOP; //@line 25876
   STACKTOP = sp; //@line 25877
   return;
  }
  ___async_unwind = 0; //@line 25879
  HEAP32[$ReallocAsyncCtx12 >> 2] = 385; //@line 25880
  $296 = $ReallocAsyncCtx12 + 4 | 0; //@line 25881
  HEAP32[$296 >> 2] = $293; //@line 25882
  $297 = $ReallocAsyncCtx12 + 8 | 0; //@line 25883
  HEAP32[$297 >> 2] = $290; //@line 25884
  $298 = $ReallocAsyncCtx12 + 12 | 0; //@line 25885
  HEAP32[$298 >> 2] = $292; //@line 25886
  sp = STACKTOP; //@line 25887
  STACKTOP = sp; //@line 25888
  return;
 } else {
  $299 = HEAP32[$294 >> 2] | 0; //@line 25890
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 25891
  FUNCTION_TABLE_vii[$299 & 31]($290, $292); //@line 25892
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 386; //@line 25895
   sp = STACKTOP; //@line 25896
   STACKTOP = sp; //@line 25897
   return;
  }
  ___async_unwind = 0; //@line 25899
  HEAP32[$ReallocAsyncCtx5 >> 2] = 386; //@line 25900
  sp = STACKTOP; //@line 25901
  STACKTOP = sp; //@line 25902
  return;
 }
}
function __ZN12LoRaWANStack18lora_state_machineEv($0) {
 $0 = $0 | 0;
 var $$029 = 0, $$1 = 0, $1 = 0, $10 = 0, $100 = 0, $107 = 0, $108 = 0, $150 = 0, $151 = 0, $155 = 0, $157 = 0, $163 = 0, $164 = 0, $168 = 0, $171 = 0, $176 = 0, $179 = 0, $197 = 0, $198 = 0, $2 = 0, $202 = 0, $204 = 0, $211 = 0, $212 = 0, $217 = 0, $220 = 0, $232 = 0, $233 = 0, $237 = 0, $239 = 0, $247 = 0, $248 = 0, $254 = 0, $257 = 0, $3 = 0, $32 = 0, $33 = 0, $37 = 0, $39 = 0, $4 = 0, $45 = 0, $46 = 0, $5 = 0, $50 = 0, $53 = 0, $6 = 0, $7 = 0, $74 = 0, $79 = 0, $8 = 0, $80 = 0, $84 = 0, $86 = 0, $92 = 0, $93 = 0, $97 = 0, $AsyncCtx = 0, $AsyncCtx101 = 0, $AsyncCtx105 = 0, $AsyncCtx109 = 0, $AsyncCtx11 = 0, $AsyncCtx113 = 0, $AsyncCtx117 = 0, $AsyncCtx15 = 0, $AsyncCtx18 = 0, $AsyncCtx22 = 0, $AsyncCtx25 = 0, $AsyncCtx29 = 0, $AsyncCtx32 = 0, $AsyncCtx36 = 0, $AsyncCtx40 = 0, $AsyncCtx44 = 0, $AsyncCtx48 = 0, $AsyncCtx51 = 0, $AsyncCtx55 = 0, $AsyncCtx59 = 0, $AsyncCtx63 = 0, $AsyncCtx67 = 0, $AsyncCtx71 = 0, $AsyncCtx74 = 0, $AsyncCtx78 = 0, $AsyncCtx8 = 0, $AsyncCtx82 = 0, $AsyncCtx85 = 0, $AsyncCtx88 = 0, $AsyncCtx91 = 0, $AsyncCtx94 = 0, $AsyncCtx97 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP; //@line 4935
 STACKTOP = STACKTOP + 144 | 0; //@line 4936
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144); //@line 4936
 $vararg_buffer5 = sp + 24 | 0; //@line 4937
 $vararg_buffer3 = sp + 16 | 0; //@line 4938
 $vararg_buffer1 = sp + 8 | 0; //@line 4939
 $vararg_buffer = sp; //@line 4940
 $1 = sp + 132 | 0; //@line 4941
 $2 = sp + 96 | 0; //@line 4942
 $3 = sp + 112 | 0; //@line 4943
 $4 = sp + 80 | 0; //@line 4944
 $5 = sp + 64 | 0; //@line 4945
 $6 = sp + 48 | 0; //@line 4946
 $7 = sp + 32 | 0; //@line 4947
 $8 = $0 + 1876 | 0; //@line 4948
 switch (HEAP32[$8 >> 2] | 0) {
 case 7:
  {
   $10 = $0 + 4 | 0; //@line 4952
   $AsyncCtx78 = _emscripten_alloc_async_context(24, sp) | 0; //@line 4953
   __ZN7LoRaMac19remove_channel_planEv($10) | 0; //@line 4954
   if (___async) {
    HEAP32[$AsyncCtx78 >> 2] = 160; //@line 4957
    HEAP32[$AsyncCtx78 + 4 >> 2] = $0; //@line 4959
    HEAP32[$AsyncCtx78 + 8 >> 2] = $2; //@line 4961
    HEAP32[$AsyncCtx78 + 12 >> 2] = $1; //@line 4963
    HEAP32[$AsyncCtx78 + 16 >> 2] = $10; //@line 4965
    HEAP32[$AsyncCtx78 + 20 >> 2] = $1; //@line 4967
    sp = STACKTOP; //@line 4968
    STACKTOP = sp; //@line 4969
    return 0; //@line 4969
   }
   _emscripten_free_async_context($AsyncCtx78 | 0); //@line 4971
   $AsyncCtx51 = _emscripten_alloc_async_context(24, sp) | 0; //@line 4972
   __ZN7LoRaMac10disconnectEv($10); //@line 4973
   if (___async) {
    HEAP32[$AsyncCtx51 >> 2] = 161; //@line 4976
    HEAP32[$AsyncCtx51 + 4 >> 2] = $1; //@line 4978
    HEAP32[$AsyncCtx51 + 8 >> 2] = $10; //@line 4980
    HEAP32[$AsyncCtx51 + 12 >> 2] = $0; //@line 4982
    HEAP32[$AsyncCtx51 + 16 >> 2] = $1; //@line 4984
    HEAP32[$AsyncCtx51 + 20 >> 2] = $2; //@line 4986
    sp = STACKTOP; //@line 4987
    STACKTOP = sp; //@line 4988
    return 0; //@line 4988
   }
   _emscripten_free_async_context($AsyncCtx51 | 0); //@line 4990
   HEAP32[$1 >> 2] = 1; //@line 4991
   HEAP8[$1 + 4 >> 0] = 0; //@line 4993
   $AsyncCtx74 = _emscripten_alloc_async_context(16, sp) | 0; //@line 4994
   __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($10, $1) | 0; //@line 4995
   if (___async) {
    HEAP32[$AsyncCtx74 >> 2] = 162; //@line 4998
    HEAP32[$AsyncCtx74 + 4 >> 2] = $0; //@line 5000
    HEAP32[$AsyncCtx74 + 8 >> 2] = $1; //@line 5002
    HEAP32[$AsyncCtx74 + 12 >> 2] = $2; //@line 5004
    sp = STACKTOP; //@line 5005
    STACKTOP = sp; //@line 5006
    return 0; //@line 5006
   }
   _emscripten_free_async_context($AsyncCtx74 | 0); //@line 5008
   HEAP8[$0 + 1964 >> 0] = 0; //@line 5011
   HEAP32[$0 + 2256 >> 2] = 0; //@line 5013
   HEAP8[$0 + 2236 >> 0] = 0; //@line 5015
   HEAP16[$0 + 2282 >> 1] = 0; //@line 5017
   HEAP16[$0 + 2260 >> 1] = 0; //@line 5019
   HEAP8[$0 + 1932 >> 0] = 0; //@line 5021
   $32 = $0 + 1892 | 0; //@line 5022
   _memset($0 + 1975 | 0, 0, 259) | 0; //@line 5023
   $33 = HEAP32[$32 >> 2] | 0; //@line 5024
   if (!$33) {
    $$1 = -1011; //@line 5027
    STACKTOP = sp; //@line 5028
    return $$1 | 0; //@line 5028
   }
   $37 = HEAP32[$0 + 2288 >> 2] | 0; //@line 5032
   $39 = HEAP32[$33 + 4 >> 2] | 0; //@line 5034
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 5035
   FUNCTION_TABLE_vii[$39 & 31]($2, $0 + 1880 | 0); //@line 5036
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 163; //@line 5039
    HEAP32[$AsyncCtx + 4 >> 2] = $32; //@line 5041
    HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 5043
    HEAP32[$AsyncCtx + 12 >> 2] = $37; //@line 5045
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 5047
    HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 5049
    sp = STACKTOP; //@line 5050
    STACKTOP = sp; //@line 5051
    return 0; //@line 5051
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 5053
   $45 = $2 + 12 | 0; //@line 5055
   HEAP32[$45 >> 2] = HEAP32[$32 >> 2]; //@line 5056
   $AsyncCtx97 = _emscripten_alloc_async_context(16, sp) | 0; //@line 5057
   $46 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($37, $2, 1) | 0; //@line 5058
   if (___async) {
    HEAP32[$AsyncCtx97 >> 2] = 164; //@line 5061
    HEAP32[$AsyncCtx97 + 4 >> 2] = $45; //@line 5063
    HEAP32[$AsyncCtx97 + 8 >> 2] = $2; //@line 5065
    HEAP32[$AsyncCtx97 + 12 >> 2] = $1; //@line 5067
    sp = STACKTOP; //@line 5068
    STACKTOP = sp; //@line 5069
    return 0; //@line 5069
   }
   _emscripten_free_async_context($AsyncCtx97 | 0); //@line 5071
   $50 = HEAP32[$45 >> 2] | 0; //@line 5072
   do {
    if ($50 | 0) {
     $53 = HEAP32[$50 + 8 >> 2] | 0; //@line 5077
     $AsyncCtx8 = _emscripten_alloc_async_context(12, sp) | 0; //@line 5078
     FUNCTION_TABLE_vi[$53 & 1023]($2); //@line 5079
     if (___async) {
      HEAP32[$AsyncCtx8 >> 2] = 165; //@line 5082
      HEAP32[$AsyncCtx8 + 4 >> 2] = $46; //@line 5084
      HEAP32[$AsyncCtx8 + 8 >> 2] = $1; //@line 5086
      sp = STACKTOP; //@line 5087
      STACKTOP = sp; //@line 5088
      return 0; //@line 5088
     } else {
      _emscripten_free_async_context($AsyncCtx8 | 0); //@line 5090
      break;
     }
    }
   } while (0);
   if ($46 | 0) {
    $$1 = -1011; //@line 5097
    STACKTOP = sp; //@line 5098
    return $$1 | 0; //@line 5098
   }
   $AsyncCtx117 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5100
   _mbed_assert_internal(12025, 11293, 1129); //@line 5101
   if (___async) {
    HEAP32[$AsyncCtx117 >> 2] = 166; //@line 5104
    HEAP32[$AsyncCtx117 + 4 >> 2] = $1; //@line 5106
    sp = STACKTOP; //@line 5107
    STACKTOP = sp; //@line 5108
    return 0; //@line 5108
   }
   _emscripten_free_async_context($AsyncCtx117 | 0); //@line 5110
   $$1 = -1011; //@line 5111
   STACKTOP = sp; //@line 5112
   return $$1 | 0; //@line 5112
  }
 case 1:
  {
   $$1 = 0; //@line 5116
   STACKTOP = sp; //@line 5117
   return $$1 | 0; //@line 5117
  }
 case 2:
  {
   if (HEAP8[$0 + 1936 >> 0] | 0) {
    $$1 = -1003; //@line 5125
    STACKTOP = sp; //@line 5126
    return $$1 | 0; //@line 5126
   }
   HEAP32[$3 >> 2] = 0; //@line 5128
   HEAP32[$3 + 4 >> 2] = HEAP32[$0 + 1940 >> 2]; //@line 5132
   HEAP32[$3 + 8 >> 2] = HEAP32[$0 + 1944 >> 2]; //@line 5136
   HEAP32[$3 + 12 >> 2] = HEAP32[$0 + 1948 >> 2]; //@line 5140
   HEAP8[$3 + 16 >> 0] = HEAP8[$0 + 1952 >> 0] | 0; //@line 5144
   $AsyncCtx82 = _emscripten_alloc_async_context(12, sp) | 0; //@line 5146
   $74 = __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t($0 + 4 | 0, $3) | 0; //@line 5147
   if (___async) {
    HEAP32[$AsyncCtx82 >> 2] = 167; //@line 5150
    HEAP32[$AsyncCtx82 + 4 >> 2] = $3; //@line 5152
    HEAP32[$AsyncCtx82 + 8 >> 2] = $1; //@line 5154
    sp = STACKTOP; //@line 5155
    STACKTOP = sp; //@line 5156
    return 0; //@line 5156
   }
   _emscripten_free_async_context($AsyncCtx82 | 0); //@line 5158
   $$1 = ($74 | 0) == 0 ? -1016 : $74; //@line 5161
   STACKTOP = sp; //@line 5162
   return $$1 | 0; //@line 5162
  }
 case 4:
  {
   HEAP8[$0 + 1932 >> 0] = 1; //@line 5167
   $79 = $0 + 1892 | 0; //@line 5168
   $80 = HEAP32[$79 >> 2] | 0; //@line 5169
   if (!$80) {
    $$1 = 0; //@line 5172
    STACKTOP = sp; //@line 5173
    return $$1 | 0; //@line 5173
   }
   $84 = HEAP32[$0 + 2288 >> 2] | 0; //@line 5177
   $86 = HEAP32[$80 + 4 >> 2] | 0; //@line 5179
   $AsyncCtx11 = _emscripten_alloc_async_context(24, sp) | 0; //@line 5180
   FUNCTION_TABLE_vii[$86 & 31]($4, $0 + 1880 | 0); //@line 5181
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 168; //@line 5184
    HEAP32[$AsyncCtx11 + 4 >> 2] = $79; //@line 5186
    HEAP32[$AsyncCtx11 + 8 >> 2] = $4; //@line 5188
    HEAP32[$AsyncCtx11 + 12 >> 2] = $84; //@line 5190
    HEAP32[$AsyncCtx11 + 16 >> 2] = $4; //@line 5192
    HEAP32[$AsyncCtx11 + 20 >> 2] = $1; //@line 5194
    sp = STACKTOP; //@line 5195
    STACKTOP = sp; //@line 5196
    return 0; //@line 5196
   }
   _emscripten_free_async_context($AsyncCtx11 | 0); //@line 5198
   $92 = $4 + 12 | 0; //@line 5200
   HEAP32[$92 >> 2] = HEAP32[$79 >> 2]; //@line 5201
   $AsyncCtx94 = _emscripten_alloc_async_context(16, sp) | 0; //@line 5202
   $93 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($84, $4, 0) | 0; //@line 5203
   if (___async) {
    HEAP32[$AsyncCtx94 >> 2] = 169; //@line 5206
    HEAP32[$AsyncCtx94 + 4 >> 2] = $92; //@line 5208
    HEAP32[$AsyncCtx94 + 8 >> 2] = $4; //@line 5210
    HEAP32[$AsyncCtx94 + 12 >> 2] = $1; //@line 5212
    sp = STACKTOP; //@line 5213
    STACKTOP = sp; //@line 5214
    return 0; //@line 5214
   }
   _emscripten_free_async_context($AsyncCtx94 | 0); //@line 5216
   $97 = HEAP32[$92 >> 2] | 0; //@line 5217
   do {
    if ($97 | 0) {
     $100 = HEAP32[$97 + 8 >> 2] | 0; //@line 5222
     $AsyncCtx15 = _emscripten_alloc_async_context(12, sp) | 0; //@line 5223
     FUNCTION_TABLE_vi[$100 & 1023]($4); //@line 5224
     if (___async) {
      HEAP32[$AsyncCtx15 >> 2] = 170; //@line 5227
      HEAP32[$AsyncCtx15 + 4 >> 2] = $93; //@line 5229
      HEAP32[$AsyncCtx15 + 8 >> 2] = $1; //@line 5231
      sp = STACKTOP; //@line 5232
      STACKTOP = sp; //@line 5233
      return 0; //@line 5233
     } else {
      _emscripten_free_async_context($AsyncCtx15 | 0); //@line 5235
      break;
     }
    }
   } while (0);
   if ($93 | 0) {
    $$1 = 0; //@line 5242
    STACKTOP = sp; //@line 5243
    return $$1 | 0; //@line 5243
   }
   $AsyncCtx113 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5245
   _mbed_assert_internal(12025, 11293, 1174); //@line 5246
   if (___async) {
    HEAP32[$AsyncCtx113 >> 2] = 171; //@line 5249
    HEAP32[$AsyncCtx113 + 4 >> 2] = $1; //@line 5251
    sp = STACKTOP; //@line 5252
    STACKTOP = sp; //@line 5253
    return 0; //@line 5253
   }
   _emscripten_free_async_context($AsyncCtx113 | 0); //@line 5255
   $$1 = 0; //@line 5256
   STACKTOP = sp; //@line 5257
   return $$1 | 0; //@line 5257
  }
 case 3:
  {
   HEAP32[$1 >> 2] = 3; //@line 5261
   $107 = $1 + 4 | 0; //@line 5264
   HEAP32[$107 >> 2] = HEAP32[$0 + 1940 >> 2]; //@line 5265
   $108 = $0 + 4 | 0; //@line 5266
   $AsyncCtx71 = _emscripten_alloc_async_context(36, sp) | 0; //@line 5267
   __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($108, $1) | 0; //@line 5268
   if (___async) {
    HEAP32[$AsyncCtx71 >> 2] = 172; //@line 5271
    HEAP32[$AsyncCtx71 + 4 >> 2] = $0; //@line 5273
    HEAP32[$AsyncCtx71 + 8 >> 2] = $5; //@line 5275
    HEAP32[$AsyncCtx71 + 12 >> 2] = $1; //@line 5277
    HEAP32[$AsyncCtx71 + 16 >> 2] = $107; //@line 5279
    HEAP32[$AsyncCtx71 + 20 >> 2] = $108; //@line 5281
    HEAP32[$AsyncCtx71 + 24 >> 2] = $1; //@line 5283
    HEAP32[$AsyncCtx71 + 28 >> 2] = $1; //@line 5285
    HEAP32[$AsyncCtx71 + 32 >> 2] = $107; //@line 5287
    sp = STACKTOP; //@line 5288
    STACKTOP = sp; //@line 5289
    return 0; //@line 5289
   }
   _emscripten_free_async_context($AsyncCtx71 | 0); //@line 5291
   HEAP32[$1 >> 2] = 4; //@line 5292
   HEAP32[$107 >> 2] = HEAP32[$0 + 1944 >> 2]; //@line 5295
   $AsyncCtx67 = _emscripten_alloc_async_context(36, sp) | 0; //@line 5296
   __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($108, $1) | 0; //@line 5297
   if (___async) {
    HEAP32[$AsyncCtx67 >> 2] = 173; //@line 5300
    HEAP32[$AsyncCtx67 + 4 >> 2] = $0; //@line 5302
    HEAP32[$AsyncCtx67 + 8 >> 2] = $5; //@line 5304
    HEAP32[$AsyncCtx67 + 12 >> 2] = $1; //@line 5306
    HEAP32[$AsyncCtx67 + 16 >> 2] = $107; //@line 5308
    HEAP32[$AsyncCtx67 + 20 >> 2] = $108; //@line 5310
    HEAP32[$AsyncCtx67 + 24 >> 2] = $1; //@line 5312
    HEAP32[$AsyncCtx67 + 28 >> 2] = $1; //@line 5314
    HEAP32[$AsyncCtx67 + 32 >> 2] = $107; //@line 5316
    sp = STACKTOP; //@line 5317
    STACKTOP = sp; //@line 5318
    return 0; //@line 5318
   }
   _emscripten_free_async_context($AsyncCtx67 | 0); //@line 5320
   HEAP32[$1 >> 2] = 5; //@line 5321
   HEAP32[$107 >> 2] = HEAP32[$0 + 1948 >> 2]; //@line 5324
   $AsyncCtx63 = _emscripten_alloc_async_context(36, sp) | 0; //@line 5325
   __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($108, $1) | 0; //@line 5326
   if (___async) {
    HEAP32[$AsyncCtx63 >> 2] = 174; //@line 5329
    HEAP32[$AsyncCtx63 + 4 >> 2] = $0; //@line 5331
    HEAP32[$AsyncCtx63 + 8 >> 2] = $5; //@line 5333
    HEAP32[$AsyncCtx63 + 12 >> 2] = $1; //@line 5335
    HEAP32[$AsyncCtx63 + 16 >> 2] = $107; //@line 5337
    HEAP32[$AsyncCtx63 + 20 >> 2] = $108; //@line 5339
    HEAP32[$AsyncCtx63 + 24 >> 2] = $1; //@line 5341
    HEAP32[$AsyncCtx63 + 28 >> 2] = $1; //@line 5343
    HEAP32[$AsyncCtx63 + 32 >> 2] = $107; //@line 5345
    sp = STACKTOP; //@line 5346
    STACKTOP = sp; //@line 5347
    return 0; //@line 5347
   }
   _emscripten_free_async_context($AsyncCtx63 | 0); //@line 5349
   HEAP32[$1 >> 2] = 6; //@line 5350
   HEAP32[$107 >> 2] = HEAP32[$0 + 1952 >> 2]; //@line 5353
   $AsyncCtx59 = _emscripten_alloc_async_context(32, sp) | 0; //@line 5354
   __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($108, $1) | 0; //@line 5355
   if (___async) {
    HEAP32[$AsyncCtx59 >> 2] = 175; //@line 5358
    HEAP32[$AsyncCtx59 + 4 >> 2] = $1; //@line 5360
    HEAP32[$AsyncCtx59 + 8 >> 2] = $107; //@line 5362
    HEAP32[$AsyncCtx59 + 12 >> 2] = $108; //@line 5364
    HEAP32[$AsyncCtx59 + 16 >> 2] = $1; //@line 5366
    HEAP32[$AsyncCtx59 + 20 >> 2] = $0; //@line 5368
    HEAP32[$AsyncCtx59 + 24 >> 2] = $1; //@line 5370
    HEAP32[$AsyncCtx59 + 28 >> 2] = $5; //@line 5372
    sp = STACKTOP; //@line 5373
    STACKTOP = sp; //@line 5374
    return 0; //@line 5374
   }
   _emscripten_free_async_context($AsyncCtx59 | 0); //@line 5376
   HEAP32[$1 >> 2] = 1; //@line 5377
   HEAP8[$107 >> 0] = 1; //@line 5378
   $AsyncCtx55 = _emscripten_alloc_async_context(16, sp) | 0; //@line 5379
   __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($108, $1) | 0; //@line 5380
   if (___async) {
    HEAP32[$AsyncCtx55 >> 2] = 176; //@line 5383
    HEAP32[$AsyncCtx55 + 4 >> 2] = $0; //@line 5385
    HEAP32[$AsyncCtx55 + 8 >> 2] = $1; //@line 5387
    HEAP32[$AsyncCtx55 + 12 >> 2] = $5; //@line 5389
    sp = STACKTOP; //@line 5390
    STACKTOP = sp; //@line 5391
    return 0; //@line 5391
   }
   _emscripten_free_async_context($AsyncCtx55 | 0); //@line 5393
   HEAP8[$0 + 1932 >> 0] = 1; //@line 5395
   $150 = $0 + 1892 | 0; //@line 5396
   $151 = HEAP32[$150 >> 2] | 0; //@line 5397
   if (!$151) {
    $$1 = 0; //@line 5400
    STACKTOP = sp; //@line 5401
    return $$1 | 0; //@line 5401
   }
   $155 = HEAP32[$0 + 2288 >> 2] | 0; //@line 5405
   $157 = HEAP32[$151 + 4 >> 2] | 0; //@line 5407
   $AsyncCtx18 = _emscripten_alloc_async_context(24, sp) | 0; //@line 5408
   FUNCTION_TABLE_vii[$157 & 31]($5, $0 + 1880 | 0); //@line 5409
   if (___async) {
    HEAP32[$AsyncCtx18 >> 2] = 177; //@line 5412
    HEAP32[$AsyncCtx18 + 4 >> 2] = $150; //@line 5414
    HEAP32[$AsyncCtx18 + 8 >> 2] = $5; //@line 5416
    HEAP32[$AsyncCtx18 + 12 >> 2] = $155; //@line 5418
    HEAP32[$AsyncCtx18 + 16 >> 2] = $5; //@line 5420
    HEAP32[$AsyncCtx18 + 20 >> 2] = $1; //@line 5422
    sp = STACKTOP; //@line 5423
    STACKTOP = sp; //@line 5424
    return 0; //@line 5424
   }
   _emscripten_free_async_context($AsyncCtx18 | 0); //@line 5426
   $163 = $5 + 12 | 0; //@line 5428
   HEAP32[$163 >> 2] = HEAP32[$150 >> 2]; //@line 5429
   $AsyncCtx91 = _emscripten_alloc_async_context(16, sp) | 0; //@line 5430
   $164 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($155, $5, 0) | 0; //@line 5431
   if (___async) {
    HEAP32[$AsyncCtx91 >> 2] = 178; //@line 5434
    HEAP32[$AsyncCtx91 + 4 >> 2] = $163; //@line 5436
    HEAP32[$AsyncCtx91 + 8 >> 2] = $5; //@line 5438
    HEAP32[$AsyncCtx91 + 12 >> 2] = $1; //@line 5440
    sp = STACKTOP; //@line 5441
    STACKTOP = sp; //@line 5442
    return 0; //@line 5442
   }
   _emscripten_free_async_context($AsyncCtx91 | 0); //@line 5444
   $168 = HEAP32[$163 >> 2] | 0; //@line 5445
   do {
    if ($168 | 0) {
     $171 = HEAP32[$168 + 8 >> 2] | 0; //@line 5450
     $AsyncCtx22 = _emscripten_alloc_async_context(12, sp) | 0; //@line 5451
     FUNCTION_TABLE_vi[$171 & 1023]($5); //@line 5452
     if (___async) {
      HEAP32[$AsyncCtx22 >> 2] = 179; //@line 5455
      HEAP32[$AsyncCtx22 + 4 >> 2] = $164; //@line 5457
      HEAP32[$AsyncCtx22 + 8 >> 2] = $1; //@line 5459
      sp = STACKTOP; //@line 5460
      STACKTOP = sp; //@line 5461
      return 0; //@line 5461
     } else {
      _emscripten_free_async_context($AsyncCtx22 | 0); //@line 5463
      break;
     }
    }
   } while (0);
   if ($164 | 0) {
    $$1 = 0; //@line 5470
    STACKTOP = sp; //@line 5471
    return $$1 | 0; //@line 5471
   }
   $AsyncCtx109 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5473
   _mbed_assert_internal(12025, 11293, 1211); //@line 5474
   if (___async) {
    HEAP32[$AsyncCtx109 >> 2] = 180; //@line 5477
    HEAP32[$AsyncCtx109 + 4 >> 2] = $1; //@line 5479
    sp = STACKTOP; //@line 5480
    STACKTOP = sp; //@line 5481
    return 0; //@line 5481
   }
   _emscripten_free_async_context($AsyncCtx109 | 0); //@line 5483
   $$1 = 0; //@line 5484
   STACKTOP = sp; //@line 5485
   return $$1 | 0; //@line 5485
  }
 case 5:
  {
   $176 = $0 + 1964 | 0; //@line 5489
   L108 : do {
    if (!(HEAP8[$176 >> 0] | 0)) {
     HEAP8[$176 >> 0] = 1; //@line 5494
     $AsyncCtx48 = _emscripten_alloc_async_context(56, sp) | 0; //@line 5495
     $179 = __ZN12LoRaWANStack17send_frame_to_macEv($0) | 0; //@line 5496
     if (___async) {
      HEAP32[$AsyncCtx48 >> 2] = 181; //@line 5499
      HEAP32[$AsyncCtx48 + 4 >> 2] = $7; //@line 5501
      HEAP32[$AsyncCtx48 + 8 >> 2] = $8; //@line 5503
      HEAP32[$AsyncCtx48 + 12 >> 2] = $1; //@line 5505
      HEAP32[$AsyncCtx48 + 16 >> 2] = $0; //@line 5507
      HEAP32[$AsyncCtx48 + 20 >> 2] = $6; //@line 5509
      HEAP32[$AsyncCtx48 + 24 >> 2] = $vararg_buffer; //@line 5511
      HEAP32[$AsyncCtx48 + 28 >> 2] = $vararg_buffer; //@line 5513
      HEAP32[$AsyncCtx48 + 32 >> 2] = $vararg_buffer1; //@line 5515
      HEAP32[$AsyncCtx48 + 36 >> 2] = $vararg_buffer1; //@line 5517
      HEAP32[$AsyncCtx48 + 40 >> 2] = $vararg_buffer3; //@line 5519
      HEAP32[$AsyncCtx48 + 44 >> 2] = $vararg_buffer3; //@line 5521
      HEAP32[$AsyncCtx48 + 48 >> 2] = $vararg_buffer5; //@line 5523
      HEAP32[$AsyncCtx48 + 52 >> 2] = $vararg_buffer5; //@line 5525
      sp = STACKTOP; //@line 5526
      STACKTOP = sp; //@line 5527
      return 0; //@line 5527
     }
     _emscripten_free_async_context($AsyncCtx48 | 0); //@line 5529
     switch ($179 | 0) {
     case 0:
      {
       $$029 = 0; //@line 5532
       break L108;
       break;
      }
     case -1014:
      {
       _printf(11245, $vararg_buffer) | 0; //@line 5537
       _printf(11497, $vararg_buffer1) | 0; //@line 5538
       $AsyncCtx44 = _emscripten_alloc_async_context(20, sp) | 0; //@line 5539
       _putchar(10) | 0; //@line 5540
       if (___async) {
        HEAP32[$AsyncCtx44 >> 2] = 182; //@line 5543
        HEAP32[$AsyncCtx44 + 4 >> 2] = $0; //@line 5545
        HEAP32[$AsyncCtx44 + 8 >> 2] = $8; //@line 5547
        HEAP32[$AsyncCtx44 + 12 >> 2] = $6; //@line 5549
        HEAP32[$AsyncCtx44 + 16 >> 2] = $1; //@line 5551
        sp = STACKTOP; //@line 5552
        STACKTOP = sp; //@line 5553
        return 0; //@line 5553
       }
       _emscripten_free_async_context($AsyncCtx44 | 0); //@line 5555
       $197 = $0 + 1892 | 0; //@line 5556
       $198 = HEAP32[$197 >> 2] | 0; //@line 5557
       if (!$198) {
        $$029 = -1014; //@line 5560
        break L108;
       }
       $202 = HEAP32[$0 + 2288 >> 2] | 0; //@line 5565
       $204 = HEAP32[$198 + 4 >> 2] | 0; //@line 5567
       $AsyncCtx25 = _emscripten_alloc_async_context(28, sp) | 0; //@line 5568
       FUNCTION_TABLE_vii[$204 & 31]($6, $0 + 1880 | 0); //@line 5569
       if (___async) {
        HEAP32[$AsyncCtx25 >> 2] = 183; //@line 5572
        HEAP32[$AsyncCtx25 + 4 >> 2] = $197; //@line 5574
        HEAP32[$AsyncCtx25 + 8 >> 2] = $6; //@line 5576
        HEAP32[$AsyncCtx25 + 12 >> 2] = $202; //@line 5578
        HEAP32[$AsyncCtx25 + 16 >> 2] = $6; //@line 5580
        HEAP32[$AsyncCtx25 + 20 >> 2] = $8; //@line 5582
        HEAP32[$AsyncCtx25 + 24 >> 2] = $1; //@line 5584
        sp = STACKTOP; //@line 5585
        STACKTOP = sp; //@line 5586
        return 0; //@line 5586
       }
       _emscripten_free_async_context($AsyncCtx25 | 0); //@line 5588
       $211 = $6 + 12 | 0; //@line 5590
       HEAP32[$211 >> 2] = HEAP32[$197 >> 2]; //@line 5591
       $AsyncCtx88 = _emscripten_alloc_async_context(20, sp) | 0; //@line 5592
       $212 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($202, $6, 5) | 0; //@line 5593
       if (___async) {
        HEAP32[$AsyncCtx88 >> 2] = 184; //@line 5596
        HEAP32[$AsyncCtx88 + 4 >> 2] = $211; //@line 5598
        HEAP32[$AsyncCtx88 + 8 >> 2] = $6; //@line 5600
        HEAP32[$AsyncCtx88 + 12 >> 2] = $8; //@line 5602
        HEAP32[$AsyncCtx88 + 16 >> 2] = $1; //@line 5604
        sp = STACKTOP; //@line 5605
        STACKTOP = sp; //@line 5606
        return 0; //@line 5606
       }
       _emscripten_free_async_context($AsyncCtx88 | 0); //@line 5608
       $217 = HEAP32[$211 >> 2] | 0; //@line 5609
       do {
        if ($217 | 0) {
         $220 = HEAP32[$217 + 8 >> 2] | 0; //@line 5614
         $AsyncCtx29 = _emscripten_alloc_async_context(16, sp) | 0; //@line 5615
         FUNCTION_TABLE_vi[$220 & 1023]($6); //@line 5616
         if (___async) {
          HEAP32[$AsyncCtx29 >> 2] = 185; //@line 5619
          HEAP32[$AsyncCtx29 + 4 >> 2] = $212; //@line 5621
          HEAP32[$AsyncCtx29 + 8 >> 2] = $8; //@line 5623
          HEAP32[$AsyncCtx29 + 12 >> 2] = $1; //@line 5625
          sp = STACKTOP; //@line 5626
          STACKTOP = sp; //@line 5627
          return 0; //@line 5627
         } else {
          _emscripten_free_async_context($AsyncCtx29 | 0); //@line 5629
          break;
         }
        }
       } while (0);
       if ($212 | 0) {
        $$029 = -1014; //@line 5636
        break L108;
       }
       $AsyncCtx105 = _emscripten_alloc_async_context(12, sp) | 0; //@line 5639
       _mbed_assert_internal(12025, 11293, 1231); //@line 5640
       if (___async) {
        HEAP32[$AsyncCtx105 >> 2] = 186; //@line 5643
        HEAP32[$AsyncCtx105 + 4 >> 2] = $8; //@line 5645
        HEAP32[$AsyncCtx105 + 8 >> 2] = $1; //@line 5647
        sp = STACKTOP; //@line 5648
        STACKTOP = sp; //@line 5649
        return 0; //@line 5649
       } else {
        _emscripten_free_async_context($AsyncCtx105 | 0); //@line 5651
        $$029 = -1014; //@line 5652
        break L108;
       }
       break;
      }
     default:
      {
       _printf(11245, $vararg_buffer3) | 0; //@line 5658
       _printf(11532, $vararg_buffer5) | 0; //@line 5659
       $AsyncCtx40 = _emscripten_alloc_async_context(24, sp) | 0; //@line 5660
       _putchar(10) | 0; //@line 5661
       if (___async) {
        HEAP32[$AsyncCtx40 >> 2] = 187; //@line 5664
        HEAP32[$AsyncCtx40 + 4 >> 2] = $0; //@line 5666
        HEAP32[$AsyncCtx40 + 8 >> 2] = $179; //@line 5668
        HEAP32[$AsyncCtx40 + 12 >> 2] = $8; //@line 5670
        HEAP32[$AsyncCtx40 + 16 >> 2] = $7; //@line 5672
        HEAP32[$AsyncCtx40 + 20 >> 2] = $1; //@line 5674
        sp = STACKTOP; //@line 5675
        STACKTOP = sp; //@line 5676
        return 0; //@line 5676
       }
       _emscripten_free_async_context($AsyncCtx40 | 0); //@line 5678
       $232 = $0 + 1892 | 0; //@line 5679
       $233 = HEAP32[$232 >> 2] | 0; //@line 5680
       if (!$233) {
        $$029 = $179; //@line 5683
        break L108;
       }
       $237 = HEAP32[$0 + 2288 >> 2] | 0; //@line 5688
       $239 = HEAP32[$233 + 4 >> 2] | 0; //@line 5690
       $AsyncCtx32 = _emscripten_alloc_async_context(32, sp) | 0; //@line 5691
       FUNCTION_TABLE_vii[$239 & 31]($7, $0 + 1880 | 0); //@line 5692
       if (___async) {
        HEAP32[$AsyncCtx32 >> 2] = 188; //@line 5695
        HEAP32[$AsyncCtx32 + 4 >> 2] = $232; //@line 5697
        HEAP32[$AsyncCtx32 + 8 >> 2] = $7; //@line 5699
        HEAP32[$AsyncCtx32 + 12 >> 2] = $237; //@line 5701
        HEAP32[$AsyncCtx32 + 16 >> 2] = $7; //@line 5703
        HEAP32[$AsyncCtx32 + 20 >> 2] = $179; //@line 5705
        HEAP32[$AsyncCtx32 + 24 >> 2] = $8; //@line 5707
        HEAP32[$AsyncCtx32 + 28 >> 2] = $1; //@line 5709
        sp = STACKTOP; //@line 5710
        STACKTOP = sp; //@line 5711
        return 0; //@line 5711
       }
       _emscripten_free_async_context($AsyncCtx32 | 0); //@line 5713
       $247 = $7 + 12 | 0; //@line 5715
       HEAP32[$247 >> 2] = HEAP32[$232 >> 2]; //@line 5716
       $AsyncCtx85 = _emscripten_alloc_async_context(24, sp) | 0; //@line 5717
       $248 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($237, $7, 6) | 0; //@line 5718
       if (___async) {
        HEAP32[$AsyncCtx85 >> 2] = 189; //@line 5721
        HEAP32[$AsyncCtx85 + 4 >> 2] = $247; //@line 5723
        HEAP32[$AsyncCtx85 + 8 >> 2] = $7; //@line 5725
        HEAP32[$AsyncCtx85 + 12 >> 2] = $179; //@line 5727
        HEAP32[$AsyncCtx85 + 16 >> 2] = $8; //@line 5729
        HEAP32[$AsyncCtx85 + 20 >> 2] = $1; //@line 5731
        sp = STACKTOP; //@line 5732
        STACKTOP = sp; //@line 5733
        return 0; //@line 5733
       }
       _emscripten_free_async_context($AsyncCtx85 | 0); //@line 5735
       $254 = HEAP32[$247 >> 2] | 0; //@line 5736
       do {
        if ($254 | 0) {
         $257 = HEAP32[$254 + 8 >> 2] | 0; //@line 5741
         $AsyncCtx36 = _emscripten_alloc_async_context(20, sp) | 0; //@line 5742
         FUNCTION_TABLE_vi[$257 & 1023]($7); //@line 5743
         if (___async) {
          HEAP32[$AsyncCtx36 >> 2] = 190; //@line 5746
          HEAP32[$AsyncCtx36 + 4 >> 2] = $248; //@line 5748
          HEAP32[$AsyncCtx36 + 8 >> 2] = $179; //@line 5750
          HEAP32[$AsyncCtx36 + 12 >> 2] = $8; //@line 5752
          HEAP32[$AsyncCtx36 + 16 >> 2] = $1; //@line 5754
          sp = STACKTOP; //@line 5755
          STACKTOP = sp; //@line 5756
          return 0; //@line 5756
         } else {
          _emscripten_free_async_context($AsyncCtx36 | 0); //@line 5758
          break;
         }
        }
       } while (0);
       if ($248 | 0) {
        $$029 = $179; //@line 5765
        break L108;
       }
       $AsyncCtx101 = _emscripten_alloc_async_context(16, sp) | 0; //@line 5768
       _mbed_assert_internal(12025, 11293, 1239); //@line 5769
       if (___async) {
        HEAP32[$AsyncCtx101 >> 2] = 191; //@line 5772
        HEAP32[$AsyncCtx101 + 4 >> 2] = $179; //@line 5774
        HEAP32[$AsyncCtx101 + 8 >> 2] = $8; //@line 5776
        HEAP32[$AsyncCtx101 + 12 >> 2] = $1; //@line 5778
        sp = STACKTOP; //@line 5779
        STACKTOP = sp; //@line 5780
        return 0; //@line 5780
       } else {
        _emscripten_free_async_context($AsyncCtx101 | 0); //@line 5782
        $$029 = $179; //@line 5783
        break L108;
       }
      }
     }
    } else {
     $$029 = 0; //@line 5789
    }
   } while (0);
   HEAP32[$8 >> 2] = 6; //@line 5792
   $$1 = $$029; //@line 5793
   STACKTOP = sp; //@line 5794
   return $$1 | 0; //@line 5794
  }
 case 6:
  {
   $$1 = -1018; //@line 5798
   STACKTOP = sp; //@line 5799
   return $$1 | 0; //@line 5799
  }
 case 0:
  {
   $$1 = -1011; //@line 5803
   STACKTOP = sp; //@line 5804
   return $$1 | 0; //@line 5804
  }
 default:
  {
   $$1 = -1002; //@line 5808
   STACKTOP = sp; //@line 5809
   return $$1 | 0; //@line 5809
  }
 }
 return 0; //@line 5812
}
function _equeue_dispatch__async_cb_389($0) {
 $0 = $0 | 0;
 var $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$03956$i = 0, $$03956$i$phi = 0, $$04055$i = 0, $$0405571$i = 0, $$04063$i = 0, $$04159$i = 0, $$04258$i = 0, $$057$i = 0, $$065 = 0, $$06790 = 0, $$2 = 0, $$expand_i1_val = 0, $$expand_i1_val11 = 0, $$expand_i1_val13 = 0, $$expand_i1_val9 = 0, $$sink$in$i$i = 0, $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i73 = 0, $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i72 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $12 = 0, $127 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $152 = 0, $153 = 0, $154 = 0, $156 = 0, $157 = 0, $16 = 0, $165 = 0, $166 = 0, $168 = 0, $171 = 0, $173 = 0, $176 = 0, $179 = 0, $18 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $190 = 0, $193 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $4 = 0, $44 = 0, $45 = 0, $48 = 0, $54 = 0, $6 = 0, $63 = 0, $66 = 0, $67 = 0, $69 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $93 = 0, $95 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0, $$04159$i$looptemp = 0, $$04258$i$looptemp = 0;
 sp = STACKTOP; //@line 28178
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28180
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28182
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28184
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28186
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28188
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28190
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28192
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28194
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 28196
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 28198
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 28200
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 28202
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 28204
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 28206
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 28208
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 28210
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 28212
 $36 = HEAP8[$0 + 72 >> 0] & 1; //@line 28215
 _equeue_mutex_lock($8); //@line 28216
 HEAP8[$10 >> 0] = (HEAPU8[$10 >> 0] | 0) + 1; //@line 28221
 if (((HEAP32[$2 >> 2] | 0) - $6 | 0) < 1) {
  HEAP32[$2 >> 2] = $6; //@line 28226
 }
 $44 = HEAP32[$24 >> 2] | 0; //@line 28228
 HEAP32[$26 >> 2] = $44; //@line 28229
 $45 = $44; //@line 28230
 L6 : do {
  if (!$44) {
   $$04055$i = $20; //@line 28234
   $54 = $45; //@line 28234
   label = 8; //@line 28235
  } else {
   $$04063$i = $20; //@line 28237
   $48 = $45; //@line 28237
   do {
    if (((HEAP32[$48 + 20 >> 2] | 0) - $6 | 0) >= 1) {
     $$04055$i = $$04063$i; //@line 28244
     $54 = $48; //@line 28244
     label = 8; //@line 28245
     break L6;
    }
    $$04063$i = $48 + 8 | 0; //@line 28248
    $48 = HEAP32[$$04063$i >> 2] | 0; //@line 28249
   } while (($48 | 0) != 0);
   HEAP32[$16 >> 2] = 0; //@line 28257
   $$0405571$i = $$04063$i; //@line 28258
  }
 } while (0);
 if ((label | 0) == 8) {
  HEAP32[$16 >> 2] = $54; //@line 28262
  if (!$54) {
   $$0405571$i = $$04055$i; //@line 28265
  } else {
   HEAP32[$54 + 16 >> 2] = $16; //@line 28268
   $$0405571$i = $$04055$i; //@line 28269
  }
 }
 HEAP32[$$0405571$i >> 2] = 0; //@line 28272
 _equeue_mutex_unlock($8); //@line 28273
 $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i72 = HEAP32[$20 >> 2] | 0; //@line 28274
 L15 : do {
  if (!$$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i72) {} else {
   $$04159$i = $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i72; //@line 28279
   $$04258$i = $20; //@line 28279
   do {
    $$04258$i$looptemp = $$04258$i;
    $$04258$i = $$04159$i + 8 | 0; //@line 28281
    $$04159$i$looptemp = $$04159$i;
    $$04159$i = HEAP32[$$04258$i >> 2] | 0; //@line 28282
    $$03956$i = 0; //@line 28283
    $$057$i = $$04159$i$looptemp; //@line 28283
    while (1) {
     HEAP32[$$057$i + 8 >> 2] = $$03956$i; //@line 28286
     $63 = HEAP32[$$057$i + 12 >> 2] | 0; //@line 28288
     if (!$63) {
      break;
     } else {
      $$03956$i$phi = $$057$i; //@line 28293
      $$057$i = $63; //@line 28293
      $$03956$i = $$03956$i$phi; //@line 28293
     }
    }
    HEAP32[$$04258$i$looptemp >> 2] = $$057$i; //@line 28296
   } while (($$04159$i | 0) != 0);
   $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i73 = HEAP32[$20 >> 2] | 0; //@line 28304
   if ($$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i73 | 0) {
    $$06790 = $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i73; //@line 28307
    while (1) {
     $66 = $$06790 + 8 | 0; //@line 28309
     $67 = HEAP32[$66 >> 2] | 0; //@line 28310
     $69 = HEAP32[$$06790 + 32 >> 2] | 0; //@line 28312
     if ($69 | 0) {
      label = 17; //@line 28315
      break;
     }
     $93 = HEAP32[$$06790 + 24 >> 2] | 0; //@line 28319
     if (($93 | 0) > -1) {
      label = 21; //@line 28322
      break;
     }
     $117 = $$06790 + 4 | 0; //@line 28326
     $118 = HEAP8[$117 >> 0] | 0; //@line 28327
     HEAP8[$117 >> 0] = (($118 + 1 & 255) << HEAP32[$34 >> 2] | 0) == 0 ? 1 : ($118 & 255) + 1 & 255; //@line 28336
     $127 = HEAP32[$$06790 + 28 >> 2] | 0; //@line 28338
     if ($127 | 0) {
      label = 25; //@line 28341
      break;
     }
     _equeue_mutex_lock($30); //@line 28344
     $150 = HEAP32[$32 >> 2] | 0; //@line 28345
     L28 : do {
      if (!$150) {
       $$02329$i$i = $32; //@line 28349
       label = 34; //@line 28350
      } else {
       $152 = HEAP32[$$06790 >> 2] | 0; //@line 28352
       $$025$i$i = $32; //@line 28353
       $154 = $150; //@line 28353
       while (1) {
        $153 = HEAP32[$154 >> 2] | 0; //@line 28355
        if ($153 >>> 0 >= $152 >>> 0) {
         break;
        }
        $156 = $154 + 8 | 0; //@line 28360
        $157 = HEAP32[$156 >> 2] | 0; //@line 28361
        if (!$157) {
         $$02329$i$i = $156; //@line 28364
         label = 34; //@line 28365
         break L28;
        } else {
         $$025$i$i = $156; //@line 28368
         $154 = $157; //@line 28368
        }
       }
       if (($153 | 0) == ($152 | 0)) {
        HEAP32[$$06790 + 12 >> 2] = $154; //@line 28374
        $$02330$i$i = $$025$i$i; //@line 28377
        $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 28377
       } else {
        $$02329$i$i = $$025$i$i; //@line 28379
        label = 34; //@line 28380
       }
      }
     } while (0);
     if ((label | 0) == 34) {
      label = 0; //@line 28385
      HEAP32[$$06790 + 12 >> 2] = 0; //@line 28387
      $$02330$i$i = $$02329$i$i; //@line 28388
      $$sink$in$i$i = $$02329$i$i; //@line 28388
     }
     HEAP32[$66 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 28391
     HEAP32[$$02330$i$i >> 2] = $$06790; //@line 28392
     _equeue_mutex_unlock($30); //@line 28393
     if (!$67) {
      break L15;
     } else {
      $$06790 = $67; //@line 28398
     }
    }
    if ((label | 0) == 17) {
     $ReallocAsyncCtx = _emscripten_realloc_async_context(84) | 0; //@line 28403
     FUNCTION_TABLE_vi[$69 & 1023]($$06790 + 36 | 0); //@line 28404
     if (___async) {
      HEAP32[$ReallocAsyncCtx >> 2] = 105; //@line 28407
      $72 = $ReallocAsyncCtx + 4 | 0; //@line 28408
      HEAP32[$72 >> 2] = $2; //@line 28409
      $73 = $ReallocAsyncCtx + 8 | 0; //@line 28410
      HEAP32[$73 >> 2] = $4; //@line 28411
      $74 = $ReallocAsyncCtx + 12 | 0; //@line 28412
      HEAP32[$74 >> 2] = $8; //@line 28413
      $75 = $ReallocAsyncCtx + 16 | 0; //@line 28414
      HEAP32[$75 >> 2] = $10; //@line 28415
      $76 = $ReallocAsyncCtx + 20 | 0; //@line 28416
      HEAP32[$76 >> 2] = $12; //@line 28417
      $77 = $ReallocAsyncCtx + 24 | 0; //@line 28418
      HEAP32[$77 >> 2] = $14; //@line 28419
      $78 = $ReallocAsyncCtx + 28 | 0; //@line 28420
      HEAP32[$78 >> 2] = $16; //@line 28421
      $79 = $ReallocAsyncCtx + 32 | 0; //@line 28422
      HEAP32[$79 >> 2] = $18; //@line 28423
      $80 = $ReallocAsyncCtx + 36 | 0; //@line 28424
      HEAP32[$80 >> 2] = $20; //@line 28425
      $81 = $ReallocAsyncCtx + 40 | 0; //@line 28426
      HEAP32[$81 >> 2] = $22; //@line 28427
      $82 = $ReallocAsyncCtx + 44 | 0; //@line 28428
      HEAP32[$82 >> 2] = $24; //@line 28429
      $83 = $ReallocAsyncCtx + 48 | 0; //@line 28430
      HEAP32[$83 >> 2] = $26; //@line 28431
      $84 = $ReallocAsyncCtx + 52 | 0; //@line 28432
      HEAP32[$84 >> 2] = $28; //@line 28433
      $85 = $ReallocAsyncCtx + 56 | 0; //@line 28434
      HEAP32[$85 >> 2] = $$06790; //@line 28435
      $86 = $ReallocAsyncCtx + 60 | 0; //@line 28436
      HEAP32[$86 >> 2] = $67; //@line 28437
      $87 = $ReallocAsyncCtx + 64 | 0; //@line 28438
      HEAP32[$87 >> 2] = $30; //@line 28439
      $88 = $ReallocAsyncCtx + 68 | 0; //@line 28440
      HEAP32[$88 >> 2] = $32; //@line 28441
      $89 = $ReallocAsyncCtx + 72 | 0; //@line 28442
      HEAP32[$89 >> 2] = $34; //@line 28443
      $90 = $ReallocAsyncCtx + 76 | 0; //@line 28444
      $$expand_i1_val = $36 & 1; //@line 28445
      HEAP8[$90 >> 0] = $$expand_i1_val; //@line 28446
      $91 = $ReallocAsyncCtx + 80 | 0; //@line 28447
      HEAP32[$91 >> 2] = $66; //@line 28448
      sp = STACKTOP; //@line 28449
      return;
     }
     ___async_unwind = 0; //@line 28452
     HEAP32[$ReallocAsyncCtx >> 2] = 105; //@line 28453
     $72 = $ReallocAsyncCtx + 4 | 0; //@line 28454
     HEAP32[$72 >> 2] = $2; //@line 28455
     $73 = $ReallocAsyncCtx + 8 | 0; //@line 28456
     HEAP32[$73 >> 2] = $4; //@line 28457
     $74 = $ReallocAsyncCtx + 12 | 0; //@line 28458
     HEAP32[$74 >> 2] = $8; //@line 28459
     $75 = $ReallocAsyncCtx + 16 | 0; //@line 28460
     HEAP32[$75 >> 2] = $10; //@line 28461
     $76 = $ReallocAsyncCtx + 20 | 0; //@line 28462
     HEAP32[$76 >> 2] = $12; //@line 28463
     $77 = $ReallocAsyncCtx + 24 | 0; //@line 28464
     HEAP32[$77 >> 2] = $14; //@line 28465
     $78 = $ReallocAsyncCtx + 28 | 0; //@line 28466
     HEAP32[$78 >> 2] = $16; //@line 28467
     $79 = $ReallocAsyncCtx + 32 | 0; //@line 28468
     HEAP32[$79 >> 2] = $18; //@line 28469
     $80 = $ReallocAsyncCtx + 36 | 0; //@line 28470
     HEAP32[$80 >> 2] = $20; //@line 28471
     $81 = $ReallocAsyncCtx + 40 | 0; //@line 28472
     HEAP32[$81 >> 2] = $22; //@line 28473
     $82 = $ReallocAsyncCtx + 44 | 0; //@line 28474
     HEAP32[$82 >> 2] = $24; //@line 28475
     $83 = $ReallocAsyncCtx + 48 | 0; //@line 28476
     HEAP32[$83 >> 2] = $26; //@line 28477
     $84 = $ReallocAsyncCtx + 52 | 0; //@line 28478
     HEAP32[$84 >> 2] = $28; //@line 28479
     $85 = $ReallocAsyncCtx + 56 | 0; //@line 28480
     HEAP32[$85 >> 2] = $$06790; //@line 28481
     $86 = $ReallocAsyncCtx + 60 | 0; //@line 28482
     HEAP32[$86 >> 2] = $67; //@line 28483
     $87 = $ReallocAsyncCtx + 64 | 0; //@line 28484
     HEAP32[$87 >> 2] = $30; //@line 28485
     $88 = $ReallocAsyncCtx + 68 | 0; //@line 28486
     HEAP32[$88 >> 2] = $32; //@line 28487
     $89 = $ReallocAsyncCtx + 72 | 0; //@line 28488
     HEAP32[$89 >> 2] = $34; //@line 28489
     $90 = $ReallocAsyncCtx + 76 | 0; //@line 28490
     $$expand_i1_val = $36 & 1; //@line 28491
     HEAP8[$90 >> 0] = $$expand_i1_val; //@line 28492
     $91 = $ReallocAsyncCtx + 80 | 0; //@line 28493
     HEAP32[$91 >> 2] = $66; //@line 28494
     sp = STACKTOP; //@line 28495
     return;
    } else if ((label | 0) == 21) {
     $95 = $$06790 + 20 | 0; //@line 28499
     HEAP32[$95 >> 2] = (HEAP32[$95 >> 2] | 0) + $93; //@line 28502
     $98 = _equeue_tick() | 0; //@line 28503
     $ReallocAsyncCtx4 = _emscripten_realloc_async_context(76) | 0; //@line 28504
     _equeue_enqueue($4, $$06790, $98) | 0; //@line 28505
     if (___async) {
      HEAP32[$ReallocAsyncCtx4 >> 2] = 106; //@line 28508
      $99 = $ReallocAsyncCtx4 + 4 | 0; //@line 28509
      HEAP32[$99 >> 2] = $2; //@line 28510
      $100 = $ReallocAsyncCtx4 + 8 | 0; //@line 28511
      HEAP32[$100 >> 2] = $4; //@line 28512
      $101 = $ReallocAsyncCtx4 + 12 | 0; //@line 28513
      HEAP32[$101 >> 2] = $8; //@line 28514
      $102 = $ReallocAsyncCtx4 + 16 | 0; //@line 28515
      HEAP32[$102 >> 2] = $10; //@line 28516
      $103 = $ReallocAsyncCtx4 + 20 | 0; //@line 28517
      HEAP32[$103 >> 2] = $12; //@line 28518
      $104 = $ReallocAsyncCtx4 + 24 | 0; //@line 28519
      HEAP32[$104 >> 2] = $14; //@line 28520
      $105 = $ReallocAsyncCtx4 + 28 | 0; //@line 28521
      HEAP32[$105 >> 2] = $16; //@line 28522
      $106 = $ReallocAsyncCtx4 + 32 | 0; //@line 28523
      HEAP32[$106 >> 2] = $18; //@line 28524
      $107 = $ReallocAsyncCtx4 + 36 | 0; //@line 28525
      HEAP32[$107 >> 2] = $20; //@line 28526
      $108 = $ReallocAsyncCtx4 + 40 | 0; //@line 28527
      HEAP32[$108 >> 2] = $22; //@line 28528
      $109 = $ReallocAsyncCtx4 + 44 | 0; //@line 28529
      HEAP32[$109 >> 2] = $24; //@line 28530
      $110 = $ReallocAsyncCtx4 + 48 | 0; //@line 28531
      HEAP32[$110 >> 2] = $26; //@line 28532
      $111 = $ReallocAsyncCtx4 + 52 | 0; //@line 28533
      HEAP32[$111 >> 2] = $28; //@line 28534
      $112 = $ReallocAsyncCtx4 + 56 | 0; //@line 28535
      HEAP32[$112 >> 2] = $30; //@line 28536
      $113 = $ReallocAsyncCtx4 + 60 | 0; //@line 28537
      HEAP32[$113 >> 2] = $32; //@line 28538
      $114 = $ReallocAsyncCtx4 + 64 | 0; //@line 28539
      HEAP32[$114 >> 2] = $34; //@line 28540
      $115 = $ReallocAsyncCtx4 + 68 | 0; //@line 28541
      $$expand_i1_val9 = $36 & 1; //@line 28542
      HEAP8[$115 >> 0] = $$expand_i1_val9; //@line 28543
      $116 = $ReallocAsyncCtx4 + 72 | 0; //@line 28544
      HEAP32[$116 >> 2] = $67; //@line 28545
      sp = STACKTOP; //@line 28546
      return;
     }
     ___async_unwind = 0; //@line 28549
     HEAP32[$ReallocAsyncCtx4 >> 2] = 106; //@line 28550
     $99 = $ReallocAsyncCtx4 + 4 | 0; //@line 28551
     HEAP32[$99 >> 2] = $2; //@line 28552
     $100 = $ReallocAsyncCtx4 + 8 | 0; //@line 28553
     HEAP32[$100 >> 2] = $4; //@line 28554
     $101 = $ReallocAsyncCtx4 + 12 | 0; //@line 28555
     HEAP32[$101 >> 2] = $8; //@line 28556
     $102 = $ReallocAsyncCtx4 + 16 | 0; //@line 28557
     HEAP32[$102 >> 2] = $10; //@line 28558
     $103 = $ReallocAsyncCtx4 + 20 | 0; //@line 28559
     HEAP32[$103 >> 2] = $12; //@line 28560
     $104 = $ReallocAsyncCtx4 + 24 | 0; //@line 28561
     HEAP32[$104 >> 2] = $14; //@line 28562
     $105 = $ReallocAsyncCtx4 + 28 | 0; //@line 28563
     HEAP32[$105 >> 2] = $16; //@line 28564
     $106 = $ReallocAsyncCtx4 + 32 | 0; //@line 28565
     HEAP32[$106 >> 2] = $18; //@line 28566
     $107 = $ReallocAsyncCtx4 + 36 | 0; //@line 28567
     HEAP32[$107 >> 2] = $20; //@line 28568
     $108 = $ReallocAsyncCtx4 + 40 | 0; //@line 28569
     HEAP32[$108 >> 2] = $22; //@line 28570
     $109 = $ReallocAsyncCtx4 + 44 | 0; //@line 28571
     HEAP32[$109 >> 2] = $24; //@line 28572
     $110 = $ReallocAsyncCtx4 + 48 | 0; //@line 28573
     HEAP32[$110 >> 2] = $26; //@line 28574
     $111 = $ReallocAsyncCtx4 + 52 | 0; //@line 28575
     HEAP32[$111 >> 2] = $28; //@line 28576
     $112 = $ReallocAsyncCtx4 + 56 | 0; //@line 28577
     HEAP32[$112 >> 2] = $30; //@line 28578
     $113 = $ReallocAsyncCtx4 + 60 | 0; //@line 28579
     HEAP32[$113 >> 2] = $32; //@line 28580
     $114 = $ReallocAsyncCtx4 + 64 | 0; //@line 28581
     HEAP32[$114 >> 2] = $34; //@line 28582
     $115 = $ReallocAsyncCtx4 + 68 | 0; //@line 28583
     $$expand_i1_val9 = $36 & 1; //@line 28584
     HEAP8[$115 >> 0] = $$expand_i1_val9; //@line 28585
     $116 = $ReallocAsyncCtx4 + 72 | 0; //@line 28586
     HEAP32[$116 >> 2] = $67; //@line 28587
     sp = STACKTOP; //@line 28588
     return;
    } else if ((label | 0) == 25) {
     $ReallocAsyncCtx2 = _emscripten_realloc_async_context(84) | 0; //@line 28593
     FUNCTION_TABLE_vi[$127 & 1023]($$06790 + 36 | 0); //@line 28594
     if (___async) {
      HEAP32[$ReallocAsyncCtx2 >> 2] = 107; //@line 28597
      $130 = $ReallocAsyncCtx2 + 4 | 0; //@line 28598
      HEAP32[$130 >> 2] = $2; //@line 28599
      $131 = $ReallocAsyncCtx2 + 8 | 0; //@line 28600
      HEAP32[$131 >> 2] = $4; //@line 28601
      $132 = $ReallocAsyncCtx2 + 12 | 0; //@line 28602
      HEAP32[$132 >> 2] = $8; //@line 28603
      $133 = $ReallocAsyncCtx2 + 16 | 0; //@line 28604
      HEAP32[$133 >> 2] = $10; //@line 28605
      $134 = $ReallocAsyncCtx2 + 20 | 0; //@line 28606
      HEAP32[$134 >> 2] = $12; //@line 28607
      $135 = $ReallocAsyncCtx2 + 24 | 0; //@line 28608
      HEAP32[$135 >> 2] = $14; //@line 28609
      $136 = $ReallocAsyncCtx2 + 28 | 0; //@line 28610
      HEAP32[$136 >> 2] = $16; //@line 28611
      $137 = $ReallocAsyncCtx2 + 32 | 0; //@line 28612
      HEAP32[$137 >> 2] = $18; //@line 28613
      $138 = $ReallocAsyncCtx2 + 36 | 0; //@line 28614
      HEAP32[$138 >> 2] = $20; //@line 28615
      $139 = $ReallocAsyncCtx2 + 40 | 0; //@line 28616
      HEAP32[$139 >> 2] = $22; //@line 28617
      $140 = $ReallocAsyncCtx2 + 44 | 0; //@line 28618
      HEAP32[$140 >> 2] = $24; //@line 28619
      $141 = $ReallocAsyncCtx2 + 48 | 0; //@line 28620
      HEAP32[$141 >> 2] = $26; //@line 28621
      $142 = $ReallocAsyncCtx2 + 52 | 0; //@line 28622
      HEAP32[$142 >> 2] = $28; //@line 28623
      $143 = $ReallocAsyncCtx2 + 56 | 0; //@line 28624
      HEAP32[$143 >> 2] = $30; //@line 28625
      $144 = $ReallocAsyncCtx2 + 60 | 0; //@line 28626
      HEAP32[$144 >> 2] = $32; //@line 28627
      $145 = $ReallocAsyncCtx2 + 64 | 0; //@line 28628
      HEAP32[$145 >> 2] = $34; //@line 28629
      $146 = $ReallocAsyncCtx2 + 68 | 0; //@line 28630
      $$expand_i1_val11 = $36 & 1; //@line 28631
      HEAP8[$146 >> 0] = $$expand_i1_val11; //@line 28632
      $147 = $ReallocAsyncCtx2 + 72 | 0; //@line 28633
      HEAP32[$147 >> 2] = $67; //@line 28634
      $148 = $ReallocAsyncCtx2 + 76 | 0; //@line 28635
      HEAP32[$148 >> 2] = $$06790; //@line 28636
      $149 = $ReallocAsyncCtx2 + 80 | 0; //@line 28637
      HEAP32[$149 >> 2] = $66; //@line 28638
      sp = STACKTOP; //@line 28639
      return;
     }
     ___async_unwind = 0; //@line 28642
     HEAP32[$ReallocAsyncCtx2 >> 2] = 107; //@line 28643
     $130 = $ReallocAsyncCtx2 + 4 | 0; //@line 28644
     HEAP32[$130 >> 2] = $2; //@line 28645
     $131 = $ReallocAsyncCtx2 + 8 | 0; //@line 28646
     HEAP32[$131 >> 2] = $4; //@line 28647
     $132 = $ReallocAsyncCtx2 + 12 | 0; //@line 28648
     HEAP32[$132 >> 2] = $8; //@line 28649
     $133 = $ReallocAsyncCtx2 + 16 | 0; //@line 28650
     HEAP32[$133 >> 2] = $10; //@line 28651
     $134 = $ReallocAsyncCtx2 + 20 | 0; //@line 28652
     HEAP32[$134 >> 2] = $12; //@line 28653
     $135 = $ReallocAsyncCtx2 + 24 | 0; //@line 28654
     HEAP32[$135 >> 2] = $14; //@line 28655
     $136 = $ReallocAsyncCtx2 + 28 | 0; //@line 28656
     HEAP32[$136 >> 2] = $16; //@line 28657
     $137 = $ReallocAsyncCtx2 + 32 | 0; //@line 28658
     HEAP32[$137 >> 2] = $18; //@line 28659
     $138 = $ReallocAsyncCtx2 + 36 | 0; //@line 28660
     HEAP32[$138 >> 2] = $20; //@line 28661
     $139 = $ReallocAsyncCtx2 + 40 | 0; //@line 28662
     HEAP32[$139 >> 2] = $22; //@line 28663
     $140 = $ReallocAsyncCtx2 + 44 | 0; //@line 28664
     HEAP32[$140 >> 2] = $24; //@line 28665
     $141 = $ReallocAsyncCtx2 + 48 | 0; //@line 28666
     HEAP32[$141 >> 2] = $26; //@line 28667
     $142 = $ReallocAsyncCtx2 + 52 | 0; //@line 28668
     HEAP32[$142 >> 2] = $28; //@line 28669
     $143 = $ReallocAsyncCtx2 + 56 | 0; //@line 28670
     HEAP32[$143 >> 2] = $30; //@line 28671
     $144 = $ReallocAsyncCtx2 + 60 | 0; //@line 28672
     HEAP32[$144 >> 2] = $32; //@line 28673
     $145 = $ReallocAsyncCtx2 + 64 | 0; //@line 28674
     HEAP32[$145 >> 2] = $34; //@line 28675
     $146 = $ReallocAsyncCtx2 + 68 | 0; //@line 28676
     $$expand_i1_val11 = $36 & 1; //@line 28677
     HEAP8[$146 >> 0] = $$expand_i1_val11; //@line 28678
     $147 = $ReallocAsyncCtx2 + 72 | 0; //@line 28679
     HEAP32[$147 >> 2] = $67; //@line 28680
     $148 = $ReallocAsyncCtx2 + 76 | 0; //@line 28681
     HEAP32[$148 >> 2] = $$06790; //@line 28682
     $149 = $ReallocAsyncCtx2 + 80 | 0; //@line 28683
     HEAP32[$149 >> 2] = $66; //@line 28684
     sp = STACKTOP; //@line 28685
     return;
    }
   }
  }
 } while (0);
 $165 = _equeue_tick() | 0; //@line 28691
 if ($36) {
  $166 = $18 - $165 | 0; //@line 28693
  if (($166 | 0) < 1) {
   $168 = $4 + 40 | 0; //@line 28696
   if (HEAP32[$168 >> 2] | 0) {
    _equeue_mutex_lock($8); //@line 28700
    $171 = HEAP32[$168 >> 2] | 0; //@line 28701
    if ($171 | 0) {
     $173 = HEAP32[$16 >> 2] | 0; //@line 28704
     if ($173 | 0) {
      $176 = HEAP32[$4 + 44 >> 2] | 0; //@line 28708
      $179 = (HEAP32[$173 + 20 >> 2] | 0) - $165 | 0; //@line 28711
      $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 28715
      FUNCTION_TABLE_vii[$171 & 31]($176, $179 & ~($179 >> 31)); //@line 28716
      if (___async) {
       HEAP32[$ReallocAsyncCtx3 >> 2] = 108; //@line 28719
       $183 = $ReallocAsyncCtx3 + 4 | 0; //@line 28720
       HEAP32[$183 >> 2] = $12; //@line 28721
       $184 = $ReallocAsyncCtx3 + 8 | 0; //@line 28722
       HEAP32[$184 >> 2] = $8; //@line 28723
       $185 = $ReallocAsyncCtx3 + 12 | 0; //@line 28724
       HEAP32[$185 >> 2] = $14; //@line 28725
       sp = STACKTOP; //@line 28726
       return;
      }
      ___async_unwind = 0; //@line 28729
      HEAP32[$ReallocAsyncCtx3 >> 2] = 108; //@line 28730
      $183 = $ReallocAsyncCtx3 + 4 | 0; //@line 28731
      HEAP32[$183 >> 2] = $12; //@line 28732
      $184 = $ReallocAsyncCtx3 + 8 | 0; //@line 28733
      HEAP32[$184 >> 2] = $8; //@line 28734
      $185 = $ReallocAsyncCtx3 + 12 | 0; //@line 28735
      HEAP32[$185 >> 2] = $14; //@line 28736
      sp = STACKTOP; //@line 28737
      return;
     }
    }
    HEAP8[$12 >> 0] = 1; //@line 28741
    _equeue_mutex_unlock($8); //@line 28742
   }
   HEAP8[$14 >> 0] = 0; //@line 28744
   return;
  } else {
   $$065 = $166; //@line 28747
  }
 } else {
  $$065 = -1; //@line 28750
 }
 _equeue_mutex_lock($8); //@line 28752
 $186 = HEAP32[$16 >> 2] | 0; //@line 28753
 if (!$186) {
  $$2 = $$065; //@line 28756
 } else {
  $190 = (HEAP32[$186 + 20 >> 2] | 0) - $165 | 0; //@line 28760
  $193 = $190 & ~($190 >> 31); //@line 28763
  $$2 = $193 >>> 0 < $$065 >>> 0 ? $193 : $$065; //@line 28766
 }
 _equeue_mutex_unlock($8); //@line 28768
 _equeue_sema_wait($28, $$2) | 0; //@line 28769
 do {
  if (HEAP8[$14 >> 0] | 0) {
   _equeue_mutex_lock($8); //@line 28774
   if (!(HEAP8[$14 >> 0] | 0)) {
    _equeue_mutex_unlock($8); //@line 28778
    break;
   }
   HEAP8[$14 >> 0] = 0; //@line 28781
   _equeue_mutex_unlock($8); //@line 28782
   return;
  }
 } while (0);
 $199 = _equeue_tick() | 0; //@line 28786
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(76) | 0; //@line 28787
 _wait_ms(20); //@line 28788
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 109; //@line 28791
  $200 = $ReallocAsyncCtx5 + 4 | 0; //@line 28792
  HEAP32[$200 >> 2] = $2; //@line 28793
  $201 = $ReallocAsyncCtx5 + 8 | 0; //@line 28794
  HEAP32[$201 >> 2] = $4; //@line 28795
  $202 = $ReallocAsyncCtx5 + 12 | 0; //@line 28796
  HEAP32[$202 >> 2] = $199; //@line 28797
  $203 = $ReallocAsyncCtx5 + 16 | 0; //@line 28798
  HEAP32[$203 >> 2] = $8; //@line 28799
  $204 = $ReallocAsyncCtx5 + 20 | 0; //@line 28800
  HEAP32[$204 >> 2] = $10; //@line 28801
  $205 = $ReallocAsyncCtx5 + 24 | 0; //@line 28802
  HEAP32[$205 >> 2] = $12; //@line 28803
  $206 = $ReallocAsyncCtx5 + 28 | 0; //@line 28804
  HEAP32[$206 >> 2] = $14; //@line 28805
  $207 = $ReallocAsyncCtx5 + 32 | 0; //@line 28806
  HEAP32[$207 >> 2] = $16; //@line 28807
  $208 = $ReallocAsyncCtx5 + 36 | 0; //@line 28808
  HEAP32[$208 >> 2] = $18; //@line 28809
  $209 = $ReallocAsyncCtx5 + 40 | 0; //@line 28810
  HEAP32[$209 >> 2] = $20; //@line 28811
  $210 = $ReallocAsyncCtx5 + 44 | 0; //@line 28812
  HEAP32[$210 >> 2] = $22; //@line 28813
  $211 = $ReallocAsyncCtx5 + 48 | 0; //@line 28814
  HEAP32[$211 >> 2] = $24; //@line 28815
  $212 = $ReallocAsyncCtx5 + 52 | 0; //@line 28816
  HEAP32[$212 >> 2] = $26; //@line 28817
  $213 = $ReallocAsyncCtx5 + 56 | 0; //@line 28818
  HEAP32[$213 >> 2] = $28; //@line 28819
  $214 = $ReallocAsyncCtx5 + 60 | 0; //@line 28820
  HEAP32[$214 >> 2] = $30; //@line 28821
  $215 = $ReallocAsyncCtx5 + 64 | 0; //@line 28822
  HEAP32[$215 >> 2] = $32; //@line 28823
  $216 = $ReallocAsyncCtx5 + 68 | 0; //@line 28824
  HEAP32[$216 >> 2] = $34; //@line 28825
  $217 = $ReallocAsyncCtx5 + 72 | 0; //@line 28826
  $$expand_i1_val13 = $36 & 1; //@line 28827
  HEAP8[$217 >> 0] = $$expand_i1_val13; //@line 28828
  sp = STACKTOP; //@line 28829
  return;
 }
 ___async_unwind = 0; //@line 28832
 HEAP32[$ReallocAsyncCtx5 >> 2] = 109; //@line 28833
 $200 = $ReallocAsyncCtx5 + 4 | 0; //@line 28834
 HEAP32[$200 >> 2] = $2; //@line 28835
 $201 = $ReallocAsyncCtx5 + 8 | 0; //@line 28836
 HEAP32[$201 >> 2] = $4; //@line 28837
 $202 = $ReallocAsyncCtx5 + 12 | 0; //@line 28838
 HEAP32[$202 >> 2] = $199; //@line 28839
 $203 = $ReallocAsyncCtx5 + 16 | 0; //@line 28840
 HEAP32[$203 >> 2] = $8; //@line 28841
 $204 = $ReallocAsyncCtx5 + 20 | 0; //@line 28842
 HEAP32[$204 >> 2] = $10; //@line 28843
 $205 = $ReallocAsyncCtx5 + 24 | 0; //@line 28844
 HEAP32[$205 >> 2] = $12; //@line 28845
 $206 = $ReallocAsyncCtx5 + 28 | 0; //@line 28846
 HEAP32[$206 >> 2] = $14; //@line 28847
 $207 = $ReallocAsyncCtx5 + 32 | 0; //@line 28848
 HEAP32[$207 >> 2] = $16; //@line 28849
 $208 = $ReallocAsyncCtx5 + 36 | 0; //@line 28850
 HEAP32[$208 >> 2] = $18; //@line 28851
 $209 = $ReallocAsyncCtx5 + 40 | 0; //@line 28852
 HEAP32[$209 >> 2] = $20; //@line 28853
 $210 = $ReallocAsyncCtx5 + 44 | 0; //@line 28854
 HEAP32[$210 >> 2] = $22; //@line 28855
 $211 = $ReallocAsyncCtx5 + 48 | 0; //@line 28856
 HEAP32[$211 >> 2] = $24; //@line 28857
 $212 = $ReallocAsyncCtx5 + 52 | 0; //@line 28858
 HEAP32[$212 >> 2] = $26; //@line 28859
 $213 = $ReallocAsyncCtx5 + 56 | 0; //@line 28860
 HEAP32[$213 >> 2] = $28; //@line 28861
 $214 = $ReallocAsyncCtx5 + 60 | 0; //@line 28862
 HEAP32[$214 >> 2] = $30; //@line 28863
 $215 = $ReallocAsyncCtx5 + 64 | 0; //@line 28864
 HEAP32[$215 >> 2] = $32; //@line 28865
 $216 = $ReallocAsyncCtx5 + 68 | 0; //@line 28866
 HEAP32[$216 >> 2] = $34; //@line 28867
 $217 = $ReallocAsyncCtx5 + 72 | 0; //@line 28868
 $$expand_i1_val13 = $36 & 1; //@line 28869
 HEAP8[$217 >> 0] = $$expand_i1_val13; //@line 28870
 sp = STACKTOP; //@line 28871
 return;
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv($0) {
 $0 = $0 | 0;
 var $$byval_copy83 = 0, $$pre20 = 0, $1 = 0, $100 = 0, $106 = 0, $11 = 0, $112 = 0, $119 = 0, $12 = 0, $120 = 0, $141 = 0, $15 = 0, $152 = 0, $156 = 0, $160 = 0, $165 = 0, $171 = 0, $172 = 0, $177 = 0, $181 = 0, $184 = 0, $196 = 0, $2 = 0, $204 = 0, $208 = 0, $21 = 0, $214 = 0, $217 = 0, $220 = 0, $232 = 0, $235 = 0, $241 = 0, $244 = 0, $247 = 0, $249 = 0, $250 = 0, $255 = 0, $257 = 0, $258 = 0, $259 = 0, $267 = 0, $268 = 0, $273 = 0, $277 = 0, $278 = 0, $280 = 0, $281 = 0, $282 = 0, $290 = 0, $291 = 0, $3 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $308 = 0, $310 = 0, $315 = 0, $316 = 0, $326 = 0, $329 = 0, $330 = 0, $332 = 0, $333 = 0, $334 = 0, $341 = 0, $342 = 0, $345 = 0, $346 = 0, $348 = 0, $35 = 0, $352 = 0, $353 = 0, $355 = 0, $356 = 0, $357 = 0, $362 = 0, $363 = 0, $4 = 0, $43 = 0, $46 = 0, $51 = 0, $55 = 0, $56 = 0, $76 = 0, $77 = 0, $95 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx2 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx31 = 0, $AsyncCtx35 = 0, $AsyncCtx39 = 0, $AsyncCtx43 = 0, $AsyncCtx47 = 0, $AsyncCtx5 = 0, $AsyncCtx51 = 0, $AsyncCtx55 = 0, $AsyncCtx59 = 0, $AsyncCtx63 = 0, $AsyncCtx8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11815
 STACKTOP = STACKTOP + 16 | 0; //@line 11816
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 11816
 $$byval_copy83 = sp + 8 | 0; //@line 11817
 $1 = sp; //@line 11818
 $2 = $0 + 356 | 0; //@line 11819
 $3 = HEAP32[$2 >> 2] | 0; //@line 11820
 $4 = $0 + 996 | 0; //@line 11821
 $AsyncCtx35 = _emscripten_alloc_async_context(28, sp) | 0; //@line 11822
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($3, $4); //@line 11823
 if (___async) {
  HEAP32[$AsyncCtx35 >> 2] = 368; //@line 11826
  HEAP32[$AsyncCtx35 + 4 >> 2] = $0; //@line 11828
  HEAP32[$AsyncCtx35 + 8 >> 2] = $1; //@line 11830
  HEAP32[$AsyncCtx35 + 12 >> 2] = $1; //@line 11832
  HEAP32[$AsyncCtx35 + 16 >> 2] = $2; //@line 11834
  HEAP32[$AsyncCtx35 + 20 >> 2] = $4; //@line 11836
  HEAP32[$AsyncCtx35 + 24 >> 2] = $1; //@line 11838
  sp = STACKTOP; //@line 11839
  STACKTOP = sp; //@line 11840
  return;
 }
 _emscripten_free_async_context($AsyncCtx35 | 0); //@line 11842
 $11 = $0 + 944 | 0; //@line 11843
 $12 = HEAP8[$11 >> 0] | 0; //@line 11844
 $$pre20 = $0 + 968 | 0; //@line 11847
 do {
  if ($12 & 32) {
   $15 = HEAP32[$$pre20 >> 2] | 0; //@line 11850
   if ($15 & 64 | 0) {
    HEAP32[$$pre20 >> 2] = $15 & -66; //@line 11855
   }
   do {
    if (!($12 & 9)) {
     label = 10; //@line 11861
    } else {
     $21 = $0 + 288 | 0; //@line 11863
     if ((HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($21) | 0) + 4 >> 2] | 0) != 2) {
      if ((HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) + 4 >> 2] | 0) != 2) {
       label = 10; //@line 11875
       break;
      }
     }
     HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 11881
     __ZN14LoRaMacCommand20clear_command_bufferEv($0 + 4 | 0); //@line 11883
     $35 = HEAP8[$0 + 895 >> 0] | 0; //@line 11885
     HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($21) | 0) + 11 >> 0] = $35; //@line 11888
     HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($21) | 0) + 10 >> 0] = 0; //@line 11891
     HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($21) | 0) + 12 >> 2] = 0; //@line 11894
     $152 = $0 + 373 | 0; //@line 11896
    }
   } while (0);
   do {
    if ((label | 0) == 10) {
     $43 = $0 + 373 | 0; //@line 11901
     if (!(HEAP8[$43 >> 0] | 0)) {
      $46 = HEAP8[$11 >> 0] | 0; //@line 11905
      if (!($46 & 9)) {
       $152 = $43; //@line 11909
      } else {
       if ($46 & 8) {
        $51 = $0 + 264 | 0; //@line 11914
        if (!(HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($51) | 0) >> 2] | 0)) {
         $55 = $0 + 897 | 0; //@line 11919
         $56 = HEAP8[$55 >> 0] | 0; //@line 11920
         HEAP8[(__ZN11LoRaMacMlme16get_confirmationEv($51) | 0) + 14 >> 0] = $56; //@line 11923
         if (!(HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($51) | 0) + 4 >> 2] | 0)) {
          HEAP32[$0 + 956 >> 2] = 0; //@line 11930
          HEAP8[$0 + 380 >> 0] = 0; //@line 11932
          HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 11935
          $152 = $43; //@line 11936
          break;
         }
         if ((HEAPU8[$55 >> 0] | 0) >= (HEAPU8[$0 + 896 >> 0] | 0)) {
          HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 11946
          $152 = $43; //@line 11947
          break;
         }
         HEAP8[$11 >> 0] = HEAP8[$11 >> 0] & -33; //@line 11952
         $76 = HEAP32[$0 + 1328 >> 2] | 0; //@line 11954
         HEAP32[$1 >> 2] = 369; //@line 11955
         HEAP32[$1 + 4 >> 2] = 0; //@line 11957
         $AsyncCtx31 = _emscripten_alloc_async_context(36, sp) | 0; //@line 11958
         HEAP32[$$byval_copy83 >> 2] = HEAP32[$1 >> 2]; //@line 11959
         HEAP32[$$byval_copy83 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 11959
         $77 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($76, $0, $$byval_copy83) | 0; //@line 11960
         if (___async) {
          HEAP32[$AsyncCtx31 >> 2] = 370; //@line 11963
          HEAP32[$AsyncCtx31 + 4 >> 2] = $11; //@line 11965
          HEAP32[$AsyncCtx31 + 8 >> 2] = $0; //@line 11967
          HEAP32[$AsyncCtx31 + 12 >> 2] = $1; //@line 11969
          HEAP32[$AsyncCtx31 + 16 >> 2] = $$pre20; //@line 11971
          HEAP32[$AsyncCtx31 + 20 >> 2] = $2; //@line 11973
          HEAP32[$AsyncCtx31 + 24 >> 2] = $4; //@line 11975
          HEAP32[$AsyncCtx31 + 28 >> 2] = $43; //@line 11977
          HEAP32[$AsyncCtx31 + 32 >> 2] = $1; //@line 11979
          sp = STACKTOP; //@line 11980
          STACKTOP = sp; //@line 11981
          return;
         }
         _emscripten_free_async_context($AsyncCtx31 | 0); //@line 11983
         do {
          if (!$77) {
           $AsyncCtx63 = _emscripten_alloc_async_context(36, sp) | 0; //@line 11987
           _mbed_assert_internal(12025, 12034, 194); //@line 11988
           if (___async) {
            HEAP32[$AsyncCtx63 >> 2] = 371; //@line 11991
            HEAP32[$AsyncCtx63 + 4 >> 2] = $11; //@line 11993
            HEAP32[$AsyncCtx63 + 8 >> 2] = $0; //@line 11995
            HEAP32[$AsyncCtx63 + 12 >> 2] = $1; //@line 11997
            HEAP32[$AsyncCtx63 + 16 >> 2] = $$pre20; //@line 11999
            HEAP32[$AsyncCtx63 + 20 >> 2] = $2; //@line 12001
            HEAP32[$AsyncCtx63 + 24 >> 2] = $4; //@line 12003
            HEAP32[$AsyncCtx63 + 28 >> 2] = $43; //@line 12005
            HEAP32[$AsyncCtx63 + 32 >> 2] = $1; //@line 12007
            sp = STACKTOP; //@line 12008
            STACKTOP = sp; //@line 12009
            return;
           } else {
            _emscripten_free_async_context($AsyncCtx63 | 0); //@line 12011
            break;
           }
          }
         } while (0);
         $152 = $43; //@line 12016
         break;
        }
       }
       $95 = $0 + 380 | 0; //@line 12020
       $100 = HEAP8[$11 >> 0] | 0; //@line 12025
       if (!(($100 & 2) == 0 ? (HEAPU8[$95 >> 0] | 0) < (HEAPU8[$0 + 1128 >> 0] | 0) : 0)) {
        if (!($100 & 2)) {
         __ZN14LoRaMacCommand20clear_command_bufferEv($0 + 4 | 0); //@line 12034
         $106 = $0 + 964 | 0; //@line 12035
         HEAP32[$106 >> 2] = (HEAP32[$106 >> 2] | 0) + 1; //@line 12038
        }
        HEAP8[$95 >> 0] = 0; //@line 12040
        if (!(HEAP8[$0 + 370 >> 0] | 0)) {
         $112 = $0 + 956 | 0; //@line 12045
         HEAP32[$112 >> 2] = (HEAP32[$112 >> 2] | 0) + 1; //@line 12048
        }
        HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 12052
        $152 = $43; //@line 12053
        break;
       }
       HEAP8[$11 >> 0] = $100 & -33; //@line 12057
       $119 = HEAP32[$0 + 1328 >> 2] | 0; //@line 12059
       HEAP32[$1 >> 2] = 369; //@line 12060
       HEAP32[$1 + 4 >> 2] = 0; //@line 12062
       $AsyncCtx27 = _emscripten_alloc_async_context(36, sp) | 0; //@line 12063
       HEAP32[$$byval_copy83 >> 2] = HEAP32[$1 >> 2]; //@line 12064
       HEAP32[$$byval_copy83 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 12064
       $120 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($119, $0, $$byval_copy83) | 0; //@line 12065
       if (___async) {
        HEAP32[$AsyncCtx27 >> 2] = 372; //@line 12068
        HEAP32[$AsyncCtx27 + 4 >> 2] = $11; //@line 12070
        HEAP32[$AsyncCtx27 + 8 >> 2] = $0; //@line 12072
        HEAP32[$AsyncCtx27 + 12 >> 2] = $1; //@line 12074
        HEAP32[$AsyncCtx27 + 16 >> 2] = $$pre20; //@line 12076
        HEAP32[$AsyncCtx27 + 20 >> 2] = $1; //@line 12078
        HEAP32[$AsyncCtx27 + 24 >> 2] = $2; //@line 12080
        HEAP32[$AsyncCtx27 + 28 >> 2] = $4; //@line 12082
        HEAP32[$AsyncCtx27 + 32 >> 2] = $43; //@line 12084
        sp = STACKTOP; //@line 12085
        STACKTOP = sp; //@line 12086
        return;
       }
       _emscripten_free_async_context($AsyncCtx27 | 0); //@line 12088
       do {
        if (!$120) {
         $AsyncCtx59 = _emscripten_alloc_async_context(36, sp) | 0; //@line 12092
         _mbed_assert_internal(12025, 12034, 194); //@line 12093
         if (___async) {
          HEAP32[$AsyncCtx59 >> 2] = 373; //@line 12096
          HEAP32[$AsyncCtx59 + 4 >> 2] = $11; //@line 12098
          HEAP32[$AsyncCtx59 + 8 >> 2] = $0; //@line 12100
          HEAP32[$AsyncCtx59 + 12 >> 2] = $1; //@line 12102
          HEAP32[$AsyncCtx59 + 16 >> 2] = $$pre20; //@line 12104
          HEAP32[$AsyncCtx59 + 20 >> 2] = $1; //@line 12106
          HEAP32[$AsyncCtx59 + 24 >> 2] = $2; //@line 12108
          HEAP32[$AsyncCtx59 + 28 >> 2] = $4; //@line 12110
          HEAP32[$AsyncCtx59 + 32 >> 2] = $43; //@line 12112
          sp = STACKTOP; //@line 12113
          STACKTOP = sp; //@line 12114
          return;
         } else {
          _emscripten_free_async_context($AsyncCtx59 | 0); //@line 12116
          break;
         }
        }
       } while (0);
       $152 = $43; //@line 12121
      }
     } else {
      $152 = $43; //@line 12124
     }
    }
   } while (0);
   do {
    if (HEAP8[$11 >> 0] & 2) {
     $141 = $0 + 288 | 0; //@line 12133
     if (!(HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($141) | 0) + 10 >> 0] | 0)) {
      if ((HEAPU8[$0 + 895 >> 0] | 0) <= (HEAPU8[$0 + 894 >> 0] | 0)) {
       break;
      }
     }
     HEAP8[$0 + 377 >> 0] = 0; //@line 12149
     HEAP8[$152 >> 0] = 0; //@line 12150
     if (!(HEAP8[$0 + 370 >> 0] | 0)) {
      $156 = $0 + 956 | 0; //@line 12155
      HEAP32[$156 >> 2] = (HEAP32[$156 >> 2] | 0) + 1; //@line 12158
     }
     $160 = HEAP8[$0 + 895 >> 0] | 0; //@line 12161
     HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($141) | 0) + 11 >> 0] = $160; //@line 12164
     HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 12167
    }
   } while (0);
   $165 = $0 + 377 | 0; //@line 12170
   if (HEAP8[$165 >> 0] | 0) {
    if (!(HEAP32[$$pre20 >> 2] & 16)) {
     HEAP8[$165 >> 0] = 0; //@line 12178
     $171 = $0 + 895 | 0; //@line 12179
     $172 = HEAP8[$171 >> 0] | 0; //@line 12180
     if (!(($172 & 255) < 9 ? ($172 & 255) < (HEAPU8[$0 + 894 >> 0] | 0) : 0)) {
      $217 = HEAP32[$0 >> 2] | 0; //@line 12187
      $220 = HEAP32[(HEAP32[$217 >> 2] | 0) + 16 >> 2] | 0; //@line 12190
      $AsyncCtx = _emscripten_alloc_async_context(36, sp) | 0; //@line 12191
      FUNCTION_TABLE_vi[$220 & 1023]($217); //@line 12192
      if (___async) {
       HEAP32[$AsyncCtx >> 2] = 375; //@line 12195
       HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 12197
       HEAP32[$AsyncCtx + 8 >> 2] = $$pre20; //@line 12199
       HEAP32[$AsyncCtx + 12 >> 2] = $11; //@line 12201
       HEAP32[$AsyncCtx + 16 >> 2] = $152; //@line 12203
       HEAP32[$AsyncCtx + 20 >> 2] = $171; //@line 12205
       HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 12207
       HEAP32[$AsyncCtx + 28 >> 2] = $4; //@line 12209
       HEAP32[$AsyncCtx + 32 >> 2] = $1; //@line 12211
       sp = STACKTOP; //@line 12212
       STACKTOP = sp; //@line 12213
       return;
      }
      _emscripten_free_async_context($AsyncCtx | 0); //@line 12215
      HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 12218
      __ZN14LoRaMacCommand20clear_command_bufferEv($0 + 4 | 0); //@line 12220
      HEAP8[$152 >> 0] = 0; //@line 12221
      $232 = $0 + 288 | 0; //@line 12222
      HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($232) | 0) + 10 >> 0] = 0; //@line 12225
      $235 = HEAP8[$171 >> 0] | 0; //@line 12226
      HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($232) | 0) + 11 >> 0] = $235; //@line 12229
      if (HEAP8[$0 + 370 >> 0] | 0) {
       break;
      }
      $241 = $0 + 956 | 0; //@line 12236
      HEAP32[$241 >> 2] = (HEAP32[$241 >> 2] | 0) + 1; //@line 12239
      break;
     }
     $177 = $172 + 1 << 24 >> 24; //@line 12242
     HEAP8[$171 >> 0] = $177; //@line 12243
     if ($177 & 1) {
      $181 = $0 + 1097 | 0; //@line 12248
      HEAP8[$181 >> 0] = __ZN7LoRaPHY26get_next_lower_tx_datarateEa(HEAP32[$0 >> 2] | 0, HEAP8[$181 >> 0] | 0) | 0; //@line 12251
     }
     $AsyncCtx19 = _emscripten_alloc_async_context(36, sp) | 0; //@line 12253
     $184 = __ZN7LoRaMac11schedule_txEv($0) | 0; //@line 12254
     if (___async) {
      HEAP32[$AsyncCtx19 >> 2] = 374; //@line 12257
      HEAP32[$AsyncCtx19 + 4 >> 2] = $11; //@line 12259
      HEAP32[$AsyncCtx19 + 8 >> 2] = $0; //@line 12261
      HEAP32[$AsyncCtx19 + 12 >> 2] = $1; //@line 12263
      HEAP32[$AsyncCtx19 + 16 >> 2] = $$pre20; //@line 12265
      HEAP32[$AsyncCtx19 + 20 >> 2] = $152; //@line 12267
      HEAP32[$AsyncCtx19 + 24 >> 2] = $171; //@line 12269
      HEAP32[$AsyncCtx19 + 28 >> 2] = $2; //@line 12271
      HEAP32[$AsyncCtx19 + 32 >> 2] = $4; //@line 12273
      sp = STACKTOP; //@line 12274
      STACKTOP = sp; //@line 12275
      return;
     }
     _emscripten_free_async_context($AsyncCtx19 | 0); //@line 12277
     if (!$184) {
      HEAP8[$11 >> 0] = HEAP8[$11 >> 0] & -33; //@line 12282
      break;
     }
     $196 = $0 + 288 | 0; //@line 12285
     HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($196) | 0) + 4 >> 2] = 9; //@line 12288
     __ZN14LoRaMacCommand20clear_command_bufferEv($0 + 4 | 0); //@line 12290
     HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 12293
     HEAP8[$152 >> 0] = 0; //@line 12294
     HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($196) | 0) + 10 >> 0] = 0; //@line 12297
     $204 = HEAP8[$171 >> 0] | 0; //@line 12298
     HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($196) | 0) + 11 >> 0] = $204; //@line 12301
     $208 = HEAP8[$0 + 1097 >> 0] | 0; //@line 12303
     HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($196) | 0) + 8 >> 0] = $208; //@line 12306
     if (!(HEAP8[$0 + 370 >> 0] | 0)) {
      $214 = $0 + 956 | 0; //@line 12311
      HEAP32[$214 >> 2] = (HEAP32[$214 >> 2] | 0) + 1; //@line 12314
     }
    }
   }
  }
 } while (0);
 $244 = HEAP32[$$pre20 >> 2] | 0; //@line 12320
 $247 = $244 & -3; //@line 12323
 if (!($244 & 2)) {
  $249 = $244; //@line 12325
 } else {
  HEAP32[$$pre20 >> 2] = $247; //@line 12327
  $249 = $247; //@line 12328
 }
 do {
  if (!$249) {
   $250 = HEAP8[$11 >> 0] | 0; //@line 12333
   do {
    if (!($250 & 1)) {
     $273 = $250; //@line 12338
    } else {
     HEAP8[$11 >> 0] = $250 & -2; //@line 12341
     $255 = HEAP32[$0 + 1324 >> 2] | 0; //@line 12343
     $257 = __ZN11LoRaMacMcps16get_confirmationEv($0 + 288 | 0) | 0; //@line 12345
     $258 = $255 + 12 | 0; //@line 12346
     $259 = HEAP32[$258 >> 2] | 0; //@line 12347
     do {
      if (!$259) {
       $AsyncCtx55 = _emscripten_alloc_async_context(28, sp) | 0; //@line 12351
       _mbed_assert_internal(13874, 13879, 1102); //@line 12352
       if (___async) {
        HEAP32[$AsyncCtx55 >> 2] = 376; //@line 12355
        HEAP32[$AsyncCtx55 + 4 >> 2] = $11; //@line 12357
        HEAP32[$AsyncCtx55 + 8 >> 2] = $0; //@line 12359
        HEAP32[$AsyncCtx55 + 12 >> 2] = $1; //@line 12361
        HEAP32[$AsyncCtx55 + 16 >> 2] = $258; //@line 12363
        HEAP32[$AsyncCtx55 + 20 >> 2] = $255; //@line 12365
        HEAP32[$AsyncCtx55 + 24 >> 2] = $257; //@line 12367
        sp = STACKTOP; //@line 12368
        STACKTOP = sp; //@line 12369
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx55 | 0); //@line 12371
        $268 = HEAP32[$258 >> 2] | 0; //@line 12373
        break;
       }
      } else {
       $268 = $259; //@line 12377
      }
     } while (0);
     $267 = HEAP32[$268 >> 2] | 0; //@line 12380
     $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 12381
     FUNCTION_TABLE_vii[$267 & 31]($255, $257); //@line 12382
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 377; //@line 12385
      HEAP32[$AsyncCtx2 + 4 >> 2] = $11; //@line 12387
      HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 12389
      HEAP32[$AsyncCtx2 + 12 >> 2] = $1; //@line 12391
      sp = STACKTOP; //@line 12392
      STACKTOP = sp; //@line 12393
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx2 | 0); //@line 12395
      $273 = HEAP8[$11 >> 0] | 0; //@line 12397
      break;
     }
    }
   } while (0);
   do {
    if ($273 & 8) {
     HEAP8[$11 >> 0] = $273 & -9; //@line 12407
     $277 = HEAP32[$0 + 1324 >> 2] | 0; //@line 12409
     $278 = $277 + 32 | 0; //@line 12410
     $280 = __ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0; //@line 12412
     $281 = $277 + 44 | 0; //@line 12413
     $282 = HEAP32[$281 >> 2] | 0; //@line 12414
     do {
      if (!$282) {
       $AsyncCtx51 = _emscripten_alloc_async_context(28, sp) | 0; //@line 12418
       _mbed_assert_internal(13874, 13879, 1102); //@line 12419
       if (___async) {
        HEAP32[$AsyncCtx51 >> 2] = 378; //@line 12422
        HEAP32[$AsyncCtx51 + 4 >> 2] = $11; //@line 12424
        HEAP32[$AsyncCtx51 + 8 >> 2] = $0; //@line 12426
        HEAP32[$AsyncCtx51 + 12 >> 2] = $1; //@line 12428
        HEAP32[$AsyncCtx51 + 16 >> 2] = $278; //@line 12430
        HEAP32[$AsyncCtx51 + 20 >> 2] = $280; //@line 12432
        HEAP32[$AsyncCtx51 + 24 >> 2] = $281; //@line 12434
        sp = STACKTOP; //@line 12435
        STACKTOP = sp; //@line 12436
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx51 | 0); //@line 12438
        $291 = HEAP32[$281 >> 2] | 0; //@line 12440
        break;
       }
      } else {
       $291 = $282; //@line 12444
      }
     } while (0);
     $290 = HEAP32[$291 >> 2] | 0; //@line 12447
     $AsyncCtx5 = _emscripten_alloc_async_context(16, sp) | 0; //@line 12448
     FUNCTION_TABLE_vii[$290 & 31]($278, $280); //@line 12449
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 379; //@line 12452
      HEAP32[$AsyncCtx5 + 4 >> 2] = $11; //@line 12454
      HEAP32[$AsyncCtx5 + 8 >> 2] = $0; //@line 12456
      HEAP32[$AsyncCtx5 + 12 >> 2] = $1; //@line 12458
      sp = STACKTOP; //@line 12459
      STACKTOP = sp; //@line 12460
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 12462
      break;
     }
    }
   } while (0);
   if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($0 + 4 | 0) | 0) {
    HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($0 + 264 | 0) | 0) >> 2] = 4; //@line 12472
    $300 = HEAP8[$11 >> 0] | 16; //@line 12474
    HEAP8[$11 >> 0] = $300; //@line 12475
    $302 = $300; //@line 12476
   } else {
    $302 = HEAP8[$11 >> 0] | 0; //@line 12479
   }
   $301 = $302 & -33; //@line 12481
   HEAP8[$11 >> 0] = $301; //@line 12482
   $308 = $301; //@line 12483
  } else {
   $303 = HEAP32[$2 >> 2] | 0; //@line 12485
   $AsyncCtx15 = _emscripten_alloc_async_context(16, sp) | 0; //@line 12486
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($303, $4, 1e3); //@line 12487
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 380; //@line 12490
    HEAP32[$AsyncCtx15 + 4 >> 2] = $11; //@line 12492
    HEAP32[$AsyncCtx15 + 8 >> 2] = $0; //@line 12494
    HEAP32[$AsyncCtx15 + 12 >> 2] = $1; //@line 12496
    sp = STACKTOP; //@line 12497
    STACKTOP = sp; //@line 12498
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 12500
    $308 = HEAP8[$11 >> 0] | 0; //@line 12502
    break;
   }
  }
 } while (0);
 if (!($308 & 2)) {
  $348 = $308; //@line 12510
 } else {
  $310 = $308 & -3; //@line 12512
  HEAP8[$11 >> 0] = $310; //@line 12513
  if ((HEAP32[$0 + 360 >> 2] | 0) == 2) {
   $315 = HEAP32[$0 + 1328 >> 2] | 0; //@line 12519
   HEAP32[$1 >> 2] = 273; //@line 12520
   HEAP32[$1 + 4 >> 2] = 0; //@line 12522
   $AsyncCtx23 = _emscripten_alloc_async_context(16, sp) | 0; //@line 12523
   HEAP32[$$byval_copy83 >> 2] = HEAP32[$1 >> 2]; //@line 12524
   HEAP32[$$byval_copy83 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 12524
   $316 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($315, $0, $$byval_copy83) | 0; //@line 12525
   if (___async) {
    HEAP32[$AsyncCtx23 >> 2] = 381; //@line 12528
    HEAP32[$AsyncCtx23 + 4 >> 2] = $11; //@line 12530
    HEAP32[$AsyncCtx23 + 8 >> 2] = $0; //@line 12532
    HEAP32[$AsyncCtx23 + 12 >> 2] = $1; //@line 12534
    sp = STACKTOP; //@line 12535
    STACKTOP = sp; //@line 12536
    return;
   }
   _emscripten_free_async_context($AsyncCtx23 | 0); //@line 12538
   do {
    if (!$316) {
     $AsyncCtx47 = _emscripten_alloc_async_context(16, sp) | 0; //@line 12542
     _mbed_assert_internal(12025, 12034, 215); //@line 12543
     if (___async) {
      HEAP32[$AsyncCtx47 >> 2] = 382; //@line 12546
      HEAP32[$AsyncCtx47 + 4 >> 2] = $11; //@line 12548
      HEAP32[$AsyncCtx47 + 8 >> 2] = $0; //@line 12550
      HEAP32[$AsyncCtx47 + 12 >> 2] = $1; //@line 12552
      sp = STACKTOP; //@line 12553
      STACKTOP = sp; //@line 12554
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx47 | 0); //@line 12556
      break;
     }
    }
   } while (0);
   HEAP32[$0 + 364 >> 2] = 2; //@line 12562
   $326 = HEAP8[$11 >> 0] | 0; //@line 12564
  } else {
   $326 = $310; //@line 12566
  }
  do {
   if (!($326 & 4)) {
    $329 = HEAP32[$0 + 1324 >> 2] | 0; //@line 12573
    $330 = $329 + 16 | 0; //@line 12574
    $332 = __ZN11LoRaMacMcps14get_indicationEv($0 + 288 | 0) | 0; //@line 12576
    $333 = $329 + 28 | 0; //@line 12577
    $334 = HEAP32[$333 >> 2] | 0; //@line 12578
    do {
     if (!$334) {
      $AsyncCtx43 = _emscripten_alloc_async_context(24, sp) | 0; //@line 12582
      _mbed_assert_internal(13874, 13879, 1102); //@line 12583
      if (___async) {
       HEAP32[$AsyncCtx43 >> 2] = 383; //@line 12586
       HEAP32[$AsyncCtx43 + 4 >> 2] = $333; //@line 12588
       HEAP32[$AsyncCtx43 + 8 >> 2] = $330; //@line 12590
       HEAP32[$AsyncCtx43 + 12 >> 2] = $332; //@line 12592
       HEAP32[$AsyncCtx43 + 16 >> 2] = $11; //@line 12594
       HEAP32[$AsyncCtx43 + 20 >> 2] = $0; //@line 12596
       sp = STACKTOP; //@line 12597
       STACKTOP = sp; //@line 12598
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx43 | 0); //@line 12600
       $342 = HEAP32[$333 >> 2] | 0; //@line 12602
       break;
      }
     } else {
      $342 = $334; //@line 12606
     }
    } while (0);
    $341 = HEAP32[$342 >> 2] | 0; //@line 12609
    $AsyncCtx8 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12610
    FUNCTION_TABLE_vii[$341 & 31]($330, $332); //@line 12611
    if (___async) {
     HEAP32[$AsyncCtx8 >> 2] = 384; //@line 12614
     HEAP32[$AsyncCtx8 + 4 >> 2] = $11; //@line 12616
     HEAP32[$AsyncCtx8 + 8 >> 2] = $0; //@line 12618
     sp = STACKTOP; //@line 12619
     STACKTOP = sp; //@line 12620
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx8 | 0); //@line 12622
     $346 = HEAP8[$11 >> 0] | 0; //@line 12624
     break;
    }
   } else {
    $346 = $326; //@line 12628
   }
  } while (0);
  $345 = $346 & -5; //@line 12631
  HEAP8[$11 >> 0] = $345; //@line 12632
  $348 = $345; //@line 12633
 }
 if (!($348 & 16)) {
  STACKTOP = sp; //@line 12638
  return;
 }
 HEAP8[$11 >> 0] = $348 & -17; //@line 12641
 $352 = HEAP32[$0 + 1324 >> 2] | 0; //@line 12643
 $353 = $352 + 48 | 0; //@line 12644
 $355 = __ZN11LoRaMacMlme14get_indicationEv($0 + 264 | 0) | 0; //@line 12646
 $356 = $352 + 60 | 0; //@line 12647
 $357 = HEAP32[$356 >> 2] | 0; //@line 12648
 do {
  if (!$357) {
   $AsyncCtx39 = _emscripten_alloc_async_context(16, sp) | 0; //@line 12652
   _mbed_assert_internal(13874, 13879, 1102); //@line 12653
   if (___async) {
    HEAP32[$AsyncCtx39 >> 2] = 385; //@line 12656
    HEAP32[$AsyncCtx39 + 4 >> 2] = $356; //@line 12658
    HEAP32[$AsyncCtx39 + 8 >> 2] = $353; //@line 12660
    HEAP32[$AsyncCtx39 + 12 >> 2] = $355; //@line 12662
    sp = STACKTOP; //@line 12663
    STACKTOP = sp; //@line 12664
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx39 | 0); //@line 12666
    $363 = HEAP32[$356 >> 2] | 0; //@line 12668
    break;
   }
  } else {
   $363 = $357; //@line 12672
  }
 } while (0);
 $362 = HEAP32[$363 >> 2] | 0; //@line 12675
 $AsyncCtx11 = _emscripten_alloc_async_context(4, sp) | 0; //@line 12676
 FUNCTION_TABLE_vii[$362 & 31]($353, $355); //@line 12677
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 386; //@line 12680
  sp = STACKTOP; //@line 12681
  STACKTOP = sp; //@line 12682
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 12684
 STACKTOP = sp; //@line 12685
 return;
}
function _fmt_fp($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$$3484 = 0, $$$3484700 = 0, $$$4502 = 0, $$$564 = 0.0, $$0 = 0, $$0463$lcssa = 0, $$0463587 = 0, $$0464597 = 0, $$0471 = 0.0, $$0479 = 0, $$0487644 = 0, $$0488655 = 0, $$0488657 = 0, $$0496$$9 = 0, $$0497656 = 0, $$0498 = 0, $$0509585 = 0.0, $$0511 = 0, $$0514639 = 0, $$0520 = 0, $$0521 = 0, $$0521$ = 0, $$0523 = 0, $$0527$in633 = 0, $$0530638 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0, $$1480 = 0, $$1482$lcssa = 0, $$1482663 = 0, $$1489643 = 0, $$1499$lcssa = 0, $$1499662 = 0, $$1508586 = 0, $$1512$lcssa = 0, $$1512610 = 0, $$1515 = 0, $$1524 = 0, $$1528617 = 0, $$1531$lcssa = 0, $$1531632 = 0, $$1601 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2483$ph = 0, $$2500 = 0, $$2513 = 0, $$2516621 = 0, $$2529 = 0, $$2532620 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484650 = 0, $$3501$lcssa = 0, $$3501649 = 0, $$3533616 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478593 = 0, $$4492 = 0, $$4502 = 0, $$4518 = 0, $$5$lcssa = 0, $$540 = 0, $$540$ = 0, $$543 = 0.0, $$548 = 0, $$5486$lcssa = 0, $$5486626 = 0, $$5493600 = 0, $$550 = 0, $$5519$ph = 0, $$5605 = 0, $$561 = 0, $$6 = 0, $$6494592 = 0, $$7495604 = 0, $$7505 = 0, $$7505$ = 0, $$7505$ph = 0, $$8 = 0, $$9$ph = 0, $$lcssa675 = 0, $$pn = 0, $$pr = 0, $$pr566 = 0, $$pre$phi691Z2D = 0, $$pre$phi698Z2D = 0, $$pre693 = 0, $$sink = 0, $$sink547$lcssa = 0, $$sink547625 = 0, $$sink560 = 0, $10 = 0, $101 = 0, $104 = 0, $106 = 0, $11 = 0, $113 = 0, $116 = 0, $124 = 0, $125 = 0, $128 = 0, $130 = 0, $131 = 0, $132 = 0, $138 = 0, $140 = 0, $144 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $154 = 0, $160 = 0, $161 = 0, $162 = 0, $174 = 0, $185 = 0, $189 = 0, $190 = 0, $193 = 0, $198 = 0, $199 = 0, $201 = 0, $209 = 0, $212 = 0, $213 = 0, $215 = 0, $217 = 0, $218 = 0, $221 = 0, $225 = 0, $230 = 0, $233 = 0, $236 = 0, $238 = 0, $240 = 0, $242 = 0, $247 = 0, $248 = 0, $251 = 0, $253 = 0, $256 = 0, $259 = 0, $267 = 0, $27 = 0, $270 = 0, $275 = 0, $284 = 0, $285 = 0, $289 = 0, $292 = 0, $294 = 0, $296 = 0, $300 = 0, $303 = 0, $304 = 0, $308 = 0, $31 = 0, $318 = 0, $323 = 0, $326 = 0, $327 = 0, $328 = 0, $330 = 0, $335 = 0, $347 = 0, $35 = 0.0, $351 = 0, $356 = 0, $36 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $369 = 0, $373 = 0, $375 = 0, $378 = 0, $381 = 0, $39 = 0, $41 = 0, $44 = 0, $46 = 0, $6 = 0, $60 = 0, $63 = 0, $66 = 0, $68 = 0, $7 = 0, $76 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 13176
 STACKTOP = STACKTOP + 560 | 0; //@line 13177
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(560); //@line 13177
 $6 = sp + 8 | 0; //@line 13178
 $7 = sp; //@line 13179
 $8 = sp + 524 | 0; //@line 13180
 $9 = $8; //@line 13181
 $10 = sp + 512 | 0; //@line 13182
 HEAP32[$7 >> 2] = 0; //@line 13183
 $11 = $10 + 12 | 0; //@line 13184
 ___DOUBLE_BITS_677($1) | 0; //@line 13185
 if ((tempRet0 | 0) < 0) {
  $$0471 = -$1; //@line 13190
  $$0520 = 1; //@line 13190
  $$0521 = 15167; //@line 13190
 } else {
  $$0471 = $1; //@line 13201
  $$0520 = ($4 & 2049 | 0) != 0 & 1; //@line 13201
  $$0521 = ($4 & 2048 | 0) == 0 ? ($4 & 1 | 0) == 0 ? 15168 : 15173 : 15170; //@line 13201
 }
 ___DOUBLE_BITS_677($$0471) | 0; //@line 13203
 do {
  if (0 == 0 & (tempRet0 & 2146435072 | 0) == 2146435072) {
   $27 = ($5 & 32 | 0) != 0; //@line 13212
   $31 = $$0520 + 3 | 0; //@line 13217
   _pad_676($0, 32, $2, $31, $4 & -65537); //@line 13219
   _out_670($0, $$0521, $$0520); //@line 13220
   _out_670($0, $$0471 != $$0471 | 0.0 != 0.0 ? $27 ? 15194 : 15198 : $27 ? 15186 : 15190, 3); //@line 13221
   _pad_676($0, 32, $2, $31, $4 ^ 8192); //@line 13223
   $$sink560 = $31; //@line 13224
  } else {
   $35 = +_frexpl($$0471, $7) * 2.0; //@line 13227
   $36 = $35 != 0.0; //@line 13228
   if ($36) {
    HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1; //@line 13232
   }
   $39 = $5 | 32; //@line 13234
   if (($39 | 0) == 97) {
    $41 = $5 & 32; //@line 13237
    $$0521$ = ($41 | 0) == 0 ? $$0521 : $$0521 + 9 | 0; //@line 13240
    $44 = $$0520 | 2; //@line 13241
    $46 = 12 - $3 | 0; //@line 13243
    do {
     if ($3 >>> 0 > 11 | ($46 | 0) == 0) {
      $$1472 = $35; //@line 13248
     } else {
      $$0509585 = 8.0; //@line 13250
      $$1508586 = $46; //@line 13250
      do {
       $$1508586 = $$1508586 + -1 | 0; //@line 13252
       $$0509585 = $$0509585 * 16.0; //@line 13253
      } while (($$1508586 | 0) != 0);
      if ((HEAP8[$$0521$ >> 0] | 0) == 45) {
       $$1472 = -($$0509585 + (-$35 - $$0509585)); //@line 13268
       break;
      } else {
       $$1472 = $35 + $$0509585 - $$0509585; //@line 13273
       break;
      }
     }
    } while (0);
    $60 = HEAP32[$7 >> 2] | 0; //@line 13278
    $63 = ($60 | 0) < 0 ? 0 - $60 | 0 : $60; //@line 13281
    $66 = _fmt_u($63, (($63 | 0) < 0) << 31 >> 31, $11) | 0; //@line 13284
    if (($66 | 0) == ($11 | 0)) {
     $68 = $10 + 11 | 0; //@line 13287
     HEAP8[$68 >> 0] = 48; //@line 13288
     $$0511 = $68; //@line 13289
    } else {
     $$0511 = $66; //@line 13291
    }
    HEAP8[$$0511 + -1 >> 0] = ($60 >> 31 & 2) + 43; //@line 13298
    $76 = $$0511 + -2 | 0; //@line 13301
    HEAP8[$76 >> 0] = $5 + 15; //@line 13302
    $77 = ($3 | 0) < 1; //@line 13303
    $79 = ($4 & 8 | 0) == 0; //@line 13305
    $$0523 = $8; //@line 13306
    $$2473 = $$1472; //@line 13306
    while (1) {
     $80 = ~~$$2473; //@line 13308
     $86 = $$0523 + 1 | 0; //@line 13314
     HEAP8[$$0523 >> 0] = $41 | HEAPU8[15202 + $80 >> 0]; //@line 13315
     $$2473 = ($$2473 - +($80 | 0)) * 16.0; //@line 13318
     if (($86 - $9 | 0) == 1) {
      if ($79 & ($77 & $$2473 == 0.0)) {
       $$1524 = $86; //@line 13327
      } else {
       HEAP8[$86 >> 0] = 46; //@line 13330
       $$1524 = $$0523 + 2 | 0; //@line 13331
      }
     } else {
      $$1524 = $86; //@line 13334
     }
     if (!($$2473 != 0.0)) {
      break;
     } else {
      $$0523 = $$1524; //@line 13338
     }
    }
    $$pre693 = $$1524; //@line 13344
    if (!$3) {
     label = 24; //@line 13346
    } else {
     if ((-2 - $9 + $$pre693 | 0) < ($3 | 0)) {
      $$pre$phi691Z2D = $$pre693 - $9 | 0; //@line 13354
      $$sink = $3 + 2 | 0; //@line 13354
     } else {
      label = 24; //@line 13356
     }
    }
    if ((label | 0) == 24) {
     $101 = $$pre693 - $9 | 0; //@line 13360
     $$pre$phi691Z2D = $101; //@line 13361
     $$sink = $101; //@line 13361
    }
    $104 = $11 - $76 | 0; //@line 13365
    $106 = $104 + $44 + $$sink | 0; //@line 13367
    _pad_676($0, 32, $2, $106, $4); //@line 13368
    _out_670($0, $$0521$, $44); //@line 13369
    _pad_676($0, 48, $2, $106, $4 ^ 65536); //@line 13371
    _out_670($0, $8, $$pre$phi691Z2D); //@line 13372
    _pad_676($0, 48, $$sink - $$pre$phi691Z2D | 0, 0, 0); //@line 13374
    _out_670($0, $76, $104); //@line 13375
    _pad_676($0, 32, $2, $106, $4 ^ 8192); //@line 13377
    $$sink560 = $106; //@line 13378
    break;
   }
   $$540 = ($3 | 0) < 0 ? 6 : $3; //@line 13382
   if ($36) {
    $113 = (HEAP32[$7 >> 2] | 0) + -28 | 0; //@line 13386
    HEAP32[$7 >> 2] = $113; //@line 13387
    $$3 = $35 * 268435456.0; //@line 13388
    $$pr = $113; //@line 13388
   } else {
    $$3 = $35; //@line 13391
    $$pr = HEAP32[$7 >> 2] | 0; //@line 13391
   }
   $$561 = ($$pr | 0) < 0 ? $6 : $6 + 288 | 0; //@line 13395
   $$0498 = $$561; //@line 13396
   $$4 = $$3; //@line 13396
   do {
    $116 = ~~$$4 >>> 0; //@line 13398
    HEAP32[$$0498 >> 2] = $116; //@line 13399
    $$0498 = $$0498 + 4 | 0; //@line 13400
    $$4 = ($$4 - +($116 >>> 0)) * 1.0e9; //@line 13403
   } while ($$4 != 0.0);
   if (($$pr | 0) > 0) {
    $$1482663 = $$561; //@line 13413
    $$1499662 = $$0498; //@line 13413
    $124 = $$pr; //@line 13413
    while (1) {
     $125 = ($124 | 0) < 29 ? $124 : 29; //@line 13416
     $$0488655 = $$1499662 + -4 | 0; //@line 13417
     if ($$0488655 >>> 0 < $$1482663 >>> 0) {
      $$2483$ph = $$1482663; //@line 13420
     } else {
      $$0488657 = $$0488655; //@line 13422
      $$0497656 = 0; //@line 13422
      do {
       $128 = _bitshift64Shl(HEAP32[$$0488657 >> 2] | 0, 0, $125 | 0) | 0; //@line 13425
       $130 = _i64Add($128 | 0, tempRet0 | 0, $$0497656 | 0, 0) | 0; //@line 13427
       $131 = tempRet0; //@line 13428
       $132 = ___uremdi3($130 | 0, $131 | 0, 1e9, 0) | 0; //@line 13429
       HEAP32[$$0488657 >> 2] = $132; //@line 13431
       $$0497656 = ___udivdi3($130 | 0, $131 | 0, 1e9, 0) | 0; //@line 13432
       $$0488657 = $$0488657 + -4 | 0; //@line 13434
      } while ($$0488657 >>> 0 >= $$1482663 >>> 0);
      if (!$$0497656) {
       $$2483$ph = $$1482663; //@line 13444
      } else {
       $138 = $$1482663 + -4 | 0; //@line 13446
       HEAP32[$138 >> 2] = $$0497656; //@line 13447
       $$2483$ph = $138; //@line 13448
      }
     }
     $$2500 = $$1499662; //@line 13451
     while (1) {
      if ($$2500 >>> 0 <= $$2483$ph >>> 0) {
       break;
      }
      $140 = $$2500 + -4 | 0; //@line 13457
      if (!(HEAP32[$140 >> 2] | 0)) {
       $$2500 = $140; //@line 13461
      } else {
       break;
      }
     }
     $144 = (HEAP32[$7 >> 2] | 0) - $125 | 0; //@line 13467
     HEAP32[$7 >> 2] = $144; //@line 13468
     if (($144 | 0) > 0) {
      $$1482663 = $$2483$ph; //@line 13471
      $$1499662 = $$2500; //@line 13471
      $124 = $144; //@line 13471
     } else {
      $$1482$lcssa = $$2483$ph; //@line 13473
      $$1499$lcssa = $$2500; //@line 13473
      $$pr566 = $144; //@line 13473
      break;
     }
    }
   } else {
    $$1482$lcssa = $$561; //@line 13478
    $$1499$lcssa = $$0498; //@line 13478
    $$pr566 = $$pr; //@line 13478
   }
   if (($$pr566 | 0) < 0) {
    $149 = (($$540 + 25 | 0) / 9 | 0) + 1 | 0; //@line 13484
    $150 = ($39 | 0) == 102; //@line 13485
    $$3484650 = $$1482$lcssa; //@line 13486
    $$3501649 = $$1499$lcssa; //@line 13486
    $152 = $$pr566; //@line 13486
    while (1) {
     $151 = 0 - $152 | 0; //@line 13488
     $154 = ($151 | 0) < 9 ? $151 : 9; //@line 13490
     if ($$3484650 >>> 0 < $$3501649 >>> 0) {
      $160 = (1 << $154) + -1 | 0; //@line 13494
      $161 = 1e9 >>> $154; //@line 13495
      $$0487644 = 0; //@line 13496
      $$1489643 = $$3484650; //@line 13496
      do {
       $162 = HEAP32[$$1489643 >> 2] | 0; //@line 13498
       HEAP32[$$1489643 >> 2] = ($162 >>> $154) + $$0487644; //@line 13502
       $$0487644 = Math_imul($162 & $160, $161) | 0; //@line 13503
       $$1489643 = $$1489643 + 4 | 0; //@line 13504
      } while ($$1489643 >>> 0 < $$3501649 >>> 0);
      $$$3484 = (HEAP32[$$3484650 >> 2] | 0) == 0 ? $$3484650 + 4 | 0 : $$3484650; //@line 13515
      if (!$$0487644) {
       $$$3484700 = $$$3484; //@line 13518
       $$4502 = $$3501649; //@line 13518
      } else {
       HEAP32[$$3501649 >> 2] = $$0487644; //@line 13521
       $$$3484700 = $$$3484; //@line 13522
       $$4502 = $$3501649 + 4 | 0; //@line 13522
      }
     } else {
      $$$3484700 = (HEAP32[$$3484650 >> 2] | 0) == 0 ? $$3484650 + 4 | 0 : $$3484650; //@line 13529
      $$4502 = $$3501649; //@line 13529
     }
     $174 = $150 ? $$561 : $$$3484700; //@line 13531
     $$$4502 = ($$4502 - $174 >> 2 | 0) > ($149 | 0) ? $174 + ($149 << 2) | 0 : $$4502; //@line 13538
     $152 = (HEAP32[$7 >> 2] | 0) + $154 | 0; //@line 13540
     HEAP32[$7 >> 2] = $152; //@line 13541
     if (($152 | 0) >= 0) {
      $$3484$lcssa = $$$3484700; //@line 13546
      $$3501$lcssa = $$$4502; //@line 13546
      break;
     } else {
      $$3484650 = $$$3484700; //@line 13544
      $$3501649 = $$$4502; //@line 13544
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa; //@line 13551
    $$3501$lcssa = $$1499$lcssa; //@line 13551
   }
   $185 = $$561; //@line 13554
   if ($$3484$lcssa >>> 0 < $$3501$lcssa >>> 0) {
    $189 = ($185 - $$3484$lcssa >> 2) * 9 | 0; //@line 13559
    $190 = HEAP32[$$3484$lcssa >> 2] | 0; //@line 13560
    if ($190 >>> 0 < 10) {
     $$1515 = $189; //@line 13563
    } else {
     $$0514639 = $189; //@line 13565
     $$0530638 = 10; //@line 13565
     while (1) {
      $$0530638 = $$0530638 * 10 | 0; //@line 13567
      $193 = $$0514639 + 1 | 0; //@line 13568
      if ($190 >>> 0 < $$0530638 >>> 0) {
       $$1515 = $193; //@line 13571
       break;
      } else {
       $$0514639 = $193; //@line 13574
      }
     }
    }
   } else {
    $$1515 = 0; //@line 13579
   }
   $198 = ($39 | 0) == 103; //@line 13584
   $199 = ($$540 | 0) != 0; //@line 13585
   $201 = $$540 - (($39 | 0) != 102 ? $$1515 : 0) + (($199 & $198) << 31 >> 31) | 0; //@line 13588
   if (($201 | 0) < ((($$3501$lcssa - $185 >> 2) * 9 | 0) + -9 | 0)) {
    $209 = $201 + 9216 | 0; //@line 13597
    $212 = $$561 + 4 + ((($209 | 0) / 9 | 0) + -1024 << 2) | 0; //@line 13600
    $213 = ($209 | 0) % 9 | 0; //@line 13601
    if (($213 | 0) < 8) {
     $$0527$in633 = $213; //@line 13604
     $$1531632 = 10; //@line 13604
     while (1) {
      $215 = $$1531632 * 10 | 0; //@line 13607
      if (($$0527$in633 | 0) < 7) {
       $$0527$in633 = $$0527$in633 + 1 | 0; //@line 13610
       $$1531632 = $215; //@line 13610
      } else {
       $$1531$lcssa = $215; //@line 13612
       break;
      }
     }
    } else {
     $$1531$lcssa = 10; //@line 13617
    }
    $217 = HEAP32[$212 >> 2] | 0; //@line 13619
    $218 = ($217 >>> 0) % ($$1531$lcssa >>> 0) | 0; //@line 13620
    $221 = ($212 + 4 | 0) == ($$3501$lcssa | 0); //@line 13623
    if ($221 & ($218 | 0) == 0) {
     $$4492 = $212; //@line 13626
     $$4518 = $$1515; //@line 13626
     $$8 = $$3484$lcssa; //@line 13626
    } else {
     $$543 = ((($217 >>> 0) / ($$1531$lcssa >>> 0) | 0) & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0; //@line 13631
     $225 = ($$1531$lcssa | 0) / 2 | 0; //@line 13632
     $$$564 = $218 >>> 0 < $225 >>> 0 ? .5 : $221 & ($218 | 0) == ($225 | 0) ? 1.0 : 1.5; //@line 13637
     if (!$$0520) {
      $$1467 = $$$564; //@line 13640
      $$1469 = $$543; //@line 13640
     } else {
      $230 = (HEAP8[$$0521 >> 0] | 0) == 45; //@line 13643
      $$1467 = $230 ? -$$$564 : $$$564; //@line 13648
      $$1469 = $230 ? -$$543 : $$543; //@line 13648
     }
     $233 = $217 - $218 | 0; //@line 13650
     HEAP32[$212 >> 2] = $233; //@line 13651
     if ($$1469 + $$1467 != $$1469) {
      $236 = $233 + $$1531$lcssa | 0; //@line 13655
      HEAP32[$212 >> 2] = $236; //@line 13656
      if ($236 >>> 0 > 999999999) {
       $$5486626 = $$3484$lcssa; //@line 13659
       $$sink547625 = $212; //@line 13659
       while (1) {
        $238 = $$sink547625 + -4 | 0; //@line 13661
        HEAP32[$$sink547625 >> 2] = 0; //@line 13662
        if ($238 >>> 0 < $$5486626 >>> 0) {
         $240 = $$5486626 + -4 | 0; //@line 13665
         HEAP32[$240 >> 2] = 0; //@line 13666
         $$6 = $240; //@line 13667
        } else {
         $$6 = $$5486626; //@line 13669
        }
        $242 = (HEAP32[$238 >> 2] | 0) + 1 | 0; //@line 13672
        HEAP32[$238 >> 2] = $242; //@line 13673
        if ($242 >>> 0 > 999999999) {
         $$5486626 = $$6; //@line 13676
         $$sink547625 = $238; //@line 13676
        } else {
         $$5486$lcssa = $$6; //@line 13678
         $$sink547$lcssa = $238; //@line 13678
         break;
        }
       }
      } else {
       $$5486$lcssa = $$3484$lcssa; //@line 13683
       $$sink547$lcssa = $212; //@line 13683
      }
      $247 = ($185 - $$5486$lcssa >> 2) * 9 | 0; //@line 13688
      $248 = HEAP32[$$5486$lcssa >> 2] | 0; //@line 13689
      if ($248 >>> 0 < 10) {
       $$4492 = $$sink547$lcssa; //@line 13692
       $$4518 = $247; //@line 13692
       $$8 = $$5486$lcssa; //@line 13692
      } else {
       $$2516621 = $247; //@line 13694
       $$2532620 = 10; //@line 13694
       while (1) {
        $$2532620 = $$2532620 * 10 | 0; //@line 13696
        $251 = $$2516621 + 1 | 0; //@line 13697
        if ($248 >>> 0 < $$2532620 >>> 0) {
         $$4492 = $$sink547$lcssa; //@line 13700
         $$4518 = $251; //@line 13700
         $$8 = $$5486$lcssa; //@line 13700
         break;
        } else {
         $$2516621 = $251; //@line 13703
        }
       }
      }
     } else {
      $$4492 = $212; //@line 13708
      $$4518 = $$1515; //@line 13708
      $$8 = $$3484$lcssa; //@line 13708
     }
    }
    $253 = $$4492 + 4 | 0; //@line 13711
    $$5519$ph = $$4518; //@line 13714
    $$7505$ph = $$3501$lcssa >>> 0 > $253 >>> 0 ? $253 : $$3501$lcssa; //@line 13714
    $$9$ph = $$8; //@line 13714
   } else {
    $$5519$ph = $$1515; //@line 13716
    $$7505$ph = $$3501$lcssa; //@line 13716
    $$9$ph = $$3484$lcssa; //@line 13716
   }
   $$7505 = $$7505$ph; //@line 13718
   while (1) {
    if ($$7505 >>> 0 <= $$9$ph >>> 0) {
     $$lcssa675 = 0; //@line 13722
     break;
    }
    $256 = $$7505 + -4 | 0; //@line 13725
    if (!(HEAP32[$256 >> 2] | 0)) {
     $$7505 = $256; //@line 13729
    } else {
     $$lcssa675 = 1; //@line 13731
     break;
    }
   }
   $259 = 0 - $$5519$ph | 0; //@line 13735
   do {
    if ($198) {
     $$540$ = $$540 + (($199 ^ 1) & 1) | 0; //@line 13740
     if (($$540$ | 0) > ($$5519$ph | 0) & ($$5519$ph | 0) > -5) {
      $$0479 = $5 + -1 | 0; //@line 13748
      $$2476 = $$540$ + -1 - $$5519$ph | 0; //@line 13748
     } else {
      $$0479 = $5 + -2 | 0; //@line 13752
      $$2476 = $$540$ + -1 | 0; //@line 13752
     }
     $267 = $4 & 8; //@line 13754
     if (!$267) {
      if ($$lcssa675) {
       $270 = HEAP32[$$7505 + -4 >> 2] | 0; //@line 13759
       if (!$270) {
        $$2529 = 9; //@line 13762
       } else {
        if (!(($270 >>> 0) % 10 | 0)) {
         $$1528617 = 0; //@line 13767
         $$3533616 = 10; //@line 13767
         while (1) {
          $$3533616 = $$3533616 * 10 | 0; //@line 13769
          $275 = $$1528617 + 1 | 0; //@line 13770
          if (($270 >>> 0) % ($$3533616 >>> 0) | 0 | 0) {
           $$2529 = $275; //@line 13776
           break;
          } else {
           $$1528617 = $275; //@line 13774
          }
         }
        } else {
         $$2529 = 0; //@line 13781
        }
       }
      } else {
       $$2529 = 9; //@line 13785
      }
      $284 = (($$7505 - $185 >> 2) * 9 | 0) + -9 | 0; //@line 13793
      if (($$0479 | 32 | 0) == 102) {
       $285 = $284 - $$2529 | 0; //@line 13795
       $$548 = ($285 | 0) > 0 ? $285 : 0; //@line 13797
       $$1480 = $$0479; //@line 13800
       $$3477 = ($$2476 | 0) < ($$548 | 0) ? $$2476 : $$548; //@line 13800
       $$pre$phi698Z2D = 0; //@line 13800
       break;
      } else {
       $289 = $284 + $$5519$ph - $$2529 | 0; //@line 13804
       $$550 = ($289 | 0) > 0 ? $289 : 0; //@line 13806
       $$1480 = $$0479; //@line 13809
       $$3477 = ($$2476 | 0) < ($$550 | 0) ? $$2476 : $$550; //@line 13809
       $$pre$phi698Z2D = 0; //@line 13809
       break;
      }
     } else {
      $$1480 = $$0479; //@line 13813
      $$3477 = $$2476; //@line 13813
      $$pre$phi698Z2D = $267; //@line 13813
     }
    } else {
     $$1480 = $5; //@line 13817
     $$3477 = $$540; //@line 13817
     $$pre$phi698Z2D = $4 & 8; //@line 13817
    }
   } while (0);
   $292 = $$3477 | $$pre$phi698Z2D; //@line 13820
   $294 = ($292 | 0) != 0 & 1; //@line 13822
   $296 = ($$1480 | 32 | 0) == 102; //@line 13824
   if ($296) {
    $$2513 = 0; //@line 13828
    $$pn = ($$5519$ph | 0) > 0 ? $$5519$ph : 0; //@line 13828
   } else {
    $300 = ($$5519$ph | 0) < 0 ? $259 : $$5519$ph; //@line 13831
    $303 = _fmt_u($300, (($300 | 0) < 0) << 31 >> 31, $11) | 0; //@line 13834
    $304 = $11; //@line 13835
    if (($304 - $303 | 0) < 2) {
     $$1512610 = $303; //@line 13840
     while (1) {
      $308 = $$1512610 + -1 | 0; //@line 13842
      HEAP8[$308 >> 0] = 48; //@line 13843
      if (($304 - $308 | 0) < 2) {
       $$1512610 = $308; //@line 13848
      } else {
       $$1512$lcssa = $308; //@line 13850
       break;
      }
     }
    } else {
     $$1512$lcssa = $303; //@line 13855
    }
    HEAP8[$$1512$lcssa + -1 >> 0] = ($$5519$ph >> 31 & 2) + 43; //@line 13862
    $318 = $$1512$lcssa + -2 | 0; //@line 13864
    HEAP8[$318 >> 0] = $$1480; //@line 13865
    $$2513 = $318; //@line 13868
    $$pn = $304 - $318 | 0; //@line 13868
   }
   $323 = $$0520 + 1 + $$3477 + $294 + $$pn | 0; //@line 13873
   _pad_676($0, 32, $2, $323, $4); //@line 13874
   _out_670($0, $$0521, $$0520); //@line 13875
   _pad_676($0, 48, $2, $323, $4 ^ 65536); //@line 13877
   if ($296) {
    $$0496$$9 = $$9$ph >>> 0 > $$561 >>> 0 ? $$561 : $$9$ph; //@line 13880
    $326 = $8 + 9 | 0; //@line 13881
    $327 = $326; //@line 13882
    $328 = $8 + 8 | 0; //@line 13883
    $$5493600 = $$0496$$9; //@line 13884
    do {
     $330 = _fmt_u(HEAP32[$$5493600 >> 2] | 0, 0, $326) | 0; //@line 13887
     if (($$5493600 | 0) == ($$0496$$9 | 0)) {
      if (($330 | 0) == ($326 | 0)) {
       HEAP8[$328 >> 0] = 48; //@line 13892
       $$1465 = $328; //@line 13893
      } else {
       $$1465 = $330; //@line 13895
      }
     } else {
      if ($330 >>> 0 > $8 >>> 0) {
       _memset($8 | 0, 48, $330 - $9 | 0) | 0; //@line 13902
       $$0464597 = $330; //@line 13903
       while (1) {
        $335 = $$0464597 + -1 | 0; //@line 13905
        if ($335 >>> 0 > $8 >>> 0) {
         $$0464597 = $335; //@line 13908
        } else {
         $$1465 = $335; //@line 13910
         break;
        }
       }
      } else {
       $$1465 = $330; //@line 13915
      }
     }
     _out_670($0, $$1465, $327 - $$1465 | 0); //@line 13920
     $$5493600 = $$5493600 + 4 | 0; //@line 13921
    } while ($$5493600 >>> 0 <= $$561 >>> 0);
    if ($292 | 0) {
     _out_670($0, 15218, 1); //@line 13931
    }
    if ($$5493600 >>> 0 < $$7505 >>> 0 & ($$3477 | 0) > 0) {
     $$4478593 = $$3477; //@line 13937
     $$6494592 = $$5493600; //@line 13937
     while (1) {
      $347 = _fmt_u(HEAP32[$$6494592 >> 2] | 0, 0, $326) | 0; //@line 13940
      if ($347 >>> 0 > $8 >>> 0) {
       _memset($8 | 0, 48, $347 - $9 | 0) | 0; //@line 13945
       $$0463587 = $347; //@line 13946
       while (1) {
        $351 = $$0463587 + -1 | 0; //@line 13948
        if ($351 >>> 0 > $8 >>> 0) {
         $$0463587 = $351; //@line 13951
        } else {
         $$0463$lcssa = $351; //@line 13953
         break;
        }
       }
      } else {
       $$0463$lcssa = $347; //@line 13958
      }
      _out_670($0, $$0463$lcssa, ($$4478593 | 0) < 9 ? $$4478593 : 9); //@line 13962
      $$6494592 = $$6494592 + 4 | 0; //@line 13963
      $356 = $$4478593 + -9 | 0; //@line 13964
      if (!($$6494592 >>> 0 < $$7505 >>> 0 & ($$4478593 | 0) > 9)) {
       $$4478$lcssa = $356; //@line 13971
       break;
      } else {
       $$4478593 = $356; //@line 13969
      }
     }
    } else {
     $$4478$lcssa = $$3477; //@line 13976
    }
    _pad_676($0, 48, $$4478$lcssa + 9 | 0, 9, 0); //@line 13979
   } else {
    $$7505$ = $$lcssa675 ? $$7505 : $$9$ph + 4 | 0; //@line 13982
    if (($$3477 | 0) > -1) {
     $363 = $8 + 9 | 0; //@line 13985
     $364 = ($$pre$phi698Z2D | 0) == 0; //@line 13986
     $365 = $363; //@line 13987
     $366 = 0 - $9 | 0; //@line 13988
     $367 = $8 + 8 | 0; //@line 13989
     $$5605 = $$3477; //@line 13990
     $$7495604 = $$9$ph; //@line 13990
     while (1) {
      $369 = _fmt_u(HEAP32[$$7495604 >> 2] | 0, 0, $363) | 0; //@line 13993
      if (($369 | 0) == ($363 | 0)) {
       HEAP8[$367 >> 0] = 48; //@line 13996
       $$0 = $367; //@line 13997
      } else {
       $$0 = $369; //@line 13999
      }
      do {
       if (($$7495604 | 0) == ($$9$ph | 0)) {
        $375 = $$0 + 1 | 0; //@line 14004
        _out_670($0, $$0, 1); //@line 14005
        if ($364 & ($$5605 | 0) < 1) {
         $$2 = $375; //@line 14009
         break;
        }
        _out_670($0, 15218, 1); //@line 14012
        $$2 = $375; //@line 14013
       } else {
        if ($$0 >>> 0 <= $8 >>> 0) {
         $$2 = $$0; //@line 14017
         break;
        }
        _memset($8 | 0, 48, $$0 + $366 | 0) | 0; //@line 14022
        $$1601 = $$0; //@line 14023
        while (1) {
         $373 = $$1601 + -1 | 0; //@line 14025
         if ($373 >>> 0 > $8 >>> 0) {
          $$1601 = $373; //@line 14028
         } else {
          $$2 = $373; //@line 14030
          break;
         }
        }
       }
      } while (0);
      $378 = $365 - $$2 | 0; //@line 14037
      _out_670($0, $$2, ($$5605 | 0) > ($378 | 0) ? $378 : $$5605); //@line 14040
      $381 = $$5605 - $378 | 0; //@line 14041
      $$7495604 = $$7495604 + 4 | 0; //@line 14042
      if (!($$7495604 >>> 0 < $$7505$ >>> 0 & ($381 | 0) > -1)) {
       $$5$lcssa = $381; //@line 14049
       break;
      } else {
       $$5605 = $381; //@line 14047
      }
     }
    } else {
     $$5$lcssa = $$3477; //@line 14054
    }
    _pad_676($0, 48, $$5$lcssa + 18 | 0, 18, 0); //@line 14057
    _out_670($0, $$2513, $11 - $$2513 | 0); //@line 14061
   }
   _pad_676($0, 32, $2, $323, $4 ^ 8192); //@line 14064
   $$sink560 = $323; //@line 14065
  }
 } while (0);
 STACKTOP = sp; //@line 14070
 return (($$sink560 | 0) < ($2 | 0) ? $2 : $$sink560) | 0; //@line 14070
}
function _equeue_dispatch__async_cb($0) {
 $0 = $0 | 0;
 var $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$065 = 0, $$06790$reg2mem$0 = 0, $$06790$reg2mem$0$phi = 0, $$2 = 0, $$expand_i1_val = 0, $$expand_i1_val31 = 0, $$expand_i1_val33 = 0, $$expand_i1_val35 = 0, $$reg2mem$0 = 0, $$reg2mem24$0 = 0, $$sink$in$i$i = 0, $10 = 0, $102 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $127 = 0, $128 = 0, $129 = 0, $131 = 0, $132 = 0, $14 = 0, $140 = 0, $141 = 0, $143 = 0, $146 = 0, $148 = 0, $151 = 0, $154 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $165 = 0, $168 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $44 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $70 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 26299
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26301
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26303
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26305
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26307
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26309
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26311
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26313
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 26315
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 26317
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 26319
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 26321
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 26323
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 26325
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 26331
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 26333
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 26335
 $38 = HEAP8[$0 + 76 >> 0] & 1; //@line 26338
 $$06790$reg2mem$0 = HEAP32[$0 + 56 >> 2] | 0; //@line 26341
 $$reg2mem$0 = HEAP32[$0 + 60 >> 2] | 0; //@line 26341
 $$reg2mem24$0 = HEAP32[$0 + 80 >> 2] | 0; //@line 26341
 while (1) {
  $68 = HEAP32[$$06790$reg2mem$0 + 24 >> 2] | 0; //@line 26344
  if (($68 | 0) > -1) {
   label = 8; //@line 26347
   break;
  }
  $92 = $$06790$reg2mem$0 + 4 | 0; //@line 26351
  $93 = HEAP8[$92 >> 0] | 0; //@line 26352
  HEAP8[$92 >> 0] = (($93 + 1 & 255) << HEAP32[$36 >> 2] | 0) == 0 ? 1 : ($93 & 255) + 1 & 255; //@line 26361
  $102 = HEAP32[$$06790$reg2mem$0 + 28 >> 2] | 0; //@line 26363
  if ($102 | 0) {
   label = 12; //@line 26366
   break;
  }
  _equeue_mutex_lock($32); //@line 26369
  $125 = HEAP32[$34 >> 2] | 0; //@line 26370
  L6 : do {
   if (!$125) {
    $$02329$i$i = $34; //@line 26374
    label = 21; //@line 26375
   } else {
    $127 = HEAP32[$$06790$reg2mem$0 >> 2] | 0; //@line 26377
    $$025$i$i = $34; //@line 26378
    $129 = $125; //@line 26378
    while (1) {
     $128 = HEAP32[$129 >> 2] | 0; //@line 26380
     if ($128 >>> 0 >= $127 >>> 0) {
      break;
     }
     $131 = $129 + 8 | 0; //@line 26385
     $132 = HEAP32[$131 >> 2] | 0; //@line 26386
     if (!$132) {
      $$02329$i$i = $131; //@line 26389
      label = 21; //@line 26390
      break L6;
     } else {
      $$025$i$i = $131; //@line 26393
      $129 = $132; //@line 26393
     }
    }
    if (($128 | 0) == ($127 | 0)) {
     HEAP32[$$06790$reg2mem$0 + 12 >> 2] = $129; //@line 26399
     $$02330$i$i = $$025$i$i; //@line 26402
     $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 26402
    } else {
     $$02329$i$i = $$025$i$i; //@line 26404
     label = 21; //@line 26405
    }
   }
  } while (0);
  if ((label | 0) == 21) {
   label = 0; //@line 26410
   HEAP32[$$06790$reg2mem$0 + 12 >> 2] = 0; //@line 26412
   $$02330$i$i = $$02329$i$i; //@line 26413
   $$sink$in$i$i = $$02329$i$i; //@line 26413
  }
  HEAP32[$$reg2mem24$0 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 26416
  HEAP32[$$02330$i$i >> 2] = $$06790$reg2mem$0; //@line 26417
  _equeue_mutex_unlock($32); //@line 26418
  if (!$$reg2mem$0) {
   label = 24; //@line 26421
   break;
  }
  $41 = $$reg2mem$0 + 8 | 0; //@line 26424
  $42 = HEAP32[$41 >> 2] | 0; //@line 26425
  $44 = HEAP32[$$reg2mem$0 + 32 >> 2] | 0; //@line 26427
  if (!$44) {
   $$06790$reg2mem$0$phi = $$reg2mem$0; //@line 26430
   $$reg2mem$0 = $42; //@line 26430
   $$reg2mem24$0 = $41; //@line 26430
   $$06790$reg2mem$0 = $$06790$reg2mem$0$phi; //@line 26430
  } else {
   label = 3; //@line 26432
   break;
  }
 }
 if ((label | 0) == 3) {
  $ReallocAsyncCtx = _emscripten_realloc_async_context(84) | 0; //@line 26438
  FUNCTION_TABLE_vi[$44 & 1023]($$reg2mem$0 + 36 | 0); //@line 26439
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 105; //@line 26442
   $47 = $ReallocAsyncCtx + 4 | 0; //@line 26443
   HEAP32[$47 >> 2] = $2; //@line 26444
   $48 = $ReallocAsyncCtx + 8 | 0; //@line 26445
   HEAP32[$48 >> 2] = $4; //@line 26446
   $49 = $ReallocAsyncCtx + 12 | 0; //@line 26447
   HEAP32[$49 >> 2] = $6; //@line 26448
   $50 = $ReallocAsyncCtx + 16 | 0; //@line 26449
   HEAP32[$50 >> 2] = $8; //@line 26450
   $51 = $ReallocAsyncCtx + 20 | 0; //@line 26451
   HEAP32[$51 >> 2] = $10; //@line 26452
   $52 = $ReallocAsyncCtx + 24 | 0; //@line 26453
   HEAP32[$52 >> 2] = $12; //@line 26454
   $53 = $ReallocAsyncCtx + 28 | 0; //@line 26455
   HEAP32[$53 >> 2] = $14; //@line 26456
   $54 = $ReallocAsyncCtx + 32 | 0; //@line 26457
   HEAP32[$54 >> 2] = $16; //@line 26458
   $55 = $ReallocAsyncCtx + 36 | 0; //@line 26459
   HEAP32[$55 >> 2] = $18; //@line 26460
   $56 = $ReallocAsyncCtx + 40 | 0; //@line 26461
   HEAP32[$56 >> 2] = $20; //@line 26462
   $57 = $ReallocAsyncCtx + 44 | 0; //@line 26463
   HEAP32[$57 >> 2] = $22; //@line 26464
   $58 = $ReallocAsyncCtx + 48 | 0; //@line 26465
   HEAP32[$58 >> 2] = $24; //@line 26466
   $59 = $ReallocAsyncCtx + 52 | 0; //@line 26467
   HEAP32[$59 >> 2] = $26; //@line 26468
   $60 = $ReallocAsyncCtx + 56 | 0; //@line 26469
   HEAP32[$60 >> 2] = $$reg2mem$0; //@line 26470
   $61 = $ReallocAsyncCtx + 60 | 0; //@line 26471
   HEAP32[$61 >> 2] = $42; //@line 26472
   $62 = $ReallocAsyncCtx + 64 | 0; //@line 26473
   HEAP32[$62 >> 2] = $32; //@line 26474
   $63 = $ReallocAsyncCtx + 68 | 0; //@line 26475
   HEAP32[$63 >> 2] = $34; //@line 26476
   $64 = $ReallocAsyncCtx + 72 | 0; //@line 26477
   HEAP32[$64 >> 2] = $36; //@line 26478
   $65 = $ReallocAsyncCtx + 76 | 0; //@line 26479
   $$expand_i1_val = $38 & 1; //@line 26480
   HEAP8[$65 >> 0] = $$expand_i1_val; //@line 26481
   $66 = $ReallocAsyncCtx + 80 | 0; //@line 26482
   HEAP32[$66 >> 2] = $41; //@line 26483
   sp = STACKTOP; //@line 26484
   return;
  }
  ___async_unwind = 0; //@line 26487
  HEAP32[$ReallocAsyncCtx >> 2] = 105; //@line 26488
  $47 = $ReallocAsyncCtx + 4 | 0; //@line 26489
  HEAP32[$47 >> 2] = $2; //@line 26490
  $48 = $ReallocAsyncCtx + 8 | 0; //@line 26491
  HEAP32[$48 >> 2] = $4; //@line 26492
  $49 = $ReallocAsyncCtx + 12 | 0; //@line 26493
  HEAP32[$49 >> 2] = $6; //@line 26494
  $50 = $ReallocAsyncCtx + 16 | 0; //@line 26495
  HEAP32[$50 >> 2] = $8; //@line 26496
  $51 = $ReallocAsyncCtx + 20 | 0; //@line 26497
  HEAP32[$51 >> 2] = $10; //@line 26498
  $52 = $ReallocAsyncCtx + 24 | 0; //@line 26499
  HEAP32[$52 >> 2] = $12; //@line 26500
  $53 = $ReallocAsyncCtx + 28 | 0; //@line 26501
  HEAP32[$53 >> 2] = $14; //@line 26502
  $54 = $ReallocAsyncCtx + 32 | 0; //@line 26503
  HEAP32[$54 >> 2] = $16; //@line 26504
  $55 = $ReallocAsyncCtx + 36 | 0; //@line 26505
  HEAP32[$55 >> 2] = $18; //@line 26506
  $56 = $ReallocAsyncCtx + 40 | 0; //@line 26507
  HEAP32[$56 >> 2] = $20; //@line 26508
  $57 = $ReallocAsyncCtx + 44 | 0; //@line 26509
  HEAP32[$57 >> 2] = $22; //@line 26510
  $58 = $ReallocAsyncCtx + 48 | 0; //@line 26511
  HEAP32[$58 >> 2] = $24; //@line 26512
  $59 = $ReallocAsyncCtx + 52 | 0; //@line 26513
  HEAP32[$59 >> 2] = $26; //@line 26514
  $60 = $ReallocAsyncCtx + 56 | 0; //@line 26515
  HEAP32[$60 >> 2] = $$reg2mem$0; //@line 26516
  $61 = $ReallocAsyncCtx + 60 | 0; //@line 26517
  HEAP32[$61 >> 2] = $42; //@line 26518
  $62 = $ReallocAsyncCtx + 64 | 0; //@line 26519
  HEAP32[$62 >> 2] = $32; //@line 26520
  $63 = $ReallocAsyncCtx + 68 | 0; //@line 26521
  HEAP32[$63 >> 2] = $34; //@line 26522
  $64 = $ReallocAsyncCtx + 72 | 0; //@line 26523
  HEAP32[$64 >> 2] = $36; //@line 26524
  $65 = $ReallocAsyncCtx + 76 | 0; //@line 26525
  $$expand_i1_val = $38 & 1; //@line 26526
  HEAP8[$65 >> 0] = $$expand_i1_val; //@line 26527
  $66 = $ReallocAsyncCtx + 80 | 0; //@line 26528
  HEAP32[$66 >> 2] = $41; //@line 26529
  sp = STACKTOP; //@line 26530
  return;
 } else if ((label | 0) == 8) {
  $70 = $$06790$reg2mem$0 + 20 | 0; //@line 26534
  HEAP32[$70 >> 2] = (HEAP32[$70 >> 2] | 0) + $68; //@line 26537
  $73 = _equeue_tick() | 0; //@line 26538
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(76) | 0; //@line 26539
  _equeue_enqueue($4, $$06790$reg2mem$0, $73) | 0; //@line 26540
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 106; //@line 26543
   $74 = $ReallocAsyncCtx4 + 4 | 0; //@line 26544
   HEAP32[$74 >> 2] = $2; //@line 26545
   $75 = $ReallocAsyncCtx4 + 8 | 0; //@line 26546
   HEAP32[$75 >> 2] = $4; //@line 26547
   $76 = $ReallocAsyncCtx4 + 12 | 0; //@line 26548
   HEAP32[$76 >> 2] = $6; //@line 26549
   $77 = $ReallocAsyncCtx4 + 16 | 0; //@line 26550
   HEAP32[$77 >> 2] = $8; //@line 26551
   $78 = $ReallocAsyncCtx4 + 20 | 0; //@line 26552
   HEAP32[$78 >> 2] = $10; //@line 26553
   $79 = $ReallocAsyncCtx4 + 24 | 0; //@line 26554
   HEAP32[$79 >> 2] = $12; //@line 26555
   $80 = $ReallocAsyncCtx4 + 28 | 0; //@line 26556
   HEAP32[$80 >> 2] = $14; //@line 26557
   $81 = $ReallocAsyncCtx4 + 32 | 0; //@line 26558
   HEAP32[$81 >> 2] = $16; //@line 26559
   $82 = $ReallocAsyncCtx4 + 36 | 0; //@line 26560
   HEAP32[$82 >> 2] = $18; //@line 26561
   $83 = $ReallocAsyncCtx4 + 40 | 0; //@line 26562
   HEAP32[$83 >> 2] = $20; //@line 26563
   $84 = $ReallocAsyncCtx4 + 44 | 0; //@line 26564
   HEAP32[$84 >> 2] = $22; //@line 26565
   $85 = $ReallocAsyncCtx4 + 48 | 0; //@line 26566
   HEAP32[$85 >> 2] = $24; //@line 26567
   $86 = $ReallocAsyncCtx4 + 52 | 0; //@line 26568
   HEAP32[$86 >> 2] = $26; //@line 26569
   $87 = $ReallocAsyncCtx4 + 56 | 0; //@line 26570
   HEAP32[$87 >> 2] = $32; //@line 26571
   $88 = $ReallocAsyncCtx4 + 60 | 0; //@line 26572
   HEAP32[$88 >> 2] = $34; //@line 26573
   $89 = $ReallocAsyncCtx4 + 64 | 0; //@line 26574
   HEAP32[$89 >> 2] = $36; //@line 26575
   $90 = $ReallocAsyncCtx4 + 68 | 0; //@line 26576
   $$expand_i1_val31 = $38 & 1; //@line 26577
   HEAP8[$90 >> 0] = $$expand_i1_val31; //@line 26578
   $91 = $ReallocAsyncCtx4 + 72 | 0; //@line 26579
   HEAP32[$91 >> 2] = $$reg2mem$0; //@line 26580
   sp = STACKTOP; //@line 26581
   return;
  }
  ___async_unwind = 0; //@line 26584
  HEAP32[$ReallocAsyncCtx4 >> 2] = 106; //@line 26585
  $74 = $ReallocAsyncCtx4 + 4 | 0; //@line 26586
  HEAP32[$74 >> 2] = $2; //@line 26587
  $75 = $ReallocAsyncCtx4 + 8 | 0; //@line 26588
  HEAP32[$75 >> 2] = $4; //@line 26589
  $76 = $ReallocAsyncCtx4 + 12 | 0; //@line 26590
  HEAP32[$76 >> 2] = $6; //@line 26591
  $77 = $ReallocAsyncCtx4 + 16 | 0; //@line 26592
  HEAP32[$77 >> 2] = $8; //@line 26593
  $78 = $ReallocAsyncCtx4 + 20 | 0; //@line 26594
  HEAP32[$78 >> 2] = $10; //@line 26595
  $79 = $ReallocAsyncCtx4 + 24 | 0; //@line 26596
  HEAP32[$79 >> 2] = $12; //@line 26597
  $80 = $ReallocAsyncCtx4 + 28 | 0; //@line 26598
  HEAP32[$80 >> 2] = $14; //@line 26599
  $81 = $ReallocAsyncCtx4 + 32 | 0; //@line 26600
  HEAP32[$81 >> 2] = $16; //@line 26601
  $82 = $ReallocAsyncCtx4 + 36 | 0; //@line 26602
  HEAP32[$82 >> 2] = $18; //@line 26603
  $83 = $ReallocAsyncCtx4 + 40 | 0; //@line 26604
  HEAP32[$83 >> 2] = $20; //@line 26605
  $84 = $ReallocAsyncCtx4 + 44 | 0; //@line 26606
  HEAP32[$84 >> 2] = $22; //@line 26607
  $85 = $ReallocAsyncCtx4 + 48 | 0; //@line 26608
  HEAP32[$85 >> 2] = $24; //@line 26609
  $86 = $ReallocAsyncCtx4 + 52 | 0; //@line 26610
  HEAP32[$86 >> 2] = $26; //@line 26611
  $87 = $ReallocAsyncCtx4 + 56 | 0; //@line 26612
  HEAP32[$87 >> 2] = $32; //@line 26613
  $88 = $ReallocAsyncCtx4 + 60 | 0; //@line 26614
  HEAP32[$88 >> 2] = $34; //@line 26615
  $89 = $ReallocAsyncCtx4 + 64 | 0; //@line 26616
  HEAP32[$89 >> 2] = $36; //@line 26617
  $90 = $ReallocAsyncCtx4 + 68 | 0; //@line 26618
  $$expand_i1_val31 = $38 & 1; //@line 26619
  HEAP8[$90 >> 0] = $$expand_i1_val31; //@line 26620
  $91 = $ReallocAsyncCtx4 + 72 | 0; //@line 26621
  HEAP32[$91 >> 2] = $$reg2mem$0; //@line 26622
  sp = STACKTOP; //@line 26623
  return;
 } else if ((label | 0) == 12) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(84) | 0; //@line 26628
  FUNCTION_TABLE_vi[$102 & 1023]($$06790$reg2mem$0 + 36 | 0); //@line 26629
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 107; //@line 26632
   $105 = $ReallocAsyncCtx2 + 4 | 0; //@line 26633
   HEAP32[$105 >> 2] = $2; //@line 26634
   $106 = $ReallocAsyncCtx2 + 8 | 0; //@line 26635
   HEAP32[$106 >> 2] = $4; //@line 26636
   $107 = $ReallocAsyncCtx2 + 12 | 0; //@line 26637
   HEAP32[$107 >> 2] = $6; //@line 26638
   $108 = $ReallocAsyncCtx2 + 16 | 0; //@line 26639
   HEAP32[$108 >> 2] = $8; //@line 26640
   $109 = $ReallocAsyncCtx2 + 20 | 0; //@line 26641
   HEAP32[$109 >> 2] = $10; //@line 26642
   $110 = $ReallocAsyncCtx2 + 24 | 0; //@line 26643
   HEAP32[$110 >> 2] = $12; //@line 26644
   $111 = $ReallocAsyncCtx2 + 28 | 0; //@line 26645
   HEAP32[$111 >> 2] = $14; //@line 26646
   $112 = $ReallocAsyncCtx2 + 32 | 0; //@line 26647
   HEAP32[$112 >> 2] = $16; //@line 26648
   $113 = $ReallocAsyncCtx2 + 36 | 0; //@line 26649
   HEAP32[$113 >> 2] = $18; //@line 26650
   $114 = $ReallocAsyncCtx2 + 40 | 0; //@line 26651
   HEAP32[$114 >> 2] = $20; //@line 26652
   $115 = $ReallocAsyncCtx2 + 44 | 0; //@line 26653
   HEAP32[$115 >> 2] = $22; //@line 26654
   $116 = $ReallocAsyncCtx2 + 48 | 0; //@line 26655
   HEAP32[$116 >> 2] = $24; //@line 26656
   $117 = $ReallocAsyncCtx2 + 52 | 0; //@line 26657
   HEAP32[$117 >> 2] = $26; //@line 26658
   $118 = $ReallocAsyncCtx2 + 56 | 0; //@line 26659
   HEAP32[$118 >> 2] = $32; //@line 26660
   $119 = $ReallocAsyncCtx2 + 60 | 0; //@line 26661
   HEAP32[$119 >> 2] = $34; //@line 26662
   $120 = $ReallocAsyncCtx2 + 64 | 0; //@line 26663
   HEAP32[$120 >> 2] = $36; //@line 26664
   $121 = $ReallocAsyncCtx2 + 68 | 0; //@line 26665
   $$expand_i1_val33 = $38 & 1; //@line 26666
   HEAP8[$121 >> 0] = $$expand_i1_val33; //@line 26667
   $122 = $ReallocAsyncCtx2 + 72 | 0; //@line 26668
   HEAP32[$122 >> 2] = $$reg2mem$0; //@line 26669
   $123 = $ReallocAsyncCtx2 + 76 | 0; //@line 26670
   HEAP32[$123 >> 2] = $$06790$reg2mem$0; //@line 26671
   $124 = $ReallocAsyncCtx2 + 80 | 0; //@line 26672
   HEAP32[$124 >> 2] = $$reg2mem24$0; //@line 26673
   sp = STACKTOP; //@line 26674
   return;
  }
  ___async_unwind = 0; //@line 26677
  HEAP32[$ReallocAsyncCtx2 >> 2] = 107; //@line 26678
  $105 = $ReallocAsyncCtx2 + 4 | 0; //@line 26679
  HEAP32[$105 >> 2] = $2; //@line 26680
  $106 = $ReallocAsyncCtx2 + 8 | 0; //@line 26681
  HEAP32[$106 >> 2] = $4; //@line 26682
  $107 = $ReallocAsyncCtx2 + 12 | 0; //@line 26683
  HEAP32[$107 >> 2] = $6; //@line 26684
  $108 = $ReallocAsyncCtx2 + 16 | 0; //@line 26685
  HEAP32[$108 >> 2] = $8; //@line 26686
  $109 = $ReallocAsyncCtx2 + 20 | 0; //@line 26687
  HEAP32[$109 >> 2] = $10; //@line 26688
  $110 = $ReallocAsyncCtx2 + 24 | 0; //@line 26689
  HEAP32[$110 >> 2] = $12; //@line 26690
  $111 = $ReallocAsyncCtx2 + 28 | 0; //@line 26691
  HEAP32[$111 >> 2] = $14; //@line 26692
  $112 = $ReallocAsyncCtx2 + 32 | 0; //@line 26693
  HEAP32[$112 >> 2] = $16; //@line 26694
  $113 = $ReallocAsyncCtx2 + 36 | 0; //@line 26695
  HEAP32[$113 >> 2] = $18; //@line 26696
  $114 = $ReallocAsyncCtx2 + 40 | 0; //@line 26697
  HEAP32[$114 >> 2] = $20; //@line 26698
  $115 = $ReallocAsyncCtx2 + 44 | 0; //@line 26699
  HEAP32[$115 >> 2] = $22; //@line 26700
  $116 = $ReallocAsyncCtx2 + 48 | 0; //@line 26701
  HEAP32[$116 >> 2] = $24; //@line 26702
  $117 = $ReallocAsyncCtx2 + 52 | 0; //@line 26703
  HEAP32[$117 >> 2] = $26; //@line 26704
  $118 = $ReallocAsyncCtx2 + 56 | 0; //@line 26705
  HEAP32[$118 >> 2] = $32; //@line 26706
  $119 = $ReallocAsyncCtx2 + 60 | 0; //@line 26707
  HEAP32[$119 >> 2] = $34; //@line 26708
  $120 = $ReallocAsyncCtx2 + 64 | 0; //@line 26709
  HEAP32[$120 >> 2] = $36; //@line 26710
  $121 = $ReallocAsyncCtx2 + 68 | 0; //@line 26711
  $$expand_i1_val33 = $38 & 1; //@line 26712
  HEAP8[$121 >> 0] = $$expand_i1_val33; //@line 26713
  $122 = $ReallocAsyncCtx2 + 72 | 0; //@line 26714
  HEAP32[$122 >> 2] = $$reg2mem$0; //@line 26715
  $123 = $ReallocAsyncCtx2 + 76 | 0; //@line 26716
  HEAP32[$123 >> 2] = $$06790$reg2mem$0; //@line 26717
  $124 = $ReallocAsyncCtx2 + 80 | 0; //@line 26718
  HEAP32[$124 >> 2] = $$reg2mem24$0; //@line 26719
  sp = STACKTOP; //@line 26720
  return;
 } else if ((label | 0) == 24) {
  $140 = _equeue_tick() | 0; //@line 26724
  if ($38) {
   $141 = $16 - $140 | 0; //@line 26726
   if (($141 | 0) < 1) {
    $143 = $4 + 40 | 0; //@line 26729
    if (HEAP32[$143 >> 2] | 0) {
     _equeue_mutex_lock($6); //@line 26733
     $146 = HEAP32[$143 >> 2] | 0; //@line 26734
     if ($146 | 0) {
      $148 = HEAP32[$14 >> 2] | 0; //@line 26737
      if ($148 | 0) {
       $151 = HEAP32[$4 + 44 >> 2] | 0; //@line 26741
       $154 = (HEAP32[$148 + 20 >> 2] | 0) - $140 | 0; //@line 26744
       $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 26748
       FUNCTION_TABLE_vii[$146 & 31]($151, $154 & ~($154 >> 31)); //@line 26749
       if (___async) {
        HEAP32[$ReallocAsyncCtx3 >> 2] = 108; //@line 26752
        $158 = $ReallocAsyncCtx3 + 4 | 0; //@line 26753
        HEAP32[$158 >> 2] = $10; //@line 26754
        $159 = $ReallocAsyncCtx3 + 8 | 0; //@line 26755
        HEAP32[$159 >> 2] = $6; //@line 26756
        $160 = $ReallocAsyncCtx3 + 12 | 0; //@line 26757
        HEAP32[$160 >> 2] = $12; //@line 26758
        sp = STACKTOP; //@line 26759
        return;
       }
       ___async_unwind = 0; //@line 26762
       HEAP32[$ReallocAsyncCtx3 >> 2] = 108; //@line 26763
       $158 = $ReallocAsyncCtx3 + 4 | 0; //@line 26764
       HEAP32[$158 >> 2] = $10; //@line 26765
       $159 = $ReallocAsyncCtx3 + 8 | 0; //@line 26766
       HEAP32[$159 >> 2] = $6; //@line 26767
       $160 = $ReallocAsyncCtx3 + 12 | 0; //@line 26768
       HEAP32[$160 >> 2] = $12; //@line 26769
       sp = STACKTOP; //@line 26770
       return;
      }
     }
     HEAP8[$10 >> 0] = 1; //@line 26774
     _equeue_mutex_unlock($6); //@line 26775
    }
    HEAP8[$12 >> 0] = 0; //@line 26777
    return;
   } else {
    $$065 = $141; //@line 26780
   }
  } else {
   $$065 = -1; //@line 26783
  }
  _equeue_mutex_lock($6); //@line 26785
  $161 = HEAP32[$14 >> 2] | 0; //@line 26786
  if (!$161) {
   $$2 = $$065; //@line 26789
  } else {
   $165 = (HEAP32[$161 + 20 >> 2] | 0) - $140 | 0; //@line 26793
   $168 = $165 & ~($165 >> 31); //@line 26796
   $$2 = $168 >>> 0 < $$065 >>> 0 ? $168 : $$065; //@line 26799
  }
  _equeue_mutex_unlock($6); //@line 26801
  _equeue_sema_wait($26, $$2) | 0; //@line 26802
  do {
   if (HEAP8[$12 >> 0] | 0) {
    _equeue_mutex_lock($6); //@line 26807
    if (!(HEAP8[$12 >> 0] | 0)) {
     _equeue_mutex_unlock($6); //@line 26811
     break;
    }
    HEAP8[$12 >> 0] = 0; //@line 26814
    _equeue_mutex_unlock($6); //@line 26815
    return;
   }
  } while (0);
  $174 = _equeue_tick() | 0; //@line 26819
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(76) | 0; //@line 26820
  _wait_ms(20); //@line 26821
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 109; //@line 26824
   $175 = $ReallocAsyncCtx5 + 4 | 0; //@line 26825
   HEAP32[$175 >> 2] = $2; //@line 26826
   $176 = $ReallocAsyncCtx5 + 8 | 0; //@line 26827
   HEAP32[$176 >> 2] = $4; //@line 26828
   $177 = $ReallocAsyncCtx5 + 12 | 0; //@line 26829
   HEAP32[$177 >> 2] = $174; //@line 26830
   $178 = $ReallocAsyncCtx5 + 16 | 0; //@line 26831
   HEAP32[$178 >> 2] = $6; //@line 26832
   $179 = $ReallocAsyncCtx5 + 20 | 0; //@line 26833
   HEAP32[$179 >> 2] = $8; //@line 26834
   $180 = $ReallocAsyncCtx5 + 24 | 0; //@line 26835
   HEAP32[$180 >> 2] = $10; //@line 26836
   $181 = $ReallocAsyncCtx5 + 28 | 0; //@line 26837
   HEAP32[$181 >> 2] = $12; //@line 26838
   $182 = $ReallocAsyncCtx5 + 32 | 0; //@line 26839
   HEAP32[$182 >> 2] = $14; //@line 26840
   $183 = $ReallocAsyncCtx5 + 36 | 0; //@line 26841
   HEAP32[$183 >> 2] = $16; //@line 26842
   $184 = $ReallocAsyncCtx5 + 40 | 0; //@line 26843
   HEAP32[$184 >> 2] = $18; //@line 26844
   $185 = $ReallocAsyncCtx5 + 44 | 0; //@line 26845
   HEAP32[$185 >> 2] = $20; //@line 26846
   $186 = $ReallocAsyncCtx5 + 48 | 0; //@line 26847
   HEAP32[$186 >> 2] = $22; //@line 26848
   $187 = $ReallocAsyncCtx5 + 52 | 0; //@line 26849
   HEAP32[$187 >> 2] = $24; //@line 26850
   $188 = $ReallocAsyncCtx5 + 56 | 0; //@line 26851
   HEAP32[$188 >> 2] = $26; //@line 26852
   $189 = $ReallocAsyncCtx5 + 60 | 0; //@line 26853
   HEAP32[$189 >> 2] = $32; //@line 26854
   $190 = $ReallocAsyncCtx5 + 64 | 0; //@line 26855
   HEAP32[$190 >> 2] = $34; //@line 26856
   $191 = $ReallocAsyncCtx5 + 68 | 0; //@line 26857
   HEAP32[$191 >> 2] = $36; //@line 26858
   $192 = $ReallocAsyncCtx5 + 72 | 0; //@line 26859
   $$expand_i1_val35 = $38 & 1; //@line 26860
   HEAP8[$192 >> 0] = $$expand_i1_val35; //@line 26861
   sp = STACKTOP; //@line 26862
   return;
  }
  ___async_unwind = 0; //@line 26865
  HEAP32[$ReallocAsyncCtx5 >> 2] = 109; //@line 26866
  $175 = $ReallocAsyncCtx5 + 4 | 0; //@line 26867
  HEAP32[$175 >> 2] = $2; //@line 26868
  $176 = $ReallocAsyncCtx5 + 8 | 0; //@line 26869
  HEAP32[$176 >> 2] = $4; //@line 26870
  $177 = $ReallocAsyncCtx5 + 12 | 0; //@line 26871
  HEAP32[$177 >> 2] = $174; //@line 26872
  $178 = $ReallocAsyncCtx5 + 16 | 0; //@line 26873
  HEAP32[$178 >> 2] = $6; //@line 26874
  $179 = $ReallocAsyncCtx5 + 20 | 0; //@line 26875
  HEAP32[$179 >> 2] = $8; //@line 26876
  $180 = $ReallocAsyncCtx5 + 24 | 0; //@line 26877
  HEAP32[$180 >> 2] = $10; //@line 26878
  $181 = $ReallocAsyncCtx5 + 28 | 0; //@line 26879
  HEAP32[$181 >> 2] = $12; //@line 26880
  $182 = $ReallocAsyncCtx5 + 32 | 0; //@line 26881
  HEAP32[$182 >> 2] = $14; //@line 26882
  $183 = $ReallocAsyncCtx5 + 36 | 0; //@line 26883
  HEAP32[$183 >> 2] = $16; //@line 26884
  $184 = $ReallocAsyncCtx5 + 40 | 0; //@line 26885
  HEAP32[$184 >> 2] = $18; //@line 26886
  $185 = $ReallocAsyncCtx5 + 44 | 0; //@line 26887
  HEAP32[$185 >> 2] = $20; //@line 26888
  $186 = $ReallocAsyncCtx5 + 48 | 0; //@line 26889
  HEAP32[$186 >> 2] = $22; //@line 26890
  $187 = $ReallocAsyncCtx5 + 52 | 0; //@line 26891
  HEAP32[$187 >> 2] = $24; //@line 26892
  $188 = $ReallocAsyncCtx5 + 56 | 0; //@line 26893
  HEAP32[$188 >> 2] = $26; //@line 26894
  $189 = $ReallocAsyncCtx5 + 60 | 0; //@line 26895
  HEAP32[$189 >> 2] = $32; //@line 26896
  $190 = $ReallocAsyncCtx5 + 64 | 0; //@line 26897
  HEAP32[$190 >> 2] = $34; //@line 26898
  $191 = $ReallocAsyncCtx5 + 68 | 0; //@line 26899
  HEAP32[$191 >> 2] = $36; //@line 26900
  $192 = $ReallocAsyncCtx5 + 72 | 0; //@line 26901
  $$expand_i1_val35 = $38 & 1; //@line 26902
  HEAP8[$192 >> 0] = $$expand_i1_val35; //@line 26903
  sp = STACKTOP; //@line 26904
  return;
 }
}
function _equeue_dispatch__async_cb_386($0) {
 $0 = $0 | 0;
 var $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$065 = 0, $$06790$reg2mem$0 = 0, $$06790$reg2mem$0$phi = 0, $$2 = 0, $$expand_i1_val = 0, $$expand_i1_val31 = 0, $$expand_i1_val33 = 0, $$expand_i1_val35 = 0, $$reg2mem$0 = 0, $$reg2mem24$0 = 0, $$sink$in$i$i = 0, $10 = 0, $102 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $127 = 0, $128 = 0, $129 = 0, $131 = 0, $132 = 0, $14 = 0, $140 = 0, $141 = 0, $143 = 0, $146 = 0, $148 = 0, $151 = 0, $154 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $165 = 0, $168 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $4 = 0, $42 = 0, $44 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $70 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 26922
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26924
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26926
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26928
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26930
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26932
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26934
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26936
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 26938
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 26940
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 26942
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 26944
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 26946
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 26948
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 26950
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 26952
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 26954
 $34 = HEAP8[$0 + 68 >> 0] & 1; //@line 26957
 $$06790$reg2mem$0 = HEAP32[$0 + 76 >> 2] | 0; //@line 26964
 $$reg2mem$0 = HEAP32[$0 + 72 >> 2] | 0; //@line 26964
 $$reg2mem24$0 = HEAP32[$0 + 80 >> 2] | 0; //@line 26964
 while (1) {
  _equeue_mutex_lock($28); //@line 26966
  $125 = HEAP32[$30 >> 2] | 0; //@line 26967
  L4 : do {
   if (!$125) {
    $$02329$i$i = $30; //@line 26971
    label = 21; //@line 26972
   } else {
    $127 = HEAP32[$$06790$reg2mem$0 >> 2] | 0; //@line 26974
    $$025$i$i = $30; //@line 26975
    $129 = $125; //@line 26975
    while (1) {
     $128 = HEAP32[$129 >> 2] | 0; //@line 26977
     if ($128 >>> 0 >= $127 >>> 0) {
      break;
     }
     $131 = $129 + 8 | 0; //@line 26982
     $132 = HEAP32[$131 >> 2] | 0; //@line 26983
     if (!$132) {
      $$02329$i$i = $131; //@line 26986
      label = 21; //@line 26987
      break L4;
     } else {
      $$025$i$i = $131; //@line 26990
      $129 = $132; //@line 26990
     }
    }
    if (($128 | 0) == ($127 | 0)) {
     HEAP32[$$06790$reg2mem$0 + 12 >> 2] = $129; //@line 26996
     $$02330$i$i = $$025$i$i; //@line 26999
     $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 26999
    } else {
     $$02329$i$i = $$025$i$i; //@line 27001
     label = 21; //@line 27002
    }
   }
  } while (0);
  if ((label | 0) == 21) {
   label = 0; //@line 27007
   HEAP32[$$06790$reg2mem$0 + 12 >> 2] = 0; //@line 27009
   $$02330$i$i = $$02329$i$i; //@line 27010
   $$sink$in$i$i = $$02329$i$i; //@line 27010
  }
  HEAP32[$$reg2mem24$0 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 27013
  HEAP32[$$02330$i$i >> 2] = $$06790$reg2mem$0; //@line 27014
  _equeue_mutex_unlock($28); //@line 27015
  if (!$$reg2mem$0) {
   label = 24; //@line 27018
   break;
  }
  $$reg2mem24$0 = $$reg2mem$0 + 8 | 0; //@line 27021
  $42 = HEAP32[$$reg2mem24$0 >> 2] | 0; //@line 27022
  $44 = HEAP32[$$reg2mem$0 + 32 >> 2] | 0; //@line 27024
  if ($44 | 0) {
   label = 3; //@line 27027
   break;
  }
  $68 = HEAP32[$$reg2mem$0 + 24 >> 2] | 0; //@line 27031
  if (($68 | 0) > -1) {
   label = 7; //@line 27034
   break;
  }
  $92 = $$reg2mem$0 + 4 | 0; //@line 27038
  $93 = HEAP8[$92 >> 0] | 0; //@line 27039
  HEAP8[$92 >> 0] = (($93 + 1 & 255) << HEAP32[$32 >> 2] | 0) == 0 ? 1 : ($93 & 255) + 1 & 255; //@line 27048
  $102 = HEAP32[$$reg2mem$0 + 28 >> 2] | 0; //@line 27050
  if ($102 | 0) {
   label = 11; //@line 27055
   break;
  } else {
   $$06790$reg2mem$0$phi = $$reg2mem$0; //@line 27053
   $$reg2mem$0 = $42; //@line 27053
   $$06790$reg2mem$0 = $$06790$reg2mem$0$phi; //@line 27053
  }
 }
 if ((label | 0) == 3) {
  $ReallocAsyncCtx = _emscripten_realloc_async_context(84) | 0; //@line 27061
  FUNCTION_TABLE_vi[$44 & 1023]($$reg2mem$0 + 36 | 0); //@line 27062
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 105; //@line 27065
   $47 = $ReallocAsyncCtx + 4 | 0; //@line 27066
   HEAP32[$47 >> 2] = $2; //@line 27067
   $48 = $ReallocAsyncCtx + 8 | 0; //@line 27068
   HEAP32[$48 >> 2] = $4; //@line 27069
   $49 = $ReallocAsyncCtx + 12 | 0; //@line 27070
   HEAP32[$49 >> 2] = $6; //@line 27071
   $50 = $ReallocAsyncCtx + 16 | 0; //@line 27072
   HEAP32[$50 >> 2] = $8; //@line 27073
   $51 = $ReallocAsyncCtx + 20 | 0; //@line 27074
   HEAP32[$51 >> 2] = $10; //@line 27075
   $52 = $ReallocAsyncCtx + 24 | 0; //@line 27076
   HEAP32[$52 >> 2] = $12; //@line 27077
   $53 = $ReallocAsyncCtx + 28 | 0; //@line 27078
   HEAP32[$53 >> 2] = $14; //@line 27079
   $54 = $ReallocAsyncCtx + 32 | 0; //@line 27080
   HEAP32[$54 >> 2] = $16; //@line 27081
   $55 = $ReallocAsyncCtx + 36 | 0; //@line 27082
   HEAP32[$55 >> 2] = $18; //@line 27083
   $56 = $ReallocAsyncCtx + 40 | 0; //@line 27084
   HEAP32[$56 >> 2] = $20; //@line 27085
   $57 = $ReallocAsyncCtx + 44 | 0; //@line 27086
   HEAP32[$57 >> 2] = $22; //@line 27087
   $58 = $ReallocAsyncCtx + 48 | 0; //@line 27088
   HEAP32[$58 >> 2] = $24; //@line 27089
   $59 = $ReallocAsyncCtx + 52 | 0; //@line 27090
   HEAP32[$59 >> 2] = $26; //@line 27091
   $60 = $ReallocAsyncCtx + 56 | 0; //@line 27092
   HEAP32[$60 >> 2] = $$reg2mem$0; //@line 27093
   $61 = $ReallocAsyncCtx + 60 | 0; //@line 27094
   HEAP32[$61 >> 2] = $42; //@line 27095
   $62 = $ReallocAsyncCtx + 64 | 0; //@line 27096
   HEAP32[$62 >> 2] = $28; //@line 27097
   $63 = $ReallocAsyncCtx + 68 | 0; //@line 27098
   HEAP32[$63 >> 2] = $30; //@line 27099
   $64 = $ReallocAsyncCtx + 72 | 0; //@line 27100
   HEAP32[$64 >> 2] = $32; //@line 27101
   $65 = $ReallocAsyncCtx + 76 | 0; //@line 27102
   $$expand_i1_val = $34 & 1; //@line 27103
   HEAP8[$65 >> 0] = $$expand_i1_val; //@line 27104
   $66 = $ReallocAsyncCtx + 80 | 0; //@line 27105
   HEAP32[$66 >> 2] = $$reg2mem24$0; //@line 27106
   sp = STACKTOP; //@line 27107
   return;
  }
  ___async_unwind = 0; //@line 27110
  HEAP32[$ReallocAsyncCtx >> 2] = 105; //@line 27111
  $47 = $ReallocAsyncCtx + 4 | 0; //@line 27112
  HEAP32[$47 >> 2] = $2; //@line 27113
  $48 = $ReallocAsyncCtx + 8 | 0; //@line 27114
  HEAP32[$48 >> 2] = $4; //@line 27115
  $49 = $ReallocAsyncCtx + 12 | 0; //@line 27116
  HEAP32[$49 >> 2] = $6; //@line 27117
  $50 = $ReallocAsyncCtx + 16 | 0; //@line 27118
  HEAP32[$50 >> 2] = $8; //@line 27119
  $51 = $ReallocAsyncCtx + 20 | 0; //@line 27120
  HEAP32[$51 >> 2] = $10; //@line 27121
  $52 = $ReallocAsyncCtx + 24 | 0; //@line 27122
  HEAP32[$52 >> 2] = $12; //@line 27123
  $53 = $ReallocAsyncCtx + 28 | 0; //@line 27124
  HEAP32[$53 >> 2] = $14; //@line 27125
  $54 = $ReallocAsyncCtx + 32 | 0; //@line 27126
  HEAP32[$54 >> 2] = $16; //@line 27127
  $55 = $ReallocAsyncCtx + 36 | 0; //@line 27128
  HEAP32[$55 >> 2] = $18; //@line 27129
  $56 = $ReallocAsyncCtx + 40 | 0; //@line 27130
  HEAP32[$56 >> 2] = $20; //@line 27131
  $57 = $ReallocAsyncCtx + 44 | 0; //@line 27132
  HEAP32[$57 >> 2] = $22; //@line 27133
  $58 = $ReallocAsyncCtx + 48 | 0; //@line 27134
  HEAP32[$58 >> 2] = $24; //@line 27135
  $59 = $ReallocAsyncCtx + 52 | 0; //@line 27136
  HEAP32[$59 >> 2] = $26; //@line 27137
  $60 = $ReallocAsyncCtx + 56 | 0; //@line 27138
  HEAP32[$60 >> 2] = $$reg2mem$0; //@line 27139
  $61 = $ReallocAsyncCtx + 60 | 0; //@line 27140
  HEAP32[$61 >> 2] = $42; //@line 27141
  $62 = $ReallocAsyncCtx + 64 | 0; //@line 27142
  HEAP32[$62 >> 2] = $28; //@line 27143
  $63 = $ReallocAsyncCtx + 68 | 0; //@line 27144
  HEAP32[$63 >> 2] = $30; //@line 27145
  $64 = $ReallocAsyncCtx + 72 | 0; //@line 27146
  HEAP32[$64 >> 2] = $32; //@line 27147
  $65 = $ReallocAsyncCtx + 76 | 0; //@line 27148
  $$expand_i1_val = $34 & 1; //@line 27149
  HEAP8[$65 >> 0] = $$expand_i1_val; //@line 27150
  $66 = $ReallocAsyncCtx + 80 | 0; //@line 27151
  HEAP32[$66 >> 2] = $$reg2mem24$0; //@line 27152
  sp = STACKTOP; //@line 27153
  return;
 } else if ((label | 0) == 7) {
  $70 = $$reg2mem$0 + 20 | 0; //@line 27157
  HEAP32[$70 >> 2] = (HEAP32[$70 >> 2] | 0) + $68; //@line 27160
  $73 = _equeue_tick() | 0; //@line 27161
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(76) | 0; //@line 27162
  _equeue_enqueue($4, $$reg2mem$0, $73) | 0; //@line 27163
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 106; //@line 27166
   $74 = $ReallocAsyncCtx4 + 4 | 0; //@line 27167
   HEAP32[$74 >> 2] = $2; //@line 27168
   $75 = $ReallocAsyncCtx4 + 8 | 0; //@line 27169
   HEAP32[$75 >> 2] = $4; //@line 27170
   $76 = $ReallocAsyncCtx4 + 12 | 0; //@line 27171
   HEAP32[$76 >> 2] = $6; //@line 27172
   $77 = $ReallocAsyncCtx4 + 16 | 0; //@line 27173
   HEAP32[$77 >> 2] = $8; //@line 27174
   $78 = $ReallocAsyncCtx4 + 20 | 0; //@line 27175
   HEAP32[$78 >> 2] = $10; //@line 27176
   $79 = $ReallocAsyncCtx4 + 24 | 0; //@line 27177
   HEAP32[$79 >> 2] = $12; //@line 27178
   $80 = $ReallocAsyncCtx4 + 28 | 0; //@line 27179
   HEAP32[$80 >> 2] = $14; //@line 27180
   $81 = $ReallocAsyncCtx4 + 32 | 0; //@line 27181
   HEAP32[$81 >> 2] = $16; //@line 27182
   $82 = $ReallocAsyncCtx4 + 36 | 0; //@line 27183
   HEAP32[$82 >> 2] = $18; //@line 27184
   $83 = $ReallocAsyncCtx4 + 40 | 0; //@line 27185
   HEAP32[$83 >> 2] = $20; //@line 27186
   $84 = $ReallocAsyncCtx4 + 44 | 0; //@line 27187
   HEAP32[$84 >> 2] = $22; //@line 27188
   $85 = $ReallocAsyncCtx4 + 48 | 0; //@line 27189
   HEAP32[$85 >> 2] = $24; //@line 27190
   $86 = $ReallocAsyncCtx4 + 52 | 0; //@line 27191
   HEAP32[$86 >> 2] = $26; //@line 27192
   $87 = $ReallocAsyncCtx4 + 56 | 0; //@line 27193
   HEAP32[$87 >> 2] = $28; //@line 27194
   $88 = $ReallocAsyncCtx4 + 60 | 0; //@line 27195
   HEAP32[$88 >> 2] = $30; //@line 27196
   $89 = $ReallocAsyncCtx4 + 64 | 0; //@line 27197
   HEAP32[$89 >> 2] = $32; //@line 27198
   $90 = $ReallocAsyncCtx4 + 68 | 0; //@line 27199
   $$expand_i1_val31 = $34 & 1; //@line 27200
   HEAP8[$90 >> 0] = $$expand_i1_val31; //@line 27201
   $91 = $ReallocAsyncCtx4 + 72 | 0; //@line 27202
   HEAP32[$91 >> 2] = $42; //@line 27203
   sp = STACKTOP; //@line 27204
   return;
  }
  ___async_unwind = 0; //@line 27207
  HEAP32[$ReallocAsyncCtx4 >> 2] = 106; //@line 27208
  $74 = $ReallocAsyncCtx4 + 4 | 0; //@line 27209
  HEAP32[$74 >> 2] = $2; //@line 27210
  $75 = $ReallocAsyncCtx4 + 8 | 0; //@line 27211
  HEAP32[$75 >> 2] = $4; //@line 27212
  $76 = $ReallocAsyncCtx4 + 12 | 0; //@line 27213
  HEAP32[$76 >> 2] = $6; //@line 27214
  $77 = $ReallocAsyncCtx4 + 16 | 0; //@line 27215
  HEAP32[$77 >> 2] = $8; //@line 27216
  $78 = $ReallocAsyncCtx4 + 20 | 0; //@line 27217
  HEAP32[$78 >> 2] = $10; //@line 27218
  $79 = $ReallocAsyncCtx4 + 24 | 0; //@line 27219
  HEAP32[$79 >> 2] = $12; //@line 27220
  $80 = $ReallocAsyncCtx4 + 28 | 0; //@line 27221
  HEAP32[$80 >> 2] = $14; //@line 27222
  $81 = $ReallocAsyncCtx4 + 32 | 0; //@line 27223
  HEAP32[$81 >> 2] = $16; //@line 27224
  $82 = $ReallocAsyncCtx4 + 36 | 0; //@line 27225
  HEAP32[$82 >> 2] = $18; //@line 27226
  $83 = $ReallocAsyncCtx4 + 40 | 0; //@line 27227
  HEAP32[$83 >> 2] = $20; //@line 27228
  $84 = $ReallocAsyncCtx4 + 44 | 0; //@line 27229
  HEAP32[$84 >> 2] = $22; //@line 27230
  $85 = $ReallocAsyncCtx4 + 48 | 0; //@line 27231
  HEAP32[$85 >> 2] = $24; //@line 27232
  $86 = $ReallocAsyncCtx4 + 52 | 0; //@line 27233
  HEAP32[$86 >> 2] = $26; //@line 27234
  $87 = $ReallocAsyncCtx4 + 56 | 0; //@line 27235
  HEAP32[$87 >> 2] = $28; //@line 27236
  $88 = $ReallocAsyncCtx4 + 60 | 0; //@line 27237
  HEAP32[$88 >> 2] = $30; //@line 27238
  $89 = $ReallocAsyncCtx4 + 64 | 0; //@line 27239
  HEAP32[$89 >> 2] = $32; //@line 27240
  $90 = $ReallocAsyncCtx4 + 68 | 0; //@line 27241
  $$expand_i1_val31 = $34 & 1; //@line 27242
  HEAP8[$90 >> 0] = $$expand_i1_val31; //@line 27243
  $91 = $ReallocAsyncCtx4 + 72 | 0; //@line 27244
  HEAP32[$91 >> 2] = $42; //@line 27245
  sp = STACKTOP; //@line 27246
  return;
 } else if ((label | 0) == 11) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(84) | 0; //@line 27251
  FUNCTION_TABLE_vi[$102 & 1023]($$reg2mem$0 + 36 | 0); //@line 27252
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 107; //@line 27255
   $105 = $ReallocAsyncCtx2 + 4 | 0; //@line 27256
   HEAP32[$105 >> 2] = $2; //@line 27257
   $106 = $ReallocAsyncCtx2 + 8 | 0; //@line 27258
   HEAP32[$106 >> 2] = $4; //@line 27259
   $107 = $ReallocAsyncCtx2 + 12 | 0; //@line 27260
   HEAP32[$107 >> 2] = $6; //@line 27261
   $108 = $ReallocAsyncCtx2 + 16 | 0; //@line 27262
   HEAP32[$108 >> 2] = $8; //@line 27263
   $109 = $ReallocAsyncCtx2 + 20 | 0; //@line 27264
   HEAP32[$109 >> 2] = $10; //@line 27265
   $110 = $ReallocAsyncCtx2 + 24 | 0; //@line 27266
   HEAP32[$110 >> 2] = $12; //@line 27267
   $111 = $ReallocAsyncCtx2 + 28 | 0; //@line 27268
   HEAP32[$111 >> 2] = $14; //@line 27269
   $112 = $ReallocAsyncCtx2 + 32 | 0; //@line 27270
   HEAP32[$112 >> 2] = $16; //@line 27271
   $113 = $ReallocAsyncCtx2 + 36 | 0; //@line 27272
   HEAP32[$113 >> 2] = $18; //@line 27273
   $114 = $ReallocAsyncCtx2 + 40 | 0; //@line 27274
   HEAP32[$114 >> 2] = $20; //@line 27275
   $115 = $ReallocAsyncCtx2 + 44 | 0; //@line 27276
   HEAP32[$115 >> 2] = $22; //@line 27277
   $116 = $ReallocAsyncCtx2 + 48 | 0; //@line 27278
   HEAP32[$116 >> 2] = $24; //@line 27279
   $117 = $ReallocAsyncCtx2 + 52 | 0; //@line 27280
   HEAP32[$117 >> 2] = $26; //@line 27281
   $118 = $ReallocAsyncCtx2 + 56 | 0; //@line 27282
   HEAP32[$118 >> 2] = $28; //@line 27283
   $119 = $ReallocAsyncCtx2 + 60 | 0; //@line 27284
   HEAP32[$119 >> 2] = $30; //@line 27285
   $120 = $ReallocAsyncCtx2 + 64 | 0; //@line 27286
   HEAP32[$120 >> 2] = $32; //@line 27287
   $121 = $ReallocAsyncCtx2 + 68 | 0; //@line 27288
   $$expand_i1_val33 = $34 & 1; //@line 27289
   HEAP8[$121 >> 0] = $$expand_i1_val33; //@line 27290
   $122 = $ReallocAsyncCtx2 + 72 | 0; //@line 27291
   HEAP32[$122 >> 2] = $42; //@line 27292
   $123 = $ReallocAsyncCtx2 + 76 | 0; //@line 27293
   HEAP32[$123 >> 2] = $$reg2mem$0; //@line 27294
   $124 = $ReallocAsyncCtx2 + 80 | 0; //@line 27295
   HEAP32[$124 >> 2] = $$reg2mem24$0; //@line 27296
   sp = STACKTOP; //@line 27297
   return;
  }
  ___async_unwind = 0; //@line 27300
  HEAP32[$ReallocAsyncCtx2 >> 2] = 107; //@line 27301
  $105 = $ReallocAsyncCtx2 + 4 | 0; //@line 27302
  HEAP32[$105 >> 2] = $2; //@line 27303
  $106 = $ReallocAsyncCtx2 + 8 | 0; //@line 27304
  HEAP32[$106 >> 2] = $4; //@line 27305
  $107 = $ReallocAsyncCtx2 + 12 | 0; //@line 27306
  HEAP32[$107 >> 2] = $6; //@line 27307
  $108 = $ReallocAsyncCtx2 + 16 | 0; //@line 27308
  HEAP32[$108 >> 2] = $8; //@line 27309
  $109 = $ReallocAsyncCtx2 + 20 | 0; //@line 27310
  HEAP32[$109 >> 2] = $10; //@line 27311
  $110 = $ReallocAsyncCtx2 + 24 | 0; //@line 27312
  HEAP32[$110 >> 2] = $12; //@line 27313
  $111 = $ReallocAsyncCtx2 + 28 | 0; //@line 27314
  HEAP32[$111 >> 2] = $14; //@line 27315
  $112 = $ReallocAsyncCtx2 + 32 | 0; //@line 27316
  HEAP32[$112 >> 2] = $16; //@line 27317
  $113 = $ReallocAsyncCtx2 + 36 | 0; //@line 27318
  HEAP32[$113 >> 2] = $18; //@line 27319
  $114 = $ReallocAsyncCtx2 + 40 | 0; //@line 27320
  HEAP32[$114 >> 2] = $20; //@line 27321
  $115 = $ReallocAsyncCtx2 + 44 | 0; //@line 27322
  HEAP32[$115 >> 2] = $22; //@line 27323
  $116 = $ReallocAsyncCtx2 + 48 | 0; //@line 27324
  HEAP32[$116 >> 2] = $24; //@line 27325
  $117 = $ReallocAsyncCtx2 + 52 | 0; //@line 27326
  HEAP32[$117 >> 2] = $26; //@line 27327
  $118 = $ReallocAsyncCtx2 + 56 | 0; //@line 27328
  HEAP32[$118 >> 2] = $28; //@line 27329
  $119 = $ReallocAsyncCtx2 + 60 | 0; //@line 27330
  HEAP32[$119 >> 2] = $30; //@line 27331
  $120 = $ReallocAsyncCtx2 + 64 | 0; //@line 27332
  HEAP32[$120 >> 2] = $32; //@line 27333
  $121 = $ReallocAsyncCtx2 + 68 | 0; //@line 27334
  $$expand_i1_val33 = $34 & 1; //@line 27335
  HEAP8[$121 >> 0] = $$expand_i1_val33; //@line 27336
  $122 = $ReallocAsyncCtx2 + 72 | 0; //@line 27337
  HEAP32[$122 >> 2] = $42; //@line 27338
  $123 = $ReallocAsyncCtx2 + 76 | 0; //@line 27339
  HEAP32[$123 >> 2] = $$reg2mem$0; //@line 27340
  $124 = $ReallocAsyncCtx2 + 80 | 0; //@line 27341
  HEAP32[$124 >> 2] = $$reg2mem24$0; //@line 27342
  sp = STACKTOP; //@line 27343
  return;
 } else if ((label | 0) == 24) {
  $140 = _equeue_tick() | 0; //@line 27347
  if ($34) {
   $141 = $16 - $140 | 0; //@line 27349
   if (($141 | 0) < 1) {
    $143 = $4 + 40 | 0; //@line 27352
    if (HEAP32[$143 >> 2] | 0) {
     _equeue_mutex_lock($6); //@line 27356
     $146 = HEAP32[$143 >> 2] | 0; //@line 27357
     if ($146 | 0) {
      $148 = HEAP32[$14 >> 2] | 0; //@line 27360
      if ($148 | 0) {
       $151 = HEAP32[$4 + 44 >> 2] | 0; //@line 27364
       $154 = (HEAP32[$148 + 20 >> 2] | 0) - $140 | 0; //@line 27367
       $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 27371
       FUNCTION_TABLE_vii[$146 & 31]($151, $154 & ~($154 >> 31)); //@line 27372
       if (___async) {
        HEAP32[$ReallocAsyncCtx3 >> 2] = 108; //@line 27375
        $158 = $ReallocAsyncCtx3 + 4 | 0; //@line 27376
        HEAP32[$158 >> 2] = $10; //@line 27377
        $159 = $ReallocAsyncCtx3 + 8 | 0; //@line 27378
        HEAP32[$159 >> 2] = $6; //@line 27379
        $160 = $ReallocAsyncCtx3 + 12 | 0; //@line 27380
        HEAP32[$160 >> 2] = $12; //@line 27381
        sp = STACKTOP; //@line 27382
        return;
       }
       ___async_unwind = 0; //@line 27385
       HEAP32[$ReallocAsyncCtx3 >> 2] = 108; //@line 27386
       $158 = $ReallocAsyncCtx3 + 4 | 0; //@line 27387
       HEAP32[$158 >> 2] = $10; //@line 27388
       $159 = $ReallocAsyncCtx3 + 8 | 0; //@line 27389
       HEAP32[$159 >> 2] = $6; //@line 27390
       $160 = $ReallocAsyncCtx3 + 12 | 0; //@line 27391
       HEAP32[$160 >> 2] = $12; //@line 27392
       sp = STACKTOP; //@line 27393
       return;
      }
     }
     HEAP8[$10 >> 0] = 1; //@line 27397
     _equeue_mutex_unlock($6); //@line 27398
    }
    HEAP8[$12 >> 0] = 0; //@line 27400
    return;
   } else {
    $$065 = $141; //@line 27403
   }
  } else {
   $$065 = -1; //@line 27406
  }
  _equeue_mutex_lock($6); //@line 27408
  $161 = HEAP32[$14 >> 2] | 0; //@line 27409
  if (!$161) {
   $$2 = $$065; //@line 27412
  } else {
   $165 = (HEAP32[$161 + 20 >> 2] | 0) - $140 | 0; //@line 27416
   $168 = $165 & ~($165 >> 31); //@line 27419
   $$2 = $168 >>> 0 < $$065 >>> 0 ? $168 : $$065; //@line 27422
  }
  _equeue_mutex_unlock($6); //@line 27424
  _equeue_sema_wait($26, $$2) | 0; //@line 27425
  do {
   if (HEAP8[$12 >> 0] | 0) {
    _equeue_mutex_lock($6); //@line 27430
    if (!(HEAP8[$12 >> 0] | 0)) {
     _equeue_mutex_unlock($6); //@line 27434
     break;
    }
    HEAP8[$12 >> 0] = 0; //@line 27437
    _equeue_mutex_unlock($6); //@line 27438
    return;
   }
  } while (0);
  $174 = _equeue_tick() | 0; //@line 27442
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(76) | 0; //@line 27443
  _wait_ms(20); //@line 27444
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 109; //@line 27447
   $175 = $ReallocAsyncCtx5 + 4 | 0; //@line 27448
   HEAP32[$175 >> 2] = $2; //@line 27449
   $176 = $ReallocAsyncCtx5 + 8 | 0; //@line 27450
   HEAP32[$176 >> 2] = $4; //@line 27451
   $177 = $ReallocAsyncCtx5 + 12 | 0; //@line 27452
   HEAP32[$177 >> 2] = $174; //@line 27453
   $178 = $ReallocAsyncCtx5 + 16 | 0; //@line 27454
   HEAP32[$178 >> 2] = $6; //@line 27455
   $179 = $ReallocAsyncCtx5 + 20 | 0; //@line 27456
   HEAP32[$179 >> 2] = $8; //@line 27457
   $180 = $ReallocAsyncCtx5 + 24 | 0; //@line 27458
   HEAP32[$180 >> 2] = $10; //@line 27459
   $181 = $ReallocAsyncCtx5 + 28 | 0; //@line 27460
   HEAP32[$181 >> 2] = $12; //@line 27461
   $182 = $ReallocAsyncCtx5 + 32 | 0; //@line 27462
   HEAP32[$182 >> 2] = $14; //@line 27463
   $183 = $ReallocAsyncCtx5 + 36 | 0; //@line 27464
   HEAP32[$183 >> 2] = $16; //@line 27465
   $184 = $ReallocAsyncCtx5 + 40 | 0; //@line 27466
   HEAP32[$184 >> 2] = $18; //@line 27467
   $185 = $ReallocAsyncCtx5 + 44 | 0; //@line 27468
   HEAP32[$185 >> 2] = $20; //@line 27469
   $186 = $ReallocAsyncCtx5 + 48 | 0; //@line 27470
   HEAP32[$186 >> 2] = $22; //@line 27471
   $187 = $ReallocAsyncCtx5 + 52 | 0; //@line 27472
   HEAP32[$187 >> 2] = $24; //@line 27473
   $188 = $ReallocAsyncCtx5 + 56 | 0; //@line 27474
   HEAP32[$188 >> 2] = $26; //@line 27475
   $189 = $ReallocAsyncCtx5 + 60 | 0; //@line 27476
   HEAP32[$189 >> 2] = $28; //@line 27477
   $190 = $ReallocAsyncCtx5 + 64 | 0; //@line 27478
   HEAP32[$190 >> 2] = $30; //@line 27479
   $191 = $ReallocAsyncCtx5 + 68 | 0; //@line 27480
   HEAP32[$191 >> 2] = $32; //@line 27481
   $192 = $ReallocAsyncCtx5 + 72 | 0; //@line 27482
   $$expand_i1_val35 = $34 & 1; //@line 27483
   HEAP8[$192 >> 0] = $$expand_i1_val35; //@line 27484
   sp = STACKTOP; //@line 27485
   return;
  }
  ___async_unwind = 0; //@line 27488
  HEAP32[$ReallocAsyncCtx5 >> 2] = 109; //@line 27489
  $175 = $ReallocAsyncCtx5 + 4 | 0; //@line 27490
  HEAP32[$175 >> 2] = $2; //@line 27491
  $176 = $ReallocAsyncCtx5 + 8 | 0; //@line 27492
  HEAP32[$176 >> 2] = $4; //@line 27493
  $177 = $ReallocAsyncCtx5 + 12 | 0; //@line 27494
  HEAP32[$177 >> 2] = $174; //@line 27495
  $178 = $ReallocAsyncCtx5 + 16 | 0; //@line 27496
  HEAP32[$178 >> 2] = $6; //@line 27497
  $179 = $ReallocAsyncCtx5 + 20 | 0; //@line 27498
  HEAP32[$179 >> 2] = $8; //@line 27499
  $180 = $ReallocAsyncCtx5 + 24 | 0; //@line 27500
  HEAP32[$180 >> 2] = $10; //@line 27501
  $181 = $ReallocAsyncCtx5 + 28 | 0; //@line 27502
  HEAP32[$181 >> 2] = $12; //@line 27503
  $182 = $ReallocAsyncCtx5 + 32 | 0; //@line 27504
  HEAP32[$182 >> 2] = $14; //@line 27505
  $183 = $ReallocAsyncCtx5 + 36 | 0; //@line 27506
  HEAP32[$183 >> 2] = $16; //@line 27507
  $184 = $ReallocAsyncCtx5 + 40 | 0; //@line 27508
  HEAP32[$184 >> 2] = $18; //@line 27509
  $185 = $ReallocAsyncCtx5 + 44 | 0; //@line 27510
  HEAP32[$185 >> 2] = $20; //@line 27511
  $186 = $ReallocAsyncCtx5 + 48 | 0; //@line 27512
  HEAP32[$186 >> 2] = $22; //@line 27513
  $187 = $ReallocAsyncCtx5 + 52 | 0; //@line 27514
  HEAP32[$187 >> 2] = $24; //@line 27515
  $188 = $ReallocAsyncCtx5 + 56 | 0; //@line 27516
  HEAP32[$188 >> 2] = $26; //@line 27517
  $189 = $ReallocAsyncCtx5 + 60 | 0; //@line 27518
  HEAP32[$189 >> 2] = $28; //@line 27519
  $190 = $ReallocAsyncCtx5 + 64 | 0; //@line 27520
  HEAP32[$190 >> 2] = $30; //@line 27521
  $191 = $ReallocAsyncCtx5 + 68 | 0; //@line 27522
  HEAP32[$191 >> 2] = $32; //@line 27523
  $192 = $ReallocAsyncCtx5 + 72 | 0; //@line 27524
  $$expand_i1_val35 = $34 & 1; //@line 27525
  HEAP8[$192 >> 0] = $$expand_i1_val35; //@line 27526
  sp = STACKTOP; //@line 27527
  return;
 }
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_92($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $10 = 0, $100 = 0, $105 = 0, $107 = 0, $108 = 0, $109 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $125 = 0, $126 = 0, $128 = 0, $129 = 0, $130 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $156 = 0, $16 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $170 = 0, $171 = 0, $173 = 0, $174 = 0, $175 = 0, $177 = 0, $178 = 0, $179 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $187 = 0, $19 = 0, $191 = 0, $192 = 0, $194 = 0, $195 = 0, $196 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $30 = 0, $4 = 0, $44 = 0, $48 = 0, $53 = 0, $59 = 0, $6 = 0, $60 = 0, $65 = 0, $69 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $82 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $97 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx18 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 24438
 STACKTOP = STACKTOP + 16 | 0; //@line 24439
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 24439
 $$byval_copy = sp; //@line 24440
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24442
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24444
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24446
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24448
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24450
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24452
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 24454
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 24456
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx18 = _emscripten_realloc_async_context(36) | 0; //@line 24461
  _mbed_assert_internal(12025, 12034, 194); //@line 24462
  if (___async) {
   HEAP32[$ReallocAsyncCtx18 >> 2] = 371; //@line 24465
   $19 = $ReallocAsyncCtx18 + 4 | 0; //@line 24466
   HEAP32[$19 >> 2] = $2; //@line 24467
   $20 = $ReallocAsyncCtx18 + 8 | 0; //@line 24468
   HEAP32[$20 >> 2] = $4; //@line 24469
   $21 = $ReallocAsyncCtx18 + 12 | 0; //@line 24470
   HEAP32[$21 >> 2] = $6; //@line 24471
   $22 = $ReallocAsyncCtx18 + 16 | 0; //@line 24472
   HEAP32[$22 >> 2] = $8; //@line 24473
   $23 = $ReallocAsyncCtx18 + 20 | 0; //@line 24474
   HEAP32[$23 >> 2] = $10; //@line 24475
   $24 = $ReallocAsyncCtx18 + 24 | 0; //@line 24476
   HEAP32[$24 >> 2] = $12; //@line 24477
   $25 = $ReallocAsyncCtx18 + 28 | 0; //@line 24478
   HEAP32[$25 >> 2] = $14; //@line 24479
   $26 = $ReallocAsyncCtx18 + 32 | 0; //@line 24480
   HEAP32[$26 >> 2] = $16; //@line 24481
   sp = STACKTOP; //@line 24482
   STACKTOP = sp; //@line 24483
   return;
  }
  ___async_unwind = 0; //@line 24485
  HEAP32[$ReallocAsyncCtx18 >> 2] = 371; //@line 24486
  $19 = $ReallocAsyncCtx18 + 4 | 0; //@line 24487
  HEAP32[$19 >> 2] = $2; //@line 24488
  $20 = $ReallocAsyncCtx18 + 8 | 0; //@line 24489
  HEAP32[$20 >> 2] = $4; //@line 24490
  $21 = $ReallocAsyncCtx18 + 12 | 0; //@line 24491
  HEAP32[$21 >> 2] = $6; //@line 24492
  $22 = $ReallocAsyncCtx18 + 16 | 0; //@line 24493
  HEAP32[$22 >> 2] = $8; //@line 24494
  $23 = $ReallocAsyncCtx18 + 20 | 0; //@line 24495
  HEAP32[$23 >> 2] = $10; //@line 24496
  $24 = $ReallocAsyncCtx18 + 24 | 0; //@line 24497
  HEAP32[$24 >> 2] = $12; //@line 24498
  $25 = $ReallocAsyncCtx18 + 28 | 0; //@line 24499
  HEAP32[$25 >> 2] = $14; //@line 24500
  $26 = $ReallocAsyncCtx18 + 32 | 0; //@line 24501
  HEAP32[$26 >> 2] = $16; //@line 24502
  sp = STACKTOP; //@line 24503
  STACKTOP = sp; //@line 24504
  return;
 }
 do {
  if (HEAP8[$2 >> 0] & 2) {
   $30 = $4 + 288 | 0; //@line 24511
   if (!(HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($30) | 0) + 10 >> 0] | 0)) {
    if ((HEAPU8[$4 + 895 >> 0] | 0) <= (HEAPU8[$4 + 894 >> 0] | 0)) {
     break;
    }
   }
   HEAP8[$4 + 377 >> 0] = 0; //@line 24527
   HEAP8[$14 >> 0] = 0; //@line 24528
   if (!(HEAP8[$4 + 370 >> 0] | 0)) {
    $44 = $4 + 956 | 0; //@line 24533
    HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) + 1; //@line 24536
   }
   $48 = HEAP8[$4 + 895 >> 0] | 0; //@line 24539
   HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($30) | 0) + 11 >> 0] = $48; //@line 24542
   HEAP32[$8 >> 2] = HEAP32[$8 >> 2] & -2; //@line 24545
  }
 } while (0);
 $53 = $4 + 377 | 0; //@line 24548
 if (HEAP8[$53 >> 0] | 0) {
  if (!(HEAP32[$8 >> 2] & 16)) {
   HEAP8[$53 >> 0] = 0; //@line 24556
   $59 = $4 + 895 | 0; //@line 24557
   $60 = HEAP8[$59 >> 0] | 0; //@line 24558
   if (!(($60 & 255) < 9 ? ($60 & 255) < (HEAPU8[$4 + 894 >> 0] | 0) : 0)) {
    $82 = HEAP32[$4 >> 2] | 0; //@line 24565
    $85 = HEAP32[(HEAP32[$82 >> 2] | 0) + 16 >> 2] | 0; //@line 24568
    $ReallocAsyncCtx = _emscripten_realloc_async_context(36) | 0; //@line 24569
    FUNCTION_TABLE_vi[$85 & 1023]($82); //@line 24570
    if (___async) {
     HEAP32[$ReallocAsyncCtx >> 2] = 375; //@line 24573
     $86 = $ReallocAsyncCtx + 4 | 0; //@line 24574
     HEAP32[$86 >> 2] = $4; //@line 24575
     $87 = $ReallocAsyncCtx + 8 | 0; //@line 24576
     HEAP32[$87 >> 2] = $8; //@line 24577
     $88 = $ReallocAsyncCtx + 12 | 0; //@line 24578
     HEAP32[$88 >> 2] = $2; //@line 24579
     $89 = $ReallocAsyncCtx + 16 | 0; //@line 24580
     HEAP32[$89 >> 2] = $14; //@line 24581
     $90 = $ReallocAsyncCtx + 20 | 0; //@line 24582
     HEAP32[$90 >> 2] = $59; //@line 24583
     $91 = $ReallocAsyncCtx + 24 | 0; //@line 24584
     HEAP32[$91 >> 2] = $10; //@line 24585
     $92 = $ReallocAsyncCtx + 28 | 0; //@line 24586
     HEAP32[$92 >> 2] = $12; //@line 24587
     $93 = $ReallocAsyncCtx + 32 | 0; //@line 24588
     HEAP32[$93 >> 2] = $6; //@line 24589
     sp = STACKTOP; //@line 24590
     STACKTOP = sp; //@line 24591
     return;
    }
    ___async_unwind = 0; //@line 24593
    HEAP32[$ReallocAsyncCtx >> 2] = 375; //@line 24594
    $86 = $ReallocAsyncCtx + 4 | 0; //@line 24595
    HEAP32[$86 >> 2] = $4; //@line 24596
    $87 = $ReallocAsyncCtx + 8 | 0; //@line 24597
    HEAP32[$87 >> 2] = $8; //@line 24598
    $88 = $ReallocAsyncCtx + 12 | 0; //@line 24599
    HEAP32[$88 >> 2] = $2; //@line 24600
    $89 = $ReallocAsyncCtx + 16 | 0; //@line 24601
    HEAP32[$89 >> 2] = $14; //@line 24602
    $90 = $ReallocAsyncCtx + 20 | 0; //@line 24603
    HEAP32[$90 >> 2] = $59; //@line 24604
    $91 = $ReallocAsyncCtx + 24 | 0; //@line 24605
    HEAP32[$91 >> 2] = $10; //@line 24606
    $92 = $ReallocAsyncCtx + 28 | 0; //@line 24607
    HEAP32[$92 >> 2] = $12; //@line 24608
    $93 = $ReallocAsyncCtx + 32 | 0; //@line 24609
    HEAP32[$93 >> 2] = $6; //@line 24610
    sp = STACKTOP; //@line 24611
    STACKTOP = sp; //@line 24612
    return;
   }
   $65 = $60 + 1 << 24 >> 24; //@line 24614
   HEAP8[$59 >> 0] = $65; //@line 24615
   if ($65 & 1) {
    $69 = $4 + 1097 | 0; //@line 24620
    HEAP8[$69 >> 0] = __ZN7LoRaPHY26get_next_lower_tx_datarateEa(HEAP32[$4 >> 2] | 0, HEAP8[$69 >> 0] | 0) | 0; //@line 24623
   }
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(36) | 0; //@line 24625
   $72 = __ZN7LoRaMac11schedule_txEv($4) | 0; //@line 24626
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 374; //@line 24629
    $73 = $ReallocAsyncCtx7 + 4 | 0; //@line 24630
    HEAP32[$73 >> 2] = $2; //@line 24631
    $74 = $ReallocAsyncCtx7 + 8 | 0; //@line 24632
    HEAP32[$74 >> 2] = $4; //@line 24633
    $75 = $ReallocAsyncCtx7 + 12 | 0; //@line 24634
    HEAP32[$75 >> 2] = $6; //@line 24635
    $76 = $ReallocAsyncCtx7 + 16 | 0; //@line 24636
    HEAP32[$76 >> 2] = $8; //@line 24637
    $77 = $ReallocAsyncCtx7 + 20 | 0; //@line 24638
    HEAP32[$77 >> 2] = $14; //@line 24639
    $78 = $ReallocAsyncCtx7 + 24 | 0; //@line 24640
    HEAP32[$78 >> 2] = $59; //@line 24641
    $79 = $ReallocAsyncCtx7 + 28 | 0; //@line 24642
    HEAP32[$79 >> 2] = $10; //@line 24643
    $80 = $ReallocAsyncCtx7 + 32 | 0; //@line 24644
    HEAP32[$80 >> 2] = $12; //@line 24645
    sp = STACKTOP; //@line 24646
    STACKTOP = sp; //@line 24647
    return;
   }
   HEAP32[___async_retval >> 2] = $72; //@line 24650
   ___async_unwind = 0; //@line 24651
   HEAP32[$ReallocAsyncCtx7 >> 2] = 374; //@line 24652
   $73 = $ReallocAsyncCtx7 + 4 | 0; //@line 24653
   HEAP32[$73 >> 2] = $2; //@line 24654
   $74 = $ReallocAsyncCtx7 + 8 | 0; //@line 24655
   HEAP32[$74 >> 2] = $4; //@line 24656
   $75 = $ReallocAsyncCtx7 + 12 | 0; //@line 24657
   HEAP32[$75 >> 2] = $6; //@line 24658
   $76 = $ReallocAsyncCtx7 + 16 | 0; //@line 24659
   HEAP32[$76 >> 2] = $8; //@line 24660
   $77 = $ReallocAsyncCtx7 + 20 | 0; //@line 24661
   HEAP32[$77 >> 2] = $14; //@line 24662
   $78 = $ReallocAsyncCtx7 + 24 | 0; //@line 24663
   HEAP32[$78 >> 2] = $59; //@line 24664
   $79 = $ReallocAsyncCtx7 + 28 | 0; //@line 24665
   HEAP32[$79 >> 2] = $10; //@line 24666
   $80 = $ReallocAsyncCtx7 + 32 | 0; //@line 24667
   HEAP32[$80 >> 2] = $12; //@line 24668
   sp = STACKTOP; //@line 24669
   STACKTOP = sp; //@line 24670
   return;
  }
 }
 $94 = HEAP32[$8 >> 2] | 0; //@line 24673
 $97 = $94 & -3; //@line 24676
 if (!($94 & 2)) {
  $99 = $94; //@line 24678
 } else {
  HEAP32[$8 >> 2] = $97; //@line 24680
  $99 = $97; //@line 24681
 }
 if ($99 | 0) {
  $150 = HEAP32[$10 >> 2] | 0; //@line 24685
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(16) | 0; //@line 24686
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($150, $12, 1e3); //@line 24687
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 380; //@line 24690
   $151 = $ReallocAsyncCtx6 + 4 | 0; //@line 24691
   HEAP32[$151 >> 2] = $2; //@line 24692
   $152 = $ReallocAsyncCtx6 + 8 | 0; //@line 24693
   HEAP32[$152 >> 2] = $4; //@line 24694
   $153 = $ReallocAsyncCtx6 + 12 | 0; //@line 24695
   HEAP32[$153 >> 2] = $6; //@line 24696
   sp = STACKTOP; //@line 24697
   STACKTOP = sp; //@line 24698
   return;
  }
  ___async_unwind = 0; //@line 24700
  HEAP32[$ReallocAsyncCtx6 >> 2] = 380; //@line 24701
  $151 = $ReallocAsyncCtx6 + 4 | 0; //@line 24702
  HEAP32[$151 >> 2] = $2; //@line 24703
  $152 = $ReallocAsyncCtx6 + 8 | 0; //@line 24704
  HEAP32[$152 >> 2] = $4; //@line 24705
  $153 = $ReallocAsyncCtx6 + 12 | 0; //@line 24706
  HEAP32[$153 >> 2] = $6; //@line 24707
  sp = STACKTOP; //@line 24708
  STACKTOP = sp; //@line 24709
  return;
 }
 $100 = HEAP8[$2 >> 0] | 0; //@line 24711
 if ($100 & 1) {
  HEAP8[$2 >> 0] = $100 & -2; //@line 24716
  $105 = HEAP32[$4 + 1324 >> 2] | 0; //@line 24718
  $107 = __ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0; //@line 24720
  $108 = $105 + 12 | 0; //@line 24721
  $109 = HEAP32[$108 >> 2] | 0; //@line 24722
  if (!$109) {
   $ReallocAsyncCtx16 = _emscripten_realloc_async_context(28) | 0; //@line 24725
   _mbed_assert_internal(13874, 13879, 1102); //@line 24726
   if (___async) {
    HEAP32[$ReallocAsyncCtx16 >> 2] = 376; //@line 24729
    $111 = $ReallocAsyncCtx16 + 4 | 0; //@line 24730
    HEAP32[$111 >> 2] = $2; //@line 24731
    $112 = $ReallocAsyncCtx16 + 8 | 0; //@line 24732
    HEAP32[$112 >> 2] = $4; //@line 24733
    $113 = $ReallocAsyncCtx16 + 12 | 0; //@line 24734
    HEAP32[$113 >> 2] = $6; //@line 24735
    $114 = $ReallocAsyncCtx16 + 16 | 0; //@line 24736
    HEAP32[$114 >> 2] = $108; //@line 24737
    $115 = $ReallocAsyncCtx16 + 20 | 0; //@line 24738
    HEAP32[$115 >> 2] = $105; //@line 24739
    $116 = $ReallocAsyncCtx16 + 24 | 0; //@line 24740
    HEAP32[$116 >> 2] = $107; //@line 24741
    sp = STACKTOP; //@line 24742
    STACKTOP = sp; //@line 24743
    return;
   }
   ___async_unwind = 0; //@line 24745
   HEAP32[$ReallocAsyncCtx16 >> 2] = 376; //@line 24746
   $111 = $ReallocAsyncCtx16 + 4 | 0; //@line 24747
   HEAP32[$111 >> 2] = $2; //@line 24748
   $112 = $ReallocAsyncCtx16 + 8 | 0; //@line 24749
   HEAP32[$112 >> 2] = $4; //@line 24750
   $113 = $ReallocAsyncCtx16 + 12 | 0; //@line 24751
   HEAP32[$113 >> 2] = $6; //@line 24752
   $114 = $ReallocAsyncCtx16 + 16 | 0; //@line 24753
   HEAP32[$114 >> 2] = $108; //@line 24754
   $115 = $ReallocAsyncCtx16 + 20 | 0; //@line 24755
   HEAP32[$115 >> 2] = $105; //@line 24756
   $116 = $ReallocAsyncCtx16 + 24 | 0; //@line 24757
   HEAP32[$116 >> 2] = $107; //@line 24758
   sp = STACKTOP; //@line 24759
   STACKTOP = sp; //@line 24760
   return;
  } else {
   $117 = HEAP32[$109 >> 2] | 0; //@line 24762
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 24763
   FUNCTION_TABLE_vii[$117 & 31]($105, $107); //@line 24764
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 377; //@line 24767
    $118 = $ReallocAsyncCtx2 + 4 | 0; //@line 24768
    HEAP32[$118 >> 2] = $2; //@line 24769
    $119 = $ReallocAsyncCtx2 + 8 | 0; //@line 24770
    HEAP32[$119 >> 2] = $4; //@line 24771
    $120 = $ReallocAsyncCtx2 + 12 | 0; //@line 24772
    HEAP32[$120 >> 2] = $6; //@line 24773
    sp = STACKTOP; //@line 24774
    STACKTOP = sp; //@line 24775
    return;
   }
   ___async_unwind = 0; //@line 24777
   HEAP32[$ReallocAsyncCtx2 >> 2] = 377; //@line 24778
   $118 = $ReallocAsyncCtx2 + 4 | 0; //@line 24779
   HEAP32[$118 >> 2] = $2; //@line 24780
   $119 = $ReallocAsyncCtx2 + 8 | 0; //@line 24781
   HEAP32[$119 >> 2] = $4; //@line 24782
   $120 = $ReallocAsyncCtx2 + 12 | 0; //@line 24783
   HEAP32[$120 >> 2] = $6; //@line 24784
   sp = STACKTOP; //@line 24785
   STACKTOP = sp; //@line 24786
   return;
  }
 }
 if ($100 & 8) {
  HEAP8[$2 >> 0] = $100 & -9; //@line 24793
  $125 = HEAP32[$4 + 1324 >> 2] | 0; //@line 24795
  $126 = $125 + 32 | 0; //@line 24796
  $128 = __ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0; //@line 24798
  $129 = $125 + 44 | 0; //@line 24799
  $130 = HEAP32[$129 >> 2] | 0; //@line 24800
  if (!$130) {
   $ReallocAsyncCtx15 = _emscripten_realloc_async_context(28) | 0; //@line 24803
   _mbed_assert_internal(13874, 13879, 1102); //@line 24804
   if (___async) {
    HEAP32[$ReallocAsyncCtx15 >> 2] = 378; //@line 24807
    $132 = $ReallocAsyncCtx15 + 4 | 0; //@line 24808
    HEAP32[$132 >> 2] = $2; //@line 24809
    $133 = $ReallocAsyncCtx15 + 8 | 0; //@line 24810
    HEAP32[$133 >> 2] = $4; //@line 24811
    $134 = $ReallocAsyncCtx15 + 12 | 0; //@line 24812
    HEAP32[$134 >> 2] = $6; //@line 24813
    $135 = $ReallocAsyncCtx15 + 16 | 0; //@line 24814
    HEAP32[$135 >> 2] = $126; //@line 24815
    $136 = $ReallocAsyncCtx15 + 20 | 0; //@line 24816
    HEAP32[$136 >> 2] = $128; //@line 24817
    $137 = $ReallocAsyncCtx15 + 24 | 0; //@line 24818
    HEAP32[$137 >> 2] = $129; //@line 24819
    sp = STACKTOP; //@line 24820
    STACKTOP = sp; //@line 24821
    return;
   }
   ___async_unwind = 0; //@line 24823
   HEAP32[$ReallocAsyncCtx15 >> 2] = 378; //@line 24824
   $132 = $ReallocAsyncCtx15 + 4 | 0; //@line 24825
   HEAP32[$132 >> 2] = $2; //@line 24826
   $133 = $ReallocAsyncCtx15 + 8 | 0; //@line 24827
   HEAP32[$133 >> 2] = $4; //@line 24828
   $134 = $ReallocAsyncCtx15 + 12 | 0; //@line 24829
   HEAP32[$134 >> 2] = $6; //@line 24830
   $135 = $ReallocAsyncCtx15 + 16 | 0; //@line 24831
   HEAP32[$135 >> 2] = $126; //@line 24832
   $136 = $ReallocAsyncCtx15 + 20 | 0; //@line 24833
   HEAP32[$136 >> 2] = $128; //@line 24834
   $137 = $ReallocAsyncCtx15 + 24 | 0; //@line 24835
   HEAP32[$137 >> 2] = $129; //@line 24836
   sp = STACKTOP; //@line 24837
   STACKTOP = sp; //@line 24838
   return;
  } else {
   $138 = HEAP32[$130 >> 2] | 0; //@line 24840
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 24841
   FUNCTION_TABLE_vii[$138 & 31]($126, $128); //@line 24842
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 379; //@line 24845
    $139 = $ReallocAsyncCtx3 + 4 | 0; //@line 24846
    HEAP32[$139 >> 2] = $2; //@line 24847
    $140 = $ReallocAsyncCtx3 + 8 | 0; //@line 24848
    HEAP32[$140 >> 2] = $4; //@line 24849
    $141 = $ReallocAsyncCtx3 + 12 | 0; //@line 24850
    HEAP32[$141 >> 2] = $6; //@line 24851
    sp = STACKTOP; //@line 24852
    STACKTOP = sp; //@line 24853
    return;
   }
   ___async_unwind = 0; //@line 24855
   HEAP32[$ReallocAsyncCtx3 >> 2] = 379; //@line 24856
   $139 = $ReallocAsyncCtx3 + 4 | 0; //@line 24857
   HEAP32[$139 >> 2] = $2; //@line 24858
   $140 = $ReallocAsyncCtx3 + 8 | 0; //@line 24859
   HEAP32[$140 >> 2] = $4; //@line 24860
   $141 = $ReallocAsyncCtx3 + 12 | 0; //@line 24861
   HEAP32[$141 >> 2] = $6; //@line 24862
   sp = STACKTOP; //@line 24863
   STACKTOP = sp; //@line 24864
   return;
  }
 }
 if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($4 + 4 | 0) | 0) {
  HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0) >> 2] = 4; //@line 24872
  $147 = HEAP8[$2 >> 0] | 16; //@line 24874
  HEAP8[$2 >> 0] = $147; //@line 24875
  $149 = $147; //@line 24876
 } else {
  $149 = HEAP8[$2 >> 0] | 0; //@line 24879
 }
 $148 = $149 & -33; //@line 24881
 HEAP8[$2 >> 0] = $148; //@line 24882
 do {
  if (!($148 & 2)) {
   $187 = $148; //@line 24887
  } else {
   $156 = $148 & -3; //@line 24889
   HEAP8[$2 >> 0] = $156; //@line 24890
   if ((HEAP32[$4 + 360 >> 2] | 0) == 2) {
    $161 = HEAP32[$4 + 1328 >> 2] | 0; //@line 24896
    HEAP32[$6 >> 2] = 273; //@line 24897
    HEAP32[$6 + 4 >> 2] = 0; //@line 24899
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 24900
    HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 24901
    HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 24901
    $162 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($161, $4, $$byval_copy) | 0; //@line 24902
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 381; //@line 24905
     $163 = $ReallocAsyncCtx8 + 4 | 0; //@line 24906
     HEAP32[$163 >> 2] = $2; //@line 24907
     $164 = $ReallocAsyncCtx8 + 8 | 0; //@line 24908
     HEAP32[$164 >> 2] = $4; //@line 24909
     $165 = $ReallocAsyncCtx8 + 12 | 0; //@line 24910
     HEAP32[$165 >> 2] = $6; //@line 24911
     sp = STACKTOP; //@line 24912
     STACKTOP = sp; //@line 24913
     return;
    }
    HEAP32[___async_retval >> 2] = $162; //@line 24916
    ___async_unwind = 0; //@line 24917
    HEAP32[$ReallocAsyncCtx8 >> 2] = 381; //@line 24918
    $163 = $ReallocAsyncCtx8 + 4 | 0; //@line 24919
    HEAP32[$163 >> 2] = $2; //@line 24920
    $164 = $ReallocAsyncCtx8 + 8 | 0; //@line 24921
    HEAP32[$164 >> 2] = $4; //@line 24922
    $165 = $ReallocAsyncCtx8 + 12 | 0; //@line 24923
    HEAP32[$165 >> 2] = $6; //@line 24924
    sp = STACKTOP; //@line 24925
    STACKTOP = sp; //@line 24926
    return;
   }
   if ($156 & 4) {
    $185 = $156 & -5; //@line 24931
    HEAP8[$2 >> 0] = $185; //@line 24932
    $187 = $185; //@line 24933
    break;
   }
   $170 = HEAP32[$4 + 1324 >> 2] | 0; //@line 24937
   $171 = $170 + 16 | 0; //@line 24938
   $173 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 24940
   $174 = $170 + 28 | 0; //@line 24941
   $175 = HEAP32[$174 >> 2] | 0; //@line 24942
   if (!$175) {
    $ReallocAsyncCtx13 = _emscripten_realloc_async_context(24) | 0; //@line 24945
    _mbed_assert_internal(13874, 13879, 1102); //@line 24946
    if (___async) {
     HEAP32[$ReallocAsyncCtx13 >> 2] = 383; //@line 24949
     $177 = $ReallocAsyncCtx13 + 4 | 0; //@line 24950
     HEAP32[$177 >> 2] = $174; //@line 24951
     $178 = $ReallocAsyncCtx13 + 8 | 0; //@line 24952
     HEAP32[$178 >> 2] = $171; //@line 24953
     $179 = $ReallocAsyncCtx13 + 12 | 0; //@line 24954
     HEAP32[$179 >> 2] = $173; //@line 24955
     $180 = $ReallocAsyncCtx13 + 16 | 0; //@line 24956
     HEAP32[$180 >> 2] = $2; //@line 24957
     $181 = $ReallocAsyncCtx13 + 20 | 0; //@line 24958
     HEAP32[$181 >> 2] = $4; //@line 24959
     sp = STACKTOP; //@line 24960
     STACKTOP = sp; //@line 24961
     return;
    }
    ___async_unwind = 0; //@line 24963
    HEAP32[$ReallocAsyncCtx13 >> 2] = 383; //@line 24964
    $177 = $ReallocAsyncCtx13 + 4 | 0; //@line 24965
    HEAP32[$177 >> 2] = $174; //@line 24966
    $178 = $ReallocAsyncCtx13 + 8 | 0; //@line 24967
    HEAP32[$178 >> 2] = $171; //@line 24968
    $179 = $ReallocAsyncCtx13 + 12 | 0; //@line 24969
    HEAP32[$179 >> 2] = $173; //@line 24970
    $180 = $ReallocAsyncCtx13 + 16 | 0; //@line 24971
    HEAP32[$180 >> 2] = $2; //@line 24972
    $181 = $ReallocAsyncCtx13 + 20 | 0; //@line 24973
    HEAP32[$181 >> 2] = $4; //@line 24974
    sp = STACKTOP; //@line 24975
    STACKTOP = sp; //@line 24976
    return;
   } else {
    $182 = HEAP32[$175 >> 2] | 0; //@line 24978
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 24979
    FUNCTION_TABLE_vii[$182 & 31]($171, $173); //@line 24980
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 384; //@line 24983
     $183 = $ReallocAsyncCtx4 + 4 | 0; //@line 24984
     HEAP32[$183 >> 2] = $2; //@line 24985
     $184 = $ReallocAsyncCtx4 + 8 | 0; //@line 24986
     HEAP32[$184 >> 2] = $4; //@line 24987
     sp = STACKTOP; //@line 24988
     STACKTOP = sp; //@line 24989
     return;
    }
    ___async_unwind = 0; //@line 24991
    HEAP32[$ReallocAsyncCtx4 >> 2] = 384; //@line 24992
    $183 = $ReallocAsyncCtx4 + 4 | 0; //@line 24993
    HEAP32[$183 >> 2] = $2; //@line 24994
    $184 = $ReallocAsyncCtx4 + 8 | 0; //@line 24995
    HEAP32[$184 >> 2] = $4; //@line 24996
    sp = STACKTOP; //@line 24997
    STACKTOP = sp; //@line 24998
    return;
   }
  }
 } while (0);
 if (!($187 & 16)) {
  STACKTOP = sp; //@line 25005
  return;
 }
 HEAP8[$2 >> 0] = $187 & -17; //@line 25008
 $191 = HEAP32[$4 + 1324 >> 2] | 0; //@line 25010
 $192 = $191 + 48 | 0; //@line 25011
 $194 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 25013
 $195 = $191 + 60 | 0; //@line 25014
 $196 = HEAP32[$195 >> 2] | 0; //@line 25015
 if (!$196) {
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(16) | 0; //@line 25018
  _mbed_assert_internal(13874, 13879, 1102); //@line 25019
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 385; //@line 25022
   $198 = $ReallocAsyncCtx12 + 4 | 0; //@line 25023
   HEAP32[$198 >> 2] = $195; //@line 25024
   $199 = $ReallocAsyncCtx12 + 8 | 0; //@line 25025
   HEAP32[$199 >> 2] = $192; //@line 25026
   $200 = $ReallocAsyncCtx12 + 12 | 0; //@line 25027
   HEAP32[$200 >> 2] = $194; //@line 25028
   sp = STACKTOP; //@line 25029
   STACKTOP = sp; //@line 25030
   return;
  }
  ___async_unwind = 0; //@line 25032
  HEAP32[$ReallocAsyncCtx12 >> 2] = 385; //@line 25033
  $198 = $ReallocAsyncCtx12 + 4 | 0; //@line 25034
  HEAP32[$198 >> 2] = $195; //@line 25035
  $199 = $ReallocAsyncCtx12 + 8 | 0; //@line 25036
  HEAP32[$199 >> 2] = $192; //@line 25037
  $200 = $ReallocAsyncCtx12 + 12 | 0; //@line 25038
  HEAP32[$200 >> 2] = $194; //@line 25039
  sp = STACKTOP; //@line 25040
  STACKTOP = sp; //@line 25041
  return;
 } else {
  $201 = HEAP32[$196 >> 2] | 0; //@line 25043
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 25044
  FUNCTION_TABLE_vii[$201 & 31]($192, $194); //@line 25045
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 386; //@line 25048
   sp = STACKTOP; //@line 25049
   STACKTOP = sp; //@line 25050
   return;
  }
  ___async_unwind = 0; //@line 25052
  HEAP32[$ReallocAsyncCtx5 >> 2] = 386; //@line 25053
  sp = STACKTOP; //@line 25054
  STACKTOP = sp; //@line 25055
  return;
 }
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_91($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $10 = 0, $100 = 0, $105 = 0, $107 = 0, $108 = 0, $109 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $125 = 0, $126 = 0, $128 = 0, $129 = 0, $130 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $156 = 0, $16 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $170 = 0, $171 = 0, $173 = 0, $174 = 0, $175 = 0, $177 = 0, $178 = 0, $179 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $187 = 0, $19 = 0, $191 = 0, $192 = 0, $194 = 0, $195 = 0, $196 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $30 = 0, $4 = 0, $44 = 0, $48 = 0, $53 = 0, $59 = 0, $6 = 0, $60 = 0, $65 = 0, $69 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $82 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $97 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 23804
 STACKTOP = STACKTOP + 16 | 0; //@line 23805
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 23805
 $$byval_copy = sp; //@line 23806
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23808
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23810
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23812
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23814
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23816
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23818
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23820
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 23822
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx17 = _emscripten_realloc_async_context(36) | 0; //@line 23827
  _mbed_assert_internal(12025, 12034, 194); //@line 23828
  if (___async) {
   HEAP32[$ReallocAsyncCtx17 >> 2] = 373; //@line 23831
   $19 = $ReallocAsyncCtx17 + 4 | 0; //@line 23832
   HEAP32[$19 >> 2] = $2; //@line 23833
   $20 = $ReallocAsyncCtx17 + 8 | 0; //@line 23834
   HEAP32[$20 >> 2] = $4; //@line 23835
   $21 = $ReallocAsyncCtx17 + 12 | 0; //@line 23836
   HEAP32[$21 >> 2] = $6; //@line 23837
   $22 = $ReallocAsyncCtx17 + 16 | 0; //@line 23838
   HEAP32[$22 >> 2] = $8; //@line 23839
   $23 = $ReallocAsyncCtx17 + 20 | 0; //@line 23840
   HEAP32[$23 >> 2] = $10; //@line 23841
   $24 = $ReallocAsyncCtx17 + 24 | 0; //@line 23842
   HEAP32[$24 >> 2] = $12; //@line 23843
   $25 = $ReallocAsyncCtx17 + 28 | 0; //@line 23844
   HEAP32[$25 >> 2] = $14; //@line 23845
   $26 = $ReallocAsyncCtx17 + 32 | 0; //@line 23846
   HEAP32[$26 >> 2] = $16; //@line 23847
   sp = STACKTOP; //@line 23848
   STACKTOP = sp; //@line 23849
   return;
  }
  ___async_unwind = 0; //@line 23851
  HEAP32[$ReallocAsyncCtx17 >> 2] = 373; //@line 23852
  $19 = $ReallocAsyncCtx17 + 4 | 0; //@line 23853
  HEAP32[$19 >> 2] = $2; //@line 23854
  $20 = $ReallocAsyncCtx17 + 8 | 0; //@line 23855
  HEAP32[$20 >> 2] = $4; //@line 23856
  $21 = $ReallocAsyncCtx17 + 12 | 0; //@line 23857
  HEAP32[$21 >> 2] = $6; //@line 23858
  $22 = $ReallocAsyncCtx17 + 16 | 0; //@line 23859
  HEAP32[$22 >> 2] = $8; //@line 23860
  $23 = $ReallocAsyncCtx17 + 20 | 0; //@line 23861
  HEAP32[$23 >> 2] = $10; //@line 23862
  $24 = $ReallocAsyncCtx17 + 24 | 0; //@line 23863
  HEAP32[$24 >> 2] = $12; //@line 23864
  $25 = $ReallocAsyncCtx17 + 28 | 0; //@line 23865
  HEAP32[$25 >> 2] = $14; //@line 23866
  $26 = $ReallocAsyncCtx17 + 32 | 0; //@line 23867
  HEAP32[$26 >> 2] = $16; //@line 23868
  sp = STACKTOP; //@line 23869
  STACKTOP = sp; //@line 23870
  return;
 }
 do {
  if (HEAP8[$2 >> 0] & 2) {
   $30 = $4 + 288 | 0; //@line 23877
   if (!(HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($30) | 0) + 10 >> 0] | 0)) {
    if ((HEAPU8[$4 + 895 >> 0] | 0) <= (HEAPU8[$4 + 894 >> 0] | 0)) {
     break;
    }
   }
   HEAP8[$4 + 377 >> 0] = 0; //@line 23893
   HEAP8[$16 >> 0] = 0; //@line 23894
   if (!(HEAP8[$4 + 370 >> 0] | 0)) {
    $44 = $4 + 956 | 0; //@line 23899
    HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) + 1; //@line 23902
   }
   $48 = HEAP8[$4 + 895 >> 0] | 0; //@line 23905
   HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($30) | 0) + 11 >> 0] = $48; //@line 23908
   HEAP32[$8 >> 2] = HEAP32[$8 >> 2] & -2; //@line 23911
  }
 } while (0);
 $53 = $4 + 377 | 0; //@line 23914
 if (HEAP8[$53 >> 0] | 0) {
  if (!(HEAP32[$8 >> 2] & 16)) {
   HEAP8[$53 >> 0] = 0; //@line 23922
   $59 = $4 + 895 | 0; //@line 23923
   $60 = HEAP8[$59 >> 0] | 0; //@line 23924
   if (!(($60 & 255) < 9 ? ($60 & 255) < (HEAPU8[$4 + 894 >> 0] | 0) : 0)) {
    $82 = HEAP32[$4 >> 2] | 0; //@line 23931
    $85 = HEAP32[(HEAP32[$82 >> 2] | 0) + 16 >> 2] | 0; //@line 23934
    $ReallocAsyncCtx = _emscripten_realloc_async_context(36) | 0; //@line 23935
    FUNCTION_TABLE_vi[$85 & 1023]($82); //@line 23936
    if (___async) {
     HEAP32[$ReallocAsyncCtx >> 2] = 375; //@line 23939
     $86 = $ReallocAsyncCtx + 4 | 0; //@line 23940
     HEAP32[$86 >> 2] = $4; //@line 23941
     $87 = $ReallocAsyncCtx + 8 | 0; //@line 23942
     HEAP32[$87 >> 2] = $8; //@line 23943
     $88 = $ReallocAsyncCtx + 12 | 0; //@line 23944
     HEAP32[$88 >> 2] = $2; //@line 23945
     $89 = $ReallocAsyncCtx + 16 | 0; //@line 23946
     HEAP32[$89 >> 2] = $16; //@line 23947
     $90 = $ReallocAsyncCtx + 20 | 0; //@line 23948
     HEAP32[$90 >> 2] = $59; //@line 23949
     $91 = $ReallocAsyncCtx + 24 | 0; //@line 23950
     HEAP32[$91 >> 2] = $12; //@line 23951
     $92 = $ReallocAsyncCtx + 28 | 0; //@line 23952
     HEAP32[$92 >> 2] = $14; //@line 23953
     $93 = $ReallocAsyncCtx + 32 | 0; //@line 23954
     HEAP32[$93 >> 2] = $6; //@line 23955
     sp = STACKTOP; //@line 23956
     STACKTOP = sp; //@line 23957
     return;
    }
    ___async_unwind = 0; //@line 23959
    HEAP32[$ReallocAsyncCtx >> 2] = 375; //@line 23960
    $86 = $ReallocAsyncCtx + 4 | 0; //@line 23961
    HEAP32[$86 >> 2] = $4; //@line 23962
    $87 = $ReallocAsyncCtx + 8 | 0; //@line 23963
    HEAP32[$87 >> 2] = $8; //@line 23964
    $88 = $ReallocAsyncCtx + 12 | 0; //@line 23965
    HEAP32[$88 >> 2] = $2; //@line 23966
    $89 = $ReallocAsyncCtx + 16 | 0; //@line 23967
    HEAP32[$89 >> 2] = $16; //@line 23968
    $90 = $ReallocAsyncCtx + 20 | 0; //@line 23969
    HEAP32[$90 >> 2] = $59; //@line 23970
    $91 = $ReallocAsyncCtx + 24 | 0; //@line 23971
    HEAP32[$91 >> 2] = $12; //@line 23972
    $92 = $ReallocAsyncCtx + 28 | 0; //@line 23973
    HEAP32[$92 >> 2] = $14; //@line 23974
    $93 = $ReallocAsyncCtx + 32 | 0; //@line 23975
    HEAP32[$93 >> 2] = $6; //@line 23976
    sp = STACKTOP; //@line 23977
    STACKTOP = sp; //@line 23978
    return;
   }
   $65 = $60 + 1 << 24 >> 24; //@line 23980
   HEAP8[$59 >> 0] = $65; //@line 23981
   if ($65 & 1) {
    $69 = $4 + 1097 | 0; //@line 23986
    HEAP8[$69 >> 0] = __ZN7LoRaPHY26get_next_lower_tx_datarateEa(HEAP32[$4 >> 2] | 0, HEAP8[$69 >> 0] | 0) | 0; //@line 23989
   }
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(36) | 0; //@line 23991
   $72 = __ZN7LoRaMac11schedule_txEv($4) | 0; //@line 23992
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 374; //@line 23995
    $73 = $ReallocAsyncCtx7 + 4 | 0; //@line 23996
    HEAP32[$73 >> 2] = $2; //@line 23997
    $74 = $ReallocAsyncCtx7 + 8 | 0; //@line 23998
    HEAP32[$74 >> 2] = $4; //@line 23999
    $75 = $ReallocAsyncCtx7 + 12 | 0; //@line 24000
    HEAP32[$75 >> 2] = $6; //@line 24001
    $76 = $ReallocAsyncCtx7 + 16 | 0; //@line 24002
    HEAP32[$76 >> 2] = $8; //@line 24003
    $77 = $ReallocAsyncCtx7 + 20 | 0; //@line 24004
    HEAP32[$77 >> 2] = $16; //@line 24005
    $78 = $ReallocAsyncCtx7 + 24 | 0; //@line 24006
    HEAP32[$78 >> 2] = $59; //@line 24007
    $79 = $ReallocAsyncCtx7 + 28 | 0; //@line 24008
    HEAP32[$79 >> 2] = $12; //@line 24009
    $80 = $ReallocAsyncCtx7 + 32 | 0; //@line 24010
    HEAP32[$80 >> 2] = $14; //@line 24011
    sp = STACKTOP; //@line 24012
    STACKTOP = sp; //@line 24013
    return;
   }
   HEAP32[___async_retval >> 2] = $72; //@line 24016
   ___async_unwind = 0; //@line 24017
   HEAP32[$ReallocAsyncCtx7 >> 2] = 374; //@line 24018
   $73 = $ReallocAsyncCtx7 + 4 | 0; //@line 24019
   HEAP32[$73 >> 2] = $2; //@line 24020
   $74 = $ReallocAsyncCtx7 + 8 | 0; //@line 24021
   HEAP32[$74 >> 2] = $4; //@line 24022
   $75 = $ReallocAsyncCtx7 + 12 | 0; //@line 24023
   HEAP32[$75 >> 2] = $6; //@line 24024
   $76 = $ReallocAsyncCtx7 + 16 | 0; //@line 24025
   HEAP32[$76 >> 2] = $8; //@line 24026
   $77 = $ReallocAsyncCtx7 + 20 | 0; //@line 24027
   HEAP32[$77 >> 2] = $16; //@line 24028
   $78 = $ReallocAsyncCtx7 + 24 | 0; //@line 24029
   HEAP32[$78 >> 2] = $59; //@line 24030
   $79 = $ReallocAsyncCtx7 + 28 | 0; //@line 24031
   HEAP32[$79 >> 2] = $12; //@line 24032
   $80 = $ReallocAsyncCtx7 + 32 | 0; //@line 24033
   HEAP32[$80 >> 2] = $14; //@line 24034
   sp = STACKTOP; //@line 24035
   STACKTOP = sp; //@line 24036
   return;
  }
 }
 $94 = HEAP32[$8 >> 2] | 0; //@line 24039
 $97 = $94 & -3; //@line 24042
 if (!($94 & 2)) {
  $99 = $94; //@line 24044
 } else {
  HEAP32[$8 >> 2] = $97; //@line 24046
  $99 = $97; //@line 24047
 }
 if ($99 | 0) {
  $150 = HEAP32[$12 >> 2] | 0; //@line 24051
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(16) | 0; //@line 24052
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($150, $14, 1e3); //@line 24053
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 380; //@line 24056
   $151 = $ReallocAsyncCtx6 + 4 | 0; //@line 24057
   HEAP32[$151 >> 2] = $2; //@line 24058
   $152 = $ReallocAsyncCtx6 + 8 | 0; //@line 24059
   HEAP32[$152 >> 2] = $4; //@line 24060
   $153 = $ReallocAsyncCtx6 + 12 | 0; //@line 24061
   HEAP32[$153 >> 2] = $6; //@line 24062
   sp = STACKTOP; //@line 24063
   STACKTOP = sp; //@line 24064
   return;
  }
  ___async_unwind = 0; //@line 24066
  HEAP32[$ReallocAsyncCtx6 >> 2] = 380; //@line 24067
  $151 = $ReallocAsyncCtx6 + 4 | 0; //@line 24068
  HEAP32[$151 >> 2] = $2; //@line 24069
  $152 = $ReallocAsyncCtx6 + 8 | 0; //@line 24070
  HEAP32[$152 >> 2] = $4; //@line 24071
  $153 = $ReallocAsyncCtx6 + 12 | 0; //@line 24072
  HEAP32[$153 >> 2] = $6; //@line 24073
  sp = STACKTOP; //@line 24074
  STACKTOP = sp; //@line 24075
  return;
 }
 $100 = HEAP8[$2 >> 0] | 0; //@line 24077
 if ($100 & 1) {
  HEAP8[$2 >> 0] = $100 & -2; //@line 24082
  $105 = HEAP32[$4 + 1324 >> 2] | 0; //@line 24084
  $107 = __ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0; //@line 24086
  $108 = $105 + 12 | 0; //@line 24087
  $109 = HEAP32[$108 >> 2] | 0; //@line 24088
  if (!$109) {
   $ReallocAsyncCtx16 = _emscripten_realloc_async_context(28) | 0; //@line 24091
   _mbed_assert_internal(13874, 13879, 1102); //@line 24092
   if (___async) {
    HEAP32[$ReallocAsyncCtx16 >> 2] = 376; //@line 24095
    $111 = $ReallocAsyncCtx16 + 4 | 0; //@line 24096
    HEAP32[$111 >> 2] = $2; //@line 24097
    $112 = $ReallocAsyncCtx16 + 8 | 0; //@line 24098
    HEAP32[$112 >> 2] = $4; //@line 24099
    $113 = $ReallocAsyncCtx16 + 12 | 0; //@line 24100
    HEAP32[$113 >> 2] = $6; //@line 24101
    $114 = $ReallocAsyncCtx16 + 16 | 0; //@line 24102
    HEAP32[$114 >> 2] = $108; //@line 24103
    $115 = $ReallocAsyncCtx16 + 20 | 0; //@line 24104
    HEAP32[$115 >> 2] = $105; //@line 24105
    $116 = $ReallocAsyncCtx16 + 24 | 0; //@line 24106
    HEAP32[$116 >> 2] = $107; //@line 24107
    sp = STACKTOP; //@line 24108
    STACKTOP = sp; //@line 24109
    return;
   }
   ___async_unwind = 0; //@line 24111
   HEAP32[$ReallocAsyncCtx16 >> 2] = 376; //@line 24112
   $111 = $ReallocAsyncCtx16 + 4 | 0; //@line 24113
   HEAP32[$111 >> 2] = $2; //@line 24114
   $112 = $ReallocAsyncCtx16 + 8 | 0; //@line 24115
   HEAP32[$112 >> 2] = $4; //@line 24116
   $113 = $ReallocAsyncCtx16 + 12 | 0; //@line 24117
   HEAP32[$113 >> 2] = $6; //@line 24118
   $114 = $ReallocAsyncCtx16 + 16 | 0; //@line 24119
   HEAP32[$114 >> 2] = $108; //@line 24120
   $115 = $ReallocAsyncCtx16 + 20 | 0; //@line 24121
   HEAP32[$115 >> 2] = $105; //@line 24122
   $116 = $ReallocAsyncCtx16 + 24 | 0; //@line 24123
   HEAP32[$116 >> 2] = $107; //@line 24124
   sp = STACKTOP; //@line 24125
   STACKTOP = sp; //@line 24126
   return;
  } else {
   $117 = HEAP32[$109 >> 2] | 0; //@line 24128
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 24129
   FUNCTION_TABLE_vii[$117 & 31]($105, $107); //@line 24130
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 377; //@line 24133
    $118 = $ReallocAsyncCtx2 + 4 | 0; //@line 24134
    HEAP32[$118 >> 2] = $2; //@line 24135
    $119 = $ReallocAsyncCtx2 + 8 | 0; //@line 24136
    HEAP32[$119 >> 2] = $4; //@line 24137
    $120 = $ReallocAsyncCtx2 + 12 | 0; //@line 24138
    HEAP32[$120 >> 2] = $6; //@line 24139
    sp = STACKTOP; //@line 24140
    STACKTOP = sp; //@line 24141
    return;
   }
   ___async_unwind = 0; //@line 24143
   HEAP32[$ReallocAsyncCtx2 >> 2] = 377; //@line 24144
   $118 = $ReallocAsyncCtx2 + 4 | 0; //@line 24145
   HEAP32[$118 >> 2] = $2; //@line 24146
   $119 = $ReallocAsyncCtx2 + 8 | 0; //@line 24147
   HEAP32[$119 >> 2] = $4; //@line 24148
   $120 = $ReallocAsyncCtx2 + 12 | 0; //@line 24149
   HEAP32[$120 >> 2] = $6; //@line 24150
   sp = STACKTOP; //@line 24151
   STACKTOP = sp; //@line 24152
   return;
  }
 }
 if ($100 & 8) {
  HEAP8[$2 >> 0] = $100 & -9; //@line 24159
  $125 = HEAP32[$4 + 1324 >> 2] | 0; //@line 24161
  $126 = $125 + 32 | 0; //@line 24162
  $128 = __ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0; //@line 24164
  $129 = $125 + 44 | 0; //@line 24165
  $130 = HEAP32[$129 >> 2] | 0; //@line 24166
  if (!$130) {
   $ReallocAsyncCtx15 = _emscripten_realloc_async_context(28) | 0; //@line 24169
   _mbed_assert_internal(13874, 13879, 1102); //@line 24170
   if (___async) {
    HEAP32[$ReallocAsyncCtx15 >> 2] = 378; //@line 24173
    $132 = $ReallocAsyncCtx15 + 4 | 0; //@line 24174
    HEAP32[$132 >> 2] = $2; //@line 24175
    $133 = $ReallocAsyncCtx15 + 8 | 0; //@line 24176
    HEAP32[$133 >> 2] = $4; //@line 24177
    $134 = $ReallocAsyncCtx15 + 12 | 0; //@line 24178
    HEAP32[$134 >> 2] = $6; //@line 24179
    $135 = $ReallocAsyncCtx15 + 16 | 0; //@line 24180
    HEAP32[$135 >> 2] = $126; //@line 24181
    $136 = $ReallocAsyncCtx15 + 20 | 0; //@line 24182
    HEAP32[$136 >> 2] = $128; //@line 24183
    $137 = $ReallocAsyncCtx15 + 24 | 0; //@line 24184
    HEAP32[$137 >> 2] = $129; //@line 24185
    sp = STACKTOP; //@line 24186
    STACKTOP = sp; //@line 24187
    return;
   }
   ___async_unwind = 0; //@line 24189
   HEAP32[$ReallocAsyncCtx15 >> 2] = 378; //@line 24190
   $132 = $ReallocAsyncCtx15 + 4 | 0; //@line 24191
   HEAP32[$132 >> 2] = $2; //@line 24192
   $133 = $ReallocAsyncCtx15 + 8 | 0; //@line 24193
   HEAP32[$133 >> 2] = $4; //@line 24194
   $134 = $ReallocAsyncCtx15 + 12 | 0; //@line 24195
   HEAP32[$134 >> 2] = $6; //@line 24196
   $135 = $ReallocAsyncCtx15 + 16 | 0; //@line 24197
   HEAP32[$135 >> 2] = $126; //@line 24198
   $136 = $ReallocAsyncCtx15 + 20 | 0; //@line 24199
   HEAP32[$136 >> 2] = $128; //@line 24200
   $137 = $ReallocAsyncCtx15 + 24 | 0; //@line 24201
   HEAP32[$137 >> 2] = $129; //@line 24202
   sp = STACKTOP; //@line 24203
   STACKTOP = sp; //@line 24204
   return;
  } else {
   $138 = HEAP32[$130 >> 2] | 0; //@line 24206
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 24207
   FUNCTION_TABLE_vii[$138 & 31]($126, $128); //@line 24208
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 379; //@line 24211
    $139 = $ReallocAsyncCtx3 + 4 | 0; //@line 24212
    HEAP32[$139 >> 2] = $2; //@line 24213
    $140 = $ReallocAsyncCtx3 + 8 | 0; //@line 24214
    HEAP32[$140 >> 2] = $4; //@line 24215
    $141 = $ReallocAsyncCtx3 + 12 | 0; //@line 24216
    HEAP32[$141 >> 2] = $6; //@line 24217
    sp = STACKTOP; //@line 24218
    STACKTOP = sp; //@line 24219
    return;
   }
   ___async_unwind = 0; //@line 24221
   HEAP32[$ReallocAsyncCtx3 >> 2] = 379; //@line 24222
   $139 = $ReallocAsyncCtx3 + 4 | 0; //@line 24223
   HEAP32[$139 >> 2] = $2; //@line 24224
   $140 = $ReallocAsyncCtx3 + 8 | 0; //@line 24225
   HEAP32[$140 >> 2] = $4; //@line 24226
   $141 = $ReallocAsyncCtx3 + 12 | 0; //@line 24227
   HEAP32[$141 >> 2] = $6; //@line 24228
   sp = STACKTOP; //@line 24229
   STACKTOP = sp; //@line 24230
   return;
  }
 }
 if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($4 + 4 | 0) | 0) {
  HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0) >> 2] = 4; //@line 24238
  $147 = HEAP8[$2 >> 0] | 16; //@line 24240
  HEAP8[$2 >> 0] = $147; //@line 24241
  $149 = $147; //@line 24242
 } else {
  $149 = HEAP8[$2 >> 0] | 0; //@line 24245
 }
 $148 = $149 & -33; //@line 24247
 HEAP8[$2 >> 0] = $148; //@line 24248
 do {
  if (!($148 & 2)) {
   $187 = $148; //@line 24253
  } else {
   $156 = $148 & -3; //@line 24255
   HEAP8[$2 >> 0] = $156; //@line 24256
   if ((HEAP32[$4 + 360 >> 2] | 0) == 2) {
    $161 = HEAP32[$4 + 1328 >> 2] | 0; //@line 24262
    HEAP32[$6 >> 2] = 273; //@line 24263
    HEAP32[$6 + 4 >> 2] = 0; //@line 24265
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 24266
    HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 24267
    HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 24267
    $162 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($161, $4, $$byval_copy) | 0; //@line 24268
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 381; //@line 24271
     $163 = $ReallocAsyncCtx8 + 4 | 0; //@line 24272
     HEAP32[$163 >> 2] = $2; //@line 24273
     $164 = $ReallocAsyncCtx8 + 8 | 0; //@line 24274
     HEAP32[$164 >> 2] = $4; //@line 24275
     $165 = $ReallocAsyncCtx8 + 12 | 0; //@line 24276
     HEAP32[$165 >> 2] = $6; //@line 24277
     sp = STACKTOP; //@line 24278
     STACKTOP = sp; //@line 24279
     return;
    }
    HEAP32[___async_retval >> 2] = $162; //@line 24282
    ___async_unwind = 0; //@line 24283
    HEAP32[$ReallocAsyncCtx8 >> 2] = 381; //@line 24284
    $163 = $ReallocAsyncCtx8 + 4 | 0; //@line 24285
    HEAP32[$163 >> 2] = $2; //@line 24286
    $164 = $ReallocAsyncCtx8 + 8 | 0; //@line 24287
    HEAP32[$164 >> 2] = $4; //@line 24288
    $165 = $ReallocAsyncCtx8 + 12 | 0; //@line 24289
    HEAP32[$165 >> 2] = $6; //@line 24290
    sp = STACKTOP; //@line 24291
    STACKTOP = sp; //@line 24292
    return;
   }
   if ($156 & 4) {
    $185 = $156 & -5; //@line 24297
    HEAP8[$2 >> 0] = $185; //@line 24298
    $187 = $185; //@line 24299
    break;
   }
   $170 = HEAP32[$4 + 1324 >> 2] | 0; //@line 24303
   $171 = $170 + 16 | 0; //@line 24304
   $173 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 24306
   $174 = $170 + 28 | 0; //@line 24307
   $175 = HEAP32[$174 >> 2] | 0; //@line 24308
   if (!$175) {
    $ReallocAsyncCtx13 = _emscripten_realloc_async_context(24) | 0; //@line 24311
    _mbed_assert_internal(13874, 13879, 1102); //@line 24312
    if (___async) {
     HEAP32[$ReallocAsyncCtx13 >> 2] = 383; //@line 24315
     $177 = $ReallocAsyncCtx13 + 4 | 0; //@line 24316
     HEAP32[$177 >> 2] = $174; //@line 24317
     $178 = $ReallocAsyncCtx13 + 8 | 0; //@line 24318
     HEAP32[$178 >> 2] = $171; //@line 24319
     $179 = $ReallocAsyncCtx13 + 12 | 0; //@line 24320
     HEAP32[$179 >> 2] = $173; //@line 24321
     $180 = $ReallocAsyncCtx13 + 16 | 0; //@line 24322
     HEAP32[$180 >> 2] = $2; //@line 24323
     $181 = $ReallocAsyncCtx13 + 20 | 0; //@line 24324
     HEAP32[$181 >> 2] = $4; //@line 24325
     sp = STACKTOP; //@line 24326
     STACKTOP = sp; //@line 24327
     return;
    }
    ___async_unwind = 0; //@line 24329
    HEAP32[$ReallocAsyncCtx13 >> 2] = 383; //@line 24330
    $177 = $ReallocAsyncCtx13 + 4 | 0; //@line 24331
    HEAP32[$177 >> 2] = $174; //@line 24332
    $178 = $ReallocAsyncCtx13 + 8 | 0; //@line 24333
    HEAP32[$178 >> 2] = $171; //@line 24334
    $179 = $ReallocAsyncCtx13 + 12 | 0; //@line 24335
    HEAP32[$179 >> 2] = $173; //@line 24336
    $180 = $ReallocAsyncCtx13 + 16 | 0; //@line 24337
    HEAP32[$180 >> 2] = $2; //@line 24338
    $181 = $ReallocAsyncCtx13 + 20 | 0; //@line 24339
    HEAP32[$181 >> 2] = $4; //@line 24340
    sp = STACKTOP; //@line 24341
    STACKTOP = sp; //@line 24342
    return;
   } else {
    $182 = HEAP32[$175 >> 2] | 0; //@line 24344
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 24345
    FUNCTION_TABLE_vii[$182 & 31]($171, $173); //@line 24346
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 384; //@line 24349
     $183 = $ReallocAsyncCtx4 + 4 | 0; //@line 24350
     HEAP32[$183 >> 2] = $2; //@line 24351
     $184 = $ReallocAsyncCtx4 + 8 | 0; //@line 24352
     HEAP32[$184 >> 2] = $4; //@line 24353
     sp = STACKTOP; //@line 24354
     STACKTOP = sp; //@line 24355
     return;
    }
    ___async_unwind = 0; //@line 24357
    HEAP32[$ReallocAsyncCtx4 >> 2] = 384; //@line 24358
    $183 = $ReallocAsyncCtx4 + 4 | 0; //@line 24359
    HEAP32[$183 >> 2] = $2; //@line 24360
    $184 = $ReallocAsyncCtx4 + 8 | 0; //@line 24361
    HEAP32[$184 >> 2] = $4; //@line 24362
    sp = STACKTOP; //@line 24363
    STACKTOP = sp; //@line 24364
    return;
   }
  }
 } while (0);
 if (!($187 & 16)) {
  STACKTOP = sp; //@line 24371
  return;
 }
 HEAP8[$2 >> 0] = $187 & -17; //@line 24374
 $191 = HEAP32[$4 + 1324 >> 2] | 0; //@line 24376
 $192 = $191 + 48 | 0; //@line 24377
 $194 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 24379
 $195 = $191 + 60 | 0; //@line 24380
 $196 = HEAP32[$195 >> 2] | 0; //@line 24381
 if (!$196) {
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(16) | 0; //@line 24384
  _mbed_assert_internal(13874, 13879, 1102); //@line 24385
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 385; //@line 24388
   $198 = $ReallocAsyncCtx12 + 4 | 0; //@line 24389
   HEAP32[$198 >> 2] = $195; //@line 24390
   $199 = $ReallocAsyncCtx12 + 8 | 0; //@line 24391
   HEAP32[$199 >> 2] = $192; //@line 24392
   $200 = $ReallocAsyncCtx12 + 12 | 0; //@line 24393
   HEAP32[$200 >> 2] = $194; //@line 24394
   sp = STACKTOP; //@line 24395
   STACKTOP = sp; //@line 24396
   return;
  }
  ___async_unwind = 0; //@line 24398
  HEAP32[$ReallocAsyncCtx12 >> 2] = 385; //@line 24399
  $198 = $ReallocAsyncCtx12 + 4 | 0; //@line 24400
  HEAP32[$198 >> 2] = $195; //@line 24401
  $199 = $ReallocAsyncCtx12 + 8 | 0; //@line 24402
  HEAP32[$199 >> 2] = $192; //@line 24403
  $200 = $ReallocAsyncCtx12 + 12 | 0; //@line 24404
  HEAP32[$200 >> 2] = $194; //@line 24405
  sp = STACKTOP; //@line 24406
  STACKTOP = sp; //@line 24407
  return;
 } else {
  $201 = HEAP32[$196 >> 2] | 0; //@line 24409
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 24410
  FUNCTION_TABLE_vii[$201 & 31]($192, $194); //@line 24411
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 386; //@line 24414
   sp = STACKTOP; //@line 24415
   STACKTOP = sp; //@line 24416
   return;
  }
  ___async_unwind = 0; //@line 24418
  HEAP32[$ReallocAsyncCtx5 >> 2] = 386; //@line 24419
  sp = STACKTOP; //@line 24420
  STACKTOP = sp; //@line 24421
  return;
 }
}
function _equeue_dispatch__async_cb_388($0) {
 $0 = $0 | 0;
 var $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$065 = 0, $$2 = 0, $$expand_i1_val = 0, $$expand_i1_val12 = 0, $$expand_i1_val14 = 0, $$expand_i1_val16 = 0, $$reg2mem$0 = 0, $$sink$in$i$i = 0, $10 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $123 = 0, $124 = 0, $125 = 0, $127 = 0, $128 = 0, $136 = 0, $137 = 0, $139 = 0, $14 = 0, $142 = 0, $144 = 0, $147 = 0, $150 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $161 = 0, $164 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $64 = 0, $66 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $98 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 27559
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27561
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27563
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27565
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27567
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27569
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27571
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 27573
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 27575
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 27577
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 27579
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 27581
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 27583
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 27585
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 27587
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 27589
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 27591
 $34 = HEAP8[$0 + 68 >> 0] & 1; //@line 27594
 $$reg2mem$0 = HEAP32[$0 + 72 >> 2] | 0; //@line 27597
 while (1) {
  if (!$$reg2mem$0) {
   label = 24; //@line 27601
   break;
  }
  $37 = $$reg2mem$0 + 8 | 0; //@line 27604
  $38 = HEAP32[$37 >> 2] | 0; //@line 27605
  $40 = HEAP32[$$reg2mem$0 + 32 >> 2] | 0; //@line 27607
  if ($40 | 0) {
   label = 3; //@line 27610
   break;
  }
  $64 = HEAP32[$$reg2mem$0 + 24 >> 2] | 0; //@line 27614
  if (($64 | 0) > -1) {
   label = 7; //@line 27617
   break;
  }
  $88 = $$reg2mem$0 + 4 | 0; //@line 27621
  $89 = HEAP8[$88 >> 0] | 0; //@line 27622
  HEAP8[$88 >> 0] = (($89 + 1 & 255) << HEAP32[$32 >> 2] | 0) == 0 ? 1 : ($89 & 255) + 1 & 255; //@line 27631
  $98 = HEAP32[$$reg2mem$0 + 28 >> 2] | 0; //@line 27633
  if ($98 | 0) {
   label = 12; //@line 27636
   break;
  }
  _equeue_mutex_lock($28); //@line 27639
  $121 = HEAP32[$30 >> 2] | 0; //@line 27640
  L8 : do {
   if (!$121) {
    $$02329$i$i = $30; //@line 27644
    label = 21; //@line 27645
   } else {
    $123 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 27647
    $$025$i$i = $30; //@line 27648
    $125 = $121; //@line 27648
    while (1) {
     $124 = HEAP32[$125 >> 2] | 0; //@line 27650
     if ($124 >>> 0 >= $123 >>> 0) {
      break;
     }
     $127 = $125 + 8 | 0; //@line 27655
     $128 = HEAP32[$127 >> 2] | 0; //@line 27656
     if (!$128) {
      $$02329$i$i = $127; //@line 27659
      label = 21; //@line 27660
      break L8;
     } else {
      $$025$i$i = $127; //@line 27663
      $125 = $128; //@line 27663
     }
    }
    if (($124 | 0) == ($123 | 0)) {
     HEAP32[$$reg2mem$0 + 12 >> 2] = $125; //@line 27669
     $$02330$i$i = $$025$i$i; //@line 27672
     $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 27672
    } else {
     $$02329$i$i = $$025$i$i; //@line 27674
     label = 21; //@line 27675
    }
   }
  } while (0);
  if ((label | 0) == 21) {
   label = 0; //@line 27680
   HEAP32[$$reg2mem$0 + 12 >> 2] = 0; //@line 27682
   $$02330$i$i = $$02329$i$i; //@line 27683
   $$sink$in$i$i = $$02329$i$i; //@line 27683
  }
  HEAP32[$37 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 27686
  HEAP32[$$02330$i$i >> 2] = $$reg2mem$0; //@line 27687
  _equeue_mutex_unlock($28); //@line 27688
  $$reg2mem$0 = $38; //@line 27689
 }
 if ((label | 0) == 3) {
  $ReallocAsyncCtx = _emscripten_realloc_async_context(84) | 0; //@line 27693
  FUNCTION_TABLE_vi[$40 & 1023]($$reg2mem$0 + 36 | 0); //@line 27694
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 105; //@line 27697
   $43 = $ReallocAsyncCtx + 4 | 0; //@line 27698
   HEAP32[$43 >> 2] = $2; //@line 27699
   $44 = $ReallocAsyncCtx + 8 | 0; //@line 27700
   HEAP32[$44 >> 2] = $4; //@line 27701
   $45 = $ReallocAsyncCtx + 12 | 0; //@line 27702
   HEAP32[$45 >> 2] = $6; //@line 27703
   $46 = $ReallocAsyncCtx + 16 | 0; //@line 27704
   HEAP32[$46 >> 2] = $8; //@line 27705
   $47 = $ReallocAsyncCtx + 20 | 0; //@line 27706
   HEAP32[$47 >> 2] = $10; //@line 27707
   $48 = $ReallocAsyncCtx + 24 | 0; //@line 27708
   HEAP32[$48 >> 2] = $12; //@line 27709
   $49 = $ReallocAsyncCtx + 28 | 0; //@line 27710
   HEAP32[$49 >> 2] = $14; //@line 27711
   $50 = $ReallocAsyncCtx + 32 | 0; //@line 27712
   HEAP32[$50 >> 2] = $16; //@line 27713
   $51 = $ReallocAsyncCtx + 36 | 0; //@line 27714
   HEAP32[$51 >> 2] = $18; //@line 27715
   $52 = $ReallocAsyncCtx + 40 | 0; //@line 27716
   HEAP32[$52 >> 2] = $20; //@line 27717
   $53 = $ReallocAsyncCtx + 44 | 0; //@line 27718
   HEAP32[$53 >> 2] = $22; //@line 27719
   $54 = $ReallocAsyncCtx + 48 | 0; //@line 27720
   HEAP32[$54 >> 2] = $24; //@line 27721
   $55 = $ReallocAsyncCtx + 52 | 0; //@line 27722
   HEAP32[$55 >> 2] = $26; //@line 27723
   $56 = $ReallocAsyncCtx + 56 | 0; //@line 27724
   HEAP32[$56 >> 2] = $$reg2mem$0; //@line 27725
   $57 = $ReallocAsyncCtx + 60 | 0; //@line 27726
   HEAP32[$57 >> 2] = $38; //@line 27727
   $58 = $ReallocAsyncCtx + 64 | 0; //@line 27728
   HEAP32[$58 >> 2] = $28; //@line 27729
   $59 = $ReallocAsyncCtx + 68 | 0; //@line 27730
   HEAP32[$59 >> 2] = $30; //@line 27731
   $60 = $ReallocAsyncCtx + 72 | 0; //@line 27732
   HEAP32[$60 >> 2] = $32; //@line 27733
   $61 = $ReallocAsyncCtx + 76 | 0; //@line 27734
   $$expand_i1_val = $34 & 1; //@line 27735
   HEAP8[$61 >> 0] = $$expand_i1_val; //@line 27736
   $62 = $ReallocAsyncCtx + 80 | 0; //@line 27737
   HEAP32[$62 >> 2] = $37; //@line 27738
   sp = STACKTOP; //@line 27739
   return;
  }
  ___async_unwind = 0; //@line 27742
  HEAP32[$ReallocAsyncCtx >> 2] = 105; //@line 27743
  $43 = $ReallocAsyncCtx + 4 | 0; //@line 27744
  HEAP32[$43 >> 2] = $2; //@line 27745
  $44 = $ReallocAsyncCtx + 8 | 0; //@line 27746
  HEAP32[$44 >> 2] = $4; //@line 27747
  $45 = $ReallocAsyncCtx + 12 | 0; //@line 27748
  HEAP32[$45 >> 2] = $6; //@line 27749
  $46 = $ReallocAsyncCtx + 16 | 0; //@line 27750
  HEAP32[$46 >> 2] = $8; //@line 27751
  $47 = $ReallocAsyncCtx + 20 | 0; //@line 27752
  HEAP32[$47 >> 2] = $10; //@line 27753
  $48 = $ReallocAsyncCtx + 24 | 0; //@line 27754
  HEAP32[$48 >> 2] = $12; //@line 27755
  $49 = $ReallocAsyncCtx + 28 | 0; //@line 27756
  HEAP32[$49 >> 2] = $14; //@line 27757
  $50 = $ReallocAsyncCtx + 32 | 0; //@line 27758
  HEAP32[$50 >> 2] = $16; //@line 27759
  $51 = $ReallocAsyncCtx + 36 | 0; //@line 27760
  HEAP32[$51 >> 2] = $18; //@line 27761
  $52 = $ReallocAsyncCtx + 40 | 0; //@line 27762
  HEAP32[$52 >> 2] = $20; //@line 27763
  $53 = $ReallocAsyncCtx + 44 | 0; //@line 27764
  HEAP32[$53 >> 2] = $22; //@line 27765
  $54 = $ReallocAsyncCtx + 48 | 0; //@line 27766
  HEAP32[$54 >> 2] = $24; //@line 27767
  $55 = $ReallocAsyncCtx + 52 | 0; //@line 27768
  HEAP32[$55 >> 2] = $26; //@line 27769
  $56 = $ReallocAsyncCtx + 56 | 0; //@line 27770
  HEAP32[$56 >> 2] = $$reg2mem$0; //@line 27771
  $57 = $ReallocAsyncCtx + 60 | 0; //@line 27772
  HEAP32[$57 >> 2] = $38; //@line 27773
  $58 = $ReallocAsyncCtx + 64 | 0; //@line 27774
  HEAP32[$58 >> 2] = $28; //@line 27775
  $59 = $ReallocAsyncCtx + 68 | 0; //@line 27776
  HEAP32[$59 >> 2] = $30; //@line 27777
  $60 = $ReallocAsyncCtx + 72 | 0; //@line 27778
  HEAP32[$60 >> 2] = $32; //@line 27779
  $61 = $ReallocAsyncCtx + 76 | 0; //@line 27780
  $$expand_i1_val = $34 & 1; //@line 27781
  HEAP8[$61 >> 0] = $$expand_i1_val; //@line 27782
  $62 = $ReallocAsyncCtx + 80 | 0; //@line 27783
  HEAP32[$62 >> 2] = $37; //@line 27784
  sp = STACKTOP; //@line 27785
  return;
 } else if ((label | 0) == 7) {
  $66 = $$reg2mem$0 + 20 | 0; //@line 27789
  HEAP32[$66 >> 2] = (HEAP32[$66 >> 2] | 0) + $64; //@line 27792
  $69 = _equeue_tick() | 0; //@line 27793
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(76) | 0; //@line 27794
  _equeue_enqueue($4, $$reg2mem$0, $69) | 0; //@line 27795
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 106; //@line 27798
   $70 = $ReallocAsyncCtx4 + 4 | 0; //@line 27799
   HEAP32[$70 >> 2] = $2; //@line 27800
   $71 = $ReallocAsyncCtx4 + 8 | 0; //@line 27801
   HEAP32[$71 >> 2] = $4; //@line 27802
   $72 = $ReallocAsyncCtx4 + 12 | 0; //@line 27803
   HEAP32[$72 >> 2] = $6; //@line 27804
   $73 = $ReallocAsyncCtx4 + 16 | 0; //@line 27805
   HEAP32[$73 >> 2] = $8; //@line 27806
   $74 = $ReallocAsyncCtx4 + 20 | 0; //@line 27807
   HEAP32[$74 >> 2] = $10; //@line 27808
   $75 = $ReallocAsyncCtx4 + 24 | 0; //@line 27809
   HEAP32[$75 >> 2] = $12; //@line 27810
   $76 = $ReallocAsyncCtx4 + 28 | 0; //@line 27811
   HEAP32[$76 >> 2] = $14; //@line 27812
   $77 = $ReallocAsyncCtx4 + 32 | 0; //@line 27813
   HEAP32[$77 >> 2] = $16; //@line 27814
   $78 = $ReallocAsyncCtx4 + 36 | 0; //@line 27815
   HEAP32[$78 >> 2] = $18; //@line 27816
   $79 = $ReallocAsyncCtx4 + 40 | 0; //@line 27817
   HEAP32[$79 >> 2] = $20; //@line 27818
   $80 = $ReallocAsyncCtx4 + 44 | 0; //@line 27819
   HEAP32[$80 >> 2] = $22; //@line 27820
   $81 = $ReallocAsyncCtx4 + 48 | 0; //@line 27821
   HEAP32[$81 >> 2] = $24; //@line 27822
   $82 = $ReallocAsyncCtx4 + 52 | 0; //@line 27823
   HEAP32[$82 >> 2] = $26; //@line 27824
   $83 = $ReallocAsyncCtx4 + 56 | 0; //@line 27825
   HEAP32[$83 >> 2] = $28; //@line 27826
   $84 = $ReallocAsyncCtx4 + 60 | 0; //@line 27827
   HEAP32[$84 >> 2] = $30; //@line 27828
   $85 = $ReallocAsyncCtx4 + 64 | 0; //@line 27829
   HEAP32[$85 >> 2] = $32; //@line 27830
   $86 = $ReallocAsyncCtx4 + 68 | 0; //@line 27831
   $$expand_i1_val12 = $34 & 1; //@line 27832
   HEAP8[$86 >> 0] = $$expand_i1_val12; //@line 27833
   $87 = $ReallocAsyncCtx4 + 72 | 0; //@line 27834
   HEAP32[$87 >> 2] = $38; //@line 27835
   sp = STACKTOP; //@line 27836
   return;
  }
  ___async_unwind = 0; //@line 27839
  HEAP32[$ReallocAsyncCtx4 >> 2] = 106; //@line 27840
  $70 = $ReallocAsyncCtx4 + 4 | 0; //@line 27841
  HEAP32[$70 >> 2] = $2; //@line 27842
  $71 = $ReallocAsyncCtx4 + 8 | 0; //@line 27843
  HEAP32[$71 >> 2] = $4; //@line 27844
  $72 = $ReallocAsyncCtx4 + 12 | 0; //@line 27845
  HEAP32[$72 >> 2] = $6; //@line 27846
  $73 = $ReallocAsyncCtx4 + 16 | 0; //@line 27847
  HEAP32[$73 >> 2] = $8; //@line 27848
  $74 = $ReallocAsyncCtx4 + 20 | 0; //@line 27849
  HEAP32[$74 >> 2] = $10; //@line 27850
  $75 = $ReallocAsyncCtx4 + 24 | 0; //@line 27851
  HEAP32[$75 >> 2] = $12; //@line 27852
  $76 = $ReallocAsyncCtx4 + 28 | 0; //@line 27853
  HEAP32[$76 >> 2] = $14; //@line 27854
  $77 = $ReallocAsyncCtx4 + 32 | 0; //@line 27855
  HEAP32[$77 >> 2] = $16; //@line 27856
  $78 = $ReallocAsyncCtx4 + 36 | 0; //@line 27857
  HEAP32[$78 >> 2] = $18; //@line 27858
  $79 = $ReallocAsyncCtx4 + 40 | 0; //@line 27859
  HEAP32[$79 >> 2] = $20; //@line 27860
  $80 = $ReallocAsyncCtx4 + 44 | 0; //@line 27861
  HEAP32[$80 >> 2] = $22; //@line 27862
  $81 = $ReallocAsyncCtx4 + 48 | 0; //@line 27863
  HEAP32[$81 >> 2] = $24; //@line 27864
  $82 = $ReallocAsyncCtx4 + 52 | 0; //@line 27865
  HEAP32[$82 >> 2] = $26; //@line 27866
  $83 = $ReallocAsyncCtx4 + 56 | 0; //@line 27867
  HEAP32[$83 >> 2] = $28; //@line 27868
  $84 = $ReallocAsyncCtx4 + 60 | 0; //@line 27869
  HEAP32[$84 >> 2] = $30; //@line 27870
  $85 = $ReallocAsyncCtx4 + 64 | 0; //@line 27871
  HEAP32[$85 >> 2] = $32; //@line 27872
  $86 = $ReallocAsyncCtx4 + 68 | 0; //@line 27873
  $$expand_i1_val12 = $34 & 1; //@line 27874
  HEAP8[$86 >> 0] = $$expand_i1_val12; //@line 27875
  $87 = $ReallocAsyncCtx4 + 72 | 0; //@line 27876
  HEAP32[$87 >> 2] = $38; //@line 27877
  sp = STACKTOP; //@line 27878
  return;
 } else if ((label | 0) == 12) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(84) | 0; //@line 27883
  FUNCTION_TABLE_vi[$98 & 1023]($$reg2mem$0 + 36 | 0); //@line 27884
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 107; //@line 27887
   $101 = $ReallocAsyncCtx2 + 4 | 0; //@line 27888
   HEAP32[$101 >> 2] = $2; //@line 27889
   $102 = $ReallocAsyncCtx2 + 8 | 0; //@line 27890
   HEAP32[$102 >> 2] = $4; //@line 27891
   $103 = $ReallocAsyncCtx2 + 12 | 0; //@line 27892
   HEAP32[$103 >> 2] = $6; //@line 27893
   $104 = $ReallocAsyncCtx2 + 16 | 0; //@line 27894
   HEAP32[$104 >> 2] = $8; //@line 27895
   $105 = $ReallocAsyncCtx2 + 20 | 0; //@line 27896
   HEAP32[$105 >> 2] = $10; //@line 27897
   $106 = $ReallocAsyncCtx2 + 24 | 0; //@line 27898
   HEAP32[$106 >> 2] = $12; //@line 27899
   $107 = $ReallocAsyncCtx2 + 28 | 0; //@line 27900
   HEAP32[$107 >> 2] = $14; //@line 27901
   $108 = $ReallocAsyncCtx2 + 32 | 0; //@line 27902
   HEAP32[$108 >> 2] = $16; //@line 27903
   $109 = $ReallocAsyncCtx2 + 36 | 0; //@line 27904
   HEAP32[$109 >> 2] = $18; //@line 27905
   $110 = $ReallocAsyncCtx2 + 40 | 0; //@line 27906
   HEAP32[$110 >> 2] = $20; //@line 27907
   $111 = $ReallocAsyncCtx2 + 44 | 0; //@line 27908
   HEAP32[$111 >> 2] = $22; //@line 27909
   $112 = $ReallocAsyncCtx2 + 48 | 0; //@line 27910
   HEAP32[$112 >> 2] = $24; //@line 27911
   $113 = $ReallocAsyncCtx2 + 52 | 0; //@line 27912
   HEAP32[$113 >> 2] = $26; //@line 27913
   $114 = $ReallocAsyncCtx2 + 56 | 0; //@line 27914
   HEAP32[$114 >> 2] = $28; //@line 27915
   $115 = $ReallocAsyncCtx2 + 60 | 0; //@line 27916
   HEAP32[$115 >> 2] = $30; //@line 27917
   $116 = $ReallocAsyncCtx2 + 64 | 0; //@line 27918
   HEAP32[$116 >> 2] = $32; //@line 27919
   $117 = $ReallocAsyncCtx2 + 68 | 0; //@line 27920
   $$expand_i1_val14 = $34 & 1; //@line 27921
   HEAP8[$117 >> 0] = $$expand_i1_val14; //@line 27922
   $118 = $ReallocAsyncCtx2 + 72 | 0; //@line 27923
   HEAP32[$118 >> 2] = $38; //@line 27924
   $119 = $ReallocAsyncCtx2 + 76 | 0; //@line 27925
   HEAP32[$119 >> 2] = $$reg2mem$0; //@line 27926
   $120 = $ReallocAsyncCtx2 + 80 | 0; //@line 27927
   HEAP32[$120 >> 2] = $37; //@line 27928
   sp = STACKTOP; //@line 27929
   return;
  }
  ___async_unwind = 0; //@line 27932
  HEAP32[$ReallocAsyncCtx2 >> 2] = 107; //@line 27933
  $101 = $ReallocAsyncCtx2 + 4 | 0; //@line 27934
  HEAP32[$101 >> 2] = $2; //@line 27935
  $102 = $ReallocAsyncCtx2 + 8 | 0; //@line 27936
  HEAP32[$102 >> 2] = $4; //@line 27937
  $103 = $ReallocAsyncCtx2 + 12 | 0; //@line 27938
  HEAP32[$103 >> 2] = $6; //@line 27939
  $104 = $ReallocAsyncCtx2 + 16 | 0; //@line 27940
  HEAP32[$104 >> 2] = $8; //@line 27941
  $105 = $ReallocAsyncCtx2 + 20 | 0; //@line 27942
  HEAP32[$105 >> 2] = $10; //@line 27943
  $106 = $ReallocAsyncCtx2 + 24 | 0; //@line 27944
  HEAP32[$106 >> 2] = $12; //@line 27945
  $107 = $ReallocAsyncCtx2 + 28 | 0; //@line 27946
  HEAP32[$107 >> 2] = $14; //@line 27947
  $108 = $ReallocAsyncCtx2 + 32 | 0; //@line 27948
  HEAP32[$108 >> 2] = $16; //@line 27949
  $109 = $ReallocAsyncCtx2 + 36 | 0; //@line 27950
  HEAP32[$109 >> 2] = $18; //@line 27951
  $110 = $ReallocAsyncCtx2 + 40 | 0; //@line 27952
  HEAP32[$110 >> 2] = $20; //@line 27953
  $111 = $ReallocAsyncCtx2 + 44 | 0; //@line 27954
  HEAP32[$111 >> 2] = $22; //@line 27955
  $112 = $ReallocAsyncCtx2 + 48 | 0; //@line 27956
  HEAP32[$112 >> 2] = $24; //@line 27957
  $113 = $ReallocAsyncCtx2 + 52 | 0; //@line 27958
  HEAP32[$113 >> 2] = $26; //@line 27959
  $114 = $ReallocAsyncCtx2 + 56 | 0; //@line 27960
  HEAP32[$114 >> 2] = $28; //@line 27961
  $115 = $ReallocAsyncCtx2 + 60 | 0; //@line 27962
  HEAP32[$115 >> 2] = $30; //@line 27963
  $116 = $ReallocAsyncCtx2 + 64 | 0; //@line 27964
  HEAP32[$116 >> 2] = $32; //@line 27965
  $117 = $ReallocAsyncCtx2 + 68 | 0; //@line 27966
  $$expand_i1_val14 = $34 & 1; //@line 27967
  HEAP8[$117 >> 0] = $$expand_i1_val14; //@line 27968
  $118 = $ReallocAsyncCtx2 + 72 | 0; //@line 27969
  HEAP32[$118 >> 2] = $38; //@line 27970
  $119 = $ReallocAsyncCtx2 + 76 | 0; //@line 27971
  HEAP32[$119 >> 2] = $$reg2mem$0; //@line 27972
  $120 = $ReallocAsyncCtx2 + 80 | 0; //@line 27973
  HEAP32[$120 >> 2] = $37; //@line 27974
  sp = STACKTOP; //@line 27975
  return;
 } else if ((label | 0) == 24) {
  $136 = _equeue_tick() | 0; //@line 27979
  if ($34) {
   $137 = $16 - $136 | 0; //@line 27981
   if (($137 | 0) < 1) {
    $139 = $4 + 40 | 0; //@line 27984
    if (HEAP32[$139 >> 2] | 0) {
     _equeue_mutex_lock($6); //@line 27988
     $142 = HEAP32[$139 >> 2] | 0; //@line 27989
     if ($142 | 0) {
      $144 = HEAP32[$14 >> 2] | 0; //@line 27992
      if ($144 | 0) {
       $147 = HEAP32[$4 + 44 >> 2] | 0; //@line 27996
       $150 = (HEAP32[$144 + 20 >> 2] | 0) - $136 | 0; //@line 27999
       $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 28003
       FUNCTION_TABLE_vii[$142 & 31]($147, $150 & ~($150 >> 31)); //@line 28004
       if (___async) {
        HEAP32[$ReallocAsyncCtx3 >> 2] = 108; //@line 28007
        $154 = $ReallocAsyncCtx3 + 4 | 0; //@line 28008
        HEAP32[$154 >> 2] = $10; //@line 28009
        $155 = $ReallocAsyncCtx3 + 8 | 0; //@line 28010
        HEAP32[$155 >> 2] = $6; //@line 28011
        $156 = $ReallocAsyncCtx3 + 12 | 0; //@line 28012
        HEAP32[$156 >> 2] = $12; //@line 28013
        sp = STACKTOP; //@line 28014
        return;
       }
       ___async_unwind = 0; //@line 28017
       HEAP32[$ReallocAsyncCtx3 >> 2] = 108; //@line 28018
       $154 = $ReallocAsyncCtx3 + 4 | 0; //@line 28019
       HEAP32[$154 >> 2] = $10; //@line 28020
       $155 = $ReallocAsyncCtx3 + 8 | 0; //@line 28021
       HEAP32[$155 >> 2] = $6; //@line 28022
       $156 = $ReallocAsyncCtx3 + 12 | 0; //@line 28023
       HEAP32[$156 >> 2] = $12; //@line 28024
       sp = STACKTOP; //@line 28025
       return;
      }
     }
     HEAP8[$10 >> 0] = 1; //@line 28029
     _equeue_mutex_unlock($6); //@line 28030
    }
    HEAP8[$12 >> 0] = 0; //@line 28032
    return;
   } else {
    $$065 = $137; //@line 28035
   }
  } else {
   $$065 = -1; //@line 28038
  }
  _equeue_mutex_lock($6); //@line 28040
  $157 = HEAP32[$14 >> 2] | 0; //@line 28041
  if (!$157) {
   $$2 = $$065; //@line 28044
  } else {
   $161 = (HEAP32[$157 + 20 >> 2] | 0) - $136 | 0; //@line 28048
   $164 = $161 & ~($161 >> 31); //@line 28051
   $$2 = $164 >>> 0 < $$065 >>> 0 ? $164 : $$065; //@line 28054
  }
  _equeue_mutex_unlock($6); //@line 28056
  _equeue_sema_wait($26, $$2) | 0; //@line 28057
  do {
   if (HEAP8[$12 >> 0] | 0) {
    _equeue_mutex_lock($6); //@line 28062
    if (!(HEAP8[$12 >> 0] | 0)) {
     _equeue_mutex_unlock($6); //@line 28066
     break;
    }
    HEAP8[$12 >> 0] = 0; //@line 28069
    _equeue_mutex_unlock($6); //@line 28070
    return;
   }
  } while (0);
  $170 = _equeue_tick() | 0; //@line 28074
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(76) | 0; //@line 28075
  _wait_ms(20); //@line 28076
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 109; //@line 28079
   $171 = $ReallocAsyncCtx5 + 4 | 0; //@line 28080
   HEAP32[$171 >> 2] = $2; //@line 28081
   $172 = $ReallocAsyncCtx5 + 8 | 0; //@line 28082
   HEAP32[$172 >> 2] = $4; //@line 28083
   $173 = $ReallocAsyncCtx5 + 12 | 0; //@line 28084
   HEAP32[$173 >> 2] = $170; //@line 28085
   $174 = $ReallocAsyncCtx5 + 16 | 0; //@line 28086
   HEAP32[$174 >> 2] = $6; //@line 28087
   $175 = $ReallocAsyncCtx5 + 20 | 0; //@line 28088
   HEAP32[$175 >> 2] = $8; //@line 28089
   $176 = $ReallocAsyncCtx5 + 24 | 0; //@line 28090
   HEAP32[$176 >> 2] = $10; //@line 28091
   $177 = $ReallocAsyncCtx5 + 28 | 0; //@line 28092
   HEAP32[$177 >> 2] = $12; //@line 28093
   $178 = $ReallocAsyncCtx5 + 32 | 0; //@line 28094
   HEAP32[$178 >> 2] = $14; //@line 28095
   $179 = $ReallocAsyncCtx5 + 36 | 0; //@line 28096
   HEAP32[$179 >> 2] = $16; //@line 28097
   $180 = $ReallocAsyncCtx5 + 40 | 0; //@line 28098
   HEAP32[$180 >> 2] = $18; //@line 28099
   $181 = $ReallocAsyncCtx5 + 44 | 0; //@line 28100
   HEAP32[$181 >> 2] = $20; //@line 28101
   $182 = $ReallocAsyncCtx5 + 48 | 0; //@line 28102
   HEAP32[$182 >> 2] = $22; //@line 28103
   $183 = $ReallocAsyncCtx5 + 52 | 0; //@line 28104
   HEAP32[$183 >> 2] = $24; //@line 28105
   $184 = $ReallocAsyncCtx5 + 56 | 0; //@line 28106
   HEAP32[$184 >> 2] = $26; //@line 28107
   $185 = $ReallocAsyncCtx5 + 60 | 0; //@line 28108
   HEAP32[$185 >> 2] = $28; //@line 28109
   $186 = $ReallocAsyncCtx5 + 64 | 0; //@line 28110
   HEAP32[$186 >> 2] = $30; //@line 28111
   $187 = $ReallocAsyncCtx5 + 68 | 0; //@line 28112
   HEAP32[$187 >> 2] = $32; //@line 28113
   $188 = $ReallocAsyncCtx5 + 72 | 0; //@line 28114
   $$expand_i1_val16 = $34 & 1; //@line 28115
   HEAP8[$188 >> 0] = $$expand_i1_val16; //@line 28116
   sp = STACKTOP; //@line 28117
   return;
  }
  ___async_unwind = 0; //@line 28120
  HEAP32[$ReallocAsyncCtx5 >> 2] = 109; //@line 28121
  $171 = $ReallocAsyncCtx5 + 4 | 0; //@line 28122
  HEAP32[$171 >> 2] = $2; //@line 28123
  $172 = $ReallocAsyncCtx5 + 8 | 0; //@line 28124
  HEAP32[$172 >> 2] = $4; //@line 28125
  $173 = $ReallocAsyncCtx5 + 12 | 0; //@line 28126
  HEAP32[$173 >> 2] = $170; //@line 28127
  $174 = $ReallocAsyncCtx5 + 16 | 0; //@line 28128
  HEAP32[$174 >> 2] = $6; //@line 28129
  $175 = $ReallocAsyncCtx5 + 20 | 0; //@line 28130
  HEAP32[$175 >> 2] = $8; //@line 28131
  $176 = $ReallocAsyncCtx5 + 24 | 0; //@line 28132
  HEAP32[$176 >> 2] = $10; //@line 28133
  $177 = $ReallocAsyncCtx5 + 28 | 0; //@line 28134
  HEAP32[$177 >> 2] = $12; //@line 28135
  $178 = $ReallocAsyncCtx5 + 32 | 0; //@line 28136
  HEAP32[$178 >> 2] = $14; //@line 28137
  $179 = $ReallocAsyncCtx5 + 36 | 0; //@line 28138
  HEAP32[$179 >> 2] = $16; //@line 28139
  $180 = $ReallocAsyncCtx5 + 40 | 0; //@line 28140
  HEAP32[$180 >> 2] = $18; //@line 28141
  $181 = $ReallocAsyncCtx5 + 44 | 0; //@line 28142
  HEAP32[$181 >> 2] = $20; //@line 28143
  $182 = $ReallocAsyncCtx5 + 48 | 0; //@line 28144
  HEAP32[$182 >> 2] = $22; //@line 28145
  $183 = $ReallocAsyncCtx5 + 52 | 0; //@line 28146
  HEAP32[$183 >> 2] = $24; //@line 28147
  $184 = $ReallocAsyncCtx5 + 56 | 0; //@line 28148
  HEAP32[$184 >> 2] = $26; //@line 28149
  $185 = $ReallocAsyncCtx5 + 60 | 0; //@line 28150
  HEAP32[$185 >> 2] = $28; //@line 28151
  $186 = $ReallocAsyncCtx5 + 64 | 0; //@line 28152
  HEAP32[$186 >> 2] = $30; //@line 28153
  $187 = $ReallocAsyncCtx5 + 68 | 0; //@line 28154
  HEAP32[$187 >> 2] = $32; //@line 28155
  $188 = $ReallocAsyncCtx5 + 72 | 0; //@line 28156
  $$expand_i1_val16 = $34 & 1; //@line 28157
  HEAP8[$188 >> 0] = $$expand_i1_val16; //@line 28158
  sp = STACKTOP; //@line 28159
  return;
 }
}
function _printf_core($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$$5 = 0, $$0 = 0, $$0228 = 0, $$0229316 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240$lcssa = 0, $$0240$lcssa356 = 0, $$0240315 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0, $$0249303 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0259 = 0, $$0262$lcssa = 0, $$0262309 = 0, $$0269 = 0, $$1 = 0, $$1230327 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241326 = 0, $$1244314 = 0, $$1248 = 0, $$1255 = 0, $$1260 = 0, $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242$lcssa = 0, $$2242302 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2261 = 0, $$2271 = 0, $$3265 = 0, $$3272 = 0, $$3300 = 0, $$4258354 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa291 = 0, $$lcssa292 = 0, $$pre342 = 0, $$pre345 = 0, $$pre348 = 0, $$sink = 0, $10 = 0, $105 = 0, $106 = 0, $109 = 0, $11 = 0, $112 = 0, $115 = 0, $12 = 0, $125 = 0, $129 = 0, $13 = 0, $14 = 0, $140 = 0, $144 = 0, $151 = 0, $152 = 0, $154 = 0, $156 = 0, $158 = 0, $167 = 0, $168 = 0, $173 = 0, $176 = 0, $181 = 0, $182 = 0, $187 = 0, $189 = 0, $196 = 0, $197 = 0, $20 = 0, $208 = 0, $21 = 0, $220 = 0, $227 = 0, $229 = 0, $23 = 0, $232 = 0, $234 = 0, $24 = 0, $242 = 0, $244 = 0, $247 = 0, $248 = 0, $25 = 0, $252 = 0, $256 = 0, $258 = 0, $261 = 0, $263 = 0, $264 = 0, $265 = 0, $27 = 0, $275 = 0, $276 = 0, $281 = 0, $283 = 0, $284 = 0, $290 = 0, $30 = 0, $302 = 0, $305 = 0, $306 = 0, $318 = 0, $320 = 0, $325 = 0, $329 = 0, $331 = 0, $343 = 0, $345 = 0, $352 = 0, $356 = 0, $36 = 0, $363 = 0, $364 = 0, $365 = 0, $43 = 0, $5 = 0, $51 = 0, $52 = 0, $54 = 0, $6 = 0, $60 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $7 = 0, $79 = 0, $8 = 0, $83 = 0, $9 = 0, $or$cond = 0, $or$cond278 = 0, $storemerge274 = 0, label = 0, sp = 0, $158$looptemp = 0;
 sp = STACKTOP; //@line 11748
 STACKTOP = STACKTOP + 64 | 0; //@line 11749
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 11749
 $5 = sp + 16 | 0; //@line 11750
 $6 = sp; //@line 11751
 $7 = sp + 24 | 0; //@line 11752
 $8 = sp + 8 | 0; //@line 11753
 $9 = sp + 20 | 0; //@line 11754
 HEAP32[$5 >> 2] = $1; //@line 11755
 $10 = ($0 | 0) != 0; //@line 11756
 $11 = $7 + 40 | 0; //@line 11757
 $12 = $11; //@line 11758
 $13 = $7 + 39 | 0; //@line 11759
 $14 = $8 + 4 | 0; //@line 11760
 $$0243 = 0; //@line 11761
 $$0247 = 0; //@line 11761
 $$0269 = 0; //@line 11761
 L1 : while (1) {
  do {
   if (($$0247 | 0) > -1) {
    if (($$0243 | 0) > (2147483647 - $$0247 | 0)) {
     HEAP32[(___errno_location() | 0) >> 2] = 75; //@line 11770
     $$1248 = -1; //@line 11771
     break;
    } else {
     $$1248 = $$0243 + $$0247 | 0; //@line 11775
     break;
    }
   } else {
    $$1248 = $$0247; //@line 11779
   }
  } while (0);
  $20 = HEAP32[$5 >> 2] | 0; //@line 11782
  $21 = HEAP8[$20 >> 0] | 0; //@line 11783
  if (!($21 << 24 >> 24)) {
   label = 88; //@line 11786
   break;
  } else {
   $23 = $21; //@line 11789
   $25 = $20; //@line 11789
  }
  L9 : while (1) {
   switch ($23 << 24 >> 24) {
   case 37:
    {
     $$0249303 = $25; //@line 11794
     $27 = $25; //@line 11794
     label = 9; //@line 11795
     break L9;
     break;
    }
   case 0:
    {
     $$0249$lcssa = $25; //@line 11800
     break L9;
     break;
    }
   default:
    {}
   }
   $24 = $25 + 1 | 0; //@line 11807
   HEAP32[$5 >> 2] = $24; //@line 11808
   $23 = HEAP8[$24 >> 0] | 0; //@line 11810
   $25 = $24; //@line 11810
  }
  L12 : do {
   if ((label | 0) == 9) {
    while (1) {
     label = 0; //@line 11815
     if ((HEAP8[$27 + 1 >> 0] | 0) != 37) {
      $$0249$lcssa = $$0249303; //@line 11820
      break L12;
     }
     $30 = $$0249303 + 1 | 0; //@line 11823
     $27 = $27 + 2 | 0; //@line 11824
     HEAP32[$5 >> 2] = $27; //@line 11825
     if ((HEAP8[$27 >> 0] | 0) != 37) {
      $$0249$lcssa = $30; //@line 11832
      break;
     } else {
      $$0249303 = $30; //@line 11829
      label = 9; //@line 11830
     }
    }
   }
  } while (0);
  $36 = $$0249$lcssa - $20 | 0; //@line 11840
  if ($10) {
   _out_670($0, $20, $36); //@line 11842
  }
  if ($36 | 0) {
   $$0243 = $36; //@line 11846
   $$0247 = $$1248; //@line 11846
   continue;
  }
  $43 = (_isdigit(HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] | 0) | 0) == 0; //@line 11854
  $$pre342 = HEAP32[$5 >> 2] | 0; //@line 11855
  if ($43) {
   $$0253 = -1; //@line 11857
   $$1270 = $$0269; //@line 11857
   $$sink = 1; //@line 11857
  } else {
   if ((HEAP8[$$pre342 + 2 >> 0] | 0) == 36) {
    $$0253 = (HEAP8[$$pre342 + 1 >> 0] | 0) + -48 | 0; //@line 11867
    $$1270 = 1; //@line 11867
    $$sink = 3; //@line 11867
   } else {
    $$0253 = -1; //@line 11869
    $$1270 = $$0269; //@line 11869
    $$sink = 1; //@line 11869
   }
  }
  $51 = $$pre342 + $$sink | 0; //@line 11872
  HEAP32[$5 >> 2] = $51; //@line 11873
  $52 = HEAP8[$51 >> 0] | 0; //@line 11874
  $54 = ($52 << 24 >> 24) + -32 | 0; //@line 11876
  if ($54 >>> 0 > 31 | (1 << $54 & 75913 | 0) == 0) {
   $$0262$lcssa = 0; //@line 11883
   $$lcssa291 = $52; //@line 11883
   $$lcssa292 = $51; //@line 11883
  } else {
   $$0262309 = 0; //@line 11885
   $60 = $52; //@line 11885
   $65 = $51; //@line 11885
   while (1) {
    $63 = 1 << ($60 << 24 >> 24) + -32 | $$0262309; //@line 11890
    $64 = $65 + 1 | 0; //@line 11891
    HEAP32[$5 >> 2] = $64; //@line 11892
    $66 = HEAP8[$64 >> 0] | 0; //@line 11893
    $68 = ($66 << 24 >> 24) + -32 | 0; //@line 11895
    if ($68 >>> 0 > 31 | (1 << $68 & 75913 | 0) == 0) {
     $$0262$lcssa = $63; //@line 11902
     $$lcssa291 = $66; //@line 11902
     $$lcssa292 = $64; //@line 11902
     break;
    } else {
     $$0262309 = $63; //@line 11905
     $60 = $66; //@line 11905
     $65 = $64; //@line 11905
    }
   }
  }
  if ($$lcssa291 << 24 >> 24 == 42) {
   if (!(_isdigit(HEAP8[$$lcssa292 + 1 >> 0] | 0) | 0)) {
    label = 23; //@line 11917
   } else {
    $79 = HEAP32[$5 >> 2] | 0; //@line 11919
    if ((HEAP8[$79 + 2 >> 0] | 0) == 36) {
     $83 = $79 + 1 | 0; //@line 11924
     HEAP32[$4 + ((HEAP8[$83 >> 0] | 0) + -48 << 2) >> 2] = 10; //@line 11929
     $$0259 = HEAP32[$3 + ((HEAP8[$83 >> 0] | 0) + -48 << 3) >> 2] | 0; //@line 11941
     $$2271 = 1; //@line 11941
     $storemerge274 = $79 + 3 | 0; //@line 11941
    } else {
     label = 23; //@line 11943
    }
   }
   if ((label | 0) == 23) {
    label = 0; //@line 11947
    if ($$1270 | 0) {
     $$0 = -1; //@line 11950
     break;
    }
    if ($10) {
     $105 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 11965
     $106 = HEAP32[$105 >> 2] | 0; //@line 11966
     HEAP32[$2 >> 2] = $105 + 4; //@line 11968
     $363 = $106; //@line 11969
    } else {
     $363 = 0; //@line 11971
    }
    $$0259 = $363; //@line 11975
    $$2271 = 0; //@line 11975
    $storemerge274 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 11975
   }
   HEAP32[$5 >> 2] = $storemerge274; //@line 11977
   $109 = ($$0259 | 0) < 0; //@line 11978
   $$1260 = $109 ? 0 - $$0259 | 0 : $$0259; //@line 11983
   $$1263 = $109 ? $$0262$lcssa | 8192 : $$0262$lcssa; //@line 11983
   $$3272 = $$2271; //@line 11983
   $115 = $storemerge274; //@line 11983
  } else {
   $112 = _getint_671($5) | 0; //@line 11985
   if (($112 | 0) < 0) {
    $$0 = -1; //@line 11988
    break;
   }
   $$1260 = $112; //@line 11992
   $$1263 = $$0262$lcssa; //@line 11992
   $$3272 = $$1270; //@line 11992
   $115 = HEAP32[$5 >> 2] | 0; //@line 11992
  }
  do {
   if ((HEAP8[$115 >> 0] | 0) == 46) {
    if ((HEAP8[$115 + 1 >> 0] | 0) != 42) {
     HEAP32[$5 >> 2] = $115 + 1; //@line 12003
     $156 = _getint_671($5) | 0; //@line 12004
     $$0254 = $156; //@line 12006
     $$pre345 = HEAP32[$5 >> 2] | 0; //@line 12006
     break;
    }
    if (_isdigit(HEAP8[$115 + 2 >> 0] | 0) | 0) {
     $125 = HEAP32[$5 >> 2] | 0; //@line 12015
     if ((HEAP8[$125 + 3 >> 0] | 0) == 36) {
      $129 = $125 + 2 | 0; //@line 12020
      HEAP32[$4 + ((HEAP8[$129 >> 0] | 0) + -48 << 2) >> 2] = 10; //@line 12025
      $140 = HEAP32[$3 + ((HEAP8[$129 >> 0] | 0) + -48 << 3) >> 2] | 0; //@line 12032
      $144 = $125 + 4 | 0; //@line 12036
      HEAP32[$5 >> 2] = $144; //@line 12037
      $$0254 = $140; //@line 12038
      $$pre345 = $144; //@line 12038
      break;
     }
    }
    if ($$3272 | 0) {
     $$0 = -1; //@line 12044
     break L1;
    }
    if ($10) {
     $151 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 12059
     $152 = HEAP32[$151 >> 2] | 0; //@line 12060
     HEAP32[$2 >> 2] = $151 + 4; //@line 12062
     $364 = $152; //@line 12063
    } else {
     $364 = 0; //@line 12065
    }
    $154 = (HEAP32[$5 >> 2] | 0) + 2 | 0; //@line 12068
    HEAP32[$5 >> 2] = $154; //@line 12069
    $$0254 = $364; //@line 12070
    $$pre345 = $154; //@line 12070
   } else {
    $$0254 = -1; //@line 12072
    $$pre345 = $115; //@line 12072
   }
  } while (0);
  $$0252 = 0; //@line 12075
  $158 = $$pre345; //@line 12075
  while (1) {
   if (((HEAP8[$158 >> 0] | 0) + -65 | 0) >>> 0 > 57) {
    $$0 = -1; //@line 12082
    break L1;
   }
   $158$looptemp = $158;
   $158 = $158 + 1 | 0; //@line 12085
   HEAP32[$5 >> 2] = $158; //@line 12086
   $167 = HEAP8[(HEAP8[$158$looptemp >> 0] | 0) + -65 + (14686 + ($$0252 * 58 | 0)) >> 0] | 0; //@line 12091
   $168 = $167 & 255; //@line 12092
   if (($168 + -1 | 0) >>> 0 >= 8) {
    break;
   } else {
    $$0252 = $168; //@line 12096
   }
  }
  if (!($167 << 24 >> 24)) {
   $$0 = -1; //@line 12103
   break;
  }
  $173 = ($$0253 | 0) > -1; //@line 12107
  do {
   if ($167 << 24 >> 24 == 19) {
    if ($173) {
     $$0 = -1; //@line 12111
     break L1;
    } else {
     label = 50; //@line 12114
    }
   } else {
    if ($173) {
     HEAP32[$4 + ($$0253 << 2) >> 2] = $168; //@line 12119
     $176 = $3 + ($$0253 << 3) | 0; //@line 12121
     $181 = HEAP32[$176 + 4 >> 2] | 0; //@line 12126
     $182 = $6; //@line 12127
     HEAP32[$182 >> 2] = HEAP32[$176 >> 2]; //@line 12129
     HEAP32[$182 + 4 >> 2] = $181; //@line 12132
     label = 50; //@line 12133
     break;
    }
    if (!$10) {
     $$0 = 0; //@line 12137
     break L1;
    }
    _pop_arg_673($6, $168, $2); //@line 12140
    $187 = HEAP32[$5 >> 2] | 0; //@line 12142
   }
  } while (0);
  if ((label | 0) == 50) {
   label = 0; //@line 12146
   if ($10) {
    $187 = $158; //@line 12148
   } else {
    $$0243 = 0; //@line 12150
    $$0247 = $$1248; //@line 12150
    $$0269 = $$3272; //@line 12150
    continue;
   }
  }
  $189 = HEAP8[$187 + -1 >> 0] | 0; //@line 12156
  $$0235 = ($$0252 | 0) != 0 & ($189 & 15 | 0) == 3 ? $189 & -33 : $189; //@line 12162
  $196 = $$1263 & -65537; //@line 12165
  $$1263$ = ($$1263 & 8192 | 0) == 0 ? $$1263 : $196; //@line 12166
  L73 : do {
   switch ($$0235 | 0) {
   case 110:
    {
     switch (($$0252 & 255) << 24 >> 24) {
     case 0:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 12174
       $$0243 = 0; //@line 12175
       $$0247 = $$1248; //@line 12175
       $$0269 = $$3272; //@line 12175
       continue L1;
       break;
      }
     case 1:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 12181
       $$0243 = 0; //@line 12182
       $$0247 = $$1248; //@line 12182
       $$0269 = $$3272; //@line 12182
       continue L1;
       break;
      }
     case 2:
      {
       $208 = HEAP32[$6 >> 2] | 0; //@line 12190
       HEAP32[$208 >> 2] = $$1248; //@line 12192
       HEAP32[$208 + 4 >> 2] = (($$1248 | 0) < 0) << 31 >> 31; //@line 12195
       $$0243 = 0; //@line 12196
       $$0247 = $$1248; //@line 12196
       $$0269 = $$3272; //@line 12196
       continue L1;
       break;
      }
     case 3:
      {
       HEAP16[HEAP32[$6 >> 2] >> 1] = $$1248; //@line 12203
       $$0243 = 0; //@line 12204
       $$0247 = $$1248; //@line 12204
       $$0269 = $$3272; //@line 12204
       continue L1;
       break;
      }
     case 4:
      {
       HEAP8[HEAP32[$6 >> 2] >> 0] = $$1248; //@line 12211
       $$0243 = 0; //@line 12212
       $$0247 = $$1248; //@line 12212
       $$0269 = $$3272; //@line 12212
       continue L1;
       break;
      }
     case 6:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 12218
       $$0243 = 0; //@line 12219
       $$0247 = $$1248; //@line 12219
       $$0269 = $$3272; //@line 12219
       continue L1;
       break;
      }
     case 7:
      {
       $220 = HEAP32[$6 >> 2] | 0; //@line 12227
       HEAP32[$220 >> 2] = $$1248; //@line 12229
       HEAP32[$220 + 4 >> 2] = (($$1248 | 0) < 0) << 31 >> 31; //@line 12232
       $$0243 = 0; //@line 12233
       $$0247 = $$1248; //@line 12233
       $$0269 = $$3272; //@line 12233
       continue L1;
       break;
      }
     default:
      {
       $$0243 = 0; //@line 12238
       $$0247 = $$1248; //@line 12238
       $$0269 = $$3272; //@line 12238
       continue L1;
      }
     }
     break;
    }
   case 112:
    {
     $$1236 = 120; //@line 12248
     $$1255 = $$0254 >>> 0 > 8 ? $$0254 : 8; //@line 12248
     $$3265 = $$1263$ | 8; //@line 12248
     label = 62; //@line 12249
     break;
    }
   case 88:
   case 120:
    {
     $$1236 = $$0235; //@line 12253
     $$1255 = $$0254; //@line 12253
     $$3265 = $$1263$; //@line 12253
     label = 62; //@line 12254
     break;
    }
   case 111:
    {
     $242 = $6; //@line 12258
     $244 = HEAP32[$242 >> 2] | 0; //@line 12260
     $247 = HEAP32[$242 + 4 >> 2] | 0; //@line 12263
     $248 = _fmt_o($244, $247, $11) | 0; //@line 12264
     $252 = $12 - $248 | 0; //@line 12268
     $$0228 = $248; //@line 12273
     $$1233 = 0; //@line 12273
     $$1238 = 15150; //@line 12273
     $$2256 = ($$1263$ & 8 | 0) == 0 | ($$0254 | 0) > ($252 | 0) ? $$0254 : $252 + 1 | 0; //@line 12273
     $$4266 = $$1263$; //@line 12273
     $281 = $244; //@line 12273
     $283 = $247; //@line 12273
     label = 68; //@line 12274
     break;
    }
   case 105:
   case 100:
    {
     $256 = $6; //@line 12278
     $258 = HEAP32[$256 >> 2] | 0; //@line 12280
     $261 = HEAP32[$256 + 4 >> 2] | 0; //@line 12283
     if (($261 | 0) < 0) {
      $263 = _i64Subtract(0, 0, $258 | 0, $261 | 0) | 0; //@line 12286
      $264 = tempRet0; //@line 12287
      $265 = $6; //@line 12288
      HEAP32[$265 >> 2] = $263; //@line 12290
      HEAP32[$265 + 4 >> 2] = $264; //@line 12293
      $$0232 = 1; //@line 12294
      $$0237 = 15150; //@line 12294
      $275 = $263; //@line 12294
      $276 = $264; //@line 12294
      label = 67; //@line 12295
      break L73;
     } else {
      $$0232 = ($$1263$ & 2049 | 0) != 0 & 1; //@line 12307
      $$0237 = ($$1263$ & 2048 | 0) == 0 ? ($$1263$ & 1 | 0) == 0 ? 15150 : 15152 : 15151; //@line 12307
      $275 = $258; //@line 12307
      $276 = $261; //@line 12307
      label = 67; //@line 12308
      break L73;
     }
     break;
    }
   case 117:
    {
     $197 = $6; //@line 12314
     $$0232 = 0; //@line 12320
     $$0237 = 15150; //@line 12320
     $275 = HEAP32[$197 >> 2] | 0; //@line 12320
     $276 = HEAP32[$197 + 4 >> 2] | 0; //@line 12320
     label = 67; //@line 12321
     break;
    }
   case 99:
    {
     HEAP8[$13 >> 0] = HEAP32[$6 >> 2]; //@line 12332
     $$2 = $13; //@line 12333
     $$2234 = 0; //@line 12333
     $$2239 = 15150; //@line 12333
     $$2251 = $11; //@line 12333
     $$5 = 1; //@line 12333
     $$6268 = $196; //@line 12333
     break;
    }
   case 109:
    {
     $$1 = _strerror(HEAP32[(___errno_location() | 0) >> 2] | 0) | 0; //@line 12340
     label = 72; //@line 12341
     break;
    }
   case 115:
    {
     $302 = HEAP32[$6 >> 2] | 0; //@line 12345
     $$1 = $302 | 0 ? $302 : 15160; //@line 12348
     label = 72; //@line 12349
     break;
    }
   case 67:
    {
     HEAP32[$8 >> 2] = HEAP32[$6 >> 2]; //@line 12359
     HEAP32[$14 >> 2] = 0; //@line 12360
     HEAP32[$6 >> 2] = $8; //@line 12361
     $$4258354 = -1; //@line 12362
     $365 = $8; //@line 12362
     label = 76; //@line 12363
     break;
    }
   case 83:
    {
     $$pre348 = HEAP32[$6 >> 2] | 0; //@line 12367
     if (!$$0254) {
      _pad_676($0, 32, $$1260, 0, $$1263$); //@line 12370
      $$0240$lcssa356 = 0; //@line 12371
      label = 85; //@line 12372
     } else {
      $$4258354 = $$0254; //@line 12374
      $365 = $$pre348; //@line 12374
      label = 76; //@line 12375
     }
     break;
    }
   case 65:
   case 71:
   case 70:
   case 69:
   case 97:
   case 103:
   case 102:
   case 101:
    {
     $$0243 = _fmt_fp($0, +HEAPF64[$6 >> 3], $$1260, $$0254, $$1263$, $$0235) | 0; //@line 12382
     $$0247 = $$1248; //@line 12382
     $$0269 = $$3272; //@line 12382
     continue L1;
     break;
    }
   default:
    {
     $$2 = $20; //@line 12387
     $$2234 = 0; //@line 12387
     $$2239 = 15150; //@line 12387
     $$2251 = $11; //@line 12387
     $$5 = $$0254; //@line 12387
     $$6268 = $$1263$; //@line 12387
    }
   }
  } while (0);
  L97 : do {
   if ((label | 0) == 62) {
    label = 0; //@line 12393
    $227 = $6; //@line 12394
    $229 = HEAP32[$227 >> 2] | 0; //@line 12396
    $232 = HEAP32[$227 + 4 >> 2] | 0; //@line 12399
    $234 = _fmt_x($229, $232, $11, $$1236 & 32) | 0; //@line 12401
    $or$cond278 = ($$3265 & 8 | 0) == 0 | ($229 | 0) == 0 & ($232 | 0) == 0; //@line 12407
    $$0228 = $234; //@line 12412
    $$1233 = $or$cond278 ? 0 : 2; //@line 12412
    $$1238 = $or$cond278 ? 15150 : 15150 + ($$1236 >> 4) | 0; //@line 12412
    $$2256 = $$1255; //@line 12412
    $$4266 = $$3265; //@line 12412
    $281 = $229; //@line 12412
    $283 = $232; //@line 12412
    label = 68; //@line 12413
   } else if ((label | 0) == 67) {
    label = 0; //@line 12416
    $$0228 = _fmt_u($275, $276, $11) | 0; //@line 12418
    $$1233 = $$0232; //@line 12418
    $$1238 = $$0237; //@line 12418
    $$2256 = $$0254; //@line 12418
    $$4266 = $$1263$; //@line 12418
    $281 = $275; //@line 12418
    $283 = $276; //@line 12418
    label = 68; //@line 12419
   } else if ((label | 0) == 72) {
    label = 0; //@line 12422
    $305 = _memchr($$1, 0, $$0254) | 0; //@line 12423
    $306 = ($305 | 0) == 0; //@line 12424
    $$2 = $$1; //@line 12431
    $$2234 = 0; //@line 12431
    $$2239 = 15150; //@line 12431
    $$2251 = $306 ? $$1 + $$0254 | 0 : $305; //@line 12431
    $$5 = $306 ? $$0254 : $305 - $$1 | 0; //@line 12431
    $$6268 = $196; //@line 12431
   } else if ((label | 0) == 76) {
    label = 0; //@line 12434
    $$0229316 = $365; //@line 12435
    $$0240315 = 0; //@line 12435
    $$1244314 = 0; //@line 12435
    while (1) {
     $318 = HEAP32[$$0229316 >> 2] | 0; //@line 12437
     if (!$318) {
      $$0240$lcssa = $$0240315; //@line 12440
      $$2245 = $$1244314; //@line 12440
      break;
     }
     $320 = _wctomb($9, $318) | 0; //@line 12443
     if (($320 | 0) < 0 | $320 >>> 0 > ($$4258354 - $$0240315 | 0) >>> 0) {
      $$0240$lcssa = $$0240315; //@line 12449
      $$2245 = $320; //@line 12449
      break;
     }
     $325 = $320 + $$0240315 | 0; //@line 12453
     if ($$4258354 >>> 0 > $325 >>> 0) {
      $$0229316 = $$0229316 + 4 | 0; //@line 12456
      $$0240315 = $325; //@line 12456
      $$1244314 = $320; //@line 12456
     } else {
      $$0240$lcssa = $325; //@line 12458
      $$2245 = $320; //@line 12458
      break;
     }
    }
    if (($$2245 | 0) < 0) {
     $$0 = -1; //@line 12464
     break L1;
    }
    _pad_676($0, 32, $$1260, $$0240$lcssa, $$1263$); //@line 12467
    if (!$$0240$lcssa) {
     $$0240$lcssa356 = 0; //@line 12470
     label = 85; //@line 12471
    } else {
     $$1230327 = $365; //@line 12473
     $$1241326 = 0; //@line 12473
     while (1) {
      $329 = HEAP32[$$1230327 >> 2] | 0; //@line 12475
      if (!$329) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 12478
       label = 85; //@line 12479
       break L97;
      }
      $331 = _wctomb($9, $329) | 0; //@line 12482
      $$1241326 = $331 + $$1241326 | 0; //@line 12483
      if (($$1241326 | 0) > ($$0240$lcssa | 0)) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 12486
       label = 85; //@line 12487
       break L97;
      }
      _out_670($0, $9, $331); //@line 12491
      if ($$1241326 >>> 0 >= $$0240$lcssa >>> 0) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 12496
       label = 85; //@line 12497
       break;
      } else {
       $$1230327 = $$1230327 + 4 | 0; //@line 12494
      }
     }
    }
   }
  } while (0);
  if ((label | 0) == 68) {
   label = 0; //@line 12505
   $284 = ($281 | 0) != 0 | ($283 | 0) != 0; //@line 12511
   $or$cond = ($$2256 | 0) != 0 | $284; //@line 12513
   $290 = $12 - $$0228 + (($284 ^ 1) & 1) | 0; //@line 12518
   $$2 = $or$cond ? $$0228 : $11; //@line 12523
   $$2234 = $$1233; //@line 12523
   $$2239 = $$1238; //@line 12523
   $$2251 = $11; //@line 12523
   $$5 = $or$cond ? ($$2256 | 0) > ($290 | 0) ? $$2256 : $290 : $$2256; //@line 12523
   $$6268 = ($$2256 | 0) > -1 ? $$4266 & -65537 : $$4266; //@line 12523
  } else if ((label | 0) == 85) {
   label = 0; //@line 12526
   _pad_676($0, 32, $$1260, $$0240$lcssa356, $$1263$ ^ 8192); //@line 12528
   $$0243 = ($$1260 | 0) > ($$0240$lcssa356 | 0) ? $$1260 : $$0240$lcssa356; //@line 12531
   $$0247 = $$1248; //@line 12531
   $$0269 = $$3272; //@line 12531
   continue;
  }
  $343 = $$2251 - $$2 | 0; //@line 12536
  $$$5 = ($$5 | 0) < ($343 | 0) ? $343 : $$5; //@line 12538
  $345 = $$$5 + $$2234 | 0; //@line 12539
  $$2261 = ($$1260 | 0) < ($345 | 0) ? $345 : $$1260; //@line 12541
  _pad_676($0, 32, $$2261, $345, $$6268); //@line 12542
  _out_670($0, $$2239, $$2234); //@line 12543
  _pad_676($0, 48, $$2261, $345, $$6268 ^ 65536); //@line 12545
  _pad_676($0, 48, $$$5, $343, 0); //@line 12546
  _out_670($0, $$2, $343); //@line 12547
  _pad_676($0, 32, $$2261, $345, $$6268 ^ 8192); //@line 12549
  $$0243 = $$2261; //@line 12550
  $$0247 = $$1248; //@line 12550
  $$0269 = $$3272; //@line 12550
 }
 L116 : do {
  if ((label | 0) == 88) {
   if (!$0) {
    if (!$$0269) {
     $$0 = 0; //@line 12558
    } else {
     $$2242302 = 1; //@line 12560
     while (1) {
      $352 = HEAP32[$4 + ($$2242302 << 2) >> 2] | 0; //@line 12563
      if (!$352) {
       $$2242$lcssa = $$2242302; //@line 12566
       break;
      }
      _pop_arg_673($3 + ($$2242302 << 3) | 0, $352, $2); //@line 12570
      $356 = $$2242302 + 1 | 0; //@line 12571
      if (($$2242302 | 0) < 9) {
       $$2242302 = $356; //@line 12574
      } else {
       $$2242$lcssa = $356; //@line 12576
       break;
      }
     }
     if (($$2242$lcssa | 0) < 10) {
      $$3300 = $$2242$lcssa; //@line 12582
      while (1) {
       if (HEAP32[$4 + ($$3300 << 2) >> 2] | 0) {
        $$0 = -1; //@line 12588
        break L116;
       }
       if (($$3300 | 0) < 9) {
        $$3300 = $$3300 + 1 | 0; //@line 12594
       } else {
        $$0 = 1; //@line 12596
        break;
       }
      }
     } else {
      $$0 = 1; //@line 12601
     }
    }
   } else {
    $$0 = $$1248; //@line 12605
   }
  }
 } while (0);
 STACKTOP = sp; //@line 12609
 return $$0 | 0; //@line 12609
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_100($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $10 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $115 = 0, $116 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $146 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $160 = 0, $161 = 0, $163 = 0, $164 = 0, $165 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $177 = 0, $181 = 0, $182 = 0, $184 = 0, $185 = 0, $186 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $2 = 0, $20 = 0, $34 = 0, $38 = 0, $4 = 0, $43 = 0, $49 = 0, $50 = 0, $55 = 0, $59 = 0, $6 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $72 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $87 = 0, $89 = 0, $90 = 0, $95 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 26770
 STACKTOP = STACKTOP + 16 | 0; //@line 26771
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 26771
 $$byval_copy = sp; //@line 26772
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26774
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26776
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26778
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26780
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26782
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26784
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26786
 do {
  if (HEAP8[$2 >> 0] & 2) {
   $20 = $4 + 288 | 0; //@line 26794
   if (!(HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($20) | 0) + 10 >> 0] | 0)) {
    if ((HEAPU8[$4 + 895 >> 0] | 0) <= (HEAPU8[$4 + 894 >> 0] | 0)) {
     break;
    }
   }
   HEAP8[$4 + 377 >> 0] = 0; //@line 26810
   HEAP8[$14 >> 0] = 0; //@line 26811
   if (!(HEAP8[$4 + 370 >> 0] | 0)) {
    $34 = $4 + 956 | 0; //@line 26816
    HEAP32[$34 >> 2] = (HEAP32[$34 >> 2] | 0) + 1; //@line 26819
   }
   $38 = HEAP8[$4 + 895 >> 0] | 0; //@line 26822
   HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($20) | 0) + 11 >> 0] = $38; //@line 26825
   HEAP32[$8 >> 2] = HEAP32[$8 >> 2] & -2; //@line 26828
  }
 } while (0);
 $43 = $4 + 377 | 0; //@line 26831
 if (HEAP8[$43 >> 0] | 0) {
  if (!(HEAP32[$8 >> 2] & 16)) {
   HEAP8[$43 >> 0] = 0; //@line 26839
   $49 = $4 + 895 | 0; //@line 26840
   $50 = HEAP8[$49 >> 0] | 0; //@line 26841
   if (!(($50 & 255) < 9 ? ($50 & 255) < (HEAPU8[$4 + 894 >> 0] | 0) : 0)) {
    $72 = HEAP32[$4 >> 2] | 0; //@line 26848
    $75 = HEAP32[(HEAP32[$72 >> 2] | 0) + 16 >> 2] | 0; //@line 26851
    $ReallocAsyncCtx = _emscripten_realloc_async_context(36) | 0; //@line 26852
    FUNCTION_TABLE_vi[$75 & 1023]($72); //@line 26853
    if (___async) {
     HEAP32[$ReallocAsyncCtx >> 2] = 375; //@line 26856
     $76 = $ReallocAsyncCtx + 4 | 0; //@line 26857
     HEAP32[$76 >> 2] = $4; //@line 26858
     $77 = $ReallocAsyncCtx + 8 | 0; //@line 26859
     HEAP32[$77 >> 2] = $8; //@line 26860
     $78 = $ReallocAsyncCtx + 12 | 0; //@line 26861
     HEAP32[$78 >> 2] = $2; //@line 26862
     $79 = $ReallocAsyncCtx + 16 | 0; //@line 26863
     HEAP32[$79 >> 2] = $14; //@line 26864
     $80 = $ReallocAsyncCtx + 20 | 0; //@line 26865
     HEAP32[$80 >> 2] = $49; //@line 26866
     $81 = $ReallocAsyncCtx + 24 | 0; //@line 26867
     HEAP32[$81 >> 2] = $10; //@line 26868
     $82 = $ReallocAsyncCtx + 28 | 0; //@line 26869
     HEAP32[$82 >> 2] = $12; //@line 26870
     $83 = $ReallocAsyncCtx + 32 | 0; //@line 26871
     HEAP32[$83 >> 2] = $6; //@line 26872
     sp = STACKTOP; //@line 26873
     STACKTOP = sp; //@line 26874
     return;
    }
    ___async_unwind = 0; //@line 26876
    HEAP32[$ReallocAsyncCtx >> 2] = 375; //@line 26877
    $76 = $ReallocAsyncCtx + 4 | 0; //@line 26878
    HEAP32[$76 >> 2] = $4; //@line 26879
    $77 = $ReallocAsyncCtx + 8 | 0; //@line 26880
    HEAP32[$77 >> 2] = $8; //@line 26881
    $78 = $ReallocAsyncCtx + 12 | 0; //@line 26882
    HEAP32[$78 >> 2] = $2; //@line 26883
    $79 = $ReallocAsyncCtx + 16 | 0; //@line 26884
    HEAP32[$79 >> 2] = $14; //@line 26885
    $80 = $ReallocAsyncCtx + 20 | 0; //@line 26886
    HEAP32[$80 >> 2] = $49; //@line 26887
    $81 = $ReallocAsyncCtx + 24 | 0; //@line 26888
    HEAP32[$81 >> 2] = $10; //@line 26889
    $82 = $ReallocAsyncCtx + 28 | 0; //@line 26890
    HEAP32[$82 >> 2] = $12; //@line 26891
    $83 = $ReallocAsyncCtx + 32 | 0; //@line 26892
    HEAP32[$83 >> 2] = $6; //@line 26893
    sp = STACKTOP; //@line 26894
    STACKTOP = sp; //@line 26895
    return;
   }
   $55 = $50 + 1 << 24 >> 24; //@line 26897
   HEAP8[$49 >> 0] = $55; //@line 26898
   if ($55 & 1) {
    $59 = $4 + 1097 | 0; //@line 26903
    HEAP8[$59 >> 0] = __ZN7LoRaPHY26get_next_lower_tx_datarateEa(HEAP32[$4 >> 2] | 0, HEAP8[$59 >> 0] | 0) | 0; //@line 26906
   }
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(36) | 0; //@line 26908
   $62 = __ZN7LoRaMac11schedule_txEv($4) | 0; //@line 26909
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 374; //@line 26912
    $63 = $ReallocAsyncCtx7 + 4 | 0; //@line 26913
    HEAP32[$63 >> 2] = $2; //@line 26914
    $64 = $ReallocAsyncCtx7 + 8 | 0; //@line 26915
    HEAP32[$64 >> 2] = $4; //@line 26916
    $65 = $ReallocAsyncCtx7 + 12 | 0; //@line 26917
    HEAP32[$65 >> 2] = $6; //@line 26918
    $66 = $ReallocAsyncCtx7 + 16 | 0; //@line 26919
    HEAP32[$66 >> 2] = $8; //@line 26920
    $67 = $ReallocAsyncCtx7 + 20 | 0; //@line 26921
    HEAP32[$67 >> 2] = $14; //@line 26922
    $68 = $ReallocAsyncCtx7 + 24 | 0; //@line 26923
    HEAP32[$68 >> 2] = $49; //@line 26924
    $69 = $ReallocAsyncCtx7 + 28 | 0; //@line 26925
    HEAP32[$69 >> 2] = $10; //@line 26926
    $70 = $ReallocAsyncCtx7 + 32 | 0; //@line 26927
    HEAP32[$70 >> 2] = $12; //@line 26928
    sp = STACKTOP; //@line 26929
    STACKTOP = sp; //@line 26930
    return;
   }
   HEAP32[___async_retval >> 2] = $62; //@line 26933
   ___async_unwind = 0; //@line 26934
   HEAP32[$ReallocAsyncCtx7 >> 2] = 374; //@line 26935
   $63 = $ReallocAsyncCtx7 + 4 | 0; //@line 26936
   HEAP32[$63 >> 2] = $2; //@line 26937
   $64 = $ReallocAsyncCtx7 + 8 | 0; //@line 26938
   HEAP32[$64 >> 2] = $4; //@line 26939
   $65 = $ReallocAsyncCtx7 + 12 | 0; //@line 26940
   HEAP32[$65 >> 2] = $6; //@line 26941
   $66 = $ReallocAsyncCtx7 + 16 | 0; //@line 26942
   HEAP32[$66 >> 2] = $8; //@line 26943
   $67 = $ReallocAsyncCtx7 + 20 | 0; //@line 26944
   HEAP32[$67 >> 2] = $14; //@line 26945
   $68 = $ReallocAsyncCtx7 + 24 | 0; //@line 26946
   HEAP32[$68 >> 2] = $49; //@line 26947
   $69 = $ReallocAsyncCtx7 + 28 | 0; //@line 26948
   HEAP32[$69 >> 2] = $10; //@line 26949
   $70 = $ReallocAsyncCtx7 + 32 | 0; //@line 26950
   HEAP32[$70 >> 2] = $12; //@line 26951
   sp = STACKTOP; //@line 26952
   STACKTOP = sp; //@line 26953
   return;
  }
 }
 $84 = HEAP32[$8 >> 2] | 0; //@line 26956
 $87 = $84 & -3; //@line 26959
 if (!($84 & 2)) {
  $89 = $84; //@line 26961
 } else {
  HEAP32[$8 >> 2] = $87; //@line 26963
  $89 = $87; //@line 26964
 }
 if ($89 | 0) {
  $140 = HEAP32[$10 >> 2] | 0; //@line 26968
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(16) | 0; //@line 26969
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($140, $12, 1e3); //@line 26970
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 380; //@line 26973
   $141 = $ReallocAsyncCtx6 + 4 | 0; //@line 26974
   HEAP32[$141 >> 2] = $2; //@line 26975
   $142 = $ReallocAsyncCtx6 + 8 | 0; //@line 26976
   HEAP32[$142 >> 2] = $4; //@line 26977
   $143 = $ReallocAsyncCtx6 + 12 | 0; //@line 26978
   HEAP32[$143 >> 2] = $6; //@line 26979
   sp = STACKTOP; //@line 26980
   STACKTOP = sp; //@line 26981
   return;
  }
  ___async_unwind = 0; //@line 26983
  HEAP32[$ReallocAsyncCtx6 >> 2] = 380; //@line 26984
  $141 = $ReallocAsyncCtx6 + 4 | 0; //@line 26985
  HEAP32[$141 >> 2] = $2; //@line 26986
  $142 = $ReallocAsyncCtx6 + 8 | 0; //@line 26987
  HEAP32[$142 >> 2] = $4; //@line 26988
  $143 = $ReallocAsyncCtx6 + 12 | 0; //@line 26989
  HEAP32[$143 >> 2] = $6; //@line 26990
  sp = STACKTOP; //@line 26991
  STACKTOP = sp; //@line 26992
  return;
 }
 $90 = HEAP8[$2 >> 0] | 0; //@line 26994
 if ($90 & 1) {
  HEAP8[$2 >> 0] = $90 & -2; //@line 26999
  $95 = HEAP32[$4 + 1324 >> 2] | 0; //@line 27001
  $97 = __ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0; //@line 27003
  $98 = $95 + 12 | 0; //@line 27004
  $99 = HEAP32[$98 >> 2] | 0; //@line 27005
  if (!$99) {
   $ReallocAsyncCtx16 = _emscripten_realloc_async_context(28) | 0; //@line 27008
   _mbed_assert_internal(13874, 13879, 1102); //@line 27009
   if (___async) {
    HEAP32[$ReallocAsyncCtx16 >> 2] = 376; //@line 27012
    $101 = $ReallocAsyncCtx16 + 4 | 0; //@line 27013
    HEAP32[$101 >> 2] = $2; //@line 27014
    $102 = $ReallocAsyncCtx16 + 8 | 0; //@line 27015
    HEAP32[$102 >> 2] = $4; //@line 27016
    $103 = $ReallocAsyncCtx16 + 12 | 0; //@line 27017
    HEAP32[$103 >> 2] = $6; //@line 27018
    $104 = $ReallocAsyncCtx16 + 16 | 0; //@line 27019
    HEAP32[$104 >> 2] = $98; //@line 27020
    $105 = $ReallocAsyncCtx16 + 20 | 0; //@line 27021
    HEAP32[$105 >> 2] = $95; //@line 27022
    $106 = $ReallocAsyncCtx16 + 24 | 0; //@line 27023
    HEAP32[$106 >> 2] = $97; //@line 27024
    sp = STACKTOP; //@line 27025
    STACKTOP = sp; //@line 27026
    return;
   }
   ___async_unwind = 0; //@line 27028
   HEAP32[$ReallocAsyncCtx16 >> 2] = 376; //@line 27029
   $101 = $ReallocAsyncCtx16 + 4 | 0; //@line 27030
   HEAP32[$101 >> 2] = $2; //@line 27031
   $102 = $ReallocAsyncCtx16 + 8 | 0; //@line 27032
   HEAP32[$102 >> 2] = $4; //@line 27033
   $103 = $ReallocAsyncCtx16 + 12 | 0; //@line 27034
   HEAP32[$103 >> 2] = $6; //@line 27035
   $104 = $ReallocAsyncCtx16 + 16 | 0; //@line 27036
   HEAP32[$104 >> 2] = $98; //@line 27037
   $105 = $ReallocAsyncCtx16 + 20 | 0; //@line 27038
   HEAP32[$105 >> 2] = $95; //@line 27039
   $106 = $ReallocAsyncCtx16 + 24 | 0; //@line 27040
   HEAP32[$106 >> 2] = $97; //@line 27041
   sp = STACKTOP; //@line 27042
   STACKTOP = sp; //@line 27043
   return;
  } else {
   $107 = HEAP32[$99 >> 2] | 0; //@line 27045
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 27046
   FUNCTION_TABLE_vii[$107 & 31]($95, $97); //@line 27047
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 377; //@line 27050
    $108 = $ReallocAsyncCtx2 + 4 | 0; //@line 27051
    HEAP32[$108 >> 2] = $2; //@line 27052
    $109 = $ReallocAsyncCtx2 + 8 | 0; //@line 27053
    HEAP32[$109 >> 2] = $4; //@line 27054
    $110 = $ReallocAsyncCtx2 + 12 | 0; //@line 27055
    HEAP32[$110 >> 2] = $6; //@line 27056
    sp = STACKTOP; //@line 27057
    STACKTOP = sp; //@line 27058
    return;
   }
   ___async_unwind = 0; //@line 27060
   HEAP32[$ReallocAsyncCtx2 >> 2] = 377; //@line 27061
   $108 = $ReallocAsyncCtx2 + 4 | 0; //@line 27062
   HEAP32[$108 >> 2] = $2; //@line 27063
   $109 = $ReallocAsyncCtx2 + 8 | 0; //@line 27064
   HEAP32[$109 >> 2] = $4; //@line 27065
   $110 = $ReallocAsyncCtx2 + 12 | 0; //@line 27066
   HEAP32[$110 >> 2] = $6; //@line 27067
   sp = STACKTOP; //@line 27068
   STACKTOP = sp; //@line 27069
   return;
  }
 }
 if ($90 & 8) {
  HEAP8[$2 >> 0] = $90 & -9; //@line 27076
  $115 = HEAP32[$4 + 1324 >> 2] | 0; //@line 27078
  $116 = $115 + 32 | 0; //@line 27079
  $118 = __ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0; //@line 27081
  $119 = $115 + 44 | 0; //@line 27082
  $120 = HEAP32[$119 >> 2] | 0; //@line 27083
  if (!$120) {
   $ReallocAsyncCtx15 = _emscripten_realloc_async_context(28) | 0; //@line 27086
   _mbed_assert_internal(13874, 13879, 1102); //@line 27087
   if (___async) {
    HEAP32[$ReallocAsyncCtx15 >> 2] = 378; //@line 27090
    $122 = $ReallocAsyncCtx15 + 4 | 0; //@line 27091
    HEAP32[$122 >> 2] = $2; //@line 27092
    $123 = $ReallocAsyncCtx15 + 8 | 0; //@line 27093
    HEAP32[$123 >> 2] = $4; //@line 27094
    $124 = $ReallocAsyncCtx15 + 12 | 0; //@line 27095
    HEAP32[$124 >> 2] = $6; //@line 27096
    $125 = $ReallocAsyncCtx15 + 16 | 0; //@line 27097
    HEAP32[$125 >> 2] = $116; //@line 27098
    $126 = $ReallocAsyncCtx15 + 20 | 0; //@line 27099
    HEAP32[$126 >> 2] = $118; //@line 27100
    $127 = $ReallocAsyncCtx15 + 24 | 0; //@line 27101
    HEAP32[$127 >> 2] = $119; //@line 27102
    sp = STACKTOP; //@line 27103
    STACKTOP = sp; //@line 27104
    return;
   }
   ___async_unwind = 0; //@line 27106
   HEAP32[$ReallocAsyncCtx15 >> 2] = 378; //@line 27107
   $122 = $ReallocAsyncCtx15 + 4 | 0; //@line 27108
   HEAP32[$122 >> 2] = $2; //@line 27109
   $123 = $ReallocAsyncCtx15 + 8 | 0; //@line 27110
   HEAP32[$123 >> 2] = $4; //@line 27111
   $124 = $ReallocAsyncCtx15 + 12 | 0; //@line 27112
   HEAP32[$124 >> 2] = $6; //@line 27113
   $125 = $ReallocAsyncCtx15 + 16 | 0; //@line 27114
   HEAP32[$125 >> 2] = $116; //@line 27115
   $126 = $ReallocAsyncCtx15 + 20 | 0; //@line 27116
   HEAP32[$126 >> 2] = $118; //@line 27117
   $127 = $ReallocAsyncCtx15 + 24 | 0; //@line 27118
   HEAP32[$127 >> 2] = $119; //@line 27119
   sp = STACKTOP; //@line 27120
   STACKTOP = sp; //@line 27121
   return;
  } else {
   $128 = HEAP32[$120 >> 2] | 0; //@line 27123
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 27124
   FUNCTION_TABLE_vii[$128 & 31]($116, $118); //@line 27125
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 379; //@line 27128
    $129 = $ReallocAsyncCtx3 + 4 | 0; //@line 27129
    HEAP32[$129 >> 2] = $2; //@line 27130
    $130 = $ReallocAsyncCtx3 + 8 | 0; //@line 27131
    HEAP32[$130 >> 2] = $4; //@line 27132
    $131 = $ReallocAsyncCtx3 + 12 | 0; //@line 27133
    HEAP32[$131 >> 2] = $6; //@line 27134
    sp = STACKTOP; //@line 27135
    STACKTOP = sp; //@line 27136
    return;
   }
   ___async_unwind = 0; //@line 27138
   HEAP32[$ReallocAsyncCtx3 >> 2] = 379; //@line 27139
   $129 = $ReallocAsyncCtx3 + 4 | 0; //@line 27140
   HEAP32[$129 >> 2] = $2; //@line 27141
   $130 = $ReallocAsyncCtx3 + 8 | 0; //@line 27142
   HEAP32[$130 >> 2] = $4; //@line 27143
   $131 = $ReallocAsyncCtx3 + 12 | 0; //@line 27144
   HEAP32[$131 >> 2] = $6; //@line 27145
   sp = STACKTOP; //@line 27146
   STACKTOP = sp; //@line 27147
   return;
  }
 }
 if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($4 + 4 | 0) | 0) {
  HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0) >> 2] = 4; //@line 27155
  $137 = HEAP8[$2 >> 0] | 16; //@line 27157
  HEAP8[$2 >> 0] = $137; //@line 27158
  $139 = $137; //@line 27159
 } else {
  $139 = HEAP8[$2 >> 0] | 0; //@line 27162
 }
 $138 = $139 & -33; //@line 27164
 HEAP8[$2 >> 0] = $138; //@line 27165
 do {
  if (!($138 & 2)) {
   $177 = $138; //@line 27170
  } else {
   $146 = $138 & -3; //@line 27172
   HEAP8[$2 >> 0] = $146; //@line 27173
   if ((HEAP32[$4 + 360 >> 2] | 0) == 2) {
    $151 = HEAP32[$4 + 1328 >> 2] | 0; //@line 27179
    HEAP32[$6 >> 2] = 273; //@line 27180
    HEAP32[$6 + 4 >> 2] = 0; //@line 27182
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 27183
    HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 27184
    HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 27184
    $152 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($151, $4, $$byval_copy) | 0; //@line 27185
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 381; //@line 27188
     $153 = $ReallocAsyncCtx8 + 4 | 0; //@line 27189
     HEAP32[$153 >> 2] = $2; //@line 27190
     $154 = $ReallocAsyncCtx8 + 8 | 0; //@line 27191
     HEAP32[$154 >> 2] = $4; //@line 27192
     $155 = $ReallocAsyncCtx8 + 12 | 0; //@line 27193
     HEAP32[$155 >> 2] = $6; //@line 27194
     sp = STACKTOP; //@line 27195
     STACKTOP = sp; //@line 27196
     return;
    }
    HEAP32[___async_retval >> 2] = $152; //@line 27199
    ___async_unwind = 0; //@line 27200
    HEAP32[$ReallocAsyncCtx8 >> 2] = 381; //@line 27201
    $153 = $ReallocAsyncCtx8 + 4 | 0; //@line 27202
    HEAP32[$153 >> 2] = $2; //@line 27203
    $154 = $ReallocAsyncCtx8 + 8 | 0; //@line 27204
    HEAP32[$154 >> 2] = $4; //@line 27205
    $155 = $ReallocAsyncCtx8 + 12 | 0; //@line 27206
    HEAP32[$155 >> 2] = $6; //@line 27207
    sp = STACKTOP; //@line 27208
    STACKTOP = sp; //@line 27209
    return;
   }
   if ($146 & 4) {
    $175 = $146 & -5; //@line 27214
    HEAP8[$2 >> 0] = $175; //@line 27215
    $177 = $175; //@line 27216
    break;
   }
   $160 = HEAP32[$4 + 1324 >> 2] | 0; //@line 27220
   $161 = $160 + 16 | 0; //@line 27221
   $163 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 27223
   $164 = $160 + 28 | 0; //@line 27224
   $165 = HEAP32[$164 >> 2] | 0; //@line 27225
   if (!$165) {
    $ReallocAsyncCtx13 = _emscripten_realloc_async_context(24) | 0; //@line 27228
    _mbed_assert_internal(13874, 13879, 1102); //@line 27229
    if (___async) {
     HEAP32[$ReallocAsyncCtx13 >> 2] = 383; //@line 27232
     $167 = $ReallocAsyncCtx13 + 4 | 0; //@line 27233
     HEAP32[$167 >> 2] = $164; //@line 27234
     $168 = $ReallocAsyncCtx13 + 8 | 0; //@line 27235
     HEAP32[$168 >> 2] = $161; //@line 27236
     $169 = $ReallocAsyncCtx13 + 12 | 0; //@line 27237
     HEAP32[$169 >> 2] = $163; //@line 27238
     $170 = $ReallocAsyncCtx13 + 16 | 0; //@line 27239
     HEAP32[$170 >> 2] = $2; //@line 27240
     $171 = $ReallocAsyncCtx13 + 20 | 0; //@line 27241
     HEAP32[$171 >> 2] = $4; //@line 27242
     sp = STACKTOP; //@line 27243
     STACKTOP = sp; //@line 27244
     return;
    }
    ___async_unwind = 0; //@line 27246
    HEAP32[$ReallocAsyncCtx13 >> 2] = 383; //@line 27247
    $167 = $ReallocAsyncCtx13 + 4 | 0; //@line 27248
    HEAP32[$167 >> 2] = $164; //@line 27249
    $168 = $ReallocAsyncCtx13 + 8 | 0; //@line 27250
    HEAP32[$168 >> 2] = $161; //@line 27251
    $169 = $ReallocAsyncCtx13 + 12 | 0; //@line 27252
    HEAP32[$169 >> 2] = $163; //@line 27253
    $170 = $ReallocAsyncCtx13 + 16 | 0; //@line 27254
    HEAP32[$170 >> 2] = $2; //@line 27255
    $171 = $ReallocAsyncCtx13 + 20 | 0; //@line 27256
    HEAP32[$171 >> 2] = $4; //@line 27257
    sp = STACKTOP; //@line 27258
    STACKTOP = sp; //@line 27259
    return;
   } else {
    $172 = HEAP32[$165 >> 2] | 0; //@line 27261
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 27262
    FUNCTION_TABLE_vii[$172 & 31]($161, $163); //@line 27263
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 384; //@line 27266
     $173 = $ReallocAsyncCtx4 + 4 | 0; //@line 27267
     HEAP32[$173 >> 2] = $2; //@line 27268
     $174 = $ReallocAsyncCtx4 + 8 | 0; //@line 27269
     HEAP32[$174 >> 2] = $4; //@line 27270
     sp = STACKTOP; //@line 27271
     STACKTOP = sp; //@line 27272
     return;
    }
    ___async_unwind = 0; //@line 27274
    HEAP32[$ReallocAsyncCtx4 >> 2] = 384; //@line 27275
    $173 = $ReallocAsyncCtx4 + 4 | 0; //@line 27276
    HEAP32[$173 >> 2] = $2; //@line 27277
    $174 = $ReallocAsyncCtx4 + 8 | 0; //@line 27278
    HEAP32[$174 >> 2] = $4; //@line 27279
    sp = STACKTOP; //@line 27280
    STACKTOP = sp; //@line 27281
    return;
   }
  }
 } while (0);
 if (!($177 & 16)) {
  STACKTOP = sp; //@line 27288
  return;
 }
 HEAP8[$2 >> 0] = $177 & -17; //@line 27291
 $181 = HEAP32[$4 + 1324 >> 2] | 0; //@line 27293
 $182 = $181 + 48 | 0; //@line 27294
 $184 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 27296
 $185 = $181 + 60 | 0; //@line 27297
 $186 = HEAP32[$185 >> 2] | 0; //@line 27298
 if (!$186) {
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(16) | 0; //@line 27301
  _mbed_assert_internal(13874, 13879, 1102); //@line 27302
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 385; //@line 27305
   $188 = $ReallocAsyncCtx12 + 4 | 0; //@line 27306
   HEAP32[$188 >> 2] = $185; //@line 27307
   $189 = $ReallocAsyncCtx12 + 8 | 0; //@line 27308
   HEAP32[$189 >> 2] = $182; //@line 27309
   $190 = $ReallocAsyncCtx12 + 12 | 0; //@line 27310
   HEAP32[$190 >> 2] = $184; //@line 27311
   sp = STACKTOP; //@line 27312
   STACKTOP = sp; //@line 27313
   return;
  }
  ___async_unwind = 0; //@line 27315
  HEAP32[$ReallocAsyncCtx12 >> 2] = 385; //@line 27316
  $188 = $ReallocAsyncCtx12 + 4 | 0; //@line 27317
  HEAP32[$188 >> 2] = $185; //@line 27318
  $189 = $ReallocAsyncCtx12 + 8 | 0; //@line 27319
  HEAP32[$189 >> 2] = $182; //@line 27320
  $190 = $ReallocAsyncCtx12 + 12 | 0; //@line 27321
  HEAP32[$190 >> 2] = $184; //@line 27322
  sp = STACKTOP; //@line 27323
  STACKTOP = sp; //@line 27324
  return;
 } else {
  $191 = HEAP32[$186 >> 2] | 0; //@line 27326
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 27327
  FUNCTION_TABLE_vii[$191 & 31]($182, $184); //@line 27328
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 386; //@line 27331
   sp = STACKTOP; //@line 27332
   STACKTOP = sp; //@line 27333
   return;
  }
  ___async_unwind = 0; //@line 27335
  HEAP32[$ReallocAsyncCtx5 >> 2] = 386; //@line 27336
  sp = STACKTOP; //@line 27337
  STACKTOP = sp; //@line 27338
  return;
 }
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_99($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $115 = 0, $116 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $146 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $16 = 0, $160 = 0, $161 = 0, $163 = 0, $164 = 0, $165 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $177 = 0, $181 = 0, $182 = 0, $184 = 0, $185 = 0, $186 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $2 = 0, $20 = 0, $34 = 0, $38 = 0, $4 = 0, $43 = 0, $49 = 0, $50 = 0, $55 = 0, $59 = 0, $6 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $72 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $87 = 0, $89 = 0, $90 = 0, $95 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 26185
 STACKTOP = STACKTOP + 16 | 0; //@line 26186
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 26186
 $$byval_copy = sp; //@line 26187
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26189
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26191
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26193
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26195
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26199
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26201
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 26203
 do {
  if (HEAP8[$2 >> 0] & 2) {
   $20 = $4 + 288 | 0; //@line 26209
   if (!(HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($20) | 0) + 10 >> 0] | 0)) {
    if ((HEAPU8[$4 + 895 >> 0] | 0) <= (HEAPU8[$4 + 894 >> 0] | 0)) {
     break;
    }
   }
   HEAP8[$4 + 377 >> 0] = 0; //@line 26225
   HEAP8[$16 >> 0] = 0; //@line 26226
   if (!(HEAP8[$4 + 370 >> 0] | 0)) {
    $34 = $4 + 956 | 0; //@line 26231
    HEAP32[$34 >> 2] = (HEAP32[$34 >> 2] | 0) + 1; //@line 26234
   }
   $38 = HEAP8[$4 + 895 >> 0] | 0; //@line 26237
   HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($20) | 0) + 11 >> 0] = $38; //@line 26240
   HEAP32[$8 >> 2] = HEAP32[$8 >> 2] & -2; //@line 26243
  }
 } while (0);
 $43 = $4 + 377 | 0; //@line 26246
 if (HEAP8[$43 >> 0] | 0) {
  if (!(HEAP32[$8 >> 2] & 16)) {
   HEAP8[$43 >> 0] = 0; //@line 26254
   $49 = $4 + 895 | 0; //@line 26255
   $50 = HEAP8[$49 >> 0] | 0; //@line 26256
   if (!(($50 & 255) < 9 ? ($50 & 255) < (HEAPU8[$4 + 894 >> 0] | 0) : 0)) {
    $72 = HEAP32[$4 >> 2] | 0; //@line 26263
    $75 = HEAP32[(HEAP32[$72 >> 2] | 0) + 16 >> 2] | 0; //@line 26266
    $ReallocAsyncCtx = _emscripten_realloc_async_context(36) | 0; //@line 26267
    FUNCTION_TABLE_vi[$75 & 1023]($72); //@line 26268
    if (___async) {
     HEAP32[$ReallocAsyncCtx >> 2] = 375; //@line 26271
     $76 = $ReallocAsyncCtx + 4 | 0; //@line 26272
     HEAP32[$76 >> 2] = $4; //@line 26273
     $77 = $ReallocAsyncCtx + 8 | 0; //@line 26274
     HEAP32[$77 >> 2] = $8; //@line 26275
     $78 = $ReallocAsyncCtx + 12 | 0; //@line 26276
     HEAP32[$78 >> 2] = $2; //@line 26277
     $79 = $ReallocAsyncCtx + 16 | 0; //@line 26278
     HEAP32[$79 >> 2] = $16; //@line 26279
     $80 = $ReallocAsyncCtx + 20 | 0; //@line 26280
     HEAP32[$80 >> 2] = $49; //@line 26281
     $81 = $ReallocAsyncCtx + 24 | 0; //@line 26282
     HEAP32[$81 >> 2] = $12; //@line 26283
     $82 = $ReallocAsyncCtx + 28 | 0; //@line 26284
     HEAP32[$82 >> 2] = $14; //@line 26285
     $83 = $ReallocAsyncCtx + 32 | 0; //@line 26286
     HEAP32[$83 >> 2] = $6; //@line 26287
     sp = STACKTOP; //@line 26288
     STACKTOP = sp; //@line 26289
     return;
    }
    ___async_unwind = 0; //@line 26291
    HEAP32[$ReallocAsyncCtx >> 2] = 375; //@line 26292
    $76 = $ReallocAsyncCtx + 4 | 0; //@line 26293
    HEAP32[$76 >> 2] = $4; //@line 26294
    $77 = $ReallocAsyncCtx + 8 | 0; //@line 26295
    HEAP32[$77 >> 2] = $8; //@line 26296
    $78 = $ReallocAsyncCtx + 12 | 0; //@line 26297
    HEAP32[$78 >> 2] = $2; //@line 26298
    $79 = $ReallocAsyncCtx + 16 | 0; //@line 26299
    HEAP32[$79 >> 2] = $16; //@line 26300
    $80 = $ReallocAsyncCtx + 20 | 0; //@line 26301
    HEAP32[$80 >> 2] = $49; //@line 26302
    $81 = $ReallocAsyncCtx + 24 | 0; //@line 26303
    HEAP32[$81 >> 2] = $12; //@line 26304
    $82 = $ReallocAsyncCtx + 28 | 0; //@line 26305
    HEAP32[$82 >> 2] = $14; //@line 26306
    $83 = $ReallocAsyncCtx + 32 | 0; //@line 26307
    HEAP32[$83 >> 2] = $6; //@line 26308
    sp = STACKTOP; //@line 26309
    STACKTOP = sp; //@line 26310
    return;
   }
   $55 = $50 + 1 << 24 >> 24; //@line 26312
   HEAP8[$49 >> 0] = $55; //@line 26313
   if ($55 & 1) {
    $59 = $4 + 1097 | 0; //@line 26318
    HEAP8[$59 >> 0] = __ZN7LoRaPHY26get_next_lower_tx_datarateEa(HEAP32[$4 >> 2] | 0, HEAP8[$59 >> 0] | 0) | 0; //@line 26321
   }
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(36) | 0; //@line 26323
   $62 = __ZN7LoRaMac11schedule_txEv($4) | 0; //@line 26324
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 374; //@line 26327
    $63 = $ReallocAsyncCtx7 + 4 | 0; //@line 26328
    HEAP32[$63 >> 2] = $2; //@line 26329
    $64 = $ReallocAsyncCtx7 + 8 | 0; //@line 26330
    HEAP32[$64 >> 2] = $4; //@line 26331
    $65 = $ReallocAsyncCtx7 + 12 | 0; //@line 26332
    HEAP32[$65 >> 2] = $6; //@line 26333
    $66 = $ReallocAsyncCtx7 + 16 | 0; //@line 26334
    HEAP32[$66 >> 2] = $8; //@line 26335
    $67 = $ReallocAsyncCtx7 + 20 | 0; //@line 26336
    HEAP32[$67 >> 2] = $16; //@line 26337
    $68 = $ReallocAsyncCtx7 + 24 | 0; //@line 26338
    HEAP32[$68 >> 2] = $49; //@line 26339
    $69 = $ReallocAsyncCtx7 + 28 | 0; //@line 26340
    HEAP32[$69 >> 2] = $12; //@line 26341
    $70 = $ReallocAsyncCtx7 + 32 | 0; //@line 26342
    HEAP32[$70 >> 2] = $14; //@line 26343
    sp = STACKTOP; //@line 26344
    STACKTOP = sp; //@line 26345
    return;
   }
   HEAP32[___async_retval >> 2] = $62; //@line 26348
   ___async_unwind = 0; //@line 26349
   HEAP32[$ReallocAsyncCtx7 >> 2] = 374; //@line 26350
   $63 = $ReallocAsyncCtx7 + 4 | 0; //@line 26351
   HEAP32[$63 >> 2] = $2; //@line 26352
   $64 = $ReallocAsyncCtx7 + 8 | 0; //@line 26353
   HEAP32[$64 >> 2] = $4; //@line 26354
   $65 = $ReallocAsyncCtx7 + 12 | 0; //@line 26355
   HEAP32[$65 >> 2] = $6; //@line 26356
   $66 = $ReallocAsyncCtx7 + 16 | 0; //@line 26357
   HEAP32[$66 >> 2] = $8; //@line 26358
   $67 = $ReallocAsyncCtx7 + 20 | 0; //@line 26359
   HEAP32[$67 >> 2] = $16; //@line 26360
   $68 = $ReallocAsyncCtx7 + 24 | 0; //@line 26361
   HEAP32[$68 >> 2] = $49; //@line 26362
   $69 = $ReallocAsyncCtx7 + 28 | 0; //@line 26363
   HEAP32[$69 >> 2] = $12; //@line 26364
   $70 = $ReallocAsyncCtx7 + 32 | 0; //@line 26365
   HEAP32[$70 >> 2] = $14; //@line 26366
   sp = STACKTOP; //@line 26367
   STACKTOP = sp; //@line 26368
   return;
  }
 }
 $84 = HEAP32[$8 >> 2] | 0; //@line 26371
 $87 = $84 & -3; //@line 26374
 if (!($84 & 2)) {
  $89 = $84; //@line 26376
 } else {
  HEAP32[$8 >> 2] = $87; //@line 26378
  $89 = $87; //@line 26379
 }
 if ($89 | 0) {
  $140 = HEAP32[$12 >> 2] | 0; //@line 26383
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(16) | 0; //@line 26384
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($140, $14, 1e3); //@line 26385
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 380; //@line 26388
   $141 = $ReallocAsyncCtx6 + 4 | 0; //@line 26389
   HEAP32[$141 >> 2] = $2; //@line 26390
   $142 = $ReallocAsyncCtx6 + 8 | 0; //@line 26391
   HEAP32[$142 >> 2] = $4; //@line 26392
   $143 = $ReallocAsyncCtx6 + 12 | 0; //@line 26393
   HEAP32[$143 >> 2] = $6; //@line 26394
   sp = STACKTOP; //@line 26395
   STACKTOP = sp; //@line 26396
   return;
  }
  ___async_unwind = 0; //@line 26398
  HEAP32[$ReallocAsyncCtx6 >> 2] = 380; //@line 26399
  $141 = $ReallocAsyncCtx6 + 4 | 0; //@line 26400
  HEAP32[$141 >> 2] = $2; //@line 26401
  $142 = $ReallocAsyncCtx6 + 8 | 0; //@line 26402
  HEAP32[$142 >> 2] = $4; //@line 26403
  $143 = $ReallocAsyncCtx6 + 12 | 0; //@line 26404
  HEAP32[$143 >> 2] = $6; //@line 26405
  sp = STACKTOP; //@line 26406
  STACKTOP = sp; //@line 26407
  return;
 }
 $90 = HEAP8[$2 >> 0] | 0; //@line 26409
 if ($90 & 1) {
  HEAP8[$2 >> 0] = $90 & -2; //@line 26414
  $95 = HEAP32[$4 + 1324 >> 2] | 0; //@line 26416
  $97 = __ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0; //@line 26418
  $98 = $95 + 12 | 0; //@line 26419
  $99 = HEAP32[$98 >> 2] | 0; //@line 26420
  if (!$99) {
   $ReallocAsyncCtx16 = _emscripten_realloc_async_context(28) | 0; //@line 26423
   _mbed_assert_internal(13874, 13879, 1102); //@line 26424
   if (___async) {
    HEAP32[$ReallocAsyncCtx16 >> 2] = 376; //@line 26427
    $101 = $ReallocAsyncCtx16 + 4 | 0; //@line 26428
    HEAP32[$101 >> 2] = $2; //@line 26429
    $102 = $ReallocAsyncCtx16 + 8 | 0; //@line 26430
    HEAP32[$102 >> 2] = $4; //@line 26431
    $103 = $ReallocAsyncCtx16 + 12 | 0; //@line 26432
    HEAP32[$103 >> 2] = $6; //@line 26433
    $104 = $ReallocAsyncCtx16 + 16 | 0; //@line 26434
    HEAP32[$104 >> 2] = $98; //@line 26435
    $105 = $ReallocAsyncCtx16 + 20 | 0; //@line 26436
    HEAP32[$105 >> 2] = $95; //@line 26437
    $106 = $ReallocAsyncCtx16 + 24 | 0; //@line 26438
    HEAP32[$106 >> 2] = $97; //@line 26439
    sp = STACKTOP; //@line 26440
    STACKTOP = sp; //@line 26441
    return;
   }
   ___async_unwind = 0; //@line 26443
   HEAP32[$ReallocAsyncCtx16 >> 2] = 376; //@line 26444
   $101 = $ReallocAsyncCtx16 + 4 | 0; //@line 26445
   HEAP32[$101 >> 2] = $2; //@line 26446
   $102 = $ReallocAsyncCtx16 + 8 | 0; //@line 26447
   HEAP32[$102 >> 2] = $4; //@line 26448
   $103 = $ReallocAsyncCtx16 + 12 | 0; //@line 26449
   HEAP32[$103 >> 2] = $6; //@line 26450
   $104 = $ReallocAsyncCtx16 + 16 | 0; //@line 26451
   HEAP32[$104 >> 2] = $98; //@line 26452
   $105 = $ReallocAsyncCtx16 + 20 | 0; //@line 26453
   HEAP32[$105 >> 2] = $95; //@line 26454
   $106 = $ReallocAsyncCtx16 + 24 | 0; //@line 26455
   HEAP32[$106 >> 2] = $97; //@line 26456
   sp = STACKTOP; //@line 26457
   STACKTOP = sp; //@line 26458
   return;
  } else {
   $107 = HEAP32[$99 >> 2] | 0; //@line 26460
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 26461
   FUNCTION_TABLE_vii[$107 & 31]($95, $97); //@line 26462
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 377; //@line 26465
    $108 = $ReallocAsyncCtx2 + 4 | 0; //@line 26466
    HEAP32[$108 >> 2] = $2; //@line 26467
    $109 = $ReallocAsyncCtx2 + 8 | 0; //@line 26468
    HEAP32[$109 >> 2] = $4; //@line 26469
    $110 = $ReallocAsyncCtx2 + 12 | 0; //@line 26470
    HEAP32[$110 >> 2] = $6; //@line 26471
    sp = STACKTOP; //@line 26472
    STACKTOP = sp; //@line 26473
    return;
   }
   ___async_unwind = 0; //@line 26475
   HEAP32[$ReallocAsyncCtx2 >> 2] = 377; //@line 26476
   $108 = $ReallocAsyncCtx2 + 4 | 0; //@line 26477
   HEAP32[$108 >> 2] = $2; //@line 26478
   $109 = $ReallocAsyncCtx2 + 8 | 0; //@line 26479
   HEAP32[$109 >> 2] = $4; //@line 26480
   $110 = $ReallocAsyncCtx2 + 12 | 0; //@line 26481
   HEAP32[$110 >> 2] = $6; //@line 26482
   sp = STACKTOP; //@line 26483
   STACKTOP = sp; //@line 26484
   return;
  }
 }
 if ($90 & 8) {
  HEAP8[$2 >> 0] = $90 & -9; //@line 26491
  $115 = HEAP32[$4 + 1324 >> 2] | 0; //@line 26493
  $116 = $115 + 32 | 0; //@line 26494
  $118 = __ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0; //@line 26496
  $119 = $115 + 44 | 0; //@line 26497
  $120 = HEAP32[$119 >> 2] | 0; //@line 26498
  if (!$120) {
   $ReallocAsyncCtx15 = _emscripten_realloc_async_context(28) | 0; //@line 26501
   _mbed_assert_internal(13874, 13879, 1102); //@line 26502
   if (___async) {
    HEAP32[$ReallocAsyncCtx15 >> 2] = 378; //@line 26505
    $122 = $ReallocAsyncCtx15 + 4 | 0; //@line 26506
    HEAP32[$122 >> 2] = $2; //@line 26507
    $123 = $ReallocAsyncCtx15 + 8 | 0; //@line 26508
    HEAP32[$123 >> 2] = $4; //@line 26509
    $124 = $ReallocAsyncCtx15 + 12 | 0; //@line 26510
    HEAP32[$124 >> 2] = $6; //@line 26511
    $125 = $ReallocAsyncCtx15 + 16 | 0; //@line 26512
    HEAP32[$125 >> 2] = $116; //@line 26513
    $126 = $ReallocAsyncCtx15 + 20 | 0; //@line 26514
    HEAP32[$126 >> 2] = $118; //@line 26515
    $127 = $ReallocAsyncCtx15 + 24 | 0; //@line 26516
    HEAP32[$127 >> 2] = $119; //@line 26517
    sp = STACKTOP; //@line 26518
    STACKTOP = sp; //@line 26519
    return;
   }
   ___async_unwind = 0; //@line 26521
   HEAP32[$ReallocAsyncCtx15 >> 2] = 378; //@line 26522
   $122 = $ReallocAsyncCtx15 + 4 | 0; //@line 26523
   HEAP32[$122 >> 2] = $2; //@line 26524
   $123 = $ReallocAsyncCtx15 + 8 | 0; //@line 26525
   HEAP32[$123 >> 2] = $4; //@line 26526
   $124 = $ReallocAsyncCtx15 + 12 | 0; //@line 26527
   HEAP32[$124 >> 2] = $6; //@line 26528
   $125 = $ReallocAsyncCtx15 + 16 | 0; //@line 26529
   HEAP32[$125 >> 2] = $116; //@line 26530
   $126 = $ReallocAsyncCtx15 + 20 | 0; //@line 26531
   HEAP32[$126 >> 2] = $118; //@line 26532
   $127 = $ReallocAsyncCtx15 + 24 | 0; //@line 26533
   HEAP32[$127 >> 2] = $119; //@line 26534
   sp = STACKTOP; //@line 26535
   STACKTOP = sp; //@line 26536
   return;
  } else {
   $128 = HEAP32[$120 >> 2] | 0; //@line 26538
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 26539
   FUNCTION_TABLE_vii[$128 & 31]($116, $118); //@line 26540
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 379; //@line 26543
    $129 = $ReallocAsyncCtx3 + 4 | 0; //@line 26544
    HEAP32[$129 >> 2] = $2; //@line 26545
    $130 = $ReallocAsyncCtx3 + 8 | 0; //@line 26546
    HEAP32[$130 >> 2] = $4; //@line 26547
    $131 = $ReallocAsyncCtx3 + 12 | 0; //@line 26548
    HEAP32[$131 >> 2] = $6; //@line 26549
    sp = STACKTOP; //@line 26550
    STACKTOP = sp; //@line 26551
    return;
   }
   ___async_unwind = 0; //@line 26553
   HEAP32[$ReallocAsyncCtx3 >> 2] = 379; //@line 26554
   $129 = $ReallocAsyncCtx3 + 4 | 0; //@line 26555
   HEAP32[$129 >> 2] = $2; //@line 26556
   $130 = $ReallocAsyncCtx3 + 8 | 0; //@line 26557
   HEAP32[$130 >> 2] = $4; //@line 26558
   $131 = $ReallocAsyncCtx3 + 12 | 0; //@line 26559
   HEAP32[$131 >> 2] = $6; //@line 26560
   sp = STACKTOP; //@line 26561
   STACKTOP = sp; //@line 26562
   return;
  }
 }
 if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($4 + 4 | 0) | 0) {
  HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0) >> 2] = 4; //@line 26570
  $137 = HEAP8[$2 >> 0] | 16; //@line 26572
  HEAP8[$2 >> 0] = $137; //@line 26573
  $139 = $137; //@line 26574
 } else {
  $139 = HEAP8[$2 >> 0] | 0; //@line 26577
 }
 $138 = $139 & -33; //@line 26579
 HEAP8[$2 >> 0] = $138; //@line 26580
 do {
  if (!($138 & 2)) {
   $177 = $138; //@line 26585
  } else {
   $146 = $138 & -3; //@line 26587
   HEAP8[$2 >> 0] = $146; //@line 26588
   if ((HEAP32[$4 + 360 >> 2] | 0) == 2) {
    $151 = HEAP32[$4 + 1328 >> 2] | 0; //@line 26594
    HEAP32[$6 >> 2] = 273; //@line 26595
    HEAP32[$6 + 4 >> 2] = 0; //@line 26597
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 26598
    HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 26599
    HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 26599
    $152 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($151, $4, $$byval_copy) | 0; //@line 26600
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 381; //@line 26603
     $153 = $ReallocAsyncCtx8 + 4 | 0; //@line 26604
     HEAP32[$153 >> 2] = $2; //@line 26605
     $154 = $ReallocAsyncCtx8 + 8 | 0; //@line 26606
     HEAP32[$154 >> 2] = $4; //@line 26607
     $155 = $ReallocAsyncCtx8 + 12 | 0; //@line 26608
     HEAP32[$155 >> 2] = $6; //@line 26609
     sp = STACKTOP; //@line 26610
     STACKTOP = sp; //@line 26611
     return;
    }
    HEAP32[___async_retval >> 2] = $152; //@line 26614
    ___async_unwind = 0; //@line 26615
    HEAP32[$ReallocAsyncCtx8 >> 2] = 381; //@line 26616
    $153 = $ReallocAsyncCtx8 + 4 | 0; //@line 26617
    HEAP32[$153 >> 2] = $2; //@line 26618
    $154 = $ReallocAsyncCtx8 + 8 | 0; //@line 26619
    HEAP32[$154 >> 2] = $4; //@line 26620
    $155 = $ReallocAsyncCtx8 + 12 | 0; //@line 26621
    HEAP32[$155 >> 2] = $6; //@line 26622
    sp = STACKTOP; //@line 26623
    STACKTOP = sp; //@line 26624
    return;
   }
   if ($146 & 4) {
    $175 = $146 & -5; //@line 26629
    HEAP8[$2 >> 0] = $175; //@line 26630
    $177 = $175; //@line 26631
    break;
   }
   $160 = HEAP32[$4 + 1324 >> 2] | 0; //@line 26635
   $161 = $160 + 16 | 0; //@line 26636
   $163 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 26638
   $164 = $160 + 28 | 0; //@line 26639
   $165 = HEAP32[$164 >> 2] | 0; //@line 26640
   if (!$165) {
    $ReallocAsyncCtx13 = _emscripten_realloc_async_context(24) | 0; //@line 26643
    _mbed_assert_internal(13874, 13879, 1102); //@line 26644
    if (___async) {
     HEAP32[$ReallocAsyncCtx13 >> 2] = 383; //@line 26647
     $167 = $ReallocAsyncCtx13 + 4 | 0; //@line 26648
     HEAP32[$167 >> 2] = $164; //@line 26649
     $168 = $ReallocAsyncCtx13 + 8 | 0; //@line 26650
     HEAP32[$168 >> 2] = $161; //@line 26651
     $169 = $ReallocAsyncCtx13 + 12 | 0; //@line 26652
     HEAP32[$169 >> 2] = $163; //@line 26653
     $170 = $ReallocAsyncCtx13 + 16 | 0; //@line 26654
     HEAP32[$170 >> 2] = $2; //@line 26655
     $171 = $ReallocAsyncCtx13 + 20 | 0; //@line 26656
     HEAP32[$171 >> 2] = $4; //@line 26657
     sp = STACKTOP; //@line 26658
     STACKTOP = sp; //@line 26659
     return;
    }
    ___async_unwind = 0; //@line 26661
    HEAP32[$ReallocAsyncCtx13 >> 2] = 383; //@line 26662
    $167 = $ReallocAsyncCtx13 + 4 | 0; //@line 26663
    HEAP32[$167 >> 2] = $164; //@line 26664
    $168 = $ReallocAsyncCtx13 + 8 | 0; //@line 26665
    HEAP32[$168 >> 2] = $161; //@line 26666
    $169 = $ReallocAsyncCtx13 + 12 | 0; //@line 26667
    HEAP32[$169 >> 2] = $163; //@line 26668
    $170 = $ReallocAsyncCtx13 + 16 | 0; //@line 26669
    HEAP32[$170 >> 2] = $2; //@line 26670
    $171 = $ReallocAsyncCtx13 + 20 | 0; //@line 26671
    HEAP32[$171 >> 2] = $4; //@line 26672
    sp = STACKTOP; //@line 26673
    STACKTOP = sp; //@line 26674
    return;
   } else {
    $172 = HEAP32[$165 >> 2] | 0; //@line 26676
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 26677
    FUNCTION_TABLE_vii[$172 & 31]($161, $163); //@line 26678
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 384; //@line 26681
     $173 = $ReallocAsyncCtx4 + 4 | 0; //@line 26682
     HEAP32[$173 >> 2] = $2; //@line 26683
     $174 = $ReallocAsyncCtx4 + 8 | 0; //@line 26684
     HEAP32[$174 >> 2] = $4; //@line 26685
     sp = STACKTOP; //@line 26686
     STACKTOP = sp; //@line 26687
     return;
    }
    ___async_unwind = 0; //@line 26689
    HEAP32[$ReallocAsyncCtx4 >> 2] = 384; //@line 26690
    $173 = $ReallocAsyncCtx4 + 4 | 0; //@line 26691
    HEAP32[$173 >> 2] = $2; //@line 26692
    $174 = $ReallocAsyncCtx4 + 8 | 0; //@line 26693
    HEAP32[$174 >> 2] = $4; //@line 26694
    sp = STACKTOP; //@line 26695
    STACKTOP = sp; //@line 26696
    return;
   }
  }
 } while (0);
 if (!($177 & 16)) {
  STACKTOP = sp; //@line 26703
  return;
 }
 HEAP8[$2 >> 0] = $177 & -17; //@line 26706
 $181 = HEAP32[$4 + 1324 >> 2] | 0; //@line 26708
 $182 = $181 + 48 | 0; //@line 26709
 $184 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 26711
 $185 = $181 + 60 | 0; //@line 26712
 $186 = HEAP32[$185 >> 2] | 0; //@line 26713
 if (!$186) {
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(16) | 0; //@line 26716
  _mbed_assert_internal(13874, 13879, 1102); //@line 26717
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 385; //@line 26720
   $188 = $ReallocAsyncCtx12 + 4 | 0; //@line 26721
   HEAP32[$188 >> 2] = $185; //@line 26722
   $189 = $ReallocAsyncCtx12 + 8 | 0; //@line 26723
   HEAP32[$189 >> 2] = $182; //@line 26724
   $190 = $ReallocAsyncCtx12 + 12 | 0; //@line 26725
   HEAP32[$190 >> 2] = $184; //@line 26726
   sp = STACKTOP; //@line 26727
   STACKTOP = sp; //@line 26728
   return;
  }
  ___async_unwind = 0; //@line 26730
  HEAP32[$ReallocAsyncCtx12 >> 2] = 385; //@line 26731
  $188 = $ReallocAsyncCtx12 + 4 | 0; //@line 26732
  HEAP32[$188 >> 2] = $185; //@line 26733
  $189 = $ReallocAsyncCtx12 + 8 | 0; //@line 26734
  HEAP32[$189 >> 2] = $182; //@line 26735
  $190 = $ReallocAsyncCtx12 + 12 | 0; //@line 26736
  HEAP32[$190 >> 2] = $184; //@line 26737
  sp = STACKTOP; //@line 26738
  STACKTOP = sp; //@line 26739
  return;
 } else {
  $191 = HEAP32[$186 >> 2] | 0; //@line 26741
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 26742
  FUNCTION_TABLE_vii[$191 & 31]($182, $184); //@line 26743
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 386; //@line 26746
   sp = STACKTOP; //@line 26747
   STACKTOP = sp; //@line 26748
   return;
  }
  ___async_unwind = 0; //@line 26750
  HEAP32[$ReallocAsyncCtx5 >> 2] = 386; //@line 26751
  sp = STACKTOP; //@line 26752
  STACKTOP = sp; //@line 26753
  return;
 }
}
function __ZN7LoRaMac22get_phy_event_handlersEv($0) {
 $0 = $0 | 0;
 var $$pre = 0, $$pre$i$i = 0, $$pre$i$i21 = 0, $$pre$i$i34 = 0, $$pre$i$i50 = 0, $$pre$i$i66 = 0, $$pre119 = 0, $$pre120 = 0, $$pre121 = 0, $$pre122 = 0, $1 = 0, $102 = 0, $103 = 0, $114 = 0, $115 = 0, $121 = 0, $122 = 0, $124 = 0, $125 = 0, $128 = 0, $138 = 0, $139 = 0, $149 = 0, $150 = 0, $155 = 0, $156 = 0, $158 = 0, $159 = 0, $162 = 0, $170 = 0, $171 = 0, $179 = 0, $180 = 0, $2 = 0, $21 = 0, $22 = 0, $3 = 0, $35 = 0, $36 = 0, $44 = 0, $45 = 0, $47 = 0, $48 = 0, $5 = 0, $51 = 0, $6 = 0, $63 = 0, $64 = 0, $76 = 0, $77 = 0, $84 = 0, $85 = 0, $87 = 0, $88 = 0, $9 = 0, $91 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx23 = 0, $AsyncCtx26 = 0, $AsyncCtx29 = 0, $AsyncCtx32 = 0, $AsyncCtx35 = 0, $AsyncCtx38 = 0, $AsyncCtx41 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 15900
 STACKTOP = STACKTOP + 16 | 0; //@line 15901
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15901
 $1 = sp; //@line 15902
 $2 = $1 + 12 | 0; //@line 15903
 HEAP32[$1 >> 2] = 463; //@line 15904
 HEAP32[$1 + 4 >> 2] = 0; //@line 15906
 HEAP32[$1 + 8 >> 2] = $0; //@line 15908
 HEAP32[$2 >> 2] = 836; //@line 15909
 $3 = $0 + 1212 | 0; //@line 15910
 do {
  if (($3 | 0) == ($1 | 0)) {
   $35 = 836; //@line 15914
   label = 10; //@line 15915
  } else {
   $5 = $0 + 1224 | 0; //@line 15917
   $6 = HEAP32[$5 >> 2] | 0; //@line 15918
   if (!$6) {
    $21 = 836; //@line 15921
   } else {
    $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 15924
    $AsyncCtx = _emscripten_alloc_async_context(40, sp) | 0; //@line 15925
    FUNCTION_TABLE_vi[$9 & 1023]($3); //@line 15926
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 464; //@line 15929
     HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 15931
     HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 15933
     HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 15935
     HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 15937
     HEAP32[$AsyncCtx + 20 >> 2] = $5; //@line 15939
     HEAP32[$AsyncCtx + 24 >> 2] = $1; //@line 15941
     HEAP32[$AsyncCtx + 28 >> 2] = $2; //@line 15943
     HEAP32[$AsyncCtx + 32 >> 2] = $1; //@line 15945
     HEAP32[$AsyncCtx + 36 >> 2] = $1; //@line 15947
     sp = STACKTOP; //@line 15948
     STACKTOP = sp; //@line 15949
     return 0; //@line 15949
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 15951
    $$pre = HEAP32[$2 >> 2] | 0; //@line 15952
    if (!$$pre) {
     HEAP32[$5 >> 2] = 0; //@line 15955
     break;
    } else {
     $21 = $$pre; //@line 15958
    }
   }
   $22 = HEAP32[$21 + 4 >> 2] | 0; //@line 15962
   $AsyncCtx2 = _emscripten_alloc_async_context(40, sp) | 0; //@line 15963
   FUNCTION_TABLE_vii[$22 & 31]($3, $1); //@line 15964
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 465; //@line 15967
    HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 15969
    HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 15971
    HEAP32[$AsyncCtx2 + 12 >> 2] = $1; //@line 15973
    HEAP32[$AsyncCtx2 + 16 >> 2] = $1; //@line 15975
    HEAP32[$AsyncCtx2 + 20 >> 2] = $3; //@line 15977
    HEAP32[$AsyncCtx2 + 24 >> 2] = $1; //@line 15979
    HEAP32[$AsyncCtx2 + 28 >> 2] = $2; //@line 15981
    HEAP32[$AsyncCtx2 + 32 >> 2] = $5; //@line 15983
    HEAP32[$AsyncCtx2 + 36 >> 2] = $1; //@line 15985
    sp = STACKTOP; //@line 15986
    STACKTOP = sp; //@line 15987
    return 0; //@line 15987
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 15989
    $$pre$i$i = HEAP32[$2 >> 2] | 0; //@line 15990
    HEAP32[$5 >> 2] = $$pre$i$i; //@line 15992
    if (!$$pre$i$i) {
     break;
    } else {
     $35 = $$pre$i$i; //@line 15997
     label = 10; //@line 15998
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 10) {
   $36 = HEAP32[$35 + 8 >> 2] | 0; //@line 16007
   $AsyncCtx5 = _emscripten_alloc_async_context(32, sp) | 0; //@line 16008
   FUNCTION_TABLE_vi[$36 & 1023]($1); //@line 16009
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 466; //@line 16012
    HEAP32[$AsyncCtx5 + 4 >> 2] = $0; //@line 16014
    HEAP32[$AsyncCtx5 + 8 >> 2] = $1; //@line 16016
    HEAP32[$AsyncCtx5 + 12 >> 2] = $1; //@line 16018
    HEAP32[$AsyncCtx5 + 16 >> 2] = $1; //@line 16020
    HEAP32[$AsyncCtx5 + 20 >> 2] = $3; //@line 16022
    HEAP32[$AsyncCtx5 + 24 >> 2] = $1; //@line 16024
    HEAP32[$AsyncCtx5 + 28 >> 2] = $1; //@line 16026
    sp = STACKTOP; //@line 16027
    STACKTOP = sp; //@line 16028
    return 0; //@line 16028
   } else {
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 16030
    break;
   }
  }
 } while (0);
 $44 = $1 + 12 | 0; //@line 16035
 HEAP32[$1 >> 2] = 7; //@line 16036
 HEAP32[$1 + 4 >> 2] = 0; //@line 16038
 HEAP32[$1 + 8 >> 2] = $0; //@line 16040
 HEAP32[$44 >> 2] = 848; //@line 16041
 $45 = $0 + 1244 | 0; //@line 16042
 do {
  if (($45 | 0) == ($1 | 0)) {
   $76 = 848; //@line 16046
   label = 22; //@line 16047
  } else {
   $47 = $0 + 1256 | 0; //@line 16049
   $48 = HEAP32[$47 >> 2] | 0; //@line 16050
   if (!$48) {
    $63 = 848; //@line 16053
   } else {
    $51 = HEAP32[$48 + 8 >> 2] | 0; //@line 16056
    $AsyncCtx8 = _emscripten_alloc_async_context(40, sp) | 0; //@line 16057
    FUNCTION_TABLE_vi[$51 & 1023]($45); //@line 16058
    if (___async) {
     HEAP32[$AsyncCtx8 >> 2] = 467; //@line 16061
     HEAP32[$AsyncCtx8 + 4 >> 2] = $45; //@line 16063
     HEAP32[$AsyncCtx8 + 8 >> 2] = $1; //@line 16065
     HEAP32[$AsyncCtx8 + 12 >> 2] = $47; //@line 16067
     HEAP32[$AsyncCtx8 + 16 >> 2] = $0; //@line 16069
     HEAP32[$AsyncCtx8 + 20 >> 2] = $1; //@line 16071
     HEAP32[$AsyncCtx8 + 24 >> 2] = $44; //@line 16073
     HEAP32[$AsyncCtx8 + 28 >> 2] = $3; //@line 16075
     HEAP32[$AsyncCtx8 + 32 >> 2] = $1; //@line 16077
     HEAP32[$AsyncCtx8 + 36 >> 2] = $1; //@line 16079
     sp = STACKTOP; //@line 16080
     STACKTOP = sp; //@line 16081
     return 0; //@line 16081
    }
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 16083
    $$pre119 = HEAP32[$44 >> 2] | 0; //@line 16084
    if (!$$pre119) {
     HEAP32[$47 >> 2] = 0; //@line 16087
     break;
    } else {
     $63 = $$pre119; //@line 16090
    }
   }
   $64 = HEAP32[$63 + 4 >> 2] | 0; //@line 16094
   $AsyncCtx11 = _emscripten_alloc_async_context(36, sp) | 0; //@line 16095
   FUNCTION_TABLE_vii[$64 & 31]($45, $1); //@line 16096
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 468; //@line 16099
    HEAP32[$AsyncCtx11 + 4 >> 2] = $1; //@line 16101
    HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 16103
    HEAP32[$AsyncCtx11 + 12 >> 2] = $1; //@line 16105
    HEAP32[$AsyncCtx11 + 16 >> 2] = $3; //@line 16107
    HEAP32[$AsyncCtx11 + 20 >> 2] = $1; //@line 16109
    HEAP32[$AsyncCtx11 + 24 >> 2] = $44; //@line 16111
    HEAP32[$AsyncCtx11 + 28 >> 2] = $47; //@line 16113
    HEAP32[$AsyncCtx11 + 32 >> 2] = $1; //@line 16115
    sp = STACKTOP; //@line 16116
    STACKTOP = sp; //@line 16117
    return 0; //@line 16117
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 16119
    $$pre$i$i21 = HEAP32[$44 >> 2] | 0; //@line 16120
    HEAP32[$47 >> 2] = $$pre$i$i21; //@line 16122
    if (!$$pre$i$i21) {
     break;
    } else {
     $76 = $$pre$i$i21; //@line 16127
     label = 22; //@line 16128
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 22) {
   $77 = HEAP32[$76 + 8 >> 2] | 0; //@line 16137
   $AsyncCtx14 = _emscripten_alloc_async_context(28, sp) | 0; //@line 16138
   FUNCTION_TABLE_vi[$77 & 1023]($1); //@line 16139
   if (___async) {
    HEAP32[$AsyncCtx14 >> 2] = 469; //@line 16142
    HEAP32[$AsyncCtx14 + 4 >> 2] = $0; //@line 16144
    HEAP32[$AsyncCtx14 + 8 >> 2] = $1; //@line 16146
    HEAP32[$AsyncCtx14 + 12 >> 2] = $1; //@line 16148
    HEAP32[$AsyncCtx14 + 16 >> 2] = $3; //@line 16150
    HEAP32[$AsyncCtx14 + 20 >> 2] = $1; //@line 16152
    HEAP32[$AsyncCtx14 + 24 >> 2] = $1; //@line 16154
    sp = STACKTOP; //@line 16155
    STACKTOP = sp; //@line 16156
    return 0; //@line 16156
   } else {
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 16158
    break;
   }
  }
 } while (0);
 $84 = $1 + 12 | 0; //@line 16163
 HEAP32[$1 >> 2] = 470; //@line 16164
 HEAP32[$1 + 4 >> 2] = 0; //@line 16166
 HEAP32[$1 + 8 >> 2] = $0; //@line 16168
 HEAP32[$84 >> 2] = 836; //@line 16169
 $85 = $0 + 1276 | 0; //@line 16170
 do {
  if (($85 | 0) == ($1 | 0)) {
   $114 = 836; //@line 16174
   label = 34; //@line 16175
  } else {
   $87 = $0 + 1288 | 0; //@line 16177
   $88 = HEAP32[$87 >> 2] | 0; //@line 16178
   if (!$88) {
    $102 = 836; //@line 16181
   } else {
    $91 = HEAP32[$88 + 8 >> 2] | 0; //@line 16184
    $AsyncCtx17 = _emscripten_alloc_async_context(36, sp) | 0; //@line 16185
    FUNCTION_TABLE_vi[$91 & 1023]($85); //@line 16186
    if (___async) {
     HEAP32[$AsyncCtx17 >> 2] = 471; //@line 16189
     HEAP32[$AsyncCtx17 + 4 >> 2] = $84; //@line 16191
     HEAP32[$AsyncCtx17 + 8 >> 2] = $3; //@line 16193
     HEAP32[$AsyncCtx17 + 12 >> 2] = $1; //@line 16195
     HEAP32[$AsyncCtx17 + 16 >> 2] = $0; //@line 16197
     HEAP32[$AsyncCtx17 + 20 >> 2] = $1; //@line 16199
     HEAP32[$AsyncCtx17 + 24 >> 2] = $87; //@line 16201
     HEAP32[$AsyncCtx17 + 28 >> 2] = $85; //@line 16203
     HEAP32[$AsyncCtx17 + 32 >> 2] = $1; //@line 16205
     sp = STACKTOP; //@line 16206
     STACKTOP = sp; //@line 16207
     return 0; //@line 16207
    }
    _emscripten_free_async_context($AsyncCtx17 | 0); //@line 16209
    $$pre120 = HEAP32[$84 >> 2] | 0; //@line 16210
    if (!$$pre120) {
     HEAP32[$87 >> 2] = 0; //@line 16213
     break;
    } else {
     $102 = $$pre120; //@line 16216
    }
   }
   $103 = HEAP32[$102 + 4 >> 2] | 0; //@line 16220
   $AsyncCtx20 = _emscripten_alloc_async_context(32, sp) | 0; //@line 16221
   FUNCTION_TABLE_vii[$103 & 31]($85, $1); //@line 16222
   if (___async) {
    HEAP32[$AsyncCtx20 >> 2] = 472; //@line 16225
    HEAP32[$AsyncCtx20 + 4 >> 2] = $3; //@line 16227
    HEAP32[$AsyncCtx20 + 8 >> 2] = $1; //@line 16229
    HEAP32[$AsyncCtx20 + 12 >> 2] = $0; //@line 16231
    HEAP32[$AsyncCtx20 + 16 >> 2] = $1; //@line 16233
    HEAP32[$AsyncCtx20 + 20 >> 2] = $84; //@line 16235
    HEAP32[$AsyncCtx20 + 24 >> 2] = $87; //@line 16237
    HEAP32[$AsyncCtx20 + 28 >> 2] = $1; //@line 16239
    sp = STACKTOP; //@line 16240
    STACKTOP = sp; //@line 16241
    return 0; //@line 16241
   } else {
    _emscripten_free_async_context($AsyncCtx20 | 0); //@line 16243
    $$pre$i$i34 = HEAP32[$84 >> 2] | 0; //@line 16244
    HEAP32[$87 >> 2] = $$pre$i$i34; //@line 16246
    if (!$$pre$i$i34) {
     break;
    } else {
     $114 = $$pre$i$i34; //@line 16251
     label = 34; //@line 16252
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 34) {
   $115 = HEAP32[$114 + 8 >> 2] | 0; //@line 16261
   $AsyncCtx23 = _emscripten_alloc_async_context(24, sp) | 0; //@line 16262
   FUNCTION_TABLE_vi[$115 & 1023]($1); //@line 16263
   if (___async) {
    HEAP32[$AsyncCtx23 >> 2] = 473; //@line 16266
    HEAP32[$AsyncCtx23 + 4 >> 2] = $3; //@line 16268
    HEAP32[$AsyncCtx23 + 8 >> 2] = $1; //@line 16270
    HEAP32[$AsyncCtx23 + 12 >> 2] = $0; //@line 16272
    HEAP32[$AsyncCtx23 + 16 >> 2] = $1; //@line 16274
    HEAP32[$AsyncCtx23 + 20 >> 2] = $1; //@line 16276
    sp = STACKTOP; //@line 16277
    STACKTOP = sp; //@line 16278
    return 0; //@line 16278
   } else {
    _emscripten_free_async_context($AsyncCtx23 | 0); //@line 16280
    break;
   }
  }
 } while (0);
 $121 = $1 + 12 | 0; //@line 16285
 HEAP32[$1 >> 2] = 474; //@line 16286
 HEAP32[$1 + 4 >> 2] = 0; //@line 16288
 HEAP32[$1 + 8 >> 2] = $0; //@line 16290
 HEAP32[$121 >> 2] = 836; //@line 16291
 $122 = $0 + 1228 | 0; //@line 16292
 do {
  if (($122 | 0) == ($1 | 0)) {
   $149 = 836; //@line 16296
   label = 46; //@line 16297
  } else {
   $124 = $0 + 1240 | 0; //@line 16299
   $125 = HEAP32[$124 >> 2] | 0; //@line 16300
   if (!$125) {
    $138 = 836; //@line 16303
   } else {
    $128 = HEAP32[$125 + 8 >> 2] | 0; //@line 16306
    $AsyncCtx26 = _emscripten_alloc_async_context(32, sp) | 0; //@line 16307
    FUNCTION_TABLE_vi[$128 & 1023]($122); //@line 16308
    if (___async) {
     HEAP32[$AsyncCtx26 >> 2] = 475; //@line 16311
     HEAP32[$AsyncCtx26 + 4 >> 2] = $3; //@line 16313
     HEAP32[$AsyncCtx26 + 8 >> 2] = $1; //@line 16315
     HEAP32[$AsyncCtx26 + 12 >> 2] = $124; //@line 16317
     HEAP32[$AsyncCtx26 + 16 >> 2] = $122; //@line 16319
     HEAP32[$AsyncCtx26 + 20 >> 2] = $121; //@line 16321
     HEAP32[$AsyncCtx26 + 24 >> 2] = $1; //@line 16323
     HEAP32[$AsyncCtx26 + 28 >> 2] = $0; //@line 16325
     sp = STACKTOP; //@line 16326
     STACKTOP = sp; //@line 16327
     return 0; //@line 16327
    }
    _emscripten_free_async_context($AsyncCtx26 | 0); //@line 16329
    $$pre121 = HEAP32[$121 >> 2] | 0; //@line 16330
    if (!$$pre121) {
     HEAP32[$124 >> 2] = 0; //@line 16333
     break;
    } else {
     $138 = $$pre121; //@line 16336
    }
   }
   $139 = HEAP32[$138 + 4 >> 2] | 0; //@line 16340
   $AsyncCtx29 = _emscripten_alloc_async_context(28, sp) | 0; //@line 16341
   FUNCTION_TABLE_vii[$139 & 31]($122, $1); //@line 16342
   if (___async) {
    HEAP32[$AsyncCtx29 >> 2] = 476; //@line 16345
    HEAP32[$AsyncCtx29 + 4 >> 2] = $3; //@line 16347
    HEAP32[$AsyncCtx29 + 8 >> 2] = $1; //@line 16349
    HEAP32[$AsyncCtx29 + 12 >> 2] = $121; //@line 16351
    HEAP32[$AsyncCtx29 + 16 >> 2] = $124; //@line 16353
    HEAP32[$AsyncCtx29 + 20 >> 2] = $1; //@line 16355
    HEAP32[$AsyncCtx29 + 24 >> 2] = $0; //@line 16357
    sp = STACKTOP; //@line 16358
    STACKTOP = sp; //@line 16359
    return 0; //@line 16359
   } else {
    _emscripten_free_async_context($AsyncCtx29 | 0); //@line 16361
    $$pre$i$i50 = HEAP32[$121 >> 2] | 0; //@line 16362
    HEAP32[$124 >> 2] = $$pre$i$i50; //@line 16364
    if (!$$pre$i$i50) {
     break;
    } else {
     $149 = $$pre$i$i50; //@line 16369
     label = 46; //@line 16370
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 46) {
   $150 = HEAP32[$149 + 8 >> 2] | 0; //@line 16379
   $AsyncCtx32 = _emscripten_alloc_async_context(20, sp) | 0; //@line 16380
   FUNCTION_TABLE_vi[$150 & 1023]($1); //@line 16381
   if (___async) {
    HEAP32[$AsyncCtx32 >> 2] = 477; //@line 16384
    HEAP32[$AsyncCtx32 + 4 >> 2] = $1; //@line 16386
    HEAP32[$AsyncCtx32 + 8 >> 2] = $1; //@line 16388
    HEAP32[$AsyncCtx32 + 12 >> 2] = $0; //@line 16390
    HEAP32[$AsyncCtx32 + 16 >> 2] = $3; //@line 16392
    sp = STACKTOP; //@line 16393
    STACKTOP = sp; //@line 16394
    return 0; //@line 16394
   } else {
    _emscripten_free_async_context($AsyncCtx32 | 0); //@line 16396
    break;
   }
  }
 } while (0);
 $155 = $1 + 12 | 0; //@line 16401
 HEAP32[$1 >> 2] = 478; //@line 16402
 HEAP32[$1 + 4 >> 2] = 0; //@line 16404
 HEAP32[$1 + 8 >> 2] = $0; //@line 16406
 HEAP32[$155 >> 2] = 836; //@line 16407
 $156 = $0 + 1260 | 0; //@line 16408
 if (($156 | 0) == ($1 | 0)) {
  $179 = 836; //@line 16411
 } else {
  $158 = $0 + 1272 | 0; //@line 16413
  $159 = HEAP32[$158 >> 2] | 0; //@line 16414
  if (!$159) {
   $170 = 836; //@line 16417
  } else {
   $162 = HEAP32[$159 + 8 >> 2] | 0; //@line 16420
   $AsyncCtx35 = _emscripten_alloc_async_context(24, sp) | 0; //@line 16421
   FUNCTION_TABLE_vi[$162 & 1023]($156); //@line 16422
   if (___async) {
    HEAP32[$AsyncCtx35 >> 2] = 479; //@line 16425
    HEAP32[$AsyncCtx35 + 4 >> 2] = $155; //@line 16427
    HEAP32[$AsyncCtx35 + 8 >> 2] = $158; //@line 16429
    HEAP32[$AsyncCtx35 + 12 >> 2] = $156; //@line 16431
    HEAP32[$AsyncCtx35 + 16 >> 2] = $1; //@line 16433
    HEAP32[$AsyncCtx35 + 20 >> 2] = $3; //@line 16435
    sp = STACKTOP; //@line 16436
    STACKTOP = sp; //@line 16437
    return 0; //@line 16437
   }
   _emscripten_free_async_context($AsyncCtx35 | 0); //@line 16439
   $$pre122 = HEAP32[$155 >> 2] | 0; //@line 16440
   if (!$$pre122) {
    HEAP32[$158 >> 2] = 0; //@line 16443
    STACKTOP = sp; //@line 16444
    return $3 | 0; //@line 16444
   } else {
    $170 = $$pre122; //@line 16446
   }
  }
  $171 = HEAP32[$170 + 4 >> 2] | 0; //@line 16450
  $AsyncCtx38 = _emscripten_alloc_async_context(20, sp) | 0; //@line 16451
  FUNCTION_TABLE_vii[$171 & 31]($156, $1); //@line 16452
  if (___async) {
   HEAP32[$AsyncCtx38 >> 2] = 480; //@line 16455
   HEAP32[$AsyncCtx38 + 4 >> 2] = $155; //@line 16457
   HEAP32[$AsyncCtx38 + 8 >> 2] = $158; //@line 16459
   HEAP32[$AsyncCtx38 + 12 >> 2] = $1; //@line 16461
   HEAP32[$AsyncCtx38 + 16 >> 2] = $3; //@line 16463
   sp = STACKTOP; //@line 16464
   STACKTOP = sp; //@line 16465
   return 0; //@line 16465
  }
  _emscripten_free_async_context($AsyncCtx38 | 0); //@line 16467
  $$pre$i$i66 = HEAP32[$155 >> 2] | 0; //@line 16468
  HEAP32[$158 >> 2] = $$pre$i$i66; //@line 16470
  if (!$$pre$i$i66) {
   STACKTOP = sp; //@line 16473
   return $3 | 0; //@line 16473
  } else {
   $179 = $$pre$i$i66; //@line 16475
  }
 }
 $180 = HEAP32[$179 + 8 >> 2] | 0; //@line 16479
 $AsyncCtx41 = _emscripten_alloc_async_context(12, sp) | 0; //@line 16480
 FUNCTION_TABLE_vi[$180 & 1023]($1); //@line 16481
 if (___async) {
  HEAP32[$AsyncCtx41 >> 2] = 481; //@line 16484
  HEAP32[$AsyncCtx41 + 4 >> 2] = $1; //@line 16486
  HEAP32[$AsyncCtx41 + 8 >> 2] = $3; //@line 16488
  sp = STACKTOP; //@line 16489
  STACKTOP = sp; //@line 16490
  return 0; //@line 16490
 }
 _emscripten_free_async_context($AsyncCtx41 | 0); //@line 16492
 STACKTOP = sp; //@line 16493
 return $3 | 0; //@line 16493
}
function _mbedtls_cipher_cmac_finish($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$013$i = 0, $$01720$i55 = 0, $$019$i = 0, $$019$i52 = 0, $$021$i54 = 0, $$09$i = 0, $$09$i41 = 0, $$09$i45 = 0, $$sink$sink$i = 0, $12 = 0, $129 = 0, $132 = 0, $145 = 0, $148 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $170 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $185 = 0, $19 = 0, $2 = 0, $20 = 0, $202 = 0, $206 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $64 = 0, $65 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, label = 0, sp = 0, $156$looptemp = 0;
 sp = STACKTOP; //@line 3152
 STACKTOP = STACKTOP + 80 | 0; //@line 3153
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80); //@line 3153
 $2 = sp + 56 | 0; //@line 3154
 $3 = sp + 4 | 0; //@line 3155
 $4 = sp + 40 | 0; //@line 3156
 $5 = sp + 24 | 0; //@line 3157
 $6 = sp + 8 | 0; //@line 3158
 $7 = sp; //@line 3159
 if (!$0) {
  $$0 = -24832; //@line 3162
  STACKTOP = sp; //@line 3163
  return $$0 | 0; //@line 3163
 }
 $9 = HEAP32[$0 >> 2] | 0; //@line 3165
 if (!$9) {
  $$0 = -24832; //@line 3168
  STACKTOP = sp; //@line 3169
  return $$0 | 0; //@line 3169
 }
 $12 = HEAP32[$0 + 64 >> 2] | 0; //@line 3172
 if (($1 | 0) == 0 | ($12 | 0) == 0) {
  $$0 = -24832; //@line 3177
  STACKTOP = sp; //@line 3178
  return $$0 | 0; //@line 3178
 }
 $16 = HEAP32[$9 + 24 >> 2] | 0; //@line 3181
 $17 = $4 + 1 | 0; //@line 3182
 HEAP8[$4 >> 0] = 0; //@line 3183
 $18 = $4 + 2 | 0; //@line 3184
 HEAP8[$17 >> 0] = 0; //@line 3185
 $19 = $4 + 3 | 0; //@line 3186
 HEAP8[$18 >> 0] = 0; //@line 3187
 $20 = $4 + 4 | 0; //@line 3188
 HEAP8[$19 >> 0] = 0; //@line 3189
 $21 = $4 + 5 | 0; //@line 3190
 HEAP8[$20 >> 0] = 0; //@line 3191
 $22 = $4 + 6 | 0; //@line 3192
 HEAP8[$21 >> 0] = 0; //@line 3193
 $23 = $4 + 7 | 0; //@line 3194
 HEAP8[$22 >> 0] = 0; //@line 3195
 $24 = $4 + 8 | 0; //@line 3196
 HEAP8[$23 >> 0] = 0; //@line 3197
 $25 = $4 + 9 | 0; //@line 3198
 HEAP8[$24 >> 0] = 0; //@line 3199
 $26 = $4 + 10 | 0; //@line 3200
 HEAP8[$25 >> 0] = 0; //@line 3201
 $27 = $4 + 11 | 0; //@line 3202
 HEAP8[$26 >> 0] = 0; //@line 3203
 $28 = $4 + 12 | 0; //@line 3204
 HEAP8[$27 >> 0] = 0; //@line 3205
 $29 = $4 + 13 | 0; //@line 3206
 HEAP8[$28 >> 0] = 0; //@line 3207
 $30 = $4 + 14 | 0; //@line 3208
 HEAP8[$29 >> 0] = 0; //@line 3209
 $31 = $4 + 15 | 0; //@line 3210
 HEAP8[$30 >> 0] = 0; //@line 3211
 HEAP8[$31 >> 0] = 0; //@line 3212
 $32 = $5 + 1 | 0; //@line 3213
 HEAP8[$5 >> 0] = 0; //@line 3214
 $33 = $5 + 2 | 0; //@line 3215
 HEAP8[$32 >> 0] = 0; //@line 3216
 $34 = $5 + 3 | 0; //@line 3217
 HEAP8[$33 >> 0] = 0; //@line 3218
 $35 = $5 + 4 | 0; //@line 3219
 HEAP8[$34 >> 0] = 0; //@line 3220
 $36 = $5 + 5 | 0; //@line 3221
 HEAP8[$35 >> 0] = 0; //@line 3222
 $37 = $5 + 6 | 0; //@line 3223
 HEAP8[$36 >> 0] = 0; //@line 3224
 $38 = $5 + 7 | 0; //@line 3225
 HEAP8[$37 >> 0] = 0; //@line 3226
 $39 = $5 + 8 | 0; //@line 3227
 HEAP8[$38 >> 0] = 0; //@line 3228
 $40 = $5 + 9 | 0; //@line 3229
 HEAP8[$39 >> 0] = 0; //@line 3230
 $41 = $5 + 10 | 0; //@line 3231
 HEAP8[$40 >> 0] = 0; //@line 3232
 $42 = $5 + 11 | 0; //@line 3233
 HEAP8[$41 >> 0] = 0; //@line 3234
 $43 = $5 + 12 | 0; //@line 3235
 HEAP8[$42 >> 0] = 0; //@line 3236
 $44 = $5 + 13 | 0; //@line 3237
 HEAP8[$43 >> 0] = 0; //@line 3238
 $45 = $5 + 14 | 0; //@line 3239
 HEAP8[$44 >> 0] = 0; //@line 3240
 $46 = $5 + 15 | 0; //@line 3241
 HEAP8[$45 >> 0] = 0; //@line 3242
 HEAP8[$46 >> 0] = 0; //@line 3243
 $47 = $2 + 1 | 0; //@line 3244
 HEAP8[$2 >> 0] = 0; //@line 3245
 $48 = $2 + 2 | 0; //@line 3246
 HEAP8[$47 >> 0] = 0; //@line 3247
 $49 = $2 + 3 | 0; //@line 3248
 HEAP8[$48 >> 0] = 0; //@line 3249
 $50 = $2 + 4 | 0; //@line 3250
 HEAP8[$49 >> 0] = 0; //@line 3251
 $51 = $2 + 5 | 0; //@line 3252
 HEAP8[$50 >> 0] = 0; //@line 3253
 $52 = $2 + 6 | 0; //@line 3254
 HEAP8[$51 >> 0] = 0; //@line 3255
 $53 = $2 + 7 | 0; //@line 3256
 HEAP8[$52 >> 0] = 0; //@line 3257
 $54 = $2 + 8 | 0; //@line 3258
 HEAP8[$53 >> 0] = 0; //@line 3259
 $55 = $2 + 9 | 0; //@line 3260
 HEAP8[$54 >> 0] = 0; //@line 3261
 $56 = $2 + 10 | 0; //@line 3262
 HEAP8[$55 >> 0] = 0; //@line 3263
 $57 = $2 + 11 | 0; //@line 3264
 HEAP8[$56 >> 0] = 0; //@line 3265
 $58 = $2 + 12 | 0; //@line 3266
 HEAP8[$57 >> 0] = 0; //@line 3267
 $59 = $2 + 13 | 0; //@line 3268
 HEAP8[$58 >> 0] = 0; //@line 3269
 $60 = $2 + 14 | 0; //@line 3270
 HEAP8[$59 >> 0] = 0; //@line 3271
 $61 = $2 + 15 | 0; //@line 3272
 HEAP8[$60 >> 0] = 0; //@line 3273
 HEAP8[$61 >> 0] = 0; //@line 3274
 $64 = HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] | 0; //@line 3277
 $AsyncCtx2 = _emscripten_alloc_async_context(252, sp) | 0; //@line 3278
 $65 = _mbedtls_cipher_update($0, $2, $64, $2, $3) | 0; //@line 3279
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 586; //@line 3282
  HEAP32[$AsyncCtx2 + 4 >> 2] = $2; //@line 3284
  HEAP32[$AsyncCtx2 + 8 >> 2] = $3; //@line 3286
  HEAP32[$AsyncCtx2 + 12 >> 2] = $7; //@line 3288
  HEAP32[$AsyncCtx2 + 16 >> 2] = $17; //@line 3290
  HEAP32[$AsyncCtx2 + 20 >> 2] = $20; //@line 3292
  HEAP32[$AsyncCtx2 + 24 >> 2] = $16; //@line 3294
  HEAP32[$AsyncCtx2 + 28 >> 2] = $26; //@line 3296
  HEAP32[$AsyncCtx2 + 32 >> 2] = $35; //@line 3298
  HEAP32[$AsyncCtx2 + 36 >> 2] = $0; //@line 3300
  HEAP32[$AsyncCtx2 + 40 >> 2] = $1; //@line 3302
  HEAP32[$AsyncCtx2 + 44 >> 2] = $41; //@line 3304
  HEAP32[$AsyncCtx2 + 48 >> 2] = $53; //@line 3306
  HEAP32[$AsyncCtx2 + 52 >> 2] = $29; //@line 3308
  HEAP32[$AsyncCtx2 + 56 >> 2] = $38; //@line 3310
  HEAP32[$AsyncCtx2 + 60 >> 2] = $58; //@line 3312
  HEAP32[$AsyncCtx2 + 64 >> 2] = $36; //@line 3314
  HEAP32[$AsyncCtx2 + 68 >> 2] = $39; //@line 3316
  HEAP32[$AsyncCtx2 + 72 >> 2] = $18; //@line 3318
  HEAP32[$AsyncCtx2 + 76 >> 2] = $21; //@line 3320
  HEAP32[$AsyncCtx2 + 80 >> 2] = $24; //@line 3322
  HEAP32[$AsyncCtx2 + 84 >> 2] = $42; //@line 3324
  HEAP32[$AsyncCtx2 + 88 >> 2] = $4; //@line 3326
  HEAP32[$AsyncCtx2 + 92 >> 2] = $56; //@line 3328
  HEAP32[$AsyncCtx2 + 96 >> 2] = $45; //@line 3330
  HEAP32[$AsyncCtx2 + 100 >> 2] = $49; //@line 3332
  HEAP32[$AsyncCtx2 + 104 >> 2] = $55; //@line 3334
  HEAP32[$AsyncCtx2 + 108 >> 2] = $25; //@line 3336
  HEAP32[$AsyncCtx2 + 112 >> 2] = $28; //@line 3338
  HEAP32[$AsyncCtx2 + 116 >> 2] = $7; //@line 3340
  HEAP32[$AsyncCtx2 + 120 >> 2] = $32; //@line 3342
  HEAP32[$AsyncCtx2 + 124 >> 2] = $59; //@line 3344
  HEAP32[$AsyncCtx2 + 128 >> 2] = $2; //@line 3346
  HEAP32[$AsyncCtx2 + 132 >> 2] = $52; //@line 3348
  HEAP32[$AsyncCtx2 + 136 >> 2] = $48; //@line 3350
  HEAP32[$AsyncCtx2 + 140 >> 2] = $51; //@line 3352
  HEAP32[$AsyncCtx2 + 144 >> 2] = $57; //@line 3354
  HEAP32[$AsyncCtx2 + 148 >> 2] = $54; //@line 3356
  HEAP32[$AsyncCtx2 + 152 >> 2] = $34; //@line 3358
  HEAP32[$AsyncCtx2 + 156 >> 2] = $40; //@line 3360
  HEAP32[$AsyncCtx2 + 160 >> 2] = $46; //@line 3362
  HEAP32[$AsyncCtx2 + 164 >> 2] = $60; //@line 3364
  HEAP32[$AsyncCtx2 + 168 >> 2] = $12; //@line 3366
  HEAP32[$AsyncCtx2 + 172 >> 2] = $31; //@line 3368
  HEAP32[$AsyncCtx2 + 176 >> 2] = $19; //@line 3370
  HEAP32[$AsyncCtx2 + 180 >> 2] = $22; //@line 3372
  HEAP32[$AsyncCtx2 + 184 >> 2] = $64; //@line 3374
  HEAP32[$AsyncCtx2 + 188 >> 2] = $6; //@line 3376
  HEAP32[$AsyncCtx2 + 192 >> 2] = $43; //@line 3378
  HEAP32[$AsyncCtx2 + 196 >> 2] = $4; //@line 3380
  HEAP32[$AsyncCtx2 + 200 >> 2] = $47; //@line 3382
  HEAP32[$AsyncCtx2 + 204 >> 2] = $27; //@line 3384
  HEAP32[$AsyncCtx2 + 208 >> 2] = $30; //@line 3386
  HEAP32[$AsyncCtx2 + 212 >> 2] = $33; //@line 3388
  HEAP32[$AsyncCtx2 + 216 >> 2] = $50; //@line 3390
  HEAP32[$AsyncCtx2 + 220 >> 2] = $12; //@line 3392
  HEAP32[$AsyncCtx2 + 224 >> 2] = $61; //@line 3394
  HEAP32[$AsyncCtx2 + 228 >> 2] = $5; //@line 3396
  HEAP32[$AsyncCtx2 + 232 >> 2] = $37; //@line 3398
  HEAP32[$AsyncCtx2 + 236 >> 2] = $6; //@line 3400
  HEAP32[$AsyncCtx2 + 240 >> 2] = $44; //@line 3402
  HEAP32[$AsyncCtx2 + 244 >> 2] = $5; //@line 3404
  HEAP32[$AsyncCtx2 + 248 >> 2] = $23; //@line 3406
  sp = STACKTOP; //@line 3407
  STACKTOP = sp; //@line 3408
  return 0; //@line 3408
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 3410
 L13 : do {
  if (!$65) {
   switch ($64 | 0) {
   case 16:
    {
     $$019$i52 = 135; //@line 3416
     break;
    }
   case 8:
    {
     $$019$i52 = 27; //@line 3420
     break;
    }
   default:
    {
     break L13;
    }
   }
   $129 = $64 + -1 | 0; //@line 3427
   $$01720$i55 = 0; //@line 3428
   $$021$i54 = $129; //@line 3428
   while (1) {
    $132 = HEAPU8[$2 + $$021$i54 >> 0] | 0; //@line 3432
    HEAP8[$4 + $$021$i54 >> 0] = $132 << 1 | $$01720$i55; //@line 3437
    if (($$021$i54 | 0) > 0) {
     $$01720$i55 = $132 >>> 7; //@line 3442
     $$021$i54 = $$021$i54 + -1 | 0; //@line 3442
    } else {
     break;
    }
   }
   $145 = $4 + $129 | 0; //@line 3452
   $148 = $$019$i52 & 0 - ((HEAPU8[$2 >> 0] | 0) >>> 7) ^ (HEAPU8[$145 >> 0] | 0); //@line 3455
   HEAP8[$145 >> 0] = $148; //@line 3457
   switch ($64 | 0) {
   case 16:
    {
     $$019$i = 135; //@line 3460
     break;
    }
   case 8:
    {
     $$019$i = 27; //@line 3464
     break;
    }
   default:
    {
     break L13;
    }
   }
   HEAP8[$5 + $129 >> 0] = $148 << 1; //@line 3474
   if (($129 | 0) > 0) {
    $156 = $148; //@line 3478
    $157 = $64 + -2 | 0; //@line 3478
    while (1) {
     $156$looptemp = $156;
     $156 = HEAPU8[$4 + $157 >> 0] | 0; //@line 3483
     HEAP8[$5 + $157 >> 0] = $156 << 1 | $156$looptemp >>> 7; //@line 3488
     if (($157 | 0) <= 0) {
      break;
     } else {
      $157 = $157 + -1 | 0; //@line 3492
     }
    }
   }
   $170 = $5 + $129 | 0; //@line 3503
   HEAP8[$170 >> 0] = $$019$i & 0 - ((HEAPU8[$4 >> 0] | 0) >>> 7) ^ (HEAPU8[$170 >> 0] | 0); //@line 3508
  }
 } while (0);
 HEAP8[$2 >> 0] = 0; //@line 3511
 HEAP8[$47 >> 0] = 0; //@line 3512
 HEAP8[$48 >> 0] = 0; //@line 3513
 HEAP8[$49 >> 0] = 0; //@line 3514
 HEAP8[$50 >> 0] = 0; //@line 3515
 HEAP8[$51 >> 0] = 0; //@line 3516
 HEAP8[$52 >> 0] = 0; //@line 3517
 HEAP8[$53 >> 0] = 0; //@line 3518
 HEAP8[$54 >> 0] = 0; //@line 3519
 HEAP8[$55 >> 0] = 0; //@line 3520
 HEAP8[$56 >> 0] = 0; //@line 3521
 HEAP8[$57 >> 0] = 0; //@line 3522
 HEAP8[$58 >> 0] = 0; //@line 3523
 HEAP8[$59 >> 0] = 0; //@line 3524
 HEAP8[$60 >> 0] = 0; //@line 3525
 HEAP8[$61 >> 0] = 0; //@line 3526
 $175 = $12 + 16 | 0; //@line 3527
 $176 = $12 + 32 | 0; //@line 3528
 $177 = HEAP32[$176 >> 2] | 0; //@line 3529
 if ($177 >>> 0 < $16 >>> 0) {
  $$013$i = 0; //@line 3532
  do {
   if ($$013$i >>> 0 < $177 >>> 0) {
    $$sink$sink$i = HEAP8[$12 + 16 + $$013$i >> 0] | 0; //@line 3538
   } else {
    $$sink$sink$i = ($$013$i | 0) == ($177 | 0) ? -128 : 0; //@line 3542
   }
   HEAP8[$6 + $$013$i >> 0] = $$sink$sink$i; //@line 3545
   $$013$i = $$013$i + 1 | 0; //@line 3546
  } while (($$013$i | 0) != ($16 | 0));
  $$09$i45 = 0; //@line 3549
  do {
   $185 = $6 + $$09$i45 | 0; //@line 3556
   HEAP8[$185 >> 0] = HEAP8[$5 + $$09$i45 >> 0] ^ HEAP8[$185 >> 0]; //@line 3561
   $$09$i45 = $$09$i45 + 1 | 0; //@line 3562
  } while (($$09$i45 | 0) != ($16 | 0));
  label = 25; //@line 3565
 } else {
  if ($16 | 0) {
   $$09$i41 = 0; //@line 3574
   do {
    HEAP8[$6 + $$09$i41 >> 0] = HEAP8[$4 + $$09$i41 >> 0] ^ HEAP8[$12 + 16 + $$09$i41 >> 0]; //@line 3582
    $$09$i41 = $$09$i41 + 1 | 0; //@line 3583
   } while (($$09$i41 | 0) != ($16 | 0));
   label = 25; //@line 3586
  }
 }
 if ((label | 0) == 25) {
  if ($16 | 0) {
   $$09$i = 0; //@line 3597
   do {
    $202 = $12 + $$09$i | 0; //@line 3601
    HEAP8[$202 >> 0] = HEAP8[$202 >> 0] ^ HEAP8[$6 + $$09$i >> 0]; //@line 3604
    $$09$i = $$09$i + 1 | 0; //@line 3605
   } while (($$09$i | 0) != ($16 | 0));
  }
 }
 $AsyncCtx = _emscripten_alloc_async_context(164, sp) | 0; //@line 3615
 $206 = _mbedtls_cipher_update($0, $12, $16, $12, $7) | 0; //@line 3616
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 587; //@line 3619
  HEAP32[$AsyncCtx + 4 >> 2] = $17; //@line 3621
  HEAP32[$AsyncCtx + 8 >> 2] = $20; //@line 3623
  HEAP32[$AsyncCtx + 12 >> 2] = $16; //@line 3625
  HEAP32[$AsyncCtx + 16 >> 2] = $26; //@line 3627
  HEAP32[$AsyncCtx + 20 >> 2] = $35; //@line 3629
  HEAP32[$AsyncCtx + 24 >> 2] = $41; //@line 3631
  HEAP32[$AsyncCtx + 28 >> 2] = $1; //@line 3633
  HEAP32[$AsyncCtx + 32 >> 2] = $29; //@line 3635
  HEAP32[$AsyncCtx + 36 >> 2] = $38; //@line 3637
  HEAP32[$AsyncCtx + 40 >> 2] = $36; //@line 3639
  HEAP32[$AsyncCtx + 44 >> 2] = $39; //@line 3641
  HEAP32[$AsyncCtx + 48 >> 2] = $18; //@line 3643
  HEAP32[$AsyncCtx + 52 >> 2] = $21; //@line 3645
  HEAP32[$AsyncCtx + 56 >> 2] = $24; //@line 3647
  HEAP32[$AsyncCtx + 60 >> 2] = $42; //@line 3649
  HEAP32[$AsyncCtx + 64 >> 2] = $4; //@line 3651
  HEAP32[$AsyncCtx + 68 >> 2] = $45; //@line 3653
  HEAP32[$AsyncCtx + 72 >> 2] = $25; //@line 3655
  HEAP32[$AsyncCtx + 76 >> 2] = $28; //@line 3657
  HEAP32[$AsyncCtx + 80 >> 2] = $7; //@line 3659
  HEAP32[$AsyncCtx + 84 >> 2] = $32; //@line 3661
  HEAP32[$AsyncCtx + 88 >> 2] = $175; //@line 3663
  HEAP32[$AsyncCtx + 92 >> 2] = $34; //@line 3665
  HEAP32[$AsyncCtx + 96 >> 2] = $40; //@line 3667
  HEAP32[$AsyncCtx + 100 >> 2] = $46; //@line 3669
  HEAP32[$AsyncCtx + 104 >> 2] = $12; //@line 3671
  HEAP32[$AsyncCtx + 108 >> 2] = $31; //@line 3673
  HEAP32[$AsyncCtx + 112 >> 2] = $19; //@line 3675
  HEAP32[$AsyncCtx + 116 >> 2] = $22; //@line 3677
  HEAP32[$AsyncCtx + 120 >> 2] = $6; //@line 3679
  HEAP32[$AsyncCtx + 124 >> 2] = $43; //@line 3681
  HEAP32[$AsyncCtx + 128 >> 2] = $176; //@line 3683
  HEAP32[$AsyncCtx + 132 >> 2] = $27; //@line 3685
  HEAP32[$AsyncCtx + 136 >> 2] = $30; //@line 3687
  HEAP32[$AsyncCtx + 140 >> 2] = $33; //@line 3689
  HEAP32[$AsyncCtx + 144 >> 2] = $12; //@line 3691
  HEAP32[$AsyncCtx + 148 >> 2] = $5; //@line 3693
  HEAP32[$AsyncCtx + 152 >> 2] = $37; //@line 3695
  HEAP32[$AsyncCtx + 156 >> 2] = $44; //@line 3697
  HEAP32[$AsyncCtx + 160 >> 2] = $23; //@line 3699
  sp = STACKTOP; //@line 3700
  STACKTOP = sp; //@line 3701
  return 0; //@line 3701
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 3703
 if (!$206) {
  _memcpy($1 | 0, $12 | 0, $16 | 0) | 0; //@line 3706
 }
 HEAP8[$4 >> 0] = 0; //@line 3708
 HEAP8[$17 >> 0] = 0; //@line 3709
 HEAP8[$18 >> 0] = 0; //@line 3710
 HEAP8[$19 >> 0] = 0; //@line 3711
 HEAP8[$20 >> 0] = 0; //@line 3712
 HEAP8[$21 >> 0] = 0; //@line 3713
 HEAP8[$22 >> 0] = 0; //@line 3714
 HEAP8[$23 >> 0] = 0; //@line 3715
 HEAP8[$24 >> 0] = 0; //@line 3716
 HEAP8[$25 >> 0] = 0; //@line 3717
 HEAP8[$26 >> 0] = 0; //@line 3718
 HEAP8[$27 >> 0] = 0; //@line 3719
 HEAP8[$28 >> 0] = 0; //@line 3720
 HEAP8[$29 >> 0] = 0; //@line 3721
 HEAP8[$30 >> 0] = 0; //@line 3722
 HEAP8[$31 >> 0] = 0; //@line 3723
 HEAP8[$5 >> 0] = 0; //@line 3724
 HEAP8[$32 >> 0] = 0; //@line 3725
 HEAP8[$33 >> 0] = 0; //@line 3726
 HEAP8[$34 >> 0] = 0; //@line 3727
 HEAP8[$35 >> 0] = 0; //@line 3728
 HEAP8[$36 >> 0] = 0; //@line 3729
 HEAP8[$37 >> 0] = 0; //@line 3730
 HEAP8[$38 >> 0] = 0; //@line 3731
 HEAP8[$39 >> 0] = 0; //@line 3732
 HEAP8[$40 >> 0] = 0; //@line 3733
 HEAP8[$41 >> 0] = 0; //@line 3734
 HEAP8[$42 >> 0] = 0; //@line 3735
 HEAP8[$43 >> 0] = 0; //@line 3736
 HEAP8[$44 >> 0] = 0; //@line 3737
 HEAP8[$45 >> 0] = 0; //@line 3738
 HEAP8[$46 >> 0] = 0; //@line 3739
 HEAP32[$176 >> 2] = 0; //@line 3740
 HEAP8[$175 >> 0] = 0; //@line 3742
 HEAP8[$12 + 17 >> 0] = 0; //@line 3744
 HEAP8[$12 + 18 >> 0] = 0; //@line 3746
 HEAP8[$12 + 19 >> 0] = 0; //@line 3748
 HEAP8[$12 + 20 >> 0] = 0; //@line 3750
 HEAP8[$12 + 21 >> 0] = 0; //@line 3752
 HEAP8[$12 + 22 >> 0] = 0; //@line 3754
 HEAP8[$12 + 23 >> 0] = 0; //@line 3756
 HEAP8[$12 + 24 >> 0] = 0; //@line 3758
 HEAP8[$12 + 25 >> 0] = 0; //@line 3760
 HEAP8[$12 + 26 >> 0] = 0; //@line 3762
 HEAP8[$12 + 27 >> 0] = 0; //@line 3764
 HEAP8[$12 + 28 >> 0] = 0; //@line 3766
 HEAP8[$12 + 29 >> 0] = 0; //@line 3768
 HEAP8[$12 + 30 >> 0] = 0; //@line 3770
 HEAP8[$12 + 31 >> 0] = 0; //@line 3771
 HEAP8[$12 >> 0] = 0; //@line 3773
 HEAP8[$12 + 1 >> 0] = 0; //@line 3775
 HEAP8[$12 + 2 >> 0] = 0; //@line 3777
 HEAP8[$12 + 3 >> 0] = 0; //@line 3779
 HEAP8[$12 + 4 >> 0] = 0; //@line 3781
 HEAP8[$12 + 5 >> 0] = 0; //@line 3783
 HEAP8[$12 + 6 >> 0] = 0; //@line 3785
 HEAP8[$12 + 7 >> 0] = 0; //@line 3787
 HEAP8[$12 + 8 >> 0] = 0; //@line 3789
 HEAP8[$12 + 9 >> 0] = 0; //@line 3791
 HEAP8[$12 + 10 >> 0] = 0; //@line 3793
 HEAP8[$12 + 11 >> 0] = 0; //@line 3795
 HEAP8[$12 + 12 >> 0] = 0; //@line 3797
 HEAP8[$12 + 13 >> 0] = 0; //@line 3799
 HEAP8[$12 + 14 >> 0] = 0; //@line 3801
 HEAP8[$12 + 15 >> 0] = 0; //@line 3802
 $$0 = $206; //@line 3803
 STACKTOP = sp; //@line 3804
 return $$0 | 0; //@line 3804
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_89($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $10 = 0, $100 = 0, $101 = 0, $104 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $118 = 0, $119 = 0, $12 = 0, $121 = 0, $122 = 0, $123 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $135 = 0, $139 = 0, $14 = 0, $140 = 0, $142 = 0, $143 = 0, $144 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $16 = 0, $2 = 0, $21 = 0, $29 = 0, $33 = 0, $39 = 0, $4 = 0, $42 = 0, $45 = 0, $47 = 0, $48 = 0, $53 = 0, $55 = 0, $56 = 0, $57 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $73 = 0, $74 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 23176
 STACKTOP = STACKTOP + 16 | 0; //@line 23177
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 23177
 $$byval_copy = sp; //@line 23178
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23180
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23182
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23184
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23186
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23188
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23190
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23192
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 23194
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  HEAP8[$2 >> 0] = HEAP8[$2 >> 0] & -33; //@line 23201
 } else {
  $21 = $4 + 288 | 0; //@line 23203
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($21) | 0) + 4 >> 2] = 9; //@line 23206
  __ZN14LoRaMacCommand20clear_command_bufferEv($4 + 4 | 0); //@line 23208
  HEAP32[$8 >> 2] = HEAP32[$8 >> 2] & -2; //@line 23211
  HEAP8[$10 >> 0] = 0; //@line 23212
  HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($21) | 0) + 10 >> 0] = 0; //@line 23215
  $29 = HEAP8[$12 >> 0] | 0; //@line 23216
  HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($21) | 0) + 11 >> 0] = $29; //@line 23219
  $33 = HEAP8[$4 + 1097 >> 0] | 0; //@line 23221
  HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($21) | 0) + 8 >> 0] = $33; //@line 23224
  if (!(HEAP8[$4 + 370 >> 0] | 0)) {
   $39 = $4 + 956 | 0; //@line 23229
   HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + 1; //@line 23232
  }
 }
 $42 = HEAP32[$8 >> 2] | 0; //@line 23235
 $45 = $42 & -3; //@line 23238
 if (!($42 & 2)) {
  $47 = $42; //@line 23240
 } else {
  HEAP32[$8 >> 2] = $45; //@line 23242
  $47 = $45; //@line 23243
 }
 if ($47 | 0) {
  $98 = HEAP32[$14 >> 2] | 0; //@line 23247
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(16) | 0; //@line 23248
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($98, $16, 1e3); //@line 23249
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 380; //@line 23252
   $99 = $ReallocAsyncCtx6 + 4 | 0; //@line 23253
   HEAP32[$99 >> 2] = $2; //@line 23254
   $100 = $ReallocAsyncCtx6 + 8 | 0; //@line 23255
   HEAP32[$100 >> 2] = $4; //@line 23256
   $101 = $ReallocAsyncCtx6 + 12 | 0; //@line 23257
   HEAP32[$101 >> 2] = $6; //@line 23258
   sp = STACKTOP; //@line 23259
   STACKTOP = sp; //@line 23260
   return;
  }
  ___async_unwind = 0; //@line 23262
  HEAP32[$ReallocAsyncCtx6 >> 2] = 380; //@line 23263
  $99 = $ReallocAsyncCtx6 + 4 | 0; //@line 23264
  HEAP32[$99 >> 2] = $2; //@line 23265
  $100 = $ReallocAsyncCtx6 + 8 | 0; //@line 23266
  HEAP32[$100 >> 2] = $4; //@line 23267
  $101 = $ReallocAsyncCtx6 + 12 | 0; //@line 23268
  HEAP32[$101 >> 2] = $6; //@line 23269
  sp = STACKTOP; //@line 23270
  STACKTOP = sp; //@line 23271
  return;
 }
 $48 = HEAP8[$2 >> 0] | 0; //@line 23273
 if ($48 & 1) {
  HEAP8[$2 >> 0] = $48 & -2; //@line 23278
  $53 = HEAP32[$4 + 1324 >> 2] | 0; //@line 23280
  $55 = __ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0; //@line 23282
  $56 = $53 + 12 | 0; //@line 23283
  $57 = HEAP32[$56 >> 2] | 0; //@line 23284
  if (!$57) {
   $ReallocAsyncCtx16 = _emscripten_realloc_async_context(28) | 0; //@line 23287
   _mbed_assert_internal(13874, 13879, 1102); //@line 23288
   if (___async) {
    HEAP32[$ReallocAsyncCtx16 >> 2] = 376; //@line 23291
    $59 = $ReallocAsyncCtx16 + 4 | 0; //@line 23292
    HEAP32[$59 >> 2] = $2; //@line 23293
    $60 = $ReallocAsyncCtx16 + 8 | 0; //@line 23294
    HEAP32[$60 >> 2] = $4; //@line 23295
    $61 = $ReallocAsyncCtx16 + 12 | 0; //@line 23296
    HEAP32[$61 >> 2] = $6; //@line 23297
    $62 = $ReallocAsyncCtx16 + 16 | 0; //@line 23298
    HEAP32[$62 >> 2] = $56; //@line 23299
    $63 = $ReallocAsyncCtx16 + 20 | 0; //@line 23300
    HEAP32[$63 >> 2] = $53; //@line 23301
    $64 = $ReallocAsyncCtx16 + 24 | 0; //@line 23302
    HEAP32[$64 >> 2] = $55; //@line 23303
    sp = STACKTOP; //@line 23304
    STACKTOP = sp; //@line 23305
    return;
   }
   ___async_unwind = 0; //@line 23307
   HEAP32[$ReallocAsyncCtx16 >> 2] = 376; //@line 23308
   $59 = $ReallocAsyncCtx16 + 4 | 0; //@line 23309
   HEAP32[$59 >> 2] = $2; //@line 23310
   $60 = $ReallocAsyncCtx16 + 8 | 0; //@line 23311
   HEAP32[$60 >> 2] = $4; //@line 23312
   $61 = $ReallocAsyncCtx16 + 12 | 0; //@line 23313
   HEAP32[$61 >> 2] = $6; //@line 23314
   $62 = $ReallocAsyncCtx16 + 16 | 0; //@line 23315
   HEAP32[$62 >> 2] = $56; //@line 23316
   $63 = $ReallocAsyncCtx16 + 20 | 0; //@line 23317
   HEAP32[$63 >> 2] = $53; //@line 23318
   $64 = $ReallocAsyncCtx16 + 24 | 0; //@line 23319
   HEAP32[$64 >> 2] = $55; //@line 23320
   sp = STACKTOP; //@line 23321
   STACKTOP = sp; //@line 23322
   return;
  } else {
   $65 = HEAP32[$57 >> 2] | 0; //@line 23324
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 23325
   FUNCTION_TABLE_vii[$65 & 31]($53, $55); //@line 23326
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 377; //@line 23329
    $66 = $ReallocAsyncCtx2 + 4 | 0; //@line 23330
    HEAP32[$66 >> 2] = $2; //@line 23331
    $67 = $ReallocAsyncCtx2 + 8 | 0; //@line 23332
    HEAP32[$67 >> 2] = $4; //@line 23333
    $68 = $ReallocAsyncCtx2 + 12 | 0; //@line 23334
    HEAP32[$68 >> 2] = $6; //@line 23335
    sp = STACKTOP; //@line 23336
    STACKTOP = sp; //@line 23337
    return;
   }
   ___async_unwind = 0; //@line 23339
   HEAP32[$ReallocAsyncCtx2 >> 2] = 377; //@line 23340
   $66 = $ReallocAsyncCtx2 + 4 | 0; //@line 23341
   HEAP32[$66 >> 2] = $2; //@line 23342
   $67 = $ReallocAsyncCtx2 + 8 | 0; //@line 23343
   HEAP32[$67 >> 2] = $4; //@line 23344
   $68 = $ReallocAsyncCtx2 + 12 | 0; //@line 23345
   HEAP32[$68 >> 2] = $6; //@line 23346
   sp = STACKTOP; //@line 23347
   STACKTOP = sp; //@line 23348
   return;
  }
 }
 if ($48 & 8) {
  HEAP8[$2 >> 0] = $48 & -9; //@line 23355
  $73 = HEAP32[$4 + 1324 >> 2] | 0; //@line 23357
  $74 = $73 + 32 | 0; //@line 23358
  $76 = __ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0; //@line 23360
  $77 = $73 + 44 | 0; //@line 23361
  $78 = HEAP32[$77 >> 2] | 0; //@line 23362
  if (!$78) {
   $ReallocAsyncCtx15 = _emscripten_realloc_async_context(28) | 0; //@line 23365
   _mbed_assert_internal(13874, 13879, 1102); //@line 23366
   if (___async) {
    HEAP32[$ReallocAsyncCtx15 >> 2] = 378; //@line 23369
    $80 = $ReallocAsyncCtx15 + 4 | 0; //@line 23370
    HEAP32[$80 >> 2] = $2; //@line 23371
    $81 = $ReallocAsyncCtx15 + 8 | 0; //@line 23372
    HEAP32[$81 >> 2] = $4; //@line 23373
    $82 = $ReallocAsyncCtx15 + 12 | 0; //@line 23374
    HEAP32[$82 >> 2] = $6; //@line 23375
    $83 = $ReallocAsyncCtx15 + 16 | 0; //@line 23376
    HEAP32[$83 >> 2] = $74; //@line 23377
    $84 = $ReallocAsyncCtx15 + 20 | 0; //@line 23378
    HEAP32[$84 >> 2] = $76; //@line 23379
    $85 = $ReallocAsyncCtx15 + 24 | 0; //@line 23380
    HEAP32[$85 >> 2] = $77; //@line 23381
    sp = STACKTOP; //@line 23382
    STACKTOP = sp; //@line 23383
    return;
   }
   ___async_unwind = 0; //@line 23385
   HEAP32[$ReallocAsyncCtx15 >> 2] = 378; //@line 23386
   $80 = $ReallocAsyncCtx15 + 4 | 0; //@line 23387
   HEAP32[$80 >> 2] = $2; //@line 23388
   $81 = $ReallocAsyncCtx15 + 8 | 0; //@line 23389
   HEAP32[$81 >> 2] = $4; //@line 23390
   $82 = $ReallocAsyncCtx15 + 12 | 0; //@line 23391
   HEAP32[$82 >> 2] = $6; //@line 23392
   $83 = $ReallocAsyncCtx15 + 16 | 0; //@line 23393
   HEAP32[$83 >> 2] = $74; //@line 23394
   $84 = $ReallocAsyncCtx15 + 20 | 0; //@line 23395
   HEAP32[$84 >> 2] = $76; //@line 23396
   $85 = $ReallocAsyncCtx15 + 24 | 0; //@line 23397
   HEAP32[$85 >> 2] = $77; //@line 23398
   sp = STACKTOP; //@line 23399
   STACKTOP = sp; //@line 23400
   return;
  } else {
   $86 = HEAP32[$78 >> 2] | 0; //@line 23402
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 23403
   FUNCTION_TABLE_vii[$86 & 31]($74, $76); //@line 23404
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 379; //@line 23407
    $87 = $ReallocAsyncCtx3 + 4 | 0; //@line 23408
    HEAP32[$87 >> 2] = $2; //@line 23409
    $88 = $ReallocAsyncCtx3 + 8 | 0; //@line 23410
    HEAP32[$88 >> 2] = $4; //@line 23411
    $89 = $ReallocAsyncCtx3 + 12 | 0; //@line 23412
    HEAP32[$89 >> 2] = $6; //@line 23413
    sp = STACKTOP; //@line 23414
    STACKTOP = sp; //@line 23415
    return;
   }
   ___async_unwind = 0; //@line 23417
   HEAP32[$ReallocAsyncCtx3 >> 2] = 379; //@line 23418
   $87 = $ReallocAsyncCtx3 + 4 | 0; //@line 23419
   HEAP32[$87 >> 2] = $2; //@line 23420
   $88 = $ReallocAsyncCtx3 + 8 | 0; //@line 23421
   HEAP32[$88 >> 2] = $4; //@line 23422
   $89 = $ReallocAsyncCtx3 + 12 | 0; //@line 23423
   HEAP32[$89 >> 2] = $6; //@line 23424
   sp = STACKTOP; //@line 23425
   STACKTOP = sp; //@line 23426
   return;
  }
 }
 if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($4 + 4 | 0) | 0) {
  HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0) >> 2] = 4; //@line 23434
  $95 = HEAP8[$2 >> 0] | 16; //@line 23436
  HEAP8[$2 >> 0] = $95; //@line 23437
  $97 = $95; //@line 23438
 } else {
  $97 = HEAP8[$2 >> 0] | 0; //@line 23441
 }
 $96 = $97 & -33; //@line 23443
 HEAP8[$2 >> 0] = $96; //@line 23444
 do {
  if (!($96 & 2)) {
   $135 = $96; //@line 23449
  } else {
   $104 = $96 & -3; //@line 23451
   HEAP8[$2 >> 0] = $104; //@line 23452
   if ((HEAP32[$4 + 360 >> 2] | 0) == 2) {
    $109 = HEAP32[$4 + 1328 >> 2] | 0; //@line 23458
    HEAP32[$6 >> 2] = 273; //@line 23459
    HEAP32[$6 + 4 >> 2] = 0; //@line 23461
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 23462
    HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 23463
    HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 23463
    $110 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($109, $4, $$byval_copy) | 0; //@line 23464
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 381; //@line 23467
     $111 = $ReallocAsyncCtx8 + 4 | 0; //@line 23468
     HEAP32[$111 >> 2] = $2; //@line 23469
     $112 = $ReallocAsyncCtx8 + 8 | 0; //@line 23470
     HEAP32[$112 >> 2] = $4; //@line 23471
     $113 = $ReallocAsyncCtx8 + 12 | 0; //@line 23472
     HEAP32[$113 >> 2] = $6; //@line 23473
     sp = STACKTOP; //@line 23474
     STACKTOP = sp; //@line 23475
     return;
    }
    HEAP32[___async_retval >> 2] = $110; //@line 23478
    ___async_unwind = 0; //@line 23479
    HEAP32[$ReallocAsyncCtx8 >> 2] = 381; //@line 23480
    $111 = $ReallocAsyncCtx8 + 4 | 0; //@line 23481
    HEAP32[$111 >> 2] = $2; //@line 23482
    $112 = $ReallocAsyncCtx8 + 8 | 0; //@line 23483
    HEAP32[$112 >> 2] = $4; //@line 23484
    $113 = $ReallocAsyncCtx8 + 12 | 0; //@line 23485
    HEAP32[$113 >> 2] = $6; //@line 23486
    sp = STACKTOP; //@line 23487
    STACKTOP = sp; //@line 23488
    return;
   }
   if ($104 & 4) {
    $133 = $104 & -5; //@line 23493
    HEAP8[$2 >> 0] = $133; //@line 23494
    $135 = $133; //@line 23495
    break;
   }
   $118 = HEAP32[$4 + 1324 >> 2] | 0; //@line 23499
   $119 = $118 + 16 | 0; //@line 23500
   $121 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 23502
   $122 = $118 + 28 | 0; //@line 23503
   $123 = HEAP32[$122 >> 2] | 0; //@line 23504
   if (!$123) {
    $ReallocAsyncCtx13 = _emscripten_realloc_async_context(24) | 0; //@line 23507
    _mbed_assert_internal(13874, 13879, 1102); //@line 23508
    if (___async) {
     HEAP32[$ReallocAsyncCtx13 >> 2] = 383; //@line 23511
     $125 = $ReallocAsyncCtx13 + 4 | 0; //@line 23512
     HEAP32[$125 >> 2] = $122; //@line 23513
     $126 = $ReallocAsyncCtx13 + 8 | 0; //@line 23514
     HEAP32[$126 >> 2] = $119; //@line 23515
     $127 = $ReallocAsyncCtx13 + 12 | 0; //@line 23516
     HEAP32[$127 >> 2] = $121; //@line 23517
     $128 = $ReallocAsyncCtx13 + 16 | 0; //@line 23518
     HEAP32[$128 >> 2] = $2; //@line 23519
     $129 = $ReallocAsyncCtx13 + 20 | 0; //@line 23520
     HEAP32[$129 >> 2] = $4; //@line 23521
     sp = STACKTOP; //@line 23522
     STACKTOP = sp; //@line 23523
     return;
    }
    ___async_unwind = 0; //@line 23525
    HEAP32[$ReallocAsyncCtx13 >> 2] = 383; //@line 23526
    $125 = $ReallocAsyncCtx13 + 4 | 0; //@line 23527
    HEAP32[$125 >> 2] = $122; //@line 23528
    $126 = $ReallocAsyncCtx13 + 8 | 0; //@line 23529
    HEAP32[$126 >> 2] = $119; //@line 23530
    $127 = $ReallocAsyncCtx13 + 12 | 0; //@line 23531
    HEAP32[$127 >> 2] = $121; //@line 23532
    $128 = $ReallocAsyncCtx13 + 16 | 0; //@line 23533
    HEAP32[$128 >> 2] = $2; //@line 23534
    $129 = $ReallocAsyncCtx13 + 20 | 0; //@line 23535
    HEAP32[$129 >> 2] = $4; //@line 23536
    sp = STACKTOP; //@line 23537
    STACKTOP = sp; //@line 23538
    return;
   } else {
    $130 = HEAP32[$123 >> 2] | 0; //@line 23540
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 23541
    FUNCTION_TABLE_vii[$130 & 31]($119, $121); //@line 23542
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 384; //@line 23545
     $131 = $ReallocAsyncCtx4 + 4 | 0; //@line 23546
     HEAP32[$131 >> 2] = $2; //@line 23547
     $132 = $ReallocAsyncCtx4 + 8 | 0; //@line 23548
     HEAP32[$132 >> 2] = $4; //@line 23549
     sp = STACKTOP; //@line 23550
     STACKTOP = sp; //@line 23551
     return;
    }
    ___async_unwind = 0; //@line 23553
    HEAP32[$ReallocAsyncCtx4 >> 2] = 384; //@line 23554
    $131 = $ReallocAsyncCtx4 + 4 | 0; //@line 23555
    HEAP32[$131 >> 2] = $2; //@line 23556
    $132 = $ReallocAsyncCtx4 + 8 | 0; //@line 23557
    HEAP32[$132 >> 2] = $4; //@line 23558
    sp = STACKTOP; //@line 23559
    STACKTOP = sp; //@line 23560
    return;
   }
  }
 } while (0);
 if (!($135 & 16)) {
  STACKTOP = sp; //@line 23567
  return;
 }
 HEAP8[$2 >> 0] = $135 & -17; //@line 23570
 $139 = HEAP32[$4 + 1324 >> 2] | 0; //@line 23572
 $140 = $139 + 48 | 0; //@line 23573
 $142 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 23575
 $143 = $139 + 60 | 0; //@line 23576
 $144 = HEAP32[$143 >> 2] | 0; //@line 23577
 if (!$144) {
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(16) | 0; //@line 23580
  _mbed_assert_internal(13874, 13879, 1102); //@line 23581
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 385; //@line 23584
   $146 = $ReallocAsyncCtx12 + 4 | 0; //@line 23585
   HEAP32[$146 >> 2] = $143; //@line 23586
   $147 = $ReallocAsyncCtx12 + 8 | 0; //@line 23587
   HEAP32[$147 >> 2] = $140; //@line 23588
   $148 = $ReallocAsyncCtx12 + 12 | 0; //@line 23589
   HEAP32[$148 >> 2] = $142; //@line 23590
   sp = STACKTOP; //@line 23591
   STACKTOP = sp; //@line 23592
   return;
  }
  ___async_unwind = 0; //@line 23594
  HEAP32[$ReallocAsyncCtx12 >> 2] = 385; //@line 23595
  $146 = $ReallocAsyncCtx12 + 4 | 0; //@line 23596
  HEAP32[$146 >> 2] = $143; //@line 23597
  $147 = $ReallocAsyncCtx12 + 8 | 0; //@line 23598
  HEAP32[$147 >> 2] = $140; //@line 23599
  $148 = $ReallocAsyncCtx12 + 12 | 0; //@line 23600
  HEAP32[$148 >> 2] = $142; //@line 23601
  sp = STACKTOP; //@line 23602
  STACKTOP = sp; //@line 23603
  return;
 } else {
  $149 = HEAP32[$144 >> 2] | 0; //@line 23605
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 23606
  FUNCTION_TABLE_vii[$149 & 31]($140, $142); //@line 23607
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 386; //@line 23610
   sp = STACKTOP; //@line 23611
   STACKTOP = sp; //@line 23612
   return;
  }
  ___async_unwind = 0; //@line 23614
  HEAP32[$ReallocAsyncCtx5 >> 2] = 386; //@line 23615
  sp = STACKTOP; //@line 23616
  STACKTOP = sp; //@line 23617
  return;
 }
}
function _free($0) {
 $0 = $0 | 0;
 var $$0212$i = 0, $$0212$in$i = 0, $$0383 = 0, $$0384 = 0, $$0396 = 0, $$0403 = 0, $$1 = 0, $$1382 = 0, $$1387 = 0, $$1390 = 0, $$1398 = 0, $$1402 = 0, $$2 = 0, $$3 = 0, $$3400 = 0, $$pre$phi442Z2D = 0, $$pre$phi444Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $105 = 0, $106 = 0, $114 = 0, $115 = 0, $116 = 0, $124 = 0, $13 = 0, $132 = 0, $137 = 0, $138 = 0, $141 = 0, $143 = 0, $145 = 0, $16 = 0, $160 = 0, $165 = 0, $167 = 0, $17 = 0, $170 = 0, $173 = 0, $176 = 0, $179 = 0, $180 = 0, $181 = 0, $183 = 0, $185 = 0, $186 = 0, $188 = 0, $189 = 0, $195 = 0, $196 = 0, $2 = 0, $21 = 0, $210 = 0, $213 = 0, $214 = 0, $220 = 0, $235 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $244 = 0, $245 = 0, $251 = 0, $256 = 0, $257 = 0, $26 = 0, $260 = 0, $262 = 0, $265 = 0, $270 = 0, $276 = 0, $28 = 0, $280 = 0, $281 = 0, $299 = 0, $3 = 0, $301 = 0, $308 = 0, $309 = 0, $310 = 0, $319 = 0, $41 = 0, $46 = 0, $48 = 0, $51 = 0, $53 = 0, $56 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $7 = 0, $74 = 0, $75 = 0, $89 = 0, $9 = 0, $92 = 0, $93 = 0, $99 = 0, label = 0;
 if (!$0) {
  return;
 }
 $2 = $0 + -8 | 0; //@line 9559
 $3 = HEAP32[5488] | 0; //@line 9560
 if ($2 >>> 0 < $3 >>> 0) {
  _abort(); //@line 9563
 }
 $6 = HEAP32[$0 + -4 >> 2] | 0; //@line 9567
 $7 = $6 & 3; //@line 9568
 if (($7 | 0) == 1) {
  _abort(); //@line 9571
 }
 $9 = $6 & -8; //@line 9574
 $10 = $2 + $9 | 0; //@line 9575
 L10 : do {
  if (!($6 & 1)) {
   $13 = HEAP32[$2 >> 2] | 0; //@line 9580
   if (!$7) {
    return;
   }
   $16 = $2 + (0 - $13) | 0; //@line 9586
   $17 = $13 + $9 | 0; //@line 9587
   if ($16 >>> 0 < $3 >>> 0) {
    _abort(); //@line 9590
   }
   if ((HEAP32[5489] | 0) == ($16 | 0)) {
    $105 = $10 + 4 | 0; //@line 9596
    $106 = HEAP32[$105 >> 2] | 0; //@line 9597
    if (($106 & 3 | 0) != 3) {
     $$1 = $16; //@line 9601
     $$1382 = $17; //@line 9601
     $114 = $16; //@line 9601
     break;
    }
    HEAP32[5486] = $17; //@line 9604
    HEAP32[$105 >> 2] = $106 & -2; //@line 9606
    HEAP32[$16 + 4 >> 2] = $17 | 1; //@line 9609
    HEAP32[$16 + $17 >> 2] = $17; //@line 9611
    return;
   }
   $21 = $13 >>> 3; //@line 9614
   if ($13 >>> 0 < 256) {
    $24 = HEAP32[$16 + 8 >> 2] | 0; //@line 9618
    $26 = HEAP32[$16 + 12 >> 2] | 0; //@line 9620
    $28 = 21976 + ($21 << 1 << 2) | 0; //@line 9622
    if (($24 | 0) != ($28 | 0)) {
     if ($3 >>> 0 > $24 >>> 0) {
      _abort(); //@line 9627
     }
     if ((HEAP32[$24 + 12 >> 2] | 0) != ($16 | 0)) {
      _abort(); //@line 9634
     }
    }
    if (($26 | 0) == ($24 | 0)) {
     HEAP32[5484] = HEAP32[5484] & ~(1 << $21); //@line 9644
     $$1 = $16; //@line 9645
     $$1382 = $17; //@line 9645
     $114 = $16; //@line 9645
     break;
    }
    if (($26 | 0) == ($28 | 0)) {
     $$pre$phi444Z2D = $26 + 8 | 0; //@line 9651
    } else {
     if ($3 >>> 0 > $26 >>> 0) {
      _abort(); //@line 9655
     }
     $41 = $26 + 8 | 0; //@line 9658
     if ((HEAP32[$41 >> 2] | 0) == ($16 | 0)) {
      $$pre$phi444Z2D = $41; //@line 9662
     } else {
      _abort(); //@line 9664
     }
    }
    HEAP32[$24 + 12 >> 2] = $26; //@line 9669
    HEAP32[$$pre$phi444Z2D >> 2] = $24; //@line 9670
    $$1 = $16; //@line 9671
    $$1382 = $17; //@line 9671
    $114 = $16; //@line 9671
    break;
   }
   $46 = HEAP32[$16 + 24 >> 2] | 0; //@line 9675
   $48 = HEAP32[$16 + 12 >> 2] | 0; //@line 9677
   do {
    if (($48 | 0) == ($16 | 0)) {
     $59 = $16 + 16 | 0; //@line 9681
     $60 = $59 + 4 | 0; //@line 9682
     $61 = HEAP32[$60 >> 2] | 0; //@line 9683
     if (!$61) {
      $63 = HEAP32[$59 >> 2] | 0; //@line 9686
      if (!$63) {
       $$3 = 0; //@line 9689
       break;
      } else {
       $$1387 = $63; //@line 9692
       $$1390 = $59; //@line 9692
      }
     } else {
      $$1387 = $61; //@line 9695
      $$1390 = $60; //@line 9695
     }
     while (1) {
      $65 = $$1387 + 20 | 0; //@line 9698
      $66 = HEAP32[$65 >> 2] | 0; //@line 9699
      if ($66 | 0) {
       $$1387 = $66; //@line 9702
       $$1390 = $65; //@line 9702
       continue;
      }
      $68 = $$1387 + 16 | 0; //@line 9705
      $69 = HEAP32[$68 >> 2] | 0; //@line 9706
      if (!$69) {
       break;
      } else {
       $$1387 = $69; //@line 9711
       $$1390 = $68; //@line 9711
      }
     }
     if ($3 >>> 0 > $$1390 >>> 0) {
      _abort(); //@line 9716
     } else {
      HEAP32[$$1390 >> 2] = 0; //@line 9719
      $$3 = $$1387; //@line 9720
      break;
     }
    } else {
     $51 = HEAP32[$16 + 8 >> 2] | 0; //@line 9725
     if ($3 >>> 0 > $51 >>> 0) {
      _abort(); //@line 9728
     }
     $53 = $51 + 12 | 0; //@line 9731
     if ((HEAP32[$53 >> 2] | 0) != ($16 | 0)) {
      _abort(); //@line 9735
     }
     $56 = $48 + 8 | 0; //@line 9738
     if ((HEAP32[$56 >> 2] | 0) == ($16 | 0)) {
      HEAP32[$53 >> 2] = $48; //@line 9742
      HEAP32[$56 >> 2] = $51; //@line 9743
      $$3 = $48; //@line 9744
      break;
     } else {
      _abort(); //@line 9747
     }
    }
   } while (0);
   if (!$46) {
    $$1 = $16; //@line 9754
    $$1382 = $17; //@line 9754
    $114 = $16; //@line 9754
   } else {
    $74 = HEAP32[$16 + 28 >> 2] | 0; //@line 9757
    $75 = 22240 + ($74 << 2) | 0; //@line 9758
    do {
     if ((HEAP32[$75 >> 2] | 0) == ($16 | 0)) {
      HEAP32[$75 >> 2] = $$3; //@line 9763
      if (!$$3) {
       HEAP32[5485] = HEAP32[5485] & ~(1 << $74); //@line 9770
       $$1 = $16; //@line 9771
       $$1382 = $17; //@line 9771
       $114 = $16; //@line 9771
       break L10;
      }
     } else {
      if ((HEAP32[5488] | 0) >>> 0 > $46 >>> 0) {
       _abort(); //@line 9778
      } else {
       HEAP32[$46 + 16 + (((HEAP32[$46 + 16 >> 2] | 0) != ($16 | 0) & 1) << 2) >> 2] = $$3; //@line 9786
       if (!$$3) {
        $$1 = $16; //@line 9789
        $$1382 = $17; //@line 9789
        $114 = $16; //@line 9789
        break L10;
       } else {
        break;
       }
      }
     }
    } while (0);
    $89 = HEAP32[5488] | 0; //@line 9797
    if ($89 >>> 0 > $$3 >>> 0) {
     _abort(); //@line 9800
    }
    HEAP32[$$3 + 24 >> 2] = $46; //@line 9804
    $92 = $16 + 16 | 0; //@line 9805
    $93 = HEAP32[$92 >> 2] | 0; //@line 9806
    do {
     if ($93 | 0) {
      if ($89 >>> 0 > $93 >>> 0) {
       _abort(); //@line 9812
      } else {
       HEAP32[$$3 + 16 >> 2] = $93; //@line 9816
       HEAP32[$93 + 24 >> 2] = $$3; //@line 9818
       break;
      }
     }
    } while (0);
    $99 = HEAP32[$92 + 4 >> 2] | 0; //@line 9824
    if (!$99) {
     $$1 = $16; //@line 9827
     $$1382 = $17; //@line 9827
     $114 = $16; //@line 9827
    } else {
     if ((HEAP32[5488] | 0) >>> 0 > $99 >>> 0) {
      _abort(); //@line 9832
     } else {
      HEAP32[$$3 + 20 >> 2] = $99; //@line 9836
      HEAP32[$99 + 24 >> 2] = $$3; //@line 9838
      $$1 = $16; //@line 9839
      $$1382 = $17; //@line 9839
      $114 = $16; //@line 9839
      break;
     }
    }
   }
  } else {
   $$1 = $2; //@line 9845
   $$1382 = $9; //@line 9845
   $114 = $2; //@line 9845
  }
 } while (0);
 if ($114 >>> 0 >= $10 >>> 0) {
  _abort(); //@line 9850
 }
 $115 = $10 + 4 | 0; //@line 9853
 $116 = HEAP32[$115 >> 2] | 0; //@line 9854
 if (!($116 & 1)) {
  _abort(); //@line 9858
 }
 if (!($116 & 2)) {
  if ((HEAP32[5490] | 0) == ($10 | 0)) {
   $124 = (HEAP32[5487] | 0) + $$1382 | 0; //@line 9868
   HEAP32[5487] = $124; //@line 9869
   HEAP32[5490] = $$1; //@line 9870
   HEAP32[$$1 + 4 >> 2] = $124 | 1; //@line 9873
   if (($$1 | 0) != (HEAP32[5489] | 0)) {
    return;
   }
   HEAP32[5489] = 0; //@line 9879
   HEAP32[5486] = 0; //@line 9880
   return;
  }
  if ((HEAP32[5489] | 0) == ($10 | 0)) {
   $132 = (HEAP32[5486] | 0) + $$1382 | 0; //@line 9887
   HEAP32[5486] = $132; //@line 9888
   HEAP32[5489] = $114; //@line 9889
   HEAP32[$$1 + 4 >> 2] = $132 | 1; //@line 9892
   HEAP32[$114 + $132 >> 2] = $132; //@line 9894
   return;
  }
  $137 = ($116 & -8) + $$1382 | 0; //@line 9898
  $138 = $116 >>> 3; //@line 9899
  L108 : do {
   if ($116 >>> 0 < 256) {
    $141 = HEAP32[$10 + 8 >> 2] | 0; //@line 9904
    $143 = HEAP32[$10 + 12 >> 2] | 0; //@line 9906
    $145 = 21976 + ($138 << 1 << 2) | 0; //@line 9908
    if (($141 | 0) != ($145 | 0)) {
     if ((HEAP32[5488] | 0) >>> 0 > $141 >>> 0) {
      _abort(); //@line 9914
     }
     if ((HEAP32[$141 + 12 >> 2] | 0) != ($10 | 0)) {
      _abort(); //@line 9921
     }
    }
    if (($143 | 0) == ($141 | 0)) {
     HEAP32[5484] = HEAP32[5484] & ~(1 << $138); //@line 9931
     break;
    }
    if (($143 | 0) == ($145 | 0)) {
     $$pre$phi442Z2D = $143 + 8 | 0; //@line 9937
    } else {
     if ((HEAP32[5488] | 0) >>> 0 > $143 >>> 0) {
      _abort(); //@line 9942
     }
     $160 = $143 + 8 | 0; //@line 9945
     if ((HEAP32[$160 >> 2] | 0) == ($10 | 0)) {
      $$pre$phi442Z2D = $160; //@line 9949
     } else {
      _abort(); //@line 9951
     }
    }
    HEAP32[$141 + 12 >> 2] = $143; //@line 9956
    HEAP32[$$pre$phi442Z2D >> 2] = $141; //@line 9957
   } else {
    $165 = HEAP32[$10 + 24 >> 2] | 0; //@line 9960
    $167 = HEAP32[$10 + 12 >> 2] | 0; //@line 9962
    do {
     if (($167 | 0) == ($10 | 0)) {
      $179 = $10 + 16 | 0; //@line 9966
      $180 = $179 + 4 | 0; //@line 9967
      $181 = HEAP32[$180 >> 2] | 0; //@line 9968
      if (!$181) {
       $183 = HEAP32[$179 >> 2] | 0; //@line 9971
       if (!$183) {
        $$3400 = 0; //@line 9974
        break;
       } else {
        $$1398 = $183; //@line 9977
        $$1402 = $179; //@line 9977
       }
      } else {
       $$1398 = $181; //@line 9980
       $$1402 = $180; //@line 9980
      }
      while (1) {
       $185 = $$1398 + 20 | 0; //@line 9983
       $186 = HEAP32[$185 >> 2] | 0; //@line 9984
       if ($186 | 0) {
        $$1398 = $186; //@line 9987
        $$1402 = $185; //@line 9987
        continue;
       }
       $188 = $$1398 + 16 | 0; //@line 9990
       $189 = HEAP32[$188 >> 2] | 0; //@line 9991
       if (!$189) {
        break;
       } else {
        $$1398 = $189; //@line 9996
        $$1402 = $188; //@line 9996
       }
      }
      if ((HEAP32[5488] | 0) >>> 0 > $$1402 >>> 0) {
       _abort(); //@line 10002
      } else {
       HEAP32[$$1402 >> 2] = 0; //@line 10005
       $$3400 = $$1398; //@line 10006
       break;
      }
     } else {
      $170 = HEAP32[$10 + 8 >> 2] | 0; //@line 10011
      if ((HEAP32[5488] | 0) >>> 0 > $170 >>> 0) {
       _abort(); //@line 10015
      }
      $173 = $170 + 12 | 0; //@line 10018
      if ((HEAP32[$173 >> 2] | 0) != ($10 | 0)) {
       _abort(); //@line 10022
      }
      $176 = $167 + 8 | 0; //@line 10025
      if ((HEAP32[$176 >> 2] | 0) == ($10 | 0)) {
       HEAP32[$173 >> 2] = $167; //@line 10029
       HEAP32[$176 >> 2] = $170; //@line 10030
       $$3400 = $167; //@line 10031
       break;
      } else {
       _abort(); //@line 10034
      }
     }
    } while (0);
    if ($165 | 0) {
     $195 = HEAP32[$10 + 28 >> 2] | 0; //@line 10042
     $196 = 22240 + ($195 << 2) | 0; //@line 10043
     do {
      if ((HEAP32[$196 >> 2] | 0) == ($10 | 0)) {
       HEAP32[$196 >> 2] = $$3400; //@line 10048
       if (!$$3400) {
        HEAP32[5485] = HEAP32[5485] & ~(1 << $195); //@line 10055
        break L108;
       }
      } else {
       if ((HEAP32[5488] | 0) >>> 0 > $165 >>> 0) {
        _abort(); //@line 10062
       } else {
        HEAP32[$165 + 16 + (((HEAP32[$165 + 16 >> 2] | 0) != ($10 | 0) & 1) << 2) >> 2] = $$3400; //@line 10070
        if (!$$3400) {
         break L108;
        } else {
         break;
        }
       }
      }
     } while (0);
     $210 = HEAP32[5488] | 0; //@line 10080
     if ($210 >>> 0 > $$3400 >>> 0) {
      _abort(); //@line 10083
     }
     HEAP32[$$3400 + 24 >> 2] = $165; //@line 10087
     $213 = $10 + 16 | 0; //@line 10088
     $214 = HEAP32[$213 >> 2] | 0; //@line 10089
     do {
      if ($214 | 0) {
       if ($210 >>> 0 > $214 >>> 0) {
        _abort(); //@line 10095
       } else {
        HEAP32[$$3400 + 16 >> 2] = $214; //@line 10099
        HEAP32[$214 + 24 >> 2] = $$3400; //@line 10101
        break;
       }
      }
     } while (0);
     $220 = HEAP32[$213 + 4 >> 2] | 0; //@line 10107
     if ($220 | 0) {
      if ((HEAP32[5488] | 0) >>> 0 > $220 >>> 0) {
       _abort(); //@line 10113
      } else {
       HEAP32[$$3400 + 20 >> 2] = $220; //@line 10117
       HEAP32[$220 + 24 >> 2] = $$3400; //@line 10119
       break;
      }
     }
    }
   }
  } while (0);
  HEAP32[$$1 + 4 >> 2] = $137 | 1; //@line 10128
  HEAP32[$114 + $137 >> 2] = $137; //@line 10130
  if (($$1 | 0) == (HEAP32[5489] | 0)) {
   HEAP32[5486] = $137; //@line 10134
   return;
  } else {
   $$2 = $137; //@line 10137
  }
 } else {
  HEAP32[$115 >> 2] = $116 & -2; //@line 10141
  HEAP32[$$1 + 4 >> 2] = $$1382 | 1; //@line 10144
  HEAP32[$114 + $$1382 >> 2] = $$1382; //@line 10146
  $$2 = $$1382; //@line 10147
 }
 $235 = $$2 >>> 3; //@line 10149
 if ($$2 >>> 0 < 256) {
  $238 = 21976 + ($235 << 1 << 2) | 0; //@line 10153
  $239 = HEAP32[5484] | 0; //@line 10154
  $240 = 1 << $235; //@line 10155
  if (!($239 & $240)) {
   HEAP32[5484] = $239 | $240; //@line 10160
   $$0403 = $238; //@line 10162
   $$pre$phiZ2D = $238 + 8 | 0; //@line 10162
  } else {
   $244 = $238 + 8 | 0; //@line 10164
   $245 = HEAP32[$244 >> 2] | 0; //@line 10165
   if ((HEAP32[5488] | 0) >>> 0 > $245 >>> 0) {
    _abort(); //@line 10169
   } else {
    $$0403 = $245; //@line 10172
    $$pre$phiZ2D = $244; //@line 10172
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$1; //@line 10175
  HEAP32[$$0403 + 12 >> 2] = $$1; //@line 10177
  HEAP32[$$1 + 8 >> 2] = $$0403; //@line 10179
  HEAP32[$$1 + 12 >> 2] = $238; //@line 10181
  return;
 }
 $251 = $$2 >>> 8; //@line 10184
 if (!$251) {
  $$0396 = 0; //@line 10187
 } else {
  if ($$2 >>> 0 > 16777215) {
   $$0396 = 31; //@line 10191
  } else {
   $256 = ($251 + 1048320 | 0) >>> 16 & 8; //@line 10195
   $257 = $251 << $256; //@line 10196
   $260 = ($257 + 520192 | 0) >>> 16 & 4; //@line 10199
   $262 = $257 << $260; //@line 10201
   $265 = ($262 + 245760 | 0) >>> 16 & 2; //@line 10204
   $270 = 14 - ($260 | $256 | $265) + ($262 << $265 >>> 15) | 0; //@line 10209
   $$0396 = $$2 >>> ($270 + 7 | 0) & 1 | $270 << 1; //@line 10215
  }
 }
 $276 = 22240 + ($$0396 << 2) | 0; //@line 10218
 HEAP32[$$1 + 28 >> 2] = $$0396; //@line 10220
 HEAP32[$$1 + 20 >> 2] = 0; //@line 10223
 HEAP32[$$1 + 16 >> 2] = 0; //@line 10224
 $280 = HEAP32[5485] | 0; //@line 10225
 $281 = 1 << $$0396; //@line 10226
 do {
  if (!($280 & $281)) {
   HEAP32[5485] = $280 | $281; //@line 10232
   HEAP32[$276 >> 2] = $$1; //@line 10233
   HEAP32[$$1 + 24 >> 2] = $276; //@line 10235
   HEAP32[$$1 + 12 >> 2] = $$1; //@line 10237
   HEAP32[$$1 + 8 >> 2] = $$1; //@line 10239
  } else {
   $$0383 = $$2 << (($$0396 | 0) == 31 ? 0 : 25 - ($$0396 >>> 1) | 0); //@line 10247
   $$0384 = HEAP32[$276 >> 2] | 0; //@line 10247
   while (1) {
    if ((HEAP32[$$0384 + 4 >> 2] & -8 | 0) == ($$2 | 0)) {
     label = 124; //@line 10254
     break;
    }
    $299 = $$0384 + 16 + ($$0383 >>> 31 << 2) | 0; //@line 10258
    $301 = HEAP32[$299 >> 2] | 0; //@line 10260
    if (!$301) {
     label = 121; //@line 10263
     break;
    } else {
     $$0383 = $$0383 << 1; //@line 10266
     $$0384 = $301; //@line 10266
    }
   }
   if ((label | 0) == 121) {
    if ((HEAP32[5488] | 0) >>> 0 > $299 >>> 0) {
     _abort(); //@line 10273
    } else {
     HEAP32[$299 >> 2] = $$1; //@line 10276
     HEAP32[$$1 + 24 >> 2] = $$0384; //@line 10278
     HEAP32[$$1 + 12 >> 2] = $$1; //@line 10280
     HEAP32[$$1 + 8 >> 2] = $$1; //@line 10282
     break;
    }
   } else if ((label | 0) == 124) {
    $308 = $$0384 + 8 | 0; //@line 10287
    $309 = HEAP32[$308 >> 2] | 0; //@line 10288
    $310 = HEAP32[5488] | 0; //@line 10289
    if ($310 >>> 0 <= $309 >>> 0 & $310 >>> 0 <= $$0384 >>> 0) {
     HEAP32[$309 + 12 >> 2] = $$1; //@line 10295
     HEAP32[$308 >> 2] = $$1; //@line 10296
     HEAP32[$$1 + 8 >> 2] = $309; //@line 10298
     HEAP32[$$1 + 12 >> 2] = $$0384; //@line 10300
     HEAP32[$$1 + 24 >> 2] = 0; //@line 10302
     break;
    } else {
     _abort(); //@line 10305
    }
   }
  }
 } while (0);
 $319 = (HEAP32[5492] | 0) + -1 | 0; //@line 10312
 HEAP32[5492] = $319; //@line 10313
 if (!$319) {
  $$0212$in$i = 22392; //@line 10316
 } else {
  return;
 }
 while (1) {
  $$0212$i = HEAP32[$$0212$in$i >> 2] | 0; //@line 10321
  if (!$$0212$i) {
   break;
  } else {
   $$0212$in$i = $$0212$i + 8 | 0; //@line 10327
  }
 }
 HEAP32[5492] = -1; //@line 10330
 return;
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $108 = 0, $109 = 0, $111 = 0, $112 = 0, $113 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $125 = 0, $129 = 0, $130 = 0, $132 = 0, $133 = 0, $134 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $16 = 0, $2 = 0, $20 = 0, $23 = 0, $29 = 0, $32 = 0, $35 = 0, $37 = 0, $38 = 0, $4 = 0, $43 = 0, $45 = 0, $46 = 0, $47 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $63 = 0, $64 = 0, $66 = 0, $67 = 0, $68 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $94 = 0, $99 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 21980
 STACKTOP = STACKTOP + 16 | 0; //@line 21981
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 21981
 $$byval_copy = sp; //@line 21982
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21984
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21986
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21988
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21990
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21992
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21994
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21996
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 21998
 HEAP32[$4 >> 2] = HEAP32[$4 >> 2] & -2; //@line 22001
 __ZN14LoRaMacCommand20clear_command_bufferEv($2 + 4 | 0); //@line 22003
 HEAP8[$8 >> 0] = 0; //@line 22004
 $20 = $2 + 288 | 0; //@line 22005
 HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($20) | 0) + 10 >> 0] = 0; //@line 22008
 $23 = HEAP8[$10 >> 0] | 0; //@line 22009
 HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($20) | 0) + 11 >> 0] = $23; //@line 22012
 if (!(HEAP8[$2 + 370 >> 0] | 0)) {
  $29 = $2 + 956 | 0; //@line 22017
  HEAP32[$29 >> 2] = (HEAP32[$29 >> 2] | 0) + 1; //@line 22020
 }
 $32 = HEAP32[$4 >> 2] | 0; //@line 22022
 $35 = $32 & -3; //@line 22025
 if (!($32 & 2)) {
  $37 = $32; //@line 22027
 } else {
  HEAP32[$4 >> 2] = $35; //@line 22029
  $37 = $35; //@line 22030
 }
 if ($37 | 0) {
  $88 = HEAP32[$12 >> 2] | 0; //@line 22034
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(16) | 0; //@line 22035
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($88, $14, 1e3); //@line 22036
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 380; //@line 22039
   $89 = $ReallocAsyncCtx6 + 4 | 0; //@line 22040
   HEAP32[$89 >> 2] = $6; //@line 22041
   $90 = $ReallocAsyncCtx6 + 8 | 0; //@line 22042
   HEAP32[$90 >> 2] = $2; //@line 22043
   $91 = $ReallocAsyncCtx6 + 12 | 0; //@line 22044
   HEAP32[$91 >> 2] = $16; //@line 22045
   sp = STACKTOP; //@line 22046
   STACKTOP = sp; //@line 22047
   return;
  }
  ___async_unwind = 0; //@line 22049
  HEAP32[$ReallocAsyncCtx6 >> 2] = 380; //@line 22050
  $89 = $ReallocAsyncCtx6 + 4 | 0; //@line 22051
  HEAP32[$89 >> 2] = $6; //@line 22052
  $90 = $ReallocAsyncCtx6 + 8 | 0; //@line 22053
  HEAP32[$90 >> 2] = $2; //@line 22054
  $91 = $ReallocAsyncCtx6 + 12 | 0; //@line 22055
  HEAP32[$91 >> 2] = $16; //@line 22056
  sp = STACKTOP; //@line 22057
  STACKTOP = sp; //@line 22058
  return;
 }
 $38 = HEAP8[$6 >> 0] | 0; //@line 22060
 if ($38 & 1) {
  HEAP8[$6 >> 0] = $38 & -2; //@line 22065
  $43 = HEAP32[$2 + 1324 >> 2] | 0; //@line 22067
  $45 = __ZN11LoRaMacMcps16get_confirmationEv($2 + 288 | 0) | 0; //@line 22069
  $46 = $43 + 12 | 0; //@line 22070
  $47 = HEAP32[$46 >> 2] | 0; //@line 22071
  if (!$47) {
   $ReallocAsyncCtx16 = _emscripten_realloc_async_context(28) | 0; //@line 22074
   _mbed_assert_internal(13874, 13879, 1102); //@line 22075
   if (___async) {
    HEAP32[$ReallocAsyncCtx16 >> 2] = 376; //@line 22078
    $49 = $ReallocAsyncCtx16 + 4 | 0; //@line 22079
    HEAP32[$49 >> 2] = $6; //@line 22080
    $50 = $ReallocAsyncCtx16 + 8 | 0; //@line 22081
    HEAP32[$50 >> 2] = $2; //@line 22082
    $51 = $ReallocAsyncCtx16 + 12 | 0; //@line 22083
    HEAP32[$51 >> 2] = $16; //@line 22084
    $52 = $ReallocAsyncCtx16 + 16 | 0; //@line 22085
    HEAP32[$52 >> 2] = $46; //@line 22086
    $53 = $ReallocAsyncCtx16 + 20 | 0; //@line 22087
    HEAP32[$53 >> 2] = $43; //@line 22088
    $54 = $ReallocAsyncCtx16 + 24 | 0; //@line 22089
    HEAP32[$54 >> 2] = $45; //@line 22090
    sp = STACKTOP; //@line 22091
    STACKTOP = sp; //@line 22092
    return;
   }
   ___async_unwind = 0; //@line 22094
   HEAP32[$ReallocAsyncCtx16 >> 2] = 376; //@line 22095
   $49 = $ReallocAsyncCtx16 + 4 | 0; //@line 22096
   HEAP32[$49 >> 2] = $6; //@line 22097
   $50 = $ReallocAsyncCtx16 + 8 | 0; //@line 22098
   HEAP32[$50 >> 2] = $2; //@line 22099
   $51 = $ReallocAsyncCtx16 + 12 | 0; //@line 22100
   HEAP32[$51 >> 2] = $16; //@line 22101
   $52 = $ReallocAsyncCtx16 + 16 | 0; //@line 22102
   HEAP32[$52 >> 2] = $46; //@line 22103
   $53 = $ReallocAsyncCtx16 + 20 | 0; //@line 22104
   HEAP32[$53 >> 2] = $43; //@line 22105
   $54 = $ReallocAsyncCtx16 + 24 | 0; //@line 22106
   HEAP32[$54 >> 2] = $45; //@line 22107
   sp = STACKTOP; //@line 22108
   STACKTOP = sp; //@line 22109
   return;
  } else {
   $55 = HEAP32[$47 >> 2] | 0; //@line 22111
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 22112
   FUNCTION_TABLE_vii[$55 & 31]($43, $45); //@line 22113
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 377; //@line 22116
    $56 = $ReallocAsyncCtx2 + 4 | 0; //@line 22117
    HEAP32[$56 >> 2] = $6; //@line 22118
    $57 = $ReallocAsyncCtx2 + 8 | 0; //@line 22119
    HEAP32[$57 >> 2] = $2; //@line 22120
    $58 = $ReallocAsyncCtx2 + 12 | 0; //@line 22121
    HEAP32[$58 >> 2] = $16; //@line 22122
    sp = STACKTOP; //@line 22123
    STACKTOP = sp; //@line 22124
    return;
   }
   ___async_unwind = 0; //@line 22126
   HEAP32[$ReallocAsyncCtx2 >> 2] = 377; //@line 22127
   $56 = $ReallocAsyncCtx2 + 4 | 0; //@line 22128
   HEAP32[$56 >> 2] = $6; //@line 22129
   $57 = $ReallocAsyncCtx2 + 8 | 0; //@line 22130
   HEAP32[$57 >> 2] = $2; //@line 22131
   $58 = $ReallocAsyncCtx2 + 12 | 0; //@line 22132
   HEAP32[$58 >> 2] = $16; //@line 22133
   sp = STACKTOP; //@line 22134
   STACKTOP = sp; //@line 22135
   return;
  }
 }
 if ($38 & 8) {
  HEAP8[$6 >> 0] = $38 & -9; //@line 22142
  $63 = HEAP32[$2 + 1324 >> 2] | 0; //@line 22144
  $64 = $63 + 32 | 0; //@line 22145
  $66 = __ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0; //@line 22147
  $67 = $63 + 44 | 0; //@line 22148
  $68 = HEAP32[$67 >> 2] | 0; //@line 22149
  if (!$68) {
   $ReallocAsyncCtx15 = _emscripten_realloc_async_context(28) | 0; //@line 22152
   _mbed_assert_internal(13874, 13879, 1102); //@line 22153
   if (___async) {
    HEAP32[$ReallocAsyncCtx15 >> 2] = 378; //@line 22156
    $70 = $ReallocAsyncCtx15 + 4 | 0; //@line 22157
    HEAP32[$70 >> 2] = $6; //@line 22158
    $71 = $ReallocAsyncCtx15 + 8 | 0; //@line 22159
    HEAP32[$71 >> 2] = $2; //@line 22160
    $72 = $ReallocAsyncCtx15 + 12 | 0; //@line 22161
    HEAP32[$72 >> 2] = $16; //@line 22162
    $73 = $ReallocAsyncCtx15 + 16 | 0; //@line 22163
    HEAP32[$73 >> 2] = $64; //@line 22164
    $74 = $ReallocAsyncCtx15 + 20 | 0; //@line 22165
    HEAP32[$74 >> 2] = $66; //@line 22166
    $75 = $ReallocAsyncCtx15 + 24 | 0; //@line 22167
    HEAP32[$75 >> 2] = $67; //@line 22168
    sp = STACKTOP; //@line 22169
    STACKTOP = sp; //@line 22170
    return;
   }
   ___async_unwind = 0; //@line 22172
   HEAP32[$ReallocAsyncCtx15 >> 2] = 378; //@line 22173
   $70 = $ReallocAsyncCtx15 + 4 | 0; //@line 22174
   HEAP32[$70 >> 2] = $6; //@line 22175
   $71 = $ReallocAsyncCtx15 + 8 | 0; //@line 22176
   HEAP32[$71 >> 2] = $2; //@line 22177
   $72 = $ReallocAsyncCtx15 + 12 | 0; //@line 22178
   HEAP32[$72 >> 2] = $16; //@line 22179
   $73 = $ReallocAsyncCtx15 + 16 | 0; //@line 22180
   HEAP32[$73 >> 2] = $64; //@line 22181
   $74 = $ReallocAsyncCtx15 + 20 | 0; //@line 22182
   HEAP32[$74 >> 2] = $66; //@line 22183
   $75 = $ReallocAsyncCtx15 + 24 | 0; //@line 22184
   HEAP32[$75 >> 2] = $67; //@line 22185
   sp = STACKTOP; //@line 22186
   STACKTOP = sp; //@line 22187
   return;
  } else {
   $76 = HEAP32[$68 >> 2] | 0; //@line 22189
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 22190
   FUNCTION_TABLE_vii[$76 & 31]($64, $66); //@line 22191
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 379; //@line 22194
    $77 = $ReallocAsyncCtx3 + 4 | 0; //@line 22195
    HEAP32[$77 >> 2] = $6; //@line 22196
    $78 = $ReallocAsyncCtx3 + 8 | 0; //@line 22197
    HEAP32[$78 >> 2] = $2; //@line 22198
    $79 = $ReallocAsyncCtx3 + 12 | 0; //@line 22199
    HEAP32[$79 >> 2] = $16; //@line 22200
    sp = STACKTOP; //@line 22201
    STACKTOP = sp; //@line 22202
    return;
   }
   ___async_unwind = 0; //@line 22204
   HEAP32[$ReallocAsyncCtx3 >> 2] = 379; //@line 22205
   $77 = $ReallocAsyncCtx3 + 4 | 0; //@line 22206
   HEAP32[$77 >> 2] = $6; //@line 22207
   $78 = $ReallocAsyncCtx3 + 8 | 0; //@line 22208
   HEAP32[$78 >> 2] = $2; //@line 22209
   $79 = $ReallocAsyncCtx3 + 12 | 0; //@line 22210
   HEAP32[$79 >> 2] = $16; //@line 22211
   sp = STACKTOP; //@line 22212
   STACKTOP = sp; //@line 22213
   return;
  }
 }
 if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($2 + 4 | 0) | 0) {
  HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($2 + 264 | 0) | 0) >> 2] = 4; //@line 22221
  $85 = HEAP8[$6 >> 0] | 16; //@line 22223
  HEAP8[$6 >> 0] = $85; //@line 22224
  $87 = $85; //@line 22225
 } else {
  $87 = HEAP8[$6 >> 0] | 0; //@line 22228
 }
 $86 = $87 & -33; //@line 22230
 HEAP8[$6 >> 0] = $86; //@line 22231
 do {
  if (!($86 & 2)) {
   $125 = $86; //@line 22236
  } else {
   $94 = $86 & -3; //@line 22238
   HEAP8[$6 >> 0] = $94; //@line 22239
   if ((HEAP32[$2 + 360 >> 2] | 0) == 2) {
    $99 = HEAP32[$2 + 1328 >> 2] | 0; //@line 22245
    HEAP32[$16 >> 2] = 273; //@line 22246
    HEAP32[$16 + 4 >> 2] = 0; //@line 22248
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 22249
    HEAP32[$$byval_copy >> 2] = HEAP32[$16 >> 2]; //@line 22250
    HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$16 + 4 >> 2]; //@line 22250
    $100 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($99, $2, $$byval_copy) | 0; //@line 22251
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 381; //@line 22254
     $101 = $ReallocAsyncCtx8 + 4 | 0; //@line 22255
     HEAP32[$101 >> 2] = $6; //@line 22256
     $102 = $ReallocAsyncCtx8 + 8 | 0; //@line 22257
     HEAP32[$102 >> 2] = $2; //@line 22258
     $103 = $ReallocAsyncCtx8 + 12 | 0; //@line 22259
     HEAP32[$103 >> 2] = $16; //@line 22260
     sp = STACKTOP; //@line 22261
     STACKTOP = sp; //@line 22262
     return;
    }
    HEAP32[___async_retval >> 2] = $100; //@line 22265
    ___async_unwind = 0; //@line 22266
    HEAP32[$ReallocAsyncCtx8 >> 2] = 381; //@line 22267
    $101 = $ReallocAsyncCtx8 + 4 | 0; //@line 22268
    HEAP32[$101 >> 2] = $6; //@line 22269
    $102 = $ReallocAsyncCtx8 + 8 | 0; //@line 22270
    HEAP32[$102 >> 2] = $2; //@line 22271
    $103 = $ReallocAsyncCtx8 + 12 | 0; //@line 22272
    HEAP32[$103 >> 2] = $16; //@line 22273
    sp = STACKTOP; //@line 22274
    STACKTOP = sp; //@line 22275
    return;
   }
   if ($94 & 4) {
    $123 = $94 & -5; //@line 22280
    HEAP8[$6 >> 0] = $123; //@line 22281
    $125 = $123; //@line 22282
    break;
   }
   $108 = HEAP32[$2 + 1324 >> 2] | 0; //@line 22286
   $109 = $108 + 16 | 0; //@line 22287
   $111 = __ZN11LoRaMacMcps14get_indicationEv($2 + 288 | 0) | 0; //@line 22289
   $112 = $108 + 28 | 0; //@line 22290
   $113 = HEAP32[$112 >> 2] | 0; //@line 22291
   if (!$113) {
    $ReallocAsyncCtx13 = _emscripten_realloc_async_context(24) | 0; //@line 22294
    _mbed_assert_internal(13874, 13879, 1102); //@line 22295
    if (___async) {
     HEAP32[$ReallocAsyncCtx13 >> 2] = 383; //@line 22298
     $115 = $ReallocAsyncCtx13 + 4 | 0; //@line 22299
     HEAP32[$115 >> 2] = $112; //@line 22300
     $116 = $ReallocAsyncCtx13 + 8 | 0; //@line 22301
     HEAP32[$116 >> 2] = $109; //@line 22302
     $117 = $ReallocAsyncCtx13 + 12 | 0; //@line 22303
     HEAP32[$117 >> 2] = $111; //@line 22304
     $118 = $ReallocAsyncCtx13 + 16 | 0; //@line 22305
     HEAP32[$118 >> 2] = $6; //@line 22306
     $119 = $ReallocAsyncCtx13 + 20 | 0; //@line 22307
     HEAP32[$119 >> 2] = $2; //@line 22308
     sp = STACKTOP; //@line 22309
     STACKTOP = sp; //@line 22310
     return;
    }
    ___async_unwind = 0; //@line 22312
    HEAP32[$ReallocAsyncCtx13 >> 2] = 383; //@line 22313
    $115 = $ReallocAsyncCtx13 + 4 | 0; //@line 22314
    HEAP32[$115 >> 2] = $112; //@line 22315
    $116 = $ReallocAsyncCtx13 + 8 | 0; //@line 22316
    HEAP32[$116 >> 2] = $109; //@line 22317
    $117 = $ReallocAsyncCtx13 + 12 | 0; //@line 22318
    HEAP32[$117 >> 2] = $111; //@line 22319
    $118 = $ReallocAsyncCtx13 + 16 | 0; //@line 22320
    HEAP32[$118 >> 2] = $6; //@line 22321
    $119 = $ReallocAsyncCtx13 + 20 | 0; //@line 22322
    HEAP32[$119 >> 2] = $2; //@line 22323
    sp = STACKTOP; //@line 22324
    STACKTOP = sp; //@line 22325
    return;
   } else {
    $120 = HEAP32[$113 >> 2] | 0; //@line 22327
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 22328
    FUNCTION_TABLE_vii[$120 & 31]($109, $111); //@line 22329
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 384; //@line 22332
     $121 = $ReallocAsyncCtx4 + 4 | 0; //@line 22333
     HEAP32[$121 >> 2] = $6; //@line 22334
     $122 = $ReallocAsyncCtx4 + 8 | 0; //@line 22335
     HEAP32[$122 >> 2] = $2; //@line 22336
     sp = STACKTOP; //@line 22337
     STACKTOP = sp; //@line 22338
     return;
    }
    ___async_unwind = 0; //@line 22340
    HEAP32[$ReallocAsyncCtx4 >> 2] = 384; //@line 22341
    $121 = $ReallocAsyncCtx4 + 4 | 0; //@line 22342
    HEAP32[$121 >> 2] = $6; //@line 22343
    $122 = $ReallocAsyncCtx4 + 8 | 0; //@line 22344
    HEAP32[$122 >> 2] = $2; //@line 22345
    sp = STACKTOP; //@line 22346
    STACKTOP = sp; //@line 22347
    return;
   }
  }
 } while (0);
 if (!($125 & 16)) {
  STACKTOP = sp; //@line 22354
  return;
 }
 HEAP8[$6 >> 0] = $125 & -17; //@line 22357
 $129 = HEAP32[$2 + 1324 >> 2] | 0; //@line 22359
 $130 = $129 + 48 | 0; //@line 22360
 $132 = __ZN11LoRaMacMlme14get_indicationEv($2 + 264 | 0) | 0; //@line 22362
 $133 = $129 + 60 | 0; //@line 22363
 $134 = HEAP32[$133 >> 2] | 0; //@line 22364
 if (!$134) {
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(16) | 0; //@line 22367
  _mbed_assert_internal(13874, 13879, 1102); //@line 22368
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 385; //@line 22371
   $136 = $ReallocAsyncCtx12 + 4 | 0; //@line 22372
   HEAP32[$136 >> 2] = $133; //@line 22373
   $137 = $ReallocAsyncCtx12 + 8 | 0; //@line 22374
   HEAP32[$137 >> 2] = $130; //@line 22375
   $138 = $ReallocAsyncCtx12 + 12 | 0; //@line 22376
   HEAP32[$138 >> 2] = $132; //@line 22377
   sp = STACKTOP; //@line 22378
   STACKTOP = sp; //@line 22379
   return;
  }
  ___async_unwind = 0; //@line 22381
  HEAP32[$ReallocAsyncCtx12 >> 2] = 385; //@line 22382
  $136 = $ReallocAsyncCtx12 + 4 | 0; //@line 22383
  HEAP32[$136 >> 2] = $133; //@line 22384
  $137 = $ReallocAsyncCtx12 + 8 | 0; //@line 22385
  HEAP32[$137 >> 2] = $130; //@line 22386
  $138 = $ReallocAsyncCtx12 + 12 | 0; //@line 22387
  HEAP32[$138 >> 2] = $132; //@line 22388
  sp = STACKTOP; //@line 22389
  STACKTOP = sp; //@line 22390
  return;
 } else {
  $139 = HEAP32[$134 >> 2] | 0; //@line 22392
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 22393
  FUNCTION_TABLE_vii[$139 & 31]($130, $132); //@line 22394
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 386; //@line 22397
   sp = STACKTOP; //@line 22398
   STACKTOP = sp; //@line 22399
   return;
  }
  ___async_unwind = 0; //@line 22401
  HEAP32[$ReallocAsyncCtx5 >> 2] = 386; //@line 22402
  sp = STACKTOP; //@line 22403
  STACKTOP = sp; //@line 22404
  return;
 }
}
function _mbedtls_cipher_cmac_finish__async_cb_155($0) {
 $0 = $0 | 0;
 var $$013$i = 0, $$01720$i55 = 0, $$019$i = 0, $$019$i52 = 0, $$021$i54 = 0, $$09$i = 0, $$09$i41 = 0, $$09$i45 = 0, $$sink$sink$i = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $127 = 0, $130 = 0, $14 = 0, $143 = 0, $146 = 0, $154 = 0, $155 = 0, $16 = 0, $168 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $183 = 0, $2 = 0, $20 = 0, $200 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $64 = 0, $66 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $ReallocAsyncCtx = 0, label = 0, sp = 0, $154$looptemp = 0;
 sp = STACKTOP; //@line 30860
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30862
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30866
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30868
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30870
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30872
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 30874
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 30876
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 30878
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 30880
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 30882
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 30884
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 30886
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 30888
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 30890
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 30892
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 30894
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 30896
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 30898
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 30900
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 30902
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 30904
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 30906
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 30908
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 30910
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 30912
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 30914
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 30916
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 30918
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 30920
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 30922
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 30924
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 30926
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 30928
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 30930
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 30932
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 30934
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 30936
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 30938
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 30940
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 30942
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 30944
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 30946
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 30948
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 30950
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 30952
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 30954
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 30956
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 30958
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 30960
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 30962
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 30964
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 30966
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 30968
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 30970
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 30972
 $114 = HEAP32[$0 + 228 >> 2] | 0; //@line 30974
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 30976
 $118 = HEAP32[$0 + 236 >> 2] | 0; //@line 30978
 $120 = HEAP32[$0 + 240 >> 2] | 0; //@line 30980
 $122 = HEAP32[$0 + 244 >> 2] | 0; //@line 30982
 $124 = HEAP32[$0 + 248 >> 2] | 0; //@line 30984
 L2 : do {
  if (!(HEAP32[___async_retval >> 2] | 0)) {
   switch ($92 | 0) {
   case 16:
    {
     $$019$i52 = 135; //@line 30992
     break;
    }
   case 8:
    {
     $$019$i52 = 27; //@line 30996
     break;
    }
   default:
    {
     break L2;
    }
   }
   $127 = $92 + -1 | 0; //@line 31003
   $$01720$i55 = 0; //@line 31004
   $$021$i54 = $127; //@line 31004
   while (1) {
    $130 = HEAPU8[$64 + $$021$i54 >> 0] | 0; //@line 31008
    HEAP8[$98 + $$021$i54 >> 0] = $130 << 1 | $$01720$i55; //@line 31013
    if (($$021$i54 | 0) > 0) {
     $$01720$i55 = $130 >>> 7; //@line 31018
     $$021$i54 = $$021$i54 + -1 | 0; //@line 31018
    } else {
     break;
    }
   }
   $143 = $98 + $127 | 0; //@line 31028
   $146 = $$019$i52 & 0 - ((HEAPU8[$2 >> 0] | 0) >>> 7) ^ (HEAPU8[$143 >> 0] | 0); //@line 31031
   HEAP8[$143 >> 0] = $146; //@line 31033
   switch ($92 | 0) {
   case 16:
    {
     $$019$i = 135; //@line 31036
     break;
    }
   case 8:
    {
     $$019$i = 27; //@line 31040
     break;
    }
   default:
    {
     break L2;
    }
   }
   HEAP8[$122 + $127 >> 0] = $146 << 1; //@line 31050
   if (($127 | 0) > 0) {
    $154 = $146; //@line 31054
    $155 = $92 + -2 | 0; //@line 31054
    while (1) {
     $154$looptemp = $154;
     $154 = HEAPU8[$98 + $155 >> 0] | 0; //@line 31059
     HEAP8[$122 + $155 >> 0] = $154 << 1 | $154$looptemp >>> 7; //@line 31064
     if (($155 | 0) <= 0) {
      break;
     } else {
      $155 = $155 + -1 | 0; //@line 31068
     }
    }
   }
   $168 = $122 + $127 | 0; //@line 31079
   HEAP8[$168 >> 0] = $$019$i & 0 - ((HEAPU8[$44 >> 0] | 0) >>> 7) ^ (HEAPU8[$168 >> 0] | 0); //@line 31084
  }
 } while (0);
 HEAP8[$2 >> 0] = 0; //@line 31087
 HEAP8[$100 >> 0] = 0; //@line 31088
 HEAP8[$68 >> 0] = 0; //@line 31089
 HEAP8[$50 >> 0] = 0; //@line 31090
 HEAP8[$108 >> 0] = 0; //@line 31091
 HEAP8[$70 >> 0] = 0; //@line 31092
 HEAP8[$66 >> 0] = 0; //@line 31093
 HEAP8[$24 >> 0] = 0; //@line 31094
 HEAP8[$74 >> 0] = 0; //@line 31095
 HEAP8[$52 >> 0] = 0; //@line 31096
 HEAP8[$46 >> 0] = 0; //@line 31097
 HEAP8[$72 >> 0] = 0; //@line 31098
 HEAP8[$30 >> 0] = 0; //@line 31099
 HEAP8[$62 >> 0] = 0; //@line 31100
 HEAP8[$82 >> 0] = 0; //@line 31101
 HEAP8[$112 >> 0] = 0; //@line 31102
 $173 = $84 + 16 | 0; //@line 31103
 $174 = $84 + 32 | 0; //@line 31104
 $175 = HEAP32[$174 >> 2] | 0; //@line 31105
 if ($175 >>> 0 < $12 >>> 0) {
  $$013$i = 0; //@line 31108
  do {
   if ($$013$i >>> 0 < $175 >>> 0) {
    $$sink$sink$i = HEAP8[$84 + 16 + $$013$i >> 0] | 0; //@line 31114
   } else {
    $$sink$sink$i = ($$013$i | 0) == ($175 | 0) ? -128 : 0; //@line 31118
   }
   HEAP8[$118 + $$013$i >> 0] = $$sink$sink$i; //@line 31121
   $$013$i = $$013$i + 1 | 0; //@line 31122
  } while (($$013$i | 0) != ($12 | 0));
  $$09$i45 = 0; //@line 31125
  do {
   $183 = $118 + $$09$i45 | 0; //@line 31132
   HEAP8[$183 >> 0] = HEAP8[$122 + $$09$i45 >> 0] ^ HEAP8[$183 >> 0]; //@line 31137
   $$09$i45 = $$09$i45 + 1 | 0; //@line 31138
  } while (($$09$i45 | 0) != ($12 | 0));
  label = 21; //@line 31141
 } else {
  if ($12 | 0) {
   $$09$i41 = 0; //@line 31150
   do {
    HEAP8[$118 + $$09$i41 >> 0] = HEAP8[$98 + $$09$i41 >> 0] ^ HEAP8[$84 + 16 + $$09$i41 >> 0]; //@line 31158
    $$09$i41 = $$09$i41 + 1 | 0; //@line 31159
   } while (($$09$i41 | 0) != ($12 | 0));
   label = 21; //@line 31162
  }
 }
 if ((label | 0) == 21) {
  if ($12 | 0) {
   $$09$i = 0; //@line 31173
   do {
    $200 = $84 + $$09$i | 0; //@line 31177
    HEAP8[$200 >> 0] = HEAP8[$200 >> 0] ^ HEAP8[$118 + $$09$i >> 0]; //@line 31180
    $$09$i = $$09$i + 1 | 0; //@line 31181
   } while (($$09$i | 0) != ($12 | 0));
  }
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(164) | 0; //@line 31191
 $204 = _mbedtls_cipher_update($18, $110, $12, $110, $6) | 0; //@line 31192
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 587; //@line 31195
  $205 = $ReallocAsyncCtx + 4 | 0; //@line 31196
  HEAP32[$205 >> 2] = $8; //@line 31197
  $206 = $ReallocAsyncCtx + 8 | 0; //@line 31198
  HEAP32[$206 >> 2] = $10; //@line 31199
  $207 = $ReallocAsyncCtx + 12 | 0; //@line 31200
  HEAP32[$207 >> 2] = $12; //@line 31201
  $208 = $ReallocAsyncCtx + 16 | 0; //@line 31202
  HEAP32[$208 >> 2] = $14; //@line 31203
  $209 = $ReallocAsyncCtx + 20 | 0; //@line 31204
  HEAP32[$209 >> 2] = $16; //@line 31205
  $210 = $ReallocAsyncCtx + 24 | 0; //@line 31206
  HEAP32[$210 >> 2] = $22; //@line 31207
  $211 = $ReallocAsyncCtx + 28 | 0; //@line 31208
  HEAP32[$211 >> 2] = $20; //@line 31209
  $212 = $ReallocAsyncCtx + 32 | 0; //@line 31210
  HEAP32[$212 >> 2] = $26; //@line 31211
  $213 = $ReallocAsyncCtx + 36 | 0; //@line 31212
  HEAP32[$213 >> 2] = $28; //@line 31213
  $214 = $ReallocAsyncCtx + 40 | 0; //@line 31214
  HEAP32[$214 >> 2] = $32; //@line 31215
  $215 = $ReallocAsyncCtx + 44 | 0; //@line 31216
  HEAP32[$215 >> 2] = $34; //@line 31217
  $216 = $ReallocAsyncCtx + 48 | 0; //@line 31218
  HEAP32[$216 >> 2] = $36; //@line 31219
  $217 = $ReallocAsyncCtx + 52 | 0; //@line 31220
  HEAP32[$217 >> 2] = $38; //@line 31221
  $218 = $ReallocAsyncCtx + 56 | 0; //@line 31222
  HEAP32[$218 >> 2] = $40; //@line 31223
  $219 = $ReallocAsyncCtx + 60 | 0; //@line 31224
  HEAP32[$219 >> 2] = $42; //@line 31225
  $220 = $ReallocAsyncCtx + 64 | 0; //@line 31226
  HEAP32[$220 >> 2] = $44; //@line 31227
  $221 = $ReallocAsyncCtx + 68 | 0; //@line 31228
  HEAP32[$221 >> 2] = $48; //@line 31229
  $222 = $ReallocAsyncCtx + 72 | 0; //@line 31230
  HEAP32[$222 >> 2] = $54; //@line 31231
  $223 = $ReallocAsyncCtx + 76 | 0; //@line 31232
  HEAP32[$223 >> 2] = $56; //@line 31233
  $224 = $ReallocAsyncCtx + 80 | 0; //@line 31234
  HEAP32[$224 >> 2] = $58; //@line 31235
  $225 = $ReallocAsyncCtx + 84 | 0; //@line 31236
  HEAP32[$225 >> 2] = $60; //@line 31237
  $226 = $ReallocAsyncCtx + 88 | 0; //@line 31238
  HEAP32[$226 >> 2] = $173; //@line 31239
  $227 = $ReallocAsyncCtx + 92 | 0; //@line 31240
  HEAP32[$227 >> 2] = $76; //@line 31241
  $228 = $ReallocAsyncCtx + 96 | 0; //@line 31242
  HEAP32[$228 >> 2] = $78; //@line 31243
  $229 = $ReallocAsyncCtx + 100 | 0; //@line 31244
  HEAP32[$229 >> 2] = $80; //@line 31245
  $230 = $ReallocAsyncCtx + 104 | 0; //@line 31246
  HEAP32[$230 >> 2] = $84; //@line 31247
  $231 = $ReallocAsyncCtx + 108 | 0; //@line 31248
  HEAP32[$231 >> 2] = $86; //@line 31249
  $232 = $ReallocAsyncCtx + 112 | 0; //@line 31250
  HEAP32[$232 >> 2] = $88; //@line 31251
  $233 = $ReallocAsyncCtx + 116 | 0; //@line 31252
  HEAP32[$233 >> 2] = $90; //@line 31253
  $234 = $ReallocAsyncCtx + 120 | 0; //@line 31254
  HEAP32[$234 >> 2] = $94; //@line 31255
  $235 = $ReallocAsyncCtx + 124 | 0; //@line 31256
  HEAP32[$235 >> 2] = $96; //@line 31257
  $236 = $ReallocAsyncCtx + 128 | 0; //@line 31258
  HEAP32[$236 >> 2] = $174; //@line 31259
  $237 = $ReallocAsyncCtx + 132 | 0; //@line 31260
  HEAP32[$237 >> 2] = $102; //@line 31261
  $238 = $ReallocAsyncCtx + 136 | 0; //@line 31262
  HEAP32[$238 >> 2] = $104; //@line 31263
  $239 = $ReallocAsyncCtx + 140 | 0; //@line 31264
  HEAP32[$239 >> 2] = $106; //@line 31265
  $240 = $ReallocAsyncCtx + 144 | 0; //@line 31266
  HEAP32[$240 >> 2] = $110; //@line 31267
  $241 = $ReallocAsyncCtx + 148 | 0; //@line 31268
  HEAP32[$241 >> 2] = $114; //@line 31269
  $242 = $ReallocAsyncCtx + 152 | 0; //@line 31270
  HEAP32[$242 >> 2] = $116; //@line 31271
  $243 = $ReallocAsyncCtx + 156 | 0; //@line 31272
  HEAP32[$243 >> 2] = $120; //@line 31273
  $244 = $ReallocAsyncCtx + 160 | 0; //@line 31274
  HEAP32[$244 >> 2] = $124; //@line 31275
  sp = STACKTOP; //@line 31276
  return;
 }
 HEAP32[___async_retval >> 2] = $204; //@line 31280
 ___async_unwind = 0; //@line 31281
 HEAP32[$ReallocAsyncCtx >> 2] = 587; //@line 31282
 $205 = $ReallocAsyncCtx + 4 | 0; //@line 31283
 HEAP32[$205 >> 2] = $8; //@line 31284
 $206 = $ReallocAsyncCtx + 8 | 0; //@line 31285
 HEAP32[$206 >> 2] = $10; //@line 31286
 $207 = $ReallocAsyncCtx + 12 | 0; //@line 31287
 HEAP32[$207 >> 2] = $12; //@line 31288
 $208 = $ReallocAsyncCtx + 16 | 0; //@line 31289
 HEAP32[$208 >> 2] = $14; //@line 31290
 $209 = $ReallocAsyncCtx + 20 | 0; //@line 31291
 HEAP32[$209 >> 2] = $16; //@line 31292
 $210 = $ReallocAsyncCtx + 24 | 0; //@line 31293
 HEAP32[$210 >> 2] = $22; //@line 31294
 $211 = $ReallocAsyncCtx + 28 | 0; //@line 31295
 HEAP32[$211 >> 2] = $20; //@line 31296
 $212 = $ReallocAsyncCtx + 32 | 0; //@line 31297
 HEAP32[$212 >> 2] = $26; //@line 31298
 $213 = $ReallocAsyncCtx + 36 | 0; //@line 31299
 HEAP32[$213 >> 2] = $28; //@line 31300
 $214 = $ReallocAsyncCtx + 40 | 0; //@line 31301
 HEAP32[$214 >> 2] = $32; //@line 31302
 $215 = $ReallocAsyncCtx + 44 | 0; //@line 31303
 HEAP32[$215 >> 2] = $34; //@line 31304
 $216 = $ReallocAsyncCtx + 48 | 0; //@line 31305
 HEAP32[$216 >> 2] = $36; //@line 31306
 $217 = $ReallocAsyncCtx + 52 | 0; //@line 31307
 HEAP32[$217 >> 2] = $38; //@line 31308
 $218 = $ReallocAsyncCtx + 56 | 0; //@line 31309
 HEAP32[$218 >> 2] = $40; //@line 31310
 $219 = $ReallocAsyncCtx + 60 | 0; //@line 31311
 HEAP32[$219 >> 2] = $42; //@line 31312
 $220 = $ReallocAsyncCtx + 64 | 0; //@line 31313
 HEAP32[$220 >> 2] = $44; //@line 31314
 $221 = $ReallocAsyncCtx + 68 | 0; //@line 31315
 HEAP32[$221 >> 2] = $48; //@line 31316
 $222 = $ReallocAsyncCtx + 72 | 0; //@line 31317
 HEAP32[$222 >> 2] = $54; //@line 31318
 $223 = $ReallocAsyncCtx + 76 | 0; //@line 31319
 HEAP32[$223 >> 2] = $56; //@line 31320
 $224 = $ReallocAsyncCtx + 80 | 0; //@line 31321
 HEAP32[$224 >> 2] = $58; //@line 31322
 $225 = $ReallocAsyncCtx + 84 | 0; //@line 31323
 HEAP32[$225 >> 2] = $60; //@line 31324
 $226 = $ReallocAsyncCtx + 88 | 0; //@line 31325
 HEAP32[$226 >> 2] = $173; //@line 31326
 $227 = $ReallocAsyncCtx + 92 | 0; //@line 31327
 HEAP32[$227 >> 2] = $76; //@line 31328
 $228 = $ReallocAsyncCtx + 96 | 0; //@line 31329
 HEAP32[$228 >> 2] = $78; //@line 31330
 $229 = $ReallocAsyncCtx + 100 | 0; //@line 31331
 HEAP32[$229 >> 2] = $80; //@line 31332
 $230 = $ReallocAsyncCtx + 104 | 0; //@line 31333
 HEAP32[$230 >> 2] = $84; //@line 31334
 $231 = $ReallocAsyncCtx + 108 | 0; //@line 31335
 HEAP32[$231 >> 2] = $86; //@line 31336
 $232 = $ReallocAsyncCtx + 112 | 0; //@line 31337
 HEAP32[$232 >> 2] = $88; //@line 31338
 $233 = $ReallocAsyncCtx + 116 | 0; //@line 31339
 HEAP32[$233 >> 2] = $90; //@line 31340
 $234 = $ReallocAsyncCtx + 120 | 0; //@line 31341
 HEAP32[$234 >> 2] = $94; //@line 31342
 $235 = $ReallocAsyncCtx + 124 | 0; //@line 31343
 HEAP32[$235 >> 2] = $96; //@line 31344
 $236 = $ReallocAsyncCtx + 128 | 0; //@line 31345
 HEAP32[$236 >> 2] = $174; //@line 31346
 $237 = $ReallocAsyncCtx + 132 | 0; //@line 31347
 HEAP32[$237 >> 2] = $102; //@line 31348
 $238 = $ReallocAsyncCtx + 136 | 0; //@line 31349
 HEAP32[$238 >> 2] = $104; //@line 31350
 $239 = $ReallocAsyncCtx + 140 | 0; //@line 31351
 HEAP32[$239 >> 2] = $106; //@line 31352
 $240 = $ReallocAsyncCtx + 144 | 0; //@line 31353
 HEAP32[$240 >> 2] = $110; //@line 31354
 $241 = $ReallocAsyncCtx + 148 | 0; //@line 31355
 HEAP32[$241 >> 2] = $114; //@line 31356
 $242 = $ReallocAsyncCtx + 152 | 0; //@line 31357
 HEAP32[$242 >> 2] = $116; //@line 31358
 $243 = $ReallocAsyncCtx + 156 | 0; //@line 31359
 HEAP32[$243 >> 2] = $120; //@line 31360
 $244 = $ReallocAsyncCtx + 160 | 0; //@line 31361
 HEAP32[$244 >> 2] = $124; //@line 31362
 sp = STACKTOP; //@line 31363
 return;
}
function __ZN7LoRaMac11schedule_txEv($0) {
 $0 = $0 | 0;
 var $$1 = 0, $$pre$phiZ2D = 0, $$sink = 0, $1 = 0, $100 = 0, $11 = 0, $114 = 0, $117 = 0, $118 = 0, $120 = 0, $121 = 0, $135 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $159 = 0, $162 = 0, $164 = 0, $165 = 0, $166 = 0, $191 = 0, $192 = 0, $194 = 0, $2 = 0, $20 = 0, $202 = 0, $220 = 0, $223 = 0, $232 = 0, $234 = 0, $28 = 0, $3 = 0, $34 = 0, $35 = 0, $37 = 0, $44 = 0, $47 = 0, $48 = 0, $49 = 0, $6 = 0, $71 = 0, $72 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx13 = 0, $AsyncCtx16 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx30 = 0, $AsyncCtx34 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, sp = 0;
 sp = STACKTOP; //@line 12919
 STACKTOP = STACKTOP + 64 | 0; //@line 12920
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 12920
 $vararg_buffer6 = sp + 24 | 0; //@line 12921
 $vararg_buffer4 = sp + 16 | 0; //@line 12922
 $vararg_buffer1 = sp + 8 | 0; //@line 12923
 $vararg_buffer = sp; //@line 12924
 $1 = sp + 44 | 0; //@line 12925
 $2 = sp + 40 | 0; //@line 12926
 $3 = sp + 28 | 0; //@line 12927
 HEAP32[$2 >> 2] = 0; //@line 12928
 switch (HEAP8[$0 + 1152 >> 0] | 0) {
 case 0:
  {
   $6 = $0 + 984 | 0; //@line 12933
   HEAP32[$6 >> 2] = 0; //@line 12934
   $$pre$phiZ2D = $6; //@line 12935
   break;
  }
 case -1:
  {
   $$1 = -1011; //@line 12939
   STACKTOP = sp; //@line 12940
   return $$1 | 0; //@line 12940
  }
 default:
  {
   $$pre$phiZ2D = $0 + 984 | 0; //@line 12945
  }
 }
 $8 = HEAP8[$0 + 379 >> 0] | 0; //@line 12949
 $9 = $0 + 372 | 0; //@line 12950
 HEAP8[$1 >> 0] = HEAP8[$9 >> 0] | 0; //@line 12952
 $11 = $0 + 375 | 0; //@line 12953
 HEAP8[$11 >> 0] = 1; //@line 12954
 HEAP8[$1 + 2 >> 0] = 1; //@line 12956
 HEAP8[$1 + 3 >> 0] = $8; //@line 12958
 $14 = $0 + 356 | 0; //@line 12959
 HEAP32[$1 + 4 >> 2] = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$14 >> 2] | 0, HEAP32[$0 + 988 >> 2] | 0) | 0; //@line 12965
 $20 = $0 + 992 | 0; //@line 12966
 HEAP32[$1 + 8 >> 2] = HEAP32[$20 >> 2]; //@line 12969
 HEAP8[$1 + 1 >> 0] = HEAP8[$0 + 376 >> 0] | 0; //@line 12973
 __ZN7LoRaPHY17calculate_backoffEP16backoff_params_s(HEAP32[$0 >> 2] | 0, $1); //@line 12975
 $28 = HEAP32[$20 >> 2] | 0; //@line 12977
 $34 = (Math_imul($28, HEAPU16[$0 + 1154 >> 1] | 0) | 0) + ((HEAP32[$$pre$phiZ2D >> 2] | 0) - $28) | 0; //@line 12983
 HEAP32[$$pre$phiZ2D >> 2] = $34; //@line 12984
 HEAP32[$3 >> 2] = $34; //@line 12985
 $35 = $0 + 1097 | 0; //@line 12986
 $37 = $3 + 8 | 0; //@line 12988
 HEAP8[$37 >> 0] = HEAP8[$35 >> 0] | 0; //@line 12989
 HEAP8[$11 >> 0] = 1; //@line 12990
 HEAP8[$3 + 10 >> 0] = 1; //@line 12992
 HEAP8[$3 + 9 >> 0] = HEAP8[$9 >> 0] | 0; //@line 12995
 HEAP32[$3 + 4 >> 2] = HEAP32[$0 + 980 >> 2]; //@line 12999
 $44 = HEAP32[$0 >> 2] | 0; //@line 13000
 $47 = HEAP32[(HEAP32[$44 >> 2] | 0) + 56 >> 2] | 0; //@line 13003
 $48 = $0 + 378 | 0; //@line 13004
 $AsyncCtx = _emscripten_alloc_async_context(84, sp) | 0; //@line 13005
 $49 = FUNCTION_TABLE_iiiiii[$47 & 7]($44, $3, $48, $2, $$pre$phiZ2D) | 0; //@line 13006
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 392; //@line 13009
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 13011
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 13013
  HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 13015
  HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 13017
  HEAP32[$AsyncCtx + 20 >> 2] = $48; //@line 13019
  HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer4; //@line 13021
  HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer4; //@line 13023
  HEAP32[$AsyncCtx + 32 >> 2] = $2; //@line 13025
  HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer6; //@line 13027
  HEAP32[$AsyncCtx + 40 >> 2] = $vararg_buffer6; //@line 13029
  HEAP32[$AsyncCtx + 44 >> 2] = $9; //@line 13031
  HEAP32[$AsyncCtx + 48 >> 2] = $35; //@line 13033
  HEAP32[$AsyncCtx + 52 >> 2] = $14; //@line 13035
  HEAP32[$AsyncCtx + 56 >> 2] = $vararg_buffer; //@line 13037
  HEAP32[$AsyncCtx + 60 >> 2] = $vararg_buffer; //@line 13039
  HEAP32[$AsyncCtx + 64 >> 2] = $37; //@line 13041
  HEAP32[$AsyncCtx + 68 >> 2] = $vararg_buffer1; //@line 13043
  HEAP32[$AsyncCtx + 72 >> 2] = $vararg_buffer1; //@line 13045
  HEAP32[$AsyncCtx + 76 >> 2] = $3; //@line 13047
  HEAP32[$AsyncCtx + 80 >> 2] = $$pre$phiZ2D; //@line 13049
  sp = STACKTOP; //@line 13050
  STACKTOP = sp; //@line 13051
  return 0; //@line 13051
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 13053
 L9 : do {
  if (!$49) {
   while (1) {
    $71 = __ZN7LoRaPHY23get_default_tx_datarateEv(HEAP32[$0 >> 2] | 0) | 0; //@line 13058
    HEAP8[$35 >> 0] = $71; //@line 13059
    HEAP8[$37 >> 0] = $71; //@line 13060
    $72 = HEAP32[$0 >> 2] | 0; //@line 13061
    $75 = HEAP32[(HEAP32[$72 >> 2] | 0) + 56 >> 2] | 0; //@line 13064
    $AsyncCtx10 = _emscripten_alloc_async_context(84, sp) | 0; //@line 13065
    $76 = FUNCTION_TABLE_iiiiii[$75 & 7]($72, $3, $48, $2, $$pre$phiZ2D) | 0; //@line 13066
    if (___async) {
     break;
    }
    _emscripten_free_async_context($AsyncCtx10 | 0); //@line 13071
    if ($76) {
     break L9;
    }
   }
   HEAP32[$AsyncCtx10 >> 2] = 393; //@line 13076
   HEAP32[$AsyncCtx10 + 4 >> 2] = $0; //@line 13078
   HEAP32[$AsyncCtx10 + 8 >> 2] = $0; //@line 13080
   HEAP32[$AsyncCtx10 + 12 >> 2] = $3; //@line 13082
   HEAP32[$AsyncCtx10 + 16 >> 2] = $2; //@line 13084
   HEAP32[$AsyncCtx10 + 20 >> 2] = $48; //@line 13086
   HEAP32[$AsyncCtx10 + 24 >> 2] = $vararg_buffer4; //@line 13088
   HEAP32[$AsyncCtx10 + 28 >> 2] = $vararg_buffer4; //@line 13090
   HEAP32[$AsyncCtx10 + 32 >> 2] = $2; //@line 13092
   HEAP32[$AsyncCtx10 + 36 >> 2] = $vararg_buffer6; //@line 13094
   HEAP32[$AsyncCtx10 + 40 >> 2] = $vararg_buffer6; //@line 13096
   HEAP32[$AsyncCtx10 + 44 >> 2] = $9; //@line 13098
   HEAP32[$AsyncCtx10 + 48 >> 2] = $35; //@line 13100
   HEAP32[$AsyncCtx10 + 52 >> 2] = $14; //@line 13102
   HEAP32[$AsyncCtx10 + 56 >> 2] = $vararg_buffer; //@line 13104
   HEAP32[$AsyncCtx10 + 60 >> 2] = $vararg_buffer; //@line 13106
   HEAP32[$AsyncCtx10 + 64 >> 2] = $37; //@line 13108
   HEAP32[$AsyncCtx10 + 68 >> 2] = $vararg_buffer1; //@line 13110
   HEAP32[$AsyncCtx10 + 72 >> 2] = $vararg_buffer1; //@line 13112
   HEAP32[$AsyncCtx10 + 76 >> 2] = $3; //@line 13114
   HEAP32[$AsyncCtx10 + 80 >> 2] = $$pre$phiZ2D; //@line 13116
   sp = STACKTOP; //@line 13117
   STACKTOP = sp; //@line 13118
   return 0; //@line 13118
  }
 } while (0);
 _printf(12171, $vararg_buffer) | 0; //@line 13121
 $100 = HEAP8[$37 >> 0] | 0; //@line 13125
 HEAP32[$vararg_buffer1 >> 2] = HEAPU8[$48 >> 0]; //@line 13126
 HEAP32[$vararg_buffer1 + 4 >> 2] = $100; //@line 13128
 _printf(12184, $vararg_buffer1) | 0; //@line 13129
 $AsyncCtx27 = _emscripten_alloc_async_context(56, sp) | 0; //@line 13130
 _putchar(10) | 0; //@line 13131
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 394; //@line 13134
  HEAP32[$AsyncCtx27 + 4 >> 2] = $0; //@line 13136
  HEAP32[$AsyncCtx27 + 8 >> 2] = $0; //@line 13138
  HEAP32[$AsyncCtx27 + 12 >> 2] = $9; //@line 13140
  HEAP32[$AsyncCtx27 + 16 >> 2] = $35; //@line 13142
  HEAP32[$AsyncCtx27 + 20 >> 2] = $3; //@line 13144
  HEAP32[$AsyncCtx27 + 24 >> 2] = $2; //@line 13146
  HEAP32[$AsyncCtx27 + 28 >> 2] = $2; //@line 13148
  HEAP32[$AsyncCtx27 + 32 >> 2] = $48; //@line 13150
  HEAP32[$AsyncCtx27 + 36 >> 2] = $vararg_buffer4; //@line 13152
  HEAP32[$AsyncCtx27 + 40 >> 2] = $vararg_buffer4; //@line 13154
  HEAP32[$AsyncCtx27 + 44 >> 2] = $vararg_buffer6; //@line 13156
  HEAP32[$AsyncCtx27 + 48 >> 2] = $vararg_buffer6; //@line 13158
  HEAP32[$AsyncCtx27 + 52 >> 2] = $14; //@line 13160
  sp = STACKTOP; //@line 13161
  STACKTOP = sp; //@line 13162
  return 0; //@line 13162
 }
 _emscripten_free_async_context($AsyncCtx27 | 0); //@line 13164
 $114 = HEAP32[$0 >> 2] | 0; //@line 13165
 $117 = HEAP32[(HEAP32[$114 >> 2] | 0) + 72 >> 2] | 0; //@line 13168
 $118 = HEAP8[$35 >> 0] | 0; //@line 13169
 $120 = HEAP8[$0 + 1129 >> 0] | 0; //@line 13171
 $AsyncCtx13 = _emscripten_alloc_async_context(56, sp) | 0; //@line 13172
 $121 = FUNCTION_TABLE_iiii[$117 & 15]($114, $118, $120) | 0; //@line 13173
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 395; //@line 13176
  HEAP32[$AsyncCtx13 + 4 >> 2] = $0; //@line 13178
  HEAP32[$AsyncCtx13 + 8 >> 2] = $0; //@line 13180
  HEAP32[$AsyncCtx13 + 12 >> 2] = $3; //@line 13182
  HEAP32[$AsyncCtx13 + 16 >> 2] = $2; //@line 13184
  HEAP32[$AsyncCtx13 + 20 >> 2] = $48; //@line 13186
  HEAP32[$AsyncCtx13 + 24 >> 2] = $vararg_buffer4; //@line 13188
  HEAP32[$AsyncCtx13 + 28 >> 2] = $vararg_buffer4; //@line 13190
  HEAP32[$AsyncCtx13 + 32 >> 2] = $2; //@line 13192
  HEAP32[$AsyncCtx13 + 36 >> 2] = $vararg_buffer6; //@line 13194
  HEAP32[$AsyncCtx13 + 40 >> 2] = $vararg_buffer6; //@line 13196
  HEAP32[$AsyncCtx13 + 44 >> 2] = $9; //@line 13198
  HEAP32[$AsyncCtx13 + 48 >> 2] = $14; //@line 13200
  HEAP32[$AsyncCtx13 + 52 >> 2] = $35; //@line 13202
  sp = STACKTOP; //@line 13203
  STACKTOP = sp; //@line 13204
  return 0; //@line 13204
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 13206
 $135 = HEAP32[$0 >> 2] | 0; //@line 13207
 $138 = HEAP32[(HEAP32[$135 >> 2] | 0) + 28 >> 2] | 0; //@line 13210
 $139 = $0 + 1104 | 0; //@line 13211
 $140 = HEAP8[$139 >> 0] | 0; //@line 13212
 $141 = $0 + 1100 | 0; //@line 13213
 $142 = HEAP32[$141 >> 2] | 0; //@line 13214
 $AsyncCtx16 = _emscripten_alloc_async_context(64, sp) | 0; //@line 13216
 FUNCTION_TABLE_viiiii[$138 & 7]($135, $121, $140, $142, $0 + 1160 | 0); //@line 13217
 if (___async) {
  HEAP32[$AsyncCtx16 >> 2] = 396; //@line 13220
  HEAP32[$AsyncCtx16 + 4 >> 2] = $0; //@line 13222
  HEAP32[$AsyncCtx16 + 8 >> 2] = $0; //@line 13224
  HEAP32[$AsyncCtx16 + 12 >> 2] = $139; //@line 13226
  HEAP32[$AsyncCtx16 + 16 >> 2] = $141; //@line 13228
  HEAP32[$AsyncCtx16 + 20 >> 2] = $9; //@line 13230
  HEAP32[$AsyncCtx16 + 24 >> 2] = $35; //@line 13232
  HEAP32[$AsyncCtx16 + 28 >> 2] = $3; //@line 13234
  HEAP32[$AsyncCtx16 + 32 >> 2] = $2; //@line 13236
  HEAP32[$AsyncCtx16 + 36 >> 2] = $2; //@line 13238
  HEAP32[$AsyncCtx16 + 40 >> 2] = $48; //@line 13240
  HEAP32[$AsyncCtx16 + 44 >> 2] = $vararg_buffer4; //@line 13242
  HEAP32[$AsyncCtx16 + 48 >> 2] = $vararg_buffer4; //@line 13244
  HEAP32[$AsyncCtx16 + 52 >> 2] = $vararg_buffer6; //@line 13246
  HEAP32[$AsyncCtx16 + 56 >> 2] = $vararg_buffer6; //@line 13248
  HEAP32[$AsyncCtx16 + 60 >> 2] = $14; //@line 13250
  sp = STACKTOP; //@line 13251
  STACKTOP = sp; //@line 13252
  return 0; //@line 13252
 }
 _emscripten_free_async_context($AsyncCtx16 | 0); //@line 13254
 $159 = HEAP32[$0 >> 2] | 0; //@line 13255
 $162 = HEAP32[(HEAP32[$159 >> 2] | 0) + 28 >> 2] | 0; //@line 13258
 $164 = HEAP8[$0 + 1136 >> 0] | 0; //@line 13260
 $165 = HEAP8[$139 >> 0] | 0; //@line 13261
 $166 = HEAP32[$141 >> 2] | 0; //@line 13262
 $AsyncCtx19 = _emscripten_alloc_async_context(56, sp) | 0; //@line 13264
 FUNCTION_TABLE_viiiii[$162 & 7]($159, $164, $165, $166, $0 + 1184 | 0); //@line 13265
 if (___async) {
  HEAP32[$AsyncCtx19 >> 2] = 397; //@line 13268
  HEAP32[$AsyncCtx19 + 4 >> 2] = $9; //@line 13270
  HEAP32[$AsyncCtx19 + 8 >> 2] = $0; //@line 13272
  HEAP32[$AsyncCtx19 + 12 >> 2] = $35; //@line 13274
  HEAP32[$AsyncCtx19 + 16 >> 2] = $0; //@line 13276
  HEAP32[$AsyncCtx19 + 20 >> 2] = $3; //@line 13278
  HEAP32[$AsyncCtx19 + 24 >> 2] = $2; //@line 13280
  HEAP32[$AsyncCtx19 + 28 >> 2] = $2; //@line 13282
  HEAP32[$AsyncCtx19 + 32 >> 2] = $48; //@line 13284
  HEAP32[$AsyncCtx19 + 36 >> 2] = $vararg_buffer4; //@line 13286
  HEAP32[$AsyncCtx19 + 40 >> 2] = $vararg_buffer4; //@line 13288
  HEAP32[$AsyncCtx19 + 44 >> 2] = $vararg_buffer6; //@line 13290
  HEAP32[$AsyncCtx19 + 48 >> 2] = $vararg_buffer6; //@line 13292
  HEAP32[$AsyncCtx19 + 52 >> 2] = $14; //@line 13294
  sp = STACKTOP; //@line 13295
  STACKTOP = sp; //@line 13296
  return 0; //@line 13296
 }
 _emscripten_free_async_context($AsyncCtx19 | 0); //@line 13298
 do {
  if (!(HEAP8[$9 >> 0] | 0)) {
   HEAP32[$0 + 972 >> 2] = (HEAP32[$0 + 1172 >> 2] | 0) + (HEAP32[$0 + 1120 >> 2] | 0); //@line 13309
   $$sink = $0 + 1124 | 0; //@line 13311
  } else {
   $191 = HEAP8[$0 + 893 >> 0] | 0; //@line 13314
   $192 = HEAP8[$35 >> 0] | 0; //@line 13315
   $194 = __ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($0 + 4 | 0) | 0; //@line 13317
   $202 = ($194 & 255) + ($191 & 255) | 0; //@line 13325
   if ($202 >>> 0 < 256 & $202 >>> 0 <= ((__ZN7LoRaPHY15get_max_payloadEhb(HEAP32[$0 >> 2] | 0, $192, (HEAP8[$0 + 369 >> 0] | 0) != 0) | 0) & 255) >>> 0) {
    HEAP32[$0 + 972 >> 2] = (HEAP32[$0 + 1172 >> 2] | 0) + (HEAP32[$0 + 1112 >> 2] | 0); //@line 13337
    $$sink = $0 + 1116 | 0; //@line 13339
    break;
   } else {
    $$1 = -1010; //@line 13342
    STACKTOP = sp; //@line 13343
    return $$1 | 0; //@line 13343
   }
  }
 } while (0);
 HEAP32[$0 + 976 >> 2] = (HEAP32[$0 + 1196 >> 2] | 0) + (HEAP32[$$sink >> 2] | 0); //@line 13352
 if (!(HEAP32[$2 >> 2] | 0)) {
  $220 = HEAP8[$48 >> 0] | 0; //@line 13356
  $AsyncCtx34 = _emscripten_alloc_async_context(12, sp) | 0; //@line 13357
  __ZN7LoRaMac21send_frame_on_channelEh($0, $220) | 0; //@line 13358
  if (___async) {
   HEAP32[$AsyncCtx34 >> 2] = 398; //@line 13361
   HEAP32[$AsyncCtx34 + 4 >> 2] = $3; //@line 13363
   HEAP32[$AsyncCtx34 + 8 >> 2] = $2; //@line 13365
   sp = STACKTOP; //@line 13366
   STACKTOP = sp; //@line 13367
   return 0; //@line 13367
  }
  _emscripten_free_async_context($AsyncCtx34 | 0); //@line 13369
  $$1 = 0; //@line 13370
  STACKTOP = sp; //@line 13371
  return $$1 | 0; //@line 13371
 }
 $223 = $0 + 968 | 0; //@line 13373
 HEAP32[$223 >> 2] = HEAP32[$223 >> 2] | 16; //@line 13376
 _printf(12171, $vararg_buffer4) | 0; //@line 13377
 HEAP32[$vararg_buffer6 >> 2] = HEAP32[$2 >> 2]; //@line 13379
 _printf(12211, $vararg_buffer6) | 0; //@line 13380
 $AsyncCtx23 = _emscripten_alloc_async_context(24, sp) | 0; //@line 13381
 _putchar(10) | 0; //@line 13382
 if (___async) {
  HEAP32[$AsyncCtx23 >> 2] = 399; //@line 13385
  HEAP32[$AsyncCtx23 + 4 >> 2] = $14; //@line 13387
  HEAP32[$AsyncCtx23 + 8 >> 2] = $0; //@line 13389
  HEAP32[$AsyncCtx23 + 12 >> 2] = $2; //@line 13391
  HEAP32[$AsyncCtx23 + 16 >> 2] = $3; //@line 13393
  HEAP32[$AsyncCtx23 + 20 >> 2] = $2; //@line 13395
  sp = STACKTOP; //@line 13396
  STACKTOP = sp; //@line 13397
  return 0; //@line 13397
 }
 _emscripten_free_async_context($AsyncCtx23 | 0); //@line 13399
 $232 = HEAP32[$14 >> 2] | 0; //@line 13400
 $234 = HEAP32[$2 >> 2] | 0; //@line 13402
 $AsyncCtx30 = _emscripten_alloc_async_context(12, sp) | 0; //@line 13403
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($232, $0 + 1016 | 0, $234); //@line 13404
 if (___async) {
  HEAP32[$AsyncCtx30 >> 2] = 400; //@line 13407
  HEAP32[$AsyncCtx30 + 4 >> 2] = $3; //@line 13409
  HEAP32[$AsyncCtx30 + 8 >> 2] = $2; //@line 13411
  sp = STACKTOP; //@line 13412
  STACKTOP = sp; //@line 13413
  return 0; //@line 13413
 }
 _emscripten_free_async_context($AsyncCtx30 | 0); //@line 13415
 $$1 = 0; //@line 13416
 STACKTOP = sp; //@line 13417
 return $$1 | 0; //@line 13417
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$016 = 0, $$05$i = 0, $$06$i = 0, $100 = 0, $108 = 0, $111 = 0, $117 = 0, $119 = 0, $126 = 0, $129 = 0, $134 = 0, $136 = 0, $142 = 0, $145 = 0, $149 = 0, $151 = 0, $156 = 0, $159 = 0, $17 = 0, $39 = 0, $4 = 0, $5 = 0, $51 = 0, $52 = 0, $6 = 0, $61 = 0, $69 = 0, $7 = 0, $76 = 0, $77 = 0, $79 = 0, $8 = 0, $88 = 0, $91 = 0, $98 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx18 = 0, $AsyncCtx21 = 0, $AsyncCtx24 = 0, $AsyncCtx27 = 0, $AsyncCtx3 = 0, $AsyncCtx30 = 0, $AsyncCtx34 = 0, $AsyncCtx37 = 0, $AsyncCtx40 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 14468
 STACKTOP = STACKTOP + 80 | 0; //@line 14469
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80); //@line 14469
 $4 = sp + 64 | 0; //@line 14470
 $5 = sp + 48 | 0; //@line 14471
 $6 = sp + 32 | 0; //@line 14472
 $7 = sp + 16 | 0; //@line 14473
 $8 = sp; //@line 14474
 HEAP32[$0 + 1328 >> 2] = $3; //@line 14476
 if (!$1) {
  $$016 = -1003; //@line 14479
  STACKTOP = sp; //@line 14480
  return $$016 | 0; //@line 14480
 }
 HEAP32[$0 >> 2] = $2; //@line 14482
 __ZN11LoRaMacMlme23activate_mlme_subsystemEP7LoRaPHY($0 + 264 | 0, $2); //@line 14484
 __ZN10LoRaMacMib22activate_mib_subsystemEP7LoRaPHY($0 + 348 | 0, HEAP32[$0 >> 2] | 0); //@line 14487
 __ZN18LoRaMacChannelPlan30activate_channelplan_subsystemEP7LoRaPHY($0 + 352 | 0, HEAP32[$0 >> 2] | 0); //@line 14490
 HEAP32[$0 + 1324 >> 2] = $1; //@line 14492
 $17 = $0 + 360 | 0; //@line 14493
 HEAP8[$0 + 944 >> 0] = 0; //@line 14495
 HEAP32[$17 >> 2] = 0; //@line 14496
 HEAP32[$0 + 968 >> 2] = 0; //@line 14498
 HEAP8[$0 + 897 >> 0] = 0; //@line 14500
 HEAP8[$0 + 896 >> 0] = 1; //@line 14502
 HEAP8[$0 + 369 >> 0] = 0; //@line 14504
 HEAP32[$0 + 980 >> 2] = 0; //@line 14506
 HEAP32[$0 + 984 >> 2] = 0; //@line 14508
 __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb(HEAP32[$0 >> 2] | 0, $17, 1); //@line 14510
 HEAP32[$0 + 1100 >> 2] = 10; //@line 14512
 HEAP8[$0 + 1104 >> 0] = 6; //@line 14514
 HEAP8[$0 + 1128 >> 0] = 1; //@line 14516
 HEAP8[$0 + 372 >> 0] = 0; //@line 14518
 HEAP32[$0 + 956 >> 2] = 0; //@line 14520
 HEAP32[$0 + 960 >> 2] = 0; //@line 14522
 HEAP32[$0 + 964 >> 2] = 0; //@line 14524
 HEAP8[$0 + 380 >> 0] = 0; //@line 14526
 HEAP8[$0 + 894 >> 0] = 1; //@line 14528
 HEAP8[$0 + 895 >> 0] = 1; //@line 14530
 HEAP8[$0 + 377 >> 0] = 0; //@line 14532
 HEAP8[$0 + 1152 >> 0] = 0; //@line 14534
 HEAP16[$0 + 1154 >> 1] = 1; //@line 14536
 $39 = $0 + 4 | 0; //@line 14537
 __ZN14LoRaMacCommand20clear_command_bufferEv($39); //@line 14538
 __ZN14LoRaMacCommand19clear_repeat_bufferEv($39); //@line 14539
 __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($39); //@line 14540
 HEAP8[$0 + 371 >> 0] = 1; //@line 14542
 __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb(HEAP32[$0 >> 2] | 0, $17, 0); //@line 14544
 HEAP8[$0 + 373 >> 0] = 0; //@line 14546
 HEAP8[$0 + 374 >> 0] = 0; //@line 14548
 $$05$i = HEAP32[$0 + 1208 >> 2] | 0; //@line 14550
 if ($$05$i | 0) {
  $$06$i = $$05$i; //@line 14553
  do {
   HEAP32[$$06$i + 36 >> 2] = 0; //@line 14556
   $$06$i = HEAP32[$$06$i + 40 >> 2] | 0; //@line 14558
  } while (($$06$i | 0) != 0);
 }
 HEAP8[$0 + 378 >> 0] = 0; //@line 14568
 HEAP8[$0 + 379 >> 0] = 0; //@line 14570
 $51 = HEAP32[$0 >> 2] | 0; //@line 14571
 $AsyncCtx34 = _emscripten_alloc_async_context(32, sp) | 0; //@line 14572
 $52 = __ZN7LoRaPHY13get_radio_rngEv($51) | 0; //@line 14573
 if (___async) {
  HEAP32[$AsyncCtx34 >> 2] = 423; //@line 14576
  HEAP32[$AsyncCtx34 + 4 >> 2] = $0; //@line 14578
  HEAP32[$AsyncCtx34 + 8 >> 2] = $5; //@line 14580
  HEAP32[$AsyncCtx34 + 12 >> 2] = $6; //@line 14582
  HEAP32[$AsyncCtx34 + 16 >> 2] = $7; //@line 14584
  HEAP32[$AsyncCtx34 + 20 >> 2] = $8; //@line 14586
  HEAP32[$AsyncCtx34 + 24 >> 2] = $4; //@line 14588
  HEAP32[$AsyncCtx34 + 28 >> 2] = $0; //@line 14590
  sp = STACKTOP; //@line 14591
  STACKTOP = sp; //@line 14592
  return 0; //@line 14592
 }
 _emscripten_free_async_context($AsyncCtx34 | 0); //@line 14594
 _srand($52); //@line 14595
 HEAP8[$0 + 368 >> 0] = 1; //@line 14597
 $61 = HEAP32[$0 >> 2] | 0; //@line 14598
 $AsyncCtx37 = _emscripten_alloc_async_context(32, sp) | 0; //@line 14599
 __ZN7LoRaPHY25setup_public_network_modeEb($61, 1); //@line 14600
 if (___async) {
  HEAP32[$AsyncCtx37 >> 2] = 424; //@line 14603
  HEAP32[$AsyncCtx37 + 4 >> 2] = $0; //@line 14605
  HEAP32[$AsyncCtx37 + 8 >> 2] = $5; //@line 14607
  HEAP32[$AsyncCtx37 + 12 >> 2] = $6; //@line 14609
  HEAP32[$AsyncCtx37 + 16 >> 2] = $7; //@line 14611
  HEAP32[$AsyncCtx37 + 20 >> 2] = $8; //@line 14613
  HEAP32[$AsyncCtx37 + 24 >> 2] = $4; //@line 14615
  HEAP32[$AsyncCtx37 + 28 >> 2] = $0; //@line 14617
  sp = STACKTOP; //@line 14618
  STACKTOP = sp; //@line 14619
  return 0; //@line 14619
 }
 _emscripten_free_async_context($AsyncCtx37 | 0); //@line 14621
 $69 = HEAP32[$0 >> 2] | 0; //@line 14622
 $AsyncCtx40 = _emscripten_alloc_async_context(28, sp) | 0; //@line 14623
 __ZN7LoRaPHY18put_radio_to_sleepEv($69); //@line 14624
 if (___async) {
  HEAP32[$AsyncCtx40 >> 2] = 425; //@line 14627
  HEAP32[$AsyncCtx40 + 4 >> 2] = $0; //@line 14629
  HEAP32[$AsyncCtx40 + 8 >> 2] = $5; //@line 14631
  HEAP32[$AsyncCtx40 + 12 >> 2] = $6; //@line 14633
  HEAP32[$AsyncCtx40 + 16 >> 2] = $7; //@line 14635
  HEAP32[$AsyncCtx40 + 20 >> 2] = $8; //@line 14637
  HEAP32[$AsyncCtx40 + 24 >> 2] = $4; //@line 14639
  sp = STACKTOP; //@line 14640
  STACKTOP = sp; //@line 14641
  return 0; //@line 14641
 }
 _emscripten_free_async_context($AsyncCtx40 | 0); //@line 14643
 $76 = $0 + 356 | 0; //@line 14644
 $77 = HEAP32[$76 >> 2] | 0; //@line 14645
 $79 = $4 + 12 | 0; //@line 14647
 HEAP32[$4 >> 2] = 426; //@line 14648
 HEAP32[$4 + 4 >> 2] = 0; //@line 14650
 HEAP32[$4 + 8 >> 2] = $0; //@line 14652
 HEAP32[$79 >> 2] = 836; //@line 14653
 $AsyncCtx30 = _emscripten_alloc_async_context(36, sp) | 0; //@line 14654
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($77, $0 + 996 | 0, $4); //@line 14655
 if (___async) {
  HEAP32[$AsyncCtx30 >> 2] = 427; //@line 14658
  HEAP32[$AsyncCtx30 + 4 >> 2] = $76; //@line 14660
  HEAP32[$AsyncCtx30 + 8 >> 2] = $0; //@line 14662
  HEAP32[$AsyncCtx30 + 12 >> 2] = $5; //@line 14664
  HEAP32[$AsyncCtx30 + 16 >> 2] = $6; //@line 14666
  HEAP32[$AsyncCtx30 + 20 >> 2] = $7; //@line 14668
  HEAP32[$AsyncCtx30 + 24 >> 2] = $8; //@line 14670
  HEAP32[$AsyncCtx30 + 28 >> 2] = $4; //@line 14672
  HEAP32[$AsyncCtx30 + 32 >> 2] = $79; //@line 14674
  sp = STACKTOP; //@line 14675
  STACKTOP = sp; //@line 14676
  return 0; //@line 14676
 }
 _emscripten_free_async_context($AsyncCtx30 | 0); //@line 14678
 $88 = HEAP32[$79 >> 2] | 0; //@line 14679
 do {
  if ($88 | 0) {
   $91 = HEAP32[$88 + 8 >> 2] | 0; //@line 14684
   $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 14685
   FUNCTION_TABLE_vi[$91 & 1023]($4); //@line 14686
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 428; //@line 14689
    HEAP32[$AsyncCtx + 4 >> 2] = $76; //@line 14691
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 14693
    HEAP32[$AsyncCtx + 12 >> 2] = $5; //@line 14695
    HEAP32[$AsyncCtx + 16 >> 2] = $6; //@line 14697
    HEAP32[$AsyncCtx + 20 >> 2] = $7; //@line 14699
    HEAP32[$AsyncCtx + 24 >> 2] = $8; //@line 14701
    sp = STACKTOP; //@line 14702
    STACKTOP = sp; //@line 14703
    return 0; //@line 14703
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 14705
    break;
   }
  }
 } while (0);
 $98 = HEAP32[$76 >> 2] | 0; //@line 14710
 $100 = $5 + 12 | 0; //@line 14712
 HEAP32[$5 >> 2] = 429; //@line 14713
 HEAP32[$5 + 4 >> 2] = 0; //@line 14715
 HEAP32[$5 + 8 >> 2] = $0; //@line 14717
 HEAP32[$100 >> 2] = 836; //@line 14718
 $AsyncCtx27 = _emscripten_alloc_async_context(32, sp) | 0; //@line 14719
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($98, $0 + 1016 | 0, $5); //@line 14720
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 430; //@line 14723
  HEAP32[$AsyncCtx27 + 4 >> 2] = $76; //@line 14725
  HEAP32[$AsyncCtx27 + 8 >> 2] = $0; //@line 14727
  HEAP32[$AsyncCtx27 + 12 >> 2] = $8; //@line 14729
  HEAP32[$AsyncCtx27 + 16 >> 2] = $5; //@line 14731
  HEAP32[$AsyncCtx27 + 20 >> 2] = $6; //@line 14733
  HEAP32[$AsyncCtx27 + 24 >> 2] = $7; //@line 14735
  HEAP32[$AsyncCtx27 + 28 >> 2] = $100; //@line 14737
  sp = STACKTOP; //@line 14738
  STACKTOP = sp; //@line 14739
  return 0; //@line 14739
 }
 _emscripten_free_async_context($AsyncCtx27 | 0); //@line 14741
 $108 = HEAP32[$100 >> 2] | 0; //@line 14742
 do {
  if ($108 | 0) {
   $111 = HEAP32[$108 + 8 >> 2] | 0; //@line 14747
   $AsyncCtx3 = _emscripten_alloc_async_context(24, sp) | 0; //@line 14748
   FUNCTION_TABLE_vi[$111 & 1023]($5); //@line 14749
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 431; //@line 14752
    HEAP32[$AsyncCtx3 + 4 >> 2] = $76; //@line 14754
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 14756
    HEAP32[$AsyncCtx3 + 12 >> 2] = $6; //@line 14758
    HEAP32[$AsyncCtx3 + 16 >> 2] = $7; //@line 14760
    HEAP32[$AsyncCtx3 + 20 >> 2] = $8; //@line 14762
    sp = STACKTOP; //@line 14763
    STACKTOP = sp; //@line 14764
    return 0; //@line 14764
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 14766
    break;
   }
  }
 } while (0);
 $117 = HEAP32[$76 >> 2] | 0; //@line 14771
 $119 = $6 + 12 | 0; //@line 14773
 HEAP32[$6 >> 2] = 432; //@line 14774
 HEAP32[$6 + 4 >> 2] = 0; //@line 14776
 HEAP32[$6 + 8 >> 2] = $0; //@line 14778
 HEAP32[$119 >> 2] = 836; //@line 14779
 $AsyncCtx24 = _emscripten_alloc_async_context(28, sp) | 0; //@line 14780
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($117, $0 + 1036 | 0, $6); //@line 14781
 if (___async) {
  HEAP32[$AsyncCtx24 >> 2] = 433; //@line 14784
  HEAP32[$AsyncCtx24 + 4 >> 2] = $76; //@line 14786
  HEAP32[$AsyncCtx24 + 8 >> 2] = $0; //@line 14788
  HEAP32[$AsyncCtx24 + 12 >> 2] = $8; //@line 14790
  HEAP32[$AsyncCtx24 + 16 >> 2] = $7; //@line 14792
  HEAP32[$AsyncCtx24 + 20 >> 2] = $6; //@line 14794
  HEAP32[$AsyncCtx24 + 24 >> 2] = $119; //@line 14796
  sp = STACKTOP; //@line 14797
  STACKTOP = sp; //@line 14798
  return 0; //@line 14798
 }
 _emscripten_free_async_context($AsyncCtx24 | 0); //@line 14800
 $126 = HEAP32[$119 >> 2] | 0; //@line 14801
 do {
  if ($126 | 0) {
   $129 = HEAP32[$126 + 8 >> 2] | 0; //@line 14806
   $AsyncCtx7 = _emscripten_alloc_async_context(20, sp) | 0; //@line 14807
   FUNCTION_TABLE_vi[$129 & 1023]($6); //@line 14808
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 434; //@line 14811
    HEAP32[$AsyncCtx7 + 4 >> 2] = $76; //@line 14813
    HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 14815
    HEAP32[$AsyncCtx7 + 12 >> 2] = $7; //@line 14817
    HEAP32[$AsyncCtx7 + 16 >> 2] = $8; //@line 14819
    sp = STACKTOP; //@line 14820
    STACKTOP = sp; //@line 14821
    return 0; //@line 14821
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 14823
    break;
   }
  }
 } while (0);
 $134 = HEAP32[$76 >> 2] | 0; //@line 14828
 $136 = $7 + 12 | 0; //@line 14830
 HEAP32[$7 >> 2] = 435; //@line 14831
 HEAP32[$7 + 4 >> 2] = 0; //@line 14833
 HEAP32[$7 + 8 >> 2] = $0; //@line 14835
 HEAP32[$136 >> 2] = 836; //@line 14836
 $AsyncCtx21 = _emscripten_alloc_async_context(24, sp) | 0; //@line 14837
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($134, $0 + 1056 | 0, $7); //@line 14838
 if (___async) {
  HEAP32[$AsyncCtx21 >> 2] = 436; //@line 14841
  HEAP32[$AsyncCtx21 + 4 >> 2] = $136; //@line 14843
  HEAP32[$AsyncCtx21 + 8 >> 2] = $76; //@line 14845
  HEAP32[$AsyncCtx21 + 12 >> 2] = $0; //@line 14847
  HEAP32[$AsyncCtx21 + 16 >> 2] = $8; //@line 14849
  HEAP32[$AsyncCtx21 + 20 >> 2] = $7; //@line 14851
  sp = STACKTOP; //@line 14852
  STACKTOP = sp; //@line 14853
  return 0; //@line 14853
 }
 _emscripten_free_async_context($AsyncCtx21 | 0); //@line 14855
 $142 = HEAP32[$136 >> 2] | 0; //@line 14856
 do {
  if ($142 | 0) {
   $145 = HEAP32[$142 + 8 >> 2] | 0; //@line 14861
   $AsyncCtx11 = _emscripten_alloc_async_context(16, sp) | 0; //@line 14862
   FUNCTION_TABLE_vi[$145 & 1023]($7); //@line 14863
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 437; //@line 14866
    HEAP32[$AsyncCtx11 + 4 >> 2] = $76; //@line 14868
    HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 14870
    HEAP32[$AsyncCtx11 + 12 >> 2] = $8; //@line 14872
    sp = STACKTOP; //@line 14873
    STACKTOP = sp; //@line 14874
    return 0; //@line 14874
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 14876
    break;
   }
  }
 } while (0);
 $149 = HEAP32[$76 >> 2] | 0; //@line 14881
 $151 = $8 + 12 | 0; //@line 14883
 HEAP32[$8 >> 2] = 438; //@line 14884
 HEAP32[$8 + 4 >> 2] = 0; //@line 14886
 HEAP32[$8 + 8 >> 2] = $0; //@line 14888
 HEAP32[$151 >> 2] = 836; //@line 14889
 $AsyncCtx18 = _emscripten_alloc_async_context(20, sp) | 0; //@line 14890
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($149, $0 + 1076 | 0, $8); //@line 14891
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 439; //@line 14894
  HEAP32[$AsyncCtx18 + 4 >> 2] = $151; //@line 14896
  HEAP32[$AsyncCtx18 + 8 >> 2] = $76; //@line 14898
  HEAP32[$AsyncCtx18 + 12 >> 2] = $0; //@line 14900
  HEAP32[$AsyncCtx18 + 16 >> 2] = $8; //@line 14902
  sp = STACKTOP; //@line 14903
  STACKTOP = sp; //@line 14904
  return 0; //@line 14904
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 14906
 $156 = HEAP32[$151 >> 2] | 0; //@line 14907
 do {
  if ($156 | 0) {
   $159 = HEAP32[$156 + 8 >> 2] | 0; //@line 14912
   $AsyncCtx15 = _emscripten_alloc_async_context(12, sp) | 0; //@line 14913
   FUNCTION_TABLE_vi[$159 & 1023]($8); //@line 14914
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 440; //@line 14917
    HEAP32[$AsyncCtx15 + 4 >> 2] = $76; //@line 14919
    HEAP32[$AsyncCtx15 + 8 >> 2] = $0; //@line 14921
    sp = STACKTOP; //@line 14922
    STACKTOP = sp; //@line 14923
    return 0; //@line 14923
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 14925
    break;
   }
  }
 } while (0);
 HEAP32[$0 + 988 >> 2] = __ZN18LoRaWANTimeHandler16get_current_timeEv(HEAP32[$76 >> 2] | 0) | 0; //@line 14933
 $$016 = 0; //@line 14934
 STACKTOP = sp; //@line 14935
 return $$016 | 0; //@line 14935
}
function _equeue_dispatch($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$03956$i = 0, $$03956$i$phi = 0, $$04055$i = 0, $$0405571$i = 0, $$04063$i = 0, $$04159$i = 0, $$04258$i = 0, $$057$i = 0, $$065 = 0, $$06790 = 0, $$2 = 0, $$idx = 0, $$sink$in$i$i = 0, $$sroa$0$i = 0, $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i73 = 0, $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i72 = 0, $10 = 0, $103 = 0, $11 = 0, $12 = 0, $126 = 0, $128 = 0, $129 = 0, $130 = 0, $132 = 0, $133 = 0, $141 = 0, $142 = 0, $144 = 0, $147 = 0, $149 = 0, $152 = 0, $155 = 0, $162 = 0, $166 = 0, $169 = 0, $175 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $3 = 0, $30 = 0, $39 = 0, $4 = 0, $42 = 0, $43 = 0, $45 = 0, $5 = 0, $6 = 0, $69 = 0, $7 = 0, $71 = 0, $74 = 0, $8 = 0, $9 = 0, $93 = 0, $94 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0, $$04159$i$looptemp = 0, $$04258$i$looptemp = 0;
 sp = STACKTOP; //@line 2747
 STACKTOP = STACKTOP + 16 | 0; //@line 2748
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 2748
 $$sroa$0$i = sp; //@line 2749
 $2 = _equeue_tick() | 0; //@line 2750
 $3 = $2 + $1 | 0; //@line 2751
 $4 = $0 + 36 | 0; //@line 2752
 HEAP8[$4 >> 0] = 0; //@line 2753
 $5 = $0 + 128 | 0; //@line 2754
 $6 = $0 + 9 | 0; //@line 2755
 $7 = $0 + 4 | 0; //@line 2756
 $8 = ($1 | 0) > -1; //@line 2757
 $9 = $0 + 48 | 0; //@line 2758
 $10 = $0 + 8 | 0; //@line 2759
 $$idx = $0 + 16 | 0; //@line 2760
 $11 = $0 + 156 | 0; //@line 2761
 $12 = $0 + 24 | 0; //@line 2762
 $$0 = $2; //@line 2763
 L1 : while (1) {
  _equeue_mutex_lock($5); //@line 2765
  HEAP8[$6 >> 0] = (HEAPU8[$6 >> 0] | 0) + 1; //@line 2770
  if (((HEAP32[$7 >> 2] | 0) - $$0 | 0) < 1) {
   HEAP32[$7 >> 2] = $$0; //@line 2775
  }
  $20 = HEAP32[$0 >> 2] | 0; //@line 2777
  HEAP32[$$sroa$0$i >> 2] = $20; //@line 2778
  $21 = $20; //@line 2779
  L6 : do {
   if (!$20) {
    $$04055$i = $$sroa$0$i; //@line 2783
    $30 = $21; //@line 2783
    label = 8; //@line 2784
   } else {
    $$04063$i = $$sroa$0$i; //@line 2786
    $24 = $21; //@line 2786
    do {
     if (((HEAP32[$24 + 20 >> 2] | 0) - $$0 | 0) >= 1) {
      $$04055$i = $$04063$i; //@line 2793
      $30 = $24; //@line 2793
      label = 8; //@line 2794
      break L6;
     }
     $$04063$i = $24 + 8 | 0; //@line 2797
     $24 = HEAP32[$$04063$i >> 2] | 0; //@line 2798
    } while (($24 | 0) != 0);
    HEAP32[$0 >> 2] = 0; //@line 2806
    $$0405571$i = $$04063$i; //@line 2807
   }
  } while (0);
  if ((label | 0) == 8) {
   label = 0; //@line 2811
   HEAP32[$0 >> 2] = $30; //@line 2812
   if (!$30) {
    $$0405571$i = $$04055$i; //@line 2815
   } else {
    HEAP32[$30 + 16 >> 2] = $0; //@line 2818
    $$0405571$i = $$04055$i; //@line 2819
   }
  }
  HEAP32[$$0405571$i >> 2] = 0; //@line 2822
  _equeue_mutex_unlock($5); //@line 2823
  $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i72 = HEAP32[$$sroa$0$i >> 2] | 0; //@line 2824
  if (!$$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i72) {} else {
   $$04159$i = $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i72; //@line 2828
   $$04258$i = $$sroa$0$i; //@line 2828
   do {
    $$04258$i$looptemp = $$04258$i;
    $$04258$i = $$04159$i + 8 | 0; //@line 2830
    $$04159$i$looptemp = $$04159$i;
    $$04159$i = HEAP32[$$04258$i >> 2] | 0; //@line 2831
    $$03956$i = 0; //@line 2832
    $$057$i = $$04159$i$looptemp; //@line 2832
    while (1) {
     HEAP32[$$057$i + 8 >> 2] = $$03956$i; //@line 2835
     $39 = HEAP32[$$057$i + 12 >> 2] | 0; //@line 2837
     if (!$39) {
      break;
     } else {
      $$03956$i$phi = $$057$i; //@line 2842
      $$057$i = $39; //@line 2842
      $$03956$i = $$03956$i$phi; //@line 2842
     }
    }
    HEAP32[$$04258$i$looptemp >> 2] = $$057$i; //@line 2845
   } while (($$04159$i | 0) != 0);
   $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i73 = HEAP32[$$sroa$0$i >> 2] | 0; //@line 2853
   if ($$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i73 | 0) {
    $$06790 = $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i73; //@line 2856
    while (1) {
     $42 = $$06790 + 8 | 0; //@line 2858
     $43 = HEAP32[$42 >> 2] | 0; //@line 2859
     $45 = HEAP32[$$06790 + 32 >> 2] | 0; //@line 2861
     if ($45 | 0) {
      $AsyncCtx = _emscripten_alloc_async_context(84, sp) | 0; //@line 2865
      FUNCTION_TABLE_vi[$45 & 1023]($$06790 + 36 | 0); //@line 2866
      if (___async) {
       label = 18; //@line 2869
       break L1;
      }
      _emscripten_free_async_context($AsyncCtx | 0); //@line 2872
     }
     $69 = HEAP32[$$06790 + 24 >> 2] | 0; //@line 2875
     if (($69 | 0) > -1) {
      $71 = $$06790 + 20 | 0; //@line 2878
      HEAP32[$71 >> 2] = (HEAP32[$71 >> 2] | 0) + $69; //@line 2881
      $74 = _equeue_tick() | 0; //@line 2882
      $AsyncCtx11 = _emscripten_alloc_async_context(76, sp) | 0; //@line 2883
      _equeue_enqueue($0, $$06790, $74) | 0; //@line 2884
      if (___async) {
       label = 22; //@line 2887
       break L1;
      }
      _emscripten_free_async_context($AsyncCtx11 | 0); //@line 2890
     } else {
      $93 = $$06790 + 4 | 0; //@line 2893
      $94 = HEAP8[$93 >> 0] | 0; //@line 2894
      HEAP8[$93 >> 0] = (($94 + 1 & 255) << HEAP32[$$idx >> 2] | 0) == 0 ? 1 : ($94 & 255) + 1 & 255; //@line 2903
      $103 = HEAP32[$$06790 + 28 >> 2] | 0; //@line 2905
      if ($103 | 0) {
       $AsyncCtx3 = _emscripten_alloc_async_context(84, sp) | 0; //@line 2909
       FUNCTION_TABLE_vi[$103 & 1023]($$06790 + 36 | 0); //@line 2910
       if (___async) {
        label = 26; //@line 2913
        break L1;
       }
       _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2916
      }
      _equeue_mutex_lock($11); //@line 2918
      $126 = HEAP32[$12 >> 2] | 0; //@line 2919
      L37 : do {
       if (!$126) {
        $$02329$i$i = $12; //@line 2923
        label = 34; //@line 2924
       } else {
        $128 = HEAP32[$$06790 >> 2] | 0; //@line 2926
        $$025$i$i = $12; //@line 2927
        $130 = $126; //@line 2927
        while (1) {
         $129 = HEAP32[$130 >> 2] | 0; //@line 2929
         if ($129 >>> 0 >= $128 >>> 0) {
          break;
         }
         $132 = $130 + 8 | 0; //@line 2934
         $133 = HEAP32[$132 >> 2] | 0; //@line 2935
         if (!$133) {
          $$02329$i$i = $132; //@line 2938
          label = 34; //@line 2939
          break L37;
         } else {
          $$025$i$i = $132; //@line 2942
          $130 = $133; //@line 2942
         }
        }
        if (($129 | 0) == ($128 | 0)) {
         HEAP32[$$06790 + 12 >> 2] = $130; //@line 2948
         $$02330$i$i = $$025$i$i; //@line 2951
         $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 2951
        } else {
         $$02329$i$i = $$025$i$i; //@line 2953
         label = 34; //@line 2954
        }
       }
      } while (0);
      if ((label | 0) == 34) {
       label = 0; //@line 2959
       HEAP32[$$06790 + 12 >> 2] = 0; //@line 2961
       $$02330$i$i = $$02329$i$i; //@line 2962
       $$sink$in$i$i = $$02329$i$i; //@line 2962
      }
      HEAP32[$42 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 2965
      HEAP32[$$02330$i$i >> 2] = $$06790; //@line 2966
      _equeue_mutex_unlock($11); //@line 2967
     }
     if (!$43) {
      break;
     } else {
      $$06790 = $43; //@line 2973
     }
    }
   }
  }
  $141 = _equeue_tick() | 0; //@line 2978
  if ($8) {
   $142 = $3 - $141 | 0; //@line 2980
   if (($142 | 0) < 1) {
    label = 39; //@line 2983
    break;
   } else {
    $$065 = $142; //@line 2986
   }
  } else {
   $$065 = -1; //@line 2989
  }
  _equeue_mutex_lock($5); //@line 2991
  $162 = HEAP32[$0 >> 2] | 0; //@line 2992
  if (!$162) {
   $$2 = $$065; //@line 2995
  } else {
   $166 = (HEAP32[$162 + 20 >> 2] | 0) - $141 | 0; //@line 2999
   $169 = $166 & ~($166 >> 31); //@line 3002
   $$2 = $169 >>> 0 < $$065 >>> 0 ? $169 : $$065; //@line 3005
  }
  _equeue_mutex_unlock($5); //@line 3007
  _equeue_sema_wait($9, $$2) | 0; //@line 3008
  if (HEAP8[$10 >> 0] | 0) {
   _equeue_mutex_lock($5); //@line 3012
   if (HEAP8[$10 >> 0] | 0) {
    label = 51; //@line 3016
    break;
   }
   _equeue_mutex_unlock($5); //@line 3019
  }
  $175 = _equeue_tick() | 0; //@line 3021
  $AsyncCtx15 = _emscripten_alloc_async_context(76, sp) | 0; //@line 3022
  _wait_ms(20); //@line 3023
  if (___async) {
   label = 54; //@line 3026
   break;
  }
  _emscripten_free_async_context($AsyncCtx15 | 0); //@line 3029
  $$0 = $175; //@line 3030
 }
 if ((label | 0) == 18) {
  HEAP32[$AsyncCtx >> 2] = 105; //@line 3033
  HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 3035
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 3037
  HEAP32[$AsyncCtx + 12 >> 2] = $5; //@line 3039
  HEAP32[$AsyncCtx + 16 >> 2] = $6; //@line 3041
  HEAP32[$AsyncCtx + 20 >> 2] = $4; //@line 3043
  HEAP32[$AsyncCtx + 24 >> 2] = $10; //@line 3045
  HEAP32[$AsyncCtx + 28 >> 2] = $0; //@line 3047
  HEAP32[$AsyncCtx + 32 >> 2] = $3; //@line 3049
  HEAP32[$AsyncCtx + 36 >> 2] = $$sroa$0$i; //@line 3051
  HEAP32[$AsyncCtx + 40 >> 2] = $$sroa$0$i; //@line 3053
  HEAP32[$AsyncCtx + 44 >> 2] = $0; //@line 3055
  HEAP32[$AsyncCtx + 48 >> 2] = $$sroa$0$i; //@line 3057
  HEAP32[$AsyncCtx + 52 >> 2] = $9; //@line 3059
  HEAP32[$AsyncCtx + 56 >> 2] = $$06790; //@line 3061
  HEAP32[$AsyncCtx + 60 >> 2] = $43; //@line 3063
  HEAP32[$AsyncCtx + 64 >> 2] = $11; //@line 3065
  HEAP32[$AsyncCtx + 68 >> 2] = $12; //@line 3067
  HEAP32[$AsyncCtx + 72 >> 2] = $$idx; //@line 3069
  HEAP8[$AsyncCtx + 76 >> 0] = $8 & 1; //@line 3072
  HEAP32[$AsyncCtx + 80 >> 2] = $42; //@line 3074
  sp = STACKTOP; //@line 3075
  STACKTOP = sp; //@line 3076
  return;
 } else if ((label | 0) == 22) {
  HEAP32[$AsyncCtx11 >> 2] = 106; //@line 3079
  HEAP32[$AsyncCtx11 + 4 >> 2] = $7; //@line 3081
  HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 3083
  HEAP32[$AsyncCtx11 + 12 >> 2] = $5; //@line 3085
  HEAP32[$AsyncCtx11 + 16 >> 2] = $6; //@line 3087
  HEAP32[$AsyncCtx11 + 20 >> 2] = $4; //@line 3089
  HEAP32[$AsyncCtx11 + 24 >> 2] = $10; //@line 3091
  HEAP32[$AsyncCtx11 + 28 >> 2] = $0; //@line 3093
  HEAP32[$AsyncCtx11 + 32 >> 2] = $3; //@line 3095
  HEAP32[$AsyncCtx11 + 36 >> 2] = $$sroa$0$i; //@line 3097
  HEAP32[$AsyncCtx11 + 40 >> 2] = $$sroa$0$i; //@line 3099
  HEAP32[$AsyncCtx11 + 44 >> 2] = $0; //@line 3101
  HEAP32[$AsyncCtx11 + 48 >> 2] = $$sroa$0$i; //@line 3103
  HEAP32[$AsyncCtx11 + 52 >> 2] = $9; //@line 3105
  HEAP32[$AsyncCtx11 + 56 >> 2] = $11; //@line 3107
  HEAP32[$AsyncCtx11 + 60 >> 2] = $12; //@line 3109
  HEAP32[$AsyncCtx11 + 64 >> 2] = $$idx; //@line 3111
  HEAP8[$AsyncCtx11 + 68 >> 0] = $8 & 1; //@line 3114
  HEAP32[$AsyncCtx11 + 72 >> 2] = $43; //@line 3116
  sp = STACKTOP; //@line 3117
  STACKTOP = sp; //@line 3118
  return;
 } else if ((label | 0) == 26) {
  HEAP32[$AsyncCtx3 >> 2] = 107; //@line 3121
  HEAP32[$AsyncCtx3 + 4 >> 2] = $7; //@line 3123
  HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 3125
  HEAP32[$AsyncCtx3 + 12 >> 2] = $5; //@line 3127
  HEAP32[$AsyncCtx3 + 16 >> 2] = $6; //@line 3129
  HEAP32[$AsyncCtx3 + 20 >> 2] = $4; //@line 3131
  HEAP32[$AsyncCtx3 + 24 >> 2] = $10; //@line 3133
  HEAP32[$AsyncCtx3 + 28 >> 2] = $0; //@line 3135
  HEAP32[$AsyncCtx3 + 32 >> 2] = $3; //@line 3137
  HEAP32[$AsyncCtx3 + 36 >> 2] = $$sroa$0$i; //@line 3139
  HEAP32[$AsyncCtx3 + 40 >> 2] = $$sroa$0$i; //@line 3141
  HEAP32[$AsyncCtx3 + 44 >> 2] = $0; //@line 3143
  HEAP32[$AsyncCtx3 + 48 >> 2] = $$sroa$0$i; //@line 3145
  HEAP32[$AsyncCtx3 + 52 >> 2] = $9; //@line 3147
  HEAP32[$AsyncCtx3 + 56 >> 2] = $11; //@line 3149
  HEAP32[$AsyncCtx3 + 60 >> 2] = $12; //@line 3151
  HEAP32[$AsyncCtx3 + 64 >> 2] = $$idx; //@line 3153
  HEAP8[$AsyncCtx3 + 68 >> 0] = $8 & 1; //@line 3156
  HEAP32[$AsyncCtx3 + 72 >> 2] = $43; //@line 3158
  HEAP32[$AsyncCtx3 + 76 >> 2] = $$06790; //@line 3160
  HEAP32[$AsyncCtx3 + 80 >> 2] = $42; //@line 3162
  sp = STACKTOP; //@line 3163
  STACKTOP = sp; //@line 3164
  return;
 } else if ((label | 0) == 39) {
  $144 = $0 + 40 | 0; //@line 3167
  if (HEAP32[$144 >> 2] | 0) {
   _equeue_mutex_lock($5); //@line 3171
   $147 = HEAP32[$144 >> 2] | 0; //@line 3172
   do {
    if ($147 | 0) {
     $149 = HEAP32[$0 >> 2] | 0; //@line 3176
     if ($149 | 0) {
      $152 = HEAP32[$0 + 44 >> 2] | 0; //@line 3180
      $155 = (HEAP32[$149 + 20 >> 2] | 0) - $141 | 0; //@line 3183
      $AsyncCtx7 = _emscripten_alloc_async_context(16, sp) | 0; //@line 3187
      FUNCTION_TABLE_vii[$147 & 31]($152, $155 & ~($155 >> 31)); //@line 3188
      if (___async) {
       HEAP32[$AsyncCtx7 >> 2] = 108; //@line 3191
       HEAP32[$AsyncCtx7 + 4 >> 2] = $4; //@line 3193
       HEAP32[$AsyncCtx7 + 8 >> 2] = $5; //@line 3195
       HEAP32[$AsyncCtx7 + 12 >> 2] = $10; //@line 3197
       sp = STACKTOP; //@line 3198
       STACKTOP = sp; //@line 3199
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx7 | 0); //@line 3201
       break;
      }
     }
    }
   } while (0);
   HEAP8[$4 >> 0] = 1; //@line 3207
   _equeue_mutex_unlock($5); //@line 3208
  }
  HEAP8[$10 >> 0] = 0; //@line 3210
  STACKTOP = sp; //@line 3211
  return;
 } else if ((label | 0) == 51) {
  HEAP8[$10 >> 0] = 0; //@line 3214
  _equeue_mutex_unlock($5); //@line 3215
  STACKTOP = sp; //@line 3216
  return;
 } else if ((label | 0) == 54) {
  HEAP32[$AsyncCtx15 >> 2] = 109; //@line 3219
  HEAP32[$AsyncCtx15 + 4 >> 2] = $7; //@line 3221
  HEAP32[$AsyncCtx15 + 8 >> 2] = $0; //@line 3223
  HEAP32[$AsyncCtx15 + 12 >> 2] = $175; //@line 3225
  HEAP32[$AsyncCtx15 + 16 >> 2] = $5; //@line 3227
  HEAP32[$AsyncCtx15 + 20 >> 2] = $6; //@line 3229
  HEAP32[$AsyncCtx15 + 24 >> 2] = $4; //@line 3231
  HEAP32[$AsyncCtx15 + 28 >> 2] = $10; //@line 3233
  HEAP32[$AsyncCtx15 + 32 >> 2] = $0; //@line 3235
  HEAP32[$AsyncCtx15 + 36 >> 2] = $3; //@line 3237
  HEAP32[$AsyncCtx15 + 40 >> 2] = $$sroa$0$i; //@line 3239
  HEAP32[$AsyncCtx15 + 44 >> 2] = $$sroa$0$i; //@line 3241
  HEAP32[$AsyncCtx15 + 48 >> 2] = $0; //@line 3243
  HEAP32[$AsyncCtx15 + 52 >> 2] = $$sroa$0$i; //@line 3245
  HEAP32[$AsyncCtx15 + 56 >> 2] = $9; //@line 3247
  HEAP32[$AsyncCtx15 + 60 >> 2] = $11; //@line 3249
  HEAP32[$AsyncCtx15 + 64 >> 2] = $12; //@line 3251
  HEAP32[$AsyncCtx15 + 68 >> 2] = $$idx; //@line 3253
  HEAP8[$AsyncCtx15 + 72 >> 0] = $8 & 1; //@line 3256
  sp = STACKTOP; //@line 3257
  STACKTOP = sp; //@line 3258
  return;
 }
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$054 = 0, $$055 = 0, $$05564 = 0, $$056 = 0, $$05663 = 0, $$05766 = 0, $$06065 = 0, $$158 = 0, $$15862 = 0, $$259 = 0, $$extract$t = 0, $$pre$phiZ2D = 0, $10 = 0, $103 = 0, $109 = 0, $115 = 0, $12 = 0, $125 = 0, $129 = 0, $142 = 0, $147 = 0, $148 = 0, $16 = 0, $161 = 0, $162 = 0, $163 = 0, $169 = 0, $170 = 0, $174 = 0, $176 = 0, $182 = 0, $183 = 0, $186 = 0, $188 = 0, $201 = 0, $213 = 0, $222 = 0, $227 = 0, $229 = 0, $230 = 0, $231 = 0, $238 = 0, $41 = 0, $6 = 0, $64 = 0, $65 = 0, $7 = 0, $72 = 0, $74 = 0, $8 = 0, $80 = 0, $81 = 0, $86 = 0, $88 = 0, $89 = 0, $9 = 0, $95 = 0, $97 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 13678
 STACKTOP = STACKTOP + 16 | 0; //@line 13679
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 13679
 $6 = sp; //@line 13680
 HEAP32[$6 >> 2] = 0; //@line 13681
 $7 = $0 + 636 | 0; //@line 13682
 HEAP16[$7 >> 1] = 0; //@line 13683
 $8 = $0 + 373 | 0; //@line 13684
 HEAP8[$8 >> 0] = 0; //@line 13685
 $9 = ($4 | 0) == 0; //@line 13686
 $$extract$t = $9 ? 0 : $5 & 255; //@line 13688
 $10 = $0 + 893 | 0; //@line 13689
 HEAP8[$10 >> 0] = $$extract$t; //@line 13690
 $12 = $0 + 381 | 0; //@line 13692
 HEAP8[$12 >> 0] = HEAP8[$1 >> 0] | 0; //@line 13693
 switch ((HEAPU8[$1 >> 0] | 0) >>> 5 & 7) {
 case 0:
  {
   HEAP16[$7 >> 1] = 1; //@line 13699
   $16 = HEAP32[$0 + 904 >> 2] | 0; //@line 13702
   HEAP8[$0 + 389 >> 0] = HEAP8[$16 >> 0] | 0; //@line 13707
   HEAP8[$0 + 388 >> 0] = HEAP8[$16 + 1 >> 0] | 0; //@line 13711
   HEAP8[$0 + 387 >> 0] = HEAP8[$16 + 2 >> 0] | 0; //@line 13715
   HEAP8[$0 + 386 >> 0] = HEAP8[$16 + 3 >> 0] | 0; //@line 13719
   HEAP8[$0 + 385 >> 0] = HEAP8[$16 + 4 >> 0] | 0; //@line 13723
   HEAP8[$0 + 384 >> 0] = HEAP8[$16 + 5 >> 0] | 0; //@line 13727
   HEAP8[$0 + 383 >> 0] = HEAP8[$16 + 6 >> 0] | 0; //@line 13730
   HEAP8[$0 + 382 >> 0] = HEAP8[$16 + 7 >> 0] | 0; //@line 13732
   HEAP16[$7 >> 1] = 9; //@line 13733
   $41 = HEAP32[$0 + 900 >> 2] | 0; //@line 13736
   HEAP8[$0 + 397 >> 0] = HEAP8[$41 >> 0] | 0; //@line 13741
   HEAP8[$0 + 396 >> 0] = HEAP8[$41 + 1 >> 0] | 0; //@line 13745
   HEAP8[$0 + 395 >> 0] = HEAP8[$41 + 2 >> 0] | 0; //@line 13749
   HEAP8[$0 + 394 >> 0] = HEAP8[$41 + 3 >> 0] | 0; //@line 13753
   HEAP8[$0 + 393 >> 0] = HEAP8[$41 + 4 >> 0] | 0; //@line 13757
   HEAP8[$0 + 392 >> 0] = HEAP8[$41 + 5 >> 0] | 0; //@line 13761
   HEAP8[$0 + 391 >> 0] = HEAP8[$41 + 6 >> 0] | 0; //@line 13764
   HEAP8[$0 + 390 >> 0] = HEAP8[$41 + 7 >> 0] | 0; //@line 13766
   HEAP16[$7 >> 1] = 17; //@line 13767
   $64 = HEAP32[$0 >> 2] | 0; //@line 13768
   $AsyncCtx11 = _emscripten_alloc_async_context(24, sp) | 0; //@line 13769
   $65 = __ZN7LoRaPHY13get_radio_rngEv($64) | 0; //@line 13770
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 406; //@line 13773
    HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 13775
    HEAP32[$AsyncCtx11 + 8 >> 2] = $7; //@line 13777
    HEAP32[$AsyncCtx11 + 12 >> 2] = $12; //@line 13779
    HEAP32[$AsyncCtx11 + 16 >> 2] = $6; //@line 13781
    HEAP32[$AsyncCtx11 + 20 >> 2] = $6; //@line 13783
    sp = STACKTOP; //@line 13784
    STACKTOP = sp; //@line 13785
    return 0; //@line 13785
   }
   _emscripten_free_async_context($AsyncCtx11 | 0); //@line 13787
   $72 = $0 + 946 | 0; //@line 13789
   HEAP16[$72 >> 1] = $65; //@line 13790
   $74 = HEAP16[$7 >> 1] | 0; //@line 13792
   HEAP16[$7 >> 1] = $74 + 1 << 16 >> 16; //@line 13794
   HEAP8[($74 & 65535) + ($0 + 381) >> 0] = $65; //@line 13797
   $80 = (HEAPU16[$72 >> 1] | 0) >>> 8 & 255; //@line 13800
   $81 = HEAP16[$7 >> 1] | 0; //@line 13801
   HEAP16[$7 >> 1] = $81 + 1 << 16 >> 16; //@line 13803
   HEAP8[($81 & 65535) + ($0 + 381) >> 0] = $80; //@line 13806
   $86 = HEAP16[$7 >> 1] & 255; //@line 13808
   $88 = HEAP32[$0 + 908 >> 2] | 0; //@line 13810
   $AsyncCtx3 = _emscripten_alloc_async_context(20, sp) | 0; //@line 13811
   $89 = __Z22compute_join_frame_micPKhtS0_Pj($12, $86, $88, $6) | 0; //@line 13812
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 407; //@line 13815
    HEAP32[$AsyncCtx3 + 4 >> 2] = $6; //@line 13817
    HEAP32[$AsyncCtx3 + 8 >> 2] = $7; //@line 13819
    HEAP32[$AsyncCtx3 + 12 >> 2] = $0; //@line 13821
    HEAP32[$AsyncCtx3 + 16 >> 2] = $6; //@line 13823
    sp = STACKTOP; //@line 13824
    STACKTOP = sp; //@line 13825
    return 0; //@line 13825
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 13827
   if ($89 | 0) {
    $$0 = -1014; //@line 13830
    STACKTOP = sp; //@line 13831
    return $$0 | 0; //@line 13831
   }
   $95 = HEAP32[$6 >> 2] | 0; //@line 13833
   $97 = HEAP16[$7 >> 1] | 0; //@line 13835
   HEAP16[$7 >> 1] = $97 + 1 << 16 >> 16; //@line 13837
   HEAP8[($97 & 65535) + ($0 + 381) >> 0] = $95; //@line 13840
   $103 = HEAP16[$7 >> 1] | 0; //@line 13843
   HEAP16[$7 >> 1] = $103 + 1 << 16 >> 16; //@line 13845
   HEAP8[($103 & 65535) + ($0 + 381) >> 0] = $95 >>> 8; //@line 13848
   $109 = HEAP16[$7 >> 1] | 0; //@line 13851
   HEAP16[$7 >> 1] = $109 + 1 << 16 >> 16; //@line 13853
   HEAP8[($109 & 65535) + ($0 + 381) >> 0] = $95 >>> 16; //@line 13856
   $115 = HEAP16[$7 >> 1] | 0; //@line 13859
   HEAP16[$7 >> 1] = $115 + 1 << 16 >> 16; //@line 13861
   HEAP8[($115 & 65535) + ($0 + 381) >> 0] = $95 >>> 24; //@line 13864
   $$0 = 0; //@line 13865
   STACKTOP = sp; //@line 13866
   return $$0 | 0; //@line 13866
  }
 case 4:
  {
   HEAP8[$8 >> 0] = 1; //@line 13870
   break;
  }
 case 2:
  {
   break;
  }
 case 7:
  {
   if ($9 | $$extract$t << 24 >> 24 == 0) {
    $$0 = 0; //@line 13880
    STACKTOP = sp; //@line 13881
    return $$0 | 0; //@line 13881
   }
   _memcpy($0 + 382 | 0, $4 | 0, $$extract$t & 255 | 0) | 0; //@line 13885
   HEAP16[$7 >> 1] = (HEAPU8[$10 >> 0] | 0) + 1; //@line 13890
   $$0 = 0; //@line 13891
   STACKTOP = sp; //@line 13892
   return $$0 | 0; //@line 13892
  }
 default:
  {
   $$0 = -1002; //@line 13896
   STACKTOP = sp; //@line 13897
   return $$0 | 0; //@line 13897
  }
 }
 if (!(HEAP8[$0 + 372 >> 0] | 0)) {
  $$0 = -1009; //@line 13904
  STACKTOP = sp; //@line 13905
  return $$0 | 0; //@line 13905
 }
 if (HEAP8[$0 + 1156 >> 0] | 0) {
  $125 = HEAP32[$0 >> 2] | 0; //@line 13911
  $AsyncCtx7 = _emscripten_alloc_async_context(44, sp) | 0; //@line 13915
  $129 = __ZN7LoRaPHY12get_next_ADREbRaS0_Rj($125, 1, $0 + 1097 | 0, $0 + 1096 | 0, $0 + 964 | 0) | 0; //@line 13916
  if (___async) {
   HEAP32[$AsyncCtx7 >> 2] = 408; //@line 13919
   HEAP8[$AsyncCtx7 + 4 >> 0] = $3; //@line 13921
   HEAP32[$AsyncCtx7 + 8 >> 2] = $4; //@line 13923
   HEAP32[$AsyncCtx7 + 12 >> 2] = $10; //@line 13925
   HEAP32[$AsyncCtx7 + 16 >> 2] = $0; //@line 13927
   HEAP32[$AsyncCtx7 + 20 >> 2] = $6; //@line 13929
   HEAP32[$AsyncCtx7 + 24 >> 2] = $7; //@line 13931
   HEAP32[$AsyncCtx7 + 28 >> 2] = $2; //@line 13933
   HEAP32[$AsyncCtx7 + 32 >> 2] = $6; //@line 13935
   HEAP8[$AsyncCtx7 + 36 >> 0] = $9 & 1; //@line 13938
   HEAP32[$AsyncCtx7 + 40 >> 2] = $12; //@line 13940
   sp = STACKTOP; //@line 13941
   STACKTOP = sp; //@line 13942
   return 0; //@line 13942
  }
  _emscripten_free_async_context($AsyncCtx7 | 0); //@line 13944
  if ($129) {
   HEAP8[$2 >> 0] = HEAP8[$2 >> 0] | 64; //@line 13948
  }
 }
 $142 = $0 + 374 | 0; //@line 13951
 if (!(HEAP8[$142 >> 0] | 0)) {
  $$pre$phiZ2D = $2; //@line 13955
 } else {
  HEAP8[$142 >> 0] = 0; //@line 13957
  HEAP8[$2 >> 0] = HEAP8[$2 >> 0] | 32; //@line 13960
  $$pre$phiZ2D = $2; //@line 13961
 }
 $147 = $0 + 952 | 0; //@line 13963
 $148 = HEAP32[$147 >> 2] | 0; //@line 13964
 HEAP8[$0 + 382 >> 0] = $148; //@line 13967
 HEAP8[$0 + 383 >> 0] = $148 >>> 8; //@line 13971
 HEAP8[$0 + 384 >> 0] = $148 >>> 16; //@line 13975
 HEAP8[$0 + 385 >> 0] = $148 >>> 24; //@line 13979
 $161 = $0 + 386 | 0; //@line 13981
 HEAP8[$161 >> 0] = HEAP8[$$pre$phiZ2D >> 0] | 0; //@line 13982
 $162 = $0 + 956 | 0; //@line 13983
 $163 = HEAP32[$162 >> 2] | 0; //@line 13984
 HEAP8[$0 + 387 >> 0] = $163; //@line 13987
 HEAP8[$0 + 388 >> 0] = $163 >>> 8; //@line 13991
 $169 = $0 + 4 | 0; //@line 13992
 __ZN14LoRaMacCommand30copy_repeat_commands_to_bufferEv($169); //@line 13993
 $170 = __ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($169) | 0; //@line 13994
 do {
  if ($9) {
   label = 27; //@line 13997
  } else {
   if (!(HEAP8[$10 >> 0] | 0)) {
    label = 27; //@line 14002
   } else {
    if (!(__ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($169) | 0)) {
     __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($169); //@line 14006
     $$05564 = $3; //@line 14007
     $$05663 = $4; //@line 14007
     $$15862 = 8; //@line 14007
     label = 31; //@line 14008
     break;
    }
    $174 = $170 & 255; //@line 14011
    if (($170 & 255) >= 16) {
     HEAP8[$10 >> 0] = $170; //@line 14014
     $$055 = 0; //@line 14016
     $$056 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($169) | 0; //@line 14016
     $$158 = 8; //@line 14016
     label = 30; //@line 14017
     break;
    }
    $176 = HEAP8[$$pre$phiZ2D >> 0] | 0; //@line 14020
    $182 = ($176 & 255) + $174 & 15 | $176 & -16; //@line 14026
    HEAP8[$$pre$phiZ2D >> 0] = $182; //@line 14027
    HEAP8[$161 >> 0] = $182; //@line 14028
    $183 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($169) | 0; //@line 14029
    if (!($170 << 24 >> 24)) {
     __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($169); //@line 14032
     $$05564 = $3; //@line 14033
     $$05663 = $4; //@line 14033
     $$15862 = 8; //@line 14033
     label = 31; //@line 14034
     break;
    } else {
     $$05766 = 8; //@line 14037
     $$06065 = 0; //@line 14037
     $186 = 0; //@line 14037
     while (1) {
      $188 = $$05766 + 1 << 24 >> 24; //@line 14041
      HEAP8[($$05766 & 255) + ($0 + 381) >> 0] = HEAP8[$183 + $186 >> 0] | 0; //@line 14044
      $$06065 = $$06065 + 1 << 16 >> 16; //@line 14045
      $186 = $$06065 & 65535; //@line 14046
      if ($186 >>> 0 >= $174 >>> 0) {
       $$055 = $3; //@line 14051
       $$056 = $4; //@line 14051
       $$158 = $188; //@line 14051
       label = 30; //@line 14052
       break;
      } else {
       $$05766 = $188; //@line 14049
      }
     }
    }
   }
  }
 } while (0);
 if ((label | 0) == 27) {
  if (!($170 << 24 >> 24)) {
   $$055 = $3; //@line 14063
   $$056 = $4; //@line 14063
   $$158 = 8; //@line 14063
   label = 30; //@line 14064
  } else {
   if (__ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($169) | 0) {
    HEAP8[$10 >> 0] = $170; //@line 14068
    $$055 = 0; //@line 14070
    $$056 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($169) | 0; //@line 14070
    $$158 = 8; //@line 14070
    label = 30; //@line 14071
   } else {
    $$055 = $3; //@line 14073
    $$056 = $4; //@line 14073
    $$158 = 8; //@line 14073
    label = 30; //@line 14074
   }
  }
 }
 if ((label | 0) == 30) {
  __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($169); //@line 14079
  if (!$$056) {
   $$054 = 0; //@line 14082
   $$259 = $$158; //@line 14082
  } else {
   $$05564 = $$055; //@line 14084
   $$05663 = $$056; //@line 14084
   $$15862 = $$158; //@line 14084
   label = 31; //@line 14085
  }
 }
 do {
  if ((label | 0) == 31) {
   if (!(HEAP8[$10 >> 0] | 0)) {
    $$054 = 0; //@line 14093
    $$259 = $$15862; //@line 14093
   } else {
    $201 = $$15862 + 1 << 24 >> 24; //@line 14095
    HEAP8[($$15862 & 255) + ($0 + 381) >> 0] = $$05564; //@line 14098
    if (!($$05564 << 24 >> 24)) {
     __ZN14LoRaMacCommand20clear_command_bufferEv($169); //@line 14101
     $213 = (__Z15encrypt_payloadPKhtS0_jhjPh($$05663, HEAPU8[$10 >> 0] | 0, $0 + 912 | 0, HEAP32[$147 >> 2] | 0, 0, HEAP32[$162 >> 2] | 0, ($201 & 255) + ($0 + 381) | 0) | 0) == 0; //@line 14110
     $$054 = $213 ? 0 : -1014; //@line 14112
     $$259 = $201; //@line 14112
     break;
    } else {
     $222 = (__Z15encrypt_payloadPKhtS0_jhjPh($$05663, HEAPU8[$10 >> 0] | 0, $0 + 928 | 0, HEAP32[$147 >> 2] | 0, 0, HEAP32[$162 >> 2] | 0, ($201 & 255) + ($0 + 381) | 0) | 0) == 0; //@line 14123
     $$054 = $222 ? 0 : -1014; //@line 14125
     $$259 = $201; //@line 14125
     break;
    }
   }
  }
 } while (0);
 $227 = (HEAPU8[$10 >> 0] | 0) + ($$259 & 255) & 65535; //@line 14135
 HEAP16[$7 >> 1] = $227; //@line 14136
 $229 = HEAP32[$147 >> 2] | 0; //@line 14138
 $230 = HEAP32[$162 >> 2] | 0; //@line 14139
 $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 14140
 $231 = __Z11compute_micPKhtS0_jhjPj($12, $227, $0 + 912 | 0, $229, 0, $230, $6) | 0; //@line 14141
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 409; //@line 14144
  HEAP32[$AsyncCtx + 4 >> 2] = $$054; //@line 14146
  HEAP32[$AsyncCtx + 8 >> 2] = $6; //@line 14148
  HEAP32[$AsyncCtx + 12 >> 2] = $7; //@line 14150
  HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 14152
  HEAP32[$AsyncCtx + 20 >> 2] = $6; //@line 14154
  sp = STACKTOP; //@line 14155
  STACKTOP = sp; //@line 14156
  return 0; //@line 14156
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 14158
 $238 = HEAP32[$6 >> 2] | 0; //@line 14161
 HEAP8[(HEAPU16[$7 >> 1] | 0) + ($0 + 381) >> 0] = $238; //@line 14166
 HEAP8[(HEAPU16[$7 >> 1] | 0) + 1 + ($0 + 381) >> 0] = $238 >>> 8; //@line 14173
 HEAP8[(HEAPU16[$7 >> 1] | 0) + 2 + ($0 + 381) >> 0] = $238 >>> 16; //@line 14180
 HEAP8[(HEAPU16[$7 >> 1] | 0) + 3 + ($0 + 381) >> 0] = $238 >>> 24; //@line 14187
 HEAP16[$7 >> 1] = (HEAPU16[$7 >> 1] | 0) + 4; //@line 14192
 $$0 = ($231 | 0) == 0 ? $$054 : -1014; //@line 14193
 STACKTOP = sp; //@line 14194
 return $$0 | 0; //@line 14194
}
function __ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$080 = 0, $100 = 0, $118 = 0, $12 = 0, $123 = 0, $128 = 0, $133 = 0, $15 = 0, $17 = 0, $19 = 0, $21 = 0, $36 = 0, $4 = 0, $40 = 0, $44 = 0, $55 = 0, $60 = 0, $61 = 0, $70 = 0, $73 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $89 = 0, $94 = 0, $95 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 19283
 L1 : do {
  if (!$1) {
   $$080 = -1003; //@line 19287
  } else {
   $4 = HEAP32[$0 >> 2] | 0; //@line 19289
   if (!$4) {
    $$080 = -1003; //@line 19292
   } else {
    do {
     switch (HEAP32[$1 >> 2] | 0) {
     case 0:
      {
       $8 = HEAP32[$1 + 4 >> 2] | 0; //@line 19299
       HEAP32[$2 >> 2] = $8; //@line 19300
       switch ($8 | 0) {
       case 0:
        {
         $AsyncCtx19 = _emscripten_alloc_async_context(4, sp) | 0; //@line 19303
         __ZN7LoRaPHY18put_radio_to_sleepEv($4); //@line 19304
         if (___async) {
          HEAP32[$AsyncCtx19 >> 2] = 503; //@line 19307
          sp = STACKTOP; //@line 19308
          return 0; //@line 19309
         } else {
          _emscripten_free_async_context($AsyncCtx19 | 0); //@line 19311
          $$080 = 0; //@line 19312
          break L1;
         }
         break;
        }
       case 2:
        {
         break;
        }
       default:
        {
         $$080 = 0; //@line 19321
         break L1;
        }
       }
       HEAP8[$2 + 13 >> 0] = 0; //@line 19326
       $AsyncCtx15 = _emscripten_alloc_async_context(12, sp) | 0; //@line 19327
       __ZN7LoRaPHY18put_radio_to_sleepEv($4); //@line 19328
       if (___async) {
        HEAP32[$AsyncCtx15 >> 2] = 504; //@line 19331
        HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 19333
        HEAP32[$AsyncCtx15 + 8 >> 2] = $2; //@line 19335
        sp = STACKTOP; //@line 19336
        return 0; //@line 19337
       }
       _emscripten_free_async_context($AsyncCtx15 | 0); //@line 19339
       $12 = HEAP32[$0 >> 2] | 0; //@line 19340
       $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 28 >> 2] | 0; //@line 19343
       $17 = HEAP8[$2 + 776 >> 0] | 0; //@line 19345
       $19 = HEAP8[$2 + 744 >> 0] | 0; //@line 19347
       $21 = HEAP32[$2 + 740 >> 2] | 0; //@line 19349
       $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 19351
       FUNCTION_TABLE_viiiii[$15 & 7]($12, $17, $19, $21, $2 + 824 | 0); //@line 19352
       if (___async) {
        HEAP32[$AsyncCtx >> 2] = 505; //@line 19355
        sp = STACKTOP; //@line 19356
        return 0; //@line 19357
       } else {
        _emscripten_free_async_context($AsyncCtx | 0); //@line 19359
        $$080 = 0; //@line 19360
        break L1;
       }
       break;
      }
     case 1:
      {
       HEAP8[$2 + 12 >> 0] = HEAP8[$1 + 4 >> 0] | 0; //@line 19369
       $$080 = 0; //@line 19370
       break L1;
       break;
      }
     case 2:
      {
       HEAP8[$2 + 796 >> 0] = HEAP8[$1 + 4 >> 0] | 0; //@line 19378
       $$080 = 0; //@line 19379
       break L1;
       break;
      }
     case 3:
      {
       HEAP32[$2 + 588 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 19387
       $$080 = 0; //@line 19388
       break L1;
       break;
      }
     case 4:
      {
       HEAP32[$2 + 592 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 19396
       $$080 = 0; //@line 19397
       break L1;
       break;
      }
     case 5:
      {
       $36 = HEAP32[$1 + 4 >> 2] | 0; //@line 19403
       if (!$36) {
        $$080 = -1003; //@line 19406
        break L1;
       }
       dest = $2 + 552 | 0; //@line 19410
       src = $36; //@line 19410
       stop = dest + 16 | 0; //@line 19410
       do {
        HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 19410
        dest = dest + 1 | 0; //@line 19410
        src = src + 1 | 0; //@line 19410
       } while ((dest | 0) < (stop | 0));
       $$080 = 0; //@line 19411
       break L1;
       break;
      }
     case 6:
      {
       $40 = HEAP32[$1 + 4 >> 2] | 0; //@line 19417
       if (!$40) {
        $$080 = -1003; //@line 19420
        break L1;
       }
       dest = $2 + 568 | 0; //@line 19424
       src = $40; //@line 19424
       stop = dest + 16 | 0; //@line 19424
       do {
        HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 19424
        dest = dest + 1 | 0; //@line 19424
        src = src + 1 | 0; //@line 19424
       } while ((dest | 0) < (stop | 0));
       $$080 = 0; //@line 19425
       break L1;
       break;
      }
     case 7:
      {
       $44 = HEAP8[$1 + 4 >> 0] | 0; //@line 19431
       HEAP8[$2 + 8 >> 0] = $44; //@line 19434
       $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 19435
       __ZN7LoRaPHY25setup_public_network_modeEb($4, $44 << 24 >> 24 != 0); //@line 19436
       if (___async) {
        HEAP32[$AsyncCtx7 >> 2] = 506; //@line 19439
        sp = STACKTOP; //@line 19440
        return 0; //@line 19441
       } else {
        _emscripten_free_async_context($AsyncCtx7 | 0); //@line 19443
        $$080 = 0; //@line 19444
        break L1;
       }
       break;
      }
     case 8:
      {
       HEAP8[$2 + 9 >> 0] = HEAP8[$1 + 4 >> 0] | 0; //@line 19453
       $$080 = 0; //@line 19454
       break L1;
       break;
      }
     case 10:
      {
       if (!(__ZN7LoRaPHY18verify_rx_datarateEh($4, HEAP8[$1 + 8 >> 0] | 0) | 0)) {
        $$080 = -1003; //@line 19463
        break L1;
       }
       $55 = $1 + 4 | 0; //@line 19468
       $60 = HEAP32[$55 + 4 >> 2] | 0; //@line 19473
       $61 = $2 + 772 | 0; //@line 19474
       HEAP32[$61 >> 2] = HEAP32[$55 >> 2]; //@line 19476
       HEAP32[$61 + 4 >> 2] = $60; //@line 19479
       if ((HEAP32[$2 >> 2] | 0) != 2) {
        $$080 = 0; //@line 19483
        break L1;
       }
       if (!(HEAP8[$2 + 12 >> 0] | 0)) {
        $$080 = 0; //@line 19490
        break L1;
       }
       $70 = HEAP32[$0 >> 2] | 0; //@line 19493
       $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 19494
       __ZN7LoRaPHY18put_radio_to_sleepEv($70); //@line 19495
       if (___async) {
        HEAP32[$AsyncCtx11 >> 2] = 507; //@line 19498
        HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 19500
        HEAP32[$AsyncCtx11 + 8 >> 2] = $2; //@line 19502
        sp = STACKTOP; //@line 19503
        return 0; //@line 19504
       }
       _emscripten_free_async_context($AsyncCtx11 | 0); //@line 19506
       $73 = HEAP32[$0 >> 2] | 0; //@line 19507
       $76 = HEAP32[(HEAP32[$73 >> 2] | 0) + 28 >> 2] | 0; //@line 19510
       $78 = HEAP8[$2 + 776 >> 0] | 0; //@line 19512
       $80 = HEAP8[$2 + 744 >> 0] | 0; //@line 19514
       $82 = HEAP32[$2 + 740 >> 2] | 0; //@line 19516
       $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 19518
       FUNCTION_TABLE_viiiii[$76 & 7]($73, $78, $80, $82, $2 + 824 | 0); //@line 19519
       if (___async) {
        HEAP32[$AsyncCtx3 >> 2] = 508; //@line 19522
        sp = STACKTOP; //@line 19523
        return 0; //@line 19524
       } else {
        _emscripten_free_async_context($AsyncCtx3 | 0); //@line 19526
        $$080 = 0; //@line 19527
        break L1;
       }
       break;
      }
     case 11:
      {
       if (!(__ZN7LoRaPHY18verify_rx_datarateEh($4, HEAP8[$1 + 8 >> 0] | 0) | 0)) {
        $$080 = -1003; //@line 19537
        break L1;
       }
       $89 = $1 + 4 | 0; //@line 19542
       $94 = HEAP32[$89 + 4 >> 2] | 0; //@line 19547
       $95 = $2 + 772 | 0; //@line 19548
       HEAP32[$95 >> 2] = HEAP32[$89 >> 2]; //@line 19550
       HEAP32[$95 + 4 >> 2] = $94; //@line 19553
       $$080 = 0; //@line 19554
       break L1;
       break;
      }
     case 29:
      {
       HEAP32[$2 + 788 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 19562
       $$080 = 0; //@line 19563
       break L1;
       break;
      }
     case 28:
      {
       HEAP8[$2 + 744 >> 0] = HEAP8[$1 + 4 >> 0] | 0; //@line 19571
       $$080 = 0; //@line 19572
       break L1;
       break;
      }
     case 14:
      {
       $100 = HEAP8[$1 + 4 >> 0] | 0; //@line 19578
       if (($100 + -1 & 255) >= 15) {
        $$080 = -1003; //@line 19582
        break L1;
       }
       HEAP8[$2 + 768 >> 0] = $100; //@line 19586
       $$080 = 0; //@line 19587
       break L1;
       break;
      }
     case 15:
      {
       HEAP32[$2 + 748 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 19595
       $$080 = 0; //@line 19596
       break L1;
       break;
      }
     case 16:
      {
       HEAP32[$2 + 752 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 19604
       $$080 = 0; //@line 19605
       break L1;
       break;
      }
     case 17:
      {
       HEAP32[$2 + 756 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 19613
       $$080 = 0; //@line 19614
       break L1;
       break;
      }
     case 18:
      {
       HEAP32[$2 + 760 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 19622
       $$080 = 0; //@line 19623
       break L1;
       break;
      }
     case 19:
      {
       HEAP32[$2 + 764 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 19631
       $$080 = 0; //@line 19632
       break L1;
       break;
      }
     case 20:
      {
       $118 = $1 + 4 | 0; //@line 19637
       if (!(__ZN7LoRaPHY18verify_tx_datarateEhb($4, HEAP8[$118 >> 0] | 0, 1) | 0)) {
        $$080 = -1003; //@line 19641
        break L1;
       }
       HEAP8[$2 + 737 >> 0] = HEAP8[$118 >> 0] | 0; //@line 19646
       $$080 = 0; //@line 19647
       break L1;
       break;
      }
     case 21:
      {
       $123 = $1 + 4 | 0; //@line 19652
       if (!(__ZN7LoRaPHY18verify_tx_datarateEhb($4, HEAP8[$123 >> 0] | 0, 0) | 0)) {
        $$080 = -1003; //@line 19656
        break L1;
       }
       HEAP8[$2 + 737 >> 0] = HEAP8[$123 >> 0] | 0; //@line 19661
       $$080 = 0; //@line 19662
       break L1;
       break;
      }
     case 23:
      {
       $128 = $1 + 4 | 0; //@line 19667
       if (!(__ZN7LoRaPHY15verify_tx_powerEh($4, HEAP8[$128 >> 0] | 0) | 0)) {
        $$080 = -1003; //@line 19671
        break L1;
       }
       HEAP8[$2 + 736 >> 0] = HEAP8[$128 >> 0] | 0; //@line 19676
       $$080 = 0; //@line 19677
       break L1;
       break;
      }
     case 22:
      {
       $133 = $1 + 4 | 0; //@line 19682
       if (!(__ZN7LoRaPHY15verify_tx_powerEh($4, HEAP8[$133 >> 0] | 0) | 0)) {
        $$080 = -1003; //@line 19686
        break L1;
       }
       HEAP8[$2 + 736 >> 0] = HEAP8[$133 >> 0] | 0; //@line 19691
       $$080 = 0; //@line 19692
       break L1;
       break;
      }
     case 24:
      {
       HEAP32[$2 + 596 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 19700
       $$080 = 0; //@line 19701
       break L1;
       break;
      }
     case 25:
      {
       HEAP32[$2 + 600 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 19709
       $$080 = 0; //@line 19710
       break L1;
       break;
      }
     case 27:
      {
       HEAP32[$2 + 740 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 19718
       $$080 = 0; //@line 19719
       break L1;
       break;
      }
     default:
      {
       $$080 = -1002; //@line 19724
       break L1;
      }
     }
    } while (0);
   }
  }
 } while (0);
 return $$080 | 0; //@line 19732
}
function _mbedtls_gcm_setkey($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$0$i = 0, $108 = 0, $110 = 0, $115 = 0, $120 = 0, $125 = 0, $130 = 0, $132 = 0, $133 = 0, $134 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $141 = 0, $143 = 0, $148 = 0, $153 = 0, $155 = 0, $156 = 0, $157 = 0, $159 = 0, $160 = 0, $161 = 0, $162 = 0, $164 = 0, $166 = 0, $171 = 0, $176 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $182 = 0, $183 = 0, $184 = 0, $187 = 0, $189 = 0, $194 = 0, $198 = 0, $199 = 0, $201 = 0, $205 = 0, $206 = 0, $208 = 0, $212 = 0, $213 = 0, $215 = 0, $219 = 0, $220 = 0, $222 = 0, $226 = 0, $227 = 0, $229 = 0, $233 = 0, $234 = 0, $236 = 0, $240 = 0, $241 = 0, $243 = 0, $247 = 0, $248 = 0, $250 = 0, $257 = 0, $26 = 0, $264 = 0, $271 = 0, $278 = 0, $285 = 0, $292 = 0, $299 = 0, $306 = 0, $313 = 0, $32 = 0, $320 = 0, $327 = 0, $334 = 0, $341 = 0, $348 = 0, $4 = 0, $5 = 0, $54 = 0, $6 = 0, $72 = 0, $90 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 3837
 STACKTOP = STACKTOP + 32 | 0; //@line 3838
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 3838
 $4 = sp + 8 | 0; //@line 3839
 $5 = sp; //@line 3840
 $6 = _mbedtls_cipher_info_from_values($1, $3, 1) | 0; //@line 3841
 if (!$6) {
  $$0 = -20; //@line 3844
  STACKTOP = sp; //@line 3845
  return $$0 | 0; //@line 3845
 }
 if ((HEAP32[$6 + 24 >> 2] | 0) != 16) {
  $$0 = -20; //@line 3851
  STACKTOP = sp; //@line 3852
  return $$0 | 0; //@line 3852
 }
 $AsyncCtx11 = _emscripten_alloc_async_context(32, sp) | 0; //@line 3854
 _mbedtls_cipher_free($0); //@line 3855
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 588; //@line 3858
  HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 3860
  HEAP32[$AsyncCtx11 + 8 >> 2] = $6; //@line 3862
  HEAP32[$AsyncCtx11 + 12 >> 2] = $2; //@line 3864
  HEAP32[$AsyncCtx11 + 16 >> 2] = $3; //@line 3866
  HEAP32[$AsyncCtx11 + 20 >> 2] = $4; //@line 3868
  HEAP32[$AsyncCtx11 + 24 >> 2] = $5; //@line 3870
  HEAP32[$AsyncCtx11 + 28 >> 2] = $0; //@line 3872
  sp = STACKTOP; //@line 3873
  STACKTOP = sp; //@line 3874
  return 0; //@line 3874
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 3876
 $AsyncCtx7 = _emscripten_alloc_async_context(28, sp) | 0; //@line 3877
 $18 = _mbedtls_cipher_setup($0, $6) | 0; //@line 3878
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 589; //@line 3881
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 3883
  HEAP32[$AsyncCtx7 + 8 >> 2] = $2; //@line 3885
  HEAP32[$AsyncCtx7 + 12 >> 2] = $3; //@line 3887
  HEAP32[$AsyncCtx7 + 16 >> 2] = $4; //@line 3889
  HEAP32[$AsyncCtx7 + 20 >> 2] = $5; //@line 3891
  HEAP32[$AsyncCtx7 + 24 >> 2] = $0; //@line 3893
  sp = STACKTOP; //@line 3894
  STACKTOP = sp; //@line 3895
  return 0; //@line 3895
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 3897
 if ($18 | 0) {
  $$0 = $18; //@line 3900
  STACKTOP = sp; //@line 3901
  return $$0 | 0; //@line 3901
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(20, sp) | 0; //@line 3903
 $26 = _mbedtls_cipher_setkey($0, $2, $3, 1) | 0; //@line 3904
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 590; //@line 3907
  HEAP32[$AsyncCtx3 + 4 >> 2] = $4; //@line 3909
  HEAP32[$AsyncCtx3 + 8 >> 2] = $5; //@line 3911
  HEAP32[$AsyncCtx3 + 12 >> 2] = $0; //@line 3913
  HEAP32[$AsyncCtx3 + 16 >> 2] = $0; //@line 3915
  sp = STACKTOP; //@line 3916
  STACKTOP = sp; //@line 3917
  return 0; //@line 3917
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 3919
 if ($26 | 0) {
  $$0 = $26; //@line 3922
  STACKTOP = sp; //@line 3923
  return $$0 | 0; //@line 3923
 }
 HEAP32[$5 >> 2] = 0; //@line 3925
 dest = $4; //@line 3926
 stop = dest + 16 | 0; //@line 3926
 do {
  HEAP8[dest >> 0] = 0; //@line 3926
  dest = dest + 1 | 0; //@line 3926
 } while ((dest | 0) < (stop | 0));
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 3927
 $32 = _mbedtls_cipher_update($0, $4, 16, $4, $5) | 0; //@line 3928
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 591; //@line 3931
  HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 3933
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 3935
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 3937
  HEAP32[$AsyncCtx + 16 >> 2] = $5; //@line 3939
  sp = STACKTOP; //@line 3940
  STACKTOP = sp; //@line 3941
  return 0; //@line 3941
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 3943
 if (!$32) {
  $54 = (HEAPU8[$4 + 1 >> 0] | 0) << 16 | (HEAPU8[$4 >> 0] | 0) << 24 | (HEAPU8[$4 + 2 >> 0] | 0) << 8 | (HEAPU8[$4 + 3 >> 0] | 0); //@line 3962
  $72 = (HEAPU8[$4 + 5 >> 0] | 0) << 16 | (HEAPU8[$4 + 4 >> 0] | 0) << 24 | (HEAPU8[$4 + 6 >> 0] | 0) << 8 | (HEAPU8[$4 + 7 >> 0] | 0); //@line 3980
  $90 = (HEAPU8[$4 + 9 >> 0] | 0) << 16 | (HEAPU8[$4 + 8 >> 0] | 0) << 24 | (HEAPU8[$4 + 10 >> 0] | 0) << 8 | (HEAPU8[$4 + 11 >> 0] | 0); //@line 3998
  $108 = (HEAPU8[$4 + 13 >> 0] | 0) << 16 | (HEAPU8[$4 + 12 >> 0] | 0) << 24 | (HEAPU8[$4 + 14 >> 0] | 0) << 8 | (HEAPU8[$4 + 15 >> 0] | 0); //@line 4016
  $110 = $0 + 136 | 0; //@line 4018
  HEAP32[$110 >> 2] = $108; //@line 4020
  HEAP32[$110 + 4 >> 2] = $90; //@line 4023
  $115 = $0 + 264 | 0; //@line 4025
  HEAP32[$115 >> 2] = $72; //@line 4027
  HEAP32[$115 + 4 >> 2] = $54; //@line 4030
  $120 = $0 + 200 | 0; //@line 4032
  HEAP32[$120 >> 2] = 0; //@line 4034
  HEAP32[$120 + 4 >> 2] = 0; //@line 4037
  $125 = $0 + 72 | 0; //@line 4039
  HEAP32[$125 >> 2] = 0; //@line 4041
  HEAP32[$125 + 4 >> 2] = 0; //@line 4044
  $130 = _i64Subtract(0, 0, $108 & 1 | 0, 0) | 0; //@line 4046
  $132 = _bitshift64Shl($72 | 0, 0, 63) | 0; //@line 4048
  $133 = tempRet0; //@line 4049
  $134 = _bitshift64Lshr($108 | 0, $90 | 0, 1) | 0; //@line 4050
  $136 = $134 | $132; //@line 4052
  $137 = tempRet0 | $133; //@line 4053
  $138 = _bitshift64Lshr($72 | 0, $54 | 0, 1) | 0; //@line 4054
  $139 = tempRet0; //@line 4055
  $141 = $130 & -520093696 ^ $139; //@line 4057
  $143 = $0 + 104 | 0; //@line 4059
  HEAP32[$143 >> 2] = $136; //@line 4061
  HEAP32[$143 + 4 >> 2] = $137; //@line 4064
  $148 = $0 + 232 | 0; //@line 4066
  HEAP32[$148 >> 2] = $138; //@line 4068
  HEAP32[$148 + 4 >> 2] = $141; //@line 4071
  $153 = _i64Subtract(0, 0, $134 & 1 | 0, 0) | 0; //@line 4073
  $155 = _bitshift64Shl($138 | 0, $139 | 0, 63) | 0; //@line 4075
  $156 = tempRet0; //@line 4076
  $157 = _bitshift64Lshr($136 | 0, $137 | 0, 1) | 0; //@line 4077
  $159 = $157 | $155; //@line 4079
  $160 = tempRet0 | $156; //@line 4080
  $161 = _bitshift64Lshr($138 | 0, $141 | 0, 1) | 0; //@line 4081
  $162 = tempRet0; //@line 4082
  $164 = $153 & -520093696 ^ $162; //@line 4084
  $166 = $0 + 88 | 0; //@line 4086
  HEAP32[$166 >> 2] = $159; //@line 4088
  HEAP32[$166 + 4 >> 2] = $160; //@line 4091
  $171 = $0 + 216 | 0; //@line 4093
  HEAP32[$171 >> 2] = $161; //@line 4095
  HEAP32[$171 + 4 >> 2] = $164; //@line 4098
  $176 = _i64Subtract(0, 0, $157 & 1 | 0, 0) | 0; //@line 4100
  $178 = _bitshift64Shl($161 | 0, $162 | 0, 63) | 0; //@line 4102
  $179 = tempRet0; //@line 4103
  $180 = _bitshift64Lshr($159 | 0, $160 | 0, 1) | 0; //@line 4104
  $182 = $178 | $180; //@line 4106
  $183 = $179 | tempRet0; //@line 4107
  $184 = _bitshift64Lshr($161 | 0, $164 | 0, 1) | 0; //@line 4108
  $187 = $176 & -520093696 ^ tempRet0; //@line 4111
  $189 = $0 + 80 | 0; //@line 4113
  HEAP32[$189 >> 2] = $182; //@line 4115
  HEAP32[$189 + 4 >> 2] = $183; //@line 4118
  $194 = $0 + 208 | 0; //@line 4120
  HEAP32[$194 >> 2] = $184; //@line 4122
  HEAP32[$194 + 4 >> 2] = $187; //@line 4125
  $198 = $184 ^ $161; //@line 4126
  $199 = $187 ^ $164; //@line 4127
  $201 = $0 + 224 | 0; //@line 4129
  HEAP32[$201 >> 2] = $198; //@line 4131
  HEAP32[$201 + 4 >> 2] = $199; //@line 4134
  $205 = $182 ^ $159; //@line 4135
  $206 = $183 ^ $160; //@line 4136
  $208 = $0 + 96 | 0; //@line 4138
  HEAP32[$208 >> 2] = $205; //@line 4140
  HEAP32[$208 + 4 >> 2] = $206; //@line 4143
  $212 = $184 ^ $138; //@line 4144
  $213 = $187 ^ $141; //@line 4145
  $215 = $0 + 240 | 0; //@line 4147
  HEAP32[$215 >> 2] = $212; //@line 4149
  HEAP32[$215 + 4 >> 2] = $213; //@line 4152
  $219 = $182 ^ $136; //@line 4153
  $220 = $183 ^ $137; //@line 4154
  $222 = $0 + 112 | 0; //@line 4156
  HEAP32[$222 >> 2] = $219; //@line 4158
  HEAP32[$222 + 4 >> 2] = $220; //@line 4161
  $226 = $161 ^ $138; //@line 4162
  $227 = $164 ^ $141; //@line 4163
  $229 = $0 + 248 | 0; //@line 4165
  HEAP32[$229 >> 2] = $226; //@line 4167
  HEAP32[$229 + 4 >> 2] = $227; //@line 4170
  $233 = $159 ^ $136; //@line 4171
  $234 = $160 ^ $137; //@line 4172
  $236 = $0 + 120 | 0; //@line 4174
  HEAP32[$236 >> 2] = $233; //@line 4176
  HEAP32[$236 + 4 >> 2] = $234; //@line 4179
  $240 = $198 ^ $138; //@line 4180
  $241 = $199 ^ $141; //@line 4181
  $243 = $0 + 256 | 0; //@line 4183
  HEAP32[$243 >> 2] = $240; //@line 4185
  HEAP32[$243 + 4 >> 2] = $241; //@line 4188
  $247 = $205 ^ $136; //@line 4189
  $248 = $206 ^ $137; //@line 4190
  $250 = $0 + 128 | 0; //@line 4192
  HEAP32[$250 >> 2] = $247; //@line 4194
  HEAP32[$250 + 4 >> 2] = $248; //@line 4197
  $257 = $0 + 272 | 0; //@line 4201
  HEAP32[$257 >> 2] = $184 ^ $72; //@line 4203
  HEAP32[$257 + 4 >> 2] = $187 ^ $54; //@line 4206
  $264 = $0 + 144 | 0; //@line 4210
  HEAP32[$264 >> 2] = $182 ^ $108; //@line 4212
  HEAP32[$264 + 4 >> 2] = $183 ^ $90; //@line 4215
  $271 = $0 + 280 | 0; //@line 4219
  HEAP32[$271 >> 2] = $161 ^ $72; //@line 4221
  HEAP32[$271 + 4 >> 2] = $164 ^ $54; //@line 4224
  $278 = $0 + 152 | 0; //@line 4228
  HEAP32[$278 >> 2] = $159 ^ $108; //@line 4230
  HEAP32[$278 + 4 >> 2] = $160 ^ $90; //@line 4233
  $285 = $0 + 288 | 0; //@line 4237
  HEAP32[$285 >> 2] = $198 ^ $72; //@line 4239
  HEAP32[$285 + 4 >> 2] = $199 ^ $54; //@line 4242
  $292 = $0 + 160 | 0; //@line 4246
  HEAP32[$292 >> 2] = $205 ^ $108; //@line 4248
  HEAP32[$292 + 4 >> 2] = $206 ^ $90; //@line 4251
  $299 = $0 + 296 | 0; //@line 4255
  HEAP32[$299 >> 2] = $138 ^ $72; //@line 4257
  HEAP32[$299 + 4 >> 2] = $141 ^ $54; //@line 4260
  $306 = $0 + 168 | 0; //@line 4264
  HEAP32[$306 >> 2] = $136 ^ $108; //@line 4266
  HEAP32[$306 + 4 >> 2] = $137 ^ $90; //@line 4269
  $313 = $0 + 304 | 0; //@line 4273
  HEAP32[$313 >> 2] = $212 ^ $72; //@line 4275
  HEAP32[$313 + 4 >> 2] = $213 ^ $54; //@line 4278
  $320 = $0 + 176 | 0; //@line 4282
  HEAP32[$320 >> 2] = $219 ^ $108; //@line 4284
  HEAP32[$320 + 4 >> 2] = $220 ^ $90; //@line 4287
  $327 = $0 + 312 | 0; //@line 4291
  HEAP32[$327 >> 2] = $226 ^ $72; //@line 4293
  HEAP32[$327 + 4 >> 2] = $227 ^ $54; //@line 4296
  $334 = $0 + 184 | 0; //@line 4300
  HEAP32[$334 >> 2] = $233 ^ $108; //@line 4302
  HEAP32[$334 + 4 >> 2] = $234 ^ $90; //@line 4305
  $341 = $0 + 320 | 0; //@line 4309
  HEAP32[$341 >> 2] = $240 ^ $72; //@line 4311
  HEAP32[$341 + 4 >> 2] = $241 ^ $54; //@line 4314
  $348 = $0 + 192 | 0; //@line 4318
  HEAP32[$348 >> 2] = $247 ^ $108; //@line 4320
  HEAP32[$348 + 4 >> 2] = $248 ^ $90; //@line 4323
  $$0$i = 0; //@line 4324
 } else {
  $$0$i = $32; //@line 4326
 }
 $$0 = $$0$i; //@line 4328
 STACKTOP = sp; //@line 4329
 return $$0 | 0; //@line 4329
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_84($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $$pre13 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $33 = 0, $34 = 0, $35 = 0, $38 = 0, $4 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $52 = 0, $53 = 0, $55 = 0, $56 = 0, $57 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $69 = 0, $73 = 0, $74 = 0, $76 = 0, $77 = 0, $78 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 22415
 STACKTOP = STACKTOP + 16 | 0; //@line 22416
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 22416
 $$byval_copy = sp; //@line 22417
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22419
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22421
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22423
 $$pre13 = HEAP8[$2 >> 0] | 0; //@line 22424
 if ($$pre13 & 8) {
  HEAP8[$2 >> 0] = $$pre13 & -9; //@line 22429
  $11 = HEAP32[$4 + 1324 >> 2] | 0; //@line 22431
  $12 = $11 + 32 | 0; //@line 22432
  $14 = __ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0; //@line 22434
  $15 = $11 + 44 | 0; //@line 22435
  $16 = HEAP32[$15 >> 2] | 0; //@line 22436
  if (!$16) {
   $ReallocAsyncCtx15 = _emscripten_realloc_async_context(28) | 0; //@line 22439
   _mbed_assert_internal(13874, 13879, 1102); //@line 22440
   if (___async) {
    HEAP32[$ReallocAsyncCtx15 >> 2] = 378; //@line 22443
    $18 = $ReallocAsyncCtx15 + 4 | 0; //@line 22444
    HEAP32[$18 >> 2] = $2; //@line 22445
    $19 = $ReallocAsyncCtx15 + 8 | 0; //@line 22446
    HEAP32[$19 >> 2] = $4; //@line 22447
    $20 = $ReallocAsyncCtx15 + 12 | 0; //@line 22448
    HEAP32[$20 >> 2] = $6; //@line 22449
    $21 = $ReallocAsyncCtx15 + 16 | 0; //@line 22450
    HEAP32[$21 >> 2] = $12; //@line 22451
    $22 = $ReallocAsyncCtx15 + 20 | 0; //@line 22452
    HEAP32[$22 >> 2] = $14; //@line 22453
    $23 = $ReallocAsyncCtx15 + 24 | 0; //@line 22454
    HEAP32[$23 >> 2] = $15; //@line 22455
    sp = STACKTOP; //@line 22456
    STACKTOP = sp; //@line 22457
    return;
   }
   ___async_unwind = 0; //@line 22459
   HEAP32[$ReallocAsyncCtx15 >> 2] = 378; //@line 22460
   $18 = $ReallocAsyncCtx15 + 4 | 0; //@line 22461
   HEAP32[$18 >> 2] = $2; //@line 22462
   $19 = $ReallocAsyncCtx15 + 8 | 0; //@line 22463
   HEAP32[$19 >> 2] = $4; //@line 22464
   $20 = $ReallocAsyncCtx15 + 12 | 0; //@line 22465
   HEAP32[$20 >> 2] = $6; //@line 22466
   $21 = $ReallocAsyncCtx15 + 16 | 0; //@line 22467
   HEAP32[$21 >> 2] = $12; //@line 22468
   $22 = $ReallocAsyncCtx15 + 20 | 0; //@line 22469
   HEAP32[$22 >> 2] = $14; //@line 22470
   $23 = $ReallocAsyncCtx15 + 24 | 0; //@line 22471
   HEAP32[$23 >> 2] = $15; //@line 22472
   sp = STACKTOP; //@line 22473
   STACKTOP = sp; //@line 22474
   return;
  } else {
   $24 = HEAP32[$16 >> 2] | 0; //@line 22476
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 22477
   FUNCTION_TABLE_vii[$24 & 31]($12, $14); //@line 22478
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 379; //@line 22481
    $25 = $ReallocAsyncCtx3 + 4 | 0; //@line 22482
    HEAP32[$25 >> 2] = $2; //@line 22483
    $26 = $ReallocAsyncCtx3 + 8 | 0; //@line 22484
    HEAP32[$26 >> 2] = $4; //@line 22485
    $27 = $ReallocAsyncCtx3 + 12 | 0; //@line 22486
    HEAP32[$27 >> 2] = $6; //@line 22487
    sp = STACKTOP; //@line 22488
    STACKTOP = sp; //@line 22489
    return;
   }
   ___async_unwind = 0; //@line 22491
   HEAP32[$ReallocAsyncCtx3 >> 2] = 379; //@line 22492
   $25 = $ReallocAsyncCtx3 + 4 | 0; //@line 22493
   HEAP32[$25 >> 2] = $2; //@line 22494
   $26 = $ReallocAsyncCtx3 + 8 | 0; //@line 22495
   HEAP32[$26 >> 2] = $4; //@line 22496
   $27 = $ReallocAsyncCtx3 + 12 | 0; //@line 22497
   HEAP32[$27 >> 2] = $6; //@line 22498
   sp = STACKTOP; //@line 22499
   STACKTOP = sp; //@line 22500
   return;
  }
 }
 if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($4 + 4 | 0) | 0) {
  HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0) >> 2] = 4; //@line 22508
  $33 = HEAP8[$2 >> 0] | 16; //@line 22510
  HEAP8[$2 >> 0] = $33; //@line 22511
  $35 = $33; //@line 22512
 } else {
  $35 = HEAP8[$2 >> 0] | 0; //@line 22515
 }
 $34 = $35 & -33; //@line 22517
 HEAP8[$2 >> 0] = $34; //@line 22518
 do {
  if (!($34 & 2)) {
   $69 = $34; //@line 22523
  } else {
   $38 = $34 & -3; //@line 22525
   HEAP8[$2 >> 0] = $38; //@line 22526
   if ((HEAP32[$4 + 360 >> 2] | 0) == 2) {
    $43 = HEAP32[$4 + 1328 >> 2] | 0; //@line 22532
    HEAP32[$6 >> 2] = 273; //@line 22533
    HEAP32[$6 + 4 >> 2] = 0; //@line 22535
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 22536
    HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 22537
    HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 22537
    $44 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($43, $4, $$byval_copy) | 0; //@line 22538
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 381; //@line 22541
     $45 = $ReallocAsyncCtx8 + 4 | 0; //@line 22542
     HEAP32[$45 >> 2] = $2; //@line 22543
     $46 = $ReallocAsyncCtx8 + 8 | 0; //@line 22544
     HEAP32[$46 >> 2] = $4; //@line 22545
     $47 = $ReallocAsyncCtx8 + 12 | 0; //@line 22546
     HEAP32[$47 >> 2] = $6; //@line 22547
     sp = STACKTOP; //@line 22548
     STACKTOP = sp; //@line 22549
     return;
    }
    HEAP32[___async_retval >> 2] = $44; //@line 22552
    ___async_unwind = 0; //@line 22553
    HEAP32[$ReallocAsyncCtx8 >> 2] = 381; //@line 22554
    $45 = $ReallocAsyncCtx8 + 4 | 0; //@line 22555
    HEAP32[$45 >> 2] = $2; //@line 22556
    $46 = $ReallocAsyncCtx8 + 8 | 0; //@line 22557
    HEAP32[$46 >> 2] = $4; //@line 22558
    $47 = $ReallocAsyncCtx8 + 12 | 0; //@line 22559
    HEAP32[$47 >> 2] = $6; //@line 22560
    sp = STACKTOP; //@line 22561
    STACKTOP = sp; //@line 22562
    return;
   }
   if ($38 & 4) {
    $67 = $38 & -5; //@line 22567
    HEAP8[$2 >> 0] = $67; //@line 22568
    $69 = $67; //@line 22569
    break;
   }
   $52 = HEAP32[$4 + 1324 >> 2] | 0; //@line 22573
   $53 = $52 + 16 | 0; //@line 22574
   $55 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 22576
   $56 = $52 + 28 | 0; //@line 22577
   $57 = HEAP32[$56 >> 2] | 0; //@line 22578
   if (!$57) {
    $ReallocAsyncCtx13 = _emscripten_realloc_async_context(24) | 0; //@line 22581
    _mbed_assert_internal(13874, 13879, 1102); //@line 22582
    if (___async) {
     HEAP32[$ReallocAsyncCtx13 >> 2] = 383; //@line 22585
     $59 = $ReallocAsyncCtx13 + 4 | 0; //@line 22586
     HEAP32[$59 >> 2] = $56; //@line 22587
     $60 = $ReallocAsyncCtx13 + 8 | 0; //@line 22588
     HEAP32[$60 >> 2] = $53; //@line 22589
     $61 = $ReallocAsyncCtx13 + 12 | 0; //@line 22590
     HEAP32[$61 >> 2] = $55; //@line 22591
     $62 = $ReallocAsyncCtx13 + 16 | 0; //@line 22592
     HEAP32[$62 >> 2] = $2; //@line 22593
     $63 = $ReallocAsyncCtx13 + 20 | 0; //@line 22594
     HEAP32[$63 >> 2] = $4; //@line 22595
     sp = STACKTOP; //@line 22596
     STACKTOP = sp; //@line 22597
     return;
    }
    ___async_unwind = 0; //@line 22599
    HEAP32[$ReallocAsyncCtx13 >> 2] = 383; //@line 22600
    $59 = $ReallocAsyncCtx13 + 4 | 0; //@line 22601
    HEAP32[$59 >> 2] = $56; //@line 22602
    $60 = $ReallocAsyncCtx13 + 8 | 0; //@line 22603
    HEAP32[$60 >> 2] = $53; //@line 22604
    $61 = $ReallocAsyncCtx13 + 12 | 0; //@line 22605
    HEAP32[$61 >> 2] = $55; //@line 22606
    $62 = $ReallocAsyncCtx13 + 16 | 0; //@line 22607
    HEAP32[$62 >> 2] = $2; //@line 22608
    $63 = $ReallocAsyncCtx13 + 20 | 0; //@line 22609
    HEAP32[$63 >> 2] = $4; //@line 22610
    sp = STACKTOP; //@line 22611
    STACKTOP = sp; //@line 22612
    return;
   } else {
    $64 = HEAP32[$57 >> 2] | 0; //@line 22614
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 22615
    FUNCTION_TABLE_vii[$64 & 31]($53, $55); //@line 22616
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 384; //@line 22619
     $65 = $ReallocAsyncCtx4 + 4 | 0; //@line 22620
     HEAP32[$65 >> 2] = $2; //@line 22621
     $66 = $ReallocAsyncCtx4 + 8 | 0; //@line 22622
     HEAP32[$66 >> 2] = $4; //@line 22623
     sp = STACKTOP; //@line 22624
     STACKTOP = sp; //@line 22625
     return;
    }
    ___async_unwind = 0; //@line 22627
    HEAP32[$ReallocAsyncCtx4 >> 2] = 384; //@line 22628
    $65 = $ReallocAsyncCtx4 + 4 | 0; //@line 22629
    HEAP32[$65 >> 2] = $2; //@line 22630
    $66 = $ReallocAsyncCtx4 + 8 | 0; //@line 22631
    HEAP32[$66 >> 2] = $4; //@line 22632
    sp = STACKTOP; //@line 22633
    STACKTOP = sp; //@line 22634
    return;
   }
  }
 } while (0);
 if (!($69 & 16)) {
  STACKTOP = sp; //@line 22641
  return;
 }
 HEAP8[$2 >> 0] = $69 & -17; //@line 22644
 $73 = HEAP32[$4 + 1324 >> 2] | 0; //@line 22646
 $74 = $73 + 48 | 0; //@line 22647
 $76 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 22649
 $77 = $73 + 60 | 0; //@line 22650
 $78 = HEAP32[$77 >> 2] | 0; //@line 22651
 if (!$78) {
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(16) | 0; //@line 22654
  _mbed_assert_internal(13874, 13879, 1102); //@line 22655
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 385; //@line 22658
   $80 = $ReallocAsyncCtx12 + 4 | 0; //@line 22659
   HEAP32[$80 >> 2] = $77; //@line 22660
   $81 = $ReallocAsyncCtx12 + 8 | 0; //@line 22661
   HEAP32[$81 >> 2] = $74; //@line 22662
   $82 = $ReallocAsyncCtx12 + 12 | 0; //@line 22663
   HEAP32[$82 >> 2] = $76; //@line 22664
   sp = STACKTOP; //@line 22665
   STACKTOP = sp; //@line 22666
   return;
  }
  ___async_unwind = 0; //@line 22668
  HEAP32[$ReallocAsyncCtx12 >> 2] = 385; //@line 22669
  $80 = $ReallocAsyncCtx12 + 4 | 0; //@line 22670
  HEAP32[$80 >> 2] = $77; //@line 22671
  $81 = $ReallocAsyncCtx12 + 8 | 0; //@line 22672
  HEAP32[$81 >> 2] = $74; //@line 22673
  $82 = $ReallocAsyncCtx12 + 12 | 0; //@line 22674
  HEAP32[$82 >> 2] = $76; //@line 22675
  sp = STACKTOP; //@line 22676
  STACKTOP = sp; //@line 22677
  return;
 } else {
  $83 = HEAP32[$78 >> 2] | 0; //@line 22679
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 22680
  FUNCTION_TABLE_vii[$83 & 31]($74, $76); //@line 22681
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 386; //@line 22684
   sp = STACKTOP; //@line 22685
   STACKTOP = sp; //@line 22686
   return;
  }
  ___async_unwind = 0; //@line 22688
  HEAP32[$ReallocAsyncCtx5 >> 2] = 386; //@line 22689
  sp = STACKTOP; //@line 22690
  STACKTOP = sp; //@line 22691
  return;
 }
}
function __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$0$i22 = 0, $$024 = 0, $$05$i = 0, $$06$i = 0, $$1 = 0, $10 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0.0, $112 = 0.0, $114 = 0, $118 = 0, $12 = 0, $125 = 0, $126 = 0, $130 = 0, $138 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $28 = 0, $3 = 0, $36 = 0, $37 = 0, $4 = 0, $40 = 0, $41 = 0, $44 = 0, $53 = 0, $65 = 0, $68 = 0, $7 = 0, $72 = 0, $73 = 0, $8 = 0, $83 = 0, $90 = 0, $95 = 0, $98 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx21 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 15264
 STACKTOP = STACKTOP + 16 | 0; //@line 15265
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15265
 $2 = sp + 1 | 0; //@line 15266
 $3 = sp; //@line 15267
 $4 = $0 + 968 | 0; //@line 15268
 if (HEAP32[$4 >> 2] | 0) {
  $$1 = -1e3; //@line 15272
  STACKTOP = sp; //@line 15273
  return $$1 | 0; //@line 15273
 }
 $7 = $0 + 264 | 0; //@line 15275
 __ZN11LoRaMacMlme18reset_confirmationEv($7); //@line 15276
 $8 = HEAP32[$1 >> 2] | 0; //@line 15277
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($7) | 0) >> 2] = $8; //@line 15279
 $10 = $0 + 944 | 0; //@line 15280
 $12 = HEAP8[$10 >> 0] | 8; //@line 15282
 HEAP8[$10 >> 0] = $12; //@line 15283
 switch (HEAP32[$1 >> 2] | 0) {
 case 1:
  {
   $$0 = __ZN14LoRaMacCommand15add_mac_commandEhhh($0 + 4 | 0, 2, 0, 0) | 0; //@line 15289
   label = 30; //@line 15290
   break;
  }
 case 0:
  {
   if (HEAP32[$4 >> 2] & 16 | 0) {
    $$1 = -1e3; //@line 15298
    STACKTOP = sp; //@line 15299
    return $$1 | 0; //@line 15299
   }
   $20 = HEAP32[$1 + 4 >> 2] | 0; //@line 15302
   if (!$20) {
    $$1 = -1003; //@line 15305
    STACKTOP = sp; //@line 15306
    return $$1 | 0; //@line 15306
   }
   $22 = $1 + 8 | 0; //@line 15308
   if (!(HEAP32[$22 >> 2] | 0)) {
    $$1 = -1003; //@line 15312
    STACKTOP = sp; //@line 15313
    return $$1 | 0; //@line 15313
   }
   $25 = $1 + 12 | 0; //@line 15315
   if (!(HEAP32[$25 >> 2] | 0)) {
    $$1 = -1003; //@line 15319
    STACKTOP = sp; //@line 15320
    return $$1 | 0; //@line 15320
   }
   $28 = $1 + 16 | 0; //@line 15322
   if (!(HEAP8[$28 >> 0] | 0)) {
    $$1 = -1003; //@line 15326
    STACKTOP = sp; //@line 15327
    return $$1 | 0; //@line 15327
   }
   HEAP32[$0 + 900 >> 2] = $20; //@line 15330
   HEAP32[$0 + 904 >> 2] = HEAP32[$22 >> 2]; //@line 15333
   HEAP32[$0 + 908 >> 2] = HEAP32[$25 >> 2]; //@line 15336
   $36 = HEAP8[$28 >> 0] | 0; //@line 15337
   $37 = $0 + 896 | 0; //@line 15338
   HEAP8[$37 >> 0] = $36; //@line 15339
   $40 = __ZN7LoRaPHY21verify_nb_join_trialsEh(HEAP32[$0 >> 2] | 0, HEAP8[$28 >> 0] | 0) | 0; //@line 15342
   HEAP8[$37 >> 0] = $40 ? $36 : 12; //@line 15344
   $41 = $0 + 897 | 0; //@line 15345
   HEAP8[$41 >> 0] = 0; //@line 15346
   HEAP8[$0 + 372 >> 0] = 0; //@line 15349
   $44 = $0 + 956 | 0; //@line 15350
   HEAP32[$44 >> 2] = 0; //@line 15351
   HEAP32[$0 + 960 >> 2] = 0; //@line 15353
   HEAP32[$0 + 964 >> 2] = 0; //@line 15355
   HEAP8[$0 + 380 >> 0] = 0; //@line 15357
   HEAP8[$0 + 894 >> 0] = 1; //@line 15359
   HEAP8[$0 + 895 >> 0] = 1; //@line 15361
   HEAP8[$0 + 377 >> 0] = 0; //@line 15363
   HEAP8[$0 + 1152 >> 0] = 0; //@line 15365
   HEAP16[$0 + 1154 >> 1] = 1; //@line 15367
   $53 = $0 + 4 | 0; //@line 15368
   __ZN14LoRaMacCommand20clear_command_bufferEv($53); //@line 15369
   __ZN14LoRaMacCommand19clear_repeat_bufferEv($53); //@line 15370
   __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($53); //@line 15371
   HEAP8[$0 + 371 >> 0] = 1; //@line 15373
   __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb(HEAP32[$0 >> 2] | 0, $0 + 360 | 0, 0); //@line 15375
   HEAP8[$0 + 373 >> 0] = 0; //@line 15377
   HEAP8[$0 + 374 >> 0] = 0; //@line 15379
   $$05$i = HEAP32[$0 + 1208 >> 2] | 0; //@line 15381
   if ($$05$i | 0) {
    $$06$i = $$05$i; //@line 15384
    do {
     HEAP32[$$06$i + 36 >> 2] = 0; //@line 15387
     $$06$i = HEAP32[$$06$i + 40 >> 2] | 0; //@line 15389
    } while (($$06$i | 0) != 0);
   }
   HEAP8[$0 + 378 >> 0] = 0; //@line 15399
   HEAP8[$0 + 379 >> 0] = 0; //@line 15401
   $65 = HEAP32[$0 >> 2] | 0; //@line 15402
   $68 = HEAP32[(HEAP32[$65 >> 2] | 0) + 52 >> 2] | 0; //@line 15405
   $72 = (HEAPU8[$41 >> 0] | 0) + 1 & 255; //@line 15409
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 15410
   $73 = FUNCTION_TABLE_iii[$68 & 31]($65, $72) | 0; //@line 15411
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 451; //@line 15414
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 15416
    HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 15418
    HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 15420
    HEAP32[$AsyncCtx + 16 >> 2] = $44; //@line 15422
    HEAP32[$AsyncCtx + 20 >> 2] = $10; //@line 15424
    sp = STACKTOP; //@line 15425
    STACKTOP = sp; //@line 15426
    return 0; //@line 15426
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 15428
   HEAP8[$0 + 1097 >> 0] = $73; //@line 15430
   HEAP8[$3 >> 0] = 0; //@line 15431
   HEAP8[$2 >> 0] = HEAP8[$0 + 1156 >> 0] << 7; //@line 15435
   $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 15436
   $83 = __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt($0, $3, $2, 0, 0, 0) | 0; //@line 15437
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 452; //@line 15440
    HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 15442
    HEAP32[$AsyncCtx2 + 8 >> 2] = $44; //@line 15444
    HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 15446
    HEAP32[$AsyncCtx2 + 16 >> 2] = $3; //@line 15448
    HEAP32[$AsyncCtx2 + 20 >> 2] = $10; //@line 15450
    sp = STACKTOP; //@line 15451
    STACKTOP = sp; //@line 15452
    return 0; //@line 15452
   }
   _emscripten_free_async_context($AsyncCtx2 | 0); //@line 15454
   do {
    if (!$83) {
     $90 = $0 + 288 | 0; //@line 15458
     HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($90) | 0) + 11 >> 0] = 0; //@line 15461
     HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($90) | 0) + 10 >> 0] = 0; //@line 15464
     $95 = HEAP32[$44 >> 2] | 0; //@line 15465
     HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($90) | 0) + 16 >> 2] = $95; //@line 15468
     $AsyncCtx21 = _emscripten_alloc_async_context(20, sp) | 0; //@line 15469
     $98 = __ZN7LoRaMac11schedule_txEv($0) | 0; //@line 15470
     if (___async) {
      HEAP32[$AsyncCtx21 >> 2] = 453; //@line 15473
      HEAP32[$AsyncCtx21 + 4 >> 2] = $2; //@line 15475
      HEAP32[$AsyncCtx21 + 8 >> 2] = $3; //@line 15477
      HEAP32[$AsyncCtx21 + 12 >> 2] = $10; //@line 15479
      HEAP32[$AsyncCtx21 + 16 >> 2] = $0; //@line 15481
      sp = STACKTOP; //@line 15482
      STACKTOP = sp; //@line 15483
      return 0; //@line 15483
     } else {
      _emscripten_free_async_context($AsyncCtx21 | 0); //@line 15485
      $$0$i22 = $98; //@line 15486
      break;
     }
    } else {
     $$0$i22 = $83; //@line 15490
    }
   } while (0);
   $$0 = $$0$i22; //@line 15493
   label = 30; //@line 15494
   break;
  }
 case 2:
  {
   $104 = HEAP8[$0 + 378 >> 0] | 0; //@line 15499
   $106 = HEAP8[$0 + 1097 >> 0] | 0; //@line 15501
   $108 = HEAP8[$0 + 1096 >> 0] | 0; //@line 15503
   $110 = +HEAPF32[$0 + 1144 >> 2]; //@line 15505
   $112 = +HEAPF32[$0 + 1148 >> 2]; //@line 15507
   $114 = HEAP16[$1 + 4 >> 1] | 0; //@line 15509
   $AsyncCtx17 = _emscripten_alloc_async_context(12, sp) | 0; //@line 15510
   __ZN11LoRaMacMlme22set_tx_continuous_waveEhaafft($7, $104, $106, $108, $110, $112, $114); //@line 15511
   if (___async) {
    HEAP32[$AsyncCtx17 >> 2] = 454; //@line 15514
    HEAP32[$AsyncCtx17 + 4 >> 2] = $0; //@line 15516
    HEAP32[$AsyncCtx17 + 8 >> 2] = $4; //@line 15518
    sp = STACKTOP; //@line 15519
    STACKTOP = sp; //@line 15520
    return 0; //@line 15520
   }
   _emscripten_free_async_context($AsyncCtx17 | 0); //@line 15522
   $118 = HEAP32[$0 + 356 >> 2] | 0; //@line 15524
   $AsyncCtx9 = _emscripten_alloc_async_context(8, sp) | 0; //@line 15526
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($118, $0 + 996 | 0, 1e3); //@line 15527
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 455; //@line 15530
    HEAP32[$AsyncCtx9 + 4 >> 2] = $4; //@line 15532
    sp = STACKTOP; //@line 15533
    STACKTOP = sp; //@line 15534
    return 0; //@line 15534
   }
   _emscripten_free_async_context($AsyncCtx9 | 0); //@line 15536
   HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 1; //@line 15539
   $$1 = 0; //@line 15540
   STACKTOP = sp; //@line 15541
   return $$1 | 0; //@line 15541
  }
 case 3:
  {
   $125 = HEAP8[$1 + 12 >> 0] | 0; //@line 15547
   $126 = HEAP16[$1 + 4 >> 1] | 0; //@line 15548
   $AsyncCtx13 = _emscripten_alloc_async_context(12, sp) | 0; //@line 15549
   __ZN11LoRaMacMlme22set_tx_continuous_waveEhaafft($7, 0, 0, $125, 0.0, 0.0, $126); //@line 15550
   if (___async) {
    HEAP32[$AsyncCtx13 >> 2] = 456; //@line 15553
    HEAP32[$AsyncCtx13 + 4 >> 2] = $0; //@line 15555
    HEAP32[$AsyncCtx13 + 8 >> 2] = $4; //@line 15557
    sp = STACKTOP; //@line 15558
    STACKTOP = sp; //@line 15559
    return 0; //@line 15559
   }
   _emscripten_free_async_context($AsyncCtx13 | 0); //@line 15561
   $130 = HEAP32[$0 + 356 >> 2] | 0; //@line 15563
   $AsyncCtx5 = _emscripten_alloc_async_context(8, sp) | 0; //@line 15565
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($130, $0 + 996 | 0, 1e3); //@line 15566
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 457; //@line 15569
    HEAP32[$AsyncCtx5 + 4 >> 2] = $4; //@line 15571
    sp = STACKTOP; //@line 15572
    STACKTOP = sp; //@line 15573
    return 0; //@line 15573
   }
   _emscripten_free_async_context($AsyncCtx5 | 0); //@line 15575
   HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 1; //@line 15578
   $$1 = 0; //@line 15579
   STACKTOP = sp; //@line 15580
   return $$1 | 0; //@line 15580
  }
 default:
  {
   $$024 = -1002; //@line 15584
   $138 = $12; //@line 15584
  }
 }
 do {
  if ((label | 0) == 30) {
   if (!$$0) {
    $$1 = 0; //@line 15591
    STACKTOP = sp; //@line 15592
    return $$1 | 0; //@line 15592
   } else {
    $$024 = $$0; //@line 15595
    $138 = HEAP8[$10 >> 0] | 0; //@line 15595
    break;
   }
  }
 } while (0);
 HEAP8[$0 + 373 >> 0] = 0; //@line 15601
 HEAP8[$10 >> 0] = $138 & -9; //@line 15603
 $$1 = $$024; //@line 15604
 STACKTOP = sp; //@line 15605
 return $$1 | 0; //@line 15605
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $_0$0 = 0, $_0$1 = 0, $q_sroa_1_1198$looptemp = 0;
 $n_sroa_0_0_extract_trunc = $a$0; //@line 32941
 $n_sroa_1_4_extract_shift$0 = $a$1; //@line 32942
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0; //@line 32943
 $d_sroa_0_0_extract_trunc = $b$0; //@line 32944
 $d_sroa_1_4_extract_shift$0 = $b$1; //@line 32945
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0; //@line 32946
 if (!$n_sroa_1_4_extract_trunc) {
  $4 = ($rem | 0) != 0; //@line 32948
  if (!$d_sroa_1_4_extract_trunc) {
   if ($4) {
    HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0); //@line 32951
    HEAP32[$rem + 4 >> 2] = 0; //@line 32952
   }
   $_0$1 = 0; //@line 32954
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0; //@line 32955
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 32956
  } else {
   if (!$4) {
    $_0$1 = 0; //@line 32959
    $_0$0 = 0; //@line 32960
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 32961
   }
   HEAP32[$rem >> 2] = $a$0 | 0; //@line 32963
   HEAP32[$rem + 4 >> 2] = $a$1 & 0; //@line 32964
   $_0$1 = 0; //@line 32965
   $_0$0 = 0; //@line 32966
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 32967
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0; //@line 32970
 do {
  if (!$d_sroa_0_0_extract_trunc) {
   if ($17) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0); //@line 32975
     HEAP32[$rem + 4 >> 2] = 0; //@line 32976
    }
    $_0$1 = 0; //@line 32978
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0; //@line 32979
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 32980
   }
   if (!$n_sroa_0_0_extract_trunc) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = 0; //@line 32984
     HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0); //@line 32985
    }
    $_0$1 = 0; //@line 32987
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0; //@line 32988
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 32989
   }
   $37 = $d_sroa_1_4_extract_trunc - 1 | 0; //@line 32991
   if (!($37 & $d_sroa_1_4_extract_trunc)) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = $a$0 | 0; //@line 32994
     HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0; //@line 32995
    }
    $_0$1 = 0; //@line 32997
    $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0); //@line 32998
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 32999
   }
   $51 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 33002
   if ($51 >>> 0 <= 30) {
    $57 = $51 + 1 | 0; //@line 33004
    $58 = 31 - $51 | 0; //@line 33005
    $sr_1_ph = $57; //@line 33006
    $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0); //@line 33007
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0); //@line 33008
    $q_sroa_0_1_ph = 0; //@line 33009
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58; //@line 33010
    break;
   }
   if (!$rem) {
    $_0$1 = 0; //@line 33014
    $_0$0 = 0; //@line 33015
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 33016
   }
   HEAP32[$rem >> 2] = $a$0 | 0; //@line 33018
   HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 33019
   $_0$1 = 0; //@line 33020
   $_0$0 = 0; //@line 33021
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 33022
  } else {
   if (!$17) {
    $119 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 33026
    if ($119 >>> 0 <= 31) {
     $125 = $119 + 1 | 0; //@line 33028
     $126 = 31 - $119 | 0; //@line 33029
     $130 = $119 - 31 >> 31; //@line 33030
     $sr_1_ph = $125; //@line 33031
     $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126; //@line 33032
     $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130; //@line 33033
     $q_sroa_0_1_ph = 0; //@line 33034
     $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126; //@line 33035
     break;
    }
    if (!$rem) {
     $_0$1 = 0; //@line 33039
     $_0$0 = 0; //@line 33040
     return (tempRet0 = $_0$1, $_0$0) | 0; //@line 33041
    }
    HEAP32[$rem >> 2] = $a$0 | 0; //@line 33043
    HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 33044
    $_0$1 = 0; //@line 33045
    $_0$0 = 0; //@line 33046
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 33047
   }
   $66 = $d_sroa_0_0_extract_trunc - 1 | 0; //@line 33049
   if ($66 & $d_sroa_0_0_extract_trunc | 0) {
    $88 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 33052
    $89 = 64 - $88 | 0; //@line 33053
    $91 = 32 - $88 | 0; //@line 33054
    $92 = $91 >> 31; //@line 33055
    $95 = $88 - 32 | 0; //@line 33056
    $105 = $95 >> 31; //@line 33057
    $sr_1_ph = $88; //@line 33058
    $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105; //@line 33059
    $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0); //@line 33060
    $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92; //@line 33061
    $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31; //@line 33062
    break;
   }
   if ($rem | 0) {
    HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc; //@line 33066
    HEAP32[$rem + 4 >> 2] = 0; //@line 33067
   }
   if (($d_sroa_0_0_extract_trunc | 0) == 1) {
    $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 33070
    $_0$0 = $a$0 | 0 | 0; //@line 33071
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 33072
   } else {
    $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0; //@line 33074
    $_0$1 = $n_sroa_1_4_extract_trunc >>> ($78 >>> 0) | 0; //@line 33075
    $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0; //@line 33076
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 33077
   }
  }
 } while (0);
 if (!$sr_1_ph) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph; //@line 33082
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph; //@line 33083
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph; //@line 33084
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph; //@line 33085
  $carry_0_lcssa$1 = 0; //@line 33086
  $carry_0_lcssa$0 = 0; //@line 33087
 } else {
  $d_sroa_0_0_insert_insert99$0 = $b$0 | 0 | 0; //@line 33089
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0; //@line 33090
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0; //@line 33091
  $137$1 = tempRet0; //@line 33092
  $q_sroa_1_1198 = $q_sroa_1_1_ph; //@line 33093
  $q_sroa_0_1199 = $q_sroa_0_1_ph; //@line 33094
  $r_sroa_1_1200 = $r_sroa_1_1_ph; //@line 33095
  $r_sroa_0_1201 = $r_sroa_0_1_ph; //@line 33096
  $sr_1202 = $sr_1_ph; //@line 33097
  $carry_0203 = 0; //@line 33098
  do {
   $q_sroa_1_1198$looptemp = $q_sroa_1_1198;
   $q_sroa_1_1198 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1; //@line 33100
   $q_sroa_0_1199 = $carry_0203 | $q_sroa_0_1199 << 1; //@line 33101
   $r_sroa_0_0_insert_insert42$0 = $r_sroa_0_1201 << 1 | $q_sroa_1_1198$looptemp >>> 31 | 0; //@line 33102
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0; //@line 33103
   _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0; //@line 33104
   $150$1 = tempRet0; //@line 33105
   $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1; //@line 33106
   $carry_0203 = $151$0 & 1; //@line 33107
   $r_sroa_0_1201 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0; //@line 33109
   $r_sroa_1_1200 = tempRet0; //@line 33110
   $sr_1202 = $sr_1202 - 1 | 0; //@line 33111
  } while (($sr_1202 | 0) != 0);
  $q_sroa_1_1_lcssa = $q_sroa_1_1198; //@line 33123
  $q_sroa_0_1_lcssa = $q_sroa_0_1199; //@line 33124
  $r_sroa_1_1_lcssa = $r_sroa_1_1200; //@line 33125
  $r_sroa_0_1_lcssa = $r_sroa_0_1201; //@line 33126
  $carry_0_lcssa$1 = 0; //@line 33127
  $carry_0_lcssa$0 = $carry_0203; //@line 33128
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa; //@line 33130
 $q_sroa_0_0_insert_ext75$1 = 0; //@line 33131
 if ($rem | 0) {
  HEAP32[$rem >> 2] = $r_sroa_0_1_lcssa; //@line 33134
  HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa; //@line 33135
 }
 $_0$1 = ($q_sroa_0_0_insert_ext75$0 | 0) >>> 31 | ($q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1) << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1; //@line 33137
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0; //@line 33138
 return (tempRet0 = $_0$1, $_0$0) | 0; //@line 33139
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$081$off0 = 0, $$084 = 0, $$085$off0 = 0, $$1 = 0, $$182$off0 = 0, $$186$off0 = 0, $$2 = 0, $$283$off0 = 0, $100 = 0, $104 = 0, $105 = 0, $106 = 0, $122 = 0, $13 = 0, $136 = 0, $19 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $61 = 0, $69 = 0, $72 = 0, $73 = 0, $81 = 0, $84 = 0, $87 = 0, $90 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 15857
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 15863
  } else {
   if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0) {
    if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
     $13 = $1 + 20 | 0; //@line 15872
     if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
      HEAP32[$1 + 32 >> 2] = $3; //@line 15877
      $19 = $1 + 44 | 0; //@line 15878
      if ((HEAP32[$19 >> 2] | 0) == 4) {
       break;
      }
      $25 = $0 + 16 + (HEAP32[$0 + 12 >> 2] << 3) | 0; //@line 15887
      $26 = $1 + 52 | 0; //@line 15888
      $27 = $1 + 53 | 0; //@line 15889
      $28 = $1 + 54 | 0; //@line 15890
      $29 = $0 + 8 | 0; //@line 15891
      $30 = $1 + 24 | 0; //@line 15892
      $$081$off0 = 0; //@line 15893
      $$084 = $0 + 16 | 0; //@line 15893
      $$085$off0 = 0; //@line 15893
      L10 : while (1) {
       if ($$084 >>> 0 >= $25 >>> 0) {
        $$283$off0 = $$081$off0; //@line 15897
        label = 20; //@line 15898
        break;
       }
       HEAP8[$26 >> 0] = 0; //@line 15901
       HEAP8[$27 >> 0] = 0; //@line 15902
       $AsyncCtx15 = _emscripten_alloc_async_context(56, sp) | 0; //@line 15903
       __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$084, $1, $2, $2, 1, $4); //@line 15904
       if (___async) {
        label = 12; //@line 15907
        break;
       }
       _emscripten_free_async_context($AsyncCtx15 | 0); //@line 15910
       if (HEAP8[$28 >> 0] | 0) {
        $$283$off0 = $$081$off0; //@line 15914
        label = 20; //@line 15915
        break;
       }
       do {
        if (!(HEAP8[$27 >> 0] | 0)) {
         $$182$off0 = $$081$off0; //@line 15922
         $$186$off0 = $$085$off0; //@line 15922
        } else {
         if (!(HEAP8[$26 >> 0] | 0)) {
          if (!(HEAP32[$29 >> 2] & 1)) {
           $$283$off0 = 1; //@line 15931
           label = 20; //@line 15932
           break L10;
          } else {
           $$182$off0 = 1; //@line 15935
           $$186$off0 = $$085$off0; //@line 15935
           break;
          }
         }
         if ((HEAP32[$30 >> 2] | 0) == 1) {
          label = 25; //@line 15942
          break L10;
         }
         if (!(HEAP32[$29 >> 2] & 2)) {
          label = 25; //@line 15949
          break L10;
         } else {
          $$182$off0 = 1; //@line 15952
          $$186$off0 = 1; //@line 15952
         }
        }
       } while (0);
       $$081$off0 = $$182$off0; //@line 15957
       $$084 = $$084 + 8 | 0; //@line 15957
       $$085$off0 = $$186$off0; //@line 15957
      }
      if ((label | 0) == 12) {
       HEAP32[$AsyncCtx15 >> 2] = 698; //@line 15960
       HEAP32[$AsyncCtx15 + 4 >> 2] = $28; //@line 15962
       HEAP32[$AsyncCtx15 + 8 >> 2] = $25; //@line 15964
       HEAP32[$AsyncCtx15 + 12 >> 2] = $29; //@line 15966
       HEAP8[$AsyncCtx15 + 16 >> 0] = $$085$off0 & 1; //@line 15969
       HEAP8[$AsyncCtx15 + 17 >> 0] = $$081$off0 & 1; //@line 15972
       HEAP32[$AsyncCtx15 + 20 >> 2] = $$084; //@line 15974
       HEAP32[$AsyncCtx15 + 24 >> 2] = $26; //@line 15976
       HEAP32[$AsyncCtx15 + 28 >> 2] = $27; //@line 15978
       HEAP32[$AsyncCtx15 + 32 >> 2] = $1; //@line 15980
       HEAP32[$AsyncCtx15 + 36 >> 2] = $2; //@line 15982
       HEAP8[$AsyncCtx15 + 40 >> 0] = $4 & 1; //@line 15985
       HEAP32[$AsyncCtx15 + 44 >> 2] = $30; //@line 15987
       HEAP32[$AsyncCtx15 + 48 >> 2] = $19; //@line 15989
       HEAP32[$AsyncCtx15 + 52 >> 2] = $13; //@line 15991
       sp = STACKTOP; //@line 15992
       return;
      }
      do {
       if ((label | 0) == 20) {
        if (!$$085$off0) {
         HEAP32[$13 >> 2] = $2; //@line 15998
         $61 = $1 + 40 | 0; //@line 15999
         HEAP32[$61 >> 2] = (HEAP32[$61 >> 2] | 0) + 1; //@line 16002
         if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
          if ((HEAP32[$30 >> 2] | 0) == 2) {
           HEAP8[$28 >> 0] = 1; //@line 16010
           if ($$283$off0) {
            label = 25; //@line 16012
            break;
           } else {
            $69 = 4; //@line 16015
            break;
           }
          }
         }
        }
        if ($$283$off0) {
         label = 25; //@line 16022
        } else {
         $69 = 4; //@line 16024
        }
       }
      } while (0);
      if ((label | 0) == 25) {
       $69 = 3; //@line 16029
      }
      HEAP32[$19 >> 2] = $69; //@line 16031
      break;
     }
    }
    if (($3 | 0) != 1) {
     break;
    }
    HEAP32[$1 + 32 >> 2] = 1; //@line 16040
    break;
   }
   $72 = HEAP32[$0 + 12 >> 2] | 0; //@line 16045
   $73 = $0 + 16 + ($72 << 3) | 0; //@line 16046
   $AsyncCtx11 = _emscripten_alloc_async_context(32, sp) | 0; //@line 16047
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0 + 16 | 0, $1, $2, $3, $4); //@line 16048
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 699; //@line 16051
    HEAP32[$AsyncCtx11 + 4 >> 2] = $1; //@line 16053
    HEAP32[$AsyncCtx11 + 8 >> 2] = $73; //@line 16055
    HEAP32[$AsyncCtx11 + 12 >> 2] = $2; //@line 16057
    HEAP32[$AsyncCtx11 + 16 >> 2] = $3; //@line 16059
    HEAP8[$AsyncCtx11 + 20 >> 0] = $4 & 1; //@line 16062
    HEAP32[$AsyncCtx11 + 24 >> 2] = $0; //@line 16064
    HEAP32[$AsyncCtx11 + 28 >> 2] = $72; //@line 16066
    sp = STACKTOP; //@line 16067
    return;
   }
   _emscripten_free_async_context($AsyncCtx11 | 0); //@line 16070
   $81 = $0 + 24 | 0; //@line 16071
   if (($72 | 0) > 1) {
    $84 = HEAP32[$0 + 8 >> 2] | 0; //@line 16075
    if (!($84 & 2)) {
     $87 = $1 + 36 | 0; //@line 16079
     if ((HEAP32[$87 >> 2] | 0) != 1) {
      if (!($84 & 1)) {
       $106 = $1 + 54 | 0; //@line 16086
       $$2 = $81; //@line 16087
       while (1) {
        if (HEAP8[$106 >> 0] | 0) {
         break L1;
        }
        if ((HEAP32[$87 >> 2] | 0) == 1) {
         break L1;
        }
        $AsyncCtx = _emscripten_alloc_async_context(36, sp) | 0; //@line 16099
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$2, $1, $2, $3, $4); //@line 16100
        if (___async) {
         break;
        }
        _emscripten_free_async_context($AsyncCtx | 0); //@line 16105
        $136 = $$2 + 8 | 0; //@line 16106
        if ($136 >>> 0 < $73 >>> 0) {
         $$2 = $136; //@line 16109
        } else {
         break L1;
        }
       }
       HEAP32[$AsyncCtx >> 2] = 702; //@line 16114
       HEAP32[$AsyncCtx + 4 >> 2] = $$2; //@line 16116
       HEAP32[$AsyncCtx + 8 >> 2] = $73; //@line 16118
       HEAP32[$AsyncCtx + 12 >> 2] = $106; //@line 16120
       HEAP32[$AsyncCtx + 16 >> 2] = $87; //@line 16122
       HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 16124
       HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 16126
       HEAP32[$AsyncCtx + 28 >> 2] = $3; //@line 16128
       HEAP8[$AsyncCtx + 32 >> 0] = $4 & 1; //@line 16131
       sp = STACKTOP; //@line 16132
       return;
      }
      $104 = $1 + 24 | 0; //@line 16135
      $105 = $1 + 54 | 0; //@line 16136
      $$1 = $81; //@line 16137
      while (1) {
       if (HEAP8[$105 >> 0] | 0) {
        break L1;
       }
       if ((HEAP32[$87 >> 2] | 0) == 1) {
        if ((HEAP32[$104 >> 2] | 0) == 1) {
         break L1;
        }
       }
       $AsyncCtx3 = _emscripten_alloc_async_context(40, sp) | 0; //@line 16153
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$1, $1, $2, $3, $4); //@line 16154
       if (___async) {
        break;
       }
       _emscripten_free_async_context($AsyncCtx3 | 0); //@line 16159
       $122 = $$1 + 8 | 0; //@line 16160
       if ($122 >>> 0 < $73 >>> 0) {
        $$1 = $122; //@line 16163
       } else {
        break L1;
       }
      }
      HEAP32[$AsyncCtx3 >> 2] = 701; //@line 16168
      HEAP32[$AsyncCtx3 + 4 >> 2] = $$1; //@line 16170
      HEAP32[$AsyncCtx3 + 8 >> 2] = $73; //@line 16172
      HEAP32[$AsyncCtx3 + 12 >> 2] = $105; //@line 16174
      HEAP32[$AsyncCtx3 + 16 >> 2] = $87; //@line 16176
      HEAP32[$AsyncCtx3 + 20 >> 2] = $104; //@line 16178
      HEAP32[$AsyncCtx3 + 24 >> 2] = $1; //@line 16180
      HEAP32[$AsyncCtx3 + 28 >> 2] = $2; //@line 16182
      HEAP32[$AsyncCtx3 + 32 >> 2] = $3; //@line 16184
      HEAP8[$AsyncCtx3 + 36 >> 0] = $4 & 1; //@line 16187
      sp = STACKTOP; //@line 16188
      return;
     }
    }
    $90 = $1 + 54 | 0; //@line 16192
    $$0 = $81; //@line 16193
    while (1) {
     if (HEAP8[$90 >> 0] | 0) {
      break L1;
     }
     $AsyncCtx7 = _emscripten_alloc_async_context(32, sp) | 0; //@line 16200
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$0, $1, $2, $3, $4); //@line 16201
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx7 | 0); //@line 16206
     $100 = $$0 + 8 | 0; //@line 16207
     if ($100 >>> 0 < $73 >>> 0) {
      $$0 = $100; //@line 16210
     } else {
      break L1;
     }
    }
    HEAP32[$AsyncCtx7 >> 2] = 700; //@line 16215
    HEAP32[$AsyncCtx7 + 4 >> 2] = $$0; //@line 16217
    HEAP32[$AsyncCtx7 + 8 >> 2] = $73; //@line 16219
    HEAP32[$AsyncCtx7 + 12 >> 2] = $90; //@line 16221
    HEAP32[$AsyncCtx7 + 16 >> 2] = $1; //@line 16223
    HEAP32[$AsyncCtx7 + 20 >> 2] = $2; //@line 16225
    HEAP32[$AsyncCtx7 + 24 >> 2] = $3; //@line 16227
    HEAP8[$AsyncCtx7 + 28 >> 0] = $4 & 1; //@line 16230
    sp = STACKTOP; //@line 16231
    return;
   }
  }
 } while (0);
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $26 = 0, $3 = 0, $31 = 0, $32 = 0, $35 = 0, $38 = 0, $4 = 0, $42 = 0, $44 = 0, $49 = 0, $50 = 0, $53 = 0, $56 = 0, $6 = 0, $63 = 0, $64 = 0, $68 = 0, $70 = 0, $75 = 0, $76 = 0, $79 = 0, $82 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx18 = 0, $AsyncCtx22 = 0, $AsyncCtx26 = 0, $AsyncCtx30 = 0, $AsyncCtx33 = 0, $AsyncCtx36 = 0, $AsyncCtx39 = 0, $AsyncCtx43 = 0, $AsyncCtx47 = 0, $AsyncCtx51 = 0, $AsyncCtx54 = 0, $AsyncCtx8 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP; //@line 3914
 STACKTOP = STACKTOP + 80 | 0; //@line 3915
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80); //@line 3915
 $vararg_buffer5 = sp + 24 | 0; //@line 3916
 $vararg_buffer3 = sp + 16 | 0; //@line 3917
 $2 = sp + 64 | 0; //@line 3920
 $3 = sp + 48 | 0; //@line 3921
 $4 = sp + 32 | 0; //@line 3922
 if (!$1) {
  _printf(11245, sp) | 0; //@line 3925
  _printf(11785, sp + 8 | 0) | 0; //@line 3926
  $AsyncCtx30 = _emscripten_alloc_async_context(4, sp) | 0; //@line 3927
  _putchar(10) | 0; //@line 3928
  if (___async) {
   HEAP32[$AsyncCtx30 >> 2] = 119; //@line 3931
   sp = STACKTOP; //@line 3932
   STACKTOP = sp; //@line 3933
   return;
  }
  _emscripten_free_async_context($AsyncCtx30 | 0); //@line 3935
  $AsyncCtx54 = _emscripten_alloc_async_context(4, sp) | 0; //@line 3936
  _mbed_assert_internal(13326, 11293, 760); //@line 3937
  if (___async) {
   HEAP32[$AsyncCtx54 >> 2] = 120; //@line 3940
   sp = STACKTOP; //@line 3941
   STACKTOP = sp; //@line 3942
   return;
  }
  _emscripten_free_async_context($AsyncCtx54 | 0); //@line 3944
  STACKTOP = sp; //@line 3945
  return;
 }
 $6 = $1 + 4 | 0; //@line 3947
 if (!(HEAP32[$6 >> 2] | 0)) {
  HEAP32[$0 + 1956 >> 2] = HEAP32[$1 + 16 >> 2]; //@line 3954
  HEAP8[$0 + 1964 >> 0] = 0; //@line 3956
  $63 = $0 + 1892 | 0; //@line 3957
  $64 = HEAP32[$63 >> 2] | 0; //@line 3958
  if (!$64) {
   STACKTOP = sp; //@line 3961
   return;
  }
  $68 = HEAP32[$0 + 2288 >> 2] | 0; //@line 3965
  $70 = HEAP32[$64 + 4 >> 2] | 0; //@line 3967
  $AsyncCtx18 = _emscripten_alloc_async_context(20, sp) | 0; //@line 3968
  FUNCTION_TABLE_vii[$70 & 31]($4, $0 + 1880 | 0); //@line 3969
  if (___async) {
   HEAP32[$AsyncCtx18 >> 2] = 130; //@line 3972
   HEAP32[$AsyncCtx18 + 4 >> 2] = $63; //@line 3974
   HEAP32[$AsyncCtx18 + 8 >> 2] = $4; //@line 3976
   HEAP32[$AsyncCtx18 + 12 >> 2] = $68; //@line 3978
   HEAP32[$AsyncCtx18 + 16 >> 2] = $4; //@line 3980
   sp = STACKTOP; //@line 3981
   STACKTOP = sp; //@line 3982
   return;
  }
  _emscripten_free_async_context($AsyncCtx18 | 0); //@line 3984
  $75 = $4 + 12 | 0; //@line 3986
  HEAP32[$75 >> 2] = HEAP32[$63 >> 2]; //@line 3987
  $AsyncCtx33 = _emscripten_alloc_async_context(12, sp) | 0; //@line 3988
  $76 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($68, $4, 2) | 0; //@line 3989
  if (___async) {
   HEAP32[$AsyncCtx33 >> 2] = 131; //@line 3992
   HEAP32[$AsyncCtx33 + 4 >> 2] = $75; //@line 3994
   HEAP32[$AsyncCtx33 + 8 >> 2] = $4; //@line 3996
   sp = STACKTOP; //@line 3997
   STACKTOP = sp; //@line 3998
   return;
  }
  _emscripten_free_async_context($AsyncCtx33 | 0); //@line 4000
  $79 = HEAP32[$75 >> 2] | 0; //@line 4001
  do {
   if ($79 | 0) {
    $82 = HEAP32[$79 + 8 >> 2] | 0; //@line 4006
    $AsyncCtx22 = _emscripten_alloc_async_context(8, sp) | 0; //@line 4007
    FUNCTION_TABLE_vi[$82 & 1023]($4); //@line 4008
    if (___async) {
     HEAP32[$AsyncCtx22 >> 2] = 132; //@line 4011
     HEAP32[$AsyncCtx22 + 4 >> 2] = $76; //@line 4013
     sp = STACKTOP; //@line 4014
     STACKTOP = sp; //@line 4015
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx22 | 0); //@line 4017
     break;
    }
   }
  } while (0);
  if ($76 | 0) {
   STACKTOP = sp; //@line 4024
   return;
  }
  $AsyncCtx43 = _emscripten_alloc_async_context(4, sp) | 0; //@line 4026
  _mbed_assert_internal(12025, 11293, 813); //@line 4027
  if (___async) {
   HEAP32[$AsyncCtx43 >> 2] = 133; //@line 4030
   sp = STACKTOP; //@line 4031
   STACKTOP = sp; //@line 4032
   return;
  }
  _emscripten_free_async_context($AsyncCtx43 | 0); //@line 4034
  STACKTOP = sp; //@line 4035
  return;
 }
 HEAP8[$0 + 1964 >> 0] = 0; //@line 4038
 _memset($0 + 1975 | 0, 0, 255) | 0; //@line 4040
 HEAP16[$0 + 2230 >> 1] = 255; //@line 4042
 _printf(11245, $vararg_buffer3) | 0; //@line 4043
 HEAP32[$vararg_buffer5 >> 2] = HEAP32[$6 >> 2]; //@line 4045
 _printf(11820, $vararg_buffer5) | 0; //@line 4046
 $AsyncCtx26 = _emscripten_alloc_async_context(20, sp) | 0; //@line 4047
 _putchar(10) | 0; //@line 4048
 if (___async) {
  HEAP32[$AsyncCtx26 >> 2] = 121; //@line 4051
  HEAP32[$AsyncCtx26 + 4 >> 2] = $2; //@line 4053
  HEAP32[$AsyncCtx26 + 8 >> 2] = $0; //@line 4055
  HEAP32[$AsyncCtx26 + 12 >> 2] = $3; //@line 4057
  HEAP32[$AsyncCtx26 + 16 >> 2] = $6; //@line 4059
  sp = STACKTOP; //@line 4060
  STACKTOP = sp; //@line 4061
  return;
 }
 _emscripten_free_async_context($AsyncCtx26 | 0); //@line 4063
 $19 = $0 + 1880 | 0; //@line 4066
 $20 = $0 + 1892 | 0; //@line 4067
 $21 = HEAP32[$20 >> 2] | 0; //@line 4068
 $22 = ($21 | 0) != 0; //@line 4069
 if ((HEAP32[$6 >> 2] | 0) == 2) {
  if (!$22) {
   STACKTOP = sp; //@line 4072
   return;
  }
  $24 = HEAP32[$0 + 2288 >> 2] | 0; //@line 4075
  $26 = HEAP32[$21 + 4 >> 2] | 0; //@line 4077
  $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 4078
  FUNCTION_TABLE_vii[$26 & 31]($2, $19); //@line 4079
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 122; //@line 4082
   HEAP32[$AsyncCtx + 4 >> 2] = $20; //@line 4084
   HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 4086
   HEAP32[$AsyncCtx + 12 >> 2] = $24; //@line 4088
   HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 4090
   sp = STACKTOP; //@line 4091
   STACKTOP = sp; //@line 4092
   return;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4094
  $31 = $2 + 12 | 0; //@line 4096
  HEAP32[$31 >> 2] = HEAP32[$20 >> 2]; //@line 4097
  $AsyncCtx39 = _emscripten_alloc_async_context(12, sp) | 0; //@line 4098
  $32 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($24, $2, 3) | 0; //@line 4099
  if (___async) {
   HEAP32[$AsyncCtx39 >> 2] = 123; //@line 4102
   HEAP32[$AsyncCtx39 + 4 >> 2] = $31; //@line 4104
   HEAP32[$AsyncCtx39 + 8 >> 2] = $2; //@line 4106
   sp = STACKTOP; //@line 4107
   STACKTOP = sp; //@line 4108
   return;
  }
  _emscripten_free_async_context($AsyncCtx39 | 0); //@line 4110
  $35 = HEAP32[$31 >> 2] | 0; //@line 4111
  do {
   if ($35 | 0) {
    $38 = HEAP32[$35 + 8 >> 2] | 0; //@line 4116
    $AsyncCtx8 = _emscripten_alloc_async_context(8, sp) | 0; //@line 4117
    FUNCTION_TABLE_vi[$38 & 1023]($2); //@line 4118
    if (___async) {
     HEAP32[$AsyncCtx8 >> 2] = 124; //@line 4121
     HEAP32[$AsyncCtx8 + 4 >> 2] = $32; //@line 4123
     sp = STACKTOP; //@line 4124
     STACKTOP = sp; //@line 4125
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx8 | 0); //@line 4127
     break;
    }
   }
  } while (0);
  if ($32 | 0) {
   STACKTOP = sp; //@line 4134
   return;
  }
  $AsyncCtx51 = _emscripten_alloc_async_context(4, sp) | 0; //@line 4136
  _mbed_assert_internal(12025, 11293, 778); //@line 4137
  if (___async) {
   HEAP32[$AsyncCtx51 >> 2] = 125; //@line 4140
   sp = STACKTOP; //@line 4141
   STACKTOP = sp; //@line 4142
   return;
  }
  _emscripten_free_async_context($AsyncCtx51 | 0); //@line 4144
  STACKTOP = sp; //@line 4145
  return;
 } else {
  if (!$22) {
   STACKTOP = sp; //@line 4148
   return;
  }
  $42 = HEAP32[$0 + 2288 >> 2] | 0; //@line 4151
  $44 = HEAP32[$21 + 4 >> 2] | 0; //@line 4153
  $AsyncCtx11 = _emscripten_alloc_async_context(20, sp) | 0; //@line 4154
  FUNCTION_TABLE_vii[$44 & 31]($3, $19); //@line 4155
  if (___async) {
   HEAP32[$AsyncCtx11 >> 2] = 126; //@line 4158
   HEAP32[$AsyncCtx11 + 4 >> 2] = $20; //@line 4160
   HEAP32[$AsyncCtx11 + 8 >> 2] = $3; //@line 4162
   HEAP32[$AsyncCtx11 + 12 >> 2] = $42; //@line 4164
   HEAP32[$AsyncCtx11 + 16 >> 2] = $3; //@line 4166
   sp = STACKTOP; //@line 4167
   STACKTOP = sp; //@line 4168
   return;
  }
  _emscripten_free_async_context($AsyncCtx11 | 0); //@line 4170
  $49 = $3 + 12 | 0; //@line 4172
  HEAP32[$49 >> 2] = HEAP32[$20 >> 2]; //@line 4173
  $AsyncCtx36 = _emscripten_alloc_async_context(12, sp) | 0; //@line 4174
  $50 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($42, $3, 4) | 0; //@line 4175
  if (___async) {
   HEAP32[$AsyncCtx36 >> 2] = 127; //@line 4178
   HEAP32[$AsyncCtx36 + 4 >> 2] = $49; //@line 4180
   HEAP32[$AsyncCtx36 + 8 >> 2] = $3; //@line 4182
   sp = STACKTOP; //@line 4183
   STACKTOP = sp; //@line 4184
   return;
  }
  _emscripten_free_async_context($AsyncCtx36 | 0); //@line 4186
  $53 = HEAP32[$49 >> 2] | 0; //@line 4187
  do {
   if ($53 | 0) {
    $56 = HEAP32[$53 + 8 >> 2] | 0; //@line 4192
    $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 4193
    FUNCTION_TABLE_vi[$56 & 1023]($3); //@line 4194
    if (___async) {
     HEAP32[$AsyncCtx15 >> 2] = 128; //@line 4197
     HEAP32[$AsyncCtx15 + 4 >> 2] = $50; //@line 4199
     sp = STACKTOP; //@line 4200
     STACKTOP = sp; //@line 4201
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx15 | 0); //@line 4203
     break;
    }
   }
  } while (0);
  if ($50 | 0) {
   STACKTOP = sp; //@line 4210
   return;
  }
  $AsyncCtx47 = _emscripten_alloc_async_context(4, sp) | 0; //@line 4212
  _mbed_assert_internal(12025, 11293, 789); //@line 4213
  if (___async) {
   HEAP32[$AsyncCtx47 >> 2] = 129; //@line 4216
   sp = STACKTOP; //@line 4217
   STACKTOP = sp; //@line 4218
   return;
  }
  _emscripten_free_async_context($AsyncCtx47 | 0); //@line 4220
  STACKTOP = sp; //@line 4221
  return;
 }
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $16 = 0, $2 = 0, $26 = 0, $27 = 0, $3 = 0, $31 = 0, $33 = 0, $38 = 0, $39 = 0, $42 = 0, $45 = 0, $51 = 0, $52 = 0, $56 = 0, $58 = 0, $64 = 0, $66 = 0, $68 = 0, $69 = 0, $72 = 0, $75 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx31 = 0, $AsyncCtx34 = 0, $AsyncCtx37 = 0, $AsyncCtx41 = 0, $AsyncCtx45 = 0, $AsyncCtx49 = 0, $AsyncCtx53 = 0, $AsyncCtx56 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, sp = 0;
 sp = STACKTOP; //@line 4509
 STACKTOP = STACKTOP + 80 | 0; //@line 4510
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80); //@line 4510
 $vararg_buffer9 = sp + 40 | 0; //@line 4511
 $vararg_buffer7 = sp + 32 | 0; //@line 4512
 $vararg_buffer5 = sp + 24 | 0; //@line 4513
 $vararg_buffer3 = sp + 16 | 0; //@line 4514
 $2 = sp + 64 | 0; //@line 4517
 $3 = sp + 48 | 0; //@line 4518
 if (!$1) {
  _printf(11245, sp) | 0; //@line 4521
  _printf(11258, sp + 8 | 0) | 0; //@line 4522
  $AsyncCtx31 = _emscripten_alloc_async_context(4, sp) | 0; //@line 4523
  _putchar(10) | 0; //@line 4524
  if (___async) {
   HEAP32[$AsyncCtx31 >> 2] = 144; //@line 4527
   sp = STACKTOP; //@line 4528
   STACKTOP = sp; //@line 4529
   return;
  }
  _emscripten_free_async_context($AsyncCtx31 | 0); //@line 4531
  $AsyncCtx56 = _emscripten_alloc_async_context(4, sp) | 0; //@line 4532
  _mbed_assert_internal(13326, 11293, 688); //@line 4533
  if (___async) {
   HEAP32[$AsyncCtx56 >> 2] = 145; //@line 4536
   sp = STACKTOP; //@line 4537
   STACKTOP = sp; //@line 4538
   return;
  }
  _emscripten_free_async_context($AsyncCtx56 | 0); //@line 4540
  STACKTOP = sp; //@line 4541
  return;
 }
 switch (HEAP32[$1 >> 2] | 0) {
 case 0:
  {
   $9 = $0 + 1876 | 0; //@line 4549
   if (!(HEAP32[$1 + 4 >> 2] | 0)) {
    HEAP32[$9 >> 2] = 4; //@line 4551
    $AsyncCtx45 = _emscripten_alloc_async_context(20, sp) | 0; //@line 4552
    $10 = __ZN12LoRaWANStack18lora_state_machineEv($0) | 0; //@line 4553
    if (___async) {
     HEAP32[$AsyncCtx45 >> 2] = 146; //@line 4556
     HEAP32[$AsyncCtx45 + 4 >> 2] = $vararg_buffer3; //@line 4558
     HEAP32[$AsyncCtx45 + 8 >> 2] = $vararg_buffer3; //@line 4560
     HEAP32[$AsyncCtx45 + 12 >> 2] = $vararg_buffer5; //@line 4562
     HEAP32[$AsyncCtx45 + 16 >> 2] = $vararg_buffer5; //@line 4564
     sp = STACKTOP; //@line 4565
     STACKTOP = sp; //@line 4566
     return;
    }
    _emscripten_free_async_context($AsyncCtx45 | 0); //@line 4568
    if (!$10) {
     STACKTOP = sp; //@line 4571
     return;
    }
    _printf(11245, $vararg_buffer3) | 0; //@line 4573
    _printf(11391, $vararg_buffer5) | 0; //@line 4574
    $AsyncCtx27 = _emscripten_alloc_async_context(4, sp) | 0; //@line 4575
    _putchar(10) | 0; //@line 4576
    if (___async) {
     HEAP32[$AsyncCtx27 >> 2] = 147; //@line 4579
     sp = STACKTOP; //@line 4580
     STACKTOP = sp; //@line 4581
     return;
    }
    _emscripten_free_async_context($AsyncCtx27 | 0); //@line 4583
    STACKTOP = sp; //@line 4584
    return;
   }
   HEAP32[$9 >> 2] = 6; //@line 4586
   $AsyncCtx41 = _emscripten_alloc_async_context(28, sp) | 0; //@line 4587
   $16 = __ZN12LoRaWANStack18lora_state_machineEv($0) | 0; //@line 4588
   if (___async) {
    HEAP32[$AsyncCtx41 >> 2] = 148; //@line 4591
    HEAP32[$AsyncCtx41 + 4 >> 2] = $0; //@line 4593
    HEAP32[$AsyncCtx41 + 8 >> 2] = $vararg_buffer7; //@line 4595
    HEAP32[$AsyncCtx41 + 12 >> 2] = $vararg_buffer7; //@line 4597
    HEAP32[$AsyncCtx41 + 16 >> 2] = $vararg_buffer9; //@line 4599
    HEAP32[$AsyncCtx41 + 20 >> 2] = $vararg_buffer9; //@line 4601
    HEAP32[$AsyncCtx41 + 24 >> 2] = $2; //@line 4603
    sp = STACKTOP; //@line 4604
    STACKTOP = sp; //@line 4605
    return;
   }
   _emscripten_free_async_context($AsyncCtx41 | 0); //@line 4607
   do {
    if (($16 | 0) != -1018) {
     _printf(11245, $vararg_buffer7) | 0; //@line 4611
     _printf(11443, $vararg_buffer9) | 0; //@line 4612
     $AsyncCtx23 = _emscripten_alloc_async_context(12, sp) | 0; //@line 4613
     _putchar(10) | 0; //@line 4614
     if (___async) {
      HEAP32[$AsyncCtx23 >> 2] = 149; //@line 4617
      HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 4619
      HEAP32[$AsyncCtx23 + 8 >> 2] = $2; //@line 4621
      sp = STACKTOP; //@line 4622
      STACKTOP = sp; //@line 4623
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx23 | 0); //@line 4625
      break;
     }
    }
   } while (0);
   $26 = $0 + 1892 | 0; //@line 4630
   $27 = HEAP32[$26 >> 2] | 0; //@line 4631
   if (!$27) {
    STACKTOP = sp; //@line 4634
    return;
   }
   $31 = HEAP32[$0 + 2288 >> 2] | 0; //@line 4638
   $33 = HEAP32[$27 + 4 >> 2] | 0; //@line 4640
   $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 4641
   FUNCTION_TABLE_vii[$33 & 31]($2, $0 + 1880 | 0); //@line 4642
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 150; //@line 4645
    HEAP32[$AsyncCtx + 4 >> 2] = $26; //@line 4647
    HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 4649
    HEAP32[$AsyncCtx + 12 >> 2] = $31; //@line 4651
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 4653
    sp = STACKTOP; //@line 4654
    STACKTOP = sp; //@line 4655
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 4657
   $38 = $2 + 12 | 0; //@line 4659
   HEAP32[$38 >> 2] = HEAP32[$26 >> 2]; //@line 4660
   $AsyncCtx37 = _emscripten_alloc_async_context(12, sp) | 0; //@line 4661
   $39 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($31, $2, 10) | 0; //@line 4662
   if (___async) {
    HEAP32[$AsyncCtx37 >> 2] = 151; //@line 4665
    HEAP32[$AsyncCtx37 + 4 >> 2] = $38; //@line 4667
    HEAP32[$AsyncCtx37 + 8 >> 2] = $2; //@line 4669
    sp = STACKTOP; //@line 4670
    STACKTOP = sp; //@line 4671
    return;
   }
   _emscripten_free_async_context($AsyncCtx37 | 0); //@line 4673
   $42 = HEAP32[$38 >> 2] | 0; //@line 4674
   do {
    if ($42 | 0) {
     $45 = HEAP32[$42 + 8 >> 2] | 0; //@line 4679
     $AsyncCtx12 = _emscripten_alloc_async_context(8, sp) | 0; //@line 4680
     FUNCTION_TABLE_vi[$45 & 1023]($2); //@line 4681
     if (___async) {
      HEAP32[$AsyncCtx12 >> 2] = 152; //@line 4684
      HEAP32[$AsyncCtx12 + 4 >> 2] = $39; //@line 4686
      sp = STACKTOP; //@line 4687
      STACKTOP = sp; //@line 4688
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx12 | 0); //@line 4690
      break;
     }
    }
   } while (0);
   if ($39 | 0) {
    STACKTOP = sp; //@line 4697
    return;
   }
   $AsyncCtx53 = _emscripten_alloc_async_context(4, sp) | 0; //@line 4699
   _mbed_assert_internal(12025, 11293, 709); //@line 4700
   if (___async) {
    HEAP32[$AsyncCtx53 >> 2] = 153; //@line 4703
    sp = STACKTOP; //@line 4704
    STACKTOP = sp; //@line 4705
    return;
   }
   _emscripten_free_async_context($AsyncCtx53 | 0); //@line 4707
   STACKTOP = sp; //@line 4708
   return;
  }
 case 1:
  {
   if (HEAP32[$1 + 4 >> 2] | 0) {
    STACKTOP = sp; //@line 4716
    return;
   }
   $51 = $0 + 1908 | 0; //@line 4718
   $52 = HEAP32[$51 >> 2] | 0; //@line 4719
   if (!$52) {
    STACKTOP = sp; //@line 4722
    return;
   }
   $56 = HEAP32[$0 + 2288 >> 2] | 0; //@line 4726
   $58 = HEAP32[$52 + 4 >> 2] | 0; //@line 4728
   $AsyncCtx15 = _emscripten_alloc_async_context(24, sp) | 0; //@line 4729
   FUNCTION_TABLE_vii[$58 & 31]($3, $0 + 1896 | 0); //@line 4730
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 154; //@line 4733
    HEAP32[$AsyncCtx15 + 4 >> 2] = $51; //@line 4735
    HEAP32[$AsyncCtx15 + 8 >> 2] = $3; //@line 4737
    HEAP32[$AsyncCtx15 + 12 >> 2] = $1; //@line 4739
    HEAP32[$AsyncCtx15 + 16 >> 2] = $56; //@line 4741
    HEAP32[$AsyncCtx15 + 20 >> 2] = $3; //@line 4743
    sp = STACKTOP; //@line 4744
    STACKTOP = sp; //@line 4745
    return;
   }
   _emscripten_free_async_context($AsyncCtx15 | 0); //@line 4747
   $64 = $3 + 12 | 0; //@line 4749
   HEAP32[$64 >> 2] = HEAP32[$51 >> 2]; //@line 4750
   $66 = HEAP8[$1 + 12 >> 0] | 0; //@line 4752
   $68 = HEAP8[$1 + 13 >> 0] | 0; //@line 4754
   $AsyncCtx34 = _emscripten_alloc_async_context(12, sp) | 0; //@line 4755
   $69 = __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1_($56, $3, $66, $68) | 0; //@line 4756
   if (___async) {
    HEAP32[$AsyncCtx34 >> 2] = 155; //@line 4759
    HEAP32[$AsyncCtx34 + 4 >> 2] = $64; //@line 4761
    HEAP32[$AsyncCtx34 + 8 >> 2] = $3; //@line 4763
    sp = STACKTOP; //@line 4764
    STACKTOP = sp; //@line 4765
    return;
   }
   _emscripten_free_async_context($AsyncCtx34 | 0); //@line 4767
   $72 = HEAP32[$64 >> 2] | 0; //@line 4768
   do {
    if ($72 | 0) {
     $75 = HEAP32[$72 + 8 >> 2] | 0; //@line 4773
     $AsyncCtx19 = _emscripten_alloc_async_context(8, sp) | 0; //@line 4774
     FUNCTION_TABLE_vi[$75 & 1023]($3); //@line 4775
     if (___async) {
      HEAP32[$AsyncCtx19 >> 2] = 156; //@line 4778
      HEAP32[$AsyncCtx19 + 4 >> 2] = $69; //@line 4780
      sp = STACKTOP; //@line 4781
      STACKTOP = sp; //@line 4782
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx19 | 0); //@line 4784
      break;
     }
    }
   } while (0);
   if ($69 | 0) {
    STACKTOP = sp; //@line 4791
    return;
   }
   $AsyncCtx49 = _emscripten_alloc_async_context(4, sp) | 0; //@line 4793
   _mbed_assert_internal(12025, 11293, 731); //@line 4794
   if (___async) {
    HEAP32[$AsyncCtx49 >> 2] = 157; //@line 4797
    sp = STACKTOP; //@line 4798
    STACKTOP = sp; //@line 4799
    return;
   }
   _emscripten_free_async_context($AsyncCtx49 | 0); //@line 4801
   STACKTOP = sp; //@line 4802
   return;
  }
 default:
  {
   STACKTOP = sp; //@line 4806
   return;
  }
 }
}
function _mbedtls_aes_crypt_cbc($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$04056 = 0, $$04255 = 0, $$044 = 0, $$04554 = 0, $$14160 = 0, $$14160$us = 0, $$14359 = 0, $$14359$us = 0, $$14658 = 0, $$14658$us = 0, $10 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $127 = 0, $13 = 0, $131 = 0, $135 = 0, $139 = 0, $14 = 0, $143 = 0, $147 = 0, $15 = 0, $151 = 0, $155 = 0, $159 = 0, $16 = 0, $163 = 0, $167 = 0, $17 = 0, $171 = 0, $175 = 0, $179 = 0, $18 = 0, $183 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $6 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 1165
 STACKTOP = STACKTOP + 16 | 0; //@line 1166
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 1166
 $6 = sp; //@line 1167
 if ($2 & 15 | 0) {
  $$044 = -34; //@line 1171
  STACKTOP = sp; //@line 1172
  return $$044 | 0; //@line 1172
 }
 $10 = ($2 | 0) == 0; //@line 1175
 if (!$1) {
  if ($10) {
   $$044 = 0; //@line 1178
   STACKTOP = sp; //@line 1179
   return $$044 | 0; //@line 1179
  }
  $109 = $3 + 1 | 0; //@line 1181
  $110 = $3 + 2 | 0; //@line 1182
  $111 = $3 + 3 | 0; //@line 1183
  $112 = $3 + 4 | 0; //@line 1184
  $113 = $3 + 5 | 0; //@line 1185
  $114 = $3 + 6 | 0; //@line 1186
  $115 = $3 + 7 | 0; //@line 1187
  $116 = $3 + 8 | 0; //@line 1188
  $117 = $3 + 9 | 0; //@line 1189
  $118 = $3 + 10 | 0; //@line 1190
  $119 = $3 + 11 | 0; //@line 1191
  $120 = $3 + 12 | 0; //@line 1192
  $121 = $3 + 13 | 0; //@line 1193
  $122 = $3 + 14 | 0; //@line 1194
  $123 = $3 + 15 | 0; //@line 1195
  $$04056 = $5; //@line 1196
  $$04255 = $4; //@line 1196
  $$04554 = $2; //@line 1196
  while (1) {
   dest = $6; //@line 1198
   src = $$04255; //@line 1198
   stop = dest + 16 | 0; //@line 1198
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 1198
    dest = dest + 1 | 0; //@line 1198
    src = src + 1 | 0; //@line 1198
   } while ((dest | 0) < (stop | 0));
   _mbedtls_internal_aes_decrypt($0, $$04255, $$04056) | 0; //@line 1199
   HEAP8[$$04056 >> 0] = HEAP8[$3 >> 0] ^ HEAP8[$$04056 >> 0]; //@line 1203
   $127 = $$04056 + 1 | 0; //@line 1204
   HEAP8[$127 >> 0] = HEAP8[$109 >> 0] ^ HEAP8[$127 >> 0]; //@line 1208
   $131 = $$04056 + 2 | 0; //@line 1209
   HEAP8[$131 >> 0] = HEAP8[$110 >> 0] ^ HEAP8[$131 >> 0]; //@line 1213
   $135 = $$04056 + 3 | 0; //@line 1214
   HEAP8[$135 >> 0] = HEAP8[$111 >> 0] ^ HEAP8[$135 >> 0]; //@line 1218
   $139 = $$04056 + 4 | 0; //@line 1219
   HEAP8[$139 >> 0] = HEAP8[$112 >> 0] ^ HEAP8[$139 >> 0]; //@line 1223
   $143 = $$04056 + 5 | 0; //@line 1224
   HEAP8[$143 >> 0] = HEAP8[$113 >> 0] ^ HEAP8[$143 >> 0]; //@line 1228
   $147 = $$04056 + 6 | 0; //@line 1229
   HEAP8[$147 >> 0] = HEAP8[$114 >> 0] ^ HEAP8[$147 >> 0]; //@line 1233
   $151 = $$04056 + 7 | 0; //@line 1234
   HEAP8[$151 >> 0] = HEAP8[$115 >> 0] ^ HEAP8[$151 >> 0]; //@line 1238
   $155 = $$04056 + 8 | 0; //@line 1239
   HEAP8[$155 >> 0] = HEAP8[$116 >> 0] ^ HEAP8[$155 >> 0]; //@line 1243
   $159 = $$04056 + 9 | 0; //@line 1244
   HEAP8[$159 >> 0] = HEAP8[$117 >> 0] ^ HEAP8[$159 >> 0]; //@line 1248
   $163 = $$04056 + 10 | 0; //@line 1249
   HEAP8[$163 >> 0] = HEAP8[$118 >> 0] ^ HEAP8[$163 >> 0]; //@line 1253
   $167 = $$04056 + 11 | 0; //@line 1254
   HEAP8[$167 >> 0] = HEAP8[$119 >> 0] ^ HEAP8[$167 >> 0]; //@line 1258
   $171 = $$04056 + 12 | 0; //@line 1259
   HEAP8[$171 >> 0] = HEAP8[$120 >> 0] ^ HEAP8[$171 >> 0]; //@line 1263
   $175 = $$04056 + 13 | 0; //@line 1264
   HEAP8[$175 >> 0] = HEAP8[$121 >> 0] ^ HEAP8[$175 >> 0]; //@line 1268
   $179 = $$04056 + 14 | 0; //@line 1269
   HEAP8[$179 >> 0] = HEAP8[$122 >> 0] ^ HEAP8[$179 >> 0]; //@line 1273
   $183 = $$04056 + 15 | 0; //@line 1274
   HEAP8[$183 >> 0] = HEAP8[$123 >> 0] ^ HEAP8[$183 >> 0]; //@line 1278
   dest = $3; //@line 1279
   src = $6; //@line 1279
   stop = dest + 16 | 0; //@line 1279
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 1279
    dest = dest + 1 | 0; //@line 1279
    src = src + 1 | 0; //@line 1279
   } while ((dest | 0) < (stop | 0));
   $$04554 = $$04554 + -16 | 0; //@line 1282
   if (!$$04554) {
    $$044 = 0; //@line 1285
    break;
   } else {
    $$04056 = $$04056 + 16 | 0; //@line 1288
    $$04255 = $$04255 + 16 | 0; //@line 1288
   }
  }
  STACKTOP = sp; //@line 1291
  return $$044 | 0; //@line 1291
 }
 if ($10) {
  $$044 = 0; //@line 1294
  STACKTOP = sp; //@line 1295
  return $$044 | 0; //@line 1295
 }
 $12 = $3 + 1 | 0; //@line 1298
 $13 = $3 + 2 | 0; //@line 1299
 $14 = $3 + 3 | 0; //@line 1300
 $15 = $3 + 4 | 0; //@line 1301
 $16 = $3 + 5 | 0; //@line 1302
 $17 = $3 + 6 | 0; //@line 1303
 $18 = $3 + 7 | 0; //@line 1304
 $19 = $3 + 8 | 0; //@line 1305
 $20 = $3 + 9 | 0; //@line 1306
 $21 = $3 + 10 | 0; //@line 1307
 $22 = $3 + 11 | 0; //@line 1308
 $23 = $3 + 12 | 0; //@line 1309
 $24 = $3 + 13 | 0; //@line 1310
 $25 = $3 + 14 | 0; //@line 1311
 $26 = $3 + 15 | 0; //@line 1312
 if (($1 | 0) == 1) {
  $$14160$us = $5; //@line 1314
  $$14359$us = $4; //@line 1314
  $$14658$us = $2; //@line 1314
  while (1) {
   HEAP8[$$14160$us >> 0] = HEAP8[$3 >> 0] ^ HEAP8[$$14359$us >> 0]; //@line 1319
   HEAP8[$$14160$us + 1 >> 0] = HEAP8[$12 >> 0] ^ HEAP8[$$14359$us + 1 >> 0]; //@line 1325
   HEAP8[$$14160$us + 2 >> 0] = HEAP8[$13 >> 0] ^ HEAP8[$$14359$us + 2 >> 0]; //@line 1331
   HEAP8[$$14160$us + 3 >> 0] = HEAP8[$14 >> 0] ^ HEAP8[$$14359$us + 3 >> 0]; //@line 1337
   HEAP8[$$14160$us + 4 >> 0] = HEAP8[$15 >> 0] ^ HEAP8[$$14359$us + 4 >> 0]; //@line 1343
   HEAP8[$$14160$us + 5 >> 0] = HEAP8[$16 >> 0] ^ HEAP8[$$14359$us + 5 >> 0]; //@line 1349
   HEAP8[$$14160$us + 6 >> 0] = HEAP8[$17 >> 0] ^ HEAP8[$$14359$us + 6 >> 0]; //@line 1355
   HEAP8[$$14160$us + 7 >> 0] = HEAP8[$18 >> 0] ^ HEAP8[$$14359$us + 7 >> 0]; //@line 1361
   HEAP8[$$14160$us + 8 >> 0] = HEAP8[$19 >> 0] ^ HEAP8[$$14359$us + 8 >> 0]; //@line 1367
   HEAP8[$$14160$us + 9 >> 0] = HEAP8[$20 >> 0] ^ HEAP8[$$14359$us + 9 >> 0]; //@line 1373
   HEAP8[$$14160$us + 10 >> 0] = HEAP8[$21 >> 0] ^ HEAP8[$$14359$us + 10 >> 0]; //@line 1379
   HEAP8[$$14160$us + 11 >> 0] = HEAP8[$22 >> 0] ^ HEAP8[$$14359$us + 11 >> 0]; //@line 1385
   HEAP8[$$14160$us + 12 >> 0] = HEAP8[$23 >> 0] ^ HEAP8[$$14359$us + 12 >> 0]; //@line 1391
   HEAP8[$$14160$us + 13 >> 0] = HEAP8[$24 >> 0] ^ HEAP8[$$14359$us + 13 >> 0]; //@line 1397
   HEAP8[$$14160$us + 14 >> 0] = HEAP8[$25 >> 0] ^ HEAP8[$$14359$us + 14 >> 0]; //@line 1403
   HEAP8[$$14160$us + 15 >> 0] = HEAP8[$26 >> 0] ^ HEAP8[$$14359$us + 15 >> 0]; //@line 1409
   _mbedtls_internal_aes_encrypt($0, $$14160$us, $$14160$us) | 0; //@line 1410
   dest = $3; //@line 1411
   src = $$14160$us; //@line 1411
   stop = dest + 16 | 0; //@line 1411
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 1411
    dest = dest + 1 | 0; //@line 1411
    src = src + 1 | 0; //@line 1411
   } while ((dest | 0) < (stop | 0));
   $$14658$us = $$14658$us + -16 | 0; //@line 1414
   if (!$$14658$us) {
    $$044 = 0; //@line 1417
    break;
   } else {
    $$14160$us = $$14160$us + 16 | 0; //@line 1420
    $$14359$us = $$14359$us + 16 | 0; //@line 1420
   }
  }
  STACKTOP = sp; //@line 1423
  return $$044 | 0; //@line 1423
 } else {
  $$14160 = $5; //@line 1425
  $$14359 = $4; //@line 1425
  $$14658 = $2; //@line 1425
  while (1) {
   HEAP8[$$14160 >> 0] = HEAP8[$3 >> 0] ^ HEAP8[$$14359 >> 0]; //@line 1430
   HEAP8[$$14160 + 1 >> 0] = HEAP8[$12 >> 0] ^ HEAP8[$$14359 + 1 >> 0]; //@line 1436
   HEAP8[$$14160 + 2 >> 0] = HEAP8[$13 >> 0] ^ HEAP8[$$14359 + 2 >> 0]; //@line 1442
   HEAP8[$$14160 + 3 >> 0] = HEAP8[$14 >> 0] ^ HEAP8[$$14359 + 3 >> 0]; //@line 1448
   HEAP8[$$14160 + 4 >> 0] = HEAP8[$15 >> 0] ^ HEAP8[$$14359 + 4 >> 0]; //@line 1454
   HEAP8[$$14160 + 5 >> 0] = HEAP8[$16 >> 0] ^ HEAP8[$$14359 + 5 >> 0]; //@line 1460
   HEAP8[$$14160 + 6 >> 0] = HEAP8[$17 >> 0] ^ HEAP8[$$14359 + 6 >> 0]; //@line 1466
   HEAP8[$$14160 + 7 >> 0] = HEAP8[$18 >> 0] ^ HEAP8[$$14359 + 7 >> 0]; //@line 1472
   HEAP8[$$14160 + 8 >> 0] = HEAP8[$19 >> 0] ^ HEAP8[$$14359 + 8 >> 0]; //@line 1478
   HEAP8[$$14160 + 9 >> 0] = HEAP8[$20 >> 0] ^ HEAP8[$$14359 + 9 >> 0]; //@line 1484
   HEAP8[$$14160 + 10 >> 0] = HEAP8[$21 >> 0] ^ HEAP8[$$14359 + 10 >> 0]; //@line 1490
   HEAP8[$$14160 + 11 >> 0] = HEAP8[$22 >> 0] ^ HEAP8[$$14359 + 11 >> 0]; //@line 1496
   HEAP8[$$14160 + 12 >> 0] = HEAP8[$23 >> 0] ^ HEAP8[$$14359 + 12 >> 0]; //@line 1502
   HEAP8[$$14160 + 13 >> 0] = HEAP8[$24 >> 0] ^ HEAP8[$$14359 + 13 >> 0]; //@line 1508
   HEAP8[$$14160 + 14 >> 0] = HEAP8[$25 >> 0] ^ HEAP8[$$14359 + 14 >> 0]; //@line 1514
   HEAP8[$$14160 + 15 >> 0] = HEAP8[$26 >> 0] ^ HEAP8[$$14359 + 15 >> 0]; //@line 1520
   _mbedtls_internal_aes_decrypt($0, $$14160, $$14160) | 0; //@line 1521
   dest = $3; //@line 1522
   src = $$14160; //@line 1522
   stop = dest + 16 | 0; //@line 1522
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 1522
    dest = dest + 1 | 0; //@line 1522
    src = src + 1 | 0; //@line 1522
   } while ((dest | 0) < (stop | 0));
   $$14658 = $$14658 + -16 | 0; //@line 1525
   if (!$$14658) {
    $$044 = 0; //@line 1528
    break;
   } else {
    $$14160 = $$14160 + 16 | 0; //@line 1531
    $$14359 = $$14359 + 16 | 0; //@line 1531
   }
  }
  STACKTOP = sp; //@line 1534
  return $$044 | 0; //@line 1534
 }
 return 0; //@line 1536
}
function _initialize($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$037 = 0, $1 = 0, $101 = 0, $102 = 0, $103 = 0, $105 = 0, $106 = 0, $109 = 0, $115 = 0, $116 = 0, $117 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $130 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $140 = 0, $142 = 0, $148 = 0, $149 = 0, $150 = 0, $159 = 0, $160 = 0, $161 = 0, $163 = 0, $167 = 0, $173 = 0, $174 = 0, $175 = 0, $177 = 0, $18 = 0, $25 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $39 = 0, $40 = 0, $41 = 0, $45 = 0, $46 = 0, $52 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $65 = 0, $66 = 0, $68 = 0, $7 = 0, $70 = 0, $73 = 0, $77 = 0, $78 = 0, $85 = 0, $86 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx16 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4799
 $1 = $0 + 4 | 0; //@line 4800
 if (HEAP8[(HEAP32[$1 >> 2] | 0) + 56 >> 0] | 0) {
  return;
 }
 $7 = HEAP32[HEAP32[$0 >> 2] >> 2] | 0; //@line 4809
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 4810
 FUNCTION_TABLE_v[$7 & 15](); //@line 4811
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 595; //@line 4814
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 4816
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 4818
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 4820
  sp = STACKTOP; //@line 4821
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 4824
 $13 = HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] | 0; //@line 4827
 $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 4828
 $14 = FUNCTION_TABLE_i[$13 & 7]() | 0; //@line 4829
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 596; //@line 4832
  HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 4834
  HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 4836
  HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 4838
  sp = STACKTOP; //@line 4839
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 4842
 $18 = HEAP32[$14 >> 2] | 0; //@line 4843
 do {
  if (!$18) {
   $AsyncCtx20 = _emscripten_alloc_async_context(20, sp) | 0; //@line 4847
   _mbed_assert_internal(13326, 13328, 41); //@line 4848
   if (___async) {
    HEAP32[$AsyncCtx20 >> 2] = 597; //@line 4851
    HEAP32[$AsyncCtx20 + 4 >> 2] = $1; //@line 4853
    HEAP32[$AsyncCtx20 + 8 >> 2] = $0; //@line 4855
    HEAP32[$AsyncCtx20 + 12 >> 2] = $14; //@line 4857
    HEAP32[$AsyncCtx20 + 16 >> 2] = $0; //@line 4859
    sp = STACKTOP; //@line 4860
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx20 | 0); //@line 4863
    $$0 = 1e6; //@line 4864
    break;
   }
  } else {
   $$0 = $18; //@line 4868
  }
 } while (0);
 $25 = HEAP32[$14 + 4 >> 2] | 0; //@line 4872
 do {
  if (($25 + -4 | 0) >>> 0 > 28) {
   $AsyncCtx16 = _emscripten_alloc_async_context(20, sp) | 0; //@line 4877
   _mbed_assert_internal(13326, 13328, 47); //@line 4878
   if (___async) {
    HEAP32[$AsyncCtx16 >> 2] = 598; //@line 4881
    HEAP32[$AsyncCtx16 + 4 >> 2] = $$0; //@line 4883
    HEAP32[$AsyncCtx16 + 8 >> 2] = $1; //@line 4885
    HEAP32[$AsyncCtx16 + 12 >> 2] = $0; //@line 4887
    HEAP32[$AsyncCtx16 + 16 >> 2] = $0; //@line 4889
    sp = STACKTOP; //@line 4890
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx16 | 0); //@line 4893
    $$037 = 32; //@line 4894
    break;
   }
  } else {
   $$037 = $25; //@line 4898
  }
 } while (0);
 $32 = 7 << $$037 + -4; //@line 4902
 $33 = ___muldi3($32 | 0, 0, 1e6, 0) | 0; //@line 4903
 $34 = tempRet0; //@line 4904
 $35 = _i64Add($$0 | 0, 0, -1, -1) | 0; //@line 4905
 $37 = _i64Add($35 | 0, tempRet0 | 0, $33 | 0, $34 | 0) | 0; //@line 4907
 $39 = ___udivdi3($37 | 0, tempRet0 | 0, $$0 | 0, 0) | 0; //@line 4909
 $40 = tempRet0; //@line 4910
 $41 = HEAP32[$1 >> 2] | 0; //@line 4911
 HEAP32[$41 >> 2] = 0; //@line 4912
 HEAP32[$41 + 4 >> 2] = 0; //@line 4914
 $45 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 4917
 $AsyncCtx6 = _emscripten_alloc_async_context(40, sp) | 0; //@line 4918
 $46 = FUNCTION_TABLE_i[$45 & 7]() | 0; //@line 4919
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 599; //@line 4922
  HEAP32[$AsyncCtx6 + 4 >> 2] = $1; //@line 4924
  HEAP32[$AsyncCtx6 + 8 >> 2] = $$0; //@line 4926
  HEAP32[$AsyncCtx6 + 12 >> 2] = $$037; //@line 4928
  HEAP32[$AsyncCtx6 + 16 >> 2] = $32; //@line 4930
  $52 = $AsyncCtx6 + 24 | 0; //@line 4932
  HEAP32[$52 >> 2] = $39; //@line 4934
  HEAP32[$52 + 4 >> 2] = $40; //@line 4937
  HEAP32[$AsyncCtx6 + 32 >> 2] = $0; //@line 4939
  HEAP32[$AsyncCtx6 + 36 >> 2] = $0; //@line 4941
  sp = STACKTOP; //@line 4942
  return;
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 4945
 $58 = HEAP32[$1 >> 2] | 0; //@line 4946
 $59 = $58 + 32 | 0; //@line 4947
 HEAP32[$59 >> 2] = $46; //@line 4948
 $60 = $58 + 40 | 0; //@line 4949
 $61 = $60; //@line 4950
 HEAP32[$61 >> 2] = 0; //@line 4952
 HEAP32[$61 + 4 >> 2] = 0; //@line 4955
 $65 = $58 + 8 | 0; //@line 4956
 HEAP32[$65 >> 2] = $$0; //@line 4957
 $66 = _bitshift64Shl(1, 0, $$037 | 0) | 0; //@line 4958
 $68 = _i64Add($66 | 0, tempRet0 | 0, -1, 0) | 0; //@line 4960
 $70 = $58 + 12 | 0; //@line 4962
 HEAP32[$70 >> 2] = $68; //@line 4963
 HEAP32[$58 + 16 >> 2] = $32; //@line 4965
 $73 = $58 + 24 | 0; //@line 4967
 HEAP32[$73 >> 2] = $39; //@line 4969
 HEAP32[$73 + 4 >> 2] = $40; //@line 4972
 $77 = $58 + 48 | 0; //@line 4973
 $78 = $77; //@line 4974
 HEAP32[$78 >> 2] = 0; //@line 4976
 HEAP32[$78 + 4 >> 2] = 0; //@line 4979
 HEAP8[$58 + 56 >> 0] = 1; //@line 4981
 $85 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 4984
 $AsyncCtx9 = _emscripten_alloc_async_context(32, sp) | 0; //@line 4985
 $86 = FUNCTION_TABLE_i[$85 & 7]() | 0; //@line 4986
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 600; //@line 4989
  HEAP32[$AsyncCtx9 + 4 >> 2] = $1; //@line 4991
  HEAP32[$AsyncCtx9 + 8 >> 2] = $0; //@line 4993
  HEAP32[$AsyncCtx9 + 12 >> 2] = $59; //@line 4995
  HEAP32[$AsyncCtx9 + 16 >> 2] = $70; //@line 4997
  HEAP32[$AsyncCtx9 + 20 >> 2] = $65; //@line 4999
  HEAP32[$AsyncCtx9 + 24 >> 2] = $60; //@line 5001
  HEAP32[$AsyncCtx9 + 28 >> 2] = $77; //@line 5003
  sp = STACKTOP; //@line 5004
  return;
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 5007
 if (($86 | 0) != (HEAP32[(HEAP32[$1 >> 2] | 0) + 32 >> 2] | 0)) {
  $101 = $86 - (HEAP32[$59 >> 2] | 0) & HEAP32[$70 >> 2]; //@line 5016
  HEAP32[$59 >> 2] = $86; //@line 5017
  $102 = HEAP32[$65 >> 2] | 0; //@line 5018
  L30 : do {
   if (($102 | 0) < 1e6) {
    switch ($102 | 0) {
    case 32768:
     {
      break;
     }
    default:
     {
      label = 22; //@line 5027
      break L30;
     }
    }
    $103 = ___muldi3($101 | 0, 0, 1e6, 0) | 0; //@line 5031
    $105 = _bitshift64Lshr($103 | 0, tempRet0 | 0, 15) | 0; //@line 5033
    $106 = tempRet0; //@line 5034
    $109 = $60; //@line 5037
    $115 = _i64Add(HEAP32[$109 >> 2] | 0, HEAP32[$109 + 4 >> 2] | 0, $101 * 1e6 & 32704 | 0, 0) | 0; //@line 5043
    $116 = tempRet0; //@line 5044
    $117 = $60; //@line 5045
    HEAP32[$117 >> 2] = $115; //@line 5047
    HEAP32[$117 + 4 >> 2] = $116; //@line 5050
    if ($116 >>> 0 < 0 | ($116 | 0) == 0 & $115 >>> 0 < 32768) {
     $173 = $105; //@line 5057
     $174 = $106; //@line 5057
    } else {
     $126 = _i64Add($105 | 0, $106 | 0, 1, 0) | 0; //@line 5059
     $127 = tempRet0; //@line 5060
     $128 = _i64Add($115 | 0, $116 | 0, -32768, -1) | 0; //@line 5061
     $130 = $60; //@line 5063
     HEAP32[$130 >> 2] = $128; //@line 5065
     HEAP32[$130 + 4 >> 2] = tempRet0; //@line 5068
     $173 = $126; //@line 5069
     $174 = $127; //@line 5069
    }
   } else {
    switch ($102 | 0) {
    case 1e6:
     {
      $173 = $101; //@line 5074
      $174 = 0; //@line 5074
      break;
     }
    default:
     {
      label = 22; //@line 5078
     }
    }
   }
  } while (0);
  if ((label | 0) == 22) {
   $134 = ___muldi3($101 | 0, 0, 1e6, 0) | 0; //@line 5084
   $135 = tempRet0; //@line 5085
   $136 = ___udivdi3($134 | 0, $135 | 0, $102 | 0, 0) | 0; //@line 5086
   $137 = tempRet0; //@line 5087
   $138 = ___muldi3($136 | 0, $137 | 0, $102 | 0, 0) | 0; //@line 5088
   $140 = _i64Subtract($134 | 0, $135 | 0, $138 | 0, tempRet0 | 0) | 0; //@line 5090
   $142 = $60; //@line 5092
   $148 = _i64Add($140 | 0, tempRet0 | 0, HEAP32[$142 >> 2] | 0, HEAP32[$142 + 4 >> 2] | 0) | 0; //@line 5098
   $149 = tempRet0; //@line 5099
   $150 = $60; //@line 5100
   HEAP32[$150 >> 2] = $148; //@line 5102
   HEAP32[$150 + 4 >> 2] = $149; //@line 5105
   if ($149 >>> 0 < 0 | ($149 | 0) == 0 & $148 >>> 0 < $102 >>> 0) {
    $173 = $136; //@line 5112
    $174 = $137; //@line 5112
   } else {
    $159 = _i64Add($136 | 0, $137 | 0, 1, 0) | 0; //@line 5114
    $160 = tempRet0; //@line 5115
    $161 = _i64Subtract($148 | 0, $149 | 0, $102 | 0, 0) | 0; //@line 5116
    $163 = $60; //@line 5118
    HEAP32[$163 >> 2] = $161; //@line 5120
    HEAP32[$163 + 4 >> 2] = tempRet0; //@line 5123
    $173 = $159; //@line 5124
    $174 = $160; //@line 5124
   }
  }
  $167 = $77; //@line 5127
  $175 = _i64Add(HEAP32[$167 >> 2] | 0, HEAP32[$167 + 4 >> 2] | 0, $173 | 0, $174 | 0) | 0; //@line 5133
  $177 = $77; //@line 5135
  HEAP32[$177 >> 2] = $175; //@line 5137
  HEAP32[$177 + 4 >> 2] = tempRet0; //@line 5140
 }
 $AsyncCtx12 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5142
 _schedule_interrupt($0); //@line 5143
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 601; //@line 5146
  sp = STACKTOP; //@line 5147
  return;
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 5150
 return;
}
function __ZN7LoRaPHY16link_ADR_requestEP16adr_req_params_tPaS2_PhS3_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$$026$$026$i = 0, $$026$i = 0, $$028$i = 0, $$028$i4751 = 0, $$028$lcssa = 0, $$02862 = 0, $$029$be = 0, $$029$lcssa = 0, $$02961 = 0, $$1 = 0, $$127$i53 = 0, $$130$$$$i = 0, $$2$i = 0, $$2$i54 = 0, $$256 = 0, $$3 = 0, $$3$i52 = 0, $$lcssa76 = 0, $$lcssa77 = 0, $$pre = 0, $$sroa$034$0$lcssa = 0, $$sroa$034$058 = 0, $$sroa$1038$0$lcssa = 0, $$sroa$1038$060 = 0, $$sroa$636$0$lcssa = 0, $$sroa$636$059 = 0, $10 = 0, $107 = 0, $11 = 0, $112 = 0, $115 = 0, $117 = 0, $119 = 0, $12 = 0, $121 = 0, $123 = 0, $127 = 0, $128 = 0, $13 = 0, $132 = 0, $17 = 0, $18 = 0, $19 = 0, $27 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $42 = 0, $45 = 0, $52 = 0, $69 = 0, $7 = 0, $71 = 0, $83 = 0, $88 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $98 = 0, $indvars$iv = 0, $indvars$iv$i = 0, $indvars$iv$i31 = 0, $indvars$iv80 = 0, $wide$trip$count$i = 0, label = 0;
 $7 = HEAP8[$1 + 4 >> 0] | 0; //@line 21231
 L1 : do {
  if (!($7 << 24 >> 24)) {
   $$028$lcssa = 0; //@line 21235
   $$029$lcssa = 7; //@line 21235
   $$sroa$034$0$lcssa = 0; //@line 21235
   $$sroa$1038$0$lcssa = 0; //@line 21235
   $$sroa$636$0$lcssa = 0; //@line 21235
   $92 = 0; //@line 21235
  } else {
   $9 = HEAP32[$1 >> 2] | 0; //@line 21237
   $10 = $0 + 20 | 0; //@line 21238
   $11 = $0 + 112 | 0; //@line 21239
   $$02862 = 0; //@line 21240
   $$02961 = 7; //@line 21240
   $$lcssa76 = 0; //@line 21240
   $$sroa$034$058 = 0; //@line 21240
   $$sroa$1038$060 = 0; //@line 21240
   $$sroa$636$059 = 0; //@line 21240
   $13 = 0; //@line 21240
   while (1) {
    $12 = $9 + $13 | 0; //@line 21242
    if ((HEAP8[$12 >> 0] | 0) != 3) {
     $$028$lcssa = $$02862; //@line 21246
     $$029$lcssa = $$02961; //@line 21246
     $$sroa$034$0$lcssa = $$sroa$034$058; //@line 21246
     $$sroa$1038$0$lcssa = $$sroa$1038$060; //@line 21246
     $$sroa$636$0$lcssa = $$sroa$636$059; //@line 21246
     $92 = $$lcssa76; //@line 21246
     break L1;
    }
    $17 = HEAP8[$12 + 1 >> 0] | 0; //@line 21250
    $18 = $17 & 15; //@line 21251
    $19 = ($17 & 255) >>> 4; //@line 21252
    $27 = HEAPU8[$12 + 3 >> 0] << 8 | HEAPU8[$12 + 2 >> 0]; //@line 21260
    $28 = $27 & 65535; //@line 21261
    $30 = HEAP8[$12 + 4 >> 0] | 0; //@line 21263
    $32 = ($30 & 255) >>> 4; //@line 21265
    $34 = $32 & 7; //@line 21267
    $35 = $30 & 15; //@line 21268
    $36 = $13 + 5 | 0; //@line 21269
    $37 = $36 & 255; //@line 21270
    $$1 = $28 << 16 >> 16 == 0 & $34 << 24 >> 24 == 0 ? 6 : 7; //@line 21274
    L6 : do {
     switch ($32 & 7) {
     case 6:
     case 0:
      {
       $42 = HEAP8[$10 >> 0] | 0; //@line 21280
       if (!($42 << 24 >> 24)) {
        $$029$be = $$1; //@line 21283
        $$lcssa77 = $28; //@line 21283
       } else {
        $45 = $42 & 255; //@line 21286
        if ($34 << 24 >> 24 != 6) {
         $$256 = $$1; //@line 21288
         $indvars$iv = 0; //@line 21288
         while (1) {
          if (!($27 & 1 << ($indvars$iv & 15))) {
           $$3 = $$256; //@line 21295
          } else {
           $$3 = (HEAP32[(HEAP32[$11 >> 2] | 0) + ($indvars$iv * 12 | 0) >> 2] | 0) == 0 ? $$256 & -2 : $$256; //@line 21303
          }
          $indvars$iv = $indvars$iv + 1 | 0; //@line 21305
          if ($indvars$iv >>> 0 >= $45 >>> 0) {
           $$029$be = $$3; //@line 21310
           $$lcssa77 = $28; //@line 21310
           break L6;
          } else {
           $$256 = $$3; //@line 21308
          }
         }
        }
        $$pre = HEAP32[$11 >> 2] | 0; //@line 21315
        $52 = $28; //@line 21316
        $indvars$iv80 = 0; //@line 21316
        while (1) {
         if (!(HEAP32[$$pre + ($indvars$iv80 * 12 | 0) >> 2] | 0)) {
          $132 = $52; //@line 21322
         } else {
          $132 = (1 << ($indvars$iv80 & 15) | $52 & 65535) & 65535; //@line 21329
         }
         $indvars$iv80 = $indvars$iv80 + 1 | 0; //@line 21331
         if ($indvars$iv80 >>> 0 >= $45 >>> 0) {
          $$029$be = $$1; //@line 21336
          $$lcssa77 = $132; //@line 21336
          break;
         } else {
          $52 = $132; //@line 21334
         }
        }
       }
       break;
      }
     default:
      {
       $$029$be = 6; //@line 21344
       $$lcssa77 = $28; //@line 21344
      }
     }
    } while (0);
    if (($7 & 255) > ($37 & 255)) {
     $$02862 = $37; //@line 21351
     $$02961 = $$029$be; //@line 21351
     $$lcssa76 = $$lcssa77; //@line 21351
     $$sroa$034$058 = $35; //@line 21351
     $$sroa$1038$060 = $18; //@line 21351
     $$sroa$636$059 = $19; //@line 21351
     $13 = $36 & 255; //@line 21351
    } else {
     $$028$lcssa = $37; //@line 21353
     $$029$lcssa = $$029$be; //@line 21353
     $$sroa$034$0$lcssa = $35; //@line 21353
     $$sroa$1038$0$lcssa = $18; //@line 21353
     $$sroa$636$0$lcssa = $19; //@line 21353
     $92 = $$lcssa77; //@line 21353
     break L1;
    }
   }
  }
 } while (0);
 $69 = HEAP8[$1 + 7 >> 0] | 0; //@line 21362
 $71 = HEAP8[$1 + 8 >> 0] | 0; //@line 21364
 if (!(HEAP8[$1 + 6 >> 0] | 0)) {
  if ($$sroa$636$0$lcssa << 24 >> 24 == 15 & $$sroa$1038$0$lcssa << 24 >> 24 == 15) {
   $$026$i = $71; //@line 21373
   $$028$i = $69; //@line 21373
  } else {
   $$028$i4751 = $69; //@line 21375
   $$127$i53 = $71; //@line 21375
   $$2$i54 = HEAP8[$1 + 9 >> 0] | 0; //@line 21375
   $$3$i52 = 0; //@line 21375
   HEAP8[$2 >> 0] = $$028$i4751; //@line 21376
   HEAP8[$3 >> 0] = $$127$i53; //@line 21377
   HEAP8[$4 >> 0] = $$2$i54; //@line 21378
   HEAP8[$5 >> 0] = $$028$lcssa; //@line 21379
   return $$3$i52 | 0; //@line 21380
  }
 } else {
  $$026$i = $$sroa$1038$0$lcssa; //@line 21383
  $$028$i = $$sroa$636$0$lcssa; //@line 21383
 }
 if (!($$029$lcssa << 24 >> 24)) {
  $$028$i4751 = $$028$i; //@line 21387
  $$127$i53 = $$026$i; //@line 21387
  $$2$i54 = $$sroa$034$0$lcssa; //@line 21387
  $$3$i52 = 0; //@line 21387
  HEAP8[$2 >> 0] = $$028$i4751; //@line 21388
  HEAP8[$3 >> 0] = $$127$i53; //@line 21389
  HEAP8[$4 >> 0] = $$2$i54; //@line 21390
  HEAP8[$5 >> 0] = $$028$lcssa; //@line 21391
  return $$3$i52 | 0; //@line 21392
 }
 $83 = HEAP32[$0 + 112 >> 2] | 0; //@line 21399
 L30 : do {
  if ($$028$i << 24 >> 24 < (HEAP8[$0 + 26 >> 0] | 0) ? 1 : $$028$i << 24 >> 24 > (HEAP8[$0 + 27 >> 0] | 0)) {
   label = 24; //@line 21405
  } else {
   $88 = HEAP8[$0 + 20 >> 0] | 0; //@line 21408
   if (!($88 << 24 >> 24)) {
    label = 24; //@line 21411
   } else {
    $90 = $88 & 255; //@line 21413
    $91 = $92 & 65535; //@line 21414
    $indvars$iv$i31 = 0; //@line 21415
    while (1) {
     if (1 << ($indvars$iv$i31 & 15) & $91 | 0) {
      $98 = HEAP8[$83 + ($indvars$iv$i31 * 12 | 0) + 8 >> 0] | 0; //@line 21423
      if (!(($98 & 15) > $$028$i << 24 >> 24 ? 1 : ($98 & 255) >>> 4 << 24 >> 24 < $$028$i << 24 >> 24)) {
       $117 = $$029$lcssa; //@line 21430
       break L30;
      }
     }
     $indvars$iv$i31 = $indvars$iv$i31 + 1 | 0; //@line 21434
     if ($indvars$iv$i31 >>> 0 >= $90 >>> 0) {
      label = 24; //@line 21439
      break;
     }
    }
   }
  }
 } while (0);
 if ((label | 0) == 24) {
  $117 = $$029$lcssa & -3; //@line 21448
 }
 $107 = HEAP8[$0 + 22 >> 0] | 0; //@line 21451
 $112 = $$026$i << 24 >> 24 < $107 << 24 >> 24 ? 1 : $$026$i << 24 >> 24 > (HEAP8[$0 + 21 >> 0] | 0); //@line 21456
 $115 = ($107 & 255 | 0) > ($$026$i << 24 >> 24 | 0); //@line 21459
 $$130$$$$i = $112 ? $115 ? $117 : $117 & -5 : $117; //@line 21462
 $$$026$$026$i = $115 & $112 ? $107 : $$026$i; //@line 21464
 $119 = $$130$$$$i << 24 >> 24 == 7; //@line 21465
 $$2$i = $$sroa$034$0$lcssa << 24 >> 24 == 0 & $119 ? 1 : $$sroa$034$0$lcssa; //@line 21468
 if (!$119) {
  $$028$i4751 = $$028$i; //@line 21470
  $$127$i53 = $$$026$$026$i; //@line 21470
  $$2$i54 = $$2$i; //@line 21470
  $$3$i52 = $$130$$$$i; //@line 21470
  HEAP8[$2 >> 0] = $$028$i4751; //@line 21471
  HEAP8[$3 >> 0] = $$127$i53; //@line 21472
  HEAP8[$4 >> 0] = $$2$i54; //@line 21473
  HEAP8[$5 >> 0] = $$028$lcssa; //@line 21474
  return $$3$i52 | 0; //@line 21475
 }
 $121 = $0 + 120 | 0; //@line 21477
 $123 = $0 + 128 | 0; //@line 21479
 _memset(HEAP32[$121 >> 2] | 0, 0, HEAPU8[$123 >> 0] << 1 | 0) | 0; //@line 21483
 $127 = HEAP32[$121 >> 2] | 0; //@line 21484
 $128 = HEAP8[$123 >> 0] | 0; //@line 21485
 if (!(($127 | 0) != 0 & $128 << 24 >> 24 != 0)) {
  $$028$i4751 = $$028$i; //@line 21490
  $$127$i53 = $$$026$$026$i; //@line 21490
  $$2$i54 = $$2$i; //@line 21490
  $$3$i52 = 7; //@line 21490
  HEAP8[$2 >> 0] = $$028$i4751; //@line 21491
  HEAP8[$3 >> 0] = $$127$i53; //@line 21492
  HEAP8[$4 >> 0] = $$2$i54; //@line 21493
  HEAP8[$5 >> 0] = $$028$lcssa; //@line 21494
  return $$3$i52 | 0; //@line 21495
 }
 $wide$trip$count$i = $128 & 255; //@line 21497
 $indvars$iv$i = 0; //@line 21498
 do {
  HEAP16[$127 + ($indvars$iv$i << 1) >> 1] = $92; //@line 21501
  $indvars$iv$i = $indvars$iv$i + 1 | 0; //@line 21502
 } while (($indvars$iv$i | 0) != ($wide$trip$count$i | 0));
 $$028$i4751 = $$028$i; //@line 21505
 $$127$i53 = $$$026$$026$i; //@line 21505
 $$2$i54 = $$2$i; //@line 21505
 $$3$i52 = 7; //@line 21505
 HEAP8[$2 >> 0] = $$028$i4751; //@line 21511
 HEAP8[$3 >> 0] = $$127$i53; //@line 21512
 HEAP8[$4 >> 0] = $$2$i54; //@line 21513
 HEAP8[$5 >> 0] = $$028$lcssa; //@line 21514
 return $$3$i52 | 0; //@line 21515
}
function _schedule_interrupt($0) {
 $0 = $0 | 0;
 var $$0$i = 0, $1 = 0, $10 = 0, $104 = 0, $107 = 0, $109 = 0, $11 = 0, $112 = 0, $113 = 0, $115 = 0, $118 = 0, $126 = 0, $127 = 0, $128 = 0, $130 = 0, $132 = 0, $137 = 0, $14 = 0, $144 = 0, $146 = 0, $148 = 0, $151 = 0, $153 = 0, $160 = 0, $161 = 0, $164 = 0, $166 = 0, $168 = 0, $174 = 0, $175 = 0, $179 = 0, $187 = 0, $19 = 0, $195 = 0, $198 = 0, $2 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $28 = 0, $29 = 0, $35 = 0, $36 = 0, $37 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $50 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $63 = 0, $69 = 0, $70 = 0, $71 = 0, $80 = 0, $81 = 0, $82 = 0, $84 = 0, $88 = 0, $89 = 0, $95 = 0, $96 = 0, $97 = 0, $99 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx18 = 0, $AsyncCtx22 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5167
 $1 = $0 + 4 | 0; //@line 5168
 $2 = HEAP32[$1 >> 2] | 0; //@line 5169
 $5 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 5172
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 5173
 $6 = FUNCTION_TABLE_i[$5 & 7]() | 0; //@line 5174
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 602; //@line 5177
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 5179
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 5181
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 5183
  sp = STACKTOP; //@line 5184
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 5187
 $10 = HEAP32[$1 >> 2] | 0; //@line 5188
 $11 = $10 + 32 | 0; //@line 5189
 if (($6 | 0) != (HEAP32[$11 >> 2] | 0)) {
  $14 = $2 + 32 | 0; //@line 5193
  $19 = $6 - (HEAP32[$14 >> 2] | 0) & HEAP32[$2 + 12 >> 2]; //@line 5198
  HEAP32[$14 >> 2] = $6; //@line 5199
  $21 = HEAP32[$2 + 8 >> 2] | 0; //@line 5201
  L6 : do {
   if (($21 | 0) < 1e6) {
    switch ($21 | 0) {
    case 32768:
     {
      break;
     }
    default:
     {
      label = 7; //@line 5210
      break L6;
     }
    }
    $22 = ___muldi3($19 | 0, 0, 1e6, 0) | 0; //@line 5214
    $24 = _bitshift64Lshr($22 | 0, tempRet0 | 0, 15) | 0; //@line 5216
    $25 = tempRet0; //@line 5217
    $28 = $2 + 40 | 0; //@line 5220
    $29 = $28; //@line 5221
    $35 = _i64Add(HEAP32[$29 >> 2] | 0, HEAP32[$29 + 4 >> 2] | 0, $19 * 1e6 & 32704 | 0, 0) | 0; //@line 5227
    $36 = tempRet0; //@line 5228
    $37 = $28; //@line 5229
    HEAP32[$37 >> 2] = $35; //@line 5231
    HEAP32[$37 + 4 >> 2] = $36; //@line 5234
    if ($36 >>> 0 < 0 | ($36 | 0) == 0 & $35 >>> 0 < 32768) {
     $95 = $24; //@line 5241
     $96 = $25; //@line 5241
    } else {
     $46 = _i64Add($24 | 0, $25 | 0, 1, 0) | 0; //@line 5243
     $47 = tempRet0; //@line 5244
     $48 = _i64Add($35 | 0, $36 | 0, -32768, -1) | 0; //@line 5245
     $50 = $28; //@line 5247
     HEAP32[$50 >> 2] = $48; //@line 5249
     HEAP32[$50 + 4 >> 2] = tempRet0; //@line 5252
     $95 = $46; //@line 5253
     $96 = $47; //@line 5253
    }
   } else {
    switch ($21 | 0) {
    case 1e6:
     {
      $95 = $19; //@line 5258
      $96 = 0; //@line 5258
      break;
     }
    default:
     {
      label = 7; //@line 5262
     }
    }
   }
  } while (0);
  if ((label | 0) == 7) {
   $54 = ___muldi3($19 | 0, 0, 1e6, 0) | 0; //@line 5268
   $55 = tempRet0; //@line 5269
   $56 = ___udivdi3($54 | 0, $55 | 0, $21 | 0, 0) | 0; //@line 5270
   $57 = tempRet0; //@line 5271
   $58 = ___muldi3($56 | 0, $57 | 0, $21 | 0, 0) | 0; //@line 5272
   $60 = _i64Subtract($54 | 0, $55 | 0, $58 | 0, tempRet0 | 0) | 0; //@line 5274
   $62 = $2 + 40 | 0; //@line 5276
   $63 = $62; //@line 5277
   $69 = _i64Add($60 | 0, tempRet0 | 0, HEAP32[$63 >> 2] | 0, HEAP32[$63 + 4 >> 2] | 0) | 0; //@line 5283
   $70 = tempRet0; //@line 5284
   $71 = $62; //@line 5285
   HEAP32[$71 >> 2] = $69; //@line 5287
   HEAP32[$71 + 4 >> 2] = $70; //@line 5290
   if ($70 >>> 0 < 0 | ($70 | 0) == 0 & $69 >>> 0 < $21 >>> 0) {
    $95 = $56; //@line 5297
    $96 = $57; //@line 5297
   } else {
    $80 = _i64Add($56 | 0, $57 | 0, 1, 0) | 0; //@line 5299
    $81 = tempRet0; //@line 5300
    $82 = _i64Subtract($69 | 0, $70 | 0, $21 | 0, 0) | 0; //@line 5301
    $84 = $62; //@line 5303
    HEAP32[$84 >> 2] = $82; //@line 5305
    HEAP32[$84 + 4 >> 2] = tempRet0; //@line 5308
    $95 = $80; //@line 5309
    $96 = $81; //@line 5309
   }
  }
  $88 = $2 + 48 | 0; //@line 5312
  $89 = $88; //@line 5313
  $97 = _i64Add(HEAP32[$89 >> 2] | 0, HEAP32[$89 + 4 >> 2] | 0, $95 | 0, $96 | 0) | 0; //@line 5319
  $99 = $88; //@line 5321
  HEAP32[$99 >> 2] = $97; //@line 5323
  HEAP32[$99 + 4 >> 2] = tempRet0; //@line 5326
 }
 $104 = HEAP32[$10 + 4 >> 2] | 0; //@line 5329
 if (!$104) {
  $195 = (HEAP32[$2 + 16 >> 2] | 0) + (HEAP32[$2 + 32 >> 2] | 0) & HEAP32[$2 + 12 >> 2]; //@line 5339
  $198 = HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0; //@line 5342
  $AsyncCtx22 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5343
  FUNCTION_TABLE_vi[$198 & 1023]($195); //@line 5344
  if (___async) {
   HEAP32[$AsyncCtx22 >> 2] = 608; //@line 5347
   sp = STACKTOP; //@line 5348
   return;
  } else {
   _emscripten_free_async_context($AsyncCtx22 | 0); //@line 5351
   return;
  }
 }
 $107 = $10 + 48 | 0; //@line 5356
 $109 = HEAP32[$107 >> 2] | 0; //@line 5358
 $112 = HEAP32[$107 + 4 >> 2] | 0; //@line 5361
 $113 = $104; //@line 5362
 $115 = HEAP32[$113 >> 2] | 0; //@line 5364
 $118 = HEAP32[$113 + 4 >> 2] | 0; //@line 5367
 if (!($118 >>> 0 > $112 >>> 0 | ($118 | 0) == ($112 | 0) & $115 >>> 0 > $109 >>> 0)) {
  $126 = HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] | 0; //@line 5376
  $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5377
  FUNCTION_TABLE_v[$126 & 15](); //@line 5378
  if (___async) {
   HEAP32[$AsyncCtx3 >> 2] = 603; //@line 5381
   sp = STACKTOP; //@line 5382
   return;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5385
  return;
 }
 $127 = _i64Subtract($115 | 0, $118 | 0, $109 | 0, $112 | 0) | 0; //@line 5388
 $128 = tempRet0; //@line 5389
 $130 = HEAP32[$10 + 16 >> 2] | 0; //@line 5391
 $132 = $10 + 24 | 0; //@line 5393
 $137 = HEAP32[$132 + 4 >> 2] | 0; //@line 5398
 L29 : do {
  if ($128 >>> 0 > $137 >>> 0 | (($128 | 0) == ($137 | 0) ? $127 >>> 0 > (HEAP32[$132 >> 2] | 0) >>> 0 : 0)) {
   $$0$i = $130; //@line 5406
  } else {
   $144 = HEAP32[$10 + 8 >> 2] | 0; //@line 5409
   L31 : do {
    if (($144 | 0) < 1e6) {
     switch ($144 | 0) {
     case 32768:
      {
       break;
      }
     default:
      {
       break L31;
      }
     }
     $146 = _bitshift64Shl($127 | 0, $128 | 0, 15) | 0; //@line 5421
     $148 = ___udivdi3($146 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 5423
     $$0$i = $130 >>> 0 < $148 >>> 0 ? $130 : $148; //@line 5427
     break L29;
    } else {
     switch ($144 | 0) {
     case 1e6:
      {
       break;
      }
     default:
      {
       break L31;
      }
     }
     $$0$i = $130 >>> 0 < $127 >>> 0 ? $130 : $127; //@line 5440
     break L29;
    }
   } while (0);
   $151 = ___muldi3($127 | 0, $128 | 0, $144 | 0, 0) | 0; //@line 5444
   $153 = ___udivdi3($151 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 5446
   $$0$i = $130 >>> 0 < $153 >>> 0 ? $130 : $153; //@line 5450
  }
 } while (0);
 $160 = (HEAP32[$11 >> 2] | 0) + $$0$i & HEAP32[$10 + 12 >> 2]; //@line 5457
 $161 = $2 + 32 | 0; //@line 5458
 $164 = HEAP32[$0 >> 2] | 0; //@line 5461
 if (($160 | 0) == (HEAP32[$161 >> 2] | 0)) {
  $166 = HEAP32[$164 + 20 >> 2] | 0; //@line 5464
  $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5465
  FUNCTION_TABLE_v[$166 & 15](); //@line 5466
  if (___async) {
   HEAP32[$AsyncCtx7 >> 2] = 604; //@line 5469
   sp = STACKTOP; //@line 5470
   return;
  }
  _emscripten_free_async_context($AsyncCtx7 | 0); //@line 5473
  return;
 }
 $168 = HEAP32[$164 + 16 >> 2] | 0; //@line 5477
 $AsyncCtx11 = _emscripten_alloc_async_context(16, sp) | 0; //@line 5478
 FUNCTION_TABLE_vi[$168 & 1023]($160); //@line 5479
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 605; //@line 5482
  HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 5484
  HEAP32[$AsyncCtx11 + 8 >> 2] = $161; //@line 5486
  HEAP32[$AsyncCtx11 + 12 >> 2] = $160; //@line 5488
  sp = STACKTOP; //@line 5489
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 5492
 $174 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 5495
 $AsyncCtx14 = _emscripten_alloc_async_context(16, sp) | 0; //@line 5496
 $175 = FUNCTION_TABLE_i[$174 & 7]() | 0; //@line 5497
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 606; //@line 5500
  HEAP32[$AsyncCtx14 + 4 >> 2] = $161; //@line 5502
  HEAP32[$AsyncCtx14 + 8 >> 2] = $160; //@line 5504
  HEAP32[$AsyncCtx14 + 12 >> 2] = $0; //@line 5506
  sp = STACKTOP; //@line 5507
  return;
 }
 _emscripten_free_async_context($AsyncCtx14 | 0); //@line 5510
 $179 = HEAP32[$161 >> 2] | 0; //@line 5511
 if ($160 >>> 0 > $179 >>> 0) {
  if (!($175 >>> 0 >= $160 >>> 0 | $175 >>> 0 < $179 >>> 0)) {
   return;
  }
 } else {
  if (!($175 >>> 0 >= $160 >>> 0 & $175 >>> 0 < $179 >>> 0)) {
   return;
  }
 }
 $187 = HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] | 0; //@line 5530
 $AsyncCtx18 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5531
 FUNCTION_TABLE_v[$187 & 15](); //@line 5532
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 607; //@line 5535
  sp = STACKTOP; //@line 5536
  return;
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 5539
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $$pre$phiZ2D = 0, $$sroa$0$0$copyload = 0, $1 = 0, $10 = 0, $100 = 0, $106 = 0, $109 = 0, $120 = 0, $13 = 0, $22 = 0, $23 = 0, $45 = 0, $48 = 0, $5 = 0, $58 = 0, $60 = 0, $61 = 0, $7 = 0, $74 = 0, $76 = 0, $79 = 0, $88 = 0, $89 = 0, $92 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx16 = 0, $AsyncCtx20 = 0, $AsyncCtx24 = 0, $AsyncCtx28 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 8331
 STACKTOP = STACKTOP + 32 | 0; //@line 8332
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 8332
 $$byval_copy = sp + 8 | 0; //@line 8333
 $vararg_buffer = sp; //@line 8334
 $1 = sp + 16 | 0; //@line 8335
 _printf(12141, $vararg_buffer) | 0; //@line 8336
 _printf(12154, $$byval_copy) | 0; //@line 8337
 $AsyncCtx5 = _emscripten_alloc_async_context(16, sp) | 0; //@line 8338
 _putchar(10) | 0; //@line 8339
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 271; //@line 8342
  HEAP32[$AsyncCtx5 + 4 >> 2] = $0; //@line 8344
  HEAP32[$AsyncCtx5 + 8 >> 2] = $1; //@line 8346
  HEAP32[$AsyncCtx5 + 12 >> 2] = $vararg_buffer; //@line 8348
  sp = STACKTOP; //@line 8349
  STACKTOP = sp; //@line 8350
  return;
 }
 _emscripten_free_async_context($AsyncCtx5 | 0); //@line 8352
 $5 = $0 + 356 | 0; //@line 8353
 $7 = __ZN18LoRaWANTimeHandler16get_current_timeEv(HEAP32[$5 >> 2] | 0) | 0; //@line 8355
 $$sroa$0$0$copyload = HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) >> 2] | 0; //@line 8358
 $10 = $0 + 360 | 0; //@line 8359
 do {
  if ((HEAP32[$10 >> 2] | 0) == 2) {
   $22 = HEAP32[$0 + 1328 >> 2] | 0; //@line 8365
   HEAP32[$vararg_buffer >> 2] = 273; //@line 8366
   HEAP32[$vararg_buffer + 4 >> 2] = 0; //@line 8368
   $AsyncCtx24 = _emscripten_alloc_async_context(36, sp) | 0; //@line 8369
   HEAP32[$$byval_copy >> 2] = HEAP32[$vararg_buffer >> 2]; //@line 8370
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$vararg_buffer + 4 >> 2]; //@line 8370
   $23 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($22, $0, $$byval_copy) | 0; //@line 8371
   if (___async) {
    HEAP32[$AsyncCtx24 >> 2] = 274; //@line 8374
    HEAP32[$AsyncCtx24 + 4 >> 2] = $10; //@line 8376
    HEAP32[$AsyncCtx24 + 8 >> 2] = $5; //@line 8378
    HEAP32[$AsyncCtx24 + 12 >> 2] = $0; //@line 8380
    HEAP32[$AsyncCtx24 + 16 >> 2] = $$sroa$0$0$copyload; //@line 8382
    HEAP32[$AsyncCtx24 + 20 >> 2] = $1; //@line 8384
    HEAP32[$AsyncCtx24 + 24 >> 2] = $1; //@line 8386
    HEAP32[$AsyncCtx24 + 28 >> 2] = $7; //@line 8388
    HEAP32[$AsyncCtx24 + 32 >> 2] = $vararg_buffer; //@line 8390
    sp = STACKTOP; //@line 8391
    STACKTOP = sp; //@line 8392
    return;
   }
   _emscripten_free_async_context($AsyncCtx24 | 0); //@line 8394
   do {
    if (!$23) {
     $AsyncCtx28 = _emscripten_alloc_async_context(36, sp) | 0; //@line 8398
     _mbed_assert_internal(12025, 12034, 215); //@line 8399
     if (___async) {
      HEAP32[$AsyncCtx28 >> 2] = 275; //@line 8402
      HEAP32[$AsyncCtx28 + 4 >> 2] = $10; //@line 8404
      HEAP32[$AsyncCtx28 + 8 >> 2] = $5; //@line 8406
      HEAP32[$AsyncCtx28 + 12 >> 2] = $0; //@line 8408
      HEAP32[$AsyncCtx28 + 16 >> 2] = $$sroa$0$0$copyload; //@line 8410
      HEAP32[$AsyncCtx28 + 20 >> 2] = $1; //@line 8412
      HEAP32[$AsyncCtx28 + 24 >> 2] = $1; //@line 8414
      HEAP32[$AsyncCtx28 + 28 >> 2] = $7; //@line 8416
      HEAP32[$AsyncCtx28 + 32 >> 2] = $vararg_buffer; //@line 8418
      sp = STACKTOP; //@line 8419
      STACKTOP = sp; //@line 8420
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx28 | 0); //@line 8422
      break;
     }
    }
   } while (0);
   HEAP32[$0 + 364 >> 2] = 2; //@line 8428
  } else {
   $13 = HEAP32[$0 >> 2] | 0; //@line 8430
   $AsyncCtx20 = _emscripten_alloc_async_context(32, sp) | 0; //@line 8431
   __ZN7LoRaPHY18put_radio_to_sleepEv($13); //@line 8432
   if (___async) {
    HEAP32[$AsyncCtx20 >> 2] = 272; //@line 8435
    HEAP32[$AsyncCtx20 + 4 >> 2] = $10; //@line 8437
    HEAP32[$AsyncCtx20 + 8 >> 2] = $5; //@line 8439
    HEAP32[$AsyncCtx20 + 12 >> 2] = $0; //@line 8441
    HEAP32[$AsyncCtx20 + 16 >> 2] = $$sroa$0$0$copyload; //@line 8443
    HEAP32[$AsyncCtx20 + 20 >> 2] = $1; //@line 8445
    HEAP32[$AsyncCtx20 + 24 >> 2] = $1; //@line 8447
    HEAP32[$AsyncCtx20 + 28 >> 2] = $7; //@line 8449
    sp = STACKTOP; //@line 8450
    STACKTOP = sp; //@line 8451
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx20 | 0); //@line 8453
    break;
   }
  }
 } while (0);
 do {
  if (!(HEAP8[$0 + 371 >> 0] | 0)) {
   HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($0 + 288 | 0) | 0) + 4 >> 2] = 0; //@line 8466
   $88 = $0 + 944 | 0; //@line 8467
   $89 = HEAP8[$88 >> 0] | 0; //@line 8468
   if (!($89 << 24 >> 24)) {
    HEAP8[$88 >> 0] = 1; //@line 8471
    $92 = 1; //@line 8472
   } else {
    $92 = $89; //@line 8474
   }
   HEAP8[$88 >> 0] = $92 | 32; //@line 8477
  } else {
   $45 = HEAP32[$5 >> 2] | 0; //@line 8479
   $48 = HEAP32[$0 + 972 >> 2] | 0; //@line 8482
   $AsyncCtx16 = _emscripten_alloc_async_context(32, sp) | 0; //@line 8483
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($45, $0 + 1036 | 0, $48); //@line 8484
   if (___async) {
    HEAP32[$AsyncCtx16 >> 2] = 276; //@line 8487
    HEAP32[$AsyncCtx16 + 4 >> 2] = $10; //@line 8489
    HEAP32[$AsyncCtx16 + 8 >> 2] = $0; //@line 8491
    HEAP32[$AsyncCtx16 + 12 >> 2] = $5; //@line 8493
    HEAP32[$AsyncCtx16 + 16 >> 2] = $$sroa$0$0$copyload; //@line 8495
    HEAP32[$AsyncCtx16 + 20 >> 2] = $1; //@line 8497
    HEAP32[$AsyncCtx16 + 24 >> 2] = $1; //@line 8499
    HEAP32[$AsyncCtx16 + 28 >> 2] = $7; //@line 8501
    sp = STACKTOP; //@line 8502
    STACKTOP = sp; //@line 8503
    return;
   }
   _emscripten_free_async_context($AsyncCtx16 | 0); //@line 8505
   if ((HEAP32[$10 >> 2] | 0) == 2) {
    $$pre$phiZ2D = $0 + 976 | 0; //@line 8510
   } else {
    $58 = HEAP32[$5 >> 2] | 0; //@line 8512
    $60 = $0 + 976 | 0; //@line 8514
    $61 = HEAP32[$60 >> 2] | 0; //@line 8515
    $AsyncCtx12 = _emscripten_alloc_async_context(36, sp) | 0; //@line 8516
    __ZN18LoRaWANTimeHandler5startER13timer_event_tj($58, $0 + 1056 | 0, $61); //@line 8517
    if (___async) {
     HEAP32[$AsyncCtx12 >> 2] = 277; //@line 8520
     HEAP32[$AsyncCtx12 + 4 >> 2] = $10; //@line 8522
     HEAP32[$AsyncCtx12 + 8 >> 2] = $60; //@line 8524
     HEAP32[$AsyncCtx12 + 12 >> 2] = $5; //@line 8526
     HEAP32[$AsyncCtx12 + 16 >> 2] = $0; //@line 8528
     HEAP32[$AsyncCtx12 + 20 >> 2] = $$sroa$0$0$copyload; //@line 8530
     HEAP32[$AsyncCtx12 + 24 >> 2] = $1; //@line 8532
     HEAP32[$AsyncCtx12 + 28 >> 2] = $1; //@line 8534
     HEAP32[$AsyncCtx12 + 32 >> 2] = $7; //@line 8536
     sp = STACKTOP; //@line 8537
     STACKTOP = sp; //@line 8538
     return;
    }
    _emscripten_free_async_context($AsyncCtx12 | 0); //@line 8540
    if ((HEAP32[$10 >> 2] | 0) == 2) {
     $$pre$phiZ2D = $60; //@line 8544
    } else {
     if (!(HEAP8[$0 + 373 >> 0] | 0)) {
      break;
     } else {
      $$pre$phiZ2D = $60; //@line 8552
     }
    }
   }
   $74 = HEAP32[$5 >> 2] | 0; //@line 8556
   $76 = HEAP32[$$pre$phiZ2D >> 2] | 0; //@line 8558
   $79 = (__ZN7LoRaPHY15get_ack_timeoutEv(HEAP32[$0 >> 2] | 0) | 0) + $76 | 0; //@line 8561
   $AsyncCtx8 = _emscripten_alloc_async_context(24, sp) | 0; //@line 8562
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($74, $0 + 1076 | 0, $79); //@line 8563
   if (___async) {
    HEAP32[$AsyncCtx8 >> 2] = 278; //@line 8566
    HEAP32[$AsyncCtx8 + 4 >> 2] = $0; //@line 8568
    HEAP32[$AsyncCtx8 + 8 >> 2] = $$sroa$0$0$copyload; //@line 8570
    HEAP32[$AsyncCtx8 + 12 >> 2] = $1; //@line 8572
    HEAP32[$AsyncCtx8 + 16 >> 2] = $1; //@line 8574
    HEAP32[$AsyncCtx8 + 20 >> 2] = $7; //@line 8576
    sp = STACKTOP; //@line 8577
    STACKTOP = sp; //@line 8578
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 8580
    break;
   }
  }
 } while (0);
 HEAP8[$0 + 376 >> 0] = ($$sroa$0$0$copyload | 0) == 0 & (HEAP8[$0 + 944 >> 0] & 8) != 0 & 1; //@line 8593
 $100 = HEAP8[$0 + 378 >> 0] | 0; //@line 8595
 HEAP8[$0 + 379 >> 0] = $100; //@line 8597
 HEAP8[$1 >> 0] = $100; //@line 8598
 HEAP8[$1 + 1 >> 0] = HEAP8[$0 + 372 >> 0] | 0; //@line 8602
 HEAP32[$1 + 4 >> 2] = $7; //@line 8604
 $106 = HEAP32[$0 >> 2] | 0; //@line 8605
 $109 = HEAP32[(HEAP32[$106 >> 2] | 0) + 12 >> 2] | 0; //@line 8608
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 8609
 FUNCTION_TABLE_vii[$109 & 31]($106, $1); //@line 8610
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 279; //@line 8613
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 8615
  HEAP32[$AsyncCtx + 8 >> 2] = $7; //@line 8617
  HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 8619
  sp = STACKTOP; //@line 8620
  STACKTOP = sp; //@line 8621
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 8623
 HEAP32[$0 + 980 >> 2] = $7; //@line 8625
 if (HEAP8[$0 + 373 >> 0] | 0) {
  STACKTOP = sp; //@line 8630
  return;
 }
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($0 + 288 | 0) | 0) + 4 >> 2] = 0; //@line 8635
 $120 = $0 + 380 | 0; //@line 8636
 HEAP8[$120 >> 0] = (HEAP8[$120 >> 0] | 0) + 1 << 24 >> 24; //@line 8639
 STACKTOP = sp; //@line 8640
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$038 = 0, $$040 = 0, $101 = 0, $104 = 0, $11 = 0, $112 = 0, $115 = 0, $118 = 0, $122 = 0, $125 = 0, $136 = 0, $139 = 0, $142 = 0, $146 = 0, $149 = 0, $18 = 0, $21 = 0, $22 = 0, $29 = 0, $30 = 0, $33 = 0, $4 = 0, $45 = 0, $47 = 0, $51 = 0, $56 = 0, $58 = 0, $59 = 0, $6 = 0, $61 = 0, $62 = 0, $65 = 0, $7 = 0, $76 = 0, $79 = 0, $8 = 0, $93 = 0, $96 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx16 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx24 = 0, $AsyncCtx27 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 20500
 $4 = HEAP8[$1 + 1 >> 0] | 0; //@line 20502
 $6 = HEAP32[$1 + 4 >> 2] | 0; //@line 20504
 $7 = $0 + 4 | 0; //@line 20505
 $8 = HEAP32[$7 >> 2] | 0; //@line 20506
 $11 = HEAP32[(HEAP32[$8 >> 2] | 0) + 72 >> 2] | 0; //@line 20509
 $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 20510
 FUNCTION_TABLE_vi[$11 & 1023]($8); //@line 20511
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 514; //@line 20514
  HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 20516
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 20518
  HEAP32[$AsyncCtx + 12 >> 2] = $6; //@line 20520
  HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 20522
  HEAP8[$AsyncCtx + 20 >> 0] = $4; //@line 20524
  HEAP32[$AsyncCtx + 24 >> 2] = $1; //@line 20526
  sp = STACKTOP; //@line 20527
  return 0; //@line 20528
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 20530
 $18 = HEAP32[$7 >> 2] | 0; //@line 20531
 $21 = HEAP32[(HEAP32[$18 >> 2] | 0) + 40 >> 2] | 0; //@line 20534
 $AsyncCtx2 = _emscripten_alloc_async_context(28, sp) | 0; //@line 20535
 $22 = FUNCTION_TABLE_ii[$21 & 15]($18) | 0; //@line 20536
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 515; //@line 20539
  HEAP32[$AsyncCtx2 + 4 >> 2] = $7; //@line 20541
  HEAP32[$AsyncCtx2 + 8 >> 2] = $2; //@line 20543
  HEAP32[$AsyncCtx2 + 12 >> 2] = $6; //@line 20545
  HEAP32[$AsyncCtx2 + 16 >> 2] = $0; //@line 20547
  HEAP8[$AsyncCtx2 + 20 >> 0] = $4; //@line 20549
  HEAP32[$AsyncCtx2 + 24 >> 2] = $1; //@line 20551
  sp = STACKTOP; //@line 20552
  return 0; //@line 20553
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 20555
 $29 = $22 << 24 >> 24 == 0; //@line 20556
 $30 = HEAP32[$7 >> 2] | 0; //@line 20557
 $33 = HEAP32[(HEAP32[$30 >> 2] | 0) + 76 >> 2] | 0; //@line 20560
 $AsyncCtx5 = _emscripten_alloc_async_context(32, sp) | 0; //@line 20561
 FUNCTION_TABLE_vi[$33 & 1023]($30); //@line 20562
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 516; //@line 20565
  HEAP32[$AsyncCtx5 + 4 >> 2] = $7; //@line 20567
  HEAP32[$AsyncCtx5 + 8 >> 2] = $2; //@line 20569
  HEAP32[$AsyncCtx5 + 12 >> 2] = $6; //@line 20571
  HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 20573
  HEAP8[$AsyncCtx5 + 20 >> 0] = $4; //@line 20575
  HEAP32[$AsyncCtx5 + 24 >> 2] = $1; //@line 20577
  HEAP8[$AsyncCtx5 + 28 >> 0] = $29 & 1; //@line 20580
  sp = STACKTOP; //@line 20581
  return 0; //@line 20582
 }
 _emscripten_free_async_context($AsyncCtx5 | 0); //@line 20584
 if (!$29) {
  $$0 = 0; //@line 20586
  return $$0 | 0; //@line 20587
 }
 if (!(HEAP32[$1 + 20 >> 2] | 0)) {
  $45 = HEAP32[$0 + 112 >> 2] | 0; //@line 20594
  $47 = HEAPU8[$1 >> 0] | 0; //@line 20596
  $51 = HEAP32[$45 + ($47 * 12 | 0) + 4 >> 2] | 0; //@line 20600
  $$040 = ($51 | 0) == 0 ? HEAP32[$45 + ($47 * 12 | 0) >> 2] | 0 : $51; //@line 20603
 } else {
  $$040 = $6; //@line 20605
 }
 $56 = HEAP32[$0 + 96 >> 2] | 0; //@line 20610
 $58 = HEAP32[$0 + 104 >> 2] | 0; //@line 20612
 $59 = $4 & 255; //@line 20613
 $61 = HEAP8[(HEAP32[$0 + 88 >> 2] | 0) + $59 >> 0] | 0; //@line 20615
 $62 = HEAP32[$7 >> 2] | 0; //@line 20616
 $65 = HEAP32[(HEAP32[$62 >> 2] | 0) + 72 >> 2] | 0; //@line 20619
 $AsyncCtx9 = _emscripten_alloc_async_context(44, sp) | 0; //@line 20620
 FUNCTION_TABLE_vi[$65 & 1023]($62); //@line 20621
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 517; //@line 20624
  HEAP32[$AsyncCtx9 + 4 >> 2] = $7; //@line 20626
  HEAP32[$AsyncCtx9 + 8 >> 2] = $$040; //@line 20628
  HEAP8[$AsyncCtx9 + 12 >> 0] = $4; //@line 20630
  HEAP32[$AsyncCtx9 + 16 >> 2] = $0; //@line 20632
  HEAP32[$AsyncCtx9 + 20 >> 2] = $1; //@line 20634
  HEAP8[$AsyncCtx9 + 24 >> 0] = $61; //@line 20636
  HEAP32[$AsyncCtx9 + 28 >> 2] = $56; //@line 20638
  HEAP32[$AsyncCtx9 + 32 >> 2] = $58; //@line 20640
  HEAP32[$AsyncCtx9 + 36 >> 2] = $59; //@line 20642
  HEAP32[$AsyncCtx9 + 40 >> 2] = $2; //@line 20644
  sp = STACKTOP; //@line 20645
  return 0; //@line 20646
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 20648
 $76 = HEAP32[$7 >> 2] | 0; //@line 20649
 $79 = HEAP32[(HEAP32[$76 >> 2] | 0) + 32 >> 2] | 0; //@line 20652
 $AsyncCtx12 = _emscripten_alloc_async_context(40, sp) | 0; //@line 20653
 FUNCTION_TABLE_vii[$79 & 31]($76, $$040); //@line 20654
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 518; //@line 20657
  HEAP8[$AsyncCtx12 + 4 >> 0] = $4; //@line 20659
  HEAP32[$AsyncCtx12 + 8 >> 2] = $0; //@line 20661
  HEAP32[$AsyncCtx12 + 12 >> 2] = $7; //@line 20663
  HEAP32[$AsyncCtx12 + 16 >> 2] = $1; //@line 20665
  HEAP8[$AsyncCtx12 + 20 >> 0] = $61; //@line 20667
  HEAP32[$AsyncCtx12 + 24 >> 2] = $56; //@line 20669
  HEAP32[$AsyncCtx12 + 28 >> 2] = $58; //@line 20671
  HEAP32[$AsyncCtx12 + 32 >> 2] = $59; //@line 20673
  HEAP32[$AsyncCtx12 + 36 >> 2] = $2; //@line 20675
  sp = STACKTOP; //@line 20676
  return 0; //@line 20677
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 20679
 do {
  if ($4 << 24 >> 24 == 7) {
   if (!(HEAP8[$0 + 14 >> 0] | 0)) {
    label = 19; //@line 20687
   } else {
    $93 = HEAP32[$7 >> 2] | 0; //@line 20689
    $96 = HEAP32[(HEAP32[$93 >> 2] | 0) + 16 >> 2] | 0; //@line 20692
    $101 = HEAP32[$1 + 8 >> 2] & 65535; //@line 20697
    $104 = (HEAP8[$1 + 18 >> 0] | 0) != 0; //@line 20700
    $AsyncCtx16 = _emscripten_alloc_async_context(32, sp) | 0; //@line 20701
    FUNCTION_TABLE_viiiiiiiiiiiiiii[$96 & 1]($93, 0, 5e4, ($61 & 255) * 1e3 | 0, 0, 83333, 5, $101, 0, 0, 1, 0, 0, 0, $104); //@line 20702
    if (___async) {
     HEAP32[$AsyncCtx16 >> 2] = 519; //@line 20705
     HEAP32[$AsyncCtx16 + 4 >> 2] = $1; //@line 20707
     HEAP32[$AsyncCtx16 + 8 >> 2] = $56; //@line 20709
     HEAP32[$AsyncCtx16 + 12 >> 2] = $58; //@line 20711
     HEAP32[$AsyncCtx16 + 16 >> 2] = $59; //@line 20713
     HEAP32[$AsyncCtx16 + 20 >> 2] = $7; //@line 20715
     HEAP8[$AsyncCtx16 + 24 >> 0] = $61; //@line 20717
     HEAP32[$AsyncCtx16 + 28 >> 2] = $2; //@line 20719
     sp = STACKTOP; //@line 20720
     return 0; //@line 20721
    } else {
     _emscripten_free_async_context($AsyncCtx16 | 0); //@line 20723
     $$038 = 0; //@line 20724
     break;
    }
   }
  } else {
   label = 19; //@line 20729
  }
 } while (0);
 do {
  if ((label | 0) == 19) {
   $112 = HEAP32[$7 >> 2] | 0; //@line 20734
   $115 = HEAP32[(HEAP32[$112 >> 2] | 0) + 16 >> 2] | 0; //@line 20737
   $118 = HEAPU8[$1 + 2 >> 0] | 0; //@line 20740
   $122 = HEAP32[$1 + 8 >> 2] & 65535; //@line 20744
   $125 = (HEAP8[$1 + 18 >> 0] | 0) != 0; //@line 20747
   $AsyncCtx20 = _emscripten_alloc_async_context(32, sp) | 0; //@line 20748
   FUNCTION_TABLE_viiiiiiiiiiiiiii[$115 & 1]($112, 1, $118, $61 & 255, 1, 0, 8, $122, 0, 0, 0, 0, 0, 1, $125); //@line 20749
   if (___async) {
    HEAP32[$AsyncCtx20 >> 2] = 520; //@line 20752
    HEAP32[$AsyncCtx20 + 4 >> 2] = $1; //@line 20754
    HEAP32[$AsyncCtx20 + 8 >> 2] = $56; //@line 20756
    HEAP32[$AsyncCtx20 + 12 >> 2] = $58; //@line 20758
    HEAP32[$AsyncCtx20 + 16 >> 2] = $59; //@line 20760
    HEAP32[$AsyncCtx20 + 20 >> 2] = $7; //@line 20762
    HEAP8[$AsyncCtx20 + 24 >> 0] = $61; //@line 20764
    HEAP32[$AsyncCtx20 + 28 >> 2] = $2; //@line 20766
    sp = STACKTOP; //@line 20767
    return 0; //@line 20768
   } else {
    _emscripten_free_async_context($AsyncCtx20 | 0); //@line 20770
    $$038 = 1; //@line 20771
    break;
   }
  }
 } while (0);
 $136 = HEAP32[$7 >> 2] | 0; //@line 20782
 $139 = HEAP32[(HEAP32[$136 >> 2] | 0) + 44 >> 2] | 0; //@line 20785
 $142 = (HEAPU8[((HEAP8[$1 + 17 >> 0] | 0) == 0 ? $56 : $58) + $59 >> 0] | 0) + 13 & 255; //@line 20788
 $AsyncCtx24 = _emscripten_alloc_async_context(16, sp) | 0; //@line 20789
 FUNCTION_TABLE_viii[$139 & 7]($136, $$038, $142); //@line 20790
 if (___async) {
  HEAP32[$AsyncCtx24 >> 2] = 521; //@line 20793
  HEAP32[$AsyncCtx24 + 4 >> 2] = $7; //@line 20795
  HEAP8[$AsyncCtx24 + 8 >> 0] = $61; //@line 20797
  HEAP32[$AsyncCtx24 + 12 >> 2] = $2; //@line 20799
  sp = STACKTOP; //@line 20800
  return 0; //@line 20801
 }
 _emscripten_free_async_context($AsyncCtx24 | 0); //@line 20803
 $146 = HEAP32[$7 >> 2] | 0; //@line 20804
 $149 = HEAP32[(HEAP32[$146 >> 2] | 0) + 76 >> 2] | 0; //@line 20807
 $AsyncCtx27 = _emscripten_alloc_async_context(12, sp) | 0; //@line 20808
 FUNCTION_TABLE_vi[$149 & 1023]($146); //@line 20809
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 522; //@line 20812
  HEAP8[$AsyncCtx27 + 4 >> 0] = $61; //@line 20814
  HEAP32[$AsyncCtx27 + 8 >> 2] = $2; //@line 20816
  sp = STACKTOP; //@line 20817
  return 0; //@line 20818
 }
 _emscripten_free_async_context($AsyncCtx27 | 0); //@line 20820
 HEAP8[$2 >> 0] = $61; //@line 20821
 $$0 = 1; //@line 20822
 return $$0 | 0; //@line 20823
}
function __ZN12LoRaWANStack9handle_txEhPKhth($0, $1, $2, $3, $trunc) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $trunc = $trunc | 0;
 var $$0 = 0, $$0$i38 = 0, $$1 = 0, $101 = 0, $13 = 0, $14 = 0, $23 = 0, $30 = 0, $4 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $83 = 0, $88 = 0, $93 = 0, $AsyncCtx = 0, $AsyncCtx20 = 0, $AsyncCtx24 = 0, $AsyncCtx27 = 0, $AsyncCtx31 = 0, $AsyncCtx34 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6565
 STACKTOP = STACKTOP + 80 | 0; //@line 6566
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80); //@line 6566
 $vararg_buffer14 = sp + 56 | 0; //@line 6567
 $vararg_buffer12 = sp + 48 | 0; //@line 6568
 $vararg_buffer9 = sp + 40 | 0; //@line 6569
 $vararg_buffer7 = sp + 32 | 0; //@line 6570
 $vararg_buffer5 = sp + 24 | 0; //@line 6571
 $vararg_buffer3 = sp + 16 | 0; //@line 6572
 $vararg_buffer1 = sp + 8 | 0; //@line 6573
 $vararg_buffer = sp; //@line 6574
 $4 = sp + 76 | 0; //@line 6575
 $5 = sp + 64 | 0; //@line 6576
 if (!(HEAP8[$0 + 1932 >> 0] | 0)) {
  $$1 = -1017; //@line 6581
  STACKTOP = sp; //@line 6582
  return $$1 | 0; //@line 6582
 }
 if (HEAP8[$0 + 1964 >> 0] | 0) {
  $$1 = -1001; //@line 6588
  STACKTOP = sp; //@line 6589
  return $$1 | 0; //@line 6589
 }
 $13 = $3 << 16 >> 16 == 0; //@line 6592
 if (!(($2 | 0) != 0 | $13)) {
  $$1 = -1003; //@line 6595
  STACKTOP = sp; //@line 6596
  return $$1 | 0; //@line 6596
 }
 HEAP32[$5 >> 2] = 1; //@line 6598
 $14 = $0 + 4 | 0; //@line 6599
 if (!(__ZN7LoRaMac23mib_get_request_confirmEP25loramac_mib_req_confirm_t($14, $5) | 0)) {
  if (!(HEAP8[$5 + 4 >> 0] | 0)) {
   $$0 = -1009; //@line 6607
  } else {
   label = 6; //@line 6609
  }
 } else {
  label = 6; //@line 6612
 }
 do {
  if ((label | 0) == 6) {
   if (($1 + -1 & 255) >= 223) {
    _printf(11245, $vararg_buffer) | 0; //@line 6619
    _printf(11594, $vararg_buffer1) | 0; //@line 6620
    $AsyncCtx27 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6621
    _putchar(10) | 0; //@line 6622
    if (___async) {
     HEAP32[$AsyncCtx27 >> 2] = 216; //@line 6625
     HEAP32[$AsyncCtx27 + 4 >> 2] = $5; //@line 6627
     sp = STACKTOP; //@line 6628
     STACKTOP = sp; //@line 6629
     return 0; //@line 6629
    } else {
     _emscripten_free_async_context($AsyncCtx27 | 0); //@line 6631
     $$0 = -1015; //@line 6632
     break;
    }
   }
   $23 = $0 + 2285 | 0; //@line 6636
   HEAP8[$23 >> 0] = $1; //@line 6637
   if ($trunc << 24 >> 24 == 0 | ($trunc & 15) == 3) {
    _printf(11245, $vararg_buffer3) | 0; //@line 6643
    _printf(11631, $vararg_buffer5) | 0; //@line 6644
    $AsyncCtx24 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6645
    _putchar(10) | 0; //@line 6646
    if (___async) {
     HEAP32[$AsyncCtx24 >> 2] = 217; //@line 6649
     HEAP32[$AsyncCtx24 + 4 >> 2] = $5; //@line 6651
     sp = STACKTOP; //@line 6652
     STACKTOP = sp; //@line 6653
     return 0; //@line 6653
    } else {
     _emscripten_free_async_context($AsyncCtx24 | 0); //@line 6655
     $$0 = -1003; //@line 6656
     break;
    }
   }
   HEAP8[$0 + 1965 >> 0] = $1; //@line 6661
   $AsyncCtx31 = _emscripten_alloc_async_context(68, sp) | 0; //@line 6663
   $30 = __ZN7LoRaMac17query_tx_possibleEhP17loramac_tx_info_t($14, $3 & 255, $4) | 0; //@line 6664
   if (___async) {
    HEAP32[$AsyncCtx31 >> 2] = 218; //@line 6667
    HEAP32[$AsyncCtx31 + 4 >> 2] = $0; //@line 6669
    HEAP32[$AsyncCtx31 + 8 >> 2] = $2; //@line 6671
    HEAP8[$AsyncCtx31 + 12 >> 0] = $trunc; //@line 6673
    HEAP32[$AsyncCtx31 + 16 >> 2] = $vararg_buffer12; //@line 6675
    HEAP32[$AsyncCtx31 + 20 >> 2] = $vararg_buffer12; //@line 6677
    HEAP32[$AsyncCtx31 + 24 >> 2] = $vararg_buffer14; //@line 6679
    HEAP32[$AsyncCtx31 + 28 >> 2] = $vararg_buffer14; //@line 6681
    HEAP32[$AsyncCtx31 + 32 >> 2] = $23; //@line 6683
    HEAP32[$AsyncCtx31 + 36 >> 2] = $5; //@line 6685
    HEAP32[$AsyncCtx31 + 40 >> 2] = $vararg_buffer7; //@line 6687
    HEAP32[$AsyncCtx31 + 44 >> 2] = $vararg_buffer7; //@line 6689
    HEAP32[$AsyncCtx31 + 48 >> 2] = $vararg_buffer9; //@line 6691
    HEAP32[$AsyncCtx31 + 52 >> 2] = $vararg_buffer9; //@line 6693
    HEAP16[$AsyncCtx31 + 56 >> 1] = $3; //@line 6695
    HEAP8[$AsyncCtx31 + 58 >> 0] = $13 & 1; //@line 6698
    HEAP32[$AsyncCtx31 + 60 >> 2] = $4; //@line 6700
    HEAP32[$AsyncCtx31 + 64 >> 2] = $4; //@line 6702
    sp = STACKTOP; //@line 6703
    STACKTOP = sp; //@line 6704
    return 0; //@line 6704
   }
   _emscripten_free_async_context($AsyncCtx31 | 0); //@line 6706
   $50 = ($30 | 0) == -1010 ? HEAP8[$4 >> 0] | 0 : HEAP8[$4 + 1 >> 0] | 0; //@line 6711
   $$0$i38 = $50 & 255; //@line 6712
   $51 = $50 & 255; //@line 6713
   $52 = $3 & 65535; //@line 6714
   do {
    if (($$0$i38 & 65535) < ($3 & 65535)) {
     _printf(11691, $vararg_buffer7) | 0; //@line 6718
     HEAP32[$vararg_buffer9 >> 2] = $52; //@line 6719
     HEAP32[$vararg_buffer9 + 4 >> 2] = $51; //@line 6721
     _printf(11704, $vararg_buffer9) | 0; //@line 6722
     $AsyncCtx20 = _emscripten_alloc_async_context(52, sp) | 0; //@line 6723
     _putchar(10) | 0; //@line 6724
     if (___async) {
      HEAP32[$AsyncCtx20 >> 2] = 219; //@line 6727
      HEAP32[$AsyncCtx20 + 4 >> 2] = $52; //@line 6729
      HEAP32[$AsyncCtx20 + 8 >> 2] = $51; //@line 6731
      HEAP32[$AsyncCtx20 + 12 >> 2] = $0; //@line 6733
      HEAP16[$AsyncCtx20 + 16 >> 1] = $$0$i38; //@line 6735
      HEAP32[$AsyncCtx20 + 20 >> 2] = $2; //@line 6737
      HEAP8[$AsyncCtx20 + 24 >> 0] = $trunc; //@line 6739
      HEAP32[$AsyncCtx20 + 28 >> 2] = $vararg_buffer12; //@line 6741
      HEAP32[$AsyncCtx20 + 32 >> 2] = $vararg_buffer12; //@line 6743
      HEAP32[$AsyncCtx20 + 36 >> 2] = $vararg_buffer14; //@line 6745
      HEAP32[$AsyncCtx20 + 40 >> 2] = $vararg_buffer14; //@line 6747
      HEAP32[$AsyncCtx20 + 44 >> 2] = $23; //@line 6749
      HEAP32[$AsyncCtx20 + 48 >> 2] = $5; //@line 6751
      sp = STACKTOP; //@line 6752
      STACKTOP = sp; //@line 6753
      return 0; //@line 6753
     } else {
      _emscripten_free_async_context($AsyncCtx20 | 0); //@line 6755
      HEAP16[$0 + 2232 >> 1] = $52 - $51; //@line 6759
      HEAP16[$0 + 2230 >> 1] = $$0$i38; //@line 6761
      _memcpy($0 + 1975 | 0, $2 | 0, $51 | 0) | 0; //@line 6763
      break;
     }
    } else {
     HEAP16[$0 + 2230 >> 1] = $3; //@line 6768
     HEAP16[$0 + 2232 >> 1] = 0; //@line 6770
     if (!$13) {
      _memcpy($0 + 1975 | 0, $2 | 0, $52 | 0) | 0; //@line 6773
     }
    }
   } while (0);
   switch ($trunc & 15) {
   case 9:
   case 5:
   case 1:
    {
     HEAP32[$0 + 1968 >> 2] = 0; //@line 6781
     HEAP8[$0 + 1972 >> 0] = HEAP8[$23 >> 0] | 0; //@line 6784
     switch ($trunc & 15) {
     case 6:
     case 2:
      {
       label = 24; //@line 6788
       break;
      }
     default:
      {}
     }
     break;
    }
   case 10:
   case 6:
   case 2:
    {
     label = 24; //@line 6797
     break;
    }
   default:
    {}
   }
   if ((label | 0) == 24) {
    HEAP32[$0 + 1968 >> 2] = 1; //@line 6805
    HEAP8[$0 + 1972 >> 0] = HEAP8[$23 >> 0] | 0; //@line 6808
    HEAP8[$0 + 1974 >> 0] = HEAP8[$0 + 2284 >> 0] | 0; //@line 6812
   }
   _printf(11691, $vararg_buffer12) | 0; //@line 6814
   $83 = $0 + 2230 | 0; //@line 6815
   $88 = HEAPU16[$0 + 2232 >> 1] | 0; //@line 6820
   HEAP32[$vararg_buffer14 >> 2] = HEAPU16[$83 >> 1]; //@line 6821
   HEAP32[$vararg_buffer14 + 4 >> 2] = $88; //@line 6823
   _printf(11759, $vararg_buffer14) | 0; //@line 6824
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 6825
   _putchar(10) | 0; //@line 6826
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 220; //@line 6829
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 6831
    HEAP32[$AsyncCtx + 8 >> 2] = $83; //@line 6833
    HEAP32[$AsyncCtx + 12 >> 2] = $5; //@line 6835
    sp = STACKTOP; //@line 6836
    STACKTOP = sp; //@line 6837
    return 0; //@line 6837
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 6839
   HEAP32[$0 + 1876 >> 2] = 5; //@line 6841
   $AsyncCtx34 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6842
   $93 = __ZN12LoRaWANStack18lora_state_machineEv($0) | 0; //@line 6843
   if (___async) {
    HEAP32[$AsyncCtx34 >> 2] = 221; //@line 6846
    HEAP32[$AsyncCtx34 + 4 >> 2] = $83; //@line 6848
    HEAP32[$AsyncCtx34 + 8 >> 2] = $5; //@line 6850
    sp = STACKTOP; //@line 6851
    STACKTOP = sp; //@line 6852
    return 0; //@line 6852
   }
   _emscripten_free_async_context($AsyncCtx34 | 0); //@line 6854
   if (!$93) {
    $101 = HEAPU16[$83 >> 1] | 0; //@line 6859
   } else {
    $101 = $93 << 16 >> 16; //@line 6863
   }
   $$0 = $101 & 65535; //@line 6866
  }
 } while (0);
 $$1 = $$0; //@line 6869
 STACKTOP = sp; //@line 6870
 return $$1 | 0; //@line 6870
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb($0) {
 $0 = $0 | 0;
 var $$pre$i = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $35 = 0, $37 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $57 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $67 = 0, $68 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 11514
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11518
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11520
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11522
 $10 = HEAP16[$0 + 20 >> 1] | 0; //@line 11524
 $12 = HEAP16[$0 + 22 >> 1] | 0; //@line 11526
 $14 = HEAP8[$0 + 24 >> 0] | 0; //@line 11528
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 11530
 $$pre$i = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 11531
 $17 = $4 + 12 | 0; //@line 11532
 HEAP32[$17 >> 2] = $$pre$i; //@line 11533
 if ($$pre$i | 0) {
  $20 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 11538
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 11539
  FUNCTION_TABLE_vii[$20 & 31]($6, $4); //@line 11540
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 333; //@line 11543
   $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 11544
   HEAP32[$21 >> 2] = $17; //@line 11545
   $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 11546
   HEAP32[$22 >> 2] = $4; //@line 11547
   $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 11548
   HEAP32[$23 >> 2] = $17; //@line 11549
   $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 11550
   HEAP32[$24 >> 2] = $6; //@line 11551
   $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 11552
   HEAP32[$25 >> 2] = $8; //@line 11553
   $26 = $ReallocAsyncCtx2 + 24 | 0; //@line 11554
   HEAP16[$26 >> 1] = $10; //@line 11555
   $27 = $ReallocAsyncCtx2 + 26 | 0; //@line 11556
   HEAP16[$27 >> 1] = $12; //@line 11557
   $28 = $ReallocAsyncCtx2 + 28 | 0; //@line 11558
   HEAP8[$28 >> 0] = $14; //@line 11559
   $29 = $ReallocAsyncCtx2 + 32 | 0; //@line 11560
   HEAP32[$29 >> 2] = $16; //@line 11561
   sp = STACKTOP; //@line 11562
   return;
  }
  ___async_unwind = 0; //@line 11565
  HEAP32[$ReallocAsyncCtx2 >> 2] = 333; //@line 11566
  $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 11567
  HEAP32[$21 >> 2] = $17; //@line 11568
  $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 11569
  HEAP32[$22 >> 2] = $4; //@line 11570
  $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 11571
  HEAP32[$23 >> 2] = $17; //@line 11572
  $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 11573
  HEAP32[$24 >> 2] = $6; //@line 11574
  $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 11575
  HEAP32[$25 >> 2] = $8; //@line 11576
  $26 = $ReallocAsyncCtx2 + 24 | 0; //@line 11577
  HEAP16[$26 >> 1] = $10; //@line 11578
  $27 = $ReallocAsyncCtx2 + 26 | 0; //@line 11579
  HEAP16[$27 >> 1] = $12; //@line 11580
  $28 = $ReallocAsyncCtx2 + 28 | 0; //@line 11581
  HEAP8[$28 >> 0] = $14; //@line 11582
  $29 = $ReallocAsyncCtx2 + 32 | 0; //@line 11583
  HEAP32[$29 >> 2] = $16; //@line 11584
  sp = STACKTOP; //@line 11585
  return;
 }
 $30 = $6 + 12 | 0; //@line 11588
 HEAP32[$30 >> 2] = 0; //@line 11589
 $31 = $6 + 16 | 0; //@line 11590
 HEAP32[$31 >> 2] = $8; //@line 11591
 HEAP16[$6 + 20 >> 1] = $10; //@line 11593
 HEAP16[$6 + 22 >> 1] = $12; //@line 11595
 HEAP8[$6 + 24 >> 0] = $14; //@line 11597
 $35 = _equeue_alloc($16, 28) | 0; //@line 11598
 if ($35 | 0) {
  $37 = HEAP32[$30 >> 2] | 0; //@line 11601
  if (!$37) {
   HEAP32[$35 + 12 >> 2] = 0; //@line 11605
   $50 = $35 + 16 | 0; //@line 11606
   HEAP32[$50 >> 2] = HEAP32[$31 >> 2]; //@line 11607
   HEAP32[$50 + 4 >> 2] = HEAP32[$31 + 4 >> 2]; //@line 11607
   HEAP8[$50 + 8 >> 0] = HEAP8[$31 + 8 >> 0] | 0; //@line 11607
   _equeue_event_dtor($35, 335); //@line 11608
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 11609
   $51 = _equeue_post($16, 336, $35) | 0; //@line 11610
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 337; //@line 11613
    $52 = $ReallocAsyncCtx6 + 4 | 0; //@line 11614
    HEAP32[$52 >> 2] = $30; //@line 11615
    $53 = $ReallocAsyncCtx6 + 8 | 0; //@line 11616
    HEAP32[$53 >> 2] = $17; //@line 11617
    $54 = $ReallocAsyncCtx6 + 12 | 0; //@line 11618
    HEAP32[$54 >> 2] = $6; //@line 11619
    $55 = $ReallocAsyncCtx6 + 16 | 0; //@line 11620
    HEAP32[$55 >> 2] = $4; //@line 11621
    sp = STACKTOP; //@line 11622
    return;
   }
   HEAP32[___async_retval >> 2] = $51; //@line 11626
   ___async_unwind = 0; //@line 11627
   HEAP32[$ReallocAsyncCtx6 >> 2] = 337; //@line 11628
   $52 = $ReallocAsyncCtx6 + 4 | 0; //@line 11629
   HEAP32[$52 >> 2] = $30; //@line 11630
   $53 = $ReallocAsyncCtx6 + 8 | 0; //@line 11631
   HEAP32[$53 >> 2] = $17; //@line 11632
   $54 = $ReallocAsyncCtx6 + 12 | 0; //@line 11633
   HEAP32[$54 >> 2] = $6; //@line 11634
   $55 = $ReallocAsyncCtx6 + 16 | 0; //@line 11635
   HEAP32[$55 >> 2] = $4; //@line 11636
   sp = STACKTOP; //@line 11637
   return;
  } else {
   $40 = HEAP32[$37 + 4 >> 2] | 0; //@line 11641
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 11642
   FUNCTION_TABLE_vii[$40 & 31]($35, $6); //@line 11643
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 334; //@line 11646
    $41 = $ReallocAsyncCtx3 + 4 | 0; //@line 11647
    HEAP32[$41 >> 2] = $30; //@line 11648
    $42 = $ReallocAsyncCtx3 + 8 | 0; //@line 11649
    HEAP32[$42 >> 2] = $35; //@line 11650
    $43 = $ReallocAsyncCtx3 + 12 | 0; //@line 11651
    HEAP32[$43 >> 2] = $31; //@line 11652
    $44 = $ReallocAsyncCtx3 + 16 | 0; //@line 11653
    HEAP32[$44 >> 2] = $16; //@line 11654
    $45 = $ReallocAsyncCtx3 + 20 | 0; //@line 11655
    HEAP32[$45 >> 2] = $30; //@line 11656
    $46 = $ReallocAsyncCtx3 + 24 | 0; //@line 11657
    HEAP32[$46 >> 2] = $17; //@line 11658
    $47 = $ReallocAsyncCtx3 + 28 | 0; //@line 11659
    HEAP32[$47 >> 2] = $6; //@line 11660
    $48 = $ReallocAsyncCtx3 + 32 | 0; //@line 11661
    HEAP32[$48 >> 2] = $4; //@line 11662
    sp = STACKTOP; //@line 11663
    return;
   }
   ___async_unwind = 0; //@line 11666
   HEAP32[$ReallocAsyncCtx3 >> 2] = 334; //@line 11667
   $41 = $ReallocAsyncCtx3 + 4 | 0; //@line 11668
   HEAP32[$41 >> 2] = $30; //@line 11669
   $42 = $ReallocAsyncCtx3 + 8 | 0; //@line 11670
   HEAP32[$42 >> 2] = $35; //@line 11671
   $43 = $ReallocAsyncCtx3 + 12 | 0; //@line 11672
   HEAP32[$43 >> 2] = $31; //@line 11673
   $44 = $ReallocAsyncCtx3 + 16 | 0; //@line 11674
   HEAP32[$44 >> 2] = $16; //@line 11675
   $45 = $ReallocAsyncCtx3 + 20 | 0; //@line 11676
   HEAP32[$45 >> 2] = $30; //@line 11677
   $46 = $ReallocAsyncCtx3 + 24 | 0; //@line 11678
   HEAP32[$46 >> 2] = $17; //@line 11679
   $47 = $ReallocAsyncCtx3 + 28 | 0; //@line 11680
   HEAP32[$47 >> 2] = $6; //@line 11681
   $48 = $ReallocAsyncCtx3 + 32 | 0; //@line 11682
   HEAP32[$48 >> 2] = $4; //@line 11683
   sp = STACKTOP; //@line 11684
   return;
  }
 }
 $57 = HEAP32[$30 >> 2] | 0; //@line 11688
 if ($57 | 0) {
  $60 = HEAP32[$57 + 8 >> 2] | 0; //@line 11692
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 11693
  FUNCTION_TABLE_vi[$60 & 1023]($6); //@line 11694
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 338; //@line 11697
   $61 = $ReallocAsyncCtx4 + 4 | 0; //@line 11698
   HEAP32[$61 >> 2] = $17; //@line 11699
   $62 = $ReallocAsyncCtx4 + 8 | 0; //@line 11700
   HEAP32[$62 >> 2] = 0; //@line 11701
   $63 = $ReallocAsyncCtx4 + 12 | 0; //@line 11702
   HEAP32[$63 >> 2] = $4; //@line 11703
   sp = STACKTOP; //@line 11704
   return;
  }
  ___async_unwind = 0; //@line 11707
  HEAP32[$ReallocAsyncCtx4 >> 2] = 338; //@line 11708
  $61 = $ReallocAsyncCtx4 + 4 | 0; //@line 11709
  HEAP32[$61 >> 2] = $17; //@line 11710
  $62 = $ReallocAsyncCtx4 + 8 | 0; //@line 11711
  HEAP32[$62 >> 2] = 0; //@line 11712
  $63 = $ReallocAsyncCtx4 + 12 | 0; //@line 11713
  HEAP32[$63 >> 2] = $4; //@line 11714
  sp = STACKTOP; //@line 11715
  return;
 }
 $64 = HEAP32[$17 >> 2] | 0; //@line 11718
 if (!$64) {
  HEAP32[___async_retval >> 2] = 0; //@line 11722
  return;
 }
 $67 = HEAP32[$64 + 8 >> 2] | 0; //@line 11726
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 11727
 FUNCTION_TABLE_vi[$67 & 1023]($4); //@line 11728
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 339; //@line 11731
  $68 = $ReallocAsyncCtx5 + 4 | 0; //@line 11732
  HEAP32[$68 >> 2] = 0; //@line 11733
  sp = STACKTOP; //@line 11734
  return;
 }
 ___async_unwind = 0; //@line 11737
 HEAP32[$ReallocAsyncCtx5 >> 2] = 339; //@line 11738
 $68 = $ReallocAsyncCtx5 + 4 | 0; //@line 11739
 HEAP32[$68 >> 2] = 0; //@line 11740
 sp = STACKTOP; //@line 11741
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $107 = 0, $11 = 0, $110 = 0, $111 = 0, $113 = 0, $120 = 0, $123 = 0, $125 = 0, $126 = 0, $131 = 0, $134 = 0, $14 = 0, $16 = 0, $23 = 0, $24 = 0, $27 = 0, $33 = 0, $39 = 0, $45 = 0, $46 = 0, $47 = 0, $50 = 0, $64 = 0, $67 = 0, $71 = 0, $89 = 0, $92 = 0, $94 = 0, $95 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx16 = 0, $AsyncCtx19 = 0, $AsyncCtx22 = 0, $AsyncCtx26 = 0, $AsyncCtx4 = 0, $AsyncCtx8 = 0, $switch$selectcmp$i = 0, $switch$selectcmp4$i = 0, sp = 0;
 sp = STACKTOP; //@line 20924
 STACKTOP = STACKTOP + 16 | 0; //@line 20925
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 20925
 _printf(12433, sp) | 0; //@line 20928
 _printf(12446, sp + 8 | 0) | 0; //@line 20929
 $AsyncCtx26 = _emscripten_alloc_async_context(20, sp) | 0; //@line 20930
 _putchar(10) | 0; //@line 20931
 if (___async) {
  HEAP32[$AsyncCtx26 >> 2] = 523; //@line 20934
  HEAP32[$AsyncCtx26 + 4 >> 2] = $2; //@line 20936
  HEAP32[$AsyncCtx26 + 8 >> 2] = $0; //@line 20938
  HEAP32[$AsyncCtx26 + 12 >> 2] = $1; //@line 20940
  HEAP32[$AsyncCtx26 + 16 >> 2] = $3; //@line 20942
  sp = STACKTOP; //@line 20943
  STACKTOP = sp; //@line 20944
  return 0; //@line 20944
 }
 _emscripten_free_async_context($AsyncCtx26 | 0); //@line 20946
 $10 = $1 + 1 | 0; //@line 20949
 $11 = HEAP8[$10 >> 0] | 0; //@line 20950
 $14 = HEAP8[(HEAP32[$0 + 88 >> 2] | 0) + ($11 << 24 >> 24) >> 0] | 0; //@line 20953
 $16 = HEAP32[$0 + 112 >> 2] | 0; //@line 20955
 $23 = $1 + 2 | 0; //@line 20962
 $24 = HEAP8[$23 >> 0] | 0; //@line 20963
 $27 = HEAP8[(HEAP32[$0 + 72 >> 2] | 0) + ((HEAPU8[$16 + ((HEAPU8[$1 >> 0] | 0) * 12 | 0) + 9 >> 0] | 0) * 24 | 0) + 2 >> 0] | 0; //@line 20966
 if ($24 << 24 >> 24 > $27 << 24 >> 24) {
  HEAP8[$23 >> 0] = $27; //@line 20969
  $39 = $27; //@line 20970
 } else {
  $39 = $24; //@line 20972
 }
 $33 = HEAP32[(HEAP32[$0 + 80 >> 2] | 0) + (($11 & 255) << 2) >> 2] | 0; //@line 20978
 $switch$selectcmp$i = ($33 | 0) == 25e4; //@line 20979
 $switch$selectcmp4$i = ($33 | 0) == 5e5; //@line 20980
 $45 = ~~+Math_floor(+(+HEAPF32[$1 + 4 >> 2] - +($39 << 24 >> 24 << 1 >>> 0) - +HEAPF32[$1 + 8 >> 2])); //@line 20991
 $46 = $0 + 4 | 0; //@line 20992
 $47 = HEAP32[$46 >> 2] | 0; //@line 20993
 $50 = HEAP32[(HEAP32[$47 >> 2] | 0) + 72 >> 2] | 0; //@line 20996
 $AsyncCtx = _emscripten_alloc_async_context(44, sp) | 0; //@line 20997
 FUNCTION_TABLE_vi[$50 & 1023]($47); //@line 20998
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 524; //@line 21001
  HEAP32[$AsyncCtx + 4 >> 2] = $46; //@line 21003
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 21005
  HEAP32[$AsyncCtx + 12 >> 2] = $16; //@line 21007
  HEAP32[$AsyncCtx + 16 >> 2] = $10; //@line 21009
  HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 21011
  HEAP8[$AsyncCtx + 24 >> 0] = $switch$selectcmp$i & 1; //@line 21014
  HEAP8[$AsyncCtx + 25 >> 0] = $switch$selectcmp4$i & 1; //@line 21017
  HEAP8[$AsyncCtx + 26 >> 0] = $14; //@line 21019
  HEAP8[$AsyncCtx + 27 >> 0] = $45; //@line 21021
  HEAP32[$AsyncCtx + 28 >> 2] = $1; //@line 21023
  HEAP32[$AsyncCtx + 32 >> 2] = $3; //@line 21025
  HEAP32[$AsyncCtx + 36 >> 2] = $23; //@line 21027
  HEAP32[$AsyncCtx + 40 >> 2] = $2; //@line 21029
  sp = STACKTOP; //@line 21030
  STACKTOP = sp; //@line 21031
  return 0; //@line 21031
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 21033
 $64 = HEAP32[$46 >> 2] | 0; //@line 21034
 $67 = HEAP32[(HEAP32[$64 >> 2] | 0) + 32 >> 2] | 0; //@line 21037
 $71 = HEAP32[$16 + ((HEAPU8[$1 >> 0] | 0) * 12 | 0) >> 2] | 0; //@line 21041
 $AsyncCtx4 = _emscripten_alloc_async_context(36, sp) | 0; //@line 21042
 FUNCTION_TABLE_vii[$67 & 31]($64, $71); //@line 21043
 if (___async) {
  HEAP32[$AsyncCtx4 >> 2] = 525; //@line 21046
  HEAP32[$AsyncCtx4 + 4 >> 2] = $10; //@line 21048
  HEAP32[$AsyncCtx4 + 8 >> 2] = $0; //@line 21050
  HEAP32[$AsyncCtx4 + 12 >> 2] = $46; //@line 21052
  HEAP8[$AsyncCtx4 + 16 >> 0] = $switch$selectcmp$i & 1; //@line 21055
  HEAP8[$AsyncCtx4 + 17 >> 0] = $switch$selectcmp4$i & 1; //@line 21058
  HEAP8[$AsyncCtx4 + 18 >> 0] = $14; //@line 21060
  HEAP8[$AsyncCtx4 + 19 >> 0] = $45; //@line 21062
  HEAP32[$AsyncCtx4 + 20 >> 2] = $1; //@line 21064
  HEAP32[$AsyncCtx4 + 24 >> 2] = $3; //@line 21066
  HEAP32[$AsyncCtx4 + 28 >> 2] = $23; //@line 21068
  HEAP32[$AsyncCtx4 + 32 >> 2] = $2; //@line 21070
  sp = STACKTOP; //@line 21071
  STACKTOP = sp; //@line 21072
  return 0; //@line 21072
 }
 _emscripten_free_async_context($AsyncCtx4 | 0); //@line 21074
 $89 = HEAP32[$46 >> 2] | 0; //@line 21081
 $92 = HEAP32[(HEAP32[$89 >> 2] | 0) + 20 >> 2] | 0; //@line 21084
 $94 = $switch$selectcmp4$i ? 2 : $switch$selectcmp$i & 1; //@line 21086
 $95 = $14 << 24 >> 24; //@line 21087
 do {
  if ((HEAP8[$10 >> 0] | 0) == (HEAPU8[$0 + 27 >> 0] | 0)) {
   $AsyncCtx8 = _emscripten_alloc_async_context(24, sp) | 0; //@line 21091
   FUNCTION_TABLE_viiiiiiiiiiiiii[$92 & 1]($89, 0, $45, 25e3, $94, $95 * 1e3 | 0, 0, 5, 0, 1, 0, 0, 0, 3e3); //@line 21092
   if (___async) {
    HEAP32[$AsyncCtx8 >> 2] = 526; //@line 21095
    HEAP32[$AsyncCtx8 + 4 >> 2] = $46; //@line 21097
    HEAP32[$AsyncCtx8 + 8 >> 2] = $1; //@line 21099
    HEAP32[$AsyncCtx8 + 12 >> 2] = $3; //@line 21101
    HEAP32[$AsyncCtx8 + 16 >> 2] = $23; //@line 21103
    HEAP32[$AsyncCtx8 + 20 >> 2] = $2; //@line 21105
    sp = STACKTOP; //@line 21106
    STACKTOP = sp; //@line 21107
    return 0; //@line 21107
   } else {
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 21109
    $$0 = 0; //@line 21110
    break;
   }
  } else {
   $AsyncCtx12 = _emscripten_alloc_async_context(24, sp) | 0; //@line 21114
   FUNCTION_TABLE_viiiiiiiiiiiiii[$92 & 1]($89, 1, $45, 0, $94, $95, 1, 8, 0, 1, 0, 0, 0, 3e3); //@line 21115
   if (___async) {
    HEAP32[$AsyncCtx12 >> 2] = 527; //@line 21118
    HEAP32[$AsyncCtx12 + 4 >> 2] = $46; //@line 21120
    HEAP32[$AsyncCtx12 + 8 >> 2] = $1; //@line 21122
    HEAP32[$AsyncCtx12 + 12 >> 2] = $3; //@line 21124
    HEAP32[$AsyncCtx12 + 16 >> 2] = $23; //@line 21126
    HEAP32[$AsyncCtx12 + 20 >> 2] = $2; //@line 21128
    sp = STACKTOP; //@line 21129
    STACKTOP = sp; //@line 21130
    return 0; //@line 21130
   } else {
    _emscripten_free_async_context($AsyncCtx12 | 0); //@line 21132
    $$0 = 1; //@line 21133
    break;
   }
  }
 } while (0);
 $107 = HEAP32[$46 >> 2] | 0; //@line 21138
 $110 = HEAP32[(HEAP32[$107 >> 2] | 0) + 44 >> 2] | 0; //@line 21141
 $111 = $1 + 12 | 0; //@line 21142
 $113 = HEAP16[$111 >> 1] & 255; //@line 21144
 $AsyncCtx16 = _emscripten_alloc_async_context(28, sp) | 0; //@line 21145
 FUNCTION_TABLE_viii[$110 & 7]($107, $$0, $113); //@line 21146
 if (___async) {
  HEAP32[$AsyncCtx16 >> 2] = 528; //@line 21149
  HEAP32[$AsyncCtx16 + 4 >> 2] = $46; //@line 21151
  HEAP32[$AsyncCtx16 + 8 >> 2] = $111; //@line 21153
  HEAP32[$AsyncCtx16 + 12 >> 2] = $$0; //@line 21155
  HEAP32[$AsyncCtx16 + 16 >> 2] = $3; //@line 21157
  HEAP32[$AsyncCtx16 + 20 >> 2] = $23; //@line 21159
  HEAP32[$AsyncCtx16 + 24 >> 2] = $2; //@line 21161
  sp = STACKTOP; //@line 21162
  STACKTOP = sp; //@line 21163
  return 0; //@line 21163
 }
 _emscripten_free_async_context($AsyncCtx16 | 0); //@line 21165
 $120 = HEAP32[$46 >> 2] | 0; //@line 21166
 $123 = HEAP32[(HEAP32[$120 >> 2] | 0) + 52 >> 2] | 0; //@line 21169
 $125 = HEAP16[$111 >> 1] & 255; //@line 21171
 $AsyncCtx19 = _emscripten_alloc_async_context(20, sp) | 0; //@line 21172
 $126 = FUNCTION_TABLE_iiii[$123 & 15]($120, $$0, $125) | 0; //@line 21173
 if (___async) {
  HEAP32[$AsyncCtx19 >> 2] = 529; //@line 21176
  HEAP32[$AsyncCtx19 + 4 >> 2] = $3; //@line 21178
  HEAP32[$AsyncCtx19 + 8 >> 2] = $46; //@line 21180
  HEAP32[$AsyncCtx19 + 12 >> 2] = $23; //@line 21182
  HEAP32[$AsyncCtx19 + 16 >> 2] = $2; //@line 21184
  sp = STACKTOP; //@line 21185
  STACKTOP = sp; //@line 21186
  return 0; //@line 21186
 }
 _emscripten_free_async_context($AsyncCtx19 | 0); //@line 21188
 HEAP32[$3 >> 2] = $126; //@line 21189
 $131 = HEAP32[$46 >> 2] | 0; //@line 21190
 $134 = HEAP32[(HEAP32[$131 >> 2] | 0) + 76 >> 2] | 0; //@line 21193
 $AsyncCtx22 = _emscripten_alloc_async_context(12, sp) | 0; //@line 21194
 FUNCTION_TABLE_vi[$134 & 1023]($131); //@line 21195
 if (___async) {
  HEAP32[$AsyncCtx22 >> 2] = 530; //@line 21198
  HEAP32[$AsyncCtx22 + 4 >> 2] = $23; //@line 21200
  HEAP32[$AsyncCtx22 + 8 >> 2] = $2; //@line 21202
  sp = STACKTOP; //@line 21203
  STACKTOP = sp; //@line 21204
  return 0; //@line 21204
 } else {
  _emscripten_free_async_context($AsyncCtx22 | 0); //@line 21206
  HEAP8[$2 >> 0] = HEAP8[$23 >> 0] | 0; //@line 21208
  STACKTOP = sp; //@line 21209
  return 1; //@line 21209
 }
 return 0; //@line 21211
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 134
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 136
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 138
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 140
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 142
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 144
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 146
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 148
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 150
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 152
 $$pre = HEAP32[$14 >> 2] | 0; //@line 153
 if ($$pre | 0) {
  $21 = HEAP32[$$pre + 4 >> 2] | 0; //@line 157
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 158
  FUNCTION_TABLE_vii[$21 & 31]($6, $8); //@line 159
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 465; //@line 162
   $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 163
   HEAP32[$22 >> 2] = $2; //@line 164
   $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 165
   HEAP32[$23 >> 2] = $4; //@line 166
   $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 167
   HEAP32[$24 >> 2] = $8; //@line 168
   $25 = $ReallocAsyncCtx2 + 16 | 0; //@line 169
   HEAP32[$25 >> 2] = $12; //@line 170
   $26 = $ReallocAsyncCtx2 + 20 | 0; //@line 171
   HEAP32[$26 >> 2] = $6; //@line 172
   $27 = $ReallocAsyncCtx2 + 24 | 0; //@line 173
   HEAP32[$27 >> 2] = $16; //@line 174
   $28 = $ReallocAsyncCtx2 + 28 | 0; //@line 175
   HEAP32[$28 >> 2] = $14; //@line 176
   $29 = $ReallocAsyncCtx2 + 32 | 0; //@line 177
   HEAP32[$29 >> 2] = $10; //@line 178
   $30 = $ReallocAsyncCtx2 + 36 | 0; //@line 179
   HEAP32[$30 >> 2] = $18; //@line 180
   sp = STACKTOP; //@line 181
   return;
  }
  ___async_unwind = 0; //@line 184
  HEAP32[$ReallocAsyncCtx2 >> 2] = 465; //@line 185
  $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 186
  HEAP32[$22 >> 2] = $2; //@line 187
  $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 188
  HEAP32[$23 >> 2] = $4; //@line 189
  $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 190
  HEAP32[$24 >> 2] = $8; //@line 191
  $25 = $ReallocAsyncCtx2 + 16 | 0; //@line 192
  HEAP32[$25 >> 2] = $12; //@line 193
  $26 = $ReallocAsyncCtx2 + 20 | 0; //@line 194
  HEAP32[$26 >> 2] = $6; //@line 195
  $27 = $ReallocAsyncCtx2 + 24 | 0; //@line 196
  HEAP32[$27 >> 2] = $16; //@line 197
  $28 = $ReallocAsyncCtx2 + 28 | 0; //@line 198
  HEAP32[$28 >> 2] = $14; //@line 199
  $29 = $ReallocAsyncCtx2 + 32 | 0; //@line 200
  HEAP32[$29 >> 2] = $10; //@line 201
  $30 = $ReallocAsyncCtx2 + 36 | 0; //@line 202
  HEAP32[$30 >> 2] = $18; //@line 203
  sp = STACKTOP; //@line 204
  return;
 }
 HEAP32[$10 >> 2] = 0; //@line 207
 $31 = $12 + 12 | 0; //@line 208
 HEAP32[$12 >> 2] = 7; //@line 209
 HEAP32[$12 + 4 >> 2] = 0; //@line 211
 HEAP32[$12 + 8 >> 2] = $2; //@line 213
 HEAP32[$31 >> 2] = 848; //@line 214
 $32 = $2 + 1244 | 0; //@line 215
 if (($32 | 0) == ($12 | 0)) {
  $59 = HEAP32[214] | 0; //@line 219
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(28) | 0; //@line 220
  FUNCTION_TABLE_vi[$59 & 1023]($12); //@line 221
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 469; //@line 224
   $60 = $ReallocAsyncCtx6 + 4 | 0; //@line 225
   HEAP32[$60 >> 2] = $2; //@line 226
   $61 = $ReallocAsyncCtx6 + 8 | 0; //@line 227
   HEAP32[$61 >> 2] = $12; //@line 228
   $62 = $ReallocAsyncCtx6 + 12 | 0; //@line 229
   HEAP32[$62 >> 2] = $4; //@line 230
   $63 = $ReallocAsyncCtx6 + 16 | 0; //@line 231
   HEAP32[$63 >> 2] = $6; //@line 232
   $64 = $ReallocAsyncCtx6 + 20 | 0; //@line 233
   HEAP32[$64 >> 2] = $16; //@line 234
   $65 = $ReallocAsyncCtx6 + 24 | 0; //@line 235
   HEAP32[$65 >> 2] = $18; //@line 236
   sp = STACKTOP; //@line 237
   return;
  }
  ___async_unwind = 0; //@line 240
  HEAP32[$ReallocAsyncCtx6 >> 2] = 469; //@line 241
  $60 = $ReallocAsyncCtx6 + 4 | 0; //@line 242
  HEAP32[$60 >> 2] = $2; //@line 243
  $61 = $ReallocAsyncCtx6 + 8 | 0; //@line 244
  HEAP32[$61 >> 2] = $12; //@line 245
  $62 = $ReallocAsyncCtx6 + 12 | 0; //@line 246
  HEAP32[$62 >> 2] = $4; //@line 247
  $63 = $ReallocAsyncCtx6 + 16 | 0; //@line 248
  HEAP32[$63 >> 2] = $6; //@line 249
  $64 = $ReallocAsyncCtx6 + 20 | 0; //@line 250
  HEAP32[$64 >> 2] = $16; //@line 251
  $65 = $ReallocAsyncCtx6 + 24 | 0; //@line 252
  HEAP32[$65 >> 2] = $18; //@line 253
  sp = STACKTOP; //@line 254
  return;
 }
 $34 = $2 + 1256 | 0; //@line 257
 $35 = HEAP32[$34 >> 2] | 0; //@line 258
 if (!$35) {
  $49 = HEAP32[213] | 0; //@line 262
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(36) | 0; //@line 263
  FUNCTION_TABLE_vii[$49 & 31]($32, $12); //@line 264
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 468; //@line 267
   $50 = $ReallocAsyncCtx5 + 4 | 0; //@line 268
   HEAP32[$50 >> 2] = $12; //@line 269
   $51 = $ReallocAsyncCtx5 + 8 | 0; //@line 270
   HEAP32[$51 >> 2] = $2; //@line 271
   $52 = $ReallocAsyncCtx5 + 12 | 0; //@line 272
   HEAP32[$52 >> 2] = $4; //@line 273
   $53 = $ReallocAsyncCtx5 + 16 | 0; //@line 274
   HEAP32[$53 >> 2] = $6; //@line 275
   $54 = $ReallocAsyncCtx5 + 20 | 0; //@line 276
   HEAP32[$54 >> 2] = $16; //@line 277
   $55 = $ReallocAsyncCtx5 + 24 | 0; //@line 278
   HEAP32[$55 >> 2] = $31; //@line 279
   $56 = $ReallocAsyncCtx5 + 28 | 0; //@line 280
   HEAP32[$56 >> 2] = $34; //@line 281
   $57 = $ReallocAsyncCtx5 + 32 | 0; //@line 282
   HEAP32[$57 >> 2] = $18; //@line 283
   sp = STACKTOP; //@line 284
   return;
  }
  ___async_unwind = 0; //@line 287
  HEAP32[$ReallocAsyncCtx5 >> 2] = 468; //@line 288
  $50 = $ReallocAsyncCtx5 + 4 | 0; //@line 289
  HEAP32[$50 >> 2] = $12; //@line 290
  $51 = $ReallocAsyncCtx5 + 8 | 0; //@line 291
  HEAP32[$51 >> 2] = $2; //@line 292
  $52 = $ReallocAsyncCtx5 + 12 | 0; //@line 293
  HEAP32[$52 >> 2] = $4; //@line 294
  $53 = $ReallocAsyncCtx5 + 16 | 0; //@line 295
  HEAP32[$53 >> 2] = $6; //@line 296
  $54 = $ReallocAsyncCtx5 + 20 | 0; //@line 297
  HEAP32[$54 >> 2] = $16; //@line 298
  $55 = $ReallocAsyncCtx5 + 24 | 0; //@line 299
  HEAP32[$55 >> 2] = $31; //@line 300
  $56 = $ReallocAsyncCtx5 + 28 | 0; //@line 301
  HEAP32[$56 >> 2] = $34; //@line 302
  $57 = $ReallocAsyncCtx5 + 32 | 0; //@line 303
  HEAP32[$57 >> 2] = $18; //@line 304
  sp = STACKTOP; //@line 305
  return;
 } else {
  $38 = HEAP32[$35 + 8 >> 2] | 0; //@line 309
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(40) | 0; //@line 310
  FUNCTION_TABLE_vi[$38 & 1023]($32); //@line 311
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 467; //@line 314
   $39 = $ReallocAsyncCtx4 + 4 | 0; //@line 315
   HEAP32[$39 >> 2] = $32; //@line 316
   $40 = $ReallocAsyncCtx4 + 8 | 0; //@line 317
   HEAP32[$40 >> 2] = $12; //@line 318
   $41 = $ReallocAsyncCtx4 + 12 | 0; //@line 319
   HEAP32[$41 >> 2] = $34; //@line 320
   $42 = $ReallocAsyncCtx4 + 16 | 0; //@line 321
   HEAP32[$42 >> 2] = $2; //@line 322
   $43 = $ReallocAsyncCtx4 + 20 | 0; //@line 323
   HEAP32[$43 >> 2] = $4; //@line 324
   $44 = $ReallocAsyncCtx4 + 24 | 0; //@line 325
   HEAP32[$44 >> 2] = $31; //@line 326
   $45 = $ReallocAsyncCtx4 + 28 | 0; //@line 327
   HEAP32[$45 >> 2] = $6; //@line 328
   $46 = $ReallocAsyncCtx4 + 32 | 0; //@line 329
   HEAP32[$46 >> 2] = $16; //@line 330
   $47 = $ReallocAsyncCtx4 + 36 | 0; //@line 331
   HEAP32[$47 >> 2] = $18; //@line 332
   sp = STACKTOP; //@line 333
   return;
  }
  ___async_unwind = 0; //@line 336
  HEAP32[$ReallocAsyncCtx4 >> 2] = 467; //@line 337
  $39 = $ReallocAsyncCtx4 + 4 | 0; //@line 338
  HEAP32[$39 >> 2] = $32; //@line 339
  $40 = $ReallocAsyncCtx4 + 8 | 0; //@line 340
  HEAP32[$40 >> 2] = $12; //@line 341
  $41 = $ReallocAsyncCtx4 + 12 | 0; //@line 342
  HEAP32[$41 >> 2] = $34; //@line 343
  $42 = $ReallocAsyncCtx4 + 16 | 0; //@line 344
  HEAP32[$42 >> 2] = $2; //@line 345
  $43 = $ReallocAsyncCtx4 + 20 | 0; //@line 346
  HEAP32[$43 >> 2] = $4; //@line 347
  $44 = $ReallocAsyncCtx4 + 24 | 0; //@line 348
  HEAP32[$44 >> 2] = $31; //@line 349
  $45 = $ReallocAsyncCtx4 + 28 | 0; //@line 350
  HEAP32[$45 >> 2] = $6; //@line 351
  $46 = $ReallocAsyncCtx4 + 32 | 0; //@line 352
  HEAP32[$46 >> 2] = $16; //@line 353
  $47 = $ReallocAsyncCtx4 + 36 | 0; //@line 354
  HEAP32[$47 >> 2] = $18; //@line 355
  sp = STACKTOP; //@line 356
  return;
 }
}
function _schedule_interrupt__async_cb($0) {
 $0 = $0 | 0;
 var $$0$i = 0, $102 = 0, $105 = 0, $107 = 0, $110 = 0, $111 = 0, $113 = 0, $116 = 0, $12 = 0, $124 = 0, $125 = 0, $126 = 0, $128 = 0, $130 = 0, $135 = 0, $142 = 0, $144 = 0, $146 = 0, $149 = 0, $151 = 0, $158 = 0, $159 = 0, $162 = 0, $164 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $177 = 0, $180 = 0, $19 = 0, $20 = 0, $22 = 0, $23 = 0, $26 = 0, $27 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $61 = 0, $67 = 0, $68 = 0, $69 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $82 = 0, $86 = 0, $87 = 0, $9 = 0, $93 = 0, $94 = 0, $95 = 0, $97 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 17069
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17073
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17075
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 17077
 $8 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 17078
 $9 = $8 + 32 | 0; //@line 17079
 if (($AsyncRetVal | 0) != (HEAP32[$9 >> 2] | 0)) {
  $12 = $4 + 32 | 0; //@line 17083
  $17 = $AsyncRetVal - (HEAP32[$12 >> 2] | 0) & HEAP32[$4 + 12 >> 2]; //@line 17088
  HEAP32[$12 >> 2] = $AsyncRetVal; //@line 17089
  $19 = HEAP32[$4 + 8 >> 2] | 0; //@line 17091
  L4 : do {
   if (($19 | 0) < 1e6) {
    switch ($19 | 0) {
    case 32768:
     {
      break;
     }
    default:
     {
      label = 6; //@line 17100
      break L4;
     }
    }
    $20 = ___muldi3($17 | 0, 0, 1e6, 0) | 0; //@line 17104
    $22 = _bitshift64Lshr($20 | 0, tempRet0 | 0, 15) | 0; //@line 17106
    $23 = tempRet0; //@line 17107
    $26 = $4 + 40 | 0; //@line 17110
    $27 = $26; //@line 17111
    $33 = _i64Add(HEAP32[$27 >> 2] | 0, HEAP32[$27 + 4 >> 2] | 0, $17 * 1e6 & 32704 | 0, 0) | 0; //@line 17117
    $34 = tempRet0; //@line 17118
    $35 = $26; //@line 17119
    HEAP32[$35 >> 2] = $33; //@line 17121
    HEAP32[$35 + 4 >> 2] = $34; //@line 17124
    if ($34 >>> 0 < 0 | ($34 | 0) == 0 & $33 >>> 0 < 32768) {
     $93 = $22; //@line 17131
     $94 = $23; //@line 17131
    } else {
     $44 = _i64Add($22 | 0, $23 | 0, 1, 0) | 0; //@line 17133
     $45 = tempRet0; //@line 17134
     $46 = _i64Add($33 | 0, $34 | 0, -32768, -1) | 0; //@line 17135
     $48 = $26; //@line 17137
     HEAP32[$48 >> 2] = $46; //@line 17139
     HEAP32[$48 + 4 >> 2] = tempRet0; //@line 17142
     $93 = $44; //@line 17143
     $94 = $45; //@line 17143
    }
   } else {
    switch ($19 | 0) {
    case 1e6:
     {
      $93 = $17; //@line 17148
      $94 = 0; //@line 17148
      break;
     }
    default:
     {
      label = 6; //@line 17152
     }
    }
   }
  } while (0);
  if ((label | 0) == 6) {
   $52 = ___muldi3($17 | 0, 0, 1e6, 0) | 0; //@line 17158
   $53 = tempRet0; //@line 17159
   $54 = ___udivdi3($52 | 0, $53 | 0, $19 | 0, 0) | 0; //@line 17160
   $55 = tempRet0; //@line 17161
   $56 = ___muldi3($54 | 0, $55 | 0, $19 | 0, 0) | 0; //@line 17162
   $58 = _i64Subtract($52 | 0, $53 | 0, $56 | 0, tempRet0 | 0) | 0; //@line 17164
   $60 = $4 + 40 | 0; //@line 17166
   $61 = $60; //@line 17167
   $67 = _i64Add($58 | 0, tempRet0 | 0, HEAP32[$61 >> 2] | 0, HEAP32[$61 + 4 >> 2] | 0) | 0; //@line 17173
   $68 = tempRet0; //@line 17174
   $69 = $60; //@line 17175
   HEAP32[$69 >> 2] = $67; //@line 17177
   HEAP32[$69 + 4 >> 2] = $68; //@line 17180
   if ($68 >>> 0 < 0 | ($68 | 0) == 0 & $67 >>> 0 < $19 >>> 0) {
    $93 = $54; //@line 17187
    $94 = $55; //@line 17187
   } else {
    $78 = _i64Add($54 | 0, $55 | 0, 1, 0) | 0; //@line 17189
    $79 = tempRet0; //@line 17190
    $80 = _i64Subtract($67 | 0, $68 | 0, $19 | 0, 0) | 0; //@line 17191
    $82 = $60; //@line 17193
    HEAP32[$82 >> 2] = $80; //@line 17195
    HEAP32[$82 + 4 >> 2] = tempRet0; //@line 17198
    $93 = $78; //@line 17199
    $94 = $79; //@line 17199
   }
  }
  $86 = $4 + 48 | 0; //@line 17202
  $87 = $86; //@line 17203
  $95 = _i64Add(HEAP32[$87 >> 2] | 0, HEAP32[$87 + 4 >> 2] | 0, $93 | 0, $94 | 0) | 0; //@line 17209
  $97 = $86; //@line 17211
  HEAP32[$97 >> 2] = $95; //@line 17213
  HEAP32[$97 + 4 >> 2] = tempRet0; //@line 17216
 }
 $102 = HEAP32[$8 + 4 >> 2] | 0; //@line 17219
 if (!$102) {
  $177 = (HEAP32[$4 + 16 >> 2] | 0) + (HEAP32[$4 + 32 >> 2] | 0) & HEAP32[$4 + 12 >> 2]; //@line 17229
  $180 = HEAP32[(HEAP32[$6 >> 2] | 0) + 16 >> 2] | 0; //@line 17232
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 17233
  FUNCTION_TABLE_vi[$180 & 1023]($177); //@line 17234
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 608; //@line 17237
   sp = STACKTOP; //@line 17238
   return;
  }
  ___async_unwind = 0; //@line 17241
  HEAP32[$ReallocAsyncCtx7 >> 2] = 608; //@line 17242
  sp = STACKTOP; //@line 17243
  return;
 }
 $105 = $8 + 48 | 0; //@line 17247
 $107 = HEAP32[$105 >> 2] | 0; //@line 17249
 $110 = HEAP32[$105 + 4 >> 2] | 0; //@line 17252
 $111 = $102; //@line 17253
 $113 = HEAP32[$111 >> 2] | 0; //@line 17255
 $116 = HEAP32[$111 + 4 >> 2] | 0; //@line 17258
 if (!($116 >>> 0 > $110 >>> 0 | ($116 | 0) == ($110 | 0) & $113 >>> 0 > $107 >>> 0)) {
  $124 = HEAP32[(HEAP32[$6 >> 2] | 0) + 20 >> 2] | 0; //@line 17267
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 17268
  FUNCTION_TABLE_v[$124 & 15](); //@line 17269
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 603; //@line 17272
   sp = STACKTOP; //@line 17273
   return;
  }
  ___async_unwind = 0; //@line 17276
  HEAP32[$ReallocAsyncCtx2 >> 2] = 603; //@line 17277
  sp = STACKTOP; //@line 17278
  return;
 }
 $125 = _i64Subtract($113 | 0, $116 | 0, $107 | 0, $110 | 0) | 0; //@line 17281
 $126 = tempRet0; //@line 17282
 $128 = HEAP32[$8 + 16 >> 2] | 0; //@line 17284
 $130 = $8 + 24 | 0; //@line 17286
 $135 = HEAP32[$130 + 4 >> 2] | 0; //@line 17291
 L28 : do {
  if ($126 >>> 0 > $135 >>> 0 | (($126 | 0) == ($135 | 0) ? $125 >>> 0 > (HEAP32[$130 >> 2] | 0) >>> 0 : 0)) {
   $$0$i = $128; //@line 17299
  } else {
   $142 = HEAP32[$8 + 8 >> 2] | 0; //@line 17302
   L30 : do {
    if (($142 | 0) < 1e6) {
     switch ($142 | 0) {
     case 32768:
      {
       break;
      }
     default:
      {
       break L30;
      }
     }
     $144 = _bitshift64Shl($125 | 0, $126 | 0, 15) | 0; //@line 17314
     $146 = ___udivdi3($144 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 17316
     $$0$i = $128 >>> 0 < $146 >>> 0 ? $128 : $146; //@line 17320
     break L28;
    } else {
     switch ($142 | 0) {
     case 1e6:
      {
       break;
      }
     default:
      {
       break L30;
      }
     }
     $$0$i = $128 >>> 0 < $125 >>> 0 ? $128 : $125; //@line 17333
     break L28;
    }
   } while (0);
   $149 = ___muldi3($125 | 0, $126 | 0, $142 | 0, 0) | 0; //@line 17337
   $151 = ___udivdi3($149 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 17339
   $$0$i = $128 >>> 0 < $151 >>> 0 ? $128 : $151; //@line 17343
  }
 } while (0);
 $158 = (HEAP32[$9 >> 2] | 0) + $$0$i & HEAP32[$8 + 12 >> 2]; //@line 17350
 $159 = $4 + 32 | 0; //@line 17351
 $162 = HEAP32[$6 >> 2] | 0; //@line 17354
 if (($158 | 0) == (HEAP32[$159 >> 2] | 0)) {
  $164 = HEAP32[$162 + 20 >> 2] | 0; //@line 17357
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 17358
  FUNCTION_TABLE_v[$164 & 15](); //@line 17359
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 604; //@line 17362
   sp = STACKTOP; //@line 17363
   return;
  }
  ___async_unwind = 0; //@line 17366
  HEAP32[$ReallocAsyncCtx3 >> 2] = 604; //@line 17367
  sp = STACKTOP; //@line 17368
  return;
 } else {
  $166 = HEAP32[$162 + 16 >> 2] | 0; //@line 17372
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 17373
  FUNCTION_TABLE_vi[$166 & 1023]($158); //@line 17374
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 605; //@line 17377
   $167 = $ReallocAsyncCtx4 + 4 | 0; //@line 17378
   HEAP32[$167 >> 2] = $6; //@line 17379
   $168 = $ReallocAsyncCtx4 + 8 | 0; //@line 17380
   HEAP32[$168 >> 2] = $159; //@line 17381
   $169 = $ReallocAsyncCtx4 + 12 | 0; //@line 17382
   HEAP32[$169 >> 2] = $158; //@line 17383
   sp = STACKTOP; //@line 17384
   return;
  }
  ___async_unwind = 0; //@line 17387
  HEAP32[$ReallocAsyncCtx4 >> 2] = 605; //@line 17388
  $167 = $ReallocAsyncCtx4 + 4 | 0; //@line 17389
  HEAP32[$167 >> 2] = $6; //@line 17390
  $168 = $ReallocAsyncCtx4 + 8 | 0; //@line 17391
  HEAP32[$168 >> 2] = $159; //@line 17392
  $169 = $ReallocAsyncCtx4 + 12 | 0; //@line 17393
  HEAP32[$169 >> 2] = $158; //@line 17394
  sp = STACKTOP; //@line 17395
  return;
 }
}
function _mbed_die() {
 var $0 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx3 = 0, $AsyncCtx31 = 0, $AsyncCtx35 = 0, $AsyncCtx39 = 0, $AsyncCtx43 = 0, $AsyncCtx47 = 0, $AsyncCtx51 = 0, $AsyncCtx55 = 0, $AsyncCtx59 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5830
 STACKTOP = STACKTOP + 32 | 0; //@line 5831
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 5831
 $0 = sp; //@line 5832
 _gpio_init_out($0, 50); //@line 5833
 while (1) {
  _emscripten_asm_const_iii(2, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 5836
  $AsyncCtx59 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5837
  _wait_ms(150); //@line 5838
  if (___async) {
   label = 3; //@line 5841
   break;
  }
  _emscripten_free_async_context($AsyncCtx59 | 0); //@line 5844
  _emscripten_asm_const_iii(2, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 5846
  $AsyncCtx55 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5847
  _wait_ms(150); //@line 5848
  if (___async) {
   label = 5; //@line 5851
   break;
  }
  _emscripten_free_async_context($AsyncCtx55 | 0); //@line 5854
  _emscripten_asm_const_iii(2, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 5856
  $AsyncCtx51 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5857
  _wait_ms(150); //@line 5858
  if (___async) {
   label = 7; //@line 5861
   break;
  }
  _emscripten_free_async_context($AsyncCtx51 | 0); //@line 5864
  _emscripten_asm_const_iii(2, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 5866
  $AsyncCtx47 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5867
  _wait_ms(150); //@line 5868
  if (___async) {
   label = 9; //@line 5871
   break;
  }
  _emscripten_free_async_context($AsyncCtx47 | 0); //@line 5874
  _emscripten_asm_const_iii(2, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 5876
  $AsyncCtx43 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5877
  _wait_ms(150); //@line 5878
  if (___async) {
   label = 11; //@line 5881
   break;
  }
  _emscripten_free_async_context($AsyncCtx43 | 0); //@line 5884
  _emscripten_asm_const_iii(2, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 5886
  $AsyncCtx39 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5887
  _wait_ms(150); //@line 5888
  if (___async) {
   label = 13; //@line 5891
   break;
  }
  _emscripten_free_async_context($AsyncCtx39 | 0); //@line 5894
  _emscripten_asm_const_iii(2, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 5896
  $AsyncCtx35 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5897
  _wait_ms(150); //@line 5898
  if (___async) {
   label = 15; //@line 5901
   break;
  }
  _emscripten_free_async_context($AsyncCtx35 | 0); //@line 5904
  _emscripten_asm_const_iii(2, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 5906
  $AsyncCtx31 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5907
  _wait_ms(150); //@line 5908
  if (___async) {
   label = 17; //@line 5911
   break;
  }
  _emscripten_free_async_context($AsyncCtx31 | 0); //@line 5914
  _emscripten_asm_const_iii(2, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 5916
  $AsyncCtx27 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5917
  _wait_ms(400); //@line 5918
  if (___async) {
   label = 19; //@line 5921
   break;
  }
  _emscripten_free_async_context($AsyncCtx27 | 0); //@line 5924
  _emscripten_asm_const_iii(2, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 5926
  $AsyncCtx23 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5927
  _wait_ms(400); //@line 5928
  if (___async) {
   label = 21; //@line 5931
   break;
  }
  _emscripten_free_async_context($AsyncCtx23 | 0); //@line 5934
  _emscripten_asm_const_iii(2, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 5936
  $AsyncCtx19 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5937
  _wait_ms(400); //@line 5938
  if (___async) {
   label = 23; //@line 5941
   break;
  }
  _emscripten_free_async_context($AsyncCtx19 | 0); //@line 5944
  _emscripten_asm_const_iii(2, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 5946
  $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5947
  _wait_ms(400); //@line 5948
  if (___async) {
   label = 25; //@line 5951
   break;
  }
  _emscripten_free_async_context($AsyncCtx15 | 0); //@line 5954
  _emscripten_asm_const_iii(2, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 5956
  $AsyncCtx11 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5957
  _wait_ms(400); //@line 5958
  if (___async) {
   label = 27; //@line 5961
   break;
  }
  _emscripten_free_async_context($AsyncCtx11 | 0); //@line 5964
  _emscripten_asm_const_iii(2, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 5966
  $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5967
  _wait_ms(400); //@line 5968
  if (___async) {
   label = 29; //@line 5971
   break;
  }
  _emscripten_free_async_context($AsyncCtx7 | 0); //@line 5974
  _emscripten_asm_const_iii(2, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 5976
  $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5977
  _wait_ms(400); //@line 5978
  if (___async) {
   label = 31; //@line 5981
   break;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5984
  _emscripten_asm_const_iii(2, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 5986
  $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 5987
  _wait_ms(400); //@line 5988
  if (___async) {
   label = 33; //@line 5991
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5994
 }
 switch (label | 0) {
 case 3:
  {
   HEAP32[$AsyncCtx59 >> 2] = 613; //@line 5998
   HEAP32[$AsyncCtx59 + 4 >> 2] = $0; //@line 6000
   sp = STACKTOP; //@line 6001
   STACKTOP = sp; //@line 6002
   return;
  }
 case 5:
  {
   HEAP32[$AsyncCtx55 >> 2] = 614; //@line 6006
   HEAP32[$AsyncCtx55 + 4 >> 2] = $0; //@line 6008
   sp = STACKTOP; //@line 6009
   STACKTOP = sp; //@line 6010
   return;
  }
 case 7:
  {
   HEAP32[$AsyncCtx51 >> 2] = 615; //@line 6014
   HEAP32[$AsyncCtx51 + 4 >> 2] = $0; //@line 6016
   sp = STACKTOP; //@line 6017
   STACKTOP = sp; //@line 6018
   return;
  }
 case 9:
  {
   HEAP32[$AsyncCtx47 >> 2] = 616; //@line 6022
   HEAP32[$AsyncCtx47 + 4 >> 2] = $0; //@line 6024
   sp = STACKTOP; //@line 6025
   STACKTOP = sp; //@line 6026
   return;
  }
 case 11:
  {
   HEAP32[$AsyncCtx43 >> 2] = 617; //@line 6030
   HEAP32[$AsyncCtx43 + 4 >> 2] = $0; //@line 6032
   sp = STACKTOP; //@line 6033
   STACKTOP = sp; //@line 6034
   return;
  }
 case 13:
  {
   HEAP32[$AsyncCtx39 >> 2] = 618; //@line 6038
   HEAP32[$AsyncCtx39 + 4 >> 2] = $0; //@line 6040
   sp = STACKTOP; //@line 6041
   STACKTOP = sp; //@line 6042
   return;
  }
 case 15:
  {
   HEAP32[$AsyncCtx35 >> 2] = 619; //@line 6046
   HEAP32[$AsyncCtx35 + 4 >> 2] = $0; //@line 6048
   sp = STACKTOP; //@line 6049
   STACKTOP = sp; //@line 6050
   return;
  }
 case 17:
  {
   HEAP32[$AsyncCtx31 >> 2] = 620; //@line 6054
   HEAP32[$AsyncCtx31 + 4 >> 2] = $0; //@line 6056
   sp = STACKTOP; //@line 6057
   STACKTOP = sp; //@line 6058
   return;
  }
 case 19:
  {
   HEAP32[$AsyncCtx27 >> 2] = 621; //@line 6062
   HEAP32[$AsyncCtx27 + 4 >> 2] = $0; //@line 6064
   sp = STACKTOP; //@line 6065
   STACKTOP = sp; //@line 6066
   return;
  }
 case 21:
  {
   HEAP32[$AsyncCtx23 >> 2] = 622; //@line 6070
   HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 6072
   sp = STACKTOP; //@line 6073
   STACKTOP = sp; //@line 6074
   return;
  }
 case 23:
  {
   HEAP32[$AsyncCtx19 >> 2] = 623; //@line 6078
   HEAP32[$AsyncCtx19 + 4 >> 2] = $0; //@line 6080
   sp = STACKTOP; //@line 6081
   STACKTOP = sp; //@line 6082
   return;
  }
 case 25:
  {
   HEAP32[$AsyncCtx15 >> 2] = 624; //@line 6086
   HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 6088
   sp = STACKTOP; //@line 6089
   STACKTOP = sp; //@line 6090
   return;
  }
 case 27:
  {
   HEAP32[$AsyncCtx11 >> 2] = 625; //@line 6094
   HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 6096
   sp = STACKTOP; //@line 6097
   STACKTOP = sp; //@line 6098
   return;
  }
 case 29:
  {
   HEAP32[$AsyncCtx7 >> 2] = 626; //@line 6102
   HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 6104
   sp = STACKTOP; //@line 6105
   STACKTOP = sp; //@line 6106
   return;
  }
 case 31:
  {
   HEAP32[$AsyncCtx3 >> 2] = 627; //@line 6110
   HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 6112
   sp = STACKTOP; //@line 6113
   STACKTOP = sp; //@line 6114
   return;
  }
 case 33:
  {
   HEAP32[$AsyncCtx >> 2] = 628; //@line 6118
   HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 6120
   sp = STACKTOP; //@line 6121
   STACKTOP = sp; //@line 6122
   return;
  }
 }
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_191($0) {
 $0 = $0 | 0;
 var $$pre$i$i = 0, $10 = 0, $12 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 366
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 368
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 370
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 372
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 374
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 376
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 378
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 384
 $$pre$i$i = HEAP32[HEAP32[$0 + 28 >> 2] >> 2] | 0; //@line 385
 HEAP32[HEAP32[$0 + 32 >> 2] >> 2] = $$pre$i$i; //@line 387
 if ($$pre$i$i | 0) {
  $22 = HEAP32[$$pre$i$i + 8 >> 2] | 0; //@line 391
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 392
  FUNCTION_TABLE_vi[$22 & 1023]($6); //@line 393
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 466; //@line 396
   $23 = $ReallocAsyncCtx3 + 4 | 0; //@line 397
   HEAP32[$23 >> 2] = $2; //@line 398
   $24 = $ReallocAsyncCtx3 + 8 | 0; //@line 399
   HEAP32[$24 >> 2] = $4; //@line 400
   $25 = $ReallocAsyncCtx3 + 12 | 0; //@line 401
   HEAP32[$25 >> 2] = $6; //@line 402
   $26 = $ReallocAsyncCtx3 + 16 | 0; //@line 403
   HEAP32[$26 >> 2] = $8; //@line 404
   $27 = $ReallocAsyncCtx3 + 20 | 0; //@line 405
   HEAP32[$27 >> 2] = $10; //@line 406
   $28 = $ReallocAsyncCtx3 + 24 | 0; //@line 407
   HEAP32[$28 >> 2] = $12; //@line 408
   $29 = $ReallocAsyncCtx3 + 28 | 0; //@line 409
   HEAP32[$29 >> 2] = $18; //@line 410
   sp = STACKTOP; //@line 411
   return;
  }
  ___async_unwind = 0; //@line 414
  HEAP32[$ReallocAsyncCtx3 >> 2] = 466; //@line 415
  $23 = $ReallocAsyncCtx3 + 4 | 0; //@line 416
  HEAP32[$23 >> 2] = $2; //@line 417
  $24 = $ReallocAsyncCtx3 + 8 | 0; //@line 418
  HEAP32[$24 >> 2] = $4; //@line 419
  $25 = $ReallocAsyncCtx3 + 12 | 0; //@line 420
  HEAP32[$25 >> 2] = $6; //@line 421
  $26 = $ReallocAsyncCtx3 + 16 | 0; //@line 422
  HEAP32[$26 >> 2] = $8; //@line 423
  $27 = $ReallocAsyncCtx3 + 20 | 0; //@line 424
  HEAP32[$27 >> 2] = $10; //@line 425
  $28 = $ReallocAsyncCtx3 + 24 | 0; //@line 426
  HEAP32[$28 >> 2] = $12; //@line 427
  $29 = $ReallocAsyncCtx3 + 28 | 0; //@line 428
  HEAP32[$29 >> 2] = $18; //@line 429
  sp = STACKTOP; //@line 430
  return;
 }
 $30 = $8 + 12 | 0; //@line 433
 HEAP32[$8 >> 2] = 7; //@line 434
 HEAP32[$8 + 4 >> 2] = 0; //@line 436
 HEAP32[$8 + 8 >> 2] = $2; //@line 438
 HEAP32[$30 >> 2] = 848; //@line 439
 $31 = $2 + 1244 | 0; //@line 440
 if (($31 | 0) == ($8 | 0)) {
  $58 = HEAP32[214] | 0; //@line 444
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(28) | 0; //@line 445
  FUNCTION_TABLE_vi[$58 & 1023]($8); //@line 446
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 469; //@line 449
   $59 = $ReallocAsyncCtx6 + 4 | 0; //@line 450
   HEAP32[$59 >> 2] = $2; //@line 451
   $60 = $ReallocAsyncCtx6 + 8 | 0; //@line 452
   HEAP32[$60 >> 2] = $8; //@line 453
   $61 = $ReallocAsyncCtx6 + 12 | 0; //@line 454
   HEAP32[$61 >> 2] = $4; //@line 455
   $62 = $ReallocAsyncCtx6 + 16 | 0; //@line 456
   HEAP32[$62 >> 2] = $10; //@line 457
   $63 = $ReallocAsyncCtx6 + 20 | 0; //@line 458
   HEAP32[$63 >> 2] = $12; //@line 459
   $64 = $ReallocAsyncCtx6 + 24 | 0; //@line 460
   HEAP32[$64 >> 2] = $18; //@line 461
   sp = STACKTOP; //@line 462
   return;
  }
  ___async_unwind = 0; //@line 465
  HEAP32[$ReallocAsyncCtx6 >> 2] = 469; //@line 466
  $59 = $ReallocAsyncCtx6 + 4 | 0; //@line 467
  HEAP32[$59 >> 2] = $2; //@line 468
  $60 = $ReallocAsyncCtx6 + 8 | 0; //@line 469
  HEAP32[$60 >> 2] = $8; //@line 470
  $61 = $ReallocAsyncCtx6 + 12 | 0; //@line 471
  HEAP32[$61 >> 2] = $4; //@line 472
  $62 = $ReallocAsyncCtx6 + 16 | 0; //@line 473
  HEAP32[$62 >> 2] = $10; //@line 474
  $63 = $ReallocAsyncCtx6 + 20 | 0; //@line 475
  HEAP32[$63 >> 2] = $12; //@line 476
  $64 = $ReallocAsyncCtx6 + 24 | 0; //@line 477
  HEAP32[$64 >> 2] = $18; //@line 478
  sp = STACKTOP; //@line 479
  return;
 }
 $33 = $2 + 1256 | 0; //@line 482
 $34 = HEAP32[$33 >> 2] | 0; //@line 483
 if (!$34) {
  $48 = HEAP32[213] | 0; //@line 487
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(36) | 0; //@line 488
  FUNCTION_TABLE_vii[$48 & 31]($31, $8); //@line 489
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 468; //@line 492
   $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 493
   HEAP32[$49 >> 2] = $8; //@line 494
   $50 = $ReallocAsyncCtx5 + 8 | 0; //@line 495
   HEAP32[$50 >> 2] = $2; //@line 496
   $51 = $ReallocAsyncCtx5 + 12 | 0; //@line 497
   HEAP32[$51 >> 2] = $4; //@line 498
   $52 = $ReallocAsyncCtx5 + 16 | 0; //@line 499
   HEAP32[$52 >> 2] = $10; //@line 500
   $53 = $ReallocAsyncCtx5 + 20 | 0; //@line 501
   HEAP32[$53 >> 2] = $12; //@line 502
   $54 = $ReallocAsyncCtx5 + 24 | 0; //@line 503
   HEAP32[$54 >> 2] = $30; //@line 504
   $55 = $ReallocAsyncCtx5 + 28 | 0; //@line 505
   HEAP32[$55 >> 2] = $33; //@line 506
   $56 = $ReallocAsyncCtx5 + 32 | 0; //@line 507
   HEAP32[$56 >> 2] = $18; //@line 508
   sp = STACKTOP; //@line 509
   return;
  }
  ___async_unwind = 0; //@line 512
  HEAP32[$ReallocAsyncCtx5 >> 2] = 468; //@line 513
  $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 514
  HEAP32[$49 >> 2] = $8; //@line 515
  $50 = $ReallocAsyncCtx5 + 8 | 0; //@line 516
  HEAP32[$50 >> 2] = $2; //@line 517
  $51 = $ReallocAsyncCtx5 + 12 | 0; //@line 518
  HEAP32[$51 >> 2] = $4; //@line 519
  $52 = $ReallocAsyncCtx5 + 16 | 0; //@line 520
  HEAP32[$52 >> 2] = $10; //@line 521
  $53 = $ReallocAsyncCtx5 + 20 | 0; //@line 522
  HEAP32[$53 >> 2] = $12; //@line 523
  $54 = $ReallocAsyncCtx5 + 24 | 0; //@line 524
  HEAP32[$54 >> 2] = $30; //@line 525
  $55 = $ReallocAsyncCtx5 + 28 | 0; //@line 526
  HEAP32[$55 >> 2] = $33; //@line 527
  $56 = $ReallocAsyncCtx5 + 32 | 0; //@line 528
  HEAP32[$56 >> 2] = $18; //@line 529
  sp = STACKTOP; //@line 530
  return;
 } else {
  $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 534
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(40) | 0; //@line 535
  FUNCTION_TABLE_vi[$37 & 1023]($31); //@line 536
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 467; //@line 539
   $38 = $ReallocAsyncCtx4 + 4 | 0; //@line 540
   HEAP32[$38 >> 2] = $31; //@line 541
   $39 = $ReallocAsyncCtx4 + 8 | 0; //@line 542
   HEAP32[$39 >> 2] = $8; //@line 543
   $40 = $ReallocAsyncCtx4 + 12 | 0; //@line 544
   HEAP32[$40 >> 2] = $33; //@line 545
   $41 = $ReallocAsyncCtx4 + 16 | 0; //@line 546
   HEAP32[$41 >> 2] = $2; //@line 547
   $42 = $ReallocAsyncCtx4 + 20 | 0; //@line 548
   HEAP32[$42 >> 2] = $4; //@line 549
   $43 = $ReallocAsyncCtx4 + 24 | 0; //@line 550
   HEAP32[$43 >> 2] = $30; //@line 551
   $44 = $ReallocAsyncCtx4 + 28 | 0; //@line 552
   HEAP32[$44 >> 2] = $10; //@line 553
   $45 = $ReallocAsyncCtx4 + 32 | 0; //@line 554
   HEAP32[$45 >> 2] = $12; //@line 555
   $46 = $ReallocAsyncCtx4 + 36 | 0; //@line 556
   HEAP32[$46 >> 2] = $18; //@line 557
   sp = STACKTOP; //@line 558
   return;
  }
  ___async_unwind = 0; //@line 561
  HEAP32[$ReallocAsyncCtx4 >> 2] = 467; //@line 562
  $38 = $ReallocAsyncCtx4 + 4 | 0; //@line 563
  HEAP32[$38 >> 2] = $31; //@line 564
  $39 = $ReallocAsyncCtx4 + 8 | 0; //@line 565
  HEAP32[$39 >> 2] = $8; //@line 566
  $40 = $ReallocAsyncCtx4 + 12 | 0; //@line 567
  HEAP32[$40 >> 2] = $33; //@line 568
  $41 = $ReallocAsyncCtx4 + 16 | 0; //@line 569
  HEAP32[$41 >> 2] = $2; //@line 570
  $42 = $ReallocAsyncCtx4 + 20 | 0; //@line 571
  HEAP32[$42 >> 2] = $4; //@line 572
  $43 = $ReallocAsyncCtx4 + 24 | 0; //@line 573
  HEAP32[$43 >> 2] = $30; //@line 574
  $44 = $ReallocAsyncCtx4 + 28 | 0; //@line 575
  HEAP32[$44 >> 2] = $10; //@line 576
  $45 = $ReallocAsyncCtx4 + 32 | 0; //@line 577
  HEAP32[$45 >> 2] = $12; //@line 578
  $46 = $ReallocAsyncCtx4 + 36 | 0; //@line 579
  HEAP32[$46 >> 2] = $18; //@line 580
  sp = STACKTOP; //@line 581
  return;
 }
}
function _main() {
 var $$0 = 0, $$1 = 0, $$pr = 0, $$pre$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $14 = 0, $21 = 0, $24 = 0, $30 = 0, $34 = 0, $35 = 0, $38 = 0, $46 = 0, $47 = 0, $56 = 0, $66 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx21 = 0, $AsyncCtx25 = 0, $AsyncCtx28 = 0, $AsyncCtx32 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6688
 STACKTOP = STACKTOP + 48 | 0; //@line 6689
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 6689
 $vararg_buffer = sp; //@line 6690
 $0 = sp + 8 | 0; //@line 6691
 $1 = sp + 24 | 0; //@line 6692
 $AsyncCtx25 = _emscripten_alloc_async_context(24, sp) | 0; //@line 6693
 _puts(14064) | 0; //@line 6694
 if (___async) {
  HEAP32[$AsyncCtx25 >> 2] = 645; //@line 6697
  HEAP32[$AsyncCtx25 + 4 >> 2] = $1; //@line 6699
  HEAP32[$AsyncCtx25 + 8 >> 2] = $vararg_buffer; //@line 6701
  HEAP32[$AsyncCtx25 + 12 >> 2] = $vararg_buffer; //@line 6703
  HEAP32[$AsyncCtx25 + 16 >> 2] = $1; //@line 6705
  HEAP32[$AsyncCtx25 + 20 >> 2] = $0; //@line 6707
  sp = STACKTOP; //@line 6708
  STACKTOP = sp; //@line 6709
  return 0; //@line 6709
 }
 _emscripten_free_async_context($AsyncCtx25 | 0); //@line 6711
 if (__ZN16LoRaWANInterface10initializeEPN6events10EventQueueE(21880, 21680) | 0) {
  $AsyncCtx21 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6715
  _puts(14131) | 0; //@line 6716
  if (___async) {
   HEAP32[$AsyncCtx21 >> 2] = 646; //@line 6719
   sp = STACKTOP; //@line 6720
   STACKTOP = sp; //@line 6721
   return 0; //@line 6721
  }
  _emscripten_free_async_context($AsyncCtx21 | 0); //@line 6723
  $$1 = -1; //@line 6724
  STACKTOP = sp; //@line 6725
  return $$1 | 0; //@line 6725
 }
 $10 = $0 + 4 | 0; //@line 6728
 HEAP32[$10 >> 2] = 0; //@line 6730
 HEAP32[$10 + 4 >> 2] = 0; //@line 6733
 HEAP32[$0 >> 2] = 7; //@line 6734
 $14 = $0 + 12 | 0; //@line 6735
 HEAP32[$14 >> 2] = 10108; //@line 6736
 $AsyncCtx32 = _emscripten_alloc_async_context(28, sp) | 0; //@line 6737
 __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE(21608, $0); //@line 6738
 if (___async) {
  HEAP32[$AsyncCtx32 >> 2] = 647; //@line 6741
  HEAP32[$AsyncCtx32 + 4 >> 2] = $1; //@line 6743
  HEAP32[$AsyncCtx32 + 8 >> 2] = $vararg_buffer; //@line 6745
  HEAP32[$AsyncCtx32 + 12 >> 2] = $vararg_buffer; //@line 6747
  HEAP32[$AsyncCtx32 + 16 >> 2] = $1; //@line 6749
  HEAP32[$AsyncCtx32 + 20 >> 2] = $14; //@line 6751
  HEAP32[$AsyncCtx32 + 24 >> 2] = $0; //@line 6753
  sp = STACKTOP; //@line 6754
  STACKTOP = sp; //@line 6755
  return 0; //@line 6755
 }
 _emscripten_free_async_context($AsyncCtx32 | 0); //@line 6757
 $21 = HEAP32[$14 >> 2] | 0; //@line 6758
 do {
  if ($21 | 0) {
   $24 = HEAP32[$21 + 8 >> 2] | 0; //@line 6763
   $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 6764
   FUNCTION_TABLE_vi[$24 & 1023]($0); //@line 6765
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 648; //@line 6768
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 6770
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 6772
    HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer; //@line 6774
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 6776
    sp = STACKTOP; //@line 6777
    STACKTOP = sp; //@line 6778
    return 0; //@line 6778
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 6780
    break;
   }
  }
 } while (0);
 $30 = $1 + 4 | 0; //@line 6786
 HEAP32[$30 >> 2] = 0; //@line 6788
 HEAP32[$30 + 4 >> 2] = 0; //@line 6791
 HEAP32[$1 >> 2] = 649; //@line 6792
 $34 = $1 + 12 | 0; //@line 6793
 HEAP32[$34 >> 2] = 10128; //@line 6794
 $35 = HEAP32[5475] | 0; //@line 6795
 if (!$35) {
  $46 = 10128; //@line 6798
  label = 18; //@line 6799
 } else {
  $38 = HEAP32[$35 + 8 >> 2] | 0; //@line 6802
  $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 6803
  FUNCTION_TABLE_vi[$38 & 1023](21888); //@line 6804
  if (___async) {
   HEAP32[$AsyncCtx2 >> 2] = 650; //@line 6807
   HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 6809
   HEAP32[$AsyncCtx2 + 8 >> 2] = $vararg_buffer; //@line 6811
   HEAP32[$AsyncCtx2 + 12 >> 2] = $vararg_buffer; //@line 6813
   HEAP32[$AsyncCtx2 + 16 >> 2] = $34; //@line 6815
   HEAP32[$AsyncCtx2 + 20 >> 2] = $1; //@line 6817
   sp = STACKTOP; //@line 6818
   STACKTOP = sp; //@line 6819
   return 0; //@line 6819
  }
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6821
  $$pr = HEAP32[$34 >> 2] | 0; //@line 6822
  if (!$$pr) {
   HEAP32[5475] = 0; //@line 6825
  } else {
   $46 = $$pr; //@line 6827
   label = 18; //@line 6828
  }
 }
 do {
  if ((label | 0) == 18) {
   $47 = HEAP32[$46 + 4 >> 2] | 0; //@line 6834
   $AsyncCtx5 = _emscripten_alloc_async_context(24, sp) | 0; //@line 6835
   FUNCTION_TABLE_vii[$47 & 31](21888, $1); //@line 6836
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 651; //@line 6839
    HEAP32[$AsyncCtx5 + 4 >> 2] = $1; //@line 6841
    HEAP32[$AsyncCtx5 + 8 >> 2] = $vararg_buffer; //@line 6843
    HEAP32[$AsyncCtx5 + 12 >> 2] = $vararg_buffer; //@line 6845
    HEAP32[$AsyncCtx5 + 16 >> 2] = $34; //@line 6847
    HEAP32[$AsyncCtx5 + 20 >> 2] = $1; //@line 6849
    sp = STACKTOP; //@line 6850
    STACKTOP = sp; //@line 6851
    return 0; //@line 6851
   }
   _emscripten_free_async_context($AsyncCtx5 | 0); //@line 6853
   $$pre$i$i = HEAP32[$34 >> 2] | 0; //@line 6854
   HEAP32[5475] = $$pre$i$i; //@line 6855
   if ($$pre$i$i | 0) {
    $56 = HEAP32[$$pre$i$i + 8 >> 2] | 0; //@line 6860
    $AsyncCtx9 = _emscripten_alloc_async_context(20, sp) | 0; //@line 6861
    FUNCTION_TABLE_vi[$56 & 1023]($1); //@line 6862
    if (___async) {
     HEAP32[$AsyncCtx9 >> 2] = 652; //@line 6865
     HEAP32[$AsyncCtx9 + 4 >> 2] = $1; //@line 6867
     HEAP32[$AsyncCtx9 + 8 >> 2] = $1; //@line 6869
     HEAP32[$AsyncCtx9 + 12 >> 2] = $vararg_buffer; //@line 6871
     HEAP32[$AsyncCtx9 + 16 >> 2] = $vararg_buffer; //@line 6873
     sp = STACKTOP; //@line 6874
     STACKTOP = sp; //@line 6875
     return 0; //@line 6875
    } else {
     _emscripten_free_async_context($AsyncCtx9 | 0); //@line 6877
     break;
    }
   }
  }
 } while (0);
 __ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t(21880, 21888) | 0; //@line 6883
 if (__ZN16LoRaWANInterface25disable_adaptive_datarateEv(21880) | 0) {
  $AsyncCtx17 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6887
  _puts(14159) | 0; //@line 6888
  if (___async) {
   HEAP32[$AsyncCtx17 >> 2] = 653; //@line 6891
   sp = STACKTOP; //@line 6892
   STACKTOP = sp; //@line 6893
   return 0; //@line 6893
  }
  _emscripten_free_async_context($AsyncCtx17 | 0); //@line 6895
  $$1 = -1; //@line 6896
  STACKTOP = sp; //@line 6897
  return $$1 | 0; //@line 6897
 }
 __ZN16LoRaWANInterface12set_datarateEh(21880, 5) | 0; //@line 6899
 HEAP8[$1 >> 0] = 1; //@line 6900
 HEAP32[$1 + 8 >> 2] = 637604466; //@line 6902
 HEAP32[$1 + 12 >> 2] = 14193; //@line 6904
 HEAP32[$1 + 16 >> 2] = 14209; //@line 6906
 $66 = __ZN16LoRaWANInterface7connectERK15lorawan_connect(21880, $1) | 0; //@line 6907
 L43 : do {
  switch ($66 | 0) {
  case 0:
  case -1016:
   {
    $AsyncCtx13 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6911
    _puts(14254) | 0; //@line 6912
    if (___async) {
     HEAP32[$AsyncCtx13 >> 2] = 654; //@line 6915
     HEAP32[$AsyncCtx13 + 4 >> 2] = $1; //@line 6917
     sp = STACKTOP; //@line 6918
     STACKTOP = sp; //@line 6919
     return 0; //@line 6919
    }
    _emscripten_free_async_context($AsyncCtx13 | 0); //@line 6921
    $AsyncCtx28 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6922
    __ZN6events10EventQueue8dispatchEi(21680, -1); //@line 6923
    if (___async) {
     HEAP32[$AsyncCtx28 >> 2] = 655; //@line 6926
     HEAP32[$AsyncCtx28 + 4 >> 2] = $1; //@line 6928
     sp = STACKTOP; //@line 6929
     STACKTOP = sp; //@line 6930
     return 0; //@line 6930
    } else {
     _emscripten_free_async_context($AsyncCtx28 | 0); //@line 6932
     $$0 = 0; //@line 6933
     break L43;
    }
    break;
   }
  default:
   {
    HEAP32[$vararg_buffer >> 2] = $66; //@line 6939
    _printf(14225, $vararg_buffer) | 0; //@line 6940
    $$0 = -1; //@line 6941
   }
  }
 } while (0);
 $$1 = $$0; //@line 6945
 STACKTOP = sp; //@line 6946
 return $$1 | 0; //@line 6946
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 $14 = $14 | 0;
 $15 = $15 | 0;
 $16 = $16 | 0;
 $17 = $17 | 0;
 $18 = $18 | 0;
 var $19 = 0, $20 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $47 = 0, $49 = 0, $62 = 0, $64 = 0, $77 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 1149
 HEAP32[$0 >> 2] = 560; //@line 1150
 $19 = $0 + 4 | 0; //@line 1151
 HEAP32[$19 >> 2] = 0; //@line 1152
 HEAP32[$19 + 4 >> 2] = 0; //@line 1152
 HEAP32[$19 + 8 >> 2] = 0; //@line 1152
 HEAP32[$19 + 12 >> 2] = 0; //@line 1152
 HEAP32[$19 + 16 >> 2] = 0; //@line 1152
 HEAP32[$19 + 20 >> 2] = 0; //@line 1152
 _gpio_init_out_ex($19, $4, 1); //@line 1153
 $20 = $0 + 28 | 0; //@line 1154
 HEAP32[$20 >> 2] = 0; //@line 1155
 HEAP32[$20 + 4 >> 2] = 0; //@line 1155
 HEAP32[$20 + 8 >> 2] = 0; //@line 1155
 HEAP32[$20 + 12 >> 2] = 0; //@line 1155
 HEAP32[$20 + 16 >> 2] = 0; //@line 1155
 HEAP32[$20 + 20 >> 2] = 0; //@line 1155
 _gpio_init_in($20, $5); //@line 1156
 __ZN4mbed11InterruptInC2E7PinName($0 + 52 | 0, $6); //@line 1158
 __ZN4mbed11InterruptInC2E7PinName($0 + 124 | 0, $7); //@line 1160
 __ZN4mbed11InterruptInC2E7PinName($0 + 196 | 0, $8); //@line 1162
 __ZN4mbed11InterruptInC2E7PinName($0 + 268 | 0, $9); //@line 1164
 __ZN4mbed11InterruptInC2E7PinName($0 + 340 | 0, $10); //@line 1166
 __ZN4mbed11InterruptInC2E7PinName($0 + 412 | 0, $11); //@line 1168
 $27 = $0 + 484 | 0; //@line 1169
 HEAP32[$27 >> 2] = 0; //@line 1170
 HEAP32[$27 + 4 >> 2] = 0; //@line 1170
 HEAP32[$27 + 8 >> 2] = 0; //@line 1170
 HEAP32[$27 + 12 >> 2] = 0; //@line 1170
 HEAP32[$27 + 16 >> 2] = 0; //@line 1170
 HEAP32[$27 + 20 >> 2] = 0; //@line 1170
 _gpio_init_out_ex($27, $12, 0); //@line 1171
 $28 = $0 + 508 | 0; //@line 1172
 HEAP32[$28 >> 2] = 0; //@line 1173
 HEAP32[$28 + 4 >> 2] = 0; //@line 1173
 HEAP32[$28 + 8 >> 2] = 0; //@line 1173
 HEAP32[$28 + 12 >> 2] = 0; //@line 1173
 HEAP32[$28 + 16 >> 2] = 0; //@line 1173
 HEAP32[$28 + 20 >> 2] = 0; //@line 1173
 _gpio_init_out_ex($28, $13, 0); //@line 1174
 $29 = $0 + 532 | 0; //@line 1175
 HEAP32[$29 >> 2] = 0; //@line 1176
 HEAP32[$29 + 4 >> 2] = 0; //@line 1176
 HEAP32[$29 + 8 >> 2] = 0; //@line 1176
 HEAP32[$29 + 12 >> 2] = 0; //@line 1176
 HEAP32[$29 + 16 >> 2] = 0; //@line 1176
 HEAP32[$29 + 20 >> 2] = 0; //@line 1176
 _gpio_init_out_ex($29, $14, 0); //@line 1177
 $30 = $0 + 556 | 0; //@line 1178
 HEAP32[$30 >> 2] = 0; //@line 1179
 HEAP32[$30 + 4 >> 2] = 0; //@line 1179
 HEAP32[$30 + 8 >> 2] = 0; //@line 1179
 HEAP32[$30 + 12 >> 2] = 0; //@line 1179
 HEAP32[$30 + 16 >> 2] = 0; //@line 1179
 HEAP32[$30 + 20 >> 2] = 0; //@line 1179
 _gpio_init_out_ex($30, $15, 0); //@line 1180
 $31 = $0 + 580 | 0; //@line 1181
 HEAP32[$31 >> 2] = 0; //@line 1182
 HEAP32[$31 + 4 >> 2] = 0; //@line 1182
 HEAP32[$31 + 8 >> 2] = 0; //@line 1182
 HEAP32[$31 + 12 >> 2] = 0; //@line 1182
 HEAP32[$31 + 16 >> 2] = 0; //@line 1182
 HEAP32[$31 + 20 >> 2] = 0; //@line 1182
 _gpio_init_inout($31, $16, 0, 0, 0); //@line 1183
 $32 = $0 + 604 | 0; //@line 1184
 HEAP32[$32 >> 2] = 0; //@line 1185
 HEAP32[$32 + 4 >> 2] = 0; //@line 1185
 HEAP32[$32 + 8 >> 2] = 0; //@line 1185
 HEAP32[$32 + 12 >> 2] = 0; //@line 1185
 HEAP32[$32 + 16 >> 2] = 0; //@line 1185
 HEAP32[$32 + 20 >> 2] = 0; //@line 1185
 _gpio_init_out($32, $17); //@line 1186
 $33 = $0 + 628 | 0; //@line 1187
 HEAP32[$33 >> 2] = 0; //@line 1188
 HEAP32[$33 + 4 >> 2] = 0; //@line 1188
 HEAP32[$33 + 8 >> 2] = 0; //@line 1188
 HEAP32[$33 + 12 >> 2] = 0; //@line 1188
 HEAP32[$33 + 16 >> 2] = 0; //@line 1188
 HEAP32[$33 + 20 >> 2] = 0; //@line 1188
 _gpio_init_out($33, $18); //@line 1189
 $34 = $0 + 1048 | 0; //@line 1190
 $AsyncCtx7 = _emscripten_alloc_async_context(52, sp) | 0; //@line 1191
 __ZN4mbed10TimerEventC2Ev($34); //@line 1192
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 74; //@line 1195
  HEAP32[$AsyncCtx7 + 4 >> 2] = $34; //@line 1197
  HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 1199
  HEAP32[$AsyncCtx7 + 12 >> 2] = $16; //@line 1201
  HEAP32[$AsyncCtx7 + 16 >> 2] = $17; //@line 1203
  HEAP32[$AsyncCtx7 + 20 >> 2] = $12; //@line 1205
  HEAP32[$AsyncCtx7 + 24 >> 2] = $13; //@line 1207
  HEAP32[$AsyncCtx7 + 28 >> 2] = $15; //@line 1209
  HEAP32[$AsyncCtx7 + 32 >> 2] = $14; //@line 1211
  HEAP32[$AsyncCtx7 + 36 >> 2] = $18; //@line 1213
  HEAP32[$AsyncCtx7 + 40 >> 2] = $10; //@line 1215
  HEAP32[$AsyncCtx7 + 44 >> 2] = $11; //@line 1217
  HEAP32[$AsyncCtx7 + 48 >> 2] = $33; //@line 1219
  sp = STACKTOP; //@line 1220
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 1223
 $47 = $0 + 1088 | 0; //@line 1224
 HEAP32[$47 >> 2] = 0; //@line 1225
 HEAP32[$47 + 4 >> 2] = 0; //@line 1225
 HEAP32[$47 + 8 >> 2] = 0; //@line 1225
 HEAP32[$47 + 12 >> 2] = 0; //@line 1225
 HEAP8[$0 + 1104 >> 0] = 1; //@line 1227
 HEAP32[$34 >> 2] = 672; //@line 1228
 $49 = $0 + 1112 | 0; //@line 1229
 $AsyncCtx3 = _emscripten_alloc_async_context(52, sp) | 0; //@line 1230
 __ZN4mbed10TimerEventC2Ev($49); //@line 1231
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 75; //@line 1234
  HEAP32[$AsyncCtx3 + 4 >> 2] = $49; //@line 1236
  HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 1238
  HEAP32[$AsyncCtx3 + 12 >> 2] = $16; //@line 1240
  HEAP32[$AsyncCtx3 + 16 >> 2] = $17; //@line 1242
  HEAP32[$AsyncCtx3 + 20 >> 2] = $12; //@line 1244
  HEAP32[$AsyncCtx3 + 24 >> 2] = $13; //@line 1246
  HEAP32[$AsyncCtx3 + 28 >> 2] = $15; //@line 1248
  HEAP32[$AsyncCtx3 + 32 >> 2] = $14; //@line 1250
  HEAP32[$AsyncCtx3 + 36 >> 2] = $18; //@line 1252
  HEAP32[$AsyncCtx3 + 40 >> 2] = $10; //@line 1254
  HEAP32[$AsyncCtx3 + 44 >> 2] = $11; //@line 1256
  HEAP32[$AsyncCtx3 + 48 >> 2] = $33; //@line 1258
  sp = STACKTOP; //@line 1259
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 1262
 $62 = $0 + 1152 | 0; //@line 1263
 HEAP32[$62 >> 2] = 0; //@line 1264
 HEAP32[$62 + 4 >> 2] = 0; //@line 1264
 HEAP32[$62 + 8 >> 2] = 0; //@line 1264
 HEAP32[$62 + 12 >> 2] = 0; //@line 1264
 HEAP8[$0 + 1168 >> 0] = 1; //@line 1266
 HEAP32[$49 >> 2] = 672; //@line 1267
 $64 = $0 + 1176 | 0; //@line 1268
 $AsyncCtx = _emscripten_alloc_async_context(52, sp) | 0; //@line 1269
 __ZN4mbed10TimerEventC2Ev($64); //@line 1270
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 76; //@line 1273
  HEAP32[$AsyncCtx + 4 >> 2] = $64; //@line 1275
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 1277
  HEAP32[$AsyncCtx + 12 >> 2] = $16; //@line 1279
  HEAP32[$AsyncCtx + 16 >> 2] = $17; //@line 1281
  HEAP32[$AsyncCtx + 20 >> 2] = $12; //@line 1283
  HEAP32[$AsyncCtx + 24 >> 2] = $13; //@line 1285
  HEAP32[$AsyncCtx + 28 >> 2] = $15; //@line 1287
  HEAP32[$AsyncCtx + 32 >> 2] = $14; //@line 1289
  HEAP32[$AsyncCtx + 36 >> 2] = $18; //@line 1291
  HEAP32[$AsyncCtx + 40 >> 2] = $10; //@line 1293
  HEAP32[$AsyncCtx + 44 >> 2] = $11; //@line 1295
  HEAP32[$AsyncCtx + 48 >> 2] = $33; //@line 1297
  sp = STACKTOP; //@line 1298
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 1301
 $77 = $0 + 1216 | 0; //@line 1302
 HEAP32[$77 >> 2] = 0; //@line 1303
 HEAP32[$77 + 4 >> 2] = 0; //@line 1303
 HEAP32[$77 + 8 >> 2] = 0; //@line 1303
 HEAP32[$77 + 12 >> 2] = 0; //@line 1303
 HEAP8[$0 + 1232 >> 0] = 1; //@line 1305
 HEAP32[$64 >> 2] = 672; //@line 1306
 HEAP32[$0 + 668 >> 2] = $16; //@line 1308
 HEAP32[$0 + 672 >> 2] = $17; //@line 1310
 HEAP32[$0 + 652 >> 2] = $12; //@line 1312
 HEAP32[$0 + 656 >> 2] = $13; //@line 1314
 HEAP32[$0 + 664 >> 2] = $15; //@line 1316
 HEAP32[$0 + 660 >> 2] = $14; //@line 1318
 HEAP32[$0 + 676 >> 2] = $18; //@line 1320
 HEAP32[$0 + 680 >> 2] = $10; //@line 1322
 HEAP32[$0 + 684 >> 2] = $11; //@line 1324
 HEAP32[$0 + 784 >> 2] = 0; //@line 1326
 if (($18 | 0) == -1) {
  return;
 }
 _emscripten_asm_const_iii(2, HEAP32[$33 >> 2] | 0, 1) | 0; //@line 1332
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb($0) {
 $0 = $0 | 0;
 var $$pre$i = 0, $10 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $29 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $50 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $60 = 0, $61 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 13271
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13275
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13277
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 13279
 $10 = HEAP8[$0 + 17 >> 0] | 0; //@line 13281
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 13283
 $$pre$i = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 13284
 $13 = $4 + 12 | 0; //@line 13285
 HEAP32[$13 >> 2] = $$pre$i; //@line 13286
 if ($$pre$i | 0) {
  $16 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 13291
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 13292
  FUNCTION_TABLE_vii[$16 & 31]($6, $4); //@line 13293
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 201; //@line 13296
   $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 13297
   HEAP32[$17 >> 2] = $6; //@line 13298
   $18 = $ReallocAsyncCtx2 + 8 | 0; //@line 13299
   HEAP32[$18 >> 2] = $4; //@line 13300
   $19 = $ReallocAsyncCtx2 + 12 | 0; //@line 13301
   HEAP32[$19 >> 2] = $13; //@line 13302
   $20 = $ReallocAsyncCtx2 + 16 | 0; //@line 13303
   HEAP8[$20 >> 0] = $8; //@line 13304
   $21 = $ReallocAsyncCtx2 + 17 | 0; //@line 13305
   HEAP8[$21 >> 0] = $10; //@line 13306
   $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 13307
   HEAP32[$22 >> 2] = $12; //@line 13308
   $23 = $ReallocAsyncCtx2 + 24 | 0; //@line 13309
   HEAP32[$23 >> 2] = $13; //@line 13310
   sp = STACKTOP; //@line 13311
   return;
  }
  ___async_unwind = 0; //@line 13314
  HEAP32[$ReallocAsyncCtx2 >> 2] = 201; //@line 13315
  $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 13316
  HEAP32[$17 >> 2] = $6; //@line 13317
  $18 = $ReallocAsyncCtx2 + 8 | 0; //@line 13318
  HEAP32[$18 >> 2] = $4; //@line 13319
  $19 = $ReallocAsyncCtx2 + 12 | 0; //@line 13320
  HEAP32[$19 >> 2] = $13; //@line 13321
  $20 = $ReallocAsyncCtx2 + 16 | 0; //@line 13322
  HEAP8[$20 >> 0] = $8; //@line 13323
  $21 = $ReallocAsyncCtx2 + 17 | 0; //@line 13324
  HEAP8[$21 >> 0] = $10; //@line 13325
  $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 13326
  HEAP32[$22 >> 2] = $12; //@line 13327
  $23 = $ReallocAsyncCtx2 + 24 | 0; //@line 13328
  HEAP32[$23 >> 2] = $13; //@line 13329
  sp = STACKTOP; //@line 13330
  return;
 }
 $24 = $6 + 12 | 0; //@line 13333
 HEAP32[$24 >> 2] = 0; //@line 13334
 $25 = $6 + 16 | 0; //@line 13335
 HEAP8[$25 >> 0] = $8; //@line 13336
 HEAP8[$6 + 17 >> 0] = $10; //@line 13338
 $27 = _equeue_alloc($12, 20) | 0; //@line 13339
 if ($27 | 0) {
  $29 = HEAP32[$24 >> 2] | 0; //@line 13342
  if (!$29) {
   HEAP32[$27 + 12 >> 2] = 0; //@line 13346
   HEAP16[$27 + 16 >> 1] = HEAP16[$25 >> 1] | 0; //@line 13349
   _equeue_event_dtor($27, 203); //@line 13350
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 13351
   $44 = _equeue_post($12, 204, $27) | 0; //@line 13352
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 205; //@line 13355
    $45 = $ReallocAsyncCtx6 + 4 | 0; //@line 13356
    HEAP32[$45 >> 2] = $24; //@line 13357
    $46 = $ReallocAsyncCtx6 + 8 | 0; //@line 13358
    HEAP32[$46 >> 2] = $13; //@line 13359
    $47 = $ReallocAsyncCtx6 + 12 | 0; //@line 13360
    HEAP32[$47 >> 2] = $6; //@line 13361
    $48 = $ReallocAsyncCtx6 + 16 | 0; //@line 13362
    HEAP32[$48 >> 2] = $4; //@line 13363
    sp = STACKTOP; //@line 13364
    return;
   }
   HEAP32[___async_retval >> 2] = $44; //@line 13368
   ___async_unwind = 0; //@line 13369
   HEAP32[$ReallocAsyncCtx6 >> 2] = 205; //@line 13370
   $45 = $ReallocAsyncCtx6 + 4 | 0; //@line 13371
   HEAP32[$45 >> 2] = $24; //@line 13372
   $46 = $ReallocAsyncCtx6 + 8 | 0; //@line 13373
   HEAP32[$46 >> 2] = $13; //@line 13374
   $47 = $ReallocAsyncCtx6 + 12 | 0; //@line 13375
   HEAP32[$47 >> 2] = $6; //@line 13376
   $48 = $ReallocAsyncCtx6 + 16 | 0; //@line 13377
   HEAP32[$48 >> 2] = $4; //@line 13378
   sp = STACKTOP; //@line 13379
   return;
  } else {
   $32 = HEAP32[$29 + 4 >> 2] | 0; //@line 13383
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 13384
   FUNCTION_TABLE_vii[$32 & 31]($27, $6); //@line 13385
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 202; //@line 13388
    $33 = $ReallocAsyncCtx3 + 4 | 0; //@line 13389
    HEAP32[$33 >> 2] = $24; //@line 13390
    $34 = $ReallocAsyncCtx3 + 8 | 0; //@line 13391
    HEAP32[$34 >> 2] = $27; //@line 13392
    $35 = $ReallocAsyncCtx3 + 12 | 0; //@line 13393
    HEAP32[$35 >> 2] = $25; //@line 13394
    $36 = $ReallocAsyncCtx3 + 16 | 0; //@line 13395
    HEAP32[$36 >> 2] = $12; //@line 13396
    $37 = $ReallocAsyncCtx3 + 20 | 0; //@line 13397
    HEAP32[$37 >> 2] = $24; //@line 13398
    $38 = $ReallocAsyncCtx3 + 24 | 0; //@line 13399
    HEAP32[$38 >> 2] = $13; //@line 13400
    $39 = $ReallocAsyncCtx3 + 28 | 0; //@line 13401
    HEAP32[$39 >> 2] = $6; //@line 13402
    $40 = $ReallocAsyncCtx3 + 32 | 0; //@line 13403
    HEAP32[$40 >> 2] = $4; //@line 13404
    sp = STACKTOP; //@line 13405
    return;
   }
   ___async_unwind = 0; //@line 13408
   HEAP32[$ReallocAsyncCtx3 >> 2] = 202; //@line 13409
   $33 = $ReallocAsyncCtx3 + 4 | 0; //@line 13410
   HEAP32[$33 >> 2] = $24; //@line 13411
   $34 = $ReallocAsyncCtx3 + 8 | 0; //@line 13412
   HEAP32[$34 >> 2] = $27; //@line 13413
   $35 = $ReallocAsyncCtx3 + 12 | 0; //@line 13414
   HEAP32[$35 >> 2] = $25; //@line 13415
   $36 = $ReallocAsyncCtx3 + 16 | 0; //@line 13416
   HEAP32[$36 >> 2] = $12; //@line 13417
   $37 = $ReallocAsyncCtx3 + 20 | 0; //@line 13418
   HEAP32[$37 >> 2] = $24; //@line 13419
   $38 = $ReallocAsyncCtx3 + 24 | 0; //@line 13420
   HEAP32[$38 >> 2] = $13; //@line 13421
   $39 = $ReallocAsyncCtx3 + 28 | 0; //@line 13422
   HEAP32[$39 >> 2] = $6; //@line 13423
   $40 = $ReallocAsyncCtx3 + 32 | 0; //@line 13424
   HEAP32[$40 >> 2] = $4; //@line 13425
   sp = STACKTOP; //@line 13426
   return;
  }
 }
 $50 = HEAP32[$24 >> 2] | 0; //@line 13430
 if ($50 | 0) {
  $53 = HEAP32[$50 + 8 >> 2] | 0; //@line 13434
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 13435
  FUNCTION_TABLE_vi[$53 & 1023]($6); //@line 13436
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 206; //@line 13439
   $54 = $ReallocAsyncCtx4 + 4 | 0; //@line 13440
   HEAP32[$54 >> 2] = $13; //@line 13441
   $55 = $ReallocAsyncCtx4 + 8 | 0; //@line 13442
   HEAP32[$55 >> 2] = 0; //@line 13443
   $56 = $ReallocAsyncCtx4 + 12 | 0; //@line 13444
   HEAP32[$56 >> 2] = $4; //@line 13445
   sp = STACKTOP; //@line 13446
   return;
  }
  ___async_unwind = 0; //@line 13449
  HEAP32[$ReallocAsyncCtx4 >> 2] = 206; //@line 13450
  $54 = $ReallocAsyncCtx4 + 4 | 0; //@line 13451
  HEAP32[$54 >> 2] = $13; //@line 13452
  $55 = $ReallocAsyncCtx4 + 8 | 0; //@line 13453
  HEAP32[$55 >> 2] = 0; //@line 13454
  $56 = $ReallocAsyncCtx4 + 12 | 0; //@line 13455
  HEAP32[$56 >> 2] = $4; //@line 13456
  sp = STACKTOP; //@line 13457
  return;
 }
 $57 = HEAP32[$13 >> 2] | 0; //@line 13460
 if (!$57) {
  HEAP32[___async_retval >> 2] = 0; //@line 13464
  return;
 }
 $60 = HEAP32[$57 + 8 >> 2] | 0; //@line 13468
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 13469
 FUNCTION_TABLE_vi[$60 & 1023]($4); //@line 13470
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 207; //@line 13473
  $61 = $ReallocAsyncCtx5 + 4 | 0; //@line 13474
  HEAP32[$61 >> 2] = 0; //@line 13475
  sp = STACKTOP; //@line 13476
  return;
 }
 ___async_unwind = 0; //@line 13479
 HEAP32[$ReallocAsyncCtx5 >> 2] = 207; //@line 13480
 $61 = $ReallocAsyncCtx5 + 4 | 0; //@line 13481
 HEAP32[$61 >> 2] = 0; //@line 13482
 sp = STACKTOP; //@line 13483
 return;
}
function __ZN7LoRaPHY13apply_cf_listEP15cflist_params_t__async_cb_438($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $42 = 0, $48 = 0, $54 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 32655
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32657
 $8 = HEAP32[$0 + 12 >> 2] | 0; //@line 32663
 $10 = HEAP32[$0 + 16 >> 2] | 0; //@line 32665
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 32667
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 32669
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 32671
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 32673
 $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 32675
 $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 32677
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 32679
 $26 = HEAP32[$0 + 48 >> 2] | 0; //@line 32681
 $28 = HEAP32[$0 + 52 >> 2] | 0; //@line 32683
 $34 = HEAP8[$2 >> 0] | 0; //@line 32684
 $39 = ($34 & 255) + (HEAPU8[$0 + 8 >> 0] | 0) & 255; //@line 32688
 $30 = (HEAP8[$0 + 9 >> 0] | 0) + 1 << 24 >> 24; //@line 32689
 if (($30 & 255) >= (HEAPU8[$8 >> 0] | 0)) {
  return;
 }
 if ((($34 & 255) + (HEAPU8[$10 >> 0] | 0) | 0) >>> 0 > ($30 & 255) >>> 0) {
  $37 = HEAP32[$14 >> 2] | 0; //@line 32702
  $38 = $39 & 255; //@line 32703
  $42 = HEAPU8[$37 + $38 >> 0] | 0; //@line 32706
  HEAP32[$16 >> 2] = $42; //@line 32707
  $48 = (HEAPU8[$37 + ($38 + 1) >> 0] | 0) << 8 | $42; //@line 32713
  HEAP32[$16 >> 2] = $48; //@line 32714
  $54 = (HEAPU8[$37 + ($38 + 2) >> 0] | 0) << 16 | $48; //@line 32720
  HEAP32[$16 >> 2] = $54 * 100; //@line 32722
  HEAP32[$18 >> 2] = 0; //@line 32723
  if ($54 | 0) {
   $59 = HEAP32[(HEAP32[$26 >> 2] | 0) + 60 >> 2] | 0; //@line 32728
   $ReallocAsyncCtx = _emscripten_realloc_async_context(56) | 0; //@line 32729
   FUNCTION_TABLE_iiii[$59 & 15]($24, $28, $30) | 0; //@line 32730
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 512; //@line 32733
    $60 = $ReallocAsyncCtx + 4 | 0; //@line 32734
    HEAP32[$60 >> 2] = $2; //@line 32735
    $61 = $ReallocAsyncCtx + 8 | 0; //@line 32736
    HEAP8[$61 >> 0] = $39; //@line 32737
    $62 = $ReallocAsyncCtx + 9 | 0; //@line 32738
    HEAP8[$62 >> 0] = $30; //@line 32739
    $63 = $ReallocAsyncCtx + 12 | 0; //@line 32740
    HEAP32[$63 >> 2] = $8; //@line 32741
    $64 = $ReallocAsyncCtx + 16 | 0; //@line 32742
    HEAP32[$64 >> 2] = $10; //@line 32743
    $65 = $ReallocAsyncCtx + 20 | 0; //@line 32744
    HEAP32[$65 >> 2] = $12; //@line 32745
    $66 = $ReallocAsyncCtx + 24 | 0; //@line 32746
    HEAP32[$66 >> 2] = $14; //@line 32747
    $67 = $ReallocAsyncCtx + 28 | 0; //@line 32748
    HEAP32[$67 >> 2] = $16; //@line 32749
    $68 = $ReallocAsyncCtx + 32 | 0; //@line 32750
    HEAP32[$68 >> 2] = $18; //@line 32751
    $69 = $ReallocAsyncCtx + 36 | 0; //@line 32752
    HEAP32[$69 >> 2] = $20; //@line 32753
    $70 = $ReallocAsyncCtx + 40 | 0; //@line 32754
    HEAP32[$70 >> 2] = $22; //@line 32755
    $71 = $ReallocAsyncCtx + 44 | 0; //@line 32756
    HEAP32[$71 >> 2] = $24; //@line 32757
    $72 = $ReallocAsyncCtx + 48 | 0; //@line 32758
    HEAP32[$72 >> 2] = $26; //@line 32759
    $73 = $ReallocAsyncCtx + 52 | 0; //@line 32760
    HEAP32[$73 >> 2] = $28; //@line 32761
    sp = STACKTOP; //@line 32762
    return;
   }
   ___async_unwind = 0; //@line 32765
   HEAP32[$ReallocAsyncCtx >> 2] = 512; //@line 32766
   $60 = $ReallocAsyncCtx + 4 | 0; //@line 32767
   HEAP32[$60 >> 2] = $2; //@line 32768
   $61 = $ReallocAsyncCtx + 8 | 0; //@line 32769
   HEAP8[$61 >> 0] = $39; //@line 32770
   $62 = $ReallocAsyncCtx + 9 | 0; //@line 32771
   HEAP8[$62 >> 0] = $30; //@line 32772
   $63 = $ReallocAsyncCtx + 12 | 0; //@line 32773
   HEAP32[$63 >> 2] = $8; //@line 32774
   $64 = $ReallocAsyncCtx + 16 | 0; //@line 32775
   HEAP32[$64 >> 2] = $10; //@line 32776
   $65 = $ReallocAsyncCtx + 20 | 0; //@line 32777
   HEAP32[$65 >> 2] = $12; //@line 32778
   $66 = $ReallocAsyncCtx + 24 | 0; //@line 32779
   HEAP32[$66 >> 2] = $14; //@line 32780
   $67 = $ReallocAsyncCtx + 28 | 0; //@line 32781
   HEAP32[$67 >> 2] = $16; //@line 32782
   $68 = $ReallocAsyncCtx + 32 | 0; //@line 32783
   HEAP32[$68 >> 2] = $18; //@line 32784
   $69 = $ReallocAsyncCtx + 36 | 0; //@line 32785
   HEAP32[$69 >> 2] = $20; //@line 32786
   $70 = $ReallocAsyncCtx + 40 | 0; //@line 32787
   HEAP32[$70 >> 2] = $22; //@line 32788
   $71 = $ReallocAsyncCtx + 44 | 0; //@line 32789
   HEAP32[$71 >> 2] = $24; //@line 32790
   $72 = $ReallocAsyncCtx + 48 | 0; //@line 32791
   HEAP32[$72 >> 2] = $26; //@line 32792
   $73 = $ReallocAsyncCtx + 52 | 0; //@line 32793
   HEAP32[$73 >> 2] = $28; //@line 32794
   sp = STACKTOP; //@line 32795
   return;
  }
 } else {
  HEAP32[$16 >> 2] = 0; //@line 32799
  HEAP8[$20 >> 0] = 0; //@line 32800
  HEAP32[$18 >> 2] = 0; //@line 32801
 }
 $76 = HEAP32[(HEAP32[$22 >> 2] | 0) + 64 >> 2] | 0; //@line 32805
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(56) | 0; //@line 32806
 FUNCTION_TABLE_iii[$76 & 31]($24, $30) | 0; //@line 32807
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 513; //@line 32810
  $77 = $ReallocAsyncCtx2 + 4 | 0; //@line 32811
  HEAP32[$77 >> 2] = $2; //@line 32812
  $78 = $ReallocAsyncCtx2 + 8 | 0; //@line 32813
  HEAP8[$78 >> 0] = $39; //@line 32814
  $79 = $ReallocAsyncCtx2 + 9 | 0; //@line 32815
  HEAP8[$79 >> 0] = $30; //@line 32816
  $80 = $ReallocAsyncCtx2 + 12 | 0; //@line 32817
  HEAP32[$80 >> 2] = $8; //@line 32818
  $81 = $ReallocAsyncCtx2 + 16 | 0; //@line 32819
  HEAP32[$81 >> 2] = $10; //@line 32820
  $82 = $ReallocAsyncCtx2 + 20 | 0; //@line 32821
  HEAP32[$82 >> 2] = $12; //@line 32822
  $83 = $ReallocAsyncCtx2 + 24 | 0; //@line 32823
  HEAP32[$83 >> 2] = $14; //@line 32824
  $84 = $ReallocAsyncCtx2 + 28 | 0; //@line 32825
  HEAP32[$84 >> 2] = $16; //@line 32826
  $85 = $ReallocAsyncCtx2 + 32 | 0; //@line 32827
  HEAP32[$85 >> 2] = $18; //@line 32828
  $86 = $ReallocAsyncCtx2 + 36 | 0; //@line 32829
  HEAP32[$86 >> 2] = $20; //@line 32830
  $87 = $ReallocAsyncCtx2 + 40 | 0; //@line 32831
  HEAP32[$87 >> 2] = $22; //@line 32832
  $88 = $ReallocAsyncCtx2 + 44 | 0; //@line 32833
  HEAP32[$88 >> 2] = $24; //@line 32834
  $89 = $ReallocAsyncCtx2 + 48 | 0; //@line 32835
  HEAP32[$89 >> 2] = $26; //@line 32836
  $90 = $ReallocAsyncCtx2 + 52 | 0; //@line 32837
  HEAP32[$90 >> 2] = $28; //@line 32838
  sp = STACKTOP; //@line 32839
  return;
 }
 ___async_unwind = 0; //@line 32842
 HEAP32[$ReallocAsyncCtx2 >> 2] = 513; //@line 32843
 $77 = $ReallocAsyncCtx2 + 4 | 0; //@line 32844
 HEAP32[$77 >> 2] = $2; //@line 32845
 $78 = $ReallocAsyncCtx2 + 8 | 0; //@line 32846
 HEAP8[$78 >> 0] = $39; //@line 32847
 $79 = $ReallocAsyncCtx2 + 9 | 0; //@line 32848
 HEAP8[$79 >> 0] = $30; //@line 32849
 $80 = $ReallocAsyncCtx2 + 12 | 0; //@line 32850
 HEAP32[$80 >> 2] = $8; //@line 32851
 $81 = $ReallocAsyncCtx2 + 16 | 0; //@line 32852
 HEAP32[$81 >> 2] = $10; //@line 32853
 $82 = $ReallocAsyncCtx2 + 20 | 0; //@line 32854
 HEAP32[$82 >> 2] = $12; //@line 32855
 $83 = $ReallocAsyncCtx2 + 24 | 0; //@line 32856
 HEAP32[$83 >> 2] = $14; //@line 32857
 $84 = $ReallocAsyncCtx2 + 28 | 0; //@line 32858
 HEAP32[$84 >> 2] = $16; //@line 32859
 $85 = $ReallocAsyncCtx2 + 32 | 0; //@line 32860
 HEAP32[$85 >> 2] = $18; //@line 32861
 $86 = $ReallocAsyncCtx2 + 36 | 0; //@line 32862
 HEAP32[$86 >> 2] = $20; //@line 32863
 $87 = $ReallocAsyncCtx2 + 40 | 0; //@line 32864
 HEAP32[$87 >> 2] = $22; //@line 32865
 $88 = $ReallocAsyncCtx2 + 44 | 0; //@line 32866
 HEAP32[$88 >> 2] = $24; //@line 32867
 $89 = $ReallocAsyncCtx2 + 48 | 0; //@line 32868
 HEAP32[$89 >> 2] = $26; //@line 32869
 $90 = $ReallocAsyncCtx2 + 52 | 0; //@line 32870
 HEAP32[$90 >> 2] = $28; //@line 32871
 sp = STACKTOP; //@line 32872
 return;
}
function __ZN7LoRaPHY13apply_cf_listEP15cflist_params_t__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $42 = 0, $48 = 0, $54 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 32427
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32429
 $8 = HEAP32[$0 + 12 >> 2] | 0; //@line 32435
 $10 = HEAP32[$0 + 16 >> 2] | 0; //@line 32437
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 32439
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 32441
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 32443
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 32445
 $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 32447
 $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 32449
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 32451
 $26 = HEAP32[$0 + 48 >> 2] | 0; //@line 32453
 $28 = HEAP32[$0 + 52 >> 2] | 0; //@line 32455
 $34 = HEAP8[$2 >> 0] | 0; //@line 32456
 $39 = ($34 & 255) + (HEAPU8[$0 + 8 >> 0] | 0) & 255; //@line 32460
 $30 = (HEAP8[$0 + 9 >> 0] | 0) + 1 << 24 >> 24; //@line 32461
 if (($30 & 255) >= (HEAPU8[$8 >> 0] | 0)) {
  return;
 }
 if ((($34 & 255) + (HEAPU8[$10 >> 0] | 0) | 0) >>> 0 > ($30 & 255) >>> 0) {
  $37 = HEAP32[$14 >> 2] | 0; //@line 32474
  $38 = $39 & 255; //@line 32475
  $42 = HEAPU8[$37 + $38 >> 0] | 0; //@line 32478
  HEAP32[$16 >> 2] = $42; //@line 32479
  $48 = (HEAPU8[$37 + ($38 + 1) >> 0] | 0) << 8 | $42; //@line 32485
  HEAP32[$16 >> 2] = $48; //@line 32486
  $54 = (HEAPU8[$37 + ($38 + 2) >> 0] | 0) << 16 | $48; //@line 32492
  HEAP32[$16 >> 2] = $54 * 100; //@line 32494
  HEAP32[$18 >> 2] = 0; //@line 32495
  if ($54 | 0) {
   $59 = HEAP32[(HEAP32[$26 >> 2] | 0) + 60 >> 2] | 0; //@line 32500
   $ReallocAsyncCtx = _emscripten_realloc_async_context(56) | 0; //@line 32501
   FUNCTION_TABLE_iiii[$59 & 15]($24, $28, $30) | 0; //@line 32502
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 512; //@line 32505
    $60 = $ReallocAsyncCtx + 4 | 0; //@line 32506
    HEAP32[$60 >> 2] = $2; //@line 32507
    $61 = $ReallocAsyncCtx + 8 | 0; //@line 32508
    HEAP8[$61 >> 0] = $39; //@line 32509
    $62 = $ReallocAsyncCtx + 9 | 0; //@line 32510
    HEAP8[$62 >> 0] = $30; //@line 32511
    $63 = $ReallocAsyncCtx + 12 | 0; //@line 32512
    HEAP32[$63 >> 2] = $8; //@line 32513
    $64 = $ReallocAsyncCtx + 16 | 0; //@line 32514
    HEAP32[$64 >> 2] = $10; //@line 32515
    $65 = $ReallocAsyncCtx + 20 | 0; //@line 32516
    HEAP32[$65 >> 2] = $12; //@line 32517
    $66 = $ReallocAsyncCtx + 24 | 0; //@line 32518
    HEAP32[$66 >> 2] = $14; //@line 32519
    $67 = $ReallocAsyncCtx + 28 | 0; //@line 32520
    HEAP32[$67 >> 2] = $16; //@line 32521
    $68 = $ReallocAsyncCtx + 32 | 0; //@line 32522
    HEAP32[$68 >> 2] = $18; //@line 32523
    $69 = $ReallocAsyncCtx + 36 | 0; //@line 32524
    HEAP32[$69 >> 2] = $20; //@line 32525
    $70 = $ReallocAsyncCtx + 40 | 0; //@line 32526
    HEAP32[$70 >> 2] = $22; //@line 32527
    $71 = $ReallocAsyncCtx + 44 | 0; //@line 32528
    HEAP32[$71 >> 2] = $24; //@line 32529
    $72 = $ReallocAsyncCtx + 48 | 0; //@line 32530
    HEAP32[$72 >> 2] = $26; //@line 32531
    $73 = $ReallocAsyncCtx + 52 | 0; //@line 32532
    HEAP32[$73 >> 2] = $28; //@line 32533
    sp = STACKTOP; //@line 32534
    return;
   }
   ___async_unwind = 0; //@line 32537
   HEAP32[$ReallocAsyncCtx >> 2] = 512; //@line 32538
   $60 = $ReallocAsyncCtx + 4 | 0; //@line 32539
   HEAP32[$60 >> 2] = $2; //@line 32540
   $61 = $ReallocAsyncCtx + 8 | 0; //@line 32541
   HEAP8[$61 >> 0] = $39; //@line 32542
   $62 = $ReallocAsyncCtx + 9 | 0; //@line 32543
   HEAP8[$62 >> 0] = $30; //@line 32544
   $63 = $ReallocAsyncCtx + 12 | 0; //@line 32545
   HEAP32[$63 >> 2] = $8; //@line 32546
   $64 = $ReallocAsyncCtx + 16 | 0; //@line 32547
   HEAP32[$64 >> 2] = $10; //@line 32548
   $65 = $ReallocAsyncCtx + 20 | 0; //@line 32549
   HEAP32[$65 >> 2] = $12; //@line 32550
   $66 = $ReallocAsyncCtx + 24 | 0; //@line 32551
   HEAP32[$66 >> 2] = $14; //@line 32552
   $67 = $ReallocAsyncCtx + 28 | 0; //@line 32553
   HEAP32[$67 >> 2] = $16; //@line 32554
   $68 = $ReallocAsyncCtx + 32 | 0; //@line 32555
   HEAP32[$68 >> 2] = $18; //@line 32556
   $69 = $ReallocAsyncCtx + 36 | 0; //@line 32557
   HEAP32[$69 >> 2] = $20; //@line 32558
   $70 = $ReallocAsyncCtx + 40 | 0; //@line 32559
   HEAP32[$70 >> 2] = $22; //@line 32560
   $71 = $ReallocAsyncCtx + 44 | 0; //@line 32561
   HEAP32[$71 >> 2] = $24; //@line 32562
   $72 = $ReallocAsyncCtx + 48 | 0; //@line 32563
   HEAP32[$72 >> 2] = $26; //@line 32564
   $73 = $ReallocAsyncCtx + 52 | 0; //@line 32565
   HEAP32[$73 >> 2] = $28; //@line 32566
   sp = STACKTOP; //@line 32567
   return;
  }
 } else {
  HEAP32[$16 >> 2] = 0; //@line 32571
  HEAP8[$20 >> 0] = 0; //@line 32572
  HEAP32[$18 >> 2] = 0; //@line 32573
 }
 $76 = HEAP32[(HEAP32[$22 >> 2] | 0) + 64 >> 2] | 0; //@line 32577
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(56) | 0; //@line 32578
 FUNCTION_TABLE_iii[$76 & 31]($24, $30) | 0; //@line 32579
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 513; //@line 32582
  $77 = $ReallocAsyncCtx2 + 4 | 0; //@line 32583
  HEAP32[$77 >> 2] = $2; //@line 32584
  $78 = $ReallocAsyncCtx2 + 8 | 0; //@line 32585
  HEAP8[$78 >> 0] = $39; //@line 32586
  $79 = $ReallocAsyncCtx2 + 9 | 0; //@line 32587
  HEAP8[$79 >> 0] = $30; //@line 32588
  $80 = $ReallocAsyncCtx2 + 12 | 0; //@line 32589
  HEAP32[$80 >> 2] = $8; //@line 32590
  $81 = $ReallocAsyncCtx2 + 16 | 0; //@line 32591
  HEAP32[$81 >> 2] = $10; //@line 32592
  $82 = $ReallocAsyncCtx2 + 20 | 0; //@line 32593
  HEAP32[$82 >> 2] = $12; //@line 32594
  $83 = $ReallocAsyncCtx2 + 24 | 0; //@line 32595
  HEAP32[$83 >> 2] = $14; //@line 32596
  $84 = $ReallocAsyncCtx2 + 28 | 0; //@line 32597
  HEAP32[$84 >> 2] = $16; //@line 32598
  $85 = $ReallocAsyncCtx2 + 32 | 0; //@line 32599
  HEAP32[$85 >> 2] = $18; //@line 32600
  $86 = $ReallocAsyncCtx2 + 36 | 0; //@line 32601
  HEAP32[$86 >> 2] = $20; //@line 32602
  $87 = $ReallocAsyncCtx2 + 40 | 0; //@line 32603
  HEAP32[$87 >> 2] = $22; //@line 32604
  $88 = $ReallocAsyncCtx2 + 44 | 0; //@line 32605
  HEAP32[$88 >> 2] = $24; //@line 32606
  $89 = $ReallocAsyncCtx2 + 48 | 0; //@line 32607
  HEAP32[$89 >> 2] = $26; //@line 32608
  $90 = $ReallocAsyncCtx2 + 52 | 0; //@line 32609
  HEAP32[$90 >> 2] = $28; //@line 32610
  sp = STACKTOP; //@line 32611
  return;
 }
 ___async_unwind = 0; //@line 32614
 HEAP32[$ReallocAsyncCtx2 >> 2] = 513; //@line 32615
 $77 = $ReallocAsyncCtx2 + 4 | 0; //@line 32616
 HEAP32[$77 >> 2] = $2; //@line 32617
 $78 = $ReallocAsyncCtx2 + 8 | 0; //@line 32618
 HEAP8[$78 >> 0] = $39; //@line 32619
 $79 = $ReallocAsyncCtx2 + 9 | 0; //@line 32620
 HEAP8[$79 >> 0] = $30; //@line 32621
 $80 = $ReallocAsyncCtx2 + 12 | 0; //@line 32622
 HEAP32[$80 >> 2] = $8; //@line 32623
 $81 = $ReallocAsyncCtx2 + 16 | 0; //@line 32624
 HEAP32[$81 >> 2] = $10; //@line 32625
 $82 = $ReallocAsyncCtx2 + 20 | 0; //@line 32626
 HEAP32[$82 >> 2] = $12; //@line 32627
 $83 = $ReallocAsyncCtx2 + 24 | 0; //@line 32628
 HEAP32[$83 >> 2] = $14; //@line 32629
 $84 = $ReallocAsyncCtx2 + 28 | 0; //@line 32630
 HEAP32[$84 >> 2] = $16; //@line 32631
 $85 = $ReallocAsyncCtx2 + 32 | 0; //@line 32632
 HEAP32[$85 >> 2] = $18; //@line 32633
 $86 = $ReallocAsyncCtx2 + 36 | 0; //@line 32634
 HEAP32[$86 >> 2] = $20; //@line 32635
 $87 = $ReallocAsyncCtx2 + 40 | 0; //@line 32636
 HEAP32[$87 >> 2] = $22; //@line 32637
 $88 = $ReallocAsyncCtx2 + 44 | 0; //@line 32638
 HEAP32[$88 >> 2] = $24; //@line 32639
 $89 = $ReallocAsyncCtx2 + 48 | 0; //@line 32640
 HEAP32[$89 >> 2] = $26; //@line 32641
 $90 = $ReallocAsyncCtx2 + 52 | 0; //@line 32642
 HEAP32[$90 >> 2] = $28; //@line 32643
 sp = STACKTOP; //@line 32644
 return;
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_193($0) {
 $0 = $0 | 0;
 var $$pre119 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 763
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 765
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 767
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 769
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 771
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 773
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 775
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 777
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 779
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 781
 $$pre119 = HEAP32[$12 >> 2] | 0; //@line 782
 if ($$pre119 | 0) {
  $21 = HEAP32[$$pre119 + 4 >> 2] | 0; //@line 786
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(36) | 0; //@line 787
  FUNCTION_TABLE_vii[$21 & 31]($2, $4); //@line 788
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 468; //@line 791
   $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 792
   HEAP32[$22 >> 2] = $4; //@line 793
   $23 = $ReallocAsyncCtx5 + 8 | 0; //@line 794
   HEAP32[$23 >> 2] = $8; //@line 795
   $24 = $ReallocAsyncCtx5 + 12 | 0; //@line 796
   HEAP32[$24 >> 2] = $10; //@line 797
   $25 = $ReallocAsyncCtx5 + 16 | 0; //@line 798
   HEAP32[$25 >> 2] = $14; //@line 799
   $26 = $ReallocAsyncCtx5 + 20 | 0; //@line 800
   HEAP32[$26 >> 2] = $16; //@line 801
   $27 = $ReallocAsyncCtx5 + 24 | 0; //@line 802
   HEAP32[$27 >> 2] = $12; //@line 803
   $28 = $ReallocAsyncCtx5 + 28 | 0; //@line 804
   HEAP32[$28 >> 2] = $6; //@line 805
   $29 = $ReallocAsyncCtx5 + 32 | 0; //@line 806
   HEAP32[$29 >> 2] = $18; //@line 807
   sp = STACKTOP; //@line 808
   return;
  }
  ___async_unwind = 0; //@line 811
  HEAP32[$ReallocAsyncCtx5 >> 2] = 468; //@line 812
  $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 813
  HEAP32[$22 >> 2] = $4; //@line 814
  $23 = $ReallocAsyncCtx5 + 8 | 0; //@line 815
  HEAP32[$23 >> 2] = $8; //@line 816
  $24 = $ReallocAsyncCtx5 + 12 | 0; //@line 817
  HEAP32[$24 >> 2] = $10; //@line 818
  $25 = $ReallocAsyncCtx5 + 16 | 0; //@line 819
  HEAP32[$25 >> 2] = $14; //@line 820
  $26 = $ReallocAsyncCtx5 + 20 | 0; //@line 821
  HEAP32[$26 >> 2] = $16; //@line 822
  $27 = $ReallocAsyncCtx5 + 24 | 0; //@line 823
  HEAP32[$27 >> 2] = $12; //@line 824
  $28 = $ReallocAsyncCtx5 + 28 | 0; //@line 825
  HEAP32[$28 >> 2] = $6; //@line 826
  $29 = $ReallocAsyncCtx5 + 32 | 0; //@line 827
  HEAP32[$29 >> 2] = $18; //@line 828
  sp = STACKTOP; //@line 829
  return;
 }
 HEAP32[$6 >> 2] = 0; //@line 832
 $30 = $10 + 12 | 0; //@line 833
 HEAP32[$10 >> 2] = 470; //@line 834
 HEAP32[$10 + 4 >> 2] = 0; //@line 836
 HEAP32[$10 + 8 >> 2] = $8; //@line 838
 HEAP32[$30 >> 2] = 836; //@line 839
 $31 = $8 + 1276 | 0; //@line 840
 if (($31 | 0) == ($10 | 0)) {
  $56 = HEAP32[211] | 0; //@line 844
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(24) | 0; //@line 845
  FUNCTION_TABLE_vi[$56 & 1023]($10); //@line 846
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 473; //@line 849
   $57 = $ReallocAsyncCtx9 + 4 | 0; //@line 850
   HEAP32[$57 >> 2] = $14; //@line 851
   $58 = $ReallocAsyncCtx9 + 8 | 0; //@line 852
   HEAP32[$58 >> 2] = $16; //@line 853
   $59 = $ReallocAsyncCtx9 + 12 | 0; //@line 854
   HEAP32[$59 >> 2] = $8; //@line 855
   $60 = $ReallocAsyncCtx9 + 16 | 0; //@line 856
   HEAP32[$60 >> 2] = $10; //@line 857
   $61 = $ReallocAsyncCtx9 + 20 | 0; //@line 858
   HEAP32[$61 >> 2] = $18; //@line 859
   sp = STACKTOP; //@line 860
   return;
  }
  ___async_unwind = 0; //@line 863
  HEAP32[$ReallocAsyncCtx9 >> 2] = 473; //@line 864
  $57 = $ReallocAsyncCtx9 + 4 | 0; //@line 865
  HEAP32[$57 >> 2] = $14; //@line 866
  $58 = $ReallocAsyncCtx9 + 8 | 0; //@line 867
  HEAP32[$58 >> 2] = $16; //@line 868
  $59 = $ReallocAsyncCtx9 + 12 | 0; //@line 869
  HEAP32[$59 >> 2] = $8; //@line 870
  $60 = $ReallocAsyncCtx9 + 16 | 0; //@line 871
  HEAP32[$60 >> 2] = $10; //@line 872
  $61 = $ReallocAsyncCtx9 + 20 | 0; //@line 873
  HEAP32[$61 >> 2] = $18; //@line 874
  sp = STACKTOP; //@line 875
  return;
 }
 $33 = $8 + 1288 | 0; //@line 878
 $34 = HEAP32[$33 >> 2] | 0; //@line 879
 if (!$34) {
  $47 = HEAP32[210] | 0; //@line 883
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(32) | 0; //@line 884
  FUNCTION_TABLE_vii[$47 & 31]($31, $10); //@line 885
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 472; //@line 888
   $48 = $ReallocAsyncCtx8 + 4 | 0; //@line 889
   HEAP32[$48 >> 2] = $14; //@line 890
   $49 = $ReallocAsyncCtx8 + 8 | 0; //@line 891
   HEAP32[$49 >> 2] = $16; //@line 892
   $50 = $ReallocAsyncCtx8 + 12 | 0; //@line 893
   HEAP32[$50 >> 2] = $8; //@line 894
   $51 = $ReallocAsyncCtx8 + 16 | 0; //@line 895
   HEAP32[$51 >> 2] = $10; //@line 896
   $52 = $ReallocAsyncCtx8 + 20 | 0; //@line 897
   HEAP32[$52 >> 2] = $30; //@line 898
   $53 = $ReallocAsyncCtx8 + 24 | 0; //@line 899
   HEAP32[$53 >> 2] = $33; //@line 900
   $54 = $ReallocAsyncCtx8 + 28 | 0; //@line 901
   HEAP32[$54 >> 2] = $18; //@line 902
   sp = STACKTOP; //@line 903
   return;
  }
  ___async_unwind = 0; //@line 906
  HEAP32[$ReallocAsyncCtx8 >> 2] = 472; //@line 907
  $48 = $ReallocAsyncCtx8 + 4 | 0; //@line 908
  HEAP32[$48 >> 2] = $14; //@line 909
  $49 = $ReallocAsyncCtx8 + 8 | 0; //@line 910
  HEAP32[$49 >> 2] = $16; //@line 911
  $50 = $ReallocAsyncCtx8 + 12 | 0; //@line 912
  HEAP32[$50 >> 2] = $8; //@line 913
  $51 = $ReallocAsyncCtx8 + 16 | 0; //@line 914
  HEAP32[$51 >> 2] = $10; //@line 915
  $52 = $ReallocAsyncCtx8 + 20 | 0; //@line 916
  HEAP32[$52 >> 2] = $30; //@line 917
  $53 = $ReallocAsyncCtx8 + 24 | 0; //@line 918
  HEAP32[$53 >> 2] = $33; //@line 919
  $54 = $ReallocAsyncCtx8 + 28 | 0; //@line 920
  HEAP32[$54 >> 2] = $18; //@line 921
  sp = STACKTOP; //@line 922
  return;
 } else {
  $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 926
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(36) | 0; //@line 927
  FUNCTION_TABLE_vi[$37 & 1023]($31); //@line 928
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 471; //@line 931
   $38 = $ReallocAsyncCtx7 + 4 | 0; //@line 932
   HEAP32[$38 >> 2] = $30; //@line 933
   $39 = $ReallocAsyncCtx7 + 8 | 0; //@line 934
   HEAP32[$39 >> 2] = $14; //@line 935
   $40 = $ReallocAsyncCtx7 + 12 | 0; //@line 936
   HEAP32[$40 >> 2] = $16; //@line 937
   $41 = $ReallocAsyncCtx7 + 16 | 0; //@line 938
   HEAP32[$41 >> 2] = $8; //@line 939
   $42 = $ReallocAsyncCtx7 + 20 | 0; //@line 940
   HEAP32[$42 >> 2] = $10; //@line 941
   $43 = $ReallocAsyncCtx7 + 24 | 0; //@line 942
   HEAP32[$43 >> 2] = $33; //@line 943
   $44 = $ReallocAsyncCtx7 + 28 | 0; //@line 944
   HEAP32[$44 >> 2] = $31; //@line 945
   $45 = $ReallocAsyncCtx7 + 32 | 0; //@line 946
   HEAP32[$45 >> 2] = $18; //@line 947
   sp = STACKTOP; //@line 948
   return;
  }
  ___async_unwind = 0; //@line 951
  HEAP32[$ReallocAsyncCtx7 >> 2] = 471; //@line 952
  $38 = $ReallocAsyncCtx7 + 4 | 0; //@line 953
  HEAP32[$38 >> 2] = $30; //@line 954
  $39 = $ReallocAsyncCtx7 + 8 | 0; //@line 955
  HEAP32[$39 >> 2] = $14; //@line 956
  $40 = $ReallocAsyncCtx7 + 12 | 0; //@line 957
  HEAP32[$40 >> 2] = $16; //@line 958
  $41 = $ReallocAsyncCtx7 + 16 | 0; //@line 959
  HEAP32[$41 >> 2] = $8; //@line 960
  $42 = $ReallocAsyncCtx7 + 20 | 0; //@line 961
  HEAP32[$42 >> 2] = $10; //@line 962
  $43 = $ReallocAsyncCtx7 + 24 | 0; //@line 963
  HEAP32[$43 >> 2] = $33; //@line 964
  $44 = $ReallocAsyncCtx7 + 28 | 0; //@line 965
  HEAP32[$44 >> 2] = $31; //@line 966
  $45 = $ReallocAsyncCtx7 + 32 | 0; //@line 967
  HEAP32[$45 >> 2] = $18; //@line 968
  sp = STACKTOP; //@line 969
  return;
 }
}
function _mbedtls_gcm_setkey__async_cb($0) {
 $0 = $0 | 0;
 var $$0$i = 0, $103 = 0, $105 = 0, $106 = 0, $107 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $114 = 0, $116 = 0, $121 = 0, $126 = 0, $128 = 0, $129 = 0, $130 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $137 = 0, $139 = 0, $144 = 0, $149 = 0, $151 = 0, $152 = 0, $153 = 0, $155 = 0, $156 = 0, $157 = 0, $160 = 0, $162 = 0, $167 = 0, $171 = 0, $172 = 0, $174 = 0, $178 = 0, $179 = 0, $181 = 0, $185 = 0, $186 = 0, $188 = 0, $192 = 0, $193 = 0, $195 = 0, $199 = 0, $200 = 0, $202 = 0, $206 = 0, $207 = 0, $209 = 0, $213 = 0, $214 = 0, $216 = 0, $220 = 0, $221 = 0, $223 = 0, $230 = 0, $237 = 0, $244 = 0, $251 = 0, $258 = 0, $265 = 0, $27 = 0, $272 = 0, $279 = 0, $286 = 0, $293 = 0, $300 = 0, $307 = 0, $314 = 0, $321 = 0, $4 = 0, $45 = 0, $6 = 0, $63 = 0, $81 = 0, $83 = 0, $88 = 0, $93 = 0, $98 = 0, $AsyncRetVal = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28233
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28235
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 28239
 if (!$AsyncRetVal) {
  $27 = (HEAPU8[$4 + 1 >> 0] | 0) << 16 | (HEAPU8[HEAP32[$0 + 4 >> 2] >> 0] | 0) << 24 | (HEAPU8[$4 + 2 >> 0] | 0) << 8 | (HEAPU8[$4 + 3 >> 0] | 0); //@line 28258
  $45 = (HEAPU8[$4 + 5 >> 0] | 0) << 16 | (HEAPU8[$4 + 4 >> 0] | 0) << 24 | (HEAPU8[$4 + 6 >> 0] | 0) << 8 | (HEAPU8[$4 + 7 >> 0] | 0); //@line 28276
  $63 = (HEAPU8[$4 + 9 >> 0] | 0) << 16 | (HEAPU8[$4 + 8 >> 0] | 0) << 24 | (HEAPU8[$4 + 10 >> 0] | 0) << 8 | (HEAPU8[$4 + 11 >> 0] | 0); //@line 28294
  $81 = (HEAPU8[$4 + 13 >> 0] | 0) << 16 | (HEAPU8[$4 + 12 >> 0] | 0) << 24 | (HEAPU8[$4 + 14 >> 0] | 0) << 8 | (HEAPU8[$4 + 15 >> 0] | 0); //@line 28312
  $83 = $6 + 136 | 0; //@line 28314
  HEAP32[$83 >> 2] = $81; //@line 28316
  HEAP32[$83 + 4 >> 2] = $63; //@line 28319
  $88 = $6 + 264 | 0; //@line 28321
  HEAP32[$88 >> 2] = $45; //@line 28323
  HEAP32[$88 + 4 >> 2] = $27; //@line 28326
  $93 = $6 + 200 | 0; //@line 28328
  HEAP32[$93 >> 2] = 0; //@line 28330
  HEAP32[$93 + 4 >> 2] = 0; //@line 28333
  $98 = $6 + 72 | 0; //@line 28335
  HEAP32[$98 >> 2] = 0; //@line 28337
  HEAP32[$98 + 4 >> 2] = 0; //@line 28340
  $103 = _i64Subtract(0, 0, $81 & 1 | 0, 0) | 0; //@line 28342
  $105 = _bitshift64Shl($45 | 0, 0, 63) | 0; //@line 28344
  $106 = tempRet0; //@line 28345
  $107 = _bitshift64Lshr($81 | 0, $63 | 0, 1) | 0; //@line 28346
  $109 = $107 | $105; //@line 28348
  $110 = tempRet0 | $106; //@line 28349
  $111 = _bitshift64Lshr($45 | 0, $27 | 0, 1) | 0; //@line 28350
  $112 = tempRet0; //@line 28351
  $114 = $103 & -520093696 ^ $112; //@line 28353
  $116 = $6 + 104 | 0; //@line 28355
  HEAP32[$116 >> 2] = $109; //@line 28357
  HEAP32[$116 + 4 >> 2] = $110; //@line 28360
  $121 = $6 + 232 | 0; //@line 28362
  HEAP32[$121 >> 2] = $111; //@line 28364
  HEAP32[$121 + 4 >> 2] = $114; //@line 28367
  $126 = _i64Subtract(0, 0, $107 & 1 | 0, 0) | 0; //@line 28369
  $128 = _bitshift64Shl($111 | 0, $112 | 0, 63) | 0; //@line 28371
  $129 = tempRet0; //@line 28372
  $130 = _bitshift64Lshr($109 | 0, $110 | 0, 1) | 0; //@line 28373
  $132 = $130 | $128; //@line 28375
  $133 = tempRet0 | $129; //@line 28376
  $134 = _bitshift64Lshr($111 | 0, $114 | 0, 1) | 0; //@line 28377
  $135 = tempRet0; //@line 28378
  $137 = $126 & -520093696 ^ $135; //@line 28380
  $139 = $6 + 88 | 0; //@line 28382
  HEAP32[$139 >> 2] = $132; //@line 28384
  HEAP32[$139 + 4 >> 2] = $133; //@line 28387
  $144 = $6 + 216 | 0; //@line 28389
  HEAP32[$144 >> 2] = $134; //@line 28391
  HEAP32[$144 + 4 >> 2] = $137; //@line 28394
  $149 = _i64Subtract(0, 0, $130 & 1 | 0, 0) | 0; //@line 28396
  $151 = _bitshift64Shl($134 | 0, $135 | 0, 63) | 0; //@line 28398
  $152 = tempRet0; //@line 28399
  $153 = _bitshift64Lshr($132 | 0, $133 | 0, 1) | 0; //@line 28400
  $155 = $151 | $153; //@line 28402
  $156 = $152 | tempRet0; //@line 28403
  $157 = _bitshift64Lshr($134 | 0, $137 | 0, 1) | 0; //@line 28404
  $160 = $149 & -520093696 ^ tempRet0; //@line 28407
  $162 = $6 + 80 | 0; //@line 28409
  HEAP32[$162 >> 2] = $155; //@line 28411
  HEAP32[$162 + 4 >> 2] = $156; //@line 28414
  $167 = $6 + 208 | 0; //@line 28416
  HEAP32[$167 >> 2] = $157; //@line 28418
  HEAP32[$167 + 4 >> 2] = $160; //@line 28421
  $171 = $157 ^ $134; //@line 28422
  $172 = $160 ^ $137; //@line 28423
  $174 = $6 + 224 | 0; //@line 28425
  HEAP32[$174 >> 2] = $171; //@line 28427
  HEAP32[$174 + 4 >> 2] = $172; //@line 28430
  $178 = $155 ^ $132; //@line 28431
  $179 = $156 ^ $133; //@line 28432
  $181 = $6 + 96 | 0; //@line 28434
  HEAP32[$181 >> 2] = $178; //@line 28436
  HEAP32[$181 + 4 >> 2] = $179; //@line 28439
  $185 = $157 ^ $111; //@line 28440
  $186 = $160 ^ $114; //@line 28441
  $188 = $6 + 240 | 0; //@line 28443
  HEAP32[$188 >> 2] = $185; //@line 28445
  HEAP32[$188 + 4 >> 2] = $186; //@line 28448
  $192 = $155 ^ $109; //@line 28449
  $193 = $156 ^ $110; //@line 28450
  $195 = $6 + 112 | 0; //@line 28452
  HEAP32[$195 >> 2] = $192; //@line 28454
  HEAP32[$195 + 4 >> 2] = $193; //@line 28457
  $199 = $134 ^ $111; //@line 28458
  $200 = $137 ^ $114; //@line 28459
  $202 = $6 + 248 | 0; //@line 28461
  HEAP32[$202 >> 2] = $199; //@line 28463
  HEAP32[$202 + 4 >> 2] = $200; //@line 28466
  $206 = $132 ^ $109; //@line 28467
  $207 = $133 ^ $110; //@line 28468
  $209 = $6 + 120 | 0; //@line 28470
  HEAP32[$209 >> 2] = $206; //@line 28472
  HEAP32[$209 + 4 >> 2] = $207; //@line 28475
  $213 = $171 ^ $111; //@line 28476
  $214 = $172 ^ $114; //@line 28477
  $216 = $6 + 256 | 0; //@line 28479
  HEAP32[$216 >> 2] = $213; //@line 28481
  HEAP32[$216 + 4 >> 2] = $214; //@line 28484
  $220 = $178 ^ $109; //@line 28485
  $221 = $179 ^ $110; //@line 28486
  $223 = $6 + 128 | 0; //@line 28488
  HEAP32[$223 >> 2] = $220; //@line 28490
  HEAP32[$223 + 4 >> 2] = $221; //@line 28493
  $230 = $6 + 272 | 0; //@line 28497
  HEAP32[$230 >> 2] = $157 ^ $45; //@line 28499
  HEAP32[$230 + 4 >> 2] = $160 ^ $27; //@line 28502
  $237 = $6 + 144 | 0; //@line 28506
  HEAP32[$237 >> 2] = $155 ^ $81; //@line 28508
  HEAP32[$237 + 4 >> 2] = $156 ^ $63; //@line 28511
  $244 = $6 + 280 | 0; //@line 28515
  HEAP32[$244 >> 2] = $134 ^ $45; //@line 28517
  HEAP32[$244 + 4 >> 2] = $137 ^ $27; //@line 28520
  $251 = $6 + 152 | 0; //@line 28524
  HEAP32[$251 >> 2] = $132 ^ $81; //@line 28526
  HEAP32[$251 + 4 >> 2] = $133 ^ $63; //@line 28529
  $258 = $6 + 288 | 0; //@line 28533
  HEAP32[$258 >> 2] = $171 ^ $45; //@line 28535
  HEAP32[$258 + 4 >> 2] = $172 ^ $27; //@line 28538
  $265 = $6 + 160 | 0; //@line 28542
  HEAP32[$265 >> 2] = $178 ^ $81; //@line 28544
  HEAP32[$265 + 4 >> 2] = $179 ^ $63; //@line 28547
  $272 = $6 + 296 | 0; //@line 28551
  HEAP32[$272 >> 2] = $111 ^ $45; //@line 28553
  HEAP32[$272 + 4 >> 2] = $114 ^ $27; //@line 28556
  $279 = $6 + 168 | 0; //@line 28560
  HEAP32[$279 >> 2] = $109 ^ $81; //@line 28562
  HEAP32[$279 + 4 >> 2] = $110 ^ $63; //@line 28565
  $286 = $6 + 304 | 0; //@line 28569
  HEAP32[$286 >> 2] = $185 ^ $45; //@line 28571
  HEAP32[$286 + 4 >> 2] = $186 ^ $27; //@line 28574
  $293 = $6 + 176 | 0; //@line 28578
  HEAP32[$293 >> 2] = $192 ^ $81; //@line 28580
  HEAP32[$293 + 4 >> 2] = $193 ^ $63; //@line 28583
  $300 = $6 + 312 | 0; //@line 28587
  HEAP32[$300 >> 2] = $199 ^ $45; //@line 28589
  HEAP32[$300 + 4 >> 2] = $200 ^ $27; //@line 28592
  $307 = $6 + 184 | 0; //@line 28596
  HEAP32[$307 >> 2] = $206 ^ $81; //@line 28598
  HEAP32[$307 + 4 >> 2] = $207 ^ $63; //@line 28601
  $314 = $6 + 320 | 0; //@line 28605
  HEAP32[$314 >> 2] = $213 ^ $45; //@line 28607
  HEAP32[$314 + 4 >> 2] = $214 ^ $27; //@line 28610
  $321 = $6 + 192 | 0; //@line 28614
  HEAP32[$321 >> 2] = $220 ^ $81; //@line 28616
  HEAP32[$321 + 4 >> 2] = $221 ^ $63; //@line 28619
  $$0$i = 0; //@line 28620
 } else {
  $$0$i = $AsyncRetVal; //@line 28622
 }
 HEAP32[___async_retval >> 2] = $$0$i; //@line 28625
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb($0) {
 $0 = $0 | 0;
 var $$pre$i = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $46 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $56 = 0, $57 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 14960
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14962
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14964
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14966
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14968
 $$pre$i = HEAP32[HEAP32[$0 + 20 >> 2] >> 2] | 0; //@line 14971
 $11 = $4 + 12 | 0; //@line 14972
 HEAP32[$11 >> 2] = $$pre$i; //@line 14973
 if ($$pre$i | 0) {
  $14 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 14978
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 14979
  FUNCTION_TABLE_vii[$14 & 31]($2, $4); //@line 14980
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 193; //@line 14983
   $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 14984
   HEAP32[$15 >> 2] = $2; //@line 14985
   $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 14986
   HEAP32[$16 >> 2] = $4; //@line 14987
   $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 14988
   HEAP32[$17 >> 2] = $11; //@line 14989
   $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 14990
   HEAP32[$18 >> 2] = $6; //@line 14991
   $19 = $ReallocAsyncCtx2 + 20 | 0; //@line 14992
   HEAP32[$19 >> 2] = $8; //@line 14993
   $20 = $ReallocAsyncCtx2 + 24 | 0; //@line 14994
   HEAP32[$20 >> 2] = $11; //@line 14995
   sp = STACKTOP; //@line 14996
   return;
  }
  ___async_unwind = 0; //@line 14999
  HEAP32[$ReallocAsyncCtx2 >> 2] = 193; //@line 15000
  $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 15001
  HEAP32[$15 >> 2] = $2; //@line 15002
  $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 15003
  HEAP32[$16 >> 2] = $4; //@line 15004
  $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 15005
  HEAP32[$17 >> 2] = $11; //@line 15006
  $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 15007
  HEAP32[$18 >> 2] = $6; //@line 15008
  $19 = $ReallocAsyncCtx2 + 20 | 0; //@line 15009
  HEAP32[$19 >> 2] = $8; //@line 15010
  $20 = $ReallocAsyncCtx2 + 24 | 0; //@line 15011
  HEAP32[$20 >> 2] = $11; //@line 15012
  sp = STACKTOP; //@line 15013
  return;
 }
 $21 = $2 + 12 | 0; //@line 15016
 HEAP32[$21 >> 2] = 0; //@line 15017
 $22 = $2 + 16 | 0; //@line 15018
 HEAP32[$22 >> 2] = $6; //@line 15019
 $23 = _equeue_alloc($8, 20) | 0; //@line 15020
 if ($23 | 0) {
  $25 = HEAP32[$21 >> 2] | 0; //@line 15023
  if (!$25) {
   HEAP32[$23 + 12 >> 2] = 0; //@line 15027
   HEAP32[$23 + 16 >> 2] = HEAP32[$22 >> 2]; //@line 15030
   _equeue_event_dtor($23, 195); //@line 15031
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 15032
   $40 = _equeue_post($8, 196, $23) | 0; //@line 15033
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 197; //@line 15036
    $41 = $ReallocAsyncCtx6 + 4 | 0; //@line 15037
    HEAP32[$41 >> 2] = $21; //@line 15038
    $42 = $ReallocAsyncCtx6 + 8 | 0; //@line 15039
    HEAP32[$42 >> 2] = $11; //@line 15040
    $43 = $ReallocAsyncCtx6 + 12 | 0; //@line 15041
    HEAP32[$43 >> 2] = $2; //@line 15042
    $44 = $ReallocAsyncCtx6 + 16 | 0; //@line 15043
    HEAP32[$44 >> 2] = $4; //@line 15044
    sp = STACKTOP; //@line 15045
    return;
   }
   HEAP32[___async_retval >> 2] = $40; //@line 15049
   ___async_unwind = 0; //@line 15050
   HEAP32[$ReallocAsyncCtx6 >> 2] = 197; //@line 15051
   $41 = $ReallocAsyncCtx6 + 4 | 0; //@line 15052
   HEAP32[$41 >> 2] = $21; //@line 15053
   $42 = $ReallocAsyncCtx6 + 8 | 0; //@line 15054
   HEAP32[$42 >> 2] = $11; //@line 15055
   $43 = $ReallocAsyncCtx6 + 12 | 0; //@line 15056
   HEAP32[$43 >> 2] = $2; //@line 15057
   $44 = $ReallocAsyncCtx6 + 16 | 0; //@line 15058
   HEAP32[$44 >> 2] = $4; //@line 15059
   sp = STACKTOP; //@line 15060
   return;
  } else {
   $28 = HEAP32[$25 + 4 >> 2] | 0; //@line 15064
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 15065
   FUNCTION_TABLE_vii[$28 & 31]($23, $2); //@line 15066
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 194; //@line 15069
    $29 = $ReallocAsyncCtx3 + 4 | 0; //@line 15070
    HEAP32[$29 >> 2] = $21; //@line 15071
    $30 = $ReallocAsyncCtx3 + 8 | 0; //@line 15072
    HEAP32[$30 >> 2] = $23; //@line 15073
    $31 = $ReallocAsyncCtx3 + 12 | 0; //@line 15074
    HEAP32[$31 >> 2] = $22; //@line 15075
    $32 = $ReallocAsyncCtx3 + 16 | 0; //@line 15076
    HEAP32[$32 >> 2] = $8; //@line 15077
    $33 = $ReallocAsyncCtx3 + 20 | 0; //@line 15078
    HEAP32[$33 >> 2] = $21; //@line 15079
    $34 = $ReallocAsyncCtx3 + 24 | 0; //@line 15080
    HEAP32[$34 >> 2] = $11; //@line 15081
    $35 = $ReallocAsyncCtx3 + 28 | 0; //@line 15082
    HEAP32[$35 >> 2] = $2; //@line 15083
    $36 = $ReallocAsyncCtx3 + 32 | 0; //@line 15084
    HEAP32[$36 >> 2] = $4; //@line 15085
    sp = STACKTOP; //@line 15086
    return;
   }
   ___async_unwind = 0; //@line 15089
   HEAP32[$ReallocAsyncCtx3 >> 2] = 194; //@line 15090
   $29 = $ReallocAsyncCtx3 + 4 | 0; //@line 15091
   HEAP32[$29 >> 2] = $21; //@line 15092
   $30 = $ReallocAsyncCtx3 + 8 | 0; //@line 15093
   HEAP32[$30 >> 2] = $23; //@line 15094
   $31 = $ReallocAsyncCtx3 + 12 | 0; //@line 15095
   HEAP32[$31 >> 2] = $22; //@line 15096
   $32 = $ReallocAsyncCtx3 + 16 | 0; //@line 15097
   HEAP32[$32 >> 2] = $8; //@line 15098
   $33 = $ReallocAsyncCtx3 + 20 | 0; //@line 15099
   HEAP32[$33 >> 2] = $21; //@line 15100
   $34 = $ReallocAsyncCtx3 + 24 | 0; //@line 15101
   HEAP32[$34 >> 2] = $11; //@line 15102
   $35 = $ReallocAsyncCtx3 + 28 | 0; //@line 15103
   HEAP32[$35 >> 2] = $2; //@line 15104
   $36 = $ReallocAsyncCtx3 + 32 | 0; //@line 15105
   HEAP32[$36 >> 2] = $4; //@line 15106
   sp = STACKTOP; //@line 15107
   return;
  }
 }
 $46 = HEAP32[$21 >> 2] | 0; //@line 15111
 if ($46 | 0) {
  $49 = HEAP32[$46 + 8 >> 2] | 0; //@line 15115
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 15116
  FUNCTION_TABLE_vi[$49 & 1023]($2); //@line 15117
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 198; //@line 15120
   $50 = $ReallocAsyncCtx4 + 4 | 0; //@line 15121
   HEAP32[$50 >> 2] = $11; //@line 15122
   $51 = $ReallocAsyncCtx4 + 8 | 0; //@line 15123
   HEAP32[$51 >> 2] = 0; //@line 15124
   $52 = $ReallocAsyncCtx4 + 12 | 0; //@line 15125
   HEAP32[$52 >> 2] = $4; //@line 15126
   sp = STACKTOP; //@line 15127
   return;
  }
  ___async_unwind = 0; //@line 15130
  HEAP32[$ReallocAsyncCtx4 >> 2] = 198; //@line 15131
  $50 = $ReallocAsyncCtx4 + 4 | 0; //@line 15132
  HEAP32[$50 >> 2] = $11; //@line 15133
  $51 = $ReallocAsyncCtx4 + 8 | 0; //@line 15134
  HEAP32[$51 >> 2] = 0; //@line 15135
  $52 = $ReallocAsyncCtx4 + 12 | 0; //@line 15136
  HEAP32[$52 >> 2] = $4; //@line 15137
  sp = STACKTOP; //@line 15138
  return;
 }
 $53 = HEAP32[$11 >> 2] | 0; //@line 15141
 if (!$53) {
  HEAP32[___async_retval >> 2] = 0; //@line 15145
  return;
 }
 $56 = HEAP32[$53 + 8 >> 2] | 0; //@line 15149
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 15150
 FUNCTION_TABLE_vi[$56 & 1023]($4); //@line 15151
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 199; //@line 15154
  $57 = $ReallocAsyncCtx5 + 4 | 0; //@line 15155
  HEAP32[$57 >> 2] = 0; //@line 15156
  sp = STACKTOP; //@line 15157
  return;
 }
 ___async_unwind = 0; //@line 15160
 HEAP32[$ReallocAsyncCtx5 >> 2] = 199; //@line 15161
 $57 = $ReallocAsyncCtx5 + 4 | 0; //@line 15162
 HEAP32[$57 >> 2] = 0; //@line 15163
 sp = STACKTOP; //@line 15164
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $13 = 0, $15 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $27 = 0, $3 = 0, $30 = 0, $36 = 0, $37 = 0, $52 = 0, $53 = 0, $57 = 0, $59 = 0, $67 = 0, $68 = 0, $74 = 0, $77 = 0, $8 = 0, $89 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx22 = 0, $AsyncCtx25 = 0, $AsyncCtx29 = 0, $AsyncCtx33 = 0, $AsyncCtx4 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 4233
 STACKTOP = STACKTOP + 48 | 0; //@line 4234
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 4234
 $2 = sp + 32 | 0; //@line 4237
 $3 = sp + 16 | 0; //@line 4238
 if (!$1) {
  _printf(11245, sp) | 0; //@line 4241
  _printf(11556, sp + 8 | 0) | 0; //@line 4242
  $AsyncCtx15 = _emscripten_alloc_async_context(4, sp) | 0; //@line 4243
  _putchar(10) | 0; //@line 4244
  if (___async) {
   HEAP32[$AsyncCtx15 >> 2] = 134; //@line 4247
   sp = STACKTOP; //@line 4248
   STACKTOP = sp; //@line 4249
   return;
  }
  _emscripten_free_async_context($AsyncCtx15 | 0); //@line 4251
  STACKTOP = sp; //@line 4252
  return;
 }
 if (HEAP32[$1 + 4 >> 2] | 0) {
  $8 = $0 + 1892 | 0; //@line 4258
  $9 = HEAP32[$8 >> 2] | 0; //@line 4259
  if (!$9) {
   STACKTOP = sp; //@line 4262
   return;
  }
  $13 = HEAP32[$0 + 2288 >> 2] | 0; //@line 4266
  $15 = HEAP32[$9 + 4 >> 2] | 0; //@line 4268
  $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 4269
  FUNCTION_TABLE_vii[$15 & 31]($2, $0 + 1880 | 0); //@line 4270
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 135; //@line 4273
   HEAP32[$AsyncCtx + 4 >> 2] = $8; //@line 4275
   HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 4277
   HEAP32[$AsyncCtx + 12 >> 2] = $13; //@line 4279
   HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 4281
   sp = STACKTOP; //@line 4282
   STACKTOP = sp; //@line 4283
   return;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4285
  $20 = $2 + 12 | 0; //@line 4287
  HEAP32[$20 >> 2] = HEAP32[$8 >> 2]; //@line 4288
  $AsyncCtx25 = _emscripten_alloc_async_context(12, sp) | 0; //@line 4289
  $21 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($13, $2, 9) | 0; //@line 4290
  if (___async) {
   HEAP32[$AsyncCtx25 >> 2] = 136; //@line 4293
   HEAP32[$AsyncCtx25 + 4 >> 2] = $20; //@line 4295
   HEAP32[$AsyncCtx25 + 8 >> 2] = $2; //@line 4297
   sp = STACKTOP; //@line 4298
   STACKTOP = sp; //@line 4299
   return;
  }
  _emscripten_free_async_context($AsyncCtx25 | 0); //@line 4301
  $24 = HEAP32[$20 >> 2] | 0; //@line 4302
  do {
   if ($24 | 0) {
    $27 = HEAP32[$24 + 8 >> 2] | 0; //@line 4307
    $AsyncCtx4 = _emscripten_alloc_async_context(8, sp) | 0; //@line 4308
    FUNCTION_TABLE_vi[$27 & 1023]($2); //@line 4309
    if (___async) {
     HEAP32[$AsyncCtx4 >> 2] = 137; //@line 4312
     HEAP32[$AsyncCtx4 + 4 >> 2] = $21; //@line 4314
     sp = STACKTOP; //@line 4315
     STACKTOP = sp; //@line 4316
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx4 | 0); //@line 4318
     break;
    }
   }
  } while (0);
  if ($21 | 0) {
   STACKTOP = sp; //@line 4325
   return;
  }
  $AsyncCtx33 = _emscripten_alloc_async_context(4, sp) | 0; //@line 4327
  _mbed_assert_internal(12025, 11293, 833); //@line 4328
  if (___async) {
   HEAP32[$AsyncCtx33 >> 2] = 138; //@line 4331
   sp = STACKTOP; //@line 4332
   STACKTOP = sp; //@line 4333
   return;
  }
  _emscripten_free_async_context($AsyncCtx33 | 0); //@line 4335
  STACKTOP = sp; //@line 4336
  return;
 }
 $30 = $0 + 1960 | 0; //@line 4338
 HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + 1; //@line 4341
 if (!(HEAP8[$1 + 18 >> 0] | 0)) {
  STACKTOP = sp; //@line 4346
  return;
 }
 $36 = $1 + 9 | 0; //@line 4348
 $37 = HEAP8[$36 >> 0] | 0; //@line 4349
 if ($37 << 24 >> 24 == -32) {
  STACKTOP = sp; //@line 4352
  return;
 }
 if (($37 + -1 & 255) >= 223) {
  if ((HEAP32[$1 >> 2] | 0) != 3) {
   STACKTOP = sp; //@line 4360
   return;
  }
 }
 HEAP32[$0 + 2240 >> 2] = 2; //@line 4364
 HEAP16[$0 + 2260 >> 1] = HEAP16[$1 + 16 >> 1] | 0; //@line 4368
 HEAP8[$0 + 2253 >> 0] = HEAP8[$36 >> 0] | 0; //@line 4371
 HEAP32[$0 + 2256 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 4375
 HEAP8[$0 + 2236 >> 0] = 1; //@line 4377
 $52 = $0 + 1892 | 0; //@line 4378
 $53 = HEAP32[$52 >> 2] | 0; //@line 4379
 do {
  if ($53 | 0) {
   $57 = HEAP32[$0 + 2288 >> 2] | 0; //@line 4385
   $59 = HEAP32[$53 + 4 >> 2] | 0; //@line 4387
   $AsyncCtx7 = _emscripten_alloc_async_context(32, sp) | 0; //@line 4388
   FUNCTION_TABLE_vii[$59 & 31]($3, $0 + 1880 | 0); //@line 4389
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 139; //@line 4392
    HEAP32[$AsyncCtx7 + 4 >> 2] = $52; //@line 4394
    HEAP32[$AsyncCtx7 + 8 >> 2] = $3; //@line 4396
    HEAP32[$AsyncCtx7 + 12 >> 2] = $57; //@line 4398
    HEAP32[$AsyncCtx7 + 16 >> 2] = $3; //@line 4400
    HEAP32[$AsyncCtx7 + 20 >> 2] = $1; //@line 4402
    HEAP32[$AsyncCtx7 + 24 >> 2] = $36; //@line 4404
    HEAP32[$AsyncCtx7 + 28 >> 2] = $0; //@line 4406
    sp = STACKTOP; //@line 4407
    STACKTOP = sp; //@line 4408
    return;
   }
   _emscripten_free_async_context($AsyncCtx7 | 0); //@line 4410
   $67 = $3 + 12 | 0; //@line 4412
   HEAP32[$67 >> 2] = HEAP32[$52 >> 2]; //@line 4413
   $AsyncCtx22 = _emscripten_alloc_async_context(24, sp) | 0; //@line 4414
   $68 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($57, $3, 7) | 0; //@line 4415
   if (___async) {
    HEAP32[$AsyncCtx22 >> 2] = 140; //@line 4418
    HEAP32[$AsyncCtx22 + 4 >> 2] = $67; //@line 4420
    HEAP32[$AsyncCtx22 + 8 >> 2] = $3; //@line 4422
    HEAP32[$AsyncCtx22 + 12 >> 2] = $1; //@line 4424
    HEAP32[$AsyncCtx22 + 16 >> 2] = $36; //@line 4426
    HEAP32[$AsyncCtx22 + 20 >> 2] = $0; //@line 4428
    sp = STACKTOP; //@line 4429
    STACKTOP = sp; //@line 4430
    return;
   }
   _emscripten_free_async_context($AsyncCtx22 | 0); //@line 4432
   $74 = HEAP32[$67 >> 2] | 0; //@line 4433
   do {
    if ($74 | 0) {
     $77 = HEAP32[$74 + 8 >> 2] | 0; //@line 4438
     $AsyncCtx11 = _emscripten_alloc_async_context(20, sp) | 0; //@line 4439
     FUNCTION_TABLE_vi[$77 & 1023]($3); //@line 4440
     if (___async) {
      HEAP32[$AsyncCtx11 >> 2] = 141; //@line 4443
      HEAP32[$AsyncCtx11 + 4 >> 2] = $68; //@line 4445
      HEAP32[$AsyncCtx11 + 8 >> 2] = $1; //@line 4447
      HEAP32[$AsyncCtx11 + 12 >> 2] = $36; //@line 4449
      HEAP32[$AsyncCtx11 + 16 >> 2] = $0; //@line 4451
      sp = STACKTOP; //@line 4452
      STACKTOP = sp; //@line 4453
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx11 | 0); //@line 4455
      break;
     }
    }
   } while (0);
   if (!$68) {
    $AsyncCtx29 = _emscripten_alloc_async_context(16, sp) | 0; //@line 4462
    _mbed_assert_internal(12025, 11293, 899); //@line 4463
    if (___async) {
     HEAP32[$AsyncCtx29 >> 2] = 142; //@line 4466
     HEAP32[$AsyncCtx29 + 4 >> 2] = $1; //@line 4468
     HEAP32[$AsyncCtx29 + 8 >> 2] = $36; //@line 4470
     HEAP32[$AsyncCtx29 + 12 >> 2] = $0; //@line 4472
     sp = STACKTOP; //@line 4473
     STACKTOP = sp; //@line 4474
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx29 | 0); //@line 4476
     break;
    }
   }
  }
 } while (0);
 if (!(HEAP8[$1 + 11 >> 0] | 0)) {
  STACKTOP = sp; //@line 4486
  return;
 }
 $89 = HEAP8[$36 >> 0] | 0; //@line 4488
 $AsyncCtx19 = _emscripten_alloc_async_context(4, sp) | 0; //@line 4489
 __ZN12LoRaWANStack9handle_txEhPKhth($0, $89, 0, 0, 2) | 0; //@line 4490
 if (___async) {
  HEAP32[$AsyncCtx19 >> 2] = 143; //@line 4493
  sp = STACKTOP; //@line 4494
  STACKTOP = sp; //@line 4495
  return;
 }
 _emscripten_free_async_context($AsyncCtx19 | 0); //@line 4497
 STACKTOP = sp; //@line 4498
 return;
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_194($0) {
 $0 = $0 | 0;
 var $$pre$i$i21 = 0, $10 = 0, $16 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 979
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 981
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 983
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 985
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 987
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 989
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 995
 $$pre$i$i21 = HEAP32[HEAP32[$0 + 24 >> 2] >> 2] | 0; //@line 996
 HEAP32[HEAP32[$0 + 28 >> 2] >> 2] = $$pre$i$i21; //@line 998
 if ($$pre$i$i21 | 0) {
  $20 = HEAP32[$$pre$i$i21 + 8 >> 2] | 0; //@line 1002
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(28) | 0; //@line 1003
  FUNCTION_TABLE_vi[$20 & 1023]($2); //@line 1004
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 469; //@line 1007
   $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 1008
   HEAP32[$21 >> 2] = $4; //@line 1009
   $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 1010
   HEAP32[$22 >> 2] = $2; //@line 1011
   $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 1012
   HEAP32[$23 >> 2] = $6; //@line 1013
   $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 1014
   HEAP32[$24 >> 2] = $8; //@line 1015
   $25 = $ReallocAsyncCtx6 + 20 | 0; //@line 1016
   HEAP32[$25 >> 2] = $10; //@line 1017
   $26 = $ReallocAsyncCtx6 + 24 | 0; //@line 1018
   HEAP32[$26 >> 2] = $16; //@line 1019
   sp = STACKTOP; //@line 1020
   return;
  }
  ___async_unwind = 0; //@line 1023
  HEAP32[$ReallocAsyncCtx6 >> 2] = 469; //@line 1024
  $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 1025
  HEAP32[$21 >> 2] = $4; //@line 1026
  $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 1027
  HEAP32[$22 >> 2] = $2; //@line 1028
  $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 1029
  HEAP32[$23 >> 2] = $6; //@line 1030
  $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 1031
  HEAP32[$24 >> 2] = $8; //@line 1032
  $25 = $ReallocAsyncCtx6 + 20 | 0; //@line 1033
  HEAP32[$25 >> 2] = $10; //@line 1034
  $26 = $ReallocAsyncCtx6 + 24 | 0; //@line 1035
  HEAP32[$26 >> 2] = $16; //@line 1036
  sp = STACKTOP; //@line 1037
  return;
 }
 $27 = $6 + 12 | 0; //@line 1040
 HEAP32[$6 >> 2] = 470; //@line 1041
 HEAP32[$6 + 4 >> 2] = 0; //@line 1043
 HEAP32[$6 + 8 >> 2] = $4; //@line 1045
 HEAP32[$27 >> 2] = 836; //@line 1046
 $28 = $4 + 1276 | 0; //@line 1047
 if (($28 | 0) == ($6 | 0)) {
  $53 = HEAP32[211] | 0; //@line 1051
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(24) | 0; //@line 1052
  FUNCTION_TABLE_vi[$53 & 1023]($6); //@line 1053
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 473; //@line 1056
   $54 = $ReallocAsyncCtx9 + 4 | 0; //@line 1057
   HEAP32[$54 >> 2] = $8; //@line 1058
   $55 = $ReallocAsyncCtx9 + 8 | 0; //@line 1059
   HEAP32[$55 >> 2] = $10; //@line 1060
   $56 = $ReallocAsyncCtx9 + 12 | 0; //@line 1061
   HEAP32[$56 >> 2] = $4; //@line 1062
   $57 = $ReallocAsyncCtx9 + 16 | 0; //@line 1063
   HEAP32[$57 >> 2] = $6; //@line 1064
   $58 = $ReallocAsyncCtx9 + 20 | 0; //@line 1065
   HEAP32[$58 >> 2] = $16; //@line 1066
   sp = STACKTOP; //@line 1067
   return;
  }
  ___async_unwind = 0; //@line 1070
  HEAP32[$ReallocAsyncCtx9 >> 2] = 473; //@line 1071
  $54 = $ReallocAsyncCtx9 + 4 | 0; //@line 1072
  HEAP32[$54 >> 2] = $8; //@line 1073
  $55 = $ReallocAsyncCtx9 + 8 | 0; //@line 1074
  HEAP32[$55 >> 2] = $10; //@line 1075
  $56 = $ReallocAsyncCtx9 + 12 | 0; //@line 1076
  HEAP32[$56 >> 2] = $4; //@line 1077
  $57 = $ReallocAsyncCtx9 + 16 | 0; //@line 1078
  HEAP32[$57 >> 2] = $6; //@line 1079
  $58 = $ReallocAsyncCtx9 + 20 | 0; //@line 1080
  HEAP32[$58 >> 2] = $16; //@line 1081
  sp = STACKTOP; //@line 1082
  return;
 }
 $30 = $4 + 1288 | 0; //@line 1085
 $31 = HEAP32[$30 >> 2] | 0; //@line 1086
 if (!$31) {
  $44 = HEAP32[210] | 0; //@line 1090
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(32) | 0; //@line 1091
  FUNCTION_TABLE_vii[$44 & 31]($28, $6); //@line 1092
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 472; //@line 1095
   $45 = $ReallocAsyncCtx8 + 4 | 0; //@line 1096
   HEAP32[$45 >> 2] = $8; //@line 1097
   $46 = $ReallocAsyncCtx8 + 8 | 0; //@line 1098
   HEAP32[$46 >> 2] = $10; //@line 1099
   $47 = $ReallocAsyncCtx8 + 12 | 0; //@line 1100
   HEAP32[$47 >> 2] = $4; //@line 1101
   $48 = $ReallocAsyncCtx8 + 16 | 0; //@line 1102
   HEAP32[$48 >> 2] = $6; //@line 1103
   $49 = $ReallocAsyncCtx8 + 20 | 0; //@line 1104
   HEAP32[$49 >> 2] = $27; //@line 1105
   $50 = $ReallocAsyncCtx8 + 24 | 0; //@line 1106
   HEAP32[$50 >> 2] = $30; //@line 1107
   $51 = $ReallocAsyncCtx8 + 28 | 0; //@line 1108
   HEAP32[$51 >> 2] = $16; //@line 1109
   sp = STACKTOP; //@line 1110
   return;
  }
  ___async_unwind = 0; //@line 1113
  HEAP32[$ReallocAsyncCtx8 >> 2] = 472; //@line 1114
  $45 = $ReallocAsyncCtx8 + 4 | 0; //@line 1115
  HEAP32[$45 >> 2] = $8; //@line 1116
  $46 = $ReallocAsyncCtx8 + 8 | 0; //@line 1117
  HEAP32[$46 >> 2] = $10; //@line 1118
  $47 = $ReallocAsyncCtx8 + 12 | 0; //@line 1119
  HEAP32[$47 >> 2] = $4; //@line 1120
  $48 = $ReallocAsyncCtx8 + 16 | 0; //@line 1121
  HEAP32[$48 >> 2] = $6; //@line 1122
  $49 = $ReallocAsyncCtx8 + 20 | 0; //@line 1123
  HEAP32[$49 >> 2] = $27; //@line 1124
  $50 = $ReallocAsyncCtx8 + 24 | 0; //@line 1125
  HEAP32[$50 >> 2] = $30; //@line 1126
  $51 = $ReallocAsyncCtx8 + 28 | 0; //@line 1127
  HEAP32[$51 >> 2] = $16; //@line 1128
  sp = STACKTOP; //@line 1129
  return;
 } else {
  $34 = HEAP32[$31 + 8 >> 2] | 0; //@line 1133
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(36) | 0; //@line 1134
  FUNCTION_TABLE_vi[$34 & 1023]($28); //@line 1135
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 471; //@line 1138
   $35 = $ReallocAsyncCtx7 + 4 | 0; //@line 1139
   HEAP32[$35 >> 2] = $27; //@line 1140
   $36 = $ReallocAsyncCtx7 + 8 | 0; //@line 1141
   HEAP32[$36 >> 2] = $8; //@line 1142
   $37 = $ReallocAsyncCtx7 + 12 | 0; //@line 1143
   HEAP32[$37 >> 2] = $10; //@line 1144
   $38 = $ReallocAsyncCtx7 + 16 | 0; //@line 1145
   HEAP32[$38 >> 2] = $4; //@line 1146
   $39 = $ReallocAsyncCtx7 + 20 | 0; //@line 1147
   HEAP32[$39 >> 2] = $6; //@line 1148
   $40 = $ReallocAsyncCtx7 + 24 | 0; //@line 1149
   HEAP32[$40 >> 2] = $30; //@line 1150
   $41 = $ReallocAsyncCtx7 + 28 | 0; //@line 1151
   HEAP32[$41 >> 2] = $28; //@line 1152
   $42 = $ReallocAsyncCtx7 + 32 | 0; //@line 1153
   HEAP32[$42 >> 2] = $16; //@line 1154
   sp = STACKTOP; //@line 1155
   return;
  }
  ___async_unwind = 0; //@line 1158
  HEAP32[$ReallocAsyncCtx7 >> 2] = 471; //@line 1159
  $35 = $ReallocAsyncCtx7 + 4 | 0; //@line 1160
  HEAP32[$35 >> 2] = $27; //@line 1161
  $36 = $ReallocAsyncCtx7 + 8 | 0; //@line 1162
  HEAP32[$36 >> 2] = $8; //@line 1163
  $37 = $ReallocAsyncCtx7 + 12 | 0; //@line 1164
  HEAP32[$37 >> 2] = $10; //@line 1165
  $38 = $ReallocAsyncCtx7 + 16 | 0; //@line 1166
  HEAP32[$38 >> 2] = $4; //@line 1167
  $39 = $ReallocAsyncCtx7 + 20 | 0; //@line 1168
  HEAP32[$39 >> 2] = $6; //@line 1169
  $40 = $ReallocAsyncCtx7 + 24 | 0; //@line 1170
  HEAP32[$40 >> 2] = $30; //@line 1171
  $41 = $ReallocAsyncCtx7 + 28 | 0; //@line 1172
  HEAP32[$41 >> 2] = $28; //@line 1173
  $42 = $ReallocAsyncCtx7 + 32 | 0; //@line 1174
  HEAP32[$42 >> 2] = $16; //@line 1175
  sp = STACKTOP; //@line 1176
  return;
 }
}
function __ZN7LoRaMac21send_frame_on_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $15 = 0, $27 = 0, $30 = 0, $33 = 0, $34 = 0, $61 = 0, $64 = 0, $67 = 0, $70 = 0, $73 = 0, $76 = 0, $82 = 0, $92 = 0, $95 = 0, $99 = 0, $AsyncCtx = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx21 = 0, $AsyncCtx24 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, sp = 0;
 sp = STACKTOP; //@line 13428
 STACKTOP = STACKTOP + 64 | 0; //@line 13429
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 13429
 $vararg_buffer9 = sp + 48 | 0; //@line 13430
 $vararg_buffer7 = sp + 40 | 0; //@line 13431
 $vararg_buffer5 = sp + 32 | 0; //@line 13432
 $vararg_buffer3 = sp + 24 | 0; //@line 13433
 $vararg_buffer1 = sp + 8 | 0; //@line 13434
 $vararg_buffer = sp; //@line 13435
 _printf(12141, $vararg_buffer) | 0; //@line 13436
 HEAP32[$vararg_buffer1 >> 2] = $1 & 255; //@line 13438
 _printf(12239, $vararg_buffer1) | 0; //@line 13439
 $AsyncCtx21 = _emscripten_alloc_async_context(52, sp) | 0; //@line 13440
 _putchar(10) | 0; //@line 13441
 if (___async) {
  HEAP32[$AsyncCtx21 >> 2] = 401; //@line 13444
  HEAP32[$AsyncCtx21 + 4 >> 2] = $vararg_buffer1; //@line 13446
  HEAP32[$AsyncCtx21 + 8 >> 2] = $vararg_buffer; //@line 13448
  HEAP8[$AsyncCtx21 + 12 >> 0] = $1; //@line 13450
  HEAP32[$AsyncCtx21 + 16 >> 2] = $0; //@line 13452
  HEAP32[$AsyncCtx21 + 20 >> 2] = $vararg_buffer3; //@line 13454
  HEAP32[$AsyncCtx21 + 24 >> 2] = $vararg_buffer3; //@line 13456
  HEAP32[$AsyncCtx21 + 28 >> 2] = $vararg_buffer5; //@line 13458
  HEAP32[$AsyncCtx21 + 32 >> 2] = $vararg_buffer5; //@line 13460
  HEAP32[$AsyncCtx21 + 36 >> 2] = $vararg_buffer7; //@line 13462
  HEAP32[$AsyncCtx21 + 40 >> 2] = $vararg_buffer7; //@line 13464
  HEAP32[$AsyncCtx21 + 44 >> 2] = $vararg_buffer9; //@line 13466
  HEAP32[$AsyncCtx21 + 48 >> 2] = $vararg_buffer9; //@line 13468
  sp = STACKTOP; //@line 13469
  STACKTOP = sp; //@line 13470
  return 0; //@line 13470
 }
 _emscripten_free_async_context($AsyncCtx21 | 0); //@line 13472
 HEAP8[$vararg_buffer >> 0] = 0; //@line 13473
 HEAP8[$vararg_buffer1 >> 0] = $1; //@line 13474
 $15 = $0 + 1097 | 0; //@line 13475
 HEAP8[$vararg_buffer1 + 1 >> 0] = HEAP8[$15 >> 0] | 0; //@line 13478
 HEAP8[$vararg_buffer1 + 2 >> 0] = HEAP8[$0 + 1096 >> 0] | 0; //@line 13482
 HEAP32[$vararg_buffer1 + 4 >> 2] = HEAP32[$0 + 1144 >> 2]; //@line 13486
 HEAP32[$vararg_buffer1 + 8 >> 2] = HEAP32[$0 + 1148 >> 2]; //@line 13490
 $27 = $0 + 636 | 0; //@line 13491
 HEAP16[$vararg_buffer1 + 12 >> 1] = HEAP16[$27 >> 1] | 0; //@line 13494
 $30 = HEAP32[$0 >> 2] | 0; //@line 13495
 $33 = HEAP32[(HEAP32[$30 >> 2] | 0) + 32 >> 2] | 0; //@line 13498
 $34 = $0 + 992 | 0; //@line 13499
 $AsyncCtx = _emscripten_alloc_async_context(64, sp) | 0; //@line 13500
 FUNCTION_TABLE_iiiii[$33 & 3]($30, $vararg_buffer1, $vararg_buffer, $34) | 0; //@line 13501
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 402; //@line 13504
  HEAP32[$AsyncCtx + 4 >> 2] = $vararg_buffer3; //@line 13506
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer3; //@line 13508
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer5; //@line 13510
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer5; //@line 13512
  HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 13514
  HEAP32[$AsyncCtx + 24 >> 2] = $15; //@line 13516
  HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer; //@line 13518
  HEAP32[$AsyncCtx + 32 >> 2] = $34; //@line 13520
  HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer7; //@line 13522
  HEAP32[$AsyncCtx + 40 >> 2] = $vararg_buffer7; //@line 13524
  HEAP32[$AsyncCtx + 44 >> 2] = $27; //@line 13526
  HEAP32[$AsyncCtx + 48 >> 2] = $vararg_buffer9; //@line 13528
  HEAP32[$AsyncCtx + 52 >> 2] = $vararg_buffer9; //@line 13530
  HEAP32[$AsyncCtx + 56 >> 2] = $0; //@line 13532
  HEAP32[$AsyncCtx + 60 >> 2] = $vararg_buffer1; //@line 13534
  sp = STACKTOP; //@line 13535
  STACKTOP = sp; //@line 13536
  return 0; //@line 13536
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 13538
 _printf(12141, $vararg_buffer3) | 0; //@line 13539
 _printf(12274, $vararg_buffer5) | 0; //@line 13540
 $AsyncCtx17 = _emscripten_alloc_async_context(48, sp) | 0; //@line 13541
 _putchar(10) | 0; //@line 13542
 if (___async) {
  HEAP32[$AsyncCtx17 >> 2] = 403; //@line 13545
  HEAP32[$AsyncCtx17 + 4 >> 2] = $0; //@line 13547
  HEAP32[$AsyncCtx17 + 8 >> 2] = $15; //@line 13549
  HEAP32[$AsyncCtx17 + 12 >> 2] = $vararg_buffer; //@line 13551
  HEAP32[$AsyncCtx17 + 16 >> 2] = $34; //@line 13553
  HEAP32[$AsyncCtx17 + 20 >> 2] = $vararg_buffer7; //@line 13555
  HEAP32[$AsyncCtx17 + 24 >> 2] = $vararg_buffer7; //@line 13557
  HEAP32[$AsyncCtx17 + 28 >> 2] = $27; //@line 13559
  HEAP32[$AsyncCtx17 + 32 >> 2] = $vararg_buffer9; //@line 13561
  HEAP32[$AsyncCtx17 + 36 >> 2] = $vararg_buffer9; //@line 13563
  HEAP32[$AsyncCtx17 + 40 >> 2] = $0; //@line 13565
  HEAP32[$AsyncCtx17 + 44 >> 2] = $vararg_buffer1; //@line 13567
  sp = STACKTOP; //@line 13568
  STACKTOP = sp; //@line 13569
  return 0; //@line 13569
 }
 _emscripten_free_async_context($AsyncCtx17 | 0); //@line 13571
 $61 = $0 + 264 | 0; //@line 13572
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($61) | 0) + 4 >> 2] = 1; //@line 13575
 $64 = $0 + 288 | 0; //@line 13576
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($64) | 0) + 4 >> 2] = 1; //@line 13579
 $67 = HEAP8[$15 >> 0] | 0; //@line 13580
 HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($64) | 0) + 8 >> 0] = $67; //@line 13583
 $70 = HEAP8[$vararg_buffer >> 0] | 0; //@line 13584
 HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($64) | 0) + 9 >> 0] = $70; //@line 13587
 $73 = HEAP32[$34 >> 2] | 0; //@line 13588
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($64) | 0) + 12 >> 2] = $73; //@line 13591
 $76 = HEAP32[$34 >> 2] | 0; //@line 13592
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($61) | 0) + 8 >> 2] = $76; //@line 13595
 if (!(HEAP8[$0 + 372 >> 0] | 0)) {
  $82 = $0 + 897 | 0; //@line 13600
  HEAP8[$82 >> 0] = (HEAP8[$82 >> 0] | 0) + 1 << 24 >> 24; //@line 13603
 }
 _printf(12141, $vararg_buffer7) | 0; //@line 13605
 HEAP32[$vararg_buffer9 >> 2] = HEAPU16[$27 >> 1]; //@line 13608
 _printf(12289, $vararg_buffer9) | 0; //@line 13609
 $AsyncCtx14 = _emscripten_alloc_async_context(24, sp) | 0; //@line 13610
 _putchar(10) | 0; //@line 13611
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 404; //@line 13614
  HEAP32[$AsyncCtx14 + 4 >> 2] = $0; //@line 13616
  HEAP32[$AsyncCtx14 + 8 >> 2] = $0; //@line 13618
  HEAP32[$AsyncCtx14 + 12 >> 2] = $27; //@line 13620
  HEAP32[$AsyncCtx14 + 16 >> 2] = $vararg_buffer; //@line 13622
  HEAP32[$AsyncCtx14 + 20 >> 2] = $vararg_buffer1; //@line 13624
  sp = STACKTOP; //@line 13625
  STACKTOP = sp; //@line 13626
  return 0; //@line 13626
 }
 _emscripten_free_async_context($AsyncCtx14 | 0); //@line 13628
 $92 = HEAP32[$0 >> 2] | 0; //@line 13629
 $95 = HEAP16[$27 >> 1] & 255; //@line 13632
 $AsyncCtx24 = _emscripten_alloc_async_context(16, sp) | 0; //@line 13633
 __ZN7LoRaPHY11handle_sendEPhh($92, $0 + 381 | 0, $95); //@line 13634
 if (___async) {
  HEAP32[$AsyncCtx24 >> 2] = 405; //@line 13637
  HEAP32[$AsyncCtx24 + 4 >> 2] = $0; //@line 13639
  HEAP32[$AsyncCtx24 + 8 >> 2] = $vararg_buffer; //@line 13641
  HEAP32[$AsyncCtx24 + 12 >> 2] = $vararg_buffer1; //@line 13643
  sp = STACKTOP; //@line 13644
  STACKTOP = sp; //@line 13645
  return 0; //@line 13645
 } else {
  _emscripten_free_async_context($AsyncCtx24 | 0); //@line 13647
  $99 = $0 + 968 | 0; //@line 13648
  HEAP32[$99 >> 2] = HEAP32[$99 >> 2] | 1; //@line 13651
  STACKTOP = sp; //@line 13652
  return 0; //@line 13652
 }
 return 0; //@line 13654
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb_383($0) {
 $0 = $0 | 0;
 var $$054 = 0, $$055 = 0, $$05564 = 0, $$056 = 0, $$05663 = 0, $$05766 = 0, $$06065 = 0, $$158 = 0, $$15862 = 0, $$259 = 0, $$pre$phiZ2D = 0, $10 = 0, $104 = 0, $109 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $24 = 0, $29 = 0, $30 = 0, $4 = 0, $43 = 0, $44 = 0, $45 = 0, $51 = 0, $52 = 0, $56 = 0, $58 = 0, $6 = 0, $64 = 0, $65 = 0, $68 = 0, $70 = 0, $8 = 0, $83 = 0, $95 = 0, $ReallocAsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 25924
 $2 = HEAP8[$0 + 4 >> 0] | 0; //@line 25926
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25928
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25930
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25932
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25934
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25936
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 25938
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 25940
 $18 = HEAP8[$0 + 36 >> 0] & 1; //@line 25943
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 25945
 if (HEAP8[___async_retval >> 0] & 1) {
  HEAP8[$14 >> 0] = HEAP8[$14 >> 0] | 64; //@line 25952
 }
 $24 = $8 + 374 | 0; //@line 25954
 if (!(HEAP8[$24 >> 0] | 0)) {
  $$pre$phiZ2D = $14; //@line 25958
 } else {
  HEAP8[$24 >> 0] = 0; //@line 25960
  HEAP8[$14 >> 0] = HEAP8[$14 >> 0] | 32; //@line 25963
  $$pre$phiZ2D = $14; //@line 25964
 }
 $29 = $8 + 952 | 0; //@line 25966
 $30 = HEAP32[$29 >> 2] | 0; //@line 25967
 HEAP8[$8 + 382 >> 0] = $30; //@line 25970
 HEAP8[$8 + 383 >> 0] = $30 >>> 8; //@line 25974
 HEAP8[$8 + 384 >> 0] = $30 >>> 16; //@line 25978
 HEAP8[$8 + 385 >> 0] = $30 >>> 24; //@line 25982
 $43 = $8 + 386 | 0; //@line 25984
 HEAP8[$43 >> 0] = HEAP8[$$pre$phiZ2D >> 0] | 0; //@line 25985
 $44 = $8 + 956 | 0; //@line 25986
 $45 = HEAP32[$44 >> 2] | 0; //@line 25987
 HEAP8[$8 + 387 >> 0] = $45; //@line 25990
 HEAP8[$8 + 388 >> 0] = $45 >>> 8; //@line 25994
 $51 = $8 + 4 | 0; //@line 25995
 __ZN14LoRaMacCommand30copy_repeat_commands_to_bufferEv($51); //@line 25996
 $52 = __ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($51) | 0; //@line 25997
 do {
  if ($18) {
   label = 16; //@line 26000
  } else {
   if (!(HEAP8[$6 >> 0] | 0)) {
    label = 16; //@line 26005
   } else {
    if (!(__ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($51) | 0)) {
     __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($51); //@line 26009
     $$05564 = $2; //@line 26010
     $$05663 = $4; //@line 26010
     $$15862 = 8; //@line 26010
     label = 20; //@line 26011
     break;
    }
    $56 = $52 & 255; //@line 26014
    if (($52 & 255) >= 16) {
     HEAP8[$6 >> 0] = $52; //@line 26017
     $$055 = 0; //@line 26019
     $$056 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($51) | 0; //@line 26019
     $$158 = 8; //@line 26019
     label = 19; //@line 26020
     break;
    }
    $58 = HEAP8[$$pre$phiZ2D >> 0] | 0; //@line 26023
    $64 = ($58 & 255) + $56 & 15 | $58 & -16; //@line 26029
    HEAP8[$$pre$phiZ2D >> 0] = $64; //@line 26030
    HEAP8[$43 >> 0] = $64; //@line 26031
    $65 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($51) | 0; //@line 26032
    if (!($52 << 24 >> 24)) {
     __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($51); //@line 26035
     $$05564 = $2; //@line 26036
     $$05663 = $4; //@line 26036
     $$15862 = 8; //@line 26036
     label = 20; //@line 26037
     break;
    } else {
     $$05766 = 8; //@line 26040
     $$06065 = 0; //@line 26040
     $68 = 0; //@line 26040
     while (1) {
      $70 = $$05766 + 1 << 24 >> 24; //@line 26044
      HEAP8[($$05766 & 255) + ($8 + 381) >> 0] = HEAP8[$65 + $68 >> 0] | 0; //@line 26047
      $$06065 = $$06065 + 1 << 16 >> 16; //@line 26048
      $68 = $$06065 & 65535; //@line 26049
      if ($68 >>> 0 >= $56 >>> 0) {
       $$055 = $2; //@line 26054
       $$056 = $4; //@line 26054
       $$158 = $70; //@line 26054
       label = 19; //@line 26055
       break;
      } else {
       $$05766 = $70; //@line 26052
      }
     }
    }
   }
  }
 } while (0);
 if ((label | 0) == 16) {
  if (!($52 << 24 >> 24)) {
   $$055 = $2; //@line 26066
   $$056 = $4; //@line 26066
   $$158 = 8; //@line 26066
   label = 19; //@line 26067
  } else {
   if (__ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($51) | 0) {
    HEAP8[$6 >> 0] = $52; //@line 26071
    $$055 = 0; //@line 26073
    $$056 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($51) | 0; //@line 26073
    $$158 = 8; //@line 26073
    label = 19; //@line 26074
   } else {
    $$055 = $2; //@line 26076
    $$056 = $4; //@line 26076
    $$158 = 8; //@line 26076
    label = 19; //@line 26077
   }
  }
 }
 if ((label | 0) == 19) {
  __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($51); //@line 26082
  if (!$$056) {
   $$054 = 0; //@line 26085
   $$259 = $$158; //@line 26085
  } else {
   $$05564 = $$055; //@line 26087
   $$05663 = $$056; //@line 26087
   $$15862 = $$158; //@line 26087
   label = 20; //@line 26088
  }
 }
 do {
  if ((label | 0) == 20) {
   if (!(HEAP8[$6 >> 0] | 0)) {
    $$054 = 0; //@line 26096
    $$259 = $$15862; //@line 26096
   } else {
    $83 = $$15862 + 1 << 24 >> 24; //@line 26098
    HEAP8[($$15862 & 255) + ($8 + 381) >> 0] = $$05564; //@line 26101
    if (!($$05564 << 24 >> 24)) {
     __ZN14LoRaMacCommand20clear_command_bufferEv($51); //@line 26104
     $95 = (__Z15encrypt_payloadPKhtS0_jhjPh($$05663, HEAPU8[$6 >> 0] | 0, $8 + 912 | 0, HEAP32[$29 >> 2] | 0, 0, HEAP32[$44 >> 2] | 0, ($83 & 255) + ($8 + 381) | 0) | 0) == 0; //@line 26113
     $$054 = $95 ? 0 : -1014; //@line 26115
     $$259 = $83; //@line 26115
     break;
    } else {
     $104 = (__Z15encrypt_payloadPKhtS0_jhjPh($$05663, HEAPU8[$6 >> 0] | 0, $8 + 928 | 0, HEAP32[$29 >> 2] | 0, 0, HEAP32[$44 >> 2] | 0, ($83 & 255) + ($8 + 381) | 0) | 0) == 0; //@line 26126
     $$054 = $104 ? 0 : -1014; //@line 26128
     $$259 = $83; //@line 26128
     break;
    }
   }
  }
 } while (0);
 $109 = (HEAPU8[$6 >> 0] | 0) + ($$259 & 255) & 65535; //@line 26138
 HEAP16[$12 >> 1] = $109; //@line 26139
 $111 = HEAP32[$29 >> 2] | 0; //@line 26141
 $112 = HEAP32[$44 >> 2] | 0; //@line 26142
 $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 26143
 $113 = __Z11compute_micPKhtS0_jhjPj($20, $109, $8 + 912 | 0, $111, 0, $112, $10) | 0; //@line 26144
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 409; //@line 26147
  $114 = $ReallocAsyncCtx + 4 | 0; //@line 26148
  HEAP32[$114 >> 2] = $$054; //@line 26149
  $115 = $ReallocAsyncCtx + 8 | 0; //@line 26150
  HEAP32[$115 >> 2] = $10; //@line 26151
  $116 = $ReallocAsyncCtx + 12 | 0; //@line 26152
  HEAP32[$116 >> 2] = $12; //@line 26153
  $117 = $ReallocAsyncCtx + 16 | 0; //@line 26154
  HEAP32[$117 >> 2] = $8; //@line 26155
  $118 = $ReallocAsyncCtx + 20 | 0; //@line 26156
  HEAP32[$118 >> 2] = $16; //@line 26157
  sp = STACKTOP; //@line 26158
  return;
 }
 HEAP32[___async_retval >> 2] = $113; //@line 26162
 ___async_unwind = 0; //@line 26163
 HEAP32[$ReallocAsyncCtx >> 2] = 409; //@line 26164
 $114 = $ReallocAsyncCtx + 4 | 0; //@line 26165
 HEAP32[$114 >> 2] = $$054; //@line 26166
 $115 = $ReallocAsyncCtx + 8 | 0; //@line 26167
 HEAP32[$115 >> 2] = $10; //@line 26168
 $116 = $ReallocAsyncCtx + 12 | 0; //@line 26169
 HEAP32[$116 >> 2] = $12; //@line 26170
 $117 = $ReallocAsyncCtx + 16 | 0; //@line 26171
 HEAP32[$117 >> 2] = $8; //@line 26172
 $118 = $ReallocAsyncCtx + 20 | 0; //@line 26173
 HEAP32[$118 >> 2] = $16; //@line 26174
 sp = STACKTOP; //@line 26175
 return;
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_85($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $12 = 0, $13 = 0, $14 = 0, $17 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $52 = 0, $53 = 0, $55 = 0, $56 = 0, $57 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 22700
 STACKTOP = STACKTOP + 16 | 0; //@line 22701
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 22701
 $$byval_copy = sp; //@line 22702
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22704
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22706
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22708
 if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($4 + 4 | 0) | 0) {
  HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0) >> 2] = 4; //@line 22714
  $12 = HEAP8[$2 >> 0] | 16; //@line 22716
  HEAP8[$2 >> 0] = $12; //@line 22717
  $14 = $12; //@line 22718
 } else {
  $14 = HEAP8[$2 >> 0] | 0; //@line 22721
 }
 $13 = $14 & -33; //@line 22723
 HEAP8[$2 >> 0] = $13; //@line 22724
 do {
  if (!($13 & 2)) {
   $48 = $13; //@line 22729
  } else {
   $17 = $13 & -3; //@line 22731
   HEAP8[$2 >> 0] = $17; //@line 22732
   if ((HEAP32[$4 + 360 >> 2] | 0) == 2) {
    $22 = HEAP32[$4 + 1328 >> 2] | 0; //@line 22738
    HEAP32[$6 >> 2] = 273; //@line 22739
    HEAP32[$6 + 4 >> 2] = 0; //@line 22741
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 22742
    HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 22743
    HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 22743
    $23 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($22, $4, $$byval_copy) | 0; //@line 22744
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 381; //@line 22747
     $24 = $ReallocAsyncCtx8 + 4 | 0; //@line 22748
     HEAP32[$24 >> 2] = $2; //@line 22749
     $25 = $ReallocAsyncCtx8 + 8 | 0; //@line 22750
     HEAP32[$25 >> 2] = $4; //@line 22751
     $26 = $ReallocAsyncCtx8 + 12 | 0; //@line 22752
     HEAP32[$26 >> 2] = $6; //@line 22753
     sp = STACKTOP; //@line 22754
     STACKTOP = sp; //@line 22755
     return;
    }
    HEAP32[___async_retval >> 2] = $23; //@line 22758
    ___async_unwind = 0; //@line 22759
    HEAP32[$ReallocAsyncCtx8 >> 2] = 381; //@line 22760
    $24 = $ReallocAsyncCtx8 + 4 | 0; //@line 22761
    HEAP32[$24 >> 2] = $2; //@line 22762
    $25 = $ReallocAsyncCtx8 + 8 | 0; //@line 22763
    HEAP32[$25 >> 2] = $4; //@line 22764
    $26 = $ReallocAsyncCtx8 + 12 | 0; //@line 22765
    HEAP32[$26 >> 2] = $6; //@line 22766
    sp = STACKTOP; //@line 22767
    STACKTOP = sp; //@line 22768
    return;
   }
   if ($17 & 4) {
    $46 = $17 & -5; //@line 22773
    HEAP8[$2 >> 0] = $46; //@line 22774
    $48 = $46; //@line 22775
    break;
   }
   $31 = HEAP32[$4 + 1324 >> 2] | 0; //@line 22779
   $32 = $31 + 16 | 0; //@line 22780
   $34 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 22782
   $35 = $31 + 28 | 0; //@line 22783
   $36 = HEAP32[$35 >> 2] | 0; //@line 22784
   if (!$36) {
    $ReallocAsyncCtx13 = _emscripten_realloc_async_context(24) | 0; //@line 22787
    _mbed_assert_internal(13874, 13879, 1102); //@line 22788
    if (___async) {
     HEAP32[$ReallocAsyncCtx13 >> 2] = 383; //@line 22791
     $38 = $ReallocAsyncCtx13 + 4 | 0; //@line 22792
     HEAP32[$38 >> 2] = $35; //@line 22793
     $39 = $ReallocAsyncCtx13 + 8 | 0; //@line 22794
     HEAP32[$39 >> 2] = $32; //@line 22795
     $40 = $ReallocAsyncCtx13 + 12 | 0; //@line 22796
     HEAP32[$40 >> 2] = $34; //@line 22797
     $41 = $ReallocAsyncCtx13 + 16 | 0; //@line 22798
     HEAP32[$41 >> 2] = $2; //@line 22799
     $42 = $ReallocAsyncCtx13 + 20 | 0; //@line 22800
     HEAP32[$42 >> 2] = $4; //@line 22801
     sp = STACKTOP; //@line 22802
     STACKTOP = sp; //@line 22803
     return;
    }
    ___async_unwind = 0; //@line 22805
    HEAP32[$ReallocAsyncCtx13 >> 2] = 383; //@line 22806
    $38 = $ReallocAsyncCtx13 + 4 | 0; //@line 22807
    HEAP32[$38 >> 2] = $35; //@line 22808
    $39 = $ReallocAsyncCtx13 + 8 | 0; //@line 22809
    HEAP32[$39 >> 2] = $32; //@line 22810
    $40 = $ReallocAsyncCtx13 + 12 | 0; //@line 22811
    HEAP32[$40 >> 2] = $34; //@line 22812
    $41 = $ReallocAsyncCtx13 + 16 | 0; //@line 22813
    HEAP32[$41 >> 2] = $2; //@line 22814
    $42 = $ReallocAsyncCtx13 + 20 | 0; //@line 22815
    HEAP32[$42 >> 2] = $4; //@line 22816
    sp = STACKTOP; //@line 22817
    STACKTOP = sp; //@line 22818
    return;
   } else {
    $43 = HEAP32[$36 >> 2] | 0; //@line 22820
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 22821
    FUNCTION_TABLE_vii[$43 & 31]($32, $34); //@line 22822
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 384; //@line 22825
     $44 = $ReallocAsyncCtx4 + 4 | 0; //@line 22826
     HEAP32[$44 >> 2] = $2; //@line 22827
     $45 = $ReallocAsyncCtx4 + 8 | 0; //@line 22828
     HEAP32[$45 >> 2] = $4; //@line 22829
     sp = STACKTOP; //@line 22830
     STACKTOP = sp; //@line 22831
     return;
    }
    ___async_unwind = 0; //@line 22833
    HEAP32[$ReallocAsyncCtx4 >> 2] = 384; //@line 22834
    $44 = $ReallocAsyncCtx4 + 4 | 0; //@line 22835
    HEAP32[$44 >> 2] = $2; //@line 22836
    $45 = $ReallocAsyncCtx4 + 8 | 0; //@line 22837
    HEAP32[$45 >> 2] = $4; //@line 22838
    sp = STACKTOP; //@line 22839
    STACKTOP = sp; //@line 22840
    return;
   }
  }
 } while (0);
 if (!($48 & 16)) {
  STACKTOP = sp; //@line 22847
  return;
 }
 HEAP8[$2 >> 0] = $48 & -17; //@line 22850
 $52 = HEAP32[$4 + 1324 >> 2] | 0; //@line 22852
 $53 = $52 + 48 | 0; //@line 22853
 $55 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 22855
 $56 = $52 + 60 | 0; //@line 22856
 $57 = HEAP32[$56 >> 2] | 0; //@line 22857
 if (!$57) {
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(16) | 0; //@line 22860
  _mbed_assert_internal(13874, 13879, 1102); //@line 22861
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 385; //@line 22864
   $59 = $ReallocAsyncCtx12 + 4 | 0; //@line 22865
   HEAP32[$59 >> 2] = $56; //@line 22866
   $60 = $ReallocAsyncCtx12 + 8 | 0; //@line 22867
   HEAP32[$60 >> 2] = $53; //@line 22868
   $61 = $ReallocAsyncCtx12 + 12 | 0; //@line 22869
   HEAP32[$61 >> 2] = $55; //@line 22870
   sp = STACKTOP; //@line 22871
   STACKTOP = sp; //@line 22872
   return;
  }
  ___async_unwind = 0; //@line 22874
  HEAP32[$ReallocAsyncCtx12 >> 2] = 385; //@line 22875
  $59 = $ReallocAsyncCtx12 + 4 | 0; //@line 22876
  HEAP32[$59 >> 2] = $56; //@line 22877
  $60 = $ReallocAsyncCtx12 + 8 | 0; //@line 22878
  HEAP32[$60 >> 2] = $53; //@line 22879
  $61 = $ReallocAsyncCtx12 + 12 | 0; //@line 22880
  HEAP32[$61 >> 2] = $55; //@line 22881
  sp = STACKTOP; //@line 22882
  STACKTOP = sp; //@line 22883
  return;
 } else {
  $62 = HEAP32[$57 >> 2] | 0; //@line 22885
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 22886
  FUNCTION_TABLE_vii[$62 & 31]($53, $55); //@line 22887
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 386; //@line 22890
   sp = STACKTOP; //@line 22891
   STACKTOP = sp; //@line 22892
   return;
  }
  ___async_unwind = 0; //@line 22894
  HEAP32[$ReallocAsyncCtx5 >> 2] = 386; //@line 22895
  sp = STACKTOP; //@line 22896
  STACKTOP = sp; //@line 22897
  return;
 }
}
function __ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $45 = 0, $47 = 0, $48 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 3524
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3526
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3528
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3530
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3532
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3534
 $$pre = HEAP32[$8 >> 2] | 0; //@line 3535
 if ($$pre | 0) {
  $13 = HEAP32[$$pre + 4 >> 2] | 0; //@line 3539
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 3540
  FUNCTION_TABLE_vii[$13 & 31]($6, $2); //@line 3541
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 230; //@line 3544
   $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 3545
   HEAP32[$14 >> 2] = $2; //@line 3546
   $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 3547
   HEAP32[$15 >> 2] = $4; //@line 3548
   $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 3549
   HEAP32[$16 >> 2] = $10; //@line 3550
   $17 = $ReallocAsyncCtx2 + 16 | 0; //@line 3551
   HEAP32[$17 >> 2] = $8; //@line 3552
   sp = STACKTOP; //@line 3553
   return;
  }
  ___async_unwind = 0; //@line 3556
  HEAP32[$ReallocAsyncCtx2 >> 2] = 230; //@line 3557
  $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 3558
  HEAP32[$14 >> 2] = $2; //@line 3559
  $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 3560
  HEAP32[$15 >> 2] = $4; //@line 3561
  $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 3562
  HEAP32[$16 >> 2] = $10; //@line 3563
  $17 = $ReallocAsyncCtx2 + 16 | 0; //@line 3564
  HEAP32[$17 >> 2] = $8; //@line 3565
  sp = STACKTOP; //@line 3566
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 3569
 $18 = $2 + 16 | 0; //@line 3570
 $19 = $2 + 28 | 0; //@line 3571
 $20 = HEAP32[$19 >> 2] | 0; //@line 3572
 if ($20 | 0) {
  $22 = $10 + 1896 | 0; //@line 3575
  if (($22 | 0) != ($18 | 0)) {
   $24 = $10 + 1908 | 0; //@line 3578
   $25 = HEAP32[$24 >> 2] | 0; //@line 3579
   if (!$25) {
    $36 = HEAP32[$20 + 4 >> 2] | 0; //@line 3583
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 3584
    FUNCTION_TABLE_vii[$36 & 31]($22, $18); //@line 3585
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 232; //@line 3588
     $37 = $ReallocAsyncCtx4 + 4 | 0; //@line 3589
     HEAP32[$37 >> 2] = $19; //@line 3590
     $38 = $ReallocAsyncCtx4 + 8 | 0; //@line 3591
     HEAP32[$38 >> 2] = $24; //@line 3592
     $39 = $ReallocAsyncCtx4 + 12 | 0; //@line 3593
     HEAP32[$39 >> 2] = $2; //@line 3594
     $40 = $ReallocAsyncCtx4 + 16 | 0; //@line 3595
     HEAP32[$40 >> 2] = $10; //@line 3596
     sp = STACKTOP; //@line 3597
     return;
    }
    ___async_unwind = 0; //@line 3600
    HEAP32[$ReallocAsyncCtx4 >> 2] = 232; //@line 3601
    $37 = $ReallocAsyncCtx4 + 4 | 0; //@line 3602
    HEAP32[$37 >> 2] = $19; //@line 3603
    $38 = $ReallocAsyncCtx4 + 8 | 0; //@line 3604
    HEAP32[$38 >> 2] = $24; //@line 3605
    $39 = $ReallocAsyncCtx4 + 12 | 0; //@line 3606
    HEAP32[$39 >> 2] = $2; //@line 3607
    $40 = $ReallocAsyncCtx4 + 16 | 0; //@line 3608
    HEAP32[$40 >> 2] = $10; //@line 3609
    sp = STACKTOP; //@line 3610
    return;
   } else {
    $28 = HEAP32[$25 + 8 >> 2] | 0; //@line 3614
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(28) | 0; //@line 3615
    FUNCTION_TABLE_vi[$28 & 1023]($22); //@line 3616
    if (___async) {
     HEAP32[$ReallocAsyncCtx3 >> 2] = 231; //@line 3619
     $29 = $ReallocAsyncCtx3 + 4 | 0; //@line 3620
     HEAP32[$29 >> 2] = $19; //@line 3621
     $30 = $ReallocAsyncCtx3 + 8 | 0; //@line 3622
     HEAP32[$30 >> 2] = $24; //@line 3623
     $31 = $ReallocAsyncCtx3 + 12 | 0; //@line 3624
     HEAP32[$31 >> 2] = $22; //@line 3625
     $32 = $ReallocAsyncCtx3 + 16 | 0; //@line 3626
     HEAP32[$32 >> 2] = $18; //@line 3627
     $33 = $ReallocAsyncCtx3 + 20 | 0; //@line 3628
     HEAP32[$33 >> 2] = $2; //@line 3629
     $34 = $ReallocAsyncCtx3 + 24 | 0; //@line 3630
     HEAP32[$34 >> 2] = $10; //@line 3631
     sp = STACKTOP; //@line 3632
     return;
    }
    ___async_unwind = 0; //@line 3635
    HEAP32[$ReallocAsyncCtx3 >> 2] = 231; //@line 3636
    $29 = $ReallocAsyncCtx3 + 4 | 0; //@line 3637
    HEAP32[$29 >> 2] = $19; //@line 3638
    $30 = $ReallocAsyncCtx3 + 8 | 0; //@line 3639
    HEAP32[$30 >> 2] = $24; //@line 3640
    $31 = $ReallocAsyncCtx3 + 12 | 0; //@line 3641
    HEAP32[$31 >> 2] = $22; //@line 3642
    $32 = $ReallocAsyncCtx3 + 16 | 0; //@line 3643
    HEAP32[$32 >> 2] = $18; //@line 3644
    $33 = $ReallocAsyncCtx3 + 20 | 0; //@line 3645
    HEAP32[$33 >> 2] = $2; //@line 3646
    $34 = $ReallocAsyncCtx3 + 24 | 0; //@line 3647
    HEAP32[$34 >> 2] = $10; //@line 3648
    sp = STACKTOP; //@line 3649
    return;
   }
  }
 }
 $41 = $2 + 32 | 0; //@line 3654
 $42 = $2 + 44 | 0; //@line 3655
 $43 = HEAP32[$42 >> 2] | 0; //@line 3656
 if (!$43) {
  return;
 }
 $45 = $10 + 1912 | 0; //@line 3661
 if (($45 | 0) == ($41 | 0)) {
  return;
 }
 $47 = $10 + 1924 | 0; //@line 3666
 $48 = HEAP32[$47 >> 2] | 0; //@line 3667
 if (!$48) {
  $57 = HEAP32[$43 + 4 >> 2] | 0; //@line 3671
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 3672
  FUNCTION_TABLE_vii[$57 & 31]($45, $41); //@line 3673
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 234; //@line 3676
   $58 = $ReallocAsyncCtx6 + 4 | 0; //@line 3677
   HEAP32[$58 >> 2] = $42; //@line 3678
   $59 = $ReallocAsyncCtx6 + 8 | 0; //@line 3679
   HEAP32[$59 >> 2] = $47; //@line 3680
   sp = STACKTOP; //@line 3681
   return;
  }
  ___async_unwind = 0; //@line 3684
  HEAP32[$ReallocAsyncCtx6 >> 2] = 234; //@line 3685
  $58 = $ReallocAsyncCtx6 + 4 | 0; //@line 3686
  HEAP32[$58 >> 2] = $42; //@line 3687
  $59 = $ReallocAsyncCtx6 + 8 | 0; //@line 3688
  HEAP32[$59 >> 2] = $47; //@line 3689
  sp = STACKTOP; //@line 3690
  return;
 } else {
  $51 = HEAP32[$48 + 8 >> 2] | 0; //@line 3694
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 3695
  FUNCTION_TABLE_vi[$51 & 1023]($45); //@line 3696
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 233; //@line 3699
   $52 = $ReallocAsyncCtx5 + 4 | 0; //@line 3700
   HEAP32[$52 >> 2] = $42; //@line 3701
   $53 = $ReallocAsyncCtx5 + 8 | 0; //@line 3702
   HEAP32[$53 >> 2] = $47; //@line 3703
   $54 = $ReallocAsyncCtx5 + 12 | 0; //@line 3704
   HEAP32[$54 >> 2] = $45; //@line 3705
   $55 = $ReallocAsyncCtx5 + 16 | 0; //@line 3706
   HEAP32[$55 >> 2] = $41; //@line 3707
   sp = STACKTOP; //@line 3708
   return;
  }
  ___async_unwind = 0; //@line 3711
  HEAP32[$ReallocAsyncCtx5 >> 2] = 233; //@line 3712
  $52 = $ReallocAsyncCtx5 + 4 | 0; //@line 3713
  HEAP32[$52 >> 2] = $42; //@line 3714
  $53 = $ReallocAsyncCtx5 + 8 | 0; //@line 3715
  HEAP32[$53 >> 2] = $47; //@line 3716
  $54 = $ReallocAsyncCtx5 + 12 | 0; //@line 3717
  HEAP32[$54 >> 2] = $45; //@line 3718
  $55 = $ReallocAsyncCtx5 + 16 | 0; //@line 3719
  HEAP32[$55 >> 2] = $41; //@line 3720
  sp = STACKTOP; //@line 3721
  return;
 }
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_196($0) {
 $0 = $0 | 0;
 var $$pre120 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 1344
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1346
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1348
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1350
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1352
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 1354
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 1356
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 1358
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 1360
 $$pre120 = HEAP32[$2 >> 2] | 0; //@line 1361
 if ($$pre120 | 0) {
  $19 = HEAP32[$$pre120 + 4 >> 2] | 0; //@line 1365
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(32) | 0; //@line 1366
  FUNCTION_TABLE_vii[$19 & 31]($14, $10); //@line 1367
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 472; //@line 1370
   $20 = $ReallocAsyncCtx8 + 4 | 0; //@line 1371
   HEAP32[$20 >> 2] = $4; //@line 1372
   $21 = $ReallocAsyncCtx8 + 8 | 0; //@line 1373
   HEAP32[$21 >> 2] = $6; //@line 1374
   $22 = $ReallocAsyncCtx8 + 12 | 0; //@line 1375
   HEAP32[$22 >> 2] = $8; //@line 1376
   $23 = $ReallocAsyncCtx8 + 16 | 0; //@line 1377
   HEAP32[$23 >> 2] = $10; //@line 1378
   $24 = $ReallocAsyncCtx8 + 20 | 0; //@line 1379
   HEAP32[$24 >> 2] = $2; //@line 1380
   $25 = $ReallocAsyncCtx8 + 24 | 0; //@line 1381
   HEAP32[$25 >> 2] = $12; //@line 1382
   $26 = $ReallocAsyncCtx8 + 28 | 0; //@line 1383
   HEAP32[$26 >> 2] = $16; //@line 1384
   sp = STACKTOP; //@line 1385
   return;
  }
  ___async_unwind = 0; //@line 1388
  HEAP32[$ReallocAsyncCtx8 >> 2] = 472; //@line 1389
  $20 = $ReallocAsyncCtx8 + 4 | 0; //@line 1390
  HEAP32[$20 >> 2] = $4; //@line 1391
  $21 = $ReallocAsyncCtx8 + 8 | 0; //@line 1392
  HEAP32[$21 >> 2] = $6; //@line 1393
  $22 = $ReallocAsyncCtx8 + 12 | 0; //@line 1394
  HEAP32[$22 >> 2] = $8; //@line 1395
  $23 = $ReallocAsyncCtx8 + 16 | 0; //@line 1396
  HEAP32[$23 >> 2] = $10; //@line 1397
  $24 = $ReallocAsyncCtx8 + 20 | 0; //@line 1398
  HEAP32[$24 >> 2] = $2; //@line 1399
  $25 = $ReallocAsyncCtx8 + 24 | 0; //@line 1400
  HEAP32[$25 >> 2] = $12; //@line 1401
  $26 = $ReallocAsyncCtx8 + 28 | 0; //@line 1402
  HEAP32[$26 >> 2] = $16; //@line 1403
  sp = STACKTOP; //@line 1404
  return;
 }
 HEAP32[$12 >> 2] = 0; //@line 1407
 $27 = $16 + 12 | 0; //@line 1408
 HEAP32[$16 >> 2] = 474; //@line 1409
 HEAP32[$16 + 4 >> 2] = 0; //@line 1411
 HEAP32[$16 + 8 >> 2] = $8; //@line 1413
 HEAP32[$27 >> 2] = 836; //@line 1414
 $28 = $8 + 1228 | 0; //@line 1415
 if (($28 | 0) == ($16 | 0)) {
  $51 = HEAP32[211] | 0; //@line 1419
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 1420
  FUNCTION_TABLE_vi[$51 & 1023]($16); //@line 1421
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 477; //@line 1424
   $52 = $ReallocAsyncCtx12 + 4 | 0; //@line 1425
   HEAP32[$52 >> 2] = $16; //@line 1426
   $53 = $ReallocAsyncCtx12 + 8 | 0; //@line 1427
   HEAP32[$53 >> 2] = $6; //@line 1428
   $54 = $ReallocAsyncCtx12 + 12 | 0; //@line 1429
   HEAP32[$54 >> 2] = $8; //@line 1430
   $55 = $ReallocAsyncCtx12 + 16 | 0; //@line 1431
   HEAP32[$55 >> 2] = $4; //@line 1432
   sp = STACKTOP; //@line 1433
   return;
  }
  ___async_unwind = 0; //@line 1436
  HEAP32[$ReallocAsyncCtx12 >> 2] = 477; //@line 1437
  $52 = $ReallocAsyncCtx12 + 4 | 0; //@line 1438
  HEAP32[$52 >> 2] = $16; //@line 1439
  $53 = $ReallocAsyncCtx12 + 8 | 0; //@line 1440
  HEAP32[$53 >> 2] = $6; //@line 1441
  $54 = $ReallocAsyncCtx12 + 12 | 0; //@line 1442
  HEAP32[$54 >> 2] = $8; //@line 1443
  $55 = $ReallocAsyncCtx12 + 16 | 0; //@line 1444
  HEAP32[$55 >> 2] = $4; //@line 1445
  sp = STACKTOP; //@line 1446
  return;
 }
 $30 = $8 + 1240 | 0; //@line 1449
 $31 = HEAP32[$30 >> 2] | 0; //@line 1450
 if (!$31) {
  $43 = HEAP32[210] | 0; //@line 1454
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(28) | 0; //@line 1455
  FUNCTION_TABLE_vii[$43 & 31]($28, $16); //@line 1456
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 476; //@line 1459
   $44 = $ReallocAsyncCtx11 + 4 | 0; //@line 1460
   HEAP32[$44 >> 2] = $4; //@line 1461
   $45 = $ReallocAsyncCtx11 + 8 | 0; //@line 1462
   HEAP32[$45 >> 2] = $16; //@line 1463
   $46 = $ReallocAsyncCtx11 + 12 | 0; //@line 1464
   HEAP32[$46 >> 2] = $27; //@line 1465
   $47 = $ReallocAsyncCtx11 + 16 | 0; //@line 1466
   HEAP32[$47 >> 2] = $30; //@line 1467
   $48 = $ReallocAsyncCtx11 + 20 | 0; //@line 1468
   HEAP32[$48 >> 2] = $6; //@line 1469
   $49 = $ReallocAsyncCtx11 + 24 | 0; //@line 1470
   HEAP32[$49 >> 2] = $8; //@line 1471
   sp = STACKTOP; //@line 1472
   return;
  }
  ___async_unwind = 0; //@line 1475
  HEAP32[$ReallocAsyncCtx11 >> 2] = 476; //@line 1476
  $44 = $ReallocAsyncCtx11 + 4 | 0; //@line 1477
  HEAP32[$44 >> 2] = $4; //@line 1478
  $45 = $ReallocAsyncCtx11 + 8 | 0; //@line 1479
  HEAP32[$45 >> 2] = $16; //@line 1480
  $46 = $ReallocAsyncCtx11 + 12 | 0; //@line 1481
  HEAP32[$46 >> 2] = $27; //@line 1482
  $47 = $ReallocAsyncCtx11 + 16 | 0; //@line 1483
  HEAP32[$47 >> 2] = $30; //@line 1484
  $48 = $ReallocAsyncCtx11 + 20 | 0; //@line 1485
  HEAP32[$48 >> 2] = $6; //@line 1486
  $49 = $ReallocAsyncCtx11 + 24 | 0; //@line 1487
  HEAP32[$49 >> 2] = $8; //@line 1488
  sp = STACKTOP; //@line 1489
  return;
 } else {
  $34 = HEAP32[$31 + 8 >> 2] | 0; //@line 1493
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(32) | 0; //@line 1494
  FUNCTION_TABLE_vi[$34 & 1023]($28); //@line 1495
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 475; //@line 1498
   $35 = $ReallocAsyncCtx10 + 4 | 0; //@line 1499
   HEAP32[$35 >> 2] = $4; //@line 1500
   $36 = $ReallocAsyncCtx10 + 8 | 0; //@line 1501
   HEAP32[$36 >> 2] = $16; //@line 1502
   $37 = $ReallocAsyncCtx10 + 12 | 0; //@line 1503
   HEAP32[$37 >> 2] = $30; //@line 1504
   $38 = $ReallocAsyncCtx10 + 16 | 0; //@line 1505
   HEAP32[$38 >> 2] = $28; //@line 1506
   $39 = $ReallocAsyncCtx10 + 20 | 0; //@line 1507
   HEAP32[$39 >> 2] = $27; //@line 1508
   $40 = $ReallocAsyncCtx10 + 24 | 0; //@line 1509
   HEAP32[$40 >> 2] = $6; //@line 1510
   $41 = $ReallocAsyncCtx10 + 28 | 0; //@line 1511
   HEAP32[$41 >> 2] = $8; //@line 1512
   sp = STACKTOP; //@line 1513
   return;
  }
  ___async_unwind = 0; //@line 1516
  HEAP32[$ReallocAsyncCtx10 >> 2] = 475; //@line 1517
  $35 = $ReallocAsyncCtx10 + 4 | 0; //@line 1518
  HEAP32[$35 >> 2] = $4; //@line 1519
  $36 = $ReallocAsyncCtx10 + 8 | 0; //@line 1520
  HEAP32[$36 >> 2] = $16; //@line 1521
  $37 = $ReallocAsyncCtx10 + 12 | 0; //@line 1522
  HEAP32[$37 >> 2] = $30; //@line 1523
  $38 = $ReallocAsyncCtx10 + 16 | 0; //@line 1524
  HEAP32[$38 >> 2] = $28; //@line 1525
  $39 = $ReallocAsyncCtx10 + 20 | 0; //@line 1526
  HEAP32[$39 >> 2] = $27; //@line 1527
  $40 = $ReallocAsyncCtx10 + 24 | 0; //@line 1528
  HEAP32[$40 >> 2] = $6; //@line 1529
  $41 = $ReallocAsyncCtx10 + 28 | 0; //@line 1530
  HEAP32[$41 >> 2] = $8; //@line 1531
  sp = STACKTOP; //@line 1532
  return;
 }
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_88($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $$pre16 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $44 = 0, $45 = 0, $47 = 0, $48 = 0, $49 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 22980
 STACKTOP = STACKTOP + 16 | 0; //@line 22981
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 22981
 $$byval_copy = sp; //@line 22982
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22984
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22986
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22988
 $$pre16 = HEAP8[$2 >> 0] | 0; //@line 22989
 do {
  if (!($$pre16 & 2)) {
   $40 = $$pre16; //@line 22994
  } else {
   $9 = $$pre16 & -3; //@line 22996
   HEAP8[$2 >> 0] = $9; //@line 22997
   if ((HEAP32[$4 + 360 >> 2] | 0) == 2) {
    $14 = HEAP32[$4 + 1328 >> 2] | 0; //@line 23003
    HEAP32[$6 >> 2] = 273; //@line 23004
    HEAP32[$6 + 4 >> 2] = 0; //@line 23006
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 23007
    HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 23008
    HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 23008
    $15 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($14, $4, $$byval_copy) | 0; //@line 23009
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 381; //@line 23012
     $16 = $ReallocAsyncCtx8 + 4 | 0; //@line 23013
     HEAP32[$16 >> 2] = $2; //@line 23014
     $17 = $ReallocAsyncCtx8 + 8 | 0; //@line 23015
     HEAP32[$17 >> 2] = $4; //@line 23016
     $18 = $ReallocAsyncCtx8 + 12 | 0; //@line 23017
     HEAP32[$18 >> 2] = $6; //@line 23018
     sp = STACKTOP; //@line 23019
     STACKTOP = sp; //@line 23020
     return;
    }
    HEAP32[___async_retval >> 2] = $15; //@line 23023
    ___async_unwind = 0; //@line 23024
    HEAP32[$ReallocAsyncCtx8 >> 2] = 381; //@line 23025
    $16 = $ReallocAsyncCtx8 + 4 | 0; //@line 23026
    HEAP32[$16 >> 2] = $2; //@line 23027
    $17 = $ReallocAsyncCtx8 + 8 | 0; //@line 23028
    HEAP32[$17 >> 2] = $4; //@line 23029
    $18 = $ReallocAsyncCtx8 + 12 | 0; //@line 23030
    HEAP32[$18 >> 2] = $6; //@line 23031
    sp = STACKTOP; //@line 23032
    STACKTOP = sp; //@line 23033
    return;
   }
   if ($9 & 4) {
    $38 = $9 & -5; //@line 23038
    HEAP8[$2 >> 0] = $38; //@line 23039
    $40 = $38; //@line 23040
    break;
   }
   $23 = HEAP32[$4 + 1324 >> 2] | 0; //@line 23044
   $24 = $23 + 16 | 0; //@line 23045
   $26 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 23047
   $27 = $23 + 28 | 0; //@line 23048
   $28 = HEAP32[$27 >> 2] | 0; //@line 23049
   if (!$28) {
    $ReallocAsyncCtx13 = _emscripten_realloc_async_context(24) | 0; //@line 23052
    _mbed_assert_internal(13874, 13879, 1102); //@line 23053
    if (___async) {
     HEAP32[$ReallocAsyncCtx13 >> 2] = 383; //@line 23056
     $30 = $ReallocAsyncCtx13 + 4 | 0; //@line 23057
     HEAP32[$30 >> 2] = $27; //@line 23058
     $31 = $ReallocAsyncCtx13 + 8 | 0; //@line 23059
     HEAP32[$31 >> 2] = $24; //@line 23060
     $32 = $ReallocAsyncCtx13 + 12 | 0; //@line 23061
     HEAP32[$32 >> 2] = $26; //@line 23062
     $33 = $ReallocAsyncCtx13 + 16 | 0; //@line 23063
     HEAP32[$33 >> 2] = $2; //@line 23064
     $34 = $ReallocAsyncCtx13 + 20 | 0; //@line 23065
     HEAP32[$34 >> 2] = $4; //@line 23066
     sp = STACKTOP; //@line 23067
     STACKTOP = sp; //@line 23068
     return;
    }
    ___async_unwind = 0; //@line 23070
    HEAP32[$ReallocAsyncCtx13 >> 2] = 383; //@line 23071
    $30 = $ReallocAsyncCtx13 + 4 | 0; //@line 23072
    HEAP32[$30 >> 2] = $27; //@line 23073
    $31 = $ReallocAsyncCtx13 + 8 | 0; //@line 23074
    HEAP32[$31 >> 2] = $24; //@line 23075
    $32 = $ReallocAsyncCtx13 + 12 | 0; //@line 23076
    HEAP32[$32 >> 2] = $26; //@line 23077
    $33 = $ReallocAsyncCtx13 + 16 | 0; //@line 23078
    HEAP32[$33 >> 2] = $2; //@line 23079
    $34 = $ReallocAsyncCtx13 + 20 | 0; //@line 23080
    HEAP32[$34 >> 2] = $4; //@line 23081
    sp = STACKTOP; //@line 23082
    STACKTOP = sp; //@line 23083
    return;
   } else {
    $35 = HEAP32[$28 >> 2] | 0; //@line 23085
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 23086
    FUNCTION_TABLE_vii[$35 & 31]($24, $26); //@line 23087
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 384; //@line 23090
     $36 = $ReallocAsyncCtx4 + 4 | 0; //@line 23091
     HEAP32[$36 >> 2] = $2; //@line 23092
     $37 = $ReallocAsyncCtx4 + 8 | 0; //@line 23093
     HEAP32[$37 >> 2] = $4; //@line 23094
     sp = STACKTOP; //@line 23095
     STACKTOP = sp; //@line 23096
     return;
    }
    ___async_unwind = 0; //@line 23098
    HEAP32[$ReallocAsyncCtx4 >> 2] = 384; //@line 23099
    $36 = $ReallocAsyncCtx4 + 4 | 0; //@line 23100
    HEAP32[$36 >> 2] = $2; //@line 23101
    $37 = $ReallocAsyncCtx4 + 8 | 0; //@line 23102
    HEAP32[$37 >> 2] = $4; //@line 23103
    sp = STACKTOP; //@line 23104
    STACKTOP = sp; //@line 23105
    return;
   }
  }
 } while (0);
 if (!($40 & 16)) {
  STACKTOP = sp; //@line 23112
  return;
 }
 HEAP8[$2 >> 0] = $40 & -17; //@line 23115
 $44 = HEAP32[$4 + 1324 >> 2] | 0; //@line 23117
 $45 = $44 + 48 | 0; //@line 23118
 $47 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 23120
 $48 = $44 + 60 | 0; //@line 23121
 $49 = HEAP32[$48 >> 2] | 0; //@line 23122
 if (!$49) {
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(16) | 0; //@line 23125
  _mbed_assert_internal(13874, 13879, 1102); //@line 23126
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 385; //@line 23129
   $51 = $ReallocAsyncCtx12 + 4 | 0; //@line 23130
   HEAP32[$51 >> 2] = $48; //@line 23131
   $52 = $ReallocAsyncCtx12 + 8 | 0; //@line 23132
   HEAP32[$52 >> 2] = $45; //@line 23133
   $53 = $ReallocAsyncCtx12 + 12 | 0; //@line 23134
   HEAP32[$53 >> 2] = $47; //@line 23135
   sp = STACKTOP; //@line 23136
   STACKTOP = sp; //@line 23137
   return;
  }
  ___async_unwind = 0; //@line 23139
  HEAP32[$ReallocAsyncCtx12 >> 2] = 385; //@line 23140
  $51 = $ReallocAsyncCtx12 + 4 | 0; //@line 23141
  HEAP32[$51 >> 2] = $48; //@line 23142
  $52 = $ReallocAsyncCtx12 + 8 | 0; //@line 23143
  HEAP32[$52 >> 2] = $45; //@line 23144
  $53 = $ReallocAsyncCtx12 + 12 | 0; //@line 23145
  HEAP32[$53 >> 2] = $47; //@line 23146
  sp = STACKTOP; //@line 23147
  STACKTOP = sp; //@line 23148
  return;
 } else {
  $54 = HEAP32[$49 >> 2] | 0; //@line 23150
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 23151
  FUNCTION_TABLE_vii[$54 & 31]($45, $47); //@line 23152
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 386; //@line 23155
   sp = STACKTOP; //@line 23156
   STACKTOP = sp; //@line 23157
   return;
  }
  ___async_unwind = 0; //@line 23159
  HEAP32[$ReallocAsyncCtx5 >> 2] = 386; //@line 23160
  sp = STACKTOP; //@line 23161
  STACKTOP = sp; //@line 23162
  return;
 }
}
function _mbedtls_cipher_update($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0102 = 0, $$0103 = 0, $$0105 = 0, $$1 = 0, $$phi$trans$insert = 0, $$pre$phi107Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $12 = 0, $17 = 0, $19 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $34 = 0, $36 = 0, $37 = 0, $40 = 0, $41 = 0, $45 = 0, $49 = 0, $50 = 0, $56 = 0, $58 = 0, $59 = 0, $6 = 0, $62 = 0, $80 = 0, $85 = 0, $94 = 0, $96 = 0, $97 = 0, $99 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 2355
 if (!$0) {
  $$1 = -24832; //@line 2358
  return $$1 | 0; //@line 2359
 }
 $6 = HEAP32[$0 >> 2] | 0; //@line 2361
 if (($4 | 0) == 0 | ($6 | 0) == 0) {
  $$1 = -24832; //@line 2366
  return $$1 | 0; //@line 2367
 }
 HEAP32[$4 >> 2] = 0; //@line 2369
 $10 = HEAP32[$6 + 24 >> 2] | 0; //@line 2371
 $12 = HEAP32[$6 + 4 >> 2] | 0; //@line 2373
 switch ($12 | 0) {
 case 1:
  {
   if (($10 | 0) != ($2 | 0)) {
    $$1 = -25216; //@line 2378
    return $$1 | 0; //@line 2379
   }
   HEAP32[$4 >> 2] = $2; //@line 2381
   $17 = HEAP32[(HEAP32[$6 + 28 >> 2] | 0) + 4 >> 2] | 0; //@line 2385
   $19 = HEAP32[$0 + 60 >> 2] | 0; //@line 2387
   $21 = HEAP32[$0 + 8 >> 2] | 0; //@line 2389
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2390
   $22 = FUNCTION_TABLE_iiiii[$17 & 3]($19, $21, $1, $3) | 0; //@line 2391
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 574; //@line 2394
    sp = STACKTOP; //@line 2395
    return 0; //@line 2396
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 2398
   $$1 = $22; //@line 2399
   return $$1 | 0; //@line 2400
  }
 case 6:
  {
   HEAP32[$4 >> 2] = $2; //@line 2404
   $24 = HEAP32[$0 + 60 >> 2] | 0; //@line 2406
   $AsyncCtx11 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2407
   $25 = _mbedtls_gcm_update($24, $2, $1, $3) | 0; //@line 2408
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 575; //@line 2411
    sp = STACKTOP; //@line 2412
    return 0; //@line 2413
   }
   _emscripten_free_async_context($AsyncCtx11 | 0); //@line 2415
   $$1 = $25; //@line 2416
   return $$1 | 0; //@line 2417
  }
 default:
  {
   if (!$10) {
    $$1 = -25472; //@line 2423
    return $$1 | 0; //@line 2424
   }
   if (($1 | 0) == ($3 | 0)) {
    if (HEAP32[$0 + 36 >> 2] | 0) {
     $$1 = -24832; //@line 2432
     return $$1 | 0; //@line 2433
    }
    if (($2 >>> 0) % ($10 >>> 0) | 0 | 0) {
     $$1 = -24832; //@line 2438
     return $$1 | 0; //@line 2439
    }
   }
   if (($12 | 0) != 2) {
    $$1 = -24704; //@line 2444
    return $$1 | 0; //@line 2445
   }
   $34 = $0 + 8 | 0; //@line 2447
   switch (HEAP32[$34 >> 2] | 0) {
   case 0:
    {
     $36 = $0 + 36 | 0; //@line 2451
     $37 = HEAP32[$36 >> 2] | 0; //@line 2452
     if (($10 - $37 | 0) >>> 0 < $2 >>> 0) {
      label = 18; //@line 2456
     } else {
      $$pre$phiZ2D = $36; //@line 2458
      $45 = $37; //@line 2458
      label = 20; //@line 2459
     }
     break;
    }
   case 1:
    {
     $40 = $0 + 36 | 0; //@line 2464
     $41 = HEAP32[$40 >> 2] | 0; //@line 2465
     if (($10 - $41 | 0) >>> 0 > $2 >>> 0) {
      $$pre$phiZ2D = $40; //@line 2469
      $45 = $41; //@line 2469
      label = 20; //@line 2470
     } else {
      $$pre$phi107Z2D = $40; //@line 2472
      $49 = $41; //@line 2472
     }
     break;
    }
   default:
    {
     label = 18; //@line 2477
    }
   }
   if ((label | 0) == 18) {
    $$phi$trans$insert = $0 + 36 | 0; //@line 2481
    $$pre$phi107Z2D = $$phi$trans$insert; //@line 2483
    $49 = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 2483
   } else if ((label | 0) == 20) {
    _memcpy($0 + 20 + $45 | 0, $1 | 0, $2 | 0) | 0; //@line 2487
    HEAP32[$$pre$phiZ2D >> 2] = (HEAP32[$$pre$phiZ2D >> 2] | 0) + $2; //@line 2490
    $$1 = 0; //@line 2491
    return $$1 | 0; //@line 2492
   }
   do {
    if (!$49) {
     $$0102 = $3; //@line 2497
     $$0103 = $2; //@line 2497
     $$0105 = $1; //@line 2497
    } else {
     $50 = $10 - $49 | 0; //@line 2499
     _memcpy($0 + 20 + $49 | 0, $1 | 0, $50 | 0) | 0; //@line 2501
     $56 = HEAP32[(HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] | 0) + 8 >> 2] | 0; //@line 2506
     $58 = HEAP32[$0 + 60 >> 2] | 0; //@line 2508
     $59 = HEAP32[$34 >> 2] | 0; //@line 2509
     $AsyncCtx3 = _emscripten_alloc_async_context(44, sp) | 0; //@line 2512
     $62 = FUNCTION_TABLE_iiiiiii[$56 & 3]($58, $59, $10, $0 + 40 | 0, $0 + 20 | 0, $3) | 0; //@line 2513
     if (___async) {
      HEAP32[$AsyncCtx3 >> 2] = 576; //@line 2516
      HEAP32[$AsyncCtx3 + 4 >> 2] = $4; //@line 2518
      HEAP32[$AsyncCtx3 + 8 >> 2] = $10; //@line 2520
      HEAP32[$AsyncCtx3 + 12 >> 2] = $3; //@line 2522
      HEAP32[$AsyncCtx3 + 16 >> 2] = $$pre$phi107Z2D; //@line 2524
      HEAP32[$AsyncCtx3 + 20 >> 2] = $1; //@line 2526
      HEAP32[$AsyncCtx3 + 24 >> 2] = $50; //@line 2528
      HEAP32[$AsyncCtx3 + 28 >> 2] = $2; //@line 2530
      HEAP32[$AsyncCtx3 + 32 >> 2] = $34; //@line 2532
      HEAP32[$AsyncCtx3 + 36 >> 2] = $0; //@line 2534
      HEAP32[$AsyncCtx3 + 40 >> 2] = $0; //@line 2536
      sp = STACKTOP; //@line 2537
      return 0; //@line 2538
     }
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2540
     if (!$62) {
      HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + $10; //@line 2545
      HEAP32[$$pre$phi107Z2D >> 2] = 0; //@line 2547
      $$0102 = $3 + $10 | 0; //@line 2550
      $$0103 = $2 - $50 | 0; //@line 2550
      $$0105 = $1 + $50 | 0; //@line 2550
      break;
     } else {
      $$1 = $62; //@line 2553
      return $$1 | 0; //@line 2554
     }
    }
   } while (0);
   if (!$$0103) {
    $$1 = 0; //@line 2560
    return $$1 | 0; //@line 2561
   }
   $80 = ($$0103 >>> 0) % ($10 >>> 0) | 0; //@line 2563
   if (!$80) {
    $$0 = (HEAP32[$34 >> 2] | 0) == 0 ? $10 : 0; //@line 2569
   } else {
    $$0 = $80; //@line 2571
   }
   $85 = $$0103 - $$0 | 0; //@line 2574
   _memcpy($0 + 20 | 0, $$0105 + $85 | 0, $$0 | 0) | 0; //@line 2576
   HEAP32[$$pre$phi107Z2D >> 2] = (HEAP32[$$pre$phi107Z2D >> 2] | 0) + $$0; //@line 2579
   if (!$85) {
    $$1 = 0; //@line 2582
    return $$1 | 0; //@line 2583
   }
   $94 = HEAP32[(HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] | 0) + 8 >> 2] | 0; //@line 2589
   $96 = HEAP32[$0 + 60 >> 2] | 0; //@line 2591
   $97 = HEAP32[$34 >> 2] | 0; //@line 2592
   $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 2594
   $99 = FUNCTION_TABLE_iiiiiii[$94 & 3]($96, $97, $85, $0 + 40 | 0, $$0105, $$0102) | 0; //@line 2595
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 577; //@line 2598
    HEAP32[$AsyncCtx7 + 4 >> 2] = $4; //@line 2600
    HEAP32[$AsyncCtx7 + 8 >> 2] = $85; //@line 2602
    sp = STACKTOP; //@line 2603
    return 0; //@line 2604
   }
   _emscripten_free_async_context($AsyncCtx7 | 0); //@line 2606
   if ($99 | 0) {
    $$1 = $99; //@line 2609
    return $$1 | 0; //@line 2610
   }
   HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + $85; //@line 2614
   $$1 = 0; //@line 2615
   return $$1 | 0; //@line 2616
  }
 }
 return 0; //@line 2619
}
function _mbedtls_cipher_cmac_update($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$06984 = 0, $$06984$us = 0, $$070 = 0, $$073 = 0, $$09$i = 0, $$09$i75 = 0, $$1$lcssa = 0, $$174$lcssa = 0, $$17481 = 0, $$182 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $22 = 0, $26 = 0, $3 = 0, $38 = 0, $43 = 0, $46 = 0, $5 = 0, $58 = 0, $62 = 0, $66 = 0, $79 = 0, $80 = 0, $81 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 2879
 STACKTOP = STACKTOP + 16 | 0; //@line 2880
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 2880
 $3 = sp; //@line 2881
 if (!$0) {
  $$0 = -24832; //@line 2884
  STACKTOP = sp; //@line 2885
  return $$0 | 0; //@line 2885
 }
 $5 = HEAP32[$0 >> 2] | 0; //@line 2887
 if (($1 | 0) == 0 | ($5 | 0) == 0) {
  $$0 = -24832; //@line 2892
  STACKTOP = sp; //@line 2893
  return $$0 | 0; //@line 2893
 }
 $9 = HEAP32[$0 + 64 >> 2] | 0; //@line 2896
 if (!$9) {
  $$0 = -24832; //@line 2899
  STACKTOP = sp; //@line 2900
  return $$0 | 0; //@line 2900
 }
 $12 = HEAP32[$5 + 24 >> 2] | 0; //@line 2903
 $13 = $9 + 32 | 0; //@line 2904
 $14 = HEAP32[$13 >> 2] | 0; //@line 2905
 do {
  if (!$14) {
   $$070 = $1; //@line 2909
   $$073 = $2; //@line 2909
  } else {
   $16 = $12 - $14 | 0; //@line 2911
   if ($16 >>> 0 < $2 >>> 0) {
    _memcpy($9 + 16 + $14 | 0, $1 | 0, $16 | 0) | 0; //@line 2915
    if ($12 | 0) {
     $$09$i = 0; //@line 2918
     do {
      $22 = $9 + $$09$i | 0; //@line 2922
      HEAP8[$22 >> 0] = HEAP8[$22 >> 0] ^ HEAP8[$9 + 16 + $$09$i >> 0]; //@line 2925
      $$09$i = $$09$i + 1 | 0; //@line 2926
     } while (($$09$i | 0) != ($12 | 0));
    }
    $AsyncCtx5 = _emscripten_alloc_async_context(40, sp) | 0; //@line 2935
    $26 = _mbedtls_cipher_update($0, $9, $12, $9, $3) | 0; //@line 2936
    if (___async) {
     HEAP32[$AsyncCtx5 >> 2] = 583; //@line 2939
     HEAP32[$AsyncCtx5 + 4 >> 2] = $3; //@line 2941
     HEAP32[$AsyncCtx5 + 8 >> 2] = $0; //@line 2943
     HEAP32[$AsyncCtx5 + 12 >> 2] = $9; //@line 2945
     HEAP32[$AsyncCtx5 + 16 >> 2] = $3; //@line 2947
     HEAP32[$AsyncCtx5 + 20 >> 2] = $13; //@line 2949
     HEAP32[$AsyncCtx5 + 24 >> 2] = $9; //@line 2951
     HEAP32[$AsyncCtx5 + 28 >> 2] = $12; //@line 2953
     HEAP32[$AsyncCtx5 + 32 >> 2] = $2; //@line 2955
     HEAP32[$AsyncCtx5 + 36 >> 2] = $1; //@line 2957
     sp = STACKTOP; //@line 2958
     STACKTOP = sp; //@line 2959
     return 0; //@line 2959
    }
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 2961
    if (!$26) {
     $38 = $12 - (HEAP32[$13 >> 2] | 0) | 0; //@line 2965
     HEAP32[$13 >> 2] = 0; //@line 2968
     $$070 = $1 + $38 | 0; //@line 2969
     $$073 = $2 - $38 | 0; //@line 2969
     break;
    } else {
     $$0 = $26; //@line 2972
     STACKTOP = sp; //@line 2973
     return $$0 | 0; //@line 2973
    }
   } else {
    $$070 = $1; //@line 2976
    $$073 = $2; //@line 2976
   }
  }
 } while (0);
 $43 = (($12 + -1 + $$073 | 0) >>> 0) / ($12 >>> 0) | 0; //@line 2982
 L24 : do {
  if ($43 >>> 0 > 1) {
   if (!$12) {
    $$06984$us = 1; //@line 2988
    while (1) {
     $AsyncCtx2 = _emscripten_alloc_async_context(44, sp) | 0; //@line 2990
     $46 = _mbedtls_cipher_update($0, $9, 0, $9, $3) | 0; //@line 2991
     if (___async) {
      label = 15; //@line 2994
      break;
     }
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 2997
     if ($46 | 0) {
      $$0 = $46; //@line 3000
      label = 26; //@line 3001
      break;
     }
     $58 = $$06984$us + 1 | 0; //@line 3004
     if ($58 >>> 0 < $43 >>> 0) {
      $$06984$us = $58; //@line 3007
     } else {
      $$1$lcssa = $$070; //@line 3009
      $$174$lcssa = $$073; //@line 3009
      break L24;
     }
    }
    if ((label | 0) == 15) {
     HEAP32[$AsyncCtx2 >> 2] = 584; //@line 3014
     HEAP32[$AsyncCtx2 + 4 >> 2] = $$06984$us; //@line 3016
     HEAP32[$AsyncCtx2 + 8 >> 2] = $43; //@line 3018
     HEAP32[$AsyncCtx2 + 12 >> 2] = $3; //@line 3020
     HEAP32[$AsyncCtx2 + 16 >> 2] = $0; //@line 3022
     HEAP32[$AsyncCtx2 + 20 >> 2] = $9; //@line 3024
     HEAP32[$AsyncCtx2 + 24 >> 2] = $3; //@line 3026
     HEAP32[$AsyncCtx2 + 28 >> 2] = $$073; //@line 3028
     HEAP32[$AsyncCtx2 + 32 >> 2] = $$070; //@line 3030
     HEAP32[$AsyncCtx2 + 36 >> 2] = $13; //@line 3032
     HEAP32[$AsyncCtx2 + 40 >> 2] = $9; //@line 3034
     sp = STACKTOP; //@line 3035
     STACKTOP = sp; //@line 3036
     return 0; //@line 3036
    } else if ((label | 0) == 26) {
     STACKTOP = sp; //@line 3039
     return $$0 | 0; //@line 3039
    }
   } else {
    $$06984 = 1; //@line 3042
    $$17481 = $$073; //@line 3042
    $$182 = $$070; //@line 3042
   }
   while (1) {
    $$09$i75 = 0; //@line 3045
    do {
     $62 = $9 + $$09$i75 | 0; //@line 3049
     HEAP8[$62 >> 0] = HEAP8[$62 >> 0] ^ HEAP8[$$182 + $$09$i75 >> 0]; //@line 3052
     $$09$i75 = $$09$i75 + 1 | 0; //@line 3053
    } while (($$09$i75 | 0) != ($12 | 0));
    $AsyncCtx = _emscripten_alloc_async_context(48, sp) | 0; //@line 3061
    $66 = _mbedtls_cipher_update($0, $9, $12, $9, $3) | 0; //@line 3062
    if (___async) {
     label = 21; //@line 3065
     break;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 3068
    if ($66 | 0) {
     $$0 = $66; //@line 3071
     label = 26; //@line 3072
     break;
    }
    $79 = $$17481 - $12 | 0; //@line 3075
    $80 = $$182 + $12 | 0; //@line 3076
    $81 = $$06984 + 1 | 0; //@line 3077
    if ($81 >>> 0 < $43 >>> 0) {
     $$06984 = $81; //@line 3080
     $$17481 = $79; //@line 3080
     $$182 = $80; //@line 3080
    } else {
     $$1$lcssa = $80; //@line 3082
     $$174$lcssa = $79; //@line 3082
     break L24;
    }
   }
   if ((label | 0) == 21) {
    HEAP32[$AsyncCtx >> 2] = 585; //@line 3087
    HEAP32[$AsyncCtx + 4 >> 2] = $$17481; //@line 3089
    HEAP32[$AsyncCtx + 8 >> 2] = $12; //@line 3091
    HEAP32[$AsyncCtx + 12 >> 2] = $$182; //@line 3093
    HEAP32[$AsyncCtx + 16 >> 2] = $$06984; //@line 3095
    HEAP32[$AsyncCtx + 20 >> 2] = $43; //@line 3097
    HEAP32[$AsyncCtx + 24 >> 2] = $3; //@line 3099
    HEAP32[$AsyncCtx + 28 >> 2] = $13; //@line 3101
    HEAP32[$AsyncCtx + 32 >> 2] = $9; //@line 3103
    HEAP32[$AsyncCtx + 36 >> 2] = $0; //@line 3105
    HEAP32[$AsyncCtx + 40 >> 2] = $9; //@line 3107
    HEAP32[$AsyncCtx + 44 >> 2] = $3; //@line 3109
    sp = STACKTOP; //@line 3110
    STACKTOP = sp; //@line 3111
    return 0; //@line 3111
   } else if ((label | 0) == 26) {
    STACKTOP = sp; //@line 3114
    return $$0 | 0; //@line 3114
   }
  } else {
   $$1$lcssa = $$070; //@line 3117
   $$174$lcssa = $$073; //@line 3117
  }
 } while (0);
 if (!$$174$lcssa) {
  $$0 = 0; //@line 3122
  STACKTOP = sp; //@line 3123
  return $$0 | 0; //@line 3123
 }
 _memcpy((HEAP32[$13 >> 2] | 0) + ($9 + 16) | 0, $$1$lcssa | 0, $$174$lcssa | 0) | 0; //@line 3127
 HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + $$174$lcssa; //@line 3130
 $$0 = 0; //@line 3131
 STACKTOP = sp; //@line 3132
 return $$0 | 0; //@line 3132
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_197($0) {
 $0 = $0 | 0;
 var $$pre$i$i34 = 0, $14 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 1542
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1544
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1546
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1548
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1550
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 1556
 $$pre$i$i34 = HEAP32[HEAP32[$0 + 20 >> 2] >> 2] | 0; //@line 1557
 HEAP32[HEAP32[$0 + 24 >> 2] >> 2] = $$pre$i$i34; //@line 1559
 if ($$pre$i$i34 | 0) {
  $18 = HEAP32[$$pre$i$i34 + 8 >> 2] | 0; //@line 1563
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(24) | 0; //@line 1564
  FUNCTION_TABLE_vi[$18 & 1023]($8); //@line 1565
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 473; //@line 1568
   $19 = $ReallocAsyncCtx9 + 4 | 0; //@line 1569
   HEAP32[$19 >> 2] = $2; //@line 1570
   $20 = $ReallocAsyncCtx9 + 8 | 0; //@line 1571
   HEAP32[$20 >> 2] = $4; //@line 1572
   $21 = $ReallocAsyncCtx9 + 12 | 0; //@line 1573
   HEAP32[$21 >> 2] = $6; //@line 1574
   $22 = $ReallocAsyncCtx9 + 16 | 0; //@line 1575
   HEAP32[$22 >> 2] = $8; //@line 1576
   $23 = $ReallocAsyncCtx9 + 20 | 0; //@line 1577
   HEAP32[$23 >> 2] = $14; //@line 1578
   sp = STACKTOP; //@line 1579
   return;
  }
  ___async_unwind = 0; //@line 1582
  HEAP32[$ReallocAsyncCtx9 >> 2] = 473; //@line 1583
  $19 = $ReallocAsyncCtx9 + 4 | 0; //@line 1584
  HEAP32[$19 >> 2] = $2; //@line 1585
  $20 = $ReallocAsyncCtx9 + 8 | 0; //@line 1586
  HEAP32[$20 >> 2] = $4; //@line 1587
  $21 = $ReallocAsyncCtx9 + 12 | 0; //@line 1588
  HEAP32[$21 >> 2] = $6; //@line 1589
  $22 = $ReallocAsyncCtx9 + 16 | 0; //@line 1590
  HEAP32[$22 >> 2] = $8; //@line 1591
  $23 = $ReallocAsyncCtx9 + 20 | 0; //@line 1592
  HEAP32[$23 >> 2] = $14; //@line 1593
  sp = STACKTOP; //@line 1594
  return;
 }
 $24 = $14 + 12 | 0; //@line 1597
 HEAP32[$14 >> 2] = 474; //@line 1598
 HEAP32[$14 + 4 >> 2] = 0; //@line 1600
 HEAP32[$14 + 8 >> 2] = $6; //@line 1602
 HEAP32[$24 >> 2] = 836; //@line 1603
 $25 = $6 + 1228 | 0; //@line 1604
 if (($25 | 0) == ($14 | 0)) {
  $48 = HEAP32[211] | 0; //@line 1608
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 1609
  FUNCTION_TABLE_vi[$48 & 1023]($14); //@line 1610
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 477; //@line 1613
   $49 = $ReallocAsyncCtx12 + 4 | 0; //@line 1614
   HEAP32[$49 >> 2] = $14; //@line 1615
   $50 = $ReallocAsyncCtx12 + 8 | 0; //@line 1616
   HEAP32[$50 >> 2] = $4; //@line 1617
   $51 = $ReallocAsyncCtx12 + 12 | 0; //@line 1618
   HEAP32[$51 >> 2] = $6; //@line 1619
   $52 = $ReallocAsyncCtx12 + 16 | 0; //@line 1620
   HEAP32[$52 >> 2] = $2; //@line 1621
   sp = STACKTOP; //@line 1622
   return;
  }
  ___async_unwind = 0; //@line 1625
  HEAP32[$ReallocAsyncCtx12 >> 2] = 477; //@line 1626
  $49 = $ReallocAsyncCtx12 + 4 | 0; //@line 1627
  HEAP32[$49 >> 2] = $14; //@line 1628
  $50 = $ReallocAsyncCtx12 + 8 | 0; //@line 1629
  HEAP32[$50 >> 2] = $4; //@line 1630
  $51 = $ReallocAsyncCtx12 + 12 | 0; //@line 1631
  HEAP32[$51 >> 2] = $6; //@line 1632
  $52 = $ReallocAsyncCtx12 + 16 | 0; //@line 1633
  HEAP32[$52 >> 2] = $2; //@line 1634
  sp = STACKTOP; //@line 1635
  return;
 }
 $27 = $6 + 1240 | 0; //@line 1638
 $28 = HEAP32[$27 >> 2] | 0; //@line 1639
 if (!$28) {
  $40 = HEAP32[210] | 0; //@line 1643
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(28) | 0; //@line 1644
  FUNCTION_TABLE_vii[$40 & 31]($25, $14); //@line 1645
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 476; //@line 1648
   $41 = $ReallocAsyncCtx11 + 4 | 0; //@line 1649
   HEAP32[$41 >> 2] = $2; //@line 1650
   $42 = $ReallocAsyncCtx11 + 8 | 0; //@line 1651
   HEAP32[$42 >> 2] = $14; //@line 1652
   $43 = $ReallocAsyncCtx11 + 12 | 0; //@line 1653
   HEAP32[$43 >> 2] = $24; //@line 1654
   $44 = $ReallocAsyncCtx11 + 16 | 0; //@line 1655
   HEAP32[$44 >> 2] = $27; //@line 1656
   $45 = $ReallocAsyncCtx11 + 20 | 0; //@line 1657
   HEAP32[$45 >> 2] = $4; //@line 1658
   $46 = $ReallocAsyncCtx11 + 24 | 0; //@line 1659
   HEAP32[$46 >> 2] = $6; //@line 1660
   sp = STACKTOP; //@line 1661
   return;
  }
  ___async_unwind = 0; //@line 1664
  HEAP32[$ReallocAsyncCtx11 >> 2] = 476; //@line 1665
  $41 = $ReallocAsyncCtx11 + 4 | 0; //@line 1666
  HEAP32[$41 >> 2] = $2; //@line 1667
  $42 = $ReallocAsyncCtx11 + 8 | 0; //@line 1668
  HEAP32[$42 >> 2] = $14; //@line 1669
  $43 = $ReallocAsyncCtx11 + 12 | 0; //@line 1670
  HEAP32[$43 >> 2] = $24; //@line 1671
  $44 = $ReallocAsyncCtx11 + 16 | 0; //@line 1672
  HEAP32[$44 >> 2] = $27; //@line 1673
  $45 = $ReallocAsyncCtx11 + 20 | 0; //@line 1674
  HEAP32[$45 >> 2] = $4; //@line 1675
  $46 = $ReallocAsyncCtx11 + 24 | 0; //@line 1676
  HEAP32[$46 >> 2] = $6; //@line 1677
  sp = STACKTOP; //@line 1678
  return;
 } else {
  $31 = HEAP32[$28 + 8 >> 2] | 0; //@line 1682
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(32) | 0; //@line 1683
  FUNCTION_TABLE_vi[$31 & 1023]($25); //@line 1684
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 475; //@line 1687
   $32 = $ReallocAsyncCtx10 + 4 | 0; //@line 1688
   HEAP32[$32 >> 2] = $2; //@line 1689
   $33 = $ReallocAsyncCtx10 + 8 | 0; //@line 1690
   HEAP32[$33 >> 2] = $14; //@line 1691
   $34 = $ReallocAsyncCtx10 + 12 | 0; //@line 1692
   HEAP32[$34 >> 2] = $27; //@line 1693
   $35 = $ReallocAsyncCtx10 + 16 | 0; //@line 1694
   HEAP32[$35 >> 2] = $25; //@line 1695
   $36 = $ReallocAsyncCtx10 + 20 | 0; //@line 1696
   HEAP32[$36 >> 2] = $24; //@line 1697
   $37 = $ReallocAsyncCtx10 + 24 | 0; //@line 1698
   HEAP32[$37 >> 2] = $4; //@line 1699
   $38 = $ReallocAsyncCtx10 + 28 | 0; //@line 1700
   HEAP32[$38 >> 2] = $6; //@line 1701
   sp = STACKTOP; //@line 1702
   return;
  }
  ___async_unwind = 0; //@line 1705
  HEAP32[$ReallocAsyncCtx10 >> 2] = 475; //@line 1706
  $32 = $ReallocAsyncCtx10 + 4 | 0; //@line 1707
  HEAP32[$32 >> 2] = $2; //@line 1708
  $33 = $ReallocAsyncCtx10 + 8 | 0; //@line 1709
  HEAP32[$33 >> 2] = $14; //@line 1710
  $34 = $ReallocAsyncCtx10 + 12 | 0; //@line 1711
  HEAP32[$34 >> 2] = $27; //@line 1712
  $35 = $ReallocAsyncCtx10 + 16 | 0; //@line 1713
  HEAP32[$35 >> 2] = $25; //@line 1714
  $36 = $ReallocAsyncCtx10 + 20 | 0; //@line 1715
  HEAP32[$36 >> 2] = $24; //@line 1716
  $37 = $ReallocAsyncCtx10 + 24 | 0; //@line 1717
  HEAP32[$37 >> 2] = $4; //@line 1718
  $38 = $ReallocAsyncCtx10 + 28 | 0; //@line 1719
  HEAP32[$38 >> 2] = $6; //@line 1720
  sp = STACKTOP; //@line 1721
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i = 0, $$pre$i = 0, $11 = 0, $13 = 0, $22 = 0, $25 = 0, $35 = 0, $36 = 0, $37 = 0, $41 = 0, $43 = 0, $46 = 0, $53 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $64 = 0, $67 = 0, $7 = 0, $71 = 0, $74 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 10865
 STACKTOP = STACKTOP + 48 | 0; //@line 10866
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 10866
 $6 = sp + 16 | 0; //@line 10867
 $7 = sp; //@line 10868
 $8 = $1 + 12 | 0; //@line 10869
 $9 = HEAP32[$8 >> 2] | 0; //@line 10870
 do {
  if (!$9) {
   $11 = $7 + 12 | 0; //@line 10874
   HEAP32[$11 >> 2] = 0; //@line 10875
   $36 = 0; //@line 10876
   $53 = $11; //@line 10876
  } else {
   $13 = HEAP32[$9 + 4 >> 2] | 0; //@line 10879
   $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 10880
   FUNCTION_TABLE_vii[$13 & 31]($7, $1); //@line 10881
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 332; //@line 10884
    HEAP32[$AsyncCtx + 4 >> 2] = $8; //@line 10886
    HEAP32[$AsyncCtx + 8 >> 2] = $7; //@line 10888
    HEAP32[$AsyncCtx + 12 >> 2] = $6; //@line 10890
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 10892
    HEAP16[$AsyncCtx + 20 >> 1] = $3; //@line 10894
    HEAP16[$AsyncCtx + 22 >> 1] = $4; //@line 10896
    HEAP8[$AsyncCtx + 24 >> 0] = $5; //@line 10898
    HEAP32[$AsyncCtx + 28 >> 2] = $0; //@line 10900
    sp = STACKTOP; //@line 10901
    STACKTOP = sp; //@line 10902
    return 0; //@line 10902
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 10904
   $$pre$i = HEAP32[$8 >> 2] | 0; //@line 10905
   $22 = $7 + 12 | 0; //@line 10906
   HEAP32[$22 >> 2] = $$pre$i; //@line 10907
   if (!$$pre$i) {
    $36 = 0; //@line 10910
    $53 = $22; //@line 10910
   } else {
    $25 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 10914
    $AsyncCtx2 = _emscripten_alloc_async_context(36, sp) | 0; //@line 10915
    FUNCTION_TABLE_vii[$25 & 31]($6, $7); //@line 10916
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 333; //@line 10919
     HEAP32[$AsyncCtx2 + 4 >> 2] = $22; //@line 10921
     HEAP32[$AsyncCtx2 + 8 >> 2] = $7; //@line 10923
     HEAP32[$AsyncCtx2 + 12 >> 2] = $22; //@line 10925
     HEAP32[$AsyncCtx2 + 16 >> 2] = $6; //@line 10927
     HEAP32[$AsyncCtx2 + 20 >> 2] = $2; //@line 10929
     HEAP16[$AsyncCtx2 + 24 >> 1] = $3; //@line 10931
     HEAP16[$AsyncCtx2 + 26 >> 1] = $4; //@line 10933
     HEAP8[$AsyncCtx2 + 28 >> 0] = $5; //@line 10935
     HEAP32[$AsyncCtx2 + 32 >> 2] = $0; //@line 10937
     sp = STACKTOP; //@line 10938
     STACKTOP = sp; //@line 10939
     return 0; //@line 10939
    } else {
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 10941
     $36 = HEAP32[$22 >> 2] | 0; //@line 10943
     $53 = $22; //@line 10943
     break;
    }
   }
  }
 } while (0);
 $35 = $6 + 12 | 0; //@line 10949
 HEAP32[$35 >> 2] = $36; //@line 10950
 $37 = $6 + 16 | 0; //@line 10951
 HEAP32[$37 >> 2] = $2; //@line 10952
 HEAP16[$6 + 20 >> 1] = $3; //@line 10954
 HEAP16[$6 + 22 >> 1] = $4; //@line 10956
 HEAP8[$6 + 24 >> 0] = $5; //@line 10958
 $41 = _equeue_alloc($0, 28) | 0; //@line 10959
 do {
  if (!$41) {
   $$0$i = 0; //@line 10963
  } else {
   $43 = HEAP32[$35 >> 2] | 0; //@line 10965
   do {
    if (!$43) {
     $57 = 0; //@line 10969
    } else {
     $46 = HEAP32[$43 + 4 >> 2] | 0; //@line 10972
     $AsyncCtx5 = _emscripten_alloc_async_context(36, sp) | 0; //@line 10973
     FUNCTION_TABLE_vii[$46 & 31]($41, $6); //@line 10974
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 334; //@line 10977
      HEAP32[$AsyncCtx5 + 4 >> 2] = $35; //@line 10979
      HEAP32[$AsyncCtx5 + 8 >> 2] = $41; //@line 10981
      HEAP32[$AsyncCtx5 + 12 >> 2] = $37; //@line 10983
      HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 10985
      HEAP32[$AsyncCtx5 + 20 >> 2] = $35; //@line 10987
      HEAP32[$AsyncCtx5 + 24 >> 2] = $53; //@line 10989
      HEAP32[$AsyncCtx5 + 28 >> 2] = $6; //@line 10991
      HEAP32[$AsyncCtx5 + 32 >> 2] = $7; //@line 10993
      sp = STACKTOP; //@line 10994
      STACKTOP = sp; //@line 10995
      return 0; //@line 10995
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 10997
      $57 = HEAP32[$35 >> 2] | 0; //@line 10999
      break;
     }
    }
   } while (0);
   HEAP32[$41 + 12 >> 2] = $57; //@line 11005
   $58 = $41 + 16 | 0; //@line 11006
   HEAP32[$58 >> 2] = HEAP32[$37 >> 2]; //@line 11007
   HEAP32[$58 + 4 >> 2] = HEAP32[$37 + 4 >> 2]; //@line 11007
   HEAP8[$58 + 8 >> 0] = HEAP8[$37 + 8 >> 0] | 0; //@line 11007
   _equeue_event_dtor($41, 335); //@line 11008
   $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 11009
   $59 = _equeue_post($0, 336, $41) | 0; //@line 11010
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 337; //@line 11013
    HEAP32[$AsyncCtx15 + 4 >> 2] = $35; //@line 11015
    HEAP32[$AsyncCtx15 + 8 >> 2] = $53; //@line 11017
    HEAP32[$AsyncCtx15 + 12 >> 2] = $6; //@line 11019
    HEAP32[$AsyncCtx15 + 16 >> 2] = $7; //@line 11021
    sp = STACKTOP; //@line 11022
    STACKTOP = sp; //@line 11023
    return 0; //@line 11023
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 11025
    $$0$i = $59; //@line 11026
    break;
   }
  }
 } while (0);
 $64 = HEAP32[$35 >> 2] | 0; //@line 11031
 do {
  if ($64 | 0) {
   $67 = HEAP32[$64 + 8 >> 2] | 0; //@line 11036
   $AsyncCtx8 = _emscripten_alloc_async_context(16, sp) | 0; //@line 11037
   FUNCTION_TABLE_vi[$67 & 1023]($6); //@line 11038
   if (___async) {
    HEAP32[$AsyncCtx8 >> 2] = 338; //@line 11041
    HEAP32[$AsyncCtx8 + 4 >> 2] = $53; //@line 11043
    HEAP32[$AsyncCtx8 + 8 >> 2] = $$0$i; //@line 11045
    HEAP32[$AsyncCtx8 + 12 >> 2] = $7; //@line 11047
    sp = STACKTOP; //@line 11048
    STACKTOP = sp; //@line 11049
    return 0; //@line 11049
   } else {
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 11051
    break;
   }
  }
 } while (0);
 $71 = HEAP32[$53 >> 2] | 0; //@line 11056
 if (!$71) {
  STACKTOP = sp; //@line 11059
  return $$0$i | 0; //@line 11059
 }
 $74 = HEAP32[$71 + 8 >> 2] | 0; //@line 11062
 $AsyncCtx12 = _emscripten_alloc_async_context(8, sp) | 0; //@line 11063
 FUNCTION_TABLE_vi[$74 & 1023]($7); //@line 11064
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 339; //@line 11067
  HEAP32[$AsyncCtx12 + 4 >> 2] = $$0$i; //@line 11069
  sp = STACKTOP; //@line 11070
  STACKTOP = sp; //@line 11071
  return 0; //@line 11071
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 11073
 STACKTOP = sp; //@line 11074
 return $$0$i | 0; //@line 11074
}
function _mbedtls_cipher_cmac_update__async_cb_162($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$09$i75 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $27 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $44 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $66 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 31732
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31734
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31736
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31738
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31740
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31742
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31744
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 31746
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 31748
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 31750
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 31752
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 31755
  $66 = ___async_retval; //@line 31756
  HEAP32[$66 >> 2] = $$0; //@line 31757
  return;
 }
 $22 = $14 - (HEAP32[$10 >> 2] | 0) | 0; //@line 31761
 $23 = $18 + $22 | 0; //@line 31762
 $24 = $16 - $22 | 0; //@line 31763
 HEAP32[$10 >> 2] = 0; //@line 31764
 $27 = (($14 + -1 + $24 | 0) >>> 0) / ($14 >>> 0) | 0; //@line 31767
 if ($27 >>> 0 <= 1) {
  if (!$24) {
   $$0 = 0; //@line 31772
   $66 = ___async_retval; //@line 31773
   HEAP32[$66 >> 2] = $$0; //@line 31774
   return;
  }
  _memcpy((HEAP32[$10 >> 2] | 0) + ($12 + 16) | 0, $23 | 0, $24 | 0) | 0; //@line 31779
  HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + $24; //@line 31782
  $$0 = 0; //@line 31783
  $66 = ___async_retval; //@line 31784
  HEAP32[$66 >> 2] = $$0; //@line 31785
  return;
 }
 if (!$14) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(44) | 0; //@line 31790
  $30 = _mbedtls_cipher_update($4, $6, 0, $6, $8) | 0; //@line 31791
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 584; //@line 31794
   $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 31795
   HEAP32[$31 >> 2] = 1; //@line 31796
   $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 31797
   HEAP32[$32 >> 2] = $27; //@line 31798
   $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 31799
   HEAP32[$33 >> 2] = $2; //@line 31800
   $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 31801
   HEAP32[$34 >> 2] = $4; //@line 31802
   $35 = $ReallocAsyncCtx2 + 20 | 0; //@line 31803
   HEAP32[$35 >> 2] = $6; //@line 31804
   $36 = $ReallocAsyncCtx2 + 24 | 0; //@line 31805
   HEAP32[$36 >> 2] = $8; //@line 31806
   $37 = $ReallocAsyncCtx2 + 28 | 0; //@line 31807
   HEAP32[$37 >> 2] = $24; //@line 31808
   $38 = $ReallocAsyncCtx2 + 32 | 0; //@line 31809
   HEAP32[$38 >> 2] = $23; //@line 31810
   $39 = $ReallocAsyncCtx2 + 36 | 0; //@line 31811
   HEAP32[$39 >> 2] = $10; //@line 31812
   $40 = $ReallocAsyncCtx2 + 40 | 0; //@line 31813
   HEAP32[$40 >> 2] = $12; //@line 31814
   sp = STACKTOP; //@line 31815
   return;
  }
  HEAP32[___async_retval >> 2] = $30; //@line 31819
  ___async_unwind = 0; //@line 31820
  HEAP32[$ReallocAsyncCtx2 >> 2] = 584; //@line 31821
  $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 31822
  HEAP32[$31 >> 2] = 1; //@line 31823
  $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 31824
  HEAP32[$32 >> 2] = $27; //@line 31825
  $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 31826
  HEAP32[$33 >> 2] = $2; //@line 31827
  $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 31828
  HEAP32[$34 >> 2] = $4; //@line 31829
  $35 = $ReallocAsyncCtx2 + 20 | 0; //@line 31830
  HEAP32[$35 >> 2] = $6; //@line 31831
  $36 = $ReallocAsyncCtx2 + 24 | 0; //@line 31832
  HEAP32[$36 >> 2] = $8; //@line 31833
  $37 = $ReallocAsyncCtx2 + 28 | 0; //@line 31834
  HEAP32[$37 >> 2] = $24; //@line 31835
  $38 = $ReallocAsyncCtx2 + 32 | 0; //@line 31836
  HEAP32[$38 >> 2] = $23; //@line 31837
  $39 = $ReallocAsyncCtx2 + 36 | 0; //@line 31838
  HEAP32[$39 >> 2] = $10; //@line 31839
  $40 = $ReallocAsyncCtx2 + 40 | 0; //@line 31840
  HEAP32[$40 >> 2] = $12; //@line 31841
  sp = STACKTOP; //@line 31842
  return;
 }
 $$09$i75 = 0; //@line 31845
 do {
  $44 = $12 + $$09$i75 | 0; //@line 31849
  HEAP8[$44 >> 0] = HEAP8[$44 >> 0] ^ HEAP8[$23 + $$09$i75 >> 0]; //@line 31852
  $$09$i75 = $$09$i75 + 1 | 0; //@line 31853
 } while (($$09$i75 | 0) != ($14 | 0));
 $ReallocAsyncCtx = _emscripten_realloc_async_context(48) | 0; //@line 31861
 $48 = _mbedtls_cipher_update($4, $6, $14, $6, $8) | 0; //@line 31862
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 585; //@line 31865
  $49 = $ReallocAsyncCtx + 4 | 0; //@line 31866
  HEAP32[$49 >> 2] = $24; //@line 31867
  $50 = $ReallocAsyncCtx + 8 | 0; //@line 31868
  HEAP32[$50 >> 2] = $14; //@line 31869
  $51 = $ReallocAsyncCtx + 12 | 0; //@line 31870
  HEAP32[$51 >> 2] = $23; //@line 31871
  $52 = $ReallocAsyncCtx + 16 | 0; //@line 31872
  HEAP32[$52 >> 2] = 1; //@line 31873
  $53 = $ReallocAsyncCtx + 20 | 0; //@line 31874
  HEAP32[$53 >> 2] = $27; //@line 31875
  $54 = $ReallocAsyncCtx + 24 | 0; //@line 31876
  HEAP32[$54 >> 2] = $2; //@line 31877
  $55 = $ReallocAsyncCtx + 28 | 0; //@line 31878
  HEAP32[$55 >> 2] = $10; //@line 31879
  $56 = $ReallocAsyncCtx + 32 | 0; //@line 31880
  HEAP32[$56 >> 2] = $12; //@line 31881
  $57 = $ReallocAsyncCtx + 36 | 0; //@line 31882
  HEAP32[$57 >> 2] = $4; //@line 31883
  $58 = $ReallocAsyncCtx + 40 | 0; //@line 31884
  HEAP32[$58 >> 2] = $6; //@line 31885
  $59 = $ReallocAsyncCtx + 44 | 0; //@line 31886
  HEAP32[$59 >> 2] = $8; //@line 31887
  sp = STACKTOP; //@line 31888
  return;
 }
 HEAP32[___async_retval >> 2] = $48; //@line 31892
 ___async_unwind = 0; //@line 31893
 HEAP32[$ReallocAsyncCtx >> 2] = 585; //@line 31894
 $49 = $ReallocAsyncCtx + 4 | 0; //@line 31895
 HEAP32[$49 >> 2] = $24; //@line 31896
 $50 = $ReallocAsyncCtx + 8 | 0; //@line 31897
 HEAP32[$50 >> 2] = $14; //@line 31898
 $51 = $ReallocAsyncCtx + 12 | 0; //@line 31899
 HEAP32[$51 >> 2] = $23; //@line 31900
 $52 = $ReallocAsyncCtx + 16 | 0; //@line 31901
 HEAP32[$52 >> 2] = 1; //@line 31902
 $53 = $ReallocAsyncCtx + 20 | 0; //@line 31903
 HEAP32[$53 >> 2] = $27; //@line 31904
 $54 = $ReallocAsyncCtx + 24 | 0; //@line 31905
 HEAP32[$54 >> 2] = $2; //@line 31906
 $55 = $ReallocAsyncCtx + 28 | 0; //@line 31907
 HEAP32[$55 >> 2] = $10; //@line 31908
 $56 = $ReallocAsyncCtx + 32 | 0; //@line 31909
 HEAP32[$56 >> 2] = $12; //@line 31910
 $57 = $ReallocAsyncCtx + 36 | 0; //@line 31911
 HEAP32[$57 >> 2] = $4; //@line 31912
 $58 = $ReallocAsyncCtx + 40 | 0; //@line 31913
 HEAP32[$58 >> 2] = $6; //@line 31914
 $59 = $ReallocAsyncCtx + 44 | 0; //@line 31915
 HEAP32[$59 >> 2] = $8; //@line 31916
 sp = STACKTOP; //@line 31917
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_317($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $24 = 0, $26 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $46 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $56 = 0, $57 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 11750
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11754
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11756
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11758
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11760
 $12 = HEAP16[$0 + 24 >> 1] | 0; //@line 11762
 $14 = HEAP16[$0 + 26 >> 1] | 0; //@line 11764
 $16 = HEAP8[$0 + 28 >> 0] | 0; //@line 11766
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 11768
 $19 = $8 + 12 | 0; //@line 11770
 HEAP32[$19 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 11771
 $20 = $8 + 16 | 0; //@line 11772
 HEAP32[$20 >> 2] = $10; //@line 11773
 HEAP16[$8 + 20 >> 1] = $12; //@line 11775
 HEAP16[$8 + 22 >> 1] = $14; //@line 11777
 HEAP8[$8 + 24 >> 0] = $16; //@line 11779
 $24 = _equeue_alloc($18, 28) | 0; //@line 11780
 if ($24 | 0) {
  $26 = HEAP32[$19 >> 2] | 0; //@line 11783
  if (!$26) {
   HEAP32[$24 + 12 >> 2] = 0; //@line 11787
   $39 = $24 + 16 | 0; //@line 11788
   HEAP32[$39 >> 2] = HEAP32[$20 >> 2]; //@line 11789
   HEAP32[$39 + 4 >> 2] = HEAP32[$20 + 4 >> 2]; //@line 11789
   HEAP8[$39 + 8 >> 0] = HEAP8[$20 + 8 >> 0] | 0; //@line 11789
   _equeue_event_dtor($24, 335); //@line 11790
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 11791
   $40 = _equeue_post($18, 336, $24) | 0; //@line 11792
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 337; //@line 11795
    $41 = $ReallocAsyncCtx6 + 4 | 0; //@line 11796
    HEAP32[$41 >> 2] = $19; //@line 11797
    $42 = $ReallocAsyncCtx6 + 8 | 0; //@line 11798
    HEAP32[$42 >> 2] = $6; //@line 11799
    $43 = $ReallocAsyncCtx6 + 12 | 0; //@line 11800
    HEAP32[$43 >> 2] = $8; //@line 11801
    $44 = $ReallocAsyncCtx6 + 16 | 0; //@line 11802
    HEAP32[$44 >> 2] = $4; //@line 11803
    sp = STACKTOP; //@line 11804
    return;
   }
   HEAP32[___async_retval >> 2] = $40; //@line 11808
   ___async_unwind = 0; //@line 11809
   HEAP32[$ReallocAsyncCtx6 >> 2] = 337; //@line 11810
   $41 = $ReallocAsyncCtx6 + 4 | 0; //@line 11811
   HEAP32[$41 >> 2] = $19; //@line 11812
   $42 = $ReallocAsyncCtx6 + 8 | 0; //@line 11813
   HEAP32[$42 >> 2] = $6; //@line 11814
   $43 = $ReallocAsyncCtx6 + 12 | 0; //@line 11815
   HEAP32[$43 >> 2] = $8; //@line 11816
   $44 = $ReallocAsyncCtx6 + 16 | 0; //@line 11817
   HEAP32[$44 >> 2] = $4; //@line 11818
   sp = STACKTOP; //@line 11819
   return;
  } else {
   $29 = HEAP32[$26 + 4 >> 2] | 0; //@line 11823
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 11824
   FUNCTION_TABLE_vii[$29 & 31]($24, $8); //@line 11825
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 334; //@line 11828
    $30 = $ReallocAsyncCtx3 + 4 | 0; //@line 11829
    HEAP32[$30 >> 2] = $19; //@line 11830
    $31 = $ReallocAsyncCtx3 + 8 | 0; //@line 11831
    HEAP32[$31 >> 2] = $24; //@line 11832
    $32 = $ReallocAsyncCtx3 + 12 | 0; //@line 11833
    HEAP32[$32 >> 2] = $20; //@line 11834
    $33 = $ReallocAsyncCtx3 + 16 | 0; //@line 11835
    HEAP32[$33 >> 2] = $18; //@line 11836
    $34 = $ReallocAsyncCtx3 + 20 | 0; //@line 11837
    HEAP32[$34 >> 2] = $19; //@line 11838
    $35 = $ReallocAsyncCtx3 + 24 | 0; //@line 11839
    HEAP32[$35 >> 2] = $6; //@line 11840
    $36 = $ReallocAsyncCtx3 + 28 | 0; //@line 11841
    HEAP32[$36 >> 2] = $8; //@line 11842
    $37 = $ReallocAsyncCtx3 + 32 | 0; //@line 11843
    HEAP32[$37 >> 2] = $4; //@line 11844
    sp = STACKTOP; //@line 11845
    return;
   }
   ___async_unwind = 0; //@line 11848
   HEAP32[$ReallocAsyncCtx3 >> 2] = 334; //@line 11849
   $30 = $ReallocAsyncCtx3 + 4 | 0; //@line 11850
   HEAP32[$30 >> 2] = $19; //@line 11851
   $31 = $ReallocAsyncCtx3 + 8 | 0; //@line 11852
   HEAP32[$31 >> 2] = $24; //@line 11853
   $32 = $ReallocAsyncCtx3 + 12 | 0; //@line 11854
   HEAP32[$32 >> 2] = $20; //@line 11855
   $33 = $ReallocAsyncCtx3 + 16 | 0; //@line 11856
   HEAP32[$33 >> 2] = $18; //@line 11857
   $34 = $ReallocAsyncCtx3 + 20 | 0; //@line 11858
   HEAP32[$34 >> 2] = $19; //@line 11859
   $35 = $ReallocAsyncCtx3 + 24 | 0; //@line 11860
   HEAP32[$35 >> 2] = $6; //@line 11861
   $36 = $ReallocAsyncCtx3 + 28 | 0; //@line 11862
   HEAP32[$36 >> 2] = $8; //@line 11863
   $37 = $ReallocAsyncCtx3 + 32 | 0; //@line 11864
   HEAP32[$37 >> 2] = $4; //@line 11865
   sp = STACKTOP; //@line 11866
   return;
  }
 }
 $46 = HEAP32[$19 >> 2] | 0; //@line 11870
 if ($46 | 0) {
  $49 = HEAP32[$46 + 8 >> 2] | 0; //@line 11874
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 11875
  FUNCTION_TABLE_vi[$49 & 1023]($8); //@line 11876
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 338; //@line 11879
   $50 = $ReallocAsyncCtx4 + 4 | 0; //@line 11880
   HEAP32[$50 >> 2] = $6; //@line 11881
   $51 = $ReallocAsyncCtx4 + 8 | 0; //@line 11882
   HEAP32[$51 >> 2] = 0; //@line 11883
   $52 = $ReallocAsyncCtx4 + 12 | 0; //@line 11884
   HEAP32[$52 >> 2] = $4; //@line 11885
   sp = STACKTOP; //@line 11886
   return;
  }
  ___async_unwind = 0; //@line 11889
  HEAP32[$ReallocAsyncCtx4 >> 2] = 338; //@line 11890
  $50 = $ReallocAsyncCtx4 + 4 | 0; //@line 11891
  HEAP32[$50 >> 2] = $6; //@line 11892
  $51 = $ReallocAsyncCtx4 + 8 | 0; //@line 11893
  HEAP32[$51 >> 2] = 0; //@line 11894
  $52 = $ReallocAsyncCtx4 + 12 | 0; //@line 11895
  HEAP32[$52 >> 2] = $4; //@line 11896
  sp = STACKTOP; //@line 11897
  return;
 }
 $53 = HEAP32[$6 >> 2] | 0; //@line 11900
 if (!$53) {
  HEAP32[___async_retval >> 2] = 0; //@line 11904
  return;
 }
 $56 = HEAP32[$53 + 8 >> 2] | 0; //@line 11908
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 11909
 FUNCTION_TABLE_vi[$56 & 1023]($4); //@line 11910
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 339; //@line 11913
  $57 = $ReallocAsyncCtx5 + 4 | 0; //@line 11914
  HEAP32[$57 >> 2] = 0; //@line 11915
  sp = STACKTOP; //@line 11916
  return;
 }
 ___async_unwind = 0; //@line 11919
 HEAP32[$ReallocAsyncCtx5 >> 2] = 339; //@line 11920
 $57 = $ReallocAsyncCtx5 + 4 | 0; //@line 11921
 HEAP32[$57 >> 2] = 0; //@line 11922
 sp = STACKTOP; //@line 11923
 return;
}
function __ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$pre = 0, $$pre12 = 0, $$pre13 = 0, $12 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $4 = 0, $46 = 0, $47 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $57 = 0, $59 = 0, $6 = 0, $60 = 0, $63 = 0, $70 = 0, $71 = 0, $74 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 7098
 if (!$1) {
  return;
 }
 $3 = $1 + 12 | 0; //@line 7103
 $4 = HEAP32[$3 >> 2] | 0; //@line 7104
 if ($4 | 0) {
  $6 = $0 + 1880 | 0; //@line 7107
  if (($6 | 0) != ($1 | 0)) {
   $8 = $0 + 1892 | 0; //@line 7110
   $9 = HEAP32[$8 >> 2] | 0; //@line 7111
   do {
    if (!$9) {
     $20 = $4; //@line 7115
     label = 8; //@line 7116
    } else {
     $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 7119
     $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 7120
     FUNCTION_TABLE_vi[$12 & 1023]($6); //@line 7121
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 229; //@line 7124
      HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 7126
      HEAP32[$AsyncCtx + 8 >> 2] = $8; //@line 7128
      HEAP32[$AsyncCtx + 12 >> 2] = $6; //@line 7130
      HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 7132
      HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 7134
      sp = STACKTOP; //@line 7135
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 7138
      $$pre = HEAP32[$3 >> 2] | 0; //@line 7139
      if (!$$pre) {
       $26 = 0; //@line 7142
       break;
      } else {
       $20 = $$pre; //@line 7145
       label = 8; //@line 7146
       break;
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 8) {
     $21 = HEAP32[$20 + 4 >> 2] | 0; //@line 7155
     $AsyncCtx2 = _emscripten_alloc_async_context(20, sp) | 0; //@line 7156
     FUNCTION_TABLE_vii[$21 & 31]($6, $1); //@line 7157
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 230; //@line 7160
      HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 7162
      HEAP32[$AsyncCtx2 + 8 >> 2] = $8; //@line 7164
      HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 7166
      HEAP32[$AsyncCtx2 + 16 >> 2] = $3; //@line 7168
      sp = STACKTOP; //@line 7169
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7172
      $26 = HEAP32[$3 >> 2] | 0; //@line 7174
      break;
     }
    }
   } while (0);
   HEAP32[$8 >> 2] = $26; //@line 7179
  }
 }
 $27 = $1 + 16 | 0; //@line 7182
 $28 = $1 + 28 | 0; //@line 7183
 $29 = HEAP32[$28 >> 2] | 0; //@line 7184
 if ($29 | 0) {
  $31 = $0 + 1896 | 0; //@line 7187
  if (($31 | 0) != ($27 | 0)) {
   $33 = $0 + 1908 | 0; //@line 7190
   $34 = HEAP32[$33 >> 2] | 0; //@line 7191
   do {
    if (!$34) {
     $46 = $29; //@line 7195
     label = 18; //@line 7196
    } else {
     $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 7199
     $AsyncCtx5 = _emscripten_alloc_async_context(28, sp) | 0; //@line 7200
     FUNCTION_TABLE_vi[$37 & 1023]($31); //@line 7201
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 231; //@line 7204
      HEAP32[$AsyncCtx5 + 4 >> 2] = $28; //@line 7206
      HEAP32[$AsyncCtx5 + 8 >> 2] = $33; //@line 7208
      HEAP32[$AsyncCtx5 + 12 >> 2] = $31; //@line 7210
      HEAP32[$AsyncCtx5 + 16 >> 2] = $27; //@line 7212
      HEAP32[$AsyncCtx5 + 20 >> 2] = $1; //@line 7214
      HEAP32[$AsyncCtx5 + 24 >> 2] = $0; //@line 7216
      sp = STACKTOP; //@line 7217
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 7220
      $$pre12 = HEAP32[$28 >> 2] | 0; //@line 7221
      if (!$$pre12) {
       $52 = 0; //@line 7224
       break;
      } else {
       $46 = $$pre12; //@line 7227
       label = 18; //@line 7228
       break;
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 18) {
     $47 = HEAP32[$46 + 4 >> 2] | 0; //@line 7237
     $AsyncCtx8 = _emscripten_alloc_async_context(20, sp) | 0; //@line 7238
     FUNCTION_TABLE_vii[$47 & 31]($31, $27); //@line 7239
     if (___async) {
      HEAP32[$AsyncCtx8 >> 2] = 232; //@line 7242
      HEAP32[$AsyncCtx8 + 4 >> 2] = $28; //@line 7244
      HEAP32[$AsyncCtx8 + 8 >> 2] = $33; //@line 7246
      HEAP32[$AsyncCtx8 + 12 >> 2] = $1; //@line 7248
      HEAP32[$AsyncCtx8 + 16 >> 2] = $0; //@line 7250
      sp = STACKTOP; //@line 7251
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx8 | 0); //@line 7254
      $52 = HEAP32[$28 >> 2] | 0; //@line 7256
      break;
     }
    }
   } while (0);
   HEAP32[$33 >> 2] = $52; //@line 7261
  }
 }
 $53 = $1 + 32 | 0; //@line 7264
 $54 = $1 + 44 | 0; //@line 7265
 $55 = HEAP32[$54 >> 2] | 0; //@line 7266
 if (!$55) {
  return;
 }
 $57 = $0 + 1912 | 0; //@line 7271
 if (($57 | 0) == ($53 | 0)) {
  return;
 }
 $59 = $0 + 1924 | 0; //@line 7276
 $60 = HEAP32[$59 >> 2] | 0; //@line 7277
 do {
  if (!$60) {
   $70 = $55; //@line 7281
   label = 28; //@line 7282
  } else {
   $63 = HEAP32[$60 + 8 >> 2] | 0; //@line 7285
   $AsyncCtx11 = _emscripten_alloc_async_context(20, sp) | 0; //@line 7286
   FUNCTION_TABLE_vi[$63 & 1023]($57); //@line 7287
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 233; //@line 7290
    HEAP32[$AsyncCtx11 + 4 >> 2] = $54; //@line 7292
    HEAP32[$AsyncCtx11 + 8 >> 2] = $59; //@line 7294
    HEAP32[$AsyncCtx11 + 12 >> 2] = $57; //@line 7296
    HEAP32[$AsyncCtx11 + 16 >> 2] = $53; //@line 7298
    sp = STACKTOP; //@line 7299
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 7302
    $$pre13 = HEAP32[$54 >> 2] | 0; //@line 7303
    if (!$$pre13) {
     $74 = 0; //@line 7306
     break;
    } else {
     $70 = $$pre13; //@line 7309
     label = 28; //@line 7310
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 28) {
   $71 = HEAP32[$70 + 4 >> 2] | 0; //@line 7319
   $AsyncCtx14 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7320
   FUNCTION_TABLE_vii[$71 & 31]($57, $53); //@line 7321
   if (___async) {
    HEAP32[$AsyncCtx14 >> 2] = 234; //@line 7324
    HEAP32[$AsyncCtx14 + 4 >> 2] = $54; //@line 7326
    HEAP32[$AsyncCtx14 + 8 >> 2] = $59; //@line 7328
    sp = STACKTOP; //@line 7329
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 7332
    $74 = HEAP32[$54 >> 2] | 0; //@line 7334
    break;
   }
  }
 } while (0);
 HEAP32[$59 >> 2] = $74; //@line 7339
 return;
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_192($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 590
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 592
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 594
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 598
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 600
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 602
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 604
 $15 = $8 + 12 | 0; //@line 605
 HEAP32[$8 >> 2] = 7; //@line 606
 HEAP32[$8 + 4 >> 2] = 0; //@line 608
 HEAP32[$8 + 8 >> 2] = $2; //@line 610
 HEAP32[$15 >> 2] = 848; //@line 611
 $16 = $2 + 1244 | 0; //@line 612
 if (($16 | 0) == ($8 | 0)) {
  $43 = HEAP32[214] | 0; //@line 616
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(28) | 0; //@line 617
  FUNCTION_TABLE_vi[$43 & 1023]($8); //@line 618
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 469; //@line 621
   $44 = $ReallocAsyncCtx6 + 4 | 0; //@line 622
   HEAP32[$44 >> 2] = $2; //@line 623
   $45 = $ReallocAsyncCtx6 + 8 | 0; //@line 624
   HEAP32[$45 >> 2] = $8; //@line 625
   $46 = $ReallocAsyncCtx6 + 12 | 0; //@line 626
   HEAP32[$46 >> 2] = $4; //@line 627
   $47 = $ReallocAsyncCtx6 + 16 | 0; //@line 628
   HEAP32[$47 >> 2] = $10; //@line 629
   $48 = $ReallocAsyncCtx6 + 20 | 0; //@line 630
   HEAP32[$48 >> 2] = $12; //@line 631
   $49 = $ReallocAsyncCtx6 + 24 | 0; //@line 632
   HEAP32[$49 >> 2] = $14; //@line 633
   sp = STACKTOP; //@line 634
   return;
  }
  ___async_unwind = 0; //@line 637
  HEAP32[$ReallocAsyncCtx6 >> 2] = 469; //@line 638
  $44 = $ReallocAsyncCtx6 + 4 | 0; //@line 639
  HEAP32[$44 >> 2] = $2; //@line 640
  $45 = $ReallocAsyncCtx6 + 8 | 0; //@line 641
  HEAP32[$45 >> 2] = $8; //@line 642
  $46 = $ReallocAsyncCtx6 + 12 | 0; //@line 643
  HEAP32[$46 >> 2] = $4; //@line 644
  $47 = $ReallocAsyncCtx6 + 16 | 0; //@line 645
  HEAP32[$47 >> 2] = $10; //@line 646
  $48 = $ReallocAsyncCtx6 + 20 | 0; //@line 647
  HEAP32[$48 >> 2] = $12; //@line 648
  $49 = $ReallocAsyncCtx6 + 24 | 0; //@line 649
  HEAP32[$49 >> 2] = $14; //@line 650
  sp = STACKTOP; //@line 651
  return;
 }
 $18 = $2 + 1256 | 0; //@line 654
 $19 = HEAP32[$18 >> 2] | 0; //@line 655
 if (!$19) {
  $33 = HEAP32[213] | 0; //@line 659
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(36) | 0; //@line 660
  FUNCTION_TABLE_vii[$33 & 31]($16, $8); //@line 661
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 468; //@line 664
   $34 = $ReallocAsyncCtx5 + 4 | 0; //@line 665
   HEAP32[$34 >> 2] = $8; //@line 666
   $35 = $ReallocAsyncCtx5 + 8 | 0; //@line 667
   HEAP32[$35 >> 2] = $2; //@line 668
   $36 = $ReallocAsyncCtx5 + 12 | 0; //@line 669
   HEAP32[$36 >> 2] = $4; //@line 670
   $37 = $ReallocAsyncCtx5 + 16 | 0; //@line 671
   HEAP32[$37 >> 2] = $10; //@line 672
   $38 = $ReallocAsyncCtx5 + 20 | 0; //@line 673
   HEAP32[$38 >> 2] = $12; //@line 674
   $39 = $ReallocAsyncCtx5 + 24 | 0; //@line 675
   HEAP32[$39 >> 2] = $15; //@line 676
   $40 = $ReallocAsyncCtx5 + 28 | 0; //@line 677
   HEAP32[$40 >> 2] = $18; //@line 678
   $41 = $ReallocAsyncCtx5 + 32 | 0; //@line 679
   HEAP32[$41 >> 2] = $14; //@line 680
   sp = STACKTOP; //@line 681
   return;
  }
  ___async_unwind = 0; //@line 684
  HEAP32[$ReallocAsyncCtx5 >> 2] = 468; //@line 685
  $34 = $ReallocAsyncCtx5 + 4 | 0; //@line 686
  HEAP32[$34 >> 2] = $8; //@line 687
  $35 = $ReallocAsyncCtx5 + 8 | 0; //@line 688
  HEAP32[$35 >> 2] = $2; //@line 689
  $36 = $ReallocAsyncCtx5 + 12 | 0; //@line 690
  HEAP32[$36 >> 2] = $4; //@line 691
  $37 = $ReallocAsyncCtx5 + 16 | 0; //@line 692
  HEAP32[$37 >> 2] = $10; //@line 693
  $38 = $ReallocAsyncCtx5 + 20 | 0; //@line 694
  HEAP32[$38 >> 2] = $12; //@line 695
  $39 = $ReallocAsyncCtx5 + 24 | 0; //@line 696
  HEAP32[$39 >> 2] = $15; //@line 697
  $40 = $ReallocAsyncCtx5 + 28 | 0; //@line 698
  HEAP32[$40 >> 2] = $18; //@line 699
  $41 = $ReallocAsyncCtx5 + 32 | 0; //@line 700
  HEAP32[$41 >> 2] = $14; //@line 701
  sp = STACKTOP; //@line 702
  return;
 } else {
  $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 706
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(40) | 0; //@line 707
  FUNCTION_TABLE_vi[$22 & 1023]($16); //@line 708
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 467; //@line 711
   $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 712
   HEAP32[$23 >> 2] = $16; //@line 713
   $24 = $ReallocAsyncCtx4 + 8 | 0; //@line 714
   HEAP32[$24 >> 2] = $8; //@line 715
   $25 = $ReallocAsyncCtx4 + 12 | 0; //@line 716
   HEAP32[$25 >> 2] = $18; //@line 717
   $26 = $ReallocAsyncCtx4 + 16 | 0; //@line 718
   HEAP32[$26 >> 2] = $2; //@line 719
   $27 = $ReallocAsyncCtx4 + 20 | 0; //@line 720
   HEAP32[$27 >> 2] = $4; //@line 721
   $28 = $ReallocAsyncCtx4 + 24 | 0; //@line 722
   HEAP32[$28 >> 2] = $15; //@line 723
   $29 = $ReallocAsyncCtx4 + 28 | 0; //@line 724
   HEAP32[$29 >> 2] = $10; //@line 725
   $30 = $ReallocAsyncCtx4 + 32 | 0; //@line 726
   HEAP32[$30 >> 2] = $12; //@line 727
   $31 = $ReallocAsyncCtx4 + 36 | 0; //@line 728
   HEAP32[$31 >> 2] = $14; //@line 729
   sp = STACKTOP; //@line 730
   return;
  }
  ___async_unwind = 0; //@line 733
  HEAP32[$ReallocAsyncCtx4 >> 2] = 467; //@line 734
  $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 735
  HEAP32[$23 >> 2] = $16; //@line 736
  $24 = $ReallocAsyncCtx4 + 8 | 0; //@line 737
  HEAP32[$24 >> 2] = $8; //@line 738
  $25 = $ReallocAsyncCtx4 + 12 | 0; //@line 739
  HEAP32[$25 >> 2] = $18; //@line 740
  $26 = $ReallocAsyncCtx4 + 16 | 0; //@line 741
  HEAP32[$26 >> 2] = $2; //@line 742
  $27 = $ReallocAsyncCtx4 + 20 | 0; //@line 743
  HEAP32[$27 >> 2] = $4; //@line 744
  $28 = $ReallocAsyncCtx4 + 24 | 0; //@line 745
  HEAP32[$28 >> 2] = $15; //@line 746
  $29 = $ReallocAsyncCtx4 + 28 | 0; //@line 747
  HEAP32[$29 >> 2] = $10; //@line 748
  $30 = $ReallocAsyncCtx4 + 32 | 0; //@line 749
  HEAP32[$30 >> 2] = $12; //@line 750
  $31 = $ReallocAsyncCtx4 + 36 | 0; //@line 751
  HEAP32[$31 >> 2] = $14; //@line 752
  sp = STACKTOP; //@line 753
  return;
 }
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_432($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $45 = 0, $46 = 0, $49 = 0, $57 = 0, $6 = 0, $63 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 31879
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31881
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31883
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31885
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31887
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31889
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31891
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 31893
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 31895
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(36) | 0; //@line 31900
  _mbed_assert_internal(12025, 12034, 215); //@line 31901
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 275; //@line 31904
   $19 = $ReallocAsyncCtx8 + 4 | 0; //@line 31905
   HEAP32[$19 >> 2] = $2; //@line 31906
   $20 = $ReallocAsyncCtx8 + 8 | 0; //@line 31907
   HEAP32[$20 >> 2] = $4; //@line 31908
   $21 = $ReallocAsyncCtx8 + 12 | 0; //@line 31909
   HEAP32[$21 >> 2] = $6; //@line 31910
   $22 = $ReallocAsyncCtx8 + 16 | 0; //@line 31911
   HEAP32[$22 >> 2] = $8; //@line 31912
   $23 = $ReallocAsyncCtx8 + 20 | 0; //@line 31913
   HEAP32[$23 >> 2] = $10; //@line 31914
   $24 = $ReallocAsyncCtx8 + 24 | 0; //@line 31915
   HEAP32[$24 >> 2] = $12; //@line 31916
   $25 = $ReallocAsyncCtx8 + 28 | 0; //@line 31917
   HEAP32[$25 >> 2] = $14; //@line 31918
   $26 = $ReallocAsyncCtx8 + 32 | 0; //@line 31919
   HEAP32[$26 >> 2] = $16; //@line 31920
   sp = STACKTOP; //@line 31921
   return;
  }
  ___async_unwind = 0; //@line 31924
  HEAP32[$ReallocAsyncCtx8 >> 2] = 275; //@line 31925
  $19 = $ReallocAsyncCtx8 + 4 | 0; //@line 31926
  HEAP32[$19 >> 2] = $2; //@line 31927
  $20 = $ReallocAsyncCtx8 + 8 | 0; //@line 31928
  HEAP32[$20 >> 2] = $4; //@line 31929
  $21 = $ReallocAsyncCtx8 + 12 | 0; //@line 31930
  HEAP32[$21 >> 2] = $6; //@line 31931
  $22 = $ReallocAsyncCtx8 + 16 | 0; //@line 31932
  HEAP32[$22 >> 2] = $8; //@line 31933
  $23 = $ReallocAsyncCtx8 + 20 | 0; //@line 31934
  HEAP32[$23 >> 2] = $10; //@line 31935
  $24 = $ReallocAsyncCtx8 + 24 | 0; //@line 31936
  HEAP32[$24 >> 2] = $12; //@line 31937
  $25 = $ReallocAsyncCtx8 + 28 | 0; //@line 31938
  HEAP32[$25 >> 2] = $14; //@line 31939
  $26 = $ReallocAsyncCtx8 + 32 | 0; //@line 31940
  HEAP32[$26 >> 2] = $16; //@line 31941
  sp = STACKTOP; //@line 31942
  return;
 }
 HEAP32[$6 + 364 >> 2] = 2; //@line 31946
 if (HEAP8[$6 + 371 >> 0] | 0) {
  $31 = HEAP32[$4 >> 2] | 0; //@line 31951
  $34 = HEAP32[$6 + 972 >> 2] | 0; //@line 31954
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(32) | 0; //@line 31955
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($31, $6 + 1036 | 0, $34); //@line 31956
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 276; //@line 31959
   $35 = $ReallocAsyncCtx5 + 4 | 0; //@line 31960
   HEAP32[$35 >> 2] = $2; //@line 31961
   $36 = $ReallocAsyncCtx5 + 8 | 0; //@line 31962
   HEAP32[$36 >> 2] = $6; //@line 31963
   $37 = $ReallocAsyncCtx5 + 12 | 0; //@line 31964
   HEAP32[$37 >> 2] = $4; //@line 31965
   $38 = $ReallocAsyncCtx5 + 16 | 0; //@line 31966
   HEAP32[$38 >> 2] = $8; //@line 31967
   $39 = $ReallocAsyncCtx5 + 20 | 0; //@line 31968
   HEAP32[$39 >> 2] = $10; //@line 31969
   $40 = $ReallocAsyncCtx5 + 24 | 0; //@line 31970
   HEAP32[$40 >> 2] = $12; //@line 31971
   $41 = $ReallocAsyncCtx5 + 28 | 0; //@line 31972
   HEAP32[$41 >> 2] = $14; //@line 31973
   sp = STACKTOP; //@line 31974
   return;
  }
  ___async_unwind = 0; //@line 31977
  HEAP32[$ReallocAsyncCtx5 >> 2] = 276; //@line 31978
  $35 = $ReallocAsyncCtx5 + 4 | 0; //@line 31979
  HEAP32[$35 >> 2] = $2; //@line 31980
  $36 = $ReallocAsyncCtx5 + 8 | 0; //@line 31981
  HEAP32[$36 >> 2] = $6; //@line 31982
  $37 = $ReallocAsyncCtx5 + 12 | 0; //@line 31983
  HEAP32[$37 >> 2] = $4; //@line 31984
  $38 = $ReallocAsyncCtx5 + 16 | 0; //@line 31985
  HEAP32[$38 >> 2] = $8; //@line 31986
  $39 = $ReallocAsyncCtx5 + 20 | 0; //@line 31987
  HEAP32[$39 >> 2] = $10; //@line 31988
  $40 = $ReallocAsyncCtx5 + 24 | 0; //@line 31989
  HEAP32[$40 >> 2] = $12; //@line 31990
  $41 = $ReallocAsyncCtx5 + 28 | 0; //@line 31991
  HEAP32[$41 >> 2] = $14; //@line 31992
  sp = STACKTOP; //@line 31993
  return;
 }
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($6 + 288 | 0) | 0) + 4 >> 2] = 0; //@line 31999
 $45 = $6 + 944 | 0; //@line 32000
 $46 = HEAP8[$45 >> 0] | 0; //@line 32001
 if (!($46 << 24 >> 24)) {
  HEAP8[$45 >> 0] = 1; //@line 32004
  $49 = 1; //@line 32005
 } else {
  $49 = $46; //@line 32007
 }
 HEAP8[$45 >> 0] = $49 | 32; //@line 32010
 HEAP8[$6 + 376 >> 0] = ($8 | 0) == 0 & (HEAP8[$6 + 944 >> 0] & 8) != 0 & 1; //@line 32019
 $57 = HEAP8[$6 + 378 >> 0] | 0; //@line 32021
 HEAP8[$6 + 379 >> 0] = $57; //@line 32023
 HEAP8[$10 >> 0] = $57; //@line 32024
 HEAP8[$12 + 1 >> 0] = HEAP8[$6 + 372 >> 0] | 0; //@line 32028
 HEAP32[$12 + 4 >> 2] = $14; //@line 32030
 $63 = HEAP32[$6 >> 2] | 0; //@line 32031
 $66 = HEAP32[(HEAP32[$63 >> 2] | 0) + 12 >> 2] | 0; //@line 32034
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 32035
 FUNCTION_TABLE_vii[$66 & 31]($63, $12); //@line 32036
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 279; //@line 32039
  $67 = $ReallocAsyncCtx + 4 | 0; //@line 32040
  HEAP32[$67 >> 2] = $6; //@line 32041
  $68 = $ReallocAsyncCtx + 8 | 0; //@line 32042
  HEAP32[$68 >> 2] = $14; //@line 32043
  $69 = $ReallocAsyncCtx + 12 | 0; //@line 32044
  HEAP32[$69 >> 2] = $10; //@line 32045
  sp = STACKTOP; //@line 32046
  return;
 }
 ___async_unwind = 0; //@line 32049
 HEAP32[$ReallocAsyncCtx >> 2] = 279; //@line 32050
 $67 = $ReallocAsyncCtx + 4 | 0; //@line 32051
 HEAP32[$67 >> 2] = $6; //@line 32052
 $68 = $ReallocAsyncCtx + 8 | 0; //@line 32053
 HEAP32[$68 >> 2] = $14; //@line 32054
 $69 = $ReallocAsyncCtx + 12 | 0; //@line 32055
 HEAP32[$69 >> 2] = $10; //@line 32056
 sp = STACKTOP; //@line 32057
 return;
}
function __ZN7LoRaMac25on_tx_delayed_timer_eventEv($0) {
 $0 = $0 | 0;
 var $$05$i = 0, $$06$i = 0, $1 = 0, $15 = 0, $2 = 0, $37 = 0, $4 = 0, $49 = 0, $52 = 0, $57 = 0, $58 = 0, $72 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx14 = 0, $AsyncCtx4 = 0, $AsyncCtx7 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 12695
 STACKTOP = STACKTOP + 16 | 0; //@line 12696
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 12696
 $vararg_buffer1 = sp + 8 | 0; //@line 12697
 $vararg_buffer = sp; //@line 12698
 $1 = sp + 13 | 0; //@line 12699
 $2 = sp + 12 | 0; //@line 12700
 $4 = HEAP32[$0 + 356 >> 2] | 0; //@line 12702
 $AsyncCtx14 = _emscripten_alloc_async_context(40, sp) | 0; //@line 12704
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($4, $0 + 1016 | 0); //@line 12705
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 387; //@line 12708
  HEAP32[$AsyncCtx14 + 4 >> 2] = $0; //@line 12710
  HEAP32[$AsyncCtx14 + 8 >> 2] = $1; //@line 12712
  HEAP32[$AsyncCtx14 + 12 >> 2] = $2; //@line 12714
  HEAP32[$AsyncCtx14 + 16 >> 2] = $1; //@line 12716
  HEAP32[$AsyncCtx14 + 20 >> 2] = $2; //@line 12718
  HEAP32[$AsyncCtx14 + 24 >> 2] = $vararg_buffer; //@line 12720
  HEAP32[$AsyncCtx14 + 28 >> 2] = $vararg_buffer; //@line 12722
  HEAP32[$AsyncCtx14 + 32 >> 2] = $vararg_buffer1; //@line 12724
  HEAP32[$AsyncCtx14 + 36 >> 2] = $vararg_buffer1; //@line 12726
  sp = STACKTOP; //@line 12727
  STACKTOP = sp; //@line 12728
  return;
 }
 _emscripten_free_async_context($AsyncCtx14 | 0); //@line 12730
 $15 = $0 + 968 | 0; //@line 12731
 HEAP32[$15 >> 2] = HEAP32[$15 >> 2] & -17; //@line 12734
 if (HEAP8[$0 + 944 >> 0] & 8) {
  if (!(HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) >> 2] | 0)) {
   HEAP8[$0 + 372 >> 0] = 0; //@line 12747
   HEAP32[$0 + 956 >> 2] = 0; //@line 12749
   HEAP32[$0 + 960 >> 2] = 0; //@line 12751
   HEAP32[$0 + 964 >> 2] = 0; //@line 12753
   HEAP8[$0 + 380 >> 0] = 0; //@line 12755
   HEAP8[$0 + 894 >> 0] = 1; //@line 12757
   HEAP8[$0 + 895 >> 0] = 1; //@line 12759
   HEAP8[$0 + 377 >> 0] = 0; //@line 12761
   HEAP8[$0 + 1152 >> 0] = 0; //@line 12763
   HEAP16[$0 + 1154 >> 1] = 1; //@line 12765
   $37 = $0 + 4 | 0; //@line 12766
   __ZN14LoRaMacCommand20clear_command_bufferEv($37); //@line 12767
   __ZN14LoRaMacCommand19clear_repeat_bufferEv($37); //@line 12768
   __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($37); //@line 12769
   HEAP8[$0 + 371 >> 0] = 1; //@line 12771
   __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb(HEAP32[$0 >> 2] | 0, $0 + 360 | 0, 0); //@line 12773
   HEAP8[$0 + 373 >> 0] = 0; //@line 12775
   HEAP8[$0 + 374 >> 0] = 0; //@line 12777
   $$05$i = HEAP32[$0 + 1208 >> 2] | 0; //@line 12779
   if ($$05$i | 0) {
    $$06$i = $$05$i; //@line 12782
    do {
     HEAP32[$$06$i + 36 >> 2] = 0; //@line 12785
     $$06$i = HEAP32[$$06$i + 40 >> 2] | 0; //@line 12787
    } while (($$06$i | 0) != 0);
   }
   HEAP8[$0 + 378 >> 0] = 0; //@line 12797
   HEAP8[$0 + 379 >> 0] = 0; //@line 12799
   $49 = HEAP32[$0 >> 2] | 0; //@line 12800
   $52 = HEAP32[(HEAP32[$49 >> 2] | 0) + 52 >> 2] | 0; //@line 12803
   $57 = (HEAPU8[$0 + 897 >> 0] | 0) + 1 & 255; //@line 12808
   $AsyncCtx = _emscripten_alloc_async_context(40, sp) | 0; //@line 12809
   $58 = FUNCTION_TABLE_iii[$52 & 31]($49, $57) | 0; //@line 12810
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 388; //@line 12813
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 12815
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 12817
    HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 12819
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 12821
    HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 12823
    HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer; //@line 12825
    HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer; //@line 12827
    HEAP32[$AsyncCtx + 32 >> 2] = $vararg_buffer1; //@line 12829
    HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer1; //@line 12831
    sp = STACKTOP; //@line 12832
    STACKTOP = sp; //@line 12833
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 12835
   HEAP8[$0 + 1097 >> 0] = $58; //@line 12837
   HEAP8[$1 >> 0] = 0; //@line 12838
   HEAP8[$2 >> 0] = HEAP8[$0 + 1156 >> 0] << 7; //@line 12842
   $AsyncCtx7 = _emscripten_alloc_async_context(32, sp) | 0; //@line 12843
   $72 = __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt($0, $1, $2, 0, 0, 0) | 0; //@line 12844
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 389; //@line 12847
    HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 12849
    HEAP32[$AsyncCtx7 + 8 >> 2] = $vararg_buffer; //@line 12851
    HEAP32[$AsyncCtx7 + 12 >> 2] = $vararg_buffer; //@line 12853
    HEAP32[$AsyncCtx7 + 16 >> 2] = $vararg_buffer1; //@line 12855
    HEAP32[$AsyncCtx7 + 20 >> 2] = $vararg_buffer1; //@line 12857
    HEAP32[$AsyncCtx7 + 24 >> 2] = $2; //@line 12859
    HEAP32[$AsyncCtx7 + 28 >> 2] = $1; //@line 12861
    sp = STACKTOP; //@line 12862
    STACKTOP = sp; //@line 12863
    return;
   }
   _emscripten_free_async_context($AsyncCtx7 | 0); //@line 12865
   if ($72 | 0) {
    _printf(12329, $vararg_buffer) | 0; //@line 12868
    HEAP32[$vararg_buffer1 >> 2] = $72; //@line 12869
    _printf(12342, $vararg_buffer1) | 0; //@line 12870
    $AsyncCtx4 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12871
    _putchar(10) | 0; //@line 12872
    if (___async) {
     HEAP32[$AsyncCtx4 >> 2] = 391; //@line 12875
     HEAP32[$AsyncCtx4 + 4 >> 2] = $2; //@line 12877
     HEAP32[$AsyncCtx4 + 8 >> 2] = $1; //@line 12879
     sp = STACKTOP; //@line 12880
     STACKTOP = sp; //@line 12881
     return;
    }
    _emscripten_free_async_context($AsyncCtx4 | 0); //@line 12883
    STACKTOP = sp; //@line 12884
    return;
   }
  }
 }
 $AsyncCtx10 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12888
 __ZN7LoRaMac11schedule_txEv($0) | 0; //@line 12889
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 390; //@line 12892
  HEAP32[$AsyncCtx10 + 4 >> 2] = $2; //@line 12894
  HEAP32[$AsyncCtx10 + 8 >> 2] = $1; //@line 12896
  sp = STACKTOP; //@line 12897
  STACKTOP = sp; //@line 12898
  return;
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 12900
 STACKTOP = sp; //@line 12901
 return;
}
function __ZN7LoRaMac11schedule_txEv__async_cb_66($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $43 = 0, $44 = 0, $47 = 0, $48 = 0, $6 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 20552
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20554
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20556
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20558
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20560
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20562
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20564
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20566
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20568
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 20570
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 20572
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 20574
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 20576
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 20578
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 20580
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 20582
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 20584
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 20586
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 20588
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 20590
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 20592
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  $43 = __ZN7LoRaPHY23get_default_tx_datarateEv(HEAP32[$2 >> 2] | 0) | 0; //@line 20598
  HEAP8[$24 >> 0] = $43; //@line 20599
  HEAP8[$32 >> 0] = $43; //@line 20600
  $44 = HEAP32[$2 >> 2] | 0; //@line 20601
  $47 = HEAP32[(HEAP32[$44 >> 2] | 0) + 56 >> 2] | 0; //@line 20604
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(84) | 0; //@line 20605
  $48 = FUNCTION_TABLE_iiiiii[$47 & 7]($44, $38, $10, $16, $40) | 0; //@line 20606
  if (!___async) {
   HEAP8[___async_retval >> 0] = $48 & 1; //@line 20611
   ___async_unwind = 0; //@line 20612
  }
  HEAP32[$ReallocAsyncCtx2 >> 2] = 393; //@line 20614
  HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 20616
  HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 20618
  HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 20620
  HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 20622
  HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 20624
  HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 20626
  HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $14; //@line 20628
  HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $16; //@line 20630
  HEAP32[$ReallocAsyncCtx2 + 36 >> 2] = $18; //@line 20632
  HEAP32[$ReallocAsyncCtx2 + 40 >> 2] = $20; //@line 20634
  HEAP32[$ReallocAsyncCtx2 + 44 >> 2] = $22; //@line 20636
  HEAP32[$ReallocAsyncCtx2 + 48 >> 2] = $24; //@line 20638
  HEAP32[$ReallocAsyncCtx2 + 52 >> 2] = $26; //@line 20640
  HEAP32[$ReallocAsyncCtx2 + 56 >> 2] = $28; //@line 20642
  HEAP32[$ReallocAsyncCtx2 + 60 >> 2] = $30; //@line 20644
  HEAP32[$ReallocAsyncCtx2 + 64 >> 2] = $32; //@line 20646
  HEAP32[$ReallocAsyncCtx2 + 68 >> 2] = $34; //@line 20648
  HEAP32[$ReallocAsyncCtx2 + 72 >> 2] = $36; //@line 20650
  HEAP32[$ReallocAsyncCtx2 + 76 >> 2] = $38; //@line 20652
  HEAP32[$ReallocAsyncCtx2 + 80 >> 2] = $40; //@line 20654
  sp = STACKTOP; //@line 20655
  return;
 }
 _printf(12171, $28) | 0; //@line 20658
 $73 = HEAP8[$32 >> 0] | 0; //@line 20662
 HEAP32[$34 >> 2] = HEAPU8[$10 >> 0]; //@line 20663
 HEAP32[$34 + 4 >> 2] = $73; //@line 20665
 _printf(12184, $34) | 0; //@line 20666
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(56) | 0; //@line 20667
 _putchar(10) | 0; //@line 20668
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 394; //@line 20671
  $74 = $ReallocAsyncCtx7 + 4 | 0; //@line 20672
  HEAP32[$74 >> 2] = $2; //@line 20673
  $75 = $ReallocAsyncCtx7 + 8 | 0; //@line 20674
  HEAP32[$75 >> 2] = $4; //@line 20675
  $76 = $ReallocAsyncCtx7 + 12 | 0; //@line 20676
  HEAP32[$76 >> 2] = $22; //@line 20677
  $77 = $ReallocAsyncCtx7 + 16 | 0; //@line 20678
  HEAP32[$77 >> 2] = $24; //@line 20679
  $78 = $ReallocAsyncCtx7 + 20 | 0; //@line 20680
  HEAP32[$78 >> 2] = $6; //@line 20681
  $79 = $ReallocAsyncCtx7 + 24 | 0; //@line 20682
  HEAP32[$79 >> 2] = $8; //@line 20683
  $80 = $ReallocAsyncCtx7 + 28 | 0; //@line 20684
  HEAP32[$80 >> 2] = $16; //@line 20685
  $81 = $ReallocAsyncCtx7 + 32 | 0; //@line 20686
  HEAP32[$81 >> 2] = $10; //@line 20687
  $82 = $ReallocAsyncCtx7 + 36 | 0; //@line 20688
  HEAP32[$82 >> 2] = $12; //@line 20689
  $83 = $ReallocAsyncCtx7 + 40 | 0; //@line 20690
  HEAP32[$83 >> 2] = $14; //@line 20691
  $84 = $ReallocAsyncCtx7 + 44 | 0; //@line 20692
  HEAP32[$84 >> 2] = $18; //@line 20693
  $85 = $ReallocAsyncCtx7 + 48 | 0; //@line 20694
  HEAP32[$85 >> 2] = $20; //@line 20695
  $86 = $ReallocAsyncCtx7 + 52 | 0; //@line 20696
  HEAP32[$86 >> 2] = $26; //@line 20697
  sp = STACKTOP; //@line 20698
  return;
 }
 ___async_unwind = 0; //@line 20701
 HEAP32[$ReallocAsyncCtx7 >> 2] = 394; //@line 20702
 $74 = $ReallocAsyncCtx7 + 4 | 0; //@line 20703
 HEAP32[$74 >> 2] = $2; //@line 20704
 $75 = $ReallocAsyncCtx7 + 8 | 0; //@line 20705
 HEAP32[$75 >> 2] = $4; //@line 20706
 $76 = $ReallocAsyncCtx7 + 12 | 0; //@line 20707
 HEAP32[$76 >> 2] = $22; //@line 20708
 $77 = $ReallocAsyncCtx7 + 16 | 0; //@line 20709
 HEAP32[$77 >> 2] = $24; //@line 20710
 $78 = $ReallocAsyncCtx7 + 20 | 0; //@line 20711
 HEAP32[$78 >> 2] = $6; //@line 20712
 $79 = $ReallocAsyncCtx7 + 24 | 0; //@line 20713
 HEAP32[$79 >> 2] = $8; //@line 20714
 $80 = $ReallocAsyncCtx7 + 28 | 0; //@line 20715
 HEAP32[$80 >> 2] = $16; //@line 20716
 $81 = $ReallocAsyncCtx7 + 32 | 0; //@line 20717
 HEAP32[$81 >> 2] = $10; //@line 20718
 $82 = $ReallocAsyncCtx7 + 36 | 0; //@line 20719
 HEAP32[$82 >> 2] = $12; //@line 20720
 $83 = $ReallocAsyncCtx7 + 40 | 0; //@line 20721
 HEAP32[$83 >> 2] = $14; //@line 20722
 $84 = $ReallocAsyncCtx7 + 44 | 0; //@line 20723
 HEAP32[$84 >> 2] = $18; //@line 20724
 $85 = $ReallocAsyncCtx7 + 48 | 0; //@line 20725
 HEAP32[$85 >> 2] = $20; //@line 20726
 $86 = $ReallocAsyncCtx7 + 52 | 0; //@line 20727
 HEAP32[$86 >> 2] = $26; //@line 20728
 sp = STACKTOP; //@line 20729
 return;
}
function __ZN7LoRaMac11schedule_txEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $43 = 0, $44 = 0, $47 = 0, $48 = 0, $6 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 20365
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20367
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20369
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20371
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20373
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20375
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20377
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20379
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20381
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 20383
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 20385
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 20387
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 20389
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 20391
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 20393
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 20395
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 20397
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 20399
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 20401
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 20403
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 20405
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  $43 = __ZN7LoRaPHY23get_default_tx_datarateEv(HEAP32[$2 >> 2] | 0) | 0; //@line 20411
  HEAP8[$24 >> 0] = $43; //@line 20412
  HEAP8[$32 >> 0] = $43; //@line 20413
  $44 = HEAP32[$2 >> 2] | 0; //@line 20414
  $47 = HEAP32[(HEAP32[$44 >> 2] | 0) + 56 >> 2] | 0; //@line 20417
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(84) | 0; //@line 20418
  $48 = FUNCTION_TABLE_iiiiii[$47 & 7]($44, $38, $10, $16, $40) | 0; //@line 20419
  if (!___async) {
   HEAP8[___async_retval >> 0] = $48 & 1; //@line 20424
   ___async_unwind = 0; //@line 20425
  }
  HEAP32[$ReallocAsyncCtx2 >> 2] = 393; //@line 20427
  HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 20429
  HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 20431
  HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 20433
  HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 20435
  HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 20437
  HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 20439
  HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $14; //@line 20441
  HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $16; //@line 20443
  HEAP32[$ReallocAsyncCtx2 + 36 >> 2] = $18; //@line 20445
  HEAP32[$ReallocAsyncCtx2 + 40 >> 2] = $20; //@line 20447
  HEAP32[$ReallocAsyncCtx2 + 44 >> 2] = $22; //@line 20449
  HEAP32[$ReallocAsyncCtx2 + 48 >> 2] = $24; //@line 20451
  HEAP32[$ReallocAsyncCtx2 + 52 >> 2] = $26; //@line 20453
  HEAP32[$ReallocAsyncCtx2 + 56 >> 2] = $28; //@line 20455
  HEAP32[$ReallocAsyncCtx2 + 60 >> 2] = $30; //@line 20457
  HEAP32[$ReallocAsyncCtx2 + 64 >> 2] = $32; //@line 20459
  HEAP32[$ReallocAsyncCtx2 + 68 >> 2] = $34; //@line 20461
  HEAP32[$ReallocAsyncCtx2 + 72 >> 2] = $36; //@line 20463
  HEAP32[$ReallocAsyncCtx2 + 76 >> 2] = $38; //@line 20465
  HEAP32[$ReallocAsyncCtx2 + 80 >> 2] = $40; //@line 20467
  sp = STACKTOP; //@line 20468
  return;
 }
 _printf(12171, $28) | 0; //@line 20471
 $73 = HEAP8[$32 >> 0] | 0; //@line 20475
 HEAP32[$34 >> 2] = HEAPU8[$10 >> 0]; //@line 20476
 HEAP32[$34 + 4 >> 2] = $73; //@line 20478
 _printf(12184, $34) | 0; //@line 20479
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(56) | 0; //@line 20480
 _putchar(10) | 0; //@line 20481
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 394; //@line 20484
  $74 = $ReallocAsyncCtx7 + 4 | 0; //@line 20485
  HEAP32[$74 >> 2] = $2; //@line 20486
  $75 = $ReallocAsyncCtx7 + 8 | 0; //@line 20487
  HEAP32[$75 >> 2] = $4; //@line 20488
  $76 = $ReallocAsyncCtx7 + 12 | 0; //@line 20489
  HEAP32[$76 >> 2] = $22; //@line 20490
  $77 = $ReallocAsyncCtx7 + 16 | 0; //@line 20491
  HEAP32[$77 >> 2] = $24; //@line 20492
  $78 = $ReallocAsyncCtx7 + 20 | 0; //@line 20493
  HEAP32[$78 >> 2] = $6; //@line 20494
  $79 = $ReallocAsyncCtx7 + 24 | 0; //@line 20495
  HEAP32[$79 >> 2] = $8; //@line 20496
  $80 = $ReallocAsyncCtx7 + 28 | 0; //@line 20497
  HEAP32[$80 >> 2] = $16; //@line 20498
  $81 = $ReallocAsyncCtx7 + 32 | 0; //@line 20499
  HEAP32[$81 >> 2] = $10; //@line 20500
  $82 = $ReallocAsyncCtx7 + 36 | 0; //@line 20501
  HEAP32[$82 >> 2] = $12; //@line 20502
  $83 = $ReallocAsyncCtx7 + 40 | 0; //@line 20503
  HEAP32[$83 >> 2] = $14; //@line 20504
  $84 = $ReallocAsyncCtx7 + 44 | 0; //@line 20505
  HEAP32[$84 >> 2] = $18; //@line 20506
  $85 = $ReallocAsyncCtx7 + 48 | 0; //@line 20507
  HEAP32[$85 >> 2] = $20; //@line 20508
  $86 = $ReallocAsyncCtx7 + 52 | 0; //@line 20509
  HEAP32[$86 >> 2] = $26; //@line 20510
  sp = STACKTOP; //@line 20511
  return;
 }
 ___async_unwind = 0; //@line 20514
 HEAP32[$ReallocAsyncCtx7 >> 2] = 394; //@line 20515
 $74 = $ReallocAsyncCtx7 + 4 | 0; //@line 20516
 HEAP32[$74 >> 2] = $2; //@line 20517
 $75 = $ReallocAsyncCtx7 + 8 | 0; //@line 20518
 HEAP32[$75 >> 2] = $4; //@line 20519
 $76 = $ReallocAsyncCtx7 + 12 | 0; //@line 20520
 HEAP32[$76 >> 2] = $22; //@line 20521
 $77 = $ReallocAsyncCtx7 + 16 | 0; //@line 20522
 HEAP32[$77 >> 2] = $24; //@line 20523
 $78 = $ReallocAsyncCtx7 + 20 | 0; //@line 20524
 HEAP32[$78 >> 2] = $6; //@line 20525
 $79 = $ReallocAsyncCtx7 + 24 | 0; //@line 20526
 HEAP32[$79 >> 2] = $8; //@line 20527
 $80 = $ReallocAsyncCtx7 + 28 | 0; //@line 20528
 HEAP32[$80 >> 2] = $16; //@line 20529
 $81 = $ReallocAsyncCtx7 + 32 | 0; //@line 20530
 HEAP32[$81 >> 2] = $10; //@line 20531
 $82 = $ReallocAsyncCtx7 + 36 | 0; //@line 20532
 HEAP32[$82 >> 2] = $12; //@line 20533
 $83 = $ReallocAsyncCtx7 + 40 | 0; //@line 20534
 HEAP32[$83 >> 2] = $14; //@line 20535
 $84 = $ReallocAsyncCtx7 + 44 | 0; //@line 20536
 HEAP32[$84 >> 2] = $18; //@line 20537
 $85 = $ReallocAsyncCtx7 + 48 | 0; //@line 20538
 HEAP32[$85 >> 2] = $20; //@line 20539
 $86 = $ReallocAsyncCtx7 + 52 | 0; //@line 20540
 HEAP32[$86 >> 2] = $26; //@line 20541
 sp = STACKTOP; //@line 20542
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_344($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $41 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $51 = 0, $52 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 13492
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13494
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13496
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13498
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 13500
 $10 = HEAP8[$0 + 17 >> 0] | 0; //@line 13502
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 13504
 $15 = $2 + 12 | 0; //@line 13508
 HEAP32[$15 >> 2] = HEAP32[HEAP32[$0 + 24 >> 2] >> 2]; //@line 13509
 $16 = $2 + 16 | 0; //@line 13510
 HEAP8[$16 >> 0] = $8; //@line 13511
 HEAP8[$2 + 17 >> 0] = $10; //@line 13513
 $18 = _equeue_alloc($12, 20) | 0; //@line 13514
 if ($18 | 0) {
  $20 = HEAP32[$15 >> 2] | 0; //@line 13517
  if (!$20) {
   HEAP32[$18 + 12 >> 2] = 0; //@line 13521
   HEAP16[$18 + 16 >> 1] = HEAP16[$16 >> 1] | 0; //@line 13524
   _equeue_event_dtor($18, 203); //@line 13525
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 13526
   $35 = _equeue_post($12, 204, $18) | 0; //@line 13527
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 205; //@line 13530
    $36 = $ReallocAsyncCtx6 + 4 | 0; //@line 13531
    HEAP32[$36 >> 2] = $15; //@line 13532
    $37 = $ReallocAsyncCtx6 + 8 | 0; //@line 13533
    HEAP32[$37 >> 2] = $6; //@line 13534
    $38 = $ReallocAsyncCtx6 + 12 | 0; //@line 13535
    HEAP32[$38 >> 2] = $2; //@line 13536
    $39 = $ReallocAsyncCtx6 + 16 | 0; //@line 13537
    HEAP32[$39 >> 2] = $4; //@line 13538
    sp = STACKTOP; //@line 13539
    return;
   }
   HEAP32[___async_retval >> 2] = $35; //@line 13543
   ___async_unwind = 0; //@line 13544
   HEAP32[$ReallocAsyncCtx6 >> 2] = 205; //@line 13545
   $36 = $ReallocAsyncCtx6 + 4 | 0; //@line 13546
   HEAP32[$36 >> 2] = $15; //@line 13547
   $37 = $ReallocAsyncCtx6 + 8 | 0; //@line 13548
   HEAP32[$37 >> 2] = $6; //@line 13549
   $38 = $ReallocAsyncCtx6 + 12 | 0; //@line 13550
   HEAP32[$38 >> 2] = $2; //@line 13551
   $39 = $ReallocAsyncCtx6 + 16 | 0; //@line 13552
   HEAP32[$39 >> 2] = $4; //@line 13553
   sp = STACKTOP; //@line 13554
   return;
  } else {
   $23 = HEAP32[$20 + 4 >> 2] | 0; //@line 13558
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 13559
   FUNCTION_TABLE_vii[$23 & 31]($18, $2); //@line 13560
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 202; //@line 13563
    $24 = $ReallocAsyncCtx3 + 4 | 0; //@line 13564
    HEAP32[$24 >> 2] = $15; //@line 13565
    $25 = $ReallocAsyncCtx3 + 8 | 0; //@line 13566
    HEAP32[$25 >> 2] = $18; //@line 13567
    $26 = $ReallocAsyncCtx3 + 12 | 0; //@line 13568
    HEAP32[$26 >> 2] = $16; //@line 13569
    $27 = $ReallocAsyncCtx3 + 16 | 0; //@line 13570
    HEAP32[$27 >> 2] = $12; //@line 13571
    $28 = $ReallocAsyncCtx3 + 20 | 0; //@line 13572
    HEAP32[$28 >> 2] = $15; //@line 13573
    $29 = $ReallocAsyncCtx3 + 24 | 0; //@line 13574
    HEAP32[$29 >> 2] = $6; //@line 13575
    $30 = $ReallocAsyncCtx3 + 28 | 0; //@line 13576
    HEAP32[$30 >> 2] = $2; //@line 13577
    $31 = $ReallocAsyncCtx3 + 32 | 0; //@line 13578
    HEAP32[$31 >> 2] = $4; //@line 13579
    sp = STACKTOP; //@line 13580
    return;
   }
   ___async_unwind = 0; //@line 13583
   HEAP32[$ReallocAsyncCtx3 >> 2] = 202; //@line 13584
   $24 = $ReallocAsyncCtx3 + 4 | 0; //@line 13585
   HEAP32[$24 >> 2] = $15; //@line 13586
   $25 = $ReallocAsyncCtx3 + 8 | 0; //@line 13587
   HEAP32[$25 >> 2] = $18; //@line 13588
   $26 = $ReallocAsyncCtx3 + 12 | 0; //@line 13589
   HEAP32[$26 >> 2] = $16; //@line 13590
   $27 = $ReallocAsyncCtx3 + 16 | 0; //@line 13591
   HEAP32[$27 >> 2] = $12; //@line 13592
   $28 = $ReallocAsyncCtx3 + 20 | 0; //@line 13593
   HEAP32[$28 >> 2] = $15; //@line 13594
   $29 = $ReallocAsyncCtx3 + 24 | 0; //@line 13595
   HEAP32[$29 >> 2] = $6; //@line 13596
   $30 = $ReallocAsyncCtx3 + 28 | 0; //@line 13597
   HEAP32[$30 >> 2] = $2; //@line 13598
   $31 = $ReallocAsyncCtx3 + 32 | 0; //@line 13599
   HEAP32[$31 >> 2] = $4; //@line 13600
   sp = STACKTOP; //@line 13601
   return;
  }
 }
 $41 = HEAP32[$15 >> 2] | 0; //@line 13605
 if ($41 | 0) {
  $44 = HEAP32[$41 + 8 >> 2] | 0; //@line 13609
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 13610
  FUNCTION_TABLE_vi[$44 & 1023]($2); //@line 13611
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 206; //@line 13614
   $45 = $ReallocAsyncCtx4 + 4 | 0; //@line 13615
   HEAP32[$45 >> 2] = $6; //@line 13616
   $46 = $ReallocAsyncCtx4 + 8 | 0; //@line 13617
   HEAP32[$46 >> 2] = 0; //@line 13618
   $47 = $ReallocAsyncCtx4 + 12 | 0; //@line 13619
   HEAP32[$47 >> 2] = $4; //@line 13620
   sp = STACKTOP; //@line 13621
   return;
  }
  ___async_unwind = 0; //@line 13624
  HEAP32[$ReallocAsyncCtx4 >> 2] = 206; //@line 13625
  $45 = $ReallocAsyncCtx4 + 4 | 0; //@line 13626
  HEAP32[$45 >> 2] = $6; //@line 13627
  $46 = $ReallocAsyncCtx4 + 8 | 0; //@line 13628
  HEAP32[$46 >> 2] = 0; //@line 13629
  $47 = $ReallocAsyncCtx4 + 12 | 0; //@line 13630
  HEAP32[$47 >> 2] = $4; //@line 13631
  sp = STACKTOP; //@line 13632
  return;
 }
 $48 = HEAP32[$6 >> 2] | 0; //@line 13635
 if (!$48) {
  HEAP32[___async_retval >> 2] = 0; //@line 13639
  return;
 }
 $51 = HEAP32[$48 + 8 >> 2] | 0; //@line 13643
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 13644
 FUNCTION_TABLE_vi[$51 & 1023]($4); //@line 13645
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 207; //@line 13648
  $52 = $ReallocAsyncCtx5 + 4 | 0; //@line 13649
  HEAP32[$52 >> 2] = 0; //@line 13650
  sp = STACKTOP; //@line 13651
  return;
 }
 ___async_unwind = 0; //@line 13654
 HEAP32[$ReallocAsyncCtx5 >> 2] = 207; //@line 13655
 $52 = $ReallocAsyncCtx5 + 4 | 0; //@line 13656
 HEAP32[$52 >> 2] = 0; //@line 13657
 sp = STACKTOP; //@line 13658
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0$i = 0, $$pre$i = 0, $11 = 0, $18 = 0, $21 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $35 = 0, $38 = 0, $4 = 0, $45 = 0, $49 = 0, $5 = 0, $52 = 0, $57 = 0, $6 = 0, $60 = 0, $64 = 0, $67 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 6027
 STACKTOP = STACKTOP + 48 | 0; //@line 6028
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 6028
 $4 = sp + 16 | 0; //@line 6029
 $5 = sp; //@line 6030
 $6 = $1 + 12 | 0; //@line 6031
 $7 = HEAP32[$6 >> 2] | 0; //@line 6032
 do {
  if (!$7) {
   $9 = $5 + 12 | 0; //@line 6036
   HEAP32[$9 >> 2] = 0; //@line 6037
   $30 = 0; //@line 6038
   $45 = $9; //@line 6038
  } else {
   $11 = HEAP32[$7 + 4 >> 2] | 0; //@line 6041
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 6042
   FUNCTION_TABLE_vii[$11 & 31]($5, $1); //@line 6043
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 200; //@line 6046
    HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 6048
    HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 6050
    HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 6052
    HEAP8[$AsyncCtx + 16 >> 0] = $2; //@line 6054
    HEAP8[$AsyncCtx + 17 >> 0] = $3; //@line 6056
    HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 6058
    sp = STACKTOP; //@line 6059
    STACKTOP = sp; //@line 6060
    return 0; //@line 6060
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 6062
   $$pre$i = HEAP32[$6 >> 2] | 0; //@line 6063
   $18 = $5 + 12 | 0; //@line 6064
   HEAP32[$18 >> 2] = $$pre$i; //@line 6065
   if (!$$pre$i) {
    $30 = 0; //@line 6068
    $45 = $18; //@line 6068
   } else {
    $21 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 6072
    $AsyncCtx2 = _emscripten_alloc_async_context(28, sp) | 0; //@line 6073
    FUNCTION_TABLE_vii[$21 & 31]($4, $5); //@line 6074
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 201; //@line 6077
     HEAP32[$AsyncCtx2 + 4 >> 2] = $4; //@line 6079
     HEAP32[$AsyncCtx2 + 8 >> 2] = $5; //@line 6081
     HEAP32[$AsyncCtx2 + 12 >> 2] = $18; //@line 6083
     HEAP8[$AsyncCtx2 + 16 >> 0] = $2; //@line 6085
     HEAP8[$AsyncCtx2 + 17 >> 0] = $3; //@line 6087
     HEAP32[$AsyncCtx2 + 20 >> 2] = $0; //@line 6089
     HEAP32[$AsyncCtx2 + 24 >> 2] = $18; //@line 6091
     sp = STACKTOP; //@line 6092
     STACKTOP = sp; //@line 6093
     return 0; //@line 6093
    } else {
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6095
     $30 = HEAP32[$18 >> 2] | 0; //@line 6097
     $45 = $18; //@line 6097
     break;
    }
   }
  }
 } while (0);
 $29 = $4 + 12 | 0; //@line 6103
 HEAP32[$29 >> 2] = $30; //@line 6104
 $31 = $4 + 16 | 0; //@line 6105
 HEAP8[$31 >> 0] = $2; //@line 6106
 HEAP8[$4 + 17 >> 0] = $3; //@line 6108
 $33 = _equeue_alloc($0, 20) | 0; //@line 6109
 do {
  if (!$33) {
   $$0$i = 0; //@line 6113
  } else {
   $35 = HEAP32[$29 >> 2] | 0; //@line 6115
   do {
    if (!$35) {
     $49 = 0; //@line 6119
    } else {
     $38 = HEAP32[$35 + 4 >> 2] | 0; //@line 6122
     $AsyncCtx5 = _emscripten_alloc_async_context(36, sp) | 0; //@line 6123
     FUNCTION_TABLE_vii[$38 & 31]($33, $4); //@line 6124
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 202; //@line 6127
      HEAP32[$AsyncCtx5 + 4 >> 2] = $29; //@line 6129
      HEAP32[$AsyncCtx5 + 8 >> 2] = $33; //@line 6131
      HEAP32[$AsyncCtx5 + 12 >> 2] = $31; //@line 6133
      HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 6135
      HEAP32[$AsyncCtx5 + 20 >> 2] = $29; //@line 6137
      HEAP32[$AsyncCtx5 + 24 >> 2] = $45; //@line 6139
      HEAP32[$AsyncCtx5 + 28 >> 2] = $4; //@line 6141
      HEAP32[$AsyncCtx5 + 32 >> 2] = $5; //@line 6143
      sp = STACKTOP; //@line 6144
      STACKTOP = sp; //@line 6145
      return 0; //@line 6145
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 6147
      $49 = HEAP32[$29 >> 2] | 0; //@line 6149
      break;
     }
    }
   } while (0);
   HEAP32[$33 + 12 >> 2] = $49; //@line 6155
   HEAP16[$33 + 16 >> 1] = HEAP16[$31 >> 1] | 0; //@line 6158
   _equeue_event_dtor($33, 203); //@line 6159
   $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 6160
   $52 = _equeue_post($0, 204, $33) | 0; //@line 6161
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 205; //@line 6164
    HEAP32[$AsyncCtx15 + 4 >> 2] = $29; //@line 6166
    HEAP32[$AsyncCtx15 + 8 >> 2] = $45; //@line 6168
    HEAP32[$AsyncCtx15 + 12 >> 2] = $4; //@line 6170
    HEAP32[$AsyncCtx15 + 16 >> 2] = $5; //@line 6172
    sp = STACKTOP; //@line 6173
    STACKTOP = sp; //@line 6174
    return 0; //@line 6174
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 6176
    $$0$i = $52; //@line 6177
    break;
   }
  }
 } while (0);
 $57 = HEAP32[$29 >> 2] | 0; //@line 6182
 do {
  if ($57 | 0) {
   $60 = HEAP32[$57 + 8 >> 2] | 0; //@line 6187
   $AsyncCtx8 = _emscripten_alloc_async_context(16, sp) | 0; //@line 6188
   FUNCTION_TABLE_vi[$60 & 1023]($4); //@line 6189
   if (___async) {
    HEAP32[$AsyncCtx8 >> 2] = 206; //@line 6192
    HEAP32[$AsyncCtx8 + 4 >> 2] = $45; //@line 6194
    HEAP32[$AsyncCtx8 + 8 >> 2] = $$0$i; //@line 6196
    HEAP32[$AsyncCtx8 + 12 >> 2] = $5; //@line 6198
    sp = STACKTOP; //@line 6199
    STACKTOP = sp; //@line 6200
    return 0; //@line 6200
   } else {
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 6202
    break;
   }
  }
 } while (0);
 $64 = HEAP32[$45 >> 2] | 0; //@line 6207
 if (!$64) {
  STACKTOP = sp; //@line 6210
  return $$0$i | 0; //@line 6210
 }
 $67 = HEAP32[$64 + 8 >> 2] | 0; //@line 6213
 $AsyncCtx12 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6214
 FUNCTION_TABLE_vi[$67 & 1023]($5); //@line 6215
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 207; //@line 6218
  HEAP32[$AsyncCtx12 + 4 >> 2] = $$0$i; //@line 6220
  sp = STACKTOP; //@line 6221
  STACKTOP = sp; //@line 6222
  return 0; //@line 6222
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 6224
 STACKTOP = sp; //@line 6225
 return $$0$i | 0; //@line 6225
}
function __ZN10LoRaMacMib11get_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$sroa$5 = 0, $$sroa$5$0$$sroa_raw_idx = 0, $34 = 0, $39 = 0, $40 = 0, $45 = 0, sp = 0;
 sp = STACKTOP; //@line 19744
 STACKTOP = STACKTOP + 16 | 0; //@line 19745
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 19745
 $$sroa$5 = sp; //@line 19746
 L1 : do {
  if (!$1) {
   $$0 = -1003; //@line 19750
  } else {
   do {
    switch (HEAP32[$1 >> 2] | 0) {
    case 0:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 >> 2]; //@line 19758
      $$0 = 0; //@line 19759
      break L1;
      break;
     }
    case 1:
     {
      HEAP8[$1 + 4 >> 0] = HEAP8[$2 + 12 >> 0] | 0; //@line 19767
      $$0 = 0; //@line 19768
      break L1;
      break;
     }
    case 2:
     {
      HEAP8[$1 + 4 >> 0] = HEAP8[$2 + 796 >> 0] | 0; //@line 19776
      $$0 = 0; //@line 19777
      break L1;
      break;
     }
    case 3:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 588 >> 2]; //@line 19785
      $$0 = 0; //@line 19786
      break L1;
      break;
     }
    case 4:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 592 >> 2]; //@line 19794
      $$0 = 0; //@line 19795
      break L1;
      break;
     }
    case 5:
     {
      HEAP32[$1 + 4 >> 2] = $2 + 552; //@line 19802
      $$0 = 0; //@line 19803
      break L1;
      break;
     }
    case 6:
     {
      HEAP32[$1 + 4 >> 2] = $2 + 568; //@line 19810
      $$0 = 0; //@line 19811
      break L1;
      break;
     }
    case 7:
     {
      HEAP8[$1 + 4 >> 0] = HEAP8[$2 + 8 >> 0] | 0; //@line 19819
      $$0 = 0; //@line 19820
      break L1;
      break;
     }
    case 8:
     {
      HEAP8[$1 + 4 >> 0] = HEAP8[$2 + 9 >> 0] | 0; //@line 19828
      $$0 = 0; //@line 19829
      break L1;
      break;
     }
    case 9:
     {
      HEAP32[$1 + 4 >> 2] = __ZN7LoRaPHY16get_phy_channelsEv(HEAP32[$0 >> 2] | 0) | 0; //@line 19837
      $$0 = 0; //@line 19838
      break L1;
      break;
     }
    case 10:
     {
      $34 = $2 + 772 | 0; //@line 19845
      $39 = HEAP32[$34 + 4 >> 2] | 0; //@line 19850
      $40 = $1 + 4 | 0; //@line 19851
      HEAP32[$40 >> 2] = HEAP32[$34 >> 2]; //@line 19853
      HEAP32[$40 + 4 >> 2] = $39; //@line 19856
      $$0 = 0; //@line 19857
      break L1;
      break;
     }
    case 11:
     {
      $45 = __ZN7LoRaPHY24get_default_rx2_datarateEv(HEAP32[$0 >> 2] | 0) | 0; //@line 19863
      HEAP32[$1 + 4 >> 2] = __ZN7LoRaPHY25get_default_rx2_frequencyEv(HEAP32[$0 >> 2] | 0) | 0; //@line 19867
      HEAP8[$1 + 8 >> 0] = $45; //@line 19869
      $$sroa$5$0$$sroa_raw_idx = $1 + 9 | 0; //@line 19870
      HEAP8[$$sroa$5$0$$sroa_raw_idx >> 0] = HEAP8[$$sroa$5 >> 0] | 0; //@line 19871
      HEAP8[$$sroa$5$0$$sroa_raw_idx + 1 >> 0] = HEAP8[$$sroa$5 + 1 >> 0] | 0; //@line 19871
      HEAP8[$$sroa$5$0$$sroa_raw_idx + 2 >> 0] = HEAP8[$$sroa$5 + 2 >> 0] | 0; //@line 19871
      $$0 = 0; //@line 19872
      break L1;
      break;
     }
    case 13:
     {
      HEAP32[$1 + 4 >> 2] = __ZN7LoRaPHY16get_channel_maskEb(HEAP32[$0 >> 2] | 0, 1) | 0; //@line 19880
      $$0 = 0; //@line 19881
      break L1;
      break;
     }
    case 12:
     {
      HEAP32[$1 + 4 >> 2] = __ZN7LoRaPHY16get_channel_maskEb(HEAP32[$0 >> 2] | 0, 0) | 0; //@line 19889
      $$0 = 0; //@line 19890
      break L1;
      break;
     }
    case 14:
     {
      HEAP8[$1 + 4 >> 0] = HEAP8[$2 + 768 >> 0] | 0; //@line 19898
      $$0 = 0; //@line 19899
      break L1;
      break;
     }
    case 15:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 748 >> 2]; //@line 19907
      $$0 = 0; //@line 19908
      break L1;
      break;
     }
    case 16:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 752 >> 2]; //@line 19916
      $$0 = 0; //@line 19917
      break L1;
      break;
     }
    case 17:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 756 >> 2]; //@line 19925
      $$0 = 0; //@line 19926
      break L1;
      break;
     }
    case 18:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 760 >> 2]; //@line 19934
      $$0 = 0; //@line 19935
      break L1;
      break;
     }
    case 19:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 764 >> 2]; //@line 19943
      $$0 = 0; //@line 19944
      break L1;
      break;
     }
    case 20:
     {
      HEAP8[$1 + 4 >> 0] = __ZN7LoRaPHY23get_default_tx_datarateEv(HEAP32[$0 >> 2] | 0) | 0; //@line 19952
      $$0 = 0; //@line 19953
      break L1;
      break;
     }
    case 21:
     {
      HEAP8[$1 + 4 >> 0] = HEAP8[$2 + 737 >> 0] | 0; //@line 19961
      $$0 = 0; //@line 19962
      break L1;
      break;
     }
    case 23:
     {
      HEAP8[$1 + 4 >> 0] = __ZN7LoRaPHY20get_default_tx_powerEv(HEAP32[$0 >> 2] | 0) | 0; //@line 19970
      $$0 = 0; //@line 19971
      break L1;
      break;
     }
    case 22:
     {
      HEAP8[$1 + 4 >> 0] = HEAP8[$2 + 736 >> 0] | 0; //@line 19979
      $$0 = 0; //@line 19980
      break L1;
      break;
     }
    case 24:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 596 >> 2]; //@line 19988
      $$0 = 0; //@line 19989
      break L1;
      break;
     }
    case 25:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 600 >> 2]; //@line 19997
      $$0 = 0; //@line 19998
      break L1;
      break;
     }
    case 26:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 848 >> 2]; //@line 20006
      $$0 = 0; //@line 20007
      break L1;
      break;
     }
    case 27:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 740 >> 2]; //@line 20015
      $$0 = 0; //@line 20016
      break L1;
      break;
     }
    case 28:
     {
      HEAP8[$1 + 4 >> 0] = HEAP8[$2 + 744 >> 0] | 0; //@line 20024
      $$0 = 0; //@line 20025
      break L1;
      break;
     }
    case 29:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 788 >> 2]; //@line 20033
      $$0 = 0; //@line 20034
      break L1;
      break;
     }
    default:
     {
      $$0 = -1002; //@line 20039
      break L1;
     }
    }
   } while (0);
  }
 } while (0);
 STACKTOP = sp; //@line 20046
 return $$0 | 0; //@line 20046
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_365($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $48 = 0, $49 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 15173
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15175
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15177
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15179
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15181
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15183
 $13 = $2 + 12 | 0; //@line 15187
 HEAP32[$13 >> 2] = HEAP32[HEAP32[$0 + 24 >> 2] >> 2]; //@line 15188
 $14 = $2 + 16 | 0; //@line 15189
 HEAP32[$14 >> 2] = $8; //@line 15190
 $15 = _equeue_alloc($10, 20) | 0; //@line 15191
 if ($15 | 0) {
  $17 = HEAP32[$13 >> 2] | 0; //@line 15194
  if (!$17) {
   HEAP32[$15 + 12 >> 2] = 0; //@line 15198
   HEAP32[$15 + 16 >> 2] = HEAP32[$14 >> 2]; //@line 15201
   _equeue_event_dtor($15, 195); //@line 15202
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 15203
   $32 = _equeue_post($10, 196, $15) | 0; //@line 15204
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 197; //@line 15207
    $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 15208
    HEAP32[$33 >> 2] = $13; //@line 15209
    $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 15210
    HEAP32[$34 >> 2] = $6; //@line 15211
    $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 15212
    HEAP32[$35 >> 2] = $2; //@line 15213
    $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 15214
    HEAP32[$36 >> 2] = $4; //@line 15215
    sp = STACKTOP; //@line 15216
    return;
   }
   HEAP32[___async_retval >> 2] = $32; //@line 15220
   ___async_unwind = 0; //@line 15221
   HEAP32[$ReallocAsyncCtx6 >> 2] = 197; //@line 15222
   $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 15223
   HEAP32[$33 >> 2] = $13; //@line 15224
   $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 15225
   HEAP32[$34 >> 2] = $6; //@line 15226
   $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 15227
   HEAP32[$35 >> 2] = $2; //@line 15228
   $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 15229
   HEAP32[$36 >> 2] = $4; //@line 15230
   sp = STACKTOP; //@line 15231
   return;
  } else {
   $20 = HEAP32[$17 + 4 >> 2] | 0; //@line 15235
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 15236
   FUNCTION_TABLE_vii[$20 & 31]($15, $2); //@line 15237
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 194; //@line 15240
    $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 15241
    HEAP32[$21 >> 2] = $13; //@line 15242
    $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 15243
    HEAP32[$22 >> 2] = $15; //@line 15244
    $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 15245
    HEAP32[$23 >> 2] = $14; //@line 15246
    $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 15247
    HEAP32[$24 >> 2] = $10; //@line 15248
    $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 15249
    HEAP32[$25 >> 2] = $13; //@line 15250
    $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 15251
    HEAP32[$26 >> 2] = $6; //@line 15252
    $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 15253
    HEAP32[$27 >> 2] = $2; //@line 15254
    $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 15255
    HEAP32[$28 >> 2] = $4; //@line 15256
    sp = STACKTOP; //@line 15257
    return;
   }
   ___async_unwind = 0; //@line 15260
   HEAP32[$ReallocAsyncCtx3 >> 2] = 194; //@line 15261
   $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 15262
   HEAP32[$21 >> 2] = $13; //@line 15263
   $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 15264
   HEAP32[$22 >> 2] = $15; //@line 15265
   $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 15266
   HEAP32[$23 >> 2] = $14; //@line 15267
   $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 15268
   HEAP32[$24 >> 2] = $10; //@line 15269
   $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 15270
   HEAP32[$25 >> 2] = $13; //@line 15271
   $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 15272
   HEAP32[$26 >> 2] = $6; //@line 15273
   $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 15274
   HEAP32[$27 >> 2] = $2; //@line 15275
   $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 15276
   HEAP32[$28 >> 2] = $4; //@line 15277
   sp = STACKTOP; //@line 15278
   return;
  }
 }
 $38 = HEAP32[$13 >> 2] | 0; //@line 15282
 if ($38 | 0) {
  $41 = HEAP32[$38 + 8 >> 2] | 0; //@line 15286
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 15287
  FUNCTION_TABLE_vi[$41 & 1023]($2); //@line 15288
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 198; //@line 15291
   $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 15292
   HEAP32[$42 >> 2] = $6; //@line 15293
   $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 15294
   HEAP32[$43 >> 2] = 0; //@line 15295
   $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 15296
   HEAP32[$44 >> 2] = $4; //@line 15297
   sp = STACKTOP; //@line 15298
   return;
  }
  ___async_unwind = 0; //@line 15301
  HEAP32[$ReallocAsyncCtx4 >> 2] = 198; //@line 15302
  $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 15303
  HEAP32[$42 >> 2] = $6; //@line 15304
  $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 15305
  HEAP32[$43 >> 2] = 0; //@line 15306
  $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 15307
  HEAP32[$44 >> 2] = $4; //@line 15308
  sp = STACKTOP; //@line 15309
  return;
 }
 $45 = HEAP32[$6 >> 2] | 0; //@line 15312
 if (!$45) {
  HEAP32[___async_retval >> 2] = 0; //@line 15316
  return;
 }
 $48 = HEAP32[$45 + 8 >> 2] | 0; //@line 15320
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 15321
 FUNCTION_TABLE_vi[$48 & 1023]($4); //@line 15322
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 199; //@line 15325
  $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 15326
  HEAP32[$49 >> 2] = 0; //@line 15327
  sp = STACKTOP; //@line 15328
  return;
 }
 ___async_unwind = 0; //@line 15331
 HEAP32[$ReallocAsyncCtx5 >> 2] = 199; //@line 15332
 $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 15333
 HEAP32[$49 >> 2] = 0; //@line 15334
 sp = STACKTOP; //@line 15335
 return;
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_199($0) {
 $0 = $0 | 0;
 var $$pre121 = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $44 = 0, $45 = 0, $46 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 1874
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1876
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1878
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1880
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1882
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 1884
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 1886
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 1888
 $$pre121 = HEAP32[$10 >> 2] | 0; //@line 1889
 if ($$pre121 | 0) {
  $17 = HEAP32[$$pre121 + 4 >> 2] | 0; //@line 1893
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(28) | 0; //@line 1894
  FUNCTION_TABLE_vii[$17 & 31]($8, $4); //@line 1895
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 476; //@line 1898
   $18 = $ReallocAsyncCtx11 + 4 | 0; //@line 1899
   HEAP32[$18 >> 2] = $2; //@line 1900
   $19 = $ReallocAsyncCtx11 + 8 | 0; //@line 1901
   HEAP32[$19 >> 2] = $4; //@line 1902
   $20 = $ReallocAsyncCtx11 + 12 | 0; //@line 1903
   HEAP32[$20 >> 2] = $10; //@line 1904
   $21 = $ReallocAsyncCtx11 + 16 | 0; //@line 1905
   HEAP32[$21 >> 2] = $6; //@line 1906
   $22 = $ReallocAsyncCtx11 + 20 | 0; //@line 1907
   HEAP32[$22 >> 2] = $12; //@line 1908
   $23 = $ReallocAsyncCtx11 + 24 | 0; //@line 1909
   HEAP32[$23 >> 2] = $14; //@line 1910
   sp = STACKTOP; //@line 1911
   return;
  }
  ___async_unwind = 0; //@line 1914
  HEAP32[$ReallocAsyncCtx11 >> 2] = 476; //@line 1915
  $18 = $ReallocAsyncCtx11 + 4 | 0; //@line 1916
  HEAP32[$18 >> 2] = $2; //@line 1917
  $19 = $ReallocAsyncCtx11 + 8 | 0; //@line 1918
  HEAP32[$19 >> 2] = $4; //@line 1919
  $20 = $ReallocAsyncCtx11 + 12 | 0; //@line 1920
  HEAP32[$20 >> 2] = $10; //@line 1921
  $21 = $ReallocAsyncCtx11 + 16 | 0; //@line 1922
  HEAP32[$21 >> 2] = $6; //@line 1923
  $22 = $ReallocAsyncCtx11 + 20 | 0; //@line 1924
  HEAP32[$22 >> 2] = $12; //@line 1925
  $23 = $ReallocAsyncCtx11 + 24 | 0; //@line 1926
  HEAP32[$23 >> 2] = $14; //@line 1927
  sp = STACKTOP; //@line 1928
  return;
 }
 HEAP32[$6 >> 2] = 0; //@line 1931
 $24 = $12 + 12 | 0; //@line 1932
 HEAP32[$12 >> 2] = 478; //@line 1933
 HEAP32[$12 + 4 >> 2] = 0; //@line 1935
 HEAP32[$12 + 8 >> 2] = $14; //@line 1937
 HEAP32[$24 >> 2] = 836; //@line 1938
 $25 = $14 + 1260 | 0; //@line 1939
 if (($25 | 0) == ($12 | 0)) {
  $44 = HEAP32[211] | 0; //@line 1943
  $ReallocAsyncCtx15 = _emscripten_realloc_async_context(12) | 0; //@line 1944
  FUNCTION_TABLE_vi[$44 & 1023]($12); //@line 1945
  if (___async) {
   HEAP32[$ReallocAsyncCtx15 >> 2] = 481; //@line 1948
   $45 = $ReallocAsyncCtx15 + 4 | 0; //@line 1949
   HEAP32[$45 >> 2] = $12; //@line 1950
   $46 = $ReallocAsyncCtx15 + 8 | 0; //@line 1951
   HEAP32[$46 >> 2] = $2; //@line 1952
   sp = STACKTOP; //@line 1953
   return;
  }
  ___async_unwind = 0; //@line 1956
  HEAP32[$ReallocAsyncCtx15 >> 2] = 481; //@line 1957
  $45 = $ReallocAsyncCtx15 + 4 | 0; //@line 1958
  HEAP32[$45 >> 2] = $12; //@line 1959
  $46 = $ReallocAsyncCtx15 + 8 | 0; //@line 1960
  HEAP32[$46 >> 2] = $2; //@line 1961
  sp = STACKTOP; //@line 1962
  return;
 }
 $27 = $14 + 1272 | 0; //@line 1965
 $28 = HEAP32[$27 >> 2] | 0; //@line 1966
 if (!$28) {
  $38 = HEAP32[210] | 0; //@line 1970
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(20) | 0; //@line 1971
  FUNCTION_TABLE_vii[$38 & 31]($25, $12); //@line 1972
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 480; //@line 1975
   $39 = $ReallocAsyncCtx14 + 4 | 0; //@line 1976
   HEAP32[$39 >> 2] = $24; //@line 1977
   $40 = $ReallocAsyncCtx14 + 8 | 0; //@line 1978
   HEAP32[$40 >> 2] = $27; //@line 1979
   $41 = $ReallocAsyncCtx14 + 12 | 0; //@line 1980
   HEAP32[$41 >> 2] = $12; //@line 1981
   $42 = $ReallocAsyncCtx14 + 16 | 0; //@line 1982
   HEAP32[$42 >> 2] = $2; //@line 1983
   sp = STACKTOP; //@line 1984
   return;
  }
  ___async_unwind = 0; //@line 1987
  HEAP32[$ReallocAsyncCtx14 >> 2] = 480; //@line 1988
  $39 = $ReallocAsyncCtx14 + 4 | 0; //@line 1989
  HEAP32[$39 >> 2] = $24; //@line 1990
  $40 = $ReallocAsyncCtx14 + 8 | 0; //@line 1991
  HEAP32[$40 >> 2] = $27; //@line 1992
  $41 = $ReallocAsyncCtx14 + 12 | 0; //@line 1993
  HEAP32[$41 >> 2] = $12; //@line 1994
  $42 = $ReallocAsyncCtx14 + 16 | 0; //@line 1995
  HEAP32[$42 >> 2] = $2; //@line 1996
  sp = STACKTOP; //@line 1997
  return;
 } else {
  $31 = HEAP32[$28 + 8 >> 2] | 0; //@line 2001
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(24) | 0; //@line 2002
  FUNCTION_TABLE_vi[$31 & 1023]($25); //@line 2003
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 479; //@line 2006
   $32 = $ReallocAsyncCtx13 + 4 | 0; //@line 2007
   HEAP32[$32 >> 2] = $24; //@line 2008
   $33 = $ReallocAsyncCtx13 + 8 | 0; //@line 2009
   HEAP32[$33 >> 2] = $27; //@line 2010
   $34 = $ReallocAsyncCtx13 + 12 | 0; //@line 2011
   HEAP32[$34 >> 2] = $25; //@line 2012
   $35 = $ReallocAsyncCtx13 + 16 | 0; //@line 2013
   HEAP32[$35 >> 2] = $12; //@line 2014
   $36 = $ReallocAsyncCtx13 + 20 | 0; //@line 2015
   HEAP32[$36 >> 2] = $2; //@line 2016
   sp = STACKTOP; //@line 2017
   return;
  }
  ___async_unwind = 0; //@line 2020
  HEAP32[$ReallocAsyncCtx13 >> 2] = 479; //@line 2021
  $32 = $ReallocAsyncCtx13 + 4 | 0; //@line 2022
  HEAP32[$32 >> 2] = $24; //@line 2023
  $33 = $ReallocAsyncCtx13 + 8 | 0; //@line 2024
  HEAP32[$33 >> 2] = $27; //@line 2025
  $34 = $ReallocAsyncCtx13 + 12 | 0; //@line 2026
  HEAP32[$34 >> 2] = $25; //@line 2027
  $35 = $ReallocAsyncCtx13 + 16 | 0; //@line 2028
  HEAP32[$35 >> 2] = $12; //@line 2029
  $36 = $ReallocAsyncCtx13 + 20 | 0; //@line 2030
  HEAP32[$36 >> 2] = $2; //@line 2031
  sp = STACKTOP; //@line 2032
  return;
 }
}
function __ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_228($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $15 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $38 = 0, $39 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 3731
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3733
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3737
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 16 >> 2] >> 2]; //@line 3741
 $9 = $2 + 16 | 0; //@line 3742
 $10 = $2 + 28 | 0; //@line 3743
 $11 = HEAP32[$10 >> 2] | 0; //@line 3744
 if ($11 | 0) {
  $13 = $6 + 1896 | 0; //@line 3747
  if (($13 | 0) != ($9 | 0)) {
   $15 = $6 + 1908 | 0; //@line 3750
   $16 = HEAP32[$15 >> 2] | 0; //@line 3751
   if (!$16) {
    $27 = HEAP32[$11 + 4 >> 2] | 0; //@line 3755
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 3756
    FUNCTION_TABLE_vii[$27 & 31]($13, $9); //@line 3757
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 232; //@line 3760
     $28 = $ReallocAsyncCtx4 + 4 | 0; //@line 3761
     HEAP32[$28 >> 2] = $10; //@line 3762
     $29 = $ReallocAsyncCtx4 + 8 | 0; //@line 3763
     HEAP32[$29 >> 2] = $15; //@line 3764
     $30 = $ReallocAsyncCtx4 + 12 | 0; //@line 3765
     HEAP32[$30 >> 2] = $2; //@line 3766
     $31 = $ReallocAsyncCtx4 + 16 | 0; //@line 3767
     HEAP32[$31 >> 2] = $6; //@line 3768
     sp = STACKTOP; //@line 3769
     return;
    }
    ___async_unwind = 0; //@line 3772
    HEAP32[$ReallocAsyncCtx4 >> 2] = 232; //@line 3773
    $28 = $ReallocAsyncCtx4 + 4 | 0; //@line 3774
    HEAP32[$28 >> 2] = $10; //@line 3775
    $29 = $ReallocAsyncCtx4 + 8 | 0; //@line 3776
    HEAP32[$29 >> 2] = $15; //@line 3777
    $30 = $ReallocAsyncCtx4 + 12 | 0; //@line 3778
    HEAP32[$30 >> 2] = $2; //@line 3779
    $31 = $ReallocAsyncCtx4 + 16 | 0; //@line 3780
    HEAP32[$31 >> 2] = $6; //@line 3781
    sp = STACKTOP; //@line 3782
    return;
   } else {
    $19 = HEAP32[$16 + 8 >> 2] | 0; //@line 3786
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(28) | 0; //@line 3787
    FUNCTION_TABLE_vi[$19 & 1023]($13); //@line 3788
    if (___async) {
     HEAP32[$ReallocAsyncCtx3 >> 2] = 231; //@line 3791
     $20 = $ReallocAsyncCtx3 + 4 | 0; //@line 3792
     HEAP32[$20 >> 2] = $10; //@line 3793
     $21 = $ReallocAsyncCtx3 + 8 | 0; //@line 3794
     HEAP32[$21 >> 2] = $15; //@line 3795
     $22 = $ReallocAsyncCtx3 + 12 | 0; //@line 3796
     HEAP32[$22 >> 2] = $13; //@line 3797
     $23 = $ReallocAsyncCtx3 + 16 | 0; //@line 3798
     HEAP32[$23 >> 2] = $9; //@line 3799
     $24 = $ReallocAsyncCtx3 + 20 | 0; //@line 3800
     HEAP32[$24 >> 2] = $2; //@line 3801
     $25 = $ReallocAsyncCtx3 + 24 | 0; //@line 3802
     HEAP32[$25 >> 2] = $6; //@line 3803
     sp = STACKTOP; //@line 3804
     return;
    }
    ___async_unwind = 0; //@line 3807
    HEAP32[$ReallocAsyncCtx3 >> 2] = 231; //@line 3808
    $20 = $ReallocAsyncCtx3 + 4 | 0; //@line 3809
    HEAP32[$20 >> 2] = $10; //@line 3810
    $21 = $ReallocAsyncCtx3 + 8 | 0; //@line 3811
    HEAP32[$21 >> 2] = $15; //@line 3812
    $22 = $ReallocAsyncCtx3 + 12 | 0; //@line 3813
    HEAP32[$22 >> 2] = $13; //@line 3814
    $23 = $ReallocAsyncCtx3 + 16 | 0; //@line 3815
    HEAP32[$23 >> 2] = $9; //@line 3816
    $24 = $ReallocAsyncCtx3 + 20 | 0; //@line 3817
    HEAP32[$24 >> 2] = $2; //@line 3818
    $25 = $ReallocAsyncCtx3 + 24 | 0; //@line 3819
    HEAP32[$25 >> 2] = $6; //@line 3820
    sp = STACKTOP; //@line 3821
    return;
   }
  }
 }
 $32 = $2 + 32 | 0; //@line 3826
 $33 = $2 + 44 | 0; //@line 3827
 $34 = HEAP32[$33 >> 2] | 0; //@line 3828
 if (!$34) {
  return;
 }
 $36 = $6 + 1912 | 0; //@line 3833
 if (($36 | 0) == ($32 | 0)) {
  return;
 }
 $38 = $6 + 1924 | 0; //@line 3838
 $39 = HEAP32[$38 >> 2] | 0; //@line 3839
 if (!$39) {
  $48 = HEAP32[$34 + 4 >> 2] | 0; //@line 3843
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 3844
  FUNCTION_TABLE_vii[$48 & 31]($36, $32); //@line 3845
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 234; //@line 3848
   $49 = $ReallocAsyncCtx6 + 4 | 0; //@line 3849
   HEAP32[$49 >> 2] = $33; //@line 3850
   $50 = $ReallocAsyncCtx6 + 8 | 0; //@line 3851
   HEAP32[$50 >> 2] = $38; //@line 3852
   sp = STACKTOP; //@line 3853
   return;
  }
  ___async_unwind = 0; //@line 3856
  HEAP32[$ReallocAsyncCtx6 >> 2] = 234; //@line 3857
  $49 = $ReallocAsyncCtx6 + 4 | 0; //@line 3858
  HEAP32[$49 >> 2] = $33; //@line 3859
  $50 = $ReallocAsyncCtx6 + 8 | 0; //@line 3860
  HEAP32[$50 >> 2] = $38; //@line 3861
  sp = STACKTOP; //@line 3862
  return;
 } else {
  $42 = HEAP32[$39 + 8 >> 2] | 0; //@line 3866
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 3867
  FUNCTION_TABLE_vi[$42 & 1023]($36); //@line 3868
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 233; //@line 3871
   $43 = $ReallocAsyncCtx5 + 4 | 0; //@line 3872
   HEAP32[$43 >> 2] = $33; //@line 3873
   $44 = $ReallocAsyncCtx5 + 8 | 0; //@line 3874
   HEAP32[$44 >> 2] = $38; //@line 3875
   $45 = $ReallocAsyncCtx5 + 12 | 0; //@line 3876
   HEAP32[$45 >> 2] = $36; //@line 3877
   $46 = $ReallocAsyncCtx5 + 16 | 0; //@line 3878
   HEAP32[$46 >> 2] = $32; //@line 3879
   sp = STACKTOP; //@line 3880
   return;
  }
  ___async_unwind = 0; //@line 3883
  HEAP32[$ReallocAsyncCtx5 >> 2] = 233; //@line 3884
  $43 = $ReallocAsyncCtx5 + 4 | 0; //@line 3885
  HEAP32[$43 >> 2] = $33; //@line 3886
  $44 = $ReallocAsyncCtx5 + 8 | 0; //@line 3887
  HEAP32[$44 >> 2] = $38; //@line 3888
  $45 = $ReallocAsyncCtx5 + 12 | 0; //@line 3889
  HEAP32[$45 >> 2] = $36; //@line 3890
  $46 = $ReallocAsyncCtx5 + 16 | 0; //@line 3891
  HEAP32[$46 >> 2] = $32; //@line 3892
  sp = STACKTOP; //@line 3893
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$pre$i = 0, $10 = 0, $16 = 0, $19 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $31 = 0, $34 = 0, $4 = 0, $41 = 0, $45 = 0, $48 = 0, $5 = 0, $53 = 0, $56 = 0, $6 = 0, $60 = 0, $63 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 5823
 STACKTOP = STACKTOP + 48 | 0; //@line 5824
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 5824
 $3 = sp + 16 | 0; //@line 5825
 $4 = sp; //@line 5826
 $5 = $1 + 12 | 0; //@line 5827
 $6 = HEAP32[$5 >> 2] | 0; //@line 5828
 do {
  if (!$6) {
   $8 = $4 + 12 | 0; //@line 5832
   HEAP32[$8 >> 2] = 0; //@line 5833
   $27 = 0; //@line 5834
   $41 = $8; //@line 5834
  } else {
   $10 = HEAP32[$6 + 4 >> 2] | 0; //@line 5837
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 5838
   FUNCTION_TABLE_vii[$10 & 31]($4, $1); //@line 5839
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 192; //@line 5842
    HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 5844
    HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 5846
    HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 5848
    HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 5850
    HEAP32[$AsyncCtx + 20 >> 2] = $5; //@line 5852
    sp = STACKTOP; //@line 5853
    STACKTOP = sp; //@line 5854
    return 0; //@line 5854
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 5856
   $$pre$i = HEAP32[$5 >> 2] | 0; //@line 5857
   $16 = $4 + 12 | 0; //@line 5858
   HEAP32[$16 >> 2] = $$pre$i; //@line 5859
   if (!$$pre$i) {
    $27 = 0; //@line 5862
    $41 = $16; //@line 5862
   } else {
    $19 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 5866
    $AsyncCtx2 = _emscripten_alloc_async_context(28, sp) | 0; //@line 5867
    FUNCTION_TABLE_vii[$19 & 31]($3, $4); //@line 5868
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 193; //@line 5871
     HEAP32[$AsyncCtx2 + 4 >> 2] = $3; //@line 5873
     HEAP32[$AsyncCtx2 + 8 >> 2] = $4; //@line 5875
     HEAP32[$AsyncCtx2 + 12 >> 2] = $16; //@line 5877
     HEAP32[$AsyncCtx2 + 16 >> 2] = $2; //@line 5879
     HEAP32[$AsyncCtx2 + 20 >> 2] = $0; //@line 5881
     HEAP32[$AsyncCtx2 + 24 >> 2] = $16; //@line 5883
     sp = STACKTOP; //@line 5884
     STACKTOP = sp; //@line 5885
     return 0; //@line 5885
    } else {
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 5887
     $27 = HEAP32[$16 >> 2] | 0; //@line 5889
     $41 = $16; //@line 5889
     break;
    }
   }
  }
 } while (0);
 $26 = $3 + 12 | 0; //@line 5895
 HEAP32[$26 >> 2] = $27; //@line 5896
 $28 = $3 + 16 | 0; //@line 5897
 HEAP32[$28 >> 2] = $2; //@line 5898
 $29 = _equeue_alloc($0, 20) | 0; //@line 5899
 do {
  if (!$29) {
   $$0$i = 0; //@line 5903
  } else {
   $31 = HEAP32[$26 >> 2] | 0; //@line 5905
   do {
    if (!$31) {
     $45 = 0; //@line 5909
    } else {
     $34 = HEAP32[$31 + 4 >> 2] | 0; //@line 5912
     $AsyncCtx5 = _emscripten_alloc_async_context(36, sp) | 0; //@line 5913
     FUNCTION_TABLE_vii[$34 & 31]($29, $3); //@line 5914
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 194; //@line 5917
      HEAP32[$AsyncCtx5 + 4 >> 2] = $26; //@line 5919
      HEAP32[$AsyncCtx5 + 8 >> 2] = $29; //@line 5921
      HEAP32[$AsyncCtx5 + 12 >> 2] = $28; //@line 5923
      HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 5925
      HEAP32[$AsyncCtx5 + 20 >> 2] = $26; //@line 5927
      HEAP32[$AsyncCtx5 + 24 >> 2] = $41; //@line 5929
      HEAP32[$AsyncCtx5 + 28 >> 2] = $3; //@line 5931
      HEAP32[$AsyncCtx5 + 32 >> 2] = $4; //@line 5933
      sp = STACKTOP; //@line 5934
      STACKTOP = sp; //@line 5935
      return 0; //@line 5935
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 5937
      $45 = HEAP32[$26 >> 2] | 0; //@line 5939
      break;
     }
    }
   } while (0);
   HEAP32[$29 + 12 >> 2] = $45; //@line 5945
   HEAP32[$29 + 16 >> 2] = HEAP32[$28 >> 2]; //@line 5948
   _equeue_event_dtor($29, 195); //@line 5949
   $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 5950
   $48 = _equeue_post($0, 196, $29) | 0; //@line 5951
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 197; //@line 5954
    HEAP32[$AsyncCtx15 + 4 >> 2] = $26; //@line 5956
    HEAP32[$AsyncCtx15 + 8 >> 2] = $41; //@line 5958
    HEAP32[$AsyncCtx15 + 12 >> 2] = $3; //@line 5960
    HEAP32[$AsyncCtx15 + 16 >> 2] = $4; //@line 5962
    sp = STACKTOP; //@line 5963
    STACKTOP = sp; //@line 5964
    return 0; //@line 5964
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 5966
    $$0$i = $48; //@line 5967
    break;
   }
  }
 } while (0);
 $53 = HEAP32[$26 >> 2] | 0; //@line 5972
 do {
  if ($53 | 0) {
   $56 = HEAP32[$53 + 8 >> 2] | 0; //@line 5977
   $AsyncCtx8 = _emscripten_alloc_async_context(16, sp) | 0; //@line 5978
   FUNCTION_TABLE_vi[$56 & 1023]($3); //@line 5979
   if (___async) {
    HEAP32[$AsyncCtx8 >> 2] = 198; //@line 5982
    HEAP32[$AsyncCtx8 + 4 >> 2] = $41; //@line 5984
    HEAP32[$AsyncCtx8 + 8 >> 2] = $$0$i; //@line 5986
    HEAP32[$AsyncCtx8 + 12 >> 2] = $4; //@line 5988
    sp = STACKTOP; //@line 5989
    STACKTOP = sp; //@line 5990
    return 0; //@line 5990
   } else {
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 5992
    break;
   }
  }
 } while (0);
 $60 = HEAP32[$41 >> 2] | 0; //@line 5997
 if (!$60) {
  STACKTOP = sp; //@line 6000
  return $$0$i | 0; //@line 6000
 }
 $63 = HEAP32[$60 + 8 >> 2] | 0; //@line 6003
 $AsyncCtx12 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6004
 FUNCTION_TABLE_vi[$63 & 1023]($4); //@line 6005
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 199; //@line 6008
  HEAP32[$AsyncCtx12 + 4 >> 2] = $$0$i; //@line 6010
  sp = STACKTOP; //@line 6011
  STACKTOP = sp; //@line 6012
  return 0; //@line 6012
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 6014
 STACKTOP = sp; //@line 6015
 return $$0$i | 0; //@line 6015
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_90($0) {
 $0 = $0 | 0;
 var $$pre17 = 0, $10 = 0, $11 = 0, $16 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 23625
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23627
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23629
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23631
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 23636
  _mbed_assert_internal(12025, 12034, 215); //@line 23637
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 382; //@line 23640
   $9 = $ReallocAsyncCtx14 + 4 | 0; //@line 23641
   HEAP32[$9 >> 2] = $2; //@line 23642
   $10 = $ReallocAsyncCtx14 + 8 | 0; //@line 23643
   HEAP32[$10 >> 2] = $4; //@line 23644
   $11 = $ReallocAsyncCtx14 + 12 | 0; //@line 23645
   HEAP32[$11 >> 2] = $6; //@line 23646
   sp = STACKTOP; //@line 23647
   return;
  }
  ___async_unwind = 0; //@line 23650
  HEAP32[$ReallocAsyncCtx14 >> 2] = 382; //@line 23651
  $9 = $ReallocAsyncCtx14 + 4 | 0; //@line 23652
  HEAP32[$9 >> 2] = $2; //@line 23653
  $10 = $ReallocAsyncCtx14 + 8 | 0; //@line 23654
  HEAP32[$10 >> 2] = $4; //@line 23655
  $11 = $ReallocAsyncCtx14 + 12 | 0; //@line 23656
  HEAP32[$11 >> 2] = $6; //@line 23657
  sp = STACKTOP; //@line 23658
  return;
 }
 HEAP32[$4 + 364 >> 2] = 2; //@line 23662
 $$pre17 = HEAP8[$2 >> 0] | 0; //@line 23663
 if (!($$pre17 & 4)) {
  $16 = HEAP32[$4 + 1324 >> 2] | 0; //@line 23668
  $17 = $16 + 16 | 0; //@line 23669
  $19 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 23671
  $20 = $16 + 28 | 0; //@line 23672
  $21 = HEAP32[$20 >> 2] | 0; //@line 23673
  if (!$21) {
   $ReallocAsyncCtx13 = _emscripten_realloc_async_context(24) | 0; //@line 23676
   _mbed_assert_internal(13874, 13879, 1102); //@line 23677
   if (___async) {
    HEAP32[$ReallocAsyncCtx13 >> 2] = 383; //@line 23680
    $23 = $ReallocAsyncCtx13 + 4 | 0; //@line 23681
    HEAP32[$23 >> 2] = $20; //@line 23682
    $24 = $ReallocAsyncCtx13 + 8 | 0; //@line 23683
    HEAP32[$24 >> 2] = $17; //@line 23684
    $25 = $ReallocAsyncCtx13 + 12 | 0; //@line 23685
    HEAP32[$25 >> 2] = $19; //@line 23686
    $26 = $ReallocAsyncCtx13 + 16 | 0; //@line 23687
    HEAP32[$26 >> 2] = $2; //@line 23688
    $27 = $ReallocAsyncCtx13 + 20 | 0; //@line 23689
    HEAP32[$27 >> 2] = $4; //@line 23690
    sp = STACKTOP; //@line 23691
    return;
   }
   ___async_unwind = 0; //@line 23694
   HEAP32[$ReallocAsyncCtx13 >> 2] = 383; //@line 23695
   $23 = $ReallocAsyncCtx13 + 4 | 0; //@line 23696
   HEAP32[$23 >> 2] = $20; //@line 23697
   $24 = $ReallocAsyncCtx13 + 8 | 0; //@line 23698
   HEAP32[$24 >> 2] = $17; //@line 23699
   $25 = $ReallocAsyncCtx13 + 12 | 0; //@line 23700
   HEAP32[$25 >> 2] = $19; //@line 23701
   $26 = $ReallocAsyncCtx13 + 16 | 0; //@line 23702
   HEAP32[$26 >> 2] = $2; //@line 23703
   $27 = $ReallocAsyncCtx13 + 20 | 0; //@line 23704
   HEAP32[$27 >> 2] = $4; //@line 23705
   sp = STACKTOP; //@line 23706
   return;
  } else {
   $28 = HEAP32[$21 >> 2] | 0; //@line 23709
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 23710
   FUNCTION_TABLE_vii[$28 & 31]($17, $19); //@line 23711
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 384; //@line 23714
    $29 = $ReallocAsyncCtx4 + 4 | 0; //@line 23715
    HEAP32[$29 >> 2] = $2; //@line 23716
    $30 = $ReallocAsyncCtx4 + 8 | 0; //@line 23717
    HEAP32[$30 >> 2] = $4; //@line 23718
    sp = STACKTOP; //@line 23719
    return;
   }
   ___async_unwind = 0; //@line 23722
   HEAP32[$ReallocAsyncCtx4 >> 2] = 384; //@line 23723
   $29 = $ReallocAsyncCtx4 + 4 | 0; //@line 23724
   HEAP32[$29 >> 2] = $2; //@line 23725
   $30 = $ReallocAsyncCtx4 + 8 | 0; //@line 23726
   HEAP32[$30 >> 2] = $4; //@line 23727
   sp = STACKTOP; //@line 23728
   return;
  }
 }
 $31 = $$pre17 & -5; //@line 23732
 HEAP8[$2 >> 0] = $31; //@line 23733
 if (!($31 & 16)) {
  return;
 }
 HEAP8[$2 >> 0] = $31 & -17; //@line 23740
 $36 = HEAP32[$4 + 1324 >> 2] | 0; //@line 23742
 $37 = $36 + 48 | 0; //@line 23743
 $39 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 23745
 $40 = $36 + 60 | 0; //@line 23746
 $41 = HEAP32[$40 >> 2] | 0; //@line 23747
 if (!$41) {
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(16) | 0; //@line 23750
  _mbed_assert_internal(13874, 13879, 1102); //@line 23751
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 385; //@line 23754
   $43 = $ReallocAsyncCtx12 + 4 | 0; //@line 23755
   HEAP32[$43 >> 2] = $40; //@line 23756
   $44 = $ReallocAsyncCtx12 + 8 | 0; //@line 23757
   HEAP32[$44 >> 2] = $37; //@line 23758
   $45 = $ReallocAsyncCtx12 + 12 | 0; //@line 23759
   HEAP32[$45 >> 2] = $39; //@line 23760
   sp = STACKTOP; //@line 23761
   return;
  }
  ___async_unwind = 0; //@line 23764
  HEAP32[$ReallocAsyncCtx12 >> 2] = 385; //@line 23765
  $43 = $ReallocAsyncCtx12 + 4 | 0; //@line 23766
  HEAP32[$43 >> 2] = $40; //@line 23767
  $44 = $ReallocAsyncCtx12 + 8 | 0; //@line 23768
  HEAP32[$44 >> 2] = $37; //@line 23769
  $45 = $ReallocAsyncCtx12 + 12 | 0; //@line 23770
  HEAP32[$45 >> 2] = $39; //@line 23771
  sp = STACKTOP; //@line 23772
  return;
 } else {
  $46 = HEAP32[$41 >> 2] | 0; //@line 23775
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 23776
  FUNCTION_TABLE_vii[$46 & 31]($37, $39); //@line 23777
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 386; //@line 23780
   sp = STACKTOP; //@line 23781
   return;
  }
  ___async_unwind = 0; //@line 23784
  HEAP32[$ReallocAsyncCtx5 >> 2] = 386; //@line 23785
  sp = STACKTOP; //@line 23786
  return;
 }
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_288($0) {
 $0 = $0 | 0;
 var $$3$off0226 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $37 = 0, $4 = 0, $42 = 0, $43 = 0, $57 = 0, $6 = 0, $60 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $71 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $81 = 0, $84 = 0, $86 = 0, $87 = 0, $ReallocAsyncCtx26 = 0, $ReallocAsyncCtx27 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 8597
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8599
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8601
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8603
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 8605
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 8607
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 8609
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 8611
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 8613
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 8615
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 8617
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 8619
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 8621
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 8623
 $28 = HEAP8[$0 + 56 >> 0] & 1; //@line 8626
 $30 = HEAP8[$0 + 57 >> 0] | 0; //@line 8628
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  if (__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($24) | 0) {
   HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($22) | 0) >> 2] = 4; //@line 8636
   $37 = $2 + 944 | 0; //@line 8637
   HEAP8[$37 >> 0] = HEAP8[$37 >> 0] | 16; //@line 8640
   __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($24); //@line 8641
  }
 } else {
  HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($26) | 0) + 4 >> 2] = 1; //@line 8646
 }
 $42 = $14 & 255; //@line 8650
 $43 = $2 + 638 | 0; //@line 8651
 if (__Z15decrypt_payloadPKhtS0_jhjPh($10 + $12 | 0, $42, $16, $18, 1, $20, $43) | 0) {
  HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($26) | 0) + 4 >> 2] = 13; //@line 8657
 }
 if ($28) {
  $$3$off0226 = 6; //@line 8660
 } else {
  HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($26) | 0) + 12 >> 2] = $43; //@line 8664
  HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($26) | 0) + 16 >> 1] = $42; //@line 8667
  HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($26) | 0) + 18 >> 0] = 1; //@line 8670
  $57 = (__ZN11LoRaMacMcps16get_confirmationEv($26) | 0) + 10 | 0; //@line 8674
  if ($30 & 32) {
   HEAP8[$57 >> 0] = 1; //@line 8676
   HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($26) | 0) + 28 >> 0] = 1; //@line 8679
   $60 = HEAP32[$4 >> 2] | 0; //@line 8680
   $ReallocAsyncCtx27 = _emscripten_realloc_async_context(20) | 0; //@line 8682
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($60, $2 + 1076 | 0); //@line 8683
   if (___async) {
    HEAP32[$ReallocAsyncCtx27 >> 2] = 323; //@line 8686
    $62 = $ReallocAsyncCtx27 + 4 | 0; //@line 8687
    HEAP32[$62 >> 2] = $2; //@line 8688
    $63 = $ReallocAsyncCtx27 + 8 | 0; //@line 8689
    HEAP32[$63 >> 2] = $4; //@line 8690
    $64 = $ReallocAsyncCtx27 + 12 | 0; //@line 8691
    HEAP32[$64 >> 2] = $6; //@line 8692
    $65 = $ReallocAsyncCtx27 + 16 | 0; //@line 8693
    HEAP32[$65 >> 2] = $8; //@line 8694
    sp = STACKTOP; //@line 8695
    return;
   }
   ___async_unwind = 0; //@line 8698
   HEAP32[$ReallocAsyncCtx27 >> 2] = 323; //@line 8699
   $62 = $ReallocAsyncCtx27 + 4 | 0; //@line 8700
   HEAP32[$62 >> 2] = $2; //@line 8701
   $63 = $ReallocAsyncCtx27 + 8 | 0; //@line 8702
   HEAP32[$63 >> 2] = $4; //@line 8703
   $64 = $ReallocAsyncCtx27 + 12 | 0; //@line 8704
   HEAP32[$64 >> 2] = $6; //@line 8705
   $65 = $ReallocAsyncCtx27 + 16 | 0; //@line 8706
   HEAP32[$65 >> 2] = $8; //@line 8707
   sp = STACKTOP; //@line 8708
   return;
  }
  HEAP8[$57 >> 0] = 0; //@line 8711
  if ((HEAPU8[$2 + 895 >> 0] | 0) > (HEAPU8[$2 + 894 >> 0] | 0)) {
   $71 = HEAP32[$4 >> 2] | 0; //@line 8718
   $ReallocAsyncCtx26 = _emscripten_realloc_async_context(20) | 0; //@line 8720
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($71, $2 + 1076 | 0); //@line 8721
   if (___async) {
    HEAP32[$ReallocAsyncCtx26 >> 2] = 324; //@line 8724
    $73 = $ReallocAsyncCtx26 + 4 | 0; //@line 8725
    HEAP32[$73 >> 2] = $2; //@line 8726
    $74 = $ReallocAsyncCtx26 + 8 | 0; //@line 8727
    HEAP32[$74 >> 2] = $4; //@line 8728
    $75 = $ReallocAsyncCtx26 + 12 | 0; //@line 8729
    HEAP32[$75 >> 2] = $6; //@line 8730
    $76 = $ReallocAsyncCtx26 + 16 | 0; //@line 8731
    HEAP32[$76 >> 2] = $8; //@line 8732
    sp = STACKTOP; //@line 8733
    return;
   }
   ___async_unwind = 0; //@line 8736
   HEAP32[$ReallocAsyncCtx26 >> 2] = 324; //@line 8737
   $73 = $ReallocAsyncCtx26 + 4 | 0; //@line 8738
   HEAP32[$73 >> 2] = $2; //@line 8739
   $74 = $ReallocAsyncCtx26 + 8 | 0; //@line 8740
   HEAP32[$74 >> 2] = $4; //@line 8741
   $75 = $ReallocAsyncCtx26 + 12 | 0; //@line 8742
   HEAP32[$75 >> 2] = $6; //@line 8743
   $76 = $ReallocAsyncCtx26 + 16 | 0; //@line 8744
   HEAP32[$76 >> 2] = $8; //@line 8745
   sp = STACKTOP; //@line 8746
   return;
  } else {
   $$3$off0226 = 2; //@line 8749
  }
 }
 $77 = $2 + 944 | 0; //@line 8752
 HEAP8[$77 >> 0] = $$3$off0226 | HEAP8[$77 >> 0] & -7; //@line 8756
 $81 = $2 + 944 | 0; //@line 8757
 HEAP8[$81 >> 0] = HEAP8[$81 >> 0] | 32; //@line 8760
 $84 = HEAP32[$4 >> 2] | 0; //@line 8761
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 8763
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($84, $2 + 996 | 0, 1); //@line 8764
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 331; //@line 8767
  $86 = $ReallocAsyncCtx5 + 4 | 0; //@line 8768
  HEAP32[$86 >> 2] = $6; //@line 8769
  $87 = $ReallocAsyncCtx5 + 8 | 0; //@line 8770
  HEAP32[$87 >> 2] = $8; //@line 8771
  sp = STACKTOP; //@line 8772
  return;
 }
 ___async_unwind = 0; //@line 8775
 HEAP32[$ReallocAsyncCtx5 >> 2] = 331; //@line 8776
 $86 = $ReallocAsyncCtx5 + 4 | 0; //@line 8777
 HEAP32[$86 >> 2] = $6; //@line 8778
 $87 = $ReallocAsyncCtx5 + 8 | 0; //@line 8779
 HEAP32[$87 >> 2] = $8; //@line 8780
 sp = STACKTOP; //@line 8781
 return;
}
function _mbedtls_gcm_update__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$061 = 0, $$163 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $35 = 0, $36 = 0, $39 = 0, $4 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $67 = 0, $68 = 0, $75 = 0, $8 = 0, $84 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 21198
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21200
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21202
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21204
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21206
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21208
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21210
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21212
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 21214
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 21216
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 21218
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 21220
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 21222
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 21224
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 21226
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 21228
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 21230
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 21232
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 21235
  $84 = ___async_retval; //@line 21236
  HEAP32[$84 >> 2] = $$0; //@line 21237
  return;
 }
 if ($2 | 0) {
  $$163 = 0; //@line 21242
  do {
   $67 = $8 + 376 + $$163 | 0; //@line 21246
   $68 = $14 + $$163 | 0; //@line 21247
   if (!(HEAP32[$18 >> 2] | 0)) {
    HEAP8[$67 >> 0] = HEAP8[$67 >> 0] ^ HEAP8[$68 >> 0]; //@line 21252
   }
   $75 = HEAP8[$68 >> 0] ^ HEAP8[$20 + $$163 >> 0]; //@line 21257
   HEAP8[$16 + $$163 >> 0] = $75; //@line 21259
   if ((HEAP32[$18 >> 2] | 0) == 1) {
    HEAP8[$67 >> 0] = HEAP8[$67 >> 0] ^ $75; //@line 21265
   }
   $$163 = $$163 + 1 | 0; //@line 21267
  } while ($$163 >>> 0 < $2 >>> 0);
 }
 _gcm_mult($8, $10, $10); //@line 21276
 $35 = $12 - $2 | 0; //@line 21277
 $51 = $14 + $2 | 0; //@line 21278
 $53 = $16 + $2 | 0; //@line 21279
 if (!$35) {
  $$0 = 0; //@line 21282
  $84 = ___async_retval; //@line 21283
  HEAP32[$84 >> 2] = $$0; //@line 21284
  return;
 }
 $36 = $35 >>> 0 < 16 ? $35 : 16; //@line 21288
 $$061 = 16; //@line 21289
 do {
  if ($$061 >>> 0 <= 12) {
   break;
  }
  $$061 = $$061 + -1 | 0; //@line 21295
  $39 = $8 + 360 + $$061 | 0; //@line 21296
  $41 = (HEAP8[$39 >> 0] | 0) + 1 << 24 >> 24; //@line 21298
  HEAP8[$39 >> 0] = $41; //@line 21299
 } while (!($41 << 24 >> 24));
 $ReallocAsyncCtx = _emscripten_realloc_async_context(68) | 0; //@line 21307
 $43 = _mbedtls_cipher_update($28, $30, 16, $6, $32) | 0; //@line 21308
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 592; //@line 21311
  $44 = $ReallocAsyncCtx + 4 | 0; //@line 21312
  HEAP32[$44 >> 2] = $36; //@line 21313
  $45 = $ReallocAsyncCtx + 8 | 0; //@line 21314
  HEAP32[$45 >> 2] = $4; //@line 21315
  $46 = $ReallocAsyncCtx + 12 | 0; //@line 21316
  HEAP32[$46 >> 2] = $6; //@line 21317
  $47 = $ReallocAsyncCtx + 16 | 0; //@line 21318
  HEAP32[$47 >> 2] = $8; //@line 21319
  $48 = $ReallocAsyncCtx + 20 | 0; //@line 21320
  HEAP32[$48 >> 2] = $10; //@line 21321
  $49 = $ReallocAsyncCtx + 24 | 0; //@line 21322
  HEAP32[$49 >> 2] = $35; //@line 21323
  $50 = $ReallocAsyncCtx + 28 | 0; //@line 21324
  HEAP32[$50 >> 2] = $51; //@line 21325
  $52 = $ReallocAsyncCtx + 32 | 0; //@line 21326
  HEAP32[$52 >> 2] = $53; //@line 21327
  $54 = $ReallocAsyncCtx + 36 | 0; //@line 21328
  HEAP32[$54 >> 2] = $18; //@line 21329
  $55 = $ReallocAsyncCtx + 40 | 0; //@line 21330
  HEAP32[$55 >> 2] = $20; //@line 21331
  $56 = $ReallocAsyncCtx + 44 | 0; //@line 21332
  HEAP32[$56 >> 2] = $22; //@line 21333
  $57 = $ReallocAsyncCtx + 48 | 0; //@line 21334
  HEAP32[$57 >> 2] = $24; //@line 21335
  $58 = $ReallocAsyncCtx + 52 | 0; //@line 21336
  HEAP32[$58 >> 2] = $26; //@line 21337
  $59 = $ReallocAsyncCtx + 56 | 0; //@line 21338
  HEAP32[$59 >> 2] = $28; //@line 21339
  $60 = $ReallocAsyncCtx + 60 | 0; //@line 21340
  HEAP32[$60 >> 2] = $30; //@line 21341
  $61 = $ReallocAsyncCtx + 64 | 0; //@line 21342
  HEAP32[$61 >> 2] = $32; //@line 21343
  sp = STACKTOP; //@line 21344
  return;
 }
 HEAP32[___async_retval >> 2] = $43; //@line 21348
 ___async_unwind = 0; //@line 21349
 HEAP32[$ReallocAsyncCtx >> 2] = 592; //@line 21350
 $44 = $ReallocAsyncCtx + 4 | 0; //@line 21351
 HEAP32[$44 >> 2] = $36; //@line 21352
 $45 = $ReallocAsyncCtx + 8 | 0; //@line 21353
 HEAP32[$45 >> 2] = $4; //@line 21354
 $46 = $ReallocAsyncCtx + 12 | 0; //@line 21355
 HEAP32[$46 >> 2] = $6; //@line 21356
 $47 = $ReallocAsyncCtx + 16 | 0; //@line 21357
 HEAP32[$47 >> 2] = $8; //@line 21358
 $48 = $ReallocAsyncCtx + 20 | 0; //@line 21359
 HEAP32[$48 >> 2] = $10; //@line 21360
 $49 = $ReallocAsyncCtx + 24 | 0; //@line 21361
 HEAP32[$49 >> 2] = $35; //@line 21362
 $50 = $ReallocAsyncCtx + 28 | 0; //@line 21363
 HEAP32[$50 >> 2] = $51; //@line 21364
 $52 = $ReallocAsyncCtx + 32 | 0; //@line 21365
 HEAP32[$52 >> 2] = $53; //@line 21366
 $54 = $ReallocAsyncCtx + 36 | 0; //@line 21367
 HEAP32[$54 >> 2] = $18; //@line 21368
 $55 = $ReallocAsyncCtx + 40 | 0; //@line 21369
 HEAP32[$55 >> 2] = $20; //@line 21370
 $56 = $ReallocAsyncCtx + 44 | 0; //@line 21371
 HEAP32[$56 >> 2] = $22; //@line 21372
 $57 = $ReallocAsyncCtx + 48 | 0; //@line 21373
 HEAP32[$57 >> 2] = $24; //@line 21374
 $58 = $ReallocAsyncCtx + 52 | 0; //@line 21375
 HEAP32[$58 >> 2] = $26; //@line 21376
 $59 = $ReallocAsyncCtx + 56 | 0; //@line 21377
 HEAP32[$59 >> 2] = $28; //@line 21378
 $60 = $ReallocAsyncCtx + 60 | 0; //@line 21379
 HEAP32[$60 >> 2] = $30; //@line 21380
 $61 = $ReallocAsyncCtx + 64 | 0; //@line 21381
 HEAP32[$61 >> 2] = $32; //@line 21382
 sp = STACKTOP; //@line 21383
 return;
}
function __ZN12LoRaWANStack9handle_txEhPKhth__async_cb_269($0) {
 $0 = $0 | 0;
 var $$0$i38 = 0, $11 = 0, $13 = 0, $15 = 0, $17 = 0, $2 = 0, $23 = 0, $27 = 0, $29 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $65 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $9 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5822
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5824
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5826
 $trunc = HEAP8[$0 + 12 >> 0] | 0; //@line 5828
 $7 = HEAP32[$0 + 16 >> 2] | 0; //@line 5830
 $9 = HEAP32[$0 + 20 >> 2] | 0; //@line 5832
 $11 = HEAP32[$0 + 24 >> 2] | 0; //@line 5834
 $13 = HEAP32[$0 + 28 >> 2] | 0; //@line 5836
 $15 = HEAP32[$0 + 32 >> 2] | 0; //@line 5838
 $17 = HEAP32[$0 + 36 >> 2] | 0; //@line 5840
 $23 = HEAP32[$0 + 48 >> 2] | 0; //@line 5846
 $27 = HEAP16[$0 + 56 >> 1] | 0; //@line 5850
 $29 = HEAP8[$0 + 58 >> 0] & 1; //@line 5853
 $37 = (HEAP32[___async_retval >> 2] | 0) == -1010 ? HEAP8[HEAP32[$0 + 64 >> 2] >> 0] | 0 : HEAP8[(HEAP32[$0 + 60 >> 2] | 0) + 1 >> 0] | 0; //@line 5864
 $$0$i38 = $37 & 255; //@line 5865
 $38 = $37 & 255; //@line 5866
 $39 = $27 & 65535; //@line 5867
 if (($$0$i38 & 65535) < ($27 & 65535)) {
  _printf(11691, HEAP32[$0 + 40 >> 2] | 0) | 0; //@line 5870
  HEAP32[$23 >> 2] = $39; //@line 5871
  HEAP32[$23 + 4 >> 2] = $38; //@line 5873
  _printf(11704, $23) | 0; //@line 5874
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(52) | 0; //@line 5875
  _putchar(10) | 0; //@line 5876
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 219; //@line 5879
   $41 = $ReallocAsyncCtx2 + 4 | 0; //@line 5880
   HEAP32[$41 >> 2] = $39; //@line 5881
   $42 = $ReallocAsyncCtx2 + 8 | 0; //@line 5882
   HEAP32[$42 >> 2] = $38; //@line 5883
   $43 = $ReallocAsyncCtx2 + 12 | 0; //@line 5884
   HEAP32[$43 >> 2] = $2; //@line 5885
   $44 = $ReallocAsyncCtx2 + 16 | 0; //@line 5886
   HEAP16[$44 >> 1] = $$0$i38; //@line 5887
   $45 = $ReallocAsyncCtx2 + 20 | 0; //@line 5888
   HEAP32[$45 >> 2] = $4; //@line 5889
   $46 = $ReallocAsyncCtx2 + 24 | 0; //@line 5890
   HEAP8[$46 >> 0] = $trunc; //@line 5891
   $47 = $ReallocAsyncCtx2 + 28 | 0; //@line 5892
   HEAP32[$47 >> 2] = $7; //@line 5893
   $48 = $ReallocAsyncCtx2 + 32 | 0; //@line 5894
   HEAP32[$48 >> 2] = $9; //@line 5895
   $49 = $ReallocAsyncCtx2 + 36 | 0; //@line 5896
   HEAP32[$49 >> 2] = $11; //@line 5897
   $50 = $ReallocAsyncCtx2 + 40 | 0; //@line 5898
   HEAP32[$50 >> 2] = $13; //@line 5899
   $51 = $ReallocAsyncCtx2 + 44 | 0; //@line 5900
   HEAP32[$51 >> 2] = $15; //@line 5901
   $52 = $ReallocAsyncCtx2 + 48 | 0; //@line 5902
   HEAP32[$52 >> 2] = $17; //@line 5903
   sp = STACKTOP; //@line 5904
   return;
  }
  ___async_unwind = 0; //@line 5907
  HEAP32[$ReallocAsyncCtx2 >> 2] = 219; //@line 5908
  $41 = $ReallocAsyncCtx2 + 4 | 0; //@line 5909
  HEAP32[$41 >> 2] = $39; //@line 5910
  $42 = $ReallocAsyncCtx2 + 8 | 0; //@line 5911
  HEAP32[$42 >> 2] = $38; //@line 5912
  $43 = $ReallocAsyncCtx2 + 12 | 0; //@line 5913
  HEAP32[$43 >> 2] = $2; //@line 5914
  $44 = $ReallocAsyncCtx2 + 16 | 0; //@line 5915
  HEAP16[$44 >> 1] = $$0$i38; //@line 5916
  $45 = $ReallocAsyncCtx2 + 20 | 0; //@line 5917
  HEAP32[$45 >> 2] = $4; //@line 5918
  $46 = $ReallocAsyncCtx2 + 24 | 0; //@line 5919
  HEAP8[$46 >> 0] = $trunc; //@line 5920
  $47 = $ReallocAsyncCtx2 + 28 | 0; //@line 5921
  HEAP32[$47 >> 2] = $7; //@line 5922
  $48 = $ReallocAsyncCtx2 + 32 | 0; //@line 5923
  HEAP32[$48 >> 2] = $9; //@line 5924
  $49 = $ReallocAsyncCtx2 + 36 | 0; //@line 5925
  HEAP32[$49 >> 2] = $11; //@line 5926
  $50 = $ReallocAsyncCtx2 + 40 | 0; //@line 5927
  HEAP32[$50 >> 2] = $13; //@line 5928
  $51 = $ReallocAsyncCtx2 + 44 | 0; //@line 5929
  HEAP32[$51 >> 2] = $15; //@line 5930
  $52 = $ReallocAsyncCtx2 + 48 | 0; //@line 5931
  HEAP32[$52 >> 2] = $17; //@line 5932
  sp = STACKTOP; //@line 5933
  return;
 }
 HEAP16[$2 + 2230 >> 1] = $27; //@line 5937
 HEAP16[$2 + 2232 >> 1] = 0; //@line 5939
 if (!$29) {
  _memcpy($2 + 1975 | 0, $4 | 0, $39 | 0) | 0; //@line 5942
 }
 switch ($trunc & 15) {
 case 9:
 case 5:
 case 1:
  {
   HEAP32[$2 + 1968 >> 2] = 0; //@line 5948
   HEAP8[$2 + 1972 >> 0] = HEAP8[$15 >> 0] | 0; //@line 5951
   switch ($trunc & 15) {
   case 6:
   case 2:
    {
     label = 10; //@line 5955
     break;
    }
   default:
    {}
   }
   break;
  }
 case 10:
 case 6:
 case 2:
  {
   label = 10; //@line 5964
   break;
  }
 default:
  {}
 }
 if ((label | 0) == 10) {
  HEAP32[$2 + 1968 >> 2] = 1; //@line 5972
  HEAP8[$2 + 1972 >> 0] = HEAP8[$15 >> 0] | 0; //@line 5975
  HEAP8[$2 + 1974 >> 0] = HEAP8[$2 + 2284 >> 0] | 0; //@line 5979
 }
 _printf(11691, $7) | 0; //@line 5981
 $65 = $2 + 2230 | 0; //@line 5982
 $70 = HEAPU16[$2 + 2232 >> 1] | 0; //@line 5987
 HEAP32[$11 >> 2] = HEAPU16[$65 >> 1]; //@line 5988
 HEAP32[$11 + 4 >> 2] = $70; //@line 5990
 _printf(11759, $11) | 0; //@line 5991
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 5992
 _putchar(10) | 0; //@line 5993
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 220; //@line 5996
  $71 = $ReallocAsyncCtx + 4 | 0; //@line 5997
  HEAP32[$71 >> 2] = $2; //@line 5998
  $72 = $ReallocAsyncCtx + 8 | 0; //@line 5999
  HEAP32[$72 >> 2] = $65; //@line 6000
  $73 = $ReallocAsyncCtx + 12 | 0; //@line 6001
  HEAP32[$73 >> 2] = $17; //@line 6002
  sp = STACKTOP; //@line 6003
  return;
 }
 ___async_unwind = 0; //@line 6006
 HEAP32[$ReallocAsyncCtx >> 2] = 220; //@line 6007
 $71 = $ReallocAsyncCtx + 4 | 0; //@line 6008
 HEAP32[$71 >> 2] = $2; //@line 6009
 $72 = $ReallocAsyncCtx + 8 | 0; //@line 6010
 HEAP32[$72 >> 2] = $65; //@line 6011
 $73 = $ReallocAsyncCtx + 12 | 0; //@line 6012
 HEAP32[$73 >> 2] = $17; //@line 6013
 sp = STACKTOP; //@line 6014
 return;
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_195($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 1185
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1187
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1191
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1193
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 1195
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 1197
 $13 = $6 + 12 | 0; //@line 1198
 HEAP32[$6 >> 2] = 470; //@line 1199
 HEAP32[$6 + 4 >> 2] = 0; //@line 1201
 HEAP32[$6 + 8 >> 2] = $2; //@line 1203
 HEAP32[$13 >> 2] = 836; //@line 1204
 $14 = $2 + 1276 | 0; //@line 1205
 if (($14 | 0) == ($6 | 0)) {
  $39 = HEAP32[211] | 0; //@line 1209
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(24) | 0; //@line 1210
  FUNCTION_TABLE_vi[$39 & 1023]($6); //@line 1211
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 473; //@line 1214
   $40 = $ReallocAsyncCtx9 + 4 | 0; //@line 1215
   HEAP32[$40 >> 2] = $8; //@line 1216
   $41 = $ReallocAsyncCtx9 + 8 | 0; //@line 1217
   HEAP32[$41 >> 2] = $10; //@line 1218
   $42 = $ReallocAsyncCtx9 + 12 | 0; //@line 1219
   HEAP32[$42 >> 2] = $2; //@line 1220
   $43 = $ReallocAsyncCtx9 + 16 | 0; //@line 1221
   HEAP32[$43 >> 2] = $6; //@line 1222
   $44 = $ReallocAsyncCtx9 + 20 | 0; //@line 1223
   HEAP32[$44 >> 2] = $12; //@line 1224
   sp = STACKTOP; //@line 1225
   return;
  }
  ___async_unwind = 0; //@line 1228
  HEAP32[$ReallocAsyncCtx9 >> 2] = 473; //@line 1229
  $40 = $ReallocAsyncCtx9 + 4 | 0; //@line 1230
  HEAP32[$40 >> 2] = $8; //@line 1231
  $41 = $ReallocAsyncCtx9 + 8 | 0; //@line 1232
  HEAP32[$41 >> 2] = $10; //@line 1233
  $42 = $ReallocAsyncCtx9 + 12 | 0; //@line 1234
  HEAP32[$42 >> 2] = $2; //@line 1235
  $43 = $ReallocAsyncCtx9 + 16 | 0; //@line 1236
  HEAP32[$43 >> 2] = $6; //@line 1237
  $44 = $ReallocAsyncCtx9 + 20 | 0; //@line 1238
  HEAP32[$44 >> 2] = $12; //@line 1239
  sp = STACKTOP; //@line 1240
  return;
 }
 $16 = $2 + 1288 | 0; //@line 1243
 $17 = HEAP32[$16 >> 2] | 0; //@line 1244
 if (!$17) {
  $30 = HEAP32[210] | 0; //@line 1248
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(32) | 0; //@line 1249
  FUNCTION_TABLE_vii[$30 & 31]($14, $6); //@line 1250
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 472; //@line 1253
   $31 = $ReallocAsyncCtx8 + 4 | 0; //@line 1254
   HEAP32[$31 >> 2] = $8; //@line 1255
   $32 = $ReallocAsyncCtx8 + 8 | 0; //@line 1256
   HEAP32[$32 >> 2] = $10; //@line 1257
   $33 = $ReallocAsyncCtx8 + 12 | 0; //@line 1258
   HEAP32[$33 >> 2] = $2; //@line 1259
   $34 = $ReallocAsyncCtx8 + 16 | 0; //@line 1260
   HEAP32[$34 >> 2] = $6; //@line 1261
   $35 = $ReallocAsyncCtx8 + 20 | 0; //@line 1262
   HEAP32[$35 >> 2] = $13; //@line 1263
   $36 = $ReallocAsyncCtx8 + 24 | 0; //@line 1264
   HEAP32[$36 >> 2] = $16; //@line 1265
   $37 = $ReallocAsyncCtx8 + 28 | 0; //@line 1266
   HEAP32[$37 >> 2] = $12; //@line 1267
   sp = STACKTOP; //@line 1268
   return;
  }
  ___async_unwind = 0; //@line 1271
  HEAP32[$ReallocAsyncCtx8 >> 2] = 472; //@line 1272
  $31 = $ReallocAsyncCtx8 + 4 | 0; //@line 1273
  HEAP32[$31 >> 2] = $8; //@line 1274
  $32 = $ReallocAsyncCtx8 + 8 | 0; //@line 1275
  HEAP32[$32 >> 2] = $10; //@line 1276
  $33 = $ReallocAsyncCtx8 + 12 | 0; //@line 1277
  HEAP32[$33 >> 2] = $2; //@line 1278
  $34 = $ReallocAsyncCtx8 + 16 | 0; //@line 1279
  HEAP32[$34 >> 2] = $6; //@line 1280
  $35 = $ReallocAsyncCtx8 + 20 | 0; //@line 1281
  HEAP32[$35 >> 2] = $13; //@line 1282
  $36 = $ReallocAsyncCtx8 + 24 | 0; //@line 1283
  HEAP32[$36 >> 2] = $16; //@line 1284
  $37 = $ReallocAsyncCtx8 + 28 | 0; //@line 1285
  HEAP32[$37 >> 2] = $12; //@line 1286
  sp = STACKTOP; //@line 1287
  return;
 } else {
  $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 1291
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(36) | 0; //@line 1292
  FUNCTION_TABLE_vi[$20 & 1023]($14); //@line 1293
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 471; //@line 1296
   $21 = $ReallocAsyncCtx7 + 4 | 0; //@line 1297
   HEAP32[$21 >> 2] = $13; //@line 1298
   $22 = $ReallocAsyncCtx7 + 8 | 0; //@line 1299
   HEAP32[$22 >> 2] = $8; //@line 1300
   $23 = $ReallocAsyncCtx7 + 12 | 0; //@line 1301
   HEAP32[$23 >> 2] = $10; //@line 1302
   $24 = $ReallocAsyncCtx7 + 16 | 0; //@line 1303
   HEAP32[$24 >> 2] = $2; //@line 1304
   $25 = $ReallocAsyncCtx7 + 20 | 0; //@line 1305
   HEAP32[$25 >> 2] = $6; //@line 1306
   $26 = $ReallocAsyncCtx7 + 24 | 0; //@line 1307
   HEAP32[$26 >> 2] = $16; //@line 1308
   $27 = $ReallocAsyncCtx7 + 28 | 0; //@line 1309
   HEAP32[$27 >> 2] = $14; //@line 1310
   $28 = $ReallocAsyncCtx7 + 32 | 0; //@line 1311
   HEAP32[$28 >> 2] = $12; //@line 1312
   sp = STACKTOP; //@line 1313
   return;
  }
  ___async_unwind = 0; //@line 1316
  HEAP32[$ReallocAsyncCtx7 >> 2] = 471; //@line 1317
  $21 = $ReallocAsyncCtx7 + 4 | 0; //@line 1318
  HEAP32[$21 >> 2] = $13; //@line 1319
  $22 = $ReallocAsyncCtx7 + 8 | 0; //@line 1320
  HEAP32[$22 >> 2] = $8; //@line 1321
  $23 = $ReallocAsyncCtx7 + 12 | 0; //@line 1322
  HEAP32[$23 >> 2] = $10; //@line 1323
  $24 = $ReallocAsyncCtx7 + 16 | 0; //@line 1324
  HEAP32[$24 >> 2] = $2; //@line 1325
  $25 = $ReallocAsyncCtx7 + 20 | 0; //@line 1326
  HEAP32[$25 >> 2] = $6; //@line 1327
  $26 = $ReallocAsyncCtx7 + 24 | 0; //@line 1328
  HEAP32[$26 >> 2] = $16; //@line 1329
  $27 = $ReallocAsyncCtx7 + 28 | 0; //@line 1330
  HEAP32[$27 >> 2] = $14; //@line 1331
  $28 = $ReallocAsyncCtx7 + 32 | 0; //@line 1332
  HEAP32[$28 >> 2] = $12; //@line 1333
  sp = STACKTOP; //@line 1334
  return;
 }
}
function _initialize__async_cb_13($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 17630
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17632
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17634
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17636
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 17638
 $8 = HEAP32[$AsyncRetVal >> 2] | 0; //@line 17639
 if (!$8) {
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(20) | 0; //@line 17642
  _mbed_assert_internal(13326, 13328, 41); //@line 17643
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 597; //@line 17646
   $10 = $ReallocAsyncCtx7 + 4 | 0; //@line 17647
   HEAP32[$10 >> 2] = $2; //@line 17648
   $11 = $ReallocAsyncCtx7 + 8 | 0; //@line 17649
   HEAP32[$11 >> 2] = $4; //@line 17650
   $12 = $ReallocAsyncCtx7 + 12 | 0; //@line 17651
   HEAP32[$12 >> 2] = $AsyncRetVal; //@line 17652
   $13 = $ReallocAsyncCtx7 + 16 | 0; //@line 17653
   HEAP32[$13 >> 2] = $6; //@line 17654
   sp = STACKTOP; //@line 17655
   return;
  }
  ___async_unwind = 0; //@line 17658
  HEAP32[$ReallocAsyncCtx7 >> 2] = 597; //@line 17659
  $10 = $ReallocAsyncCtx7 + 4 | 0; //@line 17660
  HEAP32[$10 >> 2] = $2; //@line 17661
  $11 = $ReallocAsyncCtx7 + 8 | 0; //@line 17662
  HEAP32[$11 >> 2] = $4; //@line 17663
  $12 = $ReallocAsyncCtx7 + 12 | 0; //@line 17664
  HEAP32[$12 >> 2] = $AsyncRetVal; //@line 17665
  $13 = $ReallocAsyncCtx7 + 16 | 0; //@line 17666
  HEAP32[$13 >> 2] = $6; //@line 17667
  sp = STACKTOP; //@line 17668
  return;
 }
 $15 = HEAP32[$AsyncRetVal + 4 >> 2] | 0; //@line 17672
 if (($15 + -4 | 0) >>> 0 > 28) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 17676
  _mbed_assert_internal(13326, 13328, 47); //@line 17677
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 598; //@line 17680
   $17 = $ReallocAsyncCtx6 + 4 | 0; //@line 17681
   HEAP32[$17 >> 2] = $8; //@line 17682
   $18 = $ReallocAsyncCtx6 + 8 | 0; //@line 17683
   HEAP32[$18 >> 2] = $2; //@line 17684
   $19 = $ReallocAsyncCtx6 + 12 | 0; //@line 17685
   HEAP32[$19 >> 2] = $4; //@line 17686
   $20 = $ReallocAsyncCtx6 + 16 | 0; //@line 17687
   HEAP32[$20 >> 2] = $6; //@line 17688
   sp = STACKTOP; //@line 17689
   return;
  }
  ___async_unwind = 0; //@line 17692
  HEAP32[$ReallocAsyncCtx6 >> 2] = 598; //@line 17693
  $17 = $ReallocAsyncCtx6 + 4 | 0; //@line 17694
  HEAP32[$17 >> 2] = $8; //@line 17695
  $18 = $ReallocAsyncCtx6 + 8 | 0; //@line 17696
  HEAP32[$18 >> 2] = $2; //@line 17697
  $19 = $ReallocAsyncCtx6 + 12 | 0; //@line 17698
  HEAP32[$19 >> 2] = $4; //@line 17699
  $20 = $ReallocAsyncCtx6 + 16 | 0; //@line 17700
  HEAP32[$20 >> 2] = $6; //@line 17701
  sp = STACKTOP; //@line 17702
  return;
 } else {
  $22 = 7 << $15 + -4; //@line 17706
  $23 = ___muldi3($22 | 0, 0, 1e6, 0) | 0; //@line 17707
  $24 = tempRet0; //@line 17708
  $25 = _i64Add($8 | 0, 0, -1, -1) | 0; //@line 17709
  $27 = _i64Add($25 | 0, tempRet0 | 0, $23 | 0, $24 | 0) | 0; //@line 17711
  $29 = ___udivdi3($27 | 0, tempRet0 | 0, $8 | 0, 0) | 0; //@line 17713
  $30 = tempRet0; //@line 17714
  $31 = HEAP32[$2 >> 2] | 0; //@line 17715
  HEAP32[$31 >> 2] = 0; //@line 17716
  HEAP32[$31 + 4 >> 2] = 0; //@line 17718
  $35 = HEAP32[(HEAP32[$4 >> 2] | 0) + 4 >> 2] | 0; //@line 17721
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(40) | 0; //@line 17722
  $36 = FUNCTION_TABLE_i[$35 & 7]() | 0; //@line 17723
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 599; //@line 17726
   $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 17727
   HEAP32[$37 >> 2] = $2; //@line 17728
   $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 17729
   HEAP32[$38 >> 2] = $8; //@line 17730
   $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 17731
   HEAP32[$39 >> 2] = $15; //@line 17732
   $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 17733
   HEAP32[$40 >> 2] = $22; //@line 17734
   $41 = $ReallocAsyncCtx3 + 24 | 0; //@line 17735
   $42 = $41; //@line 17736
   $43 = $42; //@line 17737
   HEAP32[$43 >> 2] = $29; //@line 17738
   $44 = $42 + 4 | 0; //@line 17739
   $45 = $44; //@line 17740
   HEAP32[$45 >> 2] = $30; //@line 17741
   $46 = $ReallocAsyncCtx3 + 32 | 0; //@line 17742
   HEAP32[$46 >> 2] = $4; //@line 17743
   $47 = $ReallocAsyncCtx3 + 36 | 0; //@line 17744
   HEAP32[$47 >> 2] = $6; //@line 17745
   sp = STACKTOP; //@line 17746
   return;
  }
  HEAP32[___async_retval >> 2] = $36; //@line 17750
  ___async_unwind = 0; //@line 17751
  HEAP32[$ReallocAsyncCtx3 >> 2] = 599; //@line 17752
  $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 17753
  HEAP32[$37 >> 2] = $2; //@line 17754
  $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 17755
  HEAP32[$38 >> 2] = $8; //@line 17756
  $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 17757
  HEAP32[$39 >> 2] = $15; //@line 17758
  $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 17759
  HEAP32[$40 >> 2] = $22; //@line 17760
  $41 = $ReallocAsyncCtx3 + 24 | 0; //@line 17761
  $42 = $41; //@line 17762
  $43 = $42; //@line 17763
  HEAP32[$43 >> 2] = $29; //@line 17764
  $44 = $42 + 4 | 0; //@line 17765
  $45 = $44; //@line 17766
  HEAP32[$45 >> 2] = $30; //@line 17767
  $46 = $ReallocAsyncCtx3 + 32 | 0; //@line 17768
  HEAP32[$46 >> 2] = $4; //@line 17769
  $47 = $ReallocAsyncCtx3 + 36 | 0; //@line 17770
  HEAP32[$47 >> 2] = $6; //@line 17771
  sp = STACKTOP; //@line 17772
  return;
 }
}
function _mbedtls_cipher_free($0) {
 $0 = $0 | 0;
 var $101 = 0, $105 = 0, $109 = 0, $113 = 0, $2 = 0, $3 = 0, $42 = 0, $48 = 0, $53 = 0, $57 = 0, $61 = 0, $65 = 0, $69 = 0, $73 = 0, $77 = 0, $81 = 0, $85 = 0, $89 = 0, $93 = 0, $97 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1871
 if (!$0) {
  return;
 }
 $2 = $0 + 64 | 0; //@line 1876
 $3 = HEAP32[$2 >> 2] | 0; //@line 1877
 if ($3 | 0) {
  HEAP8[$3 >> 0] = 0; //@line 1881
  HEAP8[$3 + 1 >> 0] = 0; //@line 1883
  HEAP8[$3 + 2 >> 0] = 0; //@line 1885
  HEAP8[$3 + 3 >> 0] = 0; //@line 1887
  HEAP8[$3 + 4 >> 0] = 0; //@line 1889
  HEAP8[$3 + 5 >> 0] = 0; //@line 1891
  HEAP8[$3 + 6 >> 0] = 0; //@line 1893
  HEAP8[$3 + 7 >> 0] = 0; //@line 1895
  HEAP8[$3 + 8 >> 0] = 0; //@line 1897
  HEAP8[$3 + 9 >> 0] = 0; //@line 1899
  HEAP8[$3 + 10 >> 0] = 0; //@line 1901
  HEAP8[$3 + 11 >> 0] = 0; //@line 1903
  HEAP8[$3 + 12 >> 0] = 0; //@line 1905
  HEAP8[$3 + 13 >> 0] = 0; //@line 1907
  HEAP8[$3 + 14 >> 0] = 0; //@line 1909
  HEAP8[$3 + 15 >> 0] = 0; //@line 1911
  HEAP8[$3 + 16 >> 0] = 0; //@line 1913
  HEAP8[$3 + 17 >> 0] = 0; //@line 1915
  HEAP8[$3 + 18 >> 0] = 0; //@line 1917
  HEAP8[$3 + 19 >> 0] = 0; //@line 1919
  HEAP8[$3 + 20 >> 0] = 0; //@line 1921
  HEAP8[$3 + 21 >> 0] = 0; //@line 1923
  HEAP8[$3 + 22 >> 0] = 0; //@line 1925
  HEAP8[$3 + 23 >> 0] = 0; //@line 1927
  HEAP8[$3 + 24 >> 0] = 0; //@line 1929
  HEAP8[$3 + 25 >> 0] = 0; //@line 1931
  HEAP8[$3 + 26 >> 0] = 0; //@line 1933
  HEAP8[$3 + 27 >> 0] = 0; //@line 1935
  HEAP8[$3 + 28 >> 0] = 0; //@line 1937
  HEAP8[$3 + 29 >> 0] = 0; //@line 1939
  HEAP8[$3 + 30 >> 0] = 0; //@line 1941
  HEAP8[$3 + 31 >> 0] = 0; //@line 1943
  HEAP8[$3 + 32 >> 0] = 0; //@line 1945
  HEAP8[$3 + 33 >> 0] = 0; //@line 1947
  HEAP8[$3 + 34 >> 0] = 0; //@line 1949
  HEAP8[$3 + 35 >> 0] = 0; //@line 1950
  _free(HEAP32[$2 >> 2] | 0); //@line 1952
 }
 $42 = HEAP32[$0 + 60 >> 2] | 0; //@line 1955
 do {
  if ($42 | 0) {
   $48 = HEAP32[(HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] | 0) + 24 >> 2] | 0; //@line 1963
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 1964
   FUNCTION_TABLE_vi[$48 & 1023]($42); //@line 1965
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 570; //@line 1968
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 1970
    sp = STACKTOP; //@line 1971
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 1974
    break;
   }
  }
 } while (0);
 HEAP8[$0 >> 0] = 0; //@line 1980
 HEAP8[$0 + 1 >> 0] = 0; //@line 1982
 HEAP8[$0 + 2 >> 0] = 0; //@line 1984
 $53 = $0 + 4 | 0; //@line 1985
 HEAP8[$0 + 3 >> 0] = 0; //@line 1986
 HEAP8[$53 >> 0] = 0; //@line 1988
 HEAP8[$53 + 1 >> 0] = 0; //@line 1990
 HEAP8[$53 + 2 >> 0] = 0; //@line 1992
 $57 = $53 + 4 | 0; //@line 1993
 HEAP8[$53 + 3 >> 0] = 0; //@line 1994
 HEAP8[$57 >> 0] = 0; //@line 1996
 HEAP8[$57 + 1 >> 0] = 0; //@line 1998
 HEAP8[$57 + 2 >> 0] = 0; //@line 2000
 $61 = $53 + 8 | 0; //@line 2001
 HEAP8[$57 + 3 >> 0] = 0; //@line 2002
 HEAP8[$61 >> 0] = 0; //@line 2004
 HEAP8[$61 + 1 >> 0] = 0; //@line 2006
 HEAP8[$61 + 2 >> 0] = 0; //@line 2008
 $65 = $53 + 12 | 0; //@line 2009
 HEAP8[$61 + 3 >> 0] = 0; //@line 2010
 HEAP8[$65 >> 0] = 0; //@line 2012
 HEAP8[$65 + 1 >> 0] = 0; //@line 2014
 HEAP8[$65 + 2 >> 0] = 0; //@line 2016
 $69 = $53 + 16 | 0; //@line 2017
 HEAP8[$65 + 3 >> 0] = 0; //@line 2018
 HEAP8[$69 >> 0] = 0; //@line 2020
 HEAP8[$69 + 1 >> 0] = 0; //@line 2022
 HEAP8[$69 + 2 >> 0] = 0; //@line 2024
 $73 = $53 + 20 | 0; //@line 2025
 HEAP8[$69 + 3 >> 0] = 0; //@line 2026
 HEAP8[$73 >> 0] = 0; //@line 2028
 HEAP8[$73 + 1 >> 0] = 0; //@line 2030
 HEAP8[$73 + 2 >> 0] = 0; //@line 2032
 $77 = $53 + 24 | 0; //@line 2033
 HEAP8[$73 + 3 >> 0] = 0; //@line 2034
 HEAP8[$77 >> 0] = 0; //@line 2036
 HEAP8[$77 + 1 >> 0] = 0; //@line 2038
 HEAP8[$77 + 2 >> 0] = 0; //@line 2040
 $81 = $53 + 28 | 0; //@line 2041
 HEAP8[$77 + 3 >> 0] = 0; //@line 2042
 HEAP8[$81 >> 0] = 0; //@line 2044
 HEAP8[$81 + 1 >> 0] = 0; //@line 2046
 HEAP8[$81 + 2 >> 0] = 0; //@line 2048
 $85 = $53 + 32 | 0; //@line 2049
 HEAP8[$81 + 3 >> 0] = 0; //@line 2050
 HEAP8[$85 >> 0] = 0; //@line 2052
 HEAP8[$85 + 1 >> 0] = 0; //@line 2054
 HEAP8[$85 + 2 >> 0] = 0; //@line 2056
 $89 = $53 + 36 | 0; //@line 2057
 HEAP8[$85 + 3 >> 0] = 0; //@line 2058
 HEAP8[$89 >> 0] = 0; //@line 2060
 HEAP8[$89 + 1 >> 0] = 0; //@line 2062
 HEAP8[$89 + 2 >> 0] = 0; //@line 2064
 $93 = $53 + 40 | 0; //@line 2065
 HEAP8[$89 + 3 >> 0] = 0; //@line 2066
 HEAP8[$93 >> 0] = 0; //@line 2068
 HEAP8[$93 + 1 >> 0] = 0; //@line 2070
 HEAP8[$93 + 2 >> 0] = 0; //@line 2072
 $97 = $53 + 44 | 0; //@line 2073
 HEAP8[$93 + 3 >> 0] = 0; //@line 2074
 HEAP8[$97 >> 0] = 0; //@line 2076
 HEAP8[$97 + 1 >> 0] = 0; //@line 2078
 HEAP8[$97 + 2 >> 0] = 0; //@line 2080
 $101 = $53 + 48 | 0; //@line 2081
 HEAP8[$97 + 3 >> 0] = 0; //@line 2082
 HEAP8[$101 >> 0] = 0; //@line 2084
 HEAP8[$101 + 1 >> 0] = 0; //@line 2086
 HEAP8[$101 + 2 >> 0] = 0; //@line 2088
 $105 = $53 + 52 | 0; //@line 2089
 HEAP8[$101 + 3 >> 0] = 0; //@line 2090
 HEAP8[$105 >> 0] = 0; //@line 2092
 HEAP8[$105 + 1 >> 0] = 0; //@line 2094
 HEAP8[$105 + 2 >> 0] = 0; //@line 2096
 $109 = $53 + 56 | 0; //@line 2097
 HEAP8[$105 + 3 >> 0] = 0; //@line 2098
 HEAP8[$109 >> 0] = 0; //@line 2100
 HEAP8[$109 + 1 >> 0] = 0; //@line 2102
 HEAP8[$109 + 2 >> 0] = 0; //@line 2104
 $113 = $53 + 60 | 0; //@line 2105
 HEAP8[$109 + 3 >> 0] = 0; //@line 2106
 HEAP8[$113 >> 0] = 0; //@line 2108
 HEAP8[$113 + 1 >> 0] = 0; //@line 2110
 HEAP8[$113 + 2 >> 0] = 0; //@line 2112
 HEAP8[$113 + 3 >> 0] = 0; //@line 2113
 return;
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_200($0) {
 $0 = $0 | 0;
 var $$pre$i$i50 = 0, $10 = 0, $12 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 2041
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2043
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2045
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 2051
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 2053
 $$pre$i$i50 = HEAP32[HEAP32[$0 + 12 >> 2] >> 2] | 0; //@line 2054
 HEAP32[HEAP32[$0 + 16 >> 2] >> 2] = $$pre$i$i50; //@line 2056
 if ($$pre$i$i50 | 0) {
  $16 = HEAP32[$$pre$i$i50 + 8 >> 2] | 0; //@line 2060
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 2061
  FUNCTION_TABLE_vi[$16 & 1023]($4); //@line 2062
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 477; //@line 2065
   $17 = $ReallocAsyncCtx12 + 4 | 0; //@line 2066
   HEAP32[$17 >> 2] = $4; //@line 2067
   $18 = $ReallocAsyncCtx12 + 8 | 0; //@line 2068
   HEAP32[$18 >> 2] = $10; //@line 2069
   $19 = $ReallocAsyncCtx12 + 12 | 0; //@line 2070
   HEAP32[$19 >> 2] = $12; //@line 2071
   $20 = $ReallocAsyncCtx12 + 16 | 0; //@line 2072
   HEAP32[$20 >> 2] = $2; //@line 2073
   sp = STACKTOP; //@line 2074
   return;
  }
  ___async_unwind = 0; //@line 2077
  HEAP32[$ReallocAsyncCtx12 >> 2] = 477; //@line 2078
  $17 = $ReallocAsyncCtx12 + 4 | 0; //@line 2079
  HEAP32[$17 >> 2] = $4; //@line 2080
  $18 = $ReallocAsyncCtx12 + 8 | 0; //@line 2081
  HEAP32[$18 >> 2] = $10; //@line 2082
  $19 = $ReallocAsyncCtx12 + 12 | 0; //@line 2083
  HEAP32[$19 >> 2] = $12; //@line 2084
  $20 = $ReallocAsyncCtx12 + 16 | 0; //@line 2085
  HEAP32[$20 >> 2] = $2; //@line 2086
  sp = STACKTOP; //@line 2087
  return;
 }
 $21 = $10 + 12 | 0; //@line 2090
 HEAP32[$10 >> 2] = 478; //@line 2091
 HEAP32[$10 + 4 >> 2] = 0; //@line 2093
 HEAP32[$10 + 8 >> 2] = $12; //@line 2095
 HEAP32[$21 >> 2] = 836; //@line 2096
 $22 = $12 + 1260 | 0; //@line 2097
 if (($22 | 0) == ($10 | 0)) {
  $41 = HEAP32[211] | 0; //@line 2101
  $ReallocAsyncCtx15 = _emscripten_realloc_async_context(12) | 0; //@line 2102
  FUNCTION_TABLE_vi[$41 & 1023]($10); //@line 2103
  if (___async) {
   HEAP32[$ReallocAsyncCtx15 >> 2] = 481; //@line 2106
   $42 = $ReallocAsyncCtx15 + 4 | 0; //@line 2107
   HEAP32[$42 >> 2] = $10; //@line 2108
   $43 = $ReallocAsyncCtx15 + 8 | 0; //@line 2109
   HEAP32[$43 >> 2] = $2; //@line 2110
   sp = STACKTOP; //@line 2111
   return;
  }
  ___async_unwind = 0; //@line 2114
  HEAP32[$ReallocAsyncCtx15 >> 2] = 481; //@line 2115
  $42 = $ReallocAsyncCtx15 + 4 | 0; //@line 2116
  HEAP32[$42 >> 2] = $10; //@line 2117
  $43 = $ReallocAsyncCtx15 + 8 | 0; //@line 2118
  HEAP32[$43 >> 2] = $2; //@line 2119
  sp = STACKTOP; //@line 2120
  return;
 }
 $24 = $12 + 1272 | 0; //@line 2123
 $25 = HEAP32[$24 >> 2] | 0; //@line 2124
 if (!$25) {
  $35 = HEAP32[210] | 0; //@line 2128
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(20) | 0; //@line 2129
  FUNCTION_TABLE_vii[$35 & 31]($22, $10); //@line 2130
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 480; //@line 2133
   $36 = $ReallocAsyncCtx14 + 4 | 0; //@line 2134
   HEAP32[$36 >> 2] = $21; //@line 2135
   $37 = $ReallocAsyncCtx14 + 8 | 0; //@line 2136
   HEAP32[$37 >> 2] = $24; //@line 2137
   $38 = $ReallocAsyncCtx14 + 12 | 0; //@line 2138
   HEAP32[$38 >> 2] = $10; //@line 2139
   $39 = $ReallocAsyncCtx14 + 16 | 0; //@line 2140
   HEAP32[$39 >> 2] = $2; //@line 2141
   sp = STACKTOP; //@line 2142
   return;
  }
  ___async_unwind = 0; //@line 2145
  HEAP32[$ReallocAsyncCtx14 >> 2] = 480; //@line 2146
  $36 = $ReallocAsyncCtx14 + 4 | 0; //@line 2147
  HEAP32[$36 >> 2] = $21; //@line 2148
  $37 = $ReallocAsyncCtx14 + 8 | 0; //@line 2149
  HEAP32[$37 >> 2] = $24; //@line 2150
  $38 = $ReallocAsyncCtx14 + 12 | 0; //@line 2151
  HEAP32[$38 >> 2] = $10; //@line 2152
  $39 = $ReallocAsyncCtx14 + 16 | 0; //@line 2153
  HEAP32[$39 >> 2] = $2; //@line 2154
  sp = STACKTOP; //@line 2155
  return;
 } else {
  $28 = HEAP32[$25 + 8 >> 2] | 0; //@line 2159
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(24) | 0; //@line 2160
  FUNCTION_TABLE_vi[$28 & 1023]($22); //@line 2161
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 479; //@line 2164
   $29 = $ReallocAsyncCtx13 + 4 | 0; //@line 2165
   HEAP32[$29 >> 2] = $21; //@line 2166
   $30 = $ReallocAsyncCtx13 + 8 | 0; //@line 2167
   HEAP32[$30 >> 2] = $24; //@line 2168
   $31 = $ReallocAsyncCtx13 + 12 | 0; //@line 2169
   HEAP32[$31 >> 2] = $22; //@line 2170
   $32 = $ReallocAsyncCtx13 + 16 | 0; //@line 2171
   HEAP32[$32 >> 2] = $10; //@line 2172
   $33 = $ReallocAsyncCtx13 + 20 | 0; //@line 2173
   HEAP32[$33 >> 2] = $2; //@line 2174
   sp = STACKTOP; //@line 2175
   return;
  }
  ___async_unwind = 0; //@line 2178
  HEAP32[$ReallocAsyncCtx13 >> 2] = 479; //@line 2179
  $29 = $ReallocAsyncCtx13 + 4 | 0; //@line 2180
  HEAP32[$29 >> 2] = $21; //@line 2181
  $30 = $ReallocAsyncCtx13 + 8 | 0; //@line 2182
  HEAP32[$30 >> 2] = $24; //@line 2183
  $31 = $ReallocAsyncCtx13 + 12 | 0; //@line 2184
  HEAP32[$31 >> 2] = $22; //@line 2185
  $32 = $ReallocAsyncCtx13 + 16 | 0; //@line 2186
  HEAP32[$32 >> 2] = $10; //@line 2187
  $33 = $ReallocAsyncCtx13 + 20 | 0; //@line 2188
  HEAP32[$33 >> 2] = $2; //@line 2189
  sp = STACKTOP; //@line 2190
  return;
 }
}
function __ZN12LoRaWANStackC2Ev($0) {
 $0 = $0 | 0;
 var $$pre$i$i45 = 0, $$pre$i$i59 = 0, $$pre$phiZ2D = 0, $$pre106 = 0, $1 = 0, $13 = 0, $14 = 0, $15 = 0, $21 = 0, $22 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $33 = 0, $4 = 0, $40 = 0, $41 = 0, $48 = 0, $49 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 3730
 STACKTOP = STACKTOP + 16 | 0; //@line 3731
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 3731
 $1 = sp; //@line 3732
 __ZN18LoRaWANTimeHandlerC2Ev($0); //@line 3733
 __ZN7LoRaMacC2ER18LoRaWANTimeHandler($0 + 4 | 0, $0); //@line 3735
 __ZN12LoRaPHYEU868C2ER18LoRaWANTimeHandler($0 + 1336 | 0, $0); //@line 3737
 $4 = $0 + 2284 | 0; //@line 3738
 $5 = $0 + 1828 | 0; //@line 3739
 dest = $5 + 16 | 0; //@line 3741
 stop = dest + 88 | 0; //@line 3741
 do {
  HEAP32[dest >> 2] = 0; //@line 3741
  dest = dest + 4 | 0; //@line 3741
 } while ((dest | 0) < (stop | 0));
 HEAP8[$4 >> 0] = 1; //@line 3742
 HEAP8[$0 + 2286 >> 0] = 1; //@line 3745
 HEAP32[$0 + 2288 >> 2] = 0; //@line 3747
 HEAP8[$0 + 2285 >> 0] = 15; //@line 3748
 _memset($0 + 1932 | 0, 0, 352) | 0; //@line 3750
 HEAP32[$0 + 1812 >> 2] = 21; //@line 3753
 HEAP32[$0 + 1816 >> 2] = 0; //@line 3755
 HEAP32[$0 + 1820 >> 2] = $0; //@line 3757
 HEAP32[$0 + 1824 >> 2] = 788; //@line 3758
 HEAP32[$1 >> 2] = 22; //@line 3760
 HEAP32[$1 + 4 >> 2] = 0; //@line 3762
 HEAP32[$1 + 8 >> 2] = $0; //@line 3764
 HEAP32[$1 + 12 >> 2] = 800; //@line 3765
 $13 = $0 + 1840 | 0; //@line 3766
 HEAP32[$5 >> 2] = HEAP32[$1 >> 2]; //@line 3767
 HEAP32[$5 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 3767
 HEAP32[$5 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 3767
 HEAP32[$13 >> 2] = 800; //@line 3768
 $14 = $1 + 12 | 0; //@line 3769
 HEAP32[$1 >> 2] = 23; //@line 3770
 HEAP32[$1 + 4 >> 2] = 0; //@line 3772
 HEAP32[$1 + 8 >> 2] = $0; //@line 3774
 HEAP32[$14 >> 2] = 812; //@line 3775
 $15 = $0 + 1844 | 0; //@line 3776
 if (($15 | 0) == ($1 | 0)) {
  $21 = 812; //@line 3779
  label = 3; //@line 3780
 } else {
  __ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv($15, $1); //@line 3783
  $$pre$i$i45 = HEAP32[$14 >> 2] | 0; //@line 3784
  HEAP32[$0 + 1856 >> 2] = $$pre$i$i45; //@line 3786
  if ($$pre$i$i45 | 0) {
   $21 = $$pre$i$i45; //@line 3789
   label = 3; //@line 3790
  }
 }
 do {
  if ((label | 0) == 3) {
   $22 = HEAP32[$21 + 8 >> 2] | 0; //@line 3796
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 3797
   FUNCTION_TABLE_vi[$22 & 1023]($1); //@line 3798
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 115; //@line 3801
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 3803
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 3805
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 3807
    sp = STACKTOP; //@line 3808
    STACKTOP = sp; //@line 3809
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 3811
    break;
   }
  }
 } while (0);
 $26 = $1 + 12 | 0; //@line 3816
 HEAP32[$1 >> 2] = 24; //@line 3817
 HEAP32[$1 + 4 >> 2] = 0; //@line 3819
 HEAP32[$1 + 8 >> 2] = $0; //@line 3821
 HEAP32[$26 >> 2] = 824; //@line 3822
 $27 = $0 + 1860 | 0; //@line 3823
 if (($27 | 0) == ($1 | 0)) {
  $48 = 824; //@line 3826
 } else {
  $29 = $0 + 1872 | 0; //@line 3828
  $30 = HEAP32[$29 >> 2] | 0; //@line 3829
  if (!$30) {
   $$pre$phiZ2D = $27; //@line 3832
   $40 = 824; //@line 3832
  } else {
   $33 = HEAP32[$30 + 8 >> 2] | 0; //@line 3835
   $AsyncCtx2 = _emscripten_alloc_async_context(20, sp) | 0; //@line 3836
   FUNCTION_TABLE_vi[$33 & 1023]($27); //@line 3837
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 116; //@line 3840
    HEAP32[$AsyncCtx2 + 4 >> 2] = $26; //@line 3842
    HEAP32[$AsyncCtx2 + 8 >> 2] = $29; //@line 3844
    HEAP32[$AsyncCtx2 + 12 >> 2] = $27; //@line 3846
    HEAP32[$AsyncCtx2 + 16 >> 2] = $1; //@line 3848
    sp = STACKTOP; //@line 3849
    STACKTOP = sp; //@line 3850
    return;
   }
   _emscripten_free_async_context($AsyncCtx2 | 0); //@line 3852
   $$pre106 = HEAP32[$26 >> 2] | 0; //@line 3853
   if (!$$pre106) {
    HEAP32[$29 >> 2] = 0; //@line 3856
    STACKTOP = sp; //@line 3857
    return;
   } else {
    $$pre$phiZ2D = $27; //@line 3859
    $40 = $$pre106; //@line 3859
   }
  }
  $41 = HEAP32[$40 + 4 >> 2] | 0; //@line 3863
  $AsyncCtx5 = _emscripten_alloc_async_context(16, sp) | 0; //@line 3864
  FUNCTION_TABLE_vii[$41 & 31]($$pre$phiZ2D, $1); //@line 3865
  if (___async) {
   HEAP32[$AsyncCtx5 >> 2] = 117; //@line 3868
   HEAP32[$AsyncCtx5 + 4 >> 2] = $26; //@line 3870
   HEAP32[$AsyncCtx5 + 8 >> 2] = $29; //@line 3872
   HEAP32[$AsyncCtx5 + 12 >> 2] = $1; //@line 3874
   sp = STACKTOP; //@line 3875
   STACKTOP = sp; //@line 3876
   return;
  }
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 3878
  $$pre$i$i59 = HEAP32[$26 >> 2] | 0; //@line 3879
  HEAP32[$29 >> 2] = $$pre$i$i59; //@line 3881
  if (!$$pre$i$i59) {
   STACKTOP = sp; //@line 3884
   return;
  } else {
   $48 = $$pre$i$i59; //@line 3886
  }
 }
 $49 = HEAP32[$48 + 8 >> 2] | 0; //@line 3890
 $AsyncCtx8 = _emscripten_alloc_async_context(8, sp) | 0; //@line 3891
 FUNCTION_TABLE_vi[$49 & 1023]($1); //@line 3892
 if (___async) {
  HEAP32[$AsyncCtx8 >> 2] = 118; //@line 3895
  HEAP32[$AsyncCtx8 + 4 >> 2] = $1; //@line 3897
  sp = STACKTOP; //@line 3898
  STACKTOP = sp; //@line 3899
  return;
 }
 _emscripten_free_async_context($AsyncCtx8 | 0); //@line 3901
 STACKTOP = sp; //@line 3902
 return;
}
function _mbedtls_internal_aes_decrypt($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$in = 0, $$0136 = 0, $$0137 = 0, $$0138 = 0, $$0139 = 0, $$0140 = 0, $110 = 0, $130 = 0, $150 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $230 = 0, $250 = 0, $261 = 0, $268 = 0, $274 = 0, $276 = 0, $281 = 0, $288 = 0, $295 = 0, $301 = 0, $303 = 0, $308 = 0, $315 = 0, $322 = 0, $328 = 0, $329 = 0, $334 = 0, $341 = 0, $348 = 0, $354 = 0, $4 = 0;
 $4 = HEAP32[$0 + 4 >> 2] | 0; //@line 708
 $$0$in = HEAP32[$0 >> 2] >> 1; //@line 794
 $$0136 = $4 + 16 | 0; //@line 794
 $$0137 = ((HEAPU8[$1 + 1 >> 0] | 0) << 8 | (HEAPU8[$1 >> 0] | 0) | (HEAPU8[$1 + 2 >> 0] | 0) << 16 | (HEAPU8[$1 + 3 >> 0] | 0) << 24) ^ HEAP32[$4 >> 2]; //@line 794
 $$0138 = ((HEAPU8[$1 + 5 >> 0] | 0) << 8 | (HEAPU8[$1 + 4 >> 0] | 0) | (HEAPU8[$1 + 6 >> 0] | 0) << 16 | (HEAPU8[$1 + 7 >> 0] | 0) << 24) ^ HEAP32[$4 + 4 >> 2]; //@line 794
 $$0139 = ((HEAPU8[$1 + 13 >> 0] | 0) << 8 | (HEAPU8[$1 + 12 >> 0] | 0) | (HEAPU8[$1 + 14 >> 0] | 0) << 16 | (HEAPU8[$1 + 15 >> 0] | 0) << 24) ^ HEAP32[$4 + 12 >> 2]; //@line 794
 $$0140 = ((HEAPU8[$1 + 9 >> 0] | 0) << 8 | (HEAPU8[$1 + 8 >> 0] | 0) | (HEAPU8[$1 + 10 >> 0] | 0) << 16 | (HEAPU8[$1 + 11 >> 0] | 0) << 24) ^ HEAP32[$4 + 8 >> 2]; //@line 794
 while (1) {
  $110 = HEAP32[1288 + (($$0137 & 255) << 2) >> 2] ^ HEAP32[$$0136 >> 2] ^ HEAP32[2312 + (($$0139 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3336 + (($$0140 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4360 + ($$0138 >>> 24 << 2) >> 2]; //@line 816
  $130 = HEAP32[1288 + (($$0138 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 4 >> 2] ^ HEAP32[2312 + (($$0137 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3336 + (($$0139 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4360 + ($$0140 >>> 24 << 2) >> 2]; //@line 836
  $150 = HEAP32[1288 + (($$0140 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 8 >> 2] ^ HEAP32[2312 + (($$0138 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3336 + (($$0137 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4360 + ($$0139 >>> 24 << 2) >> 2]; //@line 856
  $170 = HEAP32[1288 + (($$0139 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 12 >> 2] ^ HEAP32[2312 + (($$0140 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3336 + (($$0138 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4360 + ($$0137 >>> 24 << 2) >> 2]; //@line 876
  $171 = $$0136 + 20 | 0; //@line 877
  $172 = HEAP32[$$0136 + 16 >> 2] | 0; //@line 878
  $173 = $110 & 255; //@line 879
  if (($$0$in | 0) <= 1) {
   break;
  }
  $230 = HEAP32[1288 + (($150 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 24 >> 2] ^ HEAP32[2312 + (($130 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3336 + (($110 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4360 + ($170 >>> 24 << 2) >> 2]; //@line 940
  $250 = HEAP32[1288 + (($170 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 28 >> 2] ^ HEAP32[2312 + (($150 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3336 + (($130 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4360 + ($110 >>> 24 << 2) >> 2]; //@line 960
  $$0$in = $$0$in + -1 | 0; //@line 961
  $$0136 = $$0136 + 32 | 0; //@line 961
  $$0137 = HEAP32[1288 + ($173 << 2) >> 2] ^ $172 ^ HEAP32[2312 + (($170 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3336 + (($150 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4360 + ($130 >>> 24 << 2) >> 2]; //@line 961
  $$0138 = HEAP32[1288 + (($130 & 255) << 2) >> 2] ^ HEAP32[$171 >> 2] ^ HEAP32[2312 + (($110 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3336 + (($170 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4360 + ($150 >>> 24 << 2) >> 2]; //@line 961
  $$0139 = $250; //@line 961
  $$0140 = $230; //@line 961
 }
 $261 = (HEAPU8[12926 + ($170 >>> 8 & 255) >> 0] | 0) << 8 ^ $172; //@line 973
 $268 = (HEAPU8[12926 + ($150 >>> 16 & 255) >> 0] | 0) << 16 ^ $172; //@line 980
 $274 = (HEAPU8[12926 + ($130 >>> 24) >> 0] | 0) << 24 ^ $172; //@line 986
 $276 = HEAP32[$171 >> 2] | 0; //@line 988
 $281 = $276 ^ (HEAPU8[12926 + ($130 & 255) >> 0] | 0); //@line 993
 $288 = (HEAPU8[12926 + ($110 >>> 8 & 255) >> 0] | 0) << 8 ^ $276; //@line 1000
 $295 = (HEAPU8[12926 + ($170 >>> 16 & 255) >> 0] | 0) << 16 ^ $276; //@line 1007
 $301 = (HEAPU8[12926 + ($150 >>> 24) >> 0] | 0) << 24 ^ $276; //@line 1013
 $303 = HEAP32[$$0136 + 24 >> 2] | 0; //@line 1015
 $308 = $303 ^ (HEAPU8[12926 + ($150 & 255) >> 0] | 0); //@line 1020
 $315 = (HEAPU8[12926 + ($130 >>> 8 & 255) >> 0] | 0) << 8 ^ $303; //@line 1027
 $322 = (HEAPU8[12926 + ($110 >>> 16 & 255) >> 0] | 0) << 16 ^ $303; //@line 1034
 $328 = (HEAPU8[12926 + ($170 >>> 24) >> 0] | 0) << 24 ^ $303; //@line 1040
 $329 = HEAP32[$$0136 + 28 >> 2] | 0; //@line 1041
 $334 = $329 ^ (HEAPU8[12926 + ($170 & 255) >> 0] | 0); //@line 1046
 $341 = (HEAPU8[12926 + ($150 >>> 8 & 255) >> 0] | 0) << 8 ^ $329; //@line 1053
 $348 = (HEAPU8[12926 + ($130 >>> 16 & 255) >> 0] | 0) << 16 ^ $329; //@line 1060
 $354 = (HEAPU8[12926 + ($110 >>> 24) >> 0] | 0) << 24 ^ $329; //@line 1066
 HEAP8[$2 >> 0] = $172 ^ (HEAPU8[12926 + $173 >> 0] | 0); //@line 1068
 HEAP8[$2 + 1 >> 0] = $261 >>> 8; //@line 1072
 HEAP8[$2 + 2 >> 0] = $268 >>> 16; //@line 1076
 HEAP8[$2 + 3 >> 0] = $274 >>> 24; //@line 1080
 HEAP8[$2 + 4 >> 0] = $281; //@line 1083
 HEAP8[$2 + 5 >> 0] = $288 >>> 8; //@line 1087
 HEAP8[$2 + 6 >> 0] = $295 >>> 16; //@line 1091
 HEAP8[$2 + 7 >> 0] = $301 >>> 24; //@line 1095
 HEAP8[$2 + 8 >> 0] = $308; //@line 1098
 HEAP8[$2 + 9 >> 0] = $315 >>> 8; //@line 1102
 HEAP8[$2 + 10 >> 0] = $322 >>> 16; //@line 1106
 HEAP8[$2 + 11 >> 0] = $328 >>> 24; //@line 1110
 HEAP8[$2 + 12 >> 0] = $334; //@line 1113
 HEAP8[$2 + 13 >> 0] = $341 >>> 8; //@line 1117
 HEAP8[$2 + 14 >> 0] = $348 >>> 16; //@line 1121
 HEAP8[$2 + 15 >> 0] = $354 >>> 24; //@line 1125
 return 0; //@line 1126
}
function __ZN16SX1276_LoRaRadioD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $13 = 0, $17 = 0, $21 = 0, $23 = 0, $27 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx13 = 0, $AsyncCtx16 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx3 = 0, $AsyncCtx31 = 0, $AsyncCtx35 = 0, $AsyncCtx39 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 849
 HEAP32[$0 >> 2] = 560; //@line 850
 $1 = $0 + 1176 | 0; //@line 851
 HEAP32[$1 >> 2] = 10096; //@line 852
 __ZN4mbed6Ticker6detachEv($1); //@line 853
 $3 = HEAP32[$0 + 1228 >> 2] | 0; //@line 855
 do {
  if ($3 | 0) {
   $7 = HEAP32[$3 + 8 >> 2] | 0; //@line 861
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 862
   FUNCTION_TABLE_vi[$7 & 1023]($0 + 1216 | 0); //@line 863
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 61; //@line 866
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 868
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 870
    sp = STACKTOP; //@line 871
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 874
    break;
   }
  }
 } while (0);
 $AsyncCtx16 = _emscripten_alloc_async_context(8, sp) | 0; //@line 879
 __ZN4mbed10TimerEventD2Ev($1); //@line 880
 if (___async) {
  HEAP32[$AsyncCtx16 >> 2] = 62; //@line 883
  HEAP32[$AsyncCtx16 + 4 >> 2] = $0; //@line 885
  sp = STACKTOP; //@line 886
  return;
 }
 _emscripten_free_async_context($AsyncCtx16 | 0); //@line 889
 $11 = $0 + 1112 | 0; //@line 890
 HEAP32[$11 >> 2] = 10096; //@line 891
 __ZN4mbed6Ticker6detachEv($11); //@line 892
 $13 = HEAP32[$0 + 1164 >> 2] | 0; //@line 894
 do {
  if ($13 | 0) {
   $17 = HEAP32[$13 + 8 >> 2] | 0; //@line 900
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 901
   FUNCTION_TABLE_vi[$17 & 1023]($0 + 1152 | 0); //@line 902
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 63; //@line 905
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 907
    HEAP32[$AsyncCtx3 + 8 >> 2] = $11; //@line 909
    sp = STACKTOP; //@line 910
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 913
    break;
   }
  }
 } while (0);
 $AsyncCtx13 = _emscripten_alloc_async_context(8, sp) | 0; //@line 918
 __ZN4mbed10TimerEventD2Ev($11); //@line 919
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 64; //@line 922
  HEAP32[$AsyncCtx13 + 4 >> 2] = $0; //@line 924
  sp = STACKTOP; //@line 925
  return;
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 928
 $21 = $0 + 1048 | 0; //@line 929
 HEAP32[$21 >> 2] = 10096; //@line 930
 __ZN4mbed6Ticker6detachEv($21); //@line 931
 $23 = HEAP32[$0 + 1100 >> 2] | 0; //@line 933
 do {
  if ($23 | 0) {
   $27 = HEAP32[$23 + 8 >> 2] | 0; //@line 939
   $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 940
   FUNCTION_TABLE_vi[$27 & 1023]($0 + 1088 | 0); //@line 941
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 65; //@line 944
    HEAP32[$AsyncCtx7 + 4 >> 2] = $21; //@line 946
    HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 948
    sp = STACKTOP; //@line 949
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 952
    break;
   }
  }
 } while (0);
 $AsyncCtx10 = _emscripten_alloc_async_context(8, sp) | 0; //@line 957
 __ZN4mbed10TimerEventD2Ev($21); //@line 958
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 66; //@line 961
  HEAP32[$AsyncCtx10 + 4 >> 2] = $0; //@line 963
  sp = STACKTOP; //@line 964
  return;
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 967
 $AsyncCtx39 = _emscripten_alloc_async_context(8, sp) | 0; //@line 969
 __ZN4mbed11InterruptInD2Ev($0 + 412 | 0); //@line 970
 if (___async) {
  HEAP32[$AsyncCtx39 >> 2] = 67; //@line 973
  HEAP32[$AsyncCtx39 + 4 >> 2] = $0; //@line 975
  sp = STACKTOP; //@line 976
  return;
 }
 _emscripten_free_async_context($AsyncCtx39 | 0); //@line 979
 $AsyncCtx35 = _emscripten_alloc_async_context(8, sp) | 0; //@line 981
 __ZN4mbed11InterruptInD2Ev($0 + 340 | 0); //@line 982
 if (___async) {
  HEAP32[$AsyncCtx35 >> 2] = 68; //@line 985
  HEAP32[$AsyncCtx35 + 4 >> 2] = $0; //@line 987
  sp = STACKTOP; //@line 988
  return;
 }
 _emscripten_free_async_context($AsyncCtx35 | 0); //@line 991
 $AsyncCtx31 = _emscripten_alloc_async_context(8, sp) | 0; //@line 993
 __ZN4mbed11InterruptInD2Ev($0 + 268 | 0); //@line 994
 if (___async) {
  HEAP32[$AsyncCtx31 >> 2] = 69; //@line 997
  HEAP32[$AsyncCtx31 + 4 >> 2] = $0; //@line 999
  sp = STACKTOP; //@line 1000
  return;
 }
 _emscripten_free_async_context($AsyncCtx31 | 0); //@line 1003
 $AsyncCtx27 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1005
 __ZN4mbed11InterruptInD2Ev($0 + 196 | 0); //@line 1006
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 70; //@line 1009
  HEAP32[$AsyncCtx27 + 4 >> 2] = $0; //@line 1011
  sp = STACKTOP; //@line 1012
  return;
 }
 _emscripten_free_async_context($AsyncCtx27 | 0); //@line 1015
 $AsyncCtx23 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1017
 __ZN4mbed11InterruptInD2Ev($0 + 124 | 0); //@line 1018
 if (___async) {
  HEAP32[$AsyncCtx23 >> 2] = 71; //@line 1021
  HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 1023
  sp = STACKTOP; //@line 1024
  return;
 }
 _emscripten_free_async_context($AsyncCtx23 | 0); //@line 1027
 $AsyncCtx19 = _emscripten_alloc_async_context(4, sp) | 0; //@line 1029
 __ZN4mbed11InterruptInD2Ev($0 + 52 | 0); //@line 1030
 if (___async) {
  HEAP32[$AsyncCtx19 >> 2] = 72; //@line 1033
  sp = STACKTOP; //@line 1034
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx19 | 0); //@line 1037
  return;
 }
}
function _mbedtls_internal_aes_encrypt($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$in = 0, $$0136 = 0, $$0137 = 0, $$0138 = 0, $$0139 = 0, $$0140 = 0, $110 = 0, $130 = 0, $150 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $230 = 0, $250 = 0, $261 = 0, $268 = 0, $274 = 0, $276 = 0, $281 = 0, $288 = 0, $295 = 0, $301 = 0, $303 = 0, $308 = 0, $315 = 0, $322 = 0, $328 = 0, $329 = 0, $334 = 0, $341 = 0, $348 = 0, $354 = 0, $4 = 0;
 $4 = HEAP32[$0 + 4 >> 2] | 0; //@line 261
 $$0$in = HEAP32[$0 >> 2] >> 1; //@line 347
 $$0136 = $4 + 16 | 0; //@line 347
 $$0137 = ((HEAPU8[$1 + 1 >> 0] | 0) << 8 | (HEAPU8[$1 >> 0] | 0) | (HEAPU8[$1 + 2 >> 0] | 0) << 16 | (HEAPU8[$1 + 3 >> 0] | 0) << 24) ^ HEAP32[$4 >> 2]; //@line 347
 $$0138 = ((HEAPU8[$1 + 5 >> 0] | 0) << 8 | (HEAPU8[$1 + 4 >> 0] | 0) | (HEAPU8[$1 + 6 >> 0] | 0) << 16 | (HEAPU8[$1 + 7 >> 0] | 0) << 24) ^ HEAP32[$4 + 4 >> 2]; //@line 347
 $$0139 = ((HEAPU8[$1 + 13 >> 0] | 0) << 8 | (HEAPU8[$1 + 12 >> 0] | 0) | (HEAPU8[$1 + 14 >> 0] | 0) << 16 | (HEAPU8[$1 + 15 >> 0] | 0) << 24) ^ HEAP32[$4 + 12 >> 2]; //@line 347
 $$0140 = ((HEAPU8[$1 + 9 >> 0] | 0) << 8 | (HEAPU8[$1 + 8 >> 0] | 0) | (HEAPU8[$1 + 10 >> 0] | 0) << 16 | (HEAPU8[$1 + 11 >> 0] | 0) << 24) ^ HEAP32[$4 + 8 >> 2]; //@line 347
 while (1) {
  $110 = HEAP32[5384 + (($$0137 & 255) << 2) >> 2] ^ HEAP32[$$0136 >> 2] ^ HEAP32[6408 + (($$0138 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7432 + (($$0140 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8456 + ($$0139 >>> 24 << 2) >> 2]; //@line 369
  $130 = HEAP32[5384 + (($$0138 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 4 >> 2] ^ HEAP32[6408 + (($$0140 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7432 + (($$0139 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8456 + ($$0137 >>> 24 << 2) >> 2]; //@line 389
  $150 = HEAP32[5384 + (($$0140 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 8 >> 2] ^ HEAP32[6408 + (($$0139 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7432 + (($$0137 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8456 + ($$0138 >>> 24 << 2) >> 2]; //@line 409
  $170 = HEAP32[5384 + (($$0139 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 12 >> 2] ^ HEAP32[6408 + (($$0137 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7432 + (($$0138 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8456 + ($$0140 >>> 24 << 2) >> 2]; //@line 429
  $171 = $$0136 + 20 | 0; //@line 430
  $172 = HEAP32[$$0136 + 16 >> 2] | 0; //@line 431
  $173 = $110 & 255; //@line 432
  if (($$0$in | 0) <= 1) {
   break;
  }
  $230 = HEAP32[5384 + (($150 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 24 >> 2] ^ HEAP32[6408 + (($170 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7432 + (($110 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8456 + ($130 >>> 24 << 2) >> 2]; //@line 493
  $250 = HEAP32[5384 + (($170 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 28 >> 2] ^ HEAP32[6408 + (($110 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7432 + (($130 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8456 + ($150 >>> 24 << 2) >> 2]; //@line 513
  $$0$in = $$0$in + -1 | 0; //@line 514
  $$0136 = $$0136 + 32 | 0; //@line 514
  $$0137 = HEAP32[5384 + ($173 << 2) >> 2] ^ $172 ^ HEAP32[6408 + (($130 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7432 + (($150 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8456 + ($170 >>> 24 << 2) >> 2]; //@line 514
  $$0138 = HEAP32[5384 + (($130 & 255) << 2) >> 2] ^ HEAP32[$171 >> 2] ^ HEAP32[6408 + (($150 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7432 + (($170 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8456 + ($110 >>> 24 << 2) >> 2]; //@line 514
  $$0139 = $250; //@line 514
  $$0140 = $230; //@line 514
 }
 $261 = (HEAPU8[12670 + ($130 >>> 8 & 255) >> 0] | 0) << 8 ^ $172; //@line 526
 $268 = (HEAPU8[12670 + ($150 >>> 16 & 255) >> 0] | 0) << 16 ^ $172; //@line 533
 $274 = (HEAPU8[12670 + ($170 >>> 24) >> 0] | 0) << 24 ^ $172; //@line 539
 $276 = HEAP32[$171 >> 2] | 0; //@line 541
 $281 = $276 ^ (HEAPU8[12670 + ($130 & 255) >> 0] | 0); //@line 546
 $288 = (HEAPU8[12670 + ($150 >>> 8 & 255) >> 0] | 0) << 8 ^ $276; //@line 553
 $295 = (HEAPU8[12670 + ($170 >>> 16 & 255) >> 0] | 0) << 16 ^ $276; //@line 560
 $301 = (HEAPU8[12670 + ($110 >>> 24) >> 0] | 0) << 24 ^ $276; //@line 566
 $303 = HEAP32[$$0136 + 24 >> 2] | 0; //@line 568
 $308 = $303 ^ (HEAPU8[12670 + ($150 & 255) >> 0] | 0); //@line 573
 $315 = (HEAPU8[12670 + ($170 >>> 8 & 255) >> 0] | 0) << 8 ^ $303; //@line 580
 $322 = (HEAPU8[12670 + ($110 >>> 16 & 255) >> 0] | 0) << 16 ^ $303; //@line 587
 $328 = (HEAPU8[12670 + ($130 >>> 24) >> 0] | 0) << 24 ^ $303; //@line 593
 $329 = HEAP32[$$0136 + 28 >> 2] | 0; //@line 594
 $334 = $329 ^ (HEAPU8[12670 + ($170 & 255) >> 0] | 0); //@line 599
 $341 = (HEAPU8[12670 + ($110 >>> 8 & 255) >> 0] | 0) << 8 ^ $329; //@line 606
 $348 = (HEAPU8[12670 + ($130 >>> 16 & 255) >> 0] | 0) << 16 ^ $329; //@line 613
 $354 = (HEAPU8[12670 + ($150 >>> 24) >> 0] | 0) << 24 ^ $329; //@line 619
 HEAP8[$2 >> 0] = $172 ^ (HEAPU8[12670 + $173 >> 0] | 0); //@line 621
 HEAP8[$2 + 1 >> 0] = $261 >>> 8; //@line 625
 HEAP8[$2 + 2 >> 0] = $268 >>> 16; //@line 629
 HEAP8[$2 + 3 >> 0] = $274 >>> 24; //@line 633
 HEAP8[$2 + 4 >> 0] = $281; //@line 636
 HEAP8[$2 + 5 >> 0] = $288 >>> 8; //@line 640
 HEAP8[$2 + 6 >> 0] = $295 >>> 16; //@line 644
 HEAP8[$2 + 7 >> 0] = $301 >>> 24; //@line 648
 HEAP8[$2 + 8 >> 0] = $308; //@line 651
 HEAP8[$2 + 9 >> 0] = $315 >>> 8; //@line 655
 HEAP8[$2 + 10 >> 0] = $322 >>> 16; //@line 659
 HEAP8[$2 + 11 >> 0] = $328 >>> 24; //@line 663
 HEAP8[$2 + 12 >> 0] = $334; //@line 666
 HEAP8[$2 + 13 >> 0] = $341 >>> 8; //@line 670
 HEAP8[$2 + 14 >> 0] = $348 >>> 16; //@line 674
 HEAP8[$2 + 15 >> 0] = $354 >>> 24; //@line 678
 return 0; //@line 679
}
function _mbedtls_aes_setkey_enc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0103117 = 0, $$0106 = 0, $$0112 = 0, $$1104111 = 0, $$1114 = 0, $$2105113 = 0, $$2116 = 0, $$3115 = 0, $$sink = 0, $107 = 0, $111 = 0, $115 = 0, $119 = 0, $127 = 0, $129 = 0, $158 = 0, $162 = 0, $166 = 0, $194 = 0, $198 = 0, $202 = 0, $3 = 0, $33 = 0, $35 = 0, $5 = 0, $6 = 0, $64 = 0, $68 = 0, $76 = 0, $78 = 0, $$0112$looptemp = 0, $$1114$looptemp = 0, $$2116$looptemp = 0;
 switch ($2 | 0) {
 case 128:
  {
   $$sink = 10; //@line 23845
   break;
  }
 case 192:
  {
   $$sink = 12; //@line 23849
   break;
  }
 case 256:
  {
   $$sink = 14; //@line 23853
   break;
  }
 default:
  {
   $$0106 = -32; //@line 23857
   return $$0106 | 0; //@line 23858
  }
 }
 HEAP32[$0 >> 2] = $$sink; //@line 23861
 $3 = $0 + 8 | 0; //@line 23862
 HEAP32[$0 + 4 >> 2] = $3; //@line 23864
 $5 = $2 >>> 5; //@line 23865
 $$0103117 = 0; //@line 23866
 do {
  $6 = $$0103117 << 2; //@line 23868
  HEAP32[$0 + 8 + ($$0103117 << 2) >> 2] = (HEAPU8[$1 + ($6 | 1) >> 0] | 0) << 8 | (HEAPU8[$1 + $6 >> 0] | 0) | (HEAPU8[$1 + ($6 | 2) >> 0] | 0) << 16 | (HEAPU8[$1 + ($6 | 3) >> 0] | 0) << 24; //@line 23891
  $$0103117 = $$0103117 + 1 | 0; //@line 23892
 } while (($$0103117 | 0) != ($5 | 0));
 switch (HEAP32[$0 >> 2] | 0) {
 case 10:
  {
   $$0112 = $3; //@line 23904
   $$1104111 = 0; //@line 23904
   $33 = HEAP32[$3 >> 2] | 0; //@line 23904
   do {
    $35 = HEAP32[$$0112 + 12 >> 2] | 0; //@line 23910
    $33 = HEAP32[1248 + ($$1104111 << 2) >> 2] ^ $33 ^ (HEAPU8[12670 + ($35 >>> 8 & 255) >> 0] | 0) ^ (HEAPU8[12670 + ($35 >>> 16 & 255) >> 0] | 0) << 8 ^ (HEAPU8[12670 + ($35 >>> 24) >> 0] | 0) << 16 ^ (HEAPU8[12670 + ($35 & 255) >> 0] | 0) << 24; //@line 23935
    $$0112$looptemp = $$0112;
    $$0112 = $$0112 + 16 | 0; //@line 23936
    HEAP32[$$0112 >> 2] = $33; //@line 23937
    $64 = $33 ^ HEAP32[$$0112$looptemp + 4 >> 2]; //@line 23940
    HEAP32[$$0112$looptemp + 20 >> 2] = $64; //@line 23942
    $68 = HEAP32[$$0112$looptemp + 8 >> 2] ^ $64; //@line 23945
    HEAP32[$$0112$looptemp + 24 >> 2] = $68; //@line 23947
    HEAP32[$$0112$looptemp + 28 >> 2] = $35 ^ $68; //@line 23950
    $$1104111 = $$1104111 + 1 | 0; //@line 23951
   } while (($$1104111 | 0) != 10);
   $$0106 = 0; //@line 23954
   return $$0106 | 0; //@line 23960
  }
 case 12:
  {
   $$1114 = $3; //@line 23965
   $$2105113 = 0; //@line 23965
   $76 = HEAP32[$3 >> 2] | 0; //@line 23965
   do {
    $78 = HEAP32[$$1114 + 20 >> 2] | 0; //@line 23971
    $76 = HEAP32[1248 + ($$2105113 << 2) >> 2] ^ $76 ^ (HEAPU8[12670 + ($78 >>> 8 & 255) >> 0] | 0) ^ (HEAPU8[12670 + ($78 >>> 16 & 255) >> 0] | 0) << 8 ^ (HEAPU8[12670 + ($78 >>> 24) >> 0] | 0) << 16 ^ (HEAPU8[12670 + ($78 & 255) >> 0] | 0) << 24; //@line 23996
    $$1114$looptemp = $$1114;
    $$1114 = $$1114 + 24 | 0; //@line 23997
    HEAP32[$$1114 >> 2] = $76; //@line 23998
    $107 = $76 ^ HEAP32[$$1114$looptemp + 4 >> 2]; //@line 24001
    HEAP32[$$1114$looptemp + 28 >> 2] = $107; //@line 24003
    $111 = HEAP32[$$1114$looptemp + 8 >> 2] ^ $107; //@line 24006
    HEAP32[$$1114$looptemp + 32 >> 2] = $111; //@line 24008
    $115 = HEAP32[$$1114$looptemp + 12 >> 2] ^ $111; //@line 24011
    HEAP32[$$1114$looptemp + 36 >> 2] = $115; //@line 24013
    $119 = HEAP32[$$1114$looptemp + 16 >> 2] ^ $115; //@line 24016
    HEAP32[$$1114$looptemp + 40 >> 2] = $119; //@line 24018
    HEAP32[$$1114$looptemp + 44 >> 2] = $78 ^ $119; //@line 24021
    $$2105113 = $$2105113 + 1 | 0; //@line 24022
   } while (($$2105113 | 0) != 8);
   $$0106 = 0; //@line 24025
   return $$0106 | 0; //@line 24031
  }
 case 14:
  {
   $$2116 = $3; //@line 24036
   $$3115 = 0; //@line 24036
   $127 = HEAP32[$3 >> 2] | 0; //@line 24036
   do {
    $129 = HEAP32[$$2116 + 28 >> 2] | 0; //@line 24042
    $127 = HEAP32[1248 + ($$3115 << 2) >> 2] ^ $127 ^ (HEAPU8[12670 + ($129 >>> 8 & 255) >> 0] | 0) ^ (HEAPU8[12670 + ($129 >>> 16 & 255) >> 0] | 0) << 8 ^ (HEAPU8[12670 + ($129 >>> 24) >> 0] | 0) << 16 ^ (HEAPU8[12670 + ($129 & 255) >> 0] | 0) << 24; //@line 24067
    $$2116$looptemp = $$2116;
    $$2116 = $$2116 + 32 | 0; //@line 24068
    HEAP32[$$2116 >> 2] = $127; //@line 24069
    $158 = $127 ^ HEAP32[$$2116$looptemp + 4 >> 2]; //@line 24072
    HEAP32[$$2116$looptemp + 36 >> 2] = $158; //@line 24074
    $162 = HEAP32[$$2116$looptemp + 8 >> 2] ^ $158; //@line 24077
    HEAP32[$$2116$looptemp + 40 >> 2] = $162; //@line 24079
    $166 = HEAP32[$$2116$looptemp + 12 >> 2] ^ $162; //@line 24082
    HEAP32[$$2116$looptemp + 44 >> 2] = $166; //@line 24084
    $194 = HEAP32[$$2116$looptemp + 16 >> 2] ^ (HEAPU8[12670 + ($166 & 255) >> 0] | 0) ^ (HEAPU8[12670 + ($166 >>> 8 & 255) >> 0] | 0) << 8 ^ (HEAPU8[12670 + ($166 >>> 16 & 255) >> 0] | 0) << 16 ^ (HEAPU8[12670 + ($166 >>> 24) >> 0] | 0) << 24; //@line 24111
    HEAP32[$$2116$looptemp + 48 >> 2] = $194; //@line 24113
    $198 = $194 ^ HEAP32[$$2116$looptemp + 20 >> 2]; //@line 24116
    HEAP32[$$2116$looptemp + 52 >> 2] = $198; //@line 24118
    $202 = HEAP32[$$2116$looptemp + 24 >> 2] ^ $198; //@line 24121
    HEAP32[$$2116$looptemp + 56 >> 2] = $202; //@line 24123
    HEAP32[$$2116$looptemp + 60 >> 2] = $129 ^ $202; //@line 24126
    $$3115 = $$3115 + 1 | 0; //@line 24127
   } while (($$3115 | 0) != 7);
   $$0106 = 0; //@line 24130
   return $$0106 | 0; //@line 24136
  }
 default:
  {
   $$0106 = 0; //@line 24140
   return $$0106 | 0; //@line 24141
  }
 }
 return 0; //@line 24144
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_289($0) {
 $0 = $0 | 0;
 var $$3$off0226 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $25 = 0, $31 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $45 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $55 = 0, $58 = 0, $6 = 0, $60 = 0, $61 = 0, $8 = 0, $ReallocAsyncCtx26 = 0, $ReallocAsyncCtx27 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8790
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8792
 $4 = HEAP8[$0 + 8 >> 0] & 1; //@line 8795
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8797
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 8799
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 8801
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 8803
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 8805
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 8807
 $18 = HEAP8[$0 + 36 >> 0] | 0; //@line 8809
 do {
  if (!(HEAP32[___async_retval >> 2] | 0)) {
   if (__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($16) | 0) {
    HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($14) | 0) >> 2] = 4; //@line 8818
    $25 = $6 + 944 | 0; //@line 8819
    HEAP8[$25 >> 0] = HEAP8[$25 >> 0] | 16; //@line 8822
    __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($16); //@line 8823
    if ($4) {
     $$3$off0226 = 6; //@line 8825
     break;
    } else {
     label = 7; //@line 8828
     break;
    }
   } else {
    if ($4) {
     $$3$off0226 = 6; //@line 8833
     break;
    } else {
     label = 7; //@line 8836
     break;
    }
   }
  } else {
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($2) | 0) + 4 >> 2] = 1; //@line 8843
   if ($4) {
    $$3$off0226 = 6; //@line 8845
   } else {
    label = 7; //@line 8847
   }
  }
 } while (0);
 if ((label | 0) == 7) {
  $31 = (__ZN11LoRaMacMcps16get_confirmationEv($2) | 0) + 10 | 0; //@line 8855
  if ($18 & 32) {
   HEAP8[$31 >> 0] = 1; //@line 8857
   HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($2) | 0) + 28 >> 0] = 1; //@line 8860
   $34 = HEAP32[$8 >> 2] | 0; //@line 8861
   $ReallocAsyncCtx27 = _emscripten_realloc_async_context(20) | 0; //@line 8863
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($34, $6 + 1076 | 0); //@line 8864
   if (___async) {
    HEAP32[$ReallocAsyncCtx27 >> 2] = 323; //@line 8867
    $36 = $ReallocAsyncCtx27 + 4 | 0; //@line 8868
    HEAP32[$36 >> 2] = $6; //@line 8869
    $37 = $ReallocAsyncCtx27 + 8 | 0; //@line 8870
    HEAP32[$37 >> 2] = $8; //@line 8871
    $38 = $ReallocAsyncCtx27 + 12 | 0; //@line 8872
    HEAP32[$38 >> 2] = $10; //@line 8873
    $39 = $ReallocAsyncCtx27 + 16 | 0; //@line 8874
    HEAP32[$39 >> 2] = $12; //@line 8875
    sp = STACKTOP; //@line 8876
    return;
   }
   ___async_unwind = 0; //@line 8879
   HEAP32[$ReallocAsyncCtx27 >> 2] = 323; //@line 8880
   $36 = $ReallocAsyncCtx27 + 4 | 0; //@line 8881
   HEAP32[$36 >> 2] = $6; //@line 8882
   $37 = $ReallocAsyncCtx27 + 8 | 0; //@line 8883
   HEAP32[$37 >> 2] = $8; //@line 8884
   $38 = $ReallocAsyncCtx27 + 12 | 0; //@line 8885
   HEAP32[$38 >> 2] = $10; //@line 8886
   $39 = $ReallocAsyncCtx27 + 16 | 0; //@line 8887
   HEAP32[$39 >> 2] = $12; //@line 8888
   sp = STACKTOP; //@line 8889
   return;
  }
  HEAP8[$31 >> 0] = 0; //@line 8892
  if ((HEAPU8[$6 + 895 >> 0] | 0) > (HEAPU8[$6 + 894 >> 0] | 0)) {
   $45 = HEAP32[$8 >> 2] | 0; //@line 8899
   $ReallocAsyncCtx26 = _emscripten_realloc_async_context(20) | 0; //@line 8901
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($45, $6 + 1076 | 0); //@line 8902
   if (___async) {
    HEAP32[$ReallocAsyncCtx26 >> 2] = 324; //@line 8905
    $47 = $ReallocAsyncCtx26 + 4 | 0; //@line 8906
    HEAP32[$47 >> 2] = $6; //@line 8907
    $48 = $ReallocAsyncCtx26 + 8 | 0; //@line 8908
    HEAP32[$48 >> 2] = $8; //@line 8909
    $49 = $ReallocAsyncCtx26 + 12 | 0; //@line 8910
    HEAP32[$49 >> 2] = $10; //@line 8911
    $50 = $ReallocAsyncCtx26 + 16 | 0; //@line 8912
    HEAP32[$50 >> 2] = $12; //@line 8913
    sp = STACKTOP; //@line 8914
    return;
   }
   ___async_unwind = 0; //@line 8917
   HEAP32[$ReallocAsyncCtx26 >> 2] = 324; //@line 8918
   $47 = $ReallocAsyncCtx26 + 4 | 0; //@line 8919
   HEAP32[$47 >> 2] = $6; //@line 8920
   $48 = $ReallocAsyncCtx26 + 8 | 0; //@line 8921
   HEAP32[$48 >> 2] = $8; //@line 8922
   $49 = $ReallocAsyncCtx26 + 12 | 0; //@line 8923
   HEAP32[$49 >> 2] = $10; //@line 8924
   $50 = $ReallocAsyncCtx26 + 16 | 0; //@line 8925
   HEAP32[$50 >> 2] = $12; //@line 8926
   sp = STACKTOP; //@line 8927
   return;
  } else {
   $$3$off0226 = 2; //@line 8930
  }
 }
 $51 = $6 + 944 | 0; //@line 8933
 HEAP8[$51 >> 0] = $$3$off0226 | HEAP8[$51 >> 0] & -7; //@line 8937
 $55 = $6 + 944 | 0; //@line 8938
 HEAP8[$55 >> 0] = HEAP8[$55 >> 0] | 32; //@line 8941
 $58 = HEAP32[$8 >> 2] | 0; //@line 8942
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 8944
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($58, $6 + 996 | 0, 1); //@line 8945
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 331; //@line 8948
  $60 = $ReallocAsyncCtx5 + 4 | 0; //@line 8949
  HEAP32[$60 >> 2] = $10; //@line 8950
  $61 = $ReallocAsyncCtx5 + 8 | 0; //@line 8951
  HEAP32[$61 >> 2] = $12; //@line 8952
  sp = STACKTOP; //@line 8953
  return;
 }
 ___async_unwind = 0; //@line 8956
 HEAP32[$ReallocAsyncCtx5 >> 2] = 331; //@line 8957
 $60 = $ReallocAsyncCtx5 + 4 | 0; //@line 8958
 HEAP32[$60 >> 2] = $10; //@line 8959
 $61 = $ReallocAsyncCtx5 + 8 | 0; //@line 8960
 HEAP32[$61 >> 2] = $12; //@line 8961
 sp = STACKTOP; //@line 8962
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_287($0) {
 $0 = $0 | 0;
 var $$3$off0226 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $25 = 0, $31 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $45 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $55 = 0, $58 = 0, $6 = 0, $60 = 0, $61 = 0, $8 = 0, $ReallocAsyncCtx26 = 0, $ReallocAsyncCtx27 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8415
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8417
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8419
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8421
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 8423
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 8425
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 8427
 $14 = HEAP8[$0 + 28 >> 0] & 1; //@line 8430
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 8432
 $18 = HEAP8[$0 + 36 >> 0] | 0; //@line 8434
 do {
  if (!(HEAP32[___async_retval >> 2] | 0)) {
   if (__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($12) | 0) {
    HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($10) | 0) >> 2] = 4; //@line 8443
    $25 = $2 + 944 | 0; //@line 8444
    HEAP8[$25 >> 0] = HEAP8[$25 >> 0] | 16; //@line 8447
    __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($12); //@line 8448
    if ($14) {
     $$3$off0226 = 6; //@line 8450
     break;
    } else {
     label = 7; //@line 8453
     break;
    }
   } else {
    if ($14) {
     $$3$off0226 = 6; //@line 8458
     break;
    } else {
     label = 7; //@line 8461
     break;
    }
   }
  } else {
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($16) | 0) + 4 >> 2] = 1; //@line 8468
   if ($14) {
    $$3$off0226 = 6; //@line 8470
   } else {
    label = 7; //@line 8472
   }
  }
 } while (0);
 if ((label | 0) == 7) {
  $31 = (__ZN11LoRaMacMcps16get_confirmationEv($16) | 0) + 10 | 0; //@line 8480
  if ($18 & 32) {
   HEAP8[$31 >> 0] = 1; //@line 8482
   HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($16) | 0) + 28 >> 0] = 1; //@line 8485
   $34 = HEAP32[$4 >> 2] | 0; //@line 8486
   $ReallocAsyncCtx27 = _emscripten_realloc_async_context(20) | 0; //@line 8488
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($34, $2 + 1076 | 0); //@line 8489
   if (___async) {
    HEAP32[$ReallocAsyncCtx27 >> 2] = 323; //@line 8492
    $36 = $ReallocAsyncCtx27 + 4 | 0; //@line 8493
    HEAP32[$36 >> 2] = $2; //@line 8494
    $37 = $ReallocAsyncCtx27 + 8 | 0; //@line 8495
    HEAP32[$37 >> 2] = $4; //@line 8496
    $38 = $ReallocAsyncCtx27 + 12 | 0; //@line 8497
    HEAP32[$38 >> 2] = $6; //@line 8498
    $39 = $ReallocAsyncCtx27 + 16 | 0; //@line 8499
    HEAP32[$39 >> 2] = $8; //@line 8500
    sp = STACKTOP; //@line 8501
    return;
   }
   ___async_unwind = 0; //@line 8504
   HEAP32[$ReallocAsyncCtx27 >> 2] = 323; //@line 8505
   $36 = $ReallocAsyncCtx27 + 4 | 0; //@line 8506
   HEAP32[$36 >> 2] = $2; //@line 8507
   $37 = $ReallocAsyncCtx27 + 8 | 0; //@line 8508
   HEAP32[$37 >> 2] = $4; //@line 8509
   $38 = $ReallocAsyncCtx27 + 12 | 0; //@line 8510
   HEAP32[$38 >> 2] = $6; //@line 8511
   $39 = $ReallocAsyncCtx27 + 16 | 0; //@line 8512
   HEAP32[$39 >> 2] = $8; //@line 8513
   sp = STACKTOP; //@line 8514
   return;
  }
  HEAP8[$31 >> 0] = 0; //@line 8517
  if ((HEAPU8[$2 + 895 >> 0] | 0) > (HEAPU8[$2 + 894 >> 0] | 0)) {
   $45 = HEAP32[$4 >> 2] | 0; //@line 8524
   $ReallocAsyncCtx26 = _emscripten_realloc_async_context(20) | 0; //@line 8526
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($45, $2 + 1076 | 0); //@line 8527
   if (___async) {
    HEAP32[$ReallocAsyncCtx26 >> 2] = 324; //@line 8530
    $47 = $ReallocAsyncCtx26 + 4 | 0; //@line 8531
    HEAP32[$47 >> 2] = $2; //@line 8532
    $48 = $ReallocAsyncCtx26 + 8 | 0; //@line 8533
    HEAP32[$48 >> 2] = $4; //@line 8534
    $49 = $ReallocAsyncCtx26 + 12 | 0; //@line 8535
    HEAP32[$49 >> 2] = $6; //@line 8536
    $50 = $ReallocAsyncCtx26 + 16 | 0; //@line 8537
    HEAP32[$50 >> 2] = $8; //@line 8538
    sp = STACKTOP; //@line 8539
    return;
   }
   ___async_unwind = 0; //@line 8542
   HEAP32[$ReallocAsyncCtx26 >> 2] = 324; //@line 8543
   $47 = $ReallocAsyncCtx26 + 4 | 0; //@line 8544
   HEAP32[$47 >> 2] = $2; //@line 8545
   $48 = $ReallocAsyncCtx26 + 8 | 0; //@line 8546
   HEAP32[$48 >> 2] = $4; //@line 8547
   $49 = $ReallocAsyncCtx26 + 12 | 0; //@line 8548
   HEAP32[$49 >> 2] = $6; //@line 8549
   $50 = $ReallocAsyncCtx26 + 16 | 0; //@line 8550
   HEAP32[$50 >> 2] = $8; //@line 8551
   sp = STACKTOP; //@line 8552
   return;
  } else {
   $$3$off0226 = 2; //@line 8555
  }
 }
 $51 = $2 + 944 | 0; //@line 8558
 HEAP8[$51 >> 0] = $$3$off0226 | HEAP8[$51 >> 0] & -7; //@line 8562
 $55 = $2 + 944 | 0; //@line 8563
 HEAP8[$55 >> 0] = HEAP8[$55 >> 0] | 32; //@line 8566
 $58 = HEAP32[$4 >> 2] | 0; //@line 8567
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 8569
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($58, $2 + 996 | 0, 1); //@line 8570
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 331; //@line 8573
  $60 = $ReallocAsyncCtx5 + 4 | 0; //@line 8574
  HEAP32[$60 >> 2] = $6; //@line 8575
  $61 = $ReallocAsyncCtx5 + 8 | 0; //@line 8576
  HEAP32[$61 >> 2] = $8; //@line 8577
  sp = STACKTOP; //@line 8578
  return;
 }
 ___async_unwind = 0; //@line 8581
 HEAP32[$ReallocAsyncCtx5 >> 2] = 331; //@line 8582
 $60 = $ReallocAsyncCtx5 + 4 | 0; //@line 8583
 HEAP32[$60 >> 2] = $6; //@line 8584
 $61 = $ReallocAsyncCtx5 + 8 | 0; //@line 8585
 HEAP32[$61 >> 2] = $8; //@line 8586
 sp = STACKTOP; //@line 8587
 return;
}
function __ZN7LoRaPHY16set_next_channelEP26channel_selection_params_sPhPjS3_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$01722$i = 0, $$01821$i = 0, $$023$i = 0, $$2$i = 0, $$220$i = 0, $$sink = 0, $10 = 0, $11 = 0, $15 = 0, $22 = 0, $23 = 0, $25 = 0, $37 = 0, $39 = 0, $40 = 0, $42 = 0, $44 = 0, $45 = 0, $47 = 0, $5 = 0, $55 = 0, $57 = 0, $7 = 0, $75 = 0, $78 = 0, $8 = 0, $9 = 0, $91 = 0, $92 = 0, $indvars$iv$i = 0, $indvars$iv$i27 = 0, $wide$trip$count$i = 0, $wide$trip$count$i25 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 21701
 STACKTOP = STACKTOP + 16 | 0; //@line 21702
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 21702
 $5 = sp; //@line 21703
 dest = $5; //@line 21704
 stop = dest + 16 | 0; //@line 21704
 do {
  HEAP8[dest >> 0] = 255; //@line 21704
  dest = dest + 1 | 0; //@line 21704
 } while ((dest | 0) < (stop | 0));
 $7 = HEAP32[$0 + 72 >> 2] | 0; //@line 21706
 $8 = $0 + 120 | 0; //@line 21707
 $9 = HEAP32[$8 >> 2] | 0; //@line 21708
 $10 = $0 + 128 | 0; //@line 21709
 $11 = HEAP8[$10 >> 0] | 0; //@line 21710
 if (!((__ZN7LoRaPHY19num_active_channelsEPthh(0, $9, 0, $11) | 0) << 24 >> 24)) {
  $15 = HEAP32[$0 + 124 >> 2] | 0; //@line 21715
  if ($11 << 24 >> 24 != 0 & (($9 | 0) != 0 & ($15 | 0) != 0)) {
   $wide$trip$count$i = $11 & 255; //@line 21722
   $indvars$iv$i = 0; //@line 21723
   do {
    HEAP16[$9 + ($indvars$iv$i << 1) >> 1] = HEAP16[$15 + ($indvars$iv$i << 1) >> 1] | 0; //@line 21728
    $indvars$iv$i = $indvars$iv$i + 1 | 0; //@line 21729
   } while (($indvars$iv$i | 0) != ($wide$trip$count$i | 0));
  }
 }
 $22 = HEAP32[$1 >> 2] | 0; //@line 21739
 $23 = $0 + 8 | 0; //@line 21740
 $25 = $1 + 4 | 0; //@line 21742
 if ($22 >>> 0 > (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$23 >> 2] | 0, HEAP32[$25 >> 2] | 0) | 0) >>> 0) {
  $78 = HEAP32[$1 >> 2] | 0; //@line 21747
  $$0 = 1; //@line 21752
  $$sink = $78 - (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$23 >> 2] | 0, HEAP32[$25 >> 2] | 0) | 0) | 0; //@line 21752
  HEAP32[$3 >> 2] = $$sink; //@line 21753
  STACKTOP = sp; //@line 21754
  return $$0 | 0; //@line 21754
 }
 HEAP32[$4 >> 2] = 0; //@line 21756
 $37 = __ZN7LoRaPHY19update_band_timeoffEbbP6band_th($0, (HEAP8[$1 + 9 >> 0] | 0) != 0, (HEAP8[$1 + 10 >> 0] | 0) != 0, $7, HEAP8[$0 + 76 >> 0] | 0) | 0; //@line 21765
 $39 = HEAP8[$1 + 8 >> 0] | 0; //@line 21767
 $40 = HEAP32[$8 >> 2] | 0; //@line 21768
 $42 = HEAP8[$0 + 20 >> 0] | 0; //@line 21770
 do {
  if ($42 << 24 >> 24) {
   $44 = $0 + 112 | 0; //@line 21774
   $45 = $0 + 72 | 0; //@line 21775
   $$01722$i = 0; //@line 21776
   $$01821$i = 0; //@line 21776
   $$023$i = 0; //@line 21776
   $47 = 0; //@line 21776
   while (1) {
    do {
     if (!(1 << ($47 & 15) & HEAPU16[$40 + ($47 >>> 4 << 1) >> 1])) {
      $$2$i = $$023$i; //@line 21788
      $$220$i = $$01821$i; //@line 21788
     } else {
      $55 = HEAP32[$44 >> 2] | 0; //@line 21790
      $57 = HEAP8[$55 + ($47 * 12 | 0) + 8 >> 0] | 0; //@line 21792
      if ($57 << 24 >> 24 >> 4 << 24 >> 24 < $39 << 24 >> 24 ? 1 : ($57 << 4 & 255) << 24 >> 24 >> 4 << 24 >> 24 > $39 << 24 >> 24) {
       $$2$i = $$023$i; //@line 21800
       $$220$i = $$01821$i; //@line 21800
      } else {
       if (!(HEAP32[(HEAP32[$45 >> 2] | 0) + ((HEAPU8[$55 + ($47 * 12 | 0) + 9 >> 0] | 0) * 24 | 0) + 12 >> 2] | 0)) {
        HEAP8[$5 + ($$023$i & 255) >> 0] = $$01722$i; //@line 21813
        $$2$i = $$023$i + 1 << 24 >> 24; //@line 21814
        $$220$i = $$01821$i; //@line 21814
        break;
       } else {
        $$2$i = $$023$i; //@line 21818
        $$220$i = $$01821$i + 1 << 24 >> 24; //@line 21818
        break;
       }
      }
     }
    } while (0);
    $75 = $$01722$i + 1 << 24 >> 24; //@line 21824
    if (($75 & 255) < ($42 & 255)) {
     $$01722$i = $75; //@line 21828
     $$01821$i = $$220$i; //@line 21828
     $$023$i = $$2$i; //@line 21828
     $47 = $75 & 255; //@line 21828
    } else {
     break;
    }
   }
   if (!($$2$i << 24 >> 24)) {
    if (!($$220$i << 24 >> 24)) {
     break;
    } else {
     $$0 = 1; //@line 21839
     $$sink = $37; //@line 21839
    }
    HEAP32[$3 >> 2] = $$sink; //@line 21841
    STACKTOP = sp; //@line 21842
    return $$0 | 0; //@line 21842
   } else {
    HEAP8[$2 >> 0] = HEAP8[$5 + ((_rand() | 0) % ($$2$i & 255 | 0) | 0) >> 0] | 0; //@line 21849
    $$0 = 1; //@line 21850
    $$sink = 0; //@line 21850
    HEAP32[$3 >> 2] = $$sink; //@line 21851
    STACKTOP = sp; //@line 21852
    return $$0 | 0; //@line 21852
   }
  }
 } while (0);
 $91 = HEAP32[$0 + 124 >> 2] | 0; //@line 21857
 $92 = HEAP8[$10 >> 0] | 0; //@line 21858
 if (!(($40 | 0) != 0 & ($91 | 0) != 0 & $92 << 24 >> 24 != 0)) {
  $$0 = 0; //@line 21865
  $$sink = 0; //@line 21865
  HEAP32[$3 >> 2] = $$sink; //@line 21866
  STACKTOP = sp; //@line 21867
  return $$0 | 0; //@line 21867
 }
 $wide$trip$count$i25 = $92 & 255; //@line 21869
 $indvars$iv$i27 = 0; //@line 21870
 do {
  HEAP16[$40 + ($indvars$iv$i27 << 1) >> 1] = HEAP16[$91 + ($indvars$iv$i27 << 1) >> 1] | 0; //@line 21875
  $indvars$iv$i27 = $indvars$iv$i27 + 1 | 0; //@line 21876
 } while (($indvars$iv$i27 | 0) != ($wide$trip$count$i25 | 0));
 $$0 = 0; //@line 21879
 $$sink = 0; //@line 21879
 HEAP32[$3 >> 2] = $$sink; //@line 21885
 STACKTOP = sp; //@line 21886
 return $$0 | 0; //@line 21886
}
function __ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_121($0) {
 $0 = $0 | 0;
 var $$05$i = 0, $$06$i = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $4 = 0, $41 = 0, $53 = 0, $56 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $73 = 0, $74 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 28930
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28932
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28934
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28936
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28938
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28940
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28942
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28944
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28946
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 28948
 $19 = $2 + 968 | 0; //@line 28949
 HEAP32[$19 >> 2] = HEAP32[$19 >> 2] & -17; //@line 28952
 if (HEAP8[$2 + 944 >> 0] & 8) {
  if (!(HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) >> 2] | 0)) {
   HEAP8[$2 + 372 >> 0] = 0; //@line 28965
   HEAP32[$2 + 956 >> 2] = 0; //@line 28967
   HEAP32[$2 + 960 >> 2] = 0; //@line 28969
   HEAP32[$2 + 964 >> 2] = 0; //@line 28971
   HEAP8[$2 + 380 >> 0] = 0; //@line 28973
   HEAP8[$2 + 894 >> 0] = 1; //@line 28975
   HEAP8[$2 + 895 >> 0] = 1; //@line 28977
   HEAP8[$2 + 377 >> 0] = 0; //@line 28979
   HEAP8[$2 + 1152 >> 0] = 0; //@line 28981
   HEAP16[$2 + 1154 >> 1] = 1; //@line 28983
   $41 = $2 + 4 | 0; //@line 28984
   __ZN14LoRaMacCommand20clear_command_bufferEv($41); //@line 28985
   __ZN14LoRaMacCommand19clear_repeat_bufferEv($41); //@line 28986
   __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($41); //@line 28987
   HEAP8[$2 + 371 >> 0] = 1; //@line 28989
   __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb(HEAP32[$2 >> 2] | 0, $2 + 360 | 0, 0); //@line 28991
   HEAP8[$2 + 373 >> 0] = 0; //@line 28993
   HEAP8[$2 + 374 >> 0] = 0; //@line 28995
   $$05$i = HEAP32[$2 + 1208 >> 2] | 0; //@line 28997
   if ($$05$i | 0) {
    $$06$i = $$05$i; //@line 29000
    do {
     HEAP32[$$06$i + 36 >> 2] = 0; //@line 29003
     $$06$i = HEAP32[$$06$i + 40 >> 2] | 0; //@line 29005
    } while (($$06$i | 0) != 0);
   }
   HEAP8[$2 + 378 >> 0] = 0; //@line 29015
   HEAP8[$2 + 379 >> 0] = 0; //@line 29017
   $53 = HEAP32[$2 >> 2] | 0; //@line 29018
   $56 = HEAP32[(HEAP32[$53 >> 2] | 0) + 52 >> 2] | 0; //@line 29021
   $61 = (HEAPU8[$2 + 897 >> 0] | 0) + 1 & 255; //@line 29026
   $ReallocAsyncCtx = _emscripten_realloc_async_context(40) | 0; //@line 29027
   $62 = FUNCTION_TABLE_iii[$56 & 31]($53, $61) | 0; //@line 29028
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 388; //@line 29031
    $63 = $ReallocAsyncCtx + 4 | 0; //@line 29032
    HEAP32[$63 >> 2] = $2; //@line 29033
    $64 = $ReallocAsyncCtx + 8 | 0; //@line 29034
    HEAP32[$64 >> 2] = $4; //@line 29035
    $65 = $ReallocAsyncCtx + 12 | 0; //@line 29036
    HEAP32[$65 >> 2] = $6; //@line 29037
    $66 = $ReallocAsyncCtx + 16 | 0; //@line 29038
    HEAP32[$66 >> 2] = $8; //@line 29039
    $67 = $ReallocAsyncCtx + 20 | 0; //@line 29040
    HEAP32[$67 >> 2] = $10; //@line 29041
    $68 = $ReallocAsyncCtx + 24 | 0; //@line 29042
    HEAP32[$68 >> 2] = $12; //@line 29043
    $69 = $ReallocAsyncCtx + 28 | 0; //@line 29044
    HEAP32[$69 >> 2] = $14; //@line 29045
    $70 = $ReallocAsyncCtx + 32 | 0; //@line 29046
    HEAP32[$70 >> 2] = $16; //@line 29047
    $71 = $ReallocAsyncCtx + 36 | 0; //@line 29048
    HEAP32[$71 >> 2] = $18; //@line 29049
    sp = STACKTOP; //@line 29050
    return;
   }
   HEAP8[___async_retval >> 0] = $62; //@line 29054
   ___async_unwind = 0; //@line 29055
   HEAP32[$ReallocAsyncCtx >> 2] = 388; //@line 29056
   $63 = $ReallocAsyncCtx + 4 | 0; //@line 29057
   HEAP32[$63 >> 2] = $2; //@line 29058
   $64 = $ReallocAsyncCtx + 8 | 0; //@line 29059
   HEAP32[$64 >> 2] = $4; //@line 29060
   $65 = $ReallocAsyncCtx + 12 | 0; //@line 29061
   HEAP32[$65 >> 2] = $6; //@line 29062
   $66 = $ReallocAsyncCtx + 16 | 0; //@line 29063
   HEAP32[$66 >> 2] = $8; //@line 29064
   $67 = $ReallocAsyncCtx + 20 | 0; //@line 29065
   HEAP32[$67 >> 2] = $10; //@line 29066
   $68 = $ReallocAsyncCtx + 24 | 0; //@line 29067
   HEAP32[$68 >> 2] = $12; //@line 29068
   $69 = $ReallocAsyncCtx + 28 | 0; //@line 29069
   HEAP32[$69 >> 2] = $14; //@line 29070
   $70 = $ReallocAsyncCtx + 32 | 0; //@line 29071
   HEAP32[$70 >> 2] = $16; //@line 29072
   $71 = $ReallocAsyncCtx + 36 | 0; //@line 29073
   HEAP32[$71 >> 2] = $18; //@line 29074
   sp = STACKTOP; //@line 29075
   return;
  }
 }
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 29079
 __ZN7LoRaMac11schedule_txEv($2) | 0; //@line 29080
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 390; //@line 29083
  $73 = $ReallocAsyncCtx4 + 4 | 0; //@line 29084
  HEAP32[$73 >> 2] = $6; //@line 29085
  $74 = $ReallocAsyncCtx4 + 8 | 0; //@line 29086
  HEAP32[$74 >> 2] = $4; //@line 29087
  sp = STACKTOP; //@line 29088
  return;
 }
 ___async_unwind = 0; //@line 29091
 HEAP32[$ReallocAsyncCtx4 >> 2] = 390; //@line 29092
 $73 = $ReallocAsyncCtx4 + 4 | 0; //@line 29093
 HEAP32[$73 >> 2] = $6; //@line 29094
 $74 = $ReallocAsyncCtx4 + 8 | 0; //@line 29095
 HEAP32[$74 >> 2] = $4; //@line 29096
 sp = STACKTOP; //@line 29097
 return;
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_198($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 1730
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1732
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1734
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1736
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 1740
 $11 = $10 + 12 | 0; //@line 1741
 HEAP32[$10 >> 2] = 474; //@line 1742
 HEAP32[$10 + 4 >> 2] = 0; //@line 1744
 HEAP32[$10 + 8 >> 2] = $6; //@line 1746
 HEAP32[$11 >> 2] = 836; //@line 1747
 $12 = $6 + 1228 | 0; //@line 1748
 if (($12 | 0) == ($10 | 0)) {
  $35 = HEAP32[211] | 0; //@line 1752
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 1753
  FUNCTION_TABLE_vi[$35 & 1023]($10); //@line 1754
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 477; //@line 1757
   $36 = $ReallocAsyncCtx12 + 4 | 0; //@line 1758
   HEAP32[$36 >> 2] = $10; //@line 1759
   $37 = $ReallocAsyncCtx12 + 8 | 0; //@line 1760
   HEAP32[$37 >> 2] = $4; //@line 1761
   $38 = $ReallocAsyncCtx12 + 12 | 0; //@line 1762
   HEAP32[$38 >> 2] = $6; //@line 1763
   $39 = $ReallocAsyncCtx12 + 16 | 0; //@line 1764
   HEAP32[$39 >> 2] = $2; //@line 1765
   sp = STACKTOP; //@line 1766
   return;
  }
  ___async_unwind = 0; //@line 1769
  HEAP32[$ReallocAsyncCtx12 >> 2] = 477; //@line 1770
  $36 = $ReallocAsyncCtx12 + 4 | 0; //@line 1771
  HEAP32[$36 >> 2] = $10; //@line 1772
  $37 = $ReallocAsyncCtx12 + 8 | 0; //@line 1773
  HEAP32[$37 >> 2] = $4; //@line 1774
  $38 = $ReallocAsyncCtx12 + 12 | 0; //@line 1775
  HEAP32[$38 >> 2] = $6; //@line 1776
  $39 = $ReallocAsyncCtx12 + 16 | 0; //@line 1777
  HEAP32[$39 >> 2] = $2; //@line 1778
  sp = STACKTOP; //@line 1779
  return;
 }
 $14 = $6 + 1240 | 0; //@line 1782
 $15 = HEAP32[$14 >> 2] | 0; //@line 1783
 if (!$15) {
  $27 = HEAP32[210] | 0; //@line 1787
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(28) | 0; //@line 1788
  FUNCTION_TABLE_vii[$27 & 31]($12, $10); //@line 1789
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 476; //@line 1792
   $28 = $ReallocAsyncCtx11 + 4 | 0; //@line 1793
   HEAP32[$28 >> 2] = $2; //@line 1794
   $29 = $ReallocAsyncCtx11 + 8 | 0; //@line 1795
   HEAP32[$29 >> 2] = $10; //@line 1796
   $30 = $ReallocAsyncCtx11 + 12 | 0; //@line 1797
   HEAP32[$30 >> 2] = $11; //@line 1798
   $31 = $ReallocAsyncCtx11 + 16 | 0; //@line 1799
   HEAP32[$31 >> 2] = $14; //@line 1800
   $32 = $ReallocAsyncCtx11 + 20 | 0; //@line 1801
   HEAP32[$32 >> 2] = $4; //@line 1802
   $33 = $ReallocAsyncCtx11 + 24 | 0; //@line 1803
   HEAP32[$33 >> 2] = $6; //@line 1804
   sp = STACKTOP; //@line 1805
   return;
  }
  ___async_unwind = 0; //@line 1808
  HEAP32[$ReallocAsyncCtx11 >> 2] = 476; //@line 1809
  $28 = $ReallocAsyncCtx11 + 4 | 0; //@line 1810
  HEAP32[$28 >> 2] = $2; //@line 1811
  $29 = $ReallocAsyncCtx11 + 8 | 0; //@line 1812
  HEAP32[$29 >> 2] = $10; //@line 1813
  $30 = $ReallocAsyncCtx11 + 12 | 0; //@line 1814
  HEAP32[$30 >> 2] = $11; //@line 1815
  $31 = $ReallocAsyncCtx11 + 16 | 0; //@line 1816
  HEAP32[$31 >> 2] = $14; //@line 1817
  $32 = $ReallocAsyncCtx11 + 20 | 0; //@line 1818
  HEAP32[$32 >> 2] = $4; //@line 1819
  $33 = $ReallocAsyncCtx11 + 24 | 0; //@line 1820
  HEAP32[$33 >> 2] = $6; //@line 1821
  sp = STACKTOP; //@line 1822
  return;
 } else {
  $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 1826
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(32) | 0; //@line 1827
  FUNCTION_TABLE_vi[$18 & 1023]($12); //@line 1828
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 475; //@line 1831
   $19 = $ReallocAsyncCtx10 + 4 | 0; //@line 1832
   HEAP32[$19 >> 2] = $2; //@line 1833
   $20 = $ReallocAsyncCtx10 + 8 | 0; //@line 1834
   HEAP32[$20 >> 2] = $10; //@line 1835
   $21 = $ReallocAsyncCtx10 + 12 | 0; //@line 1836
   HEAP32[$21 >> 2] = $14; //@line 1837
   $22 = $ReallocAsyncCtx10 + 16 | 0; //@line 1838
   HEAP32[$22 >> 2] = $12; //@line 1839
   $23 = $ReallocAsyncCtx10 + 20 | 0; //@line 1840
   HEAP32[$23 >> 2] = $11; //@line 1841
   $24 = $ReallocAsyncCtx10 + 24 | 0; //@line 1842
   HEAP32[$24 >> 2] = $4; //@line 1843
   $25 = $ReallocAsyncCtx10 + 28 | 0; //@line 1844
   HEAP32[$25 >> 2] = $6; //@line 1845
   sp = STACKTOP; //@line 1846
   return;
  }
  ___async_unwind = 0; //@line 1849
  HEAP32[$ReallocAsyncCtx10 >> 2] = 475; //@line 1850
  $19 = $ReallocAsyncCtx10 + 4 | 0; //@line 1851
  HEAP32[$19 >> 2] = $2; //@line 1852
  $20 = $ReallocAsyncCtx10 + 8 | 0; //@line 1853
  HEAP32[$20 >> 2] = $10; //@line 1854
  $21 = $ReallocAsyncCtx10 + 12 | 0; //@line 1855
  HEAP32[$21 >> 2] = $14; //@line 1856
  $22 = $ReallocAsyncCtx10 + 16 | 0; //@line 1857
  HEAP32[$22 >> 2] = $12; //@line 1858
  $23 = $ReallocAsyncCtx10 + 20 | 0; //@line 1859
  HEAP32[$23 >> 2] = $11; //@line 1860
  $24 = $ReallocAsyncCtx10 + 24 | 0; //@line 1861
  HEAP32[$24 >> 2] = $4; //@line 1862
  $25 = $ReallocAsyncCtx10 + 28 | 0; //@line 1863
  HEAP32[$25 >> 2] = $6; //@line 1864
  sp = STACKTOP; //@line 1865
  return;
 }
}
function __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$phi$trans$insert = 0, $$pre = 0, $$pre$i$i4 = 0, $$pre10 = 0, $12 = 0, $2 = 0, $20 = 0, $21 = 0, $25 = 0, $27 = 0, $29 = 0, $3 = 0, $30 = 0, $33 = 0, $4 = 0, $41 = 0, $49 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 1517
 STACKTOP = STACKTOP + 16 | 0; //@line 1518
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 1518
 $2 = sp; //@line 1519
 $3 = $1 + 12 | 0; //@line 1520
 $4 = HEAP32[$3 >> 2] | 0; //@line 1521
 if ($4 | 0) {
  $6 = $0 + 56 | 0; //@line 1524
  if (($6 | 0) != ($1 | 0)) {
   $8 = $0 + 68 | 0; //@line 1527
   $9 = HEAP32[$8 >> 2] | 0; //@line 1528
   do {
    if (!$9) {
     $20 = $4; //@line 1532
     label = 7; //@line 1533
    } else {
     $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 1536
     $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 1537
     FUNCTION_TABLE_vi[$12 & 1023]($6); //@line 1538
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 83; //@line 1541
      HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 1543
      HEAP32[$AsyncCtx + 8 >> 2] = $8; //@line 1545
      HEAP32[$AsyncCtx + 12 >> 2] = $6; //@line 1547
      HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 1549
      HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 1551
      sp = STACKTOP; //@line 1552
      STACKTOP = sp; //@line 1553
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 1555
      $$pre = HEAP32[$3 >> 2] | 0; //@line 1556
      if (!$$pre) {
       $25 = 0; //@line 1559
       break;
      } else {
       $20 = $$pre; //@line 1562
       label = 7; //@line 1563
       break;
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 7) {
     $21 = HEAP32[$20 + 4 >> 2] | 0; //@line 1572
     $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 1573
     FUNCTION_TABLE_vii[$21 & 31]($6, $1); //@line 1574
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 84; //@line 1577
      HEAP32[$AsyncCtx2 + 4 >> 2] = $3; //@line 1579
      HEAP32[$AsyncCtx2 + 8 >> 2] = $8; //@line 1581
      HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 1583
      sp = STACKTOP; //@line 1584
      STACKTOP = sp; //@line 1585
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx2 | 0); //@line 1587
      $25 = HEAP32[$3 >> 2] | 0; //@line 1589
      break;
     }
    }
   } while (0);
   HEAP32[$8 >> 2] = $25; //@line 1594
  }
  _gpio_irq_set($0 + 28 | 0, 2, 1); //@line 1597
  STACKTOP = sp; //@line 1598
  return;
 }
 HEAP32[$2 >> 2] = 0; //@line 1600
 HEAP32[$2 + 4 >> 2] = 0; //@line 1600
 HEAP32[$2 + 8 >> 2] = 0; //@line 1600
 HEAP32[$2 + 12 >> 2] = 0; //@line 1600
 $27 = $0 + 56 | 0; //@line 1601
 do {
  if (($27 | 0) != ($2 | 0)) {
   $29 = $0 + 68 | 0; //@line 1605
   $30 = HEAP32[$29 >> 2] | 0; //@line 1606
   if ($30 | 0) {
    $33 = HEAP32[$30 + 8 >> 2] | 0; //@line 1610
    $AsyncCtx5 = _emscripten_alloc_async_context(24, sp) | 0; //@line 1611
    FUNCTION_TABLE_vi[$33 & 1023]($27); //@line 1612
    if (___async) {
     HEAP32[$AsyncCtx5 >> 2] = 85; //@line 1615
     HEAP32[$AsyncCtx5 + 4 >> 2] = $2; //@line 1617
     HEAP32[$AsyncCtx5 + 8 >> 2] = $29; //@line 1619
     HEAP32[$AsyncCtx5 + 12 >> 2] = $27; //@line 1621
     HEAP32[$AsyncCtx5 + 16 >> 2] = $2; //@line 1623
     HEAP32[$AsyncCtx5 + 20 >> 2] = $0; //@line 1625
     sp = STACKTOP; //@line 1626
     STACKTOP = sp; //@line 1627
     return;
    }
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 1629
    $$phi$trans$insert = $2 + 12 | 0; //@line 1630
    $$pre10 = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 1631
    if ($$pre10 | 0) {
     $41 = HEAP32[$$pre10 + 4 >> 2] | 0; //@line 1635
     $AsyncCtx8 = _emscripten_alloc_async_context(20, sp) | 0; //@line 1636
     FUNCTION_TABLE_vii[$41 & 31]($27, $2); //@line 1637
     if (___async) {
      HEAP32[$AsyncCtx8 >> 2] = 86; //@line 1640
      HEAP32[$AsyncCtx8 + 4 >> 2] = $$phi$trans$insert; //@line 1642
      HEAP32[$AsyncCtx8 + 8 >> 2] = $29; //@line 1644
      HEAP32[$AsyncCtx8 + 12 >> 2] = $2; //@line 1646
      HEAP32[$AsyncCtx8 + 16 >> 2] = $0; //@line 1648
      sp = STACKTOP; //@line 1649
      STACKTOP = sp; //@line 1650
      return;
     }
     _emscripten_free_async_context($AsyncCtx8 | 0); //@line 1652
     $$pre$i$i4 = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 1653
     HEAP32[$29 >> 2] = $$pre$i$i4; //@line 1654
     if (!$$pre$i$i4) {
      break;
     }
     $49 = HEAP32[$$pre$i$i4 + 8 >> 2] | 0; //@line 1661
     $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 1662
     FUNCTION_TABLE_vi[$49 & 1023]($2); //@line 1663
     if (___async) {
      HEAP32[$AsyncCtx11 >> 2] = 87; //@line 1666
      HEAP32[$AsyncCtx11 + 4 >> 2] = $2; //@line 1668
      HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 1670
      sp = STACKTOP; //@line 1671
      STACKTOP = sp; //@line 1672
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx11 | 0); //@line 1674
      break;
     }
    }
   }
   HEAP32[$29 >> 2] = 0; //@line 1679
  }
 } while (0);
 _gpio_irq_set($0 + 28 | 0, 2, 0); //@line 1683
 STACKTOP = sp; //@line 1684
 return;
}
function __ZN12LoRaPHYEU868C2ER18LoRaWANTimeHandler($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $28 = 0, $3 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 __ZN7LoRaPHYC2ER18LoRaWANTimeHandler($0, $1); //@line 23383
 HEAP32[$0 >> 2] = 956; //@line 23384
 $2 = $0 + 328 | 0; //@line 23385
 HEAP32[$2 >> 2] = HEAP32[259]; //@line 23386
 HEAP32[$2 + 4 >> 2] = HEAP32[260]; //@line 23386
 HEAP32[$2 + 8 >> 2] = HEAP32[261]; //@line 23386
 HEAP32[$2 + 12 >> 2] = HEAP32[262]; //@line 23386
 HEAP32[$2 + 16 >> 2] = HEAP32[263]; //@line 23386
 HEAP32[$2 + 20 >> 2] = HEAP32[264]; //@line 23386
 $3 = $0 + 352 | 0; //@line 23387
 HEAP32[$3 >> 2] = HEAP32[265]; //@line 23388
 HEAP32[$3 + 4 >> 2] = HEAP32[266]; //@line 23388
 HEAP32[$3 + 8 >> 2] = HEAP32[267]; //@line 23388
 HEAP32[$3 + 12 >> 2] = HEAP32[268]; //@line 23388
 HEAP32[$3 + 16 >> 2] = HEAP32[269]; //@line 23388
 HEAP32[$3 + 20 >> 2] = HEAP32[270]; //@line 23388
 $4 = $0 + 376 | 0; //@line 23389
 HEAP32[$4 >> 2] = HEAP32[271]; //@line 23390
 HEAP32[$4 + 4 >> 2] = HEAP32[272]; //@line 23390
 HEAP32[$4 + 8 >> 2] = HEAP32[273]; //@line 23390
 HEAP32[$4 + 12 >> 2] = HEAP32[274]; //@line 23390
 HEAP32[$4 + 16 >> 2] = HEAP32[275]; //@line 23390
 HEAP32[$4 + 20 >> 2] = HEAP32[276]; //@line 23390
 $5 = $0 + 400 | 0; //@line 23391
 HEAP32[$5 >> 2] = HEAP32[277]; //@line 23392
 HEAP32[$5 + 4 >> 2] = HEAP32[278]; //@line 23392
 HEAP32[$5 + 8 >> 2] = HEAP32[279]; //@line 23392
 HEAP32[$5 + 12 >> 2] = HEAP32[280]; //@line 23392
 HEAP32[$5 + 16 >> 2] = HEAP32[281]; //@line 23392
 HEAP32[$5 + 20 >> 2] = HEAP32[282]; //@line 23392
 $6 = $0 + 424 | 0; //@line 23393
 HEAP32[$6 >> 2] = HEAP32[283]; //@line 23394
 HEAP32[$6 + 4 >> 2] = HEAP32[284]; //@line 23394
 HEAP32[$6 + 8 >> 2] = HEAP32[285]; //@line 23394
 HEAP32[$6 + 12 >> 2] = HEAP32[286]; //@line 23394
 HEAP32[$6 + 16 >> 2] = HEAP32[287]; //@line 23394
 HEAP32[$6 + 20 >> 2] = HEAP32[288]; //@line 23394
 $7 = $0 + 448 | 0; //@line 23395
 HEAP32[$7 >> 2] = HEAP32[289]; //@line 23396
 HEAP32[$7 + 4 >> 2] = HEAP32[290]; //@line 23396
 HEAP32[$7 + 8 >> 2] = HEAP32[291]; //@line 23396
 HEAP32[$7 + 12 >> 2] = HEAP32[292]; //@line 23396
 HEAP32[$7 + 16 >> 2] = HEAP32[293]; //@line 23396
 HEAP32[$7 + 20 >> 2] = HEAP32[294]; //@line 23396
 $8 = $0 + 136 | 0; //@line 23397
 HEAP32[$8 >> 2] = HEAP32[295]; //@line 23398
 HEAP32[$8 + 4 >> 2] = HEAP32[296]; //@line 23398
 HEAP32[$8 + 8 >> 2] = HEAP32[297]; //@line 23398
 $9 = $0 + 148 | 0; //@line 23399
 HEAP32[$9 >> 2] = HEAP32[298]; //@line 23400
 HEAP32[$9 + 4 >> 2] = HEAP32[299]; //@line 23400
 HEAP32[$9 + 8 >> 2] = HEAP32[300]; //@line 23400
 $10 = $0 + 160 | 0; //@line 23401
 HEAP32[$10 >> 2] = HEAP32[301]; //@line 23402
 HEAP32[$10 + 4 >> 2] = HEAP32[302]; //@line 23402
 HEAP32[$10 + 8 >> 2] = HEAP32[303]; //@line 23402
 $11 = $0 + 474 | 0; //@line 23403
 HEAP16[$11 >> 1] = 7; //@line 23404
 $12 = $0 + 472 | 0; //@line 23405
 __ZN7LoRaPHY17copy_channel_maskEPtS0_h($0, $12, $11, 1); //@line 23406
 HEAP32[$0 + 112 >> 2] = $8; //@line 23408
 HEAP8[$0 + 116 >> 0] = 16; //@line 23410
 HEAP32[$0 + 120 >> 2] = $12; //@line 23412
 HEAP32[$0 + 124 >> 2] = $11; //@line 23414
 HEAP8[$0 + 128 >> 0] = 1; //@line 23416
 HEAP32[$0 + 72 >> 2] = $2; //@line 23418
 HEAP8[$0 + 76 >> 0] = 6; //@line 23420
 HEAP32[$0 + 80 >> 2] = 1216; //@line 23422
 HEAP8[$0 + 84 >> 0] = 8; //@line 23424
 HEAP32[$0 + 88 >> 2] = 12523; //@line 23426
 HEAP8[$0 + 92 >> 0] = 8; //@line 23428
 HEAP32[$0 + 96 >> 2] = 12531; //@line 23430
 HEAP8[$0 + 100 >> 0] = 8; //@line 23432
 HEAP32[$0 + 104 >> 2] = 12539; //@line 23434
 HEAP8[$0 + 108 >> 0] = 8; //@line 23436
 $28 = $0 + 132 | 0; //@line 23437
 HEAP8[$28 >> 0] = HEAP8[$28 >> 0] & -4; //@line 23440
 $31 = $0 + 12 | 0; //@line 23441
 $32 = $0 + 18 | 0; //@line 23442
 HEAP32[$31 >> 2] = 16843009; //@line 23443
 HEAP16[$31 + 4 >> 1] = 257; //@line 23443
 HEAP8[$32 >> 0] = 3; //@line 23444
 HEAP8[$0 + 20 >> 0] = 16; //@line 23446
 HEAP8[$0 + 19 >> 0] = 5; //@line 23448
 HEAP8[$0 + 26 >> 0] = 0; //@line 23450
 HEAP8[$0 + 27 >> 0] = 7; //@line 23452
 HEAP8[$0 + 28 >> 0] = 0; //@line 23454
 HEAP8[$0 + 29 >> 0] = 7; //@line 23456
 HEAP8[$0 + 30 >> 0] = 0; //@line 23458
 HEAP8[$0 + 31 >> 0] = 5; //@line 23460
 HEAP8[$0 + 32 >> 0] = 0; //@line 23462
 HEAP8[$0 + 33 >> 0] = 5; //@line 23464
 HEAP8[$0 + 34 >> 0] = 0; //@line 23466
 HEAP8[$0 + 21 >> 0] = 7; //@line 23468
 HEAP8[$0 + 22 >> 0] = 0; //@line 23470
 HEAP8[$0 + 23 >> 0] = 0; //@line 23472
 HEAPF32[$0 + 56 >> 2] = 16.0; //@line 23474
 HEAPF32[$0 + 60 >> 2] = 2.1500000953674316; //@line 23476
 HEAP8[$0 + 24 >> 0] = 64; //@line 23478
 HEAP8[$0 + 25 >> 0] = 32; //@line 23480
 HEAP16[$0 + 36 >> 1] = 3e3; //@line 23482
 HEAP16[$0 + 38 >> 1] = 1e3; //@line 23484
 HEAP16[$0 + 40 >> 1] = 2e3; //@line 23486
 HEAP16[$0 + 46 >> 1] = 7; //@line 23488
 HEAP16[$0 + 42 >> 1] = 5e3; //@line 23490
 HEAP16[$0 + 44 >> 1] = 6e3; //@line 23492
 HEAP16[$0 + 48 >> 1] = 16384; //@line 23494
 HEAP16[$0 + 50 >> 1] = 2e3; //@line 23496
 HEAP16[$0 + 52 >> 1] = 1e3; //@line 23498
 HEAP8[$0 + 64 >> 0] = 0; //@line 23500
 HEAP32[$0 + 68 >> 2] = 869525e3; //@line 23502
 return;
}
function _ticker_read_us($0) {
 $0 = $0 | 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $14 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $28 = 0, $29 = 0, $3 = 0, $35 = 0, $36 = 0, $37 = 0, $46 = 0, $47 = 0, $48 = 0, $50 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $63 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $80 = 0, $81 = 0, $82 = 0, $84 = 0, $88 = 0, $89 = 0, $95 = 0, $96 = 0, $97 = 0, $99 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5600
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5601
 _initialize($0); //@line 5602
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 610; //@line 5605
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 5607
  sp = STACKTOP; //@line 5608
  tempRet0 = 0; //@line 5609
  return 0; //@line 5610
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5612
 $2 = $0 + 4 | 0; //@line 5613
 $3 = HEAP32[$2 >> 2] | 0; //@line 5614
 $6 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 5617
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 5618
 $7 = FUNCTION_TABLE_i[$6 & 7]() | 0; //@line 5619
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 611; //@line 5622
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 5624
  HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 5626
  sp = STACKTOP; //@line 5627
  tempRet0 = 0; //@line 5628
  return 0; //@line 5629
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 5631
 if (($7 | 0) == (HEAP32[(HEAP32[$2 >> 2] | 0) + 32 >> 2] | 0)) {
  $103 = HEAP32[$2 >> 2] | 0; //@line 5637
  $104 = $103 + 48 | 0; //@line 5638
  $105 = $104; //@line 5639
  $106 = $105; //@line 5640
  $107 = HEAP32[$106 >> 2] | 0; //@line 5641
  $108 = $105 + 4 | 0; //@line 5642
  $109 = $108; //@line 5643
  $110 = HEAP32[$109 >> 2] | 0; //@line 5644
  tempRet0 = $110; //@line 5645
  return $107 | 0; //@line 5646
 }
 $14 = $3 + 32 | 0; //@line 5648
 $19 = $7 - (HEAP32[$14 >> 2] | 0) & HEAP32[$3 + 12 >> 2]; //@line 5653
 HEAP32[$14 >> 2] = $7; //@line 5654
 $21 = HEAP32[$3 + 8 >> 2] | 0; //@line 5656
 L10 : do {
  if (($21 | 0) < 1e6) {
   switch ($21 | 0) {
   case 32768:
    {
     break;
    }
   default:
    {
     label = 9; //@line 5665
     break L10;
    }
   }
   $22 = ___muldi3($19 | 0, 0, 1e6, 0) | 0; //@line 5669
   $24 = _bitshift64Lshr($22 | 0, tempRet0 | 0, 15) | 0; //@line 5671
   $25 = tempRet0; //@line 5672
   $28 = $3 + 40 | 0; //@line 5675
   $29 = $28; //@line 5676
   $35 = _i64Add(HEAP32[$29 >> 2] | 0, HEAP32[$29 + 4 >> 2] | 0, $19 * 1e6 & 32704 | 0, 0) | 0; //@line 5682
   $36 = tempRet0; //@line 5683
   $37 = $28; //@line 5684
   HEAP32[$37 >> 2] = $35; //@line 5686
   HEAP32[$37 + 4 >> 2] = $36; //@line 5689
   if ($36 >>> 0 < 0 | ($36 | 0) == 0 & $35 >>> 0 < 32768) {
    $95 = $24; //@line 5696
    $96 = $25; //@line 5696
   } else {
    $46 = _i64Add($24 | 0, $25 | 0, 1, 0) | 0; //@line 5698
    $47 = tempRet0; //@line 5699
    $48 = _i64Add($35 | 0, $36 | 0, -32768, -1) | 0; //@line 5700
    $50 = $28; //@line 5702
    HEAP32[$50 >> 2] = $48; //@line 5704
    HEAP32[$50 + 4 >> 2] = tempRet0; //@line 5707
    $95 = $46; //@line 5708
    $96 = $47; //@line 5708
   }
  } else {
   switch ($21 | 0) {
   case 1e6:
    {
     $95 = $19; //@line 5713
     $96 = 0; //@line 5713
     break;
    }
   default:
    {
     label = 9; //@line 5717
    }
   }
  }
 } while (0);
 if ((label | 0) == 9) {
  $54 = ___muldi3($19 | 0, 0, 1e6, 0) | 0; //@line 5723
  $55 = tempRet0; //@line 5724
  $56 = ___udivdi3($54 | 0, $55 | 0, $21 | 0, 0) | 0; //@line 5725
  $57 = tempRet0; //@line 5726
  $58 = ___muldi3($56 | 0, $57 | 0, $21 | 0, 0) | 0; //@line 5727
  $60 = _i64Subtract($54 | 0, $55 | 0, $58 | 0, tempRet0 | 0) | 0; //@line 5729
  $62 = $3 + 40 | 0; //@line 5731
  $63 = $62; //@line 5732
  $69 = _i64Add($60 | 0, tempRet0 | 0, HEAP32[$63 >> 2] | 0, HEAP32[$63 + 4 >> 2] | 0) | 0; //@line 5738
  $70 = tempRet0; //@line 5739
  $71 = $62; //@line 5740
  HEAP32[$71 >> 2] = $69; //@line 5742
  HEAP32[$71 + 4 >> 2] = $70; //@line 5745
  if ($70 >>> 0 < 0 | ($70 | 0) == 0 & $69 >>> 0 < $21 >>> 0) {
   $95 = $56; //@line 5752
   $96 = $57; //@line 5752
  } else {
   $80 = _i64Add($56 | 0, $57 | 0, 1, 0) | 0; //@line 5754
   $81 = tempRet0; //@line 5755
   $82 = _i64Subtract($69 | 0, $70 | 0, $21 | 0, 0) | 0; //@line 5756
   $84 = $62; //@line 5758
   HEAP32[$84 >> 2] = $82; //@line 5760
   HEAP32[$84 + 4 >> 2] = tempRet0; //@line 5763
   $95 = $80; //@line 5764
   $96 = $81; //@line 5764
  }
 }
 $88 = $3 + 48 | 0; //@line 5767
 $89 = $88; //@line 5768
 $97 = _i64Add(HEAP32[$89 >> 2] | 0, HEAP32[$89 + 4 >> 2] | 0, $95 | 0, $96 | 0) | 0; //@line 5774
 $99 = $88; //@line 5776
 HEAP32[$99 >> 2] = $97; //@line 5778
 HEAP32[$99 + 4 >> 2] = tempRet0; //@line 5781
 $103 = HEAP32[$2 >> 2] | 0; //@line 5782
 $104 = $103 + 48 | 0; //@line 5783
 $105 = $104; //@line 5784
 $106 = $105; //@line 5785
 $107 = HEAP32[$106 >> 2] | 0; //@line 5786
 $108 = $105 + 4 | 0; //@line 5787
 $109 = $108; //@line 5788
 $110 = HEAP32[$109 >> 2] | 0; //@line 5789
 tempRet0 = $110; //@line 5790
 return $107 | 0; //@line 5791
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_427($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $$sroa$0$0$copyload = 0, $12 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $6 = 0, $7 = 0, $9 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 31330
 STACKTOP = STACKTOP + 16 | 0; //@line 31331
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 31331
 $$byval_copy = sp; //@line 31332
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31334
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31336
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31338
 $7 = $2 + 356 | 0; //@line 31339
 $9 = __ZN18LoRaWANTimeHandler16get_current_timeEv(HEAP32[$7 >> 2] | 0) | 0; //@line 31341
 $$sroa$0$0$copyload = HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) >> 2] | 0; //@line 31344
 $12 = $2 + 360 | 0; //@line 31345
 if ((HEAP32[$12 >> 2] | 0) == 2) {
  $24 = HEAP32[$2 + 1328 >> 2] | 0; //@line 31350
  HEAP32[$6 >> 2] = 273; //@line 31351
  HEAP32[$6 + 4 >> 2] = 0; //@line 31353
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(36) | 0; //@line 31354
  HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 31355
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 31355
  $25 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($24, $2, $$byval_copy) | 0; //@line 31356
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 274; //@line 31359
   $26 = $ReallocAsyncCtx7 + 4 | 0; //@line 31360
   HEAP32[$26 >> 2] = $12; //@line 31361
   $27 = $ReallocAsyncCtx7 + 8 | 0; //@line 31362
   HEAP32[$27 >> 2] = $7; //@line 31363
   $28 = $ReallocAsyncCtx7 + 12 | 0; //@line 31364
   HEAP32[$28 >> 2] = $2; //@line 31365
   $29 = $ReallocAsyncCtx7 + 16 | 0; //@line 31366
   HEAP32[$29 >> 2] = $$sroa$0$0$copyload; //@line 31367
   $30 = $ReallocAsyncCtx7 + 20 | 0; //@line 31368
   HEAP32[$30 >> 2] = $4; //@line 31369
   $31 = $ReallocAsyncCtx7 + 24 | 0; //@line 31370
   HEAP32[$31 >> 2] = $4; //@line 31371
   $32 = $ReallocAsyncCtx7 + 28 | 0; //@line 31372
   HEAP32[$32 >> 2] = $9; //@line 31373
   $33 = $ReallocAsyncCtx7 + 32 | 0; //@line 31374
   HEAP32[$33 >> 2] = $6; //@line 31375
   sp = STACKTOP; //@line 31376
   STACKTOP = sp; //@line 31377
   return;
  }
  HEAP32[___async_retval >> 2] = $25; //@line 31380
  ___async_unwind = 0; //@line 31381
  HEAP32[$ReallocAsyncCtx7 >> 2] = 274; //@line 31382
  $26 = $ReallocAsyncCtx7 + 4 | 0; //@line 31383
  HEAP32[$26 >> 2] = $12; //@line 31384
  $27 = $ReallocAsyncCtx7 + 8 | 0; //@line 31385
  HEAP32[$27 >> 2] = $7; //@line 31386
  $28 = $ReallocAsyncCtx7 + 12 | 0; //@line 31387
  HEAP32[$28 >> 2] = $2; //@line 31388
  $29 = $ReallocAsyncCtx7 + 16 | 0; //@line 31389
  HEAP32[$29 >> 2] = $$sroa$0$0$copyload; //@line 31390
  $30 = $ReallocAsyncCtx7 + 20 | 0; //@line 31391
  HEAP32[$30 >> 2] = $4; //@line 31392
  $31 = $ReallocAsyncCtx7 + 24 | 0; //@line 31393
  HEAP32[$31 >> 2] = $4; //@line 31394
  $32 = $ReallocAsyncCtx7 + 28 | 0; //@line 31395
  HEAP32[$32 >> 2] = $9; //@line 31396
  $33 = $ReallocAsyncCtx7 + 32 | 0; //@line 31397
  HEAP32[$33 >> 2] = $6; //@line 31398
  sp = STACKTOP; //@line 31399
  STACKTOP = sp; //@line 31400
  return;
 } else {
  $15 = HEAP32[$2 >> 2] | 0; //@line 31402
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(32) | 0; //@line 31403
  __ZN7LoRaPHY18put_radio_to_sleepEv($15); //@line 31404
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 272; //@line 31407
   $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 31408
   HEAP32[$16 >> 2] = $12; //@line 31409
   $17 = $ReallocAsyncCtx6 + 8 | 0; //@line 31410
   HEAP32[$17 >> 2] = $7; //@line 31411
   $18 = $ReallocAsyncCtx6 + 12 | 0; //@line 31412
   HEAP32[$18 >> 2] = $2; //@line 31413
   $19 = $ReallocAsyncCtx6 + 16 | 0; //@line 31414
   HEAP32[$19 >> 2] = $$sroa$0$0$copyload; //@line 31415
   $20 = $ReallocAsyncCtx6 + 20 | 0; //@line 31416
   HEAP32[$20 >> 2] = $4; //@line 31417
   $21 = $ReallocAsyncCtx6 + 24 | 0; //@line 31418
   HEAP32[$21 >> 2] = $4; //@line 31419
   $22 = $ReallocAsyncCtx6 + 28 | 0; //@line 31420
   HEAP32[$22 >> 2] = $9; //@line 31421
   sp = STACKTOP; //@line 31422
   STACKTOP = sp; //@line 31423
   return;
  }
  ___async_unwind = 0; //@line 31425
  HEAP32[$ReallocAsyncCtx6 >> 2] = 272; //@line 31426
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 31427
  HEAP32[$16 >> 2] = $12; //@line 31428
  $17 = $ReallocAsyncCtx6 + 8 | 0; //@line 31429
  HEAP32[$17 >> 2] = $7; //@line 31430
  $18 = $ReallocAsyncCtx6 + 12 | 0; //@line 31431
  HEAP32[$18 >> 2] = $2; //@line 31432
  $19 = $ReallocAsyncCtx6 + 16 | 0; //@line 31433
  HEAP32[$19 >> 2] = $$sroa$0$0$copyload; //@line 31434
  $20 = $ReallocAsyncCtx6 + 20 | 0; //@line 31435
  HEAP32[$20 >> 2] = $4; //@line 31436
  $21 = $ReallocAsyncCtx6 + 24 | 0; //@line 31437
  HEAP32[$21 >> 2] = $4; //@line 31438
  $22 = $ReallocAsyncCtx6 + 28 | 0; //@line 31439
  HEAP32[$22 >> 2] = $9; //@line 31440
  sp = STACKTOP; //@line 31441
  STACKTOP = sp; //@line 31442
  return;
 }
}
function __Z15encrypt_payloadPKhtS0_jhjPh($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$044$lcssa$off0 = 0, $$04458 = 0, $$045$lcssa = 0, $$04557 = 0, $$048$lcssa = 0, $$1 = 0, $101 = 0, $107 = 0, $113 = 0, $119 = 0, $125 = 0, $126 = 0, $127 = 0, $134 = 0, $136 = 0, $27 = 0, $29 = 0, $35 = 0, $41 = 0, $47 = 0, $53 = 0, $59 = 0, $65 = 0, $7 = 0, $71 = 0, $77 = 0, $83 = 0, $89 = 0, $95 = 0, $indvars$iv = 0, $wide$trip$count = 0, label = 0;
 _mbedtls_aes_init(21312); //@line 18777
 $7 = _mbedtls_aes_setkey_enc(21312, $2, 128) | 0; //@line 18778
 if ($7 | 0) {
  $$1 = $7; //@line 18781
  _mbedtls_aes_free(21312); //@line 18782
  return $$1 | 0; //@line 18783
 }
 HEAP8[12422] = $4; //@line 18785
 HEAP8[12423] = $3; //@line 18787
 HEAP8[12424] = $3 >>> 8; //@line 18790
 HEAP8[12425] = $3 >>> 16; //@line 18793
 HEAP8[12426] = $3 >>> 24; //@line 18796
 HEAP8[12427] = $5; //@line 18798
 HEAP8[12428] = $5 >>> 8; //@line 18801
 HEAP8[12429] = $5 >>> 16; //@line 18804
 HEAP8[12430] = $5 >>> 24; //@line 18807
 do {
  if (($1 & 65535) > 15) {
   $$04458 = 1; //@line 18812
   $$04557 = 0; //@line 18812
   $126 = $1 & 65535; //@line 18812
   while (1) {
    HEAP8[12432] = $$04458; //@line 18815
    $$04458 = $$04458 + 1 << 16 >> 16; //@line 18816
    $27 = _mbedtls_aes_crypt_ecb(21312, 1, 12417, 22568) | 0; //@line 18817
    if ($27 | 0) {
     $$1 = $27; //@line 18820
     label = 11; //@line 18821
     break;
    }
    $29 = $$04557 & 255; //@line 18824
    HEAP8[$6 + $29 >> 0] = HEAP8[22568] ^ HEAP8[$0 + $29 >> 0]; //@line 18830
    $35 = $29 + 1 | 0; //@line 18831
    HEAP8[$6 + $35 >> 0] = HEAP8[22569] ^ HEAP8[$0 + $35 >> 0]; //@line 18837
    $41 = $29 + 2 | 0; //@line 18838
    HEAP8[$6 + $41 >> 0] = HEAP8[22570] ^ HEAP8[$0 + $41 >> 0]; //@line 18844
    $47 = $29 + 3 | 0; //@line 18845
    HEAP8[$6 + $47 >> 0] = HEAP8[22571] ^ HEAP8[$0 + $47 >> 0]; //@line 18851
    $53 = $29 + 4 | 0; //@line 18852
    HEAP8[$6 + $53 >> 0] = HEAP8[22572] ^ HEAP8[$0 + $53 >> 0]; //@line 18858
    $59 = $29 + 5 | 0; //@line 18859
    HEAP8[$6 + $59 >> 0] = HEAP8[22573] ^ HEAP8[$0 + $59 >> 0]; //@line 18865
    $65 = $29 + 6 | 0; //@line 18866
    HEAP8[$6 + $65 >> 0] = HEAP8[22574] ^ HEAP8[$0 + $65 >> 0]; //@line 18872
    $71 = $29 + 7 | 0; //@line 18873
    HEAP8[$6 + $71 >> 0] = HEAP8[22575] ^ HEAP8[$0 + $71 >> 0]; //@line 18879
    $77 = $29 + 8 | 0; //@line 18880
    HEAP8[$6 + $77 >> 0] = HEAP8[22576] ^ HEAP8[$0 + $77 >> 0]; //@line 18886
    $83 = $29 + 9 | 0; //@line 18887
    HEAP8[$6 + $83 >> 0] = HEAP8[22577] ^ HEAP8[$0 + $83 >> 0]; //@line 18893
    $89 = $29 + 10 | 0; //@line 18894
    HEAP8[$6 + $89 >> 0] = HEAP8[22578] ^ HEAP8[$0 + $89 >> 0]; //@line 18900
    $95 = $29 + 11 | 0; //@line 18901
    HEAP8[$6 + $95 >> 0] = HEAP8[22579] ^ HEAP8[$0 + $95 >> 0]; //@line 18907
    $101 = $29 + 12 | 0; //@line 18908
    HEAP8[$6 + $101 >> 0] = HEAP8[22580] ^ HEAP8[$0 + $101 >> 0]; //@line 18914
    $107 = $29 + 13 | 0; //@line 18915
    HEAP8[$6 + $107 >> 0] = HEAP8[22581] ^ HEAP8[$0 + $107 >> 0]; //@line 18921
    $113 = $29 + 14 | 0; //@line 18922
    HEAP8[$6 + $113 >> 0] = HEAP8[22582] ^ HEAP8[$0 + $113 >> 0]; //@line 18928
    $119 = $29 + 15 | 0; //@line 18929
    HEAP8[$6 + $119 >> 0] = HEAP8[22583] ^ HEAP8[$0 + $119 >> 0]; //@line 18935
    $125 = $126 + 65520 | 0; //@line 18936
    $127 = $125 & 65535; //@line 18937
    if (($127 & 65535) <= 15) {
     label = 6; //@line 18945
     break;
    } else {
     $$04557 = $29 + 16 & 255; //@line 18943
     $126 = $125 & 65535; //@line 18943
    }
   }
   if ((label | 0) == 6) {
    $$044$lcssa$off0 = $$04458 & 255; //@line 18953
    $$045$lcssa = $$04557 + 16 & 255; //@line 18953
    $$048$lcssa = $127; //@line 18953
    break;
   } else if ((label | 0) == 11) {
    _mbedtls_aes_free(21312); //@line 18957
    return $$1 | 0; //@line 18958
   }
  } else {
   $$044$lcssa$off0 = 1; //@line 18961
   $$045$lcssa = 0; //@line 18961
   $$048$lcssa = $1; //@line 18961
  }
 } while (0);
 if (!($$048$lcssa << 16 >> 16)) {
  $$1 = 0; //@line 18966
  _mbedtls_aes_free(21312); //@line 18967
  return $$1 | 0; //@line 18968
 }
 HEAP8[12432] = $$044$lcssa$off0; //@line 18970
 $134 = _mbedtls_aes_crypt_ecb(21312, 1, 12417, 22568) | 0; //@line 18971
 if ($134 | 0) {
  $$1 = $134; //@line 18974
  _mbedtls_aes_free(21312); //@line 18975
  return $$1 | 0; //@line 18976
 }
 $wide$trip$count = $$048$lcssa & 65535; //@line 18978
 $indvars$iv = 0; //@line 18979
 do {
  $136 = $indvars$iv + $$045$lcssa | 0; //@line 18981
  HEAP8[$6 + $136 >> 0] = HEAP8[22568 + $indvars$iv >> 0] ^ HEAP8[$0 + $136 >> 0]; //@line 18988
  $indvars$iv = $indvars$iv + 1 | 0; //@line 18989
 } while (($indvars$iv | 0) != ($wide$trip$count | 0));
 $$1 = 0; //@line 18992
 _mbedtls_aes_free(21312); //@line 18998
 return $$1 | 0; //@line 18999
}
function __ZN7LoRaPHY13apply_cf_listEP15cflist_params_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$01314 = 0, $$015 = 0, $15 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $30 = 0, $33 = 0, $34 = 0, $37 = 0, $43 = 0, $49 = 0, $54 = 0, $71 = 0, $86 = 0, $91 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 20302
 STACKTOP = STACKTOP + 16 | 0; //@line 20303
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 20303
 $2 = sp; //@line 20304
 if (!(HEAP8[$0 + 15 >> 0] | 0)) {
  STACKTOP = sp; //@line 20309
  return;
 }
 $15 = $2 + 8 | 0; //@line 20320
 HEAP8[$15 >> 0] = HEAPU8[$0 + 31 >> 0] << 4 | HEAPU8[$0 + 30 >> 0]; //@line 20321
 L4 : do {
  if ((HEAP8[$1 + 4 >> 0] | 0) == 16) {
   $19 = $0 + 18 | 0; //@line 20327
   $20 = HEAP8[$19 >> 0] | 0; //@line 20328
   $21 = $0 + 20 | 0; //@line 20329
   if (($20 & 255) < (HEAPU8[$21 >> 0] | 0)) {
    $24 = $0 + 19 | 0; //@line 20333
    $25 = $2 + 4 | 0; //@line 20334
    $$01314 = 0; //@line 20335
    $$015 = $20; //@line 20335
    $30 = $20; //@line 20335
    while (1) {
     if ((($30 & 255) + (HEAPU8[$24 >> 0] | 0) | 0) >>> 0 > ($$015 & 255) >>> 0) {
      $33 = HEAP32[$1 >> 2] | 0; //@line 20344
      $34 = $$01314 & 255; //@line 20345
      $37 = HEAPU8[$33 + $34 >> 0] | 0; //@line 20348
      HEAP32[$2 >> 2] = $37; //@line 20349
      $43 = HEAPU8[$33 + ($34 + 1) >> 0] << 8 | $37; //@line 20355
      HEAP32[$2 >> 2] = $43; //@line 20356
      $49 = HEAPU8[$33 + ($34 + 2) >> 0] << 16 | $43; //@line 20362
      HEAP32[$2 >> 2] = $49 * 100; //@line 20364
      HEAP32[$25 >> 2] = 0; //@line 20365
      if (!$49) {
       label = 11; //@line 20368
      } else {
       $54 = HEAP32[(HEAP32[$0 >> 2] | 0) + 60 >> 2] | 0; //@line 20372
       $AsyncCtx = _emscripten_alloc_async_context(56, sp) | 0; //@line 20373
       FUNCTION_TABLE_iiii[$54 & 15]($0, $2, $$015) | 0; //@line 20374
       if (___async) {
        label = 9; //@line 20377
        break;
       }
       _emscripten_free_async_context($AsyncCtx | 0); //@line 20380
      }
     } else {
      HEAP32[$2 >> 2] = 0; //@line 20383
      HEAP8[$15 >> 0] = 0; //@line 20384
      HEAP32[$25 >> 2] = 0; //@line 20385
      label = 11; //@line 20386
     }
     if ((label | 0) == 11) {
      label = 0; //@line 20389
      $71 = HEAP32[(HEAP32[$0 >> 2] | 0) + 64 >> 2] | 0; //@line 20392
      $AsyncCtx3 = _emscripten_alloc_async_context(56, sp) | 0; //@line 20393
      FUNCTION_TABLE_iii[$71 & 31]($0, $$015) | 0; //@line 20394
      if (___async) {
       label = 12; //@line 20397
       break;
      }
      _emscripten_free_async_context($AsyncCtx3 | 0); //@line 20400
     }
     $86 = HEAP8[$19 >> 0] | 0; //@line 20402
     $91 = $$015 + 1 << 24 >> 24; //@line 20407
     if (($91 & 255) < (HEAPU8[$21 >> 0] | 0)) {
      $$01314 = ($86 & 255) + ($$01314 & 255) & 255; //@line 20411
      $$015 = $91; //@line 20411
      $30 = $86; //@line 20411
     } else {
      break L4;
     }
    }
    if ((label | 0) == 9) {
     HEAP32[$AsyncCtx >> 2] = 512; //@line 20417
     HEAP32[$AsyncCtx + 4 >> 2] = $19; //@line 20419
     HEAP8[$AsyncCtx + 8 >> 0] = $$01314; //@line 20421
     HEAP8[$AsyncCtx + 9 >> 0] = $$015; //@line 20423
     HEAP32[$AsyncCtx + 12 >> 2] = $21; //@line 20425
     HEAP32[$AsyncCtx + 16 >> 2] = $24; //@line 20427
     HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 20429
     HEAP32[$AsyncCtx + 24 >> 2] = $1; //@line 20431
     HEAP32[$AsyncCtx + 28 >> 2] = $2; //@line 20433
     HEAP32[$AsyncCtx + 32 >> 2] = $25; //@line 20435
     HEAP32[$AsyncCtx + 36 >> 2] = $15; //@line 20437
     HEAP32[$AsyncCtx + 40 >> 2] = $0; //@line 20439
     HEAP32[$AsyncCtx + 44 >> 2] = $0; //@line 20441
     HEAP32[$AsyncCtx + 48 >> 2] = $0; //@line 20443
     HEAP32[$AsyncCtx + 52 >> 2] = $2; //@line 20445
     sp = STACKTOP; //@line 20446
     STACKTOP = sp; //@line 20447
     return;
    } else if ((label | 0) == 12) {
     HEAP32[$AsyncCtx3 >> 2] = 513; //@line 20450
     HEAP32[$AsyncCtx3 + 4 >> 2] = $19; //@line 20452
     HEAP8[$AsyncCtx3 + 8 >> 0] = $$01314; //@line 20454
     HEAP8[$AsyncCtx3 + 9 >> 0] = $$015; //@line 20456
     HEAP32[$AsyncCtx3 + 12 >> 2] = $21; //@line 20458
     HEAP32[$AsyncCtx3 + 16 >> 2] = $24; //@line 20460
     HEAP32[$AsyncCtx3 + 20 >> 2] = $2; //@line 20462
     HEAP32[$AsyncCtx3 + 24 >> 2] = $1; //@line 20464
     HEAP32[$AsyncCtx3 + 28 >> 2] = $2; //@line 20466
     HEAP32[$AsyncCtx3 + 32 >> 2] = $25; //@line 20468
     HEAP32[$AsyncCtx3 + 36 >> 2] = $15; //@line 20470
     HEAP32[$AsyncCtx3 + 40 >> 2] = $0; //@line 20472
     HEAP32[$AsyncCtx3 + 44 >> 2] = $0; //@line 20474
     HEAP32[$AsyncCtx3 + 48 >> 2] = $0; //@line 20476
     HEAP32[$AsyncCtx3 + 52 >> 2] = $2; //@line 20478
     sp = STACKTOP; //@line 20479
     STACKTOP = sp; //@line 20480
     return;
    }
   }
  }
 } while (0);
 STACKTOP = sp; //@line 20485
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$off0 = 0, $10 = 0, $30 = 0, $36 = 0, $44 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx3 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 614
 STACKTOP = STACKTOP + 32 | 0; //@line 615
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 615
 $5 = sp; //@line 616
 HEAP8[$0 + 689 >> 0] = $1; //@line 619
 $10 = HEAP32[(HEAP32[$0 >> 2] | 0) + 32 >> 2] | 0; //@line 622
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 623
 FUNCTION_TABLE_vii[$10 & 31]($0, $2); //@line 624
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 52; //@line 627
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 629
  HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 631
  HEAP16[$AsyncCtx + 12 >> 1] = $3; //@line 633
  HEAP32[$AsyncCtx + 16 >> 2] = $4; //@line 635
  sp = STACKTOP; //@line 636
  STACKTOP = sp; //@line 637
  return 0; //@line 637
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 639
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 640
 $AsyncCtx19 = _emscripten_alloc_async_context(20, sp) | 0; //@line 641
 _wait_ms(1); //@line 642
 if (___async) {
  HEAP32[$AsyncCtx19 >> 2] = 53; //@line 645
  HEAP32[$AsyncCtx19 + 4 >> 2] = $5; //@line 647
  HEAP16[$AsyncCtx19 + 8 >> 1] = $3; //@line 649
  HEAP32[$AsyncCtx19 + 12 >> 2] = $4; //@line 651
  HEAP32[$AsyncCtx19 + 16 >> 2] = $0; //@line 653
  sp = STACKTOP; //@line 654
  STACKTOP = sp; //@line 655
  return 0; //@line 655
 }
 _emscripten_free_async_context($AsyncCtx19 | 0); //@line 657
 $AsyncCtx6 = _emscripten_alloc_async_context(24, sp) | 0; //@line 658
 __ZN4mbed5TimerC2Ev($5); //@line 659
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 54; //@line 662
  HEAP32[$AsyncCtx6 + 4 >> 2] = $5; //@line 664
  HEAP16[$AsyncCtx6 + 8 >> 1] = $3; //@line 666
  HEAP32[$AsyncCtx6 + 12 >> 2] = $4; //@line 668
  HEAP32[$AsyncCtx6 + 16 >> 2] = $0; //@line 670
  HEAP32[$AsyncCtx6 + 20 >> 2] = $5; //@line 672
  sp = STACKTOP; //@line 673
  STACKTOP = sp; //@line 674
  return 0; //@line 674
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 676
 $AsyncCtx9 = _emscripten_alloc_async_context(24, sp) | 0; //@line 677
 __ZN4mbed5Timer5startEv($5); //@line 678
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 55; //@line 681
  HEAP16[$AsyncCtx9 + 4 >> 1] = $3; //@line 683
  HEAP32[$AsyncCtx9 + 8 >> 2] = $5; //@line 685
  HEAP32[$AsyncCtx9 + 12 >> 2] = $4; //@line 687
  HEAP32[$AsyncCtx9 + 16 >> 2] = $0; //@line 689
  HEAP32[$AsyncCtx9 + 20 >> 2] = $5; //@line 691
  sp = STACKTOP; //@line 692
  STACKTOP = sp; //@line 693
  return 0; //@line 693
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 695
 L13 : do {
  if ($3 << 16 >> 16 < -1) {
   $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 699
   $30 = __ZN4mbed5Timer7read_msEv($5) | 0; //@line 700
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 56; //@line 703
    HEAP32[$AsyncCtx15 + 4 >> 2] = $4; //@line 705
    HEAP32[$AsyncCtx15 + 8 >> 2] = $0; //@line 707
    HEAP32[$AsyncCtx15 + 12 >> 2] = $5; //@line 709
    HEAP32[$AsyncCtx15 + 16 >> 2] = $5; //@line 711
    sp = STACKTOP; //@line 712
    STACKTOP = sp; //@line 713
    return 0; //@line 713
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 715
    $$0$off0 = ($30 | 0) >= ($4 | 0); //@line 717
    break;
   }
  } else {
   while (1) {
    $AsyncCtx12 = _emscripten_alloc_async_context(20, sp) | 0; //@line 722
    $36 = __ZN4mbed5Timer7read_msEv($5) | 0; //@line 723
    if (___async) {
     break;
    }
    _emscripten_free_async_context($AsyncCtx12 | 0); //@line 728
    if (($36 | 0) >= ($4 | 0)) {
     $$0$off0 = 1; //@line 731
     break L13;
    }
   }
   HEAP32[$AsyncCtx12 >> 2] = 57; //@line 735
   HEAP32[$AsyncCtx12 + 4 >> 2] = $4; //@line 737
   HEAP32[$AsyncCtx12 + 8 >> 2] = $5; //@line 739
   HEAP32[$AsyncCtx12 + 12 >> 2] = $0; //@line 741
   HEAP32[$AsyncCtx12 + 16 >> 2] = $5; //@line 743
   sp = STACKTOP; //@line 744
   STACKTOP = sp; //@line 745
   return 0; //@line 745
  }
 } while (0);
 $44 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0; //@line 750
 $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 751
 FUNCTION_TABLE_vi[$44 & 1023]($0); //@line 752
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 58; //@line 755
  HEAP32[$AsyncCtx3 + 4 >> 2] = $5; //@line 757
  HEAP32[$AsyncCtx3 + 8 >> 2] = $5; //@line 759
  HEAP8[$AsyncCtx3 + 12 >> 0] = $$0$off0 & 1; //@line 762
  sp = STACKTOP; //@line 763
  STACKTOP = sp; //@line 764
  return 0; //@line 764
 } else {
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 766
  __ZN4mbed5TimerD2Ev($5); //@line 767
  STACKTOP = sp; //@line 768
  return $$0$off0 | 0; //@line 768
 }
 return 0; //@line 770
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $31 = 0, $32 = 0, $35 = 0, $36 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 27623
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27625
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27627
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27631
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27633
 $11 = $2 + 12 | 0; //@line 27635
 HEAP32[$11 >> 2] = HEAP32[HEAP32[$0 + 12 >> 2] >> 2]; //@line 27636
 $12 = _equeue_alloc($4, 16) | 0; //@line 27637
 if ($12 | 0) {
  $14 = HEAP32[$11 >> 2] | 0; //@line 27640
  if (!$14) {
   HEAP32[$12 + 12 >> 2] = 0; //@line 27644
   _equeue_event_delay($12, $10); //@line 27645
   _equeue_event_dtor($12, 281); //@line 27646
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 27647
   $26 = _equeue_post($4, 282, $12) | 0; //@line 27648
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 562; //@line 27651
    $27 = $ReallocAsyncCtx4 + 4 | 0; //@line 27652
    HEAP32[$27 >> 2] = $8; //@line 27653
    $28 = $ReallocAsyncCtx4 + 8 | 0; //@line 27654
    HEAP32[$28 >> 2] = $11; //@line 27655
    $29 = $ReallocAsyncCtx4 + 12 | 0; //@line 27656
    HEAP32[$29 >> 2] = $2; //@line 27657
    sp = STACKTOP; //@line 27658
    return;
   }
   HEAP32[___async_retval >> 2] = $26; //@line 27662
   ___async_unwind = 0; //@line 27663
   HEAP32[$ReallocAsyncCtx4 >> 2] = 562; //@line 27664
   $27 = $ReallocAsyncCtx4 + 4 | 0; //@line 27665
   HEAP32[$27 >> 2] = $8; //@line 27666
   $28 = $ReallocAsyncCtx4 + 8 | 0; //@line 27667
   HEAP32[$28 >> 2] = $11; //@line 27668
   $29 = $ReallocAsyncCtx4 + 12 | 0; //@line 27669
   HEAP32[$29 >> 2] = $2; //@line 27670
   sp = STACKTOP; //@line 27671
   return;
  } else {
   $17 = HEAP32[$14 + 4 >> 2] | 0; //@line 27675
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 27676
   FUNCTION_TABLE_vii[$17 & 31]($12, $2); //@line 27677
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 561; //@line 27680
    $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 27681
    HEAP32[$18 >> 2] = $11; //@line 27682
    $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 27683
    HEAP32[$19 >> 2] = $12; //@line 27684
    $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 27685
    HEAP32[$20 >> 2] = $10; //@line 27686
    $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 27687
    HEAP32[$21 >> 2] = $4; //@line 27688
    $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 27689
    HEAP32[$22 >> 2] = $8; //@line 27690
    $23 = $ReallocAsyncCtx2 + 24 | 0; //@line 27691
    HEAP32[$23 >> 2] = $11; //@line 27692
    $24 = $ReallocAsyncCtx2 + 28 | 0; //@line 27693
    HEAP32[$24 >> 2] = $2; //@line 27694
    sp = STACKTOP; //@line 27695
    return;
   }
   ___async_unwind = 0; //@line 27698
   HEAP32[$ReallocAsyncCtx2 >> 2] = 561; //@line 27699
   $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 27700
   HEAP32[$18 >> 2] = $11; //@line 27701
   $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 27702
   HEAP32[$19 >> 2] = $12; //@line 27703
   $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 27704
   HEAP32[$20 >> 2] = $10; //@line 27705
   $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 27706
   HEAP32[$21 >> 2] = $4; //@line 27707
   $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 27708
   HEAP32[$22 >> 2] = $8; //@line 27709
   $23 = $ReallocAsyncCtx2 + 24 | 0; //@line 27710
   HEAP32[$23 >> 2] = $11; //@line 27711
   $24 = $ReallocAsyncCtx2 + 28 | 0; //@line 27712
   HEAP32[$24 >> 2] = $2; //@line 27713
   sp = STACKTOP; //@line 27714
   return;
  }
 }
 $31 = $8 + 16 | 0; //@line 27718
 HEAP32[$31 >> 2] = 0; //@line 27719
 $32 = HEAP32[$11 >> 2] | 0; //@line 27720
 if ($32 | 0) {
  $35 = HEAP32[$32 + 8 >> 2] | 0; //@line 27724
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 27725
  FUNCTION_TABLE_vi[$35 & 1023]($2); //@line 27726
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 563; //@line 27729
   $36 = $ReallocAsyncCtx3 + 4 | 0; //@line 27730
   HEAP32[$36 >> 2] = $31; //@line 27731
   sp = STACKTOP; //@line 27732
   return;
  }
  ___async_unwind = 0; //@line 27735
  HEAP32[$ReallocAsyncCtx3 >> 2] = 563; //@line 27736
  $36 = $ReallocAsyncCtx3 + 4 | 0; //@line 27737
  HEAP32[$36 >> 2] = $31; //@line 27738
  sp = STACKTOP; //@line 27739
  return;
 }
 if (0) {
  return;
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 27746
 _mbed_assert_internal(12547, 12565, 57); //@line 27747
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 564; //@line 27750
  sp = STACKTOP; //@line 27751
  return;
 }
 ___async_unwind = 0; //@line 27754
 HEAP32[$ReallocAsyncCtx5 >> 2] = 564; //@line 27755
 sp = STACKTOP; //@line 27756
 return;
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_96($0) {
 $0 = $0 | 0;
 var $$pre17 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 25965
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25967
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25969
 HEAP32[$4 + 364 >> 2] = 2; //@line 25973
 $$pre17 = HEAP8[$2 >> 0] | 0; //@line 25974
 if (!($$pre17 & 4)) {
  $11 = HEAP32[$4 + 1324 >> 2] | 0; //@line 25979
  $12 = $11 + 16 | 0; //@line 25980
  $14 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 25982
  $15 = $11 + 28 | 0; //@line 25983
  $16 = HEAP32[$15 >> 2] | 0; //@line 25984
  if (!$16) {
   $ReallocAsyncCtx13 = _emscripten_realloc_async_context(24) | 0; //@line 25987
   _mbed_assert_internal(13874, 13879, 1102); //@line 25988
   if (___async) {
    HEAP32[$ReallocAsyncCtx13 >> 2] = 383; //@line 25991
    $18 = $ReallocAsyncCtx13 + 4 | 0; //@line 25992
    HEAP32[$18 >> 2] = $15; //@line 25993
    $19 = $ReallocAsyncCtx13 + 8 | 0; //@line 25994
    HEAP32[$19 >> 2] = $12; //@line 25995
    $20 = $ReallocAsyncCtx13 + 12 | 0; //@line 25996
    HEAP32[$20 >> 2] = $14; //@line 25997
    $21 = $ReallocAsyncCtx13 + 16 | 0; //@line 25998
    HEAP32[$21 >> 2] = $2; //@line 25999
    $22 = $ReallocAsyncCtx13 + 20 | 0; //@line 26000
    HEAP32[$22 >> 2] = $4; //@line 26001
    sp = STACKTOP; //@line 26002
    return;
   }
   ___async_unwind = 0; //@line 26005
   HEAP32[$ReallocAsyncCtx13 >> 2] = 383; //@line 26006
   $18 = $ReallocAsyncCtx13 + 4 | 0; //@line 26007
   HEAP32[$18 >> 2] = $15; //@line 26008
   $19 = $ReallocAsyncCtx13 + 8 | 0; //@line 26009
   HEAP32[$19 >> 2] = $12; //@line 26010
   $20 = $ReallocAsyncCtx13 + 12 | 0; //@line 26011
   HEAP32[$20 >> 2] = $14; //@line 26012
   $21 = $ReallocAsyncCtx13 + 16 | 0; //@line 26013
   HEAP32[$21 >> 2] = $2; //@line 26014
   $22 = $ReallocAsyncCtx13 + 20 | 0; //@line 26015
   HEAP32[$22 >> 2] = $4; //@line 26016
   sp = STACKTOP; //@line 26017
   return;
  } else {
   $23 = HEAP32[$16 >> 2] | 0; //@line 26020
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 26021
   FUNCTION_TABLE_vii[$23 & 31]($12, $14); //@line 26022
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 384; //@line 26025
    $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 26026
    HEAP32[$24 >> 2] = $2; //@line 26027
    $25 = $ReallocAsyncCtx4 + 8 | 0; //@line 26028
    HEAP32[$25 >> 2] = $4; //@line 26029
    sp = STACKTOP; //@line 26030
    return;
   }
   ___async_unwind = 0; //@line 26033
   HEAP32[$ReallocAsyncCtx4 >> 2] = 384; //@line 26034
   $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 26035
   HEAP32[$24 >> 2] = $2; //@line 26036
   $25 = $ReallocAsyncCtx4 + 8 | 0; //@line 26037
   HEAP32[$25 >> 2] = $4; //@line 26038
   sp = STACKTOP; //@line 26039
   return;
  }
 }
 $26 = $$pre17 & -5; //@line 26043
 HEAP8[$2 >> 0] = $26; //@line 26044
 if (!($26 & 16)) {
  return;
 }
 HEAP8[$2 >> 0] = $26 & -17; //@line 26051
 $31 = HEAP32[$4 + 1324 >> 2] | 0; //@line 26053
 $32 = $31 + 48 | 0; //@line 26054
 $34 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 26056
 $35 = $31 + 60 | 0; //@line 26057
 $36 = HEAP32[$35 >> 2] | 0; //@line 26058
 if (!$36) {
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(16) | 0; //@line 26061
  _mbed_assert_internal(13874, 13879, 1102); //@line 26062
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 385; //@line 26065
   $38 = $ReallocAsyncCtx12 + 4 | 0; //@line 26066
   HEAP32[$38 >> 2] = $35; //@line 26067
   $39 = $ReallocAsyncCtx12 + 8 | 0; //@line 26068
   HEAP32[$39 >> 2] = $32; //@line 26069
   $40 = $ReallocAsyncCtx12 + 12 | 0; //@line 26070
   HEAP32[$40 >> 2] = $34; //@line 26071
   sp = STACKTOP; //@line 26072
   return;
  }
  ___async_unwind = 0; //@line 26075
  HEAP32[$ReallocAsyncCtx12 >> 2] = 385; //@line 26076
  $38 = $ReallocAsyncCtx12 + 4 | 0; //@line 26077
  HEAP32[$38 >> 2] = $35; //@line 26078
  $39 = $ReallocAsyncCtx12 + 8 | 0; //@line 26079
  HEAP32[$39 >> 2] = $32; //@line 26080
  $40 = $ReallocAsyncCtx12 + 12 | 0; //@line 26081
  HEAP32[$40 >> 2] = $34; //@line 26082
  sp = STACKTOP; //@line 26083
  return;
 } else {
  $41 = HEAP32[$36 >> 2] | 0; //@line 26086
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 26087
  FUNCTION_TABLE_vii[$41 & 31]($32, $34); //@line 26088
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 386; //@line 26091
   sp = STACKTOP; //@line 26092
   return;
  }
  ___async_unwind = 0; //@line 26095
  HEAP32[$ReallocAsyncCtx5 >> 2] = 386; //@line 26096
  sp = STACKTOP; //@line 26097
  return;
 }
}
function _ticker_read_us__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $15 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $42 = 0, $43 = 0, $44 = 0, $46 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $56 = 0, $58 = 0, $59 = 0, $65 = 0, $66 = 0, $67 = 0, $76 = 0, $77 = 0, $78 = 0, $80 = 0, $84 = 0, $85 = 0, $91 = 0, $92 = 0, $93 = 0, $95 = 0, $99 = 0, $AsyncRetVal = 0, label = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18485
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18487
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 18489
 if (($AsyncRetVal | 0) == (HEAP32[(HEAP32[$2 >> 2] | 0) + 32 >> 2] | 0)) {
  $99 = HEAP32[$2 >> 2] | 0; //@line 18495
  $100 = $99 + 48 | 0; //@line 18496
  $101 = $100; //@line 18497
  $102 = $101; //@line 18498
  $103 = HEAP32[$102 >> 2] | 0; //@line 18499
  $104 = $101 + 4 | 0; //@line 18500
  $105 = $104; //@line 18501
  $106 = HEAP32[$105 >> 2] | 0; //@line 18502
  $107 = ___async_retval; //@line 18503
  $108 = $107; //@line 18504
  $109 = $108; //@line 18505
  HEAP32[$109 >> 2] = $103; //@line 18506
  $110 = $108 + 4 | 0; //@line 18507
  $111 = $110; //@line 18508
  HEAP32[$111 >> 2] = $106; //@line 18509
  return;
 }
 $10 = $4 + 32 | 0; //@line 18512
 $15 = $AsyncRetVal - (HEAP32[$10 >> 2] | 0) & HEAP32[$4 + 12 >> 2]; //@line 18517
 HEAP32[$10 >> 2] = $AsyncRetVal; //@line 18518
 $17 = HEAP32[$4 + 8 >> 2] | 0; //@line 18520
 L5 : do {
  if (($17 | 0) < 1e6) {
   switch ($17 | 0) {
   case 32768:
    {
     break;
    }
   default:
    {
     label = 6; //@line 18529
     break L5;
    }
   }
   $18 = ___muldi3($15 | 0, 0, 1e6, 0) | 0; //@line 18533
   $20 = _bitshift64Lshr($18 | 0, tempRet0 | 0, 15) | 0; //@line 18535
   $21 = tempRet0; //@line 18536
   $24 = $4 + 40 | 0; //@line 18539
   $25 = $24; //@line 18540
   $31 = _i64Add(HEAP32[$25 >> 2] | 0, HEAP32[$25 + 4 >> 2] | 0, $15 * 1e6 & 32704 | 0, 0) | 0; //@line 18546
   $32 = tempRet0; //@line 18547
   $33 = $24; //@line 18548
   HEAP32[$33 >> 2] = $31; //@line 18550
   HEAP32[$33 + 4 >> 2] = $32; //@line 18553
   if ($32 >>> 0 < 0 | ($32 | 0) == 0 & $31 >>> 0 < 32768) {
    $91 = $20; //@line 18560
    $92 = $21; //@line 18560
   } else {
    $42 = _i64Add($20 | 0, $21 | 0, 1, 0) | 0; //@line 18562
    $43 = tempRet0; //@line 18563
    $44 = _i64Add($31 | 0, $32 | 0, -32768, -1) | 0; //@line 18564
    $46 = $24; //@line 18566
    HEAP32[$46 >> 2] = $44; //@line 18568
    HEAP32[$46 + 4 >> 2] = tempRet0; //@line 18571
    $91 = $42; //@line 18572
    $92 = $43; //@line 18572
   }
  } else {
   switch ($17 | 0) {
   case 1e6:
    {
     $91 = $15; //@line 18577
     $92 = 0; //@line 18577
     break;
    }
   default:
    {
     label = 6; //@line 18581
    }
   }
  }
 } while (0);
 if ((label | 0) == 6) {
  $50 = ___muldi3($15 | 0, 0, 1e6, 0) | 0; //@line 18587
  $51 = tempRet0; //@line 18588
  $52 = ___udivdi3($50 | 0, $51 | 0, $17 | 0, 0) | 0; //@line 18589
  $53 = tempRet0; //@line 18590
  $54 = ___muldi3($52 | 0, $53 | 0, $17 | 0, 0) | 0; //@line 18591
  $56 = _i64Subtract($50 | 0, $51 | 0, $54 | 0, tempRet0 | 0) | 0; //@line 18593
  $58 = $4 + 40 | 0; //@line 18595
  $59 = $58; //@line 18596
  $65 = _i64Add($56 | 0, tempRet0 | 0, HEAP32[$59 >> 2] | 0, HEAP32[$59 + 4 >> 2] | 0) | 0; //@line 18602
  $66 = tempRet0; //@line 18603
  $67 = $58; //@line 18604
  HEAP32[$67 >> 2] = $65; //@line 18606
  HEAP32[$67 + 4 >> 2] = $66; //@line 18609
  if ($66 >>> 0 < 0 | ($66 | 0) == 0 & $65 >>> 0 < $17 >>> 0) {
   $91 = $52; //@line 18616
   $92 = $53; //@line 18616
  } else {
   $76 = _i64Add($52 | 0, $53 | 0, 1, 0) | 0; //@line 18618
   $77 = tempRet0; //@line 18619
   $78 = _i64Subtract($65 | 0, $66 | 0, $17 | 0, 0) | 0; //@line 18620
   $80 = $58; //@line 18622
   HEAP32[$80 >> 2] = $78; //@line 18624
   HEAP32[$80 + 4 >> 2] = tempRet0; //@line 18627
   $91 = $76; //@line 18628
   $92 = $77; //@line 18628
  }
 }
 $84 = $4 + 48 | 0; //@line 18631
 $85 = $84; //@line 18632
 $93 = _i64Add(HEAP32[$85 >> 2] | 0, HEAP32[$85 + 4 >> 2] | 0, $91 | 0, $92 | 0) | 0; //@line 18638
 $95 = $84; //@line 18640
 HEAP32[$95 >> 2] = $93; //@line 18642
 HEAP32[$95 + 4 >> 2] = tempRet0; //@line 18645
 $99 = HEAP32[$2 >> 2] | 0; //@line 18646
 $100 = $99 + 48 | 0; //@line 18647
 $101 = $100; //@line 18648
 $102 = $101; //@line 18649
 $103 = HEAP32[$102 >> 2] | 0; //@line 18650
 $104 = $101 + 4 | 0; //@line 18651
 $105 = $104; //@line 18652
 $106 = HEAP32[$105 >> 2] | 0; //@line 18653
 $107 = ___async_retval; //@line 18654
 $108 = $107; //@line 18655
 $109 = $108; //@line 18656
 HEAP32[$109 >> 2] = $103; //@line 18657
 $110 = $108 + 4 | 0; //@line 18658
 $111 = $110; //@line 18659
 HEAP32[$111 >> 2] = $106; //@line 18660
 return;
}
function _mbedtls_cipher_cmac_finish__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $56 = 0, $58 = 0, $62 = 0, $64 = 0, $66 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30660
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30662
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30666
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30668
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30670
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 30674
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 30676
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 30678
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 30680
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 30682
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 30684
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 30686
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 30688
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 30690
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 30692
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 30694
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 30696
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 30700
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 30702
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 30704
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 30706
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 30708
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 30710
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 30712
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 30714
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 30716
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 30720
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 30722
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 30724
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 30726
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 30728
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 30730
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 30732
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 30734
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 30736
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 30738
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 30740
 if (!$AsyncRetVal) {
  _memcpy(HEAP32[$0 + 28 >> 2] | 0, $72 | 0, HEAP32[$0 + 12 >> 2] | 0) | 0; //@line 30743
 }
 HEAP8[$32 >> 0] = 0; //@line 30745
 HEAP8[$2 >> 0] = 0; //@line 30746
 HEAP8[$24 >> 0] = 0; //@line 30747
 HEAP8[$56 >> 0] = 0; //@line 30748
 HEAP8[$4 >> 0] = 0; //@line 30749
 HEAP8[$26 >> 0] = 0; //@line 30750
 HEAP8[$58 >> 0] = 0; //@line 30751
 HEAP8[$80 >> 0] = 0; //@line 30752
 HEAP8[$28 >> 0] = 0; //@line 30753
 HEAP8[$36 >> 0] = 0; //@line 30754
 HEAP8[$8 >> 0] = 0; //@line 30755
 HEAP8[$66 >> 0] = 0; //@line 30756
 HEAP8[$38 >> 0] = 0; //@line 30757
 HEAP8[$16 >> 0] = 0; //@line 30758
 HEAP8[$68 >> 0] = 0; //@line 30759
 HEAP8[$54 >> 0] = 0; //@line 30760
 HEAP8[$74 >> 0] = 0; //@line 30761
 HEAP8[$42 >> 0] = 0; //@line 30762
 HEAP8[$70 >> 0] = 0; //@line 30763
 HEAP8[$46 >> 0] = 0; //@line 30764
 HEAP8[$10 >> 0] = 0; //@line 30765
 HEAP8[$20 >> 0] = 0; //@line 30766
 HEAP8[$76 >> 0] = 0; //@line 30767
 HEAP8[$18 >> 0] = 0; //@line 30768
 HEAP8[$22 >> 0] = 0; //@line 30769
 HEAP8[$48 >> 0] = 0; //@line 30770
 HEAP8[$12 >> 0] = 0; //@line 30771
 HEAP8[$30 >> 0] = 0; //@line 30772
 HEAP8[$62 >> 0] = 0; //@line 30773
 HEAP8[$78 >> 0] = 0; //@line 30774
 HEAP8[$34 >> 0] = 0; //@line 30775
 HEAP8[$50 >> 0] = 0; //@line 30776
 HEAP32[$64 >> 2] = 0; //@line 30777
 HEAP8[$44 >> 0] = 0; //@line 30779
 HEAP8[$52 + 17 >> 0] = 0; //@line 30781
 HEAP8[$52 + 18 >> 0] = 0; //@line 30783
 HEAP8[$52 + 19 >> 0] = 0; //@line 30785
 HEAP8[$52 + 20 >> 0] = 0; //@line 30787
 HEAP8[$52 + 21 >> 0] = 0; //@line 30789
 HEAP8[$52 + 22 >> 0] = 0; //@line 30791
 HEAP8[$52 + 23 >> 0] = 0; //@line 30793
 HEAP8[$52 + 24 >> 0] = 0; //@line 30795
 HEAP8[$52 + 25 >> 0] = 0; //@line 30797
 HEAP8[$52 + 26 >> 0] = 0; //@line 30799
 HEAP8[$52 + 27 >> 0] = 0; //@line 30801
 HEAP8[$52 + 28 >> 0] = 0; //@line 30803
 HEAP8[$52 + 29 >> 0] = 0; //@line 30805
 HEAP8[$52 + 30 >> 0] = 0; //@line 30807
 HEAP8[$52 + 31 >> 0] = 0; //@line 30808
 HEAP8[$72 >> 0] = 0; //@line 30810
 HEAP8[$52 + 1 >> 0] = 0; //@line 30812
 HEAP8[$52 + 2 >> 0] = 0; //@line 30814
 HEAP8[$52 + 3 >> 0] = 0; //@line 30816
 HEAP8[$52 + 4 >> 0] = 0; //@line 30818
 HEAP8[$52 + 5 >> 0] = 0; //@line 30820
 HEAP8[$52 + 6 >> 0] = 0; //@line 30822
 HEAP8[$52 + 7 >> 0] = 0; //@line 30824
 HEAP8[$52 + 8 >> 0] = 0; //@line 30826
 HEAP8[$52 + 9 >> 0] = 0; //@line 30828
 HEAP8[$52 + 10 >> 0] = 0; //@line 30830
 HEAP8[$52 + 11 >> 0] = 0; //@line 30832
 HEAP8[$52 + 12 >> 0] = 0; //@line 30834
 HEAP8[$52 + 13 >> 0] = 0; //@line 30836
 HEAP8[$52 + 14 >> 0] = 0; //@line 30838
 HEAP8[$52 + 15 >> 0] = 0; //@line 30839
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 30841
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_362($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $15 = 0, $17 = 0, $2 = 0, $24 = 0, $25 = 0, $28 = 0, $34 = 0, $4 = 0, $40 = 0, $46 = 0, $47 = 0, $48 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $8 = 0, $ReallocAsyncCtx = 0, $switch$selectcmp$i = 0, $switch$selectcmp$i$expand_i1_val = 0, $switch$selectcmp4$i = 0, $switch$selectcmp4$i$expand_i1_val = 0, sp = 0;
 sp = STACKTOP; //@line 14785
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14787
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14789
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14791
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14793
 $11 = $6 + 1 | 0; //@line 14796
 $12 = HEAP8[$11 >> 0] | 0; //@line 14797
 $15 = HEAP8[(HEAP32[$4 + 88 >> 2] | 0) + ($12 << 24 >> 24) >> 0] | 0; //@line 14800
 $17 = HEAP32[$4 + 112 >> 2] | 0; //@line 14802
 $24 = $6 + 2 | 0; //@line 14809
 $25 = HEAP8[$24 >> 0] | 0; //@line 14810
 $28 = HEAP8[(HEAP32[$4 + 72 >> 2] | 0) + ((HEAPU8[$17 + ((HEAPU8[$6 >> 0] | 0) * 12 | 0) + 9 >> 0] | 0) * 24 | 0) + 2 >> 0] | 0; //@line 14813
 if ($25 << 24 >> 24 > $28 << 24 >> 24) {
  HEAP8[$24 >> 0] = $28; //@line 14816
  $40 = $28; //@line 14817
 } else {
  $40 = $25; //@line 14819
 }
 $34 = HEAP32[(HEAP32[$4 + 80 >> 2] | 0) + (($12 & 255) << 2) >> 2] | 0; //@line 14825
 $switch$selectcmp$i = ($34 | 0) == 25e4; //@line 14826
 $switch$selectcmp4$i = ($34 | 0) == 5e5; //@line 14827
 $46 = ~~+Math_floor(+(+HEAPF32[$6 + 4 >> 2] - +($40 << 24 >> 24 << 1 >>> 0) - +HEAPF32[$6 + 8 >> 2])); //@line 14838
 $47 = $4 + 4 | 0; //@line 14839
 $48 = HEAP32[$47 >> 2] | 0; //@line 14840
 $51 = HEAP32[(HEAP32[$48 >> 2] | 0) + 72 >> 2] | 0; //@line 14843
 $ReallocAsyncCtx = _emscripten_realloc_async_context(44) | 0; //@line 14844
 FUNCTION_TABLE_vi[$51 & 1023]($48); //@line 14845
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 524; //@line 14848
  $52 = $ReallocAsyncCtx + 4 | 0; //@line 14849
  HEAP32[$52 >> 2] = $47; //@line 14850
  $53 = $ReallocAsyncCtx + 8 | 0; //@line 14851
  HEAP32[$53 >> 2] = $6; //@line 14852
  $54 = $ReallocAsyncCtx + 12 | 0; //@line 14853
  HEAP32[$54 >> 2] = $17; //@line 14854
  $55 = $ReallocAsyncCtx + 16 | 0; //@line 14855
  HEAP32[$55 >> 2] = $11; //@line 14856
  $56 = $ReallocAsyncCtx + 20 | 0; //@line 14857
  HEAP32[$56 >> 2] = $4; //@line 14858
  $57 = $ReallocAsyncCtx + 24 | 0; //@line 14859
  $switch$selectcmp$i$expand_i1_val = $switch$selectcmp$i & 1; //@line 14860
  HEAP8[$57 >> 0] = $switch$selectcmp$i$expand_i1_val; //@line 14861
  $58 = $ReallocAsyncCtx + 25 | 0; //@line 14862
  $switch$selectcmp4$i$expand_i1_val = $switch$selectcmp4$i & 1; //@line 14863
  HEAP8[$58 >> 0] = $switch$selectcmp4$i$expand_i1_val; //@line 14864
  $59 = $ReallocAsyncCtx + 26 | 0; //@line 14865
  HEAP8[$59 >> 0] = $15; //@line 14866
  $60 = $ReallocAsyncCtx + 27 | 0; //@line 14867
  HEAP8[$60 >> 0] = $46; //@line 14868
  $61 = $ReallocAsyncCtx + 28 | 0; //@line 14869
  HEAP32[$61 >> 2] = $6; //@line 14870
  $62 = $ReallocAsyncCtx + 32 | 0; //@line 14871
  HEAP32[$62 >> 2] = $8; //@line 14872
  $63 = $ReallocAsyncCtx + 36 | 0; //@line 14873
  HEAP32[$63 >> 2] = $24; //@line 14874
  $64 = $ReallocAsyncCtx + 40 | 0; //@line 14875
  HEAP32[$64 >> 2] = $2; //@line 14876
  sp = STACKTOP; //@line 14877
  return;
 }
 ___async_unwind = 0; //@line 14880
 HEAP32[$ReallocAsyncCtx >> 2] = 524; //@line 14881
 $52 = $ReallocAsyncCtx + 4 | 0; //@line 14882
 HEAP32[$52 >> 2] = $47; //@line 14883
 $53 = $ReallocAsyncCtx + 8 | 0; //@line 14884
 HEAP32[$53 >> 2] = $6; //@line 14885
 $54 = $ReallocAsyncCtx + 12 | 0; //@line 14886
 HEAP32[$54 >> 2] = $17; //@line 14887
 $55 = $ReallocAsyncCtx + 16 | 0; //@line 14888
 HEAP32[$55 >> 2] = $11; //@line 14889
 $56 = $ReallocAsyncCtx + 20 | 0; //@line 14890
 HEAP32[$56 >> 2] = $4; //@line 14891
 $57 = $ReallocAsyncCtx + 24 | 0; //@line 14892
 $switch$selectcmp$i$expand_i1_val = $switch$selectcmp$i & 1; //@line 14893
 HEAP8[$57 >> 0] = $switch$selectcmp$i$expand_i1_val; //@line 14894
 $58 = $ReallocAsyncCtx + 25 | 0; //@line 14895
 $switch$selectcmp4$i$expand_i1_val = $switch$selectcmp4$i & 1; //@line 14896
 HEAP8[$58 >> 0] = $switch$selectcmp4$i$expand_i1_val; //@line 14897
 $59 = $ReallocAsyncCtx + 26 | 0; //@line 14898
 HEAP8[$59 >> 0] = $15; //@line 14899
 $60 = $ReallocAsyncCtx + 27 | 0; //@line 14900
 HEAP8[$60 >> 0] = $46; //@line 14901
 $61 = $ReallocAsyncCtx + 28 | 0; //@line 14902
 HEAP32[$61 >> 2] = $6; //@line 14903
 $62 = $ReallocAsyncCtx + 32 | 0; //@line 14904
 HEAP32[$62 >> 2] = $8; //@line 14905
 $63 = $ReallocAsyncCtx + 36 | 0; //@line 14906
 HEAP32[$63 >> 2] = $24; //@line 14907
 $64 = $ReallocAsyncCtx + 40 | 0; //@line 14908
 HEAP32[$64 >> 2] = $2; //@line 14909
 sp = STACKTOP; //@line 14910
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_276($0) {
 $0 = $0 | 0;
 var $10 = 0, $109 = 0, $113 = 0, $12 = 0, $120 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $132 = 0, $135 = 0, $137 = 0, $138 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $4 = 0, $6 = 0, $8 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 7981
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 7983
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7985
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 7987
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 7989
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 7991
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 7993
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 7995
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 7997
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 7999
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 8001
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 8003
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 8005
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 8007
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 8009
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 8011
 if (HEAP32[___async_retval >> 2] | 0) {
  HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 4 >> 2] = 13; //@line 8018
  return;
 }
 if (((HEAPU8[$6 + -3 + ($2 + 638) >> 0] | 0) << 8 | (HEAPU8[$2 + 638 + $4 >> 0] | 0) | (HEAPU8[$6 + -2 + ($2 + 638) >> 0] | 0) << 16 | (HEAPU8[$6 + -1 + ($2 + 638) >> 0] | 0) << 24 | 0) != (HEAP32[$8 >> 2] | 0)) {
  HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) + 4 >> 2] = 7; //@line 8048
  $132 = $2 + 944 | 0; //@line 8049
  HEAP8[$132 >> 0] = HEAP8[$132 >> 0] | 32; //@line 8052
  $135 = HEAP32[$24 >> 2] | 0; //@line 8053
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 8055
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($135, $2 + 996 | 0, 1); //@line 8056
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 331; //@line 8059
   $137 = $ReallocAsyncCtx5 + 4 | 0; //@line 8060
   HEAP32[$137 >> 2] = $12; //@line 8061
   $138 = $ReallocAsyncCtx5 + 8 | 0; //@line 8062
   HEAP32[$138 >> 2] = $14; //@line 8063
   sp = STACKTOP; //@line 8064
   return;
  }
  ___async_unwind = 0; //@line 8067
  HEAP32[$ReallocAsyncCtx5 >> 2] = 331; //@line 8068
  $137 = $ReallocAsyncCtx5 + 4 | 0; //@line 8069
  HEAP32[$137 >> 2] = $12; //@line 8070
  $138 = $ReallocAsyncCtx5 + 8 | 0; //@line 8071
  HEAP32[$138 >> 2] = $14; //@line 8072
  sp = STACKTOP; //@line 8073
  return;
 }
 if (__Z28compute_skeys_for_join_framePKhS0_tPhS1_(HEAP32[$16 >> 2] | 0, $18, HEAP16[$2 + 946 >> 1] | 0, $20, $22) | 0) {
  HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 4 >> 2] = 13; //@line 8084
  return;
 }
 HEAP32[$2 + 948 >> 2] = (HEAPU8[$2 + 644 >> 0] | 0) << 16 | ((HEAPU8[$2 + 643 >> 0] | 0) << 8 | (HEAPU8[$2 + 642 >> 0] | 0)); //@line 8101
 HEAP32[$2 + 952 >> 2] = (HEAPU8[$2 + 648 >> 0] | 0) << 24 | ((HEAPU8[$2 + 647 >> 0] | 0) << 16 | ((HEAPU8[$2 + 646 >> 0] | 0) << 8 | (HEAPU8[$2 + 645 >> 0] | 0))); //@line 8121
 $99 = HEAP8[$2 + 649 >> 0] | 0; //@line 8123
 HEAP8[$2 + 1129 >> 0] = ($99 & 255) >>> 4 & 7; //@line 8129
 HEAP8[$2 + 1136 >> 0] = $99 & 15; //@line 8132
 $109 = HEAP8[$2 + 650 >> 0] & 15; //@line 8135
 $113 = $109 << 24 >> 24 == 0 ? 1e3 : ($109 & 255) * 1e3 | 0; //@line 8140
 HEAP32[$2 + 1112 >> 2] = $113; //@line 8141
 HEAP32[$2 + 1116 >> 2] = $113 + 1e3; //@line 8144
 HEAP32[$26 >> 2] = $2 + 651; //@line 8146
 HEAP8[$26 + 4 >> 0] = $6 + 239; //@line 8150
 $120 = HEAP32[$28 >> 2] | 0; //@line 8151
 $123 = HEAP32[(HEAP32[$120 >> 2] | 0) + 20 >> 2] | 0; //@line 8154
 $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 8155
 FUNCTION_TABLE_vii[$123 & 31]($120, $26); //@line 8156
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 302; //@line 8159
  $124 = $ReallocAsyncCtx + 4 | 0; //@line 8160
  HEAP32[$124 >> 2] = $2; //@line 8161
  $125 = $ReallocAsyncCtx + 8 | 0; //@line 8162
  HEAP32[$125 >> 2] = $30; //@line 8163
  $126 = $ReallocAsyncCtx + 12 | 0; //@line 8164
  HEAP32[$126 >> 2] = $24; //@line 8165
  $127 = $ReallocAsyncCtx + 16 | 0; //@line 8166
  HEAP32[$127 >> 2] = $12; //@line 8167
  $128 = $ReallocAsyncCtx + 20 | 0; //@line 8168
  HEAP32[$128 >> 2] = $14; //@line 8169
  sp = STACKTOP; //@line 8170
  return;
 }
 ___async_unwind = 0; //@line 8173
 HEAP32[$ReallocAsyncCtx >> 2] = 302; //@line 8174
 $124 = $ReallocAsyncCtx + 4 | 0; //@line 8175
 HEAP32[$124 >> 2] = $2; //@line 8176
 $125 = $ReallocAsyncCtx + 8 | 0; //@line 8177
 HEAP32[$125 >> 2] = $30; //@line 8178
 $126 = $ReallocAsyncCtx + 12 | 0; //@line 8179
 HEAP32[$126 >> 2] = $24; //@line 8180
 $127 = $ReallocAsyncCtx + 16 | 0; //@line 8181
 HEAP32[$127 >> 2] = $12; //@line 8182
 $128 = $ReallocAsyncCtx + 20 | 0; //@line 8183
 HEAP32[$128 >> 2] = $14; //@line 8184
 sp = STACKTOP; //@line 8185
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_422($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $23 = 0, $26 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $45 = 0, $48 = 0, $52 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 31000
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31006
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31008
 $10 = HEAP8[$0 + 20 >> 0] | 0; //@line 31010
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31012
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 31014
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 31016
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 31018
 if ((HEAP8[$0 + 4 >> 0] | 0) == 7) {
  if (HEAP8[(HEAP32[$0 + 8 >> 2] | 0) + 14 >> 0] | 0) {
   $23 = HEAP32[$6 >> 2] | 0; //@line 31025
   $26 = HEAP32[(HEAP32[$23 >> 2] | 0) + 16 >> 2] | 0; //@line 31028
   $31 = HEAP32[$8 + 8 >> 2] & 65535; //@line 31033
   $34 = (HEAP8[$8 + 18 >> 0] | 0) != 0; //@line 31036
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(32) | 0; //@line 31037
   FUNCTION_TABLE_viiiiiiiiiiiiiii[$26 & 1]($23, 0, 5e4, ($10 & 255) * 1e3 | 0, 0, 83333, 5, $31, 0, 0, 1, 0, 0, 0, $34); //@line 31038
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 519; //@line 31041
    $35 = $ReallocAsyncCtx6 + 4 | 0; //@line 31042
    HEAP32[$35 >> 2] = $8; //@line 31043
    $36 = $ReallocAsyncCtx6 + 8 | 0; //@line 31044
    HEAP32[$36 >> 2] = $12; //@line 31045
    $37 = $ReallocAsyncCtx6 + 12 | 0; //@line 31046
    HEAP32[$37 >> 2] = $14; //@line 31047
    $38 = $ReallocAsyncCtx6 + 16 | 0; //@line 31048
    HEAP32[$38 >> 2] = $16; //@line 31049
    $39 = $ReallocAsyncCtx6 + 20 | 0; //@line 31050
    HEAP32[$39 >> 2] = $6; //@line 31051
    $40 = $ReallocAsyncCtx6 + 24 | 0; //@line 31052
    HEAP8[$40 >> 0] = $10; //@line 31053
    $41 = $ReallocAsyncCtx6 + 28 | 0; //@line 31054
    HEAP32[$41 >> 2] = $18; //@line 31055
    sp = STACKTOP; //@line 31056
    return;
   }
   ___async_unwind = 0; //@line 31059
   HEAP32[$ReallocAsyncCtx6 >> 2] = 519; //@line 31060
   $35 = $ReallocAsyncCtx6 + 4 | 0; //@line 31061
   HEAP32[$35 >> 2] = $8; //@line 31062
   $36 = $ReallocAsyncCtx6 + 8 | 0; //@line 31063
   HEAP32[$36 >> 2] = $12; //@line 31064
   $37 = $ReallocAsyncCtx6 + 12 | 0; //@line 31065
   HEAP32[$37 >> 2] = $14; //@line 31066
   $38 = $ReallocAsyncCtx6 + 16 | 0; //@line 31067
   HEAP32[$38 >> 2] = $16; //@line 31068
   $39 = $ReallocAsyncCtx6 + 20 | 0; //@line 31069
   HEAP32[$39 >> 2] = $6; //@line 31070
   $40 = $ReallocAsyncCtx6 + 24 | 0; //@line 31071
   HEAP8[$40 >> 0] = $10; //@line 31072
   $41 = $ReallocAsyncCtx6 + 28 | 0; //@line 31073
   HEAP32[$41 >> 2] = $18; //@line 31074
   sp = STACKTOP; //@line 31075
   return;
  }
 }
 $42 = HEAP32[$6 >> 2] | 0; //@line 31079
 $45 = HEAP32[(HEAP32[$42 >> 2] | 0) + 16 >> 2] | 0; //@line 31082
 $48 = HEAPU8[$8 + 2 >> 0] | 0; //@line 31085
 $52 = HEAP32[$8 + 8 >> 2] & 65535; //@line 31089
 $55 = (HEAP8[$8 + 18 >> 0] | 0) != 0; //@line 31092
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 31093
 FUNCTION_TABLE_viiiiiiiiiiiiiii[$45 & 1]($42, 1, $48, $10 & 255, 1, 0, 8, $52, 0, 0, 0, 0, 0, 1, $55); //@line 31094
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 520; //@line 31097
  $56 = $ReallocAsyncCtx7 + 4 | 0; //@line 31098
  HEAP32[$56 >> 2] = $8; //@line 31099
  $57 = $ReallocAsyncCtx7 + 8 | 0; //@line 31100
  HEAP32[$57 >> 2] = $12; //@line 31101
  $58 = $ReallocAsyncCtx7 + 12 | 0; //@line 31102
  HEAP32[$58 >> 2] = $14; //@line 31103
  $59 = $ReallocAsyncCtx7 + 16 | 0; //@line 31104
  HEAP32[$59 >> 2] = $16; //@line 31105
  $60 = $ReallocAsyncCtx7 + 20 | 0; //@line 31106
  HEAP32[$60 >> 2] = $6; //@line 31107
  $61 = $ReallocAsyncCtx7 + 24 | 0; //@line 31108
  HEAP8[$61 >> 0] = $10; //@line 31109
  $62 = $ReallocAsyncCtx7 + 28 | 0; //@line 31110
  HEAP32[$62 >> 2] = $18; //@line 31111
  sp = STACKTOP; //@line 31112
  return;
 }
 ___async_unwind = 0; //@line 31115
 HEAP32[$ReallocAsyncCtx7 >> 2] = 520; //@line 31116
 $56 = $ReallocAsyncCtx7 + 4 | 0; //@line 31117
 HEAP32[$56 >> 2] = $8; //@line 31118
 $57 = $ReallocAsyncCtx7 + 8 | 0; //@line 31119
 HEAP32[$57 >> 2] = $12; //@line 31120
 $58 = $ReallocAsyncCtx7 + 12 | 0; //@line 31121
 HEAP32[$58 >> 2] = $14; //@line 31122
 $59 = $ReallocAsyncCtx7 + 16 | 0; //@line 31123
 HEAP32[$59 >> 2] = $16; //@line 31124
 $60 = $ReallocAsyncCtx7 + 20 | 0; //@line 31125
 HEAP32[$60 >> 2] = $6; //@line 31126
 $61 = $ReallocAsyncCtx7 + 24 | 0; //@line 31127
 HEAP8[$61 >> 0] = $10; //@line 31128
 $62 = $ReallocAsyncCtx7 + 28 | 0; //@line 31129
 HEAP32[$62 >> 2] = $18; //@line 31130
 sp = STACKTOP; //@line 31131
 return;
}
function _main__async_cb_36($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $26 = 0, $27 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 19434
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19436
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19438
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19440
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19442
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19446
 $13 = HEAP32[HEAP32[$0 + 20 >> 2] >> 2] | 0; //@line 19447
 if ($13 | 0) {
  $16 = HEAP32[$13 + 8 >> 2] | 0; //@line 19451
  $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 19452
  FUNCTION_TABLE_vi[$16 & 1023]($12); //@line 19453
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 648; //@line 19456
   $17 = $ReallocAsyncCtx + 4 | 0; //@line 19457
   HEAP32[$17 >> 2] = $2; //@line 19458
   $18 = $ReallocAsyncCtx + 8 | 0; //@line 19459
   HEAP32[$18 >> 2] = $4; //@line 19460
   $19 = $ReallocAsyncCtx + 12 | 0; //@line 19461
   HEAP32[$19 >> 2] = $6; //@line 19462
   $20 = $ReallocAsyncCtx + 16 | 0; //@line 19463
   HEAP32[$20 >> 2] = $8; //@line 19464
   sp = STACKTOP; //@line 19465
   return;
  }
  ___async_unwind = 0; //@line 19468
  HEAP32[$ReallocAsyncCtx >> 2] = 648; //@line 19469
  $17 = $ReallocAsyncCtx + 4 | 0; //@line 19470
  HEAP32[$17 >> 2] = $2; //@line 19471
  $18 = $ReallocAsyncCtx + 8 | 0; //@line 19472
  HEAP32[$18 >> 2] = $4; //@line 19473
  $19 = $ReallocAsyncCtx + 12 | 0; //@line 19474
  HEAP32[$19 >> 2] = $6; //@line 19475
  $20 = $ReallocAsyncCtx + 16 | 0; //@line 19476
  HEAP32[$20 >> 2] = $8; //@line 19477
  sp = STACKTOP; //@line 19478
  return;
 }
 $22 = $8 + 4 | 0; //@line 19482
 HEAP32[$22 >> 2] = 0; //@line 19484
 HEAP32[$22 + 4 >> 2] = 0; //@line 19487
 HEAP32[$8 >> 2] = 649; //@line 19488
 $26 = $8 + 12 | 0; //@line 19489
 HEAP32[$26 >> 2] = 10128; //@line 19490
 $27 = HEAP32[5475] | 0; //@line 19491
 if (!$27) {
  $37 = HEAP32[2533] | 0; //@line 19495
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 19496
  FUNCTION_TABLE_vii[$37 & 31](21888, $8); //@line 19497
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 651; //@line 19500
   $38 = $ReallocAsyncCtx3 + 4 | 0; //@line 19501
   HEAP32[$38 >> 2] = $2; //@line 19502
   $39 = $ReallocAsyncCtx3 + 8 | 0; //@line 19503
   HEAP32[$39 >> 2] = $4; //@line 19504
   $40 = $ReallocAsyncCtx3 + 12 | 0; //@line 19505
   HEAP32[$40 >> 2] = $6; //@line 19506
   $41 = $ReallocAsyncCtx3 + 16 | 0; //@line 19507
   HEAP32[$41 >> 2] = $26; //@line 19508
   $42 = $ReallocAsyncCtx3 + 20 | 0; //@line 19509
   HEAP32[$42 >> 2] = $8; //@line 19510
   sp = STACKTOP; //@line 19511
   return;
  }
  ___async_unwind = 0; //@line 19514
  HEAP32[$ReallocAsyncCtx3 >> 2] = 651; //@line 19515
  $38 = $ReallocAsyncCtx3 + 4 | 0; //@line 19516
  HEAP32[$38 >> 2] = $2; //@line 19517
  $39 = $ReallocAsyncCtx3 + 8 | 0; //@line 19518
  HEAP32[$39 >> 2] = $4; //@line 19519
  $40 = $ReallocAsyncCtx3 + 12 | 0; //@line 19520
  HEAP32[$40 >> 2] = $6; //@line 19521
  $41 = $ReallocAsyncCtx3 + 16 | 0; //@line 19522
  HEAP32[$41 >> 2] = $26; //@line 19523
  $42 = $ReallocAsyncCtx3 + 20 | 0; //@line 19524
  HEAP32[$42 >> 2] = $8; //@line 19525
  sp = STACKTOP; //@line 19526
  return;
 } else {
  $30 = HEAP32[$27 + 8 >> 2] | 0; //@line 19530
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 19531
  FUNCTION_TABLE_vi[$30 & 1023](21888); //@line 19532
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 650; //@line 19535
   $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 19536
   HEAP32[$31 >> 2] = $2; //@line 19537
   $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 19538
   HEAP32[$32 >> 2] = $4; //@line 19539
   $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 19540
   HEAP32[$33 >> 2] = $6; //@line 19541
   $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 19542
   HEAP32[$34 >> 2] = $26; //@line 19543
   $35 = $ReallocAsyncCtx2 + 20 | 0; //@line 19544
   HEAP32[$35 >> 2] = $8; //@line 19545
   sp = STACKTOP; //@line 19546
   return;
  }
  ___async_unwind = 0; //@line 19549
  HEAP32[$ReallocAsyncCtx2 >> 2] = 650; //@line 19550
  $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 19551
  HEAP32[$31 >> 2] = $2; //@line 19552
  $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 19553
  HEAP32[$32 >> 2] = $4; //@line 19554
  $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 19555
  HEAP32[$33 >> 2] = $6; //@line 19556
  $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 19557
  HEAP32[$34 >> 2] = $26; //@line 19558
  $35 = $ReallocAsyncCtx2 + 20 | 0; //@line 19559
  HEAP32[$35 >> 2] = $8; //@line 19560
  sp = STACKTOP; //@line 19561
  return;
 }
}
function __ZN14LoRaMacCommand15add_mac_commandEhhh($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $15 = 0, $25 = 0, $26 = 0, $32 = 0, $33 = 0, $34 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $72 = 0, $73 = 0, $80 = 0, $81 = 0, $87 = 0, $88 = 0;
 $5 = HEAP8[$0 + 3 >> 0] | 0; //@line 16923
 L1 : do {
  switch ($1 << 24 >> 24) {
  case 2:
   {
    $6 = $0 + 2 | 0; //@line 16927
    $7 = HEAP8[$6 >> 0] | 0; //@line 16928
    if (($7 & 255) < (-128 - $5 & 255)) {
     HEAP8[$6 >> 0] = $7 + 1 << 24 >> 24; //@line 16935
     HEAP8[($7 & 255) + ($0 + 4) >> 0] = 2; //@line 16936
     break L1;
    } else {
     $$0 = -1e3; //@line 16939
     return $$0 | 0; //@line 16940
    }
    break;
   }
  case 3:
   {
    $13 = $0 + 2 | 0; //@line 16945
    $14 = HEAP8[$13 >> 0] | 0; //@line 16946
    $15 = $14 & 255; //@line 16947
    if (((-128 - $5 & 255) + -1 | 0) > ($15 | 0)) {
     HEAP8[$0 + 4 + $15 >> 0] = 3; //@line 16958
     HEAP8[$13 >> 0] = $14 + 2 << 24 >> 24; //@line 16959
     HEAP8[($14 + 1 & 255) + ($0 + 4) >> 0] = $2; //@line 16960
     break L1;
    } else {
     $$0 = -1e3; //@line 16963
     return $$0 | 0; //@line 16964
    }
    break;
   }
  case 4:
   {
    $25 = $0 + 2 | 0; //@line 16969
    $26 = HEAP8[$25 >> 0] | 0; //@line 16970
    if (($26 & 255) < (-128 - $5 & 255)) {
     HEAP8[$25 >> 0] = $26 + 1 << 24 >> 24; //@line 16977
     HEAP8[($26 & 255) + ($0 + 4) >> 0] = 4; //@line 16978
     break L1;
    } else {
     $$0 = -1e3; //@line 16981
     return $$0 | 0; //@line 16982
    }
    break;
   }
  case 5:
   {
    $32 = $0 + 2 | 0; //@line 16987
    $33 = HEAP8[$32 >> 0] | 0; //@line 16988
    $34 = $33 & 255; //@line 16989
    if (((-128 - $5 & 255) + -1 | 0) > ($34 | 0)) {
     HEAP8[$0 + 4 + $34 >> 0] = 5; //@line 16997
     HEAP8[$32 >> 0] = $33 + 2 << 24 >> 24; //@line 16999
     HEAP8[($33 + 1 & 255) + ($0 + 4) >> 0] = $2; //@line 17002
     HEAP8[$0 + 1 >> 0] = 1; //@line 17004
     break L1;
    } else {
     $$0 = -1e3; //@line 17007
     return $$0 | 0; //@line 17008
    }
    break;
   }
  case 6:
   {
    $45 = $0 + 2 | 0; //@line 17013
    $46 = HEAP8[$45 >> 0] | 0; //@line 17014
    $47 = $46 & 255; //@line 17015
    if (((-128 - $5 & 255) + -2 | 0) > ($47 | 0)) {
     HEAP8[$0 + 4 + $47 >> 0] = 6; //@line 17023
     HEAP8[($46 + 1 & 255) + ($0 + 4) >> 0] = $2; //@line 17027
     HEAP8[$45 >> 0] = $46 + 3 << 24 >> 24; //@line 17029
     HEAP8[($46 + 2 & 255) + ($0 + 4) >> 0] = $3; //@line 17032
     break L1;
    } else {
     $$0 = -1e3; //@line 17035
     return $$0 | 0; //@line 17036
    }
    break;
   }
  case 7:
   {
    $60 = $0 + 2 | 0; //@line 17041
    $61 = HEAP8[$60 >> 0] | 0; //@line 17042
    $62 = $61 & 255; //@line 17043
    if (((-128 - $5 & 255) + -1 | 0) > ($62 | 0)) {
     HEAP8[$0 + 4 + $62 >> 0] = 7; //@line 17054
     HEAP8[$60 >> 0] = $61 + 2 << 24 >> 24; //@line 17055
     HEAP8[($61 + 1 & 255) + ($0 + 4) >> 0] = $2; //@line 17056
     break L1;
    } else {
     $$0 = -1e3; //@line 17059
     return $$0 | 0; //@line 17060
    }
    break;
   }
  case 8:
   {
    $72 = $0 + 2 | 0; //@line 17065
    $73 = HEAP8[$72 >> 0] | 0; //@line 17066
    if (($73 & 255) < (-128 - $5 & 255)) {
     HEAP8[$72 >> 0] = $73 + 1 << 24 >> 24; //@line 17074
     HEAP8[($73 & 255) + ($0 + 4) >> 0] = 8; //@line 17075
     HEAP8[$0 + 1 >> 0] = 1; //@line 17076
     break L1;
    } else {
     $$0 = -1e3; //@line 17079
     return $$0 | 0; //@line 17080
    }
    break;
   }
  case 9:
   {
    $80 = $0 + 2 | 0; //@line 17085
    $81 = HEAP8[$80 >> 0] | 0; //@line 17086
    if (($81 & 255) < (-128 - $5 & 255)) {
     HEAP8[$80 >> 0] = $81 + 1 << 24 >> 24; //@line 17093
     HEAP8[($81 & 255) + ($0 + 4) >> 0] = 9; //@line 17094
     break L1;
    } else {
     $$0 = -1e3; //@line 17097
     return $$0 | 0; //@line 17098
    }
    break;
   }
  case 10:
   {
    $87 = $0 + 2 | 0; //@line 17103
    $88 = HEAP8[$87 >> 0] | 0; //@line 17104
    if (($88 & 255) < (-128 - $5 & 255)) {
     HEAP8[($88 & 255) + ($0 + 4) >> 0] = 10; //@line 17111
     HEAP8[$87 >> 0] = $88 + 2 << 24 >> 24; //@line 17113
     HEAP8[($88 + 1 & 255) + ($0 + 4) >> 0] = $2; //@line 17116
     HEAP8[$0 + 1 >> 0] = 1; //@line 17118
     break L1;
    } else {
     $$0 = -1e3; //@line 17121
     return $$0 | 0; //@line 17122
    }
    break;
   }
  default:
   {
    $$0 = -1002; //@line 17127
    return $$0 | 0; //@line 17128
   }
  }
 } while (0);
 HEAP8[$0 >> 0] = 1; //@line 17132
 $$0 = 0; //@line 17133
 return $$0 | 0; //@line 17134
}
function __ZN7LoRaMac21send_frame_on_channelEh__async_cb_82($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $37 = 0, $4 = 0, $40 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 21792
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21794
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21796
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 21798
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21800
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21802
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21804
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21806
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 21808
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 21810
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 21812
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 21814
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 21816
 HEAP8[$4 >> 0] = 0; //@line 21817
 HEAP8[$2 >> 0] = $6; //@line 21818
 $25 = $8 + 1097 | 0; //@line 21819
 HEAP8[$2 + 1 >> 0] = HEAP8[$25 >> 0] | 0; //@line 21822
 HEAP8[$2 + 2 >> 0] = HEAP8[$8 + 1096 >> 0] | 0; //@line 21826
 HEAP32[$2 + 4 >> 2] = HEAP32[$8 + 1144 >> 2]; //@line 21830
 HEAP32[$2 + 8 >> 2] = HEAP32[$8 + 1148 >> 2]; //@line 21834
 $37 = $8 + 636 | 0; //@line 21835
 HEAP16[$2 + 12 >> 1] = HEAP16[$37 >> 1] | 0; //@line 21838
 $40 = HEAP32[$8 >> 2] | 0; //@line 21839
 $43 = HEAP32[(HEAP32[$40 >> 2] | 0) + 32 >> 2] | 0; //@line 21842
 $44 = $8 + 992 | 0; //@line 21843
 $ReallocAsyncCtx = _emscripten_realloc_async_context(64) | 0; //@line 21844
 FUNCTION_TABLE_iiiii[$43 & 3]($40, $2, $4, $44) | 0; //@line 21845
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 402; //@line 21848
  $45 = $ReallocAsyncCtx + 4 | 0; //@line 21849
  HEAP32[$45 >> 2] = $10; //@line 21850
  $46 = $ReallocAsyncCtx + 8 | 0; //@line 21851
  HEAP32[$46 >> 2] = $12; //@line 21852
  $47 = $ReallocAsyncCtx + 12 | 0; //@line 21853
  HEAP32[$47 >> 2] = $14; //@line 21854
  $48 = $ReallocAsyncCtx + 16 | 0; //@line 21855
  HEAP32[$48 >> 2] = $16; //@line 21856
  $49 = $ReallocAsyncCtx + 20 | 0; //@line 21857
  HEAP32[$49 >> 2] = $8; //@line 21858
  $50 = $ReallocAsyncCtx + 24 | 0; //@line 21859
  HEAP32[$50 >> 2] = $25; //@line 21860
  $51 = $ReallocAsyncCtx + 28 | 0; //@line 21861
  HEAP32[$51 >> 2] = $4; //@line 21862
  $52 = $ReallocAsyncCtx + 32 | 0; //@line 21863
  HEAP32[$52 >> 2] = $44; //@line 21864
  $53 = $ReallocAsyncCtx + 36 | 0; //@line 21865
  HEAP32[$53 >> 2] = $18; //@line 21866
  $54 = $ReallocAsyncCtx + 40 | 0; //@line 21867
  HEAP32[$54 >> 2] = $20; //@line 21868
  $55 = $ReallocAsyncCtx + 44 | 0; //@line 21869
  HEAP32[$55 >> 2] = $37; //@line 21870
  $56 = $ReallocAsyncCtx + 48 | 0; //@line 21871
  HEAP32[$56 >> 2] = $22; //@line 21872
  $57 = $ReallocAsyncCtx + 52 | 0; //@line 21873
  HEAP32[$57 >> 2] = $24; //@line 21874
  $58 = $ReallocAsyncCtx + 56 | 0; //@line 21875
  HEAP32[$58 >> 2] = $8; //@line 21876
  $59 = $ReallocAsyncCtx + 60 | 0; //@line 21877
  HEAP32[$59 >> 2] = $2; //@line 21878
  sp = STACKTOP; //@line 21879
  return;
 }
 ___async_unwind = 0; //@line 21882
 HEAP32[$ReallocAsyncCtx >> 2] = 402; //@line 21883
 $45 = $ReallocAsyncCtx + 4 | 0; //@line 21884
 HEAP32[$45 >> 2] = $10; //@line 21885
 $46 = $ReallocAsyncCtx + 8 | 0; //@line 21886
 HEAP32[$46 >> 2] = $12; //@line 21887
 $47 = $ReallocAsyncCtx + 12 | 0; //@line 21888
 HEAP32[$47 >> 2] = $14; //@line 21889
 $48 = $ReallocAsyncCtx + 16 | 0; //@line 21890
 HEAP32[$48 >> 2] = $16; //@line 21891
 $49 = $ReallocAsyncCtx + 20 | 0; //@line 21892
 HEAP32[$49 >> 2] = $8; //@line 21893
 $50 = $ReallocAsyncCtx + 24 | 0; //@line 21894
 HEAP32[$50 >> 2] = $25; //@line 21895
 $51 = $ReallocAsyncCtx + 28 | 0; //@line 21896
 HEAP32[$51 >> 2] = $4; //@line 21897
 $52 = $ReallocAsyncCtx + 32 | 0; //@line 21898
 HEAP32[$52 >> 2] = $44; //@line 21899
 $53 = $ReallocAsyncCtx + 36 | 0; //@line 21900
 HEAP32[$53 >> 2] = $18; //@line 21901
 $54 = $ReallocAsyncCtx + 40 | 0; //@line 21902
 HEAP32[$54 >> 2] = $20; //@line 21903
 $55 = $ReallocAsyncCtx + 44 | 0; //@line 21904
 HEAP32[$55 >> 2] = $37; //@line 21905
 $56 = $ReallocAsyncCtx + 48 | 0; //@line 21906
 HEAP32[$56 >> 2] = $22; //@line 21907
 $57 = $ReallocAsyncCtx + 52 | 0; //@line 21908
 HEAP32[$57 >> 2] = $24; //@line 21909
 $58 = $ReallocAsyncCtx + 56 | 0; //@line 21910
 HEAP32[$58 >> 2] = $8; //@line 21911
 $59 = $ReallocAsyncCtx + 60 | 0; //@line 21912
 HEAP32[$59 >> 2] = $2; //@line 21913
 sp = STACKTOP; //@line 21914
 return;
}
function __ZL18lora_event_handler11lora_events($0) {
 $0 = $0 | 0;
 var $$07$i = 0, $1 = 0, $10 = 0, $14 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 7018
 STACKTOP = STACKTOP + 96 | 0; //@line 7019
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96); //@line 7019
 $vararg_buffer10 = sp + 32 | 0; //@line 7020
 $vararg_buffer7 = sp + 24 | 0; //@line 7021
 $vararg_buffer4 = sp + 16 | 0; //@line 7022
 $vararg_buffer1 = sp + 8 | 0; //@line 7023
 $vararg_buffer = sp; //@line 7024
 $1 = sp + 36 | 0; //@line 7025
 switch ($0 | 0) {
 case 0:
  {
   $AsyncCtx27 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7028
   _puts(14284) | 0; //@line 7029
   if (___async) {
    HEAP32[$AsyncCtx27 >> 2] = 658; //@line 7032
    sp = STACKTOP; //@line 7033
    STACKTOP = sp; //@line 7034
    return;
   }
   _emscripten_free_async_context($AsyncCtx27 | 0); //@line 7036
   STACKTOP = sp; //@line 7037
   return;
  }
 case 1:
  {
   __ZN6events10EventQueue14break_dispatchEv(21680); //@line 7041
   $AsyncCtx23 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7042
   _puts(14308) | 0; //@line 7043
   if (___async) {
    HEAP32[$AsyncCtx23 >> 2] = 659; //@line 7046
    sp = STACKTOP; //@line 7047
    STACKTOP = sp; //@line 7048
    return;
   }
   _emscripten_free_async_context($AsyncCtx23 | 0); //@line 7050
   STACKTOP = sp; //@line 7051
   return;
  }
 case 2:
  {
   $AsyncCtx19 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7055
   _puts(14334) | 0; //@line 7056
   if (___async) {
    HEAP32[$AsyncCtx19 >> 2] = 660; //@line 7059
    sp = STACKTOP; //@line 7060
    STACKTOP = sp; //@line 7061
    return;
   }
   _emscripten_free_async_context($AsyncCtx19 | 0); //@line 7063
   STACKTOP = sp; //@line 7064
   return;
  }
 case 6:
 case 5:
 case 4:
 case 3:
  {
   HEAP32[$vararg_buffer >> 2] = $0; //@line 7068
   _printf(14365, $vararg_buffer) | 0; //@line 7069
   STACKTOP = sp; //@line 7070
   return;
  }
 case 7:
  {
   $AsyncCtx15 = _emscripten_alloc_async_context(32, sp) | 0; //@line 7074
   _puts(14402) | 0; //@line 7075
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 661; //@line 7078
    HEAP32[$AsyncCtx15 + 4 >> 2] = $1; //@line 7080
    HEAP32[$AsyncCtx15 + 8 >> 2] = $vararg_buffer1; //@line 7082
    HEAP32[$AsyncCtx15 + 12 >> 2] = $vararg_buffer1; //@line 7084
    HEAP32[$AsyncCtx15 + 16 >> 2] = $vararg_buffer4; //@line 7086
    HEAP32[$AsyncCtx15 + 20 >> 2] = $vararg_buffer4; //@line 7088
    HEAP32[$AsyncCtx15 + 24 >> 2] = $vararg_buffer7; //@line 7090
    HEAP32[$AsyncCtx15 + 28 >> 2] = $vararg_buffer7; //@line 7092
    sp = STACKTOP; //@line 7093
    STACKTOP = sp; //@line 7094
    return;
   }
   _emscripten_free_async_context($AsyncCtx15 | 0); //@line 7096
   dest = $1; //@line 7097
   stop = dest + 50 | 0; //@line 7097
   do {
    HEAP8[dest >> 0] = 0; //@line 7097
    dest = dest + 1 | 0; //@line 7097
   } while ((dest | 0) < (stop | 0));
   $9 = __ZN16LoRaWANInterface7receiveEhPhti(21880, 15, $1, 50, 3) | 0; //@line 7098
   $10 = $9 << 16 >> 16; //@line 7099
   if ($9 << 16 >> 16 < 0) {
    HEAP32[$vararg_buffer1 >> 2] = $10; //@line 7102
    _printf(14439, $vararg_buffer1) | 0; //@line 7103
   } else {
    HEAP32[$vararg_buffer4 >> 2] = $10; //@line 7105
    _printf(14466, $vararg_buffer4) | 0; //@line 7106
    if ($9 << 16 >> 16) {
     $$07$i = 0; //@line 7109
     $14 = 0; //@line 7109
     do {
      HEAP32[$vararg_buffer7 >> 2] = HEAPU8[$1 + $14 >> 0]; //@line 7114
      _printf(14493, $vararg_buffer7) | 0; //@line 7115
      $$07$i = $$07$i + 1 << 24 >> 24; //@line 7116
      $14 = $$07$i & 255; //@line 7117
     } while (($14 | 0) < ($10 | 0));
    }
   }
   STACKTOP = sp; //@line 7127
   return;
  }
 case 9:
 case 8:
  {
   HEAP32[$vararg_buffer10 >> 2] = $0; //@line 7131
   _printf(14496, $vararg_buffer10) | 0; //@line 7132
   STACKTOP = sp; //@line 7133
   return;
  }
 case 10:
  {
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7137
   _puts(14528) | 0; //@line 7138
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 662; //@line 7141
    sp = STACKTOP; //@line 7142
    STACKTOP = sp; //@line 7143
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 7145
   STACKTOP = sp; //@line 7146
   return;
  }
 default:
  {
   STACKTOP = sp; //@line 7150
   return;
  }
 }
}
function _equeue_cancel($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$sink$in$i$i = 0, $$sink$in$in$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $24 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $42 = 0, $44 = 0, $46 = 0, $49 = 0, $5 = 0, $56 = 0, $57 = 0, $59 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $70 = 0, $72 = 0, $73 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 2541
 if (!$1) {
  return;
 }
 $5 = $0 + 16 | 0; //@line 2548
 $10 = (HEAP32[$0 + 12 >> 2] | 0) + ((1 << HEAP32[$5 >> 2]) + -1 & $1) | 0; //@line 2553
 $11 = $0 + 128 | 0; //@line 2554
 _equeue_mutex_lock($11); //@line 2555
 $12 = $10 + 4 | 0; //@line 2556
 $13 = HEAP8[$12 >> 0] | 0; //@line 2557
 $14 = $13 & 255; //@line 2558
 $15 = HEAP32[$5 >> 2] | 0; //@line 2559
 if (($1 >> $15 | 0) != ($14 | 0)) {
  _equeue_mutex_unlock($11); //@line 2563
  return;
 }
 HEAP32[$10 + 32 >> 2] = 0; //@line 2567
 HEAP32[$10 + 24 >> 2] = -1; //@line 2569
 $24 = (HEAP32[$10 + 20 >> 2] | 0) - (HEAP32[$0 + 4 >> 2] | 0) | 0; //@line 2574
 do {
  if (($24 | 0) >= 0) {
   if (!$24) {
    if ((HEAP8[$10 + 5 >> 0] | 0) != (HEAP8[$0 + 9 >> 0] | 0)) {
     break;
    }
   }
   $32 = $10 + 12 | 0; //@line 2589
   $33 = HEAP32[$32 >> 2] | 0; //@line 2590
   $35 = $10 + 8 | 0; //@line 2592
   $36 = HEAP32[$35 >> 2] | 0; //@line 2593
   $37 = $33; //@line 2594
   if (!$33) {
    $44 = $10 + 16 | 0; //@line 2596
    HEAP32[HEAP32[$44 >> 2] >> 2] = $36; //@line 2598
    $46 = HEAP32[$35 >> 2] | 0; //@line 2599
    if ($46 | 0) {
     $$sink$in$in$i = $44; //@line 2602
     $49 = $46; //@line 2602
     label = 13; //@line 2603
    }
   } else {
    $38 = $33 + 8 | 0; //@line 2606
    HEAP32[$38 >> 2] = $36; //@line 2607
    if ($36 | 0) {
     HEAP32[$36 + 16 >> 2] = $38; //@line 2612
    }
    $42 = $10 + 16 | 0; //@line 2614
    HEAP32[HEAP32[$42 >> 2] >> 2] = $37; //@line 2616
    $$sink$in$in$i = $42; //@line 2618
    $49 = HEAP32[$32 >> 2] | 0; //@line 2618
    label = 13; //@line 2619
   }
   if ((label | 0) == 13) {
    HEAP32[$49 + 16 >> 2] = HEAP32[$$sink$in$in$i >> 2]; //@line 2624
   }
   HEAP8[$12 >> 0] = (($13 + 1 & 255) << $15 | 0) == 0 ? 1 : $14 + 1 & 255; //@line 2633
   _equeue_mutex_unlock($11); //@line 2634
   $56 = $10 + 36 | 0; //@line 2635
   $57 = $56 + -36 | 0; //@line 2636
   $59 = HEAP32[$56 + -8 >> 2] | 0; //@line 2638
   do {
    if ($59 | 0) {
     $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 2642
     FUNCTION_TABLE_vi[$59 & 1023]($56); //@line 2643
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 104; //@line 2646
      HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2648
      HEAP32[$AsyncCtx + 8 >> 2] = $56; //@line 2650
      HEAP32[$AsyncCtx + 12 >> 2] = $57; //@line 2652
      sp = STACKTOP; //@line 2653
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 2656
      break;
     }
    }
   } while (0);
   $64 = $0 + 156 | 0; //@line 2661
   _equeue_mutex_lock($64); //@line 2662
   $65 = $0 + 24 | 0; //@line 2663
   $66 = HEAP32[$65 >> 2] | 0; //@line 2664
   L28 : do {
    if (!$66) {
     $$02329$i$i = $65; //@line 2668
     label = 24; //@line 2669
    } else {
     $68 = HEAP32[$57 >> 2] | 0; //@line 2671
     $$025$i$i = $65; //@line 2672
     $70 = $66; //@line 2672
     while (1) {
      $69 = HEAP32[$70 >> 2] | 0; //@line 2674
      if ($69 >>> 0 >= $68 >>> 0) {
       break;
      }
      $72 = $70 + 8 | 0; //@line 2679
      $73 = HEAP32[$72 >> 2] | 0; //@line 2680
      if (!$73) {
       $$02329$i$i = $72; //@line 2683
       label = 24; //@line 2684
       break L28;
      } else {
       $$025$i$i = $72; //@line 2687
       $70 = $73; //@line 2687
      }
     }
     if (($69 | 0) == ($68 | 0)) {
      HEAP32[$56 + -24 >> 2] = $70; //@line 2693
      $$02330$i$i = $$025$i$i; //@line 2696
      $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 2696
     } else {
      $$02329$i$i = $$025$i$i; //@line 2698
      label = 24; //@line 2699
     }
    }
   } while (0);
   if ((label | 0) == 24) {
    HEAP32[$56 + -24 >> 2] = 0; //@line 2705
    $$02330$i$i = $$02329$i$i; //@line 2706
    $$sink$in$i$i = $$02329$i$i; //@line 2706
   }
   HEAP32[$56 + -28 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 2710
   HEAP32[$$02330$i$i >> 2] = $57; //@line 2711
   _equeue_mutex_unlock($64); //@line 2712
   return;
  }
 } while (0);
 _equeue_mutex_unlock($11); //@line 2716
 return;
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $22 = 0, $3 = 0, $31 = 0, $32 = 0, $36 = 0, $37 = 0, $4 = 0, $40 = 0, $43 = 0, $5 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 23625
 STACKTOP = STACKTOP + 16 | 0; //@line 23626
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 23626
 $3 = sp; //@line 23627
 $4 = HEAP32[$0 >> 2] | 0; //@line 23628
 $5 = $1 + 12 | 0; //@line 23629
 $6 = HEAP32[$5 >> 2] | 0; //@line 23630
 do {
  if (!$6) {
   $16 = 0; //@line 23634
  } else {
   $9 = HEAP32[$6 + 4 >> 2] | 0; //@line 23637
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 23638
   FUNCTION_TABLE_vii[$9 & 31]($3, $1); //@line 23639
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 560; //@line 23642
    HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 23644
    HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 23646
    HEAP32[$AsyncCtx + 12 >> 2] = $5; //@line 23648
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 23650
    HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 23652
    sp = STACKTOP; //@line 23653
    STACKTOP = sp; //@line 23654
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 23656
    $16 = HEAP32[$5 >> 2] | 0; //@line 23658
    break;
   }
  }
 } while (0);
 $15 = $3 + 12 | 0; //@line 23663
 HEAP32[$15 >> 2] = $16; //@line 23664
 $17 = _equeue_alloc($4, 16) | 0; //@line 23665
 do {
  if (!$17) {
   $$0$i = 0; //@line 23669
  } else {
   $19 = HEAP32[$15 >> 2] | 0; //@line 23671
   do {
    if (!$19) {
     $31 = 0; //@line 23675
    } else {
     $22 = HEAP32[$19 + 4 >> 2] | 0; //@line 23678
     $AsyncCtx2 = _emscripten_alloc_async_context(32, sp) | 0; //@line 23679
     FUNCTION_TABLE_vii[$22 & 31]($17, $3); //@line 23680
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 561; //@line 23683
      HEAP32[$AsyncCtx2 + 4 >> 2] = $15; //@line 23685
      HEAP32[$AsyncCtx2 + 8 >> 2] = $17; //@line 23687
      HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 23689
      HEAP32[$AsyncCtx2 + 16 >> 2] = $4; //@line 23691
      HEAP32[$AsyncCtx2 + 20 >> 2] = $1; //@line 23693
      HEAP32[$AsyncCtx2 + 24 >> 2] = $15; //@line 23695
      HEAP32[$AsyncCtx2 + 28 >> 2] = $3; //@line 23697
      sp = STACKTOP; //@line 23698
      STACKTOP = sp; //@line 23699
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx2 | 0); //@line 23701
      $31 = HEAP32[$15 >> 2] | 0; //@line 23703
      break;
     }
    }
   } while (0);
   HEAP32[$17 + 12 >> 2] = $31; //@line 23709
   _equeue_event_delay($17, $2); //@line 23710
   _equeue_event_dtor($17, 281); //@line 23711
   $AsyncCtx9 = _emscripten_alloc_async_context(16, sp) | 0; //@line 23712
   $32 = _equeue_post($4, 282, $17) | 0; //@line 23713
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 562; //@line 23716
    HEAP32[$AsyncCtx9 + 4 >> 2] = $1; //@line 23718
    HEAP32[$AsyncCtx9 + 8 >> 2] = $15; //@line 23720
    HEAP32[$AsyncCtx9 + 12 >> 2] = $3; //@line 23722
    sp = STACKTOP; //@line 23723
    STACKTOP = sp; //@line 23724
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx9 | 0); //@line 23726
    $$0$i = $32; //@line 23727
    break;
   }
  }
 } while (0);
 $36 = $1 + 16 | 0; //@line 23732
 HEAP32[$36 >> 2] = $$0$i; //@line 23733
 $37 = HEAP32[$15 >> 2] | 0; //@line 23734
 do {
  if (!$37) {
   $43 = $$0$i; //@line 23738
  } else {
   $40 = HEAP32[$37 + 8 >> 2] | 0; //@line 23741
   $AsyncCtx6 = _emscripten_alloc_async_context(8, sp) | 0; //@line 23742
   FUNCTION_TABLE_vi[$40 & 1023]($3); //@line 23743
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 563; //@line 23746
    HEAP32[$AsyncCtx6 + 4 >> 2] = $36; //@line 23748
    sp = STACKTOP; //@line 23749
    STACKTOP = sp; //@line 23750
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx6 | 0); //@line 23752
    $43 = HEAP32[$36 >> 2] | 0; //@line 23754
    break;
   }
  }
 } while (0);
 if ($43 | 0) {
  STACKTOP = sp; //@line 23761
  return;
 }
 $AsyncCtx13 = _emscripten_alloc_async_context(4, sp) | 0; //@line 23763
 _mbed_assert_internal(12547, 12565, 57); //@line 23764
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 564; //@line 23767
  sp = STACKTOP; //@line 23768
  STACKTOP = sp; //@line 23769
  return;
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 23771
 STACKTOP = sp; //@line 23772
 return;
}
function _gcm_mult($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$07475 = 0, $100 = 0, $101 = 0, $103 = 0, $109 = 0, $110 = 0, $111 = 0, $113 = 0, $116 = 0, $120 = 0, $126 = 0, $130 = 0, $134 = 0, $140 = 0, $144 = 0, $148 = 0, $15 = 0, $154 = 0, $158 = 0, $162 = 0, $22 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $46 = 0, $51 = 0, $6 = 0, $60 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $82 = 0, $88 = 0, $92 = 0, $94 = 0;
 $4 = HEAP8[$1 + 15 >> 0] | 0; //@line 4346
 $6 = $4 & 15; //@line 4348
 $8 = $0 + 200 + ($6 << 3) | 0; //@line 4350
 $15 = $0 + 72 + ($6 << 3) | 0; //@line 4357
 $$07475 = 15; //@line 4363
 $22 = $4; //@line 4363
 $27 = HEAP32[$15 >> 2] | 0; //@line 4363
 $28 = HEAP32[$8 >> 2] | 0; //@line 4363
 $29 = HEAP32[$8 + 4 >> 2] | 0; //@line 4363
 $32 = HEAP32[$15 + 4 >> 2] | 0; //@line 4363
 while (1) {
  if (($$07475 | 0) == 15) {
   $69 = $27; //@line 4368
   $70 = $28; //@line 4368
   $71 = $29; //@line 4368
   $74 = $32; //@line 4368
  } else {
   $25 = $22 & 15; //@line 4371
   $30 = _bitshift64Shl($28 | 0, $29 | 0, 60) | 0; //@line 4373
   $31 = tempRet0; //@line 4374
   $33 = _bitshift64Lshr($27 | 0, $32 | 0, 4) | 0; //@line 4375
   $36 = tempRet0 | $31; //@line 4378
   $37 = _bitshift64Lshr($28 | 0, $29 | 0, 4) | 0; //@line 4379
   $38 = tempRet0; //@line 4380
   $40 = 208 + (($27 & 15) << 3) | 0; //@line 4382
   $46 = _bitshift64Shl(HEAP32[$40 >> 2] | 0, HEAP32[$40 + 4 >> 2] | 0, 48) | 0; //@line 4388
   $51 = $0 + 200 + ($25 << 3) | 0; //@line 4393
   $60 = $0 + 72 + ($25 << 3) | 0; //@line 4402
   $69 = HEAP32[$60 >> 2] ^ ($33 | $30); //@line 4410
   $70 = $46 ^ $37 ^ HEAP32[$51 >> 2]; //@line 4410
   $71 = tempRet0 ^ $38 ^ HEAP32[$51 + 4 >> 2]; //@line 4410
   $74 = HEAP32[$60 + 4 >> 2] ^ $36; //@line 4410
  }
  $72 = _bitshift64Shl($70 | 0, $71 | 0, 60) | 0; //@line 4413
  $73 = tempRet0; //@line 4414
  $75 = _bitshift64Lshr($69 | 0, $74 | 0, 4) | 0; //@line 4415
  $78 = tempRet0 | $73; //@line 4418
  $79 = _bitshift64Lshr($70 | 0, $71 | 0, 4) | 0; //@line 4419
  $80 = tempRet0; //@line 4420
  $82 = 208 + (($69 & 15) << 3) | 0; //@line 4422
  $88 = _bitshift64Shl(HEAP32[$82 >> 2] | 0, HEAP32[$82 + 4 >> 2] | 0, 48) | 0; //@line 4428
  $92 = ($22 & 255) >>> 4 & 255; //@line 4432
  $94 = $0 + 200 + ($92 << 3) | 0; //@line 4434
  $100 = $88 ^ $79 ^ HEAP32[$94 >> 2]; //@line 4440
  $101 = tempRet0 ^ $80 ^ HEAP32[$94 + 4 >> 2]; //@line 4441
  $103 = $0 + 72 + ($92 << 3) | 0; //@line 4443
  $109 = HEAP32[$103 >> 2] ^ ($75 | $72); //@line 4449
  $110 = HEAP32[$103 + 4 >> 2] ^ $78; //@line 4450
  $111 = $$07475 + -1 | 0; //@line 4451
  if (($$07475 | 0) <= 0) {
   break;
  }
  $$07475 = $111; //@line 4458
  $22 = HEAP8[$1 + $111 >> 0] | 0; //@line 4458
  $27 = $109; //@line 4458
  $28 = $100; //@line 4458
  $29 = $101; //@line 4458
  $32 = $110; //@line 4458
 }
 $113 = _bitshift64Lshr($100 | 0, $101 | 0, 56) | 0; //@line 4460
 HEAP8[$2 >> 0] = $113; //@line 4463
 $116 = _bitshift64Lshr($100 | 0, $101 | 0, 48) | 0; //@line 4464
 HEAP8[$2 + 1 >> 0] = $116; //@line 4468
 $120 = _bitshift64Lshr($100 | 0, $101 | 0, 40) | 0; //@line 4469
 HEAP8[$2 + 2 >> 0] = $120; //@line 4473
 HEAP8[$2 + 3 >> 0] = $101; //@line 4476
 $126 = _bitshift64Lshr($100 | 0, $101 | 0, 24) | 0; //@line 4477
 HEAP8[$2 + 4 >> 0] = $126; //@line 4481
 $130 = _bitshift64Lshr($100 | 0, $101 | 0, 16) | 0; //@line 4482
 HEAP8[$2 + 5 >> 0] = $130; //@line 4486
 $134 = _bitshift64Lshr($100 | 0, $101 | 0, 8) | 0; //@line 4487
 HEAP8[$2 + 6 >> 0] = $134; //@line 4491
 HEAP8[$2 + 7 >> 0] = $100; //@line 4494
 $140 = _bitshift64Lshr($109 | 0, $110 | 0, 56) | 0; //@line 4495
 HEAP8[$2 + 8 >> 0] = $140; //@line 4499
 $144 = _bitshift64Lshr($109 | 0, $110 | 0, 48) | 0; //@line 4500
 HEAP8[$2 + 9 >> 0] = $144; //@line 4504
 $148 = _bitshift64Lshr($109 | 0, $110 | 0, 40) | 0; //@line 4505
 HEAP8[$2 + 10 >> 0] = $148; //@line 4509
 HEAP8[$2 + 11 >> 0] = $110; //@line 4512
 $154 = _bitshift64Lshr($109 | 0, $110 | 0, 24) | 0; //@line 4513
 HEAP8[$2 + 12 >> 0] = $154; //@line 4517
 $158 = _bitshift64Lshr($109 | 0, $110 | 0, 16) | 0; //@line 4518
 HEAP8[$2 + 13 >> 0] = $158; //@line 4522
 $162 = _bitshift64Lshr($109 | 0, $110 | 0, 8) | 0; //@line 4523
 HEAP8[$2 + 14 >> 0] = $162; //@line 4527
 HEAP8[$2 + 15 >> 0] = $109; //@line 4530
 return;
}
function __ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$0$i15 = 0, $$1 = 0, $14 = 0, $16 = 0, $2 = 0, $20 = 0, $24 = 0, $28 = 0, $3 = 0, $30 = 0, $32 = 0, $33 = 0, $34 = 0, $46 = 0, $49 = 0, $56 = 0, $58 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 15614
 STACKTOP = STACKTOP + 16 | 0; //@line 15615
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15615
 $2 = sp + 1 | 0; //@line 15616
 $3 = sp; //@line 15617
 if (HEAP32[$0 + 968 >> 2] | 0) {
  $$1 = -1e3; //@line 15622
  STACKTOP = sp; //@line 15623
  return $$1 | 0; //@line 15623
 }
 $8 = HEAP8[$1 + 5 >> 0] | 0; //@line 15626
 if ($8 << 24 >> 24 > (__ZN7LoRaPHY23get_minimum_tx_datarateEv(HEAP32[$0 >> 2] | 0) | 0) << 24 >> 24) {
  $24 = $8; //@line 15631
 } else {
  $24 = __ZN7LoRaPHY23get_minimum_tx_datarateEv(HEAP32[$0 >> 2] | 0) | 0; //@line 15635
 }
 HEAP8[$3 >> 0] = 0; //@line 15637
 $14 = $0 + 288 | 0; //@line 15638
 __ZN11LoRaMacMcps18reset_confirmationEv($14); //@line 15639
 HEAP8[$0 + 895 >> 0] = 1; //@line 15641
 $16 = $0 + 894 | 0; //@line 15642
 HEAP8[$16 >> 0] = 1; //@line 15643
 switch (HEAP32[$1 >> 2] | 0) {
 case 0:
  {
   HEAP8[$3 >> 0] = 64; //@line 15647
   label = 8; //@line 15648
   break;
  }
 case 1:
  {
   HEAP8[$3 >> 0] = -128; //@line 15652
   HEAP8[$16 >> 0] = HEAP8[$1 + 6 >> 0] | 0; //@line 15655
   label = 8; //@line 15656
   break;
  }
 case 3:
  {
   HEAP8[$3 >> 0] = -32; //@line 15660
   label = 8; //@line 15661
   break;
  }
 default:
  {
   $$0 = -1003; //@line 15665
  }
 }
 do {
  if ((label | 0) == 8) {
   $20 = $0 + 1156 | 0; //@line 15670
   if (!(HEAP8[$20 >> 0] | 0)) {
    if (!(__ZN7LoRaPHY18verify_tx_datarateEhb(HEAP32[$0 >> 2] | 0, $24, 0) | 0)) {
     $$0 = -1003; //@line 15677
     break;
    }
    HEAP8[$0 + 1097 >> 0] = $24; //@line 15681
    $33 = HEAP8[$20 >> 0] << 7 & 255; //@line 15684
   } else {
    $33 = -128; //@line 15686
   }
   $28 = HEAP8[$1 + 4 >> 0] | 0; //@line 15689
   $30 = HEAP32[$1 + 8 >> 2] | 0; //@line 15691
   $32 = HEAP16[$1 + 12 >> 1] | 0; //@line 15693
   HEAP8[$2 >> 0] = $33; //@line 15694
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 15695
   $34 = __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt($0, $3, $2, $28, $30, $32) | 0; //@line 15696
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 458; //@line 15699
    HEAP32[$AsyncCtx + 4 >> 2] = $14; //@line 15701
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 15703
    HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 15705
    HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 15707
    HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 15709
    sp = STACKTOP; //@line 15710
    STACKTOP = sp; //@line 15711
    return 0; //@line 15711
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 15713
   if (!$34) {
    HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($14) | 0) + 11 >> 0] = 0; //@line 15718
    HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($14) | 0) + 10 >> 0] = 0; //@line 15721
    $46 = HEAP32[$0 + 956 >> 2] | 0; //@line 15723
    HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($14) | 0) + 16 >> 2] = $46; //@line 15726
    $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 15727
    $49 = __ZN7LoRaMac11schedule_txEv($0) | 0; //@line 15728
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 459; //@line 15731
     HEAP32[$AsyncCtx2 + 4 >> 2] = $2; //@line 15733
     HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 15735
     HEAP32[$AsyncCtx2 + 12 >> 2] = $14; //@line 15737
     HEAP32[$AsyncCtx2 + 16 >> 2] = $0; //@line 15739
     HEAP32[$AsyncCtx2 + 20 >> 2] = $3; //@line 15741
     sp = STACKTOP; //@line 15742
     STACKTOP = sp; //@line 15743
     return 0; //@line 15743
    }
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 15745
    if (!$49) {
     $56 = HEAP32[$1 >> 2] | 0; //@line 15748
     HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($14) | 0) >> 2] = $56; //@line 15750
     $58 = $0 + 944 | 0; //@line 15751
     HEAP8[$58 >> 0] = HEAP8[$58 >> 0] | 1; //@line 15754
     $$0 = 0; //@line 15755
     break;
    } else {
     $$0$i15 = $49; //@line 15758
    }
   } else {
    $$0$i15 = $34; //@line 15761
   }
   HEAP8[$0 + 373 >> 0] = 0; //@line 15764
   $$0 = $$0$i15; //@line 15765
  }
 } while (0);
 $$1 = $$0; //@line 15768
 STACKTOP = sp; //@line 15769
 return $$1 | 0; //@line 15769
}
function __ZN12radio_eventsD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $29 = 0, $30 = 0, $32 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $42 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 13842
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13844
 $4 = HEAP32[$2 + 92 >> 2] | 0; //@line 13846
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 13851
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 13852
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 80 | 0); //@line 13853
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 257; //@line 13856
   $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 13857
   HEAP32[$9 >> 2] = $2; //@line 13858
   sp = STACKTOP; //@line 13859
   return;
  }
  ___async_unwind = 0; //@line 13862
  HEAP32[$ReallocAsyncCtx2 >> 2] = 257; //@line 13863
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 13864
  HEAP32[$9 >> 2] = $2; //@line 13865
  sp = STACKTOP; //@line 13866
  return;
 }
 $11 = HEAP32[$2 + 76 >> 2] | 0; //@line 13870
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 13875
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 13876
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 64 | 0); //@line 13877
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 258; //@line 13880
   $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 13881
   HEAP32[$16 >> 2] = $2; //@line 13882
   sp = STACKTOP; //@line 13883
   return;
  }
  ___async_unwind = 0; //@line 13886
  HEAP32[$ReallocAsyncCtx3 >> 2] = 258; //@line 13887
  $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 13888
  HEAP32[$16 >> 2] = $2; //@line 13889
  sp = STACKTOP; //@line 13890
  return;
 }
 $18 = HEAP32[$2 + 60 >> 2] | 0; //@line 13894
 if ($18 | 0) {
  $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 13899
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 13900
  FUNCTION_TABLE_vi[$22 & 1023]($2 + 48 | 0); //@line 13901
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 259; //@line 13904
   $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 13905
   HEAP32[$23 >> 2] = $2; //@line 13906
   sp = STACKTOP; //@line 13907
   return;
  }
  ___async_unwind = 0; //@line 13910
  HEAP32[$ReallocAsyncCtx4 >> 2] = 259; //@line 13911
  $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 13912
  HEAP32[$23 >> 2] = $2; //@line 13913
  sp = STACKTOP; //@line 13914
  return;
 }
 $25 = HEAP32[$2 + 44 >> 2] | 0; //@line 13918
 if ($25 | 0) {
  $29 = HEAP32[$25 + 8 >> 2] | 0; //@line 13923
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 13924
  FUNCTION_TABLE_vi[$29 & 1023]($2 + 32 | 0); //@line 13925
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 260; //@line 13928
   $30 = $ReallocAsyncCtx5 + 4 | 0; //@line 13929
   HEAP32[$30 >> 2] = $2; //@line 13930
   sp = STACKTOP; //@line 13931
   return;
  }
  ___async_unwind = 0; //@line 13934
  HEAP32[$ReallocAsyncCtx5 >> 2] = 260; //@line 13935
  $30 = $ReallocAsyncCtx5 + 4 | 0; //@line 13936
  HEAP32[$30 >> 2] = $2; //@line 13937
  sp = STACKTOP; //@line 13938
  return;
 }
 $32 = HEAP32[$2 + 28 >> 2] | 0; //@line 13942
 if ($32 | 0) {
  $36 = HEAP32[$32 + 8 >> 2] | 0; //@line 13947
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 13948
  FUNCTION_TABLE_vi[$36 & 1023]($2 + 16 | 0); //@line 13949
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 261; //@line 13952
   $37 = $ReallocAsyncCtx6 + 4 | 0; //@line 13953
   HEAP32[$37 >> 2] = $2; //@line 13954
   sp = STACKTOP; //@line 13955
   return;
  }
  ___async_unwind = 0; //@line 13958
  HEAP32[$ReallocAsyncCtx6 >> 2] = 261; //@line 13959
  $37 = $ReallocAsyncCtx6 + 4 | 0; //@line 13960
  HEAP32[$37 >> 2] = $2; //@line 13961
  sp = STACKTOP; //@line 13962
  return;
 }
 $39 = HEAP32[$2 + 12 >> 2] | 0; //@line 13966
 if (!$39) {
  return;
 }
 $42 = HEAP32[$39 + 8 >> 2] | 0; //@line 13972
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 13973
 FUNCTION_TABLE_vi[$42 & 1023]($2); //@line 13974
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 262; //@line 13977
  sp = STACKTOP; //@line 13978
  return;
 }
 ___async_unwind = 0; //@line 13981
 HEAP32[$ReallocAsyncCtx7 >> 2] = 262; //@line 13982
 sp = STACKTOP; //@line 13983
 return;
}
function __ZN7LoRaMac19on_radio_rx_timeoutEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $19 = 0, $2 = 0, $24 = 0, $31 = 0, $35 = 0, $39 = 0, $42 = 0, $53 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11482
 STACKTOP = STACKTOP + 16 | 0; //@line 11483
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 11483
 $$byval_copy = sp + 8 | 0; //@line 11484
 $1 = sp; //@line 11485
 $2 = $0 + 360 | 0; //@line 11486
 do {
  if ((HEAP32[$2 >> 2] | 0) == 2) {
   $6 = HEAP32[$0 + 1328 >> 2] | 0; //@line 11492
   HEAP32[$1 >> 2] = 273; //@line 11493
   HEAP32[$1 + 4 >> 2] = 0; //@line 11495
   $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 11496
   HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 11497
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 11497
   $7 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($6, $0, $$byval_copy) | 0; //@line 11498
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 355; //@line 11501
    HEAP32[$AsyncCtx3 + 4 >> 2] = $1; //@line 11503
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 11505
    HEAP32[$AsyncCtx3 + 12 >> 2] = $2; //@line 11507
    sp = STACKTOP; //@line 11508
    STACKTOP = sp; //@line 11509
    return;
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 11511
   do {
    if (!$7) {
     $AsyncCtx11 = _emscripten_alloc_async_context(16, sp) | 0; //@line 11515
     _mbed_assert_internal(12025, 12034, 215); //@line 11516
     if (___async) {
      HEAP32[$AsyncCtx11 >> 2] = 356; //@line 11519
      HEAP32[$AsyncCtx11 + 4 >> 2] = $1; //@line 11521
      HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 11523
      HEAP32[$AsyncCtx11 + 12 >> 2] = $2; //@line 11525
      sp = STACKTOP; //@line 11526
      STACKTOP = sp; //@line 11527
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx11 | 0); //@line 11529
      break;
     }
    }
   } while (0);
   HEAP32[$0 + 364 >> 2] = 2; //@line 11535
   if (HEAP8[$0 + 373 >> 0] | 0) {
    label = 19; //@line 11540
   }
  } else {
   $19 = HEAP32[$0 >> 2] | 0; //@line 11543
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 11544
   __ZN7LoRaPHY18put_radio_to_sleepEv($19); //@line 11545
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 357; //@line 11548
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 11550
    HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 11552
    sp = STACKTOP; //@line 11553
    STACKTOP = sp; //@line 11554
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 11556
   $24 = (HEAP8[$0 + 373 >> 0] | 0) != 0; //@line 11562
   if (HEAP32[$0 + 364 >> 2] | 0) {
    if ($24) {
     label = 19; //@line 11565
     break;
    } else {
     break;
    }
   }
   if ($24) {
    HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($0 + 288 | 0) | 0) + 4 >> 2] = 3; //@line 11575
   }
   HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) + 4 >> 2] = 3; //@line 11580
   $31 = $0 + 356 | 0; //@line 11581
   $35 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$31 >> 2] | 0, HEAP32[$0 + 980 >> 2] | 0) | 0; //@line 11585
   if ($35 >>> 0 < (HEAP32[$0 + 976 >> 2] | 0) >>> 0) {
    STACKTOP = sp; //@line 11590
    return;
   }
   $39 = HEAP32[$31 >> 2] | 0; //@line 11592
   $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 11594
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($39, $0 + 1056 | 0); //@line 11595
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 358; //@line 11598
    HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 11600
    sp = STACKTOP; //@line 11601
    STACKTOP = sp; //@line 11602
    return;
   }
   _emscripten_free_async_context($AsyncCtx7 | 0); //@line 11604
   $42 = $0 + 944 | 0; //@line 11605
   HEAP8[$42 >> 0] = HEAP8[$42 >> 0] | 32; //@line 11608
   STACKTOP = sp; //@line 11609
   return;
  }
 } while (0);
 if ((label | 0) == 19) {
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($0 + 288 | 0) | 0) + 4 >> 2] = 4; //@line 11616
 }
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) + 4 >> 2] = 4; //@line 11621
 if ((HEAP32[$2 >> 2] | 0) == 2) {
  STACKTOP = sp; //@line 11625
  return;
 }
 $53 = $0 + 944 | 0; //@line 11627
 HEAP8[$53 >> 0] = HEAP8[$53 >> 0] | 32; //@line 11630
 STACKTOP = sp; //@line 11631
 return;
}
function _initialize__async_cb_18($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 18152
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18154
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18156
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18160
 $10 = HEAP32[(HEAP32[$0 + 12 >> 2] | 0) + 4 >> 2] | 0; //@line 18162
 if (($10 + -4 | 0) >>> 0 > 28) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 18166
  _mbed_assert_internal(13326, 13328, 47); //@line 18167
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 598; //@line 18170
   $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 18171
   HEAP32[$12 >> 2] = 1e6; //@line 18172
   $13 = $ReallocAsyncCtx6 + 8 | 0; //@line 18173
   HEAP32[$13 >> 2] = $2; //@line 18174
   $14 = $ReallocAsyncCtx6 + 12 | 0; //@line 18175
   HEAP32[$14 >> 2] = $4; //@line 18176
   $15 = $ReallocAsyncCtx6 + 16 | 0; //@line 18177
   HEAP32[$15 >> 2] = $8; //@line 18178
   sp = STACKTOP; //@line 18179
   return;
  }
  ___async_unwind = 0; //@line 18182
  HEAP32[$ReallocAsyncCtx6 >> 2] = 598; //@line 18183
  $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 18184
  HEAP32[$12 >> 2] = 1e6; //@line 18185
  $13 = $ReallocAsyncCtx6 + 8 | 0; //@line 18186
  HEAP32[$13 >> 2] = $2; //@line 18187
  $14 = $ReallocAsyncCtx6 + 12 | 0; //@line 18188
  HEAP32[$14 >> 2] = $4; //@line 18189
  $15 = $ReallocAsyncCtx6 + 16 | 0; //@line 18190
  HEAP32[$15 >> 2] = $8; //@line 18191
  sp = STACKTOP; //@line 18192
  return;
 } else {
  $17 = 7 << $10 + -4; //@line 18196
  $18 = ___muldi3($17 | 0, 0, 1e6, 0) | 0; //@line 18197
  $19 = tempRet0; //@line 18198
  $20 = _i64Add(1e6, 0, -1, -1) | 0; //@line 18199
  $22 = _i64Add($20 | 0, tempRet0 | 0, $18 | 0, $19 | 0) | 0; //@line 18201
  $24 = ___udivdi3($22 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 18203
  $25 = tempRet0; //@line 18204
  $26 = HEAP32[$2 >> 2] | 0; //@line 18205
  HEAP32[$26 >> 2] = 0; //@line 18206
  HEAP32[$26 + 4 >> 2] = 0; //@line 18208
  $30 = HEAP32[(HEAP32[$4 >> 2] | 0) + 4 >> 2] | 0; //@line 18211
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(40) | 0; //@line 18212
  $31 = FUNCTION_TABLE_i[$30 & 7]() | 0; //@line 18213
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 599; //@line 18216
   $32 = $ReallocAsyncCtx3 + 4 | 0; //@line 18217
   HEAP32[$32 >> 2] = $2; //@line 18218
   $33 = $ReallocAsyncCtx3 + 8 | 0; //@line 18219
   HEAP32[$33 >> 2] = 1e6; //@line 18220
   $34 = $ReallocAsyncCtx3 + 12 | 0; //@line 18221
   HEAP32[$34 >> 2] = $10; //@line 18222
   $35 = $ReallocAsyncCtx3 + 16 | 0; //@line 18223
   HEAP32[$35 >> 2] = $17; //@line 18224
   $36 = $ReallocAsyncCtx3 + 24 | 0; //@line 18225
   $37 = $36; //@line 18226
   $38 = $37; //@line 18227
   HEAP32[$38 >> 2] = $24; //@line 18228
   $39 = $37 + 4 | 0; //@line 18229
   $40 = $39; //@line 18230
   HEAP32[$40 >> 2] = $25; //@line 18231
   $41 = $ReallocAsyncCtx3 + 32 | 0; //@line 18232
   HEAP32[$41 >> 2] = $4; //@line 18233
   $42 = $ReallocAsyncCtx3 + 36 | 0; //@line 18234
   HEAP32[$42 >> 2] = $8; //@line 18235
   sp = STACKTOP; //@line 18236
   return;
  }
  HEAP32[___async_retval >> 2] = $31; //@line 18240
  ___async_unwind = 0; //@line 18241
  HEAP32[$ReallocAsyncCtx3 >> 2] = 599; //@line 18242
  $32 = $ReallocAsyncCtx3 + 4 | 0; //@line 18243
  HEAP32[$32 >> 2] = $2; //@line 18244
  $33 = $ReallocAsyncCtx3 + 8 | 0; //@line 18245
  HEAP32[$33 >> 2] = 1e6; //@line 18246
  $34 = $ReallocAsyncCtx3 + 12 | 0; //@line 18247
  HEAP32[$34 >> 2] = $10; //@line 18248
  $35 = $ReallocAsyncCtx3 + 16 | 0; //@line 18249
  HEAP32[$35 >> 2] = $17; //@line 18250
  $36 = $ReallocAsyncCtx3 + 24 | 0; //@line 18251
  $37 = $36; //@line 18252
  $38 = $37; //@line 18253
  HEAP32[$38 >> 2] = $24; //@line 18254
  $39 = $37 + 4 | 0; //@line 18255
  $40 = $39; //@line 18256
  HEAP32[$40 >> 2] = $25; //@line 18257
  $41 = $ReallocAsyncCtx3 + 32 | 0; //@line 18258
  HEAP32[$41 >> 2] = $4; //@line 18259
  $42 = $ReallocAsyncCtx3 + 36 | 0; //@line 18260
  HEAP32[$42 >> 2] = $8; //@line 18261
  sp = STACKTOP; //@line 18262
  return;
 }
}
function _mbedtls_cipher_cmac_update__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$09$i75 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $27 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $53 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 31508
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31510
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31512
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31514
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31516
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31518
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31520
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 31522
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 31524
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 31526
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 31528
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 31530
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 31532
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 31535
  $53 = ___async_retval; //@line 31536
  HEAP32[$53 >> 2] = $$0; //@line 31537
  return;
 }
 $33 = $2 - $4 | 0; //@line 31540
 $25 = $6 + $4 | 0; //@line 31541
 $37 = $8 + 1 | 0; //@line 31542
 if ($37 >>> 0 >= $10 >>> 0) {
  if (!$33) {
   $$0 = 0; //@line 31547
   $53 = ___async_retval; //@line 31548
   HEAP32[$53 >> 2] = $$0; //@line 31549
   return;
  }
  _memcpy((HEAP32[$14 >> 2] | 0) + ($16 + 16) | 0, $25 | 0, $33 | 0) | 0; //@line 31554
  HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + $33; //@line 31557
  $$0 = 0; //@line 31558
  $53 = ___async_retval; //@line 31559
  HEAP32[$53 >> 2] = $$0; //@line 31560
  return;
 }
 $$09$i75 = 0; //@line 31563
 do {
  $27 = $16 + $$09$i75 | 0; //@line 31567
  HEAP8[$27 >> 0] = HEAP8[$27 >> 0] ^ HEAP8[$25 + $$09$i75 >> 0]; //@line 31570
  $$09$i75 = $$09$i75 + 1 | 0; //@line 31571
 } while (($$09$i75 | 0) != ($4 | 0));
 $ReallocAsyncCtx = _emscripten_realloc_async_context(48) | 0; //@line 31579
 $31 = _mbedtls_cipher_update($18, $20, $4, $20, $22) | 0; //@line 31580
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 585; //@line 31583
  $32 = $ReallocAsyncCtx + 4 | 0; //@line 31584
  HEAP32[$32 >> 2] = $33; //@line 31585
  $34 = $ReallocAsyncCtx + 8 | 0; //@line 31586
  HEAP32[$34 >> 2] = $4; //@line 31587
  $35 = $ReallocAsyncCtx + 12 | 0; //@line 31588
  HEAP32[$35 >> 2] = $25; //@line 31589
  $36 = $ReallocAsyncCtx + 16 | 0; //@line 31590
  HEAP32[$36 >> 2] = $37; //@line 31591
  $38 = $ReallocAsyncCtx + 20 | 0; //@line 31592
  HEAP32[$38 >> 2] = $10; //@line 31593
  $39 = $ReallocAsyncCtx + 24 | 0; //@line 31594
  HEAP32[$39 >> 2] = $12; //@line 31595
  $40 = $ReallocAsyncCtx + 28 | 0; //@line 31596
  HEAP32[$40 >> 2] = $14; //@line 31597
  $41 = $ReallocAsyncCtx + 32 | 0; //@line 31598
  HEAP32[$41 >> 2] = $16; //@line 31599
  $42 = $ReallocAsyncCtx + 36 | 0; //@line 31600
  HEAP32[$42 >> 2] = $18; //@line 31601
  $43 = $ReallocAsyncCtx + 40 | 0; //@line 31602
  HEAP32[$43 >> 2] = $20; //@line 31603
  $44 = $ReallocAsyncCtx + 44 | 0; //@line 31604
  HEAP32[$44 >> 2] = $22; //@line 31605
  sp = STACKTOP; //@line 31606
  return;
 }
 HEAP32[___async_retval >> 2] = $31; //@line 31610
 ___async_unwind = 0; //@line 31611
 HEAP32[$ReallocAsyncCtx >> 2] = 585; //@line 31612
 $32 = $ReallocAsyncCtx + 4 | 0; //@line 31613
 HEAP32[$32 >> 2] = $33; //@line 31614
 $34 = $ReallocAsyncCtx + 8 | 0; //@line 31615
 HEAP32[$34 >> 2] = $4; //@line 31616
 $35 = $ReallocAsyncCtx + 12 | 0; //@line 31617
 HEAP32[$35 >> 2] = $25; //@line 31618
 $36 = $ReallocAsyncCtx + 16 | 0; //@line 31619
 HEAP32[$36 >> 2] = $37; //@line 31620
 $38 = $ReallocAsyncCtx + 20 | 0; //@line 31621
 HEAP32[$38 >> 2] = $10; //@line 31622
 $39 = $ReallocAsyncCtx + 24 | 0; //@line 31623
 HEAP32[$39 >> 2] = $12; //@line 31624
 $40 = $ReallocAsyncCtx + 28 | 0; //@line 31625
 HEAP32[$40 >> 2] = $14; //@line 31626
 $41 = $ReallocAsyncCtx + 32 | 0; //@line 31627
 HEAP32[$41 >> 2] = $16; //@line 31628
 $42 = $ReallocAsyncCtx + 36 | 0; //@line 31629
 HEAP32[$42 >> 2] = $18; //@line 31630
 $43 = $ReallocAsyncCtx + 40 | 0; //@line 31631
 HEAP32[$43 >> 2] = $20; //@line 31632
 $44 = $ReallocAsyncCtx + 44 | 0; //@line 31633
 HEAP32[$44 >> 2] = $22; //@line 31634
 sp = STACKTOP; //@line 31635
 return;
}
function _mbedtls_gcm_update($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$05966 = 0, $$06065 = 0, $$061 = 0, $$06264 = 0, $$163 = 0, $11 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $30 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $42 = 0, $44 = 0, $46 = 0, $5 = 0, $67 = 0, $68 = 0, $75 = 0, $83 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4543
 STACKTOP = STACKTOP + 32 | 0; //@line 4544
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 4544
 $4 = sp + 8 | 0; //@line 4545
 $5 = sp; //@line 4546
 HEAP32[$5 >> 2] = 0; //@line 4547
 if ($3 >>> 0 > $2 >>> 0) {
  if (($3 - $2 | 0) >>> 0 < $1 >>> 0) {
   $$0 = -20; //@line 4555
   STACKTOP = sp; //@line 4556
   return $$0 | 0; //@line 4556
  }
 }
 $11 = $0 + 328 | 0; //@line 4559
 $12 = $11; //@line 4560
 $14 = HEAP32[$12 >> 2] | 0; //@line 4562
 $17 = HEAP32[$12 + 4 >> 2] | 0; //@line 4565
 $18 = _i64Add($14 | 0, $17 | 0, $1 | 0, 0) | 0; //@line 4566
 $19 = tempRet0; //@line 4567
 if ($19 >>> 0 < $17 >>> 0 | ($19 | 0) == ($17 | 0) & $18 >>> 0 < $14 >>> 0 | ($19 >>> 0 > 15 | ($19 | 0) == 15 & $18 >>> 0 > 4294967264)) {
  $$0 = -20; //@line 4580
  STACKTOP = sp; //@line 4581
  return $$0 | 0; //@line 4581
 }
 $30 = $11; //@line 4583
 HEAP32[$30 >> 2] = $18; //@line 4585
 HEAP32[$30 + 4 >> 2] = $19; //@line 4588
 if (!$1) {
  $$0 = 0; //@line 4591
  STACKTOP = sp; //@line 4592
  return $$0 | 0; //@line 4592
 }
 $35 = $0 + 360 | 0; //@line 4594
 $36 = $0 + 376 | 0; //@line 4595
 $37 = $0 + 392 | 0; //@line 4596
 $$05966 = $3; //@line 4597
 $$06065 = $2; //@line 4597
 $$06264 = $1; //@line 4597
 while (1) {
  $39 = $$06264 >>> 0 < 16 ? $$06264 : 16; //@line 4600
  $$061 = 16; //@line 4601
  do {
   if ($$061 >>> 0 <= 12) {
    break;
   }
   $$061 = $$061 + -1 | 0; //@line 4607
   $42 = $0 + 360 + $$061 | 0; //@line 4608
   $44 = (HEAP8[$42 >> 0] | 0) + 1 << 24 >> 24; //@line 4610
   HEAP8[$42 >> 0] = $44; //@line 4611
  } while (!($44 << 24 >> 24));
  $AsyncCtx = _emscripten_alloc_async_context(68, sp) | 0; //@line 4619
  $46 = _mbedtls_cipher_update($0, $35, 16, $4, $5) | 0; //@line 4620
  if (___async) {
   label = 10; //@line 4623
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4626
  if ($46 | 0) {
   $$0 = $46; //@line 4629
   label = 19; //@line 4630
   break;
  }
  if ($39 | 0) {
   $$163 = 0; //@line 4635
   do {
    $67 = $0 + 376 + $$163 | 0; //@line 4639
    $68 = $$06065 + $$163 | 0; //@line 4640
    if (!(HEAP32[$37 >> 2] | 0)) {
     HEAP8[$67 >> 0] = HEAP8[$67 >> 0] ^ HEAP8[$68 >> 0]; //@line 4645
    }
    $75 = HEAP8[$68 >> 0] ^ HEAP8[$4 + $$163 >> 0]; //@line 4650
    HEAP8[$$05966 + $$163 >> 0] = $75; //@line 4652
    if ((HEAP32[$37 >> 2] | 0) == 1) {
     HEAP8[$67 >> 0] = HEAP8[$67 >> 0] ^ $75; //@line 4658
    }
    $$163 = $$163 + 1 | 0; //@line 4660
   } while ($$163 >>> 0 < $39 >>> 0);
  }
  _gcm_mult($0, $36, $36); //@line 4669
  $83 = $$06264 - $39 | 0; //@line 4670
  if (!$83) {
   $$0 = 0; //@line 4675
   label = 19; //@line 4676
   break;
  } else {
   $$05966 = $$05966 + $39 | 0; //@line 4679
   $$06065 = $$06065 + $39 | 0; //@line 4679
   $$06264 = $83; //@line 4679
  }
 }
 if ((label | 0) == 10) {
  HEAP32[$AsyncCtx >> 2] = 592; //@line 4683
  HEAP32[$AsyncCtx + 4 >> 2] = $39; //@line 4685
  HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 4687
  HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 4689
  HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 4691
  HEAP32[$AsyncCtx + 20 >> 2] = $36; //@line 4693
  HEAP32[$AsyncCtx + 24 >> 2] = $$06264; //@line 4695
  HEAP32[$AsyncCtx + 28 >> 2] = $$06065; //@line 4697
  HEAP32[$AsyncCtx + 32 >> 2] = $$05966; //@line 4699
  HEAP32[$AsyncCtx + 36 >> 2] = $37; //@line 4701
  HEAP32[$AsyncCtx + 40 >> 2] = $4; //@line 4703
  HEAP32[$AsyncCtx + 44 >> 2] = $3; //@line 4705
  HEAP32[$AsyncCtx + 48 >> 2] = $2; //@line 4707
  HEAP32[$AsyncCtx + 52 >> 2] = $1; //@line 4709
  HEAP32[$AsyncCtx + 56 >> 2] = $0; //@line 4711
  HEAP32[$AsyncCtx + 60 >> 2] = $35; //@line 4713
  HEAP32[$AsyncCtx + 64 >> 2] = $5; //@line 4715
  sp = STACKTOP; //@line 4716
  STACKTOP = sp; //@line 4717
  return 0; //@line 4717
 } else if ((label | 0) == 19) {
  STACKTOP = sp; //@line 4720
  return $$0 | 0; //@line 4720
 }
 return 0; //@line 4722
}
function __Z11compute_micPKhtS0_jhjPj($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $22 = 0, $24 = 0, $26 = 0, $32 = 0, $37 = 0, $42 = 0, $45 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 18600
 HEAP8[12406] = $4; //@line 18601
 HEAP8[12407] = $3; //@line 18603
 HEAP8[12408] = $3 >>> 8; //@line 18606
 HEAP8[12409] = $3 >>> 16; //@line 18609
 HEAP8[12410] = $3 >>> 24; //@line 18612
 HEAP8[12411] = $5; //@line 18614
 HEAP8[12412] = $5 >>> 8; //@line 18617
 HEAP8[12413] = $5 >>> 16; //@line 18620
 HEAP8[12414] = $5 >>> 24; //@line 18623
 $22 = $1 & 255; //@line 18625
 HEAP8[12416] = $1; //@line 18627
 _mbedtls_cipher_init(21244); //@line 18628
 $24 = _mbedtls_cipher_info_from_type(2) | 0; //@line 18629
 if (!$24) {
  $$0 = -24960; //@line 18632
 } else {
  $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 18634
  $26 = _mbedtls_cipher_setup(21244, $24) | 0; //@line 18635
  if (___async) {
   HEAP32[$AsyncCtx15 >> 2] = 492; //@line 18638
   HEAP32[$AsyncCtx15 + 4 >> 2] = $6; //@line 18640
   HEAP32[$AsyncCtx15 + 8 >> 2] = $0; //@line 18642
   HEAP32[$AsyncCtx15 + 12 >> 2] = $22; //@line 18644
   HEAP32[$AsyncCtx15 + 16 >> 2] = $2; //@line 18646
   sp = STACKTOP; //@line 18647
   return 0; //@line 18648
  }
  _emscripten_free_async_context($AsyncCtx15 | 0); //@line 18650
  if (!$26) {
   $AsyncCtx11 = _emscripten_alloc_async_context(16, sp) | 0; //@line 18653
   $32 = _mbedtls_cipher_cmac_starts(21244, $2, 128) | 0; //@line 18654
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 493; //@line 18657
    HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 18659
    HEAP32[$AsyncCtx11 + 8 >> 2] = $22; //@line 18661
    HEAP32[$AsyncCtx11 + 12 >> 2] = $6; //@line 18663
    sp = STACKTOP; //@line 18664
    return 0; //@line 18665
   }
   _emscripten_free_async_context($AsyncCtx11 | 0); //@line 18667
   if (!$32) {
    $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 18670
    $37 = _mbedtls_cipher_cmac_update(21244, 12401, 16) | 0; //@line 18671
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 494; //@line 18674
     HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 18676
     HEAP32[$AsyncCtx3 + 8 >> 2] = $22; //@line 18678
     HEAP32[$AsyncCtx3 + 12 >> 2] = $6; //@line 18680
     sp = STACKTOP; //@line 18681
     return 0; //@line 18682
    }
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 18684
    if (!$37) {
     $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 18687
     $42 = _mbedtls_cipher_cmac_update(21244, $0, $22) | 0; //@line 18688
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 495; //@line 18691
      HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 18693
      sp = STACKTOP; //@line 18694
      return 0; //@line 18695
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 18697
     if (!$42) {
      $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 18700
      $45 = _mbedtls_cipher_cmac_finish(21244, 22552) | 0; //@line 18701
      if (___async) {
       HEAP32[$AsyncCtx7 >> 2] = 496; //@line 18704
       HEAP32[$AsyncCtx7 + 4 >> 2] = $6; //@line 18706
       sp = STACKTOP; //@line 18707
       return 0; //@line 18708
      }
      _emscripten_free_async_context($AsyncCtx7 | 0); //@line 18710
      if (!$45) {
       HEAP32[$6 >> 2] = (HEAPU8[22554] | 0) << 16 | (HEAPU8[22555] | 0) << 24 | (HEAPU8[22553] | 0) << 8 | (HEAPU8[22552] | 0); //@line 18727
       $$0 = 0; //@line 18728
      } else {
       $$0 = $45; //@line 18730
      }
     } else {
      $$0 = $42; //@line 18733
     }
    } else {
     $$0 = $37; //@line 18736
    }
   } else {
    $$0 = $32; //@line 18739
   }
  } else {
   $$0 = $26; //@line 18742
  }
 }
 $AsyncCtx19 = _emscripten_alloc_async_context(8, sp) | 0; //@line 18745
 _mbedtls_cipher_free(21244); //@line 18746
 if (___async) {
  HEAP32[$AsyncCtx19 >> 2] = 497; //@line 18749
  HEAP32[$AsyncCtx19 + 4 >> 2] = $$0; //@line 18751
  sp = STACKTOP; //@line 18752
  return 0; //@line 18753
 } else {
  _emscripten_free_async_context($AsyncCtx19 | 0); //@line 18755
  return $$0 | 0; //@line 18756
 }
 return 0; //@line 18758
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_413($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 30405
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30407
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30409
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30411
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30413
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30415
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30417
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 30419
 $17 = HEAP32[HEAP32[$0 + 32 >> 2] >> 2] | 0; //@line 30422
 if (!$17) {
  $27 = HEAP32[$2 >> 2] | 0; //@line 30425
  $29 = $6 + 12 | 0; //@line 30427
  HEAP32[$6 >> 2] = 429; //@line 30428
  HEAP32[$6 + 4 >> 2] = 0; //@line 30430
  HEAP32[$6 + 8 >> 2] = $4; //@line 30432
  HEAP32[$29 >> 2] = 836; //@line 30433
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(32) | 0; //@line 30434
  __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($27, $4 + 1016 | 0, $6); //@line 30435
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 430; //@line 30438
   $30 = $ReallocAsyncCtx9 + 4 | 0; //@line 30439
   HEAP32[$30 >> 2] = $2; //@line 30440
   $31 = $ReallocAsyncCtx9 + 8 | 0; //@line 30441
   HEAP32[$31 >> 2] = $4; //@line 30442
   $32 = $ReallocAsyncCtx9 + 12 | 0; //@line 30443
   HEAP32[$32 >> 2] = $12; //@line 30444
   $33 = $ReallocAsyncCtx9 + 16 | 0; //@line 30445
   HEAP32[$33 >> 2] = $6; //@line 30446
   $34 = $ReallocAsyncCtx9 + 20 | 0; //@line 30447
   HEAP32[$34 >> 2] = $8; //@line 30448
   $35 = $ReallocAsyncCtx9 + 24 | 0; //@line 30449
   HEAP32[$35 >> 2] = $10; //@line 30450
   $36 = $ReallocAsyncCtx9 + 28 | 0; //@line 30451
   HEAP32[$36 >> 2] = $29; //@line 30452
   sp = STACKTOP; //@line 30453
   return;
  }
  ___async_unwind = 0; //@line 30456
  HEAP32[$ReallocAsyncCtx9 >> 2] = 430; //@line 30457
  $30 = $ReallocAsyncCtx9 + 4 | 0; //@line 30458
  HEAP32[$30 >> 2] = $2; //@line 30459
  $31 = $ReallocAsyncCtx9 + 8 | 0; //@line 30460
  HEAP32[$31 >> 2] = $4; //@line 30461
  $32 = $ReallocAsyncCtx9 + 12 | 0; //@line 30462
  HEAP32[$32 >> 2] = $12; //@line 30463
  $33 = $ReallocAsyncCtx9 + 16 | 0; //@line 30464
  HEAP32[$33 >> 2] = $6; //@line 30465
  $34 = $ReallocAsyncCtx9 + 20 | 0; //@line 30466
  HEAP32[$34 >> 2] = $8; //@line 30467
  $35 = $ReallocAsyncCtx9 + 24 | 0; //@line 30468
  HEAP32[$35 >> 2] = $10; //@line 30469
  $36 = $ReallocAsyncCtx9 + 28 | 0; //@line 30470
  HEAP32[$36 >> 2] = $29; //@line 30471
  sp = STACKTOP; //@line 30472
  return;
 } else {
  $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 30476
  $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 30477
  FUNCTION_TABLE_vi[$20 & 1023]($14); //@line 30478
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 428; //@line 30481
   $21 = $ReallocAsyncCtx + 4 | 0; //@line 30482
   HEAP32[$21 >> 2] = $2; //@line 30483
   $22 = $ReallocAsyncCtx + 8 | 0; //@line 30484
   HEAP32[$22 >> 2] = $4; //@line 30485
   $23 = $ReallocAsyncCtx + 12 | 0; //@line 30486
   HEAP32[$23 >> 2] = $6; //@line 30487
   $24 = $ReallocAsyncCtx + 16 | 0; //@line 30488
   HEAP32[$24 >> 2] = $8; //@line 30489
   $25 = $ReallocAsyncCtx + 20 | 0; //@line 30490
   HEAP32[$25 >> 2] = $10; //@line 30491
   $26 = $ReallocAsyncCtx + 24 | 0; //@line 30492
   HEAP32[$26 >> 2] = $12; //@line 30493
   sp = STACKTOP; //@line 30494
   return;
  }
  ___async_unwind = 0; //@line 30497
  HEAP32[$ReallocAsyncCtx >> 2] = 428; //@line 30498
  $21 = $ReallocAsyncCtx + 4 | 0; //@line 30499
  HEAP32[$21 >> 2] = $2; //@line 30500
  $22 = $ReallocAsyncCtx + 8 | 0; //@line 30501
  HEAP32[$22 >> 2] = $4; //@line 30502
  $23 = $ReallocAsyncCtx + 12 | 0; //@line 30503
  HEAP32[$23 >> 2] = $6; //@line 30504
  $24 = $ReallocAsyncCtx + 16 | 0; //@line 30505
  HEAP32[$24 >> 2] = $8; //@line 30506
  $25 = $ReallocAsyncCtx + 20 | 0; //@line 30507
  HEAP32[$25 >> 2] = $10; //@line 30508
  $26 = $ReallocAsyncCtx + 24 | 0; //@line 30509
  HEAP32[$26 >> 2] = $12; //@line 30510
  sp = STACKTOP; //@line 30511
  return;
 }
}
function _mbedtls_aes_setkey_dec($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$02$i$i = 0, $$031$i$i = 0, $$043$lcssa = 0, $$04353 = 0, $$04555$in = 0, $$051 = 0, $$054 = 0, $$pn$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $128 = 0, $13 = 0, $16 = 0, $19 = 0, $22 = 0, $24 = 0, $26 = 0, $3 = 0, $31 = 0, $32 = 0, $4 = 0, $6 = 0, $64 = 0, $8 = 0, $96 = 0, sp = 0, $$04353$looptemp = 0;
 sp = STACKTOP; //@line 14
 STACKTOP = STACKTOP + 288 | 0; //@line 15
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(288); //@line 15
 $3 = sp; //@line 16
 _memset($3 | 0, 0, 280) | 0; //@line 17
 $4 = $0 + 8 | 0; //@line 18
 HEAP32[$0 + 4 >> 2] = $4; //@line 20
 $6 = _mbedtls_aes_setkey_enc($3, $1, $2) | 0; //@line 21
 if (!$6) {
  $8 = HEAP32[$3 >> 2] | 0; //@line 24
  HEAP32[$0 >> 2] = $8; //@line 25
  $10 = HEAP32[$3 + 4 >> 2] | 0; //@line 27
  $11 = $8 << 2; //@line 28
  $12 = $10 + ($11 << 2) | 0; //@line 29
  $13 = $12 + 4 | 0; //@line 30
  HEAP32[$4 >> 2] = HEAP32[$12 >> 2]; //@line 33
  $16 = $13 + 4 | 0; //@line 34
  HEAP32[$0 + 12 >> 2] = HEAP32[$13 >> 2]; //@line 37
  $19 = $16 + 4 | 0; //@line 38
  HEAP32[$0 + 16 >> 2] = HEAP32[$16 >> 2]; //@line 41
  $22 = $19 + 4 | 0; //@line 42
  $24 = $0 + 24 | 0; //@line 44
  HEAP32[$0 + 20 >> 2] = HEAP32[$19 >> 2]; //@line 45
  $$051 = $22 + -32 | 0; //@line 46
  if (($8 | 0) > 1) {
   $26 = ~$8; //@line 49
   $31 = $11 + -4 - ($8 + (($26 | 0) > -3 ? $26 : -3) << 2) | 0; //@line 55
   $$04353 = $24; //@line 56
   $$04555$in = $8; //@line 56
   $$054 = $$051; //@line 56
   while (1) {
    $$04353$looptemp = $$04353;
    $$04353 = $$04353 + 16 | 0; //@line 59
    $32 = HEAP32[$$054 >> 2] | 0; //@line 60
    HEAP32[$$04353$looptemp >> 2] = HEAP32[2312 + ((HEAPU8[12670 + ($32 >>> 8 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[1288 + ((HEAPU8[12670 + ($32 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[3336 + ((HEAPU8[12670 + ($32 >>> 16 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[4360 + ((HEAPU8[12670 + ($32 >>> 24) >> 0] | 0) << 2) >> 2]; //@line 91
    $64 = HEAP32[$$054 + 4 >> 2] | 0; //@line 93
    HEAP32[$$04353$looptemp + 4 >> 2] = HEAP32[2312 + ((HEAPU8[12670 + ($64 >>> 8 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[1288 + ((HEAPU8[12670 + ($64 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[3336 + ((HEAPU8[12670 + ($64 >>> 16 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[4360 + ((HEAPU8[12670 + ($64 >>> 24) >> 0] | 0) << 2) >> 2]; //@line 124
    $96 = HEAP32[$$054 + 8 >> 2] | 0; //@line 126
    HEAP32[$$04353$looptemp + 8 >> 2] = HEAP32[2312 + ((HEAPU8[12670 + ($96 >>> 8 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[1288 + ((HEAPU8[12670 + ($96 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[3336 + ((HEAPU8[12670 + ($96 >>> 16 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[4360 + ((HEAPU8[12670 + ($96 >>> 24) >> 0] | 0) << 2) >> 2]; //@line 157
    $128 = HEAP32[$$054 + 12 >> 2] | 0; //@line 159
    HEAP32[$$04353$looptemp + 12 >> 2] = HEAP32[2312 + ((HEAPU8[12670 + ($128 >>> 8 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[1288 + ((HEAPU8[12670 + ($128 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[3336 + ((HEAPU8[12670 + ($128 >>> 16 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[4360 + ((HEAPU8[12670 + ($128 >>> 24) >> 0] | 0) << 2) >> 2]; //@line 189
    $$054 = $$054 + -16 | 0; //@line 190
    if (($$04555$in | 0) <= 2) {
     break;
    } else {
     $$04555$in = $$04555$in + -1 | 0; //@line 193
    }
   }
   $$0$lcssa = $$054; //@line 199
   $$043$lcssa = $$04353; //@line 199
   $$pn$lcssa = $10 + ($31 << 2) | 0; //@line 199
  } else {
   $$0$lcssa = $$051; //@line 201
   $$043$lcssa = $24; //@line 201
   $$pn$lcssa = $22; //@line 201
  }
  HEAP32[$$043$lcssa >> 2] = HEAP32[$$0$lcssa >> 2]; //@line 206
  HEAP32[$$043$lcssa + 4 >> 2] = HEAP32[$$pn$lcssa + -28 >> 2]; //@line 210
  HEAP32[$$043$lcssa + 8 >> 2] = HEAP32[$$pn$lcssa + -24 >> 2]; //@line 214
  HEAP32[$$043$lcssa + 12 >> 2] = HEAP32[$$pn$lcssa + -20 >> 2]; //@line 216
  $$02$i$i = $3; //@line 217
  $$031$i$i = 280; //@line 217
 } else {
  $$02$i$i = $3; //@line 219
  $$031$i$i = 280; //@line 219
 }
 while (1) {
  $$031$i$i = $$031$i$i + -1 | 0; //@line 222
  HEAP8[$$02$i$i >> 0] = 0; //@line 224
  if (!$$031$i$i) {
   break;
  } else {
   $$02$i$i = $$02$i$i + 1 | 0; //@line 229
  }
 }
 STACKTOP = sp; //@line 232
 return $6 | 0; //@line 232
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_4($0) {
 $0 = $0 | 0;
 var $$085$off0$reg2mem$0 = 0, $$182$off0 = 0, $$186$off0 = 0, $$283$off0 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $4 = 0, $59 = 0, $6 = 0, $67 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 16890
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16892
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16894
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16896
 $8 = HEAP8[$0 + 16 >> 0] & 1; //@line 16899
 $10 = HEAP8[$0 + 17 >> 0] & 1; //@line 16902
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 16904
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 16906
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 16908
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 16910
 $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 16912
 $22 = HEAP8[$0 + 40 >> 0] & 1; //@line 16915
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 16917
 $26 = HEAP32[$0 + 48 >> 2] | 0; //@line 16919
 $28 = HEAP32[$0 + 52 >> 2] | 0; //@line 16921
 L2 : do {
  if (!(HEAP8[$2 >> 0] | 0)) {
   do {
    if (!(HEAP8[$16 >> 0] | 0)) {
     $$182$off0 = $10; //@line 16930
     $$186$off0 = $8; //@line 16930
    } else {
     if (!(HEAP8[$14 >> 0] | 0)) {
      if (!(HEAP32[$6 >> 2] & 1)) {
       $$085$off0$reg2mem$0 = $8; //@line 16939
       $$283$off0 = 1; //@line 16939
       label = 13; //@line 16940
       break L2;
      } else {
       $$182$off0 = 1; //@line 16943
       $$186$off0 = $8; //@line 16943
       break;
      }
     }
     if ((HEAP32[$24 >> 2] | 0) == 1) {
      label = 18; //@line 16950
      break L2;
     }
     if (!(HEAP32[$6 >> 2] & 2)) {
      label = 18; //@line 16957
      break L2;
     } else {
      $$182$off0 = 1; //@line 16960
      $$186$off0 = 1; //@line 16960
     }
    }
   } while (0);
   $30 = $12 + 8 | 0; //@line 16964
   if ($30 >>> 0 < $4 >>> 0) {
    HEAP8[$14 >> 0] = 0; //@line 16967
    HEAP8[$16 >> 0] = 0; //@line 16968
    $ReallocAsyncCtx5 = _emscripten_realloc_async_context(56) | 0; //@line 16969
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($30, $18, $20, $20, 1, $22); //@line 16970
    if (!___async) {
     ___async_unwind = 0; //@line 16973
    }
    HEAP32[$ReallocAsyncCtx5 >> 2] = 698; //@line 16975
    HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 16977
    HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 16979
    HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $6; //@line 16981
    HEAP8[$ReallocAsyncCtx5 + 16 >> 0] = $$186$off0 & 1; //@line 16984
    HEAP8[$ReallocAsyncCtx5 + 17 >> 0] = $$182$off0 & 1; //@line 16987
    HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $30; //@line 16989
    HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $14; //@line 16991
    HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $16; //@line 16993
    HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $18; //@line 16995
    HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $20; //@line 16997
    HEAP8[$ReallocAsyncCtx5 + 40 >> 0] = $22 & 1; //@line 17000
    HEAP32[$ReallocAsyncCtx5 + 44 >> 2] = $24; //@line 17002
    HEAP32[$ReallocAsyncCtx5 + 48 >> 2] = $26; //@line 17004
    HEAP32[$ReallocAsyncCtx5 + 52 >> 2] = $28; //@line 17006
    sp = STACKTOP; //@line 17007
    return;
   } else {
    $$085$off0$reg2mem$0 = $$186$off0; //@line 17010
    $$283$off0 = $$182$off0; //@line 17010
    label = 13; //@line 17011
   }
  } else {
   $$085$off0$reg2mem$0 = $8; //@line 17014
   $$283$off0 = $10; //@line 17014
   label = 13; //@line 17015
  }
 } while (0);
 do {
  if ((label | 0) == 13) {
   if (!$$085$off0$reg2mem$0) {
    HEAP32[$28 >> 2] = $20; //@line 17021
    $59 = $18 + 40 | 0; //@line 17022
    HEAP32[$59 >> 2] = (HEAP32[$59 >> 2] | 0) + 1; //@line 17025
    if ((HEAP32[$18 + 36 >> 2] | 0) == 1) {
     if ((HEAP32[$24 >> 2] | 0) == 2) {
      HEAP8[$2 >> 0] = 1; //@line 17033
      if ($$283$off0) {
       label = 18; //@line 17035
       break;
      } else {
       $67 = 4; //@line 17038
       break;
      }
     }
    }
   }
   if ($$283$off0) {
    label = 18; //@line 17045
   } else {
    $67 = 4; //@line 17047
   }
  }
 } while (0);
 if ((label | 0) == 18) {
  $67 = 3; //@line 17052
 }
 HEAP32[$26 >> 2] = $67; //@line 17054
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_433($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $2 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $35 = 0, $36 = 0, $39 = 0, $4 = 0, $47 = 0, $53 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 32066
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32068
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32070
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32072
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32074
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32076
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 32078
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 32080
 HEAP32[$6 + 364 >> 2] = 2; //@line 32084
 if (HEAP8[$6 + 371 >> 0] | 0) {
  $21 = HEAP32[$4 >> 2] | 0; //@line 32089
  $24 = HEAP32[$6 + 972 >> 2] | 0; //@line 32092
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(32) | 0; //@line 32093
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($21, $6 + 1036 | 0, $24); //@line 32094
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 276; //@line 32097
   $25 = $ReallocAsyncCtx5 + 4 | 0; //@line 32098
   HEAP32[$25 >> 2] = $2; //@line 32099
   $26 = $ReallocAsyncCtx5 + 8 | 0; //@line 32100
   HEAP32[$26 >> 2] = $6; //@line 32101
   $27 = $ReallocAsyncCtx5 + 12 | 0; //@line 32102
   HEAP32[$27 >> 2] = $4; //@line 32103
   $28 = $ReallocAsyncCtx5 + 16 | 0; //@line 32104
   HEAP32[$28 >> 2] = $8; //@line 32105
   $29 = $ReallocAsyncCtx5 + 20 | 0; //@line 32106
   HEAP32[$29 >> 2] = $10; //@line 32107
   $30 = $ReallocAsyncCtx5 + 24 | 0; //@line 32108
   HEAP32[$30 >> 2] = $12; //@line 32109
   $31 = $ReallocAsyncCtx5 + 28 | 0; //@line 32110
   HEAP32[$31 >> 2] = $14; //@line 32111
   sp = STACKTOP; //@line 32112
   return;
  }
  ___async_unwind = 0; //@line 32115
  HEAP32[$ReallocAsyncCtx5 >> 2] = 276; //@line 32116
  $25 = $ReallocAsyncCtx5 + 4 | 0; //@line 32117
  HEAP32[$25 >> 2] = $2; //@line 32118
  $26 = $ReallocAsyncCtx5 + 8 | 0; //@line 32119
  HEAP32[$26 >> 2] = $6; //@line 32120
  $27 = $ReallocAsyncCtx5 + 12 | 0; //@line 32121
  HEAP32[$27 >> 2] = $4; //@line 32122
  $28 = $ReallocAsyncCtx5 + 16 | 0; //@line 32123
  HEAP32[$28 >> 2] = $8; //@line 32124
  $29 = $ReallocAsyncCtx5 + 20 | 0; //@line 32125
  HEAP32[$29 >> 2] = $10; //@line 32126
  $30 = $ReallocAsyncCtx5 + 24 | 0; //@line 32127
  HEAP32[$30 >> 2] = $12; //@line 32128
  $31 = $ReallocAsyncCtx5 + 28 | 0; //@line 32129
  HEAP32[$31 >> 2] = $14; //@line 32130
  sp = STACKTOP; //@line 32131
  return;
 }
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($6 + 288 | 0) | 0) + 4 >> 2] = 0; //@line 32137
 $35 = $6 + 944 | 0; //@line 32138
 $36 = HEAP8[$35 >> 0] | 0; //@line 32139
 if (!($36 << 24 >> 24)) {
  HEAP8[$35 >> 0] = 1; //@line 32142
  $39 = 1; //@line 32143
 } else {
  $39 = $36; //@line 32145
 }
 HEAP8[$35 >> 0] = $39 | 32; //@line 32148
 HEAP8[$6 + 376 >> 0] = ($8 | 0) == 0 & (HEAP8[$6 + 944 >> 0] & 8) != 0 & 1; //@line 32157
 $47 = HEAP8[$6 + 378 >> 0] | 0; //@line 32159
 HEAP8[$6 + 379 >> 0] = $47; //@line 32161
 HEAP8[$10 >> 0] = $47; //@line 32162
 HEAP8[$12 + 1 >> 0] = HEAP8[$6 + 372 >> 0] | 0; //@line 32166
 HEAP32[$12 + 4 >> 2] = $14; //@line 32168
 $53 = HEAP32[$6 >> 2] | 0; //@line 32169
 $56 = HEAP32[(HEAP32[$53 >> 2] | 0) + 12 >> 2] | 0; //@line 32172
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 32173
 FUNCTION_TABLE_vii[$56 & 31]($53, $12); //@line 32174
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 279; //@line 32177
  $57 = $ReallocAsyncCtx + 4 | 0; //@line 32178
  HEAP32[$57 >> 2] = $6; //@line 32179
  $58 = $ReallocAsyncCtx + 8 | 0; //@line 32180
  HEAP32[$58 >> 2] = $14; //@line 32181
  $59 = $ReallocAsyncCtx + 12 | 0; //@line 32182
  HEAP32[$59 >> 2] = $10; //@line 32183
  sp = STACKTOP; //@line 32184
  return;
 }
 ___async_unwind = 0; //@line 32187
 HEAP32[$ReallocAsyncCtx >> 2] = 279; //@line 32188
 $57 = $ReallocAsyncCtx + 4 | 0; //@line 32189
 HEAP32[$57 >> 2] = $6; //@line 32190
 $58 = $ReallocAsyncCtx + 8 | 0; //@line 32191
 HEAP32[$58 >> 2] = $14; //@line 32192
 $59 = $ReallocAsyncCtx + 12 | 0; //@line 32193
 HEAP32[$59 >> 2] = $10; //@line 32194
 sp = STACKTOP; //@line 32195
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_430($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 31632
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31634
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31636
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31638
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31640
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31642
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31644
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 31646
 if ((HEAP32[$2 >> 2] | 0) != 2) {
  $17 = HEAP32[$6 >> 2] | 0; //@line 31650
  $19 = $4 + 976 | 0; //@line 31652
  $20 = HEAP32[$19 >> 2] | 0; //@line 31653
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(36) | 0; //@line 31654
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($17, $4 + 1056 | 0, $20); //@line 31655
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 277; //@line 31658
   $21 = $ReallocAsyncCtx4 + 4 | 0; //@line 31659
   HEAP32[$21 >> 2] = $2; //@line 31660
   $22 = $ReallocAsyncCtx4 + 8 | 0; //@line 31661
   HEAP32[$22 >> 2] = $19; //@line 31662
   $23 = $ReallocAsyncCtx4 + 12 | 0; //@line 31663
   HEAP32[$23 >> 2] = $6; //@line 31664
   $24 = $ReallocAsyncCtx4 + 16 | 0; //@line 31665
   HEAP32[$24 >> 2] = $4; //@line 31666
   $25 = $ReallocAsyncCtx4 + 20 | 0; //@line 31667
   HEAP32[$25 >> 2] = $8; //@line 31668
   $26 = $ReallocAsyncCtx4 + 24 | 0; //@line 31669
   HEAP32[$26 >> 2] = $10; //@line 31670
   $27 = $ReallocAsyncCtx4 + 28 | 0; //@line 31671
   HEAP32[$27 >> 2] = $12; //@line 31672
   $28 = $ReallocAsyncCtx4 + 32 | 0; //@line 31673
   HEAP32[$28 >> 2] = $14; //@line 31674
   sp = STACKTOP; //@line 31675
   return;
  }
  ___async_unwind = 0; //@line 31678
  HEAP32[$ReallocAsyncCtx4 >> 2] = 277; //@line 31679
  $21 = $ReallocAsyncCtx4 + 4 | 0; //@line 31680
  HEAP32[$21 >> 2] = $2; //@line 31681
  $22 = $ReallocAsyncCtx4 + 8 | 0; //@line 31682
  HEAP32[$22 >> 2] = $19; //@line 31683
  $23 = $ReallocAsyncCtx4 + 12 | 0; //@line 31684
  HEAP32[$23 >> 2] = $6; //@line 31685
  $24 = $ReallocAsyncCtx4 + 16 | 0; //@line 31686
  HEAP32[$24 >> 2] = $4; //@line 31687
  $25 = $ReallocAsyncCtx4 + 20 | 0; //@line 31688
  HEAP32[$25 >> 2] = $8; //@line 31689
  $26 = $ReallocAsyncCtx4 + 24 | 0; //@line 31690
  HEAP32[$26 >> 2] = $10; //@line 31691
  $27 = $ReallocAsyncCtx4 + 28 | 0; //@line 31692
  HEAP32[$27 >> 2] = $12; //@line 31693
  $28 = $ReallocAsyncCtx4 + 32 | 0; //@line 31694
  HEAP32[$28 >> 2] = $14; //@line 31695
  sp = STACKTOP; //@line 31696
  return;
 }
 $29 = HEAP32[$6 >> 2] | 0; //@line 31700
 $31 = HEAP32[$4 + 976 >> 2] | 0; //@line 31702
 $34 = (__ZN7LoRaPHY15get_ack_timeoutEv(HEAP32[$4 >> 2] | 0) | 0) + $31 | 0; //@line 31705
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 31706
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($29, $4 + 1076 | 0, $34); //@line 31707
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 278; //@line 31710
  $35 = $ReallocAsyncCtx3 + 4 | 0; //@line 31711
  HEAP32[$35 >> 2] = $4; //@line 31712
  $36 = $ReallocAsyncCtx3 + 8 | 0; //@line 31713
  HEAP32[$36 >> 2] = $8; //@line 31714
  $37 = $ReallocAsyncCtx3 + 12 | 0; //@line 31715
  HEAP32[$37 >> 2] = $10; //@line 31716
  $38 = $ReallocAsyncCtx3 + 16 | 0; //@line 31717
  HEAP32[$38 >> 2] = $12; //@line 31718
  $39 = $ReallocAsyncCtx3 + 20 | 0; //@line 31719
  HEAP32[$39 >> 2] = $14; //@line 31720
  sp = STACKTOP; //@line 31721
  return;
 }
 ___async_unwind = 0; //@line 31724
 HEAP32[$ReallocAsyncCtx3 >> 2] = 278; //@line 31725
 $35 = $ReallocAsyncCtx3 + 4 | 0; //@line 31726
 HEAP32[$35 >> 2] = $4; //@line 31727
 $36 = $ReallocAsyncCtx3 + 8 | 0; //@line 31728
 HEAP32[$36 >> 2] = $8; //@line 31729
 $37 = $ReallocAsyncCtx3 + 12 | 0; //@line 31730
 HEAP32[$37 >> 2] = $10; //@line 31731
 $38 = $ReallocAsyncCtx3 + 16 | 0; //@line 31732
 HEAP32[$38 >> 2] = $12; //@line 31733
 $39 = $ReallocAsyncCtx3 + 20 | 0; //@line 31734
 HEAP32[$39 >> 2] = $14; //@line 31735
 sp = STACKTOP; //@line 31736
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_431($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $32 = 0, $33 = 0, $36 = 0, $4 = 0, $44 = 0, $50 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 31745
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31747
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31749
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31751
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31753
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31755
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31757
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 31759
 if (HEAP8[$6 + 371 >> 0] | 0) {
  $18 = HEAP32[$4 >> 2] | 0; //@line 31764
  $21 = HEAP32[$6 + 972 >> 2] | 0; //@line 31767
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(32) | 0; //@line 31768
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($18, $6 + 1036 | 0, $21); //@line 31769
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 276; //@line 31772
   $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 31773
   HEAP32[$22 >> 2] = $2; //@line 31774
   $23 = $ReallocAsyncCtx5 + 8 | 0; //@line 31775
   HEAP32[$23 >> 2] = $6; //@line 31776
   $24 = $ReallocAsyncCtx5 + 12 | 0; //@line 31777
   HEAP32[$24 >> 2] = $4; //@line 31778
   $25 = $ReallocAsyncCtx5 + 16 | 0; //@line 31779
   HEAP32[$25 >> 2] = $8; //@line 31780
   $26 = $ReallocAsyncCtx5 + 20 | 0; //@line 31781
   HEAP32[$26 >> 2] = $10; //@line 31782
   $27 = $ReallocAsyncCtx5 + 24 | 0; //@line 31783
   HEAP32[$27 >> 2] = $12; //@line 31784
   $28 = $ReallocAsyncCtx5 + 28 | 0; //@line 31785
   HEAP32[$28 >> 2] = $14; //@line 31786
   sp = STACKTOP; //@line 31787
   return;
  }
  ___async_unwind = 0; //@line 31790
  HEAP32[$ReallocAsyncCtx5 >> 2] = 276; //@line 31791
  $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 31792
  HEAP32[$22 >> 2] = $2; //@line 31793
  $23 = $ReallocAsyncCtx5 + 8 | 0; //@line 31794
  HEAP32[$23 >> 2] = $6; //@line 31795
  $24 = $ReallocAsyncCtx5 + 12 | 0; //@line 31796
  HEAP32[$24 >> 2] = $4; //@line 31797
  $25 = $ReallocAsyncCtx5 + 16 | 0; //@line 31798
  HEAP32[$25 >> 2] = $8; //@line 31799
  $26 = $ReallocAsyncCtx5 + 20 | 0; //@line 31800
  HEAP32[$26 >> 2] = $10; //@line 31801
  $27 = $ReallocAsyncCtx5 + 24 | 0; //@line 31802
  HEAP32[$27 >> 2] = $12; //@line 31803
  $28 = $ReallocAsyncCtx5 + 28 | 0; //@line 31804
  HEAP32[$28 >> 2] = $14; //@line 31805
  sp = STACKTOP; //@line 31806
  return;
 }
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($6 + 288 | 0) | 0) + 4 >> 2] = 0; //@line 31812
 $32 = $6 + 944 | 0; //@line 31813
 $33 = HEAP8[$32 >> 0] | 0; //@line 31814
 if (!($33 << 24 >> 24)) {
  HEAP8[$32 >> 0] = 1; //@line 31817
  $36 = 1; //@line 31818
 } else {
  $36 = $33; //@line 31820
 }
 HEAP8[$32 >> 0] = $36 | 32; //@line 31823
 HEAP8[$6 + 376 >> 0] = ($8 | 0) == 0 & (HEAP8[$6 + 944 >> 0] & 8) != 0 & 1; //@line 31832
 $44 = HEAP8[$6 + 378 >> 0] | 0; //@line 31834
 HEAP8[$6 + 379 >> 0] = $44; //@line 31836
 HEAP8[$10 >> 0] = $44; //@line 31837
 HEAP8[$12 + 1 >> 0] = HEAP8[$6 + 372 >> 0] | 0; //@line 31841
 HEAP32[$12 + 4 >> 2] = $14; //@line 31843
 $50 = HEAP32[$6 >> 2] | 0; //@line 31844
 $53 = HEAP32[(HEAP32[$50 >> 2] | 0) + 12 >> 2] | 0; //@line 31847
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 31848
 FUNCTION_TABLE_vii[$53 & 31]($50, $12); //@line 31849
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 279; //@line 31852
  $54 = $ReallocAsyncCtx + 4 | 0; //@line 31853
  HEAP32[$54 >> 2] = $6; //@line 31854
  $55 = $ReallocAsyncCtx + 8 | 0; //@line 31855
  HEAP32[$55 >> 2] = $14; //@line 31856
  $56 = $ReallocAsyncCtx + 12 | 0; //@line 31857
  HEAP32[$56 >> 2] = $10; //@line 31858
  sp = STACKTOP; //@line 31859
  return;
 }
 ___async_unwind = 0; //@line 31862
 HEAP32[$ReallocAsyncCtx >> 2] = 279; //@line 31863
 $54 = $ReallocAsyncCtx + 4 | 0; //@line 31864
 HEAP32[$54 >> 2] = $6; //@line 31865
 $55 = $ReallocAsyncCtx + 8 | 0; //@line 31866
 HEAP32[$55 >> 2] = $14; //@line 31867
 $56 = $ReallocAsyncCtx + 12 | 0; //@line 31868
 HEAP32[$56 >> 2] = $10; //@line 31869
 sp = STACKTOP; //@line 31870
 return;
}
function __ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_229($0) {
 $0 = $0 | 0;
 var $$pre12 = 0, $10 = 0, $12 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 3902
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3904
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3906
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3908
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3910
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3912
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 3914
 $$pre12 = HEAP32[$2 >> 2] | 0; //@line 3915
 if ($$pre12 | 0) {
  $15 = HEAP32[$$pre12 + 4 >> 2] | 0; //@line 3919
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 3920
  FUNCTION_TABLE_vii[$15 & 31]($6, $8); //@line 3921
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 232; //@line 3924
   $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 3925
   HEAP32[$16 >> 2] = $2; //@line 3926
   $17 = $ReallocAsyncCtx4 + 8 | 0; //@line 3927
   HEAP32[$17 >> 2] = $4; //@line 3928
   $18 = $ReallocAsyncCtx4 + 12 | 0; //@line 3929
   HEAP32[$18 >> 2] = $10; //@line 3930
   $19 = $ReallocAsyncCtx4 + 16 | 0; //@line 3931
   HEAP32[$19 >> 2] = $12; //@line 3932
   sp = STACKTOP; //@line 3933
   return;
  }
  ___async_unwind = 0; //@line 3936
  HEAP32[$ReallocAsyncCtx4 >> 2] = 232; //@line 3937
  $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 3938
  HEAP32[$16 >> 2] = $2; //@line 3939
  $17 = $ReallocAsyncCtx4 + 8 | 0; //@line 3940
  HEAP32[$17 >> 2] = $4; //@line 3941
  $18 = $ReallocAsyncCtx4 + 12 | 0; //@line 3942
  HEAP32[$18 >> 2] = $10; //@line 3943
  $19 = $ReallocAsyncCtx4 + 16 | 0; //@line 3944
  HEAP32[$19 >> 2] = $12; //@line 3945
  sp = STACKTOP; //@line 3946
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 3949
 $20 = $10 + 32 | 0; //@line 3950
 $21 = $10 + 44 | 0; //@line 3951
 $22 = HEAP32[$21 >> 2] | 0; //@line 3952
 if (!$22) {
  return;
 }
 $24 = $12 + 1912 | 0; //@line 3957
 if (($24 | 0) == ($20 | 0)) {
  return;
 }
 $26 = $12 + 1924 | 0; //@line 3962
 $27 = HEAP32[$26 >> 2] | 0; //@line 3963
 if (!$27) {
  $36 = HEAP32[$22 + 4 >> 2] | 0; //@line 3967
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 3968
  FUNCTION_TABLE_vii[$36 & 31]($24, $20); //@line 3969
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 234; //@line 3972
   $37 = $ReallocAsyncCtx6 + 4 | 0; //@line 3973
   HEAP32[$37 >> 2] = $21; //@line 3974
   $38 = $ReallocAsyncCtx6 + 8 | 0; //@line 3975
   HEAP32[$38 >> 2] = $26; //@line 3976
   sp = STACKTOP; //@line 3977
   return;
  }
  ___async_unwind = 0; //@line 3980
  HEAP32[$ReallocAsyncCtx6 >> 2] = 234; //@line 3981
  $37 = $ReallocAsyncCtx6 + 4 | 0; //@line 3982
  HEAP32[$37 >> 2] = $21; //@line 3983
  $38 = $ReallocAsyncCtx6 + 8 | 0; //@line 3984
  HEAP32[$38 >> 2] = $26; //@line 3985
  sp = STACKTOP; //@line 3986
  return;
 } else {
  $30 = HEAP32[$27 + 8 >> 2] | 0; //@line 3990
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 3991
  FUNCTION_TABLE_vi[$30 & 1023]($24); //@line 3992
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 233; //@line 3995
   $31 = $ReallocAsyncCtx5 + 4 | 0; //@line 3996
   HEAP32[$31 >> 2] = $21; //@line 3997
   $32 = $ReallocAsyncCtx5 + 8 | 0; //@line 3998
   HEAP32[$32 >> 2] = $26; //@line 3999
   $33 = $ReallocAsyncCtx5 + 12 | 0; //@line 4000
   HEAP32[$33 >> 2] = $24; //@line 4001
   $34 = $ReallocAsyncCtx5 + 16 | 0; //@line 4002
   HEAP32[$34 >> 2] = $20; //@line 4003
   sp = STACKTOP; //@line 4004
   return;
  }
  ___async_unwind = 0; //@line 4007
  HEAP32[$ReallocAsyncCtx5 >> 2] = 233; //@line 4008
  $31 = $ReallocAsyncCtx5 + 4 | 0; //@line 4009
  HEAP32[$31 >> 2] = $21; //@line 4010
  $32 = $ReallocAsyncCtx5 + 8 | 0; //@line 4011
  HEAP32[$32 >> 2] = $26; //@line 4012
  $33 = $ReallocAsyncCtx5 + 12 | 0; //@line 4013
  HEAP32[$33 >> 2] = $24; //@line 4014
  $34 = $ReallocAsyncCtx5 + 16 | 0; //@line 4015
  HEAP32[$34 >> 2] = $20; //@line 4016
  sp = STACKTOP; //@line 4017
  return;
 }
}
function _initialize__async_cb_15($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $31 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $48 = 0, $49 = 0, $50 = 0, $52 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $62 = 0, $64 = 0, $70 = 0, $71 = 0, $72 = 0, $81 = 0, $82 = 0, $83 = 0, $85 = 0, $89 = 0, $95 = 0, $96 = 0, $97 = 0, $99 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 17894
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17898
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17900
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17904
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17906
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 17908
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 17910
 if (($AsyncRetVal | 0) != (HEAP32[(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) + 32 >> 2] | 0)) {
  $23 = $AsyncRetVal - (HEAP32[$6 >> 2] | 0) & HEAP32[HEAP32[$0 + 16 >> 2] >> 2]; //@line 17919
  HEAP32[$6 >> 2] = $AsyncRetVal; //@line 17920
  $24 = HEAP32[$10 >> 2] | 0; //@line 17921
  L4 : do {
   if (($24 | 0) < 1e6) {
    switch ($24 | 0) {
    case 32768:
     {
      break;
     }
    default:
     {
      label = 6; //@line 17930
      break L4;
     }
    }
    $25 = ___muldi3($23 | 0, 0, 1e6, 0) | 0; //@line 17934
    $27 = _bitshift64Lshr($25 | 0, tempRet0 | 0, 15) | 0; //@line 17936
    $28 = tempRet0; //@line 17937
    $31 = $12; //@line 17940
    $37 = _i64Add(HEAP32[$31 >> 2] | 0, HEAP32[$31 + 4 >> 2] | 0, $23 * 1e6 & 32704 | 0, 0) | 0; //@line 17946
    $38 = tempRet0; //@line 17947
    $39 = $12; //@line 17948
    HEAP32[$39 >> 2] = $37; //@line 17950
    HEAP32[$39 + 4 >> 2] = $38; //@line 17953
    if ($38 >>> 0 < 0 | ($38 | 0) == 0 & $37 >>> 0 < 32768) {
     $95 = $27; //@line 17960
     $96 = $28; //@line 17960
    } else {
     $48 = _i64Add($27 | 0, $28 | 0, 1, 0) | 0; //@line 17962
     $49 = tempRet0; //@line 17963
     $50 = _i64Add($37 | 0, $38 | 0, -32768, -1) | 0; //@line 17964
     $52 = $12; //@line 17966
     HEAP32[$52 >> 2] = $50; //@line 17968
     HEAP32[$52 + 4 >> 2] = tempRet0; //@line 17971
     $95 = $48; //@line 17972
     $96 = $49; //@line 17972
    }
   } else {
    switch ($24 | 0) {
    case 1e6:
     {
      $95 = $23; //@line 17977
      $96 = 0; //@line 17977
      break;
     }
    default:
     {
      label = 6; //@line 17981
     }
    }
   }
  } while (0);
  if ((label | 0) == 6) {
   $56 = ___muldi3($23 | 0, 0, 1e6, 0) | 0; //@line 17987
   $57 = tempRet0; //@line 17988
   $58 = ___udivdi3($56 | 0, $57 | 0, $24 | 0, 0) | 0; //@line 17989
   $59 = tempRet0; //@line 17990
   $60 = ___muldi3($58 | 0, $59 | 0, $24 | 0, 0) | 0; //@line 17991
   $62 = _i64Subtract($56 | 0, $57 | 0, $60 | 0, tempRet0 | 0) | 0; //@line 17993
   $64 = $12; //@line 17995
   $70 = _i64Add($62 | 0, tempRet0 | 0, HEAP32[$64 >> 2] | 0, HEAP32[$64 + 4 >> 2] | 0) | 0; //@line 18001
   $71 = tempRet0; //@line 18002
   $72 = $12; //@line 18003
   HEAP32[$72 >> 2] = $70; //@line 18005
   HEAP32[$72 + 4 >> 2] = $71; //@line 18008
   if ($71 >>> 0 < 0 | ($71 | 0) == 0 & $70 >>> 0 < $24 >>> 0) {
    $95 = $58; //@line 18015
    $96 = $59; //@line 18015
   } else {
    $81 = _i64Add($58 | 0, $59 | 0, 1, 0) | 0; //@line 18017
    $82 = tempRet0; //@line 18018
    $83 = _i64Subtract($70 | 0, $71 | 0, $24 | 0, 0) | 0; //@line 18019
    $85 = $12; //@line 18021
    HEAP32[$85 >> 2] = $83; //@line 18023
    HEAP32[$85 + 4 >> 2] = tempRet0; //@line 18026
    $95 = $81; //@line 18027
    $96 = $82; //@line 18027
   }
  }
  $89 = $14; //@line 18030
  $97 = _i64Add(HEAP32[$89 >> 2] | 0, HEAP32[$89 + 4 >> 2] | 0, $95 | 0, $96 | 0) | 0; //@line 18036
  $99 = $14; //@line 18038
  HEAP32[$99 >> 2] = $97; //@line 18040
  HEAP32[$99 + 4 >> 2] = tempRet0; //@line 18043
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 18045
 _schedule_interrupt($4); //@line 18046
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 601; //@line 18049
  sp = STACKTOP; //@line 18050
  return;
 }
 ___async_unwind = 0; //@line 18053
 HEAP32[$ReallocAsyncCtx5 >> 2] = 601; //@line 18054
 sp = STACKTOP; //@line 18055
 return;
}
function __ZN7LoRaMac11schedule_txEv__async_cb_69($0) {
 $0 = $0 | 0;
 var $$sink = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $22 = 0, $26 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $48 = 0, $6 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 20903
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20907
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20909
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20911
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20913
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20915
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20917
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20919
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 20921
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 20925
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 20929
 do {
  if (!(HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0)) {
   HEAP32[$4 + 972 >> 2] = (HEAP32[$4 + 1172 >> 2] | 0) + (HEAP32[$4 + 1120 >> 2] | 0); //@line 20940
   $$sink = $4 + 1124 | 0; //@line 20942
  } else {
   $37 = HEAP8[$4 + 893 >> 0] | 0; //@line 20945
   $38 = HEAP8[$6 >> 0] | 0; //@line 20946
   $40 = __ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($4 + 4 | 0) | 0; //@line 20948
   $48 = ($40 & 255) + ($37 & 255) | 0; //@line 20956
   if ($48 >>> 0 < 256 & $48 >>> 0 <= ((__ZN7LoRaPHY15get_max_payloadEhb(HEAP32[$8 >> 2] | 0, $38, (HEAP8[$4 + 369 >> 0] | 0) != 0) | 0) & 255) >>> 0) {
    HEAP32[$4 + 972 >> 2] = (HEAP32[$4 + 1172 >> 2] | 0) + (HEAP32[$4 + 1112 >> 2] | 0); //@line 20968
    $$sink = $4 + 1116 | 0; //@line 20970
    break;
   } else {
    HEAP32[___async_retval >> 2] = -1010; //@line 20974
    return;
   }
  }
 } while (0);
 HEAP32[$4 + 976 >> 2] = (HEAP32[$4 + 1196 >> 2] | 0) + (HEAP32[$$sink >> 2] | 0); //@line 20984
 if (!(HEAP32[$14 >> 2] | 0)) {
  $66 = HEAP8[$16 >> 0] | 0; //@line 20988
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 20989
  __ZN7LoRaMac21send_frame_on_channelEh($4, $66) | 0; //@line 20990
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 398; //@line 20993
   $67 = $ReallocAsyncCtx9 + 4 | 0; //@line 20994
   HEAP32[$67 >> 2] = $10; //@line 20995
   $68 = $ReallocAsyncCtx9 + 8 | 0; //@line 20996
   HEAP32[$68 >> 2] = $12; //@line 20997
   sp = STACKTOP; //@line 20998
   return;
  }
  ___async_unwind = 0; //@line 21001
  HEAP32[$ReallocAsyncCtx9 >> 2] = 398; //@line 21002
  $67 = $ReallocAsyncCtx9 + 4 | 0; //@line 21003
  HEAP32[$67 >> 2] = $10; //@line 21004
  $68 = $ReallocAsyncCtx9 + 8 | 0; //@line 21005
  HEAP32[$68 >> 2] = $12; //@line 21006
  sp = STACKTOP; //@line 21007
  return;
 } else {
  $69 = $4 + 968 | 0; //@line 21010
  HEAP32[$69 >> 2] = HEAP32[$69 >> 2] | 16; //@line 21013
  _printf(12171, $18) | 0; //@line 21014
  HEAP32[$22 >> 2] = HEAP32[$14 >> 2]; //@line 21016
  _printf(12211, $22) | 0; //@line 21017
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 21018
  _putchar(10) | 0; //@line 21019
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 399; //@line 21022
   $73 = $ReallocAsyncCtx6 + 4 | 0; //@line 21023
   HEAP32[$73 >> 2] = $26; //@line 21024
   $74 = $ReallocAsyncCtx6 + 8 | 0; //@line 21025
   HEAP32[$74 >> 2] = $4; //@line 21026
   $75 = $ReallocAsyncCtx6 + 12 | 0; //@line 21027
   HEAP32[$75 >> 2] = $14; //@line 21028
   $76 = $ReallocAsyncCtx6 + 16 | 0; //@line 21029
   HEAP32[$76 >> 2] = $10; //@line 21030
   $77 = $ReallocAsyncCtx6 + 20 | 0; //@line 21031
   HEAP32[$77 >> 2] = $12; //@line 21032
   sp = STACKTOP; //@line 21033
   return;
  }
  ___async_unwind = 0; //@line 21036
  HEAP32[$ReallocAsyncCtx6 >> 2] = 399; //@line 21037
  $73 = $ReallocAsyncCtx6 + 4 | 0; //@line 21038
  HEAP32[$73 >> 2] = $26; //@line 21039
  $74 = $ReallocAsyncCtx6 + 8 | 0; //@line 21040
  HEAP32[$74 >> 2] = $4; //@line 21041
  $75 = $ReallocAsyncCtx6 + 12 | 0; //@line 21042
  HEAP32[$75 >> 2] = $14; //@line 21043
  $76 = $ReallocAsyncCtx6 + 16 | 0; //@line 21044
  HEAP32[$76 >> 2] = $10; //@line 21045
  $77 = $ReallocAsyncCtx6 + 20 | 0; //@line 21046
  HEAP32[$77 >> 2] = $12; //@line 21047
  sp = STACKTOP; //@line 21048
  return;
 }
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_201($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 2199
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2203
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2205
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2207
 $9 = $4 + 12 | 0; //@line 2208
 HEAP32[$4 >> 2] = 478; //@line 2209
 HEAP32[$4 + 4 >> 2] = 0; //@line 2211
 HEAP32[$4 + 8 >> 2] = $6; //@line 2213
 HEAP32[$9 >> 2] = 836; //@line 2214
 $10 = $6 + 1260 | 0; //@line 2215
 if (($10 | 0) == ($4 | 0)) {
  $29 = HEAP32[211] | 0; //@line 2219
  $ReallocAsyncCtx15 = _emscripten_realloc_async_context(12) | 0; //@line 2220
  FUNCTION_TABLE_vi[$29 & 1023]($4); //@line 2221
  if (___async) {
   HEAP32[$ReallocAsyncCtx15 >> 2] = 481; //@line 2224
   $30 = $ReallocAsyncCtx15 + 4 | 0; //@line 2225
   HEAP32[$30 >> 2] = $4; //@line 2226
   $31 = $ReallocAsyncCtx15 + 8 | 0; //@line 2227
   HEAP32[$31 >> 2] = $8; //@line 2228
   sp = STACKTOP; //@line 2229
   return;
  }
  ___async_unwind = 0; //@line 2232
  HEAP32[$ReallocAsyncCtx15 >> 2] = 481; //@line 2233
  $30 = $ReallocAsyncCtx15 + 4 | 0; //@line 2234
  HEAP32[$30 >> 2] = $4; //@line 2235
  $31 = $ReallocAsyncCtx15 + 8 | 0; //@line 2236
  HEAP32[$31 >> 2] = $8; //@line 2237
  sp = STACKTOP; //@line 2238
  return;
 }
 $12 = $6 + 1272 | 0; //@line 2241
 $13 = HEAP32[$12 >> 2] | 0; //@line 2242
 if (!$13) {
  $23 = HEAP32[210] | 0; //@line 2246
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(20) | 0; //@line 2247
  FUNCTION_TABLE_vii[$23 & 31]($10, $4); //@line 2248
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 480; //@line 2251
   $24 = $ReallocAsyncCtx14 + 4 | 0; //@line 2252
   HEAP32[$24 >> 2] = $9; //@line 2253
   $25 = $ReallocAsyncCtx14 + 8 | 0; //@line 2254
   HEAP32[$25 >> 2] = $12; //@line 2255
   $26 = $ReallocAsyncCtx14 + 12 | 0; //@line 2256
   HEAP32[$26 >> 2] = $4; //@line 2257
   $27 = $ReallocAsyncCtx14 + 16 | 0; //@line 2258
   HEAP32[$27 >> 2] = $8; //@line 2259
   sp = STACKTOP; //@line 2260
   return;
  }
  ___async_unwind = 0; //@line 2263
  HEAP32[$ReallocAsyncCtx14 >> 2] = 480; //@line 2264
  $24 = $ReallocAsyncCtx14 + 4 | 0; //@line 2265
  HEAP32[$24 >> 2] = $9; //@line 2266
  $25 = $ReallocAsyncCtx14 + 8 | 0; //@line 2267
  HEAP32[$25 >> 2] = $12; //@line 2268
  $26 = $ReallocAsyncCtx14 + 12 | 0; //@line 2269
  HEAP32[$26 >> 2] = $4; //@line 2270
  $27 = $ReallocAsyncCtx14 + 16 | 0; //@line 2271
  HEAP32[$27 >> 2] = $8; //@line 2272
  sp = STACKTOP; //@line 2273
  return;
 } else {
  $16 = HEAP32[$13 + 8 >> 2] | 0; //@line 2277
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(24) | 0; //@line 2278
  FUNCTION_TABLE_vi[$16 & 1023]($10); //@line 2279
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 479; //@line 2282
   $17 = $ReallocAsyncCtx13 + 4 | 0; //@line 2283
   HEAP32[$17 >> 2] = $9; //@line 2284
   $18 = $ReallocAsyncCtx13 + 8 | 0; //@line 2285
   HEAP32[$18 >> 2] = $12; //@line 2286
   $19 = $ReallocAsyncCtx13 + 12 | 0; //@line 2287
   HEAP32[$19 >> 2] = $10; //@line 2288
   $20 = $ReallocAsyncCtx13 + 16 | 0; //@line 2289
   HEAP32[$20 >> 2] = $4; //@line 2290
   $21 = $ReallocAsyncCtx13 + 20 | 0; //@line 2291
   HEAP32[$21 >> 2] = $8; //@line 2292
   sp = STACKTOP; //@line 2293
   return;
  }
  ___async_unwind = 0; //@line 2296
  HEAP32[$ReallocAsyncCtx13 >> 2] = 479; //@line 2297
  $17 = $ReallocAsyncCtx13 + 4 | 0; //@line 2298
  HEAP32[$17 >> 2] = $9; //@line 2299
  $18 = $ReallocAsyncCtx13 + 8 | 0; //@line 2300
  HEAP32[$18 >> 2] = $12; //@line 2301
  $19 = $ReallocAsyncCtx13 + 12 | 0; //@line 2302
  HEAP32[$19 >> 2] = $10; //@line 2303
  $20 = $ReallocAsyncCtx13 + 16 | 0; //@line 2304
  HEAP32[$20 >> 2] = $4; //@line 2305
  $21 = $ReallocAsyncCtx13 + 20 | 0; //@line 2306
  HEAP32[$21 >> 2] = $8; //@line 2307
  sp = STACKTOP; //@line 2308
  return;
 }
}
function __ZN7LoRaMac17on_radio_rx_errorEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $17 = 0, $21 = 0, $28 = 0, $32 = 0, $36 = 0, $45 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11296
 STACKTOP = STACKTOP + 16 | 0; //@line 11297
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 11297
 $$byval_copy = sp + 8 | 0; //@line 11298
 $1 = sp; //@line 11299
 do {
  if ((HEAP32[$0 + 360 >> 2] | 0) == 2) {
   $6 = HEAP32[$0 + 1328 >> 2] | 0; //@line 11306
   HEAP32[$1 >> 2] = 273; //@line 11307
   HEAP32[$1 + 4 >> 2] = 0; //@line 11309
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 11310
   HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 11311
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 11311
   $7 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($6, $0, $$byval_copy) | 0; //@line 11312
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 348; //@line 11315
    HEAP32[$AsyncCtx3 + 4 >> 2] = $1; //@line 11317
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 11319
    sp = STACKTOP; //@line 11320
    STACKTOP = sp; //@line 11321
    return;
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 11323
   do {
    if (!$7) {
     $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 11327
     _mbed_assert_internal(12025, 12034, 215); //@line 11328
     if (___async) {
      HEAP32[$AsyncCtx11 >> 2] = 349; //@line 11331
      HEAP32[$AsyncCtx11 + 4 >> 2] = $1; //@line 11333
      HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 11335
      sp = STACKTOP; //@line 11336
      STACKTOP = sp; //@line 11337
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx11 | 0); //@line 11339
      break;
     }
    }
   } while (0);
   HEAP32[$0 + 364 >> 2] = 2; //@line 11345
   if (!(HEAP8[$0 + 373 >> 0] | 0)) {
    label = 20; //@line 11350
   } else {
    label = 19; //@line 11352
   }
  } else {
   $17 = HEAP32[$0 >> 2] | 0; //@line 11355
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 11356
   __ZN7LoRaPHY18put_radio_to_sleepEv($17); //@line 11357
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 350; //@line 11360
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 11362
    sp = STACKTOP; //@line 11363
    STACKTOP = sp; //@line 11364
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 11366
   $21 = (HEAP8[$0 + 373 >> 0] | 0) != 0; //@line 11372
   if (HEAP32[$0 + 364 >> 2] | 0) {
    if ($21) {
     label = 19; //@line 11375
     break;
    } else {
     label = 20; //@line 11378
     break;
    }
   }
   if ($21) {
    HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($0 + 288 | 0) | 0) + 4 >> 2] = 5; //@line 11386
   }
   HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) + 4 >> 2] = 5; //@line 11391
   $28 = $0 + 356 | 0; //@line 11392
   $32 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$28 >> 2] | 0, HEAP32[$0 + 980 >> 2] | 0) | 0; //@line 11396
   if ($32 >>> 0 < (HEAP32[$0 + 976 >> 2] | 0) >>> 0) {
    STACKTOP = sp; //@line 11401
    return;
   }
   $36 = HEAP32[$28 >> 2] | 0; //@line 11403
   $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 11405
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($36, $0 + 1056 | 0); //@line 11406
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 351; //@line 11409
    HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 11411
    sp = STACKTOP; //@line 11412
    STACKTOP = sp; //@line 11413
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 11415
    break;
   }
  }
 } while (0);
 if ((label | 0) == 19) {
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($0 + 288 | 0) | 0) + 4 >> 2] = 6; //@line 11424
  label = 20; //@line 11425
 }
 if ((label | 0) == 20) {
  HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) + 4 >> 2] = 6; //@line 11431
 }
 $45 = $0 + 944 | 0; //@line 11433
 HEAP8[$45 >> 0] = HEAP8[$45 >> 0] | 32; //@line 11436
 STACKTOP = sp; //@line 11437
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_3($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $18 = 0, $2 = 0, $21 = 0, $24 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 16734
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16736
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16738
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16740
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16742
 $10 = HEAP8[$0 + 20 >> 0] & 1; //@line 16745
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16747
 $15 = $12 + 24 | 0; //@line 16750
 do {
  if ((HEAP32[$0 + 28 >> 2] | 0) > 1) {
   $18 = HEAP32[$12 + 8 >> 2] | 0; //@line 16755
   if (!($18 & 2)) {
    $21 = $2 + 36 | 0; //@line 16759
    if ((HEAP32[$21 >> 2] | 0) != 1) {
     if (!($18 & 1)) {
      $38 = $2 + 54 | 0; //@line 16766
      if (HEAP8[$38 >> 0] | 0) {
       break;
      }
      if ((HEAP32[$21 >> 2] | 0) == 1) {
       break;
      }
      $ReallocAsyncCtx = _emscripten_realloc_async_context(36) | 0; //@line 16777
      __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $2, $6, $8, $10); //@line 16778
      if (!___async) {
       ___async_unwind = 0; //@line 16781
      }
      HEAP32[$ReallocAsyncCtx >> 2] = 702; //@line 16783
      HEAP32[$ReallocAsyncCtx + 4 >> 2] = $15; //@line 16785
      HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 16787
      HEAP32[$ReallocAsyncCtx + 12 >> 2] = $38; //@line 16789
      HEAP32[$ReallocAsyncCtx + 16 >> 2] = $21; //@line 16791
      HEAP32[$ReallocAsyncCtx + 20 >> 2] = $2; //@line 16793
      HEAP32[$ReallocAsyncCtx + 24 >> 2] = $6; //@line 16795
      HEAP32[$ReallocAsyncCtx + 28 >> 2] = $8; //@line 16797
      HEAP8[$ReallocAsyncCtx + 32 >> 0] = $10 & 1; //@line 16800
      sp = STACKTOP; //@line 16801
      return;
     }
     $36 = $2 + 24 | 0; //@line 16804
     $37 = $2 + 54 | 0; //@line 16805
     if (HEAP8[$37 >> 0] | 0) {
      break;
     }
     if ((HEAP32[$21 >> 2] | 0) == 1) {
      if ((HEAP32[$36 >> 2] | 0) == 1) {
       break;
      }
     }
     $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 16820
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $2, $6, $8, $10); //@line 16821
     if (!___async) {
      ___async_unwind = 0; //@line 16824
     }
     HEAP32[$ReallocAsyncCtx2 >> 2] = 701; //@line 16826
     HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $15; //@line 16828
     HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 16830
     HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $37; //@line 16832
     HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $21; //@line 16834
     HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $36; //@line 16836
     HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $2; //@line 16838
     HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $6; //@line 16840
     HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $8; //@line 16842
     HEAP8[$ReallocAsyncCtx2 + 36 >> 0] = $10 & 1; //@line 16845
     sp = STACKTOP; //@line 16846
     return;
    }
   }
   $24 = $2 + 54 | 0; //@line 16850
   if (!(HEAP8[$24 >> 0] | 0)) {
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 16854
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $2, $6, $8, $10); //@line 16855
    if (!___async) {
     ___async_unwind = 0; //@line 16858
    }
    HEAP32[$ReallocAsyncCtx3 >> 2] = 700; //@line 16860
    HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $15; //@line 16862
    HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 16864
    HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $24; //@line 16866
    HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $2; //@line 16868
    HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $6; //@line 16870
    HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $8; //@line 16872
    HEAP8[$ReallocAsyncCtx3 + 28 >> 0] = $10 & 1; //@line 16875
    sp = STACKTOP; //@line 16876
    return;
   }
  }
 } while (0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $31 = 0, $32 = 0, $33 = 0, $62 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 15695
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 15700
 } else {
  $9 = $1 + 52 | 0; //@line 15702
  $10 = HEAP8[$9 >> 0] | 0; //@line 15703
  $11 = $1 + 53 | 0; //@line 15704
  $12 = HEAP8[$11 >> 0] | 0; //@line 15705
  $15 = HEAP32[$0 + 12 >> 2] | 0; //@line 15708
  $16 = $0 + 16 + ($15 << 3) | 0; //@line 15709
  HEAP8[$9 >> 0] = 0; //@line 15710
  HEAP8[$11 >> 0] = 0; //@line 15711
  $AsyncCtx3 = _emscripten_alloc_async_context(52, sp) | 0; //@line 15712
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0 + 16 | 0, $1, $2, $3, $4, $5); //@line 15713
  if (___async) {
   HEAP32[$AsyncCtx3 >> 2] = 696; //@line 15716
   HEAP32[$AsyncCtx3 + 4 >> 2] = $15; //@line 15718
   HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 15720
   HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 15722
   HEAP8[$AsyncCtx3 + 16 >> 0] = $10; //@line 15724
   HEAP32[$AsyncCtx3 + 20 >> 2] = $9; //@line 15726
   HEAP8[$AsyncCtx3 + 24 >> 0] = $12; //@line 15728
   HEAP32[$AsyncCtx3 + 28 >> 2] = $11; //@line 15730
   HEAP32[$AsyncCtx3 + 32 >> 2] = $2; //@line 15732
   HEAP32[$AsyncCtx3 + 36 >> 2] = $3; //@line 15734
   HEAP32[$AsyncCtx3 + 40 >> 2] = $4; //@line 15736
   HEAP8[$AsyncCtx3 + 44 >> 0] = $5 & 1; //@line 15739
   HEAP32[$AsyncCtx3 + 48 >> 2] = $16; //@line 15741
   sp = STACKTOP; //@line 15742
   return;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15745
  L7 : do {
   if (($15 | 0) > 1) {
    $31 = $1 + 24 | 0; //@line 15750
    $32 = $0 + 8 | 0; //@line 15751
    $33 = $1 + 54 | 0; //@line 15752
    $$0 = $0 + 24 | 0; //@line 15753
    while (1) {
     if (HEAP8[$33 >> 0] | 0) {
      break L7;
     }
     if (!(HEAP8[$9 >> 0] | 0)) {
      if (HEAP8[$11 >> 0] | 0) {
       if (!(HEAP32[$32 >> 2] & 1)) {
        break L7;
       }
      }
     } else {
      if ((HEAP32[$31 >> 2] | 0) == 1) {
       break L7;
      }
      if (!(HEAP32[$32 >> 2] & 2)) {
       break L7;
      }
     }
     HEAP8[$9 >> 0] = 0; //@line 15786
     HEAP8[$11 >> 0] = 0; //@line 15787
     $AsyncCtx = _emscripten_alloc_async_context(60, sp) | 0; //@line 15788
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$0, $1, $2, $3, $4, $5); //@line 15789
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 15794
     $62 = $$0 + 8 | 0; //@line 15795
     if ($62 >>> 0 < $16 >>> 0) {
      $$0 = $62; //@line 15798
     } else {
      break L7;
     }
    }
    HEAP32[$AsyncCtx >> 2] = 697; //@line 15803
    HEAP32[$AsyncCtx + 4 >> 2] = $$0; //@line 15805
    HEAP32[$AsyncCtx + 8 >> 2] = $16; //@line 15807
    HEAP32[$AsyncCtx + 12 >> 2] = $33; //@line 15809
    HEAP8[$AsyncCtx + 16 >> 0] = $10; //@line 15811
    HEAP32[$AsyncCtx + 20 >> 2] = $9; //@line 15813
    HEAP8[$AsyncCtx + 24 >> 0] = $12; //@line 15815
    HEAP32[$AsyncCtx + 28 >> 2] = $11; //@line 15817
    HEAP32[$AsyncCtx + 32 >> 2] = $31; //@line 15819
    HEAP32[$AsyncCtx + 36 >> 2] = $32; //@line 15821
    HEAP32[$AsyncCtx + 40 >> 2] = $1; //@line 15823
    HEAP32[$AsyncCtx + 44 >> 2] = $2; //@line 15825
    HEAP32[$AsyncCtx + 48 >> 2] = $3; //@line 15827
    HEAP32[$AsyncCtx + 52 >> 2] = $4; //@line 15829
    HEAP8[$AsyncCtx + 56 >> 0] = $5 & 1; //@line 15832
    sp = STACKTOP; //@line 15833
    return;
   }
  } while (0);
  HEAP8[$9 >> 0] = $10; //@line 15837
  HEAP8[$11 >> 0] = $12; //@line 15838
 }
 return;
}
function _pop_arg_673($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $108 = 0, $109 = 0.0, $115 = 0, $116 = 0.0, $16 = 0, $17 = 0, $20 = 0, $29 = 0, $30 = 0, $31 = 0, $40 = 0, $41 = 0, $43 = 0, $46 = 0, $47 = 0, $56 = 0, $57 = 0, $59 = 0, $62 = 0, $71 = 0, $72 = 0, $73 = 0, $82 = 0, $83 = 0, $85 = 0, $88 = 0, $9 = 0, $97 = 0, $98 = 0, $99 = 0;
 L1 : do {
  if ($1 >>> 0 <= 20) {
   do {
    switch ($1 | 0) {
    case 9:
     {
      $9 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 12693
      $10 = HEAP32[$9 >> 2] | 0; //@line 12694
      HEAP32[$2 >> 2] = $9 + 4; //@line 12696
      HEAP32[$0 >> 2] = $10; //@line 12697
      break L1;
      break;
     }
    case 10:
     {
      $16 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 12713
      $17 = HEAP32[$16 >> 2] | 0; //@line 12714
      HEAP32[$2 >> 2] = $16 + 4; //@line 12716
      $20 = $0; //@line 12719
      HEAP32[$20 >> 2] = $17; //@line 12721
      HEAP32[$20 + 4 >> 2] = (($17 | 0) < 0) << 31 >> 31; //@line 12724
      break L1;
      break;
     }
    case 11:
     {
      $29 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 12740
      $30 = HEAP32[$29 >> 2] | 0; //@line 12741
      HEAP32[$2 >> 2] = $29 + 4; //@line 12743
      $31 = $0; //@line 12744
      HEAP32[$31 >> 2] = $30; //@line 12746
      HEAP32[$31 + 4 >> 2] = 0; //@line 12749
      break L1;
      break;
     }
    case 12:
     {
      $40 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 12765
      $41 = $40; //@line 12766
      $43 = HEAP32[$41 >> 2] | 0; //@line 12768
      $46 = HEAP32[$41 + 4 >> 2] | 0; //@line 12771
      HEAP32[$2 >> 2] = $40 + 8; //@line 12773
      $47 = $0; //@line 12774
      HEAP32[$47 >> 2] = $43; //@line 12776
      HEAP32[$47 + 4 >> 2] = $46; //@line 12779
      break L1;
      break;
     }
    case 13:
     {
      $56 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 12795
      $57 = HEAP32[$56 >> 2] | 0; //@line 12796
      HEAP32[$2 >> 2] = $56 + 4; //@line 12798
      $59 = ($57 & 65535) << 16 >> 16; //@line 12800
      $62 = $0; //@line 12803
      HEAP32[$62 >> 2] = $59; //@line 12805
      HEAP32[$62 + 4 >> 2] = (($59 | 0) < 0) << 31 >> 31; //@line 12808
      break L1;
      break;
     }
    case 14:
     {
      $71 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 12824
      $72 = HEAP32[$71 >> 2] | 0; //@line 12825
      HEAP32[$2 >> 2] = $71 + 4; //@line 12827
      $73 = $0; //@line 12829
      HEAP32[$73 >> 2] = $72 & 65535; //@line 12831
      HEAP32[$73 + 4 >> 2] = 0; //@line 12834
      break L1;
      break;
     }
    case 15:
     {
      $82 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 12850
      $83 = HEAP32[$82 >> 2] | 0; //@line 12851
      HEAP32[$2 >> 2] = $82 + 4; //@line 12853
      $85 = ($83 & 255) << 24 >> 24; //@line 12855
      $88 = $0; //@line 12858
      HEAP32[$88 >> 2] = $85; //@line 12860
      HEAP32[$88 + 4 >> 2] = (($85 | 0) < 0) << 31 >> 31; //@line 12863
      break L1;
      break;
     }
    case 16:
     {
      $97 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 12879
      $98 = HEAP32[$97 >> 2] | 0; //@line 12880
      HEAP32[$2 >> 2] = $97 + 4; //@line 12882
      $99 = $0; //@line 12884
      HEAP32[$99 >> 2] = $98 & 255; //@line 12886
      HEAP32[$99 + 4 >> 2] = 0; //@line 12889
      break L1;
      break;
     }
    case 17:
     {
      $108 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 12905
      $109 = +HEAPF64[$108 >> 3]; //@line 12906
      HEAP32[$2 >> 2] = $108 + 8; //@line 12908
      HEAPF64[$0 >> 3] = $109; //@line 12909
      break L1;
      break;
     }
    case 18:
     {
      $115 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 12925
      $116 = +HEAPF64[$115 >> 3]; //@line 12926
      HEAP32[$2 >> 2] = $115 + 8; //@line 12928
      HEAPF64[$0 >> 3] = $116; //@line 12929
      break L1;
      break;
     }
    default:
     {
      break L1;
     }
    }
   } while (0);
  }
 } while (0);
 return;
}
function __ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan__async_cb($0) {
 $0 = $0 | 0;
 var $$1 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $24 = 0, $25 = 0, $26 = 0, $35 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $54 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5010
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5014
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5016
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5018
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5020
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 5022
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 5024
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 5026
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 5028
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 5030
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 5032
 $24 = (HEAP8[$0 + 4 >> 0] | 0) + 1 << 24 >> 24; //@line 5034
 if ($AsyncRetVal | 0) {
  $$1 = $AsyncRetVal; //@line 5036
  $54 = ___async_retval; //@line 5037
  HEAP32[$54 >> 2] = $$1; //@line 5038
  return;
 }
 $25 = $24 & 255; //@line 5043
 if (($24 & 255) >= (HEAPU8[$4 >> 0] | 0)) {
  $$1 = 0; //@line 5045
  $54 = ___async_retval; //@line 5046
  HEAP32[$54 >> 2] = $$1; //@line 5047
  return;
 }
 $26 = HEAP32[$8 >> 2] | 0; //@line 5050
 HEAP8[$10 >> 0] = HEAP8[$26 + ($25 << 4) + 13 >> 0] | 0; //@line 5053
 HEAP8[$12 >> 0] = HEAP8[$26 + ($25 << 4) + 12 >> 0] | 0; //@line 5056
 HEAP32[$14 >> 2] = HEAP32[$26 + ($25 << 4) + 4 >> 2]; //@line 5059
 HEAP32[$16 >> 2] = HEAP32[$26 + ($25 << 4) + 8 >> 2]; //@line 5062
 $35 = HEAP32[$18 >> 2] | 0; //@line 5063
 $38 = HEAP32[(HEAP32[$35 >> 2] | 0) + 60 >> 2] | 0; //@line 5066
 $40 = HEAP8[$26 + ($25 << 4) >> 0] | 0; //@line 5068
 $ReallocAsyncCtx = _emscripten_realloc_async_context(44) | 0; //@line 5069
 $41 = FUNCTION_TABLE_iiii[$38 & 15]($35, $20, $40) | 0; //@line 5070
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 482; //@line 5073
  $42 = $ReallocAsyncCtx + 4 | 0; //@line 5074
  HEAP8[$42 >> 0] = $24; //@line 5075
  $43 = $ReallocAsyncCtx + 8 | 0; //@line 5076
  HEAP32[$43 >> 2] = $4; //@line 5077
  $44 = $ReallocAsyncCtx + 12 | 0; //@line 5078
  HEAP32[$44 >> 2] = $6; //@line 5079
  $45 = $ReallocAsyncCtx + 16 | 0; //@line 5080
  HEAP32[$45 >> 2] = $8; //@line 5081
  $46 = $ReallocAsyncCtx + 20 | 0; //@line 5082
  HEAP32[$46 >> 2] = $10; //@line 5083
  $47 = $ReallocAsyncCtx + 24 | 0; //@line 5084
  HEAP32[$47 >> 2] = $12; //@line 5085
  $48 = $ReallocAsyncCtx + 28 | 0; //@line 5086
  HEAP32[$48 >> 2] = $14; //@line 5087
  $49 = $ReallocAsyncCtx + 32 | 0; //@line 5088
  HEAP32[$49 >> 2] = $16; //@line 5089
  $50 = $ReallocAsyncCtx + 36 | 0; //@line 5090
  HEAP32[$50 >> 2] = $18; //@line 5091
  $51 = $ReallocAsyncCtx + 40 | 0; //@line 5092
  HEAP32[$51 >> 2] = $20; //@line 5093
  sp = STACKTOP; //@line 5094
  return;
 }
 HEAP32[___async_retval >> 2] = $41; //@line 5098
 ___async_unwind = 0; //@line 5099
 HEAP32[$ReallocAsyncCtx >> 2] = 482; //@line 5100
 $42 = $ReallocAsyncCtx + 4 | 0; //@line 5101
 HEAP8[$42 >> 0] = $24; //@line 5102
 $43 = $ReallocAsyncCtx + 8 | 0; //@line 5103
 HEAP32[$43 >> 2] = $4; //@line 5104
 $44 = $ReallocAsyncCtx + 12 | 0; //@line 5105
 HEAP32[$44 >> 2] = $6; //@line 5106
 $45 = $ReallocAsyncCtx + 16 | 0; //@line 5107
 HEAP32[$45 >> 2] = $8; //@line 5108
 $46 = $ReallocAsyncCtx + 20 | 0; //@line 5109
 HEAP32[$46 >> 2] = $10; //@line 5110
 $47 = $ReallocAsyncCtx + 24 | 0; //@line 5111
 HEAP32[$47 >> 2] = $12; //@line 5112
 $48 = $ReallocAsyncCtx + 28 | 0; //@line 5113
 HEAP32[$48 >> 2] = $14; //@line 5114
 $49 = $ReallocAsyncCtx + 32 | 0; //@line 5115
 HEAP32[$49 >> 2] = $16; //@line 5116
 $50 = $ReallocAsyncCtx + 36 | 0; //@line 5117
 HEAP32[$50 >> 2] = $18; //@line 5118
 $51 = $ReallocAsyncCtx + 40 | 0; //@line 5119
 HEAP32[$51 >> 2] = $20; //@line 5120
 sp = STACKTOP; //@line 5121
 return;
}
function __ZN12radio_eventsD2Ev($0) {
 $0 = $0 | 0;
 var $13 = 0, $16 = 0, $2 = 0, $20 = 0, $23 = 0, $27 = 0, $30 = 0, $34 = 0, $37 = 0, $41 = 0, $44 = 0, $47 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 8008
 $2 = HEAP32[$0 + 108 >> 2] | 0; //@line 8010
 do {
  if ($2 | 0) {
   $6 = HEAP32[$2 + 8 >> 2] | 0; //@line 8016
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 8017
   FUNCTION_TABLE_vi[$6 & 1023]($0 + 96 | 0); //@line 8018
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 256; //@line 8021
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 8023
    sp = STACKTOP; //@line 8024
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 8027
    break;
   }
  }
 } while (0);
 $9 = HEAP32[$0 + 92 >> 2] | 0; //@line 8033
 do {
  if ($9 | 0) {
   $13 = HEAP32[$9 + 8 >> 2] | 0; //@line 8039
   $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8040
   FUNCTION_TABLE_vi[$13 & 1023]($0 + 80 | 0); //@line 8041
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 257; //@line 8044
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 8046
    sp = STACKTOP; //@line 8047
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 8050
    break;
   }
  }
 } while (0);
 $16 = HEAP32[$0 + 76 >> 2] | 0; //@line 8056
 do {
  if ($16 | 0) {
   $20 = HEAP32[$16 + 8 >> 2] | 0; //@line 8062
   $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8063
   FUNCTION_TABLE_vi[$20 & 1023]($0 + 64 | 0); //@line 8064
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 258; //@line 8067
    HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 8069
    sp = STACKTOP; //@line 8070
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 8073
    break;
   }
  }
 } while (0);
 $23 = HEAP32[$0 + 60 >> 2] | 0; //@line 8079
 do {
  if ($23 | 0) {
   $27 = HEAP32[$23 + 8 >> 2] | 0; //@line 8085
   $AsyncCtx11 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8086
   FUNCTION_TABLE_vi[$27 & 1023]($0 + 48 | 0); //@line 8087
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 259; //@line 8090
    HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 8092
    sp = STACKTOP; //@line 8093
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 8096
    break;
   }
  }
 } while (0);
 $30 = HEAP32[$0 + 44 >> 2] | 0; //@line 8102
 do {
  if ($30 | 0) {
   $34 = HEAP32[$30 + 8 >> 2] | 0; //@line 8108
   $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8109
   FUNCTION_TABLE_vi[$34 & 1023]($0 + 32 | 0); //@line 8110
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 260; //@line 8113
    HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 8115
    sp = STACKTOP; //@line 8116
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 8119
    break;
   }
  }
 } while (0);
 $37 = HEAP32[$0 + 28 >> 2] | 0; //@line 8125
 do {
  if ($37 | 0) {
   $41 = HEAP32[$37 + 8 >> 2] | 0; //@line 8131
   $AsyncCtx19 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8132
   FUNCTION_TABLE_vi[$41 & 1023]($0 + 16 | 0); //@line 8133
   if (___async) {
    HEAP32[$AsyncCtx19 >> 2] = 261; //@line 8136
    HEAP32[$AsyncCtx19 + 4 >> 2] = $0; //@line 8138
    sp = STACKTOP; //@line 8139
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx19 | 0); //@line 8142
    break;
   }
  }
 } while (0);
 $44 = HEAP32[$0 + 12 >> 2] | 0; //@line 8148
 if (!$44) {
  return;
 }
 $47 = HEAP32[$44 + 8 >> 2] | 0; //@line 8154
 $AsyncCtx23 = _emscripten_alloc_async_context(4, sp) | 0; //@line 8155
 FUNCTION_TABLE_vi[$47 & 1023]($0); //@line 8156
 if (___async) {
  HEAP32[$AsyncCtx23 >> 2] = 262; //@line 8159
  sp = STACKTOP; //@line 8160
  return;
 }
 _emscripten_free_async_context($AsyncCtx23 | 0); //@line 8163
 return;
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_412($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 30300
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30302
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30304
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30306
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30308
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30310
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30312
 $15 = HEAP32[HEAP32[$0 + 28 >> 2] >> 2] | 0; //@line 30315
 if (!$15) {
  $24 = HEAP32[$2 >> 2] | 0; //@line 30318
  $26 = $10 + 12 | 0; //@line 30320
  HEAP32[$10 >> 2] = 432; //@line 30321
  HEAP32[$10 + 4 >> 2] = 0; //@line 30323
  HEAP32[$10 + 8 >> 2] = $4; //@line 30325
  HEAP32[$26 >> 2] = 836; //@line 30326
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(28) | 0; //@line 30327
  __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($24, $4 + 1036 | 0, $10); //@line 30328
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 433; //@line 30331
   $27 = $ReallocAsyncCtx8 + 4 | 0; //@line 30332
   HEAP32[$27 >> 2] = $2; //@line 30333
   $28 = $ReallocAsyncCtx8 + 8 | 0; //@line 30334
   HEAP32[$28 >> 2] = $4; //@line 30335
   $29 = $ReallocAsyncCtx8 + 12 | 0; //@line 30336
   HEAP32[$29 >> 2] = $6; //@line 30337
   $30 = $ReallocAsyncCtx8 + 16 | 0; //@line 30338
   HEAP32[$30 >> 2] = $12; //@line 30339
   $31 = $ReallocAsyncCtx8 + 20 | 0; //@line 30340
   HEAP32[$31 >> 2] = $10; //@line 30341
   $32 = $ReallocAsyncCtx8 + 24 | 0; //@line 30342
   HEAP32[$32 >> 2] = $26; //@line 30343
   sp = STACKTOP; //@line 30344
   return;
  }
  ___async_unwind = 0; //@line 30347
  HEAP32[$ReallocAsyncCtx8 >> 2] = 433; //@line 30348
  $27 = $ReallocAsyncCtx8 + 4 | 0; //@line 30349
  HEAP32[$27 >> 2] = $2; //@line 30350
  $28 = $ReallocAsyncCtx8 + 8 | 0; //@line 30351
  HEAP32[$28 >> 2] = $4; //@line 30352
  $29 = $ReallocAsyncCtx8 + 12 | 0; //@line 30353
  HEAP32[$29 >> 2] = $6; //@line 30354
  $30 = $ReallocAsyncCtx8 + 16 | 0; //@line 30355
  HEAP32[$30 >> 2] = $12; //@line 30356
  $31 = $ReallocAsyncCtx8 + 20 | 0; //@line 30357
  HEAP32[$31 >> 2] = $10; //@line 30358
  $32 = $ReallocAsyncCtx8 + 24 | 0; //@line 30359
  HEAP32[$32 >> 2] = $26; //@line 30360
  sp = STACKTOP; //@line 30361
  return;
 } else {
  $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 30365
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 30366
  FUNCTION_TABLE_vi[$18 & 1023]($8); //@line 30367
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 431; //@line 30370
   $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 30371
   HEAP32[$19 >> 2] = $2; //@line 30372
   $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 30373
   HEAP32[$20 >> 2] = $4; //@line 30374
   $21 = $ReallocAsyncCtx2 + 12 | 0; //@line 30375
   HEAP32[$21 >> 2] = $10; //@line 30376
   $22 = $ReallocAsyncCtx2 + 16 | 0; //@line 30377
   HEAP32[$22 >> 2] = $12; //@line 30378
   $23 = $ReallocAsyncCtx2 + 20 | 0; //@line 30379
   HEAP32[$23 >> 2] = $6; //@line 30380
   sp = STACKTOP; //@line 30381
   return;
  }
  ___async_unwind = 0; //@line 30384
  HEAP32[$ReallocAsyncCtx2 >> 2] = 431; //@line 30385
  $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 30386
  HEAP32[$19 >> 2] = $2; //@line 30387
  $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 30388
  HEAP32[$20 >> 2] = $4; //@line 30389
  $21 = $ReallocAsyncCtx2 + 12 | 0; //@line 30390
  HEAP32[$21 >> 2] = $10; //@line 30391
  $22 = $ReallocAsyncCtx2 + 16 | 0; //@line 30392
  HEAP32[$22 >> 2] = $12; //@line 30393
  $23 = $ReallocAsyncCtx2 + 20 | 0; //@line 30394
  HEAP32[$23 >> 2] = $6; //@line 30395
  sp = STACKTOP; //@line 30396
  return;
 }
}
function _mbedtls_ccm_free($0) {
 $0 = $0 | 0;
 var $13 = 0, $17 = 0, $21 = 0, $25 = 0, $29 = 0, $33 = 0, $37 = 0, $41 = 0, $45 = 0, $49 = 0, $5 = 0, $53 = 0, $57 = 0, $61 = 0, $65 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1621
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 1622
 _mbedtls_cipher_free($0); //@line 1623
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 569; //@line 1626
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 1628
  sp = STACKTOP; //@line 1629
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1632
  HEAP8[$0 >> 0] = 0; //@line 1634
  HEAP8[$0 + 1 >> 0] = 0; //@line 1636
  HEAP8[$0 + 2 >> 0] = 0; //@line 1638
  $5 = $0 + 4 | 0; //@line 1639
  HEAP8[$0 + 3 >> 0] = 0; //@line 1640
  HEAP8[$5 >> 0] = 0; //@line 1642
  HEAP8[$5 + 1 >> 0] = 0; //@line 1644
  HEAP8[$5 + 2 >> 0] = 0; //@line 1646
  $9 = $5 + 4 | 0; //@line 1647
  HEAP8[$5 + 3 >> 0] = 0; //@line 1648
  HEAP8[$9 >> 0] = 0; //@line 1650
  HEAP8[$9 + 1 >> 0] = 0; //@line 1652
  HEAP8[$9 + 2 >> 0] = 0; //@line 1654
  $13 = $5 + 8 | 0; //@line 1655
  HEAP8[$9 + 3 >> 0] = 0; //@line 1656
  HEAP8[$13 >> 0] = 0; //@line 1658
  HEAP8[$13 + 1 >> 0] = 0; //@line 1660
  HEAP8[$13 + 2 >> 0] = 0; //@line 1662
  $17 = $5 + 12 | 0; //@line 1663
  HEAP8[$13 + 3 >> 0] = 0; //@line 1664
  HEAP8[$17 >> 0] = 0; //@line 1666
  HEAP8[$17 + 1 >> 0] = 0; //@line 1668
  HEAP8[$17 + 2 >> 0] = 0; //@line 1670
  $21 = $5 + 16 | 0; //@line 1671
  HEAP8[$17 + 3 >> 0] = 0; //@line 1672
  HEAP8[$21 >> 0] = 0; //@line 1674
  HEAP8[$21 + 1 >> 0] = 0; //@line 1676
  HEAP8[$21 + 2 >> 0] = 0; //@line 1678
  $25 = $5 + 20 | 0; //@line 1679
  HEAP8[$21 + 3 >> 0] = 0; //@line 1680
  HEAP8[$25 >> 0] = 0; //@line 1682
  HEAP8[$25 + 1 >> 0] = 0; //@line 1684
  HEAP8[$25 + 2 >> 0] = 0; //@line 1686
  $29 = $5 + 24 | 0; //@line 1687
  HEAP8[$25 + 3 >> 0] = 0; //@line 1688
  HEAP8[$29 >> 0] = 0; //@line 1690
  HEAP8[$29 + 1 >> 0] = 0; //@line 1692
  HEAP8[$29 + 2 >> 0] = 0; //@line 1694
  $33 = $5 + 28 | 0; //@line 1695
  HEAP8[$29 + 3 >> 0] = 0; //@line 1696
  HEAP8[$33 >> 0] = 0; //@line 1698
  HEAP8[$33 + 1 >> 0] = 0; //@line 1700
  HEAP8[$33 + 2 >> 0] = 0; //@line 1702
  $37 = $5 + 32 | 0; //@line 1703
  HEAP8[$33 + 3 >> 0] = 0; //@line 1704
  HEAP8[$37 >> 0] = 0; //@line 1706
  HEAP8[$37 + 1 >> 0] = 0; //@line 1708
  HEAP8[$37 + 2 >> 0] = 0; //@line 1710
  $41 = $5 + 36 | 0; //@line 1711
  HEAP8[$37 + 3 >> 0] = 0; //@line 1712
  HEAP8[$41 >> 0] = 0; //@line 1714
  HEAP8[$41 + 1 >> 0] = 0; //@line 1716
  HEAP8[$41 + 2 >> 0] = 0; //@line 1718
  $45 = $5 + 40 | 0; //@line 1719
  HEAP8[$41 + 3 >> 0] = 0; //@line 1720
  HEAP8[$45 >> 0] = 0; //@line 1722
  HEAP8[$45 + 1 >> 0] = 0; //@line 1724
  HEAP8[$45 + 2 >> 0] = 0; //@line 1726
  $49 = $5 + 44 | 0; //@line 1727
  HEAP8[$45 + 3 >> 0] = 0; //@line 1728
  HEAP8[$49 >> 0] = 0; //@line 1730
  HEAP8[$49 + 1 >> 0] = 0; //@line 1732
  HEAP8[$49 + 2 >> 0] = 0; //@line 1734
  $53 = $5 + 48 | 0; //@line 1735
  HEAP8[$49 + 3 >> 0] = 0; //@line 1736
  HEAP8[$53 >> 0] = 0; //@line 1738
  HEAP8[$53 + 1 >> 0] = 0; //@line 1740
  HEAP8[$53 + 2 >> 0] = 0; //@line 1742
  $57 = $5 + 52 | 0; //@line 1743
  HEAP8[$53 + 3 >> 0] = 0; //@line 1744
  HEAP8[$57 >> 0] = 0; //@line 1746
  HEAP8[$57 + 1 >> 0] = 0; //@line 1748
  HEAP8[$57 + 2 >> 0] = 0; //@line 1750
  $61 = $5 + 56 | 0; //@line 1751
  HEAP8[$57 + 3 >> 0] = 0; //@line 1752
  HEAP8[$61 >> 0] = 0; //@line 1754
  HEAP8[$61 + 1 >> 0] = 0; //@line 1756
  HEAP8[$61 + 2 >> 0] = 0; //@line 1758
  $65 = $5 + 60 | 0; //@line 1759
  HEAP8[$61 + 3 >> 0] = 0; //@line 1760
  HEAP8[$65 >> 0] = 0; //@line 1762
  HEAP8[$65 + 1 >> 0] = 0; //@line 1764
  HEAP8[$65 + 2 >> 0] = 0; //@line 1766
  HEAP8[$65 + 3 >> 0] = 0; //@line 1767
  return;
 }
}
function _vfprintf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$0 = 0, $$1 = 0, $13 = 0, $14 = 0, $19 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $3 = 0, $32 = 0, $4 = 0, $43 = 0, $5 = 0, $51 = 0, $6 = 0, $AsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 11593
 STACKTOP = STACKTOP + 224 | 0; //@line 11594
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224); //@line 11594
 $3 = sp + 120 | 0; //@line 11595
 $4 = sp + 80 | 0; //@line 11596
 $5 = sp; //@line 11597
 $6 = sp + 136 | 0; //@line 11598
 dest = $4; //@line 11599
 stop = dest + 40 | 0; //@line 11599
 do {
  HEAP32[dest >> 2] = 0; //@line 11599
  dest = dest + 4 | 0; //@line 11599
 } while ((dest | 0) < (stop | 0));
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 11601
 if ((_printf_core(0, $1, $3, $5, $4) | 0) < 0) {
  $$0 = -1; //@line 11605
 } else {
  if ((HEAP32[$0 + 76 >> 2] | 0) > -1) {
   $43 = ___lockfile($0) | 0; //@line 11612
  } else {
   $43 = 0; //@line 11614
  }
  $13 = HEAP32[$0 >> 2] | 0; //@line 11616
  $14 = $13 & 32; //@line 11617
  if ((HEAP8[$0 + 74 >> 0] | 0) < 1) {
   HEAP32[$0 >> 2] = $13 & -33; //@line 11623
  }
  $19 = $0 + 48 | 0; //@line 11625
  do {
   if (!(HEAP32[$19 >> 2] | 0)) {
    $23 = $0 + 44 | 0; //@line 11630
    $24 = HEAP32[$23 >> 2] | 0; //@line 11631
    HEAP32[$23 >> 2] = $6; //@line 11632
    $25 = $0 + 28 | 0; //@line 11633
    HEAP32[$25 >> 2] = $6; //@line 11634
    $26 = $0 + 20 | 0; //@line 11635
    HEAP32[$26 >> 2] = $6; //@line 11636
    HEAP32[$19 >> 2] = 80; //@line 11637
    $28 = $0 + 16 | 0; //@line 11639
    HEAP32[$28 >> 2] = $6 + 80; //@line 11640
    $29 = _printf_core($0, $1, $3, $5, $4) | 0; //@line 11641
    if (!$24) {
     $$1 = $29; //@line 11644
    } else {
     $32 = HEAP32[$0 + 36 >> 2] | 0; //@line 11647
     $AsyncCtx = _emscripten_alloc_async_context(64, sp) | 0; //@line 11648
     FUNCTION_TABLE_iiii[$32 & 15]($0, 0, 0) | 0; //@line 11649
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 673; //@line 11652
      HEAP32[$AsyncCtx + 4 >> 2] = $26; //@line 11654
      HEAP32[$AsyncCtx + 8 >> 2] = $29; //@line 11656
      HEAP32[$AsyncCtx + 12 >> 2] = $24; //@line 11658
      HEAP32[$AsyncCtx + 16 >> 2] = $23; //@line 11660
      HEAP32[$AsyncCtx + 20 >> 2] = $19; //@line 11662
      HEAP32[$AsyncCtx + 24 >> 2] = $28; //@line 11664
      HEAP32[$AsyncCtx + 28 >> 2] = $25; //@line 11666
      HEAP32[$AsyncCtx + 32 >> 2] = $0; //@line 11668
      HEAP32[$AsyncCtx + 36 >> 2] = $14; //@line 11670
      HEAP32[$AsyncCtx + 40 >> 2] = $43; //@line 11672
      HEAP32[$AsyncCtx + 44 >> 2] = $0; //@line 11674
      HEAP32[$AsyncCtx + 48 >> 2] = $6; //@line 11676
      HEAP32[$AsyncCtx + 52 >> 2] = $5; //@line 11678
      HEAP32[$AsyncCtx + 56 >> 2] = $4; //@line 11680
      HEAP32[$AsyncCtx + 60 >> 2] = $3; //@line 11682
      sp = STACKTOP; //@line 11683
      STACKTOP = sp; //@line 11684
      return 0; //@line 11684
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 11686
      $$ = (HEAP32[$26 >> 2] | 0) == 0 ? -1 : $29; //@line 11689
      HEAP32[$23 >> 2] = $24; //@line 11690
      HEAP32[$19 >> 2] = 0; //@line 11691
      HEAP32[$28 >> 2] = 0; //@line 11692
      HEAP32[$25 >> 2] = 0; //@line 11693
      HEAP32[$26 >> 2] = 0; //@line 11694
      $$1 = $$; //@line 11695
      break;
     }
    }
   } else {
    $$1 = _printf_core($0, $1, $3, $5, $4) | 0; //@line 11701
   }
  } while (0);
  $51 = HEAP32[$0 >> 2] | 0; //@line 11704
  HEAP32[$0 >> 2] = $51 | $14; //@line 11709
  if ($43 | 0) {
   ___unlockfile($0); //@line 11712
  }
  $$0 = ($51 & 32 | 0) == 0 ? $$1 : -1; //@line 11714
 }
 STACKTOP = sp; //@line 11716
 return $$0 | 0; //@line 11716
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_356($0) {
 $0 = $0 | 0;
 var $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $29 = 0, $32 = 0, $34 = 0, $35 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 14475
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14481
 $14 = HEAP8[$0 + 19 >> 0] | 0; //@line 14491
 $16 = HEAP32[$0 + 20 >> 2] | 0; //@line 14493
 $18 = HEAP32[$0 + 24 >> 2] | 0; //@line 14495
 $20 = HEAP32[$0 + 28 >> 2] | 0; //@line 14497
 $22 = HEAP32[$0 + 32 >> 2] | 0; //@line 14499
 $29 = HEAP32[$6 >> 2] | 0; //@line 14506
 $32 = HEAP32[(HEAP32[$29 >> 2] | 0) + 20 >> 2] | 0; //@line 14509
 $34 = HEAP8[$0 + 17 >> 0] & 1 ? 2 : HEAP8[$0 + 16 >> 0] & 1; //@line 14511
 $35 = HEAP8[$0 + 18 >> 0] | 0; //@line 14512
 if ((HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0) == (HEAPU8[(HEAP32[$0 + 8 >> 2] | 0) + 27 >> 0] | 0)) {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 14515
  FUNCTION_TABLE_viiiiiiiiiiiiii[$32 & 1]($29, 0, $14, 25e3, $34, $35 * 1e3 | 0, 0, 5, 0, 1, 0, 0, 0, 3e3); //@line 14516
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 526; //@line 14519
   $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 14520
   HEAP32[$37 >> 2] = $6; //@line 14521
   $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 14522
   HEAP32[$38 >> 2] = $16; //@line 14523
   $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 14524
   HEAP32[$39 >> 2] = $18; //@line 14525
   $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 14526
   HEAP32[$40 >> 2] = $20; //@line 14527
   $41 = $ReallocAsyncCtx3 + 20 | 0; //@line 14528
   HEAP32[$41 >> 2] = $22; //@line 14529
   sp = STACKTOP; //@line 14530
   return;
  }
  ___async_unwind = 0; //@line 14533
  HEAP32[$ReallocAsyncCtx3 >> 2] = 526; //@line 14534
  $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 14535
  HEAP32[$37 >> 2] = $6; //@line 14536
  $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 14537
  HEAP32[$38 >> 2] = $16; //@line 14538
  $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 14539
  HEAP32[$39 >> 2] = $18; //@line 14540
  $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 14541
  HEAP32[$40 >> 2] = $20; //@line 14542
  $41 = $ReallocAsyncCtx3 + 20 | 0; //@line 14543
  HEAP32[$41 >> 2] = $22; //@line 14544
  sp = STACKTOP; //@line 14545
  return;
 } else {
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 14548
  FUNCTION_TABLE_viiiiiiiiiiiiii[$32 & 1]($29, 1, $14, 0, $34, $35, 1, 8, 0, 1, 0, 0, 0, 3e3); //@line 14549
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 527; //@line 14552
   $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 14553
   HEAP32[$42 >> 2] = $6; //@line 14554
   $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 14555
   HEAP32[$43 >> 2] = $16; //@line 14556
   $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 14557
   HEAP32[$44 >> 2] = $18; //@line 14558
   $45 = $ReallocAsyncCtx4 + 16 | 0; //@line 14559
   HEAP32[$45 >> 2] = $20; //@line 14560
   $46 = $ReallocAsyncCtx4 + 20 | 0; //@line 14561
   HEAP32[$46 >> 2] = $22; //@line 14562
   sp = STACKTOP; //@line 14563
   return;
  }
  ___async_unwind = 0; //@line 14566
  HEAP32[$ReallocAsyncCtx4 >> 2] = 527; //@line 14567
  $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 14568
  HEAP32[$42 >> 2] = $6; //@line 14569
  $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 14570
  HEAP32[$43 >> 2] = $16; //@line 14571
  $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 14572
  HEAP32[$44 >> 2] = $18; //@line 14573
  $45 = $ReallocAsyncCtx4 + 16 | 0; //@line 14574
  HEAP32[$45 >> 2] = $20; //@line 14575
  $46 = $ReallocAsyncCtx4 + 20 | 0; //@line 14576
  HEAP32[$46 >> 2] = $22; //@line 14577
  sp = STACKTOP; //@line 14578
  return;
 }
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_133($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $16 = 0, $2 = 0, $20 = 0, $24 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 29580
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29582
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29584
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29586
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29588
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29590
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29592
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 29596
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 29600
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 29604
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29608
 switch ($AsyncRetVal | 0) {
 case 0:
  {
   HEAP32[$4 >> 2] = 6; //@line 29611
   HEAP32[___async_retval >> 2] = 0; //@line 29613
   return;
  }
 case -1014:
  {
   _printf(11245, $12) | 0; //@line 29618
   _printf(11497, $16) | 0; //@line 29619
   $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 29620
   _putchar(10) | 0; //@line 29621
   if (___async) {
    HEAP32[$ReallocAsyncCtx12 >> 2] = 182; //@line 29624
    $28 = $ReallocAsyncCtx12 + 4 | 0; //@line 29625
    HEAP32[$28 >> 2] = $8; //@line 29626
    $29 = $ReallocAsyncCtx12 + 8 | 0; //@line 29627
    HEAP32[$29 >> 2] = $4; //@line 29628
    $30 = $ReallocAsyncCtx12 + 12 | 0; //@line 29629
    HEAP32[$30 >> 2] = $10; //@line 29630
    $31 = $ReallocAsyncCtx12 + 16 | 0; //@line 29631
    HEAP32[$31 >> 2] = $6; //@line 29632
    sp = STACKTOP; //@line 29633
    return;
   }
   ___async_unwind = 0; //@line 29636
   HEAP32[$ReallocAsyncCtx12 >> 2] = 182; //@line 29637
   $28 = $ReallocAsyncCtx12 + 4 | 0; //@line 29638
   HEAP32[$28 >> 2] = $8; //@line 29639
   $29 = $ReallocAsyncCtx12 + 8 | 0; //@line 29640
   HEAP32[$29 >> 2] = $4; //@line 29641
   $30 = $ReallocAsyncCtx12 + 12 | 0; //@line 29642
   HEAP32[$30 >> 2] = $10; //@line 29643
   $31 = $ReallocAsyncCtx12 + 16 | 0; //@line 29644
   HEAP32[$31 >> 2] = $6; //@line 29645
   sp = STACKTOP; //@line 29646
   return;
  }
 default:
  {
   _printf(11245, $20) | 0; //@line 29651
   _printf(11532, $24) | 0; //@line 29652
   $ReallocAsyncCtx11 = _emscripten_realloc_async_context(24) | 0; //@line 29653
   _putchar(10) | 0; //@line 29654
   if (___async) {
    HEAP32[$ReallocAsyncCtx11 >> 2] = 187; //@line 29657
    $32 = $ReallocAsyncCtx11 + 4 | 0; //@line 29658
    HEAP32[$32 >> 2] = $8; //@line 29659
    $33 = $ReallocAsyncCtx11 + 8 | 0; //@line 29660
    HEAP32[$33 >> 2] = $AsyncRetVal; //@line 29661
    $34 = $ReallocAsyncCtx11 + 12 | 0; //@line 29662
    HEAP32[$34 >> 2] = $4; //@line 29663
    $35 = $ReallocAsyncCtx11 + 16 | 0; //@line 29664
    HEAP32[$35 >> 2] = $2; //@line 29665
    $36 = $ReallocAsyncCtx11 + 20 | 0; //@line 29666
    HEAP32[$36 >> 2] = $6; //@line 29667
    sp = STACKTOP; //@line 29668
    return;
   }
   ___async_unwind = 0; //@line 29671
   HEAP32[$ReallocAsyncCtx11 >> 2] = 187; //@line 29672
   $32 = $ReallocAsyncCtx11 + 4 | 0; //@line 29673
   HEAP32[$32 >> 2] = $8; //@line 29674
   $33 = $ReallocAsyncCtx11 + 8 | 0; //@line 29675
   HEAP32[$33 >> 2] = $AsyncRetVal; //@line 29676
   $34 = $ReallocAsyncCtx11 + 12 | 0; //@line 29677
   HEAP32[$34 >> 2] = $4; //@line 29678
   $35 = $ReallocAsyncCtx11 + 16 | 0; //@line 29679
   HEAP32[$35 >> 2] = $2; //@line 29680
   $36 = $ReallocAsyncCtx11 + 20 | 0; //@line 29681
   HEAP32[$36 >> 2] = $6; //@line 29682
   sp = STACKTOP; //@line 29683
   return;
  }
 }
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_429($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $21 = 0, $23 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $39 = 0, $4 = 0, $45 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 31514
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31518
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31520
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31522
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31524
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31526
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 31528
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 31530
 if ((HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) != 2) {
  if (!(HEAP8[$8 + 373 >> 0] | 0)) {
   HEAP8[$8 + 376 >> 0] = ($10 | 0) == 0 & (HEAP8[$8 + 944 >> 0] & 8) != 0 & 1; //@line 31546
   $39 = HEAP8[$8 + 378 >> 0] | 0; //@line 31548
   HEAP8[$8 + 379 >> 0] = $39; //@line 31550
   HEAP8[$12 >> 0] = $39; //@line 31551
   HEAP8[$14 + 1 >> 0] = HEAP8[$8 + 372 >> 0] | 0; //@line 31555
   HEAP32[$14 + 4 >> 2] = $16; //@line 31557
   $45 = HEAP32[$8 >> 2] | 0; //@line 31558
   $48 = HEAP32[(HEAP32[$45 >> 2] | 0) + 12 >> 2] | 0; //@line 31561
   $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 31562
   FUNCTION_TABLE_vii[$48 & 31]($45, $14); //@line 31563
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 279; //@line 31566
    $49 = $ReallocAsyncCtx + 4 | 0; //@line 31567
    HEAP32[$49 >> 2] = $8; //@line 31568
    $50 = $ReallocAsyncCtx + 8 | 0; //@line 31569
    HEAP32[$50 >> 2] = $16; //@line 31570
    $51 = $ReallocAsyncCtx + 12 | 0; //@line 31571
    HEAP32[$51 >> 2] = $12; //@line 31572
    sp = STACKTOP; //@line 31573
    return;
   }
   ___async_unwind = 0; //@line 31576
   HEAP32[$ReallocAsyncCtx >> 2] = 279; //@line 31577
   $49 = $ReallocAsyncCtx + 4 | 0; //@line 31578
   HEAP32[$49 >> 2] = $8; //@line 31579
   $50 = $ReallocAsyncCtx + 8 | 0; //@line 31580
   HEAP32[$50 >> 2] = $16; //@line 31581
   $51 = $ReallocAsyncCtx + 12 | 0; //@line 31582
   HEAP32[$51 >> 2] = $12; //@line 31583
   sp = STACKTOP; //@line 31584
   return;
  }
 }
 $21 = HEAP32[$6 >> 2] | 0; //@line 31588
 $23 = HEAP32[$4 >> 2] | 0; //@line 31590
 $26 = (__ZN7LoRaPHY15get_ack_timeoutEv(HEAP32[$8 >> 2] | 0) | 0) + $23 | 0; //@line 31593
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 31594
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($21, $8 + 1076 | 0, $26); //@line 31595
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 278; //@line 31598
  $27 = $ReallocAsyncCtx3 + 4 | 0; //@line 31599
  HEAP32[$27 >> 2] = $8; //@line 31600
  $28 = $ReallocAsyncCtx3 + 8 | 0; //@line 31601
  HEAP32[$28 >> 2] = $10; //@line 31602
  $29 = $ReallocAsyncCtx3 + 12 | 0; //@line 31603
  HEAP32[$29 >> 2] = $12; //@line 31604
  $30 = $ReallocAsyncCtx3 + 16 | 0; //@line 31605
  HEAP32[$30 >> 2] = $14; //@line 31606
  $31 = $ReallocAsyncCtx3 + 20 | 0; //@line 31607
  HEAP32[$31 >> 2] = $16; //@line 31608
  sp = STACKTOP; //@line 31609
  return;
 }
 ___async_unwind = 0; //@line 31612
 HEAP32[$ReallocAsyncCtx3 >> 2] = 278; //@line 31613
 $27 = $ReallocAsyncCtx3 + 4 | 0; //@line 31614
 HEAP32[$27 >> 2] = $8; //@line 31615
 $28 = $ReallocAsyncCtx3 + 8 | 0; //@line 31616
 HEAP32[$28 >> 2] = $10; //@line 31617
 $29 = $ReallocAsyncCtx3 + 12 | 0; //@line 31618
 HEAP32[$29 >> 2] = $12; //@line 31619
 $30 = $ReallocAsyncCtx3 + 16 | 0; //@line 31620
 HEAP32[$30 >> 2] = $14; //@line 31621
 $31 = $ReallocAsyncCtx3 + 20 | 0; //@line 31622
 HEAP32[$31 >> 2] = $16; //@line 31623
 sp = STACKTOP; //@line 31624
 return;
}
function __ZN7LoRaMac10disconnectEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $14 = 0, $18 = 0, $2 = 0, $21 = 0, $29 = 0, $30 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 14942
 $1 = $0 + 356 | 0; //@line 14943
 $2 = HEAP32[$1 >> 2] | 0; //@line 14944
 $AsyncCtx19 = _emscripten_alloc_async_context(12, sp) | 0; //@line 14946
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($2, $0 + 996 | 0); //@line 14947
 if (___async) {
  HEAP32[$AsyncCtx19 >> 2] = 441; //@line 14950
  HEAP32[$AsyncCtx19 + 4 >> 2] = $1; //@line 14952
  HEAP32[$AsyncCtx19 + 8 >> 2] = $0; //@line 14954
  sp = STACKTOP; //@line 14955
  return;
 }
 _emscripten_free_async_context($AsyncCtx19 | 0); //@line 14958
 $6 = HEAP32[$1 >> 2] | 0; //@line 14959
 $AsyncCtx15 = _emscripten_alloc_async_context(12, sp) | 0; //@line 14961
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($6, $0 + 1016 | 0); //@line 14962
 if (___async) {
  HEAP32[$AsyncCtx15 >> 2] = 442; //@line 14965
  HEAP32[$AsyncCtx15 + 4 >> 2] = $1; //@line 14967
  HEAP32[$AsyncCtx15 + 8 >> 2] = $0; //@line 14969
  sp = STACKTOP; //@line 14970
  return;
 }
 _emscripten_free_async_context($AsyncCtx15 | 0); //@line 14973
 $10 = HEAP32[$1 >> 2] | 0; //@line 14974
 $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 14976
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($10, $0 + 1036 | 0); //@line 14977
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 443; //@line 14980
  HEAP32[$AsyncCtx11 + 4 >> 2] = $1; //@line 14982
  HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 14984
  sp = STACKTOP; //@line 14985
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 14988
 $14 = HEAP32[$1 >> 2] | 0; //@line 14989
 $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 14991
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($14, $0 + 1056 | 0); //@line 14992
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 444; //@line 14995
  HEAP32[$AsyncCtx7 + 4 >> 2] = $1; //@line 14997
  HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 14999
  sp = STACKTOP; //@line 15000
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 15003
 $18 = HEAP32[$1 >> 2] | 0; //@line 15004
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 15006
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($18, $0 + 1076 | 0); //@line 15007
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 445; //@line 15010
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 15012
  sp = STACKTOP; //@line 15013
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15016
 $21 = HEAP32[$0 >> 2] | 0; //@line 15017
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 15018
 __ZN7LoRaPHY18put_radio_to_sleepEv($21); //@line 15019
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 446; //@line 15022
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 15024
  sp = STACKTOP; //@line 15025
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 15028
  HEAP8[$0 + 372 >> 0] = 0; //@line 15030
  HEAP8[$0 + 377 >> 0] = 0; //@line 15032
  HEAP8[$0 + 371 >> 0] = 1; //@line 15034
  HEAP8[$0 + 373 >> 0] = 0; //@line 15036
  HEAP8[$0 + 374 >> 0] = 0; //@line 15038
  HEAP8[$0 + 944 >> 0] = 0; //@line 15040
  $29 = $0 + 968 | 0; //@line 15041
  HEAP32[$29 >> 2] = 0; //@line 15042
  $30 = $0 + 4 | 0; //@line 15043
  __ZN14LoRaMacCommand20clear_command_bufferEv($30); //@line 15044
  __ZN14LoRaMacCommand19clear_repeat_bufferEv($30); //@line 15045
  __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($30); //@line 15046
  HEAP32[$29 >> 2] = 0; //@line 15047
  return;
 }
}
function ___dynamic_cast($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $24 = 0, $30 = 0, $33 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 15230
 STACKTOP = STACKTOP + 64 | 0; //@line 15231
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 15231
 $4 = sp; //@line 15232
 $5 = HEAP32[$0 >> 2] | 0; //@line 15233
 $8 = $0 + (HEAP32[$5 + -8 >> 2] | 0) | 0; //@line 15236
 $10 = HEAP32[$5 + -4 >> 2] | 0; //@line 15238
 HEAP32[$4 >> 2] = $2; //@line 15239
 HEAP32[$4 + 4 >> 2] = $0; //@line 15241
 HEAP32[$4 + 8 >> 2] = $1; //@line 15243
 HEAP32[$4 + 12 >> 2] = $3; //@line 15245
 $14 = $4 + 16 | 0; //@line 15246
 $15 = $4 + 20 | 0; //@line 15247
 $16 = $4 + 24 | 0; //@line 15248
 $17 = $4 + 28 | 0; //@line 15249
 $18 = $4 + 32 | 0; //@line 15250
 $19 = $4 + 40 | 0; //@line 15251
 dest = $14; //@line 15252
 stop = dest + 36 | 0; //@line 15252
 do {
  HEAP32[dest >> 2] = 0; //@line 15252
  dest = dest + 4 | 0; //@line 15252
 } while ((dest | 0) < (stop | 0));
 HEAP16[$14 + 36 >> 1] = 0; //@line 15252
 HEAP8[$14 + 38 >> 0] = 0; //@line 15252
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($10, $2, 0) | 0) {
   HEAP32[$4 + 48 >> 2] = 1; //@line 15257
   $24 = HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] | 0; //@line 15260
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 15261
   FUNCTION_TABLE_viiiiii[$24 & 3]($10, $4, $8, $8, 1, 0); //@line 15262
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 688; //@line 15265
    HEAP32[$AsyncCtx + 4 >> 2] = $16; //@line 15267
    HEAP32[$AsyncCtx + 8 >> 2] = $8; //@line 15269
    HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 15271
    sp = STACKTOP; //@line 15272
    STACKTOP = sp; //@line 15273
    return 0; //@line 15273
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 15275
    $$0 = (HEAP32[$16 >> 2] | 0) == 1 ? $8 : 0; //@line 15279
    break;
   }
  } else {
   $30 = $4 + 36 | 0; //@line 15283
   $33 = HEAP32[(HEAP32[$10 >> 2] | 0) + 24 >> 2] | 0; //@line 15286
   $AsyncCtx3 = _emscripten_alloc_async_context(36, sp) | 0; //@line 15287
   FUNCTION_TABLE_viiiii[$33 & 7]($10, $4, $8, 1, 0); //@line 15288
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 689; //@line 15291
    HEAP32[$AsyncCtx3 + 4 >> 2] = $30; //@line 15293
    HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 15295
    HEAP32[$AsyncCtx3 + 12 >> 2] = $19; //@line 15297
    HEAP32[$AsyncCtx3 + 16 >> 2] = $17; //@line 15299
    HEAP32[$AsyncCtx3 + 20 >> 2] = $18; //@line 15301
    HEAP32[$AsyncCtx3 + 24 >> 2] = $15; //@line 15303
    HEAP32[$AsyncCtx3 + 28 >> 2] = $16; //@line 15305
    HEAP32[$AsyncCtx3 + 32 >> 2] = $14; //@line 15307
    sp = STACKTOP; //@line 15308
    STACKTOP = sp; //@line 15309
    return 0; //@line 15309
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15311
   switch (HEAP32[$30 >> 2] | 0) {
   case 0:
    {
     $$0 = (HEAP32[$19 >> 2] | 0) == 1 & (HEAP32[$17 >> 2] | 0) == 1 & (HEAP32[$18 >> 2] | 0) == 1 ? HEAP32[$15 >> 2] | 0 : 0; //@line 15325
     break L1;
     break;
    }
   case 1:
    {
     break;
    }
   default:
    {
     $$0 = 0; //@line 15333
     break L1;
    }
   }
   if ((HEAP32[$16 >> 2] | 0) != 1) {
    if (!((HEAP32[$19 >> 2] | 0) == 0 & (HEAP32[$17 >> 2] | 0) == 1 & (HEAP32[$18 >> 2] | 0) == 1)) {
     $$0 = 0; //@line 15349
     break;
    }
   }
   $$0 = HEAP32[$14 >> 2] | 0; //@line 15354
  }
 } while (0);
 STACKTOP = sp; //@line 15357
 return $$0 | 0; //@line 15357
}
function __ZN12radio_eventsD2Ev__async_cb_349($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $29 = 0, $30 = 0, $32 = 0, $35 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 13991
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13993
 $4 = HEAP32[$2 + 76 >> 2] | 0; //@line 13995
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 14000
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 14001
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 64 | 0); //@line 14002
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 258; //@line 14005
   $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 14006
   HEAP32[$9 >> 2] = $2; //@line 14007
   sp = STACKTOP; //@line 14008
   return;
  }
  ___async_unwind = 0; //@line 14011
  HEAP32[$ReallocAsyncCtx3 >> 2] = 258; //@line 14012
  $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 14013
  HEAP32[$9 >> 2] = $2; //@line 14014
  sp = STACKTOP; //@line 14015
  return;
 }
 $11 = HEAP32[$2 + 60 >> 2] | 0; //@line 14019
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 14024
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 14025
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 48 | 0); //@line 14026
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 259; //@line 14029
   $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 14030
   HEAP32[$16 >> 2] = $2; //@line 14031
   sp = STACKTOP; //@line 14032
   return;
  }
  ___async_unwind = 0; //@line 14035
  HEAP32[$ReallocAsyncCtx4 >> 2] = 259; //@line 14036
  $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 14037
  HEAP32[$16 >> 2] = $2; //@line 14038
  sp = STACKTOP; //@line 14039
  return;
 }
 $18 = HEAP32[$2 + 44 >> 2] | 0; //@line 14043
 if ($18 | 0) {
  $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 14048
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 14049
  FUNCTION_TABLE_vi[$22 & 1023]($2 + 32 | 0); //@line 14050
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 260; //@line 14053
   $23 = $ReallocAsyncCtx5 + 4 | 0; //@line 14054
   HEAP32[$23 >> 2] = $2; //@line 14055
   sp = STACKTOP; //@line 14056
   return;
  }
  ___async_unwind = 0; //@line 14059
  HEAP32[$ReallocAsyncCtx5 >> 2] = 260; //@line 14060
  $23 = $ReallocAsyncCtx5 + 4 | 0; //@line 14061
  HEAP32[$23 >> 2] = $2; //@line 14062
  sp = STACKTOP; //@line 14063
  return;
 }
 $25 = HEAP32[$2 + 28 >> 2] | 0; //@line 14067
 if ($25 | 0) {
  $29 = HEAP32[$25 + 8 >> 2] | 0; //@line 14072
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 14073
  FUNCTION_TABLE_vi[$29 & 1023]($2 + 16 | 0); //@line 14074
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 261; //@line 14077
   $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 14078
   HEAP32[$30 >> 2] = $2; //@line 14079
   sp = STACKTOP; //@line 14080
   return;
  }
  ___async_unwind = 0; //@line 14083
  HEAP32[$ReallocAsyncCtx6 >> 2] = 261; //@line 14084
  $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 14085
  HEAP32[$30 >> 2] = $2; //@line 14086
  sp = STACKTOP; //@line 14087
  return;
 }
 $32 = HEAP32[$2 + 12 >> 2] | 0; //@line 14091
 if (!$32) {
  return;
 }
 $35 = HEAP32[$32 + 8 >> 2] | 0; //@line 14097
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 14098
 FUNCTION_TABLE_vi[$35 & 1023]($2); //@line 14099
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 262; //@line 14102
  sp = STACKTOP; //@line 14103
  return;
 }
 ___async_unwind = 0; //@line 14106
 HEAP32[$ReallocAsyncCtx7 >> 2] = 262; //@line 14107
 sp = STACKTOP; //@line 14108
 return;
}
function _main__async_cb_28($0) {
 $0 = $0 | 0;
 var $$pr = 0, $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $24 = 0, $25 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 19027
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19029
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19031
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19033
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19035
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19037
 $$pr = HEAP32[$8 >> 2] | 0; //@line 19038
 if ($$pr | 0) {
  $13 = HEAP32[$$pr + 4 >> 2] | 0; //@line 19042
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 19043
  FUNCTION_TABLE_vii[$13 & 31](21888, $10); //@line 19044
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 651; //@line 19047
   $14 = $ReallocAsyncCtx3 + 4 | 0; //@line 19048
   HEAP32[$14 >> 2] = $2; //@line 19049
   $15 = $ReallocAsyncCtx3 + 8 | 0; //@line 19050
   HEAP32[$15 >> 2] = $4; //@line 19051
   $16 = $ReallocAsyncCtx3 + 12 | 0; //@line 19052
   HEAP32[$16 >> 2] = $6; //@line 19053
   $17 = $ReallocAsyncCtx3 + 16 | 0; //@line 19054
   HEAP32[$17 >> 2] = $8; //@line 19055
   $18 = $ReallocAsyncCtx3 + 20 | 0; //@line 19056
   HEAP32[$18 >> 2] = $10; //@line 19057
   sp = STACKTOP; //@line 19058
   return;
  }
  ___async_unwind = 0; //@line 19061
  HEAP32[$ReallocAsyncCtx3 >> 2] = 651; //@line 19062
  $14 = $ReallocAsyncCtx3 + 4 | 0; //@line 19063
  HEAP32[$14 >> 2] = $2; //@line 19064
  $15 = $ReallocAsyncCtx3 + 8 | 0; //@line 19065
  HEAP32[$15 >> 2] = $4; //@line 19066
  $16 = $ReallocAsyncCtx3 + 12 | 0; //@line 19067
  HEAP32[$16 >> 2] = $6; //@line 19068
  $17 = $ReallocAsyncCtx3 + 16 | 0; //@line 19069
  HEAP32[$17 >> 2] = $8; //@line 19070
  $18 = $ReallocAsyncCtx3 + 20 | 0; //@line 19071
  HEAP32[$18 >> 2] = $10; //@line 19072
  sp = STACKTOP; //@line 19073
  return;
 }
 HEAP32[5475] = 0; //@line 19076
 __ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t(21880, 21888) | 0; //@line 19077
 if (__ZN16LoRaWANInterface25disable_adaptive_datarateEv(21880) | 0) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 19081
  _puts(14159) | 0; //@line 19082
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 653; //@line 19085
   sp = STACKTOP; //@line 19086
   return;
  }
  ___async_unwind = 0; //@line 19089
  HEAP32[$ReallocAsyncCtx6 >> 2] = 653; //@line 19090
  sp = STACKTOP; //@line 19091
  return;
 }
 __ZN16LoRaWANInterface12set_datarateEh(21880, 5) | 0; //@line 19094
 HEAP8[$2 >> 0] = 1; //@line 19095
 HEAP32[$2 + 8 >> 2] = 637604466; //@line 19097
 HEAP32[$2 + 12 >> 2] = 14193; //@line 19099
 HEAP32[$2 + 16 >> 2] = 14209; //@line 19101
 $24 = __ZN16LoRaWANInterface7connectERK15lorawan_connect(21880, $2) | 0; //@line 19102
 switch ($24 | 0) {
 case 0:
 case -1016:
  {
   break;
  }
 default:
  {
   HEAP32[$4 >> 2] = $24; //@line 19108
   _printf(14225, $4) | 0; //@line 19109
   HEAP32[___async_retval >> 2] = -1; //@line 19111
   return;
  }
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 19115
 _puts(14254) | 0; //@line 19116
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 654; //@line 19119
  $25 = $ReallocAsyncCtx5 + 4 | 0; //@line 19120
  HEAP32[$25 >> 2] = $2; //@line 19121
  sp = STACKTOP; //@line 19122
  return;
 }
 ___async_unwind = 0; //@line 19125
 HEAP32[$ReallocAsyncCtx5 >> 2] = 654; //@line 19126
 $25 = $ReallocAsyncCtx5 + 4 | 0; //@line 19127
 HEAP32[$25 >> 2] = $2; //@line 19128
 sp = STACKTOP; //@line 19129
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_420($0) {
 $0 = $0 | 0;
 var $$040 = 0, $10 = 0, $12 = 0, $19 = 0, $2 = 0, $21 = 0, $25 = 0, $30 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 30831
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30833
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30835
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30837
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30839
 $10 = HEAP8[$0 + 20 >> 0] | 0; //@line 30841
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30843
 if (!(HEAP8[$0 + 28 >> 0] & 1)) {
  HEAP8[___async_retval >> 0] = 0; //@line 30850
  return;
 }
 if (!(HEAP32[$12 + 20 >> 2] | 0)) {
  $19 = HEAP32[$8 + 112 >> 2] | 0; //@line 30858
  $21 = HEAPU8[$12 >> 0] | 0; //@line 30860
  $25 = HEAP32[$19 + ($21 * 12 | 0) + 4 >> 2] | 0; //@line 30864
  $$040 = ($25 | 0) == 0 ? HEAP32[$19 + ($21 * 12 | 0) >> 2] | 0 : $25; //@line 30867
 } else {
  $$040 = $6; //@line 30869
 }
 $30 = HEAP32[$8 + 96 >> 2] | 0; //@line 30874
 $32 = HEAP32[$8 + 104 >> 2] | 0; //@line 30876
 $33 = $10 & 255; //@line 30877
 $35 = HEAP8[(HEAP32[$8 + 88 >> 2] | 0) + $33 >> 0] | 0; //@line 30879
 $36 = HEAP32[$2 >> 2] | 0; //@line 30880
 $39 = HEAP32[(HEAP32[$36 >> 2] | 0) + 72 >> 2] | 0; //@line 30883
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(44) | 0; //@line 30884
 FUNCTION_TABLE_vi[$39 & 1023]($36); //@line 30885
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 517; //@line 30888
  $40 = $ReallocAsyncCtx4 + 4 | 0; //@line 30889
  HEAP32[$40 >> 2] = $2; //@line 30890
  $41 = $ReallocAsyncCtx4 + 8 | 0; //@line 30891
  HEAP32[$41 >> 2] = $$040; //@line 30892
  $42 = $ReallocAsyncCtx4 + 12 | 0; //@line 30893
  HEAP8[$42 >> 0] = $10; //@line 30894
  $43 = $ReallocAsyncCtx4 + 16 | 0; //@line 30895
  HEAP32[$43 >> 2] = $8; //@line 30896
  $44 = $ReallocAsyncCtx4 + 20 | 0; //@line 30897
  HEAP32[$44 >> 2] = $12; //@line 30898
  $45 = $ReallocAsyncCtx4 + 24 | 0; //@line 30899
  HEAP8[$45 >> 0] = $35; //@line 30900
  $46 = $ReallocAsyncCtx4 + 28 | 0; //@line 30901
  HEAP32[$46 >> 2] = $30; //@line 30902
  $47 = $ReallocAsyncCtx4 + 32 | 0; //@line 30903
  HEAP32[$47 >> 2] = $32; //@line 30904
  $48 = $ReallocAsyncCtx4 + 36 | 0; //@line 30905
  HEAP32[$48 >> 2] = $33; //@line 30906
  $49 = $ReallocAsyncCtx4 + 40 | 0; //@line 30907
  HEAP32[$49 >> 2] = $4; //@line 30908
  sp = STACKTOP; //@line 30909
  return;
 }
 ___async_unwind = 0; //@line 30912
 HEAP32[$ReallocAsyncCtx4 >> 2] = 517; //@line 30913
 $40 = $ReallocAsyncCtx4 + 4 | 0; //@line 30914
 HEAP32[$40 >> 2] = $2; //@line 30915
 $41 = $ReallocAsyncCtx4 + 8 | 0; //@line 30916
 HEAP32[$41 >> 2] = $$040; //@line 30917
 $42 = $ReallocAsyncCtx4 + 12 | 0; //@line 30918
 HEAP8[$42 >> 0] = $10; //@line 30919
 $43 = $ReallocAsyncCtx4 + 16 | 0; //@line 30920
 HEAP32[$43 >> 2] = $8; //@line 30921
 $44 = $ReallocAsyncCtx4 + 20 | 0; //@line 30922
 HEAP32[$44 >> 2] = $12; //@line 30923
 $45 = $ReallocAsyncCtx4 + 24 | 0; //@line 30924
 HEAP8[$45 >> 0] = $35; //@line 30925
 $46 = $ReallocAsyncCtx4 + 28 | 0; //@line 30926
 HEAP32[$46 >> 2] = $30; //@line 30927
 $47 = $ReallocAsyncCtx4 + 32 | 0; //@line 30928
 HEAP32[$47 >> 2] = $32; //@line 30929
 $48 = $ReallocAsyncCtx4 + 36 | 0; //@line 30930
 HEAP32[$48 >> 2] = $33; //@line 30931
 $49 = $ReallocAsyncCtx4 + 40 | 0; //@line 30932
 HEAP32[$49 >> 2] = $4; //@line 30933
 sp = STACKTOP; //@line 30934
 return;
}
function _memchr($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $11 = 0, $12 = 0, $16 = 0, $18 = 0, $20 = 0, $23 = 0, $29 = 0, $3 = 0, $30 = 0, $35 = 0, $7 = 0, $8 = 0, label = 0;
 $3 = $1 & 255; //@line 11465
 $7 = ($2 | 0) != 0; //@line 11469
 L1 : do {
  if ($7 & ($0 & 3 | 0) != 0) {
   $8 = $1 & 255; //@line 11473
   $$03555 = $0; //@line 11474
   $$03654 = $2; //@line 11474
   while (1) {
    if ((HEAP8[$$03555 >> 0] | 0) == $8 << 24 >> 24) {
     $$035$lcssa65 = $$03555; //@line 11479
     $$036$lcssa64 = $$03654; //@line 11479
     label = 6; //@line 11480
     break L1;
    }
    $11 = $$03555 + 1 | 0; //@line 11483
    $12 = $$03654 + -1 | 0; //@line 11484
    $16 = ($12 | 0) != 0; //@line 11488
    if ($16 & ($11 & 3 | 0) != 0) {
     $$03555 = $11; //@line 11491
     $$03654 = $12; //@line 11491
    } else {
     $$035$lcssa = $11; //@line 11493
     $$036$lcssa = $12; //@line 11493
     $$lcssa = $16; //@line 11493
     label = 5; //@line 11494
     break;
    }
   }
  } else {
   $$035$lcssa = $0; //@line 11499
   $$036$lcssa = $2; //@line 11499
   $$lcssa = $7; //@line 11499
   label = 5; //@line 11500
  }
 } while (0);
 if ((label | 0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa; //@line 11505
   $$036$lcssa64 = $$036$lcssa; //@line 11505
   label = 6; //@line 11506
  } else {
   $$2 = $$035$lcssa; //@line 11508
   $$3 = 0; //@line 11508
  }
 }
 L8 : do {
  if ((label | 0) == 6) {
   $18 = $1 & 255; //@line 11514
   if ((HEAP8[$$035$lcssa65 >> 0] | 0) == $18 << 24 >> 24) {
    $$2 = $$035$lcssa65; //@line 11517
    $$3 = $$036$lcssa64; //@line 11517
   } else {
    $20 = Math_imul($3, 16843009) | 0; //@line 11519
    L11 : do {
     if ($$036$lcssa64 >>> 0 > 3) {
      $$046 = $$035$lcssa65; //@line 11523
      $$13745 = $$036$lcssa64; //@line 11523
      while (1) {
       $23 = HEAP32[$$046 >> 2] ^ $20; //@line 11526
       if (($23 & -2139062144 ^ -2139062144) & $23 + -16843009 | 0) {
        break;
       }
       $29 = $$046 + 4 | 0; //@line 11535
       $30 = $$13745 + -4 | 0; //@line 11536
       if ($30 >>> 0 > 3) {
        $$046 = $29; //@line 11539
        $$13745 = $30; //@line 11539
       } else {
        $$0$lcssa = $29; //@line 11541
        $$137$lcssa = $30; //@line 11541
        label = 11; //@line 11542
        break L11;
       }
      }
      $$140 = $$046; //@line 11546
      $$23839 = $$13745; //@line 11546
     } else {
      $$0$lcssa = $$035$lcssa65; //@line 11548
      $$137$lcssa = $$036$lcssa64; //@line 11548
      label = 11; //@line 11549
     }
    } while (0);
    if ((label | 0) == 11) {
     if (!$$137$lcssa) {
      $$2 = $$0$lcssa; //@line 11555
      $$3 = 0; //@line 11555
      break;
     } else {
      $$140 = $$0$lcssa; //@line 11558
      $$23839 = $$137$lcssa; //@line 11558
     }
    }
    while (1) {
     if ((HEAP8[$$140 >> 0] | 0) == $18 << 24 >> 24) {
      $$2 = $$140; //@line 11565
      $$3 = $$23839; //@line 11565
      break L8;
     }
     $35 = $$140 + 1 | 0; //@line 11568
     $$23839 = $$23839 + -1 | 0; //@line 11569
     if (!$$23839) {
      $$2 = $35; //@line 11572
      $$3 = 0; //@line 11572
      break;
     } else {
      $$140 = $35; //@line 11575
     }
    }
   }
  }
 } while (0);
 return ($$3 | 0 ? $$2 : 0) | 0; //@line 11583
}
function _fflush($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $12 = 0, $13 = 0, $25 = 0, $28 = 0, $34 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx3 = 0, $AsyncCtx6 = 0, $phitmp = 0, sp = 0;
 sp = STACKTOP; //@line 11236
 do {
  if (!$0) {
   do {
    if (!(HEAP32[2599] | 0)) {
     $34 = 0; //@line 11244
    } else {
     $12 = HEAP32[2599] | 0; //@line 11246
     $AsyncCtx10 = _emscripten_alloc_async_context(4, sp) | 0; //@line 11247
     $13 = _fflush($12) | 0; //@line 11248
     if (___async) {
      HEAP32[$AsyncCtx10 >> 2] = 669; //@line 11251
      sp = STACKTOP; //@line 11252
      return 0; //@line 11253
     } else {
      _emscripten_free_async_context($AsyncCtx10 | 0); //@line 11255
      $34 = $13; //@line 11256
      break;
     }
    }
   } while (0);
   $$02325 = HEAP32[(___ofl_lock() | 0) >> 2] | 0; //@line 11262
   L9 : do {
    if (!$$02325) {
     $$024$lcssa = $34; //@line 11266
    } else {
     $$02327 = $$02325; //@line 11268
     $$02426 = $34; //@line 11268
     while (1) {
      if ((HEAP32[$$02327 + 76 >> 2] | 0) > -1) {
       $28 = ___lockfile($$02327) | 0; //@line 11275
      } else {
       $28 = 0; //@line 11277
      }
      if ((HEAP32[$$02327 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327 + 28 >> 2] | 0) >>> 0) {
       $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 11285
       $25 = ___fflush_unlocked($$02327) | 0; //@line 11286
       if (___async) {
        break;
       }
       _emscripten_free_async_context($AsyncCtx | 0); //@line 11291
       $$1 = $25 | $$02426; //@line 11293
      } else {
       $$1 = $$02426; //@line 11295
      }
      if ($28 | 0) {
       ___unlockfile($$02327); //@line 11299
      }
      $$023 = HEAP32[$$02327 + 56 >> 2] | 0; //@line 11302
      if (!$$023) {
       $$024$lcssa = $$1; //@line 11305
       break L9;
      } else {
       $$02327 = $$023; //@line 11308
       $$02426 = $$1; //@line 11308
      }
     }
     HEAP32[$AsyncCtx >> 2] = 670; //@line 11311
     HEAP32[$AsyncCtx + 4 >> 2] = $$02426; //@line 11313
     HEAP32[$AsyncCtx + 8 >> 2] = $28; //@line 11315
     HEAP32[$AsyncCtx + 12 >> 2] = $$02327; //@line 11317
     sp = STACKTOP; //@line 11318
     return 0; //@line 11319
    }
   } while (0);
   ___ofl_unlock(); //@line 11322
   $$0 = $$024$lcssa; //@line 11323
  } else {
   if ((HEAP32[$0 + 76 >> 2] | 0) <= -1) {
    $AsyncCtx6 = _emscripten_alloc_async_context(4, sp) | 0; //@line 11329
    $5 = ___fflush_unlocked($0) | 0; //@line 11330
    if (___async) {
     HEAP32[$AsyncCtx6 >> 2] = 667; //@line 11333
     sp = STACKTOP; //@line 11334
     return 0; //@line 11335
    } else {
     _emscripten_free_async_context($AsyncCtx6 | 0); //@line 11337
     $$0 = $5; //@line 11338
     break;
    }
   }
   $phitmp = (___lockfile($0) | 0) == 0; //@line 11343
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 11344
   $7 = ___fflush_unlocked($0) | 0; //@line 11345
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 668; //@line 11348
    HEAP8[$AsyncCtx3 + 4 >> 0] = $phitmp & 1; //@line 11351
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 11353
    sp = STACKTOP; //@line 11354
    return 0; //@line 11355
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 11357
   if ($phitmp) {
    $$0 = $7; //@line 11359
   } else {
    ___unlockfile($0); //@line 11361
    $$0 = $7; //@line 11362
   }
  }
 } while (0);
 return $$0 | 0; //@line 11366
}
function _mbedtls_cipher_free__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $18 = 0, $2 = 0, $22 = 0, $26 = 0, $30 = 0, $34 = 0, $38 = 0, $42 = 0, $46 = 0, $50 = 0, $54 = 0, $58 = 0, $6 = 0, $62 = 0, $66 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15787
 HEAP8[$2 >> 0] = 0; //@line 15789
 HEAP8[$2 + 1 >> 0] = 0; //@line 15791
 HEAP8[$2 + 2 >> 0] = 0; //@line 15793
 $6 = $2 + 4 | 0; //@line 15794
 HEAP8[$2 + 3 >> 0] = 0; //@line 15795
 HEAP8[$6 >> 0] = 0; //@line 15797
 HEAP8[$6 + 1 >> 0] = 0; //@line 15799
 HEAP8[$6 + 2 >> 0] = 0; //@line 15801
 $10 = $6 + 4 | 0; //@line 15802
 HEAP8[$6 + 3 >> 0] = 0; //@line 15803
 HEAP8[$10 >> 0] = 0; //@line 15805
 HEAP8[$10 + 1 >> 0] = 0; //@line 15807
 HEAP8[$10 + 2 >> 0] = 0; //@line 15809
 $14 = $6 + 8 | 0; //@line 15810
 HEAP8[$10 + 3 >> 0] = 0; //@line 15811
 HEAP8[$14 >> 0] = 0; //@line 15813
 HEAP8[$14 + 1 >> 0] = 0; //@line 15815
 HEAP8[$14 + 2 >> 0] = 0; //@line 15817
 $18 = $6 + 12 | 0; //@line 15818
 HEAP8[$14 + 3 >> 0] = 0; //@line 15819
 HEAP8[$18 >> 0] = 0; //@line 15821
 HEAP8[$18 + 1 >> 0] = 0; //@line 15823
 HEAP8[$18 + 2 >> 0] = 0; //@line 15825
 $22 = $6 + 16 | 0; //@line 15826
 HEAP8[$18 + 3 >> 0] = 0; //@line 15827
 HEAP8[$22 >> 0] = 0; //@line 15829
 HEAP8[$22 + 1 >> 0] = 0; //@line 15831
 HEAP8[$22 + 2 >> 0] = 0; //@line 15833
 $26 = $6 + 20 | 0; //@line 15834
 HEAP8[$22 + 3 >> 0] = 0; //@line 15835
 HEAP8[$26 >> 0] = 0; //@line 15837
 HEAP8[$26 + 1 >> 0] = 0; //@line 15839
 HEAP8[$26 + 2 >> 0] = 0; //@line 15841
 $30 = $6 + 24 | 0; //@line 15842
 HEAP8[$26 + 3 >> 0] = 0; //@line 15843
 HEAP8[$30 >> 0] = 0; //@line 15845
 HEAP8[$30 + 1 >> 0] = 0; //@line 15847
 HEAP8[$30 + 2 >> 0] = 0; //@line 15849
 $34 = $6 + 28 | 0; //@line 15850
 HEAP8[$30 + 3 >> 0] = 0; //@line 15851
 HEAP8[$34 >> 0] = 0; //@line 15853
 HEAP8[$34 + 1 >> 0] = 0; //@line 15855
 HEAP8[$34 + 2 >> 0] = 0; //@line 15857
 $38 = $6 + 32 | 0; //@line 15858
 HEAP8[$34 + 3 >> 0] = 0; //@line 15859
 HEAP8[$38 >> 0] = 0; //@line 15861
 HEAP8[$38 + 1 >> 0] = 0; //@line 15863
 HEAP8[$38 + 2 >> 0] = 0; //@line 15865
 $42 = $6 + 36 | 0; //@line 15866
 HEAP8[$38 + 3 >> 0] = 0; //@line 15867
 HEAP8[$42 >> 0] = 0; //@line 15869
 HEAP8[$42 + 1 >> 0] = 0; //@line 15871
 HEAP8[$42 + 2 >> 0] = 0; //@line 15873
 $46 = $6 + 40 | 0; //@line 15874
 HEAP8[$42 + 3 >> 0] = 0; //@line 15875
 HEAP8[$46 >> 0] = 0; //@line 15877
 HEAP8[$46 + 1 >> 0] = 0; //@line 15879
 HEAP8[$46 + 2 >> 0] = 0; //@line 15881
 $50 = $6 + 44 | 0; //@line 15882
 HEAP8[$46 + 3 >> 0] = 0; //@line 15883
 HEAP8[$50 >> 0] = 0; //@line 15885
 HEAP8[$50 + 1 >> 0] = 0; //@line 15887
 HEAP8[$50 + 2 >> 0] = 0; //@line 15889
 $54 = $6 + 48 | 0; //@line 15890
 HEAP8[$50 + 3 >> 0] = 0; //@line 15891
 HEAP8[$54 >> 0] = 0; //@line 15893
 HEAP8[$54 + 1 >> 0] = 0; //@line 15895
 HEAP8[$54 + 2 >> 0] = 0; //@line 15897
 $58 = $6 + 52 | 0; //@line 15898
 HEAP8[$54 + 3 >> 0] = 0; //@line 15899
 HEAP8[$58 >> 0] = 0; //@line 15901
 HEAP8[$58 + 1 >> 0] = 0; //@line 15903
 HEAP8[$58 + 2 >> 0] = 0; //@line 15905
 $62 = $6 + 56 | 0; //@line 15906
 HEAP8[$58 + 3 >> 0] = 0; //@line 15907
 HEAP8[$62 >> 0] = 0; //@line 15909
 HEAP8[$62 + 1 >> 0] = 0; //@line 15911
 HEAP8[$62 + 2 >> 0] = 0; //@line 15913
 $66 = $6 + 60 | 0; //@line 15914
 HEAP8[$62 + 3 >> 0] = 0; //@line 15915
 HEAP8[$66 >> 0] = 0; //@line 15917
 HEAP8[$66 + 1 >> 0] = 0; //@line 15919
 HEAP8[$66 + 2 >> 0] = 0; //@line 15921
 HEAP8[$66 + 3 >> 0] = 0; //@line 15922
 return;
}
function __ZN12LoRaWANStackC2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 32206
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32210
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32212
 $7 = $4 + 12 | 0; //@line 32213
 HEAP32[$4 >> 2] = 24; //@line 32214
 HEAP32[$4 + 4 >> 2] = 0; //@line 32216
 HEAP32[$4 + 8 >> 2] = $6; //@line 32218
 HEAP32[$7 >> 2] = 824; //@line 32219
 $8 = $6 + 1860 | 0; //@line 32220
 if (($8 | 0) == ($4 | 0)) {
  $25 = HEAP32[208] | 0; //@line 32224
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 32225
  FUNCTION_TABLE_vi[$25 & 1023]($4); //@line 32226
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 118; //@line 32229
   $26 = $ReallocAsyncCtx4 + 4 | 0; //@line 32230
   HEAP32[$26 >> 2] = $4; //@line 32231
   sp = STACKTOP; //@line 32232
   return;
  }
  ___async_unwind = 0; //@line 32235
  HEAP32[$ReallocAsyncCtx4 >> 2] = 118; //@line 32236
  $26 = $ReallocAsyncCtx4 + 4 | 0; //@line 32237
  HEAP32[$26 >> 2] = $4; //@line 32238
  sp = STACKTOP; //@line 32239
  return;
 }
 $10 = $6 + 1872 | 0; //@line 32242
 $11 = HEAP32[$10 >> 2] | 0; //@line 32243
 if ($11 | 0) {
  $14 = HEAP32[$11 + 8 >> 2] | 0; //@line 32247
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 32248
  FUNCTION_TABLE_vi[$14 & 1023]($8); //@line 32249
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 116; //@line 32252
   $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 32253
   HEAP32[$15 >> 2] = $7; //@line 32254
   $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 32255
   HEAP32[$16 >> 2] = $10; //@line 32256
   $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 32257
   HEAP32[$17 >> 2] = $8; //@line 32258
   $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 32259
   HEAP32[$18 >> 2] = $4; //@line 32260
   sp = STACKTOP; //@line 32261
   return;
  }
  ___async_unwind = 0; //@line 32264
  HEAP32[$ReallocAsyncCtx2 >> 2] = 116; //@line 32265
  $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 32266
  HEAP32[$15 >> 2] = $7; //@line 32267
  $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 32268
  HEAP32[$16 >> 2] = $10; //@line 32269
  $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 32270
  HEAP32[$17 >> 2] = $8; //@line 32271
  $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 32272
  HEAP32[$18 >> 2] = $4; //@line 32273
  sp = STACKTOP; //@line 32274
  return;
 }
 $20 = HEAP32[207] | 0; //@line 32278
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 32279
 FUNCTION_TABLE_vii[$20 & 31]($8, $4); //@line 32280
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 117; //@line 32283
  $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 32284
  HEAP32[$21 >> 2] = $7; //@line 32285
  $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 32286
  HEAP32[$22 >> 2] = $10; //@line 32287
  $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 32288
  HEAP32[$23 >> 2] = $4; //@line 32289
  sp = STACKTOP; //@line 32290
  return;
 }
 ___async_unwind = 0; //@line 32293
 HEAP32[$ReallocAsyncCtx3 >> 2] = 117; //@line 32294
 $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 32295
 HEAP32[$21 >> 2] = $7; //@line 32296
 $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 32297
 HEAP32[$22 >> 2] = $10; //@line 32298
 $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 32299
 HEAP32[$23 >> 2] = $4; //@line 32300
 sp = STACKTOP; //@line 32301
 return;
}
function _mbedtls_ccm_free__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $18 = 0, $2 = 0, $22 = 0, $26 = 0, $30 = 0, $34 = 0, $38 = 0, $42 = 0, $46 = 0, $50 = 0, $54 = 0, $58 = 0, $6 = 0, $62 = 0, $66 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29470
 HEAP8[$2 >> 0] = 0; //@line 29472
 HEAP8[$2 + 1 >> 0] = 0; //@line 29474
 HEAP8[$2 + 2 >> 0] = 0; //@line 29476
 $6 = $2 + 4 | 0; //@line 29477
 HEAP8[$2 + 3 >> 0] = 0; //@line 29478
 HEAP8[$6 >> 0] = 0; //@line 29480
 HEAP8[$6 + 1 >> 0] = 0; //@line 29482
 HEAP8[$6 + 2 >> 0] = 0; //@line 29484
 $10 = $6 + 4 | 0; //@line 29485
 HEAP8[$6 + 3 >> 0] = 0; //@line 29486
 HEAP8[$10 >> 0] = 0; //@line 29488
 HEAP8[$10 + 1 >> 0] = 0; //@line 29490
 HEAP8[$10 + 2 >> 0] = 0; //@line 29492
 $14 = $6 + 8 | 0; //@line 29493
 HEAP8[$10 + 3 >> 0] = 0; //@line 29494
 HEAP8[$14 >> 0] = 0; //@line 29496
 HEAP8[$14 + 1 >> 0] = 0; //@line 29498
 HEAP8[$14 + 2 >> 0] = 0; //@line 29500
 $18 = $6 + 12 | 0; //@line 29501
 HEAP8[$14 + 3 >> 0] = 0; //@line 29502
 HEAP8[$18 >> 0] = 0; //@line 29504
 HEAP8[$18 + 1 >> 0] = 0; //@line 29506
 HEAP8[$18 + 2 >> 0] = 0; //@line 29508
 $22 = $6 + 16 | 0; //@line 29509
 HEAP8[$18 + 3 >> 0] = 0; //@line 29510
 HEAP8[$22 >> 0] = 0; //@line 29512
 HEAP8[$22 + 1 >> 0] = 0; //@line 29514
 HEAP8[$22 + 2 >> 0] = 0; //@line 29516
 $26 = $6 + 20 | 0; //@line 29517
 HEAP8[$22 + 3 >> 0] = 0; //@line 29518
 HEAP8[$26 >> 0] = 0; //@line 29520
 HEAP8[$26 + 1 >> 0] = 0; //@line 29522
 HEAP8[$26 + 2 >> 0] = 0; //@line 29524
 $30 = $6 + 24 | 0; //@line 29525
 HEAP8[$26 + 3 >> 0] = 0; //@line 29526
 HEAP8[$30 >> 0] = 0; //@line 29528
 HEAP8[$30 + 1 >> 0] = 0; //@line 29530
 HEAP8[$30 + 2 >> 0] = 0; //@line 29532
 $34 = $6 + 28 | 0; //@line 29533
 HEAP8[$30 + 3 >> 0] = 0; //@line 29534
 HEAP8[$34 >> 0] = 0; //@line 29536
 HEAP8[$34 + 1 >> 0] = 0; //@line 29538
 HEAP8[$34 + 2 >> 0] = 0; //@line 29540
 $38 = $6 + 32 | 0; //@line 29541
 HEAP8[$34 + 3 >> 0] = 0; //@line 29542
 HEAP8[$38 >> 0] = 0; //@line 29544
 HEAP8[$38 + 1 >> 0] = 0; //@line 29546
 HEAP8[$38 + 2 >> 0] = 0; //@line 29548
 $42 = $6 + 36 | 0; //@line 29549
 HEAP8[$38 + 3 >> 0] = 0; //@line 29550
 HEAP8[$42 >> 0] = 0; //@line 29552
 HEAP8[$42 + 1 >> 0] = 0; //@line 29554
 HEAP8[$42 + 2 >> 0] = 0; //@line 29556
 $46 = $6 + 40 | 0; //@line 29557
 HEAP8[$42 + 3 >> 0] = 0; //@line 29558
 HEAP8[$46 >> 0] = 0; //@line 29560
 HEAP8[$46 + 1 >> 0] = 0; //@line 29562
 HEAP8[$46 + 2 >> 0] = 0; //@line 29564
 $50 = $6 + 44 | 0; //@line 29565
 HEAP8[$46 + 3 >> 0] = 0; //@line 29566
 HEAP8[$50 >> 0] = 0; //@line 29568
 HEAP8[$50 + 1 >> 0] = 0; //@line 29570
 HEAP8[$50 + 2 >> 0] = 0; //@line 29572
 $54 = $6 + 48 | 0; //@line 29573
 HEAP8[$50 + 3 >> 0] = 0; //@line 29574
 HEAP8[$54 >> 0] = 0; //@line 29576
 HEAP8[$54 + 1 >> 0] = 0; //@line 29578
 HEAP8[$54 + 2 >> 0] = 0; //@line 29580
 $58 = $6 + 52 | 0; //@line 29581
 HEAP8[$54 + 3 >> 0] = 0; //@line 29582
 HEAP8[$58 >> 0] = 0; //@line 29584
 HEAP8[$58 + 1 >> 0] = 0; //@line 29586
 HEAP8[$58 + 2 >> 0] = 0; //@line 29588
 $62 = $6 + 56 | 0; //@line 29589
 HEAP8[$58 + 3 >> 0] = 0; //@line 29590
 HEAP8[$62 >> 0] = 0; //@line 29592
 HEAP8[$62 + 1 >> 0] = 0; //@line 29594
 HEAP8[$62 + 2 >> 0] = 0; //@line 29596
 $66 = $6 + 60 | 0; //@line 29597
 HEAP8[$62 + 3 >> 0] = 0; //@line 29598
 HEAP8[$66 >> 0] = 0; //@line 29600
 HEAP8[$66 + 1 >> 0] = 0; //@line 29602
 HEAP8[$66 + 2 >> 0] = 0; //@line 29604
 HEAP8[$66 + 3 >> 0] = 0; //@line 29605
 return;
}
function __ZN7LoRaPHY19update_band_timeoffEbbP6band_th($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$lcssa = 0, $$060 = 0, $$060$us = 0, $$2 = 0, $$2$us = 0, $$pr$us = 0, $$sink2 = 0, $10 = 0, $20 = 0, $26 = 0, $28 = 0, $34 = 0, $38 = 0, $39 = 0, $41 = 0, $42 = 0, $6 = 0, $7 = 0, $8 = 0, $indvars$iv = 0, $indvars$iv62 = 0, $wide$trip$count = 0, label = 0;
 if (!($4 << 24 >> 24)) {
  $$0$lcssa = -1; //@line 22343
  return $$0$lcssa | 0; //@line 22344
 }
 $6 = $0 + 8 | 0; //@line 22346
 $wide$trip$count = $4 & 255; //@line 22347
 if ($1) {
  $$060$us = -1; //@line 22349
  $indvars$iv = 0; //@line 22349
  while (1) {
   $7 = $3 + ($indvars$iv * 24 | 0) + 12 | 0; //@line 22351
   do {
    if ($2) {
     $8 = HEAP32[$7 >> 2] | 0; //@line 22354
     $10 = $3 + ($indvars$iv * 24 | 0) + 8 | 0; //@line 22356
     if ($8 >>> 0 <= (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$10 >> 2] | 0) | 0) >>> 0) {
      HEAP32[$7 >> 2] = 0; //@line 22361
      $$2$us = $$060$us; //@line 22362
      break;
     }
     $$pr$us = HEAP32[$7 >> 2] | 0; //@line 22365
     if (!$$pr$us) {
      $$2$us = $$060$us; //@line 22368
     } else {
      if (($$pr$us - (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$10 >> 2] | 0) | 0) | 0) >>> 0 < $$060$us >>> 0) {
       $20 = HEAP32[$7 >> 2] | 0; //@line 22376
       $$2$us = $20 - (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$10 >> 2] | 0) | 0) | 0; //@line 22381
      } else {
       $$2$us = $$060$us; //@line 22383
      }
     }
    } else {
     HEAP32[$7 >> 2] = 0; //@line 22387
     $$2$us = 0; //@line 22388
    }
   } while (0);
   $indvars$iv = $indvars$iv + 1 | 0; //@line 22391
   if (($indvars$iv | 0) == ($wide$trip$count | 0)) {
    $$0$lcssa = $$2$us; //@line 22394
    break;
   } else {
    $$060$us = $$2$us; //@line 22397
   }
  }
  return $$0$lcssa | 0; //@line 22400
 } else {
  $$060 = -1; //@line 22402
  $indvars$iv62 = 0; //@line 22402
 }
 while (1) {
  $26 = $3 + ($indvars$iv62 * 24 | 0) + 4 | 0; //@line 22406
  $28 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$26 >> 2] | 0) | 0; //@line 22408
  if ($2) {
   $34 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$3 + ($indvars$iv62 * 24 | 0) + 8 >> 2] | 0) | 0; //@line 22414
  } else {
   $34 = 0; //@line 22416
  }
  if ($28 >>> 0 > $34 >>> 0) {
   $$sink2 = $26; //@line 22420
   label = 17; //@line 22421
  } else {
   if ($2) {
    $$sink2 = $3 + ($indvars$iv62 * 24 | 0) + 8 | 0; //@line 22425
    label = 17; //@line 22426
   } else {
    $41 = 0; //@line 22428
   }
  }
  if ((label | 0) == 17) {
   label = 0; //@line 22432
   $41 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$$sink2 >> 2] | 0) | 0; //@line 22436
  }
  $38 = $3 + ($indvars$iv62 * 24 | 0) + 12 | 0; //@line 22438
  $39 = HEAP32[$38 >> 2] | 0; //@line 22439
  if ($39 >>> 0 > $41 >>> 0) {
   $42 = $39 - $41 | 0; //@line 22442
   $$2 = $42 >>> 0 < $$060 >>> 0 ? $42 : $$060; //@line 22445
  } else {
   HEAP32[$38 >> 2] = 0; //@line 22447
   $$2 = $$060; //@line 22448
  }
  $indvars$iv62 = $indvars$iv62 + 1 | 0; //@line 22450
  if (($indvars$iv62 | 0) == ($wide$trip$count | 0)) {
   $$0$lcssa = $$2; //@line 22453
   break;
  } else {
   $$060 = $$2; //@line 22456
  }
 }
 return $$0$lcssa | 0; //@line 22459
}
function _main__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 18930
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18932
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18934
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18936
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18938
 $10 = $8 + 4 | 0; //@line 18940
 HEAP32[$10 >> 2] = 0; //@line 18942
 HEAP32[$10 + 4 >> 2] = 0; //@line 18945
 HEAP32[$8 >> 2] = 649; //@line 18946
 $14 = $8 + 12 | 0; //@line 18947
 HEAP32[$14 >> 2] = 10128; //@line 18948
 $15 = HEAP32[5475] | 0; //@line 18949
 if (!$15) {
  $25 = HEAP32[2533] | 0; //@line 18953
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 18954
  FUNCTION_TABLE_vii[$25 & 31](21888, $8); //@line 18955
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 651; //@line 18958
   $26 = $ReallocAsyncCtx3 + 4 | 0; //@line 18959
   HEAP32[$26 >> 2] = $2; //@line 18960
   $27 = $ReallocAsyncCtx3 + 8 | 0; //@line 18961
   HEAP32[$27 >> 2] = $4; //@line 18962
   $28 = $ReallocAsyncCtx3 + 12 | 0; //@line 18963
   HEAP32[$28 >> 2] = $6; //@line 18964
   $29 = $ReallocAsyncCtx3 + 16 | 0; //@line 18965
   HEAP32[$29 >> 2] = $14; //@line 18966
   $30 = $ReallocAsyncCtx3 + 20 | 0; //@line 18967
   HEAP32[$30 >> 2] = $8; //@line 18968
   sp = STACKTOP; //@line 18969
   return;
  }
  ___async_unwind = 0; //@line 18972
  HEAP32[$ReallocAsyncCtx3 >> 2] = 651; //@line 18973
  $26 = $ReallocAsyncCtx3 + 4 | 0; //@line 18974
  HEAP32[$26 >> 2] = $2; //@line 18975
  $27 = $ReallocAsyncCtx3 + 8 | 0; //@line 18976
  HEAP32[$27 >> 2] = $4; //@line 18977
  $28 = $ReallocAsyncCtx3 + 12 | 0; //@line 18978
  HEAP32[$28 >> 2] = $6; //@line 18979
  $29 = $ReallocAsyncCtx3 + 16 | 0; //@line 18980
  HEAP32[$29 >> 2] = $14; //@line 18981
  $30 = $ReallocAsyncCtx3 + 20 | 0; //@line 18982
  HEAP32[$30 >> 2] = $8; //@line 18983
  sp = STACKTOP; //@line 18984
  return;
 } else {
  $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 18988
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 18989
  FUNCTION_TABLE_vi[$18 & 1023](21888); //@line 18990
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 650; //@line 18993
   $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 18994
   HEAP32[$19 >> 2] = $2; //@line 18995
   $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 18996
   HEAP32[$20 >> 2] = $4; //@line 18997
   $21 = $ReallocAsyncCtx2 + 12 | 0; //@line 18998
   HEAP32[$21 >> 2] = $6; //@line 18999
   $22 = $ReallocAsyncCtx2 + 16 | 0; //@line 19000
   HEAP32[$22 >> 2] = $14; //@line 19001
   $23 = $ReallocAsyncCtx2 + 20 | 0; //@line 19002
   HEAP32[$23 >> 2] = $8; //@line 19003
   sp = STACKTOP; //@line 19004
   return;
  }
  ___async_unwind = 0; //@line 19007
  HEAP32[$ReallocAsyncCtx2 >> 2] = 650; //@line 19008
  $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 19009
  HEAP32[$19 >> 2] = $2; //@line 19010
  $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 19011
  HEAP32[$20 >> 2] = $4; //@line 19012
  $21 = $ReallocAsyncCtx2 + 12 | 0; //@line 19013
  HEAP32[$21 >> 2] = $6; //@line 19014
  $22 = $ReallocAsyncCtx2 + 16 | 0; //@line 19015
  HEAP32[$22 >> 2] = $14; //@line 19016
  $23 = $ReallocAsyncCtx2 + 20 | 0; //@line 19017
  HEAP32[$23 >> 2] = $8; //@line 19018
  sp = STACKTOP; //@line 19019
  return;
 }
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$037$off038 = 0, $$037$off039 = 0, $13 = 0, $19 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $39 = 0, $50 = 0, $53 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 15412
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 15418
  } else {
   if (!(__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0)) {
    $50 = HEAP32[$0 + 8 >> 2] | 0; //@line 15424
    $53 = HEAP32[(HEAP32[$50 >> 2] | 0) + 24 >> 2] | 0; //@line 15427
    $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 15428
    FUNCTION_TABLE_viiiii[$53 & 7]($50, $1, $2, $3, $4); //@line 15429
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 692; //@line 15432
     sp = STACKTOP; //@line 15433
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15436
     break;
    }
   }
   if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
    $13 = $1 + 20 | 0; //@line 15444
    if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
     HEAP32[$1 + 32 >> 2] = $3; //@line 15449
     $19 = $1 + 44 | 0; //@line 15450
     if ((HEAP32[$19 >> 2] | 0) == 4) {
      break;
     }
     $22 = $1 + 52 | 0; //@line 15456
     HEAP8[$22 >> 0] = 0; //@line 15457
     $23 = $1 + 53 | 0; //@line 15458
     HEAP8[$23 >> 0] = 0; //@line 15459
     $25 = HEAP32[$0 + 8 >> 2] | 0; //@line 15461
     $28 = HEAP32[(HEAP32[$25 >> 2] | 0) + 20 >> 2] | 0; //@line 15464
     $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 15465
     FUNCTION_TABLE_viiiiii[$28 & 3]($25, $1, $2, $2, 1, $4); //@line 15466
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 691; //@line 15469
      HEAP32[$AsyncCtx + 4 >> 2] = $23; //@line 15471
      HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 15473
      HEAP32[$AsyncCtx + 12 >> 2] = $13; //@line 15475
      HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 15477
      HEAP32[$AsyncCtx + 20 >> 2] = $22; //@line 15479
      HEAP32[$AsyncCtx + 24 >> 2] = $19; //@line 15481
      sp = STACKTOP; //@line 15482
      return;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 15485
     if (!(HEAP8[$23 >> 0] | 0)) {
      $$037$off038 = 4; //@line 15489
      label = 13; //@line 15490
     } else {
      if (!(HEAP8[$22 >> 0] | 0)) {
       $$037$off038 = 3; //@line 15495
       label = 13; //@line 15496
      } else {
       $$037$off039 = 3; //@line 15498
      }
     }
     if ((label | 0) == 13) {
      HEAP32[$13 >> 2] = $2; //@line 15502
      $39 = $1 + 40 | 0; //@line 15503
      HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + 1; //@line 15506
      if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
       if ((HEAP32[$1 + 24 >> 2] | 0) == 2) {
        HEAP8[$1 + 54 >> 0] = 1; //@line 15516
        $$037$off039 = $$037$off038; //@line 15517
       } else {
        $$037$off039 = $$037$off038; //@line 15519
       }
      } else {
       $$037$off039 = $$037$off038; //@line 15522
      }
     }
     HEAP32[$19 >> 2] = $$037$off039; //@line 15525
     break;
    }
   }
   if (($3 | 0) == 1) {
    HEAP32[$1 + 32 >> 2] = 1; //@line 15532
   }
  }
 } while (0);
 return;
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_411($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 30206
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30208
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30210
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30212
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30214
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30216
 $13 = HEAP32[HEAP32[$0 + 24 >> 2] >> 2] | 0; //@line 30219
 if (!$13) {
  $21 = HEAP32[$2 >> 2] | 0; //@line 30222
  $23 = $8 + 12 | 0; //@line 30224
  HEAP32[$8 >> 2] = 435; //@line 30225
  HEAP32[$8 + 4 >> 2] = 0; //@line 30227
  HEAP32[$8 + 8 >> 2] = $4; //@line 30229
  HEAP32[$23 >> 2] = 836; //@line 30230
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(24) | 0; //@line 30231
  __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($21, $4 + 1056 | 0, $8); //@line 30232
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 436; //@line 30235
   $24 = $ReallocAsyncCtx7 + 4 | 0; //@line 30236
   HEAP32[$24 >> 2] = $23; //@line 30237
   $25 = $ReallocAsyncCtx7 + 8 | 0; //@line 30238
   HEAP32[$25 >> 2] = $2; //@line 30239
   $26 = $ReallocAsyncCtx7 + 12 | 0; //@line 30240
   HEAP32[$26 >> 2] = $4; //@line 30241
   $27 = $ReallocAsyncCtx7 + 16 | 0; //@line 30242
   HEAP32[$27 >> 2] = $6; //@line 30243
   $28 = $ReallocAsyncCtx7 + 20 | 0; //@line 30244
   HEAP32[$28 >> 2] = $8; //@line 30245
   sp = STACKTOP; //@line 30246
   return;
  }
  ___async_unwind = 0; //@line 30249
  HEAP32[$ReallocAsyncCtx7 >> 2] = 436; //@line 30250
  $24 = $ReallocAsyncCtx7 + 4 | 0; //@line 30251
  HEAP32[$24 >> 2] = $23; //@line 30252
  $25 = $ReallocAsyncCtx7 + 8 | 0; //@line 30253
  HEAP32[$25 >> 2] = $2; //@line 30254
  $26 = $ReallocAsyncCtx7 + 12 | 0; //@line 30255
  HEAP32[$26 >> 2] = $4; //@line 30256
  $27 = $ReallocAsyncCtx7 + 16 | 0; //@line 30257
  HEAP32[$27 >> 2] = $6; //@line 30258
  $28 = $ReallocAsyncCtx7 + 20 | 0; //@line 30259
  HEAP32[$28 >> 2] = $8; //@line 30260
  sp = STACKTOP; //@line 30261
  return;
 } else {
  $16 = HEAP32[$13 + 8 >> 2] | 0; //@line 30265
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 30266
  FUNCTION_TABLE_vi[$16 & 1023]($10); //@line 30267
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 434; //@line 30270
   $17 = $ReallocAsyncCtx3 + 4 | 0; //@line 30271
   HEAP32[$17 >> 2] = $2; //@line 30272
   $18 = $ReallocAsyncCtx3 + 8 | 0; //@line 30273
   HEAP32[$18 >> 2] = $4; //@line 30274
   $19 = $ReallocAsyncCtx3 + 12 | 0; //@line 30275
   HEAP32[$19 >> 2] = $8; //@line 30276
   $20 = $ReallocAsyncCtx3 + 16 | 0; //@line 30277
   HEAP32[$20 >> 2] = $6; //@line 30278
   sp = STACKTOP; //@line 30279
   return;
  }
  ___async_unwind = 0; //@line 30282
  HEAP32[$ReallocAsyncCtx3 >> 2] = 434; //@line 30283
  $17 = $ReallocAsyncCtx3 + 4 | 0; //@line 30284
  HEAP32[$17 >> 2] = $2; //@line 30285
  $18 = $ReallocAsyncCtx3 + 8 | 0; //@line 30286
  HEAP32[$18 >> 2] = $4; //@line 30287
  $19 = $ReallocAsyncCtx3 + 12 | 0; //@line 30288
  HEAP32[$19 >> 2] = $8; //@line 30289
  $20 = $ReallocAsyncCtx3 + 16 | 0; //@line 30290
  HEAP32[$20 >> 2] = $6; //@line 30291
  sp = STACKTOP; //@line 30292
  return;
 }
}
function _initialize__async_cb_14($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $17 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $28 = 0, $29 = 0, $31 = 0, $33 = 0, $36 = 0, $4 = 0, $40 = 0, $41 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 17782
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17784
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17786
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17788
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17790
 $10 = $0 + 24 | 0; //@line 17792
 $12 = HEAP32[$10 >> 2] | 0; //@line 17794
 $15 = HEAP32[$10 + 4 >> 2] | 0; //@line 17797
 $17 = HEAP32[$0 + 32 >> 2] | 0; //@line 17799
 $19 = HEAP32[$0 + 36 >> 2] | 0; //@line 17801
 $21 = HEAP32[$2 >> 2] | 0; //@line 17804
 $22 = $21 + 32 | 0; //@line 17805
 HEAP32[$22 >> 2] = HEAP32[___async_retval >> 2]; //@line 17806
 $23 = $21 + 40 | 0; //@line 17807
 $24 = $23; //@line 17808
 HEAP32[$24 >> 2] = 0; //@line 17810
 HEAP32[$24 + 4 >> 2] = 0; //@line 17813
 $28 = $21 + 8 | 0; //@line 17814
 HEAP32[$28 >> 2] = $4; //@line 17815
 $29 = _bitshift64Shl(1, 0, $6 | 0) | 0; //@line 17816
 $31 = _i64Add($29 | 0, tempRet0 | 0, -1, 0) | 0; //@line 17818
 $33 = $21 + 12 | 0; //@line 17820
 HEAP32[$33 >> 2] = $31; //@line 17821
 HEAP32[$21 + 16 >> 2] = $8; //@line 17823
 $36 = $21 + 24 | 0; //@line 17825
 HEAP32[$36 >> 2] = $12; //@line 17827
 HEAP32[$36 + 4 >> 2] = $15; //@line 17830
 $40 = $21 + 48 | 0; //@line 17831
 $41 = $40; //@line 17832
 HEAP32[$41 >> 2] = 0; //@line 17834
 HEAP32[$41 + 4 >> 2] = 0; //@line 17837
 HEAP8[$21 + 56 >> 0] = 1; //@line 17839
 $48 = HEAP32[(HEAP32[$17 >> 2] | 0) + 4 >> 2] | 0; //@line 17842
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(32) | 0; //@line 17843
 $49 = FUNCTION_TABLE_i[$48 & 7]() | 0; //@line 17844
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 600; //@line 17847
  $50 = $ReallocAsyncCtx4 + 4 | 0; //@line 17848
  HEAP32[$50 >> 2] = $2; //@line 17849
  $51 = $ReallocAsyncCtx4 + 8 | 0; //@line 17850
  HEAP32[$51 >> 2] = $19; //@line 17851
  $52 = $ReallocAsyncCtx4 + 12 | 0; //@line 17852
  HEAP32[$52 >> 2] = $22; //@line 17853
  $53 = $ReallocAsyncCtx4 + 16 | 0; //@line 17854
  HEAP32[$53 >> 2] = $33; //@line 17855
  $54 = $ReallocAsyncCtx4 + 20 | 0; //@line 17856
  HEAP32[$54 >> 2] = $28; //@line 17857
  $55 = $ReallocAsyncCtx4 + 24 | 0; //@line 17858
  HEAP32[$55 >> 2] = $23; //@line 17859
  $56 = $ReallocAsyncCtx4 + 28 | 0; //@line 17860
  HEAP32[$56 >> 2] = $40; //@line 17861
  sp = STACKTOP; //@line 17862
  return;
 }
 HEAP32[___async_retval >> 2] = $49; //@line 17866
 ___async_unwind = 0; //@line 17867
 HEAP32[$ReallocAsyncCtx4 >> 2] = 600; //@line 17868
 $50 = $ReallocAsyncCtx4 + 4 | 0; //@line 17869
 HEAP32[$50 >> 2] = $2; //@line 17870
 $51 = $ReallocAsyncCtx4 + 8 | 0; //@line 17871
 HEAP32[$51 >> 2] = $19; //@line 17872
 $52 = $ReallocAsyncCtx4 + 12 | 0; //@line 17873
 HEAP32[$52 >> 2] = $22; //@line 17874
 $53 = $ReallocAsyncCtx4 + 16 | 0; //@line 17875
 HEAP32[$53 >> 2] = $33; //@line 17876
 $54 = $ReallocAsyncCtx4 + 20 | 0; //@line 17877
 HEAP32[$54 >> 2] = $28; //@line 17878
 $55 = $ReallocAsyncCtx4 + 24 | 0; //@line 17879
 HEAP32[$55 >> 2] = $23; //@line 17880
 $56 = $ReallocAsyncCtx4 + 28 | 0; //@line 17881
 HEAP32[$56 >> 2] = $40; //@line 17882
 sp = STACKTOP; //@line 17883
 return;
}
function __ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $14 = 0, $2 = 0, $27 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 6980
 STACKTOP = STACKTOP + 16 | 0; //@line 6981
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 6981
 $2 = sp; //@line 6982
 $3 = $0 + 1876 | 0; //@line 6983
 if (HEAP32[$3 >> 2] | 0) {
  $$0 = 0; //@line 6987
  STACKTOP = sp; //@line 6988
  return $$0 | 0; //@line 6988
 }
 HEAP32[$0 + 2288 >> 2] = $1; //@line 6991
 __ZN18LoRaWANTimeHandler24activate_timer_subsystemEPN6events10EventQueueE($0, $1); //@line 6992
 $7 = $0 + 4 | 0; //@line 6993
 $AsyncCtx7 = _emscripten_alloc_async_context(20, sp) | 0; //@line 6996
 __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE($7, $0 + 1812 | 0, $0 + 1336 | 0, $1) | 0; //@line 6997
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 225; //@line 7000
  HEAP32[$AsyncCtx7 + 4 >> 2] = $2; //@line 7002
  HEAP32[$AsyncCtx7 + 8 >> 2] = $7; //@line 7004
  HEAP32[$AsyncCtx7 + 12 >> 2] = $0; //@line 7006
  HEAP32[$AsyncCtx7 + 16 >> 2] = $3; //@line 7008
  sp = STACKTOP; //@line 7009
  STACKTOP = sp; //@line 7010
  return 0; //@line 7010
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 7012
 HEAP32[$2 >> 2] = 2; //@line 7013
 $14 = $2 + 4 | 0; //@line 7014
 HEAP8[$14 >> 0] = 1; //@line 7015
 $AsyncCtx3 = _emscripten_alloc_async_context(32, sp) | 0; //@line 7016
 __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($7, $2) | 0; //@line 7017
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 226; //@line 7020
  HEAP32[$AsyncCtx3 + 4 >> 2] = $2; //@line 7022
  HEAP32[$AsyncCtx3 + 8 >> 2] = $14; //@line 7024
  HEAP32[$AsyncCtx3 + 12 >> 2] = $7; //@line 7026
  HEAP32[$AsyncCtx3 + 16 >> 2] = $2; //@line 7028
  HEAP32[$AsyncCtx3 + 20 >> 2] = $0; //@line 7030
  HEAP32[$AsyncCtx3 + 24 >> 2] = $3; //@line 7032
  HEAP32[$AsyncCtx3 + 28 >> 2] = $2; //@line 7034
  sp = STACKTOP; //@line 7035
  STACKTOP = sp; //@line 7036
  return 0; //@line 7036
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 7038
 HEAP32[$2 >> 2] = 7; //@line 7039
 HEAP8[$14 >> 0] = 1; //@line 7040
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 7041
 __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($7, $2) | 0; //@line 7042
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 227; //@line 7045
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 7047
  HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 7049
  HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 7051
  sp = STACKTOP; //@line 7052
  STACKTOP = sp; //@line 7053
  return 0; //@line 7053
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 7055
 HEAP32[$0 + 1960 >> 2] = 0; //@line 7057
 HEAP32[$0 + 1956 >> 2] = 0; //@line 7059
 HEAP32[$3 >> 2] = 1; //@line 7060
 $AsyncCtx10 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7061
 $27 = __ZN12LoRaWANStack18lora_state_machineEv($0) | 0; //@line 7062
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 228; //@line 7065
  HEAP32[$AsyncCtx10 + 4 >> 2] = $2; //@line 7067
  sp = STACKTOP; //@line 7068
  STACKTOP = sp; //@line 7069
  return 0; //@line 7069
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 7071
 $$0 = $27; //@line 7072
 STACKTOP = sp; //@line 7073
 return $$0 | 0; //@line 7073
}
function _equeue_enqueue($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$051$ph = 0, $$05157 = 0, $$0515859 = 0, $$053 = 0, $13 = 0, $14 = 0, $16 = 0, $24 = 0, $25 = 0, $27 = 0, $29 = 0, $33 = 0, $34 = 0, $42 = 0, $43 = 0, $46 = 0, $47 = 0, $49 = 0, $54 = 0, $65 = 0, $67 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 2385
 $13 = $1 - (HEAP32[$0 + 12 >> 2] | 0) | HEAPU8[$1 + 4 >> 0] << HEAP32[$0 + 16 >> 2]; //@line 2396
 $14 = $1 + 20 | 0; //@line 2397
 $16 = (HEAP32[$14 >> 2] | 0) - $2 | 0; //@line 2399
 HEAP32[$14 >> 2] = ($16 & ~($16 >> 31)) + $2; //@line 2404
 HEAP8[$1 + 5 >> 0] = HEAP8[$0 + 9 >> 0] | 0; //@line 2408
 $24 = $0 + 128 | 0; //@line 2409
 _equeue_mutex_lock($24); //@line 2410
 $25 = HEAP32[$0 >> 2] | 0; //@line 2411
 L1 : do {
  if (!$25) {
   $$051$ph = $0; //@line 2415
   label = 5; //@line 2416
  } else {
   $27 = HEAP32[$14 >> 2] | 0; //@line 2418
   $$053 = $0; //@line 2419
   $29 = $25; //@line 2419
   while (1) {
    if (((HEAP32[$29 + 20 >> 2] | 0) - $27 | 0) >= 0) {
     break;
    }
    $33 = $29 + 8 | 0; //@line 2428
    $34 = HEAP32[$33 >> 2] | 0; //@line 2429
    if (!$34) {
     $$051$ph = $33; //@line 2432
     label = 5; //@line 2433
     break L1;
    } else {
     $$053 = $33; //@line 2436
     $29 = $34; //@line 2436
    }
   }
   if ((HEAP32[$29 + 20 >> 2] | 0) != (HEAP32[$14 >> 2] | 0)) {
    $49 = $1 + 8 | 0; //@line 2444
    HEAP32[$49 >> 2] = $29; //@line 2445
    HEAP32[$29 + 16 >> 2] = $49; //@line 2447
    $$0515859 = $$053; //@line 2448
    label = 11; //@line 2449
    break;
   }
   $42 = HEAP32[$29 + 8 >> 2] | 0; //@line 2453
   $43 = $1 + 8 | 0; //@line 2454
   HEAP32[$43 >> 2] = $42; //@line 2455
   if ($42 | 0) {
    HEAP32[$42 + 16 >> 2] = $43; //@line 2459
   }
   $46 = HEAP32[$$053 >> 2] | 0; //@line 2461
   $47 = $1 + 12 | 0; //@line 2462
   HEAP32[$47 >> 2] = $46; //@line 2463
   HEAP32[$46 + 16 >> 2] = $47; //@line 2465
   $$05157 = $$053; //@line 2466
  }
 } while (0);
 if ((label | 0) == 5) {
  HEAP32[$1 + 8 >> 2] = 0; //@line 2471
  $$0515859 = $$051$ph; //@line 2472
  label = 11; //@line 2473
 }
 if ((label | 0) == 11) {
  HEAP32[$1 + 12 >> 2] = 0; //@line 2477
  $$05157 = $$0515859; //@line 2478
 }
 HEAP32[$$05157 >> 2] = $1; //@line 2480
 HEAP32[$1 + 16 >> 2] = $$05157; //@line 2482
 $54 = HEAP32[$0 + 40 >> 2] | 0; //@line 2484
 if (!$54) {
  _equeue_mutex_unlock($24); //@line 2487
  return $13 | 0; //@line 2488
 }
 if (!(HEAP8[$0 + 36 >> 0] | 0)) {
  _equeue_mutex_unlock($24); //@line 2494
  return $13 | 0; //@line 2495
 }
 if ((HEAP32[$0 >> 2] | 0) != ($1 | 0)) {
  _equeue_mutex_unlock($24); //@line 2500
  return $13 | 0; //@line 2501
 }
 if (HEAP32[$1 + 12 >> 2] | 0) {
  _equeue_mutex_unlock($24); //@line 2507
  return $13 | 0; //@line 2508
 }
 $65 = HEAP32[$0 + 44 >> 2] | 0; //@line 2511
 $67 = (HEAP32[$14 >> 2] | 0) - $2 | 0; //@line 2513
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 2517
 FUNCTION_TABLE_vii[$54 & 31]($65, $67 & ~($67 >> 31)); //@line 2518
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 103; //@line 2521
  HEAP32[$AsyncCtx + 4 >> 2] = $24; //@line 2523
  HEAP32[$AsyncCtx + 8 >> 2] = $13; //@line 2525
  sp = STACKTOP; //@line 2526
  return 0; //@line 2527
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2529
 _equeue_mutex_unlock($24); //@line 2530
 return $13 | 0; //@line 2531
}
function _main__async_cb_29($0) {
 $0 = $0 | 0;
 var $$pre$i$i = 0, $10 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $24 = 0, $25 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 19136
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19138
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19140
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19142
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19146
 $$pre$i$i = HEAP32[HEAP32[$0 + 16 >> 2] >> 2] | 0; //@line 19147
 HEAP32[5475] = $$pre$i$i; //@line 19148
 if ($$pre$i$i | 0) {
  $14 = HEAP32[$$pre$i$i + 8 >> 2] | 0; //@line 19153
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 19154
  FUNCTION_TABLE_vi[$14 & 1023]($10); //@line 19155
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 652; //@line 19158
   $15 = $ReallocAsyncCtx4 + 4 | 0; //@line 19159
   HEAP32[$15 >> 2] = $10; //@line 19160
   $16 = $ReallocAsyncCtx4 + 8 | 0; //@line 19161
   HEAP32[$16 >> 2] = $2; //@line 19162
   $17 = $ReallocAsyncCtx4 + 12 | 0; //@line 19163
   HEAP32[$17 >> 2] = $4; //@line 19164
   $18 = $ReallocAsyncCtx4 + 16 | 0; //@line 19165
   HEAP32[$18 >> 2] = $6; //@line 19166
   sp = STACKTOP; //@line 19167
   return;
  }
  ___async_unwind = 0; //@line 19170
  HEAP32[$ReallocAsyncCtx4 >> 2] = 652; //@line 19171
  $15 = $ReallocAsyncCtx4 + 4 | 0; //@line 19172
  HEAP32[$15 >> 2] = $10; //@line 19173
  $16 = $ReallocAsyncCtx4 + 8 | 0; //@line 19174
  HEAP32[$16 >> 2] = $2; //@line 19175
  $17 = $ReallocAsyncCtx4 + 12 | 0; //@line 19176
  HEAP32[$17 >> 2] = $4; //@line 19177
  $18 = $ReallocAsyncCtx4 + 16 | 0; //@line 19178
  HEAP32[$18 >> 2] = $6; //@line 19179
  sp = STACKTOP; //@line 19180
  return;
 }
 __ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t(21880, 21888) | 0; //@line 19183
 if (__ZN16LoRaWANInterface25disable_adaptive_datarateEv(21880) | 0) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 19187
  _puts(14159) | 0; //@line 19188
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 653; //@line 19191
   sp = STACKTOP; //@line 19192
   return;
  }
  ___async_unwind = 0; //@line 19195
  HEAP32[$ReallocAsyncCtx6 >> 2] = 653; //@line 19196
  sp = STACKTOP; //@line 19197
  return;
 }
 __ZN16LoRaWANInterface12set_datarateEh(21880, 5) | 0; //@line 19200
 HEAP8[$2 >> 0] = 1; //@line 19201
 HEAP32[$2 + 8 >> 2] = 637604466; //@line 19203
 HEAP32[$2 + 12 >> 2] = 14193; //@line 19205
 HEAP32[$2 + 16 >> 2] = 14209; //@line 19207
 $24 = __ZN16LoRaWANInterface7connectERK15lorawan_connect(21880, $2) | 0; //@line 19208
 switch ($24 | 0) {
 case 0:
 case -1016:
  {
   break;
  }
 default:
  {
   HEAP32[$4 >> 2] = $24; //@line 19214
   _printf(14225, $4) | 0; //@line 19215
   HEAP32[___async_retval >> 2] = -1; //@line 19217
   return;
  }
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 19221
 _puts(14254) | 0; //@line 19222
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 654; //@line 19225
  $25 = $ReallocAsyncCtx5 + 4 | 0; //@line 19226
  HEAP32[$25 >> 2] = $2; //@line 19227
  sp = STACKTOP; //@line 19228
  return;
 }
 ___async_unwind = 0; //@line 19231
 HEAP32[$ReallocAsyncCtx5 >> 2] = 654; //@line 19232
 $25 = $ReallocAsyncCtx5 + 4 | 0; //@line 19233
 HEAP32[$25 >> 2] = $2; //@line 19234
 sp = STACKTOP; //@line 19235
 return;
}
function __ZN12LoRaWANStack17send_frame_to_macEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$pre$phiZ2D = 0, $$sink2$sink = 0, $1 = 0, $14 = 0, $2 = 0, $32 = 0, $4 = 0, $46 = 0, $54 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6377
 STACKTOP = STACKTOP + 32 | 0; //@line 6378
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 6378
 $1 = sp + 16 | 0; //@line 6379
 $2 = sp; //@line 6380
 $4 = HEAP32[$0 + 1968 >> 2] | 0; //@line 6382
 HEAP32[$1 >> 2] = $4; //@line 6383
 L1 : do {
  switch ($4 | 0) {
  case 0:
   {
    HEAP32[$1 + 8 >> 2] = $0 + 1975; //@line 6389
    HEAP16[$1 + 12 >> 1] = HEAP16[$0 + 2230 >> 1] | 0; //@line 6393
    HEAP8[$1 + 4 >> 0] = HEAP8[$0 + 1972 >> 0] | 0; //@line 6397
    HEAP8[$1 + 6 >> 0] = 1; //@line 6399
    HEAP32[$2 >> 2] = 21; //@line 6400
    $14 = $0 + 4 | 0; //@line 6401
    if (!(__ZN7LoRaMac23mib_get_request_confirmEP25loramac_mib_req_confirm_t($14, $2) | 0)) {
     $$pre$phiZ2D = $14; //@line 6407
     $$sink2$sink = HEAP8[$2 + 4 >> 0] | 0; //@line 6407
     break L1;
    } else {
     $$pre$phiZ2D = $14; //@line 6412
     $$sink2$sink = __ZN7LoRaPHY23get_default_tx_datarateEv($0 + 1336 | 0) | 0; //@line 6412
     break L1;
    }
    break;
   }
  case 1:
   {
    HEAP32[$1 + 8 >> 2] = $0 + 1975; //@line 6420
    HEAP16[$1 + 12 >> 1] = HEAP16[$0 + 2230 >> 1] | 0; //@line 6424
    HEAP8[$1 + 4 >> 0] = HEAP8[$0 + 1972 >> 0] | 0; //@line 6428
    HEAP8[$1 + 6 >> 0] = HEAP8[$0 + 1974 >> 0] | 0; //@line 6432
    HEAP32[$2 >> 2] = 21; //@line 6433
    $32 = $0 + 4 | 0; //@line 6434
    if (!(__ZN7LoRaMac23mib_get_request_confirmEP25loramac_mib_req_confirm_t($32, $2) | 0)) {
     $$pre$phiZ2D = $32; //@line 6440
     $$sink2$sink = HEAP8[$2 + 4 >> 0] | 0; //@line 6440
     break L1;
    } else {
     $$pre$phiZ2D = $32; //@line 6445
     $$sink2$sink = __ZN7LoRaPHY23get_default_tx_datarateEv($0 + 1336 | 0) | 0; //@line 6445
     break L1;
    }
    break;
   }
  case 3:
   {
    HEAP32[$1 + 8 >> 2] = $0 + 1975; //@line 6453
    HEAP16[$1 + 12 >> 1] = HEAP16[$0 + 2230 >> 1] | 0; //@line 6457
    HEAP8[$1 + 4 >> 0] = 0; //@line 6459
    HEAP8[$1 + 6 >> 0] = 1; //@line 6461
    HEAP32[$2 >> 2] = 21; //@line 6462
    $46 = $0 + 4 | 0; //@line 6463
    if (!(__ZN7LoRaMac23mib_get_request_confirmEP25loramac_mib_req_confirm_t($46, $2) | 0)) {
     $$pre$phiZ2D = $46; //@line 6469
     $$sink2$sink = HEAP8[$2 + 4 >> 0] | 0; //@line 6469
     break L1;
    } else {
     $$pre$phiZ2D = $46; //@line 6474
     $$sink2$sink = __ZN7LoRaPHY23get_default_tx_datarateEv($0 + 1336 | 0) | 0; //@line 6474
     break L1;
    }
    break;
   }
  default:
   {
    $$0 = -1002; //@line 6480
    STACKTOP = sp; //@line 6481
    return $$0 | 0; //@line 6481
   }
  }
 } while (0);
 HEAP8[$1 + 5 >> 0] = $$sink2$sink; //@line 6486
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 6487
 $54 = __ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t($$pre$phiZ2D, $1) | 0; //@line 6488
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 214; //@line 6491
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 6493
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 6495
  sp = STACKTOP; //@line 6496
  STACKTOP = sp; //@line 6497
  return 0; //@line 6497
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 6499
 $$0 = $54; //@line 6500
 STACKTOP = sp; //@line 6501
 return $$0 | 0; //@line 6501
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $12 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $29 = 0, $3 = 0, $36 = 0, $39 = 0, $40 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx14 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, sp = 0;
 sp = STACKTOP; //@line 14724
 STACKTOP = STACKTOP + 48 | 0; //@line 14725
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 14725
 $vararg_buffer10 = sp + 32 | 0; //@line 14726
 $vararg_buffer7 = sp + 24 | 0; //@line 14727
 $vararg_buffer3 = sp + 16 | 0; //@line 14728
 $vararg_buffer = sp; //@line 14729
 $0 = sp + 36 | 0; //@line 14730
 $1 = ___cxa_get_globals_fast() | 0; //@line 14731
 if ($1 | 0) {
  $3 = HEAP32[$1 >> 2] | 0; //@line 14734
  if ($3 | 0) {
   $7 = $3 + 48 | 0; //@line 14739
   $9 = HEAP32[$7 >> 2] | 0; //@line 14741
   $12 = HEAP32[$7 + 4 >> 2] | 0; //@line 14744
   if (!(($9 & -256 | 0) == 1126902528 & ($12 | 0) == 1129074247)) {
    HEAP32[$vararg_buffer7 >> 2] = 17248; //@line 14750
    _abort_message(17198, $vararg_buffer7); //@line 14751
   }
   if (($9 | 0) == 1126902529 & ($12 | 0) == 1129074247) {
    $22 = HEAP32[$3 + 44 >> 2] | 0; //@line 14760
   } else {
    $22 = $3 + 80 | 0; //@line 14762
   }
   HEAP32[$0 >> 2] = $22; //@line 14764
   $23 = HEAP32[$3 >> 2] | 0; //@line 14765
   $25 = HEAP32[$23 + 4 >> 2] | 0; //@line 14767
   $28 = HEAP32[(HEAP32[110] | 0) + 16 >> 2] | 0; //@line 14770
   $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 14771
   $29 = FUNCTION_TABLE_iiii[$28 & 15](440, $23, $0) | 0; //@line 14772
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 682; //@line 14775
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 14777
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer3; //@line 14779
    HEAP32[$AsyncCtx + 12 >> 2] = $25; //@line 14781
    HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer3; //@line 14783
    HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer; //@line 14785
    HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer; //@line 14787
    sp = STACKTOP; //@line 14788
    STACKTOP = sp; //@line 14789
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 14791
   if (!$29) {
    HEAP32[$vararg_buffer3 >> 2] = 17248; //@line 14793
    HEAP32[$vararg_buffer3 + 4 >> 2] = $25; //@line 14795
    _abort_message(17157, $vararg_buffer3); //@line 14796
   }
   $36 = HEAP32[$0 >> 2] | 0; //@line 14799
   $39 = HEAP32[(HEAP32[$36 >> 2] | 0) + 8 >> 2] | 0; //@line 14802
   $AsyncCtx14 = _emscripten_alloc_async_context(16, sp) | 0; //@line 14803
   $40 = FUNCTION_TABLE_ii[$39 & 15]($36) | 0; //@line 14804
   if (___async) {
    HEAP32[$AsyncCtx14 >> 2] = 683; //@line 14807
    HEAP32[$AsyncCtx14 + 4 >> 2] = $vararg_buffer; //@line 14809
    HEAP32[$AsyncCtx14 + 8 >> 2] = $25; //@line 14811
    HEAP32[$AsyncCtx14 + 12 >> 2] = $vararg_buffer; //@line 14813
    sp = STACKTOP; //@line 14814
    STACKTOP = sp; //@line 14815
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 14817
    HEAP32[$vararg_buffer >> 2] = 17248; //@line 14818
    HEAP32[$vararg_buffer + 4 >> 2] = $25; //@line 14820
    HEAP32[$vararg_buffer + 8 >> 2] = $40; //@line 14822
    _abort_message(17112, $vararg_buffer); //@line 14823
   }
  }
 }
 _abort_message(17236, $vararg_buffer10); //@line 14828
}
function __ZN18LoRaMacChannelPlan11remove_planEv($0) {
 $0 = $0 | 0;
 var $10 = 0, $21 = 0, $24 = 0, $26 = 0, $32 = 0, $39 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $indvars$iv = 0, $indvars$iv$next = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 16731
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
  $39 = -1002; //@line 16735
  return $39 | 0; //@line 16736
 }
 $4 = __ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0; //@line 16739
 $6 = __ZN7LoRaPHY16get_channel_maskEb(HEAP32[$0 >> 2] | 0, 0) | 0; //@line 16741
 $8 = __ZN7LoRaPHY16get_channel_maskEb(HEAP32[$0 >> 2] | 0, 1) | 0; //@line 16743
 if (!($4 << 24 >> 24)) {
  $39 = 0; //@line 16746
  return $39 | 0; //@line 16747
 }
 $10 = $4 & 255; //@line 16749
 $indvars$iv = 0; //@line 16750
 while (1) {
  if (!(__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$0 >> 2] | 0, $8, $indvars$iv) | 0)) {
   if (__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$0 >> 2] | 0, $6, $indvars$iv) | 0) {
    if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
     $39 = -1002; //@line 16761
     label = 15; //@line 16762
     break;
    }
    if ($indvars$iv >>> 0 >= ((__ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0) & 255) >>> 0) {
     $39 = -1003; //@line 16770
     label = 15; //@line 16771
     break;
    }
    $21 = HEAP32[$0 >> 2] | 0; //@line 16774
    $24 = HEAP32[(HEAP32[$21 >> 2] | 0) + 64 >> 2] | 0; //@line 16777
    $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 16779
    $26 = FUNCTION_TABLE_iii[$24 & 31]($21, $indvars$iv & 255) | 0; //@line 16780
    if (___async) {
     label = 9; //@line 16783
     break;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 16786
    if (!$26) {
     $39 = -1003; //@line 16788
     label = 15; //@line 16789
     break;
    }
    $32 = HEAP32[$0 >> 2] | 0; //@line 16792
    $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 16793
    __ZN7LoRaPHY18put_radio_to_sleepEv($32); //@line 16794
    if (___async) {
     label = 12; //@line 16797
     break;
    }
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 16800
   }
  }
  $indvars$iv$next = $indvars$iv + 1 | 0; //@line 16803
  if ($indvars$iv$next >>> 0 < $10 >>> 0) {
   $indvars$iv = $indvars$iv$next; //@line 16806
  } else {
   $39 = 0; //@line 16808
   label = 15; //@line 16809
   break;
  }
 }
 if ((label | 0) == 9) {
  HEAP32[$AsyncCtx >> 2] = 483; //@line 16814
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 16816
  HEAP32[$AsyncCtx + 8 >> 2] = $indvars$iv; //@line 16818
  HEAP32[$AsyncCtx + 12 >> 2] = $10; //@line 16820
  HEAP32[$AsyncCtx + 16 >> 2] = $8; //@line 16822
  HEAP32[$AsyncCtx + 20 >> 2] = $6; //@line 16824
  sp = STACKTOP; //@line 16825
  return 0; //@line 16826
 } else if ((label | 0) == 12) {
  HEAP32[$AsyncCtx2 >> 2] = 484; //@line 16829
  HEAP32[$AsyncCtx2 + 4 >> 2] = $indvars$iv; //@line 16831
  HEAP32[$AsyncCtx2 + 8 >> 2] = $10; //@line 16833
  HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 16835
  HEAP32[$AsyncCtx2 + 16 >> 2] = $8; //@line 16837
  HEAP32[$AsyncCtx2 + 20 >> 2] = $6; //@line 16839
  sp = STACKTOP; //@line 16840
  return 0; //@line 16841
 } else if ((label | 0) == 15) {
  return $39 | 0; //@line 16844
 }
 return 0; //@line 16846
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_219($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $23 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 3040
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3044
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3046
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3048
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3050
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 3052
 $12 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 3053
 if ($12 | 0) {
  $15 = HEAP32[$12 + 8 >> 2] | 0; //@line 3057
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 3058
  FUNCTION_TABLE_vi[$15 & 1023]($4); //@line 3059
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 141; //@line 3062
   $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 3063
   HEAP32[$16 >> 2] = $AsyncRetVal; //@line 3064
   $17 = $ReallocAsyncCtx4 + 8 | 0; //@line 3065
   HEAP32[$17 >> 2] = $6; //@line 3066
   $18 = $ReallocAsyncCtx4 + 12 | 0; //@line 3067
   HEAP32[$18 >> 2] = $8; //@line 3068
   $19 = $ReallocAsyncCtx4 + 16 | 0; //@line 3069
   HEAP32[$19 >> 2] = $10; //@line 3070
   sp = STACKTOP; //@line 3071
   return;
  }
  ___async_unwind = 0; //@line 3074
  HEAP32[$ReallocAsyncCtx4 >> 2] = 141; //@line 3075
  $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 3076
  HEAP32[$16 >> 2] = $AsyncRetVal; //@line 3077
  $17 = $ReallocAsyncCtx4 + 8 | 0; //@line 3078
  HEAP32[$17 >> 2] = $6; //@line 3079
  $18 = $ReallocAsyncCtx4 + 12 | 0; //@line 3080
  HEAP32[$18 >> 2] = $8; //@line 3081
  $19 = $ReallocAsyncCtx4 + 16 | 0; //@line 3082
  HEAP32[$19 >> 2] = $10; //@line 3083
  sp = STACKTOP; //@line 3084
  return;
 }
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(16) | 0; //@line 3089
  _mbed_assert_internal(12025, 11293, 899); //@line 3090
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 142; //@line 3093
   $21 = $ReallocAsyncCtx9 + 4 | 0; //@line 3094
   HEAP32[$21 >> 2] = $6; //@line 3095
   $22 = $ReallocAsyncCtx9 + 8 | 0; //@line 3096
   HEAP32[$22 >> 2] = $8; //@line 3097
   $23 = $ReallocAsyncCtx9 + 12 | 0; //@line 3098
   HEAP32[$23 >> 2] = $10; //@line 3099
   sp = STACKTOP; //@line 3100
   return;
  }
  ___async_unwind = 0; //@line 3103
  HEAP32[$ReallocAsyncCtx9 >> 2] = 142; //@line 3104
  $21 = $ReallocAsyncCtx9 + 4 | 0; //@line 3105
  HEAP32[$21 >> 2] = $6; //@line 3106
  $22 = $ReallocAsyncCtx9 + 8 | 0; //@line 3107
  HEAP32[$22 >> 2] = $8; //@line 3108
  $23 = $ReallocAsyncCtx9 + 12 | 0; //@line 3109
  HEAP32[$23 >> 2] = $10; //@line 3110
  sp = STACKTOP; //@line 3111
  return;
 }
 if (!(HEAP8[$6 + 11 >> 0] | 0)) {
  return;
 }
 $27 = HEAP8[$8 >> 0] | 0; //@line 3120
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 3121
 __ZN12LoRaWANStack9handle_txEhPKhth($10, $27, 0, 0, 2) | 0; //@line 3122
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 143; //@line 3125
  sp = STACKTOP; //@line 3126
  return;
 }
 ___async_unwind = 0; //@line 3129
 HEAP32[$ReallocAsyncCtx6 >> 2] = 143; //@line 3130
 sp = STACKTOP; //@line 3131
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_182($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 32909
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32911
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32913
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32915
 $11 = $4 + 1880 | 0; //@line 32920
 $12 = $4 + 1892 | 0; //@line 32921
 $13 = HEAP32[$12 >> 2] | 0; //@line 32922
 $14 = ($13 | 0) != 0; //@line 32923
 if ((HEAP32[HEAP32[$0 + 16 >> 2] >> 2] | 0) == 2) {
  if (!$14) {
   return;
  }
  $16 = HEAP32[$4 + 2288 >> 2] | 0; //@line 32929
  $18 = HEAP32[$13 + 4 >> 2] | 0; //@line 32931
  $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 32932
  FUNCTION_TABLE_vii[$18 & 31]($2, $11); //@line 32933
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 122; //@line 32936
   $19 = $ReallocAsyncCtx + 4 | 0; //@line 32937
   HEAP32[$19 >> 2] = $12; //@line 32938
   $20 = $ReallocAsyncCtx + 8 | 0; //@line 32939
   HEAP32[$20 >> 2] = $2; //@line 32940
   $21 = $ReallocAsyncCtx + 12 | 0; //@line 32941
   HEAP32[$21 >> 2] = $16; //@line 32942
   $22 = $ReallocAsyncCtx + 16 | 0; //@line 32943
   HEAP32[$22 >> 2] = $2; //@line 32944
   sp = STACKTOP; //@line 32945
   return;
  }
  ___async_unwind = 0; //@line 32948
  HEAP32[$ReallocAsyncCtx >> 2] = 122; //@line 32949
  $19 = $ReallocAsyncCtx + 4 | 0; //@line 32950
  HEAP32[$19 >> 2] = $12; //@line 32951
  $20 = $ReallocAsyncCtx + 8 | 0; //@line 32952
  HEAP32[$20 >> 2] = $2; //@line 32953
  $21 = $ReallocAsyncCtx + 12 | 0; //@line 32954
  HEAP32[$21 >> 2] = $16; //@line 32955
  $22 = $ReallocAsyncCtx + 16 | 0; //@line 32956
  HEAP32[$22 >> 2] = $2; //@line 32957
  sp = STACKTOP; //@line 32958
  return;
 } else {
  if (!$14) {
   return;
  }
  $24 = HEAP32[$4 + 2288 >> 2] | 0; //@line 32965
  $26 = HEAP32[$13 + 4 >> 2] | 0; //@line 32967
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 32968
  FUNCTION_TABLE_vii[$26 & 31]($6, $11); //@line 32969
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 126; //@line 32972
   $27 = $ReallocAsyncCtx3 + 4 | 0; //@line 32973
   HEAP32[$27 >> 2] = $12; //@line 32974
   $28 = $ReallocAsyncCtx3 + 8 | 0; //@line 32975
   HEAP32[$28 >> 2] = $6; //@line 32976
   $29 = $ReallocAsyncCtx3 + 12 | 0; //@line 32977
   HEAP32[$29 >> 2] = $24; //@line 32978
   $30 = $ReallocAsyncCtx3 + 16 | 0; //@line 32979
   HEAP32[$30 >> 2] = $6; //@line 32980
   sp = STACKTOP; //@line 32981
   return;
  }
  ___async_unwind = 0; //@line 32984
  HEAP32[$ReallocAsyncCtx3 >> 2] = 126; //@line 32985
  $27 = $ReallocAsyncCtx3 + 4 | 0; //@line 32986
  HEAP32[$27 >> 2] = $12; //@line 32987
  $28 = $ReallocAsyncCtx3 + 8 | 0; //@line 32988
  HEAP32[$28 >> 2] = $6; //@line 32989
  $29 = $ReallocAsyncCtx3 + 12 | 0; //@line 32990
  HEAP32[$29 >> 2] = $24; //@line 32991
  $30 = $ReallocAsyncCtx3 + 16 | 0; //@line 32992
  HEAP32[$30 >> 2] = $6; //@line 32993
  sp = STACKTOP; //@line 32994
  return;
 }
}
function __Z22compute_join_frame_micPKhtS0_Pj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $12 = 0, $19 = 0, $22 = 0, $4 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 19022
 _mbedtls_cipher_init(21244); //@line 19023
 $4 = _mbedtls_cipher_info_from_type(2) | 0; //@line 19024
 if (!$4) {
  $$0 = -24960; //@line 19027
 } else {
  $AsyncCtx11 = _emscripten_alloc_async_context(20, sp) | 0; //@line 19029
  $6 = _mbedtls_cipher_setup(21244, $4) | 0; //@line 19030
  if (___async) {
   HEAP32[$AsyncCtx11 >> 2] = 498; //@line 19033
   HEAP32[$AsyncCtx11 + 4 >> 2] = $2; //@line 19035
   HEAP16[$AsyncCtx11 + 8 >> 1] = $1; //@line 19037
   HEAP32[$AsyncCtx11 + 12 >> 2] = $0; //@line 19039
   HEAP32[$AsyncCtx11 + 16 >> 2] = $3; //@line 19041
   sp = STACKTOP; //@line 19042
   return 0; //@line 19043
  }
  _emscripten_free_async_context($AsyncCtx11 | 0); //@line 19045
  if (!$6) {
   $AsyncCtx7 = _emscripten_alloc_async_context(16, sp) | 0; //@line 19048
   $12 = _mbedtls_cipher_cmac_starts(21244, $2, 128) | 0; //@line 19049
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 499; //@line 19052
    HEAP16[$AsyncCtx7 + 4 >> 1] = $1; //@line 19054
    HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 19056
    HEAP32[$AsyncCtx7 + 12 >> 2] = $3; //@line 19058
    sp = STACKTOP; //@line 19059
    return 0; //@line 19060
   }
   _emscripten_free_async_context($AsyncCtx7 | 0); //@line 19062
   if (!$12) {
    $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 19067
    $19 = _mbedtls_cipher_cmac_update(21244, $0, $1 & 255) | 0; //@line 19068
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 500; //@line 19071
     HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 19073
     sp = STACKTOP; //@line 19074
     return 0; //@line 19075
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 19077
    if (!$19) {
     $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 19080
     $22 = _mbedtls_cipher_cmac_finish(21244, 22552) | 0; //@line 19081
     if (___async) {
      HEAP32[$AsyncCtx3 >> 2] = 501; //@line 19084
      HEAP32[$AsyncCtx3 + 4 >> 2] = $3; //@line 19086
      sp = STACKTOP; //@line 19087
      return 0; //@line 19088
     }
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 19090
     if (!$22) {
      HEAP32[$3 >> 2] = (HEAPU8[22554] | 0) << 16 | (HEAPU8[22555] | 0) << 24 | (HEAPU8[22553] | 0) << 8 | (HEAPU8[22552] | 0); //@line 19107
      $$0 = 0; //@line 19108
     } else {
      $$0 = $22; //@line 19110
     }
    } else {
     $$0 = $19; //@line 19113
    }
   } else {
    $$0 = $12; //@line 19116
   }
  } else {
   $$0 = $6; //@line 19119
  }
 }
 $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 19122
 _mbedtls_cipher_free(21244); //@line 19123
 if (___async) {
  HEAP32[$AsyncCtx15 >> 2] = 502; //@line 19126
  HEAP32[$AsyncCtx15 + 4 >> 2] = $$0; //@line 19128
  sp = STACKTOP; //@line 19129
  return 0; //@line 19130
 } else {
  _emscripten_free_async_context($AsyncCtx15 | 0); //@line 19132
  return $$0 | 0; //@line 19133
 }
 return 0; //@line 19135
}
function ___stdio_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $12 = 0, $13 = 0, $17 = 0, $20 = 0, $25 = 0, $27 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $44 = 0, $5 = 0, $7 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10391
 STACKTOP = STACKTOP + 48 | 0; //@line 10392
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 10392
 $vararg_buffer3 = sp + 16 | 0; //@line 10393
 $vararg_buffer = sp; //@line 10394
 $3 = sp + 32 | 0; //@line 10395
 $4 = $0 + 28 | 0; //@line 10396
 $5 = HEAP32[$4 >> 2] | 0; //@line 10397
 HEAP32[$3 >> 2] = $5; //@line 10398
 $7 = $0 + 20 | 0; //@line 10400
 $9 = (HEAP32[$7 >> 2] | 0) - $5 | 0; //@line 10402
 HEAP32[$3 + 4 >> 2] = $9; //@line 10403
 HEAP32[$3 + 8 >> 2] = $1; //@line 10405
 HEAP32[$3 + 12 >> 2] = $2; //@line 10407
 $12 = $9 + $2 | 0; //@line 10408
 $13 = $0 + 60 | 0; //@line 10409
 HEAP32[$vararg_buffer >> 2] = HEAP32[$13 >> 2]; //@line 10412
 HEAP32[$vararg_buffer + 4 >> 2] = $3; //@line 10414
 HEAP32[$vararg_buffer + 8 >> 2] = 2; //@line 10416
 $17 = ___syscall_ret(___syscall146(146, $vararg_buffer | 0) | 0) | 0; //@line 10418
 L1 : do {
  if (($12 | 0) == ($17 | 0)) {
   label = 3; //@line 10422
  } else {
   $$04756 = 2; //@line 10424
   $$04855 = $12; //@line 10424
   $$04954 = $3; //@line 10424
   $27 = $17; //@line 10424
   while (1) {
    if (($27 | 0) < 0) {
     break;
    }
    $$04855 = $$04855 - $27 | 0; //@line 10430
    $37 = HEAP32[$$04954 + 4 >> 2] | 0; //@line 10432
    $38 = $27 >>> 0 > $37 >>> 0; //@line 10433
    $$150 = $38 ? $$04954 + 8 | 0 : $$04954; //@line 10435
    $$1 = $$04756 + ($38 << 31 >> 31) | 0; //@line 10437
    $$0 = $27 - ($38 ? $37 : 0) | 0; //@line 10439
    HEAP32[$$150 >> 2] = (HEAP32[$$150 >> 2] | 0) + $$0; //@line 10442
    $44 = $$150 + 4 | 0; //@line 10443
    HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) - $$0; //@line 10446
    HEAP32[$vararg_buffer3 >> 2] = HEAP32[$13 >> 2]; //@line 10449
    HEAP32[$vararg_buffer3 + 4 >> 2] = $$150; //@line 10451
    HEAP32[$vararg_buffer3 + 8 >> 2] = $$1; //@line 10453
    $27 = ___syscall_ret(___syscall146(146, $vararg_buffer3 | 0) | 0) | 0; //@line 10455
    if (($$04855 | 0) == ($27 | 0)) {
     label = 3; //@line 10458
     break L1;
    } else {
     $$04756 = $$1; //@line 10461
     $$04954 = $$150; //@line 10461
    }
   }
   HEAP32[$0 + 16 >> 2] = 0; //@line 10465
   HEAP32[$4 >> 2] = 0; //@line 10466
   HEAP32[$7 >> 2] = 0; //@line 10467
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 32; //@line 10470
   if (($$04756 | 0) == 2) {
    $$051 = 0; //@line 10473
   } else {
    $$051 = $2 - (HEAP32[$$04954 + 4 >> 2] | 0) | 0; //@line 10478
   }
  }
 } while (0);
 if ((label | 0) == 3) {
  $20 = HEAP32[$0 + 44 >> 2] | 0; //@line 10484
  HEAP32[$0 + 16 >> 2] = $20 + (HEAP32[$0 + 48 >> 2] | 0); //@line 10489
  $25 = $20; //@line 10490
  HEAP32[$4 >> 2] = $25; //@line 10491
  HEAP32[$7 >> 2] = $25; //@line 10492
  $$051 = $2; //@line 10493
 }
 STACKTOP = sp; //@line 10495
 return $$051 | 0; //@line 10495
}
function __ZN18LoRaMacChannelPlan11remove_planEv__async_cb_248($0) {
 $0 = $0 | 0;
 var $10 = 0, $21 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $34 = 0, $35 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $indvars$iv$reg2mem$0 = 0, label = 0, sp = 0, $indvars$iv$reg2mem$0$looptemp = 0;
 sp = STACKTOP; //@line 4725
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4729
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4731
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4733
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 4735
 $indvars$iv$reg2mem$0 = HEAP32[$0 + 4 >> 2] | 0; //@line 4736
 while (1) {
  $indvars$iv$reg2mem$0$looptemp = $indvars$iv$reg2mem$0;
  $indvars$iv$reg2mem$0 = $indvars$iv$reg2mem$0 + 1 | 0; //@line 4738
  if ($indvars$iv$reg2mem$0 >>> 0 >= $4 >>> 0) {
   $35 = 0; //@line 4741
   label = 11; //@line 4742
   break;
  }
  if (__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$6 >> 2] | 0, $8, $indvars$iv$reg2mem$0) | 0) {
   $indvars$iv$reg2mem$0 = $indvars$iv$reg2mem$0; //@line 4748
   continue;
  }
  if (__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$6 >> 2] | 0, $10, $indvars$iv$reg2mem$0) | 0) {
   break;
  }
 }
 if ((label | 0) == 11) {
  $34 = ___async_retval; //@line 4760
  HEAP32[$34 >> 2] = $35; //@line 4761
  return;
 }
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$6 >> 2] | 0) | 0)) {
  $35 = -1002; //@line 4767
  $34 = ___async_retval; //@line 4768
  HEAP32[$34 >> 2] = $35; //@line 4769
  return;
 }
 if ($indvars$iv$reg2mem$0 >>> 0 >= ((__ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$6 >> 2] | 0) | 0) & 255) >>> 0) {
  $35 = -1003; //@line 4777
  $34 = ___async_retval; //@line 4778
  HEAP32[$34 >> 2] = $35; //@line 4779
  return;
 }
 $21 = HEAP32[$6 >> 2] | 0; //@line 4782
 $24 = HEAP32[(HEAP32[$21 >> 2] | 0) + 64 >> 2] | 0; //@line 4785
 $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 4787
 $26 = FUNCTION_TABLE_iii[$24 & 31]($21, $indvars$iv$reg2mem$0 & 255) | 0; //@line 4788
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 483; //@line 4791
  $27 = $ReallocAsyncCtx + 4 | 0; //@line 4792
  HEAP32[$27 >> 2] = $6; //@line 4793
  $28 = $ReallocAsyncCtx + 8 | 0; //@line 4794
  HEAP32[$28 >> 2] = $indvars$iv$reg2mem$0; //@line 4795
  $29 = $ReallocAsyncCtx + 12 | 0; //@line 4796
  HEAP32[$29 >> 2] = $4; //@line 4797
  $30 = $ReallocAsyncCtx + 16 | 0; //@line 4798
  HEAP32[$30 >> 2] = $8; //@line 4799
  $31 = $ReallocAsyncCtx + 20 | 0; //@line 4800
  HEAP32[$31 >> 2] = $10; //@line 4801
  sp = STACKTOP; //@line 4802
  return;
 }
 HEAP8[___async_retval >> 0] = $26 & 1; //@line 4807
 ___async_unwind = 0; //@line 4808
 HEAP32[$ReallocAsyncCtx >> 2] = 483; //@line 4809
 $27 = $ReallocAsyncCtx + 4 | 0; //@line 4810
 HEAP32[$27 >> 2] = $6; //@line 4811
 $28 = $ReallocAsyncCtx + 8 | 0; //@line 4812
 HEAP32[$28 >> 2] = $indvars$iv$reg2mem$0; //@line 4813
 $29 = $ReallocAsyncCtx + 12 | 0; //@line 4814
 HEAP32[$29 >> 2] = $4; //@line 4815
 $30 = $ReallocAsyncCtx + 16 | 0; //@line 4816
 HEAP32[$30 >> 2] = $8; //@line 4817
 $31 = $ReallocAsyncCtx + 20 | 0; //@line 4818
 HEAP32[$31 >> 2] = $10; //@line 4819
 sp = STACKTOP; //@line 4820
 return;
}
function __ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_436($0) {
 $0 = $0 | 0;
 var $16 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $29 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $6 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 32282
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32284
 HEAP32[$2 + 364 >> 2] = 0; //@line 32286
 $6 = $2 + 1160 | 0; //@line 32289
 HEAP8[$6 >> 0] = HEAP8[$2 + 378 >> 0] | 0; //@line 32290
 HEAP8[$2 + 1163 >> 0] = HEAP8[$2 + 1129 >> 0] | 0; //@line 32294
 HEAP8[$2 + 1176 >> 0] = HEAP8[$2 + 1141 >> 0] | 0; //@line 32298
 HEAP8[$2 + 1177 >> 0] = HEAP8[$2 + 369 >> 0] | 0; //@line 32302
 $16 = $2 + 1178 | 0; //@line 32303
 HEAP8[$16 >> 0] = 0; //@line 32304
 HEAP32[$2 + 1180 >> 2] = 0; //@line 32306
 if ((HEAP32[$2 + 360 >> 2] | 0) == 2) {
  $21 = HEAP32[$2 >> 2] | 0; //@line 32311
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 32312
  __ZN7LoRaPHY20put_radio_to_standbyEv($21); //@line 32313
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 418; //@line 32316
   $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 32317
   HEAP32[$22 >> 2] = $2; //@line 32318
   $23 = $ReallocAsyncCtx3 + 8 | 0; //@line 32319
   HEAP32[$23 >> 2] = $2; //@line 32320
   $24 = $ReallocAsyncCtx3 + 12 | 0; //@line 32321
   HEAP32[$24 >> 2] = $6; //@line 32322
   $25 = $ReallocAsyncCtx3 + 16 | 0; //@line 32323
   HEAP32[$25 >> 2] = $16; //@line 32324
   sp = STACKTOP; //@line 32325
   return;
  }
  ___async_unwind = 0; //@line 32328
  HEAP32[$ReallocAsyncCtx3 >> 2] = 418; //@line 32329
  $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 32330
  HEAP32[$22 >> 2] = $2; //@line 32331
  $23 = $ReallocAsyncCtx3 + 8 | 0; //@line 32332
  HEAP32[$23 >> 2] = $2; //@line 32333
  $24 = $ReallocAsyncCtx3 + 12 | 0; //@line 32334
  HEAP32[$24 >> 2] = $6; //@line 32335
  $25 = $ReallocAsyncCtx3 + 16 | 0; //@line 32336
  HEAP32[$25 >> 2] = $16; //@line 32337
  sp = STACKTOP; //@line 32338
  return;
 } else {
  $26 = HEAP32[$2 >> 2] | 0; //@line 32341
  $29 = HEAP32[(HEAP32[$26 >> 2] | 0) + 24 >> 2] | 0; //@line 32344
  $32 = (__ZN11LoRaMacMcps14get_indicationEv($2 + 288 | 0) | 0) + 10 | 0; //@line 32347
  $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 32348
  FUNCTION_TABLE_iiii[$29 & 15]($26, $6, $32) | 0; //@line 32349
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 419; //@line 32352
   $33 = $ReallocAsyncCtx + 4 | 0; //@line 32353
   HEAP32[$33 >> 2] = $16; //@line 32354
   $34 = $ReallocAsyncCtx + 8 | 0; //@line 32355
   HEAP32[$34 >> 2] = $2; //@line 32356
   $35 = $ReallocAsyncCtx + 12 | 0; //@line 32357
   HEAP32[$35 >> 2] = $2; //@line 32358
   sp = STACKTOP; //@line 32359
   return;
  }
  ___async_unwind = 0; //@line 32362
  HEAP32[$ReallocAsyncCtx >> 2] = 419; //@line 32363
  $33 = $ReallocAsyncCtx + 4 | 0; //@line 32364
  HEAP32[$33 >> 2] = $16; //@line 32365
  $34 = $ReallocAsyncCtx + 8 | 0; //@line 32366
  HEAP32[$34 >> 2] = $2; //@line 32367
  $35 = $ReallocAsyncCtx + 12 | 0; //@line 32368
  HEAP32[$35 >> 2] = $2; //@line 32369
  sp = STACKTOP; //@line 32370
  return;
 }
}
function __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy = 0, $18 = 0, $19 = 0, $2 = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 15786
 STACKTOP = STACKTOP + 16 | 0; //@line 15787
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15787
 $$byval_copy = sp + 8 | 0; //@line 15788
 $2 = sp; //@line 15789
 $4 = $0 + 360 | 0; //@line 15791
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 15792
 $5 = __ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params($0 + 348 | 0, $1, $4) | 0; //@line 15793
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 460; //@line 15796
  HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 15798
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 15800
  HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 15802
  HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 15804
  sp = STACKTOP; //@line 15805
  STACKTOP = sp; //@line 15806
  return 0; //@line 15806
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 15808
 if ($5 | 0) {
  STACKTOP = sp; //@line 15811
  return $5 | 0; //@line 15811
 }
 if ((HEAP32[$4 >> 2] | 0) != 2) {
  STACKTOP = sp; //@line 15816
  return $5 | 0; //@line 15816
 }
 switch (HEAP32[$1 >> 2] | 0) {
 case 0:
  {
   break;
  }
 case 10:
  {
   label = 6; //@line 15824
   break;
  }
 default:
  {
   STACKTOP = sp; //@line 15828
   return $5 | 0; //@line 15828
  }
 }
 if ((label | 0) == 6) {
  if (!(HEAP8[$0 + 372 >> 0] | 0)) {
   STACKTOP = sp; //@line 15836
   return $5 | 0; //@line 15836
  }
 }
 $18 = HEAP32[$0 + 1328 >> 2] | 0; //@line 15840
 HEAP32[$2 >> 2] = 273; //@line 15841
 HEAP32[$2 + 4 >> 2] = 0; //@line 15843
 $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 15844
 HEAP32[$$byval_copy >> 2] = HEAP32[$2 >> 2]; //@line 15845
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 15845
 $19 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($18, $0, $$byval_copy) | 0; //@line 15846
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 461; //@line 15849
  HEAP32[$AsyncCtx3 + 4 >> 2] = $2; //@line 15851
  HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 15853
  HEAP32[$AsyncCtx3 + 12 >> 2] = $5; //@line 15855
  sp = STACKTOP; //@line 15856
  STACKTOP = sp; //@line 15857
  return 0; //@line 15857
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15859
 do {
  if (!$19) {
   $AsyncCtx7 = _emscripten_alloc_async_context(16, sp) | 0; //@line 15863
   _mbed_assert_internal(12025, 12034, 215); //@line 15864
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 462; //@line 15867
    HEAP32[$AsyncCtx7 + 4 >> 2] = $2; //@line 15869
    HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 15871
    HEAP32[$AsyncCtx7 + 12 >> 2] = $5; //@line 15873
    sp = STACKTOP; //@line 15874
    STACKTOP = sp; //@line 15875
    return 0; //@line 15875
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 15877
    break;
   }
  }
 } while (0);
 HEAP32[$0 + 364 >> 2] = 2; //@line 15883
 STACKTOP = sp; //@line 15884
 return $5 | 0; //@line 15884
}
function __ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$026 = 0, $$1 = 0, $11 = 0, $12 = 0, $13 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $28 = 0, $31 = 0, $33 = 0, $34 = 0, $6 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 16522
 STACKTOP = STACKTOP + 16 | 0; //@line 16523
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16523
 $2 = sp; //@line 16524
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
  $$1 = -1002; //@line 16528
  STACKTOP = sp; //@line 16529
  return $$1 | 0; //@line 16529
 }
 $6 = __ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0; //@line 16532
 $7 = HEAP8[$1 >> 0] | 0; //@line 16533
 if (($7 & 255) > ($6 & 255)) {
  $$1 = -1003; //@line 16536
  STACKTOP = sp; //@line 16537
  return $$1 | 0; //@line 16537
 }
 $9 = $1 + 4 | 0; //@line 16539
 if (!($7 << 24 >> 24)) {
  $$1 = 0; //@line 16542
  STACKTOP = sp; //@line 16543
  return $$1 | 0; //@line 16543
 }
 $11 = $2 + 9 | 0; //@line 16545
 $12 = $2 + 8 | 0; //@line 16546
 $13 = $2 + 4 | 0; //@line 16547
 $$026 = 0; //@line 16548
 $20 = 0; //@line 16548
 while (1) {
  $18 = HEAP32[$9 >> 2] | 0; //@line 16550
  HEAP8[$11 >> 0] = HEAP8[$18 + ($20 << 4) + 13 >> 0] | 0; //@line 16553
  HEAP8[$12 >> 0] = HEAP8[$18 + ($20 << 4) + 12 >> 0] | 0; //@line 16556
  HEAP32[$2 >> 2] = HEAP32[$18 + ($20 << 4) + 4 >> 2]; //@line 16559
  HEAP32[$13 >> 2] = HEAP32[$18 + ($20 << 4) + 8 >> 2]; //@line 16562
  $28 = HEAP32[$0 >> 2] | 0; //@line 16563
  $31 = HEAP32[(HEAP32[$28 >> 2] | 0) + 60 >> 2] | 0; //@line 16566
  $33 = HEAP8[$18 + ($20 << 4) >> 0] | 0; //@line 16568
  $AsyncCtx = _emscripten_alloc_async_context(44, sp) | 0; //@line 16569
  $34 = FUNCTION_TABLE_iiii[$31 & 15]($28, $2, $33) | 0; //@line 16570
  if (___async) {
   label = 7; //@line 16573
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 16576
  $16 = $$026 + 1 << 24 >> 24; //@line 16578
  if ($34 | 0) {
   $$1 = $34; //@line 16580
   label = 9; //@line 16581
   break;
  }
  if (($16 & 255) < (HEAPU8[$1 >> 0] | 0)) {
   $$026 = $16; //@line 16588
   $20 = $16 & 255; //@line 16588
  } else {
   $$1 = 0; //@line 16590
   label = 9; //@line 16591
   break;
  }
 }
 if ((label | 0) == 7) {
  HEAP32[$AsyncCtx >> 2] = 482; //@line 16596
  HEAP8[$AsyncCtx + 4 >> 0] = $$026; //@line 16598
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 16600
  HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 16602
  HEAP32[$AsyncCtx + 16 >> 2] = $9; //@line 16604
  HEAP32[$AsyncCtx + 20 >> 2] = $11; //@line 16606
  HEAP32[$AsyncCtx + 24 >> 2] = $12; //@line 16608
  HEAP32[$AsyncCtx + 28 >> 2] = $2; //@line 16610
  HEAP32[$AsyncCtx + 32 >> 2] = $13; //@line 16612
  HEAP32[$AsyncCtx + 36 >> 2] = $0; //@line 16614
  HEAP32[$AsyncCtx + 40 >> 2] = $2; //@line 16616
  sp = STACKTOP; //@line 16617
  STACKTOP = sp; //@line 16618
  return 0; //@line 16618
 } else if ((label | 0) == 9) {
  STACKTOP = sp; //@line 16621
  return $$1 | 0; //@line 16621
 }
 return 0; //@line 16623
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_290($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx29 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 8969
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8971
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8973
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8975
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 8977
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 8979
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx29 = _emscripten_realloc_async_context(24) | 0; //@line 8984
  _mbed_assert_internal(12025, 12034, 201); //@line 8985
  if (___async) {
   HEAP32[$ReallocAsyncCtx29 >> 2] = 329; //@line 8988
   $13 = $ReallocAsyncCtx29 + 4 | 0; //@line 8989
   HEAP32[$13 >> 2] = $2; //@line 8990
   $14 = $ReallocAsyncCtx29 + 8 | 0; //@line 8991
   HEAP32[$14 >> 2] = $4; //@line 8992
   $15 = $ReallocAsyncCtx29 + 12 | 0; //@line 8993
   HEAP32[$15 >> 2] = $6; //@line 8994
   $16 = $ReallocAsyncCtx29 + 16 | 0; //@line 8995
   HEAP32[$16 >> 2] = $8; //@line 8996
   $17 = $ReallocAsyncCtx29 + 20 | 0; //@line 8997
   HEAP32[$17 >> 2] = $10; //@line 8998
   sp = STACKTOP; //@line 8999
   return;
  }
  ___async_unwind = 0; //@line 9002
  HEAP32[$ReallocAsyncCtx29 >> 2] = 329; //@line 9003
  $13 = $ReallocAsyncCtx29 + 4 | 0; //@line 9004
  HEAP32[$13 >> 2] = $2; //@line 9005
  $14 = $ReallocAsyncCtx29 + 8 | 0; //@line 9006
  HEAP32[$14 >> 2] = $4; //@line 9007
  $15 = $ReallocAsyncCtx29 + 12 | 0; //@line 9008
  HEAP32[$15 >> 2] = $6; //@line 9009
  $16 = $ReallocAsyncCtx29 + 16 | 0; //@line 9010
  HEAP32[$16 >> 2] = $8; //@line 9011
  $17 = $ReallocAsyncCtx29 + 20 | 0; //@line 9012
  HEAP32[$17 >> 2] = $10; //@line 9013
  sp = STACKTOP; //@line 9014
  return;
 }
 $18 = $4 + 944 | 0; //@line 9017
 HEAP8[$18 >> 0] = HEAP8[$18 >> 0] | 34; //@line 9020
 $21 = HEAP32[$6 >> 2] | 0; //@line 9021
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 9023
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($21, $4 + 996 | 0, 1); //@line 9024
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 330; //@line 9027
  $23 = $ReallocAsyncCtx6 + 4 | 0; //@line 9028
  HEAP32[$23 >> 2] = $4; //@line 9029
  $24 = $ReallocAsyncCtx6 + 8 | 0; //@line 9030
  HEAP32[$24 >> 2] = $6; //@line 9031
  $25 = $ReallocAsyncCtx6 + 12 | 0; //@line 9032
  HEAP32[$25 >> 2] = $8; //@line 9033
  $26 = $ReallocAsyncCtx6 + 16 | 0; //@line 9034
  HEAP32[$26 >> 2] = $10; //@line 9035
  sp = STACKTOP; //@line 9036
  return;
 }
 ___async_unwind = 0; //@line 9039
 HEAP32[$ReallocAsyncCtx6 >> 2] = 330; //@line 9040
 $23 = $ReallocAsyncCtx6 + 4 | 0; //@line 9041
 HEAP32[$23 >> 2] = $4; //@line 9042
 $24 = $ReallocAsyncCtx6 + 8 | 0; //@line 9043
 HEAP32[$24 >> 2] = $6; //@line 9044
 $25 = $ReallocAsyncCtx6 + 12 | 0; //@line 9045
 HEAP32[$25 >> 2] = $8; //@line 9046
 $26 = $ReallocAsyncCtx6 + 16 | 0; //@line 9047
 HEAP32[$26 >> 2] = $10; //@line 9048
 sp = STACKTOP; //@line 9049
 return;
}
function _initialize__async_cb_17($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 18068
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18070
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18072
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18074
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18076
 $10 = 7 << 32 + -4; //@line 18078
 $11 = ___muldi3($10 | 0, 0, 1e6, 0) | 0; //@line 18079
 $12 = tempRet0; //@line 18080
 $13 = _i64Add($2 | 0, 0, -1, -1) | 0; //@line 18081
 $15 = _i64Add($13 | 0, tempRet0 | 0, $11 | 0, $12 | 0) | 0; //@line 18083
 $17 = ___udivdi3($15 | 0, tempRet0 | 0, $2 | 0, 0) | 0; //@line 18085
 $18 = tempRet0; //@line 18086
 $19 = HEAP32[$4 >> 2] | 0; //@line 18087
 HEAP32[$19 >> 2] = 0; //@line 18088
 HEAP32[$19 + 4 >> 2] = 0; //@line 18090
 $23 = HEAP32[(HEAP32[$6 >> 2] | 0) + 4 >> 2] | 0; //@line 18093
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(40) | 0; //@line 18094
 $24 = FUNCTION_TABLE_i[$23 & 7]() | 0; //@line 18095
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 599; //@line 18098
  $25 = $ReallocAsyncCtx3 + 4 | 0; //@line 18099
  HEAP32[$25 >> 2] = $4; //@line 18100
  $26 = $ReallocAsyncCtx3 + 8 | 0; //@line 18101
  HEAP32[$26 >> 2] = $2; //@line 18102
  $27 = $ReallocAsyncCtx3 + 12 | 0; //@line 18103
  HEAP32[$27 >> 2] = 32; //@line 18104
  $28 = $ReallocAsyncCtx3 + 16 | 0; //@line 18105
  HEAP32[$28 >> 2] = $10; //@line 18106
  $29 = $ReallocAsyncCtx3 + 24 | 0; //@line 18107
  $30 = $29; //@line 18108
  $31 = $30; //@line 18109
  HEAP32[$31 >> 2] = $17; //@line 18110
  $32 = $30 + 4 | 0; //@line 18111
  $33 = $32; //@line 18112
  HEAP32[$33 >> 2] = $18; //@line 18113
  $34 = $ReallocAsyncCtx3 + 32 | 0; //@line 18114
  HEAP32[$34 >> 2] = $6; //@line 18115
  $35 = $ReallocAsyncCtx3 + 36 | 0; //@line 18116
  HEAP32[$35 >> 2] = $8; //@line 18117
  sp = STACKTOP; //@line 18118
  return;
 }
 HEAP32[___async_retval >> 2] = $24; //@line 18122
 ___async_unwind = 0; //@line 18123
 HEAP32[$ReallocAsyncCtx3 >> 2] = 599; //@line 18124
 $25 = $ReallocAsyncCtx3 + 4 | 0; //@line 18125
 HEAP32[$25 >> 2] = $4; //@line 18126
 $26 = $ReallocAsyncCtx3 + 8 | 0; //@line 18127
 HEAP32[$26 >> 2] = $2; //@line 18128
 $27 = $ReallocAsyncCtx3 + 12 | 0; //@line 18129
 HEAP32[$27 >> 2] = 32; //@line 18130
 $28 = $ReallocAsyncCtx3 + 16 | 0; //@line 18131
 HEAP32[$28 >> 2] = $10; //@line 18132
 $29 = $ReallocAsyncCtx3 + 24 | 0; //@line 18133
 $30 = $29; //@line 18134
 $31 = $30; //@line 18135
 HEAP32[$31 >> 2] = $17; //@line 18136
 $32 = $30 + 4 | 0; //@line 18137
 $33 = $32; //@line 18138
 HEAP32[$33 >> 2] = $18; //@line 18139
 $34 = $ReallocAsyncCtx3 + 32 | 0; //@line 18140
 HEAP32[$34 >> 2] = $6; //@line 18141
 $35 = $ReallocAsyncCtx3 + 36 | 0; //@line 18142
 HEAP32[$35 >> 2] = $8; //@line 18143
 sp = STACKTOP; //@line 18144
 return;
}
function __ZN7LoRaMac21send_frame_on_channelEh__async_cb_81($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $16 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $26 = 0, $29 = 0, $32 = 0, $35 = 0, $38 = 0, $4 = 0, $44 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 21692
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21694
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21696
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21698
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21700
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21702
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21706
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 21708
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 21712
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 21714
 $23 = $2 + 264 | 0; //@line 21715
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($23) | 0) + 4 >> 2] = 1; //@line 21718
 $26 = $2 + 288 | 0; //@line 21719
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($26) | 0) + 4 >> 2] = 1; //@line 21722
 $29 = HEAP8[$4 >> 0] | 0; //@line 21723
 HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($26) | 0) + 8 >> 0] = $29; //@line 21726
 $32 = HEAP8[$6 >> 0] | 0; //@line 21727
 HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($26) | 0) + 9 >> 0] = $32; //@line 21730
 $35 = HEAP32[$8 >> 2] | 0; //@line 21731
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($26) | 0) + 12 >> 2] = $35; //@line 21734
 $38 = HEAP32[$8 >> 2] | 0; //@line 21735
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($23) | 0) + 8 >> 2] = $38; //@line 21738
 if (!(HEAP8[$2 + 372 >> 0] | 0)) {
  $44 = $2 + 897 | 0; //@line 21743
  HEAP8[$44 >> 0] = (HEAP8[$44 >> 0] | 0) + 1 << 24 >> 24; //@line 21746
 }
 _printf(12141, $10) | 0; //@line 21748
 HEAP32[$16 >> 2] = HEAPU16[$14 >> 1]; //@line 21751
 _printf(12289, $16) | 0; //@line 21752
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 21753
 _putchar(10) | 0; //@line 21754
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 404; //@line 21757
  $49 = $ReallocAsyncCtx2 + 4 | 0; //@line 21758
  HEAP32[$49 >> 2] = $20; //@line 21759
  $50 = $ReallocAsyncCtx2 + 8 | 0; //@line 21760
  HEAP32[$50 >> 2] = $2; //@line 21761
  $51 = $ReallocAsyncCtx2 + 12 | 0; //@line 21762
  HEAP32[$51 >> 2] = $14; //@line 21763
  $52 = $ReallocAsyncCtx2 + 16 | 0; //@line 21764
  HEAP32[$52 >> 2] = $6; //@line 21765
  $53 = $ReallocAsyncCtx2 + 20 | 0; //@line 21766
  HEAP32[$53 >> 2] = $22; //@line 21767
  sp = STACKTOP; //@line 21768
  return;
 }
 ___async_unwind = 0; //@line 21771
 HEAP32[$ReallocAsyncCtx2 >> 2] = 404; //@line 21772
 $49 = $ReallocAsyncCtx2 + 4 | 0; //@line 21773
 HEAP32[$49 >> 2] = $20; //@line 21774
 $50 = $ReallocAsyncCtx2 + 8 | 0; //@line 21775
 HEAP32[$50 >> 2] = $2; //@line 21776
 $51 = $ReallocAsyncCtx2 + 12 | 0; //@line 21777
 HEAP32[$51 >> 2] = $14; //@line 21778
 $52 = $ReallocAsyncCtx2 + 16 | 0; //@line 21779
 HEAP32[$52 >> 2] = $6; //@line 21780
 $53 = $ReallocAsyncCtx2 + 20 | 0; //@line 21781
 HEAP32[$53 >> 2] = $22; //@line 21782
 sp = STACKTOP; //@line 21783
 return;
}
function __ZN7LoRaPHY11add_channelEP16channel_params_th($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$$123$off0 = 0, $$024 = 0, $$4$off0 = 0, $$5$off039 = 0, $11 = 0, $13 = 0, $15 = 0, $17 = 0, $20 = 0, $22 = 0, $35 = 0, $43 = 0, $44 = 0, $45 = 0, $50 = 0, $52 = 0, $6 = 0, $62 = 0, $AsyncCtx = 0, $not$ = 0, sp = 0;
 sp = STACKTOP; //@line 21897
 if (!(HEAP8[$0 + 16 >> 0] | 0)) {
  $$024 = -1003; //@line 21902
  return $$024 | 0; //@line 21903
 }
 $6 = $2 & 255; //@line 21905
 if ((HEAPU8[$0 + 20 >> 0] | 0) <= ($2 & 255)) {
  $$024 = -1003; //@line 21910
  return $$024 | 0; //@line 21911
 }
 $11 = HEAP8[$1 + 8 >> 0] | 0; //@line 21914
 $13 = ($11 << 4 & 255) << 24 >> 24 >> 4; //@line 21916
 $15 = HEAP8[$0 + 26 >> 0] | 0; //@line 21918
 $17 = HEAP8[$0 + 27 >> 0] | 0; //@line 21920
 $20 = $11 << 24 >> 24 >> 4; //@line 21924
 $22 = $20 << 24 >> 24 <= $17 << 24 >> 24; //@line 21926
 $$$123$off0 = $13 << 24 >> 24 > $20 << 24 >> 24 | (($13 << 24 >> 24 > $17 << 24 >> 24 ? 1 : $13 << 24 >> 24 < $15 << 24 >> 24) | $20 << 24 >> 24 >= $15 << 24 >> 24 & $22 ^ 1); //@line 21931
 if ((HEAPU8[$0 + 18 >> 0] | 0) > ($2 & 255)) {
  $$4$off0 = ($13 << 24 >> 24 | 0) > ($15 & 255 | 0) | $$$123$off0 | $22 & $20 << 24 >> 24 >= (HEAP8[$0 + 31 >> 0] | 0) ^ 1; //@line 21945
  $35 = HEAP32[$1 >> 2] | 0; //@line 21946
  if (($35 | 0) == (HEAP32[(HEAP32[$0 + 112 >> 2] | 0) + ($6 * 12 | 0) >> 2] | 0)) {
   $$5$off039 = $$4$off0; //@line 21953
   $44 = $35; //@line 21953
  } else {
   $$024 = $$4$off0 ? -1006 : -1004; //@line 21956
   return $$024 | 0; //@line 21957
  }
 } else {
  $$5$off039 = $$$123$off0; //@line 21961
  $44 = HEAP32[$1 >> 2] | 0; //@line 21961
 }
 $43 = HEAP32[(HEAP32[$0 >> 2] | 0) + 76 >> 2] | 0; //@line 21965
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 21966
 $45 = FUNCTION_TABLE_iii[$43 & 31]($0, $44) | 0; //@line 21967
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 533; //@line 21970
  HEAP8[$AsyncCtx + 4 >> 0] = $$5$off039 & 1; //@line 21973
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 21975
  HEAP32[$AsyncCtx + 12 >> 2] = $6; //@line 21977
  HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 21979
  sp = STACKTOP; //@line 21980
  return 0; //@line 21981
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 21983
 $not$ = $45 ^ 1; //@line 21984
 if ($$5$off039 | $not$) {
  $$024 = $$5$off039 ? $$5$off039 & $not$ ? -1006 : -1005 : -1004; //@line 21990
  return $$024 | 0; //@line 21991
 }
 $50 = $0 + 112 | 0; //@line 21993
 $52 = (HEAP32[$50 >> 2] | 0) + ($6 * 12 | 0) | 0; //@line 21995
 HEAP32[$52 >> 2] = HEAP32[$1 >> 2]; //@line 21996
 HEAP32[$52 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 21996
 HEAP32[$52 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 21996
 HEAP8[(HEAP32[$50 >> 2] | 0) + ($6 * 12 | 0) + 9 >> 0] = HEAP8[$1 + 9 >> 0] | 0; //@line 22001
 $62 = (HEAP32[$0 + 120 >> 2] | 0) + ($6 >>> 4 << 1) | 0; //@line 22007
 HEAP16[$62 >> 1] = 1 << ($6 & 15) | HEAPU16[$62 >> 1]; //@line 22012
 $$024 = 0; //@line 22013
 return $$024 | 0; //@line 22014
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_410($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 30122
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30126
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30128
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30130
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30132
 $11 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 30133
 if (!$11) {
  $18 = HEAP32[$4 >> 2] | 0; //@line 30136
  $20 = $8 + 12 | 0; //@line 30138
  HEAP32[$8 >> 2] = 438; //@line 30139
  HEAP32[$8 + 4 >> 2] = 0; //@line 30141
  HEAP32[$8 + 8 >> 2] = $6; //@line 30143
  HEAP32[$20 >> 2] = 836; //@line 30144
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 30145
  __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($18, $6 + 1076 | 0, $8); //@line 30146
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 439; //@line 30149
   $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 30150
   HEAP32[$21 >> 2] = $20; //@line 30151
   $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 30152
   HEAP32[$22 >> 2] = $4; //@line 30153
   $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 30154
   HEAP32[$23 >> 2] = $6; //@line 30155
   $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 30156
   HEAP32[$24 >> 2] = $8; //@line 30157
   sp = STACKTOP; //@line 30158
   return;
  }
  ___async_unwind = 0; //@line 30161
  HEAP32[$ReallocAsyncCtx6 >> 2] = 439; //@line 30162
  $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 30163
  HEAP32[$21 >> 2] = $20; //@line 30164
  $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 30165
  HEAP32[$22 >> 2] = $4; //@line 30166
  $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 30167
  HEAP32[$23 >> 2] = $6; //@line 30168
  $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 30169
  HEAP32[$24 >> 2] = $8; //@line 30170
  sp = STACKTOP; //@line 30171
  return;
 } else {
  $14 = HEAP32[$11 + 8 >> 2] | 0; //@line 30175
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 30176
  FUNCTION_TABLE_vi[$14 & 1023]($10); //@line 30177
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 437; //@line 30180
   $15 = $ReallocAsyncCtx4 + 4 | 0; //@line 30181
   HEAP32[$15 >> 2] = $4; //@line 30182
   $16 = $ReallocAsyncCtx4 + 8 | 0; //@line 30183
   HEAP32[$16 >> 2] = $6; //@line 30184
   $17 = $ReallocAsyncCtx4 + 12 | 0; //@line 30185
   HEAP32[$17 >> 2] = $8; //@line 30186
   sp = STACKTOP; //@line 30187
   return;
  }
  ___async_unwind = 0; //@line 30190
  HEAP32[$ReallocAsyncCtx4 >> 2] = 437; //@line 30191
  $15 = $ReallocAsyncCtx4 + 4 | 0; //@line 30192
  HEAP32[$15 >> 2] = $4; //@line 30193
  $16 = $ReallocAsyncCtx4 + 8 | 0; //@line 30194
  HEAP32[$16 >> 2] = $6; //@line 30195
  $17 = $ReallocAsyncCtx4 + 12 | 0; //@line 30196
  HEAP32[$17 >> 2] = $8; //@line 30197
  sp = STACKTOP; //@line 30198
  return;
 }
}
function __ZN7LoRaMac25on_rx_window1_timer_eventEv($0) {
 $0 = $0 | 0;
 var $18 = 0, $2 = 0, $23 = 0, $28 = 0, $31 = 0, $34 = 0, $39 = 0, $41 = 0, $42 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 14312
 $2 = HEAP32[$0 + 356 >> 2] | 0; //@line 14314
 $AsyncCtx9 = _emscripten_alloc_async_context(8, sp) | 0; //@line 14316
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($2, $0 + 1036 | 0); //@line 14317
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 417; //@line 14320
  HEAP32[$AsyncCtx9 + 4 >> 2] = $0; //@line 14322
  sp = STACKTOP; //@line 14323
  return;
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 14326
 HEAP32[$0 + 364 >> 2] = 0; //@line 14328
 $8 = $0 + 1160 | 0; //@line 14331
 HEAP8[$8 >> 0] = HEAP8[$0 + 378 >> 0] | 0; //@line 14332
 HEAP8[$0 + 1163 >> 0] = HEAP8[$0 + 1129 >> 0] | 0; //@line 14336
 HEAP8[$0 + 1176 >> 0] = HEAP8[$0 + 1141 >> 0] | 0; //@line 14340
 HEAP8[$0 + 1177 >> 0] = HEAP8[$0 + 369 >> 0] | 0; //@line 14344
 $18 = $0 + 1178 | 0; //@line 14345
 HEAP8[$18 >> 0] = 0; //@line 14346
 HEAP32[$0 + 1180 >> 2] = 0; //@line 14348
 do {
  if ((HEAP32[$0 + 360 >> 2] | 0) == 2) {
   $23 = HEAP32[$0 >> 2] | 0; //@line 14354
   $AsyncCtx5 = _emscripten_alloc_async_context(20, sp) | 0; //@line 14355
   __ZN7LoRaPHY20put_radio_to_standbyEv($23); //@line 14356
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 418; //@line 14359
    HEAP32[$AsyncCtx5 + 4 >> 2] = $0; //@line 14361
    HEAP32[$AsyncCtx5 + 8 >> 2] = $0; //@line 14363
    HEAP32[$AsyncCtx5 + 12 >> 2] = $8; //@line 14365
    HEAP32[$AsyncCtx5 + 16 >> 2] = $18; //@line 14367
    sp = STACKTOP; //@line 14368
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 14371
    break;
   }
  }
 } while (0);
 $28 = HEAP32[$0 >> 2] | 0; //@line 14376
 $31 = HEAP32[(HEAP32[$28 >> 2] | 0) + 24 >> 2] | 0; //@line 14379
 $34 = (__ZN11LoRaMacMcps14get_indicationEv($0 + 288 | 0) | 0) + 10 | 0; //@line 14382
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 14383
 FUNCTION_TABLE_iiii[$31 & 15]($28, $8, $34) | 0; //@line 14384
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 419; //@line 14387
  HEAP32[$AsyncCtx + 4 >> 2] = $18; //@line 14389
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 14391
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 14393
  sp = STACKTOP; //@line 14394
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 14397
 $39 = (HEAP8[$18 >> 0] | 0) != 0; //@line 14399
 $41 = HEAP32[$0 + 1108 >> 2] | 0; //@line 14401
 $42 = HEAP32[$0 >> 2] | 0; //@line 14402
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 14403
 __ZN7LoRaPHY15setup_rx_windowEbj($42, $39, $41); //@line 14404
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 420; //@line 14407
  sp = STACKTOP; //@line 14408
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 14411
  return;
 }
}
function __ZN14lorawan_timersD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $29 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 15518
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15520
 $4 = HEAP32[$2 + 88 >> 2] | 0; //@line 15522
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 15527
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 15528
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 76 | 0); //@line 15529
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 264; //@line 15532
   $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 15533
   HEAP32[$9 >> 2] = $2; //@line 15534
   sp = STACKTOP; //@line 15535
   return;
  }
  ___async_unwind = 0; //@line 15538
  HEAP32[$ReallocAsyncCtx2 >> 2] = 264; //@line 15539
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 15540
  HEAP32[$9 >> 2] = $2; //@line 15541
  sp = STACKTOP; //@line 15542
  return;
 }
 $11 = HEAP32[$2 + 68 >> 2] | 0; //@line 15546
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 15551
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 15552
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 56 | 0); //@line 15553
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 265; //@line 15556
   $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 15557
   HEAP32[$16 >> 2] = $2; //@line 15558
   sp = STACKTOP; //@line 15559
   return;
  }
  ___async_unwind = 0; //@line 15562
  HEAP32[$ReallocAsyncCtx3 >> 2] = 265; //@line 15563
  $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 15564
  HEAP32[$16 >> 2] = $2; //@line 15565
  sp = STACKTOP; //@line 15566
  return;
 }
 $18 = HEAP32[$2 + 48 >> 2] | 0; //@line 15570
 if ($18 | 0) {
  $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 15575
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 15576
  FUNCTION_TABLE_vi[$22 & 1023]($2 + 36 | 0); //@line 15577
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 266; //@line 15580
   $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 15581
   HEAP32[$23 >> 2] = $2; //@line 15582
   sp = STACKTOP; //@line 15583
   return;
  }
  ___async_unwind = 0; //@line 15586
  HEAP32[$ReallocAsyncCtx4 >> 2] = 266; //@line 15587
  $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 15588
  HEAP32[$23 >> 2] = $2; //@line 15589
  sp = STACKTOP; //@line 15590
  return;
 }
 $25 = HEAP32[$2 + 28 >> 2] | 0; //@line 15594
 if (!$25) {
  return;
 }
 $29 = HEAP32[$25 + 8 >> 2] | 0; //@line 15601
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 15602
 FUNCTION_TABLE_vi[$29 & 1023]($2 + 16 | 0); //@line 15603
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 267; //@line 15606
  sp = STACKTOP; //@line 15607
  return;
 }
 ___async_unwind = 0; //@line 15610
 HEAP32[$ReallocAsyncCtx5 >> 2] = 267; //@line 15611
 sp = STACKTOP; //@line 15612
 return;
}
function __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$unpack10 = 0, $10 = 0, $16 = 0, $17 = 0, $20 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 8648
 STACKTOP = STACKTOP + 16 | 0; //@line 8649
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 8649
 $3 = sp; //@line 8650
 $$unpack10 = HEAP32[$2 + 4 >> 2] | 0; //@line 8653
 $4 = $3 + 12 | 0; //@line 8654
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 8655
 HEAP32[$3 + 4 >> 2] = $$unpack10; //@line 8657
 HEAP32[$3 + 8 >> 2] = $1; //@line 8659
 HEAP32[$4 >> 2] = 836; //@line 8660
 $5 = _equeue_alloc($0, 16) | 0; //@line 8661
 do {
  if (!$5) {
   $$0$i = 0; //@line 8665
  } else {
   $7 = HEAP32[$4 >> 2] | 0; //@line 8667
   do {
    if (!$7) {
     $16 = 0; //@line 8671
    } else {
     $10 = HEAP32[$7 + 4 >> 2] | 0; //@line 8674
     $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 8675
     FUNCTION_TABLE_vii[$10 & 31]($5, $3); //@line 8676
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 280; //@line 8679
      HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 8681
      HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 8683
      HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 8685
      HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 8687
      sp = STACKTOP; //@line 8688
      STACKTOP = sp; //@line 8689
      return 0; //@line 8689
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 8691
      $16 = HEAP32[$4 >> 2] | 0; //@line 8693
      break;
     }
    }
   } while (0);
   HEAP32[$5 + 12 >> 2] = $16; //@line 8699
   _equeue_event_dtor($5, 281); //@line 8700
   $AsyncCtx5 = _emscripten_alloc_async_context(12, sp) | 0; //@line 8701
   $17 = _equeue_post($0, 282, $5) | 0; //@line 8702
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 283; //@line 8705
    HEAP32[$AsyncCtx5 + 4 >> 2] = $4; //@line 8707
    HEAP32[$AsyncCtx5 + 8 >> 2] = $3; //@line 8709
    sp = STACKTOP; //@line 8710
    STACKTOP = sp; //@line 8711
    return 0; //@line 8711
   } else {
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 8713
    $$0$i = $17; //@line 8714
    break;
   }
  }
 } while (0);
 $20 = HEAP32[$4 >> 2] | 0; //@line 8719
 if (!$20) {
  STACKTOP = sp; //@line 8722
  return $$0$i | 0; //@line 8722
 }
 $23 = HEAP32[$20 + 8 >> 2] | 0; //@line 8725
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8726
 FUNCTION_TABLE_vi[$23 & 1023]($3); //@line 8727
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 284; //@line 8730
  HEAP32[$AsyncCtx2 + 4 >> 2] = $$0$i; //@line 8732
  sp = STACKTOP; //@line 8733
  STACKTOP = sp; //@line 8734
  return 0; //@line 8734
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 8736
 STACKTOP = sp; //@line 8737
 return $$0$i | 0; //@line 8737
}
function __ZN12radio_eventsD2Ev__async_cb_350($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 14115
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14117
 $4 = HEAP32[$2 + 60 >> 2] | 0; //@line 14119
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 14124
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 14125
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 48 | 0); //@line 14126
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 259; //@line 14129
   $9 = $ReallocAsyncCtx4 + 4 | 0; //@line 14130
   HEAP32[$9 >> 2] = $2; //@line 14131
   sp = STACKTOP; //@line 14132
   return;
  }
  ___async_unwind = 0; //@line 14135
  HEAP32[$ReallocAsyncCtx4 >> 2] = 259; //@line 14136
  $9 = $ReallocAsyncCtx4 + 4 | 0; //@line 14137
  HEAP32[$9 >> 2] = $2; //@line 14138
  sp = STACKTOP; //@line 14139
  return;
 }
 $11 = HEAP32[$2 + 44 >> 2] | 0; //@line 14143
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 14148
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 14149
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 32 | 0); //@line 14150
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 260; //@line 14153
   $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 14154
   HEAP32[$16 >> 2] = $2; //@line 14155
   sp = STACKTOP; //@line 14156
   return;
  }
  ___async_unwind = 0; //@line 14159
  HEAP32[$ReallocAsyncCtx5 >> 2] = 260; //@line 14160
  $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 14161
  HEAP32[$16 >> 2] = $2; //@line 14162
  sp = STACKTOP; //@line 14163
  return;
 }
 $18 = HEAP32[$2 + 28 >> 2] | 0; //@line 14167
 if ($18 | 0) {
  $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 14172
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 14173
  FUNCTION_TABLE_vi[$22 & 1023]($2 + 16 | 0); //@line 14174
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 261; //@line 14177
   $23 = $ReallocAsyncCtx6 + 4 | 0; //@line 14178
   HEAP32[$23 >> 2] = $2; //@line 14179
   sp = STACKTOP; //@line 14180
   return;
  }
  ___async_unwind = 0; //@line 14183
  HEAP32[$ReallocAsyncCtx6 >> 2] = 261; //@line 14184
  $23 = $ReallocAsyncCtx6 + 4 | 0; //@line 14185
  HEAP32[$23 >> 2] = $2; //@line 14186
  sp = STACKTOP; //@line 14187
  return;
 }
 $25 = HEAP32[$2 + 12 >> 2] | 0; //@line 14191
 if (!$25) {
  return;
 }
 $28 = HEAP32[$25 + 8 >> 2] | 0; //@line 14197
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 14198
 FUNCTION_TABLE_vi[$28 & 1023]($2); //@line 14199
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 262; //@line 14202
  sp = STACKTOP; //@line 14203
  return;
 }
 ___async_unwind = 0; //@line 14206
 HEAP32[$ReallocAsyncCtx7 >> 2] = 262; //@line 14207
 sp = STACKTOP; //@line 14208
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_143($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $23 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx28 = 0, sp = 0;
 sp = STACKTOP; //@line 30093
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30097
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30099
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30101
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30103
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 30105
 $12 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 30106
 if ($12 | 0) {
  $15 = HEAP32[$12 + 8 >> 2] | 0; //@line 30110
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(20) | 0; //@line 30111
  FUNCTION_TABLE_vi[$15 & 1023]($4); //@line 30112
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 190; //@line 30115
   $16 = $ReallocAsyncCtx10 + 4 | 0; //@line 30116
   HEAP32[$16 >> 2] = $AsyncRetVal; //@line 30117
   $17 = $ReallocAsyncCtx10 + 8 | 0; //@line 30118
   HEAP32[$17 >> 2] = $6; //@line 30119
   $18 = $ReallocAsyncCtx10 + 12 | 0; //@line 30120
   HEAP32[$18 >> 2] = $8; //@line 30121
   $19 = $ReallocAsyncCtx10 + 16 | 0; //@line 30122
   HEAP32[$19 >> 2] = $10; //@line 30123
   sp = STACKTOP; //@line 30124
   return;
  }
  ___async_unwind = 0; //@line 30127
  HEAP32[$ReallocAsyncCtx10 >> 2] = 190; //@line 30128
  $16 = $ReallocAsyncCtx10 + 4 | 0; //@line 30129
  HEAP32[$16 >> 2] = $AsyncRetVal; //@line 30130
  $17 = $ReallocAsyncCtx10 + 8 | 0; //@line 30131
  HEAP32[$17 >> 2] = $6; //@line 30132
  $18 = $ReallocAsyncCtx10 + 12 | 0; //@line 30133
  HEAP32[$18 >> 2] = $8; //@line 30134
  $19 = $ReallocAsyncCtx10 + 16 | 0; //@line 30135
  HEAP32[$19 >> 2] = $10; //@line 30136
  sp = STACKTOP; //@line 30137
  return;
 }
 if ($AsyncRetVal | 0) {
  HEAP32[$8 >> 2] = 6; //@line 30142
  HEAP32[___async_retval >> 2] = $6; //@line 30144
  return;
 }
 $ReallocAsyncCtx28 = _emscripten_realloc_async_context(16) | 0; //@line 30147
 _mbed_assert_internal(12025, 11293, 1239); //@line 30148
 if (___async) {
  HEAP32[$ReallocAsyncCtx28 >> 2] = 191; //@line 30151
  $21 = $ReallocAsyncCtx28 + 4 | 0; //@line 30152
  HEAP32[$21 >> 2] = $6; //@line 30153
  $22 = $ReallocAsyncCtx28 + 8 | 0; //@line 30154
  HEAP32[$22 >> 2] = $8; //@line 30155
  $23 = $ReallocAsyncCtx28 + 12 | 0; //@line 30156
  HEAP32[$23 >> 2] = $10; //@line 30157
  sp = STACKTOP; //@line 30158
  return;
 }
 ___async_unwind = 0; //@line 30161
 HEAP32[$ReallocAsyncCtx28 >> 2] = 191; //@line 30162
 $21 = $ReallocAsyncCtx28 + 4 | 0; //@line 30163
 HEAP32[$21 >> 2] = $6; //@line 30164
 $22 = $ReallocAsyncCtx28 + 8 | 0; //@line 30165
 HEAP32[$22 >> 2] = $8; //@line 30166
 $23 = $ReallocAsyncCtx28 + 12 | 0; //@line 30167
 HEAP32[$23 >> 2] = $10; //@line 30168
 sp = STACKTOP; //@line 30169
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_286($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx28 = 0, sp = 0;
 sp = STACKTOP; //@line 8313
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8315
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8317
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8319
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 8321
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 8323
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 8325
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 8327
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 8329
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 8331
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 8333
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 8335
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 8337
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 8339
 $28 = HEAP8[$0 + 56 >> 0] | 0; //@line 8341
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 8343
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 8345
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 8347
 $36 = HEAP16[$0 + 72 >> 1] | 0; //@line 8349
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 8351
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 8353
 $41 = $6 + 356 | 0; //@line 8354
 $42 = HEAP32[$41 >> 2] | 0; //@line 8355
 $ReallocAsyncCtx28 = _emscripten_realloc_async_context(88) | 0; //@line 8357
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($42, $6 + 1056 | 0); //@line 8358
 if (!___async) {
  ___async_unwind = 0; //@line 8361
 }
 HEAP32[$ReallocAsyncCtx28 >> 2] = 296; //@line 8363
 HEAP32[$ReallocAsyncCtx28 + 4 >> 2] = $2; //@line 8365
 HEAP32[$ReallocAsyncCtx28 + 8 >> 2] = $4; //@line 8367
 HEAP32[$ReallocAsyncCtx28 + 12 >> 2] = $6; //@line 8369
 HEAP32[$ReallocAsyncCtx28 + 16 >> 2] = $41; //@line 8371
 HEAP32[$ReallocAsyncCtx28 + 20 >> 2] = $12; //@line 8373
 HEAP32[$ReallocAsyncCtx28 + 24 >> 2] = $14; //@line 8375
 HEAP32[$ReallocAsyncCtx28 + 28 >> 2] = $8; //@line 8377
 HEAP32[$ReallocAsyncCtx28 + 32 >> 2] = $10; //@line 8379
 HEAP32[$ReallocAsyncCtx28 + 36 >> 2] = $16; //@line 8381
 HEAP32[$ReallocAsyncCtx28 + 40 >> 2] = $18; //@line 8383
 HEAP32[$ReallocAsyncCtx28 + 44 >> 2] = $20; //@line 8385
 HEAP32[$ReallocAsyncCtx28 + 48 >> 2] = $22; //@line 8387
 HEAP32[$ReallocAsyncCtx28 + 52 >> 2] = $24; //@line 8389
 HEAP32[$ReallocAsyncCtx28 + 56 >> 2] = $26; //@line 8391
 HEAP8[$ReallocAsyncCtx28 + 60 >> 0] = $28; //@line 8393
 HEAP32[$ReallocAsyncCtx28 + 64 >> 2] = $30; //@line 8395
 HEAP32[$ReallocAsyncCtx28 + 68 >> 2] = $32; //@line 8397
 HEAP32[$ReallocAsyncCtx28 + 72 >> 2] = $34; //@line 8399
 HEAP16[$ReallocAsyncCtx28 + 76 >> 1] = $36; //@line 8401
 HEAP32[$ReallocAsyncCtx28 + 80 >> 2] = $38; //@line 8403
 HEAP32[$ReallocAsyncCtx28 + 84 >> 2] = $40; //@line 8405
 sp = STACKTOP; //@line 8406
 return;
}
function __ZN7LoRaMacC2ER18LoRaWANTimeHandler($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $18 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, stop = 0;
 __ZN14LoRaMacCommandC2Ev($0 + 4 | 0); //@line 7903
 __ZN11LoRaMacMlmeC2Ev($0 + 264 | 0); //@line 7905
 __ZN10LoRaMacMibC2Ev($0 + 348 | 0); //@line 7907
 __ZN18LoRaMacChannelPlanC2Ev($0 + 352 | 0); //@line 7909
 HEAP32[$0 + 356 >> 2] = $1; //@line 7911
 $7 = $0 + 996 | 0; //@line 7912
 HEAP32[$7 >> 2] = 0; //@line 7913
 HEAP32[$7 + 4 >> 2] = 0; //@line 7913
 HEAP32[$7 + 8 >> 2] = 0; //@line 7913
 HEAP32[$7 + 12 >> 2] = 0; //@line 7913
 $8 = $0 + 1016 | 0; //@line 7914
 HEAP32[$8 >> 2] = 0; //@line 7915
 HEAP32[$8 + 4 >> 2] = 0; //@line 7915
 HEAP32[$8 + 8 >> 2] = 0; //@line 7915
 HEAP32[$8 + 12 >> 2] = 0; //@line 7915
 $9 = $0 + 1036 | 0; //@line 7916
 HEAP32[$9 >> 2] = 0; //@line 7917
 HEAP32[$9 + 4 >> 2] = 0; //@line 7917
 HEAP32[$9 + 8 >> 2] = 0; //@line 7917
 HEAP32[$9 + 12 >> 2] = 0; //@line 7917
 $10 = $0 + 1056 | 0; //@line 7918
 HEAP32[$10 >> 2] = 0; //@line 7919
 HEAP32[$10 + 4 >> 2] = 0; //@line 7919
 HEAP32[$10 + 8 >> 2] = 0; //@line 7919
 HEAP32[$10 + 12 >> 2] = 0; //@line 7919
 $11 = $0 + 1076 | 0; //@line 7920
 HEAP32[$11 >> 2] = 0; //@line 7921
 HEAP32[$11 + 4 >> 2] = 0; //@line 7921
 HEAP32[$11 + 8 >> 2] = 0; //@line 7921
 HEAP32[$11 + 12 >> 2] = 0; //@line 7921
 dest = $0 + 1212 | 0; //@line 7923
 stop = dest + 112 | 0; //@line 7923
 do {
  HEAP32[dest >> 2] = 0; //@line 7923
  dest = dest + 4 | 0; //@line 7923
 } while ((dest | 0) < (stop | 0));
 HEAP32[$0 >> 2] = 0; //@line 7924
 $14 = $0 + 946 | 0; //@line 7926
 HEAP16[$0 + 636 >> 1] = 0; //@line 7928
 HEAP8[$0 + 893 >> 0] = 0; //@line 7930
 HEAP8[$0 + 370 >> 0] = 0; //@line 7932
 $18 = $0 + 371 | 0; //@line 7933
 dest = $0 + 900 | 0; //@line 7934
 stop = dest + 44 | 0; //@line 7934
 do {
  HEAP32[dest >> 2] = 0; //@line 7934
  dest = dest + 4 | 0; //@line 7934
 } while ((dest | 0) < (stop | 0));
 dest = $14; //@line 7935
 stop = dest + 18 | 0; //@line 7935
 do {
  HEAP16[dest >> 1] = 0; //@line 7935
  dest = dest + 2 | 0; //@line 7935
 } while ((dest | 0) < (stop | 0));
 HEAP8[$18 >> 0] = 1; //@line 7936
 HEAP8[$0 + 372 >> 0] = 0; //@line 7938
 HEAP32[$0 + 964 >> 2] = 0; //@line 7940
 HEAP8[$0 + 373 >> 0] = 0; //@line 7942
 HEAP8[$0 + 374 >> 0] = 0; //@line 7944
 HEAP8[$0 + 380 >> 0] = 0; //@line 7946
 HEAP32[$0 + 988 >> 2] = 0; //@line 7948
 HEAP32[$0 + 968 >> 2] = 0; //@line 7950
 HEAP8[$0 + 894 >> 0] = 1; //@line 7952
 HEAP8[$0 + 895 >> 0] = 1; //@line 7954
 HEAP8[$0 + 377 >> 0] = 0; //@line 7956
 HEAP32[$0 + 992 >> 2] = 0; //@line 7958
 HEAP32[$0 + 1208 >> 2] = 0; //@line 7960
 HEAP8[$0 + 1156 >> 0] = 0; //@line 7962
 HEAP8[$0 + 1152 >> 0] = 0; //@line 7964
 HEAP32[$0 + 1324 >> 2] = 0; //@line 7966
 HEAP32[$0 + 1328 >> 2] = 0; //@line 7968
 return;
}
function __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11362
 STACKTOP = STACKTOP + 16 | 0; //@line 11363
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 11363
 $$byval_copy = sp; //@line 11364
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11366
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11368
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11370
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11372
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 11374
 if ($AsyncRetVal | 0) {
  $24 = ___async_retval; //@line 11377
  HEAP32[$24 >> 2] = $AsyncRetVal; //@line 11378
  STACKTOP = sp; //@line 11379
  return;
 }
 if ((HEAP32[$2 >> 2] | 0) != 2) {
  $24 = ___async_retval; //@line 11384
  HEAP32[$24 >> 2] = $AsyncRetVal; //@line 11385
  STACKTOP = sp; //@line 11386
  return;
 }
 switch (HEAP32[$4 >> 2] | 0) {
 case 0:
  {
   break;
  }
 case 10:
  {
   label = 5; //@line 11394
   break;
  }
 default:
  {
   $24 = ___async_retval; //@line 11398
   HEAP32[$24 >> 2] = $AsyncRetVal; //@line 11399
   STACKTOP = sp; //@line 11400
   return;
  }
 }
 if ((label | 0) == 5) {
  if (!(HEAP8[$8 + 372 >> 0] | 0)) {
   $24 = ___async_retval; //@line 11408
   HEAP32[$24 >> 2] = $AsyncRetVal; //@line 11409
   STACKTOP = sp; //@line 11410
   return;
  }
 }
 $18 = HEAP32[$8 + 1328 >> 2] | 0; //@line 11414
 HEAP32[$6 >> 2] = 273; //@line 11415
 HEAP32[$6 + 4 >> 2] = 0; //@line 11417
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 11418
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 11419
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 11419
 $19 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($18, $8, $$byval_copy) | 0; //@line 11420
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 461; //@line 11423
  $20 = $ReallocAsyncCtx2 + 4 | 0; //@line 11424
  HEAP32[$20 >> 2] = $6; //@line 11425
  $21 = $ReallocAsyncCtx2 + 8 | 0; //@line 11426
  HEAP32[$21 >> 2] = $8; //@line 11427
  $22 = $ReallocAsyncCtx2 + 12 | 0; //@line 11428
  HEAP32[$22 >> 2] = $AsyncRetVal; //@line 11429
  sp = STACKTOP; //@line 11430
  STACKTOP = sp; //@line 11431
  return;
 }
 HEAP32[___async_retval >> 2] = $19; //@line 11434
 ___async_unwind = 0; //@line 11435
 HEAP32[$ReallocAsyncCtx2 >> 2] = 461; //@line 11436
 $20 = $ReallocAsyncCtx2 + 4 | 0; //@line 11437
 HEAP32[$20 >> 2] = $6; //@line 11438
 $21 = $ReallocAsyncCtx2 + 8 | 0; //@line 11439
 HEAP32[$21 >> 2] = $8; //@line 11440
 $22 = $ReallocAsyncCtx2 + 12 | 0; //@line 11441
 HEAP32[$22 >> 2] = $AsyncRetVal; //@line 11442
 sp = STACKTOP; //@line 11443
 STACKTOP = sp; //@line 11444
 return;
}
function __ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$026 = 0, $10 = 0, $15 = 0, $21 = 0.0, $24 = 0.0, $27 = 0, $34 = 0, $35 = 0, $38 = 0, $43 = 0, $46 = 0, $48 = 0, $50 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 22073
 $6 = HEAP32[$0 + 112 >> 2] | 0; //@line 22077
 $7 = $1 + 2 | 0; //@line 22078
 $8 = HEAP8[$7 >> 0] | 0; //@line 22079
 $10 = HEAPU8[$1 >> 0] | 0; //@line 22081
 $15 = HEAP8[(HEAP32[$0 + 72 >> 2] | 0) + ((HEAPU8[$6 + ($10 * 12 | 0) + 9 >> 0] | 0) * 24 | 0) + 2 >> 0] | 0; //@line 22086
 if ($8 << 24 >> 24 > $15 << 24 >> 24) {
  HEAP8[$7 >> 0] = $15; //@line 22089
  $27 = $15; //@line 22090
 } else {
  $27 = $8; //@line 22092
 }
 if (!$2) {
  $$0 = HEAP32[$6 + ($10 * 12 | 0) >> 2] | 0; //@line 22098
 } else {
  $$0 = $2; //@line 22100
 }
 $21 = +HEAPF32[$1 + 4 >> 2]; //@line 22103
 if ($21 > 0.0) {
  $24 = +HEAPF32[$1 + 8 >> 2]; //@line 22107
  if ($24 > 0.0) {
   $$026 = ~~+Math_floor(+($21 - +($27 << 24 >> 24 << 1 >>> 0) - $24)); //@line 22117
  } else {
   $$026 = $27; //@line 22119
  }
 } else {
  $$026 = $27; //@line 22122
 }
 $34 = $0 + 4 | 0; //@line 22124
 $35 = HEAP32[$34 >> 2] | 0; //@line 22125
 $38 = HEAP32[(HEAP32[$35 >> 2] | 0) + 72 >> 2] | 0; //@line 22128
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 22129
 FUNCTION_TABLE_vi[$38 & 1023]($35); //@line 22130
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 534; //@line 22133
  HEAP32[$AsyncCtx + 4 >> 2] = $34; //@line 22135
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 22137
  HEAP32[$AsyncCtx + 12 >> 2] = $$0; //@line 22139
  HEAP8[$AsyncCtx + 16 >> 0] = $$026; //@line 22141
  sp = STACKTOP; //@line 22142
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 22145
 $43 = HEAP32[$34 >> 2] | 0; //@line 22146
 $46 = HEAP32[(HEAP32[$43 >> 2] | 0) + 68 >> 2] | 0; //@line 22149
 $48 = HEAP16[$1 + 12 >> 1] | 0; //@line 22151
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 22152
 FUNCTION_TABLE_viiii[$46 & 7]($43, $$0, $$026, $48); //@line 22153
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 535; //@line 22156
  HEAP32[$AsyncCtx2 + 4 >> 2] = $34; //@line 22158
  sp = STACKTOP; //@line 22159
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 22162
 $50 = HEAP32[$34 >> 2] | 0; //@line 22163
 $53 = HEAP32[(HEAP32[$50 >> 2] | 0) + 76 >> 2] | 0; //@line 22166
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 22167
 FUNCTION_TABLE_vi[$53 & 1023]($50); //@line 22168
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 536; //@line 22171
  sp = STACKTOP; //@line 22172
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 22175
  return;
 }
}
function _mbedtls_cipher_update__async_cb_322($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$1 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $26 = 0, $27 = 0, $29 = 0, $34 = 0, $4 = 0, $43 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $52 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 12128
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12130
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12132
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12134
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12136
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12138
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12140
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 12142
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 12144
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 12146
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 12148
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 12150
 if ($AsyncRetVal | 0) {
  $$1 = $AsyncRetVal; //@line 12153
  $52 = ___async_retval; //@line 12154
  HEAP32[$52 >> 2] = $$1; //@line 12155
  return;
 }
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + $4; //@line 12160
 HEAP32[$8 >> 2] = 0; //@line 12162
 $26 = $10 + $12 | 0; //@line 12163
 $27 = $14 - $12 | 0; //@line 12164
 if (!$27) {
  $$1 = 0; //@line 12167
  $52 = ___async_retval; //@line 12168
  HEAP32[$52 >> 2] = $$1; //@line 12169
  return;
 }
 $29 = ($27 >>> 0) % ($4 >>> 0) | 0; //@line 12172
 if (!$29) {
  $$0 = (HEAP32[$16 >> 2] | 0) == 0 ? $4 : 0; //@line 12178
 } else {
  $$0 = $29; //@line 12180
 }
 $34 = $27 - $$0 | 0; //@line 12183
 _memcpy($18 + 20 | 0, $26 + $34 | 0, $$0 | 0) | 0; //@line 12185
 HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + $$0; //@line 12188
 if (!$34) {
  $$1 = 0; //@line 12191
  $52 = ___async_retval; //@line 12192
  HEAP32[$52 >> 2] = $$1; //@line 12193
  return;
 }
 $43 = HEAP32[(HEAP32[(HEAP32[$20 >> 2] | 0) + 28 >> 2] | 0) + 8 >> 2] | 0; //@line 12200
 $45 = HEAP32[$18 + 60 >> 2] | 0; //@line 12202
 $46 = HEAP32[$16 >> 2] | 0; //@line 12203
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 12205
 $48 = FUNCTION_TABLE_iiiiiii[$43 & 3]($45, $46, $34, $18 + 40 | 0, $26, $6 + $4 | 0) | 0; //@line 12206
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 577; //@line 12209
  $49 = $ReallocAsyncCtx3 + 4 | 0; //@line 12210
  HEAP32[$49 >> 2] = $2; //@line 12211
  $50 = $ReallocAsyncCtx3 + 8 | 0; //@line 12212
  HEAP32[$50 >> 2] = $34; //@line 12213
  sp = STACKTOP; //@line 12214
  return;
 }
 HEAP32[___async_retval >> 2] = $48; //@line 12218
 ___async_unwind = 0; //@line 12219
 HEAP32[$ReallocAsyncCtx3 >> 2] = 577; //@line 12220
 $49 = $ReallocAsyncCtx3 + 4 | 0; //@line 12221
 HEAP32[$49 >> 2] = $2; //@line 12222
 $50 = $ReallocAsyncCtx3 + 8 | 0; //@line 12223
 HEAP32[$50 >> 2] = $34; //@line 12224
 sp = STACKTOP; //@line 12225
 return;
}
function __ZN14lorawan_timersD2Ev($0) {
 $0 = $0 | 0;
 var $13 = 0, $16 = 0, $2 = 0, $20 = 0, $23 = 0, $27 = 0, $30 = 0, $34 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 8171
 $2 = HEAP32[$0 + 108 >> 2] | 0; //@line 8173
 do {
  if ($2 | 0) {
   $6 = HEAP32[$2 + 8 >> 2] | 0; //@line 8179
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 8180
   FUNCTION_TABLE_vi[$6 & 1023]($0 + 96 | 0); //@line 8181
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 263; //@line 8184
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 8186
    sp = STACKTOP; //@line 8187
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 8190
    break;
   }
  }
 } while (0);
 $9 = HEAP32[$0 + 88 >> 2] | 0; //@line 8196
 do {
  if ($9 | 0) {
   $13 = HEAP32[$9 + 8 >> 2] | 0; //@line 8202
   $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8203
   FUNCTION_TABLE_vi[$13 & 1023]($0 + 76 | 0); //@line 8204
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 264; //@line 8207
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 8209
    sp = STACKTOP; //@line 8210
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 8213
    break;
   }
  }
 } while (0);
 $16 = HEAP32[$0 + 68 >> 2] | 0; //@line 8219
 do {
  if ($16 | 0) {
   $20 = HEAP32[$16 + 8 >> 2] | 0; //@line 8225
   $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8226
   FUNCTION_TABLE_vi[$20 & 1023]($0 + 56 | 0); //@line 8227
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 265; //@line 8230
    HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 8232
    sp = STACKTOP; //@line 8233
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 8236
    break;
   }
  }
 } while (0);
 $23 = HEAP32[$0 + 48 >> 2] | 0; //@line 8242
 do {
  if ($23 | 0) {
   $27 = HEAP32[$23 + 8 >> 2] | 0; //@line 8248
   $AsyncCtx11 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8249
   FUNCTION_TABLE_vi[$27 & 1023]($0 + 36 | 0); //@line 8250
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 266; //@line 8253
    HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 8255
    sp = STACKTOP; //@line 8256
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 8259
    break;
   }
  }
 } while (0);
 $30 = HEAP32[$0 + 28 >> 2] | 0; //@line 8265
 if (!$30) {
  return;
 }
 $34 = HEAP32[$30 + 8 >> 2] | 0; //@line 8272
 $AsyncCtx15 = _emscripten_alloc_async_context(4, sp) | 0; //@line 8273
 FUNCTION_TABLE_vi[$34 & 1023]($0 + 16 | 0); //@line 8274
 if (___async) {
  HEAP32[$AsyncCtx15 >> 2] = 267; //@line 8277
  sp = STACKTOP; //@line 8278
  return;
 }
 _emscripten_free_async_context($AsyncCtx15 | 0); //@line 8281
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_211($0) {
 $0 = $0 | 0;
 var $$expand_i1_val = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 2716
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2718
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2720
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2722
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2724
 if ((HEAP32[___async_retval >> 2] | 0) < ($2 | 0)) {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 2729
  $10 = __ZN4mbed5Timer7read_msEv($4) | 0; //@line 2730
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 57; //@line 2733
   $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 2734
   HEAP32[$11 >> 2] = $2; //@line 2735
   $12 = $ReallocAsyncCtx5 + 8 | 0; //@line 2736
   HEAP32[$12 >> 2] = $4; //@line 2737
   $13 = $ReallocAsyncCtx5 + 12 | 0; //@line 2738
   HEAP32[$13 >> 2] = $6; //@line 2739
   $14 = $ReallocAsyncCtx5 + 16 | 0; //@line 2740
   HEAP32[$14 >> 2] = $8; //@line 2741
   sp = STACKTOP; //@line 2742
   return;
  }
  HEAP32[___async_retval >> 2] = $10; //@line 2746
  ___async_unwind = 0; //@line 2747
  HEAP32[$ReallocAsyncCtx5 >> 2] = 57; //@line 2748
  $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 2749
  HEAP32[$11 >> 2] = $2; //@line 2750
  $12 = $ReallocAsyncCtx5 + 8 | 0; //@line 2751
  HEAP32[$12 >> 2] = $4; //@line 2752
  $13 = $ReallocAsyncCtx5 + 12 | 0; //@line 2753
  HEAP32[$13 >> 2] = $6; //@line 2754
  $14 = $ReallocAsyncCtx5 + 16 | 0; //@line 2755
  HEAP32[$14 >> 2] = $8; //@line 2756
  sp = STACKTOP; //@line 2757
  return;
 } else {
  $19 = HEAP32[(HEAP32[$6 >> 2] | 0) + 8 >> 2] | 0; //@line 2762
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 2763
  FUNCTION_TABLE_vi[$19 & 1023]($6); //@line 2764
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 58; //@line 2767
   $20 = $ReallocAsyncCtx2 + 4 | 0; //@line 2768
   HEAP32[$20 >> 2] = $4; //@line 2769
   $21 = $ReallocAsyncCtx2 + 8 | 0; //@line 2770
   HEAP32[$21 >> 2] = $8; //@line 2771
   $22 = $ReallocAsyncCtx2 + 12 | 0; //@line 2772
   $$expand_i1_val = 1; //@line 2773
   HEAP8[$22 >> 0] = $$expand_i1_val; //@line 2774
   sp = STACKTOP; //@line 2775
   return;
  }
  ___async_unwind = 0; //@line 2778
  HEAP32[$ReallocAsyncCtx2 >> 2] = 58; //@line 2779
  $20 = $ReallocAsyncCtx2 + 4 | 0; //@line 2780
  HEAP32[$20 >> 2] = $4; //@line 2781
  $21 = $ReallocAsyncCtx2 + 8 | 0; //@line 2782
  HEAP32[$21 >> 2] = $8; //@line 2783
  $22 = $ReallocAsyncCtx2 + 12 | 0; //@line 2784
  $$expand_i1_val = 1; //@line 2785
  HEAP8[$22 >> 0] = $$expand_i1_val; //@line 2786
  sp = STACKTOP; //@line 2787
  return;
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_112($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 28016
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28020
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28022
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 28024
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28026
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 28028
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28030
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28032
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 28034
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 28036
 $22 = HEAP8[$0 + 44 >> 0] & 1; //@line 28039
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 28041
 do {
  if ((HEAP32[$0 + 4 >> 2] | 0) > 1) {
   $26 = $4 + 24 | 0; //@line 28045
   $27 = $6 + 24 | 0; //@line 28046
   $28 = $4 + 8 | 0; //@line 28047
   $29 = $6 + 54 | 0; //@line 28048
   if (!(HEAP8[$29 >> 0] | 0)) {
    if (!(HEAP8[$10 >> 0] | 0)) {
     if (HEAP8[$14 >> 0] | 0) {
      if (!(HEAP32[$28 >> 2] & 1)) {
       break;
      }
     }
    } else {
     if ((HEAP32[$27 >> 2] | 0) == 1) {
      break;
     }
     if (!(HEAP32[$28 >> 2] & 2)) {
      break;
     }
    }
    HEAP8[$10 >> 0] = 0; //@line 28078
    HEAP8[$14 >> 0] = 0; //@line 28079
    $ReallocAsyncCtx = _emscripten_realloc_async_context(60) | 0; //@line 28080
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($26, $6, $16, $18, $20, $22); //@line 28081
    if (!___async) {
     ___async_unwind = 0; //@line 28084
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 697; //@line 28086
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $26; //@line 28088
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $24; //@line 28090
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $29; //@line 28092
    HEAP8[$ReallocAsyncCtx + 16 >> 0] = $8; //@line 28094
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 28096
    HEAP8[$ReallocAsyncCtx + 24 >> 0] = $12; //@line 28098
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 28100
    HEAP32[$ReallocAsyncCtx + 32 >> 2] = $27; //@line 28102
    HEAP32[$ReallocAsyncCtx + 36 >> 2] = $28; //@line 28104
    HEAP32[$ReallocAsyncCtx + 40 >> 2] = $6; //@line 28106
    HEAP32[$ReallocAsyncCtx + 44 >> 2] = $16; //@line 28108
    HEAP32[$ReallocAsyncCtx + 48 >> 2] = $18; //@line 28110
    HEAP32[$ReallocAsyncCtx + 52 >> 2] = $20; //@line 28112
    HEAP8[$ReallocAsyncCtx + 56 >> 0] = $22 & 1; //@line 28115
    sp = STACKTOP; //@line 28116
    return;
   }
  }
 } while (0);
 HEAP8[$10 >> 0] = $8; //@line 28121
 HEAP8[$14 >> 0] = $12; //@line 28122
 return;
}
function __Z28compute_skeys_for_join_framePKhS0_tPhS1_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0$$sroa_idx12 = 0, $10 = 0, $12 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 19173
 STACKTOP = STACKTOP + 16 | 0; //@line 19174
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 19174
 $5 = sp; //@line 19175
 _mbedtls_aes_init(21312); //@line 19176
 $6 = _mbedtls_aes_setkey_enc(21312, $0, 128) | 0; //@line 19177
 if ($6 | 0) {
  $$0 = $6; //@line 19180
  _mbedtls_aes_free(21312); //@line 19181
  STACKTOP = sp; //@line 19182
  return $$0 | 0; //@line 19182
 }
 $8 = $5 + 9 | 0; //@line 19184
 HEAP8[$8 >> 0] = 0; //@line 19185
 HEAP8[$8 + 1 >> 0] = 0; //@line 19185
 HEAP8[$8 + 2 >> 0] = 0; //@line 19185
 HEAP8[$8 + 3 >> 0] = 0; //@line 19185
 HEAP8[$8 + 4 >> 0] = 0; //@line 19185
 HEAP8[$8 + 5 >> 0] = 0; //@line 19185
 HEAP8[$8 + 6 >> 0] = 0; //@line 19185
 HEAP8[$5 >> 0] = 1; //@line 19186
 $9 = $5 + 1 | 0; //@line 19187
 HEAP8[$9 >> 0] = HEAP8[$1 >> 0] | 0; //@line 19188
 HEAP8[$9 + 1 >> 0] = HEAP8[$1 + 1 >> 0] | 0; //@line 19188
 HEAP8[$9 + 2 >> 0] = HEAP8[$1 + 2 >> 0] | 0; //@line 19188
 HEAP8[$9 + 3 >> 0] = HEAP8[$1 + 3 >> 0] | 0; //@line 19188
 HEAP8[$9 + 4 >> 0] = HEAP8[$1 + 4 >> 0] | 0; //@line 19188
 HEAP8[$9 + 5 >> 0] = HEAP8[$1 + 5 >> 0] | 0; //@line 19188
 $$0$$sroa_idx12 = $5 + 7 | 0; //@line 19189
 HEAP8[$$0$$sroa_idx12 >> 0] = $2; //@line 19190
 HEAP8[$$0$$sroa_idx12 + 1 >> 0] = $2 >> 8; //@line 19190
 $10 = _mbedtls_aes_crypt_ecb(21312, 1, $5, $3) | 0; //@line 19191
 if ($10 | 0) {
  $$0 = $10; //@line 19194
  _mbedtls_aes_free(21312); //@line 19195
  STACKTOP = sp; //@line 19196
  return $$0 | 0; //@line 19196
 }
 $12 = $5 + 9 | 0; //@line 19198
 HEAP8[$12 >> 0] = 0; //@line 19199
 HEAP8[$12 + 1 >> 0] = 0; //@line 19199
 HEAP8[$12 + 2 >> 0] = 0; //@line 19199
 HEAP8[$12 + 3 >> 0] = 0; //@line 19199
 HEAP8[$12 + 4 >> 0] = 0; //@line 19199
 HEAP8[$12 + 5 >> 0] = 0; //@line 19199
 HEAP8[$12 + 6 >> 0] = 0; //@line 19199
 HEAP8[$5 >> 0] = 2; //@line 19200
 HEAP8[$9 >> 0] = HEAP8[$1 >> 0] | 0; //@line 19201
 HEAP8[$9 + 1 >> 0] = HEAP8[$1 + 1 >> 0] | 0; //@line 19201
 HEAP8[$9 + 2 >> 0] = HEAP8[$1 + 2 >> 0] | 0; //@line 19201
 HEAP8[$9 + 3 >> 0] = HEAP8[$1 + 3 >> 0] | 0; //@line 19201
 HEAP8[$9 + 4 >> 0] = HEAP8[$1 + 4 >> 0] | 0; //@line 19201
 HEAP8[$9 + 5 >> 0] = HEAP8[$1 + 5 >> 0] | 0; //@line 19201
 HEAP8[$$0$$sroa_idx12 >> 0] = $2; //@line 19202
 HEAP8[$$0$$sroa_idx12 + 1 >> 0] = $2 >> 8; //@line 19202
 $$0 = _mbedtls_aes_crypt_ecb(21312, 1, $5, $4) | 0; //@line 19204
 _mbedtls_aes_free(21312); //@line 19205
 STACKTOP = sp; //@line 19206
 return $$0 | 0; //@line 19206
}
function __ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_230($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $15 = 0, $16 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 4025
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4031
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4033
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 4035
 $9 = $6 + 32 | 0; //@line 4036
 $10 = $6 + 44 | 0; //@line 4037
 $11 = HEAP32[$10 >> 2] | 0; //@line 4038
 if (!$11) {
  return;
 }
 $13 = $8 + 1912 | 0; //@line 4043
 if (($13 | 0) == ($9 | 0)) {
  return;
 }
 $15 = $8 + 1924 | 0; //@line 4048
 $16 = HEAP32[$15 >> 2] | 0; //@line 4049
 if (!$16) {
  $25 = HEAP32[$11 + 4 >> 2] | 0; //@line 4053
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 4054
  FUNCTION_TABLE_vii[$25 & 31]($13, $9); //@line 4055
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 234; //@line 4058
   $26 = $ReallocAsyncCtx6 + 4 | 0; //@line 4059
   HEAP32[$26 >> 2] = $10; //@line 4060
   $27 = $ReallocAsyncCtx6 + 8 | 0; //@line 4061
   HEAP32[$27 >> 2] = $15; //@line 4062
   sp = STACKTOP; //@line 4063
   return;
  }
  ___async_unwind = 0; //@line 4066
  HEAP32[$ReallocAsyncCtx6 >> 2] = 234; //@line 4067
  $26 = $ReallocAsyncCtx6 + 4 | 0; //@line 4068
  HEAP32[$26 >> 2] = $10; //@line 4069
  $27 = $ReallocAsyncCtx6 + 8 | 0; //@line 4070
  HEAP32[$27 >> 2] = $15; //@line 4071
  sp = STACKTOP; //@line 4072
  return;
 } else {
  $19 = HEAP32[$16 + 8 >> 2] | 0; //@line 4076
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 4077
  FUNCTION_TABLE_vi[$19 & 1023]($13); //@line 4078
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 233; //@line 4081
   $20 = $ReallocAsyncCtx5 + 4 | 0; //@line 4082
   HEAP32[$20 >> 2] = $10; //@line 4083
   $21 = $ReallocAsyncCtx5 + 8 | 0; //@line 4084
   HEAP32[$21 >> 2] = $15; //@line 4085
   $22 = $ReallocAsyncCtx5 + 12 | 0; //@line 4086
   HEAP32[$22 >> 2] = $13; //@line 4087
   $23 = $ReallocAsyncCtx5 + 16 | 0; //@line 4088
   HEAP32[$23 >> 2] = $9; //@line 4089
   sp = STACKTOP; //@line 4090
   return;
  }
  ___async_unwind = 0; //@line 4093
  HEAP32[$ReallocAsyncCtx5 >> 2] = 233; //@line 4094
  $20 = $ReallocAsyncCtx5 + 4 | 0; //@line 4095
  HEAP32[$20 >> 2] = $10; //@line 4096
  $21 = $ReallocAsyncCtx5 + 8 | 0; //@line 4097
  HEAP32[$21 >> 2] = $15; //@line 4098
  $22 = $ReallocAsyncCtx5 + 12 | 0; //@line 4099
  HEAP32[$22 >> 2] = $13; //@line 4100
  $23 = $ReallocAsyncCtx5 + 16 | 0; //@line 4101
  HEAP32[$23 >> 2] = $9; //@line 4102
  sp = STACKTOP; //@line 4103
  return;
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $4 = 0, $43 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 27900
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27904
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27906
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 27908
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27910
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 27912
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 27914
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 27916
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 27918
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 27920
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 27922
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 27924
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 27926
 $28 = HEAP8[$0 + 56 >> 0] & 1; //@line 27929
 $43 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 27930
 do {
  if ($43 >>> 0 < $4 >>> 0) {
   if (!(HEAP8[$6 >> 0] | 0)) {
    if (!(HEAP8[$10 >> 0] | 0)) {
     if (HEAP8[$14 >> 0] | 0) {
      if (!(HEAP32[$18 >> 2] & 1)) {
       break;
      }
     }
    } else {
     if ((HEAP32[$16 >> 2] | 0) == 1) {
      break;
     }
     if (!(HEAP32[$18 >> 2] & 2)) {
      break;
     }
    }
    HEAP8[$10 >> 0] = 0; //@line 27963
    HEAP8[$14 >> 0] = 0; //@line 27964
    $ReallocAsyncCtx = _emscripten_realloc_async_context(60) | 0; //@line 27965
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($43, $20, $22, $24, $26, $28); //@line 27966
    if (!___async) {
     ___async_unwind = 0; //@line 27969
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 697; //@line 27971
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $43; //@line 27973
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 27975
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 27977
    HEAP8[$ReallocAsyncCtx + 16 >> 0] = $8; //@line 27979
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 27981
    HEAP8[$ReallocAsyncCtx + 24 >> 0] = $12; //@line 27983
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 27985
    HEAP32[$ReallocAsyncCtx + 32 >> 2] = $16; //@line 27987
    HEAP32[$ReallocAsyncCtx + 36 >> 2] = $18; //@line 27989
    HEAP32[$ReallocAsyncCtx + 40 >> 2] = $20; //@line 27991
    HEAP32[$ReallocAsyncCtx + 44 >> 2] = $22; //@line 27993
    HEAP32[$ReallocAsyncCtx + 48 >> 2] = $24; //@line 27995
    HEAP32[$ReallocAsyncCtx + 52 >> 2] = $26; //@line 27997
    HEAP8[$ReallocAsyncCtx + 56 >> 0] = $28 & 1; //@line 28000
    sp = STACKTOP; //@line 28001
    return;
   }
  }
 } while (0);
 HEAP8[$10 >> 0] = $8; //@line 28006
 HEAP8[$14 >> 0] = $12; //@line 28007
 return;
}
function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0, aligned_dest_end = 0, block_aligned_dest_end = 0, dest_end = 0;
 if ((num | 0) >= 8192) {
  return _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0; //@line 33248
 }
 ret = dest | 0; //@line 33251
 dest_end = dest + num | 0; //@line 33252
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if (!num) return ret | 0; //@line 33256
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 33257
   dest = dest + 1 | 0; //@line 33258
   src = src + 1 | 0; //@line 33259
   num = num - 1 | 0; //@line 33260
  }
  aligned_dest_end = dest_end & -4 | 0; //@line 33262
  block_aligned_dest_end = aligned_dest_end - 64 | 0; //@line 33263
  while ((dest | 0) <= (block_aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 33265
   HEAP32[dest + 4 >> 2] = HEAP32[src + 4 >> 2]; //@line 33266
   HEAP32[dest + 8 >> 2] = HEAP32[src + 8 >> 2]; //@line 33267
   HEAP32[dest + 12 >> 2] = HEAP32[src + 12 >> 2]; //@line 33268
   HEAP32[dest + 16 >> 2] = HEAP32[src + 16 >> 2]; //@line 33269
   HEAP32[dest + 20 >> 2] = HEAP32[src + 20 >> 2]; //@line 33270
   HEAP32[dest + 24 >> 2] = HEAP32[src + 24 >> 2]; //@line 33271
   HEAP32[dest + 28 >> 2] = HEAP32[src + 28 >> 2]; //@line 33272
   HEAP32[dest + 32 >> 2] = HEAP32[src + 32 >> 2]; //@line 33273
   HEAP32[dest + 36 >> 2] = HEAP32[src + 36 >> 2]; //@line 33274
   HEAP32[dest + 40 >> 2] = HEAP32[src + 40 >> 2]; //@line 33275
   HEAP32[dest + 44 >> 2] = HEAP32[src + 44 >> 2]; //@line 33276
   HEAP32[dest + 48 >> 2] = HEAP32[src + 48 >> 2]; //@line 33277
   HEAP32[dest + 52 >> 2] = HEAP32[src + 52 >> 2]; //@line 33278
   HEAP32[dest + 56 >> 2] = HEAP32[src + 56 >> 2]; //@line 33279
   HEAP32[dest + 60 >> 2] = HEAP32[src + 60 >> 2]; //@line 33280
   dest = dest + 64 | 0; //@line 33281
   src = src + 64 | 0; //@line 33282
  }
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 33285
   dest = dest + 4 | 0; //@line 33286
   src = src + 4 | 0; //@line 33287
  }
 } else {
  aligned_dest_end = dest_end - 4 | 0; //@line 33291
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 33293
   HEAP8[dest + 1 >> 0] = HEAP8[src + 1 >> 0] | 0; //@line 33294
   HEAP8[dest + 2 >> 0] = HEAP8[src + 2 >> 0] | 0; //@line 33295
   HEAP8[dest + 3 >> 0] = HEAP8[src + 3 >> 0] | 0; //@line 33296
   dest = dest + 4 | 0; //@line 33297
   src = src + 4 | 0; //@line 33298
  }
 }
 while ((dest | 0) < (dest_end | 0)) {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 33303
  dest = dest + 1 | 0; //@line 33304
  src = src + 1 | 0; //@line 33305
 }
 return ret | 0; //@line 33307
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_297($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx36 = 0, sp = 0;
 sp = STACKTOP; //@line 9530
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9532
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9534
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9536
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9538
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 9540
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx36 = _emscripten_realloc_async_context(24) | 0; //@line 9545
  _mbed_assert_internal(12025, 12034, 201); //@line 9546
  if (___async) {
   HEAP32[$ReallocAsyncCtx36 >> 2] = 299; //@line 9549
   $13 = $ReallocAsyncCtx36 + 4 | 0; //@line 9550
   HEAP32[$13 >> 2] = $2; //@line 9551
   $14 = $ReallocAsyncCtx36 + 8 | 0; //@line 9552
   HEAP32[$14 >> 2] = $4; //@line 9553
   $15 = $ReallocAsyncCtx36 + 12 | 0; //@line 9554
   HEAP32[$15 >> 2] = $6; //@line 9555
   $16 = $ReallocAsyncCtx36 + 16 | 0; //@line 9556
   HEAP32[$16 >> 2] = $8; //@line 9557
   $17 = $ReallocAsyncCtx36 + 20 | 0; //@line 9558
   HEAP32[$17 >> 2] = $10; //@line 9559
   sp = STACKTOP; //@line 9560
   return;
  }
  ___async_unwind = 0; //@line 9563
  HEAP32[$ReallocAsyncCtx36 >> 2] = 299; //@line 9564
  $13 = $ReallocAsyncCtx36 + 4 | 0; //@line 9565
  HEAP32[$13 >> 2] = $2; //@line 9566
  $14 = $ReallocAsyncCtx36 + 8 | 0; //@line 9567
  HEAP32[$14 >> 2] = $4; //@line 9568
  $15 = $ReallocAsyncCtx36 + 12 | 0; //@line 9569
  HEAP32[$15 >> 2] = $6; //@line 9570
  $16 = $ReallocAsyncCtx36 + 16 | 0; //@line 9571
  HEAP32[$16 >> 2] = $8; //@line 9572
  $17 = $ReallocAsyncCtx36 + 20 | 0; //@line 9573
  HEAP32[$17 >> 2] = $10; //@line 9574
  sp = STACKTOP; //@line 9575
  return;
 }
 $18 = $4 + 944 | 0; //@line 9578
 HEAP8[$18 >> 0] = HEAP8[$18 >> 0] | 34; //@line 9581
 $21 = HEAP32[$6 >> 2] | 0; //@line 9582
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(12) | 0; //@line 9584
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($21, $4 + 996 | 0, 1); //@line 9585
 if (___async) {
  HEAP32[$ReallocAsyncCtx13 >> 2] = 300; //@line 9588
  $23 = $ReallocAsyncCtx13 + 4 | 0; //@line 9589
  HEAP32[$23 >> 2] = $8; //@line 9590
  $24 = $ReallocAsyncCtx13 + 8 | 0; //@line 9591
  HEAP32[$24 >> 2] = $10; //@line 9592
  sp = STACKTOP; //@line 9593
  return;
 }
 ___async_unwind = 0; //@line 9596
 HEAP32[$ReallocAsyncCtx13 >> 2] = 300; //@line 9597
 $23 = $ReallocAsyncCtx13 + 4 | 0; //@line 9598
 HEAP32[$23 >> 2] = $8; //@line 9599
 $24 = $ReallocAsyncCtx13 + 8 | 0; //@line 9600
 HEAP32[$24 >> 2] = $10; //@line 9601
 sp = STACKTOP; //@line 9602
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_296($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx35 = 0, sp = 0;
 sp = STACKTOP; //@line 9451
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9453
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9455
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9457
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9459
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 9461
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx35 = _emscripten_realloc_async_context(24) | 0; //@line 9466
  _mbed_assert_internal(12025, 12034, 201); //@line 9467
  if (___async) {
   HEAP32[$ReallocAsyncCtx35 >> 2] = 304; //@line 9470
   $13 = $ReallocAsyncCtx35 + 4 | 0; //@line 9471
   HEAP32[$13 >> 2] = $2; //@line 9472
   $14 = $ReallocAsyncCtx35 + 8 | 0; //@line 9473
   HEAP32[$14 >> 2] = $4; //@line 9474
   $15 = $ReallocAsyncCtx35 + 12 | 0; //@line 9475
   HEAP32[$15 >> 2] = $6; //@line 9476
   $16 = $ReallocAsyncCtx35 + 16 | 0; //@line 9477
   HEAP32[$16 >> 2] = $8; //@line 9478
   $17 = $ReallocAsyncCtx35 + 20 | 0; //@line 9479
   HEAP32[$17 >> 2] = $10; //@line 9480
   sp = STACKTOP; //@line 9481
   return;
  }
  ___async_unwind = 0; //@line 9484
  HEAP32[$ReallocAsyncCtx35 >> 2] = 304; //@line 9485
  $13 = $ReallocAsyncCtx35 + 4 | 0; //@line 9486
  HEAP32[$13 >> 2] = $2; //@line 9487
  $14 = $ReallocAsyncCtx35 + 8 | 0; //@line 9488
  HEAP32[$14 >> 2] = $4; //@line 9489
  $15 = $ReallocAsyncCtx35 + 12 | 0; //@line 9490
  HEAP32[$15 >> 2] = $6; //@line 9491
  $16 = $ReallocAsyncCtx35 + 16 | 0; //@line 9492
  HEAP32[$16 >> 2] = $8; //@line 9493
  $17 = $ReallocAsyncCtx35 + 20 | 0; //@line 9494
  HEAP32[$17 >> 2] = $10; //@line 9495
  sp = STACKTOP; //@line 9496
  return;
 }
 $18 = $4 + 944 | 0; //@line 9499
 HEAP8[$18 >> 0] = HEAP8[$18 >> 0] | 34; //@line 9502
 $21 = HEAP32[$6 >> 2] | 0; //@line 9503
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(12) | 0; //@line 9505
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($21, $4 + 996 | 0, 1); //@line 9506
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 305; //@line 9509
  $23 = $ReallocAsyncCtx12 + 4 | 0; //@line 9510
  HEAP32[$23 >> 2] = $8; //@line 9511
  $24 = $ReallocAsyncCtx12 + 8 | 0; //@line 9512
  HEAP32[$24 >> 2] = $10; //@line 9513
  sp = STACKTOP; //@line 9514
  return;
 }
 ___async_unwind = 0; //@line 9517
 HEAP32[$ReallocAsyncCtx12 >> 2] = 305; //@line 9518
 $23 = $ReallocAsyncCtx12 + 4 | 0; //@line 9519
 HEAP32[$23 >> 2] = $8; //@line 9520
 $24 = $ReallocAsyncCtx12 + 8 | 0; //@line 9521
 HEAP32[$24 >> 2] = $10; //@line 9522
 sp = STACKTOP; //@line 9523
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_295($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx34 = 0, sp = 0;
 sp = STACKTOP; //@line 9372
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9374
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9376
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9378
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9380
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 9382
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx34 = _emscripten_realloc_async_context(24) | 0; //@line 9387
  _mbed_assert_internal(12025, 12034, 201); //@line 9388
  if (___async) {
   HEAP32[$ReallocAsyncCtx34 >> 2] = 307; //@line 9391
   $13 = $ReallocAsyncCtx34 + 4 | 0; //@line 9392
   HEAP32[$13 >> 2] = $2; //@line 9393
   $14 = $ReallocAsyncCtx34 + 8 | 0; //@line 9394
   HEAP32[$14 >> 2] = $4; //@line 9395
   $15 = $ReallocAsyncCtx34 + 12 | 0; //@line 9396
   HEAP32[$15 >> 2] = $6; //@line 9397
   $16 = $ReallocAsyncCtx34 + 16 | 0; //@line 9398
   HEAP32[$16 >> 2] = $8; //@line 9399
   $17 = $ReallocAsyncCtx34 + 20 | 0; //@line 9400
   HEAP32[$17 >> 2] = $10; //@line 9401
   sp = STACKTOP; //@line 9402
   return;
  }
  ___async_unwind = 0; //@line 9405
  HEAP32[$ReallocAsyncCtx34 >> 2] = 307; //@line 9406
  $13 = $ReallocAsyncCtx34 + 4 | 0; //@line 9407
  HEAP32[$13 >> 2] = $2; //@line 9408
  $14 = $ReallocAsyncCtx34 + 8 | 0; //@line 9409
  HEAP32[$14 >> 2] = $4; //@line 9410
  $15 = $ReallocAsyncCtx34 + 12 | 0; //@line 9411
  HEAP32[$15 >> 2] = $6; //@line 9412
  $16 = $ReallocAsyncCtx34 + 16 | 0; //@line 9413
  HEAP32[$16 >> 2] = $8; //@line 9414
  $17 = $ReallocAsyncCtx34 + 20 | 0; //@line 9415
  HEAP32[$17 >> 2] = $10; //@line 9416
  sp = STACKTOP; //@line 9417
  return;
 }
 $18 = $4 + 944 | 0; //@line 9420
 HEAP8[$18 >> 0] = HEAP8[$18 >> 0] | 34; //@line 9423
 $21 = HEAP32[$6 >> 2] | 0; //@line 9424
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(12) | 0; //@line 9426
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($21, $4 + 996 | 0, 1); //@line 9427
 if (___async) {
  HEAP32[$ReallocAsyncCtx11 >> 2] = 308; //@line 9430
  $23 = $ReallocAsyncCtx11 + 4 | 0; //@line 9431
  HEAP32[$23 >> 2] = $8; //@line 9432
  $24 = $ReallocAsyncCtx11 + 8 | 0; //@line 9433
  HEAP32[$24 >> 2] = $10; //@line 9434
  sp = STACKTOP; //@line 9435
  return;
 }
 ___async_unwind = 0; //@line 9438
 HEAP32[$ReallocAsyncCtx11 >> 2] = 308; //@line 9439
 $23 = $ReallocAsyncCtx11 + 4 | 0; //@line 9440
 HEAP32[$23 >> 2] = $8; //@line 9441
 $24 = $ReallocAsyncCtx11 + 8 | 0; //@line 9442
 HEAP32[$24 >> 2] = $10; //@line 9443
 sp = STACKTOP; //@line 9444
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_294($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx33 = 0, sp = 0;
 sp = STACKTOP; //@line 9293
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9295
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9297
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9299
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9301
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 9303
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx33 = _emscripten_realloc_async_context(24) | 0; //@line 9308
  _mbed_assert_internal(12025, 12034, 201); //@line 9309
  if (___async) {
   HEAP32[$ReallocAsyncCtx33 >> 2] = 312; //@line 9312
   $13 = $ReallocAsyncCtx33 + 4 | 0; //@line 9313
   HEAP32[$13 >> 2] = $2; //@line 9314
   $14 = $ReallocAsyncCtx33 + 8 | 0; //@line 9315
   HEAP32[$14 >> 2] = $4; //@line 9316
   $15 = $ReallocAsyncCtx33 + 12 | 0; //@line 9317
   HEAP32[$15 >> 2] = $6; //@line 9318
   $16 = $ReallocAsyncCtx33 + 16 | 0; //@line 9319
   HEAP32[$16 >> 2] = $8; //@line 9320
   $17 = $ReallocAsyncCtx33 + 20 | 0; //@line 9321
   HEAP32[$17 >> 2] = $10; //@line 9322
   sp = STACKTOP; //@line 9323
   return;
  }
  ___async_unwind = 0; //@line 9326
  HEAP32[$ReallocAsyncCtx33 >> 2] = 312; //@line 9327
  $13 = $ReallocAsyncCtx33 + 4 | 0; //@line 9328
  HEAP32[$13 >> 2] = $2; //@line 9329
  $14 = $ReallocAsyncCtx33 + 8 | 0; //@line 9330
  HEAP32[$14 >> 2] = $4; //@line 9331
  $15 = $ReallocAsyncCtx33 + 12 | 0; //@line 9332
  HEAP32[$15 >> 2] = $6; //@line 9333
  $16 = $ReallocAsyncCtx33 + 16 | 0; //@line 9334
  HEAP32[$16 >> 2] = $8; //@line 9335
  $17 = $ReallocAsyncCtx33 + 20 | 0; //@line 9336
  HEAP32[$17 >> 2] = $10; //@line 9337
  sp = STACKTOP; //@line 9338
  return;
 }
 $18 = $4 + 944 | 0; //@line 9341
 HEAP8[$18 >> 0] = HEAP8[$18 >> 0] | 34; //@line 9344
 $21 = HEAP32[$6 >> 2] | 0; //@line 9345
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(12) | 0; //@line 9347
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($21, $4 + 996 | 0, 1); //@line 9348
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 313; //@line 9351
  $23 = $ReallocAsyncCtx10 + 4 | 0; //@line 9352
  HEAP32[$23 >> 2] = $8; //@line 9353
  $24 = $ReallocAsyncCtx10 + 8 | 0; //@line 9354
  HEAP32[$24 >> 2] = $10; //@line 9355
  sp = STACKTOP; //@line 9356
  return;
 }
 ___async_unwind = 0; //@line 9359
 HEAP32[$ReallocAsyncCtx10 >> 2] = 313; //@line 9360
 $23 = $ReallocAsyncCtx10 + 4 | 0; //@line 9361
 HEAP32[$23 >> 2] = $8; //@line 9362
 $24 = $ReallocAsyncCtx10 + 8 | 0; //@line 9363
 HEAP32[$24 >> 2] = $10; //@line 9364
 sp = STACKTOP; //@line 9365
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_293($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx32 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 9214
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9216
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9218
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9220
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9222
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 9224
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx32 = _emscripten_realloc_async_context(24) | 0; //@line 9229
  _mbed_assert_internal(12025, 12034, 201); //@line 9230
  if (___async) {
   HEAP32[$ReallocAsyncCtx32 >> 2] = 315; //@line 9233
   $13 = $ReallocAsyncCtx32 + 4 | 0; //@line 9234
   HEAP32[$13 >> 2] = $2; //@line 9235
   $14 = $ReallocAsyncCtx32 + 8 | 0; //@line 9236
   HEAP32[$14 >> 2] = $4; //@line 9237
   $15 = $ReallocAsyncCtx32 + 12 | 0; //@line 9238
   HEAP32[$15 >> 2] = $6; //@line 9239
   $16 = $ReallocAsyncCtx32 + 16 | 0; //@line 9240
   HEAP32[$16 >> 2] = $8; //@line 9241
   $17 = $ReallocAsyncCtx32 + 20 | 0; //@line 9242
   HEAP32[$17 >> 2] = $10; //@line 9243
   sp = STACKTOP; //@line 9244
   return;
  }
  ___async_unwind = 0; //@line 9247
  HEAP32[$ReallocAsyncCtx32 >> 2] = 315; //@line 9248
  $13 = $ReallocAsyncCtx32 + 4 | 0; //@line 9249
  HEAP32[$13 >> 2] = $2; //@line 9250
  $14 = $ReallocAsyncCtx32 + 8 | 0; //@line 9251
  HEAP32[$14 >> 2] = $4; //@line 9252
  $15 = $ReallocAsyncCtx32 + 12 | 0; //@line 9253
  HEAP32[$15 >> 2] = $6; //@line 9254
  $16 = $ReallocAsyncCtx32 + 16 | 0; //@line 9255
  HEAP32[$16 >> 2] = $8; //@line 9256
  $17 = $ReallocAsyncCtx32 + 20 | 0; //@line 9257
  HEAP32[$17 >> 2] = $10; //@line 9258
  sp = STACKTOP; //@line 9259
  return;
 }
 $18 = $4 + 944 | 0; //@line 9262
 HEAP8[$18 >> 0] = HEAP8[$18 >> 0] | 34; //@line 9265
 $21 = HEAP32[$6 >> 2] | 0; //@line 9266
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 9268
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($21, $4 + 996 | 0, 1); //@line 9269
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 316; //@line 9272
  $23 = $ReallocAsyncCtx9 + 4 | 0; //@line 9273
  HEAP32[$23 >> 2] = $8; //@line 9274
  $24 = $ReallocAsyncCtx9 + 8 | 0; //@line 9275
  HEAP32[$24 >> 2] = $10; //@line 9276
  sp = STACKTOP; //@line 9277
  return;
 }
 ___async_unwind = 0; //@line 9280
 HEAP32[$ReallocAsyncCtx9 >> 2] = 316; //@line 9281
 $23 = $ReallocAsyncCtx9 + 4 | 0; //@line 9282
 HEAP32[$23 >> 2] = $8; //@line 9283
 $24 = $ReallocAsyncCtx9 + 8 | 0; //@line 9284
 HEAP32[$24 >> 2] = $10; //@line 9285
 sp = STACKTOP; //@line 9286
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_292($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx31 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 9135
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9137
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9139
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9141
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9143
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 9145
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx31 = _emscripten_realloc_async_context(24) | 0; //@line 9150
  _mbed_assert_internal(12025, 12034, 201); //@line 9151
  if (___async) {
   HEAP32[$ReallocAsyncCtx31 >> 2] = 318; //@line 9154
   $13 = $ReallocAsyncCtx31 + 4 | 0; //@line 9155
   HEAP32[$13 >> 2] = $2; //@line 9156
   $14 = $ReallocAsyncCtx31 + 8 | 0; //@line 9157
   HEAP32[$14 >> 2] = $4; //@line 9158
   $15 = $ReallocAsyncCtx31 + 12 | 0; //@line 9159
   HEAP32[$15 >> 2] = $6; //@line 9160
   $16 = $ReallocAsyncCtx31 + 16 | 0; //@line 9161
   HEAP32[$16 >> 2] = $8; //@line 9162
   $17 = $ReallocAsyncCtx31 + 20 | 0; //@line 9163
   HEAP32[$17 >> 2] = $10; //@line 9164
   sp = STACKTOP; //@line 9165
   return;
  }
  ___async_unwind = 0; //@line 9168
  HEAP32[$ReallocAsyncCtx31 >> 2] = 318; //@line 9169
  $13 = $ReallocAsyncCtx31 + 4 | 0; //@line 9170
  HEAP32[$13 >> 2] = $2; //@line 9171
  $14 = $ReallocAsyncCtx31 + 8 | 0; //@line 9172
  HEAP32[$14 >> 2] = $4; //@line 9173
  $15 = $ReallocAsyncCtx31 + 12 | 0; //@line 9174
  HEAP32[$15 >> 2] = $6; //@line 9175
  $16 = $ReallocAsyncCtx31 + 16 | 0; //@line 9176
  HEAP32[$16 >> 2] = $8; //@line 9177
  $17 = $ReallocAsyncCtx31 + 20 | 0; //@line 9178
  HEAP32[$17 >> 2] = $10; //@line 9179
  sp = STACKTOP; //@line 9180
  return;
 }
 $18 = $4 + 944 | 0; //@line 9183
 HEAP8[$18 >> 0] = HEAP8[$18 >> 0] | 34; //@line 9186
 $21 = HEAP32[$6 >> 2] | 0; //@line 9187
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(12) | 0; //@line 9189
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($21, $4 + 996 | 0, 1); //@line 9190
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 319; //@line 9193
  $23 = $ReallocAsyncCtx8 + 4 | 0; //@line 9194
  HEAP32[$23 >> 2] = $8; //@line 9195
  $24 = $ReallocAsyncCtx8 + 8 | 0; //@line 9196
  HEAP32[$24 >> 2] = $10; //@line 9197
  sp = STACKTOP; //@line 9198
  return;
 }
 ___async_unwind = 0; //@line 9201
 HEAP32[$ReallocAsyncCtx8 >> 2] = 319; //@line 9202
 $23 = $ReallocAsyncCtx8 + 4 | 0; //@line 9203
 HEAP32[$23 >> 2] = $8; //@line 9204
 $24 = $ReallocAsyncCtx8 + 8 | 0; //@line 9205
 HEAP32[$24 >> 2] = $10; //@line 9206
 sp = STACKTOP; //@line 9207
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_291($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx30 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 9056
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9058
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9060
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9062
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9064
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 9066
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx30 = _emscripten_realloc_async_context(24) | 0; //@line 9071
  _mbed_assert_internal(12025, 12034, 201); //@line 9072
  if (___async) {
   HEAP32[$ReallocAsyncCtx30 >> 2] = 326; //@line 9075
   $13 = $ReallocAsyncCtx30 + 4 | 0; //@line 9076
   HEAP32[$13 >> 2] = $2; //@line 9077
   $14 = $ReallocAsyncCtx30 + 8 | 0; //@line 9078
   HEAP32[$14 >> 2] = $4; //@line 9079
   $15 = $ReallocAsyncCtx30 + 12 | 0; //@line 9080
   HEAP32[$15 >> 2] = $6; //@line 9081
   $16 = $ReallocAsyncCtx30 + 16 | 0; //@line 9082
   HEAP32[$16 >> 2] = $8; //@line 9083
   $17 = $ReallocAsyncCtx30 + 20 | 0; //@line 9084
   HEAP32[$17 >> 2] = $10; //@line 9085
   sp = STACKTOP; //@line 9086
   return;
  }
  ___async_unwind = 0; //@line 9089
  HEAP32[$ReallocAsyncCtx30 >> 2] = 326; //@line 9090
  $13 = $ReallocAsyncCtx30 + 4 | 0; //@line 9091
  HEAP32[$13 >> 2] = $2; //@line 9092
  $14 = $ReallocAsyncCtx30 + 8 | 0; //@line 9093
  HEAP32[$14 >> 2] = $4; //@line 9094
  $15 = $ReallocAsyncCtx30 + 12 | 0; //@line 9095
  HEAP32[$15 >> 2] = $6; //@line 9096
  $16 = $ReallocAsyncCtx30 + 16 | 0; //@line 9097
  HEAP32[$16 >> 2] = $8; //@line 9098
  $17 = $ReallocAsyncCtx30 + 20 | 0; //@line 9099
  HEAP32[$17 >> 2] = $10; //@line 9100
  sp = STACKTOP; //@line 9101
  return;
 }
 $18 = $4 + 944 | 0; //@line 9104
 HEAP8[$18 >> 0] = HEAP8[$18 >> 0] | 34; //@line 9107
 $21 = HEAP32[$6 >> 2] | 0; //@line 9108
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 9110
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($21, $4 + 996 | 0, 1); //@line 9111
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 327; //@line 9114
  $23 = $ReallocAsyncCtx7 + 4 | 0; //@line 9115
  HEAP32[$23 >> 2] = $8; //@line 9116
  $24 = $ReallocAsyncCtx7 + 8 | 0; //@line 9117
  HEAP32[$24 >> 2] = $10; //@line 9118
  sp = STACKTOP; //@line 9119
  return;
 }
 ___async_unwind = 0; //@line 9122
 HEAP32[$ReallocAsyncCtx7 >> 2] = 327; //@line 9123
 $23 = $ReallocAsyncCtx7 + 4 | 0; //@line 9124
 HEAP32[$23 >> 2] = $8; //@line 9125
 $24 = $ReallocAsyncCtx7 + 8 | 0; //@line 9126
 HEAP32[$24 >> 2] = $10; //@line 9127
 sp = STACKTOP; //@line 9128
 return;
}
function _main__async_cb_34($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 19344
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19346
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19348
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19350
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19352
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19354
 if (!(__ZN16LoRaWANInterface10initializeEPN6events10EventQueueE(21880, 21680) | 0)) {
  $14 = $10 + 4 | 0; //@line 19359
  HEAP32[$14 >> 2] = 0; //@line 19361
  HEAP32[$14 + 4 >> 2] = 0; //@line 19364
  HEAP32[$10 >> 2] = 7; //@line 19365
  $18 = $10 + 12 | 0; //@line 19366
  HEAP32[$18 >> 2] = 10108; //@line 19367
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(28) | 0; //@line 19368
  __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE(21608, $10); //@line 19369
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 647; //@line 19372
   $19 = $ReallocAsyncCtx10 + 4 | 0; //@line 19373
   HEAP32[$19 >> 2] = $2; //@line 19374
   $20 = $ReallocAsyncCtx10 + 8 | 0; //@line 19375
   HEAP32[$20 >> 2] = $4; //@line 19376
   $21 = $ReallocAsyncCtx10 + 12 | 0; //@line 19377
   HEAP32[$21 >> 2] = $6; //@line 19378
   $22 = $ReallocAsyncCtx10 + 16 | 0; //@line 19379
   HEAP32[$22 >> 2] = $8; //@line 19380
   $23 = $ReallocAsyncCtx10 + 20 | 0; //@line 19381
   HEAP32[$23 >> 2] = $18; //@line 19382
   $24 = $ReallocAsyncCtx10 + 24 | 0; //@line 19383
   HEAP32[$24 >> 2] = $10; //@line 19384
   sp = STACKTOP; //@line 19385
   return;
  }
  ___async_unwind = 0; //@line 19388
  HEAP32[$ReallocAsyncCtx10 >> 2] = 647; //@line 19389
  $19 = $ReallocAsyncCtx10 + 4 | 0; //@line 19390
  HEAP32[$19 >> 2] = $2; //@line 19391
  $20 = $ReallocAsyncCtx10 + 8 | 0; //@line 19392
  HEAP32[$20 >> 2] = $4; //@line 19393
  $21 = $ReallocAsyncCtx10 + 12 | 0; //@line 19394
  HEAP32[$21 >> 2] = $6; //@line 19395
  $22 = $ReallocAsyncCtx10 + 16 | 0; //@line 19396
  HEAP32[$22 >> 2] = $8; //@line 19397
  $23 = $ReallocAsyncCtx10 + 20 | 0; //@line 19398
  HEAP32[$23 >> 2] = $18; //@line 19399
  $24 = $ReallocAsyncCtx10 + 24 | 0; //@line 19400
  HEAP32[$24 >> 2] = $10; //@line 19401
  sp = STACKTOP; //@line 19402
  return;
 } else {
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 19405
  _puts(14131) | 0; //@line 19406
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 646; //@line 19409
   sp = STACKTOP; //@line 19410
   return;
  }
  ___async_unwind = 0; //@line 19413
  HEAP32[$ReallocAsyncCtx7 >> 2] = 646; //@line 19414
  sp = STACKTOP; //@line 19415
  return;
 }
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $22 = 0, $5 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 11674
 STACKTOP = STACKTOP + 16 | 0; //@line 11675
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 11675
 $$byval_copy = sp + 8 | 0; //@line 11676
 $1 = sp; //@line 11677
 do {
  if ((HEAP32[$0 + 360 >> 2] | 0) == 2) {
   $8 = HEAP32[$0 + 1328 >> 2] | 0; //@line 11684
   HEAP32[$1 >> 2] = 273; //@line 11685
   HEAP32[$1 + 4 >> 2] = 0; //@line 11687
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 11688
   HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 11689
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 11689
   $9 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($8, $0, $$byval_copy) | 0; //@line 11690
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 363; //@line 11693
    HEAP32[$AsyncCtx3 + 4 >> 2] = $1; //@line 11695
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 11697
    sp = STACKTOP; //@line 11698
    STACKTOP = sp; //@line 11699
    return;
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 11701
   do {
    if (!$9) {
     $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 11705
     _mbed_assert_internal(12025, 12034, 215); //@line 11706
     if (___async) {
      HEAP32[$AsyncCtx7 >> 2] = 364; //@line 11709
      HEAP32[$AsyncCtx7 + 4 >> 2] = $1; //@line 11711
      HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 11713
      sp = STACKTOP; //@line 11714
      STACKTOP = sp; //@line 11715
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx7 | 0); //@line 11717
      break;
     }
    }
   } while (0);
   HEAP32[$0 + 364 >> 2] = 2; //@line 11723
  } else {
   $5 = HEAP32[$0 >> 2] | 0; //@line 11725
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 11726
   __ZN7LoRaPHY18put_radio_to_sleepEv($5); //@line 11727
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 362; //@line 11730
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 11732
    sp = STACKTOP; //@line 11733
    STACKTOP = sp; //@line 11734
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 11736
    break;
   }
  }
 } while (0);
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($0 + 288 | 0) | 0) + 4 >> 2] = 2; //@line 11744
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) + 4 >> 2] = 2; //@line 11748
 $22 = $0 + 944 | 0; //@line 11749
 HEAP8[$22 >> 0] = HEAP8[$22 >> 0] | 32; //@line 11752
 STACKTOP = sp; //@line 11753
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_243($0) {
 $0 = $0 | 0;
 var $12 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 4545
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4547
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4553
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 4557
 if ((HEAP32[___async_retval >> 2] | 0) != -1018) {
  _printf(11245, HEAP32[$0 + 8 >> 2] | 0) | 0; //@line 4562
  _printf(11443, $8) | 0; //@line 4563
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 4564
  _putchar(10) | 0; //@line 4565
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 149; //@line 4568
   $15 = $ReallocAsyncCtx5 + 4 | 0; //@line 4569
   HEAP32[$15 >> 2] = $2; //@line 4570
   $16 = $ReallocAsyncCtx5 + 8 | 0; //@line 4571
   HEAP32[$16 >> 2] = $12; //@line 4572
   sp = STACKTOP; //@line 4573
   return;
  }
  ___async_unwind = 0; //@line 4576
  HEAP32[$ReallocAsyncCtx5 >> 2] = 149; //@line 4577
  $15 = $ReallocAsyncCtx5 + 4 | 0; //@line 4578
  HEAP32[$15 >> 2] = $2; //@line 4579
  $16 = $ReallocAsyncCtx5 + 8 | 0; //@line 4580
  HEAP32[$16 >> 2] = $12; //@line 4581
  sp = STACKTOP; //@line 4582
  return;
 }
 $17 = $2 + 1892 | 0; //@line 4585
 $18 = HEAP32[$17 >> 2] | 0; //@line 4586
 if (!$18) {
  return;
 }
 $22 = HEAP32[$2 + 2288 >> 2] | 0; //@line 4593
 $24 = HEAP32[$18 + 4 >> 2] | 0; //@line 4595
 $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 4596
 FUNCTION_TABLE_vii[$24 & 31]($12, $2 + 1880 | 0); //@line 4597
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 150; //@line 4600
  $25 = $ReallocAsyncCtx + 4 | 0; //@line 4601
  HEAP32[$25 >> 2] = $17; //@line 4602
  $26 = $ReallocAsyncCtx + 8 | 0; //@line 4603
  HEAP32[$26 >> 2] = $12; //@line 4604
  $27 = $ReallocAsyncCtx + 12 | 0; //@line 4605
  HEAP32[$27 >> 2] = $22; //@line 4606
  $28 = $ReallocAsyncCtx + 16 | 0; //@line 4607
  HEAP32[$28 >> 2] = $12; //@line 4608
  sp = STACKTOP; //@line 4609
  return;
 }
 ___async_unwind = 0; //@line 4612
 HEAP32[$ReallocAsyncCtx >> 2] = 150; //@line 4613
 $25 = $ReallocAsyncCtx + 4 | 0; //@line 4614
 HEAP32[$25 >> 2] = $17; //@line 4615
 $26 = $ReallocAsyncCtx + 8 | 0; //@line 4616
 HEAP32[$26 >> 2] = $12; //@line 4617
 $27 = $ReallocAsyncCtx + 12 | 0; //@line 4618
 HEAP32[$27 >> 2] = $22; //@line 4619
 $28 = $ReallocAsyncCtx + 16 | 0; //@line 4620
 HEAP32[$28 >> 2] = $12; //@line 4621
 sp = STACKTOP; //@line 4622
 return;
}
function __ZN12LoRaWANStack9handle_txEhPKhth__async_cb_266($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $17 = 0, $21 = 0, $23 = 0, $38 = 0, $4 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5689
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5693
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5695
 $8 = HEAP16[$0 + 16 >> 1] | 0; //@line 5697
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5699
 $trunc = HEAP8[$0 + 24 >> 0] | 0; //@line 5701
 $13 = HEAP32[$0 + 28 >> 2] | 0; //@line 5703
 $17 = HEAP32[$0 + 36 >> 2] | 0; //@line 5707
 $21 = HEAP32[$0 + 44 >> 2] | 0; //@line 5711
 $23 = HEAP32[$0 + 48 >> 2] | 0; //@line 5713
 HEAP16[$6 + 2232 >> 1] = (HEAP32[$0 + 4 >> 2] | 0) - $4; //@line 5717
 HEAP16[$6 + 2230 >> 1] = $8; //@line 5719
 _memcpy($6 + 1975 | 0, $10 | 0, $4 | 0) | 0; //@line 5721
 switch ($trunc & 15) {
 case 9:
 case 5:
 case 1:
  {
   HEAP32[$6 + 1968 >> 2] = 0; //@line 5726
   HEAP8[$6 + 1972 >> 0] = HEAP8[$21 >> 0] | 0; //@line 5729
   switch ($trunc & 15) {
   case 6:
   case 2:
    {
     label = 5; //@line 5733
     break;
    }
   default:
    {}
   }
   break;
  }
 case 10:
 case 6:
 case 2:
  {
   label = 5; //@line 5742
   break;
  }
 default:
  {}
 }
 if ((label | 0) == 5) {
  HEAP32[$6 + 1968 >> 2] = 1; //@line 5750
  HEAP8[$6 + 1972 >> 0] = HEAP8[$21 >> 0] | 0; //@line 5753
  HEAP8[$6 + 1974 >> 0] = HEAP8[$6 + 2284 >> 0] | 0; //@line 5757
 }
 _printf(11691, $13) | 0; //@line 5759
 $38 = $6 + 2230 | 0; //@line 5760
 $43 = HEAPU16[$6 + 2232 >> 1] | 0; //@line 5765
 HEAP32[$17 >> 2] = HEAPU16[$38 >> 1]; //@line 5766
 HEAP32[$17 + 4 >> 2] = $43; //@line 5768
 _printf(11759, $17) | 0; //@line 5769
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 5770
 _putchar(10) | 0; //@line 5771
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 220; //@line 5774
  $44 = $ReallocAsyncCtx + 4 | 0; //@line 5775
  HEAP32[$44 >> 2] = $6; //@line 5776
  $45 = $ReallocAsyncCtx + 8 | 0; //@line 5777
  HEAP32[$45 >> 2] = $38; //@line 5778
  $46 = $ReallocAsyncCtx + 12 | 0; //@line 5779
  HEAP32[$46 >> 2] = $23; //@line 5780
  sp = STACKTOP; //@line 5781
  return;
 }
 ___async_unwind = 0; //@line 5784
 HEAP32[$ReallocAsyncCtx >> 2] = 220; //@line 5785
 $44 = $ReallocAsyncCtx + 4 | 0; //@line 5786
 HEAP32[$44 >> 2] = $6; //@line 5787
 $45 = $ReallocAsyncCtx + 8 | 0; //@line 5788
 HEAP32[$45 >> 2] = $38; //@line 5789
 $46 = $ReallocAsyncCtx + 12 | 0; //@line 5790
 HEAP32[$46 >> 2] = $23; //@line 5791
 sp = STACKTOP; //@line 5792
 return;
}
function __ZN18LoRaMacChannelPlan8get_planER16lora_channelplanPK25loramac_mib_req_confirm_t($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$038$lcssa = 0, $$03841 = 0, $$1 = 0, $$140 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $32 = 0, $41 = 0, $48 = 0, $7 = 0, $9 = 0, $indvars$iv = 0, $wide$trip$count = 0;
 if (!$2) {
  $$140 = -1003; //@line 16636
  return $$140 | 0; //@line 16637
 }
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
  $$140 = -1002; //@line 16642
  return $$140 | 0; //@line 16643
 }
 $7 = __ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0; //@line 16646
 $9 = __ZN7LoRaPHY16get_channel_maskEb(HEAP32[$0 >> 2] | 0, 0) | 0; //@line 16648
 if (!($7 << 24 >> 24)) {
  $$038$lcssa = 0; //@line 16651
 } else {
  $11 = $1 + 4 | 0; //@line 16653
  $12 = $2 + 4 | 0; //@line 16654
  $wide$trip$count = $7 & 255; //@line 16655
  $$03841 = 0; //@line 16656
  $indvars$iv = 0; //@line 16656
  while (1) {
   if (__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$0 >> 2] | 0, $9, $indvars$iv) | 0) {
    $15 = HEAP32[$11 >> 2] | 0; //@line 16661
    $16 = $$03841 & 255; //@line 16662
    HEAP8[$15 + ($16 << 4) >> 0] = $indvars$iv; //@line 16665
    HEAP32[$15 + ($16 << 4) + 4 >> 2] = HEAP32[(HEAP32[$12 >> 2] | 0) + ($indvars$iv * 12 | 0) >> 2]; //@line 16670
    HEAP8[$15 + ($16 << 4) + 12 >> 0] = HEAP8[(HEAP32[$12 >> 2] | 0) + ($indvars$iv * 12 | 0) + 8 >> 0] | 0; //@line 16675
    $32 = (HEAP32[$11 >> 2] | 0) + ($16 << 4) + 12 | 0; //@line 16681
    HEAP8[$32 >> 0] = HEAP8[$32 >> 0] & -16 | HEAP8[(HEAP32[$12 >> 2] | 0) + ($indvars$iv * 12 | 0) + 8 >> 0] & 15; //@line 16685
    $41 = (HEAP32[$11 >> 2] | 0) + ($16 << 4) + 12 | 0; //@line 16691
    HEAP8[$41 >> 0] = HEAP8[$41 >> 0] & 15 | HEAP8[(HEAP32[$12 >> 2] | 0) + ($indvars$iv * 12 | 0) + 8 >> 0] & -16; //@line 16695
    $48 = HEAP32[$11 >> 2] | 0; //@line 16699
    HEAP8[$48 + ($16 << 4) + 13 >> 0] = HEAP8[(HEAP32[$12 >> 2] | 0) + ($indvars$iv * 12 | 0) + 9 >> 0] | 0; //@line 16701
    HEAP32[$48 + ($16 << 4) + 8 >> 2] = HEAP32[(HEAP32[$12 >> 2] | 0) + ($indvars$iv * 12 | 0) + 4 >> 2]; //@line 16706
    $$1 = $$03841 + 1 << 24 >> 24; //@line 16708
   } else {
    $$1 = $$03841; //@line 16710
   }
   $indvars$iv = $indvars$iv + 1 | 0; //@line 16712
   if (($indvars$iv | 0) == ($wide$trip$count | 0)) {
    $$038$lcssa = $$1; //@line 16715
    break;
   } else {
    $$03841 = $$1; //@line 16718
   }
  }
 }
 HEAP8[$1 >> 0] = $$038$lcssa; //@line 16722
 $$140 = 0; //@line 16723
 return $$140 | 0; //@line 16724
}
function __ZN7LoRaPHY11handle_sendEPhh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $14 = 0, $17 = 0, $19 = 0, $22 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx4 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 22800
 STACKTOP = STACKTOP + 16 | 0; //@line 22801
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 22801
 _printf(12433, sp) | 0; //@line 22804
 _printf(12496, sp + 8 | 0) | 0; //@line 22805
 $AsyncCtx11 = _emscripten_alloc_async_context(16, sp) | 0; //@line 22806
 _putchar(10) | 0; //@line 22807
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 553; //@line 22810
  HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 22812
  HEAP32[$AsyncCtx11 + 8 >> 2] = $1; //@line 22814
  HEAP8[$AsyncCtx11 + 12 >> 0] = $2; //@line 22816
  sp = STACKTOP; //@line 22817
  STACKTOP = sp; //@line 22818
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 22820
 $6 = $0 + 4 | 0; //@line 22821
 $7 = HEAP32[$6 >> 2] | 0; //@line 22822
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 72 >> 2] | 0; //@line 22825
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 22826
 FUNCTION_TABLE_vi[$10 & 1023]($7); //@line 22827
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 554; //@line 22830
  HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 22832
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 22834
  HEAP8[$AsyncCtx + 12 >> 0] = $2; //@line 22836
  sp = STACKTOP; //@line 22837
  STACKTOP = sp; //@line 22838
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 22840
 $14 = HEAP32[$6 >> 2] | 0; //@line 22841
 $17 = HEAP32[(HEAP32[$14 >> 2] | 0) + 24 >> 2] | 0; //@line 22844
 $AsyncCtx4 = _emscripten_alloc_async_context(8, sp) | 0; //@line 22845
 FUNCTION_TABLE_viii[$17 & 7]($14, $1, $2); //@line 22846
 if (___async) {
  HEAP32[$AsyncCtx4 >> 2] = 555; //@line 22849
  HEAP32[$AsyncCtx4 + 4 >> 2] = $6; //@line 22851
  sp = STACKTOP; //@line 22852
  STACKTOP = sp; //@line 22853
  return;
 }
 _emscripten_free_async_context($AsyncCtx4 | 0); //@line 22855
 $19 = HEAP32[$6 >> 2] | 0; //@line 22856
 $22 = HEAP32[(HEAP32[$19 >> 2] | 0) + 76 >> 2] | 0; //@line 22859
 $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 22860
 FUNCTION_TABLE_vi[$22 & 1023]($19); //@line 22861
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 556; //@line 22864
  sp = STACKTOP; //@line 22865
  STACKTOP = sp; //@line 22866
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx7 | 0); //@line 22868
  STACKTOP = sp; //@line 22869
  return;
 }
}
function __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_337($0) {
 $0 = $0 | 0;
 var $$1 = 0, $$pre = 0, $10 = 0, $13 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $30 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 13009
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13011
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13013
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13015
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13017
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13019
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 13021
 if (!$AsyncRetVal) {
  $13 = $2 + 288 | 0; //@line 13024
  HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($13) | 0) + 11 >> 0] = 0; //@line 13027
  HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($13) | 0) + 10 >> 0] = 0; //@line 13030
  $18 = HEAP32[$4 >> 2] | 0; //@line 13031
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($13) | 0) + 16 >> 2] = $18; //@line 13034
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(20) | 0; //@line 13035
  $21 = __ZN7LoRaMac11schedule_txEv($2) | 0; //@line 13036
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 453; //@line 13039
   $22 = $ReallocAsyncCtx7 + 4 | 0; //@line 13040
   HEAP32[$22 >> 2] = $6; //@line 13041
   $23 = $ReallocAsyncCtx7 + 8 | 0; //@line 13042
   HEAP32[$23 >> 2] = $8; //@line 13043
   $24 = $ReallocAsyncCtx7 + 12 | 0; //@line 13044
   HEAP32[$24 >> 2] = $10; //@line 13045
   $25 = $ReallocAsyncCtx7 + 16 | 0; //@line 13046
   HEAP32[$25 >> 2] = $2; //@line 13047
   sp = STACKTOP; //@line 13048
   return;
  }
  HEAP32[___async_retval >> 2] = $21; //@line 13052
  ___async_unwind = 0; //@line 13053
  HEAP32[$ReallocAsyncCtx7 >> 2] = 453; //@line 13054
  $22 = $ReallocAsyncCtx7 + 4 | 0; //@line 13055
  HEAP32[$22 >> 2] = $6; //@line 13056
  $23 = $ReallocAsyncCtx7 + 8 | 0; //@line 13057
  HEAP32[$23 >> 2] = $8; //@line 13058
  $24 = $ReallocAsyncCtx7 + 12 | 0; //@line 13059
  HEAP32[$24 >> 2] = $10; //@line 13060
  $25 = $ReallocAsyncCtx7 + 16 | 0; //@line 13061
  HEAP32[$25 >> 2] = $2; //@line 13062
  sp = STACKTOP; //@line 13063
  return;
 }
 if (!$AsyncRetVal) {
  $$1 = 0; //@line 13068
  $30 = ___async_retval; //@line 13069
  HEAP32[$30 >> 2] = $$1; //@line 13070
  return;
 }
 $$pre = HEAP8[$10 >> 0] | 0; //@line 13073
 HEAP8[$2 + 373 >> 0] = 0; //@line 13075
 HEAP8[$10 >> 0] = $$pre & -9; //@line 13077
 $$1 = $AsyncRetVal; //@line 13078
 $30 = ___async_retval; //@line 13079
 HEAP32[$30 >> 2] = $$1; //@line 13080
 return;
}
function __ZN7LoRaMac17query_tx_possibleEhP17loramac_tx_info_t($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$011 = 0, $$pre$phi13Z2D = 0, $13 = 0, $14 = 0, $26 = 0, $29 = 0, $3 = 0, $31 = 0, $32 = 0, $42 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $or$cond$i = 0, sp = 0;
 sp = STACKTOP; //@line 15058
 $3 = $0 + 4 | 0; //@line 15059
 $5 = (__ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($3) | 0) & 255; //@line 15061
 $8 = ((__ZNK14LoRaMacCommand26get_repeat_commands_lengthEv($3) | 0) & 255) + $5 | 0; //@line 15064
 if (!$2) {
  $$011 = -1003; //@line 15067
  return $$011 | 0; //@line 15068
 }
 do {
  if (!(HEAP8[$0 + 1156 >> 0] | 0)) {
   $$pre$phi13Z2D = $0 + 1097 | 0; //@line 15076
  } else {
   $13 = HEAP32[$0 >> 2] | 0; //@line 15078
   $14 = $0 + 1097 | 0; //@line 15079
   $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 15082
   __ZN7LoRaPHY12get_next_ADREbRaS0_Rj($13, 0, $14, $0 + 1096 | 0, $0 + 964 | 0) | 0; //@line 15083
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 447; //@line 15086
    HEAP32[$AsyncCtx + 4 >> 2] = $14; //@line 15088
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 15090
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 15092
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 15094
    HEAP32[$AsyncCtx + 20 >> 2] = $8; //@line 15096
    HEAP32[$AsyncCtx + 24 >> 2] = $3; //@line 15098
    HEAP8[$AsyncCtx + 28 >> 0] = $1; //@line 15100
    sp = STACKTOP; //@line 15101
    return 0; //@line 15102
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 15104
    $$pre$phi13Z2D = $14; //@line 15105
    break;
   }
  }
 } while (0);
 $26 = $0 + 369 | 0; //@line 15112
 $29 = __ZN7LoRaPHY15get_max_payloadEhb(HEAP32[$0 >> 2] | 0, HEAP8[$$pre$phi13Z2D >> 0] | 0, (HEAP8[$26 >> 0] | 0) != 0) | 0; //@line 15115
 HEAP8[$2 + 1 >> 0] = $29; //@line 15117
 $31 = $29 & 255; //@line 15118
 $32 = $8 & 255; //@line 15119
 if ($32 >>> 0 > $31 >>> 0) {
  HEAP8[$2 >> 0] = $29; //@line 15122
  __ZN14LoRaMacCommand20clear_command_bufferEv($3); //@line 15123
  __ZN14LoRaMacCommand19clear_repeat_bufferEv($3); //@line 15124
  $$0 = 0; //@line 15125
 } else {
  HEAP8[$2 >> 0] = $31 - $8; //@line 15129
  $$0 = $32; //@line 15130
 }
 $42 = $$0 + ($1 & 255) | 0; //@line 15138
 $or$cond$i = $42 >>> 0 < 256 & $42 >>> 0 <= ((__ZN7LoRaPHY15get_max_payloadEhb(HEAP32[$0 >> 2] | 0, HEAP8[$$pre$phi13Z2D >> 0] | 0, (HEAP8[$26 >> 0] | 0) != 0) | 0) & 255) >>> 0; //@line 15142
 $$011 = $or$cond$i ? 0 : -1010; //@line 15144
 return $$011 | 0; //@line 15145
}
function __ZL12send_messagev() {
 var $0 = 0, $11 = 0, $3 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 6951
 STACKTOP = STACKTOP + 80 | 0; //@line 6952
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80); //@line 6952
 $vararg_buffer8 = sp + 24 | 0; //@line 6953
 $vararg_buffer5 = sp + 16 | 0; //@line 6954
 $vararg_buffer1 = sp + 8 | 0; //@line 6955
 $vararg_buffer = sp; //@line 6956
 $0 = sp + 28 | 0; //@line 6957
 dest = $0; //@line 6958
 stop = dest + 50 | 0; //@line 6958
 do {
  HEAP8[dest >> 0] = 0; //@line 6958
  dest = dest + 1 | 0; //@line 6958
 } while ((dest | 0) < (stop | 0));
 HEAPF64[$vararg_buffer >> 3] = +__ZN5Sht3115readTemperatureEv(22584); //@line 6961
 _sprintf($0, 14553, $vararg_buffer) | 0; //@line 6962
 $3 = _strlen($0) | 0; //@line 6963
 HEAP32[$vararg_buffer1 >> 2] = $3; //@line 6964
 HEAP32[$vararg_buffer1 + 4 >> 2] = $0; //@line 6966
 _printf(14573, $vararg_buffer1) | 0; //@line 6967
 $AsyncCtx13 = _emscripten_alloc_async_context(24, sp) | 0; //@line 6969
 $5 = __ZN16LoRaWANInterface4sendEhPKhti(21880, 15, $0, $3 & 65535, 1) | 0; //@line 6970
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 656; //@line 6973
  HEAP32[$AsyncCtx13 + 4 >> 2] = $vararg_buffer8; //@line 6975
  HEAP32[$AsyncCtx13 + 8 >> 2] = $vararg_buffer8; //@line 6977
  HEAP32[$AsyncCtx13 + 12 >> 2] = $0; //@line 6979
  HEAP32[$AsyncCtx13 + 16 >> 2] = $vararg_buffer5; //@line 6981
  HEAP32[$AsyncCtx13 + 20 >> 2] = $vararg_buffer5; //@line 6983
  sp = STACKTOP; //@line 6984
  STACKTOP = sp; //@line 6985
  return;
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 6987
 $11 = $5 << 16 >> 16; //@line 6988
 if ($5 << 16 >> 16 >= 0) {
  HEAP32[$vararg_buffer8 >> 2] = $11; //@line 6991
  _printf(14649, $vararg_buffer8) | 0; //@line 6992
  STACKTOP = sp; //@line 6993
  return;
 }
 if ($5 << 16 >> 16 != -1001) {
  HEAP32[$vararg_buffer5 >> 2] = $11; //@line 6997
  _printf(14625, $vararg_buffer5) | 0; //@line 6998
  STACKTOP = sp; //@line 6999
  return;
 }
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 7001
 _puts(14597) | 0; //@line 7002
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 657; //@line 7005
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 7007
  sp = STACKTOP; //@line 7008
  STACKTOP = sp; //@line 7009
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 7011
 STACKTOP = sp; //@line 7012
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$2 = 0, $17 = 0, $18 = 0, $3 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 14913
 STACKTOP = STACKTOP + 64 | 0; //@line 14914
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 14914
 $3 = sp; //@line 14915
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, 0) | 0) {
  $$2 = 1; //@line 14918
 } else {
  if (!$1) {
   $$2 = 0; //@line 14922
  } else {
   $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 14924
   $6 = ___dynamic_cast($1, 464, 448, 0) | 0; //@line 14925
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 686; //@line 14928
    HEAP32[$AsyncCtx3 + 4 >> 2] = $3; //@line 14930
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 14932
    HEAP32[$AsyncCtx3 + 12 >> 2] = $2; //@line 14934
    sp = STACKTOP; //@line 14935
    STACKTOP = sp; //@line 14936
    return 0; //@line 14936
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 14938
   if (!$6) {
    $$2 = 0; //@line 14941
   } else {
    dest = $3 + 4 | 0; //@line 14944
    stop = dest + 52 | 0; //@line 14944
    do {
     HEAP32[dest >> 2] = 0; //@line 14944
     dest = dest + 4 | 0; //@line 14944
    } while ((dest | 0) < (stop | 0));
    HEAP32[$3 >> 2] = $6; //@line 14945
    HEAP32[$3 + 8 >> 2] = $0; //@line 14947
    HEAP32[$3 + 12 >> 2] = -1; //@line 14949
    HEAP32[$3 + 48 >> 2] = 1; //@line 14951
    $17 = HEAP32[(HEAP32[$6 >> 2] | 0) + 28 >> 2] | 0; //@line 14954
    $18 = HEAP32[$2 >> 2] | 0; //@line 14955
    $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 14956
    FUNCTION_TABLE_viiii[$17 & 7]($6, $3, $18, 1); //@line 14957
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 687; //@line 14960
     HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 14962
     HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 14964
     HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 14966
     sp = STACKTOP; //@line 14967
     STACKTOP = sp; //@line 14968
     return 0; //@line 14968
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 14970
    if ((HEAP32[$3 + 24 >> 2] | 0) == 1) {
     HEAP32[$2 >> 2] = HEAP32[$3 + 16 >> 2]; //@line 14977
     $$0 = 1; //@line 14978
    } else {
     $$0 = 0; //@line 14980
    }
    $$2 = $$0; //@line 14982
   }
  }
 }
 STACKTOP = sp; //@line 14986
 return $$2 | 0; //@line 14986
}
function __ZN12LoRaWANStack21set_channel_data_rateEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$1 = 0, $11 = 0, $2 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx9 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP; //@line 7548
 STACKTOP = STACKTOP + 48 | 0; //@line 7549
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 7549
 $vararg_buffer5 = sp + 24 | 0; //@line 7550
 $vararg_buffer3 = sp + 16 | 0; //@line 7551
 $2 = sp + 28 | 0; //@line 7554
 if (!(HEAP32[$0 + 1876 >> 2] | 0)) {
  _printf(11245, sp) | 0; //@line 7559
  _printf(11858, sp + 8 | 0) | 0; //@line 7560
  $AsyncCtx9 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7561
  _putchar(10) | 0; //@line 7562
  if (___async) {
   HEAP32[$AsyncCtx9 >> 2] = 244; //@line 7565
   sp = STACKTOP; //@line 7566
   STACKTOP = sp; //@line 7567
   return 0; //@line 7567
  }
  _emscripten_free_async_context($AsyncCtx9 | 0); //@line 7569
  $$1 = -1012; //@line 7570
  STACKTOP = sp; //@line 7571
  return $$1 | 0; //@line 7571
 }
 HEAP32[$2 >> 2] = 2; //@line 7573
 $6 = $0 + 4 | 0; //@line 7574
 do {
  if (!(__ZN7LoRaMac23mib_get_request_confirmEP25loramac_mib_req_confirm_t($6, $2) | 0)) {
   HEAP32[$2 >> 2] = 21; //@line 7579
   HEAP8[$2 + 4 >> 0] = $1; //@line 7581
   $AsyncCtx13 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7582
   $11 = __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($6, $2) | 0; //@line 7583
   if (___async) {
    HEAP32[$AsyncCtx13 >> 2] = 246; //@line 7586
    HEAP32[$AsyncCtx13 + 4 >> 2] = $2; //@line 7588
    sp = STACKTOP; //@line 7589
    STACKTOP = sp; //@line 7590
    return 0; //@line 7590
   } else {
    _emscripten_free_async_context($AsyncCtx13 | 0); //@line 7592
    $$0 = $11; //@line 7593
    break;
   }
  } else {
   _printf(11245, $vararg_buffer3) | 0; //@line 7597
   _printf(11919, $vararg_buffer5) | 0; //@line 7598
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 7599
   _putchar(10) | 0; //@line 7600
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 245; //@line 7603
    HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 7605
    sp = STACKTOP; //@line 7606
    STACKTOP = sp; //@line 7607
    return 0; //@line 7607
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 7609
    $$0 = -1003; //@line 7610
    break;
   }
  }
 } while (0);
 $$1 = $$0; //@line 7615
 STACKTOP = sp; //@line 7616
 return $$1 | 0; //@line 7616
}
function _vsnprintf($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$$015 = 0, $$0 = 0, $$014 = 0, $$015 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $19 = 0, $26 = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 14338
 STACKTOP = STACKTOP + 128 | 0; //@line 14339
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 14339
 $4 = sp + 124 | 0; //@line 14340
 $5 = sp; //@line 14341
 dest = $5; //@line 14342
 src = 10644; //@line 14342
 stop = dest + 124 | 0; //@line 14342
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 14342
  dest = dest + 4 | 0; //@line 14342
  src = src + 4 | 0; //@line 14342
 } while ((dest | 0) < (stop | 0));
 if (($1 + -1 | 0) >>> 0 > 2147483646) {
  if (!$1) {
   $$014 = $4; //@line 14348
   $$015 = 1; //@line 14348
   label = 4; //@line 14349
  } else {
   HEAP32[(___errno_location() | 0) >> 2] = 75; //@line 14352
   $$0 = -1; //@line 14353
  }
 } else {
  $$014 = $0; //@line 14356
  $$015 = $1; //@line 14356
  label = 4; //@line 14357
 }
 if ((label | 0) == 4) {
  $11 = -2 - $$014 | 0; //@line 14361
  $$$015 = $$015 >>> 0 > $11 >>> 0 ? $11 : $$015; //@line 14363
  HEAP32[$5 + 48 >> 2] = $$$015; //@line 14365
  $14 = $5 + 20 | 0; //@line 14366
  HEAP32[$14 >> 2] = $$014; //@line 14367
  HEAP32[$5 + 44 >> 2] = $$014; //@line 14369
  $16 = $$014 + $$$015 | 0; //@line 14370
  $17 = $5 + 16 | 0; //@line 14371
  HEAP32[$17 >> 2] = $16; //@line 14372
  HEAP32[$5 + 28 >> 2] = $16; //@line 14374
  $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 14375
  $19 = _vfprintf($5, $2, $3) | 0; //@line 14376
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 674; //@line 14379
   HEAP32[$AsyncCtx + 4 >> 2] = $$$015; //@line 14381
   HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 14383
   HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 14385
   HEAP32[$AsyncCtx + 16 >> 2] = $14; //@line 14387
   HEAP32[$AsyncCtx + 20 >> 2] = $17; //@line 14389
   sp = STACKTOP; //@line 14390
   STACKTOP = sp; //@line 14391
   return 0; //@line 14391
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 14393
  if (!$$$015) {
   $$0 = $19; //@line 14396
  } else {
   $26 = HEAP32[$14 >> 2] | 0; //@line 14398
   HEAP8[$26 + ((($26 | 0) == (HEAP32[$17 >> 2] | 0)) << 31 >> 31) >> 0] = 0; //@line 14403
   $$0 = $19; //@line 14404
  }
 }
 STACKTOP = sp; //@line 14407
 return $$0 | 0; //@line 14407
}
function __ZN7LoRaMac11schedule_txEv__async_cb_67($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 20737
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20739
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20741
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20743
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20745
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20747
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20749
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20751
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20753
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 20755
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 20757
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 20759
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 20761
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 20763
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 20765
 $28 = HEAP32[$2 >> 2] | 0; //@line 20766
 $31 = HEAP32[(HEAP32[$28 >> 2] | 0) + 28 >> 2] | 0; //@line 20769
 $32 = $4 + 1104 | 0; //@line 20770
 $33 = HEAP8[$32 >> 0] | 0; //@line 20771
 $34 = $4 + 1100 | 0; //@line 20772
 $35 = HEAP32[$34 >> 2] | 0; //@line 20773
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(64) | 0; //@line 20775
 FUNCTION_TABLE_viiiii[$31 & 7]($28, $AsyncRetVal, $33, $35, $4 + 1160 | 0); //@line 20776
 if (!___async) {
  ___async_unwind = 0; //@line 20779
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 396; //@line 20781
 HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $2; //@line 20783
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $4; //@line 20785
 HEAP32[$ReallocAsyncCtx4 + 12 >> 2] = $32; //@line 20787
 HEAP32[$ReallocAsyncCtx4 + 16 >> 2] = $34; //@line 20789
 HEAP32[$ReallocAsyncCtx4 + 20 >> 2] = $22; //@line 20791
 HEAP32[$ReallocAsyncCtx4 + 24 >> 2] = $26; //@line 20793
 HEAP32[$ReallocAsyncCtx4 + 28 >> 2] = $6; //@line 20795
 HEAP32[$ReallocAsyncCtx4 + 32 >> 2] = $8; //@line 20797
 HEAP32[$ReallocAsyncCtx4 + 36 >> 2] = $16; //@line 20799
 HEAP32[$ReallocAsyncCtx4 + 40 >> 2] = $10; //@line 20801
 HEAP32[$ReallocAsyncCtx4 + 44 >> 2] = $12; //@line 20803
 HEAP32[$ReallocAsyncCtx4 + 48 >> 2] = $14; //@line 20805
 HEAP32[$ReallocAsyncCtx4 + 52 >> 2] = $18; //@line 20807
 HEAP32[$ReallocAsyncCtx4 + 56 >> 2] = $20; //@line 20809
 HEAP32[$ReallocAsyncCtx4 + 60 >> 2] = $24; //@line 20811
 sp = STACKTOP; //@line 20812
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $19 = 0, $28 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 16245
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 16251
  } else {
   $9 = HEAP32[$0 + 12 >> 2] | 0; //@line 16255
   $10 = $0 + 16 + ($9 << 3) | 0; //@line 16256
   $AsyncCtx3 = _emscripten_alloc_async_context(28, sp) | 0; //@line 16257
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0 + 16 | 0, $1, $2, $3); //@line 16258
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 703; //@line 16261
    HEAP32[$AsyncCtx3 + 4 >> 2] = $9; //@line 16263
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 16265
    HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 16267
    HEAP32[$AsyncCtx3 + 16 >> 2] = $2; //@line 16269
    HEAP32[$AsyncCtx3 + 20 >> 2] = $3; //@line 16271
    HEAP32[$AsyncCtx3 + 24 >> 2] = $10; //@line 16273
    sp = STACKTOP; //@line 16274
    return;
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 16277
   if (($9 | 0) > 1) {
    $19 = $1 + 54 | 0; //@line 16281
    $$0 = $0 + 24 | 0; //@line 16282
    while (1) {
     $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 16284
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($$0, $1, $2, $3); //@line 16285
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 16290
     if (HEAP8[$19 >> 0] | 0) {
      break L1;
     }
     $28 = $$0 + 8 | 0; //@line 16296
     if ($28 >>> 0 < $10 >>> 0) {
      $$0 = $28; //@line 16299
     } else {
      break L1;
     }
    }
    HEAP32[$AsyncCtx >> 2] = 704; //@line 16304
    HEAP32[$AsyncCtx + 4 >> 2] = $19; //@line 16306
    HEAP32[$AsyncCtx + 8 >> 2] = $$0; //@line 16308
    HEAP32[$AsyncCtx + 12 >> 2] = $10; //@line 16310
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 16312
    HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 16314
    HEAP32[$AsyncCtx + 24 >> 2] = $3; //@line 16316
    sp = STACKTOP; //@line 16317
    return;
   }
  }
 } while (0);
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_144($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx29 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 30176
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30180
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30182
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30184
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 30186
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 30187
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 30191
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 30192
  FUNCTION_TABLE_vi[$13 & 1023]($4); //@line 30193
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 185; //@line 30196
   $14 = $ReallocAsyncCtx8 + 4 | 0; //@line 30197
   HEAP32[$14 >> 2] = $AsyncRetVal; //@line 30198
   $15 = $ReallocAsyncCtx8 + 8 | 0; //@line 30199
   HEAP32[$15 >> 2] = $6; //@line 30200
   $16 = $ReallocAsyncCtx8 + 12 | 0; //@line 30201
   HEAP32[$16 >> 2] = $8; //@line 30202
   sp = STACKTOP; //@line 30203
   return;
  }
  ___async_unwind = 0; //@line 30206
  HEAP32[$ReallocAsyncCtx8 >> 2] = 185; //@line 30207
  $14 = $ReallocAsyncCtx8 + 4 | 0; //@line 30208
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 30209
  $15 = $ReallocAsyncCtx8 + 8 | 0; //@line 30210
  HEAP32[$15 >> 2] = $6; //@line 30211
  $16 = $ReallocAsyncCtx8 + 12 | 0; //@line 30212
  HEAP32[$16 >> 2] = $8; //@line 30213
  sp = STACKTOP; //@line 30214
  return;
 }
 if ($AsyncRetVal | 0) {
  HEAP32[$6 >> 2] = 6; //@line 30219
  HEAP32[___async_retval >> 2] = -1014; //@line 30221
  return;
 }
 $ReallocAsyncCtx29 = _emscripten_realloc_async_context(12) | 0; //@line 30224
 _mbed_assert_internal(12025, 11293, 1231); //@line 30225
 if (___async) {
  HEAP32[$ReallocAsyncCtx29 >> 2] = 186; //@line 30228
  $18 = $ReallocAsyncCtx29 + 4 | 0; //@line 30229
  HEAP32[$18 >> 2] = $6; //@line 30230
  $19 = $ReallocAsyncCtx29 + 8 | 0; //@line 30231
  HEAP32[$19 >> 2] = $8; //@line 30232
  sp = STACKTOP; //@line 30233
  return;
 }
 ___async_unwind = 0; //@line 30236
 HEAP32[$ReallocAsyncCtx29 >> 2] = 186; //@line 30237
 $18 = $ReallocAsyncCtx29 + 4 | 0; //@line 30238
 HEAP32[$18 >> 2] = $6; //@line 30239
 $19 = $ReallocAsyncCtx29 + 8 | 0; //@line 30240
 HEAP32[$19 >> 2] = $8; //@line 30241
 sp = STACKTOP; //@line 30242
 return;
}
function __ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 12394
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12396
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12398
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12400
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12402
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12404
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 12406
 if (!$AsyncRetVal) {
  HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($2) | 0) + 11 >> 0] = 0; //@line 12411
  HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($2) | 0) + 10 >> 0] = 0; //@line 12414
  $18 = HEAP32[$4 + 956 >> 2] | 0; //@line 12416
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($2) | 0) + 16 >> 2] = $18; //@line 12419
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 12420
  $21 = __ZN7LoRaMac11schedule_txEv($4) | 0; //@line 12421
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 459; //@line 12424
   $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 12425
   HEAP32[$22 >> 2] = $6; //@line 12426
   $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 12427
   HEAP32[$23 >> 2] = $10; //@line 12428
   $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 12429
   HEAP32[$24 >> 2] = $2; //@line 12430
   $25 = $ReallocAsyncCtx2 + 16 | 0; //@line 12431
   HEAP32[$25 >> 2] = $4; //@line 12432
   $26 = $ReallocAsyncCtx2 + 20 | 0; //@line 12433
   HEAP32[$26 >> 2] = $8; //@line 12434
   sp = STACKTOP; //@line 12435
   return;
  }
  HEAP32[___async_retval >> 2] = $21; //@line 12439
  ___async_unwind = 0; //@line 12440
  HEAP32[$ReallocAsyncCtx2 >> 2] = 459; //@line 12441
  $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 12442
  HEAP32[$22 >> 2] = $6; //@line 12443
  $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 12444
  HEAP32[$23 >> 2] = $10; //@line 12445
  $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 12446
  HEAP32[$24 >> 2] = $2; //@line 12447
  $25 = $ReallocAsyncCtx2 + 16 | 0; //@line 12448
  HEAP32[$25 >> 2] = $4; //@line 12449
  $26 = $ReallocAsyncCtx2 + 20 | 0; //@line 12450
  HEAP32[$26 >> 2] = $8; //@line 12451
  sp = STACKTOP; //@line 12452
  return;
 } else {
  HEAP8[$4 + 373 >> 0] = 0; //@line 12456
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 12458
  return;
 }
}
function _mbedtls_cipher_cmac_update__async_cb_161($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $4 = 0, $42 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 31643
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31645
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31647
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31649
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31651
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31653
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31655
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 31657
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 31659
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 31661
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 31663
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 31665
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 31668
  $42 = ___async_retval; //@line 31669
  HEAP32[$42 >> 2] = $$0; //@line 31670
  return;
 }
 $24 = $2 + 1 | 0; //@line 31673
 if ($24 >>> 0 < $4 >>> 0) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(44) | 0; //@line 31676
  $22 = _mbedtls_cipher_update($8, $10, 0, $10, $12) | 0; //@line 31677
  if (!___async) {
   HEAP32[___async_retval >> 2] = $22; //@line 31681
   ___async_unwind = 0; //@line 31682
  }
  HEAP32[$ReallocAsyncCtx2 >> 2] = 584; //@line 31684
  HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $24; //@line 31686
  HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 31688
  HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 31690
  HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 31692
  HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 31694
  HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 31696
  HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $14; //@line 31698
  HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $16; //@line 31700
  HEAP32[$ReallocAsyncCtx2 + 36 >> 2] = $18; //@line 31702
  HEAP32[$ReallocAsyncCtx2 + 40 >> 2] = $20; //@line 31704
  sp = STACKTOP; //@line 31705
  return;
 }
 if (!$14) {
  $$0 = 0; //@line 31710
  $42 = ___async_retval; //@line 31711
  HEAP32[$42 >> 2] = $$0; //@line 31712
  return;
 }
 _memcpy((HEAP32[$18 >> 2] | 0) + ($20 + 16) | 0, $16 | 0, $14 | 0) | 0; //@line 31717
 HEAP32[$18 >> 2] = (HEAP32[$18 >> 2] | 0) + $14; //@line 31720
 $$0 = 0; //@line 31721
 $42 = ___async_retval; //@line 31722
 HEAP32[$42 >> 2] = $$0; //@line 31723
 return;
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb_384($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $15 = 0, $2 = 0, $21 = 0, $22 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 26182
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26184
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26186
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26188
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26190
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26192
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 26194
 $13 = $2 + 946 | 0; //@line 26196
 HEAP16[$13 >> 1] = $AsyncRetVal; //@line 26197
 $15 = HEAP16[$4 >> 1] | 0; //@line 26199
 HEAP16[$4 >> 1] = $15 + 1 << 16 >> 16; //@line 26201
 HEAP8[($15 & 65535) + ($2 + 381) >> 0] = $AsyncRetVal; //@line 26204
 $21 = (HEAPU16[$13 >> 1] | 0) >>> 8 & 255; //@line 26207
 $22 = HEAP16[$4 >> 1] | 0; //@line 26208
 HEAP16[$4 >> 1] = $22 + 1 << 16 >> 16; //@line 26210
 HEAP8[($22 & 65535) + ($2 + 381) >> 0] = $21; //@line 26213
 $27 = HEAP16[$4 >> 1] & 255; //@line 26215
 $29 = HEAP32[$2 + 908 >> 2] | 0; //@line 26217
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 26218
 $30 = __Z22compute_join_frame_micPKhtS0_Pj($6, $27, $29, $8) | 0; //@line 26219
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 407; //@line 26222
  $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 26223
  HEAP32[$31 >> 2] = $8; //@line 26224
  $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 26225
  HEAP32[$32 >> 2] = $4; //@line 26226
  $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 26227
  HEAP32[$33 >> 2] = $2; //@line 26228
  $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 26229
  HEAP32[$34 >> 2] = $10; //@line 26230
  sp = STACKTOP; //@line 26231
  return;
 }
 HEAP32[___async_retval >> 2] = $30; //@line 26235
 ___async_unwind = 0; //@line 26236
 HEAP32[$ReallocAsyncCtx2 >> 2] = 407; //@line 26237
 $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 26238
 HEAP32[$31 >> 2] = $8; //@line 26239
 $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 26240
 HEAP32[$32 >> 2] = $4; //@line 26241
 $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 26242
 HEAP32[$33 >> 2] = $2; //@line 26243
 $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 26244
 HEAP32[$34 >> 2] = $10; //@line 26245
 sp = STACKTOP; //@line 26246
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_321($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 12034
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12038
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12040
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12042
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 12044
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 12045
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 12049
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 12050
  FUNCTION_TABLE_vi[$13 & 1023]($6); //@line 12051
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 338; //@line 12054
   $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 12055
   HEAP32[$14 >> 2] = $4; //@line 12056
   $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 12057
   HEAP32[$15 >> 2] = $AsyncRetVal; //@line 12058
   $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 12059
   HEAP32[$16 >> 2] = $8; //@line 12060
   sp = STACKTOP; //@line 12061
   return;
  }
  ___async_unwind = 0; //@line 12064
  HEAP32[$ReallocAsyncCtx4 >> 2] = 338; //@line 12065
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 12066
  HEAP32[$14 >> 2] = $4; //@line 12067
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 12068
  HEAP32[$15 >> 2] = $AsyncRetVal; //@line 12069
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 12070
  HEAP32[$16 >> 2] = $8; //@line 12071
  sp = STACKTOP; //@line 12072
  return;
 }
 $17 = HEAP32[$4 >> 2] | 0; //@line 12075
 if (!$17) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 12079
  return;
 }
 $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 12083
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 12084
 FUNCTION_TABLE_vi[$20 & 1023]($8); //@line 12085
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 339; //@line 12088
  $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 12089
  HEAP32[$21 >> 2] = $AsyncRetVal; //@line 12090
  sp = STACKTOP; //@line 12091
  return;
 }
 ___async_unwind = 0; //@line 12094
 HEAP32[$ReallocAsyncCtx5 >> 2] = 339; //@line 12095
 $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 12096
 HEAP32[$21 >> 2] = $AsyncRetVal; //@line 12097
 sp = STACKTOP; //@line 12098
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_369($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 15447
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15451
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15453
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15455
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 15457
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 15458
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 15462
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 15463
  FUNCTION_TABLE_vi[$13 & 1023]($6); //@line 15464
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 198; //@line 15467
   $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 15468
   HEAP32[$14 >> 2] = $4; //@line 15469
   $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 15470
   HEAP32[$15 >> 2] = $AsyncRetVal; //@line 15471
   $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 15472
   HEAP32[$16 >> 2] = $8; //@line 15473
   sp = STACKTOP; //@line 15474
   return;
  }
  ___async_unwind = 0; //@line 15477
  HEAP32[$ReallocAsyncCtx4 >> 2] = 198; //@line 15478
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 15479
  HEAP32[$14 >> 2] = $4; //@line 15480
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 15481
  HEAP32[$15 >> 2] = $AsyncRetVal; //@line 15482
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 15483
  HEAP32[$16 >> 2] = $8; //@line 15484
  sp = STACKTOP; //@line 15485
  return;
 }
 $17 = HEAP32[$4 >> 2] | 0; //@line 15488
 if (!$17) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 15492
  return;
 }
 $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 15496
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 15497
 FUNCTION_TABLE_vi[$20 & 1023]($8); //@line 15498
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 199; //@line 15501
  $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 15502
  HEAP32[$21 >> 2] = $AsyncRetVal; //@line 15503
  sp = STACKTOP; //@line 15504
  return;
 }
 ___async_unwind = 0; //@line 15507
 HEAP32[$ReallocAsyncCtx5 >> 2] = 199; //@line 15508
 $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 15509
 HEAP32[$21 >> 2] = $AsyncRetVal; //@line 15510
 sp = STACKTOP; //@line 15511
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_348($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 13770
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13774
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13776
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13778
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 13780
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 13781
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 13785
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 13786
  FUNCTION_TABLE_vi[$13 & 1023]($6); //@line 13787
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 206; //@line 13790
   $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 13791
   HEAP32[$14 >> 2] = $4; //@line 13792
   $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 13793
   HEAP32[$15 >> 2] = $AsyncRetVal; //@line 13794
   $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 13795
   HEAP32[$16 >> 2] = $8; //@line 13796
   sp = STACKTOP; //@line 13797
   return;
  }
  ___async_unwind = 0; //@line 13800
  HEAP32[$ReallocAsyncCtx4 >> 2] = 206; //@line 13801
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 13802
  HEAP32[$14 >> 2] = $4; //@line 13803
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 13804
  HEAP32[$15 >> 2] = $AsyncRetVal; //@line 13805
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 13806
  HEAP32[$16 >> 2] = $8; //@line 13807
  sp = STACKTOP; //@line 13808
  return;
 }
 $17 = HEAP32[$4 >> 2] | 0; //@line 13811
 if (!$17) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 13815
  return;
 }
 $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 13819
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 13820
 FUNCTION_TABLE_vi[$20 & 1023]($8); //@line 13821
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 207; //@line 13824
  $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 13825
  HEAP32[$21 >> 2] = $AsyncRetVal; //@line 13826
  sp = STACKTOP; //@line 13827
  return;
 }
 ___async_unwind = 0; //@line 13830
 HEAP32[$ReallocAsyncCtx5 >> 2] = 207; //@line 13831
 $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 13832
 HEAP32[$21 >> 2] = $AsyncRetVal; //@line 13833
 sp = STACKTOP; //@line 13834
 return;
}
function ___mo_lookup($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$090 = 0, $$094 = 0, $$4 = 0, $10 = 0, $13 = 0, $17 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $31 = 0, $35 = 0, $4 = 0, $44 = 0, $46 = 0, $49 = 0, $53 = 0, $63 = 0, $7 = 0;
 $4 = (HEAP32[$0 >> 2] | 0) + 1794895138 | 0; //@line 11101
 $7 = _swapc(HEAP32[$0 + 8 >> 2] | 0, $4) | 0; //@line 11104
 $10 = _swapc(HEAP32[$0 + 12 >> 2] | 0, $4) | 0; //@line 11107
 $13 = _swapc(HEAP32[$0 + 16 >> 2] | 0, $4) | 0; //@line 11110
 L1 : do {
  if ($7 >>> 0 < $1 >>> 2 >>> 0) {
   $17 = $1 - ($7 << 2) | 0; //@line 11116
   if ($10 >>> 0 < $17 >>> 0 & $13 >>> 0 < $17 >>> 0) {
    if (!(($13 | $10) & 3)) {
     $23 = $10 >>> 2; //@line 11125
     $24 = $13 >>> 2; //@line 11126
     $$090 = 0; //@line 11127
     $$094 = $7; //@line 11127
     while (1) {
      $25 = $$094 >>> 1; //@line 11129
      $26 = $$090 + $25 | 0; //@line 11130
      $27 = $26 << 1; //@line 11131
      $28 = $27 + $23 | 0; //@line 11132
      $31 = _swapc(HEAP32[$0 + ($28 << 2) >> 2] | 0, $4) | 0; //@line 11135
      $35 = _swapc(HEAP32[$0 + ($28 + 1 << 2) >> 2] | 0, $4) | 0; //@line 11139
      if (!($35 >>> 0 < $1 >>> 0 & $31 >>> 0 < ($1 - $35 | 0) >>> 0)) {
       $$4 = 0; //@line 11145
       break L1;
      }
      if (HEAP8[$0 + ($35 + $31) >> 0] | 0) {
       $$4 = 0; //@line 11153
       break L1;
      }
      $44 = _strcmp($2, $0 + $35 | 0) | 0; //@line 11157
      if (!$44) {
       break;
      }
      $63 = ($44 | 0) < 0; //@line 11163
      if (($$094 | 0) == 1) {
       $$4 = 0; //@line 11168
       break L1;
      } else {
       $$090 = $63 ? $$090 : $26; //@line 11171
       $$094 = $63 ? $25 : $$094 - $25 | 0; //@line 11171
      }
     }
     $46 = $27 + $24 | 0; //@line 11174
     $49 = _swapc(HEAP32[$0 + ($46 << 2) >> 2] | 0, $4) | 0; //@line 11177
     $53 = _swapc(HEAP32[$0 + ($46 + 1 << 2) >> 2] | 0, $4) | 0; //@line 11181
     if ($53 >>> 0 < $1 >>> 0 & $49 >>> 0 < ($1 - $53 | 0) >>> 0) {
      $$4 = (HEAP8[$0 + ($53 + $49) >> 0] | 0) == 0 ? $0 + $53 | 0 : 0; //@line 11193
     } else {
      $$4 = 0; //@line 11195
     }
    } else {
     $$4 = 0; //@line 11198
    }
   } else {
    $$4 = 0; //@line 11201
   }
  } else {
   $$4 = 0; //@line 11204
  }
 } while (0);
 return $$4 | 0; //@line 11207
}
function __ZN7LoRaMac25on_rx_window2_timer_eventEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $21 = 0, $22 = 0, $25 = 0, $28 = 0, $29 = 0, $34 = 0, $36 = 0, $37 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 8858
 $2 = HEAP32[$0 + 356 >> 2] | 0; //@line 8860
 $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8862
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($2, $0 + 1056 | 0); //@line 8863
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 289; //@line 8866
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 8868
  sp = STACKTOP; //@line 8869
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 8872
 $7 = $0 + 1184 | 0; //@line 8875
 HEAP8[$7 >> 0] = HEAP8[$0 + 378 >> 0] | 0; //@line 8876
 HEAP32[$0 + 1188 >> 2] = HEAP32[$0 + 1132 >> 2]; //@line 8880
 HEAP8[$0 + 1200 >> 0] = HEAP8[$0 + 1141 >> 0] | 0; //@line 8884
 HEAP8[$0 + 1201 >> 0] = HEAP8[$0 + 369 >> 0] | 0; //@line 8888
 HEAP32[$0 + 1204 >> 2] = 1; //@line 8890
 $21 = $0 + 1202 | 0; //@line 8894
 HEAP8[$21 >> 0] = (HEAP32[$0 + 360 >> 2] | 0) == 2 & 1; //@line 8896
 $22 = HEAP32[$0 >> 2] | 0; //@line 8897
 $25 = HEAP32[(HEAP32[$22 >> 2] | 0) + 24 >> 2] | 0; //@line 8900
 $28 = (__ZN11LoRaMacMcps14get_indicationEv($0 + 288 | 0) | 0) + 10 | 0; //@line 8903
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 8904
 $29 = FUNCTION_TABLE_iiii[$25 & 15]($22, $7, $28) | 0; //@line 8905
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 290; //@line 8908
  HEAP32[$AsyncCtx + 4 >> 2] = $21; //@line 8910
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 8912
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 8914
  sp = STACKTOP; //@line 8915
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 8918
 if (!$29) {
  return;
 }
 $34 = (HEAP8[$21 >> 0] | 0) != 0; //@line 8923
 $36 = HEAP32[$0 + 1108 >> 2] | 0; //@line 8925
 $37 = HEAP32[$0 >> 2] | 0; //@line 8926
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8927
 __ZN7LoRaPHY15setup_rx_windowEbj($37, $34, $36); //@line 8928
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 291; //@line 8931
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 8933
  sp = STACKTOP; //@line 8934
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 8937
 HEAP32[$0 + 364 >> 2] = 1; //@line 8939
 return;
}
function _fputc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $19 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $32 = 0, $34 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 14555
 if ((HEAP32[$1 + 76 >> 2] | 0) < 0) {
  label = 3; //@line 14560
 } else {
  if (!(___lockfile($1) | 0)) {
   label = 3; //@line 14565
  } else {
   $20 = $0 & 255; //@line 14567
   $21 = $0 & 255; //@line 14568
   if (($21 | 0) == (HEAP8[$1 + 75 >> 0] | 0)) {
    label = 12; //@line 14574
   } else {
    $26 = $1 + 20 | 0; //@line 14576
    $27 = HEAP32[$26 >> 2] | 0; //@line 14577
    if ($27 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$26 >> 2] = $27 + 1; //@line 14583
     HEAP8[$27 >> 0] = $20; //@line 14584
     $34 = $21; //@line 14585
    } else {
     label = 12; //@line 14587
    }
   }
   do {
    if ((label | 0) == 12) {
     $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 14592
     $32 = ___overflow($1, $0) | 0; //@line 14593
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 680; //@line 14596
      HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 14598
      sp = STACKTOP; //@line 14599
      return 0; //@line 14600
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 14602
      $34 = $32; //@line 14603
      break;
     }
    }
   } while (0);
   ___unlockfile($1); //@line 14608
   $$0 = $34; //@line 14609
  }
 }
 do {
  if ((label | 0) == 3) {
   $7 = $0 & 255; //@line 14614
   $8 = $0 & 255; //@line 14615
   if (($8 | 0) != (HEAP8[$1 + 75 >> 0] | 0)) {
    $13 = $1 + 20 | 0; //@line 14621
    $14 = HEAP32[$13 >> 2] | 0; //@line 14622
    if ($14 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$13 >> 2] = $14 + 1; //@line 14628
     HEAP8[$14 >> 0] = $7; //@line 14629
     $$0 = $8; //@line 14630
     break;
    }
   }
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 14634
   $19 = ___overflow($1, $0) | 0; //@line 14635
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 679; //@line 14638
    sp = STACKTOP; //@line 14639
    return 0; //@line 14640
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 14642
    $$0 = $19; //@line 14643
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 14648
}
function _putc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $19 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $32 = 0, $34 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10766
 if ((HEAP32[$1 + 76 >> 2] | 0) < 0) {
  label = 3; //@line 10771
 } else {
  if (!(___lockfile($1) | 0)) {
   label = 3; //@line 10776
  } else {
   $20 = $0 & 255; //@line 10778
   $21 = $0 & 255; //@line 10779
   if (($21 | 0) == (HEAP8[$1 + 75 >> 0] | 0)) {
    label = 12; //@line 10785
   } else {
    $26 = $1 + 20 | 0; //@line 10787
    $27 = HEAP32[$26 >> 2] | 0; //@line 10788
    if ($27 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$26 >> 2] = $27 + 1; //@line 10794
     HEAP8[$27 >> 0] = $20; //@line 10795
     $34 = $21; //@line 10796
    } else {
     label = 12; //@line 10798
    }
   }
   do {
    if ((label | 0) == 12) {
     $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 10803
     $32 = ___overflow($1, $0) | 0; //@line 10804
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 665; //@line 10807
      HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 10809
      sp = STACKTOP; //@line 10810
      return 0; //@line 10811
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 10813
      $34 = $32; //@line 10814
      break;
     }
    }
   } while (0);
   ___unlockfile($1); //@line 10819
   $$0 = $34; //@line 10820
  }
 }
 do {
  if ((label | 0) == 3) {
   $7 = $0 & 255; //@line 10825
   $8 = $0 & 255; //@line 10826
   if (($8 | 0) != (HEAP8[$1 + 75 >> 0] | 0)) {
    $13 = $1 + 20 | 0; //@line 10832
    $14 = HEAP32[$13 >> 2] | 0; //@line 10833
    if ($14 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$13 >> 2] = $14 + 1; //@line 10839
     HEAP8[$14 >> 0] = $7; //@line 10840
     $$0 = $8; //@line 10841
     break;
    }
   }
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 10845
   $19 = ___overflow($1, $0) | 0; //@line 10846
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 664; //@line 10849
    sp = STACKTOP; //@line 10850
    return 0; //@line 10851
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 10853
    $$0 = $19; //@line 10854
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 10859
}
function ___fflush_unlocked($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $22 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11372
 $1 = $0 + 20 | 0; //@line 11373
 $3 = $0 + 28 | 0; //@line 11375
 do {
  if ((HEAP32[$1 >> 2] | 0) >>> 0 > (HEAP32[$3 >> 2] | 0) >>> 0) {
   $7 = HEAP32[$0 + 36 >> 2] | 0; //@line 11381
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 11382
   FUNCTION_TABLE_iiii[$7 & 15]($0, 0, 0) | 0; //@line 11383
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 671; //@line 11386
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 11388
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 11390
    HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 11392
    sp = STACKTOP; //@line 11393
    return 0; //@line 11394
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 11396
    if (!(HEAP32[$1 >> 2] | 0)) {
     $$0 = -1; //@line 11400
     break;
    } else {
     label = 5; //@line 11403
     break;
    }
   }
  } else {
   label = 5; //@line 11408
  }
 } while (0);
 if ((label | 0) == 5) {
  $13 = $0 + 4 | 0; //@line 11412
  $14 = HEAP32[$13 >> 2] | 0; //@line 11413
  $15 = $0 + 8 | 0; //@line 11414
  $16 = HEAP32[$15 >> 2] | 0; //@line 11415
  do {
   if ($14 >>> 0 < $16 >>> 0) {
    $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 11423
    $AsyncCtx3 = _emscripten_alloc_async_context(24, sp) | 0; //@line 11424
    FUNCTION_TABLE_iiii[$22 & 15]($0, $14 - $16 | 0, 1) | 0; //@line 11425
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 672; //@line 11428
     HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 11430
     HEAP32[$AsyncCtx3 + 8 >> 2] = $3; //@line 11432
     HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 11434
     HEAP32[$AsyncCtx3 + 16 >> 2] = $15; //@line 11436
     HEAP32[$AsyncCtx3 + 20 >> 2] = $13; //@line 11438
     sp = STACKTOP; //@line 11439
     return 0; //@line 11440
    } else {
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 11442
     break;
    }
   }
  } while (0);
  HEAP32[$0 + 16 >> 2] = 0; //@line 11448
  HEAP32[$3 >> 2] = 0; //@line 11449
  HEAP32[$1 >> 2] = 0; //@line 11450
  HEAP32[$15 >> 2] = 0; //@line 11451
  HEAP32[$13 >> 2] = 0; //@line 11452
  $$0 = 0; //@line 11453
 }
 return $$0 | 0; //@line 11455
}
function __ZN12LoRaWANStack9handle_rxEhPhth($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$off0 = 0, $$021 = 0, $$1 = 0, $$pre$phi25Z2D = 0, $12 = 0, $13 = 0, $15 = 0, $19 = 0, $20 = 0, $22 = 0, $24 = 0, $27 = 0, $28 = 0, $32 = 0, $8 = 0, label = 0;
 if (!(HEAP8[$0 + 1932 >> 0] | 0)) {
  $$1 = -1017; //@line 7751
  return $$1 | 0; //@line 7752
 }
 $8 = $0 + 2236 | 0; //@line 7754
 if (!(HEAP8[$8 >> 0] | 0)) {
  $$1 = -1001; //@line 7758
  return $$1 | 0; //@line 7759
 }
 if (!$2) {
  $$1 = -1003; //@line 7763
  return $$1 | 0; //@line 7764
 }
 $12 = $0 + 2256 | 0; //@line 7766
 $13 = HEAP32[$12 >> 2] | 0; //@line 7767
 $15 = HEAP16[$0 + 2260 >> 1] | 0; //@line 7769
 if ((HEAP8[$0 + 2253 >> 0] | 0) != $1 << 24 >> 24) {
  $$1 = -1001; //@line 7774
  return $$1 | 0; //@line 7775
 }
 $19 = $15 & 65535; //@line 7777
 $20 = $3 & 65535; //@line 7778
 $22 = $0 + 2282 | 0; //@line 7780
 $24 = (HEAP16[$22 >> 1] | 0) == 0; //@line 7782
 if (($15 & 65535) > ($3 & 65535)) {
  if ($24) {
   $27 = $0 + 2280 | 0; //@line 7787
   HEAP16[$27 >> 1] = $19 - $20; //@line 7788
   HEAP16[$22 >> 1] = $3; //@line 7789
   _memcpy($2 | 0, $13 | 0, $20 | 0) | 0; //@line 7790
   $$0$off0 = 0; //@line 7791
   $$021 = $3; //@line 7791
   $$pre$phi25Z2D = $27; //@line 7791
  } else {
   label = 9; //@line 7793
  }
 } else {
  if ($24) {
   $28 = $0 + 2280 | 0; //@line 7797
   HEAP16[$28 >> 1] = 0; //@line 7798
   HEAP16[$22 >> 1] = 0; //@line 7799
   _memcpy($2 | 0, $13 | 0, $19 | 0) | 0; //@line 7800
   $$0$off0 = 1; //@line 7801
   $$021 = $15; //@line 7801
   $$pre$phi25Z2D = $28; //@line 7801
  } else {
   label = 9; //@line 7803
  }
 }
 if ((label | 0) == 9) {
  $$0$off0 = 0; //@line 7808
  $$021 = $15; //@line 7808
  $$pre$phi25Z2D = $0 + 2280 | 0; //@line 7808
 }
 if (HEAP16[$$pre$phi25Z2D >> 1] | 0) {
  $32 = HEAP16[$0 + 2282 >> 1] | 0; //@line 7814
  if ($32 << 16 >> 16) {
   _memcpy($2 | 0, $13 + ($32 & 65535) | 0, $$021 & 65535 | 0) | 0; //@line 7820
  }
 }
 if (!$$0$off0) {
  $$1 = $$021; //@line 7824
  return $$1 | 0; //@line 7825
 }
 _memset(HEAP32[$12 >> 2] | 0, 0, 255) | 0; //@line 7828
 HEAP8[$8 >> 0] = 0; //@line 7829
 $$1 = $$021; //@line 7830
 return $$1 | 0; //@line 7831
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_405($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 29895
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29897
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29899
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29901
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29903
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29905
 $11 = HEAP32[$2 >> 2] | 0; //@line 29906
 $13 = $6 + 12 | 0; //@line 29908
 HEAP32[$6 >> 2] = 432; //@line 29909
 HEAP32[$6 + 4 >> 2] = 0; //@line 29911
 HEAP32[$6 + 8 >> 2] = $4; //@line 29913
 HEAP32[$13 >> 2] = 836; //@line 29914
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(28) | 0; //@line 29915
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($11, $4 + 1036 | 0, $6); //@line 29916
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 433; //@line 29919
  $14 = $ReallocAsyncCtx8 + 4 | 0; //@line 29920
  HEAP32[$14 >> 2] = $2; //@line 29921
  $15 = $ReallocAsyncCtx8 + 8 | 0; //@line 29922
  HEAP32[$15 >> 2] = $4; //@line 29923
  $16 = $ReallocAsyncCtx8 + 12 | 0; //@line 29924
  HEAP32[$16 >> 2] = $10; //@line 29925
  $17 = $ReallocAsyncCtx8 + 16 | 0; //@line 29926
  HEAP32[$17 >> 2] = $8; //@line 29927
  $18 = $ReallocAsyncCtx8 + 20 | 0; //@line 29928
  HEAP32[$18 >> 2] = $6; //@line 29929
  $19 = $ReallocAsyncCtx8 + 24 | 0; //@line 29930
  HEAP32[$19 >> 2] = $13; //@line 29931
  sp = STACKTOP; //@line 29932
  return;
 }
 ___async_unwind = 0; //@line 29935
 HEAP32[$ReallocAsyncCtx8 >> 2] = 433; //@line 29936
 $14 = $ReallocAsyncCtx8 + 4 | 0; //@line 29937
 HEAP32[$14 >> 2] = $2; //@line 29938
 $15 = $ReallocAsyncCtx8 + 8 | 0; //@line 29939
 HEAP32[$15 >> 2] = $4; //@line 29940
 $16 = $ReallocAsyncCtx8 + 12 | 0; //@line 29941
 HEAP32[$16 >> 2] = $10; //@line 29942
 $17 = $ReallocAsyncCtx8 + 16 | 0; //@line 29943
 HEAP32[$17 >> 2] = $8; //@line 29944
 $18 = $ReallocAsyncCtx8 + 20 | 0; //@line 29945
 HEAP32[$18 >> 2] = $6; //@line 29946
 $19 = $ReallocAsyncCtx8 + 24 | 0; //@line 29947
 HEAP32[$19 >> 2] = $13; //@line 29948
 sp = STACKTOP; //@line 29949
 return;
}
function __ZN7LoRaMac11schedule_txEv__async_cb_68($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $31 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 20820
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20822
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20824
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20830
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20832
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20834
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20836
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 20838
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 20840
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 20842
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 20844
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 20846
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 20848
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 20850
 $31 = HEAP32[$2 >> 2] | 0; //@line 20851
 $34 = HEAP32[(HEAP32[$31 >> 2] | 0) + 28 >> 2] | 0; //@line 20854
 $36 = HEAP8[$4 + 1136 >> 0] | 0; //@line 20856
 $37 = HEAP8[HEAP32[$0 + 12 >> 2] >> 0] | 0; //@line 20857
 $38 = HEAP32[HEAP32[$0 + 16 >> 2] >> 2] | 0; //@line 20858
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(56) | 0; //@line 20860
 FUNCTION_TABLE_viiiii[$34 & 7]($31, $36, $37, $38, $4 + 1184 | 0); //@line 20861
 if (!___async) {
  ___async_unwind = 0; //@line 20864
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 397; //@line 20866
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $10; //@line 20868
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 20870
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $12; //@line 20872
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $2; //@line 20874
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $14; //@line 20876
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $16; //@line 20878
 HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $18; //@line 20880
 HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $20; //@line 20882
 HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $22; //@line 20884
 HEAP32[$ReallocAsyncCtx5 + 40 >> 2] = $24; //@line 20886
 HEAP32[$ReallocAsyncCtx5 + 44 >> 2] = $26; //@line 20888
 HEAP32[$ReallocAsyncCtx5 + 48 >> 2] = $28; //@line 20890
 HEAP32[$ReallocAsyncCtx5 + 52 >> 2] = $30; //@line 20892
 sp = STACKTOP; //@line 20893
 return;
}
function __ZN7LoRaPHY15setup_rx_windowEbj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $14 = 0, $17 = 0, $20 = 0, $3 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 22666
 $3 = $0 + 4 | 0; //@line 22667
 $4 = HEAP32[$3 >> 2] | 0; //@line 22668
 $7 = HEAP32[(HEAP32[$4 >> 2] | 0) + 72 >> 2] | 0; //@line 22671
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 22672
 FUNCTION_TABLE_vi[$7 & 1023]($4); //@line 22673
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 546; //@line 22676
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 22678
  HEAP8[$AsyncCtx + 8 >> 0] = $1 & 1; //@line 22681
  HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 22683
  sp = STACKTOP; //@line 22684
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 22687
 $11 = HEAP32[$3 >> 2] | 0; //@line 22688
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 28 >> 2] | 0; //@line 22691
 do {
  if ($1) {
   $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 22694
   FUNCTION_TABLE_vii[$14 & 31]($11, 0); //@line 22695
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 548; //@line 22698
    HEAP32[$AsyncCtx7 + 4 >> 2] = $3; //@line 22700
    sp = STACKTOP; //@line 22701
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 22704
    break;
   }
  } else {
   $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 22708
   FUNCTION_TABLE_vii[$14 & 31]($11, $2); //@line 22709
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 547; //@line 22712
    HEAP32[$AsyncCtx3 + 4 >> 2] = $3; //@line 22714
    sp = STACKTOP; //@line 22715
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 22718
    break;
   }
  }
 } while (0);
 $17 = HEAP32[$3 >> 2] | 0; //@line 22723
 $20 = HEAP32[(HEAP32[$17 >> 2] | 0) + 76 >> 2] | 0; //@line 22726
 $AsyncCtx11 = _emscripten_alloc_async_context(4, sp) | 0; //@line 22727
 FUNCTION_TABLE_vi[$20 & 1023]($17); //@line 22728
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 549; //@line 22731
  sp = STACKTOP; //@line 22732
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx11 | 0); //@line 22735
  return;
 }
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_140($0) {
 $0 = $0 | 0;
 var $14 = 0, $15 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 29972
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29974
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29976
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29978
 HEAP8[$2 + 1964 >> 0] = 0; //@line 29981
 HEAP32[$2 + 2256 >> 2] = 0; //@line 29983
 HEAP8[$2 + 2236 >> 0] = 0; //@line 29985
 HEAP16[$2 + 2282 >> 1] = 0; //@line 29987
 HEAP16[$2 + 2260 >> 1] = 0; //@line 29989
 HEAP8[$2 + 1932 >> 0] = 0; //@line 29991
 $14 = $2 + 1892 | 0; //@line 29992
 _memset($2 + 1975 | 0, 0, 259) | 0; //@line 29993
 $15 = HEAP32[$14 >> 2] | 0; //@line 29994
 if (!$15) {
  HEAP32[___async_retval >> 2] = -1011; //@line 29998
  return;
 }
 $19 = HEAP32[$2 + 2288 >> 2] | 0; //@line 30003
 $21 = HEAP32[$15 + 4 >> 2] | 0; //@line 30005
 $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 30006
 FUNCTION_TABLE_vii[$21 & 31]($6, $2 + 1880 | 0); //@line 30007
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 163; //@line 30010
  $22 = $ReallocAsyncCtx + 4 | 0; //@line 30011
  HEAP32[$22 >> 2] = $14; //@line 30012
  $23 = $ReallocAsyncCtx + 8 | 0; //@line 30013
  HEAP32[$23 >> 2] = $6; //@line 30014
  $24 = $ReallocAsyncCtx + 12 | 0; //@line 30015
  HEAP32[$24 >> 2] = $19; //@line 30016
  $25 = $ReallocAsyncCtx + 16 | 0; //@line 30017
  HEAP32[$25 >> 2] = $6; //@line 30018
  $26 = $ReallocAsyncCtx + 20 | 0; //@line 30019
  HEAP32[$26 >> 2] = $4; //@line 30020
  sp = STACKTOP; //@line 30021
  return;
 }
 ___async_unwind = 0; //@line 30024
 HEAP32[$ReallocAsyncCtx >> 2] = 163; //@line 30025
 $22 = $ReallocAsyncCtx + 4 | 0; //@line 30026
 HEAP32[$22 >> 2] = $14; //@line 30027
 $23 = $ReallocAsyncCtx + 8 | 0; //@line 30028
 HEAP32[$23 >> 2] = $6; //@line 30029
 $24 = $ReallocAsyncCtx + 12 | 0; //@line 30030
 HEAP32[$24 >> 2] = $19; //@line 30031
 $25 = $ReallocAsyncCtx + 16 | 0; //@line 30032
 HEAP32[$25 >> 2] = $6; //@line 30033
 $26 = $ReallocAsyncCtx + 20 | 0; //@line 30034
 HEAP32[$26 >> 2] = $4; //@line 30035
 sp = STACKTOP; //@line 30036
 return;
}
function __ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_119($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $4 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 28848
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28850
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28852
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28856
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28860
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28862
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 28864
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 28867
  __ZN7LoRaMac11schedule_txEv($2) | 0; //@line 28868
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 390; //@line 28871
   $17 = $ReallocAsyncCtx4 + 4 | 0; //@line 28872
   HEAP32[$17 >> 2] = $12; //@line 28873
   $18 = $ReallocAsyncCtx4 + 8 | 0; //@line 28874
   HEAP32[$18 >> 2] = $14; //@line 28875
   sp = STACKTOP; //@line 28876
   return;
  }
  ___async_unwind = 0; //@line 28879
  HEAP32[$ReallocAsyncCtx4 >> 2] = 390; //@line 28880
  $17 = $ReallocAsyncCtx4 + 4 | 0; //@line 28881
  HEAP32[$17 >> 2] = $12; //@line 28882
  $18 = $ReallocAsyncCtx4 + 8 | 0; //@line 28883
  HEAP32[$18 >> 2] = $14; //@line 28884
  sp = STACKTOP; //@line 28885
  return;
 } else {
  _printf(12329, $4) | 0; //@line 28888
  HEAP32[$8 >> 2] = $AsyncRetVal; //@line 28889
  _printf(12342, $8) | 0; //@line 28890
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 28891
  _putchar(10) | 0; //@line 28892
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 391; //@line 28895
   $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 28896
   HEAP32[$19 >> 2] = $12; //@line 28897
   $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 28898
   HEAP32[$20 >> 2] = $14; //@line 28899
   sp = STACKTOP; //@line 28900
   return;
  }
  ___async_unwind = 0; //@line 28903
  HEAP32[$ReallocAsyncCtx2 >> 2] = 391; //@line 28904
  $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 28905
  HEAP32[$19 >> 2] = $12; //@line 28906
  $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 28907
  HEAP32[$20 >> 2] = $14; //@line 28908
  sp = STACKTOP; //@line 28909
  return;
 }
}
function __ZN7LoRaMac11schedule_txEv__async_cb_71($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 21095
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21097
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21099
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21101
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21103
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21105
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21107
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21109
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 21111
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 21113
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 21115
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 21117
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 21119
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 21121
 $27 = HEAP32[$2 >> 2] | 0; //@line 21122
 $30 = HEAP32[(HEAP32[$27 >> 2] | 0) + 72 >> 2] | 0; //@line 21125
 $31 = HEAP8[$8 >> 0] | 0; //@line 21126
 $33 = HEAP8[$4 + 1129 >> 0] | 0; //@line 21128
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(56) | 0; //@line 21129
 $34 = FUNCTION_TABLE_iiii[$30 & 15]($27, $31, $33) | 0; //@line 21130
 if (!___async) {
  HEAP8[___async_retval >> 0] = $34; //@line 21134
  ___async_unwind = 0; //@line 21135
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 395; //@line 21137
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 21139
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 21141
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $10; //@line 21143
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $12; //@line 21145
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $16; //@line 21147
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $18; //@line 21149
 HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $20; //@line 21151
 HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $14; //@line 21153
 HEAP32[$ReallocAsyncCtx3 + 36 >> 2] = $22; //@line 21155
 HEAP32[$ReallocAsyncCtx3 + 40 >> 2] = $24; //@line 21157
 HEAP32[$ReallocAsyncCtx3 + 44 >> 2] = $6; //@line 21159
 HEAP32[$ReallocAsyncCtx3 + 48 >> 2] = $26; //@line 21161
 HEAP32[$ReallocAsyncCtx3 + 52 >> 2] = $8; //@line 21163
 sp = STACKTOP; //@line 21164
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_132($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 29515
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29517
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29519
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29521
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29523
 $9 = $2 + 1892 | 0; //@line 29524
 $10 = HEAP32[$9 >> 2] | 0; //@line 29525
 if (!$10) {
  HEAP32[$4 >> 2] = 6; //@line 29528
  HEAP32[___async_retval >> 2] = -1014; //@line 29530
  return;
 }
 $14 = HEAP32[$2 + 2288 >> 2] | 0; //@line 29535
 $16 = HEAP32[$10 + 4 >> 2] | 0; //@line 29537
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(28) | 0; //@line 29538
 FUNCTION_TABLE_vii[$16 & 31]($6, $2 + 1880 | 0); //@line 29539
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 183; //@line 29542
  $17 = $ReallocAsyncCtx7 + 4 | 0; //@line 29543
  HEAP32[$17 >> 2] = $9; //@line 29544
  $18 = $ReallocAsyncCtx7 + 8 | 0; //@line 29545
  HEAP32[$18 >> 2] = $6; //@line 29546
  $19 = $ReallocAsyncCtx7 + 12 | 0; //@line 29547
  HEAP32[$19 >> 2] = $14; //@line 29548
  $20 = $ReallocAsyncCtx7 + 16 | 0; //@line 29549
  HEAP32[$20 >> 2] = $6; //@line 29550
  $21 = $ReallocAsyncCtx7 + 20 | 0; //@line 29551
  HEAP32[$21 >> 2] = $4; //@line 29552
  $22 = $ReallocAsyncCtx7 + 24 | 0; //@line 29553
  HEAP32[$22 >> 2] = $8; //@line 29554
  sp = STACKTOP; //@line 29555
  return;
 }
 ___async_unwind = 0; //@line 29558
 HEAP32[$ReallocAsyncCtx7 >> 2] = 183; //@line 29559
 $17 = $ReallocAsyncCtx7 + 4 | 0; //@line 29560
 HEAP32[$17 >> 2] = $9; //@line 29561
 $18 = $ReallocAsyncCtx7 + 8 | 0; //@line 29562
 HEAP32[$18 >> 2] = $6; //@line 29563
 $19 = $ReallocAsyncCtx7 + 12 | 0; //@line 29564
 HEAP32[$19 >> 2] = $14; //@line 29565
 $20 = $ReallocAsyncCtx7 + 16 | 0; //@line 29566
 HEAP32[$20 >> 2] = $6; //@line 29567
 $21 = $ReallocAsyncCtx7 + 20 | 0; //@line 29568
 HEAP32[$21 >> 2] = $4; //@line 29569
 $22 = $ReallocAsyncCtx7 + 24 | 0; //@line 29570
 HEAP32[$22 >> 2] = $8; //@line 29571
 sp = STACKTOP; //@line 29572
 return;
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_86($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 22904
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22906
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22908
 $5 = HEAP8[$2 >> 0] & -5; //@line 22910
 HEAP8[$2 >> 0] = $5; //@line 22911
 if (!($5 & 16)) {
  return;
 }
 HEAP8[$2 >> 0] = $5 & -17; //@line 22918
 $10 = HEAP32[$4 + 1324 >> 2] | 0; //@line 22920
 $11 = $10 + 48 | 0; //@line 22921
 $13 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 22923
 $14 = $10 + 60 | 0; //@line 22924
 $15 = HEAP32[$14 >> 2] | 0; //@line 22925
 if (!$15) {
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(16) | 0; //@line 22928
  _mbed_assert_internal(13874, 13879, 1102); //@line 22929
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 385; //@line 22932
   $17 = $ReallocAsyncCtx12 + 4 | 0; //@line 22933
   HEAP32[$17 >> 2] = $14; //@line 22934
   $18 = $ReallocAsyncCtx12 + 8 | 0; //@line 22935
   HEAP32[$18 >> 2] = $11; //@line 22936
   $19 = $ReallocAsyncCtx12 + 12 | 0; //@line 22937
   HEAP32[$19 >> 2] = $13; //@line 22938
   sp = STACKTOP; //@line 22939
   return;
  }
  ___async_unwind = 0; //@line 22942
  HEAP32[$ReallocAsyncCtx12 >> 2] = 385; //@line 22943
  $17 = $ReallocAsyncCtx12 + 4 | 0; //@line 22944
  HEAP32[$17 >> 2] = $14; //@line 22945
  $18 = $ReallocAsyncCtx12 + 8 | 0; //@line 22946
  HEAP32[$18 >> 2] = $11; //@line 22947
  $19 = $ReallocAsyncCtx12 + 12 | 0; //@line 22948
  HEAP32[$19 >> 2] = $13; //@line 22949
  sp = STACKTOP; //@line 22950
  return;
 } else {
  $20 = HEAP32[$15 >> 2] | 0; //@line 22953
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 22954
  FUNCTION_TABLE_vii[$20 & 31]($11, $13); //@line 22955
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 386; //@line 22958
   sp = STACKTOP; //@line 22959
   return;
  }
  ___async_unwind = 0; //@line 22962
  HEAP32[$ReallocAsyncCtx5 >> 2] = 386; //@line 22963
  sp = STACKTOP; //@line 22964
  return;
 }
}
function __ZN14lorawan_timersD2Ev__async_cb_370($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 15619
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15621
 $4 = HEAP32[$2 + 68 >> 2] | 0; //@line 15623
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 15628
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 15629
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 56 | 0); //@line 15630
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 265; //@line 15633
   $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 15634
   HEAP32[$9 >> 2] = $2; //@line 15635
   sp = STACKTOP; //@line 15636
   return;
  }
  ___async_unwind = 0; //@line 15639
  HEAP32[$ReallocAsyncCtx3 >> 2] = 265; //@line 15640
  $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 15641
  HEAP32[$9 >> 2] = $2; //@line 15642
  sp = STACKTOP; //@line 15643
  return;
 }
 $11 = HEAP32[$2 + 48 >> 2] | 0; //@line 15647
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 15652
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 15653
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 36 | 0); //@line 15654
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 266; //@line 15657
   $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 15658
   HEAP32[$16 >> 2] = $2; //@line 15659
   sp = STACKTOP; //@line 15660
   return;
  }
  ___async_unwind = 0; //@line 15663
  HEAP32[$ReallocAsyncCtx4 >> 2] = 266; //@line 15664
  $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 15665
  HEAP32[$16 >> 2] = $2; //@line 15666
  sp = STACKTOP; //@line 15667
  return;
 }
 $18 = HEAP32[$2 + 28 >> 2] | 0; //@line 15671
 if (!$18) {
  return;
 }
 $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 15678
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 15679
 FUNCTION_TABLE_vi[$22 & 1023]($2 + 16 | 0); //@line 15680
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 267; //@line 15683
  sp = STACKTOP; //@line 15684
  return;
 }
 ___async_unwind = 0; //@line 15687
 HEAP32[$ReallocAsyncCtx5 >> 2] = 267; //@line 15688
 sp = STACKTOP; //@line 15689
 return;
}
function __ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 $14 = $14 | 0;
 var $$ = 0, $$sink = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $40 = 0, label = 0;
 $15 = $8 & 1; //@line 123
 $16 = $10 & 1; //@line 124
 $17 = $11 & 1; //@line 125
 $18 = $13 & 1; //@line 126
 $19 = $14 & 1; //@line 127
 HEAP8[$0 + 689 >> 0] = $1; //@line 130
 switch ($1 | 0) {
 case 0:
  {
   HEAP32[$0 + 704 >> 2] = $2; //@line 134
   HEAP32[$0 + 712 >> 2] = $3; //@line 136
   HEAP32[$0 + 708 >> 2] = $5; //@line 138
   HEAP8[$0 + 718 >> 0] = $15; //@line 140
   HEAP8[$0 + 719 >> 0] = $9; //@line 142
   HEAP8[$0 + 720 >> 0] = $16; //@line 144
   HEAP8[$0 + 721 >> 0] = $18; //@line 146
   HEAP8[$0 + 722 >> 0] = $19; //@line 148
   HEAP16[$0 + 716 >> 1] = $6; //@line 150
   HEAP32[$0 + 728 >> 2] = ~~(1.0 / +($3 >>> 0) * 8.0 * +($7 & 65535) * 1.0e3) >>> 0; //@line 159
   return;
  }
 case 1:
  {
   if ($2 >>> 0 > 2) {
    while (1) {}
   }
   $40 = $2 + 7 | 0; //@line 169
   HEAP32[$0 + 752 >> 2] = $40; //@line 171
   HEAP32[$0 + 756 >> 2] = $3; //@line 173
   HEAP8[$0 + 761 >> 0] = $4; //@line 175
   HEAP16[$0 + 762 >> 1] = $6; //@line 177
   HEAP8[$0 + 764 >> 0] = $15; //@line 179
   HEAP8[$0 + 765 >> 0] = $9; //@line 181
   HEAP8[$0 + 766 >> 0] = $16; //@line 183
   HEAP8[$0 + 767 >> 0] = $17; //@line 185
   HEAP8[$0 + 768 >> 0] = $12; //@line 187
   HEAP8[$0 + 769 >> 0] = $18; //@line 189
   HEAP8[$0 + 770 >> 0] = $19; //@line 191
   $$ = $3 >>> 0 > 6 ? $3 : 6; //@line 193
   if (($2 | 0) == 0 & (($$ >>> 0 < 12 ? $$ : 12) + -11 | 0) >>> 0 < 2) {
    label = 7; //@line 201
   } else {
    if (($40 | 0) == 8 & $$ >>> 0 > 11) {
     label = 7; //@line 207
    } else {
     $$sink = 0; //@line 209
    }
   }
   if ((label | 0) == 7) {
    $$sink = 1; //@line 213
   }
   HEAP8[$0 + 760 >> 0] = $$sink; //@line 216
   return;
  }
 default:
  {
   return;
  }
 }
}
function __ZN7LoRaMac14handle_rx_doneEPhtsa($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $12 = 0, $15 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 8950
 STACKTOP = STACKTOP + 16 | 0; //@line 8951
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 8951
 $5 = sp; //@line 8952
 $7 = HEAP32[$0 + 1328 >> 2] | 0; //@line 8954
 $8 = $5 + 12 | 0; //@line 8955
 HEAP32[$5 >> 2] = 6; //@line 8956
 HEAP32[$5 + 4 >> 2] = 0; //@line 8958
 HEAP32[$5 + 8 >> 2] = $0; //@line 8960
 HEAP32[$8 >> 2] = 848; //@line 8961
 $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 8962
 $9 = __ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3_($7, $5, $1, $2, $3, $4) | 0; //@line 8963
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 292; //@line 8966
  HEAP32[$AsyncCtx3 + 4 >> 2] = $8; //@line 8968
  HEAP32[$AsyncCtx3 + 8 >> 2] = $5; //@line 8970
  sp = STACKTOP; //@line 8971
  STACKTOP = sp; //@line 8972
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 8974
 $12 = HEAP32[$8 >> 2] | 0; //@line 8975
 do {
  if ($12 | 0) {
   $15 = HEAP32[$12 + 8 >> 2] | 0; //@line 8980
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 8981
   FUNCTION_TABLE_vi[$15 & 1023]($5); //@line 8982
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 293; //@line 8985
    HEAP32[$AsyncCtx + 4 >> 2] = $5; //@line 8987
    HEAP32[$AsyncCtx + 8 >> 2] = $9; //@line 8989
    sp = STACKTOP; //@line 8990
    STACKTOP = sp; //@line 8991
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 8993
    break;
   }
  }
 } while (0);
 if ($9 | 0) {
  STACKTOP = sp; //@line 9000
  return;
 }
 $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 9002
 _mbed_assert_internal(12025, 12034, 141); //@line 9003
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 294; //@line 9006
  sp = STACKTOP; //@line 9007
  STACKTOP = sp; //@line 9008
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 9010
 STACKTOP = sp; //@line 9011
 return;
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_391($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 29012
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29014
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29016
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29018
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29020
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29022
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29024
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29026
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 29028
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 29030
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 29032
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 29034
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 29036
 $25 = $4 + 1088 | 0; //@line 29037
 HEAP32[$25 >> 2] = 0; //@line 29038
 HEAP32[$25 + 4 >> 2] = 0; //@line 29038
 HEAP32[$25 + 8 >> 2] = 0; //@line 29038
 HEAP32[$25 + 12 >> 2] = 0; //@line 29038
 HEAP8[$4 + 1104 >> 0] = 1; //@line 29040
 HEAP32[$2 >> 2] = 672; //@line 29041
 $27 = $4 + 1112 | 0; //@line 29042
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(52) | 0; //@line 29043
 __ZN4mbed10TimerEventC2Ev($27); //@line 29044
 if (!___async) {
  ___async_unwind = 0; //@line 29047
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 75; //@line 29049
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $27; //@line 29051
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 29053
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 29055
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 29057
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 29059
 HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 29061
 HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $14; //@line 29063
 HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $16; //@line 29065
 HEAP32[$ReallocAsyncCtx2 + 36 >> 2] = $18; //@line 29067
 HEAP32[$ReallocAsyncCtx2 + 40 >> 2] = $20; //@line 29069
 HEAP32[$ReallocAsyncCtx2 + 44 >> 2] = $22; //@line 29071
 HEAP32[$ReallocAsyncCtx2 + 48 >> 2] = $24; //@line 29073
 sp = STACKTOP; //@line 29074
 return;
}
function __ZN12radio_eventsD2Ev__async_cb_351($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 14215
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14217
 $4 = HEAP32[$2 + 44 >> 2] | 0; //@line 14219
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 14224
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 14225
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 32 | 0); //@line 14226
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 260; //@line 14229
   $9 = $ReallocAsyncCtx5 + 4 | 0; //@line 14230
   HEAP32[$9 >> 2] = $2; //@line 14231
   sp = STACKTOP; //@line 14232
   return;
  }
  ___async_unwind = 0; //@line 14235
  HEAP32[$ReallocAsyncCtx5 >> 2] = 260; //@line 14236
  $9 = $ReallocAsyncCtx5 + 4 | 0; //@line 14237
  HEAP32[$9 >> 2] = $2; //@line 14238
  sp = STACKTOP; //@line 14239
  return;
 }
 $11 = HEAP32[$2 + 28 >> 2] | 0; //@line 14243
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 14248
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 14249
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 16 | 0); //@line 14250
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 261; //@line 14253
   $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 14254
   HEAP32[$16 >> 2] = $2; //@line 14255
   sp = STACKTOP; //@line 14256
   return;
  }
  ___async_unwind = 0; //@line 14259
  HEAP32[$ReallocAsyncCtx6 >> 2] = 261; //@line 14260
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 14261
  HEAP32[$16 >> 2] = $2; //@line 14262
  sp = STACKTOP; //@line 14263
  return;
 }
 $18 = HEAP32[$2 + 12 >> 2] | 0; //@line 14267
 if (!$18) {
  return;
 }
 $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 14273
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 14274
 FUNCTION_TABLE_vi[$21 & 1023]($2); //@line 14275
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 262; //@line 14278
  sp = STACKTOP; //@line 14279
  return;
 }
 ___async_unwind = 0; //@line 14282
 HEAP32[$ReallocAsyncCtx7 >> 2] = 262; //@line 14283
 sp = STACKTOP; //@line 14284
 return;
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_390($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 28942
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28944
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28946
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28948
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28950
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28952
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28954
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28956
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28958
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 28960
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 28962
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 28964
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 28966
 $25 = $4 + 1152 | 0; //@line 28967
 HEAP32[$25 >> 2] = 0; //@line 28968
 HEAP32[$25 + 4 >> 2] = 0; //@line 28968
 HEAP32[$25 + 8 >> 2] = 0; //@line 28968
 HEAP32[$25 + 12 >> 2] = 0; //@line 28968
 HEAP8[$4 + 1168 >> 0] = 1; //@line 28970
 HEAP32[$2 >> 2] = 672; //@line 28971
 $27 = $4 + 1176 | 0; //@line 28972
 $ReallocAsyncCtx = _emscripten_realloc_async_context(52) | 0; //@line 28973
 __ZN4mbed10TimerEventC2Ev($27); //@line 28974
 if (!___async) {
  ___async_unwind = 0; //@line 28977
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 76; //@line 28979
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $27; //@line 28981
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 28983
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 28985
 HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 28987
 HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 28989
 HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 28991
 HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 28993
 HEAP32[$ReallocAsyncCtx + 32 >> 2] = $16; //@line 28995
 HEAP32[$ReallocAsyncCtx + 36 >> 2] = $18; //@line 28997
 HEAP32[$ReallocAsyncCtx + 40 >> 2] = $20; //@line 28999
 HEAP32[$ReallocAsyncCtx + 44 >> 2] = $22; //@line 29001
 HEAP32[$ReallocAsyncCtx + 48 >> 2] = $24; //@line 29003
 sp = STACKTOP; //@line 29004
 return;
}
function _equeue_alloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$037$sink$i = 0, $$03741$i = 0, $$1$i9 = 0, $12 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $9 = 0, label = 0;
 $3 = $1 + 39 & -4; //@line 2261
 $4 = $0 + 156 | 0; //@line 2262
 _equeue_mutex_lock($4); //@line 2263
 $5 = $0 + 24 | 0; //@line 2264
 $6 = HEAP32[$5 >> 2] | 0; //@line 2265
 L1 : do {
  if (!$6) {
   label = 7; //@line 2269
  } else {
   $$03741$i = $5; //@line 2271
   $9 = $6; //@line 2271
   while (1) {
    if ((HEAP32[$9 >> 2] | 0) >>> 0 >= $3 >>> 0) {
     break;
    }
    $15 = $9 + 8 | 0; //@line 2278
    $16 = HEAP32[$15 >> 2] | 0; //@line 2279
    if (!$16) {
     label = 7; //@line 2282
     break L1;
    } else {
     $$03741$i = $15; //@line 2285
     $9 = $16; //@line 2285
    }
   }
   $12 = HEAP32[$9 + 12 >> 2] | 0; //@line 2289
   if (!$12) {
    $$037$sink$i = $$03741$i; //@line 2292
   } else {
    HEAP32[$$03741$i >> 2] = $12; //@line 2294
    $$037$sink$i = $12 + 8 | 0; //@line 2296
   }
   HEAP32[$$037$sink$i >> 2] = HEAP32[$9 + 8 >> 2]; //@line 2300
   _equeue_mutex_unlock($4); //@line 2301
   $$1$i9 = $9; //@line 2302
  }
 } while (0);
 do {
  if ((label | 0) == 7) {
   $18 = $0 + 28 | 0; //@line 2307
   $19 = HEAP32[$18 >> 2] | 0; //@line 2308
   if ($19 >>> 0 < $3 >>> 0) {
    _equeue_mutex_unlock($4); //@line 2311
    $$0 = 0; //@line 2312
    return $$0 | 0; //@line 2313
   } else {
    $21 = $0 + 32 | 0; //@line 2315
    $22 = HEAP32[$21 >> 2] | 0; //@line 2316
    HEAP32[$21 >> 2] = $22 + $3; //@line 2318
    HEAP32[$18 >> 2] = $19 - $3; //@line 2320
    HEAP32[$22 >> 2] = $3; //@line 2321
    HEAP8[$22 + 4 >> 0] = 1; //@line 2323
    _equeue_mutex_unlock($4); //@line 2324
    if (!$22) {
     $$0 = 0; //@line 2327
    } else {
     $$1$i9 = $22; //@line 2329
     break;
    }
    return $$0 | 0; //@line 2332
   }
  }
 } while (0);
 HEAP32[$$1$i9 + 20 >> 2] = 0; //@line 2337
 HEAP32[$$1$i9 + 24 >> 2] = -1; //@line 2339
 HEAP32[$$1$i9 + 28 >> 2] = 0; //@line 2341
 $$0 = $$1$i9 + 36 | 0; //@line 2343
 return $$0 | 0; //@line 2344
}
function __Z22compute_join_frame_micPKhtS0_Pj__async_cb_333($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 12764
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12766
 $4 = HEAP16[$0 + 8 >> 1] | 0; //@line 12768
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12770
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12772
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 12774
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 12777
  $11 = _mbedtls_cipher_cmac_starts(21244, $2, 128) | 0; //@line 12778
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 499; //@line 12781
   $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 12782
   HEAP16[$12 >> 1] = $4; //@line 12783
   $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 12784
   HEAP32[$13 >> 2] = $6; //@line 12785
   $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 12786
   HEAP32[$14 >> 2] = $8; //@line 12787
   sp = STACKTOP; //@line 12788
   return;
  }
  HEAP32[___async_retval >> 2] = $11; //@line 12792
  ___async_unwind = 0; //@line 12793
  HEAP32[$ReallocAsyncCtx3 >> 2] = 499; //@line 12794
  $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 12795
  HEAP16[$12 >> 1] = $4; //@line 12796
  $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 12797
  HEAP32[$13 >> 2] = $6; //@line 12798
  $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 12799
  HEAP32[$14 >> 2] = $8; //@line 12800
  sp = STACKTOP; //@line 12801
  return;
 } else {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 12804
  _mbedtls_cipher_free(21244); //@line 12805
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 502; //@line 12808
   $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 12809
   HEAP32[$16 >> 2] = $AsyncRetVal; //@line 12810
   sp = STACKTOP; //@line 12811
   return;
  }
  ___async_unwind = 0; //@line 12814
  HEAP32[$ReallocAsyncCtx5 >> 2] = 502; //@line 12815
  $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 12816
  HEAP32[$16 >> 2] = $AsyncRetVal; //@line 12817
  sp = STACKTOP; //@line 12818
  return;
 }
}
function __Z11compute_micPKhtS0_jhjPj__async_cb_312($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 11181
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11183
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11185
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11187
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11189
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 11191
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 11194
  $11 = _mbedtls_cipher_cmac_starts(21244, $8, 128) | 0; //@line 11195
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 493; //@line 11198
   $12 = $ReallocAsyncCtx4 + 4 | 0; //@line 11199
   HEAP32[$12 >> 2] = $4; //@line 11200
   $13 = $ReallocAsyncCtx4 + 8 | 0; //@line 11201
   HEAP32[$13 >> 2] = $6; //@line 11202
   $14 = $ReallocAsyncCtx4 + 12 | 0; //@line 11203
   HEAP32[$14 >> 2] = $2; //@line 11204
   sp = STACKTOP; //@line 11205
   return;
  }
  HEAP32[___async_retval >> 2] = $11; //@line 11209
  ___async_unwind = 0; //@line 11210
  HEAP32[$ReallocAsyncCtx4 >> 2] = 493; //@line 11211
  $12 = $ReallocAsyncCtx4 + 4 | 0; //@line 11212
  HEAP32[$12 >> 2] = $4; //@line 11213
  $13 = $ReallocAsyncCtx4 + 8 | 0; //@line 11214
  HEAP32[$13 >> 2] = $6; //@line 11215
  $14 = $ReallocAsyncCtx4 + 12 | 0; //@line 11216
  HEAP32[$14 >> 2] = $2; //@line 11217
  sp = STACKTOP; //@line 11218
  return;
 } else {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 11221
  _mbedtls_cipher_free(21244); //@line 11222
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 497; //@line 11225
   $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 11226
   HEAP32[$16 >> 2] = $AsyncRetVal; //@line 11227
   sp = STACKTOP; //@line 11228
   return;
  }
  ___async_unwind = 0; //@line 11231
  HEAP32[$ReallocAsyncCtx6 >> 2] = 497; //@line 11232
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 11233
  HEAP32[$16 >> 2] = $AsyncRetVal; //@line 11234
  sp = STACKTOP; //@line 11235
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_318($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 11930
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11934
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11936
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11938
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11940
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 11942
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 11944
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 11946
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 11949
 $18 = $4 + 16 | 0; //@line 11950
 HEAP32[$18 >> 2] = HEAP32[$6 >> 2]; //@line 11951
 HEAP32[$18 + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 11951
 HEAP8[$18 + 8 >> 0] = HEAP8[$6 + 8 >> 0] | 0; //@line 11951
 _equeue_event_dtor($4, 335); //@line 11952
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 11953
 $19 = _equeue_post($8, 336, $4) | 0; //@line 11954
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 337; //@line 11957
  $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 11958
  HEAP32[$20 >> 2] = $10; //@line 11959
  $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 11960
  HEAP32[$21 >> 2] = $12; //@line 11961
  $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 11962
  HEAP32[$22 >> 2] = $14; //@line 11963
  $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 11964
  HEAP32[$23 >> 2] = $16; //@line 11965
  sp = STACKTOP; //@line 11966
  return;
 }
 HEAP32[___async_retval >> 2] = $19; //@line 11970
 ___async_unwind = 0; //@line 11971
 HEAP32[$ReallocAsyncCtx6 >> 2] = 337; //@line 11972
 $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 11973
 HEAP32[$20 >> 2] = $10; //@line 11974
 $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 11975
 HEAP32[$21 >> 2] = $12; //@line 11976
 $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 11977
 HEAP32[$22 >> 2] = $14; //@line 11978
 $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 11979
 HEAP32[$23 >> 2] = $16; //@line 11980
 sp = STACKTOP; //@line 11981
 return;
}
function __Z11compute_micPKhtS0_jhjPj__async_cb_311($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 11121
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11123
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11125
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11127
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 11129
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 11132
  $9 = _mbedtls_cipher_cmac_update(21244, 12401, 16) | 0; //@line 11133
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 494; //@line 11136
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 11137
   HEAP32[$10 >> 2] = $2; //@line 11138
   $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 11139
   HEAP32[$11 >> 2] = $4; //@line 11140
   $12 = $ReallocAsyncCtx2 + 12 | 0; //@line 11141
   HEAP32[$12 >> 2] = $6; //@line 11142
   sp = STACKTOP; //@line 11143
   return;
  }
  HEAP32[___async_retval >> 2] = $9; //@line 11147
  ___async_unwind = 0; //@line 11148
  HEAP32[$ReallocAsyncCtx2 >> 2] = 494; //@line 11149
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 11150
  HEAP32[$10 >> 2] = $2; //@line 11151
  $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 11152
  HEAP32[$11 >> 2] = $4; //@line 11153
  $12 = $ReallocAsyncCtx2 + 12 | 0; //@line 11154
  HEAP32[$12 >> 2] = $6; //@line 11155
  sp = STACKTOP; //@line 11156
  return;
 } else {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 11159
  _mbedtls_cipher_free(21244); //@line 11160
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 497; //@line 11163
   $14 = $ReallocAsyncCtx6 + 4 | 0; //@line 11164
   HEAP32[$14 >> 2] = $AsyncRetVal; //@line 11165
   sp = STACKTOP; //@line 11166
   return;
  }
  ___async_unwind = 0; //@line 11169
  HEAP32[$ReallocAsyncCtx6 >> 2] = 497; //@line 11170
  $14 = $ReallocAsyncCtx6 + 4 | 0; //@line 11171
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 11172
  sp = STACKTOP; //@line 11173
  return;
 }
}
function _mbed_error_printf($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $$09$i = 0, $1 = 0, $12 = 0, $18 = 0, $2 = 0, $3 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6132
 STACKTOP = STACKTOP + 144 | 0; //@line 6133
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144); //@line 6133
 $1 = sp + 16 | 0; //@line 6134
 $2 = sp; //@line 6135
 HEAP32[$2 >> 2] = $varargs; //@line 6136
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 6137
 $3 = _vsnprintf($1, 128, $0, $2) | 0; //@line 6138
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 629; //@line 6141
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 6143
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 6145
  HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 6147
  sp = STACKTOP; //@line 6148
  STACKTOP = sp; //@line 6149
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 6151
 if (($3 | 0) <= 0) {
  STACKTOP = sp; //@line 6154
  return;
 }
 if (!(HEAP32[5399] | 0)) {
  _serial_init(21600, 2, 3); //@line 6159
  $$09$i = 0; //@line 6160
 } else {
  $$09$i = 0; //@line 6162
 }
 while (1) {
  $12 = HEAP8[$1 + $$09$i >> 0] | 0; //@line 6167
  $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 6168
  _serial_putc(21600, $12); //@line 6169
  if (___async) {
   label = 7; //@line 6172
   break;
  }
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6175
  $18 = $$09$i + 1 | 0; //@line 6176
  if (($18 | 0) == ($3 | 0)) {
   label = 9; //@line 6179
   break;
  } else {
   $$09$i = $18; //@line 6182
  }
 }
 if ((label | 0) == 7) {
  HEAP32[$AsyncCtx2 >> 2] = 630; //@line 6186
  HEAP32[$AsyncCtx2 + 4 >> 2] = $$09$i; //@line 6188
  HEAP32[$AsyncCtx2 + 8 >> 2] = $3; //@line 6190
  HEAP32[$AsyncCtx2 + 12 >> 2] = $1; //@line 6192
  HEAP32[$AsyncCtx2 + 16 >> 2] = $2; //@line 6194
  HEAP32[$AsyncCtx2 + 20 >> 2] = $1; //@line 6196
  sp = STACKTOP; //@line 6197
  STACKTOP = sp; //@line 6198
  return;
 } else if ((label | 0) == 9) {
  STACKTOP = sp; //@line 6201
  return;
 }
}
function __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 12950
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12952
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12954
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12956
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12958
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12960
 HEAP8[$2 + 1097 >> 0] = HEAP8[___async_retval >> 0] | 0; //@line 12964
 HEAP8[$4 >> 0] = 0; //@line 12965
 HEAP8[$6 >> 0] = HEAP8[$2 + 1156 >> 0] << 7; //@line 12969
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 12970
 $16 = __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt($2, $4, $6, 0, 0, 0) | 0; //@line 12971
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 452; //@line 12974
  $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 12975
  HEAP32[$17 >> 2] = $2; //@line 12976
  $18 = $ReallocAsyncCtx2 + 8 | 0; //@line 12977
  HEAP32[$18 >> 2] = $8; //@line 12978
  $19 = $ReallocAsyncCtx2 + 12 | 0; //@line 12979
  HEAP32[$19 >> 2] = $6; //@line 12980
  $20 = $ReallocAsyncCtx2 + 16 | 0; //@line 12981
  HEAP32[$20 >> 2] = $4; //@line 12982
  $21 = $ReallocAsyncCtx2 + 20 | 0; //@line 12983
  HEAP32[$21 >> 2] = $10; //@line 12984
  sp = STACKTOP; //@line 12985
  return;
 }
 HEAP32[___async_retval >> 2] = $16; //@line 12989
 ___async_unwind = 0; //@line 12990
 HEAP32[$ReallocAsyncCtx2 >> 2] = 452; //@line 12991
 $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 12992
 HEAP32[$17 >> 2] = $2; //@line 12993
 $18 = $ReallocAsyncCtx2 + 8 | 0; //@line 12994
 HEAP32[$18 >> 2] = $8; //@line 12995
 $19 = $ReallocAsyncCtx2 + 12 | 0; //@line 12996
 HEAP32[$19 >> 2] = $6; //@line 12997
 $20 = $ReallocAsyncCtx2 + 16 | 0; //@line 12998
 HEAP32[$20 >> 2] = $4; //@line 12999
 $21 = $ReallocAsyncCtx2 + 20 | 0; //@line 13000
 HEAP32[$21 >> 2] = $10; //@line 13001
 sp = STACKTOP; //@line 13002
 return;
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_406($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 29956
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29958
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29960
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29962
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29964
 $9 = HEAP32[$2 >> 2] | 0; //@line 29965
 $11 = $6 + 12 | 0; //@line 29967
 HEAP32[$6 >> 2] = 435; //@line 29968
 HEAP32[$6 + 4 >> 2] = 0; //@line 29970
 HEAP32[$6 + 8 >> 2] = $4; //@line 29972
 HEAP32[$11 >> 2] = 836; //@line 29973
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(24) | 0; //@line 29974
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($9, $4 + 1056 | 0, $6); //@line 29975
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 436; //@line 29978
  $12 = $ReallocAsyncCtx7 + 4 | 0; //@line 29979
  HEAP32[$12 >> 2] = $11; //@line 29980
  $13 = $ReallocAsyncCtx7 + 8 | 0; //@line 29981
  HEAP32[$13 >> 2] = $2; //@line 29982
  $14 = $ReallocAsyncCtx7 + 12 | 0; //@line 29983
  HEAP32[$14 >> 2] = $4; //@line 29984
  $15 = $ReallocAsyncCtx7 + 16 | 0; //@line 29985
  HEAP32[$15 >> 2] = $8; //@line 29986
  $16 = $ReallocAsyncCtx7 + 20 | 0; //@line 29987
  HEAP32[$16 >> 2] = $6; //@line 29988
  sp = STACKTOP; //@line 29989
  return;
 }
 ___async_unwind = 0; //@line 29992
 HEAP32[$ReallocAsyncCtx7 >> 2] = 436; //@line 29993
 $12 = $ReallocAsyncCtx7 + 4 | 0; //@line 29994
 HEAP32[$12 >> 2] = $11; //@line 29995
 $13 = $ReallocAsyncCtx7 + 8 | 0; //@line 29996
 HEAP32[$13 >> 2] = $2; //@line 29997
 $14 = $ReallocAsyncCtx7 + 12 | 0; //@line 29998
 HEAP32[$14 >> 2] = $4; //@line 29999
 $15 = $ReallocAsyncCtx7 + 16 | 0; //@line 30000
 HEAP32[$15 >> 2] = $8; //@line 30001
 $16 = $ReallocAsyncCtx7 + 20 | 0; //@line 30002
 HEAP32[$16 >> 2] = $6; //@line 30003
 sp = STACKTOP; //@line 30004
 return;
}
function __ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 var $$ = 0, $$sink = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $31 = 0, label = 0;
 $14 = $8 & 1; //@line 244
 $15 = $9 & 1; //@line 245
 $16 = $10 & 1; //@line 246
 $17 = $12 & 1; //@line 247
 HEAP8[$0 + 689 >> 0] = $1; //@line 250
 switch ($1 | 0) {
 case 0:
  {
   HEAP8[$0 + 696 >> 0] = $2; //@line 254
   HEAP32[$0 + 700 >> 2] = $3; //@line 256
   HEAP32[$0 + 704 >> 2] = $4; //@line 258
   HEAP32[$0 + 712 >> 2] = $5; //@line 260
   HEAP16[$0 + 716 >> 1] = $7; //@line 262
   HEAP8[$0 + 718 >> 0] = $14; //@line 264
   HEAP8[$0 + 720 >> 0] = $15; //@line 266
   HEAP8[$0 + 721 >> 0] = $17; //@line 268
   HEAP32[$0 + 724 >> 2] = $13; //@line 270
   return;
  }
 case 1:
  {
   HEAP8[$0 + 748 >> 0] = $2; //@line 276
   if ($4 >>> 0 > 2) {
    while (1) {}
   }
   $31 = $4 + 7 | 0; //@line 282
   HEAP32[$0 + 752 >> 2] = $31; //@line 284
   HEAP32[$0 + 756 >> 2] = $5; //@line 286
   HEAP8[$0 + 761 >> 0] = $6; //@line 288
   HEAP16[$0 + 762 >> 1] = $7; //@line 290
   HEAP8[$0 + 764 >> 0] = $14; //@line 292
   HEAP8[$0 + 767 >> 0] = $16; //@line 294
   HEAP8[$0 + 768 >> 0] = $11; //@line 296
   HEAP8[$0 + 766 >> 0] = $15; //@line 298
   HEAP8[$0 + 769 >> 0] = $17; //@line 300
   HEAP32[$0 + 772 >> 2] = $13; //@line 302
   $$ = $5 >>> 0 > 6 ? $5 : 6; //@line 304
   if (($4 | 0) == 0 & (($$ >>> 0 < 12 ? $$ : 12) + -11 | 0) >>> 0 < 2) {
    label = 7; //@line 312
   } else {
    if (($31 | 0) == 8 & $$ >>> 0 > 11) {
     label = 7; //@line 318
    } else {
     $$sink = 0; //@line 320
    }
   }
   if ((label | 0) == 7) {
    $$sink = 1; //@line 324
   }
   HEAP8[$0 + 760 >> 0] = $$sink; //@line 327
   return;
  }
 default:
  {
   return;
  }
 }
}
function __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($0) {
 $0 = $0 | 0;
 var $$0$lcssa = 0, $$01315 = 0, $$016 = 0, $$1 = 0, $$114 = 0, $$sink = 0, $2 = 0, $23 = 0, $26 = 0, $27 = 0, $5 = 0, $6 = 0, $7 = 0;
 $2 = HEAP8[$0 + 2 >> 0] | 0; //@line 17165
 if (!($2 << 24 >> 24)) {
  $$0$lcssa = 0; //@line 17168
  $26 = $$0$lcssa << 24 >> 24 != 0; //@line 17169
  $$sink = $26 & 1; //@line 17170
  HEAP8[$0 >> 0] = $$sink; //@line 17171
  $27 = $0 + 3 | 0; //@line 17172
  HEAP8[$27 >> 0] = $$0$lcssa; //@line 17173
  return;
 } else {
  $$01315 = 0; //@line 17176
  $$016 = 0; //@line 17176
  $5 = 0; //@line 17176
 }
 while (1) {
  $6 = HEAP8[$0 + 4 + $5 >> 0] | 0; //@line 17180
  switch ($6 << 24 >> 24) {
  case 5:
  case 10:
   {
    $7 = $$01315 + 1 << 24 >> 24; //@line 17183
    HEAP8[($$016 & 255) + ($0 + 132) >> 0] = $6; //@line 17187
    HEAP8[($$016 + 1 & 255) + ($0 + 132) >> 0] = HEAP8[($7 & 255) + ($0 + 4) >> 0] | 0; //@line 17194
    $$1 = $$016 + 2 << 24 >> 24; //@line 17195
    $$114 = $7; //@line 17195
    break;
   }
  case 8:
   {
    HEAP8[($$016 & 255) + ($0 + 132) >> 0] = 8; //@line 17202
    $$1 = $$016 + 1 << 24 >> 24; //@line 17203
    $$114 = $$01315; //@line 17203
    break;
   }
  case 6:
   {
    $$1 = $$016; //@line 17209
    $$114 = $5 + 2 & 255; //@line 17209
    break;
   }
  case 7:
  case 3:
   {
    $$1 = $$016; //@line 17214
    $$114 = $$01315 + 1 << 24 >> 24; //@line 17214
    break;
   }
  default:
   {
    $$1 = $$016; //@line 17218
    $$114 = $$01315; //@line 17218
   }
  }
  $23 = $$114 + 1 << 24 >> 24; //@line 17221
  if (($23 & 255) < ($2 & 255)) {
   $$01315 = $23; //@line 17225
   $$016 = $$1; //@line 17225
   $5 = $23 & 255; //@line 17225
  } else {
   $$0$lcssa = $$1; //@line 17227
   break;
  }
 }
 $26 = $$0$lcssa << 24 >> 24 != 0; //@line 17231
 $$sink = $26 & 1; //@line 17232
 HEAP8[$0 >> 0] = $$sink; //@line 17233
 $27 = $0 + 3 | 0; //@line 17234
 HEAP8[$27 >> 0] = $$0$lcssa; //@line 17235
 return;
}
function ___fwritex($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$038 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $10 = 0, $12 = 0, $14 = 0, $22 = 0, $28 = 0, $3 = 0, $31 = 0, $4 = 0, $9 = 0, label = 0;
 $3 = $2 + 16 | 0; //@line 10992
 $4 = HEAP32[$3 >> 2] | 0; //@line 10993
 if (!$4) {
  if (!(___towrite($2) | 0)) {
   $12 = HEAP32[$3 >> 2] | 0; //@line 11000
   label = 5; //@line 11001
  } else {
   $$1 = 0; //@line 11003
  }
 } else {
  $12 = $4; //@line 11007
  label = 5; //@line 11008
 }
 L5 : do {
  if ((label | 0) == 5) {
   $9 = $2 + 20 | 0; //@line 11012
   $10 = HEAP32[$9 >> 2] | 0; //@line 11013
   $14 = $10; //@line 11016
   if (($12 - $10 | 0) >>> 0 < $1 >>> 0) {
    $$1 = FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 15]($2, $0, $1) | 0; //@line 11021
    break;
   }
   L10 : do {
    if ((HEAP8[$2 + 75 >> 0] | 0) > -1) {
     $$038 = $1; //@line 11029
     while (1) {
      if (!$$038) {
       $$139 = 0; //@line 11033
       $$141 = $0; //@line 11033
       $$143 = $1; //@line 11033
       $31 = $14; //@line 11033
       break L10;
      }
      $22 = $$038 + -1 | 0; //@line 11036
      if ((HEAP8[$0 + $22 >> 0] | 0) == 10) {
       break;
      } else {
       $$038 = $22; //@line 11043
      }
     }
     $28 = FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 15]($2, $0, $$038) | 0; //@line 11048
     if ($28 >>> 0 < $$038 >>> 0) {
      $$1 = $28; //@line 11051
      break L5;
     }
     $$139 = $$038; //@line 11057
     $$141 = $0 + $$038 | 0; //@line 11057
     $$143 = $1 - $$038 | 0; //@line 11057
     $31 = HEAP32[$9 >> 2] | 0; //@line 11057
    } else {
     $$139 = 0; //@line 11059
     $$141 = $0; //@line 11059
     $$143 = $1; //@line 11059
     $31 = $14; //@line 11059
    }
   } while (0);
   _memcpy($31 | 0, $$141 | 0, $$143 | 0) | 0; //@line 11062
   HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + $$143; //@line 11065
   $$1 = $$139 + $$143 | 0; //@line 11067
  }
 } while (0);
 return $$1 | 0; //@line 11070
}
function _mbedtls_cipher_setkey($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $22 = 0, $24 = 0, $25 = 0, $30 = 0, $32 = 0, $33 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 2258
 if (!$0) {
  $$0 = -24832; //@line 2261
  return $$0 | 0; //@line 2262
 }
 $5 = HEAP32[$0 >> 2] | 0; //@line 2264
 if (!$5) {
  $$0 = -24832; //@line 2267
  return $$0 | 0; //@line 2268
 }
 if (!(HEAP32[$5 + 20 >> 2] & 2)) {
  if ((HEAP32[$5 + 8 >> 2] | 0) != ($2 | 0)) {
   $$0 = -24832; //@line 2279
   return $$0 | 0; //@line 2280
  }
 }
 HEAP32[$0 + 4 >> 2] = $2; //@line 2284
 HEAP32[$0 + 8 >> 2] = $3; //@line 2286
 L11 : do {
  if (($3 | 0) != 1) {
   switch (HEAP32[$5 + 4 >> 2] | 0) {
   case 5:
   case 3:
    {
     break L11;
     break;
    }
   default:
    {}
   }
   if ($3 | 0) {
    $$0 = -24832; //@line 2302
    return $$0 | 0; //@line 2303
   }
   $30 = HEAP32[(HEAP32[$5 + 28 >> 2] | 0) + 16 >> 2] | 0; //@line 2308
   $32 = HEAP32[$0 + 60 >> 2] | 0; //@line 2310
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2311
   $33 = FUNCTION_TABLE_iiii[$30 & 15]($32, $1, $2) | 0; //@line 2312
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 573; //@line 2315
    sp = STACKTOP; //@line 2316
    return 0; //@line 2317
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2319
   $$0 = $33; //@line 2320
   return $$0 | 0; //@line 2321
  }
 } while (0);
 $22 = HEAP32[(HEAP32[$5 + 28 >> 2] | 0) + 12 >> 2] | 0; //@line 2327
 $24 = HEAP32[$0 + 60 >> 2] | 0; //@line 2329
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2330
 $25 = FUNCTION_TABLE_iiii[$22 & 15]($24, $1, $2) | 0; //@line 2331
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 572; //@line 2334
  sp = STACKTOP; //@line 2335
  return 0; //@line 2336
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2338
 $$0 = $25; //@line 2339
 return $$0 | 0; //@line 2340
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_135($0) {
 $0 = $0 | 0;
 var $13 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 29725
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29727
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29729
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29731
 HEAP8[$2 + 1932 >> 0] = 1; //@line 29733
 $8 = $2 + 1892 | 0; //@line 29734
 $9 = HEAP32[$8 >> 2] | 0; //@line 29735
 if (!$9) {
  HEAP32[___async_retval >> 2] = 0; //@line 29739
  return;
 }
 $13 = HEAP32[$2 + 2288 >> 2] | 0; //@line 29744
 $15 = HEAP32[$9 + 4 >> 2] | 0; //@line 29746
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(24) | 0; //@line 29747
 FUNCTION_TABLE_vii[$15 & 31]($6, $2 + 1880 | 0); //@line 29748
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 177; //@line 29751
  $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 29752
  HEAP32[$16 >> 2] = $8; //@line 29753
  $17 = $ReallocAsyncCtx5 + 8 | 0; //@line 29754
  HEAP32[$17 >> 2] = $6; //@line 29755
  $18 = $ReallocAsyncCtx5 + 12 | 0; //@line 29756
  HEAP32[$18 >> 2] = $13; //@line 29757
  $19 = $ReallocAsyncCtx5 + 16 | 0; //@line 29758
  HEAP32[$19 >> 2] = $6; //@line 29759
  $20 = $ReallocAsyncCtx5 + 20 | 0; //@line 29760
  HEAP32[$20 >> 2] = $4; //@line 29761
  sp = STACKTOP; //@line 29762
  return;
 }
 ___async_unwind = 0; //@line 29765
 HEAP32[$ReallocAsyncCtx5 >> 2] = 177; //@line 29766
 $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 29767
 HEAP32[$16 >> 2] = $8; //@line 29768
 $17 = $ReallocAsyncCtx5 + 8 | 0; //@line 29769
 HEAP32[$17 >> 2] = $6; //@line 29770
 $18 = $ReallocAsyncCtx5 + 12 | 0; //@line 29771
 HEAP32[$18 >> 2] = $13; //@line 29772
 $19 = $ReallocAsyncCtx5 + 16 | 0; //@line 29773
 HEAP32[$19 >> 2] = $6; //@line 29774
 $20 = $ReallocAsyncCtx5 + 20 | 0; //@line 29775
 HEAP32[$20 >> 2] = $4; //@line 29776
 sp = STACKTOP; //@line 29777
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_147($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $15 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx32 = 0, sp = 0;
 sp = STACKTOP; //@line 30373
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30377
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30379
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 30381
 $8 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 30382
 if ($8 | 0) {
  $11 = HEAP32[$8 + 8 >> 2] | 0; //@line 30386
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 30387
  FUNCTION_TABLE_vi[$11 & 1023]($4); //@line 30388
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 165; //@line 30391
   $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 30392
   HEAP32[$12 >> 2] = $AsyncRetVal; //@line 30393
   $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 30394
   HEAP32[$13 >> 2] = $6; //@line 30395
   sp = STACKTOP; //@line 30396
   return;
  }
  ___async_unwind = 0; //@line 30399
  HEAP32[$ReallocAsyncCtx2 >> 2] = 165; //@line 30400
  $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 30401
  HEAP32[$12 >> 2] = $AsyncRetVal; //@line 30402
  $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 30403
  HEAP32[$13 >> 2] = $6; //@line 30404
  sp = STACKTOP; //@line 30405
  return;
 }
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = -1011; //@line 30411
  return;
 }
 $ReallocAsyncCtx32 = _emscripten_realloc_async_context(8) | 0; //@line 30414
 _mbed_assert_internal(12025, 11293, 1129); //@line 30415
 if (___async) {
  HEAP32[$ReallocAsyncCtx32 >> 2] = 166; //@line 30418
  $15 = $ReallocAsyncCtx32 + 4 | 0; //@line 30419
  HEAP32[$15 >> 2] = $6; //@line 30420
  sp = STACKTOP; //@line 30421
  return;
 }
 ___async_unwind = 0; //@line 30424
 HEAP32[$ReallocAsyncCtx32 >> 2] = 166; //@line 30425
 $15 = $ReallocAsyncCtx32 + 4 | 0; //@line 30426
 HEAP32[$15 >> 2] = $6; //@line 30427
 sp = STACKTOP; //@line 30428
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $30 = 0, $34 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 14399
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14401
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14407
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14409
 $12 = HEAP8[$0 + 24 >> 0] & 1; //@line 14412
 $14 = HEAP8[$0 + 25 >> 0] & 1; //@line 14415
 $16 = HEAP8[$0 + 26 >> 0] | 0; //@line 14417
 $18 = HEAP8[$0 + 27 >> 0] | 0; //@line 14419
 $20 = HEAP32[$0 + 28 >> 2] | 0; //@line 14421
 $22 = HEAP32[$0 + 32 >> 2] | 0; //@line 14423
 $24 = HEAP32[$0 + 36 >> 2] | 0; //@line 14425
 $26 = HEAP32[$0 + 40 >> 2] | 0; //@line 14427
 $27 = HEAP32[$2 >> 2] | 0; //@line 14428
 $30 = HEAP32[(HEAP32[$27 >> 2] | 0) + 32 >> 2] | 0; //@line 14431
 $34 = HEAP32[(HEAP32[$0 + 12 >> 2] | 0) + ((HEAPU8[HEAP32[$0 + 8 >> 2] >> 0] | 0) * 12 | 0) >> 2] | 0; //@line 14435
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 14436
 FUNCTION_TABLE_vii[$30 & 31]($27, $34); //@line 14437
 if (!___async) {
  ___async_unwind = 0; //@line 14440
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 525; //@line 14442
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $8; //@line 14444
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $10; //@line 14446
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 14448
 HEAP8[$ReallocAsyncCtx2 + 16 >> 0] = $12 & 1; //@line 14451
 HEAP8[$ReallocAsyncCtx2 + 17 >> 0] = $14 & 1; //@line 14454
 HEAP8[$ReallocAsyncCtx2 + 18 >> 0] = $16; //@line 14456
 HEAP8[$ReallocAsyncCtx2 + 19 >> 0] = $18; //@line 14458
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $20; //@line 14460
 HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $22; //@line 14462
 HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $24; //@line 14464
 HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $26; //@line 14466
 sp = STACKTOP; //@line 14467
 return;
}
function __ZN12LoRaWANStack20join_request_by_otaaERK15lorawan_connect($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $2 = 0, $20 = 0, $6 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 7623
 STACKTOP = STACKTOP + 16 | 0; //@line 7624
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 7624
 $2 = $0 + 1876 | 0; //@line 7627
 if (!(HEAP32[$2 >> 2] | 0)) {
  _printf(11245, sp) | 0; //@line 7631
  _printf(11858, sp + 8 | 0) | 0; //@line 7632
  $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7633
  _putchar(10) | 0; //@line 7634
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 247; //@line 7637
   sp = STACKTOP; //@line 7638
   STACKTOP = sp; //@line 7639
   return 0; //@line 7639
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7641
  $$0 = -1012; //@line 7642
  STACKTOP = sp; //@line 7643
  return $$0 | 0; //@line 7643
 } else {
  $6 = HEAP32[$1 + 4 >> 2] | 0; //@line 7646
  $8 = HEAP32[$1 + 8 >> 2] | 0; //@line 7648
  $10 = HEAP32[$1 + 12 >> 2] | 0; //@line 7650
  $12 = HEAP8[$1 + 16 >> 0] | 0; //@line 7652
  HEAP8[$0 + 1936 >> 0] = 0; //@line 7654
  HEAP32[$0 + 1960 >> 2] = 0; //@line 7656
  HEAP32[$0 + 1956 >> 2] = 0; //@line 7658
  HEAP32[$0 + 1944 >> 2] = $8; //@line 7661
  HEAP32[$0 + 1948 >> 2] = $10; //@line 7663
  HEAP32[$0 + 1940 >> 2] = $6; //@line 7664
  HEAP8[$0 + 1952 >> 0] = $12; //@line 7666
  HEAP32[$2 >> 2] = 2; //@line 7667
  $AsyncCtx4 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7668
  $20 = __ZN12LoRaWANStack18lora_state_machineEv($0) | 0; //@line 7669
  if (___async) {
   HEAP32[$AsyncCtx4 >> 2] = 248; //@line 7672
   sp = STACKTOP; //@line 7673
   STACKTOP = sp; //@line 7674
   return 0; //@line 7674
  }
  _emscripten_free_async_context($AsyncCtx4 | 0); //@line 7676
  $$0 = $20; //@line 7677
  STACKTOP = sp; //@line 7678
  return $$0 | 0; //@line 7678
 }
 return 0; //@line 7680
}
function _mbedtls_gcm_setkey__async_cb_115($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 28632
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28634
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28636
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28638
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28640
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 28642
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 28646
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 28649
 dest = $2; //@line 28650
 stop = dest + 16 | 0; //@line 28650
 do {
  HEAP8[dest >> 0] = 0; //@line 28650
  dest = dest + 1 | 0; //@line 28650
 } while ((dest | 0) < (stop | 0));
 $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 28651
 $11 = _mbedtls_cipher_update($6, $2, 16, $2, $4) | 0; //@line 28652
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 591; //@line 28655
  $12 = $ReallocAsyncCtx + 4 | 0; //@line 28656
  HEAP32[$12 >> 2] = $2; //@line 28657
  $13 = $ReallocAsyncCtx + 8 | 0; //@line 28658
  HEAP32[$13 >> 2] = $2; //@line 28659
  $14 = $ReallocAsyncCtx + 12 | 0; //@line 28660
  HEAP32[$14 >> 2] = $8; //@line 28661
  $15 = $ReallocAsyncCtx + 16 | 0; //@line 28662
  HEAP32[$15 >> 2] = $4; //@line 28663
  sp = STACKTOP; //@line 28664
  return;
 }
 HEAP32[___async_retval >> 2] = $11; //@line 28668
 ___async_unwind = 0; //@line 28669
 HEAP32[$ReallocAsyncCtx >> 2] = 591; //@line 28670
 $12 = $ReallocAsyncCtx + 4 | 0; //@line 28671
 HEAP32[$12 >> 2] = $2; //@line 28672
 $13 = $ReallocAsyncCtx + 8 | 0; //@line 28673
 HEAP32[$13 >> 2] = $2; //@line 28674
 $14 = $ReallocAsyncCtx + 12 | 0; //@line 28675
 HEAP32[$14 >> 2] = $8; //@line 28676
 $15 = $ReallocAsyncCtx + 16 | 0; //@line 28677
 HEAP32[$15 >> 2] = $4; //@line 28678
 sp = STACKTOP; //@line 28679
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_146($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $15 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx31 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 30311
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30315
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30317
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 30319
 $8 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 30320
 if ($8 | 0) {
  $11 = HEAP32[$8 + 8 >> 2] | 0; //@line 30324
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 30325
  FUNCTION_TABLE_vi[$11 & 1023]($4); //@line 30326
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 170; //@line 30329
   $12 = $ReallocAsyncCtx4 + 4 | 0; //@line 30330
   HEAP32[$12 >> 2] = $AsyncRetVal; //@line 30331
   $13 = $ReallocAsyncCtx4 + 8 | 0; //@line 30332
   HEAP32[$13 >> 2] = $6; //@line 30333
   sp = STACKTOP; //@line 30334
   return;
  }
  ___async_unwind = 0; //@line 30337
  HEAP32[$ReallocAsyncCtx4 >> 2] = 170; //@line 30338
  $12 = $ReallocAsyncCtx4 + 4 | 0; //@line 30339
  HEAP32[$12 >> 2] = $AsyncRetVal; //@line 30340
  $13 = $ReallocAsyncCtx4 + 8 | 0; //@line 30341
  HEAP32[$13 >> 2] = $6; //@line 30342
  sp = STACKTOP; //@line 30343
  return;
 }
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = 0; //@line 30349
  return;
 }
 $ReallocAsyncCtx31 = _emscripten_realloc_async_context(8) | 0; //@line 30352
 _mbed_assert_internal(12025, 11293, 1174); //@line 30353
 if (___async) {
  HEAP32[$ReallocAsyncCtx31 >> 2] = 171; //@line 30356
  $15 = $ReallocAsyncCtx31 + 4 | 0; //@line 30357
  HEAP32[$15 >> 2] = $6; //@line 30358
  sp = STACKTOP; //@line 30359
  return;
 }
 ___async_unwind = 0; //@line 30362
 HEAP32[$ReallocAsyncCtx31 >> 2] = 171; //@line 30363
 $15 = $ReallocAsyncCtx31 + 4 | 0; //@line 30364
 HEAP32[$15 >> 2] = $6; //@line 30365
 sp = STACKTOP; //@line 30366
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_145($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $15 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx30 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 30249
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30253
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30255
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 30257
 $8 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 30258
 if ($8 | 0) {
  $11 = HEAP32[$8 + 8 >> 2] | 0; //@line 30262
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 30263
  FUNCTION_TABLE_vi[$11 & 1023]($4); //@line 30264
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 179; //@line 30267
   $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 30268
   HEAP32[$12 >> 2] = $AsyncRetVal; //@line 30269
   $13 = $ReallocAsyncCtx6 + 8 | 0; //@line 30270
   HEAP32[$13 >> 2] = $6; //@line 30271
   sp = STACKTOP; //@line 30272
   return;
  }
  ___async_unwind = 0; //@line 30275
  HEAP32[$ReallocAsyncCtx6 >> 2] = 179; //@line 30276
  $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 30277
  HEAP32[$12 >> 2] = $AsyncRetVal; //@line 30278
  $13 = $ReallocAsyncCtx6 + 8 | 0; //@line 30279
  HEAP32[$13 >> 2] = $6; //@line 30280
  sp = STACKTOP; //@line 30281
  return;
 }
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = 0; //@line 30287
  return;
 }
 $ReallocAsyncCtx30 = _emscripten_realloc_async_context(8) | 0; //@line 30290
 _mbed_assert_internal(12025, 11293, 1211); //@line 30291
 if (___async) {
  HEAP32[$ReallocAsyncCtx30 >> 2] = 180; //@line 30294
  $15 = $ReallocAsyncCtx30 + 4 | 0; //@line 30295
  HEAP32[$15 >> 2] = $6; //@line 30296
  sp = STACKTOP; //@line 30297
  return;
 }
 ___async_unwind = 0; //@line 30300
 HEAP32[$ReallocAsyncCtx30 >> 2] = 180; //@line 30301
 $15 = $ReallocAsyncCtx30 + 4 | 0; //@line 30302
 HEAP32[$15 >> 2] = $6; //@line 30303
 sp = STACKTOP; //@line 30304
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_366($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 15342
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15346
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15348
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15350
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15352
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 15354
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 15356
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 15358
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 15361
 HEAP32[$4 + 16 >> 2] = HEAP32[$6 >> 2]; //@line 15364
 _equeue_event_dtor($4, 195); //@line 15365
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 15366
 $20 = _equeue_post($8, 196, $4) | 0; //@line 15367
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 197; //@line 15370
  $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 15371
  HEAP32[$21 >> 2] = $10; //@line 15372
  $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 15373
  HEAP32[$22 >> 2] = $12; //@line 15374
  $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 15375
  HEAP32[$23 >> 2] = $14; //@line 15376
  $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 15377
  HEAP32[$24 >> 2] = $16; //@line 15378
  sp = STACKTOP; //@line 15379
  return;
 }
 HEAP32[___async_retval >> 2] = $20; //@line 15383
 ___async_unwind = 0; //@line 15384
 HEAP32[$ReallocAsyncCtx6 >> 2] = 197; //@line 15385
 $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 15386
 HEAP32[$21 >> 2] = $10; //@line 15387
 $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 15388
 HEAP32[$22 >> 2] = $12; //@line 15389
 $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 15390
 HEAP32[$23 >> 2] = $14; //@line 15391
 $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 15392
 HEAP32[$24 >> 2] = $16; //@line 15393
 sp = STACKTOP; //@line 15394
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_345($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 13665
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13669
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13671
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13673
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13675
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13677
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 13679
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 13681
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 13684
 HEAP16[$4 + 16 >> 1] = HEAP16[$6 >> 1] | 0; //@line 13687
 _equeue_event_dtor($4, 203); //@line 13688
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 13689
 $20 = _equeue_post($8, 204, $4) | 0; //@line 13690
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 205; //@line 13693
  $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 13694
  HEAP32[$21 >> 2] = $10; //@line 13695
  $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 13696
  HEAP32[$22 >> 2] = $12; //@line 13697
  $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 13698
  HEAP32[$23 >> 2] = $14; //@line 13699
  $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 13700
  HEAP32[$24 >> 2] = $16; //@line 13701
  sp = STACKTOP; //@line 13702
  return;
 }
 HEAP32[___async_retval >> 2] = $20; //@line 13706
 ___async_unwind = 0; //@line 13707
 HEAP32[$ReallocAsyncCtx6 >> 2] = 205; //@line 13708
 $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 13709
 HEAP32[$21 >> 2] = $10; //@line 13710
 $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 13711
 HEAP32[$22 >> 2] = $12; //@line 13712
 $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 13713
 HEAP32[$23 >> 2] = $14; //@line 13714
 $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 13715
 HEAP32[$24 >> 2] = $16; //@line 13716
 sp = STACKTOP; //@line 13717
 return;
}
function __ZN7LoRaPHY12get_next_ADREbRaS0_Rj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0$i$i = 0, $$sink$i = 0, $11 = 0, $14 = 0, $22 = 0, $28 = 0, $41 = 0, $44 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 23222
 $7 = HEAPU8[$0 + 24 >> 0] | 0; //@line 23225
 $8 = $0 + 25 | 0; //@line 23226
 $11 = (HEAPU8[$8 >> 0] | 0) + $7 | 0; //@line 23229
 $14 = $0 + 26 | 0; //@line 23232
 if ((HEAP8[$2 >> 0] | 0) == (HEAPU8[$14 >> 0] | 0)) {
  HEAP32[$4 >> 2] = 0; //@line 23237
  $$0 = 0; //@line 23238
  return $$0 | 0; //@line 23239
 }
 if ((HEAP32[$4 >> 2] | 0) >>> 0 < $7 >>> 0) {
  $$0 = 0; //@line 23244
  return $$0 | 0; //@line 23245
 }
 HEAP8[$3 >> 0] = HEAP8[$0 + 22 >> 0] | 0; //@line 23249
 $22 = HEAP32[$4 >> 2] | 0; //@line 23250
 if ($22 >>> 0 < $11 >>> 0) {
  $$0 = 1; //@line 23253
  return $$0 | 0; //@line 23254
 }
 if ((($22 >>> 0) % ((HEAPU8[$8 >> 0] | 0) >>> 0) | 0 | 0) != 1) {
  $$0 = 1; //@line 23261
  return $$0 | 0; //@line 23262
 }
 $28 = HEAP8[$2 >> 0] | 0; //@line 23264
 $$sink$i = HEAP8[((HEAP8[$0 + 132 >> 0] & 1) == 0 ? $14 : $0 + 35 | 0) >> 0] | 0; //@line 23271
 $$0$i$i = $$sink$i << 24 >> 24 == $28 << 24 >> 24 ? $$sink$i : ($28 & 255) + 255 & 255; //@line 23276
 HEAP8[$2 >> 0] = $$0$i$i; //@line 23277
 $41 = ($$0$i$i << 24 >> 24 | 0) != (HEAPU8[$14 >> 0] | 0); //@line 23281
 if ($41 | $1 ^ 1) {
  $$0 = $41; //@line 23285
  return $$0 | 0; //@line 23286
 }
 $44 = HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0; //@line 23290
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 23291
 FUNCTION_TABLE_vi[$44 & 1023]($0); //@line 23292
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 557; //@line 23295
  sp = STACKTOP; //@line 23296
  return 0; //@line 23297
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 23299
 $$0 = 0; //@line 23300
 return $$0 | 0; //@line 23301
}
function __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $12 = 0, $13 = 0, $16 = 0, $20 = 0, $21 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 23550
 if (($1 | 0) == ($2 | 0)) {
  $21 = $1 + 16 | 0; //@line 23553
  HEAP32[$21 >> 2] = 0; //@line 23554
  return;
 }
 $4 = $1 + 12 | 0; //@line 23557
 $5 = HEAP32[$4 >> 2] | 0; //@line 23558
 do {
  if ($5 | 0) {
   $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 23563
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 23564
   FUNCTION_TABLE_vi[$8 & 1023]($1); //@line 23565
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 558; //@line 23568
    HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 23570
    HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 23572
    HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 23574
    sp = STACKTOP; //@line 23575
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 23578
    break;
   }
  }
 } while (0);
 $12 = $2 + 12 | 0; //@line 23583
 $13 = HEAP32[$12 >> 2] | 0; //@line 23584
 do {
  if (!$13) {
   $20 = 0; //@line 23588
  } else {
   $16 = HEAP32[$13 + 4 >> 2] | 0; //@line 23591
   $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 23592
   FUNCTION_TABLE_vii[$16 & 31]($1, $2); //@line 23593
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 559; //@line 23596
    HEAP32[$AsyncCtx3 + 4 >> 2] = $12; //@line 23598
    HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 23600
    HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 23602
    sp = STACKTOP; //@line 23603
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 23606
    $20 = HEAP32[$12 >> 2] | 0; //@line 23608
    break;
   }
  }
 } while (0);
 HEAP32[$4 >> 2] = $20; //@line 23613
 $21 = $1 + 16 | 0; //@line 23614
 HEAP32[$21 >> 2] = 0; //@line 23615
 return;
}
function _main__async_cb_30($0) {
 $0 = $0 | 0;
 var $14 = 0, $15 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 19242
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19246
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19248
 __ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t(21880, 21888) | 0; //@line 19251
 if (__ZN16LoRaWANInterface25disable_adaptive_datarateEv(21880) | 0) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 19255
  _puts(14159) | 0; //@line 19256
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 653; //@line 19259
   sp = STACKTOP; //@line 19260
   return;
  }
  ___async_unwind = 0; //@line 19263
  HEAP32[$ReallocAsyncCtx6 >> 2] = 653; //@line 19264
  sp = STACKTOP; //@line 19265
  return;
 }
 __ZN16LoRaWANInterface12set_datarateEh(21880, 5) | 0; //@line 19268
 HEAP8[$4 >> 0] = 1; //@line 19269
 HEAP32[$4 + 8 >> 2] = 637604466; //@line 19271
 HEAP32[$4 + 12 >> 2] = 14193; //@line 19273
 HEAP32[$4 + 16 >> 2] = 14209; //@line 19275
 $14 = __ZN16LoRaWANInterface7connectERK15lorawan_connect(21880, $4) | 0; //@line 19276
 switch ($14 | 0) {
 case 0:
 case -1016:
  {
   break;
  }
 default:
  {
   HEAP32[$6 >> 2] = $14; //@line 19282
   _printf(14225, $6) | 0; //@line 19283
   HEAP32[___async_retval >> 2] = -1; //@line 19285
   return;
  }
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 19289
 _puts(14254) | 0; //@line 19290
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 654; //@line 19293
  $15 = $ReallocAsyncCtx5 + 4 | 0; //@line 19294
  HEAP32[$15 >> 2] = $4; //@line 19295
  sp = STACKTOP; //@line 19296
  return;
 }
 ___async_unwind = 0; //@line 19299
 HEAP32[$ReallocAsyncCtx5 >> 2] = 654; //@line 19300
 $15 = $ReallocAsyncCtx5 + 4 | 0; //@line 19301
 HEAP32[$15 >> 2] = $4; //@line 19302
 sp = STACKTOP; //@line 19303
 return;
}
function __ZN7LoRaPHY19request_new_channelEP24new_channel_req_params_s($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$011 = 0, $10 = 0, $12 = 0, $13 = 0, $16 = 0, $18 = 0, $19 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 20155
 L1 : do {
  if (!(HEAP8[$0 + 16 >> 0] | 0)) {
   $$011 = 0; //@line 20161
  } else {
   $5 = HEAP32[$1 >> 2] | 0; //@line 20163
   if (!(HEAP32[$5 >> 2] | 0)) {
    $10 = HEAP32[(HEAP32[$0 >> 2] | 0) + 64 >> 2] | 0; //@line 20169
    $12 = HEAP8[$1 + 4 >> 0] | 0; //@line 20171
    $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 20172
    $13 = FUNCTION_TABLE_iii[$10 & 31]($0, $12) | 0; //@line 20173
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 510; //@line 20176
     sp = STACKTOP; //@line 20177
     return 0; //@line 20178
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 20180
     return ($13 ? 3 : 0) | 0; //@line 20182
    }
   }
   $16 = HEAP32[(HEAP32[$0 >> 2] | 0) + 60 >> 2] | 0; //@line 20187
   $18 = HEAP8[$1 + 4 >> 0] | 0; //@line 20189
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 20190
   $19 = FUNCTION_TABLE_iiii[$16 & 15]($0, $5, $18) | 0; //@line 20191
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 511; //@line 20194
    sp = STACKTOP; //@line 20195
    return 0; //@line 20196
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 20198
   switch ($19 | 0) {
   case 0:
    {
     $$011 = 3; //@line 20201
     break L1;
     break;
    }
   case -1004:
    {
     $$011 = 2; //@line 20206
     break L1;
     break;
    }
   case -1005:
    {
     $$011 = 1; //@line 20211
     break L1;
     break;
    }
   case -1006:
    {
     $$011 = 0; //@line 20216
     break L1;
     break;
    }
   default:
    {
     $$011 = 0; //@line 20221
     break L1;
    }
   }
  }
 } while (0);
 return $$011 | 0; //@line 20227
}
function __ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_330($0) {
 $0 = $0 | 0;
 var $19 = 0, $2 = 0, $20 = 0, $23 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $5 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 12550
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12552
 $5 = $2 + 1184 | 0; //@line 12555
 HEAP8[$5 >> 0] = HEAP8[$2 + 378 >> 0] | 0; //@line 12556
 HEAP32[$2 + 1188 >> 2] = HEAP32[$2 + 1132 >> 2]; //@line 12560
 HEAP8[$2 + 1200 >> 0] = HEAP8[$2 + 1141 >> 0] | 0; //@line 12564
 HEAP8[$2 + 1201 >> 0] = HEAP8[$2 + 369 >> 0] | 0; //@line 12568
 HEAP32[$2 + 1204 >> 2] = 1; //@line 12570
 $19 = $2 + 1202 | 0; //@line 12574
 HEAP8[$19 >> 0] = (HEAP32[$2 + 360 >> 2] | 0) == 2 & 1; //@line 12576
 $20 = HEAP32[$2 >> 2] | 0; //@line 12577
 $23 = HEAP32[(HEAP32[$20 >> 2] | 0) + 24 >> 2] | 0; //@line 12580
 $26 = (__ZN11LoRaMacMcps14get_indicationEv($2 + 288 | 0) | 0) + 10 | 0; //@line 12583
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 12584
 $27 = FUNCTION_TABLE_iiii[$23 & 15]($20, $5, $26) | 0; //@line 12585
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 290; //@line 12588
  $28 = $ReallocAsyncCtx + 4 | 0; //@line 12589
  HEAP32[$28 >> 2] = $19; //@line 12590
  $29 = $ReallocAsyncCtx + 8 | 0; //@line 12591
  HEAP32[$29 >> 2] = $2; //@line 12592
  $30 = $ReallocAsyncCtx + 12 | 0; //@line 12593
  HEAP32[$30 >> 2] = $2; //@line 12594
  sp = STACKTOP; //@line 12595
  return;
 }
 HEAP8[___async_retval >> 0] = $27 & 1; //@line 12600
 ___async_unwind = 0; //@line 12601
 HEAP32[$ReallocAsyncCtx >> 2] = 290; //@line 12602
 $28 = $ReallocAsyncCtx + 4 | 0; //@line 12603
 HEAP32[$28 >> 2] = $19; //@line 12604
 $29 = $ReallocAsyncCtx + 8 | 0; //@line 12605
 HEAP32[$29 >> 2] = $2; //@line 12606
 $30 = $ReallocAsyncCtx + 12 | 0; //@line 12607
 HEAP32[$30 >> 2] = $2; //@line 12608
 sp = STACKTOP; //@line 12609
 return;
}
function _mbedtls_cipher_cmac_starts($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $13 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2784
 if (!$0) {
  $$0 = -24832; //@line 2787
  return $$0 | 0; //@line 2788
 }
 if (($1 | 0) == 0 | (HEAP32[$0 >> 2] | 0) == 0) {
  $$0 = -24832; //@line 2795
  return $$0 | 0; //@line 2796
 }
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 2798
 $7 = _mbedtls_cipher_setkey($0, $1, $2, 1) | 0; //@line 2799
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 582; //@line 2802
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2804
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 2806
  sp = STACKTOP; //@line 2807
  return 0; //@line 2808
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2810
 if ($7 | 0) {
  $$0 = $7; //@line 2813
  return $$0 | 0; //@line 2814
 }
 switch (HEAP32[HEAP32[$0 >> 2] >> 2] | 0) {
 case 36:
 case 4:
 case 3:
 case 2:
  {
   break;
  }
 default:
  {
   $$0 = -24832; //@line 2823
   return $$0 | 0; //@line 2824
  }
 }
 $13 = _calloc(1, 36) | 0; //@line 2827
 if (!$13) {
  $$0 = -24960; //@line 2830
  return $$0 | 0; //@line 2831
 }
 HEAP32[$0 + 64 >> 2] = $13; //@line 2834
 HEAP8[$13 >> 0] = 0; //@line 2836
 HEAP8[$13 + 1 >> 0] = 0; //@line 2838
 HEAP8[$13 + 2 >> 0] = 0; //@line 2840
 HEAP8[$13 + 3 >> 0] = 0; //@line 2842
 HEAP8[$13 + 4 >> 0] = 0; //@line 2844
 HEAP8[$13 + 5 >> 0] = 0; //@line 2846
 HEAP8[$13 + 6 >> 0] = 0; //@line 2848
 HEAP8[$13 + 7 >> 0] = 0; //@line 2850
 HEAP8[$13 + 8 >> 0] = 0; //@line 2852
 HEAP8[$13 + 9 >> 0] = 0; //@line 2854
 HEAP8[$13 + 10 >> 0] = 0; //@line 2856
 HEAP8[$13 + 11 >> 0] = 0; //@line 2858
 HEAP8[$13 + 12 >> 0] = 0; //@line 2860
 HEAP8[$13 + 13 >> 0] = 0; //@line 2862
 HEAP8[$13 + 14 >> 0] = 0; //@line 2864
 HEAP8[$13 + 15 >> 0] = 0; //@line 2865
 $$0 = 0; //@line 2866
 return $$0 | 0; //@line 2867
}
function __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_105($0) {
 $0 = $0 | 0;
 var $$phi$trans$insert = 0, $$pre10 = 0, $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 27511
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27515
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27517
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27519
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27521
 $$phi$trans$insert = (HEAP32[$0 + 4 >> 2] | 0) + 12 | 0; //@line 27522
 $$pre10 = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 27523
 if (!$$pre10) {
  HEAP32[$4 >> 2] = 0; //@line 27526
  _gpio_irq_set($10 + 28 | 0, 2, 0); //@line 27528
  return;
 }
 $13 = HEAP32[$$pre10 + 4 >> 2] | 0; //@line 27532
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 27533
 FUNCTION_TABLE_vii[$13 & 31]($6, $8); //@line 27534
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 86; //@line 27537
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 27538
  HEAP32[$14 >> 2] = $$phi$trans$insert; //@line 27539
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 27540
  HEAP32[$15 >> 2] = $4; //@line 27541
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 27542
  HEAP32[$16 >> 2] = $8; //@line 27543
  $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 27544
  HEAP32[$17 >> 2] = $10; //@line 27545
  sp = STACKTOP; //@line 27546
  return;
 }
 ___async_unwind = 0; //@line 27549
 HEAP32[$ReallocAsyncCtx4 >> 2] = 86; //@line 27550
 $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 27551
 HEAP32[$14 >> 2] = $$phi$trans$insert; //@line 27552
 $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 27553
 HEAP32[$15 >> 2] = $4; //@line 27554
 $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 27555
 HEAP32[$16 >> 2] = $8; //@line 27556
 $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 27557
 HEAP32[$17 >> 2] = $10; //@line 27558
 sp = STACKTOP; //@line 27559
 return;
}
function _mbedtls_ccm_setkey($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $13 = 0, $18 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 1552
 $4 = _mbedtls_cipher_info_from_values($1, $3, 1) | 0; //@line 1553
 if (!$4) {
  $$0 = -13; //@line 1556
  return $$0 | 0; //@line 1557
 }
 if ((HEAP32[$4 + 24 >> 2] | 0) != 16) {
  $$0 = -13; //@line 1563
  return $$0 | 0; //@line 1564
 }
 $AsyncCtx7 = _emscripten_alloc_async_context(20, sp) | 0; //@line 1566
 _mbedtls_cipher_free($0); //@line 1567
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 566; //@line 1570
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 1572
  HEAP32[$AsyncCtx7 + 8 >> 2] = $4; //@line 1574
  HEAP32[$AsyncCtx7 + 12 >> 2] = $2; //@line 1576
  HEAP32[$AsyncCtx7 + 16 >> 2] = $3; //@line 1578
  sp = STACKTOP; //@line 1579
  return 0; //@line 1580
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 1582
 $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 1583
 $13 = _mbedtls_cipher_setup($0, $4) | 0; //@line 1584
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 567; //@line 1587
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 1589
  HEAP32[$AsyncCtx3 + 8 >> 2] = $2; //@line 1591
  HEAP32[$AsyncCtx3 + 12 >> 2] = $3; //@line 1593
  sp = STACKTOP; //@line 1594
  return 0; //@line 1595
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 1597
 if ($13 | 0) {
  $$0 = $13; //@line 1600
  return $$0 | 0; //@line 1601
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 1603
 $18 = _mbedtls_cipher_setkey($0, $2, $3, 1) | 0; //@line 1604
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 568; //@line 1607
  sp = STACKTOP; //@line 1608
  return 0; //@line 1609
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 1611
 $$0 = $18; //@line 1612
 return $$0 | 0; //@line 1613
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_1($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $25 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 16605
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16609
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16611
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16613
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16615
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16617
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16619
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 16621
 $18 = HEAP8[$0 + 36 >> 0] & 1; //@line 16624
 $25 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 16625
 do {
  if ($25 >>> 0 < $4 >>> 0) {
   if (!(HEAP8[$6 >> 0] | 0)) {
    if ((HEAP32[$8 >> 2] | 0) == 1) {
     if ((HEAP32[$10 >> 2] | 0) == 1) {
      break;
     }
    }
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 16641
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($25, $12, $14, $16, $18); //@line 16642
    if (!___async) {
     ___async_unwind = 0; //@line 16645
    }
    HEAP32[$ReallocAsyncCtx2 >> 2] = 701; //@line 16647
    HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $25; //@line 16649
    HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 16651
    HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 16653
    HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 16655
    HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 16657
    HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 16659
    HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $14; //@line 16661
    HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $16; //@line 16663
    HEAP8[$ReallocAsyncCtx2 + 36 >> 0] = $18 & 1; //@line 16666
    sp = STACKTOP; //@line 16667
    return;
   }
  }
 } while (0);
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_359($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 14674
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14676
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14680
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14682
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14684
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 14686
 $13 = HEAP32[$2 >> 2] | 0; //@line 14687
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 52 >> 2] | 0; //@line 14690
 $18 = HEAP16[HEAP32[$0 + 8 >> 2] >> 1] & 255; //@line 14692
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 14693
 $19 = FUNCTION_TABLE_iiii[$16 & 15]($13, $6, $18) | 0; //@line 14694
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 529; //@line 14697
  $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 14698
  HEAP32[$20 >> 2] = $8; //@line 14699
  $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 14700
  HEAP32[$21 >> 2] = $2; //@line 14701
  $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 14702
  HEAP32[$22 >> 2] = $10; //@line 14703
  $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 14704
  HEAP32[$23 >> 2] = $12; //@line 14705
  sp = STACKTOP; //@line 14706
  return;
 }
 HEAP32[___async_retval >> 2] = $19; //@line 14710
 ___async_unwind = 0; //@line 14711
 HEAP32[$ReallocAsyncCtx6 >> 2] = 529; //@line 14712
 $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 14713
 HEAP32[$20 >> 2] = $8; //@line 14714
 $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 14715
 HEAP32[$21 >> 2] = $2; //@line 14716
 $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 14717
 HEAP32[$22 >> 2] = $10; //@line 14718
 $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 14719
 HEAP32[$23 >> 2] = $12; //@line 14720
 sp = STACKTOP; //@line 14721
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_216($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $16 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 2968
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2972
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2974
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2976
 if (!(HEAP32[$0 + 4 >> 2] | 0)) {
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(16) | 0; //@line 2979
  _mbed_assert_internal(12025, 11293, 899); //@line 2980
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 142; //@line 2983
   $10 = $ReallocAsyncCtx9 + 4 | 0; //@line 2984
   HEAP32[$10 >> 2] = $4; //@line 2985
   $11 = $ReallocAsyncCtx9 + 8 | 0; //@line 2986
   HEAP32[$11 >> 2] = $6; //@line 2987
   $12 = $ReallocAsyncCtx9 + 12 | 0; //@line 2988
   HEAP32[$12 >> 2] = $8; //@line 2989
   sp = STACKTOP; //@line 2990
   return;
  }
  ___async_unwind = 0; //@line 2993
  HEAP32[$ReallocAsyncCtx9 >> 2] = 142; //@line 2994
  $10 = $ReallocAsyncCtx9 + 4 | 0; //@line 2995
  HEAP32[$10 >> 2] = $4; //@line 2996
  $11 = $ReallocAsyncCtx9 + 8 | 0; //@line 2997
  HEAP32[$11 >> 2] = $6; //@line 2998
  $12 = $ReallocAsyncCtx9 + 12 | 0; //@line 2999
  HEAP32[$12 >> 2] = $8; //@line 3000
  sp = STACKTOP; //@line 3001
  return;
 }
 if (!(HEAP8[$4 + 11 >> 0] | 0)) {
  return;
 }
 $16 = HEAP8[$6 >> 0] | 0; //@line 3010
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 3011
 __ZN12LoRaWANStack9handle_txEhPKhth($8, $16, 0, 0, 2) | 0; //@line 3012
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 143; //@line 3015
  sp = STACKTOP; //@line 3016
  return;
 }
 ___async_unwind = 0; //@line 3019
 HEAP32[$ReallocAsyncCtx6 >> 2] = 143; //@line 3020
 sp = STACKTOP; //@line 3021
 return;
}
function __ZN7LoRaMac21send_frame_on_channelEh__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 21578
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21584
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21588
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21590
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21592
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 21594
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 21596
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 21598
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 21600
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 21602
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 21604
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 21606
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 21608
 _printf(12141, HEAP32[$0 + 4 >> 2] | 0) | 0; //@line 21609
 _printf(12274, $6) | 0; //@line 21610
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(48) | 0; //@line 21611
 _putchar(10) | 0; //@line 21612
 if (!___async) {
  ___async_unwind = 0; //@line 21615
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 403; //@line 21617
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $10; //@line 21619
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $12; //@line 21621
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $14; //@line 21623
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $16; //@line 21625
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $18; //@line 21627
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $20; //@line 21629
 HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $22; //@line 21631
 HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $24; //@line 21633
 HEAP32[$ReallocAsyncCtx3 + 36 >> 2] = $26; //@line 21635
 HEAP32[$ReallocAsyncCtx3 + 40 >> 2] = $28; //@line 21637
 HEAP32[$ReallocAsyncCtx3 + 44 >> 2] = $30; //@line 21639
 sp = STACKTOP; //@line 21640
 return;
}
function __ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb($0) {
 $0 = $0 | 0;
 var $14 = 0, $18 = 0, $2 = 0, $22 = 0, $24 = 0, $33 = 0, $4 = 0, $7 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 18738
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18740
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18742
 $7 = (HEAP8[$2 + 373 >> 0] | 0) != 0; //@line 18748
 if (HEAP32[$2 + 364 >> 2] | 0) {
  if ($7) {
   HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($2 + 288 | 0) | 0) + 4 >> 2] = 4; //@line 18754
  }
  HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) + 4 >> 2] = 4; //@line 18759
  if ((HEAP32[$4 >> 2] | 0) == 2) {
   return;
  }
  $33 = $2 + 944 | 0; //@line 18765
  HEAP8[$33 >> 0] = HEAP8[$33 >> 0] | 32; //@line 18768
  return;
 }
 if ($7) {
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($2 + 288 | 0) | 0) + 4 >> 2] = 3; //@line 18775
 }
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) + 4 >> 2] = 3; //@line 18780
 $14 = $2 + 356 | 0; //@line 18781
 $18 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$14 >> 2] | 0, HEAP32[$2 + 980 >> 2] | 0) | 0; //@line 18785
 if ($18 >>> 0 < (HEAP32[$2 + 976 >> 2] | 0) >>> 0) {
  return;
 }
 $22 = HEAP32[$14 >> 2] | 0; //@line 18792
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 18794
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($22, $2 + 1056 | 0); //@line 18795
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 358; //@line 18798
  $24 = $ReallocAsyncCtx3 + 4 | 0; //@line 18799
  HEAP32[$24 >> 2] = $2; //@line 18800
  sp = STACKTOP; //@line 18801
  return;
 }
 ___async_unwind = 0; //@line 18804
 HEAP32[$ReallocAsyncCtx3 >> 2] = 358; //@line 18805
 $24 = $ReallocAsyncCtx3 + 4 | 0; //@line 18806
 HEAP32[$24 >> 2] = $2; //@line 18807
 sp = STACKTOP; //@line 18808
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_259($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $5 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 5464
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5466
 $3 = $2 + 1112 | 0; //@line 5467
 HEAP32[$3 >> 2] = 10096; //@line 5468
 __ZN4mbed6Ticker6detachEv($3); //@line 5469
 $5 = HEAP32[$2 + 1164 >> 2] | 0; //@line 5471
 if (!$5) {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 5474
  __ZN4mbed10TimerEventD2Ev($3); //@line 5475
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 64; //@line 5478
   $12 = $ReallocAsyncCtx5 + 4 | 0; //@line 5479
   HEAP32[$12 >> 2] = $2; //@line 5480
   sp = STACKTOP; //@line 5481
   return;
  }
  ___async_unwind = 0; //@line 5484
  HEAP32[$ReallocAsyncCtx5 >> 2] = 64; //@line 5485
  $12 = $ReallocAsyncCtx5 + 4 | 0; //@line 5486
  HEAP32[$12 >> 2] = $2; //@line 5487
  sp = STACKTOP; //@line 5488
  return;
 } else {
  $9 = HEAP32[$5 + 8 >> 2] | 0; //@line 5493
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 5494
  FUNCTION_TABLE_vi[$9 & 1023]($2 + 1152 | 0); //@line 5495
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 63; //@line 5498
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 5499
   HEAP32[$10 >> 2] = $2; //@line 5500
   $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 5501
   HEAP32[$11 >> 2] = $3; //@line 5502
   sp = STACKTOP; //@line 5503
   return;
  }
  ___async_unwind = 0; //@line 5506
  HEAP32[$ReallocAsyncCtx2 >> 2] = 63; //@line 5507
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 5508
  HEAP32[$10 >> 2] = $2; //@line 5509
  $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 5510
  HEAP32[$11 >> 2] = $3; //@line 5511
  sp = STACKTOP; //@line 5512
  return;
 }
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_258($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $5 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 5409
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5411
 $3 = $2 + 1048 | 0; //@line 5412
 HEAP32[$3 >> 2] = 10096; //@line 5413
 __ZN4mbed6Ticker6detachEv($3); //@line 5414
 $5 = HEAP32[$2 + 1100 >> 2] | 0; //@line 5416
 if (!$5) {
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 5419
  __ZN4mbed10TimerEventD2Ev($3); //@line 5420
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 66; //@line 5423
   $12 = $ReallocAsyncCtx4 + 4 | 0; //@line 5424
   HEAP32[$12 >> 2] = $2; //@line 5425
   sp = STACKTOP; //@line 5426
   return;
  }
  ___async_unwind = 0; //@line 5429
  HEAP32[$ReallocAsyncCtx4 >> 2] = 66; //@line 5430
  $12 = $ReallocAsyncCtx4 + 4 | 0; //@line 5431
  HEAP32[$12 >> 2] = $2; //@line 5432
  sp = STACKTOP; //@line 5433
  return;
 } else {
  $9 = HEAP32[$5 + 8 >> 2] | 0; //@line 5438
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 5439
  FUNCTION_TABLE_vi[$9 & 1023]($2 + 1088 | 0); //@line 5440
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 65; //@line 5443
   $10 = $ReallocAsyncCtx3 + 4 | 0; //@line 5444
   HEAP32[$10 >> 2] = $3; //@line 5445
   $11 = $ReallocAsyncCtx3 + 8 | 0; //@line 5446
   HEAP32[$11 >> 2] = $2; //@line 5447
   sp = STACKTOP; //@line 5448
   return;
  }
  ___async_unwind = 0; //@line 5451
  HEAP32[$ReallocAsyncCtx3 >> 2] = 65; //@line 5452
  $10 = $ReallocAsyncCtx3 + 4 | 0; //@line 5453
  HEAP32[$10 >> 2] = $3; //@line 5454
  $11 = $ReallocAsyncCtx3 + 8 | 0; //@line 5455
  HEAP32[$11 >> 2] = $2; //@line 5456
  sp = STACKTOP; //@line 5457
  return;
 }
}
function ___overflow($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $13 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $9 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10878
 STACKTOP = STACKTOP + 16 | 0; //@line 10879
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10879
 $2 = sp; //@line 10880
 $3 = $1 & 255; //@line 10881
 HEAP8[$2 >> 0] = $3; //@line 10882
 $4 = $0 + 16 | 0; //@line 10883
 $5 = HEAP32[$4 >> 2] | 0; //@line 10884
 if (!$5) {
  if (!(___towrite($0) | 0)) {
   $12 = HEAP32[$4 >> 2] | 0; //@line 10891
   label = 4; //@line 10892
  } else {
   $$0 = -1; //@line 10894
  }
 } else {
  $12 = $5; //@line 10897
  label = 4; //@line 10898
 }
 do {
  if ((label | 0) == 4) {
   $9 = $0 + 20 | 0; //@line 10902
   $10 = HEAP32[$9 >> 2] | 0; //@line 10903
   if ($10 >>> 0 < $12 >>> 0) {
    $13 = $1 & 255; //@line 10906
    if (($13 | 0) != (HEAP8[$0 + 75 >> 0] | 0)) {
     HEAP32[$9 >> 2] = $10 + 1; //@line 10913
     HEAP8[$10 >> 0] = $3; //@line 10914
     $$0 = $13; //@line 10915
     break;
    }
   }
   $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 10920
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 10921
   $21 = FUNCTION_TABLE_iiii[$20 & 15]($0, $2, 1) | 0; //@line 10922
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 666; //@line 10925
    HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 10927
    sp = STACKTOP; //@line 10928
    STACKTOP = sp; //@line 10929
    return 0; //@line 10929
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 10931
   if (($21 | 0) == 1) {
    $$0 = HEAPU8[$2 >> 0] | 0; //@line 10936
   } else {
    $$0 = -1; //@line 10938
   }
  }
 } while (0);
 STACKTOP = sp; //@line 10942
 return $$0 | 0; //@line 10942
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_407($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $9 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 30010
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30012
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30014
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30016
 $7 = HEAP32[$2 >> 2] | 0; //@line 30017
 $9 = $6 + 12 | 0; //@line 30019
 HEAP32[$6 >> 2] = 438; //@line 30020
 HEAP32[$6 + 4 >> 2] = 0; //@line 30022
 HEAP32[$6 + 8 >> 2] = $4; //@line 30024
 HEAP32[$9 >> 2] = 836; //@line 30025
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 30026
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($7, $4 + 1076 | 0, $6); //@line 30027
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 439; //@line 30030
  $10 = $ReallocAsyncCtx6 + 4 | 0; //@line 30031
  HEAP32[$10 >> 2] = $9; //@line 30032
  $11 = $ReallocAsyncCtx6 + 8 | 0; //@line 30033
  HEAP32[$11 >> 2] = $2; //@line 30034
  $12 = $ReallocAsyncCtx6 + 12 | 0; //@line 30035
  HEAP32[$12 >> 2] = $4; //@line 30036
  $13 = $ReallocAsyncCtx6 + 16 | 0; //@line 30037
  HEAP32[$13 >> 2] = $6; //@line 30038
  sp = STACKTOP; //@line 30039
  return;
 }
 ___async_unwind = 0; //@line 30042
 HEAP32[$ReallocAsyncCtx6 >> 2] = 439; //@line 30043
 $10 = $ReallocAsyncCtx6 + 4 | 0; //@line 30044
 HEAP32[$10 >> 2] = $9; //@line 30045
 $11 = $ReallocAsyncCtx6 + 8 | 0; //@line 30046
 HEAP32[$11 >> 2] = $2; //@line 30047
 $12 = $ReallocAsyncCtx6 + 12 | 0; //@line 30048
 HEAP32[$12 >> 2] = $4; //@line 30049
 $13 = $ReallocAsyncCtx6 + 16 | 0; //@line 30050
 HEAP32[$13 >> 2] = $6; //@line 30051
 sp = STACKTOP; //@line 30052
 return;
}
function __ZN12LoRaWANStack29activation_by_personalizationERK15lorawan_connect($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $15 = 0, $2 = 0, $6 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 7687
 STACKTOP = STACKTOP + 16 | 0; //@line 7688
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 7688
 $2 = $0 + 1876 | 0; //@line 7691
 if (!(HEAP32[$2 >> 2] | 0)) {
  _printf(11245, sp) | 0; //@line 7695
  _printf(11858, sp + 8 | 0) | 0; //@line 7696
  $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7697
  _putchar(10) | 0; //@line 7698
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 249; //@line 7701
   sp = STACKTOP; //@line 7702
   STACKTOP = sp; //@line 7703
   return 0; //@line 7703
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7705
  $$0 = -1012; //@line 7706
  STACKTOP = sp; //@line 7707
  return $$0 | 0; //@line 7707
 } else {
  $6 = HEAP32[$1 + 8 >> 2] | 0; //@line 7710
  $8 = HEAP32[$1 + 12 >> 2] | 0; //@line 7712
  $10 = HEAP32[$1 + 16 >> 2] | 0; //@line 7714
  HEAP8[$0 + 1936 >> 0] = 1; //@line 7716
  HEAP32[$0 + 1944 >> 2] = $6; //@line 7718
  HEAP32[$0 + 1948 >> 2] = $8; //@line 7720
  HEAP32[$0 + 1952 >> 2] = $10; //@line 7722
  HEAP32[$2 >> 2] = 3; //@line 7723
  $AsyncCtx4 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7724
  $15 = __ZN12LoRaWANStack18lora_state_machineEv($0) | 0; //@line 7725
  if (___async) {
   HEAP32[$AsyncCtx4 >> 2] = 250; //@line 7728
   sp = STACKTOP; //@line 7729
   STACKTOP = sp; //@line 7730
   return 0; //@line 7730
  }
  _emscripten_free_async_context($AsyncCtx4 | 0); //@line 7732
  $$0 = $15; //@line 7733
  STACKTOP = sp; //@line 7734
  return $$0 | 0; //@line 7734
 }
 return 0; //@line 7736
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_428($0) {
 $0 = $0 | 0;
 var $10 = 0, $18 = 0, $2 = 0, $24 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 31449
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31451
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31455
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31457
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31459
 HEAP8[$2 + 376 >> 0] = (HEAP32[$0 + 8 >> 2] | 0) == 0 & (HEAP8[$2 + 944 >> 0] & 8) != 0 & 1; //@line 31468
 $18 = HEAP8[$2 + 378 >> 0] | 0; //@line 31470
 HEAP8[$2 + 379 >> 0] = $18; //@line 31472
 HEAP8[$6 >> 0] = $18; //@line 31473
 HEAP8[$8 + 1 >> 0] = HEAP8[$2 + 372 >> 0] | 0; //@line 31477
 HEAP32[$8 + 4 >> 2] = $10; //@line 31479
 $24 = HEAP32[$2 >> 2] | 0; //@line 31480
 $27 = HEAP32[(HEAP32[$24 >> 2] | 0) + 12 >> 2] | 0; //@line 31483
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 31484
 FUNCTION_TABLE_vii[$27 & 31]($24, $8); //@line 31485
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 279; //@line 31488
  $28 = $ReallocAsyncCtx + 4 | 0; //@line 31489
  HEAP32[$28 >> 2] = $2; //@line 31490
  $29 = $ReallocAsyncCtx + 8 | 0; //@line 31491
  HEAP32[$29 >> 2] = $10; //@line 31492
  $30 = $ReallocAsyncCtx + 12 | 0; //@line 31493
  HEAP32[$30 >> 2] = $6; //@line 31494
  sp = STACKTOP; //@line 31495
  return;
 }
 ___async_unwind = 0; //@line 31498
 HEAP32[$ReallocAsyncCtx >> 2] = 279; //@line 31499
 $28 = $ReallocAsyncCtx + 4 | 0; //@line 31500
 HEAP32[$28 >> 2] = $2; //@line 31501
 $29 = $ReallocAsyncCtx + 8 | 0; //@line 31502
 HEAP32[$29 >> 2] = $10; //@line 31503
 $30 = $ReallocAsyncCtx + 12 | 0; //@line 31504
 HEAP32[$30 >> 2] = $6; //@line 31505
 sp = STACKTOP; //@line 31506
 return;
}
function _equeue_cancel__async_cb($0) {
 $0 = $0 | 0;
 var $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$sink$in$i$i = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29369
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29371
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29373
 $7 = $2 + 156 | 0; //@line 29374
 _equeue_mutex_lock($7); //@line 29375
 $8 = $2 + 24 | 0; //@line 29376
 $9 = HEAP32[$8 >> 2] | 0; //@line 29377
 L3 : do {
  if (!$9) {
   $$02329$i$i = $8; //@line 29381
   label = 9; //@line 29382
  } else {
   $11 = HEAP32[$6 >> 2] | 0; //@line 29384
   $$025$i$i = $8; //@line 29385
   $13 = $9; //@line 29385
   while (1) {
    $12 = HEAP32[$13 >> 2] | 0; //@line 29387
    if ($12 >>> 0 >= $11 >>> 0) {
     break;
    }
    $15 = $13 + 8 | 0; //@line 29392
    $16 = HEAP32[$15 >> 2] | 0; //@line 29393
    if (!$16) {
     $$02329$i$i = $15; //@line 29396
     label = 9; //@line 29397
     break L3;
    } else {
     $$025$i$i = $15; //@line 29400
     $13 = $16; //@line 29400
    }
   }
   if (($12 | 0) == ($11 | 0)) {
    HEAP32[$4 + -24 >> 2] = $13; //@line 29406
    $$02330$i$i = $$025$i$i; //@line 29409
    $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 29409
   } else {
    $$02329$i$i = $$025$i$i; //@line 29411
    label = 9; //@line 29412
   }
  }
 } while (0);
 if ((label | 0) == 9) {
  HEAP32[$4 + -24 >> 2] = 0; //@line 29418
  $$02330$i$i = $$02329$i$i; //@line 29419
  $$sink$in$i$i = $$02329$i$i; //@line 29419
 }
 HEAP32[$4 + -28 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 29423
 HEAP32[$$02330$i$i >> 2] = $6; //@line 29424
 _equeue_mutex_unlock($7); //@line 29425
 return;
}
function __ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_25($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $2 = 0, $24 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 18815
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18817
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18819
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18821
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 18826
  _mbed_assert_internal(12025, 12034, 215); //@line 18827
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 356; //@line 18830
   $9 = $ReallocAsyncCtx4 + 4 | 0; //@line 18831
   HEAP32[$9 >> 2] = $2; //@line 18832
   $10 = $ReallocAsyncCtx4 + 8 | 0; //@line 18833
   HEAP32[$10 >> 2] = $4; //@line 18834
   $11 = $ReallocAsyncCtx4 + 12 | 0; //@line 18835
   HEAP32[$11 >> 2] = $6; //@line 18836
   sp = STACKTOP; //@line 18837
   return;
  }
  ___async_unwind = 0; //@line 18840
  HEAP32[$ReallocAsyncCtx4 >> 2] = 356; //@line 18841
  $9 = $ReallocAsyncCtx4 + 4 | 0; //@line 18842
  HEAP32[$9 >> 2] = $2; //@line 18843
  $10 = $ReallocAsyncCtx4 + 8 | 0; //@line 18844
  HEAP32[$10 >> 2] = $4; //@line 18845
  $11 = $ReallocAsyncCtx4 + 12 | 0; //@line 18846
  HEAP32[$11 >> 2] = $6; //@line 18847
  sp = STACKTOP; //@line 18848
  return;
 }
 HEAP32[$4 + 364 >> 2] = 2; //@line 18852
 if (HEAP8[$4 + 373 >> 0] | 0) {
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0) + 4 >> 2] = 4; //@line 18860
 }
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0) + 4 >> 2] = 4; //@line 18865
 if ((HEAP32[$6 >> 2] | 0) == 2) {
  return;
 }
 $24 = $4 + 944 | 0; //@line 18871
 HEAP8[$24 >> 0] = HEAP8[$24 >> 0] | 32; //@line 18874
 return;
}
function __ZN7LoRaPHY13get_radio_rngEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $13 = 0, $16 = 0, $2 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 22743
 $1 = $0 + 4 | 0; //@line 22744
 $2 = HEAP32[$1 >> 2] | 0; //@line 22745
 $5 = HEAP32[(HEAP32[$2 >> 2] | 0) + 72 >> 2] | 0; //@line 22748
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 22749
 FUNCTION_TABLE_vi[$5 & 1023]($2); //@line 22750
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 550; //@line 22753
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 22755
  sp = STACKTOP; //@line 22756
  return 0; //@line 22757
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 22759
 $7 = HEAP32[$1 >> 2] | 0; //@line 22760
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 36 >> 2] | 0; //@line 22763
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 22764
 $11 = FUNCTION_TABLE_ii[$10 & 15]($7) | 0; //@line 22765
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 551; //@line 22768
  HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 22770
  sp = STACKTOP; //@line 22771
  return 0; //@line 22772
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 22774
 $13 = HEAP32[$1 >> 2] | 0; //@line 22775
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 76 >> 2] | 0; //@line 22778
 $AsyncCtx5 = _emscripten_alloc_async_context(8, sp) | 0; //@line 22779
 FUNCTION_TABLE_vi[$16 & 1023]($13); //@line 22780
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 552; //@line 22783
  HEAP32[$AsyncCtx5 + 4 >> 2] = $11; //@line 22785
  sp = STACKTOP; //@line 22786
  return 0; //@line 22787
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 22789
  return $11 | 0; //@line 22790
 }
 return 0; //@line 22792
}
function __ZN16LoRaWANInterfaceC2ER9LoRaRadio($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $17 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 3670
 HEAP32[$0 >> 2] = 712; //@line 3671
 HEAP8[$0 + 4 >> 0] = 0; //@line 3673
 $4 = __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1) | 0; //@line 3675
 $7 = HEAP32[(HEAP32[$1 >> 2] | 0) + 72 >> 2] | 0; //@line 3678
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 3679
 FUNCTION_TABLE_vi[$7 & 1023]($1); //@line 3680
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 112; //@line 3683
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 3685
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 3687
  HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 3689
  sp = STACKTOP; //@line 3690
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 3693
 $12 = HEAP32[HEAP32[$1 >> 2] >> 2] | 0; //@line 3695
 $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 3696
 FUNCTION_TABLE_vii[$12 & 31]($1, $4); //@line 3697
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 113; //@line 3700
  HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 3702
  HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 3704
  sp = STACKTOP; //@line 3705
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 3708
 $17 = HEAP32[(HEAP32[$1 >> 2] | 0) + 76 >> 2] | 0; //@line 3711
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 3712
 FUNCTION_TABLE_vi[$17 & 1023]($1); //@line 3713
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 114; //@line 3716
  sp = STACKTOP; //@line 3717
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 3720
  return;
 }
}
function _fflush__async_cb_172($0) {
 $0 = $0 | 0;
 var $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $13 = 0, $16 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 32496
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 32498
 $$02325 = HEAP32[(___ofl_lock() | 0) >> 2] | 0; //@line 32500
 L3 : do {
  if (!$$02325) {
   $$024$lcssa = $AsyncRetVal; //@line 32504
  } else {
   $$02327 = $$02325; //@line 32506
   $$02426 = $AsyncRetVal; //@line 32506
   while (1) {
    if ((HEAP32[$$02327 + 76 >> 2] | 0) > -1) {
     $16 = ___lockfile($$02327) | 0; //@line 32513
    } else {
     $16 = 0; //@line 32515
    }
    if ((HEAP32[$$02327 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327 + 28 >> 2] | 0) >>> 0) {
     break;
    }
    if ($16 | 0) {
     ___unlockfile($$02327); //@line 32527
    }
    $$023 = HEAP32[$$02327 + 56 >> 2] | 0; //@line 32530
    if (!$$023) {
     $$024$lcssa = $$02426; //@line 32533
     break L3;
    } else {
     $$02327 = $$023; //@line 32536
    }
   }
   $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 32539
   $13 = ___fflush_unlocked($$02327) | 0; //@line 32540
   if (!___async) {
    HEAP32[___async_retval >> 2] = $13; //@line 32544
    ___async_unwind = 0; //@line 32545
   }
   HEAP32[$ReallocAsyncCtx >> 2] = 670; //@line 32547
   HEAP32[$ReallocAsyncCtx + 4 >> 2] = $$02426; //@line 32549
   HEAP32[$ReallocAsyncCtx + 8 >> 2] = $16; //@line 32551
   HEAP32[$ReallocAsyncCtx + 12 >> 2] = $$02327; //@line 32553
   sp = STACKTOP; //@line 32554
   return;
  }
 } while (0);
 ___ofl_unlock(); //@line 32558
 HEAP32[___async_retval >> 2] = $$024$lcssa; //@line 32560
 return;
}
function __Z22compute_join_frame_micPKhtS0_Pj__async_cb_332($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $14 = 0, $4 = 0, $6 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 12710
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12714
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12716
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 12718
 if (!$AsyncRetVal) {
  $10 = HEAP16[$0 + 4 >> 1] & 255; //@line 12722
  $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 12723
  $11 = _mbedtls_cipher_cmac_update(21244, $4, $10) | 0; //@line 12724
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 500; //@line 12727
   $12 = $ReallocAsyncCtx + 4 | 0; //@line 12728
   HEAP32[$12 >> 2] = $6; //@line 12729
   sp = STACKTOP; //@line 12730
   return;
  }
  HEAP32[___async_retval >> 2] = $11; //@line 12734
  ___async_unwind = 0; //@line 12735
  HEAP32[$ReallocAsyncCtx >> 2] = 500; //@line 12736
  $12 = $ReallocAsyncCtx + 4 | 0; //@line 12737
  HEAP32[$12 >> 2] = $6; //@line 12738
  sp = STACKTOP; //@line 12739
  return;
 } else {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 12742
  _mbedtls_cipher_free(21244); //@line 12743
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 502; //@line 12746
   $14 = $ReallocAsyncCtx5 + 4 | 0; //@line 12747
   HEAP32[$14 >> 2] = $AsyncRetVal; //@line 12748
   sp = STACKTOP; //@line 12749
   return;
  }
  ___async_unwind = 0; //@line 12752
  HEAP32[$ReallocAsyncCtx5 >> 2] = 502; //@line 12753
  $14 = $ReallocAsyncCtx5 + 4 | 0; //@line 12754
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 12755
  sp = STACKTOP; //@line 12756
  return;
 }
}
function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
 end = ptr + num | 0; //@line 33312
 value = value & 255; //@line 33314
 if ((num | 0) >= 67) {
  while (ptr & 3) {
   HEAP8[ptr >> 0] = value; //@line 33317
   ptr = ptr + 1 | 0; //@line 33318
  }
  aligned_end = end & -4 | 0; //@line 33321
  block_aligned_end = aligned_end - 64 | 0; //@line 33322
  value4 = value | value << 8 | value << 16 | value << 24; //@line 33323
  while ((ptr | 0) <= (block_aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4; //@line 33326
   HEAP32[ptr + 4 >> 2] = value4; //@line 33327
   HEAP32[ptr + 8 >> 2] = value4; //@line 33328
   HEAP32[ptr + 12 >> 2] = value4; //@line 33329
   HEAP32[ptr + 16 >> 2] = value4; //@line 33330
   HEAP32[ptr + 20 >> 2] = value4; //@line 33331
   HEAP32[ptr + 24 >> 2] = value4; //@line 33332
   HEAP32[ptr + 28 >> 2] = value4; //@line 33333
   HEAP32[ptr + 32 >> 2] = value4; //@line 33334
   HEAP32[ptr + 36 >> 2] = value4; //@line 33335
   HEAP32[ptr + 40 >> 2] = value4; //@line 33336
   HEAP32[ptr + 44 >> 2] = value4; //@line 33337
   HEAP32[ptr + 48 >> 2] = value4; //@line 33338
   HEAP32[ptr + 52 >> 2] = value4; //@line 33339
   HEAP32[ptr + 56 >> 2] = value4; //@line 33340
   HEAP32[ptr + 60 >> 2] = value4; //@line 33341
   ptr = ptr + 64 | 0; //@line 33342
  }
  while ((ptr | 0) < (aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4; //@line 33346
   ptr = ptr + 4 | 0; //@line 33347
  }
 }
 while ((ptr | 0) < (end | 0)) {
  HEAP8[ptr >> 0] = value; //@line 33352
  ptr = ptr + 1 | 0; //@line 33353
 }
 return end - num | 0; //@line 33355
}
function __ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv($0) {
 $0 = $0 | 0;
 var $10 = 0, $18 = 0, $19 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 11103
 $2 = HEAP32[$0 + 16 >> 2] | 0; //@line 11105
 $4 = HEAP16[$0 + 20 >> 1] | 0; //@line 11107
 $6 = HEAP16[$0 + 22 >> 1] | 0; //@line 11109
 $8 = HEAP8[$0 + 24 >> 0] | 0; //@line 11111
 $9 = $0 + 12 | 0; //@line 11112
 $10 = HEAP32[$9 >> 2] | 0; //@line 11113
 do {
  if (!$10) {
   $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 11117
   _mbed_assert_internal(13874, 13879, 2830); //@line 11118
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 341; //@line 11121
    HEAP32[$AsyncCtx2 + 4 >> 2] = $9; //@line 11123
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 11125
    HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 11127
    HEAP16[$AsyncCtx2 + 16 >> 1] = $4; //@line 11129
    HEAP16[$AsyncCtx2 + 18 >> 1] = $6; //@line 11131
    HEAP8[$AsyncCtx2 + 20 >> 0] = $8; //@line 11133
    sp = STACKTOP; //@line 11134
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 11137
    $19 = HEAP32[$9 >> 2] | 0; //@line 11139
    break;
   }
  } else {
   $19 = $10; //@line 11143
  }
 } while (0);
 $18 = HEAP32[$19 >> 2] | 0; //@line 11146
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 11147
 FUNCTION_TABLE_viiiii[$18 & 7]($0, $2, $4, $6, $8); //@line 11148
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 342; //@line 11151
  sp = STACKTOP; //@line 11152
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 11155
  return;
 }
}
function __ZN7LoRaMac17on_radio_rx_errorEv__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $16 = 0, $2 = 0, $20 = 0, $22 = 0, $29 = 0, $5 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 3356
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3358
 $5 = (HEAP8[$2 + 373 >> 0] | 0) != 0; //@line 3364
 if (HEAP32[$2 + 364 >> 2] | 0) {
  if ($5) {
   HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($2 + 288 | 0) | 0) + 4 >> 2] = 6; //@line 3370
  }
  HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) + 4 >> 2] = 6; //@line 3375
  $29 = $2 + 944 | 0; //@line 3376
  HEAP8[$29 >> 0] = HEAP8[$29 >> 0] | 32; //@line 3379
  return;
 }
 if ($5) {
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($2 + 288 | 0) | 0) + 4 >> 2] = 5; //@line 3386
 }
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) + 4 >> 2] = 5; //@line 3391
 $12 = $2 + 356 | 0; //@line 3392
 $16 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$12 >> 2] | 0, HEAP32[$2 + 980 >> 2] | 0) | 0; //@line 3396
 if ($16 >>> 0 < (HEAP32[$2 + 976 >> 2] | 0) >>> 0) {
  return;
 }
 $20 = HEAP32[$12 >> 2] | 0; //@line 3403
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 3405
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($20, $2 + 1056 | 0); //@line 3406
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 351; //@line 3409
  $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 3410
  HEAP32[$22 >> 2] = $2; //@line 3411
  sp = STACKTOP; //@line 3412
  return;
 }
 ___async_unwind = 0; //@line 3415
 HEAP32[$ReallocAsyncCtx3 >> 2] = 351; //@line 3416
 $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 3417
 HEAP32[$22 >> 2] = $2; //@line 3418
 sp = STACKTOP; //@line 3419
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_301($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 10632
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10636
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10638
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10640
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 10642
 $11 = $4 + 944 | 0; //@line 10643
 HEAP8[$11 >> 0] = HEAP8[$11 >> 0] | 34; //@line 10646
 $14 = HEAP32[$6 >> 2] | 0; //@line 10647
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 10649
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($14, $4 + 996 | 0, 1); //@line 10650
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 330; //@line 10653
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 10654
  HEAP32[$16 >> 2] = $4; //@line 10655
  $17 = $ReallocAsyncCtx6 + 8 | 0; //@line 10656
  HEAP32[$17 >> 2] = $6; //@line 10657
  $18 = $ReallocAsyncCtx6 + 12 | 0; //@line 10658
  HEAP32[$18 >> 2] = $8; //@line 10659
  $19 = $ReallocAsyncCtx6 + 16 | 0; //@line 10660
  HEAP32[$19 >> 2] = $10; //@line 10661
  sp = STACKTOP; //@line 10662
  return;
 }
 ___async_unwind = 0; //@line 10665
 HEAP32[$ReallocAsyncCtx6 >> 2] = 330; //@line 10666
 $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 10667
 HEAP32[$16 >> 2] = $4; //@line 10668
 $17 = $ReallocAsyncCtx6 + 8 | 0; //@line 10669
 HEAP32[$17 >> 2] = $6; //@line 10670
 $18 = $ReallocAsyncCtx6 + 12 | 0; //@line 10671
 HEAP32[$18 >> 2] = $8; //@line 10672
 $19 = $ReallocAsyncCtx6 + 16 | 0; //@line 10673
 HEAP32[$19 >> 2] = $10; //@line 10674
 sp = STACKTOP; //@line 10675
 return;
}
function __Z11compute_micPKhtS0_jhjPj__async_cb_309($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 11022
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11024
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11026
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11028
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 11030
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 11033
  $9 = _mbedtls_cipher_cmac_update(21244, $2, $4) | 0; //@line 11034
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 495; //@line 11037
   $10 = $ReallocAsyncCtx + 4 | 0; //@line 11038
   HEAP32[$10 >> 2] = $6; //@line 11039
   sp = STACKTOP; //@line 11040
   return;
  }
  HEAP32[___async_retval >> 2] = $9; //@line 11044
  ___async_unwind = 0; //@line 11045
  HEAP32[$ReallocAsyncCtx >> 2] = 495; //@line 11046
  $10 = $ReallocAsyncCtx + 4 | 0; //@line 11047
  HEAP32[$10 >> 2] = $6; //@line 11048
  sp = STACKTOP; //@line 11049
  return;
 } else {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 11052
  _mbedtls_cipher_free(21244); //@line 11053
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 497; //@line 11056
   $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 11057
   HEAP32[$12 >> 2] = $AsyncRetVal; //@line 11058
   sp = STACKTOP; //@line 11059
   return;
  }
  ___async_unwind = 0; //@line 11062
  HEAP32[$ReallocAsyncCtx6 >> 2] = 497; //@line 11063
  $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 11064
  HEAP32[$12 >> 2] = $AsyncRetVal; //@line 11065
  sp = STACKTOP; //@line 11066
  return;
 }
}
function __ZN7LoRaPHY25setup_public_network_modeEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $14 = 0, $17 = 0, $2 = 0, $3 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 22609
 $2 = $0 + 4 | 0; //@line 22610
 $3 = HEAP32[$2 >> 2] | 0; //@line 22611
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 72 >> 2] | 0; //@line 22614
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 22615
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 22616
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 543; //@line 22619
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 22621
  HEAP8[$AsyncCtx + 8 >> 0] = $1 & 1; //@line 22624
  sp = STACKTOP; //@line 22625
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 22628
 $9 = HEAP32[$2 >> 2] | 0; //@line 22629
 $12 = HEAP32[(HEAP32[$9 >> 2] | 0) + 48 >> 2] | 0; //@line 22632
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 22633
 FUNCTION_TABLE_vii[$12 & 31]($9, $1); //@line 22634
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 544; //@line 22637
  HEAP32[$AsyncCtx2 + 4 >> 2] = $2; //@line 22639
  sp = STACKTOP; //@line 22640
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 22643
 $14 = HEAP32[$2 >> 2] | 0; //@line 22644
 $17 = HEAP32[(HEAP32[$14 >> 2] | 0) + 76 >> 2] | 0; //@line 22647
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 22648
 FUNCTION_TABLE_vi[$17 & 1023]($14); //@line 22649
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 545; //@line 22652
  sp = STACKTOP; //@line 22653
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 22656
  return;
 }
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_108($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 27763
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27767
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27769
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27771
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27773
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27775
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 27777
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 27780
 _equeue_event_delay($4, $6); //@line 27781
 _equeue_event_dtor($4, 281); //@line 27782
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 27783
 $16 = _equeue_post($8, 282, $4) | 0; //@line 27784
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 562; //@line 27787
  $17 = $ReallocAsyncCtx4 + 4 | 0; //@line 27788
  HEAP32[$17 >> 2] = $10; //@line 27789
  $18 = $ReallocAsyncCtx4 + 8 | 0; //@line 27790
  HEAP32[$18 >> 2] = $12; //@line 27791
  $19 = $ReallocAsyncCtx4 + 12 | 0; //@line 27792
  HEAP32[$19 >> 2] = $14; //@line 27793
  sp = STACKTOP; //@line 27794
  return;
 }
 HEAP32[___async_retval >> 2] = $16; //@line 27798
 ___async_unwind = 0; //@line 27799
 HEAP32[$ReallocAsyncCtx4 >> 2] = 562; //@line 27800
 $17 = $ReallocAsyncCtx4 + 4 | 0; //@line 27801
 HEAP32[$17 >> 2] = $10; //@line 27802
 $18 = $ReallocAsyncCtx4 + 8 | 0; //@line 27803
 HEAP32[$18 >> 2] = $12; //@line 27804
 $19 = $ReallocAsyncCtx4 + 12 | 0; //@line 27805
 HEAP32[$19 >> 2] = $14; //@line 27806
 sp = STACKTOP; //@line 27807
 return;
}
function _mbedtls_cipher_cmac_starts__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0, $27 = 0, $4 = 0, $9 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32075
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32077
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 32079
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 32082
  $27 = ___async_retval; //@line 32083
  HEAP32[$27 >> 2] = $$0; //@line 32084
  return;
 }
 switch (HEAP32[HEAP32[$2 >> 2] >> 2] | 0) {
 case 36:
 case 4:
 case 3:
 case 2:
  {
   break;
  }
 default:
  {
   $$0 = -24832; //@line 32094
   $27 = ___async_retval; //@line 32095
   HEAP32[$27 >> 2] = $$0; //@line 32096
   return;
  }
 }
 $9 = _calloc(1, 36) | 0; //@line 32100
 if (!$9) {
  $$0 = -24960; //@line 32103
  $27 = ___async_retval; //@line 32104
  HEAP32[$27 >> 2] = $$0; //@line 32105
  return;
 }
 HEAP32[$4 + 64 >> 2] = $9; //@line 32109
 HEAP8[$9 >> 0] = 0; //@line 32111
 HEAP8[$9 + 1 >> 0] = 0; //@line 32113
 HEAP8[$9 + 2 >> 0] = 0; //@line 32115
 HEAP8[$9 + 3 >> 0] = 0; //@line 32117
 HEAP8[$9 + 4 >> 0] = 0; //@line 32119
 HEAP8[$9 + 5 >> 0] = 0; //@line 32121
 HEAP8[$9 + 6 >> 0] = 0; //@line 32123
 HEAP8[$9 + 7 >> 0] = 0; //@line 32125
 HEAP8[$9 + 8 >> 0] = 0; //@line 32127
 HEAP8[$9 + 9 >> 0] = 0; //@line 32129
 HEAP8[$9 + 10 >> 0] = 0; //@line 32131
 HEAP8[$9 + 11 >> 0] = 0; //@line 32133
 HEAP8[$9 + 12 >> 0] = 0; //@line 32135
 HEAP8[$9 + 13 >> 0] = 0; //@line 32137
 HEAP8[$9 + 14 >> 0] = 0; //@line 32139
 HEAP8[$9 + 15 >> 0] = 0; //@line 32140
 $$0 = 0; //@line 32141
 $27 = ___async_retval; //@line 32142
 HEAP32[$27 >> 2] = $$0; //@line 32143
 return;
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $4 = 0, $6 = 0, $8 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28881
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28883
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28885
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28887
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28889
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28891
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28893
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28895
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 28897
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 28899
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 28901
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 28903
 $25 = $4 + 1216 | 0; //@line 28904
 HEAP32[$25 >> 2] = 0; //@line 28905
 HEAP32[$25 + 4 >> 2] = 0; //@line 28905
 HEAP32[$25 + 8 >> 2] = 0; //@line 28905
 HEAP32[$25 + 12 >> 2] = 0; //@line 28905
 HEAP8[$4 + 1232 >> 0] = 1; //@line 28907
 HEAP32[$2 >> 2] = 672; //@line 28908
 HEAP32[$4 + 668 >> 2] = $6; //@line 28910
 HEAP32[$4 + 672 >> 2] = $8; //@line 28912
 HEAP32[$4 + 652 >> 2] = $10; //@line 28914
 HEAP32[$4 + 656 >> 2] = $12; //@line 28916
 HEAP32[$4 + 664 >> 2] = $14; //@line 28918
 HEAP32[$4 + 660 >> 2] = $16; //@line 28920
 HEAP32[$4 + 676 >> 2] = $18; //@line 28922
 HEAP32[$4 + 680 >> 2] = $20; //@line 28924
 HEAP32[$4 + 684 >> 2] = $22; //@line 28926
 HEAP32[$4 + 784 >> 2] = 0; //@line 28928
 if (($18 | 0) == -1) {
  return;
 }
 _emscripten_asm_const_iii(2, HEAP32[$24 >> 2] | 0, 1) | 0; //@line 28934
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_421($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 30941
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30943
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30945
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 30947
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30949
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30951
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 30953
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 30955
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 30957
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 30959
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 30961
 $21 = HEAP32[$2 >> 2] | 0; //@line 30962
 $24 = HEAP32[(HEAP32[$21 >> 2] | 0) + 32 >> 2] | 0; //@line 30965
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(40) | 0; //@line 30966
 FUNCTION_TABLE_vii[$24 & 31]($21, $4); //@line 30967
 if (!___async) {
  ___async_unwind = 0; //@line 30970
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 518; //@line 30972
 HEAP8[$ReallocAsyncCtx5 + 4 >> 0] = $6; //@line 30974
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $8; //@line 30976
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $2; //@line 30978
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $10; //@line 30980
 HEAP8[$ReallocAsyncCtx5 + 20 >> 0] = $12; //@line 30982
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $14; //@line 30984
 HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $16; //@line 30986
 HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $18; //@line 30988
 HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $20; //@line 30990
 sp = STACKTOP; //@line 30991
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16542
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16546
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16548
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16550
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16552
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16554
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16556
 $16 = HEAP8[$0 + 32 >> 0] & 1; //@line 16559
 $21 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 16560
 if ($21 >>> 0 < $4 >>> 0) {
  if (!(HEAP8[$6 >> 0] | 0)) {
   if ((HEAP32[$8 >> 2] | 0) != 1) {
    $ReallocAsyncCtx = _emscripten_realloc_async_context(36) | 0; //@line 16569
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($21, $10, $12, $14, $16); //@line 16570
    if (!___async) {
     ___async_unwind = 0; //@line 16573
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 702; //@line 16575
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $21; //@line 16577
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 16579
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 16581
    HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 16583
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 16585
    HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 16587
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 16589
    HEAP8[$ReallocAsyncCtx + 32 >> 0] = $16 & 1; //@line 16592
    sp = STACKTOP; //@line 16593
    return;
   }
  }
 }
 return;
}
function __ZN7LoRaMac14handle_rx_doneEPhtsa__async_cb_335($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 12890
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12894
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 12896
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 12897
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 12901
  $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 12902
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 12903
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 293; //@line 12906
   $10 = $ReallocAsyncCtx + 4 | 0; //@line 12907
   HEAP32[$10 >> 2] = $4; //@line 12908
   $11 = $ReallocAsyncCtx + 8 | 0; //@line 12909
   HEAP32[$11 >> 2] = $AsyncRetVal; //@line 12910
   sp = STACKTOP; //@line 12911
   return;
  }
  ___async_unwind = 0; //@line 12914
  HEAP32[$ReallocAsyncCtx >> 2] = 293; //@line 12915
  $10 = $ReallocAsyncCtx + 4 | 0; //@line 12916
  HEAP32[$10 >> 2] = $4; //@line 12917
  $11 = $ReallocAsyncCtx + 8 | 0; //@line 12918
  HEAP32[$11 >> 2] = $AsyncRetVal; //@line 12919
  sp = STACKTOP; //@line 12920
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 12927
 _mbed_assert_internal(12025, 12034, 141); //@line 12928
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 294; //@line 12931
  sp = STACKTOP; //@line 12932
  return;
 }
 ___async_unwind = 0; //@line 12935
 HEAP32[$ReallocAsyncCtx3 >> 2] = 294; //@line 12936
 sp = STACKTOP; //@line 12937
 return;
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_416($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 30610
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30612
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30614
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30616
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30618
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30620
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30622
 $13 = $2 + 356 | 0; //@line 30623
 $14 = HEAP32[$13 >> 2] | 0; //@line 30624
 $16 = $12 + 12 | 0; //@line 30626
 HEAP32[$12 >> 2] = 426; //@line 30627
 HEAP32[$12 + 4 >> 2] = 0; //@line 30629
 HEAP32[$12 + 8 >> 2] = $2; //@line 30631
 HEAP32[$16 >> 2] = 836; //@line 30632
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(36) | 0; //@line 30633
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($14, $2 + 996 | 0, $12); //@line 30634
 if (!___async) {
  ___async_unwind = 0; //@line 30637
 }
 HEAP32[$ReallocAsyncCtx10 >> 2] = 427; //@line 30639
 HEAP32[$ReallocAsyncCtx10 + 4 >> 2] = $13; //@line 30641
 HEAP32[$ReallocAsyncCtx10 + 8 >> 2] = $2; //@line 30643
 HEAP32[$ReallocAsyncCtx10 + 12 >> 2] = $4; //@line 30645
 HEAP32[$ReallocAsyncCtx10 + 16 >> 2] = $6; //@line 30647
 HEAP32[$ReallocAsyncCtx10 + 20 >> 2] = $8; //@line 30649
 HEAP32[$ReallocAsyncCtx10 + 24 >> 2] = $10; //@line 30651
 HEAP32[$ReallocAsyncCtx10 + 28 >> 2] = $12; //@line 30653
 HEAP32[$ReallocAsyncCtx10 + 32 >> 2] = $16; //@line 30655
 sp = STACKTOP; //@line 30656
 return;
}
function __ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 28780
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28782
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28784
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28786
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28788
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28790
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28792
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28794
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28796
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 28798
 HEAP8[$2 + 1097 >> 0] = HEAP8[___async_retval >> 0] | 0; //@line 28802
 HEAP8[$4 >> 0] = 0; //@line 28803
 HEAP8[$6 >> 0] = HEAP8[$2 + 1156 >> 0] << 7; //@line 28807
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 28808
 $24 = __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt($2, $8, $10, 0, 0, 0) | 0; //@line 28809
 if (!___async) {
  HEAP32[___async_retval >> 2] = $24; //@line 28813
  ___async_unwind = 0; //@line 28814
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 389; //@line 28816
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 28818
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $12; //@line 28820
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $14; //@line 28822
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $16; //@line 28824
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $18; //@line 28826
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $6; //@line 28828
 HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $4; //@line 28830
 sp = STACKTOP; //@line 28831
 return;
}
function __ZN4mbed5Timer7read_msEv($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $16 = 0, $2 = 0, $21 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1919
 $2 = $0 + 16 | 0; //@line 1921
 $4 = HEAP32[$2 >> 2] | 0; //@line 1923
 $7 = HEAP32[$2 + 4 >> 2] | 0; //@line 1926
 if (!(HEAP32[$0 >> 2] | 0)) {
  $29 = 0; //@line 1930
  $30 = 0; //@line 1930
  $31 = _i64Add($29 | 0, $30 | 0, $4 | 0, $7 | 0) | 0; //@line 1931
  $32 = tempRet0; //@line 1932
  $33 = ___udivdi3($31 | 0, $32 | 0, 1e3, 0) | 0; //@line 1933
  $34 = tempRet0; //@line 1934
  return $33 | 0; //@line 1935
 }
 $11 = HEAP32[$0 + 24 >> 2] | 0; //@line 1938
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 1939
 $12 = _ticker_read_us($11) | 0; //@line 1940
 $13 = tempRet0; //@line 1941
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 96; //@line 1944
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 1946
  $16 = $AsyncCtx + 8 | 0; //@line 1948
  HEAP32[$16 >> 2] = $4; //@line 1950
  HEAP32[$16 + 4 >> 2] = $7; //@line 1953
  sp = STACKTOP; //@line 1954
  return 0; //@line 1955
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 1957
 $21 = $0 + 8 | 0; //@line 1959
 $27 = _i64Subtract($12 | 0, $13 | 0, HEAP32[$21 >> 2] | 0, HEAP32[$21 + 4 >> 2] | 0) | 0; //@line 1965
 $29 = $27; //@line 1967
 $30 = tempRet0; //@line 1967
 $31 = _i64Add($29 | 0, $30 | 0, $4 | 0, $7 | 0) | 0; //@line 1968
 $32 = tempRet0; //@line 1969
 $33 = ___udivdi3($31 | 0, $32 | 0, 1e3, 0) | 0; //@line 1970
 $34 = tempRet0; //@line 1971
 return $33 | 0; //@line 1972
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_210($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $18 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 2658
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2662
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2664
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2666
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 2668
 if ((HEAP16[$0 + 4 >> 1] | 0) < -1) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 2671
  $12 = __ZN4mbed5Timer7read_msEv($4) | 0; //@line 2672
  if (!___async) {
   HEAP32[___async_retval >> 2] = $12; //@line 2676
   ___async_unwind = 0; //@line 2677
  }
  HEAP32[$ReallocAsyncCtx6 >> 2] = 56; //@line 2679
  HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $6; //@line 2681
  HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $8; //@line 2683
  HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $4; //@line 2685
  HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $10; //@line 2687
  sp = STACKTOP; //@line 2688
  return;
 } else {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 2691
  $18 = __ZN4mbed5Timer7read_msEv($4) | 0; //@line 2692
  if (!___async) {
   HEAP32[___async_retval >> 2] = $18; //@line 2696
   ___async_unwind = 0; //@line 2697
  }
  HEAP32[$ReallocAsyncCtx5 >> 2] = 57; //@line 2699
  HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $6; //@line 2701
  HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 2703
  HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $8; //@line 2705
  HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $10; //@line 2707
  sp = STACKTOP; //@line 2708
  return;
 }
}
function _fflush__async_cb($0) {
 $0 = $0 | 0;
 var $$02327$reg2mem$0 = 0, $$1 = 0, $$reg2mem$0 = 0, $17 = 0, $20 = 0, $ReallocAsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 32397
 $$02327$reg2mem$0 = HEAP32[$0 + 12 >> 2] | 0; //@line 32407
 $$1 = HEAP32[___async_retval >> 2] | HEAP32[$0 + 4 >> 2]; //@line 32407
 $$reg2mem$0 = HEAP32[$0 + 8 >> 2] | 0; //@line 32407
 while (1) {
  if ($$reg2mem$0 | 0) {
   ___unlockfile($$02327$reg2mem$0); //@line 32411
  }
  $$02327$reg2mem$0 = HEAP32[$$02327$reg2mem$0 + 56 >> 2] | 0; //@line 32414
  if (!$$02327$reg2mem$0) {
   label = 12; //@line 32417
   break;
  }
  if ((HEAP32[$$02327$reg2mem$0 + 76 >> 2] | 0) > -1) {
   $20 = ___lockfile($$02327$reg2mem$0) | 0; //@line 32425
  } else {
   $20 = 0; //@line 32427
  }
  if ((HEAP32[$$02327$reg2mem$0 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327$reg2mem$0 + 28 >> 2] | 0) >>> 0) {
   break;
  } else {
   $$reg2mem$0 = $20; //@line 32437
  }
 }
 if ((label | 0) == 12) {
  ___ofl_unlock(); //@line 32441
  HEAP32[___async_retval >> 2] = $$1; //@line 32443
  return;
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 32446
 $17 = ___fflush_unlocked($$02327$reg2mem$0) | 0; //@line 32447
 if (!___async) {
  HEAP32[___async_retval >> 2] = $17; //@line 32451
  ___async_unwind = 0; //@line 32452
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 670; //@line 32454
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $$1; //@line 32456
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $20; //@line 32458
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $$02327$reg2mem$0; //@line 32460
 sp = STACKTOP; //@line 32461
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_238($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4375
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4377
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4379
 $5 = $2 + 1892 | 0; //@line 4380
 $6 = HEAP32[$5 >> 2] | 0; //@line 4381
 if (!$6) {
  return;
 }
 $10 = HEAP32[$2 + 2288 >> 2] | 0; //@line 4388
 $12 = HEAP32[$6 + 4 >> 2] | 0; //@line 4390
 $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 4391
 FUNCTION_TABLE_vii[$12 & 31]($4, $2 + 1880 | 0); //@line 4392
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 150; //@line 4395
  $13 = $ReallocAsyncCtx + 4 | 0; //@line 4396
  HEAP32[$13 >> 2] = $5; //@line 4397
  $14 = $ReallocAsyncCtx + 8 | 0; //@line 4398
  HEAP32[$14 >> 2] = $4; //@line 4399
  $15 = $ReallocAsyncCtx + 12 | 0; //@line 4400
  HEAP32[$15 >> 2] = $10; //@line 4401
  $16 = $ReallocAsyncCtx + 16 | 0; //@line 4402
  HEAP32[$16 >> 2] = $4; //@line 4403
  sp = STACKTOP; //@line 4404
  return;
 }
 ___async_unwind = 0; //@line 4407
 HEAP32[$ReallocAsyncCtx >> 2] = 150; //@line 4408
 $13 = $ReallocAsyncCtx + 4 | 0; //@line 4409
 HEAP32[$13 >> 2] = $5; //@line 4410
 $14 = $ReallocAsyncCtx + 8 | 0; //@line 4411
 HEAP32[$14 >> 2] = $4; //@line 4412
 $15 = $ReallocAsyncCtx + 12 | 0; //@line 4413
 HEAP32[$15 >> 2] = $10; //@line 4414
 $16 = $ReallocAsyncCtx + 16 | 0; //@line 4415
 HEAP32[$16 >> 2] = $4; //@line 4416
 sp = STACKTOP; //@line 4417
 return;
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_110($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 27838
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27842
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27844
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 27846
 $8 = (HEAP32[$0 + 4 >> 2] | 0) + 16 | 0; //@line 27847
 HEAP32[$8 >> 2] = $AsyncRetVal; //@line 27848
 $9 = HEAP32[$4 >> 2] | 0; //@line 27849
 if ($9 | 0) {
  $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 27853
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 27854
  FUNCTION_TABLE_vi[$12 & 1023]($6); //@line 27855
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 563; //@line 27858
   $13 = $ReallocAsyncCtx3 + 4 | 0; //@line 27859
   HEAP32[$13 >> 2] = $8; //@line 27860
   sp = STACKTOP; //@line 27861
   return;
  }
  ___async_unwind = 0; //@line 27864
  HEAP32[$ReallocAsyncCtx3 >> 2] = 563; //@line 27865
  $13 = $ReallocAsyncCtx3 + 4 | 0; //@line 27866
  HEAP32[$13 >> 2] = $8; //@line 27867
  sp = STACKTOP; //@line 27868
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 27875
 _mbed_assert_internal(12547, 12565, 57); //@line 27876
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 564; //@line 27879
  sp = STACKTOP; //@line 27880
  return;
 }
 ___async_unwind = 0; //@line 27883
 HEAP32[$ReallocAsyncCtx5 >> 2] = 564; //@line 27884
 sp = STACKTOP; //@line 27885
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_424($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $18 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 31195
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31205
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 31207
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 31209
 $18 = HEAP32[$10 >> 2] | 0; //@line 31216
 $21 = HEAP32[(HEAP32[$18 >> 2] | 0) + 44 >> 2] | 0; //@line 31219
 $24 = (HEAPU8[((HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 17 >> 0] | 0) == 0 ? HEAP32[$0 + 8 >> 2] | 0 : HEAP32[$0 + 12 >> 2] | 0) + (HEAP32[$0 + 16 >> 2] | 0) >> 0] | 0) + 13 & 255; //@line 31222
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 31223
 FUNCTION_TABLE_viii[$21 & 7]($18, 1, $24); //@line 31224
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 521; //@line 31227
  $25 = $ReallocAsyncCtx8 + 4 | 0; //@line 31228
  HEAP32[$25 >> 2] = $10; //@line 31229
  $26 = $ReallocAsyncCtx8 + 8 | 0; //@line 31230
  HEAP8[$26 >> 0] = $12; //@line 31231
  $27 = $ReallocAsyncCtx8 + 12 | 0; //@line 31232
  HEAP32[$27 >> 2] = $14; //@line 31233
  sp = STACKTOP; //@line 31234
  return;
 }
 ___async_unwind = 0; //@line 31237
 HEAP32[$ReallocAsyncCtx8 >> 2] = 521; //@line 31238
 $25 = $ReallocAsyncCtx8 + 4 | 0; //@line 31239
 HEAP32[$25 >> 2] = $10; //@line 31240
 $26 = $ReallocAsyncCtx8 + 8 | 0; //@line 31241
 HEAP8[$26 >> 0] = $12; //@line 31242
 $27 = $ReallocAsyncCtx8 + 12 | 0; //@line 31243
 HEAP32[$27 >> 2] = $14; //@line 31244
 sp = STACKTOP; //@line 31245
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_423($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $18 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 31138
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31148
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 31150
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 31152
 $18 = HEAP32[$10 >> 2] | 0; //@line 31159
 $21 = HEAP32[(HEAP32[$18 >> 2] | 0) + 44 >> 2] | 0; //@line 31162
 $24 = (HEAPU8[((HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 17 >> 0] | 0) == 0 ? HEAP32[$0 + 8 >> 2] | 0 : HEAP32[$0 + 12 >> 2] | 0) + (HEAP32[$0 + 16 >> 2] | 0) >> 0] | 0) + 13 & 255; //@line 31165
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 31166
 FUNCTION_TABLE_viii[$21 & 7]($18, 0, $24); //@line 31167
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 521; //@line 31170
  $25 = $ReallocAsyncCtx8 + 4 | 0; //@line 31171
  HEAP32[$25 >> 2] = $10; //@line 31172
  $26 = $ReallocAsyncCtx8 + 8 | 0; //@line 31173
  HEAP8[$26 >> 0] = $12; //@line 31174
  $27 = $ReallocAsyncCtx8 + 12 | 0; //@line 31175
  HEAP32[$27 >> 2] = $14; //@line 31176
  sp = STACKTOP; //@line 31177
  return;
 }
 ___async_unwind = 0; //@line 31180
 HEAP32[$ReallocAsyncCtx8 >> 2] = 521; //@line 31181
 $25 = $ReallocAsyncCtx8 + 4 | 0; //@line 31182
 HEAP32[$25 >> 2] = $10; //@line 31183
 $26 = $ReallocAsyncCtx8 + 8 | 0; //@line 31184
 HEAP8[$26 >> 0] = $12; //@line 31185
 $27 = $ReallocAsyncCtx8 + 12 | 0; //@line 31186
 HEAP32[$27 >> 2] = $14; //@line 31187
 sp = STACKTOP; //@line 31188
 return;
}
function __ZN7LoRaPHY15setup_rx_windowEbj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 19748
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19750
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19755
 $7 = HEAP32[$2 >> 2] | 0; //@line 19756
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 28 >> 2] | 0; //@line 19759
 if (HEAP8[$0 + 8 >> 0] & 1) {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 19761
  FUNCTION_TABLE_vii[$10 & 31]($7, 0); //@line 19762
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 548; //@line 19765
   $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 19766
   HEAP32[$12 >> 2] = $2; //@line 19767
   sp = STACKTOP; //@line 19768
   return;
  }
  ___async_unwind = 0; //@line 19771
  HEAP32[$ReallocAsyncCtx3 >> 2] = 548; //@line 19772
  $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 19773
  HEAP32[$12 >> 2] = $2; //@line 19774
  sp = STACKTOP; //@line 19775
  return;
 } else {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 19778
  FUNCTION_TABLE_vii[$10 & 31]($7, $6); //@line 19779
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 547; //@line 19782
   $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 19783
   HEAP32[$11 >> 2] = $2; //@line 19784
   sp = STACKTOP; //@line 19785
   return;
  }
  ___async_unwind = 0; //@line 19788
  HEAP32[$ReallocAsyncCtx2 >> 2] = 547; //@line 19789
  $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 19790
  HEAP32[$11 >> 2] = $2; //@line 19791
  sp = STACKTOP; //@line 19792
  return;
 }
}
function __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 27445
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27447
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27449
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27451
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27453
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27455
 $$pre = HEAP32[$2 >> 2] | 0; //@line 27456
 if (!$$pre) {
  HEAP32[$4 >> 2] = 0; //@line 27459
  _gpio_irq_set($10 + 28 | 0, 2, 1); //@line 27461
  return;
 }
 $13 = HEAP32[$$pre + 4 >> 2] | 0; //@line 27465
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 27466
 FUNCTION_TABLE_vii[$13 & 31]($6, $8); //@line 27467
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 84; //@line 27470
  $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 27471
  HEAP32[$14 >> 2] = $2; //@line 27472
  $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 27473
  HEAP32[$15 >> 2] = $4; //@line 27474
  $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 27475
  HEAP32[$16 >> 2] = $10; //@line 27476
  sp = STACKTOP; //@line 27477
  return;
 }
 ___async_unwind = 0; //@line 27480
 HEAP32[$ReallocAsyncCtx2 >> 2] = 84; //@line 27481
 $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 27482
 HEAP32[$14 >> 2] = $2; //@line 27483
 $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 27484
 HEAP32[$15 >> 2] = $4; //@line 27485
 $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 27486
 HEAP32[$16 >> 2] = $10; //@line 27487
 sp = STACKTOP; //@line 27488
 return;
}
function __ZN7LoRaPHY20put_radio_to_standbyEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $12 = 0, $15 = 0, $2 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 22556
 $1 = $0 + 4 | 0; //@line 22557
 $2 = HEAP32[$1 >> 2] | 0; //@line 22558
 $5 = HEAP32[(HEAP32[$2 >> 2] | 0) + 72 >> 2] | 0; //@line 22561
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 22562
 FUNCTION_TABLE_vi[$5 & 1023]($2); //@line 22563
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 540; //@line 22566
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 22568
  sp = STACKTOP; //@line 22569
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 22572
 $7 = HEAP32[$1 >> 2] | 0; //@line 22573
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 12 >> 2] | 0; //@line 22576
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 22577
 FUNCTION_TABLE_vi[$10 & 1023]($7); //@line 22578
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 541; //@line 22581
  HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 22583
  sp = STACKTOP; //@line 22584
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 22587
 $12 = HEAP32[$1 >> 2] | 0; //@line 22588
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 76 >> 2] | 0; //@line 22591
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 22592
 FUNCTION_TABLE_vi[$15 & 1023]($12); //@line 22593
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 542; //@line 22596
  sp = STACKTOP; //@line 22597
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 22600
  return;
 }
}
function __ZN7LoRaPHY18put_radio_to_sleepEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $12 = 0, $15 = 0, $2 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 22504
 $1 = $0 + 4 | 0; //@line 22505
 $2 = HEAP32[$1 >> 2] | 0; //@line 22506
 $5 = HEAP32[(HEAP32[$2 >> 2] | 0) + 72 >> 2] | 0; //@line 22509
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 22510
 FUNCTION_TABLE_vi[$5 & 1023]($2); //@line 22511
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 537; //@line 22514
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 22516
  sp = STACKTOP; //@line 22517
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 22520
 $7 = HEAP32[$1 >> 2] | 0; //@line 22521
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0; //@line 22524
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 22525
 FUNCTION_TABLE_vi[$10 & 1023]($7); //@line 22526
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 538; //@line 22529
  HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 22531
  sp = STACKTOP; //@line 22532
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 22535
 $12 = HEAP32[$1 >> 2] | 0; //@line 22536
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 76 >> 2] | 0; //@line 22539
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 22540
 FUNCTION_TABLE_vi[$15 & 1023]($12); //@line 22541
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 539; //@line 22544
  sp = STACKTOP; //@line 22545
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 22548
  return;
 }
}
function ___fflush_unlocked__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2471
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2473
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2475
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2477
 do {
  if (!(HEAP32[$2 >> 2] | 0)) {
   $$0 = -1; //@line 2482
  } else {
   $9 = $4 + 4 | 0; //@line 2484
   $10 = HEAP32[$9 >> 2] | 0; //@line 2485
   $11 = $4 + 8 | 0; //@line 2486
   $12 = HEAP32[$11 >> 2] | 0; //@line 2487
   if ($10 >>> 0 >= $12 >>> 0) {
    HEAP32[$4 + 16 >> 2] = 0; //@line 2491
    HEAP32[$6 >> 2] = 0; //@line 2492
    HEAP32[$2 >> 2] = 0; //@line 2493
    HEAP32[$11 >> 2] = 0; //@line 2494
    HEAP32[$9 >> 2] = 0; //@line 2495
    $$0 = 0; //@line 2496
    break;
   }
   $18 = HEAP32[$4 + 40 >> 2] | 0; //@line 2503
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 2504
   FUNCTION_TABLE_iiii[$18 & 15]($4, $10 - $12 | 0, 1) | 0; //@line 2505
   if (!___async) {
    ___async_unwind = 0; //@line 2508
   }
   HEAP32[$ReallocAsyncCtx2 >> 2] = 672; //@line 2510
   HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $4; //@line 2512
   HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 2514
   HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 2516
   HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $11; //@line 2518
   HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $9; //@line 2520
   sp = STACKTOP; //@line 2521
   return;
  }
 } while (0);
 HEAP32[___async_retval >> 2] = $$0; //@line 2526
 return;
}
function __Z22compute_join_frame_micPKhtS0_Pj__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 12615
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12617
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 12619
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 12622
  $5 = _mbedtls_cipher_cmac_finish(21244, 22552) | 0; //@line 12623
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 501; //@line 12626
   $6 = $ReallocAsyncCtx2 + 4 | 0; //@line 12627
   HEAP32[$6 >> 2] = $2; //@line 12628
   sp = STACKTOP; //@line 12629
   return;
  }
  HEAP32[___async_retval >> 2] = $5; //@line 12633
  ___async_unwind = 0; //@line 12634
  HEAP32[$ReallocAsyncCtx2 >> 2] = 501; //@line 12635
  $6 = $ReallocAsyncCtx2 + 4 | 0; //@line 12636
  HEAP32[$6 >> 2] = $2; //@line 12637
  sp = STACKTOP; //@line 12638
  return;
 } else {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 12641
  _mbedtls_cipher_free(21244); //@line 12642
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 502; //@line 12645
   $8 = $ReallocAsyncCtx5 + 4 | 0; //@line 12646
   HEAP32[$8 >> 2] = $AsyncRetVal; //@line 12647
   sp = STACKTOP; //@line 12648
   return;
  }
  ___async_unwind = 0; //@line 12651
  HEAP32[$ReallocAsyncCtx5 >> 2] = 502; //@line 12652
  $8 = $ReallocAsyncCtx5 + 4 | 0; //@line 12653
  HEAP32[$8 >> 2] = $AsyncRetVal; //@line 12654
  sp = STACKTOP; //@line 12655
  return;
 }
}
function __Z11compute_micPKhtS0_jhjPj__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 10975
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10977
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 10979
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 10982
  $5 = _mbedtls_cipher_cmac_finish(21244, 22552) | 0; //@line 10983
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 496; //@line 10986
   $6 = $ReallocAsyncCtx3 + 4 | 0; //@line 10987
   HEAP32[$6 >> 2] = $2; //@line 10988
   sp = STACKTOP; //@line 10989
   return;
  }
  HEAP32[___async_retval >> 2] = $5; //@line 10993
  ___async_unwind = 0; //@line 10994
  HEAP32[$ReallocAsyncCtx3 >> 2] = 496; //@line 10995
  $6 = $ReallocAsyncCtx3 + 4 | 0; //@line 10996
  HEAP32[$6 >> 2] = $2; //@line 10997
  sp = STACKTOP; //@line 10998
  return;
 } else {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 11001
  _mbedtls_cipher_free(21244); //@line 11002
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 497; //@line 11005
   $8 = $ReallocAsyncCtx6 + 4 | 0; //@line 11006
   HEAP32[$8 >> 2] = $AsyncRetVal; //@line 11007
   sp = STACKTOP; //@line 11008
   return;
  }
  ___async_unwind = 0; //@line 11011
  HEAP32[$ReallocAsyncCtx6 >> 2] = 497; //@line 11012
  $8 = $ReallocAsyncCtx6 + 4 | 0; //@line 11013
  HEAP32[$8 >> 2] = $AsyncRetVal; //@line 11014
  sp = STACKTOP; //@line 11015
  return;
 }
}
function _equeue_create($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$032$i = 0, $$033$i = 0, $2 = 0, $20 = 0, $22 = 0, $26 = 0, $29 = 0, $5 = 0, $6 = 0;
 $2 = _malloc($1) | 0; //@line 2115
 if (!$2) {
  $$0 = -1; //@line 2118
  return $$0 | 0; //@line 2119
 }
 HEAP32[$0 + 12 >> 2] = $2; //@line 2122
 $5 = $0 + 20 | 0; //@line 2123
 HEAP32[$5 >> 2] = 0; //@line 2124
 $6 = $0 + 16 | 0; //@line 2125
 HEAP32[$6 >> 2] = 0; //@line 2126
 if ($1 | 0) {
  $$033$i = $1; //@line 2129
  $22 = 0; //@line 2129
  do {
   $22 = $22 + 1 | 0; //@line 2131
   $$033$i = $$033$i >>> 1; //@line 2132
  } while (($$033$i | 0) != 0);
  HEAP32[$6 >> 2] = $22; //@line 2140
 }
 HEAP32[$0 + 24 >> 2] = 0; //@line 2143
 HEAP32[$0 + 28 >> 2] = $1; //@line 2145
 HEAP32[$0 + 32 >> 2] = $2; //@line 2147
 HEAP32[$0 >> 2] = 0; //@line 2148
 HEAP32[$0 + 4 >> 2] = _equeue_tick() | 0; //@line 2151
 HEAP8[$0 + 9 >> 0] = 0; //@line 2153
 HEAP8[$0 + 8 >> 0] = 0; //@line 2155
 HEAP8[$0 + 36 >> 0] = 0; //@line 2157
 HEAP32[$0 + 40 >> 2] = 0; //@line 2159
 HEAP32[$0 + 44 >> 2] = 0; //@line 2161
 $20 = _equeue_sema_create($0 + 48 | 0) | 0; //@line 2163
 if (($20 | 0) < 0) {
  $$032$i = $20; //@line 2166
 } else {
  $26 = _equeue_mutex_create($0 + 128 | 0) | 0; //@line 2169
  if (($26 | 0) < 0) {
   $$032$i = $26; //@line 2172
  } else {
   $29 = _equeue_mutex_create($0 + 156 | 0) | 0; //@line 2175
   $$032$i = ($29 | 0) < 0 ? $29 : 0; //@line 2178
  }
 }
 HEAP32[$5 >> 2] = $2; //@line 2181
 $$0 = $$032$i; //@line 2182
 return $$0 | 0; //@line 2183
}
function __ZN12LoRaWANStack24enable_adaptive_datarateEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $2 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 7499
 STACKTOP = STACKTOP + 32 | 0; //@line 7500
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 7500
 $2 = sp + 12 | 0; //@line 7503
 if (!(HEAP32[$0 + 1876 >> 2] | 0)) {
  _printf(11245, sp) | 0; //@line 7508
  _printf(11858, sp + 8 | 0) | 0; //@line 7509
  $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7510
  _putchar(10) | 0; //@line 7511
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 242; //@line 7514
   sp = STACKTOP; //@line 7515
   STACKTOP = sp; //@line 7516
   return 0; //@line 7516
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7518
  $$0 = -1012; //@line 7519
  STACKTOP = sp; //@line 7520
  return $$0 | 0; //@line 7520
 } else {
  HEAP32[$2 >> 2] = 2; //@line 7523
  HEAP8[$2 + 4 >> 0] = $1 & 1; //@line 7525
  $AsyncCtx5 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7527
  $9 = __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($0 + 4 | 0, $2) | 0; //@line 7528
  if (___async) {
   HEAP32[$AsyncCtx5 >> 2] = 243; //@line 7531
   HEAP32[$AsyncCtx5 + 4 >> 2] = $2; //@line 7533
   sp = STACKTOP; //@line 7534
   STACKTOP = sp; //@line 7535
   return 0; //@line 7535
  }
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 7537
  $$0 = $9; //@line 7538
  STACKTOP = sp; //@line 7539
  return $$0 | 0; //@line 7539
 }
 return 0; //@line 7541
}
function __ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_435($0) {
 $0 = $0 | 0;
 var $12 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 32236
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32238
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32240
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32242
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32244
 $9 = HEAP32[$2 >> 2] | 0; //@line 32245
 $12 = HEAP32[(HEAP32[$9 >> 2] | 0) + 24 >> 2] | 0; //@line 32248
 $15 = (__ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0) + 10 | 0; //@line 32251
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 32252
 FUNCTION_TABLE_iiii[$12 & 15]($9, $6, $15) | 0; //@line 32253
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 419; //@line 32256
  $16 = $ReallocAsyncCtx + 4 | 0; //@line 32257
  HEAP32[$16 >> 2] = $8; //@line 32258
  $17 = $ReallocAsyncCtx + 8 | 0; //@line 32259
  HEAP32[$17 >> 2] = $4; //@line 32260
  $18 = $ReallocAsyncCtx + 12 | 0; //@line 32261
  HEAP32[$18 >> 2] = $2; //@line 32262
  sp = STACKTOP; //@line 32263
  return;
 }
 ___async_unwind = 0; //@line 32266
 HEAP32[$ReallocAsyncCtx >> 2] = 419; //@line 32267
 $16 = $ReallocAsyncCtx + 4 | 0; //@line 32268
 HEAP32[$16 >> 2] = $8; //@line 32269
 $17 = $ReallocAsyncCtx + 8 | 0; //@line 32270
 HEAP32[$17 >> 2] = $4; //@line 32271
 $18 = $ReallocAsyncCtx + 12 | 0; //@line 32272
 HEAP32[$18 >> 2] = $2; //@line 32273
 sp = STACKTOP; //@line 32274
 return;
}
function __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 31935
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31937
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31939
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31941
 $7 = $2 + 12 | 0; //@line 31942
 $8 = HEAP32[$7 >> 2] | 0; //@line 31943
 if (!$8) {
  HEAP32[$4 >> 2] = 0; //@line 31946
  HEAP32[$6 + 16 >> 2] = 0; //@line 31948
  return;
 }
 $11 = HEAP32[$8 + 4 >> 2] | 0; //@line 31952
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 31953
 FUNCTION_TABLE_vii[$11 & 31]($6, $2); //@line 31954
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 559; //@line 31957
  $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 31958
  HEAP32[$12 >> 2] = $7; //@line 31959
  $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 31960
  HEAP32[$13 >> 2] = $4; //@line 31961
  $14 = $ReallocAsyncCtx2 + 12 | 0; //@line 31962
  HEAP32[$14 >> 2] = $6; //@line 31963
  sp = STACKTOP; //@line 31964
  return;
 }
 ___async_unwind = 0; //@line 31967
 HEAP32[$ReallocAsyncCtx2 >> 2] = 559; //@line 31968
 $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 31969
 HEAP32[$12 >> 2] = $7; //@line 31970
 $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 31971
 HEAP32[$13 >> 2] = $4; //@line 31972
 $14 = $ReallocAsyncCtx2 + 12 | 0; //@line 31973
 HEAP32[$14 >> 2] = $6; //@line 31974
 sp = STACKTOP; //@line 31975
 return;
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 29845
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29847
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29849
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29851
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29853
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29855
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29857
 $13 = HEAP32[$2 >> 2] | 0; //@line 29858
 $15 = $6 + 12 | 0; //@line 29860
 HEAP32[$6 >> 2] = 429; //@line 29861
 HEAP32[$6 + 4 >> 2] = 0; //@line 29863
 HEAP32[$6 + 8 >> 2] = $4; //@line 29865
 HEAP32[$15 >> 2] = 836; //@line 29866
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(32) | 0; //@line 29867
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($13, $4 + 1016 | 0, $6); //@line 29868
 if (!___async) {
  ___async_unwind = 0; //@line 29871
 }
 HEAP32[$ReallocAsyncCtx9 >> 2] = 430; //@line 29873
 HEAP32[$ReallocAsyncCtx9 + 4 >> 2] = $2; //@line 29875
 HEAP32[$ReallocAsyncCtx9 + 8 >> 2] = $4; //@line 29877
 HEAP32[$ReallocAsyncCtx9 + 12 >> 2] = $12; //@line 29879
 HEAP32[$ReallocAsyncCtx9 + 16 >> 2] = $6; //@line 29881
 HEAP32[$ReallocAsyncCtx9 + 20 >> 2] = $8; //@line 29883
 HEAP32[$ReallocAsyncCtx9 + 24 >> 2] = $10; //@line 29885
 HEAP32[$ReallocAsyncCtx9 + 28 >> 2] = $15; //@line 29887
 sp = STACKTOP; //@line 29888
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_164($0) {
 $0 = $0 | 0;
 var $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 32024
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32026
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32028
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32030
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 32032
 if (!$AsyncRetVal) {
  HEAP8[___async_retval >> 0] = 0; //@line 32037
  return;
 }
 dest = $2 + 4 | 0; //@line 32041
 stop = dest + 52 | 0; //@line 32041
 do {
  HEAP32[dest >> 2] = 0; //@line 32041
  dest = dest + 4 | 0; //@line 32041
 } while ((dest | 0) < (stop | 0));
 HEAP32[$2 >> 2] = $AsyncRetVal; //@line 32042
 HEAP32[$2 + 8 >> 2] = $4; //@line 32044
 HEAP32[$2 + 12 >> 2] = -1; //@line 32046
 HEAP32[$2 + 48 >> 2] = 1; //@line 32048
 $15 = HEAP32[(HEAP32[$AsyncRetVal >> 2] | 0) + 28 >> 2] | 0; //@line 32051
 $16 = HEAP32[$6 >> 2] | 0; //@line 32052
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 32053
 FUNCTION_TABLE_viiii[$15 & 7]($AsyncRetVal, $2, $16, 1); //@line 32054
 if (!___async) {
  ___async_unwind = 0; //@line 32057
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 687; //@line 32059
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 32061
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $6; //@line 32063
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $2; //@line 32065
 sp = STACKTOP; //@line 32066
 return;
}
function _wcrtomb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0;
 do {
  if (!$0) {
   $$0 = 1; //@line 14144
  } else {
   if ($1 >>> 0 < 128) {
    HEAP8[$0 >> 0] = $1; //@line 14149
    $$0 = 1; //@line 14150
    break;
   }
   if (!(HEAP32[HEAP32[(___pthread_self_910() | 0) + 188 >> 2] >> 2] | 0)) {
    if (($1 & -128 | 0) == 57216) {
     HEAP8[$0 >> 0] = $1; //@line 14163
     $$0 = 1; //@line 14164
     break;
    } else {
     HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 14168
     $$0 = -1; //@line 14169
     break;
    }
   }
   if ($1 >>> 0 < 2048) {
    HEAP8[$0 >> 0] = $1 >>> 6 | 192; //@line 14179
    HEAP8[$0 + 1 >> 0] = $1 & 63 | 128; //@line 14183
    $$0 = 2; //@line 14184
    break;
   }
   if ($1 >>> 0 < 55296 | ($1 & -8192 | 0) == 57344) {
    HEAP8[$0 >> 0] = $1 >>> 12 | 224; //@line 14196
    HEAP8[$0 + 1 >> 0] = $1 >>> 6 & 63 | 128; //@line 14202
    HEAP8[$0 + 2 >> 0] = $1 & 63 | 128; //@line 14206
    $$0 = 3; //@line 14207
    break;
   }
   if (($1 + -65536 | 0) >>> 0 < 1048576) {
    HEAP8[$0 >> 0] = $1 >>> 18 | 240; //@line 14217
    HEAP8[$0 + 1 >> 0] = $1 >>> 12 & 63 | 128; //@line 14223
    HEAP8[$0 + 2 >> 0] = $1 >>> 6 & 63 | 128; //@line 14229
    HEAP8[$0 + 3 >> 0] = $1 & 63 | 128; //@line 14233
    $$0 = 4; //@line 14234
    break;
   } else {
    HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 14238
    $$0 = -1; //@line 14239
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 14244
}
function __ZN18LoRaMacChannelPlan21remove_single_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $13 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 16852
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
  $$0 = -1002; //@line 16856
  return $$0 | 0; //@line 16857
 }
 if (((__ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0) & 255) <= ($1 & 255)) {
  $$0 = -1003; //@line 16863
  return $$0 | 0; //@line 16864
 }
 $7 = HEAP32[$0 >> 2] | 0; //@line 16866
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 64 >> 2] | 0; //@line 16869
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 16870
 $11 = FUNCTION_TABLE_iii[$10 & 31]($7, $1) | 0; //@line 16871
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 485; //@line 16874
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 16876
  sp = STACKTOP; //@line 16877
  return 0; //@line 16878
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 16880
 if (!$11) {
  $$0 = -1003; //@line 16882
  return $$0 | 0; //@line 16883
 }
 $13 = HEAP32[$0 >> 2] | 0; //@line 16885
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 16886
 __ZN7LoRaPHY18put_radio_to_sleepEv($13); //@line 16887
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 486; //@line 16890
  sp = STACKTOP; //@line 16891
  return 0; //@line 16892
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 16894
 $$0 = 0; //@line 16895
 return $$0 | 0; //@line 16896
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_184($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 33018
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33022
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 33024
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 33025
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 33029
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 33030
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 33031
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 132; //@line 33034
   $10 = $ReallocAsyncCtx6 + 4 | 0; //@line 33035
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 33036
   sp = STACKTOP; //@line 33037
   return;
  }
  ___async_unwind = 0; //@line 33040
  HEAP32[$ReallocAsyncCtx6 >> 2] = 132; //@line 33041
  $10 = $ReallocAsyncCtx6 + 4 | 0; //@line 33042
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 33043
  sp = STACKTOP; //@line 33044
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(4) | 0; //@line 33051
 _mbed_assert_internal(12025, 11293, 813); //@line 33052
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 133; //@line 33055
  sp = STACKTOP; //@line 33056
  return;
 }
 ___async_unwind = 0; //@line 33059
 HEAP32[$ReallocAsyncCtx12 >> 2] = 133; //@line 33060
 sp = STACKTOP; //@line 33061
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_139($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx18 = 0, sp = 0;
 sp = STACKTOP; //@line 29921
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29923
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29925
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29927
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29929
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29931
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29933
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29935
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 29937
 HEAP32[$6 >> 2] = 4; //@line 29938
 HEAP32[$8 >> 2] = HEAP32[$2 + 1944 >> 2]; //@line 29941
 $ReallocAsyncCtx18 = _emscripten_realloc_async_context(36) | 0; //@line 29942
 __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($10, $12) | 0; //@line 29943
 if (!___async) {
  ___async_unwind = 0; //@line 29946
 }
 HEAP32[$ReallocAsyncCtx18 >> 2] = 173; //@line 29948
 HEAP32[$ReallocAsyncCtx18 + 4 >> 2] = $2; //@line 29950
 HEAP32[$ReallocAsyncCtx18 + 8 >> 2] = $4; //@line 29952
 HEAP32[$ReallocAsyncCtx18 + 12 >> 2] = $6; //@line 29954
 HEAP32[$ReallocAsyncCtx18 + 16 >> 2] = $8; //@line 29956
 HEAP32[$ReallocAsyncCtx18 + 20 >> 2] = $10; //@line 29958
 HEAP32[$ReallocAsyncCtx18 + 24 >> 2] = $12; //@line 29960
 HEAP32[$ReallocAsyncCtx18 + 28 >> 2] = $14; //@line 29962
 HEAP32[$ReallocAsyncCtx18 + 32 >> 2] = $16; //@line 29964
 sp = STACKTOP; //@line 29965
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_138($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx17 = 0, sp = 0;
 sp = STACKTOP; //@line 29870
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29872
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29874
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29876
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29878
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29880
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29882
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29884
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 29886
 HEAP32[$6 >> 2] = 5; //@line 29887
 HEAP32[$8 >> 2] = HEAP32[$2 + 1948 >> 2]; //@line 29890
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(36) | 0; //@line 29891
 __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($10, $12) | 0; //@line 29892
 if (!___async) {
  ___async_unwind = 0; //@line 29895
 }
 HEAP32[$ReallocAsyncCtx17 >> 2] = 174; //@line 29897
 HEAP32[$ReallocAsyncCtx17 + 4 >> 2] = $2; //@line 29899
 HEAP32[$ReallocAsyncCtx17 + 8 >> 2] = $4; //@line 29901
 HEAP32[$ReallocAsyncCtx17 + 12 >> 2] = $6; //@line 29903
 HEAP32[$ReallocAsyncCtx17 + 16 >> 2] = $8; //@line 29905
 HEAP32[$ReallocAsyncCtx17 + 20 >> 2] = $10; //@line 29907
 HEAP32[$ReallocAsyncCtx17 + 24 >> 2] = $12; //@line 29909
 HEAP32[$ReallocAsyncCtx17 + 28 >> 2] = $14; //@line 29911
 HEAP32[$ReallocAsyncCtx17 + 32 >> 2] = $16; //@line 29913
 sp = STACKTOP; //@line 29914
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_2($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 16678
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16682
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16684
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16686
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16688
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16690
 $14 = HEAP8[$0 + 28 >> 0] & 1; //@line 16693
 $17 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 16694
 if ($17 >>> 0 < $4 >>> 0) {
  if (!(HEAP8[$6 >> 0] | 0)) {
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 16700
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($17, $8, $10, $12, $14); //@line 16701
   if (!___async) {
    ___async_unwind = 0; //@line 16704
   }
   HEAP32[$ReallocAsyncCtx3 >> 2] = 700; //@line 16706
   HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $17; //@line 16708
   HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 16710
   HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 16712
   HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 16714
   HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 16716
   HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 16718
   HEAP8[$ReallocAsyncCtx3 + 28 >> 0] = $14 & 1; //@line 16721
   sp = STACKTOP; //@line 16722
   return;
  }
 }
 return;
}
function __ZN12LoRaWANStackC2Ev__async_cb_167($0) {
 $0 = $0 | 0;
 var $$pre106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 32307
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32309
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32311
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32313
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32315
 $$pre106 = HEAP32[$2 >> 2] | 0; //@line 32316
 if (!$$pre106) {
  HEAP32[$4 >> 2] = 0; //@line 32319
  return;
 }
 $11 = HEAP32[$$pre106 + 4 >> 2] | 0; //@line 32323
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 32324
 FUNCTION_TABLE_vii[$11 & 31]($6, $8); //@line 32325
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 117; //@line 32328
  $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 32329
  HEAP32[$12 >> 2] = $2; //@line 32330
  $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 32331
  HEAP32[$13 >> 2] = $4; //@line 32332
  $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 32333
  HEAP32[$14 >> 2] = $8; //@line 32334
  sp = STACKTOP; //@line 32335
  return;
 }
 ___async_unwind = 0; //@line 32338
 HEAP32[$ReallocAsyncCtx3 >> 2] = 117; //@line 32339
 $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 32340
 HEAP32[$12 >> 2] = $2; //@line 32341
 $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 32342
 HEAP32[$13 >> 2] = $4; //@line 32343
 $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 32344
 HEAP32[$14 >> 2] = $8; //@line 32345
 sp = STACKTOP; //@line 32346
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_220($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 3137
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3141
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 3143
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 3144
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 3148
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 3149
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 3150
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 137; //@line 3153
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 3154
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 3155
   sp = STACKTOP; //@line 3156
   return;
  }
  ___async_unwind = 0; //@line 3159
  HEAP32[$ReallocAsyncCtx2 >> 2] = 137; //@line 3160
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 3161
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 3162
  sp = STACKTOP; //@line 3163
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(4) | 0; //@line 3170
 _mbed_assert_internal(12025, 11293, 833); //@line 3171
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 138; //@line 3174
  sp = STACKTOP; //@line 3175
  return;
 }
 ___async_unwind = 0; //@line 3178
 HEAP32[$ReallocAsyncCtx10 >> 2] = 138; //@line 3179
 sp = STACKTOP; //@line 3180
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_242($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 4495
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4499
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 4501
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 4502
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 4506
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 4507
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 4508
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 152; //@line 4511
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 4512
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 4513
   sp = STACKTOP; //@line 4514
   return;
  }
  ___async_unwind = 0; //@line 4517
  HEAP32[$ReallocAsyncCtx2 >> 2] = 152; //@line 4518
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 4519
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 4520
  sp = STACKTOP; //@line 4521
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(4) | 0; //@line 4528
 _mbed_assert_internal(12025, 11293, 709); //@line 4529
 if (___async) {
  HEAP32[$ReallocAsyncCtx13 >> 2] = 153; //@line 4532
  sp = STACKTOP; //@line 4533
  return;
 }
 ___async_unwind = 0; //@line 4536
 HEAP32[$ReallocAsyncCtx13 >> 2] = 153; //@line 4537
 sp = STACKTOP; //@line 4538
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_241($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 4446
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4450
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 4452
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 4453
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 4457
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 4458
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 4459
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 156; //@line 4462
   $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 4463
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 4464
   sp = STACKTOP; //@line 4465
   return;
  }
  ___async_unwind = 0; //@line 4468
  HEAP32[$ReallocAsyncCtx4 >> 2] = 156; //@line 4469
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 4470
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 4471
  sp = STACKTOP; //@line 4472
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(4) | 0; //@line 4479
 _mbed_assert_internal(12025, 11293, 731); //@line 4480
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 157; //@line 4483
  sp = STACKTOP; //@line 4484
  return;
 }
 ___async_unwind = 0; //@line 4487
 HEAP32[$ReallocAsyncCtx12 >> 2] = 157; //@line 4488
 sp = STACKTOP; //@line 4489
 return;
}
function __ZN12LoRaWANStack22set_link_check_requestEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 7836
 STACKTOP = STACKTOP + 32 | 0; //@line 7837
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 7837
 $1 = sp + 12 | 0; //@line 7840
 if (!(HEAP32[$0 + 1908 >> 2] | 0)) {
  _printf(11245, sp) | 0; //@line 7845
  _printf(11968, sp + 8 | 0) | 0; //@line 7846
  $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7847
  _putchar(10) | 0; //@line 7848
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 251; //@line 7851
   sp = STACKTOP; //@line 7852
   STACKTOP = sp; //@line 7853
   return 0; //@line 7853
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7855
  $$0 = -1003; //@line 7856
  STACKTOP = sp; //@line 7857
  return $$0 | 0; //@line 7857
 } else {
  HEAP32[$1 >> 2] = 1; //@line 7859
  $AsyncCtx5 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7861
  $6 = __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t($0 + 4 | 0, $1) | 0; //@line 7862
  if (___async) {
   HEAP32[$AsyncCtx5 >> 2] = 252; //@line 7865
   HEAP32[$AsyncCtx5 + 4 >> 2] = $1; //@line 7867
   sp = STACKTOP; //@line 7868
   STACKTOP = sp; //@line 7869
   return 0; //@line 7869
  }
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 7871
  $$0 = $6; //@line 7872
  STACKTOP = sp; //@line 7873
  return $$0 | 0; //@line 7873
 }
 return 0; //@line 7875
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_236($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 4308
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4312
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4314
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4316
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 4318
 $11 = $4 + 12 | 0; //@line 4320
 HEAP32[$11 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 4321
 $13 = HEAP8[$6 + 12 >> 0] | 0; //@line 4323
 $15 = HEAP8[$6 + 13 >> 0] | 0; //@line 4325
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(12) | 0; //@line 4326
 $16 = __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1_($8, $4, $13, $15) | 0; //@line 4327
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 155; //@line 4330
  $17 = $ReallocAsyncCtx8 + 4 | 0; //@line 4331
  HEAP32[$17 >> 2] = $11; //@line 4332
  $18 = $ReallocAsyncCtx8 + 8 | 0; //@line 4333
  HEAP32[$18 >> 2] = $10; //@line 4334
  sp = STACKTOP; //@line 4335
  return;
 }
 HEAP32[___async_retval >> 2] = $16; //@line 4339
 ___async_unwind = 0; //@line 4340
 HEAP32[$ReallocAsyncCtx8 >> 2] = 155; //@line 4341
 $17 = $ReallocAsyncCtx8 + 4 | 0; //@line 4342
 HEAP32[$17 >> 2] = $11; //@line 4343
 $18 = $ReallocAsyncCtx8 + 8 | 0; //@line 4344
 HEAP32[$18 >> 2] = $10; //@line 4345
 sp = STACKTOP; //@line 4346
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 6175
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6177
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6179
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6181
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6183
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 6185
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) + 4 >> 2] = 0; //@line 6189
 HEAP8[$4 >> 0] = 1; //@line 6190
 $14 = $2 + 944 | 0; //@line 6191
 HEAP8[$14 >> 0] = HEAP8[$14 >> 0] | 32; //@line 6194
 $17 = HEAP32[$6 >> 2] | 0; //@line 6195
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 6197
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($17, $2 + 996 | 0, 1); //@line 6198
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 331; //@line 6201
  $19 = $ReallocAsyncCtx5 + 4 | 0; //@line 6202
  HEAP32[$19 >> 2] = $8; //@line 6203
  $20 = $ReallocAsyncCtx5 + 8 | 0; //@line 6204
  HEAP32[$20 >> 2] = $10; //@line 6205
  sp = STACKTOP; //@line 6206
  return;
 }
 ___async_unwind = 0; //@line 6209
 HEAP32[$ReallocAsyncCtx5 >> 2] = 331; //@line 6210
 $19 = $ReallocAsyncCtx5 + 4 | 0; //@line 6211
 HEAP32[$19 >> 2] = $8; //@line 6212
 $20 = $ReallocAsyncCtx5 + 8 | 0; //@line 6213
 HEAP32[$20 >> 2] = $10; //@line 6214
 sp = STACKTOP; //@line 6215
 return;
}
function __ZN7LoRaMac34handle_mac_state_check_timer_eventEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 11758
 STACKTOP = STACKTOP + 16 | 0; //@line 11759
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 11759
 $$byval_copy = sp + 8 | 0; //@line 11760
 $1 = sp; //@line 11761
 $3 = HEAP32[$0 + 1328 >> 2] | 0; //@line 11763
 HEAP32[$1 >> 2] = 365; //@line 11764
 HEAP32[$1 + 4 >> 2] = 0; //@line 11766
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 11767
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 11768
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 11768
 $4 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 11769
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 366; //@line 11772
  sp = STACKTOP; //@line 11773
  STACKTOP = sp; //@line 11774
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 11776
 if ($4 | 0) {
  STACKTOP = sp; //@line 11779
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 11781
 _mbed_assert_internal(12025, 12034, 187); //@line 11782
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 367; //@line 11785
  sp = STACKTOP; //@line 11786
  STACKTOP = sp; //@line 11787
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 11789
 STACKTOP = sp; //@line 11790
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_131($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $16 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 29462
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29464
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29466
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29468
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29470
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29472
 $11 = $2 + 1892 | 0; //@line 29473
 $12 = HEAP32[$11 >> 2] | 0; //@line 29474
 if (!$12) {
  HEAP32[$6 >> 2] = 6; //@line 29477
  HEAP32[___async_retval >> 2] = $4; //@line 29479
  return;
 }
 $16 = HEAP32[$2 + 2288 >> 2] | 0; //@line 29484
 $18 = HEAP32[$12 + 4 >> 2] | 0; //@line 29486
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(32) | 0; //@line 29487
 FUNCTION_TABLE_vii[$18 & 31]($8, $2 + 1880 | 0); //@line 29488
 if (!___async) {
  ___async_unwind = 0; //@line 29491
 }
 HEAP32[$ReallocAsyncCtx9 >> 2] = 188; //@line 29493
 HEAP32[$ReallocAsyncCtx9 + 4 >> 2] = $11; //@line 29495
 HEAP32[$ReallocAsyncCtx9 + 8 >> 2] = $8; //@line 29497
 HEAP32[$ReallocAsyncCtx9 + 12 >> 2] = $16; //@line 29499
 HEAP32[$ReallocAsyncCtx9 + 16 >> 2] = $8; //@line 29501
 HEAP32[$ReallocAsyncCtx9 + 20 >> 2] = $4; //@line 29503
 HEAP32[$ReallocAsyncCtx9 + 24 >> 2] = $6; //@line 29505
 HEAP32[$ReallocAsyncCtx9 + 28 >> 2] = $10; //@line 29507
 sp = STACKTOP; //@line 29508
 return;
}
function __ZN7LoRaMac29handle_delayed_tx_timer_eventEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 14199
 STACKTOP = STACKTOP + 16 | 0; //@line 14200
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14200
 $$byval_copy = sp + 8 | 0; //@line 14201
 $1 = sp; //@line 14202
 $3 = HEAP32[$0 + 1328 >> 2] | 0; //@line 14204
 HEAP32[$1 >> 2] = 369; //@line 14205
 HEAP32[$1 + 4 >> 2] = 0; //@line 14207
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 14208
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 14209
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 14209
 $4 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 14210
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 410; //@line 14213
  sp = STACKTOP; //@line 14214
  STACKTOP = sp; //@line 14215
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 14217
 if ($4 | 0) {
  STACKTOP = sp; //@line 14220
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 14222
 _mbed_assert_internal(12025, 12034, 194); //@line 14223
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 411; //@line 14226
  sp = STACKTOP; //@line 14227
  STACKTOP = sp; //@line 14228
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 14230
 STACKTOP = sp; //@line 14231
 return;
}
function __ZN7LoRaMac22handle_rx2_timer_eventEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 14418
 STACKTOP = STACKTOP + 16 | 0; //@line 14419
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14419
 $$byval_copy = sp + 8 | 0; //@line 14420
 $1 = sp; //@line 14421
 $3 = HEAP32[$0 + 1328 >> 2] | 0; //@line 14423
 HEAP32[$1 >> 2] = 273; //@line 14424
 HEAP32[$1 + 4 >> 2] = 0; //@line 14426
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 14427
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 14428
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 14428
 $4 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 14429
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 421; //@line 14432
  sp = STACKTOP; //@line 14433
  STACKTOP = sp; //@line 14434
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 14436
 if ($4 | 0) {
  STACKTOP = sp; //@line 14439
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 14441
 _mbed_assert_internal(12025, 12034, 215); //@line 14442
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 422; //@line 14445
  sp = STACKTOP; //@line 14446
  STACKTOP = sp; //@line 14447
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 14449
 STACKTOP = sp; //@line 14450
 return;
}
function __ZN7LoRaMac22handle_rx1_timer_eventEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 14273
 STACKTOP = STACKTOP + 16 | 0; //@line 14274
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14274
 $$byval_copy = sp + 8 | 0; //@line 14275
 $1 = sp; //@line 14276
 $3 = HEAP32[$0 + 1328 >> 2] | 0; //@line 14278
 HEAP32[$1 >> 2] = 414; //@line 14279
 HEAP32[$1 + 4 >> 2] = 0; //@line 14281
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 14282
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 14283
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 14283
 $4 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 14284
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 415; //@line 14287
  sp = STACKTOP; //@line 14288
  STACKTOP = sp; //@line 14289
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 14291
 if ($4 | 0) {
  STACKTOP = sp; //@line 14294
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 14296
 _mbed_assert_internal(12025, 12034, 208); //@line 14297
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 416; //@line 14300
  sp = STACKTOP; //@line 14301
  STACKTOP = sp; //@line 14302
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 14304
 STACKTOP = sp; //@line 14305
 return;
}
function __ZN7LoRaMac18handle_ack_timeoutEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 14236
 STACKTOP = STACKTOP + 16 | 0; //@line 14237
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14237
 $$byval_copy = sp + 8 | 0; //@line 14238
 $1 = sp; //@line 14239
 $3 = HEAP32[$0 + 1328 >> 2] | 0; //@line 14241
 HEAP32[$1 >> 2] = 297; //@line 14242
 HEAP32[$1 + 4 >> 2] = 0; //@line 14244
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 14245
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 14246
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 14246
 $4 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 14247
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 412; //@line 14250
  sp = STACKTOP; //@line 14251
  STACKTOP = sp; //@line 14252
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 14254
 if ($4 | 0) {
  STACKTOP = sp; //@line 14257
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 14259
 _mbed_assert_internal(12025, 12034, 201); //@line 14260
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 413; //@line 14263
  sp = STACKTOP; //@line 14264
  STACKTOP = sp; //@line 14265
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 14267
 STACKTOP = sp; //@line 14268
 return;
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_414($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 30519
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30521
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30523
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30525
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30527
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30529
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30531
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 30533
 _srand(HEAP32[___async_retval >> 2] | 0); //@line 30536
 HEAP8[$2 + 368 >> 0] = 1; //@line 30538
 $17 = HEAP32[$14 >> 2] | 0; //@line 30539
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(32) | 0; //@line 30540
 __ZN7LoRaPHY25setup_public_network_modeEb($17, 1); //@line 30541
 if (!___async) {
  ___async_unwind = 0; //@line 30544
 }
 HEAP32[$ReallocAsyncCtx12 >> 2] = 424; //@line 30546
 HEAP32[$ReallocAsyncCtx12 + 4 >> 2] = $2; //@line 30548
 HEAP32[$ReallocAsyncCtx12 + 8 >> 2] = $4; //@line 30550
 HEAP32[$ReallocAsyncCtx12 + 12 >> 2] = $6; //@line 30552
 HEAP32[$ReallocAsyncCtx12 + 16 >> 2] = $8; //@line 30554
 HEAP32[$ReallocAsyncCtx12 + 20 >> 2] = $10; //@line 30556
 HEAP32[$ReallocAsyncCtx12 + 24 >> 2] = $12; //@line 30558
 HEAP32[$ReallocAsyncCtx12 + 28 >> 2] = $14; //@line 30560
 sp = STACKTOP; //@line 30561
 return;
}
function __ZN7LoRaMac17handle_tx_timeoutEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 11636
 STACKTOP = STACKTOP + 16 | 0; //@line 11637
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 11637
 $$byval_copy = sp + 8 | 0; //@line 11638
 $1 = sp; //@line 11639
 $3 = HEAP32[$0 + 1328 >> 2] | 0; //@line 11641
 HEAP32[$1 >> 2] = 359; //@line 11642
 HEAP32[$1 + 4 >> 2] = 0; //@line 11644
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 11645
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 11646
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 11646
 $4 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 11647
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 360; //@line 11650
  sp = STACKTOP; //@line 11651
  STACKTOP = sp; //@line 11652
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 11654
 if ($4 | 0) {
  STACKTOP = sp; //@line 11657
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 11659
 _mbed_assert_internal(12025, 12034, 162); //@line 11660
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 361; //@line 11663
  sp = STACKTOP; //@line 11664
  STACKTOP = sp; //@line 11665
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 11667
 STACKTOP = sp; //@line 11668
 return;
}
function __ZN7LoRaMac17handle_rx_timeoutEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 11442
 STACKTOP = STACKTOP + 16 | 0; //@line 11443
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 11443
 $$byval_copy = sp + 8 | 0; //@line 11444
 $1 = sp; //@line 11445
 $3 = HEAP32[$0 + 1328 >> 2] | 0; //@line 11447
 HEAP32[$1 >> 2] = 352; //@line 11448
 HEAP32[$1 + 4 >> 2] = 0; //@line 11450
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 11451
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 11452
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 11452
 $4 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 11453
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 353; //@line 11456
  sp = STACKTOP; //@line 11457
  STACKTOP = sp; //@line 11458
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 11460
 if ($4 | 0) {
  STACKTOP = sp; //@line 11463
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 11465
 _mbed_assert_internal(12025, 12034, 155); //@line 11466
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 354; //@line 11469
  sp = STACKTOP; //@line 11470
  STACKTOP = sp; //@line 11471
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 11473
 STACKTOP = sp; //@line 11474
 return;
}
function __ZN14lorawan_timersD2Ev__async_cb_371($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $2 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 15696
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15698
 $4 = HEAP32[$2 + 48 >> 2] | 0; //@line 15700
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 15705
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 15706
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 36 | 0); //@line 15707
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 266; //@line 15710
   $9 = $ReallocAsyncCtx4 + 4 | 0; //@line 15711
   HEAP32[$9 >> 2] = $2; //@line 15712
   sp = STACKTOP; //@line 15713
   return;
  }
  ___async_unwind = 0; //@line 15716
  HEAP32[$ReallocAsyncCtx4 >> 2] = 266; //@line 15717
  $9 = $ReallocAsyncCtx4 + 4 | 0; //@line 15718
  HEAP32[$9 >> 2] = $2; //@line 15719
  sp = STACKTOP; //@line 15720
  return;
 }
 $11 = HEAP32[$2 + 28 >> 2] | 0; //@line 15724
 if (!$11) {
  return;
 }
 $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 15731
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 15732
 FUNCTION_TABLE_vi[$15 & 1023]($2 + 16 | 0); //@line 15733
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 267; //@line 15736
  sp = STACKTOP; //@line 15737
  return;
 }
 ___async_unwind = 0; //@line 15740
 HEAP32[$ReallocAsyncCtx5 >> 2] = 267; //@line 15741
 sp = STACKTOP; //@line 15742
 return;
}
function __ZN7LoRaMac15handle_rx_errorEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 11256
 STACKTOP = STACKTOP + 16 | 0; //@line 11257
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 11257
 $$byval_copy = sp + 8 | 0; //@line 11258
 $1 = sp; //@line 11259
 $3 = HEAP32[$0 + 1328 >> 2] | 0; //@line 11261
 HEAP32[$1 >> 2] = 345; //@line 11262
 HEAP32[$1 + 4 >> 2] = 0; //@line 11264
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 11265
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 11266
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 11266
 $4 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 11267
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 346; //@line 11270
  sp = STACKTOP; //@line 11271
  STACKTOP = sp; //@line 11272
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 11274
 if ($4 | 0) {
  STACKTOP = sp; //@line 11277
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 11279
 _mbed_assert_internal(12025, 12034, 148); //@line 11280
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 347; //@line 11283
  sp = STACKTOP; //@line 11284
  STACKTOP = sp; //@line 11285
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 11287
 STACKTOP = sp; //@line 11288
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_137($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx16 = 0, sp = 0;
 sp = STACKTOP; //@line 29821
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29823
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29825
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29827
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29829
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29831
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29833
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29835
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 29837
 HEAP32[$6 >> 2] = 6; //@line 29838
 HEAP32[$8 >> 2] = HEAP32[$2 + 1952 >> 2]; //@line 29841
 $ReallocAsyncCtx16 = _emscripten_realloc_async_context(32) | 0; //@line 29842
 __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($10, $12) | 0; //@line 29843
 if (!___async) {
  ___async_unwind = 0; //@line 29846
 }
 HEAP32[$ReallocAsyncCtx16 >> 2] = 175; //@line 29848
 HEAP32[$ReallocAsyncCtx16 + 4 >> 2] = $6; //@line 29850
 HEAP32[$ReallocAsyncCtx16 + 8 >> 2] = $16; //@line 29852
 HEAP32[$ReallocAsyncCtx16 + 12 >> 2] = $10; //@line 29854
 HEAP32[$ReallocAsyncCtx16 + 16 >> 2] = $12; //@line 29856
 HEAP32[$ReallocAsyncCtx16 + 20 >> 2] = $2; //@line 29858
 HEAP32[$ReallocAsyncCtx16 + 24 >> 2] = $14; //@line 29860
 HEAP32[$ReallocAsyncCtx16 + 28 >> 2] = $4; //@line 29862
 sp = STACKTOP; //@line 29863
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 6253
 $2 = HEAP8[$0 + 16 >> 0] | 0; //@line 6255
 $4 = HEAP8[$0 + 17 >> 0] | 0; //@line 6257
 $5 = $0 + 12 | 0; //@line 6258
 $6 = HEAP32[$5 >> 2] | 0; //@line 6259
 do {
  if (!$6) {
   $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 6263
   _mbed_assert_internal(13874, 13879, 1677); //@line 6264
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 209; //@line 6267
    HEAP32[$AsyncCtx2 + 4 >> 2] = $5; //@line 6269
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 6271
    HEAP8[$AsyncCtx2 + 12 >> 0] = $2; //@line 6273
    HEAP8[$AsyncCtx2 + 13 >> 0] = $4; //@line 6275
    sp = STACKTOP; //@line 6276
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6279
    $13 = HEAP32[$5 >> 2] | 0; //@line 6281
    break;
   }
  } else {
   $13 = $6; //@line 6285
  }
 } while (0);
 $12 = HEAP32[$13 >> 2] | 0; //@line 6288
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6289
 FUNCTION_TABLE_viii[$12 & 7]($0, $2, $4); //@line 6290
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 210; //@line 6293
  sp = STACKTOP; //@line 6294
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6297
  return;
 }
}
function __ZN12radio_eventsD2Ev__async_cb_352($0) {
 $0 = $0 | 0;
 var $11 = 0, $14 = 0, $2 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 14290
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14292
 $4 = HEAP32[$2 + 28 >> 2] | 0; //@line 14294
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 14299
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 14300
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 16 | 0); //@line 14301
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 261; //@line 14304
   $9 = $ReallocAsyncCtx6 + 4 | 0; //@line 14305
   HEAP32[$9 >> 2] = $2; //@line 14306
   sp = STACKTOP; //@line 14307
   return;
  }
  ___async_unwind = 0; //@line 14310
  HEAP32[$ReallocAsyncCtx6 >> 2] = 261; //@line 14311
  $9 = $ReallocAsyncCtx6 + 4 | 0; //@line 14312
  HEAP32[$9 >> 2] = $2; //@line 14313
  sp = STACKTOP; //@line 14314
  return;
 }
 $11 = HEAP32[$2 + 12 >> 2] | 0; //@line 14318
 if (!$11) {
  return;
 }
 $14 = HEAP32[$11 + 8 >> 2] | 0; //@line 14324
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 14325
 FUNCTION_TABLE_vi[$14 & 1023]($2); //@line 14326
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 262; //@line 14329
  sp = STACKTOP; //@line 14330
  return;
 }
 ___async_unwind = 0; //@line 14333
 HEAP32[$ReallocAsyncCtx7 >> 2] = 262; //@line 14334
 sp = STACKTOP; //@line 14335
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_186($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 52
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 56
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 58
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 59
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 63
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 64
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 65
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 124; //@line 68
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 69
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 70
   sp = STACKTOP; //@line 71
   return;
  }
  ___async_unwind = 0; //@line 74
  HEAP32[$ReallocAsyncCtx2 >> 2] = 124; //@line 75
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 76
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 77
  sp = STACKTOP; //@line 78
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(4) | 0; //@line 85
 _mbed_assert_internal(12025, 11293, 778); //@line 86
 if (___async) {
  HEAP32[$ReallocAsyncCtx14 >> 2] = 125; //@line 89
  sp = STACKTOP; //@line 90
  return;
 }
 ___async_unwind = 0; //@line 93
 HEAP32[$ReallocAsyncCtx14 >> 2] = 125; //@line 94
 sp = STACKTOP; //@line 95
 return;
}
function __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_315($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 11449
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11451
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11453
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11455
 if (HEAP32[___async_retval >> 2] | 0) {
  HEAP32[$4 + 364 >> 2] = 2; //@line 11461
  HEAP32[___async_retval >> 2] = $6; //@line 11463
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 11466
 _mbed_assert_internal(12025, 12034, 215); //@line 11467
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 462; //@line 11470
  $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 11471
  HEAP32[$9 >> 2] = $2; //@line 11472
  $10 = $ReallocAsyncCtx3 + 8 | 0; //@line 11473
  HEAP32[$10 >> 2] = $4; //@line 11474
  $11 = $ReallocAsyncCtx3 + 12 | 0; //@line 11475
  HEAP32[$11 >> 2] = $6; //@line 11476
  sp = STACKTOP; //@line 11477
  return;
 }
 ___async_unwind = 0; //@line 11480
 HEAP32[$ReallocAsyncCtx3 >> 2] = 462; //@line 11481
 $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 11482
 HEAP32[$9 >> 2] = $2; //@line 11483
 $10 = $ReallocAsyncCtx3 + 8 | 0; //@line 11484
 HEAP32[$10 >> 2] = $4; //@line 11485
 $11 = $ReallocAsyncCtx3 + 12 | 0; //@line 11486
 HEAP32[$11 >> 2] = $6; //@line 11487
 sp = STACKTOP; //@line 11488
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_185($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 3
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 9
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 10
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 14
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 15
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 16
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 128; //@line 19
   $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 20
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 21
   sp = STACKTOP; //@line 22
   return;
  }
  ___async_unwind = 0; //@line 25
  HEAP32[$ReallocAsyncCtx4 >> 2] = 128; //@line 26
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 27
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 28
  sp = STACKTOP; //@line 29
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(4) | 0; //@line 36
 _mbed_assert_internal(12025, 11293, 789); //@line 37
 if (___async) {
  HEAP32[$ReallocAsyncCtx13 >> 2] = 129; //@line 40
  sp = STACKTOP; //@line 41
  return;
 }
 ___async_unwind = 0; //@line 44
 HEAP32[$ReallocAsyncCtx13 >> 2] = 129; //@line 45
 sp = STACKTOP; //@line 46
 return;
}
function __ZN7LoRaMac17on_radio_rx_errorEv__async_cb_225($0) {
 $0 = $0 | 0;
 var $19 = 0, $2 = 0, $4 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 3426
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3428
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3430
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 3435
  _mbed_assert_internal(12025, 12034, 215); //@line 3436
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 349; //@line 3439
   $7 = $ReallocAsyncCtx4 + 4 | 0; //@line 3440
   HEAP32[$7 >> 2] = $2; //@line 3441
   $8 = $ReallocAsyncCtx4 + 8 | 0; //@line 3442
   HEAP32[$8 >> 2] = $4; //@line 3443
   sp = STACKTOP; //@line 3444
   return;
  }
  ___async_unwind = 0; //@line 3447
  HEAP32[$ReallocAsyncCtx4 >> 2] = 349; //@line 3448
  $7 = $ReallocAsyncCtx4 + 4 | 0; //@line 3449
  HEAP32[$7 >> 2] = $2; //@line 3450
  $8 = $ReallocAsyncCtx4 + 8 | 0; //@line 3451
  HEAP32[$8 >> 2] = $4; //@line 3452
  sp = STACKTOP; //@line 3453
  return;
 }
 HEAP32[$4 + 364 >> 2] = 2; //@line 3457
 if (HEAP8[$4 + 373 >> 0] | 0) {
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0) + 4 >> 2] = 6; //@line 3465
 }
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0) + 4 >> 2] = 6; //@line 3470
 $19 = $4 + 944 | 0; //@line 3471
 HEAP8[$19 >> 0] = HEAP8[$19 >> 0] | 32; //@line 3474
 return;
}
function __ZN7LoRaMac17query_tx_possibleEhP17loramac_tx_info_t__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $33 = 0, $4 = 0, $8 = 0, $or$cond$i = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29178
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29180
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29184
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29186
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29188
 $14 = HEAP8[$0 + 28 >> 0] | 0; //@line 29190
 $17 = (HEAP32[$0 + 12 >> 2] | 0) + 369 | 0; //@line 29193
 $20 = __ZN7LoRaPHY15get_max_payloadEhb(HEAP32[$4 >> 2] | 0, HEAP8[$2 >> 0] | 0, (HEAP8[$17 >> 0] | 0) != 0) | 0; //@line 29196
 HEAP8[$8 + 1 >> 0] = $20; //@line 29198
 $22 = $20 & 255; //@line 29199
 $23 = $10 & 255; //@line 29200
 if ($23 >>> 0 > $22 >>> 0) {
  HEAP8[$8 >> 0] = $20; //@line 29203
  __ZN14LoRaMacCommand20clear_command_bufferEv($12); //@line 29204
  __ZN14LoRaMacCommand19clear_repeat_bufferEv($12); //@line 29205
  $$0 = 0; //@line 29206
 } else {
  HEAP8[$8 >> 0] = $22 - $10; //@line 29210
  $$0 = $23; //@line 29211
 }
 $33 = $$0 + ($14 & 255) | 0; //@line 29219
 $or$cond$i = $33 >>> 0 < 256 & $33 >>> 0 <= ((__ZN7LoRaPHY15get_max_payloadEhb(HEAP32[$4 >> 2] | 0, HEAP8[$2 >> 0] | 0, (HEAP8[$17 >> 0] | 0) != 0) | 0) & 255) >>> 0; //@line 29223
 HEAP32[___async_retval >> 2] = $or$cond$i ? 0 : -1010; //@line 29226
 return;
}
function _fmt_u($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $26 = 0, $8 = 0, $9 = 0, $8$looptemp = 0;
 if ($1 >>> 0 > 0 | ($1 | 0) == 0 & $0 >>> 0 > 4294967295) {
  $$0914 = $2; //@line 13028
  $8 = $0; //@line 13028
  $9 = $1; //@line 13028
  while (1) {
   $10 = ___uremdi3($8 | 0, $9 | 0, 10, 0) | 0; //@line 13030
   $$0914 = $$0914 + -1 | 0; //@line 13034
   HEAP8[$$0914 >> 0] = $10 & 255 | 48; //@line 13035
   $8$looptemp = $8;
   $8 = ___udivdi3($8 | 0, $9 | 0, 10, 0) | 0; //@line 13036
   if (!($9 >>> 0 > 9 | ($9 | 0) == 9 & $8$looptemp >>> 0 > 4294967295)) {
    break;
   } else {
    $9 = tempRet0; //@line 13044
   }
  }
  $$010$lcssa$off0 = $8; //@line 13049
  $$09$lcssa = $$0914; //@line 13049
 } else {
  $$010$lcssa$off0 = $0; //@line 13051
  $$09$lcssa = $2; //@line 13051
 }
 if (!$$010$lcssa$off0) {
  $$1$lcssa = $$09$lcssa; //@line 13055
 } else {
  $$012 = $$010$lcssa$off0; //@line 13057
  $$111 = $$09$lcssa; //@line 13057
  while (1) {
   $26 = $$111 + -1 | 0; //@line 13062
   HEAP8[$26 >> 0] = ($$012 >>> 0) % 10 | 0 | 48; //@line 13063
   if ($$012 >>> 0 < 10) {
    $$1$lcssa = $26; //@line 13067
    break;
   } else {
    $$012 = ($$012 >>> 0) / 10 | 0; //@line 13070
    $$111 = $26; //@line 13070
   }
  }
 }
 return $$1$lcssa | 0; //@line 13074
}
function __ZN7LoRaMac14handle_tx_doneEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 8287
 STACKTOP = STACKTOP + 16 | 0; //@line 8288
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 8288
 $$byval_copy = sp + 8 | 0; //@line 8289
 $1 = sp; //@line 8290
 $3 = HEAP32[$0 + 1328 >> 2] | 0; //@line 8292
 HEAP32[$1 >> 2] = 268; //@line 8293
 HEAP32[$1 + 4 >> 2] = 0; //@line 8295
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8296
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 8297
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 8297
 $4 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 8298
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 269; //@line 8301
  sp = STACKTOP; //@line 8302
  STACKTOP = sp; //@line 8303
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 8305
 if ($4 | 0) {
  STACKTOP = sp; //@line 8308
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 8310
 _mbed_assert_internal(12025, 12034, 134); //@line 8311
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 270; //@line 8314
  sp = STACKTOP; //@line 8315
  STACKTOP = sp; //@line 8316
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 8318
 STACKTOP = sp; //@line 8319
 return;
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_409($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 30075
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30079
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30081
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30083
 $9 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 30084
 if (!$9) {
  HEAP32[$6 + 988 >> 2] = __ZN18LoRaWANTimeHandler16get_current_timeEv(HEAP32[$4 >> 2] | 0) | 0; //@line 30090
  HEAP32[___async_retval >> 2] = 0; //@line 30092
  return;
 }
 $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 30096
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 30097
 FUNCTION_TABLE_vi[$12 & 1023]($8); //@line 30098
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 440; //@line 30101
  $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 30102
  HEAP32[$13 >> 2] = $4; //@line 30103
  $14 = $ReallocAsyncCtx5 + 8 | 0; //@line 30104
  HEAP32[$14 >> 2] = $6; //@line 30105
  sp = STACKTOP; //@line 30106
  return;
 }
 ___async_unwind = 0; //@line 30109
 HEAP32[$ReallocAsyncCtx5 >> 2] = 440; //@line 30110
 $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 30111
 HEAP32[$13 >> 2] = $4; //@line 30112
 $14 = $ReallocAsyncCtx5 + 8 | 0; //@line 30113
 HEAP32[$14 >> 2] = $6; //@line 30114
 sp = STACKTOP; //@line 30115
 return;
}
function __ZN7LoRaMac21send_frame_on_channelEh__async_cb_80($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 21647
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21651
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21655
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21657
 $11 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 21658
 $14 = HEAP16[HEAP32[$0 + 12 >> 2] >> 1] & 255; //@line 21661
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(16) | 0; //@line 21662
 __ZN7LoRaPHY11handle_sendEPhh($11, $4 + 381 | 0, $14); //@line 21663
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 405; //@line 21666
  $15 = $ReallocAsyncCtx5 + 4 | 0; //@line 21667
  HEAP32[$15 >> 2] = $4; //@line 21668
  $16 = $ReallocAsyncCtx5 + 8 | 0; //@line 21669
  HEAP32[$16 >> 2] = $8; //@line 21670
  $17 = $ReallocAsyncCtx5 + 12 | 0; //@line 21671
  HEAP32[$17 >> 2] = $10; //@line 21672
  sp = STACKTOP; //@line 21673
  return;
 }
 ___async_unwind = 0; //@line 21676
 HEAP32[$ReallocAsyncCtx5 >> 2] = 405; //@line 21677
 $15 = $ReallocAsyncCtx5 + 4 | 0; //@line 21678
 HEAP32[$15 >> 2] = $4; //@line 21679
 $16 = $ReallocAsyncCtx5 + 8 | 0; //@line 21680
 HEAP32[$16 >> 2] = $8; //@line 21681
 $17 = $ReallocAsyncCtx5 + 12 | 0; //@line 21682
 HEAP32[$17 >> 2] = $10; //@line 21683
 sp = STACKTOP; //@line 21684
 return;
}
function __ZN7LoRaPHY21compute_rx_win_paramsEahjP18rx_config_params_t($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$ = 0, $$$i = 0, $$0 = 0.0, $10 = 0, $13 = 0, $16 = 0, $23 = 0, $28 = 0, $41 = 0, $5 = 0, $51 = 0, $7 = 0, $8 = 0;
 $5 = $1 << 24 >> 24; //@line 20836
 $7 = HEAP8[$0 + 29 >> 0] | 0; //@line 20838
 $8 = $7 & 255; //@line 20839
 $$ = ($5 | 0) < ($8 | 0) ? $5 : $8; //@line 20841
 $10 = $$ & 255; //@line 20842
 HEAP8[$4 + 1 >> 0] = $10; //@line 20844
 $13 = HEAP32[$0 + 80 >> 2] | 0; //@line 20846
 $16 = HEAP32[$13 + (($$ & 255) << 2) >> 2] | 0; //@line 20849
 HEAP8[$4 + 2 >> 0] = ($16 | 0) == 5e5 ? 2 : ($16 | 0) == 25e4 & 1; //@line 20855
 $23 = HEAP32[$0 + 88 >> 2] | 0; //@line 20862
 if (HEAP8[$0 + 14 >> 0] | 0 ? $7 << 24 >> 24 == $10 << 24 >> 24 : 0) {
  $$0 = 8.0 / +(HEAPU8[$23 + $8 >> 0] | 0); //@line 20868
 } else {
  $28 = $$ & 255; //@line 20870
  $$0 = +(1 << HEAPU8[$23 + $28 >> 0] | 0) / +((HEAP32[$13 + ($28 << 2) >> 2] | 0) >>> 0) * 1.0e3; //@line 20881
 }
 $41 = $2 & 255; //@line 20885
 $51 = ~~+Math_ceil(+(($$0 * +(($41 << 1) + -8 | 0) + +($3 << 1 >>> 0)) / $$0)) >>> 0; //@line 20895
 $$$i = $51 >>> 0 > $41 >>> 0 ? $51 : $41; //@line 20897
 HEAP32[$4 + 8 >> 2] = $$$i; //@line 20898
 HEAP32[$4 + 12 >> 2] = ~~+Math_ceil(+($$0 * 4.0 - $$0 * +($$$i >>> 0) * .5 + -1.0)); //@line 20907
 return;
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_11($0) {
 $0 = $0 | 0;
 var $16 = 0, $2 = 0, $4 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 17524
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17526
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17528
 if (HEAP32[___async_retval >> 2] | 0) {
  HEAP32[$4 + 364 >> 2] = 2; //@line 17534
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0) + 4 >> 2] = 2; //@line 17538
  HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0) + 4 >> 2] = 2; //@line 17542
  $16 = $4 + 944 | 0; //@line 17543
  HEAP8[$16 >> 0] = HEAP8[$16 >> 0] | 32; //@line 17546
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 17549
 _mbed_assert_internal(12025, 12034, 215); //@line 17550
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 364; //@line 17553
  $7 = $ReallocAsyncCtx3 + 4 | 0; //@line 17554
  HEAP32[$7 >> 2] = $2; //@line 17555
  $8 = $ReallocAsyncCtx3 + 8 | 0; //@line 17556
  HEAP32[$8 >> 2] = $4; //@line 17557
  sp = STACKTOP; //@line 17558
  return;
 }
 ___async_unwind = 0; //@line 17561
 HEAP32[$ReallocAsyncCtx3 >> 2] = 364; //@line 17562
 $7 = $ReallocAsyncCtx3 + 4 | 0; //@line 17563
 HEAP32[$7 >> 2] = $2; //@line 17564
 $8 = $ReallocAsyncCtx3 + 8 | 0; //@line 17565
 HEAP32[$8 >> 2] = $4; //@line 17566
 sp = STACKTOP; //@line 17567
 return;
}
function __ZN7LoRaPHY18dl_channel_requestEP23dl_channel_req_params_s($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$ = 0, $$09 = 0, $$1 = 0, $10 = 0, $15 = 0, $17 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 21603
 if (!(HEAP8[$0 + 17 >> 0] | 0)) {
  $$09 = 0; //@line 21608
  return $$09 | 0; //@line 21609
 }
 $7 = HEAP32[(HEAP32[$0 >> 2] | 0) + 76 >> 2] | 0; //@line 21613
 $8 = $1 + 4 | 0; //@line 21614
 $9 = HEAP32[$8 >> 2] | 0; //@line 21615
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 21616
 $10 = FUNCTION_TABLE_iii[$7 & 31]($0, $9) | 0; //@line 21617
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 532; //@line 21620
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 21622
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 21624
  HEAP32[$AsyncCtx + 12 >> 2] = $8; //@line 21626
  sp = STACKTOP; //@line 21627
  return 0; //@line 21628
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 21630
 $$ = $10 ? 3 : 2; //@line 21631
 $15 = HEAP32[$0 + 112 >> 2] | 0; //@line 21633
 $17 = HEAPU8[$1 >> 0] | 0; //@line 21635
 $$1 = (HEAP32[$15 + ($17 * 12 | 0) >> 2] | 0) == 0 ? $$ & 1 : $$; //@line 21640
 if ($$1 << 24 >> 24 != 3) {
  $$09 = $$1; //@line 21643
  return $$09 | 0; //@line 21644
 }
 HEAP32[$15 + ($17 * 12 | 0) + 4 >> 2] = HEAP32[$8 >> 2]; //@line 21648
 $$09 = 3; //@line 21649
 return $$09 | 0; //@line 21650
}
function _equeue_create_inplace($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$032 = 0, $$033 = 0, $19 = 0, $21 = 0, $25 = 0, $28 = 0, $5 = 0;
 HEAP32[$0 + 12 >> 2] = $2; //@line 2193
 HEAP32[$0 + 20 >> 2] = 0; //@line 2195
 $5 = $0 + 16 | 0; //@line 2196
 HEAP32[$5 >> 2] = 0; //@line 2197
 if ($1 | 0) {
  $$033 = $1; //@line 2200
  $21 = 0; //@line 2200
  do {
   $21 = $21 + 1 | 0; //@line 2202
   $$033 = $$033 >>> 1; //@line 2203
  } while (($$033 | 0) != 0);
  HEAP32[$5 >> 2] = $21; //@line 2211
 }
 HEAP32[$0 + 24 >> 2] = 0; //@line 2214
 HEAP32[$0 + 28 >> 2] = $1; //@line 2216
 HEAP32[$0 + 32 >> 2] = $2; //@line 2218
 HEAP32[$0 >> 2] = 0; //@line 2219
 HEAP32[$0 + 4 >> 2] = _equeue_tick() | 0; //@line 2222
 HEAP8[$0 + 9 >> 0] = 0; //@line 2224
 HEAP8[$0 + 8 >> 0] = 0; //@line 2226
 HEAP8[$0 + 36 >> 0] = 0; //@line 2228
 HEAP32[$0 + 40 >> 2] = 0; //@line 2230
 HEAP32[$0 + 44 >> 2] = 0; //@line 2232
 $19 = _equeue_sema_create($0 + 48 | 0) | 0; //@line 2234
 if (($19 | 0) < 0) {
  $$032 = $19; //@line 2237
  return $$032 | 0; //@line 2238
 }
 $25 = _equeue_mutex_create($0 + 128 | 0) | 0; //@line 2241
 if (($25 | 0) < 0) {
  $$032 = $25; //@line 2244
  return $$032 | 0; //@line 2245
 }
 $28 = _equeue_mutex_create($0 + 156 | 0) | 0; //@line 2248
 $$032 = ($28 | 0) < 0 ? $28 : 0; //@line 2251
 return $$032 | 0; //@line 2252
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_419($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 30781
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30783
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30785
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30787
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30789
 $10 = HEAP8[$0 + 20 >> 0] | 0; //@line 30791
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30793
 $14 = (HEAP8[___async_retval >> 0] | 0) == 0; //@line 30796
 $15 = HEAP32[$2 >> 2] | 0; //@line 30797
 $18 = HEAP32[(HEAP32[$15 >> 2] | 0) + 76 >> 2] | 0; //@line 30800
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 30801
 FUNCTION_TABLE_vi[$18 & 1023]($15); //@line 30802
 if (!___async) {
  ___async_unwind = 0; //@line 30805
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 516; //@line 30807
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 30809
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 30811
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 30813
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 30815
 HEAP8[$ReallocAsyncCtx3 + 20 >> 0] = $10; //@line 30817
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 30819
 HEAP8[$ReallocAsyncCtx3 + 28 >> 0] = $14 & 1; //@line 30822
 sp = STACKTOP; //@line 30823
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_299($0) {
 $0 = $0 | 0;
 var $13 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 9654
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9656
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9658
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9660
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9662
 $9 = $2 + 944 | 0; //@line 9663
 HEAP8[$9 >> 0] = 2 | HEAP8[$9 >> 0] & -7; //@line 9667
 $13 = $2 + 944 | 0; //@line 9668
 HEAP8[$13 >> 0] = HEAP8[$13 >> 0] | 32; //@line 9671
 $16 = HEAP32[$4 >> 2] | 0; //@line 9672
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 9674
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($16, $2 + 996 | 0, 1); //@line 9675
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 331; //@line 9678
  $18 = $ReallocAsyncCtx5 + 4 | 0; //@line 9679
  HEAP32[$18 >> 2] = $6; //@line 9680
  $19 = $ReallocAsyncCtx5 + 8 | 0; //@line 9681
  HEAP32[$19 >> 2] = $8; //@line 9682
  sp = STACKTOP; //@line 9683
  return;
 }
 ___async_unwind = 0; //@line 9686
 HEAP32[$ReallocAsyncCtx5 >> 2] = 331; //@line 9687
 $18 = $ReallocAsyncCtx5 + 4 | 0; //@line 9688
 HEAP32[$18 >> 2] = $6; //@line 9689
 $19 = $ReallocAsyncCtx5 + 8 | 0; //@line 9690
 HEAP32[$19 >> 2] = $8; //@line 9691
 sp = STACKTOP; //@line 9692
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_298($0) {
 $0 = $0 | 0;
 var $13 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 9609
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9611
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9613
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9615
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9617
 $9 = $2 + 944 | 0; //@line 9618
 HEAP8[$9 >> 0] = 2 | HEAP8[$9 >> 0] & -7; //@line 9622
 $13 = $2 + 944 | 0; //@line 9623
 HEAP8[$13 >> 0] = HEAP8[$13 >> 0] | 32; //@line 9626
 $16 = HEAP32[$4 >> 2] | 0; //@line 9627
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 9629
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($16, $2 + 996 | 0, 1); //@line 9630
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 331; //@line 9633
  $18 = $ReallocAsyncCtx5 + 4 | 0; //@line 9634
  HEAP32[$18 >> 2] = $6; //@line 9635
  $19 = $ReallocAsyncCtx5 + 8 | 0; //@line 9636
  HEAP32[$19 >> 2] = $8; //@line 9637
  sp = STACKTOP; //@line 9638
  return;
 }
 ___async_unwind = 0; //@line 9641
 HEAP32[$ReallocAsyncCtx5 >> 2] = 331; //@line 9642
 $18 = $ReallocAsyncCtx5 + 4 | 0; //@line 9643
 HEAP32[$18 >> 2] = $6; //@line 9644
 $19 = $ReallocAsyncCtx5 + 8 | 0; //@line 9645
 HEAP32[$19 >> 2] = $8; //@line 9646
 sp = STACKTOP; //@line 9647
 return;
}
function __ZN12LoRaWANStack12add_channelsERK16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 7346
 STACKTOP = STACKTOP + 16 | 0; //@line 7347
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 7347
 if (!(HEAP32[$0 + 1876 >> 2] | 0)) {
  _printf(11245, sp) | 0; //@line 7354
  _printf(11858, sp + 8 | 0) | 0; //@line 7355
  $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7356
  _putchar(10) | 0; //@line 7357
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 235; //@line 7360
   sp = STACKTOP; //@line 7361
   STACKTOP = sp; //@line 7362
   return 0; //@line 7362
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7364
  $$0 = -1012; //@line 7365
  STACKTOP = sp; //@line 7366
  return $$0 | 0; //@line 7366
 } else {
  $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7369
  $6 = __ZN7LoRaMac16add_channel_planERK16lora_channelplan($0 + 4 | 0, $1) | 0; //@line 7370
  if (___async) {
   HEAP32[$AsyncCtx5 >> 2] = 236; //@line 7373
   sp = STACKTOP; //@line 7374
   STACKTOP = sp; //@line 7375
   return 0; //@line 7375
  }
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 7377
  $$0 = $6; //@line 7378
  STACKTOP = sp; //@line 7379
  return $$0 | 0; //@line 7379
 }
 return 0; //@line 7381
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 18311
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18313
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18317
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18319
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18321
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18323
 if (!(HEAP8[$2 >> 0] | 0)) {
  $13 = (HEAP32[$0 + 8 >> 2] | 0) + 8 | 0; //@line 18327
  if ($13 >>> 0 < $6 >>> 0) {
   $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 18330
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($13, $8, $10, $12); //@line 18331
   if (!___async) {
    ___async_unwind = 0; //@line 18334
   }
   HEAP32[$ReallocAsyncCtx >> 2] = 704; //@line 18336
   HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 18338
   HEAP32[$ReallocAsyncCtx + 8 >> 2] = $13; //@line 18340
   HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 18342
   HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 18344
   HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 18346
   HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 18348
   sp = STACKTOP; //@line 18349
   return;
  }
 }
 return;
}
function _strlen($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$015$lcssa = 0, $$01519 = 0, $$1$lcssa = 0, $$pn = 0, $$sink = 0, $1 = 0, $10 = 0, $19 = 0, $23 = 0, $6 = 0, label = 0;
 $1 = $0; //@line 10644
 L1 : do {
  if (!($1 & 3)) {
   $$015$lcssa = $0; //@line 10649
   label = 4; //@line 10650
  } else {
   $$01519 = $0; //@line 10652
   $23 = $1; //@line 10652
   while (1) {
    if (!(HEAP8[$$01519 >> 0] | 0)) {
     $$sink = $23; //@line 10657
     break L1;
    }
    $6 = $$01519 + 1 | 0; //@line 10660
    $23 = $6; //@line 10661
    if (!($23 & 3)) {
     $$015$lcssa = $6; //@line 10665
     label = 4; //@line 10666
     break;
    } else {
     $$01519 = $6; //@line 10669
    }
   }
  }
 } while (0);
 if ((label | 0) == 4) {
  $$0 = $$015$lcssa; //@line 10675
  while (1) {
   $10 = HEAP32[$$0 >> 2] | 0; //@line 10677
   if (!(($10 & -2139062144 ^ -2139062144) & $10 + -16843009)) {
    $$0 = $$0 + 4 | 0; //@line 10685
   } else {
    break;
   }
  }
  if (!(($10 & 255) << 24 >> 24)) {
   $$1$lcssa = $$0; //@line 10693
  } else {
   $$pn = $$0; //@line 10695
   while (1) {
    $19 = $$pn + 1 | 0; //@line 10697
    if (!(HEAP8[$19 >> 0] | 0)) {
     $$1$lcssa = $19; //@line 10701
     break;
    } else {
     $$pn = $19; //@line 10704
    }
   }
  }
  $$sink = $$1$lcssa; //@line 10709
 }
 return $$sink - $1 | 0; //@line 10712
}
function __ZN7LoRaPHY11handle_sendEPhh__async_cb_103($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 27404
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27408
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 27410
 $7 = (HEAP32[$0 + 4 >> 2] | 0) + 4 | 0; //@line 27411
 $8 = HEAP32[$7 >> 2] | 0; //@line 27412
 $11 = HEAP32[(HEAP32[$8 >> 2] | 0) + 72 >> 2] | 0; //@line 27415
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 27416
 FUNCTION_TABLE_vi[$11 & 1023]($8); //@line 27417
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 554; //@line 27420
  $12 = $ReallocAsyncCtx + 4 | 0; //@line 27421
  HEAP32[$12 >> 2] = $7; //@line 27422
  $13 = $ReallocAsyncCtx + 8 | 0; //@line 27423
  HEAP32[$13 >> 2] = $4; //@line 27424
  $14 = $ReallocAsyncCtx + 12 | 0; //@line 27425
  HEAP8[$14 >> 0] = $6; //@line 27426
  sp = STACKTOP; //@line 27427
  return;
 }
 ___async_unwind = 0; //@line 27430
 HEAP32[$ReallocAsyncCtx >> 2] = 554; //@line 27431
 $12 = $ReallocAsyncCtx + 4 | 0; //@line 27432
 HEAP32[$12 >> 2] = $7; //@line 27433
 $13 = $ReallocAsyncCtx + 8 | 0; //@line 27434
 HEAP32[$13 >> 2] = $4; //@line 27435
 $14 = $ReallocAsyncCtx + 12 | 0; //@line 27436
 HEAP8[$14 >> 0] = $6; //@line 27437
 sp = STACKTOP; //@line 27438
 return;
}
function __ZN12LoRaWANStack16remove_a_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 7427
 STACKTOP = STACKTOP + 16 | 0; //@line 7428
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 7428
 if (!(HEAP32[$0 + 1876 >> 2] | 0)) {
  _printf(11245, sp) | 0; //@line 7435
  _printf(11858, sp + 8 | 0) | 0; //@line 7436
  $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7437
  _putchar(10) | 0; //@line 7438
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 239; //@line 7441
   sp = STACKTOP; //@line 7442
   STACKTOP = sp; //@line 7443
   return 0; //@line 7443
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7445
  $$0 = -1012; //@line 7446
  STACKTOP = sp; //@line 7447
  return $$0 | 0; //@line 7447
 } else {
  $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7450
  $6 = __ZN7LoRaMac21remove_single_channelEh($0 + 4 | 0, $1) | 0; //@line 7451
  if (___async) {
   HEAP32[$AsyncCtx5 >> 2] = 240; //@line 7454
   sp = STACKTOP; //@line 7455
   STACKTOP = sp; //@line 7456
   return 0; //@line 7456
  }
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 7458
  $$0 = $6; //@line 7459
  STACKTOP = sp; //@line 7460
  return $$0 | 0; //@line 7460
 }
 return 0; //@line 7462
}
function __ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $2 = 0, $4 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 1458
 $2 = $0; //@line 1459
 L1 : do {
  switch ($1 | 0) {
  case 1:
   {
    $4 = HEAP32[$2 + 52 >> 2] | 0; //@line 1464
    if ($4 | 0) {
     $7 = HEAP32[$4 >> 2] | 0; //@line 1468
     $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 1469
     FUNCTION_TABLE_vi[$7 & 1023]($2 + 40 | 0); //@line 1470
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 81; //@line 1473
      sp = STACKTOP; //@line 1474
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 1477
      break L1;
     }
    }
    break;
   }
  case 2:
   {
    $9 = HEAP32[$2 + 68 >> 2] | 0; //@line 1485
    if ($9 | 0) {
     $12 = HEAP32[$9 >> 2] | 0; //@line 1489
     $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 1490
     FUNCTION_TABLE_vi[$12 & 1023]($2 + 56 | 0); //@line 1491
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 82; //@line 1494
      sp = STACKTOP; //@line 1495
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx2 | 0); //@line 1498
      break L1;
     }
    }
    break;
   }
  default:
   {}
  }
 } while (0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $21 = 0, $22 = 0, $28 = 0, $30 = 0;
 HEAP8[$1 + 53 >> 0] = 1; //@line 15160
 do {
  if ((HEAP32[$1 + 4 >> 2] | 0) == ($3 | 0)) {
   HEAP8[$1 + 52 >> 0] = 1; //@line 15167
   $10 = $1 + 16 | 0; //@line 15168
   $11 = HEAP32[$10 >> 2] | 0; //@line 15169
   if (!$11) {
    HEAP32[$10 >> 2] = $2; //@line 15172
    HEAP32[$1 + 24 >> 2] = $4; //@line 15174
    HEAP32[$1 + 36 >> 2] = 1; //@line 15176
    if (!(($4 | 0) == 1 ? (HEAP32[$1 + 48 >> 2] | 0) == 1 : 0)) {
     break;
    }
    HEAP8[$1 + 54 >> 0] = 1; //@line 15186
    break;
   }
   if (($11 | 0) != ($2 | 0)) {
    $30 = $1 + 36 | 0; //@line 15191
    HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + 1; //@line 15194
    HEAP8[$1 + 54 >> 0] = 1; //@line 15196
    break;
   }
   $21 = $1 + 24 | 0; //@line 15199
   $22 = HEAP32[$21 >> 2] | 0; //@line 15200
   if (($22 | 0) == 2) {
    HEAP32[$21 >> 2] = $4; //@line 15203
    $28 = $4; //@line 15204
   } else {
    $28 = $22; //@line 15206
   }
   if (($28 | 0) == 1 ? (HEAP32[$1 + 48 >> 2] | 0) == 1 : 0) {
    HEAP8[$1 + 54 >> 0] = 1; //@line 15215
   }
  }
 } while (0);
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 6327
 $2 = HEAP32[$0 + 16 >> 2] | 0; //@line 6329
 $3 = $0 + 12 | 0; //@line 6330
 $4 = HEAP32[$3 >> 2] | 0; //@line 6331
 do {
  if (!$4) {
   $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 6335
   _mbed_assert_internal(13874, 13879, 1102); //@line 6336
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 212; //@line 6339
    HEAP32[$AsyncCtx2 + 4 >> 2] = $3; //@line 6341
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 6343
    HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 6345
    sp = STACKTOP; //@line 6346
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6349
    $10 = HEAP32[$3 >> 2] | 0; //@line 6351
    break;
   }
  } else {
   $10 = $4; //@line 6355
  }
 } while (0);
 $9 = HEAP32[$10 >> 2] | 0; //@line 6358
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6359
 FUNCTION_TABLE_vii[$9 & 31]($0, $2); //@line 6360
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 213; //@line 6363
  sp = STACKTOP; //@line 6364
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6367
  return;
 }
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_178($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 32786
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32790
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32792
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32794
 $9 = $4 + 12 | 0; //@line 32796
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 32797
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(12) | 0; //@line 32798
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 4) | 0; //@line 32799
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 127; //@line 32802
  $11 = $ReallocAsyncCtx10 + 4 | 0; //@line 32803
  HEAP32[$11 >> 2] = $9; //@line 32804
  $12 = $ReallocAsyncCtx10 + 8 | 0; //@line 32805
  HEAP32[$12 >> 2] = $8; //@line 32806
  sp = STACKTOP; //@line 32807
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 32811
 ___async_unwind = 0; //@line 32812
 HEAP32[$ReallocAsyncCtx10 >> 2] = 127; //@line 32813
 $11 = $ReallocAsyncCtx10 + 4 | 0; //@line 32814
 HEAP32[$11 >> 2] = $9; //@line 32815
 $12 = $ReallocAsyncCtx10 + 8 | 0; //@line 32816
 HEAP32[$12 >> 2] = $8; //@line 32817
 sp = STACKTOP; //@line 32818
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 32725
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32729
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32731
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32733
 $9 = $4 + 12 | 0; //@line 32735
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 32736
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(12) | 0; //@line 32737
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 3) | 0; //@line 32738
 if (___async) {
  HEAP32[$ReallocAsyncCtx11 >> 2] = 123; //@line 32741
  $11 = $ReallocAsyncCtx11 + 4 | 0; //@line 32742
  HEAP32[$11 >> 2] = $9; //@line 32743
  $12 = $ReallocAsyncCtx11 + 8 | 0; //@line 32744
  HEAP32[$12 >> 2] = $8; //@line 32745
  sp = STACKTOP; //@line 32746
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 32750
 ___async_unwind = 0; //@line 32751
 HEAP32[$ReallocAsyncCtx11 >> 2] = 123; //@line 32752
 $11 = $ReallocAsyncCtx11 + 4 | 0; //@line 32753
 HEAP32[$11 >> 2] = $9; //@line 32754
 $12 = $ReallocAsyncCtx11 + 8 | 0; //@line 32755
 HEAP32[$12 >> 2] = $8; //@line 32756
 sp = STACKTOP; //@line 32757
 return;
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb_382($0) {
 $0 = $0 | 0;
 var $$0 = 0, $11 = 0, $13 = 0, $19 = 0, $2 = 0, $25 = 0, $31 = 0, $35 = 0, $4 = 0, $6 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25862
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25864
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25866
 if (HEAP32[___async_retval >> 2] | 0) {
  $$0 = -1014; //@line 25873
  $35 = ___async_retval; //@line 25874
  HEAP32[$35 >> 2] = $$0; //@line 25875
  return;
 }
 $11 = HEAP32[$2 >> 2] | 0; //@line 25878
 $13 = HEAP16[$4 >> 1] | 0; //@line 25880
 HEAP16[$4 >> 1] = $13 + 1 << 16 >> 16; //@line 25882
 HEAP8[($13 & 65535) + ($6 + 381) >> 0] = $11; //@line 25885
 $19 = HEAP16[$4 >> 1] | 0; //@line 25888
 HEAP16[$4 >> 1] = $19 + 1 << 16 >> 16; //@line 25890
 HEAP8[($19 & 65535) + ($6 + 381) >> 0] = $11 >>> 8; //@line 25893
 $25 = HEAP16[$4 >> 1] | 0; //@line 25896
 HEAP16[$4 >> 1] = $25 + 1 << 16 >> 16; //@line 25898
 HEAP8[($25 & 65535) + ($6 + 381) >> 0] = $11 >>> 16; //@line 25901
 $31 = HEAP16[$4 >> 1] | 0; //@line 25904
 HEAP16[$4 >> 1] = $31 + 1 << 16 >> 16; //@line 25906
 HEAP8[($31 & 65535) + ($6 + 381) >> 0] = $11 >>> 24; //@line 25909
 $$0 = 0; //@line 25910
 $35 = ___async_retval; //@line 25911
 HEAP32[$35 >> 2] = $$0; //@line 25912
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_180($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 32847
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32851
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32853
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32855
 $9 = $4 + 12 | 0; //@line 32857
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 32858
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 32859
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 2) | 0; //@line 32860
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 131; //@line 32863
  $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 32864
  HEAP32[$11 >> 2] = $9; //@line 32865
  $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 32866
  HEAP32[$12 >> 2] = $8; //@line 32867
  sp = STACKTOP; //@line 32868
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 32872
 ___async_unwind = 0; //@line 32873
 HEAP32[$ReallocAsyncCtx9 >> 2] = 131; //@line 32874
 $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 32875
 HEAP32[$11 >> 2] = $9; //@line 32876
 $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 32877
 HEAP32[$12 >> 2] = $8; //@line 32878
 sp = STACKTOP; //@line 32879
 return;
}
function __ZN12LoRaWANStack17drop_channel_listEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 7386
 STACKTOP = STACKTOP + 16 | 0; //@line 7387
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 7387
 if (!(HEAP32[$0 + 1876 >> 2] | 0)) {
  _printf(11245, sp) | 0; //@line 7394
  _printf(11858, sp + 8 | 0) | 0; //@line 7395
  $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7396
  _putchar(10) | 0; //@line 7397
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 237; //@line 7400
   sp = STACKTOP; //@line 7401
   STACKTOP = sp; //@line 7402
   return 0; //@line 7402
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7404
  $$0 = -1012; //@line 7405
  STACKTOP = sp; //@line 7406
  return $$0 | 0; //@line 7406
 } else {
  $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7409
  $5 = __ZN7LoRaMac19remove_channel_planEv($0 + 4 | 0) | 0; //@line 7410
  if (___async) {
   HEAP32[$AsyncCtx5 >> 2] = 238; //@line 7413
   sp = STACKTOP; //@line 7414
   STACKTOP = sp; //@line 7415
   return 0; //@line 7415
  }
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 7417
  $$0 = $5; //@line 7418
  STACKTOP = sp; //@line 7419
  return $$0 | 0; //@line 7419
 }
 return 0; //@line 7421
}
function _mbedtls_cipher_setup($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 2121
 if (($0 | 0) == 0 | ($1 | 0) == 0) {
  $$0 = -24832; //@line 2126
  return $$0 | 0; //@line 2127
 }
 dest = $0; //@line 2129
 stop = dest + 68 | 0; //@line 2129
 do {
  HEAP32[dest >> 2] = 0; //@line 2129
  dest = dest + 4 | 0; //@line 2129
 } while ((dest | 0) < (stop | 0));
 $7 = HEAP32[(HEAP32[$1 + 28 >> 2] | 0) + 20 >> 2] | 0; //@line 2133
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 2134
 $8 = FUNCTION_TABLE_i[$7 & 7]() | 0; //@line 2135
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 571; //@line 2138
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2140
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 2142
  sp = STACKTOP; //@line 2143
  return 0; //@line 2144
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2146
 HEAP32[$0 + 60 >> 2] = $8; //@line 2148
 if (!$8) {
  $$0 = -24960; //@line 2151
  return $$0 | 0; //@line 2152
 }
 HEAP32[$0 >> 2] = $1; //@line 2154
 if ((HEAP32[$1 + 4 >> 2] | 0) != 2) {
  $$0 = 0; //@line 2159
  return $$0 | 0; //@line 2160
 }
 HEAP32[$0 + 12 >> 2] = 4; //@line 2163
 HEAP32[$0 + 16 >> 2] = 14; //@line 2165
 $$0 = 0; //@line 2166
 return $$0 | 0; //@line 2167
}
function __ZN16SX1276_LoRaRadio4sendEPhh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $27 = 0, $29 = 0, $32 = 0, $34 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 342
 switch (HEAP8[$0 + 689 >> 0] | 0) {
 case 0:
  {
   _emscripten_asm_const_iiiiiii(0, HEAP32[$0 + 692 >> 2] | 0, HEAP8[$0 + 696 >> 0] | 0, HEAP32[$0 + 704 >> 2] | 0, HEAP32[$0 + 712 >> 2] | 0, $1 | 0, $2 & 255 | 0) | 0; //@line 357
   break;
  }
 case 1:
  {
   _emscripten_asm_const_iiiiiii(1, HEAP32[$0 + 692 >> 2] | 0, HEAP8[$0 + 748 >> 0] | 0, HEAP32[$0 + 752 >> 2] | 0, HEAP32[$0 + 756 >> 2] | 0, $1 | 0, $2 & 255 | 0) | 0; //@line 371
   break;
  }
 default:
  {}
 }
 $27 = $0 + 688 | 0; //@line 377
 HEAP8[$27 >> 0] = 2; //@line 378
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 379
 HEAP8[$27 >> 0] = 0; //@line 380
 $29 = HEAP32[$0 + 784 >> 2] | 0; //@line 382
 if (!$29) {
  return;
 }
 $32 = HEAP32[$29 + 12 >> 2] | 0; //@line 388
 if (!$32) {
  return;
 }
 $34 = HEAP32[$32 >> 2] | 0; //@line 393
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 394
 FUNCTION_TABLE_vi[$34 & 1023]($29); //@line 395
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 49; //@line 398
  sp = STACKTOP; //@line 399
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 402
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_308($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 10934
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10938
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10940
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10942
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 10944
 $11 = $4 + 944 | 0; //@line 10945
 HEAP8[$11 >> 0] = HEAP8[$11 >> 0] | 34; //@line 10948
 $14 = HEAP32[$6 >> 2] | 0; //@line 10949
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(12) | 0; //@line 10951
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($14, $4 + 996 | 0, 1); //@line 10952
 if (___async) {
  HEAP32[$ReallocAsyncCtx13 >> 2] = 300; //@line 10955
  $16 = $ReallocAsyncCtx13 + 4 | 0; //@line 10956
  HEAP32[$16 >> 2] = $8; //@line 10957
  $17 = $ReallocAsyncCtx13 + 8 | 0; //@line 10958
  HEAP32[$17 >> 2] = $10; //@line 10959
  sp = STACKTOP; //@line 10960
  return;
 }
 ___async_unwind = 0; //@line 10963
 HEAP32[$ReallocAsyncCtx13 >> 2] = 300; //@line 10964
 $16 = $ReallocAsyncCtx13 + 4 | 0; //@line 10965
 HEAP32[$16 >> 2] = $8; //@line 10966
 $17 = $ReallocAsyncCtx13 + 8 | 0; //@line 10967
 HEAP32[$17 >> 2] = $10; //@line 10968
 sp = STACKTOP; //@line 10969
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_307($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 10892
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10896
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10898
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10900
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 10902
 $11 = $4 + 944 | 0; //@line 10903
 HEAP8[$11 >> 0] = HEAP8[$11 >> 0] | 34; //@line 10906
 $14 = HEAP32[$6 >> 2] | 0; //@line 10907
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(12) | 0; //@line 10909
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($14, $4 + 996 | 0, 1); //@line 10910
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 305; //@line 10913
  $16 = $ReallocAsyncCtx12 + 4 | 0; //@line 10914
  HEAP32[$16 >> 2] = $8; //@line 10915
  $17 = $ReallocAsyncCtx12 + 8 | 0; //@line 10916
  HEAP32[$17 >> 2] = $10; //@line 10917
  sp = STACKTOP; //@line 10918
  return;
 }
 ___async_unwind = 0; //@line 10921
 HEAP32[$ReallocAsyncCtx12 >> 2] = 305; //@line 10922
 $16 = $ReallocAsyncCtx12 + 4 | 0; //@line 10923
 HEAP32[$16 >> 2] = $8; //@line 10924
 $17 = $ReallocAsyncCtx12 + 8 | 0; //@line 10925
 HEAP32[$17 >> 2] = $10; //@line 10926
 sp = STACKTOP; //@line 10927
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_306($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 10850
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10854
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10856
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10858
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 10860
 $11 = $4 + 944 | 0; //@line 10861
 HEAP8[$11 >> 0] = HEAP8[$11 >> 0] | 34; //@line 10864
 $14 = HEAP32[$6 >> 2] | 0; //@line 10865
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(12) | 0; //@line 10867
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($14, $4 + 996 | 0, 1); //@line 10868
 if (___async) {
  HEAP32[$ReallocAsyncCtx11 >> 2] = 308; //@line 10871
  $16 = $ReallocAsyncCtx11 + 4 | 0; //@line 10872
  HEAP32[$16 >> 2] = $8; //@line 10873
  $17 = $ReallocAsyncCtx11 + 8 | 0; //@line 10874
  HEAP32[$17 >> 2] = $10; //@line 10875
  sp = STACKTOP; //@line 10876
  return;
 }
 ___async_unwind = 0; //@line 10879
 HEAP32[$ReallocAsyncCtx11 >> 2] = 308; //@line 10880
 $16 = $ReallocAsyncCtx11 + 4 | 0; //@line 10881
 HEAP32[$16 >> 2] = $8; //@line 10882
 $17 = $ReallocAsyncCtx11 + 8 | 0; //@line 10883
 HEAP32[$17 >> 2] = $10; //@line 10884
 sp = STACKTOP; //@line 10885
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_305($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 10808
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10812
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10814
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10816
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 10818
 $11 = $4 + 944 | 0; //@line 10819
 HEAP8[$11 >> 0] = HEAP8[$11 >> 0] | 34; //@line 10822
 $14 = HEAP32[$6 >> 2] | 0; //@line 10823
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(12) | 0; //@line 10825
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($14, $4 + 996 | 0, 1); //@line 10826
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 313; //@line 10829
  $16 = $ReallocAsyncCtx10 + 4 | 0; //@line 10830
  HEAP32[$16 >> 2] = $8; //@line 10831
  $17 = $ReallocAsyncCtx10 + 8 | 0; //@line 10832
  HEAP32[$17 >> 2] = $10; //@line 10833
  sp = STACKTOP; //@line 10834
  return;
 }
 ___async_unwind = 0; //@line 10837
 HEAP32[$ReallocAsyncCtx10 >> 2] = 313; //@line 10838
 $16 = $ReallocAsyncCtx10 + 4 | 0; //@line 10839
 HEAP32[$16 >> 2] = $8; //@line 10840
 $17 = $ReallocAsyncCtx10 + 8 | 0; //@line 10841
 HEAP32[$17 >> 2] = $10; //@line 10842
 sp = STACKTOP; //@line 10843
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 30736
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30738
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30740
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30742
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30744
 $10 = HEAP8[$0 + 20 >> 0] | 0; //@line 30746
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30748
 $13 = HEAP32[$2 >> 2] | 0; //@line 30749
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 40 >> 2] | 0; //@line 30752
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 30753
 $17 = FUNCTION_TABLE_ii[$16 & 15]($13) | 0; //@line 30754
 if (!___async) {
  HEAP8[___async_retval >> 0] = $17; //@line 30758
  ___async_unwind = 0; //@line 30759
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 515; //@line 30761
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 30763
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 30765
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 30767
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 30769
 HEAP8[$ReallocAsyncCtx2 + 20 >> 0] = $10; //@line 30771
 HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 30773
 sp = STACKTOP; //@line 30774
 return;
}
function __ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_231($0) {
 $0 = $0 | 0;
 var $$pre13 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 4110
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4112
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4114
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4116
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4118
 $$pre13 = HEAP32[$2 >> 2] | 0; //@line 4119
 if (!$$pre13) {
  HEAP32[$4 >> 2] = 0; //@line 4122
  return;
 }
 $11 = HEAP32[$$pre13 + 4 >> 2] | 0; //@line 4126
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 4127
 FUNCTION_TABLE_vii[$11 & 31]($6, $8); //@line 4128
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 234; //@line 4131
  $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 4132
  HEAP32[$12 >> 2] = $2; //@line 4133
  $13 = $ReallocAsyncCtx6 + 8 | 0; //@line 4134
  HEAP32[$13 >> 2] = $4; //@line 4135
  sp = STACKTOP; //@line 4136
  return;
 }
 ___async_unwind = 0; //@line 4139
 HEAP32[$ReallocAsyncCtx6 >> 2] = 234; //@line 4140
 $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 4141
 HEAP32[$12 >> 2] = $2; //@line 4142
 $13 = $ReallocAsyncCtx6 + 8 | 0; //@line 4143
 HEAP32[$13 >> 2] = $4; //@line 4144
 sp = STACKTOP; //@line 4145
 return;
}
function __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_106($0) {
 $0 = $0 | 0;
 var $$pre$i$i4 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 27565
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27571
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27573
 $$pre$i$i4 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 27574
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = $$pre$i$i4; //@line 27575
 if (!$$pre$i$i4) {
  _gpio_irq_set($8 + 28 | 0, 2, 0); //@line 27579
  return;
 }
 $12 = HEAP32[$$pre$i$i4 + 8 >> 2] | 0; //@line 27584
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 27585
 FUNCTION_TABLE_vi[$12 & 1023]($6); //@line 27586
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 87; //@line 27589
  $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 27590
  HEAP32[$13 >> 2] = $6; //@line 27591
  $14 = $ReallocAsyncCtx5 + 8 | 0; //@line 27592
  HEAP32[$14 >> 2] = $8; //@line 27593
  sp = STACKTOP; //@line 27594
  return;
 }
 ___async_unwind = 0; //@line 27597
 HEAP32[$ReallocAsyncCtx5 >> 2] = 87; //@line 27598
 $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 27599
 HEAP32[$13 >> 2] = $6; //@line 27600
 $14 = $ReallocAsyncCtx5 + 8 | 0; //@line 27601
 HEAP32[$14 >> 2] = $8; //@line 27602
 sp = STACKTOP; //@line 27603
 return;
}
function __ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $12 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 791
 $6 = HEAP32[(HEAP32[$0 >> 2] | 0) + 32 >> 2] | 0; //@line 794
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 795
 FUNCTION_TABLE_vii[$6 & 31]($0, $1); //@line 796
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 59; //@line 799
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 801
  HEAP16[$AsyncCtx + 8 >> 1] = $3; //@line 803
  HEAP8[$AsyncCtx + 10 >> 0] = $2; //@line 805
  sp = STACKTOP; //@line 806
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 809
 $12 = HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] | 0; //@line 812
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 814
 FUNCTION_TABLE_viiiiiiiiiiiiii[$12 & 1]($0, 0, $2, 0, 0, 4800, 0, 5, 0, 0, 0, 0, 0, $3 & 65535); //@line 815
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 60; //@line 818
  HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 820
  sp = STACKTOP; //@line 821
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 824
  HEAP8[$0 + 688 >> 0] = 2; //@line 826
  __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 827
  return;
 }
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_215($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 2924
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2928
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2930
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2932
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 2934
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 2936
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 2938
 $15 = $4 + 12 | 0; //@line 2940
 HEAP32[$15 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 2941
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(24) | 0; //@line 2942
 $16 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 7) | 0; //@line 2943
 if (!___async) {
  HEAP32[___async_retval >> 2] = $16; //@line 2947
  ___async_unwind = 0; //@line 2948
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 140; //@line 2950
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $15; //@line 2952
 HEAP32[$ReallocAsyncCtx7 + 8 >> 2] = $8; //@line 2954
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $10; //@line 2956
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $12; //@line 2958
 HEAP32[$ReallocAsyncCtx7 + 20 >> 2] = $14; //@line 2960
 sp = STACKTOP; //@line 2961
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_304($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 10766
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10770
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10772
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10774
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 10776
 $11 = $4 + 944 | 0; //@line 10777
 HEAP8[$11 >> 0] = HEAP8[$11 >> 0] | 34; //@line 10780
 $14 = HEAP32[$6 >> 2] | 0; //@line 10781
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 10783
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($14, $4 + 996 | 0, 1); //@line 10784
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 316; //@line 10787
  $16 = $ReallocAsyncCtx9 + 4 | 0; //@line 10788
  HEAP32[$16 >> 2] = $8; //@line 10789
  $17 = $ReallocAsyncCtx9 + 8 | 0; //@line 10790
  HEAP32[$17 >> 2] = $10; //@line 10791
  sp = STACKTOP; //@line 10792
  return;
 }
 ___async_unwind = 0; //@line 10795
 HEAP32[$ReallocAsyncCtx9 >> 2] = 316; //@line 10796
 $16 = $ReallocAsyncCtx9 + 4 | 0; //@line 10797
 HEAP32[$16 >> 2] = $8; //@line 10798
 $17 = $ReallocAsyncCtx9 + 8 | 0; //@line 10799
 HEAP32[$17 >> 2] = $10; //@line 10800
 sp = STACKTOP; //@line 10801
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_303($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 10724
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10728
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10730
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10732
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 10734
 $11 = $4 + 944 | 0; //@line 10735
 HEAP8[$11 >> 0] = HEAP8[$11 >> 0] | 34; //@line 10738
 $14 = HEAP32[$6 >> 2] | 0; //@line 10739
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(12) | 0; //@line 10741
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($14, $4 + 996 | 0, 1); //@line 10742
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 319; //@line 10745
  $16 = $ReallocAsyncCtx8 + 4 | 0; //@line 10746
  HEAP32[$16 >> 2] = $8; //@line 10747
  $17 = $ReallocAsyncCtx8 + 8 | 0; //@line 10748
  HEAP32[$17 >> 2] = $10; //@line 10749
  sp = STACKTOP; //@line 10750
  return;
 }
 ___async_unwind = 0; //@line 10753
 HEAP32[$ReallocAsyncCtx8 >> 2] = 319; //@line 10754
 $16 = $ReallocAsyncCtx8 + 4 | 0; //@line 10755
 HEAP32[$16 >> 2] = $8; //@line 10756
 $17 = $ReallocAsyncCtx8 + 8 | 0; //@line 10757
 HEAP32[$17 >> 2] = $10; //@line 10758
 sp = STACKTOP; //@line 10759
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_302($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 10682
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10686
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10688
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10690
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 10692
 $11 = $4 + 944 | 0; //@line 10693
 HEAP8[$11 >> 0] = HEAP8[$11 >> 0] | 34; //@line 10696
 $14 = HEAP32[$6 >> 2] | 0; //@line 10697
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 10699
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($14, $4 + 996 | 0, 1); //@line 10700
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 327; //@line 10703
  $16 = $ReallocAsyncCtx7 + 4 | 0; //@line 10704
  HEAP32[$16 >> 2] = $8; //@line 10705
  $17 = $ReallocAsyncCtx7 + 8 | 0; //@line 10706
  HEAP32[$17 >> 2] = $10; //@line 10707
  sp = STACKTOP; //@line 10708
  return;
 }
 ___async_unwind = 0; //@line 10711
 HEAP32[$ReallocAsyncCtx7 >> 2] = 327; //@line 10712
 $16 = $ReallocAsyncCtx7 + 4 | 0; //@line 10713
 HEAP32[$16 >> 2] = $8; //@line 10714
 $17 = $ReallocAsyncCtx7 + 8 | 0; //@line 10715
 HEAP32[$17 >> 2] = $10; //@line 10716
 sp = STACKTOP; //@line 10717
 return;
}
function _puts($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $12 = 0, $17 = 0, $19 = 0, $22 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14654
 $1 = HEAP32[2567] | 0; //@line 14655
 if ((HEAP32[$1 + 76 >> 2] | 0) > -1) {
  $19 = ___lockfile($1) | 0; //@line 14661
 } else {
  $19 = 0; //@line 14663
 }
 do {
  if ((_fputs($0, $1) | 0) < 0) {
   $22 = -1; //@line 14669
  } else {
   if ((HEAP8[$1 + 75 >> 0] | 0) != 10) {
    $11 = $1 + 20 | 0; //@line 14675
    $12 = HEAP32[$11 >> 2] | 0; //@line 14676
    if ($12 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$11 >> 2] = $12 + 1; //@line 14682
     HEAP8[$12 >> 0] = 10; //@line 14683
     $22 = 0; //@line 14684
     break;
    }
   }
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 14688
   $17 = ___overflow($1, 10) | 0; //@line 14689
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 681; //@line 14692
    HEAP32[$AsyncCtx + 4 >> 2] = $19; //@line 14694
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 14696
    sp = STACKTOP; //@line 14697
    return 0; //@line 14698
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 14700
    $22 = $17 >> 31; //@line 14702
    break;
   }
  }
 } while (0);
 if ($19 | 0) {
  ___unlockfile($1); //@line 14709
 }
 return $22 | 0; //@line 14711
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_129($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx23 = 0, sp = 0;
 sp = STACKTOP; //@line 29383
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29387
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29389
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29391
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29393
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29395
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29397
 $15 = $4 + 12 | 0; //@line 29399
 HEAP32[$15 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 29400
 $ReallocAsyncCtx23 = _emscripten_realloc_async_context(24) | 0; //@line 29401
 $16 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 6) | 0; //@line 29402
 if (!___async) {
  HEAP32[___async_retval >> 2] = $16; //@line 29406
  ___async_unwind = 0; //@line 29407
 }
 HEAP32[$ReallocAsyncCtx23 >> 2] = 189; //@line 29409
 HEAP32[$ReallocAsyncCtx23 + 4 >> 2] = $15; //@line 29411
 HEAP32[$ReallocAsyncCtx23 + 8 >> 2] = $8; //@line 29413
 HEAP32[$ReallocAsyncCtx23 + 12 >> 2] = $10; //@line 29415
 HEAP32[$ReallocAsyncCtx23 + 16 >> 2] = $12; //@line 29417
 HEAP32[$ReallocAsyncCtx23 + 20 >> 2] = $14; //@line 29419
 sp = STACKTOP; //@line 29420
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 2862
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2866
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2868
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2870
 $9 = $4 + 12 | 0; //@line 2872
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 2873
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(12) | 0; //@line 2874
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 9) | 0; //@line 2875
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 136; //@line 2878
  $11 = $ReallocAsyncCtx8 + 4 | 0; //@line 2879
  HEAP32[$11 >> 2] = $9; //@line 2880
  $12 = $ReallocAsyncCtx8 + 8 | 0; //@line 2881
  HEAP32[$12 >> 2] = $8; //@line 2882
  sp = STACKTOP; //@line 2883
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 2887
 ___async_unwind = 0; //@line 2888
 HEAP32[$ReallocAsyncCtx8 >> 2] = 136; //@line 2889
 $11 = $ReallocAsyncCtx8 + 4 | 0; //@line 2890
 HEAP32[$11 >> 2] = $9; //@line 2891
 $12 = $ReallocAsyncCtx8 + 8 | 0; //@line 2892
 HEAP32[$12 >> 2] = $8; //@line 2893
 sp = STACKTOP; //@line 2894
 return;
}
function __ZN4mbed11InterruptInD0Ev($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 1389
 HEAP32[$0 >> 2] = 656; //@line 1390
 _gpio_irq_free($0 + 28 | 0); //@line 1392
 $3 = HEAP32[$0 + 68 >> 2] | 0; //@line 1394
 do {
  if ($3 | 0) {
   $7 = HEAP32[$3 + 8 >> 2] | 0; //@line 1400
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 1401
   FUNCTION_TABLE_vi[$7 & 1023]($0 + 56 | 0); //@line 1402
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 79; //@line 1405
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 1407
    sp = STACKTOP; //@line 1408
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 1411
    break;
   }
  }
 } while (0);
 $10 = HEAP32[$0 + 52 >> 2] | 0; //@line 1417
 if (!$10) {
  __ZdlPv($0); //@line 1420
  return;
 }
 $14 = HEAP32[$10 + 8 >> 2] | 0; //@line 1425
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1426
 FUNCTION_TABLE_vi[$14 & 1023]($0 + 40 | 0); //@line 1427
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 80; //@line 1430
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 1432
  sp = STACKTOP; //@line 1433
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 1436
 __ZdlPv($0); //@line 1437
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 4246
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4250
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4252
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4254
 $9 = $4 + 12 | 0; //@line 4256
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 4257
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 4258
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 10) | 0; //@line 4259
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 151; //@line 4262
  $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 4263
  HEAP32[$11 >> 2] = $9; //@line 4264
  $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 4265
  HEAP32[$12 >> 2] = $8; //@line 4266
  sp = STACKTOP; //@line 4267
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 4271
 ___async_unwind = 0; //@line 4272
 HEAP32[$ReallocAsyncCtx9 >> 2] = 151; //@line 4273
 $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 4274
 HEAP32[$11 >> 2] = $9; //@line 4275
 $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 4276
 HEAP32[$12 >> 2] = $8; //@line 4277
 sp = STACKTOP; //@line 4278
 return;
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_203($0) {
 $0 = $0 | 0;
 var $$pre$i$i66 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 2358
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2364
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2366
 $$pre$i$i66 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 2367
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = $$pre$i$i66; //@line 2369
 if (!$$pre$i$i66) {
  HEAP32[___async_retval >> 2] = $8; //@line 2373
  return;
 }
 $12 = HEAP32[$$pre$i$i66 + 8 >> 2] | 0; //@line 2377
 $ReallocAsyncCtx15 = _emscripten_realloc_async_context(12) | 0; //@line 2378
 FUNCTION_TABLE_vi[$12 & 1023]($6); //@line 2379
 if (___async) {
  HEAP32[$ReallocAsyncCtx15 >> 2] = 481; //@line 2382
  $13 = $ReallocAsyncCtx15 + 4 | 0; //@line 2383
  HEAP32[$13 >> 2] = $6; //@line 2384
  $14 = $ReallocAsyncCtx15 + 8 | 0; //@line 2385
  HEAP32[$14 >> 2] = $8; //@line 2386
  sp = STACKTOP; //@line 2387
  return;
 }
 ___async_unwind = 0; //@line 2390
 HEAP32[$ReallocAsyncCtx15 >> 2] = 481; //@line 2391
 $13 = $ReallocAsyncCtx15 + 4 | 0; //@line 2392
 HEAP32[$13 >> 2] = $6; //@line 2393
 $14 = $ReallocAsyncCtx15 + 8 | 0; //@line 2394
 HEAP32[$14 >> 2] = $8; //@line 2395
 sp = STACKTOP; //@line 2396
 return;
}
function __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 29080
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29082
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29084
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29086
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29088
 HEAP32[$4 + 12 >> 2] = HEAP32[$2 >> 2]; //@line 29091
 _equeue_event_dtor($4, 281); //@line 29092
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 29093
 $10 = _equeue_post($6, 282, $4) | 0; //@line 29094
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 283; //@line 29097
  $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 29098
  HEAP32[$11 >> 2] = $2; //@line 29099
  $12 = $ReallocAsyncCtx3 + 8 | 0; //@line 29100
  HEAP32[$12 >> 2] = $8; //@line 29101
  sp = STACKTOP; //@line 29102
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 29106
 ___async_unwind = 0; //@line 29107
 HEAP32[$ReallocAsyncCtx3 >> 2] = 283; //@line 29108
 $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 29109
 HEAP32[$11 >> 2] = $2; //@line 29110
 $12 = $ReallocAsyncCtx3 + 8 | 0; //@line 29111
 HEAP32[$12 >> 2] = $8; //@line 29112
 sp = STACKTOP; //@line 29113
 return;
}
function __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$pre$phiZ2D = 0, $26 = 0;
 if ($2) {
  HEAP8[$1 + 15 >> 0] = HEAP8[$0 + 12 >> 0] | 0; //@line 22916
  HEAP32[$1 + 748 >> 2] = HEAPU16[$0 + 36 >> 1]; //@line 22921
  HEAP32[$1 + 752 >> 2] = HEAPU16[$0 + 38 >> 1]; //@line 22926
  HEAP32[$1 + 756 >> 2] = HEAPU16[$0 + 40 >> 1]; //@line 22931
  HEAP32[$1 + 760 >> 2] = HEAPU16[$0 + 42 >> 1]; //@line 22936
  HEAP32[$1 + 764 >> 2] = HEAPU16[$0 + 44 >> 1]; //@line 22941
  $26 = $0 + 132 | 0; //@line 22942
  HEAP8[$1 + 781 >> 0] = (HEAPU8[$26 >> 0] | 0) >>> 1 & 1; //@line 22947
  $$pre$phiZ2D = $26; //@line 22948
 } else {
  $$pre$phiZ2D = $0 + 132 | 0; //@line 22951
 }
 HEAP8[$1 + 736 >> 0] = HEAP8[$0 + 23 >> 0] | 0; //@line 22956
 HEAP8[$1 + 737 >> 0] = HEAP8[$0 + 30 >> 0] | 0; //@line 22960
 HEAP8[$1 + 769 >> 0] = HEAP8[$0 + 34 >> 0] | 0; //@line 22964
 HEAP32[$1 + 772 >> 2] = HEAP32[$0 + 68 >> 2]; //@line 22968
 HEAP8[$1 + 776 >> 0] = HEAP8[$0 + 64 >> 0] | 0; //@line 22972
 HEAP8[$1 + 780 >> 0] = HEAP8[$$pre$phiZ2D >> 0] & 1; //@line 22976
 HEAP32[$1 + 784 >> 2] = HEAP32[$0 + 56 >> 2]; //@line 22980
 HEAP32[$1 + 788 >> 2] = HEAP32[$0 + 60 >> 2]; //@line 22984
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_360($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 14727
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14731
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14733
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14735
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = HEAP32[___async_retval >> 2]; //@line 14738
 $10 = HEAP32[$4 >> 2] | 0; //@line 14739
 $13 = HEAP32[(HEAP32[$10 >> 2] | 0) + 76 >> 2] | 0; //@line 14742
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 14743
 FUNCTION_TABLE_vi[$13 & 1023]($10); //@line 14744
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 530; //@line 14747
  $14 = $ReallocAsyncCtx7 + 4 | 0; //@line 14748
  HEAP32[$14 >> 2] = $6; //@line 14749
  $15 = $ReallocAsyncCtx7 + 8 | 0; //@line 14750
  HEAP32[$15 >> 2] = $8; //@line 14751
  sp = STACKTOP; //@line 14752
  return;
 }
 ___async_unwind = 0; //@line 14755
 HEAP32[$ReallocAsyncCtx7 >> 2] = 530; //@line 14756
 $14 = $ReallocAsyncCtx7 + 4 | 0; //@line 14757
 HEAP32[$14 >> 2] = $6; //@line 14758
 $15 = $ReallocAsyncCtx7 + 8 | 0; //@line 14759
 HEAP32[$15 >> 2] = $8; //@line 14760
 sp = STACKTOP; //@line 14761
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_278($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 8201
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8203
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8205
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8207
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 8209
 $9 = $2 + 944 | 0; //@line 8210
 HEAP8[$9 >> 0] = HEAP8[$9 >> 0] | 32; //@line 8213
 $12 = HEAP32[$4 >> 2] | 0; //@line 8214
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 8216
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($12, $2 + 996 | 0, 1); //@line 8217
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 331; //@line 8220
  $14 = $ReallocAsyncCtx5 + 4 | 0; //@line 8221
  HEAP32[$14 >> 2] = $6; //@line 8222
  $15 = $ReallocAsyncCtx5 + 8 | 0; //@line 8223
  HEAP32[$15 >> 2] = $8; //@line 8224
  sp = STACKTOP; //@line 8225
  return;
 }
 ___async_unwind = 0; //@line 8228
 HEAP32[$ReallocAsyncCtx5 >> 2] = 331; //@line 8229
 $14 = $ReallocAsyncCtx5 + 4 | 0; //@line 8230
 HEAP32[$14 >> 2] = $6; //@line 8231
 $15 = $ReallocAsyncCtx5 + 8 | 0; //@line 8232
 HEAP32[$15 >> 2] = $8; //@line 8233
 sp = STACKTOP; //@line 8234
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_358($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $17 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 14630
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14632
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14636
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14638
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14640
 $11 = HEAP32[$2 >> 2] | 0; //@line 14641
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 44 >> 2] | 0; //@line 14644
 $15 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 14645
 $17 = HEAP16[$15 >> 1] & 255; //@line 14647
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 14648
 FUNCTION_TABLE_viii[$14 & 7]($11, 1, $17); //@line 14649
 if (!___async) {
  ___async_unwind = 0; //@line 14652
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 528; //@line 14654
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 14656
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $15; //@line 14658
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = 1; //@line 14660
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $6; //@line 14662
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $8; //@line 14664
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $10; //@line 14666
 sp = STACKTOP; //@line 14667
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_357($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $17 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 14586
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14588
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14592
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14594
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14596
 $11 = HEAP32[$2 >> 2] | 0; //@line 14597
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 44 >> 2] | 0; //@line 14600
 $15 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 14601
 $17 = HEAP16[$15 >> 1] & 255; //@line 14603
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 14604
 FUNCTION_TABLE_viii[$14 & 7]($11, 0, $17); //@line 14605
 if (!___async) {
  ___async_unwind = 0; //@line 14608
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 528; //@line 14610
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 14612
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $15; //@line 14614
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = 0; //@line 14616
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $6; //@line 14618
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $8; //@line 14620
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $10; //@line 14622
 sp = STACKTOP; //@line 14623
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_20($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 18359
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18365
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18367
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18369
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18371
 if ((HEAP32[$0 + 4 >> 2] | 0) <= 1) {
  return;
 }
 $14 = (HEAP32[$0 + 8 >> 2] | 0) + 24 | 0; //@line 18376
 $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 18378
 __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($14, $6, $8, $10); //@line 18379
 if (!___async) {
  ___async_unwind = 0; //@line 18382
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 704; //@line 18384
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $6 + 54; //@line 18386
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $14; //@line 18388
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $12; //@line 18390
 HEAP32[$ReallocAsyncCtx + 16 >> 2] = $6; //@line 18392
 HEAP32[$ReallocAsyncCtx + 20 >> 2] = $8; //@line 18394
 HEAP32[$ReallocAsyncCtx + 24 >> 2] = $10; //@line 18396
 sp = STACKTOP; //@line 18397
 return;
}
function __ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$ = 0, $$1 = 0, $12 = 0, $22 = 0, $3 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 21522
 $3 = HEAP32[$0 + 4 >> 2] | 0; //@line 21524
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 64 >> 2] | 0; //@line 21527
 $8 = HEAP32[$1 + 4 >> 2] | 0; //@line 21529
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 21530
 $9 = FUNCTION_TABLE_iii[$6 & 31]($3, $8) | 0; //@line 21531
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 531; //@line 21534
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 21536
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 21538
  sp = STACKTOP; //@line 21539
  return 0; //@line 21540
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 21542
  $$ = $9 ? 7 : 6; //@line 21543
  $12 = HEAP8[$1 >> 0] | 0; //@line 21544
  $$1 = ($12 << 24 >> 24 < (HEAP8[$0 + 28 >> 0] | 0) ? 1 : $12 << 24 >> 24 > (HEAP8[$0 + 29 >> 0] | 0)) ? $$ & 5 : $$; //@line 21553
  $22 = HEAP8[$1 + 1 >> 0] | 0; //@line 21555
  return (($22 << 24 >> 24 < (HEAP8[$0 + 32 >> 0] | 0) ? 1 : $22 << 24 >> 24 > (HEAP8[$0 + 33 >> 0] | 0)) ? $$1 & 3 : $$1) | 0; //@line 21565
 }
 return 0; //@line 21567
}
function __GLOBAL__sub_I_main_cpp() {
 var $AsyncCtx = 0, $AsyncCtx2 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 6656
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6657
 __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_(17696, 9, 8, 7, 6, 23, 4, 5, 66, 67, 0, 1, -1, -1, -1, -1, 62, -1, -1); //@line 6658
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 643; //@line 6661
  sp = STACKTOP; //@line 6662
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 6665
 __ZN5Sht31C2E7PinNameS0_(22584, 10, 11); //@line 6666
 __ZN4mbed11InterruptInC2E7PinName(21608, 1337); //@line 6667
 __ZN6events10EventQueueC2EjPh(21680, 1664, 0); //@line 6668
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6669
 __ZN16LoRaWANInterfaceC2ER9LoRaRadio(21880, 17696); //@line 6670
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 644; //@line 6673
  sp = STACKTOP; //@line 6674
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6677
  dest = 21888; //@line 6678
  stop = dest + 48 | 0; //@line 6678
  do {
   HEAP32[dest >> 2] = 0; //@line 6678
   dest = dest + 4 | 0; //@line 6678
  } while ((dest | 0) < (stop | 0));
  return;
 }
}
function __ZN4mbed5TimerC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1819
 HEAP32[$0 >> 2] = 0; //@line 1820
 $1 = $0 + 8 | 0; //@line 1821
 $2 = $0 + 16 | 0; //@line 1822
 HEAP32[$1 >> 2] = 0; //@line 1823
 HEAP32[$1 + 4 >> 2] = 0; //@line 1823
 HEAP32[$1 + 8 >> 2] = 0; //@line 1823
 HEAP32[$1 + 12 >> 2] = 0; //@line 1823
 $4 = $0 + 24 | 0; //@line 1825
 HEAP32[$4 >> 2] = _get_us_ticker_data() | 0; //@line 1826
 HEAP8[$0 + 28 >> 0] = 1; //@line 1828
 $6 = HEAP32[$4 >> 2] | 0; //@line 1829
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 1830
 $7 = _ticker_read_us($6) | 0; //@line 1831
 $8 = tempRet0; //@line 1832
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 94; //@line 1835
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 1837
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 1839
  sp = STACKTOP; //@line 1840
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1843
  $11 = $1; //@line 1844
  HEAP32[$11 >> 2] = $7; //@line 1846
  HEAP32[$11 + 4 >> 2] = $8; //@line 1849
  $15 = $2; //@line 1850
  HEAP32[$15 >> 2] = 0; //@line 1852
  HEAP32[$15 + 4 >> 2] = 0; //@line 1855
  return;
 }
}
function __ZL25default_terminate_handlerv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 28129
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28131
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28133
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28135
 $8 = HEAP32[$0 + 20 >> 2] | 0; //@line 28137
 $10 = HEAP32[$0 + 24 >> 2] | 0; //@line 28139
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  HEAP32[$4 >> 2] = 17248; //@line 28144
  HEAP32[$4 + 4 >> 2] = $6; //@line 28146
  _abort_message(17157, $4); //@line 28147
 }
 $12 = HEAP32[$2 >> 2] | 0; //@line 28150
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 8 >> 2] | 0; //@line 28153
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 28154
 $16 = FUNCTION_TABLE_ii[$15 & 15]($12) | 0; //@line 28155
 if (!___async) {
  HEAP32[___async_retval >> 2] = $16; //@line 28159
  ___async_unwind = 0; //@line 28160
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 683; //@line 28162
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $8; //@line 28164
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 28166
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $10; //@line 28168
 sp = STACKTOP; //@line 28169
 return;
}
function __ZL12send_messagev__async_cb_79($0) {
 $0 = $0 | 0;
 var $12 = 0, $15 = 0, $2 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 21530
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21532
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21536
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21538
 $AsyncRetVal = HEAP16[___async_retval >> 1] | 0; //@line 21542
 $12 = $AsyncRetVal << 16 >> 16; //@line 21543
 if ($AsyncRetVal << 16 >> 16 >= 0) {
  HEAP32[$2 >> 2] = $12; //@line 21546
  _printf(14649, $2) | 0; //@line 21547
  return;
 }
 if ($AsyncRetVal << 16 >> 16 != -1001) {
  HEAP32[$8 >> 2] = $12; //@line 21552
  _printf(14625, $8) | 0; //@line 21553
  return;
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 21556
 _puts(14597) | 0; //@line 21557
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 657; //@line 21560
  $15 = $ReallocAsyncCtx + 4 | 0; //@line 21561
  HEAP32[$15 >> 2] = $6; //@line 21562
  sp = STACKTOP; //@line 21563
  return;
 }
 ___async_unwind = 0; //@line 21566
 HEAP32[$ReallocAsyncCtx >> 2] = 657; //@line 21567
 $15 = $ReallocAsyncCtx + 4 | 0; //@line 21568
 HEAP32[$15 >> 2] = $6; //@line 21569
 sp = STACKTOP; //@line 21570
 return;
}
function __ZN7LoRaMac11schedule_txEv__async_cb_70($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $8 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 21055
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21063
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21065
 $11 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 21066
 $12 = (HEAP32[$0 + 8 >> 2] | 0) + 1016 | 0; //@line 21067
 $13 = HEAP32[HEAP32[$0 + 12 >> 2] >> 2] | 0; //@line 21068
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(12) | 0; //@line 21069
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($11, $12, $13); //@line 21070
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 400; //@line 21073
  $14 = $ReallocAsyncCtx8 + 4 | 0; //@line 21074
  HEAP32[$14 >> 2] = $8; //@line 21075
  $15 = $ReallocAsyncCtx8 + 8 | 0; //@line 21076
  HEAP32[$15 >> 2] = $10; //@line 21077
  sp = STACKTOP; //@line 21078
  return;
 }
 ___async_unwind = 0; //@line 21081
 HEAP32[$ReallocAsyncCtx8 >> 2] = 400; //@line 21082
 $14 = $ReallocAsyncCtx8 + 4 | 0; //@line 21083
 HEAP32[$14 >> 2] = $8; //@line 21084
 $15 = $ReallocAsyncCtx8 + 8 | 0; //@line 21085
 HEAP32[$15 >> 2] = $10; //@line 21086
 sp = STACKTOP; //@line 21087
 return;
}
function __ZN16SX1276_LoRaRadio11time_on_airE10modem_typeh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$030 = 0.0, $10 = 0.0, $45 = 0.0, $6 = 0;
 switch ($1 | 0) {
 case 0:
  {
   $$0 = 1; //@line 518
   return $$0 | 0; //@line 519
  }
 case 1:
  {
   switch (HEAP32[$0 + 752 >> 2] | 0) {
   case 7:
    {
     $$030 = 125.0e3; //@line 527
     break;
    }
   case 8:
    {
     $$030 = 25.0e4; //@line 531
     break;
    }
   case 9:
    {
     $$030 = 5.0e5; //@line 535
     break;
    }
   default:
    {
     $$030 = 0.0; //@line 539
    }
   }
   $6 = HEAP32[$0 + 756 >> 2] | 0; //@line 543
   $10 = 1.0 / ($$030 / +(1 << $6 | 0)); //@line 547
   $45 = +Math_ceil(+(+(((($2 & 255) << 3) + 28 - ($6 << 2) + (HEAP8[$0 + 766 >> 0] << 4 & 255) + (HEAP8[$0 + 764 >> 0] | 0 ? -20 : 0) | 0) >>> 0) / +($6 - (HEAP8[$0 + 760 >> 0] | 0 ? 2 : 0) << 2 >>> 0))) * +((HEAPU8[$0 + 761 >> 0] | 0) + 4 | 0); //@line 583
   $$0 = ~~+Math_floor(+(((+(HEAPU16[$0 + 762 >> 1] | 0) + 4.25) * $10 + $10 * (($45 > 0.0 ? $45 : 0.0) + 8.0)) * 1.0e3 + .999)) >>> 0; //@line 593
   return $$0 | 0; //@line 594
  }
 default:
  {
   $$0 = 0; //@line 598
   return $$0 | 0; //@line 599
  }
 }
 return 0; //@line 602
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_415($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 30568
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30570
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30572
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30574
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30576
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30578
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30580
 $15 = HEAP32[HEAP32[$0 + 28 >> 2] >> 2] | 0; //@line 30583
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(28) | 0; //@line 30584
 __ZN7LoRaPHY18put_radio_to_sleepEv($15); //@line 30585
 if (!___async) {
  ___async_unwind = 0; //@line 30588
 }
 HEAP32[$ReallocAsyncCtx13 >> 2] = 425; //@line 30590
 HEAP32[$ReallocAsyncCtx13 + 4 >> 2] = $2; //@line 30592
 HEAP32[$ReallocAsyncCtx13 + 8 >> 2] = $4; //@line 30594
 HEAP32[$ReallocAsyncCtx13 + 12 >> 2] = $6; //@line 30596
 HEAP32[$ReallocAsyncCtx13 + 16 >> 2] = $8; //@line 30598
 HEAP32[$ReallocAsyncCtx13 + 20 >> 2] = $10; //@line 30600
 HEAP32[$ReallocAsyncCtx13 + 24 >> 2] = $12; //@line 30602
 sp = STACKTOP; //@line 30603
 return;
}
function __ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb_174($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 32637
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32639
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32641
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32643
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32645
 HEAP32[$2 >> 2] = 2; //@line 32646
 $9 = $2 + 4 | 0; //@line 32647
 HEAP8[$9 >> 0] = 1; //@line 32648
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 32649
 __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($4, $2) | 0; //@line 32650
 if (!___async) {
  ___async_unwind = 0; //@line 32653
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 226; //@line 32655
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 32657
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $9; //@line 32659
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $4; //@line 32661
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $2; //@line 32663
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $6; //@line 32665
 HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $8; //@line 32667
 HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $2; //@line 32669
 sp = STACKTOP; //@line 32670
 return;
}
function _mbedtls_gcm_setkey__async_cb_116($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 28686
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28688
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28690
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28692
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28694
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28696
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28698
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 28700
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 28704
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 28707
 $15 = _mbedtls_cipher_setkey($2, $4, $6, 1) | 0; //@line 28708
 if (!___async) {
  HEAP32[___async_retval >> 2] = $15; //@line 28712
  ___async_unwind = 0; //@line 28713
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 590; //@line 28715
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $8; //@line 28717
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $10; //@line 28719
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 28721
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $12; //@line 28723
 sp = STACKTOP; //@line 28724
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 var $$037$off038 = 0, $$037$off039 = 0, $12 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, label = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12271
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12273
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12275
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12279
 if (!(HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0)) {
  $$037$off038 = 4; //@line 12283
  label = 4; //@line 12284
 } else {
  if (!(HEAP8[HEAP32[$0 + 20 >> 2] >> 0] | 0)) {
   $$037$off038 = 3; //@line 12289
   label = 4; //@line 12290
  } else {
   $$037$off039 = 3; //@line 12292
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$6 >> 2] = $4; //@line 12296
  $17 = $8 + 40 | 0; //@line 12297
  HEAP32[$17 >> 2] = (HEAP32[$17 >> 2] | 0) + 1; //@line 12300
  if ((HEAP32[$8 + 36 >> 2] | 0) == 1) {
   if ((HEAP32[$8 + 24 >> 2] | 0) == 2) {
    HEAP8[$8 + 54 >> 0] = 1; //@line 12310
    $$037$off039 = $$037$off038; //@line 12311
   } else {
    $$037$off039 = $$037$off038; //@line 12313
   }
  } else {
   $$037$off039 = $$037$off038; //@line 12316
  }
 }
 HEAP32[$12 >> 2] = $$037$off039; //@line 12319
 return;
}
function __ZN7LoRaPHY11add_channelEP16channel_params_th__async_cb($0) {
 $0 = $0 | 0;
 var $$024 = 0, $10 = 0, $12 = 0, $2 = 0, $22 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $not$ = 0;
 $2 = HEAP8[$0 + 4 >> 0] & 1; //@line 5252
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5254
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5256
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5258
 $not$ = HEAP8[___async_retval >> 0] & 1 ^ 1; //@line 5262
 if ($2 | $not$) {
  $$024 = $2 ? $2 & $not$ ? -1006 : -1005 : -1004; //@line 5268
  $27 = ___async_retval; //@line 5269
  HEAP32[$27 >> 2] = $$024; //@line 5270
  return;
 }
 $10 = $4 + 112 | 0; //@line 5273
 $12 = (HEAP32[$10 >> 2] | 0) + ($6 * 12 | 0) | 0; //@line 5275
 HEAP32[$12 >> 2] = HEAP32[$8 >> 2]; //@line 5276
 HEAP32[$12 + 4 >> 2] = HEAP32[$8 + 4 >> 2]; //@line 5276
 HEAP32[$12 + 8 >> 2] = HEAP32[$8 + 8 >> 2]; //@line 5276
 HEAP8[(HEAP32[$10 >> 2] | 0) + ($6 * 12 | 0) + 9 >> 0] = HEAP8[$8 + 9 >> 0] | 0; //@line 5281
 $22 = (HEAP32[$4 + 120 >> 2] | 0) + ($6 >>> 4 << 1) | 0; //@line 5287
 HEAP16[$22 >> 1] = 1 << ($6 & 15) | (HEAPU16[$22 >> 1] | 0); //@line 5292
 $$024 = 0; //@line 5293
 $27 = ___async_retval; //@line 5294
 HEAP32[$27 >> 2] = $$024; //@line 5295
 return;
}
function ___strerror_l($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $7 = 0, label = 0, $$113$looptemp = 0;
 $$016 = 0; //@line 14264
 while (1) {
  if ((HEAPU8[15220 + $$016 >> 0] | 0) == ($0 | 0)) {
   label = 2; //@line 14271
   break;
  }
  $7 = $$016 + 1 | 0; //@line 14274
  if (($7 | 0) == 87) {
   $$01214 = 15308; //@line 14277
   $$115 = 87; //@line 14277
   label = 5; //@line 14278
   break;
  } else {
   $$016 = $7; //@line 14281
  }
 }
 if ((label | 0) == 2) {
  if (!$$016) {
   $$012$lcssa = 15308; //@line 14287
  } else {
   $$01214 = 15308; //@line 14289
   $$115 = $$016; //@line 14289
   label = 5; //@line 14290
  }
 }
 if ((label | 0) == 5) {
  while (1) {
   label = 0; //@line 14295
   $$113 = $$01214; //@line 14296
   do {
    $$113$looptemp = $$113;
    $$113 = $$113 + 1 | 0; //@line 14300
   } while ((HEAP8[$$113$looptemp >> 0] | 0) != 0);
   $$115 = $$115 + -1 | 0; //@line 14307
   if (!$$115) {
    $$012$lcssa = $$113; //@line 14310
    break;
   } else {
    $$01214 = $$113; //@line 14313
    label = 5; //@line 14314
   }
  }
 }
 return ___lctrans($$012$lcssa, HEAP32[$1 + 20 >> 2] | 0) | 0; //@line 14321
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $13 = 0, $19 = 0;
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 15019
  } else {
   if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0) {
    if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
     $13 = $1 + 20 | 0; //@line 15028
     if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
      HEAP32[$1 + 32 >> 2] = $3; //@line 15033
      HEAP32[$13 >> 2] = $2; //@line 15034
      $19 = $1 + 40 | 0; //@line 15035
      HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + 1; //@line 15038
      if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
       if ((HEAP32[$1 + 24 >> 2] | 0) == 2) {
        HEAP8[$1 + 54 >> 0] = 1; //@line 15048
       }
      }
      HEAP32[$1 + 44 >> 2] = 4; //@line 15052
      break;
     }
    }
    if (($3 | 0) == 1) {
     HEAP32[$1 + 32 >> 2] = 1; //@line 15059
    }
   }
  }
 } while (0);
 return;
}
function _mbedtls_gcm_setkey__async_cb_117($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 28731
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28733
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28735
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28737
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28739
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28741
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28743
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28745
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(28) | 0; //@line 28746
 $15 = _mbedtls_cipher_setup($2, $4) | 0; //@line 28747
 if (!___async) {
  HEAP32[___async_retval >> 2] = $15; //@line 28751
  ___async_unwind = 0; //@line 28752
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 589; //@line 28754
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 28756
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $6; //@line 28758
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $8; //@line 28760
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $10; //@line 28762
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $12; //@line 28764
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $14; //@line 28766
 sp = STACKTOP; //@line 28767
 return;
}
function __ZN11LoRaMacMlme22set_tx_continuous_waveEhaafft($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = +$4;
 $5 = +$5;
 $6 = $6 | 0;
 var $13 = 0, $16 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 20102
 STACKTOP = STACKTOP + 16 | 0; //@line 20103
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 20103
 $7 = sp; //@line 20104
 HEAP8[$7 >> 0] = $1; //@line 20105
 HEAP8[$7 + 1 >> 0] = $2; //@line 20107
 HEAP8[$7 + 2 >> 0] = $3; //@line 20109
 HEAPF32[$7 + 4 >> 2] = $4; //@line 20111
 HEAPF32[$7 + 8 >> 2] = $5; //@line 20113
 HEAP16[$7 + 12 >> 1] = $6; //@line 20115
 $13 = HEAP32[$0 >> 2] | 0; //@line 20116
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 68 >> 2] | 0; //@line 20119
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 20120
 FUNCTION_TABLE_viii[$16 & 7]($13, $7, 0); //@line 20121
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 509; //@line 20124
  HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 20126
  sp = STACKTOP; //@line 20127
  STACKTOP = sp; //@line 20128
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 20130
  STACKTOP = sp; //@line 20131
  return;
 }
}
function __ZL18lora_event_handler11lora_events__async_cb_46($0) {
 $0 = $0 | 0;
 var $$07$i = 0, $12 = 0, $15 = 0, $16 = 0, $2 = 0, $20 = 0, $4 = 0, $8 = 0, dest = 0, stop = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19860
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19862
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19866
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19870
 dest = $2; //@line 19873
 stop = dest + 50 | 0; //@line 19873
 do {
  HEAP8[dest >> 0] = 0; //@line 19873
  dest = dest + 1 | 0; //@line 19873
 } while ((dest | 0) < (stop | 0));
 $15 = __ZN16LoRaWANInterface7receiveEhPhti(21880, 15, $2, 50, 3) | 0; //@line 19874
 $16 = $15 << 16 >> 16; //@line 19875
 if ($15 << 16 >> 16 < 0) {
  HEAP32[$4 >> 2] = $16; //@line 19878
  _printf(14439, $4) | 0; //@line 19879
 } else {
  HEAP32[$8 >> 2] = $16; //@line 19881
  _printf(14466, $8) | 0; //@line 19882
  if ($15 << 16 >> 16) {
   $$07$i = 0; //@line 19885
   $20 = 0; //@line 19885
   do {
    HEAP32[$12 >> 2] = HEAPU8[$2 + $20 >> 0]; //@line 19890
    _printf(14493, $12) | 0; //@line 19891
    $$07$i = $$07$i + 1 << 24 >> 24; //@line 19892
    $20 = $$07$i & 255; //@line 19893
   } while (($20 | 0) < ($16 | 0));
  }
 }
 return;
}
function __ZN4mbed11InterruptInD2Ev($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 1338
 HEAP32[$0 >> 2] = 656; //@line 1339
 _gpio_irq_free($0 + 28 | 0); //@line 1341
 $3 = HEAP32[$0 + 68 >> 2] | 0; //@line 1343
 do {
  if ($3 | 0) {
   $7 = HEAP32[$3 + 8 >> 2] | 0; //@line 1349
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 1350
   FUNCTION_TABLE_vi[$7 & 1023]($0 + 56 | 0); //@line 1351
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 77; //@line 1354
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 1356
    sp = STACKTOP; //@line 1357
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 1360
    break;
   }
  }
 } while (0);
 $10 = HEAP32[$0 + 52 >> 2] | 0; //@line 1366
 if (!$10) {
  return;
 }
 $14 = HEAP32[$10 + 8 >> 2] | 0; //@line 1373
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 1374
 FUNCTION_TABLE_vi[$14 & 1023]($0 + 40 | 0); //@line 1375
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 78; //@line 1378
  sp = STACKTOP; //@line 1379
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 1382
 return;
}
function __ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 8765
 $1 = $0 + 12 | 0; //@line 8766
 $2 = HEAP32[$1 >> 2] | 0; //@line 8767
 do {
  if (!$2) {
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 8771
   _mbed_assert_internal(13874, 13879, 528); //@line 8772
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 286; //@line 8775
    HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 8777
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 8779
    sp = STACKTOP; //@line 8780
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 8783
    $7 = HEAP32[$1 >> 2] | 0; //@line 8785
    break;
   }
  } else {
   $7 = $2; //@line 8789
  }
 } while (0);
 $6 = HEAP32[$7 >> 2] | 0; //@line 8792
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8793
 FUNCTION_TABLE_vi[$6 & 1023]($0); //@line 8794
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 287; //@line 8797
  sp = STACKTOP; //@line 8798
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 8801
  return;
 }
}
function __ZN4mbed7Timeout7handlerEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 1774
 $1 = $0 + 40 | 0; //@line 1775
 $2 = $0 + 52 | 0; //@line 1776
 $3 = HEAP32[$2 >> 2] | 0; //@line 1777
 do {
  if (!$3) {
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 1781
   _mbed_assert_internal(13874, 13879, 528); //@line 1782
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 92; //@line 1785
    HEAP32[$AsyncCtx2 + 4 >> 2] = $2; //@line 1787
    HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 1789
    sp = STACKTOP; //@line 1790
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 1793
    $8 = HEAP32[$2 >> 2] | 0; //@line 1795
    break;
   }
  } else {
   $8 = $3; //@line 1799
  }
 } while (0);
 $7 = HEAP32[$8 >> 2] | 0; //@line 1802
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 1803
 FUNCTION_TABLE_vi[$7 & 1023]($1); //@line 1804
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 93; //@line 1807
  sp = STACKTOP; //@line 1808
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1811
  return;
 }
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_127($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx24 = 0, sp = 0;
 sp = STACKTOP; //@line 29305
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29309
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29311
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29313
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29315
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29317
 $13 = $4 + 12 | 0; //@line 29319
 HEAP32[$13 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 29320
 $ReallocAsyncCtx24 = _emscripten_realloc_async_context(20) | 0; //@line 29321
 $14 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 5) | 0; //@line 29322
 if (!___async) {
  HEAP32[___async_retval >> 2] = $14; //@line 29326
  ___async_unwind = 0; //@line 29327
 }
 HEAP32[$ReallocAsyncCtx24 >> 2] = 184; //@line 29329
 HEAP32[$ReallocAsyncCtx24 + 4 >> 2] = $13; //@line 29331
 HEAP32[$ReallocAsyncCtx24 + 8 >> 2] = $8; //@line 29333
 HEAP32[$ReallocAsyncCtx24 + 12 >> 2] = $10; //@line 29335
 HEAP32[$ReallocAsyncCtx24 + 16 >> 2] = $12; //@line 29337
 sp = STACKTOP; //@line 29338
 return;
}
function __ZN4mbed6TickerD0Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 6456
 HEAP32[$0 >> 2] = 10096; //@line 6457
 $1 = $0 + 40 | 0; //@line 6458
 _emscripten_asm_const_ii(10, $1 | 0) | 0; //@line 6459
 $4 = HEAP32[$0 + 52 >> 2] | 0; //@line 6461
 do {
  if ($4 | 0) {
   $7 = HEAP32[$4 + 8 >> 2] | 0; //@line 6466
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 6467
   FUNCTION_TABLE_vi[$7 & 1023]($1); //@line 6468
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 636; //@line 6471
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 6473
    sp = STACKTOP; //@line 6474
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 6477
    break;
   }
  }
 } while (0);
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6482
 __ZN4mbed10TimerEventD2Ev($0); //@line 6483
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 637; //@line 6486
  HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 6488
  sp = STACKTOP; //@line 6489
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6492
  __ZdlPv($0); //@line 6493
  return;
 }
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_202($0) {
 $0 = $0 | 0;
 var $$pre122 = 0, $10 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 2316
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2318
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2320
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2322
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2324
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 2326
 $$pre122 = HEAP32[$2 >> 2] | 0; //@line 2327
 if (!$$pre122) {
  HEAP32[$4 >> 2] = 0; //@line 2330
  HEAP32[___async_retval >> 2] = $10; //@line 2332
  return;
 }
 $13 = HEAP32[$$pre122 + 4 >> 2] | 0; //@line 2336
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(20) | 0; //@line 2337
 FUNCTION_TABLE_vii[$13 & 31]($6, $8); //@line 2338
 if (!___async) {
  ___async_unwind = 0; //@line 2341
 }
 HEAP32[$ReallocAsyncCtx14 >> 2] = 480; //@line 2343
 HEAP32[$ReallocAsyncCtx14 + 4 >> 2] = $2; //@line 2345
 HEAP32[$ReallocAsyncCtx14 + 8 >> 2] = $4; //@line 2347
 HEAP32[$ReallocAsyncCtx14 + 12 >> 2] = $8; //@line 2349
 HEAP32[$ReallocAsyncCtx14 + 16 >> 2] = $10; //@line 2351
 sp = STACKTOP; //@line 2352
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_425($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 31251
 $4 = HEAP8[$0 + 8 >> 0] | 0; //@line 31255
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31257
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 31258
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 76 >> 2] | 0; //@line 31261
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 31262
 FUNCTION_TABLE_vi[$10 & 1023]($7); //@line 31263
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 522; //@line 31266
  $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 31267
  HEAP8[$11 >> 0] = $4; //@line 31268
  $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 31269
  HEAP32[$12 >> 2] = $6; //@line 31270
  sp = STACKTOP; //@line 31271
  return;
 }
 ___async_unwind = 0; //@line 31274
 HEAP32[$ReallocAsyncCtx9 >> 2] = 522; //@line 31275
 $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 31276
 HEAP8[$11 >> 0] = $4; //@line 31277
 $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 31278
 HEAP32[$12 >> 2] = $6; //@line 31279
 sp = STACKTOP; //@line 31280
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_128($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx29 = 0, sp = 0;
 sp = STACKTOP; //@line 29344
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29348
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29350
 if (HEAP32[$0 + 4 >> 2] | 0) {
  HEAP32[$4 >> 2] = 6; //@line 29353
  HEAP32[___async_retval >> 2] = -1014; //@line 29355
  return;
 }
 $ReallocAsyncCtx29 = _emscripten_realloc_async_context(12) | 0; //@line 29358
 _mbed_assert_internal(12025, 11293, 1231); //@line 29359
 if (___async) {
  HEAP32[$ReallocAsyncCtx29 >> 2] = 186; //@line 29362
  $8 = $ReallocAsyncCtx29 + 4 | 0; //@line 29363
  HEAP32[$8 >> 2] = $4; //@line 29364
  $9 = $ReallocAsyncCtx29 + 8 | 0; //@line 29365
  HEAP32[$9 >> 2] = $6; //@line 29366
  sp = STACKTOP; //@line 29367
  return;
 }
 ___async_unwind = 0; //@line 29370
 HEAP32[$ReallocAsyncCtx29 >> 2] = 186; //@line 29371
 $8 = $ReallocAsyncCtx29 + 4 | 0; //@line 29372
 HEAP32[$8 >> 2] = $4; //@line 29373
 $9 = $ReallocAsyncCtx29 + 8 | 0; //@line 29374
 HEAP32[$9 >> 2] = $6; //@line 29375
 sp = STACKTOP; //@line 29376
 return;
}
function __ZN12LoRaWANStack9handle_txEhPKhth__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 5652
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5654
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5656
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5658
 HEAP32[$2 + 1876 >> 2] = 5; //@line 5660
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 5661
 $8 = __ZN12LoRaWANStack18lora_state_machineEv($2) | 0; //@line 5662
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 221; //@line 5665
  $9 = $ReallocAsyncCtx6 + 4 | 0; //@line 5666
  HEAP32[$9 >> 2] = $4; //@line 5667
  $10 = $ReallocAsyncCtx6 + 8 | 0; //@line 5668
  HEAP32[$10 >> 2] = $6; //@line 5669
  sp = STACKTOP; //@line 5670
  return;
 }
 HEAP32[___async_retval >> 2] = $8; //@line 5674
 ___async_unwind = 0; //@line 5675
 HEAP32[$ReallocAsyncCtx6 >> 2] = 221; //@line 5676
 $9 = $ReallocAsyncCtx6 + 4 | 0; //@line 5677
 HEAP32[$9 >> 2] = $4; //@line 5678
 $10 = $ReallocAsyncCtx6 + 8 | 0; //@line 5679
 HEAP32[$10 >> 2] = $6; //@line 5680
 sp = STACKTOP; //@line 5681
 return;
}
function __ZN18LoRaMacChannelPlan11remove_planEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 4680
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4682
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4684
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4686
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4688
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 4690
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  HEAP32[___async_retval >> 2] = -1003; //@line 4696
  return;
 }
 $12 = HEAP32[$2 >> 2] | 0; //@line 4699
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 4700
 __ZN7LoRaPHY18put_radio_to_sleepEv($12); //@line 4701
 if (!___async) {
  ___async_unwind = 0; //@line 4704
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 484; //@line 4706
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $4; //@line 4708
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 4710
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 4712
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 4714
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 4716
 sp = STACKTOP; //@line 4717
 return;
}
function _ticker_read_us__async_cb_22($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $7 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 18666
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18668
 $3 = $2 + 4 | 0; //@line 18669
 $4 = HEAP32[$3 >> 2] | 0; //@line 18670
 $7 = HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0; //@line 18673
 $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 18674
 $8 = FUNCTION_TABLE_i[$7 & 7]() | 0; //@line 18675
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 611; //@line 18678
  $9 = $ReallocAsyncCtx + 4 | 0; //@line 18679
  HEAP32[$9 >> 2] = $3; //@line 18680
  $10 = $ReallocAsyncCtx + 8 | 0; //@line 18681
  HEAP32[$10 >> 2] = $4; //@line 18682
  sp = STACKTOP; //@line 18683
  return;
 }
 HEAP32[___async_retval >> 2] = $8; //@line 18687
 ___async_unwind = 0; //@line 18688
 HEAP32[$ReallocAsyncCtx >> 2] = 611; //@line 18689
 $9 = $ReallocAsyncCtx + 4 | 0; //@line 18690
 HEAP32[$9 >> 2] = $3; //@line 18691
 $10 = $ReallocAsyncCtx + 8 | 0; //@line 18692
 HEAP32[$10 >> 2] = $4; //@line 18693
 sp = STACKTOP; //@line 18694
 return;
}
function _invoke_ticker($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 6523
 $2 = $0 + 12 | 0; //@line 6525
 $3 = HEAP32[$2 >> 2] | 0; //@line 6526
 do {
  if (!$3) {
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6530
   _mbed_assert_internal(13874, 13879, 528); //@line 6531
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 639; //@line 6534
    HEAP32[$AsyncCtx2 + 4 >> 2] = $2; //@line 6536
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 6538
    sp = STACKTOP; //@line 6539
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6542
    $8 = HEAP32[$2 >> 2] | 0; //@line 6544
    break;
   }
  } else {
   $8 = $3; //@line 6548
  }
 } while (0);
 $7 = HEAP32[$8 >> 2] | 0; //@line 6551
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6553
 FUNCTION_TABLE_vi[$7 & 1023]($0); //@line 6554
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 640; //@line 6557
  sp = STACKTOP; //@line 6558
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6561
  return;
 }
}
function __ZN4mbed7TimeoutD0Ev($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 1730
 HEAP32[$0 >> 2] = 10096; //@line 1731
 __ZN4mbed6Ticker6detachEv($0); //@line 1732
 $2 = HEAP32[$0 + 52 >> 2] | 0; //@line 1734
 do {
  if ($2 | 0) {
   $6 = HEAP32[$2 + 8 >> 2] | 0; //@line 1740
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 1741
   FUNCTION_TABLE_vi[$6 & 1023]($0 + 40 | 0); //@line 1742
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 90; //@line 1745
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 1747
    sp = STACKTOP; //@line 1748
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 1751
    break;
   }
  }
 } while (0);
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1756
 __ZN4mbed10TimerEventD2Ev($0); //@line 1757
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 91; //@line 1760
  HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 1762
  sp = STACKTOP; //@line 1763
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 1766
  __ZdlPv($0); //@line 1767
  return;
 }
}
function __ZN16LoRaWANInterface4sendEhPKhti($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $10 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3568
 do {
  if (HEAP8[$0 + 4 >> 0] | 0) {
   $10 = HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0; //@line 3576
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 3577
   FUNCTION_TABLE_ii[$10 & 15]($0) | 0; //@line 3578
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 111; //@line 3581
    HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 3583
    HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 3585
    HEAP8[$AsyncCtx + 12 >> 0] = $1; //@line 3587
    HEAP16[$AsyncCtx + 14 >> 1] = $3; //@line 3589
    sp = STACKTOP; //@line 3590
    return 0; //@line 3591
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 3593
    break;
   }
  }
 } while (0);
 if (!$2) {
  $$0 = -1003; //@line 3600
  return $$0 | 0; //@line 3601
 }
 $$0 = __ZN12LoRaWANStack9handle_txEhPKhth(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1, $2, $3, $4 & 255) | 0; //@line 3606
 return $$0 | 0; //@line 3607
}
function _abort_message($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $2 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 14852
 STACKTOP = STACKTOP + 16 | 0; //@line 14853
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14853
 $1 = sp; //@line 14854
 HEAP32[$1 >> 2] = $varargs; //@line 14855
 $2 = HEAP32[2535] | 0; //@line 14856
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 14857
 _vfprintf($2, $0, $1) | 0; //@line 14858
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 684; //@line 14861
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 14863
  sp = STACKTOP; //@line 14864
  STACKTOP = sp; //@line 14865
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 14867
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 14868
 _fputc(10, $2) | 0; //@line 14869
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 685; //@line 14872
  sp = STACKTOP; //@line 14873
  STACKTOP = sp; //@line 14874
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 14876
  _abort(); //@line 14877
 }
}
function __ZN7LoRaPHY17calculate_backoffEP16backoff_params_s($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$034 = 0, $$sink = 0, $11 = 0, $13 = 0, $14 = 0, $18 = 0, $3 = 0, $30 = 0;
 $3 = HEAP32[$0 + 72 >> 2] | 0; //@line 23310
 $11 = HEAPU8[(HEAP32[$0 + 112 >> 2] | 0) + ((HEAPU8[$1 + 3 >> 0] | 0) * 12 | 0) + 9 >> 0] | 0; //@line 23318
 $13 = HEAP16[$3 + ($11 * 24 | 0) >> 1] | 0; //@line 23320
 $14 = $3 + ($11 * 24 | 0) + 12 | 0; //@line 23321
 HEAP32[$14 >> 2] = 0; //@line 23322
 if (!(HEAP8[$1 >> 0] | 0)) {
  $18 = HEAP32[$1 + 4 >> 2] | 0; //@line 23327
  $$0 = $18 >>> 0 < 36e5 ? 100 : $18 >>> 0 < 396e5 ? 1e3 : 1e4; //@line 23331
  $$034 = ($13 & 65535) > ($$0 & 65535) ? $13 : $$0; //@line 23334
 } else {
  $$034 = $13; //@line 23336
 }
 if (!(HEAP8[$1 + 2 >> 0] | 0)) {
  if (!(HEAP8[$1 + 1 >> 0] | 0)) {
   $$sink = 0; //@line 23346
   HEAP32[$14 >> 2] = $$sink; //@line 23347
   return;
  }
 }
 $30 = HEAP32[$1 + 8 >> 2] | 0; //@line 23352
 $$sink = (Math_imul($30, $$034 & 65535) | 0) - $30 | 0; //@line 23356
 HEAP32[$14 >> 2] = $$sink; //@line 23357
 return;
}
function __ZN4mbed6TickerD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 6415
 HEAP32[$0 >> 2] = 10096; //@line 6416
 $1 = $0 + 40 | 0; //@line 6417
 _emscripten_asm_const_ii(10, $1 | 0) | 0; //@line 6418
 $4 = HEAP32[$0 + 52 >> 2] | 0; //@line 6420
 do {
  if ($4 | 0) {
   $7 = HEAP32[$4 + 8 >> 2] | 0; //@line 6425
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 6426
   FUNCTION_TABLE_vi[$7 & 1023]($1); //@line 6427
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 634; //@line 6430
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 6432
    sp = STACKTOP; //@line 6433
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 6436
    break;
   }
  }
 } while (0);
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6441
 __ZN4mbed10TimerEventD2Ev($0); //@line 6442
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 635; //@line 6445
  sp = STACKTOP; //@line 6446
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6449
  return;
 }
}
function __ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 32566
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32568
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32570
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32572
 HEAP32[$2 + 1960 >> 2] = 0; //@line 32574
 HEAP32[$2 + 1956 >> 2] = 0; //@line 32576
 HEAP32[$4 >> 2] = 1; //@line 32577
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 32578
 $9 = __ZN12LoRaWANStack18lora_state_machineEv($2) | 0; //@line 32579
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 228; //@line 32582
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 32583
  HEAP32[$10 >> 2] = $6; //@line 32584
  sp = STACKTOP; //@line 32585
  return;
 }
 HEAP32[___async_retval >> 2] = $9; //@line 32589
 ___async_unwind = 0; //@line 32590
 HEAP32[$ReallocAsyncCtx4 >> 2] = 228; //@line 32591
 $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 32592
 HEAP32[$10 >> 2] = $6; //@line 32593
 sp = STACKTOP; //@line 32594
 return;
}
function __ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $15 = 0, $2 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 6110
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6112
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6116
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 6118
 $9 = HEAP32[$2 >> 2] | 0; //@line 6119
 $12 = HEAP32[(HEAP32[$9 >> 2] | 0) + 68 >> 2] | 0; //@line 6122
 $14 = HEAP16[(HEAP32[$0 + 8 >> 2] | 0) + 12 >> 1] | 0; //@line 6124
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 6125
 FUNCTION_TABLE_viiii[$12 & 7]($9, $6, $8, $14); //@line 6126
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 535; //@line 6129
  $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 6130
  HEAP32[$15 >> 2] = $2; //@line 6131
  sp = STACKTOP; //@line 6132
  return;
 }
 ___async_unwind = 0; //@line 6135
 HEAP32[$ReallocAsyncCtx2 >> 2] = 535; //@line 6136
 $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 6137
 HEAP32[$15 >> 2] = $2; //@line 6138
 sp = STACKTOP; //@line 6139
 return;
}
function _mbed_error_printf__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $2 = 0, $4 = 0, $6 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 3259
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3261
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3263
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3265
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 3267
 if (($AsyncRetVal | 0) <= 0) {
  return;
 }
 if (!(HEAP32[5399] | 0)) {
  _serial_init(21600, 2, 3); //@line 3275
 }
 $12 = HEAP8[$6 >> 0] | 0; //@line 3278
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 3279
 _serial_putc(21600, $12); //@line 3280
 if (!___async) {
  ___async_unwind = 0; //@line 3283
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 630; //@line 3285
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = 0; //@line 3287
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $AsyncRetVal; //@line 3289
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 3291
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $4; //@line 3293
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $6; //@line 3295
 sp = STACKTOP; //@line 3296
 return;
}
function __ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb_173($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 32601
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32605
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32607
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32609
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32611
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 32613
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 32615
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 7; //@line 32616
 HEAP8[$4 >> 0] = 1; //@line 32617
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 32618
 __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($6, $8) | 0; //@line 32619
 if (!___async) {
  ___async_unwind = 0; //@line 32622
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 227; //@line 32624
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $10; //@line 32626
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $12; //@line 32628
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $14; //@line 32630
 sp = STACKTOP; //@line 32631
 return;
}
function __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_393($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 29129
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29133
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29135
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 29136
 if (!$6) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 29140
  return;
 }
 $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 29144
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 29145
 FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 29146
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 284; //@line 29149
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 29150
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 29151
  sp = STACKTOP; //@line 29152
  return;
 }
 ___async_unwind = 0; //@line 29155
 HEAP32[$ReallocAsyncCtx2 >> 2] = 284; //@line 29156
 $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 29157
 HEAP32[$10 >> 2] = $AsyncRetVal; //@line 29158
 sp = STACKTOP; //@line 29159
 return;
}
function _frexp($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $$0 = 0.0, $$016 = 0.0, $2 = 0, $3 = 0, $4 = 0, $9 = 0.0, $storemerge = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 14095
 $2 = HEAP32[tempDoublePtr >> 2] | 0; //@line 14095
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 14096
 $4 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0; //@line 14097
 switch ($4 & 2047) {
 case 0:
  {
   if ($0 != 0.0) {
    $9 = +_frexp($0 * 18446744073709552000.0, $1); //@line 14106
    $$016 = $9; //@line 14109
    $storemerge = (HEAP32[$1 >> 2] | 0) + -64 | 0; //@line 14109
   } else {
    $$016 = $0; //@line 14111
    $storemerge = 0; //@line 14111
   }
   HEAP32[$1 >> 2] = $storemerge; //@line 14113
   $$0 = $$016; //@line 14114
   break;
  }
 case 2047:
  {
   $$0 = $0; //@line 14118
   break;
  }
 default:
  {
   HEAP32[$1 >> 2] = ($4 & 2047) + -1022; //@line 14124
   HEAP32[tempDoublePtr >> 2] = $2; //@line 14127
   HEAP32[tempDoublePtr + 4 >> 2] = $3 & -2146435073 | 1071644672; //@line 14127
   $$0 = +HEAPF64[tempDoublePtr >> 3]; //@line 14128
  }
 }
 return +$$0;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_136($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 29784
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29788
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29790
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29792
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29794
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29796
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29798
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 1; //@line 29799
 HEAP8[$4 >> 0] = 1; //@line 29800
 $ReallocAsyncCtx15 = _emscripten_realloc_async_context(16) | 0; //@line 29801
 __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($6, $8) | 0; //@line 29802
 if (!___async) {
  ___async_unwind = 0; //@line 29805
 }
 HEAP32[$ReallocAsyncCtx15 >> 2] = 176; //@line 29807
 HEAP32[$ReallocAsyncCtx15 + 4 >> 2] = $10; //@line 29809
 HEAP32[$ReallocAsyncCtx15 + 8 >> 2] = $12; //@line 29811
 HEAP32[$ReallocAsyncCtx15 + 12 >> 2] = $14; //@line 29813
 sp = STACKTOP; //@line 29814
 return;
}
function _equeue_sema_wait($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $20 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP; //@line 3353
 STACKTOP = STACKTOP + 16 | 0; //@line 3354
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 3354
 $2 = sp + 8 | 0; //@line 3355
 $3 = sp; //@line 3356
 _pthread_mutex_lock($0 | 0) | 0; //@line 3357
 $4 = $0 + 76 | 0; //@line 3358
 do {
  if (!(HEAP8[$4 >> 0] | 0)) {
   if (($1 | 0) < 0) {
    _pthread_cond_wait($0 + 28 | 0, $0 | 0) | 0; //@line 3366
    break;
   } else {
    _gettimeofday($2 | 0, 0) | 0; //@line 3369
    HEAP32[$3 >> 2] = (HEAP32[$2 >> 2] | 0) + (($1 >>> 0) / 1e3 | 0); //@line 3373
    HEAP32[$3 + 4 >> 2] = ((HEAP32[$2 + 4 >> 2] | 0) * 1e3 | 0) + ($1 * 1e6 | 0); //@line 3380
    _pthread_cond_timedwait($0 + 28 | 0, $0 | 0, $3 | 0) | 0; //@line 3382
    break;
   }
  }
 } while (0);
 $20 = (HEAP8[$4 >> 0] | 0) != 0; //@line 3388
 HEAP8[$4 >> 0] = 0; //@line 3389
 _pthread_mutex_unlock($0 | 0) | 0; //@line 3390
 STACKTOP = sp; //@line 3391
 return $20 | 0; //@line 3391
}
function ___cxa_can_catch($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16481
 STACKTOP = STACKTOP + 16 | 0; //@line 16482
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16482
 $3 = sp; //@line 16483
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 16485
 $7 = HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0; //@line 16488
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 16489
 $8 = FUNCTION_TABLE_iiii[$7 & 15]($0, $1, $3) | 0; //@line 16490
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 708; //@line 16493
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 16495
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 16497
  HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 16499
  sp = STACKTOP; //@line 16500
  STACKTOP = sp; //@line 16501
  return 0; //@line 16501
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 16503
 if ($8) {
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2]; //@line 16507
 }
 STACKTOP = sp; //@line 16509
 return $8 & 1 | 0; //@line 16509
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_125($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx25 = 0, sp = 0;
 sp = STACKTOP; //@line 29238
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29242
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29244
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29246
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29248
 $11 = $4 + 12 | 0; //@line 29250
 HEAP32[$11 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 29251
 $ReallocAsyncCtx25 = _emscripten_realloc_async_context(16) | 0; //@line 29252
 $12 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 0) | 0; //@line 29253
 if (!___async) {
  HEAP32[___async_retval >> 2] = $12; //@line 29257
  ___async_unwind = 0; //@line 29258
 }
 HEAP32[$ReallocAsyncCtx25 >> 2] = 178; //@line 29260
 HEAP32[$ReallocAsyncCtx25 + 4 >> 2] = $11; //@line 29262
 HEAP32[$ReallocAsyncCtx25 + 8 >> 2] = $8; //@line 29264
 HEAP32[$ReallocAsyncCtx25 + 12 >> 2] = $10; //@line 29266
 sp = STACKTOP; //@line 29267
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_123($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx26 = 0, sp = 0;
 sp = STACKTOP; //@line 29171
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29175
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29177
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29179
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29181
 $11 = $4 + 12 | 0; //@line 29183
 HEAP32[$11 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 29184
 $ReallocAsyncCtx26 = _emscripten_realloc_async_context(16) | 0; //@line 29185
 $12 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 0) | 0; //@line 29186
 if (!___async) {
  HEAP32[___async_retval >> 2] = $12; //@line 29190
  ___async_unwind = 0; //@line 29191
 }
 HEAP32[$ReallocAsyncCtx26 >> 2] = 169; //@line 29193
 HEAP32[$ReallocAsyncCtx26 + 4 >> 2] = $11; //@line 29195
 HEAP32[$ReallocAsyncCtx26 + 8 >> 2] = $8; //@line 29197
 HEAP32[$ReallocAsyncCtx26 + 12 >> 2] = $10; //@line 29199
 sp = STACKTOP; //@line 29200
 return;
}
function __ZN7LoRaPHY19num_active_channelsEPthh($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$01012 = 0, $$011 = 0, $8 = 0, $9 = 0, $indvars$iv = 0, $wide$trip$count = 0;
 if (!(($1 | 0) != 0 & ($2 & 255) < ($3 & 255))) {
  $$011 = 0; //@line 22260
  return $$011 | 0; //@line 22261
 }
 $wide$trip$count = $3 & 255; //@line 22264
 $$01012 = 0; //@line 22265
 $indvars$iv = $2 & 255; //@line 22265
 do {
  $8 = HEAP16[$1 + ($indvars$iv << 1) >> 1] | 0; //@line 22268
  $9 = $8 & 65535; //@line 22269
  $$01012 = ($$01012 & 255) + (($9 & 1) + ($9 >>> 1 & 1) + ($9 >>> 2 & 1) + ($9 >>> 3 & 1) + ($9 >>> 4 & 1) + ($9 >>> 5 & 1) + ($9 >>> 6 & 1) + ($9 >>> 7 & 1) + ($9 >>> 8 & 1) + ($9 >>> 9 & 1) + ($9 >>> 10 & 1) + ($9 >>> 11 & 1) + ($9 >>> 12 & 1) + ($9 >>> 13 & 1) + ($9 >>> 14 & 1) + (($8 & 65535) >>> 15 & 65535) & 255) | 0; //@line 22318
  $indvars$iv = $indvars$iv + 1 | 0; //@line 22319
 } while (($indvars$iv | 0) != ($wide$trip$count | 0));
 $$011 = $$01012 & 255; //@line 22328
 return $$011 | 0; //@line 22329
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx27 = 0, sp = 0;
 sp = STACKTOP; //@line 29104
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29108
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29110
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29112
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29114
 $11 = $4 + 12 | 0; //@line 29116
 HEAP32[$11 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 29117
 $ReallocAsyncCtx27 = _emscripten_realloc_async_context(16) | 0; //@line 29118
 $12 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 1) | 0; //@line 29119
 if (!___async) {
  HEAP32[___async_retval >> 2] = $12; //@line 29123
  ___async_unwind = 0; //@line 29124
 }
 HEAP32[$ReallocAsyncCtx27 >> 2] = 164; //@line 29126
 HEAP32[$ReallocAsyncCtx27 + 4 >> 2] = $11; //@line 29128
 HEAP32[$ReallocAsyncCtx27 + 8 >> 2] = $8; //@line 29130
 HEAP32[$ReallocAsyncCtx27 + 12 >> 2] = $10; //@line 29132
 sp = STACKTOP; //@line 29133
 return;
}
function _mbed_error_printf__async_cb_224($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 3303
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3307
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3309
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3311
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3313
 $12 = (HEAP32[$0 + 4 >> 2] | 0) + 1 | 0; //@line 3314
 if (($12 | 0) == ($4 | 0)) {
  return;
 }
 $14 = HEAP8[$10 + $12 >> 0] | 0; //@line 3321
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 3322
 _serial_putc(21600, $14); //@line 3323
 if (!___async) {
  ___async_unwind = 0; //@line 3326
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 630; //@line 3328
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $12; //@line 3330
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 3332
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 3334
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 3336
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 3338
 sp = STACKTOP; //@line 3339
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_319($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 11987
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11991
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11993
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 11994
 if (!$7) {
  HEAP32[___async_retval >> 2] = $4; //@line 11998
  return;
 }
 $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 12002
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 12003
 FUNCTION_TABLE_vi[$10 & 1023]($6); //@line 12004
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 339; //@line 12007
  $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 12008
  HEAP32[$11 >> 2] = $4; //@line 12009
  sp = STACKTOP; //@line 12010
  return;
 }
 ___async_unwind = 0; //@line 12013
 HEAP32[$ReallocAsyncCtx5 >> 2] = 339; //@line 12014
 $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 12015
 HEAP32[$11 >> 2] = $4; //@line 12016
 sp = STACKTOP; //@line 12017
 return;
}
function _vfprintf__async_cb($0) {
 $0 = $0 | 0;
 var $$ = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $33 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30591
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30599
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30601
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 30603
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 30605
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 30607
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 30609
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 30611
 $$ = (HEAP32[$2 >> 2] | 0) == 0 ? -1 : HEAP32[$0 + 8 >> 2] | 0; //@line 30622
 HEAP32[HEAP32[$0 + 16 >> 2] >> 2] = HEAP32[$0 + 12 >> 2]; //@line 30623
 HEAP32[$10 >> 2] = 0; //@line 30624
 HEAP32[$12 >> 2] = 0; //@line 30625
 HEAP32[$14 >> 2] = 0; //@line 30626
 HEAP32[$2 >> 2] = 0; //@line 30627
 $33 = HEAP32[$16 >> 2] | 0; //@line 30628
 HEAP32[$16 >> 2] = $33 | $18; //@line 30633
 if ($20 | 0) {
  ___unlockfile($22); //@line 30636
 }
 HEAP32[___async_retval >> 2] = ($33 & 32 | 0) == 0 ? $$ : -1; //@line 30639
 return;
}
function _schedule_interrupt__async_cb_8($0) {
 $0 = $0 | 0;
 var $16 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 17446
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17450
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17452
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 17454
 $8 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 17455
 if ($4 >>> 0 > $8 >>> 0) {
  if (!($AsyncRetVal >>> 0 >= $4 >>> 0 | $AsyncRetVal >>> 0 < $8 >>> 0)) {
   return;
  }
 } else {
  if (!($AsyncRetVal >>> 0 >= $4 >>> 0 & $AsyncRetVal >>> 0 < $8 >>> 0)) {
   return;
  }
 }
 $16 = HEAP32[(HEAP32[$6 >> 2] | 0) + 20 >> 2] | 0; //@line 17474
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 17475
 FUNCTION_TABLE_v[$16 & 15](); //@line 17476
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 607; //@line 17479
  sp = STACKTOP; //@line 17480
  return;
 }
 ___async_unwind = 0; //@line 17483
 HEAP32[$ReallocAsyncCtx6 >> 2] = 607; //@line 17484
 sp = STACKTOP; //@line 17485
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_367($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 15400
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15404
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15406
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 15407
 if (!$7) {
  HEAP32[___async_retval >> 2] = $4; //@line 15411
  return;
 }
 $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 15415
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 15416
 FUNCTION_TABLE_vi[$10 & 1023]($6); //@line 15417
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 199; //@line 15420
  $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 15421
  HEAP32[$11 >> 2] = $4; //@line 15422
  sp = STACKTOP; //@line 15423
  return;
 }
 ___async_unwind = 0; //@line 15426
 HEAP32[$ReallocAsyncCtx5 >> 2] = 199; //@line 15427
 $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 15428
 HEAP32[$11 >> 2] = $4; //@line 15429
 sp = STACKTOP; //@line 15430
 return;
}
function __ZN4mbed7TimeoutD2Ev($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 1689
 HEAP32[$0 >> 2] = 10096; //@line 1690
 __ZN4mbed6Ticker6detachEv($0); //@line 1691
 $2 = HEAP32[$0 + 52 >> 2] | 0; //@line 1693
 do {
  if ($2 | 0) {
   $6 = HEAP32[$2 + 8 >> 2] | 0; //@line 1699
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 1700
   FUNCTION_TABLE_vi[$6 & 1023]($0 + 40 | 0); //@line 1701
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 88; //@line 1704
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 1706
    sp = STACKTOP; //@line 1707
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 1710
    break;
   }
  }
 } while (0);
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 1715
 __ZN4mbed10TimerEventD2Ev($0); //@line 1716
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 89; //@line 1719
  sp = STACKTOP; //@line 1720
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 1723
  return;
 }
}
function __Z22compute_join_frame_micPKhtS0_Pj__async_cb_331($0) {
 $0 = $0 | 0;
 var $$0 = 0, $19 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 12663
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 12667
 if (!$AsyncRetVal) {
  HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = (HEAPU8[22554] | 0) << 16 | (HEAPU8[22555] | 0) << 24 | (HEAPU8[22553] | 0) << 8 | (HEAPU8[22552] | 0); //@line 12684
  $$0 = 0; //@line 12685
 } else {
  $$0 = $AsyncRetVal; //@line 12687
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 12689
 _mbedtls_cipher_free(21244); //@line 12690
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 502; //@line 12693
  $19 = $ReallocAsyncCtx5 + 4 | 0; //@line 12694
  HEAP32[$19 >> 2] = $$0; //@line 12695
  sp = STACKTOP; //@line 12696
  return;
 }
 ___async_unwind = 0; //@line 12699
 HEAP32[$ReallocAsyncCtx5 >> 2] = 502; //@line 12700
 $19 = $ReallocAsyncCtx5 + 4 | 0; //@line 12701
 HEAP32[$19 >> 2] = $$0; //@line 12702
 sp = STACKTOP; //@line 12703
 return;
}
function __ZN16LoRaWANInterface7connectEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3411
 STACKTOP = STACKTOP + 32 | 0; //@line 3412
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 3412
 $1 = sp; //@line 3413
 HEAP8[$1 >> 0] = 1; //@line 3414
 HEAP32[$1 + 4 >> 2] = 0; //@line 3416
 HEAP32[$1 + 8 >> 2] = 0; //@line 3418
 HEAP32[$1 + 12 >> 2] = 22520; //@line 3420
 HEAP32[$1 + 16 >> 2] = 22536; //@line 3422
 $8 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0; //@line 3425
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 3426
 $9 = FUNCTION_TABLE_iii[$8 & 31]($0, $1) | 0; //@line 3427
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 110; //@line 3430
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 3432
  sp = STACKTOP; //@line 3433
  STACKTOP = sp; //@line 3434
  return 0; //@line 3434
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3436
  STACKTOP = sp; //@line 3437
  return $9 | 0; //@line 3437
 }
 return 0; //@line 3439
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $13 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15375
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 15381
  } else {
   $10 = HEAP32[$0 + 8 >> 2] | 0; //@line 15384
   $13 = HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] | 0; //@line 15387
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 15388
   FUNCTION_TABLE_viiiiii[$13 & 3]($10, $1, $2, $3, $4, $5); //@line 15389
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 690; //@line 15392
    sp = STACKTOP; //@line 15393
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 15396
    break;
   }
  }
 } while (0);
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_346($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 13723
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13727
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13729
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 13730
 if (!$7) {
  HEAP32[___async_retval >> 2] = $4; //@line 13734
  return;
 }
 $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 13738
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 13739
 FUNCTION_TABLE_vi[$10 & 1023]($6); //@line 13740
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 207; //@line 13743
  $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 13744
  HEAP32[$11 >> 2] = $4; //@line 13745
  sp = STACKTOP; //@line 13746
  return;
 }
 ___async_unwind = 0; //@line 13749
 HEAP32[$ReallocAsyncCtx5 >> 2] = 207; //@line 13750
 $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 13751
 HEAP32[$11 >> 2] = $4; //@line 13752
 sp = STACKTOP; //@line 13753
 return;
}
function __Z11compute_micPKhtS0_jhjPj__async_cb_310($0) {
 $0 = $0 | 0;
 var $$0 = 0, $19 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 11074
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 11078
 if (!$AsyncRetVal) {
  HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = (HEAPU8[22554] | 0) << 16 | (HEAPU8[22555] | 0) << 24 | (HEAPU8[22553] | 0) << 8 | (HEAPU8[22552] | 0); //@line 11095
  $$0 = 0; //@line 11096
 } else {
  $$0 = $AsyncRetVal; //@line 11098
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 11100
 _mbedtls_cipher_free(21244); //@line 11101
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 497; //@line 11104
  $19 = $ReallocAsyncCtx6 + 4 | 0; //@line 11105
  HEAP32[$19 >> 2] = $$0; //@line 11106
  sp = STACKTOP; //@line 11107
  return;
 }
 ___async_unwind = 0; //@line 11110
 HEAP32[$ReallocAsyncCtx6 >> 2] = 497; //@line 11111
 $19 = $ReallocAsyncCtx6 + 4 | 0; //@line 11112
 HEAP32[$19 >> 2] = $$0; //@line 11113
 sp = STACKTOP; //@line 11114
 return;
}
function __ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $4 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 12501
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12505
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  return;
 }
 $9 = (HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0) != 0; //@line 12515
 $11 = HEAP32[$4 + 1108 >> 2] | 0; //@line 12517
 $12 = HEAP32[HEAP32[$0 + 12 >> 2] >> 2] | 0; //@line 12518
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 12519
 __ZN7LoRaPHY15setup_rx_windowEbj($12, $9, $11); //@line 12520
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 291; //@line 12523
  $13 = $ReallocAsyncCtx2 + 4 | 0; //@line 12524
  HEAP32[$13 >> 2] = $4; //@line 12525
  sp = STACKTOP; //@line 12526
  return;
 }
 ___async_unwind = 0; //@line 12529
 HEAP32[$ReallocAsyncCtx2 >> 2] = 291; //@line 12530
 $13 = $ReallocAsyncCtx2 + 4 | 0; //@line 12531
 HEAP32[$13 >> 2] = $4; //@line 12532
 sp = STACKTOP; //@line 12533
 return;
}
function _get_pkcs_padding($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$028 = 0, $$02930 = 0, $$031 = 0, $13 = 0, $23 = 0, $7 = 0, $8 = 0, $9 = 0;
 if (($0 | 0) == 0 | ($2 | 0) == 0) {
  $$028 = -24832; //@line 2208
  return $$028 | 0; //@line 2209
 }
 $7 = HEAP8[$0 + ($1 + -1) >> 0] | 0; //@line 2213
 $8 = $7 & 255; //@line 2214
 $9 = $1 - $8 | 0; //@line 2215
 HEAP32[$2 >> 2] = $9; //@line 2216
 $13 = ($7 << 24 >> 24 == 0 | $8 >>> 0 > $1 >>> 0) & 1; //@line 2220
 if (!$1) {
  $$0$lcssa = $13; //@line 2223
 } else {
  $$02930 = 0; //@line 2225
  $$031 = $13; //@line 2225
  while (1) {
   $23 = (($$02930 >>> 0 >= $9 >>> 0 ? (HEAP8[$0 + $$02930 >> 0] ^ $7) & 255 : 0) | $$031 & 255) & 255; //@line 2235
   $$02930 = $$02930 + 1 | 0; //@line 2236
   if (($$02930 | 0) == ($1 | 0)) {
    $$0$lcssa = $23; //@line 2239
    break;
   } else {
    $$031 = $23; //@line 2242
   }
  }
 }
 $$028 = $$0$lcssa << 24 >> 24 ? -25088 : 0; //@line 2248
 return $$028 | 0; //@line 2249
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_134($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx20 = 0, sp = 0;
 sp = STACKTOP; //@line 29691
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29693
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29695
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29697
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29699
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29701
 HEAP32[$2 >> 2] = 1; //@line 29702
 HEAP8[$2 + 4 >> 0] = 0; //@line 29704
 $ReallocAsyncCtx20 = _emscripten_realloc_async_context(16) | 0; //@line 29705
 __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($4, $2) | 0; //@line 29706
 if (!___async) {
  ___async_unwind = 0; //@line 29709
 }
 HEAP32[$ReallocAsyncCtx20 >> 2] = 162; //@line 29711
 HEAP32[$ReallocAsyncCtx20 + 4 >> 2] = $6; //@line 29713
 HEAP32[$ReallocAsyncCtx20 + 8 >> 2] = $8; //@line 29715
 HEAP32[$ReallocAsyncCtx20 + 12 >> 2] = $10; //@line 29717
 sp = STACKTOP; //@line 29718
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_141($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 30042
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30044
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30046
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30048
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30050
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30052
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(24) | 0; //@line 30053
 __ZN7LoRaMac10disconnectEv($8); //@line 30054
 if (!___async) {
  ___async_unwind = 0; //@line 30057
 }
 HEAP32[$ReallocAsyncCtx14 >> 2] = 161; //@line 30059
 HEAP32[$ReallocAsyncCtx14 + 4 >> 2] = $6; //@line 30061
 HEAP32[$ReallocAsyncCtx14 + 8 >> 2] = $8; //@line 30063
 HEAP32[$ReallocAsyncCtx14 + 12 >> 2] = $2; //@line 30065
 HEAP32[$ReallocAsyncCtx14 + 16 >> 2] = $10; //@line 30067
 HEAP32[$ReallocAsyncCtx14 + 20 >> 2] = $4; //@line 30069
 sp = STACKTOP; //@line 30070
 return;
}
function __ZN12LoRaWANStackC2Ev__async_cb_168($0) {
 $0 = $0 | 0;
 var $$pre$i$i59 = 0, $10 = 0, $11 = 0, $6 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 32352
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32358
 $$pre$i$i59 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 32359
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = $$pre$i$i59; //@line 32361
 if (!$$pre$i$i59) {
  return;
 }
 $10 = HEAP32[$$pre$i$i59 + 8 >> 2] | 0; //@line 32367
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 32368
 FUNCTION_TABLE_vi[$10 & 1023]($6); //@line 32369
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 118; //@line 32372
  $11 = $ReallocAsyncCtx4 + 4 | 0; //@line 32373
  HEAP32[$11 >> 2] = $6; //@line 32374
  sp = STACKTOP; //@line 32375
  return;
 }
 ___async_unwind = 0; //@line 32378
 HEAP32[$ReallocAsyncCtx4 >> 2] = 118; //@line 32379
 $11 = $ReallocAsyncCtx4 + 4 | 0; //@line 32380
 HEAP32[$11 >> 2] = $6; //@line 32381
 sp = STACKTOP; //@line 32382
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $14 = 0, $17 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16374
 $7 = HEAP32[$0 + 4 >> 2] | 0; //@line 16376
 $8 = $7 >> 8; //@line 16377
 if (!($7 & 1)) {
  $$0 = $8; //@line 16381
 } else {
  $$0 = HEAP32[(HEAP32[$3 >> 2] | 0) + $8 >> 2] | 0; //@line 16386
 }
 $14 = HEAP32[$0 >> 2] | 0; //@line 16388
 $17 = HEAP32[(HEAP32[$14 >> 2] | 0) + 20 >> 2] | 0; //@line 16391
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 16396
 FUNCTION_TABLE_viiiiii[$17 & 3]($14, $1, $2, $3 + $$0 | 0, $7 & 2 | 0 ? $4 : 2, $5); //@line 16397
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 706; //@line 16400
  sp = STACKTOP; //@line 16401
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 16404
  return;
 }
}
function __ZN12LoRaWANStack20get_enabled_channelsER16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7468
 STACKTOP = STACKTOP + 16 | 0; //@line 7469
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 7469
 if ((HEAP32[$0 + 1876 >> 2] | 0) >>> 0 >= 3) {
  $$0 = __ZN7LoRaMac16get_channel_planER16lora_channelplan($0 + 4 | 0, $1) | 0; //@line 7478
  STACKTOP = sp; //@line 7479
  return $$0 | 0; //@line 7479
 }
 _printf(11245, sp) | 0; //@line 7481
 _printf(11881, sp + 8 | 0) | 0; //@line 7482
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7483
 _putchar(10) | 0; //@line 7484
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 241; //@line 7487
  sp = STACKTOP; //@line 7488
  STACKTOP = sp; //@line 7489
  return 0; //@line 7489
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 7491
 $$0 = -1e3; //@line 7492
 STACKTOP = sp; //@line 7493
 return $$0 | 0; //@line 7493
}
function __ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $2 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 4175
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4177
 $6 = HEAP8[$0 + 10 >> 0] | 0; //@line 4181
 $9 = HEAP32[(HEAP32[$2 >> 2] | 0) + 20 >> 2] | 0; //@line 4184
 $10 = HEAPU16[$0 + 8 >> 1] | 0; //@line 4185
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 4186
 FUNCTION_TABLE_viiiiiiiiiiiiii[$9 & 1]($2, 0, $6, 0, 0, 4800, 0, 5, 0, 0, 0, 0, 0, $10); //@line 4187
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 60; //@line 4190
  $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 4191
  HEAP32[$11 >> 2] = $2; //@line 4192
  sp = STACKTOP; //@line 4193
  return;
 }
 ___async_unwind = 0; //@line 4196
 HEAP32[$ReallocAsyncCtx2 >> 2] = 60; //@line 4197
 $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 4198
 HEAP32[$11 >> 2] = $2; //@line 4199
 sp = STACKTOP; //@line 4200
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_209($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 2623
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2625
 $4 = HEAP16[$0 + 8 >> 1] | 0; //@line 2627
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2629
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2631
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 2633
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 2634
 __ZN4mbed5Timer5startEv($2); //@line 2635
 if (!___async) {
  ___async_unwind = 0; //@line 2638
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 55; //@line 2640
 HEAP16[$ReallocAsyncCtx4 + 4 >> 1] = $4; //@line 2642
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $2; //@line 2644
 HEAP32[$ReallocAsyncCtx4 + 12 >> 2] = $6; //@line 2646
 HEAP32[$ReallocAsyncCtx4 + 16 >> 2] = $8; //@line 2648
 HEAP32[$ReallocAsyncCtx4 + 20 >> 2] = $10; //@line 2650
 sp = STACKTOP; //@line 2651
 return;
}
function __ZN7LoRaPHY11handle_sendEPhh__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 27344
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27346
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27348
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 27350
 $7 = HEAP32[$2 >> 2] | 0; //@line 27351
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 24 >> 2] | 0; //@line 27354
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 27355
 FUNCTION_TABLE_viii[$10 & 7]($7, $4, $6); //@line 27356
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 555; //@line 27359
  $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 27360
  HEAP32[$11 >> 2] = $2; //@line 27361
  sp = STACKTOP; //@line 27362
  return;
 }
 ___async_unwind = 0; //@line 27365
 HEAP32[$ReallocAsyncCtx2 >> 2] = 555; //@line 27366
 $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 27367
 HEAP32[$11 >> 2] = $2; //@line 27368
 sp = STACKTOP; //@line 27369
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $11 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15544
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 15550
  } else {
   $8 = HEAP32[$0 + 8 >> 2] | 0; //@line 15553
   $11 = HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] | 0; //@line 15556
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 15557
   FUNCTION_TABLE_viiii[$11 & 7]($8, $1, $2, $3); //@line 15558
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 693; //@line 15561
    sp = STACKTOP; //@line 15562
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 15565
    break;
   }
  }
 } while (0);
 return;
}
function __ZN4mbed8CallbackIFvPhtsaEE13function_callINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPKvS1_tsa($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$unpack$i = 0, $$unpack5$i = 0, $15 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 11166
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 11169
 $$unpack5$i = HEAP32[$0 + 4 >> 2] | 0; //@line 11171
 $8 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack5$i >> 1) | 0; //@line 11173
 if (!($$unpack5$i & 1)) {
  $15 = $$unpack$i; //@line 11178
 } else {
  $15 = HEAP32[(HEAP32[$8 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 11183
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 11185
 FUNCTION_TABLE_viiiii[$15 & 7]($8, $1, $2, $3, $4); //@line 11186
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 343; //@line 11189
  sp = STACKTOP; //@line 11190
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 11193
  return;
 }
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_98($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 26140
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26142
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26144
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26146
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26150
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26152
 $13 = HEAP32[HEAP32[HEAP32[$0 + 16 >> 2] >> 2] >> 2] | 0; //@line 26154
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 26155
 FUNCTION_TABLE_vii[$13 & 31]($10, $12); //@line 26156
 if (!___async) {
  ___async_unwind = 0; //@line 26159
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 377; //@line 26161
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 26163
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 26165
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 26167
 sp = STACKTOP; //@line 26168
 return;
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_97($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 26105
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26107
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26109
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26111
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26113
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26115
 $13 = HEAP32[HEAP32[HEAP32[$0 + 24 >> 2] >> 2] >> 2] | 0; //@line 26119
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 26120
 FUNCTION_TABLE_vii[$13 & 31]($8, $10); //@line 26121
 if (!___async) {
  ___async_unwind = 0; //@line 26124
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 379; //@line 26126
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 26128
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 26130
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 26132
 sp = STACKTOP; //@line 26133
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $13 = 0, $16 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16416
 $6 = HEAP32[$0 + 4 >> 2] | 0; //@line 16418
 $7 = $6 >> 8; //@line 16419
 if (!($6 & 1)) {
  $$0 = $7; //@line 16423
 } else {
  $$0 = HEAP32[(HEAP32[$2 >> 2] | 0) + $7 >> 2] | 0; //@line 16428
 }
 $13 = HEAP32[$0 >> 2] | 0; //@line 16430
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 24 >> 2] | 0; //@line 16433
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 16438
 FUNCTION_TABLE_viiiii[$16 & 7]($13, $1, $2 + $$0 | 0, $6 & 2 | 0 ? $3 : 2, $4); //@line 16439
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 707; //@line 16442
  sp = STACKTOP; //@line 16443
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 16446
  return;
 }
}
function _ticker_remove_event($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5546
 $4 = (HEAP32[$0 + 4 >> 2] | 0) + 4 | 0; //@line 5549
 $5 = HEAP32[$4 >> 2] | 0; //@line 5550
 if (($5 | 0) == ($1 | 0)) {
  HEAP32[$4 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 5555
  $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5556
  _schedule_interrupt($0); //@line 5557
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 609; //@line 5560
   sp = STACKTOP; //@line 5561
   return;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5564
  return;
 } else {
  $$0 = $5; //@line 5567
 }
 do {
  if (!$$0) {
   label = 8; //@line 5572
   break;
  }
  $10 = $$0 + 12 | 0; //@line 5575
  $$0 = HEAP32[$10 >> 2] | 0; //@line 5576
 } while (($$0 | 0) != ($1 | 0));
 if ((label | 0) == 8) {
  return;
 }
 HEAP32[$10 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 5589
 return;
}
function __ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_158($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $4 = 0, $5 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 31415
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31419
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 31420
 $8 = HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] | 0; //@line 31423
 $10 = HEAP8[$4 + 776 >> 0] | 0; //@line 31425
 $12 = HEAP8[$4 + 744 >> 0] | 0; //@line 31427
 $14 = HEAP32[$4 + 740 >> 2] | 0; //@line 31429
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 31431
 FUNCTION_TABLE_viiiii[$8 & 7]($5, $10, $12, $14, $4 + 824 | 0); //@line 31432
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 508; //@line 31435
  sp = STACKTOP; //@line 31436
  return;
 }
 ___async_unwind = 0; //@line 31439
 HEAP32[$ReallocAsyncCtx2 >> 2] = 508; //@line 31440
 sp = STACKTOP; //@line 31441
 return;
}
function __ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_159($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $4 = 0, $5 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 31447
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31451
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 31452
 $8 = HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] | 0; //@line 31455
 $10 = HEAP8[$4 + 776 >> 0] | 0; //@line 31457
 $12 = HEAP8[$4 + 744 >> 0] | 0; //@line 31459
 $14 = HEAP32[$4 + 740 >> 2] | 0; //@line 31461
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 31463
 FUNCTION_TABLE_viiiii[$8 & 7]($5, $10, $12, $14, $4 + 824 | 0); //@line 31464
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 505; //@line 31467
  sp = STACKTOP; //@line 31468
  return;
 }
 ___async_unwind = 0; //@line 31471
 HEAP32[$ReallocAsyncCtx >> 2] = 505; //@line 31472
 sp = STACKTOP; //@line 31473
 return;
}
function ___dynamic_cast__async_cb_253($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $16 = 0, $6 = 0, $8 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5177
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5179
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5181
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 5187
 L2 : do {
  switch (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) {
  case 0:
   {
    $$0 = (HEAP32[$6 >> 2] | 0) == 1 & (HEAP32[$8 >> 2] | 0) == 1 & (HEAP32[$10 >> 2] | 0) == 1 ? HEAP32[HEAP32[$0 + 24 >> 2] >> 2] | 0 : 0; //@line 5202
    break;
   }
  case 1:
   {
    if ((HEAP32[HEAP32[$0 + 28 >> 2] >> 2] | 0) != 1) {
     if (!((HEAP32[$6 >> 2] | 0) == 0 & (HEAP32[$8 >> 2] | 0) == 1 & (HEAP32[$10 >> 2] | 0) == 1)) {
      $$0 = 0; //@line 5218
      break L2;
     }
    }
    $$0 = HEAP32[$16 >> 2] | 0; //@line 5223
    break;
   }
  default:
   {
    $$0 = 0; //@line 5227
   }
  }
 } while (0);
 HEAP32[___async_retval >> 2] = $$0; //@line 5232
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $12 = 0, $15 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16331
 $5 = HEAP32[$0 + 4 >> 2] | 0; //@line 16333
 $6 = $5 >> 8; //@line 16334
 if (!($5 & 1)) {
  $$0 = $6; //@line 16338
 } else {
  $$0 = HEAP32[(HEAP32[$2 >> 2] | 0) + $6 >> 2] | 0; //@line 16343
 }
 $12 = HEAP32[$0 >> 2] | 0; //@line 16345
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 28 >> 2] | 0; //@line 16348
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 16353
 FUNCTION_TABLE_viiii[$15 & 7]($12, $1, $2 + $$0 | 0, $5 & 2 | 0 ? $3 : 2); //@line 16354
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 705; //@line 16357
  sp = STACKTOP; //@line 16358
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 16361
  return;
 }
}
function __ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv__async_cb_176($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 32694
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32698
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32700
 $8 = HEAP16[$0 + 16 >> 1] | 0; //@line 32702
 $10 = HEAP16[$0 + 18 >> 1] | 0; //@line 32704
 $12 = HEAP8[$0 + 20 >> 0] | 0; //@line 32706
 $13 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 32708
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 32709
 FUNCTION_TABLE_viiiii[$13 & 7]($4, $6, $8, $10, $12); //@line 32710
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 342; //@line 32713
  sp = STACKTOP; //@line 32714
  return;
 }
 ___async_unwind = 0; //@line 32717
 HEAP32[$ReallocAsyncCtx >> 2] = 342; //@line 32718
 sp = STACKTOP; //@line 32719
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 409
 __ZN4mbed6Ticker6detachEv($0 + 1112 | 0); //@line 411
 HEAP8[$0 + 688 >> 0] = 0; //@line 413
 $5 = HEAP32[$0 + 784 >> 2] | 0; //@line 415
 do {
  if ($5 | 0) {
   $8 = HEAP32[$5 + 44 >> 2] | 0; //@line 420
   if ($8 | 0) {
    $12 = HEAP32[$8 >> 2] | 0; //@line 425
    $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 426
    FUNCTION_TABLE_viiiii[$12 & 7]($5 + 32 | 0, $0 + 788 | 0, 0, -1, -1); //@line 427
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 50; //@line 430
     HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 432
     sp = STACKTOP; //@line 433
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 436
     break;
    }
   }
  }
 } while (0);
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 442
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_212($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2795
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2799
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2801
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2803
 $10 = (HEAP32[___async_retval >> 2] | 0) >= (HEAP32[$0 + 4 >> 2] | 0); //@line 2806
 $13 = HEAP32[(HEAP32[$4 >> 2] | 0) + 8 >> 2] | 0; //@line 2809
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 2810
 FUNCTION_TABLE_vi[$13 & 1023]($4); //@line 2811
 if (!___async) {
  ___async_unwind = 0; //@line 2814
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 58; //@line 2816
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $6; //@line 2818
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $8; //@line 2820
 HEAP8[$ReallocAsyncCtx2 + 12 >> 0] = $10 & 1; //@line 2823
 sp = STACKTOP; //@line 2824
 return;
}
function __ZN7LoRaPHY14remove_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $15 = 0, $25 = 0, $4 = 0, $5 = 0;
 $4 = $1 & 255; //@line 22024
 $5 = $4 >>> 4; //@line 22025
 $10 = 1 << ($4 & 15); //@line 22030
 if ($10 & (HEAPU16[(HEAP32[$0 + 124 >> 2] | 0) + ($5 << 1) >> 1] | 0) | 0) {
  $$0 = 0; //@line 22034
  return $$0 | 0; //@line 22035
 }
 $15 = (HEAP32[$0 + 112 >> 2] | 0) + ($4 * 12 | 0) | 0; //@line 22039
 HEAP32[$15 >> 2] = 0; //@line 22040
 HEAP32[$15 + 4 >> 2] = 0; //@line 22040
 HEAP32[$15 + 8 >> 2] = 0; //@line 22040
 if (!((HEAPU8[$0 + 20 >> 0] | 0) > ($1 & 255) ? (($1 & 255) >>> 4 & 255) <= (HEAPU8[$0 + 128 >> 0] | 0) : 0)) {
  $$0 = 0; //@line 22050
  return $$0 | 0; //@line 22051
 }
 $25 = (HEAP32[$0 + 120 >> 2] | 0) + ($5 << 1) | 0; //@line 22056
 HEAP16[$25 >> 1] = ($10 ^ 65535) & (HEAPU16[$25 >> 1] | 0); //@line 22061
 $$0 = 1; //@line 22062
 return $$0 | 0; //@line 22063
}
function __ZN7LoRaPHY13get_radio_rngEv__async_cb_153($0) {
 $0 = $0 | 0;
 var $4 = 0, $7 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 30521
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 30525
 $4 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 30526
 $7 = HEAP32[(HEAP32[$4 >> 2] | 0) + 76 >> 2] | 0; //@line 30529
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 30530
 FUNCTION_TABLE_vi[$7 & 1023]($4); //@line 30531
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 552; //@line 30534
  $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 30535
  HEAP32[$8 >> 2] = $AsyncRetVal; //@line 30536
  sp = STACKTOP; //@line 30537
  return;
 }
 ___async_unwind = 0; //@line 30540
 HEAP32[$ReallocAsyncCtx3 >> 2] = 552; //@line 30541
 $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 30542
 HEAP32[$8 >> 2] = $AsyncRetVal; //@line 30543
 sp = STACKTOP; //@line 30544
 return;
}
function __ZN7LoRaPHY25setup_public_network_modeEb__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 21463
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21465
 $4 = HEAP8[$0 + 8 >> 0] & 1; //@line 21468
 $5 = HEAP32[$2 >> 2] | 0; //@line 21469
 $8 = HEAP32[(HEAP32[$5 >> 2] | 0) + 48 >> 2] | 0; //@line 21472
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 21473
 FUNCTION_TABLE_vii[$8 & 31]($5, $4); //@line 21474
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 544; //@line 21477
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 21478
  HEAP32[$9 >> 2] = $2; //@line 21479
  sp = STACKTOP; //@line 21480
  return;
 }
 ___async_unwind = 0; //@line 21483
 HEAP32[$ReallocAsyncCtx2 >> 2] = 544; //@line 21484
 $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 21485
 HEAP32[$9 >> 2] = $2; //@line 21486
 sp = STACKTOP; //@line 21487
 return;
}
function __ZN7LoRaPHY13get_radio_rngEv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 30492
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30494
 $3 = HEAP32[$2 >> 2] | 0; //@line 30495
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 36 >> 2] | 0; //@line 30498
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 30499
 $7 = FUNCTION_TABLE_ii[$6 & 15]($3) | 0; //@line 30500
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 551; //@line 30503
  $8 = $ReallocAsyncCtx2 + 4 | 0; //@line 30504
  HEAP32[$8 >> 2] = $2; //@line 30505
  sp = STACKTOP; //@line 30506
  return;
 }
 HEAP32[___async_retval >> 2] = $7; //@line 30510
 ___async_unwind = 0; //@line 30511
 HEAP32[$ReallocAsyncCtx2 >> 2] = 551; //@line 30512
 $8 = $ReallocAsyncCtx2 + 4 | 0; //@line 30513
 HEAP32[$8 >> 2] = $2; //@line 30514
 sp = STACKTOP; //@line 30515
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_213($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 2830
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2832
 $4 = HEAP16[$0 + 8 >> 1] | 0; //@line 2834
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2836
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2838
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 2839
 __ZN4mbed5TimerC2Ev($2); //@line 2840
 if (!___async) {
  ___async_unwind = 0; //@line 2843
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 54; //@line 2845
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 2847
 HEAP16[$ReallocAsyncCtx3 + 8 >> 1] = $4; //@line 2849
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 2851
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 2853
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $2; //@line 2855
 sp = STACKTOP; //@line 2856
 return;
}
function _pad_676($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$lcssa = 0, $$011 = 0, $14 = 0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 13093
 STACKTOP = STACKTOP + 256 | 0; //@line 13094
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256); //@line 13094
 $5 = sp; //@line 13095
 if (($2 | 0) > ($3 | 0) & ($4 & 73728 | 0) == 0) {
  $9 = $2 - $3 | 0; //@line 13101
  _memset($5 | 0, $1 << 24 >> 24 | 0, ($9 >>> 0 < 256 ? $9 : 256) | 0) | 0; //@line 13105
  if ($9 >>> 0 > 255) {
   $14 = $2 - $3 | 0; //@line 13108
   $$011 = $9; //@line 13109
   do {
    _out_670($0, $5, 256); //@line 13111
    $$011 = $$011 + -256 | 0; //@line 13112
   } while ($$011 >>> 0 > 255);
   $$0$lcssa = $14 & 255; //@line 13121
  } else {
   $$0$lcssa = $9; //@line 13123
  }
  _out_670($0, $5, $$0$lcssa); //@line 13125
 }
 STACKTOP = sp; //@line 13127
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 2575
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2577
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2579
 $6 = HEAP16[$0 + 12 >> 1] | 0; //@line 2581
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2583
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($2); //@line 2584
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(20) | 0; //@line 2585
 _wait_ms(1); //@line 2586
 if (!___async) {
  ___async_unwind = 0; //@line 2589
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 53; //@line 2591
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $4; //@line 2593
 HEAP16[$ReallocAsyncCtx7 + 8 >> 1] = $6; //@line 2595
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $8; //@line 2597
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $2; //@line 2599
 sp = STACKTOP; //@line 2600
 return;
}
function __ZN7LoRaMac16get_channel_planER16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $2 = 0, $4 = 0, sp = 0;
 sp = STACKTOP; //@line 15202
 STACKTOP = STACKTOP + 16 | 0; //@line 15203
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15203
 $2 = sp; //@line 15204
 $4 = $2 + 4 | 0; //@line 15206
 HEAP32[$4 >> 2] = 0; //@line 15208
 HEAP32[$4 + 4 >> 2] = 0; //@line 15211
 HEAP32[$2 >> 2] = 9; //@line 15212
 $10 = __ZN10LoRaMacMib11get_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params($0 + 348 | 0, $2, $0 + 360 | 0) | 0; //@line 15215
 if ($10 | 0) {
  $$0 = $10; //@line 15218
  STACKTOP = sp; //@line 15219
  return $$0 | 0; //@line 15219
 }
 $$0 = __ZN18LoRaMacChannelPlan8get_planER16lora_channelplanPK25loramac_mib_req_confirm_t($0 + 352 | 0, $1, $2) | 0; //@line 15223
 STACKTOP = sp; //@line 15224
 return $$0 | 0; //@line 15224
}
function _mbedtls_ccm_setkey__async_cb_417($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 30672
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30674
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30676
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30678
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 30680
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 30684
  return;
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 30687
 $9 = _mbedtls_cipher_setkey($2, $4, $6, 1) | 0; //@line 30688
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 568; //@line 30691
  sp = STACKTOP; //@line 30692
  return;
 }
 HEAP32[___async_retval >> 2] = $9; //@line 30696
 ___async_unwind = 0; //@line 30697
 HEAP32[$ReallocAsyncCtx >> 2] = 568; //@line 30698
 sp = STACKTOP; //@line 30699
 return;
}
function __ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$unpack$i = 0, $$unpack3$i = 0, $12 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4829
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 4832
 $$unpack3$i = HEAP32[$0 + 4 >> 2] | 0; //@line 4834
 $5 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack3$i >> 1) | 0; //@line 4836
 if (!($$unpack3$i & 1)) {
  $12 = $$unpack$i; //@line 4841
 } else {
  $12 = HEAP32[(HEAP32[$5 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 4846
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4848
 FUNCTION_TABLE_vii[$12 & 31]($5, $1); //@line 4849
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 158; //@line 4852
  sp = STACKTOP; //@line 4853
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4856
  return;
 }
}
function __ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$unpack$i = 0, $$unpack3$i = 0, $12 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6507
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 6510
 $$unpack3$i = HEAP32[$0 + 4 >> 2] | 0; //@line 6512
 $5 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack3$i >> 1) | 0; //@line 6514
 if (!($$unpack3$i & 1)) {
  $12 = $$unpack$i; //@line 6519
 } else {
  $12 = HEAP32[(HEAP32[$5 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 6524
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6526
 FUNCTION_TABLE_vii[$12 & 31]($5, $1); //@line 6527
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 215; //@line 6530
  sp = STACKTOP; //@line 6531
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6534
  return;
 }
}
function __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_341($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 13140
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13142
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13144
 $6 = HEAP32[$2 + 356 >> 2] | 0; //@line 13146
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 13148
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($6, $2 + 996 | 0, 1e3); //@line 13149
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 455; //@line 13152
  $8 = $ReallocAsyncCtx4 + 4 | 0; //@line 13153
  HEAP32[$8 >> 2] = $4; //@line 13154
  sp = STACKTOP; //@line 13155
  return;
 }
 ___async_unwind = 0; //@line 13158
 HEAP32[$ReallocAsyncCtx4 >> 2] = 455; //@line 13159
 $8 = $ReallocAsyncCtx4 + 4 | 0; //@line 13160
 HEAP32[$8 >> 2] = $4; //@line 13161
 sp = STACKTOP; //@line 13162
 return;
}
function __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_340($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 13112
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13114
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13116
 $6 = HEAP32[$2 + 356 >> 2] | 0; //@line 13118
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 13120
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($6, $2 + 996 | 0, 1e3); //@line 13121
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 457; //@line 13124
  $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 13125
  HEAP32[$8 >> 2] = $4; //@line 13126
  sp = STACKTOP; //@line 13127
  return;
 }
 ___async_unwind = 0; //@line 13130
 HEAP32[$ReallocAsyncCtx3 >> 2] = 457; //@line 13131
 $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 13132
 HEAP32[$8 >> 2] = $4; //@line 13133
 sp = STACKTOP; //@line 13134
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_130($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx28 = 0, sp = 0;
 sp = STACKTOP; //@line 29426
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29430
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29432
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29434
 if (HEAP32[$0 + 4 >> 2] | 0) {
  HEAP32[$6 >> 2] = 6; //@line 29437
  HEAP32[___async_retval >> 2] = $4; //@line 29439
  return;
 }
 $ReallocAsyncCtx28 = _emscripten_realloc_async_context(16) | 0; //@line 29442
 _mbed_assert_internal(12025, 11293, 1239); //@line 29443
 if (!___async) {
  ___async_unwind = 0; //@line 29446
 }
 HEAP32[$ReallocAsyncCtx28 >> 2] = 191; //@line 29448
 HEAP32[$ReallocAsyncCtx28 + 4 >> 2] = $4; //@line 29450
 HEAP32[$ReallocAsyncCtx28 + 8 >> 2] = $6; //@line 29452
 HEAP32[$ReallocAsyncCtx28 + 12 >> 2] = $8; //@line 29454
 sp = STACKTOP; //@line 29455
 return;
}
function __ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$unpack$i = 0, $$unpack3$i = 0, $12 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4878
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 4881
 $$unpack3$i = HEAP32[$0 + 4 >> 2] | 0; //@line 4883
 $5 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack3$i >> 1) | 0; //@line 4885
 if (!($$unpack3$i & 1)) {
  $12 = $$unpack$i; //@line 4890
 } else {
  $12 = HEAP32[(HEAP32[$5 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 4895
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4897
 FUNCTION_TABLE_vii[$12 & 31]($5, $1); //@line 4898
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 159; //@line 4901
  sp = STACKTOP; //@line 4902
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4905
  return;
 }
}
function __ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$unpack$i = 0, $$unpack3$i = 0, $12 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6876
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 6879
 $$unpack3$i = HEAP32[$0 + 4 >> 2] | 0; //@line 6881
 $5 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack3$i >> 1) | 0; //@line 6883
 if (!($$unpack3$i & 1)) {
  $12 = $$unpack$i; //@line 6888
 } else {
  $12 = HEAP32[(HEAP32[$5 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 6893
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6895
 FUNCTION_TABLE_vii[$12 & 31]($5, $1); //@line 6896
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 222; //@line 6899
  sp = STACKTOP; //@line 6900
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6903
  return;
 }
}
function __ZN4mbed11InterruptInD0Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 25690
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25692
 $4 = HEAP32[$2 + 52 >> 2] | 0; //@line 25694
 if (!$4) {
  __ZdlPv($2); //@line 25697
  return;
 }
 $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 25702
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 25703
 FUNCTION_TABLE_vi[$8 & 1023]($2 + 40 | 0); //@line 25704
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 80; //@line 25707
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 25708
  HEAP32[$9 >> 2] = $2; //@line 25709
  sp = STACKTOP; //@line 25710
  return;
 }
 ___async_unwind = 0; //@line 25713
 HEAP32[$ReallocAsyncCtx2 >> 2] = 80; //@line 25714
 $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 25715
 HEAP32[$9 >> 2] = $2; //@line 25716
 sp = STACKTOP; //@line 25717
 return;
}
function __ZN7LoRaMac26on_ack_timeout_timer_eventEv($0) {
 $0 = $0 | 0;
 var $15 = 0, $2 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 11215
 $2 = HEAP32[$0 + 356 >> 2] | 0; //@line 11217
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 11219
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($2, $0 + 1076 | 0); //@line 11220
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 344; //@line 11223
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 11225
  sp = STACKTOP; //@line 11226
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 11229
 if (HEAP8[$0 + 373 >> 0] | 0) {
  HEAP8[$0 + 377 >> 0] = 1; //@line 11235
  $9 = $0 + 968 | 0; //@line 11236
  HEAP32[$9 >> 2] = HEAP32[$9 >> 2] & -5; //@line 11239
 }
 if ((HEAP32[$0 + 360 >> 2] | 0) != 2) {
  return;
 }
 $15 = $0 + 944 | 0; //@line 11247
 HEAP8[$15 >> 0] = HEAP8[$15 >> 0] | 32; //@line 11250
 return;
}
function ___stdio_seek($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $3 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 10502
 STACKTOP = STACKTOP + 32 | 0; //@line 10503
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 10503
 $vararg_buffer = sp; //@line 10504
 $3 = sp + 20 | 0; //@line 10505
 HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2]; //@line 10509
 HEAP32[$vararg_buffer + 4 >> 2] = 0; //@line 10511
 HEAP32[$vararg_buffer + 8 >> 2] = $1; //@line 10513
 HEAP32[$vararg_buffer + 12 >> 2] = $3; //@line 10515
 HEAP32[$vararg_buffer + 16 >> 2] = $2; //@line 10517
 if ((___syscall_ret(___syscall140(140, $vararg_buffer | 0) | 0) | 0) < 0) {
  HEAP32[$3 >> 2] = -1; //@line 10522
  $10 = -1; //@line 10523
 } else {
  $10 = HEAP32[$3 >> 2] | 0; //@line 10526
 }
 STACKTOP = sp; //@line 10528
 return $10 | 0; //@line 10528
}
function __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0) {
 $0 = $0 | 0;
 var $13 = 0;
 if ((HEAP32[$0 + 652 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(2, HEAP32[$0 + 484 >> 2] | 0, 0) | 0; //@line 1080
 }
 if ((HEAP32[$0 + 656 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(2, HEAP32[$0 + 508 >> 2] | 0, 0) | 0; //@line 1088
 }
 if ((HEAP32[$0 + 672 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(2, HEAP32[$0 + 604 >> 2] | 0, 0) | 0; //@line 1096
 }
 $13 = $0 + 660 | 0; //@line 1098
 if ((HEAP32[$13 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(2, HEAP32[$0 + 532 >> 2] | 0, 0) | 0; //@line 1104
  if ((HEAP32[$13 >> 2] | 0) != -1) {
   _emscripten_asm_const_iii(2, HEAP32[$0 + 556 >> 2] | 0, 0) | 0; //@line 1110
  }
 }
 if ((HEAP32[$0 + 668 >> 2] | 0) == -1) {
  return;
 }
 _emscripten_asm_const_iii(2, HEAP32[$0 + 580 >> 2] | 0, 0) | 0; //@line 1121
 return;
}
function _mbed_assert_internal($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $AsyncCtx = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 5803
 STACKTOP = STACKTOP + 16 | 0; //@line 5804
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 5804
 $vararg_buffer = sp; //@line 5805
 HEAP32[$vararg_buffer >> 2] = $0; //@line 5806
 HEAP32[$vararg_buffer + 4 >> 2] = $1; //@line 5808
 HEAP32[$vararg_buffer + 8 >> 2] = $2; //@line 5810
 _mbed_error_printf(13414, $vararg_buffer); //@line 5811
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5812
 _mbed_die(); //@line 5813
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 612; //@line 5816
  sp = STACKTOP; //@line 5817
  STACKTOP = sp; //@line 5818
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5820
  STACKTOP = sp; //@line 5821
  return;
 }
}
function _schedule_interrupt__async_cb_7($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 17414
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17416
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17418
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17420
 $9 = HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0; //@line 17423
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(16) | 0; //@line 17424
 $10 = FUNCTION_TABLE_i[$9 & 7]() | 0; //@line 17425
 if (!___async) {
  HEAP32[___async_retval >> 2] = $10; //@line 17429
  ___async_unwind = 0; //@line 17430
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 606; //@line 17432
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $4; //@line 17434
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $6; //@line 17436
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $2; //@line 17438
 sp = STACKTOP; //@line 17439
 return;
}
function __ZN7LoRaPHY16verify_frequencyEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$01113 = 0, $16 = 0, $3 = 0, $5 = 0, $7 = 0, label = 0;
 $3 = HEAP32[$0 + 72 >> 2] | 0; //@line 22206
 $5 = HEAP8[$0 + 76 >> 0] | 0; //@line 22208
 if (!($5 << 24 >> 24)) {
  $16 = 0; //@line 22211
  return $16 | 0; //@line 22212
 } else {
  $$01113 = 0; //@line 22214
 }
 while (1) {
  $7 = $$01113 & 255; //@line 22217
  if ((HEAP32[$3 + ($7 * 24 | 0) + 20 >> 2] | 0) >>> 0 >= $1 >>> 0) {
   if ((HEAP32[$3 + ($7 * 24 | 0) + 16 >> 2] | 0) >>> 0 <= $1 >>> 0) {
    $16 = 1; //@line 22226
    label = 5; //@line 22227
    break;
   }
  }
  $$01113 = $$01113 + 1 << 24 >> 24; //@line 22231
  if (($$01113 & 255) >= ($5 & 255)) {
   $16 = 0; //@line 22236
   label = 5; //@line 22237
   break;
  }
 }
 if ((label | 0) == 5) {
  return $16 | 0; //@line 22242
 }
 return 0; //@line 22244
}
function _printf($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $2 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14512
 STACKTOP = STACKTOP + 16 | 0; //@line 14513
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14513
 $1 = sp; //@line 14514
 HEAP32[$1 >> 2] = $varargs; //@line 14515
 $2 = HEAP32[2567] | 0; //@line 14516
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 14517
 $3 = _vfprintf($2, $0, $1) | 0; //@line 14518
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 677; //@line 14521
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 14523
  sp = STACKTOP; //@line 14524
  STACKTOP = sp; //@line 14525
  return 0; //@line 14525
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 14527
  STACKTOP = sp; //@line 14528
  return $3 | 0; //@line 14528
 }
 return 0; //@line 14530
}
function __ZN7LoRaPHY20put_radio_to_standbyEv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 32149
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32151
 $3 = HEAP32[$2 >> 2] | 0; //@line 32152
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] | 0; //@line 32155
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 32156
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 32157
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 541; //@line 32160
  $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 32161
  HEAP32[$7 >> 2] = $2; //@line 32162
  sp = STACKTOP; //@line 32163
  return;
 }
 ___async_unwind = 0; //@line 32166
 HEAP32[$ReallocAsyncCtx2 >> 2] = 541; //@line 32167
 $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 32168
 HEAP32[$7 >> 2] = $2; //@line 32169
 sp = STACKTOP; //@line 32170
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_122($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx32 = 0, sp = 0;
 sp = STACKTOP; //@line 29139
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29143
 if (HEAP32[$0 + 4 >> 2] | 0) {
  HEAP32[___async_retval >> 2] = -1011; //@line 29147
  return;
 }
 $ReallocAsyncCtx32 = _emscripten_realloc_async_context(8) | 0; //@line 29150
 _mbed_assert_internal(12025, 11293, 1129); //@line 29151
 if (___async) {
  HEAP32[$ReallocAsyncCtx32 >> 2] = 166; //@line 29154
  $6 = $ReallocAsyncCtx32 + 4 | 0; //@line 29155
  HEAP32[$6 >> 2] = $4; //@line 29156
  sp = STACKTOP; //@line 29157
  return;
 }
 ___async_unwind = 0; //@line 29160
 HEAP32[$ReallocAsyncCtx32 >> 2] = 166; //@line 29161
 $6 = $ReallocAsyncCtx32 + 4 | 0; //@line 29162
 HEAP32[$6 >> 2] = $4; //@line 29163
 sp = STACKTOP; //@line 29164
 return;
}
function _initialize__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 17597
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17599
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17601
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17603
 $9 = HEAP32[(HEAP32[$4 >> 2] | 0) + 24 >> 2] | 0; //@line 17606
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 17607
 $10 = FUNCTION_TABLE_i[$9 & 7]() | 0; //@line 17608
 if (!___async) {
  HEAP32[___async_retval >> 2] = $10; //@line 17612
  ___async_unwind = 0; //@line 17613
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 596; //@line 17615
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 17617
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 17619
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 17621
 sp = STACKTOP; //@line 17622
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_126($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx30 = 0, sp = 0;
 sp = STACKTOP; //@line 29273
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29277
 if (HEAP32[$0 + 4 >> 2] | 0) {
  HEAP32[___async_retval >> 2] = 0; //@line 29281
  return;
 }
 $ReallocAsyncCtx30 = _emscripten_realloc_async_context(8) | 0; //@line 29284
 _mbed_assert_internal(12025, 11293, 1211); //@line 29285
 if (___async) {
  HEAP32[$ReallocAsyncCtx30 >> 2] = 180; //@line 29288
  $6 = $ReallocAsyncCtx30 + 4 | 0; //@line 29289
  HEAP32[$6 >> 2] = $4; //@line 29290
  sp = STACKTOP; //@line 29291
  return;
 }
 ___async_unwind = 0; //@line 29294
 HEAP32[$ReallocAsyncCtx30 >> 2] = 180; //@line 29295
 $6 = $ReallocAsyncCtx30 + 4 | 0; //@line 29296
 HEAP32[$6 >> 2] = $4; //@line 29297
 sp = STACKTOP; //@line 29298
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_124($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx31 = 0, sp = 0;
 sp = STACKTOP; //@line 29206
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29210
 if (HEAP32[$0 + 4 >> 2] | 0) {
  HEAP32[___async_retval >> 2] = 0; //@line 29214
  return;
 }
 $ReallocAsyncCtx31 = _emscripten_realloc_async_context(8) | 0; //@line 29217
 _mbed_assert_internal(12025, 11293, 1174); //@line 29218
 if (___async) {
  HEAP32[$ReallocAsyncCtx31 >> 2] = 171; //@line 29221
  $6 = $ReallocAsyncCtx31 + 4 | 0; //@line 29222
  HEAP32[$6 >> 2] = $4; //@line 29223
  sp = STACKTOP; //@line 29224
  return;
 }
 ___async_unwind = 0; //@line 29227
 HEAP32[$ReallocAsyncCtx31 >> 2] = 171; //@line 29228
 $6 = $ReallocAsyncCtx31 + 4 | 0; //@line 29229
 HEAP32[$6 >> 2] = $4; //@line 29230
 sp = STACKTOP; //@line 29231
 return;
}
function _mbedtls_ccm_setkey__async_cb_418($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 30705
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30707
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30709
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30711
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30713
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 30714
 $9 = _mbedtls_cipher_setup($2, $4) | 0; //@line 30715
 if (!___async) {
  HEAP32[___async_retval >> 2] = $9; //@line 30719
  ___async_unwind = 0; //@line 30720
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 567; //@line 30722
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 30724
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 30726
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $8; //@line 30728
 sp = STACKTOP; //@line 30729
 return;
}
function _mbedtls_cipher_info_from_values($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$010 = 0, $$011 = 0, $3 = 0, $6 = 0, label = 0;
 $3 = HEAP32[2371] | 0; //@line 1811
 if (!$3) {
  $$010 = 0; //@line 1814
  return $$010 | 0; //@line 1815
 } else {
  $$011 = 9480; //@line 1817
  $6 = $3; //@line 1817
 }
 while (1) {
  if ((HEAP32[HEAP32[$6 + 28 >> 2] >> 2] | 0) == ($0 | 0)) {
   if ((HEAP32[$6 + 8 >> 2] | 0) == ($1 | 0)) {
    if ((HEAP32[$6 + 4 >> 2] | 0) == ($2 | 0)) {
     $$010 = $6; //@line 1833
     label = 6; //@line 1834
     break;
    }
   }
  }
  $6 = HEAP32[$$011 + 12 >> 2] | 0; //@line 1841
  if (!$6) {
   $$010 = 0; //@line 1844
   label = 6; //@line 1845
   break;
  } else {
   $$011 = $$011 + 8 | 0; //@line 1848
  }
 }
 if ((label | 0) == 6) {
  return $$010 | 0; //@line 1852
 }
 return 0; //@line 1854
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_95($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 25933
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25937
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25939
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25941
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25943
 $11 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 25945
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 25946
 FUNCTION_TABLE_vii[$11 & 31]($4, $6); //@line 25947
 if (!___async) {
  ___async_unwind = 0; //@line 25950
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 384; //@line 25952
 HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $8; //@line 25954
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $10; //@line 25956
 sp = STACKTOP; //@line 25957
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv($0) {
 $0 = $0 | 0;
 var $$unpack$i = 0, $$unpack2$i = 0, $11 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8808
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 8811
 $$unpack2$i = HEAP32[$0 + 4 >> 2] | 0; //@line 8813
 $4 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack2$i >> 1) | 0; //@line 8815
 if (!($$unpack2$i & 1)) {
  $11 = $$unpack$i; //@line 8820
 } else {
  $11 = HEAP32[(HEAP32[$4 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 8825
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8827
 FUNCTION_TABLE_vi[$11 & 1023]($4); //@line 8828
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 288; //@line 8831
  sp = STACKTOP; //@line 8832
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 8835
  return;
 }
}
function __ZN7LoRaPHY18put_radio_to_sleepEv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2414
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2416
 $3 = HEAP32[$2 >> 2] | 0; //@line 2417
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] | 0; //@line 2420
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 2421
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 2422
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 538; //@line 2425
  $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 2426
  HEAP32[$7 >> 2] = $2; //@line 2427
  sp = STACKTOP; //@line 2428
  return;
 }
 ___async_unwind = 0; //@line 2431
 HEAP32[$ReallocAsyncCtx2 >> 2] = 538; //@line 2432
 $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 2433
 HEAP32[$7 >> 2] = $2; //@line 2434
 sp = STACKTOP; //@line 2435
 return;
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb($0) {
 $0 = $0 | 0;
 var $$054$ = 0, $13 = 0, $6 = 0, $8 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25811
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25813
 $$054$ = (HEAP32[___async_retval >> 2] | 0) == 0 ? HEAP32[$0 + 4 >> 2] | 0 : -1014; //@line 25819
 $13 = HEAP32[HEAP32[$0 + 8 >> 2] >> 2] | 0; //@line 25820
 HEAP8[(HEAPU16[$6 >> 1] | 0) + ($8 + 381) >> 0] = $13; //@line 25825
 HEAP8[(HEAPU16[$6 >> 1] | 0) + 1 + ($8 + 381) >> 0] = $13 >>> 8; //@line 25832
 HEAP8[(HEAPU16[$6 >> 1] | 0) + 2 + ($8 + 381) >> 0] = $13 >>> 16; //@line 25839
 HEAP8[(HEAPU16[$6 >> 1] | 0) + 3 + ($8 + 381) >> 0] = $13 >>> 24; //@line 25846
 HEAP16[$6 >> 1] = (HEAPU16[$6 >> 1] | 0) + 4; //@line 25851
 HEAP32[___async_retval >> 2] = $$054$; //@line 25853
 return;
}
function _sprintf($0, $1, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $varargs = $varargs | 0;
 var $2 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14434
 STACKTOP = STACKTOP + 16 | 0; //@line 14435
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14435
 $2 = sp; //@line 14436
 HEAP32[$2 >> 2] = $varargs; //@line 14437
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 14438
 $3 = _vsprintf($0, $1, $2) | 0; //@line 14439
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 675; //@line 14442
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 14444
  sp = STACKTOP; //@line 14445
  STACKTOP = sp; //@line 14446
  return 0; //@line 14446
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 14448
  STACKTOP = sp; //@line 14449
  return $3 | 0; //@line 14449
 }
 return 0; //@line 14451
}
function __ZN7LoRaMac10disconnectEv__async_cb_400($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 29662
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29666
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 29667
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 29669
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($5, $4 + 1076 | 0); //@line 29670
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 445; //@line 29673
  $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 29674
  HEAP32[$7 >> 2] = $4; //@line 29675
  sp = STACKTOP; //@line 29676
  return;
 }
 ___async_unwind = 0; //@line 29679
 HEAP32[$ReallocAsyncCtx2 >> 2] = 445; //@line 29680
 $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 29681
 HEAP32[$7 >> 2] = $4; //@line 29682
 sp = STACKTOP; //@line 29683
 return;
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $13 = 0, $4 = 0, $5 = 0;
 $4 = $1 + 16 | 0; //@line 15097
 $5 = HEAP32[$4 >> 2] | 0; //@line 15098
 do {
  if (!$5) {
   HEAP32[$4 >> 2] = $2; //@line 15102
   HEAP32[$1 + 24 >> 2] = $3; //@line 15104
   HEAP32[$1 + 36 >> 2] = 1; //@line 15106
  } else {
   if (($5 | 0) != ($2 | 0)) {
    $13 = $1 + 36 | 0; //@line 15110
    HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + 1; //@line 15113
    HEAP32[$1 + 24 >> 2] = 2; //@line 15115
    HEAP8[$1 + 54 >> 0] = 1; //@line 15117
    break;
   }
   $10 = $1 + 24 | 0; //@line 15120
   if ((HEAP32[$10 >> 2] | 0) == 2) {
    HEAP32[$10 >> 2] = $3; //@line 15124
   }
  }
 } while (0);
 return;
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6951
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 6953
 $3 = __ZN7LoRaMac22get_phy_event_handlersEv($0 + 4 | 0) | 0; //@line 6954
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 224; //@line 6957
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 6959
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 6961
  sp = STACKTOP; //@line 6962
  return 0; //@line 6963
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6965
  $6 = $0 + 1928 | 0; //@line 6966
  HEAP32[$6 >> 2] = $3; //@line 6967
  __ZN7LoRaPHY18set_radio_instanceER9LoRaRadio($0 + 1336 | 0, $1); //@line 6969
  return HEAP32[$6 >> 2] | 0; //@line 6971
 }
 return 0; //@line 6973
}
function __ZN4mbed5Timer5startEv($0) {
 $0 = $0 | 0;
 var $13 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1878
 if (HEAP32[$0 >> 2] | 0) {
  return;
 }
 if (HEAP8[$0 + 28 >> 0] | 0) {}
 $7 = HEAP32[$0 + 24 >> 2] | 0; //@line 1890
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 1891
 $8 = _ticker_read_us($7) | 0; //@line 1892
 $9 = tempRet0; //@line 1893
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 95; //@line 1896
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 1898
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 1900
  sp = STACKTOP; //@line 1901
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 1904
 $13 = $0 + 8 | 0; //@line 1906
 HEAP32[$13 >> 2] = $8; //@line 1908
 HEAP32[$13 + 4 >> 2] = $9; //@line 1911
 HEAP32[$0 >> 2] = 1; //@line 1912
 return;
}
function __ZN7LoRaMacD2Ev($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 7974
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7976
 __ZN12radio_eventsD2Ev($0 + 1212 | 0); //@line 7977
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 254; //@line 7980
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 7982
  sp = STACKTOP; //@line 7983
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 7986
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 7988
 __ZN14lorawan_timersD2Ev($0 + 980 | 0); //@line 7989
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 255; //@line 7992
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 7994
  sp = STACKTOP; //@line 7995
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7998
  return;
 }
}
function __ZN7LoRaPHY18dl_channel_requestEP23dl_channel_req_params_s__async_cb($0) {
 $0 = $0 | 0;
 var $$ = 0, $$09 = 0, $$1 = 0, $11 = 0, $19 = 0, $6 = 0, $9 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11286
 $$ = HEAP8[___async_retval >> 0] & 1 ? 3 : 2; //@line 11290
 $9 = HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 112 >> 2] | 0; //@line 11292
 $11 = HEAPU8[HEAP32[$0 + 8 >> 2] >> 0] | 0; //@line 11294
 $$1 = (HEAP32[$9 + ($11 * 12 | 0) >> 2] | 0) == 0 ? $$ & 1 : $$; //@line 11299
 if ($$1 << 24 >> 24 != 3) {
  $$09 = $$1; //@line 11302
  $19 = ___async_retval; //@line 11303
  HEAP8[$19 >> 0] = $$09; //@line 11304
  return;
 }
 HEAP32[$9 + ($11 * 12 | 0) + 4 >> 2] = HEAP32[$6 >> 2]; //@line 11309
 $$09 = 3; //@line 11310
 $19 = ___async_retval; //@line 11311
 HEAP8[$19 >> 0] = $$09; //@line 11312
 return;
}
function _equeue_post($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $4 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2351
 $4 = _equeue_tick() | 0; //@line 2353
 HEAP32[$2 + -4 >> 2] = $1; //@line 2355
 $6 = $2 + -16 | 0; //@line 2356
 HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + $4; //@line 2359
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2360
 $9 = _equeue_enqueue($0, $2 + -36 | 0, $4) | 0; //@line 2361
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 102; //@line 2364
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2366
  sp = STACKTOP; //@line 2367
  return 0; //@line 2368
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2370
  _equeue_sema_signal($0 + 48 | 0); //@line 2372
  return $9 | 0; //@line 2373
 }
 return 0; //@line 2375
}
function __ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb_381($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 25738
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25742
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 25744
 $8 = HEAP8[$0 + 13 >> 0] | 0; //@line 25746
 $9 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 25748
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 25749
 FUNCTION_TABLE_viii[$9 & 7]($4, $6, $8); //@line 25750
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 210; //@line 25753
  sp = STACKTOP; //@line 25754
  return;
 }
 ___async_unwind = 0; //@line 25757
 HEAP32[$ReallocAsyncCtx >> 2] = 210; //@line 25758
 sp = STACKTOP; //@line 25759
 return;
}
function _strcmp($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $2 = 0, $3 = 0, $8 = 0, $9 = 0;
 $2 = HEAP8[$0 >> 0] | 0; //@line 10609
 $3 = HEAP8[$1 >> 0] | 0; //@line 10610
 if ($2 << 24 >> 24 == 0 ? 1 : $2 << 24 >> 24 != $3 << 24 >> 24) {
  $$lcssa = $3; //@line 10615
  $$lcssa8 = $2; //@line 10615
 } else {
  $$011 = $1; //@line 10617
  $$0710 = $0; //@line 10617
  do {
   $$0710 = $$0710 + 1 | 0; //@line 10619
   $$011 = $$011 + 1 | 0; //@line 10620
   $8 = HEAP8[$$0710 >> 0] | 0; //@line 10621
   $9 = HEAP8[$$011 >> 0] | 0; //@line 10622
  } while (!($8 << 24 >> 24 == 0 ? 1 : $8 << 24 >> 24 != $9 << 24 >> 24));
  $$lcssa = $9; //@line 10627
  $$lcssa8 = $8; //@line 10627
 }
 return ($$lcssa8 & 255) - ($$lcssa & 255) | 0; //@line 10637
}
function __ZSt11__terminatePFvvE($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 15647
 STACKTOP = STACKTOP + 16 | 0; //@line 15648
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15648
 $vararg_buffer = sp; //@line 15649
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 15650
 FUNCTION_TABLE_v[$0 & 15](); //@line 15651
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 695; //@line 15654
  HEAP32[$AsyncCtx + 4 >> 2] = $vararg_buffer; //@line 15656
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 15658
  sp = STACKTOP; //@line 15659
  STACKTOP = sp; //@line 15660
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 15662
  _abort_message(17539, $vararg_buffer); //@line 15663
 }
}
function _serial_putc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 6356
 $2 = HEAP32[2567] | 0; //@line 6357
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6358
 _putc($1, $2) | 0; //@line 6359
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 632; //@line 6362
  HEAP32[$AsyncCtx3 + 4 >> 2] = $2; //@line 6364
  sp = STACKTOP; //@line 6365
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 6368
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6369
 _fflush($2) | 0; //@line 6370
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 633; //@line 6373
  sp = STACKTOP; //@line 6374
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6377
  return;
 }
}
function __ZN7LoRaMac10disconnectEv__async_cb_399($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 29638
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29640
 $3 = HEAP32[$2 >> 2] | 0; //@line 29641
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 29642
 __ZN7LoRaPHY18put_radio_to_sleepEv($3); //@line 29643
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 446; //@line 29646
  $4 = $ReallocAsyncCtx + 4 | 0; //@line 29647
  HEAP32[$4 >> 2] = $2; //@line 29648
  sp = STACKTOP; //@line 29649
  return;
 }
 ___async_unwind = 0; //@line 29652
 HEAP32[$ReallocAsyncCtx >> 2] = 446; //@line 29653
 $4 = $ReallocAsyncCtx + 4 | 0; //@line 29654
 HEAP32[$4 >> 2] = $2; //@line 29655
 sp = STACKTOP; //@line 29656
 return;
}
function ___stdout_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $14 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 10561
 STACKTOP = STACKTOP + 32 | 0; //@line 10562
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 10562
 $vararg_buffer = sp; //@line 10563
 HEAP32[$0 + 36 >> 2] = 9; //@line 10566
 if (!(HEAP32[$0 >> 2] & 64)) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2]; //@line 10574
  HEAP32[$vararg_buffer + 4 >> 2] = 21523; //@line 10576
  HEAP32[$vararg_buffer + 8 >> 2] = sp + 16; //@line 10578
  if (___syscall54(54, $vararg_buffer | 0) | 0) {
   HEAP8[$0 + 75 >> 0] = -1; //@line 10583
  }
 }
 $14 = ___stdio_write($0, $1, $2) | 0; //@line 10586
 STACKTOP = sp; //@line 10587
 return $14 | 0; //@line 10587
}
function _mbed_die__async_cb_64($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 20316
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20318
 _emscripten_asm_const_iii(2, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 20320
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(8) | 0; //@line 20321
 _wait_ms(150); //@line 20322
 if (___async) {
  HEAP32[$ReallocAsyncCtx14 >> 2] = 615; //@line 20325
  $4 = $ReallocAsyncCtx14 + 4 | 0; //@line 20326
  HEAP32[$4 >> 2] = $2; //@line 20327
  sp = STACKTOP; //@line 20328
  return;
 }
 ___async_unwind = 0; //@line 20331
 HEAP32[$ReallocAsyncCtx14 >> 2] = 615; //@line 20332
 $4 = $ReallocAsyncCtx14 + 4 | 0; //@line 20333
 HEAP32[$4 >> 2] = $2; //@line 20334
 sp = STACKTOP; //@line 20335
 return;
}
function _mbed_die__async_cb_63($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 20291
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20293
 _emscripten_asm_const_iii(2, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 20295
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(8) | 0; //@line 20296
 _wait_ms(150); //@line 20297
 if (___async) {
  HEAP32[$ReallocAsyncCtx13 >> 2] = 616; //@line 20300
  $4 = $ReallocAsyncCtx13 + 4 | 0; //@line 20301
  HEAP32[$4 >> 2] = $2; //@line 20302
  sp = STACKTOP; //@line 20303
  return;
 }
 ___async_unwind = 0; //@line 20306
 HEAP32[$ReallocAsyncCtx13 >> 2] = 616; //@line 20307
 $4 = $ReallocAsyncCtx13 + 4 | 0; //@line 20308
 HEAP32[$4 >> 2] = $2; //@line 20309
 sp = STACKTOP; //@line 20310
 return;
}
function _mbed_die__async_cb_62($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 20266
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20268
 _emscripten_asm_const_iii(2, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 20270
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 20271
 _wait_ms(150); //@line 20272
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 617; //@line 20275
  $4 = $ReallocAsyncCtx12 + 4 | 0; //@line 20276
  HEAP32[$4 >> 2] = $2; //@line 20277
  sp = STACKTOP; //@line 20278
  return;
 }
 ___async_unwind = 0; //@line 20281
 HEAP32[$ReallocAsyncCtx12 >> 2] = 617; //@line 20282
 $4 = $ReallocAsyncCtx12 + 4 | 0; //@line 20283
 HEAP32[$4 >> 2] = $2; //@line 20284
 sp = STACKTOP; //@line 20285
 return;
}
function _mbed_die__async_cb_61($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 20241
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20243
 _emscripten_asm_const_iii(2, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 20245
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(8) | 0; //@line 20246
 _wait_ms(150); //@line 20247
 if (___async) {
  HEAP32[$ReallocAsyncCtx11 >> 2] = 618; //@line 20250
  $4 = $ReallocAsyncCtx11 + 4 | 0; //@line 20251
  HEAP32[$4 >> 2] = $2; //@line 20252
  sp = STACKTOP; //@line 20253
  return;
 }
 ___async_unwind = 0; //@line 20256
 HEAP32[$ReallocAsyncCtx11 >> 2] = 618; //@line 20257
 $4 = $ReallocAsyncCtx11 + 4 | 0; //@line 20258
 HEAP32[$4 >> 2] = $2; //@line 20259
 sp = STACKTOP; //@line 20260
 return;
}
function _mbed_die__async_cb_60($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 20216
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20218
 _emscripten_asm_const_iii(2, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 20220
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 20221
 _wait_ms(150); //@line 20222
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 619; //@line 20225
  $4 = $ReallocAsyncCtx10 + 4 | 0; //@line 20226
  HEAP32[$4 >> 2] = $2; //@line 20227
  sp = STACKTOP; //@line 20228
  return;
 }
 ___async_unwind = 0; //@line 20231
 HEAP32[$ReallocAsyncCtx10 >> 2] = 619; //@line 20232
 $4 = $ReallocAsyncCtx10 + 4 | 0; //@line 20233
 HEAP32[$4 >> 2] = $2; //@line 20234
 sp = STACKTOP; //@line 20235
 return;
}
function _mbed_die__async_cb_59($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 20191
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20193
 _emscripten_asm_const_iii(2, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 20195
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(8) | 0; //@line 20196
 _wait_ms(150); //@line 20197
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 620; //@line 20200
  $4 = $ReallocAsyncCtx9 + 4 | 0; //@line 20201
  HEAP32[$4 >> 2] = $2; //@line 20202
  sp = STACKTOP; //@line 20203
  return;
 }
 ___async_unwind = 0; //@line 20206
 HEAP32[$ReallocAsyncCtx9 >> 2] = 620; //@line 20207
 $4 = $ReallocAsyncCtx9 + 4 | 0; //@line 20208
 HEAP32[$4 >> 2] = $2; //@line 20209
 sp = STACKTOP; //@line 20210
 return;
}
function _mbed_die__async_cb_58($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 20166
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20168
 _emscripten_asm_const_iii(2, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 20170
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 20171
 _wait_ms(400); //@line 20172
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 621; //@line 20175
  $4 = $ReallocAsyncCtx8 + 4 | 0; //@line 20176
  HEAP32[$4 >> 2] = $2; //@line 20177
  sp = STACKTOP; //@line 20178
  return;
 }
 ___async_unwind = 0; //@line 20181
 HEAP32[$ReallocAsyncCtx8 >> 2] = 621; //@line 20182
 $4 = $ReallocAsyncCtx8 + 4 | 0; //@line 20183
 HEAP32[$4 >> 2] = $2; //@line 20184
 sp = STACKTOP; //@line 20185
 return;
}
function _mbed_die__async_cb_57($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 20141
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20143
 _emscripten_asm_const_iii(2, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 20145
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(8) | 0; //@line 20146
 _wait_ms(400); //@line 20147
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 622; //@line 20150
  $4 = $ReallocAsyncCtx7 + 4 | 0; //@line 20151
  HEAP32[$4 >> 2] = $2; //@line 20152
  sp = STACKTOP; //@line 20153
  return;
 }
 ___async_unwind = 0; //@line 20156
 HEAP32[$ReallocAsyncCtx7 >> 2] = 622; //@line 20157
 $4 = $ReallocAsyncCtx7 + 4 | 0; //@line 20158
 HEAP32[$4 >> 2] = $2; //@line 20159
 sp = STACKTOP; //@line 20160
 return;
}
function _mbed_die__async_cb_56($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 20116
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20118
 _emscripten_asm_const_iii(2, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 20120
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 20121
 _wait_ms(400); //@line 20122
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 623; //@line 20125
  $4 = $ReallocAsyncCtx6 + 4 | 0; //@line 20126
  HEAP32[$4 >> 2] = $2; //@line 20127
  sp = STACKTOP; //@line 20128
  return;
 }
 ___async_unwind = 0; //@line 20131
 HEAP32[$ReallocAsyncCtx6 >> 2] = 623; //@line 20132
 $4 = $ReallocAsyncCtx6 + 4 | 0; //@line 20133
 HEAP32[$4 >> 2] = $2; //@line 20134
 sp = STACKTOP; //@line 20135
 return;
}
function _mbed_die__async_cb_55($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 20091
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20093
 _emscripten_asm_const_iii(2, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 20095
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 20096
 _wait_ms(400); //@line 20097
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 624; //@line 20100
  $4 = $ReallocAsyncCtx5 + 4 | 0; //@line 20101
  HEAP32[$4 >> 2] = $2; //@line 20102
  sp = STACKTOP; //@line 20103
  return;
 }
 ___async_unwind = 0; //@line 20106
 HEAP32[$ReallocAsyncCtx5 >> 2] = 624; //@line 20107
 $4 = $ReallocAsyncCtx5 + 4 | 0; //@line 20108
 HEAP32[$4 >> 2] = $2; //@line 20109
 sp = STACKTOP; //@line 20110
 return;
}
function _mbed_die__async_cb_54($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 20066
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20068
 _emscripten_asm_const_iii(2, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 20070
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 20071
 _wait_ms(400); //@line 20072
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 625; //@line 20075
  $4 = $ReallocAsyncCtx4 + 4 | 0; //@line 20076
  HEAP32[$4 >> 2] = $2; //@line 20077
  sp = STACKTOP; //@line 20078
  return;
 }
 ___async_unwind = 0; //@line 20081
 HEAP32[$ReallocAsyncCtx4 >> 2] = 625; //@line 20082
 $4 = $ReallocAsyncCtx4 + 4 | 0; //@line 20083
 HEAP32[$4 >> 2] = $2; //@line 20084
 sp = STACKTOP; //@line 20085
 return;
}
function _mbed_die__async_cb_53($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 20041
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20043
 _emscripten_asm_const_iii(2, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 20045
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 20046
 _wait_ms(400); //@line 20047
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 626; //@line 20050
  $4 = $ReallocAsyncCtx3 + 4 | 0; //@line 20051
  HEAP32[$4 >> 2] = $2; //@line 20052
  sp = STACKTOP; //@line 20053
  return;
 }
 ___async_unwind = 0; //@line 20056
 HEAP32[$ReallocAsyncCtx3 >> 2] = 626; //@line 20057
 $4 = $ReallocAsyncCtx3 + 4 | 0; //@line 20058
 HEAP32[$4 >> 2] = $2; //@line 20059
 sp = STACKTOP; //@line 20060
 return;
}
function _mbed_die__async_cb_52($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 20016
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20018
 _emscripten_asm_const_iii(2, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 20020
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 20021
 _wait_ms(400); //@line 20022
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 627; //@line 20025
  $4 = $ReallocAsyncCtx2 + 4 | 0; //@line 20026
  HEAP32[$4 >> 2] = $2; //@line 20027
  sp = STACKTOP; //@line 20028
  return;
 }
 ___async_unwind = 0; //@line 20031
 HEAP32[$ReallocAsyncCtx2 >> 2] = 627; //@line 20032
 $4 = $ReallocAsyncCtx2 + 4 | 0; //@line 20033
 HEAP32[$4 >> 2] = $2; //@line 20034
 sp = STACKTOP; //@line 20035
 return;
}
function _mbed_die__async_cb_51($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 19991
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19993
 _emscripten_asm_const_iii(2, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 19995
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 19996
 _wait_ms(400); //@line 19997
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 628; //@line 20000
  $4 = $ReallocAsyncCtx + 4 | 0; //@line 20001
  HEAP32[$4 >> 2] = $2; //@line 20002
  sp = STACKTOP; //@line 20003
  return;
 }
 ___async_unwind = 0; //@line 20006
 HEAP32[$ReallocAsyncCtx >> 2] = 628; //@line 20007
 $4 = $ReallocAsyncCtx + 4 | 0; //@line 20008
 HEAP32[$4 >> 2] = $2; //@line 20009
 sp = STACKTOP; //@line 20010
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb_394($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 29238
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29242
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29244
 $7 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 29246
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 29247
 FUNCTION_TABLE_vii[$7 & 31]($4, $6); //@line 29248
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 213; //@line 29251
  sp = STACKTOP; //@line 29252
  return;
 }
 ___async_unwind = 0; //@line 29255
 HEAP32[$ReallocAsyncCtx >> 2] = 213; //@line 29256
 sp = STACKTOP; //@line 29257
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_221($0) {
 $0 = $0 | 0;
 var $10 = 0, $6 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 3186
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3192
 if (!(HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 11 >> 0] | 0)) {
  return;
 }
 $10 = HEAP8[HEAP32[$0 + 8 >> 2] >> 0] | 0; //@line 3199
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 3200
 __ZN12LoRaWANStack9handle_txEhPKhth($6, $10, 0, 0, 2) | 0; //@line 3201
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 143; //@line 3204
  sp = STACKTOP; //@line 3205
  return;
 }
 ___async_unwind = 0; //@line 3208
 HEAP32[$ReallocAsyncCtx6 >> 2] = 143; //@line 3209
 sp = STACKTOP; //@line 3210
 return;
}
function __ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 21407
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21409
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21411
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21413
 $8 = HEAP32[HEAP32[$2 >> 2] >> 2] | 0; //@line 21415
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 21416
 FUNCTION_TABLE_vii[$8 & 31]($2, $4); //@line 21417
 if (!___async) {
  ___async_unwind = 0; //@line 21420
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 113; //@line 21422
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $6; //@line 21424
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $2; //@line 21426
 sp = STACKTOP; //@line 21427
 return;
}
function __ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 32201
 $8 = (HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0) != 0; //@line 32209
 $10 = HEAP32[(HEAP32[$0 + 8 >> 2] | 0) + 1108 >> 2] | 0; //@line 32211
 $11 = HEAP32[HEAP32[$0 + 12 >> 2] >> 2] | 0; //@line 32212
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 32213
 __ZN7LoRaPHY15setup_rx_windowEbj($11, $8, $10); //@line 32214
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 420; //@line 32217
  sp = STACKTOP; //@line 32218
  return;
 }
 ___async_unwind = 0; //@line 32221
 HEAP32[$ReallocAsyncCtx2 >> 2] = 420; //@line 32222
 sp = STACKTOP; //@line 32223
 return;
}
function __ZN7LoRaMac10disconnectEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $9 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29613
 HEAP8[$2 + 372 >> 0] = 0; //@line 29615
 HEAP8[$2 + 377 >> 0] = 0; //@line 29617
 HEAP8[$2 + 371 >> 0] = 1; //@line 29619
 HEAP8[$2 + 373 >> 0] = 0; //@line 29621
 HEAP8[$2 + 374 >> 0] = 0; //@line 29623
 HEAP8[$2 + 944 >> 0] = 0; //@line 29625
 $9 = $2 + 968 | 0; //@line 29626
 HEAP32[$9 >> 2] = 0; //@line 29627
 $10 = $2 + 4 | 0; //@line 29628
 __ZN14LoRaMacCommand20clear_command_bufferEv($10); //@line 29629
 __ZN14LoRaMacCommand19clear_repeat_bufferEv($10); //@line 29630
 __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($10); //@line 29631
 HEAP32[$9 >> 2] = 0; //@line 29632
 return;
}
function __ZN4mbed10TimerEventC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2004
 HEAP32[$0 >> 2] = 692; //@line 2005
 $1 = $0 + 8 | 0; //@line 2006
 HEAP32[$1 >> 2] = 0; //@line 2007
 HEAP32[$1 + 4 >> 2] = 0; //@line 2007
 HEAP32[$1 + 8 >> 2] = 0; //@line 2007
 HEAP32[$1 + 12 >> 2] = 0; //@line 2007
 $2 = _get_us_ticker_data() | 0; //@line 2008
 HEAP32[$0 + 24 >> 2] = $2; //@line 2010
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2011
 _ticker_set_handler($2, 35); //@line 2012
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 98; //@line 2015
  sp = STACKTOP; //@line 2016
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2019
  return;
 }
}
function __ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 3222
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3224
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  HEAP32[___async_retval >> 2] = -1003; //@line 3230
  return;
 }
 $4 = HEAP32[$2 >> 2] | 0; //@line 3233
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 3234
 __ZN7LoRaPHY18put_radio_to_sleepEv($4); //@line 3235
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 486; //@line 3238
  sp = STACKTOP; //@line 3239
  return;
 }
 ___async_unwind = 0; //@line 3242
 HEAP32[$ReallocAsyncCtx2 >> 2] = 486; //@line 3243
 sp = STACKTOP; //@line 3244
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_244($0) {
 $0 = $0 | 0;
 var $6 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 4628
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4634
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  return;
 }
 _printf(11245, HEAP32[$0 + 4 >> 2] | 0) | 0; //@line 4643
 _printf(11391, $6) | 0; //@line 4644
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 4645
 _putchar(10) | 0; //@line 4646
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 147; //@line 4649
  sp = STACKTOP; //@line 4650
  return;
 }
 ___async_unwind = 0; //@line 4653
 HEAP32[$ReallocAsyncCtx6 >> 2] = 147; //@line 4654
 sp = STACKTOP; //@line 4655
 return;
}
function __ZN7LoRaMacD2Ev__async_cb_385($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 26264
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26266
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 26268
 __ZN14lorawan_timersD2Ev($2 + 980 | 0); //@line 26269
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 255; //@line 26272
  $4 = $ReallocAsyncCtx + 4 | 0; //@line 26273
  HEAP32[$4 >> 2] = $2; //@line 26274
  sp = STACKTOP; //@line 26275
  return;
 }
 ___async_unwind = 0; //@line 26278
 HEAP32[$ReallocAsyncCtx >> 2] = 255; //@line 26279
 $4 = $ReallocAsyncCtx + 4 | 0; //@line 26280
 HEAP32[$4 >> 2] = $2; //@line 26281
 sp = STACKTOP; //@line 26282
 return;
}
function _sbrk(increment) {
 increment = increment | 0;
 var oldDynamicTop = 0, newDynamicTop = 0;
 oldDynamicTop = HEAP32[DYNAMICTOP_PTR >> 2] | 0; //@line 33371
 newDynamicTop = oldDynamicTop + increment | 0; //@line 33372
 if ((increment | 0) > 0 & (newDynamicTop | 0) < (oldDynamicTop | 0) | (newDynamicTop | 0) < 0) {
  abortOnCannotGrowMemory() | 0; //@line 33376
  ___setErrNo(12); //@line 33377
  return -1;
 }
 HEAP32[DYNAMICTOP_PTR >> 2] = newDynamicTop; //@line 33381
 if ((newDynamicTop | 0) > (getTotalMemory() | 0)) {
  if (!(enlargeMemory() | 0)) {
   HEAP32[DYNAMICTOP_PTR >> 2] = oldDynamicTop; //@line 33385
   ___setErrNo(12); //@line 33386
   return -1;
  }
 }
 return oldDynamicTop | 0; //@line 33390
}
function _fwrite($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $11 = 0, $13 = 0, $15 = 0, $4 = 0, $phitmp = 0;
 $4 = Math_imul($2, $1) | 0; //@line 10732
 $$ = ($1 | 0) == 0 ? 0 : $2; //@line 10734
 if ((HEAP32[$3 + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($3) | 0) == 0; //@line 10740
  $11 = ___fwritex($0, $4, $3) | 0; //@line 10741
  if ($phitmp) {
   $13 = $11; //@line 10743
  } else {
   ___unlockfile($3); //@line 10745
   $13 = $11; //@line 10746
  }
 } else {
  $13 = ___fwritex($0, $4, $3) | 0; //@line 10750
 }
 if (($13 | 0) == ($4 | 0)) {
  $15 = $$; //@line 10754
 } else {
  $15 = ($13 >>> 0) / ($1 >>> 0) | 0; //@line 10757
 }
 return $15 | 0; //@line 10759
}
function __ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t__async_cb_328($0) {
 $0 = $0 | 0;
 var $$0 = 0, $13 = 0, $15 = 0, $8 = 0, $AsyncRetVal = 0;
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12474
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 12478
 if (!$AsyncRetVal) {
  $13 = HEAP32[HEAP32[$0 + 8 >> 2] >> 2] | 0; //@line 12481
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv(HEAP32[$0 + 12 >> 2] | 0) | 0) >> 2] = $13; //@line 12483
  $15 = $8 + 944 | 0; //@line 12484
  HEAP8[$15 >> 0] = HEAP8[$15 >> 0] | 1; //@line 12487
  $$0 = 0; //@line 12488
 } else {
  HEAP8[$8 + 373 >> 0] = 0; //@line 12491
  $$0 = $AsyncRetVal; //@line 12492
 }
 HEAP32[___async_retval >> 2] = $$0; //@line 12495
 return;
}
function _fmt_x($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$05$lcssa = 0, $$056 = 0, $14 = 0, $15 = 0, $8 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) {
  $$05$lcssa = $2; //@line 12954
 } else {
  $$056 = $2; //@line 12956
  $15 = $1; //@line 12956
  $8 = $0; //@line 12956
  while (1) {
   $14 = $$056 + -1 | 0; //@line 12964
   HEAP8[$14 >> 0] = HEAPU8[15202 + ($8 & 15) >> 0] | 0 | $3; //@line 12965
   $8 = _bitshift64Lshr($8 | 0, $15 | 0, 4) | 0; //@line 12966
   $15 = tempRet0; //@line 12967
   if (($8 | 0) == 0 & ($15 | 0) == 0) {
    $$05$lcssa = $14; //@line 12972
    break;
   } else {
    $$056 = $14; //@line 12975
   }
  }
 }
 return $$05$lcssa | 0; //@line 12979
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_94($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 25908
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25912
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25914
 $7 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 25916
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 25917
 FUNCTION_TABLE_vii[$7 & 31]($4, $6); //@line 25918
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 386; //@line 25921
  sp = STACKTOP; //@line 25922
  return;
 }
 ___async_unwind = 0; //@line 25925
 HEAP32[$ReallocAsyncCtx5 >> 2] = 386; //@line 25926
 sp = STACKTOP; //@line 25927
 return;
}
function __ZN7LoRaMac10disconnectEv__async_cb_403($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 29737
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29739
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29741
 $5 = HEAP32[$2 >> 2] | 0; //@line 29742
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 29744
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($5, $4 + 1016 | 0); //@line 29745
 if (!___async) {
  ___async_unwind = 0; //@line 29748
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 442; //@line 29750
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 29752
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 29754
 sp = STACKTOP; //@line 29755
 return;
}
function __ZN7LoRaMac10disconnectEv__async_cb_402($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 29713
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29715
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29717
 $5 = HEAP32[$2 >> 2] | 0; //@line 29718
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 29720
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($5, $4 + 1036 | 0); //@line 29721
 if (!___async) {
  ___async_unwind = 0; //@line 29724
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 443; //@line 29726
 HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $2; //@line 29728
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $4; //@line 29730
 sp = STACKTOP; //@line 29731
 return;
}
function __ZN7LoRaMac10disconnectEv__async_cb_401($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 29689
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29691
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29693
 $5 = HEAP32[$2 >> 2] | 0; //@line 29694
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 29696
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($5, $4 + 1056 | 0); //@line 29697
 if (!___async) {
  ___async_unwind = 0; //@line 29700
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 444; //@line 29702
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 29704
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 29706
 sp = STACKTOP; //@line 29707
 return;
}
function __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_342($0) {
 $0 = $0 | 0;
 var $$1 = 0, $$pre = 0, $13 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13174
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13176
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 13178
 if (!$AsyncRetVal) {
  $$1 = 0; //@line 13181
  $13 = ___async_retval; //@line 13182
  HEAP32[$13 >> 2] = $$1; //@line 13183
  return;
 }
 $$pre = HEAP8[$6 >> 0] | 0; //@line 13186
 HEAP8[$8 + 373 >> 0] = 0; //@line 13188
 HEAP8[$6 >> 0] = $$pre & -9; //@line 13190
 $$1 = $AsyncRetVal; //@line 13191
 $13 = ___async_retval; //@line 13192
 HEAP32[$13 >> 2] = $$1; //@line 13193
 return;
}
function _mbedtls_gcm_free($0) {
 $0 = $0 | 0;
 var $$034$i = 0, $$05$i = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4727
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 4728
 _mbedtls_cipher_free($0); //@line 4729
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 593; //@line 4732
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 4734
  sp = STACKTOP; //@line 4735
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 4738
 $$034$i = 400; //@line 4739
 $$05$i = $0; //@line 4739
 while (1) {
  $$034$i = $$034$i + -1 | 0; //@line 4741
  HEAP8[$$05$i >> 0] = 0; //@line 4743
  if (!$$034$i) {
   break;
  } else {
   $$05$i = $$05$i + 1 | 0; //@line 4748
  }
 }
 return;
}
function __ZSt9terminatev() {
 var $0 = 0, $16 = 0, $17 = 0, $2 = 0, $5 = 0, sp = 0;
 sp = STACKTOP; //@line 15612
 $0 = ___cxa_get_globals_fast() | 0; //@line 15613
 if ($0 | 0) {
  $2 = HEAP32[$0 >> 2] | 0; //@line 15616
  if ($2 | 0) {
   $5 = $2 + 48 | 0; //@line 15620
   if ((HEAP32[$5 >> 2] & -256 | 0) == 1126902528 ? (HEAP32[$5 + 4 >> 2] | 0) == 1129074247 : 0) {
    $16 = HEAP32[$2 + 12 >> 2] | 0; //@line 15632
    _emscripten_alloc_async_context(4, sp) | 0; //@line 15633
    __ZSt11__terminatePFvvE($16); //@line 15634
   }
  }
 }
 $17 = __ZSt13get_terminatev() | 0; //@line 15639
 _emscripten_alloc_async_context(4, sp) | 0; //@line 15640
 __ZSt11__terminatePFvvE($17); //@line 15641
}
function __GLOBAL__sub_I_main_cpp__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 18277
 __ZN5Sht31C2E7PinNameS0_(22584, 10, 11); //@line 18278
 __ZN4mbed11InterruptInC2E7PinName(21608, 1337); //@line 18279
 __ZN6events10EventQueueC2EjPh(21680, 1664, 0); //@line 18280
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 18281
 __ZN16LoRaWANInterfaceC2ER9LoRaRadio(21880, 17696); //@line 18282
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 644; //@line 18285
  sp = STACKTOP; //@line 18286
  return;
 }
 ___async_unwind = 0; //@line 18289
 HEAP32[$ReallocAsyncCtx2 >> 2] = 644; //@line 18290
 sp = STACKTOP; //@line 18291
 return;
}
function __ZN14lorawan_timersD2Ev__async_cb_372($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 15748
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15750
 $4 = HEAP32[$2 + 28 >> 2] | 0; //@line 15752
 if (!$4) {
  return;
 }
 $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 15759
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 15760
 FUNCTION_TABLE_vi[$8 & 1023]($2 + 16 | 0); //@line 15761
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 267; //@line 15764
  sp = STACKTOP; //@line 15765
  return;
 }
 ___async_unwind = 0; //@line 15768
 HEAP32[$ReallocAsyncCtx5 >> 2] = 267; //@line 15769
 sp = STACKTOP; //@line 15770
 return;
}
function ___towrite($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $14 = 0, $3 = 0, $7 = 0;
 $1 = $0 + 74 | 0; //@line 10949
 $3 = HEAP8[$1 >> 0] | 0; //@line 10951
 HEAP8[$1 >> 0] = $3 + 255 | $3; //@line 10955
 $7 = HEAP32[$0 >> 2] | 0; //@line 10956
 if (!($7 & 8)) {
  HEAP32[$0 + 8 >> 2] = 0; //@line 10961
  HEAP32[$0 + 4 >> 2] = 0; //@line 10963
  $14 = HEAP32[$0 + 44 >> 2] | 0; //@line 10965
  HEAP32[$0 + 28 >> 2] = $14; //@line 10967
  HEAP32[$0 + 20 >> 2] = $14; //@line 10969
  HEAP32[$0 + 16 >> 2] = $14 + (HEAP32[$0 + 48 >> 2] | 0); //@line 10975
  $$0 = 0; //@line 10976
 } else {
  HEAP32[$0 >> 2] = $7 | 32; //@line 10979
  $$0 = -1; //@line 10980
 }
 return $$0 | 0; //@line 10982
}
function __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 23778
 $2 = HEAP32[$0 >> 2] | 0; //@line 23779
 $3 = $1 + 16 | 0; //@line 23780
 $4 = HEAP32[$3 >> 2] | 0; //@line 23781
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 23782
 __ZN6events10EventQueue6cancelEi($2, $4); //@line 23783
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 565; //@line 23786
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 23788
  sp = STACKTOP; //@line 23789
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 23792
  HEAP32[$3 >> 2] = 0; //@line 23793
  return;
 }
}
function __ZN7LoRaMac16add_channel_planERK16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15151
 if ((HEAP32[$0 + 968 >> 2] & 33 | 0) == 1) {
  $$0 = -1e3; //@line 15157
  return $$0 | 0; //@line 15158
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 15161
 $7 = __ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan($0 + 352 | 0, $1) | 0; //@line 15162
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 448; //@line 15165
  sp = STACKTOP; //@line 15166
  return 0; //@line 15167
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 15169
 $$0 = $7; //@line 15170
 return $$0 | 0; //@line 15171
}
function __ZN4mbed11InterruptInD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 29431
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29433
 $4 = HEAP32[$2 + 52 >> 2] | 0; //@line 29435
 if (!$4) {
  return;
 }
 $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 29442
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 29443
 FUNCTION_TABLE_vi[$8 & 1023]($2 + 40 | 0); //@line 29444
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 78; //@line 29447
  sp = STACKTOP; //@line 29448
  return;
 }
 ___async_unwind = 0; //@line 29451
 HEAP32[$ReallocAsyncCtx2 >> 2] = 78; //@line 29452
 sp = STACKTOP; //@line 29453
 return;
}
function __ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s__async_cb($0) {
 $0 = $0 | 0;
 var $$ = 0, $$1 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25768
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25770
 $$ = HEAP8[___async_retval >> 0] & 1 ? 7 : 6; //@line 25774
 $6 = HEAP8[$2 >> 0] | 0; //@line 25775
 $$1 = ($6 << 24 >> 24 < (HEAP8[$4 + 28 >> 0] | 0) ? 1 : $6 << 24 >> 24 > (HEAP8[$4 + 29 >> 0] | 0)) ? $$ & 5 : $$; //@line 25784
 $16 = HEAP8[$2 + 1 >> 0] | 0; //@line 25786
 HEAP8[___async_retval >> 0] = ($16 << 24 >> 24 < (HEAP8[$4 + 32 >> 0] | 0) ? 1 : $16 << 24 >> 24 > (HEAP8[$4 + 33 >> 0] | 0)) ? $$1 & 3 : $$1; //@line 25797
 return;
}
function __ZN12radio_eventsD2Ev__async_cb_353($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $7 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 14341
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14343
 $4 = HEAP32[$2 + 12 >> 2] | 0; //@line 14345
 if (!$4) {
  return;
 }
 $7 = HEAP32[$4 + 8 >> 2] | 0; //@line 14351
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 14352
 FUNCTION_TABLE_vi[$7 & 1023]($2); //@line 14353
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 262; //@line 14356
  sp = STACKTOP; //@line 14357
  return;
 }
 ___async_unwind = 0; //@line 14360
 HEAP32[$ReallocAsyncCtx7 >> 2] = 262; //@line 14361
 sp = STACKTOP; //@line 14362
 return;
}
function __ZN16SX1276_LoRaRadio10init_radioEP12radio_events($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 49
 HEAP32[$0 + 784 >> 2] = $1; //@line 51
 $5 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 54
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 55
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 56
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 48; //@line 59
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 61
  sp = STACKTOP; //@line 62
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 65
  HEAP8[$0 + 689 >> 0] = 0; //@line 67
  HEAP8[$0 + 688 >> 0] = 0; //@line 69
  return;
 }
}
function __ZN4mbed5Timer7read_msEv__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $18 = 0, $24 = 0, $26 = 0, $28 = 0, $4 = 0, $6 = 0, $9 = 0;
 $4 = $0 + 8 | 0; //@line 4928
 $6 = HEAP32[$4 >> 2] | 0; //@line 4930
 $9 = HEAP32[$4 + 4 >> 2] | 0; //@line 4933
 $11 = ___async_retval; //@line 4935
 $18 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 4942
 $24 = _i64Subtract(HEAP32[$11 >> 2] | 0, HEAP32[$11 + 4 >> 2] | 0, HEAP32[$18 >> 2] | 0, HEAP32[$18 + 4 >> 2] | 0) | 0; //@line 4948
 $26 = _i64Add($24 | 0, tempRet0 | 0, $6 | 0, $9 | 0) | 0; //@line 4950
 $28 = ___udivdi3($26 | 0, tempRet0 | 0, 1e3, 0) | 0; //@line 4952
 HEAP32[___async_retval >> 2] = $28; //@line 4955
 return;
}
function __ZN7LoRaMac21remove_single_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15230
 if ((HEAP32[$0 + 968 >> 2] & 33 | 0) == 1) {
  $$0 = -1e3; //@line 15236
  return $$0 | 0; //@line 15237
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 15240
 $7 = __ZN18LoRaMacChannelPlan21remove_single_channelEh($0 + 352 | 0, $1) | 0; //@line 15241
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 450; //@line 15244
  sp = STACKTOP; //@line 15245
  return 0; //@line 15246
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 15248
 $$0 = $7; //@line 15249
 return $$0 | 0; //@line 15250
}
function _mbedtls_cipher_setup__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0, $4 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13207
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13209
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 13211
 HEAP32[$2 + 60 >> 2] = $AsyncRetVal; //@line 13213
 if (!$AsyncRetVal) {
  $$0 = -24960; //@line 13216
 } else {
  HEAP32[$2 >> 2] = $4; //@line 13218
  if ((HEAP32[$4 + 4 >> 2] | 0) == 2) {
   HEAP32[$2 + 12 >> 2] = 4; //@line 13224
   HEAP32[$2 + 16 >> 2] = 14; //@line 13226
   $$0 = 0; //@line 13227
  } else {
   $$0 = 0; //@line 13229
  }
 }
 HEAP32[___async_retval >> 2] = $$0; //@line 13233
 return;
}
function __ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_272($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 6145
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 6148
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 6151
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 6152
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 6153
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 536; //@line 6156
  sp = STACKTOP; //@line 6157
  return;
 }
 ___async_unwind = 0; //@line 6160
 HEAP32[$ReallocAsyncCtx3 >> 2] = 536; //@line 6161
 sp = STACKTOP; //@line 6162
 return;
}
function __ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb_254($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5307
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5311
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 5313
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 5314
 FUNCTION_TABLE_vi[$5 & 1023]($4); //@line 5315
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 287; //@line 5318
  sp = STACKTOP; //@line 5319
  return;
 }
 ___async_unwind = 0; //@line 5322
 HEAP32[$ReallocAsyncCtx >> 2] = 287; //@line 5323
 sp = STACKTOP; //@line 5324
 return;
}
function _fmt_o($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $7 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) {
  $$0$lcssa = $2; //@line 12991
 } else {
  $$06 = $2; //@line 12993
  $11 = $1; //@line 12993
  $7 = $0; //@line 12993
  while (1) {
   $10 = $$06 + -1 | 0; //@line 12998
   HEAP8[$10 >> 0] = $7 & 7 | 48; //@line 12999
   $7 = _bitshift64Lshr($7 | 0, $11 | 0, 3) | 0; //@line 13000
   $11 = tempRet0; //@line 13001
   if (($7 | 0) == 0 & ($11 | 0) == 0) {
    $$0$lcssa = $10; //@line 13006
    break;
   } else {
    $$06 = $10; //@line 13009
   }
  }
 }
 return $$0$lcssa | 0; //@line 13013
}
function __ZN16LoRaWANInterface4sendEhPKhti__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11254
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11256
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 11258
 $8 = HEAP16[$0 + 14 >> 1] | 0; //@line 11260
 if (!$2) {
  $$0 = -1003; //@line 11263
  $13 = ___async_retval; //@line 11264
  HEAP16[$13 >> 1] = $$0; //@line 11265
  return;
 }
 $$0 = __ZN12LoRaWANStack9handle_txEhPKhth(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $6, $2, $8, $4 & 255) | 0; //@line 11271
 $13 = ___async_retval; //@line 11272
 HEAP16[$13 >> 1] = $$0; //@line 11273
 return;
}
function __ZN7LoRaPHY25setup_public_network_modeEb__async_cb_77($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 21493
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 21496
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 21499
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 21500
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 21501
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 545; //@line 21504
  sp = STACKTOP; //@line 21505
  return;
 }
 ___async_unwind = 0; //@line 21508
 HEAP32[$ReallocAsyncCtx3 >> 2] = 545; //@line 21509
 sp = STACKTOP; //@line 21510
 return;
}
function __ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb_75($0) {
 $0 = $0 | 0;
 var $4 = 0, $7 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 21433
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21437
 $7 = HEAP32[(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) + 76 >> 2] | 0; //@line 21440
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 21441
 FUNCTION_TABLE_vi[$7 & 1023]($4); //@line 21442
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 114; //@line 21445
  sp = STACKTOP; //@line 21446
  return;
 }
 ___async_unwind = 0; //@line 21449
 HEAP32[$ReallocAsyncCtx3 >> 2] = 114; //@line 21450
 sp = STACKTOP; //@line 21451
 return;
}
function __ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_165($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 32176
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 32179
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 32182
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 32183
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 32184
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 542; //@line 32187
  sp = STACKTOP; //@line 32188
  return;
 }
 ___async_unwind = 0; //@line 32191
 HEAP32[$ReallocAsyncCtx3 >> 2] = 542; //@line 32192
 sp = STACKTOP; //@line 32193
 return;
}
function __ZN7LoRaPHY15setup_rx_windowEbj__async_cb_44($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 19822
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 19825
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 19828
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 19829
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 19830
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 549; //@line 19833
  sp = STACKTOP; //@line 19834
  return;
 }
 ___async_unwind = 0; //@line 19837
 HEAP32[$ReallocAsyncCtx4 >> 2] = 549; //@line 19838
 sp = STACKTOP; //@line 19839
 return;
}
function __ZN7LoRaPHY15setup_rx_windowEbj__async_cb_43($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 19799
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 19802
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 19805
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 19806
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 19807
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 549; //@line 19810
  sp = STACKTOP; //@line 19811
  return;
 }
 ___async_unwind = 0; //@line 19814
 HEAP32[$ReallocAsyncCtx4 >> 2] = 549; //@line 19815
 sp = STACKTOP; //@line 19816
 return;
}
function __ZN7LoRaPHY11handle_sendEPhh__async_cb_101($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 27375
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 27378
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 27381
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 27382
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 27383
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 556; //@line 27386
  sp = STACKTOP; //@line 27387
  return;
 }
 ___async_unwind = 0; //@line 27390
 HEAP32[$ReallocAsyncCtx3 >> 2] = 556; //@line 27391
 sp = STACKTOP; //@line 27392
 return;
}
function __ZN7LoRaPHY16get_alternate_DREh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $12 = 0, $3 = 0, $6 = 0, $8 = 0;
 $3 = HEAP8[$0 + 31 >> 0] | 0; //@line 21658
 $6 = HEAP8[$0 + 26 >> 0] | 0; //@line 21661
 $8 = ($3 & 255) + 1 | 0; //@line 21663
 $12 = (($1 & 255) >>> 0) % (($8 - ($6 & 255) & 255) >>> 0) | 0; //@line 21667
 switch (($12 & 255) << 24 >> 24) {
 case 1:
  {
   $$0 = $3; //@line 21671
   return $$0 | 0; //@line 21672
  }
 case 0:
  {
   $$0 = $6; //@line 21676
   return $$0 | 0; //@line 21677
  }
 default:
  {
   $$0 = $8 - $12 & 255; //@line 21683
   return $$0 | 0; //@line 21684
  }
 }
 return 0; //@line 21687
}
function __ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_205($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 2441
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 2444
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 2447
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 2448
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 2449
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 539; //@line 2452
  sp = STACKTOP; //@line 2453
  return;
 }
 ___async_unwind = 0; //@line 2456
 HEAP32[$ReallocAsyncCtx3 >> 2] = 539; //@line 2457
 sp = STACKTOP; //@line 2458
 return;
}
function __ZN7LoRaMac19remove_channel_planEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15176
 if ((HEAP32[$0 + 968 >> 2] & 33 | 0) == 1) {
  $$0 = -1e3; //@line 15182
  return $$0 | 0; //@line 15183
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 15186
 $6 = __ZN18LoRaMacChannelPlan11remove_planEv($0 + 352 | 0) | 0; //@line 15187
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 449; //@line 15190
  sp = STACKTOP; //@line 15191
  return 0; //@line 15192
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 15194
 $$0 = $6; //@line 15195
 return $$0 | 0; //@line 15196
}
function __ZN7LoRaPHY18verify_tx_datarateEhb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$sink$in = 0, $$sink5 = 0;
 do {
  if ($2) {
   $$sink$in = $0 + 30 | 0; //@line 23165
   $$sink5 = $0 + 31 | 0; //@line 23165
  } else {
   if (!(HEAP8[$0 + 132 >> 0] & 1)) {
    $$sink$in = $0 + 26 | 0; //@line 23174
    $$sink5 = $0 + 27 | 0; //@line 23174
    break;
   } else {
    $$sink$in = $0 + 35 | 0; //@line 23179
    $$sink5 = $0 + 27 | 0; //@line 23179
    break;
   }
  }
 } while (0);
 return ((HEAP8[$$sink$in >> 0] | 0) <= $1 << 24 >> 24 ? (HEAP8[$$sink5 >> 0] | 0) >= $1 << 24 >> 24 : 0) | 0; //@line 23189
}
function __ZN4mbed7Timeout7handlerEv__async_cb_41($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 19677
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19681
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 19683
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 19684
 FUNCTION_TABLE_vi[$5 & 1023]($4); //@line 19685
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 93; //@line 19688
  sp = STACKTOP; //@line 19689
  return;
 }
 ___async_unwind = 0; //@line 19692
 HEAP32[$ReallocAsyncCtx >> 2] = 93; //@line 19693
 sp = STACKTOP; //@line 19694
 return;
}
function __ZN16SX1276_LoRaRadio6randomEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 457
 $1 = _rand() | 0; //@line 458
 $4 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0; //@line 461
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 462
 FUNCTION_TABLE_vi[$4 & 1023]($0); //@line 463
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 51; //@line 466
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 468
  sp = STACKTOP; //@line 469
  return 0; //@line 470
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 472
  return $1 | 0; //@line 473
 }
 return 0; //@line 475
}
function ___cxa_is_pointer_type($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16514
 do {
  if (!$0) {
   $3 = 0; //@line 16518
  } else {
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 16520
   $2 = ___dynamic_cast($0, 464, 520, 0) | 0; //@line 16521
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 709; //@line 16524
    sp = STACKTOP; //@line 16525
    return 0; //@line 16526
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 16528
    $3 = ($2 | 0) != 0 & 1; //@line 16531
    break;
   }
  }
 } while (0);
 return $3 | 0; //@line 16536
}
function __ZN7LoRaPHY24restore_default_channelsEv($0) {
 $0 = $0 | 0;
 var $11 = 0, $2 = 0, $5 = 0, $7 = 0, $8 = 0, $indvars$iv = 0;
 $2 = HEAP8[$0 + 128 >> 0] | 0; //@line 20266
 if (!($2 << 24 >> 24)) {
  return;
 }
 $5 = HEAP32[$0 + 124 >> 2] | 0; //@line 20272
 $7 = HEAP32[$0 + 120 >> 2] | 0; //@line 20274
 $8 = $2 & 255; //@line 20275
 $indvars$iv = 0; //@line 20276
 do {
  $11 = $7 + ($indvars$iv << 1) | 0; //@line 20280
  HEAP16[$11 >> 1] = HEAP16[$11 >> 1] | HEAP16[$5 + ($indvars$iv << 1) >> 1]; //@line 20283
  $indvars$iv = $indvars$iv + 1 | 0; //@line 20284
 } while ($indvars$iv >>> 0 < $8 >>> 0);
 return;
}
function _invoke_ticker__async_cb_327($0) {
 $0 = $0 | 0;
 var $5 = 0, $6 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 12363
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 12369
 $6 = HEAP32[$0 + 8 >> 2] | 0; //@line 12370
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 12371
 FUNCTION_TABLE_vi[$5 & 1023]($6); //@line 12372
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 640; //@line 12375
  sp = STACKTOP; //@line 12376
  return;
 }
 ___async_unwind = 0; //@line 12379
 HEAP32[$ReallocAsyncCtx >> 2] = 640; //@line 12380
 sp = STACKTOP; //@line 12381
 return;
}
function __ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_27($0) {
 $0 = $0 | 0;
 var $19 = 0, $4 = 0, $6 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18897
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18899
 HEAP32[$4 + 364 >> 2] = 2; //@line 18901
 if (HEAP8[$4 + 373 >> 0] | 0) {
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0) + 4 >> 2] = 4; //@line 18909
 }
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0) + 4 >> 2] = 4; //@line 18914
 if ((HEAP32[$6 >> 2] | 0) == 2) {
  return;
 }
 $19 = $4 + 944 | 0; //@line 18920
 HEAP8[$19 >> 0] = HEAP8[$19 >> 0] | 32; //@line 18923
 return;
}
function __Z18decrypt_join_framePKhtS0_Ph($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $4 = 0, $6 = 0;
 _mbedtls_aes_init(21312); //@line 19144
 $4 = _mbedtls_aes_setkey_enc(21312, $2, 128) | 0; //@line 19145
 if (!$4) {
  $6 = _mbedtls_aes_crypt_ecb(21312, 1, $0, $3) | 0; //@line 19148
  if (($1 & 65535) > 15 & ($6 | 0) == 0) {
   $$0 = _mbedtls_aes_crypt_ecb(21312, 1, $0 + 16 | 0, $3 + 16 | 0) | 0; //@line 19156
  } else {
   $$0 = $6; //@line 19158
  }
 } else {
  $$0 = $4; //@line 19161
 }
 _mbedtls_aes_free(21312); //@line 19163
 return $$0 | 0; //@line 19164
}
function __ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 11079
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 11081
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 11087
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 11088
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 11089
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 340; //@line 11092
  sp = STACKTOP; //@line 11093
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 11096
 return;
}
function _getint_671($0) {
 $0 = $0 | 0;
 var $$0$lcssa = 0, $$04 = 0, $11 = 0, $12 = 0, $7 = 0;
 if (!(_isdigit(HEAP8[HEAP32[$0 >> 2] >> 0] | 0) | 0)) {
  $$0$lcssa = 0; //@line 12635
 } else {
  $$04 = 0; //@line 12637
  while (1) {
   $7 = HEAP32[$0 >> 2] | 0; //@line 12640
   $11 = ($$04 * 10 | 0) + -48 + (HEAP8[$7 >> 0] | 0) | 0; //@line 12644
   $12 = $7 + 1 | 0; //@line 12645
   HEAP32[$0 >> 2] = $12; //@line 12646
   if (!(_isdigit(HEAP8[$12 >> 0] | 0) | 0)) {
    $$0$lcssa = $11; //@line 12652
    break;
   } else {
    $$04 = $11; //@line 12655
   }
  }
 }
 return $$0$lcssa | 0; //@line 12659
}
function __ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6304
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 6306
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 6312
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6313
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 6314
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 211; //@line 6317
  sp = STACKTOP; //@line 6318
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 6321
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_181($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 32885
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(4) | 0; //@line 32892
 _mbed_assert_internal(12025, 11293, 813); //@line 32893
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 133; //@line 32896
  sp = STACKTOP; //@line 32897
  return;
 }
 ___async_unwind = 0; //@line 32900
 HEAP32[$ReallocAsyncCtx12 >> 2] = 133; //@line 32901
 sp = STACKTOP; //@line 32902
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_179($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 32824
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(4) | 0; //@line 32831
 _mbed_assert_internal(12025, 11293, 789); //@line 32832
 if (___async) {
  HEAP32[$ReallocAsyncCtx13 >> 2] = 129; //@line 32835
  sp = STACKTOP; //@line 32836
  return;
 }
 ___async_unwind = 0; //@line 32839
 HEAP32[$ReallocAsyncCtx13 >> 2] = 129; //@line 32840
 sp = STACKTOP; //@line 32841
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_177($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 32763
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(4) | 0; //@line 32770
 _mbed_assert_internal(12025, 11293, 778); //@line 32771
 if (___async) {
  HEAP32[$ReallocAsyncCtx14 >> 2] = 125; //@line 32774
  sp = STACKTOP; //@line 32775
  return;
 }
 ___async_unwind = 0; //@line 32778
 HEAP32[$ReallocAsyncCtx14 >> 2] = 125; //@line 32779
 sp = STACKTOP; //@line 32780
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_214($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 2900
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(4) | 0; //@line 2907
 _mbed_assert_internal(12025, 11293, 833); //@line 2908
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 138; //@line 2911
  sp = STACKTOP; //@line 2912
  return;
 }
 ___async_unwind = 0; //@line 2915
 HEAP32[$ReallocAsyncCtx10 >> 2] = 138; //@line 2916
 sp = STACKTOP; //@line 2917
 return;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0;
 $x_sroa_0_0_extract_trunc = $a$0; //@line 32896
 $y_sroa_0_0_extract_trunc = $b$0; //@line 32897
 $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0; //@line 32898
 $1$1 = tempRet0; //@line 32899
 return (tempRet0 = (Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0) + (Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $1$1 | $1$1 & 0, $1$0 | 0 | 0) | 0; //@line 32901
}
function _mbedtls_cipher_update__async_cb_323($0) {
 $0 = $0 | 0;
 var $$1 = 0, $2 = 0, $4 = 0, $9 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12233
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12235
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 12237
 if ($AsyncRetVal | 0) {
  $$1 = $AsyncRetVal; //@line 12240
  $9 = ___async_retval; //@line 12241
  HEAP32[$9 >> 2] = $$1; //@line 12242
  return;
 }
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + $4; //@line 12247
 $$1 = 0; //@line 12248
 $9 = ___async_retval; //@line 12249
 HEAP32[$9 >> 2] = $$1; //@line 12250
 return;
}
function __ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6230
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 6232
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 6238
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6239
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 6240
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 208; //@line 6243
  sp = STACKTOP; //@line 6244
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 6247
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_237($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 4352
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(4) | 0; //@line 4359
 _mbed_assert_internal(12025, 11293, 731); //@line 4360
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 157; //@line 4363
  sp = STACKTOP; //@line 4364
  return;
 }
 ___async_unwind = 0; //@line 4367
 HEAP32[$ReallocAsyncCtx12 >> 2] = 157; //@line 4368
 sp = STACKTOP; //@line 4369
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_235($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 4284
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(4) | 0; //@line 4291
 _mbed_assert_internal(12025, 11293, 709); //@line 4292
 if (___async) {
  HEAP32[$ReallocAsyncCtx13 >> 2] = 153; //@line 4295
  sp = STACKTOP; //@line 4296
  return;
 }
 ___async_unwind = 0; //@line 4299
 HEAP32[$ReallocAsyncCtx13 >> 2] = 153; //@line 4300
 sp = STACKTOP; //@line 4301
 return;
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_109($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 27813
 if (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 27821
 _mbed_assert_internal(12547, 12565, 57); //@line 27822
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 564; //@line 27825
  sp = STACKTOP; //@line 27826
  return;
 }
 ___async_unwind = 0; //@line 27829
 HEAP32[$ReallocAsyncCtx5 >> 2] = 564; //@line 27830
 sp = STACKTOP; //@line 27831
 return;
}
function __ZN7LoRaMac34handle_mac_state_check_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 18430
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 18437
 _mbed_assert_internal(12025, 12034, 187); //@line 18438
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 367; //@line 18441
  sp = STACKTOP; //@line 18442
  return;
 }
 ___async_unwind = 0; //@line 18445
 HEAP32[$ReallocAsyncCtx2 >> 2] = 367; //@line 18446
 sp = STACKTOP; //@line 18447
 return;
}
function __ZN12LoRaWANStack17get_lorawan_stackEv() {
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6923
 do {
  if (!(HEAP8[17688] | 0)) {
   if (___cxa_guard_acquire(17688) | 0) {
    $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6931
    __ZN12LoRaWANStackC2Ev(18952); //@line 6932
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 223; //@line 6935
     sp = STACKTOP; //@line 6936
     return 0; //@line 6937
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 6939
     break;
    }
   }
  }
 } while (0);
 return 18952; //@line 6945
}
function _mbedtls_cipher_info_from_type($0) {
 $0 = $0 | 0;
 var $$05 = 0, $$06 = 0, $1 = 0, $9 = 0;
 $1 = HEAP32[2371] | 0; //@line 1775
 L1 : do {
  if (!$1) {
   $$05 = 0; //@line 1779
  } else {
   $$06 = 9480; //@line 1781
   $9 = $1; //@line 1781
   while (1) {
    if ((HEAP32[$$06 >> 2] | 0) == ($0 | 0)) {
     $$05 = $9; //@line 1786
     break L1;
    }
    $9 = HEAP32[$$06 + 12 >> 2] | 0; //@line 1791
    if (!$9) {
     $$05 = 0; //@line 1794
     break;
    } else {
     $$06 = $$06 + 8 | 0; //@line 1797
    }
   }
  }
 } while (0);
 return $$05 | 0; //@line 1802
}
function __ZN7LoRaMac29handle_delayed_tx_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 25661
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 25668
 _mbed_assert_internal(12025, 12034, 194); //@line 25669
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 411; //@line 25672
  sp = STACKTOP; //@line 25673
  return;
 }
 ___async_unwind = 0; //@line 25676
 HEAP32[$ReallocAsyncCtx2 >> 2] = 411; //@line 25677
 sp = STACKTOP; //@line 25678
 return;
}
function __ZN7LoRaPHY25accept_tx_param_setup_reqEP20tx_param_setup_req_s($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $17 = 0, $3 = 0, $6 = 0;
 $3 = HEAP8[$0 + 13 >> 0] | 0; //@line 21575
 if (!($3 << 24 >> 24)) {
  $17 = $3 << 24 >> 24 != 0; //@line 21578
  return $17 | 0; //@line 21579
 }
 $6 = $0 + 132 | 0; //@line 21582
 $10 = HEAP8[$6 >> 0] & -2 | HEAP8[$1 >> 0] & 1; //@line 21586
 HEAP8[$6 >> 0] = $10; //@line 21587
 HEAP8[$6 >> 0] = HEAP8[$1 + 1 >> 0] << 1 & 2 | $10 & -3; //@line 21594
 $17 = $3 << 24 >> 24 != 0; //@line 21595
 return $17 | 0; //@line 21596
}
function runPostSets() {}
function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535; //@line 32881
 $2 = $b & 65535; //@line 32882
 $3 = Math_imul($2, $1) | 0; //@line 32883
 $6 = $a >>> 16; //@line 32884
 $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0; //@line 32885
 $11 = $b >>> 16; //@line 32886
 $12 = Math_imul($11, $1) | 0; //@line 32887
 return (tempRet0 = ($8 >>> 16) + (Math_imul($11, $6) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, $8 + $12 << 16 | $3 & 65535 | 0) | 0; //@line 32888
}
function __ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8742
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 8744
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 8750
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8751
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 8752
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 285; //@line 8755
  sp = STACKTOP; //@line 8756
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 8759
 return;
}
function __ZN7LoRaMac22handle_rx2_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 32393
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 32400
 _mbed_assert_internal(12025, 12034, 215); //@line 32401
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 422; //@line 32404
  sp = STACKTOP; //@line 32405
  return;
 }
 ___async_unwind = 0; //@line 32408
 HEAP32[$ReallocAsyncCtx2 >> 2] = 422; //@line 32409
 sp = STACKTOP; //@line 32410
 return;
}
function __ZN7LoRaMac22handle_rx1_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 13239
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 13246
 _mbed_assert_internal(12025, 12034, 208); //@line 13247
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 416; //@line 13250
  sp = STACKTOP; //@line 13251
  return;
 }
 ___async_unwind = 0; //@line 13254
 HEAP32[$ReallocAsyncCtx2 >> 2] = 416; //@line 13255
 sp = STACKTOP; //@line 13256
 return;
}
function __ZN7LoRaPHY16set_last_tx_doneEP24set_band_txdone_params_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $11 = 0, $16 = 0, $4 = 0, $9 = 0;
 if (!$1) {
  return;
 }
 $4 = HEAP32[$0 + 72 >> 2] | 0; //@line 20239
 $9 = (HEAP8[$1 + 1 >> 0] | 0) == 0; //@line 20244
 $11 = HEAP32[$1 + 4 >> 2] | 0; //@line 20246
 $16 = HEAPU8[(HEAP32[$0 + 112 >> 2] | 0) + ((HEAPU8[$1 >> 0] | 0) * 12 | 0) + 9 >> 0] | 0; //@line 20251
 HEAP32[$4 + ($16 * 24 | 0) + 8 >> 2] = $11; //@line 20253
 if (!$9) {
  return;
 }
 HEAP32[$4 + ($16 * 24 | 0) + 4 >> 2] = $11; //@line 20258
 return;
}
function __ZN7LoRaMac18handle_ack_timeoutEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 14928
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 14935
 _mbed_assert_internal(12025, 12034, 201); //@line 14936
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 413; //@line 14939
  sp = STACKTOP; //@line 14940
  return;
 }
 ___async_unwind = 0; //@line 14943
 HEAP32[$ReallocAsyncCtx2 >> 2] = 413; //@line 14944
 sp = STACKTOP; //@line 14945
 return;
}
function __ZN7LoRaMac17handle_tx_timeoutEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 19636
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 19643
 _mbed_assert_internal(12025, 12034, 162); //@line 19644
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 361; //@line 19647
  sp = STACKTOP; //@line 19648
  return;
 }
 ___async_unwind = 0; //@line 19651
 HEAP32[$ReallocAsyncCtx2 >> 2] = 361; //@line 19652
 sp = STACKTOP; //@line 19653
 return;
}
function __ZN16LoRaWANInterface7connectERK15lorawan_connect($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$07 = 0;
 switch (HEAP8[$1 >> 0] | 0) {
 case 0:
  {
   $$07 = __ZN12LoRaWANStack20join_request_by_otaaERK15lorawan_connect(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1) | 0; //@line 3451
   break;
  }
 case 1:
  {
   $$07 = __ZN12LoRaWANStack29activation_by_personalizationERK15lorawan_connect(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1) | 0; //@line 3457
   break;
  }
 default:
  {
   $$07 = -1003; //@line 3461
  }
 }
 return $$07 | 0; //@line 3464
}
function __ZN7LoRaMac14handle_tx_doneEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 29789
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 29796
 _mbed_assert_internal(12025, 12034, 134); //@line 29797
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 270; //@line 29800
  sp = STACKTOP; //@line 29801
  return;
 }
 ___async_unwind = 0; //@line 29804
 HEAP32[$ReallocAsyncCtx2 >> 2] = 270; //@line 29805
 sp = STACKTOP; //@line 29806
 return;
}
function _calloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $3 = 0, $8 = 0;
 if (!$0) {
  $$0 = 0; //@line 10340
 } else {
  $3 = Math_imul($1, $0) | 0; //@line 10342
  if (($1 | $0) >>> 0 > 65535) {
   $$0 = (($3 >>> 0) / ($0 >>> 0) | 0 | 0) == ($1 | 0) ? $3 : -1; //@line 10349
  } else {
   $$0 = $3; //@line 10351
  }
 }
 $8 = _malloc($$0) | 0; //@line 10354
 if (!$8) {
  return $8 | 0; //@line 10357
 }
 if (!(HEAP32[$8 + -4 >> 2] & 3)) {
  return $8 | 0; //@line 10364
 }
 _memset($8 | 0, 0, $$0 | 0) | 0; //@line 10366
 return $8 | 0; //@line 10367
}
function _ticker_set_handler($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4767
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 4768
 _initialize($0); //@line 4769
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 594; //@line 4772
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 4774
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 4776
  sp = STACKTOP; //@line 4777
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4780
  HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = $1; //@line 4783
  return;
 }
}
function __ZN7LoRaMac17handle_rx_timeoutEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 4217
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 4224
 _mbed_assert_internal(12025, 12034, 155); //@line 4225
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 354; //@line 4228
  sp = STACKTOP; //@line 4229
  return;
 }
 ___async_unwind = 0; //@line 4232
 HEAP32[$ReallocAsyncCtx2 >> 2] = 354; //@line 4233
 sp = STACKTOP; //@line 4234
 return;
}
function __ZN7LoRaMac14handle_rx_doneEPhtsa__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 12865
 if (HEAP32[$0 + 8 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 12874
 _mbed_assert_internal(12025, 12034, 141); //@line 12875
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 294; //@line 12878
  sp = STACKTOP; //@line 12879
  return;
 }
 ___async_unwind = 0; //@line 12882
 HEAP32[$ReallocAsyncCtx3 >> 2] = 294; //@line 12883
 sp = STACKTOP; //@line 12884
 return;
}
function _mbed_die__async_cb_65($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 20341
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20343
 _emscripten_asm_const_iii(2, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 20345
 $ReallocAsyncCtx15 = _emscripten_realloc_async_context(8) | 0; //@line 20346
 _wait_ms(150); //@line 20347
 if (!___async) {
  ___async_unwind = 0; //@line 20350
 }
 HEAP32[$ReallocAsyncCtx15 >> 2] = 614; //@line 20352
 HEAP32[$ReallocAsyncCtx15 + 4 >> 2] = $2; //@line 20354
 sp = STACKTOP; //@line 20355
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_256($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 5370
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5372
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5374
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 5375
 __ZN4mbed10TimerEventD2Ev($2); //@line 5376
 if (!___async) {
  ___async_unwind = 0; //@line 5379
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 66; //@line 5381
 HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $4; //@line 5383
 sp = STACKTOP; //@line 5384
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_255($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 5350
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5352
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5354
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 5355
 __ZN4mbed10TimerEventD2Ev($4); //@line 5356
 if (!___async) {
  ___async_unwind = 0; //@line 5359
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 64; //@line 5361
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 5363
 sp = STACKTOP; //@line 5364
 return;
}
function __ZN7LoRaMac15handle_rx_errorEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 4961
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 4968
 _mbed_assert_internal(12025, 12034, 148); //@line 4969
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 347; //@line 4972
  sp = STACKTOP; //@line 4973
  return;
 }
 ___async_unwind = 0; //@line 4976
 HEAP32[$ReallocAsyncCtx2 >> 2] = 347; //@line 4977
 sp = STACKTOP; //@line 4978
 return;
}
function _mbed_die__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx16 = 0, sp = 0;
 sp = STACKTOP; //@line 19971
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19973
 _emscripten_asm_const_iii(2, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 19975
 $ReallocAsyncCtx16 = _emscripten_realloc_async_context(8) | 0; //@line 19976
 _wait_ms(150); //@line 19977
 if (!___async) {
  ___async_unwind = 0; //@line 19980
 }
 HEAP32[$ReallocAsyncCtx16 >> 2] = 613; //@line 19982
 HEAP32[$ReallocAsyncCtx16 + 4 >> 2] = $2; //@line 19984
 sp = STACKTOP; //@line 19985
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 5330
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5332
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5334
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 5335
 __ZN4mbed10TimerEventD2Ev($4); //@line 5336
 if (!___async) {
  ___async_unwind = 0; //@line 5339
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 62; //@line 5341
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $2; //@line 5343
 sp = STACKTOP; //@line 5344
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_183($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 33001
 $ReallocAsyncCtx15 = _emscripten_realloc_async_context(4) | 0; //@line 33002
 _mbed_assert_internal(13326, 11293, 760); //@line 33003
 if (___async) {
  HEAP32[$ReallocAsyncCtx15 >> 2] = 120; //@line 33006
  sp = STACKTOP; //@line 33007
  return;
 }
 ___async_unwind = 0; //@line 33010
 HEAP32[$ReallocAsyncCtx15 >> 2] = 120; //@line 33011
 sp = STACKTOP; //@line 33012
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_261($0) {
 $0 = $0 | 0;
 var $3 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 5525
 $3 = (HEAP32[$0 + 4 >> 2] | 0) + 52 | 0; //@line 5528
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 5529
 __ZN4mbed11InterruptInD2Ev($3); //@line 5530
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 72; //@line 5533
  sp = STACKTOP; //@line 5534
  return;
 }
 ___async_unwind = 0; //@line 5537
 HEAP32[$ReallocAsyncCtx7 >> 2] = 72; //@line 5538
 sp = STACKTOP; //@line 5539
 return;
}
function __ZN12LoRaWANStack8shutdownEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7880
 HEAP32[$0 + 1876 >> 2] = 7; //@line 7882
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7883
 $2 = __ZN12LoRaWANStack18lora_state_machineEv($0) | 0; //@line 7884
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 253; //@line 7887
  sp = STACKTOP; //@line 7888
  return 0; //@line 7889
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7891
  return $2 | 0; //@line 7892
 }
 return 0; //@line 7894
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_240($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 4429
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(4) | 0; //@line 4430
 _mbed_assert_internal(13326, 11293, 688); //@line 4431
 if (___async) {
  HEAP32[$ReallocAsyncCtx14 >> 2] = 145; //@line 4434
  sp = STACKTOP; //@line 4435
  return;
 }
 ___async_unwind = 0; //@line 4438
 HEAP32[$ReallocAsyncCtx14 >> 2] = 145; //@line 4439
 sp = STACKTOP; //@line 4440
 return;
}
function __ZN4mbed7TimeoutD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 19926
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19928
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 19929
 __ZN4mbed10TimerEventD2Ev($2); //@line 19930
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 89; //@line 19933
  sp = STACKTOP; //@line 19934
  return;
 }
 ___async_unwind = 0; //@line 19937
 HEAP32[$ReallocAsyncCtx2 >> 2] = 89; //@line 19938
 sp = STACKTOP; //@line 19939
 return;
}
function ___fflush_unlocked__async_cb_207($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $8 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2536
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2538
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2540
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 2542
 HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 16 >> 2] = 0; //@line 2544
 HEAP32[$4 >> 2] = 0; //@line 2545
 HEAP32[$6 >> 2] = 0; //@line 2546
 HEAP32[$8 >> 2] = 0; //@line 2547
 HEAP32[$10 >> 2] = 0; //@line 2548
 HEAP32[___async_retval >> 2] = 0; //@line 2550
 return;
}
function __ZN4mbed6Ticker7handlerEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6500
 $2 = HEAP32[$0 + 52 >> 2] | 0; //@line 6502
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 >> 2] | 0; //@line 6508
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6509
 FUNCTION_TABLE_vi[$5 & 1023]($0 + 40 | 0); //@line 6510
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 638; //@line 6513
  sp = STACKTOP; //@line 6514
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 6517
 return;
}
function __ZN7LoRaPHY17copy_channel_maskEPtS0_h($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $indvars$iv = 0, $wide$trip$count = 0;
 if (!(($1 | 0) != 0 & ($2 | 0) != 0 & $3 << 24 >> 24 != 0)) {
  return;
 }
 $wide$trip$count = $3 & 255; //@line 22887
 $indvars$iv = 0; //@line 22888
 do {
  HEAP16[$1 + ($indvars$iv << 1) >> 1] = HEAP16[$2 + ($indvars$iv << 1) >> 1] | 0; //@line 22893
  $indvars$iv = $indvars$iv + 1 | 0; //@line 22894
 } while (($indvars$iv | 0) != ($wide$trip$count | 0));
 return;
}
function dynCall_viiiiiiiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 a9 = a9 | 0;
 a10 = a10 | 0;
 a11 = a11 | 0;
 a12 = a12 | 0;
 a13 = a13 | 0;
 a14 = a14 | 0;
 a15 = a15 | 0;
 FUNCTION_TABLE_viiiiiiiiiiiiiii[index & 1](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0, a9 | 0, a10 | 0, a11 | 0, a12 | 0, a13 | 0, a14 | 0, a15 | 0); //@line 33502
}
function __ZN4mbed6TickerD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 6054
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6056
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 6057
 __ZN4mbed10TimerEventD2Ev($2); //@line 6058
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 635; //@line 6061
  sp = STACKTOP; //@line 6062
  return;
 }
 ___async_unwind = 0; //@line 6065
 HEAP32[$ReallocAsyncCtx2 >> 2] = 635; //@line 6066
 sp = STACKTOP; //@line 6067
 return;
}
function _gcm_aes_setkey_wrap($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2674
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2675
 $3 = _mbedtls_gcm_setkey($0, 2, $1, $2) | 0; //@line 2676
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 580; //@line 2679
  sp = STACKTOP; //@line 2680
  return 0; //@line 2681
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2683
  return $3 | 0; //@line 2684
 }
 return 0; //@line 2686
}
function _ccm_aes_setkey_wrap($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2626
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2627
 $3 = _mbedtls_ccm_setkey($0, 2, $1, $2) | 0; //@line 2628
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 578; //@line 2631
  sp = STACKTOP; //@line 2632
  return 0; //@line 2633
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2635
  return $3 | 0; //@line 2636
 }
 return 0; //@line 2638
}
function __ZN4mbed11InterruptInC2E7PinName($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, dest = 0, stop = 0;
 HEAP32[$0 >> 2] = 656; //@line 1445
 $2 = $0 + 4 | 0; //@line 1446
 $3 = $0 + 28 | 0; //@line 1447
 $4 = $0; //@line 1448
 dest = $2; //@line 1449
 stop = dest + 68 | 0; //@line 1449
 do {
  HEAP32[dest >> 2] = 0; //@line 1449
  dest = dest + 4 | 0; //@line 1449
 } while ((dest | 0) < (stop | 0));
 _gpio_irq_init($3, $1, 20, $4) | 0; //@line 1450
 _gpio_init_in($2, $1); //@line 1451
 return;
}
function _vsprintf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14458
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 14459
 $3 = _vsnprintf($0, 2147483647, $1, $2) | 0; //@line 14460
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 676; //@line 14463
  sp = STACKTOP; //@line 14464
  return 0; //@line 14465
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 14467
  return $3 | 0; //@line 14468
 }
 return 0; //@line 14470
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_265($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 5602
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5604
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(8) | 0; //@line 5606
 __ZN4mbed11InterruptInD2Ev($2 + 340 | 0); //@line 5607
 if (!___async) {
  ___async_unwind = 0; //@line 5610
 }
 HEAP32[$ReallocAsyncCtx11 >> 2] = 68; //@line 5612
 HEAP32[$ReallocAsyncCtx11 + 4 >> 2] = $2; //@line 5614
 sp = STACKTOP; //@line 5615
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_264($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 5583
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5585
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 5587
 __ZN4mbed11InterruptInD2Ev($2 + 268 | 0); //@line 5588
 if (!___async) {
  ___async_unwind = 0; //@line 5591
 }
 HEAP32[$ReallocAsyncCtx10 >> 2] = 69; //@line 5593
 HEAP32[$ReallocAsyncCtx10 + 4 >> 2] = $2; //@line 5595
 sp = STACKTOP; //@line 5596
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_257($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 5390
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5392
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 5394
 __ZN4mbed11InterruptInD2Ev($2 + 412 | 0); //@line 5395
 if (!___async) {
  ___async_unwind = 0; //@line 5398
 }
 HEAP32[$ReallocAsyncCtx12 >> 2] = 67; //@line 5400
 HEAP32[$ReallocAsyncCtx12 + 4 >> 2] = $2; //@line 5402
 sp = STACKTOP; //@line 5403
 return;
}
function __ZN4mbed8CallbackIFv11lora_eventsEE13function_callIPS2_EEvPKvS1_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7158
 $2 = HEAP32[$0 >> 2] | 0; //@line 7159
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7160
 FUNCTION_TABLE_vi[$2 & 1023]($1); //@line 7161
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 663; //@line 7164
  sp = STACKTOP; //@line 7165
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7168
  return;
 }
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_263($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 5564
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5566
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(8) | 0; //@line 5568
 __ZN4mbed11InterruptInD2Ev($2 + 196 | 0); //@line 5569
 if (!___async) {
  ___async_unwind = 0; //@line 5572
 }
 HEAP32[$ReallocAsyncCtx9 >> 2] = 70; //@line 5574
 HEAP32[$ReallocAsyncCtx9 + 4 >> 2] = $2; //@line 5576
 sp = STACKTOP; //@line 5577
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_262($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 5545
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5547
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 5549
 __ZN4mbed11InterruptInD2Ev($2 + 124 | 0); //@line 5550
 if (!___async) {
  ___async_unwind = 0; //@line 5553
 }
 HEAP32[$ReallocAsyncCtx8 >> 2] = 71; //@line 5555
 HEAP32[$ReallocAsyncCtx8 + 4 >> 2] = $2; //@line 5557
 sp = STACKTOP; //@line 5558
 return;
}
function _serial_putc__async_cb_249($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4832
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4834
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 4835
 _fflush($2) | 0; //@line 4836
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 633; //@line 4839
  sp = STACKTOP; //@line 4840
  return;
 }
 ___async_unwind = 0; //@line 4843
 HEAP32[$ReallocAsyncCtx >> 2] = 633; //@line 4844
 sp = STACKTOP; //@line 4845
 return;
}
function _putchar($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14535
 $1 = HEAP32[2567] | 0; //@line 14536
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 14537
 $2 = _fputc($0, $1) | 0; //@line 14538
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 678; //@line 14541
  sp = STACKTOP; //@line 14542
  return 0; //@line 14543
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 14545
  return $2 | 0; //@line 14546
 }
 return 0; //@line 14548
}
function _main__async_cb_31($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 19309
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19311
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(8) | 0; //@line 19312
 __ZN6events10EventQueue8dispatchEi(21680, -1); //@line 19313
 if (!___async) {
  ___async_unwind = 0; //@line 19316
 }
 HEAP32[$ReallocAsyncCtx9 >> 2] = 655; //@line 19318
 HEAP32[$ReallocAsyncCtx9 + 4 >> 2] = $2; //@line 19320
 sp = STACKTOP; //@line 19321
 return;
}
function __ZN4mbed10TimerEventD2Ev($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1977
 HEAP32[$0 >> 2] = 692; //@line 1978
 $2 = HEAP32[$0 + 24 >> 2] | 0; //@line 1980
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 1982
 _ticker_remove_event($2, $0 + 8 | 0); //@line 1983
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 97; //@line 1986
  sp = STACKTOP; //@line 1987
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1990
  return;
 }
}
function __ZN7LoRaPHY19request_new_channelEP24new_channel_req_params_s__async_cb_395($0) {
 $0 = $0 | 0;
 var $$011 = 0;
 switch (HEAP32[___async_retval >> 2] | 0) {
 case 0:
  {
   $$011 = 3; //@line 29280
   break;
  }
 case -1004:
  {
   $$011 = 2; //@line 29284
   break;
  }
 case -1005:
  {
   $$011 = 1; //@line 29288
   break;
  }
 case -1006:
  {
   $$011 = 0; //@line 29292
   break;
  }
 default:
  {
   $$011 = 0; //@line 29296
  }
 }
 HEAP8[___async_retval >> 0] = $$011; //@line 29300
 return;
}
function __ZN4mbed7TimeoutD0Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 25634
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25636
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 25637
 __ZN4mbed10TimerEventD2Ev($2); //@line 25638
 if (!___async) {
  ___async_unwind = 0; //@line 25641
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 91; //@line 25643
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 25645
 sp = STACKTOP; //@line 25646
 return;
}
function __ZN4mbed6TickerD0Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 11318
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11320
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 11321
 __ZN4mbed10TimerEventD2Ev($2); //@line 11322
 if (!___async) {
  ___async_unwind = 0; //@line 11325
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 637; //@line 11327
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 11329
 sp = STACKTOP; //@line 11330
 return;
}
function __ZN7LoRaMac17on_radio_rx_errorEv__async_cb_227($0) {
 $0 = $0 | 0;
 var $15 = 0, $4 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3496
 HEAP32[$4 + 364 >> 2] = 2; //@line 3498
 if (HEAP8[$4 + 373 >> 0] | 0) {
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0) + 4 >> 2] = 6; //@line 3506
 }
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0) + 4 >> 2] = 6; //@line 3511
 $15 = $4 + 944 | 0; //@line 3512
 HEAP8[$15 >> 0] = HEAP8[$15 >> 0] | 32; //@line 3515
 return;
}
function dynCall_viiiiiiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 a9 = a9 | 0;
 a10 = a10 | 0;
 a11 = a11 | 0;
 a12 = a12 | 0;
 a13 = a13 | 0;
 a14 = a14 | 0;
 FUNCTION_TABLE_viiiiiiiiiiiiii[index & 1](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0, a9 | 0, a10 | 0, a11 | 0, a12 | 0, a13 | 0, a14 | 0); //@line 33495
}
function _emscripten_async_resume() {
 ___async = 0; //@line 33214
 ___async_unwind = 1; //@line 33215
 while (1) {
  if (!___async_cur_frame) return;
  dynCall_vi(HEAP32[___async_cur_frame + 8 >> 2] | 0, ___async_cur_frame + 8 | 0); //@line 33221
  if (___async) return;
  if (!___async_unwind) {
   ___async_unwind = 1; //@line 33225
   continue;
  }
  stackRestore(HEAP32[___async_cur_frame + 4 >> 2] | 0); //@line 33229
  ___async_cur_frame = HEAP32[___async_cur_frame >> 2] | 0; //@line 33231
 }
}
function _rand() {
 var $0 = 0, $10 = 0, $14 = 0, $6 = 0, $8 = 0, $9 = 0;
 $0 = 18944; //@line 14488
 $6 = ___muldi3(HEAP32[$0 >> 2] | 0, HEAP32[$0 + 4 >> 2] | 0, 1284865837, 1481765933) | 0; //@line 14494
 $8 = _i64Add($6 | 0, tempRet0 | 0, 1, 0) | 0; //@line 14496
 $9 = tempRet0; //@line 14497
 $10 = 18944; //@line 14498
 HEAP32[$10 >> 2] = $8; //@line 14500
 HEAP32[$10 + 4 >> 2] = $9; //@line 14503
 $14 = _bitshift64Lshr($8 | 0, $9 | 0, 33) | 0; //@line 14504
 return $14 | 0; //@line 14506
}
function ___stdio_close($0) {
 $0 = $0 | 0;
 var $5 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 10372
 STACKTOP = STACKTOP + 16 | 0; //@line 10373
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10373
 $vararg_buffer = sp; //@line 10374
 HEAP32[$vararg_buffer >> 2] = _dummy(HEAP32[$0 + 60 >> 2] | 0) | 0; //@line 10378
 $5 = ___syscall_ret(___syscall6(6, $vararg_buffer | 0) | 0) | 0; //@line 10380
 STACKTOP = sp; //@line 10381
 return $5 | 0; //@line 10381
}
function __ZN16SX1276_LoRaRadioD0Ev($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1044
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 1045
 __ZN16SX1276_LoRaRadioD2Ev($0); //@line 1046
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 73; //@line 1049
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 1051
  sp = STACKTOP; //@line 1052
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1055
  __ZdlPv($0); //@line 1056
  return;
 }
}
function __ZN7LoRaPHY18verify_rx_datarateEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$sink5 = 0, $$sink6 = 0, $7 = 0;
 if (!(HEAP8[$0 + 132 >> 0] & 2)) {
  $7 = HEAP8[$0 + 28 >> 0] | 0; //@line 23141
  $$sink5 = $7; //@line 23142
  $$sink6 = $7; //@line 23142
 } else {
  $$sink5 = HEAP8[$0 + 28 >> 0] | 0; //@line 23148
  $$sink6 = HEAP8[$0 + 35 >> 0] | 0; //@line 23148
 }
 return ($$sink6 << 24 >> 24 <= $1 << 24 >> 24 ? $$sink5 << 24 >> 24 >= $1 << 24 >> 24 : 0) | 0; //@line 23153
}
function __ZN4mbed10TimerEvent3irqEj($0) {
 $0 = $0 | 0;
 var $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2026
 $5 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0; //@line 2031
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2032
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 2033
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 99; //@line 2036
  sp = STACKTOP; //@line 2037
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2040
  return;
 }
}
function __ZN4mbed5TimerC2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $16 = 0, $4 = 0, $6 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12840
 $6 = ___async_retval; //@line 12842
 $11 = HEAP32[$6 + 4 >> 2] | 0; //@line 12847
 $12 = HEAP32[$0 + 4 >> 2] | 0; //@line 12848
 HEAP32[$12 >> 2] = HEAP32[$6 >> 2]; //@line 12850
 HEAP32[$12 + 4 >> 2] = $11; //@line 12853
 $16 = $4; //@line 12854
 HEAP32[$16 >> 2] = 0; //@line 12856
 HEAP32[$16 + 4 >> 2] = 0; //@line 12859
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv($0) {
 $0 = $0 | 0;
 var $1 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6576
 $1 = HEAP32[$0 >> 2] | 0; //@line 6577
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6578
 FUNCTION_TABLE_v[$1 & 15](); //@line 6579
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 641; //@line 6582
  sp = STACKTOP; //@line 6583
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6586
  return;
 }
}
function _handle_interrupt_in($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6272
 $2 = HEAP32[5398] | 0; //@line 6273
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6274
 FUNCTION_TABLE_vii[$2 & 31]($0, $1); //@line 6275
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 631; //@line 6278
  sp = STACKTOP; //@line 6279
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6282
  return;
 }
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_12($0) {
 $0 = $0 | 0;
 var $12 = 0, $4 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17577
 HEAP32[$4 + 364 >> 2] = 2; //@line 17579
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0) + 4 >> 2] = 2; //@line 17583
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0) + 4 >> 2] = 2; //@line 17587
 $12 = $4 + 944 | 0; //@line 17588
 HEAP8[$12 >> 0] = HEAP8[$12 >> 0] | 32; //@line 17591
 return;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP; //@line 33156
 STACKTOP = STACKTOP + 16 | 0; //@line 33157
 $rem = __stackBase__ | 0; //@line 33158
 ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0; //@line 33159
 STACKTOP = __stackBase__; //@line 33160
 return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0; //@line 33161
}
function __ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $13 = 0, $2 = 0, $7 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4878
 if (HEAP8[$2 + 373 >> 0] | 0) {
  HEAP8[$2 + 377 >> 0] = 1; //@line 4884
  $7 = $2 + 968 | 0; //@line 4885
  HEAP32[$7 >> 2] = HEAP32[$7 >> 2] & -5; //@line 4888
 }
 if ((HEAP32[$2 + 360 >> 2] | 0) != 2) {
  return;
 }
 $13 = $2 + 944 | 0; //@line 4896
 HEAP8[$13 >> 0] = HEAP8[$13 >> 0] | 32; //@line 4899
 return;
}
function _llvm_cttz_i32(x) {
 x = x | 0;
 var ret = 0;
 ret = HEAP8[cttz_i8 + (x & 255) >> 0] | 0; //@line 32926
 if ((ret | 0) < 8) return ret | 0; //@line 32927
 ret = HEAP8[cttz_i8 + (x >> 8 & 255) >> 0] | 0; //@line 32928
 if ((ret | 0) < 8) return ret + 8 | 0; //@line 32929
 ret = HEAP8[cttz_i8 + (x >> 16 & 255) >> 0] | 0; //@line 32930
 if ((ret | 0) < 8) return ret + 16 | 0; //@line 32931
 return (HEAP8[cttz_i8 + (x >>> 24) >> 0] | 0) + 24 | 0; //@line 32932
}
function _gcm_ctx_free($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2701
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2702
 _mbedtls_gcm_free($0); //@line 2703
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 581; //@line 2706
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2708
  sp = STACKTOP; //@line 2709
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2712
  _free($0); //@line 2713
  return;
 }
}
function _ccm_ctx_free($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2653
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2654
 _mbedtls_ccm_free($0); //@line 2655
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 579; //@line 2658
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2660
  sp = STACKTOP; //@line 2661
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2664
  _free($0); //@line 2665
  return;
 }
}
function ___cxa_get_globals_fast() {
 var $3 = 0, sp = 0;
 sp = STACKTOP; //@line 14833
 STACKTOP = STACKTOP + 16 | 0; //@line 14834
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14834
 if (!(_pthread_once(22512, 8) | 0)) {
  $3 = _pthread_getspecific(HEAP32[5629] | 0) | 0; //@line 14840
  STACKTOP = sp; //@line 14841
  return $3 | 0; //@line 14841
 } else {
  _abort_message(17387, sp); //@line 14843
 }
 return 0; //@line 14846
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb($0) {
 $0 = $0 | 0;
 var $14 = 0, $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31302
 HEAP32[$2 + 980 >> 2] = HEAP32[$0 + 8 >> 2]; //@line 31308
 if (HEAP8[$2 + 373 >> 0] | 0) {
  return;
 }
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($2 + 288 | 0) | 0) + 4 >> 2] = 0; //@line 31318
 $14 = $2 + 380 | 0; //@line 31319
 HEAP8[$14 >> 0] = (HEAP8[$14 >> 0] | 0) + 1 << 24 >> 24; //@line 31322
 return;
}
function __ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$1) {
  $$0 = -1003; //@line 3637
 } else {
  if (!(HEAP32[$1 + 12 >> 2] | 0)) {
   $$0 = -1003; //@line 3643
  } else {
   __ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1); //@line 3646
   $$0 = 0; //@line 3647
  }
 }
 return $$0 | 0; //@line 3650
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2558
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2560
 $6 = $2 + 1928 | 0; //@line 2563
 HEAP32[$6 >> 2] = HEAP32[___async_retval >> 2]; //@line 2564
 __ZN7LoRaPHY18set_radio_instanceER9LoRaRadio($2 + 1336 | 0, $4); //@line 2566
 HEAP32[___async_retval >> 2] = HEAP32[$6 >> 2]; //@line 2569
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 15001
 }
 return;
}
function __ZL25default_terminate_handlerv__async_cb_113($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28177
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28179
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 28181
 HEAP32[$2 >> 2] = 17248; //@line 28182
 HEAP32[$2 + 4 >> 2] = $4; //@line 28184
 HEAP32[$2 + 8 >> 2] = $AsyncRetVal; //@line 28186
 _abort_message(17112, $2); //@line 28187
}
function _sn_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $5 = 0, $6 = 0, $7 = 0;
 $5 = $0 + 20 | 0; //@line 14417
 $6 = HEAP32[$5 >> 2] | 0; //@line 14418
 $7 = (HEAP32[$0 + 16 >> 2] | 0) - $6 | 0; //@line 14419
 $$ = $7 >>> 0 > $2 >>> 0 ? $2 : $7; //@line 14421
 _memcpy($6 | 0, $1 | 0, $$ | 0) | 0; //@line 14423
 HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $$; //@line 14426
 return $2 | 0; //@line 14427
}
function __ZN6events10EventQueueC2EjPh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = $0 + 184 | 0; //@line 2050
 HEAP32[$3 >> 2] = 0; //@line 2051
 HEAP32[$3 + 4 >> 2] = 0; //@line 2051
 HEAP32[$3 + 8 >> 2] = 0; //@line 2051
 HEAP32[$3 + 12 >> 2] = 0; //@line 2051
 if (!$2) {
  _equeue_create($0, $1) | 0; //@line 2054
  return;
 } else {
  _equeue_create_inplace($0, $1, $2) | 0; //@line 2057
  return;
 }
}
function __ZN6events10EventQueue8dispatchEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2065
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2066
 _equeue_dispatch($0, $1); //@line 2067
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 100; //@line 2070
  sp = STACKTOP; //@line 2071
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2074
  return;
 }
}
function _abort_message__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 14374
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14376
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 14377
 _fputc(10, $2) | 0; //@line 14378
 if (!___async) {
  ___async_unwind = 0; //@line 14381
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 685; //@line 14383
 sp = STACKTOP; //@line 14384
 return;
}
function __ZN6events10EventQueue6cancelEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2096
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2097
 _equeue_cancel($0, $1); //@line 2098
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 101; //@line 2101
  sp = STACKTOP; //@line 2102
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2105
  return;
 }
}
function __ZN7LoRaPHYC2ER18LoRaWANTimeHandler($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var dest = 0, stop = 0;
 HEAP32[$0 >> 2] = 868; //@line 22466
 HEAP32[$0 + 4 >> 2] = 0; //@line 22468
 HEAP32[$0 + 8 >> 2] = $1; //@line 22470
 dest = $0 + 12 | 0; //@line 22472
 stop = dest + 124 | 0; //@line 22472
 do {
  HEAP32[dest >> 2] = 0; //@line 22472
  dest = dest + 4 | 0; //@line 22472
 } while ((dest | 0) < (stop | 0));
 return;
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $9 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17505
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($2 + 288 | 0) | 0) + 4 >> 2] = 2; //@line 17509
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) + 4 >> 2] = 2; //@line 17513
 $9 = $2 + 944 | 0; //@line 17514
 HEAP8[$9 >> 0] = HEAP8[$9 >> 0] | 32; //@line 17517
 return;
}
function _add_pkcs_padding($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$09 = 0, $3 = 0, $5 = 0, $7 = 0;
 $3 = $1 - $2 | 0; //@line 2175
 if (!$3) {
  return;
 }
 $5 = $3 & 255; //@line 2180
 $$09 = 0; //@line 2181
 $7 = 0; //@line 2181
 do {
  HEAP8[$0 + ($7 + $2) >> 0] = $5; //@line 2185
  $$09 = $$09 + 1 << 24 >> 24; //@line 2186
  $7 = $$09 & 255; //@line 2187
 } while ($3 >>> 0 > $7 >>> 0);
 return;
}
function _gpio_irq_init($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0;
 if (($1 | 0) == -1) {
  $$0 = -1; //@line 6295
  return $$0 | 0; //@line 6296
 }
 HEAP32[5398] = $2; //@line 6298
 HEAP32[$0 >> 2] = $1; //@line 6299
 HEAP32[$0 + 4 >> 2] = $1; //@line 6301
 _emscripten_asm_const_iii(7, $3 | 0, $1 | 0) | 0; //@line 6302
 $$0 = 0; //@line 6303
 return $$0 | 0; //@line 6304
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31999
 if ((HEAP32[$2 + 24 >> 2] | 0) == 1) {
  HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 + 16 >> 2]; //@line 32010
  $$0 = 1; //@line 32011
 } else {
  $$0 = 0; //@line 32013
 }
 HEAP8[___async_retval >> 0] = $$0 & 1; //@line 32017
 return;
}
function _vsnprintf__async_cb($0) {
 $0 = $0 | 0;
 var $13 = 0, $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 15941
 if (HEAP32[$0 + 4 >> 2] | 0) {
  $13 = HEAP32[HEAP32[$0 + 16 >> 2] >> 2] | 0; //@line 15944
  HEAP8[$13 + ((($13 | 0) == (HEAP32[HEAP32[$0 + 20 >> 2] >> 2] | 0)) << 31 >> 31) >> 0] = 0; //@line 15949
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 15952
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 15595
 STACKTOP = STACKTOP + 16 | 0; //@line 15596
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15596
 _free($0); //@line 15598
 if (!(_pthread_setspecific(HEAP32[5629] | 0, 0) | 0)) {
  STACKTOP = sp; //@line 15603
  return;
 } else {
  _abort_message(17486, sp); //@line 15605
 }
}
function __ZN4mbed5Timer5startEv__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $13 = 0, $4 = 0, $6 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4855
 $6 = ___async_retval; //@line 4857
 $11 = HEAP32[$6 + 4 >> 2] | 0; //@line 4862
 $13 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 4864
 HEAP32[$13 >> 2] = HEAP32[$6 >> 2]; //@line 4866
 HEAP32[$13 + 4 >> 2] = $11; //@line 4869
 HEAP32[$4 >> 2] = 1; //@line 4870
 return;
}
function __ZN16LoRaWANInterface7receiveEhPhti($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0;
 if (($2 | 0) == 0 | $3 << 16 >> 16 == 0) {
  $$0 = -1003; //@line 3621
  return $$0 | 0; //@line 3622
 }
 $$0 = __ZN12LoRaWANStack9handle_rxEhPhth(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1, $2, $3, $4 & 255) | 0; //@line 3627
 return $$0 | 0; //@line 3628
}
function _serial_init($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $4 = 0, $9 = 0;
 HEAP32[$0 + 4 >> 2] = $2; //@line 6335
 HEAP32[$0 >> 2] = $1; //@line 6336
 HEAP32[5399] = 1; //@line 6337
 $4 = $0; //@line 6338
 $9 = HEAP32[$4 + 4 >> 2] | 0; //@line 6343
 $10 = 21600; //@line 6344
 HEAP32[$10 >> 2] = HEAP32[$4 >> 2]; //@line 6346
 HEAP32[$10 + 4 >> 2] = $9; //@line 6349
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 15077
 }
 return;
}
function __ZN11LoRaMacMcps18reset_confirmationEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = $0 + 36 | 0; //@line 19224
 HEAP32[$1 >> 2] = 0; //@line 19225
 HEAP32[$1 + 4 >> 2] = 0; //@line 19225
 HEAP32[$1 + 8 >> 2] = 0; //@line 19225
 HEAP32[$1 + 12 >> 2] = 0; //@line 19225
 HEAP32[$1 + 16 >> 2] = 0; //@line 19225
 HEAP32[$1 + 20 >> 2] = 0; //@line 19225
 HEAP32[$0 + 40 >> 2] = 1; //@line 19227
 return;
}
function _equeue_sema_create($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $4 = 0;
 $1 = _pthread_mutex_init($0 | 0, 0) | 0; //@line 3318
 if (!$1) {
  $4 = _pthread_cond_init($0 + 28 | 0, 0) | 0; //@line 3322
  if (!$4) {
   HEAP8[$0 + 76 >> 0] = 0; //@line 3326
   $$0 = 0; //@line 3327
  } else {
   $$0 = $4; //@line 3329
  }
 } else {
  $$0 = $1; //@line 3332
 }
 return $$0 | 0; //@line 3334
}
function _wait_ms($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6623
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6624
 _emscripten_sleep($0 | 0); //@line 6625
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 642; //@line 6628
  sp = STACKTOP; //@line 6629
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6632
  return;
 }
}
function _equeue_tick() {
 var $0 = 0, sp = 0;
 sp = STACKTOP; //@line 3281
 STACKTOP = STACKTOP + 16 | 0; //@line 3282
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 3282
 $0 = sp; //@line 3283
 _gettimeofday($0 | 0, 0) | 0; //@line 3284
 STACKTOP = sp; //@line 3291
 return ((HEAP32[$0 + 4 >> 2] | 0) / 1e3 | 0) + ((HEAP32[$0 >> 2] | 0) * 1e3 | 0) | 0; //@line 3291
}
function __ZN12LoRaWANStack9handle_txEhPKhth__async_cb_270($0) {
 $0 = $0 | 0;
 var $11 = 0, $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 6026
 if (!$AsyncRetVal) {
  $11 = HEAPU16[HEAP32[$0 + 4 >> 2] >> 1] | 0; //@line 6031
 } else {
  $11 = $AsyncRetVal << 16 >> 16; //@line 6035
 }
 HEAP16[___async_retval >> 1] = $11; //@line 6039
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var sp = 0;
 sp = STACKTOP; //@line 15580
 STACKTOP = STACKTOP + 16 | 0; //@line 15581
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15581
 if (!(_pthread_key_create(22516, 694) | 0)) {
  STACKTOP = sp; //@line 15586
  return;
 } else {
  _abort_message(17436, sp); //@line 15588
 }
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $7 = 0;
 if ((HEAP32[$1 + 4 >> 2] | 0) == ($2 | 0)) {
  $7 = $1 + 28 | 0; //@line 15141
  if ((HEAP32[$7 >> 2] | 0) != 1) {
   HEAP32[$7 >> 2] = $3; //@line 15145
  }
 }
 return;
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_408($0) {
 $0 = $0 | 0;
 var $4 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30062
 HEAP32[$4 + 988 >> 2] = __ZN18LoRaWANTimeHandler16get_current_timeEv(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) | 0; //@line 30066
 HEAP32[___async_retval >> 2] = 0; //@line 30068
 return;
}
function _emscripten_alloc_async_context(len, sp) {
 len = len | 0;
 sp = sp | 0;
 var new_frame = 0;
 new_frame = stackAlloc(len + 8 | 0) | 0; //@line 33190
 HEAP32[new_frame + 4 >> 2] = sp; //@line 33192
 HEAP32[new_frame >> 2] = ___async_cur_frame; //@line 33194
 ___async_cur_frame = new_frame; //@line 33195
 return ___async_cur_frame + 8 | 0; //@line 33196
}
function _mbedtls_gcm_free__async_cb($0) {
 $0 = $0 | 0;
 var $$034$i = 0, $$05$i = 0;
 $$034$i = 400; //@line 19954
 $$05$i = HEAP32[$0 + 4 >> 2] | 0; //@line 19954
 while (1) {
  $$034$i = $$034$i + -1 | 0; //@line 19956
  HEAP8[$$05$i >> 0] = 0; //@line 19958
  if (!$$034$i) {
   break;
  } else {
   $$05$i = $$05$i + 1 | 0; //@line 19963
  }
 }
 return;
}
function _mbedtls_aes_free($0) {
 $0 = $0 | 0;
 var $$02$i = 0, $$031$i = 0;
 if (!$0) {
  return;
 }
 $$02$i = $0; //@line 23812
 $$031$i = 280; //@line 23812
 while (1) {
  $$031$i = $$031$i + -1 | 0; //@line 23814
  HEAP8[$$02$i >> 0] = 0; //@line 23816
  if (!$$031$i) {
   break;
  } else {
   $$02$i = $$02$i + 1 | 0; //@line 23821
  }
 }
 return;
}
function __ZN14LoRaMacCommand30copy_repeat_commands_to_bufferEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $3 = 0, $8 = 0;
 $1 = $0 + 2 | 0; //@line 17250
 $3 = HEAPU8[$1 >> 0] | 0; //@line 17252
 $8 = HEAPU8[$0 + 3 >> 0] | 0; //@line 17257
 _memcpy($0 + 4 + $3 | 0, $0 + 132 | 0, $8 | 0) | 0; //@line 17258
 HEAP8[$1 >> 0] = $3 + $8; //@line 17261
 return;
}
function b394(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 p8 = p8 | 0;
 p9 = p9 | 0;
 p10 = p10 | 0;
 p11 = p11 | 0;
 p12 = p12 | 0;
 p13 = p13 | 0;
 p14 = p14 | 0;
 nullFunc_viiiiiiiiiiiiiii(0); //@line 610
}
function __ZN16LoRaWANInterface10initializeEPN6events10EventQueueE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$1) {
  $$0 = -1003; //@line 3400
 } else {
  $$0 = __ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1) | 0; //@line 3404
 }
 return $$0 | 0; //@line 3406
}
function __ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 4865
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 4865
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 4865
 return;
}
function __ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 6543
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 6543
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 6543
 return;
}
function __ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 4815
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 4815
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 4815
 return;
}
function __ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 6912
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 6912
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 6912
 return;
}
function __ZN7LoRaPHY15apply_DR_offsetEaa($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $5 = 0;
 $5 = ($1 & 255) - ($2 & 255) | 0; //@line 22187
 if (!($5 & 128)) {
  $$0 = $5 & 255; //@line 22192
  return $$0 | 0; //@line 22193
 }
 $$0 = HEAP8[$0 + 26 >> 0] | 0; //@line 22197
 return $$0 | 0; //@line 22198
}
function _gpio_init_inout($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 HEAP32[$0 >> 2] = $1; //@line 6258
 if (($1 | 0) == -1) {
  return;
 }
 HEAP32[$0 + 4 >> 2] = $1; //@line 6264
 _emscripten_asm_const_iiiiii(6, $0 | 0, $1 | 0, $2 | 0, $3 | 0, $4 | 0) | 0; //@line 6265
 return;
}
function ___cxa_can_catch__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP8[___async_retval >> 0] & 1; //@line 31378
 if ($AsyncRetVal) {
  HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 31382
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal & 1; //@line 31385
 return;
}
function b392(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 p8 = p8 | 0;
 p9 = p9 | 0;
 p10 = p10 | 0;
 p11 = p11 | 0;
 p12 = p12 | 0;
 p13 = p13 | 0;
 nullFunc_viiiiiiiiiiiiii(0); //@line 607
}
function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high << bits | (low & (1 << bits) - 1 << 32 - bits) >>> 32 - bits; //@line 33179
  return low << bits; //@line 33180
 }
 tempRet0 = low << bits - 32; //@line 33182
 return 0; //@line 33183
}
function __ZN11LoRaMacMlme18reset_confirmationEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = $0 + 8 | 0; //@line 20065
 HEAP32[$1 >> 2] = 0; //@line 20066
 HEAP32[$1 + 4 >> 2] = 0; //@line 20066
 HEAP32[$1 + 8 >> 2] = 0; //@line 20066
 HEAP32[$1 + 12 >> 2] = 0; //@line 20066
 HEAP32[$0 + 12 >> 2] = 1; //@line 20068
 return;
}
function __ZN4mbed8CallbackIFvPhtsaEE13function_moveINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 11202
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 11202
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 11202
 return;
}
function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >>> bits; //@line 33168
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits; //@line 33169
 }
 tempRet0 = 0; //@line 33171
 return high >>> bits - 32 | 0; //@line 33172
}
function __ZN7LoRaPHY26get_next_lower_tx_datarateEa($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$sink = 0;
 $$sink = HEAP8[((HEAP8[$0 + 132 >> 0] & 1) == 0 ? $0 + 26 | 0 : $0 + 35 | 0) >> 0] | 0; //@line 23031
 return ($$sink << 24 >> 24 == $1 << 24 >> 24 ? $$sink : ($1 & 255) + 255 & 255) | 0; //@line 23037
}
function _equeue_dispatch__async_cb_387($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27538
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27540
 HEAP8[HEAP32[$0 + 4 >> 2] >> 0] = 1; //@line 27541
 _equeue_mutex_unlock($4); //@line 27542
 HEAP8[$6 >> 0] = 0; //@line 27543
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 8844
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 8844
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 8844
 return;
}
function __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb_163($0) {
 $0 = $0 | 0;
 var $6 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31987
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 31989
 HEAP32[$6 + 16 >> 2] = 0; //@line 31991
 return;
}
function _fflush__async_cb_170($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 32474
 if (!(HEAP8[$0 + 4 >> 0] & 1)) {
  ___unlockfile(HEAP32[$0 + 8 >> 2] | 0); //@line 32476
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 32479
 return;
}
function __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_316($0) {
 $0 = $0 | 0;
 var $6 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11500
 HEAP32[(HEAP32[$0 + 8 >> 2] | 0) + 364 >> 2] = 2; //@line 11502
 HEAP32[___async_retval >> 2] = $6; //@line 11504
 return;
}
function __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_104($0) {
 $0 = $0 | 0;
 var $6 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27500
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 27502
 _gpio_irq_set($6 + 28 | 0, 2, 1); //@line 27504
 return;
}
function _mbedtls_aes_crypt_ecb($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 if (($1 | 0) == 1) {
  _mbedtls_internal_aes_encrypt($0, $2, $3) | 0; //@line 1137
 } else {
  _mbedtls_internal_aes_decrypt($0, $2, $3) | 0; //@line 1139
 }
 return 0; //@line 1141
}
function __GLOBAL__sub_I_main_cpp__async_cb_19($0) {
 $0 = $0 | 0;
 var dest = 0, stop = 0;
 dest = 21888; //@line 18298
 stop = dest + 48 | 0; //@line 18298
 do {
  HEAP32[dest >> 2] = 0; //@line 18298
  dest = dest + 4 | 0; //@line 18298
 } while ((dest | 0) < (stop | 0));
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_208($0) {
 $0 = $0 | 0;
 var $6 = 0;
 $6 = HEAP8[$0 + 12 >> 0] & 1; //@line 2613
 __ZN4mbed5TimerD2Ev(HEAP32[$0 + 4 >> 2] | 0); //@line 2614
 HEAP8[___async_retval >> 0] = $6 & 1; //@line 2617
 return;
}
function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP; //@line 4
 STACKTOP = STACKTOP + size | 0; //@line 5
 STACKTOP = STACKTOP + 15 & -16; //@line 6
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(size | 0); //@line 7
 return ret | 0; //@line 9
}
function _equeue_post__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29765
 _equeue_sema_signal((HEAP32[$0 + 4 >> 2] | 0) + 48 | 0); //@line 29767
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 29769
 return;
}
function __ZN16SX1276_LoRaRadio7standbyEv($0) {
 $0 = $0 | 0;
 __ZN4mbed6Ticker6detachEv($0 + 1048 | 0); //@line 95
 __ZN4mbed6Ticker6detachEv($0 + 1112 | 0); //@line 97
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 98
 HEAP8[$0 + 688 >> 0] = 0; //@line 100
 return;
}
function _puts__async_cb($0) {
 $0 = $0 | 0;
 var $$lobit = 0;
 $$lobit = HEAP32[___async_retval >> 2] >> 31; //@line 18410
 if (HEAP32[$0 + 4 >> 2] | 0) {
  ___unlockfile(HEAP32[$0 + 8 >> 2] | 0); //@line 18413
 }
 HEAP32[___async_retval >> 2] = $$lobit; //@line 18416
 return;
}
function _gpio_init_out_ex($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 HEAP32[$0 >> 2] = $1; //@line 6240
 if (($1 | 0) == -1) {
  return;
 }
 HEAP32[$0 + 4 >> 2] = $1; //@line 6246
 _emscripten_asm_const_iiii(5, $0 | 0, $1 | 0, $2 | 0) | 0; //@line 6247
 return;
}
function __ZN12LoRaWANStack23set_confirmed_msg_retryEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if ($1 << 24 >> 24 == -1) {
  $$0 = -1003; //@line 7082
 } else {
  HEAP8[$0 + 2284 >> 0] = $1; //@line 7085
  $$0 = 0; //@line 7086
 }
 return $$0 | 0; //@line 7088
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_142($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 30082
 HEAP32[___async_retval >> 2] = ($AsyncRetVal | 0) == 0 ? -1016 : $AsyncRetVal; //@line 30086
 return;
}
function ___overflow__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ((HEAP32[___async_retval >> 2] | 0) == 1) {
  $$0 = HEAPU8[HEAP32[$0 + 4 >> 2] >> 0] | 0; //@line 29827
 } else {
  $$0 = -1; //@line 29829
 }
 HEAP32[___async_retval >> 2] = $$0; //@line 29832
 return;
}
function dynCall_iiiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 return FUNCTION_TABLE_iiiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0; //@line 33439
}
function ___lctrans_impl($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$1) {
  $$0 = 0; //@line 11079
 } else {
  $$0 = ___mo_lookup(HEAP32[$1 >> 2] | 0, HEAP32[$1 + 4 >> 2] | 0, $0) | 0; //@line 11085
 }
 return ($$0 | 0 ? $$0 : $0) | 0; //@line 11089
}
function __ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_233($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4208
 HEAP8[$2 + 688 >> 0] = 2; //@line 4210
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($2); //@line 4211
 return;
}
function _equeue_break($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = $0 + 128 | 0; //@line 2723
 _equeue_mutex_lock($1); //@line 2724
 HEAP8[$0 + 8 >> 0] = 1; //@line 2726
 _equeue_mutex_unlock($1); //@line 2727
 _equeue_sema_signal($0 + 48 | 0); //@line 2729
 return;
}
function __ZN7LoRaMac21send_frame_on_channelEh__async_cb_83($0) {
 $0 = $0 | 0;
 var $7 = 0;
 $7 = (HEAP32[$0 + 4 >> 2] | 0) + 968 | 0; //@line 21927
 HEAP32[$7 >> 2] = HEAP32[$7 >> 2] | 1; //@line 21930
 HEAP32[___async_retval >> 2] = 0; //@line 21932
 return;
}
function __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_339($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13101
 HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | 1; //@line 13104
 HEAP32[___async_retval >> 2] = 0; //@line 13106
 return;
}
function __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_338($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13088
 HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | 1; //@line 13091
 HEAP32[___async_retval >> 2] = 0; //@line 13093
 return;
}
function _mbedtls_cipher_init($0) {
 $0 = $0 | 0;
 var dest = 0, stop = 0;
 dest = $0; //@line 1860
 stop = dest + 68 | 0; //@line 1860
 do {
  HEAP32[dest >> 2] = 0; //@line 1860
  dest = dest + 4 | 0; //@line 1860
 } while ((dest | 0) < (stop | 0));
 return;
}
function dynCall_viiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 FUNCTION_TABLE_viiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0); //@line 33488
}
function _emscripten_free_async_context(ctx) {
 ctx = ctx | 0;
 assert((___async_cur_frame + 8 | 0) == (ctx | 0) | 0); //@line 33202
 stackRestore(___async_cur_frame | 0); //@line 33203
 ___async_cur_frame = HEAP32[___async_cur_frame >> 2] | 0; //@line 33204
}
function _mbedtls_ccm_init($0) {
 $0 = $0 | 0;
 var dest = 0, stop = 0;
 dest = $0; //@line 1542
 stop = dest + 68 | 0; //@line 1542
 do {
  HEAP32[dest >> 2] = 0; //@line 1542
  dest = dest + 4 | 0; //@line 1542
 } while ((dest | 0) < (stop | 0));
 return;
}
function __ZN7LoRaMac23mib_get_request_confirmEP25loramac_mib_req_confirm_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN10LoRaMacMib11get_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params($0 + 348 | 0, $1, $0 + 360 | 0) | 0; //@line 15779
}
function __Z15decrypt_payloadPKhtS0_jhjPh($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 return __Z15encrypt_payloadPKhtS0_jhjPh($0, $1, $2, $3, $4, $5, $6) | 0; //@line 19012
}
function _fputc__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 19578
 ___unlockfile(HEAP32[$0 + 4 >> 2] | 0); //@line 19579
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 19581
 return;
}
function _putc__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29310
 ___unlockfile(HEAP32[$0 + 4 >> 2] | 0); //@line 29311
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 29313
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_148($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30436
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = 6; //@line 30441
 HEAP32[___async_retval >> 2] = $2; //@line 30443
 return;
}
function __ZN7LoRaPHY15get_ack_timeoutEv($0) {
 $0 = $0 | 0;
 var $5 = 0, $6 = 0;
 $5 = HEAPU16[$0 + 50 >> 1] | 0; //@line 23084
 $6 = HEAPU16[$0 + 52 >> 1] | 0; //@line 23085
 return $5 - $6 + ((_rand() | 0) % ($6 << 1 | 1 | 0) | 0) | 0; //@line 23092
}
function ___DOUBLE_BITS_677($0) {
 $0 = +$0;
 var $1 = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 14076
 $1 = HEAP32[tempDoublePtr >> 2] | 0; //@line 14076
 tempRet0 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 14078
 return $1 | 0; //@line 14079
}
function ___syscall_ret($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ($0 >>> 0 > 4294963200) {
  HEAP32[(___errno_location() | 0) >> 2] = 0 - $0; //@line 10538
  $$0 = -1; //@line 10539
 } else {
  $$0 = $0; //@line 10541
 }
 return $$0 | 0; //@line 10543
}
function _gpio_init_out($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 6224
 if (($1 | 0) == -1) {
  return;
 }
 HEAP32[$0 + 4 >> 2] = $1; //@line 6230
 _emscripten_asm_const_iii(4, $0 | 0, $1 | 0) | 0; //@line 6231
 return;
}
function _gpio_init_in($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 6209
 if (($1 | 0) == -1) {
  return;
 }
 HEAP32[$0 + 4 >> 2] = $1; //@line 6215
 _emscripten_asm_const_iii(3, $0 | 0, $1 | 0) | 0; //@line 6216
 return;
}
function _equeue_sema_signal($0) {
 $0 = $0 | 0;
 _pthread_mutex_lock($0 | 0) | 0; //@line 3340
 HEAP8[$0 + 76 >> 0] = 1; //@line 3342
 _pthread_cond_signal($0 + 28 | 0) | 0; //@line 3344
 _pthread_mutex_unlock($0 | 0) | 0; //@line 3345
 return;
}
function __ZN16LoRaWANInterface16get_channel_planER16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack20get_enabled_channelsER16lora_channelplan(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1) | 0; //@line 3542
}
function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var h = 0;
 h = b - d >>> 0; //@line 32919
 h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0; //@line 32920
 return (tempRet0 = h, a - c >>> 0 | 0) | 0; //@line 32921
}
function dynCall_iiiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return FUNCTION_TABLE_iiiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0; //@line 33432
}
function __ZN16LoRaWANInterface16set_channel_planERK16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack12add_channelsERK16lora_channelplan(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1) | 0; //@line 3533
}
function __ZN16SX1276_LoRaRadio5sleepEv($0) {
 $0 = $0 | 0;
 __ZN4mbed6Ticker6detachEv($0 + 1048 | 0); //@line 84
 __ZN4mbed6Ticker6detachEv($0 + 1112 | 0); //@line 86
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 87
 return;
}
function __ZN16SX1276_LoRaRadio10init_radioEP12radio_events__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21940
 HEAP8[$2 + 689 >> 0] = 0; //@line 21942
 HEAP8[$2 + 688 >> 0] = 0; //@line 21944
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_361($0) {
 $0 = $0 | 0;
 HEAP8[HEAP32[$0 + 8 >> 2] >> 0] = HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0; //@line 14773
 HEAP8[___async_retval >> 0] = 1; //@line 14776
 return;
}
function _equeue_enqueue__async_cb($0) {
 $0 = $0 | 0;
 var $4 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29339
 _equeue_mutex_unlock(HEAP32[$0 + 4 >> 2] | 0); //@line 29340
 HEAP32[___async_retval >> 2] = $4; //@line 29342
 return;
}
function __ZN16LoRaWANInterface22add_link_check_requestEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 4 >> 0] = 1; //@line 3479
 return __ZN12LoRaWANStack22set_link_check_requestEv(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0) | 0; //@line 3482
}
function ___clang_call_terminate($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 1063
 ___cxa_begin_catch($0 | 0) | 0; //@line 1064
 _emscripten_alloc_async_context(4, sp) | 0; //@line 1065
 __ZSt9terminatev(); //@line 1066
}
function dynCall_viiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 FUNCTION_TABLE_viiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0); //@line 33481
}
function _aes_ctx_alloc() {
 var $$0 = 0, $0 = 0;
 $0 = _calloc(1, 280) | 0; //@line 2760
 if (!$0) {
  $$0 = 0; //@line 2763
 } else {
  _mbedtls_aes_init($0); //@line 2765
  $$0 = $0; //@line 2766
 }
 return $$0 | 0; //@line 2768
}
function ___cxa_guard_acquire($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ((HEAP8[$0 >> 0] | 0) == 1) {
  $$0 = 0; //@line 16457
 } else {
  HEAP8[$0 >> 0] = 1; //@line 16459
  $$0 = 1; //@line 16460
 }
 return $$0 | 0; //@line 16462
}
function __ZN16LoRaWANInterface25set_confirmed_msg_retriesEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack23set_confirmed_msg_retryEh(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1) | 0; //@line 3524
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_426($0) {
 $0 = $0 | 0;
 HEAP8[HEAP32[$0 + 8 >> 2] >> 0] = HEAP8[$0 + 4 >> 0] | 0; //@line 31291
 HEAP8[___async_retval >> 0] = 1; //@line 31294
 return;
}
function dynCall_iiiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return FUNCTION_TABLE_iiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0; //@line 33425
}
function _aes_crypt_cbc_wrap($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return _mbedtls_aes_crypt_cbc($0, $1, $2, $3, $4, $5) | 0; //@line 2737
}
function __ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_26($0) {
 $0 = $0 | 0;
 var $3 = 0;
 $3 = (HEAP32[$0 + 4 >> 2] | 0) + 944 | 0; //@line 18883
 HEAP8[$3 >> 0] = HEAP8[$3 >> 0] | 32; //@line 18886
 return;
}
function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0;
 l = a + c >>> 0; //@line 32911
 return (tempRet0 = b + d + (l >>> 0 < a >>> 0 | 0) >>> 0, l | 0) | 0; //@line 32913
}
function __ZN7LoRaMac17on_radio_rx_errorEv__async_cb_226($0) {
 $0 = $0 | 0;
 var $3 = 0;
 $3 = (HEAP32[$0 + 4 >> 2] | 0) + 944 | 0; //@line 3483
 HEAP8[$3 >> 0] = HEAP8[$3 >> 0] | 32; //@line 3486
 return;
}
function __ZN16LoRaWANInterface12set_datarateEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack21set_channel_data_rateEh(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1) | 0; //@line 3499
}
function dynCall_viiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 FUNCTION_TABLE_viiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0); //@line 33474
}
function __ZN16LoRaWANInterface25disable_adaptive_datarateEv($0) {
 $0 = $0 | 0;
 return __ZN12LoRaWANStack24enable_adaptive_datarateEb(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, 0) | 0; //@line 3515
}
function __ZN16LoRaWANInterface14remove_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack16remove_a_channelEh(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1) | 0; //@line 3559
}
function __ZN7LoRaPHY15get_max_payloadEhb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return HEAP8[(HEAP32[($2 ? $0 + 104 | 0 : $0 + 96 | 0) >> 2] | 0) + ($1 & 255) >> 0] | 0; //@line 23066
}
function __ZN16LoRaWANInterface24enable_adaptive_datarateEv($0) {
 $0 = $0 | 0;
 return __ZN12LoRaWANStack24enable_adaptive_datarateEb(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, 1) | 0; //@line 3507
}
function __ZN7LoRaPHY15verify_tx_powerEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ((HEAP8[$0 + 22 >> 0] | 0) <= $1 << 24 >> 24 ? (HEAP8[$0 + 21 >> 0] | 0) >= $1 << 24 >> 24 : 0) | 0; //@line 23203
}
function __ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_232($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 4157
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_149($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 6; //@line 30454
 HEAP32[___async_retval >> 2] = -1014; //@line 30456
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_320($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 12027
 return;
}
function _wctomb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$0) {
  $$0 = 0; //@line 13136
 } else {
  $$0 = _wcrtomb($0, $1, 0) | 0; //@line 13139
 }
 return $$0 | 0; //@line 13141
}
function __ZN12LoRaWANStack29activation_by_personalizationERK15lorawan_connect__async_cb_74($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 21401
 return;
}
function __ZN7LoRaPHY19request_new_channelEP24new_channel_req_params_s__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[___async_retval >> 0] = HEAP8[___async_retval >> 0] & 1 ? 3 : 0; //@line 29269
 return;
}
function __ZN7LoRaPHY13mask_bit_testEPKtj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return (1 << ($2 & 15) & (HEAPU16[$1 + ($2 >>> 4 << 1) >> 1] | 0) | 0) != 0 | 0; //@line 22489
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_368($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 15440
 return;
}
function __ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb_175($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 32682
 return;
}
function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[index & 15](a1 | 0, a2 | 0, a3 | 0) | 0; //@line 33418
}
function __ZN16LoRaWANInterface19remove_channel_planEv($0) {
 $0 = $0 | 0;
 return __ZN12LoRaWANStack17drop_channel_listEv(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0) | 0; //@line 3550
}
function __ZN12LoRaWANStack20join_request_by_otaaERK15lorawan_connect__async_cb_24($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 18730
 return;
}
function _fputs($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = _strlen($0) | 0; //@line 10719
 return ((_fwrite($0, 1, $2, $1) | 0) != ($2 | 0)) << 31 >> 31 | 0; //@line 10723
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 return ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0; //@line 33148
}
function __ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_160($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 31481
 return;
}
function __ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_157($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 31409
 return;
}
function __ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_156($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 31401
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_347($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 13763
 return;
}
function b42(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(3); //@line 33611
 return 0; //@line 33611
}
function b41(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(0); //@line 33608
 return 0; //@line 33608
}
function ___dynamic_cast__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) == 1 ? HEAP32[$0 + 8 >> 2] | 0 : 0; //@line 5163
 return;
}
function __ZN16SX1276_LoRaRadio18set_public_networkEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 + 689 >> 0] = 1; //@line 503
 HEAP8[$0 + 776 >> 0] = $1 & 1; //@line 505
 return;
}
function __ZN18LoRaWANTimeHandler16get_elapsed_timeEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return (__ZN6events10EventQueue4tickEv(HEAP32[$0 >> 2] | 0) | 0) - $1 | 0; //@line 23542
}
function __ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 31393
 return;
}
function __ZN12LoRaWANStack12add_channelsERK16lora_channelplan__async_cb_252($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 5002
 return;
}
function _emscripten_realloc_async_context(len) {
 len = len | 0;
 stackRestore(___async_cur_frame | 0); //@line 33209
 return (stackAlloc(len + 8 | 0) | 0) + 8 | 0; //@line 33210
}
function _gpio_irq_set($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 _emscripten_asm_const_iiii(9, HEAP32[$0 + 4 >> 2] | 0, $1 | 0, $2 | 0) | 0; //@line 6325
 return;
}
function dynCall_viii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 FUNCTION_TABLE_viii[index & 7](a1 | 0, a2 | 0, a3 | 0); //@line 33467
}
function __ZN7LoRaMac16add_channel_planERK16lora_channelplan__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 6095
 return;
}
function __ZN16SX1276_LoRaRadio22set_max_payload_lengthE10modem_typeh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 HEAP8[$0 + 689 >> 0] = $1; //@line 493
 return;
}
function establishStackSpace(stackBase, stackMax) {
 stackBase = stackBase | 0;
 stackMax = stackMax | 0;
 STACKTOP = stackBase; //@line 21
 STACK_MAX = stackMax; //@line 22
}
function __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_392($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 29123
 return;
}
function __ZN12LoRaWANStack24enable_adaptive_datarateEb__async_cb_42($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 19726
 return;
}
function __ZN5Sht31C2E7PinNameS0_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 _emscripten_asm_const_iiii(11, $0 | 0, $1 | 0, $2 | 0) | 0; //@line 6642
 return;
}
function __ZN12LoRaWANStack22set_link_check_requestEv__async_cb_114($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 28207
 return;
}
function __ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_107($0) {
 $0 = $0 | 0;
 _gpio_irq_set((HEAP32[$0 + 8 >> 2] | 0) + 28 | 0, 2, 0); //@line 27615
 return;
}
function __ZN12LoRaWANStack29activation_by_personalizationERK15lorawan_connect__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1012; //@line 21391
 return;
}
function __ZN12LoRaWANStack21set_channel_data_rateEh__async_cb_39($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 19621
 return;
}
function __ZN7LoRaPHY23get_minimum_tx_datarateEv($0) {
 $0 = $0 | 0;
 return HEAP8[((HEAP8[$0 + 132 >> 0] & 1) == 0 ? $0 + 26 | 0 : $0 + 35 | 0) >> 0] | 0; //@line 23051
}
function __ZN4mbed8CallbackIFv11lora_eventsEE13function_moveIPS2_EEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 7178
 return;
}
function _swapc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0;
 $3 = _llvm_bswap_i32($0 | 0) | 0; //@line 11215
 return (($1 | 0) == 0 ? $0 : $3) | 0; //@line 11217
}
function __ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16LoRaWANInterface10disconnectEv($0) {
 $0 = $0 | 0;
 return __ZN12LoRaWANStack8shutdownEv(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0) | 0; //@line 3472
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 15680
 __ZdlPv($0); //@line 15681
 return;
}
function _aes_crypt_ecb_wrap($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 return _mbedtls_aes_crypt_ecb($0, $1, $2, $3) | 0; //@line 2725
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 15363
 __ZdlPv($0); //@line 15364
 return;
}
function _srand($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = 18944; //@line 14477
 HEAP32[$2 >> 2] = $0 + -1; //@line 14479
 HEAP32[$2 + 4 >> 2] = 0; //@line 14482
 return;
}
function __ZN18LoRaWANTimeHandler24activate_timer_subsystemEPN6events10EventQueueE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 23523
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb($0) {
 $0 = $0 | 0;
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv(HEAP32[$0 + 4 >> 2] | 0); //@line 19630
 return;
}
function __ZN12LoRaWANStack17drop_channel_listEv__async_cb_250($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 4917
 return;
}
function _gcm_ctx_alloc() {
 var $0 = 0;
 $0 = _calloc(1, 400) | 0; //@line 2691
 if ($0 | 0) {
  _mbedtls_gcm_init($0); //@line 2694
 }
 return $0 | 0; //@line 2696
}
function __ZN12LoRaWANStack16remove_a_channelEh__async_cb_23($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 18712
 return;
}
function b39(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(7); //@line 33605
 return 0; //@line 33605
}
function b38(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(6); //@line 33602
 return 0; //@line 33602
}
function b37(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(5); //@line 33599
 return 0; //@line 33599
}
function b36(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(0); //@line 33596
 return 0; //@line 33596
}
function _ccm_ctx_alloc() {
 var $0 = 0;
 $0 = _calloc(1, 68) | 0; //@line 2643
 if ($0 | 0) {
  _mbedtls_ccm_init($0); //@line 2646
 }
 return $0 | 0; //@line 2648
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 14891
 __ZdlPv($0); //@line 14892
 return;
}
function __ZN12LoRaWANStack17send_frame_to_macEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 29783
 return;
}
function _ticker_set_handler__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 4 >> 2] >> 2] = HEAP32[$0 + 8 >> 2]; //@line 18466
 return;
}
function _out_670($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 if (!(HEAP32[$0 >> 2] & 32)) {
  ___fwritex($1, $2, $0) | 0; //@line 12621
 }
 return;
}
function ___cxa_is_pointer_type__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = (HEAP32[___async_retval >> 2] | 0) != 0 & 1; //@line 31929
 return;
}
function __ZN12LoRaWANStack20join_request_by_otaaERK15lorawan_connect__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1012; //@line 18720
 return;
}
function setThrew(threw, value) {
 threw = threw | 0;
 value = value | 0;
 if (!__THREW__) {
  __THREW__ = threw; //@line 32
  threwValue = value; //@line 33
 }
}
function __ZN7LoRaMac21remove_single_channelEh__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 5137
 return;
}
function __ZN12LoRaWANStack20get_enabled_channelsER16lora_channelplan__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1e3; //@line 18271
 return;
}
function dynCall_iii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return FUNCTION_TABLE_iii[index & 31](a1 | 0, a2 | 0) | 0; //@line 33411
}
function __ZN18LoRaMacChannelPlan30activate_channelplan_subsystemEP7LoRaPHY($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 16513
 return;
}
function __ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_329($0) {
 $0 = $0 | 0;
 HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 364 >> 2] = 1; //@line 12543
 return;
}
function __ZN7LoRaMac19remove_channel_planEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 5646
 return;
}
function b390(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_viiiiii(0); //@line 604
}
function __ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 6596
 return;
}
function __ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed5TimerD2Ev($0) {
 $0 = $0 | 0;
 if (HEAP32[$0 >> 2] | 0) {
  if (HEAP8[$0 + 28 >> 0] | 0) {}
 }
 HEAP32[$0 >> 2] = 0; //@line 1872
 return;
}
function __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return ($0 | 0) == ($1 | 0) | 0; //@line 15088
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_204($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 8 >> 2]; //@line 2408
 return;
}
function __ZN16LoRaWANInterface7connectEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 30581
 return;
}
function __Z22compute_join_frame_micPKhtS0_Pj__async_cb_334($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 12829
 return;
}
function __ZN7LoRaPHY16get_channel_maskEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return HEAP32[($1 ? $0 + 124 | 0 : $0 + 120 | 0) >> 2] | 0; //@line 23103
}
function __ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZSt13get_terminatev() {
 var $0 = 0;
 $0 = HEAP32[2692] | 0; //@line 15670
 HEAP32[2692] = $0 + 0; //@line 15672
 return $0 | 0; //@line 15674
}
function __ZN12LoRaWANStack8shutdownEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 21966
 return;
}
function __ZN12LoRaWANStack12add_channelsERK16lora_channelplan__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1012; //@line 4992
 return;
}
function __ZN18LoRaWANTimeHandler16get_current_timeEv($0) {
 $0 = $0 | 0;
 return __ZN6events10EventQueue4tickEv(HEAP32[$0 >> 2] | 0) | 0; //@line 23532
}
function _mbedtls_cipher_update__async_cb_324($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 12260
 return;
}
function _mbedtls_cipher_setkey__async_cb_326($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 12345
 return;
}
function _gpio_irq_free($0) {
 $0 = $0 | 0;
 _emscripten_asm_const_iii(8, HEAP32[$0 + 4 >> 2] | 0, HEAP32[$0 + 8 >> 2] | 0) | 0; //@line 6314
 return;
}
function __ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb_223($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 3252
 return;
}
function dynCall_vii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 FUNCTION_TABLE_vii[index & 31](a1 | 0, a2 | 0); //@line 33460
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY13get_radio_rngEv__async_cb_154($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 30554
 return;
}
function __ZN4mbed8CallbackIFvPhtsaEE13function_callINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPKvS1_tsa__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _aes_setkey_enc_wrap($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return _mbedtls_aes_setkey_enc($0, $1, $2) | 0; //@line 2746
}
function _aes_setkey_dec_wrap($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return _mbedtls_aes_setkey_dec($0, $1, $2) | 0; //@line 2755
}
function __ZN18LoRaWANTimeHandler4stopER13timer_event_t__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 0; //@line 30563
 return;
}
function __ZN12LoRaWANStack24enable_adaptive_datarateEb__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1012; //@line 19714
 return;
}
function __ZN12LoRaWANStack21set_channel_data_rateEh__async_cb_38($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1012; //@line 19609
 return;
}
function __Z11compute_micPKhtS0_jhjPj__async_cb_313($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 11246
 return;
}
function _mbedtls_cipher_update__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 12120
 return;
}
function _mbedtls_cipher_setkey__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 12335
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function b34(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(3); //@line 33593
 return 0; //@line 33593
}
function b33(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(0); //@line 33590
 return 0; //@line 33590
}
function __ZN16SX1276_LoRaRadio6randomEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 3349
 return;
}
function __ZN12LoRaWANStack22set_link_check_requestEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1003; //@line 28195
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_152($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1011; //@line 30486
 return;
}
function __ZN11LoRaMacMlme23activate_mlme_subsystemEP7LoRaPHY($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 20090
 return;
}
function _ccm_aes_setkey_wrap__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 11355
 return;
}
function __ZN12LoRaWANStack21set_channel_data_rateEh__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1003; //@line 19601
 return;
}
function _mbedtls_ccm_setkey__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 30666
 return;
}
function _gcm_aes_setkey_wrap__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 5242
 return;
}
function __ZN10LoRaMacMib22activate_mib_subsystemEP7LoRaPHY($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 19267
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _llvm_bswap_i32(x) {
 x = x | 0;
 return (x & 255) << 24 | (x >> 8 & 255) << 16 | (x >> 16 & 255) << 8 | x >>> 24 | 0; //@line 33236
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_325($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY18set_radio_instanceER9LoRaRadio($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + 4 >> 2] = $1; //@line 22497
 return;
}
function __ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_151($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 30476
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_150($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 30466
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack17get_lorawan_stackEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 18952; //@line 30647
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($0) {
 $0 = $0 | 0;
 return (HEAP8[$0 + 3 >> 0] | 0) != 0 | 0; //@line 18586
}
function __ZN12LoRaWANStack9handle_txEhPKhth__async_cb_268($0) {
 $0 = $0 | 0;
 HEAP16[___async_retval >> 1] = -1015; //@line 5812
 return;
}
function __ZN12LoRaWANStack9handle_txEhPKhth__async_cb_267($0) {
 $0 = $0 | 0;
 HEAP16[___async_retval >> 1] = -1003; //@line 5802
 return;
}
function __ZN12LoRaWANStack17drop_channel_listEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1012; //@line 4907
 return;
}
function __ZN12LoRaWANStack16remove_a_channelEh__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1012; //@line 18702
 return;
}
function b388(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(0); //@line 601
}
function _fflush__async_cb_171($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 32489
 return;
}
function __ZN7LoRaPHY32is_custom_channel_plan_supportedEv($0) {
 $0 = $0 | 0;
 return (HEAP8[$0 + 16 >> 0] | 0) != 0 | 0; //@line 23128
}
function _strerror($0) {
 $0 = $0 | 0;
 return ___strerror_l($0, HEAP32[(___pthread_self_85() | 0) + 188 >> 2] | 0) | 0; //@line 13084
}
function __ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio11set_channelEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + 692 >> 2] = $1; //@line 451
 return;
}
function _vsprintf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 32381
 return;
}
function _putc__async_cb_396($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 29323
 return;
}
function _fputc__async_cb_37($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 19591
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _sprintf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 21956
 return;
}
function _putchar__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 19736
 return;
}
function __ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($0) {
 $0 = $0 | 0;
 return (HEAP8[$0 >> 0] | 0) != 0 | 0; //@line 17285
}
function __ZN7LoRaPHYD2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 868; //@line 20138
 HEAP32[$0 + 4 >> 2] = 0; //@line 20140
 return;
}
function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[index & 15](a1 | 0) | 0; //@line 33404
}
function __ZN4mbed8CallbackIFvPhtsaEE13function_dtorINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function _printf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 5636
 return;
}
function __ZN7LoRaPHY12get_next_ADREbRaS0_Rj__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[___async_retval >> 0] = 0; //@line 6104
 return;
}
function __ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($0) {
 $0 = $0 | 0;
 return (HEAP8[$0 + 1 >> 0] | 0) != 0 | 0; //@line 17302
}
function __ZN12LoRaWANStack23mlme_indication_handlerEP25loramac_mlme_indication_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return;
}
function b31(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(15); //@line 33587
 return 0; //@line 33587
}
function __ZN7LoRaPHY21verify_nb_join_trialsEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ($1 & 255) > 11 | 0; //@line 23211
}
function __ZN7LoRaMac11schedule_txEv__async_cb_73($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 21188
 return;
}
function __ZN7LoRaMac11schedule_txEv__async_cb_72($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 21176
 return;
}
function __ZN4mbed11InterruptInD0Ev__async_cb_380($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 25726
 return;
}
function __ZN16LoRaWANInterface25remove_link_check_requestEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 4 >> 0] = 0; //@line 3489
 return;
}
function b30(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(0); //@line 33584
 return 0; //@line 33584
}
function __ZNK14LoRaMacCommand26get_repeat_commands_lengthEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 3 >> 0] | 0; //@line 17270
}
function __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 >> 0] = 0; //@line 17276
 return;
}
function __ZSt11__terminatePFvvE__async_cb($0) {
 $0 = $0 | 0;
 _abort_message(17539, HEAP32[$0 + 4 >> 2] | 0); //@line 29168
}
function __ZN12LoRaPHYEU868D0Ev($0) {
 $0 = $0 | 0;
 __ZN7LoRaPHYD2Ev($0); //@line 23371
 __ZdlPv($0); //@line 23372
 return;
}
function __ZN4mbed6Ticker6detachEv($0) {
 $0 = $0 | 0;
 _emscripten_asm_const_ii(10, $0 + 40 | 0) | 0; //@line 6570
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_222($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_218($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_217($0) {
 $0 = $0 | 0;
 return;
}
function dynCall_vi(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 FUNCTION_TABLE_vi[index & 1023](a1 | 0); //@line 33453
}
function __ZN7LoRaPHY29get_maximum_frame_counter_gapEv($0) {
 $0 = $0 | 0;
 return HEAP16[$0 + 48 >> 1] | 0; //@line 23074
}
function __ZN5Sht3115readTemperatureEv($0) {
 $0 = $0 | 0;
 return +(+(_emscripten_asm_const_ii(12, $0 | 0) | 0) / 100.0);
}
function __ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed7TimeoutD0Ev__async_cb_378($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 25655
 return;
}
function __ZN16SX1276_LoRaRadioD0Ev__async_cb($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 6048
 return;
}
function __ZN4mbed6TickerD0Ev__async_cb_314($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 11339
 return;
}
function __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 1 >> 0] = 0; //@line 17292
 return;
}
function __ZN14LoRaMacCommand20clear_command_bufferEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 2 >> 0] = 0; //@line 17141
 return;
}
function __ZN14LoRaMacCommand19clear_repeat_bufferEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 3 >> 0] = 0; //@line 17243
 return;
}
function b386(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(7); //@line 598
}
function b385(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(6); //@line 595
}
function b384(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(5); //@line 592
}
function b383(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(0); //@line 589
}
function __ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 2 >> 0] | 0; //@line 17150
}
function __ZN7LoRaPHY25get_default_rx2_frequencyEv($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 68 >> 2] | 0; //@line 23009
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_247($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_246($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_245($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_239($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_190($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_189($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_188($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_187($0) {
 $0 = $0 | 0;
 return;
}
function _equeue_event_delay($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + -16 >> 2] = $1; //@line 3267
 return;
}
function __ZN7LoRaPHY24get_default_rx2_datarateEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 64 >> 0] | 0; //@line 23017
}
function __ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_273($0) {
 $0 = $0 | 0;
 return;
}
function _equeue_event_dtor($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + -8 >> 2] = $1; //@line 3276
 return;
}
function __ZN7LoRaPHY23get_default_tx_datarateEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 30 >> 0] | 0; //@line 23001
}
function __ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio18check_rf_frequencyEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return 1; //@line 783
}
function _aes_ctx_free($0) {
 $0 = $0 | 0;
 _mbedtls_aes_free($0); //@line 2774
 _free($0); //@line 2775
 return;
}
function __ZN4mbed8CallbackIFv11lora_eventsEE13function_callIPS2_EEvPKvS1___async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY20get_default_tx_powerEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 23 >> 0] | 0; //@line 22993
}
function __ZN6events10EventQueue14break_dispatchEv($0) {
 $0 = $0 | 0;
 _equeue_break($0); //@line 2082
 return;
}
function __ZN7LoRaPHY19get_max_nb_channelsEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 20 >> 0] | 0; //@line 23111
}
function __ZN16SX1276_LoRaRadio10get_statusEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 688 >> 0] | 0; //@line 483
}
function __ZN7LoRaPHY16get_phy_channelsEv($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 112 >> 2] | 0; //@line 23119
}
function __ZN14LoRaMacCommand23get_mac_commands_bufferEv($0) {
 $0 = $0 | 0;
 return $0 + 4 | 0; //@line 17157
}
function b28(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(31); //@line 33581
 return 0; //@line 33581
}
function b27(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(30); //@line 33578
 return 0; //@line 33578
}
function b26(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(29); //@line 33575
 return 0; //@line 33575
}
function b25(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(28); //@line 33572
 return 0; //@line 33572
}
function b24(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(27); //@line 33569
 return 0; //@line 33569
}
function b23(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(26); //@line 33566
 return 0; //@line 33566
}
function b22(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(25); //@line 33563
 return 0; //@line 33563
}
function b21(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(24); //@line 33560
 return 0; //@line 33560
}
function b20(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(23); //@line 33557
 return 0; //@line 33557
}
function b19(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(22); //@line 33554
 return 0; //@line 33554
}
function b18(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(21); //@line 33551
 return 0; //@line 33551
}
function b17(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(20); //@line 33548
 return 0; //@line 33548
}
function b16(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(19); //@line 33545
 return 0; //@line 33545
}
function b15(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(18); //@line 33542
 return 0; //@line 33542
}
function b14(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(17); //@line 33539
 return 0; //@line 33539
}
function ___lctrans($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ___lctrans_impl($0, $1) | 0; //@line 14329
}
function b13(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(0); //@line 33536
 return 0; //@line 33536
}
function _gcm_ctx_free__async_cb($0) {
 $0 = $0 | 0;
 _free(HEAP32[$0 + 4 >> 2] | 0); //@line 5146
 return;
}
function _equeue_mutex_unlock($0) {
 $0 = $0 | 0;
 _pthread_mutex_unlock($0 | 0) | 0; //@line 3311
 return;
}
function _ccm_ctx_free__async_cb($0) {
 $0 = $0 | 0;
 _free(HEAP32[$0 + 4 >> 2] | 0); //@line 5624
 return;
}
function _main__async_cb_33($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1; //@line 19337
 return;
}
function _main__async_cb_32($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1; //@line 19329
 return;
}
function _equeue_mutex_create($0) {
 $0 = $0 | 0;
 return _pthread_mutex_init($0 | 0, 0) | 0; //@line 3298
}
function __ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb_363($0) {
 $0 = $0 | 0;
 return;
}
function __ZN14LoRaMacCommandC2Ev($0) {
 $0 = $0 | 0;
 _memset($0 | 0, 0, 260) | 0; //@line 16902
 return;
}
function _main__async_cb_35($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 19426
 return;
}
function dynCall_i(index) {
 index = index | 0;
 return FUNCTION_TABLE_i[index & 7]() | 0; //@line 33397
}
function _equeue_mutex_lock($0) {
 $0 = $0 | 0;
 _pthread_mutex_lock($0 | 0) | 0; //@line 3304
 return;
}
function __ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN18LoRaWANTimeHandlerC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 0; //@line 23509
 return;
}
function __ZN18LoRaMacChannelPlanC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 0; //@line 16499
 return;
}
function __ZN7LoRaMac34handle_mac_state_check_timer_eventEv__async_cb_21($0) {
 $0 = $0 | 0;
 return;
}
function __ZN11LoRaMacMcps16get_confirmationEv($0) {
 $0 = $0 | 0;
 return $0 + 36 | 0; //@line 19235
}
function b381(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(7); //@line 586
}
function b380(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(6); //@line 583
}
function b379(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(5); //@line 580
}
function b378(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(0); //@line 577
}
function __ZN6events10EventQueue4tickEv($0) {
 $0 = $0 | 0;
 return _equeue_tick() | 0; //@line 2090
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_111($0) {
 $0 = $0 | 0;
 return;
}
function __ZN11LoRaMacMlme16get_confirmationEv($0) {
 $0 = $0 | 0;
 return $0 + 8 | 0; //@line 20076
}
function _mbedtls_aes_init($0) {
 $0 = $0 | 0;
 _memset($0 | 0, 0, 280) | 0; //@line 23801
 return;
}
function __ZN4mbed8CallbackIFv11lora_eventsEE13function_dtorIPS2_EEvPv($0) {
 $0 = $0 | 0;
 return;
}
function _mbedtls_gcm_init($0) {
 $0 = $0 | 0;
 _memset($0 | 0, 0, 400) | 0; //@line 3810
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN11LoRaMacMlme14get_indicationEv($0) {
 $0 = $0 | 0;
 return $0 + 4 | 0; //@line 20083
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_87($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac29handle_delayed_tx_timer_eventEv__async_cb_379($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaPHYEU868D2Ev($0) {
 $0 = $0 | 0;
 __ZN7LoRaPHYD2Ev($0); //@line 23364
 return;
}
function __ZN11LoRaMacMlme22set_tx_continuous_waveEhaafft__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN11LoRaMacMlmeC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 0; //@line 20052
 return;
}
function dynCall_v(index) {
 index = index | 0;
 FUNCTION_TABLE_v[index & 15](); //@line 33446
}
function __ZN11LoRaMacMcps14get_indicationEv($0) {
 $0 = $0 | 0;
 return $0 | 0; //@line 19241
}
function __ZN10LoRaMacMibC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 0; //@line 19253
 return;
}
function __ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_120($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_118($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_434($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY25setup_public_network_modeEb__async_cb_78($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16LoRaWANInterfaceD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 3662
 return;
}
function _isdigit($0) {
 $0 = $0 | 0;
 return ($0 + -48 | 0) >>> 0 < 10 | 0; //@line 10596
}
function __ZN7LoRaMac22handle_rx2_timer_eventEv__async_cb_437($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac22handle_rx1_timer_eventEv__async_cb_343($0) {
 $0 = $0 | 0;
 return;
}
function b11(p0) {
 p0 = p0 | 0;
 nullFunc_ii(15); //@line 33533
 return 0; //@line 33533
}
function b10(p0) {
 p0 = p0 | 0;
 nullFunc_ii(14); //@line 33530
 return 0; //@line 33530
}
function b9(p0) {
 p0 = p0 | 0;
 nullFunc_ii(13); //@line 33527
 return 0; //@line 33527
}
function b8(p0) {
 p0 = p0 | 0;
 nullFunc_ii(12); //@line 33524
 return 0; //@line 33524
}
function b7(p0) {
 p0 = p0 | 0;
 nullFunc_ii(11); //@line 33521
 return 0; //@line 33521
}
function b6(p0) {
 p0 = p0 | 0;
 nullFunc_ii(10); //@line 33518
 return 0; //@line 33518
}
function __ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_166($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_285($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_284($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_283($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_282($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_281($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_280($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_279($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_277($0) {
 $0 = $0 | 0;
 return;
}
function __ZL18lora_event_handler11lora_events__async_cb_49($0) {
 $0 = $0 | 0;
 return;
}
function __ZL18lora_event_handler11lora_events__async_cb_48($0) {
 $0 = $0 | 0;
 return;
}
function __ZL18lora_event_handler11lora_events__async_cb_47($0) {
 $0 = $0 | 0;
 return;
}
function b5(p0) {
 p0 = p0 | 0;
 nullFunc_ii(0); //@line 33515
 return 0; //@line 33515
}
function __ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb_76($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_206($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac18handle_ack_timeoutEv__async_cb_364($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac14handle_rx_doneEPhtsa__async_cb_336($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac17handle_rx_timeoutEv__async_cb_234($0) {
 $0 = $0 | 0;
 return;
}
function __ZL18lora_event_handler11lora_events__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___ofl_lock() {
 ___lock(22500); //@line 11222
 return 22508; //@line 11223
}
function __ZN7LoRaMac17handle_tx_timeoutEv__async_cb_40($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY15setup_rx_windowEbj__async_cb_45($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac15handle_rx_errorEv__async_cb_251($0) {
 $0 = $0 | 0;
 return;
}
function b376(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(31); //@line 574
}
function b375(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(30); //@line 571
}
function b374(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(29); //@line 568
}
function b373(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(28); //@line 565
}
function b372(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(27); //@line 562
}
function b371(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(26); //@line 559
}
function b370(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(25); //@line 556
}
function _abort_message__async_cb_355($0) {
 $0 = $0 | 0;
 _abort(); //@line 14391
}
function __ZN7LoRaPHYD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 20147
 return;
}
function __ZN7LoRaMac14handle_tx_doneEv__async_cb_404($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue8dispatchEi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed10TimerEventD0Ev($0) {
 $0 = $0 | 0;
 _llvm_trap(); //@line 1998
}
function __ZN11LoRaMacMcps23activate_mcps_subsystemEv($0) {
 $0 = $0 | 0;
 return;
}
function b369(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(0); //@line 553
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY11handle_sendEPhh__async_cb_102($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue6cancelEi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function setTempRet0(value) {
 value = value | 0;
 tempRet0 = value; //@line 39
}
function _frexpl($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 return +(+_frexp($0, $1));
}
function ___cxa_pure_virtual__wrapper() {
 ___cxa_pure_virtual(); //@line 33617
}
function __ZN16SX1276_LoRaRadio4sendEPhh__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed11InterruptInD2Ev__async_cb_398($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_260($0) {
 $0 = $0 | 0;
 return;
}
function __ZN14lorawan_timersD2Ev__async_cb_373($0) {
 $0 = $0 | 0;
 return;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function ___pthread_self_910() {
 return _pthread_self() | 0; //@line 14250
}
function __ZN4mbed7Timeout7handlerEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed10TimerEvent3irqEj__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio11radio_resetEv($0) {
 $0 = $0 | 0;
 return;
}
function ___pthread_self_85() {
 return _pthread_self() | 0; //@line 14256
}
function __ZN4mbed6Ticker7handlerEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12radio_eventsD2Ev__async_cb_354($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStackC2Ev__async_cb_169($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed10TimerEventD2Ev__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed10TimerEventC2Ev__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function stackRestore(top) {
 top = top | 0;
 STACKTOP = top; //@line 16
}
function _pthread_mutex_unlock(x) {
 x = x | 0;
 return 0; //@line 33363
}
function __ZN4mbed7TimeoutD2Ev__async_cb_50($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed6TickerD2Ev__async_cb_271($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio9start_cadEv($0) {
 $0 = $0 | 0;
 return;
}
function __ZdlPv($0) {
 $0 = $0 | 0;
 _free($0); //@line 14717
 return;
}
function b3() {
 nullFunc_i(7); //@line 33512
 return 0; //@line 33512
}
function b2() {
 nullFunc_i(6); //@line 33509
 return 0; //@line 33509
}
function b1() {
 nullFunc_i(0); //@line 33506
 return 0; //@line 33506
}
function _schedule_interrupt__async_cb_10($0) {
 $0 = $0 | 0;
 return;
}
function _pthread_mutex_lock(x) {
 x = x | 0;
 return 0; //@line 33359
}
function _schedule_interrupt__async_cb_9($0) {
 $0 = $0 | 0;
 return;
}
function _schedule_interrupt__async_cb_6($0) {
 $0 = $0 | 0;
 return;
}
function _schedule_interrupt__async_cb_5($0) {
 $0 = $0 | 0;
 return;
}
function _mbed_assert_internal__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio6unlockEv($0) {
 $0 = $0 | 0;
 return;
}
function _ticker_remove_event__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _handle_interrupt_in__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___ofl_unlock() {
 ___unlock(22500); //@line 11228
 return;
}
function __ZN16SX1276_LoRaRadio4lockEv($0) {
 $0 = $0 | 0;
 return;
}
function __ZL12send_messagev__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function b183(p0) {
 p0 = p0 | 0;
 nullFunc_vi(839); //@line 34031
}
function b182(p0) {
 p0 = p0 | 0;
 nullFunc_vi(838); //@line 34028
}
function b181(p0) {
 p0 = p0 | 0;
 nullFunc_vi(837); //@line 34025
}
function b180(p0) {
 p0 = p0 | 0;
 nullFunc_vi(836); //@line 34022
}
function b179(p0) {
 p0 = p0 | 0;
 nullFunc_vi(835); //@line 34019
}
function b178(p0) {
 p0 = p0 | 0;
 nullFunc_vi(834); //@line 34016
}
function b177(p0) {
 p0 = p0 | 0;
 nullFunc_vi(833); //@line 34013
}
function b176(p0) {
 p0 = p0 | 0;
 nullFunc_vi(832); //@line 34010
}
function b175(p0) {
 p0 = p0 | 0;
 nullFunc_vi(831); //@line 34007
}
function b174(p0) {
 p0 = p0 | 0;
 nullFunc_vi(830); //@line 34004
}
function b173(p0) {
 p0 = p0 | 0;
 nullFunc_vi(829); //@line 34001
}
function b172(p0) {
 p0 = p0 | 0;
 nullFunc_vi(828); //@line 33998
}
function b171(p0) {
 p0 = p0 | 0;
 nullFunc_vi(827); //@line 33995
}
function b170(p0) {
 p0 = p0 | 0;
 nullFunc_vi(826); //@line 33992
}
function b169(p0) {
 p0 = p0 | 0;
 nullFunc_vi(825); //@line 33989
}
function b168(p0) {
 p0 = p0 | 0;
 nullFunc_vi(824); //@line 33986
}
function b167(p0) {
 p0 = p0 | 0;
 nullFunc_vi(823); //@line 33983
}
function b166(p0) {
 p0 = p0 | 0;
 nullFunc_vi(822); //@line 33980
}
function b165(p0) {
 p0 = p0 | 0;
 nullFunc_vi(821); //@line 33977
}
function b164(p0) {
 p0 = p0 | 0;
 nullFunc_vi(820); //@line 33974
}
function b163(p0) {
 p0 = p0 | 0;
 nullFunc_vi(819); //@line 33971
}
function b162(p0) {
 p0 = p0 | 0;
 nullFunc_vi(818); //@line 33968
}
function b161(p0) {
 p0 = p0 | 0;
 nullFunc_vi(817); //@line 33965
}
function b160(p0) {
 p0 = p0 | 0;
 nullFunc_vi(816); //@line 33962
}
function b159(p0) {
 p0 = p0 | 0;
 nullFunc_vi(815); //@line 33959
}
function b158(p0) {
 p0 = p0 | 0;
 nullFunc_vi(814); //@line 33956
}
function b157(p0) {
 p0 = p0 | 0;
 nullFunc_vi(813); //@line 33953
}
function b156(p0) {
 p0 = p0 | 0;
 nullFunc_vi(812); //@line 33950
}
function b155(p0) {
 p0 = p0 | 0;
 nullFunc_vi(811); //@line 33947
}
function b154(p0) {
 p0 = p0 | 0;
 nullFunc_vi(810); //@line 33944
}
function b153(p0) {
 p0 = p0 | 0;
 nullFunc_vi(809); //@line 33941
}
function b152(p0) {
 p0 = p0 | 0;
 nullFunc_vi(808); //@line 33938
}
function b151(p0) {
 p0 = p0 | 0;
 nullFunc_vi(807); //@line 33935
}
function b150(p0) {
 p0 = p0 | 0;
 nullFunc_vi(806); //@line 33932
}
function b149(p0) {
 p0 = p0 | 0;
 nullFunc_vi(805); //@line 33929
}
function b148(p0) {
 p0 = p0 | 0;
 nullFunc_vi(804); //@line 33926
}
function b147(p0) {
 p0 = p0 | 0;
 nullFunc_vi(803); //@line 33923
}
function b146(p0) {
 p0 = p0 | 0;
 nullFunc_vi(802); //@line 33920
}
function b145(p0) {
 p0 = p0 | 0;
 nullFunc_vi(801); //@line 33917
}
function b144(p0) {
 p0 = p0 | 0;
 nullFunc_vi(800); //@line 33914
}
function b143(p0) {
 p0 = p0 | 0;
 nullFunc_vi(799); //@line 33911
}
function b142(p0) {
 p0 = p0 | 0;
 nullFunc_vi(798); //@line 33908
}
function b141(p0) {
 p0 = p0 | 0;
 nullFunc_vi(797); //@line 33905
}
function b140(p0) {
 p0 = p0 | 0;
 nullFunc_vi(796); //@line 33902
}
function b139(p0) {
 p0 = p0 | 0;
 nullFunc_vi(795); //@line 33899
}
function b138(p0) {
 p0 = p0 | 0;
 nullFunc_vi(794); //@line 33896
}
function b137(p0) {
 p0 = p0 | 0;
 nullFunc_vi(793); //@line 33893
}
function b136(p0) {
 p0 = p0 | 0;
 nullFunc_vi(792); //@line 33890
}
function b135(p0) {
 p0 = p0 | 0;
 nullFunc_vi(791); //@line 33887
}
function b134(p0) {
 p0 = p0 | 0;
 nullFunc_vi(790); //@line 33884
}
function b133(p0) {
 p0 = p0 | 0;
 nullFunc_vi(789); //@line 33881
}
function b132(p0) {
 p0 = p0 | 0;
 nullFunc_vi(788); //@line 33878
}
function b131(p0) {
 p0 = p0 | 0;
 nullFunc_vi(787); //@line 33875
}
function b130(p0) {
 p0 = p0 | 0;
 nullFunc_vi(786); //@line 33872
}
function b129(p0) {
 p0 = p0 | 0;
 nullFunc_vi(785); //@line 33869
}
function b128(p0) {
 p0 = p0 | 0;
 nullFunc_vi(784); //@line 33866
}
function b127(p0) {
 p0 = p0 | 0;
 nullFunc_vi(783); //@line 33863
}
function b126(p0) {
 p0 = p0 | 0;
 nullFunc_vi(782); //@line 33860
}
function b125(p0) {
 p0 = p0 | 0;
 nullFunc_vi(781); //@line 33857
}
function b124(p0) {
 p0 = p0 | 0;
 nullFunc_vi(780); //@line 33854
}
function b123(p0) {
 p0 = p0 | 0;
 nullFunc_vi(779); //@line 33851
}
function b122(p0) {
 p0 = p0 | 0;
 nullFunc_vi(778); //@line 33848
}
function b121(p0) {
 p0 = p0 | 0;
 nullFunc_vi(777); //@line 33845
}
function b120(p0) {
 p0 = p0 | 0;
 nullFunc_vi(776); //@line 33842
}
function b119(p0) {
 p0 = p0 | 0;
 nullFunc_vi(775); //@line 33839
}
function b118(p0) {
 p0 = p0 | 0;
 nullFunc_vi(774); //@line 33836
}
function b117(p0) {
 p0 = p0 | 0;
 nullFunc_vi(773); //@line 33833
}
function b116(p0) {
 p0 = p0 | 0;
 nullFunc_vi(772); //@line 33830
}
function b115(p0) {
 p0 = p0 | 0;
 nullFunc_vi(771); //@line 33827
}
function b114(p0) {
 p0 = p0 | 0;
 nullFunc_vi(770); //@line 33824
}
function b113(p0) {
 p0 = p0 | 0;
 nullFunc_vi(769); //@line 33821
}
function b112(p0) {
 p0 = p0 | 0;
 nullFunc_vi(768); //@line 33818
}
function b111(p0) {
 p0 = p0 | 0;
 nullFunc_vi(767); //@line 33815
}
function b110(p0) {
 p0 = p0 | 0;
 nullFunc_vi(766); //@line 33812
}
function b109(p0) {
 p0 = p0 | 0;
 nullFunc_vi(765); //@line 33809
}
function b108(p0) {
 p0 = p0 | 0;
 nullFunc_vi(764); //@line 33806
}
function b107(p0) {
 p0 = p0 | 0;
 nullFunc_vi(763); //@line 33803
}
function b106(p0) {
 p0 = p0 | 0;
 nullFunc_vi(762); //@line 33800
}
function b105(p0) {
 p0 = p0 | 0;
 nullFunc_vi(761); //@line 33797
}
function b104(p0) {
 p0 = p0 | 0;
 nullFunc_vi(760); //@line 33794
}
function b103(p0) {
 p0 = p0 | 0;
 nullFunc_vi(759); //@line 33791
}
function b102(p0) {
 p0 = p0 | 0;
 nullFunc_vi(758); //@line 33788
}
function b101(p0) {
 p0 = p0 | 0;
 nullFunc_vi(757); //@line 33785
}
function b100(p0) {
 p0 = p0 | 0;
 nullFunc_vi(756); //@line 33782
}
function __ZN18LoRaWANTimeHandlerD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN18LoRaMacChannelPlanD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function b99(p0) {
 p0 = p0 | 0;
 nullFunc_vi(755); //@line 33779
}
function b98(p0) {
 p0 = p0 | 0;
 nullFunc_vi(754); //@line 33776
}
function b97(p0) {
 p0 = p0 | 0;
 nullFunc_vi(753); //@line 33773
}
function b96(p0) {
 p0 = p0 | 0;
 nullFunc_vi(752); //@line 33770
}
function b95(p0) {
 p0 = p0 | 0;
 nullFunc_vi(751); //@line 33767
}
function b94(p0) {
 p0 = p0 | 0;
 nullFunc_vi(750); //@line 33764
}
function b93(p0) {
 p0 = p0 | 0;
 nullFunc_vi(749); //@line 33761
}
function b92(p0) {
 p0 = p0 | 0;
 nullFunc_vi(748); //@line 33758
}
function b91(p0) {
 p0 = p0 | 0;
 nullFunc_vi(747); //@line 33755
}
function b90(p0) {
 p0 = p0 | 0;
 nullFunc_vi(746); //@line 33752
}
function b89(p0) {
 p0 = p0 | 0;
 nullFunc_vi(745); //@line 33749
}
function b88(p0) {
 p0 = p0 | 0;
 nullFunc_vi(744); //@line 33746
}
function b87(p0) {
 p0 = p0 | 0;
 nullFunc_vi(743); //@line 33743
}
function b86(p0) {
 p0 = p0 | 0;
 nullFunc_vi(742); //@line 33740
}
function b85(p0) {
 p0 = p0 | 0;
 nullFunc_vi(741); //@line 33737
}
function b84(p0) {
 p0 = p0 | 0;
 nullFunc_vi(740); //@line 33734
}
function b83(p0) {
 p0 = p0 | 0;
 nullFunc_vi(739); //@line 33731
}
function b82(p0) {
 p0 = p0 | 0;
 nullFunc_vi(738); //@line 33728
}
function b81(p0) {
 p0 = p0 | 0;
 nullFunc_vi(737); //@line 33725
}
function b80(p0) {
 p0 = p0 | 0;
 nullFunc_vi(736); //@line 33722
}
function b79(p0) {
 p0 = p0 | 0;
 nullFunc_vi(735); //@line 33719
}
function b78(p0) {
 p0 = p0 | 0;
 nullFunc_vi(734); //@line 33716
}
function b77(p0) {
 p0 = p0 | 0;
 nullFunc_vi(733); //@line 33713
}
function b76(p0) {
 p0 = p0 | 0;
 nullFunc_vi(732); //@line 33710
}
function b75(p0) {
 p0 = p0 | 0;
 nullFunc_vi(731); //@line 33707
}
function b74(p0) {
 p0 = p0 | 0;
 nullFunc_vi(730); //@line 33704
}
function b73(p0) {
 p0 = p0 | 0;
 nullFunc_vi(729); //@line 33701
}
function b72(p0) {
 p0 = p0 | 0;
 nullFunc_vi(728); //@line 33698
}
function b71(p0) {
 p0 = p0 | 0;
 nullFunc_vi(727); //@line 33695
}
function b70(p0) {
 p0 = p0 | 0;
 nullFunc_vi(726); //@line 33692
}
function b69(p0) {
 p0 = p0 | 0;
 nullFunc_vi(725); //@line 33689
}
function b68(p0) {
 p0 = p0 | 0;
 nullFunc_vi(724); //@line 33686
}
function b67(p0) {
 p0 = p0 | 0;
 nullFunc_vi(723); //@line 33683
}
function b66(p0) {
 p0 = p0 | 0;
 nullFunc_vi(722); //@line 33680
}
function b65(p0) {
 p0 = p0 | 0;
 nullFunc_vi(721); //@line 33677
}
function b64(p0) {
 p0 = p0 | 0;
 nullFunc_vi(720); //@line 33674
}
function b63(p0) {
 p0 = p0 | 0;
 nullFunc_vi(719); //@line 33671
}
function b62(p0) {
 p0 = p0 | 0;
 nullFunc_vi(718); //@line 33668
}
function b61(p0) {
 p0 = p0 | 0;
 nullFunc_vi(717); //@line 33665
}
function b60(p0) {
 p0 = p0 | 0;
 nullFunc_vi(716); //@line 33662
}
function b59(p0) {
 p0 = p0 | 0;
 nullFunc_vi(715); //@line 33659
}
function b58(p0) {
 p0 = p0 | 0;
 nullFunc_vi(714); //@line 33656
}
function b57(p0) {
 p0 = p0 | 0;
 nullFunc_vi(713); //@line 33653
}
function b56(p0) {
 p0 = p0 | 0;
 nullFunc_vi(712); //@line 33650
}
function b55(p0) {
 p0 = p0 | 0;
 nullFunc_vi(711); //@line 33647
}
function b54(p0) {
 p0 = p0 | 0;
 nullFunc_vi(710); //@line 33644
}
function b367(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1023); //@line 550
}
function b366(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1022); //@line 547
}
function b365(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1021); //@line 544
}
function b364(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1020); //@line 541
}
function b363(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1019); //@line 538
}
function b362(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1018); //@line 535
}
function b361(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1017); //@line 532
}
function b360(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1016); //@line 529
}
function b359(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1015); //@line 526
}
function b358(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1014); //@line 523
}
function b357(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1013); //@line 520
}
function b356(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1012); //@line 517
}
function b355(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1011); //@line 514
}
function b354(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1010); //@line 511
}
function b353(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1009); //@line 508
}
function b352(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1008); //@line 505
}
function b351(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1007); //@line 502
}
function b350(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1006); //@line 499
}
function b349(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1005); //@line 496
}
function b348(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1004); //@line 493
}
function b347(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1003); //@line 490
}
function b346(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1002); //@line 487
}
function b345(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1001); //@line 484
}
function _dummy($0) {
 $0 = $0 | 0;
 return $0 | 0; //@line 10554
}
function ___lockfile($0) {
 $0 = $0 | 0;
 return 0; //@line 10871
}
function b344(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1e3); //@line 481
}
function b343(p0) {
 p0 = p0 | 0;
 nullFunc_vi(999); //@line 478
}
function b342(p0) {
 p0 = p0 | 0;
 nullFunc_vi(998); //@line 475
}
function b341(p0) {
 p0 = p0 | 0;
 nullFunc_vi(997); //@line 472
}
function b340(p0) {
 p0 = p0 | 0;
 nullFunc_vi(996); //@line 469
}
function b339(p0) {
 p0 = p0 | 0;
 nullFunc_vi(995); //@line 466
}
function b338(p0) {
 p0 = p0 | 0;
 nullFunc_vi(994); //@line 463
}
function b337(p0) {
 p0 = p0 | 0;
 nullFunc_vi(993); //@line 460
}
function b336(p0) {
 p0 = p0 | 0;
 nullFunc_vi(992); //@line 457
}
function b335(p0) {
 p0 = p0 | 0;
 nullFunc_vi(991); //@line 454
}
function b334(p0) {
 p0 = p0 | 0;
 nullFunc_vi(990); //@line 451
}
function b333(p0) {
 p0 = p0 | 0;
 nullFunc_vi(989); //@line 448
}
function b332(p0) {
 p0 = p0 | 0;
 nullFunc_vi(988); //@line 445
}
function b331(p0) {
 p0 = p0 | 0;
 nullFunc_vi(987); //@line 442
}
function b330(p0) {
 p0 = p0 | 0;
 nullFunc_vi(986); //@line 439
}
function b329(p0) {
 p0 = p0 | 0;
 nullFunc_vi(985); //@line 436
}
function b328(p0) {
 p0 = p0 | 0;
 nullFunc_vi(984); //@line 433
}
function b327(p0) {
 p0 = p0 | 0;
 nullFunc_vi(983); //@line 430
}
function b326(p0) {
 p0 = p0 | 0;
 nullFunc_vi(982); //@line 427
}
function b325(p0) {
 p0 = p0 | 0;
 nullFunc_vi(981); //@line 424
}
function b324(p0) {
 p0 = p0 | 0;
 nullFunc_vi(980); //@line 421
}
function b323(p0) {
 p0 = p0 | 0;
 nullFunc_vi(979); //@line 418
}
function b322(p0) {
 p0 = p0 | 0;
 nullFunc_vi(978); //@line 415
}
function b321(p0) {
 p0 = p0 | 0;
 nullFunc_vi(977); //@line 412
}
function b320(p0) {
 p0 = p0 | 0;
 nullFunc_vi(976); //@line 409
}
function b319(p0) {
 p0 = p0 | 0;
 nullFunc_vi(975); //@line 406
}
function b318(p0) {
 p0 = p0 | 0;
 nullFunc_vi(974); //@line 403
}
function b317(p0) {
 p0 = p0 | 0;
 nullFunc_vi(973); //@line 400
}
function b316(p0) {
 p0 = p0 | 0;
 nullFunc_vi(972); //@line 397
}
function b315(p0) {
 p0 = p0 | 0;
 nullFunc_vi(971); //@line 394
}
function b314(p0) {
 p0 = p0 | 0;
 nullFunc_vi(970); //@line 391
}
function b313(p0) {
 p0 = p0 | 0;
 nullFunc_vi(969); //@line 388
}
function b312(p0) {
 p0 = p0 | 0;
 nullFunc_vi(968); //@line 385
}
function b311(p0) {
 p0 = p0 | 0;
 nullFunc_vi(967); //@line 382
}
function b310(p0) {
 p0 = p0 | 0;
 nullFunc_vi(966); //@line 379
}
function b309(p0) {
 p0 = p0 | 0;
 nullFunc_vi(965); //@line 376
}
function b308(p0) {
 p0 = p0 | 0;
 nullFunc_vi(964); //@line 373
}
function b307(p0) {
 p0 = p0 | 0;
 nullFunc_vi(963); //@line 370
}
function b306(p0) {
 p0 = p0 | 0;
 nullFunc_vi(962); //@line 367
}
function b305(p0) {
 p0 = p0 | 0;
 nullFunc_vi(961); //@line 364
}
function b304(p0) {
 p0 = p0 | 0;
 nullFunc_vi(960); //@line 361
}
function b303(p0) {
 p0 = p0 | 0;
 nullFunc_vi(959); //@line 358
}
function b302(p0) {
 p0 = p0 | 0;
 nullFunc_vi(958); //@line 355
}
function b301(p0) {
 p0 = p0 | 0;
 nullFunc_vi(957); //@line 352
}
function b300(p0) {
 p0 = p0 | 0;
 nullFunc_vi(956); //@line 349
}
function b299(p0) {
 p0 = p0 | 0;
 nullFunc_vi(955); //@line 346
}
function b298(p0) {
 p0 = p0 | 0;
 nullFunc_vi(954); //@line 343
}
function b297(p0) {
 p0 = p0 | 0;
 nullFunc_vi(953); //@line 340
}
function b296(p0) {
 p0 = p0 | 0;
 nullFunc_vi(952); //@line 337
}
function b295(p0) {
 p0 = p0 | 0;
 nullFunc_vi(951); //@line 334
}
function b294(p0) {
 p0 = p0 | 0;
 nullFunc_vi(950); //@line 331
}
function b293(p0) {
 p0 = p0 | 0;
 nullFunc_vi(949); //@line 328
}
function b292(p0) {
 p0 = p0 | 0;
 nullFunc_vi(948); //@line 325
}
function b291(p0) {
 p0 = p0 | 0;
 nullFunc_vi(947); //@line 322
}
function b290(p0) {
 p0 = p0 | 0;
 nullFunc_vi(946); //@line 319
}
function b289(p0) {
 p0 = p0 | 0;
 nullFunc_vi(945); //@line 316
}
function b288(p0) {
 p0 = p0 | 0;
 nullFunc_vi(944); //@line 313
}
function b287(p0) {
 p0 = p0 | 0;
 nullFunc_vi(943); //@line 310
}
function b286(p0) {
 p0 = p0 | 0;
 nullFunc_vi(942); //@line 307
}
function b285(p0) {
 p0 = p0 | 0;
 nullFunc_vi(941); //@line 304
}
function b284(p0) {
 p0 = p0 | 0;
 nullFunc_vi(940); //@line 301
}
function b283(p0) {
 p0 = p0 | 0;
 nullFunc_vi(939); //@line 298
}
function b282(p0) {
 p0 = p0 | 0;
 nullFunc_vi(938); //@line 295
}
function b281(p0) {
 p0 = p0 | 0;
 nullFunc_vi(937); //@line 292
}
function b280(p0) {
 p0 = p0 | 0;
 nullFunc_vi(936); //@line 289
}
function b279(p0) {
 p0 = p0 | 0;
 nullFunc_vi(935); //@line 286
}
function b278(p0) {
 p0 = p0 | 0;
 nullFunc_vi(934); //@line 283
}
function b277(p0) {
 p0 = p0 | 0;
 nullFunc_vi(933); //@line 280
}
function b276(p0) {
 p0 = p0 | 0;
 nullFunc_vi(932); //@line 277
}
function b275(p0) {
 p0 = p0 | 0;
 nullFunc_vi(931); //@line 274
}
function b274(p0) {
 p0 = p0 | 0;
 nullFunc_vi(930); //@line 271
}
function b273(p0) {
 p0 = p0 | 0;
 nullFunc_vi(929); //@line 268
}
function b272(p0) {
 p0 = p0 | 0;
 nullFunc_vi(928); //@line 265
}
function b271(p0) {
 p0 = p0 | 0;
 nullFunc_vi(927); //@line 262
}
function b270(p0) {
 p0 = p0 | 0;
 nullFunc_vi(926); //@line 259
}
function b269(p0) {
 p0 = p0 | 0;
 nullFunc_vi(925); //@line 256
}
function b268(p0) {
 p0 = p0 | 0;
 nullFunc_vi(924); //@line 253
}
function b267(p0) {
 p0 = p0 | 0;
 nullFunc_vi(923); //@line 250
}
function b266(p0) {
 p0 = p0 | 0;
 nullFunc_vi(922); //@line 247
}
function b265(p0) {
 p0 = p0 | 0;
 nullFunc_vi(921); //@line 244
}
function b264(p0) {
 p0 = p0 | 0;
 nullFunc_vi(920); //@line 241
}
function b263(p0) {
 p0 = p0 | 0;
 nullFunc_vi(919); //@line 238
}
function b262(p0) {
 p0 = p0 | 0;
 nullFunc_vi(918); //@line 235
}
function b261(p0) {
 p0 = p0 | 0;
 nullFunc_vi(917); //@line 232
}
function b260(p0) {
 p0 = p0 | 0;
 nullFunc_vi(916); //@line 229
}
function b259(p0) {
 p0 = p0 | 0;
 nullFunc_vi(915); //@line 226
}
function b258(p0) {
 p0 = p0 | 0;
 nullFunc_vi(914); //@line 223
}
function b257(p0) {
 p0 = p0 | 0;
 nullFunc_vi(913); //@line 220
}
function b256(p0) {
 p0 = p0 | 0;
 nullFunc_vi(912); //@line 217
}
function b255(p0) {
 p0 = p0 | 0;
 nullFunc_vi(911); //@line 214
}
function b254(p0) {
 p0 = p0 | 0;
 nullFunc_vi(910); //@line 211
}
function b253(p0) {
 p0 = p0 | 0;
 nullFunc_vi(909); //@line 208
}
function b252(p0) {
 p0 = p0 | 0;
 nullFunc_vi(908); //@line 205
}
function b251(p0) {
 p0 = p0 | 0;
 nullFunc_vi(907); //@line 202
}
function b250(p0) {
 p0 = p0 | 0;
 nullFunc_vi(906); //@line 199
}
function b249(p0) {
 p0 = p0 | 0;
 nullFunc_vi(905); //@line 196
}
function b248(p0) {
 p0 = p0 | 0;
 nullFunc_vi(904); //@line 193
}
function b247(p0) {
 p0 = p0 | 0;
 nullFunc_vi(903); //@line 190
}
function b246(p0) {
 p0 = p0 | 0;
 nullFunc_vi(902); //@line 187
}
function b245(p0) {
 p0 = p0 | 0;
 nullFunc_vi(901); //@line 184
}
function b244(p0) {
 p0 = p0 | 0;
 nullFunc_vi(900); //@line 181
}
function b243(p0) {
 p0 = p0 | 0;
 nullFunc_vi(899); //@line 178
}
function b242(p0) {
 p0 = p0 | 0;
 nullFunc_vi(898); //@line 175
}
function b241(p0) {
 p0 = p0 | 0;
 nullFunc_vi(897); //@line 172
}
function b240(p0) {
 p0 = p0 | 0;
 nullFunc_vi(896); //@line 169
}
function b239(p0) {
 p0 = p0 | 0;
 nullFunc_vi(895); //@line 166
}
function b238(p0) {
 p0 = p0 | 0;
 nullFunc_vi(894); //@line 163
}
function b237(p0) {
 p0 = p0 | 0;
 nullFunc_vi(893); //@line 160
}
function b236(p0) {
 p0 = p0 | 0;
 nullFunc_vi(892); //@line 157
}
function b235(p0) {
 p0 = p0 | 0;
 nullFunc_vi(891); //@line 154
}
function b234(p0) {
 p0 = p0 | 0;
 nullFunc_vi(890); //@line 151
}
function b233(p0) {
 p0 = p0 | 0;
 nullFunc_vi(889); //@line 148
}
function b232(p0) {
 p0 = p0 | 0;
 nullFunc_vi(888); //@line 145
}
function b231(p0) {
 p0 = p0 | 0;
 nullFunc_vi(887); //@line 142
}
function b230(p0) {
 p0 = p0 | 0;
 nullFunc_vi(886); //@line 139
}
function b229(p0) {
 p0 = p0 | 0;
 nullFunc_vi(885); //@line 136
}
function b228(p0) {
 p0 = p0 | 0;
 nullFunc_vi(884); //@line 133
}
function b227(p0) {
 p0 = p0 | 0;
 nullFunc_vi(883); //@line 130
}
function b226(p0) {
 p0 = p0 | 0;
 nullFunc_vi(882); //@line 127
}
function b225(p0) {
 p0 = p0 | 0;
 nullFunc_vi(881); //@line 124
}
function b224(p0) {
 p0 = p0 | 0;
 nullFunc_vi(880); //@line 121
}
function b223(p0) {
 p0 = p0 | 0;
 nullFunc_vi(879); //@line 118
}
function b222(p0) {
 p0 = p0 | 0;
 nullFunc_vi(878); //@line 115
}
function b221(p0) {
 p0 = p0 | 0;
 nullFunc_vi(877); //@line 112
}
function b220(p0) {
 p0 = p0 | 0;
 nullFunc_vi(876); //@line 109
}
function b219(p0) {
 p0 = p0 | 0;
 nullFunc_vi(875); //@line 106
}
function b218(p0) {
 p0 = p0 | 0;
 nullFunc_vi(874); //@line 103
}
function b217(p0) {
 p0 = p0 | 0;
 nullFunc_vi(873); //@line 100
}
function __ZN7LoRaMacD2Ev__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16LoRaWANInterfaceD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function b53(p0) {
 p0 = p0 | 0;
 nullFunc_vi(0); //@line 33641
}
function b216(p0) {
 p0 = p0 | 0;
 nullFunc_vi(872); //@line 97
}
function b215(p0) {
 p0 = p0 | 0;
 nullFunc_vi(871); //@line 94
}
function b214(p0) {
 p0 = p0 | 0;
 nullFunc_vi(870); //@line 91
}
function b213(p0) {
 p0 = p0 | 0;
 nullFunc_vi(869); //@line 88
}
function b212(p0) {
 p0 = p0 | 0;
 nullFunc_vi(868); //@line 85
}
function b211(p0) {
 p0 = p0 | 0;
 nullFunc_vi(867); //@line 82
}
function b210(p0) {
 p0 = p0 | 0;
 nullFunc_vi(866); //@line 79
}
function b209(p0) {
 p0 = p0 | 0;
 nullFunc_vi(865); //@line 76
}
function b208(p0) {
 p0 = p0 | 0;
 nullFunc_vi(864); //@line 73
}
function b207(p0) {
 p0 = p0 | 0;
 nullFunc_vi(863); //@line 70
}
function b206(p0) {
 p0 = p0 | 0;
 nullFunc_vi(862); //@line 67
}
function b205(p0) {
 p0 = p0 | 0;
 nullFunc_vi(861); //@line 64
}
function b204(p0) {
 p0 = p0 | 0;
 nullFunc_vi(860); //@line 61
}
function b203(p0) {
 p0 = p0 | 0;
 nullFunc_vi(859); //@line 58
}
function b202(p0) {
 p0 = p0 | 0;
 nullFunc_vi(858); //@line 55
}
function b201(p0) {
 p0 = p0 | 0;
 nullFunc_vi(857); //@line 52
}
function b200(p0) {
 p0 = p0 | 0;
 nullFunc_vi(856); //@line 49
}
function b199(p0) {
 p0 = p0 | 0;
 nullFunc_vi(855); //@line 46
}
function b198(p0) {
 p0 = p0 | 0;
 nullFunc_vi(854); //@line 43
}
function b197(p0) {
 p0 = p0 | 0;
 nullFunc_vi(853); //@line 40
}
function b196(p0) {
 p0 = p0 | 0;
 nullFunc_vi(852); //@line 37
}
function b195(p0) {
 p0 = p0 | 0;
 nullFunc_vi(851); //@line 34
}
function b194(p0) {
 p0 = p0 | 0;
 nullFunc_vi(850); //@line 31
}
function b193(p0) {
 p0 = p0 | 0;
 nullFunc_vi(849); //@line 28
}
function b192(p0) {
 p0 = p0 | 0;
 nullFunc_vi(848); //@line 25
}
function b191(p0) {
 p0 = p0 | 0;
 nullFunc_vi(847); //@line 22
}
function b190(p0) {
 p0 = p0 | 0;
 nullFunc_vi(846); //@line 19
}
function b189(p0) {
 p0 = p0 | 0;
 nullFunc_vi(845); //@line 16
}
function b188(p0) {
 p0 = p0 | 0;
 nullFunc_vi(844); //@line 13
}
function b187(p0) {
 p0 = p0 | 0;
 nullFunc_vi(843); //@line 10
}
function _sleep_manager_unlock_deep_sleep_internal() {
 return;
}
function b186(p0) {
 p0 = p0 | 0;
 nullFunc_vi(842); //@line 7
}
function b185(p0) {
 p0 = p0 | 0;
 nullFunc_vi(841); //@line 4
}
function b184(p0) {
 p0 = p0 | 0;
 nullFunc_vi(840); //@line 1
}
function _us_ticker_set_interrupt($0) {
 $0 = $0 | 0;
 return;
}
function _invoke_ticker__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _initialize__async_cb_16($0) {
 $0 = $0 | 0;
 return;
}
function ___clang_call_terminate__async_cb($0) {
 $0 = $0 | 0;
}
function __ZN14LoRaMacCommandD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function _sleep_manager_lock_deep_sleep_internal() {
 return;
}
function _us_ticker_get_info() {
 return 10120; //@line 6618
}
function _serial_putc__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _get_us_ticker_data() {
 return 10052; //@line 5796
}
function ___errno_location() {
 return 22496; //@line 10548
}
function __ZSt9terminatev__async_cb_397($0) {
 $0 = $0 | 0;
}
function __ZN11LoRaMacMlmeD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN11LoRaMacMcpsD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN11LoRaMacMcpsC2Ev($0) {
 $0 = $0 | 0;
 return;
}
function ___cxa_guard_release($0) {
 $0 = $0 | 0;
 return;
}
function __ZNSt9type_infoD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN10LoRaMacMibD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function getTempRet0() {
 return tempRet0 | 0; //@line 42
}
function _wait_ms__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___cxa_guard_abort($0) {
 $0 = $0 | 0;
 return;
}
function stackSave() {
 return STACKTOP | 0; //@line 12
}
function _pthread_self() {
 return 10400; //@line 10601
}
function _core_util_critical_section_enter() {
 return;
}
function __ZSt9terminatev__async_cb($0) {
 $0 = $0 | 0;
}
function _core_util_critical_section_exit() {
 return;
}
function _us_ticker_read() {
 return 0; //@line 6389
}
function ___unlockfile($0) {
 $0 = $0 | 0;
 return;
}
function _us_ticker_disable_interrupt() {
 return;
}
function _us_ticker_clear_interrupt() {
 return;
}
function setAsync() {
 ___async = 1; //@line 26
}
function b51() {
 nullFunc_v(15); //@line 33638
}
function b50() {
 nullFunc_v(14); //@line 33635
}
function b49() {
 nullFunc_v(13); //@line 33632
}
function b48() {
 nullFunc_v(12); //@line 33629
}
function b47() {
 nullFunc_v(11); //@line 33626
}
function b46() {
 nullFunc_v(10); //@line 33623
}
function _us_ticker_fire_interrupt() {
 return;
}
function b45() {
 nullFunc_v(9); //@line 33620
}
function b44() {
 nullFunc_v(0); //@line 33614
}
function _us_ticker_init() {
 return;
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_i = [b1,_ccm_ctx_alloc,_gcm_ctx_alloc,_aes_ctx_alloc,_us_ticker_read,_us_ticker_get_info,b2,b3];
var FUNCTION_TABLE_ii = [b5,__ZN16SX1276_LoRaRadio6randomEv,__ZN16SX1276_LoRaRadio10get_statusEv,__ZN16LoRaWANInterface7connectEv,__ZN16LoRaWANInterface10disconnectEv,__ZN16LoRaWANInterface22add_link_check_requestEv,__ZN16LoRaWANInterface24enable_adaptive_datarateEv,__ZN16LoRaWANInterface25disable_adaptive_datarateEv,__ZN16LoRaWANInterface19remove_channel_planEv,___stdio_close,b6,b7,b8,b9,b10,b11];
var FUNCTION_TABLE_iii = [b13,__ZN16SX1276_LoRaRadio18check_rf_frequencyEj,__ZN16LoRaWANInterface10initializeEPN6events10EventQueueE,__ZN16LoRaWANInterface7connectERK15lorawan_connect,__ZN16LoRaWANInterface12set_datarateEh,__ZN16LoRaWANInterface25set_confirmed_msg_retriesEh,__ZN16LoRaWANInterface16set_channel_planERK16lora_channelplan,__ZN16LoRaWANInterface16get_channel_planER16lora_channelplan,__ZN16LoRaWANInterface14remove_channelEh,__ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t,__ZN7LoRaPHY19request_new_channelEP24new_channel_req_params_s,__ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s,__ZN7LoRaPHY25accept_tx_param_setup_reqEP20tx_param_setup_req_s,__ZN7LoRaPHY18dl_channel_requestEP23dl_channel_req_params_s,__ZN7LoRaPHY16get_alternate_DREh,__ZN7LoRaPHY14remove_channelEh,__ZN7LoRaPHY16verify_frequencyEj,b14,b15,b16,b17,b18,b19,b20,b21,b22,b23,b24,b25
,b26,b27,b28];
var FUNCTION_TABLE_iiii = [b30,__ZN16SX1276_LoRaRadio11time_on_airE10modem_typeh,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa,__ZN7LoRaPHY11add_channelEP16channel_params_th,__ZN7LoRaPHY15apply_DR_offsetEaa,_ccm_aes_setkey_wrap,_gcm_aes_setkey_wrap,_aes_setkey_enc_wrap,_aes_setkey_dec_wrap,___stdio_write,___stdio_seek,___stdout_write,_sn_write,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,_get_pkcs_padding,b31];
var FUNCTION_TABLE_iiiii = [b33,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj,_aes_crypt_ecb_wrap,b34];
var FUNCTION_TABLE_iiiiii = [b36,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj,__ZN16LoRaWANInterface4sendEhPKhti,__ZN16LoRaWANInterface7receiveEhPhti,__ZN7LoRaPHY16set_next_channelEP26channel_selection_params_sPhPjS3_,b37,b38,b39];
var FUNCTION_TABLE_iiiiiii = [b41,__ZN7LoRaPHY16link_ADR_requestEP16adr_req_params_tPaS2_PhS3_,_aes_crypt_cbc_wrap,b42];
var FUNCTION_TABLE_v = [b44,___cxa_pure_virtual__wrapper,_us_ticker_init,_us_ticker_disable_interrupt,_us_ticker_clear_interrupt,_us_ticker_fire_interrupt,__ZL25default_terminate_handlerv,__ZL12send_messagev,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b45,b46,b47,b48,b49,b50,b51];
var FUNCTION_TABLE_vi = [b53,__ZN16SX1276_LoRaRadio11radio_resetEv,__ZN16SX1276_LoRaRadio5sleepEv,__ZN16SX1276_LoRaRadio7standbyEv,__ZN16SX1276_LoRaRadio9start_cadEv,__ZN16SX1276_LoRaRadio4lockEv,__ZN16SX1276_LoRaRadio6unlockEv,__ZN16SX1276_LoRaRadioD2Ev,__ZN16SX1276_LoRaRadioD0Ev,__ZN4mbed11InterruptInD2Ev,__ZN4mbed11InterruptInD0Ev,__ZN4mbed7TimeoutD2Ev,__ZN4mbed7TimeoutD0Ev,__ZN4mbed7Timeout7handlerEv,__ZN4mbed10TimerEventD2Ev,__ZN4mbed10TimerEventD0Ev,__ZN16LoRaWANInterface25remove_link_check_requestEv,__ZN16LoRaWANInterfaceD2Ev,__ZN16LoRaWANInterfaceD0Ev,__ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv,__ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv,__ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv,__ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPv,__ZN4mbed8CallbackIFvPhtsaEE13function_dtorINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPv,__ZN7LoRaPHYD2Ev,__ZN7LoRaPHYD0Ev,__ZN7LoRaPHY24restore_default_channelsEv
,__ZN12LoRaPHYEU868D2Ev,__ZN12LoRaPHYEU868D0Ev,_ccm_ctx_free,_gcm_ctx_free,_aes_ctx_free,_us_ticker_set_interrupt,__ZN4mbed10TimerEvent3irqEj,__ZN4mbed6TickerD2Ev,__ZN4mbed6TickerD0Ev,__ZN4mbed6Ticker7handlerEv,__ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv,__ZN4mbed8CallbackIFv11lora_eventsEE13function_dtorIPS2_EEvPv,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,__ZN16SX1276_LoRaRadio10init_radioEP12radio_events__async_cb,__ZN16SX1276_LoRaRadio4sendEPhh__async_cb,__ZN16SX1276_LoRaRadio7receiveEj__async_cb,__ZN16SX1276_LoRaRadio6randomEv__async_cb,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_213,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_209,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_210,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_212,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_211,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_208
,__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb,__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_233,__ZN16SX1276_LoRaRadioD2Ev__async_cb,__ZN16SX1276_LoRaRadioD2Ev__async_cb_259,__ZN16SX1276_LoRaRadioD2Ev__async_cb_255,__ZN16SX1276_LoRaRadioD2Ev__async_cb_258,__ZN16SX1276_LoRaRadioD2Ev__async_cb_256,__ZN16SX1276_LoRaRadioD2Ev__async_cb_257,__ZN16SX1276_LoRaRadioD2Ev__async_cb_265,__ZN16SX1276_LoRaRadioD2Ev__async_cb_264,__ZN16SX1276_LoRaRadioD2Ev__async_cb_263,__ZN16SX1276_LoRaRadioD2Ev__async_cb_262,__ZN16SX1276_LoRaRadioD2Ev__async_cb_261,__ZN16SX1276_LoRaRadioD2Ev__async_cb_260,__ZN16SX1276_LoRaRadioD0Ev__async_cb,__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_391,__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_390,__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb,__ZN4mbed11InterruptInD2Ev__async_cb,__ZN4mbed11InterruptInD2Ev__async_cb_398,__ZN4mbed11InterruptInD0Ev__async_cb,__ZN4mbed11InterruptInD0Ev__async_cb_380,__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb,__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb_363,__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb,__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_104,__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_105,__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_106,__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_107,__ZN4mbed7TimeoutD2Ev__async_cb
,__ZN4mbed7TimeoutD2Ev__async_cb_50,__ZN4mbed7TimeoutD0Ev__async_cb,__ZN4mbed7TimeoutD0Ev__async_cb_378,__ZN4mbed7Timeout7handlerEv__async_cb_41,__ZN4mbed7Timeout7handlerEv__async_cb,__ZN4mbed5TimerC2Ev__async_cb,__ZN4mbed5Timer5startEv__async_cb,__ZN4mbed5Timer7read_msEv__async_cb,__ZN4mbed10TimerEventD2Ev__async_cb,__ZN4mbed10TimerEventC2Ev__async_cb,__ZN4mbed10TimerEvent3irqEj__async_cb,__ZN6events10EventQueue8dispatchEi__async_cb,__ZN6events10EventQueue6cancelEi__async_cb,_equeue_post__async_cb,_equeue_enqueue__async_cb,_equeue_cancel__async_cb,_equeue_dispatch__async_cb,_equeue_dispatch__async_cb_388,_equeue_dispatch__async_cb_386,_equeue_dispatch__async_cb_387,_equeue_dispatch__async_cb_389,__ZN16LoRaWANInterface7connectEv__async_cb,__ZN16LoRaWANInterface4sendEhPKhti__async_cb,__ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb,__ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb_75,__ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb_76,__ZN12LoRaWANStackC2Ev__async_cb,__ZN12LoRaWANStackC2Ev__async_cb_167,__ZN12LoRaWANStackC2Ev__async_cb_168,__ZN12LoRaWANStackC2Ev__async_cb_169
,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_183,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_190,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_182,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_186,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_177,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_189,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_178,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_185,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_179,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_188,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_180,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_184,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_181,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_187,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_217,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_220,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_214,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_222,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_215,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_219,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_216,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_221,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_218,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_240,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_247,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_244,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_239,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_243
,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_238,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_242,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_235,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_246,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_236,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_241,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_237,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_245,__ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb,__ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_141,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_134,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_140,__ZN12LoRaWANStack18lora_state_machineEv__async_cb,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_147,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_122,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_152,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_142,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_123,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_146,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_124,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_151,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_139,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_138,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_137,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_136,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_135,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_125,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_145
,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_126,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_150,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_133,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_132,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_127,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_144,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_128,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_149,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_131,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_129,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_143,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_130,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_148,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_365,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_366,__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv,__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_369,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_367,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_368,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_344,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_345,__ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv,__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_348,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_346,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_347,__ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb
,__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb_381,__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb,__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb,__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb_394,__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb,__ZN12LoRaWANStack17send_frame_to_macEv__async_cb,__ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb,__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_268,__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_267,__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_269,__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_266,__ZN12LoRaWANStack9handle_txEhPKhth__async_cb,__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_270,__ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb,__ZN12LoRaWANStack17get_lorawan_stackEv__async_cb,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb,__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb_174,__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb_173,__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb,__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb_175,__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb,__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_228,__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_229,__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_230,__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_231,__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_232,__ZN12LoRaWANStack12add_channelsERK16lora_channelplan__async_cb,__ZN12LoRaWANStack12add_channelsERK16lora_channelplan__async_cb_252,__ZN12LoRaWANStack17drop_channel_listEv__async_cb,__ZN12LoRaWANStack17drop_channel_listEv__async_cb_250
,__ZN12LoRaWANStack16remove_a_channelEh__async_cb,__ZN12LoRaWANStack16remove_a_channelEh__async_cb_23,__ZN12LoRaWANStack20get_enabled_channelsER16lora_channelplan__async_cb,__ZN12LoRaWANStack24enable_adaptive_datarateEb__async_cb,__ZN12LoRaWANStack24enable_adaptive_datarateEb__async_cb_42,__ZN12LoRaWANStack21set_channel_data_rateEh__async_cb_38,__ZN12LoRaWANStack21set_channel_data_rateEh__async_cb,__ZN12LoRaWANStack21set_channel_data_rateEh__async_cb_39,__ZN12LoRaWANStack20join_request_by_otaaERK15lorawan_connect__async_cb,__ZN12LoRaWANStack20join_request_by_otaaERK15lorawan_connect__async_cb_24,__ZN12LoRaWANStack29activation_by_personalizationERK15lorawan_connect__async_cb,__ZN12LoRaWANStack29activation_by_personalizationERK15lorawan_connect__async_cb_74,__ZN12LoRaWANStack22set_link_check_requestEv__async_cb,__ZN12LoRaWANStack22set_link_check_requestEv__async_cb_114,__ZN12LoRaWANStack8shutdownEv__async_cb,__ZN7LoRaMacD2Ev__async_cb_385,__ZN7LoRaMacD2Ev__async_cb,__ZN12radio_eventsD2Ev__async_cb,__ZN12radio_eventsD2Ev__async_cb_349,__ZN12radio_eventsD2Ev__async_cb_350,__ZN12radio_eventsD2Ev__async_cb_351,__ZN12radio_eventsD2Ev__async_cb_352,__ZN12radio_eventsD2Ev__async_cb_353,__ZN12radio_eventsD2Ev__async_cb_354,__ZN14lorawan_timersD2Ev__async_cb,__ZN14lorawan_timersD2Ev__async_cb_370,__ZN14lorawan_timersD2Ev__async_cb_371,__ZN14lorawan_timersD2Ev__async_cb_372,__ZN14lorawan_timersD2Ev__async_cb_373,__ZN7LoRaMac16on_radio_tx_doneEv
,__ZN7LoRaMac14handle_tx_doneEv__async_cb,__ZN7LoRaMac14handle_tx_doneEv__async_cb_404,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_427,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_431,__ZN7LoRaMac25on_rx_window2_timer_eventEv,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_432,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_433,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_430,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_429,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_428,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb,__ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb,__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv,__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv,__ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_393,__ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_392,__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv__async_cb,__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb_254,__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv__async_cb,__ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_330,__ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb,__ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_329,__ZN7LoRaMac14handle_rx_doneEPhtsa__async_cb_335,__ZN7LoRaMac14handle_rx_doneEPhtsa__async_cb,__ZN7LoRaMac14handle_rx_doneEPhtsa__async_cb_336,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_286,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_300,__ZN7LoRaMac26on_ack_timeout_timer_eventEv,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_297
,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_308,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_285,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_276,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_296,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_307,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_284,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_295,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_306,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_283,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_275,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_274,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_294,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_305,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_282,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_293,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_304,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_281,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_292,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_303,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_280,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_289,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_288,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_287,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_299,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_298,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_291,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_302,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_279,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_290
,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_301,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_278,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_277,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_317,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_318,__ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv,__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_321,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_319,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_320,__ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv__async_cb,__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv__async_cb_176,__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv__async_cb,__ZN4mbed8CallbackIFvPhtsaEE13function_callINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPKvS1_tsa__async_cb,__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb,__ZN7LoRaMac17on_radio_rx_errorEv,__ZN7LoRaMac15handle_rx_errorEv__async_cb,__ZN7LoRaMac15handle_rx_errorEv__async_cb_251,__ZN7LoRaMac17on_radio_rx_errorEv__async_cb_225,__ZN7LoRaMac17on_radio_rx_errorEv__async_cb_227,__ZN7LoRaMac17on_radio_rx_errorEv__async_cb,__ZN7LoRaMac17on_radio_rx_errorEv__async_cb_226,__ZN7LoRaMac19on_radio_rx_timeoutEv,__ZN7LoRaMac17handle_rx_timeoutEv__async_cb,__ZN7LoRaMac17handle_rx_timeoutEv__async_cb_234,__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_25,__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_27,__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb,__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_26
,__ZN7LoRaMac19on_radio_tx_timeoutEv,__ZN7LoRaMac17handle_tx_timeoutEv__async_cb,__ZN7LoRaMac17handle_tx_timeoutEv__async_cb_40,__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb,__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_11,__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_12,__ZN7LoRaMac30on_mac_state_check_timer_eventEv,__ZN7LoRaMac34handle_mac_state_check_timer_eventEv__async_cb,__ZN7LoRaMac34handle_mac_state_check_timer_eventEv__async_cb_21,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_93,__ZN7LoRaMac25on_tx_delayed_timer_eventEv,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_92,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_100,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_91,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_99,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_89,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_98,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_84,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_97,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_85,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_88,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_90,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_96,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_95,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_86,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_94,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_87,__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_121,__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb
,__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_119,__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_120,__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_118,__ZN7LoRaMac11schedule_txEv__async_cb,__ZN7LoRaMac11schedule_txEv__async_cb_66,__ZN7LoRaMac11schedule_txEv__async_cb_71,__ZN7LoRaMac11schedule_txEv__async_cb_67,__ZN7LoRaMac11schedule_txEv__async_cb_68,__ZN7LoRaMac11schedule_txEv__async_cb_69,__ZN7LoRaMac11schedule_txEv__async_cb_73,__ZN7LoRaMac11schedule_txEv__async_cb_70,__ZN7LoRaMac11schedule_txEv__async_cb_72,__ZN7LoRaMac21send_frame_on_channelEh__async_cb_82,__ZN7LoRaMac21send_frame_on_channelEh__async_cb,__ZN7LoRaMac21send_frame_on_channelEh__async_cb_81,__ZN7LoRaMac21send_frame_on_channelEh__async_cb_80,__ZN7LoRaMac21send_frame_on_channelEh__async_cb_83,__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb_384,__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb_382,__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb_383,__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb,__ZN7LoRaMac29handle_delayed_tx_timer_eventEv__async_cb,__ZN7LoRaMac29handle_delayed_tx_timer_eventEv__async_cb_379,__ZN7LoRaMac18handle_ack_timeoutEv__async_cb,__ZN7LoRaMac18handle_ack_timeoutEv__async_cb_364,__ZN7LoRaMac25on_rx_window1_timer_eventEv,__ZN7LoRaMac22handle_rx1_timer_eventEv__async_cb,__ZN7LoRaMac22handle_rx1_timer_eventEv__async_cb_343,__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_436,__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_435
,__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb,__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_434,__ZN7LoRaMac22handle_rx2_timer_eventEv__async_cb,__ZN7LoRaMac22handle_rx2_timer_eventEv__async_cb_437,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_414,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_415,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_416,__ZN7LoRaMac34handle_mac_state_check_timer_eventEv,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_413,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb,__ZN7LoRaMac29handle_delayed_tx_timer_eventEv,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_412,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_405,__ZN7LoRaMac22handle_rx1_timer_eventEv,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_411,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_406,__ZN7LoRaMac22handle_rx2_timer_eventEv,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_410,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_407,__ZN7LoRaMac18handle_ack_timeoutEv,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_409,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_408,__ZN7LoRaMac10disconnectEv__async_cb_403,__ZN7LoRaMac10disconnectEv__async_cb_402,__ZN7LoRaMac10disconnectEv__async_cb_401,__ZN7LoRaMac10disconnectEv__async_cb_400,__ZN7LoRaMac10disconnectEv__async_cb_399,__ZN7LoRaMac10disconnectEv__async_cb,__ZN7LoRaMac17query_tx_possibleEhP17loramac_tx_info_t__async_cb,__ZN7LoRaMac16add_channel_planERK16lora_channelplan__async_cb
,__ZN7LoRaMac19remove_channel_planEv__async_cb,__ZN7LoRaMac21remove_single_channelEh__async_cb,__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb,__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_337,__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_342,__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_341,__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_339,__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_340,__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_338,__ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t__async_cb,__ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t__async_cb_328,__ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb,__ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_315,__ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_316,__ZN7LoRaMac14handle_tx_doneEv,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_191,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_192,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_193,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_194,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_195,__ZN7LoRaMac15handle_rx_errorEv,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_196,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_197,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_198,__ZN7LoRaMac17handle_tx_timeoutEv,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_199,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_200,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_201,__ZN7LoRaMac17handle_rx_timeoutEv
,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_202,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_203,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_204,__ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan__async_cb,__ZN18LoRaMacChannelPlan11remove_planEv__async_cb,__ZN18LoRaMacChannelPlan11remove_planEv__async_cb_248,__ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb,__ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb_223,__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb,__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_374,__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_375,__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_376,__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_377,__Z11compute_micPKhtS0_jhjPj__async_cb_312,__Z11compute_micPKhtS0_jhjPj__async_cb_311,__Z11compute_micPKhtS0_jhjPj__async_cb_309,__Z11compute_micPKhtS0_jhjPj__async_cb,__Z11compute_micPKhtS0_jhjPj__async_cb_310,__Z11compute_micPKhtS0_jhjPj__async_cb_313,__Z22compute_join_frame_micPKhtS0_Pj__async_cb_333,__Z22compute_join_frame_micPKhtS0_Pj__async_cb_332,__Z22compute_join_frame_micPKhtS0_Pj__async_cb,__Z22compute_join_frame_micPKhtS0_Pj__async_cb_331,__Z22compute_join_frame_micPKhtS0_Pj__async_cb_334,__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_160,__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_159,__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb,__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_157,__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_158,__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_156
,__ZN11LoRaMacMlme22set_tx_continuous_waveEhaafft__async_cb,__ZN7LoRaPHY19request_new_channelEP24new_channel_req_params_s__async_cb,__ZN7LoRaPHY19request_new_channelEP24new_channel_req_params_s__async_cb_395,__ZN7LoRaPHY13apply_cf_listEP15cflist_params_t__async_cb,__ZN7LoRaPHY13apply_cf_listEP15cflist_params_t__async_cb_438,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_419,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_420,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_421,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_422,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_423,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_424,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_425,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_426,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_362,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_356,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_357,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_358,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_359,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_360,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_361,__ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s__async_cb,__ZN7LoRaPHY18dl_channel_requestEP23dl_channel_req_params_s__async_cb,__ZN7LoRaPHY11add_channelEP16channel_params_th__async_cb,__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb,__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_272,__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_273,__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb,__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_205
,__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_206,__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb,__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_165,__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_166,__ZN7LoRaPHY25setup_public_network_modeEb__async_cb,__ZN7LoRaPHY25setup_public_network_modeEb__async_cb_77,__ZN7LoRaPHY25setup_public_network_modeEb__async_cb_78,__ZN7LoRaPHY15setup_rx_windowEbj__async_cb,__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_43,__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_44,__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_45,__ZN7LoRaPHY13get_radio_rngEv__async_cb,__ZN7LoRaPHY13get_radio_rngEv__async_cb_153,__ZN7LoRaPHY13get_radio_rngEv__async_cb_154,__ZN7LoRaPHY11handle_sendEPhh__async_cb_103,__ZN7LoRaPHY11handle_sendEPhh__async_cb,__ZN7LoRaPHY11handle_sendEPhh__async_cb_101,__ZN7LoRaPHY11handle_sendEPhh__async_cb_102,__ZN7LoRaPHY12get_next_ADREbRaS0_Rj__async_cb,__ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb,__ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb_163,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_108,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_110,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_109,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_111,__ZN18LoRaWANTimeHandler4stopER13timer_event_t__async_cb,_mbedtls_ccm_setkey__async_cb_418,_mbedtls_ccm_setkey__async_cb_417,_mbedtls_ccm_setkey__async_cb
,_mbedtls_ccm_free__async_cb,_mbedtls_cipher_free__async_cb,_mbedtls_cipher_setup__async_cb,_mbedtls_cipher_setkey__async_cb,_mbedtls_cipher_setkey__async_cb_326,_mbedtls_cipher_update__async_cb,_mbedtls_cipher_update__async_cb_324,_mbedtls_cipher_update__async_cb_322,_mbedtls_cipher_update__async_cb_323,_ccm_aes_setkey_wrap__async_cb,_ccm_ctx_free__async_cb,_gcm_aes_setkey_wrap__async_cb,_gcm_ctx_free__async_cb,_mbedtls_cipher_cmac_starts__async_cb,_mbedtls_cipher_cmac_update__async_cb_162,_mbedtls_cipher_cmac_update__async_cb_161,_mbedtls_cipher_cmac_update__async_cb,_mbedtls_cipher_cmac_finish__async_cb_155,_mbedtls_cipher_cmac_finish__async_cb,_mbedtls_gcm_setkey__async_cb_117,_mbedtls_gcm_setkey__async_cb_116,_mbedtls_gcm_setkey__async_cb_115,_mbedtls_gcm_setkey__async_cb,_mbedtls_gcm_update__async_cb,_mbedtls_gcm_free__async_cb,_ticker_set_handler__async_cb,_initialize__async_cb,_initialize__async_cb_13,_initialize__async_cb_18,_initialize__async_cb_17
,_initialize__async_cb_14,_initialize__async_cb_15,_initialize__async_cb_16,_schedule_interrupt__async_cb,_schedule_interrupt__async_cb_5,_schedule_interrupt__async_cb_6,_schedule_interrupt__async_cb_7,_schedule_interrupt__async_cb_8,_schedule_interrupt__async_cb_9,_schedule_interrupt__async_cb_10,_ticker_remove_event__async_cb,_ticker_read_us__async_cb_22,_ticker_read_us__async_cb,_mbed_assert_internal__async_cb,_mbed_die__async_cb_65,_mbed_die__async_cb_64,_mbed_die__async_cb_63,_mbed_die__async_cb_62,_mbed_die__async_cb_61,_mbed_die__async_cb_60,_mbed_die__async_cb_59,_mbed_die__async_cb_58,_mbed_die__async_cb_57,_mbed_die__async_cb_56,_mbed_die__async_cb_55,_mbed_die__async_cb_54,_mbed_die__async_cb_53,_mbed_die__async_cb_52,_mbed_die__async_cb_51,_mbed_die__async_cb
,_mbed_error_printf__async_cb,_mbed_error_printf__async_cb_224,_handle_interrupt_in__async_cb,_serial_putc__async_cb_249,_serial_putc__async_cb,__ZN4mbed6TickerD2Ev__async_cb,__ZN4mbed6TickerD2Ev__async_cb_271,__ZN4mbed6TickerD0Ev__async_cb,__ZN4mbed6TickerD0Ev__async_cb_314,__ZN4mbed6Ticker7handlerEv__async_cb,_invoke_ticker__async_cb_327,_invoke_ticker__async_cb,__ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv__async_cb,_wait_ms__async_cb,__GLOBAL__sub_I_main_cpp__async_cb,__GLOBAL__sub_I_main_cpp__async_cb_19,_main__async_cb_34,_main__async_cb_33,_main__async_cb_36,_main__async_cb,__ZL18lora_event_handler11lora_events,_main__async_cb_28,_main__async_cb_29,_main__async_cb_30,_main__async_cb_32,_main__async_cb_31,_main__async_cb_35,__ZL12send_messagev__async_cb_79,__ZL12send_messagev__async_cb,__ZL18lora_event_handler11lora_events__async_cb_49
,__ZL18lora_event_handler11lora_events__async_cb_48,__ZL18lora_event_handler11lora_events__async_cb_47,__ZL18lora_event_handler11lora_events__async_cb_46,__ZL18lora_event_handler11lora_events__async_cb,__ZN4mbed8CallbackIFv11lora_eventsEE13function_callIPS2_EEvPKvS1___async_cb,_putc__async_cb_396,_putc__async_cb,___overflow__async_cb,_fflush__async_cb_171,_fflush__async_cb_170,_fflush__async_cb_172,_fflush__async_cb,___fflush_unlocked__async_cb,___fflush_unlocked__async_cb_207,_vfprintf__async_cb,_vsnprintf__async_cb,_sprintf__async_cb,_vsprintf__async_cb,_printf__async_cb,_putchar__async_cb,_fputc__async_cb_37,_fputc__async_cb,_puts__async_cb,__ZL25default_terminate_handlerv__async_cb,__ZL25default_terminate_handlerv__async_cb_113,_abort_message__async_cb,_abort_message__async_cb_355,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_164,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb,___dynamic_cast__async_cb
,___dynamic_cast__async_cb_253,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_325,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,__ZSt11__terminatePFvvE__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_112,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_4,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_3,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_2,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_1,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_20,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,___cxa_can_catch__async_cb,___cxa_is_pointer_type__async_cb,b54,b55,b56,b57,b58,b59,b60,b61,b62
,b63,b64,b65,b66,b67,b68,b69,b70,b71,b72,b73,b74,b75,b76,b77,b78,b79,b80,b81,b82,b83,b84,b85,b86,b87,b88,b89,b90,b91,b92
,b93,b94,b95,b96,b97,b98,b99,b100,b101,b102,b103,b104,b105,b106,b107,b108,b109,b110,b111,b112,b113,b114,b115,b116,b117,b118,b119,b120,b121,b122
,b123,b124,b125,b126,b127,b128,b129,b130,b131,b132,b133,b134,b135,b136,b137,b138,b139,b140,b141,b142,b143,b144,b145,b146,b147,b148,b149,b150,b151,b152
,b153,b154,b155,b156,b157,b158,b159,b160,b161,b162,b163,b164,b165,b166,b167,b168,b169,b170,b171,b172,b173,b174,b175,b176,b177,b178,b179,b180,b181,b182
,b183,b184,b185,b186,b187,b188,b189,b190,b191,b192,b193,b194,b195,b196,b197,b198,b199,b200,b201,b202,b203,b204,b205,b206,b207,b208,b209,b210,b211,b212
,b213,b214,b215,b216,b217,b218,b219,b220,b221,b222,b223,b224,b225,b226,b227,b228,b229,b230,b231,b232,b233,b234,b235,b236,b237,b238,b239,b240,b241,b242
,b243,b244,b245,b246,b247,b248,b249,b250,b251,b252,b253,b254,b255,b256,b257,b258,b259,b260,b261,b262,b263,b264,b265,b266,b267,b268,b269,b270,b271,b272
,b273,b274,b275,b276,b277,b278,b279,b280,b281,b282,b283,b284,b285,b286,b287,b288,b289,b290,b291,b292,b293,b294,b295,b296,b297,b298,b299,b300,b301,b302
,b303,b304,b305,b306,b307,b308,b309,b310,b311,b312,b313,b314,b315,b316,b317,b318,b319,b320,b321,b322,b323,b324,b325,b326,b327,b328,b329,b330,b331,b332
,b333,b334,b335,b336,b337,b338,b339,b340,b341,b342,b343,b344,b345,b346,b347,b348,b349,b350,b351,b352,b353,b354,b355,b356,b357,b358,b359,b360,b361,b362
,b363,b364,b365,b366,b367];
var FUNCTION_TABLE_vii = [b369,__ZN16SX1276_LoRaRadio10init_radioEP12radio_events,__ZN16SX1276_LoRaRadio7receiveEj,__ZN16SX1276_LoRaRadio11set_channelEj,__ZN16SX1276_LoRaRadio18set_public_networkEb,__ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_,__ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv,__ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_,__ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv,__ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_,__ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv,__ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_,__ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv,__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPvPKv,__ZN4mbed8CallbackIFvPhtsaEE13function_moveINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPvPKv,__ZN7LoRaPHY16set_last_tx_doneEP24set_band_txdone_params_t,__ZN7LoRaPHY13apply_cf_listEP15cflist_params_t,__ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv,__ZN4mbed8CallbackIFv11lora_eventsEE13function_callIPS2_EEvPKvS1_,__ZN4mbed8CallbackIFv11lora_eventsEE13function_moveIPS2_EEvPvPKv,__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t,__ZN12LoRaWANStack23mlme_indication_handlerEP25loramac_mlme_indication_t,b370,b371,b372,b373
,b374,b375,b376];
var FUNCTION_TABLE_viii = [b378,__ZN16SX1276_LoRaRadio4sendEPhh,__ZN16SX1276_LoRaRadio22set_max_payload_lengthE10modem_typeh,__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj,_add_pkcs_padding,b379,b380,b381];
var FUNCTION_TABLE_viiii = [b383,__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b384,b385,b386];
var FUNCTION_TABLE_viiiii = [b388,__ZN4mbed8CallbackIFvPhtsaEE13function_callINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPKvS1_tsa,__ZN7LoRaPHY21compute_rx_win_paramsEahjP18rx_config_params_t,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZN7LoRaMac16on_radio_rx_doneEPhtsa,__ZN7LoRaMac14handle_rx_doneEPhtsa];
var FUNCTION_TABLE_viiiiii = [b390,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib];
var FUNCTION_TABLE_viiiiiiiiiiiiii = [b392,__ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj];
var FUNCTION_TABLE_viiiiiiiiiiiiiii = [b394,__ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb];

  return { __GLOBAL__sub_I_main_cpp: __GLOBAL__sub_I_main_cpp, ___cxa_can_catch: ___cxa_can_catch, ___cxa_is_pointer_type: ___cxa_is_pointer_type, ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, ___uremdi3: ___uremdi3, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _emscripten_alloc_async_context: _emscripten_alloc_async_context, _emscripten_async_resume: _emscripten_async_resume, _emscripten_free_async_context: _emscripten_free_async_context, _emscripten_realloc_async_context: _emscripten_realloc_async_context, _fflush: _fflush, _free: _free, _handle_interrupt_in: _handle_interrupt_in, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _invoke_ticker: _invoke_ticker, _llvm_bswap_i32: _llvm_bswap_i32, _main: _main, _malloc: _malloc, _memcpy: _memcpy, _memset: _memset, _pthread_mutex_lock: _pthread_mutex_lock, _pthread_mutex_unlock: _pthread_mutex_unlock, _sbrk: _sbrk, dynCall_i: dynCall_i, dynCall_ii: dynCall_ii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_iiiiii: dynCall_iiiiii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_v: dynCall_v, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_viii: dynCall_viii, dynCall_viiii: dynCall_viiii, dynCall_viiiii: dynCall_viiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_viiiiiiiiiiiiii: dynCall_viiiiiiiiiiiiii, dynCall_viiiiiiiiiiiiiii: dynCall_viiiiiiiiiiiiiii, establishStackSpace: establishStackSpace, getTempRet0: getTempRet0, runPostSets: runPostSets, setAsync: setAsync, setTempRet0: setTempRet0, setThrew: setThrew, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real___GLOBAL__sub_I_main_cpp = asm["__GLOBAL__sub_I_main_cpp"]; asm["__GLOBAL__sub_I_main_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_main_cpp.apply(null, arguments);
};

var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_can_catch.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_is_pointer_type.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____uremdi3.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__emscripten_alloc_async_context = asm["_emscripten_alloc_async_context"]; asm["_emscripten_alloc_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_alloc_async_context.apply(null, arguments);
};

var real__emscripten_async_resume = asm["_emscripten_async_resume"]; asm["_emscripten_async_resume"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_async_resume.apply(null, arguments);
};

var real__emscripten_free_async_context = asm["_emscripten_free_async_context"]; asm["_emscripten_free_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_free_async_context.apply(null, arguments);
};

var real__emscripten_realloc_async_context = asm["_emscripten_realloc_async_context"]; asm["_emscripten_realloc_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_realloc_async_context.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__handle_interrupt_in = asm["_handle_interrupt_in"]; asm["_handle_interrupt_in"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__handle_interrupt_in.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__invoke_ticker = asm["_invoke_ticker"]; asm["_invoke_ticker"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__invoke_ticker.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__main.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__pthread_mutex_lock = asm["_pthread_mutex_lock"]; asm["_pthread_mutex_lock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_lock.apply(null, arguments);
};

var real__pthread_mutex_unlock = asm["_pthread_mutex_unlock"]; asm["_pthread_mutex_unlock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_unlock.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_getTempRet0.apply(null, arguments);
};

var real_setAsync = asm["setAsync"]; asm["setAsync"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setAsync.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setTempRet0.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
var __GLOBAL__sub_I_main_cpp = Module["__GLOBAL__sub_I_main_cpp"] = asm["__GLOBAL__sub_I_main_cpp"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _emscripten_alloc_async_context = Module["_emscripten_alloc_async_context"] = asm["_emscripten_alloc_async_context"];
var _emscripten_async_resume = Module["_emscripten_async_resume"] = asm["_emscripten_async_resume"];
var _emscripten_free_async_context = Module["_emscripten_free_async_context"] = asm["_emscripten_free_async_context"];
var _emscripten_realloc_async_context = Module["_emscripten_realloc_async_context"] = asm["_emscripten_realloc_async_context"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _free = Module["_free"] = asm["_free"];
var _handle_interrupt_in = Module["_handle_interrupt_in"] = asm["_handle_interrupt_in"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _invoke_ticker = Module["_invoke_ticker"] = asm["_invoke_ticker"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _main = Module["_main"] = asm["_main"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memset = Module["_memset"] = asm["_memset"];
var _pthread_mutex_lock = Module["_pthread_mutex_lock"] = asm["_pthread_mutex_lock"];
var _pthread_mutex_unlock = Module["_pthread_mutex_unlock"] = asm["_pthread_mutex_unlock"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var setAsync = Module["setAsync"] = asm["setAsync"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_viiiiiiiiiiiiii = Module["dynCall_viiiiiiiiiiiiii"] = asm["dynCall_viiiiiiiiiiiiii"];
var dynCall_viiiiiiiiiiiiiii = Module["dynCall_viiiiiiiiiiiiiii"] = asm["dynCall_viiiiiiiiiiiiiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Module["intArrayFromString"]) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["ccall"]) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["cwrap"]) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setValue"]) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getValue"]) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocate"]) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getMemory"]) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["Pointer_stringify"]) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF8"]) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocateUTF8"]) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addRunDependency"]) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["removeRunDependency"]) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS"]) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS_createFolder"]) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPath"]) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDataFile"]) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPreloadedFile"]) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLazyFile"]) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLink"]) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDevice"]) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_unlink"]) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["staticAlloc"]) Module["staticAlloc"] = function() { abort("'staticAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynamicAlloc"]) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["warnOnce"]) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadDynamicLibrary"]) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadWebAssemblyModule"]) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getLEB"]) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFunctionTables"]) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["alignFunctionTables"]) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["registerFunctions"]) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addFunction"]) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["removeFunction"]) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFuncWrapper"]) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["prettyPrint"]) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["makeBigInt"]) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynCall"]) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getCompilerSetting"]) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Module["ALLOC_NORMAL"]) Object.defineProperty(Module, "ALLOC_NORMAL", { get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STACK"]) Object.defineProperty(Module, "ALLOC_STACK", { get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STATIC"]) Object.defineProperty(Module, "ALLOC_STATIC", { get: function() { abort("'ALLOC_STATIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_DYNAMIC"]) Object.defineProperty(Module, "ALLOC_DYNAMIC", { get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_NONE"]) Object.defineProperty(Module, "ALLOC_NONE", { get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    if (typeof Module['locateFile'] === 'function') {
      memoryInitializer = Module['locateFile'](memoryInitializer);
    } else if (Module['memoryInitializerPrefixURL']) {
      memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
    }
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    function doBrowserLoad() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      function useRequest() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
            // If you see this warning, the issue may be that you are using locateFile or memoryInitializerPrefixURL, and defining them in JS. That
            // means that the HTML file doesn't know about them, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}



/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(Module['thisProgram']);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      Module.printErr('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in NO_FILESYSTEM
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = Module['print'];
  var printErr = Module['printErr'];
  var has = false;
  Module['print'] = Module['printErr'] = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = flush_NO_FILESYSTEM;
    if (flush) flush(0);
  } catch(e) {}
  Module['print'] = print;
  Module['printErr'] = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set NO_EXIT_RUNTIME to 0 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      Module.printErr('exit(' + status + ') called, but NO_EXIT_RUNTIME is set, so halting execution but not exiting the runtime or preventing further async execution (build with NO_EXIT_RUNTIME=0, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = exit;

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}






//# sourceMappingURL=lorawan.js.map